
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013918  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c8  1001b918  1001b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000343c  1001b9e0  1001b9e0  0001b9e0  2**3
                  ALLOC
  3 .stack        00000804  1001ee1c  1001ee1c  0001b9e0  2**0
                  ALLOC
  4 .ARM.exidx    00000008  1001f620  1001f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  0001f628  2**0
                  CONTENTS, READONLY
  6 .comment      00000124  00000000  00000000  0001f650  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003438e  00000000  00000000  0001f774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000055f8  00000000  00000000  00053b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000115e0  00000000  00000000  000590fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001070  00000000  00000000  0006a6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013e0  00000000  00000000  0006b74a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025910  00000000  00000000  0006cb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000125b0  00000000  00000000  0009243a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00148a4f  00000000  00000000  000a49ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000477c  00000000  00000000  001ed43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001b918 	.word	0x1001b918
10008068:	1001b918 	.word	0x1001b918
1000806c:	1001b9e0 	.word	0x1001b9e0
10008070:	1001ee1c 	.word	0x1001ee1c
10008074:	1001b9e0 	.word	0x1001b9e0
10008078:	1001b91c 	.word	0x1001b91c
1000807c:	1001b9e4 	.word	0x1001b9e4
10008080:	100185a5 	.word	0x100185a5
10008084:	1000e331 	.word	0x1000e331

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001b9e0 	.word	0x1001b9e0
100080a8:	00000000 	.word	0x00000000
100080ac:	1001f628 	.word	0x1001f628

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001b9e4 	.word	0x1001b9e4
100080dc:	1001f628 	.word	0x1001f628
100080e0:	1001f628 	.word	0x1001f628
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000d9e9 	.word	0x1000d9e9
10008114:	10015309 	.word	0x10015309
10008118:	1001b91c 	.word	0x1001b91c
1000811c:	000f4240 	.word	0x000f4240
10008120:	1001b918 	.word	0x1001b918
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	1001b91c 	.word	0x1001b91c
10008150:	e000e010 	.word	0xe000e010

10008154 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008154:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008156:	4b0d      	ldr	r3, [pc, #52]	; (1000818c <dualtimer_isr_handler+0x38>)
10008158:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000815a:	2b00      	cmp	r3, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000815e:	2201      	movs	r2, #1
10008160:	4b0a      	ldr	r3, [pc, #40]	; (1000818c <dualtimer_isr_handler+0x38>)
10008162:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008164:	4b0a      	ldr	r3, [pc, #40]	; (10008190 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000816c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000816e:	2334      	movs	r3, #52	; 0x34
10008170:	4a06      	ldr	r2, [pc, #24]	; (1000818c <dualtimer_isr_handler+0x38>)
10008172:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008174:	2b00      	cmp	r3, #0
10008176:	d007      	beq.n	10008188 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008178:	2101      	movs	r1, #1
1000817a:	232c      	movs	r3, #44	; 0x2c
1000817c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000817e:	4b05      	ldr	r3, [pc, #20]	; (10008194 <dualtimer_isr_handler+0x40>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d000      	beq.n	10008188 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008186:	4798      	blx	r3
	}
}
10008188:	bd10      	pop	{r4, pc}
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40001000 	.word	0x40001000
10008190:	1001b9fc 	.word	0x1001b9fc
10008194:	1001ba00 	.word	0x1001ba00

10008198 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008198:	2301      	movs	r3, #1
1000819a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000819c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000819e:	2202      	movs	r2, #2
100081a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100081a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081a8:	2200      	movs	r2, #0
100081aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100081ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100081b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100081b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100081b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100081b6:	7602      	strb	r2, [r0, #24]
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)

100081bc <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081bc:	2800      	cmp	r0, #0
100081be:	d102      	bne.n	100081c6 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
100081c0:	4b02      	ldr	r3, [pc, #8]	; (100081cc <dualtimer_get_value+0x10>)
100081c2:	6858      	ldr	r0, [r3, #4]
100081c4:	e001      	b.n	100081ca <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081c6:	4b01      	ldr	r3, [pc, #4]	; (100081cc <dualtimer_get_value+0x10>)
100081c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081ca:	4770      	bx	lr
100081cc:	40001000 	.word	0x40001000

100081d0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081d0:	2800      	cmp	r0, #0
100081d2:	d105      	bne.n	100081e0 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081d4:	4a06      	ldr	r2, [pc, #24]	; (100081f0 <dualtimer_enable+0x20>)
100081d6:	7a11      	ldrb	r1, [r2, #8]
100081d8:	2380      	movs	r3, #128	; 0x80
100081da:	430b      	orrs	r3, r1
100081dc:	7213      	strb	r3, [r2, #8]
100081de:	e005      	b.n	100081ec <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081e0:	4903      	ldr	r1, [pc, #12]	; (100081f0 <dualtimer_enable+0x20>)
100081e2:	2228      	movs	r2, #40	; 0x28
100081e4:	5c88      	ldrb	r0, [r1, r2]
100081e6:	2380      	movs	r3, #128	; 0x80
100081e8:	4303      	orrs	r3, r0
100081ea:	548b      	strb	r3, [r1, r2]
	}
}
100081ec:	4770      	bx	lr
100081ee:	46c0      	nop			; (mov r8, r8)
100081f0:	40001000 	.word	0x40001000

100081f4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081f4:	b570      	push	{r4, r5, r6, lr}
100081f6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081f8:	2004      	movs	r0, #4
100081fa:	4b39      	ldr	r3, [pc, #228]	; (100082e0 <dualtimer_init+0xec>)
100081fc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081fe:	7823      	ldrb	r3, [r4, #0]
10008200:	2b00      	cmp	r3, #0
10008202:	d102      	bne.n	1000820a <dualtimer_init+0x16>
10008204:	7b23      	ldrb	r3, [r4, #12]
10008206:	2b00      	cmp	r3, #0
10008208:	d065      	beq.n	100082d6 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000820a:	4936      	ldr	r1, [pc, #216]	; (100082e4 <dualtimer_init+0xf0>)
1000820c:	68ca      	ldr	r2, [r1, #12]
1000820e:	2320      	movs	r3, #32
10008210:	4313      	orrs	r3, r2
10008212:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008214:	7e22      	ldrb	r2, [r4, #24]
10008216:	698b      	ldr	r3, [r1, #24]
10008218:	2003      	movs	r0, #3
1000821a:	4002      	ands	r2, r0
1000821c:	0112      	lsls	r2, r2, #4
1000821e:	302d      	adds	r0, #45	; 0x2d
10008220:	4383      	bics	r3, r0
10008222:	4313      	orrs	r3, r2
10008224:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008226:	7823      	ldrb	r3, [r4, #0]
10008228:	2b00      	cmp	r3, #0
1000822a:	d026      	beq.n	1000827a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000822c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000822e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008230:	2b00      	cmp	r3, #0
10008232:	d003      	beq.n	1000823c <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008234:	3b02      	subs	r3, #2
10008236:	425d      	negs	r5, r3
10008238:	415d      	adcs	r5, r3
1000823a:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000823c:	78a2      	ldrb	r2, [r4, #2]
1000823e:	0052      	lsls	r2, r2, #1
10008240:	2502      	movs	r5, #2
10008242:	402a      	ands	r2, r5
10008244:	78e3      	ldrb	r3, [r4, #3]
10008246:	009b      	lsls	r3, r3, #2
10008248:	350a      	adds	r5, #10
1000824a:	402b      	ands	r3, r5
1000824c:	431a      	orrs	r2, r3
1000824e:	0015      	movs	r5, r2
10008250:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008252:	7923      	ldrb	r3, [r4, #4]
10008254:	2b00      	cmp	r3, #0
10008256:	d001      	beq.n	1000825c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008258:	2320      	movs	r3, #32
1000825a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000825c:	4b22      	ldr	r3, [pc, #136]	; (100082e8 <dualtimer_init+0xf4>)
1000825e:	68a2      	ldr	r2, [r4, #8]
10008260:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008262:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008264:	491f      	ldr	r1, [pc, #124]	; (100082e4 <dualtimer_init+0xf0>)
10008266:	22c4      	movs	r2, #196	; 0xc4
10008268:	0052      	lsls	r2, r2, #1
1000826a:	5c88      	ldrb	r0, [r1, r2]
1000826c:	2301      	movs	r3, #1
1000826e:	4303      	orrs	r3, r0
10008270:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008272:	2000      	movs	r0, #0
10008274:	4b1d      	ldr	r3, [pc, #116]	; (100082ec <dualtimer_init+0xf8>)
10008276:	4798      	blx	r3
10008278:	e000      	b.n	1000827c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000827a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000827c:	7b23      	ldrb	r3, [r4, #12]
1000827e:	2b00      	cmp	r3, #0
10008280:	d029      	beq.n	100082d6 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008282:	7b63      	ldrb	r3, [r4, #13]
10008284:	2b00      	cmp	r3, #0
10008286:	d005      	beq.n	10008294 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008288:	2b01      	cmp	r3, #1
1000828a:	d005      	beq.n	10008298 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000828c:	2b02      	cmp	r3, #2
1000828e:	d104      	bne.n	1000829a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008290:	2540      	movs	r5, #64	; 0x40
10008292:	e002      	b.n	1000829a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008294:	2501      	movs	r5, #1
10008296:	e000      	b.n	1000829a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008298:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000829a:	7ba3      	ldrb	r3, [r4, #14]
1000829c:	005b      	lsls	r3, r3, #1
1000829e:	2102      	movs	r1, #2
100082a0:	4019      	ands	r1, r3
100082a2:	7be2      	ldrb	r2, [r4, #15]
100082a4:	0092      	lsls	r2, r2, #2
100082a6:	230c      	movs	r3, #12
100082a8:	4013      	ands	r3, r2
100082aa:	430b      	orrs	r3, r1
100082ac:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
100082ae:	7c23      	ldrb	r3, [r4, #16]
100082b0:	2b00      	cmp	r3, #0
100082b2:	d001      	beq.n	100082b8 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100082b4:	2320      	movs	r3, #32
100082b6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082b8:	6962      	ldr	r2, [r4, #20]
100082ba:	4b0b      	ldr	r3, [pc, #44]	; (100082e8 <dualtimer_init+0xf4>)
100082bc:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082be:	2228      	movs	r2, #40	; 0x28
100082c0:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082c2:	4908      	ldr	r1, [pc, #32]	; (100082e4 <dualtimer_init+0xf0>)
100082c4:	3261      	adds	r2, #97	; 0x61
100082c6:	32ff      	adds	r2, #255	; 0xff
100082c8:	5c88      	ldrb	r0, [r1, r2]
100082ca:	2302      	movs	r3, #2
100082cc:	4303      	orrs	r3, r0
100082ce:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100082d0:	2001      	movs	r0, #1
100082d2:	4b06      	ldr	r3, [pc, #24]	; (100082ec <dualtimer_init+0xf8>)
100082d4:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082d6:	4906      	ldr	r1, [pc, #24]	; (100082f0 <dualtimer_init+0xfc>)
100082d8:	201e      	movs	r0, #30
100082da:	4b06      	ldr	r3, [pc, #24]	; (100082f4 <dualtimer_init+0x100>)
100082dc:	4798      	blx	r3
}
100082de:	bd70      	pop	{r4, r5, r6, pc}
100082e0:	1000dd69 	.word	0x1000dd69
100082e4:	4000b000 	.word	0x4000b000
100082e8:	40001000 	.word	0x40001000
100082ec:	100081d1 	.word	0x100081d1
100082f0:	10008155 	.word	0x10008155
100082f4:	1000e1d1 	.word	0x1000e1d1

100082f8 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100082fa:	4647      	mov	r7, r8
100082fc:	b480      	push	{r7}
100082fe:	0017      	movs	r7, r2
10008300:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008302:	b280      	uxth	r0, r0
10008304:	4b1d      	ldr	r3, [pc, #116]	; (1000837c <i2c_read+0x84>)
10008306:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008308:	2201      	movs	r2, #1
1000830a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000830c:	685b      	ldr	r3, [r3, #4]
1000830e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008310:	4b1b      	ldr	r3, [pc, #108]	; (10008380 <i2c_read+0x88>)
10008312:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008314:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008316:	4c1b      	ldr	r4, [pc, #108]	; (10008384 <i2c_read+0x8c>)
10008318:	4e18      	ldr	r6, [pc, #96]	; (1000837c <i2c_read+0x84>)
1000831a:	4d1b      	ldr	r5, [pc, #108]	; (10008388 <i2c_read+0x90>)
1000831c:	e003      	b.n	10008326 <i2c_read+0x2e>
1000831e:	3c01      	subs	r4, #1
10008320:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
10008322:	2c00      	cmp	r4, #0
10008324:	d01f      	beq.n	10008366 <i2c_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008326:	0031      	movs	r1, r6
10008328:	4818      	ldr	r0, [pc, #96]	; (1000838c <i2c_read+0x94>)
1000832a:	47a8      	blx	r5
1000832c:	2800      	cmp	r0, #0
1000832e:	d1f6      	bne.n	1000831e <i2c_read+0x26>
10008330:	4e14      	ldr	r6, [pc, #80]	; (10008384 <i2c_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008332:	4d13      	ldr	r5, [pc, #76]	; (10008380 <i2c_read+0x88>)
10008334:	4c16      	ldr	r4, [pc, #88]	; (10008390 <i2c_read+0x98>)
10008336:	e003      	b.n	10008340 <i2c_read+0x48>
10008338:	3e01      	subs	r6, #1
1000833a:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000833c:	2e00      	cmp	r6, #0
1000833e:	d015      	beq.n	1000836c <i2c_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008340:	0029      	movs	r1, r5
10008342:	4812      	ldr	r0, [pc, #72]	; (1000838c <i2c_read+0x94>)
10008344:	47a0      	blx	r4
10008346:	2800      	cmp	r0, #0
10008348:	d1f6      	bne.n	10008338 <i2c_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000834a:	2f00      	cmp	r7, #0
1000834c:	d011      	beq.n	10008372 <i2c_read+0x7a>
1000834e:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008350:	490b      	ldr	r1, [pc, #44]	; (10008380 <i2c_read+0x88>)
10008352:	684a      	ldr	r2, [r1, #4]
10008354:	5cd2      	ldrb	r2, [r2, r3]
10008356:	4640      	mov	r0, r8
10008358:	54c2      	strb	r2, [r0, r3]
1000835a:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000835c:	b2da      	uxtb	r2, r3
1000835e:	4297      	cmp	r7, r2
10008360:	d8f7      	bhi.n	10008352 <i2c_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008362:	2000      	movs	r0, #0
10008364:	e006      	b.n	10008374 <i2c_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008366:	2001      	movs	r0, #1
10008368:	4240      	negs	r0, r0
1000836a:	e003      	b.n	10008374 <i2c_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000836c:	2001      	movs	r0, #1
1000836e:	4240      	negs	r0, r0
10008370:	e000      	b.n	10008374 <i2c_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008372:	2000      	movs	r0, #0
}
10008374:	bc04      	pop	{r2}
10008376:	4690      	mov	r8, r2
10008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000837a:	46c0      	nop			; (mov r8, r8)
1000837c:	1001d888 	.word	0x1001d888
10008380:	1001d878 	.word	0x1001d878
10008384:	000003e9 	.word	0x000003e9
10008388:	1000d941 	.word	0x1000d941
1000838c:	1001d880 	.word	0x1001d880
10008390:	1000d8e9 	.word	0x1000d8e9

10008394 <i2c_write>:

#elif defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008396:	4c12      	ldr	r4, [pc, #72]	; (100083e0 <i2c_write+0x4c>)
10008398:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000839a:	1c50      	adds	r0, r2, #1
1000839c:	b2c0      	uxtb	r0, r0
1000839e:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100083a0:	6860      	ldr	r0, [r4, #4]
100083a2:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100083a4:	2a00      	cmp	r2, #0
100083a6:	d00e      	beq.n	100083c6 <i2c_write+0x32>
100083a8:	2000      	movs	r0, #0
100083aa:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100083ac:	5c18      	ldrb	r0, [r3, r0]
100083ae:	6865      	ldr	r5, [r4, #4]
100083b0:	5468      	strb	r0, [r5, r1]
100083b2:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083b4:	b2c9      	uxtb	r1, r1
100083b6:	428a      	cmp	r2, r1
100083b8:	d8f7      	bhi.n	100083aa <i2c_write+0x16>
100083ba:	e004      	b.n	100083c6 <i2c_write+0x32>
100083bc:	3c01      	subs	r4, #1
100083be:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100083c0:	2c00      	cmp	r4, #0
100083c2:	d104      	bne.n	100083ce <i2c_write+0x3a>
100083c4:	e009      	b.n	100083da <i2c_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083c6:	4c07      	ldr	r4, [pc, #28]	; (100083e4 <i2c_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083c8:	4e05      	ldr	r6, [pc, #20]	; (100083e0 <i2c_write+0x4c>)
100083ca:	4d07      	ldr	r5, [pc, #28]	; (100083e8 <i2c_write+0x54>)
100083cc:	4f07      	ldr	r7, [pc, #28]	; (100083ec <i2c_write+0x58>)
100083ce:	0031      	movs	r1, r6
100083d0:	0028      	movs	r0, r5
100083d2:	47b8      	blx	r7
100083d4:	2800      	cmp	r0, #0
100083d6:	d1f1      	bne.n	100083bc <i2c_write+0x28>
100083d8:	e001      	b.n	100083de <i2c_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100083da:	2001      	movs	r0, #1
100083dc:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100083de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100083e0:	1001d888 	.word	0x1001d888
100083e4:	000003e9 	.word	0x000003e9
100083e8:	1001d880 	.word	0x1001d880
100083ec:	1000d90d 	.word	0x1000d90d

100083f0 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083f0:	b510      	push	{r4, lr}
100083f2:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083f4:	2324      	movs	r3, #36	; 0x24
100083f6:	4a25      	ldr	r2, [pc, #148]	; (1000848c <set_int_enable+0x9c>)
100083f8:	5cd3      	ldrb	r3, [r2, r3]
100083fa:	2b00      	cmp	r3, #0
100083fc:	d019      	beq.n	10008432 <set_int_enable+0x42>
        if (enable)
100083fe:	2800      	cmp	r0, #0
10008400:	d003      	beq.n	1000840a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008402:	2202      	movs	r2, #2
10008404:	466b      	mov	r3, sp
10008406:	71da      	strb	r2, [r3, #7]
10008408:	e002      	b.n	10008410 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000840a:	2200      	movs	r2, #0
1000840c:	466b      	mov	r3, sp
1000840e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008410:	4b1e      	ldr	r3, [pc, #120]	; (1000848c <set_int_enable+0x9c>)
10008412:	681a      	ldr	r2, [r3, #0]
10008414:	7c51      	ldrb	r1, [r2, #17]
10008416:	685b      	ldr	r3, [r3, #4]
10008418:	7818      	ldrb	r0, [r3, #0]
1000841a:	466b      	mov	r3, sp
1000841c:	3307      	adds	r3, #7
1000841e:	2201      	movs	r2, #1
10008420:	4c1b      	ldr	r4, [pc, #108]	; (10008490 <set_int_enable+0xa0>)
10008422:	47a0      	blx	r4
10008424:	2800      	cmp	r0, #0
10008426:	d127      	bne.n	10008478 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008428:	466b      	mov	r3, sp
1000842a:	79da      	ldrb	r2, [r3, #7]
1000842c:	4b17      	ldr	r3, [pc, #92]	; (1000848c <set_int_enable+0x9c>)
1000842e:	745a      	strb	r2, [r3, #17]
10008430:	e02a      	b.n	10008488 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
10008432:	4b16      	ldr	r3, [pc, #88]	; (1000848c <set_int_enable+0x9c>)
10008434:	7a9b      	ldrb	r3, [r3, #10]
10008436:	2b00      	cmp	r3, #0
10008438:	d021      	beq.n	1000847e <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
1000843a:	2800      	cmp	r0, #0
1000843c:	d008      	beq.n	10008450 <set_int_enable+0x60>
1000843e:	4b13      	ldr	r3, [pc, #76]	; (1000848c <set_int_enable+0x9c>)
10008440:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
10008442:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008444:	2b00      	cmp	r3, #0
10008446:	d11f      	bne.n	10008488 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008448:	2201      	movs	r2, #1
1000844a:	466b      	mov	r3, sp
1000844c:	71da      	strb	r2, [r3, #7]
1000844e:	e002      	b.n	10008456 <set_int_enable+0x66>
        else
            tmp = 0x00;
10008450:	2200      	movs	r2, #0
10008452:	466b      	mov	r3, sp
10008454:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008456:	4b0d      	ldr	r3, [pc, #52]	; (1000848c <set_int_enable+0x9c>)
10008458:	681a      	ldr	r2, [r3, #0]
1000845a:	7c51      	ldrb	r1, [r2, #17]
1000845c:	685b      	ldr	r3, [r3, #4]
1000845e:	7818      	ldrb	r0, [r3, #0]
10008460:	466b      	mov	r3, sp
10008462:	3307      	adds	r3, #7
10008464:	2201      	movs	r2, #1
10008466:	4c0a      	ldr	r4, [pc, #40]	; (10008490 <set_int_enable+0xa0>)
10008468:	47a0      	blx	r4
1000846a:	2800      	cmp	r0, #0
1000846c:	d10a      	bne.n	10008484 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
1000846e:	466b      	mov	r3, sp
10008470:	79da      	ldrb	r2, [r3, #7]
10008472:	4b06      	ldr	r3, [pc, #24]	; (1000848c <set_int_enable+0x9c>)
10008474:	745a      	strb	r2, [r3, #17]
10008476:	e007      	b.n	10008488 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008478:	2001      	movs	r0, #1
1000847a:	4240      	negs	r0, r0
1000847c:	e004      	b.n	10008488 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
1000847e:	2001      	movs	r0, #1
10008480:	4240      	negs	r0, r0
10008482:	e001      	b.n	10008488 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008484:	2001      	movs	r0, #1
10008486:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
10008488:	b002      	add	sp, #8
1000848a:	bd10      	pop	{r4, pc}
1000848c:	1001b920 	.word	0x1001b920
10008490:	10008395 	.word	0x10008395

10008494 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008494:	b510      	push	{r4, lr}
10008496:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008498:	4b79      	ldr	r3, [pc, #484]	; (10008680 <mpu_reset_fifo+0x1ec>)
1000849a:	7a9b      	ldrb	r3, [r3, #10]
1000849c:	2b00      	cmp	r3, #0
1000849e:	d100      	bne.n	100084a2 <mpu_reset_fifo+0xe>
100084a0:	e0ce      	b.n	10008640 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
100084a2:	466b      	mov	r3, sp
100084a4:	3307      	adds	r3, #7
100084a6:	2200      	movs	r2, #0
100084a8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100084aa:	4a75      	ldr	r2, [pc, #468]	; (10008680 <mpu_reset_fifo+0x1ec>)
100084ac:	6811      	ldr	r1, [r2, #0]
100084ae:	7c49      	ldrb	r1, [r1, #17]
100084b0:	6852      	ldr	r2, [r2, #4]
100084b2:	7810      	ldrb	r0, [r2, #0]
100084b4:	2201      	movs	r2, #1
100084b6:	4c73      	ldr	r4, [pc, #460]	; (10008684 <mpu_reset_fifo+0x1f0>)
100084b8:	47a0      	blx	r4
100084ba:	2800      	cmp	r0, #0
100084bc:	d000      	beq.n	100084c0 <mpu_reset_fifo+0x2c>
100084be:	e0c2      	b.n	10008646 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084c0:	4b6f      	ldr	r3, [pc, #444]	; (10008680 <mpu_reset_fifo+0x1ec>)
100084c2:	681a      	ldr	r2, [r3, #0]
100084c4:	7951      	ldrb	r1, [r2, #5]
100084c6:	685b      	ldr	r3, [r3, #4]
100084c8:	7818      	ldrb	r0, [r3, #0]
100084ca:	466b      	mov	r3, sp
100084cc:	3307      	adds	r3, #7
100084ce:	2201      	movs	r2, #1
100084d0:	4c6c      	ldr	r4, [pc, #432]	; (10008684 <mpu_reset_fifo+0x1f0>)
100084d2:	47a0      	blx	r4
100084d4:	2800      	cmp	r0, #0
100084d6:	d000      	beq.n	100084da <mpu_reset_fifo+0x46>
100084d8:	e0b8      	b.n	1000864c <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084da:	4b69      	ldr	r3, [pc, #420]	; (10008680 <mpu_reset_fifo+0x1ec>)
100084dc:	681a      	ldr	r2, [r3, #0]
100084de:	7911      	ldrb	r1, [r2, #4]
100084e0:	685b      	ldr	r3, [r3, #4]
100084e2:	7818      	ldrb	r0, [r3, #0]
100084e4:	466b      	mov	r3, sp
100084e6:	3307      	adds	r3, #7
100084e8:	2201      	movs	r2, #1
100084ea:	4c66      	ldr	r4, [pc, #408]	; (10008684 <mpu_reset_fifo+0x1f0>)
100084ec:	47a0      	blx	r4
100084ee:	2800      	cmp	r0, #0
100084f0:	d000      	beq.n	100084f4 <mpu_reset_fifo+0x60>
100084f2:	e0ae      	b.n	10008652 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
100084f4:	2324      	movs	r3, #36	; 0x24
100084f6:	4a62      	ldr	r2, [pc, #392]	; (10008680 <mpu_reset_fifo+0x1ec>)
100084f8:	5cd3      	ldrb	r3, [r2, r3]
100084fa:	2b00      	cmp	r3, #0
100084fc:	d04f      	beq.n	1000859e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100084fe:	466b      	mov	r3, sp
10008500:	3307      	adds	r3, #7
10008502:	220c      	movs	r2, #12
10008504:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008506:	4a5e      	ldr	r2, [pc, #376]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008508:	6811      	ldr	r1, [r2, #0]
1000850a:	7909      	ldrb	r1, [r1, #4]
1000850c:	6852      	ldr	r2, [r2, #4]
1000850e:	7810      	ldrb	r0, [r2, #0]
10008510:	2201      	movs	r2, #1
10008512:	4c5c      	ldr	r4, [pc, #368]	; (10008684 <mpu_reset_fifo+0x1f0>)
10008514:	47a0      	blx	r4
10008516:	2800      	cmp	r0, #0
10008518:	d000      	beq.n	1000851c <mpu_reset_fifo+0x88>
1000851a:	e09d      	b.n	10008658 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
1000851c:	3032      	adds	r0, #50	; 0x32
1000851e:	4b5a      	ldr	r3, [pc, #360]	; (10008688 <mpu_reset_fifo+0x1f4>)
10008520:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008522:	22c0      	movs	r2, #192	; 0xc0
10008524:	466b      	mov	r3, sp
10008526:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008528:	4b55      	ldr	r3, [pc, #340]	; (10008680 <mpu_reset_fifo+0x1ec>)
1000852a:	7a9b      	ldrb	r3, [r3, #10]
1000852c:	07db      	lsls	r3, r3, #31
1000852e:	d502      	bpl.n	10008536 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
10008530:	3220      	adds	r2, #32
10008532:	466b      	mov	r3, sp
10008534:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008536:	4b52      	ldr	r3, [pc, #328]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008538:	681a      	ldr	r2, [r3, #0]
1000853a:	7911      	ldrb	r1, [r2, #4]
1000853c:	685b      	ldr	r3, [r3, #4]
1000853e:	7818      	ldrb	r0, [r3, #0]
10008540:	466b      	mov	r3, sp
10008542:	3307      	adds	r3, #7
10008544:	2201      	movs	r2, #1
10008546:	4c4f      	ldr	r4, [pc, #316]	; (10008684 <mpu_reset_fifo+0x1f0>)
10008548:	47a0      	blx	r4
1000854a:	2800      	cmp	r0, #0
1000854c:	d000      	beq.n	10008550 <mpu_reset_fifo+0xbc>
1000854e:	e086      	b.n	1000865e <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
10008550:	4b4b      	ldr	r3, [pc, #300]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008552:	7c5b      	ldrb	r3, [r3, #17]
10008554:	2b00      	cmp	r3, #0
10008556:	d003      	beq.n	10008560 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008558:	2202      	movs	r2, #2
1000855a:	466b      	mov	r3, sp
1000855c:	71da      	strb	r2, [r3, #7]
1000855e:	e002      	b.n	10008566 <mpu_reset_fifo+0xd2>
        else
            data = 0;
10008560:	2200      	movs	r2, #0
10008562:	466b      	mov	r3, sp
10008564:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008566:	4b46      	ldr	r3, [pc, #280]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008568:	681a      	ldr	r2, [r3, #0]
1000856a:	7c51      	ldrb	r1, [r2, #17]
1000856c:	685b      	ldr	r3, [r3, #4]
1000856e:	7818      	ldrb	r0, [r3, #0]
10008570:	466b      	mov	r3, sp
10008572:	3307      	adds	r3, #7
10008574:	2201      	movs	r2, #1
10008576:	4c43      	ldr	r4, [pc, #268]	; (10008684 <mpu_reset_fifo+0x1f0>)
10008578:	47a0      	blx	r4
1000857a:	2800      	cmp	r0, #0
1000857c:	d172      	bne.n	10008664 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
1000857e:	466b      	mov	r3, sp
10008580:	3307      	adds	r3, #7
10008582:	2200      	movs	r2, #0
10008584:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008586:	4a3e      	ldr	r2, [pc, #248]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008588:	6811      	ldr	r1, [r2, #0]
1000858a:	7949      	ldrb	r1, [r1, #5]
1000858c:	6852      	ldr	r2, [r2, #4]
1000858e:	7810      	ldrb	r0, [r2, #0]
10008590:	2201      	movs	r2, #1
10008592:	4c3c      	ldr	r4, [pc, #240]	; (10008684 <mpu_reset_fifo+0x1f0>)
10008594:	47a0      	blx	r4
10008596:	1e43      	subs	r3, r0, #1
10008598:	4198      	sbcs	r0, r3
1000859a:	4240      	negs	r0, r0
1000859c:	e06d      	b.n	1000867a <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000859e:	466b      	mov	r3, sp
100085a0:	3307      	adds	r3, #7
100085a2:	2204      	movs	r2, #4
100085a4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a6:	4a36      	ldr	r2, [pc, #216]	; (10008680 <mpu_reset_fifo+0x1ec>)
100085a8:	6811      	ldr	r1, [r2, #0]
100085aa:	7909      	ldrb	r1, [r1, #4]
100085ac:	6852      	ldr	r2, [r2, #4]
100085ae:	7810      	ldrb	r0, [r2, #0]
100085b0:	2201      	movs	r2, #1
100085b2:	4c34      	ldr	r4, [pc, #208]	; (10008684 <mpu_reset_fifo+0x1f0>)
100085b4:	47a0      	blx	r4
100085b6:	2800      	cmp	r0, #0
100085b8:	d157      	bne.n	1000866a <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085ba:	4b31      	ldr	r3, [pc, #196]	; (10008680 <mpu_reset_fifo+0x1ec>)
100085bc:	7c9b      	ldrb	r3, [r3, #18]
100085be:	2b00      	cmp	r3, #0
100085c0:	d103      	bne.n	100085ca <mpu_reset_fifo+0x136>
100085c2:	4b2f      	ldr	r3, [pc, #188]	; (10008680 <mpu_reset_fifo+0x1ec>)
100085c4:	7a9b      	ldrb	r3, [r3, #10]
100085c6:	07db      	lsls	r3, r3, #31
100085c8:	d403      	bmi.n	100085d2 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
100085ca:	2240      	movs	r2, #64	; 0x40
100085cc:	466b      	mov	r3, sp
100085ce:	71da      	strb	r2, [r3, #7]
100085d0:	e002      	b.n	100085d8 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100085d2:	2260      	movs	r2, #96	; 0x60
100085d4:	466b      	mov	r3, sp
100085d6:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085d8:	4b29      	ldr	r3, [pc, #164]	; (10008680 <mpu_reset_fifo+0x1ec>)
100085da:	681a      	ldr	r2, [r3, #0]
100085dc:	7911      	ldrb	r1, [r2, #4]
100085de:	685b      	ldr	r3, [r3, #4]
100085e0:	7818      	ldrb	r0, [r3, #0]
100085e2:	466b      	mov	r3, sp
100085e4:	3307      	adds	r3, #7
100085e6:	2201      	movs	r2, #1
100085e8:	4c26      	ldr	r4, [pc, #152]	; (10008684 <mpu_reset_fifo+0x1f0>)
100085ea:	47a0      	blx	r4
100085ec:	2800      	cmp	r0, #0
100085ee:	d13f      	bne.n	10008670 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
100085f0:	3032      	adds	r0, #50	; 0x32
100085f2:	4b25      	ldr	r3, [pc, #148]	; (10008688 <mpu_reset_fifo+0x1f4>)
100085f4:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
100085f6:	4b22      	ldr	r3, [pc, #136]	; (10008680 <mpu_reset_fifo+0x1ec>)
100085f8:	7c5b      	ldrb	r3, [r3, #17]
100085fa:	2b00      	cmp	r3, #0
100085fc:	d003      	beq.n	10008606 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
100085fe:	2201      	movs	r2, #1
10008600:	466b      	mov	r3, sp
10008602:	71da      	strb	r2, [r3, #7]
10008604:	e002      	b.n	1000860c <mpu_reset_fifo+0x178>
        else
            data = 0;
10008606:	2200      	movs	r2, #0
10008608:	466b      	mov	r3, sp
1000860a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000860c:	4b1c      	ldr	r3, [pc, #112]	; (10008680 <mpu_reset_fifo+0x1ec>)
1000860e:	681a      	ldr	r2, [r3, #0]
10008610:	7c51      	ldrb	r1, [r2, #17]
10008612:	685b      	ldr	r3, [r3, #4]
10008614:	7818      	ldrb	r0, [r3, #0]
10008616:	466b      	mov	r3, sp
10008618:	3307      	adds	r3, #7
1000861a:	2201      	movs	r2, #1
1000861c:	4c19      	ldr	r4, [pc, #100]	; (10008684 <mpu_reset_fifo+0x1f0>)
1000861e:	47a0      	blx	r4
10008620:	2800      	cmp	r0, #0
10008622:	d128      	bne.n	10008676 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008624:	4a16      	ldr	r2, [pc, #88]	; (10008680 <mpu_reset_fifo+0x1ec>)
10008626:	0013      	movs	r3, r2
10008628:	3310      	adds	r3, #16
1000862a:	6811      	ldr	r1, [r2, #0]
1000862c:	7949      	ldrb	r1, [r1, #5]
1000862e:	6852      	ldr	r2, [r2, #4]
10008630:	7810      	ldrb	r0, [r2, #0]
10008632:	2201      	movs	r2, #1
10008634:	4c13      	ldr	r4, [pc, #76]	; (10008684 <mpu_reset_fifo+0x1f0>)
10008636:	47a0      	blx	r4
10008638:	1e43      	subs	r3, r0, #1
1000863a:	4198      	sbcs	r0, r3
1000863c:	4240      	negs	r0, r0
1000863e:	e01c      	b.n	1000867a <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008640:	2001      	movs	r0, #1
10008642:	4240      	negs	r0, r0
10008644:	e019      	b.n	1000867a <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
10008646:	2001      	movs	r0, #1
10008648:	4240      	negs	r0, r0
1000864a:	e016      	b.n	1000867a <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
1000864c:	2001      	movs	r0, #1
1000864e:	4240      	negs	r0, r0
10008650:	e013      	b.n	1000867a <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008652:	2001      	movs	r0, #1
10008654:	4240      	negs	r0, r0
10008656:	e010      	b.n	1000867a <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008658:	2001      	movs	r0, #1
1000865a:	4240      	negs	r0, r0
1000865c:	e00d      	b.n	1000867a <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000865e:	2001      	movs	r0, #1
10008660:	4240      	negs	r0, r0
10008662:	e00a      	b.n	1000867a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008664:	2001      	movs	r0, #1
10008666:	4240      	negs	r0, r0
10008668:	e007      	b.n	1000867a <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000866a:	2001      	movs	r0, #1
1000866c:	4240      	negs	r0, r0
1000866e:	e004      	b.n	1000867a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008670:	2001      	movs	r0, #1
10008672:	4240      	negs	r0, r0
10008674:	e001      	b.n	1000867a <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008676:	2001      	movs	r0, #1
10008678:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
1000867a:	b002      	add	sp, #8
1000867c:	bd10      	pop	{r4, pc}
1000867e:	46c0      	nop			; (mov r8, r8)
10008680:	1001b920 	.word	0x1001b920
10008684:	10008395 	.word	0x10008395
10008688:	10008129 	.word	0x10008129

1000868c <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
1000868c:	4b0e      	ldr	r3, [pc, #56]	; (100086c8 <mpu_get_gyro_fsr+0x3c>)
1000868e:	7a1b      	ldrb	r3, [r3, #8]
10008690:	2b01      	cmp	r3, #1
10008692:	d009      	beq.n	100086a8 <mpu_get_gyro_fsr+0x1c>
10008694:	2b00      	cmp	r3, #0
10008696:	d004      	beq.n	100086a2 <mpu_get_gyro_fsr+0x16>
10008698:	2b02      	cmp	r3, #2
1000869a:	d009      	beq.n	100086b0 <mpu_get_gyro_fsr+0x24>
1000869c:	2b03      	cmp	r3, #3
1000869e:	d00b      	beq.n	100086b8 <mpu_get_gyro_fsr+0x2c>
100086a0:	e00e      	b.n	100086c0 <mpu_get_gyro_fsr+0x34>
    case INV_FSR_250DPS:
        fsr[0] = 250;
100086a2:	23fa      	movs	r3, #250	; 0xfa
100086a4:	8003      	strh	r3, [r0, #0]
        break;
100086a6:	e00d      	b.n	100086c4 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100086a8:	23fa      	movs	r3, #250	; 0xfa
100086aa:	005b      	lsls	r3, r3, #1
100086ac:	8003      	strh	r3, [r0, #0]
        break;
100086ae:	e009      	b.n	100086c4 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
100086b0:	23fa      	movs	r3, #250	; 0xfa
100086b2:	009b      	lsls	r3, r3, #2
100086b4:	8003      	strh	r3, [r0, #0]
        break;
100086b6:	e005      	b.n	100086c4 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
100086b8:	23fa      	movs	r3, #250	; 0xfa
100086ba:	00db      	lsls	r3, r3, #3
100086bc:	8003      	strh	r3, [r0, #0]
        break;
100086be:	e001      	b.n	100086c4 <mpu_get_gyro_fsr+0x38>
    default:
        fsr[0] = 0;
100086c0:	2300      	movs	r3, #0
100086c2:	8003      	strh	r3, [r0, #0]
        break;
    }
    return 0;
}
100086c4:	2000      	movs	r0, #0
100086c6:	4770      	bx	lr
100086c8:	1001b920 	.word	0x1001b920

100086cc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086cc:	b510      	push	{r4, lr}
100086ce:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086d0:	4b24      	ldr	r3, [pc, #144]	; (10008764 <mpu_set_gyro_fsr+0x98>)
100086d2:	7a9b      	ldrb	r3, [r3, #10]
100086d4:	2b00      	cmp	r3, #0
100086d6:	d03b      	beq.n	10008750 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100086d8:	23fa      	movs	r3, #250	; 0xfa
100086da:	005b      	lsls	r3, r3, #1
100086dc:	4298      	cmp	r0, r3
100086de:	d010      	beq.n	10008702 <mpu_set_gyro_fsr+0x36>
100086e0:	d802      	bhi.n	100086e8 <mpu_set_gyro_fsr+0x1c>
100086e2:	28fa      	cmp	r0, #250	; 0xfa
100086e4:	d009      	beq.n	100086fa <mpu_set_gyro_fsr+0x2e>
100086e6:	e036      	b.n	10008756 <mpu_set_gyro_fsr+0x8a>
100086e8:	23fa      	movs	r3, #250	; 0xfa
100086ea:	009b      	lsls	r3, r3, #2
100086ec:	4298      	cmp	r0, r3
100086ee:	d00c      	beq.n	1000870a <mpu_set_gyro_fsr+0x3e>
100086f0:	23fa      	movs	r3, #250	; 0xfa
100086f2:	00db      	lsls	r3, r3, #3
100086f4:	4298      	cmp	r0, r3
100086f6:	d00c      	beq.n	10008712 <mpu_set_gyro_fsr+0x46>
100086f8:	e02d      	b.n	10008756 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
100086fa:	2200      	movs	r2, #0
100086fc:	466b      	mov	r3, sp
100086fe:	71da      	strb	r2, [r3, #7]
        break;
10008700:	e00a      	b.n	10008718 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008702:	2208      	movs	r2, #8
10008704:	466b      	mov	r3, sp
10008706:	71da      	strb	r2, [r3, #7]
        break;
10008708:	e006      	b.n	10008718 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000870a:	2210      	movs	r2, #16
1000870c:	466b      	mov	r3, sp
1000870e:	71da      	strb	r2, [r3, #7]
        break;
10008710:	e002      	b.n	10008718 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008712:	2218      	movs	r2, #24
10008714:	466b      	mov	r3, sp
10008716:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008718:	466b      	mov	r3, sp
1000871a:	3307      	adds	r3, #7
1000871c:	781b      	ldrb	r3, [r3, #0]
1000871e:	4a11      	ldr	r2, [pc, #68]	; (10008764 <mpu_set_gyro_fsr+0x98>)
10008720:	7a12      	ldrb	r2, [r2, #8]
10008722:	08db      	lsrs	r3, r3, #3
        return 0;
10008724:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008726:	429a      	cmp	r2, r3
10008728:	d01a      	beq.n	10008760 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000872a:	4b0e      	ldr	r3, [pc, #56]	; (10008764 <mpu_set_gyro_fsr+0x98>)
1000872c:	681a      	ldr	r2, [r3, #0]
1000872e:	7991      	ldrb	r1, [r2, #6]
10008730:	685b      	ldr	r3, [r3, #4]
10008732:	7818      	ldrb	r0, [r3, #0]
10008734:	466b      	mov	r3, sp
10008736:	3307      	adds	r3, #7
10008738:	2201      	movs	r2, #1
1000873a:	4c0b      	ldr	r4, [pc, #44]	; (10008768 <mpu_set_gyro_fsr+0x9c>)
1000873c:	47a0      	blx	r4
1000873e:	2800      	cmp	r0, #0
10008740:	d10c      	bne.n	1000875c <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008742:	466b      	mov	r3, sp
10008744:	3307      	adds	r3, #7
10008746:	781b      	ldrb	r3, [r3, #0]
10008748:	08db      	lsrs	r3, r3, #3
1000874a:	4a06      	ldr	r2, [pc, #24]	; (10008764 <mpu_set_gyro_fsr+0x98>)
1000874c:	7213      	strb	r3, [r2, #8]
    return 0;
1000874e:	e007      	b.n	10008760 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008750:	2001      	movs	r0, #1
10008752:	4240      	negs	r0, r0
10008754:	e004      	b.n	10008760 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008756:	2001      	movs	r0, #1
10008758:	4240      	negs	r0, r0
1000875a:	e001      	b.n	10008760 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
1000875c:	2001      	movs	r0, #1
1000875e:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008760:	b002      	add	sp, #8
10008762:	bd10      	pop	{r4, pc}
10008764:	1001b920 	.word	0x1001b920
10008768:	10008395 	.word	0x10008395

1000876c <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
1000876c:	4b11      	ldr	r3, [pc, #68]	; (100087b4 <mpu_get_accel_fsr+0x48>)
1000876e:	7a5b      	ldrb	r3, [r3, #9]
10008770:	2b01      	cmp	r3, #1
10008772:	d009      	beq.n	10008788 <mpu_get_accel_fsr+0x1c>
10008774:	2b00      	cmp	r3, #0
10008776:	d004      	beq.n	10008782 <mpu_get_accel_fsr+0x16>
10008778:	2b02      	cmp	r3, #2
1000877a:	d008      	beq.n	1000878e <mpu_get_accel_fsr+0x22>
1000877c:	2b03      	cmp	r3, #3
1000877e:	d009      	beq.n	10008794 <mpu_get_accel_fsr+0x28>
10008780:	e014      	b.n	100087ac <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
10008782:	2302      	movs	r3, #2
10008784:	7003      	strb	r3, [r0, #0]
        break;
10008786:	e007      	b.n	10008798 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008788:	2304      	movs	r3, #4
1000878a:	7003      	strb	r3, [r0, #0]
        break;
1000878c:	e004      	b.n	10008798 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
1000878e:	2308      	movs	r3, #8
10008790:	7003      	strb	r3, [r0, #0]
        break;
10008792:	e001      	b.n	10008798 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
10008794:	2310      	movs	r3, #16
10008796:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008798:	4b06      	ldr	r3, [pc, #24]	; (100087b4 <mpu_get_accel_fsr+0x48>)
1000879a:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
1000879c:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000879e:	2a00      	cmp	r2, #0
100087a0:	d006      	beq.n	100087b0 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100087a2:	7803      	ldrb	r3, [r0, #0]
100087a4:	005b      	lsls	r3, r3, #1
100087a6:	7003      	strb	r3, [r0, #0]
    return 0;
100087a8:	2300      	movs	r3, #0
100087aa:	e001      	b.n	100087b0 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100087ac:	2301      	movs	r3, #1
100087ae:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100087b0:	0018      	movs	r0, r3
100087b2:	4770      	bx	lr
100087b4:	1001b920 	.word	0x1001b920

100087b8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100087b8:	b510      	push	{r4, lr}
100087ba:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087bc:	4b21      	ldr	r3, [pc, #132]	; (10008844 <mpu_set_accel_fsr+0x8c>)
100087be:	7a9b      	ldrb	r3, [r3, #10]
100087c0:	2b00      	cmp	r3, #0
100087c2:	d035      	beq.n	10008830 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100087c4:	2804      	cmp	r0, #4
100087c6:	d00c      	beq.n	100087e2 <mpu_set_accel_fsr+0x2a>
100087c8:	d802      	bhi.n	100087d0 <mpu_set_accel_fsr+0x18>
100087ca:	2802      	cmp	r0, #2
100087cc:	d005      	beq.n	100087da <mpu_set_accel_fsr+0x22>
100087ce:	e032      	b.n	10008836 <mpu_set_accel_fsr+0x7e>
100087d0:	2808      	cmp	r0, #8
100087d2:	d00a      	beq.n	100087ea <mpu_set_accel_fsr+0x32>
100087d4:	2810      	cmp	r0, #16
100087d6:	d00c      	beq.n	100087f2 <mpu_set_accel_fsr+0x3a>
100087d8:	e02d      	b.n	10008836 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100087da:	2200      	movs	r2, #0
100087dc:	466b      	mov	r3, sp
100087de:	71da      	strb	r2, [r3, #7]
        break;
100087e0:	e00a      	b.n	100087f8 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100087e2:	2208      	movs	r2, #8
100087e4:	466b      	mov	r3, sp
100087e6:	71da      	strb	r2, [r3, #7]
        break;
100087e8:	e006      	b.n	100087f8 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100087ea:	2210      	movs	r2, #16
100087ec:	466b      	mov	r3, sp
100087ee:	71da      	strb	r2, [r3, #7]
        break;
100087f0:	e002      	b.n	100087f8 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100087f2:	2218      	movs	r2, #24
100087f4:	466b      	mov	r3, sp
100087f6:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087f8:	466b      	mov	r3, sp
100087fa:	3307      	adds	r3, #7
100087fc:	781b      	ldrb	r3, [r3, #0]
100087fe:	4a11      	ldr	r2, [pc, #68]	; (10008844 <mpu_set_accel_fsr+0x8c>)
10008800:	7a52      	ldrb	r2, [r2, #9]
10008802:	08db      	lsrs	r3, r3, #3
        return 0;
10008804:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008806:	429a      	cmp	r2, r3
10008808:	d01a      	beq.n	10008840 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000880a:	4b0e      	ldr	r3, [pc, #56]	; (10008844 <mpu_set_accel_fsr+0x8c>)
1000880c:	681a      	ldr	r2, [r3, #0]
1000880e:	79d1      	ldrb	r1, [r2, #7]
10008810:	685b      	ldr	r3, [r3, #4]
10008812:	7818      	ldrb	r0, [r3, #0]
10008814:	466b      	mov	r3, sp
10008816:	3307      	adds	r3, #7
10008818:	2201      	movs	r2, #1
1000881a:	4c0b      	ldr	r4, [pc, #44]	; (10008848 <mpu_set_accel_fsr+0x90>)
1000881c:	47a0      	blx	r4
1000881e:	2800      	cmp	r0, #0
10008820:	d10c      	bne.n	1000883c <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008822:	466b      	mov	r3, sp
10008824:	3307      	adds	r3, #7
10008826:	781b      	ldrb	r3, [r3, #0]
10008828:	08db      	lsrs	r3, r3, #3
1000882a:	4a06      	ldr	r2, [pc, #24]	; (10008844 <mpu_set_accel_fsr+0x8c>)
1000882c:	7253      	strb	r3, [r2, #9]
    return 0;
1000882e:	e007      	b.n	10008840 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008830:	2001      	movs	r0, #1
10008832:	4240      	negs	r0, r0
10008834:	e004      	b.n	10008840 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008836:	2001      	movs	r0, #1
10008838:	4240      	negs	r0, r0
1000883a:	e001      	b.n	10008840 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
1000883c:	2001      	movs	r0, #1
1000883e:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008840:	b002      	add	sp, #8
10008842:	bd10      	pop	{r4, pc}
10008844:	1001b920 	.word	0x1001b920
10008848:	10008395 	.word	0x10008395

1000884c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000884c:	b510      	push	{r4, lr}
1000884e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008850:	4b2b      	ldr	r3, [pc, #172]	; (10008900 <mpu_set_lpf+0xb4>)
10008852:	7a9b      	ldrb	r3, [r3, #10]
10008854:	2b00      	cmp	r3, #0
10008856:	d049      	beq.n	100088ec <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008858:	28bb      	cmp	r0, #187	; 0xbb
1000885a:	d903      	bls.n	10008864 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
1000885c:	2201      	movs	r2, #1
1000885e:	466b      	mov	r3, sp
10008860:	71da      	strb	r2, [r3, #7]
10008862:	e01a      	b.n	1000889a <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008864:	2861      	cmp	r0, #97	; 0x61
10008866:	d903      	bls.n	10008870 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008868:	2202      	movs	r2, #2
1000886a:	466b      	mov	r3, sp
1000886c:	71da      	strb	r2, [r3, #7]
1000886e:	e014      	b.n	1000889a <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008870:	2829      	cmp	r0, #41	; 0x29
10008872:	d903      	bls.n	1000887c <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008874:	2203      	movs	r2, #3
10008876:	466b      	mov	r3, sp
10008878:	71da      	strb	r2, [r3, #7]
1000887a:	e00e      	b.n	1000889a <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
1000887c:	2813      	cmp	r0, #19
1000887e:	d903      	bls.n	10008888 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008880:	2204      	movs	r2, #4
10008882:	466b      	mov	r3, sp
10008884:	71da      	strb	r2, [r3, #7]
10008886:	e008      	b.n	1000889a <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008888:	2809      	cmp	r0, #9
1000888a:	d903      	bls.n	10008894 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
1000888c:	2205      	movs	r2, #5
1000888e:	466b      	mov	r3, sp
10008890:	71da      	strb	r2, [r3, #7]
10008892:	e002      	b.n	1000889a <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
10008894:	2206      	movs	r2, #6
10008896:	466b      	mov	r3, sp
10008898:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
1000889a:	4b19      	ldr	r3, [pc, #100]	; (10008900 <mpu_set_lpf+0xb4>)
1000889c:	7ada      	ldrb	r2, [r3, #11]
1000889e:	466b      	mov	r3, sp
100088a0:	3307      	adds	r3, #7
100088a2:	781b      	ldrb	r3, [r3, #0]
        return 0;
100088a4:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100088a6:	429a      	cmp	r2, r3
100088a8:	d028      	beq.n	100088fc <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100088aa:	4b15      	ldr	r3, [pc, #84]	; (10008900 <mpu_set_lpf+0xb4>)
100088ac:	681a      	ldr	r2, [r3, #0]
100088ae:	7891      	ldrb	r1, [r2, #2]
100088b0:	685b      	ldr	r3, [r3, #4]
100088b2:	7818      	ldrb	r0, [r3, #0]
100088b4:	466b      	mov	r3, sp
100088b6:	3307      	adds	r3, #7
100088b8:	2201      	movs	r2, #1
100088ba:	4c12      	ldr	r4, [pc, #72]	; (10008904 <mpu_set_lpf+0xb8>)
100088bc:	47a0      	blx	r4
100088be:	2800      	cmp	r0, #0
100088c0:	d117      	bne.n	100088f2 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100088c2:	466b      	mov	r3, sp
100088c4:	3307      	adds	r3, #7
100088c6:	7819      	ldrb	r1, [r3, #0]
100088c8:	2240      	movs	r2, #64	; 0x40
100088ca:	430a      	orrs	r2, r1
100088cc:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100088ce:	4a0c      	ldr	r2, [pc, #48]	; (10008900 <mpu_set_lpf+0xb4>)
100088d0:	6811      	ldr	r1, [r2, #0]
100088d2:	7a09      	ldrb	r1, [r1, #8]
100088d4:	6852      	ldr	r2, [r2, #4]
100088d6:	7810      	ldrb	r0, [r2, #0]
100088d8:	2201      	movs	r2, #1
100088da:	4c0a      	ldr	r4, [pc, #40]	; (10008904 <mpu_set_lpf+0xb8>)
100088dc:	47a0      	blx	r4
100088de:	2800      	cmp	r0, #0
100088e0:	d10a      	bne.n	100088f8 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100088e2:	466b      	mov	r3, sp
100088e4:	79da      	ldrb	r2, [r3, #7]
100088e6:	4b06      	ldr	r3, [pc, #24]	; (10008900 <mpu_set_lpf+0xb4>)
100088e8:	72da      	strb	r2, [r3, #11]
    return 0;
100088ea:	e007      	b.n	100088fc <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100088ec:	2001      	movs	r0, #1
100088ee:	4240      	negs	r0, r0
100088f0:	e004      	b.n	100088fc <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100088f2:	2001      	movs	r0, #1
100088f4:	4240      	negs	r0, r0
100088f6:	e001      	b.n	100088fc <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100088f8:	2001      	movs	r0, #1
100088fa:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100088fc:	b002      	add	sp, #8
100088fe:	bd10      	pop	{r4, pc}
10008900:	1001b920 	.word	0x1001b920
10008904:	10008395 	.word	0x10008395

10008908 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008908:	2324      	movs	r3, #36	; 0x24
1000890a:	4a05      	ldr	r2, [pc, #20]	; (10008920 <mpu_get_sample_rate+0x18>)
1000890c:	5cd3      	ldrb	r3, [r2, r3]
1000890e:	2b00      	cmp	r3, #0
10008910:	d103      	bne.n	1000891a <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008912:	89d3      	ldrh	r3, [r2, #14]
10008914:	8003      	strh	r3, [r0, #0]
    return 0;
10008916:	2000      	movs	r0, #0
10008918:	e001      	b.n	1000891e <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
1000891a:	2001      	movs	r0, #1
1000891c:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
1000891e:	4770      	bx	lr
10008920:	1001b920 	.word	0x1001b920

10008924 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008924:	b530      	push	{r4, r5, lr}
10008926:	b083      	sub	sp, #12
10008928:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000892a:	d020      	beq.n	1000896e <mpu_set_compass_sample_rate+0x4a>
1000892c:	4b17      	ldr	r3, [pc, #92]	; (1000898c <mpu_set_compass_sample_rate+0x68>)
1000892e:	89d8      	ldrh	r0, [r3, #14]
10008930:	4281      	cmp	r1, r0
10008932:	d81f      	bhi.n	10008974 <mpu_set_compass_sample_rate+0x50>
10008934:	2964      	cmp	r1, #100	; 0x64
10008936:	d820      	bhi.n	1000897a <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008938:	466b      	mov	r3, sp
1000893a:	1ddc      	adds	r4, r3, #7
1000893c:	4b14      	ldr	r3, [pc, #80]	; (10008990 <mpu_set_compass_sample_rate+0x6c>)
1000893e:	4798      	blx	r3
10008940:	3801      	subs	r0, #1
10008942:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008944:	4b11      	ldr	r3, [pc, #68]	; (1000898c <mpu_set_compass_sample_rate+0x68>)
10008946:	2224      	movs	r2, #36	; 0x24
10008948:	6819      	ldr	r1, [r3, #0]
1000894a:	5c89      	ldrb	r1, [r1, r2]
1000894c:	685b      	ldr	r3, [r3, #4]
1000894e:	7818      	ldrb	r0, [r3, #0]
10008950:	0023      	movs	r3, r4
10008952:	3a23      	subs	r2, #35	; 0x23
10008954:	4c0f      	ldr	r4, [pc, #60]	; (10008994 <mpu_set_compass_sample_rate+0x70>)
10008956:	47a0      	blx	r4
10008958:	1e04      	subs	r4, r0, #0
1000895a:	d111      	bne.n	10008980 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
1000895c:	4d0b      	ldr	r5, [pc, #44]	; (1000898c <mpu_set_compass_sample_rate+0x68>)
1000895e:	89e8      	ldrh	r0, [r5, #14]
10008960:	466b      	mov	r3, sp
10008962:	79d9      	ldrb	r1, [r3, #7]
10008964:	3101      	adds	r1, #1
10008966:	4b0c      	ldr	r3, [pc, #48]	; (10008998 <mpu_set_compass_sample_rate+0x74>)
10008968:	4798      	blx	r3
1000896a:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
1000896c:	e00a      	b.n	10008984 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
1000896e:	2401      	movs	r4, #1
10008970:	4264      	negs	r4, r4
10008972:	e007      	b.n	10008984 <mpu_set_compass_sample_rate+0x60>
10008974:	2401      	movs	r4, #1
10008976:	4264      	negs	r4, r4
10008978:	e004      	b.n	10008984 <mpu_set_compass_sample_rate+0x60>
1000897a:	2401      	movs	r4, #1
1000897c:	4264      	negs	r4, r4
1000897e:	e001      	b.n	10008984 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008980:	2401      	movs	r4, #1
10008982:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008984:	0020      	movs	r0, r4
10008986:	b003      	add	sp, #12
10008988:	bd30      	pop	{r4, r5, pc}
1000898a:	46c0      	nop			; (mov r8, r8)
1000898c:	1001b920 	.word	0x1001b920
10008990:	10015309 	.word	0x10015309
10008994:	10008395 	.word	0x10008395
10008998:	1001541d 	.word	0x1001541d

1000899c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1000899c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000899e:	2324      	movs	r3, #36	; 0x24
100089a0:	4a16      	ldr	r2, [pc, #88]	; (100089fc <mpu_configure_fifo+0x60>)
100089a2:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
100089a4:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089a6:	2b00      	cmp	r3, #0
100089a8:	d126      	bne.n	100089f8 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
100089aa:	7a94      	ldrb	r4, [r2, #10]
100089ac:	2c00      	cmp	r4, #0
100089ae:	d015      	beq.n	100089dc <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
100089b0:	2301      	movs	r3, #1
100089b2:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
100089b4:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
100089b6:	4004      	ands	r4, r0
100089b8:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
100089ba:	1b04      	subs	r4, r0, r4
100089bc:	1e63      	subs	r3, r4, #1
100089be:	419c      	sbcs	r4, r3
100089c0:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
100089c2:	2800      	cmp	r0, #0
100089c4:	d10d      	bne.n	100089e2 <mpu_configure_fifo+0x46>
100089c6:	7d13      	ldrb	r3, [r2, #20]
100089c8:	2b00      	cmp	r3, #0
100089ca:	d112      	bne.n	100089f2 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
100089cc:	4b0c      	ldr	r3, [pc, #48]	; (10008a00 <mpu_configure_fifo+0x64>)
100089ce:	4798      	blx	r3
100089d0:	e012      	b.n	100089f8 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
100089d2:	4b0a      	ldr	r3, [pc, #40]	; (100089fc <mpu_configure_fifo+0x60>)
100089d4:	741d      	strb	r5, [r3, #16]
                return -1;
100089d6:	2401      	movs	r4, #1
100089d8:	4264      	negs	r4, r4
100089da:	e00d      	b.n	100089f8 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
100089dc:	2401      	movs	r4, #1
100089de:	4264      	negs	r4, r4
100089e0:	e00a      	b.n	100089f8 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089e2:	2001      	movs	r0, #1
100089e4:	4b06      	ldr	r3, [pc, #24]	; (10008a00 <mpu_configure_fifo+0x64>)
100089e6:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
100089e8:	4b06      	ldr	r3, [pc, #24]	; (10008a04 <mpu_configure_fifo+0x68>)
100089ea:	4798      	blx	r3
100089ec:	2800      	cmp	r0, #0
100089ee:	d003      	beq.n	100089f8 <mpu_configure_fifo+0x5c>
100089f0:	e7ef      	b.n	100089d2 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089f2:	2001      	movs	r0, #1
100089f4:	4b02      	ldr	r3, [pc, #8]	; (10008a00 <mpu_configure_fifo+0x64>)
100089f6:	4798      	blx	r3
            }
        }
    }

    return result;
}
100089f8:	0020      	movs	r0, r4
100089fa:	bd70      	pop	{r4, r5, r6, pc}
100089fc:	1001b920 	.word	0x1001b920
10008a00:	100083f1 	.word	0x100083f1
10008a04:	10008495 	.word	0x10008495

10008a08 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008a08:	b530      	push	{r4, r5, lr}
10008a0a:	b083      	sub	sp, #12
10008a0c:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008a0e:	4b59      	ldr	r3, [pc, #356]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a10:	7c9b      	ldrb	r3, [r3, #18]
10008a12:	4283      	cmp	r3, r0
10008a14:	d100      	bne.n	10008a18 <mpu_set_bypass+0x10>
10008a16:	e097      	b.n	10008b48 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008a18:	2800      	cmp	r0, #0
10008a1a:	d042      	beq.n	10008aa2 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a1c:	4b55      	ldr	r3, [pc, #340]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a1e:	681a      	ldr	r2, [r3, #0]
10008a20:	7911      	ldrb	r1, [r2, #4]
10008a22:	685b      	ldr	r3, [r3, #4]
10008a24:	7818      	ldrb	r0, [r3, #0]
10008a26:	466b      	mov	r3, sp
10008a28:	3307      	adds	r3, #7
10008a2a:	2201      	movs	r2, #1
10008a2c:	4d52      	ldr	r5, [pc, #328]	; (10008b78 <mpu_set_bypass+0x170>)
10008a2e:	47a8      	blx	r5
10008a30:	2800      	cmp	r0, #0
10008a32:	d000      	beq.n	10008a36 <mpu_set_bypass+0x2e>
10008a34:	e08a      	b.n	10008b4c <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008a36:	466b      	mov	r3, sp
10008a38:	3307      	adds	r3, #7
10008a3a:	781a      	ldrb	r2, [r3, #0]
10008a3c:	2120      	movs	r1, #32
10008a3e:	438a      	bics	r2, r1
10008a40:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a42:	4a4c      	ldr	r2, [pc, #304]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a44:	6811      	ldr	r1, [r2, #0]
10008a46:	7909      	ldrb	r1, [r1, #4]
10008a48:	6852      	ldr	r2, [r2, #4]
10008a4a:	7810      	ldrb	r0, [r2, #0]
10008a4c:	2201      	movs	r2, #1
10008a4e:	4d4b      	ldr	r5, [pc, #300]	; (10008b7c <mpu_set_bypass+0x174>)
10008a50:	47a8      	blx	r5
10008a52:	2800      	cmp	r0, #0
10008a54:	d17d      	bne.n	10008b52 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008a56:	3003      	adds	r0, #3
10008a58:	4b49      	ldr	r3, [pc, #292]	; (10008b80 <mpu_set_bypass+0x178>)
10008a5a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008a5c:	2202      	movs	r2, #2
10008a5e:	466b      	mov	r3, sp
10008a60:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008a62:	2322      	movs	r3, #34	; 0x22
10008a64:	4a43      	ldr	r2, [pc, #268]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a66:	5cd3      	ldrb	r3, [r2, r3]
10008a68:	2b00      	cmp	r3, #0
10008a6a:	d002      	beq.n	10008a72 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008a6c:	2282      	movs	r2, #130	; 0x82
10008a6e:	466b      	mov	r3, sp
10008a70:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008a72:	2323      	movs	r3, #35	; 0x23
10008a74:	4a3f      	ldr	r2, [pc, #252]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a76:	5cd3      	ldrb	r3, [r2, r3]
10008a78:	2b00      	cmp	r3, #0
10008a7a:	d005      	beq.n	10008a88 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a7c:	466b      	mov	r3, sp
10008a7e:	1dda      	adds	r2, r3, #7
10008a80:	79d9      	ldrb	r1, [r3, #7]
10008a82:	2330      	movs	r3, #48	; 0x30
10008a84:	430b      	orrs	r3, r1
10008a86:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008a88:	4b3a      	ldr	r3, [pc, #232]	; (10008b74 <mpu_set_bypass+0x16c>)
10008a8a:	681a      	ldr	r2, [r3, #0]
10008a8c:	7dd1      	ldrb	r1, [r2, #23]
10008a8e:	685b      	ldr	r3, [r3, #4]
10008a90:	7818      	ldrb	r0, [r3, #0]
10008a92:	466b      	mov	r3, sp
10008a94:	3307      	adds	r3, #7
10008a96:	2201      	movs	r2, #1
10008a98:	4d38      	ldr	r5, [pc, #224]	; (10008b7c <mpu_set_bypass+0x174>)
10008a9a:	47a8      	blx	r5
10008a9c:	2800      	cmp	r0, #0
10008a9e:	d04f      	beq.n	10008b40 <mpu_set_bypass+0x138>
10008aa0:	e05a      	b.n	10008b58 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008aa2:	4b34      	ldr	r3, [pc, #208]	; (10008b74 <mpu_set_bypass+0x16c>)
10008aa4:	681a      	ldr	r2, [r3, #0]
10008aa6:	7911      	ldrb	r1, [r2, #4]
10008aa8:	685b      	ldr	r3, [r3, #4]
10008aaa:	7818      	ldrb	r0, [r3, #0]
10008aac:	466b      	mov	r3, sp
10008aae:	3307      	adds	r3, #7
10008ab0:	2201      	movs	r2, #1
10008ab2:	4d31      	ldr	r5, [pc, #196]	; (10008b78 <mpu_set_bypass+0x170>)
10008ab4:	47a8      	blx	r5
10008ab6:	2800      	cmp	r0, #0
10008ab8:	d151      	bne.n	10008b5e <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008aba:	4b2e      	ldr	r3, [pc, #184]	; (10008b74 <mpu_set_bypass+0x16c>)
10008abc:	7a9b      	ldrb	r3, [r3, #10]
10008abe:	07db      	lsls	r3, r3, #31
10008ac0:	d506      	bpl.n	10008ad0 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008ac2:	466b      	mov	r3, sp
10008ac4:	1dda      	adds	r2, r3, #7
10008ac6:	79d9      	ldrb	r1, [r3, #7]
10008ac8:	2320      	movs	r3, #32
10008aca:	430b      	orrs	r3, r1
10008acc:	7013      	strb	r3, [r2, #0]
10008ace:	e005      	b.n	10008adc <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008ad0:	466b      	mov	r3, sp
10008ad2:	1dda      	adds	r2, r3, #7
10008ad4:	79db      	ldrb	r3, [r3, #7]
10008ad6:	2120      	movs	r1, #32
10008ad8:	438b      	bics	r3, r1
10008ada:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008adc:	4b25      	ldr	r3, [pc, #148]	; (10008b74 <mpu_set_bypass+0x16c>)
10008ade:	681a      	ldr	r2, [r3, #0]
10008ae0:	7911      	ldrb	r1, [r2, #4]
10008ae2:	685b      	ldr	r3, [r3, #4]
10008ae4:	7818      	ldrb	r0, [r3, #0]
10008ae6:	466b      	mov	r3, sp
10008ae8:	3307      	adds	r3, #7
10008aea:	2201      	movs	r2, #1
10008aec:	4d23      	ldr	r5, [pc, #140]	; (10008b7c <mpu_set_bypass+0x174>)
10008aee:	47a8      	blx	r5
10008af0:	2800      	cmp	r0, #0
10008af2:	d137      	bne.n	10008b64 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008af4:	3003      	adds	r0, #3
10008af6:	4b22      	ldr	r3, [pc, #136]	; (10008b80 <mpu_set_bypass+0x178>)
10008af8:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008afa:	2322      	movs	r3, #34	; 0x22
10008afc:	4a1d      	ldr	r2, [pc, #116]	; (10008b74 <mpu_set_bypass+0x16c>)
10008afe:	5cd3      	ldrb	r3, [r2, r3]
10008b00:	2b00      	cmp	r3, #0
10008b02:	d003      	beq.n	10008b0c <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008b04:	2280      	movs	r2, #128	; 0x80
10008b06:	466b      	mov	r3, sp
10008b08:	71da      	strb	r2, [r3, #7]
10008b0a:	e002      	b.n	10008b12 <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008b0c:	2200      	movs	r2, #0
10008b0e:	466b      	mov	r3, sp
10008b10:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b12:	2323      	movs	r3, #35	; 0x23
10008b14:	4a17      	ldr	r2, [pc, #92]	; (10008b74 <mpu_set_bypass+0x16c>)
10008b16:	5cd3      	ldrb	r3, [r2, r3]
10008b18:	2b00      	cmp	r3, #0
10008b1a:	d005      	beq.n	10008b28 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b1c:	466b      	mov	r3, sp
10008b1e:	1dda      	adds	r2, r3, #7
10008b20:	79d9      	ldrb	r1, [r3, #7]
10008b22:	2330      	movs	r3, #48	; 0x30
10008b24:	430b      	orrs	r3, r1
10008b26:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b28:	4b12      	ldr	r3, [pc, #72]	; (10008b74 <mpu_set_bypass+0x16c>)
10008b2a:	681a      	ldr	r2, [r3, #0]
10008b2c:	7dd1      	ldrb	r1, [r2, #23]
10008b2e:	685b      	ldr	r3, [r3, #4]
10008b30:	7818      	ldrb	r0, [r3, #0]
10008b32:	466b      	mov	r3, sp
10008b34:	3307      	adds	r3, #7
10008b36:	2201      	movs	r2, #1
10008b38:	4d10      	ldr	r5, [pc, #64]	; (10008b7c <mpu_set_bypass+0x174>)
10008b3a:	47a8      	blx	r5
10008b3c:	2800      	cmp	r0, #0
10008b3e:	d114      	bne.n	10008b6a <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008b40:	4b0c      	ldr	r3, [pc, #48]	; (10008b74 <mpu_set_bypass+0x16c>)
10008b42:	749c      	strb	r4, [r3, #18]
    return 0;
10008b44:	2000      	movs	r0, #0
10008b46:	e012      	b.n	10008b6e <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008b48:	2000      	movs	r0, #0
10008b4a:	e010      	b.n	10008b6e <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b4c:	2001      	movs	r0, #1
10008b4e:	4240      	negs	r0, r0
10008b50:	e00d      	b.n	10008b6e <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b52:	2001      	movs	r0, #1
10008b54:	4240      	negs	r0, r0
10008b56:	e00a      	b.n	10008b6e <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b58:	2001      	movs	r0, #1
10008b5a:	4240      	negs	r0, r0
10008b5c:	e007      	b.n	10008b6e <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b5e:	2001      	movs	r0, #1
10008b60:	4240      	negs	r0, r0
10008b62:	e004      	b.n	10008b6e <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b64:	2001      	movs	r0, #1
10008b66:	4240      	negs	r0, r0
10008b68:	e001      	b.n	10008b6e <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b6a:	2001      	movs	r0, #1
10008b6c:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008b6e:	b003      	add	sp, #12
10008b70:	bd30      	pop	{r4, r5, pc}
10008b72:	46c0      	nop			; (mov r8, r8)
10008b74:	1001b920 	.word	0x1001b920
10008b78:	100082f9 	.word	0x100082f9
10008b7c:	10008395 	.word	0x10008395
10008b80:	10008129 	.word	0x10008129

10008b84 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008b84:	b530      	push	{r4, r5, lr}
10008b86:	b083      	sub	sp, #12
10008b88:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008b8a:	2323      	movs	r3, #35	; 0x23
10008b8c:	4a1c      	ldr	r2, [pc, #112]	; (10008c00 <mpu_set_int_latched+0x7c>)
10008b8e:	5cd3      	ldrb	r3, [r2, r3]
10008b90:	4283      	cmp	r3, r0
10008b92:	d02e      	beq.n	10008bf2 <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008b94:	2800      	cmp	r0, #0
10008b96:	d003      	beq.n	10008ba0 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b98:	2230      	movs	r2, #48	; 0x30
10008b9a:	466b      	mov	r3, sp
10008b9c:	71da      	strb	r2, [r3, #7]
10008b9e:	e002      	b.n	10008ba6 <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008ba0:	2200      	movs	r2, #0
10008ba2:	466b      	mov	r3, sp
10008ba4:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008ba6:	4b16      	ldr	r3, [pc, #88]	; (10008c00 <mpu_set_int_latched+0x7c>)
10008ba8:	7c9b      	ldrb	r3, [r3, #18]
10008baa:	2b00      	cmp	r3, #0
10008bac:	d005      	beq.n	10008bba <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008bae:	466b      	mov	r3, sp
10008bb0:	1dda      	adds	r2, r3, #7
10008bb2:	79d9      	ldrb	r1, [r3, #7]
10008bb4:	2302      	movs	r3, #2
10008bb6:	430b      	orrs	r3, r1
10008bb8:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008bba:	2322      	movs	r3, #34	; 0x22
10008bbc:	4a10      	ldr	r2, [pc, #64]	; (10008c00 <mpu_set_int_latched+0x7c>)
10008bbe:	5cd3      	ldrb	r3, [r2, r3]
10008bc0:	2b00      	cmp	r3, #0
10008bc2:	d006      	beq.n	10008bd2 <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008bc4:	466b      	mov	r3, sp
10008bc6:	1dda      	adds	r2, r3, #7
10008bc8:	79db      	ldrb	r3, [r3, #7]
10008bca:	2180      	movs	r1, #128	; 0x80
10008bcc:	4249      	negs	r1, r1
10008bce:	430b      	orrs	r3, r1
10008bd0:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bd2:	4b0b      	ldr	r3, [pc, #44]	; (10008c00 <mpu_set_int_latched+0x7c>)
10008bd4:	681a      	ldr	r2, [r3, #0]
10008bd6:	7dd1      	ldrb	r1, [r2, #23]
10008bd8:	685b      	ldr	r3, [r3, #4]
10008bda:	7818      	ldrb	r0, [r3, #0]
10008bdc:	466b      	mov	r3, sp
10008bde:	3307      	adds	r3, #7
10008be0:	2201      	movs	r2, #1
10008be2:	4d08      	ldr	r5, [pc, #32]	; (10008c04 <mpu_set_int_latched+0x80>)
10008be4:	47a8      	blx	r5
10008be6:	2800      	cmp	r0, #0
10008be8:	d105      	bne.n	10008bf6 <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008bea:	2323      	movs	r3, #35	; 0x23
10008bec:	4a04      	ldr	r2, [pc, #16]	; (10008c00 <mpu_set_int_latched+0x7c>)
10008bee:	54d4      	strb	r4, [r2, r3]
    return 0;
10008bf0:	e003      	b.n	10008bfa <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008bf2:	2000      	movs	r0, #0
10008bf4:	e001      	b.n	10008bfa <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008bf6:	2001      	movs	r0, #1
10008bf8:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008bfa:	b003      	add	sp, #12
10008bfc:	bd30      	pop	{r4, r5, pc}
10008bfe:	46c0      	nop			; (mov r8, r8)
10008c00:	1001b920 	.word	0x1001b920
10008c04:	10008395 	.word	0x10008395

10008c08 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008c08:	b510      	push	{r4, lr}
10008c0a:	b082      	sub	sp, #8
10008c0c:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008c0e:	2c28      	cmp	r4, #40	; 0x28
10008c10:	d878      	bhi.n	10008d04 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008c12:	2800      	cmp	r0, #0
10008c14:	d115      	bne.n	10008c42 <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008c16:	2000      	movs	r0, #0
10008c18:	4b44      	ldr	r3, [pc, #272]	; (10008d2c <mpu_lp_accel_mode+0x124>)
10008c1a:	4798      	blx	r3
        tmp[0] = 0;
10008c1c:	ab01      	add	r3, sp, #4
10008c1e:	2200      	movs	r2, #0
10008c20:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008c22:	3207      	adds	r2, #7
10008c24:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008c26:	4a42      	ldr	r2, [pc, #264]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008c28:	6811      	ldr	r1, [r2, #0]
10008c2a:	7d49      	ldrb	r1, [r1, #21]
10008c2c:	6852      	ldr	r2, [r2, #4]
10008c2e:	7810      	ldrb	r0, [r2, #0]
10008c30:	2202      	movs	r2, #2
10008c32:	4c40      	ldr	r4, [pc, #256]	; (10008d34 <mpu_lp_accel_mode+0x12c>)
10008c34:	47a0      	blx	r4
10008c36:	1e04      	subs	r4, r0, #0
10008c38:	d167      	bne.n	10008d0a <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c3a:	2200      	movs	r2, #0
10008c3c:	4b3c      	ldr	r3, [pc, #240]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008c3e:	751a      	strb	r2, [r3, #20]
        return 0;
10008c40:	e071      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008c42:	2001      	movs	r0, #1
10008c44:	4b39      	ldr	r3, [pc, #228]	; (10008d2c <mpu_lp_accel_mode+0x124>)
10008c46:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008c48:	2c01      	cmp	r4, #1
10008c4a:	d103      	bne.n	10008c54 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008c4c:	2202      	movs	r2, #2
10008c4e:	ab01      	add	r3, sp, #4
10008c50:	701a      	strb	r2, [r3, #0]
10008c52:	e01a      	b.n	10008c8a <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008c54:	2c02      	cmp	r4, #2
10008c56:	d103      	bne.n	10008c60 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008c58:	2203      	movs	r2, #3
10008c5a:	ab01      	add	r3, sp, #4
10008c5c:	701a      	strb	r2, [r3, #0]
10008c5e:	e014      	b.n	10008c8a <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008c60:	2c05      	cmp	r4, #5
10008c62:	d803      	bhi.n	10008c6c <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008c64:	2204      	movs	r2, #4
10008c66:	ab01      	add	r3, sp, #4
10008c68:	701a      	strb	r2, [r3, #0]
10008c6a:	e00e      	b.n	10008c8a <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008c6c:	2c0a      	cmp	r4, #10
10008c6e:	d803      	bhi.n	10008c78 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008c70:	2205      	movs	r2, #5
10008c72:	ab01      	add	r3, sp, #4
10008c74:	701a      	strb	r2, [r3, #0]
10008c76:	e008      	b.n	10008c8a <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008c78:	2c14      	cmp	r4, #20
10008c7a:	d803      	bhi.n	10008c84 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008c7c:	2206      	movs	r2, #6
10008c7e:	ab01      	add	r3, sp, #4
10008c80:	701a      	strb	r2, [r3, #0]
10008c82:	e002      	b.n	10008c8a <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008c84:	2207      	movs	r2, #7
10008c86:	ab01      	add	r3, sp, #4
10008c88:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008c8a:	4b29      	ldr	r3, [pc, #164]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008c8c:	681a      	ldr	r2, [r3, #0]
10008c8e:	7a51      	ldrb	r1, [r2, #9]
10008c90:	685b      	ldr	r3, [r3, #4]
10008c92:	7818      	ldrb	r0, [r3, #0]
10008c94:	ab01      	add	r3, sp, #4
10008c96:	2201      	movs	r2, #1
10008c98:	4c26      	ldr	r4, [pc, #152]	; (10008d34 <mpu_lp_accel_mode+0x12c>)
10008c9a:	47a0      	blx	r4
10008c9c:	2800      	cmp	r0, #0
10008c9e:	d137      	bne.n	10008d10 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008ca0:	4b23      	ldr	r3, [pc, #140]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008ca2:	681a      	ldr	r2, [r3, #0]
10008ca4:	7a11      	ldrb	r1, [r2, #8]
10008ca6:	685b      	ldr	r3, [r3, #4]
10008ca8:	7818      	ldrb	r0, [r3, #0]
10008caa:	ab01      	add	r3, sp, #4
10008cac:	2201      	movs	r2, #1
10008cae:	4c22      	ldr	r4, [pc, #136]	; (10008d38 <mpu_lp_accel_mode+0x130>)
10008cb0:	47a0      	blx	r4
10008cb2:	2800      	cmp	r0, #0
10008cb4:	d12f      	bne.n	10008d16 <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008cb6:	ab01      	add	r3, sp, #4
10008cb8:	7819      	ldrb	r1, [r3, #0]
10008cba:	2208      	movs	r2, #8
10008cbc:	430a      	orrs	r2, r1
10008cbe:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008cc0:	4a1b      	ldr	r2, [pc, #108]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008cc2:	6811      	ldr	r1, [r2, #0]
10008cc4:	7a09      	ldrb	r1, [r1, #8]
10008cc6:	6852      	ldr	r2, [r2, #4]
10008cc8:	7810      	ldrb	r0, [r2, #0]
10008cca:	2201      	movs	r2, #1
10008ccc:	4c19      	ldr	r4, [pc, #100]	; (10008d34 <mpu_lp_accel_mode+0x12c>)
10008cce:	47a0      	blx	r4
10008cd0:	2800      	cmp	r0, #0
10008cd2:	d123      	bne.n	10008d1c <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008cd4:	ab01      	add	r3, sp, #4
10008cd6:	2220      	movs	r2, #32
10008cd8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008cda:	4a15      	ldr	r2, [pc, #84]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008cdc:	6811      	ldr	r1, [r2, #0]
10008cde:	7d49      	ldrb	r1, [r1, #21]
10008ce0:	6852      	ldr	r2, [r2, #4]
10008ce2:	7810      	ldrb	r0, [r2, #0]
10008ce4:	2201      	movs	r2, #1
10008ce6:	4c13      	ldr	r4, [pc, #76]	; (10008d34 <mpu_lp_accel_mode+0x12c>)
10008ce8:	47a0      	blx	r4
10008cea:	1e04      	subs	r4, r0, #0
10008cec:	d119      	bne.n	10008d22 <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008cee:	4b10      	ldr	r3, [pc, #64]	; (10008d30 <mpu_lp_accel_mode+0x128>)
10008cf0:	2208      	movs	r2, #8
10008cf2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008cf4:	2200      	movs	r2, #0
10008cf6:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008cf8:	3201      	adds	r2, #1
10008cfa:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008cfc:	2000      	movs	r0, #0
10008cfe:	4b0f      	ldr	r3, [pc, #60]	; (10008d3c <mpu_lp_accel_mode+0x134>)
10008d00:	4798      	blx	r3

    return 0;
10008d02:	e010      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008d04:	2401      	movs	r4, #1
10008d06:	4264      	negs	r4, r4
10008d08:	e00d      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008d0a:	2401      	movs	r4, #1
10008d0c:	4264      	negs	r4, r4
10008d0e:	e00a      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d10:	2401      	movs	r4, #1
10008d12:	4264      	negs	r4, r4
10008d14:	e007      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008d16:	2401      	movs	r4, #1
10008d18:	4264      	negs	r4, r4
10008d1a:	e004      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008d1c:	2401      	movs	r4, #1
10008d1e:	4264      	negs	r4, r4
10008d20:	e001      	b.n	10008d26 <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008d22:	2401      	movs	r4, #1
10008d24:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008d26:	0020      	movs	r0, r4
10008d28:	b002      	add	sp, #8
10008d2a:	bd10      	pop	{r4, pc}
10008d2c:	10008b85 	.word	0x10008b85
10008d30:	1001b920 	.word	0x1001b920
10008d34:	10008395 	.word	0x10008395
10008d38:	100082f9 	.word	0x100082f9
10008d3c:	1000899d 	.word	0x1000899d

10008d40 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008d40:	b530      	push	{r4, r5, lr}
10008d42:	b083      	sub	sp, #12
10008d44:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d46:	4b2c      	ldr	r3, [pc, #176]	; (10008df8 <mpu_set_sample_rate+0xb8>)
10008d48:	7a9b      	ldrb	r3, [r3, #10]
10008d4a:	2b00      	cmp	r3, #0
10008d4c:	d048      	beq.n	10008de0 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008d4e:	2324      	movs	r3, #36	; 0x24
10008d50:	4a29      	ldr	r2, [pc, #164]	; (10008df8 <mpu_set_sample_rate+0xb8>)
10008d52:	5cd3      	ldrb	r3, [r2, r3]
10008d54:	2b00      	cmp	r3, #0
10008d56:	d146      	bne.n	10008de6 <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d58:	7d13      	ldrb	r3, [r2, #20]
10008d5a:	2b00      	cmp	r3, #0
10008d5c:	d00a      	beq.n	10008d74 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008d5e:	1e43      	subs	r3, r0, #1
10008d60:	b29b      	uxth	r3, r3
10008d62:	2b27      	cmp	r3, #39	; 0x27
10008d64:	d803      	bhi.n	10008d6e <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d66:	4b25      	ldr	r3, [pc, #148]	; (10008dfc <mpu_set_sample_rate+0xbc>)
10008d68:	4798      	blx	r3
                return 0;
10008d6a:	2400      	movs	r4, #0
10008d6c:	e040      	b.n	10008df0 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008d6e:	2000      	movs	r0, #0
10008d70:	4b22      	ldr	r3, [pc, #136]	; (10008dfc <mpu_set_sample_rate+0xbc>)
10008d72:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008d74:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008d76:	2c03      	cmp	r4, #3
10008d78:	d907      	bls.n	10008d8a <mpu_set_sample_rate+0x4a>
10008d7a:	1c21      	adds	r1, r4, #0
10008d7c:	23fa      	movs	r3, #250	; 0xfa
10008d7e:	009b      	lsls	r3, r3, #2
10008d80:	429c      	cmp	r4, r3
10008d82:	d901      	bls.n	10008d88 <mpu_set_sample_rate+0x48>
10008d84:	4b1e      	ldr	r3, [pc, #120]	; (10008e00 <mpu_set_sample_rate+0xc0>)
10008d86:	8819      	ldrh	r1, [r3, #0]
10008d88:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008d8a:	466b      	mov	r3, sp
10008d8c:	1ddc      	adds	r4, r3, #7
10008d8e:	20fa      	movs	r0, #250	; 0xfa
10008d90:	0080      	lsls	r0, r0, #2
10008d92:	4b1c      	ldr	r3, [pc, #112]	; (10008e04 <mpu_set_sample_rate+0xc4>)
10008d94:	4798      	blx	r3
10008d96:	3801      	subs	r0, #1
10008d98:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008d9a:	4b17      	ldr	r3, [pc, #92]	; (10008df8 <mpu_set_sample_rate+0xb8>)
10008d9c:	681a      	ldr	r2, [r3, #0]
10008d9e:	7851      	ldrb	r1, [r2, #1]
10008da0:	685b      	ldr	r3, [r3, #4]
10008da2:	7818      	ldrb	r0, [r3, #0]
10008da4:	0023      	movs	r3, r4
10008da6:	2201      	movs	r2, #1
10008da8:	4c17      	ldr	r4, [pc, #92]	; (10008e08 <mpu_set_sample_rate+0xc8>)
10008daa:	47a0      	blx	r4
10008dac:	1e04      	subs	r4, r0, #0
10008dae:	d11d      	bne.n	10008dec <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008db0:	4d11      	ldr	r5, [pc, #68]	; (10008df8 <mpu_set_sample_rate+0xb8>)
10008db2:	466b      	mov	r3, sp
10008db4:	79d9      	ldrb	r1, [r3, #7]
10008db6:	3101      	adds	r1, #1
10008db8:	20fa      	movs	r0, #250	; 0xfa
10008dba:	0080      	lsls	r0, r0, #2
10008dbc:	4b11      	ldr	r3, [pc, #68]	; (10008e04 <mpu_set_sample_rate+0xc4>)
10008dbe:	4798      	blx	r3
10008dc0:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008dc2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008dc4:	1c18      	adds	r0, r3, #0
10008dc6:	b29b      	uxth	r3, r3
10008dc8:	2b64      	cmp	r3, #100	; 0x64
10008dca:	d900      	bls.n	10008dce <mpu_set_sample_rate+0x8e>
10008dcc:	2064      	movs	r0, #100	; 0x64
10008dce:	b280      	uxth	r0, r0
10008dd0:	4b0e      	ldr	r3, [pc, #56]	; (10008e0c <mpu_set_sample_rate+0xcc>)
10008dd2:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008dd4:	4b08      	ldr	r3, [pc, #32]	; (10008df8 <mpu_set_sample_rate+0xb8>)
10008dd6:	89d8      	ldrh	r0, [r3, #14]
10008dd8:	0840      	lsrs	r0, r0, #1
10008dda:	4b0d      	ldr	r3, [pc, #52]	; (10008e10 <mpu_set_sample_rate+0xd0>)
10008ddc:	4798      	blx	r3
        return 0;
10008dde:	e007      	b.n	10008df0 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008de0:	2401      	movs	r4, #1
10008de2:	4264      	negs	r4, r4
10008de4:	e004      	b.n	10008df0 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008de6:	2401      	movs	r4, #1
10008de8:	4264      	negs	r4, r4
10008dea:	e001      	b.n	10008df0 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008dec:	2401      	movs	r4, #1
10008dee:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008df0:	0020      	movs	r0, r4
10008df2:	b003      	add	sp, #12
10008df4:	bd30      	pop	{r4, r5, pc}
10008df6:	46c0      	nop			; (mov r8, r8)
10008df8:	1001b920 	.word	0x1001b920
10008dfc:	10008c09 	.word	0x10008c09
10008e00:	10019808 	.word	0x10019808
10008e04:	1001541d 	.word	0x1001541d
10008e08:	10008395 	.word	0x10008395
10008e0c:	10008925 	.word	0x10008925
10008e10:	1000884d 	.word	0x1000884d

10008e14 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e14:	b530      	push	{r4, r5, lr}
10008e16:	b083      	sub	sp, #12
10008e18:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e1a:	2370      	movs	r3, #112	; 0x70
10008e1c:	4203      	tst	r3, r0
10008e1e:	d003      	beq.n	10008e28 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008e20:	2201      	movs	r2, #1
10008e22:	466b      	mov	r3, sp
10008e24:	71da      	strb	r2, [r3, #7]
10008e26:	e015      	b.n	10008e54 <mpu_set_sensors+0x40>
    else if (sensors)
10008e28:	2800      	cmp	r0, #0
10008e2a:	d003      	beq.n	10008e34 <mpu_set_sensors+0x20>
        data = 0;
10008e2c:	2200      	movs	r2, #0
10008e2e:	466b      	mov	r3, sp
10008e30:	71da      	strb	r2, [r3, #7]
10008e32:	e00f      	b.n	10008e54 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008e34:	466b      	mov	r3, sp
10008e36:	3307      	adds	r3, #7
10008e38:	2240      	movs	r2, #64	; 0x40
10008e3a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e3c:	4a6a      	ldr	r2, [pc, #424]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008e3e:	6811      	ldr	r1, [r2, #0]
10008e40:	7d49      	ldrb	r1, [r1, #21]
10008e42:	6852      	ldr	r2, [r2, #4]
10008e44:	7810      	ldrb	r0, [r2, #0]
10008e46:	2201      	movs	r2, #1
10008e48:	4d68      	ldr	r5, [pc, #416]	; (10008fec <mpu_set_sensors+0x1d8>)
10008e4a:	47a8      	blx	r5
10008e4c:	2800      	cmp	r0, #0
10008e4e:	d100      	bne.n	10008e52 <mpu_set_sensors+0x3e>
10008e50:	e0b2      	b.n	10008fb8 <mpu_set_sensors+0x1a4>
10008e52:	e00b      	b.n	10008e6c <mpu_set_sensors+0x58>
10008e54:	4b64      	ldr	r3, [pc, #400]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008e56:	681a      	ldr	r2, [r3, #0]
10008e58:	7d51      	ldrb	r1, [r2, #21]
10008e5a:	685b      	ldr	r3, [r3, #4]
10008e5c:	7818      	ldrb	r0, [r3, #0]
10008e5e:	466b      	mov	r3, sp
10008e60:	3307      	adds	r3, #7
10008e62:	2201      	movs	r2, #1
10008e64:	4d61      	ldr	r5, [pc, #388]	; (10008fec <mpu_set_sensors+0x1d8>)
10008e66:	47a8      	blx	r5
10008e68:	2800      	cmp	r0, #0
10008e6a:	d005      	beq.n	10008e78 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008e6c:	2200      	movs	r2, #0
10008e6e:	4b5e      	ldr	r3, [pc, #376]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008e70:	729a      	strb	r2, [r3, #10]
        return -1;
10008e72:	2501      	movs	r5, #1
10008e74:	426d      	negs	r5, r5
10008e76:	e0b4      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008e78:	466b      	mov	r3, sp
10008e7a:	1dda      	adds	r2, r3, #7
10008e7c:	79db      	ldrb	r3, [r3, #7]
10008e7e:	2140      	movs	r1, #64	; 0x40
10008e80:	438b      	bics	r3, r1
10008e82:	4959      	ldr	r1, [pc, #356]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008e84:	730b      	strb	r3, [r1, #12]

    data = 0;
10008e86:	2300      	movs	r3, #0
10008e88:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008e8a:	0663      	lsls	r3, r4, #25
10008e8c:	d402      	bmi.n	10008e94 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008e8e:	2204      	movs	r2, #4
10008e90:	466b      	mov	r3, sp
10008e92:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008e94:	06a3      	lsls	r3, r4, #26
10008e96:	d405      	bmi.n	10008ea4 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008e98:	466b      	mov	r3, sp
10008e9a:	1dda      	adds	r2, r3, #7
10008e9c:	79d9      	ldrb	r1, [r3, #7]
10008e9e:	2302      	movs	r3, #2
10008ea0:	430b      	orrs	r3, r1
10008ea2:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008ea4:	06e3      	lsls	r3, r4, #27
10008ea6:	d405      	bmi.n	10008eb4 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008ea8:	466b      	mov	r3, sp
10008eaa:	1dda      	adds	r2, r3, #7
10008eac:	79d9      	ldrb	r1, [r3, #7]
10008eae:	2301      	movs	r3, #1
10008eb0:	430b      	orrs	r3, r1
10008eb2:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008eb4:	0723      	lsls	r3, r4, #28
10008eb6:	d405      	bmi.n	10008ec4 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008eb8:	466b      	mov	r3, sp
10008eba:	1dda      	adds	r2, r3, #7
10008ebc:	79d9      	ldrb	r1, [r3, #7]
10008ebe:	2338      	movs	r3, #56	; 0x38
10008ec0:	430b      	orrs	r3, r1
10008ec2:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008ec4:	4b48      	ldr	r3, [pc, #288]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008ec6:	681a      	ldr	r2, [r3, #0]
10008ec8:	7d91      	ldrb	r1, [r2, #22]
10008eca:	685b      	ldr	r3, [r3, #4]
10008ecc:	7818      	ldrb	r0, [r3, #0]
10008ece:	466b      	mov	r3, sp
10008ed0:	3307      	adds	r3, #7
10008ed2:	2201      	movs	r2, #1
10008ed4:	4d45      	ldr	r5, [pc, #276]	; (10008fec <mpu_set_sensors+0x1d8>)
10008ed6:	47a8      	blx	r5
10008ed8:	2800      	cmp	r0, #0
10008eda:	d005      	beq.n	10008ee8 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008edc:	2200      	movs	r2, #0
10008ede:	4b42      	ldr	r3, [pc, #264]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008ee0:	729a      	strb	r2, [r3, #10]
        return -1;
10008ee2:	2501      	movs	r5, #1
10008ee4:	426d      	negs	r5, r5
10008ee6:	e07c      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008ee8:	2308      	movs	r3, #8
10008eea:	0022      	movs	r2, r4
10008eec:	439a      	bics	r2, r3
10008eee:	d06b      	beq.n	10008fc8 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008ef0:	2000      	movs	r0, #0
10008ef2:	4b3f      	ldr	r3, [pc, #252]	; (10008ff0 <mpu_set_sensors+0x1dc>)
10008ef4:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ef6:	4b3c      	ldr	r3, [pc, #240]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008ef8:	681a      	ldr	r2, [r3, #0]
10008efa:	7911      	ldrb	r1, [r2, #4]
10008efc:	685b      	ldr	r3, [r3, #4]
10008efe:	7818      	ldrb	r0, [r3, #0]
10008f00:	466b      	mov	r3, sp
10008f02:	3306      	adds	r3, #6
10008f04:	2201      	movs	r2, #1
10008f06:	4d3b      	ldr	r5, [pc, #236]	; (10008ff4 <mpu_set_sensors+0x1e0>)
10008f08:	47a8      	blx	r5
10008f0a:	2800      	cmp	r0, #0
10008f0c:	d148      	bne.n	10008fa0 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f0e:	07e3      	lsls	r3, r4, #31
10008f10:	d509      	bpl.n	10008f26 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008f12:	2211      	movs	r2, #17
10008f14:	466b      	mov	r3, sp
10008f16:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f18:	466b      	mov	r3, sp
10008f1a:	1d9a      	adds	r2, r3, #6
10008f1c:	7999      	ldrb	r1, [r3, #6]
10008f1e:	2320      	movs	r3, #32
10008f20:	430b      	orrs	r3, r1
10008f22:	7013      	strb	r3, [r2, #0]
10008f24:	e008      	b.n	10008f38 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008f26:	2210      	movs	r2, #16
10008f28:	466b      	mov	r3, sp
10008f2a:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f2c:	466b      	mov	r3, sp
10008f2e:	1d9a      	adds	r2, r3, #6
10008f30:	799b      	ldrb	r3, [r3, #6]
10008f32:	2120      	movs	r1, #32
10008f34:	438b      	bics	r3, r1
10008f36:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f38:	2324      	movs	r3, #36	; 0x24
10008f3a:	4a2b      	ldr	r2, [pc, #172]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008f3c:	5cd3      	ldrb	r3, [r2, r3]
10008f3e:	2b00      	cmp	r3, #0
10008f40:	d007      	beq.n	10008f52 <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008f42:	466b      	mov	r3, sp
10008f44:	1d9a      	adds	r2, r3, #6
10008f46:	799b      	ldrb	r3, [r3, #6]
10008f48:	2180      	movs	r1, #128	; 0x80
10008f4a:	4249      	negs	r1, r1
10008f4c:	430b      	orrs	r3, r1
10008f4e:	7013      	strb	r3, [r2, #0]
10008f50:	e005      	b.n	10008f5e <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008f52:	466b      	mov	r3, sp
10008f54:	1d9a      	adds	r2, r3, #6
10008f56:	799b      	ldrb	r3, [r3, #6]
10008f58:	217f      	movs	r1, #127	; 0x7f
10008f5a:	400b      	ands	r3, r1
10008f5c:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f5e:	4b22      	ldr	r3, [pc, #136]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008f60:	2226      	movs	r2, #38	; 0x26
10008f62:	6819      	ldr	r1, [r3, #0]
10008f64:	5c89      	ldrb	r1, [r1, r2]
10008f66:	685b      	ldr	r3, [r3, #4]
10008f68:	7818      	ldrb	r0, [r3, #0]
10008f6a:	466b      	mov	r3, sp
10008f6c:	3307      	adds	r3, #7
10008f6e:	3a25      	subs	r2, #37	; 0x25
10008f70:	4d1e      	ldr	r5, [pc, #120]	; (10008fec <mpu_set_sensors+0x1d8>)
10008f72:	47a8      	blx	r5
10008f74:	2800      	cmp	r0, #0
10008f76:	d116      	bne.n	10008fa6 <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f78:	4b1b      	ldr	r3, [pc, #108]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008f7a:	681a      	ldr	r2, [r3, #0]
10008f7c:	7911      	ldrb	r1, [r2, #4]
10008f7e:	685b      	ldr	r3, [r3, #4]
10008f80:	7818      	ldrb	r0, [r3, #0]
10008f82:	466b      	mov	r3, sp
10008f84:	3306      	adds	r3, #6
10008f86:	2201      	movs	r2, #1
10008f88:	4d18      	ldr	r5, [pc, #96]	; (10008fec <mpu_set_sensors+0x1d8>)
10008f8a:	47a8      	blx	r5
10008f8c:	1e05      	subs	r5, r0, #0
10008f8e:	d10d      	bne.n	10008fac <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f90:	4b15      	ldr	r3, [pc, #84]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008f92:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008f94:	2200      	movs	r2, #0
10008f96:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008f98:	2032      	movs	r0, #50	; 0x32
10008f9a:	4b17      	ldr	r3, [pc, #92]	; (10008ff8 <mpu_set_sensors+0x1e4>)
10008f9c:	4798      	blx	r3
    return 0;
10008f9e:	e020      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fa0:	2501      	movs	r5, #1
10008fa2:	426d      	negs	r5, r5
10008fa4:	e01d      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
10008fa6:	2501      	movs	r5, #1
10008fa8:	426d      	negs	r5, r5
10008faa:	e01a      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fac:	2501      	movs	r5, #1
10008fae:	426d      	negs	r5, r5
10008fb0:	e017      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008fb2:	2501      	movs	r5, #1
10008fb4:	426d      	negs	r5, r5
10008fb6:	e014      	b.n	10008fe2 <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fb8:	466b      	mov	r3, sp
10008fba:	3307      	adds	r3, #7
10008fbc:	781b      	ldrb	r3, [r3, #0]
10008fbe:	2240      	movs	r2, #64	; 0x40
10008fc0:	4393      	bics	r3, r2
10008fc2:	4a09      	ldr	r2, [pc, #36]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008fc4:	7313      	strb	r3, [r2, #12]
10008fc6:	e762      	b.n	10008e8e <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008fc8:	4b07      	ldr	r3, [pc, #28]	; (10008fe8 <mpu_set_sensors+0x1d4>)
10008fca:	681a      	ldr	r2, [r3, #0]
10008fcc:	7911      	ldrb	r1, [r2, #4]
10008fce:	685b      	ldr	r3, [r3, #4]
10008fd0:	7818      	ldrb	r0, [r3, #0]
10008fd2:	466b      	mov	r3, sp
10008fd4:	3306      	adds	r3, #6
10008fd6:	2201      	movs	r2, #1
10008fd8:	4d06      	ldr	r5, [pc, #24]	; (10008ff4 <mpu_set_sensors+0x1e0>)
10008fda:	47a8      	blx	r5
10008fdc:	2800      	cmp	r0, #0
10008fde:	d0a2      	beq.n	10008f26 <mpu_set_sensors+0x112>
10008fe0:	e7e7      	b.n	10008fb2 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10008fe2:	0028      	movs	r0, r5
10008fe4:	b003      	add	sp, #12
10008fe6:	bd30      	pop	{r4, r5, pc}
10008fe8:	1001b920 	.word	0x1001b920
10008fec:	10008395 	.word	0x10008395
10008ff0:	10008b85 	.word	0x10008b85
10008ff4:	100082f9 	.word	0x100082f9
10008ff8:	10008129 	.word	0x10008129

10008ffc <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008ffc:	b570      	push	{r4, r5, r6, lr}
10008ffe:	b084      	sub	sp, #16
10009000:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009002:	ab02      	add	r3, sp, #8
10009004:	2280      	movs	r2, #128	; 0x80
10009006:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009008:	4abc      	ldr	r2, [pc, #752]	; (100092fc <mpu_init+0x300>)
1000900a:	6811      	ldr	r1, [r2, #0]
1000900c:	7d49      	ldrb	r1, [r1, #21]
1000900e:	6852      	ldr	r2, [r2, #4]
10009010:	7810      	ldrb	r0, [r2, #0]
10009012:	2201      	movs	r2, #1
10009014:	4cba      	ldr	r4, [pc, #744]	; (10009300 <mpu_init+0x304>)
10009016:	47a0      	blx	r4
10009018:	2800      	cmp	r0, #0
1000901a:	d000      	beq.n	1000901e <mpu_init+0x22>
1000901c:	e150      	b.n	100092c0 <mpu_init+0x2c4>
        return -1;
    delay_ms(100);
1000901e:	3064      	adds	r0, #100	; 0x64
10009020:	4bb8      	ldr	r3, [pc, #736]	; (10009304 <mpu_init+0x308>)
10009022:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009024:	ab02      	add	r3, sp, #8
10009026:	2200      	movs	r2, #0
10009028:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000902a:	4ab4      	ldr	r2, [pc, #720]	; (100092fc <mpu_init+0x300>)
1000902c:	6811      	ldr	r1, [r2, #0]
1000902e:	7d49      	ldrb	r1, [r1, #21]
10009030:	6852      	ldr	r2, [r2, #4]
10009032:	7810      	ldrb	r0, [r2, #0]
10009034:	2201      	movs	r2, #1
10009036:	4cb2      	ldr	r4, [pc, #712]	; (10009300 <mpu_init+0x304>)
10009038:	47a0      	blx	r4
1000903a:	2800      	cmp	r0, #0
1000903c:	d000      	beq.n	10009040 <mpu_init+0x44>
1000903e:	e142      	b.n	100092c6 <mpu_init+0x2ca>
        return -1;

   st.chip_cfg.accel_half = 0;
10009040:	4aae      	ldr	r2, [pc, #696]	; (100092fc <mpu_init+0x300>)
10009042:	2300      	movs	r3, #0
10009044:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009046:	ab02      	add	r3, sp, #8
10009048:	2140      	movs	r1, #64	; 0x40
1000904a:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000904c:	6811      	ldr	r1, [r2, #0]
1000904e:	7a09      	ldrb	r1, [r1, #8]
10009050:	6852      	ldr	r2, [r2, #4]
10009052:	7810      	ldrb	r0, [r2, #0]
10009054:	2201      	movs	r2, #1
10009056:	4caa      	ldr	r4, [pc, #680]	; (10009300 <mpu_init+0x304>)
10009058:	47a0      	blx	r4
1000905a:	2800      	cmp	r0, #0
1000905c:	d000      	beq.n	10009060 <mpu_init+0x64>
1000905e:	e135      	b.n	100092cc <mpu_init+0x2d0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009060:	4ca6      	ldr	r4, [pc, #664]	; (100092fc <mpu_init+0x300>)
10009062:	23ff      	movs	r3, #255	; 0xff
10009064:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009066:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009068:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
1000906a:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
1000906c:	2201      	movs	r2, #1
1000906e:	4252      	negs	r2, r2
10009070:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10009072:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009074:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009076:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10009078:	3bfe      	subs	r3, #254	; 0xfe
1000907a:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
1000907c:	2500      	movs	r5, #0
1000907e:	3321      	adds	r3, #33	; 0x21
10009080:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10009082:	3301      	adds	r3, #1
10009084:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009086:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009088:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
1000908a:	0020      	movs	r0, r4
1000908c:	3016      	adds	r0, #22
1000908e:	320d      	adds	r2, #13
10009090:	2100      	movs	r1, #0
10009092:	4b9d      	ldr	r3, [pc, #628]	; (10009308 <mpu_init+0x30c>)
10009094:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009096:	2324      	movs	r3, #36	; 0x24
10009098:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
1000909a:	3301      	adds	r3, #1
1000909c:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
1000909e:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100090a0:	20fa      	movs	r0, #250	; 0xfa
100090a2:	00c0      	lsls	r0, r0, #3
100090a4:	4b99      	ldr	r3, [pc, #612]	; (1000930c <mpu_init+0x310>)
100090a6:	4798      	blx	r3
100090a8:	2800      	cmp	r0, #0
100090aa:	d000      	beq.n	100090ae <mpu_init+0xb2>
100090ac:	e111      	b.n	100092d2 <mpu_init+0x2d6>
        return -1;
    if (mpu_set_accel_fsr(2))
100090ae:	3002      	adds	r0, #2
100090b0:	4b97      	ldr	r3, [pc, #604]	; (10009310 <mpu_init+0x314>)
100090b2:	4798      	blx	r3
100090b4:	2800      	cmp	r0, #0
100090b6:	d000      	beq.n	100090ba <mpu_init+0xbe>
100090b8:	e10e      	b.n	100092d8 <mpu_init+0x2dc>
        return -1;
    if (mpu_set_lpf(42))
100090ba:	302a      	adds	r0, #42	; 0x2a
100090bc:	4b95      	ldr	r3, [pc, #596]	; (10009314 <mpu_init+0x318>)
100090be:	4798      	blx	r3
100090c0:	2800      	cmp	r0, #0
100090c2:	d000      	beq.n	100090c6 <mpu_init+0xca>
100090c4:	e10b      	b.n	100092de <mpu_init+0x2e2>
        return -1;
    if (mpu_set_sample_rate(50))
100090c6:	3032      	adds	r0, #50	; 0x32
100090c8:	4b93      	ldr	r3, [pc, #588]	; (10009318 <mpu_init+0x31c>)
100090ca:	4798      	blx	r3
100090cc:	2800      	cmp	r0, #0
100090ce:	d000      	beq.n	100090d2 <mpu_init+0xd6>
100090d0:	e108      	b.n	100092e4 <mpu_init+0x2e8>
        return -1;
    if (mpu_configure_fifo(0))
100090d2:	4b92      	ldr	r3, [pc, #584]	; (1000931c <mpu_init+0x320>)
100090d4:	4798      	blx	r3
100090d6:	2800      	cmp	r0, #0
100090d8:	d000      	beq.n	100090dc <mpu_init+0xe0>
100090da:	e106      	b.n	100092ea <mpu_init+0x2ee>
        return -1;

    if (int_param)
100090dc:	2e00      	cmp	r6, #0
100090de:	d004      	beq.n	100090ea <mpu_init+0xee>
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
100090e0:	6871      	ldr	r1, [r6, #4]
100090e2:	7830      	ldrb	r0, [r6, #0]
100090e4:	2202      	movs	r2, #2
100090e6:	4b8e      	ldr	r3, [pc, #568]	; (10009320 <mpu_init+0x324>)
100090e8:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100090ea:	2001      	movs	r0, #1
100090ec:	4b8d      	ldr	r3, [pc, #564]	; (10009324 <mpu_init+0x328>)
100090ee:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090f0:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100090f2:	4d8d      	ldr	r5, [pc, #564]	; (10009328 <mpu_init+0x32c>)
100090f4:	ab01      	add	r3, sp, #4
100090f6:	2201      	movs	r2, #1
100090f8:	2100      	movs	r1, #0
100090fa:	0020      	movs	r0, r4
100090fc:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100090fe:	2800      	cmp	r0, #0
10009100:	d103      	bne.n	1000910a <mpu_init+0x10e>
10009102:	466b      	mov	r3, sp
10009104:	791b      	ldrb	r3, [r3, #4]
10009106:	2b48      	cmp	r3, #72	; 0x48
10009108:	d004      	beq.n	10009114 <mpu_init+0x118>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000910a:	3401      	adds	r4, #1
1000910c:	b2e4      	uxtb	r4, r4
1000910e:	2c10      	cmp	r4, #16
10009110:	d1f0      	bne.n	100090f4 <mpu_init+0xf8>
10009112:	e001      	b.n	10009118 <mpu_init+0x11c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009114:	2c0f      	cmp	r4, #15
10009116:	d905      	bls.n	10009124 <mpu_init+0x128>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009118:	4884      	ldr	r0, [pc, #528]	; (1000932c <mpu_init+0x330>)
1000911a:	4c85      	ldr	r4, [pc, #532]	; (10009330 <mpu_init+0x334>)
1000911c:	47a0      	blx	r4
1000911e:	4885      	ldr	r0, [pc, #532]	; (10009334 <mpu_init+0x338>)
10009120:	47a0      	blx	r4
10009122:	e0c4      	b.n	100092ae <mpu_init+0x2b2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009124:	232a      	movs	r3, #42	; 0x2a
10009126:	4a75      	ldr	r2, [pc, #468]	; (100092fc <mpu_init+0x300>)
10009128:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
1000912a:	ab01      	add	r3, sp, #4
1000912c:	2210      	movs	r2, #16
1000912e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009130:	3a0f      	subs	r2, #15
10009132:	210a      	movs	r1, #10
10009134:	0020      	movs	r0, r4
10009136:	4c72      	ldr	r4, [pc, #456]	; (10009300 <mpu_init+0x304>)
10009138:	47a0      	blx	r4
1000913a:	2800      	cmp	r0, #0
1000913c:	d000      	beq.n	10009140 <mpu_init+0x144>
1000913e:	e0b6      	b.n	100092ae <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009140:	3001      	adds	r0, #1
10009142:	4b70      	ldr	r3, [pc, #448]	; (10009304 <mpu_init+0x308>)
10009144:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009146:	ab01      	add	r3, sp, #4
10009148:	221f      	movs	r2, #31
1000914a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000914c:	320b      	adds	r2, #11
1000914e:	496b      	ldr	r1, [pc, #428]	; (100092fc <mpu_init+0x300>)
10009150:	5c88      	ldrb	r0, [r1, r2]
10009152:	3a29      	subs	r2, #41	; 0x29
10009154:	210a      	movs	r1, #10
10009156:	4c6a      	ldr	r4, [pc, #424]	; (10009300 <mpu_init+0x304>)
10009158:	47a0      	blx	r4
1000915a:	2800      	cmp	r0, #0
1000915c:	d000      	beq.n	10009160 <mpu_init+0x164>
1000915e:	e0a6      	b.n	100092ae <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009160:	3001      	adds	r0, #1
10009162:	4b68      	ldr	r3, [pc, #416]	; (10009304 <mpu_init+0x308>)
10009164:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009166:	232a      	movs	r3, #42	; 0x2a
10009168:	4a64      	ldr	r2, [pc, #400]	; (100092fc <mpu_init+0x300>)
1000916a:	5cd0      	ldrb	r0, [r2, r3]
1000916c:	ab01      	add	r3, sp, #4
1000916e:	2203      	movs	r2, #3
10009170:	2110      	movs	r1, #16
10009172:	4c6d      	ldr	r4, [pc, #436]	; (10009328 <mpu_init+0x32c>)
10009174:	47a0      	blx	r4
10009176:	2800      	cmp	r0, #0
10009178:	d000      	beq.n	1000917c <mpu_init+0x180>
1000917a:	e098      	b.n	100092ae <mpu_init+0x2b2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
1000917c:	4a5f      	ldr	r2, [pc, #380]	; (100092fc <mpu_init+0x300>)
1000917e:	ab01      	add	r3, sp, #4
10009180:	7819      	ldrb	r1, [r3, #0]
10009182:	3180      	adds	r1, #128	; 0x80
10009184:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009186:	7859      	ldrb	r1, [r3, #1]
10009188:	3180      	adds	r1, #128	; 0x80
1000918a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
1000918c:	7899      	ldrb	r1, [r3, #2]
1000918e:	3180      	adds	r1, #128	; 0x80
10009190:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10009192:	2110      	movs	r1, #16
10009194:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009196:	311a      	adds	r1, #26
10009198:	5c50      	ldrb	r0, [r2, r1]
1000919a:	2201      	movs	r2, #1
1000919c:	3920      	subs	r1, #32
1000919e:	4c58      	ldr	r4, [pc, #352]	; (10009300 <mpu_init+0x304>)
100091a0:	47a0      	blx	r4
100091a2:	2800      	cmp	r0, #0
100091a4:	d000      	beq.n	100091a8 <mpu_init+0x1ac>
100091a6:	e082      	b.n	100092ae <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
100091a8:	3001      	adds	r0, #1
100091aa:	4b56      	ldr	r3, [pc, #344]	; (10009304 <mpu_init+0x308>)
100091ac:	4798      	blx	r3

    mpu_set_bypass(0);
100091ae:	2000      	movs	r0, #0
100091b0:	4b5c      	ldr	r3, [pc, #368]	; (10009324 <mpu_init+0x328>)
100091b2:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091b4:	ab01      	add	r3, sp, #4
100091b6:	2240      	movs	r2, #64	; 0x40
100091b8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091ba:	4a50      	ldr	r2, [pc, #320]	; (100092fc <mpu_init+0x300>)
100091bc:	6811      	ldr	r1, [r2, #0]
100091be:	7e89      	ldrb	r1, [r1, #26]
100091c0:	6852      	ldr	r2, [r2, #4]
100091c2:	7810      	ldrb	r0, [r2, #0]
100091c4:	2201      	movs	r2, #1
100091c6:	4c4e      	ldr	r4, [pc, #312]	; (10009300 <mpu_init+0x304>)
100091c8:	47a0      	blx	r4
100091ca:	2800      	cmp	r0, #0
100091cc:	d16f      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091ce:	ab01      	add	r3, sp, #4
100091d0:	4a4a      	ldr	r2, [pc, #296]	; (100092fc <mpu_init+0x300>)
100091d2:	212a      	movs	r1, #42	; 0x2a
100091d4:	5c51      	ldrb	r1, [r2, r1]
100091d6:	3880      	subs	r0, #128	; 0x80
100091d8:	4301      	orrs	r1, r0
100091da:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091dc:	6811      	ldr	r1, [r2, #0]
100091de:	7f89      	ldrb	r1, [r1, #30]
100091e0:	6852      	ldr	r2, [r2, #4]
100091e2:	7810      	ldrb	r0, [r2, #0]
100091e4:	2201      	movs	r2, #1
100091e6:	4c46      	ldr	r4, [pc, #280]	; (10009300 <mpu_init+0x304>)
100091e8:	47a0      	blx	r4
100091ea:	2800      	cmp	r0, #0
100091ec:	d15f      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100091ee:	ab01      	add	r3, sp, #4
100091f0:	2202      	movs	r2, #2
100091f2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100091f4:	4a41      	ldr	r2, [pc, #260]	; (100092fc <mpu_init+0x300>)
100091f6:	6811      	ldr	r1, [r2, #0]
100091f8:	7fc9      	ldrb	r1, [r1, #31]
100091fa:	6852      	ldr	r2, [r2, #4]
100091fc:	7810      	ldrb	r0, [r2, #0]
100091fe:	2201      	movs	r2, #1
10009200:	4c3f      	ldr	r4, [pc, #252]	; (10009300 <mpu_init+0x304>)
10009202:	47a0      	blx	r4
10009204:	2800      	cmp	r0, #0
10009206:	d152      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009208:	ab01      	add	r3, sp, #4
1000920a:	2288      	movs	r2, #136	; 0x88
1000920c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000920e:	4a3b      	ldr	r2, [pc, #236]	; (100092fc <mpu_init+0x300>)
10009210:	2120      	movs	r1, #32
10009212:	6810      	ldr	r0, [r2, #0]
10009214:	5c41      	ldrb	r1, [r0, r1]
10009216:	6852      	ldr	r2, [r2, #4]
10009218:	7810      	ldrb	r0, [r2, #0]
1000921a:	2201      	movs	r2, #1
1000921c:	4c38      	ldr	r4, [pc, #224]	; (10009300 <mpu_init+0x304>)
1000921e:	47a0      	blx	r4
10009220:	2800      	cmp	r0, #0
10009222:	d144      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009224:	ab01      	add	r3, sp, #4
10009226:	4a35      	ldr	r2, [pc, #212]	; (100092fc <mpu_init+0x300>)
10009228:	212a      	movs	r1, #42	; 0x2a
1000922a:	5c51      	ldrb	r1, [r2, r1]
1000922c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000922e:	2121      	movs	r1, #33	; 0x21
10009230:	6810      	ldr	r0, [r2, #0]
10009232:	5c41      	ldrb	r1, [r0, r1]
10009234:	6852      	ldr	r2, [r2, #4]
10009236:	7810      	ldrb	r0, [r2, #0]
10009238:	2201      	movs	r2, #1
1000923a:	4c31      	ldr	r4, [pc, #196]	; (10009300 <mpu_init+0x304>)
1000923c:	47a0      	blx	r4
1000923e:	2800      	cmp	r0, #0
10009240:	d135      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009242:	ab01      	add	r3, sp, #4
10009244:	220a      	movs	r2, #10
10009246:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009248:	4a2c      	ldr	r2, [pc, #176]	; (100092fc <mpu_init+0x300>)
1000924a:	2122      	movs	r1, #34	; 0x22
1000924c:	6810      	ldr	r0, [r2, #0]
1000924e:	5c41      	ldrb	r1, [r0, r1]
10009250:	6852      	ldr	r2, [r2, #4]
10009252:	7810      	ldrb	r0, [r2, #0]
10009254:	2201      	movs	r2, #1
10009256:	4c2a      	ldr	r4, [pc, #168]	; (10009300 <mpu_init+0x304>)
10009258:	47a0      	blx	r4
1000925a:	2800      	cmp	r0, #0
1000925c:	d127      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000925e:	ab01      	add	r3, sp, #4
10009260:	2281      	movs	r2, #129	; 0x81
10009262:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009264:	4a25      	ldr	r2, [pc, #148]	; (100092fc <mpu_init+0x300>)
10009266:	2123      	movs	r1, #35	; 0x23
10009268:	6810      	ldr	r0, [r2, #0]
1000926a:	5c41      	ldrb	r1, [r0, r1]
1000926c:	6852      	ldr	r2, [r2, #4]
1000926e:	7810      	ldrb	r0, [r2, #0]
10009270:	2201      	movs	r2, #1
10009272:	4c23      	ldr	r4, [pc, #140]	; (10009300 <mpu_init+0x304>)
10009274:	47a0      	blx	r4
10009276:	2800      	cmp	r0, #0
10009278:	d119      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000927a:	ab01      	add	r3, sp, #4
1000927c:	2211      	movs	r2, #17
1000927e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009280:	4a1e      	ldr	r2, [pc, #120]	; (100092fc <mpu_init+0x300>)
10009282:	2126      	movs	r1, #38	; 0x26
10009284:	6810      	ldr	r0, [r2, #0]
10009286:	5c41      	ldrb	r1, [r0, r1]
10009288:	6852      	ldr	r2, [r2, #4]
1000928a:	7810      	ldrb	r0, [r2, #0]
1000928c:	2201      	movs	r2, #1
1000928e:	4c1c      	ldr	r4, [pc, #112]	; (10009300 <mpu_init+0x304>)
10009290:	47a0      	blx	r4
10009292:	2800      	cmp	r0, #0
10009294:	d10b      	bne.n	100092ae <mpu_init+0x2b2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009296:	ab01      	add	r3, sp, #4
10009298:	2203      	movs	r2, #3
1000929a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
1000929c:	4a17      	ldr	r2, [pc, #92]	; (100092fc <mpu_init+0x300>)
1000929e:	2127      	movs	r1, #39	; 0x27
100092a0:	6810      	ldr	r0, [r2, #0]
100092a2:	5c41      	ldrb	r1, [r0, r1]
100092a4:	6852      	ldr	r2, [r2, #4]
100092a6:	7810      	ldrb	r0, [r2, #0]
100092a8:	2201      	movs	r2, #1
100092aa:	4c15      	ldr	r4, [pc, #84]	; (10009300 <mpu_init+0x304>)
100092ac:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
100092ae:	200a      	movs	r0, #10
100092b0:	4b21      	ldr	r3, [pc, #132]	; (10009338 <mpu_init+0x33c>)
100092b2:	4798      	blx	r3
100092b4:	1e04      	subs	r4, r0, #0
100092b6:	d11b      	bne.n	100092f0 <mpu_init+0x2f4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100092b8:	2000      	movs	r0, #0
100092ba:	4b20      	ldr	r3, [pc, #128]	; (1000933c <mpu_init+0x340>)
100092bc:	4798      	blx	r3
    return 0;
100092be:	e019      	b.n	100092f4 <mpu_init+0x2f8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092c0:	2401      	movs	r4, #1
100092c2:	4264      	negs	r4, r4
100092c4:	e016      	b.n	100092f4 <mpu_init+0x2f8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092c6:	2401      	movs	r4, #1
100092c8:	4264      	negs	r4, r4
100092ca:	e013      	b.n	100092f4 <mpu_init+0x2f8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100092cc:	2401      	movs	r4, #1
100092ce:	4264      	negs	r4, r4
100092d0:	e010      	b.n	100092f4 <mpu_init+0x2f8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
100092d2:	2401      	movs	r4, #1
100092d4:	4264      	negs	r4, r4
100092d6:	e00d      	b.n	100092f4 <mpu_init+0x2f8>
    if (mpu_set_accel_fsr(2))
        return -1;
100092d8:	2401      	movs	r4, #1
100092da:	4264      	negs	r4, r4
100092dc:	e00a      	b.n	100092f4 <mpu_init+0x2f8>
    if (mpu_set_lpf(42))
        return -1;
100092de:	2401      	movs	r4, #1
100092e0:	4264      	negs	r4, r4
100092e2:	e007      	b.n	100092f4 <mpu_init+0x2f8>
    if (mpu_set_sample_rate(50))
        return -1;
100092e4:	2401      	movs	r4, #1
100092e6:	4264      	negs	r4, r4
100092e8:	e004      	b.n	100092f4 <mpu_init+0x2f8>
    if (mpu_configure_fifo(0))
        return -1;
100092ea:	2401      	movs	r4, #1
100092ec:	4264      	negs	r4, r4
100092ee:	e001      	b.n	100092f4 <mpu_init+0x2f8>
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100092f0:	2401      	movs	r4, #1
100092f2:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100092f4:	0020      	movs	r0, r4
100092f6:	b004      	add	sp, #16
100092f8:	bd70      	pop	{r4, r5, r6, pc}
100092fa:	46c0      	nop			; (mov r8, r8)
100092fc:	1001b920 	.word	0x1001b920
10009300:	10008395 	.word	0x10008395
10009304:	10008129 	.word	0x10008129
10009308:	1001865f 	.word	0x1001865f
1000930c:	100086cd 	.word	0x100086cd
10009310:	100087b9 	.word	0x100087b9
10009314:	1000884d 	.word	0x1000884d
10009318:	10008d41 	.word	0x10008d41
1000931c:	1000899d 	.word	0x1000899d
10009320:	1000d5e9 	.word	0x1000d5e9
10009324:	10008a09 	.word	0x10008a09
10009328:	100082f9 	.word	0x100082f9
1000932c:	10019a70 	.word	0x10019a70
10009330:	100188c9 	.word	0x100188c9
10009334:	100198e0 	.word	0x100198e0
10009338:	10008925 	.word	0x10008925
1000933c:	10008e15 	.word	0x10008e15

10009340 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009340:	b570      	push	{r4, r5, r6, lr}
10009342:	b082      	sub	sp, #8
10009344:	000c      	movs	r4, r1
10009346:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009348:	d025      	beq.n	10009396 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000934a:	4b19      	ldr	r3, [pc, #100]	; (100093b0 <mpu_write_mem+0x70>)
1000934c:	7a9b      	ldrb	r3, [r3, #10]
1000934e:	2b00      	cmp	r3, #0
10009350:	d024      	beq.n	1000939c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009352:	ab01      	add	r3, sp, #4
10009354:	0a02      	lsrs	r2, r0, #8
10009356:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009358:	b2c0      	uxtb	r0, r0
1000935a:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000935c:	4b14      	ldr	r3, [pc, #80]	; (100093b0 <mpu_write_mem+0x70>)
1000935e:	685b      	ldr	r3, [r3, #4]
10009360:	1840      	adds	r0, r0, r1
10009362:	895a      	ldrh	r2, [r3, #10]
10009364:	4290      	cmp	r0, r2
10009366:	dc1c      	bgt.n	100093a2 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009368:	4a11      	ldr	r2, [pc, #68]	; (100093b0 <mpu_write_mem+0x70>)
1000936a:	6812      	ldr	r2, [r2, #0]
1000936c:	7ed1      	ldrb	r1, [r2, #27]
1000936e:	7818      	ldrb	r0, [r3, #0]
10009370:	ab01      	add	r3, sp, #4
10009372:	2202      	movs	r2, #2
10009374:	4e0f      	ldr	r6, [pc, #60]	; (100093b4 <mpu_write_mem+0x74>)
10009376:	47b0      	blx	r6
10009378:	2800      	cmp	r0, #0
1000937a:	d115      	bne.n	100093a8 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000937c:	b2e2      	uxtb	r2, r4
1000937e:	4b0c      	ldr	r3, [pc, #48]	; (100093b0 <mpu_write_mem+0x70>)
10009380:	6819      	ldr	r1, [r3, #0]
10009382:	7e09      	ldrb	r1, [r1, #24]
10009384:	685b      	ldr	r3, [r3, #4]
10009386:	7818      	ldrb	r0, [r3, #0]
10009388:	002b      	movs	r3, r5
1000938a:	4c0a      	ldr	r4, [pc, #40]	; (100093b4 <mpu_write_mem+0x74>)
1000938c:	47a0      	blx	r4
1000938e:	1e43      	subs	r3, r0, #1
10009390:	4198      	sbcs	r0, r3
10009392:	4240      	negs	r0, r0
10009394:	e00a      	b.n	100093ac <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009396:	2001      	movs	r0, #1
10009398:	4240      	negs	r0, r0
1000939a:	e007      	b.n	100093ac <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000939c:	2001      	movs	r0, #1
1000939e:	4240      	negs	r0, r0
100093a0:	e004      	b.n	100093ac <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
100093a2:	2001      	movs	r0, #1
100093a4:	4240      	negs	r0, r0
100093a6:	e001      	b.n	100093ac <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
100093a8:	2001      	movs	r0, #1
100093aa:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
100093ac:	b002      	add	sp, #8
100093ae:	bd70      	pop	{r4, r5, r6, pc}
100093b0:	1001b920 	.word	0x1001b920
100093b4:	10008395 	.word	0x10008395

100093b8 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100093b8:	b570      	push	{r4, r5, r6, lr}
100093ba:	b082      	sub	sp, #8
100093bc:	000c      	movs	r4, r1
100093be:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
100093c0:	d025      	beq.n	1000940e <mpu_read_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
100093c2:	4b19      	ldr	r3, [pc, #100]	; (10009428 <mpu_read_mem+0x70>)
100093c4:	7a9b      	ldrb	r3, [r3, #10]
100093c6:	2b00      	cmp	r3, #0
100093c8:	d024      	beq.n	10009414 <mpu_read_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100093ca:	ab01      	add	r3, sp, #4
100093cc:	0a02      	lsrs	r2, r0, #8
100093ce:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100093d0:	b2c0      	uxtb	r0, r0
100093d2:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100093d4:	4b14      	ldr	r3, [pc, #80]	; (10009428 <mpu_read_mem+0x70>)
100093d6:	685b      	ldr	r3, [r3, #4]
100093d8:	1840      	adds	r0, r0, r1
100093da:	895a      	ldrh	r2, [r3, #10]
100093dc:	4290      	cmp	r0, r2
100093de:	dc1c      	bgt.n	1000941a <mpu_read_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100093e0:	4a11      	ldr	r2, [pc, #68]	; (10009428 <mpu_read_mem+0x70>)
100093e2:	6812      	ldr	r2, [r2, #0]
100093e4:	7ed1      	ldrb	r1, [r2, #27]
100093e6:	7818      	ldrb	r0, [r3, #0]
100093e8:	ab01      	add	r3, sp, #4
100093ea:	2202      	movs	r2, #2
100093ec:	4e0f      	ldr	r6, [pc, #60]	; (1000942c <mpu_read_mem+0x74>)
100093ee:	47b0      	blx	r6
100093f0:	2800      	cmp	r0, #0
100093f2:	d115      	bne.n	10009420 <mpu_read_mem+0x68>
        return -1;
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
100093f4:	b2e2      	uxtb	r2, r4
100093f6:	4b0c      	ldr	r3, [pc, #48]	; (10009428 <mpu_read_mem+0x70>)
100093f8:	6819      	ldr	r1, [r3, #0]
100093fa:	7e09      	ldrb	r1, [r1, #24]
100093fc:	685b      	ldr	r3, [r3, #4]
100093fe:	7818      	ldrb	r0, [r3, #0]
10009400:	002b      	movs	r3, r5
10009402:	4c0b      	ldr	r4, [pc, #44]	; (10009430 <mpu_read_mem+0x78>)
10009404:	47a0      	blx	r4
10009406:	1e43      	subs	r3, r0, #1
10009408:	4198      	sbcs	r0, r3
1000940a:	4240      	negs	r0, r0
1000940c:	e00a      	b.n	10009424 <mpu_read_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000940e:	2001      	movs	r0, #1
10009410:	4240      	negs	r0, r0
10009412:	e007      	b.n	10009424 <mpu_read_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
10009414:	2001      	movs	r0, #1
10009416:	4240      	negs	r0, r0
10009418:	e004      	b.n	10009424 <mpu_read_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
1000941a:	2001      	movs	r0, #1
1000941c:	4240      	negs	r0, r0
1000941e:	e001      	b.n	10009424 <mpu_read_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009420:	2001      	movs	r0, #1
10009422:	4240      	negs	r0, r0
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
10009424:	b002      	add	sp, #8
10009426:	bd70      	pop	{r4, r5, r6, pc}
10009428:	1001b920 	.word	0x1001b920
1000942c:	10008395 	.word	0x10008395
10009430:	100082f9 	.word	0x100082f9

10009434 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
10009434:	b5f0      	push	{r4, r5, r6, r7, lr}
10009436:	465f      	mov	r7, fp
10009438:	4656      	mov	r6, sl
1000943a:	464d      	mov	r5, r9
1000943c:	4644      	mov	r4, r8
1000943e:	b4f0      	push	{r4, r5, r6, r7}
10009440:	b089      	sub	sp, #36	; 0x24
10009442:	4680      	mov	r8, r0
10009444:	4689      	mov	r9, r1
10009446:	9200      	str	r2, [sp, #0]
10009448:	9301      	str	r3, [sp, #4]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
1000944a:	2325      	movs	r3, #37	; 0x25
1000944c:	4a2d      	ldr	r2, [pc, #180]	; (10009504 <mpu_load_firmware+0xd0>)
1000944e:	5cd3      	ldrb	r3, [r2, r3]
10009450:	2b00      	cmp	r3, #0
10009452:	d13f      	bne.n	100094d4 <mpu_load_firmware+0xa0>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
10009454:	2900      	cmp	r1, #0
10009456:	d040      	beq.n	100094da <mpu_load_firmware+0xa6>
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
10009458:	2800      	cmp	r0, #0
1000945a:	d024      	beq.n	100094a6 <mpu_load_firmware+0x72>
1000945c:	2400      	movs	r4, #0
        this_write = min(LOAD_CHUNK, length - ii);
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1000945e:	4b2a      	ldr	r3, [pc, #168]	; (10009508 <mpu_load_firmware+0xd4>)
10009460:	469a      	mov	sl, r3
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
10009462:	4b2a      	ldr	r3, [pc, #168]	; (1000950c <mpu_load_firmware+0xd8>)
10009464:	469b      	mov	fp, r3
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
        this_write = min(LOAD_CHUNK, length - ii);
10009466:	4643      	mov	r3, r8
10009468:	1b1d      	subs	r5, r3, r4
1000946a:	2d10      	cmp	r5, #16
1000946c:	dd00      	ble.n	10009470 <mpu_load_firmware+0x3c>
1000946e:	2510      	movs	r5, #16
10009470:	b2ae      	uxth	r6, r5
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
10009472:	464b      	mov	r3, r9
10009474:	191f      	adds	r7, r3, r4
10009476:	003a      	movs	r2, r7
10009478:	0031      	movs	r1, r6
1000947a:	0020      	movs	r0, r4
1000947c:	47d0      	blx	sl
1000947e:	2800      	cmp	r0, #0
10009480:	d12e      	bne.n	100094e0 <mpu_load_firmware+0xac>
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
10009482:	aa04      	add	r2, sp, #16
10009484:	0031      	movs	r1, r6
10009486:	0020      	movs	r0, r4
10009488:	47d8      	blx	fp
1000948a:	2800      	cmp	r0, #0
1000948c:	d12b      	bne.n	100094e6 <mpu_load_firmware+0xb2>
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
1000948e:	042a      	lsls	r2, r5, #16
10009490:	0c12      	lsrs	r2, r2, #16
10009492:	a904      	add	r1, sp, #16
10009494:	0038      	movs	r0, r7
10009496:	4b1e      	ldr	r3, [pc, #120]	; (10009510 <mpu_load_firmware+0xdc>)
10009498:	4798      	blx	r3
1000949a:	2800      	cmp	r0, #0
1000949c:	d126      	bne.n	100094ec <mpu_load_firmware+0xb8>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
1000949e:	1934      	adds	r4, r6, r4
100094a0:	b2a4      	uxth	r4, r4
100094a2:	45a0      	cmp	r8, r4
100094a4:	d8df      	bhi.n	10009466 <mpu_load_firmware+0x32>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
100094a6:	ab03      	add	r3, sp, #12
100094a8:	9900      	ldr	r1, [sp, #0]
100094aa:	0a0a      	lsrs	r2, r1, #8
100094ac:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
100094ae:	7059      	strb	r1, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
100094b0:	4a14      	ldr	r2, [pc, #80]	; (10009504 <mpu_load_firmware+0xd0>)
100094b2:	6811      	ldr	r1, [r2, #0]
100094b4:	7f49      	ldrb	r1, [r1, #29]
100094b6:	6852      	ldr	r2, [r2, #4]
100094b8:	7810      	ldrb	r0, [r2, #0]
100094ba:	2202      	movs	r2, #2
100094bc:	4c15      	ldr	r4, [pc, #84]	; (10009514 <mpu_load_firmware+0xe0>)
100094be:	47a0      	blx	r4
100094c0:	2800      	cmp	r0, #0
100094c2:	d116      	bne.n	100094f2 <mpu_load_firmware+0xbe>
        return -1;

    st.chip_cfg.dmp_loaded = 1;
100094c4:	4b0f      	ldr	r3, [pc, #60]	; (10009504 <mpu_load_firmware+0xd0>)
100094c6:	2101      	movs	r1, #1
100094c8:	2225      	movs	r2, #37	; 0x25
100094ca:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = sample_rate;
100094cc:	466a      	mov	r2, sp
100094ce:	8892      	ldrh	r2, [r2, #4]
100094d0:	84da      	strh	r2, [r3, #38]	; 0x26
    return 0;
100094d2:	e010      	b.n	100094f6 <mpu_load_firmware+0xc2>
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
        /* DMP should only be loaded once. */
        return -1;
100094d4:	2001      	movs	r0, #1
100094d6:	4240      	negs	r0, r0
100094d8:	e00d      	b.n	100094f6 <mpu_load_firmware+0xc2>

    if (!firmware)
        return -1;
100094da:	2001      	movs	r0, #1
100094dc:	4240      	negs	r0, r0
100094de:	e00a      	b.n	100094f6 <mpu_load_firmware+0xc2>
    for (ii = 0; ii < length; ii += this_write) {
        this_write = min(LOAD_CHUNK, length - ii);
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
100094e0:	2001      	movs	r0, #1
100094e2:	4240      	negs	r0, r0
100094e4:	e007      	b.n	100094f6 <mpu_load_firmware+0xc2>
        if (mpu_read_mem(ii, this_write, cur))
            return -1;
100094e6:	2001      	movs	r0, #1
100094e8:	4240      	negs	r0, r0
100094ea:	e004      	b.n	100094f6 <mpu_load_firmware+0xc2>
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
100094ec:	2002      	movs	r0, #2
100094ee:	4240      	negs	r0, r0
100094f0:	e001      	b.n	100094f6 <mpu_load_firmware+0xc2>

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
    tmp[1] = start_addr & 0xFF;
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
        return -1;
100094f2:	2001      	movs	r0, #1
100094f4:	4240      	negs	r0, r0

    st.chip_cfg.dmp_loaded = 1;
    st.chip_cfg.dmp_sample_rate = sample_rate;
    return 0;
}
100094f6:	b009      	add	sp, #36	; 0x24
100094f8:	bc3c      	pop	{r2, r3, r4, r5}
100094fa:	4690      	mov	r8, r2
100094fc:	4699      	mov	r9, r3
100094fe:	46a2      	mov	sl, r4
10009500:	46ab      	mov	fp, r5
10009502:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009504:	1001b920 	.word	0x1001b920
10009508:	10009341 	.word	0x10009341
1000950c:	100093b9 	.word	0x100093b9
10009510:	10018605 	.word	0x10018605
10009514:	10008395 	.word	0x10008395

10009518 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009518:	b570      	push	{r4, r5, r6, lr}
1000951a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000951c:	2324      	movs	r3, #36	; 0x24
1000951e:	4a21      	ldr	r2, [pc, #132]	; (100095a4 <mpu_set_dmp_state+0x8c>)
10009520:	5cd3      	ldrb	r3, [r2, r3]
10009522:	4283      	cmp	r3, r0
10009524:	d037      	beq.n	10009596 <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
10009526:	2800      	cmp	r0, #0
10009528:	d020      	beq.n	1000956c <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
1000952a:	2325      	movs	r3, #37	; 0x25
1000952c:	5cd3      	ldrb	r3, [r2, r3]
1000952e:	2b00      	cmp	r3, #0
10009530:	d033      	beq.n	1000959a <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
10009532:	2000      	movs	r0, #0
10009534:	4d1c      	ldr	r5, [pc, #112]	; (100095a8 <mpu_set_dmp_state+0x90>)
10009536:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009538:	2000      	movs	r0, #0
1000953a:	4b1c      	ldr	r3, [pc, #112]	; (100095ac <mpu_set_dmp_state+0x94>)
1000953c:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
1000953e:	4c19      	ldr	r4, [pc, #100]	; (100095a4 <mpu_set_dmp_state+0x8c>)
10009540:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
10009542:	4b1b      	ldr	r3, [pc, #108]	; (100095b0 <mpu_set_dmp_state+0x98>)
10009544:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
10009546:	466b      	mov	r3, sp
10009548:	3307      	adds	r3, #7
1000954a:	2200      	movs	r2, #0
1000954c:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000954e:	6862      	ldr	r2, [r4, #4]
10009550:	7810      	ldrb	r0, [r2, #0]
10009552:	2201      	movs	r2, #1
10009554:	2123      	movs	r1, #35	; 0x23
10009556:	4e17      	ldr	r6, [pc, #92]	; (100095b4 <mpu_set_dmp_state+0x9c>)
10009558:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
1000955a:	2201      	movs	r2, #1
1000955c:	2324      	movs	r3, #36	; 0x24
1000955e:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009560:	2001      	movs	r0, #1
10009562:	47a8      	blx	r5
        mpu_reset_fifo();
10009564:	4b14      	ldr	r3, [pc, #80]	; (100095b8 <mpu_set_dmp_state+0xa0>)
10009566:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
10009568:	2000      	movs	r0, #0
1000956a:	e018      	b.n	1000959e <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
1000956c:	2000      	movs	r0, #0
1000956e:	4b0e      	ldr	r3, [pc, #56]	; (100095a8 <mpu_set_dmp_state+0x90>)
10009570:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
10009572:	466b      	mov	r3, sp
10009574:	3307      	adds	r3, #7
10009576:	4c0b      	ldr	r4, [pc, #44]	; (100095a4 <mpu_set_dmp_state+0x8c>)
10009578:	7c22      	ldrb	r2, [r4, #16]
1000957a:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
1000957c:	6862      	ldr	r2, [r4, #4]
1000957e:	7810      	ldrb	r0, [r2, #0]
10009580:	2201      	movs	r2, #1
10009582:	2123      	movs	r1, #35	; 0x23
10009584:	4d0b      	ldr	r5, [pc, #44]	; (100095b4 <mpu_set_dmp_state+0x9c>)
10009586:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009588:	2200      	movs	r2, #0
1000958a:	2324      	movs	r3, #36	; 0x24
1000958c:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
1000958e:	4b0a      	ldr	r3, [pc, #40]	; (100095b8 <mpu_set_dmp_state+0xa0>)
10009590:	4798      	blx	r3
    }
    return 0;
10009592:	2000      	movs	r0, #0
10009594:	e003      	b.n	1000959e <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009596:	2000      	movs	r0, #0
10009598:	e001      	b.n	1000959e <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000959a:	2001      	movs	r0, #1
1000959c:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
1000959e:	b002      	add	sp, #8
100095a0:	bd70      	pop	{r4, r5, r6, pc}
100095a2:	46c0      	nop			; (mov r8, r8)
100095a4:	1001b920 	.word	0x1001b920
100095a8:	100083f1 	.word	0x100083f1
100095ac:	10008a09 	.word	0x10008a09
100095b0:	10008d41 	.word	0x10008d41
100095b4:	10008395 	.word	0x10008395
100095b8:	10008495 	.word	0x10008495

100095bc <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100095bc:	4b02      	ldr	r3, [pc, #8]	; (100095c8 <mpu_get_compass_fsr+0xc>)
100095be:	685b      	ldr	r3, [r3, #4]
100095c0:	899b      	ldrh	r3, [r3, #12]
100095c2:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100095c4:	2000      	movs	r0, #0
100095c6:	4770      	bx	lr
100095c8:	1001b920 	.word	0x1001b920

100095cc <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
100095cc:	b510      	push	{r4, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
100095ce:	23c8      	movs	r3, #200	; 0xc8
100095d0:	2280      	movs	r2, #128	; 0x80
100095d2:	00d2      	lsls	r2, r2, #3
100095d4:	4902      	ldr	r1, [pc, #8]	; (100095e0 <dmp_load_motion_driver_firmware+0x14>)
100095d6:	4803      	ldr	r0, [pc, #12]	; (100095e4 <dmp_load_motion_driver_firmware+0x18>)
100095d8:	4c03      	ldr	r4, [pc, #12]	; (100095e8 <dmp_load_motion_driver_firmware+0x1c>)
100095da:	47a0      	blx	r4
        DMP_SAMPLE_RATE);
}
100095dc:	bd10      	pop	{r4, pc}
100095de:	46c0      	nop			; (mov r8, r8)
100095e0:	10019d08 	.word	0x10019d08
100095e4:	00000bf6 	.word	0x00000bf6
100095e8:	10009435 	.word	0x10009435

100095ec <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
100095ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100095ee:	4647      	mov	r7, r8
100095f0:	b480      	push	{r7}
100095f2:	b086      	sub	sp, #24
100095f4:	0004      	movs	r4, r0
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
100095f6:	af03      	add	r7, sp, #12
100095f8:	4d3d      	ldr	r5, [pc, #244]	; (100096f0 <dmp_set_orientation+0x104>)
100095fa:	2203      	movs	r2, #3
100095fc:	0029      	movs	r1, r5
100095fe:	0038      	movs	r0, r7
10009600:	4b3c      	ldr	r3, [pc, #240]	; (100096f4 <dmp_set_orientation+0x108>)
10009602:	4698      	mov	r8, r3
10009604:	4798      	blx	r3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
10009606:	ae02      	add	r6, sp, #8
10009608:	1d29      	adds	r1, r5, #4
1000960a:	2203      	movs	r2, #3
1000960c:	0030      	movs	r0, r6
1000960e:	47c0      	blx	r8
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
10009610:	0029      	movs	r1, r5
10009612:	3108      	adds	r1, #8
10009614:	2203      	movs	r2, #3
10009616:	a801      	add	r0, sp, #4
10009618:	47c0      	blx	r8
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
1000961a:	0029      	movs	r1, r5
1000961c:	310c      	adds	r1, #12
1000961e:	2203      	movs	r2, #3
10009620:	4668      	mov	r0, sp
10009622:	47c0      	blx	r8

    gyro_regs[0] = gyro_axes[orient & 3];
10009624:	2003      	movs	r0, #3
10009626:	0005      	movs	r5, r0
10009628:	4025      	ands	r5, r4
1000962a:	aa05      	add	r2, sp, #20
1000962c:	5d7b      	ldrb	r3, [r7, r5]
1000962e:	7013      	strb	r3, [r2, #0]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
10009630:	08e1      	lsrs	r1, r4, #3
10009632:	4001      	ands	r1, r0
10009634:	5c7b      	ldrb	r3, [r7, r1]
10009636:	7053      	strb	r3, [r2, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
10009638:	09a3      	lsrs	r3, r4, #6
1000963a:	4003      	ands	r3, r0
1000963c:	5cf8      	ldrb	r0, [r7, r3]
1000963e:	7090      	strb	r0, [r2, #2]
    accel_regs[0] = accel_axes[orient & 3];
10009640:	a804      	add	r0, sp, #16
10009642:	5d75      	ldrb	r5, [r6, r5]
10009644:	7005      	strb	r5, [r0, #0]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
10009646:	5c71      	ldrb	r1, [r6, r1]
10009648:	7041      	strb	r1, [r0, #1]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1000964a:	5cf3      	ldrb	r3, [r6, r3]
1000964c:	7083      	strb	r3, [r0, #2]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1000964e:	2103      	movs	r1, #3
10009650:	4829      	ldr	r0, [pc, #164]	; (100096f8 <dmp_set_orientation+0x10c>)
10009652:	4b2a      	ldr	r3, [pc, #168]	; (100096fc <dmp_set_orientation+0x110>)
10009654:	4798      	blx	r3
10009656:	2800      	cmp	r0, #0
10009658:	d13b      	bne.n	100096d2 <dmp_set_orientation+0xe6>
        return -1;
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
1000965a:	aa04      	add	r2, sp, #16
1000965c:	2103      	movs	r1, #3
1000965e:	4828      	ldr	r0, [pc, #160]	; (10009700 <dmp_set_orientation+0x114>)
10009660:	4b26      	ldr	r3, [pc, #152]	; (100096fc <dmp_set_orientation+0x110>)
10009662:	4798      	blx	r3
10009664:	2800      	cmp	r0, #0
10009666:	d137      	bne.n	100096d8 <dmp_set_orientation+0xec>
        return -1;

    memcpy(gyro_regs, gyro_sign, 3);
10009668:	ab05      	add	r3, sp, #20
1000966a:	aa01      	add	r2, sp, #4
1000966c:	8811      	ldrh	r1, [r2, #0]
1000966e:	8019      	strh	r1, [r3, #0]
10009670:	7892      	ldrb	r2, [r2, #2]
10009672:	709a      	strb	r2, [r3, #2]
    memcpy(accel_regs, accel_sign, 3);
10009674:	2203      	movs	r2, #3
10009676:	4669      	mov	r1, sp
10009678:	a804      	add	r0, sp, #16
1000967a:	4b1e      	ldr	r3, [pc, #120]	; (100096f4 <dmp_set_orientation+0x108>)
1000967c:	4798      	blx	r3
    if (orient & 4) {
1000967e:	0763      	lsls	r3, r4, #29
10009680:	d505      	bpl.n	1000968e <dmp_set_orientation+0xa2>
        gyro_regs[0] |= 1;
10009682:	2237      	movs	r2, #55	; 0x37
10009684:	ab05      	add	r3, sp, #20
10009686:	701a      	strb	r2, [r3, #0]
        accel_regs[0] |= 1;
10009688:	3a10      	subs	r2, #16
1000968a:	ab04      	add	r3, sp, #16
1000968c:	701a      	strb	r2, [r3, #0]
    }
    if (orient & 0x20) {
1000968e:	06a3      	lsls	r3, r4, #26
10009690:	d505      	bpl.n	1000969e <dmp_set_orientation+0xb2>
        gyro_regs[1] |= 1;
10009692:	2257      	movs	r2, #87	; 0x57
10009694:	ab05      	add	r3, sp, #20
10009696:	705a      	strb	r2, [r3, #1]
        accel_regs[1] |= 1;
10009698:	3a10      	subs	r2, #16
1000969a:	ab04      	add	r3, sp, #16
1000969c:	705a      	strb	r2, [r3, #1]
    }
    if (orient & 0x100) {
1000969e:	05e3      	lsls	r3, r4, #23
100096a0:	d505      	bpl.n	100096ae <dmp_set_orientation+0xc2>
        gyro_regs[2] |= 1;
100096a2:	2277      	movs	r2, #119	; 0x77
100096a4:	ab05      	add	r3, sp, #20
100096a6:	709a      	strb	r2, [r3, #2]
        accel_regs[2] |= 1;
100096a8:	3a10      	subs	r2, #16
100096aa:	ab04      	add	r3, sp, #16
100096ac:	709a      	strb	r2, [r3, #2]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
100096ae:	aa05      	add	r2, sp, #20
100096b0:	2103      	movs	r1, #3
100096b2:	2088      	movs	r0, #136	; 0x88
100096b4:	00c0      	lsls	r0, r0, #3
100096b6:	4b11      	ldr	r3, [pc, #68]	; (100096fc <dmp_set_orientation+0x110>)
100096b8:	4798      	blx	r3
100096ba:	2800      	cmp	r0, #0
100096bc:	d10f      	bne.n	100096de <dmp_set_orientation+0xf2>
        return -1;
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
100096be:	aa04      	add	r2, sp, #16
100096c0:	2103      	movs	r1, #3
100096c2:	4810      	ldr	r0, [pc, #64]	; (10009704 <dmp_set_orientation+0x118>)
100096c4:	4b0d      	ldr	r3, [pc, #52]	; (100096fc <dmp_set_orientation+0x110>)
100096c6:	4798      	blx	r3
100096c8:	2800      	cmp	r0, #0
100096ca:	d10b      	bne.n	100096e4 <dmp_set_orientation+0xf8>
        return -1;
    dmp.orient = orient;
100096cc:	4b0e      	ldr	r3, [pc, #56]	; (10009708 <dmp_set_orientation+0x11c>)
100096ce:	811c      	strh	r4, [r3, #8]
    return 0;
100096d0:	e00a      	b.n	100096e8 <dmp_set_orientation+0xfc>
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        return -1;
100096d2:	2001      	movs	r0, #1
100096d4:	4240      	negs	r0, r0
100096d6:	e007      	b.n	100096e8 <dmp_set_orientation+0xfc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
        return -1;
100096d8:	2001      	movs	r0, #1
100096da:	4240      	negs	r0, r0
100096dc:	e004      	b.n	100096e8 <dmp_set_orientation+0xfc>
        accel_regs[2] |= 1;
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
        return -1;
100096de:	2001      	movs	r0, #1
100096e0:	4240      	negs	r0, r0
100096e2:	e001      	b.n	100096e8 <dmp_set_orientation+0xfc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
        return -1;
100096e4:	2001      	movs	r0, #1
100096e6:	4240      	negs	r0, r0
    dmp.orient = orient;
    return 0;
}
100096e8:	b006      	add	sp, #24
100096ea:	bc04      	pop	{r2}
100096ec:	4690      	mov	r8, r2
100096ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096f0:	10019cbc 	.word	0x10019cbc
100096f4:	10018623 	.word	0x10018623
100096f8:	00000426 	.word	0x00000426
100096fc:	10009341 	.word	0x10009341
10009700:	0000042a 	.word	0x0000042a
10009704:	00000431 	.word	0x00000431
10009708:	1001ba04 	.word	0x1001ba04

1000970c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1000970c:	b510      	push	{r4, lr}
1000970e:	b086      	sub	sp, #24
10009710:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
10009712:	220c      	movs	r2, #12
10009714:	4915      	ldr	r1, [pc, #84]	; (1000976c <dmp_set_fifo_rate+0x60>)
10009716:	3110      	adds	r1, #16
10009718:	a803      	add	r0, sp, #12
1000971a:	4b15      	ldr	r3, [pc, #84]	; (10009770 <dmp_set_fifo_rate+0x64>)
1000971c:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000971e:	2cc8      	cmp	r4, #200	; 0xc8
10009720:	d819      	bhi.n	10009756 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009722:	0021      	movs	r1, r4
10009724:	20c8      	movs	r0, #200	; 0xc8
10009726:	4b13      	ldr	r3, [pc, #76]	; (10009774 <dmp_set_fifo_rate+0x68>)
10009728:	4798      	blx	r3
1000972a:	3801      	subs	r0, #1
1000972c:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000972e:	aa01      	add	r2, sp, #4
10009730:	0a03      	lsrs	r3, r0, #8
10009732:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
10009734:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009736:	2102      	movs	r1, #2
10009738:	480f      	ldr	r0, [pc, #60]	; (10009778 <dmp_set_fifo_rate+0x6c>)
1000973a:	4b10      	ldr	r3, [pc, #64]	; (1000977c <dmp_set_fifo_rate+0x70>)
1000973c:	4798      	blx	r3
1000973e:	2800      	cmp	r0, #0
10009740:	d10c      	bne.n	1000975c <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009742:	aa03      	add	r2, sp, #12
10009744:	210c      	movs	r1, #12
10009746:	480e      	ldr	r0, [pc, #56]	; (10009780 <dmp_set_fifo_rate+0x74>)
10009748:	4b0c      	ldr	r3, [pc, #48]	; (1000977c <dmp_set_fifo_rate+0x70>)
1000974a:	4798      	blx	r3
1000974c:	2800      	cmp	r0, #0
1000974e:	d108      	bne.n	10009762 <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009750:	4b0c      	ldr	r3, [pc, #48]	; (10009784 <dmp_set_fifo_rate+0x78>)
10009752:	819c      	strh	r4, [r3, #12]
    return 0;
10009754:	e007      	b.n	10009766 <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009756:	2001      	movs	r0, #1
10009758:	4240      	negs	r0, r0
1000975a:	e004      	b.n	10009766 <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
1000975c:	2001      	movs	r0, #1
1000975e:	4240      	negs	r0, r0
10009760:	e001      	b.n	10009766 <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
10009762:	2001      	movs	r0, #1
10009764:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
10009766:	b006      	add	sp, #24
10009768:	bd10      	pop	{r4, pc}
1000976a:	46c0      	nop			; (mov r8, r8)
1000976c:	10019cbc 	.word	0x10019cbc
10009770:	10018623 	.word	0x10018623
10009774:	1001541d 	.word	0x1001541d
10009778:	00000216 	.word	0x00000216
1000977c:	10009341 	.word	0x10009341
10009780:	00000ac1 	.word	0x00000ac1
10009784:	1001ba04 	.word	0x1001ba04

10009788 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000978a:	4647      	mov	r7, r8
1000978c:	b480      	push	{r7}
1000978e:	b082      	sub	sp, #8
10009790:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009792:	0743      	lsls	r3, r0, #29
10009794:	d100      	bne.n	10009798 <dmp_set_tap_thresh+0x10>
10009796:	e09c      	b.n	100098d2 <dmp_set_tap_thresh+0x14a>
10009798:	23c8      	movs	r3, #200	; 0xc8
1000979a:	00db      	lsls	r3, r3, #3
1000979c:	4299      	cmp	r1, r3
1000979e:	d900      	bls.n	100097a2 <dmp_set_tap_thresh+0x1a>
100097a0:	e09a      	b.n	100098d8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
100097a2:	0008      	movs	r0, r1
100097a4:	4b58      	ldr	r3, [pc, #352]	; (10009908 <dmp_set_tap_thresh+0x180>)
100097a6:	4798      	blx	r3
100097a8:	4958      	ldr	r1, [pc, #352]	; (1000990c <dmp_set_tap_thresh+0x184>)
100097aa:	4b59      	ldr	r3, [pc, #356]	; (10009910 <dmp_set_tap_thresh+0x188>)
100097ac:	4798      	blx	r3
100097ae:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100097b0:	466b      	mov	r3, sp
100097b2:	1cdd      	adds	r5, r3, #3
100097b4:	0028      	movs	r0, r5
100097b6:	4b57      	ldr	r3, [pc, #348]	; (10009914 <dmp_set_tap_thresh+0x18c>)
100097b8:	4798      	blx	r3
    switch (accel_fsr) {
100097ba:	782b      	ldrb	r3, [r5, #0]
100097bc:	2b04      	cmp	r3, #4
100097be:	d019      	beq.n	100097f4 <dmp_set_tap_thresh+0x6c>
100097c0:	b2da      	uxtb	r2, r3
100097c2:	2a04      	cmp	r2, #4
100097c4:	d802      	bhi.n	100097cc <dmp_set_tap_thresh+0x44>
100097c6:	2b02      	cmp	r3, #2
100097c8:	d005      	beq.n	100097d6 <dmp_set_tap_thresh+0x4e>
100097ca:	e088      	b.n	100098de <dmp_set_tap_thresh+0x156>
100097cc:	2b08      	cmp	r3, #8
100097ce:	d020      	beq.n	10009812 <dmp_set_tap_thresh+0x8a>
100097d0:	2b10      	cmp	r3, #16
100097d2:	d02d      	beq.n	10009830 <dmp_set_tap_thresh+0xa8>
100097d4:	e083      	b.n	100098de <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100097d6:	4b50      	ldr	r3, [pc, #320]	; (10009918 <dmp_set_tap_thresh+0x190>)
100097d8:	4698      	mov	r8, r3
100097da:	218d      	movs	r1, #141	; 0x8d
100097dc:	05c9      	lsls	r1, r1, #23
100097de:	1c30      	adds	r0, r6, #0
100097e0:	4798      	blx	r3
100097e2:	4f4e      	ldr	r7, [pc, #312]	; (1000991c <dmp_set_tap_thresh+0x194>)
100097e4:	47b8      	blx	r7
100097e6:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100097e8:	494d      	ldr	r1, [pc, #308]	; (10009920 <dmp_set_tap_thresh+0x198>)
100097ea:	1c30      	adds	r0, r6, #0
100097ec:	47c0      	blx	r8
100097ee:	47b8      	blx	r7
100097f0:	b280      	uxth	r0, r0
        break;
100097f2:	e02b      	b.n	1000984c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
100097f4:	4b48      	ldr	r3, [pc, #288]	; (10009918 <dmp_set_tap_thresh+0x190>)
100097f6:	4698      	mov	r8, r3
100097f8:	218c      	movs	r1, #140	; 0x8c
100097fa:	05c9      	lsls	r1, r1, #23
100097fc:	1c30      	adds	r0, r6, #0
100097fe:	4798      	blx	r3
10009800:	4f46      	ldr	r7, [pc, #280]	; (1000991c <dmp_set_tap_thresh+0x194>)
10009802:	47b8      	blx	r7
10009804:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009806:	4947      	ldr	r1, [pc, #284]	; (10009924 <dmp_set_tap_thresh+0x19c>)
10009808:	1c30      	adds	r0, r6, #0
1000980a:	47c0      	blx	r8
1000980c:	47b8      	blx	r7
1000980e:	b280      	uxth	r0, r0
        break;
10009810:	e01c      	b.n	1000984c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009812:	4b41      	ldr	r3, [pc, #260]	; (10009918 <dmp_set_tap_thresh+0x190>)
10009814:	4698      	mov	r8, r3
10009816:	218b      	movs	r1, #139	; 0x8b
10009818:	05c9      	lsls	r1, r1, #23
1000981a:	1c30      	adds	r0, r6, #0
1000981c:	4798      	blx	r3
1000981e:	4f3f      	ldr	r7, [pc, #252]	; (1000991c <dmp_set_tap_thresh+0x194>)
10009820:	47b8      	blx	r7
10009822:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009824:	4940      	ldr	r1, [pc, #256]	; (10009928 <dmp_set_tap_thresh+0x1a0>)
10009826:	1c30      	adds	r0, r6, #0
10009828:	47c0      	blx	r8
1000982a:	47b8      	blx	r7
1000982c:	b280      	uxth	r0, r0
        break;
1000982e:	e00d      	b.n	1000984c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009830:	4b39      	ldr	r3, [pc, #228]	; (10009918 <dmp_set_tap_thresh+0x190>)
10009832:	4698      	mov	r8, r3
10009834:	218a      	movs	r1, #138	; 0x8a
10009836:	05c9      	lsls	r1, r1, #23
10009838:	1c30      	adds	r0, r6, #0
1000983a:	4798      	blx	r3
1000983c:	4f37      	ldr	r7, [pc, #220]	; (1000991c <dmp_set_tap_thresh+0x194>)
1000983e:	47b8      	blx	r7
10009840:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009842:	493a      	ldr	r1, [pc, #232]	; (1000992c <dmp_set_tap_thresh+0x1a4>)
10009844:	1c30      	adds	r0, r6, #0
10009846:	47c0      	blx	r8
10009848:	47b8      	blx	r7
1000984a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000984c:	ab01      	add	r3, sp, #4
1000984e:	0a2a      	lsrs	r2, r5, #8
10009850:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009852:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009854:	0a02      	lsrs	r2, r0, #8
10009856:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009858:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000985a:	07e3      	lsls	r3, r4, #31
1000985c:	d510      	bpl.n	10009880 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000985e:	aa01      	add	r2, sp, #4
10009860:	2102      	movs	r1, #2
10009862:	20ea      	movs	r0, #234	; 0xea
10009864:	0040      	lsls	r0, r0, #1
10009866:	4b32      	ldr	r3, [pc, #200]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
10009868:	4798      	blx	r3
1000986a:	2800      	cmp	r0, #0
1000986c:	d13a      	bne.n	100098e4 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000986e:	466b      	mov	r3, sp
10009870:	1d9a      	adds	r2, r3, #6
10009872:	2102      	movs	r1, #2
10009874:	3025      	adds	r0, #37	; 0x25
10009876:	30ff      	adds	r0, #255	; 0xff
10009878:	4b2d      	ldr	r3, [pc, #180]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
1000987a:	4798      	blx	r3
1000987c:	2800      	cmp	r0, #0
1000987e:	d134      	bne.n	100098ea <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
10009880:	07a3      	lsls	r3, r4, #30
10009882:	d510      	bpl.n	100098a6 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009884:	aa01      	add	r2, sp, #4
10009886:	2102      	movs	r1, #2
10009888:	20ec      	movs	r0, #236	; 0xec
1000988a:	0040      	lsls	r0, r0, #1
1000988c:	4b28      	ldr	r3, [pc, #160]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
1000988e:	4798      	blx	r3
10009890:	2800      	cmp	r0, #0
10009892:	d12d      	bne.n	100098f0 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009894:	466b      	mov	r3, sp
10009896:	1d9a      	adds	r2, r3, #6
10009898:	2102      	movs	r1, #2
1000989a:	3029      	adds	r0, #41	; 0x29
1000989c:	30ff      	adds	r0, #255	; 0xff
1000989e:	4b24      	ldr	r3, [pc, #144]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
100098a0:	4798      	blx	r3
100098a2:	2800      	cmp	r0, #0
100098a4:	d127      	bne.n	100098f6 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100098a6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100098a8:	0763      	lsls	r3, r4, #29
100098aa:	d529      	bpl.n	10009900 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100098ac:	aa01      	add	r2, sp, #4
100098ae:	2102      	movs	r1, #2
100098b0:	30dd      	adds	r0, #221	; 0xdd
100098b2:	30ff      	adds	r0, #255	; 0xff
100098b4:	4b1e      	ldr	r3, [pc, #120]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
100098b6:	4798      	blx	r3
100098b8:	2800      	cmp	r0, #0
100098ba:	d11f      	bne.n	100098fc <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100098bc:	466b      	mov	r3, sp
100098be:	1d9a      	adds	r2, r3, #6
100098c0:	2102      	movs	r1, #2
100098c2:	302d      	adds	r0, #45	; 0x2d
100098c4:	30ff      	adds	r0, #255	; 0xff
100098c6:	4b1a      	ldr	r3, [pc, #104]	; (10009930 <dmp_set_tap_thresh+0x1a8>)
100098c8:	4798      	blx	r3
100098ca:	1e43      	subs	r3, r0, #1
100098cc:	4198      	sbcs	r0, r3
100098ce:	4240      	negs	r0, r0
100098d0:	e016      	b.n	10009900 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100098d2:	2001      	movs	r0, #1
100098d4:	4240      	negs	r0, r0
100098d6:	e013      	b.n	10009900 <dmp_set_tap_thresh+0x178>
100098d8:	2001      	movs	r0, #1
100098da:	4240      	negs	r0, r0
100098dc:	e010      	b.n	10009900 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100098de:	2001      	movs	r0, #1
100098e0:	4240      	negs	r0, r0
100098e2:	e00d      	b.n	10009900 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
100098e4:	2001      	movs	r0, #1
100098e6:	4240      	negs	r0, r0
100098e8:	e00a      	b.n	10009900 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
100098ea:	2001      	movs	r0, #1
100098ec:	4240      	negs	r0, r0
100098ee:	e007      	b.n	10009900 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
100098f0:	2001      	movs	r0, #1
100098f2:	4240      	negs	r0, r0
100098f4:	e004      	b.n	10009900 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
100098f6:	2001      	movs	r0, #1
100098f8:	4240      	negs	r0, r0
100098fa:	e001      	b.n	10009900 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
100098fc:	2001      	movs	r0, #1
100098fe:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009900:	b002      	add	sp, #8
10009902:	bc04      	pop	{r2}
10009904:	4690      	mov	r8, r2
10009906:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009908:	100165b1 	.word	0x100165b1
1000990c:	43480000 	.word	0x43480000
10009910:	10015be5 	.word	0x10015be5
10009914:	1000876d 	.word	0x1000876d
10009918:	10015f79 	.word	0x10015f79
1000991c:	10015785 	.word	0x10015785
10009920:	46400000 	.word	0x46400000
10009924:	45c00000 	.word	0x45c00000
10009928:	45400000 	.word	0x45400000
1000992c:	44c00000 	.word	0x44c00000
10009930:	10009341 	.word	0x10009341

10009934 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009934:	b500      	push	{lr}
10009936:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009938:	07c3      	lsls	r3, r0, #31
1000993a:	d403      	bmi.n	10009944 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
1000993c:	2200      	movs	r2, #0
1000993e:	466b      	mov	r3, sp
10009940:	71da      	strb	r2, [r3, #7]
10009942:	e002      	b.n	1000994a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009944:	2230      	movs	r2, #48	; 0x30
10009946:	466b      	mov	r3, sp
10009948:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
1000994a:	0783      	lsls	r3, r0, #30
1000994c:	d505      	bpl.n	1000995a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
1000994e:	466b      	mov	r3, sp
10009950:	1dda      	adds	r2, r3, #7
10009952:	79d9      	ldrb	r1, [r3, #7]
10009954:	230c      	movs	r3, #12
10009956:	430b      	orrs	r3, r1
10009958:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
1000995a:	0743      	lsls	r3, r0, #29
1000995c:	d505      	bpl.n	1000996a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
1000995e:	466b      	mov	r3, sp
10009960:	1dda      	adds	r2, r3, #7
10009962:	79d9      	ldrb	r1, [r3, #7]
10009964:	2303      	movs	r3, #3
10009966:	430b      	orrs	r3, r1
10009968:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000996a:	466b      	mov	r3, sp
1000996c:	1dda      	adds	r2, r3, #7
1000996e:	2101      	movs	r1, #1
10009970:	20a4      	movs	r0, #164	; 0xa4
10009972:	0040      	lsls	r0, r0, #1
10009974:	4b01      	ldr	r3, [pc, #4]	; (1000997c <dmp_set_tap_axes+0x48>)
10009976:	4798      	blx	r3
}
10009978:	b003      	add	sp, #12
1000997a:	bd00      	pop	{pc}
1000997c:	10009341 	.word	0x10009341

10009980 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
10009980:	b500      	push	{lr}
10009982:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
10009984:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
10009986:	2800      	cmp	r0, #0
10009988:	d004      	beq.n	10009994 <dmp_set_tap_count+0x14>
1000998a:	1c03      	adds	r3, r0, #0
1000998c:	2804      	cmp	r0, #4
1000998e:	d900      	bls.n	10009992 <dmp_set_tap_count+0x12>
10009990:	2304      	movs	r3, #4
10009992:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009994:	466a      	mov	r2, sp
10009996:	3207      	adds	r2, #7
10009998:	3b01      	subs	r3, #1
1000999a:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
1000999c:	2101      	movs	r1, #1
1000999e:	2050      	movs	r0, #80	; 0x50
100099a0:	30ff      	adds	r0, #255	; 0xff
100099a2:	4b02      	ldr	r3, [pc, #8]	; (100099ac <dmp_set_tap_count+0x2c>)
100099a4:	4798      	blx	r3
}
100099a6:	b003      	add	sp, #12
100099a8:	bd00      	pop	{pc}
100099aa:	46c0      	nop			; (mov r8, r8)
100099ac:	10009341 	.word	0x10009341

100099b0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
100099b0:	b500      	push	{lr}
100099b2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100099b4:	2105      	movs	r1, #5
100099b6:	4b07      	ldr	r3, [pc, #28]	; (100099d4 <dmp_set_tap_time+0x24>)
100099b8:	4798      	blx	r3
100099ba:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
100099bc:	aa01      	add	r2, sp, #4
100099be:	0a03      	lsrs	r3, r0, #8
100099c0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100099c2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100099c4:	2102      	movs	r1, #2
100099c6:	20ef      	movs	r0, #239	; 0xef
100099c8:	0040      	lsls	r0, r0, #1
100099ca:	4b03      	ldr	r3, [pc, #12]	; (100099d8 <dmp_set_tap_time+0x28>)
100099cc:	4798      	blx	r3
}
100099ce:	b003      	add	sp, #12
100099d0:	bd00      	pop	{pc}
100099d2:	46c0      	nop			; (mov r8, r8)
100099d4:	10015309 	.word	0x10015309
100099d8:	10009341 	.word	0x10009341

100099dc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
100099dc:	b500      	push	{lr}
100099de:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100099e0:	2105      	movs	r1, #5
100099e2:	4b07      	ldr	r3, [pc, #28]	; (10009a00 <dmp_set_tap_time_multi+0x24>)
100099e4:	4798      	blx	r3
100099e6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
100099e8:	aa01      	add	r2, sp, #4
100099ea:	0a03      	lsrs	r3, r0, #8
100099ec:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100099ee:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100099f0:	2102      	movs	r1, #2
100099f2:	20ed      	movs	r0, #237	; 0xed
100099f4:	0040      	lsls	r0, r0, #1
100099f6:	4b03      	ldr	r3, [pc, #12]	; (10009a04 <dmp_set_tap_time_multi+0x28>)
100099f8:	4798      	blx	r3
}
100099fa:	b003      	add	sp, #12
100099fc:	bd00      	pop	{pc}
100099fe:	46c0      	nop			; (mov r8, r8)
10009a00:	10015309 	.word	0x10015309
10009a04:	10009341 	.word	0x10009341

10009a08 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009a08:	b510      	push	{r4, lr}
10009a0a:	b082      	sub	sp, #8
10009a0c:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009a0e:	21fa      	movs	r1, #250	; 0xfa
10009a10:	0089      	lsls	r1, r1, #2
10009a12:	4b09      	ldr	r3, [pc, #36]	; (10009a38 <dmp_set_shake_reject_thresh+0x30>)
10009a14:	4798      	blx	r3
10009a16:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009a18:	aa01      	add	r2, sp, #4
10009a1a:	1603      	asrs	r3, r0, #24
10009a1c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009a1e:	1403      	asrs	r3, r0, #16
10009a20:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009a22:	1203      	asrs	r3, r0, #8
10009a24:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009a26:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009a28:	2104      	movs	r1, #4
10009a2a:	20ae      	movs	r0, #174	; 0xae
10009a2c:	0040      	lsls	r0, r0, #1
10009a2e:	4b03      	ldr	r3, [pc, #12]	; (10009a3c <dmp_set_shake_reject_thresh+0x34>)
10009a30:	4798      	blx	r3
}
10009a32:	b002      	add	sp, #8
10009a34:	bd10      	pop	{r4, pc}
10009a36:	46c0      	nop			; (mov r8, r8)
10009a38:	1001541d 	.word	0x1001541d
10009a3c:	10009341 	.word	0x10009341

10009a40 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009a40:	b500      	push	{lr}
10009a42:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009a44:	2105      	movs	r1, #5
10009a46:	4b07      	ldr	r3, [pc, #28]	; (10009a64 <dmp_set_shake_reject_time+0x24>)
10009a48:	4798      	blx	r3
10009a4a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009a4c:	aa01      	add	r2, sp, #4
10009a4e:	0a03      	lsrs	r3, r0, #8
10009a50:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009a52:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009a54:	2102      	movs	r1, #2
10009a56:	20ad      	movs	r0, #173	; 0xad
10009a58:	0040      	lsls	r0, r0, #1
10009a5a:	4b03      	ldr	r3, [pc, #12]	; (10009a68 <dmp_set_shake_reject_time+0x28>)
10009a5c:	4798      	blx	r3
}
10009a5e:	b003      	add	sp, #12
10009a60:	bd00      	pop	{pc}
10009a62:	46c0      	nop			; (mov r8, r8)
10009a64:	10015309 	.word	0x10015309
10009a68:	10009341 	.word	0x10009341

10009a6c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
10009a6c:	b500      	push	{lr}
10009a6e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009a70:	2105      	movs	r1, #5
10009a72:	4b07      	ldr	r3, [pc, #28]	; (10009a90 <dmp_set_shake_reject_timeout+0x24>)
10009a74:	4798      	blx	r3
10009a76:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009a78:	aa01      	add	r2, sp, #4
10009a7a:	0a03      	lsrs	r3, r0, #8
10009a7c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009a7e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009a80:	2102      	movs	r1, #2
10009a82:	20ac      	movs	r0, #172	; 0xac
10009a84:	0040      	lsls	r0, r0, #1
10009a86:	4b03      	ldr	r3, [pc, #12]	; (10009a94 <dmp_set_shake_reject_timeout+0x28>)
10009a88:	4798      	blx	r3
}
10009a8a:	b003      	add	sp, #12
10009a8c:	bd00      	pop	{pc}
10009a8e:	46c0      	nop			; (mov r8, r8)
10009a90:	10015309 	.word	0x10015309
10009a94:	10009341 	.word	0x10009341

10009a98 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009a98:	b500      	push	{lr}
10009a9a:	b085      	sub	sp, #20
    if (enable) {
10009a9c:	2800      	cmp	r0, #0
10009a9e:	d00c      	beq.n	10009aba <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009aa0:	2209      	movs	r2, #9
10009aa2:	490d      	ldr	r1, [pc, #52]	; (10009ad8 <dmp_enable_gyro_cal+0x40>)
10009aa4:	311c      	adds	r1, #28
10009aa6:	a801      	add	r0, sp, #4
10009aa8:	4b0c      	ldr	r3, [pc, #48]	; (10009adc <dmp_enable_gyro_cal+0x44>)
10009aaa:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009aac:	aa01      	add	r2, sp, #4
10009aae:	2109      	movs	r1, #9
10009ab0:	2097      	movs	r0, #151	; 0x97
10009ab2:	00c0      	lsls	r0, r0, #3
10009ab4:	4b0a      	ldr	r3, [pc, #40]	; (10009ae0 <dmp_enable_gyro_cal+0x48>)
10009ab6:	4798      	blx	r3
10009ab8:	e00b      	b.n	10009ad2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009aba:	2209      	movs	r2, #9
10009abc:	4906      	ldr	r1, [pc, #24]	; (10009ad8 <dmp_enable_gyro_cal+0x40>)
10009abe:	3128      	adds	r1, #40	; 0x28
10009ac0:	a801      	add	r0, sp, #4
10009ac2:	4b06      	ldr	r3, [pc, #24]	; (10009adc <dmp_enable_gyro_cal+0x44>)
10009ac4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009ac6:	aa01      	add	r2, sp, #4
10009ac8:	2109      	movs	r1, #9
10009aca:	2097      	movs	r0, #151	; 0x97
10009acc:	00c0      	lsls	r0, r0, #3
10009ace:	4b04      	ldr	r3, [pc, #16]	; (10009ae0 <dmp_enable_gyro_cal+0x48>)
10009ad0:	4798      	blx	r3
    }
}
10009ad2:	b005      	add	sp, #20
10009ad4:	bd00      	pop	{pc}
10009ad6:	46c0      	nop			; (mov r8, r8)
10009ad8:	10019cbc 	.word	0x10019cbc
10009adc:	10018623 	.word	0x10018623
10009ae0:	10009341 	.word	0x10009341

10009ae4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009ae4:	b500      	push	{lr}
10009ae6:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009ae8:	2800      	cmp	r0, #0
10009aea:	d009      	beq.n	10009b00 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009aec:	ab01      	add	r3, sp, #4
10009aee:	22c0      	movs	r2, #192	; 0xc0
10009af0:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009af2:	3202      	adds	r2, #2
10009af4:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009af6:	3202      	adds	r2, #2
10009af8:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009afa:	3202      	adds	r2, #2
10009afc:	70da      	strb	r2, [r3, #3]
10009afe:	e001      	b.n	10009b04 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009b00:	4b05      	ldr	r3, [pc, #20]	; (10009b18 <dmp_enable_lp_quat+0x34>)
10009b02:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009b04:	aa01      	add	r2, sp, #4
10009b06:	2104      	movs	r1, #4
10009b08:	4804      	ldr	r0, [pc, #16]	; (10009b1c <dmp_enable_lp_quat+0x38>)
10009b0a:	4b05      	ldr	r3, [pc, #20]	; (10009b20 <dmp_enable_lp_quat+0x3c>)
10009b0c:	4798      	blx	r3

    return mpu_reset_fifo();
10009b0e:	4b05      	ldr	r3, [pc, #20]	; (10009b24 <dmp_enable_lp_quat+0x40>)
10009b10:	4798      	blx	r3
}
10009b12:	b003      	add	sp, #12
10009b14:	bd00      	pop	{pc}
10009b16:	46c0      	nop			; (mov r8, r8)
10009b18:	8b8b8b8b 	.word	0x8b8b8b8b
10009b1c:	00000a98 	.word	0x00000a98
10009b20:	10009341 	.word	0x10009341
10009b24:	10008495 	.word	0x10008495

10009b28 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009b28:	b500      	push	{lr}
10009b2a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009b2c:	2800      	cmp	r0, #0
10009b2e:	d009      	beq.n	10009b44 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009b30:	ab01      	add	r3, sp, #4
10009b32:	2220      	movs	r2, #32
10009b34:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009b36:	3208      	adds	r2, #8
10009b38:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009b3a:	3208      	adds	r2, #8
10009b3c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009b3e:	3208      	adds	r2, #8
10009b40:	70da      	strb	r2, [r3, #3]
10009b42:	e001      	b.n	10009b48 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009b44:	4b05      	ldr	r3, [pc, #20]	; (10009b5c <dmp_enable_6x_lp_quat+0x34>)
10009b46:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009b48:	aa01      	add	r2, sp, #4
10009b4a:	2104      	movs	r1, #4
10009b4c:	4804      	ldr	r0, [pc, #16]	; (10009b60 <dmp_enable_6x_lp_quat+0x38>)
10009b4e:	4b05      	ldr	r3, [pc, #20]	; (10009b64 <dmp_enable_6x_lp_quat+0x3c>)
10009b50:	4798      	blx	r3

    return mpu_reset_fifo();
10009b52:	4b05      	ldr	r3, [pc, #20]	; (10009b68 <dmp_enable_6x_lp_quat+0x40>)
10009b54:	4798      	blx	r3
}
10009b56:	b003      	add	sp, #12
10009b58:	bd00      	pop	{pc}
10009b5a:	46c0      	nop			; (mov r8, r8)
10009b5c:	a3a3a3a3 	.word	0xa3a3a3a3
10009b60:	00000a9e 	.word	0x00000a9e
10009b64:	10009341 	.word	0x10009341
10009b68:	10008495 	.word	0x10008495

10009b6c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b6e:	b085      	sub	sp, #20
10009b70:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009b72:	ad01      	add	r5, sp, #4
10009b74:	2302      	movs	r3, #2
10009b76:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009b78:	33c8      	adds	r3, #200	; 0xc8
10009b7a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009b7c:	3319      	adds	r3, #25
10009b7e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009b80:	3bda      	subs	r3, #218	; 0xda
10009b82:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009b84:	002a      	movs	r2, r5
10009b86:	2104      	movs	r1, #4
10009b88:	2068      	movs	r0, #104	; 0x68
10009b8a:	4b6a      	ldr	r3, [pc, #424]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009b8c:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009b8e:	23a3      	movs	r3, #163	; 0xa3
10009b90:	702b      	strb	r3, [r5, #0]
10009b92:	2740      	movs	r7, #64	; 0x40
10009b94:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009b96:	d007      	beq.n	10009ba8 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009b98:	ab01      	add	r3, sp, #4
10009b9a:	22c0      	movs	r2, #192	; 0xc0
10009b9c:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009b9e:	3208      	adds	r2, #8
10009ba0:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009ba2:	3a06      	subs	r2, #6
10009ba4:	70da      	strb	r2, [r3, #3]
10009ba6:	e004      	b.n	10009bb2 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009ba8:	ab01      	add	r3, sp, #4
10009baa:	22a3      	movs	r2, #163	; 0xa3
10009bac:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009bae:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009bb0:	70da      	strb	r2, [r3, #3]
10009bb2:	25c0      	movs	r5, #192	; 0xc0
10009bb4:	006d      	lsls	r5, r5, #1
10009bb6:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009bb8:	d007      	beq.n	10009bca <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009bba:	ab01      	add	r3, sp, #4
10009bbc:	22c4      	movs	r2, #196	; 0xc4
10009bbe:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009bc0:	3208      	adds	r2, #8
10009bc2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009bc4:	3a06      	subs	r2, #6
10009bc6:	719a      	strb	r2, [r3, #6]
10009bc8:	e004      	b.n	10009bd4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009bca:	ab01      	add	r3, sp, #4
10009bcc:	22a3      	movs	r2, #163	; 0xa3
10009bce:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009bd0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009bd2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009bd4:	aa01      	add	r2, sp, #4
10009bd6:	23a3      	movs	r3, #163	; 0xa3
10009bd8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009bda:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009bdc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009bde:	210a      	movs	r1, #10
10009be0:	4855      	ldr	r0, [pc, #340]	; (10009d38 <dmp_enable_feature+0x1cc>)
10009be2:	4b54      	ldr	r3, [pc, #336]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009be4:	4798      	blx	r3
10009be6:	2603      	movs	r6, #3
10009be8:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009bea:	d003      	beq.n	10009bf4 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009bec:	2220      	movs	r2, #32
10009bee:	ab01      	add	r3, sp, #4
10009bf0:	701a      	strb	r2, [r3, #0]
10009bf2:	e002      	b.n	10009bfa <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009bf4:	22d8      	movs	r2, #216	; 0xd8
10009bf6:	ab01      	add	r3, sp, #4
10009bf8:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009bfa:	aa01      	add	r2, sp, #4
10009bfc:	2101      	movs	r1, #1
10009bfe:	484f      	ldr	r0, [pc, #316]	; (10009d3c <dmp_enable_feature+0x1d0>)
10009c00:	4b4c      	ldr	r3, [pc, #304]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009c02:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009c04:	06a3      	lsls	r3, r4, #26
10009c06:	d503      	bpl.n	10009c10 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009c08:	2001      	movs	r0, #1
10009c0a:	4b4d      	ldr	r3, [pc, #308]	; (10009d40 <dmp_enable_feature+0x1d4>)
10009c0c:	4798      	blx	r3
10009c0e:	e002      	b.n	10009c16 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009c10:	2000      	movs	r0, #0
10009c12:	4b4b      	ldr	r3, [pc, #300]	; (10009d40 <dmp_enable_feature+0x1d4>)
10009c14:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009c16:	2d00      	cmp	r5, #0
10009c18:	d019      	beq.n	10009c4e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009c1a:	05e3      	lsls	r3, r4, #23
10009c1c:	d509      	bpl.n	10009c32 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009c1e:	ab01      	add	r3, sp, #4
10009c20:	22b2      	movs	r2, #178	; 0xb2
10009c22:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009c24:	3a27      	subs	r2, #39	; 0x27
10009c26:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009c28:	322b      	adds	r2, #43	; 0x2b
10009c2a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009c2c:	3a1b      	subs	r2, #27
10009c2e:	70da      	strb	r2, [r3, #3]
10009c30:	e008      	b.n	10009c44 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009c32:	ab01      	add	r3, sp, #4
10009c34:	22b0      	movs	r2, #176	; 0xb0
10009c36:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009c38:	3a30      	subs	r2, #48	; 0x30
10009c3a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009c3c:	3234      	adds	r2, #52	; 0x34
10009c3e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009c40:	3a24      	subs	r2, #36	; 0x24
10009c42:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009c44:	aa01      	add	r2, sp, #4
10009c46:	2104      	movs	r1, #4
10009c48:	483e      	ldr	r0, [pc, #248]	; (10009d44 <dmp_enable_feature+0x1d8>)
10009c4a:	4b3a      	ldr	r3, [pc, #232]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009c4c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009c4e:	07e3      	lsls	r3, r4, #31
10009c50:	d523      	bpl.n	10009c9a <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009c52:	aa01      	add	r2, sp, #4
10009c54:	23f8      	movs	r3, #248	; 0xf8
10009c56:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009c58:	2101      	movs	r1, #1
10009c5a:	208b      	movs	r0, #139	; 0x8b
10009c5c:	0100      	lsls	r0, r0, #4
10009c5e:	4b35      	ldr	r3, [pc, #212]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009c60:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009c62:	21fa      	movs	r1, #250	; 0xfa
10009c64:	2007      	movs	r0, #7
10009c66:	4b38      	ldr	r3, [pc, #224]	; (10009d48 <dmp_enable_feature+0x1dc>)
10009c68:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009c6a:	2007      	movs	r0, #7
10009c6c:	4b37      	ldr	r3, [pc, #220]	; (10009d4c <dmp_enable_feature+0x1e0>)
10009c6e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009c70:	2001      	movs	r0, #1
10009c72:	4b37      	ldr	r3, [pc, #220]	; (10009d50 <dmp_enable_feature+0x1e4>)
10009c74:	4798      	blx	r3
        dmp_set_tap_time(100);
10009c76:	2064      	movs	r0, #100	; 0x64
10009c78:	4b36      	ldr	r3, [pc, #216]	; (10009d54 <dmp_enable_feature+0x1e8>)
10009c7a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009c7c:	20fa      	movs	r0, #250	; 0xfa
10009c7e:	0040      	lsls	r0, r0, #1
10009c80:	4b35      	ldr	r3, [pc, #212]	; (10009d58 <dmp_enable_feature+0x1ec>)
10009c82:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009c84:	21c8      	movs	r1, #200	; 0xc8
10009c86:	4835      	ldr	r0, [pc, #212]	; (10009d5c <dmp_enable_feature+0x1f0>)
10009c88:	4b35      	ldr	r3, [pc, #212]	; (10009d60 <dmp_enable_feature+0x1f4>)
10009c8a:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009c8c:	2028      	movs	r0, #40	; 0x28
10009c8e:	4b35      	ldr	r3, [pc, #212]	; (10009d64 <dmp_enable_feature+0x1f8>)
10009c90:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009c92:	200a      	movs	r0, #10
10009c94:	4b34      	ldr	r3, [pc, #208]	; (10009d68 <dmp_enable_feature+0x1fc>)
10009c96:	4798      	blx	r3
10009c98:	e007      	b.n	10009caa <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009c9a:	aa01      	add	r2, sp, #4
10009c9c:	23d8      	movs	r3, #216	; 0xd8
10009c9e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009ca0:	2101      	movs	r1, #1
10009ca2:	208b      	movs	r0, #139	; 0x8b
10009ca4:	0100      	lsls	r0, r0, #4
10009ca6:	4b23      	ldr	r3, [pc, #140]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009ca8:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009caa:	07a3      	lsls	r3, r4, #30
10009cac:	d503      	bpl.n	10009cb6 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009cae:	22d9      	movs	r2, #217	; 0xd9
10009cb0:	ab01      	add	r3, sp, #4
10009cb2:	701a      	strb	r2, [r3, #0]
10009cb4:	e002      	b.n	10009cbc <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009cb6:	22d8      	movs	r2, #216	; 0xd8
10009cb8:	ab01      	add	r3, sp, #4
10009cba:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009cbc:	aa01      	add	r2, sp, #4
10009cbe:	2101      	movs	r1, #1
10009cc0:	482a      	ldr	r0, [pc, #168]	; (10009d6c <dmp_enable_feature+0x200>)
10009cc2:	4b1c      	ldr	r3, [pc, #112]	; (10009d34 <dmp_enable_feature+0x1c8>)
10009cc4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009cc6:	0763      	lsls	r3, r4, #29
10009cc8:	d503      	bpl.n	10009cd2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009cca:	2001      	movs	r0, #1
10009ccc:	4b28      	ldr	r3, [pc, #160]	; (10009d70 <dmp_enable_feature+0x204>)
10009cce:	4798      	blx	r3
10009cd0:	e002      	b.n	10009cd8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009cd2:	2000      	movs	r0, #0
10009cd4:	4b26      	ldr	r3, [pc, #152]	; (10009d70 <dmp_enable_feature+0x204>)
10009cd6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009cd8:	06e3      	lsls	r3, r4, #27
10009cda:	d503      	bpl.n	10009ce4 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009cdc:	2001      	movs	r0, #1
10009cde:	4b25      	ldr	r3, [pc, #148]	; (10009d74 <dmp_enable_feature+0x208>)
10009ce0:	4798      	blx	r3
10009ce2:	e002      	b.n	10009cea <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009ce4:	2000      	movs	r0, #0
10009ce6:	4b23      	ldr	r3, [pc, #140]	; (10009d74 <dmp_enable_feature+0x208>)
10009ce8:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009cea:	2308      	movs	r3, #8
10009cec:	4323      	orrs	r3, r4
10009cee:	4a22      	ldr	r2, [pc, #136]	; (10009d78 <dmp_enable_feature+0x20c>)
10009cf0:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009cf2:	4b22      	ldr	r3, [pc, #136]	; (10009d7c <dmp_enable_feature+0x210>)
10009cf4:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009cf6:	2f00      	cmp	r7, #0
10009cf8:	d103      	bne.n	10009d02 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009cfa:	2200      	movs	r2, #0
10009cfc:	4b1e      	ldr	r3, [pc, #120]	; (10009d78 <dmp_enable_feature+0x20c>)
10009cfe:	739a      	strb	r2, [r3, #14]
10009d00:	e002      	b.n	10009d08 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009d02:	2206      	movs	r2, #6
10009d04:	4b1c      	ldr	r3, [pc, #112]	; (10009d78 <dmp_enable_feature+0x20c>)
10009d06:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009d08:	2d00      	cmp	r5, #0
10009d0a:	d003      	beq.n	10009d14 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009d0c:	4a1a      	ldr	r2, [pc, #104]	; (10009d78 <dmp_enable_feature+0x20c>)
10009d0e:	7b93      	ldrb	r3, [r2, #14]
10009d10:	3306      	adds	r3, #6
10009d12:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009d14:	2314      	movs	r3, #20
10009d16:	4223      	tst	r3, r4
10009d18:	d003      	beq.n	10009d22 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009d1a:	4a17      	ldr	r2, [pc, #92]	; (10009d78 <dmp_enable_feature+0x20c>)
10009d1c:	7b93      	ldrb	r3, [r2, #14]
10009d1e:	3310      	adds	r3, #16
10009d20:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009d22:	2e00      	cmp	r6, #0
10009d24:	d003      	beq.n	10009d2e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009d26:	4a14      	ldr	r2, [pc, #80]	; (10009d78 <dmp_enable_feature+0x20c>)
10009d28:	7b93      	ldrb	r3, [r2, #14]
10009d2a:	3304      	adds	r3, #4
10009d2c:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009d2e:	2000      	movs	r0, #0
10009d30:	b005      	add	sp, #20
10009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d34:	10009341 	.word	0x10009341
10009d38:	00000aa7 	.word	0x00000aa7
10009d3c:	00000ab6 	.word	0x00000ab6
10009d40:	10009a99 	.word	0x10009a99
10009d44:	00000aa2 	.word	0x00000aa2
10009d48:	10009789 	.word	0x10009789
10009d4c:	10009935 	.word	0x10009935
10009d50:	10009981 	.word	0x10009981
10009d54:	100099b1 	.word	0x100099b1
10009d58:	100099dd 	.word	0x100099dd
10009d5c:	02cae309 	.word	0x02cae309
10009d60:	10009a09 	.word	0x10009a09
10009d64:	10009a41 	.word	0x10009a41
10009d68:	10009a6d 	.word	0x10009a6d
10009d6c:	0000073d 	.word	0x0000073d
10009d70:	10009ae5 	.word	0x10009ae5
10009d74:	10009b29 	.word	0x10009b29
10009d78:	1001ba04 	.word	0x1001ba04
10009d7c:	10008495 	.word	0x10008495

10009d80 <inv_get_sensor_type_accel>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_accel(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
10009d80:	b510      	push	{r4, lr}
    inv_get_accel_set(data, accuracy, timestamp);
10009d82:	4b03      	ldr	r3, [pc, #12]	; (10009d90 <inv_get_sensor_type_accel+0x10>)
10009d84:	4798      	blx	r3
    if (eMPL_out.accel_status & INV_NEW_DATA)
10009d86:	4b03      	ldr	r3, [pc, #12]	; (10009d94 <inv_get_sensor_type_accel+0x14>)
10009d88:	6998      	ldr	r0, [r3, #24]
10009d8a:	0640      	lsls	r0, r0, #25
10009d8c:	0fc0      	lsrs	r0, r0, #31
        return 1;
    else
        return 0;
}
10009d8e:	bd10      	pop	{r4, pc}
10009d90:	1000a1b5 	.word	0x1000a1b5
10009d94:	1001ba14 	.word	0x1001ba14

10009d98 <inv_db_save_func>:
    return INV_SUCCESS;
}

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
10009d98:	b510      	push	{r4, lr}
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
10009d9a:	2248      	movs	r2, #72	; 0x48
10009d9c:	4902      	ldr	r1, [pc, #8]	; (10009da8 <inv_db_save_func+0x10>)
10009d9e:	31f4      	adds	r1, #244	; 0xf4
10009da0:	4b02      	ldr	r3, [pc, #8]	; (10009dac <inv_db_save_func+0x14>)
10009da2:	4798      	blx	r3
    return INV_SUCCESS;
}
10009da4:	2000      	movs	r0, #0
10009da6:	bd10      	pop	{r4, pc}
10009da8:	1001ba3c 	.word	0x1001ba3c
10009dac:	10018623 	.word	0x10018623

10009db0 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009db0:	b510      	push	{r4, lr}
10009db2:	0001      	movs	r1, r0
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
10009db4:	4c0d      	ldr	r4, [pc, #52]	; (10009dec <inv_db_load_func+0x3c>)
10009db6:	0020      	movs	r0, r4
10009db8:	30f4      	adds	r0, #244	; 0xf4
10009dba:	2248      	movs	r2, #72	; 0x48
10009dbc:	4b0c      	ldr	r3, [pc, #48]	; (10009df0 <inv_db_load_func+0x40>)
10009dbe:	4798      	blx	r3
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009dc0:	4b0c      	ldr	r3, [pc, #48]	; (10009df4 <inv_db_load_func+0x44>)
10009dc2:	2298      	movs	r2, #152	; 0x98
10009dc4:	0052      	lsls	r2, r2, #1
10009dc6:	58a2      	ldr	r2, [r4, r2]
10009dc8:	635a      	str	r2, [r3, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
10009dca:	229a      	movs	r2, #154	; 0x9a
10009dcc:	0052      	lsls	r2, r2, #1
10009dce:	58a2      	ldr	r2, [r4, r2]
10009dd0:	679a      	str	r2, [r3, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009dd2:	229c      	movs	r2, #156	; 0x9c
10009dd4:	0052      	lsls	r2, r2, #1
10009dd6:	58a2      	ldr	r2, [r4, r2]
10009dd8:	21bc      	movs	r1, #188	; 0xbc
10009dda:	505a      	str	r2, [r3, r1]
    // TODO
    if (sensors.compass.accuracy == 3) {
10009ddc:	2a03      	cmp	r2, #3
10009dde:	d102      	bne.n	10009de6 <inv_db_load_func+0x36>
        inv_set_compass_bias_found(1);
10009de0:	2001      	movs	r0, #1
10009de2:	4b05      	ldr	r3, [pc, #20]	; (10009df8 <inv_db_load_func+0x48>)
10009de4:	4798      	blx	r3
    }
    return INV_SUCCESS;
}
10009de6:	2000      	movs	r0, #0
10009de8:	bd10      	pop	{r4, pc}
10009dea:	46c0      	nop			; (mov r8, r8)
10009dec:	1001ba3c 	.word	0x1001ba3c
10009df0:	10018623 	.word	0x10018623
10009df4:	1001bb7c 	.word	0x1001bb7c
10009df8:	1000ae8d 	.word	0x1000ae8d

10009dfc <inv_set_gyro_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009dfc:	4b01      	ldr	r3, [pc, #4]	; (10009e04 <inv_set_gyro_orientation_and_scale+0x8>)
10009dfe:	6259      	str	r1, [r3, #36]	; 0x24
    sensor->orientation = orientation;
10009e00:	6018      	str	r0, [r3, #0]
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
                                     sensitivity);
}
10009e02:	4770      	bx	lr
10009e04:	1001bb7c 	.word	0x1001bb7c

10009e08 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
10009e08:	b570      	push	{r4, r5, r6, lr}
10009e0a:	0005      	movs	r5, r0
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
10009e0c:	4c07      	ldr	r4, [pc, #28]	; (10009e2c <inv_set_gyro_sample_rate+0x24>)
10009e0e:	62a0      	str	r0, [r4, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009e10:	21fa      	movs	r1, #250	; 0xfa
10009e12:	0089      	lsls	r1, r1, #2
10009e14:	4b06      	ldr	r3, [pc, #24]	; (10009e30 <inv_set_gyro_sample_rate+0x28>)
10009e16:	4798      	blx	r3
10009e18:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
10009e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10009e1c:	2b00      	cmp	r3, #0
10009e1e:	d104      	bne.n	10009e2a <inv_set_gyro_sample_rate+0x22>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
10009e20:	0029      	movs	r1, r5
10009e22:	4804      	ldr	r0, [pc, #16]	; (10009e34 <inv_set_gyro_sample_rate+0x2c>)
10009e24:	4b02      	ldr	r3, [pc, #8]	; (10009e30 <inv_set_gyro_sample_rate+0x28>)
10009e26:	4798      	blx	r3
10009e28:	6420      	str	r0, [r4, #64]	; 0x40
    }
}
10009e2a:	bd70      	pop	{r4, r5, r6, pc}
10009e2c:	1001bb7c 	.word	0x1001bb7c
10009e30:	1001541d 	.word	0x1001541d
10009e34:	000f4240 	.word	0x000f4240

10009e38 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
10009e38:	b570      	push	{r4, r5, r6, lr}
10009e3a:	0005      	movs	r5, r0
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
10009e3c:	4c08      	ldr	r4, [pc, #32]	; (10009e60 <inv_set_accel_sample_rate+0x28>)
10009e3e:	66e0      	str	r0, [r4, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009e40:	21fa      	movs	r1, #250	; 0xfa
10009e42:	0089      	lsls	r1, r1, #2
10009e44:	4b07      	ldr	r3, [pc, #28]	; (10009e64 <inv_set_accel_sample_rate+0x2c>)
10009e46:	4798      	blx	r3
10009e48:	6720      	str	r0, [r4, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
10009e4a:	2384      	movs	r3, #132	; 0x84
10009e4c:	58e3      	ldr	r3, [r4, r3]
10009e4e:	2b00      	cmp	r3, #0
10009e50:	d105      	bne.n	10009e5e <inv_set_accel_sample_rate+0x26>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
10009e52:	0029      	movs	r1, r5
10009e54:	4804      	ldr	r0, [pc, #16]	; (10009e68 <inv_set_accel_sample_rate+0x30>)
10009e56:	4b03      	ldr	r3, [pc, #12]	; (10009e64 <inv_set_accel_sample_rate+0x2c>)
10009e58:	4798      	blx	r3
10009e5a:	2384      	movs	r3, #132	; 0x84
10009e5c:	50e0      	str	r0, [r4, r3]
    }
}
10009e5e:	bd70      	pop	{r4, r5, r6, pc}
10009e60:	1001bb7c 	.word	0x1001bb7c
10009e64:	1001541d 	.word	0x1001541d
10009e68:	000f4240 	.word	0x000f4240

10009e6c <inv_set_compass_sample_rate>:

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
10009e6c:	b570      	push	{r4, r5, r6, lr}
10009e6e:	0005      	movs	r5, r0
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
10009e70:	4c09      	ldr	r4, [pc, #36]	; (10009e98 <inv_set_compass_sample_rate+0x2c>)
10009e72:	23b0      	movs	r3, #176	; 0xb0
10009e74:	50e0      	str	r0, [r4, r3]
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009e76:	21fa      	movs	r1, #250	; 0xfa
10009e78:	0089      	lsls	r1, r1, #2
10009e7a:	4b08      	ldr	r3, [pc, #32]	; (10009e9c <inv_set_compass_sample_rate+0x30>)
10009e7c:	4798      	blx	r3
10009e7e:	23b4      	movs	r3, #180	; 0xb4
10009e80:	50e0      	str	r0, [r4, r3]
    if (sensors.compass.bandwidth == 0) {
10009e82:	3314      	adds	r3, #20
10009e84:	58e3      	ldr	r3, [r4, r3]
10009e86:	2b00      	cmp	r3, #0
10009e88:	d105      	bne.n	10009e96 <inv_set_compass_sample_rate+0x2a>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
10009e8a:	0029      	movs	r1, r5
10009e8c:	4804      	ldr	r0, [pc, #16]	; (10009ea0 <inv_set_compass_sample_rate+0x34>)
10009e8e:	4b03      	ldr	r3, [pc, #12]	; (10009e9c <inv_set_compass_sample_rate+0x30>)
10009e90:	4798      	blx	r3
10009e92:	23c8      	movs	r3, #200	; 0xc8
10009e94:	50e0      	str	r0, [r4, r3]
    }
}
10009e96:	bd70      	pop	{r4, r5, r6, pc}
10009e98:	1001bb7c 	.word	0x1001bb7c
10009e9c:	1001541d 	.word	0x1001541d
10009ea0:	000f4240 	.word	0x000f4240

10009ea4 <inv_set_quat_sample_rate>:

/** Set Quat Sample rate in micro seconds.
* @param[in] sample_rate_us Set Quat Sample rate in us
*/
void inv_set_quat_sample_rate(long sample_rate_us)
{
10009ea4:	b510      	push	{r4, lr}
        int type = PLAYBACK_DBG_TYPE_Q_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.quat.sample_rate_us = sample_rate_us;
10009ea6:	4c06      	ldr	r4, [pc, #24]	; (10009ec0 <inv_set_quat_sample_rate+0x1c>)
10009ea8:	2394      	movs	r3, #148	; 0x94
10009eaa:	005b      	lsls	r3, r3, #1
10009eac:	50e0      	str	r0, [r4, r3]
    sensors.quat.sample_rate_ms = sample_rate_us / 1000;
10009eae:	21fa      	movs	r1, #250	; 0xfa
10009eb0:	0089      	lsls	r1, r1, #2
10009eb2:	4b04      	ldr	r3, [pc, #16]	; (10009ec4 <inv_set_quat_sample_rate+0x20>)
10009eb4:	4798      	blx	r3
10009eb6:	2396      	movs	r3, #150	; 0x96
10009eb8:	005b      	lsls	r3, r3, #1
10009eba:	50e0      	str	r0, [r4, r3]
}
10009ebc:	bd10      	pop	{r4, pc}
10009ebe:	46c0      	nop			; (mov r8, r8)
10009ec0:	1001bb7c 	.word	0x1001bb7c
10009ec4:	1001541d 	.word	0x1001541d

10009ec8 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
10009ec8:	4b02      	ldr	r3, [pc, #8]	; (10009ed4 <inv_get_gyro_on+0xc>)
10009eca:	6b18      	ldr	r0, [r3, #48]	; 0x30
10009ecc:	05c0      	lsls	r0, r0, #23
10009ece:	0fc0      	lsrs	r0, r0, #31
}
10009ed0:	4770      	bx	lr
10009ed2:	46c0      	nop			; (mov r8, r8)
10009ed4:	1001bb7c 	.word	0x1001bb7c

10009ed8 <inv_set_accel_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009ed8:	4b01      	ldr	r3, [pc, #4]	; (10009ee0 <inv_set_accel_orientation_and_scale+0x8>)
10009eda:	6699      	str	r1, [r3, #104]	; 0x68
    sensor->orientation = orientation;
10009edc:	6458      	str	r0, [r3, #68]	; 0x44
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
                                     sensitivity);
}
10009ede:	4770      	bx	lr
10009ee0:	1001bb7c 	.word	0x1001bb7c

10009ee4 <inv_set_compass_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009ee4:	4b02      	ldr	r3, [pc, #8]	; (10009ef0 <inv_set_compass_orientation_and_scale+0xc>)
10009ee6:	22ac      	movs	r2, #172	; 0xac
10009ee8:	5099      	str	r1, [r3, r2]
    sensor->orientation = orientation;
10009eea:	3a24      	subs	r2, #36	; 0x24
10009eec:	5098      	str	r0, [r3, r2]
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
}
10009eee:	4770      	bx	lr
10009ef0:	1001bb7c 	.word	0x1001bb7c

10009ef4 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009ef4:	b570      	push	{r4, r5, r6, lr}
10009ef6:	b086      	sub	sp, #24
10009ef8:	0004      	movs	r4, r0
10009efa:	000d      	movs	r5, r1
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009efc:	2204      	movs	r2, #4
10009efe:	5e83      	ldrsh	r3, [r0, r2]
10009f00:	03db      	lsls	r3, r3, #15
10009f02:	9303      	str	r3, [sp, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
10009f04:	2206      	movs	r2, #6
10009f06:	5e83      	ldrsh	r3, [r0, r2]
10009f08:	03db      	lsls	r3, r3, #15
10009f0a:	9304      	str	r3, [sp, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
10009f0c:	2208      	movs	r2, #8
10009f0e:	5e83      	ldrsh	r3, [r0, r2]
10009f10:	03db      	lsls	r3, r3, #15
10009f12:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
10009f14:	0003      	movs	r3, r0
10009f16:	330c      	adds	r3, #12
10009f18:	6a42      	ldr	r2, [r0, #36]	; 0x24
10009f1a:	0051      	lsls	r1, r2, #1
10009f1c:	8800      	ldrh	r0, [r0, #0]
10009f1e:	aa03      	add	r2, sp, #12
10009f20:	4e0f      	ldr	r6, [pc, #60]	; (10009f60 <inv_apply_calibration+0x6c>)
10009f22:	47b0      	blx	r6

    raw32[0] -= bias[0] >> 1;
10009f24:	682b      	ldr	r3, [r5, #0]
10009f26:	105b      	asrs	r3, r3, #1
10009f28:	9a03      	ldr	r2, [sp, #12]
10009f2a:	1ad3      	subs	r3, r2, r3
10009f2c:	9303      	str	r3, [sp, #12]
    raw32[1] -= bias[1] >> 1;
10009f2e:	686b      	ldr	r3, [r5, #4]
10009f30:	105b      	asrs	r3, r3, #1
10009f32:	9a04      	ldr	r2, [sp, #16]
10009f34:	1ad3      	subs	r3, r2, r3
10009f36:	9304      	str	r3, [sp, #16]
    raw32[2] -= bias[2] >> 1;
10009f38:	68ab      	ldr	r3, [r5, #8]
10009f3a:	105b      	asrs	r3, r3, #1
10009f3c:	9a05      	ldr	r2, [sp, #20]
10009f3e:	9201      	str	r2, [sp, #4]
10009f40:	1ad3      	subs	r3, r2, r3
10009f42:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
10009f44:	0023      	movs	r3, r4
10009f46:	3318      	adds	r3, #24
10009f48:	6a62      	ldr	r2, [r4, #36]	; 0x24
10009f4a:	0051      	lsls	r1, r2, #1
10009f4c:	8820      	ldrh	r0, [r4, #0]
10009f4e:	aa03      	add	r2, sp, #12
10009f50:	47b0      	blx	r6

    sensor->status |= INV_CALIBRATED;
10009f52:	2320      	movs	r3, #32
10009f54:	6b22      	ldr	r2, [r4, #48]	; 0x30
10009f56:	4313      	orrs	r3, r2
10009f58:	6323      	str	r3, [r4, #48]	; 0x30
}
10009f5a:	b006      	add	sp, #24
10009f5c:	bd70      	pop	{r4, r5, r6, pc}
10009f5e:	46c0      	nop			; (mov r8, r8)
10009f60:	1000abb1 	.word	0x1000abb1

10009f64 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
10009f64:	239e      	movs	r3, #158	; 0x9e
10009f66:	005b      	lsls	r3, r3, #1
10009f68:	4a01      	ldr	r2, [pc, #4]	; (10009f70 <inv_set_compass_disturbance+0xc>)
10009f6a:	50d0      	str	r0, [r2, r3]
}
10009f6c:	4770      	bx	lr
10009f6e:	46c0      	nop			; (mov r8, r8)
10009f70:	1001ba3c 	.word	0x1001ba3c

10009f74 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
10009f74:	b570      	push	{r4, r5, r6, lr}
10009f76:	0004      	movs	r4, r0
10009f78:	000d      	movs	r5, r1
    if (bias != NULL) {
10009f7a:	2800      	cmp	r0, #0
10009f7c:	d014      	beq.n	10009fa8 <inv_set_gyro_bias+0x34>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009f7e:	220c      	movs	r2, #12
10009f80:	0001      	movs	r1, r0
10009f82:	4818      	ldr	r0, [pc, #96]	; (10009fe4 <inv_set_gyro_bias+0x70>)
10009f84:	3001      	adds	r0, #1
10009f86:	30ff      	adds	r0, #255	; 0xff
10009f88:	4b17      	ldr	r3, [pc, #92]	; (10009fe8 <inv_set_gyro_bias+0x74>)
10009f8a:	4798      	blx	r3
10009f8c:	2800      	cmp	r0, #0
10009f8e:	d00b      	beq.n	10009fa8 <inv_set_gyro_bias+0x34>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
10009f90:	4e14      	ldr	r6, [pc, #80]	; (10009fe4 <inv_set_gyro_bias+0x70>)
10009f92:	3601      	adds	r6, #1
10009f94:	36ff      	adds	r6, #255	; 0xff
10009f96:	220c      	movs	r2, #12
10009f98:	0021      	movs	r1, r4
10009f9a:	0030      	movs	r0, r6
10009f9c:	4b13      	ldr	r3, [pc, #76]	; (10009fec <inv_set_gyro_bias+0x78>)
10009f9e:	4798      	blx	r3
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
10009fa0:	0031      	movs	r1, r6
10009fa2:	4813      	ldr	r0, [pc, #76]	; (10009ff0 <inv_set_gyro_bias+0x7c>)
10009fa4:	4b13      	ldr	r3, [pc, #76]	; (10009ff4 <inv_set_gyro_bias+0x80>)
10009fa6:	4798      	blx	r3
        }
    }
    sensors.gyro.accuracy = accuracy;
10009fa8:	4b11      	ldr	r3, [pc, #68]	; (10009ff0 <inv_set_gyro_bias+0x7c>)
10009faa:	635d      	str	r5, [r3, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
10009fac:	2298      	movs	r2, #152	; 0x98
10009fae:	0052      	lsls	r2, r2, #1
10009fb0:	490c      	ldr	r1, [pc, #48]	; (10009fe4 <inv_set_gyro_bias+0x70>)
10009fb2:	508d      	str	r5, [r1, r2]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009fb4:	3a4c      	subs	r2, #76	; 0x4c
10009fb6:	589b      	ldr	r3, [r3, r2]
10009fb8:	2b00      	cmp	r3, #0
10009fba:	d002      	beq.n	10009fc2 <inv_set_gyro_bias+0x4e>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
10009fbc:	3228      	adds	r2, #40	; 0x28
10009fbe:	508b      	str	r3, [r1, r2]
10009fc0:	e005      	b.n	10009fce <inv_set_gyro_bias+0x5a>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
10009fc2:	21d8      	movs	r1, #216	; 0xd8
10009fc4:	0349      	lsls	r1, r1, #13
10009fc6:	2386      	movs	r3, #134	; 0x86
10009fc8:	005b      	lsls	r3, r3, #1
10009fca:	4a06      	ldr	r2, [pc, #24]	; (10009fe4 <inv_set_gyro_bias+0x70>)
10009fcc:	50d1      	str	r1, [r2, r3]
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
10009fce:	2200      	movs	r2, #0
10009fd0:	2104      	movs	r1, #4
10009fd2:	2004      	movs	r0, #4
10009fd4:	4b08      	ldr	r3, [pc, #32]	; (10009ff8 <inv_set_gyro_bias+0x84>)
10009fd6:	4798      	blx	r3

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
10009fd8:	2101      	movs	r1, #1
10009fda:	2388      	movs	r3, #136	; 0x88
10009fdc:	005b      	lsls	r3, r3, #1
10009fde:	4a01      	ldr	r2, [pc, #4]	; (10009fe4 <inv_set_gyro_bias+0x70>)
10009fe0:	50d1      	str	r1, [r2, r3]
}
10009fe2:	bd70      	pop	{r4, r5, r6, pc}
10009fe4:	1001ba3c 	.word	0x1001ba3c
10009fe8:	10018605 	.word	0x10018605
10009fec:	10018623 	.word	0x10018623
10009ff0:	1001bb7c 	.word	0x1001bb7c
10009ff4:	10009ef5 	.word	0x10009ef5
10009ff8:	1000a2ad 	.word	0x1000a2ad

10009ffc <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
10009ffc:	b510      	push	{r4, lr}
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009ffe:	4a05      	ldr	r2, [pc, #20]	; (1000a014 <inv_get_gyro_bias_tc_set+0x18>)
1000a000:	2388      	movs	r3, #136	; 0x88
1000a002:	005b      	lsls	r3, r3, #1
1000a004:	58d1      	ldr	r1, [r2, r3]
1000a006:	1e48      	subs	r0, r1, #1
1000a008:	4244      	negs	r4, r0
1000a00a:	4144      	adcs	r4, r0
    inv_data_builder.save.gyro_bias_tc_set = false;
1000a00c:	2100      	movs	r1, #0
1000a00e:	50d1      	str	r1, [r2, r3]
    return flag;
}
1000a010:	0020      	movs	r0, r4
1000a012:	bd10      	pop	{r4, pc}
1000a014:	1001ba3c 	.word	0x1001ba3c

1000a018 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
1000a018:	b510      	push	{r4, lr}
1000a01a:	000c      	movs	r4, r1
    if (bias != NULL)
1000a01c:	2800      	cmp	r0, #0
1000a01e:	d005      	beq.n	1000a02c <inv_get_gyro_bias+0x14>
        memcpy(bias, inv_data_builder.save.gyro_bias,
1000a020:	220c      	movs	r2, #12
1000a022:	4906      	ldr	r1, [pc, #24]	; (1000a03c <inv_get_gyro_bias+0x24>)
1000a024:	3101      	adds	r1, #1
1000a026:	31ff      	adds	r1, #255	; 0xff
1000a028:	4b05      	ldr	r3, [pc, #20]	; (1000a040 <inv_get_gyro_bias+0x28>)
1000a02a:	4798      	blx	r3
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
1000a02c:	2c00      	cmp	r4, #0
1000a02e:	d004      	beq.n	1000a03a <inv_get_gyro_bias+0x22>
        temp[0] = inv_data_builder.save.gyro_temp;
1000a030:	2386      	movs	r3, #134	; 0x86
1000a032:	005b      	lsls	r3, r3, #1
1000a034:	4a01      	ldr	r2, [pc, #4]	; (1000a03c <inv_get_gyro_bias+0x24>)
1000a036:	58d3      	ldr	r3, [r2, r3]
1000a038:	6023      	str	r3, [r4, #0]
}
1000a03a:	bd10      	pop	{r4, pc}
1000a03c:	1001ba3c 	.word	0x1001ba3c
1000a040:	10018623 	.word	0x10018623

1000a044 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1000a044:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a046:	4657      	mov	r7, sl
1000a048:	464e      	mov	r6, r9
1000a04a:	4645      	mov	r5, r8
1000a04c:	b4e0      	push	{r5, r6, r7}
1000a04e:	b082      	sub	sp, #8
1000a050:	9201      	str	r2, [sp, #4]
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000a052:	4b3d      	ldr	r3, [pc, #244]	; (1000a148 <inv_register_data_cb+0x104>)
1000a054:	681e      	ldr	r6, [r3, #0]
1000a056:	2e00      	cmp	r6, #0
1000a058:	dd17      	ble.n	1000a08a <inv_register_data_cb+0x46>
        if ((inv_data_builder.process[kk].func == func) ||
1000a05a:	685b      	ldr	r3, [r3, #4]
1000a05c:	4298      	cmp	r0, r3
1000a05e:	d05b      	beq.n	1000a118 <inv_register_data_cb+0xd4>
                (inv_data_builder.process[kk].priority == priority)) {
1000a060:	4b39      	ldr	r3, [pc, #228]	; (1000a148 <inv_register_data_cb+0x104>)
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
1000a062:	689b      	ldr	r3, [r3, #8]
1000a064:	4299      	cmp	r1, r3
1000a066:	d059      	beq.n	1000a11c <inv_register_data_cb+0xd8>
1000a068:	4b37      	ldr	r3, [pc, #220]	; (1000a148 <inv_register_data_cb+0x104>)
1000a06a:	3310      	adds	r3, #16
1000a06c:	2400      	movs	r4, #0
1000a06e:	e008      	b.n	1000a082 <inv_register_data_cb+0x3e>
1000a070:	681d      	ldr	r5, [r3, #0]
1000a072:	4285      	cmp	r5, r0
1000a074:	d054      	beq.n	1000a120 <inv_register_data_cb+0xdc>
1000a076:	330c      	adds	r3, #12
                (inv_data_builder.process[kk].priority == priority)) {
1000a078:	001d      	movs	r5, r3
1000a07a:	3d08      	subs	r5, #8
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
1000a07c:	682d      	ldr	r5, [r5, #0]
1000a07e:	428d      	cmp	r5, r1
1000a080:	d050      	beq.n	1000a124 <inv_register_data_cb+0xe0>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000a082:	3401      	adds	r4, #1
1000a084:	42b4      	cmp	r4, r6
1000a086:	d1f3      	bne.n	1000a070 <inv_register_data_cb+0x2c>
1000a088:	e04e      	b.n	1000a128 <inv_register_data_cb+0xe4>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
1000a08a:	230c      	movs	r3, #12
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
1000a08c:	2e13      	cmp	r6, #19
1000a08e:	dc54      	bgt.n	1000a13a <inv_register_data_cb+0xf6>
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
1000a090:	2e00      	cmp	r6, #0
1000a092:	d14d      	bne.n	1000a130 <inv_register_data_cb+0xec>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
1000a094:	46b0      	mov	r8, r6
1000a096:	e030      	b.n	1000a0fa <inv_register_data_cb+0xb6>
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
                    (inv_data_builder.process[kk].priority < priority)) {
1000a098:	4b2b      	ldr	r3, [pc, #172]	; (1000a148 <inv_register_data_cb+0x104>)
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000a09a:	689b      	ldr	r3, [r3, #8]
1000a09c:	4299      	cmp	r1, r3
1000a09e:	dd0f      	ble.n	1000a0c0 <inv_register_data_cb+0x7c>
1000a0a0:	4b29      	ldr	r3, [pc, #164]	; (1000a148 <inv_register_data_cb+0x104>)
1000a0a2:	3314      	adds	r3, #20
1000a0a4:	2200      	movs	r2, #0
1000a0a6:	4690      	mov	r8, r2
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
1000a0a8:	2201      	movs	r2, #1
1000a0aa:	4694      	mov	ip, r2
1000a0ac:	44e0      	add	r8, ip
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000a0ae:	45b0      	cmp	r8, r6
1000a0b0:	d022      	beq.n	1000a0f8 <inv_register_data_cb+0xb4>
1000a0b2:	330c      	adds	r3, #12
                    (inv_data_builder.process[kk].priority < priority)) {
1000a0b4:	001c      	movs	r4, r3
1000a0b6:	3c0c      	subs	r4, #12
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000a0b8:	6824      	ldr	r4, [r4, #0]
1000a0ba:	42a1      	cmp	r1, r4
1000a0bc:	dcf4      	bgt.n	1000a0a8 <inv_register_data_cb+0x64>
1000a0be:	e039      	b.n	1000a134 <inv_register_data_cb+0xf0>
1000a0c0:	2300      	movs	r3, #0
1000a0c2:	4698      	mov	r8, r3
1000a0c4:	4f20      	ldr	r7, [pc, #128]	; (1000a148 <inv_register_data_cb+0x104>)
1000a0c6:	0073      	lsls	r3, r6, #1
1000a0c8:	199b      	adds	r3, r3, r6
1000a0ca:	009b      	lsls	r3, r3, #2
1000a0cc:	3b08      	subs	r3, #8
1000a0ce:	469c      	mov	ip, r3
1000a0d0:	44bc      	add	ip, r7
1000a0d2:	4643      	mov	r3, r8
1000a0d4:	005c      	lsls	r4, r3, #1
1000a0d6:	4444      	add	r4, r8
1000a0d8:	00a4      	lsls	r4, r4, #2
1000a0da:	3c08      	subs	r4, #8
1000a0dc:	46b9      	mov	r9, r7
1000a0de:	44a1      	add	r9, r4
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
                    inv_data_builder.process[nn] =
1000a0e0:	4664      	mov	r4, ip
1000a0e2:	340c      	adds	r4, #12
1000a0e4:	4667      	mov	r7, ip
1000a0e6:	cf2c      	ldmia	r7!, {r2, r3, r5}
1000a0e8:	c42c      	stmia	r4!, {r2, r3, r5}
1000a0ea:	230c      	movs	r3, #12
1000a0ec:	425b      	negs	r3, r3
1000a0ee:	469a      	mov	sl, r3
1000a0f0:	44d4      	add	ip, sl
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1000a0f2:	45cc      	cmp	ip, r9
1000a0f4:	d1f4      	bne.n	1000a0e0 <inv_register_data_cb+0x9c>
1000a0f6:	e000      	b.n	1000a0fa <inv_register_data_cb+0xb6>
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
1000a0f8:	46b0      	mov	r8, r6
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1000a0fa:	4f13      	ldr	r7, [pc, #76]	; (1000a148 <inv_register_data_cb+0x104>)
1000a0fc:	4643      	mov	r3, r8
1000a0fe:	005b      	lsls	r3, r3, #1
1000a100:	4642      	mov	r2, r8
1000a102:	189c      	adds	r4, r3, r2
1000a104:	00a4      	lsls	r4, r4, #2
1000a106:	193c      	adds	r4, r7, r4
1000a108:	6060      	str	r0, [r4, #4]
        inv_data_builder.process[kk].priority = priority;
1000a10a:	60a1      	str	r1, [r4, #8]
        inv_data_builder.process[kk].data_required = sensor_type;
1000a10c:	9a01      	ldr	r2, [sp, #4]
1000a10e:	60e2      	str	r2, [r4, #12]
        inv_data_builder.num_cb++;
1000a110:	3601      	adds	r6, #1
1000a112:	603e      	str	r6, [r7, #0]
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
    inv_error_t result = INV_SUCCESS;
1000a114:	2300      	movs	r3, #0
1000a116:	e010      	b.n	1000a13a <inv_register_data_cb+0xf6>
    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
1000a118:	2316      	movs	r3, #22
1000a11a:	e00e      	b.n	1000a13a <inv_register_data_cb+0xf6>
1000a11c:	2316      	movs	r3, #22
1000a11e:	e00c      	b.n	1000a13a <inv_register_data_cb+0xf6>
1000a120:	2316      	movs	r3, #22
1000a122:	e00a      	b.n	1000a13a <inv_register_data_cb+0xf6>
1000a124:	2316      	movs	r3, #22
1000a126:	e008      	b.n	1000a13a <inv_register_data_cb+0xf6>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
1000a128:	2e13      	cmp	r6, #19
1000a12a:	ddb5      	ble.n	1000a098 <inv_register_data_cb+0x54>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
1000a12c:	230c      	movs	r3, #12
1000a12e:	e004      	b.n	1000a13a <inv_register_data_cb+0xf6>
1000a130:	2300      	movs	r3, #0
1000a132:	4698      	mov	r8, r3
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1000a134:	45b0      	cmp	r8, r6
1000a136:	dbc5      	blt.n	1000a0c4 <inv_register_data_cb+0x80>
1000a138:	e7df      	b.n	1000a0fa <inv_register_data_cb+0xb6>
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
1000a13a:	0018      	movs	r0, r3
1000a13c:	b002      	add	sp, #8
1000a13e:	bc1c      	pop	{r2, r3, r4}
1000a140:	4690      	mov	r8, r2
1000a142:	4699      	mov	r9, r3
1000a144:	46a2      	mov	sl, r4
1000a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a148:	1001ba3c 	.word	0x1001ba3c

1000a14c <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
1000a14c:	b570      	push	{r4, r5, r6, lr}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000a14e:	4b18      	ldr	r3, [pc, #96]	; (1000a1b0 <inv_unregister_data_cb+0x64>)
1000a150:	681c      	ldr	r4, [r3, #0]
1000a152:	2c00      	cmp	r4, #0
1000a154:	dd29      	ble.n	1000a1aa <inv_unregister_data_cb+0x5e>
        if (inv_data_builder.process[kk].func == func) {
1000a156:	685b      	ldr	r3, [r3, #4]
1000a158:	4298      	cmp	r0, r3
1000a15a:	d120      	bne.n	1000a19e <inv_unregister_data_cb+0x52>
1000a15c:	e006      	b.n	1000a16c <inv_unregister_data_cb+0x20>
1000a15e:	320c      	adds	r2, #12
1000a160:	0011      	movs	r1, r2
1000a162:	390c      	subs	r1, #12
1000a164:	6809      	ldr	r1, [r1, #0]
1000a166:	4281      	cmp	r1, r0
1000a168:	d11c      	bne.n	1000a1a4 <inv_unregister_data_cb+0x58>
1000a16a:	e000      	b.n	1000a16e <inv_unregister_data_cb+0x22>
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000a16c:	2300      	movs	r3, #0
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
1000a16e:	1c5a      	adds	r2, r3, #1
1000a170:	42a2      	cmp	r2, r4
1000a172:	da10      	bge.n	1000a196 <inv_unregister_data_cb+0x4a>
1000a174:	490e      	ldr	r1, [pc, #56]	; (1000a1b0 <inv_unregister_data_cb+0x64>)
1000a176:	005a      	lsls	r2, r3, #1
1000a178:	18d3      	adds	r3, r2, r3
1000a17a:	009b      	lsls	r3, r3, #2
1000a17c:	3304      	adds	r3, #4
1000a17e:	18cb      	adds	r3, r1, r3
1000a180:	0062      	lsls	r2, r4, #1
1000a182:	1912      	adds	r2, r2, r4
1000a184:	0092      	lsls	r2, r2, #2
1000a186:	3a08      	subs	r2, #8
1000a188:	1889      	adds	r1, r1, r2
                inv_data_builder.process[nn - 1] =
1000a18a:	001a      	movs	r2, r3
1000a18c:	320c      	adds	r2, #12
1000a18e:	ca61      	ldmia	r2!, {r0, r5, r6}
1000a190:	c361      	stmia	r3!, {r0, r5, r6}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
1000a192:	428b      	cmp	r3, r1
1000a194:	d1f9      	bne.n	1000a18a <inv_unregister_data_cb+0x3e>
                inv_data_builder.process[nn - 1] =
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
1000a196:	3c01      	subs	r4, #1
1000a198:	4b05      	ldr	r3, [pc, #20]	; (1000a1b0 <inv_unregister_data_cb+0x64>)
1000a19a:	601c      	str	r4, [r3, #0]
            return INV_SUCCESS;
1000a19c:	e005      	b.n	1000a1aa <inv_unregister_data_cb+0x5e>
1000a19e:	4a04      	ldr	r2, [pc, #16]	; (1000a1b0 <inv_unregister_data_cb+0x64>)
1000a1a0:	3210      	adds	r2, #16
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
1000a1a2:	2300      	movs	r3, #0
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000a1a4:	3301      	adds	r3, #1
1000a1a6:	42a3      	cmp	r3, r4
1000a1a8:	d1d9      	bne.n	1000a15e <inv_unregister_data_cb+0x12>
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
1000a1aa:	2000      	movs	r0, #0
1000a1ac:	bd70      	pop	{r4, r5, r6, pc}
1000a1ae:	46c0      	nop			; (mov r8, r8)
1000a1b0:	1001ba3c 	.word	0x1001ba3c

1000a1b4 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
1000a1b4:	b570      	push	{r4, r5, r6, lr}
1000a1b6:	000c      	movs	r4, r1
1000a1b8:	0015      	movs	r5, r2
    if (data != NULL) {
1000a1ba:	2800      	cmp	r0, #0
1000a1bc:	d004      	beq.n	1000a1c8 <inv_get_accel_set+0x14>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
1000a1be:	220c      	movs	r2, #12
1000a1c0:	4907      	ldr	r1, [pc, #28]	; (1000a1e0 <inv_get_accel_set+0x2c>)
1000a1c2:	315c      	adds	r1, #92	; 0x5c
1000a1c4:	4b07      	ldr	r3, [pc, #28]	; (1000a1e4 <inv_get_accel_set+0x30>)
1000a1c6:	4798      	blx	r3
    }
    if (timestamp != NULL) {
1000a1c8:	2d00      	cmp	r5, #0
1000a1ca:	d002      	beq.n	1000a1d2 <inv_get_accel_set+0x1e>
        *timestamp = sensors.accel.timestamp;
1000a1cc:	4b04      	ldr	r3, [pc, #16]	; (1000a1e0 <inv_get_accel_set+0x2c>)
1000a1ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
1000a1d0:	602b      	str	r3, [r5, #0]
    }
    if (accuracy != NULL) {
1000a1d2:	2c00      	cmp	r4, #0
1000a1d4:	d002      	beq.n	1000a1dc <inv_get_accel_set+0x28>
        *accuracy = sensors.accel.accuracy;
1000a1d6:	4b02      	ldr	r3, [pc, #8]	; (1000a1e0 <inv_get_accel_set+0x2c>)
1000a1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000a1da:	7023      	strb	r3, [r4, #0]
    }
}
1000a1dc:	bd70      	pop	{r4, r5, r6, pc}
1000a1de:	46c0      	nop			; (mov r8, r8)
1000a1e0:	1001bb7c 	.word	0x1001bb7c
1000a1e4:	10018623 	.word	0x10018623

1000a1e8 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
1000a1e8:	b510      	push	{r4, lr}
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1000a1ea:	220c      	movs	r2, #12
1000a1ec:	4902      	ldr	r1, [pc, #8]	; (1000a1f8 <inv_get_gyro+0x10>)
1000a1ee:	3118      	adds	r1, #24
1000a1f0:	4b02      	ldr	r3, [pc, #8]	; (1000a1fc <inv_get_gyro+0x14>)
1000a1f2:	4798      	blx	r3
}
1000a1f4:	bd10      	pop	{r4, pc}
1000a1f6:	46c0      	nop			; (mov r8, r8)
1000a1f8:	1001bb7c 	.word	0x1001bb7c
1000a1fc:	10018623 	.word	0x10018623

1000a200 <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
1000a200:	b510      	push	{r4, lr}
1000a202:	4a15      	ldr	r2, [pc, #84]	; (1000a258 <inv_reset_compass_soft_iron_matrix+0x58>)
1000a204:	0013      	movs	r3, r2
1000a206:	336d      	adds	r3, #109	; 0x6d
1000a208:	33ff      	adds	r3, #255	; 0xff
1000a20a:	3291      	adds	r2, #145	; 0x91
1000a20c:	32ff      	adds	r2, #255	; 0xff
    int i;
    for (i=0; i<9; i++) {
        sensors.soft_iron.matrix_f[i] = 0.0f;
1000a20e:	2100      	movs	r1, #0
1000a210:	c302      	stmia	r3!, {r1}
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
1000a212:	429a      	cmp	r2, r3
1000a214:	d1fc      	bne.n	1000a210 <inv_reset_compass_soft_iron_matrix+0x10>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
1000a216:	4c10      	ldr	r4, [pc, #64]	; (1000a258 <inv_reset_compass_soft_iron_matrix+0x58>)
1000a218:	0020      	movs	r0, r4
1000a21a:	3049      	adds	r0, #73	; 0x49
1000a21c:	30ff      	adds	r0, #255	; 0xff
1000a21e:	2224      	movs	r2, #36	; 0x24
1000a220:	2100      	movs	r1, #0
1000a222:	4b0e      	ldr	r3, [pc, #56]	; (1000a25c <inv_reset_compass_soft_iron_matrix+0x5c>)
1000a224:	4798      	blx	r3

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a226:	22fe      	movs	r2, #254	; 0xfe
1000a228:	0592      	lsls	r2, r2, #22
1000a22a:	23b6      	movs	r3, #182	; 0xb6
1000a22c:	005b      	lsls	r3, r3, #1
1000a22e:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a230:	2380      	movs	r3, #128	; 0x80
1000a232:	05db      	lsls	r3, r3, #23
1000a234:	21a4      	movs	r1, #164	; 0xa4
1000a236:	0049      	lsls	r1, r1, #1
1000a238:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a23a:	3134      	adds	r1, #52	; 0x34
1000a23c:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a23e:	3924      	subs	r1, #36	; 0x24
1000a240:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a242:	3134      	adds	r1, #52	; 0x34
1000a244:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a246:	22b4      	movs	r2, #180	; 0xb4
1000a248:	0052      	lsls	r2, r2, #1
1000a24a:	50a3      	str	r3, [r4, r2]
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
    sensors.soft_iron.enable = 0;
1000a24c:	2200      	movs	r2, #0
1000a24e:	23c8      	movs	r3, #200	; 0xc8
1000a250:	005b      	lsls	r3, r3, #1
1000a252:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
}
1000a254:	bd10      	pop	{r4, pc}
1000a256:	46c0      	nop			; (mov r8, r8)
1000a258:	1001bb7c 	.word	0x1001bb7c
1000a25c:	1001865f 	.word	0x1001865f

1000a260 <inv_init_data_builder>:
}

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
1000a260:	b510      	push	{r4, lr}
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
1000a262:	22a0      	movs	r2, #160	; 0xa0
1000a264:	0052      	lsls	r2, r2, #1
1000a266:	2100      	movs	r1, #0
1000a268:	4808      	ldr	r0, [pc, #32]	; (1000a28c <inv_init_data_builder+0x2c>)
1000a26a:	4c09      	ldr	r4, [pc, #36]	; (1000a290 <inv_init_data_builder+0x30>)
1000a26c:	47a0      	blx	r4
    memset(&sensors, 0, sizeof(sensors));
1000a26e:	22cc      	movs	r2, #204	; 0xcc
1000a270:	0052      	lsls	r2, r2, #1
1000a272:	2100      	movs	r1, #0
1000a274:	4807      	ldr	r0, [pc, #28]	; (1000a294 <inv_init_data_builder+0x34>)
1000a276:	47a0      	blx	r4

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
1000a278:	4b07      	ldr	r3, [pc, #28]	; (1000a298 <inv_init_data_builder+0x38>)
1000a27a:	4798      	blx	r3

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
1000a27c:	4b07      	ldr	r3, [pc, #28]	; (1000a29c <inv_init_data_builder+0x3c>)
1000a27e:	2248      	movs	r2, #72	; 0x48
1000a280:	4907      	ldr	r1, [pc, #28]	; (1000a2a0 <inv_init_data_builder+0x40>)
1000a282:	4808      	ldr	r0, [pc, #32]	; (1000a2a4 <inv_init_data_builder+0x44>)
1000a284:	4c08      	ldr	r4, [pc, #32]	; (1000a2a8 <inv_init_data_builder+0x48>)
1000a286:	47a0      	blx	r4
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
1000a288:	bd10      	pop	{r4, pc}
1000a28a:	46c0      	nop			; (mov r8, r8)
1000a28c:	1001ba3c 	.word	0x1001ba3c
1000a290:	1001865f 	.word	0x1001865f
1000a294:	1001bb7c 	.word	0x1001bb7c
1000a298:	1000a201 	.word	0x1000a201
1000a29c:	0000d093 	.word	0x0000d093
1000a2a0:	10009d99 	.word	0x10009d99
1000a2a4:	10009db1 	.word	0x10009db1
1000a2a8:	1000afdd 	.word	0x1000afdd

1000a2ac <inv_set_message>:
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
    if (level == 0) {
1000a2ac:	2a00      	cmp	r2, #0
1000a2ae:	d104      	bne.n	1000a2ba <inv_set_message+0xe>
        mh.message &= ~clear;
        mh.message |= set;
1000a2b0:	4a02      	ldr	r2, [pc, #8]	; (1000a2bc <inv_set_message+0x10>)
1000a2b2:	6813      	ldr	r3, [r2, #0]
1000a2b4:	438b      	bics	r3, r1
1000a2b6:	4318      	orrs	r0, r3
1000a2b8:	6010      	str	r0, [r2, #0]
    }
}
1000a2ba:	4770      	bx	lr
1000a2bc:	1001bd14 	.word	0x1001bd14

1000a2c0 <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a2c0:	2200      	movs	r2, #0
1000a2c2:	5682      	ldrsb	r2, [r0, r2]
        b = 0;
1000a2c4:	2300      	movs	r3, #0

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a2c6:	2a00      	cmp	r2, #0
1000a2c8:	dc12      	bgt.n	1000a2f0 <inv_row_2_scale+0x30>
        b = 0;
    else if (row[0] < 0)
        b = 4;
1000a2ca:	3304      	adds	r3, #4
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
1000a2cc:	2a00      	cmp	r2, #0
1000a2ce:	db0f      	blt.n	1000a2f0 <inv_row_2_scale+0x30>
        b = 4;
    else if (row[1] > 0)
1000a2d0:	2201      	movs	r2, #1
1000a2d2:	5682      	ldrsb	r2, [r0, r2]
        b = 1;
1000a2d4:	3b03      	subs	r3, #3

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
1000a2d6:	2a00      	cmp	r2, #0
1000a2d8:	dc0a      	bgt.n	1000a2f0 <inv_row_2_scale+0x30>
        b = 1;
    else if (row[1] < 0)
        b = 5;
1000a2da:	3304      	adds	r3, #4
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
1000a2dc:	2a00      	cmp	r2, #0
1000a2de:	db07      	blt.n	1000a2f0 <inv_row_2_scale+0x30>
        b = 5;
    else if (row[2] > 0)
1000a2e0:	2202      	movs	r2, #2
1000a2e2:	5682      	ldrsb	r2, [r0, r2]
        b = 2;
1000a2e4:	3b03      	subs	r3, #3
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
1000a2e6:	2a00      	cmp	r2, #0
1000a2e8:	dc02      	bgt.n	1000a2f0 <inv_row_2_scale+0x30>
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
1000a2ea:	0fd3      	lsrs	r3, r2, #31
1000a2ec:	2207      	movs	r2, #7
1000a2ee:	1ad3      	subs	r3, r2, r3
    return b;
}
1000a2f0:	0018      	movs	r0, r3
1000a2f2:	4770      	bx	lr

1000a2f4 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1000a2f4:	0002      	movs	r2, r0
1000a2f6:	0001      	movs	r1, r0
1000a2f8:	310c      	adds	r1, #12
    unsigned long gmag = 0;
1000a2fa:	2000      	movs	r0, #0
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1000a2fc:	ca08      	ldmia	r2!, {r3}
1000a2fe:	135b      	asrs	r3, r3, #13
        gmag += temp * temp;
1000a300:	435b      	muls	r3, r3
1000a302:	18c0      	adds	r0, r0, r3
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1000a304:	428a      	cmp	r2, r1
1000a306:	d1f9      	bne.n	1000a2fc <inv_get_gyro_sum_of_sqr+0x8>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
}
1000a308:	4770      	bx	lr
1000a30a:	46c0      	nop			; (mov r8, r8)

1000a30c <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1000a30c:	b510      	push	{r4, lr}
1000a30e:	000a      	movs	r2, r1
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 29);
    return result;
1000a310:	17c1      	asrs	r1, r0, #31
1000a312:	17d3      	asrs	r3, r2, #31
1000a314:	4c02      	ldr	r4, [pc, #8]	; (1000a320 <inv_q29_mult+0x14>)
1000a316:	47a0      	blx	r4
1000a318:	00c9      	lsls	r1, r1, #3
1000a31a:	0f40      	lsrs	r0, r0, #29
1000a31c:	4308      	orrs	r0, r1
#endif
}
1000a31e:	bd10      	pop	{r4, pc}
1000a320:	1001572d 	.word	0x1001572d

1000a324 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
1000a324:	b510      	push	{r4, lr}
1000a326:	000a      	movs	r2, r1
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 30);
    return result;
1000a328:	17c1      	asrs	r1, r0, #31
1000a32a:	17d3      	asrs	r3, r2, #31
1000a32c:	4c02      	ldr	r4, [pc, #8]	; (1000a338 <inv_q30_mult+0x14>)
1000a32e:	47a0      	blx	r4
1000a330:	0089      	lsls	r1, r1, #2
1000a332:	0f80      	lsrs	r0, r0, #30
1000a334:	4308      	orrs	r0, r1
#endif
}
1000a336:	bd10      	pop	{r4, pc}
1000a338:	1001572d 	.word	0x1001572d

1000a33c <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a33c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a33e:	4647      	mov	r7, r8
1000a340:	b480      	push	{r7}
1000a342:	0006      	movs	r6, r0
1000a344:	000d      	movs	r5, r1
1000a346:	0017      	movs	r7, r2
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a348:	6803      	ldr	r3, [r0, #0]
1000a34a:	17d9      	asrs	r1, r3, #31
1000a34c:	682b      	ldr	r3, [r5, #0]
1000a34e:	17db      	asrs	r3, r3, #31
1000a350:	4c5d      	ldr	r4, [pc, #372]	; (1000a4c8 <inv_q_mult+0x18c>)
1000a352:	682a      	ldr	r2, [r5, #0]
1000a354:	6800      	ldr	r0, [r0, #0]
1000a356:	47a0      	blx	r4
1000a358:	0089      	lsls	r1, r1, #2
1000a35a:	0f83      	lsrs	r3, r0, #30
1000a35c:	430b      	orrs	r3, r1
1000a35e:	4698      	mov	r8, r3
1000a360:	6873      	ldr	r3, [r6, #4]
1000a362:	17d9      	asrs	r1, r3, #31
1000a364:	686b      	ldr	r3, [r5, #4]
1000a366:	17db      	asrs	r3, r3, #31
1000a368:	686a      	ldr	r2, [r5, #4]
1000a36a:	6870      	ldr	r0, [r6, #4]
1000a36c:	47a0      	blx	r4
1000a36e:	0089      	lsls	r1, r1, #2
1000a370:	0f80      	lsrs	r0, r0, #30
1000a372:	4308      	orrs	r0, r1
1000a374:	4643      	mov	r3, r8
1000a376:	1a1b      	subs	r3, r3, r0
1000a378:	4698      	mov	r8, r3
1000a37a:	68b3      	ldr	r3, [r6, #8]
1000a37c:	17d9      	asrs	r1, r3, #31
1000a37e:	68ab      	ldr	r3, [r5, #8]
1000a380:	17db      	asrs	r3, r3, #31
1000a382:	68aa      	ldr	r2, [r5, #8]
1000a384:	68b0      	ldr	r0, [r6, #8]
1000a386:	47a0      	blx	r4
1000a388:	0089      	lsls	r1, r1, #2
1000a38a:	0f80      	lsrs	r0, r0, #30
1000a38c:	4308      	orrs	r0, r1
1000a38e:	4643      	mov	r3, r8
1000a390:	1a1b      	subs	r3, r3, r0
1000a392:	4698      	mov	r8, r3
1000a394:	68f3      	ldr	r3, [r6, #12]
1000a396:	17d9      	asrs	r1, r3, #31
1000a398:	68eb      	ldr	r3, [r5, #12]
1000a39a:	17db      	asrs	r3, r3, #31
1000a39c:	68ea      	ldr	r2, [r5, #12]
1000a39e:	68f0      	ldr	r0, [r6, #12]
1000a3a0:	47a0      	blx	r4
1000a3a2:	0089      	lsls	r1, r1, #2
1000a3a4:	0f80      	lsrs	r0, r0, #30
1000a3a6:	4308      	orrs	r0, r1
1000a3a8:	4643      	mov	r3, r8
1000a3aa:	1a18      	subs	r0, r3, r0
1000a3ac:	6038      	str	r0, [r7, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1000a3ae:	6873      	ldr	r3, [r6, #4]
1000a3b0:	17d9      	asrs	r1, r3, #31
1000a3b2:	682b      	ldr	r3, [r5, #0]
1000a3b4:	17db      	asrs	r3, r3, #31
1000a3b6:	682a      	ldr	r2, [r5, #0]
1000a3b8:	6870      	ldr	r0, [r6, #4]
1000a3ba:	47a0      	blx	r4
1000a3bc:	0089      	lsls	r1, r1, #2
1000a3be:	0f83      	lsrs	r3, r0, #30
1000a3c0:	430b      	orrs	r3, r1
1000a3c2:	4698      	mov	r8, r3
1000a3c4:	6833      	ldr	r3, [r6, #0]
1000a3c6:	17d9      	asrs	r1, r3, #31
1000a3c8:	686b      	ldr	r3, [r5, #4]
1000a3ca:	17db      	asrs	r3, r3, #31
1000a3cc:	686a      	ldr	r2, [r5, #4]
1000a3ce:	6830      	ldr	r0, [r6, #0]
1000a3d0:	47a0      	blx	r4
1000a3d2:	0089      	lsls	r1, r1, #2
1000a3d4:	0f80      	lsrs	r0, r0, #30
1000a3d6:	4308      	orrs	r0, r1
1000a3d8:	4480      	add	r8, r0
1000a3da:	68b3      	ldr	r3, [r6, #8]
1000a3dc:	17d9      	asrs	r1, r3, #31
1000a3de:	68eb      	ldr	r3, [r5, #12]
1000a3e0:	17db      	asrs	r3, r3, #31
1000a3e2:	68ea      	ldr	r2, [r5, #12]
1000a3e4:	68b0      	ldr	r0, [r6, #8]
1000a3e6:	47a0      	blx	r4
1000a3e8:	0089      	lsls	r1, r1, #2
1000a3ea:	0f80      	lsrs	r0, r0, #30
1000a3ec:	4308      	orrs	r0, r1
1000a3ee:	4480      	add	r8, r0
1000a3f0:	68f3      	ldr	r3, [r6, #12]
1000a3f2:	17d9      	asrs	r1, r3, #31
1000a3f4:	68ab      	ldr	r3, [r5, #8]
1000a3f6:	17db      	asrs	r3, r3, #31
1000a3f8:	68aa      	ldr	r2, [r5, #8]
1000a3fa:	68f0      	ldr	r0, [r6, #12]
1000a3fc:	47a0      	blx	r4
1000a3fe:	0089      	lsls	r1, r1, #2
1000a400:	0f80      	lsrs	r0, r0, #30
1000a402:	4308      	orrs	r0, r1
1000a404:	4643      	mov	r3, r8
1000a406:	1a18      	subs	r0, r3, r0
1000a408:	6078      	str	r0, [r7, #4]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1000a40a:	6833      	ldr	r3, [r6, #0]
1000a40c:	17d9      	asrs	r1, r3, #31
1000a40e:	68ab      	ldr	r3, [r5, #8]
1000a410:	17db      	asrs	r3, r3, #31
1000a412:	68aa      	ldr	r2, [r5, #8]
1000a414:	6830      	ldr	r0, [r6, #0]
1000a416:	47a0      	blx	r4
1000a418:	0089      	lsls	r1, r1, #2
1000a41a:	0f83      	lsrs	r3, r0, #30
1000a41c:	430b      	orrs	r3, r1
1000a41e:	4698      	mov	r8, r3
1000a420:	6873      	ldr	r3, [r6, #4]
1000a422:	17d9      	asrs	r1, r3, #31
1000a424:	68eb      	ldr	r3, [r5, #12]
1000a426:	17db      	asrs	r3, r3, #31
1000a428:	68ea      	ldr	r2, [r5, #12]
1000a42a:	6870      	ldr	r0, [r6, #4]
1000a42c:	47a0      	blx	r4
1000a42e:	0089      	lsls	r1, r1, #2
1000a430:	0f80      	lsrs	r0, r0, #30
1000a432:	4308      	orrs	r0, r1
1000a434:	4643      	mov	r3, r8
1000a436:	1a1b      	subs	r3, r3, r0
1000a438:	4698      	mov	r8, r3
1000a43a:	68b3      	ldr	r3, [r6, #8]
1000a43c:	17d9      	asrs	r1, r3, #31
1000a43e:	682b      	ldr	r3, [r5, #0]
1000a440:	17db      	asrs	r3, r3, #31
1000a442:	682a      	ldr	r2, [r5, #0]
1000a444:	68b0      	ldr	r0, [r6, #8]
1000a446:	47a0      	blx	r4
1000a448:	0089      	lsls	r1, r1, #2
1000a44a:	0f80      	lsrs	r0, r0, #30
1000a44c:	4308      	orrs	r0, r1
1000a44e:	4480      	add	r8, r0
1000a450:	68f3      	ldr	r3, [r6, #12]
1000a452:	17d9      	asrs	r1, r3, #31
1000a454:	686b      	ldr	r3, [r5, #4]
1000a456:	17db      	asrs	r3, r3, #31
1000a458:	686a      	ldr	r2, [r5, #4]
1000a45a:	68f0      	ldr	r0, [r6, #12]
1000a45c:	47a0      	blx	r4
1000a45e:	0089      	lsls	r1, r1, #2
1000a460:	0f80      	lsrs	r0, r0, #30
1000a462:	4308      	orrs	r0, r1
1000a464:	4440      	add	r0, r8
1000a466:	60b8      	str	r0, [r7, #8]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1000a468:	6873      	ldr	r3, [r6, #4]
1000a46a:	17d9      	asrs	r1, r3, #31
1000a46c:	68ab      	ldr	r3, [r5, #8]
1000a46e:	17db      	asrs	r3, r3, #31
1000a470:	68aa      	ldr	r2, [r5, #8]
1000a472:	6870      	ldr	r0, [r6, #4]
1000a474:	47a0      	blx	r4
1000a476:	0089      	lsls	r1, r1, #2
1000a478:	0f83      	lsrs	r3, r0, #30
1000a47a:	430b      	orrs	r3, r1
1000a47c:	4698      	mov	r8, r3
1000a47e:	6833      	ldr	r3, [r6, #0]
1000a480:	17d9      	asrs	r1, r3, #31
1000a482:	68eb      	ldr	r3, [r5, #12]
1000a484:	17db      	asrs	r3, r3, #31
1000a486:	68ea      	ldr	r2, [r5, #12]
1000a488:	6830      	ldr	r0, [r6, #0]
1000a48a:	47a0      	blx	r4
1000a48c:	0089      	lsls	r1, r1, #2
1000a48e:	0f80      	lsrs	r0, r0, #30
1000a490:	4308      	orrs	r0, r1
1000a492:	4480      	add	r8, r0
1000a494:	68b3      	ldr	r3, [r6, #8]
1000a496:	17d9      	asrs	r1, r3, #31
1000a498:	686b      	ldr	r3, [r5, #4]
1000a49a:	17db      	asrs	r3, r3, #31
1000a49c:	686a      	ldr	r2, [r5, #4]
1000a49e:	68b0      	ldr	r0, [r6, #8]
1000a4a0:	47a0      	blx	r4
1000a4a2:	0089      	lsls	r1, r1, #2
1000a4a4:	0f80      	lsrs	r0, r0, #30
1000a4a6:	4308      	orrs	r0, r1
1000a4a8:	4643      	mov	r3, r8
1000a4aa:	1a1b      	subs	r3, r3, r0
1000a4ac:	4698      	mov	r8, r3
1000a4ae:	68f0      	ldr	r0, [r6, #12]
1000a4b0:	17c1      	asrs	r1, r0, #31
1000a4b2:	682a      	ldr	r2, [r5, #0]
1000a4b4:	17d3      	asrs	r3, r2, #31
1000a4b6:	47a0      	blx	r4
1000a4b8:	0089      	lsls	r1, r1, #2
1000a4ba:	0f80      	lsrs	r0, r0, #30
1000a4bc:	4308      	orrs	r0, r1
1000a4be:	4440      	add	r0, r8
1000a4c0:	60f8      	str	r0, [r7, #12]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1000a4c2:	bc04      	pop	{r2}
1000a4c4:	4690      	mov	r8, r2
1000a4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4c8:	1001572d 	.word	0x1001572d

1000a4cc <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1000a4cc:	b510      	push	{r4, lr}
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a4ce:	6803      	ldr	r3, [r0, #0]
1000a4d0:	001c      	movs	r4, r3
1000a4d2:	680b      	ldr	r3, [r1, #0]
1000a4d4:	469c      	mov	ip, r3
1000a4d6:	4464      	add	r4, ip
1000a4d8:	6014      	str	r4, [r2, #0]
    qSum[1] = q1[1] + q2[1];
1000a4da:	6843      	ldr	r3, [r0, #4]
1000a4dc:	001c      	movs	r4, r3
1000a4de:	684b      	ldr	r3, [r1, #4]
1000a4e0:	469c      	mov	ip, r3
1000a4e2:	4464      	add	r4, ip
1000a4e4:	6054      	str	r4, [r2, #4]
    qSum[2] = q1[2] + q2[2];
1000a4e6:	6883      	ldr	r3, [r0, #8]
1000a4e8:	001c      	movs	r4, r3
1000a4ea:	688b      	ldr	r3, [r1, #8]
1000a4ec:	469c      	mov	ip, r3
1000a4ee:	4464      	add	r4, ip
1000a4f0:	6094      	str	r4, [r2, #8]
    qSum[3] = q1[3] + q2[3];
1000a4f2:	68c0      	ldr	r0, [r0, #12]
1000a4f4:	68cb      	ldr	r3, [r1, #12]
1000a4f6:	18c3      	adds	r3, r0, r3
1000a4f8:	60d3      	str	r3, [r2, #12]
}
1000a4fa:	bd10      	pop	{r4, pc}

1000a4fc <inv_q_invert>:
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a4fc:	6803      	ldr	r3, [r0, #0]
1000a4fe:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a500:	6843      	ldr	r3, [r0, #4]
1000a502:	425b      	negs	r3, r3
1000a504:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a506:	6883      	ldr	r3, [r0, #8]
1000a508:	425b      	negs	r3, r3
1000a50a:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a50c:	68c3      	ldr	r3, [r0, #12]
1000a50e:	425b      	negs	r3, r3
1000a510:	60cb      	str	r3, [r1, #12]
}
1000a512:	4770      	bx	lr

1000a514 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a514:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a516:	465f      	mov	r7, fp
1000a518:	4656      	mov	r6, sl
1000a51a:	464d      	mov	r5, r9
1000a51c:	4644      	mov	r4, r8
1000a51e:	b4f0      	push	{r4, r5, r6, r7}
1000a520:	b097      	sub	sp, #92	; 0x5c
1000a522:	0007      	movs	r7, r0
1000a524:	4688      	mov	r8, r1
1000a526:	9203      	str	r2, [sp, #12]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1000a528:	2300      	movs	r3, #0
1000a52a:	9312      	str	r3, [sp, #72]	; 0x48
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a52c:	6843      	ldr	r3, [r0, #4]
1000a52e:	0019      	movs	r1, r3
1000a530:	17db      	asrs	r3, r3, #31
1000a532:	001e      	movs	r6, r3
1000a534:	4643      	mov	r3, r8
1000a536:	689b      	ldr	r3, [r3, #8]
1000a538:	469b      	mov	fp, r3
1000a53a:	17db      	asrs	r3, r3, #31
1000a53c:	6884      	ldr	r4, [r0, #8]
1000a53e:	17e0      	asrs	r0, r4, #31
1000a540:	9000      	str	r0, [sp, #0]
1000a542:	4642      	mov	r2, r8
1000a544:	6852      	ldr	r2, [r2, #4]
1000a546:	4692      	mov	sl, r2
1000a548:	17d5      	asrs	r5, r2, #31
1000a54a:	9501      	str	r5, [sp, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
1000a54c:	4d38      	ldr	r5, [pc, #224]	; (1000a630 <inv_compass_angle+0x11c>)
1000a54e:	465a      	mov	r2, fp
1000a550:	9305      	str	r3, [sp, #20]
1000a552:	4689      	mov	r9, r1
1000a554:	0008      	movs	r0, r1
1000a556:	9604      	str	r6, [sp, #16]
1000a558:	0031      	movs	r1, r6
1000a55a:	47a8      	blx	r5
1000a55c:	0089      	lsls	r1, r1, #2
1000a55e:	0f86      	lsrs	r6, r0, #30
1000a560:	430e      	orrs	r6, r1
1000a562:	4652      	mov	r2, sl
1000a564:	9b01      	ldr	r3, [sp, #4]
1000a566:	0020      	movs	r0, r4
1000a568:	9900      	ldr	r1, [sp, #0]
1000a56a:	47a8      	blx	r5
1000a56c:	0089      	lsls	r1, r1, #2
1000a56e:	0f80      	lsrs	r0, r0, #30
1000a570:	4308      	orrs	r0, r1
1000a572:	1a36      	subs	r6, r6, r0
1000a574:	9613      	str	r6, [sp, #76]	; 0x4c
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a576:	4640      	mov	r0, r8
1000a578:	6806      	ldr	r6, [r0, #0]
1000a57a:	17f0      	asrs	r0, r6, #31
1000a57c:	0001      	movs	r1, r0
1000a57e:	683f      	ldr	r7, [r7, #0]
1000a580:	17f8      	asrs	r0, r7, #31
1000a582:	9002      	str	r0, [sp, #8]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a584:	0022      	movs	r2, r4
1000a586:	9b00      	ldr	r3, [sp, #0]
1000a588:	0030      	movs	r0, r6
1000a58a:	9100      	str	r1, [sp, #0]
1000a58c:	47a8      	blx	r5
1000a58e:	0089      	lsls	r1, r1, #2
1000a590:	0f84      	lsrs	r4, r0, #30
1000a592:	430c      	orrs	r4, r1
1000a594:	465a      	mov	r2, fp
1000a596:	9b05      	ldr	r3, [sp, #20]
1000a598:	0038      	movs	r0, r7
1000a59a:	9902      	ldr	r1, [sp, #8]
1000a59c:	47a8      	blx	r5
1000a59e:	0089      	lsls	r1, r1, #2
1000a5a0:	0f80      	lsrs	r0, r0, #30
1000a5a2:	4308      	orrs	r0, r1
1000a5a4:	1a24      	subs	r4, r4, r0
1000a5a6:	9414      	str	r4, [sp, #80]	; 0x50
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a5a8:	4652      	mov	r2, sl
1000a5aa:	9b01      	ldr	r3, [sp, #4]
1000a5ac:	0038      	movs	r0, r7
1000a5ae:	9902      	ldr	r1, [sp, #8]
1000a5b0:	47a8      	blx	r5
1000a5b2:	0089      	lsls	r1, r1, #2
1000a5b4:	0f84      	lsrs	r4, r0, #30
1000a5b6:	430c      	orrs	r4, r1
1000a5b8:	464a      	mov	r2, r9
1000a5ba:	9b04      	ldr	r3, [sp, #16]
1000a5bc:	0030      	movs	r0, r6
1000a5be:	9900      	ldr	r1, [sp, #0]
1000a5c0:	47a8      	blx	r5
1000a5c2:	0089      	lsls	r1, r1, #2
1000a5c4:	0f80      	lsrs	r0, r0, #30
1000a5c6:	4308      	orrs	r0, r1
1000a5c8:	1a24      	subs	r4, r4, r0
1000a5ca:	9415      	str	r4, [sp, #84]	; 0x54

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a5cc:	ab0e      	add	r3, sp, #56	; 0x38
1000a5ce:	001a      	movs	r2, r3
1000a5d0:	a912      	add	r1, sp, #72	; 0x48
1000a5d2:	9d03      	ldr	r5, [sp, #12]
1000a5d4:	0028      	movs	r0, r5
1000a5d6:	4c17      	ldr	r4, [pc, #92]	; (1000a634 <inv_compass_angle+0x120>)
1000a5d8:	47a0      	blx	r4
    inv_q_invert(quat, qi);
1000a5da:	a906      	add	r1, sp, #24
1000a5dc:	0028      	movs	r0, r5
1000a5de:	4b16      	ldr	r3, [pc, #88]	; (1000a638 <inv_compass_angle+0x124>)
1000a5e0:	4798      	blx	r3
    inv_q_mult(q1, qi, q2);
1000a5e2:	aa0a      	add	r2, sp, #40	; 0x28
1000a5e4:	a906      	add	r1, sp, #24
1000a5e6:	a80e      	add	r0, sp, #56	; 0x38
1000a5e8:	47a0      	blx	r4

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1000a5ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000a5ec:	2c00      	cmp	r4, #0
1000a5ee:	d103      	bne.n	1000a5f8 <inv_compass_angle+0xe4>
1000a5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        return 0.f;
1000a5f2:	2000      	movs	r0, #0
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1000a5f4:	2b00      	cmp	r3, #0
1000a5f6:	d014      	beq.n	1000a622 <inv_compass_angle+0x10e>
        return 0.f;

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1000a5f8:	4e10      	ldr	r6, [pc, #64]	; (1000a63c <inv_compass_angle+0x128>)
1000a5fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a5fc:	47b0      	blx	r6
1000a5fe:	4d10      	ldr	r5, [pc, #64]	; (1000a640 <inv_compass_angle+0x12c>)
1000a600:	21c2      	movs	r1, #194	; 0xc2
1000a602:	0589      	lsls	r1, r1, #22
1000a604:	47a8      	blx	r5
1000a606:	1c07      	adds	r7, r0, #0
1000a608:	0020      	movs	r0, r4
1000a60a:	47b0      	blx	r6
1000a60c:	21c2      	movs	r1, #194	; 0xc2
1000a60e:	0589      	lsls	r1, r1, #22
1000a610:	47a8      	blx	r5
1000a612:	1c39      	adds	r1, r7, #0
1000a614:	4b0b      	ldr	r3, [pc, #44]	; (1000a644 <inv_compass_angle+0x130>)
1000a616:	4798      	blx	r3
1000a618:	2380      	movs	r3, #128	; 0x80
1000a61a:	061b      	lsls	r3, r3, #24
1000a61c:	469c      	mov	ip, r3
1000a61e:	4460      	add	r0, ip
    return angW;
1000a620:	e7ff      	b.n	1000a622 <inv_compass_angle+0x10e>
}
1000a622:	b017      	add	sp, #92	; 0x5c
1000a624:	bc3c      	pop	{r2, r3, r4, r5}
1000a626:	4690      	mov	r8, r2
1000a628:	4699      	mov	r9, r3
1000a62a:	46a2      	mov	sl, r4
1000a62c:	46ab      	mov	fp, r5
1000a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a630:	1001572d 	.word	0x1001572d
1000a634:	1000a33d 	.word	0x1000a33d
1000a638:	1000a4fd 	.word	0x1000a4fd
1000a63c:	10016521 	.word	0x10016521
1000a640:	10015f79 	.word	0x10015f79
1000a644:	10010e19 	.word	0x10010e19

1000a648 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a648:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a64a:	b091      	sub	sp, #68	; 0x44
1000a64c:	0006      	movs	r6, r0
1000a64e:	0017      	movs	r7, r2
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a650:	2300      	movs	r3, #0
1000a652:	9304      	str	r3, [sp, #16]
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a654:	220c      	movs	r2, #12
1000a656:	a805      	add	r0, sp, #20
1000a658:	4c0a      	ldr	r4, [pc, #40]	; (1000a684 <inv_q_rotate+0x3c>)
1000a65a:	47a0      	blx	r4
    inv_q_mult(q, in4, q_temp1);
1000a65c:	aa0c      	add	r2, sp, #48	; 0x30
1000a65e:	a904      	add	r1, sp, #16
1000a660:	0030      	movs	r0, r6
1000a662:	4d09      	ldr	r5, [pc, #36]	; (1000a688 <inv_q_rotate+0x40>)
1000a664:	47a8      	blx	r5
    inv_q_invert(q, q_temp2);
1000a666:	a908      	add	r1, sp, #32
1000a668:	0030      	movs	r0, r6
1000a66a:	4b08      	ldr	r3, [pc, #32]	; (1000a68c <inv_q_rotate+0x44>)
1000a66c:	4798      	blx	r3
    inv_q_mult(q_temp1, q_temp2, out4);
1000a66e:	466a      	mov	r2, sp
1000a670:	a908      	add	r1, sp, #32
1000a672:	a80c      	add	r0, sp, #48	; 0x30
1000a674:	47a8      	blx	r5
    memcpy(out, &out4[1], 3 * sizeof(long));
1000a676:	220c      	movs	r2, #12
1000a678:	a901      	add	r1, sp, #4
1000a67a:	0038      	movs	r0, r7
1000a67c:	47a0      	blx	r4
}
1000a67e:	b011      	add	sp, #68	; 0x44
1000a680:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a682:	46c0      	nop			; (mov r8, r8)
1000a684:	10018623 	.word	0x10018623
1000a688:	1000a33d 	.word	0x1000a33d
1000a68c:	1000a4fd 	.word	0x1000a4fd

1000a690 <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a690:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a692:	464f      	mov	r7, r9
1000a694:	4646      	mov	r6, r8
1000a696:	b4c0      	push	{r6, r7}
1000a698:	b083      	sub	sp, #12
1000a69a:	0005      	movs	r5, r0
1000a69c:	000e      	movs	r6, r1
1000a69e:	4691      	mov	r9, r2
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a6a0:	4c38      	ldr	r4, [pc, #224]	; (1000a784 <inv_q_multf+0xf4>)
1000a6a2:	6809      	ldr	r1, [r1, #0]
1000a6a4:	6800      	ldr	r0, [r0, #0]
1000a6a6:	47a0      	blx	r4
1000a6a8:	1c07      	adds	r7, r0, #0
1000a6aa:	6871      	ldr	r1, [r6, #4]
1000a6ac:	6868      	ldr	r0, [r5, #4]
1000a6ae:	47a0      	blx	r4
1000a6b0:	1c01      	adds	r1, r0, #0
1000a6b2:	4b35      	ldr	r3, [pc, #212]	; (1000a788 <inv_q_multf+0xf8>)
1000a6b4:	4698      	mov	r8, r3
1000a6b6:	1c38      	adds	r0, r7, #0
1000a6b8:	4798      	blx	r3
1000a6ba:	1c07      	adds	r7, r0, #0
1000a6bc:	68b1      	ldr	r1, [r6, #8]
1000a6be:	68a8      	ldr	r0, [r5, #8]
1000a6c0:	47a0      	blx	r4
1000a6c2:	1c01      	adds	r1, r0, #0
1000a6c4:	1c38      	adds	r0, r7, #0
1000a6c6:	47c0      	blx	r8
1000a6c8:	1c07      	adds	r7, r0, #0
1000a6ca:	68f1      	ldr	r1, [r6, #12]
1000a6cc:	68e8      	ldr	r0, [r5, #12]
1000a6ce:	47a0      	blx	r4
1000a6d0:	1c01      	adds	r1, r0, #0
1000a6d2:	1c38      	adds	r0, r7, #0
1000a6d4:	47c0      	blx	r8
1000a6d6:	464b      	mov	r3, r9
1000a6d8:	6018      	str	r0, [r3, #0]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1000a6da:	6871      	ldr	r1, [r6, #4]
1000a6dc:	6828      	ldr	r0, [r5, #0]
1000a6de:	47a0      	blx	r4
1000a6e0:	9001      	str	r0, [sp, #4]
1000a6e2:	6831      	ldr	r1, [r6, #0]
1000a6e4:	6868      	ldr	r0, [r5, #4]
1000a6e6:	47a0      	blx	r4
1000a6e8:	1c01      	adds	r1, r0, #0
1000a6ea:	4f28      	ldr	r7, [pc, #160]	; (1000a78c <inv_q_multf+0xfc>)
1000a6ec:	9801      	ldr	r0, [sp, #4]
1000a6ee:	47b8      	blx	r7
1000a6f0:	9001      	str	r0, [sp, #4]
1000a6f2:	68f1      	ldr	r1, [r6, #12]
1000a6f4:	68a8      	ldr	r0, [r5, #8]
1000a6f6:	47a0      	blx	r4
1000a6f8:	1c01      	adds	r1, r0, #0
1000a6fa:	9801      	ldr	r0, [sp, #4]
1000a6fc:	47b8      	blx	r7
1000a6fe:	9001      	str	r0, [sp, #4]
1000a700:	68b1      	ldr	r1, [r6, #8]
1000a702:	68e8      	ldr	r0, [r5, #12]
1000a704:	47a0      	blx	r4
1000a706:	1c01      	adds	r1, r0, #0
1000a708:	9801      	ldr	r0, [sp, #4]
1000a70a:	47c0      	blx	r8
1000a70c:	464b      	mov	r3, r9
1000a70e:	6058      	str	r0, [r3, #4]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1000a710:	68b1      	ldr	r1, [r6, #8]
1000a712:	6828      	ldr	r0, [r5, #0]
1000a714:	47a0      	blx	r4
1000a716:	9001      	str	r0, [sp, #4]
1000a718:	68f1      	ldr	r1, [r6, #12]
1000a71a:	6868      	ldr	r0, [r5, #4]
1000a71c:	47a0      	blx	r4
1000a71e:	1c01      	adds	r1, r0, #0
1000a720:	9801      	ldr	r0, [sp, #4]
1000a722:	47c0      	blx	r8
1000a724:	9001      	str	r0, [sp, #4]
1000a726:	6831      	ldr	r1, [r6, #0]
1000a728:	68a8      	ldr	r0, [r5, #8]
1000a72a:	47a0      	blx	r4
1000a72c:	1c01      	adds	r1, r0, #0
1000a72e:	9801      	ldr	r0, [sp, #4]
1000a730:	47b8      	blx	r7
1000a732:	9001      	str	r0, [sp, #4]
1000a734:	6871      	ldr	r1, [r6, #4]
1000a736:	68e8      	ldr	r0, [r5, #12]
1000a738:	47a0      	blx	r4
1000a73a:	1c01      	adds	r1, r0, #0
1000a73c:	9801      	ldr	r0, [sp, #4]
1000a73e:	47b8      	blx	r7
1000a740:	464b      	mov	r3, r9
1000a742:	6098      	str	r0, [r3, #8]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1000a744:	68f1      	ldr	r1, [r6, #12]
1000a746:	6828      	ldr	r0, [r5, #0]
1000a748:	47a0      	blx	r4
1000a74a:	9001      	str	r0, [sp, #4]
1000a74c:	68b1      	ldr	r1, [r6, #8]
1000a74e:	6868      	ldr	r0, [r5, #4]
1000a750:	47a0      	blx	r4
1000a752:	1c01      	adds	r1, r0, #0
1000a754:	9801      	ldr	r0, [sp, #4]
1000a756:	47b8      	blx	r7
1000a758:	9001      	str	r0, [sp, #4]
1000a75a:	6871      	ldr	r1, [r6, #4]
1000a75c:	68a8      	ldr	r0, [r5, #8]
1000a75e:	47a0      	blx	r4
1000a760:	1c01      	adds	r1, r0, #0
1000a762:	9801      	ldr	r0, [sp, #4]
1000a764:	47c0      	blx	r8
1000a766:	9001      	str	r0, [sp, #4]
1000a768:	6831      	ldr	r1, [r6, #0]
1000a76a:	68e8      	ldr	r0, [r5, #12]
1000a76c:	47a0      	blx	r4
1000a76e:	1c01      	adds	r1, r0, #0
1000a770:	9801      	ldr	r0, [sp, #4]
1000a772:	47b8      	blx	r7
1000a774:	464b      	mov	r3, r9
1000a776:	60d8      	str	r0, [r3, #12]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1000a778:	b003      	add	sp, #12
1000a77a:	bc0c      	pop	{r2, r3}
1000a77c:	4690      	mov	r8, r2
1000a77e:	4699      	mov	r9, r3
1000a780:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a782:	46c0      	nop			; (mov r8, r8)
1000a784:	10015f79 	.word	0x10015f79
1000a788:	100161a1 	.word	0x100161a1
1000a78c:	100158f9 	.word	0x100158f9

1000a790 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a792:	0006      	movs	r6, r0
1000a794:	000f      	movs	r7, r1
1000a796:	0014      	movs	r4, r2
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a798:	4d08      	ldr	r5, [pc, #32]	; (1000a7bc <inv_q_addf+0x2c>)
1000a79a:	6809      	ldr	r1, [r1, #0]
1000a79c:	6800      	ldr	r0, [r0, #0]
1000a79e:	47a8      	blx	r5
1000a7a0:	6020      	str	r0, [r4, #0]
    qSum[1] = q1[1] + q2[1];
1000a7a2:	6879      	ldr	r1, [r7, #4]
1000a7a4:	6870      	ldr	r0, [r6, #4]
1000a7a6:	47a8      	blx	r5
1000a7a8:	6060      	str	r0, [r4, #4]
    qSum[2] = q1[2] + q2[2];
1000a7aa:	68b9      	ldr	r1, [r7, #8]
1000a7ac:	68b0      	ldr	r0, [r6, #8]
1000a7ae:	47a8      	blx	r5
1000a7b0:	60a0      	str	r0, [r4, #8]
    qSum[3] = q1[3] + q2[3];
1000a7b2:	68f9      	ldr	r1, [r7, #12]
1000a7b4:	68f0      	ldr	r0, [r6, #12]
1000a7b6:	47a8      	blx	r5
1000a7b8:	60e0      	str	r0, [r4, #12]
}
1000a7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a7bc:	100158f9 	.word	0x100158f9

1000a7c0 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1000a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7c2:	4657      	mov	r7, sl
1000a7c4:	b480      	push	{r7}
1000a7c6:	b084      	sub	sp, #16
1000a7c8:	0004      	movs	r4, r0
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a7ca:	6807      	ldr	r7, [r0, #0]
1000a7cc:	6843      	ldr	r3, [r0, #4]
1000a7ce:	1c1d      	adds	r5, r3, #0
1000a7d0:	9303      	str	r3, [sp, #12]
1000a7d2:	6883      	ldr	r3, [r0, #8]
1000a7d4:	9301      	str	r3, [sp, #4]
1000a7d6:	68c2      	ldr	r2, [r0, #12]
1000a7d8:	9202      	str	r2, [sp, #8]
1000a7da:	4e3e      	ldr	r6, [pc, #248]	; (1000a8d4 <inv_q_normalizef+0x114>)
1000a7dc:	1c39      	adds	r1, r7, #0
1000a7de:	1c38      	adds	r0, r7, #0
1000a7e0:	47b0      	blx	r6
1000a7e2:	9000      	str	r0, [sp, #0]
1000a7e4:	1c29      	adds	r1, r5, #0
1000a7e6:	1c28      	adds	r0, r5, #0
1000a7e8:	47b0      	blx	r6
1000a7ea:	1c01      	adds	r1, r0, #0
1000a7ec:	4d3a      	ldr	r5, [pc, #232]	; (1000a8d8 <inv_q_normalizef+0x118>)
1000a7ee:	9800      	ldr	r0, [sp, #0]
1000a7f0:	47a8      	blx	r5
1000a7f2:	9000      	str	r0, [sp, #0]
1000a7f4:	9b01      	ldr	r3, [sp, #4]
1000a7f6:	1c19      	adds	r1, r3, #0
1000a7f8:	1c18      	adds	r0, r3, #0
1000a7fa:	47b0      	blx	r6
1000a7fc:	1c01      	adds	r1, r0, #0
1000a7fe:	9800      	ldr	r0, [sp, #0]
1000a800:	47a8      	blx	r5
1000a802:	9000      	str	r0, [sp, #0]
1000a804:	9a02      	ldr	r2, [sp, #8]
1000a806:	1c11      	adds	r1, r2, #0
1000a808:	1c10      	adds	r0, r2, #0
1000a80a:	47b0      	blx	r6
1000a80c:	1c01      	adds	r1, r0, #0
1000a80e:	9800      	ldr	r0, [sp, #0]
1000a810:	47a8      	blx	r5
1000a812:	9000      	str	r0, [sp, #0]
    if (normSF < 2) {
1000a814:	2180      	movs	r1, #128	; 0x80
1000a816:	05c9      	lsls	r1, r1, #23
1000a818:	4b30      	ldr	r3, [pc, #192]	; (1000a8dc <inv_q_normalizef+0x11c>)
1000a81a:	4798      	blx	r3
1000a81c:	2800      	cmp	r0, #0
1000a81e:	d04d      	beq.n	1000a8bc <inv_q_normalizef+0xfc>
        xHalf = 0.5f * normSF;
1000a820:	0035      	movs	r5, r6
1000a822:	21fc      	movs	r1, #252	; 0xfc
1000a824:	0589      	lsls	r1, r1, #22
1000a826:	9800      	ldr	r0, [sp, #0]
1000a828:	47b0      	blx	r6
1000a82a:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a82c:	1c01      	adds	r1, r0, #0
1000a82e:	9800      	ldr	r0, [sp, #0]
1000a830:	47a8      	blx	r5
1000a832:	9900      	ldr	r1, [sp, #0]
1000a834:	47a8      	blx	r5
1000a836:	1c01      	adds	r1, r0, #0
1000a838:	4b29      	ldr	r3, [pc, #164]	; (1000a8e0 <inv_q_normalizef+0x120>)
1000a83a:	469a      	mov	sl, r3
1000a83c:	20ff      	movs	r0, #255	; 0xff
1000a83e:	0580      	lsls	r0, r0, #22
1000a840:	4798      	blx	r3
1000a842:	1c01      	adds	r1, r0, #0
1000a844:	9800      	ldr	r0, [sp, #0]
1000a846:	47a8      	blx	r5
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a848:	9000      	str	r0, [sp, #0]
1000a84a:	1c01      	adds	r1, r0, #0
1000a84c:	1c30      	adds	r0, r6, #0
1000a84e:	47a8      	blx	r5
1000a850:	9900      	ldr	r1, [sp, #0]
1000a852:	47a8      	blx	r5
1000a854:	1c01      	adds	r1, r0, #0
1000a856:	20ff      	movs	r0, #255	; 0xff
1000a858:	0580      	lsls	r0, r0, #22
1000a85a:	47d0      	blx	sl
1000a85c:	1c01      	adds	r1, r0, #0
1000a85e:	9800      	ldr	r0, [sp, #0]
1000a860:	47a8      	blx	r5
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a862:	9000      	str	r0, [sp, #0]
1000a864:	1c01      	adds	r1, r0, #0
1000a866:	1c30      	adds	r0, r6, #0
1000a868:	47a8      	blx	r5
1000a86a:	9900      	ldr	r1, [sp, #0]
1000a86c:	47a8      	blx	r5
1000a86e:	1c01      	adds	r1, r0, #0
1000a870:	20ff      	movs	r0, #255	; 0xff
1000a872:	0580      	lsls	r0, r0, #22
1000a874:	47d0      	blx	sl
1000a876:	1c01      	adds	r1, r0, #0
1000a878:	9800      	ldr	r0, [sp, #0]
1000a87a:	47a8      	blx	r5
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a87c:	9000      	str	r0, [sp, #0]
1000a87e:	1c01      	adds	r1, r0, #0
1000a880:	1c30      	adds	r0, r6, #0
1000a882:	47a8      	blx	r5
1000a884:	9e00      	ldr	r6, [sp, #0]
1000a886:	1c31      	adds	r1, r6, #0
1000a888:	47a8      	blx	r5
1000a88a:	1c01      	adds	r1, r0, #0
1000a88c:	20ff      	movs	r0, #255	; 0xff
1000a88e:	0580      	lsls	r0, r0, #22
1000a890:	47d0      	blx	sl
1000a892:	1c01      	adds	r1, r0, #0
1000a894:	1c30      	adds	r0, r6, #0
1000a896:	47a8      	blx	r5
1000a898:	1c06      	adds	r6, r0, #0
        q[0] *= normSF;
1000a89a:	1c01      	adds	r1, r0, #0
1000a89c:	1c38      	adds	r0, r7, #0
1000a89e:	47a8      	blx	r5
1000a8a0:	6020      	str	r0, [r4, #0]
        q[1] *= normSF;
1000a8a2:	1c31      	adds	r1, r6, #0
1000a8a4:	9803      	ldr	r0, [sp, #12]
1000a8a6:	47a8      	blx	r5
1000a8a8:	6060      	str	r0, [r4, #4]
        q[2] *= normSF;
1000a8aa:	1c31      	adds	r1, r6, #0
1000a8ac:	9801      	ldr	r0, [sp, #4]
1000a8ae:	47a8      	blx	r5
1000a8b0:	60a0      	str	r0, [r4, #8]
        q[3] *= normSF;
1000a8b2:	1c31      	adds	r1, r6, #0
1000a8b4:	9802      	ldr	r0, [sp, #8]
1000a8b6:	47a8      	blx	r5
1000a8b8:	60e0      	str	r0, [r4, #12]
1000a8ba:	e006      	b.n	1000a8ca <inv_q_normalizef+0x10a>
    } else {
        q[0] = 1.0;
1000a8bc:	23fe      	movs	r3, #254	; 0xfe
1000a8be:	059b      	lsls	r3, r3, #22
1000a8c0:	6023      	str	r3, [r4, #0]
        q[1] = 0.0;
1000a8c2:	2300      	movs	r3, #0
1000a8c4:	6063      	str	r3, [r4, #4]
        q[2] = 0.0;
1000a8c6:	60a3      	str	r3, [r4, #8]
        q[3] = 0.0;
1000a8c8:	60e3      	str	r3, [r4, #12]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
}
1000a8ca:	b004      	add	sp, #16
1000a8cc:	bc04      	pop	{r2}
1000a8ce:	4692      	mov	sl, r2
1000a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8d2:	46c0      	nop			; (mov r8, r8)
1000a8d4:	10015f79 	.word	0x10015f79
1000a8d8:	100158f9 	.word	0x100158f9
1000a8dc:	10015695 	.word	0x10015695
1000a8e0:	100161a1 	.word	0x100161a1

1000a8e4 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8e6:	b085      	sub	sp, #20
1000a8e8:	0006      	movs	r6, r0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a8ea:	6807      	ldr	r7, [r0, #0]
1000a8ec:	6843      	ldr	r3, [r0, #4]
1000a8ee:	1c1c      	adds	r4, r3, #0
1000a8f0:	6883      	ldr	r3, [r0, #8]
1000a8f2:	9300      	str	r3, [sp, #0]
1000a8f4:	68c1      	ldr	r1, [r0, #12]
1000a8f6:	9101      	str	r1, [sp, #4]
1000a8f8:	4d28      	ldr	r5, [pc, #160]	; (1000a99c <inv_q_norm4+0xb8>)
1000a8fa:	1c39      	adds	r1, r7, #0
1000a8fc:	1c38      	adds	r0, r7, #0
1000a8fe:	47a8      	blx	r5
1000a900:	9003      	str	r0, [sp, #12]
1000a902:	1c21      	adds	r1, r4, #0
1000a904:	9402      	str	r4, [sp, #8]
1000a906:	1c20      	adds	r0, r4, #0
1000a908:	47a8      	blx	r5
1000a90a:	1c01      	adds	r1, r0, #0
1000a90c:	4c24      	ldr	r4, [pc, #144]	; (1000a9a0 <inv_q_norm4+0xbc>)
1000a90e:	9803      	ldr	r0, [sp, #12]
1000a910:	47a0      	blx	r4
1000a912:	9003      	str	r0, [sp, #12]
1000a914:	9a00      	ldr	r2, [sp, #0]
1000a916:	1c11      	adds	r1, r2, #0
1000a918:	1c10      	adds	r0, r2, #0
1000a91a:	47a8      	blx	r5
1000a91c:	1c01      	adds	r1, r0, #0
1000a91e:	9803      	ldr	r0, [sp, #12]
1000a920:	47a0      	blx	r4
1000a922:	9003      	str	r0, [sp, #12]
1000a924:	1c39      	adds	r1, r7, #0
1000a926:	1c38      	adds	r0, r7, #0
1000a928:	47a8      	blx	r5
1000a92a:	1c07      	adds	r7, r0, #0
1000a92c:	9802      	ldr	r0, [sp, #8]
1000a92e:	1c01      	adds	r1, r0, #0
1000a930:	47a8      	blx	r5
1000a932:	1c01      	adds	r1, r0, #0
1000a934:	1c38      	adds	r0, r7, #0
1000a936:	47a0      	blx	r4
1000a938:	1c07      	adds	r7, r0, #0
1000a93a:	9800      	ldr	r0, [sp, #0]
1000a93c:	1c01      	adds	r1, r0, #0
1000a93e:	47a8      	blx	r5
1000a940:	1c01      	adds	r1, r0, #0
1000a942:	1c38      	adds	r0, r7, #0
1000a944:	47a0      	blx	r4
1000a946:	1c07      	adds	r7, r0, #0
1000a948:	9801      	ldr	r0, [sp, #4]
1000a94a:	1c01      	adds	r1, r0, #0
1000a94c:	47a8      	blx	r5
1000a94e:	1c01      	adds	r1, r0, #0
1000a950:	1c38      	adds	r0, r7, #0
1000a952:	47a0      	blx	r4
1000a954:	4b13      	ldr	r3, [pc, #76]	; (1000a9a4 <inv_q_norm4+0xc0>)
1000a956:	4798      	blx	r3
1000a958:	1c04      	adds	r4, r0, #0
    if (mag) {
1000a95a:	2100      	movs	r1, #0
1000a95c:	4b12      	ldr	r3, [pc, #72]	; (1000a9a8 <inv_q_norm4+0xc4>)
1000a95e:	4798      	blx	r3
1000a960:	2800      	cmp	r0, #0
1000a962:	d111      	bne.n	1000a988 <inv_q_norm4+0xa4>
        q[0] /= mag;
1000a964:	4d11      	ldr	r5, [pc, #68]	; (1000a9ac <inv_q_norm4+0xc8>)
1000a966:	1c21      	adds	r1, r4, #0
1000a968:	6830      	ldr	r0, [r6, #0]
1000a96a:	47a8      	blx	r5
1000a96c:	6030      	str	r0, [r6, #0]
        q[1] /= mag;
1000a96e:	1c21      	adds	r1, r4, #0
1000a970:	6870      	ldr	r0, [r6, #4]
1000a972:	47a8      	blx	r5
1000a974:	6070      	str	r0, [r6, #4]
        q[2] /= mag;
1000a976:	1c21      	adds	r1, r4, #0
1000a978:	68b0      	ldr	r0, [r6, #8]
1000a97a:	47a8      	blx	r5
1000a97c:	60b0      	str	r0, [r6, #8]
        q[3] /= mag;
1000a97e:	1c21      	adds	r1, r4, #0
1000a980:	68f0      	ldr	r0, [r6, #12]
1000a982:	47a8      	blx	r5
1000a984:	60f0      	str	r0, [r6, #12]
1000a986:	e006      	b.n	1000a996 <inv_q_norm4+0xb2>
    } else {
        q[0] = 1.f;
1000a988:	23fe      	movs	r3, #254	; 0xfe
1000a98a:	059b      	lsls	r3, r3, #22
1000a98c:	6033      	str	r3, [r6, #0]
        q[1] = 0.f;
1000a98e:	2300      	movs	r3, #0
1000a990:	6073      	str	r3, [r6, #4]
        q[2] = 0.f;
1000a992:	60b3      	str	r3, [r6, #8]
        q[3] = 0.f;
1000a994:	60f3      	str	r3, [r6, #12]
    }
}
1000a996:	b005      	add	sp, #20
1000a998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a99a:	46c0      	nop			; (mov r8, r8)
1000a99c:	10015f79 	.word	0x10015f79
1000a9a0:	100158f9 	.word	0x100158f9
1000a9a4:	10010e21 	.word	0x10010e21
1000a9a8:	10015689 	.word	0x10015689
1000a9ac:	10015be5 	.word	0x10015be5

1000a9b0 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a9b0:	6803      	ldr	r3, [r0, #0]
1000a9b2:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a9b4:	6843      	ldr	r3, [r0, #4]
1000a9b6:	2280      	movs	r2, #128	; 0x80
1000a9b8:	0612      	lsls	r2, r2, #24
1000a9ba:	4694      	mov	ip, r2
1000a9bc:	4463      	add	r3, ip
1000a9be:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a9c0:	6883      	ldr	r3, [r0, #8]
1000a9c2:	4463      	add	r3, ip
1000a9c4:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a9c6:	68c3      	ldr	r3, [r0, #12]
1000a9c8:	4463      	add	r3, ip
1000a9ca:	60cb      	str	r3, [r1, #12]
}
1000a9cc:	4770      	bx	lr
1000a9ce:	46c0      	nop			; (mov r8, r8)

1000a9d0 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9d2:	464f      	mov	r7, r9
1000a9d4:	b480      	push	{r7}
1000a9d6:	b082      	sub	sp, #8
1000a9d8:	0004      	movs	r4, r0
1000a9da:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a9dc:	6843      	ldr	r3, [r0, #4]
1000a9de:	4699      	mov	r9, r3
1000a9e0:	17db      	asrs	r3, r3, #31
1000a9e2:	9301      	str	r3, [sp, #4]
1000a9e4:	6802      	ldr	r2, [r0, #0]
1000a9e6:	17d1      	asrs	r1, r2, #31
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1000a9e8:	4d67      	ldr	r5, [pc, #412]	; (1000ab88 <inv_quaternion_to_rotation+0x1b8>)
1000a9ea:	000b      	movs	r3, r1
1000a9ec:	0010      	movs	r0, r2
1000a9ee:	47a8      	blx	r5
1000a9f0:	00c9      	lsls	r1, r1, #3
1000a9f2:	0f47      	lsrs	r7, r0, #29
1000a9f4:	430f      	orrs	r7, r1
1000a9f6:	464a      	mov	r2, r9
1000a9f8:	9901      	ldr	r1, [sp, #4]
1000a9fa:	000b      	movs	r3, r1
1000a9fc:	4648      	mov	r0, r9
1000a9fe:	47a8      	blx	r5
1000aa00:	00c9      	lsls	r1, r1, #3
1000aa02:	0f40      	lsrs	r0, r0, #29
1000aa04:	4308      	orrs	r0, r1
1000aa06:	1838      	adds	r0, r7, r0
1000aa08:	23c0      	movs	r3, #192	; 0xc0
1000aa0a:	061b      	lsls	r3, r3, #24
1000aa0c:	469c      	mov	ip, r3
1000aa0e:	4460      	add	r0, ip
1000aa10:	6030      	str	r0, [r6, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1000aa12:	6863      	ldr	r3, [r4, #4]
1000aa14:	17d9      	asrs	r1, r3, #31
1000aa16:	68a3      	ldr	r3, [r4, #8]
1000aa18:	17db      	asrs	r3, r3, #31
1000aa1a:	68a2      	ldr	r2, [r4, #8]
1000aa1c:	6860      	ldr	r0, [r4, #4]
1000aa1e:	47a8      	blx	r5
1000aa20:	00c9      	lsls	r1, r1, #3
1000aa22:	0f47      	lsrs	r7, r0, #29
1000aa24:	430f      	orrs	r7, r1
1000aa26:	68e3      	ldr	r3, [r4, #12]
1000aa28:	17d9      	asrs	r1, r3, #31
1000aa2a:	6823      	ldr	r3, [r4, #0]
1000aa2c:	17db      	asrs	r3, r3, #31
1000aa2e:	6822      	ldr	r2, [r4, #0]
1000aa30:	68e0      	ldr	r0, [r4, #12]
1000aa32:	47a8      	blx	r5
1000aa34:	00c9      	lsls	r1, r1, #3
1000aa36:	0f40      	lsrs	r0, r0, #29
1000aa38:	4308      	orrs	r0, r1
1000aa3a:	1a3f      	subs	r7, r7, r0
1000aa3c:	6077      	str	r7, [r6, #4]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1000aa3e:	68a3      	ldr	r3, [r4, #8]
1000aa40:	17d9      	asrs	r1, r3, #31
1000aa42:	6823      	ldr	r3, [r4, #0]
1000aa44:	17db      	asrs	r3, r3, #31
1000aa46:	6822      	ldr	r2, [r4, #0]
1000aa48:	68a0      	ldr	r0, [r4, #8]
1000aa4a:	47a8      	blx	r5
1000aa4c:	00c9      	lsls	r1, r1, #3
1000aa4e:	0f47      	lsrs	r7, r0, #29
1000aa50:	430f      	orrs	r7, r1
1000aa52:	6863      	ldr	r3, [r4, #4]
1000aa54:	17d9      	asrs	r1, r3, #31
1000aa56:	68e3      	ldr	r3, [r4, #12]
1000aa58:	17db      	asrs	r3, r3, #31
1000aa5a:	68e2      	ldr	r2, [r4, #12]
1000aa5c:	6860      	ldr	r0, [r4, #4]
1000aa5e:	47a8      	blx	r5
1000aa60:	00c9      	lsls	r1, r1, #3
1000aa62:	0f40      	lsrs	r0, r0, #29
1000aa64:	4308      	orrs	r0, r1
1000aa66:	1838      	adds	r0, r7, r0
1000aa68:	60b0      	str	r0, [r6, #8]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1000aa6a:	68e3      	ldr	r3, [r4, #12]
1000aa6c:	17d9      	asrs	r1, r3, #31
1000aa6e:	6823      	ldr	r3, [r4, #0]
1000aa70:	17db      	asrs	r3, r3, #31
1000aa72:	6822      	ldr	r2, [r4, #0]
1000aa74:	68e0      	ldr	r0, [r4, #12]
1000aa76:	47a8      	blx	r5
1000aa78:	00c9      	lsls	r1, r1, #3
1000aa7a:	0f47      	lsrs	r7, r0, #29
1000aa7c:	430f      	orrs	r7, r1
1000aa7e:	6863      	ldr	r3, [r4, #4]
1000aa80:	17d9      	asrs	r1, r3, #31
1000aa82:	68a3      	ldr	r3, [r4, #8]
1000aa84:	17db      	asrs	r3, r3, #31
1000aa86:	68a2      	ldr	r2, [r4, #8]
1000aa88:	6860      	ldr	r0, [r4, #4]
1000aa8a:	47a8      	blx	r5
1000aa8c:	00c9      	lsls	r1, r1, #3
1000aa8e:	0f40      	lsrs	r0, r0, #29
1000aa90:	4308      	orrs	r0, r1
1000aa92:	1838      	adds	r0, r7, r0
1000aa94:	60f0      	str	r0, [r6, #12]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000aa96:	68a3      	ldr	r3, [r4, #8]
1000aa98:	4699      	mov	r9, r3
1000aa9a:	17db      	asrs	r3, r3, #31
1000aa9c:	9301      	str	r3, [sp, #4]
1000aa9e:	6822      	ldr	r2, [r4, #0]
1000aaa0:	17d1      	asrs	r1, r2, #31
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000aaa2:	000b      	movs	r3, r1
1000aaa4:	0010      	movs	r0, r2
1000aaa6:	47a8      	blx	r5
1000aaa8:	00c9      	lsls	r1, r1, #3
1000aaaa:	0f47      	lsrs	r7, r0, #29
1000aaac:	430f      	orrs	r7, r1
1000aaae:	464a      	mov	r2, r9
1000aab0:	9901      	ldr	r1, [sp, #4]
1000aab2:	000b      	movs	r3, r1
1000aab4:	4648      	mov	r0, r9
1000aab6:	47a8      	blx	r5
1000aab8:	00c9      	lsls	r1, r1, #3
1000aaba:	0f40      	lsrs	r0, r0, #29
1000aabc:	4308      	orrs	r0, r1
1000aabe:	1838      	adds	r0, r7, r0
1000aac0:	23c0      	movs	r3, #192	; 0xc0
1000aac2:	061b      	lsls	r3, r3, #24
1000aac4:	469c      	mov	ip, r3
1000aac6:	4460      	add	r0, ip
1000aac8:	6130      	str	r0, [r6, #16]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1000aaca:	68a3      	ldr	r3, [r4, #8]
1000aacc:	17d9      	asrs	r1, r3, #31
1000aace:	68e3      	ldr	r3, [r4, #12]
1000aad0:	17db      	asrs	r3, r3, #31
1000aad2:	68e2      	ldr	r2, [r4, #12]
1000aad4:	68a0      	ldr	r0, [r4, #8]
1000aad6:	47a8      	blx	r5
1000aad8:	00c9      	lsls	r1, r1, #3
1000aada:	0f47      	lsrs	r7, r0, #29
1000aadc:	430f      	orrs	r7, r1
1000aade:	6863      	ldr	r3, [r4, #4]
1000aae0:	17d9      	asrs	r1, r3, #31
1000aae2:	6823      	ldr	r3, [r4, #0]
1000aae4:	17db      	asrs	r3, r3, #31
1000aae6:	6822      	ldr	r2, [r4, #0]
1000aae8:	6860      	ldr	r0, [r4, #4]
1000aaea:	47a8      	blx	r5
1000aaec:	00c9      	lsls	r1, r1, #3
1000aaee:	0f40      	lsrs	r0, r0, #29
1000aaf0:	4308      	orrs	r0, r1
1000aaf2:	1a3f      	subs	r7, r7, r0
1000aaf4:	6177      	str	r7, [r6, #20]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1000aaf6:	6863      	ldr	r3, [r4, #4]
1000aaf8:	17d9      	asrs	r1, r3, #31
1000aafa:	68e3      	ldr	r3, [r4, #12]
1000aafc:	17db      	asrs	r3, r3, #31
1000aafe:	68e2      	ldr	r2, [r4, #12]
1000ab00:	6860      	ldr	r0, [r4, #4]
1000ab02:	47a8      	blx	r5
1000ab04:	00c9      	lsls	r1, r1, #3
1000ab06:	0f47      	lsrs	r7, r0, #29
1000ab08:	430f      	orrs	r7, r1
1000ab0a:	68a3      	ldr	r3, [r4, #8]
1000ab0c:	17d9      	asrs	r1, r3, #31
1000ab0e:	6823      	ldr	r3, [r4, #0]
1000ab10:	17db      	asrs	r3, r3, #31
1000ab12:	6822      	ldr	r2, [r4, #0]
1000ab14:	68a0      	ldr	r0, [r4, #8]
1000ab16:	47a8      	blx	r5
1000ab18:	00c9      	lsls	r1, r1, #3
1000ab1a:	0f40      	lsrs	r0, r0, #29
1000ab1c:	4308      	orrs	r0, r1
1000ab1e:	1a3f      	subs	r7, r7, r0
1000ab20:	61b7      	str	r7, [r6, #24]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1000ab22:	6863      	ldr	r3, [r4, #4]
1000ab24:	17d9      	asrs	r1, r3, #31
1000ab26:	6823      	ldr	r3, [r4, #0]
1000ab28:	17db      	asrs	r3, r3, #31
1000ab2a:	6822      	ldr	r2, [r4, #0]
1000ab2c:	6860      	ldr	r0, [r4, #4]
1000ab2e:	47a8      	blx	r5
1000ab30:	00c9      	lsls	r1, r1, #3
1000ab32:	0f47      	lsrs	r7, r0, #29
1000ab34:	430f      	orrs	r7, r1
1000ab36:	68a3      	ldr	r3, [r4, #8]
1000ab38:	17d9      	asrs	r1, r3, #31
1000ab3a:	68e3      	ldr	r3, [r4, #12]
1000ab3c:	17db      	asrs	r3, r3, #31
1000ab3e:	68e2      	ldr	r2, [r4, #12]
1000ab40:	68a0      	ldr	r0, [r4, #8]
1000ab42:	47a8      	blx	r5
1000ab44:	00c9      	lsls	r1, r1, #3
1000ab46:	0f40      	lsrs	r0, r0, #29
1000ab48:	4308      	orrs	r0, r1
1000ab4a:	1838      	adds	r0, r7, r0
1000ab4c:	61f0      	str	r0, [r6, #28]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000ab4e:	68e7      	ldr	r7, [r4, #12]
1000ab50:	17fb      	asrs	r3, r7, #31
1000ab52:	9301      	str	r3, [sp, #4]
1000ab54:	6820      	ldr	r0, [r4, #0]
1000ab56:	17c1      	asrs	r1, r0, #31
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1000ab58:	0002      	movs	r2, r0
1000ab5a:	000b      	movs	r3, r1
1000ab5c:	47a8      	blx	r5
1000ab5e:	00c9      	lsls	r1, r1, #3
1000ab60:	0f44      	lsrs	r4, r0, #29
1000ab62:	430c      	orrs	r4, r1
1000ab64:	003a      	movs	r2, r7
1000ab66:	9901      	ldr	r1, [sp, #4]
1000ab68:	000b      	movs	r3, r1
1000ab6a:	0038      	movs	r0, r7
1000ab6c:	47a8      	blx	r5
1000ab6e:	00c9      	lsls	r1, r1, #3
1000ab70:	0f40      	lsrs	r0, r0, #29
1000ab72:	4308      	orrs	r0, r1
1000ab74:	1820      	adds	r0, r4, r0
1000ab76:	23c0      	movs	r3, #192	; 0xc0
1000ab78:	061b      	lsls	r3, r3, #24
1000ab7a:	469c      	mov	ip, r3
1000ab7c:	4460      	add	r0, ip
1000ab7e:	6230      	str	r0, [r6, #32]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1000ab80:	b002      	add	sp, #8
1000ab82:	bc04      	pop	{r2}
1000ab84:	4691      	mov	r9, r2
1000ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab88:	1001572d 	.word	0x1001572d

1000ab8c <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab8e:	0005      	movs	r5, r0
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000ab90:	4f06      	ldr	r7, [pc, #24]	; (1000abac <inv_orientation_matrix_to_scalar+0x20>)
1000ab92:	47b8      	blx	r7
1000ab94:	0004      	movs	r4, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1000ab96:	1ce8      	adds	r0, r5, #3
1000ab98:	47b8      	blx	r7
1000ab9a:	0006      	movs	r6, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1000ab9c:	1da8      	adds	r0, r5, #6
1000ab9e:	47b8      	blx	r7
1000aba0:	00f6      	lsls	r6, r6, #3
1000aba2:	0180      	lsls	r0, r0, #6
1000aba4:	4330      	orrs	r0, r6
1000aba6:	4304      	orrs	r4, r0


    return scalar;
1000aba8:	b2a0      	uxth	r0, r4
}
1000abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000abac:	1000a2c1 	.word	0x1000a2c1

1000abb0 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abb2:	464f      	mov	r7, r9
1000abb4:	4646      	mov	r6, r8
1000abb6:	b4c0      	push	{r6, r7}
1000abb8:	b083      	sub	sp, #12
1000abba:	0004      	movs	r4, r0
1000abbc:	000d      	movs	r5, r1
1000abbe:	0016      	movs	r6, r2
1000abc0:	4698      	mov	r8, r3
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000abc2:	2303      	movs	r3, #3
1000abc4:	4003      	ands	r3, r0
1000abc6:	009b      	lsls	r3, r3, #2
1000abc8:	589b      	ldr	r3, [r3, r2]
1000abca:	0740      	lsls	r0, r0, #29
1000abcc:	17c0      	asrs	r0, r0, #31
1000abce:	2201      	movs	r2, #1
1000abd0:	4310      	orrs	r0, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000abd2:	17ca      	asrs	r2, r1, #31
1000abd4:	0017      	movs	r7, r2
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000abd6:	4358      	muls	r0, r3
1000abd8:	17c1      	asrs	r1, r0, #31
1000abda:	002a      	movs	r2, r5
1000abdc:	9701      	str	r7, [sp, #4]
1000abde:	003b      	movs	r3, r7
1000abe0:	4f18      	ldr	r7, [pc, #96]	; (1000ac44 <inv_convert_to_body_with_scale+0x94>)
1000abe2:	47b8      	blx	r7
1000abe4:	0089      	lsls	r1, r1, #2
1000abe6:	0f80      	lsrs	r0, r0, #30
1000abe8:	4308      	orrs	r0, r1
1000abea:	4643      	mov	r3, r8
1000abec:	6018      	str	r0, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000abee:	06e3      	lsls	r3, r4, #27
1000abf0:	0f9b      	lsrs	r3, r3, #30
1000abf2:	009b      	lsls	r3, r3, #2
1000abf4:	599b      	ldr	r3, [r3, r6]
1000abf6:	06a0      	lsls	r0, r4, #26
1000abf8:	17c0      	asrs	r0, r0, #31
1000abfa:	2201      	movs	r2, #1
1000abfc:	4310      	orrs	r0, r2
1000abfe:	4358      	muls	r0, r3
1000ac00:	17c1      	asrs	r1, r0, #31
1000ac02:	002a      	movs	r2, r5
1000ac04:	9b01      	ldr	r3, [sp, #4]
1000ac06:	47b8      	blx	r7
1000ac08:	0089      	lsls	r1, r1, #2
1000ac0a:	0f80      	lsrs	r0, r0, #30
1000ac0c:	4308      	orrs	r0, r1
1000ac0e:	4642      	mov	r2, r8
1000ac10:	6050      	str	r0, [r2, #4]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000ac12:	0623      	lsls	r3, r4, #24
1000ac14:	0f9b      	lsrs	r3, r3, #30
1000ac16:	009b      	lsls	r3, r3, #2
1000ac18:	599b      	ldr	r3, [r3, r6]
1000ac1a:	05e4      	lsls	r4, r4, #23
1000ac1c:	17e4      	asrs	r4, r4, #31
1000ac1e:	2001      	movs	r0, #1
1000ac20:	4304      	orrs	r4, r0
1000ac22:	0018      	movs	r0, r3
1000ac24:	4360      	muls	r0, r4
1000ac26:	17c1      	asrs	r1, r0, #31
1000ac28:	002a      	movs	r2, r5
1000ac2a:	9b01      	ldr	r3, [sp, #4]
1000ac2c:	47b8      	blx	r7
1000ac2e:	0089      	lsls	r1, r1, #2
1000ac30:	0f80      	lsrs	r0, r0, #30
1000ac32:	4308      	orrs	r0, r1
1000ac34:	4643      	mov	r3, r8
1000ac36:	6098      	str	r0, [r3, #8]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1000ac38:	b003      	add	sp, #12
1000ac3a:	bc0c      	pop	{r2, r3}
1000ac3c:	4690      	mov	r8, r2
1000ac3e:	4699      	mov	r9, r3
1000ac40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac42:	46c0      	nop			; (mov r8, r8)
1000ac44:	1001572d 	.word	0x1001572d

1000ac48 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1000ac48:	b510      	push	{r4, lr}
    inv_init_storage_manager();
1000ac4a:	4b0d      	ldr	r3, [pc, #52]	; (1000ac80 <inv_init_mpl+0x38>)
1000ac4c:	4798      	blx	r3

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1000ac4e:	4b0d      	ldr	r3, [pc, #52]	; (1000ac84 <inv_init_mpl+0x3c>)
1000ac50:	4798      	blx	r3
1000ac52:	2800      	cmp	r0, #0
1000ac54:	d003      	beq.n	1000ac5e <inv_init_mpl+0x16>
1000ac56:	4c0b      	ldr	r4, [pc, #44]	; (1000ac84 <inv_init_mpl+0x3c>)
1000ac58:	47a0      	blx	r4
1000ac5a:	47a0      	blx	r4
1000ac5c:	e00e      	b.n	1000ac7c <inv_init_mpl+0x34>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1000ac5e:	4b0a      	ldr	r3, [pc, #40]	; (1000ac88 <inv_init_mpl+0x40>)
1000ac60:	4798      	blx	r3
1000ac62:	2800      	cmp	r0, #0
1000ac64:	d003      	beq.n	1000ac6e <inv_init_mpl+0x26>
1000ac66:	4c08      	ldr	r4, [pc, #32]	; (1000ac88 <inv_init_mpl+0x40>)
1000ac68:	47a0      	blx	r4
1000ac6a:	47a0      	blx	r4
1000ac6c:	e006      	b.n	1000ac7c <inv_init_mpl+0x34>

    INV_ERROR_CHECK(inv_enable_results_holder());
1000ac6e:	4b07      	ldr	r3, [pc, #28]	; (1000ac8c <inv_init_mpl+0x44>)
1000ac70:	4798      	blx	r3
1000ac72:	2800      	cmp	r0, #0
1000ac74:	d002      	beq.n	1000ac7c <inv_init_mpl+0x34>
1000ac76:	4c05      	ldr	r4, [pc, #20]	; (1000ac8c <inv_init_mpl+0x44>)
1000ac78:	47a0      	blx	r4
1000ac7a:	47a0      	blx	r4

    return INV_SUCCESS;
}
1000ac7c:	bd10      	pop	{r4, pc}
1000ac7e:	46c0      	nop			; (mov r8, r8)
1000ac80:	1000afbd 	.word	0x1000afbd
1000ac84:	1000aee5 	.word	0x1000aee5
1000ac88:	1000a261 	.word	0x1000a261
1000ac8c:	1000ae61 	.word	0x1000ae61

1000ac90 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1000ac90:	b510      	push	{r4, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1000ac92:	4b04      	ldr	r3, [pc, #16]	; (1000aca4 <inv_start_mpl+0x14>)
1000ac94:	4798      	blx	r3
1000ac96:	2800      	cmp	r0, #0
1000ac98:	d002      	beq.n	1000aca0 <inv_start_mpl+0x10>
1000ac9a:	4c02      	ldr	r4, [pc, #8]	; (1000aca4 <inv_start_mpl+0x14>)
1000ac9c:	47a0      	blx	r4
1000ac9e:	47a0      	blx	r4
    return INV_SUCCESS;
}
1000aca0:	bd10      	pop	{r4, pc}
1000aca2:	46c0      	nop			; (mov r8, r8)
1000aca4:	1000af85 	.word	0x1000af85

1000aca8 <inv_generate_results>:
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
    rh.sensor = sensor_cal;
1000aca8:	2380      	movs	r3, #128	; 0x80
1000acaa:	4a02      	ldr	r2, [pc, #8]	; (1000acb4 <inv_generate_results+0xc>)
1000acac:	50d0      	str	r0, [r2, r3]
    return INV_SUCCESS;
}
1000acae:	2000      	movs	r0, #0
1000acb0:	4770      	bx	lr
1000acb2:	46c0      	nop			; (mov r8, r8)
1000acb4:	1001bd18 	.word	0x1001bd18

1000acb8 <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1000acb8:	b510      	push	{r4, lr}
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000acba:	2207      	movs	r2, #7
1000acbc:	21c8      	movs	r1, #200	; 0xc8
1000acbe:	0089      	lsls	r1, r1, #2
1000acc0:	4802      	ldr	r0, [pc, #8]	; (1000accc <inv_start_results_holder+0x14>)
1000acc2:	4b03      	ldr	r3, [pc, #12]	; (1000acd0 <inv_start_results_holder+0x18>)
1000acc4:	4798      	blx	r3
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
}
1000acc6:	2000      	movs	r0, #0
1000acc8:	bd10      	pop	{r4, pc}
1000acca:	46c0      	nop			; (mov r8, r8)
1000accc:	1000aca9 	.word	0x1000aca9
1000acd0:	1000a045 	.word	0x1000a045

1000acd4 <inv_store_gaming_quaternion>:
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000acd4:	b570      	push	{r4, r5, r6, lr}
1000acd6:	0006      	movs	r6, r0
1000acd8:	000d      	movs	r5, r1
    rh.status |= INV_6_AXIS_QUAT_SET;
1000acda:	4c06      	ldr	r4, [pc, #24]	; (1000acf4 <inv_store_gaming_quaternion+0x20>)
1000acdc:	2302      	movs	r3, #2
1000acde:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1000ace0:	4313      	orrs	r3, r2
1000ace2:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000ace4:	0020      	movs	r0, r4
1000ace6:	3010      	adds	r0, #16
1000ace8:	2210      	movs	r2, #16
1000acea:	0031      	movs	r1, r6
1000acec:	4b02      	ldr	r3, [pc, #8]	; (1000acf8 <inv_store_gaming_quaternion+0x24>)
1000acee:	4798      	blx	r3
    rh.gam_timestamp = timestamp;
1000acf0:	6265      	str	r5, [r4, #36]	; 0x24
}
1000acf2:	bd70      	pop	{r4, r5, r6, pc}
1000acf4:	1001bd18 	.word	0x1001bd18
1000acf8:	10018623 	.word	0x10018623

1000acfc <inv_set_compass_correction>:
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000acfc:	b570      	push	{r4, r5, r6, lr}
1000acfe:	0006      	movs	r6, r0
1000ad00:	000d      	movs	r5, r1
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000ad02:	4c06      	ldr	r4, [pc, #24]	; (1000ad1c <inv_set_compass_correction+0x20>)
1000ad04:	2301      	movs	r3, #1
1000ad06:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1000ad08:	4313      	orrs	r3, r2
1000ad0a:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000ad0c:	0020      	movs	r0, r4
1000ad0e:	3040      	adds	r0, #64	; 0x40
1000ad10:	2210      	movs	r2, #16
1000ad12:	0031      	movs	r1, r6
1000ad14:	4b02      	ldr	r3, [pc, #8]	; (1000ad20 <inv_set_compass_correction+0x24>)
1000ad16:	4798      	blx	r3
    rh.nav_timestamp = timestamp;
1000ad18:	6225      	str	r5, [r4, #32]
}
1000ad1a:	bd70      	pop	{r4, r5, r6, pc}
1000ad1c:	1001bd18 	.word	0x1001bd18
1000ad20:	10018623 	.word	0x10018623

1000ad24 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000ad24:	b570      	push	{r4, r5, r6, lr}
1000ad26:	000d      	movs	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000ad28:	4c04      	ldr	r4, [pc, #16]	; (1000ad3c <inv_get_compass_correction+0x18>)
1000ad2a:	0021      	movs	r1, r4
1000ad2c:	3140      	adds	r1, #64	; 0x40
1000ad2e:	2210      	movs	r2, #16
1000ad30:	4b03      	ldr	r3, [pc, #12]	; (1000ad40 <inv_get_compass_correction+0x1c>)
1000ad32:	4798      	blx	r3
    *timestamp = rh.nav_timestamp;
1000ad34:	6a23      	ldr	r3, [r4, #32]
1000ad36:	602b      	str	r3, [r5, #0]
}
1000ad38:	bd70      	pop	{r4, r5, r6, pc}
1000ad3a:	46c0      	nop			; (mov r8, r8)
1000ad3c:	1001bd18 	.word	0x1001bd18
1000ad40:	10018623 	.word	0x10018623

1000ad44 <inv_get_acc_state>:
/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
    return rh.acc_state;
1000ad44:	4b01      	ldr	r3, [pc, #4]	; (1000ad4c <inv_get_acc_state+0x8>)
1000ad46:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
1000ad48:	4770      	bx	lr
1000ad4a:	46c0      	nop			; (mov r8, r8)
1000ad4c:	1001bd18 	.word	0x1001bd18

1000ad50 <inv_get_motion_state>:
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
    *cntr = rh.motion_state_counter;
1000ad50:	4b02      	ldr	r3, [pc, #8]	; (1000ad5c <inv_get_motion_state+0xc>)
1000ad52:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000ad54:	6002      	str	r2, [r0, #0]
    return rh.motion_state;
1000ad56:	2264      	movs	r2, #100	; 0x64
1000ad58:	5c98      	ldrb	r0, [r3, r2]
}
1000ad5a:	4770      	bx	lr
1000ad5c:	1001bd18 	.word	0x1001bd18

1000ad60 <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1000ad60:	b510      	push	{r4, lr}
    long set;
    if (state == rh.motion_state) {
1000ad62:	2364      	movs	r3, #100	; 0x64
1000ad64:	4a0e      	ldr	r2, [pc, #56]	; (1000ada0 <inv_set_motion_state+0x40>)
1000ad66:	5cd3      	ldrb	r3, [r2, r3]
1000ad68:	4283      	cmp	r3, r0
1000ad6a:	d109      	bne.n	1000ad80 <inv_set_motion_state+0x20>
        if (state == INV_NO_MOTION) {
1000ad6c:	2b02      	cmp	r3, #2
1000ad6e:	d103      	bne.n	1000ad78 <inv_set_motion_state+0x18>
            rh.motion_state_counter++;
1000ad70:	6e93      	ldr	r3, [r2, #104]	; 0x68
1000ad72:	3301      	adds	r3, #1
1000ad74:	6693      	str	r3, [r2, #104]	; 0x68
1000ad76:	e011      	b.n	1000ad9c <inv_set_motion_state+0x3c>
        } else {
            rh.motion_state_counter = 0;
1000ad78:	2200      	movs	r2, #0
1000ad7a:	4b09      	ldr	r3, [pc, #36]	; (1000ada0 <inv_set_motion_state+0x40>)
1000ad7c:	669a      	str	r2, [r3, #104]	; 0x68
1000ad7e:	e00d      	b.n	1000ad9c <inv_set_motion_state+0x3c>
        }
        return;
    }
    rh.motion_state_counter = 0;
1000ad80:	4b07      	ldr	r3, [pc, #28]	; (1000ada0 <inv_set_motion_state+0x40>)
1000ad82:	2200      	movs	r2, #0
1000ad84:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
1000ad86:	3264      	adds	r2, #100	; 0x64
1000ad88:	5498      	strb	r0, [r3, r2]
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000ad8a:	3801      	subs	r0, #1
1000ad8c:	4243      	negs	r3, r0
1000ad8e:	4143      	adcs	r3, r0
1000ad90:	2002      	movs	r0, #2
1000ad92:	1ac0      	subs	r0, r0, r3
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000ad94:	2200      	movs	r2, #0
1000ad96:	2103      	movs	r1, #3
1000ad98:	4b02      	ldr	r3, [pc, #8]	; (1000ada4 <inv_set_motion_state+0x44>)
1000ad9a:	4798      	blx	r3
}
1000ad9c:	bd10      	pop	{r4, pc}
1000ad9e:	46c0      	nop			; (mov r8, r8)
1000ada0:	1001bd18 	.word	0x1001bd18
1000ada4:	1000a2ad 	.word	0x1000a2ad

1000ada8 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1000ada8:	b510      	push	{r4, lr}
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1000adaa:	220c      	movs	r2, #12
1000adac:	4902      	ldr	r1, [pc, #8]	; (1000adb8 <inv_get_local_field+0x10>)
1000adae:	3128      	adds	r1, #40	; 0x28
1000adb0:	4b02      	ldr	r3, [pc, #8]	; (1000adbc <inv_get_local_field+0x14>)
1000adb2:	4798      	blx	r3
}
1000adb4:	bd10      	pop	{r4, pc}
1000adb6:	46c0      	nop			; (mov r8, r8)
1000adb8:	1001bd18 	.word	0x1001bd18
1000adbc:	10018623 	.word	0x10018623

1000adc0 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000adc2:	0006      	movs	r6, r0
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000adc4:	4c11      	ldr	r4, [pc, #68]	; (1000ae0c <inv_get_gravity+0x4c>)
1000adc6:	68e1      	ldr	r1, [r4, #12]
1000adc8:	6860      	ldr	r0, [r4, #4]
1000adca:	4d11      	ldr	r5, [pc, #68]	; (1000ae10 <inv_get_gravity+0x50>)
1000adcc:	47a8      	blx	r5
1000adce:	0007      	movs	r7, r0
1000add0:	6821      	ldr	r1, [r4, #0]
1000add2:	68a0      	ldr	r0, [r4, #8]
1000add4:	47a8      	blx	r5
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1000add6:	1a3f      	subs	r7, r7, r0
1000add8:	6037      	str	r7, [r6, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1000adda:	68e1      	ldr	r1, [r4, #12]
1000addc:	68a0      	ldr	r0, [r4, #8]
1000adde:	47a8      	blx	r5
1000ade0:	0007      	movs	r7, r0
1000ade2:	6821      	ldr	r1, [r4, #0]
1000ade4:	6860      	ldr	r0, [r4, #4]
1000ade6:	47a8      	blx	r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1000ade8:	1838      	adds	r0, r7, r0
1000adea:	6070      	str	r0, [r6, #4]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1000adec:	68e1      	ldr	r1, [r4, #12]
1000adee:	0008      	movs	r0, r1
1000adf0:	47a8      	blx	r5
1000adf2:	0007      	movs	r7, r0
1000adf4:	6820      	ldr	r0, [r4, #0]
1000adf6:	0001      	movs	r1, r0
1000adf8:	47a8      	blx	r5
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1000adfa:	1838      	adds	r0, r7, r0
1000adfc:	23c0      	movs	r3, #192	; 0xc0
1000adfe:	061b      	lsls	r3, r3, #24
1000ae00:	469c      	mov	ip, r3
1000ae02:	4460      	add	r0, ip
1000ae04:	60b0      	str	r0, [r6, #8]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
}
1000ae06:	2000      	movs	r0, #0
1000ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ae0a:	46c0      	nop			; (mov r8, r8)
1000ae0c:	1001bd18 	.word	0x1001bd18
1000ae10:	1000a30d 	.word	0x1000a30d

1000ae14 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1000ae14:	b510      	push	{r4, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1000ae16:	2210      	movs	r2, #16
1000ae18:	4902      	ldr	r1, [pc, #8]	; (1000ae24 <inv_get_6axis_quaternion+0x10>)
1000ae1a:	3110      	adds	r1, #16
1000ae1c:	4b02      	ldr	r3, [pc, #8]	; (1000ae28 <inv_get_6axis_quaternion+0x14>)
1000ae1e:	4798      	blx	r3
    return INV_SUCCESS;
}
1000ae20:	2000      	movs	r0, #0
1000ae22:	bd10      	pop	{r4, pc}
1000ae24:	1001bd18 	.word	0x1001bd18
1000ae28:	10018623 	.word	0x10018623

1000ae2c <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1000ae2c:	b510      	push	{r4, lr}
    memset(&rh, 0, sizeof(rh));
1000ae2e:	4c09      	ldr	r4, [pc, #36]	; (1000ae54 <inv_init_results_holder+0x28>)
1000ae30:	2288      	movs	r2, #136	; 0x88
1000ae32:	2100      	movs	r1, #0
1000ae34:	0020      	movs	r0, r4
1000ae36:	4b08      	ldr	r3, [pc, #32]	; (1000ae58 <inv_init_results_holder+0x2c>)
1000ae38:	4798      	blx	r3
    rh.mag_scale[0] = 1L<<30;
1000ae3a:	2380      	movs	r3, #128	; 0x80
1000ae3c:	05db      	lsls	r3, r3, #23
1000ae3e:	6363      	str	r3, [r4, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1000ae40:	63a3      	str	r3, [r4, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1000ae42:	63e3      	str	r3, [r4, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1000ae44:	6423      	str	r3, [r4, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1000ae46:	6123      	str	r3, [r4, #16]
    rh.nav_quat[0] = 1L<<30;
1000ae48:	6023      	str	r3, [r4, #0]
    rh.quat_confidence_interval = (float)M_PI;
1000ae4a:	4a04      	ldr	r2, [pc, #16]	; (1000ae5c <inv_init_results_holder+0x30>)
1000ae4c:	2384      	movs	r3, #132	; 0x84
1000ae4e:	50e2      	str	r2, [r4, r3]
    return INV_SUCCESS;
}
1000ae50:	2000      	movs	r0, #0
1000ae52:	bd10      	pop	{r4, pc}
1000ae54:	1001bd18 	.word	0x1001bd18
1000ae58:	1001865f 	.word	0x1001865f
1000ae5c:	40490fdb 	.word	0x40490fdb

1000ae60 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1000ae60:	b510      	push	{r4, lr}
    inv_error_t result;
    result = inv_init_results_holder();
1000ae62:	4b04      	ldr	r3, [pc, #16]	; (1000ae74 <inv_enable_results_holder+0x14>)
1000ae64:	4798      	blx	r3
    if ( result ) {
1000ae66:	2800      	cmp	r0, #0
1000ae68:	d102      	bne.n	1000ae70 <inv_enable_results_holder+0x10>
        return result;
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1000ae6a:	4803      	ldr	r0, [pc, #12]	; (1000ae78 <inv_enable_results_holder+0x18>)
1000ae6c:	4b03      	ldr	r3, [pc, #12]	; (1000ae7c <inv_enable_results_holder+0x1c>)
1000ae6e:	4798      	blx	r3
    return result;
}
1000ae70:	bd10      	pop	{r4, pc}
1000ae72:	46c0      	nop			; (mov r8, r8)
1000ae74:	1000ae2d 	.word	0x1000ae2d
1000ae78:	1000acb9 	.word	0x1000acb9
1000ae7c:	1000af65 	.word	0x1000af65

1000ae80 <inv_got_compass_bias>:
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
    return rh.got_compass_bias;
1000ae80:	4b01      	ldr	r3, [pc, #4]	; (1000ae88 <inv_got_compass_bias+0x8>)
1000ae82:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000ae84:	4770      	bx	lr
1000ae86:	46c0      	nop			; (mov r8, r8)
1000ae88:	1001bd18 	.word	0x1001bd18

1000ae8c <inv_set_compass_bias_found>:
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
    rh.got_compass_bias = state;
1000ae8c:	4b01      	ldr	r3, [pc, #4]	; (1000ae94 <inv_set_compass_bias_found+0x8>)
1000ae8e:	6718      	str	r0, [r3, #112]	; 0x70
}
1000ae90:	4770      	bx	lr
1000ae92:	46c0      	nop			; (mov r8, r8)
1000ae94:	1001bd18 	.word	0x1001bd18

1000ae98 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1000ae98:	b510      	push	{r4, lr}
1000ae9a:	b086      	sub	sp, #24
1000ae9c:	0004      	movs	r4, r0
        data[1] -= gravity[1] >> 14;
        data[2] -= gravity[2] >> 14;
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1000ae9e:	2016      	movs	r0, #22
 */
inv_error_t inv_get_linear_accel(long *data)
{
    long gravity[3];

    if (data != NULL)
1000aea0:	2c00      	cmp	r4, #0
1000aea2:	d018      	beq.n	1000aed6 <inv_get_linear_accel+0x3e>
    {
        inv_get_accel_set(data, NULL, NULL);
1000aea4:	2200      	movs	r2, #0
1000aea6:	2100      	movs	r1, #0
1000aea8:	0020      	movs	r0, r4
1000aeaa:	4b0c      	ldr	r3, [pc, #48]	; (1000aedc <inv_get_linear_accel+0x44>)
1000aeac:	4798      	blx	r3
        inv_get_gravity(gravity);
1000aeae:	a803      	add	r0, sp, #12
1000aeb0:	4b0b      	ldr	r3, [pc, #44]	; (1000aee0 <inv_get_linear_accel+0x48>)
1000aeb2:	4798      	blx	r3
        data[0] -= gravity[0] >> 14;
1000aeb4:	9b03      	ldr	r3, [sp, #12]
1000aeb6:	139b      	asrs	r3, r3, #14
1000aeb8:	6822      	ldr	r2, [r4, #0]
1000aeba:	1ad3      	subs	r3, r2, r3
1000aebc:	6023      	str	r3, [r4, #0]
        data[1] -= gravity[1] >> 14;
1000aebe:	9b04      	ldr	r3, [sp, #16]
1000aec0:	9301      	str	r3, [sp, #4]
1000aec2:	139b      	asrs	r3, r3, #14
1000aec4:	6862      	ldr	r2, [r4, #4]
1000aec6:	1ad3      	subs	r3, r2, r3
1000aec8:	6063      	str	r3, [r4, #4]
        data[2] -= gravity[2] >> 14;
1000aeca:	9b05      	ldr	r3, [sp, #20]
1000aecc:	139b      	asrs	r3, r3, #14
1000aece:	68a2      	ldr	r2, [r4, #8]
1000aed0:	1ad3      	subs	r3, r2, r3
1000aed2:	60a3      	str	r3, [r4, #8]
        return INV_SUCCESS;
1000aed4:	2000      	movs	r0, #0
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000aed6:	b006      	add	sp, #24
1000aed8:	bd10      	pop	{r4, pc}
1000aeda:	46c0      	nop			; (mov r8, r8)
1000aedc:	1000a1b5 	.word	0x1000a1b5
1000aee0:	1000adc1 	.word	0x1000adc1

1000aee4 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1000aee4:	b510      	push	{r4, lr}
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1000aee6:	2254      	movs	r2, #84	; 0x54
1000aee8:	2100      	movs	r1, #0
1000aeea:	4802      	ldr	r0, [pc, #8]	; (1000aef4 <inv_init_start_manager+0x10>)
1000aeec:	4b02      	ldr	r3, [pc, #8]	; (1000aef8 <inv_init_start_manager+0x14>)
1000aeee:	4798      	blx	r3
    return INV_SUCCESS;
}
1000aef0:	2000      	movs	r0, #0
1000aef2:	bd10      	pop	{r4, pc}
1000aef4:	1001bda0 	.word	0x1001bda0
1000aef8:	1001865f 	.word	0x1001865f

1000aefc <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1000aefc:	b510      	push	{r4, lr}
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000aefe:	4b17      	ldr	r3, [pc, #92]	; (1000af5c <inv_unregister_mpl_start_notification+0x60>)
1000af00:	681c      	ldr	r4, [r3, #0]
1000af02:	2c00      	cmp	r4, #0
1000af04:	dd28      	ble.n	1000af58 <inv_unregister_mpl_start_notification+0x5c>
        if (inv_start_cb.start_cb[kk] == start_cb) {
1000af06:	685b      	ldr	r3, [r3, #4]
1000af08:	4298      	cmp	r0, r3
1000af0a:	d11d      	bne.n	1000af48 <inv_unregister_mpl_start_notification+0x4c>
1000af0c:	e005      	b.n	1000af1a <inv_unregister_mpl_start_notification+0x1e>
1000af0e:	3204      	adds	r2, #4
1000af10:	1f11      	subs	r1, r2, #4
1000af12:	6809      	ldr	r1, [r1, #0]
1000af14:	4281      	cmp	r1, r0
1000af16:	d11a      	bne.n	1000af4e <inv_unregister_mpl_start_notification+0x52>
1000af18:	e000      	b.n	1000af1c <inv_unregister_mpl_start_notification+0x20>
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000af1a:	2300      	movs	r3, #0
        if (inv_start_cb.start_cb[kk] == start_cb) {
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
1000af1c:	1e62      	subs	r2, r4, #1
1000af1e:	429a      	cmp	r2, r3
1000af20:	d00c      	beq.n	1000af3c <inv_unregister_mpl_start_notification+0x40>
                memmove(&inv_start_cb.start_cb[kk],
1000af22:	1ae2      	subs	r2, r4, r3
1000af24:	3a01      	subs	r2, #1
1000af26:	0092      	lsls	r2, r2, #2
1000af28:	480c      	ldr	r0, [pc, #48]	; (1000af5c <inv_unregister_mpl_start_notification+0x60>)
1000af2a:	1c59      	adds	r1, r3, #1
1000af2c:	0089      	lsls	r1, r1, #2
1000af2e:	1841      	adds	r1, r0, r1
1000af30:	3104      	adds	r1, #4
1000af32:	009b      	lsls	r3, r3, #2
1000af34:	18c3      	adds	r3, r0, r3
1000af36:	1d18      	adds	r0, r3, #4
1000af38:	4b09      	ldr	r3, [pc, #36]	; (1000af60 <inv_unregister_mpl_start_notification+0x64>)
1000af3a:	4798      	blx	r3
                    &inv_start_cb.start_cb[kk+1],
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
            }
            inv_start_cb.num_cb--;
1000af3c:	4a07      	ldr	r2, [pc, #28]	; (1000af5c <inv_unregister_mpl_start_notification+0x60>)
1000af3e:	6813      	ldr	r3, [r2, #0]
1000af40:	3b01      	subs	r3, #1
1000af42:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
1000af44:	2000      	movs	r0, #0
1000af46:	e008      	b.n	1000af5a <inv_unregister_mpl_start_notification+0x5e>
1000af48:	4a04      	ldr	r2, [pc, #16]	; (1000af5c <inv_unregister_mpl_start_notification+0x60>)
1000af4a:	3208      	adds	r2, #8
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
        if (inv_start_cb.start_cb[kk] == start_cb) {
1000af4c:	2300      	movs	r3, #0
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000af4e:	3301      	adds	r3, #1
1000af50:	42a3      	cmp	r3, r4
1000af52:	d1dc      	bne.n	1000af0e <inv_unregister_mpl_start_notification+0x12>
            }
            inv_start_cb.num_cb--;
            return INV_SUCCESS;
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
1000af54:	2016      	movs	r0, #22
1000af56:	e000      	b.n	1000af5a <inv_unregister_mpl_start_notification+0x5e>
1000af58:	2016      	movs	r0, #22
}
1000af5a:	bd10      	pop	{r4, pc}
1000af5c:	1001bda0 	.word	0x1001bda0
1000af60:	10018635 	.word	0x10018635

1000af64 <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000af64:	4b06      	ldr	r3, [pc, #24]	; (1000af80 <inv_register_mpl_start_notification+0x1c>)
1000af66:	681b      	ldr	r3, [r3, #0]
        return INV_ERROR_INVALID_PARAMETER;
1000af68:	2216      	movs	r2, #22
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000af6a:	2b13      	cmp	r3, #19
1000af6c:	dc06      	bgt.n	1000af7c <inv_register_mpl_start_notification+0x18>
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000af6e:	4904      	ldr	r1, [pc, #16]	; (1000af80 <inv_register_mpl_start_notification+0x1c>)
1000af70:	009a      	lsls	r2, r3, #2
1000af72:	188a      	adds	r2, r1, r2
1000af74:	6050      	str	r0, [r2, #4]
    inv_start_cb.num_cb++;
1000af76:	3301      	adds	r3, #1
1000af78:	600b      	str	r3, [r1, #0]
    return INV_SUCCESS;
1000af7a:	2200      	movs	r2, #0
}
1000af7c:	0010      	movs	r0, r2
1000af7e:	4770      	bx	lr
1000af80:	1001bda0 	.word	0x1001bda0

1000af84 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1000af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000af86:	4b0c      	ldr	r3, [pc, #48]	; (1000afb8 <inv_execute_mpl_start_notification+0x34>)
1000af88:	681b      	ldr	r3, [r3, #0]
1000af8a:	2b00      	cmp	r3, #0
1000af8c:	dd11      	ble.n	1000afb2 <inv_execute_mpl_start_notification+0x2e>
1000af8e:	4c0a      	ldr	r4, [pc, #40]	; (1000afb8 <inv_execute_mpl_start_notification+0x34>)
1000af90:	3404      	adds	r4, #4
1000af92:	2500      	movs	r5, #0
1000af94:	2700      	movs	r7, #0
1000af96:	4e08      	ldr	r6, [pc, #32]	; (1000afb8 <inv_execute_mpl_start_notification+0x34>)
        result = inv_start_cb.start_cb[kk]();
1000af98:	6823      	ldr	r3, [r4, #0]
1000af9a:	4798      	blx	r3
        if (result && (first_error == INV_SUCCESS)) {
1000af9c:	2800      	cmp	r0, #0
1000af9e:	d002      	beq.n	1000afa6 <inv_execute_mpl_start_notification+0x22>
1000afa0:	2f00      	cmp	r7, #0
1000afa2:	d100      	bne.n	1000afa6 <inv_execute_mpl_start_notification+0x22>
            first_error = result;
1000afa4:	0007      	movs	r7, r0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000afa6:	3501      	adds	r5, #1
1000afa8:	3404      	adds	r4, #4
1000afaa:	6833      	ldr	r3, [r6, #0]
1000afac:	42ab      	cmp	r3, r5
1000afae:	dcf3      	bgt.n	1000af98 <inv_execute_mpl_start_notification+0x14>
1000afb0:	e000      	b.n	1000afb4 <inv_execute_mpl_start_notification+0x30>
inv_error_t inv_execute_mpl_start_notification(void)
{
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1000afb2:	2700      	movs	r7, #0
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
}
1000afb4:	0038      	movs	r0, r7
1000afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000afb8:	1001bda0 	.word	0x1001bda0

1000afbc <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1000afbc:	b510      	push	{r4, lr}
    memset(&ds, 0, sizeof(ds));
1000afbe:	4c05      	ldr	r4, [pc, #20]	; (1000afd4 <inv_init_storage_manager+0x18>)
1000afc0:	22cc      	movs	r2, #204	; 0xcc
1000afc2:	0052      	lsls	r2, r2, #1
1000afc4:	2100      	movs	r1, #0
1000afc6:	0020      	movs	r0, r4
1000afc8:	4b03      	ldr	r3, [pc, #12]	; (1000afd8 <inv_init_storage_manager+0x1c>)
1000afca:	4798      	blx	r3
    ds.total_size = sizeof(struct data_header_t);
1000afcc:	230c      	movs	r3, #12
1000afce:	6063      	str	r3, [r4, #4]
}
1000afd0:	bd10      	pop	{r4, pc}
1000afd2:	46c0      	nop			; (mov r8, r8)
1000afd4:	1001bdf4 	.word	0x1001bdf4
1000afd8:	1001865f 	.word	0x1001865f

1000afdc <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000afdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000afde:	4c1b      	ldr	r4, [pc, #108]	; (1000b04c <inv_register_load_store+0x70>)
1000afe0:	6827      	ldr	r7, [r4, #0]
1000afe2:	2f00      	cmp	r7, #0
1000afe4:	dd11      	ble.n	1000b00a <inv_register_load_store+0x2e>
        if (key == ds.hd[kk].key) {
1000afe6:	24b0      	movs	r4, #176	; 0xb0
1000afe8:	4d18      	ldr	r5, [pc, #96]	; (1000b04c <inv_register_load_store+0x70>)
1000afea:	592c      	ldr	r4, [r5, r4]
1000afec:	42a3      	cmp	r3, r4
1000afee:	d028      	beq.n	1000b042 <inv_register_load_store+0x66>
1000aff0:	002c      	movs	r4, r5
1000aff2:	34bc      	adds	r4, #188	; 0xbc
1000aff4:	2500      	movs	r5, #0
1000aff6:	e005      	b.n	1000b004 <inv_register_load_store+0x28>
1000aff8:	340c      	adds	r4, #12
1000affa:	0026      	movs	r6, r4
1000affc:	3e0c      	subs	r6, #12
1000affe:	6836      	ldr	r6, [r6, #0]
1000b000:	429e      	cmp	r6, r3
1000b002:	d020      	beq.n	1000b046 <inv_register_load_store+0x6a>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000b004:	3501      	adds	r5, #1
1000b006:	42bd      	cmp	r5, r7
1000b008:	d1f6      	bne.n	1000aff8 <inv_register_load_store+0x1c>
            return INV_ERROR_INVALID_PARAMETER;
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
1000b00a:	2416      	movs	r4, #22
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1000b00c:	2f13      	cmp	r7, #19
1000b00e:	dc1b      	bgt.n	1000b048 <inv_register_load_store+0x6c>
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000b010:	4d0e      	ldr	r5, [pc, #56]	; (1000b04c <inv_register_load_store+0x70>)
1000b012:	007c      	lsls	r4, r7, #1
1000b014:	19e4      	adds	r4, r4, r7
1000b016:	00a4      	lsls	r4, r4, #2
1000b018:	192c      	adds	r4, r5, r4
1000b01a:	0026      	movs	r6, r4
1000b01c:	36b0      	adds	r6, #176	; 0xb0
1000b01e:	6033      	str	r3, [r6, #0]
    ds.hd[ds.num].size = size;
1000b020:	34a8      	adds	r4, #168	; 0xa8
1000b022:	6022      	str	r2, [r4, #0]
    ds.load[ds.num] = load_func;
1000b024:	1cbb      	adds	r3, r7, #2
1000b026:	009b      	lsls	r3, r3, #2
1000b028:	5158      	str	r0, [r3, r5]
    ds.save[ds.num] = save_func;
1000b02a:	003b      	movs	r3, r7
1000b02c:	3316      	adds	r3, #22
1000b02e:	009b      	lsls	r3, r3, #2
1000b030:	5159      	str	r1, [r3, r5]
    ds.total_size += size + sizeof(struct data_header_t);
1000b032:	686b      	ldr	r3, [r5, #4]
1000b034:	330c      	adds	r3, #12
1000b036:	189a      	adds	r2, r3, r2
1000b038:	606a      	str	r2, [r5, #4]
    ds.num++;
1000b03a:	3701      	adds	r7, #1
1000b03c:	602f      	str	r7, [r5, #0]

    return INV_SUCCESS;
1000b03e:	2400      	movs	r4, #0
1000b040:	e002      	b.n	1000b048 <inv_register_load_store+0x6c>
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000b042:	2416      	movs	r4, #22
1000b044:	e000      	b.n	1000b048 <inv_register_load_store+0x6c>
1000b046:	2416      	movs	r4, #22
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
    ds.num++;

    return INV_SUCCESS;
}
1000b048:	0020      	movs	r0, r4
1000b04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b04c:	1001bdf4 	.word	0x1001bdf4

1000b050 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000b050:	2000      	movs	r0, #0
1000b052:	4770      	bx	lr

1000b054 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000b054:	2000      	movs	r0, #0
1000b056:	4770      	bx	lr

1000b058 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b058:	78c0      	ldrb	r0, [r0, #3]
1000b05a:	2800      	cmp	r0, #0
1000b05c:	d000      	beq.n	1000b060 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b05e:	20e2      	movs	r0, #226	; 0xe2
}
1000b060:	4770      	bx	lr
1000b062:	46c0      	nop			; (mov r8, r8)

1000b064 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000b064:	2000      	movs	r0, #0
1000b066:	4770      	bx	lr

1000b068 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b068:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b06a:	7800      	ldrb	r0, [r0, #0]
1000b06c:	2800      	cmp	r0, #0
1000b06e:	d006      	beq.n	1000b07e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b070:	4803      	ldr	r0, [pc, #12]	; (1000b080 <ble_scan_report_handler+0x18>)
1000b072:	4b04      	ldr	r3, [pc, #16]	; (1000b084 <ble_scan_report_handler+0x1c>)
1000b074:	4798      	blx	r3
1000b076:	4804      	ldr	r0, [pc, #16]	; (1000b088 <ble_scan_report_handler+0x20>)
1000b078:	4b04      	ldr	r3, [pc, #16]	; (1000b08c <ble_scan_report_handler+0x24>)
1000b07a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000b07c:	20e2      	movs	r0, #226	; 0xe2
}
1000b07e:	bd10      	pop	{r4, pc}
1000b080:	10019a70 	.word	0x10019a70
1000b084:	100188c9 	.word	0x100188c9
1000b088:	1001aa70 	.word	0x1001aa70
1000b08c:	100187a9 	.word	0x100187a9

1000b090 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b090:	b510      	push	{r4, lr}
1000b092:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b094:	78c0      	ldrb	r0, [r0, #3]
1000b096:	2800      	cmp	r0, #0
1000b098:	d008      	beq.n	1000b0ac <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b09a:	4805      	ldr	r0, [pc, #20]	; (1000b0b0 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000b09c:	4b05      	ldr	r3, [pc, #20]	; (1000b0b4 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000b09e:	4798      	blx	r3
1000b0a0:	78a2      	ldrb	r2, [r4, #2]
1000b0a2:	8821      	ldrh	r1, [r4, #0]
1000b0a4:	4804      	ldr	r0, [pc, #16]	; (1000b0b8 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000b0a6:	4b05      	ldr	r3, [pc, #20]	; (1000b0bc <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000b0a8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b0aa:	20e2      	movs	r0, #226	; 0xe2
}
1000b0ac:	bd10      	pop	{r4, pc}
1000b0ae:	46c0      	nop			; (mov r8, r8)
1000b0b0:	10019a70 	.word	0x10019a70
1000b0b4:	100188c9 	.word	0x100188c9
1000b0b8:	1001aa84 	.word	0x1001aa84
1000b0bc:	100187a9 	.word	0x100187a9

1000b0c0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b0c2:	0004      	movs	r4, r0
1000b0c4:	4b19      	ldr	r3, [pc, #100]	; (1000b12c <ble_disconnected_state_handler+0x6c>)
1000b0c6:	229b      	movs	r2, #155	; 0x9b
1000b0c8:	0092      	lsls	r2, r2, #2
1000b0ca:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b0cc:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b0ce:	2600      	movs	r6, #0
1000b0d0:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b0d2:	001a      	movs	r2, r3
1000b0d4:	3a56      	subs	r2, #86	; 0x56
1000b0d6:	8811      	ldrh	r1, [r2, #0]
1000b0d8:	8822      	ldrh	r2, [r4, #0]
1000b0da:	4291      	cmp	r1, r2
1000b0dc:	d119      	bne.n	1000b112 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b0de:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b0e0:	2a05      	cmp	r2, #5
1000b0e2:	d001      	beq.n	1000b0e8 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b0e4:	2a08      	cmp	r2, #8
1000b0e6:	d101      	bne.n	1000b0ec <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b0e8:	7007      	strb	r7, [r0, #0]
1000b0ea:	e012      	b.n	1000b112 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000b0ec:	2a07      	cmp	r2, #7
1000b0ee:	d80f      	bhi.n	1000b110 <ble_disconnected_state_handler+0x50>
1000b0f0:	0092      	lsls	r2, r2, #2
1000b0f2:	490f      	ldr	r1, [pc, #60]	; (1000b130 <ble_disconnected_state_handler+0x70>)
1000b0f4:	588a      	ldr	r2, [r1, r2]
1000b0f6:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b0f8:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000b0fa:	4a0e      	ldr	r2, [pc, #56]	; (1000b134 <ble_disconnected_state_handler+0x74>)
1000b0fc:	7812      	ldrb	r2, [r2, #0]
1000b0fe:	2a00      	cmp	r2, #0
1000b100:	d007      	beq.n	1000b112 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000b102:	4a0c      	ldr	r2, [pc, #48]	; (1000b134 <ble_disconnected_state_handler+0x74>)
1000b104:	7812      	ldrb	r2, [r2, #0]
1000b106:	3a01      	subs	r2, #1
1000b108:	b2d2      	uxtb	r2, r2
1000b10a:	490a      	ldr	r1, [pc, #40]	; (1000b134 <ble_disconnected_state_handler+0x74>)
1000b10c:	700a      	strb	r2, [r1, #0]
1000b10e:	e000      	b.n	1000b112 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b110:	7006      	strb	r6, [r0, #0]
1000b112:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b114:	42ab      	cmp	r3, r5
1000b116:	d1db      	bne.n	1000b0d0 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000b118:	4807      	ldr	r0, [pc, #28]	; (1000b138 <ble_disconnected_state_handler+0x78>)
1000b11a:	4b08      	ldr	r3, [pc, #32]	; (1000b13c <ble_disconnected_state_handler+0x7c>)
1000b11c:	4798      	blx	r3
1000b11e:	8822      	ldrh	r2, [r4, #0]
1000b120:	78a1      	ldrb	r1, [r4, #2]
1000b122:	4807      	ldr	r0, [pc, #28]	; (1000b140 <ble_disconnected_state_handler+0x80>)
1000b124:	4b07      	ldr	r3, [pc, #28]	; (1000b144 <ble_disconnected_state_handler+0x84>)
1000b126:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000b128:	2000      	movs	r0, #0
1000b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b12c:	1001d906 	.word	0x1001d906
1000b130:	1001a900 	.word	0x1001a900
1000b134:	1001db14 	.word	0x1001db14
1000b138:	10019a70 	.word	0x10019a70
1000b13c:	100188c9 	.word	0x100188c9
1000b140:	1001aabc 	.word	0x1001aabc
1000b144:	100187a9 	.word	0x100187a9

1000b148 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b14a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b14c:	8801      	ldrh	r1, [r0, #0]
1000b14e:	4b28      	ldr	r3, [pc, #160]	; (1000b1f0 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b150:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b152:	891a      	ldrh	r2, [r3, #8]
1000b154:	428a      	cmp	r2, r1
1000b156:	d104      	bne.n	1000b162 <ble_encryption_status_change_handler+0x1a>
1000b158:	001a      	movs	r2, r3
1000b15a:	325e      	adds	r2, #94	; 0x5e
1000b15c:	7812      	ldrb	r2, [r2, #0]
1000b15e:	2a06      	cmp	r2, #6
1000b160:	d02e      	beq.n	1000b1c0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b162:	3401      	adds	r4, #1
1000b164:	b2e4      	uxtb	r4, r4
1000b166:	337c      	adds	r3, #124	; 0x7c
1000b168:	2c05      	cmp	r4, #5
1000b16a:	d1f2      	bne.n	1000b152 <ble_encryption_status_change_handler+0xa>
1000b16c:	e039      	b.n	1000b1e2 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b16e:	4920      	ldr	r1, [pc, #128]	; (1000b1f0 <ble_encryption_status_change_handler+0xa8>)
1000b170:	0163      	lsls	r3, r4, #5
1000b172:	1b1a      	subs	r2, r3, r4
1000b174:	0092      	lsls	r2, r2, #2
1000b176:	188a      	adds	r2, r1, r2
1000b178:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b17a:	0014      	movs	r4, r2
1000b17c:	345e      	adds	r4, #94	; 0x5e
1000b17e:	2307      	movs	r3, #7
1000b180:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b182:	481c      	ldr	r0, [pc, #112]	; (1000b1f4 <ble_encryption_status_change_handler+0xac>)
1000b184:	4b1c      	ldr	r3, [pc, #112]	; (1000b1f8 <ble_encryption_status_change_handler+0xb0>)
1000b186:	4798      	blx	r3
1000b188:	481c      	ldr	r0, [pc, #112]	; (1000b1fc <ble_encryption_status_change_handler+0xb4>)
1000b18a:	4b1d      	ldr	r3, [pc, #116]	; (1000b200 <ble_encryption_status_change_handler+0xb8>)
1000b18c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b18e:	25e2      	movs	r5, #226	; 0xe2
1000b190:	e02b      	b.n	1000b1ea <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b192:	4818      	ldr	r0, [pc, #96]	; (1000b1f4 <ble_encryption_status_change_handler+0xac>)
1000b194:	4b18      	ldr	r3, [pc, #96]	; (1000b1f8 <ble_encryption_status_change_handler+0xb0>)
1000b196:	4798      	blx	r3
1000b198:	481a      	ldr	r0, [pc, #104]	; (1000b204 <ble_encryption_status_change_handler+0xbc>)
1000b19a:	4b19      	ldr	r3, [pc, #100]	; (1000b200 <ble_encryption_status_change_handler+0xb8>)
1000b19c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b19e:	4914      	ldr	r1, [pc, #80]	; (1000b1f0 <ble_encryption_status_change_handler+0xa8>)
1000b1a0:	0163      	lsls	r3, r4, #5
1000b1a2:	1b1a      	subs	r2, r3, r4
1000b1a4:	0092      	lsls	r2, r2, #2
1000b1a6:	188a      	adds	r2, r1, r2
1000b1a8:	0010      	movs	r0, r2
1000b1aa:	305e      	adds	r0, #94	; 0x5e
1000b1ac:	2708      	movs	r7, #8
1000b1ae:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b1b0:	78f0      	ldrb	r0, [r6, #3]
1000b1b2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b1b4:	78b2      	ldrb	r2, [r6, #2]
1000b1b6:	1b1c      	subs	r4, r3, r4
1000b1b8:	00a4      	lsls	r4, r4, #2
1000b1ba:	190c      	adds	r4, r1, r4
1000b1bc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b1be:	e014      	b.n	1000b1ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b1c0:	78b5      	ldrb	r5, [r6, #2]
1000b1c2:	2d00      	cmp	r5, #0
1000b1c4:	d0e5      	beq.n	1000b192 <ble_encryption_status_change_handler+0x4a>
1000b1c6:	e7d2      	b.n	1000b16e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000b1c8:	4e0a      	ldr	r6, [pc, #40]	; (1000b1f4 <ble_encryption_status_change_handler+0xac>)
1000b1ca:	0030      	movs	r0, r6
1000b1cc:	4d0a      	ldr	r5, [pc, #40]	; (1000b1f8 <ble_encryption_status_change_handler+0xb0>)
1000b1ce:	47a8      	blx	r5
1000b1d0:	480c      	ldr	r0, [pc, #48]	; (1000b204 <ble_encryption_status_change_handler+0xbc>)
1000b1d2:	4c0b      	ldr	r4, [pc, #44]	; (1000b200 <ble_encryption_status_change_handler+0xb8>)
1000b1d4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b1d6:	0030      	movs	r0, r6
1000b1d8:	47a8      	blx	r5
1000b1da:	480b      	ldr	r0, [pc, #44]	; (1000b208 <ble_encryption_status_change_handler+0xc0>)
1000b1dc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b1de:	25e2      	movs	r5, #226	; 0xe2
1000b1e0:	e003      	b.n	1000b1ea <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b1e2:	78b5      	ldrb	r5, [r6, #2]
1000b1e4:	2d00      	cmp	r5, #0
1000b1e6:	d1c2      	bne.n	1000b16e <ble_encryption_status_change_handler+0x26>
1000b1e8:	e7ee      	b.n	1000b1c8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b1ea:	0028      	movs	r0, r5
1000b1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b1ee:	46c0      	nop			; (mov r8, r8)
1000b1f0:	1001d8a8 	.word	0x1001d8a8
1000b1f4:	10019a70 	.word	0x10019a70
1000b1f8:	100188c9 	.word	0x100188c9
1000b1fc:	1001aaec 	.word	0x1001aaec
1000b200:	100187a9 	.word	0x100187a9
1000b204:	1001ab00 	.word	0x1001ab00
1000b208:	1001ab24 	.word	0x1001ab24

1000b20c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b20c:	b510      	push	{r4, lr}
1000b20e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b210:	4b15      	ldr	r3, [pc, #84]	; (1000b268 <ble_scan_info_handler+0x5c>)
1000b212:	781b      	ldrb	r3, [r3, #0]
1000b214:	b2db      	uxtb	r3, r3
1000b216:	2b13      	cmp	r3, #19
1000b218:	d812      	bhi.n	1000b240 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b21a:	4c13      	ldr	r4, [pc, #76]	; (1000b268 <ble_scan_info_handler+0x5c>)
1000b21c:	7823      	ldrb	r3, [r4, #0]
1000b21e:	b2db      	uxtb	r3, r3
1000b220:	0098      	lsls	r0, r3, #2
1000b222:	18c0      	adds	r0, r0, r3
1000b224:	00c0      	lsls	r0, r0, #3
1000b226:	18c3      	adds	r3, r0, r3
1000b228:	4810      	ldr	r0, [pc, #64]	; (1000b26c <ble_scan_info_handler+0x60>)
1000b22a:	1818      	adds	r0, r3, r0
1000b22c:	2229      	movs	r2, #41	; 0x29
1000b22e:	4b10      	ldr	r3, [pc, #64]	; (1000b270 <ble_scan_info_handler+0x64>)
1000b230:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b232:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b234:	7823      	ldrb	r3, [r4, #0]
1000b236:	3301      	adds	r3, #1
1000b238:	b2db      	uxtb	r3, r3
1000b23a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000b23c:	2300      	movs	r3, #0
1000b23e:	e011      	b.n	1000b264 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b240:	480c      	ldr	r0, [pc, #48]	; (1000b274 <ble_scan_info_handler+0x68>)
1000b242:	4b0d      	ldr	r3, [pc, #52]	; (1000b278 <ble_scan_info_handler+0x6c>)
1000b244:	4798      	blx	r3
1000b246:	480d      	ldr	r0, [pc, #52]	; (1000b27c <ble_scan_info_handler+0x70>)
1000b248:	4b0d      	ldr	r3, [pc, #52]	; (1000b280 <ble_scan_info_handler+0x74>)
1000b24a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b24c:	4b0d      	ldr	r3, [pc, #52]	; (1000b284 <ble_scan_info_handler+0x78>)
1000b24e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b250:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b252:	2800      	cmp	r0, #0
1000b254:	d006      	beq.n	1000b264 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000b256:	4807      	ldr	r0, [pc, #28]	; (1000b274 <ble_scan_info_handler+0x68>)
1000b258:	4b07      	ldr	r3, [pc, #28]	; (1000b278 <ble_scan_info_handler+0x6c>)
1000b25a:	4798      	blx	r3
1000b25c:	480a      	ldr	r0, [pc, #40]	; (1000b288 <ble_scan_info_handler+0x7c>)
1000b25e:	4b08      	ldr	r3, [pc, #32]	; (1000b280 <ble_scan_info_handler+0x74>)
1000b260:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b262:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000b264:	0018      	movs	r0, r3
1000b266:	bd10      	pop	{r4, pc}
1000b268:	1001d390 	.word	0x1001d390
1000b26c:	1001db8c 	.word	0x1001db8c
1000b270:	10018623 	.word	0x10018623
1000b274:	10019a70 	.word	0x10019a70
1000b278:	100188c9 	.word	0x100188c9
1000b27c:	1001ab4c 	.word	0x1001ab4c
1000b280:	100187a9 	.word	0x100187a9
1000b284:	1000f10d 	.word	0x1000f10d
1000b288:	1001ab84 	.word	0x1001ab84

1000b28c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b28e:	464f      	mov	r7, r9
1000b290:	4646      	mov	r6, r8
1000b292:	b4c0      	push	{r6, r7}
1000b294:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b296:	8841      	ldrh	r1, [r0, #2]
1000b298:	4b3a      	ldr	r3, [pc, #232]	; (1000b384 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b29a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b29c:	891a      	ldrh	r2, [r3, #8]
1000b29e:	428a      	cmp	r2, r1
1000b2a0:	d104      	bne.n	1000b2ac <ble_pair_done_handler+0x20>
1000b2a2:	001a      	movs	r2, r3
1000b2a4:	325e      	adds	r2, #94	; 0x5e
1000b2a6:	7812      	ldrb	r2, [r2, #0]
1000b2a8:	2a03      	cmp	r2, #3
1000b2aa:	d062      	beq.n	1000b372 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2ac:	3401      	adds	r4, #1
1000b2ae:	b2e4      	uxtb	r4, r4
1000b2b0:	337c      	adds	r3, #124	; 0x7c
1000b2b2:	2c05      	cmp	r4, #5
1000b2b4:	d1f2      	bne.n	1000b29c <ble_pair_done_handler+0x10>
1000b2b6:	e02b      	b.n	1000b310 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000b2b8:	0163      	lsls	r3, r4, #5
1000b2ba:	1b1c      	subs	r4, r3, r4
1000b2bc:	00a4      	lsls	r4, r4, #2
1000b2be:	4b31      	ldr	r3, [pc, #196]	; (1000b384 <ble_pair_done_handler+0xf8>)
1000b2c0:	191c      	adds	r4, r3, r4
1000b2c2:	345e      	adds	r4, #94	; 0x5e
1000b2c4:	7823      	ldrb	r3, [r4, #0]
1000b2c6:	2b01      	cmp	r3, #1
1000b2c8:	d913      	bls.n	1000b2f2 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000b2ca:	482f      	ldr	r0, [pc, #188]	; (1000b388 <ble_pair_done_handler+0xfc>)
1000b2cc:	4b2f      	ldr	r3, [pc, #188]	; (1000b38c <ble_pair_done_handler+0x100>)
1000b2ce:	4798      	blx	r3
1000b2d0:	482f      	ldr	r0, [pc, #188]	; (1000b390 <ble_pair_done_handler+0x104>)
1000b2d2:	4b30      	ldr	r3, [pc, #192]	; (1000b394 <ble_pair_done_handler+0x108>)
1000b2d4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b2d6:	8868      	ldrh	r0, [r5, #2]
1000b2d8:	2113      	movs	r1, #19
1000b2da:	4b2f      	ldr	r3, [pc, #188]	; (1000b398 <ble_pair_done_handler+0x10c>)
1000b2dc:	4798      	blx	r3
1000b2de:	1e06      	subs	r6, r0, #0
1000b2e0:	d04b      	beq.n	1000b37a <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000b2e2:	4829      	ldr	r0, [pc, #164]	; (1000b388 <ble_pair_done_handler+0xfc>)
1000b2e4:	4b29      	ldr	r3, [pc, #164]	; (1000b38c <ble_pair_done_handler+0x100>)
1000b2e6:	4798      	blx	r3
1000b2e8:	482c      	ldr	r0, [pc, #176]	; (1000b39c <ble_pair_done_handler+0x110>)
1000b2ea:	4b2a      	ldr	r3, [pc, #168]	; (1000b394 <ble_pair_done_handler+0x108>)
1000b2ec:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b2ee:	26e2      	movs	r6, #226	; 0xe2
1000b2f0:	e043      	b.n	1000b37a <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b2f2:	2600      	movs	r6, #0
1000b2f4:	e041      	b.n	1000b37a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b2f6:	4e24      	ldr	r6, [pc, #144]	; (1000b388 <ble_pair_done_handler+0xfc>)
1000b2f8:	0030      	movs	r0, r6
1000b2fa:	4d24      	ldr	r5, [pc, #144]	; (1000b38c <ble_pair_done_handler+0x100>)
1000b2fc:	47a8      	blx	r5
1000b2fe:	4828      	ldr	r0, [pc, #160]	; (1000b3a0 <ble_pair_done_handler+0x114>)
1000b300:	4c24      	ldr	r4, [pc, #144]	; (1000b394 <ble_pair_done_handler+0x108>)
1000b302:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b304:	0030      	movs	r0, r6
1000b306:	47a8      	blx	r5
1000b308:	4826      	ldr	r0, [pc, #152]	; (1000b3a4 <ble_pair_done_handler+0x118>)
1000b30a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b30c:	26e2      	movs	r6, #226	; 0xe2
1000b30e:	e034      	b.n	1000b37a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b310:	792b      	ldrb	r3, [r5, #4]
1000b312:	2b00      	cmp	r3, #0
1000b314:	d1d0      	bne.n	1000b2b8 <ble_pair_done_handler+0x2c>
1000b316:	e7ee      	b.n	1000b2f6 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b318:	481b      	ldr	r0, [pc, #108]	; (1000b388 <ble_pair_done_handler+0xfc>)
1000b31a:	4b1c      	ldr	r3, [pc, #112]	; (1000b38c <ble_pair_done_handler+0x100>)
1000b31c:	4798      	blx	r3
1000b31e:	4820      	ldr	r0, [pc, #128]	; (1000b3a0 <ble_pair_done_handler+0x114>)
1000b320:	4b1c      	ldr	r3, [pc, #112]	; (1000b394 <ble_pair_done_handler+0x108>)
1000b322:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b324:	782a      	ldrb	r2, [r5, #0]
1000b326:	4b17      	ldr	r3, [pc, #92]	; (1000b384 <ble_pair_done_handler+0xf8>)
1000b328:	4699      	mov	r9, r3
1000b32a:	0167      	lsls	r7, r4, #5
1000b32c:	1b3b      	subs	r3, r7, r4
1000b32e:	009b      	lsls	r3, r3, #2
1000b330:	444b      	add	r3, r9
1000b332:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b334:	792a      	ldrb	r2, [r5, #4]
1000b336:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b338:	335e      	adds	r3, #94	; 0x5e
1000b33a:	2205      	movs	r2, #5
1000b33c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b33e:	1b38      	subs	r0, r7, r4
1000b340:	0080      	lsls	r0, r0, #2
1000b342:	4448      	add	r0, r9
1000b344:	3036      	adds	r0, #54	; 0x36
1000b346:	0029      	movs	r1, r5
1000b348:	3122      	adds	r1, #34	; 0x22
1000b34a:	320b      	adds	r2, #11
1000b34c:	4b16      	ldr	r3, [pc, #88]	; (1000b3a8 <ble_pair_done_handler+0x11c>)
1000b34e:	4698      	mov	r8, r3
1000b350:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b352:	1b38      	subs	r0, r7, r4
1000b354:	0080      	lsls	r0, r0, #2
1000b356:	4448      	add	r0, r9
1000b358:	3046      	adds	r0, #70	; 0x46
1000b35a:	0029      	movs	r1, r5
1000b35c:	3132      	adds	r1, #50	; 0x32
1000b35e:	2217      	movs	r2, #23
1000b360:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b362:	1b38      	subs	r0, r7, r4
1000b364:	0080      	lsls	r0, r0, #2
1000b366:	4448      	add	r0, r9
1000b368:	301a      	adds	r0, #26
1000b36a:	1da9      	adds	r1, r5, #6
1000b36c:	221c      	movs	r2, #28
1000b36e:	47c0      	blx	r8
1000b370:	e003      	b.n	1000b37a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b372:	792e      	ldrb	r6, [r5, #4]
1000b374:	2e00      	cmp	r6, #0
1000b376:	d0cf      	beq.n	1000b318 <ble_pair_done_handler+0x8c>
1000b378:	e79e      	b.n	1000b2b8 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000b37a:	0030      	movs	r0, r6
1000b37c:	bc0c      	pop	{r2, r3}
1000b37e:	4690      	mov	r8, r2
1000b380:	4699      	mov	r9, r3
1000b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b384:	1001d8a8 	.word	0x1001d8a8
1000b388:	10019a70 	.word	0x10019a70
1000b38c:	100188c9 	.word	0x100188c9
1000b390:	1001ab9c 	.word	0x1001ab9c
1000b394:	100187a9 	.word	0x100187a9
1000b398:	1000f12d 	.word	0x1000f12d
1000b39c:	1001abbc 	.word	0x1001abbc
1000b3a0:	1001abd8 	.word	0x1001abd8
1000b3a4:	1001ac04 	.word	0x1001ac04
1000b3a8:	10018623 	.word	0x10018623

1000b3ac <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b3ac:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b3ae:	8800      	ldrh	r0, [r0, #0]
1000b3b0:	2378      	movs	r3, #120	; 0x78
1000b3b2:	2201      	movs	r2, #1
1000b3b4:	2101      	movs	r1, #1
1000b3b6:	4c02      	ldr	r4, [pc, #8]	; (1000b3c0 <ble_conn_param_update_req+0x14>)
1000b3b8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b3ba:	2000      	movs	r0, #0
1000b3bc:	bd10      	pop	{r4, pc}
1000b3be:	46c0      	nop			; (mov r8, r8)
1000b3c0:	1000f14d 	.word	0x1000f14d

1000b3c4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3c6:	4657      	mov	r7, sl
1000b3c8:	464e      	mov	r6, r9
1000b3ca:	4645      	mov	r5, r8
1000b3cc:	b4e0      	push	{r5, r6, r7}
1000b3ce:	b084      	sub	sp, #16
1000b3d0:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b3d2:	2209      	movs	r2, #9
1000b3d4:	2100      	movs	r1, #0
1000b3d6:	a801      	add	r0, sp, #4
1000b3d8:	4b6b      	ldr	r3, [pc, #428]	; (1000b588 <ble_slave_security_request_handler+0x1c4>)
1000b3da:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b3dc:	8825      	ldrh	r5, [r4, #0]
1000b3de:	496b      	ldr	r1, [pc, #428]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b3e0:	000a      	movs	r2, r1
1000b3e2:	2300      	movs	r3, #0
1000b3e4:	8910      	ldrh	r0, [r2, #8]
1000b3e6:	42a8      	cmp	r0, r5
1000b3e8:	d116      	bne.n	1000b418 <ble_slave_security_request_handler+0x54>
1000b3ea:	0010      	movs	r0, r2
1000b3ec:	305e      	adds	r0, #94	; 0x5e
1000b3ee:	7800      	ldrb	r0, [r0, #0]
1000b3f0:	2802      	cmp	r0, #2
1000b3f2:	d111      	bne.n	1000b418 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b3f4:	4865      	ldr	r0, [pc, #404]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b3f6:	015a      	lsls	r2, r3, #5
1000b3f8:	1ad6      	subs	r6, r2, r3
1000b3fa:	00b6      	lsls	r6, r6, #2
1000b3fc:	1986      	adds	r6, r0, r6
1000b3fe:	365e      	adds	r6, #94	; 0x5e
1000b400:	2206      	movs	r2, #6
1000b402:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b404:	32f9      	adds	r2, #249	; 0xf9
1000b406:	4013      	ands	r3, r2
1000b408:	015a      	lsls	r2, r3, #5
1000b40a:	1ad2      	subs	r2, r2, r3
1000b40c:	0092      	lsls	r2, r2, #2
1000b40e:	1882      	adds	r2, r0, r2
1000b410:	7d12      	ldrb	r2, [r2, #20]
1000b412:	07d0      	lsls	r0, r2, #31
1000b414:	d405      	bmi.n	1000b422 <ble_slave_security_request_handler+0x5e>
1000b416:	e01b      	b.n	1000b450 <ble_slave_security_request_handler+0x8c>
1000b418:	3301      	adds	r3, #1
1000b41a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b41c:	2b05      	cmp	r3, #5
1000b41e:	d1e1      	bne.n	1000b3e4 <ble_slave_security_request_handler+0x20>
1000b420:	e01e      	b.n	1000b460 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b422:	78e0      	ldrb	r0, [r4, #3]
1000b424:	2800      	cmp	r0, #0
1000b426:	d013      	beq.n	1000b450 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b428:	0159      	lsls	r1, r3, #5
1000b42a:	1ac9      	subs	r1, r1, r3
1000b42c:	008b      	lsls	r3, r1, #2
1000b42e:	4957      	ldr	r1, [pc, #348]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b430:	18c9      	adds	r1, r1, r3
1000b432:	311a      	adds	r1, #26
1000b434:	8820      	ldrh	r0, [r4, #0]
1000b436:	4b56      	ldr	r3, [pc, #344]	; (1000b590 <ble_slave_security_request_handler+0x1cc>)
1000b438:	4798      	blx	r3
1000b43a:	2800      	cmp	r0, #0
1000b43c:	d100      	bne.n	1000b440 <ble_slave_security_request_handler+0x7c>
1000b43e:	e09d      	b.n	1000b57c <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b440:	4854      	ldr	r0, [pc, #336]	; (1000b594 <ble_slave_security_request_handler+0x1d0>)
1000b442:	4b55      	ldr	r3, [pc, #340]	; (1000b598 <ble_slave_security_request_handler+0x1d4>)
1000b444:	4798      	blx	r3
1000b446:	4855      	ldr	r0, [pc, #340]	; (1000b59c <ble_slave_security_request_handler+0x1d8>)
1000b448:	4b55      	ldr	r3, [pc, #340]	; (1000b5a0 <ble_slave_security_request_handler+0x1dc>)
1000b44a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b44c:	20e2      	movs	r0, #226	; 0xe2
1000b44e:	e095      	b.n	1000b57c <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b450:	015a      	lsls	r2, r3, #5
1000b452:	1ad3      	subs	r3, r2, r3
1000b454:	009b      	lsls	r3, r3, #2
1000b456:	4a4d      	ldr	r2, [pc, #308]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b458:	18d3      	adds	r3, r2, r3
1000b45a:	335e      	adds	r3, #94	; 0x5e
1000b45c:	2202      	movs	r2, #2
1000b45e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b460:	8825      	ldrh	r5, [r4, #0]
1000b462:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b464:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b466:	0016      	movs	r6, r2
1000b468:	8908      	ldrh	r0, [r1, #8]
1000b46a:	42a8      	cmp	r0, r5
1000b46c:	d10d      	bne.n	1000b48a <ble_slave_security_request_handler+0xc6>
1000b46e:	0008      	movs	r0, r1
1000b470:	305e      	adds	r0, #94	; 0x5e
1000b472:	7800      	ldrb	r0, [r0, #0]
1000b474:	2802      	cmp	r0, #2
1000b476:	d108      	bne.n	1000b48a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b478:	0152      	lsls	r2, r2, #5
1000b47a:	1b92      	subs	r2, r2, r6
1000b47c:	0096      	lsls	r6, r2, #2
1000b47e:	4a43      	ldr	r2, [pc, #268]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b480:	1992      	adds	r2, r2, r6
1000b482:	325e      	adds	r2, #94	; 0x5e
1000b484:	2103      	movs	r1, #3
1000b486:	7011      	strb	r1, [r2, #0]
			break;
1000b488:	e005      	b.n	1000b496 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b48a:	3301      	adds	r3, #1
1000b48c:	b2db      	uxtb	r3, r3
1000b48e:	3201      	adds	r2, #1
1000b490:	317c      	adds	r1, #124	; 0x7c
1000b492:	2b05      	cmp	r3, #5
1000b494:	d1e7      	bne.n	1000b466 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b496:	aa01      	add	r2, sp, #4
1000b498:	2102      	movs	r1, #2
1000b49a:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000b49c:	78e1      	ldrb	r1, [r4, #3]
1000b49e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000b4a0:	2101      	movs	r1, #1
1000b4a2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b4a4:	3103      	adds	r1, #3
1000b4a6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b4a8:	001f      	movs	r7, r3
1000b4aa:	015a      	lsls	r2, r3, #5
1000b4ac:	1ad2      	subs	r2, r2, r3
1000b4ae:	0092      	lsls	r2, r2, #2
1000b4b0:	4936      	ldr	r1, [pc, #216]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b4b2:	5c52      	ldrb	r2, [r2, r1]
1000b4b4:	2a02      	cmp	r2, #2
1000b4b6:	d104      	bne.n	1000b4c2 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b4b8:	aa01      	add	r2, sp, #4
1000b4ba:	2103      	movs	r1, #3
1000b4bc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b4be:	71d1      	strb	r1, [r2, #7]
1000b4c0:	e003      	b.n	1000b4ca <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b4c2:	aa01      	add	r2, sp, #4
1000b4c4:	2101      	movs	r1, #1
1000b4c6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b4c8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000b4ca:	aa01      	add	r2, sp, #4
1000b4cc:	2110      	movs	r1, #16
1000b4ce:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b4d0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b4d2:	017a      	lsls	r2, r7, #5
1000b4d4:	1bd2      	subs	r2, r2, r7
1000b4d6:	0092      	lsls	r2, r2, #2
1000b4d8:	492c      	ldr	r1, [pc, #176]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b4da:	188a      	adds	r2, r1, r2
1000b4dc:	7e12      	ldrb	r2, [r2, #24]
1000b4de:	2a40      	cmp	r2, #64	; 0x40
1000b4e0:	d134      	bne.n	1000b54c <ble_slave_security_request_handler+0x188>
1000b4e2:	015a      	lsls	r2, r3, #5
1000b4e4:	1ad3      	subs	r3, r2, r3
1000b4e6:	009b      	lsls	r3, r3, #2
1000b4e8:	469a      	mov	sl, r3
1000b4ea:	001e      	movs	r6, r3
1000b4ec:	3660      	adds	r6, #96	; 0x60
1000b4ee:	1876      	adds	r6, r6, r1
1000b4f0:	4655      	mov	r5, sl
1000b4f2:	3568      	adds	r5, #104	; 0x68
1000b4f4:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b4f6:	4b2b      	ldr	r3, [pc, #172]	; (1000b5a4 <ble_slave_security_request_handler+0x1e0>)
1000b4f8:	4699      	mov	r9, r3
1000b4fa:	230f      	movs	r3, #15
1000b4fc:	4698      	mov	r8, r3
1000b4fe:	47c8      	blx	r9
1000b500:	4643      	mov	r3, r8
1000b502:	4018      	ands	r0, r3
1000b504:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b506:	47c8      	blx	r9
1000b508:	4643      	mov	r3, r8
1000b50a:	4018      	ands	r0, r3
1000b50c:	74b0      	strb	r0, [r6, #18]
1000b50e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b510:	42ae      	cmp	r6, r5
1000b512:	d1f4      	bne.n	1000b4fe <ble_slave_security_request_handler+0x13a>
1000b514:	4656      	mov	r6, sl
1000b516:	3670      	adds	r6, #112	; 0x70
1000b518:	4a1c      	ldr	r2, [pc, #112]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b51a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b51c:	4b21      	ldr	r3, [pc, #132]	; (1000b5a4 <ble_slave_security_request_handler+0x1e0>)
1000b51e:	4699      	mov	r9, r3
1000b520:	230f      	movs	r3, #15
1000b522:	4698      	mov	r8, r3
1000b524:	47c8      	blx	r9
1000b526:	4643      	mov	r3, r8
1000b528:	4018      	ands	r0, r3
1000b52a:	7028      	strb	r0, [r5, #0]
1000b52c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b52e:	42b5      	cmp	r5, r6
1000b530:	d1f8      	bne.n	1000b524 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b532:	4b1c      	ldr	r3, [pc, #112]	; (1000b5a4 <ble_slave_security_request_handler+0x1e0>)
1000b534:	4798      	blx	r3
1000b536:	017b      	lsls	r3, r7, #5
1000b538:	1bdb      	subs	r3, r3, r7
1000b53a:	009b      	lsls	r3, r3, #2
1000b53c:	4a13      	ldr	r2, [pc, #76]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b53e:	18d3      	adds	r3, r2, r3
1000b540:	001a      	movs	r2, r3
1000b542:	3270      	adds	r2, #112	; 0x70
1000b544:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b546:	337a      	adds	r3, #122	; 0x7a
1000b548:	2210      	movs	r2, #16
1000b54a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b54c:	017a      	lsls	r2, r7, #5
1000b54e:	1bd7      	subs	r7, r2, r7
1000b550:	00bf      	lsls	r7, r7, #2
1000b552:	3760      	adds	r7, #96	; 0x60
1000b554:	4a0d      	ldr	r2, [pc, #52]	; (1000b58c <ble_slave_security_request_handler+0x1c8>)
1000b556:	18ba      	adds	r2, r7, r2
1000b558:	8820      	ldrh	r0, [r4, #0]
1000b55a:	2300      	movs	r3, #0
1000b55c:	a901      	add	r1, sp, #4
1000b55e:	4c12      	ldr	r4, [pc, #72]	; (1000b5a8 <ble_slave_security_request_handler+0x1e4>)
1000b560:	47a0      	blx	r4
1000b562:	2800      	cmp	r0, #0
1000b564:	d00a      	beq.n	1000b57c <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000b566:	ab01      	add	r3, sp, #4
1000b568:	2200      	movs	r2, #0
1000b56a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b56c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b56e:	4809      	ldr	r0, [pc, #36]	; (1000b594 <ble_slave_security_request_handler+0x1d0>)
1000b570:	4b09      	ldr	r3, [pc, #36]	; (1000b598 <ble_slave_security_request_handler+0x1d4>)
1000b572:	4798      	blx	r3
1000b574:	480d      	ldr	r0, [pc, #52]	; (1000b5ac <ble_slave_security_request_handler+0x1e8>)
1000b576:	4b0a      	ldr	r3, [pc, #40]	; (1000b5a0 <ble_slave_security_request_handler+0x1dc>)
1000b578:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b57a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b57c:	b004      	add	sp, #16
1000b57e:	bc1c      	pop	{r2, r3, r4}
1000b580:	4690      	mov	r8, r2
1000b582:	4699      	mov	r9, r3
1000b584:	46a2      	mov	sl, r4
1000b586:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b588:	1001865f 	.word	0x1001865f
1000b58c:	1001d8a8 	.word	0x1001d8a8
1000b590:	1000f685 	.word	0x1000f685
1000b594:	10019a70 	.word	0x10019a70
1000b598:	100188c9 	.word	0x100188c9
1000b59c:	1001ac34 	.word	0x1001ac34
1000b5a0:	100187a9 	.word	0x100187a9
1000b5a4:	100188dd 	.word	0x100188dd
1000b5a8:	1000f499 	.word	0x1000f499
1000b5ac:	1001ac4c 	.word	0x1001ac4c

1000b5b0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b5b2:	465f      	mov	r7, fp
1000b5b4:	4656      	mov	r6, sl
1000b5b6:	464d      	mov	r5, r9
1000b5b8:	4644      	mov	r4, r8
1000b5ba:	b4f0      	push	{r4, r5, r6, r7}
1000b5bc:	b085      	sub	sp, #20
1000b5be:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b5c0:	8804      	ldrh	r4, [r0, #0]
1000b5c2:	4a49      	ldr	r2, [pc, #292]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b5c4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b5c6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b5c8:	8910      	ldrh	r0, [r2, #8]
1000b5ca:	42a0      	cmp	r0, r4
1000b5cc:	d10d      	bne.n	1000b5ea <ble_pair_request_handler+0x3a>
1000b5ce:	0010      	movs	r0, r2
1000b5d0:	305e      	adds	r0, #94	; 0x5e
1000b5d2:	7800      	ldrb	r0, [r0, #0]
1000b5d4:	2802      	cmp	r0, #2
1000b5d6:	d108      	bne.n	1000b5ea <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b5d8:	014a      	lsls	r2, r1, #5
1000b5da:	1a52      	subs	r2, r2, r1
1000b5dc:	0095      	lsls	r5, r2, #2
1000b5de:	4a42      	ldr	r2, [pc, #264]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b5e0:	1952      	adds	r2, r2, r5
1000b5e2:	325e      	adds	r2, #94	; 0x5e
1000b5e4:	2103      	movs	r1, #3
1000b5e6:	7011      	strb	r1, [r2, #0]
			break;
1000b5e8:	e005      	b.n	1000b5f6 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b5ea:	3301      	adds	r3, #1
1000b5ec:	b2db      	uxtb	r3, r3
1000b5ee:	3101      	adds	r1, #1
1000b5f0:	327c      	adds	r2, #124	; 0x7c
1000b5f2:	2b05      	cmp	r3, #5
1000b5f4:	d1e8      	bne.n	1000b5c8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b5f6:	aa01      	add	r2, sp, #4
1000b5f8:	2102      	movs	r1, #2
1000b5fa:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000b5fc:	3901      	subs	r1, #1
1000b5fe:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b600:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b602:	2100      	movs	r1, #0
1000b604:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b606:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b608:	001f      	movs	r7, r3
1000b60a:	015a      	lsls	r2, r3, #5
1000b60c:	1ad2      	subs	r2, r2, r3
1000b60e:	0092      	lsls	r2, r2, #2
1000b610:	4935      	ldr	r1, [pc, #212]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b612:	5c52      	ldrb	r2, [r2, r1]
1000b614:	2a02      	cmp	r2, #2
1000b616:	d104      	bne.n	1000b622 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b618:	aa01      	add	r2, sp, #4
1000b61a:	2103      	movs	r1, #3
1000b61c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b61e:	71d1      	strb	r1, [r2, #7]
1000b620:	e003      	b.n	1000b62a <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b622:	aa01      	add	r2, sp, #4
1000b624:	2101      	movs	r1, #1
1000b626:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b628:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000b62a:	aa01      	add	r2, sp, #4
1000b62c:	2110      	movs	r1, #16
1000b62e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b630:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b632:	017a      	lsls	r2, r7, #5
1000b634:	1bd2      	subs	r2, r2, r7
1000b636:	0092      	lsls	r2, r2, #2
1000b638:	492b      	ldr	r1, [pc, #172]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b63a:	188a      	adds	r2, r1, r2
1000b63c:	7e12      	ldrb	r2, [r2, #24]
1000b63e:	2a40      	cmp	r2, #64	; 0x40
1000b640:	d131      	bne.n	1000b6a6 <ble_pair_request_handler+0xf6>
1000b642:	015a      	lsls	r2, r3, #5
1000b644:	1ad3      	subs	r3, r2, r3
1000b646:	009b      	lsls	r3, r3, #2
1000b648:	469a      	mov	sl, r3
1000b64a:	001d      	movs	r5, r3
1000b64c:	3560      	adds	r5, #96	; 0x60
1000b64e:	186d      	adds	r5, r5, r1
1000b650:	4654      	mov	r4, sl
1000b652:	3468      	adds	r4, #104	; 0x68
1000b654:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b656:	4b25      	ldr	r3, [pc, #148]	; (1000b6ec <ble_pair_request_handler+0x13c>)
1000b658:	4699      	mov	r9, r3
1000b65a:	260f      	movs	r6, #15
1000b65c:	47c8      	blx	r9
1000b65e:	4030      	ands	r0, r6
1000b660:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b662:	47c8      	blx	r9
1000b664:	4030      	ands	r0, r6
1000b666:	74a8      	strb	r0, [r5, #18]
1000b668:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b66a:	42a5      	cmp	r5, r4
1000b66c:	d1f6      	bne.n	1000b65c <ble_pair_request_handler+0xac>
1000b66e:	4655      	mov	r5, sl
1000b670:	3570      	adds	r5, #112	; 0x70
1000b672:	4a1d      	ldr	r2, [pc, #116]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b674:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b676:	4b1d      	ldr	r3, [pc, #116]	; (1000b6ec <ble_pair_request_handler+0x13c>)
1000b678:	4699      	mov	r9, r3
1000b67a:	230f      	movs	r3, #15
1000b67c:	4698      	mov	r8, r3
1000b67e:	47c8      	blx	r9
1000b680:	4643      	mov	r3, r8
1000b682:	4018      	ands	r0, r3
1000b684:	7020      	strb	r0, [r4, #0]
1000b686:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b688:	42ac      	cmp	r4, r5
1000b68a:	d1f8      	bne.n	1000b67e <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b68c:	4b17      	ldr	r3, [pc, #92]	; (1000b6ec <ble_pair_request_handler+0x13c>)
1000b68e:	4798      	blx	r3
1000b690:	017b      	lsls	r3, r7, #5
1000b692:	1bdb      	subs	r3, r3, r7
1000b694:	009b      	lsls	r3, r3, #2
1000b696:	4a14      	ldr	r2, [pc, #80]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b698:	18d3      	adds	r3, r2, r3
1000b69a:	001a      	movs	r2, r3
1000b69c:	3270      	adds	r2, #112	; 0x70
1000b69e:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b6a0:	337a      	adds	r3, #122	; 0x7a
1000b6a2:	2210      	movs	r2, #16
1000b6a4:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b6a6:	017a      	lsls	r2, r7, #5
1000b6a8:	1bd7      	subs	r7, r2, r7
1000b6aa:	00bf      	lsls	r7, r7, #2
1000b6ac:	3760      	adds	r7, #96	; 0x60
1000b6ae:	4a0e      	ldr	r2, [pc, #56]	; (1000b6e8 <ble_pair_request_handler+0x138>)
1000b6b0:	18ba      	adds	r2, r7, r2
1000b6b2:	465b      	mov	r3, fp
1000b6b4:	8818      	ldrh	r0, [r3, #0]
1000b6b6:	2300      	movs	r3, #0
1000b6b8:	a901      	add	r1, sp, #4
1000b6ba:	4c0d      	ldr	r4, [pc, #52]	; (1000b6f0 <ble_pair_request_handler+0x140>)
1000b6bc:	47a0      	blx	r4
1000b6be:	2800      	cmp	r0, #0
1000b6c0:	d00a      	beq.n	1000b6d8 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000b6c2:	ab01      	add	r3, sp, #4
1000b6c4:	2200      	movs	r2, #0
1000b6c6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b6c8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b6ca:	480a      	ldr	r0, [pc, #40]	; (1000b6f4 <ble_pair_request_handler+0x144>)
1000b6cc:	4b0a      	ldr	r3, [pc, #40]	; (1000b6f8 <ble_pair_request_handler+0x148>)
1000b6ce:	4798      	blx	r3
1000b6d0:	480a      	ldr	r0, [pc, #40]	; (1000b6fc <ble_pair_request_handler+0x14c>)
1000b6d2:	4b0b      	ldr	r3, [pc, #44]	; (1000b700 <ble_pair_request_handler+0x150>)
1000b6d4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b6d6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b6d8:	b005      	add	sp, #20
1000b6da:	bc3c      	pop	{r2, r3, r4, r5}
1000b6dc:	4690      	mov	r8, r2
1000b6de:	4699      	mov	r9, r3
1000b6e0:	46a2      	mov	sl, r4
1000b6e2:	46ab      	mov	fp, r5
1000b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6e6:	46c0      	nop			; (mov r8, r8)
1000b6e8:	1001d8a8 	.word	0x1001d8a8
1000b6ec:	100188dd 	.word	0x100188dd
1000b6f0:	1000f499 	.word	0x1000f499
1000b6f4:	10019a70 	.word	0x10019a70
1000b6f8:	100188c9 	.word	0x100188c9
1000b6fc:	1001ac78 	.word	0x1001ac78
1000b700:	100187a9 	.word	0x100187a9

1000b704 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b704:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b706:	b085      	sub	sp, #20
1000b708:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b70a:	2206      	movs	r2, #6
1000b70c:	493d      	ldr	r1, [pc, #244]	; (1000b804 <ble_pair_key_request_handler+0x100>)
1000b70e:	a802      	add	r0, sp, #8
1000b710:	4e3d      	ldr	r6, [pc, #244]	; (1000b808 <ble_pair_key_request_handler+0x104>)
1000b712:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b714:	ac01      	add	r4, sp, #4
1000b716:	2204      	movs	r2, #4
1000b718:	0029      	movs	r1, r5
1000b71a:	0020      	movs	r0, r4
1000b71c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b71e:	78e3      	ldrb	r3, [r4, #3]
1000b720:	2b00      	cmp	r3, #0
1000b722:	d162      	bne.n	1000b7ea <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b724:	4839      	ldr	r0, [pc, #228]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b726:	4b3a      	ldr	r3, [pc, #232]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b728:	4798      	blx	r3
1000b72a:	483a      	ldr	r0, [pc, #232]	; (1000b814 <ble_pair_key_request_handler+0x110>)
1000b72c:	4b3a      	ldr	r3, [pc, #232]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b72e:	4798      	blx	r3
1000b730:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b732:	4c3a      	ldr	r4, [pc, #232]	; (1000b81c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000b734:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b736:	201e      	movs	r0, #30
1000b738:	47a0      	blx	r4
1000b73a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b73c:	2b00      	cmp	r3, #0
1000b73e:	d11a      	bne.n	1000b776 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000b740:	4f32      	ldr	r7, [pc, #200]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b742:	0038      	movs	r0, r7
1000b744:	4e32      	ldr	r6, [pc, #200]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b746:	47b0      	blx	r6
1000b748:	4835      	ldr	r0, [pc, #212]	; (1000b820 <ble_pair_key_request_handler+0x11c>)
1000b74a:	4c33      	ldr	r4, [pc, #204]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b74c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000b74e:	0038      	movs	r0, r7
1000b750:	47b0      	blx	r6
1000b752:	4834      	ldr	r0, [pc, #208]	; (1000b824 <ble_pair_key_request_handler+0x120>)
1000b754:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000b756:	8828      	ldrh	r0, [r5, #0]
1000b758:	2113      	movs	r1, #19
1000b75a:	4b33      	ldr	r3, [pc, #204]	; (1000b828 <ble_pair_key_request_handler+0x124>)
1000b75c:	4798      	blx	r3
1000b75e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b760:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b762:	2b00      	cmp	r3, #0
1000b764:	d04c      	beq.n	1000b800 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b766:	4829      	ldr	r0, [pc, #164]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b768:	4b29      	ldr	r3, [pc, #164]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b76a:	4798      	blx	r3
1000b76c:	482f      	ldr	r0, [pc, #188]	; (1000b82c <ble_pair_key_request_handler+0x128>)
1000b76e:	4b2a      	ldr	r3, [pc, #168]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b770:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000b772:	20e2      	movs	r0, #226	; 0xe2
1000b774:	e044      	b.n	1000b800 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b776:	001a      	movs	r2, r3
1000b778:	3a30      	subs	r2, #48	; 0x30
1000b77a:	2a09      	cmp	r2, #9
1000b77c:	d8db      	bhi.n	1000b736 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000b77e:	aa02      	add	r2, sp, #8
1000b780:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000b782:	4038      	ands	r0, r7
1000b784:	4b2a      	ldr	r3, [pc, #168]	; (1000b830 <ble_pair_key_request_handler+0x12c>)
1000b786:	4798      	blx	r3
1000b788:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b78a:	2e06      	cmp	r6, #6
1000b78c:	d026      	beq.n	1000b7dc <ble_pair_key_request_handler+0xd8>
1000b78e:	e7d2      	b.n	1000b736 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b790:	481e      	ldr	r0, [pc, #120]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b792:	4b1f      	ldr	r3, [pc, #124]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b794:	4798      	blx	r3
1000b796:	4827      	ldr	r0, [pc, #156]	; (1000b834 <ble_pair_key_request_handler+0x130>)
1000b798:	4b1f      	ldr	r3, [pc, #124]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b79a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b79c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b79e:	4e24      	ldr	r6, [pc, #144]	; (1000b830 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000b7a0:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b7a2:	5ce0      	ldrb	r0, [r4, r3]
1000b7a4:	47b0      	blx	r6
1000b7a6:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b7a8:	2c06      	cmp	r4, #6
1000b7aa:	d1f9      	bne.n	1000b7a0 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b7ac:	ab01      	add	r3, sp, #4
1000b7ae:	7899      	ldrb	r1, [r3, #2]
1000b7b0:	8828      	ldrh	r0, [r5, #0]
1000b7b2:	aa02      	add	r2, sp, #8
1000b7b4:	4b20      	ldr	r3, [pc, #128]	; (1000b838 <ble_pair_key_request_handler+0x134>)
1000b7b6:	4798      	blx	r3
1000b7b8:	2800      	cmp	r0, #0
1000b7ba:	d021      	beq.n	1000b800 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000b7bc:	4813      	ldr	r0, [pc, #76]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b7be:	4b14      	ldr	r3, [pc, #80]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b7c0:	4798      	blx	r3
1000b7c2:	481e      	ldr	r0, [pc, #120]	; (1000b83c <ble_pair_key_request_handler+0x138>)
1000b7c4:	4b14      	ldr	r3, [pc, #80]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b7c6:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b7c8:	2000      	movs	r0, #0
1000b7ca:	e019      	b.n	1000b800 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b7cc:	480f      	ldr	r0, [pc, #60]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b7ce:	4b10      	ldr	r3, [pc, #64]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b7d0:	4798      	blx	r3
1000b7d2:	481b      	ldr	r0, [pc, #108]	; (1000b840 <ble_pair_key_request_handler+0x13c>)
1000b7d4:	4b10      	ldr	r3, [pc, #64]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b7d6:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b7d8:	2000      	movs	r0, #0
1000b7da:	e011      	b.n	1000b800 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b7dc:	480b      	ldr	r0, [pc, #44]	; (1000b80c <ble_pair_key_request_handler+0x108>)
1000b7de:	4b0c      	ldr	r3, [pc, #48]	; (1000b810 <ble_pair_key_request_handler+0x10c>)
1000b7e0:	4798      	blx	r3
1000b7e2:	4818      	ldr	r0, [pc, #96]	; (1000b844 <ble_pair_key_request_handler+0x140>)
1000b7e4:	4b0c      	ldr	r3, [pc, #48]	; (1000b818 <ble_pair_key_request_handler+0x114>)
1000b7e6:	4798      	blx	r3
1000b7e8:	e7d8      	b.n	1000b79c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b7ea:	ab01      	add	r3, sp, #4
1000b7ec:	885a      	ldrh	r2, [r3, #2]
1000b7ee:	2380      	movs	r3, #128	; 0x80
1000b7f0:	005b      	lsls	r3, r3, #1
1000b7f2:	429a      	cmp	r2, r3
1000b7f4:	d0cc      	beq.n	1000b790 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b7f6:	ab01      	add	r3, sp, #4
1000b7f8:	789b      	ldrb	r3, [r3, #2]
1000b7fa:	2b01      	cmp	r3, #1
1000b7fc:	d0e6      	beq.n	1000b7cc <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b7fe:	2000      	movs	r0, #0
}
1000b800:	b005      	add	sp, #20
1000b802:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b804:	1001aa2c 	.word	0x1001aa2c
1000b808:	10018623 	.word	0x10018623
1000b80c:	10019a70 	.word	0x10019a70
1000b810:	100188c9 	.word	0x100188c9
1000b814:	1001aca0 	.word	0x1001aca0
1000b818:	100187a9 	.word	0x100187a9
1000b81c:	1000c31d 	.word	0x1000c31d
1000b820:	1001acc8 	.word	0x1001acc8
1000b824:	1001acd4 	.word	0x1001acd4
1000b828:	1000f12d 	.word	0x1000f12d
1000b82c:	1001abbc 	.word	0x1001abbc
1000b830:	100187dd 	.word	0x100187dd
1000b834:	1001ace8 	.word	0x1001ace8
1000b838:	1000f5c9 	.word	0x1000f5c9
1000b83c:	1001ad20 	.word	0x1001ad20
1000b840:	1001ad38 	.word	0x1001ad38
1000b844:	1001ad54 	.word	0x1001ad54

1000b848 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b84a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b84c:	8805      	ldrh	r5, [r0, #0]
1000b84e:	4b2f      	ldr	r3, [pc, #188]	; (1000b90c <ble_encryption_request_handler+0xc4>)
1000b850:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b852:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b854:	0010      	movs	r0, r2
1000b856:	8919      	ldrh	r1, [r3, #8]
1000b858:	42a9      	cmp	r1, r5
1000b85a:	d116      	bne.n	1000b88a <ble_encryption_request_handler+0x42>
1000b85c:	0019      	movs	r1, r3
1000b85e:	315e      	adds	r1, #94	; 0x5e
1000b860:	7809      	ldrb	r1, [r1, #0]
1000b862:	2901      	cmp	r1, #1
1000b864:	d911      	bls.n	1000b88a <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b866:	4929      	ldr	r1, [pc, #164]	; (1000b90c <ble_encryption_request_handler+0xc4>)
1000b868:	0152      	lsls	r2, r2, #5
1000b86a:	1a10      	subs	r0, r2, r0
1000b86c:	0080      	lsls	r0, r0, #2
1000b86e:	1808      	adds	r0, r1, r0
1000b870:	305e      	adds	r0, #94	; 0x5e
1000b872:	2306      	movs	r3, #6
1000b874:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b876:	0162      	lsls	r2, r4, #5
1000b878:	1b13      	subs	r3, r2, r4
1000b87a:	009b      	lsls	r3, r3, #2
1000b87c:	18cb      	adds	r3, r1, r3
1000b87e:	3370      	adds	r3, #112	; 0x70
1000b880:	881a      	ldrh	r2, [r3, #0]
1000b882:	8873      	ldrh	r3, [r6, #2]
1000b884:	429a      	cmp	r2, r3
1000b886:	d113      	bne.n	1000b8b0 <ble_encryption_request_handler+0x68>
1000b888:	e006      	b.n	1000b898 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b88a:	3401      	adds	r4, #1
1000b88c:	b2e4      	uxtb	r4, r4
1000b88e:	3201      	adds	r2, #1
1000b890:	337c      	adds	r3, #124	; 0x7c
1000b892:	2c05      	cmp	r4, #5
1000b894:	d1de      	bne.n	1000b854 <ble_encryption_request_handler+0xc>
1000b896:	e00b      	b.n	1000b8b0 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b898:	0161      	lsls	r1, r4, #5
1000b89a:	1b09      	subs	r1, r1, r4
1000b89c:	0089      	lsls	r1, r1, #2
1000b89e:	4b1b      	ldr	r3, [pc, #108]	; (1000b90c <ble_encryption_request_handler+0xc4>)
1000b8a0:	1859      	adds	r1, r3, r1
1000b8a2:	3172      	adds	r1, #114	; 0x72
1000b8a4:	1d30      	adds	r0, r6, #4
1000b8a6:	2208      	movs	r2, #8
1000b8a8:	4b19      	ldr	r3, [pc, #100]	; (1000b910 <ble_encryption_request_handler+0xc8>)
1000b8aa:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000b8ac:	2800      	cmp	r0, #0
1000b8ae:	d015      	beq.n	1000b8dc <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b8b0:	4f18      	ldr	r7, [pc, #96]	; (1000b914 <ble_encryption_request_handler+0xcc>)
1000b8b2:	0038      	movs	r0, r7
1000b8b4:	4e18      	ldr	r6, [pc, #96]	; (1000b918 <ble_encryption_request_handler+0xd0>)
1000b8b6:	47b0      	blx	r6
1000b8b8:	4818      	ldr	r0, [pc, #96]	; (1000b91c <ble_encryption_request_handler+0xd4>)
1000b8ba:	4d19      	ldr	r5, [pc, #100]	; (1000b920 <ble_encryption_request_handler+0xd8>)
1000b8bc:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b8be:	0038      	movs	r0, r7
1000b8c0:	47b0      	blx	r6
1000b8c2:	4818      	ldr	r0, [pc, #96]	; (1000b924 <ble_encryption_request_handler+0xdc>)
1000b8c4:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b8c6:	0163      	lsls	r3, r4, #5
1000b8c8:	1b1c      	subs	r4, r3, r4
1000b8ca:	00a4      	lsls	r4, r4, #2
1000b8cc:	4b0f      	ldr	r3, [pc, #60]	; (1000b90c <ble_encryption_request_handler+0xc4>)
1000b8ce:	191c      	adds	r4, r3, r4
1000b8d0:	8920      	ldrh	r0, [r4, #8]
1000b8d2:	2105      	movs	r1, #5
1000b8d4:	4b14      	ldr	r3, [pc, #80]	; (1000b928 <ble_encryption_request_handler+0xe0>)
1000b8d6:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b8d8:	20e2      	movs	r0, #226	; 0xe2
1000b8da:	e016      	b.n	1000b90a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b8dc:	0162      	lsls	r2, r4, #5
1000b8de:	1b13      	subs	r3, r2, r4
1000b8e0:	009b      	lsls	r3, r3, #2
1000b8e2:	3360      	adds	r3, #96	; 0x60
1000b8e4:	4909      	ldr	r1, [pc, #36]	; (1000b90c <ble_encryption_request_handler+0xc4>)
1000b8e6:	185b      	adds	r3, r3, r1
1000b8e8:	1b14      	subs	r4, r2, r4
1000b8ea:	00a4      	lsls	r4, r4, #2
1000b8ec:	190c      	adds	r4, r1, r4
1000b8ee:	7d21      	ldrb	r1, [r4, #20]
1000b8f0:	8830      	ldrh	r0, [r6, #0]
1000b8f2:	2201      	movs	r2, #1
1000b8f4:	4c0d      	ldr	r4, [pc, #52]	; (1000b92c <ble_encryption_request_handler+0xe4>)
1000b8f6:	47a0      	blx	r4
1000b8f8:	2800      	cmp	r0, #0
1000b8fa:	d006      	beq.n	1000b90a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b8fc:	4805      	ldr	r0, [pc, #20]	; (1000b914 <ble_encryption_request_handler+0xcc>)
1000b8fe:	4b06      	ldr	r3, [pc, #24]	; (1000b918 <ble_encryption_request_handler+0xd0>)
1000b900:	4798      	blx	r3
1000b902:	480b      	ldr	r0, [pc, #44]	; (1000b930 <ble_encryption_request_handler+0xe8>)
1000b904:	4b06      	ldr	r3, [pc, #24]	; (1000b920 <ble_encryption_request_handler+0xd8>)
1000b906:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b908:	2000      	movs	r0, #0
}
1000b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b90c:	1001d8a8 	.word	0x1001d8a8
1000b910:	10018605 	.word	0x10018605
1000b914:	10019a70 	.word	0x10019a70
1000b918:	100188c9 	.word	0x100188c9
1000b91c:	1001ad68 	.word	0x1001ad68
1000b920:	100187a9 	.word	0x100187a9
1000b924:	1001ada0 	.word	0x1001ada0
1000b928:	1000f12d 	.word	0x1000f12d
1000b92c:	1000f6fd 	.word	0x1000f6fd
1000b930:	1001adf8 	.word	0x1001adf8

1000b934 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000b934:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000b936:	2a00      	cmp	r2, #0
1000b938:	d047      	beq.n	1000b9ca <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000b93a:	2906      	cmp	r1, #6
1000b93c:	d847      	bhi.n	1000b9ce <ble_mgr_events_callback_handler+0x9a>
1000b93e:	0089      	lsls	r1, r1, #2
1000b940:	4b28      	ldr	r3, [pc, #160]	; (1000b9e4 <ble_mgr_events_callback_handler+0xb0>)
1000b942:	585b      	ldr	r3, [r3, r1]
1000b944:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000b946:	4b28      	ldr	r3, [pc, #160]	; (1000b9e8 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000b948:	2405      	movs	r4, #5
1000b94a:	e00a      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000b94c:	4b27      	ldr	r3, [pc, #156]	; (1000b9ec <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000b94e:	2401      	movs	r4, #1
			}
			break;
1000b950:	e007      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000b952:	4b27      	ldr	r3, [pc, #156]	; (1000b9f0 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000b954:	2405      	movs	r4, #5
			}
			break;
1000b956:	e004      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000b958:	4b26      	ldr	r3, [pc, #152]	; (1000b9f4 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000b95a:	2401      	movs	r4, #1
			}
			break;
1000b95c:	e001      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000b95e:	4b26      	ldr	r3, [pc, #152]	; (1000b9f8 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000b960:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000b962:	2800      	cmp	r0, #0
1000b964:	d116      	bne.n	1000b994 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b966:	6819      	ldr	r1, [r3, #0]
1000b968:	2900      	cmp	r1, #0
1000b96a:	d10b      	bne.n	1000b984 <ble_mgr_events_callback_handler+0x50>
1000b96c:	e006      	b.n	1000b97c <ble_mgr_events_callback_handler+0x48>
1000b96e:	001d      	movs	r5, r3
1000b970:	3304      	adds	r3, #4
1000b972:	1f18      	subs	r0, r3, #4
1000b974:	6800      	ldr	r0, [r0, #0]
1000b976:	2800      	cmp	r0, #0
1000b978:	d106      	bne.n	1000b988 <ble_mgr_events_callback_handler+0x54>
1000b97a:	e000      	b.n	1000b97e <ble_mgr_events_callback_handler+0x4a>
1000b97c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b97e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000b980:	2101      	movs	r1, #1
						break;
1000b982:	e02c      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
1000b984:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b986:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b988:	3101      	adds	r1, #1
1000b98a:	b2c9      	uxtb	r1, r1
1000b98c:	42a1      	cmp	r1, r4
1000b98e:	d3ee      	bcc.n	1000b96e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b990:	2100      	movs	r1, #0
1000b992:	e024      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
1000b994:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000b996:	2801      	cmp	r0, #1
1000b998:	d121      	bne.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b99a:	6819      	ldr	r1, [r3, #0]
1000b99c:	428a      	cmp	r2, r1
1000b99e:	d10c      	bne.n	1000b9ba <ble_mgr_events_callback_handler+0x86>
1000b9a0:	e006      	b.n	1000b9b0 <ble_mgr_events_callback_handler+0x7c>
1000b9a2:	001d      	movs	r5, r3
1000b9a4:	3304      	adds	r3, #4
1000b9a6:	1f18      	subs	r0, r3, #4
1000b9a8:	6800      	ldr	r0, [r0, #0]
1000b9aa:	4282      	cmp	r2, r0
1000b9ac:	d107      	bne.n	1000b9be <ble_mgr_events_callback_handler+0x8a>
1000b9ae:	e000      	b.n	1000b9b2 <ble_mgr_events_callback_handler+0x7e>
1000b9b0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000b9b2:	2300      	movs	r3, #0
1000b9b4:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000b9b6:	2101      	movs	r1, #1
						break;
1000b9b8:	e011      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
1000b9ba:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b9bc:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b9be:	3101      	adds	r1, #1
1000b9c0:	b2c9      	uxtb	r1, r1
1000b9c2:	42a1      	cmp	r1, r4
1000b9c4:	d3ed      	bcc.n	1000b9a2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b9c6:	2100      	movs	r1, #0
1000b9c8:	e009      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000b9ca:	2100      	movs	r1, #0
1000b9cc:	e007      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000b9ce:	2100      	movs	r1, #0
1000b9d0:	e005      	b.n	1000b9de <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000b9d2:	4b0a      	ldr	r3, [pc, #40]	; (1000b9fc <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000b9d4:	2405      	movs	r4, #5
1000b9d6:	e7c4      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000b9d8:	4b09      	ldr	r3, [pc, #36]	; (1000ba00 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000b9da:	2401      	movs	r4, #1
1000b9dc:	e7c1      	b.n	1000b962 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000b9de:	0008      	movs	r0, r1
1000b9e0:	bd30      	pop	{r4, r5, pc}
1000b9e2:	46c0      	nop			; (mov r8, r8)
1000b9e4:	1001a920 	.word	0x1001a920
1000b9e8:	1001d894 	.word	0x1001d894
1000b9ec:	1001d890 	.word	0x1001d890
1000b9f0:	1001db18 	.word	0x1001db18
1000b9f4:	1001e0cc 	.word	0x1001e0cc
1000b9f8:	1001db2c 	.word	0x1001db2c
1000b9fc:	1001db40 	.word	0x1001db40
1000ba00:	1001db88 	.word	0x1001db88

1000ba04 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba06:	465f      	mov	r7, fp
1000ba08:	4656      	mov	r6, sl
1000ba0a:	464d      	mov	r5, r9
1000ba0c:	4644      	mov	r4, r8
1000ba0e:	b4f0      	push	{r4, r5, r6, r7}
1000ba10:	b091      	sub	sp, #68	; 0x44
1000ba12:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ba14:	2400      	movs	r4, #0
1000ba16:	4b7a      	ldr	r3, [pc, #488]	; (1000bc00 <ble_device_init+0x1fc>)
1000ba18:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ba1a:	2207      	movs	r2, #7
1000ba1c:	2100      	movs	r1, #0
1000ba1e:	4879      	ldr	r0, [pc, #484]	; (1000bc04 <ble_device_init+0x200>)
1000ba20:	4e79      	ldr	r6, [pc, #484]	; (1000bc08 <ble_device_init+0x204>)
1000ba22:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000ba24:	2212      	movs	r2, #18
1000ba26:	2100      	movs	r1, #0
1000ba28:	4878      	ldr	r0, [pc, #480]	; (1000bc0c <ble_device_init+0x208>)
1000ba2a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000ba2c:	4b78      	ldr	r3, [pc, #480]	; (1000bc10 <ble_device_init+0x20c>)
1000ba2e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ba30:	22cd      	movs	r2, #205	; 0xcd
1000ba32:	0092      	lsls	r2, r2, #2
1000ba34:	2100      	movs	r1, #0
1000ba36:	4877      	ldr	r0, [pc, #476]	; (1000bc14 <ble_device_init+0x210>)
1000ba38:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ba3a:	4b77      	ldr	r3, [pc, #476]	; (1000bc18 <ble_device_init+0x214>)
1000ba3c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ba3e:	2283      	movs	r2, #131	; 0x83
1000ba40:	0092      	lsls	r2, r2, #2
1000ba42:	2100      	movs	r1, #0
1000ba44:	4875      	ldr	r0, [pc, #468]	; (1000bc1c <ble_device_init+0x218>)
1000ba46:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ba48:	4b75      	ldr	r3, [pc, #468]	; (1000bc20 <ble_device_init+0x21c>)
1000ba4a:	469b      	mov	fp, r3
1000ba4c:	2380      	movs	r3, #128	; 0x80
1000ba4e:	00db      	lsls	r3, r3, #3
1000ba50:	469a      	mov	sl, r3
1000ba52:	001a      	movs	r2, r3
1000ba54:	2100      	movs	r1, #0
1000ba56:	4658      	mov	r0, fp
1000ba58:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000ba5a:	4b72      	ldr	r3, [pc, #456]	; (1000bc24 <ble_device_init+0x220>)
1000ba5c:	4699      	mov	r9, r3
1000ba5e:	2380      	movs	r3, #128	; 0x80
1000ba60:	015b      	lsls	r3, r3, #5
1000ba62:	4698      	mov	r8, r3
1000ba64:	001a      	movs	r2, r3
1000ba66:	2100      	movs	r1, #0
1000ba68:	4648      	mov	r0, r9
1000ba6a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ba6c:	4f6e      	ldr	r7, [pc, #440]	; (1000bc28 <ble_device_init+0x224>)
1000ba6e:	221c      	movs	r2, #28
1000ba70:	2100      	movs	r1, #0
1000ba72:	0038      	movs	r0, r7
1000ba74:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ba76:	465b      	mov	r3, fp
1000ba78:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ba7a:	4653      	mov	r3, sl
1000ba7c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ba7e:	464b      	mov	r3, r9
1000ba80:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ba82:	4643      	mov	r3, r8
1000ba84:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ba86:	4b69      	ldr	r3, [pc, #420]	; (1000bc2c <ble_device_init+0x228>)
1000ba88:	601c      	str	r4, [r3, #0]
1000ba8a:	605c      	str	r4, [r3, #4]
1000ba8c:	609c      	str	r4, [r3, #8]
1000ba8e:	60dc      	str	r4, [r3, #12]
1000ba90:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ba92:	4b67      	ldr	r3, [pc, #412]	; (1000bc30 <ble_device_init+0x22c>)
1000ba94:	601c      	str	r4, [r3, #0]
1000ba96:	605c      	str	r4, [r3, #4]
1000ba98:	609c      	str	r4, [r3, #8]
1000ba9a:	60dc      	str	r4, [r3, #12]
1000ba9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ba9e:	4b65      	ldr	r3, [pc, #404]	; (1000bc34 <ble_device_init+0x230>)
1000baa0:	601c      	str	r4, [r3, #0]
1000baa2:	605c      	str	r4, [r3, #4]
1000baa4:	609c      	str	r4, [r3, #8]
1000baa6:	60dc      	str	r4, [r3, #12]
1000baa8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000baaa:	4b63      	ldr	r3, [pc, #396]	; (1000bc38 <ble_device_init+0x234>)
1000baac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000baae:	4b63      	ldr	r3, [pc, #396]	; (1000bc3c <ble_device_init+0x238>)
1000bab0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000bab2:	4b63      	ldr	r3, [pc, #396]	; (1000bc40 <ble_device_init+0x23c>)
1000bab4:	601c      	str	r4, [r3, #0]
1000bab6:	605c      	str	r4, [r3, #4]
1000bab8:	609c      	str	r4, [r3, #8]
1000baba:	60dc      	str	r4, [r3, #12]
1000babc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000babe:	4b61      	ldr	r3, [pc, #388]	; (1000bc44 <ble_device_init+0x240>)
1000bac0:	601c      	str	r4, [r3, #0]
1000bac2:	4c61      	ldr	r4, [pc, #388]	; (1000bc48 <ble_device_init+0x244>)
1000bac4:	239b      	movs	r3, #155	; 0x9b
1000bac6:	009b      	lsls	r3, r3, #2
1000bac8:	4698      	mov	r8, r3
1000baca:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000bacc:	4f4e      	ldr	r7, [pc, #312]	; (1000bc08 <ble_device_init+0x204>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000bace:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000bad0:	227c      	movs	r2, #124	; 0x7c
1000bad2:	2100      	movs	r1, #0
1000bad4:	0020      	movs	r0, r4
1000bad6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bad8:	0023      	movs	r3, r4
1000bada:	335e      	adds	r3, #94	; 0x5e
1000badc:	2200      	movs	r2, #0
1000bade:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000bae0:	7626      	strb	r6, [r4, #24]
1000bae2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bae4:	45a0      	cmp	r8, r4
1000bae6:	d1f3      	bne.n	1000bad0 <ble_device_init+0xcc>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000bae8:	4b58      	ldr	r3, [pc, #352]	; (1000bc4c <ble_device_init+0x248>)
1000baea:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000baec:	4858      	ldr	r0, [pc, #352]	; (1000bc50 <ble_device_init+0x24c>)
1000baee:	4b59      	ldr	r3, [pc, #356]	; (1000bc54 <ble_device_init+0x250>)
1000baf0:	4798      	blx	r3
1000baf2:	4859      	ldr	r0, [pc, #356]	; (1000bc58 <ble_device_init+0x254>)
1000baf4:	4b59      	ldr	r3, [pc, #356]	; (1000bc5c <ble_device_init+0x258>)
1000baf6:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000baf8:	484b      	ldr	r0, [pc, #300]	; (1000bc28 <ble_device_init+0x224>)
1000bafa:	4b59      	ldr	r3, [pc, #356]	; (1000bc60 <ble_device_init+0x25c>)
1000bafc:	4798      	blx	r3
1000bafe:	2800      	cmp	r0, #0
1000bb00:	d00b      	beq.n	1000bb1a <ble_device_init+0x116>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000bb02:	4e53      	ldr	r6, [pc, #332]	; (1000bc50 <ble_device_init+0x24c>)
1000bb04:	0030      	movs	r0, r6
1000bb06:	4d53      	ldr	r5, [pc, #332]	; (1000bc54 <ble_device_init+0x250>)
1000bb08:	47a8      	blx	r5
1000bb0a:	4856      	ldr	r0, [pc, #344]	; (1000bc64 <ble_device_init+0x260>)
1000bb0c:	4c53      	ldr	r4, [pc, #332]	; (1000bc5c <ble_device_init+0x258>)
1000bb0e:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000bb10:	0030      	movs	r0, r6
1000bb12:	47a8      	blx	r5
1000bb14:	4854      	ldr	r0, [pc, #336]	; (1000bc68 <ble_device_init+0x264>)
1000bb16:	47a0      	blx	r4
1000bb18:	e7fe      	b.n	1000bb18 <ble_device_init+0x114>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000bb1a:	4a54      	ldr	r2, [pc, #336]	; (1000bc6c <ble_device_init+0x268>)
1000bb1c:	2100      	movs	r1, #0
1000bb1e:	2000      	movs	r0, #0
1000bb20:	4c53      	ldr	r4, [pc, #332]	; (1000bc70 <ble_device_init+0x26c>)
1000bb22:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000bb24:	4a53      	ldr	r2, [pc, #332]	; (1000bc74 <ble_device_init+0x270>)
1000bb26:	2102      	movs	r1, #2
1000bb28:	2000      	movs	r0, #0
1000bb2a:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000bb2c:	2109      	movs	r1, #9
1000bb2e:	4852      	ldr	r0, [pc, #328]	; (1000bc78 <ble_device_init+0x274>)
1000bb30:	4b52      	ldr	r3, [pc, #328]	; (1000bc7c <ble_device_init+0x278>)
1000bb32:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000bb34:	2800      	cmp	r0, #0
1000bb36:	d005      	beq.n	1000bb44 <ble_device_init+0x140>
	{
		DBG_LOG("Device name set failed");
1000bb38:	4845      	ldr	r0, [pc, #276]	; (1000bc50 <ble_device_init+0x24c>)
1000bb3a:	4b46      	ldr	r3, [pc, #280]	; (1000bc54 <ble_device_init+0x250>)
1000bb3c:	4798      	blx	r3
1000bb3e:	4850      	ldr	r0, [pc, #320]	; (1000bc80 <ble_device_init+0x27c>)
1000bb40:	4b46      	ldr	r3, [pc, #280]	; (1000bc5c <ble_device_init+0x258>)
1000bb42:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000bb44:	2207      	movs	r2, #7
1000bb46:	494f      	ldr	r1, [pc, #316]	; (1000bc84 <ble_device_init+0x280>)
1000bb48:	3108      	adds	r1, #8
1000bb4a:	a804      	add	r0, sp, #16
1000bb4c:	4b4e      	ldr	r3, [pc, #312]	; (1000bc88 <ble_device_init+0x284>)
1000bb4e:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000bb50:	2226      	movs	r2, #38	; 0x26
1000bb52:	2100      	movs	r1, #0
1000bb54:	a806      	add	r0, sp, #24
1000bb56:	4b2c      	ldr	r3, [pc, #176]	; (1000bc08 <ble_device_init+0x204>)
1000bb58:	4798      	blx	r3
	
	if (addr == NULL)
1000bb5a:	2d00      	cmp	r5, #0
1000bb5c:	d10c      	bne.n	1000bb78 <ble_device_init+0x174>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bb5e:	a804      	add	r0, sp, #16
1000bb60:	4b4a      	ldr	r3, [pc, #296]	; (1000bc8c <ble_device_init+0x288>)
1000bb62:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000bb64:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bb66:	2800      	cmp	r0, #0
1000bb68:	d006      	beq.n	1000bb78 <ble_device_init+0x174>
		{
			DBG_LOG("BD address get failed");
1000bb6a:	4839      	ldr	r0, [pc, #228]	; (1000bc50 <ble_device_init+0x24c>)
1000bb6c:	4b39      	ldr	r3, [pc, #228]	; (1000bc54 <ble_device_init+0x250>)
1000bb6e:	4798      	blx	r3
1000bb70:	4847      	ldr	r0, [pc, #284]	; (1000bc90 <ble_device_init+0x28c>)
1000bb72:	4b3a      	ldr	r3, [pc, #232]	; (1000bc5c <ble_device_init+0x258>)
1000bb74:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000bb76:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000bb78:	4835      	ldr	r0, [pc, #212]	; (1000bc50 <ble_device_init+0x24c>)
1000bb7a:	4b36      	ldr	r3, [pc, #216]	; (1000bc54 <ble_device_init+0x250>)
1000bb7c:	4798      	blx	r3
1000bb7e:	792b      	ldrb	r3, [r5, #4]
1000bb80:	796a      	ldrb	r2, [r5, #5]
1000bb82:	79a9      	ldrb	r1, [r5, #6]
1000bb84:	7828      	ldrb	r0, [r5, #0]
1000bb86:	9003      	str	r0, [sp, #12]
1000bb88:	7868      	ldrb	r0, [r5, #1]
1000bb8a:	9002      	str	r0, [sp, #8]
1000bb8c:	78a8      	ldrb	r0, [r5, #2]
1000bb8e:	9001      	str	r0, [sp, #4]
1000bb90:	78e8      	ldrb	r0, [r5, #3]
1000bb92:	9000      	str	r0, [sp, #0]
1000bb94:	483f      	ldr	r0, [pc, #252]	; (1000bc94 <ble_device_init+0x290>)
1000bb96:	4c31      	ldr	r4, [pc, #196]	; (1000bc5c <ble_device_init+0x258>)
1000bb98:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000bb9a:	ac06      	add	r4, sp, #24
1000bb9c:	230a      	movs	r3, #10
1000bb9e:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000bba0:	4b3d      	ldr	r3, [pc, #244]	; (1000bc98 <ble_device_init+0x294>)
1000bba2:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000bba4:	2207      	movs	r2, #7
1000bba6:	0029      	movs	r1, r5
1000bba8:	a807      	add	r0, sp, #28
1000bbaa:	4b37      	ldr	r3, [pc, #220]	; (1000bc88 <ble_device_init+0x284>)
1000bbac:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000bbae:	2300      	movs	r3, #0
1000bbb0:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000bbb2:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000bbb4:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000bbb6:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000bbb8:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bbba:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bbbc:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000bbbe:	2380      	movs	r3, #128	; 0x80
1000bbc0:	009b      	lsls	r3, r3, #2
1000bbc2:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000bbc4:	0020      	movs	r0, r4
1000bbc6:	4b35      	ldr	r3, [pc, #212]	; (1000bc9c <ble_device_init+0x298>)
1000bbc8:	4798      	blx	r3
1000bbca:	2800      	cmp	r0, #0
1000bbcc:	d005      	beq.n	1000bbda <ble_device_init+0x1d6>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000bbce:	4820      	ldr	r0, [pc, #128]	; (1000bc50 <ble_device_init+0x24c>)
1000bbd0:	4b20      	ldr	r3, [pc, #128]	; (1000bc54 <ble_device_init+0x250>)
1000bbd2:	4798      	blx	r3
1000bbd4:	4832      	ldr	r0, [pc, #200]	; (1000bca0 <ble_device_init+0x29c>)
1000bbd6:	4b21      	ldr	r3, [pc, #132]	; (1000bc5c <ble_device_init+0x258>)
1000bbd8:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000bbda:	0028      	movs	r0, r5
1000bbdc:	4b31      	ldr	r3, [pc, #196]	; (1000bca4 <ble_device_init+0x2a0>)
1000bbde:	4798      	blx	r3
1000bbe0:	2800      	cmp	r0, #0
1000bbe2:	d005      	beq.n	1000bbf0 <ble_device_init+0x1ec>
	{
		DBG_LOG("Set BLE Device Address failed");
1000bbe4:	481a      	ldr	r0, [pc, #104]	; (1000bc50 <ble_device_init+0x24c>)
1000bbe6:	4b1b      	ldr	r3, [pc, #108]	; (1000bc54 <ble_device_init+0x250>)
1000bbe8:	4798      	blx	r3
1000bbea:	482f      	ldr	r0, [pc, #188]	; (1000bca8 <ble_device_init+0x2a4>)
1000bbec:	4b1b      	ldr	r3, [pc, #108]	; (1000bc5c <ble_device_init+0x258>)
1000bbee:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000bbf0:	b011      	add	sp, #68	; 0x44
1000bbf2:	bc3c      	pop	{r2, r3, r4, r5}
1000bbf4:	4690      	mov	r8, r2
1000bbf6:	4699      	mov	r9, r3
1000bbf8:	46a2      	mov	sl, r4
1000bbfa:	46ab      	mov	fp, r5
1000bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbfe:	46c0      	nop			; (mov r8, r8)
1000bc00:	1001d38c 	.word	0x1001d38c
1000bc04:	1001d394 	.word	0x1001d394
1000bc08:	1001865f 	.word	0x1001865f
1000bc0c:	1001db54 	.word	0x1001db54
1000bc10:	1001d390 	.word	0x1001d390
1000bc14:	1001db8c 	.word	0x1001db8c
1000bc18:	1001db84 	.word	0x1001db84
1000bc1c:	1001dec0 	.word	0x1001dec0
1000bc20:	1001bf8c 	.word	0x1001bf8c
1000bc24:	1001c38c 	.word	0x1001c38c
1000bc28:	1001db68 	.word	0x1001db68
1000bc2c:	1001db2c 	.word	0x1001db2c
1000bc30:	1001db40 	.word	0x1001db40
1000bc34:	1001d894 	.word	0x1001d894
1000bc38:	1001db88 	.word	0x1001db88
1000bc3c:	1001d890 	.word	0x1001d890
1000bc40:	1001db18 	.word	0x1001db18
1000bc44:	1001e0cc 	.word	0x1001e0cc
1000bc48:	1001d8a8 	.word	0x1001d8a8
1000bc4c:	1001db14 	.word	0x1001db14
1000bc50:	10019a70 	.word	0x10019a70
1000bc54:	100188c9 	.word	0x100188c9
1000bc58:	1001ae18 	.word	0x1001ae18
1000bc5c:	100187a9 	.word	0x100187a9
1000bc60:	1000ef05 	.word	0x1000ef05
1000bc64:	1001ae2c 	.word	0x1001ae2c
1000bc68:	1001ae4c 	.word	0x1001ae4c
1000bc6c:	1001b084 	.word	0x1001b084
1000bc70:	1000b935 	.word	0x1000b935
1000bc74:	1001aa48 	.word	0x1001aa48
1000bc78:	1001ae88 	.word	0x1001ae88
1000bc7c:	1000ee1d 	.word	0x1000ee1d
1000bc80:	1001ae94 	.word	0x1001ae94
1000bc84:	1001aa2c 	.word	0x1001aa2c
1000bc88:	10018623 	.word	0x10018623
1000bc8c:	1000ee51 	.word	0x1000ee51
1000bc90:	1001aeac 	.word	0x1001aeac
1000bc94:	1001aec4 	.word	0x1001aec4
1000bc98:	00003a98 	.word	0x00003a98
1000bc9c:	1000ee75 	.word	0x1000ee75
1000bca0:	1001aefc 	.word	0x1001aefc
1000bca4:	1000f0b9 	.word	0x1000f0b9
1000bca8:	1001af20 	.word	0x1001af20

1000bcac <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000bcac:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000bcae:	2201      	movs	r2, #1
1000bcb0:	2101      	movs	r1, #1
1000bcb2:	4b06      	ldr	r3, [pc, #24]	; (1000bccc <ble_send_slave_sec_request+0x20>)
1000bcb4:	4798      	blx	r3
1000bcb6:	2800      	cmp	r0, #0
1000bcb8:	d006      	beq.n	1000bcc8 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000bcba:	4805      	ldr	r0, [pc, #20]	; (1000bcd0 <ble_send_slave_sec_request+0x24>)
1000bcbc:	4b05      	ldr	r3, [pc, #20]	; (1000bcd4 <ble_send_slave_sec_request+0x28>)
1000bcbe:	4798      	blx	r3
1000bcc0:	4805      	ldr	r0, [pc, #20]	; (1000bcd8 <ble_send_slave_sec_request+0x2c>)
1000bcc2:	4b06      	ldr	r3, [pc, #24]	; (1000bcdc <ble_send_slave_sec_request+0x30>)
1000bcc4:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000bcc6:	20e2      	movs	r0, #226	; 0xe2
}
1000bcc8:	bd10      	pop	{r4, pc}
1000bcca:	46c0      	nop			; (mov r8, r8)
1000bccc:	1000f645 	.word	0x1000f645
1000bcd0:	10019a70 	.word	0x10019a70
1000bcd4:	100188c9 	.word	0x100188c9
1000bcd8:	1001af5c 	.word	0x1001af5c
1000bcdc:	100187a9 	.word	0x100187a9

1000bce0 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bce0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bce2:	465f      	mov	r7, fp
1000bce4:	464e      	mov	r6, r9
1000bce6:	4645      	mov	r5, r8
1000bce8:	b4e0      	push	{r5, r6, r7}
1000bcea:	b09a      	sub	sp, #104	; 0x68
1000bcec:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000bcee:	7a86      	ldrb	r6, [r0, #10]
1000bcf0:	2e00      	cmp	r6, #0
1000bcf2:	d000      	beq.n	1000bcf6 <ble_connected_state_handler+0x16>
1000bcf4:	e0c6      	b.n	1000be84 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bcf6:	4875      	ldr	r0, [pc, #468]	; (1000becc <ble_connected_state_handler+0x1ec>)
1000bcf8:	4f75      	ldr	r7, [pc, #468]	; (1000bed0 <ble_connected_state_handler+0x1f0>)
1000bcfa:	47b8      	blx	r7
1000bcfc:	792b      	ldrb	r3, [r5, #4]
1000bcfe:	796a      	ldrb	r2, [r5, #5]
1000bd00:	79a9      	ldrb	r1, [r5, #6]
1000bd02:	7868      	ldrb	r0, [r5, #1]
1000bd04:	9002      	str	r0, [sp, #8]
1000bd06:	78a8      	ldrb	r0, [r5, #2]
1000bd08:	9001      	str	r0, [sp, #4]
1000bd0a:	78e8      	ldrb	r0, [r5, #3]
1000bd0c:	9000      	str	r0, [sp, #0]
1000bd0e:	4871      	ldr	r0, [pc, #452]	; (1000bed4 <ble_connected_state_handler+0x1f4>)
1000bd10:	4c71      	ldr	r4, [pc, #452]	; (1000bed8 <ble_connected_state_handler+0x1f8>)
1000bd12:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000bd14:	486d      	ldr	r0, [pc, #436]	; (1000becc <ble_connected_state_handler+0x1ec>)
1000bd16:	47b8      	blx	r7
1000bd18:	8929      	ldrh	r1, [r5, #8]
1000bd1a:	4870      	ldr	r0, [pc, #448]	; (1000bedc <ble_connected_state_handler+0x1fc>)
1000bd1c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000bd1e:	2212      	movs	r2, #18
1000bd20:	0029      	movs	r1, r5
1000bd22:	486f      	ldr	r0, [pc, #444]	; (1000bee0 <ble_connected_state_handler+0x200>)
1000bd24:	4b6f      	ldr	r3, [pc, #444]	; (1000bee4 <ble_connected_state_handler+0x204>)
1000bd26:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bd28:	9504      	str	r5, [sp, #16]
1000bd2a:	2207      	movs	r2, #7
1000bd2c:	0029      	movs	r1, r5
1000bd2e:	486e      	ldr	r0, [pc, #440]	; (1000bee8 <ble_connected_state_handler+0x208>)
1000bd30:	4b6e      	ldr	r3, [pc, #440]	; (1000beec <ble_connected_state_handler+0x20c>)
1000bd32:	4798      	blx	r3
1000bd34:	2800      	cmp	r0, #0
1000bd36:	d100      	bne.n	1000bd3a <ble_connected_state_handler+0x5a>
1000bd38:	e0ad      	b.n	1000be96 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bd3a:	782b      	ldrb	r3, [r5, #0]
1000bd3c:	2b02      	cmp	r3, #2
1000bd3e:	d000      	beq.n	1000bd42 <ble_connected_state_handler+0x62>
1000bd40:	e0a9      	b.n	1000be96 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bd42:	2250      	movs	r2, #80	; 0x50
1000bd44:	2100      	movs	r1, #0
1000bd46:	a806      	add	r0, sp, #24
1000bd48:	4b69      	ldr	r3, [pc, #420]	; (1000bef0 <ble_connected_state_handler+0x210>)
1000bd4a:	4798      	blx	r3
1000bd4c:	4f69      	ldr	r7, [pc, #420]	; (1000bef4 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bd4e:	2300      	movs	r3, #0
1000bd50:	e00b      	b.n	1000bd6a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bd52:	1c59      	adds	r1, r3, #1
1000bd54:	7814      	ldrb	r4, [r2, #0]
1000bd56:	a806      	add	r0, sp, #24
1000bd58:	54c4      	strb	r4, [r0, r3]
1000bd5a:	3201      	adds	r2, #1
1000bd5c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bd5e:	42b3      	cmp	r3, r6
1000bd60:	d1f7      	bne.n	1000bd52 <ble_connected_state_handler+0x72>
1000bd62:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bd64:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bd66:	2b50      	cmp	r3, #80	; 0x50
1000bd68:	d004      	beq.n	1000bd74 <ble_connected_state_handler+0x94>
1000bd6a:	001e      	movs	r6, r3
1000bd6c:	3610      	adds	r6, #16
1000bd6e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bd70:	003a      	movs	r2, r7
1000bd72:	e7ee      	b.n	1000bd52 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bd74:	aa06      	add	r2, sp, #24
1000bd76:	0029      	movs	r1, r5
1000bd78:	2005      	movs	r0, #5
1000bd7a:	4b5f      	ldr	r3, [pc, #380]	; (1000bef8 <ble_connected_state_handler+0x218>)
1000bd7c:	4798      	blx	r3
1000bd7e:	1e06      	subs	r6, r0, #0
1000bd80:	d100      	bne.n	1000bd84 <ble_connected_state_handler+0xa4>
1000bd82:	e09c      	b.n	1000bebe <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000bd84:	4851      	ldr	r0, [pc, #324]	; (1000becc <ble_connected_state_handler+0x1ec>)
1000bd86:	4b52      	ldr	r3, [pc, #328]	; (1000bed0 <ble_connected_state_handler+0x1f0>)
1000bd88:	4798      	blx	r3
1000bd8a:	485c      	ldr	r0, [pc, #368]	; (1000befc <ble_connected_state_handler+0x21c>)
1000bd8c:	4b52      	ldr	r3, [pc, #328]	; (1000bed8 <ble_connected_state_handler+0x1f8>)
1000bd8e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000bd90:	26e2      	movs	r6, #226	; 0xe2
1000bd92:	e094      	b.n	1000bebe <ble_connected_state_handler+0x1de>
1000bd94:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bd96:	9405      	str	r4, [sp, #20]
1000bd98:	2207      	movs	r2, #7
1000bd9a:	9904      	ldr	r1, [sp, #16]
1000bd9c:	4648      	mov	r0, r9
1000bd9e:	47d8      	blx	fp
1000bda0:	2800      	cmp	r0, #0
1000bda2:	d109      	bne.n	1000bdb8 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bda4:	9a05      	ldr	r2, [sp, #20]
1000bda6:	0153      	lsls	r3, r2, #5
1000bda8:	1a9b      	subs	r3, r3, r2
1000bdaa:	009a      	lsls	r2, r3, #2
1000bdac:	4b54      	ldr	r3, [pc, #336]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000bdae:	189b      	adds	r3, r3, r2
1000bdb0:	335e      	adds	r3, #94	; 0x5e
1000bdb2:	2202      	movs	r2, #2
1000bdb4:	701a      	strb	r2, [r3, #0]
1000bdb6:	e02b      	b.n	1000be10 <ble_connected_state_handler+0x130>
1000bdb8:	3401      	adds	r4, #1
1000bdba:	237c      	movs	r3, #124	; 0x7c
1000bdbc:	469c      	mov	ip, r3
1000bdbe:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bdc0:	2c05      	cmp	r4, #5
1000bdc2:	d1e7      	bne.n	1000bd94 <ble_connected_state_handler+0xb4>
1000bdc4:	e072      	b.n	1000beac <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bdc6:	001c      	movs	r4, r3
1000bdc8:	7811      	ldrb	r1, [r2, #0]
1000bdca:	2900      	cmp	r1, #0
1000bdcc:	d11a      	bne.n	1000be04 <ble_connected_state_handler+0x124>
1000bdce:	e001      	b.n	1000bdd4 <ble_connected_state_handler+0xf4>
1000bdd0:	2400      	movs	r4, #0
1000bdd2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bdd4:	0163      	lsls	r3, r4, #5
1000bdd6:	4699      	mov	r9, r3
1000bdd8:	1b18      	subs	r0, r3, r4
1000bdda:	0080      	lsls	r0, r0, #2
1000bddc:	4b48      	ldr	r3, [pc, #288]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000bdde:	4698      	mov	r8, r3
1000bde0:	4440      	add	r0, r8
1000bde2:	2212      	movs	r2, #18
1000bde4:	0029      	movs	r1, r5
1000bde6:	4b3f      	ldr	r3, [pc, #252]	; (1000bee4 <ble_connected_state_handler+0x204>)
1000bde8:	4798      	blx	r3
						ble_device_count++;
1000bdea:	4a46      	ldr	r2, [pc, #280]	; (1000bf04 <ble_connected_state_handler+0x224>)
1000bdec:	7813      	ldrb	r3, [r2, #0]
1000bdee:	3301      	adds	r3, #1
1000bdf0:	b2db      	uxtb	r3, r3
1000bdf2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bdf4:	464b      	mov	r3, r9
1000bdf6:	1b1b      	subs	r3, r3, r4
1000bdf8:	009b      	lsls	r3, r3, #2
1000bdfa:	4443      	add	r3, r8
1000bdfc:	335e      	adds	r3, #94	; 0x5e
1000bdfe:	2202      	movs	r2, #2
1000be00:	701a      	strb	r2, [r3, #0]
						break;
1000be02:	e005      	b.n	1000be10 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be04:	1c79      	adds	r1, r7, #1
1000be06:	b2cf      	uxtb	r7, r1
1000be08:	3301      	adds	r3, #1
1000be0a:	327c      	adds	r2, #124	; 0x7c
1000be0c:	2f05      	cmp	r7, #5
1000be0e:	d1da      	bne.n	1000bdc6 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000be10:	2207      	movs	r2, #7
1000be12:	0029      	movs	r1, r5
1000be14:	4834      	ldr	r0, [pc, #208]	; (1000bee8 <ble_connected_state_handler+0x208>)
1000be16:	4b35      	ldr	r3, [pc, #212]	; (1000beec <ble_connected_state_handler+0x20c>)
1000be18:	4798      	blx	r3
1000be1a:	2800      	cmp	r0, #0
1000be1c:	d10c      	bne.n	1000be38 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000be1e:	017b      	lsls	r3, r7, #5
1000be20:	1bdb      	subs	r3, r3, r7
1000be22:	009b      	lsls	r3, r3, #2
1000be24:	4a36      	ldr	r2, [pc, #216]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000be26:	18d3      	adds	r3, r2, r3
1000be28:	2205      	movs	r2, #5
1000be2a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000be2c:	3202      	adds	r2, #2
1000be2e:	2100      	movs	r1, #0
1000be30:	482d      	ldr	r0, [pc, #180]	; (1000bee8 <ble_connected_state_handler+0x208>)
1000be32:	4b2f      	ldr	r3, [pc, #188]	; (1000bef0 <ble_connected_state_handler+0x210>)
1000be34:	4798      	blx	r3
1000be36:	e042      	b.n	1000bebe <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000be38:	4b31      	ldr	r3, [pc, #196]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000be3a:	4698      	mov	r8, r3
1000be3c:	017c      	lsls	r4, r7, #5
1000be3e:	1be3      	subs	r3, r4, r7
1000be40:	009b      	lsls	r3, r3, #2
1000be42:	4443      	add	r3, r8
1000be44:	220a      	movs	r2, #10
1000be46:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000be48:	3a03      	subs	r2, #3
1000be4a:	2100      	movs	r1, #0
1000be4c:	4826      	ldr	r0, [pc, #152]	; (1000bee8 <ble_connected_state_handler+0x208>)
1000be4e:	4b28      	ldr	r3, [pc, #160]	; (1000bef0 <ble_connected_state_handler+0x210>)
1000be50:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000be52:	1be4      	subs	r4, r4, r7
1000be54:	00a4      	lsls	r4, r4, #2
1000be56:	4444      	add	r4, r8
1000be58:	7ca3      	ldrb	r3, [r4, #18]
1000be5a:	2b0a      	cmp	r3, #10
1000be5c:	d12f      	bne.n	1000bebe <ble_connected_state_handler+0x1de>
1000be5e:	e00d      	b.n	1000be7c <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000be60:	481a      	ldr	r0, [pc, #104]	; (1000becc <ble_connected_state_handler+0x1ec>)
1000be62:	4b1b      	ldr	r3, [pc, #108]	; (1000bed0 <ble_connected_state_handler+0x1f0>)
1000be64:	4798      	blx	r3
1000be66:	4b27      	ldr	r3, [pc, #156]	; (1000bf04 <ble_connected_state_handler+0x224>)
1000be68:	7819      	ldrb	r1, [r3, #0]
1000be6a:	b2c9      	uxtb	r1, r1
1000be6c:	4826      	ldr	r0, [pc, #152]	; (1000bf08 <ble_connected_state_handler+0x228>)
1000be6e:	4b1a      	ldr	r3, [pc, #104]	; (1000bed8 <ble_connected_state_handler+0x1f8>)
1000be70:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000be72:	8928      	ldrh	r0, [r5, #8]
1000be74:	2113      	movs	r1, #19
1000be76:	4b25      	ldr	r3, [pc, #148]	; (1000bf0c <ble_connected_state_handler+0x22c>)
1000be78:	4798      	blx	r3
1000be7a:	e020      	b.n	1000bebe <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000be7c:	8928      	ldrh	r0, [r5, #8]
1000be7e:	4b24      	ldr	r3, [pc, #144]	; (1000bf10 <ble_connected_state_handler+0x230>)
1000be80:	4798      	blx	r3
1000be82:	e01c      	b.n	1000bebe <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000be84:	4811      	ldr	r0, [pc, #68]	; (1000becc <ble_connected_state_handler+0x1ec>)
1000be86:	4b12      	ldr	r3, [pc, #72]	; (1000bed0 <ble_connected_state_handler+0x1f0>)
1000be88:	4798      	blx	r3
1000be8a:	7aa9      	ldrb	r1, [r5, #10]
1000be8c:	4821      	ldr	r0, [pc, #132]	; (1000bf14 <ble_connected_state_handler+0x234>)
1000be8e:	4b12      	ldr	r3, [pc, #72]	; (1000bed8 <ble_connected_state_handler+0x1f8>)
1000be90:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000be92:	2600      	movs	r6, #0
1000be94:	e013      	b.n	1000bebe <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000be96:	4b1b      	ldr	r3, [pc, #108]	; (1000bf04 <ble_connected_state_handler+0x224>)
1000be98:	781b      	ldrb	r3, [r3, #0]
1000be9a:	b2db      	uxtb	r3, r3
1000be9c:	2b04      	cmp	r3, #4
1000be9e:	d8df      	bhi.n	1000be60 <ble_connected_state_handler+0x180>
1000bea0:	4b17      	ldr	r3, [pc, #92]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000bea2:	4699      	mov	r9, r3
1000bea4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bea6:	4b11      	ldr	r3, [pc, #68]	; (1000beec <ble_connected_state_handler+0x20c>)
1000bea8:	469b      	mov	fp, r3
1000beaa:	e773      	b.n	1000bd94 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000beac:	235e      	movs	r3, #94	; 0x5e
1000beae:	4a14      	ldr	r2, [pc, #80]	; (1000bf00 <ble_connected_state_handler+0x220>)
1000beb0:	5cd3      	ldrb	r3, [r2, r3]
1000beb2:	2b00      	cmp	r3, #0
1000beb4:	d08c      	beq.n	1000bdd0 <ble_connected_state_handler+0xf0>
1000beb6:	4a18      	ldr	r2, [pc, #96]	; (1000bf18 <ble_connected_state_handler+0x238>)
1000beb8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000beba:	2701      	movs	r7, #1
1000bebc:	e783      	b.n	1000bdc6 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000bebe:	0030      	movs	r0, r6
1000bec0:	b01a      	add	sp, #104	; 0x68
1000bec2:	bc1c      	pop	{r2, r3, r4}
1000bec4:	4690      	mov	r8, r2
1000bec6:	4699      	mov	r9, r3
1000bec8:	46a3      	mov	fp, r4
1000beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000becc:	10019a70 	.word	0x10019a70
1000bed0:	100188c9 	.word	0x100188c9
1000bed4:	1001af7c 	.word	0x1001af7c
1000bed8:	100187a9 	.word	0x100187a9
1000bedc:	1001afc0 	.word	0x1001afc0
1000bee0:	1001db54 	.word	0x1001db54
1000bee4:	10018623 	.word	0x10018623
1000bee8:	1001d394 	.word	0x1001d394
1000beec:	10018605 	.word	0x10018605
1000bef0:	1001865f 	.word	0x1001865f
1000bef4:	1001d8ee 	.word	0x1001d8ee
1000bef8:	1000f159 	.word	0x1000f159
1000befc:	1001afd8 	.word	0x1001afd8
1000bf00:	1001d8a8 	.word	0x1001d8a8
1000bf04:	1001db14 	.word	0x1001db14
1000bf08:	1001affc 	.word	0x1001affc
1000bf0c:	1000f12d 	.word	0x1000f12d
1000bf10:	1000bcad 	.word	0x1000bcad
1000bf14:	1001b038 	.word	0x1001b038
1000bf18:	1001d982 	.word	0x1001d982

1000bf1c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000bf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf1e:	4647      	mov	r7, r8
1000bf20:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bf22:	7803      	ldrb	r3, [r0, #0]
1000bf24:	2b00      	cmp	r3, #0
1000bf26:	d141      	bne.n	1000bfac <ble_resolv_rand_addr_handler+0x90>
1000bf28:	4d2f      	ldr	r5, [pc, #188]	; (1000bfe8 <ble_resolv_rand_addr_handler+0xcc>)
1000bf2a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000bf2c:	1c46      	adds	r6, r0, #1
1000bf2e:	4f2f      	ldr	r7, [pc, #188]	; (1000bfec <ble_resolv_rand_addr_handler+0xd0>)
1000bf30:	2210      	movs	r2, #16
1000bf32:	0029      	movs	r1, r5
1000bf34:	0030      	movs	r0, r6
1000bf36:	47b8      	blx	r7
1000bf38:	2800      	cmp	r0, #0
1000bf3a:	d03f      	beq.n	1000bfbc <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf3c:	3401      	adds	r4, #1
1000bf3e:	b2e4      	uxtb	r4, r4
1000bf40:	357c      	adds	r5, #124	; 0x7c
1000bf42:	2c05      	cmp	r4, #5
1000bf44:	d1f4      	bne.n	1000bf30 <ble_resolv_rand_addr_handler+0x14>
1000bf46:	e031      	b.n	1000bfac <ble_resolv_rand_addr_handler+0x90>
1000bf48:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bf4a:	001c      	movs	r4, r3
1000bf4c:	7811      	ldrb	r1, [r2, #0]
1000bf4e:	2900      	cmp	r1, #0
1000bf50:	d122      	bne.n	1000bf98 <ble_resolv_rand_addr_handler+0x7c>
1000bf52:	e001      	b.n	1000bf58 <ble_resolv_rand_addr_handler+0x3c>
1000bf54:	2400      	movs	r4, #0
1000bf56:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bf58:	4b25      	ldr	r3, [pc, #148]	; (1000bff0 <ble_resolv_rand_addr_handler+0xd4>)
1000bf5a:	4698      	mov	r8, r3
1000bf5c:	0166      	lsls	r6, r4, #5
1000bf5e:	1b37      	subs	r7, r6, r4
1000bf60:	00bf      	lsls	r7, r7, #2
1000bf62:	4447      	add	r7, r8
1000bf64:	2212      	movs	r2, #18
1000bf66:	4923      	ldr	r1, [pc, #140]	; (1000bff4 <ble_resolv_rand_addr_handler+0xd8>)
1000bf68:	0038      	movs	r0, r7
1000bf6a:	4b23      	ldr	r3, [pc, #140]	; (1000bff8 <ble_resolv_rand_addr_handler+0xdc>)
1000bf6c:	4798      	blx	r3
				ble_device_count++;
1000bf6e:	4a23      	ldr	r2, [pc, #140]	; (1000bffc <ble_resolv_rand_addr_handler+0xe0>)
1000bf70:	7813      	ldrb	r3, [r2, #0]
1000bf72:	3301      	adds	r3, #1
1000bf74:	b2db      	uxtb	r3, r3
1000bf76:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bf78:	375e      	adds	r7, #94	; 0x5e
1000bf7a:	2302      	movs	r3, #2
1000bf7c:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bf7e:	1b34      	subs	r4, r6, r4
1000bf80:	00a4      	lsls	r4, r4, #2
1000bf82:	4444      	add	r4, r8
1000bf84:	3308      	adds	r3, #8
1000bf86:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000bf88:	016b      	lsls	r3, r5, #5
1000bf8a:	1b5d      	subs	r5, r3, r5
1000bf8c:	00ad      	lsls	r5, r5, #2
1000bf8e:	4445      	add	r5, r8
1000bf90:	7cab      	ldrb	r3, [r5, #18]
1000bf92:	2b0a      	cmp	r3, #10
1000bf94:	d123      	bne.n	1000bfde <ble_resolv_rand_addr_handler+0xc2>
1000bf96:	e004      	b.n	1000bfa2 <ble_resolv_rand_addr_handler+0x86>
1000bf98:	3301      	adds	r3, #1
1000bf9a:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf9c:	2b05      	cmp	r3, #5
1000bf9e:	d1d3      	bne.n	1000bf48 <ble_resolv_rand_addr_handler+0x2c>
1000bfa0:	e01d      	b.n	1000bfde <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000bfa2:	4b14      	ldr	r3, [pc, #80]	; (1000bff4 <ble_resolv_rand_addr_handler+0xd8>)
1000bfa4:	8918      	ldrh	r0, [r3, #8]
1000bfa6:	4b16      	ldr	r3, [pc, #88]	; (1000c000 <ble_resolv_rand_addr_handler+0xe4>)
1000bfa8:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000bfaa:	e018      	b.n	1000bfde <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bfac:	235e      	movs	r3, #94	; 0x5e
1000bfae:	4a10      	ldr	r2, [pc, #64]	; (1000bff0 <ble_resolv_rand_addr_handler+0xd4>)
1000bfb0:	5cd3      	ldrb	r3, [r2, r3]
1000bfb2:	2b00      	cmp	r3, #0
1000bfb4:	d0ce      	beq.n	1000bf54 <ble_resolv_rand_addr_handler+0x38>
1000bfb6:	4a13      	ldr	r2, [pc, #76]	; (1000c004 <ble_resolv_rand_addr_handler+0xe8>)
1000bfb8:	2301      	movs	r3, #1
1000bfba:	e7c5      	b.n	1000bf48 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bfbc:	480c      	ldr	r0, [pc, #48]	; (1000bff0 <ble_resolv_rand_addr_handler+0xd4>)
1000bfbe:	0163      	lsls	r3, r4, #5
1000bfc0:	1b1a      	subs	r2, r3, r4
1000bfc2:	0092      	lsls	r2, r2, #2
1000bfc4:	1882      	adds	r2, r0, r2
1000bfc6:	0011      	movs	r1, r2
1000bfc8:	315e      	adds	r1, #94	; 0x5e
1000bfca:	2502      	movs	r5, #2
1000bfcc:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bfce:	210a      	movs	r1, #10
1000bfd0:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bfd2:	0010      	movs	r0, r2
1000bfd4:	2212      	movs	r2, #18
1000bfd6:	4907      	ldr	r1, [pc, #28]	; (1000bff4 <ble_resolv_rand_addr_handler+0xd8>)
1000bfd8:	4b07      	ldr	r3, [pc, #28]	; (1000bff8 <ble_resolv_rand_addr_handler+0xdc>)
1000bfda:	4798      	blx	r3
1000bfdc:	e7e1      	b.n	1000bfa2 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000bfde:	2000      	movs	r0, #0
1000bfe0:	bc04      	pop	{r2}
1000bfe2:	4690      	mov	r8, r2
1000bfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfe6:	46c0      	nop			; (mov r8, r8)
1000bfe8:	1001d8ee 	.word	0x1001d8ee
1000bfec:	10018605 	.word	0x10018605
1000bff0:	1001d8a8 	.word	0x1001d8a8
1000bff4:	1001db54 	.word	0x1001db54
1000bff8:	10018623 	.word	0x10018623
1000bffc:	1001db14 	.word	0x1001db14
1000c000:	1000bcad 	.word	0x1000bcad
1000c004:	1001d982 	.word	0x1001d982

1000c008 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c00a:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000c00c:	283b      	cmp	r0, #59	; 0x3b
1000c00e:	d872      	bhi.n	1000c0f6 <ble_event_manager+0xee>
1000c010:	0083      	lsls	r3, r0, #2
1000c012:	4a3c      	ldr	r2, [pc, #240]	; (1000c104 <ble_event_manager+0xfc>)
1000c014:	58d3      	ldr	r3, [r2, r3]
1000c016:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c018:	0084      	lsls	r4, r0, #2
1000c01a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000c01c:	4f3a      	ldr	r7, [pc, #232]	; (1000c108 <ble_event_manager+0x100>)
1000c01e:	59bb      	ldr	r3, [r7, r6]
1000c020:	2b00      	cmp	r3, #0
1000c022:	d004      	beq.n	1000c02e <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c024:	591b      	ldr	r3, [r3, r4]
1000c026:	2b00      	cmp	r3, #0
1000c028:	d001      	beq.n	1000c02e <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000c02a:	0028      	movs	r0, r5
1000c02c:	4798      	blx	r3
1000c02e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000c030:	2e14      	cmp	r6, #20
1000c032:	d1f4      	bne.n	1000c01e <ble_event_manager+0x16>
1000c034:	e065      	b.n	1000c102 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c036:	3813      	subs	r0, #19
1000c038:	b2c4      	uxtb	r4, r0
1000c03a:	00a4      	lsls	r4, r4, #2
1000c03c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000c03e:	4f33      	ldr	r7, [pc, #204]	; (1000c10c <ble_event_manager+0x104>)
1000c040:	59bb      	ldr	r3, [r7, r6]
1000c042:	2b00      	cmp	r3, #0
1000c044:	d004      	beq.n	1000c050 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c046:	591b      	ldr	r3, [r3, r4]
1000c048:	2b00      	cmp	r3, #0
1000c04a:	d001      	beq.n	1000c050 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000c04c:	0028      	movs	r0, r5
1000c04e:	4798      	blx	r3
1000c050:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000c052:	2e14      	cmp	r6, #20
1000c054:	d1f4      	bne.n	1000c040 <ble_event_manager+0x38>
1000c056:	e054      	b.n	1000c102 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c058:	381d      	subs	r0, #29
1000c05a:	b2c4      	uxtb	r4, r0
1000c05c:	00a4      	lsls	r4, r4, #2
1000c05e:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000c060:	4f2b      	ldr	r7, [pc, #172]	; (1000c110 <ble_event_manager+0x108>)
1000c062:	59bb      	ldr	r3, [r7, r6]
1000c064:	2b00      	cmp	r3, #0
1000c066:	d004      	beq.n	1000c072 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c068:	591b      	ldr	r3, [r3, r4]
1000c06a:	2b00      	cmp	r3, #0
1000c06c:	d001      	beq.n	1000c072 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000c06e:	0028      	movs	r0, r5
1000c070:	4798      	blx	r3
1000c072:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000c074:	2e14      	cmp	r6, #20
1000c076:	d1f4      	bne.n	1000c062 <ble_event_manager+0x5a>
1000c078:	e043      	b.n	1000c102 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c07a:	3827      	subs	r0, #39	; 0x27
1000c07c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c07e:	4b25      	ldr	r3, [pc, #148]	; (1000c114 <ble_event_manager+0x10c>)
1000c080:	681b      	ldr	r3, [r3, #0]
1000c082:	2b00      	cmp	r3, #0
1000c084:	d03d      	beq.n	1000c102 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c086:	0080      	lsls	r0, r0, #2
1000c088:	58c3      	ldr	r3, [r0, r3]
1000c08a:	2b00      	cmp	r3, #0
1000c08c:	d039      	beq.n	1000c102 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c08e:	0008      	movs	r0, r1
1000c090:	4798      	blx	r3
1000c092:	e036      	b.n	1000c102 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c094:	382d      	subs	r0, #45	; 0x2d
1000c096:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c098:	4b1f      	ldr	r3, [pc, #124]	; (1000c118 <ble_event_manager+0x110>)
1000c09a:	681b      	ldr	r3, [r3, #0]
1000c09c:	2b00      	cmp	r3, #0
1000c09e:	d030      	beq.n	1000c102 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0a0:	0080      	lsls	r0, r0, #2
1000c0a2:	58c3      	ldr	r3, [r0, r3]
1000c0a4:	2b00      	cmp	r3, #0
1000c0a6:	d02c      	beq.n	1000c102 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c0a8:	0008      	movs	r0, r1
1000c0aa:	4798      	blx	r3
1000c0ac:	e029      	b.n	1000c102 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0ae:	3836      	subs	r0, #54	; 0x36
1000c0b0:	b2c4      	uxtb	r4, r0
1000c0b2:	00a4      	lsls	r4, r4, #2
1000c0b4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000c0b6:	4f19      	ldr	r7, [pc, #100]	; (1000c11c <ble_event_manager+0x114>)
1000c0b8:	59bb      	ldr	r3, [r7, r6]
1000c0ba:	2b00      	cmp	r3, #0
1000c0bc:	d004      	beq.n	1000c0c8 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0be:	591b      	ldr	r3, [r3, r4]
1000c0c0:	2b00      	cmp	r3, #0
1000c0c2:	d001      	beq.n	1000c0c8 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000c0c4:	0028      	movs	r0, r5
1000c0c6:	4798      	blx	r3
1000c0c8:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000c0ca:	2e14      	cmp	r6, #20
1000c0cc:	d1f4      	bne.n	1000c0b8 <ble_event_manager+0xb0>
1000c0ce:	e018      	b.n	1000c102 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c0d0:	3838      	subs	r0, #56	; 0x38
1000c0d2:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c0d4:	4b12      	ldr	r3, [pc, #72]	; (1000c120 <ble_event_manager+0x118>)
1000c0d6:	681b      	ldr	r3, [r3, #0]
1000c0d8:	2b00      	cmp	r3, #0
1000c0da:	d012      	beq.n	1000c102 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0dc:	0080      	lsls	r0, r0, #2
1000c0de:	58c3      	ldr	r3, [r0, r3]
1000c0e0:	2b00      	cmp	r3, #0
1000c0e2:	d00e      	beq.n	1000c102 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c0e4:	0008      	movs	r0, r1
1000c0e6:	4798      	blx	r3
1000c0e8:	e00b      	b.n	1000c102 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000c0ea:	4b0e      	ldr	r3, [pc, #56]	; (1000c124 <ble_event_manager+0x11c>)
1000c0ec:	681b      	ldr	r3, [r3, #0]
1000c0ee:	2b00      	cmp	r3, #0
1000c0f0:	d007      	beq.n	1000c102 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000c0f2:	4798      	blx	r3
1000c0f4:	e005      	b.n	1000c102 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000c0f6:	4d0c      	ldr	r5, [pc, #48]	; (1000c128 <ble_event_manager+0x120>)
1000c0f8:	0028      	movs	r0, r5
1000c0fa:	4c0c      	ldr	r4, [pc, #48]	; (1000c12c <ble_event_manager+0x124>)
1000c0fc:	47a0      	blx	r4
1000c0fe:	0028      	movs	r0, r5
1000c100:	47a0      	blx	r4
	}
	break;		
	}
}
1000c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c104:	1001a93c 	.word	0x1001a93c
1000c108:	1001db2c 	.word	0x1001db2c
1000c10c:	1001db40 	.word	0x1001db40
1000c110:	1001d894 	.word	0x1001d894
1000c114:	1001db88 	.word	0x1001db88
1000c118:	1001d890 	.word	0x1001d890
1000c11c:	1001db18 	.word	0x1001db18
1000c120:	1001e0cc 	.word	0x1001e0cc
1000c124:	1001d38c 	.word	0x1001d38c
1000c128:	10019a70 	.word	0x10019a70
1000c12c:	100188c9 	.word	0x100188c9

1000c130 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c130:	b570      	push	{r4, r5, r6, lr}
1000c132:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c134:	4b0d      	ldr	r3, [pc, #52]	; (1000c16c <ble_event_task+0x3c>)
1000c136:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c138:	2b01      	cmp	r3, #1
1000c13a:	d101      	bne.n	1000c140 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000c13c:	4b0c      	ldr	r3, [pc, #48]	; (1000c170 <ble_event_task+0x40>)
1000c13e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c140:	0022      	movs	r2, r4
1000c142:	490c      	ldr	r1, [pc, #48]	; (1000c174 <ble_event_task+0x44>)
1000c144:	480c      	ldr	r0, [pc, #48]	; (1000c178 <ble_event_task+0x48>)
1000c146:	4b0d      	ldr	r3, [pc, #52]	; (1000c17c <ble_event_task+0x4c>)
1000c148:	4798      	blx	r3
1000c14a:	0004      	movs	r4, r0
1000c14c:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c14e:	4b07      	ldr	r3, [pc, #28]	; (1000c16c <ble_event_task+0x3c>)
1000c150:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c152:	2b01      	cmp	r3, #1
1000c154:	d101      	bne.n	1000c15a <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000c156:	4b0a      	ldr	r3, [pc, #40]	; (1000c180 <ble_event_task+0x50>)
1000c158:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000c15a:	2d00      	cmp	r5, #0
1000c15c:	d104      	bne.n	1000c168 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000c15e:	4b06      	ldr	r3, [pc, #24]	; (1000c178 <ble_event_task+0x48>)
1000c160:	7818      	ldrb	r0, [r3, #0]
1000c162:	4904      	ldr	r1, [pc, #16]	; (1000c174 <ble_event_task+0x44>)
1000c164:	4b07      	ldr	r3, [pc, #28]	; (1000c184 <ble_event_task+0x54>)
1000c166:	4798      	blx	r3
    }
    
    return status;
}
1000c168:	0020      	movs	r0, r4
1000c16a:	bd70      	pop	{r4, r5, r6, pc}
1000c16c:	1001d39b 	.word	0x1001d39b
1000c170:	1000ca95 	.word	0x1000ca95
1000c174:	1001dec0 	.word	0x1001dec0
1000c178:	1001db84 	.word	0x1001db84
1000c17c:	1000e6ad 	.word	0x1000e6ad
1000c180:	1000ca6d 	.word	0x1000ca6d
1000c184:	1000c009 	.word	0x1000c009

1000c188 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000c188:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000c18a:	4b0e      	ldr	r3, [pc, #56]	; (1000c1c4 <uart_read_complete_callback+0x3c>)
1000c18c:	781b      	ldrb	r3, [r3, #0]
1000c18e:	2b01      	cmp	r3, #1
1000c190:	d10b      	bne.n	1000c1aa <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000c192:	2202      	movs	r2, #2
1000c194:	4b0b      	ldr	r3, [pc, #44]	; (1000c1c4 <uart_read_complete_callback+0x3c>)
1000c196:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000c198:	4b0b      	ldr	r3, [pc, #44]	; (1000c1c8 <uart_read_complete_callback+0x40>)
1000c19a:	681b      	ldr	r3, [r3, #0]
1000c19c:	2b00      	cmp	r3, #0
1000c19e:	d110      	bne.n	1000c1c2 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000c1a0:	2102      	movs	r1, #2
1000c1a2:	480a      	ldr	r0, [pc, #40]	; (1000c1cc <uart_read_complete_callback+0x44>)
1000c1a4:	4b0a      	ldr	r3, [pc, #40]	; (1000c1d0 <uart_read_complete_callback+0x48>)
1000c1a6:	4798      	blx	r3
1000c1a8:	e00b      	b.n	1000c1c2 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000c1aa:	4b07      	ldr	r3, [pc, #28]	; (1000c1c8 <uart_read_complete_callback+0x40>)
1000c1ac:	681b      	ldr	r3, [r3, #0]
1000c1ae:	2b00      	cmp	r3, #0
1000c1b0:	d007      	beq.n	1000c1c2 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000c1b2:	4c08      	ldr	r4, [pc, #32]	; (1000c1d4 <uart_read_complete_callback+0x4c>)
1000c1b4:	7820      	ldrb	r0, [r4, #0]
1000c1b6:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c1b8:	2201      	movs	r2, #1
1000c1ba:	0021      	movs	r1, r4
1000c1bc:	4803      	ldr	r0, [pc, #12]	; (1000c1cc <uart_read_complete_callback+0x44>)
1000c1be:	4b06      	ldr	r3, [pc, #24]	; (1000c1d8 <uart_read_complete_callback+0x50>)
1000c1c0:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000c1c2:	bd10      	pop	{r4, pc}
1000c1c4:	1001d3a0 	.word	0x1001d3a0
1000c1c8:	1001d3a8 	.word	0x1001d3a8
1000c1cc:	1001e0d0 	.word	0x1001e0d0
1000c1d0:	1000d165 	.word	0x1000d165
1000c1d4:	1001d3a4 	.word	0x1001d3a4
1000c1d8:	1000d109 	.word	0x1000d109

1000c1dc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000c1dc:	b570      	push	{r4, r5, r6, lr}
1000c1de:	0006      	movs	r6, r0
1000c1e0:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000c1e2:	4c03      	ldr	r4, [pc, #12]	; (1000c1f0 <usart_serial_getchar+0x14>)
1000c1e4:	0029      	movs	r1, r5
1000c1e6:	0030      	movs	r0, r6
1000c1e8:	47a0      	blx	r4
1000c1ea:	2800      	cmp	r0, #0
1000c1ec:	d1fa      	bne.n	1000c1e4 <usart_serial_getchar+0x8>
}
1000c1ee:	bd70      	pop	{r4, r5, r6, pc}
1000c1f0:	1000d0f5 	.word	0x1000d0f5

1000c1f4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000c1f4:	b570      	push	{r4, r5, r6, lr}
1000c1f6:	0006      	movs	r6, r0
1000c1f8:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000c1fa:	4c03      	ldr	r4, [pc, #12]	; (1000c208 <usart_serial_putchar+0x14>)
1000c1fc:	0029      	movs	r1, r5
1000c1fe:	0030      	movs	r0, r6
1000c200:	47a0      	blx	r4
1000c202:	2800      	cmp	r0, #0
1000c204:	d1fa      	bne.n	1000c1fc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000c206:	bd70      	pop	{r4, r5, r6, pc}
1000c208:	1000d0e5 	.word	0x1000d0e5

1000c20c <serial_console_init>:

void serial_console_init(void)
{
1000c20c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000c20e:	2100      	movs	r1, #0
1000c210:	2000      	movs	r0, #0
1000c212:	4b19      	ldr	r3, [pc, #100]	; (1000c278 <serial_console_init+0x6c>)
1000c214:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000c216:	4c19      	ldr	r4, [pc, #100]	; (1000c27c <serial_console_init+0x70>)
1000c218:	0020      	movs	r0, r4
1000c21a:	4b19      	ldr	r3, [pc, #100]	; (1000c280 <serial_console_init+0x74>)
1000c21c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000c21e:	23e1      	movs	r3, #225	; 0xe1
1000c220:	025b      	lsls	r3, r3, #9
1000c222:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000c224:	2302      	movs	r3, #2
1000c226:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000c228:	2203      	movs	r2, #3
1000c22a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000c22c:	3201      	adds	r2, #1
1000c22e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000c230:	3201      	adds	r2, #1
1000c232:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000c234:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000c236:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000c238:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000c23a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000c23c:	4d11      	ldr	r5, [pc, #68]	; (1000c284 <serial_console_init+0x78>)
1000c23e:	4b12      	ldr	r3, [pc, #72]	; (1000c288 <serial_console_init+0x7c>)
1000c240:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000c242:	4a12      	ldr	r2, [pc, #72]	; (1000c28c <serial_console_init+0x80>)
1000c244:	4b12      	ldr	r3, [pc, #72]	; (1000c290 <serial_console_init+0x84>)
1000c246:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000c248:	4a12      	ldr	r2, [pc, #72]	; (1000c294 <serial_console_init+0x88>)
1000c24a:	4b13      	ldr	r3, [pc, #76]	; (1000c298 <serial_console_init+0x8c>)
1000c24c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000c24e:	0022      	movs	r2, r4
1000c250:	4912      	ldr	r1, [pc, #72]	; (1000c29c <serial_console_init+0x90>)
1000c252:	0028      	movs	r0, r5
1000c254:	4b12      	ldr	r3, [pc, #72]	; (1000c2a0 <serial_console_init+0x94>)
1000c256:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000c258:	4e12      	ldr	r6, [pc, #72]	; (1000c2a4 <serial_console_init+0x98>)
1000c25a:	6833      	ldr	r3, [r6, #0]
1000c25c:	6898      	ldr	r0, [r3, #8]
1000c25e:	2100      	movs	r1, #0
1000c260:	4c11      	ldr	r4, [pc, #68]	; (1000c2a8 <serial_console_init+0x9c>)
1000c262:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000c264:	6833      	ldr	r3, [r6, #0]
1000c266:	6858      	ldr	r0, [r3, #4]
1000c268:	2100      	movs	r1, #0
1000c26a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000c26c:	2202      	movs	r2, #2
1000c26e:	490f      	ldr	r1, [pc, #60]	; (1000c2ac <serial_console_init+0xa0>)
1000c270:	0028      	movs	r0, r5
1000c272:	4b0f      	ldr	r3, [pc, #60]	; (1000c2b0 <serial_console_init+0xa4>)
1000c274:	4798      	blx	r3
}
1000c276:	bd70      	pop	{r4, r5, r6, pc}
1000c278:	1000d965 	.word	0x1000d965
1000c27c:	1001e0f4 	.word	0x1001e0f4
1000c280:	1000cefd 	.word	0x1000cefd
1000c284:	1001e0d0 	.word	0x1001e0d0
1000c288:	1001e41c 	.word	0x1001e41c
1000c28c:	1000c1f5 	.word	0x1000c1f5
1000c290:	1001e418 	.word	0x1001e418
1000c294:	1000c1dd 	.word	0x1000c1dd
1000c298:	1001e414 	.word	0x1001e414
1000c29c:	40004000 	.word	0x40004000
1000c2a0:	1000cf29 	.word	0x1000cf29
1000c2a4:	1001b9dc 	.word	0x1001b9dc
1000c2a8:	10018979 	.word	0x10018979
1000c2ac:	1000c189 	.word	0x1000c189
1000c2b0:	1000d131 	.word	0x1000d131

1000c2b4 <_time_start>:

void _time_start(unsigned int sec)
{
1000c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c2b6:	b083      	sub	sp, #12
1000c2b8:	0005      	movs	r5, r0
	system_clock_get_value();
1000c2ba:	4c0d      	ldr	r4, [pc, #52]	; (1000c2f0 <_time_start+0x3c>)
1000c2bc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000c2be:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000c2c0:	4f0c      	ldr	r7, [pc, #48]	; (1000c2f4 <_time_start+0x40>)
1000c2c2:	47b8      	blx	r7
1000c2c4:	4e0c      	ldr	r6, [pc, #48]	; (1000c2f8 <_time_start+0x44>)
1000c2c6:	4a0d      	ldr	r2, [pc, #52]	; (1000c2fc <_time_start+0x48>)
1000c2c8:	4b0d      	ldr	r3, [pc, #52]	; (1000c300 <_time_start+0x4c>)
1000c2ca:	47b0      	blx	r6
1000c2cc:	9000      	str	r0, [sp, #0]
1000c2ce:	9101      	str	r1, [sp, #4]
1000c2d0:	20fa      	movs	r0, #250	; 0xfa
1000c2d2:	0080      	lsls	r0, r0, #2
1000c2d4:	4368      	muls	r0, r5
1000c2d6:	47b8      	blx	r7
1000c2d8:	0002      	movs	r2, r0
1000c2da:	000b      	movs	r3, r1
1000c2dc:	9800      	ldr	r0, [sp, #0]
1000c2de:	9901      	ldr	r1, [sp, #4]
1000c2e0:	47b0      	blx	r6
1000c2e2:	4b08      	ldr	r3, [pc, #32]	; (1000c304 <_time_start+0x50>)
1000c2e4:	4798      	blx	r3
1000c2e6:	4b08      	ldr	r3, [pc, #32]	; (1000c308 <_time_start+0x54>)
1000c2e8:	6018      	str	r0, [r3, #0]
}
1000c2ea:	b003      	add	sp, #12
1000c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c2ee:	46c0      	nop			; (mov r8, r8)
1000c2f0:	1000d9e9 	.word	0x1000d9e9
1000c2f4:	10018159 	.word	0x10018159
1000c2f8:	100174cd 	.word	0x100174cd
1000c2fc:	19feaec7 	.word	0x19feaec7
1000c300:	3f09d8ef 	.word	0x3f09d8ef
1000c304:	100157b5 	.word	0x100157b5
1000c308:	1001d39c 	.word	0x1001d39c

1000c30c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000c30c:	4b02      	ldr	r3, [pc, #8]	; (1000c318 <_time_done+0xc>)
1000c30e:	681a      	ldr	r2, [r3, #0]
1000c310:	1e50      	subs	r0, r2, #1
1000c312:	6018      	str	r0, [r3, #0]
}
1000c314:	4770      	bx	lr
1000c316:	46c0      	nop			; (mov r8, r8)
1000c318:	1001d39c 	.word	0x1001d39c

1000c31c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000c31c:	b570      	push	{r4, r5, r6, lr}
1000c31e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000c320:	2201      	movs	r2, #1
1000c322:	4b11      	ldr	r3, [pc, #68]	; (1000c368 <getchar_b11_timeout+0x4c>)
1000c324:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000c326:	4b11      	ldr	r3, [pc, #68]	; (1000c36c <getchar_b11_timeout+0x50>)
1000c328:	681b      	ldr	r3, [r3, #0]
1000c32a:	2b00      	cmp	r3, #0
1000c32c:	d103      	bne.n	1000c336 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c32e:	2102      	movs	r1, #2
1000c330:	480f      	ldr	r0, [pc, #60]	; (1000c370 <getchar_b11_timeout+0x54>)
1000c332:	4b10      	ldr	r3, [pc, #64]	; (1000c374 <getchar_b11_timeout+0x58>)
1000c334:	4798      	blx	r3

	_time_start(sec);
1000c336:	0020      	movs	r0, r4
1000c338:	4b0f      	ldr	r3, [pc, #60]	; (1000c378 <getchar_b11_timeout+0x5c>)
1000c33a:	4798      	blx	r3
	
	string_input[0] = 0;
1000c33c:	490f      	ldr	r1, [pc, #60]	; (1000c37c <getchar_b11_timeout+0x60>)
1000c33e:	2300      	movs	r3, #0
1000c340:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c342:	2201      	movs	r2, #1
1000c344:	480a      	ldr	r0, [pc, #40]	; (1000c370 <getchar_b11_timeout+0x54>)
1000c346:	4b0e      	ldr	r3, [pc, #56]	; (1000c380 <getchar_b11_timeout+0x64>)
1000c348:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c34a:	4c07      	ldr	r4, [pc, #28]	; (1000c368 <getchar_b11_timeout+0x4c>)
1000c34c:	4d0d      	ldr	r5, [pc, #52]	; (1000c384 <getchar_b11_timeout+0x68>)
1000c34e:	7823      	ldrb	r3, [r4, #0]
1000c350:	2b02      	cmp	r3, #2
1000c352:	d002      	beq.n	1000c35a <getchar_b11_timeout+0x3e>
1000c354:	47a8      	blx	r5
1000c356:	2800      	cmp	r0, #0
1000c358:	d1f9      	bne.n	1000c34e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000c35a:	2200      	movs	r2, #0
1000c35c:	4b02      	ldr	r3, [pc, #8]	; (1000c368 <getchar_b11_timeout+0x4c>)
1000c35e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000c360:	4b06      	ldr	r3, [pc, #24]	; (1000c37c <getchar_b11_timeout+0x60>)
1000c362:	7818      	ldrb	r0, [r3, #0]
}
1000c364:	bd70      	pop	{r4, r5, r6, pc}
1000c366:	46c0      	nop			; (mov r8, r8)
1000c368:	1001d3a0 	.word	0x1001d3a0
1000c36c:	1001d3a8 	.word	0x1001d3a8
1000c370:	1001e0d0 	.word	0x1001e0d0
1000c374:	1000d145 	.word	0x1000d145
1000c378:	1000c2b5 	.word	0x1000c2b5
1000c37c:	1001d3a4 	.word	0x1001d3a4
1000c380:	1000d109 	.word	0x1000d109
1000c384:	1000c30d 	.word	0x1000c30d

1000c388 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000c388:	4b02      	ldr	r3, [pc, #8]	; (1000c394 <platform_event_free+0xc>)
1000c38a:	681a      	ldr	r2, [r3, #0]
1000c38c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000c38e:	6018      	str	r0, [r3, #0]
}
1000c390:	4770      	bx	lr
1000c392:	46c0      	nop			; (mov r8, r8)
1000c394:	1001d3b0 	.word	0x1001d3b0

1000c398 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000c398:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000c39a:	4b0b      	ldr	r3, [pc, #44]	; (1000c3c8 <platform_event_post+0x30>)
1000c39c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000c39e:	2c00      	cmp	r4, #0
1000c3a0:	d011      	beq.n	1000c3c6 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000c3a2:	6825      	ldr	r5, [r4, #0]
1000c3a4:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000c3a6:	2300      	movs	r3, #0
1000c3a8:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000c3aa:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000c3ac:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000c3ae:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000c3b0:	4b06      	ldr	r3, [pc, #24]	; (1000c3cc <platform_event_post+0x34>)
1000c3b2:	681a      	ldr	r2, [r3, #0]
1000c3b4:	2a00      	cmp	r2, #0
1000c3b6:	d102      	bne.n	1000c3be <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000c3b8:	601c      	str	r4, [r3, #0]
1000c3ba:	e004      	b.n	1000c3c6 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000c3bc:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000c3be:	6813      	ldr	r3, [r2, #0]
1000c3c0:	2b00      	cmp	r3, #0
1000c3c2:	d1fb      	bne.n	1000c3bc <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000c3c4:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000c3c6:	bd30      	pop	{r4, r5, pc}
1000c3c8:	1001d3b0 	.word	0x1001d3b0
1000c3cc:	1001d3ac 	.word	0x1001d3ac

1000c3d0 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000c3d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000c3d2:	2300      	movs	r3, #0
1000c3d4:	4a06      	ldr	r2, [pc, #24]	; (1000c3f0 <platform_event_init+0x20>)
1000c3d6:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000c3d8:	4a06      	ldr	r2, [pc, #24]	; (1000c3f4 <platform_event_init+0x24>)
1000c3da:	6013      	str	r3, [r2, #0]
1000c3dc:	4c06      	ldr	r4, [pc, #24]	; (1000c3f8 <platform_event_init+0x28>)
1000c3de:	0026      	movs	r6, r4
1000c3e0:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000c3e2:	4d06      	ldr	r5, [pc, #24]	; (1000c3fc <platform_event_init+0x2c>)
1000c3e4:	0020      	movs	r0, r4
1000c3e6:	47a8      	blx	r5
1000c3e8:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000c3ea:	42b4      	cmp	r4, r6
1000c3ec:	d1fa      	bne.n	1000c3e4 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000c3ee:	bd70      	pop	{r4, r5, r6, pc}
1000c3f0:	1001d3b0 	.word	0x1001d3b0
1000c3f4:	1001d3ac 	.word	0x1001d3ac
1000c3f8:	1001d3b4 	.word	0x1001d3b4
1000c3fc:	1000c389 	.word	0x1000c389

1000c400 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000c400:	b570      	push	{r4, r5, r6, lr}
1000c402:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c404:	4b13      	ldr	r3, [pc, #76]	; (1000c454 <at_ke_msg_send+0x54>)
1000c406:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000c408:	4b13      	ldr	r3, [pc, #76]	; (1000c458 <at_ke_msg_send+0x58>)
1000c40a:	681b      	ldr	r3, [r3, #0]
1000c40c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c40e:	2c0c      	cmp	r4, #12
1000c410:	d01f      	beq.n	1000c452 <at_ke_msg_send+0x52>
1000c412:	3c0c      	subs	r4, #12
1000c414:	88e3      	ldrh	r3, [r4, #6]
1000c416:	2b05      	cmp	r3, #5
1000c418:	d01b      	beq.n	1000c452 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000c41a:	07eb      	lsls	r3, r5, #31
1000c41c:	d414      	bmi.n	1000c448 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000c41e:	4b0f      	ldr	r3, [pc, #60]	; (1000c45c <at_ke_msg_send+0x5c>)
1000c420:	681b      	ldr	r3, [r3, #0]
1000c422:	2002      	movs	r0, #2
1000c424:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000c426:	4b0e      	ldr	r3, [pc, #56]	; (1000c460 <at_ke_msg_send+0x60>)
1000c428:	681b      	ldr	r3, [r3, #0]
1000c42a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000c42c:	4c0d      	ldr	r4, [pc, #52]	; (1000c464 <at_ke_msg_send+0x64>)
1000c42e:	2003      	movs	r0, #3
1000c430:	6823      	ldr	r3, [r4, #0]
1000c432:	4798      	blx	r3
1000c434:	2800      	cmp	r0, #0
1000c436:	d1fa      	bne.n	1000c42e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000c438:	4b0b      	ldr	r3, [pc, #44]	; (1000c468 <at_ke_msg_send+0x68>)
1000c43a:	681b      	ldr	r3, [r3, #0]
1000c43c:	3002      	adds	r0, #2
1000c43e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000c440:	2201      	movs	r2, #1
1000c442:	4b0a      	ldr	r3, [pc, #40]	; (1000c46c <at_ke_msg_send+0x6c>)
1000c444:	601a      	str	r2, [r3, #0]
1000c446:	e004      	b.n	1000c452 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000c448:	4b09      	ldr	r3, [pc, #36]	; (1000c470 <at_ke_msg_send+0x70>)
1000c44a:	6818      	ldr	r0, [r3, #0]
1000c44c:	4b09      	ldr	r3, [pc, #36]	; (1000c474 <at_ke_msg_send+0x74>)
1000c44e:	681b      	ldr	r3, [r3, #0]
1000c450:	4798      	blx	r3
		}
	}
}
1000c452:	bd70      	pop	{r4, r5, r6, pc}
1000c454:	4000b1ec 	.word	0x4000b1ec
1000c458:	1001d45c 	.word	0x1001d45c
1000c45c:	1001d454 	.word	0x1001d454
1000c460:	1001d464 	.word	0x1001d464
1000c464:	1001d440 	.word	0x1001d440
1000c468:	1001d448 	.word	0x1001d448
1000c46c:	4000b020 	.word	0x4000b020
1000c470:	1001d44c 	.word	0x1001d44c
1000c474:	1001d43c 	.word	0x1001d43c

1000c478 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000c478:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000c47a:	4b06      	ldr	r3, [pc, #24]	; (1000c494 <samb11_plf_resume_callback+0x1c>)
1000c47c:	4a06      	ldr	r2, [pc, #24]	; (1000c498 <samb11_plf_resume_callback+0x20>)
1000c47e:	6819      	ldr	r1, [r3, #0]
1000c480:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000c482:	685a      	ldr	r2, [r3, #4]
1000c484:	4b05      	ldr	r3, [pc, #20]	; (1000c49c <samb11_plf_resume_callback+0x24>)
1000c486:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000c488:	4b05      	ldr	r3, [pc, #20]	; (1000c4a0 <samb11_plf_resume_callback+0x28>)
1000c48a:	681b      	ldr	r3, [r3, #0]
1000c48c:	2b00      	cmp	r3, #0
1000c48e:	d000      	beq.n	1000c492 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000c490:	4798      	blx	r3
	}
}
1000c492:	bd10      	pop	{r4, pc}
1000c494:	1001e11c 	.word	0x1001e11c
1000c498:	4000b00c 	.word	0x4000b00c
1000c49c:	4000b010 	.word	0x4000b010
1000c4a0:	1001e3f8 	.word	0x1001e3f8

1000c4a4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000c4a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c4a6:	2232      	movs	r2, #50	; 0x32
1000c4a8:	2100      	movs	r1, #0
1000c4aa:	480d      	ldr	r0, [pc, #52]	; (1000c4e0 <init_port_list+0x3c>)
1000c4ac:	4b0d      	ldr	r3, [pc, #52]	; (1000c4e4 <init_port_list+0x40>)
1000c4ae:	4798      	blx	r3
1000c4b0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000c4b2:	480b      	ldr	r0, [pc, #44]	; (1000c4e0 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000c4b4:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000c4b6:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000c4b8:	004a      	lsls	r2, r1, #1
1000c4ba:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000c4bc:	1882      	adds	r2, r0, r2
1000c4be:	7853      	ldrb	r3, [r2, #1]
1000c4c0:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000c4c2:	b2db      	uxtb	r3, r3
1000c4c4:	43a3      	bics	r3, r4
1000c4c6:	7053      	strb	r3, [r2, #1]
1000c4c8:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000c4ca:	2919      	cmp	r1, #25
1000c4cc:	d1f4      	bne.n	1000c4b8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000c4ce:	4b04      	ldr	r3, [pc, #16]	; (1000c4e0 <init_port_list+0x3c>)
1000c4d0:	785a      	ldrb	r2, [r3, #1]
1000c4d2:	3918      	subs	r1, #24
1000c4d4:	438a      	bics	r2, r1
1000c4d6:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000c4d8:	78da      	ldrb	r2, [r3, #3]
1000c4da:	438a      	bics	r2, r1
1000c4dc:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000c4de:	bd70      	pop	{r4, r5, r6, pc}
1000c4e0:	1001e138 	.word	0x1001e138
1000c4e4:	1001865f 	.word	0x1001865f

1000c4e8 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c4e8:	4a06      	ldr	r2, [pc, #24]	; (1000c504 <init_clock+0x1c>)
1000c4ea:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c4ec:	4b06      	ldr	r3, [pc, #24]	; (1000c508 <init_clock+0x20>)
1000c4ee:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000c4f0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000c4f2:	4a06      	ldr	r2, [pc, #24]	; (1000c50c <init_clock+0x24>)
1000c4f4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c4f6:	4906      	ldr	r1, [pc, #24]	; (1000c510 <init_clock+0x28>)
1000c4f8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c4fa:	4b06      	ldr	r3, [pc, #24]	; (1000c514 <init_clock+0x2c>)
1000c4fc:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000c4fe:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000c500:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000c502:	4770      	bx	lr
1000c504:	4000b00c 	.word	0x4000b00c
1000c508:	fffe0fd3 	.word	0xfffe0fd3
1000c50c:	1001e11c 	.word	0x1001e11c
1000c510:	4000b010 	.word	0x4000b010
1000c514:	ffffe7c0 	.word	0xffffe7c0

1000c518 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000c518:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c51a:	4657      	mov	r7, sl
1000c51c:	464e      	mov	r6, r9
1000c51e:	4645      	mov	r5, r8
1000c520:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000c522:	4b4f      	ldr	r3, [pc, #316]	; (1000c660 <platform_driver_init+0x148>)
1000c524:	781b      	ldrb	r3, [r3, #0]
1000c526:	2b00      	cmp	r3, #0
1000c528:	d004      	beq.n	1000c534 <platform_driver_init+0x1c>
1000c52a:	4b4d      	ldr	r3, [pc, #308]	; (1000c660 <platform_driver_init+0x148>)
1000c52c:	781b      	ldrb	r3, [r3, #0]
1000c52e:	2b01      	cmp	r3, #1
1000c530:	d100      	bne.n	1000c534 <platform_driver_init+0x1c>
1000c532:	e08c      	b.n	1000c64e <platform_driver_init+0x136>
		init_port_list();
1000c534:	4b4b      	ldr	r3, [pc, #300]	; (1000c664 <platform_driver_init+0x14c>)
1000c536:	4798      	blx	r3
		init_clock();
1000c538:	4b4b      	ldr	r3, [pc, #300]	; (1000c668 <platform_driver_init+0x150>)
1000c53a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c53c:	2300      	movs	r3, #0
1000c53e:	4698      	mov	r8, r3
1000c540:	4b4a      	ldr	r3, [pc, #296]	; (1000c66c <platform_driver_init+0x154>)
1000c542:	4642      	mov	r2, r8
1000c544:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c546:	4c4a      	ldr	r4, [pc, #296]	; (1000c670 <platform_driver_init+0x158>)
1000c548:	2380      	movs	r3, #128	; 0x80
1000c54a:	2280      	movs	r2, #128	; 0x80
1000c54c:	0412      	lsls	r2, r2, #16
1000c54e:	4692      	mov	sl, r2
1000c550:	50e2      	str	r2, [r4, r3]
1000c552:	2280      	movs	r2, #128	; 0x80
1000c554:	0452      	lsls	r2, r2, #17
1000c556:	4691      	mov	r9, r2
1000c558:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c55a:	4d46      	ldr	r5, [pc, #280]	; (1000c674 <platform_driver_init+0x15c>)
1000c55c:	4b46      	ldr	r3, [pc, #280]	; (1000c678 <platform_driver_init+0x160>)
1000c55e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c560:	4b46      	ldr	r3, [pc, #280]	; (1000c67c <platform_driver_init+0x164>)
1000c562:	4a47      	ldr	r2, [pc, #284]	; (1000c680 <platform_driver_init+0x168>)
1000c564:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c566:	4947      	ldr	r1, [pc, #284]	; (1000c684 <platform_driver_init+0x16c>)
1000c568:	4a47      	ldr	r2, [pc, #284]	; (1000c688 <platform_driver_init+0x170>)
1000c56a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000c56c:	4a47      	ldr	r2, [pc, #284]	; (1000c68c <platform_driver_init+0x174>)
1000c56e:	6811      	ldr	r1, [r2, #0]
1000c570:	4a47      	ldr	r2, [pc, #284]	; (1000c690 <platform_driver_init+0x178>)
1000c572:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000c574:	4a47      	ldr	r2, [pc, #284]	; (1000c694 <platform_driver_init+0x17c>)
1000c576:	6811      	ldr	r1, [r2, #0]
1000c578:	4a47      	ldr	r2, [pc, #284]	; (1000c698 <platform_driver_init+0x180>)
1000c57a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000c57c:	4947      	ldr	r1, [pc, #284]	; (1000c69c <platform_driver_init+0x184>)
1000c57e:	4a48      	ldr	r2, [pc, #288]	; (1000c6a0 <platform_driver_init+0x188>)
1000c580:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000c582:	4948      	ldr	r1, [pc, #288]	; (1000c6a4 <platform_driver_init+0x18c>)
1000c584:	4a48      	ldr	r2, [pc, #288]	; (1000c6a8 <platform_driver_init+0x190>)
1000c586:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000c588:	4f48      	ldr	r7, [pc, #288]	; (1000c6ac <platform_driver_init+0x194>)
1000c58a:	4a49      	ldr	r2, [pc, #292]	; (1000c6b0 <platform_driver_init+0x198>)
1000c58c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000c58e:	4949      	ldr	r1, [pc, #292]	; (1000c6b4 <platform_driver_init+0x19c>)
1000c590:	4a49      	ldr	r2, [pc, #292]	; (1000c6b8 <platform_driver_init+0x1a0>)
1000c592:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000c594:	4949      	ldr	r1, [pc, #292]	; (1000c6bc <platform_driver_init+0x1a4>)
1000c596:	4a4a      	ldr	r2, [pc, #296]	; (1000c6c0 <platform_driver_init+0x1a8>)
1000c598:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c59a:	4e4a      	ldr	r6, [pc, #296]	; (1000c6c4 <platform_driver_init+0x1ac>)
1000c59c:	4a4a      	ldr	r2, [pc, #296]	; (1000c6c8 <platform_driver_init+0x1b0>)
1000c59e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c5a0:	494a      	ldr	r1, [pc, #296]	; (1000c6cc <platform_driver_init+0x1b4>)
1000c5a2:	4a4b      	ldr	r2, [pc, #300]	; (1000c6d0 <platform_driver_init+0x1b8>)
1000c5a4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000c5a6:	494b      	ldr	r1, [pc, #300]	; (1000c6d4 <platform_driver_init+0x1bc>)
1000c5a8:	4a4b      	ldr	r2, [pc, #300]	; (1000c6d8 <platform_driver_init+0x1c0>)
1000c5aa:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000c5ac:	494b      	ldr	r1, [pc, #300]	; (1000c6dc <platform_driver_init+0x1c4>)
1000c5ae:	4a4c      	ldr	r2, [pc, #304]	; (1000c6e0 <platform_driver_init+0x1c8>)
1000c5b0:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000c5b2:	494c      	ldr	r1, [pc, #304]	; (1000c6e4 <platform_driver_init+0x1cc>)
1000c5b4:	4a4c      	ldr	r2, [pc, #304]	; (1000c6e8 <platform_driver_init+0x1d0>)
1000c5b6:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000c5b8:	494c      	ldr	r1, [pc, #304]	; (1000c6ec <platform_driver_init+0x1d4>)
1000c5ba:	4a4d      	ldr	r2, [pc, #308]	; (1000c6f0 <platform_driver_init+0x1d8>)
1000c5bc:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c5be:	2028      	movs	r0, #40	; 0x28
1000c5c0:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000c5c2:	494c      	ldr	r1, [pc, #304]	; (1000c6f4 <platform_driver_init+0x1dc>)
1000c5c4:	2028      	movs	r0, #40	; 0x28
1000c5c6:	682b      	ldr	r3, [r5, #0]
1000c5c8:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000c5ca:	682b      	ldr	r3, [r5, #0]
1000c5cc:	494a      	ldr	r1, [pc, #296]	; (1000c6f8 <platform_driver_init+0x1e0>)
1000c5ce:	2027      	movs	r0, #39	; 0x27
1000c5d0:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c5d2:	4b4a      	ldr	r3, [pc, #296]	; (1000c6fc <platform_driver_init+0x1e4>)
1000c5d4:	681a      	ldr	r2, [r3, #0]
1000c5d6:	4b4a      	ldr	r3, [pc, #296]	; (1000c700 <platform_driver_init+0x1e8>)
1000c5d8:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000c5da:	4a4a      	ldr	r2, [pc, #296]	; (1000c704 <platform_driver_init+0x1ec>)
1000c5dc:	4b4a      	ldr	r3, [pc, #296]	; (1000c708 <platform_driver_init+0x1f0>)
1000c5de:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000c5e0:	4a4a      	ldr	r2, [pc, #296]	; (1000c70c <platform_driver_init+0x1f4>)
1000c5e2:	4b4b      	ldr	r3, [pc, #300]	; (1000c710 <platform_driver_init+0x1f8>)
1000c5e4:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000c5e6:	4a4b      	ldr	r2, [pc, #300]	; (1000c714 <platform_driver_init+0x1fc>)
1000c5e8:	4b4b      	ldr	r3, [pc, #300]	; (1000c718 <platform_driver_init+0x200>)
1000c5ea:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000c5ec:	4a4b      	ldr	r2, [pc, #300]	; (1000c71c <platform_driver_init+0x204>)
1000c5ee:	4b4c      	ldr	r3, [pc, #304]	; (1000c720 <platform_driver_init+0x208>)
1000c5f0:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000c5f2:	4a4c      	ldr	r2, [pc, #304]	; (1000c724 <platform_driver_init+0x20c>)
1000c5f4:	4b4c      	ldr	r3, [pc, #304]	; (1000c728 <platform_driver_init+0x210>)
1000c5f6:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000c5f8:	4a4c      	ldr	r2, [pc, #304]	; (1000c72c <platform_driver_init+0x214>)
1000c5fa:	4b4d      	ldr	r3, [pc, #308]	; (1000c730 <platform_driver_init+0x218>)
1000c5fc:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000c5fe:	4a4d      	ldr	r2, [pc, #308]	; (1000c734 <platform_driver_init+0x21c>)
1000c600:	4b4d      	ldr	r3, [pc, #308]	; (1000c738 <platform_driver_init+0x220>)
1000c602:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c604:	22a0      	movs	r2, #160	; 0xa0
1000c606:	0092      	lsls	r2, r2, #2
1000c608:	2100      	movs	r1, #0
1000c60a:	484c      	ldr	r0, [pc, #304]	; (1000c73c <platform_driver_init+0x224>)
1000c60c:	4b4c      	ldr	r3, [pc, #304]	; (1000c740 <platform_driver_init+0x228>)
1000c60e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c610:	2280      	movs	r2, #128	; 0x80
1000c612:	0092      	lsls	r2, r2, #2
1000c614:	4b4b      	ldr	r3, [pc, #300]	; (1000c744 <platform_driver_init+0x22c>)
1000c616:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000c618:	4b4b      	ldr	r3, [pc, #300]	; (1000c748 <platform_driver_init+0x230>)
1000c61a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c61c:	4653      	mov	r3, sl
1000c61e:	6023      	str	r3, [r4, #0]
1000c620:	464b      	mov	r3, r9
1000c622:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c624:	4b49      	ldr	r3, [pc, #292]	; (1000c74c <platform_driver_init+0x234>)
1000c626:	4642      	mov	r2, r8
1000c628:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c62a:	683b      	ldr	r3, [r7, #0]
1000c62c:	4a48      	ldr	r2, [pc, #288]	; (1000c750 <platform_driver_init+0x238>)
1000c62e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000c630:	6833      	ldr	r3, [r6, #0]
1000c632:	4a48      	ldr	r2, [pc, #288]	; (1000c754 <platform_driver_init+0x23c>)
1000c634:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000c636:	2000      	movs	r0, #0
1000c638:	4c47      	ldr	r4, [pc, #284]	; (1000c758 <platform_driver_init+0x240>)
1000c63a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000c63c:	2001      	movs	r0, #1
1000c63e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000c640:	2002      	movs	r0, #2
1000c642:	47a0      	blx	r4
		platform_initialized = 1;
1000c644:	2201      	movs	r2, #1
1000c646:	4b06      	ldr	r3, [pc, #24]	; (1000c660 <platform_driver_init+0x148>)
1000c648:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000c64a:	2000      	movs	r0, #0
1000c64c:	e003      	b.n	1000c656 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000c64e:	2201      	movs	r2, #1
1000c650:	4b03      	ldr	r3, [pc, #12]	; (1000c660 <platform_driver_init+0x148>)
1000c652:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000c654:	2001      	movs	r0, #1
	}
	return status;
}
1000c656:	bc1c      	pop	{r2, r3, r4}
1000c658:	4690      	mov	r8, r2
1000c65a:	4699      	mov	r9, r3
1000c65c:	46a2      	mov	sl, r4
1000c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c660:	1001d444 	.word	0x1001d444
1000c664:	1000c4a5 	.word	0x1000c4a5
1000c668:	1000c4e9 	.word	0x1000c4e9
1000c66c:	1001d460 	.word	0x1001d460
1000c670:	e000e100 	.word	0xe000e100
1000c674:	1001e3ec 	.word	0x1001e3ec
1000c678:	000007d7 	.word	0x000007d7
1000c67c:	000007bd 	.word	0x000007bd
1000c680:	1001e128 	.word	0x1001e128
1000c684:	0001bc51 	.word	0x0001bc51
1000c688:	1001e3f0 	.word	0x1001e3f0
1000c68c:	100400bc 	.word	0x100400bc
1000c690:	1001d438 	.word	0x1001d438
1000c694:	100400b8 	.word	0x100400b8
1000c698:	1001d434 	.word	0x1001d434
1000c69c:	0001b99f 	.word	0x0001b99f
1000c6a0:	1001e124 	.word	0x1001e124
1000c6a4:	0001b9db 	.word	0x0001b9db
1000c6a8:	1001e130 	.word	0x1001e130
1000c6ac:	1001e400 	.word	0x1001e400
1000c6b0:	1004003c 	.word	0x1004003c
1000c6b4:	10041fc0 	.word	0x10041fc0
1000c6b8:	1001e134 	.word	0x1001e134
1000c6bc:	10041fc4 	.word	0x10041fc4
1000c6c0:	1001e3fc 	.word	0x1001e3fc
1000c6c4:	1001e3f4 	.word	0x1001e3f4
1000c6c8:	10041fd4 	.word	0x10041fd4
1000c6cc:	10041fd8 	.word	0x10041fd8
1000c6d0:	1001e12c 	.word	0x1001e12c
1000c6d4:	0001cbe9 	.word	0x0001cbe9
1000c6d8:	1001d454 	.word	0x1001d454
1000c6dc:	0001cd8f 	.word	0x0001cd8f
1000c6e0:	1001d448 	.word	0x1001d448
1000c6e4:	0001cea3 	.word	0x0001cea3
1000c6e8:	1001d464 	.word	0x1001d464
1000c6ec:	0001cbcf 	.word	0x0001cbcf
1000c6f0:	1001d440 	.word	0x1001d440
1000c6f4:	1000cb8d 	.word	0x1000cb8d
1000c6f8:	1000cb21 	.word	0x1000cb21
1000c6fc:	100400e4 	.word	0x100400e4
1000c700:	1001d45c 	.word	0x1001d45c
1000c704:	00019fe9 	.word	0x00019fe9
1000c708:	1001d46c 	.word	0x1001d46c
1000c70c:	0001dbdd 	.word	0x0001dbdd
1000c710:	1001d43c 	.word	0x1001d43c
1000c714:	0001dc5b 	.word	0x0001dc5b
1000c718:	1001d450 	.word	0x1001d450
1000c71c:	100405ec 	.word	0x100405ec
1000c720:	1001d44c 	.word	0x1001d44c
1000c724:	0001d5e3 	.word	0x0001d5e3
1000c728:	1001d458 	.word	0x1001d458
1000c72c:	10040c20 	.word	0x10040c20
1000c730:	1001d470 	.word	0x1001d470
1000c734:	00019f09 	.word	0x00019f09
1000c738:	1001d430 	.word	0x1001d430
1000c73c:	1001e16c 	.word	0x1001e16c
1000c740:	1001865f 	.word	0x1001865f
1000c744:	1001e404 	.word	0x1001e404
1000c748:	1000c3d1 	.word	0x1000c3d1
1000c74c:	1001e3f8 	.word	0x1001e3f8
1000c750:	1000c479 	.word	0x1000c479
1000c754:	1000cbe9 	.word	0x1000cbe9
1000c758:	1000cbd1 	.word	0x1000cbd1

1000c75c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c75c:	4b04      	ldr	r3, [pc, #16]	; (1000c770 <platform_register_ble_msg_handler+0x14>)
1000c75e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000c760:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c762:	2a01      	cmp	r2, #1
1000c764:	d102      	bne.n	1000c76c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000c766:	4b03      	ldr	r3, [pc, #12]	; (1000c774 <platform_register_ble_msg_handler+0x18>)
1000c768:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000c76a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000c76c:	0018      	movs	r0, r3
1000c76e:	4770      	bx	lr
1000c770:	1001d444 	.word	0x1001d444
1000c774:	1001d460 	.word	0x1001d460

1000c778 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c778:	b570      	push	{r4, r5, r6, lr}
1000c77a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c77c:	4b0e      	ldr	r3, [pc, #56]	; (1000c7b8 <platform_interface_send+0x40>)
1000c77e:	681b      	ldr	r3, [r3, #0]
1000c780:	2b00      	cmp	r3, #0
1000c782:	d002      	beq.n	1000c78a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c784:	8840      	ldrh	r0, [r0, #2]
1000c786:	4798      	blx	r3
1000c788:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c78a:	88e3      	ldrh	r3, [r4, #6]
1000c78c:	88a2      	ldrh	r2, [r4, #4]
1000c78e:	8861      	ldrh	r1, [r4, #2]
1000c790:	8820      	ldrh	r0, [r4, #0]
1000c792:	4d0a      	ldr	r5, [pc, #40]	; (1000c7bc <platform_interface_send+0x44>)
1000c794:	682d      	ldr	r5, [r5, #0]
1000c796:	47a8      	blx	r5
1000c798:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c79a:	88e2      	ldrh	r2, [r4, #6]
1000c79c:	2a00      	cmp	r2, #0
1000c79e:	d102      	bne.n	1000c7a6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000c7a0:	4b07      	ldr	r3, [pc, #28]	; (1000c7c0 <platform_interface_send+0x48>)
1000c7a2:	4798      	blx	r3
1000c7a4:	e006      	b.n	1000c7b4 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c7a6:	0021      	movs	r1, r4
1000c7a8:	3108      	adds	r1, #8
1000c7aa:	4b06      	ldr	r3, [pc, #24]	; (1000c7c4 <platform_interface_send+0x4c>)
1000c7ac:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c7ae:	0028      	movs	r0, r5
1000c7b0:	4b03      	ldr	r3, [pc, #12]	; (1000c7c0 <platform_interface_send+0x48>)
1000c7b2:	4798      	blx	r3
	}
}
1000c7b4:	bd70      	pop	{r4, r5, r6, pc}
1000c7b6:	46c0      	nop			; (mov r8, r8)
1000c7b8:	1001d438 	.word	0x1001d438
1000c7bc:	1001d46c 	.word	0x1001d46c
1000c7c0:	1000c401 	.word	0x1000c401
1000c7c4:	10018623 	.word	0x10018623

1000c7c8 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c7c8:	b570      	push	{r4, r5, r6, lr}
1000c7ca:	0015      	movs	r5, r2
1000c7cc:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c7ce:	020a      	lsls	r2, r1, #8
1000c7d0:	4302      	orrs	r2, r0
1000c7d2:	4b0a      	ldr	r3, [pc, #40]	; (1000c7fc <send_plf_int_msg_ind+0x34>)
1000c7d4:	681e      	ldr	r6, [r3, #0]
1000c7d6:	0023      	movs	r3, r4
1000c7d8:	2105      	movs	r1, #5
1000c7da:	20a0      	movs	r0, #160	; 0xa0
1000c7dc:	00c0      	lsls	r0, r0, #3
1000c7de:	47b0      	blx	r6
1000c7e0:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000c7e2:	d00a      	beq.n	1000c7fa <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c7e4:	2c00      	cmp	r4, #0
1000c7e6:	d005      	beq.n	1000c7f4 <send_plf_int_msg_ind+0x2c>
1000c7e8:	2d00      	cmp	r5, #0
1000c7ea:	d003      	beq.n	1000c7f4 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c7ec:	0022      	movs	r2, r4
1000c7ee:	0029      	movs	r1, r5
1000c7f0:	4b03      	ldr	r3, [pc, #12]	; (1000c800 <send_plf_int_msg_ind+0x38>)
1000c7f2:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c7f4:	0030      	movs	r0, r6
1000c7f6:	4b03      	ldr	r3, [pc, #12]	; (1000c804 <send_plf_int_msg_ind+0x3c>)
1000c7f8:	4798      	blx	r3
	}
}
1000c7fa:	bd70      	pop	{r4, r5, r6, pc}
1000c7fc:	1001d46c 	.word	0x1001d46c
1000c800:	10018623 	.word	0x10018623
1000c804:	1000c401 	.word	0x1000c401

1000c808 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c808:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c80a:	465f      	mov	r7, fp
1000c80c:	4656      	mov	r6, sl
1000c80e:	464d      	mov	r5, r9
1000c810:	4644      	mov	r4, r8
1000c812:	b4f0      	push	{r4, r5, r6, r7}
1000c814:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c816:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c818:	2300      	movs	r3, #0
1000c81a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c81c:	1ce3      	adds	r3, r4, #3
1000c81e:	d81c      	bhi.n	1000c85a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000c820:	220d      	movs	r2, #13
1000c822:	2100      	movs	r1, #0
1000c824:	a802      	add	r0, sp, #8
1000c826:	4b82      	ldr	r3, [pc, #520]	; (1000ca30 <platform_event_wait+0x228>)
1000c828:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c82a:	2333      	movs	r3, #51	; 0x33
1000c82c:	aa02      	add	r2, sp, #8
1000c82e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c830:	3b30      	subs	r3, #48	; 0x30
1000c832:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c834:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c836:	3302      	adds	r3, #2
1000c838:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c83a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000c83c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000c83e:	0a23      	lsrs	r3, r4, #8
1000c840:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000c842:	0c23      	lsrs	r3, r4, #16
1000c844:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c846:	0e24      	lsrs	r4, r4, #24
1000c848:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c84a:	2301      	movs	r3, #1
1000c84c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000c84e:	210d      	movs	r1, #13
1000c850:	0010      	movs	r0, r2
1000c852:	4b78      	ldr	r3, [pc, #480]	; (1000ca34 <platform_event_wait+0x22c>)
1000c854:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c856:	2301      	movs	r3, #1
1000c858:	4699      	mov	r9, r3
1000c85a:	2400      	movs	r4, #0
1000c85c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c85e:	4f76      	ldr	r7, [pc, #472]	; (1000ca38 <platform_event_wait+0x230>)
1000c860:	4e76      	ldr	r6, [pc, #472]	; (1000ca3c <platform_event_wait+0x234>)
1000c862:	4977      	ldr	r1, [pc, #476]	; (1000ca40 <platform_event_wait+0x238>)
1000c864:	6838      	ldr	r0, [r7, #0]
1000c866:	6833      	ldr	r3, [r6, #0]
1000c868:	4798      	blx	r3
1000c86a:	2800      	cmp	r0, #0
1000c86c:	d000      	beq.n	1000c870 <platform_event_wait+0x68>
1000c86e:	e088      	b.n	1000c982 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000c870:	4b73      	ldr	r3, [pc, #460]	; (1000ca40 <platform_event_wait+0x238>)
1000c872:	681c      	ldr	r4, [r3, #0]
1000c874:	88a3      	ldrh	r3, [r4, #4]
1000c876:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c878:	23cd      	movs	r3, #205	; 0xcd
1000c87a:	009b      	lsls	r3, r3, #2
1000c87c:	459a      	cmp	sl, r3
1000c87e:	d100      	bne.n	1000c882 <platform_event_wait+0x7a>
1000c880:	e0c7      	b.n	1000ca12 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c882:	8923      	ldrh	r3, [r4, #8]
1000c884:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c886:	8963      	ldrh	r3, [r4, #10]
1000c888:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c88a:	464b      	mov	r3, r9
1000c88c:	2b00      	cmp	r3, #0
1000c88e:	d011      	beq.n	1000c8b4 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c890:	220d      	movs	r2, #13
1000c892:	2100      	movs	r1, #0
1000c894:	a802      	add	r0, sp, #8
1000c896:	4b66      	ldr	r3, [pc, #408]	; (1000ca30 <platform_event_wait+0x228>)
1000c898:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c89a:	2333      	movs	r3, #51	; 0x33
1000c89c:	aa02      	add	r2, sp, #8
1000c89e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c8a0:	3b30      	subs	r3, #48	; 0x30
1000c8a2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c8a4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c8a6:	3302      	adds	r3, #2
1000c8a8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c8aa:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c8ac:	210d      	movs	r1, #13
1000c8ae:	0010      	movs	r0, r2
1000c8b0:	4b60      	ldr	r3, [pc, #384]	; (1000ca34 <platform_event_wait+0x22c>)
1000c8b2:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c8b4:	23a0      	movs	r3, #160	; 0xa0
1000c8b6:	00db      	lsls	r3, r3, #3
1000c8b8:	459a      	cmp	sl, r3
1000c8ba:	d121      	bne.n	1000c900 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c8bc:	4b61      	ldr	r3, [pc, #388]	; (1000ca44 <platform_event_wait+0x23c>)
1000c8be:	881b      	ldrh	r3, [r3, #0]
1000c8c0:	4443      	add	r3, r8
1000c8c2:	22a0      	movs	r2, #160	; 0xa0
1000c8c4:	0092      	lsls	r2, r2, #2
1000c8c6:	4293      	cmp	r3, r2
1000c8c8:	dd02      	ble.n	1000c8d0 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c8ca:	3a80      	subs	r2, #128	; 0x80
1000c8cc:	4b5d      	ldr	r3, [pc, #372]	; (1000ca44 <platform_event_wait+0x23c>)
1000c8ce:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c8d0:	4b5c      	ldr	r3, [pc, #368]	; (1000ca44 <platform_event_wait+0x23c>)
1000c8d2:	469a      	mov	sl, r3
1000c8d4:	881d      	ldrh	r5, [r3, #0]
1000c8d6:	4b5c      	ldr	r3, [pc, #368]	; (1000ca48 <platform_event_wait+0x240>)
1000c8d8:	18ed      	adds	r5, r5, r3
1000c8da:	0021      	movs	r1, r4
1000c8dc:	310c      	adds	r1, #12
1000c8de:	4642      	mov	r2, r8
1000c8e0:	0028      	movs	r0, r5
1000c8e2:	4b5a      	ldr	r3, [pc, #360]	; (1000ca4c <platform_event_wait+0x244>)
1000c8e4:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c8e6:	4642      	mov	r2, r8
1000c8e8:	0029      	movs	r1, r5
1000c8ea:	4658      	mov	r0, fp
1000c8ec:	4b58      	ldr	r3, [pc, #352]	; (1000ca50 <platform_event_wait+0x248>)
1000c8ee:	4798      	blx	r3
				plf_event_buff_index += len;
1000c8f0:	4653      	mov	r3, sl
1000c8f2:	881b      	ldrh	r3, [r3, #0]
1000c8f4:	4443      	add	r3, r8
1000c8f6:	4652      	mov	r2, sl
1000c8f8:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c8fa:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c8fc:	2502      	movs	r5, #2
1000c8fe:	e03a      	b.n	1000c976 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c900:	4b54      	ldr	r3, [pc, #336]	; (1000ca54 <platform_event_wait+0x24c>)
1000c902:	681b      	ldr	r3, [r3, #0]
1000c904:	2b00      	cmp	r3, #0
1000c906:	d032      	beq.n	1000c96e <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c908:	4b4d      	ldr	r3, [pc, #308]	; (1000ca40 <platform_event_wait+0x238>)
1000c90a:	681a      	ldr	r2, [r3, #0]
1000c90c:	8893      	ldrh	r3, [r2, #4]
1000c90e:	21cd      	movs	r1, #205	; 0xcd
1000c910:	0089      	lsls	r1, r1, #2
1000c912:	428b      	cmp	r3, r1
1000c914:	d104      	bne.n	1000c920 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000c916:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c918:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c91a:	2b00      	cmp	r3, #0
1000c91c:	d02b      	beq.n	1000c976 <platform_event_wait+0x16e>
1000c91e:	e028      	b.n	1000c972 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c920:	4c4d      	ldr	r4, [pc, #308]	; (1000ca58 <platform_event_wait+0x250>)
1000c922:	4d49      	ldr	r5, [pc, #292]	; (1000ca48 <platform_event_wait+0x240>)
1000c924:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000c926:	702b      	strb	r3, [r5, #0]
1000c928:	0a1b      	lsrs	r3, r3, #8
1000c92a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c92c:	8910      	ldrh	r0, [r2, #8]
1000c92e:	4b4b      	ldr	r3, [pc, #300]	; (1000ca5c <platform_event_wait+0x254>)
1000c930:	681b      	ldr	r3, [r3, #0]
1000c932:	4798      	blx	r3
1000c934:	7128      	strb	r0, [r5, #4]
1000c936:	0a00      	lsrs	r0, r0, #8
1000c938:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c93a:	6820      	ldr	r0, [r4, #0]
1000c93c:	4b40      	ldr	r3, [pc, #256]	; (1000ca40 <platform_event_wait+0x238>)
1000c93e:	681a      	ldr	r2, [r3, #0]
1000c940:	88d2      	ldrh	r2, [r2, #6]
1000c942:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c944:	681d      	ldr	r5, [r3, #0]
1000c946:	896b      	ldrh	r3, [r5, #10]
1000c948:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c94a:	3008      	adds	r0, #8
1000c94c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000c94e:	896a      	ldrh	r2, [r5, #10]
1000c950:	2a00      	cmp	r2, #0
1000c952:	d003      	beq.n	1000c95c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c954:	0029      	movs	r1, r5
1000c956:	310c      	adds	r1, #12
1000c958:	4b3c      	ldr	r3, [pc, #240]	; (1000ca4c <platform_event_wait+0x244>)
1000c95a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c95c:	8969      	ldrh	r1, [r5, #10]
1000c95e:	3108      	adds	r1, #8
1000c960:	4b3c      	ldr	r3, [pc, #240]	; (1000ca54 <platform_event_wait+0x24c>)
1000c962:	681b      	ldr	r3, [r3, #0]
1000c964:	4838      	ldr	r0, [pc, #224]	; (1000ca48 <platform_event_wait+0x240>)
1000c966:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c968:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c96a:	2503      	movs	r5, #3
1000c96c:	e003      	b.n	1000c976 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c96e:	2400      	movs	r4, #0
1000c970:	e001      	b.n	1000c976 <platform_event_wait+0x16e>
1000c972:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c974:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c976:	4b32      	ldr	r3, [pc, #200]	; (1000ca40 <platform_event_wait+0x238>)
1000c978:	6818      	ldr	r0, [r3, #0]
1000c97a:	4b39      	ldr	r3, [pc, #228]	; (1000ca60 <platform_event_wait+0x258>)
1000c97c:	681b      	ldr	r3, [r3, #0]
1000c97e:	4798      	blx	r3
1000c980:	e000      	b.n	1000c984 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000c982:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000c984:	2c00      	cmp	r4, #0
1000c986:	d000      	beq.n	1000c98a <platform_event_wait+0x182>
1000c988:	e76b      	b.n	1000c862 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000c98a:	464b      	mov	r3, r9
1000c98c:	2b00      	cmp	r3, #0
1000c98e:	d046      	beq.n	1000ca1e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c990:	4b29      	ldr	r3, [pc, #164]	; (1000ca38 <platform_event_wait+0x230>)
1000c992:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c994:	2e00      	cmp	r6, #0
1000c996:	d104      	bne.n	1000c9a2 <platform_event_wait+0x19a>
1000c998:	2300      	movs	r3, #0
1000c99a:	6a1c      	ldr	r4, [r3, #32]
1000c99c:	2c00      	cmp	r4, #0
1000c99e:	d131      	bne.n	1000ca04 <platform_event_wait+0x1fc>
1000c9a0:	e03d      	b.n	1000ca1e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c9a2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c9a4:	2314      	movs	r3, #20
1000c9a6:	469c      	mov	ip, r3
1000c9a8:	44b4      	add	ip, r6
1000c9aa:	4663      	mov	r3, ip
1000c9ac:	4660      	mov	r0, ip
1000c9ae:	9300      	str	r3, [sp, #0]
1000c9b0:	4b2c      	ldr	r3, [pc, #176]	; (1000ca64 <platform_event_wait+0x25c>)
1000c9b2:	681b      	ldr	r3, [r3, #0]
1000c9b4:	4798      	blx	r3
	while(NULL != current)
1000c9b6:	2c00      	cmp	r4, #0
1000c9b8:	d01f      	beq.n	1000c9fa <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c9ba:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c9bc:	23cd      	movs	r3, #205	; 0xcd
1000c9be:	009b      	lsls	r3, r3, #2
1000c9c0:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c9c2:	4b27      	ldr	r3, [pc, #156]	; (1000ca60 <platform_event_wait+0x258>)
1000c9c4:	469a      	mov	sl, r3
1000c9c6:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c9c8:	6803      	ldr	r3, [r0, #0]
1000c9ca:	889b      	ldrh	r3, [r3, #4]
1000c9cc:	4543      	cmp	r3, r8
1000c9ce:	d110      	bne.n	1000c9f2 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000c9d0:	2f00      	cmp	r7, #0
1000c9d2:	d006      	beq.n	1000c9e2 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000c9d4:	6883      	ldr	r3, [r0, #8]
1000c9d6:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000c9d8:	4653      	mov	r3, sl
1000c9da:	681b      	ldr	r3, [r3, #0]
1000c9dc:	4798      	blx	r3
				current = prev->pstrNext;
1000c9de:	68b8      	ldr	r0, [r7, #8]
1000c9e0:	e009      	b.n	1000c9f6 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c9e2:	6883      	ldr	r3, [r0, #8]
1000c9e4:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000c9e6:	4b1e      	ldr	r3, [pc, #120]	; (1000ca60 <platform_event_wait+0x258>)
1000c9e8:	681b      	ldr	r3, [r3, #0]
1000c9ea:	9301      	str	r3, [sp, #4]
1000c9ec:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c9ee:	6a30      	ldr	r0, [r6, #32]
1000c9f0:	e001      	b.n	1000c9f6 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c9f2:	0007      	movs	r7, r0
1000c9f4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c9f6:	2800      	cmp	r0, #0
1000c9f8:	d1e6      	bne.n	1000c9c8 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c9fa:	4b1b      	ldr	r3, [pc, #108]	; (1000ca68 <platform_event_wait+0x260>)
1000c9fc:	681b      	ldr	r3, [r3, #0]
1000c9fe:	9800      	ldr	r0, [sp, #0]
1000ca00:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000ca02:	e00c      	b.n	1000ca1e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000ca04:	2314      	movs	r3, #20
1000ca06:	9300      	str	r3, [sp, #0]
1000ca08:	4b16      	ldr	r3, [pc, #88]	; (1000ca64 <platform_event_wait+0x25c>)
1000ca0a:	681b      	ldr	r3, [r3, #0]
1000ca0c:	2014      	movs	r0, #20
1000ca0e:	4798      	blx	r3
1000ca10:	e7d3      	b.n	1000c9ba <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ca12:	4b10      	ldr	r3, [pc, #64]	; (1000ca54 <platform_event_wait+0x24c>)
1000ca14:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ca16:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ca18:	2b00      	cmp	r3, #0
1000ca1a:	d0ac      	beq.n	1000c976 <platform_event_wait+0x16e>
1000ca1c:	e77b      	b.n	1000c916 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000ca1e:	0028      	movs	r0, r5
1000ca20:	b007      	add	sp, #28
1000ca22:	bc3c      	pop	{r2, r3, r4, r5}
1000ca24:	4690      	mov	r8, r2
1000ca26:	4699      	mov	r9, r3
1000ca28:	46a2      	mov	sl, r4
1000ca2a:	46ab      	mov	fp, r5
1000ca2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca2e:	46c0      	nop			; (mov r8, r8)
1000ca30:	1001865f 	.word	0x1001865f
1000ca34:	1000c779 	.word	0x1000c779
1000ca38:	1001d470 	.word	0x1001d470
1000ca3c:	1001d458 	.word	0x1001d458
1000ca40:	1001d42c 	.word	0x1001d42c
1000ca44:	1001e404 	.word	0x1001e404
1000ca48:	1001e16c 	.word	0x1001e16c
1000ca4c:	10018623 	.word	0x10018623
1000ca50:	1000c399 	.word	0x1000c399
1000ca54:	1001d460 	.word	0x1001d460
1000ca58:	1001d468 	.word	0x1001d468
1000ca5c:	1001d434 	.word	0x1001d434
1000ca60:	1001d430 	.word	0x1001d430
1000ca64:	1001d450 	.word	0x1001d450
1000ca68:	1001d43c 	.word	0x1001d43c

1000ca6c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ca6c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ca6e:	4b03      	ldr	r3, [pc, #12]	; (1000ca7c <acquire_sleep_lock+0x10>)
1000ca70:	681b      	ldr	r3, [r3, #0]
1000ca72:	2080      	movs	r0, #128	; 0x80
1000ca74:	0200      	lsls	r0, r0, #8
1000ca76:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ca78:	2008      	movs	r0, #8
1000ca7a:	bd10      	pop	{r4, pc}
1000ca7c:	1001e124 	.word	0x1001e124

1000ca80 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ca80:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ca82:	4b03      	ldr	r3, [pc, #12]	; (1000ca90 <release_message_lock+0x10>)
1000ca84:	681b      	ldr	r3, [r3, #0]
1000ca86:	2080      	movs	r0, #128	; 0x80
1000ca88:	01c0      	lsls	r0, r0, #7
1000ca8a:	4798      	blx	r3
	return status;
}
1000ca8c:	2000      	movs	r0, #0
1000ca8e:	bd10      	pop	{r4, pc}
1000ca90:	1001e130 	.word	0x1001e130

1000ca94 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ca94:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ca96:	4c05      	ldr	r4, [pc, #20]	; (1000caac <release_sleep_lock+0x18>)
1000ca98:	2080      	movs	r0, #128	; 0x80
1000ca9a:	01c0      	lsls	r0, r0, #7
1000ca9c:	6823      	ldr	r3, [r4, #0]
1000ca9e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000caa0:	6823      	ldr	r3, [r4, #0]
1000caa2:	2080      	movs	r0, #128	; 0x80
1000caa4:	0200      	lsls	r0, r0, #8
1000caa6:	4798      	blx	r3
	return status;
}
1000caa8:	2000      	movs	r0, #0
1000caaa:	bd10      	pop	{r4, pc}
1000caac:	1001e130 	.word	0x1001e130

1000cab0 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000cab0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000cab2:	4a18      	ldr	r2, [pc, #96]	; (1000cb14 <gpio1_combined_isr_handler+0x64>)
1000cab4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000cab6:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cab8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000caba:	2180      	movs	r1, #128	; 0x80
1000cabc:	0209      	lsls	r1, r1, #8
1000cabe:	4301      	orrs	r1, r0
1000cac0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cac2:	0010      	movs	r0, r2
1000cac4:	4d14      	ldr	r5, [pc, #80]	; (1000cb18 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000cac6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000cac8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000caca:	05db      	lsls	r3, r3, #23
1000cacc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000cace:	d011      	beq.n	1000caf4 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000cad0:	b2db      	uxtb	r3, r3
1000cad2:	4259      	negs	r1, r3
1000cad4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000cad6:	2b01      	cmp	r3, #1
1000cad8:	d006      	beq.n	1000cae8 <gpio1_combined_isr_handler+0x38>
1000cada:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000cadc:	085b      	lsrs	r3, r3, #1
				index++;
1000cade:	3101      	adds	r1, #1
1000cae0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000cae2:	2b01      	cmp	r3, #1
1000cae4:	d1fa      	bne.n	1000cadc <gpio1_combined_isr_handler+0x2c>
1000cae6:	e000      	b.n	1000caea <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000cae8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000caea:	0023      	movs	r3, r4
1000caec:	408b      	lsls	r3, r1
1000caee:	b29b      	uxth	r3, r3
1000caf0:	8703      	strh	r3, [r0, #56]	; 0x38
1000caf2:	e003      	b.n	1000cafc <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000caf4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000caf6:	432b      	orrs	r3, r5
1000caf8:	b29b      	uxth	r3, r3
1000cafa:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000cafc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000cafe:	05db      	lsls	r3, r3, #23
1000cb00:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000cb02:	d1e2      	bne.n	1000caca <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000cb04:	2180      	movs	r1, #128	; 0x80
1000cb06:	0049      	lsls	r1, r1, #1
1000cb08:	3381      	adds	r3, #129	; 0x81
1000cb0a:	33ff      	adds	r3, #255	; 0xff
1000cb0c:	4a03      	ldr	r2, [pc, #12]	; (1000cb1c <gpio1_combined_isr_handler+0x6c>)
1000cb0e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000cb10:	bd30      	pop	{r4, r5, pc}
1000cb12:	46c0      	nop			; (mov r8, r8)
1000cb14:	40011000 	.word	0x40011000
1000cb18:	ffff8000 	.word	0xffff8000
1000cb1c:	e000e100 	.word	0xe000e100

1000cb20 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000cb20:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000cb22:	4a17      	ldr	r2, [pc, #92]	; (1000cb80 <gpio0_combined_isr_handler+0x60>)
1000cb24:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000cb26:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cb28:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000cb2a:	2180      	movs	r1, #128	; 0x80
1000cb2c:	0209      	lsls	r1, r1, #8
1000cb2e:	4301      	orrs	r1, r0
1000cb30:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cb32:	0010      	movs	r0, r2
1000cb34:	4d13      	ldr	r5, [pc, #76]	; (1000cb84 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000cb36:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000cb38:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000cb3a:	05db      	lsls	r3, r3, #23
1000cb3c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000cb3e:	d011      	beq.n	1000cb64 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000cb40:	b2db      	uxtb	r3, r3
1000cb42:	4259      	negs	r1, r3
1000cb44:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000cb46:	2b01      	cmp	r3, #1
1000cb48:	d006      	beq.n	1000cb58 <gpio0_combined_isr_handler+0x38>
1000cb4a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000cb4c:	085b      	lsrs	r3, r3, #1
				index++;
1000cb4e:	3101      	adds	r1, #1
1000cb50:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000cb52:	2b01      	cmp	r3, #1
1000cb54:	d1fa      	bne.n	1000cb4c <gpio0_combined_isr_handler+0x2c>
1000cb56:	e000      	b.n	1000cb5a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000cb58:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000cb5a:	0023      	movs	r3, r4
1000cb5c:	408b      	lsls	r3, r1
1000cb5e:	b29b      	uxth	r3, r3
1000cb60:	8703      	strh	r3, [r0, #56]	; 0x38
1000cb62:	e003      	b.n	1000cb6c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cb64:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000cb66:	432b      	orrs	r3, r5
1000cb68:	b29b      	uxth	r3, r3
1000cb6a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000cb6c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000cb6e:	05db      	lsls	r3, r3, #23
1000cb70:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000cb72:	d1e2      	bne.n	1000cb3a <gpio0_combined_isr_handler+0x1a>
1000cb74:	2180      	movs	r1, #128	; 0x80
1000cb76:	3381      	adds	r3, #129	; 0x81
1000cb78:	33ff      	adds	r3, #255	; 0xff
1000cb7a:	4a03      	ldr	r2, [pc, #12]	; (1000cb88 <gpio0_combined_isr_handler+0x68>)
1000cb7c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000cb7e:	bd30      	pop	{r4, r5, pc}
1000cb80:	40010000 	.word	0x40010000
1000cb84:	ffff8000 	.word	0xffff8000
1000cb88:	e000e100 	.word	0xe000e100

1000cb8c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000cb8c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000cb8e:	4b0c      	ldr	r3, [pc, #48]	; (1000cbc0 <PORT1_COMB_Handler+0x34>)
1000cb90:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000cb92:	0b5b      	lsrs	r3, r3, #13
1000cb94:	d010      	beq.n	1000cbb8 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000cb96:	4b0b      	ldr	r3, [pc, #44]	; (1000cbc4 <PORT1_COMB_Handler+0x38>)
1000cb98:	681b      	ldr	r3, [r3, #0]
1000cb9a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000cb9c:	4a08      	ldr	r2, [pc, #32]	; (1000cbc0 <PORT1_COMB_Handler+0x34>)
1000cb9e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000cba0:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000cba2:	0b5b      	lsrs	r3, r3, #13
1000cba4:	035b      	lsls	r3, r3, #13
1000cba6:	430b      	orrs	r3, r1
1000cba8:	8713      	strh	r3, [r2, #56]	; 0x38
1000cbaa:	2180      	movs	r1, #128	; 0x80
1000cbac:	0049      	lsls	r1, r1, #1
1000cbae:	23c0      	movs	r3, #192	; 0xc0
1000cbb0:	005b      	lsls	r3, r3, #1
1000cbb2:	4a05      	ldr	r2, [pc, #20]	; (1000cbc8 <PORT1_COMB_Handler+0x3c>)
1000cbb4:	50d1      	str	r1, [r2, r3]
1000cbb6:	e001      	b.n	1000cbbc <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000cbb8:	4b04      	ldr	r3, [pc, #16]	; (1000cbcc <PORT1_COMB_Handler+0x40>)
1000cbba:	4798      	blx	r3
	}
}
1000cbbc:	bd10      	pop	{r4, pc}
1000cbbe:	46c0      	nop			; (mov r8, r8)
1000cbc0:	40011000 	.word	0x40011000
1000cbc4:	1001e3f0 	.word	0x1001e3f0
1000cbc8:	e000e100 	.word	0xe000e100
1000cbcc:	1000cab1 	.word	0x1000cab1

1000cbd0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000cbd0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000cbd2:	2802      	cmp	r0, #2
1000cbd4:	d804      	bhi.n	1000cbe0 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000cbd6:	0080      	lsls	r0, r0, #2
1000cbd8:	2200      	movs	r2, #0
1000cbda:	4b02      	ldr	r3, [pc, #8]	; (1000cbe4 <wakeup_int_unregister_callback+0x14>)
1000cbdc:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000cbde:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000cbe0:	0018      	movs	r0, r3
1000cbe2:	4770      	bx	lr
1000cbe4:	1001e408 	.word	0x1001e408

1000cbe8 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000cbe8:	b510      	push	{r4, lr}
1000cbea:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000cbec:	7803      	ldrb	r3, [r0, #0]
1000cbee:	2b01      	cmp	r3, #1
1000cbf0:	d108      	bne.n	1000cc04 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000cbf2:	4b11      	ldr	r3, [pc, #68]	; (1000cc38 <wakeup_active_event_callback+0x50>)
1000cbf4:	681b      	ldr	r3, [r3, #0]
1000cbf6:	2b00      	cmp	r3, #0
1000cbf8:	d000      	beq.n	1000cbfc <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000cbfa:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000cbfc:	23ff      	movs	r3, #255	; 0xff
1000cbfe:	6822      	ldr	r2, [r4, #0]
1000cc00:	439a      	bics	r2, r3
1000cc02:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000cc04:	7863      	ldrb	r3, [r4, #1]
1000cc06:	2b01      	cmp	r3, #1
1000cc08:	d108      	bne.n	1000cc1c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000cc0a:	4b0b      	ldr	r3, [pc, #44]	; (1000cc38 <wakeup_active_event_callback+0x50>)
1000cc0c:	685b      	ldr	r3, [r3, #4]
1000cc0e:	2b00      	cmp	r3, #0
1000cc10:	d000      	beq.n	1000cc14 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000cc12:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000cc14:	4b09      	ldr	r3, [pc, #36]	; (1000cc3c <wakeup_active_event_callback+0x54>)
1000cc16:	6822      	ldr	r2, [r4, #0]
1000cc18:	4013      	ands	r3, r2
1000cc1a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000cc1c:	78a3      	ldrb	r3, [r4, #2]
1000cc1e:	2b01      	cmp	r3, #1
1000cc20:	d108      	bne.n	1000cc34 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000cc22:	4b05      	ldr	r3, [pc, #20]	; (1000cc38 <wakeup_active_event_callback+0x50>)
1000cc24:	689b      	ldr	r3, [r3, #8]
1000cc26:	2b00      	cmp	r3, #0
1000cc28:	d000      	beq.n	1000cc2c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000cc2a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000cc2c:	4b04      	ldr	r3, [pc, #16]	; (1000cc40 <wakeup_active_event_callback+0x58>)
1000cc2e:	6822      	ldr	r2, [r4, #0]
1000cc30:	4013      	ands	r3, r2
1000cc32:	6023      	str	r3, [r4, #0]
	}
}
1000cc34:	bd10      	pop	{r4, pc}
1000cc36:	46c0      	nop			; (mov r8, r8)
1000cc38:	1001e408 	.word	0x1001e408
1000cc3c:	ffff00ff 	.word	0xffff00ff
1000cc40:	ff00ffff 	.word	0xff00ffff

1000cc44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc46:	4647      	mov	r7, r8
1000cc48:	b480      	push	{r7}
1000cc4a:	000c      	movs	r4, r1
1000cc4c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000cc4e:	2800      	cmp	r0, #0
1000cc50:	d10d      	bne.n	1000cc6e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000cc52:	2a00      	cmp	r2, #0
1000cc54:	dd0e      	ble.n	1000cc74 <_read+0x30>
1000cc56:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000cc58:	4e08      	ldr	r6, [pc, #32]	; (1000cc7c <_read+0x38>)
1000cc5a:	4d09      	ldr	r5, [pc, #36]	; (1000cc80 <_read+0x3c>)
1000cc5c:	6830      	ldr	r0, [r6, #0]
1000cc5e:	0021      	movs	r1, r4
1000cc60:	682b      	ldr	r3, [r5, #0]
1000cc62:	4798      	blx	r3
		ptr++;
1000cc64:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cc66:	42a7      	cmp	r7, r4
1000cc68:	d1f8      	bne.n	1000cc5c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000cc6a:	4640      	mov	r0, r8
1000cc6c:	e003      	b.n	1000cc76 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000cc6e:	2001      	movs	r0, #1
1000cc70:	4240      	negs	r0, r0
1000cc72:	e000      	b.n	1000cc76 <_read+0x32>
	}

	for (; len > 0; --len) {
1000cc74:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000cc76:	bc04      	pop	{r2}
1000cc78:	4690      	mov	r8, r2
1000cc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc7c:	1001e41c 	.word	0x1001e41c
1000cc80:	1001e414 	.word	0x1001e414

1000cc84 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc86:	4647      	mov	r7, r8
1000cc88:	b480      	push	{r7}
1000cc8a:	000e      	movs	r6, r1
1000cc8c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cc8e:	3801      	subs	r0, #1
1000cc90:	2802      	cmp	r0, #2
1000cc92:	d811      	bhi.n	1000ccb8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000cc94:	2a00      	cmp	r2, #0
1000cc96:	d012      	beq.n	1000ccbe <_write+0x3a>
1000cc98:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000cc9a:	4b0c      	ldr	r3, [pc, #48]	; (1000cccc <_write+0x48>)
1000cc9c:	4698      	mov	r8, r3
1000cc9e:	4f0c      	ldr	r7, [pc, #48]	; (1000ccd0 <_write+0x4c>)
1000cca0:	4643      	mov	r3, r8
1000cca2:	6818      	ldr	r0, [r3, #0]
1000cca4:	5d31      	ldrb	r1, [r6, r4]
1000cca6:	683b      	ldr	r3, [r7, #0]
1000cca8:	4798      	blx	r3
1000ccaa:	2800      	cmp	r0, #0
1000ccac:	db09      	blt.n	1000ccc2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000ccae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000ccb0:	42a5      	cmp	r5, r4
1000ccb2:	d1f5      	bne.n	1000cca0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000ccb4:	0020      	movs	r0, r4
1000ccb6:	e006      	b.n	1000ccc6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000ccb8:	2001      	movs	r0, #1
1000ccba:	4240      	negs	r0, r0
1000ccbc:	e003      	b.n	1000ccc6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000ccbe:	2000      	movs	r0, #0
1000ccc0:	e001      	b.n	1000ccc6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000ccc2:	2001      	movs	r0, #1
1000ccc4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000ccc6:	bc04      	pop	{r2}
1000ccc8:	4690      	mov	r8, r2
1000ccca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cccc:	1001e41c 	.word	0x1001e41c
1000ccd0:	1001e418 	.word	0x1001e418

1000ccd4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ccd4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ccd6:	4b20      	ldr	r3, [pc, #128]	; (1000cd58 <uart_rx0_isr_handler+0x84>)
1000ccd8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ccda:	6823      	ldr	r3, [r4, #0]
1000ccdc:	7d1d      	ldrb	r5, [r3, #20]
1000ccde:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cce0:	066a      	lsls	r2, r5, #25
1000cce2:	d513      	bpl.n	1000cd0c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cce4:	211e      	movs	r1, #30
1000cce6:	2222      	movs	r2, #34	; 0x22
1000cce8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ccea:	7e1a      	ldrb	r2, [r3, #24]
1000ccec:	3123      	adds	r1, #35	; 0x23
1000ccee:	438a      	bics	r2, r1
1000ccf0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ccf2:	2321      	movs	r3, #33	; 0x21
1000ccf4:	5ce3      	ldrb	r3, [r4, r3]
1000ccf6:	071b      	lsls	r3, r3, #28
1000ccf8:	d506      	bpl.n	1000cd08 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ccfa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ccfc:	5ce3      	ldrb	r3, [r4, r3]
1000ccfe:	071b      	lsls	r3, r3, #28
1000cd00:	d502      	bpl.n	1000cd08 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cd02:	0020      	movs	r0, r4
1000cd04:	6923      	ldr	r3, [r4, #16]
1000cd06:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cd08:	6823      	ldr	r3, [r4, #0]
1000cd0a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cd0c:	07eb      	lsls	r3, r5, #31
1000cd0e:	d522      	bpl.n	1000cd56 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cd10:	6823      	ldr	r3, [r4, #0]
1000cd12:	7c1b      	ldrb	r3, [r3, #16]
1000cd14:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cd16:	6962      	ldr	r2, [r4, #20]
1000cd18:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cd1a:	6963      	ldr	r3, [r4, #20]
1000cd1c:	3301      	adds	r3, #1
1000cd1e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cd20:	8ba3      	ldrh	r3, [r4, #28]
1000cd22:	3b01      	subs	r3, #1
1000cd24:	b29b      	uxth	r3, r3
1000cd26:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cd28:	8ba3      	ldrh	r3, [r4, #28]
1000cd2a:	b29b      	uxth	r3, r3
1000cd2c:	2b00      	cmp	r3, #0
1000cd2e:	d112      	bne.n	1000cd56 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cd30:	3321      	adds	r3, #33	; 0x21
1000cd32:	5ce3      	ldrb	r3, [r4, r3]
1000cd34:	075b      	lsls	r3, r3, #29
1000cd36:	d50e      	bpl.n	1000cd56 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cd38:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cd3a:	5ce3      	ldrb	r3, [r4, r3]
1000cd3c:	075b      	lsls	r3, r3, #29
1000cd3e:	d50a      	bpl.n	1000cd56 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cd40:	2200      	movs	r2, #0
1000cd42:	2322      	movs	r3, #34	; 0x22
1000cd44:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cd46:	6822      	ldr	r2, [r4, #0]
1000cd48:	7e13      	ldrb	r3, [r2, #24]
1000cd4a:	2101      	movs	r1, #1
1000cd4c:	438b      	bics	r3, r1
1000cd4e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cd50:	68e3      	ldr	r3, [r4, #12]
1000cd52:	0020      	movs	r0, r4
1000cd54:	4798      	blx	r3
			}
		}
	}
}
1000cd56:	bd70      	pop	{r4, r5, r6, pc}
1000cd58:	1001e420 	.word	0x1001e420

1000cd5c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000cd5c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cd5e:	4b21      	ldr	r3, [pc, #132]	; (1000cde4 <uart_tx0_isr_handler+0x88>)
1000cd60:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cd62:	6823      	ldr	r3, [r4, #0]
1000cd64:	791d      	ldrb	r5, [r3, #4]
1000cd66:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cd68:	07ea      	lsls	r2, r5, #31
1000cd6a:	d517      	bpl.n	1000cd9c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cd6c:	69a2      	ldr	r2, [r4, #24]
1000cd6e:	7811      	ldrb	r1, [r2, #0]
1000cd70:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cd72:	3201      	adds	r2, #1
1000cd74:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cd76:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cd78:	8be3      	ldrh	r3, [r4, #30]
1000cd7a:	3b01      	subs	r3, #1
1000cd7c:	b29b      	uxth	r3, r3
1000cd7e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cd80:	8be3      	ldrh	r3, [r4, #30]
1000cd82:	b29b      	uxth	r3, r3
1000cd84:	2b00      	cmp	r3, #0
1000cd86:	d109      	bne.n	1000cd9c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cd88:	6822      	ldr	r2, [r4, #0]
1000cd8a:	7a13      	ldrb	r3, [r2, #8]
1000cd8c:	2101      	movs	r1, #1
1000cd8e:	438b      	bics	r3, r1
1000cd90:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cd92:	6822      	ldr	r2, [r4, #0]
1000cd94:	7a11      	ldrb	r1, [r2, #8]
1000cd96:	2310      	movs	r3, #16
1000cd98:	430b      	orrs	r3, r1
1000cd9a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cd9c:	06eb      	lsls	r3, r5, #27
1000cd9e:	d512      	bpl.n	1000cdc6 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cda0:	2321      	movs	r3, #33	; 0x21
1000cda2:	5ce3      	ldrb	r3, [r4, r3]
1000cda4:	07db      	lsls	r3, r3, #31
1000cda6:	d50e      	bpl.n	1000cdc6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cda8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cdaa:	5ce3      	ldrb	r3, [r4, r3]
1000cdac:	07db      	lsls	r3, r3, #31
1000cdae:	d50a      	bpl.n	1000cdc6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cdb0:	2200      	movs	r2, #0
1000cdb2:	2322      	movs	r3, #34	; 0x22
1000cdb4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cdb6:	6822      	ldr	r2, [r4, #0]
1000cdb8:	7a13      	ldrb	r3, [r2, #8]
1000cdba:	2110      	movs	r1, #16
1000cdbc:	438b      	bics	r3, r1
1000cdbe:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cdc0:	0020      	movs	r0, r4
1000cdc2:	6863      	ldr	r3, [r4, #4]
1000cdc4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cdc6:	06ab      	lsls	r3, r5, #26
1000cdc8:	d50a      	bpl.n	1000cde0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cdca:	2321      	movs	r3, #33	; 0x21
1000cdcc:	5ce3      	ldrb	r3, [r4, r3]
1000cdce:	079b      	lsls	r3, r3, #30
1000cdd0:	d506      	bpl.n	1000cde0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cdd2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cdd4:	5ce3      	ldrb	r3, [r4, r3]
1000cdd6:	079b      	lsls	r3, r3, #30
1000cdd8:	d502      	bpl.n	1000cde0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cdda:	68a3      	ldr	r3, [r4, #8]
1000cddc:	0020      	movs	r0, r4
1000cdde:	4798      	blx	r3
		}

	}
}
1000cde0:	bd70      	pop	{r4, r5, r6, pc}
1000cde2:	46c0      	nop			; (mov r8, r8)
1000cde4:	1001e420 	.word	0x1001e420

1000cde8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cde8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cdea:	4b20      	ldr	r3, [pc, #128]	; (1000ce6c <uart_rx1_isr_handler+0x84>)
1000cdec:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cdee:	6823      	ldr	r3, [r4, #0]
1000cdf0:	7d1d      	ldrb	r5, [r3, #20]
1000cdf2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cdf4:	066a      	lsls	r2, r5, #25
1000cdf6:	d513      	bpl.n	1000ce20 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cdf8:	211e      	movs	r1, #30
1000cdfa:	2222      	movs	r2, #34	; 0x22
1000cdfc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cdfe:	7e1a      	ldrb	r2, [r3, #24]
1000ce00:	3123      	adds	r1, #35	; 0x23
1000ce02:	438a      	bics	r2, r1
1000ce04:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce06:	2321      	movs	r3, #33	; 0x21
1000ce08:	5ce3      	ldrb	r3, [r4, r3]
1000ce0a:	071b      	lsls	r3, r3, #28
1000ce0c:	d506      	bpl.n	1000ce1c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ce0e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce10:	5ce3      	ldrb	r3, [r4, r3]
1000ce12:	071b      	lsls	r3, r3, #28
1000ce14:	d502      	bpl.n	1000ce1c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ce16:	0020      	movs	r0, r4
1000ce18:	6923      	ldr	r3, [r4, #16]
1000ce1a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ce1c:	6823      	ldr	r3, [r4, #0]
1000ce1e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ce20:	07eb      	lsls	r3, r5, #31
1000ce22:	d522      	bpl.n	1000ce6a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ce24:	6823      	ldr	r3, [r4, #0]
1000ce26:	7c1b      	ldrb	r3, [r3, #16]
1000ce28:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ce2a:	6962      	ldr	r2, [r4, #20]
1000ce2c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ce2e:	6963      	ldr	r3, [r4, #20]
1000ce30:	3301      	adds	r3, #1
1000ce32:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ce34:	8ba3      	ldrh	r3, [r4, #28]
1000ce36:	3b01      	subs	r3, #1
1000ce38:	b29b      	uxth	r3, r3
1000ce3a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ce3c:	8ba3      	ldrh	r3, [r4, #28]
1000ce3e:	b29b      	uxth	r3, r3
1000ce40:	2b00      	cmp	r3, #0
1000ce42:	d112      	bne.n	1000ce6a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce44:	3321      	adds	r3, #33	; 0x21
1000ce46:	5ce3      	ldrb	r3, [r4, r3]
1000ce48:	075b      	lsls	r3, r3, #29
1000ce4a:	d50e      	bpl.n	1000ce6a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ce4c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce4e:	5ce3      	ldrb	r3, [r4, r3]
1000ce50:	075b      	lsls	r3, r3, #29
1000ce52:	d50a      	bpl.n	1000ce6a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ce54:	2200      	movs	r2, #0
1000ce56:	2322      	movs	r3, #34	; 0x22
1000ce58:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ce5a:	6822      	ldr	r2, [r4, #0]
1000ce5c:	7e13      	ldrb	r3, [r2, #24]
1000ce5e:	2101      	movs	r1, #1
1000ce60:	438b      	bics	r3, r1
1000ce62:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ce64:	68e3      	ldr	r3, [r4, #12]
1000ce66:	0020      	movs	r0, r4
1000ce68:	4798      	blx	r3
			}
		}
	}
}
1000ce6a:	bd70      	pop	{r4, r5, r6, pc}
1000ce6c:	1001e420 	.word	0x1001e420

1000ce70 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000ce70:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ce72:	4b21      	ldr	r3, [pc, #132]	; (1000cef8 <uart_tx1_isr_handler+0x88>)
1000ce74:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ce76:	6823      	ldr	r3, [r4, #0]
1000ce78:	791d      	ldrb	r5, [r3, #4]
1000ce7a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ce7c:	07ea      	lsls	r2, r5, #31
1000ce7e:	d517      	bpl.n	1000ceb0 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ce80:	69a2      	ldr	r2, [r4, #24]
1000ce82:	7811      	ldrb	r1, [r2, #0]
1000ce84:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ce86:	3201      	adds	r2, #1
1000ce88:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ce8a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ce8c:	8be3      	ldrh	r3, [r4, #30]
1000ce8e:	3b01      	subs	r3, #1
1000ce90:	b29b      	uxth	r3, r3
1000ce92:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ce94:	8be3      	ldrh	r3, [r4, #30]
1000ce96:	b29b      	uxth	r3, r3
1000ce98:	2b00      	cmp	r3, #0
1000ce9a:	d109      	bne.n	1000ceb0 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ce9c:	6822      	ldr	r2, [r4, #0]
1000ce9e:	7a13      	ldrb	r3, [r2, #8]
1000cea0:	2101      	movs	r1, #1
1000cea2:	438b      	bics	r3, r1
1000cea4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cea6:	6822      	ldr	r2, [r4, #0]
1000cea8:	7a11      	ldrb	r1, [r2, #8]
1000ceaa:	2310      	movs	r3, #16
1000ceac:	430b      	orrs	r3, r1
1000ceae:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ceb0:	06eb      	lsls	r3, r5, #27
1000ceb2:	d512      	bpl.n	1000ceda <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ceb4:	2321      	movs	r3, #33	; 0x21
1000ceb6:	5ce3      	ldrb	r3, [r4, r3]
1000ceb8:	07db      	lsls	r3, r3, #31
1000ceba:	d50e      	bpl.n	1000ceda <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cebc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cebe:	5ce3      	ldrb	r3, [r4, r3]
1000cec0:	07db      	lsls	r3, r3, #31
1000cec2:	d50a      	bpl.n	1000ceda <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cec4:	2200      	movs	r2, #0
1000cec6:	2322      	movs	r3, #34	; 0x22
1000cec8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ceca:	6822      	ldr	r2, [r4, #0]
1000cecc:	7a13      	ldrb	r3, [r2, #8]
1000cece:	2110      	movs	r1, #16
1000ced0:	438b      	bics	r3, r1
1000ced2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ced4:	0020      	movs	r0, r4
1000ced6:	6863      	ldr	r3, [r4, #4]
1000ced8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ceda:	06ab      	lsls	r3, r5, #26
1000cedc:	d50a      	bpl.n	1000cef4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cede:	2321      	movs	r3, #33	; 0x21
1000cee0:	5ce3      	ldrb	r3, [r4, r3]
1000cee2:	079b      	lsls	r3, r3, #30
1000cee4:	d506      	bpl.n	1000cef4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cee6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cee8:	5ce3      	ldrb	r3, [r4, r3]
1000ceea:	079b      	lsls	r3, r3, #30
1000ceec:	d502      	bpl.n	1000cef4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ceee:	68a3      	ldr	r3, [r4, #8]
1000cef0:	0020      	movs	r0, r4
1000cef2:	4798      	blx	r3
		}

	}
}
1000cef4:	bd70      	pop	{r4, r5, r6, pc}
1000cef6:	46c0      	nop			; (mov r8, r8)
1000cef8:	1001e420 	.word	0x1001e420

1000cefc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cefc:	23e1      	movs	r3, #225	; 0xe1
1000cefe:	025b      	lsls	r3, r3, #9
1000cf00:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000cf02:	2300      	movs	r3, #0
1000cf04:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000cf06:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000cf08:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000cf0a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cf0c:	3302      	adds	r3, #2
1000cf0e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cf10:	2203      	movs	r2, #3
1000cf12:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cf14:	3201      	adds	r2, #1
1000cf16:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cf18:	3201      	adds	r2, #1
1000cf1a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000cf1c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000cf1e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000cf20:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000cf22:	6243      	str	r3, [r0, #36]	; 0x24
}
1000cf24:	4770      	bx	lr
1000cf26:	46c0      	nop			; (mov r8, r8)

1000cf28 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cf2a:	464f      	mov	r7, r9
1000cf2c:	4646      	mov	r6, r8
1000cf2e:	b4c0      	push	{r6, r7}
1000cf30:	0005      	movs	r5, r0
1000cf32:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cf34:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cf36:	2300      	movs	r3, #0
1000cf38:	6043      	str	r3, [r0, #4]
1000cf3a:	6083      	str	r3, [r0, #8]
1000cf3c:	60c3      	str	r3, [r0, #12]
1000cf3e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cf40:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cf42:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000cf44:	2200      	movs	r2, #0
1000cf46:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000cf48:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cf4a:	3320      	adds	r3, #32
1000cf4c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cf4e:	3301      	adds	r3, #1
1000cf50:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000cf52:	3301      	adds	r3, #1
1000cf54:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000cf56:	4b55      	ldr	r3, [pc, #340]	; (1000d0ac <uart_init+0x184>)
1000cf58:	4299      	cmp	r1, r3
1000cf5a:	d118      	bne.n	1000cf8e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000cf5c:	2009      	movs	r0, #9
1000cf5e:	4c54      	ldr	r4, [pc, #336]	; (1000d0b0 <uart_init+0x188>)
1000cf60:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000cf62:	200a      	movs	r0, #10
1000cf64:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cf66:	2009      	movs	r0, #9
1000cf68:	4c52      	ldr	r4, [pc, #328]	; (1000d0b4 <uart_init+0x18c>)
1000cf6a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cf6c:	200a      	movs	r0, #10
1000cf6e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cf70:	4b51      	ldr	r3, [pc, #324]	; (1000d0b8 <uart_init+0x190>)
1000cf72:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cf74:	4951      	ldr	r1, [pc, #324]	; (1000d0bc <uart_init+0x194>)
1000cf76:	2010      	movs	r0, #16
1000cf78:	4c51      	ldr	r4, [pc, #324]	; (1000d0c0 <uart_init+0x198>)
1000cf7a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cf7c:	4951      	ldr	r1, [pc, #324]	; (1000d0c4 <uart_init+0x19c>)
1000cf7e:	2011      	movs	r0, #17
1000cf80:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cf82:	4b51      	ldr	r3, [pc, #324]	; (1000d0c8 <uart_init+0x1a0>)
1000cf84:	2201      	movs	r2, #1
1000cf86:	601a      	str	r2, [r3, #0]
1000cf88:	3201      	adds	r2, #1
1000cf8a:	601a      	str	r2, [r3, #0]
1000cf8c:	e01a      	b.n	1000cfc4 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000cf8e:	4b4f      	ldr	r3, [pc, #316]	; (1000d0cc <uart_init+0x1a4>)
1000cf90:	4299      	cmp	r1, r3
1000cf92:	d117      	bne.n	1000cfc4 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cf94:	200b      	movs	r0, #11
1000cf96:	4c46      	ldr	r4, [pc, #280]	; (1000d0b0 <uart_init+0x188>)
1000cf98:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cf9a:	200c      	movs	r0, #12
1000cf9c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cf9e:	200b      	movs	r0, #11
1000cfa0:	4c44      	ldr	r4, [pc, #272]	; (1000d0b4 <uart_init+0x18c>)
1000cfa2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cfa4:	200c      	movs	r0, #12
1000cfa6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cfa8:	4b43      	ldr	r3, [pc, #268]	; (1000d0b8 <uart_init+0x190>)
1000cfaa:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cfac:	4948      	ldr	r1, [pc, #288]	; (1000d0d0 <uart_init+0x1a8>)
1000cfae:	2012      	movs	r0, #18
1000cfb0:	4c43      	ldr	r4, [pc, #268]	; (1000d0c0 <uart_init+0x198>)
1000cfb2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cfb4:	4947      	ldr	r1, [pc, #284]	; (1000d0d4 <uart_init+0x1ac>)
1000cfb6:	2013      	movs	r0, #19
1000cfb8:	47a0      	blx	r4
1000cfba:	4b43      	ldr	r3, [pc, #268]	; (1000d0c8 <uart_init+0x1a0>)
1000cfbc:	2204      	movs	r2, #4
1000cfbe:	601a      	str	r2, [r3, #0]
1000cfc0:	3204      	adds	r2, #4
1000cfc2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cfc4:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000cfc6:	2204      	movs	r2, #4
1000cfc8:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cfca:	2b00      	cmp	r3, #0
1000cfcc:	d152      	bne.n	1000d074 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000cfce:	3302      	adds	r3, #2
1000cfd0:	4698      	mov	r8, r3
1000cfd2:	e04f      	b.n	1000d074 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cfd4:	8a31      	ldrh	r1, [r6, #16]
1000cfd6:	ce01      	ldmia	r6!, {r0}
1000cfd8:	b2c0      	uxtb	r0, r0
1000cfda:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cfdc:	3401      	adds	r4, #1
1000cfde:	b2e4      	uxtb	r4, r4
1000cfe0:	4544      	cmp	r4, r8
1000cfe2:	d3f7      	bcc.n	1000cfd4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cfe4:	682b      	ldr	r3, [r5, #0]
1000cfe6:	7d1a      	ldrb	r2, [r3, #20]
1000cfe8:	07d2      	lsls	r2, r2, #31
1000cfea:	d504      	bpl.n	1000cff6 <uart_init+0xce>
1000cfec:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000cfee:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cff0:	7d1a      	ldrb	r2, [r3, #20]
1000cff2:	420a      	tst	r2, r1
1000cff4:	d1fb      	bne.n	1000cfee <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000cff6:	2100      	movs	r1, #0
1000cff8:	2220      	movs	r2, #32
1000cffa:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cffc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000cffe:	1e59      	subs	r1, r3, #1
1000d000:	418b      	sbcs	r3, r1
1000d002:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d004:	793b      	ldrb	r3, [r7, #4]
1000d006:	797a      	ldrb	r2, [r7, #5]
1000d008:	4313      	orrs	r3, r2
1000d00a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d00c:	79ba      	ldrb	r2, [r7, #6]
1000d00e:	2a02      	cmp	r2, #2
1000d010:	d00d      	beq.n	1000d02e <uart_init+0x106>
1000d012:	b2d1      	uxtb	r1, r2
1000d014:	2902      	cmp	r1, #2
1000d016:	d802      	bhi.n	1000d01e <uart_init+0xf6>
1000d018:	2a01      	cmp	r2, #1
1000d01a:	d005      	beq.n	1000d028 <uart_init+0x100>
1000d01c:	e00f      	b.n	1000d03e <uart_init+0x116>
1000d01e:	2a03      	cmp	r2, #3
1000d020:	d008      	beq.n	1000d034 <uart_init+0x10c>
1000d022:	2a04      	cmp	r2, #4
1000d024:	d009      	beq.n	1000d03a <uart_init+0x112>
1000d026:	e00a      	b.n	1000d03e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d028:	2202      	movs	r2, #2
1000d02a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d02c:	e007      	b.n	1000d03e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d02e:	2206      	movs	r2, #6
1000d030:	4313      	orrs	r3, r2
			break;
1000d032:	e004      	b.n	1000d03e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d034:	220a      	movs	r2, #10
1000d036:	4313      	orrs	r3, r2
			break;
1000d038:	e001      	b.n	1000d03e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d03a:	220e      	movs	r2, #14
1000d03c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d03e:	2220      	movs	r2, #32
1000d040:	6829      	ldr	r1, [r5, #0]
1000d042:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d044:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d046:	4b24      	ldr	r3, [pc, #144]	; (1000d0d8 <uart_init+0x1b0>)
1000d048:	4798      	blx	r3
1000d04a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d04c:	0031      	movs	r1, r6
1000d04e:	4b23      	ldr	r3, [pc, #140]	; (1000d0dc <uart_init+0x1b4>)
1000d050:	4798      	blx	r3
1000d052:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d054:	0400      	lsls	r0, r0, #16
1000d056:	0c00      	lsrs	r0, r0, #16
1000d058:	4370      	muls	r0, r6
1000d05a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d05c:	0931      	lsrs	r1, r6, #4
1000d05e:	4288      	cmp	r0, r1
1000d060:	d906      	bls.n	1000d070 <uart_init+0x148>
1000d062:	2300      	movs	r3, #0
		i++;
1000d064:	3301      	adds	r3, #1
1000d066:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d068:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d06a:	4288      	cmp	r0, r1
1000d06c:	d8fa      	bhi.n	1000d064 <uart_init+0x13c>
1000d06e:	e007      	b.n	1000d080 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d070:	2300      	movs	r3, #0
1000d072:	e005      	b.n	1000d080 <uart_init+0x158>
1000d074:	003e      	movs	r6, r7
1000d076:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d078:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d07a:	4b19      	ldr	r3, [pc, #100]	; (1000d0e0 <uart_init+0x1b8>)
1000d07c:	4699      	mov	r9, r3
1000d07e:	e7a9      	b.n	1000cfd4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d080:	2100      	movs	r1, #0
1000d082:	2028      	movs	r0, #40	; 0x28
1000d084:	682c      	ldr	r4, [r5, #0]
1000d086:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d088:	3301      	adds	r3, #1
1000d08a:	071b      	lsls	r3, r3, #28
1000d08c:	0f5b      	lsrs	r3, r3, #29
1000d08e:	00d2      	lsls	r2, r2, #3
1000d090:	4313      	orrs	r3, r2
1000d092:	b29b      	uxth	r3, r3
1000d094:	682a      	ldr	r2, [r5, #0]
1000d096:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d098:	682b      	ldr	r3, [r5, #0]
1000d09a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d09c:	682b      	ldr	r3, [r5, #0]
1000d09e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d0a0:	2000      	movs	r0, #0
1000d0a2:	bc0c      	pop	{r2, r3}
1000d0a4:	4690      	mov	r8, r2
1000d0a6:	4699      	mov	r9, r3
1000d0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d0aa:	46c0      	nop			; (mov r8, r8)
1000d0ac:	40004000 	.word	0x40004000
1000d0b0:	1000dd69 	.word	0x1000dd69
1000d0b4:	1000d9f5 	.word	0x1000d9f5
1000d0b8:	1001e420 	.word	0x1001e420
1000d0bc:	1000ccd5 	.word	0x1000ccd5
1000d0c0:	1000e1d1 	.word	0x1000e1d1
1000d0c4:	1000cd5d 	.word	0x1000cd5d
1000d0c8:	e000e100 	.word	0xe000e100
1000d0cc:	40005000 	.word	0x40005000
1000d0d0:	1000cde9 	.word	0x1000cde9
1000d0d4:	1000ce71 	.word	0x1000ce71
1000d0d8:	1000d9e9 	.word	0x1000d9e9
1000d0dc:	10015309 	.word	0x10015309
1000d0e0:	1000d49d 	.word	0x1000d49d

1000d0e4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d0e4:	6802      	ldr	r2, [r0, #0]
1000d0e6:	2001      	movs	r0, #1
1000d0e8:	7913      	ldrb	r3, [r2, #4]
1000d0ea:	4203      	tst	r3, r0
1000d0ec:	d0fc      	beq.n	1000d0e8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d0ee:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d0f0:	2000      	movs	r0, #0
1000d0f2:	4770      	bx	lr

1000d0f4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d0f4:	6802      	ldr	r2, [r0, #0]
1000d0f6:	2001      	movs	r0, #1
1000d0f8:	7d13      	ldrb	r3, [r2, #20]
1000d0fa:	4203      	tst	r3, r0
1000d0fc:	d0fc      	beq.n	1000d0f8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d0fe:	7c13      	ldrb	r3, [r2, #16]
1000d100:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d102:	2000      	movs	r0, #0
1000d104:	4770      	bx	lr
1000d106:	46c0      	nop			; (mov r8, r8)

1000d108 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d108:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d10a:	2a00      	cmp	r2, #0
1000d10c:	d00d      	beq.n	1000d12a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d10e:	330b      	adds	r3, #11
1000d110:	5cc3      	ldrb	r3, [r0, r3]
1000d112:	b2db      	uxtb	r3, r3
1000d114:	2b05      	cmp	r3, #5
1000d116:	d008      	beq.n	1000d12a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d118:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d11a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d11c:	2205      	movs	r2, #5
1000d11e:	2322      	movs	r3, #34	; 0x22
1000d120:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d122:	6803      	ldr	r3, [r0, #0]
1000d124:	3a04      	subs	r2, #4
1000d126:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d128:	2300      	movs	r3, #0
}
1000d12a:	0018      	movs	r0, r3
1000d12c:	4770      	bx	lr
1000d12e:	46c0      	nop			; (mov r8, r8)

1000d130 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d130:	0093      	lsls	r3, r2, #2
1000d132:	18c3      	adds	r3, r0, r3
1000d134:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d136:	2120      	movs	r1, #32
1000d138:	2301      	movs	r3, #1
1000d13a:	4093      	lsls	r3, r2
1000d13c:	5c42      	ldrb	r2, [r0, r1]
1000d13e:	4313      	orrs	r3, r2
1000d140:	5443      	strb	r3, [r0, r1]
}
1000d142:	4770      	bx	lr

1000d144 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d144:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d146:	2221      	movs	r2, #33	; 0x21
1000d148:	2301      	movs	r3, #1
1000d14a:	408b      	lsls	r3, r1
1000d14c:	5c84      	ldrb	r4, [r0, r2]
1000d14e:	4323      	orrs	r3, r4
1000d150:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d152:	2901      	cmp	r1, #1
1000d154:	d104      	bne.n	1000d160 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d156:	6802      	ldr	r2, [r0, #0]
1000d158:	7a11      	ldrb	r1, [r2, #8]
1000d15a:	2320      	movs	r3, #32
1000d15c:	430b      	orrs	r3, r1
1000d15e:	7213      	strb	r3, [r2, #8]
	}
}
1000d160:	bd10      	pop	{r4, pc}
1000d162:	46c0      	nop			; (mov r8, r8)

1000d164 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d164:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d166:	2201      	movs	r2, #1
1000d168:	408a      	lsls	r2, r1
1000d16a:	2421      	movs	r4, #33	; 0x21
1000d16c:	5d03      	ldrb	r3, [r0, r4]
1000d16e:	4393      	bics	r3, r2
1000d170:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d172:	2901      	cmp	r1, #1
1000d174:	d104      	bne.n	1000d180 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d176:	6802      	ldr	r2, [r0, #0]
1000d178:	7a13      	ldrb	r3, [r2, #8]
1000d17a:	311f      	adds	r1, #31
1000d17c:	438b      	bics	r3, r1
1000d17e:	7213      	strb	r3, [r2, #8]
	}

}
1000d180:	bd10      	pop	{r4, pc}
1000d182:	46c0      	nop			; (mov r8, r8)

1000d184 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000d184:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000d186:	4b16      	ldr	r3, [pc, #88]	; (1000d1e0 <gpio_port0_isr_handler+0x5c>)
1000d188:	681d      	ldr	r5, [r3, #0]
1000d18a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000d18c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000d18e:	07cb      	lsls	r3, r1, #31
1000d190:	d407      	bmi.n	1000d1a2 <gpio_port0_isr_handler+0x1e>
1000d192:	2301      	movs	r3, #1
1000d194:	2401      	movs	r4, #1
1000d196:	0018      	movs	r0, r3
1000d198:	0022      	movs	r2, r4
1000d19a:	409a      	lsls	r2, r3
1000d19c:	4211      	tst	r1, r2
1000d19e:	d014      	beq.n	1000d1ca <gpio_port0_isr_handler+0x46>
1000d1a0:	e001      	b.n	1000d1a6 <gpio_port0_isr_handler+0x22>
1000d1a2:	2201      	movs	r2, #1
1000d1a4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d1a6:	b292      	uxth	r2, r2
1000d1a8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d1aa:	2346      	movs	r3, #70	; 0x46
1000d1ac:	4a0c      	ldr	r2, [pc, #48]	; (1000d1e0 <gpio_port0_isr_handler+0x5c>)
1000d1ae:	5ad3      	ldrh	r3, [r2, r3]
1000d1b0:	4103      	asrs	r3, r0
1000d1b2:	07db      	lsls	r3, r3, #31
1000d1b4:	d50c      	bpl.n	1000d1d0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000d1b6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d1b8:	5ad3      	ldrh	r3, [r2, r3]
1000d1ba:	4103      	asrs	r3, r0
1000d1bc:	07db      	lsls	r3, r3, #31
1000d1be:	d507      	bpl.n	1000d1d0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000d1c0:	0080      	lsls	r0, r0, #2
1000d1c2:	1810      	adds	r0, r2, r0
1000d1c4:	6843      	ldr	r3, [r0, #4]
1000d1c6:	4798      	blx	r3
1000d1c8:	e002      	b.n	1000d1d0 <gpio_port0_isr_handler+0x4c>
1000d1ca:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d1cc:	2b10      	cmp	r3, #16
1000d1ce:	d1e2      	bne.n	1000d196 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d1d0:	2180      	movs	r1, #128	; 0x80
1000d1d2:	0409      	lsls	r1, r1, #16
1000d1d4:	23c0      	movs	r3, #192	; 0xc0
1000d1d6:	005b      	lsls	r3, r3, #1
1000d1d8:	4a02      	ldr	r2, [pc, #8]	; (1000d1e4 <gpio_port0_isr_handler+0x60>)
1000d1da:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000d1dc:	bd70      	pop	{r4, r5, r6, pc}
1000d1de:	46c0      	nop			; (mov r8, r8)
1000d1e0:	1001e428 	.word	0x1001e428
1000d1e4:	e000e100 	.word	0xe000e100

1000d1e8 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000d1ea:	4b18      	ldr	r3, [pc, #96]	; (1000d24c <gpio_port1_isr_handler+0x64>)
1000d1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000d1ee:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000d1f0:	b2b6      	uxth	r6, r6
1000d1f2:	0037      	movs	r7, r6
1000d1f4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000d1f6:	0b76      	lsrs	r6, r6, #13
1000d1f8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d1fa:	4d14      	ldr	r5, [pc, #80]	; (1000d24c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000d1fc:	2e00      	cmp	r6, #0
1000d1fe:	d001      	beq.n	1000d204 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000d200:	4b13      	ldr	r3, [pc, #76]	; (1000d250 <gpio_port1_isr_handler+0x68>)
1000d202:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000d204:	0022      	movs	r2, r4
1000d206:	2301      	movs	r3, #1
1000d208:	40a3      	lsls	r3, r4
1000d20a:	421f      	tst	r7, r3
1000d20c:	d013      	beq.n	1000d236 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d20e:	b29b      	uxth	r3, r3
1000d210:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000d212:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d214:	238e      	movs	r3, #142	; 0x8e
1000d216:	5aeb      	ldrh	r3, [r5, r3]
1000d218:	4123      	asrs	r3, r4
1000d21a:	07db      	lsls	r3, r3, #31
1000d21c:	d50b      	bpl.n	1000d236 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000d21e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d220:	490a      	ldr	r1, [pc, #40]	; (1000d24c <gpio_port1_isr_handler+0x64>)
1000d222:	5acb      	ldrh	r3, [r1, r3]
1000d224:	4123      	asrs	r3, r4
1000d226:	07db      	lsls	r3, r3, #31
1000d228:	d505      	bpl.n	1000d236 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000d22a:	3212      	adds	r2, #18
1000d22c:	0092      	lsls	r2, r2, #2
1000d22e:	188a      	adds	r2, r1, r2
1000d230:	6853      	ldr	r3, [r2, #4]
1000d232:	4798      	blx	r3
				break;
1000d234:	e002      	b.n	1000d23c <gpio_port1_isr_handler+0x54>
1000d236:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d238:	2c10      	cmp	r4, #16
1000d23a:	d1df      	bne.n	1000d1fc <gpio_port1_isr_handler+0x14>
1000d23c:	2180      	movs	r1, #128	; 0x80
1000d23e:	0449      	lsls	r1, r1, #17
1000d240:	23c0      	movs	r3, #192	; 0xc0
1000d242:	005b      	lsls	r3, r3, #1
1000d244:	4a03      	ldr	r2, [pc, #12]	; (1000d254 <gpio_port1_isr_handler+0x6c>)
1000d246:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000d248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d24a:	46c0      	nop			; (mov r8, r8)
1000d24c:	1001e428 	.word	0x1001e428
1000d250:	0001bc51 	.word	0x0001bc51
1000d254:	e000e100 	.word	0xe000e100

1000d258 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000d258:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000d25a:	2390      	movs	r3, #144	; 0x90
1000d25c:	4a1b      	ldr	r2, [pc, #108]	; (1000d2cc <gpio_port2_isr_handler+0x74>)
1000d25e:	58d2      	ldr	r2, [r2, r3]
1000d260:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d262:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d264:	04d9      	lsls	r1, r3, #19
1000d266:	d414      	bmi.n	1000d292 <gpio_port2_isr_handler+0x3a>
1000d268:	0499      	lsls	r1, r3, #18
1000d26a:	d40a      	bmi.n	1000d282 <gpio_port2_isr_handler+0x2a>
1000d26c:	0459      	lsls	r1, r3, #17
1000d26e:	d40c      	bmi.n	1000d28a <gpio_port2_isr_handler+0x32>
1000d270:	0bdb      	lsrs	r3, r3, #15
1000d272:	03db      	lsls	r3, r3, #15
1000d274:	b29b      	uxth	r3, r3
1000d276:	2b00      	cmp	r3, #0
1000d278:	d020      	beq.n	1000d2bc <gpio_port2_isr_handler+0x64>
1000d27a:	2380      	movs	r3, #128	; 0x80
1000d27c:	021b      	lsls	r3, r3, #8
1000d27e:	210f      	movs	r1, #15
1000d280:	e00a      	b.n	1000d298 <gpio_port2_isr_handler+0x40>
1000d282:	2380      	movs	r3, #128	; 0x80
1000d284:	019b      	lsls	r3, r3, #6
1000d286:	210d      	movs	r1, #13
1000d288:	e006      	b.n	1000d298 <gpio_port2_isr_handler+0x40>
1000d28a:	2380      	movs	r3, #128	; 0x80
1000d28c:	01db      	lsls	r3, r3, #7
1000d28e:	210e      	movs	r1, #14
1000d290:	e002      	b.n	1000d298 <gpio_port2_isr_handler+0x40>
1000d292:	2380      	movs	r3, #128	; 0x80
1000d294:	015b      	lsls	r3, r3, #5
1000d296:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d298:	b29b      	uxth	r3, r3
1000d29a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000d29c:	23d6      	movs	r3, #214	; 0xd6
1000d29e:	4a0b      	ldr	r2, [pc, #44]	; (1000d2cc <gpio_port2_isr_handler+0x74>)
1000d2a0:	5ad3      	ldrh	r3, [r2, r3]
1000d2a2:	410b      	asrs	r3, r1
1000d2a4:	07db      	lsls	r3, r3, #31
1000d2a6:	d509      	bpl.n	1000d2bc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000d2a8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000d2aa:	5ad3      	ldrh	r3, [r2, r3]
1000d2ac:	410b      	asrs	r3, r1
1000d2ae:	07db      	lsls	r3, r3, #31
1000d2b0:	d504      	bpl.n	1000d2bc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000d2b2:	3124      	adds	r1, #36	; 0x24
1000d2b4:	0089      	lsls	r1, r1, #2
1000d2b6:	1851      	adds	r1, r2, r1
1000d2b8:	684b      	ldr	r3, [r1, #4]
1000d2ba:	4798      	blx	r3
1000d2bc:	2180      	movs	r1, #128	; 0x80
1000d2be:	0489      	lsls	r1, r1, #18
1000d2c0:	23c0      	movs	r3, #192	; 0xc0
1000d2c2:	005b      	lsls	r3, r3, #1
1000d2c4:	4a02      	ldr	r2, [pc, #8]	; (1000d2d0 <gpio_port2_isr_handler+0x78>)
1000d2c6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000d2c8:	bd10      	pop	{r4, pc}
1000d2ca:	46c0      	nop			; (mov r8, r8)
1000d2cc:	1001e428 	.word	0x1001e428
1000d2d0:	e000e100 	.word	0xe000e100

1000d2d4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000d2d4:	2300      	movs	r3, #0
1000d2d6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000d2d8:	2201      	movs	r2, #1
1000d2da:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000d2dc:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000d2de:	70c3      	strb	r3, [r0, #3]
}
1000d2e0:	4770      	bx	lr
1000d2e2:	46c0      	nop			; (mov r8, r8)

1000d2e4 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000d2e4:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000d2e6:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000d2e8:	2801      	cmp	r0, #1
1000d2ea:	d800      	bhi.n	1000d2ee <gpio_pin_set_config+0xa>
1000d2ec:	e0c8      	b.n	1000d480 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000d2ee:	2807      	cmp	r0, #7
1000d2f0:	d809      	bhi.n	1000d306 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d2f2:	4d64      	ldr	r5, [pc, #400]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d2f4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000d2f6:	3b10      	subs	r3, #16
1000d2f8:	4003      	ands	r3, r0
1000d2fa:	009b      	lsls	r3, r3, #2
1000d2fc:	2407      	movs	r4, #7
1000d2fe:	409c      	lsls	r4, r3
1000d300:	43a2      	bics	r2, r4
1000d302:	646a      	str	r2, [r5, #68]	; 0x44
1000d304:	e029      	b.n	1000d35a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000d306:	280f      	cmp	r0, #15
1000d308:	d809      	bhi.n	1000d31e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d30a:	4d5e      	ldr	r5, [pc, #376]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d30c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000d30e:	2307      	movs	r3, #7
1000d310:	4003      	ands	r3, r0
1000d312:	009b      	lsls	r3, r3, #2
1000d314:	2407      	movs	r4, #7
1000d316:	409c      	lsls	r4, r3
1000d318:	43a2      	bics	r2, r4
1000d31a:	64aa      	str	r2, [r5, #72]	; 0x48
1000d31c:	e01d      	b.n	1000d35a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000d31e:	2817      	cmp	r0, #23
1000d320:	d809      	bhi.n	1000d336 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d322:	4d58      	ldr	r5, [pc, #352]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d324:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000d326:	2307      	movs	r3, #7
1000d328:	4003      	ands	r3, r0
1000d32a:	009b      	lsls	r3, r3, #2
1000d32c:	2407      	movs	r4, #7
1000d32e:	409c      	lsls	r4, r3
1000d330:	43a2      	bics	r2, r4
1000d332:	64ea      	str	r2, [r5, #76]	; 0x4c
1000d334:	e011      	b.n	1000d35a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000d336:	0003      	movs	r3, r0
1000d338:	3b2c      	subs	r3, #44	; 0x2c
1000d33a:	2b03      	cmp	r3, #3
1000d33c:	d80d      	bhi.n	1000d35a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000d33e:	4d52      	ldr	r5, [pc, #328]	; (1000d488 <gpio_pin_set_config+0x1a4>)
1000d340:	2482      	movs	r4, #130	; 0x82
1000d342:	00e4      	lsls	r4, r4, #3
1000d344:	5d2a      	ldrb	r2, [r5, r4]
1000d346:	0712      	lsls	r2, r2, #28
1000d348:	2601      	movs	r6, #1
1000d34a:	409e      	lsls	r6, r3
1000d34c:	0f12      	lsrs	r2, r2, #28
1000d34e:	5d2b      	ldrb	r3, [r5, r4]
1000d350:	43b2      	bics	r2, r6
1000d352:	260f      	movs	r6, #15
1000d354:	43b3      	bics	r3, r6
1000d356:	4313      	orrs	r3, r2
1000d358:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000d35a:	0003      	movs	r3, r0
1000d35c:	3b1d      	subs	r3, #29
1000d35e:	2b02      	cmp	r3, #2
1000d360:	d829      	bhi.n	1000d3b6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000d362:	784b      	ldrb	r3, [r1, #1]
1000d364:	2b01      	cmp	r3, #1
1000d366:	d108      	bne.n	1000d37a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d368:	4d47      	ldr	r5, [pc, #284]	; (1000d488 <gpio_pin_set_config+0x1a4>)
1000d36a:	7d2b      	ldrb	r3, [r5, #20]
1000d36c:	241f      	movs	r4, #31
1000d36e:	1a24      	subs	r4, r4, r0
1000d370:	2201      	movs	r2, #1
1000d372:	40a2      	lsls	r2, r4
1000d374:	4393      	bics	r3, r2
1000d376:	752b      	strb	r3, [r5, #20]
1000d378:	e008      	b.n	1000d38c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000d37a:	4c43      	ldr	r4, [pc, #268]	; (1000d488 <gpio_pin_set_config+0x1a4>)
1000d37c:	7d25      	ldrb	r5, [r4, #20]
1000d37e:	221f      	movs	r2, #31
1000d380:	1a12      	subs	r2, r2, r0
1000d382:	2301      	movs	r3, #1
1000d384:	4093      	lsls	r3, r2
1000d386:	432b      	orrs	r3, r5
1000d388:	b2db      	uxtb	r3, r3
1000d38a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000d38c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d38e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000d390:	2a00      	cmp	r2, #0
1000d392:	d075      	beq.n	1000d480 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000d394:	493c      	ldr	r1, [pc, #240]	; (1000d488 <gpio_pin_set_config+0x1a4>)
1000d396:	880c      	ldrh	r4, [r1, #0]
1000d398:	221f      	movs	r2, #31
1000d39a:	1a10      	subs	r0, r2, r0
1000d39c:	0080      	lsls	r0, r0, #2
1000d39e:	3301      	adds	r3, #1
1000d3a0:	4083      	lsls	r3, r0
1000d3a2:	4323      	orrs	r3, r4
1000d3a4:	b29b      	uxth	r3, r3
1000d3a6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000d3a8:	4a38      	ldr	r2, [pc, #224]	; (1000d48c <gpio_pin_set_config+0x1a8>)
1000d3aa:	7811      	ldrb	r1, [r2, #0]
1000d3ac:	2302      	movs	r3, #2
1000d3ae:	430b      	orrs	r3, r1
1000d3b0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d3b2:	2300      	movs	r3, #0
1000d3b4:	e064      	b.n	1000d480 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000d3b6:	780a      	ldrb	r2, [r1, #0]
1000d3b8:	2a00      	cmp	r2, #0
1000d3ba:	d140      	bne.n	1000d43e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000d3bc:	280f      	cmp	r0, #15
1000d3be:	d808      	bhi.n	1000d3d2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000d3c0:	2301      	movs	r3, #1
1000d3c2:	4083      	lsls	r3, r0
1000d3c4:	b29b      	uxth	r3, r3
1000d3c6:	4a32      	ldr	r2, [pc, #200]	; (1000d490 <gpio_pin_set_config+0x1ac>)
1000d3c8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d3ca:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000d3cc:	281f      	cmp	r0, #31
1000d3ce:	d857      	bhi.n	1000d480 <gpio_pin_set_config+0x19c>
1000d3d0:	e012      	b.n	1000d3f8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000d3d2:	281f      	cmp	r0, #31
1000d3d4:	d807      	bhi.n	1000d3e6 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d3d6:	220f      	movs	r2, #15
1000d3d8:	4002      	ands	r2, r0
1000d3da:	2301      	movs	r3, #1
1000d3dc:	4093      	lsls	r3, r2
1000d3de:	b29b      	uxth	r3, r3
1000d3e0:	4a2c      	ldr	r2, [pc, #176]	; (1000d494 <gpio_pin_set_config+0x1b0>)
1000d3e2:	8293      	strh	r3, [r2, #20]
1000d3e4:	e008      	b.n	1000d3f8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d3e6:	230f      	movs	r3, #15
1000d3e8:	4018      	ands	r0, r3
1000d3ea:	3b0e      	subs	r3, #14
1000d3ec:	4083      	lsls	r3, r0
1000d3ee:	b29b      	uxth	r3, r3
1000d3f0:	4a29      	ldr	r2, [pc, #164]	; (1000d498 <gpio_pin_set_config+0x1b4>)
1000d3f2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d3f4:	2300      	movs	r3, #0
1000d3f6:	e043      	b.n	1000d480 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000d3f8:	784b      	ldrb	r3, [r1, #1]
1000d3fa:	2b01      	cmp	r3, #1
1000d3fc:	d00c      	beq.n	1000d418 <gpio_pin_set_config+0x134>
1000d3fe:	2b00      	cmp	r3, #0
1000d400:	d002      	beq.n	1000d408 <gpio_pin_set_config+0x124>
1000d402:	2b02      	cmp	r3, #2
1000d404:	d010      	beq.n	1000d428 <gpio_pin_set_config+0x144>
1000d406:	e03a      	b.n	1000d47e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000d408:	491e      	ldr	r1, [pc, #120]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d40a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000d40c:	2301      	movs	r3, #1
1000d40e:	4083      	lsls	r3, r0
1000d410:	4313      	orrs	r3, r2
1000d412:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d414:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000d416:	e033      	b.n	1000d480 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d418:	491a      	ldr	r1, [pc, #104]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d41a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000d41c:	2201      	movs	r2, #1
1000d41e:	4082      	lsls	r2, r0
1000d420:	4393      	bics	r3, r2
1000d422:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d424:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000d426:	e02b      	b.n	1000d480 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000d428:	4b16      	ldr	r3, [pc, #88]	; (1000d484 <gpio_pin_set_config+0x1a0>)
1000d42a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000d42c:	2201      	movs	r2, #1
1000d42e:	4082      	lsls	r2, r0
1000d430:	4311      	orrs	r1, r2
1000d432:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d434:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000d436:	4391      	bics	r1, r2
1000d438:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d43a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000d43c:	e020      	b.n	1000d480 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d43e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000d440:	2a01      	cmp	r2, #1
1000d442:	d11d      	bne.n	1000d480 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000d444:	280f      	cmp	r0, #15
1000d446:	d806      	bhi.n	1000d456 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000d448:	3301      	adds	r3, #1
1000d44a:	4083      	lsls	r3, r0
1000d44c:	b29b      	uxth	r3, r3
1000d44e:	4a10      	ldr	r2, [pc, #64]	; (1000d490 <gpio_pin_set_config+0x1ac>)
1000d450:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d452:	2300      	movs	r3, #0
1000d454:	e014      	b.n	1000d480 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000d456:	281f      	cmp	r0, #31
1000d458:	d808      	bhi.n	1000d46c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d45a:	230f      	movs	r3, #15
1000d45c:	4018      	ands	r0, r3
1000d45e:	3b0e      	subs	r3, #14
1000d460:	4083      	lsls	r3, r0
1000d462:	b29b      	uxth	r3, r3
1000d464:	4a0b      	ldr	r2, [pc, #44]	; (1000d494 <gpio_pin_set_config+0x1b0>)
1000d466:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d468:	2300      	movs	r3, #0
1000d46a:	e009      	b.n	1000d480 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d46c:	230f      	movs	r3, #15
1000d46e:	4018      	ands	r0, r3
1000d470:	3b0e      	subs	r3, #14
1000d472:	4083      	lsls	r3, r0
1000d474:	b29b      	uxth	r3, r3
1000d476:	4a08      	ldr	r2, [pc, #32]	; (1000d498 <gpio_pin_set_config+0x1b4>)
1000d478:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d47a:	2300      	movs	r3, #0
1000d47c:	e000      	b.n	1000d480 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000d47e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000d480:	0018      	movs	r0, r3
1000d482:	bd70      	pop	{r4, r5, r6, pc}
1000d484:	4000b000 	.word	0x4000b000
1000d488:	4000f000 	.word	0x4000f000
1000d48c:	4000e000 	.word	0x4000e000
1000d490:	40010000 	.word	0x40010000
1000d494:	40011000 	.word	0x40011000
1000d498:	40013000 	.word	0x40013000

1000d49c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000d49c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000d49e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000d4a0:	23ff      	movs	r3, #255	; 0xff
1000d4a2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000d4a4:	2807      	cmp	r0, #7
1000d4a6:	d833      	bhi.n	1000d510 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d4a8:	4a4e      	ldr	r2, [pc, #312]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d4aa:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000d4ac:	3bf8      	subs	r3, #248	; 0xf8
1000d4ae:	4003      	ands	r3, r0
1000d4b0:	009b      	lsls	r3, r3, #2
1000d4b2:	2607      	movs	r6, #7
1000d4b4:	409e      	lsls	r6, r3
1000d4b6:	43b4      	bics	r4, r6
1000d4b8:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d4ba:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000d4bc:	000e      	movs	r6, r1
1000d4be:	409e      	lsls	r6, r3
1000d4c0:	0033      	movs	r3, r6
1000d4c2:	4323      	orrs	r3, r4
1000d4c4:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000d4c6:	2901      	cmp	r1, #1
1000d4c8:	d000      	beq.n	1000d4cc <gpio_pinmux_cofiguration+0x30>
1000d4ca:	e08a      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000d4cc:	2803      	cmp	r0, #3
1000d4ce:	d80f      	bhi.n	1000d4f0 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d4d0:	0011      	movs	r1, r2
1000d4d2:	22d0      	movs	r2, #208	; 0xd0
1000d4d4:	0052      	lsls	r2, r2, #1
1000d4d6:	588c      	ldr	r4, [r1, r2]
1000d4d8:	2303      	movs	r3, #3
1000d4da:	4018      	ands	r0, r3
1000d4dc:	00c0      	lsls	r0, r0, #3
1000d4de:	333c      	adds	r3, #60	; 0x3c
1000d4e0:	4083      	lsls	r3, r0
1000d4e2:	439c      	bics	r4, r3
1000d4e4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d4e6:	588b      	ldr	r3, [r1, r2]
1000d4e8:	4085      	lsls	r5, r0
1000d4ea:	431d      	orrs	r5, r3
1000d4ec:	508d      	str	r5, [r1, r2]
1000d4ee:	e078      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d4f0:	493c      	ldr	r1, [pc, #240]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d4f2:	22d2      	movs	r2, #210	; 0xd2
1000d4f4:	0052      	lsls	r2, r2, #1
1000d4f6:	588c      	ldr	r4, [r1, r2]
1000d4f8:	2303      	movs	r3, #3
1000d4fa:	4018      	ands	r0, r3
1000d4fc:	00c0      	lsls	r0, r0, #3
1000d4fe:	333c      	adds	r3, #60	; 0x3c
1000d500:	4083      	lsls	r3, r0
1000d502:	439c      	bics	r4, r3
1000d504:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d506:	588b      	ldr	r3, [r1, r2]
1000d508:	4085      	lsls	r5, r0
1000d50a:	431d      	orrs	r5, r3
1000d50c:	508d      	str	r5, [r1, r2]
1000d50e:	e068      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000d510:	280f      	cmp	r0, #15
1000d512:	d832      	bhi.n	1000d57a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d514:	4a33      	ldr	r2, [pc, #204]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d516:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000d518:	2307      	movs	r3, #7
1000d51a:	4003      	ands	r3, r0
1000d51c:	009b      	lsls	r3, r3, #2
1000d51e:	2607      	movs	r6, #7
1000d520:	409e      	lsls	r6, r3
1000d522:	43b4      	bics	r4, r6
1000d524:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d526:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000d528:	000e      	movs	r6, r1
1000d52a:	409e      	lsls	r6, r3
1000d52c:	0033      	movs	r3, r6
1000d52e:	4323      	orrs	r3, r4
1000d530:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000d532:	2901      	cmp	r1, #1
1000d534:	d155      	bne.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000d536:	280b      	cmp	r0, #11
1000d538:	d80f      	bhi.n	1000d55a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d53a:	0011      	movs	r1, r2
1000d53c:	22d4      	movs	r2, #212	; 0xd4
1000d53e:	0052      	lsls	r2, r2, #1
1000d540:	588c      	ldr	r4, [r1, r2]
1000d542:	2303      	movs	r3, #3
1000d544:	4018      	ands	r0, r3
1000d546:	00c0      	lsls	r0, r0, #3
1000d548:	333c      	adds	r3, #60	; 0x3c
1000d54a:	4083      	lsls	r3, r0
1000d54c:	439c      	bics	r4, r3
1000d54e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d550:	588b      	ldr	r3, [r1, r2]
1000d552:	4085      	lsls	r5, r0
1000d554:	431d      	orrs	r5, r3
1000d556:	508d      	str	r5, [r1, r2]
1000d558:	e043      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d55a:	4922      	ldr	r1, [pc, #136]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d55c:	22d6      	movs	r2, #214	; 0xd6
1000d55e:	0052      	lsls	r2, r2, #1
1000d560:	588c      	ldr	r4, [r1, r2]
1000d562:	2303      	movs	r3, #3
1000d564:	4018      	ands	r0, r3
1000d566:	00c0      	lsls	r0, r0, #3
1000d568:	333c      	adds	r3, #60	; 0x3c
1000d56a:	4083      	lsls	r3, r0
1000d56c:	439c      	bics	r4, r3
1000d56e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d570:	588b      	ldr	r3, [r1, r2]
1000d572:	4085      	lsls	r5, r0
1000d574:	431d      	orrs	r5, r3
1000d576:	508d      	str	r5, [r1, r2]
1000d578:	e033      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000d57a:	2817      	cmp	r0, #23
1000d57c:	d831      	bhi.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d57e:	4a19      	ldr	r2, [pc, #100]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d580:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000d582:	2307      	movs	r3, #7
1000d584:	4003      	ands	r3, r0
1000d586:	009b      	lsls	r3, r3, #2
1000d588:	2607      	movs	r6, #7
1000d58a:	409e      	lsls	r6, r3
1000d58c:	43b4      	bics	r4, r6
1000d58e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d590:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000d592:	000e      	movs	r6, r1
1000d594:	409e      	lsls	r6, r3
1000d596:	0033      	movs	r3, r6
1000d598:	4323      	orrs	r3, r4
1000d59a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000d59c:	2901      	cmp	r1, #1
1000d59e:	d120      	bne.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000d5a0:	2813      	cmp	r0, #19
1000d5a2:	d80f      	bhi.n	1000d5c4 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d5a4:	0011      	movs	r1, r2
1000d5a6:	22d8      	movs	r2, #216	; 0xd8
1000d5a8:	0052      	lsls	r2, r2, #1
1000d5aa:	588c      	ldr	r4, [r1, r2]
1000d5ac:	2303      	movs	r3, #3
1000d5ae:	4018      	ands	r0, r3
1000d5b0:	00c0      	lsls	r0, r0, #3
1000d5b2:	333c      	adds	r3, #60	; 0x3c
1000d5b4:	4083      	lsls	r3, r0
1000d5b6:	439c      	bics	r4, r3
1000d5b8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d5ba:	588b      	ldr	r3, [r1, r2]
1000d5bc:	4085      	lsls	r5, r0
1000d5be:	431d      	orrs	r5, r3
1000d5c0:	508d      	str	r5, [r1, r2]
1000d5c2:	e00e      	b.n	1000d5e2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d5c4:	4a07      	ldr	r2, [pc, #28]	; (1000d5e4 <gpio_pinmux_cofiguration+0x148>)
1000d5c6:	23da      	movs	r3, #218	; 0xda
1000d5c8:	005b      	lsls	r3, r3, #1
1000d5ca:	58d1      	ldr	r1, [r2, r3]
1000d5cc:	2403      	movs	r4, #3
1000d5ce:	4020      	ands	r0, r4
1000d5d0:	00c0      	lsls	r0, r0, #3
1000d5d2:	343c      	adds	r4, #60	; 0x3c
1000d5d4:	4084      	lsls	r4, r0
1000d5d6:	43a1      	bics	r1, r4
1000d5d8:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d5da:	58d1      	ldr	r1, [r2, r3]
1000d5dc:	4085      	lsls	r5, r0
1000d5de:	430d      	orrs	r5, r1
1000d5e0:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000d5e2:	bd70      	pop	{r4, r5, r6, pc}
1000d5e4:	4000b000 	.word	0x4000b000

1000d5e8 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000d5ea:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d5ec:	280f      	cmp	r0, #15
1000d5ee:	d904      	bls.n	1000d5fa <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000d5f0:	241f      	movs	r4, #31
1000d5f2:	4284      	cmp	r4, r0
1000d5f4:	415b      	adcs	r3, r3
1000d5f6:	3c1d      	subs	r4, #29
1000d5f8:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000d5fa:	2a01      	cmp	r2, #1
1000d5fc:	d016      	beq.n	1000d62c <gpio_register_callback+0x44>
1000d5fe:	2a00      	cmp	r2, #0
1000d600:	d004      	beq.n	1000d60c <gpio_register_callback+0x24>
1000d602:	2a02      	cmp	r2, #2
1000d604:	d022      	beq.n	1000d64c <gpio_register_callback+0x64>
1000d606:	2a03      	cmp	r2, #3
1000d608:	d030      	beq.n	1000d66c <gpio_register_callback+0x84>
1000d60a:	e03e      	b.n	1000d68a <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d60c:	4e29      	ldr	r6, [pc, #164]	; (1000d6b4 <gpio_register_callback+0xcc>)
1000d60e:	00dc      	lsls	r4, r3, #3
1000d610:	18e2      	adds	r2, r4, r3
1000d612:	00d2      	lsls	r2, r2, #3
1000d614:	5997      	ldr	r7, [r2, r6]
1000d616:	250f      	movs	r5, #15
1000d618:	4005      	ands	r5, r0
1000d61a:	2201      	movs	r2, #1
1000d61c:	40aa      	lsls	r2, r5
1000d61e:	b292      	uxth	r2, r2
1000d620:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000d622:	18e4      	adds	r4, r4, r3
1000d624:	00e4      	lsls	r4, r4, #3
1000d626:	59a4      	ldr	r4, [r4, r6]
1000d628:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000d62a:	e02e      	b.n	1000d68a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d62c:	4e21      	ldr	r6, [pc, #132]	; (1000d6b4 <gpio_register_callback+0xcc>)
1000d62e:	00dc      	lsls	r4, r3, #3
1000d630:	18e2      	adds	r2, r4, r3
1000d632:	00d2      	lsls	r2, r2, #3
1000d634:	5997      	ldr	r7, [r2, r6]
1000d636:	250f      	movs	r5, #15
1000d638:	4005      	ands	r5, r0
1000d63a:	2201      	movs	r2, #1
1000d63c:	40aa      	lsls	r2, r5
1000d63e:	b292      	uxth	r2, r2
1000d640:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d642:	18e4      	adds	r4, r4, r3
1000d644:	00e4      	lsls	r4, r4, #3
1000d646:	59a4      	ldr	r4, [r4, r6]
1000d648:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000d64a:	e01e      	b.n	1000d68a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d64c:	4e19      	ldr	r6, [pc, #100]	; (1000d6b4 <gpio_register_callback+0xcc>)
1000d64e:	00dc      	lsls	r4, r3, #3
1000d650:	18e2      	adds	r2, r4, r3
1000d652:	00d2      	lsls	r2, r2, #3
1000d654:	5997      	ldr	r7, [r2, r6]
1000d656:	250f      	movs	r5, #15
1000d658:	4005      	ands	r5, r0
1000d65a:	2201      	movs	r2, #1
1000d65c:	40aa      	lsls	r2, r5
1000d65e:	b292      	uxth	r2, r2
1000d660:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d662:	18e4      	adds	r4, r4, r3
1000d664:	00e4      	lsls	r4, r4, #3
1000d666:	59a4      	ldr	r4, [r4, r6]
1000d668:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000d66a:	e00e      	b.n	1000d68a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d66c:	4e11      	ldr	r6, [pc, #68]	; (1000d6b4 <gpio_register_callback+0xcc>)
1000d66e:	00dc      	lsls	r4, r3, #3
1000d670:	18e2      	adds	r2, r4, r3
1000d672:	00d2      	lsls	r2, r2, #3
1000d674:	5997      	ldr	r7, [r2, r6]
1000d676:	250f      	movs	r5, #15
1000d678:	4005      	ands	r5, r0
1000d67a:	2201      	movs	r2, #1
1000d67c:	40aa      	lsls	r2, r5
1000d67e:	b292      	uxth	r2, r2
1000d680:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000d682:	18e4      	adds	r4, r4, r3
1000d684:	00e4      	lsls	r4, r4, #3
1000d686:	59a4      	ldr	r4, [r4, r6]
1000d688:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d68a:	220f      	movs	r2, #15
1000d68c:	4010      	ands	r0, r2
1000d68e:	4c09      	ldr	r4, [pc, #36]	; (1000d6b4 <gpio_register_callback+0xcc>)
1000d690:	00dd      	lsls	r5, r3, #3
1000d692:	18ea      	adds	r2, r5, r3
1000d694:	0052      	lsls	r2, r2, #1
1000d696:	1812      	adds	r2, r2, r0
1000d698:	0092      	lsls	r2, r2, #2
1000d69a:	18a2      	adds	r2, r4, r2
1000d69c:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d69e:	18ea      	adds	r2, r5, r3
1000d6a0:	00d2      	lsls	r2, r2, #3
1000d6a2:	18a2      	adds	r2, r4, r2
1000d6a4:	3244      	adds	r2, #68	; 0x44
1000d6a6:	2101      	movs	r1, #1
1000d6a8:	4081      	lsls	r1, r0
1000d6aa:	8813      	ldrh	r3, [r2, #0]
1000d6ac:	430b      	orrs	r3, r1
1000d6ae:	8013      	strh	r3, [r2, #0]
}
1000d6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6b2:	46c0      	nop			; (mov r8, r8)
1000d6b4:	1001e428 	.word	0x1001e428

1000d6b8 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000d6b8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d6ba:	280f      	cmp	r0, #15
1000d6bc:	d805      	bhi.n	1000d6ca <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d6be:	2280      	movs	r2, #128	; 0x80
1000d6c0:	0412      	lsls	r2, r2, #16
1000d6c2:	4b12      	ldr	r3, [pc, #72]	; (1000d70c <gpio_enable_callback+0x54>)
1000d6c4:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000d6c6:	2200      	movs	r2, #0
1000d6c8:	e00c      	b.n	1000d6e4 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000d6ca:	281f      	cmp	r0, #31
1000d6cc:	d805      	bhi.n	1000d6da <gpio_enable_callback+0x22>
1000d6ce:	2280      	movs	r2, #128	; 0x80
1000d6d0:	0452      	lsls	r2, r2, #17
1000d6d2:	4b0e      	ldr	r3, [pc, #56]	; (1000d70c <gpio_enable_callback+0x54>)
1000d6d4:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000d6d6:	2201      	movs	r2, #1
1000d6d8:	e004      	b.n	1000d6e4 <gpio_enable_callback+0x2c>
1000d6da:	2280      	movs	r2, #128	; 0x80
1000d6dc:	0492      	lsls	r2, r2, #18
1000d6de:	4b0b      	ldr	r3, [pc, #44]	; (1000d70c <gpio_enable_callback+0x54>)
1000d6e0:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000d6e2:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d6e4:	230f      	movs	r3, #15
1000d6e6:	4018      	ands	r0, r3
1000d6e8:	2101      	movs	r1, #1
1000d6ea:	4081      	lsls	r1, r0
1000d6ec:	4c08      	ldr	r4, [pc, #32]	; (1000d710 <gpio_enable_callback+0x58>)
1000d6ee:	00d5      	lsls	r5, r2, #3
1000d6f0:	18ab      	adds	r3, r5, r2
1000d6f2:	00db      	lsls	r3, r3, #3
1000d6f4:	18e3      	adds	r3, r4, r3
1000d6f6:	3346      	adds	r3, #70	; 0x46
1000d6f8:	8818      	ldrh	r0, [r3, #0]
1000d6fa:	4308      	orrs	r0, r1
1000d6fc:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d6fe:	18aa      	adds	r2, r5, r2
1000d700:	00d2      	lsls	r2, r2, #3
1000d702:	5913      	ldr	r3, [r2, r4]
1000d704:	b289      	uxth	r1, r1
1000d706:	8419      	strh	r1, [r3, #32]
}
1000d708:	bd30      	pop	{r4, r5, pc}
1000d70a:	46c0      	nop			; (mov r8, r8)
1000d70c:	e000e100 	.word	0xe000e100
1000d710:	1001e428 	.word	0x1001e428

1000d714 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000d714:	b510      	push	{r4, lr}
1000d716:	4a11      	ldr	r2, [pc, #68]	; (1000d75c <gpio_init+0x48>)
1000d718:	0010      	movs	r0, r2
1000d71a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000d71c:	2100      	movs	r1, #0
1000d71e:	e007      	b.n	1000d730 <gpio_init+0x1c>
1000d720:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000d722:	4293      	cmp	r3, r2
1000d724:	d1fc      	bne.n	1000d720 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000d726:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000d728:	8011      	strh	r1, [r2, #0]
1000d72a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000d72c:	4282      	cmp	r2, r0
1000d72e:	d002      	beq.n	1000d736 <gpio_init+0x22>
1000d730:	0013      	movs	r3, r2
1000d732:	3b40      	subs	r3, #64	; 0x40
1000d734:	e7f4      	b.n	1000d720 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d736:	4b0a      	ldr	r3, [pc, #40]	; (1000d760 <gpio_init+0x4c>)
1000d738:	4a0a      	ldr	r2, [pc, #40]	; (1000d764 <gpio_init+0x50>)
1000d73a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000d73c:	4a0a      	ldr	r2, [pc, #40]	; (1000d768 <gpio_init+0x54>)
1000d73e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000d740:	490a      	ldr	r1, [pc, #40]	; (1000d76c <gpio_init+0x58>)
1000d742:	2290      	movs	r2, #144	; 0x90
1000d744:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d746:	490a      	ldr	r1, [pc, #40]	; (1000d770 <gpio_init+0x5c>)
1000d748:	2027      	movs	r0, #39	; 0x27
1000d74a:	4c0a      	ldr	r4, [pc, #40]	; (1000d774 <gpio_init+0x60>)
1000d74c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000d74e:	490a      	ldr	r1, [pc, #40]	; (1000d778 <gpio_init+0x64>)
1000d750:	2028      	movs	r0, #40	; 0x28
1000d752:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000d754:	4909      	ldr	r1, [pc, #36]	; (1000d77c <gpio_init+0x68>)
1000d756:	2029      	movs	r0, #41	; 0x29
1000d758:	47a0      	blx	r4
}
1000d75a:	bd10      	pop	{r4, pc}
1000d75c:	1001e46c 	.word	0x1001e46c
1000d760:	1001e428 	.word	0x1001e428
1000d764:	40010000 	.word	0x40010000
1000d768:	40011000 	.word	0x40011000
1000d76c:	40013000 	.word	0x40013000
1000d770:	1000d185 	.word	0x1000d185
1000d774:	1000e1d1 	.word	0x1000e1d1
1000d778:	1000d1e9 	.word	0x1000d1e9
1000d77c:	1000d259 	.word	0x1000d259

1000d780 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d780:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d782:	464f      	mov	r7, r9
1000d784:	4646      	mov	r6, r8
1000d786:	b4c0      	push	{r6, r7}
1000d788:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000d78a:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d78c:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000d78e:	2d00      	cmp	r5, #0
1000d790:	d02f      	beq.n	1000d7f2 <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000d792:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d794:	2428      	movs	r4, #40	; 0x28
1000d796:	5d13      	ldrb	r3, [r2, r4]
1000d798:	07db      	lsls	r3, r3, #31
1000d79a:	d4fc      	bmi.n	1000d796 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d79c:	2301      	movs	r3, #1
1000d79e:	2434      	movs	r4, #52	; 0x34
1000d7a0:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d7a2:	3c14      	subs	r4, #20
1000d7a4:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000d7a6:	880b      	ldrh	r3, [r1, #0]
1000d7a8:	005b      	lsls	r3, r3, #1
1000d7aa:	2402      	movs	r4, #2
1000d7ac:	34ff      	adds	r4, #255	; 0xff
1000d7ae:	4323      	orrs	r3, r4
1000d7b0:	b29b      	uxth	r3, r3
1000d7b2:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000d7b4:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d7b6:	2301      	movs	r3, #1
1000d7b8:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000d7ba:	7b13      	ldrb	r3, [r2, #12]
1000d7bc:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d7be:	4640      	mov	r0, r8
1000d7c0:	4218      	tst	r0, r3
1000d7c2:	d006      	beq.n	1000d7d2 <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000d7c4:	1c67      	adds	r7, r4, #1
1000d7c6:	7910      	ldrb	r0, [r2, #4]
1000d7c8:	4684      	mov	ip, r0
1000d7ca:	6848      	ldr	r0, [r1, #4]
1000d7cc:	4666      	mov	r6, ip
1000d7ce:	5506      	strb	r6, [r0, r4]
1000d7d0:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000d7d2:	42ac      	cmp	r4, r5
1000d7d4:	d3f1      	bcc.n	1000d7ba <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d7d6:	06db      	lsls	r3, r3, #27
1000d7d8:	d403      	bmi.n	1000d7e2 <_i2c_master_read_packet+0x62>
1000d7da:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d7dc:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d7de:	420b      	tst	r3, r1
1000d7e0:	d0fc      	beq.n	1000d7dc <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d7e2:	464b      	mov	r3, r9
1000d7e4:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000d7e6:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d7e8:	2900      	cmp	r1, #0
1000d7ea:	d102      	bne.n	1000d7f2 <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d7ec:	3320      	adds	r3, #32
1000d7ee:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000d7f0:	2300      	movs	r3, #0
}
1000d7f2:	0018      	movs	r0, r3
1000d7f4:	bc0c      	pop	{r2, r3}
1000d7f6:	4690      	mov	r8, r2
1000d7f8:	4699      	mov	r9, r3
1000d7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d7fc <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7fe:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000d800:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000d802:	884e      	ldrh	r6, [r1, #2]
1000d804:	2428      	movs	r4, #40	; 0x28
1000d806:	5d13      	ldrb	r3, [r2, r4]
1000d808:	07db      	lsls	r3, r3, #31
1000d80a:	d4fc      	bmi.n	1000d806 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d80c:	2301      	movs	r3, #1
1000d80e:	2434      	movs	r4, #52	; 0x34
1000d810:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d812:	3c14      	subs	r4, #20
1000d814:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d816:	880b      	ldrh	r3, [r1, #0]
1000d818:	005b      	lsls	r3, r3, #1
1000d81a:	34e0      	adds	r4, #224	; 0xe0
1000d81c:	4323      	orrs	r3, r4
1000d81e:	b29b      	uxth	r3, r3
1000d820:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000d822:	2400      	movs	r4, #0
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d824:	2501      	movs	r5, #1
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d826:	7a13      	ldrb	r3, [r2, #8]
1000d828:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d82a:	421d      	tst	r5, r3
1000d82c:	d004      	beq.n	1000d838 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000d82e:	1c67      	adds	r7, r4, #1
1000d830:	6848      	ldr	r0, [r1, #4]
1000d832:	5d04      	ldrb	r4, [r0, r4]
1000d834:	8014      	strh	r4, [r2, #0]
1000d836:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000d838:	42b4      	cmp	r4, r6
1000d83a:	d3f4      	bcc.n	1000d826 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d83c:	06db      	lsls	r3, r3, #27
1000d83e:	d403      	bmi.n	1000d848 <_i2c_master_write_packet+0x4c>
1000d840:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000d842:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d844:	420b      	tst	r3, r1
1000d846:	d0fc      	beq.n	1000d842 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000d848:	4663      	mov	r3, ip
1000d84a:	795b      	ldrb	r3, [r3, #5]
1000d84c:	2b00      	cmp	r3, #0
1000d84e:	d102      	bne.n	1000d856 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d850:	2100      	movs	r1, #0
1000d852:	3320      	adds	r3, #32
1000d854:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
1000d856:	2000      	movs	r0, #0
1000d858:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d85a:	46c0      	nop			; (mov r8, r8)

1000d85c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d85c:	2303      	movs	r3, #3
1000d85e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000d860:	330d      	adds	r3, #13
1000d862:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000d864:	3b08      	subs	r3, #8
1000d866:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000d868:	3301      	adds	r3, #1
1000d86a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d86c:	3b07      	subs	r3, #7
1000d86e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d870:	6103      	str	r3, [r0, #16]
}
1000d872:	4770      	bx	lr

1000d874 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000d874:	b570      	push	{r4, r5, r6, lr}
1000d876:	0004      	movs	r4, r0
1000d878:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d87a:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d87c:	2800      	cmp	r0, #0
1000d87e:	d026      	beq.n	1000d8ce <i2c_master_init+0x5a>
1000d880:	2a00      	cmp	r2, #0
1000d882:	d026      	beq.n	1000d8d2 <i2c_master_init+0x5e>
1000d884:	2228      	movs	r2, #40	; 0x28
1000d886:	5c8b      	ldrb	r3, [r1, r2]
1000d888:	07db      	lsls	r3, r3, #31
1000d88a:	d4fc      	bmi.n	1000d886 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d88c:	2300      	movs	r3, #0
1000d88e:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000d890:	6823      	ldr	r3, [r4, #0]
1000d892:	4a11      	ldr	r2, [pc, #68]	; (1000d8d8 <i2c_master_init+0x64>)
1000d894:	4293      	cmp	r3, r2
1000d896:	d103      	bne.n	1000d8a0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d898:	2003      	movs	r0, #3
1000d89a:	4b10      	ldr	r3, [pc, #64]	; (1000d8dc <i2c_master_init+0x68>)
1000d89c:	4798      	blx	r3
1000d89e:	e006      	b.n	1000d8ae <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
1000d8a0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000d8a2:	4a0f      	ldr	r2, [pc, #60]	; (1000d8e0 <i2c_master_init+0x6c>)
1000d8a4:	4293      	cmp	r3, r2
1000d8a6:	d115      	bne.n	1000d8d4 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d8a8:	3002      	adds	r0, #2
1000d8aa:	4b0c      	ldr	r3, [pc, #48]	; (1000d8dc <i2c_master_init+0x68>)
1000d8ac:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000d8ae:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d8b0:	8929      	ldrh	r1, [r5, #8]
1000d8b2:	7928      	ldrb	r0, [r5, #4]
1000d8b4:	4e0b      	ldr	r6, [pc, #44]	; (1000d8e4 <i2c_master_init+0x70>)
1000d8b6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d8b8:	8a29      	ldrh	r1, [r5, #16]
1000d8ba:	7b28      	ldrb	r0, [r5, #12]
1000d8bc:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d8be:	782b      	ldrb	r3, [r5, #0]
1000d8c0:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d8c2:	886b      	ldrh	r3, [r5, #2]
1000d8c4:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d8c6:	2301      	movs	r3, #1
1000d8c8:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000d8ca:	2000      	movs	r0, #0
1000d8cc:	e002      	b.n	1000d8d4 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d8ce:	2017      	movs	r0, #23
1000d8d0:	e000      	b.n	1000d8d4 <i2c_master_init+0x60>
1000d8d2:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000d8d4:	bd70      	pop	{r4, r5, r6, pc}
1000d8d6:	46c0      	nop			; (mov r8, r8)
1000d8d8:	40003000 	.word	0x40003000
1000d8dc:	1000dd69 	.word	0x1000dd69
1000d8e0:	40003400 	.word	0x40003400
1000d8e4:	1000d49d 	.word	0x1000d49d

1000d8e8 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d8e8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d8ea:	2800      	cmp	r0, #0
1000d8ec:	d008      	beq.n	1000d900 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000d8ee:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d8f0:	2900      	cmp	r1, #0
1000d8f2:	d006      	beq.n	1000d902 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d8f4:	2300      	movs	r3, #0
1000d8f6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000d8f8:	4b03      	ldr	r3, [pc, #12]	; (1000d908 <i2c_master_read_packet_wait+0x20>)
1000d8fa:	4798      	blx	r3
1000d8fc:	0003      	movs	r3, r0
1000d8fe:	e000      	b.n	1000d902 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d900:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000d902:	0018      	movs	r0, r3
1000d904:	bd10      	pop	{r4, pc}
1000d906:	46c0      	nop			; (mov r8, r8)
1000d908:	1000d781 	.word	0x1000d781

1000d90c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d90c:	b570      	push	{r4, r5, r6, lr}
1000d90e:	0004      	movs	r4, r0
1000d910:	000d      	movs	r5, r1
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d912:	2800      	cmp	r0, #0
1000d914:	d00c      	beq.n	1000d930 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
1000d916:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d918:	2900      	cmp	r1, #0
1000d91a:	d00a      	beq.n	1000d932 <i2c_master_write_packet_wait+0x26>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d91c:	2300      	movs	r3, #0
1000d91e:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000d920:	4804      	ldr	r0, [pc, #16]	; (1000d934 <i2c_master_write_packet_wait+0x28>)
1000d922:	4b05      	ldr	r3, [pc, #20]	; (1000d938 <i2c_master_write_packet_wait+0x2c>)
1000d924:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000d926:	0029      	movs	r1, r5
1000d928:	0020      	movs	r0, r4
1000d92a:	4b04      	ldr	r3, [pc, #16]	; (1000d93c <i2c_master_write_packet_wait+0x30>)
1000d92c:	4798      	blx	r3
1000d92e:	e000      	b.n	1000d932 <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d930:	2017      	movs	r0, #23

	module->no_stop = false;

    printf("!!");
	return _i2c_master_write_packet(module, packet);
}
1000d932:	bd70      	pop	{r4, r5, r6, pc}
1000d934:	1001b0d0 	.word	0x1001b0d0
1000d938:	100187a9 	.word	0x100187a9
1000d93c:	1000d7fd 	.word	0x1000d7fd

1000d940 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d940:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d942:	2800      	cmp	r0, #0
1000d944:	d008      	beq.n	1000d958 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
1000d946:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d948:	2900      	cmp	r1, #0
1000d94a:	d006      	beq.n	1000d95a <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d94c:	3b16      	subs	r3, #22
1000d94e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000d950:	4b03      	ldr	r3, [pc, #12]	; (1000d960 <i2c_master_write_packet_wait_no_stop+0x20>)
1000d952:	4798      	blx	r3
1000d954:	0003      	movs	r3, r0
1000d956:	e000      	b.n	1000d95a <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d958:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000d95a:	0018      	movs	r0, r3
1000d95c:	bd10      	pop	{r4, pc}
1000d95e:	46c0      	nop			; (mov r8, r8)
1000d960:	1000d7fd 	.word	0x1000d7fd

1000d964 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000d964:	2801      	cmp	r0, #1
1000d966:	d00d      	beq.n	1000d984 <system_clock_config+0x20>
1000d968:	2800      	cmp	r0, #0
1000d96a:	d002      	beq.n	1000d972 <system_clock_config+0xe>
1000d96c:	2802      	cmp	r0, #2
1000d96e:	d01c      	beq.n	1000d9aa <system_clock_config+0x46>
1000d970:	e02e      	b.n	1000d9d0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d972:	4a18      	ldr	r2, [pc, #96]	; (1000d9d4 <system_clock_config+0x70>)
1000d974:	6990      	ldr	r0, [r2, #24]
1000d976:	230c      	movs	r3, #12
1000d978:	4303      	orrs	r3, r0
1000d97a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000d97c:	4a16      	ldr	r2, [pc, #88]	; (1000d9d8 <system_clock_config+0x74>)
1000d97e:	4b17      	ldr	r3, [pc, #92]	; (1000d9dc <system_clock_config+0x78>)
1000d980:	601a      	str	r2, [r3, #0]
			break;
1000d982:	e01a      	b.n	1000d9ba <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d984:	4b13      	ldr	r3, [pc, #76]	; (1000d9d4 <system_clock_config+0x70>)
1000d986:	6998      	ldr	r0, [r3, #24]
1000d988:	2208      	movs	r2, #8
1000d98a:	4302      	orrs	r2, r0
1000d98c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d98e:	699a      	ldr	r2, [r3, #24]
1000d990:	2004      	movs	r0, #4
1000d992:	4382      	bics	r2, r0
1000d994:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d996:	4a12      	ldr	r2, [pc, #72]	; (1000d9e0 <system_clock_config+0x7c>)
1000d998:	6853      	ldr	r3, [r2, #4]
1000d99a:	2080      	movs	r0, #128	; 0x80
1000d99c:	0300      	lsls	r0, r0, #12
1000d99e:	4303      	orrs	r3, r0
1000d9a0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000d9a2:	4a10      	ldr	r2, [pc, #64]	; (1000d9e4 <system_clock_config+0x80>)
1000d9a4:	4b0d      	ldr	r3, [pc, #52]	; (1000d9dc <system_clock_config+0x78>)
1000d9a6:	601a      	str	r2, [r3, #0]
			break;
1000d9a8:	e007      	b.n	1000d9ba <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d9aa:	4a0a      	ldr	r2, [pc, #40]	; (1000d9d4 <system_clock_config+0x70>)
1000d9ac:	6993      	ldr	r3, [r2, #24]
1000d9ae:	200c      	movs	r0, #12
1000d9b0:	4383      	bics	r3, r0
1000d9b2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d9b4:	4a08      	ldr	r2, [pc, #32]	; (1000d9d8 <system_clock_config+0x74>)
1000d9b6:	4b09      	ldr	r3, [pc, #36]	; (1000d9dc <system_clock_config+0x78>)
1000d9b8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d9ba:	4b06      	ldr	r3, [pc, #24]	; (1000d9d4 <system_clock_config+0x70>)
1000d9bc:	699a      	ldr	r2, [r3, #24]
1000d9be:	2003      	movs	r0, #3
1000d9c0:	4382      	bics	r2, r0
1000d9c2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d9c4:	699a      	ldr	r2, [r3, #24]
1000d9c6:	4001      	ands	r1, r0
1000d9c8:	4311      	orrs	r1, r2
1000d9ca:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d9cc:	2000      	movs	r0, #0
1000d9ce:	e000      	b.n	1000d9d2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000d9d0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000d9d2:	4770      	bx	lr
1000d9d4:	4000b000 	.word	0x4000b000
1000d9d8:	018cba80 	.word	0x018cba80
1000d9dc:	1001e500 	.word	0x1001e500
1000d9e0:	4000f000 	.word	0x4000f000
1000d9e4:	001e8480 	.word	0x001e8480

1000d9e8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000d9e8:	4b01      	ldr	r3, [pc, #4]	; (1000d9f0 <system_clock_get_value+0x8>)
1000d9ea:	6818      	ldr	r0, [r3, #0]
}
1000d9ec:	4770      	bx	lr
1000d9ee:	46c0      	nop			; (mov r8, r8)
1000d9f0:	1001e500 	.word	0x1001e500

1000d9f4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000d9f4:	b500      	push	{lr}
	switch (peripheral) {
1000d9f6:	2835      	cmp	r0, #53	; 0x35
1000d9f8:	d900      	bls.n	1000d9fc <system_clock_peripheral_enable+0x8>
1000d9fa:	e1a2      	b.n	1000dd42 <system_clock_peripheral_enable+0x34e>
1000d9fc:	0080      	lsls	r0, r0, #2
1000d9fe:	4bd2      	ldr	r3, [pc, #840]	; (1000dd48 <system_clock_peripheral_enable+0x354>)
1000da00:	581b      	ldr	r3, [r3, r0]
1000da02:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da04:	4ad1      	ldr	r2, [pc, #836]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da06:	68d1      	ldr	r1, [r2, #12]
1000da08:	2302      	movs	r3, #2
1000da0a:	430b      	orrs	r3, r1
1000da0c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da0e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000da10:	e198      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da12:	4ace      	ldr	r2, [pc, #824]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da14:	68d1      	ldr	r1, [r2, #12]
1000da16:	2304      	movs	r3, #4
1000da18:	430b      	orrs	r3, r1
1000da1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000da1e:	e191      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da20:	4aca      	ldr	r2, [pc, #808]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da22:	68d1      	ldr	r1, [r2, #12]
1000da24:	2308      	movs	r3, #8
1000da26:	430b      	orrs	r3, r1
1000da28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000da2c:	e18a      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da2e:	4ac7      	ldr	r2, [pc, #796]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da30:	68d1      	ldr	r1, [r2, #12]
1000da32:	2310      	movs	r3, #16
1000da34:	430b      	orrs	r3, r1
1000da36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000da3a:	e183      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da3c:	4ac3      	ldr	r2, [pc, #780]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da3e:	68d1      	ldr	r1, [r2, #12]
1000da40:	2320      	movs	r3, #32
1000da42:	430b      	orrs	r3, r1
1000da44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000da48:	e17c      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da4a:	4ac0      	ldr	r2, [pc, #768]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da4c:	68d1      	ldr	r1, [r2, #12]
1000da4e:	2380      	movs	r3, #128	; 0x80
1000da50:	430b      	orrs	r3, r1
1000da52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000da56:	e175      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da58:	4abc      	ldr	r2, [pc, #752]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da5a:	68d3      	ldr	r3, [r2, #12]
1000da5c:	2180      	movs	r1, #128	; 0x80
1000da5e:	0049      	lsls	r1, r1, #1
1000da60:	430b      	orrs	r3, r1
1000da62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000da66:	e16d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da68:	4ab8      	ldr	r2, [pc, #736]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da6a:	68d3      	ldr	r3, [r2, #12]
1000da6c:	2180      	movs	r1, #128	; 0x80
1000da6e:	0109      	lsls	r1, r1, #4
1000da70:	430b      	orrs	r3, r1
1000da72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000da76:	e165      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da78:	4ab4      	ldr	r2, [pc, #720]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da7a:	68d3      	ldr	r3, [r2, #12]
1000da7c:	2180      	movs	r1, #128	; 0x80
1000da7e:	0149      	lsls	r1, r1, #5
1000da80:	430b      	orrs	r3, r1
1000da82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000da86:	e15d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da88:	4ab0      	ldr	r2, [pc, #704]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da8a:	68d3      	ldr	r3, [r2, #12]
1000da8c:	2180      	movs	r1, #128	; 0x80
1000da8e:	0189      	lsls	r1, r1, #6
1000da90:	430b      	orrs	r3, r1
1000da92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000da96:	e155      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000da98:	4aac      	ldr	r2, [pc, #688]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000da9a:	68d3      	ldr	r3, [r2, #12]
1000da9c:	2180      	movs	r1, #128	; 0x80
1000da9e:	01c9      	lsls	r1, r1, #7
1000daa0:	430b      	orrs	r3, r1
1000daa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000daa6:	e14d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000daa8:	4aa8      	ldr	r2, [pc, #672]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000daaa:	68d3      	ldr	r3, [r2, #12]
1000daac:	2180      	movs	r1, #128	; 0x80
1000daae:	0209      	lsls	r1, r1, #8
1000dab0:	430b      	orrs	r3, r1
1000dab2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000dab6:	e145      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dab8:	4aa4      	ldr	r2, [pc, #656]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000daba:	68d3      	ldr	r3, [r2, #12]
1000dabc:	2180      	movs	r1, #128	; 0x80
1000dabe:	0249      	lsls	r1, r1, #9
1000dac0:	430b      	orrs	r3, r1
1000dac2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000dac6:	e13d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dac8:	4aa0      	ldr	r2, [pc, #640]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000daca:	68d3      	ldr	r3, [r2, #12]
1000dacc:	2180      	movs	r1, #128	; 0x80
1000dace:	0289      	lsls	r1, r1, #10
1000dad0:	430b      	orrs	r3, r1
1000dad2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000dad6:	e135      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dad8:	4a9c      	ldr	r2, [pc, #624]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dada:	68d3      	ldr	r3, [r2, #12]
1000dadc:	2180      	movs	r1, #128	; 0x80
1000dade:	02c9      	lsls	r1, r1, #11
1000dae0:	430b      	orrs	r3, r1
1000dae2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000dae6:	e12d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dae8:	4a98      	ldr	r2, [pc, #608]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000daea:	68d3      	ldr	r3, [r2, #12]
1000daec:	2180      	movs	r1, #128	; 0x80
1000daee:	0309      	lsls	r1, r1, #12
1000daf0:	430b      	orrs	r3, r1
1000daf2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000daf6:	e125      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000daf8:	4a94      	ldr	r2, [pc, #592]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dafa:	68d3      	ldr	r3, [r2, #12]
1000dafc:	2180      	movs	r1, #128	; 0x80
1000dafe:	0349      	lsls	r1, r1, #13
1000db00:	430b      	orrs	r3, r1
1000db02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000db06:	e11d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db08:	4a90      	ldr	r2, [pc, #576]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db0a:	68d3      	ldr	r3, [r2, #12]
1000db0c:	2180      	movs	r1, #128	; 0x80
1000db0e:	0389      	lsls	r1, r1, #14
1000db10:	430b      	orrs	r3, r1
1000db12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000db16:	e115      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db18:	4a8c      	ldr	r2, [pc, #560]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db1a:	68d3      	ldr	r3, [r2, #12]
1000db1c:	2180      	movs	r1, #128	; 0x80
1000db1e:	03c9      	lsls	r1, r1, #15
1000db20:	430b      	orrs	r3, r1
1000db22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000db26:	e10d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db28:	4a88      	ldr	r2, [pc, #544]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db2a:	68d3      	ldr	r3, [r2, #12]
1000db2c:	2180      	movs	r1, #128	; 0x80
1000db2e:	0409      	lsls	r1, r1, #16
1000db30:	430b      	orrs	r3, r1
1000db32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000db36:	e105      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db38:	4a84      	ldr	r2, [pc, #528]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db3a:	68d3      	ldr	r3, [r2, #12]
1000db3c:	2180      	movs	r1, #128	; 0x80
1000db3e:	0449      	lsls	r1, r1, #17
1000db40:	430b      	orrs	r3, r1
1000db42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000db46:	e0fd      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db48:	4a80      	ldr	r2, [pc, #512]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db4a:	68d3      	ldr	r3, [r2, #12]
1000db4c:	2180      	movs	r1, #128	; 0x80
1000db4e:	0489      	lsls	r1, r1, #18
1000db50:	430b      	orrs	r3, r1
1000db52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000db56:	e0f5      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db58:	4a7c      	ldr	r2, [pc, #496]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db5a:	68d3      	ldr	r3, [r2, #12]
1000db5c:	2180      	movs	r1, #128	; 0x80
1000db5e:	04c9      	lsls	r1, r1, #19
1000db60:	430b      	orrs	r3, r1
1000db62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000db66:	e0ed      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db68:	4a78      	ldr	r2, [pc, #480]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db6a:	68d3      	ldr	r3, [r2, #12]
1000db6c:	2180      	movs	r1, #128	; 0x80
1000db6e:	0509      	lsls	r1, r1, #20
1000db70:	430b      	orrs	r3, r1
1000db72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000db76:	e0e5      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db78:	4a74      	ldr	r2, [pc, #464]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db7a:	68d3      	ldr	r3, [r2, #12]
1000db7c:	2180      	movs	r1, #128	; 0x80
1000db7e:	0549      	lsls	r1, r1, #21
1000db80:	430b      	orrs	r3, r1
1000db82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000db86:	e0dd      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db88:	4a70      	ldr	r2, [pc, #448]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db8a:	68d3      	ldr	r3, [r2, #12]
1000db8c:	2180      	movs	r1, #128	; 0x80
1000db8e:	0589      	lsls	r1, r1, #22
1000db90:	430b      	orrs	r3, r1
1000db92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000db96:	e0d5      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000db98:	4a6c      	ldr	r2, [pc, #432]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000db9a:	68d3      	ldr	r3, [r2, #12]
1000db9c:	2180      	movs	r1, #128	; 0x80
1000db9e:	05c9      	lsls	r1, r1, #23
1000dba0:	430b      	orrs	r3, r1
1000dba2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dba4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000dba6:	e0cd      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dba8:	4a68      	ldr	r2, [pc, #416]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbaa:	6911      	ldr	r1, [r2, #16]
1000dbac:	2301      	movs	r3, #1
1000dbae:	430b      	orrs	r3, r1
1000dbb0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000dbb4:	e0c6      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbb6:	4a65      	ldr	r2, [pc, #404]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbb8:	6911      	ldr	r1, [r2, #16]
1000dbba:	2302      	movs	r3, #2
1000dbbc:	430b      	orrs	r3, r1
1000dbbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000dbc2:	e0bf      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbc4:	4a61      	ldr	r2, [pc, #388]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbc6:	6911      	ldr	r1, [r2, #16]
1000dbc8:	2304      	movs	r3, #4
1000dbca:	430b      	orrs	r3, r1
1000dbcc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000dbd0:	e0b8      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbd2:	4a5e      	ldr	r2, [pc, #376]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbd4:	6911      	ldr	r1, [r2, #16]
1000dbd6:	2308      	movs	r3, #8
1000dbd8:	430b      	orrs	r3, r1
1000dbda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000dbde:	e0b1      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbe0:	4a5a      	ldr	r2, [pc, #360]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbe2:	6911      	ldr	r1, [r2, #16]
1000dbe4:	2310      	movs	r3, #16
1000dbe6:	430b      	orrs	r3, r1
1000dbe8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000dbec:	e0aa      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbee:	4a57      	ldr	r2, [pc, #348]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbf0:	6911      	ldr	r1, [r2, #16]
1000dbf2:	2320      	movs	r3, #32
1000dbf4:	430b      	orrs	r3, r1
1000dbf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000dbfa:	e0a3      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbfc:	4a53      	ldr	r2, [pc, #332]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dbfe:	6911      	ldr	r1, [r2, #16]
1000dc00:	2340      	movs	r3, #64	; 0x40
1000dc02:	430b      	orrs	r3, r1
1000dc04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000dc08:	e09c      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc0a:	4a50      	ldr	r2, [pc, #320]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc0c:	6911      	ldr	r1, [r2, #16]
1000dc0e:	2380      	movs	r3, #128	; 0x80
1000dc10:	430b      	orrs	r3, r1
1000dc12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000dc16:	e095      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc18:	4a4c      	ldr	r2, [pc, #304]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc1a:	6913      	ldr	r3, [r2, #16]
1000dc1c:	2180      	movs	r1, #128	; 0x80
1000dc1e:	0049      	lsls	r1, r1, #1
1000dc20:	430b      	orrs	r3, r1
1000dc22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000dc26:	e08d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc28:	4a48      	ldr	r2, [pc, #288]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc2a:	6913      	ldr	r3, [r2, #16]
1000dc2c:	2180      	movs	r1, #128	; 0x80
1000dc2e:	0089      	lsls	r1, r1, #2
1000dc30:	430b      	orrs	r3, r1
1000dc32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000dc36:	e085      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc38:	4a44      	ldr	r2, [pc, #272]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc3a:	6913      	ldr	r3, [r2, #16]
1000dc3c:	2180      	movs	r1, #128	; 0x80
1000dc3e:	00c9      	lsls	r1, r1, #3
1000dc40:	430b      	orrs	r3, r1
1000dc42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000dc46:	e07d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc48:	4a40      	ldr	r2, [pc, #256]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc4a:	6913      	ldr	r3, [r2, #16]
1000dc4c:	2180      	movs	r1, #128	; 0x80
1000dc4e:	0109      	lsls	r1, r1, #4
1000dc50:	430b      	orrs	r3, r1
1000dc52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000dc56:	e075      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc58:	4a3c      	ldr	r2, [pc, #240]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc5a:	6913      	ldr	r3, [r2, #16]
1000dc5c:	2180      	movs	r1, #128	; 0x80
1000dc5e:	0149      	lsls	r1, r1, #5
1000dc60:	430b      	orrs	r3, r1
1000dc62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000dc66:	e06d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc68:	4a38      	ldr	r2, [pc, #224]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc6a:	6913      	ldr	r3, [r2, #16]
1000dc6c:	2180      	movs	r1, #128	; 0x80
1000dc6e:	0189      	lsls	r1, r1, #6
1000dc70:	430b      	orrs	r3, r1
1000dc72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000dc76:	e065      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc78:	4a34      	ldr	r2, [pc, #208]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc7a:	6913      	ldr	r3, [r2, #16]
1000dc7c:	2180      	movs	r1, #128	; 0x80
1000dc7e:	01c9      	lsls	r1, r1, #7
1000dc80:	430b      	orrs	r3, r1
1000dc82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000dc86:	e05d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc88:	4a30      	ldr	r2, [pc, #192]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc8a:	6913      	ldr	r3, [r2, #16]
1000dc8c:	2180      	movs	r1, #128	; 0x80
1000dc8e:	0209      	lsls	r1, r1, #8
1000dc90:	430b      	orrs	r3, r1
1000dc92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000dc96:	e055      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dc98:	4a2c      	ldr	r2, [pc, #176]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dc9a:	6913      	ldr	r3, [r2, #16]
1000dc9c:	2180      	movs	r1, #128	; 0x80
1000dc9e:	0249      	lsls	r1, r1, #9
1000dca0:	430b      	orrs	r3, r1
1000dca2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dca4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000dca6:	e04d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dca8:	4a28      	ldr	r2, [pc, #160]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcaa:	6913      	ldr	r3, [r2, #16]
1000dcac:	2180      	movs	r1, #128	; 0x80
1000dcae:	0289      	lsls	r1, r1, #10
1000dcb0:	430b      	orrs	r3, r1
1000dcb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000dcb6:	e045      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dcb8:	4a24      	ldr	r2, [pc, #144]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcba:	6913      	ldr	r3, [r2, #16]
1000dcbc:	2180      	movs	r1, #128	; 0x80
1000dcbe:	02c9      	lsls	r1, r1, #11
1000dcc0:	430b      	orrs	r3, r1
1000dcc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000dcc6:	e03d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dcc8:	4a20      	ldr	r2, [pc, #128]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcca:	6913      	ldr	r3, [r2, #16]
1000dccc:	2180      	movs	r1, #128	; 0x80
1000dcce:	0309      	lsls	r1, r1, #12
1000dcd0:	430b      	orrs	r3, r1
1000dcd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000dcd6:	e035      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dcd8:	4a1c      	ldr	r2, [pc, #112]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcda:	6913      	ldr	r3, [r2, #16]
1000dcdc:	2180      	movs	r1, #128	; 0x80
1000dcde:	0349      	lsls	r1, r1, #13
1000dce0:	430b      	orrs	r3, r1
1000dce2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dce4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000dce6:	e02d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dce8:	4a18      	ldr	r2, [pc, #96]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcea:	6913      	ldr	r3, [r2, #16]
1000dcec:	2180      	movs	r1, #128	; 0x80
1000dcee:	0389      	lsls	r1, r1, #14
1000dcf0:	430b      	orrs	r3, r1
1000dcf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000dcf6:	e025      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dcf8:	4a14      	ldr	r2, [pc, #80]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dcfa:	6913      	ldr	r3, [r2, #16]
1000dcfc:	2180      	movs	r1, #128	; 0x80
1000dcfe:	03c9      	lsls	r1, r1, #15
1000dd00:	430b      	orrs	r3, r1
1000dd02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000dd06:	e01d      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dd08:	4a10      	ldr	r2, [pc, #64]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dd0a:	6913      	ldr	r3, [r2, #16]
1000dd0c:	2180      	movs	r1, #128	; 0x80
1000dd0e:	0409      	lsls	r1, r1, #16
1000dd10:	430b      	orrs	r3, r1
1000dd12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000dd16:	e015      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000dd18:	4a0c      	ldr	r2, [pc, #48]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dd1a:	7d11      	ldrb	r1, [r2, #20]
1000dd1c:	2301      	movs	r3, #1
1000dd1e:	430b      	orrs	r3, r1
1000dd20:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000dd24:	e00e      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000dd26:	4a09      	ldr	r2, [pc, #36]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dd28:	7d11      	ldrb	r1, [r2, #20]
1000dd2a:	2302      	movs	r3, #2
1000dd2c:	430b      	orrs	r3, r1
1000dd2e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000dd32:	e007      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000dd34:	4a05      	ldr	r2, [pc, #20]	; (1000dd4c <system_clock_peripheral_enable+0x358>)
1000dd36:	7d11      	ldrb	r1, [r2, #20]
1000dd38:	2304      	movs	r3, #4
1000dd3a:	430b      	orrs	r3, r1
1000dd3c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000dd40:	e000      	b.n	1000dd44 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000dd42:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000dd44:	bd00      	pop	{pc}
1000dd46:	46c0      	nop			; (mov r8, r8)
1000dd48:	1001b0d4 	.word	0x1001b0d4
1000dd4c:	4000b000 	.word	0x4000b000

1000dd50 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd50:	4b04      	ldr	r3, [pc, #16]	; (1000dd64 <system_global_reset+0x14>)
1000dd52:	6859      	ldr	r1, [r3, #4]
1000dd54:	2201      	movs	r2, #1
1000dd56:	4391      	bics	r1, r2
1000dd58:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd5a:	6859      	ldr	r1, [r3, #4]
1000dd5c:	430a      	orrs	r2, r1
1000dd5e:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000dd60:	4770      	bx	lr
1000dd62:	46c0      	nop			; (mov r8, r8)
1000dd64:	4000b000 	.word	0x4000b000

1000dd68 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000dd68:	b500      	push	{lr}
	switch (peripheral) {
1000dd6a:	2843      	cmp	r0, #67	; 0x43
1000dd6c:	d900      	bls.n	1000dd70 <system_peripheral_reset+0x8>
1000dd6e:	e223      	b.n	1000e1b8 <system_peripheral_reset+0x450>
1000dd70:	0080      	lsls	r0, r0, #2
1000dd72:	4be0      	ldr	r3, [pc, #896]	; (1000e0f4 <system_peripheral_reset+0x38c>)
1000dd74:	581b      	ldr	r3, [r3, r0]
1000dd76:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd78:	4bdf      	ldr	r3, [pc, #892]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dd7a:	6859      	ldr	r1, [r3, #4]
1000dd7c:	2202      	movs	r2, #2
1000dd7e:	4391      	bics	r1, r2
1000dd80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd82:	6859      	ldr	r1, [r3, #4]
1000dd84:	430a      	orrs	r2, r1
1000dd86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd88:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000dd8a:	e216      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd8c:	4bda      	ldr	r3, [pc, #872]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dd8e:	6859      	ldr	r1, [r3, #4]
1000dd90:	2204      	movs	r2, #4
1000dd92:	4391      	bics	r1, r2
1000dd94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd96:	6859      	ldr	r1, [r3, #4]
1000dd98:	430a      	orrs	r2, r1
1000dd9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000dd9e:	e20c      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dda0:	4bd5      	ldr	r3, [pc, #852]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dda2:	6859      	ldr	r1, [r3, #4]
1000dda4:	2208      	movs	r2, #8
1000dda6:	4391      	bics	r1, r2
1000dda8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddaa:	6859      	ldr	r1, [r3, #4]
1000ddac:	430a      	orrs	r2, r1
1000ddae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ddb2:	e202      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddb4:	4bd0      	ldr	r3, [pc, #832]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000ddb6:	6859      	ldr	r1, [r3, #4]
1000ddb8:	2210      	movs	r2, #16
1000ddba:	4391      	bics	r1, r2
1000ddbc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddbe:	6859      	ldr	r1, [r3, #4]
1000ddc0:	430a      	orrs	r2, r1
1000ddc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddc4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ddc6:	e1f8      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddc8:	4bcb      	ldr	r3, [pc, #812]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000ddca:	6859      	ldr	r1, [r3, #4]
1000ddcc:	2220      	movs	r2, #32
1000ddce:	4391      	bics	r1, r2
1000ddd0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddd2:	6859      	ldr	r1, [r3, #4]
1000ddd4:	430a      	orrs	r2, r1
1000ddd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddd8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ddda:	e1ee      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dddc:	4bc6      	ldr	r3, [pc, #792]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000ddde:	6859      	ldr	r1, [r3, #4]
1000dde0:	2240      	movs	r2, #64	; 0x40
1000dde2:	4391      	bics	r1, r2
1000dde4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dde6:	6859      	ldr	r1, [r3, #4]
1000dde8:	430a      	orrs	r2, r1
1000ddea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ddee:	e1e4      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddf0:	4bc1      	ldr	r3, [pc, #772]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000ddf2:	6859      	ldr	r1, [r3, #4]
1000ddf4:	2280      	movs	r2, #128	; 0x80
1000ddf6:	4391      	bics	r1, r2
1000ddf8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddfa:	6859      	ldr	r1, [r3, #4]
1000ddfc:	430a      	orrs	r2, r1
1000ddfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de00:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000de02:	e1da      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de04:	4bbc      	ldr	r3, [pc, #752]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de06:	6859      	ldr	r1, [r3, #4]
1000de08:	4abc      	ldr	r2, [pc, #752]	; (1000e0fc <system_peripheral_reset+0x394>)
1000de0a:	400a      	ands	r2, r1
1000de0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de0e:	685a      	ldr	r2, [r3, #4]
1000de10:	2180      	movs	r1, #128	; 0x80
1000de12:	0049      	lsls	r1, r1, #1
1000de14:	430a      	orrs	r2, r1
1000de16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de18:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000de1a:	e1ce      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de1c:	4bb6      	ldr	r3, [pc, #728]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de1e:	6859      	ldr	r1, [r3, #4]
1000de20:	4ab7      	ldr	r2, [pc, #732]	; (1000e100 <system_peripheral_reset+0x398>)
1000de22:	400a      	ands	r2, r1
1000de24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de26:	685a      	ldr	r2, [r3, #4]
1000de28:	2180      	movs	r1, #128	; 0x80
1000de2a:	0089      	lsls	r1, r1, #2
1000de2c:	430a      	orrs	r2, r1
1000de2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de30:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000de32:	e1c2      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de34:	4bb0      	ldr	r3, [pc, #704]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de36:	6859      	ldr	r1, [r3, #4]
1000de38:	4ab2      	ldr	r2, [pc, #712]	; (1000e104 <system_peripheral_reset+0x39c>)
1000de3a:	400a      	ands	r2, r1
1000de3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de3e:	685a      	ldr	r2, [r3, #4]
1000de40:	2180      	movs	r1, #128	; 0x80
1000de42:	00c9      	lsls	r1, r1, #3
1000de44:	430a      	orrs	r2, r1
1000de46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de48:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000de4a:	e1b6      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de4c:	4baa      	ldr	r3, [pc, #680]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de4e:	6859      	ldr	r1, [r3, #4]
1000de50:	4aad      	ldr	r2, [pc, #692]	; (1000e108 <system_peripheral_reset+0x3a0>)
1000de52:	400a      	ands	r2, r1
1000de54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de56:	685a      	ldr	r2, [r3, #4]
1000de58:	2180      	movs	r1, #128	; 0x80
1000de5a:	0109      	lsls	r1, r1, #4
1000de5c:	430a      	orrs	r2, r1
1000de5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de60:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000de62:	e1aa      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de64:	4ba4      	ldr	r3, [pc, #656]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de66:	6859      	ldr	r1, [r3, #4]
1000de68:	4aa8      	ldr	r2, [pc, #672]	; (1000e10c <system_peripheral_reset+0x3a4>)
1000de6a:	400a      	ands	r2, r1
1000de6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de6e:	685a      	ldr	r2, [r3, #4]
1000de70:	2180      	movs	r1, #128	; 0x80
1000de72:	0149      	lsls	r1, r1, #5
1000de74:	430a      	orrs	r2, r1
1000de76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de78:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000de7a:	e19e      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de7c:	4b9e      	ldr	r3, [pc, #632]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de7e:	6859      	ldr	r1, [r3, #4]
1000de80:	4aa3      	ldr	r2, [pc, #652]	; (1000e110 <system_peripheral_reset+0x3a8>)
1000de82:	400a      	ands	r2, r1
1000de84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de86:	685a      	ldr	r2, [r3, #4]
1000de88:	2180      	movs	r1, #128	; 0x80
1000de8a:	0189      	lsls	r1, r1, #6
1000de8c:	430a      	orrs	r2, r1
1000de8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de90:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000de92:	e192      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de94:	4b98      	ldr	r3, [pc, #608]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000de96:	6859      	ldr	r1, [r3, #4]
1000de98:	4a9e      	ldr	r2, [pc, #632]	; (1000e114 <system_peripheral_reset+0x3ac>)
1000de9a:	400a      	ands	r2, r1
1000de9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de9e:	685a      	ldr	r2, [r3, #4]
1000dea0:	2180      	movs	r1, #128	; 0x80
1000dea2:	01c9      	lsls	r1, r1, #7
1000dea4:	430a      	orrs	r2, r1
1000dea6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dea8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000deaa:	e186      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000deac:	4b92      	ldr	r3, [pc, #584]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000deae:	6859      	ldr	r1, [r3, #4]
1000deb0:	4a99      	ldr	r2, [pc, #612]	; (1000e118 <system_peripheral_reset+0x3b0>)
1000deb2:	400a      	ands	r2, r1
1000deb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000deb6:	685a      	ldr	r2, [r3, #4]
1000deb8:	2180      	movs	r1, #128	; 0x80
1000deba:	0209      	lsls	r1, r1, #8
1000debc:	430a      	orrs	r2, r1
1000debe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dec0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000dec2:	e17a      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dec4:	4b8c      	ldr	r3, [pc, #560]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dec6:	6859      	ldr	r1, [r3, #4]
1000dec8:	4a94      	ldr	r2, [pc, #592]	; (1000e11c <system_peripheral_reset+0x3b4>)
1000deca:	400a      	ands	r2, r1
1000decc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dece:	685a      	ldr	r2, [r3, #4]
1000ded0:	2180      	movs	r1, #128	; 0x80
1000ded2:	0249      	lsls	r1, r1, #9
1000ded4:	430a      	orrs	r2, r1
1000ded6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ded8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000deda:	e16e      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dedc:	4b86      	ldr	r3, [pc, #536]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dede:	6859      	ldr	r1, [r3, #4]
1000dee0:	4a8f      	ldr	r2, [pc, #572]	; (1000e120 <system_peripheral_reset+0x3b8>)
1000dee2:	400a      	ands	r2, r1
1000dee4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dee6:	685a      	ldr	r2, [r3, #4]
1000dee8:	2180      	movs	r1, #128	; 0x80
1000deea:	0289      	lsls	r1, r1, #10
1000deec:	430a      	orrs	r2, r1
1000deee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000def0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000def2:	e162      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000def4:	4b80      	ldr	r3, [pc, #512]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000def6:	6859      	ldr	r1, [r3, #4]
1000def8:	4a8a      	ldr	r2, [pc, #552]	; (1000e124 <system_peripheral_reset+0x3bc>)
1000defa:	400a      	ands	r2, r1
1000defc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000defe:	685a      	ldr	r2, [r3, #4]
1000df00:	2180      	movs	r1, #128	; 0x80
1000df02:	02c9      	lsls	r1, r1, #11
1000df04:	430a      	orrs	r2, r1
1000df06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df08:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000df0a:	e156      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df0c:	4b7a      	ldr	r3, [pc, #488]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df0e:	6859      	ldr	r1, [r3, #4]
1000df10:	4a85      	ldr	r2, [pc, #532]	; (1000e128 <system_peripheral_reset+0x3c0>)
1000df12:	400a      	ands	r2, r1
1000df14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df16:	685a      	ldr	r2, [r3, #4]
1000df18:	2180      	movs	r1, #128	; 0x80
1000df1a:	0309      	lsls	r1, r1, #12
1000df1c:	430a      	orrs	r2, r1
1000df1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df20:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000df22:	e14a      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df24:	4b74      	ldr	r3, [pc, #464]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df26:	6859      	ldr	r1, [r3, #4]
1000df28:	4a80      	ldr	r2, [pc, #512]	; (1000e12c <system_peripheral_reset+0x3c4>)
1000df2a:	400a      	ands	r2, r1
1000df2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df2e:	685a      	ldr	r2, [r3, #4]
1000df30:	2180      	movs	r1, #128	; 0x80
1000df32:	0349      	lsls	r1, r1, #13
1000df34:	430a      	orrs	r2, r1
1000df36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df38:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000df3a:	e13e      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df3c:	4b6e      	ldr	r3, [pc, #440]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df3e:	6859      	ldr	r1, [r3, #4]
1000df40:	4a7b      	ldr	r2, [pc, #492]	; (1000e130 <system_peripheral_reset+0x3c8>)
1000df42:	400a      	ands	r2, r1
1000df44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df46:	685a      	ldr	r2, [r3, #4]
1000df48:	2180      	movs	r1, #128	; 0x80
1000df4a:	0389      	lsls	r1, r1, #14
1000df4c:	430a      	orrs	r2, r1
1000df4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df50:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000df52:	e132      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df54:	4b68      	ldr	r3, [pc, #416]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df56:	6859      	ldr	r1, [r3, #4]
1000df58:	4a76      	ldr	r2, [pc, #472]	; (1000e134 <system_peripheral_reset+0x3cc>)
1000df5a:	400a      	ands	r2, r1
1000df5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df5e:	685a      	ldr	r2, [r3, #4]
1000df60:	2180      	movs	r1, #128	; 0x80
1000df62:	03c9      	lsls	r1, r1, #15
1000df64:	430a      	orrs	r2, r1
1000df66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df68:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000df6a:	e126      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df6c:	4b62      	ldr	r3, [pc, #392]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df6e:	6859      	ldr	r1, [r3, #4]
1000df70:	4a71      	ldr	r2, [pc, #452]	; (1000e138 <system_peripheral_reset+0x3d0>)
1000df72:	400a      	ands	r2, r1
1000df74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df76:	685a      	ldr	r2, [r3, #4]
1000df78:	2180      	movs	r1, #128	; 0x80
1000df7a:	0409      	lsls	r1, r1, #16
1000df7c:	430a      	orrs	r2, r1
1000df7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df80:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000df82:	e11a      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df84:	4b5c      	ldr	r3, [pc, #368]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df86:	6859      	ldr	r1, [r3, #4]
1000df88:	4a6c      	ldr	r2, [pc, #432]	; (1000e13c <system_peripheral_reset+0x3d4>)
1000df8a:	400a      	ands	r2, r1
1000df8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df8e:	685a      	ldr	r2, [r3, #4]
1000df90:	2180      	movs	r1, #128	; 0x80
1000df92:	0449      	lsls	r1, r1, #17
1000df94:	430a      	orrs	r2, r1
1000df96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df98:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000df9a:	e10e      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df9c:	4b56      	ldr	r3, [pc, #344]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000df9e:	6859      	ldr	r1, [r3, #4]
1000dfa0:	4a67      	ldr	r2, [pc, #412]	; (1000e140 <system_peripheral_reset+0x3d8>)
1000dfa2:	400a      	ands	r2, r1
1000dfa4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfa6:	685a      	ldr	r2, [r3, #4]
1000dfa8:	2180      	movs	r1, #128	; 0x80
1000dfaa:	0489      	lsls	r1, r1, #18
1000dfac:	430a      	orrs	r2, r1
1000dfae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfb0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000dfb2:	e102      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfb4:	4b50      	ldr	r3, [pc, #320]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dfb6:	6859      	ldr	r1, [r3, #4]
1000dfb8:	4a62      	ldr	r2, [pc, #392]	; (1000e144 <system_peripheral_reset+0x3dc>)
1000dfba:	400a      	ands	r2, r1
1000dfbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfbe:	685a      	ldr	r2, [r3, #4]
1000dfc0:	2180      	movs	r1, #128	; 0x80
1000dfc2:	04c9      	lsls	r1, r1, #19
1000dfc4:	430a      	orrs	r2, r1
1000dfc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfc8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000dfca:	e0f6      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfcc:	4b4a      	ldr	r3, [pc, #296]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dfce:	6859      	ldr	r1, [r3, #4]
1000dfd0:	4a5d      	ldr	r2, [pc, #372]	; (1000e148 <system_peripheral_reset+0x3e0>)
1000dfd2:	400a      	ands	r2, r1
1000dfd4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfd6:	685a      	ldr	r2, [r3, #4]
1000dfd8:	2180      	movs	r1, #128	; 0x80
1000dfda:	0509      	lsls	r1, r1, #20
1000dfdc:	430a      	orrs	r2, r1
1000dfde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfe0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000dfe2:	e0ea      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfe4:	4b44      	ldr	r3, [pc, #272]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dfe6:	6859      	ldr	r1, [r3, #4]
1000dfe8:	4a58      	ldr	r2, [pc, #352]	; (1000e14c <system_peripheral_reset+0x3e4>)
1000dfea:	400a      	ands	r2, r1
1000dfec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfee:	685a      	ldr	r2, [r3, #4]
1000dff0:	2180      	movs	r1, #128	; 0x80
1000dff2:	0549      	lsls	r1, r1, #21
1000dff4:	430a      	orrs	r2, r1
1000dff6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dff8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000dffa:	e0de      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dffc:	4b3e      	ldr	r3, [pc, #248]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000dffe:	6859      	ldr	r1, [r3, #4]
1000e000:	4a53      	ldr	r2, [pc, #332]	; (1000e150 <system_peripheral_reset+0x3e8>)
1000e002:	400a      	ands	r2, r1
1000e004:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e006:	685a      	ldr	r2, [r3, #4]
1000e008:	2180      	movs	r1, #128	; 0x80
1000e00a:	0589      	lsls	r1, r1, #22
1000e00c:	430a      	orrs	r2, r1
1000e00e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e010:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000e012:	e0d2      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e014:	4b38      	ldr	r3, [pc, #224]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e016:	6859      	ldr	r1, [r3, #4]
1000e018:	4a4e      	ldr	r2, [pc, #312]	; (1000e154 <system_peripheral_reset+0x3ec>)
1000e01a:	400a      	ands	r2, r1
1000e01c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e01e:	685a      	ldr	r2, [r3, #4]
1000e020:	2180      	movs	r1, #128	; 0x80
1000e022:	05c9      	lsls	r1, r1, #23
1000e024:	430a      	orrs	r2, r1
1000e026:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e028:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000e02a:	e0c6      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e02c:	4a32      	ldr	r2, [pc, #200]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e02e:	6853      	ldr	r3, [r2, #4]
1000e030:	005b      	lsls	r3, r3, #1
1000e032:	085b      	lsrs	r3, r3, #1
1000e034:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e036:	6853      	ldr	r3, [r2, #4]
1000e038:	2180      	movs	r1, #128	; 0x80
1000e03a:	0609      	lsls	r1, r1, #24
1000e03c:	430b      	orrs	r3, r1
1000e03e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e040:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000e042:	e0ba      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e044:	4b2c      	ldr	r3, [pc, #176]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e046:	891a      	ldrh	r2, [r3, #8]
1000e048:	2101      	movs	r1, #1
1000e04a:	438a      	bics	r2, r1
1000e04c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e04e:	8919      	ldrh	r1, [r3, #8]
1000e050:	2201      	movs	r2, #1
1000e052:	430a      	orrs	r2, r1
1000e054:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e056:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000e058:	e0af      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e05a:	4b27      	ldr	r3, [pc, #156]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e05c:	891a      	ldrh	r2, [r3, #8]
1000e05e:	2102      	movs	r1, #2
1000e060:	438a      	bics	r2, r1
1000e062:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e064:	8919      	ldrh	r1, [r3, #8]
1000e066:	2202      	movs	r2, #2
1000e068:	430a      	orrs	r2, r1
1000e06a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e06c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000e06e:	e0a4      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e070:	4b21      	ldr	r3, [pc, #132]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e072:	891a      	ldrh	r2, [r3, #8]
1000e074:	2104      	movs	r1, #4
1000e076:	438a      	bics	r2, r1
1000e078:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e07a:	8919      	ldrh	r1, [r3, #8]
1000e07c:	2204      	movs	r2, #4
1000e07e:	430a      	orrs	r2, r1
1000e080:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e082:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000e084:	e099      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e086:	4b1c      	ldr	r3, [pc, #112]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e088:	891a      	ldrh	r2, [r3, #8]
1000e08a:	2108      	movs	r1, #8
1000e08c:	438a      	bics	r2, r1
1000e08e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e090:	8919      	ldrh	r1, [r3, #8]
1000e092:	2208      	movs	r2, #8
1000e094:	430a      	orrs	r2, r1
1000e096:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e098:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000e09a:	e08e      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e09c:	4b16      	ldr	r3, [pc, #88]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e09e:	891a      	ldrh	r2, [r3, #8]
1000e0a0:	2110      	movs	r1, #16
1000e0a2:	438a      	bics	r2, r1
1000e0a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e0a6:	8919      	ldrh	r1, [r3, #8]
1000e0a8:	2210      	movs	r2, #16
1000e0aa:	430a      	orrs	r2, r1
1000e0ac:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0ae:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000e0b0:	e083      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e0b2:	4b11      	ldr	r3, [pc, #68]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e0b4:	891a      	ldrh	r2, [r3, #8]
1000e0b6:	2120      	movs	r1, #32
1000e0b8:	438a      	bics	r2, r1
1000e0ba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e0bc:	8919      	ldrh	r1, [r3, #8]
1000e0be:	2220      	movs	r2, #32
1000e0c0:	430a      	orrs	r2, r1
1000e0c2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0c4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000e0c6:	e078      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e0c8:	4b0b      	ldr	r3, [pc, #44]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e0ca:	891a      	ldrh	r2, [r3, #8]
1000e0cc:	2140      	movs	r1, #64	; 0x40
1000e0ce:	438a      	bics	r2, r1
1000e0d0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e0d2:	8919      	ldrh	r1, [r3, #8]
1000e0d4:	2240      	movs	r2, #64	; 0x40
1000e0d6:	430a      	orrs	r2, r1
1000e0d8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0da:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000e0dc:	e06d      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e0de:	4b06      	ldr	r3, [pc, #24]	; (1000e0f8 <system_peripheral_reset+0x390>)
1000e0e0:	891a      	ldrh	r2, [r3, #8]
1000e0e2:	2180      	movs	r1, #128	; 0x80
1000e0e4:	438a      	bics	r2, r1
1000e0e6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e0e8:	8919      	ldrh	r1, [r3, #8]
1000e0ea:	2280      	movs	r2, #128	; 0x80
1000e0ec:	430a      	orrs	r2, r1
1000e0ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000e0f2:	e062      	b.n	1000e1ba <system_peripheral_reset+0x452>
1000e0f4:	1001b1ac 	.word	0x1001b1ac
1000e0f8:	4000b000 	.word	0x4000b000
1000e0fc:	fffffeff 	.word	0xfffffeff
1000e100:	fffffdff 	.word	0xfffffdff
1000e104:	fffffbff 	.word	0xfffffbff
1000e108:	fffff7ff 	.word	0xfffff7ff
1000e10c:	ffffefff 	.word	0xffffefff
1000e110:	ffffdfff 	.word	0xffffdfff
1000e114:	ffffbfff 	.word	0xffffbfff
1000e118:	ffff7fff 	.word	0xffff7fff
1000e11c:	fffeffff 	.word	0xfffeffff
1000e120:	fffdffff 	.word	0xfffdffff
1000e124:	fffbffff 	.word	0xfffbffff
1000e128:	fff7ffff 	.word	0xfff7ffff
1000e12c:	ffefffff 	.word	0xffefffff
1000e130:	ffdfffff 	.word	0xffdfffff
1000e134:	ffbfffff 	.word	0xffbfffff
1000e138:	ff7fffff 	.word	0xff7fffff
1000e13c:	feffffff 	.word	0xfeffffff
1000e140:	fdffffff 	.word	0xfdffffff
1000e144:	fbffffff 	.word	0xfbffffff
1000e148:	f7ffffff 	.word	0xf7ffffff
1000e14c:	efffffff 	.word	0xefffffff
1000e150:	dfffffff 	.word	0xdfffffff
1000e154:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e158:	4b18      	ldr	r3, [pc, #96]	; (1000e1bc <system_peripheral_reset+0x454>)
1000e15a:	8919      	ldrh	r1, [r3, #8]
1000e15c:	4a18      	ldr	r2, [pc, #96]	; (1000e1c0 <system_peripheral_reset+0x458>)
1000e15e:	400a      	ands	r2, r1
1000e160:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e162:	8919      	ldrh	r1, [r3, #8]
1000e164:	2280      	movs	r2, #128	; 0x80
1000e166:	0052      	lsls	r2, r2, #1
1000e168:	430a      	orrs	r2, r1
1000e16a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e16c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000e16e:	e024      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e170:	4b12      	ldr	r3, [pc, #72]	; (1000e1bc <system_peripheral_reset+0x454>)
1000e172:	8919      	ldrh	r1, [r3, #8]
1000e174:	4a13      	ldr	r2, [pc, #76]	; (1000e1c4 <system_peripheral_reset+0x45c>)
1000e176:	400a      	ands	r2, r1
1000e178:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e17a:	8919      	ldrh	r1, [r3, #8]
1000e17c:	2280      	movs	r2, #128	; 0x80
1000e17e:	0092      	lsls	r2, r2, #2
1000e180:	430a      	orrs	r2, r1
1000e182:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e184:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000e186:	e018      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e188:	4b0c      	ldr	r3, [pc, #48]	; (1000e1bc <system_peripheral_reset+0x454>)
1000e18a:	8919      	ldrh	r1, [r3, #8]
1000e18c:	4a0e      	ldr	r2, [pc, #56]	; (1000e1c8 <system_peripheral_reset+0x460>)
1000e18e:	400a      	ands	r2, r1
1000e190:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e192:	8919      	ldrh	r1, [r3, #8]
1000e194:	2280      	movs	r2, #128	; 0x80
1000e196:	00d2      	lsls	r2, r2, #3
1000e198:	430a      	orrs	r2, r1
1000e19a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e19c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000e19e:	e00c      	b.n	1000e1ba <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e1a0:	4b06      	ldr	r3, [pc, #24]	; (1000e1bc <system_peripheral_reset+0x454>)
1000e1a2:	8919      	ldrh	r1, [r3, #8]
1000e1a4:	4a09      	ldr	r2, [pc, #36]	; (1000e1cc <system_peripheral_reset+0x464>)
1000e1a6:	400a      	ands	r2, r1
1000e1a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e1aa:	8919      	ldrh	r1, [r3, #8]
1000e1ac:	2280      	movs	r2, #128	; 0x80
1000e1ae:	0112      	lsls	r2, r2, #4
1000e1b0:	430a      	orrs	r2, r1
1000e1b2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e1b4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000e1b6:	e000      	b.n	1000e1ba <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000e1b8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000e1ba:	bd00      	pop	{pc}
1000e1bc:	4000b000 	.word	0x4000b000
1000e1c0:	fffffeff 	.word	0xfffffeff
1000e1c4:	fffffdff 	.word	0xfffffdff
1000e1c8:	fffffbff 	.word	0xfffffbff
1000e1cc:	fffff7ff 	.word	0xfffff7ff

1000e1d0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000e1d0:	2380      	movs	r3, #128	; 0x80
1000e1d2:	04db      	lsls	r3, r3, #19
1000e1d4:	469c      	mov	ip, r3
1000e1d6:	4460      	add	r0, ip
1000e1d8:	0080      	lsls	r0, r0, #2
1000e1da:	6001      	str	r1, [r0, #0]
}
1000e1dc:	4770      	bx	lr
1000e1de:	46c0      	nop			; (mov r8, r8)

1000e1e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000e1e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000e1e2:	4a06      	ldr	r2, [pc, #24]	; (1000e1fc <_sbrk+0x1c>)
1000e1e4:	6812      	ldr	r2, [r2, #0]
1000e1e6:	2a00      	cmp	r2, #0
1000e1e8:	d102      	bne.n	1000e1f0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000e1ea:	4905      	ldr	r1, [pc, #20]	; (1000e200 <_sbrk+0x20>)
1000e1ec:	4a03      	ldr	r2, [pc, #12]	; (1000e1fc <_sbrk+0x1c>)
1000e1ee:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000e1f0:	4a02      	ldr	r2, [pc, #8]	; (1000e1fc <_sbrk+0x1c>)
1000e1f2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000e1f4:	18c3      	adds	r3, r0, r3
1000e1f6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000e1f8:	4770      	bx	lr
1000e1fa:	46c0      	nop			; (mov r8, r8)
1000e1fc:	1001d474 	.word	0x1001d474
1000e200:	1001f628 	.word	0x1001f628

1000e204 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000e204:	2001      	movs	r0, #1
1000e206:	4240      	negs	r0, r0
1000e208:	4770      	bx	lr
1000e20a:	46c0      	nop			; (mov r8, r8)

1000e20c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000e20c:	2380      	movs	r3, #128	; 0x80
1000e20e:	019b      	lsls	r3, r3, #6
1000e210:	604b      	str	r3, [r1, #4]

	return 0;
}
1000e212:	2000      	movs	r0, #0
1000e214:	4770      	bx	lr
1000e216:	46c0      	nop			; (mov r8, r8)

1000e218 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000e218:	2001      	movs	r0, #1
1000e21a:	4770      	bx	lr

1000e21c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000e21c:	2000      	movs	r0, #0
1000e21e:	4770      	bx	lr

1000e220 <interrupt_cb>:
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000e220:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000e222:	2201      	movs	r2, #1
1000e224:	4b04      	ldr	r3, [pc, #16]	; (1000e238 <interrupt_cb+0x18>)
1000e226:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000e228:	2300      	movs	r3, #0
1000e22a:	2200      	movs	r2, #0
1000e22c:	2102      	movs	r1, #2
1000e22e:	201d      	movs	r0, #29
1000e230:	4c02      	ldr	r4, [pc, #8]	; (1000e23c <interrupt_cb+0x1c>)
1000e232:	47a0      	blx	r4
}
1000e234:	bd10      	pop	{r4, pc}
1000e236:	46c0      	nop			; (mov r8, r8)
1000e238:	1001d478 	.word	0x1001d478
1000e23c:	1000c7c9 	.word	0x1000c7c9

1000e240 <configure_i2c_master>:
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000e240:	b530      	push	{r4, r5, lr}
1000e242:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000e244:	2010      	movs	r0, #16
1000e246:	4c14      	ldr	r4, [pc, #80]	; (1000e298 <configure_i2c_master+0x58>)
1000e248:	47a0      	blx	r4
1000e24a:	4b14      	ldr	r3, [pc, #80]	; (1000e29c <configure_i2c_master+0x5c>)
1000e24c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000e24e:	2010      	movs	r0, #16
1000e250:	47a0      	blx	r4
1000e252:	4b13      	ldr	r3, [pc, #76]	; (1000e2a0 <configure_i2c_master+0x60>)
1000e254:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000e256:	ac01      	add	r4, sp, #4
1000e258:	0020      	movs	r0, r4
1000e25a:	4b12      	ldr	r3, [pc, #72]	; (1000e2a4 <configure_i2c_master+0x64>)
1000e25c:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000e25e:	2300      	movs	r3, #0
1000e260:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000e262:	3341      	adds	r3, #65	; 0x41
1000e264:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000e266:	3b39      	subs	r3, #57	; 0x39
1000e268:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000e26a:	3301      	adds	r3, #1
1000e26c:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000e26e:	3b07      	subs	r3, #7
1000e270:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000e272:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000e274:	4d0c      	ldr	r5, [pc, #48]	; (1000e2a8 <configure_i2c_master+0x68>)
1000e276:	4c0d      	ldr	r4, [pc, #52]	; (1000e2ac <configure_i2c_master+0x6c>)
1000e278:	aa01      	add	r2, sp, #4
1000e27a:	490d      	ldr	r1, [pc, #52]	; (1000e2b0 <configure_i2c_master+0x70>)
1000e27c:	0028      	movs	r0, r5
1000e27e:	47a0      	blx	r4
1000e280:	2800      	cmp	r0, #0
1000e282:	d1f9      	bne.n	1000e278 <configure_i2c_master+0x38>
	
	i2c_enable(i2c_master_instance.hw);
1000e284:	4b08      	ldr	r3, [pc, #32]	; (1000e2a8 <configure_i2c_master+0x68>)
1000e286:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000e288:	2128      	movs	r1, #40	; 0x28
1000e28a:	5c53      	ldrb	r3, [r2, r1]
1000e28c:	07db      	lsls	r3, r3, #31
1000e28e:	d4fc      	bmi.n	1000e28a <configure_i2c_master+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000e290:	2301      	movs	r3, #1
1000e292:	7513      	strb	r3, [r2, #20]
}
1000e294:	b007      	add	sp, #28
1000e296:	bd30      	pop	{r4, r5, pc}
1000e298:	100185f1 	.word	0x100185f1
1000e29c:	1001d888 	.word	0x1001d888
1000e2a0:	1001d878 	.word	0x1001d878
1000e2a4:	1000d85d 	.word	0x1000d85d
1000e2a8:	1001d880 	.word	0x1001d880
1000e2ac:	1000d875 	.word	0x1000d875
1000e2b0:	40003000 	.word	0x40003000

1000e2b4 <init_dualtimer>:

void init_dualtimer(void)
{
1000e2b4:	b510      	push	{r4, lr}
1000e2b6:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000e2b8:	ac01      	add	r4, sp, #4
1000e2ba:	0020      	movs	r0, r4
1000e2bc:	4b06      	ldr	r3, [pc, #24]	; (1000e2d8 <init_dualtimer+0x24>)
1000e2be:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000e2c0:	4b06      	ldr	r3, [pc, #24]	; (1000e2dc <init_dualtimer+0x28>)
1000e2c2:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000e2c4:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000e2c6:	2300      	movs	r3, #0
1000e2c8:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000e2ca:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000e2cc:	0020      	movs	r0, r4
1000e2ce:	4b04      	ldr	r3, [pc, #16]	; (1000e2e0 <init_dualtimer+0x2c>)
1000e2d0:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000e2d2:	b008      	add	sp, #32
1000e2d4:	bd10      	pop	{r4, pc}
1000e2d6:	46c0      	nop			; (mov r8, r8)
1000e2d8:	10008199 	.word	0x10008199
1000e2dc:	00006590 	.word	0x00006590
1000e2e0:	100081f5 	.word	0x100081f5

1000e2e4 <imu_poll_data>:
    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
    dmp_enable_feature(hal.dmp_features);
}

void imu_poll_data(void)
{
1000e2e4:	b570      	push	{r4, r5, r6, lr}
1000e2e6:	b08c      	sub	sp, #48	; 0x30
    long msg, data[9];
    int8_t accuracy;
    unsigned long timestamp;
    float float_data[3] = {0};
    inv_get_sensor_type_accel(data, &accuracy, (inv_time_t*)&timestamp);
1000e2e8:	aa01      	add	r2, sp, #4
1000e2ea:	210b      	movs	r1, #11
1000e2ec:	4469      	add	r1, sp
1000e2ee:	a803      	add	r0, sp, #12
1000e2f0:	4b09      	ldr	r3, [pc, #36]	; (1000e318 <imu_poll_data+0x34>)
1000e2f2:	4798      	blx	r3
    DBG_LOG("ACCEL: ");
1000e2f4:	4809      	ldr	r0, [pc, #36]	; (1000e31c <imu_poll_data+0x38>)
1000e2f6:	4b0a      	ldr	r3, [pc, #40]	; (1000e320 <imu_poll_data+0x3c>)
1000e2f8:	4798      	blx	r3
1000e2fa:	480a      	ldr	r0, [pc, #40]	; (1000e324 <imu_poll_data+0x40>)
1000e2fc:	4b0a      	ldr	r3, [pc, #40]	; (1000e328 <imu_poll_data+0x44>)
1000e2fe:	4798      	blx	r3
1000e300:	2400      	movs	r4, #0
    for(uint8_t i = 0; i < 9; i++) {
        DBG_LOG_CONT("%d, ", data[i]);
1000e302:	4d0a      	ldr	r5, [pc, #40]	; (1000e32c <imu_poll_data+0x48>)
1000e304:	4e08      	ldr	r6, [pc, #32]	; (1000e328 <imu_poll_data+0x44>)
1000e306:	ab03      	add	r3, sp, #12
1000e308:	58e1      	ldr	r1, [r4, r3]
1000e30a:	0028      	movs	r0, r5
1000e30c:	47b0      	blx	r6
1000e30e:	3404      	adds	r4, #4
    int8_t accuracy;
    unsigned long timestamp;
    float float_data[3] = {0};
    inv_get_sensor_type_accel(data, &accuracy, (inv_time_t*)&timestamp);
    DBG_LOG("ACCEL: ");
    for(uint8_t i = 0; i < 9; i++) {
1000e310:	2c24      	cmp	r4, #36	; 0x24
1000e312:	d1f8      	bne.n	1000e306 <imu_poll_data+0x22>
        DBG_LOG_CONT("%d, ", data[i]);
    }
}
1000e314:	b00c      	add	sp, #48	; 0x30
1000e316:	bd70      	pop	{r4, r5, r6, pc}
1000e318:	10009d81 	.word	0x10009d81
1000e31c:	10019a70 	.word	0x10019a70
1000e320:	100188c9 	.word	0x100188c9
1000e324:	1001b2bc 	.word	0x1001b2bc
1000e328:	100187a9 	.word	0x100187a9
1000e32c:	1001b2c4 	.word	0x1001b2c4

1000e330 <main>:

int main(void)
{
1000e330:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e332:	4647      	mov	r7, r8
1000e334:	b480      	push	{r7}
1000e336:	b086      	sub	sp, #24
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000e338:	4b5d      	ldr	r3, [pc, #372]	; (1000e4b0 <main+0x180>)
1000e33a:	4798      	blx	r3
    gpio_init();
1000e33c:	4b5d      	ldr	r3, [pc, #372]	; (1000e4b4 <main+0x184>)
1000e33e:	4798      	blx	r3
    acquire_sleep_lock();
1000e340:	4b5d      	ldr	r3, [pc, #372]	; (1000e4b8 <main+0x188>)
1000e342:	4798      	blx	r3
    serial_console_init();
1000e344:	4b5d      	ldr	r3, [pc, #372]	; (1000e4bc <main+0x18c>)
1000e346:	4798      	blx	r3
    ble_device_init(NULL);
1000e348:	2000      	movs	r0, #0
1000e34a:	4b5d      	ldr	r3, [pc, #372]	; (1000e4c0 <main+0x190>)
1000e34c:	4798      	blx	r3

    init_dualtimer();
1000e34e:	4b5d      	ldr	r3, [pc, #372]	; (1000e4c4 <main+0x194>)
1000e350:	4798      	blx	r3
    delay_init();
1000e352:	4b5d      	ldr	r3, [pc, #372]	; (1000e4c8 <main+0x198>)
1000e354:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000e356:	ac01      	add	r4, sp, #4
1000e358:	0020      	movs	r0, r4
1000e35a:	4b5c      	ldr	r3, [pc, #368]	; (1000e4cc <main+0x19c>)
1000e35c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000e35e:	2300      	movs	r3, #0
1000e360:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000e362:	3302      	adds	r3, #2
1000e364:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000e366:	3b01      	subs	r3, #1
1000e368:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000e36a:	0021      	movs	r1, r4
1000e36c:	201d      	movs	r0, #29
1000e36e:	4b58      	ldr	r3, [pc, #352]	; (1000e4d0 <main+0x1a0>)
1000e370:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000e372:	4b58      	ldr	r3, [pc, #352]	; (1000e4d4 <main+0x1a4>)
1000e374:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000e376:	4b58      	ldr	r3, [pc, #352]	; (1000e4d8 <main+0x1a8>)
1000e378:	6063      	str	r3, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000e37a:	231d      	movs	r3, #29
1000e37c:	8023      	strh	r3, [r4, #0]
    mpu_init(&int_param);
1000e37e:	0020      	movs	r0, r4
1000e380:	4b56      	ldr	r3, [pc, #344]	; (1000e4dc <main+0x1ac>)
1000e382:	4798      	blx	r3
    
    /* If you're not using an MPU9150 AND you're not using DMP features, this
     * function will place all slaves on the primary bus.
     * mpu_set_bypass(1);
     */
    result = inv_init_mpl();
1000e384:	4b56      	ldr	r3, [pc, #344]	; (1000e4e0 <main+0x1b0>)
1000e386:	4798      	blx	r3
    if(result) {
1000e388:	2800      	cmp	r0, #0
1000e38a:	d001      	beq.n	1000e390 <main+0x60>
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
1000e38c:	4b55      	ldr	r3, [pc, #340]	; (1000e4e4 <main+0x1b4>)
1000e38e:	4798      	blx	r3
    }
    
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
1000e390:	4b55      	ldr	r3, [pc, #340]	; (1000e4e8 <main+0x1b8>)
1000e392:	4798      	blx	r3
    inv_enable_9x_sensor_fusion();
1000e394:	4b55      	ldr	r3, [pc, #340]	; (1000e4ec <main+0x1bc>)
1000e396:	4798      	blx	r3
     */

    /* Update gyro biases when not in motion.
     * WARNING: These algorithms are mutually exclusive.
     */
    inv_enable_fast_nomot();
1000e398:	4b55      	ldr	r3, [pc, #340]	; (1000e4f0 <main+0x1c0>)
1000e39a:	4798      	blx	r3
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
1000e39c:	4b55      	ldr	r3, [pc, #340]	; (1000e4f4 <main+0x1c4>)
1000e39e:	4798      	blx	r3
     */

    /* Allows use of the MPL APIs in read_from_mpl. */
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
1000e3a0:	4b55      	ldr	r3, [pc, #340]	; (1000e4f8 <main+0x1c8>)
1000e3a2:	4798      	blx	r3
    if (result == INV_ERROR_NOT_AUTHORIZED) {
1000e3a4:	2832      	cmp	r0, #50	; 0x32
1000e3a6:	d104      	bne.n	1000e3b2 <main+0x82>
        while (1) {
            MPL_LOGE("Not authorized.\n");
            delay_ms(5000);
1000e3a8:	4d54      	ldr	r5, [pc, #336]	; (1000e4fc <main+0x1cc>)
1000e3aa:	4c55      	ldr	r4, [pc, #340]	; (1000e500 <main+0x1d0>)
1000e3ac:	0028      	movs	r0, r5
1000e3ae:	47a0      	blx	r4
1000e3b0:	e7fc      	b.n	1000e3ac <main+0x7c>
        }
    }
    if (result) {
1000e3b2:	2800      	cmp	r0, #0
1000e3b4:	d001      	beq.n	1000e3ba <main+0x8a>
        MPL_LOGE("Could not start the MPL.\n");
        system_global_reset();
1000e3b6:	4b4b      	ldr	r3, [pc, #300]	; (1000e4e4 <main+0x1b4>)
1000e3b8:	4798      	blx	r3
    }

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000e3ba:	2079      	movs	r0, #121	; 0x79
1000e3bc:	4b51      	ldr	r3, [pc, #324]	; (1000e504 <main+0x1d4>)
1000e3be:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000e3c0:	2078      	movs	r0, #120	; 0x78
1000e3c2:	4b51      	ldr	r3, [pc, #324]	; (1000e508 <main+0x1d8>)
1000e3c4:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000e3c6:	200a      	movs	r0, #10
1000e3c8:	4b50      	ldr	r3, [pc, #320]	; (1000e50c <main+0x1dc>)
1000e3ca:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000e3cc:	200a      	movs	r0, #10
1000e3ce:	4b50      	ldr	r3, [pc, #320]	; (1000e510 <main+0x1e0>)
1000e3d0:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000e3d2:	ac05      	add	r4, sp, #20
1000e3d4:	0020      	movs	r0, r4
1000e3d6:	4b4f      	ldr	r3, [pc, #316]	; (1000e514 <main+0x1e4>)
1000e3d8:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000e3da:	2312      	movs	r3, #18
1000e3dc:	446b      	add	r3, sp
1000e3de:	4698      	mov	r8, r3
1000e3e0:	0018      	movs	r0, r3
1000e3e2:	4b4d      	ldr	r3, [pc, #308]	; (1000e518 <main+0x1e8>)
1000e3e4:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000e3e6:	2717      	movs	r7, #23
1000e3e8:	446f      	add	r7, sp
1000e3ea:	0038      	movs	r0, r7
1000e3ec:	4b4b      	ldr	r3, [pc, #300]	; (1000e51c <main+0x1ec>)
1000e3ee:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000e3f0:	ae04      	add	r6, sp, #16
1000e3f2:	0030      	movs	r0, r6
1000e3f4:	4b4a      	ldr	r3, [pc, #296]	; (1000e520 <main+0x1f0>)
1000e3f6:	4798      	blx	r3

    /* Sync driver configuration with MPL. */
    /* Sample rate expected in microseconds. */
    inv_set_gyro_sample_rate(1000000L / gyro_rate);
1000e3f8:	8821      	ldrh	r1, [r4, #0]
1000e3fa:	4d4a      	ldr	r5, [pc, #296]	; (1000e524 <main+0x1f4>)
1000e3fc:	484a      	ldr	r0, [pc, #296]	; (1000e528 <main+0x1f8>)
1000e3fe:	47a8      	blx	r5
1000e400:	4b4a      	ldr	r3, [pc, #296]	; (1000e52c <main+0x1fc>)
1000e402:	4798      	blx	r3
    inv_set_accel_sample_rate(1000000L / gyro_rate);
1000e404:	8821      	ldrh	r1, [r4, #0]
1000e406:	4848      	ldr	r0, [pc, #288]	; (1000e528 <main+0x1f8>)
1000e408:	47a8      	blx	r5
1000e40a:	4b49      	ldr	r3, [pc, #292]	; (1000e530 <main+0x200>)
1000e40c:	4798      	blx	r3
    /* The compass rate is independent of the gyro and accel rates. As long as
     * inv_set_compass_sample_rate is called with the correct value, the 9-axis
     * fusion algorithm's compass correction gain will work properly.
     */
    inv_set_compass_sample_rate(COMPASS_READ_MS * 1000L);
1000e40e:	4849      	ldr	r0, [pc, #292]	; (1000e534 <main+0x204>)
1000e410:	4b49      	ldr	r3, [pc, #292]	; (1000e538 <main+0x208>)
1000e412:	4798      	blx	r3

    /* Set chip-to-body orientation matrix.
     * Set hardware units to dps/g's/degrees scaling factor.
     */
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
1000e414:	4d49      	ldr	r5, [pc, #292]	; (1000e53c <main+0x20c>)
1000e416:	0028      	movs	r0, r5
1000e418:	4c49      	ldr	r4, [pc, #292]	; (1000e540 <main+0x210>)
1000e41a:	47a0      	blx	r4
1000e41c:	4643      	mov	r3, r8
1000e41e:	8819      	ldrh	r1, [r3, #0]
1000e420:	03c9      	lsls	r1, r1, #15
1000e422:	4b48      	ldr	r3, [pc, #288]	; (1000e544 <main+0x214>)
1000e424:	4798      	blx	r3
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
1000e426:	0028      	movs	r0, r5
1000e428:	47a0      	blx	r4
1000e42a:	7839      	ldrb	r1, [r7, #0]
1000e42c:	03c9      	lsls	r1, r1, #15
1000e42e:	4b46      	ldr	r3, [pc, #280]	; (1000e548 <main+0x218>)
1000e430:	4798      	blx	r3
    inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);
1000e432:	4846      	ldr	r0, [pc, #280]	; (1000e54c <main+0x21c>)
1000e434:	47a0      	blx	r4
1000e436:	8831      	ldrh	r1, [r6, #0]
1000e438:	03c9      	lsls	r1, r1, #15
1000e43a:	4b45      	ldr	r3, [pc, #276]	; (1000e550 <main+0x220>)
1000e43c:	4798      	blx	r3
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
1000e43e:	2001      	movs	r0, #1
1000e440:	4b44      	ldr	r3, [pc, #272]	; (1000e554 <main+0x224>)
1000e442:	4798      	blx	r3
    timestamp = (uint32_t *)(load / 26000);
    DBG_LOG_DEV("Timestamp: %lld", timestamp);

    if (dmp_load_motion_driver_firmware()) {
1000e444:	4b44      	ldr	r3, [pc, #272]	; (1000e558 <main+0x228>)
1000e446:	4798      	blx	r3
1000e448:	2800      	cmp	r0, #0
1000e44a:	d001      	beq.n	1000e450 <main+0x120>
        MPL_LOGE("Could not download DMP.\n");
        system_global_reset();
1000e44c:	4b25      	ldr	r3, [pc, #148]	; (1000e4e4 <main+0x1b4>)
1000e44e:	4798      	blx	r3
    }
    dmp_set_orientation(
1000e450:	483a      	ldr	r0, [pc, #232]	; (1000e53c <main+0x20c>)
1000e452:	4b3b      	ldr	r3, [pc, #236]	; (1000e540 <main+0x210>)
1000e454:	4798      	blx	r3
1000e456:	4b41      	ldr	r3, [pc, #260]	; (1000e55c <main+0x22c>)
1000e458:	4798      	blx	r3
    inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
1000e45a:	2074      	movs	r0, #116	; 0x74
1000e45c:	30ff      	adds	r0, #255	; 0xff
1000e45e:	4b40      	ldr	r3, [pc, #256]	; (1000e560 <main+0x230>)
1000e460:	4798      	blx	r3
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1000e462:	200a      	movs	r0, #10
1000e464:	4b3f      	ldr	r3, [pc, #252]	; (1000e564 <main+0x234>)
1000e466:	4798      	blx	r3
    inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
1000e468:	4832      	ldr	r0, [pc, #200]	; (1000e534 <main+0x204>)
1000e46a:	4b3f      	ldr	r3, [pc, #252]	; (1000e568 <main+0x238>)
1000e46c:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000e46e:	2001      	movs	r0, #1
1000e470:	4b3e      	ldr	r3, [pc, #248]	; (1000e56c <main+0x23c>)
1000e472:	4798      	blx	r3
    hal.dmp_on = 1;

    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000e474:	2202      	movs	r2, #2
1000e476:	4918      	ldr	r1, [pc, #96]	; (1000e4d8 <main+0x1a8>)
1000e478:	201d      	movs	r0, #29
1000e47a:	4b3d      	ldr	r3, [pc, #244]	; (1000e570 <main+0x240>)
1000e47c:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_2);
1000e47e:	201d      	movs	r0, #29
1000e480:	4b3c      	ldr	r3, [pc, #240]	; (1000e574 <main+0x244>)
1000e482:	4798      	blx	r3
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000e484:	4f3c      	ldr	r7, [pc, #240]	; (1000e578 <main+0x248>)
        if(imu_interrupt) {
1000e486:	4d3d      	ldr	r5, [pc, #244]	; (1000e57c <main+0x24c>)
            DBG_LOG("IMU INTERRUPT!");
1000e488:	4e3d      	ldr	r6, [pc, #244]	; (1000e580 <main+0x250>)
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000e48a:	2401      	movs	r4, #1
1000e48c:	4264      	negs	r4, r4
1000e48e:	0020      	movs	r0, r4
1000e490:	47b8      	blx	r7
        if(imu_interrupt) {
1000e492:	782b      	ldrb	r3, [r5, #0]
1000e494:	2b00      	cmp	r3, #0
1000e496:	d0fa      	beq.n	1000e48e <main+0x15e>
            DBG_LOG("IMU INTERRUPT!");
1000e498:	0030      	movs	r0, r6
1000e49a:	4b3a      	ldr	r3, [pc, #232]	; (1000e584 <main+0x254>)
1000e49c:	4798      	blx	r3
1000e49e:	483a      	ldr	r0, [pc, #232]	; (1000e588 <main+0x258>)
1000e4a0:	4b3a      	ldr	r3, [pc, #232]	; (1000e58c <main+0x25c>)
1000e4a2:	4798      	blx	r3
            imu_poll_data();
1000e4a4:	4b3a      	ldr	r3, [pc, #232]	; (1000e590 <main+0x260>)
1000e4a6:	4798      	blx	r3
            imu_interrupt = false;
1000e4a8:	2200      	movs	r2, #0
1000e4aa:	4b34      	ldr	r3, [pc, #208]	; (1000e57c <main+0x24c>)
1000e4ac:	701a      	strb	r2, [r3, #0]
1000e4ae:	e7ec      	b.n	1000e48a <main+0x15a>
1000e4b0:	1000c519 	.word	0x1000c519
1000e4b4:	1000d715 	.word	0x1000d715
1000e4b8:	1000ca6d 	.word	0x1000ca6d
1000e4bc:	1000c20d 	.word	0x1000c20d
1000e4c0:	1000ba05 	.word	0x1000ba05
1000e4c4:	1000e2b5 	.word	0x1000e2b5
1000e4c8:	100080e9 	.word	0x100080e9
1000e4cc:	1000d2d5 	.word	0x1000d2d5
1000e4d0:	1000d2e5 	.word	0x1000d2e5
1000e4d4:	1000e241 	.word	0x1000e241
1000e4d8:	1000e221 	.word	0x1000e221
1000e4dc:	10008ffd 	.word	0x10008ffd
1000e4e0:	1000ac49 	.word	0x1000ac49
1000e4e4:	1000dd51 	.word	0x1000dd51
1000e4e8:	10014035 	.word	0x10014035
1000e4ec:	10012829 	.word	0x10012829
1000e4f0:	100120dd 	.word	0x100120dd
1000e4f4:	10012e1d 	.word	0x10012e1d
1000e4f8:	1000ac91 	.word	0x1000ac91
1000e4fc:	00001388 	.word	0x00001388
1000e500:	10008129 	.word	0x10008129
1000e504:	10008e15 	.word	0x10008e15
1000e508:	1000899d 	.word	0x1000899d
1000e50c:	10008d41 	.word	0x10008d41
1000e510:	10008925 	.word	0x10008925
1000e514:	10008909 	.word	0x10008909
1000e518:	1000868d 	.word	0x1000868d
1000e51c:	1000876d 	.word	0x1000876d
1000e520:	100095bd 	.word	0x100095bd
1000e524:	1001541d 	.word	0x1001541d
1000e528:	000f4240 	.word	0x000f4240
1000e52c:	10009e09 	.word	0x10009e09
1000e530:	10009e39 	.word	0x10009e39
1000e534:	000186a0 	.word	0x000186a0
1000e538:	10009e6d 	.word	0x10009e6d
1000e53c:	1001b95c 	.word	0x1001b95c
1000e540:	1000ab8d 	.word	0x1000ab8d
1000e544:	10009dfd 	.word	0x10009dfd
1000e548:	10009ed9 	.word	0x10009ed9
1000e54c:	1001b968 	.word	0x1001b968
1000e550:	10009ee5 	.word	0x10009ee5
1000e554:	100081bd 	.word	0x100081bd
1000e558:	100095cd 	.word	0x100095cd
1000e55c:	100095ed 	.word	0x100095ed
1000e560:	10009b6d 	.word	0x10009b6d
1000e564:	1000970d 	.word	0x1000970d
1000e568:	10009ea5 	.word	0x10009ea5
1000e56c:	10009519 	.word	0x10009519
1000e570:	1000d5e9 	.word	0x1000d5e9
1000e574:	1000d6b9 	.word	0x1000d6b9
1000e578:	1000c131 	.word	0x1000c131
1000e57c:	1001d478 	.word	0x1001d478
1000e580:	10019a70 	.word	0x10019a70
1000e584:	100188c9 	.word	0x100188c9
1000e588:	1001b2cc 	.word	0x1001b2cc
1000e58c:	100187a9 	.word	0x100187a9
1000e590:	1000e2e5 	.word	0x1000e2e5

1000e594 <internal_event_post>:
1000e594:	b570      	push	{r4, r5, r6, lr}
1000e596:	4d12      	ldr	r5, [pc, #72]	; (1000e5e0 <internal_event_post+0x4c>)
1000e598:	682c      	ldr	r4, [r5, #0]
1000e59a:	2c00      	cmp	r4, #0
1000e59c:	d014      	beq.n	1000e5c8 <internal_event_post+0x34>
1000e59e:	6826      	ldr	r6, [r4, #0]
1000e5a0:	60e2      	str	r2, [r4, #12]
1000e5a2:	602e      	str	r6, [r5, #0]
1000e5a4:	2500      	movs	r5, #0
1000e5a6:	4a0f      	ldr	r2, [pc, #60]	; (1000e5e4 <internal_event_post+0x50>)
1000e5a8:	8123      	strh	r3, [r4, #8]
1000e5aa:	6813      	ldr	r3, [r2, #0]
1000e5ac:	6025      	str	r5, [r4, #0]
1000e5ae:	80a0      	strh	r0, [r4, #4]
1000e5b0:	80e1      	strh	r1, [r4, #6]
1000e5b2:	42ab      	cmp	r3, r5
1000e5b4:	d101      	bne.n	1000e5ba <internal_event_post+0x26>
1000e5b6:	6014      	str	r4, [r2, #0]
1000e5b8:	e011      	b.n	1000e5de <internal_event_post+0x4a>
1000e5ba:	681a      	ldr	r2, [r3, #0]
1000e5bc:	2a00      	cmp	r2, #0
1000e5be:	d001      	beq.n	1000e5c4 <internal_event_post+0x30>
1000e5c0:	1c13      	adds	r3, r2, #0
1000e5c2:	e7fa      	b.n	1000e5ba <internal_event_post+0x26>
1000e5c4:	601c      	str	r4, [r3, #0]
1000e5c6:	e00a      	b.n	1000e5de <internal_event_post+0x4a>
1000e5c8:	b2c4      	uxtb	r4, r0
1000e5ca:	2c00      	cmp	r4, #0
1000e5cc:	d107      	bne.n	1000e5de <internal_event_post+0x4a>
1000e5ce:	4c06      	ldr	r4, [pc, #24]	; (1000e5e8 <internal_event_post+0x54>)
1000e5d0:	60e2      	str	r2, [r4, #12]
1000e5d2:	2201      	movs	r2, #1
1000e5d4:	8123      	strh	r3, [r4, #8]
1000e5d6:	4b05      	ldr	r3, [pc, #20]	; (1000e5ec <internal_event_post+0x58>)
1000e5d8:	80a0      	strh	r0, [r4, #4]
1000e5da:	80e1      	strh	r1, [r4, #6]
1000e5dc:	701a      	strb	r2, [r3, #0]
1000e5de:	bd70      	pop	{r4, r5, r6, pc}
1000e5e0:	1001d494 	.word	0x1001d494
1000e5e4:	1001d490 	.word	0x1001d490
1000e5e8:	1001d47c 	.word	0x1001d47c
1000e5ec:	1001d48c 	.word	0x1001d48c

1000e5f0 <internal_event_init>:
1000e5f0:	b510      	push	{r4, lr}
1000e5f2:	4b08      	ldr	r3, [pc, #32]	; (1000e614 <internal_event_init+0x24>)
1000e5f4:	0900      	lsrs	r0, r0, #4
1000e5f6:	0100      	lsls	r0, r0, #4
1000e5f8:	681a      	ldr	r2, [r3, #0]
1000e5fa:	1808      	adds	r0, r1, r0
1000e5fc:	4281      	cmp	r1, r0
1000e5fe:	d003      	beq.n	1000e608 <internal_event_init+0x18>
1000e600:	600a      	str	r2, [r1, #0]
1000e602:	1c0a      	adds	r2, r1, #0
1000e604:	3110      	adds	r1, #16
1000e606:	e7f9      	b.n	1000e5fc <internal_event_init+0xc>
1000e608:	601a      	str	r2, [r3, #0]
1000e60a:	2200      	movs	r2, #0
1000e60c:	4b02      	ldr	r3, [pc, #8]	; (1000e618 <internal_event_init+0x28>)
1000e60e:	601a      	str	r2, [r3, #0]
1000e610:	bd10      	pop	{r4, pc}
1000e612:	46c0      	nop			; (mov r8, r8)
1000e614:	1001d494 	.word	0x1001d494
1000e618:	1001d490 	.word	0x1001d490

1000e61c <special_events_handler>:
1000e61c:	b538      	push	{r3, r4, r5, lr}
1000e61e:	4c1b      	ldr	r4, [pc, #108]	; (1000e68c <special_events_handler+0x70>)
1000e620:	1c03      	adds	r3, r0, #0
1000e622:	8825      	ldrh	r5, [r4, #0]
1000e624:	1c08      	adds	r0, r1, #0
1000e626:	1c21      	adds	r1, r4, #0
1000e628:	429d      	cmp	r5, r3
1000e62a:	d107      	bne.n	1000e63c <special_events_handler+0x20>
1000e62c:	88a5      	ldrh	r5, [r4, #4]
1000e62e:	4285      	cmp	r5, r0
1000e630:	d104      	bne.n	1000e63c <special_events_handler+0x20>
1000e632:	2301      	movs	r3, #1
1000e634:	425b      	negs	r3, r3
1000e636:	8023      	strh	r3, [r4, #0]
1000e638:	60a2      	str	r2, [r4, #8]
1000e63a:	e009      	b.n	1000e650 <special_events_handler+0x34>
1000e63c:	884c      	ldrh	r4, [r1, #2]
1000e63e:	429c      	cmp	r4, r3
1000e640:	d10a      	bne.n	1000e658 <special_events_handler+0x3c>
1000e642:	888c      	ldrh	r4, [r1, #4]
1000e644:	4284      	cmp	r4, r0
1000e646:	d107      	bne.n	1000e658 <special_events_handler+0x3c>
1000e648:	2301      	movs	r3, #1
1000e64a:	425b      	negs	r3, r3
1000e64c:	804b      	strh	r3, [r1, #2]
1000e64e:	608a      	str	r2, [r1, #8]
1000e650:	4b0f      	ldr	r3, [pc, #60]	; (1000e690 <special_events_handler+0x74>)
1000e652:	4798      	blx	r3
1000e654:	2001      	movs	r0, #1
1000e656:	e017      	b.n	1000e688 <special_events_handler+0x6c>
1000e658:	490e      	ldr	r1, [pc, #56]	; (1000e694 <special_events_handler+0x78>)
1000e65a:	428b      	cmp	r3, r1
1000e65c:	d00e      	beq.n	1000e67c <special_events_handler+0x60>
1000e65e:	490e      	ldr	r1, [pc, #56]	; (1000e698 <special_events_handler+0x7c>)
1000e660:	428b      	cmp	r3, r1
1000e662:	d007      	beq.n	1000e674 <special_events_handler+0x58>
1000e664:	490d      	ldr	r1, [pc, #52]	; (1000e69c <special_events_handler+0x80>)
1000e666:	2000      	movs	r0, #0
1000e668:	428b      	cmp	r3, r1
1000e66a:	d10d      	bne.n	1000e688 <special_events_handler+0x6c>
1000e66c:	1c10      	adds	r0, r2, #0
1000e66e:	4b0c      	ldr	r3, [pc, #48]	; (1000e6a0 <special_events_handler+0x84>)
1000e670:	4798      	blx	r3
1000e672:	e7ef      	b.n	1000e654 <special_events_handler+0x38>
1000e674:	1c11      	adds	r1, r2, #0
1000e676:	4b0b      	ldr	r3, [pc, #44]	; (1000e6a4 <special_events_handler+0x88>)
1000e678:	2200      	movs	r2, #0
1000e67a:	e002      	b.n	1000e682 <special_events_handler+0x66>
1000e67c:	1c11      	adds	r1, r2, #0
1000e67e:	2200      	movs	r2, #0
1000e680:	4b09      	ldr	r3, [pc, #36]	; (1000e6a8 <special_events_handler+0x8c>)
1000e682:	4798      	blx	r3
1000e684:	4243      	negs	r3, r0
1000e686:	4158      	adcs	r0, r3
1000e688:	bd38      	pop	{r3, r4, r5, pc}
1000e68a:	46c0      	nop			; (mov r8, r8)
1000e68c:	1001e504 	.word	0x1001e504
1000e690:	1000f821 	.word	0x1000f821
1000e694:	00000e13 	.word	0x00000e13
1000e698:	00000e15 	.word	0x00000e15
1000e69c:	00000e01 	.word	0x00000e01
1000e6a0:	1000fb91 	.word	0x1000fb91
1000e6a4:	1000fd51 	.word	0x1000fd51
1000e6a8:	1000fe29 	.word	0x1000fe29

1000e6ac <at_ble_event_get>:
1000e6ac:	2300      	movs	r3, #0
1000e6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6b0:	b087      	sub	sp, #28
1000e6b2:	9204      	str	r2, [sp, #16]
1000e6b4:	7003      	strb	r3, [r0, #0]
1000e6b6:	9b04      	ldr	r3, [sp, #16]
1000e6b8:	9003      	str	r0, [sp, #12]
1000e6ba:	3b01      	subs	r3, #1
1000e6bc:	1c0d      	adds	r5, r1, #0
1000e6be:	9305      	str	r3, [sp, #20]
1000e6c0:	3303      	adds	r3, #3
1000e6c2:	d802      	bhi.n	1000e6ca <at_ble_event_get+0x1e>
1000e6c4:	9804      	ldr	r0, [sp, #16]
1000e6c6:	4bae      	ldr	r3, [pc, #696]	; (1000e980 <at_ble_event_get+0x2d4>)
1000e6c8:	4798      	blx	r3
1000e6ca:	9b05      	ldr	r3, [sp, #20]
1000e6cc:	4cad      	ldr	r4, [pc, #692]	; (1000e984 <at_ble_event_get+0x2d8>)
1000e6ce:	3303      	adds	r3, #3
1000e6d0:	d902      	bls.n	1000e6d8 <at_ble_event_get+0x2c>
1000e6d2:	2300      	movs	r3, #0
1000e6d4:	9302      	str	r3, [sp, #8]
1000e6d6:	e015      	b.n	1000e704 <at_ble_event_get+0x58>
1000e6d8:	2300      	movs	r3, #0
1000e6da:	9302      	str	r3, [sp, #8]
1000e6dc:	6823      	ldr	r3, [r4, #0]
1000e6de:	2b00      	cmp	r3, #0
1000e6e0:	d113      	bne.n	1000e70a <at_ble_event_get+0x5e>
1000e6e2:	9b02      	ldr	r3, [sp, #8]
1000e6e4:	2bd0      	cmp	r3, #208	; 0xd0
1000e6e6:	d100      	bne.n	1000e6ea <at_ble_event_get+0x3e>
1000e6e8:	e2da      	b.n	1000eca0 <at_ble_event_get+0x5f4>
1000e6ea:	9804      	ldr	r0, [sp, #16]
1000e6ec:	4ba6      	ldr	r3, [pc, #664]	; (1000e988 <at_ble_event_get+0x2dc>)
1000e6ee:	4798      	blx	r3
1000e6f0:	9002      	str	r0, [sp, #8]
1000e6f2:	2802      	cmp	r0, #2
1000e6f4:	d1f2      	bne.n	1000e6dc <at_ble_event_get+0x30>
1000e6f6:	e03f      	b.n	1000e778 <at_ble_event_get+0xcc>
1000e6f8:	9804      	ldr	r0, [sp, #16]
1000e6fa:	4ba3      	ldr	r3, [pc, #652]	; (1000e988 <at_ble_event_get+0x2dc>)
1000e6fc:	4798      	blx	r3
1000e6fe:	9002      	str	r0, [sp, #8]
1000e700:	2802      	cmp	r0, #2
1000e702:	d039      	beq.n	1000e778 <at_ble_event_get+0xcc>
1000e704:	6823      	ldr	r3, [r4, #0]
1000e706:	2b00      	cmp	r3, #0
1000e708:	d0f6      	beq.n	1000e6f8 <at_ble_event_get+0x4c>
1000e70a:	9b02      	ldr	r3, [sp, #8]
1000e70c:	2bd0      	cmp	r3, #208	; 0xd0
1000e70e:	d100      	bne.n	1000e712 <at_ble_event_get+0x66>
1000e710:	e2c6      	b.n	1000eca0 <at_ble_event_get+0x5f4>
1000e712:	9b02      	ldr	r3, [sp, #8]
1000e714:	3b03      	subs	r3, #3
1000e716:	1e5a      	subs	r2, r3, #1
1000e718:	4193      	sbcs	r3, r2
1000e71a:	9a02      	ldr	r2, [sp, #8]
1000e71c:	425b      	negs	r3, r3
1000e71e:	401a      	ands	r2, r3
1000e720:	6823      	ldr	r3, [r4, #0]
1000e722:	9202      	str	r2, [sp, #8]
1000e724:	2b00      	cmp	r3, #0
1000e726:	d100      	bne.n	1000e72a <at_ble_event_get+0x7e>
1000e728:	e2c2      	b.n	1000ecb0 <at_ble_event_get+0x604>
1000e72a:	681a      	ldr	r2, [r3, #0]
1000e72c:	68de      	ldr	r6, [r3, #12]
1000e72e:	6022      	str	r2, [r4, #0]
1000e730:	88da      	ldrh	r2, [r3, #6]
1000e732:	9201      	str	r2, [sp, #4]
1000e734:	4a95      	ldr	r2, [pc, #596]	; (1000e98c <at_ble_event_get+0x2e0>)
1000e736:	889c      	ldrh	r4, [r3, #4]
1000e738:	6811      	ldr	r1, [r2, #0]
1000e73a:	6013      	str	r3, [r2, #0]
1000e73c:	6019      	str	r1, [r3, #0]
1000e73e:	4b94      	ldr	r3, [pc, #592]	; (1000e990 <at_ble_event_get+0x2e4>)
1000e740:	781b      	ldrb	r3, [r3, #0]
1000e742:	2b01      	cmp	r3, #1
1000e744:	d10f      	bne.n	1000e766 <at_ble_event_get+0xba>
1000e746:	4b93      	ldr	r3, [pc, #588]	; (1000e994 <at_ble_event_get+0x2e8>)
1000e748:	4a92      	ldr	r2, [pc, #584]	; (1000e994 <at_ble_event_get+0x2e8>)
1000e74a:	8898      	ldrh	r0, [r3, #4]
1000e74c:	88d9      	ldrh	r1, [r3, #6]
1000e74e:	68d2      	ldr	r2, [r2, #12]
1000e750:	891b      	ldrh	r3, [r3, #8]
1000e752:	4f91      	ldr	r7, [pc, #580]	; (1000e998 <at_ble_event_get+0x2ec>)
1000e754:	47b8      	blx	r7
1000e756:	2210      	movs	r2, #16
1000e758:	4b90      	ldr	r3, [pc, #576]	; (1000e99c <at_ble_event_get+0x2f0>)
1000e75a:	488e      	ldr	r0, [pc, #568]	; (1000e994 <at_ble_event_get+0x2e8>)
1000e75c:	2100      	movs	r1, #0
1000e75e:	4798      	blx	r3
1000e760:	2300      	movs	r3, #0
1000e762:	4a8b      	ldr	r2, [pc, #556]	; (1000e990 <at_ble_event_get+0x2e4>)
1000e764:	7013      	strb	r3, [r2, #0]
1000e766:	9b02      	ldr	r3, [sp, #8]
1000e768:	2b00      	cmp	r3, #0
1000e76a:	d114      	bne.n	1000e796 <at_ble_event_get+0xea>
1000e76c:	4b8c      	ldr	r3, [pc, #560]	; (1000e9a0 <at_ble_event_get+0x2f4>)
1000e76e:	429c      	cmp	r4, r3
1000e770:	d009      	beq.n	1000e786 <at_ble_event_get+0xda>
1000e772:	4b8c      	ldr	r3, [pc, #560]	; (1000e9a4 <at_ble_event_get+0x2f8>)
1000e774:	429c      	cmp	r4, r3
1000e776:	d127      	bne.n	1000e7c8 <at_ble_event_get+0x11c>
1000e778:	233a      	movs	r3, #58	; 0x3a
1000e77a:	9a03      	ldr	r2, [sp, #12]
1000e77c:	7013      	strb	r3, [r2, #0]
1000e77e:	2300      	movs	r3, #0
1000e780:	9302      	str	r3, [sp, #8]
1000e782:	1c1d      	adds	r5, r3, #0
1000e784:	e007      	b.n	1000e796 <at_ble_event_get+0xea>
1000e786:	9b01      	ldr	r3, [sp, #4]
1000e788:	42a3      	cmp	r3, r4
1000e78a:	d000      	beq.n	1000e78e <at_ble_event_get+0xe2>
1000e78c:	e28a      	b.n	1000eca4 <at_ble_event_get+0x5f8>
1000e78e:	2338      	movs	r3, #56	; 0x38
1000e790:	9a03      	ldr	r2, [sp, #12]
1000e792:	7013      	strb	r3, [r2, #0]
1000e794:	602e      	str	r6, [r5, #0]
1000e796:	9b03      	ldr	r3, [sp, #12]
1000e798:	781b      	ldrb	r3, [r3, #0]
1000e79a:	2b3b      	cmp	r3, #59	; 0x3b
1000e79c:	d101      	bne.n	1000e7a2 <at_ble_event_get+0xf6>
1000e79e:	4b82      	ldr	r3, [pc, #520]	; (1000e9a8 <at_ble_event_get+0x2fc>)
1000e7a0:	4798      	blx	r3
1000e7a2:	9b03      	ldr	r3, [sp, #12]
1000e7a4:	781b      	ldrb	r3, [r3, #0]
1000e7a6:	2b3b      	cmp	r3, #59	; 0x3b
1000e7a8:	d003      	beq.n	1000e7b2 <at_ble_event_get+0x106>
1000e7aa:	9b05      	ldr	r3, [sp, #20]
1000e7ac:	3303      	adds	r3, #3
1000e7ae:	d904      	bls.n	1000e7ba <at_ble_event_get+0x10e>
1000e7b0:	e283      	b.n	1000ecba <at_ble_event_get+0x60e>
1000e7b2:	9b02      	ldr	r3, [sp, #8]
1000e7b4:	2b00      	cmp	r3, #0
1000e7b6:	d088      	beq.n	1000e6ca <at_ble_event_get+0x1e>
1000e7b8:	e7f7      	b.n	1000e7aa <at_ble_event_get+0xfe>
1000e7ba:	9b02      	ldr	r3, [sp, #8]
1000e7bc:	2bd0      	cmp	r3, #208	; 0xd0
1000e7be:	d100      	bne.n	1000e7c2 <at_ble_event_get+0x116>
1000e7c0:	e27b      	b.n	1000ecba <at_ble_event_get+0x60e>
1000e7c2:	4b7a      	ldr	r3, [pc, #488]	; (1000e9ac <at_ble_event_get+0x300>)
1000e7c4:	4798      	blx	r3
1000e7c6:	e278      	b.n	1000ecba <at_ble_event_get+0x60e>
1000e7c8:	9b01      	ldr	r3, [sp, #4]
1000e7ca:	2bbb      	cmp	r3, #187	; 0xbb
1000e7cc:	d125      	bne.n	1000e81a <at_ble_event_get+0x16e>
1000e7ce:	2cbb      	cmp	r4, #187	; 0xbb
1000e7d0:	d123      	bne.n	1000e81a <at_ble_event_get+0x16e>
1000e7d2:	466b      	mov	r3, sp
1000e7d4:	891b      	ldrh	r3, [r3, #8]
1000e7d6:	80ab      	strh	r3, [r5, #4]
1000e7d8:	78b3      	ldrb	r3, [r6, #2]
1000e7da:	7872      	ldrb	r2, [r6, #1]
1000e7dc:	78f0      	ldrb	r0, [r6, #3]
1000e7de:	021b      	lsls	r3, r3, #8
1000e7e0:	4313      	orrs	r3, r2
1000e7e2:	7971      	ldrb	r1, [r6, #5]
1000e7e4:	7932      	ldrb	r2, [r6, #4]
1000e7e6:	70a8      	strb	r0, [r5, #2]
1000e7e8:	4871      	ldr	r0, [pc, #452]	; (1000e9b0 <at_ble_event_get+0x304>)
1000e7ea:	802b      	strh	r3, [r5, #0]
1000e7ec:	4283      	cmp	r3, r0
1000e7ee:	d806      	bhi.n	1000e7fe <at_ble_event_get+0x152>
1000e7f0:	4a70      	ldr	r2, [pc, #448]	; (1000e9b4 <at_ble_event_get+0x308>)
1000e7f2:	4293      	cmp	r3, r2
1000e7f4:	d20b      	bcs.n	1000e80e <at_ble_event_get+0x162>
1000e7f6:	4a70      	ldr	r2, [pc, #448]	; (1000e9b8 <at_ble_event_get+0x30c>)
1000e7f8:	4293      	cmp	r3, r2
1000e7fa:	d008      	beq.n	1000e80e <at_ble_event_get+0x162>
1000e7fc:	e009      	b.n	1000e812 <at_ble_event_get+0x166>
1000e7fe:	486f      	ldr	r0, [pc, #444]	; (1000e9bc <at_ble_event_get+0x310>)
1000e800:	4283      	cmp	r3, r0
1000e802:	d106      	bne.n	1000e812 <at_ble_event_get+0x166>
1000e804:	020b      	lsls	r3, r1, #8
1000e806:	4313      	orrs	r3, r2
1000e808:	80ab      	strh	r3, [r5, #4]
1000e80a:	2337      	movs	r3, #55	; 0x37
1000e80c:	e002      	b.n	1000e814 <at_ble_event_get+0x168>
1000e80e:	2336      	movs	r3, #54	; 0x36
1000e810:	e000      	b.n	1000e814 <at_ble_event_get+0x168>
1000e812:	2300      	movs	r3, #0
1000e814:	9a03      	ldr	r2, [sp, #12]
1000e816:	7013      	strb	r3, [r2, #0]
1000e818:	e7bd      	b.n	1000e796 <at_ble_event_get+0xea>
1000e81a:	4b69      	ldr	r3, [pc, #420]	; (1000e9c0 <at_ble_event_get+0x314>)
1000e81c:	429c      	cmp	r4, r3
1000e81e:	d100      	bne.n	1000e822 <at_ble_event_get+0x176>
1000e820:	e144      	b.n	1000eaac <at_ble_event_get+0x400>
1000e822:	d865      	bhi.n	1000e8f0 <at_ble_event_get+0x244>
1000e824:	4b67      	ldr	r3, [pc, #412]	; (1000e9c4 <at_ble_event_get+0x318>)
1000e826:	429c      	cmp	r4, r3
1000e828:	d100      	bne.n	1000e82c <at_ble_event_get+0x180>
1000e82a:	e1d5      	b.n	1000ebd8 <at_ble_event_get+0x52c>
1000e82c:	d82f      	bhi.n	1000e88e <at_ble_event_get+0x1e2>
1000e82e:	4b66      	ldr	r3, [pc, #408]	; (1000e9c8 <at_ble_event_get+0x31c>)
1000e830:	429c      	cmp	r4, r3
1000e832:	d100      	bne.n	1000e836 <at_ble_event_get+0x18a>
1000e834:	e1e0      	b.n	1000ebf8 <at_ble_event_get+0x54c>
1000e836:	d813      	bhi.n	1000e860 <at_ble_event_get+0x1b4>
1000e838:	4b64      	ldr	r3, [pc, #400]	; (1000e9cc <at_ble_event_get+0x320>)
1000e83a:	429c      	cmp	r4, r3
1000e83c:	d100      	bne.n	1000e840 <at_ble_event_get+0x194>
1000e83e:	e1a3      	b.n	1000eb88 <at_ble_event_get+0x4dc>
1000e840:	d804      	bhi.n	1000e84c <at_ble_event_get+0x1a0>
1000e842:	2638      	movs	r6, #56	; 0x38
1000e844:	42b4      	cmp	r4, r6
1000e846:	d100      	bne.n	1000e84a <at_ble_event_get+0x19e>
1000e848:	e225      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000e84a:	e117      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e84c:	4b60      	ldr	r3, [pc, #384]	; (1000e9d0 <at_ble_event_get+0x324>)
1000e84e:	429c      	cmp	r4, r3
1000e850:	d100      	bne.n	1000e854 <at_ble_event_get+0x1a8>
1000e852:	e19f      	b.n	1000eb94 <at_ble_event_get+0x4e8>
1000e854:	33fe      	adds	r3, #254	; 0xfe
1000e856:	33ff      	adds	r3, #255	; 0xff
1000e858:	429c      	cmp	r4, r3
1000e85a:	d100      	bne.n	1000e85e <at_ble_event_get+0x1b2>
1000e85c:	e1d3      	b.n	1000ec06 <at_ble_event_get+0x55a>
1000e85e:	e10d      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e860:	4b5c      	ldr	r3, [pc, #368]	; (1000e9d4 <at_ble_event_get+0x328>)
1000e862:	429c      	cmp	r4, r3
1000e864:	d100      	bne.n	1000e868 <at_ble_event_get+0x1bc>
1000e866:	e1a9      	b.n	1000ebbc <at_ble_event_get+0x510>
1000e868:	d808      	bhi.n	1000e87c <at_ble_event_get+0x1d0>
1000e86a:	4b5b      	ldr	r3, [pc, #364]	; (1000e9d8 <at_ble_event_get+0x32c>)
1000e86c:	429c      	cmp	r4, r3
1000e86e:	d100      	bne.n	1000e872 <at_ble_event_get+0x1c6>
1000e870:	e196      	b.n	1000eba0 <at_ble_event_get+0x4f4>
1000e872:	4b5a      	ldr	r3, [pc, #360]	; (1000e9dc <at_ble_event_get+0x330>)
1000e874:	429c      	cmp	r4, r3
1000e876:	d100      	bne.n	1000e87a <at_ble_event_get+0x1ce>
1000e878:	e199      	b.n	1000ebae <at_ble_event_get+0x502>
1000e87a:	e0ff      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e87c:	4b58      	ldr	r3, [pc, #352]	; (1000e9e0 <at_ble_event_get+0x334>)
1000e87e:	429c      	cmp	r4, r3
1000e880:	d100      	bne.n	1000e884 <at_ble_event_get+0x1d8>
1000e882:	e1a2      	b.n	1000ebca <at_ble_event_get+0x51e>
1000e884:	4b57      	ldr	r3, [pc, #348]	; (1000e9e4 <at_ble_event_get+0x338>)
1000e886:	429c      	cmp	r4, r3
1000e888:	d100      	bne.n	1000e88c <at_ble_event_get+0x1e0>
1000e88a:	e1d4      	b.n	1000ec36 <at_ble_event_get+0x58a>
1000e88c:	e0f6      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e88e:	4b56      	ldr	r3, [pc, #344]	; (1000e9e8 <at_ble_event_get+0x33c>)
1000e890:	429c      	cmp	r4, r3
1000e892:	d100      	bne.n	1000e896 <at_ble_event_get+0x1ea>
1000e894:	e1c8      	b.n	1000ec28 <at_ble_event_get+0x57c>
1000e896:	d812      	bhi.n	1000e8be <at_ble_event_get+0x212>
1000e898:	4b54      	ldr	r3, [pc, #336]	; (1000e9ec <at_ble_event_get+0x340>)
1000e89a:	429c      	cmp	r4, r3
1000e89c:	d100      	bne.n	1000e8a0 <at_ble_event_get+0x1f4>
1000e89e:	e1d1      	b.n	1000ec44 <at_ble_event_get+0x598>
1000e8a0:	d804      	bhi.n	1000e8ac <at_ble_event_get+0x200>
1000e8a2:	4b53      	ldr	r3, [pc, #332]	; (1000e9f0 <at_ble_event_get+0x344>)
1000e8a4:	429c      	cmp	r4, r3
1000e8a6:	d100      	bne.n	1000e8aa <at_ble_event_get+0x1fe>
1000e8a8:	e19b      	b.n	1000ebe2 <at_ble_event_get+0x536>
1000e8aa:	e0e7      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e8ac:	4b51      	ldr	r3, [pc, #324]	; (1000e9f4 <at_ble_event_get+0x348>)
1000e8ae:	429c      	cmp	r4, r3
1000e8b0:	d100      	bne.n	1000e8b4 <at_ble_event_get+0x208>
1000e8b2:	e1ad      	b.n	1000ec10 <at_ble_event_get+0x564>
1000e8b4:	4b50      	ldr	r3, [pc, #320]	; (1000e9f8 <at_ble_event_get+0x34c>)
1000e8b6:	429c      	cmp	r4, r3
1000e8b8:	d100      	bne.n	1000e8bc <at_ble_event_get+0x210>
1000e8ba:	e1b0      	b.n	1000ec1e <at_ble_event_get+0x572>
1000e8bc:	e0de      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e8be:	4b4f      	ldr	r3, [pc, #316]	; (1000e9fc <at_ble_event_get+0x350>)
1000e8c0:	429c      	cmp	r4, r3
1000e8c2:	d100      	bne.n	1000e8c6 <at_ble_event_get+0x21a>
1000e8c4:	e0e0      	b.n	1000ea88 <at_ble_event_get+0x3dc>
1000e8c6:	d809      	bhi.n	1000e8dc <at_ble_event_get+0x230>
1000e8c8:	3b08      	subs	r3, #8
1000e8ca:	429c      	cmp	r4, r3
1000e8cc:	d100      	bne.n	1000e8d0 <at_ble_event_get+0x224>
1000e8ce:	e0d7      	b.n	1000ea80 <at_ble_event_get+0x3d4>
1000e8d0:	4b4b      	ldr	r3, [pc, #300]	; (1000ea00 <at_ble_event_get+0x354>)
1000e8d2:	2639      	movs	r6, #57	; 0x39
1000e8d4:	429c      	cmp	r4, r3
1000e8d6:	d100      	bne.n	1000e8da <at_ble_event_get+0x22e>
1000e8d8:	e1dd      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000e8da:	e0cf      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e8dc:	23d1      	movs	r3, #209	; 0xd1
1000e8de:	011b      	lsls	r3, r3, #4
1000e8e0:	429c      	cmp	r4, r3
1000e8e2:	d100      	bne.n	1000e8e6 <at_ble_event_get+0x23a>
1000e8e4:	e0d6      	b.n	1000ea94 <at_ble_event_get+0x3e8>
1000e8e6:	4b47      	ldr	r3, [pc, #284]	; (1000ea04 <at_ble_event_get+0x358>)
1000e8e8:	429c      	cmp	r4, r3
1000e8ea:	d100      	bne.n	1000e8ee <at_ble_event_get+0x242>
1000e8ec:	e0d8      	b.n	1000eaa0 <at_ble_event_get+0x3f4>
1000e8ee:	e0c5      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e8f0:	4b45      	ldr	r3, [pc, #276]	; (1000ea08 <at_ble_event_get+0x35c>)
1000e8f2:	429c      	cmp	r4, r3
1000e8f4:	d100      	bne.n	1000e8f8 <at_ble_event_get+0x24c>
1000e8f6:	e117      	b.n	1000eb28 <at_ble_event_get+0x47c>
1000e8f8:	d82e      	bhi.n	1000e958 <at_ble_event_get+0x2ac>
1000e8fa:	4b44      	ldr	r3, [pc, #272]	; (1000ea0c <at_ble_event_get+0x360>)
1000e8fc:	429c      	cmp	r4, r3
1000e8fe:	d100      	bne.n	1000e902 <at_ble_event_get+0x256>
1000e900:	e13d      	b.n	1000eb7e <at_ble_event_get+0x4d2>
1000e902:	d812      	bhi.n	1000e92a <at_ble_event_get+0x27e>
1000e904:	4b42      	ldr	r3, [pc, #264]	; (1000ea10 <at_ble_event_get+0x364>)
1000e906:	429c      	cmp	r4, r3
1000e908:	d100      	bne.n	1000e90c <at_ble_event_get+0x260>
1000e90a:	e0e8      	b.n	1000eade <at_ble_event_get+0x432>
1000e90c:	d804      	bhi.n	1000e918 <at_ble_event_get+0x26c>
1000e90e:	3b03      	subs	r3, #3
1000e910:	429c      	cmp	r4, r3
1000e912:	d100      	bne.n	1000e916 <at_ble_event_get+0x26a>
1000e914:	e0d0      	b.n	1000eab8 <at_ble_event_get+0x40c>
1000e916:	e0b1      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e918:	4b3e      	ldr	r3, [pc, #248]	; (1000ea14 <at_ble_event_get+0x368>)
1000e91a:	429c      	cmp	r4, r3
1000e91c:	d100      	bne.n	1000e920 <at_ble_event_get+0x274>
1000e91e:	e0d0      	b.n	1000eac2 <at_ble_event_get+0x416>
1000e920:	4b3d      	ldr	r3, [pc, #244]	; (1000ea18 <at_ble_event_get+0x36c>)
1000e922:	429c      	cmp	r4, r3
1000e924:	d100      	bne.n	1000e928 <at_ble_event_get+0x27c>
1000e926:	e0f9      	b.n	1000eb1c <at_ble_event_get+0x470>
1000e928:	e0a8      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e92a:	4b3c      	ldr	r3, [pc, #240]	; (1000ea1c <at_ble_event_get+0x370>)
1000e92c:	429c      	cmp	r4, r3
1000e92e:	d100      	bne.n	1000e932 <at_ble_event_get+0x286>
1000e930:	e0db      	b.n	1000eaea <at_ble_event_get+0x43e>
1000e932:	d808      	bhi.n	1000e946 <at_ble_event_get+0x29a>
1000e934:	4b3a      	ldr	r3, [pc, #232]	; (1000ea20 <at_ble_event_get+0x374>)
1000e936:	429c      	cmp	r4, r3
1000e938:	d100      	bne.n	1000e93c <at_ble_event_get+0x290>
1000e93a:	e11b      	b.n	1000eb74 <at_ble_event_get+0x4c8>
1000e93c:	4b39      	ldr	r3, [pc, #228]	; (1000ea24 <at_ble_event_get+0x378>)
1000e93e:	429c      	cmp	r4, r3
1000e940:	d100      	bne.n	1000e944 <at_ble_event_get+0x298>
1000e942:	e0d8      	b.n	1000eaf6 <at_ble_event_get+0x44a>
1000e944:	e09a      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e946:	4b38      	ldr	r3, [pc, #224]	; (1000ea28 <at_ble_event_get+0x37c>)
1000e948:	429c      	cmp	r4, r3
1000e94a:	d100      	bne.n	1000e94e <at_ble_event_get+0x2a2>
1000e94c:	e0d8      	b.n	1000eb00 <at_ble_event_get+0x454>
1000e94e:	4b37      	ldr	r3, [pc, #220]	; (1000ea2c <at_ble_event_get+0x380>)
1000e950:	429c      	cmp	r4, r3
1000e952:	d100      	bne.n	1000e956 <at_ble_event_get+0x2aa>
1000e954:	e0db      	b.n	1000eb0e <at_ble_event_get+0x462>
1000e956:	e091      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e958:	4b35      	ldr	r3, [pc, #212]	; (1000ea30 <at_ble_event_get+0x384>)
1000e95a:	429c      	cmp	r4, r3
1000e95c:	d100      	bne.n	1000e960 <at_ble_event_get+0x2b4>
1000e95e:	e0f7      	b.n	1000eb50 <at_ble_event_get+0x4a4>
1000e960:	d876      	bhi.n	1000ea50 <at_ble_event_get+0x3a4>
1000e962:	4b34      	ldr	r3, [pc, #208]	; (1000ea34 <at_ble_event_get+0x388>)
1000e964:	429c      	cmp	r4, r3
1000e966:	d100      	bne.n	1000e96a <at_ble_event_get+0x2be>
1000e968:	e0f8      	b.n	1000eb5c <at_ble_event_get+0x4b0>
1000e96a:	d869      	bhi.n	1000ea40 <at_ble_event_get+0x394>
1000e96c:	4b32      	ldr	r3, [pc, #200]	; (1000ea38 <at_ble_event_get+0x38c>)
1000e96e:	429c      	cmp	r4, r3
1000e970:	d100      	bne.n	1000e974 <at_ble_event_get+0x2c8>
1000e972:	e0e0      	b.n	1000eb36 <at_ble_event_get+0x48a>
1000e974:	4b31      	ldr	r3, [pc, #196]	; (1000ea3c <at_ble_event_get+0x390>)
1000e976:	429c      	cmp	r4, r3
1000e978:	d100      	bne.n	1000e97c <at_ble_event_get+0x2d0>
1000e97a:	e0a9      	b.n	1000ead0 <at_ble_event_get+0x424>
1000e97c:	e07e      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000e97e:	46c0      	nop			; (mov r8, r8)
1000e980:	1000f859 	.word	0x1000f859
1000e984:	1001d490 	.word	0x1001d490
1000e988:	1000c809 	.word	0x1000c809
1000e98c:	1001d494 	.word	0x1001d494
1000e990:	1001d48c 	.word	0x1001d48c
1000e994:	1001d47c 	.word	0x1001d47c
1000e998:	1000e595 	.word	0x1000e595
1000e99c:	1001865f 	.word	0x1001865f
1000e9a0:	0000ffff 	.word	0x0000ffff
1000e9a4:	0000fffe 	.word	0x0000fffe
1000e9a8:	1000ca81 	.word	0x1000ca81
1000e9ac:	1000f85b 	.word	0x1000f85b
1000e9b0:	0000201e 	.word	0x0000201e
1000e9b4:	0000201d 	.word	0x0000201d
1000e9b8:	00000c03 	.word	0x00000c03
1000e9bc:	0000201f 	.word	0x0000201f
1000e9c0:	00000d1c 	.word	0x00000d1c
1000e9c4:	00000c0c 	.word	0x00000c0c
1000e9c8:	00000c02 	.word	0x00000c02
1000e9cc:	00000a02 	.word	0x00000a02
1000e9d0:	00000a03 	.word	0x00000a03
1000e9d4:	00000c06 	.word	0x00000c06
1000e9d8:	00000c04 	.word	0x00000c04
1000e9dc:	00000c05 	.word	0x00000c05
1000e9e0:	00000c07 	.word	0x00000c07
1000e9e4:	00000c09 	.word	0x00000c09
1000e9e8:	00000c17 	.word	0x00000c17
1000e9ec:	00000c12 	.word	0x00000c12
1000e9f0:	00000c0d 	.word	0x00000c0d
1000e9f4:	00000c13 	.word	0x00000c13
1000e9f8:	00000c15 	.word	0x00000c15
1000e9fc:	00000d08 	.word	0x00000d08
1000ea00:	00000d01 	.word	0x00000d01
1000ea04:	00000d15 	.word	0x00000d15
1000ea08:	00000e1b 	.word	0x00000e1b
1000ea0c:	00000e0f 	.word	0x00000e0f
1000ea10:	00000e03 	.word	0x00000e03
1000ea14:	00000e06 	.word	0x00000e06
1000ea18:	00000e0a 	.word	0x00000e0a
1000ea1c:	00000e15 	.word	0x00000e15
1000ea20:	00000e11 	.word	0x00000e11
1000ea24:	00000e13 	.word	0x00000e13
1000ea28:	00000e17 	.word	0x00000e17
1000ea2c:	00000e19 	.word	0x00000e19
1000ea30:	00000e27 	.word	0x00000e27
1000ea34:	00000e21 	.word	0x00000e21
1000ea38:	00000e1c 	.word	0x00000e1c
1000ea3c:	00000e1d 	.word	0x00000e1d
1000ea40:	4b9f      	ldr	r3, [pc, #636]	; (1000ecc0 <at_ble_event_get+0x614>)
1000ea42:	429c      	cmp	r4, r3
1000ea44:	d07e      	beq.n	1000eb44 <at_ble_event_get+0x498>
1000ea46:	4b9f      	ldr	r3, [pc, #636]	; (1000ecc4 <at_ble_event_get+0x618>)
1000ea48:	429c      	cmp	r4, r3
1000ea4a:	d100      	bne.n	1000ea4e <at_ble_event_get+0x3a2>
1000ea4c:	e08c      	b.n	1000eb68 <at_ble_event_get+0x4bc>
1000ea4e:	e015      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000ea50:	4b9d      	ldr	r3, [pc, #628]	; (1000ecc8 <at_ble_event_get+0x61c>)
1000ea52:	429c      	cmp	r4, r3
1000ea54:	d100      	bne.n	1000ea58 <at_ble_event_get+0x3ac>
1000ea56:	e10a      	b.n	1000ec6e <at_ble_event_get+0x5c2>
1000ea58:	d808      	bhi.n	1000ea6c <at_ble_event_get+0x3c0>
1000ea5a:	4b9c      	ldr	r3, [pc, #624]	; (1000eccc <at_ble_event_get+0x620>)
1000ea5c:	429c      	cmp	r4, r3
1000ea5e:	d100      	bne.n	1000ea62 <at_ble_event_get+0x3b6>
1000ea60:	e0f7      	b.n	1000ec52 <at_ble_event_get+0x5a6>
1000ea62:	4b9b      	ldr	r3, [pc, #620]	; (1000ecd0 <at_ble_event_get+0x624>)
1000ea64:	429c      	cmp	r4, r3
1000ea66:	d100      	bne.n	1000ea6a <at_ble_event_get+0x3be>
1000ea68:	e0fa      	b.n	1000ec60 <at_ble_event_get+0x5b4>
1000ea6a:	e007      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000ea6c:	4b99      	ldr	r3, [pc, #612]	; (1000ecd4 <at_ble_event_get+0x628>)
1000ea6e:	429c      	cmp	r4, r3
1000ea70:	d100      	bne.n	1000ea74 <at_ble_event_get+0x3c8>
1000ea72:	e103      	b.n	1000ec7c <at_ble_event_get+0x5d0>
1000ea74:	4b98      	ldr	r3, [pc, #608]	; (1000ecd8 <at_ble_event_get+0x62c>)
1000ea76:	429c      	cmp	r4, r3
1000ea78:	d100      	bne.n	1000ea7c <at_ble_event_get+0x3d0>
1000ea7a:	e106      	b.n	1000ec8a <at_ble_event_get+0x5de>
1000ea7c:	2600      	movs	r6, #0
1000ea7e:	e10a      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ea80:	1c30      	adds	r0, r6, #0
1000ea82:	1c29      	adds	r1, r5, #0
1000ea84:	4b95      	ldr	r3, [pc, #596]	; (1000ecdc <at_ble_event_get+0x630>)
1000ea86:	e014      	b.n	1000eab2 <at_ble_event_get+0x406>
1000ea88:	1c30      	adds	r0, r6, #0
1000ea8a:	1c29      	adds	r1, r5, #0
1000ea8c:	4b94      	ldr	r3, [pc, #592]	; (1000ece0 <at_ble_event_get+0x634>)
1000ea8e:	4798      	blx	r3
1000ea90:	2604      	movs	r6, #4
1000ea92:	e100      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ea94:	1c30      	adds	r0, r6, #0
1000ea96:	1c29      	adds	r1, r5, #0
1000ea98:	4b92      	ldr	r3, [pc, #584]	; (1000ece4 <at_ble_event_get+0x638>)
1000ea9a:	4798      	blx	r3
1000ea9c:	2601      	movs	r6, #1
1000ea9e:	e0fa      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eaa0:	1c30      	adds	r0, r6, #0
1000eaa2:	1c29      	adds	r1, r5, #0
1000eaa4:	4b90      	ldr	r3, [pc, #576]	; (1000ece8 <at_ble_event_get+0x63c>)
1000eaa6:	4798      	blx	r3
1000eaa8:	260f      	movs	r6, #15
1000eaaa:	e0f4      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eaac:	1c30      	adds	r0, r6, #0
1000eaae:	1c29      	adds	r1, r5, #0
1000eab0:	4b8e      	ldr	r3, [pc, #568]	; (1000ecec <at_ble_event_get+0x640>)
1000eab2:	4798      	blx	r3
1000eab4:	1c06      	adds	r6, r0, #0
1000eab6:	e0ee      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eab8:	9801      	ldr	r0, [sp, #4]
1000eaba:	1c31      	adds	r1, r6, #0
1000eabc:	1c2a      	adds	r2, r5, #0
1000eabe:	4b8c      	ldr	r3, [pc, #560]	; (1000ecf0 <at_ble_event_get+0x644>)
1000eac0:	e017      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000eac2:	1c31      	adds	r1, r6, #0
1000eac4:	9801      	ldr	r0, [sp, #4]
1000eac6:	1c2a      	adds	r2, r5, #0
1000eac8:	4b8a      	ldr	r3, [pc, #552]	; (1000ecf4 <at_ble_event_get+0x648>)
1000eaca:	4798      	blx	r3
1000eacc:	2611      	movs	r6, #17
1000eace:	e0e2      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ead0:	1c31      	adds	r1, r6, #0
1000ead2:	9801      	ldr	r0, [sp, #4]
1000ead4:	1c2a      	adds	r2, r5, #0
1000ead6:	4b88      	ldr	r3, [pc, #544]	; (1000ecf8 <at_ble_event_get+0x64c>)
1000ead8:	4798      	blx	r3
1000eada:	2612      	movs	r6, #18
1000eadc:	e0db      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eade:	1c30      	adds	r0, r6, #0
1000eae0:	1c29      	adds	r1, r5, #0
1000eae2:	4b86      	ldr	r3, [pc, #536]	; (1000ecfc <at_ble_event_get+0x650>)
1000eae4:	4798      	blx	r3
1000eae6:	2606      	movs	r6, #6
1000eae8:	e0d5      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eaea:	1c31      	adds	r1, r6, #0
1000eaec:	1c2a      	adds	r2, r5, #0
1000eaee:	9801      	ldr	r0, [sp, #4]
1000eaf0:	4b83      	ldr	r3, [pc, #524]	; (1000ed00 <at_ble_event_get+0x654>)
1000eaf2:	4798      	blx	r3
1000eaf4:	e7de      	b.n	1000eab4 <at_ble_event_get+0x408>
1000eaf6:	9801      	ldr	r0, [sp, #4]
1000eaf8:	1c31      	adds	r1, r6, #0
1000eafa:	1c2a      	adds	r2, r5, #0
1000eafc:	4b81      	ldr	r3, [pc, #516]	; (1000ed04 <at_ble_event_get+0x658>)
1000eafe:	e7f8      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000eb00:	1c31      	adds	r1, r6, #0
1000eb02:	9801      	ldr	r0, [sp, #4]
1000eb04:	1c2a      	adds	r2, r5, #0
1000eb06:	4b80      	ldr	r3, [pc, #512]	; (1000ed08 <at_ble_event_get+0x65c>)
1000eb08:	4798      	blx	r3
1000eb0a:	260d      	movs	r6, #13
1000eb0c:	e0c3      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb0e:	1c31      	adds	r1, r6, #0
1000eb10:	9801      	ldr	r0, [sp, #4]
1000eb12:	1c2a      	adds	r2, r5, #0
1000eb14:	4b7d      	ldr	r3, [pc, #500]	; (1000ed0c <at_ble_event_get+0x660>)
1000eb16:	4798      	blx	r3
1000eb18:	260e      	movs	r6, #14
1000eb1a:	e0bc      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb1c:	9801      	ldr	r0, [sp, #4]
1000eb1e:	1c31      	adds	r1, r6, #0
1000eb20:	1c2a      	adds	r2, r5, #0
1000eb22:	4b7b      	ldr	r3, [pc, #492]	; (1000ed10 <at_ble_event_get+0x664>)
1000eb24:	4798      	blx	r3
1000eb26:	e084      	b.n	1000ec32 <at_ble_event_get+0x586>
1000eb28:	1c31      	adds	r1, r6, #0
1000eb2a:	9801      	ldr	r0, [sp, #4]
1000eb2c:	1c2a      	adds	r2, r5, #0
1000eb2e:	4b79      	ldr	r3, [pc, #484]	; (1000ed14 <at_ble_event_get+0x668>)
1000eb30:	4798      	blx	r3
1000eb32:	260b      	movs	r6, #11
1000eb34:	e0af      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb36:	1c31      	adds	r1, r6, #0
1000eb38:	9801      	ldr	r0, [sp, #4]
1000eb3a:	1c2a      	adds	r2, r5, #0
1000eb3c:	4b76      	ldr	r3, [pc, #472]	; (1000ed18 <at_ble_event_get+0x66c>)
1000eb3e:	4798      	blx	r3
1000eb40:	2610      	movs	r6, #16
1000eb42:	e0a8      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb44:	1c30      	adds	r0, r6, #0
1000eb46:	1c29      	adds	r1, r5, #0
1000eb48:	4b74      	ldr	r3, [pc, #464]	; (1000ed1c <at_ble_event_get+0x670>)
1000eb4a:	4798      	blx	r3
1000eb4c:	2628      	movs	r6, #40	; 0x28
1000eb4e:	e0a2      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb50:	1c30      	adds	r0, r6, #0
1000eb52:	1c29      	adds	r1, r5, #0
1000eb54:	4b72      	ldr	r3, [pc, #456]	; (1000ed20 <at_ble_event_get+0x674>)
1000eb56:	4798      	blx	r3
1000eb58:	2629      	movs	r6, #41	; 0x29
1000eb5a:	e09c      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb5c:	1c30      	adds	r0, r6, #0
1000eb5e:	1c29      	adds	r1, r5, #0
1000eb60:	4b70      	ldr	r3, [pc, #448]	; (1000ed24 <at_ble_event_get+0x678>)
1000eb62:	4798      	blx	r3
1000eb64:	2627      	movs	r6, #39	; 0x27
1000eb66:	e096      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb68:	1c30      	adds	r0, r6, #0
1000eb6a:	1c29      	adds	r1, r5, #0
1000eb6c:	4b6e      	ldr	r3, [pc, #440]	; (1000ed28 <at_ble_event_get+0x67c>)
1000eb6e:	4798      	blx	r3
1000eb70:	262a      	movs	r6, #42	; 0x2a
1000eb72:	e090      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb74:	9801      	ldr	r0, [sp, #4]
1000eb76:	1c31      	adds	r1, r6, #0
1000eb78:	1c2a      	adds	r2, r5, #0
1000eb7a:	4b6c      	ldr	r3, [pc, #432]	; (1000ed2c <at_ble_event_get+0x680>)
1000eb7c:	e7b9      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000eb7e:	9801      	ldr	r0, [sp, #4]
1000eb80:	1c31      	adds	r1, r6, #0
1000eb82:	1c2a      	adds	r2, r5, #0
1000eb84:	4b6a      	ldr	r3, [pc, #424]	; (1000ed30 <at_ble_event_get+0x684>)
1000eb86:	e7b4      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000eb88:	1c30      	adds	r0, r6, #0
1000eb8a:	1c29      	adds	r1, r5, #0
1000eb8c:	4b69      	ldr	r3, [pc, #420]	; (1000ed34 <at_ble_event_get+0x688>)
1000eb8e:	4798      	blx	r3
1000eb90:	262b      	movs	r6, #43	; 0x2b
1000eb92:	e080      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eb94:	1c30      	adds	r0, r6, #0
1000eb96:	1c29      	adds	r1, r5, #0
1000eb98:	4b67      	ldr	r3, [pc, #412]	; (1000ed38 <at_ble_event_get+0x68c>)
1000eb9a:	4798      	blx	r3
1000eb9c:	262c      	movs	r6, #44	; 0x2c
1000eb9e:	e07a      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000eba0:	1c31      	adds	r1, r6, #0
1000eba2:	9801      	ldr	r0, [sp, #4]
1000eba4:	1c2a      	adds	r2, r5, #0
1000eba6:	4b65      	ldr	r3, [pc, #404]	; (1000ed3c <at_ble_event_get+0x690>)
1000eba8:	4798      	blx	r3
1000ebaa:	2613      	movs	r6, #19
1000ebac:	e073      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ebae:	1c31      	adds	r1, r6, #0
1000ebb0:	9801      	ldr	r0, [sp, #4]
1000ebb2:	1c2a      	adds	r2, r5, #0
1000ebb4:	4b62      	ldr	r3, [pc, #392]	; (1000ed40 <at_ble_event_get+0x694>)
1000ebb6:	4798      	blx	r3
1000ebb8:	2614      	movs	r6, #20
1000ebba:	e06c      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ebbc:	1c31      	adds	r1, r6, #0
1000ebbe:	9801      	ldr	r0, [sp, #4]
1000ebc0:	1c2a      	adds	r2, r5, #0
1000ebc2:	4b60      	ldr	r3, [pc, #384]	; (1000ed44 <at_ble_event_get+0x698>)
1000ebc4:	4798      	blx	r3
1000ebc6:	2615      	movs	r6, #21
1000ebc8:	e065      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ebca:	1c31      	adds	r1, r6, #0
1000ebcc:	9801      	ldr	r0, [sp, #4]
1000ebce:	1c2a      	adds	r2, r5, #0
1000ebd0:	4b5d      	ldr	r3, [pc, #372]	; (1000ed48 <at_ble_event_get+0x69c>)
1000ebd2:	4798      	blx	r3
1000ebd4:	2616      	movs	r6, #22
1000ebd6:	e05e      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ebd8:	9801      	ldr	r0, [sp, #4]
1000ebda:	1c31      	adds	r1, r6, #0
1000ebdc:	1c2a      	adds	r2, r5, #0
1000ebde:	4b5b      	ldr	r3, [pc, #364]	; (1000ed4c <at_ble_event_get+0x6a0>)
1000ebe0:	e787      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000ebe2:	1c31      	adds	r1, r6, #0
1000ebe4:	9801      	ldr	r0, [sp, #4]
1000ebe6:	1c2a      	adds	r2, r5, #0
1000ebe8:	4b58      	ldr	r3, [pc, #352]	; (1000ed4c <at_ble_event_get+0x6a0>)
1000ebea:	4798      	blx	r3
1000ebec:	88a9      	ldrh	r1, [r5, #4]
1000ebee:	1c06      	adds	r6, r0, #0
1000ebf0:	4b57      	ldr	r3, [pc, #348]	; (1000ed50 <at_ble_event_get+0x6a4>)
1000ebf2:	8828      	ldrh	r0, [r5, #0]
1000ebf4:	4798      	blx	r3
1000ebf6:	e04e      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ebf8:	1c31      	adds	r1, r6, #0
1000ebfa:	9801      	ldr	r0, [sp, #4]
1000ebfc:	1c2a      	adds	r2, r5, #0
1000ebfe:	4b55      	ldr	r3, [pc, #340]	; (1000ed54 <at_ble_event_get+0x6a8>)
1000ec00:	4798      	blx	r3
1000ec02:	2623      	movs	r6, #35	; 0x23
1000ec04:	e047      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec06:	9801      	ldr	r0, [sp, #4]
1000ec08:	1c31      	adds	r1, r6, #0
1000ec0a:	1c2a      	adds	r2, r5, #0
1000ec0c:	4b52      	ldr	r3, [pc, #328]	; (1000ed58 <at_ble_event_get+0x6ac>)
1000ec0e:	e770      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000ec10:	9b01      	ldr	r3, [sp, #4]
1000ec12:	1c30      	adds	r0, r6, #0
1000ec14:	0a1f      	lsrs	r7, r3, #8
1000ec16:	802f      	strh	r7, [r5, #0]
1000ec18:	1c29      	adds	r1, r5, #0
1000ec1a:	4b50      	ldr	r3, [pc, #320]	; (1000ed5c <at_ble_event_get+0x6b0>)
1000ec1c:	e749      	b.n	1000eab2 <at_ble_event_get+0x406>
1000ec1e:	9801      	ldr	r0, [sp, #4]
1000ec20:	1c31      	adds	r1, r6, #0
1000ec22:	1c2a      	adds	r2, r5, #0
1000ec24:	4b4e      	ldr	r3, [pc, #312]	; (1000ed60 <at_ble_event_get+0x6b4>)
1000ec26:	e764      	b.n	1000eaf2 <at_ble_event_get+0x446>
1000ec28:	1c30      	adds	r0, r6, #0
1000ec2a:	1c29      	adds	r1, r5, #0
1000ec2c:	9a01      	ldr	r2, [sp, #4]
1000ec2e:	4b4d      	ldr	r3, [pc, #308]	; (1000ed64 <at_ble_event_get+0x6b8>)
1000ec30:	4798      	blx	r3
1000ec32:	263b      	movs	r6, #59	; 0x3b
1000ec34:	e02f      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec36:	1c31      	adds	r1, r6, #0
1000ec38:	9801      	ldr	r0, [sp, #4]
1000ec3a:	1c2a      	adds	r2, r5, #0
1000ec3c:	4b4a      	ldr	r3, [pc, #296]	; (1000ed68 <at_ble_event_get+0x6bc>)
1000ec3e:	4798      	blx	r3
1000ec40:	2618      	movs	r6, #24
1000ec42:	e028      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec44:	1c31      	adds	r1, r6, #0
1000ec46:	9801      	ldr	r0, [sp, #4]
1000ec48:	1c2a      	adds	r2, r5, #0
1000ec4a:	4b48      	ldr	r3, [pc, #288]	; (1000ed6c <at_ble_event_get+0x6c0>)
1000ec4c:	4798      	blx	r3
1000ec4e:	2620      	movs	r6, #32
1000ec50:	e021      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec52:	1c31      	adds	r1, r6, #0
1000ec54:	9801      	ldr	r0, [sp, #4]
1000ec56:	1c2a      	adds	r2, r5, #0
1000ec58:	4b45      	ldr	r3, [pc, #276]	; (1000ed70 <at_ble_event_get+0x6c4>)
1000ec5a:	4798      	blx	r3
1000ec5c:	2633      	movs	r6, #51	; 0x33
1000ec5e:	e01a      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec60:	1c31      	adds	r1, r6, #0
1000ec62:	9801      	ldr	r0, [sp, #4]
1000ec64:	1c2a      	adds	r2, r5, #0
1000ec66:	4b43      	ldr	r3, [pc, #268]	; (1000ed74 <at_ble_event_get+0x6c8>)
1000ec68:	4798      	blx	r3
1000ec6a:	2630      	movs	r6, #48	; 0x30
1000ec6c:	e013      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec6e:	1c31      	adds	r1, r6, #0
1000ec70:	9801      	ldr	r0, [sp, #4]
1000ec72:	1c2a      	adds	r2, r5, #0
1000ec74:	4b40      	ldr	r3, [pc, #256]	; (1000ed78 <at_ble_event_get+0x6cc>)
1000ec76:	4798      	blx	r3
1000ec78:	2634      	movs	r6, #52	; 0x34
1000ec7a:	e00c      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec7c:	1c31      	adds	r1, r6, #0
1000ec7e:	9801      	ldr	r0, [sp, #4]
1000ec80:	1c2a      	adds	r2, r5, #0
1000ec82:	4b3e      	ldr	r3, [pc, #248]	; (1000ed7c <at_ble_event_get+0x6d0>)
1000ec84:	4798      	blx	r3
1000ec86:	2635      	movs	r6, #53	; 0x35
1000ec88:	e005      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ec8a:	1c31      	adds	r1, r6, #0
1000ec8c:	9801      	ldr	r0, [sp, #4]
1000ec8e:	1c2a      	adds	r2, r5, #0
1000ec90:	4b3b      	ldr	r3, [pc, #236]	; (1000ed80 <at_ble_event_get+0x6d4>)
1000ec92:	4798      	blx	r3
1000ec94:	2632      	movs	r6, #50	; 0x32
1000ec96:	9b03      	ldr	r3, [sp, #12]
1000ec98:	701e      	strb	r6, [r3, #0]
1000ec9a:	2300      	movs	r3, #0
1000ec9c:	9302      	str	r3, [sp, #8]
1000ec9e:	e57a      	b.n	1000e796 <at_ble_event_get+0xea>
1000eca0:	23d0      	movs	r3, #208	; 0xd0
1000eca2:	e7fb      	b.n	1000ec9c <at_ble_event_get+0x5f0>
1000eca4:	9b01      	ldr	r3, [sp, #4]
1000eca6:	9e02      	ldr	r6, [sp, #8]
1000eca8:	2bbb      	cmp	r3, #187	; 0xbb
1000ecaa:	d000      	beq.n	1000ecae <at_ble_event_get+0x602>
1000ecac:	e6e6      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000ecae:	e7f2      	b.n	1000ec96 <at_ble_event_get+0x5ea>
1000ecb0:	9b02      	ldr	r3, [sp, #8]
1000ecb2:	2b00      	cmp	r3, #0
1000ecb4:	d000      	beq.n	1000ecb8 <at_ble_event_get+0x60c>
1000ecb6:	e56e      	b.n	1000e796 <at_ble_event_get+0xea>
1000ecb8:	e6e0      	b.n	1000ea7c <at_ble_event_get+0x3d0>
1000ecba:	9802      	ldr	r0, [sp, #8]
1000ecbc:	b007      	add	sp, #28
1000ecbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecc0:	00000e22 	.word	0x00000e22
1000ecc4:	00000e25 	.word	0x00000e25
1000ecc8:	00001b05 	.word	0x00001b05
1000eccc:	00001b01 	.word	0x00001b01
1000ecd0:	00001b03 	.word	0x00001b03
1000ecd4:	00001b06 	.word	0x00001b06
1000ecd8:	00001b08 	.word	0x00001b08
1000ecdc:	10010685 	.word	0x10010685
1000ece0:	10010669 	.word	0x10010669
1000ece4:	100107cd 	.word	0x100107cd
1000ece8:	100108bd 	.word	0x100108bd
1000ecec:	100108e1 	.word	0x100108e1
1000ecf0:	1000f9fd 	.word	0x1000f9fd
1000ecf4:	1001027d 	.word	0x1001027d
1000ecf8:	100102f9 	.word	0x100102f9
1000ecfc:	1000fcb5 	.word	0x1000fcb5
1000ed00:	1000fd51 	.word	0x1000fd51
1000ed04:	1000fe29 	.word	0x1000fe29
1000ed08:	100100b1 	.word	0x100100b1
1000ed0c:	10010151 	.word	0x10010151
1000ed10:	10010209 	.word	0x10010209
1000ed14:	10010231 	.word	0x10010231
1000ed18:	10010247 	.word	0x10010247
1000ed1c:	10010311 	.word	0x10010311
1000ed20:	1001033f 	.word	0x1001033f
1000ed24:	10010355 	.word	0x10010355
1000ed28:	1001037f 	.word	0x1001037f
1000ed2c:	100101ad 	.word	0x100101ad
1000ed30:	100101d7 	.word	0x100101d7
1000ed34:	1000f43d 	.word	0x1000f43d
1000ed38:	1000f469 	.word	0x1000f469
1000ed3c:	10010a89 	.word	0x10010a89
1000ed40:	10010ac5 	.word	0x10010ac5
1000ed44:	10010b0d 	.word	0x10010b0d
1000ed48:	10010b51 	.word	0x10010b51
1000ed4c:	10010b85 	.word	0x10010b85
1000ed50:	10010a49 	.word	0x10010a49
1000ed54:	10010c51 	.word	0x10010c51
1000ed58:	10010bd9 	.word	0x10010bd9
1000ed5c:	1000f395 	.word	0x1000f395
1000ed60:	1000f401 	.word	0x1000f401
1000ed64:	1000f3c5 	.word	0x1000f3c5
1000ed68:	10010c61 	.word	0x10010c61
1000ed6c:	10010ca1 	.word	0x10010ca1
1000ed70:	10010ded 	.word	0x10010ded
1000ed74:	10010df7 	.word	0x10010df7
1000ed78:	10010dfd 	.word	0x10010dfd
1000ed7c:	10010e03 	.word	0x10010e03
1000ed80:	10010e0f 	.word	0x10010e0f

1000ed84 <internal_event_flush>:
1000ed84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed86:	490e      	ldr	r1, [pc, #56]	; (1000edc0 <internal_event_flush+0x3c>)
1000ed88:	2400      	movs	r4, #0
1000ed8a:	680b      	ldr	r3, [r1, #0]
1000ed8c:	1c0f      	adds	r7, r1, #0
1000ed8e:	1c1e      	adds	r6, r3, #0
1000ed90:	4a0c      	ldr	r2, [pc, #48]	; (1000edc4 <internal_event_flush+0x40>)
1000ed92:	6815      	ldr	r5, [r2, #0]
1000ed94:	9201      	str	r2, [sp, #4]
1000ed96:	2b00      	cmp	r3, #0
1000ed98:	d00e      	beq.n	1000edb8 <internal_event_flush+0x34>
1000ed9a:	889a      	ldrh	r2, [r3, #4]
1000ed9c:	6819      	ldr	r1, [r3, #0]
1000ed9e:	4282      	cmp	r2, r0
1000eda0:	d107      	bne.n	1000edb2 <internal_event_flush+0x2e>
1000eda2:	2c00      	cmp	r4, #0
1000eda4:	d001      	beq.n	1000edaa <internal_event_flush+0x26>
1000eda6:	6021      	str	r1, [r4, #0]
1000eda8:	e000      	b.n	1000edac <internal_event_flush+0x28>
1000edaa:	1c0e      	adds	r6, r1, #0
1000edac:	601d      	str	r5, [r3, #0]
1000edae:	1c1d      	adds	r5, r3, #0
1000edb0:	1c23      	adds	r3, r4, #0
1000edb2:	1c1c      	adds	r4, r3, #0
1000edb4:	1c0b      	adds	r3, r1, #0
1000edb6:	e7ee      	b.n	1000ed96 <internal_event_flush+0x12>
1000edb8:	9b01      	ldr	r3, [sp, #4]
1000edba:	603e      	str	r6, [r7, #0]
1000edbc:	601d      	str	r5, [r3, #0]
1000edbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000edc0:	1001d490 	.word	0x1001d490
1000edc4:	1001d494 	.word	0x1001d494

1000edc8 <internal_conn_flush>:
1000edc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000edca:	4a12      	ldr	r2, [pc, #72]	; (1000ee14 <internal_conn_flush+0x4c>)
1000edcc:	9000      	str	r0, [sp, #0]
1000edce:	6813      	ldr	r3, [r2, #0]
1000edd0:	4811      	ldr	r0, [pc, #68]	; (1000ee18 <internal_conn_flush+0x50>)
1000edd2:	1c1f      	adds	r7, r3, #0
1000edd4:	2100      	movs	r1, #0
1000edd6:	4684      	mov	ip, r0
1000edd8:	6804      	ldr	r4, [r0, #0]
1000edda:	9201      	str	r2, [sp, #4]
1000eddc:	2b00      	cmp	r3, #0
1000edde:	d014      	beq.n	1000ee0a <internal_conn_flush+0x42>
1000ede0:	88d8      	ldrh	r0, [r3, #6]
1000ede2:	9a00      	ldr	r2, [sp, #0]
1000ede4:	681d      	ldr	r5, [r3, #0]
1000ede6:	0a06      	lsrs	r6, r0, #8
1000ede8:	4296      	cmp	r6, r2
1000edea:	d10b      	bne.n	1000ee04 <internal_conn_flush+0x3c>
1000edec:	26fd      	movs	r6, #253	; 0xfd
1000edee:	4006      	ands	r6, r0
1000edf0:	2e0c      	cmp	r6, #12
1000edf2:	d107      	bne.n	1000ee04 <internal_conn_flush+0x3c>
1000edf4:	2900      	cmp	r1, #0
1000edf6:	d001      	beq.n	1000edfc <internal_conn_flush+0x34>
1000edf8:	600d      	str	r5, [r1, #0]
1000edfa:	e000      	b.n	1000edfe <internal_conn_flush+0x36>
1000edfc:	1c2f      	adds	r7, r5, #0
1000edfe:	601c      	str	r4, [r3, #0]
1000ee00:	1c1c      	adds	r4, r3, #0
1000ee02:	1c0b      	adds	r3, r1, #0
1000ee04:	1c19      	adds	r1, r3, #0
1000ee06:	1c2b      	adds	r3, r5, #0
1000ee08:	e7e8      	b.n	1000eddc <internal_conn_flush+0x14>
1000ee0a:	9b01      	ldr	r3, [sp, #4]
1000ee0c:	601f      	str	r7, [r3, #0]
1000ee0e:	4663      	mov	r3, ip
1000ee10:	601c      	str	r4, [r3, #0]
1000ee12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ee14:	1001d490 	.word	0x1001d490
1000ee18:	1001d494 	.word	0x1001d494

1000ee1c <at_ble_device_name_set>:
1000ee1c:	b530      	push	{r4, r5, lr}
1000ee1e:	23cf      	movs	r3, #207	; 0xcf
1000ee20:	2800      	cmp	r0, #0
1000ee22:	d010      	beq.n	1000ee46 <at_ble_device_name_set+0x2a>
1000ee24:	1e4a      	subs	r2, r1, #1
1000ee26:	2a1f      	cmp	r2, #31
1000ee28:	d80d      	bhi.n	1000ee46 <at_ble_device_name_set+0x2a>
1000ee2a:	4a08      	ldr	r2, [pc, #32]	; (1000ee4c <at_ble_device_name_set+0x30>)
1000ee2c:	1c13      	adds	r3, r2, #0
1000ee2e:	33aa      	adds	r3, #170	; 0xaa
1000ee30:	8019      	strh	r1, [r3, #0]
1000ee32:	2300      	movs	r3, #0
1000ee34:	1c1c      	adds	r4, r3, #0
1000ee36:	5cc5      	ldrb	r5, [r0, r3]
1000ee38:	34ac      	adds	r4, #172	; 0xac
1000ee3a:	3301      	adds	r3, #1
1000ee3c:	5515      	strb	r5, [r2, r4]
1000ee3e:	b2dc      	uxtb	r4, r3
1000ee40:	428c      	cmp	r4, r1
1000ee42:	d3f7      	bcc.n	1000ee34 <at_ble_device_name_set+0x18>
1000ee44:	2300      	movs	r3, #0
1000ee46:	1c18      	adds	r0, r3, #0
1000ee48:	bd30      	pop	{r4, r5, pc}
1000ee4a:	46c0      	nop			; (mov r8, r8)
1000ee4c:	1001e5a2 	.word	0x1001e5a2

1000ee50 <at_ble_addr_get>:
1000ee50:	b510      	push	{r4, lr}
1000ee52:	1c04      	adds	r4, r0, #0
1000ee54:	20cf      	movs	r0, #207	; 0xcf
1000ee56:	2c00      	cmp	r4, #0
1000ee58:	d006      	beq.n	1000ee68 <at_ble_addr_get+0x18>
1000ee5a:	4b04      	ldr	r3, [pc, #16]	; (1000ee6c <at_ble_addr_get+0x1c>)
1000ee5c:	38ce      	subs	r0, #206	; 0xce
1000ee5e:	1c21      	adds	r1, r4, #0
1000ee60:	4798      	blx	r3
1000ee62:	4b03      	ldr	r3, [pc, #12]	; (1000ee70 <at_ble_addr_get+0x20>)
1000ee64:	791b      	ldrb	r3, [r3, #4]
1000ee66:	7023      	strb	r3, [r4, #0]
1000ee68:	bd10      	pop	{r4, pc}
1000ee6a:	46c0      	nop			; (mov r8, r8)
1000ee6c:	10010519 	.word	0x10010519
1000ee70:	1001e5a2 	.word	0x1001e5a2

1000ee74 <at_ble_set_dev_config>:
1000ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee76:	7906      	ldrb	r6, [r0, #4]
1000ee78:	b089      	sub	sp, #36	; 0x24
1000ee7a:	25cf      	movs	r5, #207	; 0xcf
1000ee7c:	2e03      	cmp	r6, #3
1000ee7e:	d838      	bhi.n	1000eef2 <at_ble_set_dev_config+0x7e>
1000ee80:	7803      	ldrb	r3, [r0, #0]
1000ee82:	3511      	adds	r5, #17
1000ee84:	2b0f      	cmp	r3, #15
1000ee86:	d834      	bhi.n	1000eef2 <at_ble_set_dev_config+0x7e>
1000ee88:	2380      	movs	r3, #128	; 0x80
1000ee8a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000ee8c:	3d11      	subs	r5, #17
1000ee8e:	009b      	lsls	r3, r3, #2
1000ee90:	429f      	cmp	r7, r3
1000ee92:	d82e      	bhi.n	1000eef2 <at_ble_set_dev_config+0x7e>
1000ee94:	7fc5      	ldrb	r5, [r0, #31]
1000ee96:	7f83      	ldrb	r3, [r0, #30]
1000ee98:	01ad      	lsls	r5, r5, #6
1000ee9a:	015b      	lsls	r3, r3, #5
1000ee9c:	431d      	orrs	r5, r3
1000ee9e:	7ec3      	ldrb	r3, [r0, #27]
1000eea0:	431d      	orrs	r5, r3
1000eea2:	7f43      	ldrb	r3, [r0, #29]
1000eea4:	011b      	lsls	r3, r3, #4
1000eea6:	431d      	orrs	r5, r3
1000eea8:	7f03      	ldrb	r3, [r0, #28]
1000eeaa:	009b      	lsls	r3, r3, #2
1000eeac:	431d      	orrs	r5, r3
1000eeae:	4b12      	ldr	r3, [pc, #72]	; (1000eef8 <at_ble_set_dev_config+0x84>)
1000eeb0:	b2ed      	uxtb	r5, r5
1000eeb2:	711e      	strb	r6, [r3, #4]
1000eeb4:	7903      	ldrb	r3, [r0, #4]
1000eeb6:	3b02      	subs	r3, #2
1000eeb8:	2b01      	cmp	r3, #1
1000eeba:	d801      	bhi.n	1000eec0 <at_ble_set_dev_config+0x4c>
1000eebc:	2302      	movs	r3, #2
1000eebe:	7103      	strb	r3, [r0, #4]
1000eec0:	1c04      	adds	r4, r0, #0
1000eec2:	1c23      	adds	r3, r4, #0
1000eec4:	330b      	adds	r3, #11
1000eec6:	8861      	ldrh	r1, [r4, #2]
1000eec8:	9307      	str	r3, [sp, #28]
1000eeca:	7923      	ldrb	r3, [r4, #4]
1000eecc:	7800      	ldrb	r0, [r0, #0]
1000eece:	9300      	str	r3, [sp, #0]
1000eed0:	9501      	str	r5, [sp, #4]
1000eed2:	8c25      	ldrh	r5, [r4, #32]
1000eed4:	1d62      	adds	r2, r4, #5
1000eed6:	9502      	str	r5, [sp, #8]
1000eed8:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000eeda:	9b07      	ldr	r3, [sp, #28]
1000eedc:	9503      	str	r5, [sp, #12]
1000eede:	9704      	str	r7, [sp, #16]
1000eee0:	4d06      	ldr	r5, [pc, #24]	; (1000eefc <at_ble_set_dev_config+0x88>)
1000eee2:	47a8      	blx	r5
1000eee4:	7126      	strb	r6, [r4, #4]
1000eee6:	1c05      	adds	r5, r0, #0
1000eee8:	1c21      	adds	r1, r4, #0
1000eeea:	4803      	ldr	r0, [pc, #12]	; (1000eef8 <at_ble_set_dev_config+0x84>)
1000eeec:	2226      	movs	r2, #38	; 0x26
1000eeee:	4b04      	ldr	r3, [pc, #16]	; (1000ef00 <at_ble_set_dev_config+0x8c>)
1000eef0:	4798      	blx	r3
1000eef2:	1c28      	adds	r0, r5, #0
1000eef4:	b009      	add	sp, #36	; 0x24
1000eef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eef8:	1001e5a2 	.word	0x1001e5a2
1000eefc:	10010411 	.word	0x10010411
1000ef00:	10018623 	.word	0x10018623

1000ef04 <at_ble_init>:
1000ef04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef06:	b087      	sub	sp, #28
1000ef08:	af03      	add	r7, sp, #12
1000ef0a:	4954      	ldr	r1, [pc, #336]	; (1000f05c <at_ble_init+0x158>)
1000ef0c:	220b      	movs	r2, #11
1000ef0e:	4b54      	ldr	r3, [pc, #336]	; (1000f060 <at_ble_init+0x15c>)
1000ef10:	1c04      	adds	r4, r0, #0
1000ef12:	1c38      	adds	r0, r7, #0
1000ef14:	4798      	blx	r3
1000ef16:	2205      	movs	r2, #5
1000ef18:	4b52      	ldr	r3, [pc, #328]	; (1000f064 <at_ble_init+0x160>)
1000ef1a:	2640      	movs	r6, #64	; 0x40
1000ef1c:	801a      	strh	r2, [r3, #0]
1000ef1e:	2300      	movs	r3, #0
1000ef20:	4a51      	ldr	r2, [pc, #324]	; (1000f068 <at_ble_init+0x164>)
1000ef22:	6013      	str	r3, [r2, #0]
1000ef24:	4a51      	ldr	r2, [pc, #324]	; (1000f06c <at_ble_init+0x168>)
1000ef26:	7013      	strb	r3, [r2, #0]
1000ef28:	4a51      	ldr	r2, [pc, #324]	; (1000f070 <at_ble_init+0x16c>)
1000ef2a:	7013      	strb	r3, [r2, #0]
1000ef2c:	4b51      	ldr	r3, [pc, #324]	; (1000f074 <at_ble_init+0x170>)
1000ef2e:	4798      	blx	r3
1000ef30:	4b51      	ldr	r3, [pc, #324]	; (1000f078 <at_ble_init+0x174>)
1000ef32:	4798      	blx	r3
1000ef34:	4b51      	ldr	r3, [pc, #324]	; (1000f07c <at_ble_init+0x178>)
1000ef36:	4798      	blx	r3
1000ef38:	4b51      	ldr	r3, [pc, #324]	; (1000f080 <at_ble_init+0x17c>)
1000ef3a:	4798      	blx	r3
1000ef3c:	2c00      	cmp	r4, #0
1000ef3e:	d100      	bne.n	1000ef42 <at_ble_init+0x3e>
1000ef40:	e089      	b.n	1000f056 <at_ble_init+0x152>
1000ef42:	68a3      	ldr	r3, [r4, #8]
1000ef44:	2b00      	cmp	r3, #0
1000ef46:	d100      	bne.n	1000ef4a <at_ble_init+0x46>
1000ef48:	e085      	b.n	1000f056 <at_ble_init+0x152>
1000ef4a:	6923      	ldr	r3, [r4, #16]
1000ef4c:	2b00      	cmp	r3, #0
1000ef4e:	d100      	bne.n	1000ef52 <at_ble_init+0x4e>
1000ef50:	e081      	b.n	1000f056 <at_ble_init+0x152>
1000ef52:	6820      	ldr	r0, [r4, #0]
1000ef54:	2800      	cmp	r0, #0
1000ef56:	d102      	bne.n	1000ef5e <at_ble_init+0x5a>
1000ef58:	6863      	ldr	r3, [r4, #4]
1000ef5a:	2b00      	cmp	r3, #0
1000ef5c:	d17b      	bne.n	1000f056 <at_ble_init+0x152>
1000ef5e:	4b49      	ldr	r3, [pc, #292]	; (1000f084 <at_ble_init+0x180>)
1000ef60:	6861      	ldr	r1, [r4, #4]
1000ef62:	4798      	blx	r3
1000ef64:	4b48      	ldr	r3, [pc, #288]	; (1000f088 <at_ble_init+0x184>)
1000ef66:	4798      	blx	r3
1000ef68:	2801      	cmp	r0, #1
1000ef6a:	d901      	bls.n	1000ef70 <at_ble_init+0x6c>
1000ef6c:	26e2      	movs	r6, #226	; 0xe2
1000ef6e:	e072      	b.n	1000f056 <at_ble_init+0x152>
1000ef70:	4846      	ldr	r0, [pc, #280]	; (1000f08c <at_ble_init+0x188>)
1000ef72:	4b47      	ldr	r3, [pc, #284]	; (1000f090 <at_ble_init+0x18c>)
1000ef74:	4798      	blx	r3
1000ef76:	2800      	cmp	r0, #0
1000ef78:	d1f8      	bne.n	1000ef6c <at_ble_init+0x68>
1000ef7a:	1c20      	adds	r0, r4, #0
1000ef7c:	4b45      	ldr	r3, [pc, #276]	; (1000f094 <at_ble_init+0x190>)
1000ef7e:	4798      	blx	r3
1000ef80:	68e0      	ldr	r0, [r4, #12]
1000ef82:	68a1      	ldr	r1, [r4, #8]
1000ef84:	4b44      	ldr	r3, [pc, #272]	; (1000f098 <at_ble_init+0x194>)
1000ef86:	4798      	blx	r3
1000ef88:	466b      	mov	r3, sp
1000ef8a:	2201      	movs	r2, #1
1000ef8c:	1cdc      	adds	r4, r3, #3
1000ef8e:	1c20      	adds	r0, r4, #0
1000ef90:	a901      	add	r1, sp, #4
1000ef92:	4252      	negs	r2, r2
1000ef94:	4b41      	ldr	r3, [pc, #260]	; (1000f09c <at_ble_init+0x198>)
1000ef96:	4798      	blx	r3
1000ef98:	2800      	cmp	r0, #0
1000ef9a:	d102      	bne.n	1000efa2 <at_ble_init+0x9e>
1000ef9c:	7823      	ldrb	r3, [r4, #0]
1000ef9e:	2b39      	cmp	r3, #57	; 0x39
1000efa0:	d1f2      	bne.n	1000ef88 <at_ble_init+0x84>
1000efa2:	4b3f      	ldr	r3, [pc, #252]	; (1000f0a0 <at_ble_init+0x19c>)
1000efa4:	4798      	blx	r3
1000efa6:	1e06      	subs	r6, r0, #0
1000efa8:	d155      	bne.n	1000f056 <at_ble_init+0x152>
1000efaa:	1c03      	adds	r3, r0, #0
1000efac:	2101      	movs	r1, #1
1000efae:	4a3d      	ldr	r2, [pc, #244]	; (1000f0a4 <at_ble_init+0x1a0>)
1000efb0:	4249      	negs	r1, r1
1000efb2:	189a      	adds	r2, r3, r2
1000efb4:	3312      	adds	r3, #18
1000efb6:	8151      	strh	r1, [r2, #10]
1000efb8:	2b90      	cmp	r3, #144	; 0x90
1000efba:	d1f7      	bne.n	1000efac <at_ble_init+0xa8>
1000efbc:	4c3a      	ldr	r4, [pc, #232]	; (1000f0a8 <at_ble_init+0x1a4>)
1000efbe:	3b81      	subs	r3, #129	; 0x81
1000efc0:	7023      	strb	r3, [r4, #0]
1000efc2:	4b3a      	ldr	r3, [pc, #232]	; (1000f0ac <at_ble_init+0x1a8>)
1000efc4:	4a3a      	ldr	r2, [pc, #232]	; (1000f0b0 <at_ble_init+0x1ac>)
1000efc6:	8063      	strh	r3, [r4, #2]
1000efc8:	2300      	movs	r3, #0
1000efca:	7123      	strb	r3, [r4, #4]
1000efcc:	3301      	adds	r3, #1
1000efce:	1e58      	subs	r0, r3, #1
1000efd0:	0119      	lsls	r1, r3, #4
1000efd2:	4301      	orrs	r1, r0
1000efd4:	3302      	adds	r3, #2
1000efd6:	7011      	strb	r1, [r2, #0]
1000efd8:	3201      	adds	r2, #1
1000efda:	2b21      	cmp	r3, #33	; 0x21
1000efdc:	d1f7      	bne.n	1000efce <at_ble_init+0xca>
1000efde:	33e0      	adds	r3, #224	; 0xe0
1000efe0:	33ff      	adds	r3, #255	; 0xff
1000efe2:	84a3      	strh	r3, [r4, #36]	; 0x24
1000efe4:	1c23      	adds	r3, r4, #0
1000efe6:	2500      	movs	r5, #0
1000efe8:	3373      	adds	r3, #115	; 0x73
1000efea:	701d      	strb	r5, [r3, #0]
1000efec:	1c23      	adds	r3, r4, #0
1000efee:	3372      	adds	r3, #114	; 0x72
1000eff0:	701d      	strb	r5, [r3, #0]
1000eff2:	1c23      	adds	r3, r4, #0
1000eff4:	3376      	adds	r3, #118	; 0x76
1000eff6:	701d      	strb	r5, [r3, #0]
1000eff8:	1c23      	adds	r3, r4, #0
1000effa:	33cc      	adds	r3, #204	; 0xcc
1000effc:	801d      	strh	r5, [r3, #0]
1000effe:	1c22      	adds	r2, r4, #0
1000f000:	23a0      	movs	r3, #160	; 0xa0
1000f002:	32d0      	adds	r2, #208	; 0xd0
1000f004:	005b      	lsls	r3, r3, #1
1000f006:	8013      	strh	r3, [r2, #0]
1000f008:	1c22      	adds	r2, r4, #0
1000f00a:	32ce      	adds	r2, #206	; 0xce
1000f00c:	8013      	strh	r3, [r2, #0]
1000f00e:	1c23      	adds	r3, r4, #0
1000f010:	33d2      	adds	r3, #210	; 0xd2
1000f012:	801d      	strh	r5, [r3, #0]
1000f014:	22fa      	movs	r2, #250	; 0xfa
1000f016:	1c23      	adds	r3, r4, #0
1000f018:	0052      	lsls	r2, r2, #1
1000f01a:	33d4      	adds	r3, #212	; 0xd4
1000f01c:	801a      	strh	r2, [r3, #0]
1000f01e:	1c23      	adds	r3, r4, #0
1000f020:	33d6      	adds	r3, #214	; 0xd6
1000f022:	701d      	strb	r5, [r3, #0]
1000f024:	1c20      	adds	r0, r4, #0
1000f026:	4b23      	ldr	r3, [pc, #140]	; (1000f0b4 <at_ble_init+0x1b0>)
1000f028:	76e5      	strb	r5, [r4, #27]
1000f02a:	7725      	strb	r5, [r4, #28]
1000f02c:	7765      	strb	r5, [r4, #29]
1000f02e:	77a5      	strb	r5, [r4, #30]
1000f030:	77e5      	strb	r5, [r4, #31]
1000f032:	8425      	strh	r5, [r4, #32]
1000f034:	8465      	strh	r5, [r4, #34]	; 0x22
1000f036:	4798      	blx	r3
1000f038:	1c23      	adds	r3, r4, #0
1000f03a:	2207      	movs	r2, #7
1000f03c:	3374      	adds	r3, #116	; 0x74
1000f03e:	701a      	strb	r2, [r3, #0]
1000f040:	1c23      	adds	r3, r4, #0
1000f042:	3204      	adds	r2, #4
1000f044:	33aa      	adds	r3, #170	; 0xaa
1000f046:	801a      	strh	r2, [r3, #0]
1000f048:	1c2b      	adds	r3, r5, #0
1000f04a:	5d7a      	ldrb	r2, [r7, r5]
1000f04c:	33ac      	adds	r3, #172	; 0xac
1000f04e:	3501      	adds	r5, #1
1000f050:	54e2      	strb	r2, [r4, r3]
1000f052:	2d0b      	cmp	r5, #11
1000f054:	d1f8      	bne.n	1000f048 <at_ble_init+0x144>
1000f056:	1c30      	adds	r0, r6, #0
1000f058:	b007      	add	sp, #28
1000f05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f05c:	1001b2e5 	.word	0x1001b2e5
1000f060:	10018623 	.word	0x10018623
1000f064:	1001e510 	.word	0x1001e510
1000f068:	1001d540 	.word	0x1001d540
1000f06c:	1001d4a0 	.word	0x1001d4a0
1000f070:	1001b971 	.word	0x1001b971
1000f074:	10010cb1 	.word	0x10010cb1
1000f078:	1000f195 	.word	0x1000f195
1000f07c:	1000f211 	.word	0x1000f211
1000f080:	1000f431 	.word	0x1000f431
1000f084:	1000f24d 	.word	0x1000f24d
1000f088:	1000c519 	.word	0x1000c519
1000f08c:	1000f731 	.word	0x1000f731
1000f090:	1000c75d 	.word	0x1000c75d
1000f094:	1000f7d9 	.word	0x1000f7d9
1000f098:	1000e5f1 	.word	0x1000e5f1
1000f09c:	1000e6ad 	.word	0x1000e6ad
1000f0a0:	100103a1 	.word	0x100103a1
1000f0a4:	1001e512 	.word	0x1001e512
1000f0a8:	1001e5a2 	.word	0x1001e5a2
1000f0ac:	00003a98 	.word	0x00003a98
1000f0b0:	1001e5ad 	.word	0x1001e5ad
1000f0b4:	1000ee75 	.word	0x1000ee75

1000f0b8 <at_ble_addr_set>:
1000f0b8:	b538      	push	{r3, r4, r5, lr}
1000f0ba:	1c45      	adds	r5, r0, #1
1000f0bc:	1c03      	adds	r3, r0, #0
1000f0be:	20cf      	movs	r0, #207	; 0xcf
1000f0c0:	2d00      	cmp	r5, #0
1000f0c2:	d018      	beq.n	1000f0f6 <at_ble_addr_set+0x3e>
1000f0c4:	781a      	ldrb	r2, [r3, #0]
1000f0c6:	2a03      	cmp	r2, #3
1000f0c8:	d815      	bhi.n	1000f0f6 <at_ble_addr_set+0x3e>
1000f0ca:	2a01      	cmp	r2, #1
1000f0cc:	d102      	bne.n	1000f0d4 <at_ble_addr_set+0x1c>
1000f0ce:	785a      	ldrb	r2, [r3, #1]
1000f0d0:	2a00      	cmp	r2, #0
1000f0d2:	d010      	beq.n	1000f0f6 <at_ble_addr_set+0x3e>
1000f0d4:	1c1c      	adds	r4, r3, #0
1000f0d6:	1c29      	adds	r1, r5, #0
1000f0d8:	2206      	movs	r2, #6
1000f0da:	4b07      	ldr	r3, [pc, #28]	; (1000f0f8 <at_ble_addr_set+0x40>)
1000f0dc:	4807      	ldr	r0, [pc, #28]	; (1000f0fc <at_ble_addr_set+0x44>)
1000f0de:	4798      	blx	r3
1000f0e0:	7823      	ldrb	r3, [r4, #0]
1000f0e2:	4807      	ldr	r0, [pc, #28]	; (1000f100 <at_ble_addr_set+0x48>)
1000f0e4:	7103      	strb	r3, [r0, #4]
1000f0e6:	4b07      	ldr	r3, [pc, #28]	; (1000f104 <at_ble_addr_set+0x4c>)
1000f0e8:	4798      	blx	r3
1000f0ea:	7823      	ldrb	r3, [r4, #0]
1000f0ec:	2b00      	cmp	r3, #0
1000f0ee:	d102      	bne.n	1000f0f6 <at_ble_addr_set+0x3e>
1000f0f0:	1c28      	adds	r0, r5, #0
1000f0f2:	4b05      	ldr	r3, [pc, #20]	; (1000f108 <at_ble_addr_set+0x50>)
1000f0f4:	4798      	blx	r3
1000f0f6:	bd38      	pop	{r3, r4, r5, pc}
1000f0f8:	10018623 	.word	0x10018623
1000f0fc:	1001e5a7 	.word	0x1001e5a7
1000f100:	1001e5a2 	.word	0x1001e5a2
1000f104:	1000ee75 	.word	0x1000ee75
1000f108:	1000f85d 	.word	0x1000f85d

1000f10c <at_ble_scan_stop>:
1000f10c:	b510      	push	{r4, lr}
1000f10e:	4b05      	ldr	r3, [pc, #20]	; (1000f124 <at_ble_scan_stop+0x18>)
1000f110:	4798      	blx	r3
1000f112:	1e04      	subs	r4, r0, #0
1000f114:	d103      	bne.n	1000f11e <at_ble_scan_stop+0x12>
1000f116:	20d1      	movs	r0, #209	; 0xd1
1000f118:	4b03      	ldr	r3, [pc, #12]	; (1000f128 <at_ble_scan_stop+0x1c>)
1000f11a:	0100      	lsls	r0, r0, #4
1000f11c:	4798      	blx	r3
1000f11e:	1c20      	adds	r0, r4, #0
1000f120:	bd10      	pop	{r4, pc}
1000f122:	46c0      	nop			; (mov r8, r8)
1000f124:	100105f9 	.word	0x100105f9
1000f128:	1000ed85 	.word	0x1000ed85

1000f12c <at_ble_disconnect>:
1000f12c:	b538      	push	{r3, r4, r5, lr}
1000f12e:	1c04      	adds	r4, r0, #0
1000f130:	4b04      	ldr	r3, [pc, #16]	; (1000f144 <at_ble_disconnect+0x18>)
1000f132:	1c08      	adds	r0, r1, #0
1000f134:	1c21      	adds	r1, r4, #0
1000f136:	4798      	blx	r3
1000f138:	1c05      	adds	r5, r0, #0
1000f13a:	4b03      	ldr	r3, [pc, #12]	; (1000f148 <at_ble_disconnect+0x1c>)
1000f13c:	1c20      	adds	r0, r4, #0
1000f13e:	4798      	blx	r3
1000f140:	1c28      	adds	r0, r5, #0
1000f142:	bd38      	pop	{r3, r4, r5, pc}
1000f144:	1000fc71 	.word	0x1000fc71
1000f148:	1000edc9 	.word	0x1000edc9

1000f14c <at_ble_conn_update_reply>:
1000f14c:	b510      	push	{r4, lr}
1000f14e:	4c01      	ldr	r4, [pc, #4]	; (1000f154 <at_ble_conn_update_reply+0x8>)
1000f150:	47a0      	blx	r4
1000f152:	bd10      	pop	{r4, pc}
1000f154:	10010161 	.word	0x10010161

1000f158 <at_ble_random_address_resolve>:
1000f158:	b510      	push	{r4, lr}
1000f15a:	23cf      	movs	r3, #207	; 0xcf
1000f15c:	2800      	cmp	r0, #0
1000f15e:	d00a      	beq.n	1000f176 <at_ble_random_address_resolve+0x1e>
1000f160:	2900      	cmp	r1, #0
1000f162:	d008      	beq.n	1000f176 <at_ble_random_address_resolve+0x1e>
1000f164:	2a00      	cmp	r2, #0
1000f166:	d006      	beq.n	1000f176 <at_ble_random_address_resolve+0x1e>
1000f168:	780c      	ldrb	r4, [r1, #0]
1000f16a:	2c02      	cmp	r4, #2
1000f16c:	d103      	bne.n	1000f176 <at_ble_random_address_resolve+0x1e>
1000f16e:	4b03      	ldr	r3, [pc, #12]	; (1000f17c <at_ble_random_address_resolve+0x24>)
1000f170:	3101      	adds	r1, #1
1000f172:	4798      	blx	r3
1000f174:	2300      	movs	r3, #0
1000f176:	1c18      	adds	r0, r3, #0
1000f178:	bd10      	pop	{r4, pc}
1000f17a:	46c0      	nop			; (mov r8, r8)
1000f17c:	10010855 	.word	0x10010855

1000f180 <at_ble_uuid_len2type>:
1000f180:	1e83      	subs	r3, r0, #2
1000f182:	b2db      	uxtb	r3, r3
1000f184:	2003      	movs	r0, #3
1000f186:	2b0e      	cmp	r3, #14
1000f188:	d801      	bhi.n	1000f18e <at_ble_uuid_len2type+0xe>
1000f18a:	4a01      	ldr	r2, [pc, #4]	; (1000f190 <at_ble_uuid_len2type+0x10>)
1000f18c:	5cd0      	ldrb	r0, [r2, r3]
1000f18e:	4770      	bx	lr
1000f190:	1001b2f0 	.word	0x1001b2f0

1000f194 <init_gatt_client_module>:
1000f194:	2200      	movs	r2, #0
1000f196:	4b01      	ldr	r3, [pc, #4]	; (1000f19c <init_gatt_client_module+0x8>)
1000f198:	801a      	strh	r2, [r3, #0]
1000f19a:	4770      	bx	lr
1000f19c:	1001d498 	.word	0x1001d498

1000f1a0 <db_searchATT>:
1000f1a0:	b570      	push	{r4, r5, r6, lr}
1000f1a2:	1c05      	adds	r5, r0, #0
1000f1a4:	2400      	movs	r4, #0
1000f1a6:	4b0c      	ldr	r3, [pc, #48]	; (1000f1d8 <db_searchATT+0x38>)
1000f1a8:	6819      	ldr	r1, [r3, #0]
1000f1aa:	4b0c      	ldr	r3, [pc, #48]	; (1000f1dc <db_searchATT+0x3c>)
1000f1ac:	681e      	ldr	r6, [r3, #0]
1000f1ae:	428c      	cmp	r4, r1
1000f1b0:	dc10      	bgt.n	1000f1d4 <db_searchATT+0x34>
1000f1b2:	200c      	movs	r0, #12
1000f1b4:	1863      	adds	r3, r4, r1
1000f1b6:	0fda      	lsrs	r2, r3, #31
1000f1b8:	18d3      	adds	r3, r2, r3
1000f1ba:	1c02      	adds	r2, r0, #0
1000f1bc:	105b      	asrs	r3, r3, #1
1000f1be:	435a      	muls	r2, r3
1000f1c0:	18b0      	adds	r0, r6, r2
1000f1c2:	8802      	ldrh	r2, [r0, #0]
1000f1c4:	42aa      	cmp	r2, r5
1000f1c6:	d201      	bcs.n	1000f1cc <db_searchATT+0x2c>
1000f1c8:	1e59      	subs	r1, r3, #1
1000f1ca:	e7f0      	b.n	1000f1ae <db_searchATT+0xe>
1000f1cc:	42aa      	cmp	r2, r5
1000f1ce:	d902      	bls.n	1000f1d6 <db_searchATT+0x36>
1000f1d0:	1c5c      	adds	r4, r3, #1
1000f1d2:	e7ec      	b.n	1000f1ae <db_searchATT+0xe>
1000f1d4:	2000      	movs	r0, #0
1000f1d6:	bd70      	pop	{r4, r5, r6, pc}
1000f1d8:	1001d4ac 	.word	0x1001d4ac
1000f1dc:	1001d4a4 	.word	0x1001d4a4

1000f1e0 <at_ble_read_authorize_reply.part.1>:
1000f1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f1e2:	4b09      	ldr	r3, [pc, #36]	; (1000f208 <at_ble_read_authorize_reply.part.1+0x28>)
1000f1e4:	1c05      	adds	r5, r0, #0
1000f1e6:	1c08      	adds	r0, r1, #0
1000f1e8:	1c0c      	adds	r4, r1, #0
1000f1ea:	4798      	blx	r3
1000f1ec:	2800      	cmp	r0, #0
1000f1ee:	d009      	beq.n	1000f204 <at_ble_read_authorize_reply.part.1+0x24>
1000f1f0:	6882      	ldr	r2, [r0, #8]
1000f1f2:	2a00      	cmp	r2, #0
1000f1f4:	d006      	beq.n	1000f204 <at_ble_read_authorize_reply.part.1+0x24>
1000f1f6:	8883      	ldrh	r3, [r0, #4]
1000f1f8:	1c29      	adds	r1, r5, #0
1000f1fa:	9200      	str	r2, [sp, #0]
1000f1fc:	1c20      	adds	r0, r4, #0
1000f1fe:	2200      	movs	r2, #0
1000f200:	4c02      	ldr	r4, [pc, #8]	; (1000f20c <at_ble_read_authorize_reply.part.1+0x2c>)
1000f202:	47a0      	blx	r4
1000f204:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f206:	46c0      	nop			; (mov r8, r8)
1000f208:	1000f1a1 	.word	0x1000f1a1
1000f20c:	10010951 	.word	0x10010951

1000f210 <initi_gatt_server_module>:
1000f210:	2300      	movs	r3, #0
1000f212:	4a07      	ldr	r2, [pc, #28]	; (1000f230 <initi_gatt_server_module+0x20>)
1000f214:	7013      	strb	r3, [r2, #0]
1000f216:	4a07      	ldr	r2, [pc, #28]	; (1000f234 <initi_gatt_server_module+0x24>)
1000f218:	6013      	str	r3, [r2, #0]
1000f21a:	4a07      	ldr	r2, [pc, #28]	; (1000f238 <initi_gatt_server_module+0x28>)
1000f21c:	6013      	str	r3, [r2, #0]
1000f21e:	4a07      	ldr	r2, [pc, #28]	; (1000f23c <initi_gatt_server_module+0x2c>)
1000f220:	6013      	str	r3, [r2, #0]
1000f222:	4a07      	ldr	r2, [pc, #28]	; (1000f240 <initi_gatt_server_module+0x30>)
1000f224:	6013      	str	r3, [r2, #0]
1000f226:	4a07      	ldr	r2, [pc, #28]	; (1000f244 <initi_gatt_server_module+0x34>)
1000f228:	6013      	str	r3, [r2, #0]
1000f22a:	4a07      	ldr	r2, [pc, #28]	; (1000f248 <initi_gatt_server_module+0x38>)
1000f22c:	6013      	str	r3, [r2, #0]
1000f22e:	4770      	bx	lr
1000f230:	1001d4a0 	.word	0x1001d4a0
1000f234:	1001d4b0 	.word	0x1001d4b0
1000f238:	1001d4ac 	.word	0x1001d4ac
1000f23c:	1001d49c 	.word	0x1001d49c
1000f240:	1001d4a8 	.word	0x1001d4a8
1000f244:	1001d4a4 	.word	0x1001d4a4
1000f248:	1001d4b4 	.word	0x1001d4b4

1000f24c <db_init>:
1000f24c:	4b0a      	ldr	r3, [pc, #40]	; (1000f278 <db_init+0x2c>)
1000f24e:	4a0b      	ldr	r2, [pc, #44]	; (1000f27c <db_init+0x30>)
1000f250:	6018      	str	r0, [r3, #0]
1000f252:	084b      	lsrs	r3, r1, #1
1000f254:	6013      	str	r3, [r2, #0]
1000f256:	4a0a      	ldr	r2, [pc, #40]	; (1000f280 <db_init+0x34>)
1000f258:	18c3      	adds	r3, r0, r3
1000f25a:	6013      	str	r3, [r2, #0]
1000f25c:	4a09      	ldr	r2, [pc, #36]	; (1000f284 <db_init+0x38>)
1000f25e:	1841      	adds	r1, r0, r1
1000f260:	6013      	str	r3, [r2, #0]
1000f262:	2303      	movs	r3, #3
1000f264:	2200      	movs	r2, #0
1000f266:	3103      	adds	r1, #3
1000f268:	4399      	bics	r1, r3
1000f26a:	4b07      	ldr	r3, [pc, #28]	; (1000f288 <db_init+0x3c>)
1000f26c:	3904      	subs	r1, #4
1000f26e:	6019      	str	r1, [r3, #0]
1000f270:	4b06      	ldr	r3, [pc, #24]	; (1000f28c <db_init+0x40>)
1000f272:	601a      	str	r2, [r3, #0]
1000f274:	4770      	bx	lr
1000f276:	46c0      	nop			; (mov r8, r8)
1000f278:	1001d4b4 	.word	0x1001d4b4
1000f27c:	1001d4b0 	.word	0x1001d4b0
1000f280:	1001d49c 	.word	0x1001d49c
1000f284:	1001d4a8 	.word	0x1001d4a8
1000f288:	1001d4a4 	.word	0x1001d4a4
1000f28c:	1001d4ac 	.word	0x1001d4ac

1000f290 <at_ble_characteristic_value_set>:
1000f290:	b570      	push	{r4, r5, r6, lr}
1000f292:	4b0b      	ldr	r3, [pc, #44]	; (1000f2c0 <at_ble_characteristic_value_set+0x30>)
1000f294:	1c06      	adds	r6, r0, #0
1000f296:	1c0c      	adds	r4, r1, #0
1000f298:	1c15      	adds	r5, r2, #0
1000f29a:	4798      	blx	r3
1000f29c:	2800      	cmp	r0, #0
1000f29e:	d008      	beq.n	1000f2b2 <at_ble_characteristic_value_set+0x22>
1000f2a0:	6880      	ldr	r0, [r0, #8]
1000f2a2:	2800      	cmp	r0, #0
1000f2a4:	d005      	beq.n	1000f2b2 <at_ble_characteristic_value_set+0x22>
1000f2a6:	1c21      	adds	r1, r4, #0
1000f2a8:	1c2a      	adds	r2, r5, #0
1000f2aa:	4b06      	ldr	r3, [pc, #24]	; (1000f2c4 <at_ble_characteristic_value_set+0x34>)
1000f2ac:	4798      	blx	r3
1000f2ae:	2000      	movs	r0, #0
1000f2b0:	e004      	b.n	1000f2bc <at_ble_characteristic_value_set+0x2c>
1000f2b2:	1c30      	adds	r0, r6, #0
1000f2b4:	1c29      	adds	r1, r5, #0
1000f2b6:	1c22      	adds	r2, r4, #0
1000f2b8:	4b03      	ldr	r3, [pc, #12]	; (1000f2c8 <at_ble_characteristic_value_set+0x38>)
1000f2ba:	4798      	blx	r3
1000f2bc:	bd70      	pop	{r4, r5, r6, pc}
1000f2be:	46c0      	nop			; (mov r8, r8)
1000f2c0:	1000f1a1 	.word	0x1000f1a1
1000f2c4:	10018623 	.word	0x10018623
1000f2c8:	10010cc5 	.word	0x10010cc5

1000f2cc <at_ble_characteristic_value_get>:
1000f2cc:	b570      	push	{r4, r5, r6, lr}
1000f2ce:	4b0c      	ldr	r3, [pc, #48]	; (1000f300 <at_ble_characteristic_value_get+0x34>)
1000f2d0:	1c06      	adds	r6, r0, #0
1000f2d2:	1c0c      	adds	r4, r1, #0
1000f2d4:	1c15      	adds	r5, r2, #0
1000f2d6:	4798      	blx	r3
1000f2d8:	2800      	cmp	r0, #0
1000f2da:	d00b      	beq.n	1000f2f4 <at_ble_characteristic_value_get+0x28>
1000f2dc:	6883      	ldr	r3, [r0, #8]
1000f2de:	2b00      	cmp	r3, #0
1000f2e0:	d008      	beq.n	1000f2f4 <at_ble_characteristic_value_get+0x28>
1000f2e2:	8883      	ldrh	r3, [r0, #4]
1000f2e4:	802b      	strh	r3, [r5, #0]
1000f2e6:	8882      	ldrh	r2, [r0, #4]
1000f2e8:	6881      	ldr	r1, [r0, #8]
1000f2ea:	4b06      	ldr	r3, [pc, #24]	; (1000f304 <at_ble_characteristic_value_get+0x38>)
1000f2ec:	1c20      	adds	r0, r4, #0
1000f2ee:	4798      	blx	r3
1000f2f0:	2000      	movs	r0, #0
1000f2f2:	e004      	b.n	1000f2fe <at_ble_characteristic_value_get+0x32>
1000f2f4:	1c30      	adds	r0, r6, #0
1000f2f6:	1c29      	adds	r1, r5, #0
1000f2f8:	1c22      	adds	r2, r4, #0
1000f2fa:	4b03      	ldr	r3, [pc, #12]	; (1000f308 <at_ble_characteristic_value_get+0x3c>)
1000f2fc:	4798      	blx	r3
1000f2fe:	bd70      	pop	{r4, r5, r6, pc}
1000f300:	1000f1a1 	.word	0x1000f1a1
1000f304:	10018623 	.word	0x10018623
1000f308:	10010d51 	.word	0x10010d51

1000f30c <at_ble_write_authorize_reply>:
1000f30c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f30e:	b085      	sub	sp, #20
1000f310:	1c04      	adds	r4, r0, #0
1000f312:	9101      	str	r1, [sp, #4]
1000f314:	2900      	cmp	r1, #0
1000f316:	d128      	bne.n	1000f36a <at_ble_write_authorize_reply+0x5e>
1000f318:	8843      	ldrh	r3, [r0, #2]
1000f31a:	1c27      	adds	r7, r4, #0
1000f31c:	9300      	str	r3, [sp, #0]
1000f31e:	1c18      	adds	r0, r3, #0
1000f320:	4b16      	ldr	r3, [pc, #88]	; (1000f37c <at_ble_write_authorize_reply+0x70>)
1000f322:	4798      	blx	r3
1000f324:	3708      	adds	r7, #8
1000f326:	2800      	cmp	r0, #0
1000f328:	d009      	beq.n	1000f33e <at_ble_write_authorize_reply+0x32>
1000f32a:	6880      	ldr	r0, [r0, #8]
1000f32c:	2800      	cmp	r0, #0
1000f32e:	d006      	beq.n	1000f33e <at_ble_write_authorize_reply+0x32>
1000f330:	88a3      	ldrh	r3, [r4, #4]
1000f332:	88e2      	ldrh	r2, [r4, #6]
1000f334:	18c0      	adds	r0, r0, r3
1000f336:	1c39      	adds	r1, r7, #0
1000f338:	4b11      	ldr	r3, [pc, #68]	; (1000f380 <at_ble_write_authorize_reply+0x74>)
1000f33a:	4798      	blx	r3
1000f33c:	e015      	b.n	1000f36a <at_ble_write_authorize_reply+0x5e>
1000f33e:	ab02      	add	r3, sp, #8
1000f340:	1d9e      	adds	r6, r3, #6
1000f342:	2300      	movs	r3, #0
1000f344:	4d0f      	ldr	r5, [pc, #60]	; (1000f384 <at_ble_write_authorize_reply+0x78>)
1000f346:	8033      	strh	r3, [r6, #0]
1000f348:	6829      	ldr	r1, [r5, #0]
1000f34a:	1c32      	adds	r2, r6, #0
1000f34c:	4b0e      	ldr	r3, [pc, #56]	; (1000f388 <at_ble_write_authorize_reply+0x7c>)
1000f34e:	9800      	ldr	r0, [sp, #0]
1000f350:	4798      	blx	r3
1000f352:	682b      	ldr	r3, [r5, #0]
1000f354:	88a0      	ldrh	r0, [r4, #4]
1000f356:	88e2      	ldrh	r2, [r4, #6]
1000f358:	1818      	adds	r0, r3, r0
1000f35a:	1c39      	adds	r1, r7, #0
1000f35c:	4b08      	ldr	r3, [pc, #32]	; (1000f380 <at_ble_write_authorize_reply+0x74>)
1000f35e:	4798      	blx	r3
1000f360:	8860      	ldrh	r0, [r4, #2]
1000f362:	8832      	ldrh	r2, [r6, #0]
1000f364:	6829      	ldr	r1, [r5, #0]
1000f366:	4b09      	ldr	r3, [pc, #36]	; (1000f38c <at_ble_write_authorize_reply+0x80>)
1000f368:	4798      	blx	r3
1000f36a:	8860      	ldrh	r0, [r4, #2]
1000f36c:	8821      	ldrh	r1, [r4, #0]
1000f36e:	9a01      	ldr	r2, [sp, #4]
1000f370:	4b07      	ldr	r3, [pc, #28]	; (1000f390 <at_ble_write_authorize_reply+0x84>)
1000f372:	4798      	blx	r3
1000f374:	2000      	movs	r0, #0
1000f376:	b005      	add	sp, #20
1000f378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f37a:	46c0      	nop			; (mov r8, r8)
1000f37c:	1000f1a1 	.word	0x1000f1a1
1000f380:	10018623 	.word	0x10018623
1000f384:	1001b974 	.word	0x1001b974
1000f388:	1000f2cd 	.word	0x1000f2cd
1000f38c:	1000f291 	.word	0x1000f291
1000f390:	100109bd 	.word	0x100109bd

1000f394 <gatts_handle_read_req>:
1000f394:	b538      	push	{r3, r4, r5, lr}
1000f396:	1c0c      	adds	r4, r1, #0
1000f398:	4b07      	ldr	r3, [pc, #28]	; (1000f3b8 <gatts_handle_read_req+0x24>)
1000f39a:	4798      	blx	r3
1000f39c:	8865      	ldrh	r5, [r4, #2]
1000f39e:	4b07      	ldr	r3, [pc, #28]	; (1000f3bc <gatts_handle_read_req+0x28>)
1000f3a0:	1c28      	adds	r0, r5, #0
1000f3a2:	4798      	blx	r3
1000f3a4:	7883      	ldrb	r3, [r0, #2]
1000f3a6:	2026      	movs	r0, #38	; 0x26
1000f3a8:	07db      	lsls	r3, r3, #31
1000f3aa:	d404      	bmi.n	1000f3b6 <gatts_handle_read_req+0x22>
1000f3ac:	8820      	ldrh	r0, [r4, #0]
1000f3ae:	1c29      	adds	r1, r5, #0
1000f3b0:	4b03      	ldr	r3, [pc, #12]	; (1000f3c0 <gatts_handle_read_req+0x2c>)
1000f3b2:	4798      	blx	r3
1000f3b4:	203b      	movs	r0, #59	; 0x3b
1000f3b6:	bd38      	pop	{r3, r4, r5, pc}
1000f3b8:	10010901 	.word	0x10010901
1000f3bc:	1000f1a1 	.word	0x1000f1a1
1000f3c0:	1000f1e1 	.word	0x1000f1e1

1000f3c4 <gatts_handle_att_info_req>:
1000f3c4:	b538      	push	{r3, r4, r5, lr}
1000f3c6:	1c0d      	adds	r5, r1, #0
1000f3c8:	4b0a      	ldr	r3, [pc, #40]	; (1000f3f4 <gatts_handle_att_info_req+0x30>)
1000f3ca:	1c14      	adds	r4, r2, #0
1000f3cc:	4798      	blx	r3
1000f3ce:	882d      	ldrh	r5, [r5, #0]
1000f3d0:	4b09      	ldr	r3, [pc, #36]	; (1000f3f8 <gatts_handle_att_info_req+0x34>)
1000f3d2:	1c28      	adds	r0, r5, #0
1000f3d4:	4798      	blx	r3
1000f3d6:	0a22      	lsrs	r2, r4, #8
1000f3d8:	1c03      	adds	r3, r0, #0
1000f3da:	4c08      	ldr	r4, [pc, #32]	; (1000f3fc <gatts_handle_att_info_req+0x38>)
1000f3dc:	b291      	uxth	r1, r2
1000f3de:	2800      	cmp	r0, #0
1000f3e0:	d003      	beq.n	1000f3ea <gatts_handle_att_info_req+0x26>
1000f3e2:	8882      	ldrh	r2, [r0, #4]
1000f3e4:	2300      	movs	r3, #0
1000f3e6:	1c28      	adds	r0, r5, #0
1000f3e8:	e001      	b.n	1000f3ee <gatts_handle_att_info_req+0x2a>
1000f3ea:	1c28      	adds	r0, r5, #0
1000f3ec:	2201      	movs	r2, #1
1000f3ee:	47a0      	blx	r4
1000f3f0:	203b      	movs	r0, #59	; 0x3b
1000f3f2:	bd38      	pop	{r3, r4, r5, pc}
1000f3f4:	10010945 	.word	0x10010945
1000f3f8:	1000f1a1 	.word	0x1000f1a1
1000f3fc:	10010a01 	.word	0x10010a01

1000f400 <gatts_handle_write_req>:
1000f400:	b510      	push	{r4, lr}
1000f402:	1c14      	adds	r4, r2, #0
1000f404:	4b07      	ldr	r3, [pc, #28]	; (1000f424 <gatts_handle_write_req+0x24>)
1000f406:	4798      	blx	r3
1000f408:	4b07      	ldr	r3, [pc, #28]	; (1000f428 <gatts_handle_write_req+0x28>)
1000f40a:	8860      	ldrh	r0, [r4, #2]
1000f40c:	4798      	blx	r3
1000f40e:	2302      	movs	r3, #2
1000f410:	7881      	ldrb	r1, [r0, #2]
1000f412:	2022      	movs	r0, #34	; 0x22
1000f414:	4019      	ands	r1, r3
1000f416:	d103      	bne.n	1000f420 <gatts_handle_write_req+0x20>
1000f418:	1c20      	adds	r0, r4, #0
1000f41a:	4b04      	ldr	r3, [pc, #16]	; (1000f42c <gatts_handle_write_req+0x2c>)
1000f41c:	4798      	blx	r3
1000f41e:	201f      	movs	r0, #31
1000f420:	bd10      	pop	{r4, pc}
1000f422:	46c0      	nop			; (mov r8, r8)
1000f424:	1001090d 	.word	0x1001090d
1000f428:	1000f1a1 	.word	0x1000f1a1
1000f42c:	1000f30d 	.word	0x1000f30d

1000f430 <init_l2cc_task_module>:
1000f430:	220a      	movs	r2, #10
1000f432:	4b01      	ldr	r3, [pc, #4]	; (1000f438 <init_l2cc_task_module+0x8>)
1000f434:	701a      	strb	r2, [r3, #0]
1000f436:	4770      	bx	lr
1000f438:	1001b971 	.word	0x1001b971

1000f43c <l2cc_data_send_rsp_handler>:
1000f43c:	b510      	push	{r4, lr}
1000f43e:	7802      	ldrb	r2, [r0, #0]
1000f440:	700a      	strb	r2, [r1, #0]
1000f442:	7883      	ldrb	r3, [r0, #2]
1000f444:	7844      	ldrb	r4, [r0, #1]
1000f446:	021b      	lsls	r3, r3, #8
1000f448:	4323      	orrs	r3, r4
1000f44a:	804b      	strh	r3, [r1, #2]
1000f44c:	7903      	ldrb	r3, [r0, #4]
1000f44e:	78c0      	ldrb	r0, [r0, #3]
1000f450:	021b      	lsls	r3, r3, #8
1000f452:	4303      	orrs	r3, r0
1000f454:	808b      	strh	r3, [r1, #4]
1000f456:	2a00      	cmp	r2, #0
1000f458:	d103      	bne.n	1000f462 <l2cc_data_send_rsp_handler+0x26>
1000f45a:	4a02      	ldr	r2, [pc, #8]	; (1000f464 <l2cc_data_send_rsp_handler+0x28>)
1000f45c:	7813      	ldrb	r3, [r2, #0]
1000f45e:	3301      	adds	r3, #1
1000f460:	7013      	strb	r3, [r2, #0]
1000f462:	bd10      	pop	{r4, pc}
1000f464:	1001b971 	.word	0x1001b971

1000f468 <l2cc_data_received_handler>:
1000f468:	b508      	push	{r3, lr}
1000f46a:	1c03      	adds	r3, r0, #0
1000f46c:	7842      	ldrb	r2, [r0, #1]
1000f46e:	7800      	ldrb	r0, [r0, #0]
1000f470:	0212      	lsls	r2, r2, #8
1000f472:	4302      	orrs	r2, r0
1000f474:	800a      	strh	r2, [r1, #0]
1000f476:	78da      	ldrb	r2, [r3, #3]
1000f478:	7898      	ldrb	r0, [r3, #2]
1000f47a:	0212      	lsls	r2, r2, #8
1000f47c:	4302      	orrs	r2, r0
1000f47e:	804a      	strh	r2, [r1, #2]
1000f480:	795a      	ldrb	r2, [r3, #5]
1000f482:	7918      	ldrb	r0, [r3, #4]
1000f484:	0212      	lsls	r2, r2, #8
1000f486:	4302      	orrs	r2, r0
1000f488:	808a      	strh	r2, [r1, #4]
1000f48a:	1d88      	adds	r0, r1, #6
1000f48c:	1d99      	adds	r1, r3, #6
1000f48e:	4b01      	ldr	r3, [pc, #4]	; (1000f494 <l2cc_data_received_handler+0x2c>)
1000f490:	4798      	blx	r3
1000f492:	bd08      	pop	{r3, pc}
1000f494:	10018623 	.word	0x10018623

1000f498 <at_ble_authenticate>:
1000f498:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f49a:	1c0c      	adds	r4, r1, #0
1000f49c:	211f      	movs	r1, #31
1000f49e:	b08b      	sub	sp, #44	; 0x2c
1000f4a0:	9307      	str	r3, [sp, #28]
1000f4a2:	ab02      	add	r3, sp, #8
1000f4a4:	18c9      	adds	r1, r1, r3
1000f4a6:	230f      	movs	r3, #15
1000f4a8:	700b      	strb	r3, [r1, #0]
1000f4aa:	4b40      	ldr	r3, [pc, #256]	; (1000f5ac <at_ble_authenticate+0x114>)
1000f4ac:	1c05      	adds	r5, r0, #0
1000f4ae:	1c16      	adds	r6, r2, #0
1000f4b0:	4798      	blx	r3
1000f4b2:	1c07      	adds	r7, r0, #0
1000f4b4:	2001      	movs	r0, #1
1000f4b6:	2f07      	cmp	r7, #7
1000f4b8:	d875      	bhi.n	1000f5a6 <at_ble_authenticate+0x10e>
1000f4ba:	2c00      	cmp	r4, #0
1000f4bc:	d113      	bne.n	1000f4e6 <at_ble_authenticate+0x4e>
1000f4be:	2312      	movs	r3, #18
1000f4c0:	435f      	muls	r7, r3
1000f4c2:	4b3b      	ldr	r3, [pc, #236]	; (1000f5b0 <at_ble_authenticate+0x118>)
1000f4c4:	5cfb      	ldrb	r3, [r7, r3]
1000f4c6:	4283      	cmp	r3, r0
1000f4c8:	d001      	beq.n	1000f4ce <at_ble_authenticate+0x36>
1000f4ca:	20cf      	movs	r0, #207	; 0xcf
1000f4cc:	e06b      	b.n	1000f5a6 <at_ble_authenticate+0x10e>
1000f4ce:	9504      	str	r5, [sp, #16]
1000f4d0:	9400      	str	r4, [sp, #0]
1000f4d2:	9401      	str	r4, [sp, #4]
1000f4d4:	9402      	str	r4, [sp, #8]
1000f4d6:	9403      	str	r4, [sp, #12]
1000f4d8:	1c20      	adds	r0, r4, #0
1000f4da:	1c21      	adds	r1, r4, #0
1000f4dc:	1c22      	adds	r2, r4, #0
1000f4de:	1c23      	adds	r3, r4, #0
1000f4e0:	4d34      	ldr	r5, [pc, #208]	; (1000f5b4 <at_ble_authenticate+0x11c>)
1000f4e2:	47a8      	blx	r5
1000f4e4:	e05e      	b.n	1000f5a4 <at_ble_authenticate+0x10c>
1000f4e6:	7922      	ldrb	r2, [r4, #4]
1000f4e8:	2a06      	cmp	r2, #6
1000f4ea:	d9ee      	bls.n	1000f4ca <at_ble_authenticate+0x32>
1000f4ec:	7963      	ldrb	r3, [r4, #5]
1000f4ee:	2b10      	cmp	r3, #16
1000f4f0:	d8eb      	bhi.n	1000f4ca <at_ble_authenticate+0x32>
1000f4f2:	429a      	cmp	r2, r3
1000f4f4:	d8e9      	bhi.n	1000f4ca <at_ble_authenticate+0x32>
1000f4f6:	7a23      	ldrb	r3, [r4, #8]
1000f4f8:	2b04      	cmp	r3, #4
1000f4fa:	d8e6      	bhi.n	1000f4ca <at_ble_authenticate+0x32>
1000f4fc:	79a3      	ldrb	r3, [r4, #6]
1000f4fe:	2b07      	cmp	r3, #7
1000f500:	d8e3      	bhi.n	1000f4ca <at_ble_authenticate+0x32>
1000f502:	79e3      	ldrb	r3, [r4, #7]
1000f504:	2b07      	cmp	r3, #7
1000f506:	d8e0      	bhi.n	1000f4ca <at_ble_authenticate+0x32>
1000f508:	78a3      	ldrb	r3, [r4, #2]
1000f50a:	2b00      	cmp	r3, #0
1000f50c:	d006      	beq.n	1000f51c <at_ble_authenticate+0x84>
1000f50e:	2e00      	cmp	r6, #0
1000f510:	d0db      	beq.n	1000f4ca <at_ble_authenticate+0x32>
1000f512:	4829      	ldr	r0, [pc, #164]	; (1000f5b8 <at_ble_authenticate+0x120>)
1000f514:	1c31      	adds	r1, r6, #0
1000f516:	221c      	movs	r2, #28
1000f518:	4b28      	ldr	r3, [pc, #160]	; (1000f5bc <at_ble_authenticate+0x124>)
1000f51a:	4798      	blx	r3
1000f51c:	9b07      	ldr	r3, [sp, #28]
1000f51e:	2b00      	cmp	r3, #0
1000f520:	d005      	beq.n	1000f52e <at_ble_authenticate+0x96>
1000f522:	4827      	ldr	r0, [pc, #156]	; (1000f5c0 <at_ble_authenticate+0x128>)
1000f524:	1c19      	adds	r1, r3, #0
1000f526:	309a      	adds	r0, #154	; 0x9a
1000f528:	2210      	movs	r2, #16
1000f52a:	4b24      	ldr	r3, [pc, #144]	; (1000f5bc <at_ble_authenticate+0x124>)
1000f52c:	4798      	blx	r3
1000f52e:	7863      	ldrb	r3, [r4, #1]
1000f530:	78a2      	ldrb	r2, [r4, #2]
1000f532:	009b      	lsls	r3, r3, #2
1000f534:	4313      	orrs	r3, r2
1000f536:	2212      	movs	r2, #18
1000f538:	4357      	muls	r7, r2
1000f53a:	4a1d      	ldr	r2, [pc, #116]	; (1000f5b0 <at_ble_authenticate+0x118>)
1000f53c:	b2db      	uxtb	r3, r3
1000f53e:	5cba      	ldrb	r2, [r7, r2]
1000f540:	2a00      	cmp	r2, #0
1000f542:	d116      	bne.n	1000f572 <at_ble_authenticate+0xda>
1000f544:	79a0      	ldrb	r0, [r4, #6]
1000f546:	0742      	lsls	r2, r0, #29
1000f548:	d502      	bpl.n	1000f550 <at_ble_authenticate+0xb8>
1000f54a:	9a07      	ldr	r2, [sp, #28]
1000f54c:	2a00      	cmp	r2, #0
1000f54e:	d0bc      	beq.n	1000f4ca <at_ble_authenticate+0x32>
1000f550:	07c2      	lsls	r2, r0, #31
1000f552:	d501      	bpl.n	1000f558 <at_ble_authenticate+0xc0>
1000f554:	2e00      	cmp	r6, #0
1000f556:	d0b8      	beq.n	1000f4ca <at_ble_authenticate+0x32>
1000f558:	7966      	ldrb	r6, [r4, #5]
1000f55a:	7821      	ldrb	r1, [r4, #0]
1000f55c:	78e2      	ldrb	r2, [r4, #3]
1000f55e:	9600      	str	r6, [sp, #0]
1000f560:	9001      	str	r0, [sp, #4]
1000f562:	79e0      	ldrb	r0, [r4, #7]
1000f564:	9002      	str	r0, [sp, #8]
1000f566:	7a20      	ldrb	r0, [r4, #8]
1000f568:	4c16      	ldr	r4, [pc, #88]	; (1000f5c4 <at_ble_authenticate+0x12c>)
1000f56a:	9003      	str	r0, [sp, #12]
1000f56c:	1c28      	adds	r0, r5, #0
1000f56e:	47a0      	blx	r4
1000f570:	e018      	b.n	1000f5a4 <at_ble_authenticate+0x10c>
1000f572:	2a01      	cmp	r2, #1
1000f574:	d1a9      	bne.n	1000f4ca <at_ble_authenticate+0x32>
1000f576:	79e0      	ldrb	r0, [r4, #7]
1000f578:	0742      	lsls	r2, r0, #29
1000f57a:	d502      	bpl.n	1000f582 <at_ble_authenticate+0xea>
1000f57c:	9a07      	ldr	r2, [sp, #28]
1000f57e:	2a00      	cmp	r2, #0
1000f580:	d0a3      	beq.n	1000f4ca <at_ble_authenticate+0x32>
1000f582:	07c2      	lsls	r2, r0, #31
1000f584:	d501      	bpl.n	1000f58a <at_ble_authenticate+0xf2>
1000f586:	2e00      	cmp	r6, #0
1000f588:	d09f      	beq.n	1000f4ca <at_ble_authenticate+0x32>
1000f58a:	7966      	ldrb	r6, [r4, #5]
1000f58c:	7821      	ldrb	r1, [r4, #0]
1000f58e:	78e2      	ldrb	r2, [r4, #3]
1000f590:	9600      	str	r6, [sp, #0]
1000f592:	79a6      	ldrb	r6, [r4, #6]
1000f594:	9002      	str	r0, [sp, #8]
1000f596:	9601      	str	r6, [sp, #4]
1000f598:	7a20      	ldrb	r0, [r4, #8]
1000f59a:	9504      	str	r5, [sp, #16]
1000f59c:	9003      	str	r0, [sp, #12]
1000f59e:	4c05      	ldr	r4, [pc, #20]	; (1000f5b4 <at_ble_authenticate+0x11c>)
1000f5a0:	2001      	movs	r0, #1
1000f5a2:	47a0      	blx	r4
1000f5a4:	2000      	movs	r0, #0
1000f5a6:	b00b      	add	sp, #44	; 0x2c
1000f5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5aa:	46c0      	nop			; (mov r8, r8)
1000f5ac:	1000f999 	.word	0x1000f999
1000f5b0:	1001e512 	.word	0x1001e512
1000f5b4:	1000ff09 	.word	0x1000ff09
1000f5b8:	1001e620 	.word	0x1001e620
1000f5bc:	10018623 	.word	0x10018623
1000f5c0:	1001e5a2 	.word	0x1001e5a2
1000f5c4:	1000fce9 	.word	0x1000fce9

1000f5c8 <at_ble_pair_key_reply>:
1000f5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f5ca:	b085      	sub	sp, #20
1000f5cc:	1c05      	adds	r5, r0, #0
1000f5ce:	1c0c      	adds	r4, r1, #0
1000f5d0:	1c16      	adds	r6, r2, #0
1000f5d2:	2100      	movs	r1, #0
1000f5d4:	4668      	mov	r0, sp
1000f5d6:	2210      	movs	r2, #16
1000f5d8:	4b18      	ldr	r3, [pc, #96]	; (1000f63c <at_ble_pair_key_reply+0x74>)
1000f5da:	4798      	blx	r3
1000f5dc:	2101      	movs	r1, #1
1000f5de:	2e00      	cmp	r6, #0
1000f5e0:	d101      	bne.n	1000f5e6 <at_ble_pair_key_reply+0x1e>
1000f5e2:	1c31      	adds	r1, r6, #0
1000f5e4:	466e      	mov	r6, sp
1000f5e6:	2c00      	cmp	r4, #0
1000f5e8:	d116      	bne.n	1000f618 <at_ble_pair_key_reply+0x50>
1000f5ea:	2701      	movs	r7, #1
1000f5ec:	1c23      	adds	r3, r4, #0
1000f5ee:	1d70      	adds	r0, r6, #5
1000f5f0:	3e01      	subs	r6, #1
1000f5f2:	7802      	ldrb	r2, [r0, #0]
1000f5f4:	3801      	subs	r0, #1
1000f5f6:	3a30      	subs	r2, #48	; 0x30
1000f5f8:	437a      	muls	r2, r7
1000f5fa:	189b      	adds	r3, r3, r2
1000f5fc:	220a      	movs	r2, #10
1000f5fe:	4357      	muls	r7, r2
1000f600:	42b0      	cmp	r0, r6
1000f602:	d1f6      	bne.n	1000f5f2 <at_ble_pair_key_reply+0x2a>
1000f604:	466a      	mov	r2, sp
1000f606:	4668      	mov	r0, sp
1000f608:	7013      	strb	r3, [r2, #0]
1000f60a:	0a1a      	lsrs	r2, r3, #8
1000f60c:	7042      	strb	r2, [r0, #1]
1000f60e:	0c1a      	lsrs	r2, r3, #16
1000f610:	0e1b      	lsrs	r3, r3, #24
1000f612:	7082      	strb	r2, [r0, #2]
1000f614:	70c3      	strb	r3, [r0, #3]
1000f616:	e009      	b.n	1000f62c <at_ble_pair_key_reply+0x64>
1000f618:	20cf      	movs	r0, #207	; 0xcf
1000f61a:	2c01      	cmp	r4, #1
1000f61c:	d10c      	bne.n	1000f638 <at_ble_pair_key_reply+0x70>
1000f61e:	2300      	movs	r3, #0
1000f620:	4668      	mov	r0, sp
1000f622:	5cf2      	ldrb	r2, [r6, r3]
1000f624:	54c2      	strb	r2, [r0, r3]
1000f626:	3301      	adds	r3, #1
1000f628:	2b10      	cmp	r3, #16
1000f62a:	d1f9      	bne.n	1000f620 <at_ble_pair_key_reply+0x58>
1000f62c:	2004      	movs	r0, #4
1000f62e:	466a      	mov	r2, sp
1000f630:	1c2b      	adds	r3, r5, #0
1000f632:	4c03      	ldr	r4, [pc, #12]	; (1000f640 <at_ble_pair_key_reply+0x78>)
1000f634:	47a0      	blx	r4
1000f636:	2000      	movs	r0, #0
1000f638:	b005      	add	sp, #20
1000f63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f63c:	1001865f 	.word	0x1001865f
1000f640:	1000ff85 	.word	0x1000ff85

1000f644 <at_ble_send_slave_sec_request>:
1000f644:	b570      	push	{r4, r5, r6, lr}
1000f646:	4b0c      	ldr	r3, [pc, #48]	; (1000f678 <at_ble_send_slave_sec_request+0x34>)
1000f648:	1c0e      	adds	r6, r1, #0
1000f64a:	2100      	movs	r1, #0
1000f64c:	1c05      	adds	r5, r0, #0
1000f64e:	1c14      	adds	r4, r2, #0
1000f650:	4798      	blx	r3
1000f652:	2301      	movs	r3, #1
1000f654:	2807      	cmp	r0, #7
1000f656:	d80d      	bhi.n	1000f674 <at_ble_send_slave_sec_request+0x30>
1000f658:	3311      	adds	r3, #17
1000f65a:	4358      	muls	r0, r3
1000f65c:	4b07      	ldr	r3, [pc, #28]	; (1000f67c <at_ble_send_slave_sec_request+0x38>)
1000f65e:	5cc2      	ldrb	r2, [r0, r3]
1000f660:	23e0      	movs	r3, #224	; 0xe0
1000f662:	2a01      	cmp	r2, #1
1000f664:	d106      	bne.n	1000f674 <at_ble_send_slave_sec_request+0x30>
1000f666:	00b1      	lsls	r1, r6, #2
1000f668:	430c      	orrs	r4, r1
1000f66a:	4b05      	ldr	r3, [pc, #20]	; (1000f680 <at_ble_send_slave_sec_request+0x3c>)
1000f66c:	b2e1      	uxtb	r1, r4
1000f66e:	1c28      	adds	r0, r5, #0
1000f670:	4798      	blx	r3
1000f672:	2300      	movs	r3, #0
1000f674:	1c18      	adds	r0, r3, #0
1000f676:	bd70      	pop	{r4, r5, r6, pc}
1000f678:	1000f999 	.word	0x1000f999
1000f67c:	1001e512 	.word	0x1001e512
1000f680:	1000ffd5 	.word	0x1000ffd5

1000f684 <at_ble_encryption_start>:
1000f684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f686:	23cf      	movs	r3, #207	; 0xcf
1000f688:	2900      	cmp	r1, #0
1000f68a:	d02b      	beq.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f68c:	2a05      	cmp	r2, #5
1000f68e:	d829      	bhi.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f690:	2701      	movs	r7, #1
1000f692:	1c3d      	adds	r5, r7, #0
1000f694:	2433      	movs	r4, #51	; 0x33
1000f696:	4095      	lsls	r5, r2
1000f698:	4225      	tst	r5, r4
1000f69a:	d023      	beq.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f69c:	7e8c      	ldrb	r4, [r1, #26]
1000f69e:	3c07      	subs	r4, #7
1000f6a0:	2c09      	cmp	r4, #9
1000f6a2:	d81f      	bhi.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f6a4:	4b10      	ldr	r3, [pc, #64]	; (1000f6e8 <at_ble_encryption_start+0x64>)
1000f6a6:	1c0c      	adds	r4, r1, #0
1000f6a8:	2100      	movs	r1, #0
1000f6aa:	1c15      	adds	r5, r2, #0
1000f6ac:	1c06      	adds	r6, r0, #0
1000f6ae:	4798      	blx	r3
1000f6b0:	1c3b      	adds	r3, r7, #0
1000f6b2:	2807      	cmp	r0, #7
1000f6b4:	d816      	bhi.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f6b6:	2312      	movs	r3, #18
1000f6b8:	4358      	muls	r0, r3
1000f6ba:	4b0c      	ldr	r3, [pc, #48]	; (1000f6ec <at_ble_encryption_start+0x68>)
1000f6bc:	5cc7      	ldrb	r7, [r0, r3]
1000f6be:	23e0      	movs	r3, #224	; 0xe0
1000f6c0:	2f00      	cmp	r7, #0
1000f6c2:	d10f      	bne.n	1000f6e4 <at_ble_encryption_start+0x60>
1000f6c4:	1c21      	adds	r1, r4, #0
1000f6c6:	221c      	movs	r2, #28
1000f6c8:	4b09      	ldr	r3, [pc, #36]	; (1000f6f0 <at_ble_encryption_start+0x6c>)
1000f6ca:	480a      	ldr	r0, [pc, #40]	; (1000f6f4 <at_ble_encryption_start+0x70>)
1000f6cc:	4798      	blx	r3
1000f6ce:	1c23      	adds	r3, r4, #0
1000f6d0:	7ea1      	ldrb	r1, [r4, #26]
1000f6d2:	8a22      	ldrh	r2, [r4, #16]
1000f6d4:	3312      	adds	r3, #18
1000f6d6:	9100      	str	r1, [sp, #0]
1000f6d8:	9501      	str	r5, [sp, #4]
1000f6da:	1c21      	adds	r1, r4, #0
1000f6dc:	1c30      	adds	r0, r6, #0
1000f6de:	4c06      	ldr	r4, [pc, #24]	; (1000f6f8 <at_ble_encryption_start+0x74>)
1000f6e0:	47a0      	blx	r4
1000f6e2:	1c3b      	adds	r3, r7, #0
1000f6e4:	1c18      	adds	r0, r3, #0
1000f6e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f6e8:	1000f999 	.word	0x1000f999
1000f6ec:	1001e512 	.word	0x1001e512
1000f6f0:	10018623 	.word	0x10018623
1000f6f4:	1001e620 	.word	0x1001e620
1000f6f8:	10010015 	.word	0x10010015

1000f6fc <at_ble_encryption_request_reply>:
1000f6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f6fe:	24cf      	movs	r4, #207	; 0xcf
1000f700:	2b00      	cmp	r3, #0
1000f702:	d011      	beq.n	1000f728 <at_ble_encryption_request_reply+0x2c>
1000f704:	2a00      	cmp	r2, #0
1000f706:	d00a      	beq.n	1000f71e <at_ble_encryption_request_reply+0x22>
1000f708:	2905      	cmp	r1, #5
1000f70a:	d80d      	bhi.n	1000f728 <at_ble_encryption_request_reply+0x2c>
1000f70c:	2501      	movs	r5, #1
1000f70e:	2633      	movs	r6, #51	; 0x33
1000f710:	408d      	lsls	r5, r1
1000f712:	4235      	tst	r5, r6
1000f714:	d008      	beq.n	1000f728 <at_ble_encryption_request_reply+0x2c>
1000f716:	7e9d      	ldrb	r5, [r3, #26]
1000f718:	3d07      	subs	r5, #7
1000f71a:	2d09      	cmp	r5, #9
1000f71c:	d804      	bhi.n	1000f728 <at_ble_encryption_request_reply+0x2c>
1000f71e:	7e9c      	ldrb	r4, [r3, #26]
1000f720:	9400      	str	r4, [sp, #0]
1000f722:	4c02      	ldr	r4, [pc, #8]	; (1000f72c <at_ble_encryption_request_reply+0x30>)
1000f724:	47a0      	blx	r4
1000f726:	2400      	movs	r4, #0
1000f728:	1c20      	adds	r0, r4, #0
1000f72a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f72c:	100100d1 	.word	0x100100d1

1000f730 <rx_callback>:
1000f730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f732:	8883      	ldrh	r3, [r0, #4]
1000f734:	1c01      	adds	r1, r0, #0
1000f736:	9301      	str	r3, [sp, #4]
1000f738:	88c5      	ldrh	r5, [r0, #6]
1000f73a:	8806      	ldrh	r6, [r0, #0]
1000f73c:	2d00      	cmp	r5, #0
1000f73e:	d10f      	bne.n	1000f760 <rx_callback+0x30>
1000f740:	1c19      	adds	r1, r3, #0
1000f742:	1c30      	adds	r0, r6, #0
1000f744:	4b19      	ldr	r3, [pc, #100]	; (1000f7ac <rx_callback+0x7c>)
1000f746:	1c2a      	adds	r2, r5, #0
1000f748:	4798      	blx	r3
1000f74a:	1e03      	subs	r3, r0, #0
1000f74c:	d105      	bne.n	1000f75a <rx_callback+0x2a>
1000f74e:	1c30      	adds	r0, r6, #0
1000f750:	9901      	ldr	r1, [sp, #4]
1000f752:	1c1a      	adds	r2, r3, #0
1000f754:	4c16      	ldr	r4, [pc, #88]	; (1000f7b0 <rx_callback+0x80>)
1000f756:	47a0      	blx	r4
1000f758:	e027      	b.n	1000f7aa <rx_callback+0x7a>
1000f75a:	4b16      	ldr	r3, [pc, #88]	; (1000f7b4 <rx_callback+0x84>)
1000f75c:	4798      	blx	r3
1000f75e:	e024      	b.n	1000f7aa <rx_callback+0x7a>
1000f760:	4c15      	ldr	r4, [pc, #84]	; (1000f7b8 <rx_callback+0x88>)
1000f762:	4a16      	ldr	r2, [pc, #88]	; (1000f7bc <rx_callback+0x8c>)
1000f764:	6823      	ldr	r3, [r4, #0]
1000f766:	6812      	ldr	r2, [r2, #0]
1000f768:	18eb      	adds	r3, r5, r3
1000f76a:	4293      	cmp	r3, r2
1000f76c:	d901      	bls.n	1000f772 <rx_callback+0x42>
1000f76e:	2300      	movs	r3, #0
1000f770:	6023      	str	r3, [r4, #0]
1000f772:	4f13      	ldr	r7, [pc, #76]	; (1000f7c0 <rx_callback+0x90>)
1000f774:	6822      	ldr	r2, [r4, #0]
1000f776:	683b      	ldr	r3, [r7, #0]
1000f778:	3108      	adds	r1, #8
1000f77a:	1898      	adds	r0, r3, r2
1000f77c:	1c2a      	adds	r2, r5, #0
1000f77e:	4b11      	ldr	r3, [pc, #68]	; (1000f7c4 <rx_callback+0x94>)
1000f780:	4798      	blx	r3
1000f782:	683b      	ldr	r3, [r7, #0]
1000f784:	6822      	ldr	r2, [r4, #0]
1000f786:	1c30      	adds	r0, r6, #0
1000f788:	189a      	adds	r2, r3, r2
1000f78a:	9901      	ldr	r1, [sp, #4]
1000f78c:	4b07      	ldr	r3, [pc, #28]	; (1000f7ac <rx_callback+0x7c>)
1000f78e:	4798      	blx	r3
1000f790:	2800      	cmp	r0, #0
1000f792:	d1e2      	bne.n	1000f75a <rx_callback+0x2a>
1000f794:	6823      	ldr	r3, [r4, #0]
1000f796:	683a      	ldr	r2, [r7, #0]
1000f798:	1c30      	adds	r0, r6, #0
1000f79a:	18d2      	adds	r2, r2, r3
1000f79c:	9901      	ldr	r1, [sp, #4]
1000f79e:	1c2b      	adds	r3, r5, #0
1000f7a0:	4e03      	ldr	r6, [pc, #12]	; (1000f7b0 <rx_callback+0x80>)
1000f7a2:	47b0      	blx	r6
1000f7a4:	6823      	ldr	r3, [r4, #0]
1000f7a6:	18ed      	adds	r5, r5, r3
1000f7a8:	6025      	str	r5, [r4, #0]
1000f7aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f7ac:	1000e61d 	.word	0x1000e61d
1000f7b0:	1000e595 	.word	0x1000e595
1000f7b4:	1000ca81 	.word	0x1000ca81
1000f7b8:	1001e67c 	.word	0x1001e67c
1000f7bc:	1001d4bc 	.word	0x1001d4bc
1000f7c0:	1001d4b8 	.word	0x1001d4b8
1000f7c4:	10018623 	.word	0x10018623

1000f7c8 <interface_send>:
1000f7c8:	b508      	push	{r3, lr}
1000f7ca:	4b02      	ldr	r3, [pc, #8]	; (1000f7d4 <interface_send+0xc>)
1000f7cc:	4798      	blx	r3
1000f7ce:	2000      	movs	r0, #0
1000f7d0:	bd08      	pop	{r3, pc}
1000f7d2:	46c0      	nop			; (mov r8, r8)
1000f7d4:	1000c779 	.word	0x1000c779

1000f7d8 <interface_init>:
1000f7d8:	2280      	movs	r2, #128	; 0x80
1000f7da:	b510      	push	{r4, lr}
1000f7dc:	2100      	movs	r1, #0
1000f7de:	1c04      	adds	r4, r0, #0
1000f7e0:	0092      	lsls	r2, r2, #2
1000f7e2:	4b08      	ldr	r3, [pc, #32]	; (1000f804 <interface_init+0x2c>)
1000f7e4:	4808      	ldr	r0, [pc, #32]	; (1000f808 <interface_init+0x30>)
1000f7e6:	4798      	blx	r3
1000f7e8:	2200      	movs	r2, #0
1000f7ea:	4b08      	ldr	r3, [pc, #32]	; (1000f80c <interface_init+0x34>)
1000f7ec:	601a      	str	r2, [r3, #0]
1000f7ee:	4a08      	ldr	r2, [pc, #32]	; (1000f810 <interface_init+0x38>)
1000f7f0:	4b08      	ldr	r3, [pc, #32]	; (1000f814 <interface_init+0x3c>)
1000f7f2:	601a      	str	r2, [r3, #0]
1000f7f4:	4b08      	ldr	r3, [pc, #32]	; (1000f818 <interface_init+0x40>)
1000f7f6:	6922      	ldr	r2, [r4, #16]
1000f7f8:	601a      	str	r2, [r3, #0]
1000f7fa:	6962      	ldr	r2, [r4, #20]
1000f7fc:	4b07      	ldr	r3, [pc, #28]	; (1000f81c <interface_init+0x44>)
1000f7fe:	601a      	str	r2, [r3, #0]
1000f800:	bd10      	pop	{r4, pc}
1000f802:	46c0      	nop			; (mov r8, r8)
1000f804:	1001865f 	.word	0x1001865f
1000f808:	1001e880 	.word	0x1001e880
1000f80c:	1001e67c 	.word	0x1001e67c
1000f810:	1001e680 	.word	0x1001e680
1000f814:	1001b974 	.word	0x1001b974
1000f818:	1001d4b8 	.word	0x1001d4b8
1000f81c:	1001d4bc 	.word	0x1001d4bc

1000f820 <platform_cmd_cmpl_signal>:
1000f820:	2201      	movs	r2, #1
1000f822:	4b01      	ldr	r3, [pc, #4]	; (1000f828 <platform_cmd_cmpl_signal+0x8>)
1000f824:	601a      	str	r2, [r3, #0]
1000f826:	4770      	bx	lr
1000f828:	1001d4c0 	.word	0x1001d4c0

1000f82c <platform_cmd_cmpl_wait>:
1000f82c:	b510      	push	{r4, lr}
1000f82e:	1c04      	adds	r4, r0, #0
1000f830:	4b07      	ldr	r3, [pc, #28]	; (1000f850 <platform_cmd_cmpl_wait+0x24>)
1000f832:	681a      	ldr	r2, [r3, #0]
1000f834:	2a01      	cmp	r2, #1
1000f836:	d003      	beq.n	1000f840 <platform_cmd_cmpl_wait+0x14>
1000f838:	4b06      	ldr	r3, [pc, #24]	; (1000f854 <platform_cmd_cmpl_wait+0x28>)
1000f83a:	2000      	movs	r0, #0
1000f83c:	4798      	blx	r3
1000f83e:	e7f7      	b.n	1000f830 <platform_cmd_cmpl_wait+0x4>
1000f840:	6819      	ldr	r1, [r3, #0]
1000f842:	2901      	cmp	r1, #1
1000f844:	d102      	bne.n	1000f84c <platform_cmd_cmpl_wait+0x20>
1000f846:	2200      	movs	r2, #0
1000f848:	601a      	str	r2, [r3, #0]
1000f84a:	e000      	b.n	1000f84e <platform_cmd_cmpl_wait+0x22>
1000f84c:	7022      	strb	r2, [r4, #0]
1000f84e:	bd10      	pop	{r4, pc}
1000f850:	1001d4c0 	.word	0x1001d4c0
1000f854:	1000c809 	.word	0x1000c809

1000f858 <start_timer>:
1000f858:	4770      	bx	lr

1000f85a <stop_timer>:
1000f85a:	4770      	bx	lr

1000f85c <dbg_le_set_bd_addr_req_handler>:
1000f85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f85e:	466b      	mov	r3, sp
1000f860:	1dde      	adds	r6, r3, #7
1000f862:	2300      	movs	r3, #0
1000f864:	7033      	strb	r3, [r6, #0]
1000f866:	230f      	movs	r3, #15
1000f868:	4c13      	ldr	r4, [pc, #76]	; (1000f8b8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f86a:	2703      	movs	r7, #3
1000f86c:	7023      	strb	r3, [r4, #0]
1000f86e:	2300      	movs	r3, #0
1000f870:	70e3      	strb	r3, [r4, #3]
1000f872:	4b12      	ldr	r3, [pc, #72]	; (1000f8bc <dbg_le_set_bd_addr_req_handler+0x60>)
1000f874:	1c01      	adds	r1, r0, #0
1000f876:	881a      	ldrh	r2, [r3, #0]
1000f878:	881b      	ldrh	r3, [r3, #0]
1000f87a:	7122      	strb	r2, [r4, #4]
1000f87c:	0a1b      	lsrs	r3, r3, #8
1000f87e:	2206      	movs	r2, #6
1000f880:	7163      	strb	r3, [r4, #5]
1000f882:	480f      	ldr	r0, [pc, #60]	; (1000f8c0 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f884:	4b0f      	ldr	r3, [pc, #60]	; (1000f8c4 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f886:	7067      	strb	r7, [r4, #1]
1000f888:	70a7      	strb	r7, [r4, #2]
1000f88a:	4798      	blx	r3
1000f88c:	4d0e      	ldr	r5, [pc, #56]	; (1000f8c8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f88e:	4b0f      	ldr	r3, [pc, #60]	; (1000f8cc <dbg_le_set_bd_addr_req_handler+0x70>)
1000f890:	210e      	movs	r1, #14
1000f892:	802b      	strh	r3, [r5, #0]
1000f894:	2306      	movs	r3, #6
1000f896:	71a3      	strb	r3, [r4, #6]
1000f898:	2300      	movs	r3, #0
1000f89a:	1c20      	adds	r0, r4, #0
1000f89c:	71e3      	strb	r3, [r4, #7]
1000f89e:	4b0c      	ldr	r3, [pc, #48]	; (1000f8d0 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f8a0:	80af      	strh	r7, [r5, #4]
1000f8a2:	4798      	blx	r3
1000f8a4:	1c30      	adds	r0, r6, #0
1000f8a6:	4b0b      	ldr	r3, [pc, #44]	; (1000f8d4 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f8a8:	4798      	blx	r3
1000f8aa:	7833      	ldrb	r3, [r6, #0]
1000f8ac:	20e2      	movs	r0, #226	; 0xe2
1000f8ae:	2b00      	cmp	r3, #0
1000f8b0:	d101      	bne.n	1000f8b6 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f8b2:	68ab      	ldr	r3, [r5, #8]
1000f8b4:	7818      	ldrb	r0, [r3, #0]
1000f8b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f8b8:	1001e880 	.word	0x1001e880
1000f8bc:	1001e510 	.word	0x1001e510
1000f8c0:	1001e888 	.word	0x1001e888
1000f8c4:	10018623 	.word	0x10018623
1000f8c8:	1001e504 	.word	0x1001e504
1000f8cc:	00000329 	.word	0x00000329
1000f8d0:	1000f7c9 	.word	0x1000f7c9
1000f8d4:	1000f82d 	.word	0x1000f82d

1000f8d8 <gapc_get_dev_info_cfm.constprop.1>:
1000f8d8:	b538      	push	{r3, r4, r5, lr}
1000f8da:	230b      	movs	r3, #11
1000f8dc:	4c27      	ldr	r4, [pc, #156]	; (1000f97c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f8de:	7023      	strb	r3, [r4, #0]
1000f8e0:	3303      	adds	r3, #3
1000f8e2:	7063      	strb	r3, [r4, #1]
1000f8e4:	3329      	adds	r3, #41	; 0x29
1000f8e6:	70a3      	strb	r3, [r4, #2]
1000f8e8:	4b25      	ldr	r3, [pc, #148]	; (1000f980 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f8ea:	70e1      	strb	r1, [r4, #3]
1000f8ec:	881a      	ldrh	r2, [r3, #0]
1000f8ee:	881b      	ldrh	r3, [r3, #0]
1000f8f0:	7122      	strb	r2, [r4, #4]
1000f8f2:	0a1b      	lsrs	r3, r3, #8
1000f8f4:	7163      	strb	r3, [r4, #5]
1000f8f6:	2300      	movs	r3, #0
1000f8f8:	7220      	strb	r0, [r4, #8]
1000f8fa:	7263      	strb	r3, [r4, #9]
1000f8fc:	2801      	cmp	r0, #1
1000f8fe:	d02b      	beq.n	1000f958 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f900:	4298      	cmp	r0, r3
1000f902:	d01b      	beq.n	1000f93c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f904:	2802      	cmp	r0, #2
1000f906:	d12f      	bne.n	1000f968 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f908:	4b1e      	ldr	r3, [pc, #120]	; (1000f984 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f90a:	2112      	movs	r1, #18
1000f90c:	1c1a      	adds	r2, r3, #0
1000f90e:	32ce      	adds	r2, #206	; 0xce
1000f910:	8812      	ldrh	r2, [r2, #0]
1000f912:	72a2      	strb	r2, [r4, #10]
1000f914:	0a12      	lsrs	r2, r2, #8
1000f916:	72e2      	strb	r2, [r4, #11]
1000f918:	1c1a      	adds	r2, r3, #0
1000f91a:	32d0      	adds	r2, #208	; 0xd0
1000f91c:	8812      	ldrh	r2, [r2, #0]
1000f91e:	7322      	strb	r2, [r4, #12]
1000f920:	0a12      	lsrs	r2, r2, #8
1000f922:	7362      	strb	r2, [r4, #13]
1000f924:	1c1a      	adds	r2, r3, #0
1000f926:	32d2      	adds	r2, #210	; 0xd2
1000f928:	8812      	ldrh	r2, [r2, #0]
1000f92a:	33d4      	adds	r3, #212	; 0xd4
1000f92c:	73a2      	strb	r2, [r4, #14]
1000f92e:	0a12      	lsrs	r2, r2, #8
1000f930:	73e2      	strb	r2, [r4, #15]
1000f932:	881b      	ldrh	r3, [r3, #0]
1000f934:	7423      	strb	r3, [r4, #16]
1000f936:	0a1b      	lsrs	r3, r3, #8
1000f938:	7463      	strb	r3, [r4, #17]
1000f93a:	e016      	b.n	1000f96a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f93c:	4b11      	ldr	r3, [pc, #68]	; (1000f984 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f93e:	4912      	ldr	r1, [pc, #72]	; (1000f988 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f940:	33aa      	adds	r3, #170	; 0xaa
1000f942:	881d      	ldrh	r5, [r3, #0]
1000f944:	4811      	ldr	r0, [pc, #68]	; (1000f98c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f946:	0a2b      	lsrs	r3, r5, #8
1000f948:	72a5      	strb	r5, [r4, #10]
1000f94a:	72e3      	strb	r3, [r4, #11]
1000f94c:	1c2a      	adds	r2, r5, #0
1000f94e:	4b10      	ldr	r3, [pc, #64]	; (1000f990 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f950:	350c      	adds	r5, #12
1000f952:	4798      	blx	r3
1000f954:	b2a9      	uxth	r1, r5
1000f956:	e008      	b.n	1000f96a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f958:	4b0a      	ldr	r3, [pc, #40]	; (1000f984 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f95a:	210c      	movs	r1, #12
1000f95c:	33cc      	adds	r3, #204	; 0xcc
1000f95e:	881b      	ldrh	r3, [r3, #0]
1000f960:	72a3      	strb	r3, [r4, #10]
1000f962:	0a1b      	lsrs	r3, r3, #8
1000f964:	72e3      	strb	r3, [r4, #11]
1000f966:	e000      	b.n	1000f96a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f968:	210a      	movs	r1, #10
1000f96a:	1c0b      	adds	r3, r1, #0
1000f96c:	3b08      	subs	r3, #8
1000f96e:	71a3      	strb	r3, [r4, #6]
1000f970:	121b      	asrs	r3, r3, #8
1000f972:	71e3      	strb	r3, [r4, #7]
1000f974:	1c20      	adds	r0, r4, #0
1000f976:	4b07      	ldr	r3, [pc, #28]	; (1000f994 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f978:	4798      	blx	r3
1000f97a:	bd38      	pop	{r3, r4, r5, pc}
1000f97c:	1001e880 	.word	0x1001e880
1000f980:	1001e510 	.word	0x1001e510
1000f984:	1001e5a2 	.word	0x1001e5a2
1000f988:	1001e64e 	.word	0x1001e64e
1000f98c:	1001e88c 	.word	0x1001e88c
1000f990:	10018623 	.word	0x10018623
1000f994:	1000f7c9 	.word	0x1000f7c9

1000f998 <check_ConnData_idx_role>:
1000f998:	4b0c      	ldr	r3, [pc, #48]	; (1000f9cc <check_ConnData_idx_role+0x34>)
1000f99a:	b570      	push	{r4, r5, r6, lr}
1000f99c:	1c04      	adds	r4, r0, #0
1000f99e:	2008      	movs	r0, #8
1000f9a0:	429c      	cmp	r4, r3
1000f9a2:	d011      	beq.n	1000f9c8 <check_ConnData_idx_role+0x30>
1000f9a4:	2300      	movs	r3, #0
1000f9a6:	2212      	movs	r2, #18
1000f9a8:	435a      	muls	r2, r3
1000f9aa:	4d09      	ldr	r5, [pc, #36]	; (1000f9d0 <check_ConnData_idx_role+0x38>)
1000f9ac:	b2d8      	uxtb	r0, r3
1000f9ae:	1956      	adds	r6, r2, r5
1000f9b0:	8976      	ldrh	r6, [r6, #10]
1000f9b2:	42a6      	cmp	r6, r4
1000f9b4:	d104      	bne.n	1000f9c0 <check_ConnData_idx_role+0x28>
1000f9b6:	2900      	cmp	r1, #0
1000f9b8:	d006      	beq.n	1000f9c8 <check_ConnData_idx_role+0x30>
1000f9ba:	5d53      	ldrb	r3, [r2, r5]
1000f9bc:	700b      	strb	r3, [r1, #0]
1000f9be:	e003      	b.n	1000f9c8 <check_ConnData_idx_role+0x30>
1000f9c0:	3301      	adds	r3, #1
1000f9c2:	2b08      	cmp	r3, #8
1000f9c4:	d1ef      	bne.n	1000f9a6 <check_ConnData_idx_role+0xe>
1000f9c6:	1c18      	adds	r0, r3, #0
1000f9c8:	bd70      	pop	{r4, r5, r6, pc}
1000f9ca:	46c0      	nop			; (mov r8, r8)
1000f9cc:	0000ffff 	.word	0x0000ffff
1000f9d0:	1001e512 	.word	0x1001e512

1000f9d4 <check_ConnData_emptyEntry>:
1000f9d4:	2300      	movs	r3, #0
1000f9d6:	2212      	movs	r2, #18
1000f9d8:	435a      	muls	r2, r3
1000f9da:	4906      	ldr	r1, [pc, #24]	; (1000f9f4 <check_ConnData_emptyEntry+0x20>)
1000f9dc:	b2d8      	uxtb	r0, r3
1000f9de:	1852      	adds	r2, r2, r1
1000f9e0:	8951      	ldrh	r1, [r2, #10]
1000f9e2:	4a05      	ldr	r2, [pc, #20]	; (1000f9f8 <check_ConnData_emptyEntry+0x24>)
1000f9e4:	4291      	cmp	r1, r2
1000f9e6:	d003      	beq.n	1000f9f0 <check_ConnData_emptyEntry+0x1c>
1000f9e8:	3301      	adds	r3, #1
1000f9ea:	2b08      	cmp	r3, #8
1000f9ec:	d1f3      	bne.n	1000f9d6 <check_ConnData_emptyEntry+0x2>
1000f9ee:	1c18      	adds	r0, r3, #0
1000f9f0:	4770      	bx	lr
1000f9f2:	46c0      	nop			; (mov r8, r8)
1000f9f4:	1001e512 	.word	0x1001e512
1000f9f8:	0000ffff 	.word	0x0000ffff

1000f9fc <gapc_cmp_evt>:
1000f9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9fe:	780b      	ldrb	r3, [r1, #0]
1000fa00:	1c05      	adds	r5, r0, #0
1000fa02:	1e58      	subs	r0, r3, #1
1000fa04:	784e      	ldrb	r6, [r1, #1]
1000fa06:	280f      	cmp	r0, #15
1000fa08:	d85a      	bhi.n	1000fac0 <gapc_cmp_evt+0xc4>
1000fa0a:	1c14      	adds	r4, r2, #0
1000fa0c:	f005 fc72 	bl	100152f4 <__gnu_thumb1_case_uqi>
1000fa10:	5858440a 	.word	0x5858440a
1000fa14:	4b584444 	.word	0x4b584444
1000fa18:	0825122d 	.word	0x0825122d
1000fa1c:	3e395858 	.word	0x3e395858
1000fa20:	203b      	movs	r0, #59	; 0x3b
1000fa22:	e04e      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa24:	203b      	movs	r0, #59	; 0x3b
1000fa26:	2e00      	cmp	r6, #0
1000fa28:	d04b      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa2a:	0a2d      	lsrs	r5, r5, #8
1000fa2c:	8015      	strh	r5, [r2, #0]
1000fa2e:	7096      	strb	r6, [r2, #2]
1000fa30:	3835      	subs	r0, #53	; 0x35
1000fa32:	e046      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa34:	466b      	mov	r3, sp
1000fa36:	1ddf      	adds	r7, r3, #7
1000fa38:	2301      	movs	r3, #1
1000fa3a:	0a2d      	lsrs	r5, r5, #8
1000fa3c:	703b      	strb	r3, [r7, #0]
1000fa3e:	1c28      	adds	r0, r5, #0
1000fa40:	1c39      	adds	r1, r7, #0
1000fa42:	4b20      	ldr	r3, [pc, #128]	; (1000fac4 <gapc_cmp_evt+0xc8>)
1000fa44:	4798      	blx	r3
1000fa46:	2807      	cmp	r0, #7
1000fa48:	d803      	bhi.n	1000fa52 <gapc_cmp_evt+0x56>
1000fa4a:	783b      	ldrb	r3, [r7, #0]
1000fa4c:	203b      	movs	r0, #59	; 0x3b
1000fa4e:	2b00      	cmp	r3, #0
1000fa50:	d037      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa52:	8065      	strh	r5, [r4, #2]
1000fa54:	7126      	strb	r6, [r4, #4]
1000fa56:	2009      	movs	r0, #9
1000fa58:	e033      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa5a:	203b      	movs	r0, #59	; 0x3b
1000fa5c:	2e00      	cmp	r6, #0
1000fa5e:	d030      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa60:	0a2d      	lsrs	r5, r5, #8
1000fa62:	8015      	strh	r5, [r2, #0]
1000fa64:	7096      	strb	r6, [r2, #2]
1000fa66:	382d      	subs	r0, #45	; 0x2d
1000fa68:	e02b      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa6a:	203b      	movs	r0, #59	; 0x3b
1000fa6c:	2e00      	cmp	r6, #0
1000fa6e:	d028      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa70:	2300      	movs	r3, #0
1000fa72:	0a2d      	lsrs	r5, r5, #8
1000fa74:	8015      	strh	r5, [r2, #0]
1000fa76:	7096      	strb	r6, [r2, #2]
1000fa78:	8093      	strh	r3, [r2, #4]
1000fa7a:	80d3      	strh	r3, [r2, #6]
1000fa7c:	8113      	strh	r3, [r2, #8]
1000fa7e:	3834      	subs	r0, #52	; 0x34
1000fa80:	e01f      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa82:	203b      	movs	r0, #59	; 0x3b
1000fa84:	2e00      	cmp	r6, #0
1000fa86:	d01c      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa88:	7216      	strb	r6, [r2, #8]
1000fa8a:	e003      	b.n	1000fa94 <gapc_cmp_evt+0x98>
1000fa8c:	203b      	movs	r0, #59	; 0x3b
1000fa8e:	2e00      	cmp	r6, #0
1000fa90:	d017      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa92:	7116      	strb	r6, [r2, #4]
1000fa94:	3812      	subs	r0, #18
1000fa96:	e014      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa98:	203b      	movs	r0, #59	; 0x3b
1000fa9a:	2e00      	cmp	r6, #0
1000fa9c:	d011      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fa9e:	7093      	strb	r3, [r2, #2]
1000faa0:	70d6      	strb	r6, [r2, #3]
1000faa2:	382a      	subs	r0, #42	; 0x2a
1000faa4:	e00d      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000faa6:	203b      	movs	r0, #59	; 0x3b
1000faa8:	2e00      	cmp	r6, #0
1000faaa:	d00a      	beq.n	1000fac2 <gapc_cmp_evt+0xc6>
1000faac:	0a2d      	lsrs	r5, r5, #8
1000faae:	7016      	strb	r6, [r2, #0]
1000fab0:	8055      	strh	r5, [r2, #2]
1000fab2:	1d10      	adds	r0, r2, #4
1000fab4:	2100      	movs	r1, #0
1000fab6:	2205      	movs	r2, #5
1000fab8:	4b03      	ldr	r3, [pc, #12]	; (1000fac8 <gapc_cmp_evt+0xcc>)
1000faba:	4798      	blx	r3
1000fabc:	2012      	movs	r0, #18
1000fabe:	e000      	b.n	1000fac2 <gapc_cmp_evt+0xc6>
1000fac0:	2000      	movs	r0, #0
1000fac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fac4:	1000f999 	.word	0x1000f999
1000fac8:	1001865f 	.word	0x1001865f

1000facc <gapc_connection_cfm_handler>:
1000facc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000face:	b085      	sub	sp, #20
1000fad0:	1c1d      	adds	r5, r3, #0
1000fad2:	ab0a      	add	r3, sp, #40	; 0x28
1000fad4:	781b      	ldrb	r3, [r3, #0]
1000fad6:	9201      	str	r2, [sp, #4]
1000fad8:	9302      	str	r3, [sp, #8]
1000fada:	ab0b      	add	r3, sp, #44	; 0x2c
1000fadc:	781b      	ldrb	r3, [r3, #0]
1000fade:	1c07      	adds	r7, r0, #0
1000fae0:	9303      	str	r3, [sp, #12]
1000fae2:	ab0c      	add	r3, sp, #48	; 0x30
1000fae4:	881a      	ldrh	r2, [r3, #0]
1000fae6:	2302      	movs	r3, #2
1000fae8:	1c0e      	adds	r6, r1, #0
1000faea:	4c23      	ldr	r4, [pc, #140]	; (1000fb78 <gapc_connection_cfm_handler+0xac>)
1000faec:	1c39      	adds	r1, r7, #0
1000faee:	7023      	strb	r3, [r4, #0]
1000faf0:	330c      	adds	r3, #12
1000faf2:	7063      	strb	r3, [r4, #1]
1000faf4:	70a3      	strb	r3, [r4, #2]
1000faf6:	4b21      	ldr	r3, [pc, #132]	; (1000fb7c <gapc_connection_cfm_handler+0xb0>)
1000faf8:	70e2      	strb	r2, [r4, #3]
1000fafa:	881a      	ldrh	r2, [r3, #0]
1000fafc:	881b      	ldrh	r3, [r3, #0]
1000fafe:	7122      	strb	r2, [r4, #4]
1000fb00:	0a1b      	lsrs	r3, r3, #8
1000fb02:	4f1f      	ldr	r7, [pc, #124]	; (1000fb80 <gapc_connection_cfm_handler+0xb4>)
1000fb04:	2210      	movs	r2, #16
1000fb06:	481f      	ldr	r0, [pc, #124]	; (1000fb84 <gapc_connection_cfm_handler+0xb8>)
1000fb08:	7163      	strb	r3, [r4, #5]
1000fb0a:	47b8      	blx	r7
1000fb0c:	0a33      	lsrs	r3, r6, #8
1000fb0e:	7626      	strb	r6, [r4, #24]
1000fb10:	7663      	strb	r3, [r4, #25]
1000fb12:	9901      	ldr	r1, [sp, #4]
1000fb14:	0c33      	lsrs	r3, r6, #16
1000fb16:	2210      	movs	r2, #16
1000fb18:	0e36      	lsrs	r6, r6, #24
1000fb1a:	481b      	ldr	r0, [pc, #108]	; (1000fb88 <gapc_connection_cfm_handler+0xbc>)
1000fb1c:	76a3      	strb	r3, [r4, #26]
1000fb1e:	76e6      	strb	r6, [r4, #27]
1000fb20:	47b8      	blx	r7
1000fb22:	1c23      	adds	r3, r4, #0
1000fb24:	332c      	adds	r3, #44	; 0x2c
1000fb26:	701d      	strb	r5, [r3, #0]
1000fb28:	1c23      	adds	r3, r4, #0
1000fb2a:	0a2a      	lsrs	r2, r5, #8
1000fb2c:	332d      	adds	r3, #45	; 0x2d
1000fb2e:	701a      	strb	r2, [r3, #0]
1000fb30:	1c23      	adds	r3, r4, #0
1000fb32:	0c2a      	lsrs	r2, r5, #16
1000fb34:	332e      	adds	r3, #46	; 0x2e
1000fb36:	701a      	strb	r2, [r3, #0]
1000fb38:	1c23      	adds	r3, r4, #0
1000fb3a:	0e2d      	lsrs	r5, r5, #24
1000fb3c:	332f      	adds	r3, #47	; 0x2f
1000fb3e:	466a      	mov	r2, sp
1000fb40:	701d      	strb	r5, [r3, #0]
1000fb42:	1c23      	adds	r3, r4, #0
1000fb44:	7a12      	ldrb	r2, [r2, #8]
1000fb46:	3330      	adds	r3, #48	; 0x30
1000fb48:	701a      	strb	r2, [r3, #0]
1000fb4a:	1c23      	adds	r3, r4, #0
1000fb4c:	2500      	movs	r5, #0
1000fb4e:	3331      	adds	r3, #49	; 0x31
1000fb50:	466a      	mov	r2, sp
1000fb52:	701d      	strb	r5, [r3, #0]
1000fb54:	1c23      	adds	r3, r4, #0
1000fb56:	7b12      	ldrb	r2, [r2, #12]
1000fb58:	3332      	adds	r3, #50	; 0x32
1000fb5a:	701a      	strb	r2, [r3, #0]
1000fb5c:	1c23      	adds	r3, r4, #0
1000fb5e:	3333      	adds	r3, #51	; 0x33
1000fb60:	701d      	strb	r5, [r3, #0]
1000fb62:	232c      	movs	r3, #44	; 0x2c
1000fb64:	1c20      	adds	r0, r4, #0
1000fb66:	71a3      	strb	r3, [r4, #6]
1000fb68:	2134      	movs	r1, #52	; 0x34
1000fb6a:	4b08      	ldr	r3, [pc, #32]	; (1000fb8c <gapc_connection_cfm_handler+0xc0>)
1000fb6c:	71e5      	strb	r5, [r4, #7]
1000fb6e:	4798      	blx	r3
1000fb70:	1c28      	adds	r0, r5, #0
1000fb72:	b005      	add	sp, #20
1000fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb76:	46c0      	nop			; (mov r8, r8)
1000fb78:	1001e880 	.word	0x1001e880
1000fb7c:	1001e510 	.word	0x1001e510
1000fb80:	10018623 	.word	0x10018623
1000fb84:	1001e888 	.word	0x1001e888
1000fb88:	1001e89c 	.word	0x1001e89c
1000fb8c:	1000f7c9 	.word	0x1000f7c9

1000fb90 <gapc_con_req_ind>:
1000fb90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb92:	7845      	ldrb	r5, [r0, #1]
1000fb94:	7803      	ldrb	r3, [r0, #0]
1000fb96:	4c30      	ldr	r4, [pc, #192]	; (1000fc58 <gapc_con_req_ind+0xc8>)
1000fb98:	022d      	lsls	r5, r5, #8
1000fb9a:	431d      	orrs	r5, r3
1000fb9c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000fb9e:	78c3      	ldrb	r3, [r0, #3]
1000fba0:	7882      	ldrb	r2, [r0, #2]
1000fba2:	b08b      	sub	sp, #44	; 0x2c
1000fba4:	021b      	lsls	r3, r3, #8
1000fba6:	431a      	orrs	r2, r3
1000fba8:	466b      	mov	r3, sp
1000fbaa:	9205      	str	r2, [sp, #20]
1000fbac:	8a9b      	ldrh	r3, [r3, #20]
1000fbae:	2120      	movs	r1, #32
1000fbb0:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000fbb2:	7943      	ldrb	r3, [r0, #5]
1000fbb4:	7902      	ldrb	r2, [r0, #4]
1000fbb6:	021b      	lsls	r3, r3, #8
1000fbb8:	431a      	orrs	r2, r3
1000fbba:	466b      	mov	r3, sp
1000fbbc:	9206      	str	r2, [sp, #24]
1000fbbe:	8b1b      	ldrh	r3, [r3, #24]
1000fbc0:	1c06      	adds	r6, r0, #0
1000fbc2:	8623      	strh	r3, [r4, #48]	; 0x30
1000fbc4:	79c3      	ldrb	r3, [r0, #7]
1000fbc6:	7982      	ldrb	r2, [r0, #6]
1000fbc8:	021b      	lsls	r3, r3, #8
1000fbca:	431a      	orrs	r2, r3
1000fbcc:	466b      	mov	r3, sp
1000fbce:	9207      	str	r2, [sp, #28]
1000fbd0:	466a      	mov	r2, sp
1000fbd2:	8b9b      	ldrh	r3, [r3, #28]
1000fbd4:	1852      	adds	r2, r2, r1
1000fbd6:	8663      	strh	r3, [r4, #50]	; 0x32
1000fbd8:	7a43      	ldrb	r3, [r0, #9]
1000fbda:	1c01      	adds	r1, r0, #0
1000fbdc:	9308      	str	r3, [sp, #32]
1000fbde:	1c23      	adds	r3, r4, #0
1000fbe0:	7812      	ldrb	r2, [r2, #0]
1000fbe2:	3377      	adds	r3, #119	; 0x77
1000fbe4:	3478      	adds	r4, #120	; 0x78
1000fbe6:	701a      	strb	r2, [r3, #0]
1000fbe8:	310a      	adds	r1, #10
1000fbea:	2206      	movs	r2, #6
1000fbec:	4b1b      	ldr	r3, [pc, #108]	; (1000fc5c <gapc_con_req_ind+0xcc>)
1000fbee:	1c20      	adds	r0, r4, #0
1000fbf0:	4798      	blx	r3
1000fbf2:	7c33      	ldrb	r3, [r6, #16]
1000fbf4:	9309      	str	r3, [sp, #36]	; 0x24
1000fbf6:	4b1a      	ldr	r3, [pc, #104]	; (1000fc60 <gapc_con_req_ind+0xd0>)
1000fbf8:	4798      	blx	r3
1000fbfa:	4e1a      	ldr	r6, [pc, #104]	; (1000fc64 <gapc_con_req_ind+0xd4>)
1000fbfc:	1e07      	subs	r7, r0, #0
1000fbfe:	2f07      	cmp	r7, #7
1000fc00:	d81b      	bhi.n	1000fc3a <gapc_con_req_ind+0xaa>
1000fc02:	2312      	movs	r3, #18
1000fc04:	4343      	muls	r3, r0
1000fc06:	18f0      	adds	r0, r6, r3
1000fc08:	8145      	strh	r5, [r0, #10]
1000fc0a:	4669      	mov	r1, sp
1000fc0c:	2524      	movs	r5, #36	; 0x24
1000fc0e:	1949      	adds	r1, r1, r5
1000fc10:	7809      	ldrb	r1, [r1, #0]
1000fc12:	2206      	movs	r2, #6
1000fc14:	54f1      	strb	r1, [r6, r3]
1000fc16:	2120      	movs	r1, #32
1000fc18:	466b      	mov	r3, sp
1000fc1a:	185b      	adds	r3, r3, r1
1000fc1c:	781b      	ldrb	r3, [r3, #0]
1000fc1e:	1c21      	adds	r1, r4, #0
1000fc20:	7043      	strb	r3, [r0, #1]
1000fc22:	466b      	mov	r3, sp
1000fc24:	8a9b      	ldrh	r3, [r3, #20]
1000fc26:	3002      	adds	r0, #2
1000fc28:	8143      	strh	r3, [r0, #10]
1000fc2a:	466b      	mov	r3, sp
1000fc2c:	8b1b      	ldrh	r3, [r3, #24]
1000fc2e:	8183      	strh	r3, [r0, #12]
1000fc30:	466b      	mov	r3, sp
1000fc32:	8b9b      	ldrh	r3, [r3, #28]
1000fc34:	81c3      	strh	r3, [r0, #14]
1000fc36:	4b09      	ldr	r3, [pc, #36]	; (1000fc5c <gapc_con_req_ind+0xcc>)
1000fc38:	4798      	blx	r3
1000fc3a:	2112      	movs	r1, #18
1000fc3c:	2300      	movs	r3, #0
1000fc3e:	434f      	muls	r7, r1
1000fc40:	9300      	str	r3, [sp, #0]
1000fc42:	9301      	str	r3, [sp, #4]
1000fc44:	19f6      	adds	r6, r6, r7
1000fc46:	8971      	ldrh	r1, [r6, #10]
1000fc48:	4a07      	ldr	r2, [pc, #28]	; (1000fc68 <gapc_con_req_ind+0xd8>)
1000fc4a:	9102      	str	r1, [sp, #8]
1000fc4c:	1c10      	adds	r0, r2, #0
1000fc4e:	1c19      	adds	r1, r3, #0
1000fc50:	4c06      	ldr	r4, [pc, #24]	; (1000fc6c <gapc_con_req_ind+0xdc>)
1000fc52:	47a0      	blx	r4
1000fc54:	b00b      	add	sp, #44	; 0x2c
1000fc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc58:	1001e5a2 	.word	0x1001e5a2
1000fc5c:	10018623 	.word	0x10018623
1000fc60:	1000f9d5 	.word	0x1000f9d5
1000fc64:	1001e512 	.word	0x1001e512
1000fc68:	1001d4c4 	.word	0x1001d4c4
1000fc6c:	1000facd 	.word	0x1000facd

1000fc70 <gapc_disconnect_cmd_handler>:
1000fc70:	2204      	movs	r2, #4
1000fc72:	b510      	push	{r4, lr}
1000fc74:	4b0c      	ldr	r3, [pc, #48]	; (1000fca8 <gapc_disconnect_cmd_handler+0x38>)
1000fc76:	2400      	movs	r4, #0
1000fc78:	701a      	strb	r2, [r3, #0]
1000fc7a:	320a      	adds	r2, #10
1000fc7c:	705a      	strb	r2, [r3, #1]
1000fc7e:	709a      	strb	r2, [r3, #2]
1000fc80:	4a0a      	ldr	r2, [pc, #40]	; (1000fcac <gapc_disconnect_cmd_handler+0x3c>)
1000fc82:	70d9      	strb	r1, [r3, #3]
1000fc84:	8811      	ldrh	r1, [r2, #0]
1000fc86:	8812      	ldrh	r2, [r2, #0]
1000fc88:	7119      	strb	r1, [r3, #4]
1000fc8a:	0a12      	lsrs	r2, r2, #8
1000fc8c:	715a      	strb	r2, [r3, #5]
1000fc8e:	2201      	movs	r2, #1
1000fc90:	721a      	strb	r2, [r3, #8]
1000fc92:	1892      	adds	r2, r2, r2
1000fc94:	7258      	strb	r0, [r3, #9]
1000fc96:	719a      	strb	r2, [r3, #6]
1000fc98:	71dc      	strb	r4, [r3, #7]
1000fc9a:	1c18      	adds	r0, r3, #0
1000fc9c:	210a      	movs	r1, #10
1000fc9e:	4b04      	ldr	r3, [pc, #16]	; (1000fcb0 <gapc_disconnect_cmd_handler+0x40>)
1000fca0:	4798      	blx	r3
1000fca2:	1c20      	adds	r0, r4, #0
1000fca4:	bd10      	pop	{r4, pc}
1000fca6:	46c0      	nop			; (mov r8, r8)
1000fca8:	1001e880 	.word	0x1001e880
1000fcac:	1001e510 	.word	0x1001e510
1000fcb0:	1000f7c9 	.word	0x1000f7c9

1000fcb4 <gapc_disconnect_ind>:
1000fcb4:	1c02      	adds	r2, r0, #0
1000fcb6:	b508      	push	{r3, lr}
1000fcb8:	7843      	ldrb	r3, [r0, #1]
1000fcba:	7800      	ldrb	r0, [r0, #0]
1000fcbc:	021b      	lsls	r3, r3, #8
1000fcbe:	4318      	orrs	r0, r3
1000fcc0:	8008      	strh	r0, [r1, #0]
1000fcc2:	7893      	ldrb	r3, [r2, #2]
1000fcc4:	708b      	strb	r3, [r1, #2]
1000fcc6:	2100      	movs	r1, #0
1000fcc8:	4b05      	ldr	r3, [pc, #20]	; (1000fce0 <gapc_disconnect_ind+0x2c>)
1000fcca:	4798      	blx	r3
1000fccc:	2807      	cmp	r0, #7
1000fcce:	d806      	bhi.n	1000fcde <gapc_disconnect_ind+0x2a>
1000fcd0:	2312      	movs	r3, #18
1000fcd2:	4358      	muls	r0, r3
1000fcd4:	4b03      	ldr	r3, [pc, #12]	; (1000fce4 <gapc_disconnect_ind+0x30>)
1000fcd6:	1818      	adds	r0, r3, r0
1000fcd8:	2301      	movs	r3, #1
1000fcda:	425b      	negs	r3, r3
1000fcdc:	8143      	strh	r3, [r0, #10]
1000fcde:	bd08      	pop	{r3, pc}
1000fce0:	1000f999 	.word	0x1000f999
1000fce4:	1001e512 	.word	0x1001e512

1000fce8 <gapc_bond_cmd_handler>:
1000fce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fcea:	9300      	str	r3, [sp, #0]
1000fcec:	2312      	movs	r3, #18
1000fcee:	1c04      	adds	r4, r0, #0
1000fcf0:	a808      	add	r0, sp, #32
1000fcf2:	7807      	ldrb	r7, [r0, #0]
1000fcf4:	a809      	add	r0, sp, #36	; 0x24
1000fcf6:	7806      	ldrb	r6, [r0, #0]
1000fcf8:	a80a      	add	r0, sp, #40	; 0x28
1000fcfa:	7805      	ldrb	r5, [r0, #0]
1000fcfc:	a80b      	add	r0, sp, #44	; 0x2c
1000fcfe:	7800      	ldrb	r0, [r0, #0]
1000fd00:	9001      	str	r0, [sp, #4]
1000fd02:	4810      	ldr	r0, [pc, #64]	; (1000fd44 <gapc_bond_cmd_handler+0x5c>)
1000fd04:	7003      	strb	r3, [r0, #0]
1000fd06:	230e      	movs	r3, #14
1000fd08:	70c4      	strb	r4, [r0, #3]
1000fd0a:	4c0f      	ldr	r4, [pc, #60]	; (1000fd48 <gapc_bond_cmd_handler+0x60>)
1000fd0c:	7043      	strb	r3, [r0, #1]
1000fd0e:	7083      	strb	r3, [r0, #2]
1000fd10:	8823      	ldrh	r3, [r4, #0]
1000fd12:	8824      	ldrh	r4, [r4, #0]
1000fd14:	7103      	strb	r3, [r0, #4]
1000fd16:	466b      	mov	r3, sp
1000fd18:	781b      	ldrb	r3, [r3, #0]
1000fd1a:	0a24      	lsrs	r4, r4, #8
1000fd1c:	72c3      	strb	r3, [r0, #11]
1000fd1e:	466b      	mov	r3, sp
1000fd20:	791b      	ldrb	r3, [r3, #4]
1000fd22:	7144      	strb	r4, [r0, #5]
1000fd24:	73c3      	strb	r3, [r0, #15]
1000fd26:	2308      	movs	r3, #8
1000fd28:	7183      	strb	r3, [r0, #6]
1000fd2a:	2300      	movs	r3, #0
1000fd2c:	240a      	movs	r4, #10
1000fd2e:	7241      	strb	r1, [r0, #9]
1000fd30:	71c3      	strb	r3, [r0, #7]
1000fd32:	2110      	movs	r1, #16
1000fd34:	4b05      	ldr	r3, [pc, #20]	; (1000fd4c <gapc_bond_cmd_handler+0x64>)
1000fd36:	7307      	strb	r7, [r0, #12]
1000fd38:	7346      	strb	r6, [r0, #13]
1000fd3a:	7385      	strb	r5, [r0, #14]
1000fd3c:	7204      	strb	r4, [r0, #8]
1000fd3e:	7282      	strb	r2, [r0, #10]
1000fd40:	4798      	blx	r3
1000fd42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fd44:	1001e880 	.word	0x1001e880
1000fd48:	1001e510 	.word	0x1001e510
1000fd4c:	1000f7c9 	.word	0x1000f7c9

1000fd50 <gapc_bond_ind>:
1000fd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fd52:	780e      	ldrb	r6, [r1, #0]
1000fd54:	1c03      	adds	r3, r0, #0
1000fd56:	1eb0      	subs	r0, r6, #2
1000fd58:	2805      	cmp	r0, #5
1000fd5a:	d85d      	bhi.n	1000fe18 <gapc_bond_ind+0xc8>
1000fd5c:	1c15      	adds	r5, r2, #0
1000fd5e:	1c0c      	adds	r4, r1, #0
1000fd60:	f005 fac8 	bl	100152f4 <__gnu_thumb1_case_uqi>
1000fd64:	2f5a030d 	.word	0x2f5a030d
1000fd68:	4740      	.short	0x4740
1000fd6a:	2009      	movs	r0, #9
1000fd6c:	2a00      	cmp	r2, #0
1000fd6e:	d054      	beq.n	1000fe1a <gapc_bond_ind+0xca>
1000fd70:	0a1b      	lsrs	r3, r3, #8
1000fd72:	8053      	strh	r3, [r2, #2]
1000fd74:	788b      	ldrb	r3, [r1, #2]
1000fd76:	4829      	ldr	r0, [pc, #164]	; (1000fe1c <gapc_bond_ind+0xcc>)
1000fd78:	7113      	strb	r3, [r2, #4]
1000fd7a:	2100      	movs	r1, #0
1000fd7c:	e01c      	b.n	1000fdb8 <gapc_bond_ind+0x68>
1000fd7e:	2009      	movs	r0, #9
1000fd80:	2a00      	cmp	r2, #0
1000fd82:	d04a      	beq.n	1000fe1a <gapc_bond_ind+0xca>
1000fd84:	4c25      	ldr	r4, [pc, #148]	; (1000fe1c <gapc_bond_ind+0xcc>)
1000fd86:	0a1b      	lsrs	r3, r3, #8
1000fd88:	8053      	strh	r3, [r2, #2]
1000fd8a:	788b      	ldrb	r3, [r1, #2]
1000fd8c:	2700      	movs	r7, #0
1000fd8e:	1c10      	adds	r0, r2, #0
1000fd90:	1c21      	adds	r1, r4, #0
1000fd92:	7013      	strb	r3, [r2, #0]
1000fd94:	4e22      	ldr	r6, [pc, #136]	; (1000fe20 <gapc_bond_ind+0xd0>)
1000fd96:	7117      	strb	r7, [r2, #4]
1000fd98:	312e      	adds	r1, #46	; 0x2e
1000fd9a:	2217      	movs	r2, #23
1000fd9c:	3032      	adds	r0, #50	; 0x32
1000fd9e:	47b0      	blx	r6
1000fda0:	1c28      	adds	r0, r5, #0
1000fda2:	1c21      	adds	r1, r4, #0
1000fda4:	2210      	movs	r2, #16
1000fda6:	311e      	adds	r1, #30
1000fda8:	3022      	adds	r0, #34	; 0x22
1000fdaa:	47b0      	blx	r6
1000fdac:	1ca1      	adds	r1, r4, #2
1000fdae:	1da8      	adds	r0, r5, #6
1000fdb0:	221c      	movs	r2, #28
1000fdb2:	47b0      	blx	r6
1000fdb4:	1c20      	adds	r0, r4, #0
1000fdb6:	1c39      	adds	r1, r7, #0
1000fdb8:	2246      	movs	r2, #70	; 0x46
1000fdba:	4b1a      	ldr	r3, [pc, #104]	; (1000fe24 <gapc_bond_ind+0xd4>)
1000fdbc:	4798      	blx	r3
1000fdbe:	2009      	movs	r0, #9
1000fdc0:	e02b      	b.n	1000fe1a <gapc_bond_ind+0xca>
1000fdc2:	4d16      	ldr	r5, [pc, #88]	; (1000fe1c <gapc_bond_ind+0xcc>)
1000fdc4:	3102      	adds	r1, #2
1000fdc6:	1c28      	adds	r0, r5, #0
1000fdc8:	2210      	movs	r2, #16
1000fdca:	4e15      	ldr	r6, [pc, #84]	; (1000fe20 <gapc_bond_ind+0xd0>)
1000fdcc:	302e      	adds	r0, #46	; 0x2e
1000fdce:	47b0      	blx	r6
1000fdd0:	1c28      	adds	r0, r5, #0
1000fdd2:	1c21      	adds	r1, r4, #0
1000fdd4:	303f      	adds	r0, #63	; 0x3f
1000fdd6:	3112      	adds	r1, #18
1000fdd8:	2206      	movs	r2, #6
1000fdda:	47b0      	blx	r6
1000fddc:	7e23      	ldrb	r3, [r4, #24]
1000fdde:	353e      	adds	r5, #62	; 0x3e
1000fde0:	702b      	strb	r3, [r5, #0]
1000fde2:	e019      	b.n	1000fe18 <gapc_bond_ind+0xc8>
1000fde4:	480d      	ldr	r0, [pc, #52]	; (1000fe1c <gapc_bond_ind+0xcc>)
1000fde6:	3102      	adds	r1, #2
1000fde8:	2210      	movs	r2, #16
1000fdea:	4b0d      	ldr	r3, [pc, #52]	; (1000fe20 <gapc_bond_ind+0xd0>)
1000fdec:	301e      	adds	r0, #30
1000fdee:	4798      	blx	r3
1000fdf0:	e012      	b.n	1000fe18 <gapc_bond_ind+0xc8>
1000fdf2:	4d0a      	ldr	r5, [pc, #40]	; (1000fe1c <gapc_bond_ind+0xcc>)
1000fdf4:	3102      	adds	r1, #2
1000fdf6:	2210      	movs	r2, #16
1000fdf8:	4e09      	ldr	r6, [pc, #36]	; (1000fe20 <gapc_bond_ind+0xd0>)
1000fdfa:	1ca8      	adds	r0, r5, #2
1000fdfc:	47b0      	blx	r6
1000fdfe:	1c28      	adds	r0, r5, #0
1000fe00:	1c21      	adds	r1, r4, #0
1000fe02:	7ce3      	ldrb	r3, [r4, #19]
1000fe04:	7ca2      	ldrb	r2, [r4, #18]
1000fe06:	021b      	lsls	r3, r3, #8
1000fe08:	4313      	orrs	r3, r2
1000fe0a:	3014      	adds	r0, #20
1000fe0c:	3114      	adds	r1, #20
1000fe0e:	2208      	movs	r2, #8
1000fe10:	826b      	strh	r3, [r5, #18]
1000fe12:	47b0      	blx	r6
1000fe14:	7f23      	ldrb	r3, [r4, #28]
1000fe16:	772b      	strb	r3, [r5, #28]
1000fe18:	2000      	movs	r0, #0
1000fe1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fe1c:	1001d4f4 	.word	0x1001d4f4
1000fe20:	10018623 	.word	0x10018623
1000fe24:	1001865f 	.word	0x1001865f

1000fe28 <gapc_bond_req_ind>:
1000fe28:	b570      	push	{r4, r5, r6, lr}
1000fe2a:	780c      	ldrb	r4, [r1, #0]
1000fe2c:	1c03      	adds	r3, r0, #0
1000fe2e:	7849      	ldrb	r1, [r1, #1]
1000fe30:	2c07      	cmp	r4, #7
1000fe32:	d85c      	bhi.n	1000feee <gapc_bond_req_ind+0xc6>
1000fe34:	1c20      	adds	r0, r4, #0
1000fe36:	f005 fa5d 	bl	100152f4 <__gnu_thumb1_case_uqi>
1000fe3a:	5a04      	.short	0x5a04
1000fe3c:	5a0b5a5a 	.word	0x5a0b5a5a
1000fe40:	1f1f      	.short	0x1f1f
1000fe42:	200a      	movs	r0, #10
1000fe44:	2a00      	cmp	r2, #0
1000fe46:	d053      	beq.n	1000fef0 <gapc_bond_req_ind+0xc8>
1000fe48:	0a1b      	lsrs	r3, r3, #8
1000fe4a:	8013      	strh	r3, [r2, #0]
1000fe4c:	7091      	strb	r1, [r2, #2]
1000fe4e:	e04f      	b.n	1000fef0 <gapc_bond_req_ind+0xc8>
1000fe50:	2a00      	cmp	r2, #0
1000fe52:	d00b      	beq.n	1000fe6c <gapc_bond_req_ind+0x44>
1000fe54:	0a1b      	lsrs	r3, r3, #8
1000fe56:	8013      	strh	r3, [r2, #0]
1000fe58:	2900      	cmp	r1, #0
1000fe5a:	d102      	bne.n	1000fe62 <gapc_bond_req_ind+0x3a>
1000fe5c:	2301      	movs	r3, #1
1000fe5e:	7093      	strb	r3, [r2, #2]
1000fe60:	e004      	b.n	1000fe6c <gapc_bond_req_ind+0x44>
1000fe62:	2300      	movs	r3, #0
1000fe64:	7093      	strb	r3, [r2, #2]
1000fe66:	2902      	cmp	r1, #2
1000fe68:	d102      	bne.n	1000fe70 <gapc_bond_req_ind+0x48>
1000fe6a:	70d3      	strb	r3, [r2, #3]
1000fe6c:	200c      	movs	r0, #12
1000fe6e:	e03f      	b.n	1000fef0 <gapc_bond_req_ind+0xc8>
1000fe70:	2901      	cmp	r1, #1
1000fe72:	d1fb      	bne.n	1000fe6c <gapc_bond_req_ind+0x44>
1000fe74:	70d1      	strb	r1, [r2, #3]
1000fe76:	e7f9      	b.n	1000fe6c <gapc_bond_req_ind+0x44>
1000fe78:	2214      	movs	r2, #20
1000fe7a:	481e      	ldr	r0, [pc, #120]	; (1000fef4 <gapc_bond_req_ind+0xcc>)
1000fe7c:	0a1b      	lsrs	r3, r3, #8
1000fe7e:	70c3      	strb	r3, [r0, #3]
1000fe80:	4b1d      	ldr	r3, [pc, #116]	; (1000fef8 <gapc_bond_req_ind+0xd0>)
1000fe82:	7002      	strb	r2, [r0, #0]
1000fe84:	3a06      	subs	r2, #6
1000fe86:	7042      	strb	r2, [r0, #1]
1000fe88:	7082      	strb	r2, [r0, #2]
1000fe8a:	881a      	ldrh	r2, [r3, #0]
1000fe8c:	881b      	ldrh	r3, [r3, #0]
1000fe8e:	4e1b      	ldr	r6, [pc, #108]	; (1000fefc <gapc_bond_req_ind+0xd4>)
1000fe90:	0a1b      	lsrs	r3, r3, #8
1000fe92:	7143      	strb	r3, [r0, #5]
1000fe94:	2301      	movs	r3, #1
1000fe96:	7102      	strb	r2, [r0, #4]
1000fe98:	7204      	strb	r4, [r0, #8]
1000fe9a:	7243      	strb	r3, [r0, #9]
1000fe9c:	1c05      	adds	r5, r0, #0
1000fe9e:	1c31      	adds	r1, r6, #0
1000fea0:	300a      	adds	r0, #10
1000fea2:	2c07      	cmp	r4, #7
1000fea4:	d116      	bne.n	1000fed4 <gapc_bond_req_ind+0xac>
1000fea6:	317e      	adds	r1, #126	; 0x7e
1000fea8:	2210      	movs	r2, #16
1000feaa:	4c15      	ldr	r4, [pc, #84]	; (1000ff00 <gapc_bond_req_ind+0xd8>)
1000feac:	47a0      	blx	r4
1000feae:	1c33      	adds	r3, r6, #0
1000feb0:	1c31      	adds	r1, r6, #0
1000feb2:	1c28      	adds	r0, r5, #0
1000feb4:	338e      	adds	r3, #142	; 0x8e
1000feb6:	881b      	ldrh	r3, [r3, #0]
1000feb8:	3190      	adds	r1, #144	; 0x90
1000feba:	76ab      	strb	r3, [r5, #26]
1000febc:	2208      	movs	r2, #8
1000febe:	0a1b      	lsrs	r3, r3, #8
1000fec0:	301c      	adds	r0, #28
1000fec2:	76eb      	strb	r3, [r5, #27]
1000fec4:	47a0      	blx	r4
1000fec6:	1c31      	adds	r1, r6, #0
1000fec8:	3198      	adds	r1, #152	; 0x98
1000feca:	780a      	ldrb	r2, [r1, #0]
1000fecc:	1d6b      	adds	r3, r5, #5
1000fece:	77da      	strb	r2, [r3, #31]
1000fed0:	2125      	movs	r1, #37	; 0x25
1000fed2:	e004      	b.n	1000fede <gapc_bond_req_ind+0xb6>
1000fed4:	319a      	adds	r1, #154	; 0x9a
1000fed6:	2210      	movs	r2, #16
1000fed8:	4b09      	ldr	r3, [pc, #36]	; (1000ff00 <gapc_bond_req_ind+0xd8>)
1000feda:	4798      	blx	r3
1000fedc:	211a      	movs	r1, #26
1000fede:	1c0b      	adds	r3, r1, #0
1000fee0:	2400      	movs	r4, #0
1000fee2:	3b08      	subs	r3, #8
1000fee4:	71ab      	strb	r3, [r5, #6]
1000fee6:	1c28      	adds	r0, r5, #0
1000fee8:	4b06      	ldr	r3, [pc, #24]	; (1000ff04 <gapc_bond_req_ind+0xdc>)
1000feea:	71ec      	strb	r4, [r5, #7]
1000feec:	4798      	blx	r3
1000feee:	2000      	movs	r0, #0
1000fef0:	bd70      	pop	{r4, r5, r6, pc}
1000fef2:	46c0      	nop			; (mov r8, r8)
1000fef4:	1001e880 	.word	0x1001e880
1000fef8:	1001e510 	.word	0x1001e510
1000fefc:	1001e5a2 	.word	0x1001e5a2
1000ff00:	10018623 	.word	0x10018623
1000ff04:	1000f7c9 	.word	0x1000f7c9

1000ff08 <gapc_bond_cfm_handler_pair_resp>:
1000ff08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff0a:	b085      	sub	sp, #20
1000ff0c:	1c07      	adds	r7, r0, #0
1000ff0e:	a80a      	add	r0, sp, #40	; 0x28
1000ff10:	7806      	ldrb	r6, [r0, #0]
1000ff12:	a80b      	add	r0, sp, #44	; 0x2c
1000ff14:	7805      	ldrb	r5, [r0, #0]
1000ff16:	a80c      	add	r0, sp, #48	; 0x30
1000ff18:	7800      	ldrb	r0, [r0, #0]
1000ff1a:	2414      	movs	r4, #20
1000ff1c:	9002      	str	r0, [sp, #8]
1000ff1e:	a80d      	add	r0, sp, #52	; 0x34
1000ff20:	7800      	ldrb	r0, [r0, #0]
1000ff22:	9301      	str	r3, [sp, #4]
1000ff24:	9003      	str	r0, [sp, #12]
1000ff26:	a80e      	add	r0, sp, #56	; 0x38
1000ff28:	8800      	ldrh	r0, [r0, #0]
1000ff2a:	4684      	mov	ip, r0
1000ff2c:	4812      	ldr	r0, [pc, #72]	; (1000ff78 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000ff2e:	7004      	strb	r4, [r0, #0]
1000ff30:	3c06      	subs	r4, #6
1000ff32:	7044      	strb	r4, [r0, #1]
1000ff34:	7084      	strb	r4, [r0, #2]
1000ff36:	4664      	mov	r4, ip
1000ff38:	70c4      	strb	r4, [r0, #3]
1000ff3a:	4c10      	ldr	r4, [pc, #64]	; (1000ff7c <gapc_bond_cfm_handler_pair_resp+0x74>)
1000ff3c:	7247      	strb	r7, [r0, #9]
1000ff3e:	8823      	ldrh	r3, [r4, #0]
1000ff40:	8824      	ldrh	r4, [r4, #0]
1000ff42:	7103      	strb	r3, [r0, #4]
1000ff44:	466b      	mov	r3, sp
1000ff46:	791b      	ldrb	r3, [r3, #4]
1000ff48:	0a24      	lsrs	r4, r4, #8
1000ff4a:	7303      	strb	r3, [r0, #12]
1000ff4c:	466b      	mov	r3, sp
1000ff4e:	7a1b      	ldrb	r3, [r3, #8]
1000ff50:	7144      	strb	r4, [r0, #5]
1000ff52:	73c3      	strb	r3, [r0, #15]
1000ff54:	466b      	mov	r3, sp
1000ff56:	7b1b      	ldrb	r3, [r3, #12]
1000ff58:	2401      	movs	r4, #1
1000ff5a:	7403      	strb	r3, [r0, #16]
1000ff5c:	2309      	movs	r3, #9
1000ff5e:	7183      	strb	r3, [r0, #6]
1000ff60:	2300      	movs	r3, #0
1000ff62:	7204      	strb	r4, [r0, #8]
1000ff64:	7281      	strb	r1, [r0, #10]
1000ff66:	72c2      	strb	r2, [r0, #11]
1000ff68:	7346      	strb	r6, [r0, #13]
1000ff6a:	7385      	strb	r5, [r0, #14]
1000ff6c:	71c3      	strb	r3, [r0, #7]
1000ff6e:	2111      	movs	r1, #17
1000ff70:	4b03      	ldr	r3, [pc, #12]	; (1000ff80 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000ff72:	4798      	blx	r3
1000ff74:	b005      	add	sp, #20
1000ff76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff78:	1001e880 	.word	0x1001e880
1000ff7c:	1001e510 	.word	0x1001e510
1000ff80:	1000f7c9 	.word	0x1000f7c9

1000ff84 <gapc_bond_cfm_handler_key_exch>:
1000ff84:	b538      	push	{r3, r4, r5, lr}
1000ff86:	2514      	movs	r5, #20
1000ff88:	4c0d      	ldr	r4, [pc, #52]	; (1000ffc0 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000ff8a:	70e3      	strb	r3, [r4, #3]
1000ff8c:	4b0d      	ldr	r3, [pc, #52]	; (1000ffc4 <gapc_bond_cfm_handler_key_exch+0x40>)
1000ff8e:	7025      	strb	r5, [r4, #0]
1000ff90:	3d06      	subs	r5, #6
1000ff92:	7065      	strb	r5, [r4, #1]
1000ff94:	70a5      	strb	r5, [r4, #2]
1000ff96:	881d      	ldrh	r5, [r3, #0]
1000ff98:	881b      	ldrh	r3, [r3, #0]
1000ff9a:	7220      	strb	r0, [r4, #8]
1000ff9c:	0a1b      	lsrs	r3, r3, #8
1000ff9e:	7163      	strb	r3, [r4, #5]
1000ffa0:	7261      	strb	r1, [r4, #9]
1000ffa2:	4b09      	ldr	r3, [pc, #36]	; (1000ffc8 <gapc_bond_cfm_handler_key_exch+0x44>)
1000ffa4:	1c11      	adds	r1, r2, #0
1000ffa6:	4809      	ldr	r0, [pc, #36]	; (1000ffcc <gapc_bond_cfm_handler_key_exch+0x48>)
1000ffa8:	2210      	movs	r2, #16
1000ffaa:	7125      	strb	r5, [r4, #4]
1000ffac:	4798      	blx	r3
1000ffae:	2312      	movs	r3, #18
1000ffb0:	71a3      	strb	r3, [r4, #6]
1000ffb2:	2300      	movs	r3, #0
1000ffb4:	1c20      	adds	r0, r4, #0
1000ffb6:	71e3      	strb	r3, [r4, #7]
1000ffb8:	211a      	movs	r1, #26
1000ffba:	4b05      	ldr	r3, [pc, #20]	; (1000ffd0 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ffbc:	4798      	blx	r3
1000ffbe:	bd38      	pop	{r3, r4, r5, pc}
1000ffc0:	1001e880 	.word	0x1001e880
1000ffc4:	1001e510 	.word	0x1001e510
1000ffc8:	10018623 	.word	0x10018623
1000ffcc:	1001e88a 	.word	0x1001e88a
1000ffd0:	1000f7c9 	.word	0x1000f7c9

1000ffd4 <gapc_security_cmd_handler>:
1000ffd4:	221a      	movs	r2, #26
1000ffd6:	b508      	push	{r3, lr}
1000ffd8:	4b0b      	ldr	r3, [pc, #44]	; (10010008 <gapc_security_cmd_handler+0x34>)
1000ffda:	701a      	strb	r2, [r3, #0]
1000ffdc:	3a0c      	subs	r2, #12
1000ffde:	705a      	strb	r2, [r3, #1]
1000ffe0:	709a      	strb	r2, [r3, #2]
1000ffe2:	4a0a      	ldr	r2, [pc, #40]	; (1001000c <gapc_security_cmd_handler+0x38>)
1000ffe4:	70d8      	strb	r0, [r3, #3]
1000ffe6:	8810      	ldrh	r0, [r2, #0]
1000ffe8:	8812      	ldrh	r2, [r2, #0]
1000ffea:	7118      	strb	r0, [r3, #4]
1000ffec:	0a12      	lsrs	r2, r2, #8
1000ffee:	715a      	strb	r2, [r3, #5]
1000fff0:	220c      	movs	r2, #12
1000fff2:	721a      	strb	r2, [r3, #8]
1000fff4:	3a0a      	subs	r2, #10
1000fff6:	719a      	strb	r2, [r3, #6]
1000fff8:	2200      	movs	r2, #0
1000fffa:	7259      	strb	r1, [r3, #9]
1000fffc:	71da      	strb	r2, [r3, #7]
1000fffe:	1c18      	adds	r0, r3, #0
10010000:	210a      	movs	r1, #10
10010002:	4b03      	ldr	r3, [pc, #12]	; (10010010 <gapc_security_cmd_handler+0x3c>)
10010004:	4798      	blx	r3
10010006:	bd08      	pop	{r3, pc}
10010008:	1001e880 	.word	0x1001e880
1001000c:	1001e510 	.word	0x1001e510
10010010:	1000f7c9 	.word	0x1000f7c9

10010014 <gapc_encrypt_cmd_handler>:
10010014:	b5f0      	push	{r4, r5, r6, r7, lr}
10010016:	2500      	movs	r5, #0
10010018:	b089      	sub	sp, #36	; 0x24
1001001a:	9306      	str	r3, [sp, #24]
1001001c:	ab0e      	add	r3, sp, #56	; 0x38
1001001e:	781b      	ldrb	r3, [r3, #0]
10010020:	1c17      	adds	r7, r2, #0
10010022:	9307      	str	r3, [sp, #28]
10010024:	ab0f      	add	r3, sp, #60	; 0x3c
10010026:	781b      	ldrb	r3, [r3, #0]
10010028:	4a19      	ldr	r2, [pc, #100]	; (10010090 <gapc_encrypt_cmd_handler+0x7c>)
1001002a:	1c06      	adds	r6, r0, #0
1001002c:	9105      	str	r1, [sp, #20]
1001002e:	9300      	str	r3, [sp, #0]
10010030:	9002      	str	r0, [sp, #8]
10010032:	1c29      	adds	r1, r5, #0
10010034:	1c2b      	adds	r3, r5, #0
10010036:	9501      	str	r5, [sp, #4]
10010038:	1c10      	adds	r0, r2, #0
1001003a:	4c16      	ldr	r4, [pc, #88]	; (10010094 <gapc_encrypt_cmd_handler+0x80>)
1001003c:	47a0      	blx	r4
1001003e:	2316      	movs	r3, #22
10010040:	4c15      	ldr	r4, [pc, #84]	; (10010098 <gapc_encrypt_cmd_handler+0x84>)
10010042:	9905      	ldr	r1, [sp, #20]
10010044:	7023      	strb	r3, [r4, #0]
10010046:	3b08      	subs	r3, #8
10010048:	7063      	strb	r3, [r4, #1]
1001004a:	70a3      	strb	r3, [r4, #2]
1001004c:	4b13      	ldr	r3, [pc, #76]	; (1001009c <gapc_encrypt_cmd_handler+0x88>)
1001004e:	70e6      	strb	r6, [r4, #3]
10010050:	881a      	ldrh	r2, [r3, #0]
10010052:	881b      	ldrh	r3, [r3, #0]
10010054:	7122      	strb	r2, [r4, #4]
10010056:	0a1b      	lsrs	r3, r3, #8
10010058:	7163      	strb	r3, [r4, #5]
1001005a:	230b      	movs	r3, #11
1001005c:	4e10      	ldr	r6, [pc, #64]	; (100100a0 <gapc_encrypt_cmd_handler+0x8c>)
1001005e:	2210      	movs	r2, #16
10010060:	4810      	ldr	r0, [pc, #64]	; (100100a4 <gapc_encrypt_cmd_handler+0x90>)
10010062:	7223      	strb	r3, [r4, #8]
10010064:	7265      	strb	r5, [r4, #9]
10010066:	47b0      	blx	r6
10010068:	0a3b      	lsrs	r3, r7, #8
1001006a:	9906      	ldr	r1, [sp, #24]
1001006c:	2208      	movs	r2, #8
1001006e:	480e      	ldr	r0, [pc, #56]	; (100100a8 <gapc_encrypt_cmd_handler+0x94>)
10010070:	76e3      	strb	r3, [r4, #27]
10010072:	76a7      	strb	r7, [r4, #26]
10010074:	47b0      	blx	r6
10010076:	466a      	mov	r2, sp
10010078:	7f12      	ldrb	r2, [r2, #28]
1001007a:	1d63      	adds	r3, r4, #5
1001007c:	77da      	strb	r2, [r3, #31]
1001007e:	231d      	movs	r3, #29
10010080:	1c20      	adds	r0, r4, #0
10010082:	71a3      	strb	r3, [r4, #6]
10010084:	2125      	movs	r1, #37	; 0x25
10010086:	4b09      	ldr	r3, [pc, #36]	; (100100ac <gapc_encrypt_cmd_handler+0x98>)
10010088:	71e5      	strb	r5, [r4, #7]
1001008a:	4798      	blx	r3
1001008c:	b009      	add	sp, #36	; 0x24
1001008e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010090:	1001d4d4 	.word	0x1001d4d4
10010094:	1000facd 	.word	0x1000facd
10010098:	1001e880 	.word	0x1001e880
1001009c:	1001e510 	.word	0x1001e510
100100a0:	10018623 	.word	0x10018623
100100a4:	1001e88a 	.word	0x1001e88a
100100a8:	1001e89c 	.word	0x1001e89c
100100ac:	1000f7c9 	.word	0x1000f7c9

100100b0 <gapc_encrypt_req_ind>:
100100b0:	b508      	push	{r3, lr}
100100b2:	0a00      	lsrs	r0, r0, #8
100100b4:	8010      	strh	r0, [r2, #0]
100100b6:	784b      	ldrb	r3, [r1, #1]
100100b8:	7808      	ldrb	r0, [r1, #0]
100100ba:	021b      	lsls	r3, r3, #8
100100bc:	4303      	orrs	r3, r0
100100be:	8053      	strh	r3, [r2, #2]
100100c0:	1d10      	adds	r0, r2, #4
100100c2:	3102      	adds	r1, #2
100100c4:	2208      	movs	r2, #8
100100c6:	4b01      	ldr	r3, [pc, #4]	; (100100cc <gapc_encrypt_req_ind+0x1c>)
100100c8:	4798      	blx	r3
100100ca:	bd08      	pop	{r3, pc}
100100cc:	10018623 	.word	0x10018623

100100d0 <gapc_encrypt_cfm_handler>:
100100d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100100d2:	2500      	movs	r5, #0
100100d4:	b087      	sub	sp, #28
100100d6:	9304      	str	r3, [sp, #16]
100100d8:	ab0c      	add	r3, sp, #48	; 0x30
100100da:	781b      	ldrb	r3, [r3, #0]
100100dc:	1c17      	adds	r7, r2, #0
100100de:	4a15      	ldr	r2, [pc, #84]	; (10010134 <gapc_encrypt_cfm_handler+0x64>)
100100e0:	1c06      	adds	r6, r0, #0
100100e2:	9305      	str	r3, [sp, #20]
100100e4:	9100      	str	r1, [sp, #0]
100100e6:	9002      	str	r0, [sp, #8]
100100e8:	1c29      	adds	r1, r5, #0
100100ea:	1c2b      	adds	r3, r5, #0
100100ec:	9501      	str	r5, [sp, #4]
100100ee:	1c10      	adds	r0, r2, #0
100100f0:	4c11      	ldr	r4, [pc, #68]	; (10010138 <gapc_encrypt_cfm_handler+0x68>)
100100f2:	47a0      	blx	r4
100100f4:	2318      	movs	r3, #24
100100f6:	4c11      	ldr	r4, [pc, #68]	; (1001013c <gapc_encrypt_cfm_handler+0x6c>)
100100f8:	9904      	ldr	r1, [sp, #16]
100100fa:	7023      	strb	r3, [r4, #0]
100100fc:	3b0a      	subs	r3, #10
100100fe:	7063      	strb	r3, [r4, #1]
10010100:	70a3      	strb	r3, [r4, #2]
10010102:	4b0f      	ldr	r3, [pc, #60]	; (10010140 <gapc_encrypt_cfm_handler+0x70>)
10010104:	480f      	ldr	r0, [pc, #60]	; (10010144 <gapc_encrypt_cfm_handler+0x74>)
10010106:	881a      	ldrh	r2, [r3, #0]
10010108:	881b      	ldrh	r3, [r3, #0]
1001010a:	7122      	strb	r2, [r4, #4]
1001010c:	0a1b      	lsrs	r3, r3, #8
1001010e:	7163      	strb	r3, [r4, #5]
10010110:	2210      	movs	r2, #16
10010112:	4b0d      	ldr	r3, [pc, #52]	; (10010148 <gapc_encrypt_cfm_handler+0x78>)
10010114:	70e6      	strb	r6, [r4, #3]
10010116:	7227      	strb	r7, [r4, #8]
10010118:	4798      	blx	r3
1001011a:	466b      	mov	r3, sp
1001011c:	7d1b      	ldrb	r3, [r3, #20]
1001011e:	1c20      	adds	r0, r4, #0
10010120:	7663      	strb	r3, [r4, #25]
10010122:	2312      	movs	r3, #18
10010124:	211a      	movs	r1, #26
10010126:	71a3      	strb	r3, [r4, #6]
10010128:	4b08      	ldr	r3, [pc, #32]	; (1001014c <gapc_encrypt_cfm_handler+0x7c>)
1001012a:	71e5      	strb	r5, [r4, #7]
1001012c:	4798      	blx	r3
1001012e:	b007      	add	sp, #28
10010130:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010132:	46c0      	nop			; (mov r8, r8)
10010134:	1001d4e4 	.word	0x1001d4e4
10010138:	1000facd 	.word	0x1000facd
1001013c:	1001e880 	.word	0x1001e880
10010140:	1001e510 	.word	0x1001e510
10010144:	1001e889 	.word	0x1001e889
10010148:	10018623 	.word	0x10018623
1001014c:	1000f7c9 	.word	0x1000f7c9

10010150 <gapc_encrypt_ind>:
10010150:	780b      	ldrb	r3, [r1, #0]
10010152:	0a00      	lsrs	r0, r0, #8
10010154:	70d3      	strb	r3, [r2, #3]
10010156:	2300      	movs	r3, #0
10010158:	8010      	strh	r0, [r2, #0]
1001015a:	7093      	strb	r3, [r2, #2]
1001015c:	4770      	bx	lr
	...

10010160 <gapc_param_update_cfm_handler>:
10010160:	b538      	push	{r3, r4, r5, lr}
10010162:	2410      	movs	r4, #16
10010164:	1c05      	adds	r5, r0, #0
10010166:	480e      	ldr	r0, [pc, #56]	; (100101a0 <gapc_param_update_cfm_handler+0x40>)
10010168:	7004      	strb	r4, [r0, #0]
1001016a:	3c02      	subs	r4, #2
1001016c:	7044      	strb	r4, [r0, #1]
1001016e:	7084      	strb	r4, [r0, #2]
10010170:	4c0c      	ldr	r4, [pc, #48]	; (100101a4 <gapc_param_update_cfm_handler+0x44>)
10010172:	70c5      	strb	r5, [r0, #3]
10010174:	8825      	ldrh	r5, [r4, #0]
10010176:	8824      	ldrh	r4, [r4, #0]
10010178:	72c3      	strb	r3, [r0, #11]
1001017a:	0a1b      	lsrs	r3, r3, #8
1001017c:	0a24      	lsrs	r4, r4, #8
1001017e:	7303      	strb	r3, [r0, #12]
10010180:	2305      	movs	r3, #5
10010182:	7144      	strb	r4, [r0, #5]
10010184:	2400      	movs	r4, #0
10010186:	7201      	strb	r1, [r0, #8]
10010188:	7242      	strb	r2, [r0, #9]
1001018a:	7183      	strb	r3, [r0, #6]
1001018c:	0a12      	lsrs	r2, r2, #8
1001018e:	210d      	movs	r1, #13
10010190:	4b05      	ldr	r3, [pc, #20]	; (100101a8 <gapc_param_update_cfm_handler+0x48>)
10010192:	7105      	strb	r5, [r0, #4]
10010194:	7282      	strb	r2, [r0, #10]
10010196:	71c4      	strb	r4, [r0, #7]
10010198:	4798      	blx	r3
1001019a:	1c20      	adds	r0, r4, #0
1001019c:	bd38      	pop	{r3, r4, r5, pc}
1001019e:	46c0      	nop			; (mov r8, r8)
100101a0:	1001e880 	.word	0x1001e880
100101a4:	1001e510 	.word	0x1001e510
100101a8:	1000f7c9 	.word	0x1000f7c9

100101ac <gapc_param_updated_ind>:
100101ac:	2300      	movs	r3, #0
100101ae:	0a00      	lsrs	r0, r0, #8
100101b0:	8010      	strh	r0, [r2, #0]
100101b2:	7093      	strb	r3, [r2, #2]
100101b4:	784b      	ldrb	r3, [r1, #1]
100101b6:	7808      	ldrb	r0, [r1, #0]
100101b8:	021b      	lsls	r3, r3, #8
100101ba:	4303      	orrs	r3, r0
100101bc:	8093      	strh	r3, [r2, #4]
100101be:	78cb      	ldrb	r3, [r1, #3]
100101c0:	7888      	ldrb	r0, [r1, #2]
100101c2:	021b      	lsls	r3, r3, #8
100101c4:	4303      	orrs	r3, r0
100101c6:	80d3      	strh	r3, [r2, #6]
100101c8:	794b      	ldrb	r3, [r1, #5]
100101ca:	7909      	ldrb	r1, [r1, #4]
100101cc:	021b      	lsls	r3, r3, #8
100101ce:	430b      	orrs	r3, r1
100101d0:	2007      	movs	r0, #7
100101d2:	8113      	strh	r3, [r2, #8]
100101d4:	4770      	bx	lr

100101d6 <gapc_param_updated_req_ind>:
100101d6:	0a00      	lsrs	r0, r0, #8
100101d8:	8010      	strh	r0, [r2, #0]
100101da:	784b      	ldrb	r3, [r1, #1]
100101dc:	7808      	ldrb	r0, [r1, #0]
100101de:	021b      	lsls	r3, r3, #8
100101e0:	4303      	orrs	r3, r0
100101e2:	8053      	strh	r3, [r2, #2]
100101e4:	78cb      	ldrb	r3, [r1, #3]
100101e6:	7888      	ldrb	r0, [r1, #2]
100101e8:	021b      	lsls	r3, r3, #8
100101ea:	4303      	orrs	r3, r0
100101ec:	8093      	strh	r3, [r2, #4]
100101ee:	794b      	ldrb	r3, [r1, #5]
100101f0:	7908      	ldrb	r0, [r1, #4]
100101f2:	021b      	lsls	r3, r3, #8
100101f4:	4303      	orrs	r3, r0
100101f6:	80d3      	strh	r3, [r2, #6]
100101f8:	79cb      	ldrb	r3, [r1, #7]
100101fa:	7989      	ldrb	r1, [r1, #6]
100101fc:	021b      	lsls	r3, r3, #8
100101fe:	430b      	orrs	r3, r1
10010200:	2008      	movs	r0, #8
10010202:	8113      	strh	r3, [r2, #8]
10010204:	4770      	bx	lr
	...

10010208 <gapc_dev_info_req_ind_handler>:
10010208:	b508      	push	{r3, lr}
1001020a:	1c0b      	adds	r3, r1, #0
1001020c:	0a01      	lsrs	r1, r0, #8
1001020e:	8011      	strh	r1, [r2, #0]
10010210:	7818      	ldrb	r0, [r3, #0]
10010212:	7090      	strb	r0, [r2, #2]
10010214:	2800      	cmp	r0, #0
10010216:	d104      	bne.n	10010222 <gapc_dev_info_req_ind_handler+0x1a>
10010218:	4b03      	ldr	r3, [pc, #12]	; (10010228 <gapc_dev_info_req_ind_handler+0x20>)
1001021a:	33aa      	adds	r3, #170	; 0xaa
1001021c:	881b      	ldrh	r3, [r3, #0]
1001021e:	2b00      	cmp	r3, #0
10010220:	d001      	beq.n	10010226 <gapc_dev_info_req_ind_handler+0x1e>
10010222:	4b02      	ldr	r3, [pc, #8]	; (1001022c <gapc_dev_info_req_ind_handler+0x24>)
10010224:	4798      	blx	r3
10010226:	bd08      	pop	{r3, pc}
10010228:	1001e5a2 	.word	0x1001e5a2
1001022c:	1000f8d9 	.word	0x1000f8d9

10010230 <gapc_sec_req_ind>:
10010230:	0a00      	lsrs	r0, r0, #8
10010232:	8010      	strh	r0, [r2, #0]
10010234:	7809      	ldrb	r1, [r1, #0]
10010236:	2301      	movs	r3, #1
10010238:	1c08      	adds	r0, r1, #0
1001023a:	0889      	lsrs	r1, r1, #2
1001023c:	4018      	ands	r0, r3
1001023e:	400b      	ands	r3, r1
10010240:	70d0      	strb	r0, [r2, #3]
10010242:	7113      	strb	r3, [r2, #4]
10010244:	4770      	bx	lr

10010246 <gapc_sign_counter_ind_handler>:
10010246:	0a00      	lsrs	r0, r0, #8
10010248:	8010      	strh	r0, [r2, #0]
1001024a:	784b      	ldrb	r3, [r1, #1]
1001024c:	0218      	lsls	r0, r3, #8
1001024e:	788b      	ldrb	r3, [r1, #2]
10010250:	041b      	lsls	r3, r3, #16
10010252:	4303      	orrs	r3, r0
10010254:	7808      	ldrb	r0, [r1, #0]
10010256:	4303      	orrs	r3, r0
10010258:	78c8      	ldrb	r0, [r1, #3]
1001025a:	0600      	lsls	r0, r0, #24
1001025c:	4303      	orrs	r3, r0
1001025e:	6053      	str	r3, [r2, #4]
10010260:	794b      	ldrb	r3, [r1, #5]
10010262:	0218      	lsls	r0, r3, #8
10010264:	798b      	ldrb	r3, [r1, #6]
10010266:	041b      	lsls	r3, r3, #16
10010268:	4303      	orrs	r3, r0
1001026a:	7908      	ldrb	r0, [r1, #4]
1001026c:	79c9      	ldrb	r1, [r1, #7]
1001026e:	4303      	orrs	r3, r0
10010270:	0609      	lsls	r1, r1, #24
10010272:	430b      	orrs	r3, r1
10010274:	2000      	movs	r0, #0
10010276:	6093      	str	r3, [r2, #8]
10010278:	4770      	bx	lr
	...

1001027c <gapc_peer_att_info_ind_handler>:
1001027c:	b510      	push	{r4, lr}
1001027e:	0a00      	lsrs	r0, r0, #8
10010280:	8010      	strh	r0, [r2, #0]
10010282:	7808      	ldrb	r0, [r1, #0]
10010284:	7090      	strb	r0, [r2, #2]
10010286:	788b      	ldrb	r3, [r1, #2]
10010288:	784c      	ldrb	r4, [r1, #1]
1001028a:	021b      	lsls	r3, r3, #8
1001028c:	4323      	orrs	r3, r4
1001028e:	8093      	strh	r3, [r2, #4]
10010290:	2801      	cmp	r0, #1
10010292:	d027      	beq.n	100102e4 <gapc_peer_att_info_ind_handler+0x68>
10010294:	2800      	cmp	r0, #0
10010296:	d017      	beq.n	100102c8 <gapc_peer_att_info_ind_handler+0x4c>
10010298:	2802      	cmp	r0, #2
1001029a:	d12a      	bne.n	100102f2 <gapc_peer_att_info_ind_handler+0x76>
1001029c:	790b      	ldrb	r3, [r1, #4]
1001029e:	78c8      	ldrb	r0, [r1, #3]
100102a0:	021b      	lsls	r3, r3, #8
100102a2:	4303      	orrs	r3, r0
100102a4:	8113      	strh	r3, [r2, #8]
100102a6:	798b      	ldrb	r3, [r1, #6]
100102a8:	7948      	ldrb	r0, [r1, #5]
100102aa:	021b      	lsls	r3, r3, #8
100102ac:	4303      	orrs	r3, r0
100102ae:	80d3      	strh	r3, [r2, #6]
100102b0:	7a0b      	ldrb	r3, [r1, #8]
100102b2:	79c8      	ldrb	r0, [r1, #7]
100102b4:	021b      	lsls	r3, r3, #8
100102b6:	4303      	orrs	r3, r0
100102b8:	8193      	strh	r3, [r2, #12]
100102ba:	7a8b      	ldrb	r3, [r1, #10]
100102bc:	7a49      	ldrb	r1, [r1, #9]
100102be:	021b      	lsls	r3, r3, #8
100102c0:	430b      	orrs	r3, r1
100102c2:	8153      	strh	r3, [r2, #10]
100102c4:	2306      	movs	r3, #6
100102c6:	e013      	b.n	100102f0 <gapc_peer_att_info_ind_handler+0x74>
100102c8:	1c14      	adds	r4, r2, #0
100102ca:	1c20      	adds	r0, r4, #0
100102cc:	790a      	ldrb	r2, [r1, #4]
100102ce:	78cb      	ldrb	r3, [r1, #3]
100102d0:	0212      	lsls	r2, r2, #8
100102d2:	431a      	orrs	r2, r3
100102d4:	80e2      	strh	r2, [r4, #6]
100102d6:	4b07      	ldr	r3, [pc, #28]	; (100102f4 <gapc_peer_att_info_ind_handler+0x78>)
100102d8:	3008      	adds	r0, #8
100102da:	3105      	adds	r1, #5
100102dc:	4798      	blx	r3
100102de:	2302      	movs	r3, #2
100102e0:	70a3      	strb	r3, [r4, #2]
100102e2:	e006      	b.n	100102f2 <gapc_peer_att_info_ind_handler+0x76>
100102e4:	790b      	ldrb	r3, [r1, #4]
100102e6:	78c9      	ldrb	r1, [r1, #3]
100102e8:	021b      	lsls	r3, r3, #8
100102ea:	430b      	orrs	r3, r1
100102ec:	80d3      	strh	r3, [r2, #6]
100102ee:	2305      	movs	r3, #5
100102f0:	7093      	strb	r3, [r2, #2]
100102f2:	bd10      	pop	{r4, pc}
100102f4:	10018623 	.word	0x10018623

100102f8 <gapc_con_channel_map_ind_handler>:
100102f8:	b508      	push	{r3, lr}
100102fa:	2300      	movs	r3, #0
100102fc:	0a00      	lsrs	r0, r0, #8
100102fe:	7013      	strb	r3, [r2, #0]
10010300:	8050      	strh	r0, [r2, #2]
10010302:	4b02      	ldr	r3, [pc, #8]	; (1001030c <gapc_con_channel_map_ind_handler+0x14>)
10010304:	1d10      	adds	r0, r2, #4
10010306:	2205      	movs	r2, #5
10010308:	4798      	blx	r3
1001030a:	bd08      	pop	{r3, pc}
1001030c:	10018623 	.word	0x10018623

10010310 <gapc_lecb_connected>:
10010310:	7843      	ldrb	r3, [r0, #1]
10010312:	7802      	ldrb	r2, [r0, #0]
10010314:	021b      	lsls	r3, r3, #8
10010316:	4313      	orrs	r3, r2
10010318:	800b      	strh	r3, [r1, #0]
1001031a:	78c3      	ldrb	r3, [r0, #3]
1001031c:	7882      	ldrb	r2, [r0, #2]
1001031e:	021b      	lsls	r3, r3, #8
10010320:	4313      	orrs	r3, r2
10010322:	804b      	strh	r3, [r1, #2]
10010324:	7943      	ldrb	r3, [r0, #5]
10010326:	7902      	ldrb	r2, [r0, #4]
10010328:	021b      	lsls	r3, r3, #8
1001032a:	4313      	orrs	r3, r2
1001032c:	808b      	strh	r3, [r1, #4]
1001032e:	79c3      	ldrb	r3, [r0, #7]
10010330:	7982      	ldrb	r2, [r0, #6]
10010332:	021b      	lsls	r3, r3, #8
10010334:	4313      	orrs	r3, r2
10010336:	80cb      	strh	r3, [r1, #6]
10010338:	2300      	movs	r3, #0
1001033a:	720b      	strb	r3, [r1, #8]
1001033c:	4770      	bx	lr

1001033e <gapc_lecb_disconnected>:
1001033e:	7843      	ldrb	r3, [r0, #1]
10010340:	7802      	ldrb	r2, [r0, #0]
10010342:	021b      	lsls	r3, r3, #8
10010344:	4313      	orrs	r3, r2
10010346:	800b      	strh	r3, [r1, #0]
10010348:	78c3      	ldrb	r3, [r0, #3]
1001034a:	7882      	ldrb	r2, [r0, #2]
1001034c:	021b      	lsls	r3, r3, #8
1001034e:	4313      	orrs	r3, r2
10010350:	804b      	strh	r3, [r1, #2]
10010352:	4770      	bx	lr

10010354 <gapc_lecb_connect_req_ind>:
10010354:	7843      	ldrb	r3, [r0, #1]
10010356:	7802      	ldrb	r2, [r0, #0]
10010358:	021b      	lsls	r3, r3, #8
1001035a:	4313      	orrs	r3, r2
1001035c:	800b      	strh	r3, [r1, #0]
1001035e:	78c3      	ldrb	r3, [r0, #3]
10010360:	7882      	ldrb	r2, [r0, #2]
10010362:	021b      	lsls	r3, r3, #8
10010364:	4313      	orrs	r3, r2
10010366:	804b      	strh	r3, [r1, #2]
10010368:	7943      	ldrb	r3, [r0, #5]
1001036a:	7902      	ldrb	r2, [r0, #4]
1001036c:	021b      	lsls	r3, r3, #8
1001036e:	4313      	orrs	r3, r2
10010370:	808b      	strh	r3, [r1, #4]
10010372:	79c3      	ldrb	r3, [r0, #7]
10010374:	7982      	ldrb	r2, [r0, #6]
10010376:	021b      	lsls	r3, r3, #8
10010378:	4313      	orrs	r3, r2
1001037a:	80cb      	strh	r3, [r1, #6]
1001037c:	4770      	bx	lr

1001037e <gapc_lecb_add_credit_resp_handler>:
1001037e:	7843      	ldrb	r3, [r0, #1]
10010380:	7802      	ldrb	r2, [r0, #0]
10010382:	021b      	lsls	r3, r3, #8
10010384:	4313      	orrs	r3, r2
10010386:	800b      	strh	r3, [r1, #0]
10010388:	78c3      	ldrb	r3, [r0, #3]
1001038a:	7882      	ldrb	r2, [r0, #2]
1001038c:	021b      	lsls	r3, r3, #8
1001038e:	4313      	orrs	r3, r2
10010390:	804b      	strh	r3, [r1, #2]
10010392:	7943      	ldrb	r3, [r0, #5]
10010394:	7902      	ldrb	r2, [r0, #4]
10010396:	021b      	lsls	r3, r3, #8
10010398:	4313      	orrs	r3, r2
1001039a:	808b      	strh	r3, [r1, #4]
1001039c:	4770      	bx	lr
	...

100103a0 <gapm_reset_req_handler>:
100103a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
100103a2:	466b      	mov	r3, sp
100103a4:	4915      	ldr	r1, [pc, #84]	; (100103fc <gapm_reset_req_handler+0x5c>)
100103a6:	4816      	ldr	r0, [pc, #88]	; (10010400 <gapm_reset_req_handler+0x60>)
100103a8:	880c      	ldrh	r4, [r1, #0]
100103aa:	8809      	ldrh	r1, [r1, #0]
100103ac:	1ddd      	adds	r5, r3, #7
100103ae:	0a09      	lsrs	r1, r1, #8
100103b0:	2300      	movs	r3, #0
100103b2:	2202      	movs	r2, #2
100103b4:	7141      	strb	r1, [r0, #5]
100103b6:	26d0      	movs	r6, #208	; 0xd0
100103b8:	2101      	movs	r1, #1
100103ba:	7104      	strb	r4, [r0, #4]
100103bc:	4c11      	ldr	r4, [pc, #68]	; (10010404 <gapm_reset_req_handler+0x64>)
100103be:	702b      	strb	r3, [r5, #0]
100103c0:	7002      	strb	r2, [r0, #0]
100103c2:	70c3      	strb	r3, [r0, #3]
100103c4:	320b      	adds	r2, #11
100103c6:	7201      	strb	r1, [r0, #8]
100103c8:	7181      	strb	r1, [r0, #6]
100103ca:	71c3      	strb	r3, [r0, #7]
100103cc:	3108      	adds	r1, #8
100103ce:	4b0e      	ldr	r3, [pc, #56]	; (10010408 <gapm_reset_req_handler+0x68>)
100103d0:	0136      	lsls	r6, r6, #4
100103d2:	7042      	strb	r2, [r0, #1]
100103d4:	7082      	strb	r2, [r0, #2]
100103d6:	80a2      	strh	r2, [r4, #4]
100103d8:	8026      	strh	r6, [r4, #0]
100103da:	4798      	blx	r3
100103dc:	1c28      	adds	r0, r5, #0
100103de:	4b0b      	ldr	r3, [pc, #44]	; (1001040c <gapm_reset_req_handler+0x6c>)
100103e0:	4798      	blx	r3
100103e2:	782b      	ldrb	r3, [r5, #0]
100103e4:	20e2      	movs	r0, #226	; 0xe2
100103e6:	2b00      	cmp	r3, #0
100103e8:	d106      	bne.n	100103f8 <gapm_reset_req_handler+0x58>
100103ea:	68a3      	ldr	r3, [r4, #8]
100103ec:	20e2      	movs	r0, #226	; 0xe2
100103ee:	781a      	ldrb	r2, [r3, #0]
100103f0:	785b      	ldrb	r3, [r3, #1]
100103f2:	2a01      	cmp	r2, #1
100103f4:	d100      	bne.n	100103f8 <gapm_reset_req_handler+0x58>
100103f6:	1c18      	adds	r0, r3, #0
100103f8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100103fa:	46c0      	nop			; (mov r8, r8)
100103fc:	1001e510 	.word	0x1001e510
10010400:	1001e880 	.word	0x1001e880
10010404:	1001e504 	.word	0x1001e504
10010408:	1000f7c9 	.word	0x1000f7c9
1001040c:	1000f82d 	.word	0x1000f82d

10010410 <gapm_set_dev_config_cmd_handler>:
10010410:	b5f0      	push	{r4, r5, r6, r7, lr}
10010412:	b089      	sub	sp, #36	; 0x24
10010414:	9303      	str	r3, [sp, #12]
10010416:	ab0e      	add	r3, sp, #56	; 0x38
10010418:	781b      	ldrb	r3, [r3, #0]
1001041a:	4c37      	ldr	r4, [pc, #220]	; (100104f8 <gapm_set_dev_config_cmd_handler+0xe8>)
1001041c:	9304      	str	r3, [sp, #16]
1001041e:	ab0f      	add	r3, sp, #60	; 0x3c
10010420:	781b      	ldrb	r3, [r3, #0]
10010422:	270d      	movs	r7, #13
10010424:	9305      	str	r3, [sp, #20]
10010426:	ab10      	add	r3, sp, #64	; 0x40
10010428:	881b      	ldrh	r3, [r3, #0]
1001042a:	72a1      	strb	r1, [r4, #10]
1001042c:	9300      	str	r3, [sp, #0]
1001042e:	ab11      	add	r3, sp, #68	; 0x44
10010430:	881b      	ldrh	r3, [r3, #0]
10010432:	0a09      	lsrs	r1, r1, #8
10010434:	9301      	str	r3, [sp, #4]
10010436:	ab12      	add	r3, sp, #72	; 0x48
10010438:	881b      	ldrh	r3, [r3, #0]
1001043a:	7260      	strb	r0, [r4, #9]
1001043c:	9302      	str	r3, [sp, #8]
1001043e:	ab06      	add	r3, sp, #24
10010440:	1dde      	adds	r6, r3, #7
10010442:	2300      	movs	r3, #0
10010444:	7033      	strb	r3, [r6, #0]
10010446:	2304      	movs	r3, #4
10010448:	7023      	strb	r3, [r4, #0]
1001044a:	2300      	movs	r3, #0
1001044c:	70e3      	strb	r3, [r4, #3]
1001044e:	4b2b      	ldr	r3, [pc, #172]	; (100104fc <gapm_set_dev_config_cmd_handler+0xec>)
10010450:	72e1      	strb	r1, [r4, #11]
10010452:	881d      	ldrh	r5, [r3, #0]
10010454:	881b      	ldrh	r3, [r3, #0]
10010456:	1c11      	adds	r1, r2, #0
10010458:	0a1b      	lsrs	r3, r3, #8
1001045a:	7163      	strb	r3, [r4, #5]
1001045c:	2303      	movs	r3, #3
1001045e:	7125      	strb	r5, [r4, #4]
10010460:	2206      	movs	r2, #6
10010462:	4d27      	ldr	r5, [pc, #156]	; (10010500 <gapm_set_dev_config_cmd_handler+0xf0>)
10010464:	4827      	ldr	r0, [pc, #156]	; (10010504 <gapm_set_dev_config_cmd_handler+0xf4>)
10010466:	7223      	strb	r3, [r4, #8]
10010468:	7067      	strb	r7, [r4, #1]
1001046a:	70a7      	strb	r7, [r4, #2]
1001046c:	47a8      	blx	r5
1001046e:	9903      	ldr	r1, [sp, #12]
10010470:	2210      	movs	r2, #16
10010472:	4825      	ldr	r0, [pc, #148]	; (10010508 <gapm_set_dev_config_cmd_handler+0xf8>)
10010474:	47a8      	blx	r5
10010476:	466a      	mov	r2, sp
10010478:	7c12      	ldrb	r2, [r2, #16]
1001047a:	1ce3      	adds	r3, r4, #3
1001047c:	77da      	strb	r2, [r3, #31]
1001047e:	466a      	mov	r2, sp
10010480:	7d12      	ldrb	r2, [r2, #20]
10010482:	1d23      	adds	r3, r4, #4
10010484:	77da      	strb	r2, [r3, #31]
10010486:	466a      	mov	r2, sp
10010488:	7812      	ldrb	r2, [r2, #0]
1001048a:	1d63      	adds	r3, r4, #5
1001048c:	77da      	strb	r2, [r3, #31]
1001048e:	9b00      	ldr	r3, [sp, #0]
10010490:	1da2      	adds	r2, r4, #6
10010492:	0a1b      	lsrs	r3, r3, #8
10010494:	77d3      	strb	r3, [r2, #31]
10010496:	466a      	mov	r2, sp
10010498:	7912      	ldrb	r2, [r2, #4]
1001049a:	1de3      	adds	r3, r4, #7
1001049c:	77da      	strb	r2, [r3, #31]
1001049e:	1c22      	adds	r2, r4, #0
100104a0:	9b01      	ldr	r3, [sp, #4]
100104a2:	3208      	adds	r2, #8
100104a4:	0a1b      	lsrs	r3, r3, #8
100104a6:	77d3      	strb	r3, [r2, #31]
100104a8:	466a      	mov	r2, sp
100104aa:	1c23      	adds	r3, r4, #0
100104ac:	7a12      	ldrb	r2, [r2, #8]
100104ae:	3328      	adds	r3, #40	; 0x28
100104b0:	701a      	strb	r2, [r3, #0]
100104b2:	1c22      	adds	r2, r4, #0
100104b4:	9b02      	ldr	r3, [sp, #8]
100104b6:	3229      	adds	r2, #41	; 0x29
100104b8:	0a1b      	lsrs	r3, r3, #8
100104ba:	7013      	strb	r3, [r2, #0]
100104bc:	23d0      	movs	r3, #208	; 0xd0
100104be:	4d13      	ldr	r5, [pc, #76]	; (1001050c <gapm_set_dev_config_cmd_handler+0xfc>)
100104c0:	011b      	lsls	r3, r3, #4
100104c2:	802b      	strh	r3, [r5, #0]
100104c4:	2322      	movs	r3, #34	; 0x22
100104c6:	71a3      	strb	r3, [r4, #6]
100104c8:	2300      	movs	r3, #0
100104ca:	212a      	movs	r1, #42	; 0x2a
100104cc:	71e3      	strb	r3, [r4, #7]
100104ce:	1c20      	adds	r0, r4, #0
100104d0:	4b0f      	ldr	r3, [pc, #60]	; (10010510 <gapm_set_dev_config_cmd_handler+0x100>)
100104d2:	80af      	strh	r7, [r5, #4]
100104d4:	4798      	blx	r3
100104d6:	1c30      	adds	r0, r6, #0
100104d8:	4b0e      	ldr	r3, [pc, #56]	; (10010514 <gapm_set_dev_config_cmd_handler+0x104>)
100104da:	4798      	blx	r3
100104dc:	7833      	ldrb	r3, [r6, #0]
100104de:	20e2      	movs	r0, #226	; 0xe2
100104e0:	2b00      	cmp	r3, #0
100104e2:	d106      	bne.n	100104f2 <gapm_set_dev_config_cmd_handler+0xe2>
100104e4:	68ab      	ldr	r3, [r5, #8]
100104e6:	20e2      	movs	r0, #226	; 0xe2
100104e8:	781a      	ldrb	r2, [r3, #0]
100104ea:	785b      	ldrb	r3, [r3, #1]
100104ec:	2a03      	cmp	r2, #3
100104ee:	d100      	bne.n	100104f2 <gapm_set_dev_config_cmd_handler+0xe2>
100104f0:	1c18      	adds	r0, r3, #0
100104f2:	b009      	add	sp, #36	; 0x24
100104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104f6:	46c0      	nop			; (mov r8, r8)
100104f8:	1001e880 	.word	0x1001e880
100104fc:	1001e510 	.word	0x1001e510
10010500:	10018623 	.word	0x10018623
10010504:	1001e88c 	.word	0x1001e88c
10010508:	1001e892 	.word	0x1001e892
1001050c:	1001e504 	.word	0x1001e504
10010510:	1000f7c9 	.word	0x1000f7c9
10010514:	1000f82d 	.word	0x1000f82d

10010518 <gapm_get_dev_config_cmd_handler>:
10010518:	4684      	mov	ip, r0
1001051a:	4663      	mov	r3, ip
1001051c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001051e:	b085      	sub	sp, #20
10010520:	9100      	str	r1, [sp, #0]
10010522:	20cf      	movs	r0, #207	; 0xcf
10010524:	2b01      	cmp	r3, #1
10010526:	d854      	bhi.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
10010528:	2900      	cmp	r1, #0
1001052a:	d052      	beq.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
1001052c:	2200      	movs	r2, #0
1001052e:	492a      	ldr	r1, [pc, #168]	; (100105d8 <gapm_get_dev_config_cmd_handler+0xc0>)
10010530:	ab02      	add	r3, sp, #8
10010532:	880c      	ldrh	r4, [r1, #0]
10010534:	8809      	ldrh	r1, [r1, #0]
10010536:	1d9f      	adds	r7, r3, #6
10010538:	719a      	strb	r2, [r3, #6]
1001053a:	4b28      	ldr	r3, [pc, #160]	; (100105dc <gapm_get_dev_config_cmd_handler+0xc4>)
1001053c:	0a09      	lsrs	r1, r1, #8
1001053e:	250d      	movs	r5, #13
10010540:	2606      	movs	r6, #6
10010542:	7159      	strb	r1, [r3, #5]
10010544:	4661      	mov	r1, ip
10010546:	701e      	strb	r6, [r3, #0]
10010548:	705d      	strb	r5, [r3, #1]
1001054a:	709d      	strb	r5, [r3, #2]
1001054c:	70da      	strb	r2, [r3, #3]
1001054e:	711c      	strb	r4, [r3, #4]
10010550:	2901      	cmp	r1, #1
10010552:	d13e      	bne.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
10010554:	21d0      	movs	r1, #208	; 0xd0
10010556:	4c22      	ldr	r4, [pc, #136]	; (100105e0 <gapm_get_dev_config_cmd_handler+0xc8>)
10010558:	0109      	lsls	r1, r1, #4
1001055a:	8061      	strh	r1, [r4, #2]
1001055c:	4921      	ldr	r1, [pc, #132]	; (100105e4 <gapm_get_dev_config_cmd_handler+0xcc>)
1001055e:	71da      	strb	r2, [r3, #7]
10010560:	8021      	strh	r1, [r4, #0]
10010562:	4661      	mov	r1, ip
10010564:	721e      	strb	r6, [r3, #8]
10010566:	7199      	strb	r1, [r3, #6]
10010568:	1c18      	adds	r0, r3, #0
1001056a:	2109      	movs	r1, #9
1001056c:	4b1e      	ldr	r3, [pc, #120]	; (100105e8 <gapm_get_dev_config_cmd_handler+0xd0>)
1001056e:	80a5      	strh	r5, [r4, #4]
10010570:	4798      	blx	r3
10010572:	1c38      	adds	r0, r7, #0
10010574:	4b1d      	ldr	r3, [pc, #116]	; (100105ec <gapm_get_dev_config_cmd_handler+0xd4>)
10010576:	4798      	blx	r3
10010578:	783b      	ldrb	r3, [r7, #0]
1001057a:	20e2      	movs	r0, #226	; 0xe2
1001057c:	9301      	str	r3, [sp, #4]
1001057e:	2b00      	cmp	r3, #0
10010580:	d127      	bne.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
10010582:	8821      	ldrh	r1, [r4, #0]
10010584:	4a1a      	ldr	r2, [pc, #104]	; (100105f0 <gapm_get_dev_config_cmd_handler+0xd8>)
10010586:	68a7      	ldr	r7, [r4, #8]
10010588:	3b01      	subs	r3, #1
1001058a:	4291      	cmp	r1, r2
1001058c:	d001      	beq.n	10010592 <gapm_get_dev_config_cmd_handler+0x7a>
1001058e:	8023      	strh	r3, [r4, #0]
10010590:	e01a      	b.n	100105c8 <gapm_get_dev_config_cmd_handler+0xb0>
10010592:	8063      	strh	r3, [r4, #2]
10010594:	9b00      	ldr	r3, [sp, #0]
10010596:	1c39      	adds	r1, r7, #0
10010598:	1c58      	adds	r0, r3, #1
1001059a:	1c32      	adds	r2, r6, #0
1001059c:	4b15      	ldr	r3, [pc, #84]	; (100105f4 <gapm_get_dev_config_cmd_handler+0xdc>)
1001059e:	4798      	blx	r3
100105a0:	79bb      	ldrb	r3, [r7, #6]
100105a2:	9a00      	ldr	r2, [sp, #0]
100105a4:	7013      	strb	r3, [r2, #0]
100105a6:	23d0      	movs	r3, #208	; 0xd0
100105a8:	011b      	lsls	r3, r3, #4
100105aa:	8023      	strh	r3, [r4, #0]
100105ac:	ab02      	add	r3, sp, #8
100105ae:	80a5      	strh	r5, [r4, #4]
100105b0:	1ddd      	adds	r5, r3, #7
100105b2:	466b      	mov	r3, sp
100105b4:	791b      	ldrb	r3, [r3, #4]
100105b6:	1c28      	adds	r0, r5, #0
100105b8:	702b      	strb	r3, [r5, #0]
100105ba:	4b0c      	ldr	r3, [pc, #48]	; (100105ec <gapm_get_dev_config_cmd_handler+0xd4>)
100105bc:	4798      	blx	r3
100105be:	782b      	ldrb	r3, [r5, #0]
100105c0:	20d0      	movs	r0, #208	; 0xd0
100105c2:	2b00      	cmp	r3, #0
100105c4:	d105      	bne.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
100105c6:	68a7      	ldr	r7, [r4, #8]
100105c8:	783b      	ldrb	r3, [r7, #0]
100105ca:	7878      	ldrb	r0, [r7, #1]
100105cc:	2b06      	cmp	r3, #6
100105ce:	d000      	beq.n	100105d2 <gapm_get_dev_config_cmd_handler+0xba>
100105d0:	20e2      	movs	r0, #226	; 0xe2
100105d2:	b005      	add	sp, #20
100105d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105d6:	46c0      	nop			; (mov r8, r8)
100105d8:	1001e510 	.word	0x1001e510
100105dc:	1001e880 	.word	0x1001e880
100105e0:	1001e504 	.word	0x1001e504
100105e4:	00000d08 	.word	0x00000d08
100105e8:	1000f7c9 	.word	0x1000f7c9
100105ec:	1000f82d 	.word	0x1000f82d
100105f0:	0000ffff 	.word	0x0000ffff
100105f4:	10018623 	.word	0x10018623

100105f8 <gapm_cancel_cmd_handler>:
100105f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
100105fa:	4916      	ldr	r1, [pc, #88]	; (10010654 <gapm_cancel_cmd_handler+0x5c>)
100105fc:	4816      	ldr	r0, [pc, #88]	; (10010658 <gapm_cancel_cmd_handler+0x60>)
100105fe:	880c      	ldrh	r4, [r1, #0]
10010600:	8809      	ldrh	r1, [r1, #0]
10010602:	466b      	mov	r3, sp
10010604:	0a09      	lsrs	r1, r1, #8
10010606:	7141      	strb	r1, [r0, #5]
10010608:	2102      	movs	r1, #2
1001060a:	2203      	movs	r2, #3
1001060c:	7201      	strb	r1, [r0, #8]
1001060e:	21d0      	movs	r1, #208	; 0xd0
10010610:	1ddd      	adds	r5, r3, #7
10010612:	2300      	movs	r3, #0
10010614:	7104      	strb	r4, [r0, #4]
10010616:	4c11      	ldr	r4, [pc, #68]	; (1001065c <gapm_cancel_cmd_handler+0x64>)
10010618:	7002      	strb	r2, [r0, #0]
1001061a:	0109      	lsls	r1, r1, #4
1001061c:	320a      	adds	r2, #10
1001061e:	702b      	strb	r3, [r5, #0]
10010620:	7042      	strb	r2, [r0, #1]
10010622:	7082      	strb	r2, [r0, #2]
10010624:	70c3      	strb	r3, [r0, #3]
10010626:	8021      	strh	r1, [r4, #0]
10010628:	80a2      	strh	r2, [r4, #4]
1001062a:	71c3      	strb	r3, [r0, #7]
1001062c:	3a0c      	subs	r2, #12
1001062e:	2109      	movs	r1, #9
10010630:	4b0b      	ldr	r3, [pc, #44]	; (10010660 <gapm_cancel_cmd_handler+0x68>)
10010632:	7182      	strb	r2, [r0, #6]
10010634:	4798      	blx	r3
10010636:	1c28      	adds	r0, r5, #0
10010638:	4b0a      	ldr	r3, [pc, #40]	; (10010664 <gapm_cancel_cmd_handler+0x6c>)
1001063a:	4798      	blx	r3
1001063c:	7828      	ldrb	r0, [r5, #0]
1001063e:	2800      	cmp	r0, #0
10010640:	d001      	beq.n	10010646 <gapm_cancel_cmd_handler+0x4e>
10010642:	20e2      	movs	r0, #226	; 0xe2
10010644:	e004      	b.n	10010650 <gapm_cancel_cmd_handler+0x58>
10010646:	68a3      	ldr	r3, [r4, #8]
10010648:	785b      	ldrb	r3, [r3, #1]
1001064a:	2b44      	cmp	r3, #68	; 0x44
1001064c:	d000      	beq.n	10010650 <gapm_cancel_cmd_handler+0x58>
1001064e:	1c18      	adds	r0, r3, #0
10010650:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010652:	46c0      	nop			; (mov r8, r8)
10010654:	1001e510 	.word	0x1001e510
10010658:	1001e880 	.word	0x1001e880
1001065c:	1001e504 	.word	0x1001e504
10010660:	1000f7c9 	.word	0x1000f7c9
10010664:	1000f82d 	.word	0x1000f82d

10010668 <gapm_dev_bdaddr_ind_handler>:
10010668:	b538      	push	{r3, r4, r5, lr}
1001066a:	1c05      	adds	r5, r0, #0
1001066c:	1c0c      	adds	r4, r1, #0
1001066e:	1c48      	adds	r0, r1, #1
10010670:	2206      	movs	r2, #6
10010672:	1c29      	adds	r1, r5, #0
10010674:	4b02      	ldr	r3, [pc, #8]	; (10010680 <gapm_dev_bdaddr_ind_handler+0x18>)
10010676:	4798      	blx	r3
10010678:	79ab      	ldrb	r3, [r5, #6]
1001067a:	2000      	movs	r0, #0
1001067c:	7023      	strb	r3, [r4, #0]
1001067e:	bd38      	pop	{r3, r4, r5, pc}
10010680:	10018623 	.word	0x10018623

10010684 <gapm_cmp_evt>:
10010684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010686:	7803      	ldrb	r3, [r0, #0]
10010688:	7845      	ldrb	r5, [r0, #1]
1001068a:	3b0c      	subs	r3, #12
1001068c:	1e18      	subs	r0, r3, #0
1001068e:	280b      	cmp	r0, #11
10010690:	d900      	bls.n	10010694 <gapm_cmp_evt+0x10>
10010692:	e08d      	b.n	100107b0 <gapm_cmp_evt+0x12c>
10010694:	1c0c      	adds	r4, r1, #0
10010696:	f004 fe2d 	bl	100152f4 <__gnu_thumb1_case_uqi>
1001069a:	1952      	.short	0x1952
1001069c:	068b1919 	.word	0x068b1919
100106a0:	8b595906 	.word	0x8b595906
100106a4:	0d8b      	.short	0x0d8b
100106a6:	2300      	movs	r3, #0
100106a8:	2d45      	cmp	r5, #69	; 0x45
100106aa:	d000      	beq.n	100106ae <gapm_cmp_evt+0x2a>
100106ac:	1c2b      	adds	r3, r5, #0
100106ae:	7023      	strb	r3, [r4, #0]
100106b0:	2002      	movs	r0, #2
100106b2:	e07e      	b.n	100107b2 <gapm_cmp_evt+0x12e>
100106b4:	203b      	movs	r0, #59	; 0x3b
100106b6:	2d00      	cmp	r5, #0
100106b8:	d100      	bne.n	100106bc <gapm_cmp_evt+0x38>
100106ba:	e07a      	b.n	100107b2 <gapm_cmp_evt+0x12e>
100106bc:	700d      	strb	r5, [r1, #0]
100106be:	1c48      	adds	r0, r1, #1
100106c0:	2210      	movs	r2, #16
100106c2:	2100      	movs	r1, #0
100106c4:	4b3b      	ldr	r3, [pc, #236]	; (100107b4 <gapm_cmp_evt+0x130>)
100106c6:	4798      	blx	r3
100106c8:	200f      	movs	r0, #15
100106ca:	e072      	b.n	100107b2 <gapm_cmp_evt+0x12e>
100106cc:	2d00      	cmp	r5, #0
100106ce:	d134      	bne.n	1001073a <gapm_cmp_evt+0xb6>
100106d0:	4b39      	ldr	r3, [pc, #228]	; (100107b8 <gapm_cmp_evt+0x134>)
100106d2:	4798      	blx	r3
100106d4:	1e43      	subs	r3, r0, #1
100106d6:	b2db      	uxtb	r3, r3
100106d8:	1c28      	adds	r0, r5, #0
100106da:	2b06      	cmp	r3, #6
100106dc:	d869      	bhi.n	100107b2 <gapm_cmp_evt+0x12e>
100106de:	466b      	mov	r3, sp
100106e0:	4e36      	ldr	r6, [pc, #216]	; (100107bc <gapm_cmp_evt+0x138>)
100106e2:	1dd9      	adds	r1, r3, #7
100106e4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100106e6:	4b36      	ldr	r3, [pc, #216]	; (100107c0 <gapm_cmp_evt+0x13c>)
100106e8:	4798      	blx	r3
100106ea:	2312      	movs	r3, #18
100106ec:	4358      	muls	r0, r3
100106ee:	4935      	ldr	r1, [pc, #212]	; (100107c4 <gapm_cmp_evt+0x140>)
100106f0:	1809      	adds	r1, r1, r0
100106f2:	1c0b      	adds	r3, r1, #0
100106f4:	894a      	ldrh	r2, [r1, #10]
100106f6:	3308      	adds	r3, #8
100106f8:	8122      	strh	r2, [r4, #8]
100106fa:	784f      	ldrb	r7, [r1, #1]
100106fc:	72a5      	strb	r5, [r4, #10]
100106fe:	7027      	strb	r7, [r4, #0]
10010700:	898a      	ldrh	r2, [r1, #12]
10010702:	1c60      	adds	r0, r4, #1
10010704:	81a2      	strh	r2, [r4, #12]
10010706:	88db      	ldrh	r3, [r3, #6]
10010708:	3102      	adds	r1, #2
1001070a:	81e3      	strh	r3, [r4, #14]
1001070c:	89cb      	ldrh	r3, [r1, #14]
1001070e:	2206      	movs	r2, #6
10010710:	8223      	strh	r3, [r4, #16]
10010712:	4b2d      	ldr	r3, [pc, #180]	; (100107c8 <gapm_cmp_evt+0x144>)
10010714:	4798      	blx	r3
10010716:	2f00      	cmp	r7, #0
10010718:	d00a      	beq.n	10010730 <gapm_cmp_evt+0xac>
1001071a:	79a3      	ldrb	r3, [r4, #6]
1001071c:	223f      	movs	r2, #63	; 0x3f
1001071e:	1c19      	adds	r1, r3, #0
10010720:	3501      	adds	r5, #1
10010722:	4391      	bics	r1, r2
10010724:	29c0      	cmp	r1, #192	; 0xc0
10010726:	d003      	beq.n	10010730 <gapm_cmp_evt+0xac>
10010728:	065b      	lsls	r3, r3, #25
1001072a:	0fdb      	lsrs	r3, r3, #31
1001072c:	3502      	adds	r5, #2
1001072e:	1aed      	subs	r5, r5, r3
10010730:	2301      	movs	r3, #1
10010732:	425b      	negs	r3, r3
10010734:	7025      	strb	r5, [r4, #0]
10010736:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010738:	e038      	b.n	100107ac <gapm_cmp_evt+0x128>
1001073a:	700d      	strb	r5, [r1, #0]
1001073c:	e004      	b.n	10010748 <gapm_cmp_evt+0xc4>
1001073e:	2300      	movs	r3, #0
10010740:	2d45      	cmp	r5, #69	; 0x45
10010742:	d000      	beq.n	10010746 <gapm_cmp_evt+0xc2>
10010744:	1c2b      	adds	r3, r5, #0
10010746:	7023      	strb	r3, [r4, #0]
10010748:	2003      	movs	r0, #3
1001074a:	e032      	b.n	100107b2 <gapm_cmp_evt+0x12e>
1001074c:	4e1b      	ldr	r6, [pc, #108]	; (100107bc <gapm_cmp_evt+0x138>)
1001074e:	2100      	movs	r1, #0
10010750:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010752:	4b1b      	ldr	r3, [pc, #108]	; (100107c0 <gapm_cmp_evt+0x13c>)
10010754:	4798      	blx	r3
10010756:	2807      	cmp	r0, #7
10010758:	d818      	bhi.n	1001078c <gapm_cmp_evt+0x108>
1001075a:	2301      	movs	r3, #1
1001075c:	425b      	negs	r3, r3
1001075e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010760:	3313      	adds	r3, #19
10010762:	4358      	muls	r0, r3
10010764:	4917      	ldr	r1, [pc, #92]	; (100107c4 <gapm_cmp_evt+0x140>)
10010766:	1809      	adds	r1, r1, r0
10010768:	1c0b      	adds	r3, r1, #0
1001076a:	894a      	ldrh	r2, [r1, #10]
1001076c:	3308      	adds	r3, #8
1001076e:	8122      	strh	r2, [r4, #8]
10010770:	784a      	ldrb	r2, [r1, #1]
10010772:	72a5      	strb	r5, [r4, #10]
10010774:	7022      	strb	r2, [r4, #0]
10010776:	898a      	ldrh	r2, [r1, #12]
10010778:	1c60      	adds	r0, r4, #1
1001077a:	81a2      	strh	r2, [r4, #12]
1001077c:	88db      	ldrh	r3, [r3, #6]
1001077e:	3102      	adds	r1, #2
10010780:	81e3      	strh	r3, [r4, #14]
10010782:	89cb      	ldrh	r3, [r1, #14]
10010784:	2206      	movs	r2, #6
10010786:	8223      	strh	r3, [r4, #16]
10010788:	4b0f      	ldr	r3, [pc, #60]	; (100107c8 <gapm_cmp_evt+0x144>)
1001078a:	4798      	blx	r3
1001078c:	2200      	movs	r2, #0
1001078e:	7823      	ldrb	r3, [r4, #0]
10010790:	4293      	cmp	r3, r2
10010792:	d00a      	beq.n	100107aa <gapm_cmp_evt+0x126>
10010794:	79a3      	ldrb	r3, [r4, #6]
10010796:	323f      	adds	r2, #63	; 0x3f
10010798:	1c19      	adds	r1, r3, #0
1001079a:	4391      	bics	r1, r2
1001079c:	3a3e      	subs	r2, #62	; 0x3e
1001079e:	29c0      	cmp	r1, #192	; 0xc0
100107a0:	d003      	beq.n	100107aa <gapm_cmp_evt+0x126>
100107a2:	065b      	lsls	r3, r3, #25
100107a4:	0fdb      	lsrs	r3, r3, #31
100107a6:	3202      	adds	r2, #2
100107a8:	1ad2      	subs	r2, r2, r3
100107aa:	7022      	strb	r2, [r4, #0]
100107ac:	2005      	movs	r0, #5
100107ae:	e000      	b.n	100107b2 <gapm_cmp_evt+0x12e>
100107b0:	2000      	movs	r0, #0
100107b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107b4:	1001865f 	.word	0x1001865f
100107b8:	1000f9d5 	.word	0x1000f9d5
100107bc:	1001e5a2 	.word	0x1001e5a2
100107c0:	1000f999 	.word	0x1000f999
100107c4:	1001e512 	.word	0x1001e512
100107c8:	10018623 	.word	0x10018623

100107cc <gapm_adv_report_evt_handler>:
100107cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100107ce:	7843      	ldrb	r3, [r0, #1]
100107d0:	1c05      	adds	r5, r0, #0
100107d2:	9301      	str	r3, [sp, #4]
100107d4:	466b      	mov	r3, sp
100107d6:	1c0c      	adds	r4, r1, #0
100107d8:	791b      	ldrb	r3, [r3, #4]
100107da:	7806      	ldrb	r6, [r0, #0]
100107dc:	2206      	movs	r2, #6
100107de:	704b      	strb	r3, [r1, #1]
100107e0:	1c88      	adds	r0, r1, #2
100107e2:	4f1b      	ldr	r7, [pc, #108]	; (10010850 <gapm_adv_report_evt_handler+0x84>)
100107e4:	1ca9      	adds	r1, r5, #2
100107e6:	47b8      	blx	r7
100107e8:	1c20      	adds	r0, r4, #0
100107ea:	1c29      	adds	r1, r5, #0
100107ec:	7a2a      	ldrb	r2, [r5, #8]
100107ee:	3008      	adds	r0, #8
100107f0:	77c2      	strb	r2, [r0, #31]
100107f2:	3109      	adds	r1, #9
100107f4:	3528      	adds	r5, #40	; 0x28
100107f6:	47b8      	blx	r7
100107f8:	782b      	ldrb	r3, [r5, #0]
100107fa:	b25a      	sxtb	r2, r3
100107fc:	2a00      	cmp	r2, #0
100107fe:	da01      	bge.n	10010804 <gapm_adv_report_evt_handler+0x38>
10010800:	3301      	adds	r3, #1
10010802:	b2db      	uxtb	r3, r3
10010804:	1c22      	adds	r2, r4, #0
10010806:	3228      	adds	r2, #40	; 0x28
10010808:	7013      	strb	r3, [r2, #0]
1001080a:	2200      	movs	r2, #0
1001080c:	9b01      	ldr	r3, [sp, #4]
1001080e:	4293      	cmp	r3, r2
10010810:	d00a      	beq.n	10010828 <gapm_adv_report_evt_handler+0x5c>
10010812:	79e3      	ldrb	r3, [r4, #7]
10010814:	323f      	adds	r2, #63	; 0x3f
10010816:	1c19      	adds	r1, r3, #0
10010818:	4391      	bics	r1, r2
1001081a:	3a3e      	subs	r2, #62	; 0x3e
1001081c:	29c0      	cmp	r1, #192	; 0xc0
1001081e:	d003      	beq.n	10010828 <gapm_adv_report_evt_handler+0x5c>
10010820:	065b      	lsls	r3, r3, #25
10010822:	0fdb      	lsrs	r3, r3, #31
10010824:	3202      	adds	r2, #2
10010826:	1ad2      	subs	r2, r2, r3
10010828:	7062      	strb	r2, [r4, #1]
1001082a:	2e04      	cmp	r6, #4
1001082c:	d80f      	bhi.n	1001084e <gapm_adv_report_evt_handler+0x82>
1001082e:	1c30      	adds	r0, r6, #0
10010830:	f004 fd60 	bl	100152f4 <__gnu_thumb1_case_uqi>
10010834:	09070503 	.word	0x09070503
10010838:	0b          	.byte	0x0b
10010839:	00          	.byte	0x00
1001083a:	2300      	movs	r3, #0
1001083c:	e006      	b.n	1001084c <gapm_adv_report_evt_handler+0x80>
1001083e:	2301      	movs	r3, #1
10010840:	e004      	b.n	1001084c <gapm_adv_report_evt_handler+0x80>
10010842:	2302      	movs	r3, #2
10010844:	e002      	b.n	1001084c <gapm_adv_report_evt_handler+0x80>
10010846:	2303      	movs	r3, #3
10010848:	e000      	b.n	1001084c <gapm_adv_report_evt_handler+0x80>
1001084a:	2305      	movs	r3, #5
1001084c:	7023      	strb	r3, [r4, #0]
1001084e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010850:	10018623 	.word	0x10018623

10010854 <gapm_resolv_addr_cmd_handler>:
10010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010856:	2314      	movs	r3, #20
10010858:	4c12      	ldr	r4, [pc, #72]	; (100108a4 <gapm_resolv_addr_cmd_handler+0x50>)
1001085a:	1c17      	adds	r7, r2, #0
1001085c:	7023      	strb	r3, [r4, #0]
1001085e:	3b07      	subs	r3, #7
10010860:	7063      	strb	r3, [r4, #1]
10010862:	70a3      	strb	r3, [r4, #2]
10010864:	2300      	movs	r3, #0
10010866:	70e3      	strb	r3, [r4, #3]
10010868:	4b0f      	ldr	r3, [pc, #60]	; (100108a8 <gapm_resolv_addr_cmd_handler+0x54>)
1001086a:	1c05      	adds	r5, r0, #0
1001086c:	881a      	ldrh	r2, [r3, #0]
1001086e:	881b      	ldrh	r3, [r3, #0]
10010870:	4e0e      	ldr	r6, [pc, #56]	; (100108ac <gapm_resolv_addr_cmd_handler+0x58>)
10010872:	0a1b      	lsrs	r3, r3, #8
10010874:	7163      	strb	r3, [r4, #5]
10010876:	2317      	movs	r3, #23
10010878:	012d      	lsls	r5, r5, #4
1001087a:	7122      	strb	r2, [r4, #4]
1001087c:	7260      	strb	r0, [r4, #9]
1001087e:	2206      	movs	r2, #6
10010880:	480b      	ldr	r0, [pc, #44]	; (100108b0 <gapm_resolv_addr_cmd_handler+0x5c>)
10010882:	7223      	strb	r3, [r4, #8]
10010884:	47b0      	blx	r6
10010886:	1c39      	adds	r1, r7, #0
10010888:	1c2a      	adds	r2, r5, #0
1001088a:	480a      	ldr	r0, [pc, #40]	; (100108b4 <gapm_resolv_addr_cmd_handler+0x60>)
1001088c:	47b0      	blx	r6
1001088e:	1c29      	adds	r1, r5, #0
10010890:	3110      	adds	r1, #16
10010892:	1c0b      	adds	r3, r1, #0
10010894:	3b08      	subs	r3, #8
10010896:	71a3      	strb	r3, [r4, #6]
10010898:	121b      	asrs	r3, r3, #8
1001089a:	71e3      	strb	r3, [r4, #7]
1001089c:	1c20      	adds	r0, r4, #0
1001089e:	4b06      	ldr	r3, [pc, #24]	; (100108b8 <gapm_resolv_addr_cmd_handler+0x64>)
100108a0:	4798      	blx	r3
100108a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100108a4:	1001e880 	.word	0x1001e880
100108a8:	1001e510 	.word	0x1001e510
100108ac:	10018623 	.word	0x10018623
100108b0:	1001e88a 	.word	0x1001e88a
100108b4:	1001e890 	.word	0x1001e890
100108b8:	1000f7c9 	.word	0x1000f7c9

100108bc <gapm_addr_solved_ind_handler>:
100108bc:	b570      	push	{r4, r5, r6, lr}
100108be:	1c04      	adds	r4, r0, #0
100108c0:	1c08      	adds	r0, r1, #0
100108c2:	1c0d      	adds	r5, r1, #0
100108c4:	4e05      	ldr	r6, [pc, #20]	; (100108dc <gapm_addr_solved_ind_handler+0x20>)
100108c6:	1c21      	adds	r1, r4, #0
100108c8:	2206      	movs	r2, #6
100108ca:	3011      	adds	r0, #17
100108cc:	47b0      	blx	r6
100108ce:	1c68      	adds	r0, r5, #1
100108d0:	1da1      	adds	r1, r4, #6
100108d2:	2210      	movs	r2, #16
100108d4:	47b0      	blx	r6
100108d6:	2300      	movs	r3, #0
100108d8:	702b      	strb	r3, [r5, #0]
100108da:	bd70      	pop	{r4, r5, r6, pc}
100108dc:	10018623 	.word	0x10018623

100108e0 <gapm_profile_added_ind_handler>:
100108e0:	b510      	push	{r4, lr}
100108e2:	7843      	ldrb	r3, [r0, #1]
100108e4:	7902      	ldrb	r2, [r0, #4]
100108e6:	7944      	ldrb	r4, [r0, #5]
100108e8:	7800      	ldrb	r0, [r0, #0]
100108ea:	021b      	lsls	r3, r3, #8
100108ec:	4303      	orrs	r3, r0
100108ee:	2b1b      	cmp	r3, #27
100108f0:	d104      	bne.n	100108fc <gapm_profile_added_ind_handler+0x1c>
100108f2:	2300      	movs	r3, #0
100108f4:	700b      	strb	r3, [r1, #0]
100108f6:	0223      	lsls	r3, r4, #8
100108f8:	4313      	orrs	r3, r2
100108fa:	804b      	strh	r3, [r1, #2]
100108fc:	203b      	movs	r0, #59	; 0x3b
100108fe:	bd10      	pop	{r4, pc}

10010900 <gattc_read_req_ind_parser>:
10010900:	7843      	ldrb	r3, [r0, #1]
10010902:	7802      	ldrb	r2, [r0, #0]
10010904:	021b      	lsls	r3, r3, #8
10010906:	4313      	orrs	r3, r2
10010908:	804b      	strh	r3, [r1, #2]
1001090a:	4770      	bx	lr

1001090c <gattc_write_req_ind_parser>:
1001090c:	b508      	push	{r3, lr}
1001090e:	1c13      	adds	r3, r2, #0
10010910:	0a00      	lsrs	r0, r0, #8
10010912:	8010      	strh	r0, [r2, #0]
10010914:	784a      	ldrb	r2, [r1, #1]
10010916:	7808      	ldrb	r0, [r1, #0]
10010918:	0212      	lsls	r2, r2, #8
1001091a:	4302      	orrs	r2, r0
1001091c:	805a      	strh	r2, [r3, #2]
1001091e:	78ca      	ldrb	r2, [r1, #3]
10010920:	7888      	ldrb	r0, [r1, #2]
10010922:	0212      	lsls	r2, r2, #8
10010924:	4302      	orrs	r2, r0
10010926:	809a      	strh	r2, [r3, #4]
10010928:	794a      	ldrb	r2, [r1, #5]
1001092a:	7908      	ldrb	r0, [r1, #4]
1001092c:	0212      	lsls	r2, r2, #8
1001092e:	4302      	orrs	r2, r0
10010930:	80da      	strh	r2, [r3, #6]
10010932:	3308      	adds	r3, #8
10010934:	1c18      	adds	r0, r3, #0
10010936:	3106      	adds	r1, #6
10010938:	4b01      	ldr	r3, [pc, #4]	; (10010940 <gattc_write_req_ind_parser+0x34>)
1001093a:	4798      	blx	r3
1001093c:	bd08      	pop	{r3, pc}
1001093e:	46c0      	nop			; (mov r8, r8)
10010940:	10018623 	.word	0x10018623

10010944 <gattc_att_info_req_parser>:
10010944:	7843      	ldrb	r3, [r0, #1]
10010946:	7802      	ldrb	r2, [r0, #0]
10010948:	021b      	lsls	r3, r3, #8
1001094a:	4313      	orrs	r3, r2
1001094c:	800b      	strh	r3, [r1, #0]
1001094e:	4770      	bx	lr

10010950 <gattc_read_cfm>:
10010950:	b538      	push	{r3, r4, r5, lr}
10010952:	2514      	movs	r5, #20
10010954:	1c1c      	adds	r4, r3, #0
10010956:	4b14      	ldr	r3, [pc, #80]	; (100109a8 <gattc_read_cfm+0x58>)
10010958:	70d9      	strb	r1, [r3, #3]
1001095a:	4914      	ldr	r1, [pc, #80]	; (100109ac <gattc_read_cfm+0x5c>)
1001095c:	701d      	strb	r5, [r3, #0]
1001095e:	3d08      	subs	r5, #8
10010960:	705d      	strb	r5, [r3, #1]
10010962:	709d      	strb	r5, [r3, #2]
10010964:	880d      	ldrh	r5, [r1, #0]
10010966:	8809      	ldrh	r1, [r1, #0]
10010968:	7218      	strb	r0, [r3, #8]
1001096a:	0a09      	lsrs	r1, r1, #8
1001096c:	7159      	strb	r1, [r3, #5]
1001096e:	0a00      	lsrs	r0, r0, #8
10010970:	0a21      	lsrs	r1, r4, #8
10010972:	711d      	strb	r5, [r3, #4]
10010974:	7258      	strb	r0, [r3, #9]
10010976:	729c      	strb	r4, [r3, #10]
10010978:	72d9      	strb	r1, [r3, #11]
1001097a:	731a      	strb	r2, [r3, #12]
1001097c:	1c1d      	adds	r5, r3, #0
1001097e:	2c00      	cmp	r4, #0
10010980:	d007      	beq.n	10010992 <gattc_read_cfm+0x42>
10010982:	9904      	ldr	r1, [sp, #16]
10010984:	1c22      	adds	r2, r4, #0
10010986:	480a      	ldr	r0, [pc, #40]	; (100109b0 <gattc_read_cfm+0x60>)
10010988:	4b0a      	ldr	r3, [pc, #40]	; (100109b4 <gattc_read_cfm+0x64>)
1001098a:	340d      	adds	r4, #13
1001098c:	4798      	blx	r3
1001098e:	b2a1      	uxth	r1, r4
10010990:	e001      	b.n	10010996 <gattc_read_cfm+0x46>
10010992:	210e      	movs	r1, #14
10010994:	735c      	strb	r4, [r3, #13]
10010996:	1c0b      	adds	r3, r1, #0
10010998:	3b08      	subs	r3, #8
1001099a:	71ab      	strb	r3, [r5, #6]
1001099c:	121b      	asrs	r3, r3, #8
1001099e:	71eb      	strb	r3, [r5, #7]
100109a0:	1c28      	adds	r0, r5, #0
100109a2:	4b05      	ldr	r3, [pc, #20]	; (100109b8 <gattc_read_cfm+0x68>)
100109a4:	4798      	blx	r3
100109a6:	bd38      	pop	{r3, r4, r5, pc}
100109a8:	1001e880 	.word	0x1001e880
100109ac:	1001e510 	.word	0x1001e510
100109b0:	1001e88d 	.word	0x1001e88d
100109b4:	10018623 	.word	0x10018623
100109b8:	1000f7c9 	.word	0x1000f7c9

100109bc <gattc_write_cfm>:
100109bc:	4b0d      	ldr	r3, [pc, #52]	; (100109f4 <gattc_write_cfm+0x38>)
100109be:	b510      	push	{r4, lr}
100109c0:	729a      	strb	r2, [r3, #10]
100109c2:	2203      	movs	r2, #3
100109c4:	2416      	movs	r4, #22
100109c6:	719a      	strb	r2, [r3, #6]
100109c8:	2200      	movs	r2, #0
100109ca:	70d9      	strb	r1, [r3, #3]
100109cc:	490a      	ldr	r1, [pc, #40]	; (100109f8 <gattc_write_cfm+0x3c>)
100109ce:	701c      	strb	r4, [r3, #0]
100109d0:	3c0a      	subs	r4, #10
100109d2:	705c      	strb	r4, [r3, #1]
100109d4:	709c      	strb	r4, [r3, #2]
100109d6:	880c      	ldrh	r4, [r1, #0]
100109d8:	8809      	ldrh	r1, [r1, #0]
100109da:	7218      	strb	r0, [r3, #8]
100109dc:	0a09      	lsrs	r1, r1, #8
100109de:	0a00      	lsrs	r0, r0, #8
100109e0:	711c      	strb	r4, [r3, #4]
100109e2:	7159      	strb	r1, [r3, #5]
100109e4:	7258      	strb	r0, [r3, #9]
100109e6:	71da      	strb	r2, [r3, #7]
100109e8:	1c18      	adds	r0, r3, #0
100109ea:	210b      	movs	r1, #11
100109ec:	4b03      	ldr	r3, [pc, #12]	; (100109fc <gattc_write_cfm+0x40>)
100109ee:	4798      	blx	r3
100109f0:	bd10      	pop	{r4, pc}
100109f2:	46c0      	nop			; (mov r8, r8)
100109f4:	1001e880 	.word	0x1001e880
100109f8:	1001e510 	.word	0x1001e510
100109fc:	1000f7c9 	.word	0x1000f7c9

10010a00 <gattc_att_info_cfm>:
10010a00:	b538      	push	{r3, r4, r5, lr}
10010a02:	4c0e      	ldr	r4, [pc, #56]	; (10010a3c <gattc_att_info_cfm+0x3c>)
10010a04:	2518      	movs	r5, #24
10010a06:	7323      	strb	r3, [r4, #12]
10010a08:	2305      	movs	r3, #5
10010a0a:	71a3      	strb	r3, [r4, #6]
10010a0c:	2300      	movs	r3, #0
10010a0e:	70e1      	strb	r1, [r4, #3]
10010a10:	490b      	ldr	r1, [pc, #44]	; (10010a40 <gattc_att_info_cfm+0x40>)
10010a12:	7025      	strb	r5, [r4, #0]
10010a14:	3d0c      	subs	r5, #12
10010a16:	7065      	strb	r5, [r4, #1]
10010a18:	70a5      	strb	r5, [r4, #2]
10010a1a:	880d      	ldrh	r5, [r1, #0]
10010a1c:	8809      	ldrh	r1, [r1, #0]
10010a1e:	7220      	strb	r0, [r4, #8]
10010a20:	0a09      	lsrs	r1, r1, #8
10010a22:	0a00      	lsrs	r0, r0, #8
10010a24:	7161      	strb	r1, [r4, #5]
10010a26:	7260      	strb	r0, [r4, #9]
10010a28:	72a2      	strb	r2, [r4, #10]
10010a2a:	71e3      	strb	r3, [r4, #7]
10010a2c:	0a12      	lsrs	r2, r2, #8
10010a2e:	1c20      	adds	r0, r4, #0
10010a30:	210d      	movs	r1, #13
10010a32:	4b04      	ldr	r3, [pc, #16]	; (10010a44 <gattc_att_info_cfm+0x44>)
10010a34:	7125      	strb	r5, [r4, #4]
10010a36:	72e2      	strb	r2, [r4, #11]
10010a38:	4798      	blx	r3
10010a3a:	bd38      	pop	{r3, r4, r5, pc}
10010a3c:	1001e880 	.word	0x1001e880
10010a40:	1001e510 	.word	0x1001e510
10010a44:	1000f7c9 	.word	0x1000f7c9

10010a48 <gattc_event_cfm_handler>:
10010a48:	220e      	movs	r2, #14
10010a4a:	b508      	push	{r3, lr}
10010a4c:	4b0b      	ldr	r3, [pc, #44]	; (10010a7c <gattc_event_cfm_handler+0x34>)
10010a4e:	701a      	strb	r2, [r3, #0]
10010a50:	3a02      	subs	r2, #2
10010a52:	705a      	strb	r2, [r3, #1]
10010a54:	709a      	strb	r2, [r3, #2]
10010a56:	4a0a      	ldr	r2, [pc, #40]	; (10010a80 <gattc_event_cfm_handler+0x38>)
10010a58:	70d8      	strb	r0, [r3, #3]
10010a5a:	8810      	ldrh	r0, [r2, #0]
10010a5c:	8812      	ldrh	r2, [r2, #0]
10010a5e:	7219      	strb	r1, [r3, #8]
10010a60:	0a12      	lsrs	r2, r2, #8
10010a62:	715a      	strb	r2, [r3, #5]
10010a64:	2202      	movs	r2, #2
10010a66:	719a      	strb	r2, [r3, #6]
10010a68:	2200      	movs	r2, #0
10010a6a:	0a09      	lsrs	r1, r1, #8
10010a6c:	7118      	strb	r0, [r3, #4]
10010a6e:	7259      	strb	r1, [r3, #9]
10010a70:	71da      	strb	r2, [r3, #7]
10010a72:	1c18      	adds	r0, r3, #0
10010a74:	210a      	movs	r1, #10
10010a76:	4b03      	ldr	r3, [pc, #12]	; (10010a84 <gattc_event_cfm_handler+0x3c>)
10010a78:	4798      	blx	r3
10010a7a:	bd08      	pop	{r3, pc}
10010a7c:	1001e880 	.word	0x1001e880
10010a80:	1001e510 	.word	0x1001e510
10010a84:	1000f7c9 	.word	0x1000f7c9

10010a88 <gattc_disc_svc_ind_parser>:
10010a88:	b570      	push	{r4, r5, r6, lr}
10010a8a:	1c15      	adds	r5, r2, #0
10010a8c:	0a00      	lsrs	r0, r0, #8
10010a8e:	8010      	strh	r0, [r2, #0]
10010a90:	784b      	ldrb	r3, [r1, #1]
10010a92:	780a      	ldrb	r2, [r1, #0]
10010a94:	021b      	lsls	r3, r3, #8
10010a96:	4313      	orrs	r3, r2
10010a98:	806b      	strh	r3, [r5, #2]
10010a9a:	78cb      	ldrb	r3, [r1, #3]
10010a9c:	788a      	ldrb	r2, [r1, #2]
10010a9e:	021b      	lsls	r3, r3, #8
10010aa0:	4313      	orrs	r3, r2
10010aa2:	80ab      	strh	r3, [r5, #4]
10010aa4:	790e      	ldrb	r6, [r1, #4]
10010aa6:	4b05      	ldr	r3, [pc, #20]	; (10010abc <gattc_disc_svc_ind_parser+0x34>)
10010aa8:	1c30      	adds	r0, r6, #0
10010aaa:	1c0c      	adds	r4, r1, #0
10010aac:	4798      	blx	r3
10010aae:	1c32      	adds	r2, r6, #0
10010ab0:	71a8      	strb	r0, [r5, #6]
10010ab2:	1d61      	adds	r1, r4, #5
10010ab4:	1de8      	adds	r0, r5, #7
10010ab6:	4b02      	ldr	r3, [pc, #8]	; (10010ac0 <gattc_disc_svc_ind_parser+0x38>)
10010ab8:	4798      	blx	r3
10010aba:	bd70      	pop	{r4, r5, r6, pc}
10010abc:	1000f181 	.word	0x1000f181
10010ac0:	10018623 	.word	0x10018623

10010ac4 <gattc_disc_svc_incl_ind_parser>:
10010ac4:	b570      	push	{r4, r5, r6, lr}
10010ac6:	1c15      	adds	r5, r2, #0
10010ac8:	0a00      	lsrs	r0, r0, #8
10010aca:	8010      	strh	r0, [r2, #0]
10010acc:	784b      	ldrb	r3, [r1, #1]
10010ace:	780a      	ldrb	r2, [r1, #0]
10010ad0:	021b      	lsls	r3, r3, #8
10010ad2:	4313      	orrs	r3, r2
10010ad4:	806b      	strh	r3, [r5, #2]
10010ad6:	78cb      	ldrb	r3, [r1, #3]
10010ad8:	788a      	ldrb	r2, [r1, #2]
10010ada:	021b      	lsls	r3, r3, #8
10010adc:	4313      	orrs	r3, r2
10010ade:	80ab      	strh	r3, [r5, #4]
10010ae0:	794b      	ldrb	r3, [r1, #5]
10010ae2:	790a      	ldrb	r2, [r1, #4]
10010ae4:	021b      	lsls	r3, r3, #8
10010ae6:	4313      	orrs	r3, r2
10010ae8:	80eb      	strh	r3, [r5, #6]
10010aea:	798e      	ldrb	r6, [r1, #6]
10010aec:	4b05      	ldr	r3, [pc, #20]	; (10010b04 <gattc_disc_svc_incl_ind_parser+0x40>)
10010aee:	1c30      	adds	r0, r6, #0
10010af0:	1c0c      	adds	r4, r1, #0
10010af2:	4798      	blx	r3
10010af4:	7228      	strb	r0, [r5, #8]
10010af6:	1c28      	adds	r0, r5, #0
10010af8:	1c32      	adds	r2, r6, #0
10010afa:	1de1      	adds	r1, r4, #7
10010afc:	4b02      	ldr	r3, [pc, #8]	; (10010b08 <gattc_disc_svc_incl_ind_parser+0x44>)
10010afe:	3009      	adds	r0, #9
10010b00:	4798      	blx	r3
10010b02:	bd70      	pop	{r4, r5, r6, pc}
10010b04:	1000f181 	.word	0x1000f181
10010b08:	10018623 	.word	0x10018623

10010b0c <gattc_disc_char_ind_parser>:
10010b0c:	b570      	push	{r4, r5, r6, lr}
10010b0e:	1c15      	adds	r5, r2, #0
10010b10:	0a00      	lsrs	r0, r0, #8
10010b12:	8010      	strh	r0, [r2, #0]
10010b14:	784b      	ldrb	r3, [r1, #1]
10010b16:	780a      	ldrb	r2, [r1, #0]
10010b18:	021b      	lsls	r3, r3, #8
10010b1a:	4313      	orrs	r3, r2
10010b1c:	806b      	strh	r3, [r5, #2]
10010b1e:	78cb      	ldrb	r3, [r1, #3]
10010b20:	788a      	ldrb	r2, [r1, #2]
10010b22:	021b      	lsls	r3, r3, #8
10010b24:	4313      	orrs	r3, r2
10010b26:	80ab      	strh	r3, [r5, #4]
10010b28:	790b      	ldrb	r3, [r1, #4]
10010b2a:	1c0c      	adds	r4, r1, #0
10010b2c:	71ab      	strb	r3, [r5, #6]
10010b2e:	794e      	ldrb	r6, [r1, #5]
10010b30:	4b05      	ldr	r3, [pc, #20]	; (10010b48 <gattc_disc_char_ind_parser+0x3c>)
10010b32:	1c30      	adds	r0, r6, #0
10010b34:	4798      	blx	r3
10010b36:	71e8      	strb	r0, [r5, #7]
10010b38:	1c28      	adds	r0, r5, #0
10010b3a:	1c32      	adds	r2, r6, #0
10010b3c:	1da1      	adds	r1, r4, #6
10010b3e:	4b03      	ldr	r3, [pc, #12]	; (10010b4c <gattc_disc_char_ind_parser+0x40>)
10010b40:	3008      	adds	r0, #8
10010b42:	4798      	blx	r3
10010b44:	bd70      	pop	{r4, r5, r6, pc}
10010b46:	46c0      	nop			; (mov r8, r8)
10010b48:	1000f181 	.word	0x1000f181
10010b4c:	10018623 	.word	0x10018623

10010b50 <gattc_disc_char_desc_ind_parser>:
10010b50:	b570      	push	{r4, r5, r6, lr}
10010b52:	1c15      	adds	r5, r2, #0
10010b54:	0a00      	lsrs	r0, r0, #8
10010b56:	8010      	strh	r0, [r2, #0]
10010b58:	784b      	ldrb	r3, [r1, #1]
10010b5a:	780a      	ldrb	r2, [r1, #0]
10010b5c:	021b      	lsls	r3, r3, #8
10010b5e:	4313      	orrs	r3, r2
10010b60:	806b      	strh	r3, [r5, #2]
10010b62:	788e      	ldrb	r6, [r1, #2]
10010b64:	4b05      	ldr	r3, [pc, #20]	; (10010b7c <gattc_disc_char_desc_ind_parser+0x2c>)
10010b66:	1c30      	adds	r0, r6, #0
10010b68:	1c0c      	adds	r4, r1, #0
10010b6a:	4798      	blx	r3
10010b6c:	1c32      	adds	r2, r6, #0
10010b6e:	7128      	strb	r0, [r5, #4]
10010b70:	1ce1      	adds	r1, r4, #3
10010b72:	1d68      	adds	r0, r5, #5
10010b74:	4b02      	ldr	r3, [pc, #8]	; (10010b80 <gattc_disc_char_desc_ind_parser+0x30>)
10010b76:	4798      	blx	r3
10010b78:	bd70      	pop	{r4, r5, r6, pc}
10010b7a:	46c0      	nop			; (mov r8, r8)
10010b7c:	1000f181 	.word	0x1000f181
10010b80:	10018623 	.word	0x10018623

10010b84 <gattc_event_ind_and_notification_parser>:
10010b84:	b510      	push	{r4, lr}
10010b86:	780c      	ldrb	r4, [r1, #0]
10010b88:	1c13      	adds	r3, r2, #0
10010b8a:	2c12      	cmp	r4, #18
10010b8c:	d10e      	bne.n	10010bac <gattc_event_ind_and_notification_parser+0x28>
10010b8e:	0a00      	lsrs	r0, r0, #8
10010b90:	8010      	strh	r0, [r2, #0]
10010b92:	788a      	ldrb	r2, [r1, #2]
10010b94:	709a      	strb	r2, [r3, #2]
10010b96:	7948      	ldrb	r0, [r1, #5]
10010b98:	790c      	ldrb	r4, [r1, #4]
10010b9a:	0200      	lsls	r0, r0, #8
10010b9c:	4320      	orrs	r0, r4
10010b9e:	8098      	strh	r0, [r3, #4]
10010ba0:	3106      	adds	r1, #6
10010ba2:	1d98      	adds	r0, r3, #6
10010ba4:	4b0b      	ldr	r3, [pc, #44]	; (10010bd4 <gattc_event_ind_and_notification_parser+0x50>)
10010ba6:	4798      	blx	r3
10010ba8:	221b      	movs	r2, #27
10010baa:	e010      	b.n	10010bce <gattc_event_ind_and_notification_parser+0x4a>
10010bac:	2200      	movs	r2, #0
10010bae:	2c13      	cmp	r4, #19
10010bb0:	d10d      	bne.n	10010bce <gattc_event_ind_and_notification_parser+0x4a>
10010bb2:	0a00      	lsrs	r0, r0, #8
10010bb4:	8018      	strh	r0, [r3, #0]
10010bb6:	788a      	ldrb	r2, [r1, #2]
10010bb8:	709a      	strb	r2, [r3, #2]
10010bba:	7908      	ldrb	r0, [r1, #4]
10010bbc:	78cc      	ldrb	r4, [r1, #3]
10010bbe:	0200      	lsls	r0, r0, #8
10010bc0:	4320      	orrs	r0, r4
10010bc2:	8098      	strh	r0, [r3, #4]
10010bc4:	3106      	adds	r1, #6
10010bc6:	1d98      	adds	r0, r3, #6
10010bc8:	4b02      	ldr	r3, [pc, #8]	; (10010bd4 <gattc_event_ind_and_notification_parser+0x50>)
10010bca:	4798      	blx	r3
10010bcc:	221c      	movs	r2, #28
10010bce:	1c10      	adds	r0, r2, #0
10010bd0:	bd10      	pop	{r4, pc}
10010bd2:	46c0      	nop			; (mov r8, r8)
10010bd4:	10018623 	.word	0x10018623

10010bd8 <gattc_complete_evt_handler>:
10010bd8:	b500      	push	{lr}
10010bda:	0a00      	lsrs	r0, r0, #8
10010bdc:	8010      	strh	r0, [r2, #0]
10010bde:	7808      	ldrb	r0, [r1, #0]
10010be0:	7090      	strb	r0, [r2, #2]
10010be2:	784b      	ldrb	r3, [r1, #1]
10010be4:	3801      	subs	r0, #1
10010be6:	70d3      	strb	r3, [r2, #3]
10010be8:	2813      	cmp	r0, #19
10010bea:	d82c      	bhi.n	10010c46 <gattc_complete_evt_handler+0x6e>
10010bec:	f004 fb82 	bl	100152f4 <__gnu_thumb1_case_uqi>
10010bf0:	0a0a0a0c 	.word	0x0a0a0a0c
10010bf4:	210a0a0a 	.word	0x210a0a0a
10010bf8:	111f2121 	.word	0x111f2121
10010bfc:	2b111111 	.word	0x2b111111
10010c00:	2919132b 	.word	0x2919132b
10010c04:	2017      	movs	r0, #23
10010c06:	e01f      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c08:	2024      	movs	r0, #36	; 0x24
10010c0a:	2b00      	cmp	r3, #0
10010c0c:	d11c      	bne.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c0e:	3017      	adds	r0, #23
10010c10:	e01a      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c12:	2025      	movs	r0, #37	; 0x25
10010c14:	e018      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c16:	4a0d      	ldr	r2, [pc, #52]	; (10010c4c <gattc_complete_evt_handler+0x74>)
10010c18:	201d      	movs	r0, #29
10010c1a:	6813      	ldr	r3, [r2, #0]
10010c1c:	3b01      	subs	r3, #1
10010c1e:	6013      	str	r3, [r2, #0]
10010c20:	e012      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c22:	4a0a      	ldr	r2, [pc, #40]	; (10010c4c <gattc_complete_evt_handler+0x74>)
10010c24:	201e      	movs	r0, #30
10010c26:	6813      	ldr	r3, [r2, #0]
10010c28:	3b01      	subs	r3, #1
10010c2a:	6013      	str	r3, [r2, #0]
10010c2c:	e00c      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c2e:	2019      	movs	r0, #25
10010c30:	e00a      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c32:	203b      	movs	r0, #59	; 0x3b
10010c34:	2b00      	cmp	r3, #0
10010c36:	d007      	beq.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c38:	2182      	movs	r1, #130	; 0x82
10010c3a:	0089      	lsls	r1, r1, #2
10010c3c:	5453      	strb	r3, [r2, r1]
10010c3e:	3823      	subs	r0, #35	; 0x23
10010c40:	e002      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c42:	2021      	movs	r0, #33	; 0x21
10010c44:	e000      	b.n	10010c48 <gattc_complete_evt_handler+0x70>
10010c46:	2000      	movs	r0, #0
10010c48:	bd00      	pop	{pc}
10010c4a:	46c0      	nop			; (mov r8, r8)
10010c4c:	1001d540 	.word	0x1001d540

10010c50 <gattc_event_mtu_changed_ind_parser>:
10010c50:	0a00      	lsrs	r0, r0, #8
10010c52:	8010      	strh	r0, [r2, #0]
10010c54:	784b      	ldrb	r3, [r1, #1]
10010c56:	7809      	ldrb	r1, [r1, #0]
10010c58:	021b      	lsls	r3, r3, #8
10010c5a:	430b      	orrs	r3, r1
10010c5c:	8053      	strh	r3, [r2, #2]
10010c5e:	4770      	bx	lr

10010c60 <gattc_read_ind_parser>:
10010c60:	0a00      	lsrs	r0, r0, #8
10010c62:	b508      	push	{r3, lr}
10010c64:	8010      	strh	r0, [r2, #0]
10010c66:	1c13      	adds	r3, r2, #0
10010c68:	2282      	movs	r2, #130	; 0x82
10010c6a:	2000      	movs	r0, #0
10010c6c:	0092      	lsls	r2, r2, #2
10010c6e:	5498      	strb	r0, [r3, r2]
10010c70:	784a      	ldrb	r2, [r1, #1]
10010c72:	7808      	ldrb	r0, [r1, #0]
10010c74:	0212      	lsls	r2, r2, #8
10010c76:	4302      	orrs	r2, r0
10010c78:	805a      	strh	r2, [r3, #2]
10010c7a:	78ca      	ldrb	r2, [r1, #3]
10010c7c:	7888      	ldrb	r0, [r1, #2]
10010c7e:	0212      	lsls	r2, r2, #8
10010c80:	4302      	orrs	r2, r0
10010c82:	80da      	strh	r2, [r3, #6]
10010c84:	794a      	ldrb	r2, [r1, #5]
10010c86:	7908      	ldrb	r0, [r1, #4]
10010c88:	0212      	lsls	r2, r2, #8
10010c8a:	4302      	orrs	r2, r0
10010c8c:	809a      	strh	r2, [r3, #4]
10010c8e:	3308      	adds	r3, #8
10010c90:	1c18      	adds	r0, r3, #0
10010c92:	3106      	adds	r1, #6
10010c94:	4b01      	ldr	r3, [pc, #4]	; (10010c9c <gattc_read_ind_parser+0x3c>)
10010c96:	4798      	blx	r3
10010c98:	bd08      	pop	{r3, pc}
10010c9a:	46c0      	nop			; (mov r8, r8)
10010c9c:	10018623 	.word	0x10018623

10010ca0 <gattc_svc_changed_cfg_ind_parser>:
10010ca0:	0a00      	lsrs	r0, r0, #8
10010ca2:	8010      	strh	r0, [r2, #0]
10010ca4:	784b      	ldrb	r3, [r1, #1]
10010ca6:	7809      	ldrb	r1, [r1, #0]
10010ca8:	021b      	lsls	r3, r3, #8
10010caa:	430b      	orrs	r3, r1
10010cac:	8053      	strh	r3, [r2, #2]
10010cae:	4770      	bx	lr

10010cb0 <init_gattc_task_module>:
10010cb0:	2300      	movs	r3, #0
10010cb2:	4a02      	ldr	r2, [pc, #8]	; (10010cbc <init_gattc_task_module+0xc>)
10010cb4:	8013      	strh	r3, [r2, #0]
10010cb6:	4a02      	ldr	r2, [pc, #8]	; (10010cc0 <init_gattc_task_module+0x10>)
10010cb8:	8013      	strh	r3, [r2, #0]
10010cba:	4770      	bx	lr
10010cbc:	1001d53a 	.word	0x1001d53a
10010cc0:	1001d53c 	.word	0x1001d53c

10010cc4 <gattm_att_set_value_req_handler>:
10010cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010cc6:	466b      	mov	r3, sp
10010cc8:	1dde      	adds	r6, r3, #7
10010cca:	2300      	movs	r3, #0
10010ccc:	1c0d      	adds	r5, r1, #0
10010cce:	210c      	movs	r1, #12
10010cd0:	270b      	movs	r7, #11
10010cd2:	4c17      	ldr	r4, [pc, #92]	; (10010d30 <gattm_att_set_value_req_handler+0x6c>)
10010cd4:	7033      	strb	r3, [r6, #0]
10010cd6:	70e3      	strb	r3, [r4, #3]
10010cd8:	4b16      	ldr	r3, [pc, #88]	; (10010d34 <gattm_att_set_value_req_handler+0x70>)
10010cda:	7021      	strb	r1, [r4, #0]
10010cdc:	8819      	ldrh	r1, [r3, #0]
10010cde:	881b      	ldrh	r3, [r3, #0]
10010ce0:	7220      	strb	r0, [r4, #8]
10010ce2:	0a1b      	lsrs	r3, r3, #8
10010ce4:	7163      	strb	r3, [r4, #5]
10010ce6:	0a00      	lsrs	r0, r0, #8
10010ce8:	0a2b      	lsrs	r3, r5, #8
10010cea:	7121      	strb	r1, [r4, #4]
10010cec:	7260      	strb	r0, [r4, #9]
10010cee:	1c11      	adds	r1, r2, #0
10010cf0:	72a5      	strb	r5, [r4, #10]
10010cf2:	1c2a      	adds	r2, r5, #0
10010cf4:	72e3      	strb	r3, [r4, #11]
10010cf6:	350c      	adds	r5, #12
10010cf8:	4b0f      	ldr	r3, [pc, #60]	; (10010d38 <gattm_att_set_value_req_handler+0x74>)
10010cfa:	4810      	ldr	r0, [pc, #64]	; (10010d3c <gattm_att_set_value_req_handler+0x78>)
10010cfc:	7067      	strb	r7, [r4, #1]
10010cfe:	70a7      	strb	r7, [r4, #2]
10010d00:	4798      	blx	r3
10010d02:	b2a9      	uxth	r1, r5
10010d04:	4b0e      	ldr	r3, [pc, #56]	; (10010d40 <gattm_att_set_value_req_handler+0x7c>)
10010d06:	4d0f      	ldr	r5, [pc, #60]	; (10010d44 <gattm_att_set_value_req_handler+0x80>)
10010d08:	1c20      	adds	r0, r4, #0
10010d0a:	802b      	strh	r3, [r5, #0]
10010d0c:	1c0b      	adds	r3, r1, #0
10010d0e:	3b08      	subs	r3, #8
10010d10:	71a3      	strb	r3, [r4, #6]
10010d12:	121b      	asrs	r3, r3, #8
10010d14:	71e3      	strb	r3, [r4, #7]
10010d16:	4b0c      	ldr	r3, [pc, #48]	; (10010d48 <gattm_att_set_value_req_handler+0x84>)
10010d18:	80af      	strh	r7, [r5, #4]
10010d1a:	4798      	blx	r3
10010d1c:	1c30      	adds	r0, r6, #0
10010d1e:	4b0b      	ldr	r3, [pc, #44]	; (10010d4c <gattm_att_set_value_req_handler+0x88>)
10010d20:	4798      	blx	r3
10010d22:	7833      	ldrb	r3, [r6, #0]
10010d24:	20e2      	movs	r0, #226	; 0xe2
10010d26:	2b00      	cmp	r3, #0
10010d28:	d101      	bne.n	10010d2e <gattm_att_set_value_req_handler+0x6a>
10010d2a:	68ab      	ldr	r3, [r5, #8]
10010d2c:	7898      	ldrb	r0, [r3, #2]
10010d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010d30:	1001e880 	.word	0x1001e880
10010d34:	1001e510 	.word	0x1001e510
10010d38:	10018623 	.word	0x10018623
10010d3c:	1001e88c 	.word	0x1001e88c
10010d40:	00000b0d 	.word	0x00000b0d
10010d44:	1001e504 	.word	0x1001e504
10010d48:	1000f7c9 	.word	0x1000f7c9
10010d4c:	1000f82d 	.word	0x1000f82d

10010d50 <gattm_att_get_value_req_handler>:
10010d50:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d52:	b085      	sub	sp, #20
10010d54:	9201      	str	r2, [sp, #4]
10010d56:	220a      	movs	r2, #10
10010d58:	1c04      	adds	r4, r0, #0
10010d5a:	481d      	ldr	r0, [pc, #116]	; (10010dd0 <gattm_att_get_value_req_handler+0x80>)
10010d5c:	ab02      	add	r3, sp, #8
10010d5e:	1dde      	adds	r6, r3, #7
10010d60:	7002      	strb	r2, [r0, #0]
10010d62:	2300      	movs	r3, #0
10010d64:	220b      	movs	r2, #11
10010d66:	4d1b      	ldr	r5, [pc, #108]	; (10010dd4 <gattm_att_get_value_req_handler+0x84>)
10010d68:	1c0f      	adds	r7, r1, #0
10010d6a:	8829      	ldrh	r1, [r5, #0]
10010d6c:	882d      	ldrh	r5, [r5, #0]
10010d6e:	7101      	strb	r1, [r0, #4]
10010d70:	0a2d      	lsrs	r5, r5, #8
10010d72:	7145      	strb	r5, [r0, #5]
10010d74:	0a25      	lsrs	r5, r4, #8
10010d76:	7245      	strb	r5, [r0, #9]
10010d78:	4917      	ldr	r1, [pc, #92]	; (10010dd8 <gattm_att_get_value_req_handler+0x88>)
10010d7a:	4d18      	ldr	r5, [pc, #96]	; (10010ddc <gattm_att_get_value_req_handler+0x8c>)
10010d7c:	7033      	strb	r3, [r6, #0]
10010d7e:	7042      	strb	r2, [r0, #1]
10010d80:	7082      	strb	r2, [r0, #2]
10010d82:	70c3      	strb	r3, [r0, #3]
10010d84:	8029      	strh	r1, [r5, #0]
10010d86:	80aa      	strh	r2, [r5, #4]
10010d88:	71c3      	strb	r3, [r0, #7]
10010d8a:	3a09      	subs	r2, #9
10010d8c:	210a      	movs	r1, #10
10010d8e:	4b14      	ldr	r3, [pc, #80]	; (10010de0 <gattm_att_get_value_req_handler+0x90>)
10010d90:	7182      	strb	r2, [r0, #6]
10010d92:	7204      	strb	r4, [r0, #8]
10010d94:	4798      	blx	r3
10010d96:	1c30      	adds	r0, r6, #0
10010d98:	4b12      	ldr	r3, [pc, #72]	; (10010de4 <gattm_att_get_value_req_handler+0x94>)
10010d9a:	4798      	blx	r3
10010d9c:	7833      	ldrb	r3, [r6, #0]
10010d9e:	20e2      	movs	r0, #226	; 0xe2
10010da0:	2b00      	cmp	r3, #0
10010da2:	d112      	bne.n	10010dca <gattm_att_get_value_req_handler+0x7a>
10010da4:	68a9      	ldr	r1, [r5, #8]
10010da6:	9801      	ldr	r0, [sp, #4]
10010da8:	784d      	ldrb	r5, [r1, #1]
10010daa:	780b      	ldrb	r3, [r1, #0]
10010dac:	78ca      	ldrb	r2, [r1, #3]
10010dae:	022d      	lsls	r5, r5, #8
10010db0:	431d      	orrs	r5, r3
10010db2:	788b      	ldrb	r3, [r1, #2]
10010db4:	0212      	lsls	r2, r2, #8
10010db6:	431a      	orrs	r2, r3
10010db8:	803a      	strh	r2, [r7, #0]
10010dba:	790e      	ldrb	r6, [r1, #4]
10010dbc:	4b0a      	ldr	r3, [pc, #40]	; (10010de8 <gattm_att_get_value_req_handler+0x98>)
10010dbe:	3105      	adds	r1, #5
10010dc0:	4798      	blx	r3
10010dc2:	20e2      	movs	r0, #226	; 0xe2
10010dc4:	42ac      	cmp	r4, r5
10010dc6:	d100      	bne.n	10010dca <gattm_att_get_value_req_handler+0x7a>
10010dc8:	1c30      	adds	r0, r6, #0
10010dca:	b005      	add	sp, #20
10010dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010dce:	46c0      	nop			; (mov r8, r8)
10010dd0:	1001e880 	.word	0x1001e880
10010dd4:	1001e510 	.word	0x1001e510
10010dd8:	00000b0b 	.word	0x00000b0b
10010ddc:	1001e504 	.word	0x1001e504
10010de0:	1000f7c9 	.word	0x1000f7c9
10010de4:	1000f82d 	.word	0x1000f82d
10010de8:	10018623 	.word	0x10018623

10010dec <htpt_enable_rsp_handler>:
10010dec:	780b      	ldrb	r3, [r1, #0]
10010dee:	7013      	strb	r3, [r2, #0]
10010df0:	784b      	ldrb	r3, [r1, #1]
10010df2:	7053      	strb	r3, [r2, #1]
10010df4:	4770      	bx	lr

10010df6 <htpt_temp_send_rsp_handler>:
10010df6:	780b      	ldrb	r3, [r1, #0]
10010df8:	7013      	strb	r3, [r2, #0]
10010dfa:	4770      	bx	lr

10010dfc <htpt_meas_intv_upd_rsp_handler>:
10010dfc:	780b      	ldrb	r3, [r1, #0]
10010dfe:	7013      	strb	r3, [r2, #0]
10010e00:	4770      	bx	lr

10010e02 <htpt_meas_intv_chg_req_ind_handler>:
10010e02:	78cb      	ldrb	r3, [r1, #3]
10010e04:	7889      	ldrb	r1, [r1, #2]
10010e06:	021b      	lsls	r3, r3, #8
10010e08:	430b      	orrs	r3, r1
10010e0a:	8013      	strh	r3, [r2, #0]
10010e0c:	4770      	bx	lr

10010e0e <htpt_cfg_indntf_ind_handler>:
10010e0e:	780b      	ldrb	r3, [r1, #0]
10010e10:	7013      	strb	r3, [r2, #0]
10010e12:	784b      	ldrb	r3, [r1, #1]
10010e14:	7053      	strb	r3, [r2, #1]
10010e16:	4770      	bx	lr

10010e18 <atan2f>:
10010e18:	b510      	push	{r4, lr}
10010e1a:	f000 f853 	bl	10010ec4 <__ieee754_atan2f>
10010e1e:	bd10      	pop	{r4, pc}

10010e20 <sqrtf>:
10010e20:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e22:	2600      	movs	r6, #0
10010e24:	b08d      	sub	sp, #52	; 0x34
10010e26:	1c04      	adds	r4, r0, #0
10010e28:	f000 f8de 	bl	10010fe8 <__ieee754_sqrtf>
10010e2c:	4b23      	ldr	r3, [pc, #140]	; (10010ebc <sqrtf+0x9c>)
10010e2e:	1c05      	adds	r5, r0, #0
10010e30:	579e      	ldrsb	r6, [r3, r6]
10010e32:	1c73      	adds	r3, r6, #1
10010e34:	d00b      	beq.n	10010e4e <sqrtf+0x2e>
10010e36:	1c21      	adds	r1, r4, #0
10010e38:	1c20      	adds	r0, r4, #0
10010e3a:	f005 fb37 	bl	100164ac <__aeabi_fcmpun>
10010e3e:	1e07      	subs	r7, r0, #0
10010e40:	d105      	bne.n	10010e4e <sqrtf+0x2e>
10010e42:	2100      	movs	r1, #0
10010e44:	1c20      	adds	r0, r4, #0
10010e46:	f004 fc25 	bl	10015694 <__aeabi_fcmplt>
10010e4a:	2800      	cmp	r0, #0
10010e4c:	d102      	bne.n	10010e54 <sqrtf+0x34>
10010e4e:	1c28      	adds	r0, r5, #0
10010e50:	b00d      	add	sp, #52	; 0x34
10010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e54:	2301      	movs	r3, #1
10010e56:	9302      	str	r3, [sp, #8]
10010e58:	4b19      	ldr	r3, [pc, #100]	; (10010ec0 <sqrtf+0xa0>)
10010e5a:	1c20      	adds	r0, r4, #0
10010e5c:	9303      	str	r3, [sp, #12]
10010e5e:	970a      	str	r7, [sp, #40]	; 0x28
10010e60:	f007 f9b2 	bl	100181c8 <__aeabi_f2d>
10010e64:	2200      	movs	r2, #0
10010e66:	9006      	str	r0, [sp, #24]
10010e68:	9107      	str	r1, [sp, #28]
10010e6a:	9004      	str	r0, [sp, #16]
10010e6c:	9105      	str	r1, [sp, #20]
10010e6e:	2300      	movs	r3, #0
10010e70:	2e00      	cmp	r6, #0
10010e72:	d014      	beq.n	10010e9e <sqrtf+0x7e>
10010e74:	0010      	movs	r0, r2
10010e76:	0019      	movs	r1, r3
10010e78:	f005 ff04 	bl	10016c84 <__aeabi_ddiv>
10010e7c:	9008      	str	r0, [sp, #32]
10010e7e:	9109      	str	r1, [sp, #36]	; 0x24
10010e80:	2e02      	cmp	r6, #2
10010e82:	d10e      	bne.n	10010ea2 <sqrtf+0x82>
10010e84:	f007 fb88 	bl	10018598 <__errno>
10010e88:	2321      	movs	r3, #33	; 0x21
10010e8a:	6003      	str	r3, [r0, #0]
10010e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010e8e:	9301      	str	r3, [sp, #4]
10010e90:	2b00      	cmp	r3, #0
10010e92:	d10c      	bne.n	10010eae <sqrtf+0x8e>
10010e94:	9808      	ldr	r0, [sp, #32]
10010e96:	9909      	ldr	r1, [sp, #36]	; 0x24
10010e98:	f007 f9ea 	bl	10018270 <__aeabi_d2f>
10010e9c:	e7d8      	b.n	10010e50 <sqrtf+0x30>
10010e9e:	9208      	str	r2, [sp, #32]
10010ea0:	9309      	str	r3, [sp, #36]	; 0x24
10010ea2:	a802      	add	r0, sp, #8
10010ea4:	f000 f8fc 	bl	100110a0 <matherr>
10010ea8:	2800      	cmp	r0, #0
10010eaa:	d1ef      	bne.n	10010e8c <sqrtf+0x6c>
10010eac:	e7ea      	b.n	10010e84 <sqrtf+0x64>
10010eae:	f007 fb73 	bl	10018598 <__errno>
10010eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010eb4:	9301      	str	r3, [sp, #4]
10010eb6:	6003      	str	r3, [r0, #0]
10010eb8:	e7ec      	b.n	10010e94 <sqrtf+0x74>
10010eba:	46c0      	nop			; (mov r8, r8)
10010ebc:	1001b978 	.word	0x1001b978
10010ec0:	1001b300 	.word	0x1001b300

10010ec4 <__ieee754_atan2f>:
10010ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ec6:	004b      	lsls	r3, r1, #1
10010ec8:	4647      	mov	r7, r8
10010eca:	1c0c      	adds	r4, r1, #0
10010ecc:	21ff      	movs	r1, #255	; 0xff
10010ece:	b480      	push	{r7}
10010ed0:	085b      	lsrs	r3, r3, #1
10010ed2:	05c9      	lsls	r1, r1, #23
10010ed4:	428b      	cmp	r3, r1
10010ed6:	dc15      	bgt.n	10010f04 <__ieee754_atan2f+0x40>
10010ed8:	0042      	lsls	r2, r0, #1
10010eda:	4680      	mov	r8, r0
10010edc:	0852      	lsrs	r2, r2, #1
10010ede:	428a      	cmp	r2, r1
10010ee0:	dc10      	bgt.n	10010f04 <__ieee754_atan2f+0x40>
10010ee2:	25fe      	movs	r5, #254	; 0xfe
10010ee4:	05ad      	lsls	r5, r5, #22
10010ee6:	42ac      	cmp	r4, r5
10010ee8:	d03e      	beq.n	10010f68 <__ieee754_atan2f+0xa4>
10010eea:	2702      	movs	r7, #2
10010eec:	17a5      	asrs	r5, r4, #30
10010eee:	403d      	ands	r5, r7
10010ef0:	0fc7      	lsrs	r7, r0, #31
10010ef2:	433d      	orrs	r5, r7
10010ef4:	2a00      	cmp	r2, #0
10010ef6:	d10c      	bne.n	10010f12 <__ieee754_atan2f+0x4e>
10010ef8:	2d02      	cmp	r5, #2
10010efa:	d031      	beq.n	10010f60 <__ieee754_atan2f+0x9c>
10010efc:	2d03      	cmp	r5, #3
10010efe:	d105      	bne.n	10010f0c <__ieee754_atan2f+0x48>
10010f00:	4830      	ldr	r0, [pc, #192]	; (10010fc4 <__ieee754_atan2f+0x100>)
10010f02:	e003      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f04:	1c01      	adds	r1, r0, #0
10010f06:	1c20      	adds	r0, r4, #0
10010f08:	f004 fcf6 	bl	100158f8 <__aeabi_fadd>
10010f0c:	bc04      	pop	{r2}
10010f0e:	4690      	mov	r8, r2
10010f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f12:	2b00      	cmp	r3, #0
10010f14:	d01d      	beq.n	10010f52 <__ieee754_atan2f+0x8e>
10010f16:	428b      	cmp	r3, r1
10010f18:	d029      	beq.n	10010f6e <__ieee754_atan2f+0xaa>
10010f1a:	428a      	cmp	r2, r1
10010f1c:	d019      	beq.n	10010f52 <__ieee754_atan2f+0x8e>
10010f1e:	1ad3      	subs	r3, r2, r3
10010f20:	15db      	asrs	r3, r3, #23
10010f22:	2b3c      	cmp	r3, #60	; 0x3c
10010f24:	dc1a      	bgt.n	10010f5c <__ieee754_atan2f+0x98>
10010f26:	2c00      	cmp	r4, #0
10010f28:	db3a      	blt.n	10010fa0 <__ieee754_atan2f+0xdc>
10010f2a:	1c21      	adds	r1, r4, #0
10010f2c:	f004 fe5a 	bl	10015be4 <__aeabi_fdiv>
10010f30:	f000 f9da 	bl	100112e8 <fabsf>
10010f34:	f000 f8bc 	bl	100110b0 <atanf>
10010f38:	2d01      	cmp	r5, #1
10010f3a:	d02c      	beq.n	10010f96 <__ieee754_atan2f+0xd2>
10010f3c:	2d02      	cmp	r5, #2
10010f3e:	d022      	beq.n	10010f86 <__ieee754_atan2f+0xc2>
10010f40:	2d00      	cmp	r5, #0
10010f42:	d0e3      	beq.n	10010f0c <__ieee754_atan2f+0x48>
10010f44:	4920      	ldr	r1, [pc, #128]	; (10010fc8 <__ieee754_atan2f+0x104>)
10010f46:	f004 fcd7 	bl	100158f8 <__aeabi_fadd>
10010f4a:	4920      	ldr	r1, [pc, #128]	; (10010fcc <__ieee754_atan2f+0x108>)
10010f4c:	f005 f928 	bl	100161a0 <__aeabi_fsub>
10010f50:	e7dc      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f52:	4643      	mov	r3, r8
10010f54:	2b00      	cmp	r3, #0
10010f56:	db05      	blt.n	10010f64 <__ieee754_atan2f+0xa0>
10010f58:	481d      	ldr	r0, [pc, #116]	; (10010fd0 <__ieee754_atan2f+0x10c>)
10010f5a:	e7d7      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f5c:	481c      	ldr	r0, [pc, #112]	; (10010fd0 <__ieee754_atan2f+0x10c>)
10010f5e:	e7eb      	b.n	10010f38 <__ieee754_atan2f+0x74>
10010f60:	481a      	ldr	r0, [pc, #104]	; (10010fcc <__ieee754_atan2f+0x108>)
10010f62:	e7d3      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f64:	481b      	ldr	r0, [pc, #108]	; (10010fd4 <__ieee754_atan2f+0x110>)
10010f66:	e7d1      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f68:	f000 f8a2 	bl	100110b0 <atanf>
10010f6c:	e7ce      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f6e:	429a      	cmp	r2, r3
10010f70:	d01a      	beq.n	10010fa8 <__ieee754_atan2f+0xe4>
10010f72:	2d02      	cmp	r5, #2
10010f74:	d0f4      	beq.n	10010f60 <__ieee754_atan2f+0x9c>
10010f76:	2d03      	cmp	r5, #3
10010f78:	d0c2      	beq.n	10010f00 <__ieee754_atan2f+0x3c>
10010f7a:	2000      	movs	r0, #0
10010f7c:	2d01      	cmp	r5, #1
10010f7e:	d1c5      	bne.n	10010f0c <__ieee754_atan2f+0x48>
10010f80:	2080      	movs	r0, #128	; 0x80
10010f82:	0600      	lsls	r0, r0, #24
10010f84:	e7c2      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f86:	4910      	ldr	r1, [pc, #64]	; (10010fc8 <__ieee754_atan2f+0x104>)
10010f88:	f004 fcb6 	bl	100158f8 <__aeabi_fadd>
10010f8c:	1c01      	adds	r1, r0, #0
10010f8e:	480f      	ldr	r0, [pc, #60]	; (10010fcc <__ieee754_atan2f+0x108>)
10010f90:	f005 f906 	bl	100161a0 <__aeabi_fsub>
10010f94:	e7ba      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010f96:	2380      	movs	r3, #128	; 0x80
10010f98:	061b      	lsls	r3, r3, #24
10010f9a:	469c      	mov	ip, r3
10010f9c:	4460      	add	r0, ip
10010f9e:	e7b5      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010fa0:	333c      	adds	r3, #60	; 0x3c
10010fa2:	dac2      	bge.n	10010f2a <__ieee754_atan2f+0x66>
10010fa4:	2000      	movs	r0, #0
10010fa6:	e7c7      	b.n	10010f38 <__ieee754_atan2f+0x74>
10010fa8:	2d02      	cmp	r5, #2
10010faa:	d005      	beq.n	10010fb8 <__ieee754_atan2f+0xf4>
10010fac:	2d03      	cmp	r5, #3
10010fae:	d007      	beq.n	10010fc0 <__ieee754_atan2f+0xfc>
10010fb0:	2d01      	cmp	r5, #1
10010fb2:	d003      	beq.n	10010fbc <__ieee754_atan2f+0xf8>
10010fb4:	4808      	ldr	r0, [pc, #32]	; (10010fd8 <__ieee754_atan2f+0x114>)
10010fb6:	e7a9      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010fb8:	4808      	ldr	r0, [pc, #32]	; (10010fdc <__ieee754_atan2f+0x118>)
10010fba:	e7a7      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010fbc:	4808      	ldr	r0, [pc, #32]	; (10010fe0 <__ieee754_atan2f+0x11c>)
10010fbe:	e7a5      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010fc0:	4808      	ldr	r0, [pc, #32]	; (10010fe4 <__ieee754_atan2f+0x120>)
10010fc2:	e7a3      	b.n	10010f0c <__ieee754_atan2f+0x48>
10010fc4:	c0490fdb 	.word	0xc0490fdb
10010fc8:	33bbbd2e 	.word	0x33bbbd2e
10010fcc:	40490fdb 	.word	0x40490fdb
10010fd0:	3fc90fdb 	.word	0x3fc90fdb
10010fd4:	bfc90fdb 	.word	0xbfc90fdb
10010fd8:	3f490fdb 	.word	0x3f490fdb
10010fdc:	4016cbe4 	.word	0x4016cbe4
10010fe0:	bf490fdb 	.word	0xbf490fdb
10010fe4:	c016cbe4 	.word	0xc016cbe4

10010fe8 <__ieee754_sqrtf>:
10010fe8:	492b      	ldr	r1, [pc, #172]	; (10011098 <__ieee754_sqrtf+0xb0>)
10010fea:	0042      	lsls	r2, r0, #1
10010fec:	b570      	push	{r4, r5, r6, lr}
10010fee:	0003      	movs	r3, r0
10010ff0:	1c04      	adds	r4, r0, #0
10010ff2:	0852      	lsrs	r2, r2, #1
10010ff4:	428a      	cmp	r2, r1
10010ff6:	d83a      	bhi.n	1001106e <__ieee754_sqrtf+0x86>
10010ff8:	2a00      	cmp	r2, #0
10010ffa:	d037      	beq.n	1001106c <__ieee754_sqrtf+0x84>
10010ffc:	2800      	cmp	r0, #0
10010ffe:	db3f      	blt.n	10011080 <__ieee754_sqrtf+0x98>
10011000:	4926      	ldr	r1, [pc, #152]	; (1001109c <__ieee754_sqrtf+0xb4>)
10011002:	15c0      	asrs	r0, r0, #23
10011004:	428a      	cmp	r2, r1
10011006:	d80b      	bhi.n	10011020 <__ieee754_sqrtf+0x38>
10011008:	3101      	adds	r1, #1
1001100a:	4221      	tst	r1, r4
1001100c:	d13f      	bne.n	1001108e <__ieee754_sqrtf+0xa6>
1001100e:	2200      	movs	r2, #0
10011010:	000c      	movs	r4, r1
10011012:	e000      	b.n	10011016 <__ieee754_sqrtf+0x2e>
10011014:	000a      	movs	r2, r1
10011016:	005b      	lsls	r3, r3, #1
10011018:	1c51      	adds	r1, r2, #1
1001101a:	4223      	tst	r3, r4
1001101c:	d0fa      	beq.n	10011014 <__ieee754_sqrtf+0x2c>
1001101e:	1a80      	subs	r0, r0, r2
10011020:	2280      	movs	r2, #128	; 0x80
10011022:	025b      	lsls	r3, r3, #9
10011024:	0a5b      	lsrs	r3, r3, #9
10011026:	0412      	lsls	r2, r2, #16
10011028:	387f      	subs	r0, #127	; 0x7f
1001102a:	4313      	orrs	r3, r2
1001102c:	07c2      	lsls	r2, r0, #31
1001102e:	d425      	bmi.n	1001107c <__ieee754_sqrtf+0x94>
10011030:	2280      	movs	r2, #128	; 0x80
10011032:	2119      	movs	r1, #25
10011034:	2500      	movs	r5, #0
10011036:	2600      	movs	r6, #0
10011038:	1040      	asrs	r0, r0, #1
1001103a:	005b      	lsls	r3, r3, #1
1001103c:	0452      	lsls	r2, r2, #17
1001103e:	18b4      	adds	r4, r6, r2
10011040:	429c      	cmp	r4, r3
10011042:	dc02      	bgt.n	1001104a <__ieee754_sqrtf+0x62>
10011044:	18a6      	adds	r6, r4, r2
10011046:	1b1b      	subs	r3, r3, r4
10011048:	18ad      	adds	r5, r5, r2
1001104a:	3901      	subs	r1, #1
1001104c:	005b      	lsls	r3, r3, #1
1001104e:	0852      	lsrs	r2, r2, #1
10011050:	2900      	cmp	r1, #0
10011052:	d1f4      	bne.n	1001103e <__ieee754_sqrtf+0x56>
10011054:	2b00      	cmp	r3, #0
10011056:	d002      	beq.n	1001105e <__ieee754_sqrtf+0x76>
10011058:	2301      	movs	r3, #1
1001105a:	402b      	ands	r3, r5
1001105c:	18ed      	adds	r5, r5, r3
1001105e:	23fc      	movs	r3, #252	; 0xfc
10011060:	059b      	lsls	r3, r3, #22
10011062:	469c      	mov	ip, r3
10011064:	106d      	asrs	r5, r5, #1
10011066:	4465      	add	r5, ip
10011068:	05c0      	lsls	r0, r0, #23
1001106a:	1940      	adds	r0, r0, r5
1001106c:	bd70      	pop	{r4, r5, r6, pc}
1001106e:	1c01      	adds	r1, r0, #0
10011070:	f004 ff82 	bl	10015f78 <__aeabi_fmul>
10011074:	1c21      	adds	r1, r4, #0
10011076:	f004 fc3f 	bl	100158f8 <__aeabi_fadd>
1001107a:	e7f7      	b.n	1001106c <__ieee754_sqrtf+0x84>
1001107c:	005b      	lsls	r3, r3, #1
1001107e:	e7d7      	b.n	10011030 <__ieee754_sqrtf+0x48>
10011080:	1c01      	adds	r1, r0, #0
10011082:	f005 f88d 	bl	100161a0 <__aeabi_fsub>
10011086:	1c01      	adds	r1, r0, #0
10011088:	f004 fdac 	bl	10015be4 <__aeabi_fdiv>
1001108c:	e7ee      	b.n	1001106c <__ieee754_sqrtf+0x84>
1001108e:	2201      	movs	r2, #1
10011090:	4252      	negs	r2, r2
10011092:	1a80      	subs	r0, r0, r2
10011094:	e7c4      	b.n	10011020 <__ieee754_sqrtf+0x38>
10011096:	46c0      	nop			; (mov r8, r8)
10011098:	7f7fffff 	.word	0x7f7fffff
1001109c:	007fffff 	.word	0x007fffff

100110a0 <matherr>:
100110a0:	2000      	movs	r0, #0
100110a2:	4770      	bx	lr

100110a4 <nan>:
100110a4:	2000      	movs	r0, #0
100110a6:	4901      	ldr	r1, [pc, #4]	; (100110ac <nan+0x8>)
100110a8:	4770      	bx	lr
100110aa:	46c0      	nop			; (mov r8, r8)
100110ac:	7ff80000 	.word	0x7ff80000

100110b0 <atanf>:
100110b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100110b2:	4647      	mov	r7, r8
100110b4:	4b75      	ldr	r3, [pc, #468]	; (1001128c <atanf+0x1dc>)
100110b6:	0044      	lsls	r4, r0, #1
100110b8:	b480      	push	{r7}
100110ba:	1c05      	adds	r5, r0, #0
100110bc:	0007      	movs	r7, r0
100110be:	0864      	lsrs	r4, r4, #1
100110c0:	429c      	cmp	r4, r3
100110c2:	dd0b      	ble.n	100110dc <atanf+0x2c>
100110c4:	23ff      	movs	r3, #255	; 0xff
100110c6:	05db      	lsls	r3, r3, #23
100110c8:	429c      	cmp	r4, r3
100110ca:	dd00      	ble.n	100110ce <atanf+0x1e>
100110cc:	e072      	b.n	100111b4 <atanf+0x104>
100110ce:	2800      	cmp	r0, #0
100110d0:	dc00      	bgt.n	100110d4 <atanf+0x24>
100110d2:	e09d      	b.n	10011210 <atanf+0x160>
100110d4:	486e      	ldr	r0, [pc, #440]	; (10011290 <atanf+0x1e0>)
100110d6:	bc04      	pop	{r2}
100110d8:	4690      	mov	r8, r2
100110da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110dc:	4b6d      	ldr	r3, [pc, #436]	; (10011294 <atanf+0x1e4>)
100110de:	429c      	cmp	r4, r3
100110e0:	dc79      	bgt.n	100111d6 <atanf+0x126>
100110e2:	4b6d      	ldr	r3, [pc, #436]	; (10011298 <atanf+0x1e8>)
100110e4:	429c      	cmp	r4, r3
100110e6:	dd69      	ble.n	100111bc <atanf+0x10c>
100110e8:	2601      	movs	r6, #1
100110ea:	4276      	negs	r6, r6
100110ec:	1c29      	adds	r1, r5, #0
100110ee:	1c28      	adds	r0, r5, #0
100110f0:	f004 ff42 	bl	10015f78 <__aeabi_fmul>
100110f4:	1c01      	adds	r1, r0, #0
100110f6:	4680      	mov	r8, r0
100110f8:	f004 ff3e 	bl	10015f78 <__aeabi_fmul>
100110fc:	4967      	ldr	r1, [pc, #412]	; (1001129c <atanf+0x1ec>)
100110fe:	1c04      	adds	r4, r0, #0
10011100:	f004 ff3a 	bl	10015f78 <__aeabi_fmul>
10011104:	4966      	ldr	r1, [pc, #408]	; (100112a0 <atanf+0x1f0>)
10011106:	f004 fbf7 	bl	100158f8 <__aeabi_fadd>
1001110a:	1c21      	adds	r1, r4, #0
1001110c:	f004 ff34 	bl	10015f78 <__aeabi_fmul>
10011110:	4964      	ldr	r1, [pc, #400]	; (100112a4 <atanf+0x1f4>)
10011112:	f004 fbf1 	bl	100158f8 <__aeabi_fadd>
10011116:	1c21      	adds	r1, r4, #0
10011118:	f004 ff2e 	bl	10015f78 <__aeabi_fmul>
1001111c:	4962      	ldr	r1, [pc, #392]	; (100112a8 <atanf+0x1f8>)
1001111e:	f004 fbeb 	bl	100158f8 <__aeabi_fadd>
10011122:	1c21      	adds	r1, r4, #0
10011124:	f004 ff28 	bl	10015f78 <__aeabi_fmul>
10011128:	4960      	ldr	r1, [pc, #384]	; (100112ac <atanf+0x1fc>)
1001112a:	f004 fbe5 	bl	100158f8 <__aeabi_fadd>
1001112e:	1c21      	adds	r1, r4, #0
10011130:	f004 ff22 	bl	10015f78 <__aeabi_fmul>
10011134:	495e      	ldr	r1, [pc, #376]	; (100112b0 <atanf+0x200>)
10011136:	f004 fbdf 	bl	100158f8 <__aeabi_fadd>
1001113a:	4641      	mov	r1, r8
1001113c:	f004 ff1c 	bl	10015f78 <__aeabi_fmul>
10011140:	495c      	ldr	r1, [pc, #368]	; (100112b4 <atanf+0x204>)
10011142:	4680      	mov	r8, r0
10011144:	1c20      	adds	r0, r4, #0
10011146:	f004 ff17 	bl	10015f78 <__aeabi_fmul>
1001114a:	495b      	ldr	r1, [pc, #364]	; (100112b8 <atanf+0x208>)
1001114c:	f005 f828 	bl	100161a0 <__aeabi_fsub>
10011150:	1c21      	adds	r1, r4, #0
10011152:	f004 ff11 	bl	10015f78 <__aeabi_fmul>
10011156:	4959      	ldr	r1, [pc, #356]	; (100112bc <atanf+0x20c>)
10011158:	f005 f822 	bl	100161a0 <__aeabi_fsub>
1001115c:	1c21      	adds	r1, r4, #0
1001115e:	f004 ff0b 	bl	10015f78 <__aeabi_fmul>
10011162:	4957      	ldr	r1, [pc, #348]	; (100112c0 <atanf+0x210>)
10011164:	f005 f81c 	bl	100161a0 <__aeabi_fsub>
10011168:	1c21      	adds	r1, r4, #0
1001116a:	f004 ff05 	bl	10015f78 <__aeabi_fmul>
1001116e:	4955      	ldr	r1, [pc, #340]	; (100112c4 <atanf+0x214>)
10011170:	f005 f816 	bl	100161a0 <__aeabi_fsub>
10011174:	1c21      	adds	r1, r4, #0
10011176:	f004 feff 	bl	10015f78 <__aeabi_fmul>
1001117a:	1c01      	adds	r1, r0, #0
1001117c:	1c73      	adds	r3, r6, #1
1001117e:	d049      	beq.n	10011214 <atanf+0x164>
10011180:	4640      	mov	r0, r8
10011182:	f004 fbb9 	bl	100158f8 <__aeabi_fadd>
10011186:	1c29      	adds	r1, r5, #0
10011188:	f004 fef6 	bl	10015f78 <__aeabi_fmul>
1001118c:	4b4e      	ldr	r3, [pc, #312]	; (100112c8 <atanf+0x218>)
1001118e:	00b6      	lsls	r6, r6, #2
10011190:	58f1      	ldr	r1, [r6, r3]
10011192:	f005 f805 	bl	100161a0 <__aeabi_fsub>
10011196:	1c29      	adds	r1, r5, #0
10011198:	f005 f802 	bl	100161a0 <__aeabi_fsub>
1001119c:	4b4b      	ldr	r3, [pc, #300]	; (100112cc <atanf+0x21c>)
1001119e:	1c01      	adds	r1, r0, #0
100111a0:	58f0      	ldr	r0, [r6, r3]
100111a2:	f004 fffd 	bl	100161a0 <__aeabi_fsub>
100111a6:	2f00      	cmp	r7, #0
100111a8:	da95      	bge.n	100110d6 <atanf+0x26>
100111aa:	2380      	movs	r3, #128	; 0x80
100111ac:	061b      	lsls	r3, r3, #24
100111ae:	469c      	mov	ip, r3
100111b0:	4460      	add	r0, ip
100111b2:	e790      	b.n	100110d6 <atanf+0x26>
100111b4:	1c01      	adds	r1, r0, #0
100111b6:	f004 fb9f 	bl	100158f8 <__aeabi_fadd>
100111ba:	e78c      	b.n	100110d6 <atanf+0x26>
100111bc:	4944      	ldr	r1, [pc, #272]	; (100112d0 <atanf+0x220>)
100111be:	f004 fb9b 	bl	100158f8 <__aeabi_fadd>
100111c2:	21fe      	movs	r1, #254	; 0xfe
100111c4:	0589      	lsls	r1, r1, #22
100111c6:	f004 fa79 	bl	100156bc <__aeabi_fcmpgt>
100111ca:	0003      	movs	r3, r0
100111cc:	1c28      	adds	r0, r5, #0
100111ce:	2b00      	cmp	r3, #0
100111d0:	d000      	beq.n	100111d4 <atanf+0x124>
100111d2:	e780      	b.n	100110d6 <atanf+0x26>
100111d4:	e788      	b.n	100110e8 <atanf+0x38>
100111d6:	f000 f887 	bl	100112e8 <fabsf>
100111da:	4b3e      	ldr	r3, [pc, #248]	; (100112d4 <atanf+0x224>)
100111dc:	1c05      	adds	r5, r0, #0
100111de:	429c      	cmp	r4, r3
100111e0:	dc23      	bgt.n	1001122a <atanf+0x17a>
100111e2:	4b3d      	ldr	r3, [pc, #244]	; (100112d8 <atanf+0x228>)
100111e4:	429c      	cmp	r4, r3
100111e6:	dc3f      	bgt.n	10011268 <atanf+0x1b8>
100111e8:	1c01      	adds	r1, r0, #0
100111ea:	f004 fb85 	bl	100158f8 <__aeabi_fadd>
100111ee:	21fe      	movs	r1, #254	; 0xfe
100111f0:	0589      	lsls	r1, r1, #22
100111f2:	f004 ffd5 	bl	100161a0 <__aeabi_fsub>
100111f6:	2180      	movs	r1, #128	; 0x80
100111f8:	1c04      	adds	r4, r0, #0
100111fa:	05c9      	lsls	r1, r1, #23
100111fc:	1c28      	adds	r0, r5, #0
100111fe:	f004 fb7b 	bl	100158f8 <__aeabi_fadd>
10011202:	1c01      	adds	r1, r0, #0
10011204:	1c20      	adds	r0, r4, #0
10011206:	f004 fced 	bl	10015be4 <__aeabi_fdiv>
1001120a:	2600      	movs	r6, #0
1001120c:	1c05      	adds	r5, r0, #0
1001120e:	e76d      	b.n	100110ec <atanf+0x3c>
10011210:	4832      	ldr	r0, [pc, #200]	; (100112dc <atanf+0x22c>)
10011212:	e760      	b.n	100110d6 <atanf+0x26>
10011214:	4640      	mov	r0, r8
10011216:	f004 fb6f 	bl	100158f8 <__aeabi_fadd>
1001121a:	1c29      	adds	r1, r5, #0
1001121c:	f004 feac 	bl	10015f78 <__aeabi_fmul>
10011220:	1c01      	adds	r1, r0, #0
10011222:	1c28      	adds	r0, r5, #0
10011224:	f004 ffbc 	bl	100161a0 <__aeabi_fsub>
10011228:	e755      	b.n	100110d6 <atanf+0x26>
1001122a:	4b2d      	ldr	r3, [pc, #180]	; (100112e0 <atanf+0x230>)
1001122c:	429c      	cmp	r4, r3
1001122e:	dc14      	bgt.n	1001125a <atanf+0x1aa>
10011230:	21ff      	movs	r1, #255	; 0xff
10011232:	0589      	lsls	r1, r1, #22
10011234:	f004 ffb4 	bl	100161a0 <__aeabi_fsub>
10011238:	21ff      	movs	r1, #255	; 0xff
1001123a:	1c04      	adds	r4, r0, #0
1001123c:	0589      	lsls	r1, r1, #22
1001123e:	1c28      	adds	r0, r5, #0
10011240:	f004 fe9a 	bl	10015f78 <__aeabi_fmul>
10011244:	21fe      	movs	r1, #254	; 0xfe
10011246:	0589      	lsls	r1, r1, #22
10011248:	f004 fb56 	bl	100158f8 <__aeabi_fadd>
1001124c:	1c01      	adds	r1, r0, #0
1001124e:	1c20      	adds	r0, r4, #0
10011250:	f004 fcc8 	bl	10015be4 <__aeabi_fdiv>
10011254:	2602      	movs	r6, #2
10011256:	1c05      	adds	r5, r0, #0
10011258:	e748      	b.n	100110ec <atanf+0x3c>
1001125a:	1c01      	adds	r1, r0, #0
1001125c:	4821      	ldr	r0, [pc, #132]	; (100112e4 <atanf+0x234>)
1001125e:	f004 fcc1 	bl	10015be4 <__aeabi_fdiv>
10011262:	2603      	movs	r6, #3
10011264:	1c05      	adds	r5, r0, #0
10011266:	e741      	b.n	100110ec <atanf+0x3c>
10011268:	21fe      	movs	r1, #254	; 0xfe
1001126a:	0589      	lsls	r1, r1, #22
1001126c:	f004 ff98 	bl	100161a0 <__aeabi_fsub>
10011270:	21fe      	movs	r1, #254	; 0xfe
10011272:	1c04      	adds	r4, r0, #0
10011274:	0589      	lsls	r1, r1, #22
10011276:	1c28      	adds	r0, r5, #0
10011278:	f004 fb3e 	bl	100158f8 <__aeabi_fadd>
1001127c:	1c01      	adds	r1, r0, #0
1001127e:	1c20      	adds	r0, r4, #0
10011280:	f004 fcb0 	bl	10015be4 <__aeabi_fdiv>
10011284:	2601      	movs	r6, #1
10011286:	1c05      	adds	r5, r0, #0
10011288:	e730      	b.n	100110ec <atanf+0x3c>
1001128a:	46c0      	nop			; (mov r8, r8)
1001128c:	507fffff 	.word	0x507fffff
10011290:	3fc90fdb 	.word	0x3fc90fdb
10011294:	3edfffff 	.word	0x3edfffff
10011298:	30ffffff 	.word	0x30ffffff
1001129c:	3c8569d7 	.word	0x3c8569d7
100112a0:	3d4bda59 	.word	0x3d4bda59
100112a4:	3d886b35 	.word	0x3d886b35
100112a8:	3dba2e6e 	.word	0x3dba2e6e
100112ac:	3e124925 	.word	0x3e124925
100112b0:	3eaaaaab 	.word	0x3eaaaaab
100112b4:	bd15a221 	.word	0xbd15a221
100112b8:	3d6ef16b 	.word	0x3d6ef16b
100112bc:	3d9d8795 	.word	0x3d9d8795
100112c0:	3de38e38 	.word	0x3de38e38
100112c4:	3e4ccccd 	.word	0x3e4ccccd
100112c8:	1001b308 	.word	0x1001b308
100112cc:	1001b318 	.word	0x1001b318
100112d0:	7149f2ca 	.word	0x7149f2ca
100112d4:	3f97ffff 	.word	0x3f97ffff
100112d8:	3f2fffff 	.word	0x3f2fffff
100112dc:	bfc90fdb 	.word	0xbfc90fdb
100112e0:	401bffff 	.word	0x401bffff
100112e4:	bf800000 	.word	0xbf800000

100112e8 <fabsf>:
100112e8:	0040      	lsls	r0, r0, #1
100112ea:	0840      	lsrs	r0, r0, #1
100112ec:	4770      	bx	lr
100112ee:	46c0      	nop			; (mov r8, r8)

100112f0 <inv_fast_nomot_parameter.part.3>:
100112f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100112f2:	2318      	movs	r3, #24
100112f4:	4644      	mov	r4, r8
100112f6:	4680      	mov	r8, r0
100112f8:	4443      	add	r3, r8
100112fa:	465f      	mov	r7, fp
100112fc:	469b      	mov	fp, r3
100112fe:	2300      	movs	r3, #0
10011300:	4656      	mov	r6, sl
10011302:	464d      	mov	r5, r9
10011304:	469a      	mov	sl, r3
10011306:	4699      	mov	r9, r3
10011308:	b4f0      	push	{r4, r5, r6, r7}
1001130a:	b08b      	sub	sp, #44	; 0x2c
1001130c:	4643      	mov	r3, r8
1001130e:	681e      	ldr	r6, [r3, #0]
10011310:	685f      	ldr	r7, [r3, #4]
10011312:	69dc      	ldr	r4, [r3, #28]
10011314:	699b      	ldr	r3, [r3, #24]
10011316:	1c32      	adds	r2, r6, #0
10011318:	1c25      	adds	r5, r4, #0
1001131a:	1c30      	adds	r0, r6, #0
1001131c:	1c1c      	adds	r4, r3, #0
1001131e:	1c39      	adds	r1, r7, #0
10011320:	1c3b      	adds	r3, r7, #0
10011322:	f004 fa03 	bl	1001572c <__aeabi_lmul>
10011326:	1c22      	adds	r2, r4, #0
10011328:	9002      	str	r0, [sp, #8]
1001132a:	9103      	str	r1, [sp, #12]
1001132c:	1c2b      	adds	r3, r5, #0
1001132e:	1c20      	adds	r0, r4, #0
10011330:	1c29      	adds	r1, r5, #0
10011332:	9408      	str	r4, [sp, #32]
10011334:	9509      	str	r5, [sp, #36]	; 0x24
10011336:	f004 f9f9 	bl	1001572c <__aeabi_lmul>
1001133a:	1c04      	adds	r4, r0, #0
1001133c:	1c0d      	adds	r5, r1, #0
1001133e:	0f83      	lsrs	r3, r0, #30
10011340:	0089      	lsls	r1, r1, #2
10011342:	4319      	orrs	r1, r3
10011344:	9105      	str	r1, [sp, #20]
10011346:	0081      	lsls	r1, r0, #2
10011348:	9104      	str	r1, [sp, #16]
1001134a:	9904      	ldr	r1, [sp, #16]
1001134c:	9a05      	ldr	r2, [sp, #20]
1001134e:	1a64      	subs	r4, r4, r1
10011350:	4195      	sbcs	r5, r2
10011352:	4641      	mov	r1, r8
10011354:	6cca      	ldr	r2, [r1, #76]	; 0x4c
10011356:	6c89      	ldr	r1, [r1, #72]	; 0x48
10011358:	1864      	adds	r4, r4, r1
1001135a:	4155      	adcs	r5, r2
1001135c:	9802      	ldr	r0, [sp, #8]
1001135e:	9903      	ldr	r1, [sp, #12]
10011360:	1c02      	adds	r2, r0, #0
10011362:	1c0b      	adds	r3, r1, #0
10011364:	1812      	adds	r2, r2, r0
10011366:	414b      	adcs	r3, r1
10011368:	1c30      	adds	r0, r6, #0
1001136a:	1c39      	adds	r1, r7, #0
1001136c:	f004 f9de 	bl	1001572c <__aeabi_lmul>
10011370:	1c02      	adds	r2, r0, #0
10011372:	1c0b      	adds	r3, r1, #0
10011374:	1c30      	adds	r0, r6, #0
10011376:	1c39      	adds	r1, r7, #0
10011378:	f004 f9d8 	bl	1001572c <__aeabi_lmul>
1001137c:	9a08      	ldr	r2, [sp, #32]
1001137e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011380:	1824      	adds	r4, r4, r0
10011382:	414d      	adcs	r5, r1
10011384:	9802      	ldr	r0, [sp, #8]
10011386:	9903      	ldr	r1, [sp, #12]
10011388:	1a12      	subs	r2, r2, r0
1001138a:	418b      	sbcs	r3, r1
1001138c:	1c10      	adds	r0, r2, #0
1001138e:	1c19      	adds	r1, r3, #0
10011390:	1880      	adds	r0, r0, r2
10011392:	4159      	adcs	r1, r3
10011394:	1812      	adds	r2, r2, r0
10011396:	414b      	adcs	r3, r1
10011398:	9802      	ldr	r0, [sp, #8]
1001139a:	9903      	ldr	r1, [sp, #12]
1001139c:	1812      	adds	r2, r2, r0
1001139e:	414b      	adcs	r3, r1
100113a0:	1c30      	adds	r0, r6, #0
100113a2:	1c39      	adds	r1, r7, #0
100113a4:	f004 f9c2 	bl	1001572c <__aeabi_lmul>
100113a8:	4643      	mov	r3, r8
100113aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
100113ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100113ae:	1a80      	subs	r0, r0, r2
100113b0:	4199      	sbcs	r1, r3
100113b2:	2204      	movs	r2, #4
100113b4:	4252      	negs	r2, r2
100113b6:	17d3      	asrs	r3, r2, #31
100113b8:	f004 f9b8 	bl	1001572c <__aeabi_lmul>
100113bc:	1c02      	adds	r2, r0, #0
100113be:	1c0b      	adds	r3, r1, #0
100113c0:	1c30      	adds	r0, r6, #0
100113c2:	1c39      	adds	r1, r7, #0
100113c4:	f004 f9b2 	bl	1001572c <__aeabi_lmul>
100113c8:	1824      	adds	r4, r4, r0
100113ca:	414d      	adcs	r5, r1
100113cc:	17eb      	asrs	r3, r5, #31
100113ce:	9306      	str	r3, [sp, #24]
100113d0:	9307      	str	r3, [sp, #28]
100113d2:	9906      	ldr	r1, [sp, #24]
100113d4:	9a07      	ldr	r2, [sp, #28]
100113d6:	1c0b      	adds	r3, r1, #0
100113d8:	4063      	eors	r3, r4
100113da:	9300      	str	r3, [sp, #0]
100113dc:	1c13      	adds	r3, r2, #0
100113de:	406b      	eors	r3, r5
100113e0:	9301      	str	r3, [sp, #4]
100113e2:	9b00      	ldr	r3, [sp, #0]
100113e4:	9c01      	ldr	r4, [sp, #4]
100113e6:	1a5b      	subs	r3, r3, r1
100113e8:	4194      	sbcs	r4, r2
100113ea:	9300      	str	r3, [sp, #0]
100113ec:	9401      	str	r4, [sp, #4]
100113ee:	454c      	cmp	r4, r9
100113f0:	dc28      	bgt.n	10011444 <inv_fast_nomot_parameter.part.3+0x154>
100113f2:	9b01      	ldr	r3, [sp, #4]
100113f4:	454b      	cmp	r3, r9
100113f6:	d022      	beq.n	1001143e <inv_fast_nomot_parameter.part.3+0x14e>
100113f8:	2308      	movs	r3, #8
100113fa:	469c      	mov	ip, r3
100113fc:	44e0      	add	r8, ip
100113fe:	45d8      	cmp	r8, fp
10011400:	d000      	beq.n	10011404 <inv_fast_nomot_parameter.part.3+0x114>
10011402:	e783      	b.n	1001130c <inv_fast_nomot_parameter.part.3+0x1c>
10011404:	4649      	mov	r1, r9
10011406:	4650      	mov	r0, sl
10011408:	f004 fa28 	bl	1001585c <__aeabi_l2f>
1001140c:	4b13      	ldr	r3, [pc, #76]	; (1001145c <inv_fast_nomot_parameter.part.3+0x16c>)
1001140e:	6b99      	ldr	r1, [r3, #56]	; 0x38
10011410:	f004 fbe8 	bl	10015be4 <__aeabi_fdiv>
10011414:	f004 f9ec 	bl	100157f0 <__aeabi_f2lz>
10011418:	2383      	movs	r3, #131	; 0x83
1001141a:	4a11      	ldr	r2, [pc, #68]	; (10011460 <inv_fast_nomot_parameter.part.3+0x170>)
1001141c:	009b      	lsls	r3, r3, #2
1001141e:	58d3      	ldr	r3, [r2, r3]
10011420:	2220      	movs	r2, #32
10011422:	009b      	lsls	r3, r3, #2
10011424:	4252      	negs	r2, r2
10011426:	189a      	adds	r2, r3, r2
10011428:	d411      	bmi.n	1001144e <inv_fast_nomot_parameter.part.3+0x15e>
1001142a:	1c08      	adds	r0, r1, #0
1001142c:	4110      	asrs	r0, r2
1001142e:	4119      	asrs	r1, r3
10011430:	b00b      	add	sp, #44	; 0x2c
10011432:	bc3c      	pop	{r2, r3, r4, r5}
10011434:	4690      	mov	r8, r2
10011436:	4699      	mov	r9, r3
10011438:	46a2      	mov	sl, r4
1001143a:	46ab      	mov	fp, r5
1001143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001143e:	9b00      	ldr	r3, [sp, #0]
10011440:	4553      	cmp	r3, sl
10011442:	d9d9      	bls.n	100113f8 <inv_fast_nomot_parameter.part.3+0x108>
10011444:	9b00      	ldr	r3, [sp, #0]
10011446:	9c01      	ldr	r4, [sp, #4]
10011448:	469a      	mov	sl, r3
1001144a:	46a1      	mov	r9, r4
1001144c:	e7d4      	b.n	100113f8 <inv_fast_nomot_parameter.part.3+0x108>
1001144e:	2220      	movs	r2, #32
10011450:	1c0c      	adds	r4, r1, #0
10011452:	1ad2      	subs	r2, r2, r3
10011454:	4094      	lsls	r4, r2
10011456:	40d8      	lsrs	r0, r3
10011458:	4320      	orrs	r0, r4
1001145a:	e7e8      	b.n	1001142e <inv_fast_nomot_parameter.part.3+0x13e>
1001145c:	1001d548 	.word	0x1001d548
10011460:	1001ea80 	.word	0x1001ea80

10011464 <inv_init_maxmin>:
10011464:	07c3      	lsls	r3, r0, #31
10011466:	d50a      	bpl.n	1001147e <inv_init_maxmin+0x1a>
10011468:	22c0      	movs	r2, #192	; 0xc0
1001146a:	4b19      	ldr	r3, [pc, #100]	; (100114d0 <inv_init_maxmin+0x6c>)
1001146c:	0612      	lsls	r2, r2, #24
1001146e:	669a      	str	r2, [r3, #104]	; 0x68
10011470:	66da      	str	r2, [r3, #108]	; 0x6c
10011472:	671a      	str	r2, [r3, #112]	; 0x70
10011474:	2280      	movs	r2, #128	; 0x80
10011476:	05d2      	lsls	r2, r2, #23
10011478:	675a      	str	r2, [r3, #116]	; 0x74
1001147a:	679a      	str	r2, [r3, #120]	; 0x78
1001147c:	67da      	str	r2, [r3, #124]	; 0x7c
1001147e:	0783      	lsls	r3, r0, #30
10011480:	d511      	bpl.n	100114a6 <inv_init_maxmin+0x42>
10011482:	22c0      	movs	r2, #192	; 0xc0
10011484:	2180      	movs	r1, #128	; 0x80
10011486:	4b12      	ldr	r3, [pc, #72]	; (100114d0 <inv_init_maxmin+0x6c>)
10011488:	0612      	lsls	r2, r2, #24
1001148a:	0049      	lsls	r1, r1, #1
1001148c:	505a      	str	r2, [r3, r1]
1001148e:	3104      	adds	r1, #4
10011490:	505a      	str	r2, [r3, r1]
10011492:	3104      	adds	r1, #4
10011494:	505a      	str	r2, [r3, r1]
10011496:	2280      	movs	r2, #128	; 0x80
10011498:	3104      	adds	r1, #4
1001149a:	05d2      	lsls	r2, r2, #23
1001149c:	505a      	str	r2, [r3, r1]
1001149e:	3104      	adds	r1, #4
100114a0:	505a      	str	r2, [r3, r1]
100114a2:	3104      	adds	r1, #4
100114a4:	505a      	str	r2, [r3, r1]
100114a6:	0743      	lsls	r3, r0, #29
100114a8:	d511      	bpl.n	100114ce <inv_init_maxmin+0x6a>
100114aa:	22c0      	movs	r2, #192	; 0xc0
100114ac:	21cc      	movs	r1, #204	; 0xcc
100114ae:	4b08      	ldr	r3, [pc, #32]	; (100114d0 <inv_init_maxmin+0x6c>)
100114b0:	0612      	lsls	r2, r2, #24
100114b2:	0049      	lsls	r1, r1, #1
100114b4:	505a      	str	r2, [r3, r1]
100114b6:	3104      	adds	r1, #4
100114b8:	505a      	str	r2, [r3, r1]
100114ba:	3104      	adds	r1, #4
100114bc:	505a      	str	r2, [r3, r1]
100114be:	2280      	movs	r2, #128	; 0x80
100114c0:	3104      	adds	r1, #4
100114c2:	05d2      	lsls	r2, r2, #23
100114c4:	505a      	str	r2, [r3, r1]
100114c6:	3104      	adds	r1, #4
100114c8:	505a      	str	r2, [r3, r1]
100114ca:	3104      	adds	r1, #4
100114cc:	505a      	str	r2, [r3, r1]
100114ce:	4770      	bx	lr
100114d0:	1001ea80 	.word	0x1001ea80

100114d4 <inv_reset_packet>:
100114d4:	b510      	push	{r4, lr}
100114d6:	4c08      	ldr	r4, [pc, #32]	; (100114f8 <inv_reset_packet+0x24>)
100114d8:	2100      	movs	r1, #0
100114da:	1c20      	adds	r0, r4, #0
100114dc:	2298      	movs	r2, #152	; 0x98
100114de:	f007 f8be 	bl	1001865e <memset>
100114e2:	1c20      	adds	r0, r4, #0
100114e4:	3031      	adds	r0, #49	; 0x31
100114e6:	2100      	movs	r1, #0
100114e8:	2298      	movs	r2, #152	; 0x98
100114ea:	30ff      	adds	r0, #255	; 0xff
100114ec:	f007 f8b7 	bl	1001865e <memset>
100114f0:	2005      	movs	r0, #5
100114f2:	f7ff ffb7 	bl	10011464 <inv_init_maxmin>
100114f6:	bd10      	pop	{r4, pc}
100114f8:	1001ea88 	.word	0x1001ea88

100114fc <inv_start_fast_nomot>:
100114fc:	2298      	movs	r2, #152	; 0x98
100114fe:	b510      	push	{r4, lr}
10011500:	4c0c      	ldr	r4, [pc, #48]	; (10011534 <inv_start_fast_nomot+0x38>)
10011502:	2100      	movs	r1, #0
10011504:	0092      	lsls	r2, r2, #2
10011506:	1c20      	adds	r0, r4, #0
10011508:	f007 f8a9 	bl	1001865e <memset>
1001150c:	2007      	movs	r0, #7
1001150e:	f7ff ffa9 	bl	10011464 <inv_init_maxmin>
10011512:	22f2      	movs	r2, #242	; 0xf2
10011514:	2301      	movs	r3, #1
10011516:	0052      	lsls	r2, r2, #1
10011518:	50a3      	str	r3, [r4, r2]
1001151a:	3204      	adds	r2, #4
1001151c:	54a3      	strb	r3, [r4, r2]
1001151e:	2001      	movs	r0, #1
10011520:	2103      	movs	r1, #3
10011522:	2200      	movs	r2, #0
10011524:	f7f8 fec2 	bl	1000a2ac <inv_set_message>
10011528:	2164      	movs	r1, #100	; 0x64
1001152a:	2207      	movs	r2, #7
1001152c:	4802      	ldr	r0, [pc, #8]	; (10011538 <inv_start_fast_nomot+0x3c>)
1001152e:	f7f8 fd89 	bl	1000a044 <inv_register_data_cb>
10011532:	bd10      	pop	{r4, pc}
10011534:	1001ea80 	.word	0x1001ea80
10011538:	10011c55 	.word	0x10011c55

1001153c <inv_fast_nomot_parameter>:
1001153c:	6f81      	ldr	r1, [r0, #120]	; 0x78
1001153e:	b508      	push	{r3, lr}
10011540:	2200      	movs	r2, #0
10011542:	2300      	movs	r3, #0
10011544:	2900      	cmp	r1, #0
10011546:	d003      	beq.n	10011550 <inv_fast_nomot_parameter+0x14>
10011548:	f7ff fed2 	bl	100112f0 <inv_fast_nomot_parameter.part.3>
1001154c:	1c02      	adds	r2, r0, #0
1001154e:	1c0b      	adds	r3, r1, #0
10011550:	1c10      	adds	r0, r2, #0
10011552:	1c19      	adds	r1, r3, #0
10011554:	bd08      	pop	{r3, pc}
10011556:	46c0      	nop			; (mov r8, r8)

10011558 <inv_fast_nomot_parameter_3rd>:
10011558:	b5f0      	push	{r4, r5, r6, r7, lr}
1001155a:	465f      	mov	r7, fp
1001155c:	4656      	mov	r6, sl
1001155e:	464d      	mov	r5, r9
10011560:	4644      	mov	r4, r8
10011562:	b4f0      	push	{r4, r5, r6, r7}
10011564:	6f83      	ldr	r3, [r0, #120]	; 0x78
10011566:	b085      	sub	sp, #20
10011568:	2b00      	cmp	r3, #0
1001156a:	d063      	beq.n	10011634 <inv_fast_nomot_parameter_3rd+0xdc>
1001156c:	4680      	mov	r8, r0
1001156e:	2318      	movs	r3, #24
10011570:	4443      	add	r3, r8
10011572:	469b      	mov	fp, r3
10011574:	2300      	movs	r3, #0
10011576:	469a      	mov	sl, r3
10011578:	4699      	mov	r9, r3
1001157a:	4643      	mov	r3, r8
1001157c:	681c      	ldr	r4, [r3, #0]
1001157e:	685d      	ldr	r5, [r3, #4]
10011580:	1c22      	adds	r2, r4, #0
10011582:	1c20      	adds	r0, r4, #0
10011584:	1c2b      	adds	r3, r5, #0
10011586:	1c29      	adds	r1, r5, #0
10011588:	f004 f8d0 	bl	1001572c <__aeabi_lmul>
1001158c:	4643      	mov	r3, r8
1001158e:	9002      	str	r0, [sp, #8]
10011590:	9103      	str	r1, [sp, #12]
10011592:	6998      	ldr	r0, [r3, #24]
10011594:	69d9      	ldr	r1, [r3, #28]
10011596:	9a02      	ldr	r2, [sp, #8]
10011598:	9b03      	ldr	r3, [sp, #12]
1001159a:	1a80      	subs	r0, r0, r2
1001159c:	4199      	sbcs	r1, r3
1001159e:	1c02      	adds	r2, r0, #0
100115a0:	1c0b      	adds	r3, r1, #0
100115a2:	1812      	adds	r2, r2, r0
100115a4:	414b      	adcs	r3, r1
100115a6:	1880      	adds	r0, r0, r2
100115a8:	4159      	adcs	r1, r3
100115aa:	9a02      	ldr	r2, [sp, #8]
100115ac:	9b03      	ldr	r3, [sp, #12]
100115ae:	1880      	adds	r0, r0, r2
100115b0:	4159      	adcs	r1, r3
100115b2:	1c22      	adds	r2, r4, #0
100115b4:	1c2b      	adds	r3, r5, #0
100115b6:	f004 f8b9 	bl	1001572c <__aeabi_lmul>
100115ba:	4643      	mov	r3, r8
100115bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
100115be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100115c0:	1ac0      	subs	r0, r0, r3
100115c2:	41a1      	sbcs	r1, r4
100115c4:	17cb      	asrs	r3, r1, #31
100115c6:	9300      	str	r3, [sp, #0]
100115c8:	9301      	str	r3, [sp, #4]
100115ca:	9b00      	ldr	r3, [sp, #0]
100115cc:	9c01      	ldr	r4, [sp, #4]
100115ce:	1c1a      	adds	r2, r3, #0
100115d0:	4042      	eors	r2, r0
100115d2:	1c16      	adds	r6, r2, #0
100115d4:	1c22      	adds	r2, r4, #0
100115d6:	404a      	eors	r2, r1
100115d8:	1c17      	adds	r7, r2, #0
100115da:	1af6      	subs	r6, r6, r3
100115dc:	41a7      	sbcs	r7, r4
100115de:	454f      	cmp	r7, r9
100115e0:	dc25      	bgt.n	1001162e <inv_fast_nomot_parameter_3rd+0xd6>
100115e2:	d022      	beq.n	1001162a <inv_fast_nomot_parameter_3rd+0xd2>
100115e4:	2308      	movs	r3, #8
100115e6:	469c      	mov	ip, r3
100115e8:	44e0      	add	r8, ip
100115ea:	45d8      	cmp	r8, fp
100115ec:	d1c5      	bne.n	1001157a <inv_fast_nomot_parameter_3rd+0x22>
100115ee:	4649      	mov	r1, r9
100115f0:	4650      	mov	r0, sl
100115f2:	f004 f933 	bl	1001585c <__aeabi_l2f>
100115f6:	4b14      	ldr	r3, [pc, #80]	; (10011648 <inv_fast_nomot_parameter_3rd+0xf0>)
100115f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
100115fa:	f004 faf3 	bl	10015be4 <__aeabi_fdiv>
100115fe:	f004 f8f7 	bl	100157f0 <__aeabi_f2lz>
10011602:	2383      	movs	r3, #131	; 0x83
10011604:	4a11      	ldr	r2, [pc, #68]	; (1001164c <inv_fast_nomot_parameter_3rd+0xf4>)
10011606:	009b      	lsls	r3, r3, #2
10011608:	58d3      	ldr	r3, [r2, r3]
1001160a:	005a      	lsls	r2, r3, #1
1001160c:	18d2      	adds	r2, r2, r3
1001160e:	2320      	movs	r3, #32
10011610:	425b      	negs	r3, r3
10011612:	18d3      	adds	r3, r2, r3
10011614:	d411      	bmi.n	1001163a <inv_fast_nomot_parameter_3rd+0xe2>
10011616:	1c08      	adds	r0, r1, #0
10011618:	4118      	asrs	r0, r3
1001161a:	4111      	asrs	r1, r2
1001161c:	b005      	add	sp, #20
1001161e:	bc3c      	pop	{r2, r3, r4, r5}
10011620:	4690      	mov	r8, r2
10011622:	4699      	mov	r9, r3
10011624:	46a2      	mov	sl, r4
10011626:	46ab      	mov	fp, r5
10011628:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001162a:	4556      	cmp	r6, sl
1001162c:	d9da      	bls.n	100115e4 <inv_fast_nomot_parameter_3rd+0x8c>
1001162e:	46b2      	mov	sl, r6
10011630:	46b9      	mov	r9, r7
10011632:	e7d7      	b.n	100115e4 <inv_fast_nomot_parameter_3rd+0x8c>
10011634:	2000      	movs	r0, #0
10011636:	2100      	movs	r1, #0
10011638:	e7f0      	b.n	1001161c <inv_fast_nomot_parameter_3rd+0xc4>
1001163a:	2320      	movs	r3, #32
1001163c:	1c0c      	adds	r4, r1, #0
1001163e:	1a9b      	subs	r3, r3, r2
10011640:	409c      	lsls	r4, r3
10011642:	40d0      	lsrs	r0, r2
10011644:	4320      	orrs	r0, r4
10011646:	e7e8      	b.n	1001161a <inv_fast_nomot_parameter_3rd+0xc2>
10011648:	1001d548 	.word	0x1001d548
1001164c:	1001ea80 	.word	0x1001ea80

10011650 <inv_fast_nomot_set_gyro_bias>:
10011650:	2384      	movs	r3, #132	; 0x84
10011652:	b5f0      	push	{r4, r5, r6, r7, lr}
10011654:	4d2e      	ldr	r5, [pc, #184]	; (10011710 <inv_fast_nomot_set_gyro_bias+0xc0>)
10011656:	1c06      	adds	r6, r0, #0
10011658:	2100      	movs	r1, #0
1001165a:	1c28      	adds	r0, r5, #0
1001165c:	009b      	lsls	r3, r3, #2
1001165e:	b085      	sub	sp, #20
10011660:	58ef      	ldr	r7, [r5, r3]
10011662:	ac01      	add	r4, sp, #4
10011664:	1c0b      	adds	r3, r1, #0
10011666:	6882      	ldr	r2, [r0, #8]
10011668:	3384      	adds	r3, #132	; 0x84
1001166a:	40ba      	lsls	r2, r7
1001166c:	58eb      	ldr	r3, [r5, r3]
1001166e:	3008      	adds	r0, #8
10011670:	041b      	lsls	r3, r3, #16
10011672:	189b      	adds	r3, r3, r2
10011674:	5063      	str	r3, [r4, r1]
10011676:	3104      	adds	r1, #4
10011678:	290c      	cmp	r1, #12
1001167a:	d1f3      	bne.n	10011664 <inv_fast_nomot_set_gyro_bias+0x14>
1001167c:	4f25      	ldr	r7, [pc, #148]	; (10011714 <inv_fast_nomot_set_gyro_bias+0xc4>)
1001167e:	2298      	movs	r2, #152	; 0x98
10011680:	1c38      	adds	r0, r7, #0
10011682:	2100      	movs	r1, #0
10011684:	f006 ffeb 	bl	1001865e <memset>
10011688:	2001      	movs	r0, #1
1001168a:	f7ff feeb 	bl	10011464 <inv_init_maxmin>
1001168e:	23f4      	movs	r3, #244	; 0xf4
10011690:	3f08      	subs	r7, #8
10011692:	005b      	lsls	r3, r3, #1
10011694:	5cfa      	ldrb	r2, [r7, r3]
10011696:	2a04      	cmp	r2, #4
10011698:	d02f      	beq.n	100116fa <inv_fast_nomot_set_gyro_bias+0xaa>
1001169a:	4f1f      	ldr	r7, [pc, #124]	; (10011718 <inv_fast_nomot_set_gyro_bias+0xc8>)
1001169c:	9b01      	ldr	r3, [sp, #4]
1001169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100116a0:	1a98      	subs	r0, r3, r2
100116a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
100116a4:	6863      	ldr	r3, [r4, #4]
100116a6:	1a9b      	subs	r3, r3, r2
100116a8:	17da      	asrs	r2, r3, #31
100116aa:	189b      	adds	r3, r3, r2
100116ac:	4053      	eors	r3, r2
100116ae:	17c2      	asrs	r2, r0, #31
100116b0:	1880      	adds	r0, r0, r2
100116b2:	4050      	eors	r0, r2
100116b4:	4298      	cmp	r0, r3
100116b6:	da00      	bge.n	100116ba <inv_fast_nomot_set_gyro_bias+0x6a>
100116b8:	1c18      	adds	r0, r3, #0
100116ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100116bc:	68a3      	ldr	r3, [r4, #8]
100116be:	1a9b      	subs	r3, r3, r2
100116c0:	17da      	asrs	r2, r3, #31
100116c2:	189b      	adds	r3, r3, r2
100116c4:	4053      	eors	r3, r2
100116c6:	4298      	cmp	r0, r3
100116c8:	da00      	bge.n	100116cc <inv_fast_nomot_set_gyro_bias+0x7c>
100116ca:	1c18      	adds	r0, r3, #0
100116cc:	6a71      	ldr	r1, [r6, #36]	; 0x24
100116ce:	f7f8 fe29 	bl	1000a324 <inv_q30_mult>
100116d2:	2386      	movs	r3, #134	; 0x86
100116d4:	009b      	lsls	r3, r3, #2
100116d6:	58eb      	ldr	r3, [r5, r3]
100116d8:	4298      	cmp	r0, r3
100116da:	da06      	bge.n	100116ea <inv_fast_nomot_set_gyro_bias+0x9a>
100116dc:	1c20      	adds	r0, r4, #0
100116de:	2103      	movs	r1, #3
100116e0:	f7f8 fc48 	bl	10009f74 <inv_set_gyro_bias>
100116e4:	2002      	movs	r0, #2
100116e6:	f7f9 fb3b 	bl	1000ad60 <inv_set_motion_state>
100116ea:	9b01      	ldr	r3, [sp, #4]
100116ec:	627b      	str	r3, [r7, #36]	; 0x24
100116ee:	6863      	ldr	r3, [r4, #4]
100116f0:	62bb      	str	r3, [r7, #40]	; 0x28
100116f2:	68a3      	ldr	r3, [r4, #8]
100116f4:	62fb      	str	r3, [r7, #44]	; 0x2c
100116f6:	b005      	add	sp, #20
100116f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100116fa:	2286      	movs	r2, #134	; 0x86
100116fc:	0092      	lsls	r2, r2, #2
100116fe:	58b9      	ldr	r1, [r7, r2]
10011700:	22a0      	movs	r2, #160	; 0xa0
10011702:	0392      	lsls	r2, r2, #14
10011704:	4291      	cmp	r1, r2
10011706:	ddc8      	ble.n	1001169a <inv_fast_nomot_set_gyro_bias+0x4a>
10011708:	2205      	movs	r2, #5
1001170a:	54fa      	strb	r2, [r7, r3]
1001170c:	e7c5      	b.n	1001169a <inv_fast_nomot_set_gyro_bias+0x4a>
1001170e:	46c0      	nop			; (mov r8, r8)
10011710:	1001ea80 	.word	0x1001ea80
10011714:	1001ea88 	.word	0x1001ea88
10011718:	1001d548 	.word	0x1001d548

1001171c <inv_set_fast_nomot_compass_threshold>:
1001171c:	4b01      	ldr	r3, [pc, #4]	; (10011724 <inv_set_fast_nomot_compass_threshold+0x8>)
1001171e:	6098      	str	r0, [r3, #8]
10011720:	60d9      	str	r1, [r3, #12]
10011722:	4770      	bx	lr
10011724:	1001d548 	.word	0x1001d548

10011728 <int_set_fast_nomot_gyro_threshold>:
10011728:	4b01      	ldr	r3, [pc, #4]	; (10011730 <int_set_fast_nomot_gyro_threshold+0x8>)
1001172a:	6198      	str	r0, [r3, #24]
1001172c:	61d9      	str	r1, [r3, #28]
1001172e:	4770      	bx	lr
10011730:	1001d548 	.word	0x1001d548

10011734 <inv_set_fast_nomot_accel_threshold>:
10011734:	4b01      	ldr	r3, [pc, #4]	; (1001173c <inv_set_fast_nomot_accel_threshold+0x8>)
10011736:	6118      	str	r0, [r3, #16]
10011738:	6159      	str	r1, [r3, #20]
1001173a:	4770      	bx	lr
1001173c:	1001d548 	.word	0x1001d548

10011740 <inv_get_fast_nomot_compass_param>:
10011740:	22f0      	movs	r2, #240	; 0xf0
10011742:	4b05      	ldr	r3, [pc, #20]	; (10011758 <inv_get_fast_nomot_compass_param+0x18>)
10011744:	0052      	lsls	r2, r2, #1
10011746:	589a      	ldr	r2, [r3, r2]
10011748:	33d1      	adds	r3, #209	; 0xd1
1001174a:	33ff      	adds	r3, #255	; 0xff
1001174c:	6002      	str	r2, [r0, #0]
1001174e:	681a      	ldr	r2, [r3, #0]
10011750:	685b      	ldr	r3, [r3, #4]
10011752:	600a      	str	r2, [r1, #0]
10011754:	604b      	str	r3, [r1, #4]
10011756:	4770      	bx	lr
10011758:	1001ea80 	.word	0x1001ea80

1001175c <inv_get_fast_nomot_accel_param>:
1001175c:	22f0      	movs	r2, #240	; 0xf0
1001175e:	4b05      	ldr	r3, [pc, #20]	; (10011774 <inv_get_fast_nomot_accel_param+0x18>)
10011760:	0052      	lsls	r2, r2, #1
10011762:	589a      	ldr	r2, [r3, r2]
10011764:	33d9      	adds	r3, #217	; 0xd9
10011766:	33ff      	adds	r3, #255	; 0xff
10011768:	6002      	str	r2, [r0, #0]
1001176a:	681a      	ldr	r2, [r3, #0]
1001176c:	685b      	ldr	r3, [r3, #4]
1001176e:	600a      	str	r2, [r1, #0]
10011770:	604b      	str	r3, [r1, #4]
10011772:	4770      	bx	lr
10011774:	1001ea80 	.word	0x1001ea80

10011778 <inv_fast_nomot_store_data>:
10011778:	b5f0      	push	{r4, r5, r6, r7, lr}
1001177a:	4656      	mov	r6, sl
1001177c:	465f      	mov	r7, fp
1001177e:	464d      	mov	r5, r9
10011780:	4644      	mov	r4, r8
10011782:	b4f0      	push	{r4, r5, r6, r7}
10011784:	6f8b      	ldr	r3, [r1, #120]	; 0x78
10011786:	b083      	sub	sp, #12
10011788:	468b      	mov	fp, r1
1001178a:	9300      	str	r3, [sp, #0]
1001178c:	2360      	movs	r3, #96	; 0x60
1001178e:	445b      	add	r3, fp
10011790:	4698      	mov	r8, r3
10011792:	2318      	movs	r3, #24
10011794:	4682      	mov	sl, r0
10011796:	4645      	mov	r5, r8
10011798:	465e      	mov	r6, fp
1001179a:	445b      	add	r3, fp
1001179c:	9301      	str	r3, [sp, #4]
1001179e:	9b00      	ldr	r3, [sp, #0]
100117a0:	2b00      	cmp	r3, #0
100117a2:	d038      	beq.n	10011816 <inv_fast_nomot_store_data+0x9e>
100117a4:	4653      	mov	r3, sl
100117a6:	2200      	movs	r2, #0
100117a8:	5e9b      	ldrsh	r3, [r3, r2]
100117aa:	69ea      	ldr	r2, [r5, #28]
100117ac:	1a9b      	subs	r3, r3, r2
100117ae:	17da      	asrs	r2, r3, #31
100117b0:	4699      	mov	r9, r3
100117b2:	4690      	mov	r8, r2
100117b4:	682a      	ldr	r2, [r5, #0]
100117b6:	429a      	cmp	r2, r3
100117b8:	da00      	bge.n	100117bc <inv_fast_nomot_store_data+0x44>
100117ba:	602b      	str	r3, [r5, #0]
100117bc:	68ea      	ldr	r2, [r5, #12]
100117be:	429a      	cmp	r2, r3
100117c0:	dd00      	ble.n	100117c4 <inv_fast_nomot_store_data+0x4c>
100117c2:	60eb      	str	r3, [r5, #12]
100117c4:	1c37      	adds	r7, r6, #0
100117c6:	1c34      	adds	r4, r6, #0
100117c8:	2001      	movs	r0, #1
100117ca:	2100      	movs	r1, #0
100117cc:	3760      	adds	r7, #96	; 0x60
100117ce:	464a      	mov	r2, r9
100117d0:	4643      	mov	r3, r8
100117d2:	f003 ffab 	bl	1001572c <__aeabi_lmul>
100117d6:	6822      	ldr	r2, [r4, #0]
100117d8:	6863      	ldr	r3, [r4, #4]
100117da:	1812      	adds	r2, r2, r0
100117dc:	414b      	adcs	r3, r1
100117de:	6022      	str	r2, [r4, #0]
100117e0:	6063      	str	r3, [r4, #4]
100117e2:	3418      	adds	r4, #24
100117e4:	42a7      	cmp	r7, r4
100117e6:	d1f2      	bne.n	100117ce <inv_fast_nomot_store_data+0x56>
100117e8:	2302      	movs	r3, #2
100117ea:	469c      	mov	ip, r3
100117ec:	9b01      	ldr	r3, [sp, #4]
100117ee:	3608      	adds	r6, #8
100117f0:	3504      	adds	r5, #4
100117f2:	44e2      	add	sl, ip
100117f4:	429e      	cmp	r6, r3
100117f6:	d1d2      	bne.n	1001179e <inv_fast_nomot_store_data+0x26>
100117f8:	465a      	mov	r2, fp
100117fa:	9b00      	ldr	r3, [sp, #0]
100117fc:	4659      	mov	r1, fp
100117fe:	3301      	adds	r3, #1
10011800:	6793      	str	r3, [r2, #120]	; 0x78
10011802:	2201      	movs	r2, #1
10011804:	2390      	movs	r3, #144	; 0x90
10011806:	50ca      	str	r2, [r1, r3]
10011808:	b003      	add	sp, #12
1001180a:	bc3c      	pop	{r2, r3, r4, r5}
1001180c:	4690      	mov	r8, r2
1001180e:	4699      	mov	r9, r3
10011810:	46a2      	mov	sl, r4
10011812:	46ab      	mov	fp, r5
10011814:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011816:	4653      	mov	r3, sl
10011818:	2200      	movs	r2, #0
1001181a:	5e9b      	ldrsh	r3, [r3, r2]
1001181c:	61eb      	str	r3, [r5, #28]
1001181e:	2300      	movs	r3, #0
10011820:	4699      	mov	r9, r3
10011822:	4698      	mov	r8, r3
10011824:	e7c6      	b.n	100117b4 <inv_fast_nomot_store_data+0x3c>
10011826:	46c0      	nop			; (mov r8, r8)

10011828 <inv_fast_nomot_store_data_compass>:
10011828:	6803      	ldr	r3, [r0, #0]
1001182a:	b570      	push	{r4, r5, r6, lr}
1001182c:	66d3      	str	r3, [r2, #108]	; 0x6c
1001182e:	6843      	ldr	r3, [r0, #4]
10011830:	6f94      	ldr	r4, [r2, #120]	; 0x78
10011832:	6713      	str	r3, [r2, #112]	; 0x70
10011834:	6883      	ldr	r3, [r0, #8]
10011836:	6753      	str	r3, [r2, #116]	; 0x74
10011838:	2388      	movs	r3, #136	; 0x88
1001183a:	50d1      	str	r1, [r2, r3]
1001183c:	2c00      	cmp	r4, #0
1001183e:	d011      	beq.n	10011864 <inv_fast_nomot_store_data_compass+0x3c>
10011840:	1c11      	adds	r1, r2, #0
10011842:	1c15      	adds	r5, r2, #0
10011844:	3160      	adds	r1, #96	; 0x60
10011846:	356c      	adds	r5, #108	; 0x6c
10011848:	69ce      	ldr	r6, [r1, #28]
1001184a:	6803      	ldr	r3, [r0, #0]
1001184c:	1b9b      	subs	r3, r3, r6
1001184e:	17de      	asrs	r6, r3, #31
10011850:	199b      	adds	r3, r3, r6
10011852:	4073      	eors	r3, r6
10011854:	680e      	ldr	r6, [r1, #0]
10011856:	42b3      	cmp	r3, r6
10011858:	dd00      	ble.n	1001185c <inv_fast_nomot_store_data_compass+0x34>
1001185a:	600b      	str	r3, [r1, #0]
1001185c:	3104      	adds	r1, #4
1001185e:	3004      	adds	r0, #4
10011860:	42a9      	cmp	r1, r5
10011862:	d1f1      	bne.n	10011848 <inv_fast_nomot_store_data_compass+0x20>
10011864:	2101      	movs	r1, #1
10011866:	2390      	movs	r3, #144	; 0x90
10011868:	3401      	adds	r4, #1
1001186a:	6794      	str	r4, [r2, #120]	; 0x78
1001186c:	50d1      	str	r1, [r2, r3]
1001186e:	bd70      	pop	{r4, r5, r6, pc}

10011870 <inv_fast_nomot_reset_data_compass>:
10011870:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
10011872:	2280      	movs	r2, #128	; 0x80
10011874:	67c3      	str	r3, [r0, #124]	; 0x7c
10011876:	2300      	movs	r3, #0
10011878:	6f01      	ldr	r1, [r0, #112]	; 0x70
1001187a:	6603      	str	r3, [r0, #96]	; 0x60
1001187c:	5081      	str	r1, [r0, r2]
1001187e:	6f41      	ldr	r1, [r0, #116]	; 0x74
10011880:	3204      	adds	r2, #4
10011882:	6643      	str	r3, [r0, #100]	; 0x64
10011884:	5081      	str	r1, [r0, r2]
10011886:	6683      	str	r3, [r0, #104]	; 0x68
10011888:	3204      	adds	r2, #4
1001188a:	5881      	ldr	r1, [r0, r2]
1001188c:	3204      	adds	r2, #4
1001188e:	5081      	str	r1, [r0, r2]
10011890:	3204      	adds	r2, #4
10011892:	6783      	str	r3, [r0, #120]	; 0x78
10011894:	5083      	str	r3, [r0, r2]
10011896:	4770      	bx	lr

10011898 <inv_fast_nomot_get_time_elaps>:
10011898:	228c      	movs	r2, #140	; 0x8c
1001189a:	2388      	movs	r3, #136	; 0x88
1001189c:	58c3      	ldr	r3, [r0, r3]
1001189e:	5880      	ldr	r0, [r0, r2]
100118a0:	1a18      	subs	r0, r3, r0
100118a2:	4770      	bx	lr

100118a4 <inv_fast_nomot_parameter_compass>:
100118a4:	6e02      	ldr	r2, [r0, #96]	; 0x60
100118a6:	6e43      	ldr	r3, [r0, #100]	; 0x64
100118a8:	4293      	cmp	r3, r2
100118aa:	da00      	bge.n	100118ae <inv_fast_nomot_parameter_compass+0xa>
100118ac:	1c13      	adds	r3, r2, #0
100118ae:	6e82      	ldr	r2, [r0, #104]	; 0x68
100118b0:	1e18      	subs	r0, r3, #0
100118b2:	4290      	cmp	r0, r2
100118b4:	da00      	bge.n	100118b8 <inv_fast_nomot_parameter_compass+0x14>
100118b6:	1c10      	adds	r0, r2, #0
100118b8:	4770      	bx	lr
100118ba:	46c0      	nop			; (mov r8, r8)

100118bc <inv_get_right_shift_by_rounding>:
100118bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100118be:	4647      	mov	r7, r8
100118c0:	b480      	push	{r7}
100118c2:	2701      	movs	r7, #1
100118c4:	1e53      	subs	r3, r2, #1
100118c6:	409f      	lsls	r7, r3
100118c8:	2320      	movs	r3, #32
100118ca:	2620      	movs	r6, #32
100118cc:	425b      	negs	r3, r3
100118ce:	1ab6      	subs	r6, r6, r2
100118d0:	46b8      	mov	r8, r7
100118d2:	18d3      	adds	r3, r2, r3
100118d4:	d434      	bmi.n	10011940 <inv_get_right_shift_by_rounding+0x84>
100118d6:	1c0f      	adds	r7, r1, #0
100118d8:	411f      	asrs	r7, r3
100118da:	1c3c      	adds	r4, r7, #0
100118dc:	1c0b      	adds	r3, r1, #0
100118de:	4113      	asrs	r3, r2
100118e0:	1c1d      	adds	r5, r3, #0
100118e2:	2320      	movs	r3, #32
100118e4:	425b      	negs	r3, r3
100118e6:	18f2      	adds	r2, r6, r3
100118e8:	d422      	bmi.n	10011930 <inv_get_right_shift_by_rounding+0x74>
100118ea:	1c03      	adds	r3, r0, #0
100118ec:	4093      	lsls	r3, r2
100118ee:	40b0      	lsls	r0, r6
100118f0:	2a00      	cmp	r2, #0
100118f2:	db16      	blt.n	10011922 <inv_get_right_shift_by_rounding+0x66>
100118f4:	4113      	asrs	r3, r2
100118f6:	1c19      	adds	r1, r3, #0
100118f8:	4588      	cmp	r8, r1
100118fa:	db0d      	blt.n	10011918 <inv_get_right_shift_by_rounding+0x5c>
100118fc:	4643      	mov	r3, r8
100118fe:	425f      	negs	r7, r3
10011900:	42b9      	cmp	r1, r7
10011902:	da04      	bge.n	1001190e <inv_get_right_shift_by_rounding+0x52>
10011904:	2201      	movs	r2, #1
10011906:	4252      	negs	r2, r2
10011908:	17d3      	asrs	r3, r2, #31
1001190a:	18a4      	adds	r4, r4, r2
1001190c:	415d      	adcs	r5, r3
1001190e:	1c29      	adds	r1, r5, #0
10011910:	1c20      	adds	r0, r4, #0
10011912:	bc04      	pop	{r2}
10011914:	4690      	mov	r8, r2
10011916:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011918:	2201      	movs	r2, #1
1001191a:	2300      	movs	r3, #0
1001191c:	18a4      	adds	r4, r4, r2
1001191e:	415d      	adcs	r5, r3
10011920:	e7f5      	b.n	1001190e <inv_get_right_shift_by_rounding+0x52>
10011922:	2120      	movs	r1, #32
10011924:	1b89      	subs	r1, r1, r6
10011926:	408b      	lsls	r3, r1
10011928:	1c01      	adds	r1, r0, #0
1001192a:	40f1      	lsrs	r1, r6
1001192c:	4319      	orrs	r1, r3
1001192e:	e7e3      	b.n	100118f8 <inv_get_right_shift_by_rounding+0x3c>
10011930:	2320      	movs	r3, #32
10011932:	1c07      	adds	r7, r0, #0
10011934:	1b9b      	subs	r3, r3, r6
10011936:	40df      	lsrs	r7, r3
10011938:	1c0b      	adds	r3, r1, #0
1001193a:	40b3      	lsls	r3, r6
1001193c:	433b      	orrs	r3, r7
1001193e:	e7d6      	b.n	100118ee <inv_get_right_shift_by_rounding+0x32>
10011940:	1c03      	adds	r3, r0, #0
10011942:	40d3      	lsrs	r3, r2
10011944:	1c1c      	adds	r4, r3, #0
10011946:	1c0b      	adds	r3, r1, #0
10011948:	40b3      	lsls	r3, r6
1001194a:	431c      	orrs	r4, r3
1001194c:	e7c6      	b.n	100118dc <inv_get_right_shift_by_rounding+0x20>
1001194e:	46c0      	nop			; (mov r8, r8)

10011950 <inv_reset_min_max_gyro_accel_statistics>:
10011950:	2300      	movs	r3, #0
10011952:	4a09      	ldr	r2, [pc, #36]	; (10011978 <inv_reset_min_max_gyro_accel_statistics+0x28>)
10011954:	6013      	str	r3, [r2, #0]
10011956:	6053      	str	r3, [r2, #4]
10011958:	6093      	str	r3, [r2, #8]
1001195a:	60d3      	str	r3, [r2, #12]
1001195c:	6213      	str	r3, [r2, #32]
1001195e:	6253      	str	r3, [r2, #36]	; 0x24
10011960:	6293      	str	r3, [r2, #40]	; 0x28
10011962:	62d3      	str	r3, [r2, #44]	; 0x2c
10011964:	6113      	str	r3, [r2, #16]
10011966:	6153      	str	r3, [r2, #20]
10011968:	6193      	str	r3, [r2, #24]
1001196a:	61d3      	str	r3, [r2, #28]
1001196c:	6313      	str	r3, [r2, #48]	; 0x30
1001196e:	6353      	str	r3, [r2, #52]	; 0x34
10011970:	6393      	str	r3, [r2, #56]	; 0x38
10011972:	63d3      	str	r3, [r2, #60]	; 0x3c
10011974:	4770      	bx	lr
10011976:	46c0      	nop			; (mov r8, r8)
10011978:	1001eca0 	.word	0x1001eca0

1001197c <inv_record_max_moment_in_no_motion_gyro>:
1001197c:	2392      	movs	r3, #146	; 0x92
1001197e:	4a0d      	ldr	r2, [pc, #52]	; (100119b4 <inv_record_max_moment_in_no_motion_gyro+0x38>)
10011980:	009b      	lsls	r3, r3, #2
10011982:	58d3      	ldr	r3, [r2, r3]
10011984:	b530      	push	{r4, r5, lr}
10011986:	2b00      	cmp	r3, #0
10011988:	d005      	beq.n	10011996 <inv_record_max_moment_in_no_motion_gyro+0x1a>
1001198a:	2490      	movs	r4, #144	; 0x90
1001198c:	00a4      	lsls	r4, r4, #2
1001198e:	1915      	adds	r5, r2, r4
10011990:	686c      	ldr	r4, [r5, #4]
10011992:	428c      	cmp	r4, r1
10011994:	da08      	bge.n	100119a8 <inv_record_max_moment_in_no_motion_gyro+0x2c>
10011996:	2490      	movs	r4, #144	; 0x90
10011998:	00a4      	lsls	r4, r4, #2
1001199a:	1914      	adds	r4, r2, r4
1001199c:	c403      	stmia	r4!, {r0, r1}
1001199e:	2192      	movs	r1, #146	; 0x92
100119a0:	3301      	adds	r3, #1
100119a2:	0089      	lsls	r1, r1, #2
100119a4:	5053      	str	r3, [r2, r1]
100119a6:	bd30      	pop	{r4, r5, pc}
100119a8:	428c      	cmp	r4, r1
100119aa:	d1f8      	bne.n	1001199e <inv_record_max_moment_in_no_motion_gyro+0x22>
100119ac:	682c      	ldr	r4, [r5, #0]
100119ae:	4284      	cmp	r4, r0
100119b0:	d3f1      	bcc.n	10011996 <inv_record_max_moment_in_no_motion_gyro+0x1a>
100119b2:	e7f4      	b.n	1001199e <inv_record_max_moment_in_no_motion_gyro+0x22>
100119b4:	1001ea80 	.word	0x1001ea80

100119b8 <inv_record_max_moment_in_no_motion_accel>:
100119b8:	2396      	movs	r3, #150	; 0x96
100119ba:	4a0d      	ldr	r2, [pc, #52]	; (100119f0 <inv_record_max_moment_in_no_motion_accel+0x38>)
100119bc:	009b      	lsls	r3, r3, #2
100119be:	58d3      	ldr	r3, [r2, r3]
100119c0:	b530      	push	{r4, r5, lr}
100119c2:	2b00      	cmp	r3, #0
100119c4:	d005      	beq.n	100119d2 <inv_record_max_moment_in_no_motion_accel+0x1a>
100119c6:	2494      	movs	r4, #148	; 0x94
100119c8:	00a4      	lsls	r4, r4, #2
100119ca:	1915      	adds	r5, r2, r4
100119cc:	686c      	ldr	r4, [r5, #4]
100119ce:	428c      	cmp	r4, r1
100119d0:	da08      	bge.n	100119e4 <inv_record_max_moment_in_no_motion_accel+0x2c>
100119d2:	2494      	movs	r4, #148	; 0x94
100119d4:	00a4      	lsls	r4, r4, #2
100119d6:	1914      	adds	r4, r2, r4
100119d8:	c403      	stmia	r4!, {r0, r1}
100119da:	2196      	movs	r1, #150	; 0x96
100119dc:	3301      	adds	r3, #1
100119de:	0089      	lsls	r1, r1, #2
100119e0:	5053      	str	r3, [r2, r1]
100119e2:	bd30      	pop	{r4, r5, pc}
100119e4:	428c      	cmp	r4, r1
100119e6:	d1f8      	bne.n	100119da <inv_record_max_moment_in_no_motion_accel+0x22>
100119e8:	682c      	ldr	r4, [r5, #0]
100119ea:	4284      	cmp	r4, r0
100119ec:	d3f1      	bcc.n	100119d2 <inv_record_max_moment_in_no_motion_accel+0x1a>
100119ee:	e7f4      	b.n	100119da <inv_record_max_moment_in_no_motion_accel+0x22>
100119f0:	1001ea80 	.word	0x1001ea80

100119f4 <inv_record_min_moment_in_motion_gyro>:
100119f4:	238a      	movs	r3, #138	; 0x8a
100119f6:	4a0d      	ldr	r2, [pc, #52]	; (10011a2c <inv_record_min_moment_in_motion_gyro+0x38>)
100119f8:	009b      	lsls	r3, r3, #2
100119fa:	58d3      	ldr	r3, [r2, r3]
100119fc:	b530      	push	{r4, r5, lr}
100119fe:	2b00      	cmp	r3, #0
10011a00:	d005      	beq.n	10011a0e <inv_record_min_moment_in_motion_gyro+0x1a>
10011a02:	2488      	movs	r4, #136	; 0x88
10011a04:	00a4      	lsls	r4, r4, #2
10011a06:	1915      	adds	r5, r2, r4
10011a08:	686c      	ldr	r4, [r5, #4]
10011a0a:	428c      	cmp	r4, r1
10011a0c:	dd08      	ble.n	10011a20 <inv_record_min_moment_in_motion_gyro+0x2c>
10011a0e:	2488      	movs	r4, #136	; 0x88
10011a10:	00a4      	lsls	r4, r4, #2
10011a12:	1914      	adds	r4, r2, r4
10011a14:	c403      	stmia	r4!, {r0, r1}
10011a16:	218a      	movs	r1, #138	; 0x8a
10011a18:	3301      	adds	r3, #1
10011a1a:	0089      	lsls	r1, r1, #2
10011a1c:	5053      	str	r3, [r2, r1]
10011a1e:	bd30      	pop	{r4, r5, pc}
10011a20:	428c      	cmp	r4, r1
10011a22:	d1f8      	bne.n	10011a16 <inv_record_min_moment_in_motion_gyro+0x22>
10011a24:	682c      	ldr	r4, [r5, #0]
10011a26:	4284      	cmp	r4, r0
10011a28:	d8f1      	bhi.n	10011a0e <inv_record_min_moment_in_motion_gyro+0x1a>
10011a2a:	e7f4      	b.n	10011a16 <inv_record_min_moment_in_motion_gyro+0x22>
10011a2c:	1001ea80 	.word	0x1001ea80

10011a30 <inv_record_min_moment_in_motion_accel>:
10011a30:	238e      	movs	r3, #142	; 0x8e
10011a32:	4a0d      	ldr	r2, [pc, #52]	; (10011a68 <inv_record_min_moment_in_motion_accel+0x38>)
10011a34:	009b      	lsls	r3, r3, #2
10011a36:	58d3      	ldr	r3, [r2, r3]
10011a38:	b530      	push	{r4, r5, lr}
10011a3a:	2b00      	cmp	r3, #0
10011a3c:	d005      	beq.n	10011a4a <inv_record_min_moment_in_motion_accel+0x1a>
10011a3e:	248c      	movs	r4, #140	; 0x8c
10011a40:	00a4      	lsls	r4, r4, #2
10011a42:	1915      	adds	r5, r2, r4
10011a44:	686c      	ldr	r4, [r5, #4]
10011a46:	428c      	cmp	r4, r1
10011a48:	dd08      	ble.n	10011a5c <inv_record_min_moment_in_motion_accel+0x2c>
10011a4a:	248c      	movs	r4, #140	; 0x8c
10011a4c:	00a4      	lsls	r4, r4, #2
10011a4e:	1914      	adds	r4, r2, r4
10011a50:	c403      	stmia	r4!, {r0, r1}
10011a52:	218e      	movs	r1, #142	; 0x8e
10011a54:	3301      	adds	r3, #1
10011a56:	0089      	lsls	r1, r1, #2
10011a58:	5053      	str	r3, [r2, r1]
10011a5a:	bd30      	pop	{r4, r5, pc}
10011a5c:	428c      	cmp	r4, r1
10011a5e:	d1f8      	bne.n	10011a52 <inv_record_min_moment_in_motion_accel+0x22>
10011a60:	682c      	ldr	r4, [r5, #0]
10011a62:	4284      	cmp	r4, r0
10011a64:	d8f1      	bhi.n	10011a4a <inv_record_min_moment_in_motion_accel+0x1a>
10011a66:	e7f4      	b.n	10011a52 <inv_record_min_moment_in_motion_accel+0x22>
10011a68:	1001ea80 	.word	0x1001ea80

10011a6c <inv_detect_motion_by_gyro_accel>:
10011a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a6e:	4c4f      	ldr	r4, [pc, #316]	; (10011bac <inv_detect_motion_by_gyro_accel+0x140>)
10011a70:	1c05      	adds	r5, r0, #0
10011a72:	6ea3      	ldr	r3, [r4, #104]	; 0x68
10011a74:	6f62      	ldr	r2, [r4, #116]	; 0x74
10011a76:	4e4e      	ldr	r6, [pc, #312]	; (10011bb0 <inv_detect_motion_by_gyro_accel+0x144>)
10011a78:	1a9a      	subs	r2, r3, r2
10011a7a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10011a7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
10011a7e:	1c31      	adds	r1, r6, #0
10011a80:	1a1b      	subs	r3, r3, r0
10011a82:	4293      	cmp	r3, r2
10011a84:	da00      	bge.n	10011a88 <inv_detect_motion_by_gyro_accel+0x1c>
10011a86:	1c13      	adds	r3, r2, #0
10011a88:	6f22      	ldr	r2, [r4, #112]	; 0x70
10011a8a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
10011a8c:	1a12      	subs	r2, r2, r0
10011a8e:	4293      	cmp	r3, r2
10011a90:	da00      	bge.n	10011a94 <inv_detect_motion_by_gyro_accel+0x28>
10011a92:	1c13      	adds	r3, r2, #0
10011a94:	6bca      	ldr	r2, [r1, #60]	; 0x3c
10011a96:	429a      	cmp	r2, r3
10011a98:	db4b      	blt.n	10011b32 <inv_detect_motion_by_gyro_accel+0xc6>
10011a9a:	2380      	movs	r3, #128	; 0x80
10011a9c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
10011a9e:	005b      	lsls	r3, r3, #1
10011aa0:	2002      	movs	r0, #2
10011aa2:	421a      	tst	r2, r3
10011aa4:	d100      	bne.n	10011aa8 <inv_detect_motion_by_gyro_accel+0x3c>
10011aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011aa8:	2280      	movs	r2, #128	; 0x80
10011aaa:	6821      	ldr	r1, [r4, #0]
10011aac:	58a2      	ldr	r2, [r4, r2]
10011aae:	428a      	cmp	r2, r1
10011ab0:	dbf9      	blt.n	10011aa6 <inv_detect_motion_by_gyro_accel+0x3a>
10011ab2:	6f6d      	ldr	r5, [r5, #116]	; 0x74
10011ab4:	421d      	tst	r5, r3
10011ab6:	d040      	beq.n	10011b3a <inv_detect_motion_by_gyro_accel+0xce>
10011ab8:	33b0      	adds	r3, #176	; 0xb0
10011aba:	58e3      	ldr	r3, [r4, r3]
10011abc:	4299      	cmp	r1, r3
10011abe:	dcf2      	bgt.n	10011aa6 <inv_detect_motion_by_gyro_accel+0x3a>
10011ac0:	2b00      	cmp	r3, #0
10011ac2:	d166      	bne.n	10011b92 <inv_detect_motion_by_gyro_accel+0x126>
10011ac4:	2000      	movs	r0, #0
10011ac6:	2100      	movs	r1, #0
10011ac8:	1c23      	adds	r3, r4, #0
10011aca:	33d9      	adds	r3, #217	; 0xd9
10011acc:	33ff      	adds	r3, #255	; 0xff
10011ace:	c303      	stmia	r3!, {r0, r1}
10011ad0:	6973      	ldr	r3, [r6, #20]
10011ad2:	428b      	cmp	r3, r1
10011ad4:	db03      	blt.n	10011ade <inv_detect_motion_by_gyro_accel+0x72>
10011ad6:	d166      	bne.n	10011ba6 <inv_detect_motion_by_gyro_accel+0x13a>
10011ad8:	6933      	ldr	r3, [r6, #16]
10011ada:	4283      	cmp	r3, r0
10011adc:	d263      	bcs.n	10011ba6 <inv_detect_motion_by_gyro_accel+0x13a>
10011ade:	238e      	movs	r3, #142	; 0x8e
10011ae0:	228c      	movs	r2, #140	; 0x8c
10011ae2:	009b      	lsls	r3, r3, #2
10011ae4:	58e3      	ldr	r3, [r4, r3]
10011ae6:	0092      	lsls	r2, r2, #2
10011ae8:	2b00      	cmp	r3, #0
10011aea:	d009      	beq.n	10011b00 <inv_detect_motion_by_gyro_accel+0x94>
10011aec:	18a5      	adds	r5, r4, r2
10011aee:	686a      	ldr	r2, [r5, #4]
10011af0:	428a      	cmp	r2, r1
10011af2:	dc03      	bgt.n	10011afc <inv_detect_motion_by_gyro_accel+0x90>
10011af4:	d106      	bne.n	10011b04 <inv_detect_motion_by_gyro_accel+0x98>
10011af6:	682a      	ldr	r2, [r5, #0]
10011af8:	4282      	cmp	r2, r0
10011afa:	d903      	bls.n	10011b04 <inv_detect_motion_by_gyro_accel+0x98>
10011afc:	228c      	movs	r2, #140	; 0x8c
10011afe:	0092      	lsls	r2, r2, #2
10011b00:	18a2      	adds	r2, r4, r2
10011b02:	c203      	stmia	r2!, {r0, r1}
10011b04:	228e      	movs	r2, #142	; 0x8e
10011b06:	2500      	movs	r5, #0
10011b08:	3301      	adds	r3, #1
10011b0a:	0092      	lsls	r2, r2, #2
10011b0c:	50a3      	str	r3, [r4, r2]
10011b0e:	4f29      	ldr	r7, [pc, #164]	; (10011bb4 <inv_detect_motion_by_gyro_accel+0x148>)
10011b10:	2298      	movs	r2, #152	; 0x98
10011b12:	1c38      	adds	r0, r7, #0
10011b14:	2100      	movs	r1, #0
10011b16:	f006 fda2 	bl	1001865e <memset>
10011b1a:	2004      	movs	r0, #4
10011b1c:	f7ff fca2 	bl	10011464 <inv_init_maxmin>
10011b20:	2380      	movs	r3, #128	; 0x80
10011b22:	3f39      	subs	r7, #57	; 0x39
10011b24:	3fff      	subs	r7, #255	; 0xff
10011b26:	58fa      	ldr	r2, [r7, r3]
10011b28:	2a00      	cmp	r2, #0
10011b2a:	d109      	bne.n	10011b40 <inv_detect_motion_by_gyro_accel+0xd4>
10011b2c:	2000      	movs	r0, #0
10011b2e:	2100      	movs	r1, #0
10011b30:	e009      	b.n	10011b46 <inv_detect_motion_by_gyro_accel+0xda>
10011b32:	f7ff fccf 	bl	100114d4 <inv_reset_packet>
10011b36:	2000      	movs	r0, #0
10011b38:	e7b5      	b.n	10011aa6 <inv_detect_motion_by_gyro_accel+0x3a>
10011b3a:	2501      	movs	r5, #1
10011b3c:	2a00      	cmp	r2, #0
10011b3e:	d0f5      	beq.n	10011b2c <inv_detect_motion_by_gyro_accel+0xc0>
10011b40:	481d      	ldr	r0, [pc, #116]	; (10011bb8 <inv_detect_motion_by_gyro_accel+0x14c>)
10011b42:	f7ff fbd5 	bl	100112f0 <inv_fast_nomot_parameter.part.3>
10011b46:	1c23      	adds	r3, r4, #0
10011b48:	33f1      	adds	r3, #241	; 0xf1
10011b4a:	33ff      	adds	r3, #255	; 0xff
10011b4c:	c303      	stmia	r3!, {r0, r1}
10011b4e:	69f3      	ldr	r3, [r6, #28]
10011b50:	428b      	cmp	r3, r1
10011b52:	db05      	blt.n	10011b60 <inv_detect_motion_by_gyro_accel+0xf4>
10011b54:	d001      	beq.n	10011b5a <inv_detect_motion_by_gyro_accel+0xee>
10011b56:	1c28      	adds	r0, r5, #0
10011b58:	e7a5      	b.n	10011aa6 <inv_detect_motion_by_gyro_accel+0x3a>
10011b5a:	69b3      	ldr	r3, [r6, #24]
10011b5c:	4283      	cmp	r3, r0
10011b5e:	d2fa      	bcs.n	10011b56 <inv_detect_motion_by_gyro_accel+0xea>
10011b60:	238a      	movs	r3, #138	; 0x8a
10011b62:	2288      	movs	r2, #136	; 0x88
10011b64:	009b      	lsls	r3, r3, #2
10011b66:	58e3      	ldr	r3, [r4, r3]
10011b68:	0092      	lsls	r2, r2, #2
10011b6a:	2b00      	cmp	r3, #0
10011b6c:	d009      	beq.n	10011b82 <inv_detect_motion_by_gyro_accel+0x116>
10011b6e:	18a5      	adds	r5, r4, r2
10011b70:	686a      	ldr	r2, [r5, #4]
10011b72:	428a      	cmp	r2, r1
10011b74:	dc03      	bgt.n	10011b7e <inv_detect_motion_by_gyro_accel+0x112>
10011b76:	d106      	bne.n	10011b86 <inv_detect_motion_by_gyro_accel+0x11a>
10011b78:	682a      	ldr	r2, [r5, #0]
10011b7a:	4282      	cmp	r2, r0
10011b7c:	d903      	bls.n	10011b86 <inv_detect_motion_by_gyro_accel+0x11a>
10011b7e:	2288      	movs	r2, #136	; 0x88
10011b80:	0092      	lsls	r2, r2, #2
10011b82:	18a2      	adds	r2, r4, r2
10011b84:	c203      	stmia	r2!, {r0, r1}
10011b86:	228a      	movs	r2, #138	; 0x8a
10011b88:	3301      	adds	r3, #1
10011b8a:	0092      	lsls	r2, r2, #2
10011b8c:	50a3      	str	r3, [r4, r2]
10011b8e:	2000      	movs	r0, #0
10011b90:	e789      	b.n	10011aa6 <inv_detect_motion_by_gyro_accel+0x3a>
10011b92:	1c20      	adds	r0, r4, #0
10011b94:	3039      	adds	r0, #57	; 0x39
10011b96:	30ff      	adds	r0, #255	; 0xff
10011b98:	f7ff fbaa 	bl	100112f0 <inv_fast_nomot_parameter.part.3>
10011b9c:	030b      	lsls	r3, r1, #12
10011b9e:	0d00      	lsrs	r0, r0, #20
10011ba0:	4318      	orrs	r0, r3
10011ba2:	1509      	asrs	r1, r1, #20
10011ba4:	e790      	b.n	10011ac8 <inv_detect_motion_by_gyro_accel+0x5c>
10011ba6:	2501      	movs	r5, #1
10011ba8:	e7b1      	b.n	10011b0e <inv_detect_motion_by_gyro_accel+0xa2>
10011baa:	46c0      	nop			; (mov r8, r8)
10011bac:	1001ea80 	.word	0x1001ea80
10011bb0:	1001d548 	.word	0x1001d548
10011bb4:	1001ebb8 	.word	0x1001ebb8
10011bb8:	1001ea88 	.word	0x1001ea88

10011bbc <inv_sensor_data_preprocess>:
10011bbc:	23c0      	movs	r3, #192	; 0xc0
10011bbe:	b510      	push	{r4, lr}
10011bc0:	6b02      	ldr	r2, [r0, #48]	; 0x30
10011bc2:	b084      	sub	sp, #16
10011bc4:	1c04      	adds	r4, r0, #0
10011bc6:	4013      	ands	r3, r2
10011bc8:	2bc0      	cmp	r3, #192	; 0xc0
10011bca:	d038      	beq.n	10011c3e <inv_sensor_data_preprocess+0x82>
10011bcc:	23c0      	movs	r3, #192	; 0xc0
10011bce:	6f62      	ldr	r2, [r4, #116]	; 0x74
10011bd0:	4013      	ands	r3, r2
10011bd2:	2bc0      	cmp	r3, #192	; 0xc0
10011bd4:	d02d      	beq.n	10011c32 <inv_sensor_data_preprocess+0x76>
10011bd6:	21c0      	movs	r1, #192	; 0xc0
10011bd8:	23b8      	movs	r3, #184	; 0xb8
10011bda:	1c0a      	adds	r2, r1, #0
10011bdc:	58e3      	ldr	r3, [r4, r3]
10011bde:	401a      	ands	r2, r3
10011be0:	2ac0      	cmp	r2, #192	; 0xc0
10011be2:	d017      	beq.n	10011c14 <inv_sensor_data_preprocess+0x58>
10011be4:	2260      	movs	r2, #96	; 0x60
10011be6:	4013      	ands	r3, r2
10011be8:	2b60      	cmp	r3, #96	; 0x60
10011bea:	d001      	beq.n	10011bf0 <inv_sensor_data_preprocess+0x34>
10011bec:	b004      	add	sp, #16
10011bee:	bd10      	pop	{r4, pc}
10011bf0:	3340      	adds	r3, #64	; 0x40
10011bf2:	58e3      	ldr	r3, [r4, r3]
10011bf4:	5861      	ldr	r1, [r4, r1]
10011bf6:	139b      	asrs	r3, r3, #14
10011bf8:	9301      	str	r3, [sp, #4]
10011bfa:	23a4      	movs	r3, #164	; 0xa4
10011bfc:	58e3      	ldr	r3, [r4, r3]
10011bfe:	a801      	add	r0, sp, #4
10011c00:	139b      	asrs	r3, r3, #14
10011c02:	9302      	str	r3, [sp, #8]
10011c04:	23a8      	movs	r3, #168	; 0xa8
10011c06:	58e3      	ldr	r3, [r4, r3]
10011c08:	4a0f      	ldr	r2, [pc, #60]	; (10011c48 <inv_sensor_data_preprocess+0x8c>)
10011c0a:	139b      	asrs	r3, r3, #14
10011c0c:	9303      	str	r3, [sp, #12]
10011c0e:	f7ff fe0b 	bl	10011828 <inv_fast_nomot_store_data_compass>
10011c12:	e7eb      	b.n	10011bec <inv_sensor_data_preprocess+0x30>
10011c14:	238c      	movs	r3, #140	; 0x8c
10011c16:	5ee3      	ldrsh	r3, [r4, r3]
10011c18:	a801      	add	r0, sp, #4
10011c1a:	9301      	str	r3, [sp, #4]
10011c1c:	238e      	movs	r3, #142	; 0x8e
10011c1e:	5ee3      	ldrsh	r3, [r4, r3]
10011c20:	9302      	str	r3, [sp, #8]
10011c22:	2390      	movs	r3, #144	; 0x90
10011c24:	5ee3      	ldrsh	r3, [r4, r3]
10011c26:	58a1      	ldr	r1, [r4, r2]
10011c28:	4a07      	ldr	r2, [pc, #28]	; (10011c48 <inv_sensor_data_preprocess+0x8c>)
10011c2a:	9303      	str	r3, [sp, #12]
10011c2c:	f7ff fdfc 	bl	10011828 <inv_fast_nomot_store_data_compass>
10011c30:	e7dc      	b.n	10011bec <inv_sensor_data_preprocess+0x30>
10011c32:	1c20      	adds	r0, r4, #0
10011c34:	4905      	ldr	r1, [pc, #20]	; (10011c4c <inv_sensor_data_preprocess+0x90>)
10011c36:	3048      	adds	r0, #72	; 0x48
10011c38:	f7ff fd9e 	bl	10011778 <inv_fast_nomot_store_data>
10011c3c:	e7cb      	b.n	10011bd6 <inv_sensor_data_preprocess+0x1a>
10011c3e:	3004      	adds	r0, #4
10011c40:	4903      	ldr	r1, [pc, #12]	; (10011c50 <inv_sensor_data_preprocess+0x94>)
10011c42:	f7ff fd99 	bl	10011778 <inv_fast_nomot_store_data>
10011c46:	e7c1      	b.n	10011bcc <inv_sensor_data_preprocess+0x10>
10011c48:	1001eb20 	.word	0x1001eb20
10011c4c:	1001ebb8 	.word	0x1001ebb8
10011c50:	1001ea88 	.word	0x1001ea88

10011c54 <inv_generate_fast_nomot>:
10011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
10011c58:	05da      	lsls	r2, r3, #23
10011c5a:	d400      	bmi.n	10011c5e <inv_generate_fast_nomot+0xa>
10011c5c:	e0a0      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011c5e:	2150      	movs	r1, #80	; 0x50
10011c60:	6f42      	ldr	r2, [r0, #116]	; 0x74
10011c62:	1c05      	adds	r5, r0, #0
10011c64:	400a      	ands	r2, r1
10011c66:	2a40      	cmp	r2, #64	; 0x40
10011c68:	d100      	bne.n	10011c6c <inv_generate_fast_nomot+0x18>
10011c6a:	e09b      	b.n	10011da4 <inv_generate_fast_nomot+0x150>
10011c6c:	22b8      	movs	r2, #184	; 0xb8
10011c6e:	5882      	ldr	r2, [r0, r2]
10011c70:	400a      	ands	r2, r1
10011c72:	2a40      	cmp	r2, #64	; 0x40
10011c74:	d100      	bne.n	10011c78 <inv_generate_fast_nomot+0x24>
10011c76:	e095      	b.n	10011da4 <inv_generate_fast_nomot+0x150>
10011c78:	400b      	ands	r3, r1
10011c7a:	2b40      	cmp	r3, #64	; 0x40
10011c7c:	d100      	bne.n	10011c80 <inv_generate_fast_nomot+0x2c>
10011c7e:	e091      	b.n	10011da4 <inv_generate_fast_nomot+0x150>
10011c80:	4cc9      	ldr	r4, [pc, #804]	; (10011fa8 <inv_generate_fast_nomot+0x354>)
10011c82:	2282      	movs	r2, #130	; 0x82
10011c84:	0092      	lsls	r2, r2, #2
10011c86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10011c88:	58a1      	ldr	r1, [r4, r2]
10011c8a:	4299      	cmp	r1, r3
10011c8c:	d01b      	beq.n	10011cc6 <inv_generate_fast_nomot+0x72>
10011c8e:	50a3      	str	r3, [r4, r2]
10011c90:	4ec6      	ldr	r6, [pc, #792]	; (10011fac <inv_generate_fast_nomot+0x358>)
10011c92:	2b09      	cmp	r3, #9
10011c94:	dc00      	bgt.n	10011c98 <inv_generate_fast_nomot+0x44>
10011c96:	e18d      	b.n	10011fb4 <inv_generate_fast_nomot+0x360>
10011c98:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011c9a:	6b71      	ldr	r1, [r6, #52]	; 0x34
10011c9c:	6023      	str	r3, [r4, #0]
10011c9e:	2383      	movs	r3, #131	; 0x83
10011ca0:	1c08      	adds	r0, r1, #0
10011ca2:	009b      	lsls	r3, r3, #2
10011ca4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
10011ca6:	50e1      	str	r1, [r4, r3]
10011ca8:	3308      	adds	r3, #8
10011caa:	50e2      	str	r2, [r4, r3]
10011cac:	2210      	movs	r2, #16
10011cae:	1a52      	subs	r2, r2, r1
10011cb0:	2184      	movs	r1, #132	; 0x84
10011cb2:	2319      	movs	r3, #25
10011cb4:	0089      	lsls	r1, r1, #2
10011cb6:	5062      	str	r2, [r4, r1]
10011cb8:	2180      	movs	r1, #128	; 0x80
10011cba:	2286      	movs	r2, #134	; 0x86
10011cbc:	4083      	lsls	r3, r0
10011cbe:	01c9      	lsls	r1, r1, #7
10011cc0:	0092      	lsls	r2, r2, #2
10011cc2:	50a1      	str	r1, [r4, r2]
10011cc4:	63f3      	str	r3, [r6, #60]	; 0x3c
10011cc6:	1c28      	adds	r0, r5, #0
10011cc8:	f7ff ff78 	bl	10011bbc <inv_sensor_data_preprocess>
10011ccc:	23f4      	movs	r3, #244	; 0xf4
10011cce:	005b      	lsls	r3, r3, #1
10011cd0:	5ce3      	ldrb	r3, [r4, r3]
10011cd2:	2b06      	cmp	r3, #6
10011cd4:	d864      	bhi.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011cd6:	4ab6      	ldr	r2, [pc, #728]	; (10011fb0 <inv_generate_fast_nomot+0x35c>)
10011cd8:	009b      	lsls	r3, r3, #2
10011cda:	58d3      	ldr	r3, [r2, r3]
10011cdc:	469f      	mov	pc, r3
10011cde:	23b8      	movs	r3, #184	; 0xb8
10011ce0:	58ea      	ldr	r2, [r5, r3]
10011ce2:	3348      	adds	r3, #72	; 0x48
10011ce4:	421a      	tst	r2, r3
10011ce6:	d01b      	beq.n	10011d20 <inv_generate_fast_nomot+0xcc>
10011ce8:	58e2      	ldr	r2, [r4, r3]
10011cea:	3304      	adds	r3, #4
10011cec:	58e3      	ldr	r3, [r4, r3]
10011cee:	4293      	cmp	r3, r2
10011cf0:	da00      	bge.n	10011cf4 <inv_generate_fast_nomot+0xa0>
10011cf2:	1c13      	adds	r3, r2, #0
10011cf4:	2284      	movs	r2, #132	; 0x84
10011cf6:	0052      	lsls	r2, r2, #1
10011cf8:	58a2      	ldr	r2, [r4, r2]
10011cfa:	4293      	cmp	r3, r2
10011cfc:	da00      	bge.n	10011d00 <inv_generate_fast_nomot+0xac>
10011cfe:	1c13      	adds	r3, r2, #0
10011d00:	1c21      	adds	r1, r4, #0
10011d02:	48aa      	ldr	r0, [pc, #680]	; (10011fac <inv_generate_fast_nomot+0x358>)
10011d04:	31d1      	adds	r1, #209	; 0xd1
10011d06:	31ff      	adds	r1, #255	; 0xff
10011d08:	17da      	asrs	r2, r3, #31
10011d0a:	600b      	str	r3, [r1, #0]
10011d0c:	604a      	str	r2, [r1, #4]
10011d0e:	68c1      	ldr	r1, [r0, #12]
10011d10:	4291      	cmp	r1, r2
10011d12:	da00      	bge.n	10011d16 <inv_generate_fast_nomot+0xc2>
10011d14:	e143      	b.n	10011f9e <inv_generate_fast_nomot+0x34a>
10011d16:	d103      	bne.n	10011d20 <inv_generate_fast_nomot+0xcc>
10011d18:	6882      	ldr	r2, [r0, #8]
10011d1a:	429a      	cmp	r2, r3
10011d1c:	d200      	bcs.n	10011d20 <inv_generate_fast_nomot+0xcc>
10011d1e:	e13e      	b.n	10011f9e <inv_generate_fast_nomot+0x34a>
10011d20:	1c28      	adds	r0, r5, #0
10011d22:	f7ff fea3 	bl	10011a6c <inv_detect_motion_by_gyro_accel>
10011d26:	2800      	cmp	r0, #0
10011d28:	d100      	bne.n	10011d2c <inv_generate_fast_nomot+0xd8>
10011d2a:	e138      	b.n	10011f9e <inv_generate_fast_nomot+0x34a>
10011d2c:	2801      	cmp	r0, #1
10011d2e:	d137      	bne.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011d30:	1c28      	adds	r0, r5, #0
10011d32:	f7ff fc8d 	bl	10011650 <inv_fast_nomot_set_gyro_bias>
10011d36:	1c23      	adds	r3, r4, #0
10011d38:	33d9      	adds	r3, #217	; 0xd9
10011d3a:	33ff      	adds	r3, #255	; 0xff
10011d3c:	cb06      	ldmia	r3!, {r1, r2}
10011d3e:	2396      	movs	r3, #150	; 0x96
10011d40:	2094      	movs	r0, #148	; 0x94
10011d42:	009b      	lsls	r3, r3, #2
10011d44:	58e3      	ldr	r3, [r4, r3]
10011d46:	0080      	lsls	r0, r0, #2
10011d48:	1820      	adds	r0, r4, r0
10011d4a:	2b00      	cmp	r3, #0
10011d4c:	d009      	beq.n	10011d62 <inv_generate_fast_nomot+0x10e>
10011d4e:	6845      	ldr	r5, [r0, #4]
10011d50:	4295      	cmp	r5, r2
10011d52:	db03      	blt.n	10011d5c <inv_generate_fast_nomot+0x108>
10011d54:	d106      	bne.n	10011d64 <inv_generate_fast_nomot+0x110>
10011d56:	6800      	ldr	r0, [r0, #0]
10011d58:	4288      	cmp	r0, r1
10011d5a:	d203      	bcs.n	10011d64 <inv_generate_fast_nomot+0x110>
10011d5c:	2094      	movs	r0, #148	; 0x94
10011d5e:	0080      	lsls	r0, r0, #2
10011d60:	1820      	adds	r0, r4, r0
10011d62:	c006      	stmia	r0!, {r1, r2}
10011d64:	2296      	movs	r2, #150	; 0x96
10011d66:	3301      	adds	r3, #1
10011d68:	0092      	lsls	r2, r2, #2
10011d6a:	50a3      	str	r3, [r4, r2]
10011d6c:	1c23      	adds	r3, r4, #0
10011d6e:	33f1      	adds	r3, #241	; 0xf1
10011d70:	33ff      	adds	r3, #255	; 0xff
10011d72:	cb06      	ldmia	r3!, {r1, r2}
10011d74:	2392      	movs	r3, #146	; 0x92
10011d76:	2090      	movs	r0, #144	; 0x90
10011d78:	009b      	lsls	r3, r3, #2
10011d7a:	58e3      	ldr	r3, [r4, r3]
10011d7c:	0080      	lsls	r0, r0, #2
10011d7e:	1820      	adds	r0, r4, r0
10011d80:	2b00      	cmp	r3, #0
10011d82:	d100      	bne.n	10011d86 <inv_generate_fast_nomot+0x132>
10011d84:	e09b      	b.n	10011ebe <inv_generate_fast_nomot+0x26a>
10011d86:	6845      	ldr	r5, [r0, #4]
10011d88:	4295      	cmp	r5, r2
10011d8a:	da00      	bge.n	10011d8e <inv_generate_fast_nomot+0x13a>
10011d8c:	e094      	b.n	10011eb8 <inv_generate_fast_nomot+0x264>
10011d8e:	d103      	bne.n	10011d98 <inv_generate_fast_nomot+0x144>
10011d90:	6800      	ldr	r0, [r0, #0]
10011d92:	4288      	cmp	r0, r1
10011d94:	d200      	bcs.n	10011d98 <inv_generate_fast_nomot+0x144>
10011d96:	e08f      	b.n	10011eb8 <inv_generate_fast_nomot+0x264>
10011d98:	2292      	movs	r2, #146	; 0x92
10011d9a:	3301      	adds	r3, #1
10011d9c:	0092      	lsls	r2, r2, #2
10011d9e:	50a3      	str	r3, [r4, r2]
10011da0:	2000      	movs	r0, #0
10011da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011da4:	f7ff fb96 	bl	100114d4 <inv_reset_packet>
10011da8:	22f0      	movs	r2, #240	; 0xf0
10011daa:	2300      	movs	r3, #0
10011dac:	4c7e      	ldr	r4, [pc, #504]	; (10011fa8 <inv_generate_fast_nomot+0x354>)
10011dae:	0052      	lsls	r2, r2, #1
10011db0:	50a3      	str	r3, [r4, r2]
10011db2:	3208      	adds	r2, #8
10011db4:	54a3      	strb	r3, [r4, r2]
10011db6:	e764      	b.n	10011c82 <inv_generate_fast_nomot+0x2e>
10011db8:	23f4      	movs	r3, #244	; 0xf4
10011dba:	2206      	movs	r2, #6
10011dbc:	005b      	lsls	r3, r3, #1
10011dbe:	2001      	movs	r0, #1
10011dc0:	54e2      	strb	r2, [r4, r3]
10011dc2:	f7f8 ffcd 	bl	1000ad60 <inv_set_motion_state>
10011dc6:	f7ff fb85 	bl	100114d4 <inv_reset_packet>
10011dca:	2386      	movs	r3, #134	; 0x86
10011dcc:	005b      	lsls	r3, r3, #1
10011dce:	58e2      	ldr	r2, [r4, r3]
10011dd0:	3310      	adds	r3, #16
10011dd2:	50e2      	str	r2, [r4, r3]
10011dd4:	2280      	movs	r2, #128	; 0x80
10011dd6:	2300      	movs	r3, #0
10011dd8:	0052      	lsls	r2, r2, #1
10011dda:	50a3      	str	r3, [r4, r2]
10011ddc:	3210      	adds	r2, #16
10011dde:	58a1      	ldr	r1, [r4, r2]
10011de0:	3210      	adds	r2, #16
10011de2:	50a1      	str	r1, [r4, r2]
10011de4:	3a1c      	subs	r2, #28
10011de6:	50a3      	str	r3, [r4, r2]
10011de8:	3210      	adds	r2, #16
10011dea:	58a1      	ldr	r1, [r4, r2]
10011dec:	3210      	adds	r2, #16
10011dee:	50a1      	str	r1, [r4, r2]
10011df0:	3a1c      	subs	r2, #28
10011df2:	50a3      	str	r3, [r4, r2]
10011df4:	3220      	adds	r2, #32
10011df6:	58a1      	ldr	r1, [r4, r2]
10011df8:	3204      	adds	r2, #4
10011dfa:	50a1      	str	r1, [r4, r2]
10011dfc:	3a14      	subs	r2, #20
10011dfe:	50a3      	str	r3, [r4, r2]
10011e00:	3218      	adds	r2, #24
10011e02:	50a3      	str	r3, [r4, r2]
10011e04:	e7cc      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011e06:	1c28      	adds	r0, r5, #0
10011e08:	f7ff fe30 	bl	10011a6c <inv_detect_motion_by_gyro_accel>
10011e0c:	2800      	cmp	r0, #0
10011e0e:	d100      	bne.n	10011e12 <inv_generate_fast_nomot+0x1be>
10011e10:	e0c5      	b.n	10011f9e <inv_generate_fast_nomot+0x34a>
10011e12:	2801      	cmp	r0, #1
10011e14:	d1c4      	bne.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011e16:	23b8      	movs	r3, #184	; 0xb8
10011e18:	58ea      	ldr	r2, [r5, r3]
10011e1a:	3348      	adds	r3, #72	; 0x48
10011e1c:	421a      	tst	r2, r3
10011e1e:	d100      	bne.n	10011e22 <inv_generate_fast_nomot+0x1ce>
10011e20:	e0f1      	b.n	10012006 <inv_generate_fast_nomot+0x3b2>
10011e22:	58e2      	ldr	r2, [r4, r3]
10011e24:	3304      	adds	r3, #4
10011e26:	58e3      	ldr	r3, [r4, r3]
10011e28:	4293      	cmp	r3, r2
10011e2a:	da00      	bge.n	10011e2e <inv_generate_fast_nomot+0x1da>
10011e2c:	1c13      	adds	r3, r2, #0
10011e2e:	2284      	movs	r2, #132	; 0x84
10011e30:	0052      	lsls	r2, r2, #1
10011e32:	58a2      	ldr	r2, [r4, r2]
10011e34:	4293      	cmp	r3, r2
10011e36:	da00      	bge.n	10011e3a <inv_generate_fast_nomot+0x1e6>
10011e38:	1c13      	adds	r3, r2, #0
10011e3a:	1c21      	adds	r1, r4, #0
10011e3c:	4e5b      	ldr	r6, [pc, #364]	; (10011fac <inv_generate_fast_nomot+0x358>)
10011e3e:	31d1      	adds	r1, #209	; 0xd1
10011e40:	31ff      	adds	r1, #255	; 0xff
10011e42:	17da      	asrs	r2, r3, #31
10011e44:	600b      	str	r3, [r1, #0]
10011e46:	604a      	str	r2, [r1, #4]
10011e48:	68f1      	ldr	r1, [r6, #12]
10011e4a:	4291      	cmp	r1, r2
10011e4c:	db05      	blt.n	10011e5a <inv_generate_fast_nomot+0x206>
10011e4e:	d000      	beq.n	10011e52 <inv_generate_fast_nomot+0x1fe>
10011e50:	e0ce      	b.n	10011ff0 <inv_generate_fast_nomot+0x39c>
10011e52:	68b2      	ldr	r2, [r6, #8]
10011e54:	429a      	cmp	r2, r3
10011e56:	d300      	bcc.n	10011e5a <inv_generate_fast_nomot+0x206>
10011e58:	e0ca      	b.n	10011ff0 <inv_generate_fast_nomot+0x39c>
10011e5a:	23f4      	movs	r3, #244	; 0xf4
10011e5c:	2205      	movs	r2, #5
10011e5e:	005b      	lsls	r3, r3, #1
10011e60:	54e2      	strb	r2, [r4, r3]
10011e62:	1c23      	adds	r3, r4, #0
10011e64:	33d9      	adds	r3, #217	; 0xd9
10011e66:	33ff      	adds	r3, #255	; 0xff
10011e68:	cb06      	ldmia	r3!, {r1, r2}
10011e6a:	2396      	movs	r3, #150	; 0x96
10011e6c:	2094      	movs	r0, #148	; 0x94
10011e6e:	009b      	lsls	r3, r3, #2
10011e70:	58e3      	ldr	r3, [r4, r3]
10011e72:	0080      	lsls	r0, r0, #2
10011e74:	2b00      	cmp	r3, #0
10011e76:	d009      	beq.n	10011e8c <inv_generate_fast_nomot+0x238>
10011e78:	1825      	adds	r5, r4, r0
10011e7a:	6868      	ldr	r0, [r5, #4]
10011e7c:	4290      	cmp	r0, r2
10011e7e:	db03      	blt.n	10011e88 <inv_generate_fast_nomot+0x234>
10011e80:	d106      	bne.n	10011e90 <inv_generate_fast_nomot+0x23c>
10011e82:	6828      	ldr	r0, [r5, #0]
10011e84:	4288      	cmp	r0, r1
10011e86:	d203      	bcs.n	10011e90 <inv_generate_fast_nomot+0x23c>
10011e88:	2094      	movs	r0, #148	; 0x94
10011e8a:	0080      	lsls	r0, r0, #2
10011e8c:	1820      	adds	r0, r4, r0
10011e8e:	c006      	stmia	r0!, {r1, r2}
10011e90:	2296      	movs	r2, #150	; 0x96
10011e92:	3301      	adds	r3, #1
10011e94:	0092      	lsls	r2, r2, #2
10011e96:	50a3      	str	r3, [r4, r2]
10011e98:	1c23      	adds	r3, r4, #0
10011e9a:	33f1      	adds	r3, #241	; 0xf1
10011e9c:	33ff      	adds	r3, #255	; 0xff
10011e9e:	cb06      	ldmia	r3!, {r1, r2}
10011ea0:	2392      	movs	r3, #146	; 0x92
10011ea2:	2090      	movs	r0, #144	; 0x90
10011ea4:	009b      	lsls	r3, r3, #2
10011ea6:	58e3      	ldr	r3, [r4, r3]
10011ea8:	0080      	lsls	r0, r0, #2
10011eaa:	2b00      	cmp	r3, #0
10011eac:	d006      	beq.n	10011ebc <inv_generate_fast_nomot+0x268>
10011eae:	1825      	adds	r5, r4, r0
10011eb0:	6868      	ldr	r0, [r5, #4]
10011eb2:	4290      	cmp	r0, r2
10011eb4:	db00      	blt.n	10011eb8 <inv_generate_fast_nomot+0x264>
10011eb6:	e0ae      	b.n	10012016 <inv_generate_fast_nomot+0x3c2>
10011eb8:	2090      	movs	r0, #144	; 0x90
10011eba:	0080      	lsls	r0, r0, #2
10011ebc:	1820      	adds	r0, r4, r0
10011ebe:	c006      	stmia	r0!, {r1, r2}
10011ec0:	e76a      	b.n	10011d98 <inv_generate_fast_nomot+0x144>
10011ec2:	23f4      	movs	r3, #244	; 0xf4
10011ec4:	2203      	movs	r2, #3
10011ec6:	005b      	lsls	r3, r3, #1
10011ec8:	1c28      	adds	r0, r5, #0
10011eca:	54e2      	strb	r2, [r4, r3]
10011ecc:	f7ff fbc0 	bl	10011650 <inv_fast_nomot_set_gyro_bias>
10011ed0:	f7ff fb00 	bl	100114d4 <inv_reset_packet>
10011ed4:	e764      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011ed6:	2398      	movs	r3, #152	; 0x98
10011ed8:	58e3      	ldr	r3, [r4, r3]
10011eda:	2b01      	cmp	r3, #1
10011edc:	d000      	beq.n	10011ee0 <inv_generate_fast_nomot+0x28c>
10011ede:	e75f      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011ee0:	1c28      	adds	r0, r5, #0
10011ee2:	f7ff fdc3 	bl	10011a6c <inv_detect_motion_by_gyro_accel>
10011ee6:	2800      	cmp	r0, #0
10011ee8:	d17b      	bne.n	10011fe2 <inv_generate_fast_nomot+0x38e>
10011eea:	23f4      	movs	r3, #244	; 0xf4
10011eec:	2205      	movs	r2, #5
10011eee:	005b      	lsls	r3, r3, #1
10011ef0:	54e2      	strb	r2, [r4, r3]
10011ef2:	2386      	movs	r3, #134	; 0x86
10011ef4:	005b      	lsls	r3, r3, #1
10011ef6:	58e2      	ldr	r2, [r4, r3]
10011ef8:	3310      	adds	r3, #16
10011efa:	50e2      	str	r2, [r4, r3]
10011efc:	2280      	movs	r2, #128	; 0x80
10011efe:	2300      	movs	r3, #0
10011f00:	0052      	lsls	r2, r2, #1
10011f02:	50a3      	str	r3, [r4, r2]
10011f04:	3210      	adds	r2, #16
10011f06:	58a1      	ldr	r1, [r4, r2]
10011f08:	3210      	adds	r2, #16
10011f0a:	50a1      	str	r1, [r4, r2]
10011f0c:	3a1c      	subs	r2, #28
10011f0e:	50a3      	str	r3, [r4, r2]
10011f10:	3210      	adds	r2, #16
10011f12:	58a1      	ldr	r1, [r4, r2]
10011f14:	3210      	adds	r2, #16
10011f16:	50a1      	str	r1, [r4, r2]
10011f18:	3a1c      	subs	r2, #28
10011f1a:	50a3      	str	r3, [r4, r2]
10011f1c:	3220      	adds	r2, #32
10011f1e:	58a1      	ldr	r1, [r4, r2]
10011f20:	3204      	adds	r2, #4
10011f22:	50a1      	str	r1, [r4, r2]
10011f24:	3a14      	subs	r2, #20
10011f26:	50a3      	str	r3, [r4, r2]
10011f28:	3218      	adds	r2, #24
10011f2a:	50a3      	str	r3, [r4, r2]
10011f2c:	f7ff fd10 	bl	10011950 <inv_reset_min_max_gyro_accel_statistics>
10011f30:	e736      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011f32:	22f0      	movs	r2, #240	; 0xf0
10011f34:	0052      	lsls	r2, r2, #1
10011f36:	58a3      	ldr	r3, [r4, r2]
10011f38:	1c59      	adds	r1, r3, #1
10011f3a:	50a1      	str	r1, [r4, r2]
10011f3c:	2b09      	cmp	r3, #9
10011f3e:	dc00      	bgt.n	10011f42 <inv_generate_fast_nomot+0x2ee>
10011f40:	e72e      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011f42:	f7ff fac7 	bl	100114d4 <inv_reset_packet>
10011f46:	23f4      	movs	r3, #244	; 0xf4
10011f48:	2201      	movs	r2, #1
10011f4a:	005b      	lsls	r3, r3, #1
10011f4c:	54e2      	strb	r2, [r4, r3]
10011f4e:	e727      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011f50:	1c28      	adds	r0, r5, #0
10011f52:	f7ff fd8b 	bl	10011a6c <inv_detect_motion_by_gyro_accel>
10011f56:	1e05      	subs	r5, r0, #0
10011f58:	2d01      	cmp	r5, #1
10011f5a:	d03d      	beq.n	10011fd8 <inv_generate_fast_nomot+0x384>
10011f5c:	2800      	cmp	r0, #0
10011f5e:	d000      	beq.n	10011f62 <inv_generate_fast_nomot+0x30e>
10011f60:	e71e      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011f62:	f7ff fab7 	bl	100114d4 <inv_reset_packet>
10011f66:	2386      	movs	r3, #134	; 0x86
10011f68:	005b      	lsls	r3, r3, #1
10011f6a:	58e2      	ldr	r2, [r4, r3]
10011f6c:	3310      	adds	r3, #16
10011f6e:	50e2      	str	r2, [r4, r3]
10011f70:	3b1c      	subs	r3, #28
10011f72:	50e5      	str	r5, [r4, r3]
10011f74:	3310      	adds	r3, #16
10011f76:	58e2      	ldr	r2, [r4, r3]
10011f78:	3310      	adds	r3, #16
10011f7a:	50e2      	str	r2, [r4, r3]
10011f7c:	3b1c      	subs	r3, #28
10011f7e:	50e5      	str	r5, [r4, r3]
10011f80:	3310      	adds	r3, #16
10011f82:	58e2      	ldr	r2, [r4, r3]
10011f84:	3310      	adds	r3, #16
10011f86:	50e2      	str	r2, [r4, r3]
10011f88:	3b1c      	subs	r3, #28
10011f8a:	50e5      	str	r5, [r4, r3]
10011f8c:	3320      	adds	r3, #32
10011f8e:	58e2      	ldr	r2, [r4, r3]
10011f90:	3304      	adds	r3, #4
10011f92:	50e2      	str	r2, [r4, r3]
10011f94:	3b14      	subs	r3, #20
10011f96:	50e5      	str	r5, [r4, r3]
10011f98:	3318      	adds	r3, #24
10011f9a:	50e5      	str	r5, [r4, r3]
10011f9c:	e700      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011f9e:	23f4      	movs	r3, #244	; 0xf4
10011fa0:	2205      	movs	r2, #5
10011fa2:	005b      	lsls	r3, r3, #1
10011fa4:	54e2      	strb	r2, [r4, r3]
10011fa6:	e6fb      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011fa8:	1001ea80 	.word	0x1001ea80
10011fac:	1001d548 	.word	0x1001d548
10011fb0:	1001b328 	.word	0x1001b328
10011fb4:	2783      	movs	r7, #131	; 0x83
10011fb6:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011fb8:	00bf      	lsls	r7, r7, #2
10011fba:	0058      	lsls	r0, r3, #1
10011fbc:	6b73      	ldr	r3, [r6, #52]	; 0x34
10011fbe:	6020      	str	r0, [r4, #0]
10011fc0:	3301      	adds	r3, #1
10011fc2:	51e3      	str	r3, [r4, r7]
10011fc4:	f004 faac 	bl	10016520 <__aeabi_i2f>
10011fc8:	f7fe ff2a 	bl	10010e20 <sqrtf>
10011fcc:	2385      	movs	r3, #133	; 0x85
10011fce:	009b      	lsls	r3, r3, #2
10011fd0:	50e0      	str	r0, [r4, r3]
10011fd2:	59e1      	ldr	r1, [r4, r7]
10011fd4:	6b70      	ldr	r0, [r6, #52]	; 0x34
10011fd6:	e669      	b.n	10011cac <inv_generate_fast_nomot+0x58>
10011fd8:	23f4      	movs	r3, #244	; 0xf4
10011fda:	2202      	movs	r2, #2
10011fdc:	005b      	lsls	r3, r3, #1
10011fde:	54e2      	strb	r2, [r4, r3]
10011fe0:	e6de      	b.n	10011da0 <inv_generate_fast_nomot+0x14c>
10011fe2:	2801      	cmp	r0, #1
10011fe4:	d185      	bne.n	10011ef2 <inv_generate_fast_nomot+0x29e>
10011fe6:	23f4      	movs	r3, #244	; 0xf4
10011fe8:	2202      	movs	r2, #2
10011fea:	005b      	lsls	r3, r3, #1
10011fec:	54e2      	strb	r2, [r4, r3]
10011fee:	e780      	b.n	10011ef2 <inv_generate_fast_nomot+0x29e>
10011ff0:	2394      	movs	r3, #148	; 0x94
10011ff2:	2296      	movs	r2, #150	; 0x96
10011ff4:	005b      	lsls	r3, r3, #1
10011ff6:	0052      	lsls	r2, r2, #1
10011ff8:	58a2      	ldr	r2, [r4, r2]
10011ffa:	58e3      	ldr	r3, [r4, r3]
10011ffc:	1a9b      	subs	r3, r3, r2
10011ffe:	6a32      	ldr	r2, [r6, #32]
10012000:	4293      	cmp	r3, r2
10012002:	d200      	bcs.n	10012006 <inv_generate_fast_nomot+0x3b2>
10012004:	e72d      	b.n	10011e62 <inv_generate_fast_nomot+0x20e>
10012006:	23f4      	movs	r3, #244	; 0xf4
10012008:	2204      	movs	r2, #4
1001200a:	005b      	lsls	r3, r3, #1
1001200c:	1c28      	adds	r0, r5, #0
1001200e:	54e2      	strb	r2, [r4, r3]
10012010:	f7ff fb1e 	bl	10011650 <inv_fast_nomot_set_gyro_bias>
10012014:	e725      	b.n	10011e62 <inv_generate_fast_nomot+0x20e>
10012016:	4290      	cmp	r0, r2
10012018:	d000      	beq.n	1001201c <inv_generate_fast_nomot+0x3c8>
1001201a:	e6bd      	b.n	10011d98 <inv_generate_fast_nomot+0x144>
1001201c:	6828      	ldr	r0, [r5, #0]
1001201e:	4288      	cmp	r0, r1
10012020:	d200      	bcs.n	10012024 <inv_generate_fast_nomot+0x3d0>
10012022:	e749      	b.n	10011eb8 <inv_generate_fast_nomot+0x264>
10012024:	e6b8      	b.n	10011d98 <inv_generate_fast_nomot+0x144>
10012026:	46c0      	nop			; (mov r8, r8)

10012028 <inv_set_default_number_of_samples>:
10012028:	2300      	movs	r3, #0
1001202a:	b510      	push	{r4, lr}
1001202c:	1040      	asrs	r0, r0, #1
1001202e:	d10f      	bne.n	10012050 <inv_set_default_number_of_samples+0x28>
10012030:	2001      	movs	r0, #1
10012032:	3301      	adds	r3, #1
10012034:	4098      	lsls	r0, r3
10012036:	4c08      	ldr	r4, [pc, #32]	; (10012058 <inv_set_default_number_of_samples+0x30>)
10012038:	6363      	str	r3, [r4, #52]	; 0x34
1001203a:	6320      	str	r0, [r4, #48]	; 0x30
1001203c:	f004 fa70 	bl	10016520 <__aeabi_i2f>
10012040:	f7fe feee 	bl	10010e20 <sqrtf>
10012044:	2319      	movs	r3, #25
10012046:	6b62      	ldr	r2, [r4, #52]	; 0x34
10012048:	63a0      	str	r0, [r4, #56]	; 0x38
1001204a:	4093      	lsls	r3, r2
1001204c:	63e3      	str	r3, [r4, #60]	; 0x3c
1001204e:	bd10      	pop	{r4, pc}
10012050:	3301      	adds	r3, #1
10012052:	2800      	cmp	r0, #0
10012054:	dcea      	bgt.n	1001202c <inv_set_default_number_of_samples+0x4>
10012056:	e7eb      	b.n	10012030 <inv_set_default_number_of_samples+0x8>
10012058:	1001d548 	.word	0x1001d548

1001205c <inv_init_fast_nomot>:
1001205c:	2298      	movs	r2, #152	; 0x98
1001205e:	b538      	push	{r3, r4, r5, lr}
10012060:	4d15      	ldr	r5, [pc, #84]	; (100120b8 <inv_init_fast_nomot+0x5c>)
10012062:	2100      	movs	r1, #0
10012064:	1c28      	adds	r0, r5, #0
10012066:	0092      	lsls	r2, r2, #2
10012068:	f006 faf9 	bl	1001865e <memset>
1001206c:	4c13      	ldr	r4, [pc, #76]	; (100120bc <inv_init_fast_nomot+0x60>)
1001206e:	2100      	movs	r1, #0
10012070:	2240      	movs	r2, #64	; 0x40
10012072:	1c20      	adds	r0, r4, #0
10012074:	f006 faf3 	bl	1001865e <memset>
10012078:	2007      	movs	r0, #7
1001207a:	f7ff f9f3 	bl	10011464 <inv_init_maxmin>
1001207e:	2300      	movs	r3, #0
10012080:	4a0f      	ldr	r2, [pc, #60]	; (100120c0 <inv_init_fast_nomot+0x64>)
10012082:	2019      	movs	r0, #25
10012084:	61a2      	str	r2, [r4, #24]
10012086:	61e3      	str	r3, [r4, #28]
10012088:	2214      	movs	r2, #20
1001208a:	2300      	movs	r3, #0
1001208c:	60a2      	str	r2, [r4, #8]
1001208e:	60e3      	str	r3, [r4, #12]
10012090:	2296      	movs	r2, #150	; 0x96
10012092:	2300      	movs	r3, #0
10012094:	0092      	lsls	r2, r2, #2
10012096:	6122      	str	r2, [r4, #16]
10012098:	6163      	str	r3, [r4, #20]
1001209a:	4b0a      	ldr	r3, [pc, #40]	; (100120c4 <inv_init_fast_nomot+0x68>)
1001209c:	2201      	movs	r2, #1
1001209e:	6223      	str	r3, [r4, #32]
100120a0:	23f2      	movs	r3, #242	; 0xf2
100120a2:	005b      	lsls	r3, r3, #1
100120a4:	50ea      	str	r2, [r5, r3]
100120a6:	f7ff ffbf 	bl	10012028 <inv_set_default_number_of_samples>
100120aa:	2382      	movs	r3, #130	; 0x82
100120ac:	2200      	movs	r2, #0
100120ae:	009b      	lsls	r3, r3, #2
100120b0:	50ea      	str	r2, [r5, r3]
100120b2:	2000      	movs	r0, #0
100120b4:	bd38      	pop	{r3, r4, r5, pc}
100120b6:	46c0      	nop			; (mov r8, r8)
100120b8:	1001ea80 	.word	0x1001ea80
100120bc:	1001d548 	.word	0x1001d548
100120c0:	000005dc 	.word	0x000005dc
100120c4:	2faf0800 	.word	0x2faf0800

100120c8 <inv_stop_fast_nomot>:
100120c8:	b508      	push	{r3, lr}
100120ca:	2001      	movs	r0, #1
100120cc:	f7f8 fe48 	bl	1000ad60 <inv_set_motion_state>
100120d0:	4801      	ldr	r0, [pc, #4]	; (100120d8 <inv_stop_fast_nomot+0x10>)
100120d2:	f7f8 f83b 	bl	1000a14c <inv_unregister_data_cb>
100120d6:	bd08      	pop	{r3, pc}
100120d8:	10011c55 	.word	0x10011c55

100120dc <inv_enable_fast_nomot>:
100120dc:	b508      	push	{r3, lr}
100120de:	f7ff ffbd 	bl	1001205c <inv_init_fast_nomot>
100120e2:	2800      	cmp	r0, #0
100120e4:	d102      	bne.n	100120ec <inv_enable_fast_nomot+0x10>
100120e6:	4802      	ldr	r0, [pc, #8]	; (100120f0 <inv_enable_fast_nomot+0x14>)
100120e8:	f7f8 ff3c 	bl	1000af64 <inv_register_mpl_start_notification>
100120ec:	bd08      	pop	{r3, pc}
100120ee:	46c0      	nop			; (mov r8, r8)
100120f0:	100114fd 	.word	0x100114fd

100120f4 <inv_disable_fast_nomot>:
100120f4:	b508      	push	{r3, lr}
100120f6:	f7ff ffe7 	bl	100120c8 <inv_stop_fast_nomot>
100120fa:	4802      	ldr	r0, [pc, #8]	; (10012104 <inv_disable_fast_nomot+0x10>)
100120fc:	f7f8 fefe 	bl	1000aefc <inv_unregister_mpl_start_notification>
10012100:	bd08      	pop	{r3, pc}
10012102:	46c0      	nop			; (mov r8, r8)
10012104:	100114fd 	.word	0x100114fd

10012108 <inv_get_fnm_gyro_no_motion_param>:
10012108:	4b02      	ldr	r3, [pc, #8]	; (10012114 <inv_get_fnm_gyro_no_motion_param+0xc>)
1001210a:	33f1      	adds	r3, #241	; 0xf1
1001210c:	33ff      	adds	r3, #255	; 0xff
1001210e:	6818      	ldr	r0, [r3, #0]
10012110:	6859      	ldr	r1, [r3, #4]
10012112:	4770      	bx	lr
10012114:	1001ea80 	.word	0x1001ea80

10012118 <inv_fnm_debug_print>:
10012118:	4770      	bx	lr
1001211a:	46c0      	nop			; (mov r8, r8)

1001211c <inv_start_9x_sensor_fusion>:
1001211c:	2196      	movs	r1, #150	; 0x96
1001211e:	b508      	push	{r3, lr}
10012120:	4802      	ldr	r0, [pc, #8]	; (1001212c <inv_start_9x_sensor_fusion+0x10>)
10012122:	0089      	lsls	r1, r1, #2
10012124:	2204      	movs	r2, #4
10012126:	f7f7 ff8d 	bl	1000a044 <inv_register_data_cb>
1001212a:	bd08      	pop	{r3, pc}
1001212c:	10012705 	.word	0x10012705

10012130 <inv_filter_correction_angle>:
10012130:	b5f0      	push	{r4, r5, r6, r7, lr}
10012132:	4657      	mov	r7, sl
10012134:	464e      	mov	r6, r9
10012136:	4645      	mov	r5, r8
10012138:	b4e0      	push	{r5, r6, r7}
1001213a:	1c1f      	adds	r7, r3, #0
1001213c:	6b43      	ldr	r3, [r0, #52]	; 0x34
1001213e:	1c0e      	adds	r6, r1, #0
10012140:	4690      	mov	r8, r2
10012142:	2b00      	cmp	r3, #0
10012144:	da00      	bge.n	10012148 <inv_filter_correction_angle+0x18>
10012146:	e0b7      	b.n	100122b8 <inv_filter_correction_angle+0x188>
10012148:	23bc      	movs	r3, #188	; 0xbc
1001214a:	58c3      	ldr	r3, [r0, r3]
1001214c:	3b03      	subs	r3, #3
1001214e:	425a      	negs	r2, r3
10012150:	415a      	adcs	r2, r3
10012152:	4691      	mov	r9, r2
10012154:	4c67      	ldr	r4, [pc, #412]	; (100122f4 <inv_filter_correction_angle+0x1c4>)
10012156:	2224      	movs	r2, #36	; 0x24
10012158:	1d21      	adds	r1, r4, #4
1001215a:	1c20      	adds	r0, r4, #0
1001215c:	1c25      	adds	r5, r4, #0
1001215e:	f006 fa69 	bl	10018634 <memmove>
10012162:	2000      	movs	r0, #0
10012164:	6266      	str	r6, [r4, #36]	; 0x24
10012166:	3528      	adds	r5, #40	; 0x28
10012168:	cc02      	ldmia	r4!, {r1}
1001216a:	f003 fbc5 	bl	100158f8 <__aeabi_fadd>
1001216e:	42ac      	cmp	r4, r5
10012170:	d1fa      	bne.n	10012168 <inv_filter_correction_angle+0x38>
10012172:	4961      	ldr	r1, [pc, #388]	; (100122f8 <inv_filter_correction_angle+0x1c8>)
10012174:	f003 fd36 	bl	10015be4 <__aeabi_fdiv>
10012178:	23e4      	movs	r3, #228	; 0xe4
1001217a:	4c60      	ldr	r4, [pc, #384]	; (100122fc <inv_filter_correction_angle+0x1cc>)
1001217c:	4682      	mov	sl, r0
1001217e:	50e0      	str	r0, [r4, r3]
10012180:	4643      	mov	r3, r8
10012182:	2b31      	cmp	r3, #49	; 0x31
10012184:	dd18      	ble.n	100121b8 <inv_filter_correction_angle+0x88>
10012186:	238e      	movs	r3, #142	; 0x8e
10012188:	22c8      	movs	r2, #200	; 0xc8
1001218a:	005b      	lsls	r3, r3, #1
1001218c:	50e2      	str	r2, [r4, r3]
1001218e:	1c38      	adds	r0, r7, #0
10012190:	f004 f9c6 	bl	10016520 <__aeabi_i2f>
10012194:	4b5a      	ldr	r3, [pc, #360]	; (10012300 <inv_filter_correction_angle+0x1d0>)
10012196:	1c05      	adds	r5, r0, #0
10012198:	1c30      	adds	r0, r6, #0
1001219a:	4598      	cmp	r8, r3
1001219c:	dc00      	bgt.n	100121a0 <inv_filter_correction_angle+0x70>
1001219e:	e07a      	b.n	10012296 <inv_filter_correction_angle+0x166>
100121a0:	4958      	ldr	r1, [pc, #352]	; (10012304 <inv_filter_correction_angle+0x1d4>)
100121a2:	f003 fd1f 	bl	10015be4 <__aeabi_fdiv>
100121a6:	1c01      	adds	r1, r0, #0
100121a8:	1c28      	adds	r0, r5, #0
100121aa:	f003 fee5 	bl	10015f78 <__aeabi_fmul>
100121ae:	4956      	ldr	r1, [pc, #344]	; (10012308 <inv_filter_correction_angle+0x1d8>)
100121b0:	f003 fd18 	bl	10015be4 <__aeabi_fdiv>
100121b4:	1c05      	adds	r5, r0, #0
100121b6:	e023      	b.n	10012200 <inv_filter_correction_angle+0xd0>
100121b8:	1c38      	adds	r0, r7, #0
100121ba:	4954      	ldr	r1, [pc, #336]	; (1001230c <inv_filter_correction_angle+0x1dc>)
100121bc:	f003 f92e 	bl	1001541c <__aeabi_idiv>
100121c0:	258e      	movs	r5, #142	; 0x8e
100121c2:	0083      	lsls	r3, r0, #2
100121c4:	006d      	lsls	r5, r5, #1
100121c6:	1818      	adds	r0, r3, r0
100121c8:	5963      	ldr	r3, [r4, r5]
100121ca:	4698      	mov	r8, r3
100121cc:	4480      	add	r8, r0
100121ce:	4643      	mov	r3, r8
100121d0:	5163      	str	r3, [r4, r5]
100121d2:	2b00      	cmp	r3, #0
100121d4:	da00      	bge.n	100121d8 <inv_filter_correction_angle+0xa8>
100121d6:	e072      	b.n	100122be <inv_filter_correction_angle+0x18e>
100121d8:	494d      	ldr	r1, [pc, #308]	; (10012310 <inv_filter_correction_angle+0x1e0>)
100121da:	1c30      	adds	r0, r6, #0
100121dc:	f003 fd02 	bl	10015be4 <__aeabi_fdiv>
100121e0:	1c05      	adds	r5, r0, #0
100121e2:	1c38      	adds	r0, r7, #0
100121e4:	f004 f99c 	bl	10016520 <__aeabi_i2f>
100121e8:	1c01      	adds	r1, r0, #0
100121ea:	1c28      	adds	r0, r5, #0
100121ec:	f003 fec4 	bl	10015f78 <__aeabi_fmul>
100121f0:	4945      	ldr	r1, [pc, #276]	; (10012308 <inv_filter_correction_angle+0x1d8>)
100121f2:	f003 fcf7 	bl	10015be4 <__aeabi_fdiv>
100121f6:	4643      	mov	r3, r8
100121f8:	1c05      	adds	r5, r0, #0
100121fa:	2b00      	cmp	r3, #0
100121fc:	d100      	bne.n	10012200 <inv_filter_correction_angle+0xd0>
100121fe:	e070      	b.n	100122e2 <inv_filter_correction_angle+0x1b2>
10012200:	2390      	movs	r3, #144	; 0x90
10012202:	005b      	lsls	r3, r3, #1
10012204:	58e3      	ldr	r3, [r4, r3]
10012206:	2b00      	cmp	r3, #0
10012208:	d000      	beq.n	1001220c <inv_filter_correction_angle+0xdc>
1001220a:	1c35      	adds	r5, r6, #0
1001220c:	4b41      	ldr	r3, [pc, #260]	; (10012314 <inv_filter_correction_angle+0x1e4>)
1001220e:	429f      	cmp	r7, r3
10012210:	d050      	beq.n	100122b4 <inv_filter_correction_angle+0x184>
10012212:	1c28      	adds	r0, r5, #0
10012214:	2100      	movs	r1, #0
10012216:	f003 fa37 	bl	10015688 <__aeabi_fcmpeq>
1001221a:	23e8      	movs	r3, #232	; 0xe8
1001221c:	2800      	cmp	r0, #0
1001221e:	d045      	beq.n	100122ac <inv_filter_correction_angle+0x17c>
10012220:	58e0      	ldr	r0, [r4, r3]
10012222:	4651      	mov	r1, sl
10012224:	f003 ffbc 	bl	100161a0 <__aeabi_fsub>
10012228:	0040      	lsls	r0, r0, #1
1001222a:	0840      	lsrs	r0, r0, #1
1001222c:	f005 ffcc 	bl	100181c8 <__aeabi_f2d>
10012230:	4a39      	ldr	r2, [pc, #228]	; (10012318 <inv_filter_correction_angle+0x1e8>)
10012232:	4b3a      	ldr	r3, [pc, #232]	; (1001231c <inv_filter_correction_angle+0x1ec>)
10012234:	f003 fa08 	bl	10015648 <__aeabi_dcmpgt>
10012238:	2800      	cmp	r0, #0
1001223a:	d026      	beq.n	1001228a <inv_filter_correction_angle+0x15a>
1001223c:	23b8      	movs	r3, #184	; 0xb8
1001223e:	2100      	movs	r1, #0
10012240:	58e0      	ldr	r0, [r4, r3]
10012242:	f003 fa21 	bl	10015688 <__aeabi_fcmpeq>
10012246:	2800      	cmp	r0, #0
10012248:	d01f      	beq.n	1001228a <inv_filter_correction_angle+0x15a>
1001224a:	464b      	mov	r3, r9
1001224c:	2b01      	cmp	r3, #1
1001224e:	d11c      	bne.n	1001228a <inv_filter_correction_angle+0x15a>
10012250:	22c8      	movs	r2, #200	; 0xc8
10012252:	331c      	adds	r3, #28
10012254:	33ff      	adds	r3, #255	; 0xff
10012256:	50e2      	str	r2, [r4, r3]
10012258:	1c30      	adds	r0, r6, #0
1001225a:	f005 ffb5 	bl	100181c8 <__aeabi_f2d>
1001225e:	2200      	movs	r2, #0
10012260:	4b2f      	ldr	r3, [pc, #188]	; (10012320 <inv_filter_correction_angle+0x1f0>)
10012262:	f004 fd0f 	bl	10016c84 <__aeabi_ddiv>
10012266:	1c04      	adds	r4, r0, #0
10012268:	1c38      	adds	r0, r7, #0
1001226a:	1c0d      	adds	r5, r1, #0
1001226c:	f005 ff32 	bl	100180d4 <__aeabi_i2d>
10012270:	1c02      	adds	r2, r0, #0
10012272:	1c0b      	adds	r3, r1, #0
10012274:	1c20      	adds	r0, r4, #0
10012276:	1c29      	adds	r1, r5, #0
10012278:	f005 f928 	bl	100174cc <__aeabi_dmul>
1001227c:	2200      	movs	r2, #0
1001227e:	4b29      	ldr	r3, [pc, #164]	; (10012324 <inv_filter_correction_angle+0x1f4>)
10012280:	f004 fd00 	bl	10016c84 <__aeabi_ddiv>
10012284:	f005 fff4 	bl	10018270 <__aeabi_d2f>
10012288:	1c05      	adds	r5, r0, #0
1001228a:	1c28      	adds	r0, r5, #0
1001228c:	bc1c      	pop	{r2, r3, r4}
1001228e:	4690      	mov	r8, r2
10012290:	4699      	mov	r9, r3
10012292:	46a2      	mov	sl, r4
10012294:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012296:	4924      	ldr	r1, [pc, #144]	; (10012328 <inv_filter_correction_angle+0x1f8>)
10012298:	f003 fca4 	bl	10015be4 <__aeabi_fdiv>
1001229c:	1c29      	adds	r1, r5, #0
1001229e:	f003 fe6b 	bl	10015f78 <__aeabi_fmul>
100122a2:	4919      	ldr	r1, [pc, #100]	; (10012308 <inv_filter_correction_angle+0x1d8>)
100122a4:	f003 fc9e 	bl	10015be4 <__aeabi_fdiv>
100122a8:	1c05      	adds	r5, r0, #0
100122aa:	e7a9      	b.n	10012200 <inv_filter_correction_angle+0xd0>
100122ac:	4652      	mov	r2, sl
100122ae:	4650      	mov	r0, sl
100122b0:	50e2      	str	r2, [r4, r3]
100122b2:	e7b6      	b.n	10012222 <inv_filter_correction_angle+0xf2>
100122b4:	1c35      	adds	r5, r6, #0
100122b6:	e7ac      	b.n	10012212 <inv_filter_correction_angle+0xe2>
100122b8:	2300      	movs	r3, #0
100122ba:	4699      	mov	r9, r3
100122bc:	e74a      	b.n	10012154 <inv_filter_correction_angle+0x24>
100122be:	2300      	movs	r3, #0
100122c0:	4913      	ldr	r1, [pc, #76]	; (10012310 <inv_filter_correction_angle+0x1e0>)
100122c2:	5163      	str	r3, [r4, r5]
100122c4:	1c30      	adds	r0, r6, #0
100122c6:	f003 fc8d 	bl	10015be4 <__aeabi_fdiv>
100122ca:	1c05      	adds	r5, r0, #0
100122cc:	1c38      	adds	r0, r7, #0
100122ce:	f004 f927 	bl	10016520 <__aeabi_i2f>
100122d2:	1c01      	adds	r1, r0, #0
100122d4:	1c28      	adds	r0, r5, #0
100122d6:	f003 fe4f 	bl	10015f78 <__aeabi_fmul>
100122da:	490b      	ldr	r1, [pc, #44]	; (10012308 <inv_filter_correction_angle+0x1d8>)
100122dc:	f003 fc82 	bl	10015be4 <__aeabi_fdiv>
100122e0:	1c05      	adds	r5, r0, #0
100122e2:	2394      	movs	r3, #148	; 0x94
100122e4:	005b      	lsls	r3, r3, #1
100122e6:	58e3      	ldr	r3, [r4, r3]
100122e8:	2b01      	cmp	r3, #1
100122ea:	d000      	beq.n	100122ee <inv_filter_correction_angle+0x1be>
100122ec:	e788      	b.n	10012200 <inv_filter_correction_angle+0xd0>
100122ee:	2500      	movs	r5, #0
100122f0:	e786      	b.n	10012200 <inv_filter_correction_angle+0xd0>
100122f2:	46c0      	nop			; (mov r8, r8)
100122f4:	1001ed9c 	.word	0x1001ed9c
100122f8:	41200000 	.word	0x41200000
100122fc:	1001ece0 	.word	0x1001ece0
10012300:	000003e7 	.word	0x000003e7
10012304:	42480000 	.word	0x42480000
10012308:	459c4000 	.word	0x459c4000
1001230c:	ffffec78 	.word	0xffffec78
10012310:	43c80000 	.word	0x43c80000
10012314:	000f4240 	.word	0x000f4240
10012318:	cac08312 	.word	0xcac08312
1001231c:	3fb645a1 	.word	0x3fb645a1
10012320:	40790000 	.word	0x40790000
10012324:	40b38800 	.word	0x40b38800
10012328:	43480000 	.word	0x43480000

1001232c <inv_perform_9x_fusion>:
1001232c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001232e:	465f      	mov	r7, fp
10012330:	4656      	mov	r6, sl
10012332:	464d      	mov	r5, r9
10012334:	4644      	mov	r4, r8
10012336:	2300      	movs	r3, #0
10012338:	b4f0      	push	{r4, r5, r6, r7}
1001233a:	b0ab      	sub	sp, #172	; 0xac
1001233c:	9303      	str	r3, [sp, #12]
1001233e:	9304      	str	r3, [sp, #16]
10012340:	9305      	str	r3, [sp, #20]
10012342:	4fd3      	ldr	r7, [pc, #844]	; (10012690 <inv_perform_9x_fusion+0x364>)
10012344:	3321      	adds	r3, #33	; 0x21
10012346:	33ff      	adds	r3, #255	; 0xff
10012348:	58fa      	ldr	r2, [r7, r3]
1001234a:	2a03      	cmp	r2, #3
1001234c:	d100      	bne.n	10012350 <inv_perform_9x_fusion+0x24>
1001234e:	e19b      	b.n	10012688 <inv_perform_9x_fusion+0x35c>
10012350:	2400      	movs	r4, #0
10012352:	9001      	str	r0, [sp, #4]
10012354:	1c23      	adds	r3, r4, #0
10012356:	33a8      	adds	r3, #168	; 0xa8
10012358:	58f8      	ldr	r0, [r7, r3]
1001235a:	f004 f8e1 	bl	10016520 <__aeabi_i2f>
1001235e:	21c2      	movs	r1, #194	; 0xc2
10012360:	0589      	lsls	r1, r1, #22
10012362:	f003 fe09 	bl	10015f78 <__aeabi_fmul>
10012366:	221c      	movs	r2, #28
10012368:	ab02      	add	r3, sp, #8
1001236a:	189b      	adds	r3, r3, r2
1001236c:	5118      	str	r0, [r3, r4]
1001236e:	3404      	adds	r4, #4
10012370:	2c10      	cmp	r4, #16
10012372:	d1ef      	bne.n	10012354 <inv_perform_9x_fusion+0x28>
10012374:	ab1d      	add	r3, sp, #116	; 0x74
10012376:	1c18      	adds	r0, r3, #0
10012378:	ac06      	add	r4, sp, #24
1001237a:	469b      	mov	fp, r3
1001237c:	f7f8 fd4a 	bl	1000ae14 <inv_get_6axis_quaternion>
10012380:	1c20      	adds	r0, r4, #0
10012382:	f7f8 fd1d 	bl	1000adc0 <inv_get_gravity>
10012386:	1c39      	adds	r1, r7, #0
10012388:	223c      	movs	r2, #60	; 0x3c
1001238a:	310c      	adds	r1, #12
1001238c:	1c38      	adds	r0, r7, #0
1001238e:	f006 f951 	bl	10018634 <memmove>
10012392:	1c38      	adds	r0, r7, #0
10012394:	1c39      	adds	r1, r7, #0
10012396:	2250      	movs	r2, #80	; 0x50
10012398:	3158      	adds	r1, #88	; 0x58
1001239a:	3048      	adds	r0, #72	; 0x48
1001239c:	f006 f94a 	bl	10018634 <memmove>
100123a0:	1c3b      	adds	r3, r7, #0
100123a2:	333c      	adds	r3, #60	; 0x3c
100123a4:	cc07      	ldmia	r4!, {r0, r1, r2}
100123a6:	c307      	stmia	r3!, {r0, r1, r2}
100123a8:	1c3b      	adds	r3, r7, #0
100123aa:	465a      	mov	r2, fp
100123ac:	3398      	adds	r3, #152	; 0x98
100123ae:	ca13      	ldmia	r2!, {r0, r1, r4}
100123b0:	c313      	stmia	r3!, {r0, r1, r4}
100123b2:	6812      	ldr	r2, [r2, #0]
100123b4:	601a      	str	r2, [r3, #0]
100123b6:	2392      	movs	r3, #146	; 0x92
100123b8:	005b      	lsls	r3, r3, #1
100123ba:	58f9      	ldr	r1, [r7, r3]
100123bc:	1c4a      	adds	r2, r1, #1
100123be:	50fa      	str	r2, [r7, r3]
100123c0:	2a06      	cmp	r2, #6
100123c2:	dc00      	bgt.n	100123c6 <inv_perform_9x_fusion+0x9a>
100123c4:	e123      	b.n	1001260e <inv_perform_9x_fusion+0x2e2>
100123c6:	2206      	movs	r2, #6
100123c8:	2500      	movs	r5, #0
100123ca:	50fa      	str	r2, [r7, r3]
100123cc:	9b01      	ldr	r3, [sp, #4]
100123ce:	006c      	lsls	r4, r5, #1
100123d0:	33a0      	adds	r3, #160	; 0xa0
100123d2:	9300      	str	r3, [sp, #0]
100123d4:	4baf      	ldr	r3, [pc, #700]	; (10012694 <inv_perform_9x_fusion+0x368>)
100123d6:	012e      	lsls	r6, r5, #4
100123d8:	469a      	mov	sl, r3
100123da:	ab21      	add	r3, sp, #132	; 0x84
100123dc:	4699      	mov	r9, r3
100123de:	1964      	adds	r4, r4, r5
100123e0:	3648      	adds	r6, #72	; 0x48
100123e2:	00a4      	lsls	r4, r4, #2
100123e4:	19be      	adds	r6, r7, r6
100123e6:	193c      	adds	r4, r7, r4
100123e8:	48ab      	ldr	r0, [pc, #684]	; (10012698 <inv_perform_9x_fusion+0x36c>)
100123ea:	1c31      	adds	r1, r6, #0
100123ec:	464a      	mov	r2, r9
100123ee:	f7f7 ffa5 	bl	1000a33c <inv_q_mult>
100123f2:	1c21      	adds	r1, r4, #0
100123f4:	9800      	ldr	r0, [sp, #0]
100123f6:	464a      	mov	r2, r9
100123f8:	f7f8 f88c 	bl	1000a514 <inv_compass_angle>
100123fc:	4653      	mov	r3, sl
100123fe:	4680      	mov	r8, r0
10012400:	0059      	lsls	r1, r3, #1
10012402:	0040      	lsls	r0, r0, #1
10012404:	0840      	lsrs	r0, r0, #1
10012406:	0849      	lsrs	r1, r1, #1
10012408:	f003 f944 	bl	10015694 <__aeabi_fcmplt>
1001240c:	2800      	cmp	r0, #0
1001240e:	d000      	beq.n	10012412 <inv_perform_9x_fusion+0xe6>
10012410:	46c2      	mov	sl, r8
10012412:	3501      	adds	r5, #1
10012414:	3610      	adds	r6, #16
10012416:	340c      	adds	r4, #12
10012418:	2d06      	cmp	r5, #6
1001241a:	d1e5      	bne.n	100123e8 <inv_perform_9x_fusion+0xbc>
1001241c:	9801      	ldr	r0, [sp, #4]
1001241e:	3018      	adds	r0, #24
10012420:	f7f7 ff68 	bl	1000a2f4 <inv_get_gyro_sum_of_sqr>
10012424:	2398      	movs	r3, #152	; 0x98
10012426:	005b      	lsls	r3, r3, #1
10012428:	58fb      	ldr	r3, [r7, r3]
1001242a:	499c      	ldr	r1, [pc, #624]	; (1001269c <inv_perform_9x_fusion+0x370>)
1001242c:	0982      	lsrs	r2, r0, #6
1001242e:	428b      	cmp	r3, r1
10012430:	dd00      	ble.n	10012434 <inv_perform_9x_fusion+0x108>
10012432:	1c0b      	adds	r3, r1, #0
10012434:	4651      	mov	r1, sl
10012436:	9801      	ldr	r0, [sp, #4]
10012438:	f7ff fe7a 	bl	10012130 <inv_filter_correction_angle>
1001243c:	23ec      	movs	r3, #236	; 0xec
1001243e:	58f9      	ldr	r1, [r7, r3]
10012440:	f003 fd9a 	bl	10015f78 <__aeabi_fmul>
10012444:	23b8      	movs	r3, #184	; 0xb8
10012446:	1c3c      	adds	r4, r7, #0
10012448:	50f8      	str	r0, [r7, r3]
1001244a:	a819      	add	r0, sp, #100	; 0x64
1001244c:	f7f8 fce2 	bl	1000ae14 <inv_get_6axis_quaternion>
10012450:	34fc      	adds	r4, #252	; 0xfc
10012452:	a819      	add	r0, sp, #100	; 0x64
10012454:	4649      	mov	r1, r9
10012456:	f7f8 fabb 	bl	1000a9d0 <inv_quaternion_to_rotation>
1001245a:	1c20      	adds	r0, r4, #0
1001245c:	a919      	add	r1, sp, #100	; 0x64
1001245e:	465a      	mov	r2, fp
10012460:	f7f7 ff6c 	bl	1000a33c <inv_q_mult>
10012464:	a819      	add	r0, sp, #100	; 0x64
10012466:	1c21      	adds	r1, r4, #0
10012468:	f7f8 f848 	bl	1000a4fc <inv_q_invert>
1001246c:	2300      	movs	r3, #0
1001246e:	469a      	mov	sl, r3
10012470:	4653      	mov	r3, sl
10012472:	005b      	lsls	r3, r3, #1
10012474:	4453      	add	r3, sl
10012476:	444b      	add	r3, r9
10012478:	4698      	mov	r8, r3
1001247a:	2600      	movs	r6, #0
1001247c:	2400      	movs	r4, #0
1001247e:	2500      	movs	r5, #0
10012480:	4643      	mov	r3, r8
10012482:	599b      	ldr	r3, [r3, r6]
10012484:	4640      	mov	r0, r8
10012486:	17d9      	asrs	r1, r3, #31
10012488:	465b      	mov	r3, fp
1001248a:	199b      	adds	r3, r3, r6
1001248c:	685a      	ldr	r2, [r3, #4]
1001248e:	5980      	ldr	r0, [r0, r6]
10012490:	17d3      	asrs	r3, r2, #31
10012492:	f003 f94b 	bl	1001572c <__aeabi_lmul>
10012496:	3604      	adds	r6, #4
10012498:	1824      	adds	r4, r4, r0
1001249a:	414d      	adcs	r5, r1
1001249c:	2e0c      	cmp	r6, #12
1001249e:	d1ef      	bne.n	10012480 <inv_perform_9x_fusion+0x154>
100124a0:	4652      	mov	r2, sl
100124a2:	00ab      	lsls	r3, r5, #2
100124a4:	0fa4      	lsrs	r4, r4, #30
100124a6:	431c      	orrs	r4, r3
100124a8:	ab03      	add	r3, sp, #12
100124aa:	509c      	str	r4, [r3, r2]
100124ac:	2304      	movs	r3, #4
100124ae:	469c      	mov	ip, r3
100124b0:	44e2      	add	sl, ip
100124b2:	4653      	mov	r3, sl
100124b4:	2b0c      	cmp	r3, #12
100124b6:	d1db      	bne.n	10012470 <inv_perform_9x_fusion+0x144>
100124b8:	2390      	movs	r3, #144	; 0x90
100124ba:	005b      	lsls	r3, r3, #1
100124bc:	58fb      	ldr	r3, [r7, r3]
100124be:	2b00      	cmp	r3, #0
100124c0:	d000      	beq.n	100124c4 <inv_perform_9x_fusion+0x198>
100124c2:	e0ae      	b.n	10012622 <inv_perform_9x_fusion+0x2f6>
100124c4:	9c05      	ldr	r4, [sp, #20]
100124c6:	4260      	negs	r0, r4
100124c8:	f004 f82a 	bl	10016520 <__aeabi_i2f>
100124cc:	21c2      	movs	r1, #194	; 0xc2
100124ce:	0589      	lsls	r1, r1, #22
100124d0:	f003 fd52 	bl	10015f78 <__aeabi_fmul>
100124d4:	1c06      	adds	r6, r0, #0
100124d6:	f001 fdc5 	bl	10014064 <cosf>
100124da:	1c05      	adds	r5, r0, #0
100124dc:	1c30      	adds	r0, r6, #0
100124de:	f001 fdff 	bl	100140e0 <sinf>
100124e2:	1c06      	adds	r6, r0, #0
100124e4:	1c20      	adds	r0, r4, #0
100124e6:	f004 f81b 	bl	10016520 <__aeabi_i2f>
100124ea:	496d      	ldr	r1, [pc, #436]	; (100126a0 <inv_perform_9x_fusion+0x374>)
100124ec:	f003 fb7a 	bl	10015be4 <__aeabi_fdiv>
100124f0:	4680      	mov	r8, r0
100124f2:	2398      	movs	r3, #152	; 0x98
100124f4:	9511      	str	r5, [sp, #68]	; 0x44
100124f6:	2500      	movs	r5, #0
100124f8:	005b      	lsls	r3, r3, #1
100124fa:	ac11      	add	r4, sp, #68	; 0x44
100124fc:	58f8      	ldr	r0, [r7, r3]
100124fe:	4969      	ldr	r1, [pc, #420]	; (100126a4 <inv_perform_9x_fusion+0x378>)
10012500:	6065      	str	r5, [r4, #4]
10012502:	60a5      	str	r5, [r4, #8]
10012504:	60e6      	str	r6, [r4, #12]
10012506:	f002 ff89 	bl	1001541c <__aeabi_idiv>
1001250a:	f004 f809 	bl	10016520 <__aeabi_i2f>
1001250e:	1c06      	adds	r6, r0, #0
10012510:	1c31      	adds	r1, r6, #0
10012512:	4640      	mov	r0, r8
10012514:	f003 fb66 	bl	10015be4 <__aeabi_fdiv>
10012518:	21fc      	movs	r1, #252	; 0xfc
1001251a:	0589      	lsls	r1, r1, #22
1001251c:	f003 fd2c 	bl	10015f78 <__aeabi_fmul>
10012520:	f003 ffdc 	bl	100164dc <__aeabi_f2iz>
10012524:	0040      	lsls	r0, r0, #1
10012526:	f003 fffb 	bl	10016520 <__aeabi_i2f>
1001252a:	495d      	ldr	r1, [pc, #372]	; (100126a0 <inv_perform_9x_fusion+0x374>)
1001252c:	f003 fd24 	bl	10015f78 <__aeabi_fmul>
10012530:	1c01      	adds	r1, r0, #0
10012532:	1c30      	adds	r0, r6, #0
10012534:	f003 fd20 	bl	10015f78 <__aeabi_fmul>
10012538:	f003 ffd0 	bl	100164dc <__aeabi_f2iz>
1001253c:	f003 fff0 	bl	10016520 <__aeabi_i2f>
10012540:	21c2      	movs	r1, #194	; 0xc2
10012542:	0589      	lsls	r1, r1, #22
10012544:	f003 fd18 	bl	10015f78 <__aeabi_fmul>
10012548:	1c06      	adds	r6, r0, #0
1001254a:	f001 fd8b 	bl	10014064 <cosf>
1001254e:	9015      	str	r0, [sp, #84]	; 0x54
10012550:	1c30      	adds	r0, r6, #0
10012552:	9516      	str	r5, [sp, #88]	; 0x58
10012554:	9517      	str	r5, [sp, #92]	; 0x5c
10012556:	f001 fdc3 	bl	100140e0 <sinf>
1001255a:	1c21      	adds	r1, r4, #0
1001255c:	9018      	str	r0, [sp, #96]	; 0x60
1001255e:	aa0d      	add	r2, sp, #52	; 0x34
10012560:	a809      	add	r0, sp, #36	; 0x24
10012562:	f7f8 f895 	bl	1000a690 <inv_q_multf>
10012566:	1c22      	adds	r2, r4, #0
10012568:	a80d      	add	r0, sp, #52	; 0x34
1001256a:	a915      	add	r1, sp, #84	; 0x54
1001256c:	f7f8 f890 	bl	1000a690 <inv_q_multf>
10012570:	23bc      	movs	r3, #188	; 0xbc
10012572:	9a01      	ldr	r2, [sp, #4]
10012574:	2500      	movs	r5, #0
10012576:	58d3      	ldr	r3, [r2, r3]
10012578:	4698      	mov	r8, r3
1001257a:	2b00      	cmp	r3, #0
1001257c:	dd16      	ble.n	100125ac <inv_perform_9x_fusion+0x280>
1001257e:	221c      	movs	r2, #28
10012580:	219d      	movs	r1, #157	; 0x9d
10012582:	ab02      	add	r3, sp, #8
10012584:	189b      	adds	r3, r3, r2
10012586:	5962      	ldr	r2, [r4, r5]
10012588:	1c2e      	adds	r6, r5, #0
1001258a:	515a      	str	r2, [r3, r5]
1001258c:	1c10      	adds	r0, r2, #0
1001258e:	05c9      	lsls	r1, r1, #23
10012590:	f003 fcf2 	bl	10015f78 <__aeabi_fmul>
10012594:	f003 ffa2 	bl	100164dc <__aeabi_f2iz>
10012598:	36a8      	adds	r6, #168	; 0xa8
1001259a:	19be      	adds	r6, r7, r6
1001259c:	3504      	adds	r5, #4
1001259e:	6030      	str	r0, [r6, #0]
100125a0:	2d10      	cmp	r5, #16
100125a2:	d1ec      	bne.n	1001257e <inv_perform_9x_fusion+0x252>
100125a4:	4643      	mov	r3, r8
100125a6:	2b03      	cmp	r3, #3
100125a8:	d100      	bne.n	100125ac <inv_perform_9x_fusion+0x280>
100125aa:	e07d      	b.n	100126a8 <inv_perform_9x_fusion+0x37c>
100125ac:	23a8      	movs	r3, #168	; 0xa8
100125ae:	58f8      	ldr	r0, [r7, r3]
100125b0:	4698      	mov	r8, r3
100125b2:	f003 ffb5 	bl	10016520 <__aeabi_i2f>
100125b6:	21c2      	movs	r1, #194	; 0xc2
100125b8:	0589      	lsls	r1, r1, #22
100125ba:	f003 fcdd 	bl	10015f78 <__aeabi_fmul>
100125be:	26ac      	movs	r6, #172	; 0xac
100125c0:	900d      	str	r0, [sp, #52]	; 0x34
100125c2:	59b8      	ldr	r0, [r7, r6]
100125c4:	f003 ffac 	bl	10016520 <__aeabi_i2f>
100125c8:	21c2      	movs	r1, #194	; 0xc2
100125ca:	0589      	lsls	r1, r1, #22
100125cc:	f003 fcd4 	bl	10015f78 <__aeabi_fmul>
100125d0:	25b0      	movs	r5, #176	; 0xb0
100125d2:	900e      	str	r0, [sp, #56]	; 0x38
100125d4:	5978      	ldr	r0, [r7, r5]
100125d6:	f003 ffa3 	bl	10016520 <__aeabi_i2f>
100125da:	21c2      	movs	r1, #194	; 0xc2
100125dc:	0589      	lsls	r1, r1, #22
100125de:	f003 fccb 	bl	10015f78 <__aeabi_fmul>
100125e2:	24b4      	movs	r4, #180	; 0xb4
100125e4:	900f      	str	r0, [sp, #60]	; 0x3c
100125e6:	5938      	ldr	r0, [r7, r4]
100125e8:	f003 ff9a 	bl	10016520 <__aeabi_i2f>
100125ec:	21c2      	movs	r1, #194	; 0xc2
100125ee:	0589      	lsls	r1, r1, #22
100125f0:	f003 fcc2 	bl	10015f78 <__aeabi_fmul>
100125f4:	2390      	movs	r3, #144	; 0x90
100125f6:	005b      	lsls	r3, r3, #1
100125f8:	58fb      	ldr	r3, [r7, r3]
100125fa:	9010      	str	r0, [sp, #64]	; 0x40
100125fc:	2b00      	cmp	r3, #0
100125fe:	d116      	bne.n	1001262e <inv_perform_9x_fusion+0x302>
10012600:	b02b      	add	sp, #172	; 0xac
10012602:	bc3c      	pop	{r2, r3, r4, r5}
10012604:	4690      	mov	r8, r2
10012606:	4699      	mov	r9, r3
10012608:	46a2      	mov	sl, r4
1001260a:	46ab      	mov	fp, r5
1001260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001260e:	2505      	movs	r5, #5
10012610:	1a6d      	subs	r5, r5, r1
10012612:	2d05      	cmp	r5, #5
10012614:	dc00      	bgt.n	10012618 <inv_perform_9x_fusion+0x2ec>
10012616:	e6d9      	b.n	100123cc <inv_perform_9x_fusion+0xa0>
10012618:	4b1e      	ldr	r3, [pc, #120]	; (10012694 <inv_perform_9x_fusion+0x368>)
1001261a:	469a      	mov	sl, r3
1001261c:	ab21      	add	r3, sp, #132	; 0x84
1001261e:	4699      	mov	r9, r3
10012620:	e6fc      	b.n	1001241c <inv_perform_9x_fusion+0xf0>
10012622:	2300      	movs	r3, #0
10012624:	25fe      	movs	r5, #254	; 0xfe
10012626:	4698      	mov	r8, r3
10012628:	1c1e      	adds	r6, r3, #0
1001262a:	05ad      	lsls	r5, r5, #22
1001262c:	e761      	b.n	100124f2 <inv_perform_9x_fusion+0x1c6>
1001262e:	23b8      	movs	r3, #184	; 0xb8
10012630:	21fc      	movs	r1, #252	; 0xfc
10012632:	58f8      	ldr	r0, [r7, r3]
10012634:	0589      	lsls	r1, r1, #22
10012636:	f003 fc9f 	bl	10015f78 <__aeabi_fmul>
1001263a:	4681      	mov	r9, r0
1001263c:	f001 fd12 	bl	10014064 <cosf>
10012640:	219d      	movs	r1, #157	; 0x9d
10012642:	05c9      	lsls	r1, r1, #23
10012644:	f003 fc98 	bl	10015f78 <__aeabi_fmul>
10012648:	f003 ff48 	bl	100164dc <__aeabi_f2iz>
1001264c:	4643      	mov	r3, r8
1001264e:	50f8      	str	r0, [r7, r3]
10012650:	2300      	movs	r3, #0
10012652:	4648      	mov	r0, r9
10012654:	51bb      	str	r3, [r7, r6]
10012656:	517b      	str	r3, [r7, r5]
10012658:	f001 fd42 	bl	100140e0 <sinf>
1001265c:	219d      	movs	r1, #157	; 0x9d
1001265e:	05c9      	lsls	r1, r1, #23
10012660:	f003 fc8a 	bl	10015f78 <__aeabi_fmul>
10012664:	f003 ff3a 	bl	100164dc <__aeabi_f2iz>
10012668:	5138      	str	r0, [r7, r4]
1001266a:	23c0      	movs	r3, #192	; 0xc0
1001266c:	1c38      	adds	r0, r7, #0
1001266e:	9a01      	ldr	r2, [sp, #4]
10012670:	30a8      	adds	r0, #168	; 0xa8
10012672:	58d1      	ldr	r1, [r2, r3]
10012674:	f7f8 fb42 	bl	1000acfc <inv_set_compass_correction>
10012678:	2290      	movs	r2, #144	; 0x90
1001267a:	0052      	lsls	r2, r2, #1
1001267c:	58bb      	ldr	r3, [r7, r2]
1001267e:	2b00      	cmp	r3, #0
10012680:	d0be      	beq.n	10012600 <inv_perform_9x_fusion+0x2d4>
10012682:	3b01      	subs	r3, #1
10012684:	50bb      	str	r3, [r7, r2]
10012686:	e7bb      	b.n	10012600 <inv_perform_9x_fusion+0x2d4>
10012688:	3a01      	subs	r2, #1
1001268a:	50fa      	str	r2, [r7, r3]
1001268c:	e7b8      	b.n	10012600 <inv_perform_9x_fusion+0x2d4>
1001268e:	46c0      	nop			; (mov r8, r8)
10012690:	1001ece0 	.word	0x1001ece0
10012694:	49742400 	.word	0x49742400
10012698:	1001ed88 	.word	0x1001ed88
1001269c:	000f4240 	.word	0x000f4240
100126a0:	473702e1 	.word	0x473702e1
100126a4:	00001388 	.word	0x00001388
100126a8:	f000 ff28 	bl	100134fc <inv_get_magnetic_disturbance_state>
100126ac:	2800      	cmp	r0, #0
100126ae:	d000      	beq.n	100126b2 <inv_perform_9x_fusion+0x386>
100126b0:	e77c      	b.n	100125ac <inv_perform_9x_fusion+0x280>
100126b2:	23b8      	movs	r3, #184	; 0xb8
100126b4:	21fc      	movs	r1, #252	; 0xfc
100126b6:	58f8      	ldr	r0, [r7, r3]
100126b8:	0589      	lsls	r1, r1, #22
100126ba:	f003 fc5d 	bl	10015f78 <__aeabi_fmul>
100126be:	1c05      	adds	r5, r0, #0
100126c0:	f001 fcd0 	bl	10014064 <cosf>
100126c4:	2300      	movs	r3, #0
100126c6:	9015      	str	r0, [sp, #84]	; 0x54
100126c8:	1c28      	adds	r0, r5, #0
100126ca:	9316      	str	r3, [sp, #88]	; 0x58
100126cc:	9317      	str	r3, [sp, #92]	; 0x5c
100126ce:	f001 fd07 	bl	100140e0 <sinf>
100126d2:	a915      	add	r1, sp, #84	; 0x54
100126d4:	9018      	str	r0, [sp, #96]	; 0x60
100126d6:	1c22      	adds	r2, r4, #0
100126d8:	a809      	add	r0, sp, #36	; 0x24
100126da:	f7f7 ffd9 	bl	1000a690 <inv_q_multf>
100126de:	1c20      	adds	r0, r4, #0
100126e0:	f7f8 f86e 	bl	1000a7c0 <inv_q_normalizef>
100126e4:	2500      	movs	r5, #0
100126e6:	219d      	movs	r1, #157	; 0x9d
100126e8:	1c2e      	adds	r6, r5, #0
100126ea:	5960      	ldr	r0, [r4, r5]
100126ec:	05c9      	lsls	r1, r1, #23
100126ee:	f003 fc43 	bl	10015f78 <__aeabi_fmul>
100126f2:	f003 fef3 	bl	100164dc <__aeabi_f2iz>
100126f6:	36a8      	adds	r6, #168	; 0xa8
100126f8:	19be      	adds	r6, r7, r6
100126fa:	3504      	adds	r5, #4
100126fc:	6030      	str	r0, [r6, #0]
100126fe:	2d10      	cmp	r5, #16
10012700:	d1f1      	bne.n	100126e6 <inv_perform_9x_fusion+0x3ba>
10012702:	e7b2      	b.n	1001266a <inv_perform_9x_fusion+0x33e>

10012704 <inv_process_9x_sensor_fusion_cb>:
10012704:	23b8      	movs	r3, #184	; 0xb8
10012706:	58c2      	ldr	r2, [r0, r3]
10012708:	3ba8      	subs	r3, #168	; 0xa8
1001270a:	b570      	push	{r4, r5, r6, lr}
1001270c:	4013      	ands	r3, r2
1001270e:	4d24      	ldr	r5, [pc, #144]	; (100127a0 <inv_process_9x_sensor_fusion_cb+0x9c>)
10012710:	d105      	bne.n	1001271e <inv_process_9x_sensor_fusion_cb+0x1a>
10012712:	2290      	movs	r2, #144	; 0x90
10012714:	2103      	movs	r1, #3
10012716:	0052      	lsls	r2, r2, #1
10012718:	50a9      	str	r1, [r5, r2]
1001271a:	3204      	adds	r2, #4
1001271c:	50ab      	str	r3, [r5, r2]
1001271e:	2390      	movs	r3, #144	; 0x90
10012720:	005b      	lsls	r3, r3, #1
10012722:	58c2      	ldr	r2, [r0, r3]
10012724:	3b20      	subs	r3, #32
10012726:	421a      	tst	r2, r3
10012728:	d105      	bne.n	10012736 <inv_process_9x_sensor_fusion_cb+0x32>
1001272a:	6b02      	ldr	r2, [r0, #48]	; 0x30
1001272c:	421a      	tst	r2, r3
1001272e:	d02b      	beq.n	10012788 <inv_process_9x_sensor_fusion_cb+0x84>
10012730:	6f42      	ldr	r2, [r0, #116]	; 0x74
10012732:	421a      	tst	r2, r3
10012734:	d028      	beq.n	10012788 <inv_process_9x_sensor_fusion_cb+0x84>
10012736:	239a      	movs	r3, #154	; 0x9a
10012738:	005b      	lsls	r3, r3, #1
1001273a:	58eb      	ldr	r3, [r5, r3]
1001273c:	1c04      	adds	r4, r0, #0
1001273e:	2b00      	cmp	r3, #0
10012740:	d010      	beq.n	10012764 <inv_process_9x_sensor_fusion_cb+0x60>
10012742:	22c4      	movs	r2, #196	; 0xc4
10012744:	23c0      	movs	r3, #192	; 0xc0
10012746:	21fa      	movs	r1, #250	; 0xfa
10012748:	58c3      	ldr	r3, [r0, r3]
1001274a:	5880      	ldr	r0, [r0, r2]
1001274c:	0089      	lsls	r1, r1, #2
1001274e:	1a18      	subs	r0, r3, r0
10012750:	f002 fdda 	bl	10015308 <__aeabi_uidiv>
10012754:	2398      	movs	r3, #152	; 0x98
10012756:	005b      	lsls	r3, r3, #1
10012758:	50e8      	str	r0, [r5, r3]
1001275a:	1c20      	adds	r0, r4, #0
1001275c:	f7ff fde6 	bl	1001232c <inv_perform_9x_fusion>
10012760:	2000      	movs	r0, #0
10012762:	bd70      	pop	{r4, r5, r6, pc}
10012764:	22b0      	movs	r2, #176	; 0xb0
10012766:	490f      	ldr	r1, [pc, #60]	; (100127a4 <inv_process_9x_sensor_fusion_cb+0xa0>)
10012768:	5882      	ldr	r2, [r0, r2]
1001276a:	428a      	cmp	r2, r1
1001276c:	dc14      	bgt.n	10012798 <inv_process_9x_sensor_fusion_cb+0x94>
1001276e:	2096      	movs	r0, #150	; 0x96
10012770:	0040      	lsls	r0, r0, #1
10012772:	582e      	ldr	r6, [r5, r0]
10012774:	46b4      	mov	ip, r6
10012776:	4462      	add	r2, ip
10012778:	502a      	str	r2, [r5, r0]
1001277a:	428a      	cmp	r2, r1
1001277c:	ddf0      	ble.n	10012760 <inv_process_9x_sensor_fusion_cb+0x5c>
1001277e:	2198      	movs	r1, #152	; 0x98
10012780:	0049      	lsls	r1, r1, #1
10012782:	506a      	str	r2, [r5, r1]
10012784:	502b      	str	r3, [r5, r0]
10012786:	e7e8      	b.n	1001275a <inv_process_9x_sensor_fusion_cb+0x56>
10012788:	2390      	movs	r3, #144	; 0x90
1001278a:	2203      	movs	r2, #3
1001278c:	005b      	lsls	r3, r3, #1
1001278e:	50ea      	str	r2, [r5, r3]
10012790:	2200      	movs	r2, #0
10012792:	3304      	adds	r3, #4
10012794:	50ea      	str	r2, [r5, r3]
10012796:	e7e3      	b.n	10012760 <inv_process_9x_sensor_fusion_cb+0x5c>
10012798:	2398      	movs	r3, #152	; 0x98
1001279a:	005b      	lsls	r3, r3, #1
1001279c:	50ea      	str	r2, [r5, r3]
1001279e:	e7dc      	b.n	1001275a <inv_process_9x_sensor_fusion_cb+0x56>
100127a0:	1001ece0 	.word	0x1001ece0
100127a4:	00004e1f 	.word	0x00004e1f

100127a8 <inv_init_9x_fusion>:
100127a8:	229c      	movs	r2, #156	; 0x9c
100127aa:	b510      	push	{r4, lr}
100127ac:	4c0d      	ldr	r4, [pc, #52]	; (100127e4 <inv_init_9x_fusion+0x3c>)
100127ae:	2100      	movs	r1, #0
100127b0:	1c20      	adds	r0, r4, #0
100127b2:	0052      	lsls	r2, r2, #1
100127b4:	f005 ff53 	bl	1001865e <memset>
100127b8:	2380      	movs	r3, #128	; 0x80
100127ba:	22fc      	movs	r2, #252	; 0xfc
100127bc:	1c20      	adds	r0, r4, #0
100127be:	05db      	lsls	r3, r3, #23
100127c0:	50a3      	str	r3, [r4, r2]
100127c2:	30a8      	adds	r0, #168	; 0xa8
100127c4:	3a54      	subs	r2, #84	; 0x54
100127c6:	2100      	movs	r1, #0
100127c8:	50a3      	str	r3, [r4, r2]
100127ca:	f7f8 fa97 	bl	1000acfc <inv_set_compass_correction>
100127ce:	22fa      	movs	r2, #250	; 0xfa
100127d0:	238e      	movs	r3, #142	; 0x8e
100127d2:	0092      	lsls	r2, r2, #2
100127d4:	005b      	lsls	r3, r3, #1
100127d6:	50e2      	str	r2, [r4, r3]
100127d8:	22fe      	movs	r2, #254	; 0xfe
100127da:	3b30      	subs	r3, #48	; 0x30
100127dc:	0592      	lsls	r2, r2, #22
100127de:	50e2      	str	r2, [r4, r3]
100127e0:	bd10      	pop	{r4, pc}
100127e2:	46c0      	nop			; (mov r8, r8)
100127e4:	1001ece0 	.word	0x1001ece0

100127e8 <inv_9x_fusion_set_mag_fb>:
100127e8:	23ec      	movs	r3, #236	; 0xec
100127ea:	4a02      	ldr	r2, [pc, #8]	; (100127f4 <inv_9x_fusion_set_mag_fb+0xc>)
100127ec:	50d0      	str	r0, [r2, r3]
100127ee:	2000      	movs	r0, #0
100127f0:	4770      	bx	lr
100127f2:	46c0      	nop			; (mov r8, r8)
100127f4:	1001ece0 	.word	0x1001ece0

100127f8 <inv_9x_fusion_enable_jitter_reduction>:
100127f8:	2394      	movs	r3, #148	; 0x94
100127fa:	4a02      	ldr	r2, [pc, #8]	; (10012804 <inv_9x_fusion_enable_jitter_reduction+0xc>)
100127fc:	005b      	lsls	r3, r3, #1
100127fe:	50d0      	str	r0, [r2, r3]
10012800:	2000      	movs	r0, #0
10012802:	4770      	bx	lr
10012804:	1001ece0 	.word	0x1001ece0

10012808 <inv_9x_fusion_use_timestamps>:
10012808:	239a      	movs	r3, #154	; 0x9a
1001280a:	4a02      	ldr	r2, [pc, #8]	; (10012814 <inv_9x_fusion_use_timestamps+0xc>)
1001280c:	005b      	lsls	r3, r3, #1
1001280e:	50d0      	str	r0, [r2, r3]
10012810:	2000      	movs	r0, #0
10012812:	4770      	bx	lr
10012814:	1001ece0 	.word	0x1001ece0

10012818 <inv_stop_9x_sensor_fusion>:
10012818:	b508      	push	{r3, lr}
1001281a:	4802      	ldr	r0, [pc, #8]	; (10012824 <inv_stop_9x_sensor_fusion+0xc>)
1001281c:	f7f7 fc96 	bl	1000a14c <inv_unregister_data_cb>
10012820:	bd08      	pop	{r3, pc}
10012822:	46c0      	nop			; (mov r8, r8)
10012824:	10012705 	.word	0x10012705

10012828 <inv_enable_9x_sensor_fusion>:
10012828:	b508      	push	{r3, lr}
1001282a:	f7ff ffbd 	bl	100127a8 <inv_init_9x_fusion>
1001282e:	2194      	movs	r1, #148	; 0x94
10012830:	2200      	movs	r2, #0
10012832:	4b04      	ldr	r3, [pc, #16]	; (10012844 <inv_enable_9x_sensor_fusion+0x1c>)
10012834:	0049      	lsls	r1, r1, #1
10012836:	505a      	str	r2, [r3, r1]
10012838:	4803      	ldr	r0, [pc, #12]	; (10012848 <inv_enable_9x_sensor_fusion+0x20>)
1001283a:	310c      	adds	r1, #12
1001283c:	505a      	str	r2, [r3, r1]
1001283e:	f7f8 fb91 	bl	1000af64 <inv_register_mpl_start_notification>
10012842:	bd08      	pop	{r3, pc}
10012844:	1001ece0 	.word	0x1001ece0
10012848:	1001211d 	.word	0x1001211d

1001284c <inv_disable_9x_sensor_fusion>:
1001284c:	b508      	push	{r3, lr}
1001284e:	4802      	ldr	r0, [pc, #8]	; (10012858 <inv_disable_9x_sensor_fusion+0xc>)
10012850:	f7f8 fb54 	bl	1000aefc <inv_unregister_mpl_start_notification>
10012854:	bd08      	pop	{r3, pc}
10012856:	46c0      	nop			; (mov r8, r8)
10012858:	1001211d 	.word	0x1001211d

1001285c <inv_start_gyro_tc>:
1001285c:	b508      	push	{r3, lr}
1001285e:	4803      	ldr	r0, [pc, #12]	; (1001286c <inv_start_gyro_tc+0x10>)
10012860:	2196      	movs	r1, #150	; 0x96
10012862:	2208      	movs	r2, #8
10012864:	f7f7 fbee 	bl	1000a044 <inv_register_data_cb>
10012868:	bd08      	pop	{r3, pc}
1001286a:	46c0      	nop			; (mov r8, r8)
1001286c:	10012871 	.word	0x10012871

10012870 <inv_gtc_data_cb>:
10012870:	b5f0      	push	{r4, r5, r6, r7, lr}
10012872:	4644      	mov	r4, r8
10012874:	465f      	mov	r7, fp
10012876:	4656      	mov	r6, sl
10012878:	464d      	mov	r5, r9
1001287a:	b4f0      	push	{r4, r5, r6, r7}
1001287c:	b0b9      	sub	sp, #228	; 0xe4
1001287e:	1c04      	adds	r4, r0, #0
10012880:	a927      	add	r1, sp, #156	; 0x9c
10012882:	a829      	add	r0, sp, #164	; 0xa4
10012884:	f7f7 fbc8 	bl	1000a018 <inv_get_gyro_bias>
10012888:	a828      	add	r0, sp, #160	; 0xa0
1001288a:	f7f8 fa61 	bl	1000ad50 <inv_get_motion_state>
1001288e:	2802      	cmp	r0, #2
10012890:	d012      	beq.n	100128b8 <inv_gtc_data_cb+0x48>
10012892:	23e4      	movs	r3, #228	; 0xe4
10012894:	4db4      	ldr	r5, [pc, #720]	; (10012b68 <inv_gtc_data_cb+0x2f8>)
10012896:	58e4      	ldr	r4, [r4, r3]
10012898:	33cc      	adds	r3, #204	; 0xcc
1001289a:	5ceb      	ldrb	r3, [r5, r3]
1001289c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
1001289e:	2b00      	cmp	r3, #0
100128a0:	d002      	beq.n	100128a8 <inv_gtc_data_cb+0x38>
100128a2:	1aa4      	subs	r4, r4, r2
100128a4:	d000      	beq.n	100128a8 <inv_gtc_data_cb+0x38>
100128a6:	e128      	b.n	10012afa <inv_gtc_data_cb+0x28a>
100128a8:	2000      	movs	r0, #0
100128aa:	b039      	add	sp, #228	; 0xe4
100128ac:	bc3c      	pop	{r2, r3, r4, r5}
100128ae:	4690      	mov	r8, r2
100128b0:	4699      	mov	r9, r3
100128b2:	46a2      	mov	sl, r4
100128b4:	46ab      	mov	fp, r5
100128b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100128b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
100128ba:	2b03      	cmp	r3, #3
100128bc:	d1f4      	bne.n	100128a8 <inv_gtc_data_cb+0x38>
100128be:	f7f7 fb9d 	bl	10009ffc <inv_get_gyro_bias_tc_set>
100128c2:	2800      	cmp	r0, #0
100128c4:	d0f0      	beq.n	100128a8 <inv_gtc_data_cb+0x38>
100128c6:	4ba8      	ldr	r3, [pc, #672]	; (10012b68 <inv_gtc_data_cb+0x2f8>)
100128c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
100128ca:	4698      	mov	r8, r3
100128cc:	23da      	movs	r3, #218	; 0xda
100128ce:	4642      	mov	r2, r8
100128d0:	005b      	lsls	r3, r3, #1
100128d2:	58d0      	ldr	r0, [r2, r3]
100128d4:	3304      	adds	r3, #4
100128d6:	58d3      	ldr	r3, [r2, r3]
100128d8:	1a34      	subs	r4, r6, r0
100128da:	2105      	movs	r1, #5
100128dc:	1a18      	subs	r0, r3, r0
100128de:	f002 fd9d 	bl	1001541c <__aeabi_idiv>
100128e2:	1c01      	adds	r1, r0, #0
100128e4:	1c20      	adds	r0, r4, #0
100128e6:	f002 fd99 	bl	1001541c <__aeabi_idiv>
100128ea:	b2c3      	uxtb	r3, r0
100128ec:	2b04      	cmp	r3, #4
100128ee:	d8db      	bhi.n	100128a8 <inv_gtc_data_cb+0x38>
100128f0:	24ff      	movs	r4, #255	; 0xff
100128f2:	2554      	movs	r5, #84	; 0x54
100128f4:	4643      	mov	r3, r8
100128f6:	4004      	ands	r4, r0
100128f8:	4365      	muls	r5, r4
100128fa:	195f      	adds	r7, r3, r5
100128fc:	1c3a      	adds	r2, r7, #0
100128fe:	3250      	adds	r2, #80	; 0x50
10012900:	7813      	ldrb	r3, [r2, #0]
10012902:	2b05      	cmp	r3, #5
10012904:	d100      	bne.n	10012908 <inv_gtc_data_cb+0x98>
10012906:	e1d3      	b.n	10012cb0 <inv_gtc_data_cb+0x440>
10012908:	1c59      	adds	r1, r3, #1
1001290a:	7011      	strb	r1, [r2, #0]
1001290c:	0062      	lsls	r2, r4, #1
1001290e:	1914      	adds	r4, r2, r4
10012910:	00e2      	lsls	r2, r4, #3
10012912:	1b14      	subs	r4, r2, r4
10012914:	18e3      	adds	r3, r4, r3
10012916:	1c1a      	adds	r2, r3, #0
10012918:	4641      	mov	r1, r8
1001291a:	320e      	adds	r2, #14
1001291c:	0092      	lsls	r2, r2, #2
1001291e:	4442      	add	r2, r8
10012920:	9829      	ldr	r0, [sp, #164]	; 0xa4
10012922:	6056      	str	r6, [r2, #4]
10012924:	009a      	lsls	r2, r3, #2
10012926:	5088      	str	r0, [r1, r2]
10012928:	1d1a      	adds	r2, r3, #4
1001292a:	992a      	ldr	r1, [sp, #168]	; 0xa8
1001292c:	0092      	lsls	r2, r2, #2
1001292e:	4442      	add	r2, r8
10012930:	6051      	str	r1, [r2, #4]
10012932:	4642      	mov	r2, r8
10012934:	330a      	adds	r3, #10
10012936:	992b      	ldr	r1, [sp, #172]	; 0xac
10012938:	009b      	lsls	r3, r3, #2
1001293a:	50d1      	str	r1, [r2, r3]
1001293c:	2300      	movs	r3, #0
1001293e:	932c      	str	r3, [sp, #176]	; 0xb0
10012940:	932d      	str	r3, [sp, #180]	; 0xb4
10012942:	932e      	str	r3, [sp, #184]	; 0xb8
10012944:	932f      	str	r3, [sp, #188]	; 0xbc
10012946:	9330      	str	r3, [sp, #192]	; 0xc0
10012948:	9331      	str	r3, [sp, #196]	; 0xc4
1001294a:	9332      	str	r3, [sp, #200]	; 0xc8
1001294c:	9333      	str	r3, [sp, #204]	; 0xcc
1001294e:	9334      	str	r3, [sp, #208]	; 0xd0
10012950:	9335      	str	r3, [sp, #212]	; 0xd4
10012952:	9336      	str	r3, [sp, #216]	; 0xd8
10012954:	9337      	str	r3, [sp, #220]	; 0xdc
10012956:	33c1      	adds	r3, #193	; 0xc1
10012958:	33ff      	adds	r3, #255	; 0xff
1001295a:	5cd3      	ldrb	r3, [r2, r3]
1001295c:	2b01      	cmp	r3, #1
1001295e:	d1a3      	bne.n	100128a8 <inv_gtc_data_cb+0x38>
10012960:	33b8      	adds	r3, #184	; 0xb8
10012962:	33ff      	adds	r3, #255	; 0xff
10012964:	58d3      	ldr	r3, [r2, r3]
10012966:	921a      	str	r2, [sp, #104]	; 0x68
10012968:	469a      	mov	sl, r3
1001296a:	23da      	movs	r3, #218	; 0xda
1001296c:	005b      	lsls	r3, r3, #1
1001296e:	58d3      	ldr	r3, [r2, r3]
10012970:	931c      	str	r3, [sp, #112]	; 0x70
10012972:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10012974:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
10012976:	9312      	str	r3, [sp, #72]	; 0x48
10012978:	9413      	str	r4, [sp, #76]	; 0x4c
1001297a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
1001297c:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
1001297e:	9310      	str	r3, [sp, #64]	; 0x40
10012980:	9411      	str	r4, [sp, #68]	; 0x44
10012982:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10012984:	9c31      	ldr	r4, [sp, #196]	; 0xc4
10012986:	930e      	str	r3, [sp, #56]	; 0x38
10012988:	940f      	str	r4, [sp, #60]	; 0x3c
1001298a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
1001298c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
1001298e:	9314      	str	r3, [sp, #80]	; 0x50
10012990:	9415      	str	r4, [sp, #84]	; 0x54
10012992:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10012994:	9c35      	ldr	r4, [sp, #212]	; 0xd4
10012996:	930c      	str	r3, [sp, #48]	; 0x30
10012998:	940d      	str	r4, [sp, #52]	; 0x34
1001299a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
1001299c:	9c37      	ldr	r4, [sp, #220]	; 0xdc
1001299e:	930a      	str	r3, [sp, #40]	; 0x28
100129a0:	940b      	str	r4, [sp, #44]	; 0x2c
100129a2:	2300      	movs	r3, #0
100129a4:	2400      	movs	r4, #0
100129a6:	469b      	mov	fp, r3
100129a8:	2300      	movs	r3, #0
100129aa:	9316      	str	r3, [sp, #88]	; 0x58
100129ac:	9417      	str	r4, [sp, #92]	; 0x5c
100129ae:	9324      	str	r3, [sp, #144]	; 0x90
100129b0:	9318      	str	r3, [sp, #96]	; 0x60
100129b2:	4653      	mov	r3, sl
100129b4:	9319      	str	r3, [sp, #100]	; 0x64
100129b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
100129b8:	3350      	adds	r3, #80	; 0x50
100129ba:	781b      	ldrb	r3, [r3, #0]
100129bc:	931d      	str	r3, [sp, #116]	; 0x74
100129be:	2b00      	cmp	r3, #0
100129c0:	d100      	bne.n	100129c4 <inv_gtc_data_cb+0x154>
100129c2:	e0df      	b.n	10012b84 <inv_gtc_data_cb+0x314>
100129c4:	445b      	add	r3, fp
100129c6:	009b      	lsls	r3, r3, #2
100129c8:	4443      	add	r3, r8
100129ca:	4699      	mov	r9, r3
100129cc:	465b      	mov	r3, fp
100129ce:	9325      	str	r3, [sp, #148]	; 0x94
100129d0:	464b      	mov	r3, r9
100129d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
100129d4:	931b      	str	r3, [sp, #108]	; 0x6c
100129d6:	46aa      	mov	sl, r5
100129d8:	e00b      	b.n	100129f2 <inv_gtc_data_cb+0x182>
100129da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
100129dc:	454b      	cmp	r3, r9
100129de:	da01      	bge.n	100129e4 <inv_gtc_data_cb+0x174>
100129e0:	464b      	mov	r3, r9
100129e2:	931c      	str	r3, [sp, #112]	; 0x70
100129e4:	2304      	movs	r3, #4
100129e6:	469c      	mov	ip, r3
100129e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
100129ea:	44e2      	add	sl, ip
100129ec:	459a      	cmp	sl, r3
100129ee:	d100      	bne.n	100129f2 <inv_gtc_data_cb+0x182>
100129f0:	e0bc      	b.n	10012b6c <inv_gtc_data_cb+0x2fc>
100129f2:	4653      	mov	r3, sl
100129f4:	681b      	ldr	r3, [r3, #0]
100129f6:	9304      	str	r3, [sp, #16]
100129f8:	4653      	mov	r3, sl
100129fa:	681b      	ldr	r3, [r3, #0]
100129fc:	17db      	asrs	r3, r3, #31
100129fe:	9305      	str	r3, [sp, #20]
10012a00:	9804      	ldr	r0, [sp, #16]
10012a02:	9905      	ldr	r1, [sp, #20]
10012a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012a06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012a08:	1812      	adds	r2, r2, r0
10012a0a:	414b      	adcs	r3, r1
10012a0c:	9212      	str	r2, [sp, #72]	; 0x48
10012a0e:	9313      	str	r3, [sp, #76]	; 0x4c
10012a10:	4653      	mov	r3, sl
10012a12:	695b      	ldr	r3, [r3, #20]
10012a14:	9306      	str	r3, [sp, #24]
10012a16:	4653      	mov	r3, sl
10012a18:	695b      	ldr	r3, [r3, #20]
10012a1a:	17db      	asrs	r3, r3, #31
10012a1c:	9307      	str	r3, [sp, #28]
10012a1e:	9806      	ldr	r0, [sp, #24]
10012a20:	9907      	ldr	r1, [sp, #28]
10012a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
10012a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012a26:	1812      	adds	r2, r2, r0
10012a28:	414b      	adcs	r3, r1
10012a2a:	9210      	str	r2, [sp, #64]	; 0x40
10012a2c:	9311      	str	r3, [sp, #68]	; 0x44
10012a2e:	4653      	mov	r3, sl
10012a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10012a32:	9308      	str	r3, [sp, #32]
10012a34:	4653      	mov	r3, sl
10012a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10012a38:	17db      	asrs	r3, r3, #31
10012a3a:	9309      	str	r3, [sp, #36]	; 0x24
10012a3c:	9808      	ldr	r0, [sp, #32]
10012a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
10012a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012a44:	1812      	adds	r2, r2, r0
10012a46:	414b      	adcs	r3, r1
10012a48:	9804      	ldr	r0, [sp, #16]
10012a4a:	9905      	ldr	r1, [sp, #20]
10012a4c:	920e      	str	r2, [sp, #56]	; 0x38
10012a4e:	930f      	str	r3, [sp, #60]	; 0x3c
10012a50:	4653      	mov	r3, sl
10012a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10012a54:	4699      	mov	r9, r3
10012a56:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012a58:	464a      	mov	r2, r9
10012a5a:	444b      	add	r3, r9
10012a5c:	9318      	str	r3, [sp, #96]	; 0x60
10012a5e:	464b      	mov	r3, r9
10012a60:	17db      	asrs	r3, r3, #31
10012a62:	469b      	mov	fp, r3
10012a64:	f002 fe62 	bl	1001572c <__aeabi_lmul>
10012a68:	040b      	lsls	r3, r1, #16
10012a6a:	0c02      	lsrs	r2, r0, #16
10012a6c:	431a      	orrs	r2, r3
10012a6e:	140b      	asrs	r3, r1, #16
10012a70:	9200      	str	r2, [sp, #0]
10012a72:	9301      	str	r3, [sp, #4]
10012a74:	9800      	ldr	r0, [sp, #0]
10012a76:	9901      	ldr	r1, [sp, #4]
10012a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
10012a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
10012a7c:	1812      	adds	r2, r2, r0
10012a7e:	414b      	adcs	r3, r1
10012a80:	9806      	ldr	r0, [sp, #24]
10012a82:	9907      	ldr	r1, [sp, #28]
10012a84:	9214      	str	r2, [sp, #80]	; 0x50
10012a86:	9315      	str	r3, [sp, #84]	; 0x54
10012a88:	464a      	mov	r2, r9
10012a8a:	465b      	mov	r3, fp
10012a8c:	f002 fe4e 	bl	1001572c <__aeabi_lmul>
10012a90:	040b      	lsls	r3, r1, #16
10012a92:	0c02      	lsrs	r2, r0, #16
10012a94:	431a      	orrs	r2, r3
10012a96:	140b      	asrs	r3, r1, #16
10012a98:	9202      	str	r2, [sp, #8]
10012a9a:	9303      	str	r3, [sp, #12]
10012a9c:	9802      	ldr	r0, [sp, #8]
10012a9e:	9903      	ldr	r1, [sp, #12]
10012aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012aa4:	1812      	adds	r2, r2, r0
10012aa6:	414b      	adcs	r3, r1
10012aa8:	9808      	ldr	r0, [sp, #32]
10012aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
10012aac:	920c      	str	r2, [sp, #48]	; 0x30
10012aae:	930d      	str	r3, [sp, #52]	; 0x34
10012ab0:	464a      	mov	r2, r9
10012ab2:	465b      	mov	r3, fp
10012ab4:	f002 fe3a 	bl	1001572c <__aeabi_lmul>
10012ab8:	040b      	lsls	r3, r1, #16
10012aba:	0c06      	lsrs	r6, r0, #16
10012abc:	431e      	orrs	r6, r3
10012abe:	140f      	asrs	r7, r1, #16
10012ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10012ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012ac4:	1992      	adds	r2, r2, r6
10012ac6:	417b      	adcs	r3, r7
10012ac8:	4648      	mov	r0, r9
10012aca:	920a      	str	r2, [sp, #40]	; 0x28
10012acc:	930b      	str	r3, [sp, #44]	; 0x2c
10012ace:	4659      	mov	r1, fp
10012ad0:	464a      	mov	r2, r9
10012ad2:	465b      	mov	r3, fp
10012ad4:	f002 fe2a 	bl	1001572c <__aeabi_lmul>
10012ad8:	040b      	lsls	r3, r1, #16
10012ada:	0c04      	lsrs	r4, r0, #16
10012adc:	431c      	orrs	r4, r3
10012ade:	140d      	asrs	r5, r1, #16
10012ae0:	9a16      	ldr	r2, [sp, #88]	; 0x58
10012ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10012ae4:	1912      	adds	r2, r2, r4
10012ae6:	416b      	adcs	r3, r5
10012ae8:	9216      	str	r2, [sp, #88]	; 0x58
10012aea:	9317      	str	r3, [sp, #92]	; 0x5c
10012aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
10012aee:	4599      	cmp	r9, r3
10012af0:	db00      	blt.n	10012af4 <inv_gtc_data_cb+0x284>
10012af2:	e772      	b.n	100129da <inv_gtc_data_cb+0x16a>
10012af4:	464b      	mov	r3, r9
10012af6:	9319      	str	r3, [sp, #100]	; 0x64
10012af8:	e774      	b.n	100129e4 <inv_gtc_data_cb+0x174>
10012afa:	23d2      	movs	r3, #210	; 0xd2
10012afc:	005b      	lsls	r3, r3, #1
10012afe:	58ea      	ldr	r2, [r5, r3]
10012b00:	17e6      	asrs	r6, r4, #31
10012b02:	17d3      	asrs	r3, r2, #31
10012b04:	1c20      	adds	r0, r4, #0
10012b06:	1c31      	adds	r1, r6, #0
10012b08:	f002 fe10 	bl	1001572c <__aeabi_lmul>
10012b0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
10012b0e:	0409      	lsls	r1, r1, #16
10012b10:	469c      	mov	ip, r3
10012b12:	9300      	str	r3, [sp, #0]
10012b14:	23d4      	movs	r3, #212	; 0xd4
10012b16:	0c00      	lsrs	r0, r0, #16
10012b18:	005b      	lsls	r3, r3, #1
10012b1a:	58ea      	ldr	r2, [r5, r3]
10012b1c:	4308      	orrs	r0, r1
10012b1e:	4460      	add	r0, ip
10012b20:	9029      	str	r0, [sp, #164]	; 0xa4
10012b22:	17d3      	asrs	r3, r2, #31
10012b24:	1c20      	adds	r0, r4, #0
10012b26:	1c31      	adds	r1, r6, #0
10012b28:	f002 fe00 	bl	1001572c <__aeabi_lmul>
10012b2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
10012b2e:	0409      	lsls	r1, r1, #16
10012b30:	469c      	mov	ip, r3
10012b32:	9300      	str	r3, [sp, #0]
10012b34:	23d6      	movs	r3, #214	; 0xd6
10012b36:	0c00      	lsrs	r0, r0, #16
10012b38:	005b      	lsls	r3, r3, #1
10012b3a:	58ea      	ldr	r2, [r5, r3]
10012b3c:	4308      	orrs	r0, r1
10012b3e:	4460      	add	r0, ip
10012b40:	902a      	str	r0, [sp, #168]	; 0xa8
10012b42:	17d3      	asrs	r3, r2, #31
10012b44:	1c20      	adds	r0, r4, #0
10012b46:	1c31      	adds	r1, r6, #0
10012b48:	f002 fdf0 	bl	1001572c <__aeabi_lmul>
10012b4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
10012b4e:	0409      	lsls	r1, r1, #16
10012b50:	469c      	mov	ip, r3
10012b52:	0c00      	lsrs	r0, r0, #16
10012b54:	4308      	orrs	r0, r1
10012b56:	4460      	add	r0, ip
10012b58:	902b      	str	r0, [sp, #172]	; 0xac
10012b5a:	2103      	movs	r1, #3
10012b5c:	a829      	add	r0, sp, #164	; 0xa4
10012b5e:	9300      	str	r3, [sp, #0]
10012b60:	f7f7 fa08 	bl	10009f74 <inv_set_gyro_bias>
10012b64:	e6a0      	b.n	100128a8 <inv_gtc_data_cb+0x38>
10012b66:	46c0      	nop			; (mov r8, r8)
10012b68:	1001d588 	.word	0x1001d588
10012b6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
10012b6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
10012b70:	4694      	mov	ip, r2
10012b72:	469b      	mov	fp, r3
10012b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10012b76:	9620      	str	r6, [sp, #128]	; 0x80
10012b78:	9721      	str	r7, [sp, #132]	; 0x84
10012b7a:	4463      	add	r3, ip
10012b7c:	9422      	str	r4, [sp, #136]	; 0x88
10012b7e:	9523      	str	r5, [sp, #140]	; 0x8c
10012b80:	b2db      	uxtb	r3, r3
10012b82:	9324      	str	r3, [sp, #144]	; 0x90
10012b84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012b86:	3354      	adds	r3, #84	; 0x54
10012b88:	931a      	str	r3, [sp, #104]	; 0x68
10012b8a:	2315      	movs	r3, #21
10012b8c:	469c      	mov	ip, r3
10012b8e:	44e3      	add	fp, ip
10012b90:	465b      	mov	r3, fp
10012b92:	2b69      	cmp	r3, #105	; 0x69
10012b94:	d000      	beq.n	10012b98 <inv_gtc_data_cb+0x328>
10012b96:	e70e      	b.n	100129b6 <inv_gtc_data_cb+0x146>
10012b98:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012b9a:	4641      	mov	r1, r8
10012b9c:	4699      	mov	r9, r3
10012b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
10012ba0:	469a      	mov	sl, r3
10012ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012ba4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
10012ba6:	4652      	mov	r2, sl
10012ba8:	932c      	str	r3, [sp, #176]	; 0xb0
10012baa:	942d      	str	r4, [sp, #180]	; 0xb4
10012bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012bae:	9c11      	ldr	r4, [sp, #68]	; 0x44
10012bb0:	932e      	str	r3, [sp, #184]	; 0xb8
10012bb2:	942f      	str	r4, [sp, #188]	; 0xbc
10012bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012bb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10012bb8:	9330      	str	r3, [sp, #192]	; 0xc0
10012bba:	9431      	str	r4, [sp, #196]	; 0xc4
10012bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
10012bbe:	9c15      	ldr	r4, [sp, #84]	; 0x54
10012bc0:	9332      	str	r3, [sp, #200]	; 0xc8
10012bc2:	9433      	str	r4, [sp, #204]	; 0xcc
10012bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012bc6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10012bc8:	9334      	str	r3, [sp, #208]	; 0xd0
10012bca:	9435      	str	r4, [sp, #212]	; 0xd4
10012bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012bce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10012bd0:	9336      	str	r3, [sp, #216]	; 0xd8
10012bd2:	9437      	str	r4, [sp, #220]	; 0xdc
10012bd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012bd6:	1a9b      	subs	r3, r3, r2
10012bd8:	22de      	movs	r2, #222	; 0xde
10012bda:	0052      	lsls	r2, r2, #1
10012bdc:	588a      	ldr	r2, [r1, r2]
10012bde:	4293      	cmp	r3, r2
10012be0:	da00      	bge.n	10012be4 <inv_gtc_data_cb+0x374>
10012be2:	e661      	b.n	100128a8 <inv_gtc_data_cb+0x38>
10012be4:	9816      	ldr	r0, [sp, #88]	; 0x58
10012be6:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012be8:	464b      	mov	r3, r9
10012bea:	17db      	asrs	r3, r3, #31
10012bec:	1c1e      	adds	r6, r3, #0
10012bee:	9304      	str	r3, [sp, #16]
10012bf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
10012bf2:	2300      	movs	r3, #0
10012bf4:	f002 fd9a 	bl	1001572c <__aeabi_lmul>
10012bf8:	1c04      	adds	r4, r0, #0
10012bfa:	1c0d      	adds	r5, r1, #0
10012bfc:	1c33      	adds	r3, r6, #0
10012bfe:	1c31      	adds	r1, r6, #0
10012c00:	4648      	mov	r0, r9
10012c02:	464a      	mov	r2, r9
10012c04:	9400      	str	r4, [sp, #0]
10012c06:	9501      	str	r5, [sp, #4]
10012c08:	f002 fd90 	bl	1001572c <__aeabi_lmul>
10012c0c:	040b      	lsls	r3, r1, #16
10012c0e:	0c06      	lsrs	r6, r0, #16
10012c10:	431e      	orrs	r6, r3
10012c12:	23d2      	movs	r3, #210	; 0xd2
10012c14:	005b      	lsls	r3, r3, #1
10012c16:	4443      	add	r3, r8
10012c18:	469b      	mov	fp, r3
10012c1a:	2300      	movs	r3, #0
10012c1c:	469a      	mov	sl, r3
10012c1e:	1c23      	adds	r3, r4, #0
10012c20:	1c2c      	adds	r4, r5, #0
10012c22:	140f      	asrs	r7, r1, #16
10012c24:	1b9b      	subs	r3, r3, r6
10012c26:	41bc      	sbcs	r4, r7
10012c28:	9602      	str	r6, [sp, #8]
10012c2a:	9703      	str	r7, [sp, #12]
10012c2c:	9306      	str	r3, [sp, #24]
10012c2e:	9407      	str	r4, [sp, #28]
10012c30:	ab32      	add	r3, sp, #200	; 0xc8
10012c32:	4453      	add	r3, sl
10012c34:	6818      	ldr	r0, [r3, #0]
10012c36:	6859      	ldr	r1, [r3, #4]
10012c38:	ab2c      	add	r3, sp, #176	; 0xb0
10012c3a:	4453      	add	r3, sl
10012c3c:	681e      	ldr	r6, [r3, #0]
10012c3e:	685f      	ldr	r7, [r3, #4]
10012c40:	9a02      	ldr	r2, [sp, #8]
10012c42:	9b00      	ldr	r3, [sp, #0]
10012c44:	4293      	cmp	r3, r2
10012c46:	d02e      	beq.n	10012ca6 <inv_gtc_data_cb+0x436>
10012c48:	9a24      	ldr	r2, [sp, #144]	; 0x90
10012c4a:	2300      	movs	r3, #0
10012c4c:	f002 fd6e 	bl	1001572c <__aeabi_lmul>
10012c50:	464a      	mov	r2, r9
10012c52:	1c04      	adds	r4, r0, #0
10012c54:	1c0d      	adds	r5, r1, #0
10012c56:	9b04      	ldr	r3, [sp, #16]
10012c58:	1c30      	adds	r0, r6, #0
10012c5a:	1c39      	adds	r1, r7, #0
10012c5c:	f002 fd66 	bl	1001572c <__aeabi_lmul>
10012c60:	040b      	lsls	r3, r1, #16
10012c62:	0c02      	lsrs	r2, r0, #16
10012c64:	431a      	orrs	r2, r3
10012c66:	140b      	asrs	r3, r1, #16
10012c68:	921e      	str	r2, [sp, #120]	; 0x78
10012c6a:	931f      	str	r3, [sp, #124]	; 0x7c
10012c6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
10012c6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10012c70:	1aa4      	subs	r4, r4, r2
10012c72:	419d      	sbcs	r5, r3
10012c74:	0c23      	lsrs	r3, r4, #16
10012c76:	0429      	lsls	r1, r5, #16
10012c78:	4319      	orrs	r1, r3
10012c7a:	0420      	lsls	r0, r4, #16
10012c7c:	9a06      	ldr	r2, [sp, #24]
10012c7e:	9b07      	ldr	r3, [sp, #28]
10012c80:	f002 fd30 	bl	100156e4 <__aeabi_ldivmod>
10012c84:	465b      	mov	r3, fp
10012c86:	6018      	str	r0, [r3, #0]
10012c88:	2308      	movs	r3, #8
10012c8a:	469c      	mov	ip, r3
10012c8c:	3b04      	subs	r3, #4
10012c8e:	44e2      	add	sl, ip
10012c90:	469c      	mov	ip, r3
10012c92:	4653      	mov	r3, sl
10012c94:	44e3      	add	fp, ip
10012c96:	2b18      	cmp	r3, #24
10012c98:	d1ca      	bne.n	10012c30 <inv_gtc_data_cb+0x3c0>
10012c9a:	2201      	movs	r2, #1
10012c9c:	4641      	mov	r1, r8
10012c9e:	3399      	adds	r3, #153	; 0x99
10012ca0:	33ff      	adds	r3, #255	; 0xff
10012ca2:	54ca      	strb	r2, [r1, r3]
10012ca4:	e600      	b.n	100128a8 <inv_gtc_data_cb+0x38>
10012ca6:	9b01      	ldr	r3, [sp, #4]
10012ca8:	9a03      	ldr	r2, [sp, #12]
10012caa:	4293      	cmp	r3, r2
10012cac:	d1cc      	bne.n	10012c48 <inv_gtc_data_cb+0x3d8>
10012cae:	e7eb      	b.n	10012c88 <inv_gtc_data_cb+0x418>
10012cb0:	4643      	mov	r3, r8
10012cb2:	1958      	adds	r0, r3, r5
10012cb4:	1959      	adds	r1, r3, r5
10012cb6:	3140      	adds	r1, #64	; 0x40
10012cb8:	2210      	movs	r2, #16
10012cba:	303c      	adds	r0, #60	; 0x3c
10012cbc:	f005 fcba 	bl	10018634 <memmove>
10012cc0:	1d29      	adds	r1, r5, #4
10012cc2:	4441      	add	r1, r8
10012cc4:	2210      	movs	r2, #16
10012cc6:	1c38      	adds	r0, r7, #0
10012cc8:	f005 fcb4 	bl	10018634 <memmove>
10012ccc:	4643      	mov	r3, r8
10012cce:	1958      	adds	r0, r3, r5
10012cd0:	1959      	adds	r1, r3, r5
10012cd2:	3118      	adds	r1, #24
10012cd4:	2210      	movs	r2, #16
10012cd6:	3014      	adds	r0, #20
10012cd8:	f005 fcac 	bl	10018634 <memmove>
10012cdc:	1c28      	adds	r0, r5, #0
10012cde:	1c29      	adds	r1, r5, #0
10012ce0:	3028      	adds	r0, #40	; 0x28
10012ce2:	312c      	adds	r1, #44	; 0x2c
10012ce4:	4440      	add	r0, r8
10012ce6:	4441      	add	r1, r8
10012ce8:	2210      	movs	r2, #16
10012cea:	f005 fca3 	bl	10018634 <memmove>
10012cee:	2304      	movs	r3, #4
10012cf0:	e60c      	b.n	1001290c <inv_gtc_data_cb+0x9c>
10012cf2:	46c0      	nop			; (mov r8, r8)

10012cf4 <inv_gtc_store>:
10012cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012cf6:	4a09      	ldr	r2, [pc, #36]	; (10012d1c <inv_gtc_store+0x28>)
10012cf8:	b085      	sub	sp, #20
10012cfa:	1c13      	adds	r3, r2, #0
10012cfc:	466c      	mov	r4, sp
10012cfe:	33a5      	adds	r3, #165	; 0xa5
10012d00:	33ff      	adds	r3, #255	; 0xff
10012d02:	cbe0      	ldmia	r3!, {r5, r6, r7}
10012d04:	c4e0      	stmia	r4!, {r5, r6, r7}
10012d06:	23d8      	movs	r3, #216	; 0xd8
10012d08:	4669      	mov	r1, sp
10012d0a:	005b      	lsls	r3, r3, #1
10012d0c:	5cd3      	ldrb	r3, [r2, r3]
10012d0e:	2210      	movs	r2, #16
10012d10:	730b      	strb	r3, [r1, #12]
10012d12:	f005 fc86 	bl	10018622 <memcpy>
10012d16:	2000      	movs	r0, #0
10012d18:	b005      	add	sp, #20
10012d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012d1c:	1001d588 	.word	0x1001d588

10012d20 <inv_gtc_load>:
10012d20:	b570      	push	{r4, r5, r6, lr}
10012d22:	b084      	sub	sp, #16
10012d24:	1c01      	adds	r1, r0, #0
10012d26:	2210      	movs	r2, #16
10012d28:	4668      	mov	r0, sp
10012d2a:	f005 fc7a 	bl	10018622 <memcpy>
10012d2e:	4a07      	ldr	r2, [pc, #28]	; (10012d4c <inv_gtc_load+0x2c>)
10012d30:	4669      	mov	r1, sp
10012d32:	1c13      	adds	r3, r2, #0
10012d34:	33a5      	adds	r3, #165	; 0xa5
10012d36:	466c      	mov	r4, sp
10012d38:	33ff      	adds	r3, #255	; 0xff
10012d3a:	c961      	ldmia	r1!, {r0, r5, r6}
10012d3c:	c361      	stmia	r3!, {r0, r5, r6}
10012d3e:	23d8      	movs	r3, #216	; 0xd8
10012d40:	2000      	movs	r0, #0
10012d42:	7b21      	ldrb	r1, [r4, #12]
10012d44:	005b      	lsls	r3, r3, #1
10012d46:	54d1      	strb	r1, [r2, r3]
10012d48:	b004      	add	sp, #16
10012d4a:	bd70      	pop	{r4, r5, r6, pc}
10012d4c:	1001d588 	.word	0x1001d588

10012d50 <inv_init_gyro_ts>:
10012d50:	22e2      	movs	r2, #226	; 0xe2
10012d52:	b510      	push	{r4, lr}
10012d54:	4c0b      	ldr	r4, [pc, #44]	; (10012d84 <inv_init_gyro_ts+0x34>)
10012d56:	2100      	movs	r1, #0
10012d58:	1c20      	adds	r0, r4, #0
10012d5a:	0052      	lsls	r2, r2, #1
10012d5c:	f005 fc7f 	bl	1001865e <memset>
10012d60:	23da      	movs	r3, #218	; 0xda
10012d62:	4a09      	ldr	r2, [pc, #36]	; (10012d88 <inv_init_gyro_ts+0x38>)
10012d64:	005b      	lsls	r3, r3, #1
10012d66:	50e2      	str	r2, [r4, r3]
10012d68:	22aa      	movs	r2, #170	; 0xaa
10012d6a:	3304      	adds	r3, #4
10012d6c:	03d2      	lsls	r2, r2, #15
10012d6e:	50e2      	str	r2, [r4, r3]
10012d70:	22a0      	movs	r2, #160	; 0xa0
10012d72:	3304      	adds	r3, #4
10012d74:	02d2      	lsls	r2, r2, #11
10012d76:	50e2      	str	r2, [r4, r3]
10012d78:	2201      	movs	r2, #1
10012d7a:	3304      	adds	r3, #4
10012d7c:	2000      	movs	r0, #0
10012d7e:	54e2      	strb	r2, [r4, r3]
10012d80:	bd10      	pop	{r4, pc}
10012d82:	46c0      	nop			; (mov r8, r8)
10012d84:	1001d588 	.word	0x1001d588
10012d88:	ffd80000 	.word	0xffd80000

10012d8c <inv_set_gtc_max_temp>:
10012d8c:	23dc      	movs	r3, #220	; 0xdc
10012d8e:	4a02      	ldr	r2, [pc, #8]	; (10012d98 <inv_set_gtc_max_temp+0xc>)
10012d90:	005b      	lsls	r3, r3, #1
10012d92:	50d0      	str	r0, [r2, r3]
10012d94:	2000      	movs	r0, #0
10012d96:	4770      	bx	lr
10012d98:	1001d588 	.word	0x1001d588

10012d9c <inv_set_gtc_min_temp>:
10012d9c:	23da      	movs	r3, #218	; 0xda
10012d9e:	4a02      	ldr	r2, [pc, #8]	; (10012da8 <inv_set_gtc_min_temp+0xc>)
10012da0:	005b      	lsls	r3, r3, #1
10012da2:	50d0      	str	r0, [r2, r3]
10012da4:	2000      	movs	r0, #0
10012da6:	4770      	bx	lr
10012da8:	1001d588 	.word	0x1001d588

10012dac <inv_set_gtc_min_diff>:
10012dac:	23de      	movs	r3, #222	; 0xde
10012dae:	4a02      	ldr	r2, [pc, #8]	; (10012db8 <inv_set_gtc_min_diff+0xc>)
10012db0:	005b      	lsls	r3, r3, #1
10012db2:	50d0      	str	r0, [r2, r3]
10012db4:	2000      	movs	r0, #0
10012db6:	4770      	bx	lr
10012db8:	1001d588 	.word	0x1001d588

10012dbc <inv_get_gyro_ts>:
10012dbc:	2800      	cmp	r0, #0
10012dbe:	d00e      	beq.n	10012dde <inv_get_gyro_ts+0x22>
10012dc0:	22d2      	movs	r2, #210	; 0xd2
10012dc2:	4b08      	ldr	r3, [pc, #32]	; (10012de4 <inv_get_gyro_ts+0x28>)
10012dc4:	0052      	lsls	r2, r2, #1
10012dc6:	589a      	ldr	r2, [r3, r2]
10012dc8:	6002      	str	r2, [r0, #0]
10012dca:	22d4      	movs	r2, #212	; 0xd4
10012dcc:	0052      	lsls	r2, r2, #1
10012dce:	589a      	ldr	r2, [r3, r2]
10012dd0:	6042      	str	r2, [r0, #4]
10012dd2:	22d6      	movs	r2, #214	; 0xd6
10012dd4:	0052      	lsls	r2, r2, #1
10012dd6:	589b      	ldr	r3, [r3, r2]
10012dd8:	6083      	str	r3, [r0, #8]
10012dda:	2000      	movs	r0, #0
10012ddc:	4770      	bx	lr
10012dde:	2016      	movs	r0, #22
10012de0:	e7fc      	b.n	10012ddc <inv_get_gyro_ts+0x20>
10012de2:	46c0      	nop			; (mov r8, r8)
10012de4:	1001d588 	.word	0x1001d588

10012de8 <inv_set_gyro_ts>:
10012de8:	2024      	movs	r0, #36	; 0x24
10012dea:	4770      	bx	lr

10012dec <inv_set_gtc_order>:
10012dec:	2324      	movs	r3, #36	; 0x24
10012dee:	2800      	cmp	r0, #0
10012df0:	d101      	bne.n	10012df6 <inv_set_gtc_order+0xa>
10012df2:	1c18      	adds	r0, r3, #0
10012df4:	4770      	bx	lr
10012df6:	339d      	adds	r3, #157	; 0x9d
10012df8:	4a02      	ldr	r2, [pc, #8]	; (10012e04 <inv_set_gtc_order+0x18>)
10012dfa:	33ff      	adds	r3, #255	; 0xff
10012dfc:	54d0      	strb	r0, [r2, r3]
10012dfe:	2300      	movs	r3, #0
10012e00:	e7f7      	b.n	10012df2 <inv_set_gtc_order+0x6>
10012e02:	46c0      	nop			; (mov r8, r8)
10012e04:	1001d588 	.word	0x1001d588

10012e08 <inv_print_gtc_data>:
10012e08:	2000      	movs	r0, #0
10012e0a:	4770      	bx	lr

10012e0c <inv_stop_gyro_tc>:
10012e0c:	b508      	push	{r3, lr}
10012e0e:	4802      	ldr	r0, [pc, #8]	; (10012e18 <inv_stop_gyro_tc+0xc>)
10012e10:	f7f7 f99c 	bl	1000a14c <inv_unregister_data_cb>
10012e14:	bd08      	pop	{r3, pc}
10012e16:	46c0      	nop			; (mov r8, r8)
10012e18:	10012871 	.word	0x10012871

10012e1c <inv_enable_gyro_tc>:
10012e1c:	b508      	push	{r3, lr}
10012e1e:	f7ff ff97 	bl	10012d50 <inv_init_gyro_ts>
10012e22:	239a      	movs	r3, #154	; 0x9a
10012e24:	480a      	ldr	r0, [pc, #40]	; (10012e50 <inv_enable_gyro_tc+0x34>)
10012e26:	490b      	ldr	r1, [pc, #44]	; (10012e54 <inv_enable_gyro_tc+0x38>)
10012e28:	2210      	movs	r2, #16
10012e2a:	005b      	lsls	r3, r3, #1
10012e2c:	f7f8 f8d6 	bl	1000afdc <inv_register_load_store>
10012e30:	2800      	cmp	r0, #0
10012e32:	d001      	beq.n	10012e38 <inv_enable_gyro_tc+0x1c>
10012e34:	2001      	movs	r0, #1
10012e36:	bd08      	pop	{r3, pc}
10012e38:	4807      	ldr	r0, [pc, #28]	; (10012e58 <inv_enable_gyro_tc+0x3c>)
10012e3a:	f7f8 f893 	bl	1000af64 <inv_register_mpl_start_notification>
10012e3e:	2800      	cmp	r0, #0
10012e40:	d1f8      	bne.n	10012e34 <inv_enable_gyro_tc+0x18>
10012e42:	23b2      	movs	r3, #178	; 0xb2
10012e44:	2101      	movs	r1, #1
10012e46:	4a05      	ldr	r2, [pc, #20]	; (10012e5c <inv_enable_gyro_tc+0x40>)
10012e48:	33ff      	adds	r3, #255	; 0xff
10012e4a:	54d1      	strb	r1, [r2, r3]
10012e4c:	e7f3      	b.n	10012e36 <inv_enable_gyro_tc+0x1a>
10012e4e:	46c0      	nop			; (mov r8, r8)
10012e50:	10012d21 	.word	0x10012d21
10012e54:	10012cf5 	.word	0x10012cf5
10012e58:	1001285d 	.word	0x1001285d
10012e5c:	1001d588 	.word	0x1001d588

10012e60 <inv_disable_gyro_tc>:
10012e60:	b538      	push	{r3, r4, r5, lr}
10012e62:	24b2      	movs	r4, #178	; 0xb2
10012e64:	4d09      	ldr	r5, [pc, #36]	; (10012e8c <inv_disable_gyro_tc+0x2c>)
10012e66:	34ff      	adds	r4, #255	; 0xff
10012e68:	5d2b      	ldrb	r3, [r5, r4]
10012e6a:	2000      	movs	r0, #0
10012e6c:	2b00      	cmp	r3, #0
10012e6e:	d100      	bne.n	10012e72 <inv_disable_gyro_tc+0x12>
10012e70:	bd38      	pop	{r3, r4, r5, pc}
10012e72:	4807      	ldr	r0, [pc, #28]	; (10012e90 <inv_disable_gyro_tc+0x30>)
10012e74:	f7f7 f96a 	bl	1000a14c <inv_unregister_data_cb>
10012e78:	4806      	ldr	r0, [pc, #24]	; (10012e94 <inv_disable_gyro_tc+0x34>)
10012e7a:	f7f8 f83f 	bl	1000aefc <inv_unregister_mpl_start_notification>
10012e7e:	1c03      	adds	r3, r0, #0
10012e80:	2001      	movs	r0, #1
10012e82:	2b00      	cmp	r3, #0
10012e84:	d1f4      	bne.n	10012e70 <inv_disable_gyro_tc+0x10>
10012e86:	552b      	strb	r3, [r5, r4]
10012e88:	2000      	movs	r0, #0
10012e8a:	e7f1      	b.n	10012e70 <inv_disable_gyro_tc+0x10>
10012e8c:	1001d588 	.word	0x1001d588
10012e90:	10012871 	.word	0x10012871
10012e94:	1001285d 	.word	0x1001285d

10012e98 <inv_start_magnetic_disturbance>:
10012e98:	2196      	movs	r1, #150	; 0x96
10012e9a:	b508      	push	{r3, lr}
10012e9c:	4802      	ldr	r0, [pc, #8]	; (10012ea8 <inv_start_magnetic_disturbance+0x10>)
10012e9e:	0049      	lsls	r1, r1, #1
10012ea0:	2204      	movs	r2, #4
10012ea2:	f7f7 f8cf 	bl	1000a044 <inv_register_data_cb>
10012ea6:	bd08      	pop	{r3, pc}
10012ea8:	100134c5 	.word	0x100134c5

10012eac <inv_set_magnetic_disturbance>:
10012eac:	2800      	cmp	r0, #0
10012eae:	dd05      	ble.n	10012ebc <inv_set_magnetic_disturbance+0x10>
10012eb0:	2284      	movs	r2, #132	; 0x84
10012eb2:	2101      	movs	r1, #1
10012eb4:	4b02      	ldr	r3, [pc, #8]	; (10012ec0 <inv_set_magnetic_disturbance+0x14>)
10012eb6:	5099      	str	r1, [r3, r2]
10012eb8:	3a04      	subs	r2, #4
10012eba:	5098      	str	r0, [r3, r2]
10012ebc:	2000      	movs	r0, #0
10012ebe:	4770      	bx	lr
10012ec0:	1001d74c 	.word	0x1001d74c

10012ec4 <inv_init_magnetic_disturbance>:
10012ec4:	b510      	push	{r4, lr}
10012ec6:	4c0c      	ldr	r4, [pc, #48]	; (10012ef8 <inv_init_magnetic_disturbance+0x34>)
10012ec8:	2100      	movs	r1, #0
10012eca:	1c20      	adds	r0, r4, #0
10012ecc:	22b8      	movs	r2, #184	; 0xb8
10012ece:	f005 fbc6 	bl	1001865e <memset>
10012ed2:	4b0a      	ldr	r3, [pc, #40]	; (10012efc <inv_init_magnetic_disturbance+0x38>)
10012ed4:	4a0a      	ldr	r2, [pc, #40]	; (10012f00 <inv_init_magnetic_disturbance+0x3c>)
10012ed6:	60e3      	str	r3, [r4, #12]
10012ed8:	4b0a      	ldr	r3, [pc, #40]	; (10012f04 <inv_init_magnetic_disturbance+0x40>)
10012eda:	2000      	movs	r0, #0
10012edc:	60a3      	str	r3, [r4, #8]
10012ede:	4b0a      	ldr	r3, [pc, #40]	; (10012f08 <inv_init_magnetic_disturbance+0x44>)
10012ee0:	6023      	str	r3, [r4, #0]
10012ee2:	4b0a      	ldr	r3, [pc, #40]	; (10012f0c <inv_init_magnetic_disturbance+0x48>)
10012ee4:	6063      	str	r3, [r4, #4]
10012ee6:	2380      	movs	r3, #128	; 0x80
10012ee8:	05db      	lsls	r3, r3, #23
10012eea:	6663      	str	r3, [r4, #100]	; 0x64
10012eec:	23fa      	movs	r3, #250	; 0xfa
10012eee:	00db      	lsls	r3, r3, #3
10012ef0:	67e3      	str	r3, [r4, #124]	; 0x7c
10012ef2:	239c      	movs	r3, #156	; 0x9c
10012ef4:	50e2      	str	r2, [r4, r3]
10012ef6:	bd10      	pop	{r4, pc}
10012ef8:	1001d74c 	.word	0x1001d74c
10012efc:	42b40000 	.word	0x42b40000
10012f00:	3e2e147b 	.word	0x3e2e147b
10012f04:	c2b40000 	.word	0xc2b40000
10012f08:	42700000 	.word	0x42700000
10012f0c:	41f00000 	.word	0x41f00000

10012f10 <inv_stop_magnetic_disturbance>:
10012f10:	b508      	push	{r3, lr}
10012f12:	4802      	ldr	r0, [pc, #8]	; (10012f1c <inv_stop_magnetic_disturbance+0xc>)
10012f14:	f7f7 f91a 	bl	1000a14c <inv_unregister_data_cb>
10012f18:	bd08      	pop	{r3, pc}
10012f1a:	46c0      	nop			; (mov r8, r8)
10012f1c:	100134c5 	.word	0x100134c5

10012f20 <inv_enable_magnetic_disturbance>:
10012f20:	b508      	push	{r3, lr}
10012f22:	f7ff ffcf 	bl	10012ec4 <inv_init_magnetic_disturbance>
10012f26:	2800      	cmp	r0, #0
10012f28:	d108      	bne.n	10012f3c <inv_enable_magnetic_disturbance+0x1c>
10012f2a:	228c      	movs	r2, #140	; 0x8c
10012f2c:	2101      	movs	r1, #1
10012f2e:	4b04      	ldr	r3, [pc, #16]	; (10012f40 <inv_enable_magnetic_disturbance+0x20>)
10012f30:	5098      	str	r0, [r3, r2]
10012f32:	3a04      	subs	r2, #4
10012f34:	4803      	ldr	r0, [pc, #12]	; (10012f44 <inv_enable_magnetic_disturbance+0x24>)
10012f36:	5099      	str	r1, [r3, r2]
10012f38:	f7f8 f814 	bl	1000af64 <inv_register_mpl_start_notification>
10012f3c:	bd08      	pop	{r3, pc}
10012f3e:	46c0      	nop			; (mov r8, r8)
10012f40:	1001d74c 	.word	0x1001d74c
10012f44:	10012e99 	.word	0x10012e99

10012f48 <inv_disable_magnetic_disturbance>:
10012f48:	b510      	push	{r4, lr}
10012f4a:	4c04      	ldr	r4, [pc, #16]	; (10012f5c <inv_disable_magnetic_disturbance+0x14>)
10012f4c:	1c20      	adds	r0, r4, #0
10012f4e:	f7f7 f8fd 	bl	1000a14c <inv_unregister_data_cb>
10012f52:	1c20      	adds	r0, r4, #0
10012f54:	f7f7 f8fa 	bl	1000a14c <inv_unregister_data_cb>
10012f58:	bd10      	pop	{r4, pc}
10012f5a:	46c0      	nop			; (mov r8, r8)
10012f5c:	100134c5 	.word	0x100134c5

10012f60 <inv_disable_dip_tracking>:
10012f60:	2100      	movs	r1, #0
10012f62:	238c      	movs	r3, #140	; 0x8c
10012f64:	4a01      	ldr	r2, [pc, #4]	; (10012f6c <inv_disable_dip_tracking+0xc>)
10012f66:	2000      	movs	r0, #0
10012f68:	50d1      	str	r1, [r2, r3]
10012f6a:	4770      	bx	lr
10012f6c:	1001d74c 	.word	0x1001d74c

10012f70 <inv_enable_dip_tracking>:
10012f70:	2101      	movs	r1, #1
10012f72:	238c      	movs	r3, #140	; 0x8c
10012f74:	4a01      	ldr	r2, [pc, #4]	; (10012f7c <inv_enable_dip_tracking+0xc>)
10012f76:	2000      	movs	r0, #0
10012f78:	50d1      	str	r1, [r2, r3]
10012f7a:	4770      	bx	lr
10012f7c:	1001d74c 	.word	0x1001d74c

10012f80 <inv_track_dip_angle>:
10012f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012f82:	2800      	cmp	r0, #0
10012f84:	d00b      	beq.n	10012f9e <inv_track_dip_angle+0x1e>
10012f86:	2801      	cmp	r0, #1
10012f88:	d019      	beq.n	10012fbe <inv_track_dip_angle+0x3e>
10012f8a:	2101      	movs	r1, #1
10012f8c:	2298      	movs	r2, #152	; 0x98
10012f8e:	4b20      	ldr	r3, [pc, #128]	; (10013010 <inv_track_dip_angle+0x90>)
10012f90:	5099      	str	r1, [r3, r2]
10012f92:	2200      	movs	r2, #0
10012f94:	318b      	adds	r1, #139	; 0x8b
10012f96:	505a      	str	r2, [r3, r1]
10012f98:	3104      	adds	r1, #4
10012f9a:	505a      	str	r2, [r3, r1]
10012f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012f9e:	22a0      	movs	r2, #160	; 0xa0
10012fa0:	4b1b      	ldr	r3, [pc, #108]	; (10013010 <inv_track_dip_angle+0x90>)
10012fa2:	5099      	str	r1, [r3, r2]
10012fa4:	3204      	adds	r2, #4
10012fa6:	5099      	str	r1, [r3, r2]
10012fa8:	2100      	movs	r1, #0
10012faa:	3204      	adds	r2, #4
10012fac:	5099      	str	r1, [r3, r2]
10012fae:	2101      	movs	r1, #1
10012fb0:	3a14      	subs	r2, #20
10012fb2:	5098      	str	r0, [r3, r2]
10012fb4:	3a04      	subs	r2, #4
10012fb6:	5099      	str	r1, [r3, r2]
10012fb8:	3208      	adds	r2, #8
10012fba:	5098      	str	r0, [r3, r2]
10012fbc:	e7ee      	b.n	10012f9c <inv_track_dip_angle+0x1c>
10012fbe:	23a0      	movs	r3, #160	; 0xa0
10012fc0:	4d13      	ldr	r5, [pc, #76]	; (10013010 <inv_track_dip_angle+0x90>)
10012fc2:	1c08      	adds	r0, r1, #0
10012fc4:	1c0c      	adds	r4, r1, #0
10012fc6:	58e9      	ldr	r1, [r5, r3]
10012fc8:	f003 f8ea 	bl	100161a0 <__aeabi_fsub>
10012fcc:	239c      	movs	r3, #156	; 0x9c
10012fce:	0040      	lsls	r0, r0, #1
10012fd0:	0840      	lsrs	r0, r0, #1
10012fd2:	58e9      	ldr	r1, [r5, r3]
10012fd4:	f002 fb5e 	bl	10015694 <__aeabi_fcmplt>
10012fd8:	2800      	cmp	r0, #0
10012fda:	d014      	beq.n	10013006 <inv_track_dip_angle+0x86>
10012fdc:	2394      	movs	r3, #148	; 0x94
10012fde:	27a4      	movs	r7, #164	; 0xa4
10012fe0:	58ea      	ldr	r2, [r5, r3]
10012fe2:	59e9      	ldr	r1, [r5, r7]
10012fe4:	1c56      	adds	r6, r2, #1
10012fe6:	50ee      	str	r6, [r5, r3]
10012fe8:	1c20      	adds	r0, r4, #0
10012fea:	f002 fc85 	bl	100158f8 <__aeabi_fadd>
10012fee:	51e8      	str	r0, [r5, r7]
10012ff0:	2e31      	cmp	r6, #49	; 0x31
10012ff2:	ddd3      	ble.n	10012f9c <inv_track_dip_angle+0x1c>
10012ff4:	2390      	movs	r3, #144	; 0x90
10012ff6:	2202      	movs	r2, #2
10012ff8:	4906      	ldr	r1, [pc, #24]	; (10013014 <inv_track_dip_angle+0x94>)
10012ffa:	50ea      	str	r2, [r5, r3]
10012ffc:	f002 fdf2 	bl	10015be4 <__aeabi_fdiv>
10013000:	23a8      	movs	r3, #168	; 0xa8
10013002:	50e8      	str	r0, [r5, r3]
10013004:	e7ca      	b.n	10012f9c <inv_track_dip_angle+0x1c>
10013006:	2390      	movs	r3, #144	; 0x90
10013008:	50e8      	str	r0, [r5, r3]
1001300a:	3304      	adds	r3, #4
1001300c:	50e8      	str	r0, [r5, r3]
1001300e:	e7c5      	b.n	10012f9c <inv_track_dip_angle+0x1c>
10013010:	1001d74c 	.word	0x1001d74c
10013014:	42480000 	.word	0x42480000

10013018 <ComputeAngleVelocity>:
10013018:	b5f0      	push	{r4, r5, r6, r7, lr}
1001301a:	464f      	mov	r7, r9
1001301c:	4646      	mov	r6, r8
1001301e:	1c04      	adds	r4, r0, #0
10013020:	1c0d      	adds	r5, r1, #0
10013022:	b4c0      	push	{r6, r7}
10013024:	b08f      	sub	sp, #60	; 0x3c
10013026:	a905      	add	r1, sp, #20
10013028:	4691      	mov	r9, r2
1001302a:	f7f7 fcd1 	bl	1000a9d0 <inv_quaternion_to_rotation>
1001302e:	1c28      	adds	r0, r5, #0
10013030:	1c21      	adds	r1, r4, #0
10013032:	aa01      	add	r2, sp, #4
10013034:	f7f7 f982 	bl	1000a33c <inv_q_mult>
10013038:	1c20      	adds	r0, r4, #0
1001303a:	1c29      	adds	r1, r5, #0
1001303c:	f7f7 fa5e 	bl	1000a4fc <inv_q_invert>
10013040:	2300      	movs	r3, #0
10013042:	4698      	mov	r8, r3
10013044:	4643      	mov	r3, r8
10013046:	005d      	lsls	r5, r3, #1
10013048:	ab05      	add	r3, sp, #20
1001304a:	469c      	mov	ip, r3
1001304c:	2400      	movs	r4, #0
1001304e:	2600      	movs	r6, #0
10013050:	2700      	movs	r7, #0
10013052:	4445      	add	r5, r8
10013054:	4465      	add	r5, ip
10013056:	592b      	ldr	r3, [r5, r4]
10013058:	5928      	ldr	r0, [r5, r4]
1001305a:	17d9      	asrs	r1, r3, #31
1001305c:	ab01      	add	r3, sp, #4
1001305e:	191b      	adds	r3, r3, r4
10013060:	685a      	ldr	r2, [r3, #4]
10013062:	3404      	adds	r4, #4
10013064:	17d3      	asrs	r3, r2, #31
10013066:	f002 fb61 	bl	1001572c <__aeabi_lmul>
1001306a:	1836      	adds	r6, r6, r0
1001306c:	414f      	adcs	r7, r1
1001306e:	2c0c      	cmp	r4, #12
10013070:	d1f1      	bne.n	10013056 <ComputeAngleVelocity+0x3e>
10013072:	00bb      	lsls	r3, r7, #2
10013074:	0fb6      	lsrs	r6, r6, #30
10013076:	431e      	orrs	r6, r3
10013078:	4642      	mov	r2, r8
1001307a:	464b      	mov	r3, r9
1001307c:	509e      	str	r6, [r3, r2]
1001307e:	2304      	movs	r3, #4
10013080:	469c      	mov	ip, r3
10013082:	44e0      	add	r8, ip
10013084:	4643      	mov	r3, r8
10013086:	2b0c      	cmp	r3, #12
10013088:	d1dc      	bne.n	10013044 <ComputeAngleVelocity+0x2c>
1001308a:	b00f      	add	sp, #60	; 0x3c
1001308c:	bc0c      	pop	{r2, r3}
1001308e:	4690      	mov	r8, r2
10013090:	4699      	mov	r9, r3
10013092:	bdf0      	pop	{r4, r5, r6, r7, pc}

10013094 <Mag3ofNormalizedLong>:
10013094:	b570      	push	{r4, r5, r6, lr}
10013096:	1c04      	adds	r4, r0, #0
10013098:	6800      	ldr	r0, [r0, #0]
1001309a:	f003 fa41 	bl	10016520 <__aeabi_i2f>
1001309e:	1c06      	adds	r6, r0, #0
100130a0:	6860      	ldr	r0, [r4, #4]
100130a2:	f003 fa3d 	bl	10016520 <__aeabi_i2f>
100130a6:	1c05      	adds	r5, r0, #0
100130a8:	68a0      	ldr	r0, [r4, #8]
100130aa:	f003 fa39 	bl	10016520 <__aeabi_i2f>
100130ae:	1c31      	adds	r1, r6, #0
100130b0:	1c04      	adds	r4, r0, #0
100130b2:	1c30      	adds	r0, r6, #0
100130b4:	f002 ff60 	bl	10015f78 <__aeabi_fmul>
100130b8:	1c29      	adds	r1, r5, #0
100130ba:	1c06      	adds	r6, r0, #0
100130bc:	1c28      	adds	r0, r5, #0
100130be:	f002 ff5b 	bl	10015f78 <__aeabi_fmul>
100130c2:	1c01      	adds	r1, r0, #0
100130c4:	1c30      	adds	r0, r6, #0
100130c6:	f002 fc17 	bl	100158f8 <__aeabi_fadd>
100130ca:	1c21      	adds	r1, r4, #0
100130cc:	1c05      	adds	r5, r0, #0
100130ce:	1c20      	adds	r0, r4, #0
100130d0:	f002 ff52 	bl	10015f78 <__aeabi_fmul>
100130d4:	1c01      	adds	r1, r0, #0
100130d6:	1c28      	adds	r0, r5, #0
100130d8:	f002 fc0e 	bl	100158f8 <__aeabi_fadd>
100130dc:	f7fd fea0 	bl	10010e20 <sqrtf>
100130e0:	21de      	movs	r1, #222	; 0xde
100130e2:	0589      	lsls	r1, r1, #22
100130e4:	f002 ff48 	bl	10015f78 <__aeabi_fmul>
100130e8:	bd70      	pop	{r4, r5, r6, pc}
100130ea:	46c0      	nop			; (mov r8, r8)

100130ec <MagDisturbSetDisturbance>:
100130ec:	b570      	push	{r4, r5, r6, lr}
100130ee:	4c1d      	ldr	r4, [pc, #116]	; (10013164 <MagDisturbSetDisturbance+0x78>)
100130f0:	1c05      	adds	r5, r0, #0
100130f2:	1c0e      	adds	r6, r1, #0
100130f4:	6820      	ldr	r0, [r4, #0]
100130f6:	1c29      	adds	r1, r5, #0
100130f8:	f002 facc 	bl	10015694 <__aeabi_fcmplt>
100130fc:	2800      	cmp	r0, #0
100130fe:	d105      	bne.n	1001310c <MagDisturbSetDisturbance+0x20>
10013100:	1c28      	adds	r0, r5, #0
10013102:	6861      	ldr	r1, [r4, #4]
10013104:	f002 fac6 	bl	10015694 <__aeabi_fcmplt>
10013108:	2800      	cmp	r0, #0
1001310a:	d00f      	beq.n	1001312c <MagDisturbSetDisturbance+0x40>
1001310c:	6f63      	ldr	r3, [r4, #116]	; 0x74
1001310e:	2b00      	cmp	r3, #0
10013110:	d011      	beq.n	10013136 <MagDisturbSetDisturbance+0x4a>
10013112:	2301      	movs	r3, #1
10013114:	6763      	str	r3, [r4, #116]	; 0x74
10013116:	2300      	movs	r3, #0
10013118:	67a3      	str	r3, [r4, #120]	; 0x78
1001311a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1001311c:	429a      	cmp	r2, r3
1001311e:	dc04      	bgt.n	1001312a <MagDisturbSetDisturbance+0x3e>
10013120:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013122:	2b01      	cmp	r3, #1
10013124:	d00d      	beq.n	10013142 <MagDisturbSetDisturbance+0x56>
10013126:	2300      	movs	r3, #0
10013128:	6763      	str	r3, [r4, #116]	; 0x74
1001312a:	bd70      	pop	{r4, r5, r6, pc}
1001312c:	6923      	ldr	r3, [r4, #16]
1001312e:	2b01      	cmp	r3, #1
10013130:	d00a      	beq.n	10013148 <MagDisturbSetDisturbance+0x5c>
10013132:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10013134:	e7f1      	b.n	1001311a <MagDisturbSetDisturbance+0x2e>
10013136:	1c20      	adds	r0, r4, #0
10013138:	6da1      	ldr	r1, [r4, #88]	; 0x58
1001313a:	3018      	adds	r0, #24
1001313c:	f7f7 fdde 	bl	1000acfc <inv_set_compass_correction>
10013140:	e7e7      	b.n	10013112 <MagDisturbSetDisturbance+0x26>
10013142:	2300      	movs	r3, #0
10013144:	65e3      	str	r3, [r4, #92]	; 0x5c
10013146:	e7ee      	b.n	10013126 <MagDisturbSetDisturbance+0x3a>
10013148:	68e0      	ldr	r0, [r4, #12]
1001314a:	1c31      	adds	r1, r6, #0
1001314c:	f002 faa2 	bl	10015694 <__aeabi_fcmplt>
10013150:	2800      	cmp	r0, #0
10013152:	d1db      	bne.n	1001310c <MagDisturbSetDisturbance+0x20>
10013154:	1c30      	adds	r0, r6, #0
10013156:	68a1      	ldr	r1, [r4, #8]
10013158:	f002 fa9c 	bl	10015694 <__aeabi_fcmplt>
1001315c:	2800      	cmp	r0, #0
1001315e:	d1d5      	bne.n	1001310c <MagDisturbSetDisturbance+0x20>
10013160:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10013162:	e7da      	b.n	1001311a <MagDisturbSetDisturbance+0x2e>
10013164:	1001d74c 	.word	0x1001d74c

10013168 <MagDisturbCheckSettling>:
10013168:	b538      	push	{r3, r4, r5, lr}
1001316a:	1c05      	adds	r5, r0, #0
1001316c:	1c0c      	adds	r4, r1, #0
1001316e:	f7f7 fde9 	bl	1000ad44 <inv_get_acc_state>
10013172:	2800      	cmp	r0, #0
10013174:	d105      	bne.n	10013182 <MagDisturbCheckSettling+0x1a>
10013176:	1c28      	adds	r0, r5, #0
10013178:	490d      	ldr	r1, [pc, #52]	; (100131b0 <MagDisturbCheckSettling+0x48>)
1001317a:	f002 fa9f 	bl	100156bc <__aeabi_fcmpgt>
1001317e:	2800      	cmp	r0, #0
10013180:	d010      	beq.n	100131a4 <MagDisturbCheckSettling+0x3c>
10013182:	2200      	movs	r2, #0
10013184:	4b0b      	ldr	r3, [pc, #44]	; (100131b4 <MagDisturbCheckSettling+0x4c>)
10013186:	611a      	str	r2, [r3, #16]
10013188:	615a      	str	r2, [r3, #20]
1001318a:	695a      	ldr	r2, [r3, #20]
1001318c:	18a1      	adds	r1, r4, r2
1001318e:	22fa      	movs	r2, #250	; 0xfa
10013190:	6159      	str	r1, [r3, #20]
10013192:	0052      	lsls	r2, r2, #1
10013194:	4291      	cmp	r1, r2
10013196:	dd04      	ble.n	100131a2 <MagDisturbCheckSettling+0x3a>
10013198:	3af4      	subs	r2, #244	; 0xf4
1001319a:	3aff      	subs	r2, #255	; 0xff
1001319c:	611a      	str	r2, [r3, #16]
1001319e:	2200      	movs	r2, #0
100131a0:	615a      	str	r2, [r3, #20]
100131a2:	bd38      	pop	{r3, r4, r5, pc}
100131a4:	4b03      	ldr	r3, [pc, #12]	; (100131b4 <MagDisturbCheckSettling+0x4c>)
100131a6:	691a      	ldr	r2, [r3, #16]
100131a8:	2a00      	cmp	r2, #0
100131aa:	d1fa      	bne.n	100131a2 <MagDisturbCheckSettling+0x3a>
100131ac:	e7ed      	b.n	1001318a <MagDisturbCheckSettling+0x22>
100131ae:	46c0      	nop			; (mov r8, r8)
100131b0:	461c4000 	.word	0x461c4000
100131b4:	1001d74c 	.word	0x1001d74c

100131b8 <inv_check_magnetic_disturbance>:
100131b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100131ba:	465f      	mov	r7, fp
100131bc:	4644      	mov	r4, r8
100131be:	4656      	mov	r6, sl
100131c0:	464d      	mov	r5, r9
100131c2:	b4f0      	push	{r4, r5, r6, r7}
100131c4:	2400      	movs	r4, #0
100131c6:	2788      	movs	r7, #136	; 0x88
100131c8:	b08d      	sub	sp, #52	; 0x34
100131ca:	9406      	str	r4, [sp, #24]
100131cc:	9407      	str	r4, [sp, #28]
100131ce:	9408      	str	r4, [sp, #32]
100131d0:	4cb5      	ldr	r4, [pc, #724]	; (100134a8 <inv_check_magnetic_disturbance+0x2f0>)
100131d2:	59e7      	ldr	r7, [r4, r7]
100131d4:	2f00      	cmp	r7, #0
100131d6:	d107      	bne.n	100131e8 <inv_check_magnetic_disturbance+0x30>
100131d8:	2000      	movs	r0, #0
100131da:	b00d      	add	sp, #52	; 0x34
100131dc:	bc3c      	pop	{r2, r3, r4, r5}
100131de:	4690      	mov	r8, r2
100131e0:	4699      	mov	r9, r3
100131e2:	46a2      	mov	sl, r4
100131e4:	46ab      	mov	fp, r5
100131e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131e8:	4699      	mov	r9, r3
100131ea:	4690      	mov	r8, r2
100131ec:	9101      	str	r1, [sp, #4]
100131ee:	1c05      	adds	r5, r0, #0
100131f0:	f7f6 fe6a 	bl	10009ec8 <inv_get_gyro_on>
100131f4:	2800      	cmp	r0, #0
100131f6:	d000      	beq.n	100131fa <inv_check_magnetic_disturbance+0x42>
100131f8:	e120      	b.n	1001343c <inv_check_magnetic_disturbance+0x284>
100131fa:	2780      	movs	r7, #128	; 0x80
100131fc:	59e3      	ldr	r3, [r4, r7]
100131fe:	2b00      	cmp	r3, #0
10013200:	dd0f      	ble.n	10013222 <inv_check_magnetic_disturbance+0x6a>
10013202:	2201      	movs	r2, #1
10013204:	2384      	movs	r3, #132	; 0x84
10013206:	50e2      	str	r2, [r4, r3]
10013208:	f7f6 fe5e 	bl	10009ec8 <inv_get_gyro_on>
1001320c:	2800      	cmp	r0, #0
1001320e:	d000      	beq.n	10013212 <inv_check_magnetic_disturbance+0x5a>
10013210:	e0a9      	b.n	10013366 <inv_check_magnetic_disturbance+0x1ae>
10013212:	59e3      	ldr	r3, [r4, r7]
10013214:	1b5b      	subs	r3, r3, r5
10013216:	51e3      	str	r3, [r4, r7]
10013218:	2b00      	cmp	r3, #0
1001321a:	dc02      	bgt.n	10013222 <inv_check_magnetic_disturbance+0x6a>
1001321c:	2200      	movs	r2, #0
1001321e:	2384      	movs	r3, #132	; 0x84
10013220:	50e2      	str	r2, [r4, r3]
10013222:	f7f7 fe2d 	bl	1000ae80 <inv_got_compass_bias>
10013226:	2800      	cmp	r0, #0
10013228:	d0d6      	beq.n	100131d8 <inv_check_magnetic_disturbance+0x20>
1001322a:	2600      	movs	r6, #0
1001322c:	2700      	movs	r7, #0
1001322e:	4643      	mov	r3, r8
10013230:	59d8      	ldr	r0, [r3, r7]
10013232:	f003 f975 	bl	10016520 <__aeabi_i2f>
10013236:	21de      	movs	r1, #222	; 0xde
10013238:	0589      	lsls	r1, r1, #22
1001323a:	f002 fe9d 	bl	10015f78 <__aeabi_fmul>
1001323e:	464b      	mov	r3, r9
10013240:	4683      	mov	fp, r0
10013242:	59d8      	ldr	r0, [r3, r7]
10013244:	f003 f96c 	bl	10016520 <__aeabi_i2f>
10013248:	1c01      	adds	r1, r0, #0
1001324a:	4658      	mov	r0, fp
1001324c:	f002 fe94 	bl	10015f78 <__aeabi_fmul>
10013250:	21de      	movs	r1, #222	; 0xde
10013252:	0589      	lsls	r1, r1, #22
10013254:	f002 fe90 	bl	10015f78 <__aeabi_fmul>
10013258:	1c01      	adds	r1, r0, #0
1001325a:	1c30      	adds	r0, r6, #0
1001325c:	f002 fb4c 	bl	100158f8 <__aeabi_fadd>
10013260:	3704      	adds	r7, #4
10013262:	1c06      	adds	r6, r0, #0
10013264:	2f0c      	cmp	r7, #12
10013266:	d1e2      	bne.n	1001322e <inv_check_magnetic_disturbance+0x76>
10013268:	4640      	mov	r0, r8
1001326a:	f7ff ff13 	bl	10013094 <Mag3ofNormalizedLong>
1001326e:	9000      	str	r0, [sp, #0]
10013270:	9900      	ldr	r1, [sp, #0]
10013272:	1c30      	adds	r0, r6, #0
10013274:	f002 fcb6 	bl	10015be4 <__aeabi_fdiv>
10013278:	21fe      	movs	r1, #254	; 0xfe
1001327a:	0589      	lsls	r1, r1, #22
1001327c:	1c06      	adds	r6, r0, #0
1001327e:	f002 fa1d 	bl	100156bc <__aeabi_fcmpgt>
10013282:	2800      	cmp	r0, #0
10013284:	d067      	beq.n	10013356 <inv_check_magnetic_disturbance+0x19e>
10013286:	26fe      	movs	r6, #254	; 0xfe
10013288:	05b6      	lsls	r6, r6, #22
1001328a:	1c30      	adds	r0, r6, #0
1001328c:	f000 ff66 	bl	1001415c <acosf>
10013290:	238c      	movs	r3, #140	; 0x8c
10013292:	58e3      	ldr	r3, [r4, r3]
10013294:	4680      	mov	r8, r0
10013296:	2b00      	cmp	r3, #0
10013298:	d00c      	beq.n	100132b4 <inv_check_magnetic_disturbance+0xfc>
1001329a:	9800      	ldr	r0, [sp, #0]
1001329c:	6821      	ldr	r1, [r4, #0]
1001329e:	f002 f9f9 	bl	10015694 <__aeabi_fcmplt>
100132a2:	2800      	cmp	r0, #0
100132a4:	d006      	beq.n	100132b4 <inv_check_magnetic_disturbance+0xfc>
100132a6:	9800      	ldr	r0, [sp, #0]
100132a8:	6861      	ldr	r1, [r4, #4]
100132aa:	f002 fa07 	bl	100156bc <__aeabi_fcmpgt>
100132ae:	2800      	cmp	r0, #0
100132b0:	d000      	beq.n	100132b4 <inv_check_magnetic_disturbance+0xfc>
100132b2:	e0c7      	b.n	10013444 <inv_check_magnetic_disturbance+0x28c>
100132b4:	ae09      	add	r6, sp, #36	; 0x24
100132b6:	1c30      	adds	r0, r6, #0
100132b8:	f7f7 fd76 	bl	1000ada8 <inv_get_local_field>
100132bc:	1c21      	adds	r1, r4, #0
100132be:	1c30      	adds	r0, r6, #0
100132c0:	31ac      	adds	r1, #172	; 0xac
100132c2:	220c      	movs	r2, #12
100132c4:	f005 f99e 	bl	10018604 <memcmp>
100132c8:	2800      	cmp	r0, #0
100132ca:	d157      	bne.n	1001337c <inv_check_magnetic_disturbance+0x1c4>
100132cc:	2398      	movs	r3, #152	; 0x98
100132ce:	58e3      	ldr	r3, [r4, r3]
100132d0:	2b01      	cmp	r3, #1
100132d2:	d053      	beq.n	1001337c <inv_check_magnetic_disturbance+0x1c4>
100132d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
100132d6:	2b00      	cmp	r3, #0
100132d8:	d10e      	bne.n	100132f8 <inv_check_magnetic_disturbance+0x140>
100132da:	2301      	movs	r3, #1
100132dc:	65e3      	str	r3, [r4, #92]	; 0x5c
100132de:	3357      	adds	r3, #87	; 0x57
100132e0:	469a      	mov	sl, r3
100132e2:	2600      	movs	r6, #0
100132e4:	44a2      	add	sl, r4
100132e6:	1c30      	adds	r0, r6, #0
100132e8:	3018      	adds	r0, #24
100132ea:	1820      	adds	r0, r4, r0
100132ec:	4651      	mov	r1, sl
100132ee:	3610      	adds	r6, #16
100132f0:	f7f7 fd18 	bl	1000ad24 <inv_get_compass_correction>
100132f4:	2e40      	cmp	r6, #64	; 0x40
100132f6:	d1f6      	bne.n	100132e6 <inv_check_magnetic_disturbance+0x12e>
100132f8:	1c26      	adds	r6, r4, #0
100132fa:	9f01      	ldr	r7, [sp, #4]
100132fc:	3664      	adds	r6, #100	; 0x64
100132fe:	aa03      	add	r2, sp, #12
10013300:	1c38      	adds	r0, r7, #0
10013302:	1c31      	adds	r1, r6, #0
10013304:	f7ff fe88 	bl	10013018 <ComputeAngleVelocity>
10013308:	1c31      	adds	r1, r6, #0
1001330a:	1c38      	adds	r0, r7, #0
1001330c:	f7f7 f8f6 	bl	1000a4fc <inv_q_invert>
10013310:	a806      	add	r0, sp, #24
10013312:	f7f6 ffef 	bl	1000a2f4 <inv_get_gyro_sum_of_sqr>
10013316:	f003 f94b 	bl	100165b0 <__aeabi_ui2f>
1001331a:	21f2      	movs	r1, #242	; 0xf2
1001331c:	0589      	lsls	r1, r1, #22
1001331e:	f002 fe2b 	bl	10015f78 <__aeabi_fmul>
10013322:	1c29      	adds	r1, r5, #0
10013324:	f7ff ff20 	bl	10013168 <MagDisturbCheckSettling>
10013328:	9800      	ldr	r0, [sp, #0]
1001332a:	4641      	mov	r1, r8
1001332c:	f7ff fede 	bl	100130ec <MagDisturbSetDisturbance>
10013330:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10013332:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10013334:	4293      	cmp	r3, r2
10013336:	da01      	bge.n	1001333c <inv_check_magnetic_disturbance+0x184>
10013338:	18eb      	adds	r3, r5, r3
1001333a:	67a3      	str	r3, [r4, #120]	; 0x78
1001333c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1001333e:	2800      	cmp	r0, #0
10013340:	d000      	beq.n	10013344 <inv_check_magnetic_disturbance+0x18c>
10013342:	e74a      	b.n	100131da <inv_check_magnetic_disturbance+0x22>
10013344:	6e23      	ldr	r3, [r4, #96]	; 0x60
10013346:	469c      	mov	ip, r3
10013348:	23fa      	movs	r3, #250	; 0xfa
1001334a:	4465      	add	r5, ip
1001334c:	009b      	lsls	r3, r3, #2
1001334e:	429d      	cmp	r5, r3
10013350:	dc7e      	bgt.n	10013450 <inv_check_magnetic_disturbance+0x298>
10013352:	6625      	str	r5, [r4, #96]	; 0x60
10013354:	e741      	b.n	100131da <inv_check_magnetic_disturbance+0x22>
10013356:	1c30      	adds	r0, r6, #0
10013358:	4954      	ldr	r1, [pc, #336]	; (100134ac <inv_check_magnetic_disturbance+0x2f4>)
1001335a:	f002 f99b 	bl	10015694 <__aeabi_fcmplt>
1001335e:	2800      	cmp	r0, #0
10013360:	d093      	beq.n	1001328a <inv_check_magnetic_disturbance+0xd2>
10013362:	4e52      	ldr	r6, [pc, #328]	; (100134ac <inv_check_magnetic_disturbance+0x2f4>)
10013364:	e791      	b.n	1001328a <inv_check_magnetic_disturbance+0xd2>
10013366:	a806      	add	r0, sp, #24
10013368:	f7f6 ffc4 	bl	1000a2f4 <inv_get_gyro_sum_of_sqr>
1001336c:	2390      	movs	r3, #144	; 0x90
1001336e:	33ff      	adds	r3, #255	; 0xff
10013370:	0980      	lsrs	r0, r0, #6
10013372:	4298      	cmp	r0, r3
10013374:	d900      	bls.n	10013378 <inv_check_magnetic_disturbance+0x1c0>
10013376:	e74c      	b.n	10013212 <inv_check_magnetic_disturbance+0x5a>
10013378:	59e3      	ldr	r3, [r4, r7]
1001337a:	e74d      	b.n	10013218 <inv_check_magnetic_disturbance+0x60>
1001337c:	1c23      	adds	r3, r4, #0
1001337e:	1c32      	adds	r2, r6, #0
10013380:	33ac      	adds	r3, #172	; 0xac
10013382:	ca83      	ldmia	r2!, {r0, r1, r7}
10013384:	c383      	stmia	r3!, {r0, r1, r7}
10013386:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013388:	2b00      	cmp	r3, #0
1001338a:	d113      	bne.n	100133b4 <inv_check_magnetic_disturbance+0x1fc>
1001338c:	6873      	ldr	r3, [r6, #4]
1001338e:	2b00      	cmp	r3, #0
10013390:	d110      	bne.n	100133b4 <inv_check_magnetic_disturbance+0x1fc>
10013392:	68b3      	ldr	r3, [r6, #8]
10013394:	4699      	mov	r9, r3
10013396:	2b00      	cmp	r3, #0
10013398:	d10c      	bne.n	100133b4 <inv_check_magnetic_disturbance+0x1fc>
1001339a:	2698      	movs	r6, #152	; 0x98
1001339c:	4b44      	ldr	r3, [pc, #272]	; (100134b0 <inv_check_magnetic_disturbance+0x2f8>)
1001339e:	6023      	str	r3, [r4, #0]
100133a0:	4b44      	ldr	r3, [pc, #272]	; (100134b4 <inv_check_magnetic_disturbance+0x2fc>)
100133a2:	6063      	str	r3, [r4, #4]
100133a4:	59a3      	ldr	r3, [r4, r6]
100133a6:	2b01      	cmp	r3, #1
100133a8:	d06b      	beq.n	10013482 <inv_check_magnetic_disturbance+0x2ca>
100133aa:	4b43      	ldr	r3, [pc, #268]	; (100134b8 <inv_check_magnetic_disturbance+0x300>)
100133ac:	60a3      	str	r3, [r4, #8]
100133ae:	4b43      	ldr	r3, [pc, #268]	; (100134bc <inv_check_magnetic_disturbance+0x304>)
100133b0:	60e3      	str	r3, [r4, #12]
100133b2:	e78f      	b.n	100132d4 <inv_check_magnetic_disturbance+0x11c>
100133b4:	1c30      	adds	r0, r6, #0
100133b6:	f7ff fe6d 	bl	10013094 <Mag3ofNormalizedLong>
100133ba:	2100      	movs	r1, #0
100133bc:	4681      	mov	r9, r0
100133be:	f002 f963 	bl	10015688 <__aeabi_fcmpeq>
100133c2:	2800      	cmp	r0, #0
100133c4:	d186      	bne.n	100132d4 <inv_check_magnetic_disturbance+0x11c>
100133c6:	4648      	mov	r0, r9
100133c8:	493d      	ldr	r1, [pc, #244]	; (100134c0 <inv_check_magnetic_disturbance+0x308>)
100133ca:	f002 fee9 	bl	100161a0 <__aeabi_fsub>
100133ce:	1c01      	adds	r1, r0, #0
100133d0:	f002 fdd2 	bl	10015f78 <__aeabi_fmul>
100133d4:	f7fd fd24 	bl	10010e20 <sqrtf>
100133d8:	4939      	ldr	r1, [pc, #228]	; (100134c0 <inv_check_magnetic_disturbance+0x308>)
100133da:	6060      	str	r0, [r4, #4]
100133dc:	4648      	mov	r0, r9
100133de:	f002 fa8b 	bl	100158f8 <__aeabi_fadd>
100133e2:	1c01      	adds	r1, r0, #0
100133e4:	f002 fdc8 	bl	10015f78 <__aeabi_fmul>
100133e8:	f7fd fd1a 	bl	10010e20 <sqrtf>
100133ec:	6020      	str	r0, [r4, #0]
100133ee:	68b0      	ldr	r0, [r6, #8]
100133f0:	f003 f896 	bl	10016520 <__aeabi_i2f>
100133f4:	21de      	movs	r1, #222	; 0xde
100133f6:	0589      	lsls	r1, r1, #22
100133f8:	f002 fdbe 	bl	10015f78 <__aeabi_fmul>
100133fc:	4649      	mov	r1, r9
100133fe:	f002 fbf1 	bl	10015be4 <__aeabi_fdiv>
10013402:	21fe      	movs	r1, #254	; 0xfe
10013404:	0589      	lsls	r1, r1, #22
10013406:	4681      	mov	r9, r0
10013408:	f002 f958 	bl	100156bc <__aeabi_fcmpgt>
1001340c:	2800      	cmp	r0, #0
1001340e:	d02f      	beq.n	10013470 <inv_check_magnetic_disturbance+0x2b8>
10013410:	23fe      	movs	r3, #254	; 0xfe
10013412:	059b      	lsls	r3, r3, #22
10013414:	4699      	mov	r9, r3
10013416:	269c      	movs	r6, #156	; 0x9c
10013418:	4648      	mov	r0, r9
1001341a:	f000 fe9f 	bl	1001415c <acosf>
1001341e:	59a1      	ldr	r1, [r4, r6]
10013420:	f002 febe 	bl	100161a0 <__aeabi_fsub>
10013424:	60a0      	str	r0, [r4, #8]
10013426:	4648      	mov	r0, r9
10013428:	f000 fe98 	bl	1001415c <acosf>
1001342c:	59a1      	ldr	r1, [r4, r6]
1001342e:	f002 fa63 	bl	100158f8 <__aeabi_fadd>
10013432:	2200      	movs	r2, #0
10013434:	238c      	movs	r3, #140	; 0x8c
10013436:	60e0      	str	r0, [r4, #12]
10013438:	50e2      	str	r2, [r4, r3]
1001343a:	e74b      	b.n	100132d4 <inv_check_magnetic_disturbance+0x11c>
1001343c:	a806      	add	r0, sp, #24
1001343e:	f7f6 fed3 	bl	1000a1e8 <inv_get_gyro>
10013442:	e6da      	b.n	100131fa <inv_check_magnetic_disturbance+0x42>
10013444:	2390      	movs	r3, #144	; 0x90
10013446:	4641      	mov	r1, r8
10013448:	58e0      	ldr	r0, [r4, r3]
1001344a:	f7ff fd99 	bl	10012f80 <inv_track_dip_angle>
1001344e:	e731      	b.n	100132b4 <inv_check_magnetic_disturbance+0xfc>
10013450:	6620      	str	r0, [r4, #96]	; 0x60
10013452:	1c21      	adds	r1, r4, #0
10013454:	1c20      	adds	r0, r4, #0
10013456:	3128      	adds	r1, #40	; 0x28
10013458:	2230      	movs	r2, #48	; 0x30
1001345a:	3018      	adds	r0, #24
1001345c:	f005 f8ea 	bl	10018634 <memmove>
10013460:	1c20      	adds	r0, r4, #0
10013462:	1c21      	adds	r1, r4, #0
10013464:	3048      	adds	r0, #72	; 0x48
10013466:	3158      	adds	r1, #88	; 0x58
10013468:	f7f7 fc5c 	bl	1000ad24 <inv_get_compass_correction>
1001346c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1001346e:	e6b4      	b.n	100131da <inv_check_magnetic_disturbance+0x22>
10013470:	4648      	mov	r0, r9
10013472:	490e      	ldr	r1, [pc, #56]	; (100134ac <inv_check_magnetic_disturbance+0x2f4>)
10013474:	f002 f90e 	bl	10015694 <__aeabi_fcmplt>
10013478:	2800      	cmp	r0, #0
1001347a:	d0cc      	beq.n	10013416 <inv_check_magnetic_disturbance+0x25e>
1001347c:	4b0b      	ldr	r3, [pc, #44]	; (100134ac <inv_check_magnetic_disturbance+0x2f4>)
1001347e:	4699      	mov	r9, r3
10013480:	e7c9      	b.n	10013416 <inv_check_magnetic_disturbance+0x25e>
10013482:	33a7      	adds	r3, #167	; 0xa7
10013484:	58e3      	ldr	r3, [r4, r3]
10013486:	469b      	mov	fp, r3
10013488:	239c      	movs	r3, #156	; 0x9c
1001348a:	58e3      	ldr	r3, [r4, r3]
1001348c:	4658      	mov	r0, fp
1001348e:	1c19      	adds	r1, r3, #0
10013490:	469a      	mov	sl, r3
10013492:	f002 fe85 	bl	100161a0 <__aeabi_fsub>
10013496:	4651      	mov	r1, sl
10013498:	60a0      	str	r0, [r4, #8]
1001349a:	4658      	mov	r0, fp
1001349c:	f002 fa2c 	bl	100158f8 <__aeabi_fadd>
100134a0:	464b      	mov	r3, r9
100134a2:	60e0      	str	r0, [r4, #12]
100134a4:	51a3      	str	r3, [r4, r6]
100134a6:	e715      	b.n	100132d4 <inv_check_magnetic_disturbance+0x11c>
100134a8:	1001d74c 	.word	0x1001d74c
100134ac:	bf800000 	.word	0xbf800000
100134b0:	42700000 	.word	0x42700000
100134b4:	41f00000 	.word	0x41f00000
100134b8:	c2b40000 	.word	0xc2b40000
100134bc:	42b40000 	.word	0x42b40000
100134c0:	41200000 	.word	0x41200000

100134c4 <inv_magnetic_disturbance_process>:
100134c4:	b570      	push	{r4, r5, r6, lr}
100134c6:	b088      	sub	sp, #32
100134c8:	1c04      	adds	r4, r0, #0
100134ca:	a801      	add	r0, sp, #4
100134cc:	f7f7 fc78 	bl	1000adc0 <inv_get_gravity>
100134d0:	22c4      	movs	r2, #196	; 0xc4
100134d2:	23c0      	movs	r3, #192	; 0xc0
100134d4:	58a5      	ldr	r5, [r4, r2]
100134d6:	58e3      	ldr	r3, [r4, r3]
100134d8:	a804      	add	r0, sp, #16
100134da:	1b5d      	subs	r5, r3, r5
100134dc:	f7f7 fc9a 	bl	1000ae14 <inv_get_6axis_quaternion>
100134e0:	1c22      	adds	r2, r4, #0
100134e2:	1c06      	adds	r6, r0, #0
100134e4:	32a0      	adds	r2, #160	; 0xa0
100134e6:	a904      	add	r1, sp, #16
100134e8:	ab01      	add	r3, sp, #4
100134ea:	1c28      	adds	r0, r5, #0
100134ec:	f7ff fe64 	bl	100131b8 <inv_check_magnetic_disturbance>
100134f0:	f7f6 fd38 	bl	10009f64 <inv_set_compass_disturbance>
100134f4:	1c30      	adds	r0, r6, #0
100134f6:	b008      	add	sp, #32
100134f8:	bd70      	pop	{r4, r5, r6, pc}
100134fa:	46c0      	nop			; (mov r8, r8)

100134fc <inv_get_magnetic_disturbance_state>:
100134fc:	4b01      	ldr	r3, [pc, #4]	; (10013504 <inv_get_magnetic_disturbance_state+0x8>)
100134fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
10013500:	4770      	bx	lr
10013502:	46c0      	nop			; (mov r8, r8)
10013504:	1001d74c 	.word	0x1001d74c

10013508 <inv_normalize_quat>:
10013508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001350a:	464f      	mov	r7, r9
1001350c:	4646      	mov	r6, r8
1001350e:	1c04      	adds	r4, r0, #0
10013510:	b4c0      	push	{r6, r7}
10013512:	6800      	ldr	r0, [r0, #0]
10013514:	1c0d      	adds	r5, r1, #0
10013516:	f003 f803 	bl	10016520 <__aeabi_i2f>
1001351a:	4681      	mov	r9, r0
1001351c:	6860      	ldr	r0, [r4, #4]
1001351e:	f002 ffff 	bl	10016520 <__aeabi_i2f>
10013522:	4680      	mov	r8, r0
10013524:	68a0      	ldr	r0, [r4, #8]
10013526:	f002 fffb 	bl	10016520 <__aeabi_i2f>
1001352a:	1c07      	adds	r7, r0, #0
1001352c:	68e0      	ldr	r0, [r4, #12]
1001352e:	f002 fff7 	bl	10016520 <__aeabi_i2f>
10013532:	4649      	mov	r1, r9
10013534:	1c06      	adds	r6, r0, #0
10013536:	4648      	mov	r0, r9
10013538:	f002 fd1e 	bl	10015f78 <__aeabi_fmul>
1001353c:	4641      	mov	r1, r8
1001353e:	4681      	mov	r9, r0
10013540:	4640      	mov	r0, r8
10013542:	f002 fd19 	bl	10015f78 <__aeabi_fmul>
10013546:	1c01      	adds	r1, r0, #0
10013548:	4648      	mov	r0, r9
1001354a:	f002 f9d5 	bl	100158f8 <__aeabi_fadd>
1001354e:	1c39      	adds	r1, r7, #0
10013550:	4680      	mov	r8, r0
10013552:	1c38      	adds	r0, r7, #0
10013554:	f002 fd10 	bl	10015f78 <__aeabi_fmul>
10013558:	1c01      	adds	r1, r0, #0
1001355a:	4640      	mov	r0, r8
1001355c:	f002 f9cc 	bl	100158f8 <__aeabi_fadd>
10013560:	1c31      	adds	r1, r6, #0
10013562:	1c07      	adds	r7, r0, #0
10013564:	1c30      	adds	r0, r6, #0
10013566:	f002 fd07 	bl	10015f78 <__aeabi_fmul>
1001356a:	1c01      	adds	r1, r0, #0
1001356c:	1c38      	adds	r0, r7, #0
1001356e:	f002 f9c3 	bl	100158f8 <__aeabi_fadd>
10013572:	2100      	movs	r1, #0
10013574:	1c06      	adds	r6, r0, #0
10013576:	f002 f897 	bl	100156a8 <__aeabi_fcmple>
1001357a:	2800      	cmp	r0, #0
1001357c:	d134      	bne.n	100135e8 <inv_normalize_quat+0xe0>
1001357e:	1c30      	adds	r0, r6, #0
10013580:	f7fd fc4e 	bl	10010e20 <sqrtf>
10013584:	1c01      	adds	r1, r0, #0
10013586:	20fe      	movs	r0, #254	; 0xfe
10013588:	0580      	lsls	r0, r0, #22
1001358a:	f002 fb2b 	bl	10015be4 <__aeabi_fdiv>
1001358e:	219d      	movs	r1, #157	; 0x9d
10013590:	05c9      	lsls	r1, r1, #23
10013592:	f002 fcf1 	bl	10015f78 <__aeabi_fmul>
10013596:	1c06      	adds	r6, r0, #0
10013598:	6820      	ldr	r0, [r4, #0]
1001359a:	f002 ffc1 	bl	10016520 <__aeabi_i2f>
1001359e:	1c31      	adds	r1, r6, #0
100135a0:	f002 fcea 	bl	10015f78 <__aeabi_fmul>
100135a4:	f002 ff9a 	bl	100164dc <__aeabi_f2iz>
100135a8:	6028      	str	r0, [r5, #0]
100135aa:	6860      	ldr	r0, [r4, #4]
100135ac:	f002 ffb8 	bl	10016520 <__aeabi_i2f>
100135b0:	1c31      	adds	r1, r6, #0
100135b2:	f002 fce1 	bl	10015f78 <__aeabi_fmul>
100135b6:	f002 ff91 	bl	100164dc <__aeabi_f2iz>
100135ba:	6068      	str	r0, [r5, #4]
100135bc:	68a0      	ldr	r0, [r4, #8]
100135be:	f002 ffaf 	bl	10016520 <__aeabi_i2f>
100135c2:	1c31      	adds	r1, r6, #0
100135c4:	f002 fcd8 	bl	10015f78 <__aeabi_fmul>
100135c8:	f002 ff88 	bl	100164dc <__aeabi_f2iz>
100135cc:	60a8      	str	r0, [r5, #8]
100135ce:	68e0      	ldr	r0, [r4, #12]
100135d0:	f002 ffa6 	bl	10016520 <__aeabi_i2f>
100135d4:	1c31      	adds	r1, r6, #0
100135d6:	f002 fccf 	bl	10015f78 <__aeabi_fmul>
100135da:	f002 ff7f 	bl	100164dc <__aeabi_f2iz>
100135de:	60e8      	str	r0, [r5, #12]
100135e0:	bc0c      	pop	{r2, r3}
100135e2:	4690      	mov	r8, r2
100135e4:	4699      	mov	r9, r3
100135e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100135e8:	2380      	movs	r3, #128	; 0x80
100135ea:	05db      	lsls	r3, r3, #23
100135ec:	602b      	str	r3, [r5, #0]
100135ee:	2300      	movs	r3, #0
100135f0:	606b      	str	r3, [r5, #4]
100135f2:	60ab      	str	r3, [r5, #8]
100135f4:	60eb      	str	r3, [r5, #12]
100135f6:	e7f3      	b.n	100135e0 <inv_normalize_quat+0xd8>

100135f8 <inv_start_quaternion>:
100135f8:	b508      	push	{r3, lr}
100135fa:	4b08      	ldr	r3, [pc, #32]	; (1001361c <inv_start_quaternion+0x24>)
100135fc:	4908      	ldr	r1, [pc, #32]	; (10013620 <inv_start_quaternion+0x28>)
100135fe:	6818      	ldr	r0, [r3, #0]
10013600:	2208      	movs	r2, #8
10013602:	f004 ffff 	bl	10018604 <memcmp>
10013606:	1c03      	adds	r3, r0, #0
10013608:	2032      	movs	r0, #50	; 0x32
1001360a:	2b00      	cmp	r3, #0
1001360c:	d000      	beq.n	10013610 <inv_start_quaternion+0x18>
1001360e:	bd08      	pop	{r3, pc}
10013610:	21c8      	movs	r1, #200	; 0xc8
10013612:	2213      	movs	r2, #19
10013614:	4803      	ldr	r0, [pc, #12]	; (10013624 <inv_start_quaternion+0x2c>)
10013616:	f7f6 fd15 	bl	1000a044 <inv_register_data_cb>
1001361a:	e7f8      	b.n	1001360e <inv_start_quaternion+0x16>
1001361c:	1001b958 	.word	0x1001b958
10013620:	1001b2dc 	.word	0x1001b2dc
10013624:	10013f99 	.word	0x10013f99

10013628 <inv_generate_gyro_quaternion.part.1>:
10013628:	b570      	push	{r4, r5, r6, lr}
1001362a:	6986      	ldr	r6, [r0, #24]
1001362c:	b08a      	sub	sp, #40	; 0x28
1001362e:	17f3      	asrs	r3, r6, #31
10013630:	18f2      	adds	r2, r6, r3
10013632:	405a      	eors	r2, r3
10013634:	4b42      	ldr	r3, [pc, #264]	; (10013740 <inv_generate_gyro_quaternion.part.1+0x118>)
10013636:	429a      	cmp	r2, r3
10013638:	dc5b      	bgt.n	100136f2 <inv_generate_gyro_quaternion.part.1+0xca>
1001363a:	69c2      	ldr	r2, [r0, #28]
1001363c:	17d1      	asrs	r1, r2, #31
1001363e:	1852      	adds	r2, r2, r1
10013640:	404a      	eors	r2, r1
10013642:	429a      	cmp	r2, r3
10013644:	dd5e      	ble.n	10013704 <inv_generate_gyro_quaternion.part.1+0xdc>
10013646:	23c8      	movs	r3, #200	; 0xc8
10013648:	03db      	lsls	r3, r3, #15
1001364a:	429a      	cmp	r2, r3
1001364c:	dc00      	bgt.n	10013650 <inv_generate_gyro_quaternion.part.1+0x28>
1001364e:	e074      	b.n	1001373a <inv_generate_gyro_quaternion.part.1+0x112>
10013650:	2303      	movs	r3, #3
10013652:	4c3c      	ldr	r4, [pc, #240]	; (10013744 <inv_generate_gyro_quaternion.part.1+0x11c>)
10013654:	1c05      	adds	r5, r0, #0
10013656:	63a3      	str	r3, [r4, #56]	; 0x38
10013658:	6a80      	ldr	r0, [r0, #40]	; 0x28
1001365a:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001365c:	4283      	cmp	r3, r0
1001365e:	d066      	beq.n	1001372e <inv_generate_gyro_quaternion.part.1+0x106>
10013660:	6360      	str	r0, [r4, #52]	; 0x34
10013662:	f002 ff5d 	bl	10016520 <__aeabi_i2f>
10013666:	4938      	ldr	r1, [pc, #224]	; (10013748 <inv_generate_gyro_quaternion.part.1+0x120>)
10013668:	f002 fabc 	bl	10015be4 <__aeabi_fdiv>
1001366c:	219c      	movs	r1, #156	; 0x9c
1001366e:	05c9      	lsls	r1, r1, #23
10013670:	f002 fc82 	bl	10015f78 <__aeabi_fmul>
10013674:	f004 fda8 	bl	100181c8 <__aeabi_f2d>
10013678:	4a34      	ldr	r2, [pc, #208]	; (1001374c <inv_generate_gyro_quaternion.part.1+0x124>)
1001367a:	4b35      	ldr	r3, [pc, #212]	; (10013750 <inv_generate_gyro_quaternion.part.1+0x128>)
1001367c:	f003 ff26 	bl	100174cc <__aeabi_dmul>
10013680:	2200      	movs	r2, #0
10013682:	4b34      	ldr	r3, [pc, #208]	; (10013754 <inv_generate_gyro_quaternion.part.1+0x12c>)
10013684:	f003 ff22 	bl	100174cc <__aeabi_dmul>
10013688:	2200      	movs	r2, #0
1001368a:	4b33      	ldr	r3, [pc, #204]	; (10013758 <inv_generate_gyro_quaternion.part.1+0x130>)
1001368c:	f003 fafa 	bl	10016c84 <__aeabi_ddiv>
10013690:	f004 fcea 	bl	10018068 <__aeabi_d2iz>
10013694:	1c01      	adds	r1, r0, #0
10013696:	6320      	str	r0, [r4, #48]	; 0x30
10013698:	2300      	movs	r3, #0
1001369a:	1c30      	adds	r0, r6, #0
1001369c:	9302      	str	r3, [sp, #8]
1001369e:	f7f6 fe41 	bl	1000a324 <inv_q30_mult>
100136a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
100136a4:	9003      	str	r0, [sp, #12]
100136a6:	69e8      	ldr	r0, [r5, #28]
100136a8:	f7f6 fe3c 	bl	1000a324 <inv_q30_mult>
100136ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
100136ae:	9004      	str	r0, [sp, #16]
100136b0:	6a28      	ldr	r0, [r5, #32]
100136b2:	f7f6 fe37 	bl	1000a324 <inv_q30_mult>
100136b6:	a902      	add	r1, sp, #8
100136b8:	9005      	str	r0, [sp, #20]
100136ba:	aa06      	add	r2, sp, #24
100136bc:	1c20      	adds	r0, r4, #0
100136be:	f7f6 fe3d 	bl	1000a33c <inv_q_mult>
100136c2:	9b06      	ldr	r3, [sp, #24]
100136c4:	1c20      	adds	r0, r4, #0
100136c6:	019b      	lsls	r3, r3, #6
100136c8:	9306      	str	r3, [sp, #24]
100136ca:	9b07      	ldr	r3, [sp, #28]
100136cc:	a906      	add	r1, sp, #24
100136ce:	019b      	lsls	r3, r3, #6
100136d0:	9307      	str	r3, [sp, #28]
100136d2:	9b08      	ldr	r3, [sp, #32]
100136d4:	1c22      	adds	r2, r4, #0
100136d6:	019b      	lsls	r3, r3, #6
100136d8:	9308      	str	r3, [sp, #32]
100136da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100136dc:	9301      	str	r3, [sp, #4]
100136de:	019b      	lsls	r3, r3, #6
100136e0:	9309      	str	r3, [sp, #36]	; 0x24
100136e2:	f7f6 fef3 	bl	1000a4cc <inv_q_add>
100136e6:	1c20      	adds	r0, r4, #0
100136e8:	1c21      	adds	r1, r4, #0
100136ea:	f7ff ff0d 	bl	10013508 <inv_normalize_quat>
100136ee:	b00a      	add	sp, #40	; 0x28
100136f0:	bd70      	pop	{r4, r5, r6, pc}
100136f2:	23c8      	movs	r3, #200	; 0xc8
100136f4:	03db      	lsls	r3, r3, #15
100136f6:	429a      	cmp	r2, r3
100136f8:	dcaa      	bgt.n	10013650 <inv_generate_gyro_quaternion.part.1+0x28>
100136fa:	69c3      	ldr	r3, [r0, #28]
100136fc:	17d9      	asrs	r1, r3, #31
100136fe:	185a      	adds	r2, r3, r1
10013700:	404a      	eors	r2, r1
10013702:	e7a0      	b.n	10013646 <inv_generate_gyro_quaternion.part.1+0x1e>
10013704:	6a02      	ldr	r2, [r0, #32]
10013706:	17d4      	asrs	r4, r2, #31
10013708:	1911      	adds	r1, r2, r4
1001370a:	4061      	eors	r1, r4
1001370c:	4299      	cmp	r1, r3
1001370e:	dd10      	ble.n	10013732 <inv_generate_gyro_quaternion.part.1+0x10a>
10013710:	17d3      	asrs	r3, r2, #31
10013712:	18d2      	adds	r2, r2, r3
10013714:	405a      	eors	r2, r3
10013716:	23c8      	movs	r3, #200	; 0xc8
10013718:	03db      	lsls	r3, r3, #15
1001371a:	429a      	cmp	r2, r3
1001371c:	dc98      	bgt.n	10013650 <inv_generate_gyro_quaternion.part.1+0x28>
1001371e:	2302      	movs	r3, #2
10013720:	4c08      	ldr	r4, [pc, #32]	; (10013744 <inv_generate_gyro_quaternion.part.1+0x11c>)
10013722:	1c05      	adds	r5, r0, #0
10013724:	63a3      	str	r3, [r4, #56]	; 0x38
10013726:	6a80      	ldr	r0, [r0, #40]	; 0x28
10013728:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001372a:	4283      	cmp	r3, r0
1001372c:	d198      	bne.n	10013660 <inv_generate_gyro_quaternion.part.1+0x38>
1001372e:	6b21      	ldr	r1, [r4, #48]	; 0x30
10013730:	e7b2      	b.n	10013698 <inv_generate_gyro_quaternion.part.1+0x70>
10013732:	2200      	movs	r2, #0
10013734:	4b03      	ldr	r3, [pc, #12]	; (10013744 <inv_generate_gyro_quaternion.part.1+0x11c>)
10013736:	639a      	str	r2, [r3, #56]	; 0x38
10013738:	e7d9      	b.n	100136ee <inv_generate_gyro_quaternion.part.1+0xc6>
1001373a:	6a02      	ldr	r2, [r0, #32]
1001373c:	e7e8      	b.n	10013710 <inv_generate_gyro_quaternion.part.1+0xe8>
1001373e:	46c0      	nop			; (mov r8, r8)
10013740:	0000ffff 	.word	0x0000ffff
10013744:	1001d804 	.word	0x1001d804
10013748:	49742400 	.word	0x49742400
1001374c:	54442d18 	.word	0x54442d18
10013750:	400921fb 	.word	0x400921fb
10013754:	40700000 	.word	0x40700000
10013758:	40668000 	.word	0x40668000

1001375c <inv_generate_gyro_quaternion>:
1001375c:	b508      	push	{r3, lr}
1001375e:	6b03      	ldr	r3, [r0, #48]	; 0x30
10013760:	065b      	lsls	r3, r3, #25
10013762:	d501      	bpl.n	10013768 <inv_generate_gyro_quaternion+0xc>
10013764:	f7ff ff60 	bl	10013628 <inv_generate_gyro_quaternion.part.1>
10013768:	bd08      	pop	{r3, pc}
1001376a:	46c0      	nop			; (mov r8, r8)

1001376c <inv_set_quaternion>:
1001376c:	b530      	push	{r4, r5, lr}
1001376e:	4c0a      	ldr	r4, [pc, #40]	; (10013798 <inv_set_quaternion+0x2c>)
10013770:	b085      	sub	sp, #20
10013772:	1c05      	adds	r5, r0, #0
10013774:	4669      	mov	r1, sp
10013776:	1c20      	adds	r0, r4, #0
10013778:	f7f6 fec0 	bl	1000a4fc <inv_q_invert>
1001377c:	1c22      	adds	r2, r4, #0
1001377e:	1c28      	adds	r0, r5, #0
10013780:	4669      	mov	r1, sp
10013782:	3220      	adds	r2, #32
10013784:	f7f6 fdda 	bl	1000a33c <inv_q_mult>
10013788:	1c20      	adds	r0, r4, #0
1001378a:	1c29      	adds	r1, r5, #0
1001378c:	2210      	movs	r2, #16
1001378e:	3010      	adds	r0, #16
10013790:	f004 ff47 	bl	10018622 <memcpy>
10013794:	b005      	add	sp, #20
10013796:	bd30      	pop	{r4, r5, pc}
10013798:	1001d804 	.word	0x1001d804

1001379c <inv_generate_accel_gyro_quaternion>:
1001379c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001379e:	4644      	mov	r4, r8
100137a0:	465f      	mov	r7, fp
100137a2:	4656      	mov	r6, sl
100137a4:	464d      	mov	r5, r9
100137a6:	2250      	movs	r2, #80	; 0x50
100137a8:	b4f0      	push	{r4, r5, r6, r7}
100137aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
100137ac:	b09f      	sub	sp, #124	; 0x7c
100137ae:	1c04      	adds	r4, r0, #0
100137b0:	4013      	ands	r3, r2
100137b2:	2b40      	cmp	r3, #64	; 0x40
100137b4:	d100      	bne.n	100137b8 <inv_generate_accel_gyro_quaternion+0x1c>
100137b6:	e2c1      	b.n	10013d3c <inv_generate_accel_gyro_quaternion+0x5a0>
100137b8:	2690      	movs	r6, #144	; 0x90
100137ba:	0076      	lsls	r6, r6, #1
100137bc:	5983      	ldr	r3, [r0, r6]
100137be:	4dc2      	ldr	r5, [pc, #776]	; (10013ac8 <inv_generate_accel_gyro_quaternion+0x32c>)
100137c0:	401a      	ands	r2, r3
100137c2:	2a40      	cmp	r2, #64	; 0x40
100137c4:	d100      	bne.n	100137c8 <inv_generate_accel_gyro_quaternion+0x2c>
100137c6:	e389      	b.n	10013edc <inv_generate_accel_gyro_quaternion+0x740>
100137c8:	05da      	lsls	r2, r3, #23
100137ca:	d500      	bpl.n	100137ce <inv_generate_accel_gyro_quaternion+0x32>
100137cc:	e18c      	b.n	10013ae8 <inv_generate_accel_gyro_quaternion+0x34c>
100137ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
100137d0:	065b      	lsls	r3, r3, #25
100137d2:	d500      	bpl.n	100137d6 <inv_generate_accel_gyro_quaternion+0x3a>
100137d4:	e268      	b.n	10013ca8 <inv_generate_accel_gyro_quaternion+0x50c>
100137d6:	1c2f      	adds	r7, r5, #0
100137d8:	1c28      	adds	r0, r5, #0
100137da:	3710      	adds	r7, #16
100137dc:	3020      	adds	r0, #32
100137de:	1c29      	adds	r1, r5, #0
100137e0:	1c3a      	adds	r2, r7, #0
100137e2:	f7f6 fdab 	bl	1000a33c <inv_q_mult>
100137e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
100137e8:	065b      	lsls	r3, r3, #25
100137ea:	d572      	bpl.n	100138d2 <inv_generate_accel_gyro_quaternion+0x136>
100137ec:	2390      	movs	r3, #144	; 0x90
100137ee:	005b      	lsls	r3, r3, #1
100137f0:	58e3      	ldr	r3, [r4, r3]
100137f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
100137f4:	4313      	orrs	r3, r2
100137f6:	05db      	lsls	r3, r3, #23
100137f8:	d400      	bmi.n	100137fc <inv_generate_accel_gyro_quaternion+0x60>
100137fa:	e072      	b.n	100138e2 <inv_generate_accel_gyro_quaternion+0x146>
100137fc:	1c21      	adds	r1, r4, #0
100137fe:	ae12      	add	r6, sp, #72	; 0x48
10013800:	1c38      	adds	r0, r7, #0
10013802:	315c      	adds	r1, #92	; 0x5c
10013804:	1c32      	adds	r2, r6, #0
10013806:	f7f6 ff1f 	bl	1000a648 <inv_q_rotate>
1001380a:	6e22      	ldr	r2, [r4, #96]	; 0x60
1001380c:	6e67      	ldr	r7, [r4, #100]	; 0x64
1001380e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10013810:	4690      	mov	r8, r2
10013812:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013814:	17d2      	asrs	r2, r2, #31
10013816:	17db      	asrs	r3, r3, #31
10013818:	4692      	mov	sl, r2
1001381a:	17fa      	asrs	r2, r7, #31
1001381c:	4691      	mov	r9, r2
1001381e:	1c19      	adds	r1, r3, #0
10013820:	1c02      	adds	r2, r0, #0
10013822:	f001 ff83 	bl	1001572c <__aeabi_lmul>
10013826:	4642      	mov	r2, r8
10013828:	9000      	str	r0, [sp, #0]
1001382a:	9101      	str	r1, [sp, #4]
1001382c:	4653      	mov	r3, sl
1001382e:	4640      	mov	r0, r8
10013830:	4651      	mov	r1, sl
10013832:	f001 ff7b 	bl	1001572c <__aeabi_lmul>
10013836:	9a00      	ldr	r2, [sp, #0]
10013838:	9b01      	ldr	r3, [sp, #4]
1001383a:	1812      	adds	r2, r2, r0
1001383c:	414b      	adcs	r3, r1
1001383e:	1c38      	adds	r0, r7, #0
10013840:	9200      	str	r2, [sp, #0]
10013842:	9301      	str	r3, [sp, #4]
10013844:	4649      	mov	r1, r9
10013846:	1c3a      	adds	r2, r7, #0
10013848:	464b      	mov	r3, r9
1001384a:	f001 ff6f 	bl	1001572c <__aeabi_lmul>
1001384e:	9a00      	ldr	r2, [sp, #0]
10013850:	9b01      	ldr	r3, [sp, #4]
10013852:	1880      	adds	r0, r0, r2
10013854:	4159      	adcs	r1, r3
10013856:	2902      	cmp	r1, #2
10013858:	dd00      	ble.n	1001385c <inv_generate_accel_gyro_quaternion+0xc0>
1001385a:	e22d      	b.n	10013cb8 <inv_generate_accel_gyro_quaternion+0x51c>
1001385c:	d100      	bne.n	10013860 <inv_generate_accel_gyro_quaternion+0xc4>
1001385e:	e227      	b.n	10013cb0 <inv_generate_accel_gyro_quaternion+0x514>
10013860:	6baf      	ldr	r7, [r5, #56]	; 0x38
10013862:	2f04      	cmp	r7, #4
10013864:	d100      	bne.n	10013868 <inv_generate_accel_gyro_quaternion+0xcc>
10013866:	e25a      	b.n	10013d1e <inv_generate_accel_gyro_quaternion+0x582>
10013868:	1ebb      	subs	r3, r7, #2
1001386a:	2b01      	cmp	r3, #1
1001386c:	d800      	bhi.n	10013870 <inv_generate_accel_gyro_quaternion+0xd4>
1001386e:	e258      	b.n	10013d22 <inv_generate_accel_gyro_quaternion+0x586>
10013870:	2001      	movs	r0, #1
10013872:	2f01      	cmp	r7, #1
10013874:	d100      	bne.n	10013878 <inv_generate_accel_gyro_quaternion+0xdc>
10013876:	e36a      	b.n	10013f4e <inv_generate_accel_gyro_quaternion+0x7b2>
10013878:	0084      	lsls	r4, r0, #2
1001387a:	4894      	ldr	r0, [pc, #592]	; (10013acc <inv_generate_accel_gyro_quaternion+0x330>)
1001387c:	4344      	muls	r4, r0
1001387e:	2700      	movs	r7, #0
10013880:	6870      	ldr	r0, [r6, #4]
10013882:	1c21      	adds	r1, r4, #0
10013884:	0280      	lsls	r0, r0, #10
10013886:	9716      	str	r7, [sp, #88]	; 0x58
10013888:	f7f6 fd4c 	bl	1000a324 <inv_q30_mult>
1001388c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001388e:	9017      	str	r0, [sp, #92]	; 0x5c
10013890:	4258      	negs	r0, r3
10013892:	1c21      	adds	r1, r4, #0
10013894:	0280      	lsls	r0, r0, #10
10013896:	1c2c      	adds	r4, r5, #0
10013898:	f7f6 fd44 	bl	1000a324 <inv_q30_mult>
1001389c:	3410      	adds	r4, #16
1001389e:	9018      	str	r0, [sp, #96]	; 0x60
100138a0:	1c21      	adds	r1, r4, #0
100138a2:	a816      	add	r0, sp, #88	; 0x58
100138a4:	aa1a      	add	r2, sp, #104	; 0x68
100138a6:	9719      	str	r7, [sp, #100]	; 0x64
100138a8:	f7f6 fd48 	bl	1000a33c <inv_q_mult>
100138ac:	1c22      	adds	r2, r4, #0
100138ae:	1c20      	adds	r0, r4, #0
100138b0:	a91a      	add	r1, sp, #104	; 0x68
100138b2:	f7f6 fe0b 	bl	1000a4cc <inv_q_add>
100138b6:	1c20      	adds	r0, r4, #0
100138b8:	1c21      	adds	r1, r4, #0
100138ba:	f7ff fe25 	bl	10013508 <inv_normalize_quat>
100138be:	1c28      	adds	r0, r5, #0
100138c0:	a902      	add	r1, sp, #8
100138c2:	f7f6 fe1b 	bl	1000a4fc <inv_q_invert>
100138c6:	1c2a      	adds	r2, r5, #0
100138c8:	1c20      	adds	r0, r4, #0
100138ca:	3220      	adds	r2, #32
100138cc:	a902      	add	r1, sp, #8
100138ce:	f7f6 fd35 	bl	1000a33c <inv_q_mult>
100138d2:	2000      	movs	r0, #0
100138d4:	b01f      	add	sp, #124	; 0x7c
100138d6:	bc3c      	pop	{r2, r3, r4, r5}
100138d8:	4690      	mov	r8, r2
100138da:	4699      	mov	r9, r3
100138dc:	46a2      	mov	sl, r4
100138de:	46ab      	mov	fp, r5
100138e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100138e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
100138e4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100138e6:	4698      	mov	r8, r3
100138e8:	f002 fe1a 	bl	10016520 <__aeabi_i2f>
100138ec:	4681      	mov	r9, r0
100138ee:	6e20      	ldr	r0, [r4, #96]	; 0x60
100138f0:	f002 fe16 	bl	10016520 <__aeabi_i2f>
100138f4:	1c07      	adds	r7, r0, #0
100138f6:	6e60      	ldr	r0, [r4, #100]	; 0x64
100138f8:	f002 fe12 	bl	10016520 <__aeabi_i2f>
100138fc:	4649      	mov	r1, r9
100138fe:	1c06      	adds	r6, r0, #0
10013900:	4648      	mov	r0, r9
10013902:	f002 fb39 	bl	10015f78 <__aeabi_fmul>
10013906:	1c39      	adds	r1, r7, #0
10013908:	4681      	mov	r9, r0
1001390a:	1c38      	adds	r0, r7, #0
1001390c:	f002 fb34 	bl	10015f78 <__aeabi_fmul>
10013910:	1c01      	adds	r1, r0, #0
10013912:	4648      	mov	r0, r9
10013914:	f001 fff0 	bl	100158f8 <__aeabi_fadd>
10013918:	1c31      	adds	r1, r6, #0
1001391a:	1c07      	adds	r7, r0, #0
1001391c:	1c30      	adds	r0, r6, #0
1001391e:	f002 fb2b 	bl	10015f78 <__aeabi_fmul>
10013922:	1c01      	adds	r1, r0, #0
10013924:	1c38      	adds	r0, r7, #0
10013926:	f001 ffe7 	bl	100158f8 <__aeabi_fadd>
1001392a:	f7fd fa79 	bl	10010e20 <sqrtf>
1001392e:	218d      	movs	r1, #141	; 0x8d
10013930:	1c06      	adds	r6, r0, #0
10013932:	0040      	lsls	r0, r0, #1
10013934:	0840      	lsrs	r0, r0, #1
10013936:	05c9      	lsls	r1, r1, #23
10013938:	f001 fec0 	bl	100156bc <__aeabi_fcmpgt>
1001393c:	2800      	cmp	r0, #0
1001393e:	d100      	bne.n	10013942 <inv_generate_accel_gyro_quaternion+0x1a6>
10013940:	e0b5      	b.n	10013aae <inv_generate_accel_gyro_quaternion+0x312>
10013942:	6928      	ldr	r0, [r5, #16]
10013944:	f002 fdec 	bl	10016520 <__aeabi_i2f>
10013948:	21c2      	movs	r1, #194	; 0xc2
1001394a:	0589      	lsls	r1, r1, #22
1001394c:	f002 fb14 	bl	10015f78 <__aeabi_fmul>
10013950:	901a      	str	r0, [sp, #104]	; 0x68
10013952:	6968      	ldr	r0, [r5, #20]
10013954:	f002 fde4 	bl	10016520 <__aeabi_i2f>
10013958:	21c2      	movs	r1, #194	; 0xc2
1001395a:	0589      	lsls	r1, r1, #22
1001395c:	f002 fb0c 	bl	10015f78 <__aeabi_fmul>
10013960:	af1a      	add	r7, sp, #104	; 0x68
10013962:	6078      	str	r0, [r7, #4]
10013964:	69a8      	ldr	r0, [r5, #24]
10013966:	f002 fddb 	bl	10016520 <__aeabi_i2f>
1001396a:	21c2      	movs	r1, #194	; 0xc2
1001396c:	0589      	lsls	r1, r1, #22
1001396e:	f002 fb03 	bl	10015f78 <__aeabi_fmul>
10013972:	60b8      	str	r0, [r7, #8]
10013974:	69e8      	ldr	r0, [r5, #28]
10013976:	f002 fdd3 	bl	10016520 <__aeabi_i2f>
1001397a:	21c2      	movs	r1, #194	; 0xc2
1001397c:	0589      	lsls	r1, r1, #22
1001397e:	f002 fafb 	bl	10015f78 <__aeabi_fmul>
10013982:	2300      	movs	r3, #0
10013984:	60f8      	str	r0, [r7, #12]
10013986:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013988:	9316      	str	r3, [sp, #88]	; 0x58
1001398a:	f002 fdc9 	bl	10016520 <__aeabi_i2f>
1001398e:	1c31      	adds	r1, r6, #0
10013990:	f002 f928 	bl	10015be4 <__aeabi_fdiv>
10013994:	9017      	str	r0, [sp, #92]	; 0x5c
10013996:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013998:	f002 fdc2 	bl	10016520 <__aeabi_i2f>
1001399c:	1c31      	adds	r1, r6, #0
1001399e:	f002 f921 	bl	10015be4 <__aeabi_fdiv>
100139a2:	9018      	str	r0, [sp, #96]	; 0x60
100139a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
100139a6:	f002 fdbb 	bl	10016520 <__aeabi_i2f>
100139aa:	1c31      	adds	r1, r6, #0
100139ac:	f002 f91a 	bl	10015be4 <__aeabi_fdiv>
100139b0:	aa06      	add	r2, sp, #24
100139b2:	9019      	str	r0, [sp, #100]	; 0x64
100139b4:	a916      	add	r1, sp, #88	; 0x58
100139b6:	1c38      	adds	r0, r7, #0
100139b8:	f7f6 fe6a 	bl	1000a690 <inv_q_multf>
100139bc:	1c38      	adds	r0, r7, #0
100139be:	a90e      	add	r1, sp, #56	; 0x38
100139c0:	f7f6 fff6 	bl	1000a9b0 <inv_q_invertf>
100139c4:	aa0a      	add	r2, sp, #40	; 0x28
100139c6:	a806      	add	r0, sp, #24
100139c8:	a90e      	add	r1, sp, #56	; 0x38
100139ca:	f7f6 fe61 	bl	1000a690 <inv_q_multf>
100139ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100139d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100139d2:	1c31      	adds	r1, r6, #0
100139d4:	1c30      	adds	r0, r6, #0
100139d6:	f002 facf 	bl	10015f78 <__aeabi_fmul>
100139da:	1c21      	adds	r1, r4, #0
100139dc:	4681      	mov	r9, r0
100139de:	1c20      	adds	r0, r4, #0
100139e0:	f002 faca 	bl	10015f78 <__aeabi_fmul>
100139e4:	1c01      	adds	r1, r0, #0
100139e6:	4648      	mov	r0, r9
100139e8:	f001 ff86 	bl	100158f8 <__aeabi_fadd>
100139ec:	4938      	ldr	r1, [pc, #224]	; (10013ad0 <inv_generate_accel_gyro_quaternion+0x334>)
100139ee:	4681      	mov	r9, r0
100139f0:	f001 fe50 	bl	10015694 <__aeabi_fcmplt>
100139f4:	2800      	cmp	r0, #0
100139f6:	d110      	bne.n	10013a1a <inv_generate_accel_gyro_quaternion+0x27e>
100139f8:	4648      	mov	r0, r9
100139fa:	4936      	ldr	r1, [pc, #216]	; (10013ad4 <inv_generate_accel_gyro_quaternion+0x338>)
100139fc:	f001 fe4a 	bl	10015694 <__aeabi_fcmplt>
10013a00:	2800      	cmp	r0, #0
10013a02:	d000      	beq.n	10013a06 <inv_generate_accel_gyro_quaternion+0x26a>
10013a04:	e2b5      	b.n	10013f72 <inv_generate_accel_gyro_quaternion+0x7d6>
10013a06:	4648      	mov	r0, r9
10013a08:	4933      	ldr	r1, [pc, #204]	; (10013ad8 <inv_generate_accel_gyro_quaternion+0x33c>)
10013a0a:	f001 fe43 	bl	10015694 <__aeabi_fcmplt>
10013a0e:	2800      	cmp	r0, #0
10013a10:	d000      	beq.n	10013a14 <inv_generate_accel_gyro_quaternion+0x278>
10013a12:	e28d      	b.n	10013f30 <inv_generate_accel_gyro_quaternion+0x794>
10013a14:	4b31      	ldr	r3, [pc, #196]	; (10013adc <inv_generate_accel_gyro_quaternion+0x340>)
10013a16:	4699      	mov	r9, r3
10013a18:	e001      	b.n	10013a1e <inv_generate_accel_gyro_quaternion+0x282>
10013a1a:	4b31      	ldr	r3, [pc, #196]	; (10013ae0 <inv_generate_accel_gyro_quaternion+0x344>)
10013a1c:	4699      	mov	r9, r3
10013a1e:	4640      	mov	r0, r8
10013a20:	f002 fd7e 	bl	10016520 <__aeabi_i2f>
10013a24:	492f      	ldr	r1, [pc, #188]	; (10013ae4 <inv_generate_accel_gyro_quaternion+0x348>)
10013a26:	f002 f8dd 	bl	10015be4 <__aeabi_fdiv>
10013a2a:	4649      	mov	r1, r9
10013a2c:	f002 faa4 	bl	10015f78 <__aeabi_fmul>
10013a30:	4681      	mov	r9, r0
10013a32:	2300      	movs	r3, #0
10013a34:	4649      	mov	r1, r9
10013a36:	1c30      	adds	r0, r6, #0
10013a38:	4698      	mov	r8, r3
10013a3a:	9312      	str	r3, [sp, #72]	; 0x48
10013a3c:	f002 fa9c 	bl	10015f78 <__aeabi_fmul>
10013a40:	2380      	movs	r3, #128	; 0x80
10013a42:	061b      	lsls	r3, r3, #24
10013a44:	18e1      	adds	r1, r4, r3
10013a46:	9013      	str	r0, [sp, #76]	; 0x4c
10013a48:	4648      	mov	r0, r9
10013a4a:	f002 fa95 	bl	10015f78 <__aeabi_fmul>
10013a4e:	4643      	mov	r3, r8
10013a50:	9014      	str	r0, [sp, #80]	; 0x50
10013a52:	1c39      	adds	r1, r7, #0
10013a54:	a812      	add	r0, sp, #72	; 0x48
10013a56:	aa0a      	add	r2, sp, #40	; 0x28
10013a58:	9315      	str	r3, [sp, #84]	; 0x54
10013a5a:	f7f6 fe19 	bl	1000a690 <inv_q_multf>
10013a5e:	a80a      	add	r0, sp, #40	; 0x28
10013a60:	1c02      	adds	r2, r0, #0
10013a62:	1c39      	adds	r1, r7, #0
10013a64:	f7f6 fe94 	bl	1000a790 <inv_q_addf>
10013a68:	a80a      	add	r0, sp, #40	; 0x28
10013a6a:	f7f6 ff3b 	bl	1000a8e4 <inv_q_norm4>
10013a6e:	219d      	movs	r1, #157	; 0x9d
10013a70:	980a      	ldr	r0, [sp, #40]	; 0x28
10013a72:	05c9      	lsls	r1, r1, #23
10013a74:	f002 fa80 	bl	10015f78 <__aeabi_fmul>
10013a78:	f002 fd30 	bl	100164dc <__aeabi_f2iz>
10013a7c:	219d      	movs	r1, #157	; 0x9d
10013a7e:	6128      	str	r0, [r5, #16]
10013a80:	05c9      	lsls	r1, r1, #23
10013a82:	980b      	ldr	r0, [sp, #44]	; 0x2c
10013a84:	f002 fa78 	bl	10015f78 <__aeabi_fmul>
10013a88:	f002 fd28 	bl	100164dc <__aeabi_f2iz>
10013a8c:	219d      	movs	r1, #157	; 0x9d
10013a8e:	6168      	str	r0, [r5, #20]
10013a90:	05c9      	lsls	r1, r1, #23
10013a92:	980c      	ldr	r0, [sp, #48]	; 0x30
10013a94:	f002 fa70 	bl	10015f78 <__aeabi_fmul>
10013a98:	f002 fd20 	bl	100164dc <__aeabi_f2iz>
10013a9c:	219d      	movs	r1, #157	; 0x9d
10013a9e:	61a8      	str	r0, [r5, #24]
10013aa0:	05c9      	lsls	r1, r1, #23
10013aa2:	980d      	ldr	r0, [sp, #52]	; 0x34
10013aa4:	f002 fa68 	bl	10015f78 <__aeabi_fmul>
10013aa8:	f002 fd18 	bl	100164dc <__aeabi_f2iz>
10013aac:	61e8      	str	r0, [r5, #28]
10013aae:	1c28      	adds	r0, r5, #0
10013ab0:	a902      	add	r1, sp, #8
10013ab2:	f7f6 fd23 	bl	1000a4fc <inv_q_invert>
10013ab6:	1c28      	adds	r0, r5, #0
10013ab8:	1c2a      	adds	r2, r5, #0
10013aba:	3010      	adds	r0, #16
10013abc:	3220      	adds	r2, #32
10013abe:	a902      	add	r1, sp, #8
10013ac0:	f7f6 fc3c 	bl	1000a33c <inv_q_mult>
10013ac4:	e705      	b.n	100138d2 <inv_generate_accel_gyro_quaternion+0x136>
10013ac6:	46c0      	nop			; (mov r8, r8)
10013ac8:	1001d804 	.word	0x1001d804
10013acc:	00c49ba6 	.word	0x00c49ba6
10013ad0:	3951b717 	.word	0x3951b717
10013ad4:	3c23d70a 	.word	0x3c23d70a
10013ad8:	3e4ccccd 	.word	0x3e4ccccd
10013adc:	3ecccccd 	.word	0x3ecccccd
10013ae0:	3bc49ba6 	.word	0x3bc49ba6
10013ae4:	47cd1400 	.word	0x47cd1400
10013ae8:	065a      	lsls	r2, r3, #25
10013aea:	d400      	bmi.n	10013aee <inv_generate_accel_gyro_quaternion+0x352>
10013aec:	e673      	b.n	100137d6 <inv_generate_accel_gyro_quaternion+0x3a>
10013aee:	2288      	movs	r2, #136	; 0x88
10013af0:	0052      	lsls	r2, r2, #1
10013af2:	58a1      	ldr	r1, [r4, r2]
10013af4:	682a      	ldr	r2, [r5, #0]
10013af6:	1a89      	subs	r1, r1, r2
10013af8:	2296      	movs	r2, #150	; 0x96
10013afa:	0052      	lsls	r2, r2, #1
10013afc:	58a0      	ldr	r0, [r4, r2]
10013afe:	4aef      	ldr	r2, [pc, #956]	; (10013ebc <inv_generate_accel_gyro_quaternion+0x720>)
10013b00:	4342      	muls	r2, r0
10013b02:	4291      	cmp	r1, r2
10013b04:	dc00      	bgt.n	10013b08 <inv_generate_accel_gyro_quaternion+0x36c>
10013b06:	e1f4      	b.n	10013ef2 <inv_generate_accel_gyro_quaternion+0x756>
10013b08:	2203      	movs	r2, #3
10013b0a:	63aa      	str	r2, [r5, #56]	; 0x38
10013b0c:	059b      	lsls	r3, r3, #22
10013b0e:	d500      	bpl.n	10013b12 <inv_generate_accel_gyro_quaternion+0x376>
10013b10:	e1f2      	b.n	10013ef8 <inv_generate_accel_gyro_quaternion+0x75c>
10013b12:	ae12      	add	r6, sp, #72	; 0x48
10013b14:	1c30      	adds	r0, r6, #0
10013b16:	2100      	movs	r1, #0
10013b18:	f7f6 fa7e 	bl	1000a018 <inv_get_gyro_bias>
10013b1c:	1c29      	adds	r1, r5, #0
10013b1e:	1c30      	adds	r0, r6, #0
10013b20:	313c      	adds	r1, #60	; 0x3c
10013b22:	220c      	movs	r2, #12
10013b24:	f004 fd6e 	bl	10018604 <memcmp>
10013b28:	2800      	cmp	r0, #0
10013b2a:	d107      	bne.n	10013b3c <inv_generate_accel_gyro_quaternion+0x3a0>
10013b2c:	2394      	movs	r3, #148	; 0x94
10013b2e:	005b      	lsls	r3, r3, #1
10013b30:	58e3      	ldr	r3, [r4, r3]
10013b32:	6daa      	ldr	r2, [r5, #88]	; 0x58
10013b34:	af1a      	add	r7, sp, #104	; 0x68
10013b36:	4293      	cmp	r3, r2
10013b38:	d100      	bne.n	10013b3c <inv_generate_accel_gyro_quaternion+0x3a0>
10013b3a:	e096      	b.n	10013c6a <inv_generate_accel_gyro_quaternion+0x4ce>
10013b3c:	af1a      	add	r7, sp, #104	; 0x68
10013b3e:	1c32      	adds	r2, r6, #0
10013b40:	1c3b      	adds	r3, r7, #0
10013b42:	6a61      	ldr	r1, [r4, #36]	; 0x24
10013b44:	8820      	ldrh	r0, [r4, #0]
10013b46:	f7f7 f833 	bl	1000abb0 <inv_convert_to_body_with_scale>
10013b4a:	981a      	ldr	r0, [sp, #104]	; 0x68
10013b4c:	f002 fce8 	bl	10016520 <__aeabi_i2f>
10013b50:	4682      	mov	sl, r0
10013b52:	6878      	ldr	r0, [r7, #4]
10013b54:	f002 fce4 	bl	10016520 <__aeabi_i2f>
10013b58:	4681      	mov	r9, r0
10013b5a:	68b8      	ldr	r0, [r7, #8]
10013b5c:	f002 fce0 	bl	10016520 <__aeabi_i2f>
10013b60:	4651      	mov	r1, sl
10013b62:	4680      	mov	r8, r0
10013b64:	4650      	mov	r0, sl
10013b66:	f002 fa07 	bl	10015f78 <__aeabi_fmul>
10013b6a:	4649      	mov	r1, r9
10013b6c:	4682      	mov	sl, r0
10013b6e:	4648      	mov	r0, r9
10013b70:	f002 fa02 	bl	10015f78 <__aeabi_fmul>
10013b74:	1c01      	adds	r1, r0, #0
10013b76:	4650      	mov	r0, sl
10013b78:	f001 febe 	bl	100158f8 <__aeabi_fadd>
10013b7c:	4641      	mov	r1, r8
10013b7e:	4681      	mov	r9, r0
10013b80:	4640      	mov	r0, r8
10013b82:	f002 f9f9 	bl	10015f78 <__aeabi_fmul>
10013b86:	1c01      	adds	r1, r0, #0
10013b88:	4648      	mov	r0, r9
10013b8a:	f001 feb5 	bl	100158f8 <__aeabi_fadd>
10013b8e:	f7fd f947 	bl	10010e20 <sqrtf>
10013b92:	2394      	movs	r3, #148	; 0x94
10013b94:	005b      	lsls	r3, r3, #1
10013b96:	58e3      	ldr	r3, [r4, r3]
10013b98:	49c9      	ldr	r1, [pc, #804]	; (10013ec0 <inv_generate_accel_gyro_quaternion+0x724>)
10013b9a:	4699      	mov	r9, r3
10013b9c:	4680      	mov	r8, r0
10013b9e:	f002 f9eb 	bl	10015f78 <__aeabi_fmul>
10013ba2:	49c8      	ldr	r1, [pc, #800]	; (10013ec4 <inv_generate_accel_gyro_quaternion+0x728>)
10013ba4:	f002 f81e 	bl	10015be4 <__aeabi_fdiv>
10013ba8:	21de      	movs	r1, #222	; 0xde
10013baa:	0589      	lsls	r1, r1, #22
10013bac:	f002 f9e4 	bl	10015f78 <__aeabi_fmul>
10013bb0:	4682      	mov	sl, r0
10013bb2:	4648      	mov	r0, r9
10013bb4:	f002 fcb4 	bl	10016520 <__aeabi_i2f>
10013bb8:	1c01      	adds	r1, r0, #0
10013bba:	4650      	mov	r0, sl
10013bbc:	f002 f9dc 	bl	10015f78 <__aeabi_fmul>
10013bc0:	49c1      	ldr	r1, [pc, #772]	; (10013ec8 <inv_generate_accel_gyro_quaternion+0x72c>)
10013bc2:	f002 f80f 	bl	10015be4 <__aeabi_fdiv>
10013bc6:	21fc      	movs	r1, #252	; 0xfc
10013bc8:	0589      	lsls	r1, r1, #22
10013bca:	f002 f9d5 	bl	10015f78 <__aeabi_fmul>
10013bce:	4682      	mov	sl, r0
10013bd0:	f000 fa48 	bl	10014064 <cosf>
10013bd4:	4683      	mov	fp, r0
10013bd6:	4650      	mov	r0, sl
10013bd8:	f000 fa82 	bl	100140e0 <sinf>
10013bdc:	2180      	movs	r1, #128	; 0x80
10013bde:	4682      	mov	sl, r0
10013be0:	05c9      	lsls	r1, r1, #23
10013be2:	4640      	mov	r0, r8
10013be4:	f001 fd56 	bl	10015694 <__aeabi_fcmplt>
10013be8:	2800      	cmp	r0, #0
10013bea:	d000      	beq.n	10013bee <inv_generate_accel_gyro_quaternion+0x452>
10013bec:	e18b      	b.n	10013f06 <inv_generate_accel_gyro_quaternion+0x76a>
10013bee:	219d      	movs	r1, #157	; 0x9d
10013bf0:	4658      	mov	r0, fp
10013bf2:	05c9      	lsls	r1, r1, #23
10013bf4:	f002 f9c0 	bl	10015f78 <__aeabi_fmul>
10013bf8:	f002 fc70 	bl	100164dc <__aeabi_f2iz>
10013bfc:	2380      	movs	r3, #128	; 0x80
10013bfe:	219d      	movs	r1, #157	; 0x9d
10013c00:	061b      	lsls	r3, r3, #24
10013c02:	4453      	add	r3, sl
10013c04:	05c9      	lsls	r1, r1, #23
10013c06:	64a8      	str	r0, [r5, #72]	; 0x48
10013c08:	1c18      	adds	r0, r3, #0
10013c0a:	f002 f9b5 	bl	10015f78 <__aeabi_fmul>
10013c0e:	4682      	mov	sl, r0
10013c10:	981a      	ldr	r0, [sp, #104]	; 0x68
10013c12:	f002 fc85 	bl	10016520 <__aeabi_i2f>
10013c16:	1c01      	adds	r1, r0, #0
10013c18:	4650      	mov	r0, sl
10013c1a:	f002 f9ad 	bl	10015f78 <__aeabi_fmul>
10013c1e:	4641      	mov	r1, r8
10013c20:	f001 ffe0 	bl	10015be4 <__aeabi_fdiv>
10013c24:	f002 fc5a 	bl	100164dc <__aeabi_f2iz>
10013c28:	64e8      	str	r0, [r5, #76]	; 0x4c
10013c2a:	6878      	ldr	r0, [r7, #4]
10013c2c:	f002 fc78 	bl	10016520 <__aeabi_i2f>
10013c30:	1c01      	adds	r1, r0, #0
10013c32:	4650      	mov	r0, sl
10013c34:	f002 f9a0 	bl	10015f78 <__aeabi_fmul>
10013c38:	4641      	mov	r1, r8
10013c3a:	f001 ffd3 	bl	10015be4 <__aeabi_fdiv>
10013c3e:	f002 fc4d 	bl	100164dc <__aeabi_f2iz>
10013c42:	6528      	str	r0, [r5, #80]	; 0x50
10013c44:	68b8      	ldr	r0, [r7, #8]
10013c46:	f002 fc6b 	bl	10016520 <__aeabi_i2f>
10013c4a:	1c01      	adds	r1, r0, #0
10013c4c:	4650      	mov	r0, sl
10013c4e:	f002 f993 	bl	10015f78 <__aeabi_fmul>
10013c52:	4641      	mov	r1, r8
10013c54:	f001 ffc6 	bl	10015be4 <__aeabi_fdiv>
10013c58:	f002 fc40 	bl	100164dc <__aeabi_f2iz>
10013c5c:	6568      	str	r0, [r5, #84]	; 0x54
10013c5e:	1c2b      	adds	r3, r5, #0
10013c60:	333c      	adds	r3, #60	; 0x3c
10013c62:	ce07      	ldmia	r6!, {r0, r1, r2}
10013c64:	c307      	stmia	r3!, {r0, r1, r2}
10013c66:	464b      	mov	r3, r9
10013c68:	65ab      	str	r3, [r5, #88]	; 0x58
10013c6a:	1c26      	adds	r6, r4, #0
10013c6c:	1c29      	adds	r1, r5, #0
10013c6e:	3611      	adds	r6, #17
10013c70:	36ff      	adds	r6, #255	; 0xff
10013c72:	1c30      	adds	r0, r6, #0
10013c74:	1c3a      	adds	r2, r7, #0
10013c76:	3148      	adds	r1, #72	; 0x48
10013c78:	f7f6 fb60 	bl	1000a33c <inv_q_mult>
10013c7c:	235c      	movs	r3, #92	; 0x5c
10013c7e:	4698      	mov	r8, r3
10013c80:	44a8      	add	r8, r5
10013c82:	aa16      	add	r2, sp, #88	; 0x58
10013c84:	4640      	mov	r0, r8
10013c86:	1c39      	adds	r1, r7, #0
10013c88:	f7f6 fb58 	bl	1000a33c <inv_q_mult>
10013c8c:	1c30      	adds	r0, r6, #0
10013c8e:	4641      	mov	r1, r8
10013c90:	f7f6 fc34 	bl	1000a4fc <inv_q_invert>
10013c94:	1c28      	adds	r0, r5, #0
10013c96:	a916      	add	r1, sp, #88	; 0x58
10013c98:	1c3a      	adds	r2, r7, #0
10013c9a:	f7f6 fb4f 	bl	1000a33c <inv_q_mult>
10013c9e:	1c38      	adds	r0, r7, #0
10013ca0:	1c29      	adds	r1, r5, #0
10013ca2:	f7ff fc31 	bl	10013508 <inv_normalize_quat>
10013ca6:	e596      	b.n	100137d6 <inv_generate_accel_gyro_quaternion+0x3a>
10013ca8:	1c20      	adds	r0, r4, #0
10013caa:	f7ff fcbd 	bl	10013628 <inv_generate_gyro_quaternion.part.1>
10013cae:	e592      	b.n	100137d6 <inv_generate_accel_gyro_quaternion+0x3a>
10013cb0:	4b86      	ldr	r3, [pc, #536]	; (10013ecc <inv_generate_accel_gyro_quaternion+0x730>)
10013cb2:	4298      	cmp	r0, r3
10013cb4:	d800      	bhi.n	10013cb8 <inv_generate_accel_gyro_quaternion+0x51c>
10013cb6:	e5d3      	b.n	10013860 <inv_generate_accel_gyro_quaternion+0xc4>
10013cb8:	a80e      	add	r0, sp, #56	; 0x38
10013cba:	f7f7 f8ed 	bl	1000ae98 <inv_get_linear_accel>
10013cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10013cc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
10013cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013cc4:	4690      	mov	r8, r2
10013cc6:	980e      	ldr	r0, [sp, #56]	; 0x38
10013cc8:	17d2      	asrs	r2, r2, #31
10013cca:	17db      	asrs	r3, r3, #31
10013ccc:	4692      	mov	sl, r2
10013cce:	17fa      	asrs	r2, r7, #31
10013cd0:	4691      	mov	r9, r2
10013cd2:	1c19      	adds	r1, r3, #0
10013cd4:	1c02      	adds	r2, r0, #0
10013cd6:	f001 fd29 	bl	1001572c <__aeabi_lmul>
10013cda:	4642      	mov	r2, r8
10013cdc:	9000      	str	r0, [sp, #0]
10013cde:	9101      	str	r1, [sp, #4]
10013ce0:	4653      	mov	r3, sl
10013ce2:	4640      	mov	r0, r8
10013ce4:	4651      	mov	r1, sl
10013ce6:	f001 fd21 	bl	1001572c <__aeabi_lmul>
10013cea:	9a00      	ldr	r2, [sp, #0]
10013cec:	9b01      	ldr	r3, [sp, #4]
10013cee:	1812      	adds	r2, r2, r0
10013cf0:	414b      	adcs	r3, r1
10013cf2:	1c38      	adds	r0, r7, #0
10013cf4:	9200      	str	r2, [sp, #0]
10013cf6:	9301      	str	r3, [sp, #4]
10013cf8:	4649      	mov	r1, r9
10013cfa:	1c3a      	adds	r2, r7, #0
10013cfc:	464b      	mov	r3, r9
10013cfe:	f001 fd15 	bl	1001572c <__aeabi_lmul>
10013d02:	9a00      	ldr	r2, [sp, #0]
10013d04:	9b01      	ldr	r3, [sp, #4]
10013d06:	1880      	adds	r0, r0, r2
10013d08:	4159      	adcs	r1, r3
10013d0a:	2902      	cmp	r1, #2
10013d0c:	dc05      	bgt.n	10013d1a <inv_generate_accel_gyro_quaternion+0x57e>
10013d0e:	d000      	beq.n	10013d12 <inv_generate_accel_gyro_quaternion+0x576>
10013d10:	e5a6      	b.n	10013860 <inv_generate_accel_gyro_quaternion+0xc4>
10013d12:	4b6e      	ldr	r3, [pc, #440]	; (10013ecc <inv_generate_accel_gyro_quaternion+0x730>)
10013d14:	4298      	cmp	r0, r3
10013d16:	d800      	bhi.n	10013d1a <inv_generate_accel_gyro_quaternion+0x57e>
10013d18:	e5a2      	b.n	10013860 <inv_generate_accel_gyro_quaternion+0xc4>
10013d1a:	2304      	movs	r3, #4
10013d1c:	63ab      	str	r3, [r5, #56]	; 0x38
10013d1e:	2400      	movs	r4, #0
10013d20:	e5ad      	b.n	1001387e <inv_generate_accel_gyro_quaternion+0xe2>
10013d22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10013d24:	496a      	ldr	r1, [pc, #424]	; (10013ed0 <inv_generate_accel_gyro_quaternion+0x734>)
10013d26:	f001 fb79 	bl	1001541c <__aeabi_idiv>
10013d2a:	2800      	cmp	r0, #0
10013d2c:	dc00      	bgt.n	10013d30 <inv_generate_accel_gyro_quaternion+0x594>
10013d2e:	e103      	b.n	10013f38 <inv_generate_accel_gyro_quaternion+0x79c>
10013d30:	2f03      	cmp	r7, #3
10013d32:	d000      	beq.n	10013d36 <inv_generate_accel_gyro_quaternion+0x59a>
10013d34:	e5a0      	b.n	10013878 <inv_generate_accel_gyro_quaternion+0xdc>
10013d36:	4c67      	ldr	r4, [pc, #412]	; (10013ed4 <inv_generate_accel_gyro_quaternion+0x738>)
10013d38:	4344      	muls	r4, r0
10013d3a:	e5a0      	b.n	1001387e <inv_generate_accel_gyro_quaternion+0xe2>
10013d3c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
10013d3e:	f002 fbef 	bl	10016520 <__aeabi_i2f>
10013d42:	1c07      	adds	r7, r0, #0
10013d44:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013d46:	f002 fbeb 	bl	10016520 <__aeabi_i2f>
10013d4a:	1c06      	adds	r6, r0, #0
10013d4c:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013d4e:	f002 fbe7 	bl	10016520 <__aeabi_i2f>
10013d52:	1c39      	adds	r1, r7, #0
10013d54:	1c05      	adds	r5, r0, #0
10013d56:	1c38      	adds	r0, r7, #0
10013d58:	f002 f90e 	bl	10015f78 <__aeabi_fmul>
10013d5c:	1c31      	adds	r1, r6, #0
10013d5e:	1c07      	adds	r7, r0, #0
10013d60:	1c30      	adds	r0, r6, #0
10013d62:	f002 f909 	bl	10015f78 <__aeabi_fmul>
10013d66:	1c01      	adds	r1, r0, #0
10013d68:	1c38      	adds	r0, r7, #0
10013d6a:	f001 fdc5 	bl	100158f8 <__aeabi_fadd>
10013d6e:	1c29      	adds	r1, r5, #0
10013d70:	1c06      	adds	r6, r0, #0
10013d72:	1c28      	adds	r0, r5, #0
10013d74:	f002 f900 	bl	10015f78 <__aeabi_fmul>
10013d78:	1c01      	adds	r1, r0, #0
10013d7a:	1c30      	adds	r0, r6, #0
10013d7c:	f001 fdbc 	bl	100158f8 <__aeabi_fadd>
10013d80:	f7fd f84e 	bl	10010e20 <sqrtf>
10013d84:	21fe      	movs	r1, #254	; 0xfe
10013d86:	0589      	lsls	r1, r1, #22
10013d88:	1c05      	adds	r5, r0, #0
10013d8a:	f001 fc8d 	bl	100156a8 <__aeabi_fcmple>
10013d8e:	2800      	cmp	r0, #0
10013d90:	d000      	beq.n	10013d94 <inv_generate_accel_gyro_quaternion+0x5f8>
10013d92:	e0d3      	b.n	10013f3c <inv_generate_accel_gyro_quaternion+0x7a0>
10013d94:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013d96:	f002 fbc3 	bl	10016520 <__aeabi_i2f>
10013d9a:	1c29      	adds	r1, r5, #0
10013d9c:	f001 ff22 	bl	10015be4 <__aeabi_fdiv>
10013da0:	1c05      	adds	r5, r0, #0
10013da2:	20fe      	movs	r0, #254	; 0xfe
10013da4:	1c29      	adds	r1, r5, #0
10013da6:	0580      	lsls	r0, r0, #22
10013da8:	f002 f9fa 	bl	100161a0 <__aeabi_fsub>
10013dac:	2100      	movs	r1, #0
10013dae:	1c06      	adds	r6, r0, #0
10013db0:	f001 fc84 	bl	100156bc <__aeabi_fcmpgt>
10013db4:	2800      	cmp	r0, #0
10013db6:	d100      	bne.n	10013dba <inv_generate_accel_gyro_quaternion+0x61e>
10013db8:	e0de      	b.n	10013f78 <inv_generate_accel_gyro_quaternion+0x7dc>
10013dba:	21fc      	movs	r1, #252	; 0xfc
10013dbc:	1c30      	adds	r0, r6, #0
10013dbe:	0589      	lsls	r1, r1, #22
10013dc0:	f002 f8da 	bl	10015f78 <__aeabi_fmul>
10013dc4:	f7fd f82c 	bl	10010e20 <sqrtf>
10013dc8:	21fe      	movs	r1, #254	; 0xfe
10013dca:	1c06      	adds	r6, r0, #0
10013dcc:	0589      	lsls	r1, r1, #22
10013dce:	1c28      	adds	r0, r5, #0
10013dd0:	f001 fd92 	bl	100158f8 <__aeabi_fadd>
10013dd4:	2100      	movs	r1, #0
10013dd6:	1c05      	adds	r5, r0, #0
10013dd8:	f001 fc70 	bl	100156bc <__aeabi_fcmpgt>
10013ddc:	2800      	cmp	r0, #0
10013dde:	d100      	bne.n	10013de2 <inv_generate_accel_gyro_quaternion+0x646>
10013de0:	e0cc      	b.n	10013f7c <inv_generate_accel_gyro_quaternion+0x7e0>
10013de2:	21fc      	movs	r1, #252	; 0xfc
10013de4:	1c28      	adds	r0, r5, #0
10013de6:	0589      	lsls	r1, r1, #22
10013de8:	f002 f8c6 	bl	10015f78 <__aeabi_fmul>
10013dec:	f7fd f818 	bl	10010e20 <sqrtf>
10013df0:	4681      	mov	r9, r0
10013df2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013df4:	f002 fb94 	bl	10016520 <__aeabi_i2f>
10013df8:	1c07      	adds	r7, r0, #0
10013dfa:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013dfc:	f002 fb90 	bl	10016520 <__aeabi_i2f>
10013e00:	1c39      	adds	r1, r7, #0
10013e02:	1c05      	adds	r5, r0, #0
10013e04:	1c38      	adds	r0, r7, #0
10013e06:	f002 f8b7 	bl	10015f78 <__aeabi_fmul>
10013e0a:	1c29      	adds	r1, r5, #0
10013e0c:	1c07      	adds	r7, r0, #0
10013e0e:	1c28      	adds	r0, r5, #0
10013e10:	f002 f8b2 	bl	10015f78 <__aeabi_fmul>
10013e14:	1c01      	adds	r1, r0, #0
10013e16:	1c38      	adds	r0, r7, #0
10013e18:	f001 fd6e 	bl	100158f8 <__aeabi_fadd>
10013e1c:	f7fd f800 	bl	10010e20 <sqrtf>
10013e20:	21fe      	movs	r1, #254	; 0xfe
10013e22:	0589      	lsls	r1, r1, #22
10013e24:	1c07      	adds	r7, r0, #0
10013e26:	f001 fc3f 	bl	100156a8 <__aeabi_fcmple>
10013e2a:	4680      	mov	r8, r0
10013e2c:	2800      	cmp	r0, #0
10013e2e:	d000      	beq.n	10013e32 <inv_generate_accel_gyro_quaternion+0x696>
10013e30:	e084      	b.n	10013f3c <inv_generate_accel_gyro_quaternion+0x7a0>
10013e32:	219d      	movs	r1, #157	; 0x9d
10013e34:	4648      	mov	r0, r9
10013e36:	05c9      	lsls	r1, r1, #23
10013e38:	f002 f89e 	bl	10015f78 <__aeabi_fmul>
10013e3c:	f002 fb4e 	bl	100164dc <__aeabi_f2iz>
10013e40:	4d25      	ldr	r5, [pc, #148]	; (10013ed8 <inv_generate_accel_gyro_quaternion+0x73c>)
10013e42:	6128      	str	r0, [r5, #16]
10013e44:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013e46:	f002 fb6b 	bl	10016520 <__aeabi_i2f>
10013e4a:	1c39      	adds	r1, r7, #0
10013e4c:	f001 feca 	bl	10015be4 <__aeabi_fdiv>
10013e50:	1c01      	adds	r1, r0, #0
10013e52:	1c30      	adds	r0, r6, #0
10013e54:	f002 f890 	bl	10015f78 <__aeabi_fmul>
10013e58:	219d      	movs	r1, #157	; 0x9d
10013e5a:	05c9      	lsls	r1, r1, #23
10013e5c:	f002 f88c 	bl	10015f78 <__aeabi_fmul>
10013e60:	f002 fb3c 	bl	100164dc <__aeabi_f2iz>
10013e64:	2380      	movs	r3, #128	; 0x80
10013e66:	061b      	lsls	r3, r3, #24
10013e68:	469c      	mov	ip, r3
10013e6a:	6168      	str	r0, [r5, #20]
10013e6c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013e6e:	4466      	add	r6, ip
10013e70:	f002 fb56 	bl	10016520 <__aeabi_i2f>
10013e74:	1c39      	adds	r1, r7, #0
10013e76:	f001 feb5 	bl	10015be4 <__aeabi_fdiv>
10013e7a:	1c01      	adds	r1, r0, #0
10013e7c:	1c30      	adds	r0, r6, #0
10013e7e:	f002 f87b 	bl	10015f78 <__aeabi_fmul>
10013e82:	219d      	movs	r1, #157	; 0x9d
10013e84:	05c9      	lsls	r1, r1, #23
10013e86:	f002 f877 	bl	10015f78 <__aeabi_fmul>
10013e8a:	f002 fb27 	bl	100164dc <__aeabi_f2iz>
10013e8e:	4643      	mov	r3, r8
10013e90:	61a8      	str	r0, [r5, #24]
10013e92:	61eb      	str	r3, [r5, #28]
10013e94:	2390      	movs	r3, #144	; 0x90
10013e96:	005b      	lsls	r3, r3, #1
10013e98:	58e3      	ldr	r3, [r4, r3]
10013e9a:	05db      	lsls	r3, r3, #23
10013e9c:	d461      	bmi.n	10013f62 <inv_generate_accel_gyro_quaternion+0x7c6>
10013e9e:	1c28      	adds	r0, r5, #0
10013ea0:	a902      	add	r1, sp, #8
10013ea2:	f7f6 fb2b 	bl	1000a4fc <inv_q_invert>
10013ea6:	1c28      	adds	r0, r5, #0
10013ea8:	1c2a      	adds	r2, r5, #0
10013eaa:	3010      	adds	r0, #16
10013eac:	3220      	adds	r2, #32
10013eae:	a902      	add	r1, sp, #8
10013eb0:	f7f6 fa44 	bl	1000a33c <inv_q_mult>
10013eb4:	2390      	movs	r3, #144	; 0x90
10013eb6:	005b      	lsls	r3, r3, #1
10013eb8:	58e3      	ldr	r3, [r4, r3]
10013eba:	e485      	b.n	100137c8 <inv_generate_accel_gyro_quaternion+0x2c>
10013ebc:	001c9871 	.word	0x001c9871
10013ec0:	40490fdb 	.word	0x40490fdb
10013ec4:	43340000 	.word	0x43340000
10013ec8:	49742400 	.word	0x49742400
10013ecc:	3fffffff 	.word	0x3fffffff
10013ed0:	00001388 	.word	0x00001388
10013ed4:	00c49ba6 	.word	0x00c49ba6
10013ed8:	1001d804 	.word	0x1001d804
10013edc:	1c29      	adds	r1, r5, #0
10013ede:	3011      	adds	r0, #17
10013ee0:	315c      	adds	r1, #92	; 0x5c
10013ee2:	30ff      	adds	r0, #255	; 0xff
10013ee4:	f7f6 fb0a 	bl	1000a4fc <inv_q_invert>
10013ee8:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013eea:	05db      	lsls	r3, r3, #23
10013eec:	d413      	bmi.n	10013f16 <inv_generate_accel_gyro_quaternion+0x77a>
10013eee:	59a3      	ldr	r3, [r4, r6]
10013ef0:	e46a      	b.n	100137c8 <inv_generate_accel_gyro_quaternion+0x2c>
10013ef2:	2202      	movs	r2, #2
10013ef4:	63aa      	str	r2, [r5, #56]	; 0x38
10013ef6:	e609      	b.n	10013b0c <inv_generate_accel_gyro_quaternion+0x370>
10013ef8:	1c20      	adds	r0, r4, #0
10013efa:	3011      	adds	r0, #17
10013efc:	30ff      	adds	r0, #255	; 0xff
10013efe:	1c29      	adds	r1, r5, #0
10013f00:	f7ff fb02 	bl	10013508 <inv_normalize_quat>
10013f04:	e467      	b.n	100137d6 <inv_generate_accel_gyro_quaternion+0x3a>
10013f06:	2380      	movs	r3, #128	; 0x80
10013f08:	05db      	lsls	r3, r3, #23
10013f0a:	64ab      	str	r3, [r5, #72]	; 0x48
10013f0c:	2300      	movs	r3, #0
10013f0e:	64eb      	str	r3, [r5, #76]	; 0x4c
10013f10:	652b      	str	r3, [r5, #80]	; 0x50
10013f12:	656b      	str	r3, [r5, #84]	; 0x54
10013f14:	e6a3      	b.n	10013c5e <inv_generate_accel_gyro_quaternion+0x4c2>
10013f16:	1c28      	adds	r0, r5, #0
10013f18:	a902      	add	r1, sp, #8
10013f1a:	f7f6 faef 	bl	1000a4fc <inv_q_invert>
10013f1e:	1c28      	adds	r0, r5, #0
10013f20:	1c2a      	adds	r2, r5, #0
10013f22:	3010      	adds	r0, #16
10013f24:	3220      	adds	r2, #32
10013f26:	a902      	add	r1, sp, #8
10013f28:	f7f6 fa08 	bl	1000a33c <inv_q_mult>
10013f2c:	59a3      	ldr	r3, [r4, r6]
10013f2e:	e44b      	b.n	100137c8 <inv_generate_accel_gyro_quaternion+0x2c>
10013f30:	23fa      	movs	r3, #250	; 0xfa
10013f32:	059b      	lsls	r3, r3, #22
10013f34:	4699      	mov	r9, r3
10013f36:	e572      	b.n	10013a1e <inv_generate_accel_gyro_quaternion+0x282>
10013f38:	2001      	movs	r0, #1
10013f3a:	e6f9      	b.n	10013d30 <inv_generate_accel_gyro_quaternion+0x594>
10013f3c:	2380      	movs	r3, #128	; 0x80
10013f3e:	4d11      	ldr	r5, [pc, #68]	; (10013f84 <inv_generate_accel_gyro_quaternion+0x7e8>)
10013f40:	05db      	lsls	r3, r3, #23
10013f42:	612b      	str	r3, [r5, #16]
10013f44:	2300      	movs	r3, #0
10013f46:	616b      	str	r3, [r5, #20]
10013f48:	61ab      	str	r3, [r5, #24]
10013f4a:	61eb      	str	r3, [r5, #28]
10013f4c:	e7a2      	b.n	10013e94 <inv_generate_accel_gyro_quaternion+0x6f8>
10013f4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10013f50:	490d      	ldr	r1, [pc, #52]	; (10013f88 <inv_generate_accel_gyro_quaternion+0x7ec>)
10013f52:	f001 fa63 	bl	1001541c <__aeabi_idiv>
10013f56:	2800      	cmp	r0, #0
10013f58:	dd12      	ble.n	10013f80 <inv_generate_accel_gyro_quaternion+0x7e4>
10013f5a:	4c0c      	ldr	r4, [pc, #48]	; (10013f8c <inv_generate_accel_gyro_quaternion+0x7f0>)
10013f5c:	00c0      	lsls	r0, r0, #3
10013f5e:	4344      	muls	r4, r0
10013f60:	e48d      	b.n	1001387e <inv_generate_accel_gyro_quaternion+0xe2>
10013f62:	1c20      	adds	r0, r4, #0
10013f64:	1c29      	adds	r1, r5, #0
10013f66:	3011      	adds	r0, #17
10013f68:	315c      	adds	r1, #92	; 0x5c
10013f6a:	30ff      	adds	r0, #255	; 0xff
10013f6c:	f7f6 fac6 	bl	1000a4fc <inv_q_invert>
10013f70:	e795      	b.n	10013e9e <inv_generate_accel_gyro_quaternion+0x702>
10013f72:	4b07      	ldr	r3, [pc, #28]	; (10013f90 <inv_generate_accel_gyro_quaternion+0x7f4>)
10013f74:	4699      	mov	r9, r3
10013f76:	e552      	b.n	10013a1e <inv_generate_accel_gyro_quaternion+0x282>
10013f78:	2000      	movs	r0, #0
10013f7a:	e723      	b.n	10013dc4 <inv_generate_accel_gyro_quaternion+0x628>
10013f7c:	2000      	movs	r0, #0
10013f7e:	e735      	b.n	10013dec <inv_generate_accel_gyro_quaternion+0x650>
10013f80:	4c04      	ldr	r4, [pc, #16]	; (10013f94 <inv_generate_accel_gyro_quaternion+0x7f8>)
10013f82:	e47c      	b.n	1001387e <inv_generate_accel_gyro_quaternion+0xe2>
10013f84:	1001d804 	.word	0x1001d804
10013f88:	00001388 	.word	0x00001388
10013f8c:	00c49ba6 	.word	0x00c49ba6
10013f90:	3d75c28f 	.word	0x3d75c28f
10013f94:	0624dd30 	.word	0x0624dd30

10013f98 <inv_generate_quaternion>:
10013f98:	2280      	movs	r2, #128	; 0x80
10013f9a:	b538      	push	{r3, r4, r5, lr}
10013f9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
10013f9e:	0052      	lsls	r2, r2, #1
10013fa0:	4213      	tst	r3, r2
10013fa2:	d102      	bne.n	10013faa <inv_generate_quaternion+0x12>
10013fa4:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013fa6:	4213      	tst	r3, r2
10013fa8:	d012      	beq.n	10013fd0 <inv_generate_quaternion+0x38>
10013faa:	2390      	movs	r3, #144	; 0x90
10013fac:	22c0      	movs	r2, #192	; 0xc0
10013fae:	005b      	lsls	r3, r3, #1
10013fb0:	58c3      	ldr	r3, [r0, r3]
10013fb2:	0092      	lsls	r2, r2, #2
10013fb4:	1c04      	adds	r4, r0, #0
10013fb6:	4013      	ands	r3, r2
10013fb8:	4293      	cmp	r3, r2
10013fba:	d014      	beq.n	10013fe6 <inv_generate_quaternion+0x4e>
10013fbc:	f7ff fbee 	bl	1001379c <inv_generate_accel_gyro_quaternion>
10013fc0:	4d0e      	ldr	r5, [pc, #56]	; (10013ffc <inv_generate_quaternion+0x64>)
10013fc2:	1c28      	adds	r0, r5, #0
10013fc4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
10013fc6:	3010      	adds	r0, #16
10013fc8:	f7f6 fe84 	bl	1000acd4 <inv_store_gaming_quaternion>
10013fcc:	2000      	movs	r0, #0
10013fce:	bd38      	pop	{r3, r4, r5, pc}
10013fd0:	2390      	movs	r3, #144	; 0x90
10013fd2:	005b      	lsls	r3, r3, #1
10013fd4:	58c3      	ldr	r3, [r0, r3]
10013fd6:	4213      	tst	r3, r2
10013fd8:	d0f8      	beq.n	10013fcc <inv_generate_quaternion+0x34>
10013fda:	22c0      	movs	r2, #192	; 0xc0
10013fdc:	0092      	lsls	r2, r2, #2
10013fde:	1c04      	adds	r4, r0, #0
10013fe0:	4013      	ands	r3, r2
10013fe2:	4293      	cmp	r3, r2
10013fe4:	d1ea      	bne.n	10013fbc <inv_generate_quaternion+0x24>
10013fe6:	4d05      	ldr	r5, [pc, #20]	; (10013ffc <inv_generate_quaternion+0x64>)
10013fe8:	1c21      	adds	r1, r4, #0
10013fea:	1c28      	adds	r0, r5, #0
10013fec:	3111      	adds	r1, #17
10013fee:	31ff      	adds	r1, #255	; 0xff
10013ff0:	2210      	movs	r2, #16
10013ff2:	3010      	adds	r0, #16
10013ff4:	f004 fb15 	bl	10018622 <memcpy>
10013ff8:	e7e3      	b.n	10013fc2 <inv_generate_quaternion+0x2a>
10013ffa:	46c0      	nop			; (mov r8, r8)
10013ffc:	1001d804 	.word	0x1001d804

10014000 <inv_stop_quaternion>:
10014000:	b508      	push	{r3, lr}
10014002:	4802      	ldr	r0, [pc, #8]	; (1001400c <inv_stop_quaternion+0xc>)
10014004:	f7f6 f8a2 	bl	1000a14c <inv_unregister_data_cb>
10014008:	bd08      	pop	{r3, pc}
1001400a:	46c0      	nop			; (mov r8, r8)
1001400c:	10013f99 	.word	0x10013f99

10014010 <inv_init_quaternion>:
10014010:	b510      	push	{r4, lr}
10014012:	4c07      	ldr	r4, [pc, #28]	; (10014030 <inv_init_quaternion+0x20>)
10014014:	2100      	movs	r1, #0
10014016:	1c20      	adds	r0, r4, #0
10014018:	226c      	movs	r2, #108	; 0x6c
1001401a:	f004 fb20 	bl	1001865e <memset>
1001401e:	2380      	movs	r3, #128	; 0x80
10014020:	05db      	lsls	r3, r3, #23
10014022:	2000      	movs	r0, #0
10014024:	6123      	str	r3, [r4, #16]
10014026:	6023      	str	r3, [r4, #0]
10014028:	6223      	str	r3, [r4, #32]
1001402a:	63e3      	str	r3, [r4, #60]	; 0x3c
1001402c:	65e3      	str	r3, [r4, #92]	; 0x5c
1001402e:	bd10      	pop	{r4, pc}
10014030:	1001d804 	.word	0x1001d804

10014034 <inv_enable_quaternion>:
10014034:	b508      	push	{r3, lr}
10014036:	f7ff ffeb 	bl	10014010 <inv_init_quaternion>
1001403a:	2800      	cmp	r0, #0
1001403c:	d102      	bne.n	10014044 <inv_enable_quaternion+0x10>
1001403e:	4802      	ldr	r0, [pc, #8]	; (10014048 <inv_enable_quaternion+0x14>)
10014040:	f7f6 ff90 	bl	1000af64 <inv_register_mpl_start_notification>
10014044:	bd08      	pop	{r3, pc}
10014046:	46c0      	nop			; (mov r8, r8)
10014048:	100135f9 	.word	0x100135f9

1001404c <inv_disable_quaternion>:
1001404c:	b508      	push	{r3, lr}
1001404e:	4803      	ldr	r0, [pc, #12]	; (1001405c <inv_disable_quaternion+0x10>)
10014050:	f7f6 f87c 	bl	1000a14c <inv_unregister_data_cb>
10014054:	4802      	ldr	r0, [pc, #8]	; (10014060 <inv_disable_quaternion+0x14>)
10014056:	f7f6 ff51 	bl	1000aefc <inv_unregister_mpl_start_notification>
1001405a:	bd08      	pop	{r3, pc}
1001405c:	10013f99 	.word	0x10013f99
10014060:	100135f9 	.word	0x100135f9

10014064 <cosf>:
10014064:	b500      	push	{lr}
10014066:	4a1c      	ldr	r2, [pc, #112]	; (100140d8 <cosf+0x74>)
10014068:	0043      	lsls	r3, r0, #1
1001406a:	b083      	sub	sp, #12
1001406c:	085b      	lsrs	r3, r3, #1
1001406e:	4293      	cmp	r3, r2
10014070:	dd18      	ble.n	100140a4 <cosf+0x40>
10014072:	4a1a      	ldr	r2, [pc, #104]	; (100140dc <cosf+0x78>)
10014074:	4293      	cmp	r3, r2
10014076:	dd04      	ble.n	10014082 <cosf+0x1e>
10014078:	1c01      	adds	r1, r0, #0
1001407a:	f002 f891 	bl	100161a0 <__aeabi_fsub>
1001407e:	b003      	add	sp, #12
10014080:	bd00      	pop	{pc}
10014082:	4669      	mov	r1, sp
10014084:	f000 fa22 	bl	100144cc <__ieee754_rem_pio2f>
10014088:	2303      	movs	r3, #3
1001408a:	9901      	ldr	r1, [sp, #4]
1001408c:	4018      	ands	r0, r3
1001408e:	2801      	cmp	r0, #1
10014090:	d014      	beq.n	100140bc <cosf+0x58>
10014092:	2802      	cmp	r0, #2
10014094:	d00a      	beq.n	100140ac <cosf+0x48>
10014096:	2800      	cmp	r0, #0
10014098:	d019      	beq.n	100140ce <cosf+0x6a>
1001409a:	9800      	ldr	r0, [sp, #0]
1001409c:	2201      	movs	r2, #1
1001409e:	f000 fff9 	bl	10015094 <__kernel_sinf>
100140a2:	e7ec      	b.n	1001407e <cosf+0x1a>
100140a4:	2100      	movs	r1, #0
100140a6:	f000 fb99 	bl	100147dc <__kernel_cosf>
100140aa:	e7e8      	b.n	1001407e <cosf+0x1a>
100140ac:	9800      	ldr	r0, [sp, #0]
100140ae:	f000 fb95 	bl	100147dc <__kernel_cosf>
100140b2:	2380      	movs	r3, #128	; 0x80
100140b4:	061b      	lsls	r3, r3, #24
100140b6:	469c      	mov	ip, r3
100140b8:	4460      	add	r0, ip
100140ba:	e7e0      	b.n	1001407e <cosf+0x1a>
100140bc:	2201      	movs	r2, #1
100140be:	9800      	ldr	r0, [sp, #0]
100140c0:	f000 ffe8 	bl	10015094 <__kernel_sinf>
100140c4:	2380      	movs	r3, #128	; 0x80
100140c6:	061b      	lsls	r3, r3, #24
100140c8:	469c      	mov	ip, r3
100140ca:	4460      	add	r0, ip
100140cc:	e7d7      	b.n	1001407e <cosf+0x1a>
100140ce:	9800      	ldr	r0, [sp, #0]
100140d0:	f000 fb84 	bl	100147dc <__kernel_cosf>
100140d4:	e7d3      	b.n	1001407e <cosf+0x1a>
100140d6:	46c0      	nop			; (mov r8, r8)
100140d8:	3f490fd8 	.word	0x3f490fd8
100140dc:	7f7fffff 	.word	0x7f7fffff

100140e0 <sinf>:
100140e0:	b500      	push	{lr}
100140e2:	4a1c      	ldr	r2, [pc, #112]	; (10014154 <sinf+0x74>)
100140e4:	0043      	lsls	r3, r0, #1
100140e6:	b083      	sub	sp, #12
100140e8:	085b      	lsrs	r3, r3, #1
100140ea:	4293      	cmp	r3, r2
100140ec:	dd1b      	ble.n	10014126 <sinf+0x46>
100140ee:	4a1a      	ldr	r2, [pc, #104]	; (10014158 <sinf+0x78>)
100140f0:	4293      	cmp	r3, r2
100140f2:	dd04      	ble.n	100140fe <sinf+0x1e>
100140f4:	1c01      	adds	r1, r0, #0
100140f6:	f002 f853 	bl	100161a0 <__aeabi_fsub>
100140fa:	b003      	add	sp, #12
100140fc:	bd00      	pop	{pc}
100140fe:	4669      	mov	r1, sp
10014100:	f000 f9e4 	bl	100144cc <__ieee754_rem_pio2f>
10014104:	2303      	movs	r3, #3
10014106:	9901      	ldr	r1, [sp, #4]
10014108:	4018      	ands	r0, r3
1001410a:	2801      	cmp	r0, #1
1001410c:	d019      	beq.n	10014142 <sinf+0x62>
1001410e:	2802      	cmp	r0, #2
10014110:	d00e      	beq.n	10014130 <sinf+0x50>
10014112:	2800      	cmp	r0, #0
10014114:	d019      	beq.n	1001414a <sinf+0x6a>
10014116:	9800      	ldr	r0, [sp, #0]
10014118:	f000 fb60 	bl	100147dc <__kernel_cosf>
1001411c:	2380      	movs	r3, #128	; 0x80
1001411e:	061b      	lsls	r3, r3, #24
10014120:	469c      	mov	ip, r3
10014122:	4460      	add	r0, ip
10014124:	e7e9      	b.n	100140fa <sinf+0x1a>
10014126:	2200      	movs	r2, #0
10014128:	2100      	movs	r1, #0
1001412a:	f000 ffb3 	bl	10015094 <__kernel_sinf>
1001412e:	e7e4      	b.n	100140fa <sinf+0x1a>
10014130:	9800      	ldr	r0, [sp, #0]
10014132:	2201      	movs	r2, #1
10014134:	f000 ffae 	bl	10015094 <__kernel_sinf>
10014138:	2380      	movs	r3, #128	; 0x80
1001413a:	061b      	lsls	r3, r3, #24
1001413c:	469c      	mov	ip, r3
1001413e:	4460      	add	r0, ip
10014140:	e7db      	b.n	100140fa <sinf+0x1a>
10014142:	9800      	ldr	r0, [sp, #0]
10014144:	f000 fb4a 	bl	100147dc <__kernel_cosf>
10014148:	e7d7      	b.n	100140fa <sinf+0x1a>
1001414a:	9800      	ldr	r0, [sp, #0]
1001414c:	2201      	movs	r2, #1
1001414e:	f000 ffa1 	bl	10015094 <__kernel_sinf>
10014152:	e7d2      	b.n	100140fa <sinf+0x1a>
10014154:	3f490fd8 	.word	0x3f490fd8
10014158:	7f7fffff 	.word	0x7f7fffff

1001415c <acosf>:
1001415c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001415e:	b08d      	sub	sp, #52	; 0x34
10014160:	1c04      	adds	r4, r0, #0
10014162:	f000 f84f 	bl	10014204 <__ieee754_acosf>
10014166:	2300      	movs	r3, #0
10014168:	4e23      	ldr	r6, [pc, #140]	; (100141f8 <acosf+0x9c>)
1001416a:	1c05      	adds	r5, r0, #0
1001416c:	56f3      	ldrsb	r3, [r6, r3]
1001416e:	3301      	adds	r3, #1
10014170:	d031      	beq.n	100141d6 <acosf+0x7a>
10014172:	1c21      	adds	r1, r4, #0
10014174:	1c20      	adds	r0, r4, #0
10014176:	f002 f999 	bl	100164ac <__aeabi_fcmpun>
1001417a:	1e07      	subs	r7, r0, #0
1001417c:	d12b      	bne.n	100141d6 <acosf+0x7a>
1001417e:	1c20      	adds	r0, r4, #0
10014180:	f7fd f8b2 	bl	100112e8 <fabsf>
10014184:	21fe      	movs	r1, #254	; 0xfe
10014186:	0589      	lsls	r1, r1, #22
10014188:	f001 fa98 	bl	100156bc <__aeabi_fcmpgt>
1001418c:	2800      	cmp	r0, #0
1001418e:	d022      	beq.n	100141d6 <acosf+0x7a>
10014190:	2301      	movs	r3, #1
10014192:	9302      	str	r3, [sp, #8]
10014194:	4b19      	ldr	r3, [pc, #100]	; (100141fc <acosf+0xa0>)
10014196:	1c20      	adds	r0, r4, #0
10014198:	9303      	str	r3, [sp, #12]
1001419a:	970a      	str	r7, [sp, #40]	; 0x28
1001419c:	f004 f814 	bl	100181c8 <__aeabi_f2d>
100141a0:	9006      	str	r0, [sp, #24]
100141a2:	9107      	str	r1, [sp, #28]
100141a4:	9004      	str	r0, [sp, #16]
100141a6:	9105      	str	r1, [sp, #20]
100141a8:	4815      	ldr	r0, [pc, #84]	; (10014200 <acosf+0xa4>)
100141aa:	f7fc ff7b 	bl	100110a4 <nan>
100141ae:	2300      	movs	r3, #0
100141b0:	56f3      	ldrsb	r3, [r6, r3]
100141b2:	9008      	str	r0, [sp, #32]
100141b4:	9109      	str	r1, [sp, #36]	; 0x24
100141b6:	2b02      	cmp	r3, #2
100141b8:	d010      	beq.n	100141dc <acosf+0x80>
100141ba:	a802      	add	r0, sp, #8
100141bc:	f7fc ff70 	bl	100110a0 <matherr>
100141c0:	2800      	cmp	r0, #0
100141c2:	d00b      	beq.n	100141dc <acosf+0x80>
100141c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100141c6:	9301      	str	r3, [sp, #4]
100141c8:	2b00      	cmp	r3, #0
100141ca:	d10f      	bne.n	100141ec <acosf+0x90>
100141cc:	9808      	ldr	r0, [sp, #32]
100141ce:	9909      	ldr	r1, [sp, #36]	; 0x24
100141d0:	f004 f84e 	bl	10018270 <__aeabi_d2f>
100141d4:	e000      	b.n	100141d8 <acosf+0x7c>
100141d6:	1c28      	adds	r0, r5, #0
100141d8:	b00d      	add	sp, #52	; 0x34
100141da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100141dc:	f004 f9dc 	bl	10018598 <__errno>
100141e0:	2321      	movs	r3, #33	; 0x21
100141e2:	6003      	str	r3, [r0, #0]
100141e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100141e6:	9301      	str	r3, [sp, #4]
100141e8:	2b00      	cmp	r3, #0
100141ea:	d0ef      	beq.n	100141cc <acosf+0x70>
100141ec:	f004 f9d4 	bl	10018598 <__errno>
100141f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100141f2:	9301      	str	r3, [sp, #4]
100141f4:	6003      	str	r3, [r0, #0]
100141f6:	e7e9      	b.n	100141cc <acosf+0x70>
100141f8:	1001b978 	.word	0x1001b978
100141fc:	1001b344 	.word	0x1001b344
10014200:	10019bbc 	.word	0x10019bbc

10014204 <__ieee754_acosf>:
10014204:	22fe      	movs	r2, #254	; 0xfe
10014206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014208:	0043      	lsls	r3, r0, #1
1001420a:	1c04      	adds	r4, r0, #0
1001420c:	085b      	lsrs	r3, r3, #1
1001420e:	0592      	lsls	r2, r2, #22
10014210:	4293      	cmp	r3, r2
10014212:	d011      	beq.n	10014238 <__ieee754_acosf+0x34>
10014214:	dc09      	bgt.n	1001422a <__ieee754_acosf+0x26>
10014216:	4a9d      	ldr	r2, [pc, #628]	; (1001448c <__ieee754_acosf+0x288>)
10014218:	4293      	cmp	r3, r2
1001421a:	dc12      	bgt.n	10014242 <__ieee754_acosf+0x3e>
1001421c:	228c      	movs	r2, #140	; 0x8c
1001421e:	0592      	lsls	r2, r2, #22
10014220:	4293      	cmp	r3, r2
10014222:	dd00      	ble.n	10014226 <__ieee754_acosf+0x22>
10014224:	e080      	b.n	10014328 <__ieee754_acosf+0x124>
10014226:	489a      	ldr	r0, [pc, #616]	; (10014490 <__ieee754_acosf+0x28c>)
10014228:	e005      	b.n	10014236 <__ieee754_acosf+0x32>
1001422a:	1c01      	adds	r1, r0, #0
1001422c:	f001 ffb8 	bl	100161a0 <__aeabi_fsub>
10014230:	1c01      	adds	r1, r0, #0
10014232:	f001 fcd7 	bl	10015be4 <__aeabi_fdiv>
10014236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014238:	2000      	movs	r0, #0
1001423a:	2c00      	cmp	r4, #0
1001423c:	dcfb      	bgt.n	10014236 <__ieee754_acosf+0x32>
1001423e:	4895      	ldr	r0, [pc, #596]	; (10014494 <__ieee754_acosf+0x290>)
10014240:	e7f9      	b.n	10014236 <__ieee754_acosf+0x32>
10014242:	2800      	cmp	r0, #0
10014244:	da00      	bge.n	10014248 <__ieee754_acosf+0x44>
10014246:	e0c3      	b.n	100143d0 <__ieee754_acosf+0x1cc>
10014248:	1c01      	adds	r1, r0, #0
1001424a:	20fe      	movs	r0, #254	; 0xfe
1001424c:	0580      	lsls	r0, r0, #22
1001424e:	f001 ffa7 	bl	100161a0 <__aeabi_fsub>
10014252:	21fc      	movs	r1, #252	; 0xfc
10014254:	0589      	lsls	r1, r1, #22
10014256:	f001 fe8f 	bl	10015f78 <__aeabi_fmul>
1001425a:	1c04      	adds	r4, r0, #0
1001425c:	f7fc fec4 	bl	10010fe8 <__ieee754_sqrtf>
10014260:	498d      	ldr	r1, [pc, #564]	; (10014498 <__ieee754_acosf+0x294>)
10014262:	1c06      	adds	r6, r0, #0
10014264:	0b05      	lsrs	r5, r0, #12
10014266:	1c20      	adds	r0, r4, #0
10014268:	f001 fe86 	bl	10015f78 <__aeabi_fmul>
1001426c:	498b      	ldr	r1, [pc, #556]	; (1001449c <__ieee754_acosf+0x298>)
1001426e:	f001 fb43 	bl	100158f8 <__aeabi_fadd>
10014272:	1c21      	adds	r1, r4, #0
10014274:	f001 fe80 	bl	10015f78 <__aeabi_fmul>
10014278:	4989      	ldr	r1, [pc, #548]	; (100144a0 <__ieee754_acosf+0x29c>)
1001427a:	f001 ff91 	bl	100161a0 <__aeabi_fsub>
1001427e:	1c21      	adds	r1, r4, #0
10014280:	f001 fe7a 	bl	10015f78 <__aeabi_fmul>
10014284:	4987      	ldr	r1, [pc, #540]	; (100144a4 <__ieee754_acosf+0x2a0>)
10014286:	f001 fb37 	bl	100158f8 <__aeabi_fadd>
1001428a:	1c21      	adds	r1, r4, #0
1001428c:	f001 fe74 	bl	10015f78 <__aeabi_fmul>
10014290:	4985      	ldr	r1, [pc, #532]	; (100144a8 <__ieee754_acosf+0x2a4>)
10014292:	f001 ff85 	bl	100161a0 <__aeabi_fsub>
10014296:	1c21      	adds	r1, r4, #0
10014298:	f001 fe6e 	bl	10015f78 <__aeabi_fmul>
1001429c:	4983      	ldr	r1, [pc, #524]	; (100144ac <__ieee754_acosf+0x2a8>)
1001429e:	f001 fb2b 	bl	100158f8 <__aeabi_fadd>
100142a2:	1c21      	adds	r1, r4, #0
100142a4:	f001 fe68 	bl	10015f78 <__aeabi_fmul>
100142a8:	4981      	ldr	r1, [pc, #516]	; (100144b0 <__ieee754_acosf+0x2ac>)
100142aa:	1c07      	adds	r7, r0, #0
100142ac:	1c20      	adds	r0, r4, #0
100142ae:	f001 fe63 	bl	10015f78 <__aeabi_fmul>
100142b2:	4980      	ldr	r1, [pc, #512]	; (100144b4 <__ieee754_acosf+0x2b0>)
100142b4:	f001 ff74 	bl	100161a0 <__aeabi_fsub>
100142b8:	1c21      	adds	r1, r4, #0
100142ba:	f001 fe5d 	bl	10015f78 <__aeabi_fmul>
100142be:	497e      	ldr	r1, [pc, #504]	; (100144b8 <__ieee754_acosf+0x2b4>)
100142c0:	f001 fb1a 	bl	100158f8 <__aeabi_fadd>
100142c4:	1c21      	adds	r1, r4, #0
100142c6:	f001 fe57 	bl	10015f78 <__aeabi_fmul>
100142ca:	497c      	ldr	r1, [pc, #496]	; (100144bc <__ieee754_acosf+0x2b8>)
100142cc:	f001 ff68 	bl	100161a0 <__aeabi_fsub>
100142d0:	1c21      	adds	r1, r4, #0
100142d2:	f001 fe51 	bl	10015f78 <__aeabi_fmul>
100142d6:	21fe      	movs	r1, #254	; 0xfe
100142d8:	0589      	lsls	r1, r1, #22
100142da:	f001 fb0d 	bl	100158f8 <__aeabi_fadd>
100142de:	1c01      	adds	r1, r0, #0
100142e0:	1c38      	adds	r0, r7, #0
100142e2:	f001 fc7f 	bl	10015be4 <__aeabi_fdiv>
100142e6:	1c31      	adds	r1, r6, #0
100142e8:	f001 fe46 	bl	10015f78 <__aeabi_fmul>
100142ec:	032d      	lsls	r5, r5, #12
100142ee:	1c07      	adds	r7, r0, #0
100142f0:	1c29      	adds	r1, r5, #0
100142f2:	1c28      	adds	r0, r5, #0
100142f4:	f001 fe40 	bl	10015f78 <__aeabi_fmul>
100142f8:	1c01      	adds	r1, r0, #0
100142fa:	1c20      	adds	r0, r4, #0
100142fc:	f001 ff50 	bl	100161a0 <__aeabi_fsub>
10014300:	1c29      	adds	r1, r5, #0
10014302:	1c04      	adds	r4, r0, #0
10014304:	1c30      	adds	r0, r6, #0
10014306:	f001 faf7 	bl	100158f8 <__aeabi_fadd>
1001430a:	1c01      	adds	r1, r0, #0
1001430c:	1c20      	adds	r0, r4, #0
1001430e:	f001 fc69 	bl	10015be4 <__aeabi_fdiv>
10014312:	1c01      	adds	r1, r0, #0
10014314:	1c38      	adds	r0, r7, #0
10014316:	f001 faef 	bl	100158f8 <__aeabi_fadd>
1001431a:	1c29      	adds	r1, r5, #0
1001431c:	f001 faec 	bl	100158f8 <__aeabi_fadd>
10014320:	1c01      	adds	r1, r0, #0
10014322:	f001 fae9 	bl	100158f8 <__aeabi_fadd>
10014326:	e786      	b.n	10014236 <__ieee754_acosf+0x32>
10014328:	1c01      	adds	r1, r0, #0
1001432a:	f001 fe25 	bl	10015f78 <__aeabi_fmul>
1001432e:	495a      	ldr	r1, [pc, #360]	; (10014498 <__ieee754_acosf+0x294>)
10014330:	1c05      	adds	r5, r0, #0
10014332:	f001 fe21 	bl	10015f78 <__aeabi_fmul>
10014336:	4959      	ldr	r1, [pc, #356]	; (1001449c <__ieee754_acosf+0x298>)
10014338:	f001 fade 	bl	100158f8 <__aeabi_fadd>
1001433c:	1c29      	adds	r1, r5, #0
1001433e:	f001 fe1b 	bl	10015f78 <__aeabi_fmul>
10014342:	4957      	ldr	r1, [pc, #348]	; (100144a0 <__ieee754_acosf+0x29c>)
10014344:	f001 ff2c 	bl	100161a0 <__aeabi_fsub>
10014348:	1c29      	adds	r1, r5, #0
1001434a:	f001 fe15 	bl	10015f78 <__aeabi_fmul>
1001434e:	4955      	ldr	r1, [pc, #340]	; (100144a4 <__ieee754_acosf+0x2a0>)
10014350:	f001 fad2 	bl	100158f8 <__aeabi_fadd>
10014354:	1c29      	adds	r1, r5, #0
10014356:	f001 fe0f 	bl	10015f78 <__aeabi_fmul>
1001435a:	4953      	ldr	r1, [pc, #332]	; (100144a8 <__ieee754_acosf+0x2a4>)
1001435c:	f001 ff20 	bl	100161a0 <__aeabi_fsub>
10014360:	1c29      	adds	r1, r5, #0
10014362:	f001 fe09 	bl	10015f78 <__aeabi_fmul>
10014366:	4951      	ldr	r1, [pc, #324]	; (100144ac <__ieee754_acosf+0x2a8>)
10014368:	f001 fac6 	bl	100158f8 <__aeabi_fadd>
1001436c:	1c29      	adds	r1, r5, #0
1001436e:	f001 fe03 	bl	10015f78 <__aeabi_fmul>
10014372:	494f      	ldr	r1, [pc, #316]	; (100144b0 <__ieee754_acosf+0x2ac>)
10014374:	1c06      	adds	r6, r0, #0
10014376:	1c28      	adds	r0, r5, #0
10014378:	f001 fdfe 	bl	10015f78 <__aeabi_fmul>
1001437c:	494d      	ldr	r1, [pc, #308]	; (100144b4 <__ieee754_acosf+0x2b0>)
1001437e:	f001 ff0f 	bl	100161a0 <__aeabi_fsub>
10014382:	1c29      	adds	r1, r5, #0
10014384:	f001 fdf8 	bl	10015f78 <__aeabi_fmul>
10014388:	494b      	ldr	r1, [pc, #300]	; (100144b8 <__ieee754_acosf+0x2b4>)
1001438a:	f001 fab5 	bl	100158f8 <__aeabi_fadd>
1001438e:	1c29      	adds	r1, r5, #0
10014390:	f001 fdf2 	bl	10015f78 <__aeabi_fmul>
10014394:	4949      	ldr	r1, [pc, #292]	; (100144bc <__ieee754_acosf+0x2b8>)
10014396:	f001 ff03 	bl	100161a0 <__aeabi_fsub>
1001439a:	1c29      	adds	r1, r5, #0
1001439c:	f001 fdec 	bl	10015f78 <__aeabi_fmul>
100143a0:	21fe      	movs	r1, #254	; 0xfe
100143a2:	0589      	lsls	r1, r1, #22
100143a4:	f001 faa8 	bl	100158f8 <__aeabi_fadd>
100143a8:	1c01      	adds	r1, r0, #0
100143aa:	1c30      	adds	r0, r6, #0
100143ac:	f001 fc1a 	bl	10015be4 <__aeabi_fdiv>
100143b0:	1c21      	adds	r1, r4, #0
100143b2:	f001 fde1 	bl	10015f78 <__aeabi_fmul>
100143b6:	1c01      	adds	r1, r0, #0
100143b8:	4841      	ldr	r0, [pc, #260]	; (100144c0 <__ieee754_acosf+0x2bc>)
100143ba:	f001 fef1 	bl	100161a0 <__aeabi_fsub>
100143be:	1c01      	adds	r1, r0, #0
100143c0:	1c20      	adds	r0, r4, #0
100143c2:	f001 feed 	bl	100161a0 <__aeabi_fsub>
100143c6:	1c01      	adds	r1, r0, #0
100143c8:	483e      	ldr	r0, [pc, #248]	; (100144c4 <__ieee754_acosf+0x2c0>)
100143ca:	f001 fee9 	bl	100161a0 <__aeabi_fsub>
100143ce:	e732      	b.n	10014236 <__ieee754_acosf+0x32>
100143d0:	21fe      	movs	r1, #254	; 0xfe
100143d2:	0589      	lsls	r1, r1, #22
100143d4:	f001 fa90 	bl	100158f8 <__aeabi_fadd>
100143d8:	21fc      	movs	r1, #252	; 0xfc
100143da:	0589      	lsls	r1, r1, #22
100143dc:	f001 fdcc 	bl	10015f78 <__aeabi_fmul>
100143e0:	492d      	ldr	r1, [pc, #180]	; (10014498 <__ieee754_acosf+0x294>)
100143e2:	1c04      	adds	r4, r0, #0
100143e4:	f001 fdc8 	bl	10015f78 <__aeabi_fmul>
100143e8:	492c      	ldr	r1, [pc, #176]	; (1001449c <__ieee754_acosf+0x298>)
100143ea:	f001 fa85 	bl	100158f8 <__aeabi_fadd>
100143ee:	1c21      	adds	r1, r4, #0
100143f0:	f001 fdc2 	bl	10015f78 <__aeabi_fmul>
100143f4:	492a      	ldr	r1, [pc, #168]	; (100144a0 <__ieee754_acosf+0x29c>)
100143f6:	f001 fed3 	bl	100161a0 <__aeabi_fsub>
100143fa:	1c21      	adds	r1, r4, #0
100143fc:	f001 fdbc 	bl	10015f78 <__aeabi_fmul>
10014400:	4928      	ldr	r1, [pc, #160]	; (100144a4 <__ieee754_acosf+0x2a0>)
10014402:	f001 fa79 	bl	100158f8 <__aeabi_fadd>
10014406:	1c21      	adds	r1, r4, #0
10014408:	f001 fdb6 	bl	10015f78 <__aeabi_fmul>
1001440c:	4926      	ldr	r1, [pc, #152]	; (100144a8 <__ieee754_acosf+0x2a4>)
1001440e:	f001 fec7 	bl	100161a0 <__aeabi_fsub>
10014412:	1c21      	adds	r1, r4, #0
10014414:	f001 fdb0 	bl	10015f78 <__aeabi_fmul>
10014418:	4924      	ldr	r1, [pc, #144]	; (100144ac <__ieee754_acosf+0x2a8>)
1001441a:	f001 fa6d 	bl	100158f8 <__aeabi_fadd>
1001441e:	1c21      	adds	r1, r4, #0
10014420:	f001 fdaa 	bl	10015f78 <__aeabi_fmul>
10014424:	1c06      	adds	r6, r0, #0
10014426:	1c20      	adds	r0, r4, #0
10014428:	f7fc fdde 	bl	10010fe8 <__ieee754_sqrtf>
1001442c:	4920      	ldr	r1, [pc, #128]	; (100144b0 <__ieee754_acosf+0x2ac>)
1001442e:	1c05      	adds	r5, r0, #0
10014430:	1c20      	adds	r0, r4, #0
10014432:	f001 fda1 	bl	10015f78 <__aeabi_fmul>
10014436:	491f      	ldr	r1, [pc, #124]	; (100144b4 <__ieee754_acosf+0x2b0>)
10014438:	f001 feb2 	bl	100161a0 <__aeabi_fsub>
1001443c:	1c21      	adds	r1, r4, #0
1001443e:	f001 fd9b 	bl	10015f78 <__aeabi_fmul>
10014442:	491d      	ldr	r1, [pc, #116]	; (100144b8 <__ieee754_acosf+0x2b4>)
10014444:	f001 fa58 	bl	100158f8 <__aeabi_fadd>
10014448:	1c21      	adds	r1, r4, #0
1001444a:	f001 fd95 	bl	10015f78 <__aeabi_fmul>
1001444e:	491b      	ldr	r1, [pc, #108]	; (100144bc <__ieee754_acosf+0x2b8>)
10014450:	f001 fea6 	bl	100161a0 <__aeabi_fsub>
10014454:	1c21      	adds	r1, r4, #0
10014456:	f001 fd8f 	bl	10015f78 <__aeabi_fmul>
1001445a:	21fe      	movs	r1, #254	; 0xfe
1001445c:	0589      	lsls	r1, r1, #22
1001445e:	f001 fa4b 	bl	100158f8 <__aeabi_fadd>
10014462:	1c01      	adds	r1, r0, #0
10014464:	1c30      	adds	r0, r6, #0
10014466:	f001 fbbd 	bl	10015be4 <__aeabi_fdiv>
1001446a:	1c29      	adds	r1, r5, #0
1001446c:	f001 fd84 	bl	10015f78 <__aeabi_fmul>
10014470:	4913      	ldr	r1, [pc, #76]	; (100144c0 <__ieee754_acosf+0x2bc>)
10014472:	f001 fe95 	bl	100161a0 <__aeabi_fsub>
10014476:	1c29      	adds	r1, r5, #0
10014478:	f001 fa3e 	bl	100158f8 <__aeabi_fadd>
1001447c:	1c01      	adds	r1, r0, #0
1001447e:	f001 fa3b 	bl	100158f8 <__aeabi_fadd>
10014482:	1c01      	adds	r1, r0, #0
10014484:	4810      	ldr	r0, [pc, #64]	; (100144c8 <__ieee754_acosf+0x2c4>)
10014486:	f001 fe8b 	bl	100161a0 <__aeabi_fsub>
1001448a:	e6d4      	b.n	10014236 <__ieee754_acosf+0x32>
1001448c:	3effffff 	.word	0x3effffff
10014490:	3fc90fdb 	.word	0x3fc90fdb
10014494:	40490fdb 	.word	0x40490fdb
10014498:	3811ef08 	.word	0x3811ef08
1001449c:	3a4f7f04 	.word	0x3a4f7f04
100144a0:	3d241146 	.word	0x3d241146
100144a4:	3e4e0aa8 	.word	0x3e4e0aa8
100144a8:	3ea6b090 	.word	0x3ea6b090
100144ac:	3e2aaaab 	.word	0x3e2aaaab
100144b0:	3d9dc62e 	.word	0x3d9dc62e
100144b4:	3f303361 	.word	0x3f303361
100144b8:	4001572d 	.word	0x4001572d
100144bc:	4019d139 	.word	0x4019d139
100144c0:	33a22168 	.word	0x33a22168
100144c4:	3fc90fda 	.word	0x3fc90fda
100144c8:	40490fda 	.word	0x40490fda

100144cc <__ieee754_rem_pio2f>:
100144cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100144ce:	465f      	mov	r7, fp
100144d0:	4656      	mov	r6, sl
100144d2:	4644      	mov	r4, r8
100144d4:	464d      	mov	r5, r9
100144d6:	b4f0      	push	{r4, r5, r6, r7}
100144d8:	0043      	lsls	r3, r0, #1
100144da:	085f      	lsrs	r7, r3, #1
100144dc:	4bb1      	ldr	r3, [pc, #708]	; (100147a4 <__ieee754_rem_pio2f+0x2d8>)
100144de:	b089      	sub	sp, #36	; 0x24
100144e0:	000c      	movs	r4, r1
100144e2:	0006      	movs	r6, r0
100144e4:	429f      	cmp	r7, r3
100144e6:	dd6f      	ble.n	100145c8 <__ieee754_rem_pio2f+0xfc>
100144e8:	4baf      	ldr	r3, [pc, #700]	; (100147a8 <__ieee754_rem_pio2f+0x2dc>)
100144ea:	429f      	cmp	r7, r3
100144ec:	dc1b      	bgt.n	10014526 <__ieee754_rem_pio2f+0x5a>
100144ee:	49af      	ldr	r1, [pc, #700]	; (100147ac <__ieee754_rem_pio2f+0x2e0>)
100144f0:	2800      	cmp	r0, #0
100144f2:	dc00      	bgt.n	100144f6 <__ieee754_rem_pio2f+0x2a>
100144f4:	e10b      	b.n	1001470e <__ieee754_rem_pio2f+0x242>
100144f6:	f001 fe53 	bl	100161a0 <__aeabi_fsub>
100144fa:	230f      	movs	r3, #15
100144fc:	003a      	movs	r2, r7
100144fe:	439a      	bics	r2, r3
10014500:	4bab      	ldr	r3, [pc, #684]	; (100147b0 <__ieee754_rem_pio2f+0x2e4>)
10014502:	1c05      	adds	r5, r0, #0
10014504:	429a      	cmp	r2, r3
10014506:	d100      	bne.n	1001450a <__ieee754_rem_pio2f+0x3e>
10014508:	e070      	b.n	100145ec <__ieee754_rem_pio2f+0x120>
1001450a:	49aa      	ldr	r1, [pc, #680]	; (100147b4 <__ieee754_rem_pio2f+0x2e8>)
1001450c:	f001 fe48 	bl	100161a0 <__aeabi_fsub>
10014510:	1c01      	adds	r1, r0, #0
10014512:	6020      	str	r0, [r4, #0]
10014514:	1c28      	adds	r0, r5, #0
10014516:	f001 fe43 	bl	100161a0 <__aeabi_fsub>
1001451a:	49a6      	ldr	r1, [pc, #664]	; (100147b4 <__ieee754_rem_pio2f+0x2e8>)
1001451c:	f001 fe40 	bl	100161a0 <__aeabi_fsub>
10014520:	6060      	str	r0, [r4, #4]
10014522:	2001      	movs	r0, #1
10014524:	e054      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
10014526:	4ba4      	ldr	r3, [pc, #656]	; (100147b8 <__ieee754_rem_pio2f+0x2ec>)
10014528:	429f      	cmp	r7, r3
1001452a:	dc00      	bgt.n	1001452e <__ieee754_rem_pio2f+0x62>
1001452c:	e070      	b.n	10014610 <__ieee754_rem_pio2f+0x144>
1001452e:	4ba3      	ldr	r3, [pc, #652]	; (100147bc <__ieee754_rem_pio2f+0x2f0>)
10014530:	429f      	cmp	r7, r3
10014532:	dc54      	bgt.n	100145de <__ieee754_rem_pio2f+0x112>
10014534:	2286      	movs	r2, #134	; 0x86
10014536:	4252      	negs	r2, r2
10014538:	4691      	mov	r9, r2
1001453a:	15fb      	asrs	r3, r7, #23
1001453c:	4499      	add	r9, r3
1001453e:	464b      	mov	r3, r9
10014540:	05dd      	lsls	r5, r3, #23
10014542:	1b7d      	subs	r5, r7, r5
10014544:	1c28      	adds	r0, r5, #0
10014546:	f001 ffc9 	bl	100164dc <__aeabi_f2iz>
1001454a:	f001 ffe9 	bl	10016520 <__aeabi_i2f>
1001454e:	1c01      	adds	r1, r0, #0
10014550:	9005      	str	r0, [sp, #20]
10014552:	1c28      	adds	r0, r5, #0
10014554:	f001 fe24 	bl	100161a0 <__aeabi_fsub>
10014558:	2187      	movs	r1, #135	; 0x87
1001455a:	05c9      	lsls	r1, r1, #23
1001455c:	f001 fd0c 	bl	10015f78 <__aeabi_fmul>
10014560:	4680      	mov	r8, r0
10014562:	f001 ffbb 	bl	100164dc <__aeabi_f2iz>
10014566:	f001 ffdb 	bl	10016520 <__aeabi_i2f>
1001456a:	1c01      	adds	r1, r0, #0
1001456c:	9006      	str	r0, [sp, #24]
1001456e:	1c05      	adds	r5, r0, #0
10014570:	4640      	mov	r0, r8
10014572:	f001 fe15 	bl	100161a0 <__aeabi_fsub>
10014576:	2187      	movs	r1, #135	; 0x87
10014578:	05c9      	lsls	r1, r1, #23
1001457a:	f001 fcfd 	bl	10015f78 <__aeabi_fmul>
1001457e:	2100      	movs	r1, #0
10014580:	9007      	str	r0, [sp, #28]
10014582:	f001 f881 	bl	10015688 <__aeabi_fcmpeq>
10014586:	2800      	cmp	r0, #0
10014588:	d100      	bne.n	1001458c <__ieee754_rem_pio2f+0xc0>
1001458a:	e0d8      	b.n	1001473e <__ieee754_rem_pio2f+0x272>
1001458c:	2100      	movs	r1, #0
1001458e:	1c28      	adds	r0, r5, #0
10014590:	f001 f87a 	bl	10015688 <__aeabi_fcmpeq>
10014594:	2202      	movs	r2, #2
10014596:	1e43      	subs	r3, r0, #1
10014598:	4198      	sbcs	r0, r3
1001459a:	1a13      	subs	r3, r2, r0
1001459c:	4a88      	ldr	r2, [pc, #544]	; (100147c0 <__ieee754_rem_pio2f+0x2f4>)
1001459e:	0021      	movs	r1, r4
100145a0:	9201      	str	r2, [sp, #4]
100145a2:	2202      	movs	r2, #2
100145a4:	a805      	add	r0, sp, #20
100145a6:	9200      	str	r2, [sp, #0]
100145a8:	464a      	mov	r2, r9
100145aa:	f000 f9e1 	bl	10014970 <__kernel_rem_pio2f>
100145ae:	2e00      	cmp	r6, #0
100145b0:	da0e      	bge.n	100145d0 <__ieee754_rem_pio2f+0x104>
100145b2:	2280      	movs	r2, #128	; 0x80
100145b4:	0612      	lsls	r2, r2, #24
100145b6:	4694      	mov	ip, r2
100145b8:	6823      	ldr	r3, [r4, #0]
100145ba:	4240      	negs	r0, r0
100145bc:	4463      	add	r3, ip
100145be:	6023      	str	r3, [r4, #0]
100145c0:	6863      	ldr	r3, [r4, #4]
100145c2:	4463      	add	r3, ip
100145c4:	6063      	str	r3, [r4, #4]
100145c6:	e003      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
100145c8:	2300      	movs	r3, #0
100145ca:	6008      	str	r0, [r1, #0]
100145cc:	2000      	movs	r0, #0
100145ce:	604b      	str	r3, [r1, #4]
100145d0:	b009      	add	sp, #36	; 0x24
100145d2:	bc3c      	pop	{r2, r3, r4, r5}
100145d4:	4690      	mov	r8, r2
100145d6:	4699      	mov	r9, r3
100145d8:	46a2      	mov	sl, r4
100145da:	46ab      	mov	fp, r5
100145dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145de:	1c01      	adds	r1, r0, #0
100145e0:	f001 fdde 	bl	100161a0 <__aeabi_fsub>
100145e4:	6060      	str	r0, [r4, #4]
100145e6:	6020      	str	r0, [r4, #0]
100145e8:	2000      	movs	r0, #0
100145ea:	e7f1      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
100145ec:	4975      	ldr	r1, [pc, #468]	; (100147c4 <__ieee754_rem_pio2f+0x2f8>)
100145ee:	f001 fdd7 	bl	100161a0 <__aeabi_fsub>
100145f2:	4975      	ldr	r1, [pc, #468]	; (100147c8 <__ieee754_rem_pio2f+0x2fc>)
100145f4:	1c05      	adds	r5, r0, #0
100145f6:	f001 fdd3 	bl	100161a0 <__aeabi_fsub>
100145fa:	1c01      	adds	r1, r0, #0
100145fc:	6020      	str	r0, [r4, #0]
100145fe:	1c28      	adds	r0, r5, #0
10014600:	f001 fdce 	bl	100161a0 <__aeabi_fsub>
10014604:	4970      	ldr	r1, [pc, #448]	; (100147c8 <__ieee754_rem_pio2f+0x2fc>)
10014606:	f001 fdcb 	bl	100161a0 <__aeabi_fsub>
1001460a:	6060      	str	r0, [r4, #4]
1001460c:	2001      	movs	r0, #1
1001460e:	e7df      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
10014610:	f7fc fe6a 	bl	100112e8 <fabsf>
10014614:	496d      	ldr	r1, [pc, #436]	; (100147cc <__ieee754_rem_pio2f+0x300>)
10014616:	4680      	mov	r8, r0
10014618:	f001 fcae 	bl	10015f78 <__aeabi_fmul>
1001461c:	21fc      	movs	r1, #252	; 0xfc
1001461e:	0589      	lsls	r1, r1, #22
10014620:	f001 f96a 	bl	100158f8 <__aeabi_fadd>
10014624:	f001 ff5a 	bl	100164dc <__aeabi_f2iz>
10014628:	0005      	movs	r5, r0
1001462a:	f001 ff79 	bl	10016520 <__aeabi_i2f>
1001462e:	495f      	ldr	r1, [pc, #380]	; (100147ac <__ieee754_rem_pio2f+0x2e0>)
10014630:	4681      	mov	r9, r0
10014632:	f001 fca1 	bl	10015f78 <__aeabi_fmul>
10014636:	1c01      	adds	r1, r0, #0
10014638:	4640      	mov	r0, r8
1001463a:	f001 fdb1 	bl	100161a0 <__aeabi_fsub>
1001463e:	495d      	ldr	r1, [pc, #372]	; (100147b4 <__ieee754_rem_pio2f+0x2e8>)
10014640:	4680      	mov	r8, r0
10014642:	4648      	mov	r0, r9
10014644:	f001 fc98 	bl	10015f78 <__aeabi_fmul>
10014648:	4682      	mov	sl, r0
1001464a:	2d1f      	cmp	r5, #31
1001464c:	dc26      	bgt.n	1001469c <__ieee754_rem_pio2f+0x1d0>
1001464e:	23ff      	movs	r3, #255	; 0xff
10014650:	003a      	movs	r2, r7
10014652:	495f      	ldr	r1, [pc, #380]	; (100147d0 <__ieee754_rem_pio2f+0x304>)
10014654:	439a      	bics	r2, r3
10014656:	1e6b      	subs	r3, r5, #1
10014658:	009b      	lsls	r3, r3, #2
1001465a:	585b      	ldr	r3, [r3, r1]
1001465c:	429a      	cmp	r2, r3
1001465e:	d01d      	beq.n	1001469c <__ieee754_rem_pio2f+0x1d0>
10014660:	4651      	mov	r1, sl
10014662:	4640      	mov	r0, r8
10014664:	f001 fd9c 	bl	100161a0 <__aeabi_fsub>
10014668:	4683      	mov	fp, r0
1001466a:	465b      	mov	r3, fp
1001466c:	6023      	str	r3, [r4, #0]
1001466e:	4659      	mov	r1, fp
10014670:	4640      	mov	r0, r8
10014672:	f001 fd95 	bl	100161a0 <__aeabi_fsub>
10014676:	4651      	mov	r1, sl
10014678:	f001 fd92 	bl	100161a0 <__aeabi_fsub>
1001467c:	1c03      	adds	r3, r0, #0
1001467e:	6060      	str	r0, [r4, #4]
10014680:	0028      	movs	r0, r5
10014682:	2e00      	cmp	r6, #0
10014684:	daa4      	bge.n	100145d0 <__ieee754_rem_pio2f+0x104>
10014686:	2280      	movs	r2, #128	; 0x80
10014688:	0612      	lsls	r2, r2, #24
1001468a:	445a      	add	r2, fp
1001468c:	6022      	str	r2, [r4, #0]
1001468e:	2280      	movs	r2, #128	; 0x80
10014690:	0612      	lsls	r2, r2, #24
10014692:	4694      	mov	ip, r2
10014694:	4463      	add	r3, ip
10014696:	6063      	str	r3, [r4, #4]
10014698:	4268      	negs	r0, r5
1001469a:	e799      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
1001469c:	4651      	mov	r1, sl
1001469e:	4640      	mov	r0, r8
100146a0:	f001 fd7e 	bl	100161a0 <__aeabi_fsub>
100146a4:	15fb      	asrs	r3, r7, #23
100146a6:	21ff      	movs	r1, #255	; 0xff
100146a8:	001a      	movs	r2, r3
100146aa:	9302      	str	r3, [sp, #8]
100146ac:	0dc3      	lsrs	r3, r0, #23
100146ae:	400b      	ands	r3, r1
100146b0:	4683      	mov	fp, r0
100146b2:	1ad3      	subs	r3, r2, r3
100146b4:	2b08      	cmp	r3, #8
100146b6:	ddd8      	ble.n	1001466a <__ieee754_rem_pio2f+0x19e>
100146b8:	4942      	ldr	r1, [pc, #264]	; (100147c4 <__ieee754_rem_pio2f+0x2f8>)
100146ba:	4648      	mov	r0, r9
100146bc:	f001 fc5c 	bl	10015f78 <__aeabi_fmul>
100146c0:	1c07      	adds	r7, r0, #0
100146c2:	1c01      	adds	r1, r0, #0
100146c4:	4640      	mov	r0, r8
100146c6:	f001 fd6b 	bl	100161a0 <__aeabi_fsub>
100146ca:	4683      	mov	fp, r0
100146cc:	1c01      	adds	r1, r0, #0
100146ce:	9003      	str	r0, [sp, #12]
100146d0:	4640      	mov	r0, r8
100146d2:	f001 fd65 	bl	100161a0 <__aeabi_fsub>
100146d6:	1c39      	adds	r1, r7, #0
100146d8:	f001 fd62 	bl	100161a0 <__aeabi_fsub>
100146dc:	493a      	ldr	r1, [pc, #232]	; (100147c8 <__ieee754_rem_pio2f+0x2fc>)
100146de:	1c07      	adds	r7, r0, #0
100146e0:	4648      	mov	r0, r9
100146e2:	f001 fc49 	bl	10015f78 <__aeabi_fmul>
100146e6:	1c39      	adds	r1, r7, #0
100146e8:	f001 fd5a 	bl	100161a0 <__aeabi_fsub>
100146ec:	1c01      	adds	r1, r0, #0
100146ee:	4682      	mov	sl, r0
100146f0:	4658      	mov	r0, fp
100146f2:	f001 fd55 	bl	100161a0 <__aeabi_fsub>
100146f6:	22ff      	movs	r2, #255	; 0xff
100146f8:	0dc3      	lsrs	r3, r0, #23
100146fa:	4013      	ands	r3, r2
100146fc:	9a02      	ldr	r2, [sp, #8]
100146fe:	465f      	mov	r7, fp
10014700:	1ad3      	subs	r3, r2, r3
10014702:	4683      	mov	fp, r0
10014704:	2b19      	cmp	r3, #25
10014706:	dc2f      	bgt.n	10014768 <__ieee754_rem_pio2f+0x29c>
10014708:	6020      	str	r0, [r4, #0]
1001470a:	46b8      	mov	r8, r7
1001470c:	e7af      	b.n	1001466e <__ieee754_rem_pio2f+0x1a2>
1001470e:	f001 f8f3 	bl	100158f8 <__aeabi_fadd>
10014712:	230f      	movs	r3, #15
10014714:	003a      	movs	r2, r7
10014716:	439a      	bics	r2, r3
10014718:	4b25      	ldr	r3, [pc, #148]	; (100147b0 <__ieee754_rem_pio2f+0x2e4>)
1001471a:	1c05      	adds	r5, r0, #0
1001471c:	429a      	cmp	r2, r3
1001471e:	d010      	beq.n	10014742 <__ieee754_rem_pio2f+0x276>
10014720:	4924      	ldr	r1, [pc, #144]	; (100147b4 <__ieee754_rem_pio2f+0x2e8>)
10014722:	f001 f8e9 	bl	100158f8 <__aeabi_fadd>
10014726:	1c01      	adds	r1, r0, #0
10014728:	6020      	str	r0, [r4, #0]
1001472a:	1c28      	adds	r0, r5, #0
1001472c:	f001 fd38 	bl	100161a0 <__aeabi_fsub>
10014730:	4920      	ldr	r1, [pc, #128]	; (100147b4 <__ieee754_rem_pio2f+0x2e8>)
10014732:	f001 f8e1 	bl	100158f8 <__aeabi_fadd>
10014736:	6060      	str	r0, [r4, #4]
10014738:	2001      	movs	r0, #1
1001473a:	4240      	negs	r0, r0
1001473c:	e748      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
1001473e:	2303      	movs	r3, #3
10014740:	e72c      	b.n	1001459c <__ieee754_rem_pio2f+0xd0>
10014742:	4920      	ldr	r1, [pc, #128]	; (100147c4 <__ieee754_rem_pio2f+0x2f8>)
10014744:	f001 f8d8 	bl	100158f8 <__aeabi_fadd>
10014748:	491f      	ldr	r1, [pc, #124]	; (100147c8 <__ieee754_rem_pio2f+0x2fc>)
1001474a:	1c05      	adds	r5, r0, #0
1001474c:	f001 f8d4 	bl	100158f8 <__aeabi_fadd>
10014750:	1c01      	adds	r1, r0, #0
10014752:	6020      	str	r0, [r4, #0]
10014754:	1c28      	adds	r0, r5, #0
10014756:	f001 fd23 	bl	100161a0 <__aeabi_fsub>
1001475a:	491b      	ldr	r1, [pc, #108]	; (100147c8 <__ieee754_rem_pio2f+0x2fc>)
1001475c:	f001 f8cc 	bl	100158f8 <__aeabi_fadd>
10014760:	6060      	str	r0, [r4, #4]
10014762:	2001      	movs	r0, #1
10014764:	4240      	negs	r0, r0
10014766:	e733      	b.n	100145d0 <__ieee754_rem_pio2f+0x104>
10014768:	491a      	ldr	r1, [pc, #104]	; (100147d4 <__ieee754_rem_pio2f+0x308>)
1001476a:	4648      	mov	r0, r9
1001476c:	f001 fc04 	bl	10015f78 <__aeabi_fmul>
10014770:	9b03      	ldr	r3, [sp, #12]
10014772:	1c07      	adds	r7, r0, #0
10014774:	1c01      	adds	r1, r0, #0
10014776:	1c18      	adds	r0, r3, #0
10014778:	469a      	mov	sl, r3
1001477a:	f001 fd11 	bl	100161a0 <__aeabi_fsub>
1001477e:	1c01      	adds	r1, r0, #0
10014780:	4680      	mov	r8, r0
10014782:	4650      	mov	r0, sl
10014784:	f001 fd0c 	bl	100161a0 <__aeabi_fsub>
10014788:	1c39      	adds	r1, r7, #0
1001478a:	f001 fd09 	bl	100161a0 <__aeabi_fsub>
1001478e:	4912      	ldr	r1, [pc, #72]	; (100147d8 <__ieee754_rem_pio2f+0x30c>)
10014790:	1c07      	adds	r7, r0, #0
10014792:	4648      	mov	r0, r9
10014794:	f001 fbf0 	bl	10015f78 <__aeabi_fmul>
10014798:	1c39      	adds	r1, r7, #0
1001479a:	f001 fd01 	bl	100161a0 <__aeabi_fsub>
1001479e:	4682      	mov	sl, r0
100147a0:	e75e      	b.n	10014660 <__ieee754_rem_pio2f+0x194>
100147a2:	46c0      	nop			; (mov r8, r8)
100147a4:	3f490fd8 	.word	0x3f490fd8
100147a8:	4016cbe3 	.word	0x4016cbe3
100147ac:	3fc90f80 	.word	0x3fc90f80
100147b0:	3fc90fd0 	.word	0x3fc90fd0
100147b4:	37354443 	.word	0x37354443
100147b8:	43490f80 	.word	0x43490f80
100147bc:	7f7fffff 	.word	0x7f7fffff
100147c0:	1001b3cc 	.word	0x1001b3cc
100147c4:	37354400 	.word	0x37354400
100147c8:	2e85a308 	.word	0x2e85a308
100147cc:	3f22f984 	.word	0x3f22f984
100147d0:	1001b34c 	.word	0x1001b34c
100147d4:	2e85a300 	.word	0x2e85a300
100147d8:	248d3132 	.word	0x248d3132

100147dc <__kernel_cosf>:
100147dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100147de:	464f      	mov	r7, r9
100147e0:	4646      	mov	r6, r8
100147e2:	4b58      	ldr	r3, [pc, #352]	; (10014944 <__kernel_cosf+0x168>)
100147e4:	0045      	lsls	r5, r0, #1
100147e6:	b4c0      	push	{r6, r7}
100147e8:	086d      	lsrs	r5, r5, #1
100147ea:	1c06      	adds	r6, r0, #0
100147ec:	1c0f      	adds	r7, r1, #0
100147ee:	429d      	cmp	r5, r3
100147f0:	dc48      	bgt.n	10014884 <__kernel_cosf+0xa8>
100147f2:	f001 fe73 	bl	100164dc <__aeabi_f2iz>
100147f6:	2800      	cmp	r0, #0
100147f8:	d100      	bne.n	100147fc <__kernel_cosf+0x20>
100147fa:	e09f      	b.n	1001493c <__kernel_cosf+0x160>
100147fc:	1c31      	adds	r1, r6, #0
100147fe:	1c30      	adds	r0, r6, #0
10014800:	f001 fbba 	bl	10015f78 <__aeabi_fmul>
10014804:	4950      	ldr	r1, [pc, #320]	; (10014948 <__kernel_cosf+0x16c>)
10014806:	1c04      	adds	r4, r0, #0
10014808:	f001 fbb6 	bl	10015f78 <__aeabi_fmul>
1001480c:	494f      	ldr	r1, [pc, #316]	; (1001494c <__kernel_cosf+0x170>)
1001480e:	f001 f873 	bl	100158f8 <__aeabi_fadd>
10014812:	1c21      	adds	r1, r4, #0
10014814:	f001 fbb0 	bl	10015f78 <__aeabi_fmul>
10014818:	494d      	ldr	r1, [pc, #308]	; (10014950 <__kernel_cosf+0x174>)
1001481a:	f001 fcc1 	bl	100161a0 <__aeabi_fsub>
1001481e:	1c21      	adds	r1, r4, #0
10014820:	f001 fbaa 	bl	10015f78 <__aeabi_fmul>
10014824:	494b      	ldr	r1, [pc, #300]	; (10014954 <__kernel_cosf+0x178>)
10014826:	f001 f867 	bl	100158f8 <__aeabi_fadd>
1001482a:	1c21      	adds	r1, r4, #0
1001482c:	f001 fba4 	bl	10015f78 <__aeabi_fmul>
10014830:	4949      	ldr	r1, [pc, #292]	; (10014958 <__kernel_cosf+0x17c>)
10014832:	f001 fcb5 	bl	100161a0 <__aeabi_fsub>
10014836:	1c21      	adds	r1, r4, #0
10014838:	f001 fb9e 	bl	10015f78 <__aeabi_fmul>
1001483c:	4947      	ldr	r1, [pc, #284]	; (1001495c <__kernel_cosf+0x180>)
1001483e:	f001 f85b 	bl	100158f8 <__aeabi_fadd>
10014842:	1c21      	adds	r1, r4, #0
10014844:	f001 fb98 	bl	10015f78 <__aeabi_fmul>
10014848:	4680      	mov	r8, r0
1001484a:	21fc      	movs	r1, #252	; 0xfc
1001484c:	1c20      	adds	r0, r4, #0
1001484e:	0589      	lsls	r1, r1, #22
10014850:	f001 fb92 	bl	10015f78 <__aeabi_fmul>
10014854:	4641      	mov	r1, r8
10014856:	1c05      	adds	r5, r0, #0
10014858:	1c20      	adds	r0, r4, #0
1001485a:	f001 fb8d 	bl	10015f78 <__aeabi_fmul>
1001485e:	1c39      	adds	r1, r7, #0
10014860:	1c04      	adds	r4, r0, #0
10014862:	1c30      	adds	r0, r6, #0
10014864:	f001 fb88 	bl	10015f78 <__aeabi_fmul>
10014868:	1c01      	adds	r1, r0, #0
1001486a:	1c20      	adds	r0, r4, #0
1001486c:	f001 fc98 	bl	100161a0 <__aeabi_fsub>
10014870:	1c01      	adds	r1, r0, #0
10014872:	1c28      	adds	r0, r5, #0
10014874:	f001 fc94 	bl	100161a0 <__aeabi_fsub>
10014878:	1c01      	adds	r1, r0, #0
1001487a:	20fe      	movs	r0, #254	; 0xfe
1001487c:	0580      	lsls	r0, r0, #22
1001487e:	f001 fc8f 	bl	100161a0 <__aeabi_fsub>
10014882:	e053      	b.n	1001492c <__kernel_cosf+0x150>
10014884:	1c01      	adds	r1, r0, #0
10014886:	f001 fb77 	bl	10015f78 <__aeabi_fmul>
1001488a:	492f      	ldr	r1, [pc, #188]	; (10014948 <__kernel_cosf+0x16c>)
1001488c:	1c04      	adds	r4, r0, #0
1001488e:	f001 fb73 	bl	10015f78 <__aeabi_fmul>
10014892:	492e      	ldr	r1, [pc, #184]	; (1001494c <__kernel_cosf+0x170>)
10014894:	f001 f830 	bl	100158f8 <__aeabi_fadd>
10014898:	1c21      	adds	r1, r4, #0
1001489a:	f001 fb6d 	bl	10015f78 <__aeabi_fmul>
1001489e:	492c      	ldr	r1, [pc, #176]	; (10014950 <__kernel_cosf+0x174>)
100148a0:	f001 fc7e 	bl	100161a0 <__aeabi_fsub>
100148a4:	1c21      	adds	r1, r4, #0
100148a6:	f001 fb67 	bl	10015f78 <__aeabi_fmul>
100148aa:	492a      	ldr	r1, [pc, #168]	; (10014954 <__kernel_cosf+0x178>)
100148ac:	f001 f824 	bl	100158f8 <__aeabi_fadd>
100148b0:	1c21      	adds	r1, r4, #0
100148b2:	f001 fb61 	bl	10015f78 <__aeabi_fmul>
100148b6:	4928      	ldr	r1, [pc, #160]	; (10014958 <__kernel_cosf+0x17c>)
100148b8:	f001 fc72 	bl	100161a0 <__aeabi_fsub>
100148bc:	1c21      	adds	r1, r4, #0
100148be:	f001 fb5b 	bl	10015f78 <__aeabi_fmul>
100148c2:	4926      	ldr	r1, [pc, #152]	; (1001495c <__kernel_cosf+0x180>)
100148c4:	f001 f818 	bl	100158f8 <__aeabi_fadd>
100148c8:	1c21      	adds	r1, r4, #0
100148ca:	f001 fb55 	bl	10015f78 <__aeabi_fmul>
100148ce:	4b24      	ldr	r3, [pc, #144]	; (10014960 <__kernel_cosf+0x184>)
100148d0:	4680      	mov	r8, r0
100148d2:	429d      	cmp	r5, r3
100148d4:	ddb9      	ble.n	1001484a <__kernel_cosf+0x6e>
100148d6:	4b23      	ldr	r3, [pc, #140]	; (10014964 <__kernel_cosf+0x188>)
100148d8:	429d      	cmp	r5, r3
100148da:	dc2b      	bgt.n	10014934 <__kernel_cosf+0x158>
100148dc:	23ff      	movs	r3, #255	; 0xff
100148de:	061b      	lsls	r3, r3, #24
100148e0:	469c      	mov	ip, r3
100148e2:	20fe      	movs	r0, #254	; 0xfe
100148e4:	4465      	add	r5, ip
100148e6:	1c29      	adds	r1, r5, #0
100148e8:	0580      	lsls	r0, r0, #22
100148ea:	f001 fc59 	bl	100161a0 <__aeabi_fsub>
100148ee:	4681      	mov	r9, r0
100148f0:	21fc      	movs	r1, #252	; 0xfc
100148f2:	1c20      	adds	r0, r4, #0
100148f4:	0589      	lsls	r1, r1, #22
100148f6:	f001 fb3f 	bl	10015f78 <__aeabi_fmul>
100148fa:	1c29      	adds	r1, r5, #0
100148fc:	f001 fc50 	bl	100161a0 <__aeabi_fsub>
10014900:	4641      	mov	r1, r8
10014902:	1c05      	adds	r5, r0, #0
10014904:	1c20      	adds	r0, r4, #0
10014906:	f001 fb37 	bl	10015f78 <__aeabi_fmul>
1001490a:	1c39      	adds	r1, r7, #0
1001490c:	1c04      	adds	r4, r0, #0
1001490e:	1c30      	adds	r0, r6, #0
10014910:	f001 fb32 	bl	10015f78 <__aeabi_fmul>
10014914:	1c01      	adds	r1, r0, #0
10014916:	1c20      	adds	r0, r4, #0
10014918:	f001 fc42 	bl	100161a0 <__aeabi_fsub>
1001491c:	1c01      	adds	r1, r0, #0
1001491e:	1c28      	adds	r0, r5, #0
10014920:	f001 fc3e 	bl	100161a0 <__aeabi_fsub>
10014924:	1c01      	adds	r1, r0, #0
10014926:	4648      	mov	r0, r9
10014928:	f001 fc3a 	bl	100161a0 <__aeabi_fsub>
1001492c:	bc0c      	pop	{r2, r3}
1001492e:	4690      	mov	r8, r2
10014930:	4699      	mov	r9, r3
10014932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014934:	4b0c      	ldr	r3, [pc, #48]	; (10014968 <__kernel_cosf+0x18c>)
10014936:	4d0d      	ldr	r5, [pc, #52]	; (1001496c <__kernel_cosf+0x190>)
10014938:	4699      	mov	r9, r3
1001493a:	e7d9      	b.n	100148f0 <__kernel_cosf+0x114>
1001493c:	20fe      	movs	r0, #254	; 0xfe
1001493e:	0580      	lsls	r0, r0, #22
10014940:	e7f4      	b.n	1001492c <__kernel_cosf+0x150>
10014942:	46c0      	nop			; (mov r8, r8)
10014944:	31ffffff 	.word	0x31ffffff
10014948:	ad47d74e 	.word	0xad47d74e
1001494c:	310f74f6 	.word	0x310f74f6
10014950:	3493f27c 	.word	0x3493f27c
10014954:	37d00d01 	.word	0x37d00d01
10014958:	3ab60b61 	.word	0x3ab60b61
1001495c:	3d2aaaab 	.word	0x3d2aaaab
10014960:	3e999999 	.word	0x3e999999
10014964:	3f480000 	.word	0x3f480000
10014968:	3f380000 	.word	0x3f380000
1001496c:	3e900000 	.word	0x3e900000

10014970 <__kernel_rem_pio2f>:
10014970:	b5f0      	push	{r4, r5, r6, r7, lr}
10014972:	465f      	mov	r7, fp
10014974:	4656      	mov	r6, sl
10014976:	464d      	mov	r5, r9
10014978:	4644      	mov	r4, r8
1001497a:	b4f0      	push	{r4, r5, r6, r7}
1001497c:	b0dd      	sub	sp, #372	; 0x174
1001497e:	469b      	mov	fp, r3
10014980:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014982:	9106      	str	r1, [sp, #24]
10014984:	0099      	lsls	r1, r3, #2
10014986:	4bca      	ldr	r3, [pc, #808]	; (10014cb0 <__kernel_rem_pio2f+0x340>)
10014988:	9000      	str	r0, [sp, #0]
1001498a:	58cb      	ldr	r3, [r1, r3]
1001498c:	2007      	movs	r0, #7
1001498e:	001c      	movs	r4, r3
10014990:	9305      	str	r3, [sp, #20]
10014992:	2301      	movs	r3, #1
10014994:	425b      	negs	r3, r3
10014996:	445b      	add	r3, fp
10014998:	4699      	mov	r9, r3
1001499a:	1ed3      	subs	r3, r2, #3
1001499c:	17d9      	asrs	r1, r3, #31
1001499e:	4001      	ands	r1, r0
100149a0:	18cb      	adds	r3, r1, r3
100149a2:	10db      	asrs	r3, r3, #3
100149a4:	0019      	movs	r1, r3
100149a6:	43db      	mvns	r3, r3
100149a8:	17db      	asrs	r3, r3, #31
100149aa:	4019      	ands	r1, r3
100149ac:	000b      	movs	r3, r1
100149ae:	3301      	adds	r3, #1
100149b0:	930a      	str	r3, [sp, #40]	; 0x28
100149b2:	00db      	lsls	r3, r3, #3
100149b4:	1ad3      	subs	r3, r2, r3
100149b6:	464a      	mov	r2, r9
100149b8:	9108      	str	r1, [sp, #32]
100149ba:	9302      	str	r3, [sp, #8]
100149bc:	1a8e      	subs	r6, r1, r2
100149be:	18a7      	adds	r7, r4, r2
100149c0:	d419      	bmi.n	100149f6 <__kernel_rem_pio2f+0x86>
100149c2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
100149c4:	3701      	adds	r7, #1
100149c6:	4690      	mov	r8, r2
100149c8:	00b3      	lsls	r3, r6, #2
100149ca:	00bf      	lsls	r7, r7, #2
100149cc:	4498      	add	r8, r3
100149ce:	2400      	movs	r4, #0
100149d0:	ad20      	add	r5, sp, #128	; 0x80
100149d2:	e008      	b.n	100149e6 <__kernel_rem_pio2f+0x76>
100149d4:	4643      	mov	r3, r8
100149d6:	5918      	ldr	r0, [r3, r4]
100149d8:	f001 fda2 	bl	10016520 <__aeabi_i2f>
100149dc:	5128      	str	r0, [r5, r4]
100149de:	3404      	adds	r4, #4
100149e0:	3601      	adds	r6, #1
100149e2:	42bc      	cmp	r4, r7
100149e4:	d007      	beq.n	100149f6 <__kernel_rem_pio2f+0x86>
100149e6:	2e00      	cmp	r6, #0
100149e8:	daf4      	bge.n	100149d4 <__kernel_rem_pio2f+0x64>
100149ea:	2000      	movs	r0, #0
100149ec:	5128      	str	r0, [r5, r4]
100149ee:	3404      	adds	r4, #4
100149f0:	3601      	adds	r6, #1
100149f2:	42bc      	cmp	r4, r7
100149f4:	d1f7      	bne.n	100149e6 <__kernel_rem_pio2f+0x76>
100149f6:	9b05      	ldr	r3, [sp, #20]
100149f8:	2b00      	cmp	r3, #0
100149fa:	da00      	bge.n	100149fe <__kernel_rem_pio2f+0x8e>
100149fc:	e33d      	b.n	1001507a <__kernel_rem_pio2f+0x70a>
100149fe:	9b05      	ldr	r3, [sp, #20]
10014a00:	3301      	adds	r3, #1
10014a02:	009b      	lsls	r3, r3, #2
10014a04:	469a      	mov	sl, r3
10014a06:	465b      	mov	r3, fp
10014a08:	009b      	lsls	r3, r3, #2
10014a0a:	469b      	mov	fp, r3
10014a0c:	9b00      	ldr	r3, [sp, #0]
10014a0e:	445b      	add	r3, fp
10014a10:	001f      	movs	r7, r3
10014a12:	2300      	movs	r3, #0
10014a14:	4698      	mov	r8, r3
10014a16:	ab48      	add	r3, sp, #288	; 0x120
10014a18:	9304      	str	r3, [sp, #16]
10014a1a:	465b      	mov	r3, fp
10014a1c:	3b04      	subs	r3, #4
10014a1e:	9301      	str	r3, [sp, #4]
10014a20:	464b      	mov	r3, r9
10014a22:	2b00      	cmp	r3, #0
10014a24:	da00      	bge.n	10014a28 <__kernel_rem_pio2f+0xb8>
10014a26:	e1b6      	b.n	10014d96 <__kernel_rem_pio2f+0x426>
10014a28:	9b01      	ldr	r3, [sp, #4]
10014a2a:	2600      	movs	r6, #0
10014a2c:	4443      	add	r3, r8
10014a2e:	001c      	movs	r4, r3
10014a30:	ab20      	add	r3, sp, #128	; 0x80
10014a32:	469c      	mov	ip, r3
10014a34:	9d00      	ldr	r5, [sp, #0]
10014a36:	4464      	add	r4, ip
10014a38:	6821      	ldr	r1, [r4, #0]
10014a3a:	cd01      	ldmia	r5!, {r0}
10014a3c:	f001 fa9c 	bl	10015f78 <__aeabi_fmul>
10014a40:	1c01      	adds	r1, r0, #0
10014a42:	1c30      	adds	r0, r6, #0
10014a44:	f000 ff58 	bl	100158f8 <__aeabi_fadd>
10014a48:	3c04      	subs	r4, #4
10014a4a:	1c06      	adds	r6, r0, #0
10014a4c:	42bd      	cmp	r5, r7
10014a4e:	d1f3      	bne.n	10014a38 <__kernel_rem_pio2f+0xc8>
10014a50:	4642      	mov	r2, r8
10014a52:	9b04      	ldr	r3, [sp, #16]
10014a54:	509e      	str	r6, [r3, r2]
10014a56:	2304      	movs	r3, #4
10014a58:	469c      	mov	ip, r3
10014a5a:	44e0      	add	r8, ip
10014a5c:	45d0      	cmp	r8, sl
10014a5e:	d1df      	bne.n	10014a20 <__kernel_rem_pio2f+0xb0>
10014a60:	9a05      	ldr	r2, [sp, #20]
10014a62:	4994      	ldr	r1, [pc, #592]	; (10014cb4 <__kernel_rem_pio2f+0x344>)
10014a64:	0013      	movs	r3, r2
10014a66:	468c      	mov	ip, r1
10014a68:	4463      	add	r3, ip
10014a6a:	009b      	lsls	r3, r3, #2
10014a6c:	a80c      	add	r0, sp, #48	; 0x30
10014a6e:	0019      	movs	r1, r3
10014a70:	4684      	mov	ip, r0
10014a72:	4461      	add	r1, ip
10014a74:	9107      	str	r1, [sp, #28]
10014a76:	3304      	adds	r3, #4
10014a78:	9900      	ldr	r1, [sp, #0]
10014a7a:	4463      	add	r3, ip
10014a7c:	4459      	add	r1, fp
10014a7e:	9309      	str	r3, [sp, #36]	; 0x24
10014a80:	464b      	mov	r3, r9
10014a82:	000f      	movs	r7, r1
10014a84:	4693      	mov	fp, r2
10014a86:	9301      	str	r3, [sp, #4]
10014a88:	465b      	mov	r3, fp
10014a8a:	009b      	lsls	r3, r3, #2
10014a8c:	469a      	mov	sl, r3
10014a8e:	4652      	mov	r2, sl
10014a90:	9b04      	ldr	r3, [sp, #16]
10014a92:	589d      	ldr	r5, [r3, r2]
10014a94:	465a      	mov	r2, fp
10014a96:	2a00      	cmp	r2, #0
10014a98:	dd26      	ble.n	10014ae8 <__kernel_rem_pio2f+0x178>
10014a9a:	aa0c      	add	r2, sp, #48	; 0x30
10014a9c:	469c      	mov	ip, r3
10014a9e:	46b8      	mov	r8, r7
10014aa0:	0017      	movs	r7, r2
10014aa2:	4c85      	ldr	r4, [pc, #532]	; (10014cb8 <__kernel_rem_pio2f+0x348>)
10014aa4:	445c      	add	r4, fp
10014aa6:	00a4      	lsls	r4, r4, #2
10014aa8:	4464      	add	r4, ip
10014aaa:	21ee      	movs	r1, #238	; 0xee
10014aac:	1c28      	adds	r0, r5, #0
10014aae:	0589      	lsls	r1, r1, #22
10014ab0:	f001 fa62 	bl	10015f78 <__aeabi_fmul>
10014ab4:	f001 fd12 	bl	100164dc <__aeabi_f2iz>
10014ab8:	f001 fd32 	bl	10016520 <__aeabi_i2f>
10014abc:	2187      	movs	r1, #135	; 0x87
10014abe:	05c9      	lsls	r1, r1, #23
10014ac0:	1c06      	adds	r6, r0, #0
10014ac2:	f001 fa59 	bl	10015f78 <__aeabi_fmul>
10014ac6:	1c01      	adds	r1, r0, #0
10014ac8:	1c28      	adds	r0, r5, #0
10014aca:	f001 fb69 	bl	100161a0 <__aeabi_fsub>
10014ace:	f001 fd05 	bl	100164dc <__aeabi_f2iz>
10014ad2:	6821      	ldr	r1, [r4, #0]
10014ad4:	c701      	stmia	r7!, {r0}
10014ad6:	1c30      	adds	r0, r6, #0
10014ad8:	f000 ff0e 	bl	100158f8 <__aeabi_fadd>
10014adc:	3c04      	subs	r4, #4
10014ade:	ab47      	add	r3, sp, #284	; 0x11c
10014ae0:	1c05      	adds	r5, r0, #0
10014ae2:	429c      	cmp	r4, r3
10014ae4:	d1e1      	bne.n	10014aaa <__kernel_rem_pio2f+0x13a>
10014ae6:	4647      	mov	r7, r8
10014ae8:	9b02      	ldr	r3, [sp, #8]
10014aea:	1c28      	adds	r0, r5, #0
10014aec:	0019      	movs	r1, r3
10014aee:	4698      	mov	r8, r3
10014af0:	f000 fb98 	bl	10015224 <scalbnf>
10014af4:	21f8      	movs	r1, #248	; 0xf8
10014af6:	0589      	lsls	r1, r1, #22
10014af8:	1c04      	adds	r4, r0, #0
10014afa:	f001 fa3d 	bl	10015f78 <__aeabi_fmul>
10014afe:	f000 fb43 	bl	10015188 <floorf>
10014b02:	2182      	movs	r1, #130	; 0x82
10014b04:	05c9      	lsls	r1, r1, #23
10014b06:	f001 fa37 	bl	10015f78 <__aeabi_fmul>
10014b0a:	1c01      	adds	r1, r0, #0
10014b0c:	1c20      	adds	r0, r4, #0
10014b0e:	f001 fb47 	bl	100161a0 <__aeabi_fsub>
10014b12:	1c04      	adds	r4, r0, #0
10014b14:	f001 fce2 	bl	100164dc <__aeabi_f2iz>
10014b18:	0006      	movs	r6, r0
10014b1a:	f001 fd01 	bl	10016520 <__aeabi_i2f>
10014b1e:	1c01      	adds	r1, r0, #0
10014b20:	1c20      	adds	r0, r4, #0
10014b22:	f001 fb3d 	bl	100161a0 <__aeabi_fsub>
10014b26:	4644      	mov	r4, r8
10014b28:	1c05      	adds	r5, r0, #0
10014b2a:	2c00      	cmp	r4, #0
10014b2c:	dc00      	bgt.n	10014b30 <__kernel_rem_pio2f+0x1c0>
10014b2e:	e112      	b.n	10014d56 <__kernel_rem_pio2f+0x3e6>
10014b30:	465b      	mov	r3, fp
10014b32:	1e5a      	subs	r2, r3, #1
10014b34:	0092      	lsls	r2, r2, #2
10014b36:	ab0c      	add	r3, sp, #48	; 0x30
10014b38:	589b      	ldr	r3, [r3, r2]
10014b3a:	2008      	movs	r0, #8
10014b3c:	0019      	movs	r1, r3
10014b3e:	1b00      	subs	r0, r0, r4
10014b40:	4101      	asrs	r1, r0
10014b42:	1876      	adds	r6, r6, r1
10014b44:	4081      	lsls	r1, r0
10014b46:	1a5b      	subs	r3, r3, r1
10014b48:	a90c      	add	r1, sp, #48	; 0x30
10014b4a:	508b      	str	r3, [r1, r2]
10014b4c:	2207      	movs	r2, #7
10014b4e:	1b12      	subs	r2, r2, r4
10014b50:	4113      	asrs	r3, r2
10014b52:	9303      	str	r3, [sp, #12]
10014b54:	9b03      	ldr	r3, [sp, #12]
10014b56:	2b00      	cmp	r3, #0
10014b58:	dd3a      	ble.n	10014bd0 <__kernel_rem_pio2f+0x260>
10014b5a:	465b      	mov	r3, fp
10014b5c:	3601      	adds	r6, #1
10014b5e:	2b00      	cmp	r3, #0
10014b60:	dc00      	bgt.n	10014b64 <__kernel_rem_pio2f+0x1f4>
10014b62:	e261      	b.n	10015028 <__kernel_rem_pio2f+0x6b8>
10014b64:	2280      	movs	r2, #128	; 0x80
10014b66:	0052      	lsls	r2, r2, #1
10014b68:	46a8      	mov	r8, r5
10014b6a:	ab0c      	add	r3, sp, #48	; 0x30
10014b6c:	2100      	movs	r1, #0
10014b6e:	2400      	movs	r4, #0
10014b70:	20ff      	movs	r0, #255	; 0xff
10014b72:	4694      	mov	ip, r2
10014b74:	465d      	mov	r5, fp
10014b76:	e009      	b.n	10014b8c <__kernel_rem_pio2f+0x21c>
10014b78:	2a00      	cmp	r2, #0
10014b7a:	d003      	beq.n	10014b84 <__kernel_rem_pio2f+0x214>
10014b7c:	4664      	mov	r4, ip
10014b7e:	1aa2      	subs	r2, r4, r2
10014b80:	2401      	movs	r4, #1
10014b82:	601a      	str	r2, [r3, #0]
10014b84:	3101      	adds	r1, #1
10014b86:	3304      	adds	r3, #4
10014b88:	428d      	cmp	r5, r1
10014b8a:	dd09      	ble.n	10014ba0 <__kernel_rem_pio2f+0x230>
10014b8c:	681a      	ldr	r2, [r3, #0]
10014b8e:	2c00      	cmp	r4, #0
10014b90:	d0f2      	beq.n	10014b78 <__kernel_rem_pio2f+0x208>
10014b92:	1a82      	subs	r2, r0, r2
10014b94:	3101      	adds	r1, #1
10014b96:	601a      	str	r2, [r3, #0]
10014b98:	2401      	movs	r4, #1
10014b9a:	3304      	adds	r3, #4
10014b9c:	428d      	cmp	r5, r1
10014b9e:	dcf5      	bgt.n	10014b8c <__kernel_rem_pio2f+0x21c>
10014ba0:	46ab      	mov	fp, r5
10014ba2:	4645      	mov	r5, r8
10014ba4:	9b02      	ldr	r3, [sp, #8]
10014ba6:	2b00      	cmp	r3, #0
10014ba8:	dd0f      	ble.n	10014bca <__kernel_rem_pio2f+0x25a>
10014baa:	2b01      	cmp	r3, #1
10014bac:	d100      	bne.n	10014bb0 <__kernel_rem_pio2f+0x240>
10014bae:	e0dd      	b.n	10014d6c <__kernel_rem_pio2f+0x3fc>
10014bb0:	2b02      	cmp	r3, #2
10014bb2:	d10a      	bne.n	10014bca <__kernel_rem_pio2f+0x25a>
10014bb4:	465b      	mov	r3, fp
10014bb6:	3b01      	subs	r3, #1
10014bb8:	009b      	lsls	r3, r3, #2
10014bba:	aa0c      	add	r2, sp, #48	; 0x30
10014bbc:	58d2      	ldr	r2, [r2, r3]
10014bbe:	920b      	str	r2, [sp, #44]	; 0x2c
10014bc0:	223f      	movs	r2, #63	; 0x3f
10014bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014bc4:	400a      	ands	r2, r1
10014bc6:	a90c      	add	r1, sp, #48	; 0x30
10014bc8:	50ca      	str	r2, [r1, r3]
10014bca:	9b03      	ldr	r3, [sp, #12]
10014bcc:	2b02      	cmp	r3, #2
10014bce:	d075      	beq.n	10014cbc <__kernel_rem_pio2f+0x34c>
10014bd0:	2100      	movs	r1, #0
10014bd2:	1c28      	adds	r0, r5, #0
10014bd4:	f000 fd58 	bl	10015688 <__aeabi_fcmpeq>
10014bd8:	2800      	cmp	r0, #0
10014bda:	d100      	bne.n	10014bde <__kernel_rem_pio2f+0x26e>
10014bdc:	e088      	b.n	10014cf0 <__kernel_rem_pio2f+0x380>
10014bde:	465b      	mov	r3, fp
10014be0:	1e59      	subs	r1, r3, #1
10014be2:	9b05      	ldr	r3, [sp, #20]
10014be4:	428b      	cmp	r3, r1
10014be6:	dc0f      	bgt.n	10014c08 <__kernel_rem_pio2f+0x298>
10014be8:	aa0c      	add	r2, sp, #48	; 0x30
10014bea:	4694      	mov	ip, r2
10014bec:	2200      	movs	r2, #0
10014bee:	4b32      	ldr	r3, [pc, #200]	; (10014cb8 <__kernel_rem_pio2f+0x348>)
10014bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
10014bf2:	445b      	add	r3, fp
10014bf4:	009b      	lsls	r3, r3, #2
10014bf6:	4463      	add	r3, ip
10014bf8:	681c      	ldr	r4, [r3, #0]
10014bfa:	3b04      	subs	r3, #4
10014bfc:	4322      	orrs	r2, r4
10014bfe:	4283      	cmp	r3, r0
10014c00:	d1fa      	bne.n	10014bf8 <__kernel_rem_pio2f+0x288>
10014c02:	2a00      	cmp	r2, #0
10014c04:	d000      	beq.n	10014c08 <__kernel_rem_pio2f+0x298>
10014c06:	e0df      	b.n	10014dc8 <__kernel_rem_pio2f+0x458>
10014c08:	9b05      	ldr	r3, [sp, #20]
10014c0a:	aa0c      	add	r2, sp, #48	; 0x30
10014c0c:	3b01      	subs	r3, #1
10014c0e:	009b      	lsls	r3, r3, #2
10014c10:	58d3      	ldr	r3, [r2, r3]
10014c12:	2b00      	cmp	r3, #0
10014c14:	d000      	beq.n	10014c18 <__kernel_rem_pio2f+0x2a8>
10014c16:	e205      	b.n	10015024 <__kernel_rem_pio2f+0x6b4>
10014c18:	2201      	movs	r2, #1
10014c1a:	9b07      	ldr	r3, [sp, #28]
10014c1c:	3b04      	subs	r3, #4
10014c1e:	6859      	ldr	r1, [r3, #4]
10014c20:	3201      	adds	r2, #1
10014c22:	2900      	cmp	r1, #0
10014c24:	d0fa      	beq.n	10014c1c <__kernel_rem_pio2f+0x2ac>
10014c26:	465b      	mov	r3, fp
10014c28:	445a      	add	r2, fp
10014c2a:	3301      	adds	r3, #1
10014c2c:	9203      	str	r2, [sp, #12]
10014c2e:	4293      	cmp	r3, r2
10014c30:	dc39      	bgt.n	10014ca6 <__kernel_rem_pio2f+0x336>
10014c32:	9967      	ldr	r1, [sp, #412]	; 0x19c
10014c34:	9a08      	ldr	r2, [sp, #32]
10014c36:	4689      	mov	r9, r1
10014c38:	9904      	ldr	r1, [sp, #16]
10014c3a:	189a      	adds	r2, r3, r2
10014c3c:	468a      	mov	sl, r1
10014c3e:	0092      	lsls	r2, r2, #2
10014c40:	4491      	add	r9, r2
10014c42:	009a      	lsls	r2, r3, #2
10014c44:	4492      	add	sl, r2
10014c46:	9a01      	ldr	r2, [sp, #4]
10014c48:	4694      	mov	ip, r2
10014c4a:	aa20      	add	r2, sp, #128	; 0x80
10014c4c:	4690      	mov	r8, r2
10014c4e:	9a03      	ldr	r2, [sp, #12]
10014c50:	4463      	add	r3, ip
10014c52:	4694      	mov	ip, r2
10014c54:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014c56:	009b      	lsls	r3, r3, #2
10014c58:	4693      	mov	fp, r2
10014c5a:	4498      	add	r8, r3
10014c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10014c5e:	4463      	add	r3, ip
10014c60:	009b      	lsls	r3, r3, #2
10014c62:	449b      	add	fp, r3
10014c64:	464b      	mov	r3, r9
10014c66:	6818      	ldr	r0, [r3, #0]
10014c68:	f001 fc5a 	bl	10016520 <__aeabi_i2f>
10014c6c:	4643      	mov	r3, r8
10014c6e:	6018      	str	r0, [r3, #0]
10014c70:	9b01      	ldr	r3, [sp, #4]
10014c72:	2b00      	cmp	r3, #0
10014c74:	db1a      	blt.n	10014cac <__kernel_rem_pio2f+0x33c>
10014c76:	4644      	mov	r4, r8
10014c78:	2600      	movs	r6, #0
10014c7a:	9d00      	ldr	r5, [sp, #0]
10014c7c:	6821      	ldr	r1, [r4, #0]
10014c7e:	cd01      	ldmia	r5!, {r0}
10014c80:	f001 f97a 	bl	10015f78 <__aeabi_fmul>
10014c84:	1c01      	adds	r1, r0, #0
10014c86:	1c30      	adds	r0, r6, #0
10014c88:	f000 fe36 	bl	100158f8 <__aeabi_fadd>
10014c8c:	3c04      	subs	r4, #4
10014c8e:	1c06      	adds	r6, r0, #0
10014c90:	42bd      	cmp	r5, r7
10014c92:	d1f3      	bne.n	10014c7c <__kernel_rem_pio2f+0x30c>
10014c94:	4653      	mov	r3, sl
10014c96:	c340      	stmia	r3!, {r6}
10014c98:	469a      	mov	sl, r3
10014c9a:	2304      	movs	r3, #4
10014c9c:	469c      	mov	ip, r3
10014c9e:	44e1      	add	r9, ip
10014ca0:	44e0      	add	r8, ip
10014ca2:	45d9      	cmp	r9, fp
10014ca4:	d1de      	bne.n	10014c64 <__kernel_rem_pio2f+0x2f4>
10014ca6:	9b03      	ldr	r3, [sp, #12]
10014ca8:	469b      	mov	fp, r3
10014caa:	e6ed      	b.n	10014a88 <__kernel_rem_pio2f+0x118>
10014cac:	2600      	movs	r6, #0
10014cae:	e7f1      	b.n	10014c94 <__kernel_rem_pio2f+0x324>
10014cb0:	1001b6e4 	.word	0x1001b6e4
10014cb4:	3ffffffe 	.word	0x3ffffffe
10014cb8:	3fffffff 	.word	0x3fffffff
10014cbc:	20fe      	movs	r0, #254	; 0xfe
10014cbe:	1c29      	adds	r1, r5, #0
10014cc0:	0580      	lsls	r0, r0, #22
10014cc2:	f001 fa6d 	bl	100161a0 <__aeabi_fsub>
10014cc6:	1c05      	adds	r5, r0, #0
10014cc8:	2c00      	cmp	r4, #0
10014cca:	d100      	bne.n	10014cce <__kernel_rem_pio2f+0x35e>
10014ccc:	e780      	b.n	10014bd0 <__kernel_rem_pio2f+0x260>
10014cce:	20fe      	movs	r0, #254	; 0xfe
10014cd0:	9902      	ldr	r1, [sp, #8]
10014cd2:	0580      	lsls	r0, r0, #22
10014cd4:	f000 faa6 	bl	10015224 <scalbnf>
10014cd8:	1c01      	adds	r1, r0, #0
10014cda:	1c28      	adds	r0, r5, #0
10014cdc:	f001 fa60 	bl	100161a0 <__aeabi_fsub>
10014ce0:	1c05      	adds	r5, r0, #0
10014ce2:	2100      	movs	r1, #0
10014ce4:	1c28      	adds	r0, r5, #0
10014ce6:	f000 fccf 	bl	10015688 <__aeabi_fcmpeq>
10014cea:	2800      	cmp	r0, #0
10014cec:	d000      	beq.n	10014cf0 <__kernel_rem_pio2f+0x380>
10014cee:	e776      	b.n	10014bde <__kernel_rem_pio2f+0x26e>
10014cf0:	9601      	str	r6, [sp, #4]
10014cf2:	9e02      	ldr	r6, [sp, #8]
10014cf4:	1c28      	adds	r0, r5, #0
10014cf6:	4271      	negs	r1, r6
10014cf8:	f000 fa94 	bl	10015224 <scalbnf>
10014cfc:	2187      	movs	r1, #135	; 0x87
10014cfe:	05c9      	lsls	r1, r1, #23
10014d00:	1c05      	adds	r5, r0, #0
10014d02:	f000 fce5 	bl	100156d0 <__aeabi_fcmpge>
10014d06:	2800      	cmp	r0, #0
10014d08:	d100      	bne.n	10014d0c <__kernel_rem_pio2f+0x39c>
10014d0a:	e199      	b.n	10015040 <__kernel_rem_pio2f+0x6d0>
10014d0c:	21ee      	movs	r1, #238	; 0xee
10014d0e:	1c28      	adds	r0, r5, #0
10014d10:	0589      	lsls	r1, r1, #22
10014d12:	f001 f931 	bl	10015f78 <__aeabi_fmul>
10014d16:	f001 fbe1 	bl	100164dc <__aeabi_f2iz>
10014d1a:	f001 fc01 	bl	10016520 <__aeabi_i2f>
10014d1e:	2187      	movs	r1, #135	; 0x87
10014d20:	05c9      	lsls	r1, r1, #23
10014d22:	1c04      	adds	r4, r0, #0
10014d24:	f001 f928 	bl	10015f78 <__aeabi_fmul>
10014d28:	1c01      	adds	r1, r0, #0
10014d2a:	1c28      	adds	r0, r5, #0
10014d2c:	f001 fa38 	bl	100161a0 <__aeabi_fsub>
10014d30:	f001 fbd4 	bl	100164dc <__aeabi_f2iz>
10014d34:	4652      	mov	r2, sl
10014d36:	ab0c      	add	r3, sp, #48	; 0x30
10014d38:	5098      	str	r0, [r3, r2]
10014d3a:	2301      	movs	r3, #1
10014d3c:	445b      	add	r3, fp
10014d3e:	469a      	mov	sl, r3
10014d40:	0033      	movs	r3, r6
10014d42:	3308      	adds	r3, #8
10014d44:	9302      	str	r3, [sp, #8]
10014d46:	4653      	mov	r3, sl
10014d48:	1c20      	adds	r0, r4, #0
10014d4a:	009d      	lsls	r5, r3, #2
10014d4c:	f001 fbc6 	bl	100164dc <__aeabi_f2iz>
10014d50:	ab0c      	add	r3, sp, #48	; 0x30
10014d52:	5158      	str	r0, [r3, r5]
10014d54:	e052      	b.n	10014dfc <__kernel_rem_pio2f+0x48c>
10014d56:	9b02      	ldr	r3, [sp, #8]
10014d58:	2b00      	cmp	r3, #0
10014d5a:	d113      	bne.n	10014d84 <__kernel_rem_pio2f+0x414>
10014d5c:	465b      	mov	r3, fp
10014d5e:	3b01      	subs	r3, #1
10014d60:	009b      	lsls	r3, r3, #2
10014d62:	aa0c      	add	r2, sp, #48	; 0x30
10014d64:	58d3      	ldr	r3, [r2, r3]
10014d66:	121b      	asrs	r3, r3, #8
10014d68:	9303      	str	r3, [sp, #12]
10014d6a:	e6f3      	b.n	10014b54 <__kernel_rem_pio2f+0x1e4>
10014d6c:	465b      	mov	r3, fp
10014d6e:	3b01      	subs	r3, #1
10014d70:	009b      	lsls	r3, r3, #2
10014d72:	aa0c      	add	r2, sp, #48	; 0x30
10014d74:	58d2      	ldr	r2, [r2, r3]
10014d76:	920b      	str	r2, [sp, #44]	; 0x2c
10014d78:	227f      	movs	r2, #127	; 0x7f
10014d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014d7c:	400a      	ands	r2, r1
10014d7e:	a90c      	add	r1, sp, #48	; 0x30
10014d80:	50ca      	str	r2, [r1, r3]
10014d82:	e722      	b.n	10014bca <__kernel_rem_pio2f+0x25a>
10014d84:	21fc      	movs	r1, #252	; 0xfc
10014d86:	0589      	lsls	r1, r1, #22
10014d88:	f000 fca2 	bl	100156d0 <__aeabi_fcmpge>
10014d8c:	2800      	cmp	r0, #0
10014d8e:	d10d      	bne.n	10014dac <__kernel_rem_pio2f+0x43c>
10014d90:	2300      	movs	r3, #0
10014d92:	9303      	str	r3, [sp, #12]
10014d94:	e71c      	b.n	10014bd0 <__kernel_rem_pio2f+0x260>
10014d96:	4642      	mov	r2, r8
10014d98:	2600      	movs	r6, #0
10014d9a:	9b04      	ldr	r3, [sp, #16]
10014d9c:	509e      	str	r6, [r3, r2]
10014d9e:	2304      	movs	r3, #4
10014da0:	469c      	mov	ip, r3
10014da2:	44e0      	add	r8, ip
10014da4:	45d0      	cmp	r8, sl
10014da6:	d000      	beq.n	10014daa <__kernel_rem_pio2f+0x43a>
10014da8:	e63a      	b.n	10014a20 <__kernel_rem_pio2f+0xb0>
10014daa:	e659      	b.n	10014a60 <__kernel_rem_pio2f+0xf0>
10014dac:	2302      	movs	r3, #2
10014dae:	9303      	str	r3, [sp, #12]
10014db0:	465b      	mov	r3, fp
10014db2:	3601      	adds	r6, #1
10014db4:	2b00      	cmp	r3, #0
10014db6:	dd00      	ble.n	10014dba <__kernel_rem_pio2f+0x44a>
10014db8:	e6d4      	b.n	10014b64 <__kernel_rem_pio2f+0x1f4>
10014dba:	20fe      	movs	r0, #254	; 0xfe
10014dbc:	1c29      	adds	r1, r5, #0
10014dbe:	0580      	lsls	r0, r0, #22
10014dc0:	f001 f9ee 	bl	100161a0 <__aeabi_fsub>
10014dc4:	1c05      	adds	r5, r0, #0
10014dc6:	e703      	b.n	10014bd0 <__kernel_rem_pio2f+0x260>
10014dc8:	468a      	mov	sl, r1
10014dca:	9b02      	ldr	r3, [sp, #8]
10014dcc:	aa0c      	add	r2, sp, #48	; 0x30
10014dce:	3b08      	subs	r3, #8
10014dd0:	0019      	movs	r1, r3
10014dd2:	9302      	str	r3, [sp, #8]
10014dd4:	4653      	mov	r3, sl
10014dd6:	009b      	lsls	r3, r3, #2
10014dd8:	58d3      	ldr	r3, [r2, r3]
10014dda:	9601      	str	r6, [sp, #4]
10014ddc:	2b00      	cmp	r3, #0
10014dde:	d10d      	bne.n	10014dfc <__kernel_rem_pio2f+0x48c>
10014de0:	4694      	mov	ip, r2
10014de2:	4652      	mov	r2, sl
10014de4:	4ba8      	ldr	r3, [pc, #672]	; (10015088 <__kernel_rem_pio2f+0x718>)
10014de6:	4453      	add	r3, sl
10014de8:	009b      	lsls	r3, r3, #2
10014dea:	4463      	add	r3, ip
10014dec:	3b04      	subs	r3, #4
10014dee:	6858      	ldr	r0, [r3, #4]
10014df0:	3a01      	subs	r2, #1
10014df2:	3908      	subs	r1, #8
10014df4:	2800      	cmp	r0, #0
10014df6:	d0f9      	beq.n	10014dec <__kernel_rem_pio2f+0x47c>
10014df8:	4692      	mov	sl, r2
10014dfa:	9102      	str	r1, [sp, #8]
10014dfc:	20fe      	movs	r0, #254	; 0xfe
10014dfe:	9902      	ldr	r1, [sp, #8]
10014e00:	0580      	lsls	r0, r0, #22
10014e02:	f000 fa0f 	bl	10015224 <scalbnf>
10014e06:	4653      	mov	r3, sl
10014e08:	1c06      	adds	r6, r0, #0
10014e0a:	2b00      	cmp	r3, #0
10014e0c:	da00      	bge.n	10014e10 <__kernel_rem_pio2f+0x4a0>
10014e0e:	e10d      	b.n	1001502c <__kernel_rem_pio2f+0x6bc>
10014e10:	3301      	adds	r3, #1
10014e12:	009b      	lsls	r3, r3, #2
10014e14:	425b      	negs	r3, r3
10014e16:	4698      	mov	r8, r3
10014e18:	4653      	mov	r3, sl
10014e1a:	009b      	lsls	r3, r3, #2
10014e1c:	001a      	movs	r2, r3
10014e1e:	001c      	movs	r4, r3
10014e20:	9300      	str	r3, [sp, #0]
10014e22:	ab0c      	add	r3, sp, #48	; 0x30
10014e24:	469c      	mov	ip, r3
10014e26:	9b04      	ldr	r3, [sp, #16]
10014e28:	4464      	add	r4, ip
10014e2a:	001f      	movs	r7, r3
10014e2c:	4694      	mov	ip, r2
10014e2e:	2500      	movs	r5, #0
10014e30:	4467      	add	r7, ip
10014e32:	5960      	ldr	r0, [r4, r5]
10014e34:	f001 fb74 	bl	10016520 <__aeabi_i2f>
10014e38:	1c31      	adds	r1, r6, #0
10014e3a:	f001 f89d 	bl	10015f78 <__aeabi_fmul>
10014e3e:	21ee      	movs	r1, #238	; 0xee
10014e40:	5178      	str	r0, [r7, r5]
10014e42:	0589      	lsls	r1, r1, #22
10014e44:	1c30      	adds	r0, r6, #0
10014e46:	f001 f897 	bl	10015f78 <__aeabi_fmul>
10014e4a:	3d04      	subs	r5, #4
10014e4c:	1c06      	adds	r6, r0, #0
10014e4e:	4545      	cmp	r5, r8
10014e50:	d1ef      	bne.n	10014e32 <__kernel_rem_pio2f+0x4c2>
10014e52:	2300      	movs	r3, #0
10014e54:	4698      	mov	r8, r3
10014e56:	ab34      	add	r3, sp, #208	; 0xd0
10014e58:	469b      	mov	fp, r3
10014e5a:	4b8c      	ldr	r3, [pc, #560]	; (1001508c <__kernel_rem_pio2f+0x71c>)
10014e5c:	4699      	mov	r9, r3
10014e5e:	4653      	mov	r3, sl
10014e60:	9302      	str	r3, [sp, #8]
10014e62:	9b05      	ldr	r3, [sp, #20]
10014e64:	469a      	mov	sl, r3
10014e66:	4653      	mov	r3, sl
10014e68:	2600      	movs	r6, #0
10014e6a:	2b00      	cmp	r3, #0
10014e6c:	db14      	blt.n	10014e98 <__kernel_rem_pio2f+0x528>
10014e6e:	2500      	movs	r5, #0
10014e70:	4887      	ldr	r0, [pc, #540]	; (10015090 <__kernel_rem_pio2f+0x720>)
10014e72:	2600      	movs	r6, #0
10014e74:	2400      	movs	r4, #0
10014e76:	e004      	b.n	10014e82 <__kernel_rem_pio2f+0x512>
10014e78:	3504      	adds	r5, #4
10014e7a:	45a0      	cmp	r8, r4
10014e7c:	db0c      	blt.n	10014e98 <__kernel_rem_pio2f+0x528>
10014e7e:	464b      	mov	r3, r9
10014e80:	58e8      	ldr	r0, [r5, r3]
10014e82:	5979      	ldr	r1, [r7, r5]
10014e84:	f001 f878 	bl	10015f78 <__aeabi_fmul>
10014e88:	1c01      	adds	r1, r0, #0
10014e8a:	1c30      	adds	r0, r6, #0
10014e8c:	f000 fd34 	bl	100158f8 <__aeabi_fadd>
10014e90:	3401      	adds	r4, #1
10014e92:	1c06      	adds	r6, r0, #0
10014e94:	45a2      	cmp	sl, r4
10014e96:	daef      	bge.n	10014e78 <__kernel_rem_pio2f+0x508>
10014e98:	4643      	mov	r3, r8
10014e9a:	465a      	mov	r2, fp
10014e9c:	009b      	lsls	r3, r3, #2
10014e9e:	50d6      	str	r6, [r2, r3]
10014ea0:	2301      	movs	r3, #1
10014ea2:	469c      	mov	ip, r3
10014ea4:	3f04      	subs	r7, #4
10014ea6:	ab47      	add	r3, sp, #284	; 0x11c
10014ea8:	44e0      	add	r8, ip
10014eaa:	42bb      	cmp	r3, r7
10014eac:	d1db      	bne.n	10014e66 <__kernel_rem_pio2f+0x4f6>
10014eae:	9b02      	ldr	r3, [sp, #8]
10014eb0:	469a      	mov	sl, r3
10014eb2:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014eb4:	2b02      	cmp	r3, #2
10014eb6:	dc59      	bgt.n	10014f6c <__kernel_rem_pio2f+0x5fc>
10014eb8:	2b00      	cmp	r3, #0
10014eba:	dc1e      	bgt.n	10014efa <__kernel_rem_pio2f+0x58a>
10014ebc:	d113      	bne.n	10014ee6 <__kernel_rem_pio2f+0x576>
10014ebe:	9b00      	ldr	r3, [sp, #0]
10014ec0:	2000      	movs	r0, #0
10014ec2:	445b      	add	r3, fp
10014ec4:	001c      	movs	r4, r3
10014ec6:	4655      	mov	r5, sl
10014ec8:	6821      	ldr	r1, [r4, #0]
10014eca:	f000 fd15 	bl	100158f8 <__aeabi_fadd>
10014ece:	3c04      	subs	r4, #4
10014ed0:	3d01      	subs	r5, #1
10014ed2:	d2f9      	bcs.n	10014ec8 <__kernel_rem_pio2f+0x558>
10014ed4:	9b03      	ldr	r3, [sp, #12]
10014ed6:	2b00      	cmp	r3, #0
10014ed8:	d003      	beq.n	10014ee2 <__kernel_rem_pio2f+0x572>
10014eda:	2380      	movs	r3, #128	; 0x80
10014edc:	061b      	lsls	r3, r3, #24
10014ede:	469c      	mov	ip, r3
10014ee0:	4460      	add	r0, ip
10014ee2:	9b06      	ldr	r3, [sp, #24]
10014ee4:	6018      	str	r0, [r3, #0]
10014ee6:	2007      	movs	r0, #7
10014ee8:	9b01      	ldr	r3, [sp, #4]
10014eea:	4018      	ands	r0, r3
10014eec:	b05d      	add	sp, #372	; 0x174
10014eee:	bc3c      	pop	{r2, r3, r4, r5}
10014ef0:	4690      	mov	r8, r2
10014ef2:	4699      	mov	r9, r3
10014ef4:	46a2      	mov	sl, r4
10014ef6:	46ab      	mov	fp, r5
10014ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014efa:	9b00      	ldr	r3, [sp, #0]
10014efc:	2000      	movs	r0, #0
10014efe:	445b      	add	r3, fp
10014f00:	001c      	movs	r4, r3
10014f02:	ad33      	add	r5, sp, #204	; 0xcc
10014f04:	6821      	ldr	r1, [r4, #0]
10014f06:	3c04      	subs	r4, #4
10014f08:	f000 fcf6 	bl	100158f8 <__aeabi_fadd>
10014f0c:	42ac      	cmp	r4, r5
10014f0e:	d1f9      	bne.n	10014f04 <__kernel_rem_pio2f+0x594>
10014f10:	9b03      	ldr	r3, [sp, #12]
10014f12:	2b00      	cmp	r3, #0
10014f14:	d01e      	beq.n	10014f54 <__kernel_rem_pio2f+0x5e4>
10014f16:	2380      	movs	r3, #128	; 0x80
10014f18:	9a06      	ldr	r2, [sp, #24]
10014f1a:	061b      	lsls	r3, r3, #24
10014f1c:	18c3      	adds	r3, r0, r3
10014f1e:	6013      	str	r3, [r2, #0]
10014f20:	1c01      	adds	r1, r0, #0
10014f22:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014f24:	f001 f93c 	bl	100161a0 <__aeabi_fsub>
10014f28:	4653      	mov	r3, sl
10014f2a:	2b00      	cmp	r3, #0
10014f2c:	dd0b      	ble.n	10014f46 <__kernel_rem_pio2f+0x5d6>
10014f2e:	2401      	movs	r4, #1
10014f30:	4656      	mov	r6, sl
10014f32:	ad35      	add	r5, sp, #212	; 0xd4
10014f34:	cd02      	ldmia	r5!, {r1}
10014f36:	3401      	adds	r4, #1
10014f38:	f000 fcde 	bl	100158f8 <__aeabi_fadd>
10014f3c:	42a6      	cmp	r6, r4
10014f3e:	daf9      	bge.n	10014f34 <__kernel_rem_pio2f+0x5c4>
10014f40:	9b03      	ldr	r3, [sp, #12]
10014f42:	2b00      	cmp	r3, #0
10014f44:	d003      	beq.n	10014f4e <__kernel_rem_pio2f+0x5de>
10014f46:	2380      	movs	r3, #128	; 0x80
10014f48:	061b      	lsls	r3, r3, #24
10014f4a:	469c      	mov	ip, r3
10014f4c:	4460      	add	r0, ip
10014f4e:	9b06      	ldr	r3, [sp, #24]
10014f50:	6058      	str	r0, [r3, #4]
10014f52:	e7c8      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
10014f54:	9b06      	ldr	r3, [sp, #24]
10014f56:	1c01      	adds	r1, r0, #0
10014f58:	6018      	str	r0, [r3, #0]
10014f5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014f5c:	f001 f920 	bl	100161a0 <__aeabi_fsub>
10014f60:	4652      	mov	r2, sl
10014f62:	2a00      	cmp	r2, #0
10014f64:	dce3      	bgt.n	10014f2e <__kernel_rem_pio2f+0x5be>
10014f66:	9b06      	ldr	r3, [sp, #24]
10014f68:	6058      	str	r0, [r3, #4]
10014f6a:	e7bc      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
10014f6c:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014f6e:	2b03      	cmp	r3, #3
10014f70:	d1b9      	bne.n	10014ee6 <__kernel_rem_pio2f+0x576>
10014f72:	4653      	mov	r3, sl
10014f74:	2b00      	cmp	r3, #0
10014f76:	dd73      	ble.n	10015060 <__kernel_rem_pio2f+0x6f0>
10014f78:	465b      	mov	r3, fp
10014f7a:	9a00      	ldr	r2, [sp, #0]
10014f7c:	4c42      	ldr	r4, [pc, #264]	; (10015088 <__kernel_rem_pio2f+0x718>)
10014f7e:	589e      	ldr	r6, [r3, r2]
10014f80:	4454      	add	r4, sl
10014f82:	ab33      	add	r3, sp, #204	; 0xcc
10014f84:	4699      	mov	r9, r3
10014f86:	46a0      	mov	r8, r4
10014f88:	00a5      	lsls	r5, r4, #2
10014f8a:	445d      	add	r5, fp
10014f8c:	682c      	ldr	r4, [r5, #0]
10014f8e:	1c31      	adds	r1, r6, #0
10014f90:	1c20      	adds	r0, r4, #0
10014f92:	f000 fcb1 	bl	100158f8 <__aeabi_fadd>
10014f96:	1c07      	adds	r7, r0, #0
10014f98:	1c01      	adds	r1, r0, #0
10014f9a:	1c20      	adds	r0, r4, #0
10014f9c:	f001 f900 	bl	100161a0 <__aeabi_fsub>
10014fa0:	1c31      	adds	r1, r6, #0
10014fa2:	f000 fca9 	bl	100158f8 <__aeabi_fadd>
10014fa6:	3d04      	subs	r5, #4
10014fa8:	60a8      	str	r0, [r5, #8]
10014faa:	606f      	str	r7, [r5, #4]
10014fac:	1c3e      	adds	r6, r7, #0
10014fae:	45a9      	cmp	r9, r5
10014fb0:	d1ec      	bne.n	10014f8c <__kernel_rem_pio2f+0x61c>
10014fb2:	4653      	mov	r3, sl
10014fb4:	4644      	mov	r4, r8
10014fb6:	2b01      	cmp	r3, #1
10014fb8:	dd52      	ble.n	10015060 <__kernel_rem_pio2f+0x6f0>
10014fba:	465b      	mov	r3, fp
10014fbc:	00a4      	lsls	r4, r4, #2
10014fbe:	46a0      	mov	r8, r4
10014fc0:	9a00      	ldr	r2, [sp, #0]
10014fc2:	191d      	adds	r5, r3, r4
10014fc4:	589e      	ldr	r6, [r3, r2]
10014fc6:	682c      	ldr	r4, [r5, #0]
10014fc8:	1c30      	adds	r0, r6, #0
10014fca:	1c21      	adds	r1, r4, #0
10014fcc:	f000 fc94 	bl	100158f8 <__aeabi_fadd>
10014fd0:	1c07      	adds	r7, r0, #0
10014fd2:	1c01      	adds	r1, r0, #0
10014fd4:	1c20      	adds	r0, r4, #0
10014fd6:	f001 f8e3 	bl	100161a0 <__aeabi_fsub>
10014fda:	1c31      	adds	r1, r6, #0
10014fdc:	f000 fc8c 	bl	100158f8 <__aeabi_fadd>
10014fe0:	3d04      	subs	r5, #4
10014fe2:	60a8      	str	r0, [r5, #8]
10014fe4:	606f      	str	r7, [r5, #4]
10014fe6:	1c3e      	adds	r6, r7, #0
10014fe8:	45ab      	cmp	fp, r5
10014fea:	d1ec      	bne.n	10014fc6 <__kernel_rem_pio2f+0x656>
10014fec:	4644      	mov	r4, r8
10014fee:	2000      	movs	r0, #0
10014ff0:	3404      	adds	r4, #4
10014ff2:	445c      	add	r4, fp
10014ff4:	ad35      	add	r5, sp, #212	; 0xd4
10014ff6:	6821      	ldr	r1, [r4, #0]
10014ff8:	3c04      	subs	r4, #4
10014ffa:	f000 fc7d 	bl	100158f8 <__aeabi_fadd>
10014ffe:	42a5      	cmp	r5, r4
10015000:	d1f9      	bne.n	10014ff6 <__kernel_rem_pio2f+0x686>
10015002:	9b03      	ldr	r3, [sp, #12]
10015004:	2b00      	cmp	r3, #0
10015006:	d02f      	beq.n	10015068 <__kernel_rem_pio2f+0x6f8>
10015008:	2280      	movs	r2, #128	; 0x80
1001500a:	0612      	lsls	r2, r2, #24
1001500c:	4694      	mov	ip, r2
1001500e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10015010:	9a06      	ldr	r2, [sp, #24]
10015012:	4463      	add	r3, ip
10015014:	6013      	str	r3, [r2, #0]
10015016:	465b      	mov	r3, fp
10015018:	685b      	ldr	r3, [r3, #4]
1001501a:	4460      	add	r0, ip
1001501c:	4463      	add	r3, ip
1001501e:	6053      	str	r3, [r2, #4]
10015020:	6090      	str	r0, [r2, #8]
10015022:	e760      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
10015024:	2201      	movs	r2, #1
10015026:	e5fe      	b.n	10014c26 <__kernel_rem_pio2f+0x2b6>
10015028:	2400      	movs	r4, #0
1001502a:	e5bb      	b.n	10014ba4 <__kernel_rem_pio2f+0x234>
1001502c:	9b66      	ldr	r3, [sp, #408]	; 0x198
1001502e:	2b02      	cmp	r3, #2
10015030:	dc10      	bgt.n	10015054 <__kernel_rem_pio2f+0x6e4>
10015032:	2b00      	cmp	r3, #0
10015034:	dc0c      	bgt.n	10015050 <__kernel_rem_pio2f+0x6e0>
10015036:	2000      	movs	r0, #0
10015038:	2b00      	cmp	r3, #0
1001503a:	d100      	bne.n	1001503e <__kernel_rem_pio2f+0x6ce>
1001503c:	e74a      	b.n	10014ed4 <__kernel_rem_pio2f+0x564>
1001503e:	e752      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
10015040:	1c28      	adds	r0, r5, #0
10015042:	f001 fa4b 	bl	100164dc <__aeabi_f2iz>
10015046:	4652      	mov	r2, sl
10015048:	ab0c      	add	r3, sp, #48	; 0x30
1001504a:	5098      	str	r0, [r3, r2]
1001504c:	46da      	mov	sl, fp
1001504e:	e6d5      	b.n	10014dfc <__kernel_rem_pio2f+0x48c>
10015050:	2000      	movs	r0, #0
10015052:	e75d      	b.n	10014f10 <__kernel_rem_pio2f+0x5a0>
10015054:	ab34      	add	r3, sp, #208	; 0xd0
10015056:	469b      	mov	fp, r3
10015058:	9b66      	ldr	r3, [sp, #408]	; 0x198
1001505a:	2b03      	cmp	r3, #3
1001505c:	d000      	beq.n	10015060 <__kernel_rem_pio2f+0x6f0>
1001505e:	e742      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
10015060:	9b03      	ldr	r3, [sp, #12]
10015062:	2000      	movs	r0, #0
10015064:	2b00      	cmp	r3, #0
10015066:	d1cf      	bne.n	10015008 <__kernel_rem_pio2f+0x698>
10015068:	9b06      	ldr	r3, [sp, #24]
1001506a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
1001506c:	6098      	str	r0, [r3, #8]
1001506e:	601a      	str	r2, [r3, #0]
10015070:	465a      	mov	r2, fp
10015072:	6852      	ldr	r2, [r2, #4]
10015074:	9200      	str	r2, [sp, #0]
10015076:	605a      	str	r2, [r3, #4]
10015078:	e735      	b.n	10014ee6 <__kernel_rem_pio2f+0x576>
1001507a:	ab48      	add	r3, sp, #288	; 0x120
1001507c:	9304      	str	r3, [sp, #16]
1001507e:	465b      	mov	r3, fp
10015080:	009b      	lsls	r3, r3, #2
10015082:	469b      	mov	fp, r3
10015084:	e4ec      	b.n	10014a60 <__kernel_rem_pio2f+0xf0>
10015086:	46c0      	nop			; (mov r8, r8)
10015088:	3fffffff 	.word	0x3fffffff
1001508c:	1001b6f0 	.word	0x1001b6f0
10015090:	3fc90000 	.word	0x3fc90000

10015094 <__kernel_sinf>:
10015094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015096:	464f      	mov	r7, r9
10015098:	4646      	mov	r6, r8
1001509a:	4690      	mov	r8, r2
1001509c:	4a33      	ldr	r2, [pc, #204]	; (1001516c <__kernel_sinf+0xd8>)
1001509e:	0043      	lsls	r3, r0, #1
100150a0:	b4c0      	push	{r6, r7}
100150a2:	1c04      	adds	r4, r0, #0
100150a4:	1c0f      	adds	r7, r1, #0
100150a6:	085b      	lsrs	r3, r3, #1
100150a8:	4293      	cmp	r3, r2
100150aa:	dc05      	bgt.n	100150b8 <__kernel_sinf+0x24>
100150ac:	f001 fa16 	bl	100164dc <__aeabi_f2iz>
100150b0:	0003      	movs	r3, r0
100150b2:	1c20      	adds	r0, r4, #0
100150b4:	2b00      	cmp	r3, #0
100150b6:	d047      	beq.n	10015148 <__kernel_sinf+0xb4>
100150b8:	1c21      	adds	r1, r4, #0
100150ba:	1c20      	adds	r0, r4, #0
100150bc:	f000 ff5c 	bl	10015f78 <__aeabi_fmul>
100150c0:	1c05      	adds	r5, r0, #0
100150c2:	1c01      	adds	r1, r0, #0
100150c4:	1c20      	adds	r0, r4, #0
100150c6:	f000 ff57 	bl	10015f78 <__aeabi_fmul>
100150ca:	4929      	ldr	r1, [pc, #164]	; (10015170 <__kernel_sinf+0xdc>)
100150cc:	1c06      	adds	r6, r0, #0
100150ce:	1c28      	adds	r0, r5, #0
100150d0:	f000 ff52 	bl	10015f78 <__aeabi_fmul>
100150d4:	4927      	ldr	r1, [pc, #156]	; (10015174 <__kernel_sinf+0xe0>)
100150d6:	f001 f863 	bl	100161a0 <__aeabi_fsub>
100150da:	1c29      	adds	r1, r5, #0
100150dc:	f000 ff4c 	bl	10015f78 <__aeabi_fmul>
100150e0:	4925      	ldr	r1, [pc, #148]	; (10015178 <__kernel_sinf+0xe4>)
100150e2:	f000 fc09 	bl	100158f8 <__aeabi_fadd>
100150e6:	1c29      	adds	r1, r5, #0
100150e8:	f000 ff46 	bl	10015f78 <__aeabi_fmul>
100150ec:	4923      	ldr	r1, [pc, #140]	; (1001517c <__kernel_sinf+0xe8>)
100150ee:	f001 f857 	bl	100161a0 <__aeabi_fsub>
100150f2:	1c29      	adds	r1, r5, #0
100150f4:	f000 ff40 	bl	10015f78 <__aeabi_fmul>
100150f8:	4921      	ldr	r1, [pc, #132]	; (10015180 <__kernel_sinf+0xec>)
100150fa:	f000 fbfd 	bl	100158f8 <__aeabi_fadd>
100150fe:	4643      	mov	r3, r8
10015100:	4681      	mov	r9, r0
10015102:	2b00      	cmp	r3, #0
10015104:	d024      	beq.n	10015150 <__kernel_sinf+0xbc>
10015106:	21fc      	movs	r1, #252	; 0xfc
10015108:	1c38      	adds	r0, r7, #0
1001510a:	0589      	lsls	r1, r1, #22
1001510c:	f000 ff34 	bl	10015f78 <__aeabi_fmul>
10015110:	4649      	mov	r1, r9
10015112:	4680      	mov	r8, r0
10015114:	1c30      	adds	r0, r6, #0
10015116:	f000 ff2f 	bl	10015f78 <__aeabi_fmul>
1001511a:	1c01      	adds	r1, r0, #0
1001511c:	4640      	mov	r0, r8
1001511e:	f001 f83f 	bl	100161a0 <__aeabi_fsub>
10015122:	1c29      	adds	r1, r5, #0
10015124:	f000 ff28 	bl	10015f78 <__aeabi_fmul>
10015128:	1c39      	adds	r1, r7, #0
1001512a:	f001 f839 	bl	100161a0 <__aeabi_fsub>
1001512e:	4915      	ldr	r1, [pc, #84]	; (10015184 <__kernel_sinf+0xf0>)
10015130:	1c05      	adds	r5, r0, #0
10015132:	1c30      	adds	r0, r6, #0
10015134:	f000 ff20 	bl	10015f78 <__aeabi_fmul>
10015138:	1c01      	adds	r1, r0, #0
1001513a:	1c28      	adds	r0, r5, #0
1001513c:	f000 fbdc 	bl	100158f8 <__aeabi_fadd>
10015140:	1c01      	adds	r1, r0, #0
10015142:	1c20      	adds	r0, r4, #0
10015144:	f001 f82c 	bl	100161a0 <__aeabi_fsub>
10015148:	bc0c      	pop	{r2, r3}
1001514a:	4690      	mov	r8, r2
1001514c:	4699      	mov	r9, r3
1001514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015150:	1c01      	adds	r1, r0, #0
10015152:	1c28      	adds	r0, r5, #0
10015154:	f000 ff10 	bl	10015f78 <__aeabi_fmul>
10015158:	490a      	ldr	r1, [pc, #40]	; (10015184 <__kernel_sinf+0xf0>)
1001515a:	f001 f821 	bl	100161a0 <__aeabi_fsub>
1001515e:	1c31      	adds	r1, r6, #0
10015160:	f000 ff0a 	bl	10015f78 <__aeabi_fmul>
10015164:	1c21      	adds	r1, r4, #0
10015166:	f000 fbc7 	bl	100158f8 <__aeabi_fadd>
1001516a:	e7ed      	b.n	10015148 <__kernel_sinf+0xb4>
1001516c:	31ffffff 	.word	0x31ffffff
10015170:	2f2ec9d3 	.word	0x2f2ec9d3
10015174:	32d72f34 	.word	0x32d72f34
10015178:	3638ef1b 	.word	0x3638ef1b
1001517c:	39500d01 	.word	0x39500d01
10015180:	3c088889 	.word	0x3c088889
10015184:	3e2aaaab 	.word	0x3e2aaaab

10015188 <floorf>:
10015188:	b5f0      	push	{r4, r5, r6, r7, lr}
1001518a:	4647      	mov	r7, r8
1001518c:	0043      	lsls	r3, r0, #1
1001518e:	b480      	push	{r7}
10015190:	085f      	lsrs	r7, r3, #1
10015192:	0e1b      	lsrs	r3, r3, #24
10015194:	3b7f      	subs	r3, #127	; 0x7f
10015196:	1c05      	adds	r5, r0, #0
10015198:	1e1c      	subs	r4, r3, #0
1001519a:	2c16      	cmp	r4, #22
1001519c:	dc18      	bgt.n	100151d0 <floorf+0x48>
1001519e:	4680      	mov	r8, r0
100151a0:	2b00      	cmp	r3, #0
100151a2:	db1e      	blt.n	100151e2 <floorf+0x5a>
100151a4:	4f1b      	ldr	r7, [pc, #108]	; (10015214 <floorf+0x8c>)
100151a6:	1c06      	adds	r6, r0, #0
100151a8:	411f      	asrs	r7, r3
100151aa:	4207      	tst	r7, r0
100151ac:	d00c      	beq.n	100151c8 <floorf+0x40>
100151ae:	491a      	ldr	r1, [pc, #104]	; (10015218 <floorf+0x90>)
100151b0:	f000 fba2 	bl	100158f8 <__aeabi_fadd>
100151b4:	2100      	movs	r1, #0
100151b6:	f000 fa81 	bl	100156bc <__aeabi_fcmpgt>
100151ba:	2800      	cmp	r0, #0
100151bc:	d004      	beq.n	100151c8 <floorf+0x40>
100151be:	2d00      	cmp	r5, #0
100151c0:	db1d      	blt.n	100151fe <floorf+0x76>
100151c2:	4643      	mov	r3, r8
100151c4:	43bb      	bics	r3, r7
100151c6:	001e      	movs	r6, r3
100151c8:	1c30      	adds	r0, r6, #0
100151ca:	bc04      	pop	{r2}
100151cc:	4690      	mov	r8, r2
100151ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100151d0:	4b12      	ldr	r3, [pc, #72]	; (1001521c <floorf+0x94>)
100151d2:	1c06      	adds	r6, r0, #0
100151d4:	429f      	cmp	r7, r3
100151d6:	d9f7      	bls.n	100151c8 <floorf+0x40>
100151d8:	1c01      	adds	r1, r0, #0
100151da:	f000 fb8d 	bl	100158f8 <__aeabi_fadd>
100151de:	1c06      	adds	r6, r0, #0
100151e0:	e7f2      	b.n	100151c8 <floorf+0x40>
100151e2:	490d      	ldr	r1, [pc, #52]	; (10015218 <floorf+0x90>)
100151e4:	f000 fb88 	bl	100158f8 <__aeabi_fadd>
100151e8:	2100      	movs	r1, #0
100151ea:	f000 fa67 	bl	100156bc <__aeabi_fcmpgt>
100151ee:	2800      	cmp	r0, #0
100151f0:	d003      	beq.n	100151fa <floorf+0x72>
100151f2:	2d00      	cmp	r5, #0
100151f4:	db09      	blt.n	1001520a <floorf+0x82>
100151f6:	2600      	movs	r6, #0
100151f8:	e7e6      	b.n	100151c8 <floorf+0x40>
100151fa:	1c2e      	adds	r6, r5, #0
100151fc:	e7e4      	b.n	100151c8 <floorf+0x40>
100151fe:	2380      	movs	r3, #128	; 0x80
10015200:	041b      	lsls	r3, r3, #16
10015202:	4123      	asrs	r3, r4
10015204:	4698      	mov	r8, r3
10015206:	44a8      	add	r8, r5
10015208:	e7db      	b.n	100151c2 <floorf+0x3a>
1001520a:	2f00      	cmp	r7, #0
1001520c:	d0f5      	beq.n	100151fa <floorf+0x72>
1001520e:	4e04      	ldr	r6, [pc, #16]	; (10015220 <floorf+0x98>)
10015210:	e7da      	b.n	100151c8 <floorf+0x40>
10015212:	46c0      	nop			; (mov r8, r8)
10015214:	007fffff 	.word	0x007fffff
10015218:	7149f2ca 	.word	0x7149f2ca
1001521c:	7f7fffff 	.word	0x7f7fffff
10015220:	bf800000 	.word	0xbf800000

10015224 <scalbnf>:
10015224:	0043      	lsls	r3, r0, #1
10015226:	b570      	push	{r4, r5, r6, lr}
10015228:	000d      	movs	r5, r1
1001522a:	1c04      	adds	r4, r0, #0
1001522c:	0859      	lsrs	r1, r3, #1
1001522e:	d010      	beq.n	10015252 <scalbnf+0x2e>
10015230:	4e26      	ldr	r6, [pc, #152]	; (100152cc <scalbnf+0xa8>)
10015232:	42b1      	cmp	r1, r6
10015234:	d80e      	bhi.n	10015254 <scalbnf+0x30>
10015236:	4826      	ldr	r0, [pc, #152]	; (100152d0 <scalbnf+0xac>)
10015238:	4281      	cmp	r1, r0
1001523a:	d90f      	bls.n	1001525c <scalbnf+0x38>
1001523c:	0020      	movs	r0, r4
1001523e:	0e1b      	lsrs	r3, r3, #24
10015240:	195b      	adds	r3, r3, r5
10015242:	2bfe      	cmp	r3, #254	; 0xfe
10015244:	dc29      	bgt.n	1001529a <scalbnf+0x76>
10015246:	2b00      	cmp	r3, #0
10015248:	dd15      	ble.n	10015276 <scalbnf+0x52>
1001524a:	4922      	ldr	r1, [pc, #136]	; (100152d4 <scalbnf+0xb0>)
1001524c:	05db      	lsls	r3, r3, #23
1001524e:	4008      	ands	r0, r1
10015250:	4318      	orrs	r0, r3
10015252:	bd70      	pop	{r4, r5, r6, pc}
10015254:	1c01      	adds	r1, r0, #0
10015256:	f000 fb4f 	bl	100158f8 <__aeabi_fadd>
1001525a:	e7fa      	b.n	10015252 <scalbnf+0x2e>
1001525c:	2198      	movs	r1, #152	; 0x98
1001525e:	1c20      	adds	r0, r4, #0
10015260:	05c9      	lsls	r1, r1, #23
10015262:	f000 fe89 	bl	10015f78 <__aeabi_fmul>
10015266:	4b1c      	ldr	r3, [pc, #112]	; (100152d8 <scalbnf+0xb4>)
10015268:	1c04      	adds	r4, r0, #0
1001526a:	429d      	cmp	r5, r3
1001526c:	db11      	blt.n	10015292 <scalbnf+0x6e>
1001526e:	0043      	lsls	r3, r0, #1
10015270:	0e1b      	lsrs	r3, r3, #24
10015272:	3b19      	subs	r3, #25
10015274:	e7e4      	b.n	10015240 <scalbnf+0x1c>
10015276:	001a      	movs	r2, r3
10015278:	3216      	adds	r2, #22
1001527a:	da16      	bge.n	100152aa <scalbnf+0x86>
1001527c:	4b17      	ldr	r3, [pc, #92]	; (100152dc <scalbnf+0xb8>)
1001527e:	1c21      	adds	r1, r4, #0
10015280:	429d      	cmp	r5, r3
10015282:	dd1c      	ble.n	100152be <scalbnf+0x9a>
10015284:	4816      	ldr	r0, [pc, #88]	; (100152e0 <scalbnf+0xbc>)
10015286:	f000 f82f 	bl	100152e8 <copysignf>
1001528a:	4915      	ldr	r1, [pc, #84]	; (100152e0 <scalbnf+0xbc>)
1001528c:	f000 fe74 	bl	10015f78 <__aeabi_fmul>
10015290:	e7df      	b.n	10015252 <scalbnf+0x2e>
10015292:	4914      	ldr	r1, [pc, #80]	; (100152e4 <scalbnf+0xc0>)
10015294:	f000 fe70 	bl	10015f78 <__aeabi_fmul>
10015298:	e7db      	b.n	10015252 <scalbnf+0x2e>
1001529a:	1c21      	adds	r1, r4, #0
1001529c:	4810      	ldr	r0, [pc, #64]	; (100152e0 <scalbnf+0xbc>)
1001529e:	f000 f823 	bl	100152e8 <copysignf>
100152a2:	490f      	ldr	r1, [pc, #60]	; (100152e0 <scalbnf+0xbc>)
100152a4:	f000 fe68 	bl	10015f78 <__aeabi_fmul>
100152a8:	e7d3      	b.n	10015252 <scalbnf+0x2e>
100152aa:	21cc      	movs	r1, #204	; 0xcc
100152ac:	3319      	adds	r3, #25
100152ae:	05da      	lsls	r2, r3, #23
100152b0:	4b08      	ldr	r3, [pc, #32]	; (100152d4 <scalbnf+0xb0>)
100152b2:	0589      	lsls	r1, r1, #22
100152b4:	4018      	ands	r0, r3
100152b6:	4310      	orrs	r0, r2
100152b8:	f000 fe5e 	bl	10015f78 <__aeabi_fmul>
100152bc:	e7c9      	b.n	10015252 <scalbnf+0x2e>
100152be:	4809      	ldr	r0, [pc, #36]	; (100152e4 <scalbnf+0xc0>)
100152c0:	f000 f812 	bl	100152e8 <copysignf>
100152c4:	4907      	ldr	r1, [pc, #28]	; (100152e4 <scalbnf+0xc0>)
100152c6:	f000 fe57 	bl	10015f78 <__aeabi_fmul>
100152ca:	e7c2      	b.n	10015252 <scalbnf+0x2e>
100152cc:	7f7fffff 	.word	0x7f7fffff
100152d0:	007fffff 	.word	0x007fffff
100152d4:	807fffff 	.word	0x807fffff
100152d8:	ffff3cb0 	.word	0xffff3cb0
100152dc:	0000c350 	.word	0x0000c350
100152e0:	7149f2ca 	.word	0x7149f2ca
100152e4:	0da24260 	.word	0x0da24260

100152e8 <copysignf>:
100152e8:	0040      	lsls	r0, r0, #1
100152ea:	0fc9      	lsrs	r1, r1, #31
100152ec:	07c9      	lsls	r1, r1, #31
100152ee:	0840      	lsrs	r0, r0, #1
100152f0:	4308      	orrs	r0, r1
100152f2:	4770      	bx	lr

100152f4 <__gnu_thumb1_case_uqi>:
100152f4:	b402      	push	{r1}
100152f6:	4671      	mov	r1, lr
100152f8:	0849      	lsrs	r1, r1, #1
100152fa:	0049      	lsls	r1, r1, #1
100152fc:	5c09      	ldrb	r1, [r1, r0]
100152fe:	0049      	lsls	r1, r1, #1
10015300:	448e      	add	lr, r1
10015302:	bc02      	pop	{r1}
10015304:	4770      	bx	lr
10015306:	46c0      	nop			; (mov r8, r8)

10015308 <__aeabi_uidiv>:
10015308:	2200      	movs	r2, #0
1001530a:	0843      	lsrs	r3, r0, #1
1001530c:	428b      	cmp	r3, r1
1001530e:	d374      	bcc.n	100153fa <__aeabi_uidiv+0xf2>
10015310:	0903      	lsrs	r3, r0, #4
10015312:	428b      	cmp	r3, r1
10015314:	d35f      	bcc.n	100153d6 <__aeabi_uidiv+0xce>
10015316:	0a03      	lsrs	r3, r0, #8
10015318:	428b      	cmp	r3, r1
1001531a:	d344      	bcc.n	100153a6 <__aeabi_uidiv+0x9e>
1001531c:	0b03      	lsrs	r3, r0, #12
1001531e:	428b      	cmp	r3, r1
10015320:	d328      	bcc.n	10015374 <__aeabi_uidiv+0x6c>
10015322:	0c03      	lsrs	r3, r0, #16
10015324:	428b      	cmp	r3, r1
10015326:	d30d      	bcc.n	10015344 <__aeabi_uidiv+0x3c>
10015328:	22ff      	movs	r2, #255	; 0xff
1001532a:	0209      	lsls	r1, r1, #8
1001532c:	ba12      	rev	r2, r2
1001532e:	0c03      	lsrs	r3, r0, #16
10015330:	428b      	cmp	r3, r1
10015332:	d302      	bcc.n	1001533a <__aeabi_uidiv+0x32>
10015334:	1212      	asrs	r2, r2, #8
10015336:	0209      	lsls	r1, r1, #8
10015338:	d065      	beq.n	10015406 <__aeabi_uidiv+0xfe>
1001533a:	0b03      	lsrs	r3, r0, #12
1001533c:	428b      	cmp	r3, r1
1001533e:	d319      	bcc.n	10015374 <__aeabi_uidiv+0x6c>
10015340:	e000      	b.n	10015344 <__aeabi_uidiv+0x3c>
10015342:	0a09      	lsrs	r1, r1, #8
10015344:	0bc3      	lsrs	r3, r0, #15
10015346:	428b      	cmp	r3, r1
10015348:	d301      	bcc.n	1001534e <__aeabi_uidiv+0x46>
1001534a:	03cb      	lsls	r3, r1, #15
1001534c:	1ac0      	subs	r0, r0, r3
1001534e:	4152      	adcs	r2, r2
10015350:	0b83      	lsrs	r3, r0, #14
10015352:	428b      	cmp	r3, r1
10015354:	d301      	bcc.n	1001535a <__aeabi_uidiv+0x52>
10015356:	038b      	lsls	r3, r1, #14
10015358:	1ac0      	subs	r0, r0, r3
1001535a:	4152      	adcs	r2, r2
1001535c:	0b43      	lsrs	r3, r0, #13
1001535e:	428b      	cmp	r3, r1
10015360:	d301      	bcc.n	10015366 <__aeabi_uidiv+0x5e>
10015362:	034b      	lsls	r3, r1, #13
10015364:	1ac0      	subs	r0, r0, r3
10015366:	4152      	adcs	r2, r2
10015368:	0b03      	lsrs	r3, r0, #12
1001536a:	428b      	cmp	r3, r1
1001536c:	d301      	bcc.n	10015372 <__aeabi_uidiv+0x6a>
1001536e:	030b      	lsls	r3, r1, #12
10015370:	1ac0      	subs	r0, r0, r3
10015372:	4152      	adcs	r2, r2
10015374:	0ac3      	lsrs	r3, r0, #11
10015376:	428b      	cmp	r3, r1
10015378:	d301      	bcc.n	1001537e <__aeabi_uidiv+0x76>
1001537a:	02cb      	lsls	r3, r1, #11
1001537c:	1ac0      	subs	r0, r0, r3
1001537e:	4152      	adcs	r2, r2
10015380:	0a83      	lsrs	r3, r0, #10
10015382:	428b      	cmp	r3, r1
10015384:	d301      	bcc.n	1001538a <__aeabi_uidiv+0x82>
10015386:	028b      	lsls	r3, r1, #10
10015388:	1ac0      	subs	r0, r0, r3
1001538a:	4152      	adcs	r2, r2
1001538c:	0a43      	lsrs	r3, r0, #9
1001538e:	428b      	cmp	r3, r1
10015390:	d301      	bcc.n	10015396 <__aeabi_uidiv+0x8e>
10015392:	024b      	lsls	r3, r1, #9
10015394:	1ac0      	subs	r0, r0, r3
10015396:	4152      	adcs	r2, r2
10015398:	0a03      	lsrs	r3, r0, #8
1001539a:	428b      	cmp	r3, r1
1001539c:	d301      	bcc.n	100153a2 <__aeabi_uidiv+0x9a>
1001539e:	020b      	lsls	r3, r1, #8
100153a0:	1ac0      	subs	r0, r0, r3
100153a2:	4152      	adcs	r2, r2
100153a4:	d2cd      	bcs.n	10015342 <__aeabi_uidiv+0x3a>
100153a6:	09c3      	lsrs	r3, r0, #7
100153a8:	428b      	cmp	r3, r1
100153aa:	d301      	bcc.n	100153b0 <__aeabi_uidiv+0xa8>
100153ac:	01cb      	lsls	r3, r1, #7
100153ae:	1ac0      	subs	r0, r0, r3
100153b0:	4152      	adcs	r2, r2
100153b2:	0983      	lsrs	r3, r0, #6
100153b4:	428b      	cmp	r3, r1
100153b6:	d301      	bcc.n	100153bc <__aeabi_uidiv+0xb4>
100153b8:	018b      	lsls	r3, r1, #6
100153ba:	1ac0      	subs	r0, r0, r3
100153bc:	4152      	adcs	r2, r2
100153be:	0943      	lsrs	r3, r0, #5
100153c0:	428b      	cmp	r3, r1
100153c2:	d301      	bcc.n	100153c8 <__aeabi_uidiv+0xc0>
100153c4:	014b      	lsls	r3, r1, #5
100153c6:	1ac0      	subs	r0, r0, r3
100153c8:	4152      	adcs	r2, r2
100153ca:	0903      	lsrs	r3, r0, #4
100153cc:	428b      	cmp	r3, r1
100153ce:	d301      	bcc.n	100153d4 <__aeabi_uidiv+0xcc>
100153d0:	010b      	lsls	r3, r1, #4
100153d2:	1ac0      	subs	r0, r0, r3
100153d4:	4152      	adcs	r2, r2
100153d6:	08c3      	lsrs	r3, r0, #3
100153d8:	428b      	cmp	r3, r1
100153da:	d301      	bcc.n	100153e0 <__aeabi_uidiv+0xd8>
100153dc:	00cb      	lsls	r3, r1, #3
100153de:	1ac0      	subs	r0, r0, r3
100153e0:	4152      	adcs	r2, r2
100153e2:	0883      	lsrs	r3, r0, #2
100153e4:	428b      	cmp	r3, r1
100153e6:	d301      	bcc.n	100153ec <__aeabi_uidiv+0xe4>
100153e8:	008b      	lsls	r3, r1, #2
100153ea:	1ac0      	subs	r0, r0, r3
100153ec:	4152      	adcs	r2, r2
100153ee:	0843      	lsrs	r3, r0, #1
100153f0:	428b      	cmp	r3, r1
100153f2:	d301      	bcc.n	100153f8 <__aeabi_uidiv+0xf0>
100153f4:	004b      	lsls	r3, r1, #1
100153f6:	1ac0      	subs	r0, r0, r3
100153f8:	4152      	adcs	r2, r2
100153fa:	1a41      	subs	r1, r0, r1
100153fc:	d200      	bcs.n	10015400 <__aeabi_uidiv+0xf8>
100153fe:	4601      	mov	r1, r0
10015400:	4152      	adcs	r2, r2
10015402:	4610      	mov	r0, r2
10015404:	4770      	bx	lr
10015406:	e7ff      	b.n	10015408 <__aeabi_uidiv+0x100>
10015408:	b501      	push	{r0, lr}
1001540a:	2000      	movs	r0, #0
1001540c:	f000 f8f0 	bl	100155f0 <__aeabi_idiv0>
10015410:	bd02      	pop	{r1, pc}
10015412:	46c0      	nop			; (mov r8, r8)

10015414 <__aeabi_uidivmod>:
10015414:	2900      	cmp	r1, #0
10015416:	d0f7      	beq.n	10015408 <__aeabi_uidiv+0x100>
10015418:	e776      	b.n	10015308 <__aeabi_uidiv>
1001541a:	4770      	bx	lr

1001541c <__aeabi_idiv>:
1001541c:	4603      	mov	r3, r0
1001541e:	430b      	orrs	r3, r1
10015420:	d47f      	bmi.n	10015522 <__aeabi_idiv+0x106>
10015422:	2200      	movs	r2, #0
10015424:	0843      	lsrs	r3, r0, #1
10015426:	428b      	cmp	r3, r1
10015428:	d374      	bcc.n	10015514 <__aeabi_idiv+0xf8>
1001542a:	0903      	lsrs	r3, r0, #4
1001542c:	428b      	cmp	r3, r1
1001542e:	d35f      	bcc.n	100154f0 <__aeabi_idiv+0xd4>
10015430:	0a03      	lsrs	r3, r0, #8
10015432:	428b      	cmp	r3, r1
10015434:	d344      	bcc.n	100154c0 <__aeabi_idiv+0xa4>
10015436:	0b03      	lsrs	r3, r0, #12
10015438:	428b      	cmp	r3, r1
1001543a:	d328      	bcc.n	1001548e <__aeabi_idiv+0x72>
1001543c:	0c03      	lsrs	r3, r0, #16
1001543e:	428b      	cmp	r3, r1
10015440:	d30d      	bcc.n	1001545e <__aeabi_idiv+0x42>
10015442:	22ff      	movs	r2, #255	; 0xff
10015444:	0209      	lsls	r1, r1, #8
10015446:	ba12      	rev	r2, r2
10015448:	0c03      	lsrs	r3, r0, #16
1001544a:	428b      	cmp	r3, r1
1001544c:	d302      	bcc.n	10015454 <__aeabi_idiv+0x38>
1001544e:	1212      	asrs	r2, r2, #8
10015450:	0209      	lsls	r1, r1, #8
10015452:	d065      	beq.n	10015520 <__aeabi_idiv+0x104>
10015454:	0b03      	lsrs	r3, r0, #12
10015456:	428b      	cmp	r3, r1
10015458:	d319      	bcc.n	1001548e <__aeabi_idiv+0x72>
1001545a:	e000      	b.n	1001545e <__aeabi_idiv+0x42>
1001545c:	0a09      	lsrs	r1, r1, #8
1001545e:	0bc3      	lsrs	r3, r0, #15
10015460:	428b      	cmp	r3, r1
10015462:	d301      	bcc.n	10015468 <__aeabi_idiv+0x4c>
10015464:	03cb      	lsls	r3, r1, #15
10015466:	1ac0      	subs	r0, r0, r3
10015468:	4152      	adcs	r2, r2
1001546a:	0b83      	lsrs	r3, r0, #14
1001546c:	428b      	cmp	r3, r1
1001546e:	d301      	bcc.n	10015474 <__aeabi_idiv+0x58>
10015470:	038b      	lsls	r3, r1, #14
10015472:	1ac0      	subs	r0, r0, r3
10015474:	4152      	adcs	r2, r2
10015476:	0b43      	lsrs	r3, r0, #13
10015478:	428b      	cmp	r3, r1
1001547a:	d301      	bcc.n	10015480 <__aeabi_idiv+0x64>
1001547c:	034b      	lsls	r3, r1, #13
1001547e:	1ac0      	subs	r0, r0, r3
10015480:	4152      	adcs	r2, r2
10015482:	0b03      	lsrs	r3, r0, #12
10015484:	428b      	cmp	r3, r1
10015486:	d301      	bcc.n	1001548c <__aeabi_idiv+0x70>
10015488:	030b      	lsls	r3, r1, #12
1001548a:	1ac0      	subs	r0, r0, r3
1001548c:	4152      	adcs	r2, r2
1001548e:	0ac3      	lsrs	r3, r0, #11
10015490:	428b      	cmp	r3, r1
10015492:	d301      	bcc.n	10015498 <__aeabi_idiv+0x7c>
10015494:	02cb      	lsls	r3, r1, #11
10015496:	1ac0      	subs	r0, r0, r3
10015498:	4152      	adcs	r2, r2
1001549a:	0a83      	lsrs	r3, r0, #10
1001549c:	428b      	cmp	r3, r1
1001549e:	d301      	bcc.n	100154a4 <__aeabi_idiv+0x88>
100154a0:	028b      	lsls	r3, r1, #10
100154a2:	1ac0      	subs	r0, r0, r3
100154a4:	4152      	adcs	r2, r2
100154a6:	0a43      	lsrs	r3, r0, #9
100154a8:	428b      	cmp	r3, r1
100154aa:	d301      	bcc.n	100154b0 <__aeabi_idiv+0x94>
100154ac:	024b      	lsls	r3, r1, #9
100154ae:	1ac0      	subs	r0, r0, r3
100154b0:	4152      	adcs	r2, r2
100154b2:	0a03      	lsrs	r3, r0, #8
100154b4:	428b      	cmp	r3, r1
100154b6:	d301      	bcc.n	100154bc <__aeabi_idiv+0xa0>
100154b8:	020b      	lsls	r3, r1, #8
100154ba:	1ac0      	subs	r0, r0, r3
100154bc:	4152      	adcs	r2, r2
100154be:	d2cd      	bcs.n	1001545c <__aeabi_idiv+0x40>
100154c0:	09c3      	lsrs	r3, r0, #7
100154c2:	428b      	cmp	r3, r1
100154c4:	d301      	bcc.n	100154ca <__aeabi_idiv+0xae>
100154c6:	01cb      	lsls	r3, r1, #7
100154c8:	1ac0      	subs	r0, r0, r3
100154ca:	4152      	adcs	r2, r2
100154cc:	0983      	lsrs	r3, r0, #6
100154ce:	428b      	cmp	r3, r1
100154d0:	d301      	bcc.n	100154d6 <__aeabi_idiv+0xba>
100154d2:	018b      	lsls	r3, r1, #6
100154d4:	1ac0      	subs	r0, r0, r3
100154d6:	4152      	adcs	r2, r2
100154d8:	0943      	lsrs	r3, r0, #5
100154da:	428b      	cmp	r3, r1
100154dc:	d301      	bcc.n	100154e2 <__aeabi_idiv+0xc6>
100154de:	014b      	lsls	r3, r1, #5
100154e0:	1ac0      	subs	r0, r0, r3
100154e2:	4152      	adcs	r2, r2
100154e4:	0903      	lsrs	r3, r0, #4
100154e6:	428b      	cmp	r3, r1
100154e8:	d301      	bcc.n	100154ee <__aeabi_idiv+0xd2>
100154ea:	010b      	lsls	r3, r1, #4
100154ec:	1ac0      	subs	r0, r0, r3
100154ee:	4152      	adcs	r2, r2
100154f0:	08c3      	lsrs	r3, r0, #3
100154f2:	428b      	cmp	r3, r1
100154f4:	d301      	bcc.n	100154fa <__aeabi_idiv+0xde>
100154f6:	00cb      	lsls	r3, r1, #3
100154f8:	1ac0      	subs	r0, r0, r3
100154fa:	4152      	adcs	r2, r2
100154fc:	0883      	lsrs	r3, r0, #2
100154fe:	428b      	cmp	r3, r1
10015500:	d301      	bcc.n	10015506 <__aeabi_idiv+0xea>
10015502:	008b      	lsls	r3, r1, #2
10015504:	1ac0      	subs	r0, r0, r3
10015506:	4152      	adcs	r2, r2
10015508:	0843      	lsrs	r3, r0, #1
1001550a:	428b      	cmp	r3, r1
1001550c:	d301      	bcc.n	10015512 <__aeabi_idiv+0xf6>
1001550e:	004b      	lsls	r3, r1, #1
10015510:	1ac0      	subs	r0, r0, r3
10015512:	4152      	adcs	r2, r2
10015514:	1a41      	subs	r1, r0, r1
10015516:	d200      	bcs.n	1001551a <__aeabi_idiv+0xfe>
10015518:	4601      	mov	r1, r0
1001551a:	4152      	adcs	r2, r2
1001551c:	4610      	mov	r0, r2
1001551e:	4770      	bx	lr
10015520:	e05d      	b.n	100155de <__aeabi_idiv+0x1c2>
10015522:	0fca      	lsrs	r2, r1, #31
10015524:	d000      	beq.n	10015528 <__aeabi_idiv+0x10c>
10015526:	4249      	negs	r1, r1
10015528:	1003      	asrs	r3, r0, #32
1001552a:	d300      	bcc.n	1001552e <__aeabi_idiv+0x112>
1001552c:	4240      	negs	r0, r0
1001552e:	4053      	eors	r3, r2
10015530:	2200      	movs	r2, #0
10015532:	469c      	mov	ip, r3
10015534:	0903      	lsrs	r3, r0, #4
10015536:	428b      	cmp	r3, r1
10015538:	d32d      	bcc.n	10015596 <__aeabi_idiv+0x17a>
1001553a:	0a03      	lsrs	r3, r0, #8
1001553c:	428b      	cmp	r3, r1
1001553e:	d312      	bcc.n	10015566 <__aeabi_idiv+0x14a>
10015540:	22fc      	movs	r2, #252	; 0xfc
10015542:	0189      	lsls	r1, r1, #6
10015544:	ba12      	rev	r2, r2
10015546:	0a03      	lsrs	r3, r0, #8
10015548:	428b      	cmp	r3, r1
1001554a:	d30c      	bcc.n	10015566 <__aeabi_idiv+0x14a>
1001554c:	0189      	lsls	r1, r1, #6
1001554e:	1192      	asrs	r2, r2, #6
10015550:	428b      	cmp	r3, r1
10015552:	d308      	bcc.n	10015566 <__aeabi_idiv+0x14a>
10015554:	0189      	lsls	r1, r1, #6
10015556:	1192      	asrs	r2, r2, #6
10015558:	428b      	cmp	r3, r1
1001555a:	d304      	bcc.n	10015566 <__aeabi_idiv+0x14a>
1001555c:	0189      	lsls	r1, r1, #6
1001555e:	d03a      	beq.n	100155d6 <__aeabi_idiv+0x1ba>
10015560:	1192      	asrs	r2, r2, #6
10015562:	e000      	b.n	10015566 <__aeabi_idiv+0x14a>
10015564:	0989      	lsrs	r1, r1, #6
10015566:	09c3      	lsrs	r3, r0, #7
10015568:	428b      	cmp	r3, r1
1001556a:	d301      	bcc.n	10015570 <__aeabi_idiv+0x154>
1001556c:	01cb      	lsls	r3, r1, #7
1001556e:	1ac0      	subs	r0, r0, r3
10015570:	4152      	adcs	r2, r2
10015572:	0983      	lsrs	r3, r0, #6
10015574:	428b      	cmp	r3, r1
10015576:	d301      	bcc.n	1001557c <__aeabi_idiv+0x160>
10015578:	018b      	lsls	r3, r1, #6
1001557a:	1ac0      	subs	r0, r0, r3
1001557c:	4152      	adcs	r2, r2
1001557e:	0943      	lsrs	r3, r0, #5
10015580:	428b      	cmp	r3, r1
10015582:	d301      	bcc.n	10015588 <__aeabi_idiv+0x16c>
10015584:	014b      	lsls	r3, r1, #5
10015586:	1ac0      	subs	r0, r0, r3
10015588:	4152      	adcs	r2, r2
1001558a:	0903      	lsrs	r3, r0, #4
1001558c:	428b      	cmp	r3, r1
1001558e:	d301      	bcc.n	10015594 <__aeabi_idiv+0x178>
10015590:	010b      	lsls	r3, r1, #4
10015592:	1ac0      	subs	r0, r0, r3
10015594:	4152      	adcs	r2, r2
10015596:	08c3      	lsrs	r3, r0, #3
10015598:	428b      	cmp	r3, r1
1001559a:	d301      	bcc.n	100155a0 <__aeabi_idiv+0x184>
1001559c:	00cb      	lsls	r3, r1, #3
1001559e:	1ac0      	subs	r0, r0, r3
100155a0:	4152      	adcs	r2, r2
100155a2:	0883      	lsrs	r3, r0, #2
100155a4:	428b      	cmp	r3, r1
100155a6:	d301      	bcc.n	100155ac <__aeabi_idiv+0x190>
100155a8:	008b      	lsls	r3, r1, #2
100155aa:	1ac0      	subs	r0, r0, r3
100155ac:	4152      	adcs	r2, r2
100155ae:	d2d9      	bcs.n	10015564 <__aeabi_idiv+0x148>
100155b0:	0843      	lsrs	r3, r0, #1
100155b2:	428b      	cmp	r3, r1
100155b4:	d301      	bcc.n	100155ba <__aeabi_idiv+0x19e>
100155b6:	004b      	lsls	r3, r1, #1
100155b8:	1ac0      	subs	r0, r0, r3
100155ba:	4152      	adcs	r2, r2
100155bc:	1a41      	subs	r1, r0, r1
100155be:	d200      	bcs.n	100155c2 <__aeabi_idiv+0x1a6>
100155c0:	4601      	mov	r1, r0
100155c2:	4663      	mov	r3, ip
100155c4:	4152      	adcs	r2, r2
100155c6:	105b      	asrs	r3, r3, #1
100155c8:	4610      	mov	r0, r2
100155ca:	d301      	bcc.n	100155d0 <__aeabi_idiv+0x1b4>
100155cc:	4240      	negs	r0, r0
100155ce:	2b00      	cmp	r3, #0
100155d0:	d500      	bpl.n	100155d4 <__aeabi_idiv+0x1b8>
100155d2:	4249      	negs	r1, r1
100155d4:	4770      	bx	lr
100155d6:	4663      	mov	r3, ip
100155d8:	105b      	asrs	r3, r3, #1
100155da:	d300      	bcc.n	100155de <__aeabi_idiv+0x1c2>
100155dc:	4240      	negs	r0, r0
100155de:	b501      	push	{r0, lr}
100155e0:	2000      	movs	r0, #0
100155e2:	f000 f805 	bl	100155f0 <__aeabi_idiv0>
100155e6:	bd02      	pop	{r1, pc}

100155e8 <__aeabi_idivmod>:
100155e8:	2900      	cmp	r1, #0
100155ea:	d0f8      	beq.n	100155de <__aeabi_idiv+0x1c2>
100155ec:	e716      	b.n	1001541c <__aeabi_idiv>
100155ee:	4770      	bx	lr

100155f0 <__aeabi_idiv0>:
100155f0:	4770      	bx	lr
100155f2:	46c0      	nop			; (mov r8, r8)

100155f4 <__aeabi_cdrcmple>:
100155f4:	4684      	mov	ip, r0
100155f6:	1c10      	adds	r0, r2, #0
100155f8:	4662      	mov	r2, ip
100155fa:	468c      	mov	ip, r1
100155fc:	1c19      	adds	r1, r3, #0
100155fe:	4663      	mov	r3, ip
10015600:	e000      	b.n	10015604 <__aeabi_cdcmpeq>
10015602:	46c0      	nop			; (mov r8, r8)

10015604 <__aeabi_cdcmpeq>:
10015604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10015606:	f001 fef7 	bl	100173f8 <__ledf2>
1001560a:	2800      	cmp	r0, #0
1001560c:	d401      	bmi.n	10015612 <__aeabi_cdcmpeq+0xe>
1001560e:	2100      	movs	r1, #0
10015610:	42c8      	cmn	r0, r1
10015612:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015614 <__aeabi_dcmpeq>:
10015614:	b510      	push	{r4, lr}
10015616:	f001 fe4b 	bl	100172b0 <__eqdf2>
1001561a:	4240      	negs	r0, r0
1001561c:	3001      	adds	r0, #1
1001561e:	bd10      	pop	{r4, pc}

10015620 <__aeabi_dcmplt>:
10015620:	b510      	push	{r4, lr}
10015622:	f001 fee9 	bl	100173f8 <__ledf2>
10015626:	2800      	cmp	r0, #0
10015628:	db01      	blt.n	1001562e <__aeabi_dcmplt+0xe>
1001562a:	2000      	movs	r0, #0
1001562c:	bd10      	pop	{r4, pc}
1001562e:	2001      	movs	r0, #1
10015630:	bd10      	pop	{r4, pc}
10015632:	46c0      	nop			; (mov r8, r8)

10015634 <__aeabi_dcmple>:
10015634:	b510      	push	{r4, lr}
10015636:	f001 fedf 	bl	100173f8 <__ledf2>
1001563a:	2800      	cmp	r0, #0
1001563c:	dd01      	ble.n	10015642 <__aeabi_dcmple+0xe>
1001563e:	2000      	movs	r0, #0
10015640:	bd10      	pop	{r4, pc}
10015642:	2001      	movs	r0, #1
10015644:	bd10      	pop	{r4, pc}
10015646:	46c0      	nop			; (mov r8, r8)

10015648 <__aeabi_dcmpgt>:
10015648:	b510      	push	{r4, lr}
1001564a:	f001 fe71 	bl	10017330 <__gedf2>
1001564e:	2800      	cmp	r0, #0
10015650:	dc01      	bgt.n	10015656 <__aeabi_dcmpgt+0xe>
10015652:	2000      	movs	r0, #0
10015654:	bd10      	pop	{r4, pc}
10015656:	2001      	movs	r0, #1
10015658:	bd10      	pop	{r4, pc}
1001565a:	46c0      	nop			; (mov r8, r8)

1001565c <__aeabi_dcmpge>:
1001565c:	b510      	push	{r4, lr}
1001565e:	f001 fe67 	bl	10017330 <__gedf2>
10015662:	2800      	cmp	r0, #0
10015664:	da01      	bge.n	1001566a <__aeabi_dcmpge+0xe>
10015666:	2000      	movs	r0, #0
10015668:	bd10      	pop	{r4, pc}
1001566a:	2001      	movs	r0, #1
1001566c:	bd10      	pop	{r4, pc}
1001566e:	46c0      	nop			; (mov r8, r8)

10015670 <__aeabi_cfrcmple>:
10015670:	4684      	mov	ip, r0
10015672:	1c08      	adds	r0, r1, #0
10015674:	4661      	mov	r1, ip
10015676:	e7ff      	b.n	10015678 <__aeabi_cfcmpeq>

10015678 <__aeabi_cfcmpeq>:
10015678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001567a:	f000 fc39 	bl	10015ef0 <__lesf2>
1001567e:	2800      	cmp	r0, #0
10015680:	d401      	bmi.n	10015686 <__aeabi_cfcmpeq+0xe>
10015682:	2100      	movs	r1, #0
10015684:	42c8      	cmn	r0, r1
10015686:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015688 <__aeabi_fcmpeq>:
10015688:	b510      	push	{r4, lr}
1001568a:	f000 fbc5 	bl	10015e18 <__eqsf2>
1001568e:	4240      	negs	r0, r0
10015690:	3001      	adds	r0, #1
10015692:	bd10      	pop	{r4, pc}

10015694 <__aeabi_fcmplt>:
10015694:	b510      	push	{r4, lr}
10015696:	f000 fc2b 	bl	10015ef0 <__lesf2>
1001569a:	2800      	cmp	r0, #0
1001569c:	db01      	blt.n	100156a2 <__aeabi_fcmplt+0xe>
1001569e:	2000      	movs	r0, #0
100156a0:	bd10      	pop	{r4, pc}
100156a2:	2001      	movs	r0, #1
100156a4:	bd10      	pop	{r4, pc}
100156a6:	46c0      	nop			; (mov r8, r8)

100156a8 <__aeabi_fcmple>:
100156a8:	b510      	push	{r4, lr}
100156aa:	f000 fc21 	bl	10015ef0 <__lesf2>
100156ae:	2800      	cmp	r0, #0
100156b0:	dd01      	ble.n	100156b6 <__aeabi_fcmple+0xe>
100156b2:	2000      	movs	r0, #0
100156b4:	bd10      	pop	{r4, pc}
100156b6:	2001      	movs	r0, #1
100156b8:	bd10      	pop	{r4, pc}
100156ba:	46c0      	nop			; (mov r8, r8)

100156bc <__aeabi_fcmpgt>:
100156bc:	b510      	push	{r4, lr}
100156be:	f000 fbd3 	bl	10015e68 <__gesf2>
100156c2:	2800      	cmp	r0, #0
100156c4:	dc01      	bgt.n	100156ca <__aeabi_fcmpgt+0xe>
100156c6:	2000      	movs	r0, #0
100156c8:	bd10      	pop	{r4, pc}
100156ca:	2001      	movs	r0, #1
100156cc:	bd10      	pop	{r4, pc}
100156ce:	46c0      	nop			; (mov r8, r8)

100156d0 <__aeabi_fcmpge>:
100156d0:	b510      	push	{r4, lr}
100156d2:	f000 fbc9 	bl	10015e68 <__gesf2>
100156d6:	2800      	cmp	r0, #0
100156d8:	da01      	bge.n	100156de <__aeabi_fcmpge+0xe>
100156da:	2000      	movs	r0, #0
100156dc:	bd10      	pop	{r4, pc}
100156de:	2001      	movs	r0, #1
100156e0:	bd10      	pop	{r4, pc}
100156e2:	46c0      	nop			; (mov r8, r8)

100156e4 <__aeabi_ldivmod>:
100156e4:	2b00      	cmp	r3, #0
100156e6:	d115      	bne.n	10015714 <__aeabi_ldivmod+0x30>
100156e8:	2a00      	cmp	r2, #0
100156ea:	d113      	bne.n	10015714 <__aeabi_ldivmod+0x30>
100156ec:	2900      	cmp	r1, #0
100156ee:	db06      	blt.n	100156fe <__aeabi_ldivmod+0x1a>
100156f0:	dc01      	bgt.n	100156f6 <__aeabi_ldivmod+0x12>
100156f2:	2800      	cmp	r0, #0
100156f4:	d006      	beq.n	10015704 <__aeabi_ldivmod+0x20>
100156f6:	2000      	movs	r0, #0
100156f8:	43c0      	mvns	r0, r0
100156fa:	0841      	lsrs	r1, r0, #1
100156fc:	e002      	b.n	10015704 <__aeabi_ldivmod+0x20>
100156fe:	2180      	movs	r1, #128	; 0x80
10015700:	0609      	lsls	r1, r1, #24
10015702:	2000      	movs	r0, #0
10015704:	b407      	push	{r0, r1, r2}
10015706:	4802      	ldr	r0, [pc, #8]	; (10015710 <__aeabi_ldivmod+0x2c>)
10015708:	a101      	add	r1, pc, #4	; (adr r1, 10015710 <__aeabi_ldivmod+0x2c>)
1001570a:	1840      	adds	r0, r0, r1
1001570c:	9002      	str	r0, [sp, #8]
1001570e:	bd03      	pop	{r0, r1, pc}
10015710:	fffffee1 	.word	0xfffffee1
10015714:	b403      	push	{r0, r1}
10015716:	4668      	mov	r0, sp
10015718:	b501      	push	{r0, lr}
1001571a:	9802      	ldr	r0, [sp, #8]
1001571c:	f000 f8d0 	bl	100158c0 <__gnu_ldivmod_helper>
10015720:	9b01      	ldr	r3, [sp, #4]
10015722:	469e      	mov	lr, r3
10015724:	b002      	add	sp, #8
10015726:	bc0c      	pop	{r2, r3}
10015728:	4770      	bx	lr
1001572a:	46c0      	nop			; (mov r8, r8)

1001572c <__aeabi_lmul>:
1001572c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001572e:	464f      	mov	r7, r9
10015730:	4646      	mov	r6, r8
10015732:	b4c0      	push	{r6, r7}
10015734:	0416      	lsls	r6, r2, #16
10015736:	0c36      	lsrs	r6, r6, #16
10015738:	4699      	mov	r9, r3
1001573a:	0033      	movs	r3, r6
1001573c:	0405      	lsls	r5, r0, #16
1001573e:	0c2c      	lsrs	r4, r5, #16
10015740:	0c07      	lsrs	r7, r0, #16
10015742:	0c15      	lsrs	r5, r2, #16
10015744:	4363      	muls	r3, r4
10015746:	437e      	muls	r6, r7
10015748:	436f      	muls	r7, r5
1001574a:	4365      	muls	r5, r4
1001574c:	0c1c      	lsrs	r4, r3, #16
1001574e:	19ad      	adds	r5, r5, r6
10015750:	1964      	adds	r4, r4, r5
10015752:	469c      	mov	ip, r3
10015754:	42a6      	cmp	r6, r4
10015756:	d903      	bls.n	10015760 <__aeabi_lmul+0x34>
10015758:	2380      	movs	r3, #128	; 0x80
1001575a:	025b      	lsls	r3, r3, #9
1001575c:	4698      	mov	r8, r3
1001575e:	4447      	add	r7, r8
10015760:	4663      	mov	r3, ip
10015762:	0c25      	lsrs	r5, r4, #16
10015764:	19ef      	adds	r7, r5, r7
10015766:	041d      	lsls	r5, r3, #16
10015768:	464b      	mov	r3, r9
1001576a:	434a      	muls	r2, r1
1001576c:	4343      	muls	r3, r0
1001576e:	0c2d      	lsrs	r5, r5, #16
10015770:	0424      	lsls	r4, r4, #16
10015772:	1964      	adds	r4, r4, r5
10015774:	1899      	adds	r1, r3, r2
10015776:	19c9      	adds	r1, r1, r7
10015778:	0020      	movs	r0, r4
1001577a:	bc0c      	pop	{r2, r3}
1001577c:	4690      	mov	r8, r2
1001577e:	4699      	mov	r9, r3
10015780:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015782:	46c0      	nop			; (mov r8, r8)

10015784 <__aeabi_f2uiz>:
10015784:	219e      	movs	r1, #158	; 0x9e
10015786:	b510      	push	{r4, lr}
10015788:	05c9      	lsls	r1, r1, #23
1001578a:	1c04      	adds	r4, r0, #0
1001578c:	f7ff ffa0 	bl	100156d0 <__aeabi_fcmpge>
10015790:	2800      	cmp	r0, #0
10015792:	d103      	bne.n	1001579c <__aeabi_f2uiz+0x18>
10015794:	1c20      	adds	r0, r4, #0
10015796:	f000 fea1 	bl	100164dc <__aeabi_f2iz>
1001579a:	bd10      	pop	{r4, pc}
1001579c:	219e      	movs	r1, #158	; 0x9e
1001579e:	1c20      	adds	r0, r4, #0
100157a0:	05c9      	lsls	r1, r1, #23
100157a2:	f000 fcfd 	bl	100161a0 <__aeabi_fsub>
100157a6:	f000 fe99 	bl	100164dc <__aeabi_f2iz>
100157aa:	2380      	movs	r3, #128	; 0x80
100157ac:	061b      	lsls	r3, r3, #24
100157ae:	469c      	mov	ip, r3
100157b0:	4460      	add	r0, ip
100157b2:	e7f2      	b.n	1001579a <__aeabi_f2uiz+0x16>

100157b4 <__aeabi_d2uiz>:
100157b4:	b570      	push	{r4, r5, r6, lr}
100157b6:	2200      	movs	r2, #0
100157b8:	4b0c      	ldr	r3, [pc, #48]	; (100157ec <__aeabi_d2uiz+0x38>)
100157ba:	0004      	movs	r4, r0
100157bc:	000d      	movs	r5, r1
100157be:	f7ff ff4d 	bl	1001565c <__aeabi_dcmpge>
100157c2:	2800      	cmp	r0, #0
100157c4:	d104      	bne.n	100157d0 <__aeabi_d2uiz+0x1c>
100157c6:	0020      	movs	r0, r4
100157c8:	0029      	movs	r1, r5
100157ca:	f002 fc4d 	bl	10018068 <__aeabi_d2iz>
100157ce:	bd70      	pop	{r4, r5, r6, pc}
100157d0:	4b06      	ldr	r3, [pc, #24]	; (100157ec <__aeabi_d2uiz+0x38>)
100157d2:	2200      	movs	r2, #0
100157d4:	0020      	movs	r0, r4
100157d6:	0029      	movs	r1, r5
100157d8:	f002 f8f2 	bl	100179c0 <__aeabi_dsub>
100157dc:	f002 fc44 	bl	10018068 <__aeabi_d2iz>
100157e0:	2380      	movs	r3, #128	; 0x80
100157e2:	061b      	lsls	r3, r3, #24
100157e4:	469c      	mov	ip, r3
100157e6:	4460      	add	r0, ip
100157e8:	e7f1      	b.n	100157ce <__aeabi_d2uiz+0x1a>
100157ea:	46c0      	nop			; (mov r8, r8)
100157ec:	41e00000 	.word	0x41e00000

100157f0 <__aeabi_f2lz>:
100157f0:	b510      	push	{r4, lr}
100157f2:	2100      	movs	r1, #0
100157f4:	1c04      	adds	r4, r0, #0
100157f6:	f7ff ff4d 	bl	10015694 <__aeabi_fcmplt>
100157fa:	2800      	cmp	r0, #0
100157fc:	d103      	bne.n	10015806 <__aeabi_f2lz+0x16>
100157fe:	1c20      	adds	r0, r4, #0
10015800:	f000 f80c 	bl	1001581c <__aeabi_f2ulz>
10015804:	bd10      	pop	{r4, pc}
10015806:	2380      	movs	r3, #128	; 0x80
10015808:	061b      	lsls	r3, r3, #24
1001580a:	18e0      	adds	r0, r4, r3
1001580c:	f000 f806 	bl	1001581c <__aeabi_f2ulz>
10015810:	0002      	movs	r2, r0
10015812:	000b      	movs	r3, r1
10015814:	2100      	movs	r1, #0
10015816:	4250      	negs	r0, r2
10015818:	4199      	sbcs	r1, r3
1001581a:	e7f3      	b.n	10015804 <__aeabi_f2lz+0x14>

1001581c <__aeabi_f2ulz>:
1001581c:	b570      	push	{r4, r5, r6, lr}
1001581e:	f002 fcd3 	bl	100181c8 <__aeabi_f2d>
10015822:	2200      	movs	r2, #0
10015824:	4b0b      	ldr	r3, [pc, #44]	; (10015854 <__aeabi_f2ulz+0x38>)
10015826:	000d      	movs	r5, r1
10015828:	0004      	movs	r4, r0
1001582a:	f001 fe4f 	bl	100174cc <__aeabi_dmul>
1001582e:	f7ff ffc1 	bl	100157b4 <__aeabi_d2uiz>
10015832:	0006      	movs	r6, r0
10015834:	f002 fc90 	bl	10018158 <__aeabi_ui2d>
10015838:	2200      	movs	r2, #0
1001583a:	4b07      	ldr	r3, [pc, #28]	; (10015858 <__aeabi_f2ulz+0x3c>)
1001583c:	f001 fe46 	bl	100174cc <__aeabi_dmul>
10015840:	0002      	movs	r2, r0
10015842:	000b      	movs	r3, r1
10015844:	0020      	movs	r0, r4
10015846:	0029      	movs	r1, r5
10015848:	f002 f8ba 	bl	100179c0 <__aeabi_dsub>
1001584c:	f7ff ffb2 	bl	100157b4 <__aeabi_d2uiz>
10015850:	0031      	movs	r1, r6
10015852:	bd70      	pop	{r4, r5, r6, pc}
10015854:	3df00000 	.word	0x3df00000
10015858:	41f00000 	.word	0x41f00000

1001585c <__aeabi_l2f>:
1001585c:	b5d0      	push	{r4, r6, r7, lr}
1001585e:	2601      	movs	r6, #1
10015860:	0002      	movs	r2, r0
10015862:	000b      	movs	r3, r1
10015864:	4f13      	ldr	r7, [pc, #76]	; (100158b4 <__aeabi_l2f+0x58>)
10015866:	4276      	negs	r6, r6
10015868:	18b6      	adds	r6, r6, r2
1001586a:	415f      	adcs	r7, r3
1001586c:	0004      	movs	r4, r0
1001586e:	4812      	ldr	r0, [pc, #72]	; (100158b8 <__aeabi_l2f+0x5c>)
10015870:	4287      	cmp	r7, r0
10015872:	d919      	bls.n	100158a8 <__aeabi_l2f+0x4c>
10015874:	0552      	lsls	r2, r2, #21
10015876:	d004      	beq.n	10015882 <__aeabi_l2f+0x26>
10015878:	2380      	movs	r3, #128	; 0x80
1001587a:	0ae4      	lsrs	r4, r4, #11
1001587c:	02e4      	lsls	r4, r4, #11
1001587e:	011b      	lsls	r3, r3, #4
10015880:	431c      	orrs	r4, r3
10015882:	0008      	movs	r0, r1
10015884:	f002 fc26 	bl	100180d4 <__aeabi_i2d>
10015888:	2200      	movs	r2, #0
1001588a:	4b0c      	ldr	r3, [pc, #48]	; (100158bc <__aeabi_l2f+0x60>)
1001588c:	f001 fe1e 	bl	100174cc <__aeabi_dmul>
10015890:	0006      	movs	r6, r0
10015892:	000f      	movs	r7, r1
10015894:	0020      	movs	r0, r4
10015896:	f002 fc5f 	bl	10018158 <__aeabi_ui2d>
1001589a:	0032      	movs	r2, r6
1001589c:	003b      	movs	r3, r7
1001589e:	f000 fec5 	bl	1001662c <__aeabi_dadd>
100158a2:	f002 fce5 	bl	10018270 <__aeabi_d2f>
100158a6:	bdd0      	pop	{r4, r6, r7, pc}
100158a8:	4287      	cmp	r7, r0
100158aa:	d1ea      	bne.n	10015882 <__aeabi_l2f+0x26>
100158ac:	1cb0      	adds	r0, r6, #2
100158ae:	d8e1      	bhi.n	10015874 <__aeabi_l2f+0x18>
100158b0:	e7e7      	b.n	10015882 <__aeabi_l2f+0x26>
100158b2:	46c0      	nop			; (mov r8, r8)
100158b4:	001fffff 	.word	0x001fffff
100158b8:	003fffff 	.word	0x003fffff
100158bc:	41f00000 	.word	0x41f00000

100158c0 <__gnu_ldivmod_helper>:
100158c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100158c2:	b083      	sub	sp, #12
100158c4:	0016      	movs	r6, r2
100158c6:	001f      	movs	r7, r3
100158c8:	9000      	str	r0, [sp, #0]
100158ca:	9101      	str	r1, [sp, #4]
100158cc:	f002 fd7a 	bl	100183c4 <__divdi3>
100158d0:	0004      	movs	r4, r0
100158d2:	000d      	movs	r5, r1
100158d4:	0002      	movs	r2, r0
100158d6:	000b      	movs	r3, r1
100158d8:	0030      	movs	r0, r6
100158da:	0039      	movs	r1, r7
100158dc:	f7ff ff26 	bl	1001572c <__aeabi_lmul>
100158e0:	9a00      	ldr	r2, [sp, #0]
100158e2:	9b01      	ldr	r3, [sp, #4]
100158e4:	1a12      	subs	r2, r2, r0
100158e6:	418b      	sbcs	r3, r1
100158e8:	9908      	ldr	r1, [sp, #32]
100158ea:	0020      	movs	r0, r4
100158ec:	600a      	str	r2, [r1, #0]
100158ee:	604b      	str	r3, [r1, #4]
100158f0:	0029      	movs	r1, r5
100158f2:	b003      	add	sp, #12
100158f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100158f6:	46c0      	nop			; (mov r8, r8)

100158f8 <__aeabi_fadd>:
100158f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100158fa:	024a      	lsls	r2, r1, #9
100158fc:	0243      	lsls	r3, r0, #9
100158fe:	0044      	lsls	r4, r0, #1
10015900:	004e      	lsls	r6, r1, #1
10015902:	0fc5      	lsrs	r5, r0, #31
10015904:	0e24      	lsrs	r4, r4, #24
10015906:	0028      	movs	r0, r5
10015908:	099b      	lsrs	r3, r3, #6
1001590a:	0e36      	lsrs	r6, r6, #24
1001590c:	0fc9      	lsrs	r1, r1, #31
1001590e:	0992      	lsrs	r2, r2, #6
10015910:	428d      	cmp	r5, r1
10015912:	d059      	beq.n	100159c8 <__aeabi_fadd+0xd0>
10015914:	1ba0      	subs	r0, r4, r6
10015916:	2800      	cmp	r0, #0
10015918:	dc00      	bgt.n	1001591c <__aeabi_fadd+0x24>
1001591a:	e08d      	b.n	10015a38 <__aeabi_fadd+0x140>
1001591c:	2e00      	cmp	r6, #0
1001591e:	d11a      	bne.n	10015956 <__aeabi_fadd+0x5e>
10015920:	2a00      	cmp	r2, #0
10015922:	d000      	beq.n	10015926 <__aeabi_fadd+0x2e>
10015924:	e079      	b.n	10015a1a <__aeabi_fadd+0x122>
10015926:	075a      	lsls	r2, r3, #29
10015928:	d004      	beq.n	10015934 <__aeabi_fadd+0x3c>
1001592a:	220f      	movs	r2, #15
1001592c:	401a      	ands	r2, r3
1001592e:	2a04      	cmp	r2, #4
10015930:	d000      	beq.n	10015934 <__aeabi_fadd+0x3c>
10015932:	3304      	adds	r3, #4
10015934:	015a      	lsls	r2, r3, #5
10015936:	d538      	bpl.n	100159aa <__aeabi_fadd+0xb2>
10015938:	3401      	adds	r4, #1
1001593a:	2cff      	cmp	r4, #255	; 0xff
1001593c:	d100      	bne.n	10015940 <__aeabi_fadd+0x48>
1001593e:	e089      	b.n	10015a54 <__aeabi_fadd+0x15c>
10015940:	0028      	movs	r0, r5
10015942:	019b      	lsls	r3, r3, #6
10015944:	0a5b      	lsrs	r3, r3, #9
10015946:	b2e4      	uxtb	r4, r4
10015948:	025b      	lsls	r3, r3, #9
1001594a:	05e4      	lsls	r4, r4, #23
1001594c:	0a5b      	lsrs	r3, r3, #9
1001594e:	4323      	orrs	r3, r4
10015950:	07c0      	lsls	r0, r0, #31
10015952:	4318      	orrs	r0, r3
10015954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015956:	2cff      	cmp	r4, #255	; 0xff
10015958:	d0e5      	beq.n	10015926 <__aeabi_fadd+0x2e>
1001595a:	2180      	movs	r1, #128	; 0x80
1001595c:	04c9      	lsls	r1, r1, #19
1001595e:	430a      	orrs	r2, r1
10015960:	281b      	cmp	r0, #27
10015962:	dd00      	ble.n	10015966 <__aeabi_fadd+0x6e>
10015964:	e089      	b.n	10015a7a <__aeabi_fadd+0x182>
10015966:	0016      	movs	r6, r2
10015968:	2120      	movs	r1, #32
1001596a:	40c6      	lsrs	r6, r0
1001596c:	1a08      	subs	r0, r1, r0
1001596e:	4082      	lsls	r2, r0
10015970:	1e51      	subs	r1, r2, #1
10015972:	418a      	sbcs	r2, r1
10015974:	4332      	orrs	r2, r6
10015976:	1a9b      	subs	r3, r3, r2
10015978:	015a      	lsls	r2, r3, #5
1001597a:	d514      	bpl.n	100159a6 <__aeabi_fadd+0xae>
1001597c:	019b      	lsls	r3, r3, #6
1001597e:	099e      	lsrs	r6, r3, #6
10015980:	0030      	movs	r0, r6
10015982:	f002 fd01 	bl	10018388 <__clzsi2>
10015986:	3805      	subs	r0, #5
10015988:	4086      	lsls	r6, r0
1001598a:	4284      	cmp	r4, r0
1001598c:	dc65      	bgt.n	10015a5a <__aeabi_fadd+0x162>
1001598e:	1b04      	subs	r4, r0, r4
10015990:	0033      	movs	r3, r6
10015992:	2020      	movs	r0, #32
10015994:	3401      	adds	r4, #1
10015996:	40e3      	lsrs	r3, r4
10015998:	1b04      	subs	r4, r0, r4
1001599a:	40a6      	lsls	r6, r4
1001599c:	1e72      	subs	r2, r6, #1
1001599e:	4196      	sbcs	r6, r2
100159a0:	2400      	movs	r4, #0
100159a2:	4333      	orrs	r3, r6
100159a4:	e7bf      	b.n	10015926 <__aeabi_fadd+0x2e>
100159a6:	075a      	lsls	r2, r3, #29
100159a8:	d1bf      	bne.n	1001592a <__aeabi_fadd+0x32>
100159aa:	08df      	lsrs	r7, r3, #3
100159ac:	0028      	movs	r0, r5
100159ae:	2cff      	cmp	r4, #255	; 0xff
100159b0:	d12f      	bne.n	10015a12 <__aeabi_fadd+0x11a>
100159b2:	2f00      	cmp	r7, #0
100159b4:	d100      	bne.n	100159b8 <__aeabi_fadd+0xc0>
100159b6:	e087      	b.n	10015ac8 <__aeabi_fadd+0x1d0>
100159b8:	2280      	movs	r2, #128	; 0x80
100159ba:	03d2      	lsls	r2, r2, #15
100159bc:	0013      	movs	r3, r2
100159be:	433b      	orrs	r3, r7
100159c0:	025b      	lsls	r3, r3, #9
100159c2:	0a5b      	lsrs	r3, r3, #9
100159c4:	24ff      	movs	r4, #255	; 0xff
100159c6:	e7bf      	b.n	10015948 <__aeabi_fadd+0x50>
100159c8:	1ba1      	subs	r1, r4, r6
100159ca:	2900      	cmp	r1, #0
100159cc:	dd49      	ble.n	10015a62 <__aeabi_fadd+0x16a>
100159ce:	2e00      	cmp	r6, #0
100159d0:	d029      	beq.n	10015a26 <__aeabi_fadd+0x12e>
100159d2:	2cff      	cmp	r4, #255	; 0xff
100159d4:	d0a7      	beq.n	10015926 <__aeabi_fadd+0x2e>
100159d6:	2680      	movs	r6, #128	; 0x80
100159d8:	04f6      	lsls	r6, r6, #19
100159da:	4332      	orrs	r2, r6
100159dc:	291b      	cmp	r1, #27
100159de:	dd00      	ble.n	100159e2 <__aeabi_fadd+0xea>
100159e0:	e08d      	b.n	10015afe <__aeabi_fadd+0x206>
100159e2:	0017      	movs	r7, r2
100159e4:	2620      	movs	r6, #32
100159e6:	40cf      	lsrs	r7, r1
100159e8:	1a71      	subs	r1, r6, r1
100159ea:	408a      	lsls	r2, r1
100159ec:	1e51      	subs	r1, r2, #1
100159ee:	418a      	sbcs	r2, r1
100159f0:	433a      	orrs	r2, r7
100159f2:	189b      	adds	r3, r3, r2
100159f4:	015a      	lsls	r2, r3, #5
100159f6:	d5d6      	bpl.n	100159a6 <__aeabi_fadd+0xae>
100159f8:	3401      	adds	r4, #1
100159fa:	2cff      	cmp	r4, #255	; 0xff
100159fc:	d064      	beq.n	10015ac8 <__aeabi_fadd+0x1d0>
100159fe:	2201      	movs	r2, #1
10015a00:	4976      	ldr	r1, [pc, #472]	; (10015bdc <__aeabi_fadd+0x2e4>)
10015a02:	401a      	ands	r2, r3
10015a04:	085b      	lsrs	r3, r3, #1
10015a06:	400b      	ands	r3, r1
10015a08:	4313      	orrs	r3, r2
10015a0a:	e78c      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a0c:	1e03      	subs	r3, r0, #0
10015a0e:	d1ca      	bne.n	100159a6 <__aeabi_fadd+0xae>
10015a10:	2000      	movs	r0, #0
10015a12:	027b      	lsls	r3, r7, #9
10015a14:	0a5b      	lsrs	r3, r3, #9
10015a16:	b2e4      	uxtb	r4, r4
10015a18:	e796      	b.n	10015948 <__aeabi_fadd+0x50>
10015a1a:	3801      	subs	r0, #1
10015a1c:	2800      	cmp	r0, #0
10015a1e:	d0aa      	beq.n	10015976 <__aeabi_fadd+0x7e>
10015a20:	2cff      	cmp	r4, #255	; 0xff
10015a22:	d19d      	bne.n	10015960 <__aeabi_fadd+0x68>
10015a24:	e77f      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a26:	2a00      	cmp	r2, #0
10015a28:	d100      	bne.n	10015a2c <__aeabi_fadd+0x134>
10015a2a:	e77c      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a2c:	3901      	subs	r1, #1
10015a2e:	2900      	cmp	r1, #0
10015a30:	d0df      	beq.n	100159f2 <__aeabi_fadd+0xfa>
10015a32:	2cff      	cmp	r4, #255	; 0xff
10015a34:	d1d2      	bne.n	100159dc <__aeabi_fadd+0xe4>
10015a36:	e776      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a38:	2800      	cmp	r0, #0
10015a3a:	d120      	bne.n	10015a7e <__aeabi_fadd+0x186>
10015a3c:	1c60      	adds	r0, r4, #1
10015a3e:	b2c0      	uxtb	r0, r0
10015a40:	2801      	cmp	r0, #1
10015a42:	dd53      	ble.n	10015aec <__aeabi_fadd+0x1f4>
10015a44:	2780      	movs	r7, #128	; 0x80
10015a46:	1a9e      	subs	r6, r3, r2
10015a48:	04ff      	lsls	r7, r7, #19
10015a4a:	4037      	ands	r7, r6
10015a4c:	d02f      	beq.n	10015aae <__aeabi_fadd+0x1b6>
10015a4e:	1ad6      	subs	r6, r2, r3
10015a50:	000d      	movs	r5, r1
10015a52:	e795      	b.n	10015980 <__aeabi_fadd+0x88>
10015a54:	0028      	movs	r0, r5
10015a56:	2300      	movs	r3, #0
10015a58:	e776      	b.n	10015948 <__aeabi_fadd+0x50>
10015a5a:	4b61      	ldr	r3, [pc, #388]	; (10015be0 <__aeabi_fadd+0x2e8>)
10015a5c:	1a24      	subs	r4, r4, r0
10015a5e:	4033      	ands	r3, r6
10015a60:	e761      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a62:	2900      	cmp	r1, #0
10015a64:	d14d      	bne.n	10015b02 <__aeabi_fadd+0x20a>
10015a66:	1c61      	adds	r1, r4, #1
10015a68:	b2ce      	uxtb	r6, r1
10015a6a:	2e01      	cmp	r6, #1
10015a6c:	dd2f      	ble.n	10015ace <__aeabi_fadd+0x1d6>
10015a6e:	29ff      	cmp	r1, #255	; 0xff
10015a70:	d02a      	beq.n	10015ac8 <__aeabi_fadd+0x1d0>
10015a72:	189b      	adds	r3, r3, r2
10015a74:	085b      	lsrs	r3, r3, #1
10015a76:	000c      	movs	r4, r1
10015a78:	e755      	b.n	10015926 <__aeabi_fadd+0x2e>
10015a7a:	2201      	movs	r2, #1
10015a7c:	e77b      	b.n	10015976 <__aeabi_fadd+0x7e>
10015a7e:	2c00      	cmp	r4, #0
10015a80:	d11b      	bne.n	10015aba <__aeabi_fadd+0x1c2>
10015a82:	2b00      	cmp	r3, #0
10015a84:	d05b      	beq.n	10015b3e <__aeabi_fadd+0x246>
10015a86:	43c0      	mvns	r0, r0
10015a88:	2800      	cmp	r0, #0
10015a8a:	d00c      	beq.n	10015aa6 <__aeabi_fadd+0x1ae>
10015a8c:	2eff      	cmp	r6, #255	; 0xff
10015a8e:	d07e      	beq.n	10015b8e <__aeabi_fadd+0x296>
10015a90:	281b      	cmp	r0, #27
10015a92:	dd00      	ble.n	10015a96 <__aeabi_fadd+0x19e>
10015a94:	e092      	b.n	10015bbc <__aeabi_fadd+0x2c4>
10015a96:	001d      	movs	r5, r3
10015a98:	2420      	movs	r4, #32
10015a9a:	40c5      	lsrs	r5, r0
10015a9c:	1a20      	subs	r0, r4, r0
10015a9e:	4083      	lsls	r3, r0
10015aa0:	1e58      	subs	r0, r3, #1
10015aa2:	4183      	sbcs	r3, r0
10015aa4:	432b      	orrs	r3, r5
10015aa6:	1ad3      	subs	r3, r2, r3
10015aa8:	0034      	movs	r4, r6
10015aaa:	000d      	movs	r5, r1
10015aac:	e764      	b.n	10015978 <__aeabi_fadd+0x80>
10015aae:	2e00      	cmp	r6, #0
10015ab0:	d000      	beq.n	10015ab4 <__aeabi_fadd+0x1bc>
10015ab2:	e765      	b.n	10015980 <__aeabi_fadd+0x88>
10015ab4:	2000      	movs	r0, #0
10015ab6:	2400      	movs	r4, #0
10015ab8:	e7ab      	b.n	10015a12 <__aeabi_fadd+0x11a>
10015aba:	2eff      	cmp	r6, #255	; 0xff
10015abc:	d067      	beq.n	10015b8e <__aeabi_fadd+0x296>
10015abe:	2480      	movs	r4, #128	; 0x80
10015ac0:	04e4      	lsls	r4, r4, #19
10015ac2:	4240      	negs	r0, r0
10015ac4:	4323      	orrs	r3, r4
10015ac6:	e7e3      	b.n	10015a90 <__aeabi_fadd+0x198>
10015ac8:	24ff      	movs	r4, #255	; 0xff
10015aca:	2300      	movs	r3, #0
10015acc:	e73c      	b.n	10015948 <__aeabi_fadd+0x50>
10015ace:	2c00      	cmp	r4, #0
10015ad0:	d161      	bne.n	10015b96 <__aeabi_fadd+0x29e>
10015ad2:	2b00      	cmp	r3, #0
10015ad4:	d07e      	beq.n	10015bd4 <__aeabi_fadd+0x2dc>
10015ad6:	2a00      	cmp	r2, #0
10015ad8:	d100      	bne.n	10015adc <__aeabi_fadd+0x1e4>
10015ada:	e724      	b.n	10015926 <__aeabi_fadd+0x2e>
10015adc:	189b      	adds	r3, r3, r2
10015ade:	015a      	lsls	r2, r3, #5
10015ae0:	d400      	bmi.n	10015ae4 <__aeabi_fadd+0x1ec>
10015ae2:	e760      	b.n	100159a6 <__aeabi_fadd+0xae>
10015ae4:	4a3e      	ldr	r2, [pc, #248]	; (10015be0 <__aeabi_fadd+0x2e8>)
10015ae6:	000c      	movs	r4, r1
10015ae8:	4013      	ands	r3, r2
10015aea:	e71c      	b.n	10015926 <__aeabi_fadd+0x2e>
10015aec:	2c00      	cmp	r4, #0
10015aee:	d11e      	bne.n	10015b2e <__aeabi_fadd+0x236>
10015af0:	2b00      	cmp	r3, #0
10015af2:	d12f      	bne.n	10015b54 <__aeabi_fadd+0x25c>
10015af4:	2a00      	cmp	r2, #0
10015af6:	d066      	beq.n	10015bc6 <__aeabi_fadd+0x2ce>
10015af8:	0013      	movs	r3, r2
10015afa:	000d      	movs	r5, r1
10015afc:	e713      	b.n	10015926 <__aeabi_fadd+0x2e>
10015afe:	2201      	movs	r2, #1
10015b00:	e777      	b.n	100159f2 <__aeabi_fadd+0xfa>
10015b02:	2c00      	cmp	r4, #0
10015b04:	d11f      	bne.n	10015b46 <__aeabi_fadd+0x24e>
10015b06:	2b00      	cmp	r3, #0
10015b08:	d05a      	beq.n	10015bc0 <__aeabi_fadd+0x2c8>
10015b0a:	43c9      	mvns	r1, r1
10015b0c:	2900      	cmp	r1, #0
10015b0e:	d00b      	beq.n	10015b28 <__aeabi_fadd+0x230>
10015b10:	2eff      	cmp	r6, #255	; 0xff
10015b12:	d050      	beq.n	10015bb6 <__aeabi_fadd+0x2be>
10015b14:	291b      	cmp	r1, #27
10015b16:	dc5f      	bgt.n	10015bd8 <__aeabi_fadd+0x2e0>
10015b18:	001f      	movs	r7, r3
10015b1a:	2420      	movs	r4, #32
10015b1c:	40cf      	lsrs	r7, r1
10015b1e:	1a61      	subs	r1, r4, r1
10015b20:	408b      	lsls	r3, r1
10015b22:	1e59      	subs	r1, r3, #1
10015b24:	418b      	sbcs	r3, r1
10015b26:	433b      	orrs	r3, r7
10015b28:	189b      	adds	r3, r3, r2
10015b2a:	0034      	movs	r4, r6
10015b2c:	e762      	b.n	100159f4 <__aeabi_fadd+0xfc>
10015b2e:	2b00      	cmp	r3, #0
10015b30:	d11c      	bne.n	10015b6c <__aeabi_fadd+0x274>
10015b32:	2a00      	cmp	r2, #0
10015b34:	d04a      	beq.n	10015bcc <__aeabi_fadd+0x2d4>
10015b36:	0013      	movs	r3, r2
10015b38:	000d      	movs	r5, r1
10015b3a:	24ff      	movs	r4, #255	; 0xff
10015b3c:	e6f3      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b3e:	0013      	movs	r3, r2
10015b40:	0034      	movs	r4, r6
10015b42:	000d      	movs	r5, r1
10015b44:	e6ef      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b46:	2eff      	cmp	r6, #255	; 0xff
10015b48:	d035      	beq.n	10015bb6 <__aeabi_fadd+0x2be>
10015b4a:	2480      	movs	r4, #128	; 0x80
10015b4c:	04e4      	lsls	r4, r4, #19
10015b4e:	4249      	negs	r1, r1
10015b50:	4323      	orrs	r3, r4
10015b52:	e7df      	b.n	10015b14 <__aeabi_fadd+0x21c>
10015b54:	2a00      	cmp	r2, #0
10015b56:	d100      	bne.n	10015b5a <__aeabi_fadd+0x262>
10015b58:	e6e5      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b5a:	2780      	movs	r7, #128	; 0x80
10015b5c:	1a98      	subs	r0, r3, r2
10015b5e:	04ff      	lsls	r7, r7, #19
10015b60:	4007      	ands	r7, r0
10015b62:	d100      	bne.n	10015b66 <__aeabi_fadd+0x26e>
10015b64:	e752      	b.n	10015a0c <__aeabi_fadd+0x114>
10015b66:	1ad3      	subs	r3, r2, r3
10015b68:	000d      	movs	r5, r1
10015b6a:	e6dc      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b6c:	24ff      	movs	r4, #255	; 0xff
10015b6e:	2a00      	cmp	r2, #0
10015b70:	d100      	bne.n	10015b74 <__aeabi_fadd+0x27c>
10015b72:	e6d8      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b74:	2080      	movs	r0, #128	; 0x80
10015b76:	08db      	lsrs	r3, r3, #3
10015b78:	03c0      	lsls	r0, r0, #15
10015b7a:	4203      	tst	r3, r0
10015b7c:	d004      	beq.n	10015b88 <__aeabi_fadd+0x290>
10015b7e:	08d2      	lsrs	r2, r2, #3
10015b80:	4202      	tst	r2, r0
10015b82:	d101      	bne.n	10015b88 <__aeabi_fadd+0x290>
10015b84:	0013      	movs	r3, r2
10015b86:	000d      	movs	r5, r1
10015b88:	00db      	lsls	r3, r3, #3
10015b8a:	24ff      	movs	r4, #255	; 0xff
10015b8c:	e6cb      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b8e:	0013      	movs	r3, r2
10015b90:	24ff      	movs	r4, #255	; 0xff
10015b92:	000d      	movs	r5, r1
10015b94:	e6c7      	b.n	10015926 <__aeabi_fadd+0x2e>
10015b96:	2b00      	cmp	r3, #0
10015b98:	d00d      	beq.n	10015bb6 <__aeabi_fadd+0x2be>
10015b9a:	24ff      	movs	r4, #255	; 0xff
10015b9c:	2a00      	cmp	r2, #0
10015b9e:	d100      	bne.n	10015ba2 <__aeabi_fadd+0x2aa>
10015ba0:	e6c1      	b.n	10015926 <__aeabi_fadd+0x2e>
10015ba2:	2180      	movs	r1, #128	; 0x80
10015ba4:	08db      	lsrs	r3, r3, #3
10015ba6:	03c9      	lsls	r1, r1, #15
10015ba8:	420b      	tst	r3, r1
10015baa:	d0ed      	beq.n	10015b88 <__aeabi_fadd+0x290>
10015bac:	08d2      	lsrs	r2, r2, #3
10015bae:	420a      	tst	r2, r1
10015bb0:	d1ea      	bne.n	10015b88 <__aeabi_fadd+0x290>
10015bb2:	0013      	movs	r3, r2
10015bb4:	e7e8      	b.n	10015b88 <__aeabi_fadd+0x290>
10015bb6:	0013      	movs	r3, r2
10015bb8:	24ff      	movs	r4, #255	; 0xff
10015bba:	e6b4      	b.n	10015926 <__aeabi_fadd+0x2e>
10015bbc:	2301      	movs	r3, #1
10015bbe:	e772      	b.n	10015aa6 <__aeabi_fadd+0x1ae>
10015bc0:	0013      	movs	r3, r2
10015bc2:	0034      	movs	r4, r6
10015bc4:	e6af      	b.n	10015926 <__aeabi_fadd+0x2e>
10015bc6:	2700      	movs	r7, #0
10015bc8:	2000      	movs	r0, #0
10015bca:	e722      	b.n	10015a12 <__aeabi_fadd+0x11a>
10015bcc:	2780      	movs	r7, #128	; 0x80
10015bce:	2000      	movs	r0, #0
10015bd0:	03ff      	lsls	r7, r7, #15
10015bd2:	e6f1      	b.n	100159b8 <__aeabi_fadd+0xc0>
10015bd4:	0013      	movs	r3, r2
10015bd6:	e6a6      	b.n	10015926 <__aeabi_fadd+0x2e>
10015bd8:	2301      	movs	r3, #1
10015bda:	e7a5      	b.n	10015b28 <__aeabi_fadd+0x230>
10015bdc:	7dffffff 	.word	0x7dffffff
10015be0:	fbffffff 	.word	0xfbffffff

10015be4 <__aeabi_fdiv>:
10015be4:	b5f0      	push	{r4, r5, r6, r7, lr}
10015be6:	4656      	mov	r6, sl
10015be8:	4644      	mov	r4, r8
10015bea:	465f      	mov	r7, fp
10015bec:	464d      	mov	r5, r9
10015bee:	b4f0      	push	{r4, r5, r6, r7}
10015bf0:	0244      	lsls	r4, r0, #9
10015bf2:	0046      	lsls	r6, r0, #1
10015bf4:	0fc7      	lsrs	r7, r0, #31
10015bf6:	b083      	sub	sp, #12
10015bf8:	4688      	mov	r8, r1
10015bfa:	0a65      	lsrs	r5, r4, #9
10015bfc:	0e36      	lsrs	r6, r6, #24
10015bfe:	46ba      	mov	sl, r7
10015c00:	d03d      	beq.n	10015c7e <__aeabi_fdiv+0x9a>
10015c02:	2eff      	cmp	r6, #255	; 0xff
10015c04:	d022      	beq.n	10015c4c <__aeabi_fdiv+0x68>
10015c06:	2300      	movs	r3, #0
10015c08:	00ec      	lsls	r4, r5, #3
10015c0a:	2580      	movs	r5, #128	; 0x80
10015c0c:	4699      	mov	r9, r3
10015c0e:	469b      	mov	fp, r3
10015c10:	04ed      	lsls	r5, r5, #19
10015c12:	4325      	orrs	r5, r4
10015c14:	3e7f      	subs	r6, #127	; 0x7f
10015c16:	4643      	mov	r3, r8
10015c18:	025c      	lsls	r4, r3, #9
10015c1a:	0058      	lsls	r0, r3, #1
10015c1c:	0fdb      	lsrs	r3, r3, #31
10015c1e:	0a64      	lsrs	r4, r4, #9
10015c20:	0e00      	lsrs	r0, r0, #24
10015c22:	4698      	mov	r8, r3
10015c24:	d036      	beq.n	10015c94 <__aeabi_fdiv+0xb0>
10015c26:	28ff      	cmp	r0, #255	; 0xff
10015c28:	d030      	beq.n	10015c8c <__aeabi_fdiv+0xa8>
10015c2a:	2380      	movs	r3, #128	; 0x80
10015c2c:	2100      	movs	r1, #0
10015c2e:	00e4      	lsls	r4, r4, #3
10015c30:	04db      	lsls	r3, r3, #19
10015c32:	431c      	orrs	r4, r3
10015c34:	387f      	subs	r0, #127	; 0x7f
10015c36:	1a30      	subs	r0, r6, r0
10015c38:	9001      	str	r0, [sp, #4]
10015c3a:	4648      	mov	r0, r9
10015c3c:	4642      	mov	r2, r8
10015c3e:	4308      	orrs	r0, r1
10015c40:	4e72      	ldr	r6, [pc, #456]	; (10015e0c <__aeabi_fdiv+0x228>)
10015c42:	0080      	lsls	r0, r0, #2
10015c44:	5830      	ldr	r0, [r6, r0]
10015c46:	407a      	eors	r2, r7
10015c48:	0013      	movs	r3, r2
10015c4a:	4687      	mov	pc, r0
10015c4c:	2d00      	cmp	r5, #0
10015c4e:	d144      	bne.n	10015cda <__aeabi_fdiv+0xf6>
10015c50:	2308      	movs	r3, #8
10015c52:	4699      	mov	r9, r3
10015c54:	3b06      	subs	r3, #6
10015c56:	469b      	mov	fp, r3
10015c58:	e7dd      	b.n	10015c16 <__aeabi_fdiv+0x32>
10015c5a:	2201      	movs	r2, #1
10015c5c:	20ff      	movs	r0, #255	; 0xff
10015c5e:	2400      	movs	r4, #0
10015c60:	401a      	ands	r2, r3
10015c62:	0264      	lsls	r4, r4, #9
10015c64:	05c3      	lsls	r3, r0, #23
10015c66:	0a64      	lsrs	r4, r4, #9
10015c68:	07d2      	lsls	r2, r2, #31
10015c6a:	431c      	orrs	r4, r3
10015c6c:	4314      	orrs	r4, r2
10015c6e:	0020      	movs	r0, r4
10015c70:	b003      	add	sp, #12
10015c72:	bc3c      	pop	{r2, r3, r4, r5}
10015c74:	4690      	mov	r8, r2
10015c76:	4699      	mov	r9, r3
10015c78:	46a2      	mov	sl, r4
10015c7a:	46ab      	mov	fp, r5
10015c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015c7e:	2d00      	cmp	r5, #0
10015c80:	d120      	bne.n	10015cc4 <__aeabi_fdiv+0xe0>
10015c82:	2304      	movs	r3, #4
10015c84:	4699      	mov	r9, r3
10015c86:	3b03      	subs	r3, #3
10015c88:	469b      	mov	fp, r3
10015c8a:	e7c4      	b.n	10015c16 <__aeabi_fdiv+0x32>
10015c8c:	2c00      	cmp	r4, #0
10015c8e:	d117      	bne.n	10015cc0 <__aeabi_fdiv+0xdc>
10015c90:	2102      	movs	r1, #2
10015c92:	e002      	b.n	10015c9a <__aeabi_fdiv+0xb6>
10015c94:	2c00      	cmp	r4, #0
10015c96:	d10a      	bne.n	10015cae <__aeabi_fdiv+0xca>
10015c98:	2101      	movs	r1, #1
10015c9a:	1a32      	subs	r2, r6, r0
10015c9c:	9201      	str	r2, [sp, #4]
10015c9e:	464a      	mov	r2, r9
10015ca0:	4643      	mov	r3, r8
10015ca2:	430a      	orrs	r2, r1
10015ca4:	485a      	ldr	r0, [pc, #360]	; (10015e10 <__aeabi_fdiv+0x22c>)
10015ca6:	0092      	lsls	r2, r2, #2
10015ca8:	5882      	ldr	r2, [r0, r2]
10015caa:	407b      	eors	r3, r7
10015cac:	4697      	mov	pc, r2
10015cae:	0020      	movs	r0, r4
10015cb0:	f002 fb6a 	bl	10018388 <__clzsi2>
10015cb4:	1f43      	subs	r3, r0, #5
10015cb6:	3076      	adds	r0, #118	; 0x76
10015cb8:	409c      	lsls	r4, r3
10015cba:	4240      	negs	r0, r0
10015cbc:	2100      	movs	r1, #0
10015cbe:	e7ba      	b.n	10015c36 <__aeabi_fdiv+0x52>
10015cc0:	2103      	movs	r1, #3
10015cc2:	e7b8      	b.n	10015c36 <__aeabi_fdiv+0x52>
10015cc4:	0028      	movs	r0, r5
10015cc6:	f002 fb5f 	bl	10018388 <__clzsi2>
10015cca:	1f43      	subs	r3, r0, #5
10015ccc:	409d      	lsls	r5, r3
10015cce:	2300      	movs	r3, #0
10015cd0:	3076      	adds	r0, #118	; 0x76
10015cd2:	4246      	negs	r6, r0
10015cd4:	4699      	mov	r9, r3
10015cd6:	469b      	mov	fp, r3
10015cd8:	e79d      	b.n	10015c16 <__aeabi_fdiv+0x32>
10015cda:	230c      	movs	r3, #12
10015cdc:	4699      	mov	r9, r3
10015cde:	3b09      	subs	r3, #9
10015ce0:	469b      	mov	fp, r3
10015ce2:	e798      	b.n	10015c16 <__aeabi_fdiv+0x32>
10015ce4:	2480      	movs	r4, #128	; 0x80
10015ce6:	2200      	movs	r2, #0
10015ce8:	03e4      	lsls	r4, r4, #15
10015cea:	20ff      	movs	r0, #255	; 0xff
10015cec:	e7b9      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015cee:	2400      	movs	r4, #0
10015cf0:	46c2      	mov	sl, r8
10015cf2:	468b      	mov	fp, r1
10015cf4:	465a      	mov	r2, fp
10015cf6:	4653      	mov	r3, sl
10015cf8:	2a02      	cmp	r2, #2
10015cfa:	d0ae      	beq.n	10015c5a <__aeabi_fdiv+0x76>
10015cfc:	2a03      	cmp	r2, #3
10015cfe:	d07d      	beq.n	10015dfc <__aeabi_fdiv+0x218>
10015d00:	2a01      	cmp	r2, #1
10015d02:	d131      	bne.n	10015d68 <__aeabi_fdiv+0x184>
10015d04:	2201      	movs	r2, #1
10015d06:	2000      	movs	r0, #0
10015d08:	401a      	ands	r2, r3
10015d0a:	2400      	movs	r4, #0
10015d0c:	e7a9      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015d0e:	2201      	movs	r2, #1
10015d10:	1a10      	subs	r0, r2, r0
10015d12:	281b      	cmp	r0, #27
10015d14:	dd56      	ble.n	10015dc4 <__aeabi_fdiv+0x1e0>
10015d16:	401a      	ands	r2, r3
10015d18:	2000      	movs	r0, #0
10015d1a:	2400      	movs	r4, #0
10015d1c:	e7a1      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015d1e:	2380      	movs	r3, #128	; 0x80
10015d20:	03db      	lsls	r3, r3, #15
10015d22:	421d      	tst	r5, r3
10015d24:	d14b      	bne.n	10015dbe <__aeabi_fdiv+0x1da>
10015d26:	2380      	movs	r3, #128	; 0x80
10015d28:	03db      	lsls	r3, r3, #15
10015d2a:	432b      	orrs	r3, r5
10015d2c:	025c      	lsls	r4, r3, #9
10015d2e:	0a64      	lsrs	r4, r4, #9
10015d30:	003a      	movs	r2, r7
10015d32:	20ff      	movs	r0, #255	; 0xff
10015d34:	e795      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015d36:	016d      	lsls	r5, r5, #5
10015d38:	0160      	lsls	r0, r4, #5
10015d3a:	4285      	cmp	r5, r0
10015d3c:	d230      	bcs.n	10015da0 <__aeabi_fdiv+0x1bc>
10015d3e:	9a01      	ldr	r2, [sp, #4]
10015d40:	2400      	movs	r4, #0
10015d42:	3a01      	subs	r2, #1
10015d44:	9201      	str	r2, [sp, #4]
10015d46:	221b      	movs	r2, #27
10015d48:	2701      	movs	r7, #1
10015d4a:	0029      	movs	r1, r5
10015d4c:	0064      	lsls	r4, r4, #1
10015d4e:	006d      	lsls	r5, r5, #1
10015d50:	2900      	cmp	r1, #0
10015d52:	db01      	blt.n	10015d58 <__aeabi_fdiv+0x174>
10015d54:	42a8      	cmp	r0, r5
10015d56:	d801      	bhi.n	10015d5c <__aeabi_fdiv+0x178>
10015d58:	1a2d      	subs	r5, r5, r0
10015d5a:	433c      	orrs	r4, r7
10015d5c:	3a01      	subs	r2, #1
10015d5e:	2a00      	cmp	r2, #0
10015d60:	d1f3      	bne.n	10015d4a <__aeabi_fdiv+0x166>
10015d62:	1e6a      	subs	r2, r5, #1
10015d64:	4195      	sbcs	r5, r2
10015d66:	432c      	orrs	r4, r5
10015d68:	9801      	ldr	r0, [sp, #4]
10015d6a:	307f      	adds	r0, #127	; 0x7f
10015d6c:	2800      	cmp	r0, #0
10015d6e:	ddce      	ble.n	10015d0e <__aeabi_fdiv+0x12a>
10015d70:	0762      	lsls	r2, r4, #29
10015d72:	d004      	beq.n	10015d7e <__aeabi_fdiv+0x19a>
10015d74:	220f      	movs	r2, #15
10015d76:	4022      	ands	r2, r4
10015d78:	2a04      	cmp	r2, #4
10015d7a:	d000      	beq.n	10015d7e <__aeabi_fdiv+0x19a>
10015d7c:	3404      	adds	r4, #4
10015d7e:	0122      	lsls	r2, r4, #4
10015d80:	d503      	bpl.n	10015d8a <__aeabi_fdiv+0x1a6>
10015d82:	4a24      	ldr	r2, [pc, #144]	; (10015e14 <__aeabi_fdiv+0x230>)
10015d84:	9801      	ldr	r0, [sp, #4]
10015d86:	4014      	ands	r4, r2
10015d88:	3080      	adds	r0, #128	; 0x80
10015d8a:	28fe      	cmp	r0, #254	; 0xfe
10015d8c:	dd00      	ble.n	10015d90 <__aeabi_fdiv+0x1ac>
10015d8e:	e764      	b.n	10015c5a <__aeabi_fdiv+0x76>
10015d90:	2201      	movs	r2, #1
10015d92:	01a4      	lsls	r4, r4, #6
10015d94:	0a64      	lsrs	r4, r4, #9
10015d96:	b2c0      	uxtb	r0, r0
10015d98:	401a      	ands	r2, r3
10015d9a:	e762      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015d9c:	002c      	movs	r4, r5
10015d9e:	e7a9      	b.n	10015cf4 <__aeabi_fdiv+0x110>
10015da0:	1a2d      	subs	r5, r5, r0
10015da2:	221a      	movs	r2, #26
10015da4:	2401      	movs	r4, #1
10015da6:	e7cf      	b.n	10015d48 <__aeabi_fdiv+0x164>
10015da8:	026b      	lsls	r3, r5, #9
10015daa:	d5bc      	bpl.n	10015d26 <__aeabi_fdiv+0x142>
10015dac:	2400      	movs	r4, #0
10015dae:	2380      	movs	r3, #128	; 0x80
10015db0:	03db      	lsls	r3, r3, #15
10015db2:	431c      	orrs	r4, r3
10015db4:	0264      	lsls	r4, r4, #9
10015db6:	0a64      	lsrs	r4, r4, #9
10015db8:	4642      	mov	r2, r8
10015dba:	20ff      	movs	r0, #255	; 0xff
10015dbc:	e751      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015dbe:	421c      	tst	r4, r3
10015dc0:	d1b3      	bne.n	10015d2a <__aeabi_fdiv+0x146>
10015dc2:	e7f4      	b.n	10015dae <__aeabi_fdiv+0x1ca>
10015dc4:	0021      	movs	r1, r4
10015dc6:	2220      	movs	r2, #32
10015dc8:	40c1      	lsrs	r1, r0
10015dca:	1a10      	subs	r0, r2, r0
10015dcc:	4084      	lsls	r4, r0
10015dce:	1e62      	subs	r2, r4, #1
10015dd0:	4194      	sbcs	r4, r2
10015dd2:	430c      	orrs	r4, r1
10015dd4:	0762      	lsls	r2, r4, #29
10015dd6:	d004      	beq.n	10015de2 <__aeabi_fdiv+0x1fe>
10015dd8:	220f      	movs	r2, #15
10015dda:	4022      	ands	r2, r4
10015ddc:	2a04      	cmp	r2, #4
10015dde:	d000      	beq.n	10015de2 <__aeabi_fdiv+0x1fe>
10015de0:	3404      	adds	r4, #4
10015de2:	0162      	lsls	r2, r4, #5
10015de4:	d504      	bpl.n	10015df0 <__aeabi_fdiv+0x20c>
10015de6:	2201      	movs	r2, #1
10015de8:	2001      	movs	r0, #1
10015dea:	401a      	ands	r2, r3
10015dec:	2400      	movs	r4, #0
10015dee:	e738      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015df0:	2201      	movs	r2, #1
10015df2:	01a4      	lsls	r4, r4, #6
10015df4:	0a64      	lsrs	r4, r4, #9
10015df6:	401a      	ands	r2, r3
10015df8:	2000      	movs	r0, #0
10015dfa:	e732      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015dfc:	2380      	movs	r3, #128	; 0x80
10015dfe:	03db      	lsls	r3, r3, #15
10015e00:	431c      	orrs	r4, r3
10015e02:	0264      	lsls	r4, r4, #9
10015e04:	0a64      	lsrs	r4, r4, #9
10015e06:	4652      	mov	r2, sl
10015e08:	20ff      	movs	r0, #255	; 0xff
10015e0a:	e72a      	b.n	10015c62 <__aeabi_fdiv+0x7e>
10015e0c:	1001b71c 	.word	0x1001b71c
10015e10:	1001b75c 	.word	0x1001b75c
10015e14:	f7ffffff 	.word	0xf7ffffff

10015e18 <__eqsf2>:
10015e18:	0243      	lsls	r3, r0, #9
10015e1a:	b570      	push	{r4, r5, r6, lr}
10015e1c:	0042      	lsls	r2, r0, #1
10015e1e:	004c      	lsls	r4, r1, #1
10015e20:	0a5d      	lsrs	r5, r3, #9
10015e22:	0fc3      	lsrs	r3, r0, #31
10015e24:	0248      	lsls	r0, r1, #9
10015e26:	0e12      	lsrs	r2, r2, #24
10015e28:	0a46      	lsrs	r6, r0, #9
10015e2a:	0e24      	lsrs	r4, r4, #24
10015e2c:	0fc9      	lsrs	r1, r1, #31
10015e2e:	2aff      	cmp	r2, #255	; 0xff
10015e30:	d00f      	beq.n	10015e52 <__eqsf2+0x3a>
10015e32:	2cff      	cmp	r4, #255	; 0xff
10015e34:	d011      	beq.n	10015e5a <__eqsf2+0x42>
10015e36:	2001      	movs	r0, #1
10015e38:	42a2      	cmp	r2, r4
10015e3a:	d000      	beq.n	10015e3e <__eqsf2+0x26>
10015e3c:	bd70      	pop	{r4, r5, r6, pc}
10015e3e:	42b5      	cmp	r5, r6
10015e40:	d1fc      	bne.n	10015e3c <__eqsf2+0x24>
10015e42:	428b      	cmp	r3, r1
10015e44:	d00d      	beq.n	10015e62 <__eqsf2+0x4a>
10015e46:	2a00      	cmp	r2, #0
10015e48:	d1f8      	bne.n	10015e3c <__eqsf2+0x24>
10015e4a:	0028      	movs	r0, r5
10015e4c:	1e43      	subs	r3, r0, #1
10015e4e:	4198      	sbcs	r0, r3
10015e50:	e7f4      	b.n	10015e3c <__eqsf2+0x24>
10015e52:	2001      	movs	r0, #1
10015e54:	2d00      	cmp	r5, #0
10015e56:	d1f1      	bne.n	10015e3c <__eqsf2+0x24>
10015e58:	e7eb      	b.n	10015e32 <__eqsf2+0x1a>
10015e5a:	2001      	movs	r0, #1
10015e5c:	2e00      	cmp	r6, #0
10015e5e:	d1ed      	bne.n	10015e3c <__eqsf2+0x24>
10015e60:	e7e9      	b.n	10015e36 <__eqsf2+0x1e>
10015e62:	2000      	movs	r0, #0
10015e64:	e7ea      	b.n	10015e3c <__eqsf2+0x24>
10015e66:	46c0      	nop			; (mov r8, r8)

10015e68 <__gesf2>:
10015e68:	0243      	lsls	r3, r0, #9
10015e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
10015e6c:	0042      	lsls	r2, r0, #1
10015e6e:	0a5d      	lsrs	r5, r3, #9
10015e70:	0fc3      	lsrs	r3, r0, #31
10015e72:	0248      	lsls	r0, r1, #9
10015e74:	0a44      	lsrs	r4, r0, #9
10015e76:	0048      	lsls	r0, r1, #1
10015e78:	0e12      	lsrs	r2, r2, #24
10015e7a:	0e00      	lsrs	r0, r0, #24
10015e7c:	0fc9      	lsrs	r1, r1, #31
10015e7e:	2aff      	cmp	r2, #255	; 0xff
10015e80:	d01f      	beq.n	10015ec2 <__gesf2+0x5a>
10015e82:	28ff      	cmp	r0, #255	; 0xff
10015e84:	d022      	beq.n	10015ecc <__gesf2+0x64>
10015e86:	2a00      	cmp	r2, #0
10015e88:	d109      	bne.n	10015e9e <__gesf2+0x36>
10015e8a:	426e      	negs	r6, r5
10015e8c:	416e      	adcs	r6, r5
10015e8e:	2800      	cmp	r0, #0
10015e90:	d10f      	bne.n	10015eb2 <__gesf2+0x4a>
10015e92:	2c00      	cmp	r4, #0
10015e94:	d10d      	bne.n	10015eb2 <__gesf2+0x4a>
10015e96:	2000      	movs	r0, #0
10015e98:	2d00      	cmp	r5, #0
10015e9a:	d009      	beq.n	10015eb0 <__gesf2+0x48>
10015e9c:	e005      	b.n	10015eaa <__gesf2+0x42>
10015e9e:	2800      	cmp	r0, #0
10015ea0:	d101      	bne.n	10015ea6 <__gesf2+0x3e>
10015ea2:	2c00      	cmp	r4, #0
10015ea4:	d001      	beq.n	10015eaa <__gesf2+0x42>
10015ea6:	428b      	cmp	r3, r1
10015ea8:	d013      	beq.n	10015ed2 <__gesf2+0x6a>
10015eaa:	4258      	negs	r0, r3
10015eac:	2301      	movs	r3, #1
10015eae:	4318      	orrs	r0, r3
10015eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015eb2:	2e00      	cmp	r6, #0
10015eb4:	d0f7      	beq.n	10015ea6 <__gesf2+0x3e>
10015eb6:	4248      	negs	r0, r1
10015eb8:	4141      	adcs	r1, r0
10015eba:	2001      	movs	r0, #1
10015ebc:	4249      	negs	r1, r1
10015ebe:	4308      	orrs	r0, r1
10015ec0:	e7f6      	b.n	10015eb0 <__gesf2+0x48>
10015ec2:	2d00      	cmp	r5, #0
10015ec4:	d0dd      	beq.n	10015e82 <__gesf2+0x1a>
10015ec6:	2002      	movs	r0, #2
10015ec8:	4240      	negs	r0, r0
10015eca:	e7f1      	b.n	10015eb0 <__gesf2+0x48>
10015ecc:	2c00      	cmp	r4, #0
10015ece:	d0da      	beq.n	10015e86 <__gesf2+0x1e>
10015ed0:	e7f9      	b.n	10015ec6 <__gesf2+0x5e>
10015ed2:	4282      	cmp	r2, r0
10015ed4:	dce9      	bgt.n	10015eaa <__gesf2+0x42>
10015ed6:	db04      	blt.n	10015ee2 <__gesf2+0x7a>
10015ed8:	42a5      	cmp	r5, r4
10015eda:	d8e6      	bhi.n	10015eaa <__gesf2+0x42>
10015edc:	2000      	movs	r0, #0
10015ede:	42a5      	cmp	r5, r4
10015ee0:	d2e6      	bcs.n	10015eb0 <__gesf2+0x48>
10015ee2:	4258      	negs	r0, r3
10015ee4:	4143      	adcs	r3, r0
10015ee6:	2001      	movs	r0, #1
10015ee8:	425b      	negs	r3, r3
10015eea:	4318      	orrs	r0, r3
10015eec:	e7e0      	b.n	10015eb0 <__gesf2+0x48>
10015eee:	46c0      	nop			; (mov r8, r8)

10015ef0 <__lesf2>:
10015ef0:	0243      	lsls	r3, r0, #9
10015ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
10015ef4:	0042      	lsls	r2, r0, #1
10015ef6:	004c      	lsls	r4, r1, #1
10015ef8:	0a5e      	lsrs	r6, r3, #9
10015efa:	0fc3      	lsrs	r3, r0, #31
10015efc:	0248      	lsls	r0, r1, #9
10015efe:	0e12      	lsrs	r2, r2, #24
10015f00:	0a45      	lsrs	r5, r0, #9
10015f02:	0e24      	lsrs	r4, r4, #24
10015f04:	0fc9      	lsrs	r1, r1, #31
10015f06:	2aff      	cmp	r2, #255	; 0xff
10015f08:	d017      	beq.n	10015f3a <__lesf2+0x4a>
10015f0a:	2cff      	cmp	r4, #255	; 0xff
10015f0c:	d019      	beq.n	10015f42 <__lesf2+0x52>
10015f0e:	2a00      	cmp	r2, #0
10015f10:	d10b      	bne.n	10015f2a <__lesf2+0x3a>
10015f12:	4270      	negs	r0, r6
10015f14:	4170      	adcs	r0, r6
10015f16:	2c00      	cmp	r4, #0
10015f18:	d017      	beq.n	10015f4a <__lesf2+0x5a>
10015f1a:	2800      	cmp	r0, #0
10015f1c:	d007      	beq.n	10015f2e <__lesf2+0x3e>
10015f1e:	4248      	negs	r0, r1
10015f20:	4141      	adcs	r1, r0
10015f22:	2001      	movs	r0, #1
10015f24:	4249      	negs	r1, r1
10015f26:	4308      	orrs	r0, r1
10015f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015f2a:	2c00      	cmp	r4, #0
10015f2c:	d013      	beq.n	10015f56 <__lesf2+0x66>
10015f2e:	428b      	cmp	r3, r1
10015f30:	d014      	beq.n	10015f5c <__lesf2+0x6c>
10015f32:	4258      	negs	r0, r3
10015f34:	2301      	movs	r3, #1
10015f36:	4318      	orrs	r0, r3
10015f38:	e7f6      	b.n	10015f28 <__lesf2+0x38>
10015f3a:	2002      	movs	r0, #2
10015f3c:	2e00      	cmp	r6, #0
10015f3e:	d1f3      	bne.n	10015f28 <__lesf2+0x38>
10015f40:	e7e3      	b.n	10015f0a <__lesf2+0x1a>
10015f42:	2002      	movs	r0, #2
10015f44:	2d00      	cmp	r5, #0
10015f46:	d1ef      	bne.n	10015f28 <__lesf2+0x38>
10015f48:	e7e1      	b.n	10015f0e <__lesf2+0x1e>
10015f4a:	2d00      	cmp	r5, #0
10015f4c:	d1e5      	bne.n	10015f1a <__lesf2+0x2a>
10015f4e:	2000      	movs	r0, #0
10015f50:	2e00      	cmp	r6, #0
10015f52:	d0e9      	beq.n	10015f28 <__lesf2+0x38>
10015f54:	e7ed      	b.n	10015f32 <__lesf2+0x42>
10015f56:	2d00      	cmp	r5, #0
10015f58:	d1e9      	bne.n	10015f2e <__lesf2+0x3e>
10015f5a:	e7ea      	b.n	10015f32 <__lesf2+0x42>
10015f5c:	42a2      	cmp	r2, r4
10015f5e:	dce8      	bgt.n	10015f32 <__lesf2+0x42>
10015f60:	db04      	blt.n	10015f6c <__lesf2+0x7c>
10015f62:	42ae      	cmp	r6, r5
10015f64:	d8e5      	bhi.n	10015f32 <__lesf2+0x42>
10015f66:	2000      	movs	r0, #0
10015f68:	42ae      	cmp	r6, r5
10015f6a:	d2dd      	bcs.n	10015f28 <__lesf2+0x38>
10015f6c:	4258      	negs	r0, r3
10015f6e:	4143      	adcs	r3, r0
10015f70:	2001      	movs	r0, #1
10015f72:	425b      	negs	r3, r3
10015f74:	4318      	orrs	r0, r3
10015f76:	e7d7      	b.n	10015f28 <__lesf2+0x38>

10015f78 <__aeabi_fmul>:
10015f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10015f7a:	4657      	mov	r7, sl
10015f7c:	464e      	mov	r6, r9
10015f7e:	4645      	mov	r5, r8
10015f80:	0043      	lsls	r3, r0, #1
10015f82:	b4e0      	push	{r5, r6, r7}
10015f84:	0246      	lsls	r6, r0, #9
10015f86:	4688      	mov	r8, r1
10015f88:	0a76      	lsrs	r6, r6, #9
10015f8a:	0e1f      	lsrs	r7, r3, #24
10015f8c:	0fc4      	lsrs	r4, r0, #31
10015f8e:	2f00      	cmp	r7, #0
10015f90:	d047      	beq.n	10016022 <__aeabi_fmul+0xaa>
10015f92:	2fff      	cmp	r7, #255	; 0xff
10015f94:	d025      	beq.n	10015fe2 <__aeabi_fmul+0x6a>
10015f96:	2300      	movs	r3, #0
10015f98:	2580      	movs	r5, #128	; 0x80
10015f9a:	469a      	mov	sl, r3
10015f9c:	4699      	mov	r9, r3
10015f9e:	00f6      	lsls	r6, r6, #3
10015fa0:	04ed      	lsls	r5, r5, #19
10015fa2:	432e      	orrs	r6, r5
10015fa4:	3f7f      	subs	r7, #127	; 0x7f
10015fa6:	4643      	mov	r3, r8
10015fa8:	4642      	mov	r2, r8
10015faa:	025d      	lsls	r5, r3, #9
10015fac:	0fd2      	lsrs	r2, r2, #31
10015fae:	005b      	lsls	r3, r3, #1
10015fb0:	0a6d      	lsrs	r5, r5, #9
10015fb2:	0e1b      	lsrs	r3, r3, #24
10015fb4:	4690      	mov	r8, r2
10015fb6:	d040      	beq.n	1001603a <__aeabi_fmul+0xc2>
10015fb8:	2bff      	cmp	r3, #255	; 0xff
10015fba:	d039      	beq.n	10016030 <__aeabi_fmul+0xb8>
10015fbc:	2280      	movs	r2, #128	; 0x80
10015fbe:	2000      	movs	r0, #0
10015fc0:	00ed      	lsls	r5, r5, #3
10015fc2:	04d2      	lsls	r2, r2, #19
10015fc4:	4315      	orrs	r5, r2
10015fc6:	3b7f      	subs	r3, #127	; 0x7f
10015fc8:	18fb      	adds	r3, r7, r3
10015fca:	4642      	mov	r2, r8
10015fcc:	4657      	mov	r7, sl
10015fce:	1c59      	adds	r1, r3, #1
10015fd0:	4062      	eors	r2, r4
10015fd2:	468c      	mov	ip, r1
10015fd4:	4307      	orrs	r7, r0
10015fd6:	2f0f      	cmp	r7, #15
10015fd8:	d85c      	bhi.n	10016094 <__aeabi_fmul+0x11c>
10015fda:	496f      	ldr	r1, [pc, #444]	; (10016198 <__aeabi_fmul+0x220>)
10015fdc:	00bf      	lsls	r7, r7, #2
10015fde:	59c9      	ldr	r1, [r1, r7]
10015fe0:	468f      	mov	pc, r1
10015fe2:	2e00      	cmp	r6, #0
10015fe4:	d145      	bne.n	10016072 <__aeabi_fmul+0xfa>
10015fe6:	2308      	movs	r3, #8
10015fe8:	469a      	mov	sl, r3
10015fea:	3b06      	subs	r3, #6
10015fec:	4699      	mov	r9, r3
10015fee:	e7da      	b.n	10015fa6 <__aeabi_fmul+0x2e>
10015ff0:	4642      	mov	r2, r8
10015ff2:	2802      	cmp	r0, #2
10015ff4:	d02d      	beq.n	10016052 <__aeabi_fmul+0xda>
10015ff6:	2803      	cmp	r0, #3
10015ff8:	d100      	bne.n	10015ffc <__aeabi_fmul+0x84>
10015ffa:	e0c3      	b.n	10016184 <__aeabi_fmul+0x20c>
10015ffc:	2801      	cmp	r0, #1
10015ffe:	d000      	beq.n	10016002 <__aeabi_fmul+0x8a>
10016000:	e0a2      	b.n	10016148 <__aeabi_fmul+0x1d0>
10016002:	2500      	movs	r5, #0
10016004:	2600      	movs	r6, #0
10016006:	4002      	ands	r2, r0
10016008:	b2d4      	uxtb	r4, r2
1001600a:	0276      	lsls	r6, r6, #9
1001600c:	05ed      	lsls	r5, r5, #23
1001600e:	0a76      	lsrs	r6, r6, #9
10016010:	432e      	orrs	r6, r5
10016012:	07e4      	lsls	r4, r4, #31
10016014:	4326      	orrs	r6, r4
10016016:	0030      	movs	r0, r6
10016018:	bc1c      	pop	{r2, r3, r4}
1001601a:	4690      	mov	r8, r2
1001601c:	4699      	mov	r9, r3
1001601e:	46a2      	mov	sl, r4
10016020:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016022:	2e00      	cmp	r6, #0
10016024:	d11a      	bne.n	1001605c <__aeabi_fmul+0xe4>
10016026:	2304      	movs	r3, #4
10016028:	469a      	mov	sl, r3
1001602a:	3b03      	subs	r3, #3
1001602c:	4699      	mov	r9, r3
1001602e:	e7ba      	b.n	10015fa6 <__aeabi_fmul+0x2e>
10016030:	002a      	movs	r2, r5
10016032:	1e51      	subs	r1, r2, #1
10016034:	418a      	sbcs	r2, r1
10016036:	1c90      	adds	r0, r2, #2
10016038:	e7c6      	b.n	10015fc8 <__aeabi_fmul+0x50>
1001603a:	2001      	movs	r0, #1
1001603c:	2d00      	cmp	r5, #0
1001603e:	d0c3      	beq.n	10015fc8 <__aeabi_fmul+0x50>
10016040:	0028      	movs	r0, r5
10016042:	f002 f9a1 	bl	10018388 <__clzsi2>
10016046:	1f43      	subs	r3, r0, #5
10016048:	3076      	adds	r0, #118	; 0x76
1001604a:	409d      	lsls	r5, r3
1001604c:	4243      	negs	r3, r0
1001604e:	2000      	movs	r0, #0
10016050:	e7ba      	b.n	10015fc8 <__aeabi_fmul+0x50>
10016052:	2401      	movs	r4, #1
10016054:	25ff      	movs	r5, #255	; 0xff
10016056:	4014      	ands	r4, r2
10016058:	2600      	movs	r6, #0
1001605a:	e7d6      	b.n	1001600a <__aeabi_fmul+0x92>
1001605c:	0030      	movs	r0, r6
1001605e:	f002 f993 	bl	10018388 <__clzsi2>
10016062:	1f43      	subs	r3, r0, #5
10016064:	409e      	lsls	r6, r3
10016066:	2300      	movs	r3, #0
10016068:	3076      	adds	r0, #118	; 0x76
1001606a:	4247      	negs	r7, r0
1001606c:	469a      	mov	sl, r3
1001606e:	4699      	mov	r9, r3
10016070:	e799      	b.n	10015fa6 <__aeabi_fmul+0x2e>
10016072:	230c      	movs	r3, #12
10016074:	469a      	mov	sl, r3
10016076:	3b09      	subs	r3, #9
10016078:	4699      	mov	r9, r3
1001607a:	e794      	b.n	10015fa6 <__aeabi_fmul+0x2e>
1001607c:	2680      	movs	r6, #128	; 0x80
1001607e:	2400      	movs	r4, #0
10016080:	03f6      	lsls	r6, r6, #15
10016082:	25ff      	movs	r5, #255	; 0xff
10016084:	e7c1      	b.n	1001600a <__aeabi_fmul+0x92>
10016086:	0035      	movs	r5, r6
10016088:	4648      	mov	r0, r9
1001608a:	e7b2      	b.n	10015ff2 <__aeabi_fmul+0x7a>
1001608c:	0035      	movs	r5, r6
1001608e:	0022      	movs	r2, r4
10016090:	4648      	mov	r0, r9
10016092:	e7ae      	b.n	10015ff2 <__aeabi_fmul+0x7a>
10016094:	0429      	lsls	r1, r5, #16
10016096:	0c09      	lsrs	r1, r1, #16
10016098:	0008      	movs	r0, r1
1001609a:	0c37      	lsrs	r7, r6, #16
1001609c:	0436      	lsls	r6, r6, #16
1001609e:	0c36      	lsrs	r6, r6, #16
100160a0:	0c2c      	lsrs	r4, r5, #16
100160a2:	4379      	muls	r1, r7
100160a4:	4370      	muls	r0, r6
100160a6:	4367      	muls	r7, r4
100160a8:	4374      	muls	r4, r6
100160aa:	0c06      	lsrs	r6, r0, #16
100160ac:	1864      	adds	r4, r4, r1
100160ae:	1936      	adds	r6, r6, r4
100160b0:	42b1      	cmp	r1, r6
100160b2:	d903      	bls.n	100160bc <__aeabi_fmul+0x144>
100160b4:	2180      	movs	r1, #128	; 0x80
100160b6:	0249      	lsls	r1, r1, #9
100160b8:	4688      	mov	r8, r1
100160ba:	4447      	add	r7, r8
100160bc:	0400      	lsls	r0, r0, #16
100160be:	0c00      	lsrs	r0, r0, #16
100160c0:	0431      	lsls	r1, r6, #16
100160c2:	1809      	adds	r1, r1, r0
100160c4:	018d      	lsls	r5, r1, #6
100160c6:	1e68      	subs	r0, r5, #1
100160c8:	4185      	sbcs	r5, r0
100160ca:	0e89      	lsrs	r1, r1, #26
100160cc:	4329      	orrs	r1, r5
100160ce:	0c35      	lsrs	r5, r6, #16
100160d0:	19ed      	adds	r5, r5, r7
100160d2:	01ad      	lsls	r5, r5, #6
100160d4:	430d      	orrs	r5, r1
100160d6:	0129      	lsls	r1, r5, #4
100160d8:	d504      	bpl.n	100160e4 <__aeabi_fmul+0x16c>
100160da:	2301      	movs	r3, #1
100160dc:	0869      	lsrs	r1, r5, #1
100160de:	401d      	ands	r5, r3
100160e0:	4663      	mov	r3, ip
100160e2:	430d      	orrs	r5, r1
100160e4:	0019      	movs	r1, r3
100160e6:	317f      	adds	r1, #127	; 0x7f
100160e8:	2900      	cmp	r1, #0
100160ea:	dd25      	ble.n	10016138 <__aeabi_fmul+0x1c0>
100160ec:	0768      	lsls	r0, r5, #29
100160ee:	d004      	beq.n	100160fa <__aeabi_fmul+0x182>
100160f0:	200f      	movs	r0, #15
100160f2:	4028      	ands	r0, r5
100160f4:	2804      	cmp	r0, #4
100160f6:	d000      	beq.n	100160fa <__aeabi_fmul+0x182>
100160f8:	3504      	adds	r5, #4
100160fa:	0128      	lsls	r0, r5, #4
100160fc:	d503      	bpl.n	10016106 <__aeabi_fmul+0x18e>
100160fe:	4927      	ldr	r1, [pc, #156]	; (1001619c <__aeabi_fmul+0x224>)
10016100:	3380      	adds	r3, #128	; 0x80
10016102:	400d      	ands	r5, r1
10016104:	0019      	movs	r1, r3
10016106:	29fe      	cmp	r1, #254	; 0xfe
10016108:	dca3      	bgt.n	10016052 <__aeabi_fmul+0xda>
1001610a:	2401      	movs	r4, #1
1001610c:	01ad      	lsls	r5, r5, #6
1001610e:	0a6e      	lsrs	r6, r5, #9
10016110:	4014      	ands	r4, r2
10016112:	b2cd      	uxtb	r5, r1
10016114:	e779      	b.n	1001600a <__aeabi_fmul+0x92>
10016116:	2080      	movs	r0, #128	; 0x80
10016118:	03c0      	lsls	r0, r0, #15
1001611a:	4206      	tst	r6, r0
1001611c:	d007      	beq.n	1001612e <__aeabi_fmul+0x1b6>
1001611e:	4205      	tst	r5, r0
10016120:	d105      	bne.n	1001612e <__aeabi_fmul+0x1b6>
10016122:	4328      	orrs	r0, r5
10016124:	0246      	lsls	r6, r0, #9
10016126:	0a76      	lsrs	r6, r6, #9
10016128:	4644      	mov	r4, r8
1001612a:	25ff      	movs	r5, #255	; 0xff
1001612c:	e76d      	b.n	1001600a <__aeabi_fmul+0x92>
1001612e:	4306      	orrs	r6, r0
10016130:	0276      	lsls	r6, r6, #9
10016132:	0a76      	lsrs	r6, r6, #9
10016134:	25ff      	movs	r5, #255	; 0xff
10016136:	e768      	b.n	1001600a <__aeabi_fmul+0x92>
10016138:	2401      	movs	r4, #1
1001613a:	1a61      	subs	r1, r4, r1
1001613c:	291b      	cmp	r1, #27
1001613e:	dd05      	ble.n	1001614c <__aeabi_fmul+0x1d4>
10016140:	4014      	ands	r4, r2
10016142:	2500      	movs	r5, #0
10016144:	2600      	movs	r6, #0
10016146:	e760      	b.n	1001600a <__aeabi_fmul+0x92>
10016148:	4663      	mov	r3, ip
1001614a:	e7cb      	b.n	100160e4 <__aeabi_fmul+0x16c>
1001614c:	002e      	movs	r6, r5
1001614e:	2320      	movs	r3, #32
10016150:	40ce      	lsrs	r6, r1
10016152:	1a59      	subs	r1, r3, r1
10016154:	408d      	lsls	r5, r1
10016156:	1e6b      	subs	r3, r5, #1
10016158:	419d      	sbcs	r5, r3
1001615a:	432e      	orrs	r6, r5
1001615c:	0773      	lsls	r3, r6, #29
1001615e:	d004      	beq.n	1001616a <__aeabi_fmul+0x1f2>
10016160:	230f      	movs	r3, #15
10016162:	4033      	ands	r3, r6
10016164:	2b04      	cmp	r3, #4
10016166:	d000      	beq.n	1001616a <__aeabi_fmul+0x1f2>
10016168:	3604      	adds	r6, #4
1001616a:	0173      	lsls	r3, r6, #5
1001616c:	d504      	bpl.n	10016178 <__aeabi_fmul+0x200>
1001616e:	2401      	movs	r4, #1
10016170:	2501      	movs	r5, #1
10016172:	4014      	ands	r4, r2
10016174:	2600      	movs	r6, #0
10016176:	e748      	b.n	1001600a <__aeabi_fmul+0x92>
10016178:	2401      	movs	r4, #1
1001617a:	01b6      	lsls	r6, r6, #6
1001617c:	0a76      	lsrs	r6, r6, #9
1001617e:	4014      	ands	r4, r2
10016180:	2500      	movs	r5, #0
10016182:	e742      	b.n	1001600a <__aeabi_fmul+0x92>
10016184:	2680      	movs	r6, #128	; 0x80
10016186:	2401      	movs	r4, #1
10016188:	03f6      	lsls	r6, r6, #15
1001618a:	432e      	orrs	r6, r5
1001618c:	0276      	lsls	r6, r6, #9
1001618e:	0a76      	lsrs	r6, r6, #9
10016190:	4014      	ands	r4, r2
10016192:	25ff      	movs	r5, #255	; 0xff
10016194:	e739      	b.n	1001600a <__aeabi_fmul+0x92>
10016196:	46c0      	nop			; (mov r8, r8)
10016198:	1001b79c 	.word	0x1001b79c
1001619c:	f7ffffff 	.word	0xf7ffffff

100161a0 <__aeabi_fsub>:
100161a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100161a2:	024a      	lsls	r2, r1, #9
100161a4:	004e      	lsls	r6, r1, #1
100161a6:	0243      	lsls	r3, r0, #9
100161a8:	0044      	lsls	r4, r0, #1
100161aa:	0e24      	lsrs	r4, r4, #24
100161ac:	0fc5      	lsrs	r5, r0, #31
100161ae:	099b      	lsrs	r3, r3, #6
100161b0:	0e36      	lsrs	r6, r6, #24
100161b2:	0fc9      	lsrs	r1, r1, #31
100161b4:	0992      	lsrs	r2, r2, #6
100161b6:	2eff      	cmp	r6, #255	; 0xff
100161b8:	d100      	bne.n	100161bc <__aeabi_fsub+0x1c>
100161ba:	e083      	b.n	100162c4 <__aeabi_fsub+0x124>
100161bc:	2001      	movs	r0, #1
100161be:	4041      	eors	r1, r0
100161c0:	1ba0      	subs	r0, r4, r6
100161c2:	42a9      	cmp	r1, r5
100161c4:	d05c      	beq.n	10016280 <__aeabi_fsub+0xe0>
100161c6:	2800      	cmp	r0, #0
100161c8:	dc00      	bgt.n	100161cc <__aeabi_fsub+0x2c>
100161ca:	e095      	b.n	100162f8 <__aeabi_fsub+0x158>
100161cc:	2e00      	cmp	r6, #0
100161ce:	d11c      	bne.n	1001620a <__aeabi_fsub+0x6a>
100161d0:	2a00      	cmp	r2, #0
100161d2:	d000      	beq.n	100161d6 <__aeabi_fsub+0x36>
100161d4:	e081      	b.n	100162da <__aeabi_fsub+0x13a>
100161d6:	075a      	lsls	r2, r3, #29
100161d8:	d004      	beq.n	100161e4 <__aeabi_fsub+0x44>
100161da:	220f      	movs	r2, #15
100161dc:	401a      	ands	r2, r3
100161de:	2a04      	cmp	r2, #4
100161e0:	d000      	beq.n	100161e4 <__aeabi_fsub+0x44>
100161e2:	3304      	adds	r3, #4
100161e4:	015a      	lsls	r2, r3, #5
100161e6:	d53b      	bpl.n	10016260 <__aeabi_fsub+0xc0>
100161e8:	3401      	adds	r4, #1
100161ea:	2cff      	cmp	r4, #255	; 0xff
100161ec:	d100      	bne.n	100161f0 <__aeabi_fsub+0x50>
100161ee:	e091      	b.n	10016314 <__aeabi_fsub+0x174>
100161f0:	2001      	movs	r0, #1
100161f2:	019b      	lsls	r3, r3, #6
100161f4:	0a5b      	lsrs	r3, r3, #9
100161f6:	b2e4      	uxtb	r4, r4
100161f8:	4005      	ands	r5, r0
100161fa:	025b      	lsls	r3, r3, #9
100161fc:	05e4      	lsls	r4, r4, #23
100161fe:	0a5b      	lsrs	r3, r3, #9
10016200:	07ed      	lsls	r5, r5, #31
10016202:	4323      	orrs	r3, r4
10016204:	432b      	orrs	r3, r5
10016206:	0018      	movs	r0, r3
10016208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001620a:	2cff      	cmp	r4, #255	; 0xff
1001620c:	d0e3      	beq.n	100161d6 <__aeabi_fsub+0x36>
1001620e:	2180      	movs	r1, #128	; 0x80
10016210:	04c9      	lsls	r1, r1, #19
10016212:	430a      	orrs	r2, r1
10016214:	281b      	cmp	r0, #27
10016216:	dd00      	ble.n	1001621a <__aeabi_fsub+0x7a>
10016218:	e090      	b.n	1001633c <__aeabi_fsub+0x19c>
1001621a:	0016      	movs	r6, r2
1001621c:	2120      	movs	r1, #32
1001621e:	40c6      	lsrs	r6, r0
10016220:	1a08      	subs	r0, r1, r0
10016222:	4082      	lsls	r2, r0
10016224:	1e51      	subs	r1, r2, #1
10016226:	418a      	sbcs	r2, r1
10016228:	4332      	orrs	r2, r6
1001622a:	1a9b      	subs	r3, r3, r2
1001622c:	015a      	lsls	r2, r3, #5
1001622e:	d515      	bpl.n	1001625c <__aeabi_fsub+0xbc>
10016230:	019b      	lsls	r3, r3, #6
10016232:	099e      	lsrs	r6, r3, #6
10016234:	0030      	movs	r0, r6
10016236:	f002 f8a7 	bl	10018388 <__clzsi2>
1001623a:	3805      	subs	r0, #5
1001623c:	4086      	lsls	r6, r0
1001623e:	4284      	cmp	r4, r0
10016240:	dc6c      	bgt.n	1001631c <__aeabi_fsub+0x17c>
10016242:	1b04      	subs	r4, r0, r4
10016244:	0033      	movs	r3, r6
10016246:	2020      	movs	r0, #32
10016248:	3401      	adds	r4, #1
1001624a:	40e3      	lsrs	r3, r4
1001624c:	1b04      	subs	r4, r0, r4
1001624e:	40a6      	lsls	r6, r4
10016250:	1e72      	subs	r2, r6, #1
10016252:	4196      	sbcs	r6, r2
10016254:	2400      	movs	r4, #0
10016256:	4333      	orrs	r3, r6
10016258:	e7bd      	b.n	100161d6 <__aeabi_fsub+0x36>
1001625a:	000d      	movs	r5, r1
1001625c:	075a      	lsls	r2, r3, #29
1001625e:	d1bc      	bne.n	100161da <__aeabi_fsub+0x3a>
10016260:	08df      	lsrs	r7, r3, #3
10016262:	2301      	movs	r3, #1
10016264:	401d      	ands	r5, r3
10016266:	2cff      	cmp	r4, #255	; 0xff
10016268:	d133      	bne.n	100162d2 <__aeabi_fsub+0x132>
1001626a:	2f00      	cmp	r7, #0
1001626c:	d100      	bne.n	10016270 <__aeabi_fsub+0xd0>
1001626e:	e090      	b.n	10016392 <__aeabi_fsub+0x1f2>
10016270:	2280      	movs	r2, #128	; 0x80
10016272:	03d2      	lsls	r2, r2, #15
10016274:	0013      	movs	r3, r2
10016276:	433b      	orrs	r3, r7
10016278:	025b      	lsls	r3, r3, #9
1001627a:	0a5b      	lsrs	r3, r3, #9
1001627c:	24ff      	movs	r4, #255	; 0xff
1001627e:	e7bc      	b.n	100161fa <__aeabi_fsub+0x5a>
10016280:	2800      	cmp	r0, #0
10016282:	dd4f      	ble.n	10016324 <__aeabi_fsub+0x184>
10016284:	2e00      	cmp	r6, #0
10016286:	d02e      	beq.n	100162e6 <__aeabi_fsub+0x146>
10016288:	2cff      	cmp	r4, #255	; 0xff
1001628a:	d0a4      	beq.n	100161d6 <__aeabi_fsub+0x36>
1001628c:	2580      	movs	r5, #128	; 0x80
1001628e:	04ed      	lsls	r5, r5, #19
10016290:	432a      	orrs	r2, r5
10016292:	281b      	cmp	r0, #27
10016294:	dd00      	ble.n	10016298 <__aeabi_fsub+0xf8>
10016296:	e097      	b.n	100163c8 <__aeabi_fsub+0x228>
10016298:	0016      	movs	r6, r2
1001629a:	2520      	movs	r5, #32
1001629c:	40c6      	lsrs	r6, r0
1001629e:	1a28      	subs	r0, r5, r0
100162a0:	4082      	lsls	r2, r0
100162a2:	1e50      	subs	r0, r2, #1
100162a4:	4182      	sbcs	r2, r0
100162a6:	4332      	orrs	r2, r6
100162a8:	189b      	adds	r3, r3, r2
100162aa:	015a      	lsls	r2, r3, #5
100162ac:	d5d5      	bpl.n	1001625a <__aeabi_fsub+0xba>
100162ae:	3401      	adds	r4, #1
100162b0:	2cff      	cmp	r4, #255	; 0xff
100162b2:	d06d      	beq.n	10016390 <__aeabi_fsub+0x1f0>
100162b4:	2201      	movs	r2, #1
100162b6:	487b      	ldr	r0, [pc, #492]	; (100164a4 <__aeabi_fsub+0x304>)
100162b8:	401a      	ands	r2, r3
100162ba:	085b      	lsrs	r3, r3, #1
100162bc:	4003      	ands	r3, r0
100162be:	4313      	orrs	r3, r2
100162c0:	000d      	movs	r5, r1
100162c2:	e788      	b.n	100161d6 <__aeabi_fsub+0x36>
100162c4:	2a00      	cmp	r2, #0
100162c6:	d000      	beq.n	100162ca <__aeabi_fsub+0x12a>
100162c8:	e77a      	b.n	100161c0 <__aeabi_fsub+0x20>
100162ca:	e777      	b.n	100161bc <__aeabi_fsub+0x1c>
100162cc:	1e03      	subs	r3, r0, #0
100162ce:	d1c5      	bne.n	1001625c <__aeabi_fsub+0xbc>
100162d0:	2500      	movs	r5, #0
100162d2:	027b      	lsls	r3, r7, #9
100162d4:	0a5b      	lsrs	r3, r3, #9
100162d6:	b2e4      	uxtb	r4, r4
100162d8:	e78f      	b.n	100161fa <__aeabi_fsub+0x5a>
100162da:	3801      	subs	r0, #1
100162dc:	2800      	cmp	r0, #0
100162de:	d0a4      	beq.n	1001622a <__aeabi_fsub+0x8a>
100162e0:	2cff      	cmp	r4, #255	; 0xff
100162e2:	d197      	bne.n	10016214 <__aeabi_fsub+0x74>
100162e4:	e777      	b.n	100161d6 <__aeabi_fsub+0x36>
100162e6:	2a00      	cmp	r2, #0
100162e8:	d100      	bne.n	100162ec <__aeabi_fsub+0x14c>
100162ea:	e774      	b.n	100161d6 <__aeabi_fsub+0x36>
100162ec:	3801      	subs	r0, #1
100162ee:	2800      	cmp	r0, #0
100162f0:	d0da      	beq.n	100162a8 <__aeabi_fsub+0x108>
100162f2:	2cff      	cmp	r4, #255	; 0xff
100162f4:	d1cd      	bne.n	10016292 <__aeabi_fsub+0xf2>
100162f6:	e76e      	b.n	100161d6 <__aeabi_fsub+0x36>
100162f8:	2800      	cmp	r0, #0
100162fa:	d121      	bne.n	10016340 <__aeabi_fsub+0x1a0>
100162fc:	1c60      	adds	r0, r4, #1
100162fe:	b2c0      	uxtb	r0, r0
10016300:	2801      	cmp	r0, #1
10016302:	dd58      	ble.n	100163b6 <__aeabi_fsub+0x216>
10016304:	2780      	movs	r7, #128	; 0x80
10016306:	1a9e      	subs	r6, r3, r2
10016308:	04ff      	lsls	r7, r7, #19
1001630a:	4037      	ands	r7, r6
1001630c:	d02f      	beq.n	1001636e <__aeabi_fsub+0x1ce>
1001630e:	1ad6      	subs	r6, r2, r3
10016310:	000d      	movs	r5, r1
10016312:	e78f      	b.n	10016234 <__aeabi_fsub+0x94>
10016314:	2301      	movs	r3, #1
10016316:	401d      	ands	r5, r3
10016318:	2300      	movs	r3, #0
1001631a:	e76e      	b.n	100161fa <__aeabi_fsub+0x5a>
1001631c:	4b62      	ldr	r3, [pc, #392]	; (100164a8 <__aeabi_fsub+0x308>)
1001631e:	1a24      	subs	r4, r4, r0
10016320:	4033      	ands	r3, r6
10016322:	e758      	b.n	100161d6 <__aeabi_fsub+0x36>
10016324:	2800      	cmp	r0, #0
10016326:	d151      	bne.n	100163cc <__aeabi_fsub+0x22c>
10016328:	1c60      	adds	r0, r4, #1
1001632a:	b2c6      	uxtb	r6, r0
1001632c:	2e01      	cmp	r6, #1
1001632e:	dd33      	ble.n	10016398 <__aeabi_fsub+0x1f8>
10016330:	28ff      	cmp	r0, #255	; 0xff
10016332:	d02d      	beq.n	10016390 <__aeabi_fsub+0x1f0>
10016334:	189b      	adds	r3, r3, r2
10016336:	085b      	lsrs	r3, r3, #1
10016338:	0004      	movs	r4, r0
1001633a:	e74c      	b.n	100161d6 <__aeabi_fsub+0x36>
1001633c:	2201      	movs	r2, #1
1001633e:	e774      	b.n	1001622a <__aeabi_fsub+0x8a>
10016340:	2c00      	cmp	r4, #0
10016342:	d01a      	beq.n	1001637a <__aeabi_fsub+0x1da>
10016344:	2eff      	cmp	r6, #255	; 0xff
10016346:	d01f      	beq.n	10016388 <__aeabi_fsub+0x1e8>
10016348:	2480      	movs	r4, #128	; 0x80
1001634a:	04e4      	lsls	r4, r4, #19
1001634c:	4240      	negs	r0, r0
1001634e:	4323      	orrs	r3, r4
10016350:	281b      	cmp	r0, #27
10016352:	dd00      	ble.n	10016356 <__aeabi_fsub+0x1b6>
10016354:	e096      	b.n	10016484 <__aeabi_fsub+0x2e4>
10016356:	001d      	movs	r5, r3
10016358:	2420      	movs	r4, #32
1001635a:	40c5      	lsrs	r5, r0
1001635c:	1a20      	subs	r0, r4, r0
1001635e:	4083      	lsls	r3, r0
10016360:	1e58      	subs	r0, r3, #1
10016362:	4183      	sbcs	r3, r0
10016364:	432b      	orrs	r3, r5
10016366:	1ad3      	subs	r3, r2, r3
10016368:	0034      	movs	r4, r6
1001636a:	000d      	movs	r5, r1
1001636c:	e75e      	b.n	1001622c <__aeabi_fsub+0x8c>
1001636e:	2e00      	cmp	r6, #0
10016370:	d000      	beq.n	10016374 <__aeabi_fsub+0x1d4>
10016372:	e75f      	b.n	10016234 <__aeabi_fsub+0x94>
10016374:	2500      	movs	r5, #0
10016376:	2400      	movs	r4, #0
10016378:	e7ab      	b.n	100162d2 <__aeabi_fsub+0x132>
1001637a:	2b00      	cmp	r3, #0
1001637c:	d044      	beq.n	10016408 <__aeabi_fsub+0x268>
1001637e:	43c0      	mvns	r0, r0
10016380:	2800      	cmp	r0, #0
10016382:	d0f0      	beq.n	10016366 <__aeabi_fsub+0x1c6>
10016384:	2eff      	cmp	r6, #255	; 0xff
10016386:	d1e3      	bne.n	10016350 <__aeabi_fsub+0x1b0>
10016388:	0013      	movs	r3, r2
1001638a:	24ff      	movs	r4, #255	; 0xff
1001638c:	000d      	movs	r5, r1
1001638e:	e722      	b.n	100161d6 <__aeabi_fsub+0x36>
10016390:	000d      	movs	r5, r1
10016392:	24ff      	movs	r4, #255	; 0xff
10016394:	2300      	movs	r3, #0
10016396:	e730      	b.n	100161fa <__aeabi_fsub+0x5a>
10016398:	2c00      	cmp	r4, #0
1001639a:	d15d      	bne.n	10016458 <__aeabi_fsub+0x2b8>
1001639c:	2b00      	cmp	r3, #0
1001639e:	d07d      	beq.n	1001649c <__aeabi_fsub+0x2fc>
100163a0:	2a00      	cmp	r2, #0
100163a2:	d100      	bne.n	100163a6 <__aeabi_fsub+0x206>
100163a4:	e717      	b.n	100161d6 <__aeabi_fsub+0x36>
100163a6:	189b      	adds	r3, r3, r2
100163a8:	015a      	lsls	r2, r3, #5
100163aa:	d400      	bmi.n	100163ae <__aeabi_fsub+0x20e>
100163ac:	e756      	b.n	1001625c <__aeabi_fsub+0xbc>
100163ae:	4a3e      	ldr	r2, [pc, #248]	; (100164a8 <__aeabi_fsub+0x308>)
100163b0:	0004      	movs	r4, r0
100163b2:	4013      	ands	r3, r2
100163b4:	e70f      	b.n	100161d6 <__aeabi_fsub+0x36>
100163b6:	2c00      	cmp	r4, #0
100163b8:	d11e      	bne.n	100163f8 <__aeabi_fsub+0x258>
100163ba:	2b00      	cmp	r3, #0
100163bc:	d12f      	bne.n	1001641e <__aeabi_fsub+0x27e>
100163be:	2a00      	cmp	r2, #0
100163c0:	d065      	beq.n	1001648e <__aeabi_fsub+0x2ee>
100163c2:	0013      	movs	r3, r2
100163c4:	000d      	movs	r5, r1
100163c6:	e706      	b.n	100161d6 <__aeabi_fsub+0x36>
100163c8:	2201      	movs	r2, #1
100163ca:	e76d      	b.n	100162a8 <__aeabi_fsub+0x108>
100163cc:	2c00      	cmp	r4, #0
100163ce:	d11f      	bne.n	10016410 <__aeabi_fsub+0x270>
100163d0:	2b00      	cmp	r3, #0
100163d2:	d059      	beq.n	10016488 <__aeabi_fsub+0x2e8>
100163d4:	43c0      	mvns	r0, r0
100163d6:	2800      	cmp	r0, #0
100163d8:	d00b      	beq.n	100163f2 <__aeabi_fsub+0x252>
100163da:	2eff      	cmp	r6, #255	; 0xff
100163dc:	d04f      	beq.n	1001647e <__aeabi_fsub+0x2de>
100163de:	281b      	cmp	r0, #27
100163e0:	dc5e      	bgt.n	100164a0 <__aeabi_fsub+0x300>
100163e2:	001d      	movs	r5, r3
100163e4:	2420      	movs	r4, #32
100163e6:	40c5      	lsrs	r5, r0
100163e8:	1a20      	subs	r0, r4, r0
100163ea:	4083      	lsls	r3, r0
100163ec:	1e58      	subs	r0, r3, #1
100163ee:	4183      	sbcs	r3, r0
100163f0:	432b      	orrs	r3, r5
100163f2:	189b      	adds	r3, r3, r2
100163f4:	0034      	movs	r4, r6
100163f6:	e758      	b.n	100162aa <__aeabi_fsub+0x10a>
100163f8:	2b00      	cmp	r3, #0
100163fa:	d11c      	bne.n	10016436 <__aeabi_fsub+0x296>
100163fc:	2a00      	cmp	r2, #0
100163fe:	d049      	beq.n	10016494 <__aeabi_fsub+0x2f4>
10016400:	0013      	movs	r3, r2
10016402:	000d      	movs	r5, r1
10016404:	24ff      	movs	r4, #255	; 0xff
10016406:	e6e6      	b.n	100161d6 <__aeabi_fsub+0x36>
10016408:	0013      	movs	r3, r2
1001640a:	0034      	movs	r4, r6
1001640c:	000d      	movs	r5, r1
1001640e:	e6e2      	b.n	100161d6 <__aeabi_fsub+0x36>
10016410:	2eff      	cmp	r6, #255	; 0xff
10016412:	d034      	beq.n	1001647e <__aeabi_fsub+0x2de>
10016414:	2480      	movs	r4, #128	; 0x80
10016416:	04e4      	lsls	r4, r4, #19
10016418:	4240      	negs	r0, r0
1001641a:	4323      	orrs	r3, r4
1001641c:	e7df      	b.n	100163de <__aeabi_fsub+0x23e>
1001641e:	2a00      	cmp	r2, #0
10016420:	d100      	bne.n	10016424 <__aeabi_fsub+0x284>
10016422:	e6d8      	b.n	100161d6 <__aeabi_fsub+0x36>
10016424:	2780      	movs	r7, #128	; 0x80
10016426:	1a98      	subs	r0, r3, r2
10016428:	04ff      	lsls	r7, r7, #19
1001642a:	4007      	ands	r7, r0
1001642c:	d100      	bne.n	10016430 <__aeabi_fsub+0x290>
1001642e:	e74d      	b.n	100162cc <__aeabi_fsub+0x12c>
10016430:	1ad3      	subs	r3, r2, r3
10016432:	000d      	movs	r5, r1
10016434:	e6cf      	b.n	100161d6 <__aeabi_fsub+0x36>
10016436:	24ff      	movs	r4, #255	; 0xff
10016438:	2a00      	cmp	r2, #0
1001643a:	d100      	bne.n	1001643e <__aeabi_fsub+0x29e>
1001643c:	e6cb      	b.n	100161d6 <__aeabi_fsub+0x36>
1001643e:	2080      	movs	r0, #128	; 0x80
10016440:	08db      	lsrs	r3, r3, #3
10016442:	03c0      	lsls	r0, r0, #15
10016444:	4203      	tst	r3, r0
10016446:	d004      	beq.n	10016452 <__aeabi_fsub+0x2b2>
10016448:	08d2      	lsrs	r2, r2, #3
1001644a:	4202      	tst	r2, r0
1001644c:	d101      	bne.n	10016452 <__aeabi_fsub+0x2b2>
1001644e:	0013      	movs	r3, r2
10016450:	000d      	movs	r5, r1
10016452:	00db      	lsls	r3, r3, #3
10016454:	24ff      	movs	r4, #255	; 0xff
10016456:	e6be      	b.n	100161d6 <__aeabi_fsub+0x36>
10016458:	2b00      	cmp	r3, #0
1001645a:	d010      	beq.n	1001647e <__aeabi_fsub+0x2de>
1001645c:	24ff      	movs	r4, #255	; 0xff
1001645e:	2a00      	cmp	r2, #0
10016460:	d100      	bne.n	10016464 <__aeabi_fsub+0x2c4>
10016462:	e6b8      	b.n	100161d6 <__aeabi_fsub+0x36>
10016464:	2080      	movs	r0, #128	; 0x80
10016466:	08db      	lsrs	r3, r3, #3
10016468:	03c0      	lsls	r0, r0, #15
1001646a:	4203      	tst	r3, r0
1001646c:	d003      	beq.n	10016476 <__aeabi_fsub+0x2d6>
1001646e:	08d2      	lsrs	r2, r2, #3
10016470:	4202      	tst	r2, r0
10016472:	d100      	bne.n	10016476 <__aeabi_fsub+0x2d6>
10016474:	0013      	movs	r3, r2
10016476:	00db      	lsls	r3, r3, #3
10016478:	000d      	movs	r5, r1
1001647a:	24ff      	movs	r4, #255	; 0xff
1001647c:	e6ab      	b.n	100161d6 <__aeabi_fsub+0x36>
1001647e:	0013      	movs	r3, r2
10016480:	24ff      	movs	r4, #255	; 0xff
10016482:	e6a8      	b.n	100161d6 <__aeabi_fsub+0x36>
10016484:	2301      	movs	r3, #1
10016486:	e76e      	b.n	10016366 <__aeabi_fsub+0x1c6>
10016488:	0013      	movs	r3, r2
1001648a:	0034      	movs	r4, r6
1001648c:	e6a3      	b.n	100161d6 <__aeabi_fsub+0x36>
1001648e:	2700      	movs	r7, #0
10016490:	2500      	movs	r5, #0
10016492:	e71e      	b.n	100162d2 <__aeabi_fsub+0x132>
10016494:	2780      	movs	r7, #128	; 0x80
10016496:	2500      	movs	r5, #0
10016498:	03ff      	lsls	r7, r7, #15
1001649a:	e6e9      	b.n	10016270 <__aeabi_fsub+0xd0>
1001649c:	0013      	movs	r3, r2
1001649e:	e69a      	b.n	100161d6 <__aeabi_fsub+0x36>
100164a0:	2301      	movs	r3, #1
100164a2:	e7a6      	b.n	100163f2 <__aeabi_fsub+0x252>
100164a4:	7dffffff 	.word	0x7dffffff
100164a8:	fbffffff 	.word	0xfbffffff

100164ac <__aeabi_fcmpun>:
100164ac:	0243      	lsls	r3, r0, #9
100164ae:	0a5a      	lsrs	r2, r3, #9
100164b0:	0040      	lsls	r0, r0, #1
100164b2:	024b      	lsls	r3, r1, #9
100164b4:	0049      	lsls	r1, r1, #1
100164b6:	0e00      	lsrs	r0, r0, #24
100164b8:	0a5b      	lsrs	r3, r3, #9
100164ba:	0e09      	lsrs	r1, r1, #24
100164bc:	28ff      	cmp	r0, #255	; 0xff
100164be:	d003      	beq.n	100164c8 <__aeabi_fcmpun+0x1c>
100164c0:	2000      	movs	r0, #0
100164c2:	29ff      	cmp	r1, #255	; 0xff
100164c4:	d006      	beq.n	100164d4 <__aeabi_fcmpun+0x28>
100164c6:	4770      	bx	lr
100164c8:	38fe      	subs	r0, #254	; 0xfe
100164ca:	2a00      	cmp	r2, #0
100164cc:	d1fb      	bne.n	100164c6 <__aeabi_fcmpun+0x1a>
100164ce:	2000      	movs	r0, #0
100164d0:	29ff      	cmp	r1, #255	; 0xff
100164d2:	d1f8      	bne.n	100164c6 <__aeabi_fcmpun+0x1a>
100164d4:	0018      	movs	r0, r3
100164d6:	1e43      	subs	r3, r0, #1
100164d8:	4198      	sbcs	r0, r3
100164da:	e7f4      	b.n	100164c6 <__aeabi_fcmpun+0x1a>

100164dc <__aeabi_f2iz>:
100164dc:	0243      	lsls	r3, r0, #9
100164de:	0a59      	lsrs	r1, r3, #9
100164e0:	0043      	lsls	r3, r0, #1
100164e2:	0fc2      	lsrs	r2, r0, #31
100164e4:	0e1b      	lsrs	r3, r3, #24
100164e6:	2000      	movs	r0, #0
100164e8:	2b7e      	cmp	r3, #126	; 0x7e
100164ea:	dd0e      	ble.n	1001650a <__aeabi_f2iz+0x2e>
100164ec:	2b9d      	cmp	r3, #157	; 0x9d
100164ee:	dc0d      	bgt.n	1001650c <__aeabi_f2iz+0x30>
100164f0:	2080      	movs	r0, #128	; 0x80
100164f2:	0400      	lsls	r0, r0, #16
100164f4:	4301      	orrs	r1, r0
100164f6:	2b95      	cmp	r3, #149	; 0x95
100164f8:	dc0b      	bgt.n	10016512 <__aeabi_f2iz+0x36>
100164fa:	2096      	movs	r0, #150	; 0x96
100164fc:	1ac3      	subs	r3, r0, r3
100164fe:	40d9      	lsrs	r1, r3
10016500:	000b      	movs	r3, r1
10016502:	4258      	negs	r0, r3
10016504:	2a00      	cmp	r2, #0
10016506:	d100      	bne.n	1001650a <__aeabi_f2iz+0x2e>
10016508:	0018      	movs	r0, r3
1001650a:	4770      	bx	lr
1001650c:	4b03      	ldr	r3, [pc, #12]	; (1001651c <__aeabi_f2iz+0x40>)
1001650e:	18d0      	adds	r0, r2, r3
10016510:	e7fb      	b.n	1001650a <__aeabi_f2iz+0x2e>
10016512:	3b96      	subs	r3, #150	; 0x96
10016514:	4099      	lsls	r1, r3
10016516:	000b      	movs	r3, r1
10016518:	e7f3      	b.n	10016502 <__aeabi_f2iz+0x26>
1001651a:	46c0      	nop			; (mov r8, r8)
1001651c:	7fffffff 	.word	0x7fffffff

10016520 <__aeabi_i2f>:
10016520:	b570      	push	{r4, r5, r6, lr}
10016522:	2800      	cmp	r0, #0
10016524:	d030      	beq.n	10016588 <__aeabi_i2f+0x68>
10016526:	17c3      	asrs	r3, r0, #31
10016528:	18c5      	adds	r5, r0, r3
1001652a:	405d      	eors	r5, r3
1001652c:	0fc4      	lsrs	r4, r0, #31
1001652e:	0028      	movs	r0, r5
10016530:	f001 ff2a 	bl	10018388 <__clzsi2>
10016534:	239e      	movs	r3, #158	; 0x9e
10016536:	1a1b      	subs	r3, r3, r0
10016538:	2b96      	cmp	r3, #150	; 0x96
1001653a:	dc0d      	bgt.n	10016558 <__aeabi_i2f+0x38>
1001653c:	2296      	movs	r2, #150	; 0x96
1001653e:	1ad2      	subs	r2, r2, r3
10016540:	4095      	lsls	r5, r2
10016542:	026a      	lsls	r2, r5, #9
10016544:	0a52      	lsrs	r2, r2, #9
10016546:	b2d8      	uxtb	r0, r3
10016548:	0252      	lsls	r2, r2, #9
1001654a:	05c0      	lsls	r0, r0, #23
1001654c:	0a52      	lsrs	r2, r2, #9
1001654e:	07e4      	lsls	r4, r4, #31
10016550:	4302      	orrs	r2, r0
10016552:	4322      	orrs	r2, r4
10016554:	0010      	movs	r0, r2
10016556:	bd70      	pop	{r4, r5, r6, pc}
10016558:	2b99      	cmp	r3, #153	; 0x99
1001655a:	dc19      	bgt.n	10016590 <__aeabi_i2f+0x70>
1001655c:	2299      	movs	r2, #153	; 0x99
1001655e:	1ad2      	subs	r2, r2, r3
10016560:	4095      	lsls	r5, r2
10016562:	4a12      	ldr	r2, [pc, #72]	; (100165ac <__aeabi_i2f+0x8c>)
10016564:	402a      	ands	r2, r5
10016566:	0769      	lsls	r1, r5, #29
10016568:	d004      	beq.n	10016574 <__aeabi_i2f+0x54>
1001656a:	210f      	movs	r1, #15
1001656c:	400d      	ands	r5, r1
1001656e:	2d04      	cmp	r5, #4
10016570:	d000      	beq.n	10016574 <__aeabi_i2f+0x54>
10016572:	3204      	adds	r2, #4
10016574:	0151      	lsls	r1, r2, #5
10016576:	d503      	bpl.n	10016580 <__aeabi_i2f+0x60>
10016578:	4b0c      	ldr	r3, [pc, #48]	; (100165ac <__aeabi_i2f+0x8c>)
1001657a:	401a      	ands	r2, r3
1001657c:	239f      	movs	r3, #159	; 0x9f
1001657e:	1a1b      	subs	r3, r3, r0
10016580:	0192      	lsls	r2, r2, #6
10016582:	0a52      	lsrs	r2, r2, #9
10016584:	b2d8      	uxtb	r0, r3
10016586:	e7df      	b.n	10016548 <__aeabi_i2f+0x28>
10016588:	2400      	movs	r4, #0
1001658a:	2000      	movs	r0, #0
1001658c:	2200      	movs	r2, #0
1001658e:	e7db      	b.n	10016548 <__aeabi_i2f+0x28>
10016590:	2205      	movs	r2, #5
10016592:	002e      	movs	r6, r5
10016594:	1a12      	subs	r2, r2, r0
10016596:	21b9      	movs	r1, #185	; 0xb9
10016598:	40d6      	lsrs	r6, r2
1001659a:	002a      	movs	r2, r5
1001659c:	1ac9      	subs	r1, r1, r3
1001659e:	408a      	lsls	r2, r1
100165a0:	1e55      	subs	r5, r2, #1
100165a2:	41aa      	sbcs	r2, r5
100165a4:	0035      	movs	r5, r6
100165a6:	4315      	orrs	r5, r2
100165a8:	e7db      	b.n	10016562 <__aeabi_i2f+0x42>
100165aa:	46c0      	nop			; (mov r8, r8)
100165ac:	fbffffff 	.word	0xfbffffff

100165b0 <__aeabi_ui2f>:
100165b0:	b570      	push	{r4, r5, r6, lr}
100165b2:	1e04      	subs	r4, r0, #0
100165b4:	d028      	beq.n	10016608 <__aeabi_ui2f+0x58>
100165b6:	f001 fee7 	bl	10018388 <__clzsi2>
100165ba:	239e      	movs	r3, #158	; 0x9e
100165bc:	1a1b      	subs	r3, r3, r0
100165be:	2b96      	cmp	r3, #150	; 0x96
100165c0:	dc0a      	bgt.n	100165d8 <__aeabi_ui2f+0x28>
100165c2:	2296      	movs	r2, #150	; 0x96
100165c4:	1ad2      	subs	r2, r2, r3
100165c6:	4094      	lsls	r4, r2
100165c8:	0262      	lsls	r2, r4, #9
100165ca:	0a52      	lsrs	r2, r2, #9
100165cc:	b2d8      	uxtb	r0, r3
100165ce:	0252      	lsls	r2, r2, #9
100165d0:	0a52      	lsrs	r2, r2, #9
100165d2:	05c0      	lsls	r0, r0, #23
100165d4:	4310      	orrs	r0, r2
100165d6:	bd70      	pop	{r4, r5, r6, pc}
100165d8:	2b99      	cmp	r3, #153	; 0x99
100165da:	dc18      	bgt.n	1001660e <__aeabi_ui2f+0x5e>
100165dc:	2299      	movs	r2, #153	; 0x99
100165de:	1ad2      	subs	r2, r2, r3
100165e0:	4094      	lsls	r4, r2
100165e2:	4a11      	ldr	r2, [pc, #68]	; (10016628 <__aeabi_ui2f+0x78>)
100165e4:	4022      	ands	r2, r4
100165e6:	0761      	lsls	r1, r4, #29
100165e8:	d004      	beq.n	100165f4 <__aeabi_ui2f+0x44>
100165ea:	210f      	movs	r1, #15
100165ec:	400c      	ands	r4, r1
100165ee:	2c04      	cmp	r4, #4
100165f0:	d000      	beq.n	100165f4 <__aeabi_ui2f+0x44>
100165f2:	3204      	adds	r2, #4
100165f4:	0151      	lsls	r1, r2, #5
100165f6:	d503      	bpl.n	10016600 <__aeabi_ui2f+0x50>
100165f8:	4b0b      	ldr	r3, [pc, #44]	; (10016628 <__aeabi_ui2f+0x78>)
100165fa:	401a      	ands	r2, r3
100165fc:	239f      	movs	r3, #159	; 0x9f
100165fe:	1a1b      	subs	r3, r3, r0
10016600:	0192      	lsls	r2, r2, #6
10016602:	0a52      	lsrs	r2, r2, #9
10016604:	b2d8      	uxtb	r0, r3
10016606:	e7e2      	b.n	100165ce <__aeabi_ui2f+0x1e>
10016608:	2000      	movs	r0, #0
1001660a:	2200      	movs	r2, #0
1001660c:	e7df      	b.n	100165ce <__aeabi_ui2f+0x1e>
1001660e:	2205      	movs	r2, #5
10016610:	0025      	movs	r5, r4
10016612:	1a12      	subs	r2, r2, r0
10016614:	21b9      	movs	r1, #185	; 0xb9
10016616:	40d5      	lsrs	r5, r2
10016618:	0022      	movs	r2, r4
1001661a:	1ac9      	subs	r1, r1, r3
1001661c:	408a      	lsls	r2, r1
1001661e:	1e54      	subs	r4, r2, #1
10016620:	41a2      	sbcs	r2, r4
10016622:	002c      	movs	r4, r5
10016624:	4314      	orrs	r4, r2
10016626:	e7dc      	b.n	100165e2 <__aeabi_ui2f+0x32>
10016628:	fbffffff 	.word	0xfbffffff

1001662c <__aeabi_dadd>:
1001662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001662e:	4656      	mov	r6, sl
10016630:	465f      	mov	r7, fp
10016632:	464d      	mov	r5, r9
10016634:	4644      	mov	r4, r8
10016636:	b4f0      	push	{r4, r5, r6, r7}
10016638:	000f      	movs	r7, r1
1001663a:	0ffd      	lsrs	r5, r7, #31
1001663c:	46aa      	mov	sl, r5
1001663e:	0309      	lsls	r1, r1, #12
10016640:	007c      	lsls	r4, r7, #1
10016642:	002e      	movs	r6, r5
10016644:	005f      	lsls	r7, r3, #1
10016646:	0f45      	lsrs	r5, r0, #29
10016648:	0a49      	lsrs	r1, r1, #9
1001664a:	0d7f      	lsrs	r7, r7, #21
1001664c:	4329      	orrs	r1, r5
1001664e:	00c5      	lsls	r5, r0, #3
10016650:	0318      	lsls	r0, r3, #12
10016652:	46bc      	mov	ip, r7
10016654:	0a40      	lsrs	r0, r0, #9
10016656:	0f57      	lsrs	r7, r2, #29
10016658:	0d64      	lsrs	r4, r4, #21
1001665a:	0fdb      	lsrs	r3, r3, #31
1001665c:	4338      	orrs	r0, r7
1001665e:	00d2      	lsls	r2, r2, #3
10016660:	459a      	cmp	sl, r3
10016662:	d100      	bne.n	10016666 <__aeabi_dadd+0x3a>
10016664:	e0aa      	b.n	100167bc <__aeabi_dadd+0x190>
10016666:	4666      	mov	r6, ip
10016668:	1ba6      	subs	r6, r4, r6
1001666a:	2e00      	cmp	r6, #0
1001666c:	dc00      	bgt.n	10016670 <__aeabi_dadd+0x44>
1001666e:	e0ff      	b.n	10016870 <__aeabi_dadd+0x244>
10016670:	4663      	mov	r3, ip
10016672:	2b00      	cmp	r3, #0
10016674:	d139      	bne.n	100166ea <__aeabi_dadd+0xbe>
10016676:	0003      	movs	r3, r0
10016678:	4313      	orrs	r3, r2
1001667a:	d000      	beq.n	1001667e <__aeabi_dadd+0x52>
1001667c:	e0d9      	b.n	10016832 <__aeabi_dadd+0x206>
1001667e:	076b      	lsls	r3, r5, #29
10016680:	d009      	beq.n	10016696 <__aeabi_dadd+0x6a>
10016682:	230f      	movs	r3, #15
10016684:	402b      	ands	r3, r5
10016686:	2b04      	cmp	r3, #4
10016688:	d005      	beq.n	10016696 <__aeabi_dadd+0x6a>
1001668a:	1d2b      	adds	r3, r5, #4
1001668c:	42ab      	cmp	r3, r5
1001668e:	41ad      	sbcs	r5, r5
10016690:	426d      	negs	r5, r5
10016692:	1949      	adds	r1, r1, r5
10016694:	001d      	movs	r5, r3
10016696:	020b      	lsls	r3, r1, #8
10016698:	d400      	bmi.n	1001669c <__aeabi_dadd+0x70>
1001669a:	e082      	b.n	100167a2 <__aeabi_dadd+0x176>
1001669c:	4bca      	ldr	r3, [pc, #808]	; (100169c8 <__aeabi_dadd+0x39c>)
1001669e:	3401      	adds	r4, #1
100166a0:	429c      	cmp	r4, r3
100166a2:	d100      	bne.n	100166a6 <__aeabi_dadd+0x7a>
100166a4:	e0fe      	b.n	100168a4 <__aeabi_dadd+0x278>
100166a6:	000a      	movs	r2, r1
100166a8:	4656      	mov	r6, sl
100166aa:	4bc8      	ldr	r3, [pc, #800]	; (100169cc <__aeabi_dadd+0x3a0>)
100166ac:	08ed      	lsrs	r5, r5, #3
100166ae:	401a      	ands	r2, r3
100166b0:	0750      	lsls	r0, r2, #29
100166b2:	0564      	lsls	r4, r4, #21
100166b4:	0252      	lsls	r2, r2, #9
100166b6:	4305      	orrs	r5, r0
100166b8:	0b12      	lsrs	r2, r2, #12
100166ba:	0d64      	lsrs	r4, r4, #21
100166bc:	2100      	movs	r1, #0
100166be:	0312      	lsls	r2, r2, #12
100166c0:	0d0b      	lsrs	r3, r1, #20
100166c2:	051b      	lsls	r3, r3, #20
100166c4:	0564      	lsls	r4, r4, #21
100166c6:	0b12      	lsrs	r2, r2, #12
100166c8:	431a      	orrs	r2, r3
100166ca:	0863      	lsrs	r3, r4, #1
100166cc:	4cc0      	ldr	r4, [pc, #768]	; (100169d0 <__aeabi_dadd+0x3a4>)
100166ce:	07f6      	lsls	r6, r6, #31
100166d0:	4014      	ands	r4, r2
100166d2:	431c      	orrs	r4, r3
100166d4:	0064      	lsls	r4, r4, #1
100166d6:	0864      	lsrs	r4, r4, #1
100166d8:	4334      	orrs	r4, r6
100166da:	0028      	movs	r0, r5
100166dc:	0021      	movs	r1, r4
100166de:	bc3c      	pop	{r2, r3, r4, r5}
100166e0:	4690      	mov	r8, r2
100166e2:	4699      	mov	r9, r3
100166e4:	46a2      	mov	sl, r4
100166e6:	46ab      	mov	fp, r5
100166e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100166ea:	4bb7      	ldr	r3, [pc, #732]	; (100169c8 <__aeabi_dadd+0x39c>)
100166ec:	429c      	cmp	r4, r3
100166ee:	d0c6      	beq.n	1001667e <__aeabi_dadd+0x52>
100166f0:	2380      	movs	r3, #128	; 0x80
100166f2:	041b      	lsls	r3, r3, #16
100166f4:	4318      	orrs	r0, r3
100166f6:	2e38      	cmp	r6, #56	; 0x38
100166f8:	dd00      	ble.n	100166fc <__aeabi_dadd+0xd0>
100166fa:	e0eb      	b.n	100168d4 <__aeabi_dadd+0x2a8>
100166fc:	2e1f      	cmp	r6, #31
100166fe:	dd00      	ble.n	10016702 <__aeabi_dadd+0xd6>
10016700:	e11e      	b.n	10016940 <__aeabi_dadd+0x314>
10016702:	2320      	movs	r3, #32
10016704:	1b9b      	subs	r3, r3, r6
10016706:	469c      	mov	ip, r3
10016708:	0003      	movs	r3, r0
1001670a:	4667      	mov	r7, ip
1001670c:	40bb      	lsls	r3, r7
1001670e:	4698      	mov	r8, r3
10016710:	0013      	movs	r3, r2
10016712:	4647      	mov	r7, r8
10016714:	40f3      	lsrs	r3, r6
10016716:	433b      	orrs	r3, r7
10016718:	4667      	mov	r7, ip
1001671a:	40ba      	lsls	r2, r7
1001671c:	1e57      	subs	r7, r2, #1
1001671e:	41ba      	sbcs	r2, r7
10016720:	4313      	orrs	r3, r2
10016722:	0002      	movs	r2, r0
10016724:	40f2      	lsrs	r2, r6
10016726:	1aeb      	subs	r3, r5, r3
10016728:	429d      	cmp	r5, r3
1001672a:	41b6      	sbcs	r6, r6
1001672c:	001d      	movs	r5, r3
1001672e:	1a8a      	subs	r2, r1, r2
10016730:	4276      	negs	r6, r6
10016732:	1b91      	subs	r1, r2, r6
10016734:	020b      	lsls	r3, r1, #8
10016736:	d531      	bpl.n	1001679c <__aeabi_dadd+0x170>
10016738:	024a      	lsls	r2, r1, #9
1001673a:	0a56      	lsrs	r6, r2, #9
1001673c:	2e00      	cmp	r6, #0
1001673e:	d100      	bne.n	10016742 <__aeabi_dadd+0x116>
10016740:	e0b4      	b.n	100168ac <__aeabi_dadd+0x280>
10016742:	0030      	movs	r0, r6
10016744:	f001 fe20 	bl	10018388 <__clzsi2>
10016748:	0003      	movs	r3, r0
1001674a:	3b08      	subs	r3, #8
1001674c:	2b1f      	cmp	r3, #31
1001674e:	dd00      	ble.n	10016752 <__aeabi_dadd+0x126>
10016750:	e0b5      	b.n	100168be <__aeabi_dadd+0x292>
10016752:	2220      	movs	r2, #32
10016754:	0029      	movs	r1, r5
10016756:	1ad2      	subs	r2, r2, r3
10016758:	40d1      	lsrs	r1, r2
1001675a:	409e      	lsls	r6, r3
1001675c:	000a      	movs	r2, r1
1001675e:	409d      	lsls	r5, r3
10016760:	4332      	orrs	r2, r6
10016762:	429c      	cmp	r4, r3
10016764:	dd00      	ble.n	10016768 <__aeabi_dadd+0x13c>
10016766:	e0b1      	b.n	100168cc <__aeabi_dadd+0x2a0>
10016768:	1b1c      	subs	r4, r3, r4
1001676a:	1c63      	adds	r3, r4, #1
1001676c:	2b1f      	cmp	r3, #31
1001676e:	dd00      	ble.n	10016772 <__aeabi_dadd+0x146>
10016770:	e0d5      	b.n	1001691e <__aeabi_dadd+0x2f2>
10016772:	2120      	movs	r1, #32
10016774:	0014      	movs	r4, r2
10016776:	0028      	movs	r0, r5
10016778:	1ac9      	subs	r1, r1, r3
1001677a:	408c      	lsls	r4, r1
1001677c:	40d8      	lsrs	r0, r3
1001677e:	408d      	lsls	r5, r1
10016780:	4304      	orrs	r4, r0
10016782:	40da      	lsrs	r2, r3
10016784:	1e68      	subs	r0, r5, #1
10016786:	4185      	sbcs	r5, r0
10016788:	0011      	movs	r1, r2
1001678a:	4325      	orrs	r5, r4
1001678c:	2400      	movs	r4, #0
1001678e:	e776      	b.n	1001667e <__aeabi_dadd+0x52>
10016790:	4641      	mov	r1, r8
10016792:	4331      	orrs	r1, r6
10016794:	d100      	bne.n	10016798 <__aeabi_dadd+0x16c>
10016796:	e234      	b.n	10016c02 <__aeabi_dadd+0x5d6>
10016798:	0031      	movs	r1, r6
1001679a:	4645      	mov	r5, r8
1001679c:	076b      	lsls	r3, r5, #29
1001679e:	d000      	beq.n	100167a2 <__aeabi_dadd+0x176>
100167a0:	e76f      	b.n	10016682 <__aeabi_dadd+0x56>
100167a2:	4656      	mov	r6, sl
100167a4:	0748      	lsls	r0, r1, #29
100167a6:	08ed      	lsrs	r5, r5, #3
100167a8:	08c9      	lsrs	r1, r1, #3
100167aa:	4305      	orrs	r5, r0
100167ac:	4b86      	ldr	r3, [pc, #536]	; (100169c8 <__aeabi_dadd+0x39c>)
100167ae:	429c      	cmp	r4, r3
100167b0:	d035      	beq.n	1001681e <__aeabi_dadd+0x1f2>
100167b2:	030a      	lsls	r2, r1, #12
100167b4:	0564      	lsls	r4, r4, #21
100167b6:	0b12      	lsrs	r2, r2, #12
100167b8:	0d64      	lsrs	r4, r4, #21
100167ba:	e77f      	b.n	100166bc <__aeabi_dadd+0x90>
100167bc:	4663      	mov	r3, ip
100167be:	1ae3      	subs	r3, r4, r3
100167c0:	469b      	mov	fp, r3
100167c2:	2b00      	cmp	r3, #0
100167c4:	dc00      	bgt.n	100167c8 <__aeabi_dadd+0x19c>
100167c6:	e08b      	b.n	100168e0 <__aeabi_dadd+0x2b4>
100167c8:	4667      	mov	r7, ip
100167ca:	2f00      	cmp	r7, #0
100167cc:	d03c      	beq.n	10016848 <__aeabi_dadd+0x21c>
100167ce:	4f7e      	ldr	r7, [pc, #504]	; (100169c8 <__aeabi_dadd+0x39c>)
100167d0:	42bc      	cmp	r4, r7
100167d2:	d100      	bne.n	100167d6 <__aeabi_dadd+0x1aa>
100167d4:	e753      	b.n	1001667e <__aeabi_dadd+0x52>
100167d6:	2780      	movs	r7, #128	; 0x80
100167d8:	043f      	lsls	r7, r7, #16
100167da:	4338      	orrs	r0, r7
100167dc:	465b      	mov	r3, fp
100167de:	2b38      	cmp	r3, #56	; 0x38
100167e0:	dc00      	bgt.n	100167e4 <__aeabi_dadd+0x1b8>
100167e2:	e0f7      	b.n	100169d4 <__aeabi_dadd+0x3a8>
100167e4:	4302      	orrs	r2, r0
100167e6:	1e50      	subs	r0, r2, #1
100167e8:	4182      	sbcs	r2, r0
100167ea:	2000      	movs	r0, #0
100167ec:	b2d2      	uxtb	r2, r2
100167ee:	1953      	adds	r3, r2, r5
100167f0:	1842      	adds	r2, r0, r1
100167f2:	42ab      	cmp	r3, r5
100167f4:	4189      	sbcs	r1, r1
100167f6:	001d      	movs	r5, r3
100167f8:	4249      	negs	r1, r1
100167fa:	1889      	adds	r1, r1, r2
100167fc:	020b      	lsls	r3, r1, #8
100167fe:	d5cd      	bpl.n	1001679c <__aeabi_dadd+0x170>
10016800:	4b71      	ldr	r3, [pc, #452]	; (100169c8 <__aeabi_dadd+0x39c>)
10016802:	3401      	adds	r4, #1
10016804:	429c      	cmp	r4, r3
10016806:	d100      	bne.n	1001680a <__aeabi_dadd+0x1de>
10016808:	e13d      	b.n	10016a86 <__aeabi_dadd+0x45a>
1001680a:	2001      	movs	r0, #1
1001680c:	4a6f      	ldr	r2, [pc, #444]	; (100169cc <__aeabi_dadd+0x3a0>)
1001680e:	086b      	lsrs	r3, r5, #1
10016810:	400a      	ands	r2, r1
10016812:	4028      	ands	r0, r5
10016814:	4318      	orrs	r0, r3
10016816:	07d5      	lsls	r5, r2, #31
10016818:	4305      	orrs	r5, r0
1001681a:	0851      	lsrs	r1, r2, #1
1001681c:	e72f      	b.n	1001667e <__aeabi_dadd+0x52>
1001681e:	002b      	movs	r3, r5
10016820:	430b      	orrs	r3, r1
10016822:	d100      	bne.n	10016826 <__aeabi_dadd+0x1fa>
10016824:	e1cb      	b.n	10016bbe <__aeabi_dadd+0x592>
10016826:	2380      	movs	r3, #128	; 0x80
10016828:	031b      	lsls	r3, r3, #12
1001682a:	430b      	orrs	r3, r1
1001682c:	031a      	lsls	r2, r3, #12
1001682e:	0b12      	lsrs	r2, r2, #12
10016830:	e744      	b.n	100166bc <__aeabi_dadd+0x90>
10016832:	3e01      	subs	r6, #1
10016834:	2e00      	cmp	r6, #0
10016836:	d16d      	bne.n	10016914 <__aeabi_dadd+0x2e8>
10016838:	1aae      	subs	r6, r5, r2
1001683a:	42b5      	cmp	r5, r6
1001683c:	419b      	sbcs	r3, r3
1001683e:	1a09      	subs	r1, r1, r0
10016840:	425b      	negs	r3, r3
10016842:	1ac9      	subs	r1, r1, r3
10016844:	0035      	movs	r5, r6
10016846:	e775      	b.n	10016734 <__aeabi_dadd+0x108>
10016848:	0007      	movs	r7, r0
1001684a:	4317      	orrs	r7, r2
1001684c:	d100      	bne.n	10016850 <__aeabi_dadd+0x224>
1001684e:	e716      	b.n	1001667e <__aeabi_dadd+0x52>
10016850:	2301      	movs	r3, #1
10016852:	425b      	negs	r3, r3
10016854:	469c      	mov	ip, r3
10016856:	44e3      	add	fp, ip
10016858:	465b      	mov	r3, fp
1001685a:	2b00      	cmp	r3, #0
1001685c:	d000      	beq.n	10016860 <__aeabi_dadd+0x234>
1001685e:	e0e0      	b.n	10016a22 <__aeabi_dadd+0x3f6>
10016860:	18aa      	adds	r2, r5, r2
10016862:	42aa      	cmp	r2, r5
10016864:	419b      	sbcs	r3, r3
10016866:	1809      	adds	r1, r1, r0
10016868:	425b      	negs	r3, r3
1001686a:	1859      	adds	r1, r3, r1
1001686c:	0015      	movs	r5, r2
1001686e:	e7c5      	b.n	100167fc <__aeabi_dadd+0x1d0>
10016870:	2e00      	cmp	r6, #0
10016872:	d175      	bne.n	10016960 <__aeabi_dadd+0x334>
10016874:	1c66      	adds	r6, r4, #1
10016876:	0576      	lsls	r6, r6, #21
10016878:	0d76      	lsrs	r6, r6, #21
1001687a:	2e01      	cmp	r6, #1
1001687c:	dc00      	bgt.n	10016880 <__aeabi_dadd+0x254>
1001687e:	e0f3      	b.n	10016a68 <__aeabi_dadd+0x43c>
10016880:	1aae      	subs	r6, r5, r2
10016882:	46b0      	mov	r8, r6
10016884:	4545      	cmp	r5, r8
10016886:	41bf      	sbcs	r7, r7
10016888:	1a0e      	subs	r6, r1, r0
1001688a:	427f      	negs	r7, r7
1001688c:	1bf6      	subs	r6, r6, r7
1001688e:	0237      	lsls	r7, r6, #8
10016890:	d400      	bmi.n	10016894 <__aeabi_dadd+0x268>
10016892:	e08f      	b.n	100169b4 <__aeabi_dadd+0x388>
10016894:	1b55      	subs	r5, r2, r5
10016896:	42aa      	cmp	r2, r5
10016898:	41b6      	sbcs	r6, r6
1001689a:	1a41      	subs	r1, r0, r1
1001689c:	4276      	negs	r6, r6
1001689e:	1b8e      	subs	r6, r1, r6
100168a0:	469a      	mov	sl, r3
100168a2:	e74b      	b.n	1001673c <__aeabi_dadd+0x110>
100168a4:	4656      	mov	r6, sl
100168a6:	2200      	movs	r2, #0
100168a8:	2500      	movs	r5, #0
100168aa:	e707      	b.n	100166bc <__aeabi_dadd+0x90>
100168ac:	0028      	movs	r0, r5
100168ae:	f001 fd6b 	bl	10018388 <__clzsi2>
100168b2:	3020      	adds	r0, #32
100168b4:	0003      	movs	r3, r0
100168b6:	3b08      	subs	r3, #8
100168b8:	2b1f      	cmp	r3, #31
100168ba:	dc00      	bgt.n	100168be <__aeabi_dadd+0x292>
100168bc:	e749      	b.n	10016752 <__aeabi_dadd+0x126>
100168be:	002a      	movs	r2, r5
100168c0:	3828      	subs	r0, #40	; 0x28
100168c2:	4082      	lsls	r2, r0
100168c4:	2500      	movs	r5, #0
100168c6:	429c      	cmp	r4, r3
100168c8:	dc00      	bgt.n	100168cc <__aeabi_dadd+0x2a0>
100168ca:	e74d      	b.n	10016768 <__aeabi_dadd+0x13c>
100168cc:	493f      	ldr	r1, [pc, #252]	; (100169cc <__aeabi_dadd+0x3a0>)
100168ce:	1ae4      	subs	r4, r4, r3
100168d0:	4011      	ands	r1, r2
100168d2:	e6d4      	b.n	1001667e <__aeabi_dadd+0x52>
100168d4:	4302      	orrs	r2, r0
100168d6:	1e50      	subs	r0, r2, #1
100168d8:	4182      	sbcs	r2, r0
100168da:	b2d3      	uxtb	r3, r2
100168dc:	2200      	movs	r2, #0
100168de:	e722      	b.n	10016726 <__aeabi_dadd+0xfa>
100168e0:	2b00      	cmp	r3, #0
100168e2:	d000      	beq.n	100168e6 <__aeabi_dadd+0x2ba>
100168e4:	e0f3      	b.n	10016ace <__aeabi_dadd+0x4a2>
100168e6:	1c63      	adds	r3, r4, #1
100168e8:	469c      	mov	ip, r3
100168ea:	055b      	lsls	r3, r3, #21
100168ec:	0d5b      	lsrs	r3, r3, #21
100168ee:	2b01      	cmp	r3, #1
100168f0:	dc00      	bgt.n	100168f4 <__aeabi_dadd+0x2c8>
100168f2:	e09f      	b.n	10016a34 <__aeabi_dadd+0x408>
100168f4:	4b34      	ldr	r3, [pc, #208]	; (100169c8 <__aeabi_dadd+0x39c>)
100168f6:	459c      	cmp	ip, r3
100168f8:	d100      	bne.n	100168fc <__aeabi_dadd+0x2d0>
100168fa:	e0c3      	b.n	10016a84 <__aeabi_dadd+0x458>
100168fc:	18aa      	adds	r2, r5, r2
100168fe:	1809      	adds	r1, r1, r0
10016900:	42aa      	cmp	r2, r5
10016902:	4180      	sbcs	r0, r0
10016904:	4240      	negs	r0, r0
10016906:	1841      	adds	r1, r0, r1
10016908:	07cd      	lsls	r5, r1, #31
1001690a:	0852      	lsrs	r2, r2, #1
1001690c:	4315      	orrs	r5, r2
1001690e:	0849      	lsrs	r1, r1, #1
10016910:	4664      	mov	r4, ip
10016912:	e6b4      	b.n	1001667e <__aeabi_dadd+0x52>
10016914:	4b2c      	ldr	r3, [pc, #176]	; (100169c8 <__aeabi_dadd+0x39c>)
10016916:	429c      	cmp	r4, r3
10016918:	d000      	beq.n	1001691c <__aeabi_dadd+0x2f0>
1001691a:	e6ec      	b.n	100166f6 <__aeabi_dadd+0xca>
1001691c:	e6af      	b.n	1001667e <__aeabi_dadd+0x52>
1001691e:	0011      	movs	r1, r2
10016920:	3c1f      	subs	r4, #31
10016922:	40e1      	lsrs	r1, r4
10016924:	000c      	movs	r4, r1
10016926:	2b20      	cmp	r3, #32
10016928:	d100      	bne.n	1001692c <__aeabi_dadd+0x300>
1001692a:	e07f      	b.n	10016a2c <__aeabi_dadd+0x400>
1001692c:	2140      	movs	r1, #64	; 0x40
1001692e:	1acb      	subs	r3, r1, r3
10016930:	409a      	lsls	r2, r3
10016932:	4315      	orrs	r5, r2
10016934:	1e6a      	subs	r2, r5, #1
10016936:	4195      	sbcs	r5, r2
10016938:	2100      	movs	r1, #0
1001693a:	4325      	orrs	r5, r4
1001693c:	2400      	movs	r4, #0
1001693e:	e72d      	b.n	1001679c <__aeabi_dadd+0x170>
10016940:	0033      	movs	r3, r6
10016942:	0007      	movs	r7, r0
10016944:	3b20      	subs	r3, #32
10016946:	40df      	lsrs	r7, r3
10016948:	003b      	movs	r3, r7
1001694a:	2e20      	cmp	r6, #32
1001694c:	d070      	beq.n	10016a30 <__aeabi_dadd+0x404>
1001694e:	2740      	movs	r7, #64	; 0x40
10016950:	1bbe      	subs	r6, r7, r6
10016952:	40b0      	lsls	r0, r6
10016954:	4302      	orrs	r2, r0
10016956:	1e50      	subs	r0, r2, #1
10016958:	4182      	sbcs	r2, r0
1001695a:	4313      	orrs	r3, r2
1001695c:	2200      	movs	r2, #0
1001695e:	e6e2      	b.n	10016726 <__aeabi_dadd+0xfa>
10016960:	2c00      	cmp	r4, #0
10016962:	d04f      	beq.n	10016a04 <__aeabi_dadd+0x3d8>
10016964:	4c18      	ldr	r4, [pc, #96]	; (100169c8 <__aeabi_dadd+0x39c>)
10016966:	45a4      	cmp	ip, r4
10016968:	d100      	bne.n	1001696c <__aeabi_dadd+0x340>
1001696a:	e0ab      	b.n	10016ac4 <__aeabi_dadd+0x498>
1001696c:	2480      	movs	r4, #128	; 0x80
1001696e:	0424      	lsls	r4, r4, #16
10016970:	4276      	negs	r6, r6
10016972:	4321      	orrs	r1, r4
10016974:	2e38      	cmp	r6, #56	; 0x38
10016976:	dd00      	ble.n	1001697a <__aeabi_dadd+0x34e>
10016978:	e0df      	b.n	10016b3a <__aeabi_dadd+0x50e>
1001697a:	2e1f      	cmp	r6, #31
1001697c:	dd00      	ble.n	10016980 <__aeabi_dadd+0x354>
1001697e:	e143      	b.n	10016c08 <__aeabi_dadd+0x5dc>
10016980:	2720      	movs	r7, #32
10016982:	1bbc      	subs	r4, r7, r6
10016984:	46a1      	mov	r9, r4
10016986:	000c      	movs	r4, r1
10016988:	464f      	mov	r7, r9
1001698a:	40bc      	lsls	r4, r7
1001698c:	46a0      	mov	r8, r4
1001698e:	002c      	movs	r4, r5
10016990:	4647      	mov	r7, r8
10016992:	40f4      	lsrs	r4, r6
10016994:	433c      	orrs	r4, r7
10016996:	464f      	mov	r7, r9
10016998:	40bd      	lsls	r5, r7
1001699a:	1e6f      	subs	r7, r5, #1
1001699c:	41bd      	sbcs	r5, r7
1001699e:	40f1      	lsrs	r1, r6
100169a0:	432c      	orrs	r4, r5
100169a2:	1b15      	subs	r5, r2, r4
100169a4:	42aa      	cmp	r2, r5
100169a6:	4192      	sbcs	r2, r2
100169a8:	1a41      	subs	r1, r0, r1
100169aa:	4252      	negs	r2, r2
100169ac:	1a89      	subs	r1, r1, r2
100169ae:	4664      	mov	r4, ip
100169b0:	469a      	mov	sl, r3
100169b2:	e6bf      	b.n	10016734 <__aeabi_dadd+0x108>
100169b4:	4641      	mov	r1, r8
100169b6:	4645      	mov	r5, r8
100169b8:	4331      	orrs	r1, r6
100169ba:	d000      	beq.n	100169be <__aeabi_dadd+0x392>
100169bc:	e6be      	b.n	1001673c <__aeabi_dadd+0x110>
100169be:	2600      	movs	r6, #0
100169c0:	2400      	movs	r4, #0
100169c2:	2500      	movs	r5, #0
100169c4:	e6f2      	b.n	100167ac <__aeabi_dadd+0x180>
100169c6:	46c0      	nop			; (mov r8, r8)
100169c8:	000007ff 	.word	0x000007ff
100169cc:	ff7fffff 	.word	0xff7fffff
100169d0:	800fffff 	.word	0x800fffff
100169d4:	2b1f      	cmp	r3, #31
100169d6:	dc59      	bgt.n	10016a8c <__aeabi_dadd+0x460>
100169d8:	2720      	movs	r7, #32
100169da:	1aff      	subs	r7, r7, r3
100169dc:	46bc      	mov	ip, r7
100169de:	0007      	movs	r7, r0
100169e0:	4663      	mov	r3, ip
100169e2:	409f      	lsls	r7, r3
100169e4:	465b      	mov	r3, fp
100169e6:	46b9      	mov	r9, r7
100169e8:	0017      	movs	r7, r2
100169ea:	40df      	lsrs	r7, r3
100169ec:	46b8      	mov	r8, r7
100169ee:	464f      	mov	r7, r9
100169f0:	4643      	mov	r3, r8
100169f2:	431f      	orrs	r7, r3
100169f4:	4663      	mov	r3, ip
100169f6:	409a      	lsls	r2, r3
100169f8:	1e53      	subs	r3, r2, #1
100169fa:	419a      	sbcs	r2, r3
100169fc:	465b      	mov	r3, fp
100169fe:	433a      	orrs	r2, r7
10016a00:	40d8      	lsrs	r0, r3
10016a02:	e6f4      	b.n	100167ee <__aeabi_dadd+0x1c2>
10016a04:	000c      	movs	r4, r1
10016a06:	432c      	orrs	r4, r5
10016a08:	d05c      	beq.n	10016ac4 <__aeabi_dadd+0x498>
10016a0a:	43f6      	mvns	r6, r6
10016a0c:	2e00      	cmp	r6, #0
10016a0e:	d155      	bne.n	10016abc <__aeabi_dadd+0x490>
10016a10:	1b55      	subs	r5, r2, r5
10016a12:	42aa      	cmp	r2, r5
10016a14:	41a4      	sbcs	r4, r4
10016a16:	1a41      	subs	r1, r0, r1
10016a18:	4264      	negs	r4, r4
10016a1a:	1b09      	subs	r1, r1, r4
10016a1c:	469a      	mov	sl, r3
10016a1e:	4664      	mov	r4, ip
10016a20:	e688      	b.n	10016734 <__aeabi_dadd+0x108>
10016a22:	4f96      	ldr	r7, [pc, #600]	; (10016c7c <__aeabi_dadd+0x650>)
10016a24:	42bc      	cmp	r4, r7
10016a26:	d000      	beq.n	10016a2a <__aeabi_dadd+0x3fe>
10016a28:	e6d8      	b.n	100167dc <__aeabi_dadd+0x1b0>
10016a2a:	e628      	b.n	1001667e <__aeabi_dadd+0x52>
10016a2c:	2200      	movs	r2, #0
10016a2e:	e780      	b.n	10016932 <__aeabi_dadd+0x306>
10016a30:	2000      	movs	r0, #0
10016a32:	e78f      	b.n	10016954 <__aeabi_dadd+0x328>
10016a34:	000b      	movs	r3, r1
10016a36:	432b      	orrs	r3, r5
10016a38:	2c00      	cmp	r4, #0
10016a3a:	d000      	beq.n	10016a3e <__aeabi_dadd+0x412>
10016a3c:	e0c2      	b.n	10016bc4 <__aeabi_dadd+0x598>
10016a3e:	2b00      	cmp	r3, #0
10016a40:	d100      	bne.n	10016a44 <__aeabi_dadd+0x418>
10016a42:	e101      	b.n	10016c48 <__aeabi_dadd+0x61c>
10016a44:	0003      	movs	r3, r0
10016a46:	4313      	orrs	r3, r2
10016a48:	d100      	bne.n	10016a4c <__aeabi_dadd+0x420>
10016a4a:	e618      	b.n	1001667e <__aeabi_dadd+0x52>
10016a4c:	18ab      	adds	r3, r5, r2
10016a4e:	42ab      	cmp	r3, r5
10016a50:	41b6      	sbcs	r6, r6
10016a52:	1809      	adds	r1, r1, r0
10016a54:	4276      	negs	r6, r6
10016a56:	1871      	adds	r1, r6, r1
10016a58:	020a      	lsls	r2, r1, #8
10016a5a:	d400      	bmi.n	10016a5e <__aeabi_dadd+0x432>
10016a5c:	e109      	b.n	10016c72 <__aeabi_dadd+0x646>
10016a5e:	4a88      	ldr	r2, [pc, #544]	; (10016c80 <__aeabi_dadd+0x654>)
10016a60:	001d      	movs	r5, r3
10016a62:	4011      	ands	r1, r2
10016a64:	4664      	mov	r4, ip
10016a66:	e60a      	b.n	1001667e <__aeabi_dadd+0x52>
10016a68:	2c00      	cmp	r4, #0
10016a6a:	d15b      	bne.n	10016b24 <__aeabi_dadd+0x4f8>
10016a6c:	000e      	movs	r6, r1
10016a6e:	432e      	orrs	r6, r5
10016a70:	d000      	beq.n	10016a74 <__aeabi_dadd+0x448>
10016a72:	e08a      	b.n	10016b8a <__aeabi_dadd+0x55e>
10016a74:	0001      	movs	r1, r0
10016a76:	4311      	orrs	r1, r2
10016a78:	d100      	bne.n	10016a7c <__aeabi_dadd+0x450>
10016a7a:	e0c2      	b.n	10016c02 <__aeabi_dadd+0x5d6>
10016a7c:	0001      	movs	r1, r0
10016a7e:	0015      	movs	r5, r2
10016a80:	469a      	mov	sl, r3
10016a82:	e5fc      	b.n	1001667e <__aeabi_dadd+0x52>
10016a84:	4664      	mov	r4, ip
10016a86:	2100      	movs	r1, #0
10016a88:	2500      	movs	r5, #0
10016a8a:	e68f      	b.n	100167ac <__aeabi_dadd+0x180>
10016a8c:	2320      	movs	r3, #32
10016a8e:	425b      	negs	r3, r3
10016a90:	469c      	mov	ip, r3
10016a92:	44dc      	add	ip, fp
10016a94:	4663      	mov	r3, ip
10016a96:	0007      	movs	r7, r0
10016a98:	40df      	lsrs	r7, r3
10016a9a:	465b      	mov	r3, fp
10016a9c:	46bc      	mov	ip, r7
10016a9e:	2b20      	cmp	r3, #32
10016aa0:	d100      	bne.n	10016aa4 <__aeabi_dadd+0x478>
10016aa2:	e0ac      	b.n	10016bfe <__aeabi_dadd+0x5d2>
10016aa4:	2340      	movs	r3, #64	; 0x40
10016aa6:	465f      	mov	r7, fp
10016aa8:	1bdb      	subs	r3, r3, r7
10016aaa:	4098      	lsls	r0, r3
10016aac:	4302      	orrs	r2, r0
10016aae:	1e50      	subs	r0, r2, #1
10016ab0:	4182      	sbcs	r2, r0
10016ab2:	4663      	mov	r3, ip
10016ab4:	4313      	orrs	r3, r2
10016ab6:	001a      	movs	r2, r3
10016ab8:	2000      	movs	r0, #0
10016aba:	e698      	b.n	100167ee <__aeabi_dadd+0x1c2>
10016abc:	4c6f      	ldr	r4, [pc, #444]	; (10016c7c <__aeabi_dadd+0x650>)
10016abe:	45a4      	cmp	ip, r4
10016ac0:	d000      	beq.n	10016ac4 <__aeabi_dadd+0x498>
10016ac2:	e757      	b.n	10016974 <__aeabi_dadd+0x348>
10016ac4:	0001      	movs	r1, r0
10016ac6:	0015      	movs	r5, r2
10016ac8:	4664      	mov	r4, ip
10016aca:	469a      	mov	sl, r3
10016acc:	e5d7      	b.n	1001667e <__aeabi_dadd+0x52>
10016ace:	2c00      	cmp	r4, #0
10016ad0:	d139      	bne.n	10016b46 <__aeabi_dadd+0x51a>
10016ad2:	000c      	movs	r4, r1
10016ad4:	432c      	orrs	r4, r5
10016ad6:	d06e      	beq.n	10016bb6 <__aeabi_dadd+0x58a>
10016ad8:	43db      	mvns	r3, r3
10016ada:	2b00      	cmp	r3, #0
10016adc:	d01a      	beq.n	10016b14 <__aeabi_dadd+0x4e8>
10016ade:	4c67      	ldr	r4, [pc, #412]	; (10016c7c <__aeabi_dadd+0x650>)
10016ae0:	45a4      	cmp	ip, r4
10016ae2:	d068      	beq.n	10016bb6 <__aeabi_dadd+0x58a>
10016ae4:	2b38      	cmp	r3, #56	; 0x38
10016ae6:	dd00      	ble.n	10016aea <__aeabi_dadd+0x4be>
10016ae8:	e0a4      	b.n	10016c34 <__aeabi_dadd+0x608>
10016aea:	2b1f      	cmp	r3, #31
10016aec:	dd00      	ble.n	10016af0 <__aeabi_dadd+0x4c4>
10016aee:	e0ae      	b.n	10016c4e <__aeabi_dadd+0x622>
10016af0:	2420      	movs	r4, #32
10016af2:	000f      	movs	r7, r1
10016af4:	1ae4      	subs	r4, r4, r3
10016af6:	40a7      	lsls	r7, r4
10016af8:	46b9      	mov	r9, r7
10016afa:	002f      	movs	r7, r5
10016afc:	40df      	lsrs	r7, r3
10016afe:	46b8      	mov	r8, r7
10016b00:	46a3      	mov	fp, r4
10016b02:	464f      	mov	r7, r9
10016b04:	4644      	mov	r4, r8
10016b06:	4327      	orrs	r7, r4
10016b08:	465c      	mov	r4, fp
10016b0a:	40a5      	lsls	r5, r4
10016b0c:	1e6c      	subs	r4, r5, #1
10016b0e:	41a5      	sbcs	r5, r4
10016b10:	40d9      	lsrs	r1, r3
10016b12:	433d      	orrs	r5, r7
10016b14:	18ad      	adds	r5, r5, r2
10016b16:	4295      	cmp	r5, r2
10016b18:	419b      	sbcs	r3, r3
10016b1a:	1809      	adds	r1, r1, r0
10016b1c:	425b      	negs	r3, r3
10016b1e:	1859      	adds	r1, r3, r1
10016b20:	4664      	mov	r4, ip
10016b22:	e66b      	b.n	100167fc <__aeabi_dadd+0x1d0>
10016b24:	000c      	movs	r4, r1
10016b26:	432c      	orrs	r4, r5
10016b28:	d115      	bne.n	10016b56 <__aeabi_dadd+0x52a>
10016b2a:	0001      	movs	r1, r0
10016b2c:	4311      	orrs	r1, r2
10016b2e:	d07b      	beq.n	10016c28 <__aeabi_dadd+0x5fc>
10016b30:	0001      	movs	r1, r0
10016b32:	0015      	movs	r5, r2
10016b34:	469a      	mov	sl, r3
10016b36:	4c51      	ldr	r4, [pc, #324]	; (10016c7c <__aeabi_dadd+0x650>)
10016b38:	e5a1      	b.n	1001667e <__aeabi_dadd+0x52>
10016b3a:	430d      	orrs	r5, r1
10016b3c:	1e69      	subs	r1, r5, #1
10016b3e:	418d      	sbcs	r5, r1
10016b40:	2100      	movs	r1, #0
10016b42:	b2ec      	uxtb	r4, r5
10016b44:	e72d      	b.n	100169a2 <__aeabi_dadd+0x376>
10016b46:	4c4d      	ldr	r4, [pc, #308]	; (10016c7c <__aeabi_dadd+0x650>)
10016b48:	45a4      	cmp	ip, r4
10016b4a:	d034      	beq.n	10016bb6 <__aeabi_dadd+0x58a>
10016b4c:	2480      	movs	r4, #128	; 0x80
10016b4e:	0424      	lsls	r4, r4, #16
10016b50:	425b      	negs	r3, r3
10016b52:	4321      	orrs	r1, r4
10016b54:	e7c6      	b.n	10016ae4 <__aeabi_dadd+0x4b8>
10016b56:	0004      	movs	r4, r0
10016b58:	4314      	orrs	r4, r2
10016b5a:	d04e      	beq.n	10016bfa <__aeabi_dadd+0x5ce>
10016b5c:	08ed      	lsrs	r5, r5, #3
10016b5e:	074c      	lsls	r4, r1, #29
10016b60:	432c      	orrs	r4, r5
10016b62:	2580      	movs	r5, #128	; 0x80
10016b64:	08c9      	lsrs	r1, r1, #3
10016b66:	032d      	lsls	r5, r5, #12
10016b68:	4229      	tst	r1, r5
10016b6a:	d008      	beq.n	10016b7e <__aeabi_dadd+0x552>
10016b6c:	08c6      	lsrs	r6, r0, #3
10016b6e:	422e      	tst	r6, r5
10016b70:	d105      	bne.n	10016b7e <__aeabi_dadd+0x552>
10016b72:	08d2      	lsrs	r2, r2, #3
10016b74:	0741      	lsls	r1, r0, #29
10016b76:	4311      	orrs	r1, r2
10016b78:	000c      	movs	r4, r1
10016b7a:	469a      	mov	sl, r3
10016b7c:	0031      	movs	r1, r6
10016b7e:	0f62      	lsrs	r2, r4, #29
10016b80:	00c9      	lsls	r1, r1, #3
10016b82:	00e5      	lsls	r5, r4, #3
10016b84:	4311      	orrs	r1, r2
10016b86:	4c3d      	ldr	r4, [pc, #244]	; (10016c7c <__aeabi_dadd+0x650>)
10016b88:	e579      	b.n	1001667e <__aeabi_dadd+0x52>
10016b8a:	0006      	movs	r6, r0
10016b8c:	4316      	orrs	r6, r2
10016b8e:	d100      	bne.n	10016b92 <__aeabi_dadd+0x566>
10016b90:	e575      	b.n	1001667e <__aeabi_dadd+0x52>
10016b92:	1aae      	subs	r6, r5, r2
10016b94:	46b0      	mov	r8, r6
10016b96:	4545      	cmp	r5, r8
10016b98:	41bf      	sbcs	r7, r7
10016b9a:	1a0e      	subs	r6, r1, r0
10016b9c:	427f      	negs	r7, r7
10016b9e:	1bf6      	subs	r6, r6, r7
10016ba0:	0237      	lsls	r7, r6, #8
10016ba2:	d400      	bmi.n	10016ba6 <__aeabi_dadd+0x57a>
10016ba4:	e5f4      	b.n	10016790 <__aeabi_dadd+0x164>
10016ba6:	1b55      	subs	r5, r2, r5
10016ba8:	42aa      	cmp	r2, r5
10016baa:	41b6      	sbcs	r6, r6
10016bac:	1a41      	subs	r1, r0, r1
10016bae:	4276      	negs	r6, r6
10016bb0:	1b89      	subs	r1, r1, r6
10016bb2:	469a      	mov	sl, r3
10016bb4:	e563      	b.n	1001667e <__aeabi_dadd+0x52>
10016bb6:	0001      	movs	r1, r0
10016bb8:	0015      	movs	r5, r2
10016bba:	4664      	mov	r4, ip
10016bbc:	e55f      	b.n	1001667e <__aeabi_dadd+0x52>
10016bbe:	2200      	movs	r2, #0
10016bc0:	2500      	movs	r5, #0
10016bc2:	e57b      	b.n	100166bc <__aeabi_dadd+0x90>
10016bc4:	2b00      	cmp	r3, #0
10016bc6:	d03b      	beq.n	10016c40 <__aeabi_dadd+0x614>
10016bc8:	0003      	movs	r3, r0
10016bca:	4313      	orrs	r3, r2
10016bcc:	d015      	beq.n	10016bfa <__aeabi_dadd+0x5ce>
10016bce:	08ed      	lsrs	r5, r5, #3
10016bd0:	074b      	lsls	r3, r1, #29
10016bd2:	432b      	orrs	r3, r5
10016bd4:	2580      	movs	r5, #128	; 0x80
10016bd6:	08c9      	lsrs	r1, r1, #3
10016bd8:	032d      	lsls	r5, r5, #12
10016bda:	4229      	tst	r1, r5
10016bdc:	d007      	beq.n	10016bee <__aeabi_dadd+0x5c2>
10016bde:	08c4      	lsrs	r4, r0, #3
10016be0:	422c      	tst	r4, r5
10016be2:	d104      	bne.n	10016bee <__aeabi_dadd+0x5c2>
10016be4:	0741      	lsls	r1, r0, #29
10016be6:	000b      	movs	r3, r1
10016be8:	0021      	movs	r1, r4
10016bea:	08d2      	lsrs	r2, r2, #3
10016bec:	4313      	orrs	r3, r2
10016bee:	00c9      	lsls	r1, r1, #3
10016bf0:	0f5a      	lsrs	r2, r3, #29
10016bf2:	4311      	orrs	r1, r2
10016bf4:	00dd      	lsls	r5, r3, #3
10016bf6:	4c21      	ldr	r4, [pc, #132]	; (10016c7c <__aeabi_dadd+0x650>)
10016bf8:	e541      	b.n	1001667e <__aeabi_dadd+0x52>
10016bfa:	4c20      	ldr	r4, [pc, #128]	; (10016c7c <__aeabi_dadd+0x650>)
10016bfc:	e53f      	b.n	1001667e <__aeabi_dadd+0x52>
10016bfe:	2000      	movs	r0, #0
10016c00:	e754      	b.n	10016aac <__aeabi_dadd+0x480>
10016c02:	2600      	movs	r6, #0
10016c04:	2500      	movs	r5, #0
10016c06:	e5d1      	b.n	100167ac <__aeabi_dadd+0x180>
10016c08:	0034      	movs	r4, r6
10016c0a:	000f      	movs	r7, r1
10016c0c:	3c20      	subs	r4, #32
10016c0e:	40e7      	lsrs	r7, r4
10016c10:	003c      	movs	r4, r7
10016c12:	2e20      	cmp	r6, #32
10016c14:	d02b      	beq.n	10016c6e <__aeabi_dadd+0x642>
10016c16:	2740      	movs	r7, #64	; 0x40
10016c18:	1bbe      	subs	r6, r7, r6
10016c1a:	40b1      	lsls	r1, r6
10016c1c:	430d      	orrs	r5, r1
10016c1e:	1e69      	subs	r1, r5, #1
10016c20:	418d      	sbcs	r5, r1
10016c22:	2100      	movs	r1, #0
10016c24:	432c      	orrs	r4, r5
10016c26:	e6bc      	b.n	100169a2 <__aeabi_dadd+0x376>
10016c28:	2180      	movs	r1, #128	; 0x80
10016c2a:	2600      	movs	r6, #0
10016c2c:	0309      	lsls	r1, r1, #12
10016c2e:	4c13      	ldr	r4, [pc, #76]	; (10016c7c <__aeabi_dadd+0x650>)
10016c30:	2500      	movs	r5, #0
10016c32:	e5bb      	b.n	100167ac <__aeabi_dadd+0x180>
10016c34:	430d      	orrs	r5, r1
10016c36:	1e69      	subs	r1, r5, #1
10016c38:	418d      	sbcs	r5, r1
10016c3a:	2100      	movs	r1, #0
10016c3c:	b2ed      	uxtb	r5, r5
10016c3e:	e769      	b.n	10016b14 <__aeabi_dadd+0x4e8>
10016c40:	0001      	movs	r1, r0
10016c42:	0015      	movs	r5, r2
10016c44:	4c0d      	ldr	r4, [pc, #52]	; (10016c7c <__aeabi_dadd+0x650>)
10016c46:	e51a      	b.n	1001667e <__aeabi_dadd+0x52>
10016c48:	0001      	movs	r1, r0
10016c4a:	0015      	movs	r5, r2
10016c4c:	e517      	b.n	1001667e <__aeabi_dadd+0x52>
10016c4e:	001c      	movs	r4, r3
10016c50:	000f      	movs	r7, r1
10016c52:	3c20      	subs	r4, #32
10016c54:	40e7      	lsrs	r7, r4
10016c56:	003c      	movs	r4, r7
10016c58:	2b20      	cmp	r3, #32
10016c5a:	d00c      	beq.n	10016c76 <__aeabi_dadd+0x64a>
10016c5c:	2740      	movs	r7, #64	; 0x40
10016c5e:	1afb      	subs	r3, r7, r3
10016c60:	4099      	lsls	r1, r3
10016c62:	430d      	orrs	r5, r1
10016c64:	1e69      	subs	r1, r5, #1
10016c66:	418d      	sbcs	r5, r1
10016c68:	2100      	movs	r1, #0
10016c6a:	4325      	orrs	r5, r4
10016c6c:	e752      	b.n	10016b14 <__aeabi_dadd+0x4e8>
10016c6e:	2100      	movs	r1, #0
10016c70:	e7d4      	b.n	10016c1c <__aeabi_dadd+0x5f0>
10016c72:	001d      	movs	r5, r3
10016c74:	e592      	b.n	1001679c <__aeabi_dadd+0x170>
10016c76:	2100      	movs	r1, #0
10016c78:	e7f3      	b.n	10016c62 <__aeabi_dadd+0x636>
10016c7a:	46c0      	nop			; (mov r8, r8)
10016c7c:	000007ff 	.word	0x000007ff
10016c80:	ff7fffff 	.word	0xff7fffff

10016c84 <__aeabi_ddiv>:
10016c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10016c86:	4656      	mov	r6, sl
10016c88:	464d      	mov	r5, r9
10016c8a:	4644      	mov	r4, r8
10016c8c:	465f      	mov	r7, fp
10016c8e:	b4f0      	push	{r4, r5, r6, r7}
10016c90:	001d      	movs	r5, r3
10016c92:	030e      	lsls	r6, r1, #12
10016c94:	004c      	lsls	r4, r1, #1
10016c96:	0fcb      	lsrs	r3, r1, #31
10016c98:	b087      	sub	sp, #28
10016c9a:	0007      	movs	r7, r0
10016c9c:	4692      	mov	sl, r2
10016c9e:	4681      	mov	r9, r0
10016ca0:	0b36      	lsrs	r6, r6, #12
10016ca2:	0d64      	lsrs	r4, r4, #21
10016ca4:	4698      	mov	r8, r3
10016ca6:	d06a      	beq.n	10016d7e <__aeabi_ddiv+0xfa>
10016ca8:	4b6d      	ldr	r3, [pc, #436]	; (10016e60 <__aeabi_ddiv+0x1dc>)
10016caa:	429c      	cmp	r4, r3
10016cac:	d035      	beq.n	10016d1a <__aeabi_ddiv+0x96>
10016cae:	2280      	movs	r2, #128	; 0x80
10016cb0:	0f43      	lsrs	r3, r0, #29
10016cb2:	0412      	lsls	r2, r2, #16
10016cb4:	4313      	orrs	r3, r2
10016cb6:	00f6      	lsls	r6, r6, #3
10016cb8:	431e      	orrs	r6, r3
10016cba:	00c3      	lsls	r3, r0, #3
10016cbc:	4699      	mov	r9, r3
10016cbe:	4b69      	ldr	r3, [pc, #420]	; (10016e64 <__aeabi_ddiv+0x1e0>)
10016cc0:	2700      	movs	r7, #0
10016cc2:	469c      	mov	ip, r3
10016cc4:	2300      	movs	r3, #0
10016cc6:	4464      	add	r4, ip
10016cc8:	9302      	str	r3, [sp, #8]
10016cca:	032b      	lsls	r3, r5, #12
10016ccc:	0068      	lsls	r0, r5, #1
10016cce:	0b1b      	lsrs	r3, r3, #12
10016cd0:	0fed      	lsrs	r5, r5, #31
10016cd2:	4651      	mov	r1, sl
10016cd4:	469b      	mov	fp, r3
10016cd6:	0d40      	lsrs	r0, r0, #21
10016cd8:	9500      	str	r5, [sp, #0]
10016cda:	d100      	bne.n	10016cde <__aeabi_ddiv+0x5a>
10016cdc:	e078      	b.n	10016dd0 <__aeabi_ddiv+0x14c>
10016cde:	4b60      	ldr	r3, [pc, #384]	; (10016e60 <__aeabi_ddiv+0x1dc>)
10016ce0:	4298      	cmp	r0, r3
10016ce2:	d06c      	beq.n	10016dbe <__aeabi_ddiv+0x13a>
10016ce4:	465b      	mov	r3, fp
10016ce6:	00da      	lsls	r2, r3, #3
10016ce8:	0f4b      	lsrs	r3, r1, #29
10016cea:	2180      	movs	r1, #128	; 0x80
10016cec:	0409      	lsls	r1, r1, #16
10016cee:	430b      	orrs	r3, r1
10016cf0:	4313      	orrs	r3, r2
10016cf2:	469b      	mov	fp, r3
10016cf4:	4653      	mov	r3, sl
10016cf6:	00d9      	lsls	r1, r3, #3
10016cf8:	4b5a      	ldr	r3, [pc, #360]	; (10016e64 <__aeabi_ddiv+0x1e0>)
10016cfa:	469c      	mov	ip, r3
10016cfc:	2300      	movs	r3, #0
10016cfe:	4460      	add	r0, ip
10016d00:	4642      	mov	r2, r8
10016d02:	1a20      	subs	r0, r4, r0
10016d04:	406a      	eors	r2, r5
10016d06:	4692      	mov	sl, r2
10016d08:	9001      	str	r0, [sp, #4]
10016d0a:	431f      	orrs	r7, r3
10016d0c:	2f0f      	cmp	r7, #15
10016d0e:	d900      	bls.n	10016d12 <__aeabi_ddiv+0x8e>
10016d10:	e0b0      	b.n	10016e74 <__aeabi_ddiv+0x1f0>
10016d12:	4855      	ldr	r0, [pc, #340]	; (10016e68 <__aeabi_ddiv+0x1e4>)
10016d14:	00bf      	lsls	r7, r7, #2
10016d16:	59c0      	ldr	r0, [r0, r7]
10016d18:	4687      	mov	pc, r0
10016d1a:	4337      	orrs	r7, r6
10016d1c:	d000      	beq.n	10016d20 <__aeabi_ddiv+0x9c>
10016d1e:	e088      	b.n	10016e32 <__aeabi_ddiv+0x1ae>
10016d20:	2300      	movs	r3, #0
10016d22:	4699      	mov	r9, r3
10016d24:	3302      	adds	r3, #2
10016d26:	2708      	movs	r7, #8
10016d28:	2600      	movs	r6, #0
10016d2a:	9302      	str	r3, [sp, #8]
10016d2c:	e7cd      	b.n	10016cca <__aeabi_ddiv+0x46>
10016d2e:	4643      	mov	r3, r8
10016d30:	46b3      	mov	fp, r6
10016d32:	4649      	mov	r1, r9
10016d34:	9300      	str	r3, [sp, #0]
10016d36:	9b02      	ldr	r3, [sp, #8]
10016d38:	9a00      	ldr	r2, [sp, #0]
10016d3a:	4692      	mov	sl, r2
10016d3c:	2b02      	cmp	r3, #2
10016d3e:	d000      	beq.n	10016d42 <__aeabi_ddiv+0xbe>
10016d40:	e1bf      	b.n	100170c2 <__aeabi_ddiv+0x43e>
10016d42:	2100      	movs	r1, #0
10016d44:	4653      	mov	r3, sl
10016d46:	2201      	movs	r2, #1
10016d48:	2600      	movs	r6, #0
10016d4a:	4689      	mov	r9, r1
10016d4c:	401a      	ands	r2, r3
10016d4e:	4b44      	ldr	r3, [pc, #272]	; (10016e60 <__aeabi_ddiv+0x1dc>)
10016d50:	2100      	movs	r1, #0
10016d52:	0336      	lsls	r6, r6, #12
10016d54:	0d0c      	lsrs	r4, r1, #20
10016d56:	0524      	lsls	r4, r4, #20
10016d58:	0b36      	lsrs	r6, r6, #12
10016d5a:	4326      	orrs	r6, r4
10016d5c:	4c43      	ldr	r4, [pc, #268]	; (10016e6c <__aeabi_ddiv+0x1e8>)
10016d5e:	051b      	lsls	r3, r3, #20
10016d60:	4026      	ands	r6, r4
10016d62:	431e      	orrs	r6, r3
10016d64:	0076      	lsls	r6, r6, #1
10016d66:	07d2      	lsls	r2, r2, #31
10016d68:	0876      	lsrs	r6, r6, #1
10016d6a:	4316      	orrs	r6, r2
10016d6c:	4648      	mov	r0, r9
10016d6e:	0031      	movs	r1, r6
10016d70:	b007      	add	sp, #28
10016d72:	bc3c      	pop	{r2, r3, r4, r5}
10016d74:	4690      	mov	r8, r2
10016d76:	4699      	mov	r9, r3
10016d78:	46a2      	mov	sl, r4
10016d7a:	46ab      	mov	fp, r5
10016d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016d7e:	0033      	movs	r3, r6
10016d80:	4303      	orrs	r3, r0
10016d82:	d04f      	beq.n	10016e24 <__aeabi_ddiv+0x1a0>
10016d84:	2e00      	cmp	r6, #0
10016d86:	d100      	bne.n	10016d8a <__aeabi_ddiv+0x106>
10016d88:	e1bc      	b.n	10017104 <__aeabi_ddiv+0x480>
10016d8a:	0030      	movs	r0, r6
10016d8c:	f001 fafc 	bl	10018388 <__clzsi2>
10016d90:	0003      	movs	r3, r0
10016d92:	3b0b      	subs	r3, #11
10016d94:	2b1c      	cmp	r3, #28
10016d96:	dd00      	ble.n	10016d9a <__aeabi_ddiv+0x116>
10016d98:	e1ad      	b.n	100170f6 <__aeabi_ddiv+0x472>
10016d9a:	221d      	movs	r2, #29
10016d9c:	0001      	movs	r1, r0
10016d9e:	1ad3      	subs	r3, r2, r3
10016da0:	3908      	subs	r1, #8
10016da2:	003a      	movs	r2, r7
10016da4:	408f      	lsls	r7, r1
10016da6:	408e      	lsls	r6, r1
10016da8:	40da      	lsrs	r2, r3
10016daa:	46b9      	mov	r9, r7
10016dac:	4316      	orrs	r6, r2
10016dae:	4b30      	ldr	r3, [pc, #192]	; (10016e70 <__aeabi_ddiv+0x1ec>)
10016db0:	2700      	movs	r7, #0
10016db2:	469c      	mov	ip, r3
10016db4:	2300      	movs	r3, #0
10016db6:	4460      	add	r0, ip
10016db8:	4244      	negs	r4, r0
10016dba:	9302      	str	r3, [sp, #8]
10016dbc:	e785      	b.n	10016cca <__aeabi_ddiv+0x46>
10016dbe:	4653      	mov	r3, sl
10016dc0:	465a      	mov	r2, fp
10016dc2:	4313      	orrs	r3, r2
10016dc4:	d12c      	bne.n	10016e20 <__aeabi_ddiv+0x19c>
10016dc6:	2300      	movs	r3, #0
10016dc8:	2100      	movs	r1, #0
10016dca:	469b      	mov	fp, r3
10016dcc:	3302      	adds	r3, #2
10016dce:	e797      	b.n	10016d00 <__aeabi_ddiv+0x7c>
10016dd0:	430b      	orrs	r3, r1
10016dd2:	d020      	beq.n	10016e16 <__aeabi_ddiv+0x192>
10016dd4:	465b      	mov	r3, fp
10016dd6:	2b00      	cmp	r3, #0
10016dd8:	d100      	bne.n	10016ddc <__aeabi_ddiv+0x158>
10016dda:	e19e      	b.n	1001711a <__aeabi_ddiv+0x496>
10016ddc:	4658      	mov	r0, fp
10016dde:	f001 fad3 	bl	10018388 <__clzsi2>
10016de2:	0003      	movs	r3, r0
10016de4:	3b0b      	subs	r3, #11
10016de6:	2b1c      	cmp	r3, #28
10016de8:	dd00      	ble.n	10016dec <__aeabi_ddiv+0x168>
10016dea:	e18f      	b.n	1001710c <__aeabi_ddiv+0x488>
10016dec:	0002      	movs	r2, r0
10016dee:	4659      	mov	r1, fp
10016df0:	3a08      	subs	r2, #8
10016df2:	4091      	lsls	r1, r2
10016df4:	468b      	mov	fp, r1
10016df6:	211d      	movs	r1, #29
10016df8:	1acb      	subs	r3, r1, r3
10016dfa:	4651      	mov	r1, sl
10016dfc:	40d9      	lsrs	r1, r3
10016dfe:	000b      	movs	r3, r1
10016e00:	4659      	mov	r1, fp
10016e02:	430b      	orrs	r3, r1
10016e04:	4651      	mov	r1, sl
10016e06:	469b      	mov	fp, r3
10016e08:	4091      	lsls	r1, r2
10016e0a:	4b19      	ldr	r3, [pc, #100]	; (10016e70 <__aeabi_ddiv+0x1ec>)
10016e0c:	469c      	mov	ip, r3
10016e0e:	4460      	add	r0, ip
10016e10:	4240      	negs	r0, r0
10016e12:	2300      	movs	r3, #0
10016e14:	e774      	b.n	10016d00 <__aeabi_ddiv+0x7c>
10016e16:	2300      	movs	r3, #0
10016e18:	2100      	movs	r1, #0
10016e1a:	469b      	mov	fp, r3
10016e1c:	3301      	adds	r3, #1
10016e1e:	e76f      	b.n	10016d00 <__aeabi_ddiv+0x7c>
10016e20:	2303      	movs	r3, #3
10016e22:	e76d      	b.n	10016d00 <__aeabi_ddiv+0x7c>
10016e24:	2300      	movs	r3, #0
10016e26:	4699      	mov	r9, r3
10016e28:	3301      	adds	r3, #1
10016e2a:	2704      	movs	r7, #4
10016e2c:	2600      	movs	r6, #0
10016e2e:	9302      	str	r3, [sp, #8]
10016e30:	e74b      	b.n	10016cca <__aeabi_ddiv+0x46>
10016e32:	2303      	movs	r3, #3
10016e34:	270c      	movs	r7, #12
10016e36:	9302      	str	r3, [sp, #8]
10016e38:	e747      	b.n	10016cca <__aeabi_ddiv+0x46>
10016e3a:	2201      	movs	r2, #1
10016e3c:	1ad5      	subs	r5, r2, r3
10016e3e:	2d38      	cmp	r5, #56	; 0x38
10016e40:	dc00      	bgt.n	10016e44 <__aeabi_ddiv+0x1c0>
10016e42:	e1b0      	b.n	100171a6 <__aeabi_ddiv+0x522>
10016e44:	4653      	mov	r3, sl
10016e46:	401a      	ands	r2, r3
10016e48:	2100      	movs	r1, #0
10016e4a:	2300      	movs	r3, #0
10016e4c:	2600      	movs	r6, #0
10016e4e:	4689      	mov	r9, r1
10016e50:	e77e      	b.n	10016d50 <__aeabi_ddiv+0xcc>
10016e52:	2300      	movs	r3, #0
10016e54:	2680      	movs	r6, #128	; 0x80
10016e56:	4699      	mov	r9, r3
10016e58:	2200      	movs	r2, #0
10016e5a:	0336      	lsls	r6, r6, #12
10016e5c:	4b00      	ldr	r3, [pc, #0]	; (10016e60 <__aeabi_ddiv+0x1dc>)
10016e5e:	e777      	b.n	10016d50 <__aeabi_ddiv+0xcc>
10016e60:	000007ff 	.word	0x000007ff
10016e64:	fffffc01 	.word	0xfffffc01
10016e68:	1001b7dc 	.word	0x1001b7dc
10016e6c:	800fffff 	.word	0x800fffff
10016e70:	000003f3 	.word	0x000003f3
10016e74:	455e      	cmp	r6, fp
10016e76:	d900      	bls.n	10016e7a <__aeabi_ddiv+0x1f6>
10016e78:	e172      	b.n	10017160 <__aeabi_ddiv+0x4dc>
10016e7a:	d100      	bne.n	10016e7e <__aeabi_ddiv+0x1fa>
10016e7c:	e16d      	b.n	1001715a <__aeabi_ddiv+0x4d6>
10016e7e:	9b01      	ldr	r3, [sp, #4]
10016e80:	464d      	mov	r5, r9
10016e82:	3b01      	subs	r3, #1
10016e84:	9301      	str	r3, [sp, #4]
10016e86:	2300      	movs	r3, #0
10016e88:	0034      	movs	r4, r6
10016e8a:	9302      	str	r3, [sp, #8]
10016e8c:	465b      	mov	r3, fp
10016e8e:	021e      	lsls	r6, r3, #8
10016e90:	0e0b      	lsrs	r3, r1, #24
10016e92:	431e      	orrs	r6, r3
10016e94:	020b      	lsls	r3, r1, #8
10016e96:	9303      	str	r3, [sp, #12]
10016e98:	0c33      	lsrs	r3, r6, #16
10016e9a:	4699      	mov	r9, r3
10016e9c:	0433      	lsls	r3, r6, #16
10016e9e:	0c1b      	lsrs	r3, r3, #16
10016ea0:	4649      	mov	r1, r9
10016ea2:	0020      	movs	r0, r4
10016ea4:	9300      	str	r3, [sp, #0]
10016ea6:	f7fe fa2f 	bl	10015308 <__aeabi_uidiv>
10016eaa:	9b00      	ldr	r3, [sp, #0]
10016eac:	0037      	movs	r7, r6
10016eae:	4343      	muls	r3, r0
10016eb0:	0006      	movs	r6, r0
10016eb2:	4649      	mov	r1, r9
10016eb4:	0020      	movs	r0, r4
10016eb6:	4698      	mov	r8, r3
10016eb8:	f7fe faac 	bl	10015414 <__aeabi_uidivmod>
10016ebc:	0c2c      	lsrs	r4, r5, #16
10016ebe:	0409      	lsls	r1, r1, #16
10016ec0:	430c      	orrs	r4, r1
10016ec2:	45a0      	cmp	r8, r4
10016ec4:	d909      	bls.n	10016eda <__aeabi_ddiv+0x256>
10016ec6:	19e4      	adds	r4, r4, r7
10016ec8:	1e73      	subs	r3, r6, #1
10016eca:	42a7      	cmp	r7, r4
10016ecc:	d900      	bls.n	10016ed0 <__aeabi_ddiv+0x24c>
10016ece:	e15c      	b.n	1001718a <__aeabi_ddiv+0x506>
10016ed0:	45a0      	cmp	r8, r4
10016ed2:	d800      	bhi.n	10016ed6 <__aeabi_ddiv+0x252>
10016ed4:	e159      	b.n	1001718a <__aeabi_ddiv+0x506>
10016ed6:	3e02      	subs	r6, #2
10016ed8:	19e4      	adds	r4, r4, r7
10016eda:	4643      	mov	r3, r8
10016edc:	1ae4      	subs	r4, r4, r3
10016ede:	4649      	mov	r1, r9
10016ee0:	0020      	movs	r0, r4
10016ee2:	f7fe fa11 	bl	10015308 <__aeabi_uidiv>
10016ee6:	0003      	movs	r3, r0
10016ee8:	9a00      	ldr	r2, [sp, #0]
10016eea:	4680      	mov	r8, r0
10016eec:	4353      	muls	r3, r2
10016eee:	4649      	mov	r1, r9
10016ef0:	0020      	movs	r0, r4
10016ef2:	469b      	mov	fp, r3
10016ef4:	f7fe fa8e 	bl	10015414 <__aeabi_uidivmod>
10016ef8:	042a      	lsls	r2, r5, #16
10016efa:	0409      	lsls	r1, r1, #16
10016efc:	0c12      	lsrs	r2, r2, #16
10016efe:	430a      	orrs	r2, r1
10016f00:	4593      	cmp	fp, r2
10016f02:	d90d      	bls.n	10016f20 <__aeabi_ddiv+0x29c>
10016f04:	4643      	mov	r3, r8
10016f06:	19d2      	adds	r2, r2, r7
10016f08:	3b01      	subs	r3, #1
10016f0a:	4297      	cmp	r7, r2
10016f0c:	d900      	bls.n	10016f10 <__aeabi_ddiv+0x28c>
10016f0e:	e13a      	b.n	10017186 <__aeabi_ddiv+0x502>
10016f10:	4593      	cmp	fp, r2
10016f12:	d800      	bhi.n	10016f16 <__aeabi_ddiv+0x292>
10016f14:	e137      	b.n	10017186 <__aeabi_ddiv+0x502>
10016f16:	2302      	movs	r3, #2
10016f18:	425b      	negs	r3, r3
10016f1a:	469c      	mov	ip, r3
10016f1c:	19d2      	adds	r2, r2, r7
10016f1e:	44e0      	add	r8, ip
10016f20:	465b      	mov	r3, fp
10016f22:	1ad2      	subs	r2, r2, r3
10016f24:	4643      	mov	r3, r8
10016f26:	0436      	lsls	r6, r6, #16
10016f28:	4333      	orrs	r3, r6
10016f2a:	469b      	mov	fp, r3
10016f2c:	9903      	ldr	r1, [sp, #12]
10016f2e:	0c18      	lsrs	r0, r3, #16
10016f30:	0c0b      	lsrs	r3, r1, #16
10016f32:	001d      	movs	r5, r3
10016f34:	9305      	str	r3, [sp, #20]
10016f36:	0409      	lsls	r1, r1, #16
10016f38:	465b      	mov	r3, fp
10016f3a:	0c09      	lsrs	r1, r1, #16
10016f3c:	000c      	movs	r4, r1
10016f3e:	041b      	lsls	r3, r3, #16
10016f40:	0c1b      	lsrs	r3, r3, #16
10016f42:	4344      	muls	r4, r0
10016f44:	9104      	str	r1, [sp, #16]
10016f46:	4359      	muls	r1, r3
10016f48:	436b      	muls	r3, r5
10016f4a:	4368      	muls	r0, r5
10016f4c:	191b      	adds	r3, r3, r4
10016f4e:	0c0d      	lsrs	r5, r1, #16
10016f50:	18eb      	adds	r3, r5, r3
10016f52:	429c      	cmp	r4, r3
10016f54:	d903      	bls.n	10016f5e <__aeabi_ddiv+0x2da>
10016f56:	2480      	movs	r4, #128	; 0x80
10016f58:	0264      	lsls	r4, r4, #9
10016f5a:	46a4      	mov	ip, r4
10016f5c:	4460      	add	r0, ip
10016f5e:	0c1c      	lsrs	r4, r3, #16
10016f60:	0409      	lsls	r1, r1, #16
10016f62:	041b      	lsls	r3, r3, #16
10016f64:	0c09      	lsrs	r1, r1, #16
10016f66:	1820      	adds	r0, r4, r0
10016f68:	185d      	adds	r5, r3, r1
10016f6a:	4282      	cmp	r2, r0
10016f6c:	d200      	bcs.n	10016f70 <__aeabi_ddiv+0x2ec>
10016f6e:	e0de      	b.n	1001712e <__aeabi_ddiv+0x4aa>
10016f70:	d100      	bne.n	10016f74 <__aeabi_ddiv+0x2f0>
10016f72:	e0d7      	b.n	10017124 <__aeabi_ddiv+0x4a0>
10016f74:	1a16      	subs	r6, r2, r0
10016f76:	9b02      	ldr	r3, [sp, #8]
10016f78:	469c      	mov	ip, r3
10016f7a:	1b5d      	subs	r5, r3, r5
10016f7c:	45ac      	cmp	ip, r5
10016f7e:	419b      	sbcs	r3, r3
10016f80:	425b      	negs	r3, r3
10016f82:	1af6      	subs	r6, r6, r3
10016f84:	42b7      	cmp	r7, r6
10016f86:	d100      	bne.n	10016f8a <__aeabi_ddiv+0x306>
10016f88:	e106      	b.n	10017198 <__aeabi_ddiv+0x514>
10016f8a:	4649      	mov	r1, r9
10016f8c:	0030      	movs	r0, r6
10016f8e:	f7fe f9bb 	bl	10015308 <__aeabi_uidiv>
10016f92:	9b00      	ldr	r3, [sp, #0]
10016f94:	0004      	movs	r4, r0
10016f96:	4343      	muls	r3, r0
10016f98:	4649      	mov	r1, r9
10016f9a:	0030      	movs	r0, r6
10016f9c:	4698      	mov	r8, r3
10016f9e:	f7fe fa39 	bl	10015414 <__aeabi_uidivmod>
10016fa2:	0c2e      	lsrs	r6, r5, #16
10016fa4:	0409      	lsls	r1, r1, #16
10016fa6:	430e      	orrs	r6, r1
10016fa8:	45b0      	cmp	r8, r6
10016faa:	d909      	bls.n	10016fc0 <__aeabi_ddiv+0x33c>
10016fac:	19f6      	adds	r6, r6, r7
10016fae:	1e63      	subs	r3, r4, #1
10016fb0:	42b7      	cmp	r7, r6
10016fb2:	d900      	bls.n	10016fb6 <__aeabi_ddiv+0x332>
10016fb4:	e0f3      	b.n	1001719e <__aeabi_ddiv+0x51a>
10016fb6:	45b0      	cmp	r8, r6
10016fb8:	d800      	bhi.n	10016fbc <__aeabi_ddiv+0x338>
10016fba:	e0f0      	b.n	1001719e <__aeabi_ddiv+0x51a>
10016fbc:	3c02      	subs	r4, #2
10016fbe:	19f6      	adds	r6, r6, r7
10016fc0:	4643      	mov	r3, r8
10016fc2:	1af3      	subs	r3, r6, r3
10016fc4:	4649      	mov	r1, r9
10016fc6:	0018      	movs	r0, r3
10016fc8:	9302      	str	r3, [sp, #8]
10016fca:	f7fe f99d 	bl	10015308 <__aeabi_uidiv>
10016fce:	9b00      	ldr	r3, [sp, #0]
10016fd0:	0006      	movs	r6, r0
10016fd2:	4343      	muls	r3, r0
10016fd4:	4649      	mov	r1, r9
10016fd6:	9802      	ldr	r0, [sp, #8]
10016fd8:	4698      	mov	r8, r3
10016fda:	f7fe fa1b 	bl	10015414 <__aeabi_uidivmod>
10016fde:	042d      	lsls	r5, r5, #16
10016fe0:	0409      	lsls	r1, r1, #16
10016fe2:	0c2d      	lsrs	r5, r5, #16
10016fe4:	430d      	orrs	r5, r1
10016fe6:	45a8      	cmp	r8, r5
10016fe8:	d909      	bls.n	10016ffe <__aeabi_ddiv+0x37a>
10016fea:	19ed      	adds	r5, r5, r7
10016fec:	1e73      	subs	r3, r6, #1
10016fee:	42af      	cmp	r7, r5
10016ff0:	d900      	bls.n	10016ff4 <__aeabi_ddiv+0x370>
10016ff2:	e0d6      	b.n	100171a2 <__aeabi_ddiv+0x51e>
10016ff4:	45a8      	cmp	r8, r5
10016ff6:	d800      	bhi.n	10016ffa <__aeabi_ddiv+0x376>
10016ff8:	e0d3      	b.n	100171a2 <__aeabi_ddiv+0x51e>
10016ffa:	3e02      	subs	r6, #2
10016ffc:	19ed      	adds	r5, r5, r7
10016ffe:	0424      	lsls	r4, r4, #16
10017000:	0021      	movs	r1, r4
10017002:	4643      	mov	r3, r8
10017004:	4331      	orrs	r1, r6
10017006:	9e04      	ldr	r6, [sp, #16]
10017008:	9a05      	ldr	r2, [sp, #20]
1001700a:	0030      	movs	r0, r6
1001700c:	1aed      	subs	r5, r5, r3
1001700e:	040b      	lsls	r3, r1, #16
10017010:	0c0c      	lsrs	r4, r1, #16
10017012:	0c1b      	lsrs	r3, r3, #16
10017014:	4358      	muls	r0, r3
10017016:	4366      	muls	r6, r4
10017018:	4353      	muls	r3, r2
1001701a:	4354      	muls	r4, r2
1001701c:	199a      	adds	r2, r3, r6
1001701e:	0c03      	lsrs	r3, r0, #16
10017020:	189b      	adds	r3, r3, r2
10017022:	429e      	cmp	r6, r3
10017024:	d903      	bls.n	1001702e <__aeabi_ddiv+0x3aa>
10017026:	2280      	movs	r2, #128	; 0x80
10017028:	0252      	lsls	r2, r2, #9
1001702a:	4694      	mov	ip, r2
1001702c:	4464      	add	r4, ip
1001702e:	0c1a      	lsrs	r2, r3, #16
10017030:	0400      	lsls	r0, r0, #16
10017032:	041b      	lsls	r3, r3, #16
10017034:	0c00      	lsrs	r0, r0, #16
10017036:	1914      	adds	r4, r2, r4
10017038:	181b      	adds	r3, r3, r0
1001703a:	42a5      	cmp	r5, r4
1001703c:	d350      	bcc.n	100170e0 <__aeabi_ddiv+0x45c>
1001703e:	d04d      	beq.n	100170dc <__aeabi_ddiv+0x458>
10017040:	2301      	movs	r3, #1
10017042:	4319      	orrs	r1, r3
10017044:	4a96      	ldr	r2, [pc, #600]	; (100172a0 <__aeabi_ddiv+0x61c>)
10017046:	9b01      	ldr	r3, [sp, #4]
10017048:	4694      	mov	ip, r2
1001704a:	4463      	add	r3, ip
1001704c:	2b00      	cmp	r3, #0
1001704e:	dc00      	bgt.n	10017052 <__aeabi_ddiv+0x3ce>
10017050:	e6f3      	b.n	10016e3a <__aeabi_ddiv+0x1b6>
10017052:	074a      	lsls	r2, r1, #29
10017054:	d009      	beq.n	1001706a <__aeabi_ddiv+0x3e6>
10017056:	220f      	movs	r2, #15
10017058:	400a      	ands	r2, r1
1001705a:	2a04      	cmp	r2, #4
1001705c:	d005      	beq.n	1001706a <__aeabi_ddiv+0x3e6>
1001705e:	1d0a      	adds	r2, r1, #4
10017060:	428a      	cmp	r2, r1
10017062:	4189      	sbcs	r1, r1
10017064:	4249      	negs	r1, r1
10017066:	448b      	add	fp, r1
10017068:	0011      	movs	r1, r2
1001706a:	465a      	mov	r2, fp
1001706c:	01d2      	lsls	r2, r2, #7
1001706e:	d508      	bpl.n	10017082 <__aeabi_ddiv+0x3fe>
10017070:	465a      	mov	r2, fp
10017072:	4b8c      	ldr	r3, [pc, #560]	; (100172a4 <__aeabi_ddiv+0x620>)
10017074:	401a      	ands	r2, r3
10017076:	4693      	mov	fp, r2
10017078:	2280      	movs	r2, #128	; 0x80
1001707a:	00d2      	lsls	r2, r2, #3
1001707c:	4694      	mov	ip, r2
1001707e:	9b01      	ldr	r3, [sp, #4]
10017080:	4463      	add	r3, ip
10017082:	4a89      	ldr	r2, [pc, #548]	; (100172a8 <__aeabi_ddiv+0x624>)
10017084:	4293      	cmp	r3, r2
10017086:	dd00      	ble.n	1001708a <__aeabi_ddiv+0x406>
10017088:	e65b      	b.n	10016d42 <__aeabi_ddiv+0xbe>
1001708a:	465a      	mov	r2, fp
1001708c:	08c9      	lsrs	r1, r1, #3
1001708e:	0750      	lsls	r0, r2, #29
10017090:	4308      	orrs	r0, r1
10017092:	0256      	lsls	r6, r2, #9
10017094:	4651      	mov	r1, sl
10017096:	2201      	movs	r2, #1
10017098:	055b      	lsls	r3, r3, #21
1001709a:	4681      	mov	r9, r0
1001709c:	0b36      	lsrs	r6, r6, #12
1001709e:	0d5b      	lsrs	r3, r3, #21
100170a0:	400a      	ands	r2, r1
100170a2:	e655      	b.n	10016d50 <__aeabi_ddiv+0xcc>
100170a4:	2380      	movs	r3, #128	; 0x80
100170a6:	031b      	lsls	r3, r3, #12
100170a8:	421e      	tst	r6, r3
100170aa:	d011      	beq.n	100170d0 <__aeabi_ddiv+0x44c>
100170ac:	465a      	mov	r2, fp
100170ae:	421a      	tst	r2, r3
100170b0:	d10e      	bne.n	100170d0 <__aeabi_ddiv+0x44c>
100170b2:	465e      	mov	r6, fp
100170b4:	431e      	orrs	r6, r3
100170b6:	0336      	lsls	r6, r6, #12
100170b8:	0b36      	lsrs	r6, r6, #12
100170ba:	002a      	movs	r2, r5
100170bc:	4689      	mov	r9, r1
100170be:	4b7b      	ldr	r3, [pc, #492]	; (100172ac <__aeabi_ddiv+0x628>)
100170c0:	e646      	b.n	10016d50 <__aeabi_ddiv+0xcc>
100170c2:	2b03      	cmp	r3, #3
100170c4:	d100      	bne.n	100170c8 <__aeabi_ddiv+0x444>
100170c6:	e0e1      	b.n	1001728c <__aeabi_ddiv+0x608>
100170c8:	2b01      	cmp	r3, #1
100170ca:	d1bb      	bne.n	10017044 <__aeabi_ddiv+0x3c0>
100170cc:	401a      	ands	r2, r3
100170ce:	e6bb      	b.n	10016e48 <__aeabi_ddiv+0x1c4>
100170d0:	431e      	orrs	r6, r3
100170d2:	0336      	lsls	r6, r6, #12
100170d4:	0b36      	lsrs	r6, r6, #12
100170d6:	4642      	mov	r2, r8
100170d8:	4b74      	ldr	r3, [pc, #464]	; (100172ac <__aeabi_ddiv+0x628>)
100170da:	e639      	b.n	10016d50 <__aeabi_ddiv+0xcc>
100170dc:	2b00      	cmp	r3, #0
100170de:	d0b1      	beq.n	10017044 <__aeabi_ddiv+0x3c0>
100170e0:	197d      	adds	r5, r7, r5
100170e2:	1e4a      	subs	r2, r1, #1
100170e4:	42af      	cmp	r7, r5
100170e6:	d952      	bls.n	1001718e <__aeabi_ddiv+0x50a>
100170e8:	0011      	movs	r1, r2
100170ea:	42a5      	cmp	r5, r4
100170ec:	d1a8      	bne.n	10017040 <__aeabi_ddiv+0x3bc>
100170ee:	9a03      	ldr	r2, [sp, #12]
100170f0:	429a      	cmp	r2, r3
100170f2:	d1a5      	bne.n	10017040 <__aeabi_ddiv+0x3bc>
100170f4:	e7a6      	b.n	10017044 <__aeabi_ddiv+0x3c0>
100170f6:	0003      	movs	r3, r0
100170f8:	003e      	movs	r6, r7
100170fa:	3b28      	subs	r3, #40	; 0x28
100170fc:	409e      	lsls	r6, r3
100170fe:	2300      	movs	r3, #0
10017100:	4699      	mov	r9, r3
10017102:	e654      	b.n	10016dae <__aeabi_ddiv+0x12a>
10017104:	f001 f940 	bl	10018388 <__clzsi2>
10017108:	3020      	adds	r0, #32
1001710a:	e641      	b.n	10016d90 <__aeabi_ddiv+0x10c>
1001710c:	0003      	movs	r3, r0
1001710e:	4652      	mov	r2, sl
10017110:	3b28      	subs	r3, #40	; 0x28
10017112:	409a      	lsls	r2, r3
10017114:	2100      	movs	r1, #0
10017116:	4693      	mov	fp, r2
10017118:	e677      	b.n	10016e0a <__aeabi_ddiv+0x186>
1001711a:	4650      	mov	r0, sl
1001711c:	f001 f934 	bl	10018388 <__clzsi2>
10017120:	3020      	adds	r0, #32
10017122:	e65e      	b.n	10016de2 <__aeabi_ddiv+0x15e>
10017124:	9b02      	ldr	r3, [sp, #8]
10017126:	2600      	movs	r6, #0
10017128:	42ab      	cmp	r3, r5
1001712a:	d300      	bcc.n	1001712e <__aeabi_ddiv+0x4aa>
1001712c:	e723      	b.n	10016f76 <__aeabi_ddiv+0x2f2>
1001712e:	9e03      	ldr	r6, [sp, #12]
10017130:	9902      	ldr	r1, [sp, #8]
10017132:	46b4      	mov	ip, r6
10017134:	4461      	add	r1, ip
10017136:	4688      	mov	r8, r1
10017138:	45b0      	cmp	r8, r6
1001713a:	41b6      	sbcs	r6, r6
1001713c:	465b      	mov	r3, fp
1001713e:	4276      	negs	r6, r6
10017140:	19f6      	adds	r6, r6, r7
10017142:	18b2      	adds	r2, r6, r2
10017144:	3b01      	subs	r3, #1
10017146:	9102      	str	r1, [sp, #8]
10017148:	4297      	cmp	r7, r2
1001714a:	d213      	bcs.n	10017174 <__aeabi_ddiv+0x4f0>
1001714c:	4290      	cmp	r0, r2
1001714e:	d84f      	bhi.n	100171f0 <__aeabi_ddiv+0x56c>
10017150:	d100      	bne.n	10017154 <__aeabi_ddiv+0x4d0>
10017152:	e08e      	b.n	10017272 <__aeabi_ddiv+0x5ee>
10017154:	1a16      	subs	r6, r2, r0
10017156:	469b      	mov	fp, r3
10017158:	e70d      	b.n	10016f76 <__aeabi_ddiv+0x2f2>
1001715a:	4589      	cmp	r9, r1
1001715c:	d200      	bcs.n	10017160 <__aeabi_ddiv+0x4dc>
1001715e:	e68e      	b.n	10016e7e <__aeabi_ddiv+0x1fa>
10017160:	0874      	lsrs	r4, r6, #1
10017162:	464b      	mov	r3, r9
10017164:	07f6      	lsls	r6, r6, #31
10017166:	0035      	movs	r5, r6
10017168:	085b      	lsrs	r3, r3, #1
1001716a:	431d      	orrs	r5, r3
1001716c:	464b      	mov	r3, r9
1001716e:	07db      	lsls	r3, r3, #31
10017170:	9302      	str	r3, [sp, #8]
10017172:	e68b      	b.n	10016e8c <__aeabi_ddiv+0x208>
10017174:	4297      	cmp	r7, r2
10017176:	d1ed      	bne.n	10017154 <__aeabi_ddiv+0x4d0>
10017178:	9903      	ldr	r1, [sp, #12]
1001717a:	9c02      	ldr	r4, [sp, #8]
1001717c:	42a1      	cmp	r1, r4
1001717e:	d9e5      	bls.n	1001714c <__aeabi_ddiv+0x4c8>
10017180:	1a3e      	subs	r6, r7, r0
10017182:	469b      	mov	fp, r3
10017184:	e6f7      	b.n	10016f76 <__aeabi_ddiv+0x2f2>
10017186:	4698      	mov	r8, r3
10017188:	e6ca      	b.n	10016f20 <__aeabi_ddiv+0x29c>
1001718a:	001e      	movs	r6, r3
1001718c:	e6a5      	b.n	10016eda <__aeabi_ddiv+0x256>
1001718e:	42ac      	cmp	r4, r5
10017190:	d83e      	bhi.n	10017210 <__aeabi_ddiv+0x58c>
10017192:	d074      	beq.n	1001727e <__aeabi_ddiv+0x5fa>
10017194:	0011      	movs	r1, r2
10017196:	e753      	b.n	10017040 <__aeabi_ddiv+0x3bc>
10017198:	2101      	movs	r1, #1
1001719a:	4249      	negs	r1, r1
1001719c:	e752      	b.n	10017044 <__aeabi_ddiv+0x3c0>
1001719e:	001c      	movs	r4, r3
100171a0:	e70e      	b.n	10016fc0 <__aeabi_ddiv+0x33c>
100171a2:	001e      	movs	r6, r3
100171a4:	e72b      	b.n	10016ffe <__aeabi_ddiv+0x37a>
100171a6:	2d1f      	cmp	r5, #31
100171a8:	dc3c      	bgt.n	10017224 <__aeabi_ddiv+0x5a0>
100171aa:	2320      	movs	r3, #32
100171ac:	000a      	movs	r2, r1
100171ae:	4658      	mov	r0, fp
100171b0:	1b5b      	subs	r3, r3, r5
100171b2:	4098      	lsls	r0, r3
100171b4:	40ea      	lsrs	r2, r5
100171b6:	4099      	lsls	r1, r3
100171b8:	4302      	orrs	r2, r0
100171ba:	1e48      	subs	r0, r1, #1
100171bc:	4181      	sbcs	r1, r0
100171be:	465e      	mov	r6, fp
100171c0:	4311      	orrs	r1, r2
100171c2:	40ee      	lsrs	r6, r5
100171c4:	074b      	lsls	r3, r1, #29
100171c6:	d009      	beq.n	100171dc <__aeabi_ddiv+0x558>
100171c8:	230f      	movs	r3, #15
100171ca:	400b      	ands	r3, r1
100171cc:	2b04      	cmp	r3, #4
100171ce:	d005      	beq.n	100171dc <__aeabi_ddiv+0x558>
100171d0:	000b      	movs	r3, r1
100171d2:	1d19      	adds	r1, r3, #4
100171d4:	4299      	cmp	r1, r3
100171d6:	419b      	sbcs	r3, r3
100171d8:	425b      	negs	r3, r3
100171da:	18f6      	adds	r6, r6, r3
100171dc:	0233      	lsls	r3, r6, #8
100171de:	d53c      	bpl.n	1001725a <__aeabi_ddiv+0x5d6>
100171e0:	4653      	mov	r3, sl
100171e2:	2201      	movs	r2, #1
100171e4:	2100      	movs	r1, #0
100171e6:	401a      	ands	r2, r3
100171e8:	2600      	movs	r6, #0
100171ea:	2301      	movs	r3, #1
100171ec:	4689      	mov	r9, r1
100171ee:	e5af      	b.n	10016d50 <__aeabi_ddiv+0xcc>
100171f0:	2302      	movs	r3, #2
100171f2:	425b      	negs	r3, r3
100171f4:	469c      	mov	ip, r3
100171f6:	9c03      	ldr	r4, [sp, #12]
100171f8:	44e3      	add	fp, ip
100171fa:	46a4      	mov	ip, r4
100171fc:	9b02      	ldr	r3, [sp, #8]
100171fe:	4463      	add	r3, ip
10017200:	4698      	mov	r8, r3
10017202:	45a0      	cmp	r8, r4
10017204:	41b6      	sbcs	r6, r6
10017206:	4276      	negs	r6, r6
10017208:	19f6      	adds	r6, r6, r7
1001720a:	9302      	str	r3, [sp, #8]
1001720c:	18b2      	adds	r2, r6, r2
1001720e:	e6b1      	b.n	10016f74 <__aeabi_ddiv+0x2f0>
10017210:	9803      	ldr	r0, [sp, #12]
10017212:	1e8a      	subs	r2, r1, #2
10017214:	0041      	lsls	r1, r0, #1
10017216:	4281      	cmp	r1, r0
10017218:	41b6      	sbcs	r6, r6
1001721a:	4276      	negs	r6, r6
1001721c:	19f6      	adds	r6, r6, r7
1001721e:	19ad      	adds	r5, r5, r6
10017220:	9103      	str	r1, [sp, #12]
10017222:	e761      	b.n	100170e8 <__aeabi_ddiv+0x464>
10017224:	221f      	movs	r2, #31
10017226:	4252      	negs	r2, r2
10017228:	1ad3      	subs	r3, r2, r3
1001722a:	465a      	mov	r2, fp
1001722c:	40da      	lsrs	r2, r3
1001722e:	0013      	movs	r3, r2
10017230:	2d20      	cmp	r5, #32
10017232:	d029      	beq.n	10017288 <__aeabi_ddiv+0x604>
10017234:	2240      	movs	r2, #64	; 0x40
10017236:	4658      	mov	r0, fp
10017238:	1b55      	subs	r5, r2, r5
1001723a:	40a8      	lsls	r0, r5
1001723c:	4301      	orrs	r1, r0
1001723e:	1e48      	subs	r0, r1, #1
10017240:	4181      	sbcs	r1, r0
10017242:	2007      	movs	r0, #7
10017244:	430b      	orrs	r3, r1
10017246:	4018      	ands	r0, r3
10017248:	2600      	movs	r6, #0
1001724a:	2800      	cmp	r0, #0
1001724c:	d009      	beq.n	10017262 <__aeabi_ddiv+0x5de>
1001724e:	220f      	movs	r2, #15
10017250:	2600      	movs	r6, #0
10017252:	401a      	ands	r2, r3
10017254:	0019      	movs	r1, r3
10017256:	2a04      	cmp	r2, #4
10017258:	d1bb      	bne.n	100171d2 <__aeabi_ddiv+0x54e>
1001725a:	000b      	movs	r3, r1
1001725c:	0770      	lsls	r0, r6, #29
1001725e:	0276      	lsls	r6, r6, #9
10017260:	0b36      	lsrs	r6, r6, #12
10017262:	08db      	lsrs	r3, r3, #3
10017264:	4303      	orrs	r3, r0
10017266:	4699      	mov	r9, r3
10017268:	2201      	movs	r2, #1
1001726a:	4653      	mov	r3, sl
1001726c:	401a      	ands	r2, r3
1001726e:	2300      	movs	r3, #0
10017270:	e56e      	b.n	10016d50 <__aeabi_ddiv+0xcc>
10017272:	9902      	ldr	r1, [sp, #8]
10017274:	428d      	cmp	r5, r1
10017276:	d8bb      	bhi.n	100171f0 <__aeabi_ddiv+0x56c>
10017278:	469b      	mov	fp, r3
1001727a:	2600      	movs	r6, #0
1001727c:	e67b      	b.n	10016f76 <__aeabi_ddiv+0x2f2>
1001727e:	9803      	ldr	r0, [sp, #12]
10017280:	4298      	cmp	r0, r3
10017282:	d3c5      	bcc.n	10017210 <__aeabi_ddiv+0x58c>
10017284:	0011      	movs	r1, r2
10017286:	e732      	b.n	100170ee <__aeabi_ddiv+0x46a>
10017288:	2000      	movs	r0, #0
1001728a:	e7d7      	b.n	1001723c <__aeabi_ddiv+0x5b8>
1001728c:	2680      	movs	r6, #128	; 0x80
1001728e:	465b      	mov	r3, fp
10017290:	0336      	lsls	r6, r6, #12
10017292:	431e      	orrs	r6, r3
10017294:	0336      	lsls	r6, r6, #12
10017296:	0b36      	lsrs	r6, r6, #12
10017298:	9a00      	ldr	r2, [sp, #0]
1001729a:	4689      	mov	r9, r1
1001729c:	4b03      	ldr	r3, [pc, #12]	; (100172ac <__aeabi_ddiv+0x628>)
1001729e:	e557      	b.n	10016d50 <__aeabi_ddiv+0xcc>
100172a0:	000003ff 	.word	0x000003ff
100172a4:	feffffff 	.word	0xfeffffff
100172a8:	000007fe 	.word	0x000007fe
100172ac:	000007ff 	.word	0x000007ff

100172b0 <__eqdf2>:
100172b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100172b2:	465f      	mov	r7, fp
100172b4:	4656      	mov	r6, sl
100172b6:	464d      	mov	r5, r9
100172b8:	4644      	mov	r4, r8
100172ba:	b4f0      	push	{r4, r5, r6, r7}
100172bc:	031f      	lsls	r7, r3, #12
100172be:	005c      	lsls	r4, r3, #1
100172c0:	0fdb      	lsrs	r3, r3, #31
100172c2:	469a      	mov	sl, r3
100172c4:	4b19      	ldr	r3, [pc, #100]	; (1001732c <__eqdf2+0x7c>)
100172c6:	030e      	lsls	r6, r1, #12
100172c8:	004d      	lsls	r5, r1, #1
100172ca:	0fc9      	lsrs	r1, r1, #31
100172cc:	4680      	mov	r8, r0
100172ce:	0b36      	lsrs	r6, r6, #12
100172d0:	0d6d      	lsrs	r5, r5, #21
100172d2:	468b      	mov	fp, r1
100172d4:	4691      	mov	r9, r2
100172d6:	0b3f      	lsrs	r7, r7, #12
100172d8:	0d64      	lsrs	r4, r4, #21
100172da:	429d      	cmp	r5, r3
100172dc:	d019      	beq.n	10017312 <__eqdf2+0x62>
100172de:	4b13      	ldr	r3, [pc, #76]	; (1001732c <__eqdf2+0x7c>)
100172e0:	429c      	cmp	r4, r3
100172e2:	d01b      	beq.n	1001731c <__eqdf2+0x6c>
100172e4:	2301      	movs	r3, #1
100172e6:	42a5      	cmp	r5, r4
100172e8:	d006      	beq.n	100172f8 <__eqdf2+0x48>
100172ea:	0018      	movs	r0, r3
100172ec:	bc3c      	pop	{r2, r3, r4, r5}
100172ee:	4690      	mov	r8, r2
100172f0:	4699      	mov	r9, r3
100172f2:	46a2      	mov	sl, r4
100172f4:	46ab      	mov	fp, r5
100172f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100172f8:	42be      	cmp	r6, r7
100172fa:	d1f6      	bne.n	100172ea <__eqdf2+0x3a>
100172fc:	45c8      	cmp	r8, r9
100172fe:	d1f4      	bne.n	100172ea <__eqdf2+0x3a>
10017300:	45d3      	cmp	fp, sl
10017302:	d010      	beq.n	10017326 <__eqdf2+0x76>
10017304:	2d00      	cmp	r5, #0
10017306:	d1f0      	bne.n	100172ea <__eqdf2+0x3a>
10017308:	4330      	orrs	r0, r6
1001730a:	0003      	movs	r3, r0
1001730c:	1e5a      	subs	r2, r3, #1
1001730e:	4193      	sbcs	r3, r2
10017310:	e7eb      	b.n	100172ea <__eqdf2+0x3a>
10017312:	0031      	movs	r1, r6
10017314:	2301      	movs	r3, #1
10017316:	4301      	orrs	r1, r0
10017318:	d1e7      	bne.n	100172ea <__eqdf2+0x3a>
1001731a:	e7e0      	b.n	100172de <__eqdf2+0x2e>
1001731c:	433a      	orrs	r2, r7
1001731e:	2301      	movs	r3, #1
10017320:	2a00      	cmp	r2, #0
10017322:	d1e2      	bne.n	100172ea <__eqdf2+0x3a>
10017324:	e7de      	b.n	100172e4 <__eqdf2+0x34>
10017326:	2300      	movs	r3, #0
10017328:	e7df      	b.n	100172ea <__eqdf2+0x3a>
1001732a:	46c0      	nop			; (mov r8, r8)
1001732c:	000007ff 	.word	0x000007ff

10017330 <__gedf2>:
10017330:	b5f0      	push	{r4, r5, r6, r7, lr}
10017332:	465f      	mov	r7, fp
10017334:	4644      	mov	r4, r8
10017336:	4656      	mov	r6, sl
10017338:	464d      	mov	r5, r9
1001733a:	b4f0      	push	{r4, r5, r6, r7}
1001733c:	031f      	lsls	r7, r3, #12
1001733e:	0b3c      	lsrs	r4, r7, #12
10017340:	4f2c      	ldr	r7, [pc, #176]	; (100173f4 <__gedf2+0xc4>)
10017342:	030e      	lsls	r6, r1, #12
10017344:	004d      	lsls	r5, r1, #1
10017346:	46a3      	mov	fp, r4
10017348:	005c      	lsls	r4, r3, #1
1001734a:	4684      	mov	ip, r0
1001734c:	0b36      	lsrs	r6, r6, #12
1001734e:	0d6d      	lsrs	r5, r5, #21
10017350:	0fc9      	lsrs	r1, r1, #31
10017352:	4690      	mov	r8, r2
10017354:	0d64      	lsrs	r4, r4, #21
10017356:	0fdb      	lsrs	r3, r3, #31
10017358:	42bd      	cmp	r5, r7
1001735a:	d02b      	beq.n	100173b4 <__gedf2+0x84>
1001735c:	4f25      	ldr	r7, [pc, #148]	; (100173f4 <__gedf2+0xc4>)
1001735e:	42bc      	cmp	r4, r7
10017360:	d02e      	beq.n	100173c0 <__gedf2+0x90>
10017362:	2d00      	cmp	r5, #0
10017364:	d10e      	bne.n	10017384 <__gedf2+0x54>
10017366:	4330      	orrs	r0, r6
10017368:	0007      	movs	r7, r0
1001736a:	4681      	mov	r9, r0
1001736c:	4278      	negs	r0, r7
1001736e:	4178      	adcs	r0, r7
10017370:	2c00      	cmp	r4, #0
10017372:	d117      	bne.n	100173a4 <__gedf2+0x74>
10017374:	465f      	mov	r7, fp
10017376:	433a      	orrs	r2, r7
10017378:	d114      	bne.n	100173a4 <__gedf2+0x74>
1001737a:	464b      	mov	r3, r9
1001737c:	2000      	movs	r0, #0
1001737e:	2b00      	cmp	r3, #0
10017380:	d00a      	beq.n	10017398 <__gedf2+0x68>
10017382:	e006      	b.n	10017392 <__gedf2+0x62>
10017384:	2c00      	cmp	r4, #0
10017386:	d102      	bne.n	1001738e <__gedf2+0x5e>
10017388:	4658      	mov	r0, fp
1001738a:	4302      	orrs	r2, r0
1001738c:	d001      	beq.n	10017392 <__gedf2+0x62>
1001738e:	4299      	cmp	r1, r3
10017390:	d01a      	beq.n	100173c8 <__gedf2+0x98>
10017392:	2301      	movs	r3, #1
10017394:	4248      	negs	r0, r1
10017396:	4318      	orrs	r0, r3
10017398:	bc3c      	pop	{r2, r3, r4, r5}
1001739a:	4690      	mov	r8, r2
1001739c:	4699      	mov	r9, r3
1001739e:	46a2      	mov	sl, r4
100173a0:	46ab      	mov	fp, r5
100173a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100173a4:	2800      	cmp	r0, #0
100173a6:	d0f2      	beq.n	1001738e <__gedf2+0x5e>
100173a8:	4258      	negs	r0, r3
100173aa:	4158      	adcs	r0, r3
100173ac:	2201      	movs	r2, #1
100173ae:	4240      	negs	r0, r0
100173b0:	4310      	orrs	r0, r2
100173b2:	e7f1      	b.n	10017398 <__gedf2+0x68>
100173b4:	0037      	movs	r7, r6
100173b6:	4307      	orrs	r7, r0
100173b8:	d0d0      	beq.n	1001735c <__gedf2+0x2c>
100173ba:	2002      	movs	r0, #2
100173bc:	4240      	negs	r0, r0
100173be:	e7eb      	b.n	10017398 <__gedf2+0x68>
100173c0:	465f      	mov	r7, fp
100173c2:	4317      	orrs	r7, r2
100173c4:	d0cd      	beq.n	10017362 <__gedf2+0x32>
100173c6:	e7f8      	b.n	100173ba <__gedf2+0x8a>
100173c8:	42a5      	cmp	r5, r4
100173ca:	dce2      	bgt.n	10017392 <__gedf2+0x62>
100173cc:	db05      	blt.n	100173da <__gedf2+0xaa>
100173ce:	455e      	cmp	r6, fp
100173d0:	d8df      	bhi.n	10017392 <__gedf2+0x62>
100173d2:	d008      	beq.n	100173e6 <__gedf2+0xb6>
100173d4:	2000      	movs	r0, #0
100173d6:	455e      	cmp	r6, fp
100173d8:	d2de      	bcs.n	10017398 <__gedf2+0x68>
100173da:	4248      	negs	r0, r1
100173dc:	4148      	adcs	r0, r1
100173de:	2301      	movs	r3, #1
100173e0:	4240      	negs	r0, r0
100173e2:	4318      	orrs	r0, r3
100173e4:	e7d8      	b.n	10017398 <__gedf2+0x68>
100173e6:	45c4      	cmp	ip, r8
100173e8:	d8d3      	bhi.n	10017392 <__gedf2+0x62>
100173ea:	2000      	movs	r0, #0
100173ec:	45c4      	cmp	ip, r8
100173ee:	d3f4      	bcc.n	100173da <__gedf2+0xaa>
100173f0:	e7d2      	b.n	10017398 <__gedf2+0x68>
100173f2:	46c0      	nop			; (mov r8, r8)
100173f4:	000007ff 	.word	0x000007ff

100173f8 <__ledf2>:
100173f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100173fa:	465f      	mov	r7, fp
100173fc:	464d      	mov	r5, r9
100173fe:	4644      	mov	r4, r8
10017400:	4656      	mov	r6, sl
10017402:	b4f0      	push	{r4, r5, r6, r7}
10017404:	031c      	lsls	r4, r3, #12
10017406:	0b24      	lsrs	r4, r4, #12
10017408:	46a4      	mov	ip, r4
1001740a:	4c2f      	ldr	r4, [pc, #188]	; (100174c8 <__ledf2+0xd0>)
1001740c:	030f      	lsls	r7, r1, #12
1001740e:	004d      	lsls	r5, r1, #1
10017410:	005e      	lsls	r6, r3, #1
10017412:	0fc9      	lsrs	r1, r1, #31
10017414:	4680      	mov	r8, r0
10017416:	0b3f      	lsrs	r7, r7, #12
10017418:	0d6d      	lsrs	r5, r5, #21
1001741a:	468b      	mov	fp, r1
1001741c:	4691      	mov	r9, r2
1001741e:	0d76      	lsrs	r6, r6, #21
10017420:	0fdb      	lsrs	r3, r3, #31
10017422:	42a5      	cmp	r5, r4
10017424:	d020      	beq.n	10017468 <__ledf2+0x70>
10017426:	4c28      	ldr	r4, [pc, #160]	; (100174c8 <__ledf2+0xd0>)
10017428:	42a6      	cmp	r6, r4
1001742a:	d022      	beq.n	10017472 <__ledf2+0x7a>
1001742c:	2d00      	cmp	r5, #0
1001742e:	d112      	bne.n	10017456 <__ledf2+0x5e>
10017430:	4338      	orrs	r0, r7
10017432:	4244      	negs	r4, r0
10017434:	4144      	adcs	r4, r0
10017436:	2e00      	cmp	r6, #0
10017438:	d020      	beq.n	1001747c <__ledf2+0x84>
1001743a:	2c00      	cmp	r4, #0
1001743c:	d00d      	beq.n	1001745a <__ledf2+0x62>
1001743e:	425c      	negs	r4, r3
10017440:	4163      	adcs	r3, r4
10017442:	2401      	movs	r4, #1
10017444:	425b      	negs	r3, r3
10017446:	431c      	orrs	r4, r3
10017448:	0020      	movs	r0, r4
1001744a:	bc3c      	pop	{r2, r3, r4, r5}
1001744c:	4690      	mov	r8, r2
1001744e:	4699      	mov	r9, r3
10017450:	46a2      	mov	sl, r4
10017452:	46ab      	mov	fp, r5
10017454:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017456:	2e00      	cmp	r6, #0
10017458:	d017      	beq.n	1001748a <__ledf2+0x92>
1001745a:	455b      	cmp	r3, fp
1001745c:	d019      	beq.n	10017492 <__ledf2+0x9a>
1001745e:	465b      	mov	r3, fp
10017460:	425c      	negs	r4, r3
10017462:	2301      	movs	r3, #1
10017464:	431c      	orrs	r4, r3
10017466:	e7ef      	b.n	10017448 <__ledf2+0x50>
10017468:	0039      	movs	r1, r7
1001746a:	2402      	movs	r4, #2
1001746c:	4301      	orrs	r1, r0
1001746e:	d1eb      	bne.n	10017448 <__ledf2+0x50>
10017470:	e7d9      	b.n	10017426 <__ledf2+0x2e>
10017472:	4661      	mov	r1, ip
10017474:	2402      	movs	r4, #2
10017476:	4311      	orrs	r1, r2
10017478:	d1e6      	bne.n	10017448 <__ledf2+0x50>
1001747a:	e7d7      	b.n	1001742c <__ledf2+0x34>
1001747c:	4661      	mov	r1, ip
1001747e:	430a      	orrs	r2, r1
10017480:	d1db      	bne.n	1001743a <__ledf2+0x42>
10017482:	2400      	movs	r4, #0
10017484:	2800      	cmp	r0, #0
10017486:	d0df      	beq.n	10017448 <__ledf2+0x50>
10017488:	e7e9      	b.n	1001745e <__ledf2+0x66>
1001748a:	4661      	mov	r1, ip
1001748c:	430a      	orrs	r2, r1
1001748e:	d1e4      	bne.n	1001745a <__ledf2+0x62>
10017490:	e7e5      	b.n	1001745e <__ledf2+0x66>
10017492:	42b5      	cmp	r5, r6
10017494:	dd03      	ble.n	1001749e <__ledf2+0xa6>
10017496:	2201      	movs	r2, #1
10017498:	425c      	negs	r4, r3
1001749a:	4314      	orrs	r4, r2
1001749c:	e7d4      	b.n	10017448 <__ledf2+0x50>
1001749e:	42b5      	cmp	r5, r6
100174a0:	dbcd      	blt.n	1001743e <__ledf2+0x46>
100174a2:	4567      	cmp	r7, ip
100174a4:	d8db      	bhi.n	1001745e <__ledf2+0x66>
100174a6:	d009      	beq.n	100174bc <__ledf2+0xc4>
100174a8:	2400      	movs	r4, #0
100174aa:	4567      	cmp	r7, ip
100174ac:	d2cc      	bcs.n	10017448 <__ledf2+0x50>
100174ae:	4659      	mov	r1, fp
100174b0:	424c      	negs	r4, r1
100174b2:	4161      	adcs	r1, r4
100174b4:	2401      	movs	r4, #1
100174b6:	4249      	negs	r1, r1
100174b8:	430c      	orrs	r4, r1
100174ba:	e7c5      	b.n	10017448 <__ledf2+0x50>
100174bc:	45c8      	cmp	r8, r9
100174be:	d8ce      	bhi.n	1001745e <__ledf2+0x66>
100174c0:	2400      	movs	r4, #0
100174c2:	45c8      	cmp	r8, r9
100174c4:	d3f3      	bcc.n	100174ae <__ledf2+0xb6>
100174c6:	e7bf      	b.n	10017448 <__ledf2+0x50>
100174c8:	000007ff 	.word	0x000007ff

100174cc <__aeabi_dmul>:
100174cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100174ce:	465f      	mov	r7, fp
100174d0:	4656      	mov	r6, sl
100174d2:	464d      	mov	r5, r9
100174d4:	4644      	mov	r4, r8
100174d6:	b4f0      	push	{r4, r5, r6, r7}
100174d8:	030d      	lsls	r5, r1, #12
100174da:	4699      	mov	r9, r3
100174dc:	004e      	lsls	r6, r1, #1
100174de:	0b2b      	lsrs	r3, r5, #12
100174e0:	b087      	sub	sp, #28
100174e2:	0007      	movs	r7, r0
100174e4:	4692      	mov	sl, r2
100174e6:	4680      	mov	r8, r0
100174e8:	469b      	mov	fp, r3
100174ea:	0d76      	lsrs	r6, r6, #21
100174ec:	0fcc      	lsrs	r4, r1, #31
100174ee:	2e00      	cmp	r6, #0
100174f0:	d069      	beq.n	100175c6 <__aeabi_dmul+0xfa>
100174f2:	4b6d      	ldr	r3, [pc, #436]	; (100176a8 <__aeabi_dmul+0x1dc>)
100174f4:	429e      	cmp	r6, r3
100174f6:	d035      	beq.n	10017564 <__aeabi_dmul+0x98>
100174f8:	465b      	mov	r3, fp
100174fa:	2280      	movs	r2, #128	; 0x80
100174fc:	00dd      	lsls	r5, r3, #3
100174fe:	0412      	lsls	r2, r2, #16
10017500:	0f43      	lsrs	r3, r0, #29
10017502:	4313      	orrs	r3, r2
10017504:	432b      	orrs	r3, r5
10017506:	469b      	mov	fp, r3
10017508:	00c3      	lsls	r3, r0, #3
1001750a:	4698      	mov	r8, r3
1001750c:	4b67      	ldr	r3, [pc, #412]	; (100176ac <__aeabi_dmul+0x1e0>)
1001750e:	2700      	movs	r7, #0
10017510:	469c      	mov	ip, r3
10017512:	2300      	movs	r3, #0
10017514:	4466      	add	r6, ip
10017516:	9301      	str	r3, [sp, #4]
10017518:	464a      	mov	r2, r9
1001751a:	0315      	lsls	r5, r2, #12
1001751c:	0050      	lsls	r0, r2, #1
1001751e:	0fd2      	lsrs	r2, r2, #31
10017520:	4653      	mov	r3, sl
10017522:	0b2d      	lsrs	r5, r5, #12
10017524:	0d40      	lsrs	r0, r0, #21
10017526:	4691      	mov	r9, r2
10017528:	d100      	bne.n	1001752c <__aeabi_dmul+0x60>
1001752a:	e076      	b.n	1001761a <__aeabi_dmul+0x14e>
1001752c:	4a5e      	ldr	r2, [pc, #376]	; (100176a8 <__aeabi_dmul+0x1dc>)
1001752e:	4290      	cmp	r0, r2
10017530:	d06c      	beq.n	1001760c <__aeabi_dmul+0x140>
10017532:	2280      	movs	r2, #128	; 0x80
10017534:	0f5b      	lsrs	r3, r3, #29
10017536:	0412      	lsls	r2, r2, #16
10017538:	4313      	orrs	r3, r2
1001753a:	4a5c      	ldr	r2, [pc, #368]	; (100176ac <__aeabi_dmul+0x1e0>)
1001753c:	00ed      	lsls	r5, r5, #3
1001753e:	4694      	mov	ip, r2
10017540:	431d      	orrs	r5, r3
10017542:	4653      	mov	r3, sl
10017544:	2200      	movs	r2, #0
10017546:	00db      	lsls	r3, r3, #3
10017548:	4460      	add	r0, ip
1001754a:	4649      	mov	r1, r9
1001754c:	1836      	adds	r6, r6, r0
1001754e:	1c70      	adds	r0, r6, #1
10017550:	4061      	eors	r1, r4
10017552:	9002      	str	r0, [sp, #8]
10017554:	4317      	orrs	r7, r2
10017556:	2f0f      	cmp	r7, #15
10017558:	d900      	bls.n	1001755c <__aeabi_dmul+0x90>
1001755a:	e0af      	b.n	100176bc <__aeabi_dmul+0x1f0>
1001755c:	4854      	ldr	r0, [pc, #336]	; (100176b0 <__aeabi_dmul+0x1e4>)
1001755e:	00bf      	lsls	r7, r7, #2
10017560:	59c7      	ldr	r7, [r0, r7]
10017562:	46bf      	mov	pc, r7
10017564:	465b      	mov	r3, fp
10017566:	431f      	orrs	r7, r3
10017568:	d000      	beq.n	1001756c <__aeabi_dmul+0xa0>
1001756a:	e088      	b.n	1001767e <__aeabi_dmul+0x1b2>
1001756c:	2300      	movs	r3, #0
1001756e:	469b      	mov	fp, r3
10017570:	4698      	mov	r8, r3
10017572:	3302      	adds	r3, #2
10017574:	2708      	movs	r7, #8
10017576:	9301      	str	r3, [sp, #4]
10017578:	e7ce      	b.n	10017518 <__aeabi_dmul+0x4c>
1001757a:	4649      	mov	r1, r9
1001757c:	2a02      	cmp	r2, #2
1001757e:	d06a      	beq.n	10017656 <__aeabi_dmul+0x18a>
10017580:	2a03      	cmp	r2, #3
10017582:	d100      	bne.n	10017586 <__aeabi_dmul+0xba>
10017584:	e209      	b.n	1001799a <__aeabi_dmul+0x4ce>
10017586:	2a01      	cmp	r2, #1
10017588:	d000      	beq.n	1001758c <__aeabi_dmul+0xc0>
1001758a:	e1bb      	b.n	10017904 <__aeabi_dmul+0x438>
1001758c:	4011      	ands	r1, r2
1001758e:	2200      	movs	r2, #0
10017590:	2300      	movs	r3, #0
10017592:	2500      	movs	r5, #0
10017594:	4690      	mov	r8, r2
10017596:	b2cc      	uxtb	r4, r1
10017598:	2100      	movs	r1, #0
1001759a:	032d      	lsls	r5, r5, #12
1001759c:	0d0a      	lsrs	r2, r1, #20
1001759e:	0512      	lsls	r2, r2, #20
100175a0:	0b2d      	lsrs	r5, r5, #12
100175a2:	4315      	orrs	r5, r2
100175a4:	4a43      	ldr	r2, [pc, #268]	; (100176b4 <__aeabi_dmul+0x1e8>)
100175a6:	051b      	lsls	r3, r3, #20
100175a8:	4015      	ands	r5, r2
100175aa:	431d      	orrs	r5, r3
100175ac:	006d      	lsls	r5, r5, #1
100175ae:	07e4      	lsls	r4, r4, #31
100175b0:	086d      	lsrs	r5, r5, #1
100175b2:	4325      	orrs	r5, r4
100175b4:	4640      	mov	r0, r8
100175b6:	0029      	movs	r1, r5
100175b8:	b007      	add	sp, #28
100175ba:	bc3c      	pop	{r2, r3, r4, r5}
100175bc:	4690      	mov	r8, r2
100175be:	4699      	mov	r9, r3
100175c0:	46a2      	mov	sl, r4
100175c2:	46ab      	mov	fp, r5
100175c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100175c6:	4303      	orrs	r3, r0
100175c8:	d052      	beq.n	10017670 <__aeabi_dmul+0x1a4>
100175ca:	465b      	mov	r3, fp
100175cc:	2b00      	cmp	r3, #0
100175ce:	d100      	bne.n	100175d2 <__aeabi_dmul+0x106>
100175d0:	e18a      	b.n	100178e8 <__aeabi_dmul+0x41c>
100175d2:	4658      	mov	r0, fp
100175d4:	f000 fed8 	bl	10018388 <__clzsi2>
100175d8:	0003      	movs	r3, r0
100175da:	3b0b      	subs	r3, #11
100175dc:	2b1c      	cmp	r3, #28
100175de:	dd00      	ble.n	100175e2 <__aeabi_dmul+0x116>
100175e0:	e17b      	b.n	100178da <__aeabi_dmul+0x40e>
100175e2:	221d      	movs	r2, #29
100175e4:	1ad3      	subs	r3, r2, r3
100175e6:	003a      	movs	r2, r7
100175e8:	0001      	movs	r1, r0
100175ea:	465d      	mov	r5, fp
100175ec:	40da      	lsrs	r2, r3
100175ee:	3908      	subs	r1, #8
100175f0:	408d      	lsls	r5, r1
100175f2:	0013      	movs	r3, r2
100175f4:	408f      	lsls	r7, r1
100175f6:	432b      	orrs	r3, r5
100175f8:	469b      	mov	fp, r3
100175fa:	46b8      	mov	r8, r7
100175fc:	4b2e      	ldr	r3, [pc, #184]	; (100176b8 <__aeabi_dmul+0x1ec>)
100175fe:	2700      	movs	r7, #0
10017600:	469c      	mov	ip, r3
10017602:	2300      	movs	r3, #0
10017604:	4460      	add	r0, ip
10017606:	4246      	negs	r6, r0
10017608:	9301      	str	r3, [sp, #4]
1001760a:	e785      	b.n	10017518 <__aeabi_dmul+0x4c>
1001760c:	4652      	mov	r2, sl
1001760e:	432a      	orrs	r2, r5
10017610:	d12c      	bne.n	1001766c <__aeabi_dmul+0x1a0>
10017612:	2500      	movs	r5, #0
10017614:	2300      	movs	r3, #0
10017616:	2202      	movs	r2, #2
10017618:	e797      	b.n	1001754a <__aeabi_dmul+0x7e>
1001761a:	4652      	mov	r2, sl
1001761c:	432a      	orrs	r2, r5
1001761e:	d021      	beq.n	10017664 <__aeabi_dmul+0x198>
10017620:	2d00      	cmp	r5, #0
10017622:	d100      	bne.n	10017626 <__aeabi_dmul+0x15a>
10017624:	e154      	b.n	100178d0 <__aeabi_dmul+0x404>
10017626:	0028      	movs	r0, r5
10017628:	f000 feae 	bl	10018388 <__clzsi2>
1001762c:	0003      	movs	r3, r0
1001762e:	3b0b      	subs	r3, #11
10017630:	2b1c      	cmp	r3, #28
10017632:	dd00      	ble.n	10017636 <__aeabi_dmul+0x16a>
10017634:	e146      	b.n	100178c4 <__aeabi_dmul+0x3f8>
10017636:	211d      	movs	r1, #29
10017638:	1acb      	subs	r3, r1, r3
1001763a:	4651      	mov	r1, sl
1001763c:	0002      	movs	r2, r0
1001763e:	40d9      	lsrs	r1, r3
10017640:	4653      	mov	r3, sl
10017642:	3a08      	subs	r2, #8
10017644:	4095      	lsls	r5, r2
10017646:	4093      	lsls	r3, r2
10017648:	430d      	orrs	r5, r1
1001764a:	4a1b      	ldr	r2, [pc, #108]	; (100176b8 <__aeabi_dmul+0x1ec>)
1001764c:	4694      	mov	ip, r2
1001764e:	4460      	add	r0, ip
10017650:	4240      	negs	r0, r0
10017652:	2200      	movs	r2, #0
10017654:	e779      	b.n	1001754a <__aeabi_dmul+0x7e>
10017656:	2401      	movs	r4, #1
10017658:	2200      	movs	r2, #0
1001765a:	400c      	ands	r4, r1
1001765c:	4b12      	ldr	r3, [pc, #72]	; (100176a8 <__aeabi_dmul+0x1dc>)
1001765e:	2500      	movs	r5, #0
10017660:	4690      	mov	r8, r2
10017662:	e799      	b.n	10017598 <__aeabi_dmul+0xcc>
10017664:	2500      	movs	r5, #0
10017666:	2300      	movs	r3, #0
10017668:	2201      	movs	r2, #1
1001766a:	e76e      	b.n	1001754a <__aeabi_dmul+0x7e>
1001766c:	2203      	movs	r2, #3
1001766e:	e76c      	b.n	1001754a <__aeabi_dmul+0x7e>
10017670:	2300      	movs	r3, #0
10017672:	469b      	mov	fp, r3
10017674:	4698      	mov	r8, r3
10017676:	3301      	adds	r3, #1
10017678:	2704      	movs	r7, #4
1001767a:	9301      	str	r3, [sp, #4]
1001767c:	e74c      	b.n	10017518 <__aeabi_dmul+0x4c>
1001767e:	2303      	movs	r3, #3
10017680:	270c      	movs	r7, #12
10017682:	9301      	str	r3, [sp, #4]
10017684:	e748      	b.n	10017518 <__aeabi_dmul+0x4c>
10017686:	2300      	movs	r3, #0
10017688:	2580      	movs	r5, #128	; 0x80
1001768a:	4698      	mov	r8, r3
1001768c:	2400      	movs	r4, #0
1001768e:	032d      	lsls	r5, r5, #12
10017690:	4b05      	ldr	r3, [pc, #20]	; (100176a8 <__aeabi_dmul+0x1dc>)
10017692:	e781      	b.n	10017598 <__aeabi_dmul+0xcc>
10017694:	465d      	mov	r5, fp
10017696:	4643      	mov	r3, r8
10017698:	9a01      	ldr	r2, [sp, #4]
1001769a:	e76f      	b.n	1001757c <__aeabi_dmul+0xb0>
1001769c:	465d      	mov	r5, fp
1001769e:	4643      	mov	r3, r8
100176a0:	0021      	movs	r1, r4
100176a2:	9a01      	ldr	r2, [sp, #4]
100176a4:	e76a      	b.n	1001757c <__aeabi_dmul+0xb0>
100176a6:	46c0      	nop			; (mov r8, r8)
100176a8:	000007ff 	.word	0x000007ff
100176ac:	fffffc01 	.word	0xfffffc01
100176b0:	1001b81c 	.word	0x1001b81c
100176b4:	800fffff 	.word	0x800fffff
100176b8:	000003f3 	.word	0x000003f3
100176bc:	4642      	mov	r2, r8
100176be:	0c12      	lsrs	r2, r2, #16
100176c0:	4691      	mov	r9, r2
100176c2:	0c1a      	lsrs	r2, r3, #16
100176c4:	4694      	mov	ip, r2
100176c6:	4642      	mov	r2, r8
100176c8:	0417      	lsls	r7, r2, #16
100176ca:	464a      	mov	r2, r9
100176cc:	041b      	lsls	r3, r3, #16
100176ce:	0c1b      	lsrs	r3, r3, #16
100176d0:	435a      	muls	r2, r3
100176d2:	4660      	mov	r0, ip
100176d4:	4690      	mov	r8, r2
100176d6:	464a      	mov	r2, r9
100176d8:	4342      	muls	r2, r0
100176da:	0010      	movs	r0, r2
100176dc:	9203      	str	r2, [sp, #12]
100176de:	4662      	mov	r2, ip
100176e0:	001c      	movs	r4, r3
100176e2:	0c3f      	lsrs	r7, r7, #16
100176e4:	437a      	muls	r2, r7
100176e6:	437c      	muls	r4, r7
100176e8:	4442      	add	r2, r8
100176ea:	9201      	str	r2, [sp, #4]
100176ec:	0c22      	lsrs	r2, r4, #16
100176ee:	4692      	mov	sl, r2
100176f0:	9a01      	ldr	r2, [sp, #4]
100176f2:	4452      	add	r2, sl
100176f4:	4590      	cmp	r8, r2
100176f6:	d906      	bls.n	10017706 <__aeabi_dmul+0x23a>
100176f8:	4682      	mov	sl, r0
100176fa:	2080      	movs	r0, #128	; 0x80
100176fc:	0240      	lsls	r0, r0, #9
100176fe:	4680      	mov	r8, r0
10017700:	44c2      	add	sl, r8
10017702:	4650      	mov	r0, sl
10017704:	9003      	str	r0, [sp, #12]
10017706:	0c10      	lsrs	r0, r2, #16
10017708:	9004      	str	r0, [sp, #16]
1001770a:	4648      	mov	r0, r9
1001770c:	0424      	lsls	r4, r4, #16
1001770e:	0c24      	lsrs	r4, r4, #16
10017710:	0412      	lsls	r2, r2, #16
10017712:	1912      	adds	r2, r2, r4
10017714:	9205      	str	r2, [sp, #20]
10017716:	0c2a      	lsrs	r2, r5, #16
10017718:	042d      	lsls	r5, r5, #16
1001771a:	0c2d      	lsrs	r5, r5, #16
1001771c:	4368      	muls	r0, r5
1001771e:	002c      	movs	r4, r5
10017720:	4682      	mov	sl, r0
10017722:	4648      	mov	r0, r9
10017724:	437c      	muls	r4, r7
10017726:	4350      	muls	r0, r2
10017728:	4681      	mov	r9, r0
1001772a:	0c20      	lsrs	r0, r4, #16
1001772c:	4680      	mov	r8, r0
1001772e:	4357      	muls	r7, r2
10017730:	4457      	add	r7, sl
10017732:	4447      	add	r7, r8
10017734:	45ba      	cmp	sl, r7
10017736:	d903      	bls.n	10017740 <__aeabi_dmul+0x274>
10017738:	2080      	movs	r0, #128	; 0x80
1001773a:	0240      	lsls	r0, r0, #9
1001773c:	4680      	mov	r8, r0
1001773e:	44c1      	add	r9, r8
10017740:	0c38      	lsrs	r0, r7, #16
10017742:	043f      	lsls	r7, r7, #16
10017744:	46b8      	mov	r8, r7
10017746:	4448      	add	r0, r9
10017748:	0424      	lsls	r4, r4, #16
1001774a:	0c24      	lsrs	r4, r4, #16
1001774c:	9001      	str	r0, [sp, #4]
1001774e:	9804      	ldr	r0, [sp, #16]
10017750:	44a0      	add	r8, r4
10017752:	4440      	add	r0, r8
10017754:	9004      	str	r0, [sp, #16]
10017756:	4658      	mov	r0, fp
10017758:	0c00      	lsrs	r0, r0, #16
1001775a:	4681      	mov	r9, r0
1001775c:	4658      	mov	r0, fp
1001775e:	0404      	lsls	r4, r0, #16
10017760:	0c20      	lsrs	r0, r4, #16
10017762:	4682      	mov	sl, r0
10017764:	0007      	movs	r7, r0
10017766:	4648      	mov	r0, r9
10017768:	435f      	muls	r7, r3
1001776a:	464c      	mov	r4, r9
1001776c:	4343      	muls	r3, r0
1001776e:	4660      	mov	r0, ip
10017770:	4360      	muls	r0, r4
10017772:	4664      	mov	r4, ip
10017774:	4683      	mov	fp, r0
10017776:	4650      	mov	r0, sl
10017778:	4344      	muls	r4, r0
1001777a:	0c38      	lsrs	r0, r7, #16
1001777c:	4684      	mov	ip, r0
1001777e:	18e4      	adds	r4, r4, r3
10017780:	4464      	add	r4, ip
10017782:	42a3      	cmp	r3, r4
10017784:	d903      	bls.n	1001778e <__aeabi_dmul+0x2c2>
10017786:	2380      	movs	r3, #128	; 0x80
10017788:	025b      	lsls	r3, r3, #9
1001778a:	469c      	mov	ip, r3
1001778c:	44e3      	add	fp, ip
1001778e:	4648      	mov	r0, r9
10017790:	043f      	lsls	r7, r7, #16
10017792:	0c23      	lsrs	r3, r4, #16
10017794:	0c3f      	lsrs	r7, r7, #16
10017796:	0424      	lsls	r4, r4, #16
10017798:	19e4      	adds	r4, r4, r7
1001779a:	4657      	mov	r7, sl
1001779c:	4368      	muls	r0, r5
1001779e:	436f      	muls	r7, r5
100177a0:	4684      	mov	ip, r0
100177a2:	464d      	mov	r5, r9
100177a4:	4650      	mov	r0, sl
100177a6:	4355      	muls	r5, r2
100177a8:	4342      	muls	r2, r0
100177aa:	0c38      	lsrs	r0, r7, #16
100177ac:	4681      	mov	r9, r0
100177ae:	4462      	add	r2, ip
100177b0:	444a      	add	r2, r9
100177b2:	445b      	add	r3, fp
100177b4:	4594      	cmp	ip, r2
100177b6:	d903      	bls.n	100177c0 <__aeabi_dmul+0x2f4>
100177b8:	2080      	movs	r0, #128	; 0x80
100177ba:	0240      	lsls	r0, r0, #9
100177bc:	4684      	mov	ip, r0
100177be:	4465      	add	r5, ip
100177c0:	9803      	ldr	r0, [sp, #12]
100177c2:	043f      	lsls	r7, r7, #16
100177c4:	4683      	mov	fp, r0
100177c6:	9804      	ldr	r0, [sp, #16]
100177c8:	0c3f      	lsrs	r7, r7, #16
100177ca:	4684      	mov	ip, r0
100177cc:	44e3      	add	fp, ip
100177ce:	45c3      	cmp	fp, r8
100177d0:	4180      	sbcs	r0, r0
100177d2:	4240      	negs	r0, r0
100177d4:	4682      	mov	sl, r0
100177d6:	0410      	lsls	r0, r2, #16
100177d8:	4684      	mov	ip, r0
100177da:	9801      	ldr	r0, [sp, #4]
100177dc:	4467      	add	r7, ip
100177de:	4684      	mov	ip, r0
100177e0:	4467      	add	r7, ip
100177e2:	44a3      	add	fp, r4
100177e4:	46bc      	mov	ip, r7
100177e6:	45a3      	cmp	fp, r4
100177e8:	41a4      	sbcs	r4, r4
100177ea:	4699      	mov	r9, r3
100177ec:	44d4      	add	ip, sl
100177ee:	4264      	negs	r4, r4
100177f0:	4287      	cmp	r7, r0
100177f2:	41bf      	sbcs	r7, r7
100177f4:	45d4      	cmp	ip, sl
100177f6:	4180      	sbcs	r0, r0
100177f8:	44e1      	add	r9, ip
100177fa:	46a0      	mov	r8, r4
100177fc:	4599      	cmp	r9, r3
100177fe:	419b      	sbcs	r3, r3
10017800:	427f      	negs	r7, r7
10017802:	4240      	negs	r0, r0
10017804:	44c8      	add	r8, r9
10017806:	4307      	orrs	r7, r0
10017808:	0c12      	lsrs	r2, r2, #16
1001780a:	18ba      	adds	r2, r7, r2
1001780c:	45a0      	cmp	r8, r4
1001780e:	41a4      	sbcs	r4, r4
10017810:	425f      	negs	r7, r3
10017812:	003b      	movs	r3, r7
10017814:	4264      	negs	r4, r4
10017816:	4323      	orrs	r3, r4
10017818:	18d7      	adds	r7, r2, r3
1001781a:	4643      	mov	r3, r8
1001781c:	197d      	adds	r5, r7, r5
1001781e:	0ddb      	lsrs	r3, r3, #23
10017820:	026d      	lsls	r5, r5, #9
10017822:	431d      	orrs	r5, r3
10017824:	465b      	mov	r3, fp
10017826:	025a      	lsls	r2, r3, #9
10017828:	9b05      	ldr	r3, [sp, #20]
1001782a:	431a      	orrs	r2, r3
1001782c:	1e53      	subs	r3, r2, #1
1001782e:	419a      	sbcs	r2, r3
10017830:	465b      	mov	r3, fp
10017832:	0ddb      	lsrs	r3, r3, #23
10017834:	431a      	orrs	r2, r3
10017836:	4643      	mov	r3, r8
10017838:	025b      	lsls	r3, r3, #9
1001783a:	4313      	orrs	r3, r2
1001783c:	01ea      	lsls	r2, r5, #7
1001783e:	d507      	bpl.n	10017850 <__aeabi_dmul+0x384>
10017840:	2201      	movs	r2, #1
10017842:	085c      	lsrs	r4, r3, #1
10017844:	4013      	ands	r3, r2
10017846:	4323      	orrs	r3, r4
10017848:	07ea      	lsls	r2, r5, #31
1001784a:	9e02      	ldr	r6, [sp, #8]
1001784c:	4313      	orrs	r3, r2
1001784e:	086d      	lsrs	r5, r5, #1
10017850:	4a57      	ldr	r2, [pc, #348]	; (100179b0 <__aeabi_dmul+0x4e4>)
10017852:	18b2      	adds	r2, r6, r2
10017854:	2a00      	cmp	r2, #0
10017856:	dd4b      	ble.n	100178f0 <__aeabi_dmul+0x424>
10017858:	0758      	lsls	r0, r3, #29
1001785a:	d009      	beq.n	10017870 <__aeabi_dmul+0x3a4>
1001785c:	200f      	movs	r0, #15
1001785e:	4018      	ands	r0, r3
10017860:	2804      	cmp	r0, #4
10017862:	d005      	beq.n	10017870 <__aeabi_dmul+0x3a4>
10017864:	1d18      	adds	r0, r3, #4
10017866:	4298      	cmp	r0, r3
10017868:	419b      	sbcs	r3, r3
1001786a:	425b      	negs	r3, r3
1001786c:	18ed      	adds	r5, r5, r3
1001786e:	0003      	movs	r3, r0
10017870:	01e8      	lsls	r0, r5, #7
10017872:	d504      	bpl.n	1001787e <__aeabi_dmul+0x3b2>
10017874:	4a4f      	ldr	r2, [pc, #316]	; (100179b4 <__aeabi_dmul+0x4e8>)
10017876:	4015      	ands	r5, r2
10017878:	2280      	movs	r2, #128	; 0x80
1001787a:	00d2      	lsls	r2, r2, #3
1001787c:	18b2      	adds	r2, r6, r2
1001787e:	484e      	ldr	r0, [pc, #312]	; (100179b8 <__aeabi_dmul+0x4ec>)
10017880:	4282      	cmp	r2, r0
10017882:	dd00      	ble.n	10017886 <__aeabi_dmul+0x3ba>
10017884:	e6e7      	b.n	10017656 <__aeabi_dmul+0x18a>
10017886:	2401      	movs	r4, #1
10017888:	08db      	lsrs	r3, r3, #3
1001788a:	0768      	lsls	r0, r5, #29
1001788c:	4318      	orrs	r0, r3
1001788e:	026d      	lsls	r5, r5, #9
10017890:	0553      	lsls	r3, r2, #21
10017892:	4680      	mov	r8, r0
10017894:	0b2d      	lsrs	r5, r5, #12
10017896:	0d5b      	lsrs	r3, r3, #21
10017898:	400c      	ands	r4, r1
1001789a:	e67d      	b.n	10017598 <__aeabi_dmul+0xcc>
1001789c:	2280      	movs	r2, #128	; 0x80
1001789e:	4659      	mov	r1, fp
100178a0:	0312      	lsls	r2, r2, #12
100178a2:	4211      	tst	r1, r2
100178a4:	d008      	beq.n	100178b8 <__aeabi_dmul+0x3ec>
100178a6:	4215      	tst	r5, r2
100178a8:	d106      	bne.n	100178b8 <__aeabi_dmul+0x3ec>
100178aa:	4315      	orrs	r5, r2
100178ac:	032d      	lsls	r5, r5, #12
100178ae:	4698      	mov	r8, r3
100178b0:	0b2d      	lsrs	r5, r5, #12
100178b2:	464c      	mov	r4, r9
100178b4:	4b41      	ldr	r3, [pc, #260]	; (100179bc <__aeabi_dmul+0x4f0>)
100178b6:	e66f      	b.n	10017598 <__aeabi_dmul+0xcc>
100178b8:	465d      	mov	r5, fp
100178ba:	4315      	orrs	r5, r2
100178bc:	032d      	lsls	r5, r5, #12
100178be:	0b2d      	lsrs	r5, r5, #12
100178c0:	4b3e      	ldr	r3, [pc, #248]	; (100179bc <__aeabi_dmul+0x4f0>)
100178c2:	e669      	b.n	10017598 <__aeabi_dmul+0xcc>
100178c4:	0003      	movs	r3, r0
100178c6:	4655      	mov	r5, sl
100178c8:	3b28      	subs	r3, #40	; 0x28
100178ca:	409d      	lsls	r5, r3
100178cc:	2300      	movs	r3, #0
100178ce:	e6bc      	b.n	1001764a <__aeabi_dmul+0x17e>
100178d0:	4650      	mov	r0, sl
100178d2:	f000 fd59 	bl	10018388 <__clzsi2>
100178d6:	3020      	adds	r0, #32
100178d8:	e6a8      	b.n	1001762c <__aeabi_dmul+0x160>
100178da:	0003      	movs	r3, r0
100178dc:	3b28      	subs	r3, #40	; 0x28
100178de:	409f      	lsls	r7, r3
100178e0:	2300      	movs	r3, #0
100178e2:	46bb      	mov	fp, r7
100178e4:	4698      	mov	r8, r3
100178e6:	e689      	b.n	100175fc <__aeabi_dmul+0x130>
100178e8:	f000 fd4e 	bl	10018388 <__clzsi2>
100178ec:	3020      	adds	r0, #32
100178ee:	e673      	b.n	100175d8 <__aeabi_dmul+0x10c>
100178f0:	2401      	movs	r4, #1
100178f2:	1aa6      	subs	r6, r4, r2
100178f4:	2e38      	cmp	r6, #56	; 0x38
100178f6:	dd07      	ble.n	10017908 <__aeabi_dmul+0x43c>
100178f8:	2200      	movs	r2, #0
100178fa:	400c      	ands	r4, r1
100178fc:	2300      	movs	r3, #0
100178fe:	2500      	movs	r5, #0
10017900:	4690      	mov	r8, r2
10017902:	e649      	b.n	10017598 <__aeabi_dmul+0xcc>
10017904:	9e02      	ldr	r6, [sp, #8]
10017906:	e7a3      	b.n	10017850 <__aeabi_dmul+0x384>
10017908:	2e1f      	cmp	r6, #31
1001790a:	dc20      	bgt.n	1001794e <__aeabi_dmul+0x482>
1001790c:	2220      	movs	r2, #32
1001790e:	002c      	movs	r4, r5
10017910:	0018      	movs	r0, r3
10017912:	1b92      	subs	r2, r2, r6
10017914:	40f0      	lsrs	r0, r6
10017916:	4094      	lsls	r4, r2
10017918:	4093      	lsls	r3, r2
1001791a:	4304      	orrs	r4, r0
1001791c:	1e58      	subs	r0, r3, #1
1001791e:	4183      	sbcs	r3, r0
10017920:	431c      	orrs	r4, r3
10017922:	40f5      	lsrs	r5, r6
10017924:	0763      	lsls	r3, r4, #29
10017926:	d009      	beq.n	1001793c <__aeabi_dmul+0x470>
10017928:	230f      	movs	r3, #15
1001792a:	4023      	ands	r3, r4
1001792c:	2b04      	cmp	r3, #4
1001792e:	d005      	beq.n	1001793c <__aeabi_dmul+0x470>
10017930:	0023      	movs	r3, r4
10017932:	1d1c      	adds	r4, r3, #4
10017934:	429c      	cmp	r4, r3
10017936:	4192      	sbcs	r2, r2
10017938:	4252      	negs	r2, r2
1001793a:	18ad      	adds	r5, r5, r2
1001793c:	022b      	lsls	r3, r5, #8
1001793e:	d51f      	bpl.n	10017980 <__aeabi_dmul+0x4b4>
10017940:	2401      	movs	r4, #1
10017942:	2200      	movs	r2, #0
10017944:	400c      	ands	r4, r1
10017946:	2301      	movs	r3, #1
10017948:	2500      	movs	r5, #0
1001794a:	4690      	mov	r8, r2
1001794c:	e624      	b.n	10017598 <__aeabi_dmul+0xcc>
1001794e:	201f      	movs	r0, #31
10017950:	002c      	movs	r4, r5
10017952:	4240      	negs	r0, r0
10017954:	1a82      	subs	r2, r0, r2
10017956:	40d4      	lsrs	r4, r2
10017958:	2e20      	cmp	r6, #32
1001795a:	d01c      	beq.n	10017996 <__aeabi_dmul+0x4ca>
1001795c:	2240      	movs	r2, #64	; 0x40
1001795e:	1b96      	subs	r6, r2, r6
10017960:	40b5      	lsls	r5, r6
10017962:	432b      	orrs	r3, r5
10017964:	1e58      	subs	r0, r3, #1
10017966:	4183      	sbcs	r3, r0
10017968:	2007      	movs	r0, #7
1001796a:	4323      	orrs	r3, r4
1001796c:	4018      	ands	r0, r3
1001796e:	2500      	movs	r5, #0
10017970:	2800      	cmp	r0, #0
10017972:	d009      	beq.n	10017988 <__aeabi_dmul+0x4bc>
10017974:	220f      	movs	r2, #15
10017976:	2500      	movs	r5, #0
10017978:	401a      	ands	r2, r3
1001797a:	001c      	movs	r4, r3
1001797c:	2a04      	cmp	r2, #4
1001797e:	d1d8      	bne.n	10017932 <__aeabi_dmul+0x466>
10017980:	0023      	movs	r3, r4
10017982:	0768      	lsls	r0, r5, #29
10017984:	026d      	lsls	r5, r5, #9
10017986:	0b2d      	lsrs	r5, r5, #12
10017988:	2401      	movs	r4, #1
1001798a:	08db      	lsrs	r3, r3, #3
1001798c:	4303      	orrs	r3, r0
1001798e:	4698      	mov	r8, r3
10017990:	400c      	ands	r4, r1
10017992:	2300      	movs	r3, #0
10017994:	e600      	b.n	10017598 <__aeabi_dmul+0xcc>
10017996:	2500      	movs	r5, #0
10017998:	e7e3      	b.n	10017962 <__aeabi_dmul+0x496>
1001799a:	2280      	movs	r2, #128	; 0x80
1001799c:	2401      	movs	r4, #1
1001799e:	0312      	lsls	r2, r2, #12
100179a0:	4315      	orrs	r5, r2
100179a2:	032d      	lsls	r5, r5, #12
100179a4:	4698      	mov	r8, r3
100179a6:	0b2d      	lsrs	r5, r5, #12
100179a8:	400c      	ands	r4, r1
100179aa:	4b04      	ldr	r3, [pc, #16]	; (100179bc <__aeabi_dmul+0x4f0>)
100179ac:	e5f4      	b.n	10017598 <__aeabi_dmul+0xcc>
100179ae:	46c0      	nop			; (mov r8, r8)
100179b0:	000003ff 	.word	0x000003ff
100179b4:	feffffff 	.word	0xfeffffff
100179b8:	000007fe 	.word	0x000007fe
100179bc:	000007ff 	.word	0x000007ff

100179c0 <__aeabi_dsub>:
100179c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100179c2:	4657      	mov	r7, sl
100179c4:	464e      	mov	r6, r9
100179c6:	4645      	mov	r5, r8
100179c8:	b4e0      	push	{r5, r6, r7}
100179ca:	000e      	movs	r6, r1
100179cc:	0011      	movs	r1, r2
100179ce:	0ff2      	lsrs	r2, r6, #31
100179d0:	4692      	mov	sl, r2
100179d2:	00c5      	lsls	r5, r0, #3
100179d4:	0f42      	lsrs	r2, r0, #29
100179d6:	0318      	lsls	r0, r3, #12
100179d8:	0337      	lsls	r7, r6, #12
100179da:	0074      	lsls	r4, r6, #1
100179dc:	0a40      	lsrs	r0, r0, #9
100179de:	0f4e      	lsrs	r6, r1, #29
100179e0:	0a7f      	lsrs	r7, r7, #9
100179e2:	4330      	orrs	r0, r6
100179e4:	4ecf      	ldr	r6, [pc, #828]	; (10017d24 <__aeabi_dsub+0x364>)
100179e6:	4317      	orrs	r7, r2
100179e8:	005a      	lsls	r2, r3, #1
100179ea:	0d64      	lsrs	r4, r4, #21
100179ec:	0d52      	lsrs	r2, r2, #21
100179ee:	0fdb      	lsrs	r3, r3, #31
100179f0:	00c9      	lsls	r1, r1, #3
100179f2:	42b2      	cmp	r2, r6
100179f4:	d100      	bne.n	100179f8 <__aeabi_dsub+0x38>
100179f6:	e0e5      	b.n	10017bc4 <__aeabi_dsub+0x204>
100179f8:	2601      	movs	r6, #1
100179fa:	4073      	eors	r3, r6
100179fc:	1aa6      	subs	r6, r4, r2
100179fe:	46b4      	mov	ip, r6
10017a00:	4553      	cmp	r3, sl
10017a02:	d100      	bne.n	10017a06 <__aeabi_dsub+0x46>
10017a04:	e0af      	b.n	10017b66 <__aeabi_dsub+0x1a6>
10017a06:	2e00      	cmp	r6, #0
10017a08:	dc00      	bgt.n	10017a0c <__aeabi_dsub+0x4c>
10017a0a:	e10d      	b.n	10017c28 <__aeabi_dsub+0x268>
10017a0c:	2a00      	cmp	r2, #0
10017a0e:	d13a      	bne.n	10017a86 <__aeabi_dsub+0xc6>
10017a10:	0003      	movs	r3, r0
10017a12:	430b      	orrs	r3, r1
10017a14:	d000      	beq.n	10017a18 <__aeabi_dsub+0x58>
10017a16:	e0e4      	b.n	10017be2 <__aeabi_dsub+0x222>
10017a18:	076b      	lsls	r3, r5, #29
10017a1a:	d009      	beq.n	10017a30 <__aeabi_dsub+0x70>
10017a1c:	230f      	movs	r3, #15
10017a1e:	402b      	ands	r3, r5
10017a20:	2b04      	cmp	r3, #4
10017a22:	d005      	beq.n	10017a30 <__aeabi_dsub+0x70>
10017a24:	1d2b      	adds	r3, r5, #4
10017a26:	42ab      	cmp	r3, r5
10017a28:	41ad      	sbcs	r5, r5
10017a2a:	426d      	negs	r5, r5
10017a2c:	197f      	adds	r7, r7, r5
10017a2e:	001d      	movs	r5, r3
10017a30:	023b      	lsls	r3, r7, #8
10017a32:	d400      	bmi.n	10017a36 <__aeabi_dsub+0x76>
10017a34:	e088      	b.n	10017b48 <__aeabi_dsub+0x188>
10017a36:	4bbb      	ldr	r3, [pc, #748]	; (10017d24 <__aeabi_dsub+0x364>)
10017a38:	3401      	adds	r4, #1
10017a3a:	429c      	cmp	r4, r3
10017a3c:	d100      	bne.n	10017a40 <__aeabi_dsub+0x80>
10017a3e:	e110      	b.n	10017c62 <__aeabi_dsub+0x2a2>
10017a40:	003a      	movs	r2, r7
10017a42:	4bb9      	ldr	r3, [pc, #740]	; (10017d28 <__aeabi_dsub+0x368>)
10017a44:	4651      	mov	r1, sl
10017a46:	401a      	ands	r2, r3
10017a48:	2301      	movs	r3, #1
10017a4a:	0750      	lsls	r0, r2, #29
10017a4c:	08ed      	lsrs	r5, r5, #3
10017a4e:	0252      	lsls	r2, r2, #9
10017a50:	0564      	lsls	r4, r4, #21
10017a52:	4305      	orrs	r5, r0
10017a54:	0b12      	lsrs	r2, r2, #12
10017a56:	0d64      	lsrs	r4, r4, #21
10017a58:	400b      	ands	r3, r1
10017a5a:	2100      	movs	r1, #0
10017a5c:	0028      	movs	r0, r5
10017a5e:	0312      	lsls	r2, r2, #12
10017a60:	0d0d      	lsrs	r5, r1, #20
10017a62:	0b12      	lsrs	r2, r2, #12
10017a64:	0564      	lsls	r4, r4, #21
10017a66:	052d      	lsls	r5, r5, #20
10017a68:	4315      	orrs	r5, r2
10017a6a:	0862      	lsrs	r2, r4, #1
10017a6c:	4caf      	ldr	r4, [pc, #700]	; (10017d2c <__aeabi_dsub+0x36c>)
10017a6e:	07db      	lsls	r3, r3, #31
10017a70:	402c      	ands	r4, r5
10017a72:	4314      	orrs	r4, r2
10017a74:	0064      	lsls	r4, r4, #1
10017a76:	0864      	lsrs	r4, r4, #1
10017a78:	431c      	orrs	r4, r3
10017a7a:	0021      	movs	r1, r4
10017a7c:	bc1c      	pop	{r2, r3, r4}
10017a7e:	4690      	mov	r8, r2
10017a80:	4699      	mov	r9, r3
10017a82:	46a2      	mov	sl, r4
10017a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017a86:	4ba7      	ldr	r3, [pc, #668]	; (10017d24 <__aeabi_dsub+0x364>)
10017a88:	429c      	cmp	r4, r3
10017a8a:	d0c5      	beq.n	10017a18 <__aeabi_dsub+0x58>
10017a8c:	2380      	movs	r3, #128	; 0x80
10017a8e:	041b      	lsls	r3, r3, #16
10017a90:	4318      	orrs	r0, r3
10017a92:	4663      	mov	r3, ip
10017a94:	2b38      	cmp	r3, #56	; 0x38
10017a96:	dd00      	ble.n	10017a9a <__aeabi_dsub+0xda>
10017a98:	e0fd      	b.n	10017c96 <__aeabi_dsub+0x2d6>
10017a9a:	2b1f      	cmp	r3, #31
10017a9c:	dd00      	ble.n	10017aa0 <__aeabi_dsub+0xe0>
10017a9e:	e130      	b.n	10017d02 <__aeabi_dsub+0x342>
10017aa0:	4662      	mov	r2, ip
10017aa2:	2320      	movs	r3, #32
10017aa4:	1a9b      	subs	r3, r3, r2
10017aa6:	0002      	movs	r2, r0
10017aa8:	409a      	lsls	r2, r3
10017aaa:	4666      	mov	r6, ip
10017aac:	4690      	mov	r8, r2
10017aae:	000a      	movs	r2, r1
10017ab0:	4099      	lsls	r1, r3
10017ab2:	40f2      	lsrs	r2, r6
10017ab4:	4646      	mov	r6, r8
10017ab6:	1e4b      	subs	r3, r1, #1
10017ab8:	4199      	sbcs	r1, r3
10017aba:	4332      	orrs	r2, r6
10017abc:	4311      	orrs	r1, r2
10017abe:	4663      	mov	r3, ip
10017ac0:	0002      	movs	r2, r0
10017ac2:	40da      	lsrs	r2, r3
10017ac4:	1a69      	subs	r1, r5, r1
10017ac6:	428d      	cmp	r5, r1
10017ac8:	419b      	sbcs	r3, r3
10017aca:	000d      	movs	r5, r1
10017acc:	1aba      	subs	r2, r7, r2
10017ace:	425b      	negs	r3, r3
10017ad0:	1ad7      	subs	r7, r2, r3
10017ad2:	023b      	lsls	r3, r7, #8
10017ad4:	d535      	bpl.n	10017b42 <__aeabi_dsub+0x182>
10017ad6:	027a      	lsls	r2, r7, #9
10017ad8:	0a53      	lsrs	r3, r2, #9
10017ada:	4698      	mov	r8, r3
10017adc:	4643      	mov	r3, r8
10017ade:	2b00      	cmp	r3, #0
10017ae0:	d100      	bne.n	10017ae4 <__aeabi_dsub+0x124>
10017ae2:	e0c4      	b.n	10017c6e <__aeabi_dsub+0x2ae>
10017ae4:	4640      	mov	r0, r8
10017ae6:	f000 fc4f 	bl	10018388 <__clzsi2>
10017aea:	0003      	movs	r3, r0
10017aec:	3b08      	subs	r3, #8
10017aee:	2b1f      	cmp	r3, #31
10017af0:	dd00      	ble.n	10017af4 <__aeabi_dsub+0x134>
10017af2:	e0c5      	b.n	10017c80 <__aeabi_dsub+0x2c0>
10017af4:	2220      	movs	r2, #32
10017af6:	0029      	movs	r1, r5
10017af8:	1ad2      	subs	r2, r2, r3
10017afa:	4647      	mov	r7, r8
10017afc:	40d1      	lsrs	r1, r2
10017afe:	409f      	lsls	r7, r3
10017b00:	000a      	movs	r2, r1
10017b02:	409d      	lsls	r5, r3
10017b04:	433a      	orrs	r2, r7
10017b06:	429c      	cmp	r4, r3
10017b08:	dd00      	ble.n	10017b0c <__aeabi_dsub+0x14c>
10017b0a:	e0c0      	b.n	10017c8e <__aeabi_dsub+0x2ce>
10017b0c:	1b1c      	subs	r4, r3, r4
10017b0e:	1c63      	adds	r3, r4, #1
10017b10:	2b1f      	cmp	r3, #31
10017b12:	dd00      	ble.n	10017b16 <__aeabi_dsub+0x156>
10017b14:	e0e4      	b.n	10017ce0 <__aeabi_dsub+0x320>
10017b16:	2120      	movs	r1, #32
10017b18:	0014      	movs	r4, r2
10017b1a:	0028      	movs	r0, r5
10017b1c:	1ac9      	subs	r1, r1, r3
10017b1e:	40d8      	lsrs	r0, r3
10017b20:	408c      	lsls	r4, r1
10017b22:	408d      	lsls	r5, r1
10017b24:	4304      	orrs	r4, r0
10017b26:	40da      	lsrs	r2, r3
10017b28:	1e68      	subs	r0, r5, #1
10017b2a:	4185      	sbcs	r5, r0
10017b2c:	0017      	movs	r7, r2
10017b2e:	4325      	orrs	r5, r4
10017b30:	2400      	movs	r4, #0
10017b32:	e771      	b.n	10017a18 <__aeabi_dsub+0x58>
10017b34:	4642      	mov	r2, r8
10017b36:	4663      	mov	r3, ip
10017b38:	431a      	orrs	r2, r3
10017b3a:	d100      	bne.n	10017b3e <__aeabi_dsub+0x17e>
10017b3c:	e24c      	b.n	10017fd8 <__aeabi_dsub+0x618>
10017b3e:	4667      	mov	r7, ip
10017b40:	4645      	mov	r5, r8
10017b42:	076b      	lsls	r3, r5, #29
10017b44:	d000      	beq.n	10017b48 <__aeabi_dsub+0x188>
10017b46:	e769      	b.n	10017a1c <__aeabi_dsub+0x5c>
10017b48:	2301      	movs	r3, #1
10017b4a:	4651      	mov	r1, sl
10017b4c:	0778      	lsls	r0, r7, #29
10017b4e:	08ed      	lsrs	r5, r5, #3
10017b50:	08fa      	lsrs	r2, r7, #3
10017b52:	400b      	ands	r3, r1
10017b54:	4305      	orrs	r5, r0
10017b56:	4973      	ldr	r1, [pc, #460]	; (10017d24 <__aeabi_dsub+0x364>)
10017b58:	428c      	cmp	r4, r1
10017b5a:	d038      	beq.n	10017bce <__aeabi_dsub+0x20e>
10017b5c:	0312      	lsls	r2, r2, #12
10017b5e:	0564      	lsls	r4, r4, #21
10017b60:	0b12      	lsrs	r2, r2, #12
10017b62:	0d64      	lsrs	r4, r4, #21
10017b64:	e779      	b.n	10017a5a <__aeabi_dsub+0x9a>
10017b66:	2e00      	cmp	r6, #0
10017b68:	dc00      	bgt.n	10017b6c <__aeabi_dsub+0x1ac>
10017b6a:	e09a      	b.n	10017ca2 <__aeabi_dsub+0x2e2>
10017b6c:	2a00      	cmp	r2, #0
10017b6e:	d047      	beq.n	10017c00 <__aeabi_dsub+0x240>
10017b70:	4a6c      	ldr	r2, [pc, #432]	; (10017d24 <__aeabi_dsub+0x364>)
10017b72:	4294      	cmp	r4, r2
10017b74:	d100      	bne.n	10017b78 <__aeabi_dsub+0x1b8>
10017b76:	e74f      	b.n	10017a18 <__aeabi_dsub+0x58>
10017b78:	2280      	movs	r2, #128	; 0x80
10017b7a:	0412      	lsls	r2, r2, #16
10017b7c:	4310      	orrs	r0, r2
10017b7e:	4662      	mov	r2, ip
10017b80:	2a38      	cmp	r2, #56	; 0x38
10017b82:	dc00      	bgt.n	10017b86 <__aeabi_dsub+0x1c6>
10017b84:	e108      	b.n	10017d98 <__aeabi_dsub+0x3d8>
10017b86:	4301      	orrs	r1, r0
10017b88:	1e48      	subs	r0, r1, #1
10017b8a:	4181      	sbcs	r1, r0
10017b8c:	2200      	movs	r2, #0
10017b8e:	b2c9      	uxtb	r1, r1
10017b90:	1949      	adds	r1, r1, r5
10017b92:	19d2      	adds	r2, r2, r7
10017b94:	42a9      	cmp	r1, r5
10017b96:	41bf      	sbcs	r7, r7
10017b98:	000d      	movs	r5, r1
10017b9a:	427f      	negs	r7, r7
10017b9c:	18bf      	adds	r7, r7, r2
10017b9e:	023a      	lsls	r2, r7, #8
10017ba0:	d400      	bmi.n	10017ba4 <__aeabi_dsub+0x1e4>
10017ba2:	e142      	b.n	10017e2a <__aeabi_dsub+0x46a>
10017ba4:	4a5f      	ldr	r2, [pc, #380]	; (10017d24 <__aeabi_dsub+0x364>)
10017ba6:	3401      	adds	r4, #1
10017ba8:	4294      	cmp	r4, r2
10017baa:	d100      	bne.n	10017bae <__aeabi_dsub+0x1ee>
10017bac:	e14e      	b.n	10017e4c <__aeabi_dsub+0x48c>
10017bae:	2001      	movs	r0, #1
10017bb0:	4a5d      	ldr	r2, [pc, #372]	; (10017d28 <__aeabi_dsub+0x368>)
10017bb2:	0869      	lsrs	r1, r5, #1
10017bb4:	403a      	ands	r2, r7
10017bb6:	4028      	ands	r0, r5
10017bb8:	4308      	orrs	r0, r1
10017bba:	07d5      	lsls	r5, r2, #31
10017bbc:	4305      	orrs	r5, r0
10017bbe:	0857      	lsrs	r7, r2, #1
10017bc0:	469a      	mov	sl, r3
10017bc2:	e729      	b.n	10017a18 <__aeabi_dsub+0x58>
10017bc4:	0006      	movs	r6, r0
10017bc6:	430e      	orrs	r6, r1
10017bc8:	d000      	beq.n	10017bcc <__aeabi_dsub+0x20c>
10017bca:	e717      	b.n	100179fc <__aeabi_dsub+0x3c>
10017bcc:	e714      	b.n	100179f8 <__aeabi_dsub+0x38>
10017bce:	0029      	movs	r1, r5
10017bd0:	4311      	orrs	r1, r2
10017bd2:	d100      	bne.n	10017bd6 <__aeabi_dsub+0x216>
10017bd4:	e1f9      	b.n	10017fca <__aeabi_dsub+0x60a>
10017bd6:	2180      	movs	r1, #128	; 0x80
10017bd8:	0309      	lsls	r1, r1, #12
10017bda:	430a      	orrs	r2, r1
10017bdc:	0312      	lsls	r2, r2, #12
10017bde:	0b12      	lsrs	r2, r2, #12
10017be0:	e73b      	b.n	10017a5a <__aeabi_dsub+0x9a>
10017be2:	2301      	movs	r3, #1
10017be4:	425b      	negs	r3, r3
10017be6:	4698      	mov	r8, r3
10017be8:	44c4      	add	ip, r8
10017bea:	4663      	mov	r3, ip
10017bec:	2b00      	cmp	r3, #0
10017bee:	d172      	bne.n	10017cd6 <__aeabi_dsub+0x316>
10017bf0:	1a69      	subs	r1, r5, r1
10017bf2:	428d      	cmp	r5, r1
10017bf4:	419b      	sbcs	r3, r3
10017bf6:	1a3f      	subs	r7, r7, r0
10017bf8:	425b      	negs	r3, r3
10017bfa:	1aff      	subs	r7, r7, r3
10017bfc:	000d      	movs	r5, r1
10017bfe:	e768      	b.n	10017ad2 <__aeabi_dsub+0x112>
10017c00:	0002      	movs	r2, r0
10017c02:	430a      	orrs	r2, r1
10017c04:	d100      	bne.n	10017c08 <__aeabi_dsub+0x248>
10017c06:	e707      	b.n	10017a18 <__aeabi_dsub+0x58>
10017c08:	2201      	movs	r2, #1
10017c0a:	4252      	negs	r2, r2
10017c0c:	4690      	mov	r8, r2
10017c0e:	44c4      	add	ip, r8
10017c10:	4662      	mov	r2, ip
10017c12:	2a00      	cmp	r2, #0
10017c14:	d000      	beq.n	10017c18 <__aeabi_dsub+0x258>
10017c16:	e0e6      	b.n	10017de6 <__aeabi_dsub+0x426>
10017c18:	1869      	adds	r1, r5, r1
10017c1a:	42a9      	cmp	r1, r5
10017c1c:	41b6      	sbcs	r6, r6
10017c1e:	183f      	adds	r7, r7, r0
10017c20:	4276      	negs	r6, r6
10017c22:	19f7      	adds	r7, r6, r7
10017c24:	000d      	movs	r5, r1
10017c26:	e7ba      	b.n	10017b9e <__aeabi_dsub+0x1de>
10017c28:	2e00      	cmp	r6, #0
10017c2a:	d000      	beq.n	10017c2e <__aeabi_dsub+0x26e>
10017c2c:	e080      	b.n	10017d30 <__aeabi_dsub+0x370>
10017c2e:	1c62      	adds	r2, r4, #1
10017c30:	0552      	lsls	r2, r2, #21
10017c32:	0d52      	lsrs	r2, r2, #21
10017c34:	2a01      	cmp	r2, #1
10017c36:	dc00      	bgt.n	10017c3a <__aeabi_dsub+0x27a>
10017c38:	e0f9      	b.n	10017e2e <__aeabi_dsub+0x46e>
10017c3a:	1a6a      	subs	r2, r5, r1
10017c3c:	4691      	mov	r9, r2
10017c3e:	454d      	cmp	r5, r9
10017c40:	41b6      	sbcs	r6, r6
10017c42:	1a3a      	subs	r2, r7, r0
10017c44:	4276      	negs	r6, r6
10017c46:	1b92      	subs	r2, r2, r6
10017c48:	4690      	mov	r8, r2
10017c4a:	0212      	lsls	r2, r2, #8
10017c4c:	d400      	bmi.n	10017c50 <__aeabi_dsub+0x290>
10017c4e:	e099      	b.n	10017d84 <__aeabi_dsub+0x3c4>
10017c50:	1b4d      	subs	r5, r1, r5
10017c52:	42a9      	cmp	r1, r5
10017c54:	4189      	sbcs	r1, r1
10017c56:	1bc7      	subs	r7, r0, r7
10017c58:	4249      	negs	r1, r1
10017c5a:	1a7a      	subs	r2, r7, r1
10017c5c:	4690      	mov	r8, r2
10017c5e:	469a      	mov	sl, r3
10017c60:	e73c      	b.n	10017adc <__aeabi_dsub+0x11c>
10017c62:	4652      	mov	r2, sl
10017c64:	2301      	movs	r3, #1
10017c66:	2500      	movs	r5, #0
10017c68:	4013      	ands	r3, r2
10017c6a:	2200      	movs	r2, #0
10017c6c:	e6f5      	b.n	10017a5a <__aeabi_dsub+0x9a>
10017c6e:	0028      	movs	r0, r5
10017c70:	f000 fb8a 	bl	10018388 <__clzsi2>
10017c74:	3020      	adds	r0, #32
10017c76:	0003      	movs	r3, r0
10017c78:	3b08      	subs	r3, #8
10017c7a:	2b1f      	cmp	r3, #31
10017c7c:	dc00      	bgt.n	10017c80 <__aeabi_dsub+0x2c0>
10017c7e:	e739      	b.n	10017af4 <__aeabi_dsub+0x134>
10017c80:	002a      	movs	r2, r5
10017c82:	3828      	subs	r0, #40	; 0x28
10017c84:	4082      	lsls	r2, r0
10017c86:	2500      	movs	r5, #0
10017c88:	429c      	cmp	r4, r3
10017c8a:	dc00      	bgt.n	10017c8e <__aeabi_dsub+0x2ce>
10017c8c:	e73e      	b.n	10017b0c <__aeabi_dsub+0x14c>
10017c8e:	4f26      	ldr	r7, [pc, #152]	; (10017d28 <__aeabi_dsub+0x368>)
10017c90:	1ae4      	subs	r4, r4, r3
10017c92:	4017      	ands	r7, r2
10017c94:	e6c0      	b.n	10017a18 <__aeabi_dsub+0x58>
10017c96:	4301      	orrs	r1, r0
10017c98:	1e48      	subs	r0, r1, #1
10017c9a:	4181      	sbcs	r1, r0
10017c9c:	2200      	movs	r2, #0
10017c9e:	b2c9      	uxtb	r1, r1
10017ca0:	e710      	b.n	10017ac4 <__aeabi_dsub+0x104>
10017ca2:	2e00      	cmp	r6, #0
10017ca4:	d000      	beq.n	10017ca8 <__aeabi_dsub+0x2e8>
10017ca6:	e0f1      	b.n	10017e8c <__aeabi_dsub+0x4cc>
10017ca8:	1c62      	adds	r2, r4, #1
10017caa:	4694      	mov	ip, r2
10017cac:	0552      	lsls	r2, r2, #21
10017cae:	0d52      	lsrs	r2, r2, #21
10017cb0:	2a01      	cmp	r2, #1
10017cb2:	dc00      	bgt.n	10017cb6 <__aeabi_dsub+0x2f6>
10017cb4:	e0a0      	b.n	10017df8 <__aeabi_dsub+0x438>
10017cb6:	4a1b      	ldr	r2, [pc, #108]	; (10017d24 <__aeabi_dsub+0x364>)
10017cb8:	4594      	cmp	ip, r2
10017cba:	d100      	bne.n	10017cbe <__aeabi_dsub+0x2fe>
10017cbc:	e0c5      	b.n	10017e4a <__aeabi_dsub+0x48a>
10017cbe:	1869      	adds	r1, r5, r1
10017cc0:	42a9      	cmp	r1, r5
10017cc2:	4192      	sbcs	r2, r2
10017cc4:	183f      	adds	r7, r7, r0
10017cc6:	4252      	negs	r2, r2
10017cc8:	19d2      	adds	r2, r2, r7
10017cca:	0849      	lsrs	r1, r1, #1
10017ccc:	07d5      	lsls	r5, r2, #31
10017cce:	430d      	orrs	r5, r1
10017cd0:	0857      	lsrs	r7, r2, #1
10017cd2:	4664      	mov	r4, ip
10017cd4:	e6a0      	b.n	10017a18 <__aeabi_dsub+0x58>
10017cd6:	4b13      	ldr	r3, [pc, #76]	; (10017d24 <__aeabi_dsub+0x364>)
10017cd8:	429c      	cmp	r4, r3
10017cda:	d000      	beq.n	10017cde <__aeabi_dsub+0x31e>
10017cdc:	e6d9      	b.n	10017a92 <__aeabi_dsub+0xd2>
10017cde:	e69b      	b.n	10017a18 <__aeabi_dsub+0x58>
10017ce0:	0011      	movs	r1, r2
10017ce2:	3c1f      	subs	r4, #31
10017ce4:	40e1      	lsrs	r1, r4
10017ce6:	000c      	movs	r4, r1
10017ce8:	2b20      	cmp	r3, #32
10017cea:	d100      	bne.n	10017cee <__aeabi_dsub+0x32e>
10017cec:	e080      	b.n	10017df0 <__aeabi_dsub+0x430>
10017cee:	2140      	movs	r1, #64	; 0x40
10017cf0:	1acb      	subs	r3, r1, r3
10017cf2:	409a      	lsls	r2, r3
10017cf4:	4315      	orrs	r5, r2
10017cf6:	1e6a      	subs	r2, r5, #1
10017cf8:	4195      	sbcs	r5, r2
10017cfa:	2700      	movs	r7, #0
10017cfc:	4325      	orrs	r5, r4
10017cfe:	2400      	movs	r4, #0
10017d00:	e71f      	b.n	10017b42 <__aeabi_dsub+0x182>
10017d02:	4663      	mov	r3, ip
10017d04:	0002      	movs	r2, r0
10017d06:	3b20      	subs	r3, #32
10017d08:	40da      	lsrs	r2, r3
10017d0a:	4663      	mov	r3, ip
10017d0c:	2b20      	cmp	r3, #32
10017d0e:	d071      	beq.n	10017df4 <__aeabi_dsub+0x434>
10017d10:	2340      	movs	r3, #64	; 0x40
10017d12:	4666      	mov	r6, ip
10017d14:	1b9b      	subs	r3, r3, r6
10017d16:	4098      	lsls	r0, r3
10017d18:	4301      	orrs	r1, r0
10017d1a:	1e48      	subs	r0, r1, #1
10017d1c:	4181      	sbcs	r1, r0
10017d1e:	4311      	orrs	r1, r2
10017d20:	2200      	movs	r2, #0
10017d22:	e6cf      	b.n	10017ac4 <__aeabi_dsub+0x104>
10017d24:	000007ff 	.word	0x000007ff
10017d28:	ff7fffff 	.word	0xff7fffff
10017d2c:	800fffff 	.word	0x800fffff
10017d30:	2c00      	cmp	r4, #0
10017d32:	d048      	beq.n	10017dc6 <__aeabi_dsub+0x406>
10017d34:	4cca      	ldr	r4, [pc, #808]	; (10018060 <__aeabi_dsub+0x6a0>)
10017d36:	42a2      	cmp	r2, r4
10017d38:	d100      	bne.n	10017d3c <__aeabi_dsub+0x37c>
10017d3a:	e0a2      	b.n	10017e82 <__aeabi_dsub+0x4c2>
10017d3c:	4274      	negs	r4, r6
10017d3e:	46a1      	mov	r9, r4
10017d40:	2480      	movs	r4, #128	; 0x80
10017d42:	0424      	lsls	r4, r4, #16
10017d44:	4327      	orrs	r7, r4
10017d46:	464c      	mov	r4, r9
10017d48:	2c38      	cmp	r4, #56	; 0x38
10017d4a:	dd00      	ble.n	10017d4e <__aeabi_dsub+0x38e>
10017d4c:	e0db      	b.n	10017f06 <__aeabi_dsub+0x546>
10017d4e:	2c1f      	cmp	r4, #31
10017d50:	dd00      	ble.n	10017d54 <__aeabi_dsub+0x394>
10017d52:	e144      	b.n	10017fde <__aeabi_dsub+0x61e>
10017d54:	464e      	mov	r6, r9
10017d56:	2420      	movs	r4, #32
10017d58:	1ba4      	subs	r4, r4, r6
10017d5a:	003e      	movs	r6, r7
10017d5c:	40a6      	lsls	r6, r4
10017d5e:	46a2      	mov	sl, r4
10017d60:	46b0      	mov	r8, r6
10017d62:	464c      	mov	r4, r9
10017d64:	002e      	movs	r6, r5
10017d66:	40e6      	lsrs	r6, r4
10017d68:	46b4      	mov	ip, r6
10017d6a:	4646      	mov	r6, r8
10017d6c:	4664      	mov	r4, ip
10017d6e:	4326      	orrs	r6, r4
10017d70:	4654      	mov	r4, sl
10017d72:	40a5      	lsls	r5, r4
10017d74:	1e6c      	subs	r4, r5, #1
10017d76:	41a5      	sbcs	r5, r4
10017d78:	0034      	movs	r4, r6
10017d7a:	432c      	orrs	r4, r5
10017d7c:	464d      	mov	r5, r9
10017d7e:	40ef      	lsrs	r7, r5
10017d80:	1b0d      	subs	r5, r1, r4
10017d82:	e028      	b.n	10017dd6 <__aeabi_dsub+0x416>
10017d84:	464a      	mov	r2, r9
10017d86:	4643      	mov	r3, r8
10017d88:	464d      	mov	r5, r9
10017d8a:	431a      	orrs	r2, r3
10017d8c:	d000      	beq.n	10017d90 <__aeabi_dsub+0x3d0>
10017d8e:	e6a5      	b.n	10017adc <__aeabi_dsub+0x11c>
10017d90:	2300      	movs	r3, #0
10017d92:	2400      	movs	r4, #0
10017d94:	2500      	movs	r5, #0
10017d96:	e6de      	b.n	10017b56 <__aeabi_dsub+0x196>
10017d98:	2a1f      	cmp	r2, #31
10017d9a:	dc5a      	bgt.n	10017e52 <__aeabi_dsub+0x492>
10017d9c:	4666      	mov	r6, ip
10017d9e:	2220      	movs	r2, #32
10017da0:	1b92      	subs	r2, r2, r6
10017da2:	0006      	movs	r6, r0
10017da4:	4096      	lsls	r6, r2
10017da6:	4691      	mov	r9, r2
10017da8:	46b0      	mov	r8, r6
10017daa:	4662      	mov	r2, ip
10017dac:	000e      	movs	r6, r1
10017dae:	40d6      	lsrs	r6, r2
10017db0:	4642      	mov	r2, r8
10017db2:	4316      	orrs	r6, r2
10017db4:	464a      	mov	r2, r9
10017db6:	4091      	lsls	r1, r2
10017db8:	1e4a      	subs	r2, r1, #1
10017dba:	4191      	sbcs	r1, r2
10017dbc:	0002      	movs	r2, r0
10017dbe:	4660      	mov	r0, ip
10017dc0:	4331      	orrs	r1, r6
10017dc2:	40c2      	lsrs	r2, r0
10017dc4:	e6e4      	b.n	10017b90 <__aeabi_dsub+0x1d0>
10017dc6:	003c      	movs	r4, r7
10017dc8:	432c      	orrs	r4, r5
10017dca:	d05a      	beq.n	10017e82 <__aeabi_dsub+0x4c2>
10017dcc:	43f4      	mvns	r4, r6
10017dce:	46a1      	mov	r9, r4
10017dd0:	2c00      	cmp	r4, #0
10017dd2:	d152      	bne.n	10017e7a <__aeabi_dsub+0x4ba>
10017dd4:	1b4d      	subs	r5, r1, r5
10017dd6:	42a9      	cmp	r1, r5
10017dd8:	4189      	sbcs	r1, r1
10017dda:	1bc7      	subs	r7, r0, r7
10017ddc:	4249      	negs	r1, r1
10017dde:	1a7f      	subs	r7, r7, r1
10017de0:	0014      	movs	r4, r2
10017de2:	469a      	mov	sl, r3
10017de4:	e675      	b.n	10017ad2 <__aeabi_dsub+0x112>
10017de6:	4a9e      	ldr	r2, [pc, #632]	; (10018060 <__aeabi_dsub+0x6a0>)
10017de8:	4294      	cmp	r4, r2
10017dea:	d000      	beq.n	10017dee <__aeabi_dsub+0x42e>
10017dec:	e6c7      	b.n	10017b7e <__aeabi_dsub+0x1be>
10017dee:	e613      	b.n	10017a18 <__aeabi_dsub+0x58>
10017df0:	2200      	movs	r2, #0
10017df2:	e77f      	b.n	10017cf4 <__aeabi_dsub+0x334>
10017df4:	2000      	movs	r0, #0
10017df6:	e78f      	b.n	10017d18 <__aeabi_dsub+0x358>
10017df8:	2c00      	cmp	r4, #0
10017dfa:	d000      	beq.n	10017dfe <__aeabi_dsub+0x43e>
10017dfc:	e0c8      	b.n	10017f90 <__aeabi_dsub+0x5d0>
10017dfe:	003b      	movs	r3, r7
10017e00:	432b      	orrs	r3, r5
10017e02:	d100      	bne.n	10017e06 <__aeabi_dsub+0x446>
10017e04:	e10f      	b.n	10018026 <__aeabi_dsub+0x666>
10017e06:	0003      	movs	r3, r0
10017e08:	430b      	orrs	r3, r1
10017e0a:	d100      	bne.n	10017e0e <__aeabi_dsub+0x44e>
10017e0c:	e604      	b.n	10017a18 <__aeabi_dsub+0x58>
10017e0e:	1869      	adds	r1, r5, r1
10017e10:	42a9      	cmp	r1, r5
10017e12:	419b      	sbcs	r3, r3
10017e14:	183f      	adds	r7, r7, r0
10017e16:	425b      	negs	r3, r3
10017e18:	19df      	adds	r7, r3, r7
10017e1a:	023b      	lsls	r3, r7, #8
10017e1c:	d400      	bmi.n	10017e20 <__aeabi_dsub+0x460>
10017e1e:	e11a      	b.n	10018056 <__aeabi_dsub+0x696>
10017e20:	4b90      	ldr	r3, [pc, #576]	; (10018064 <__aeabi_dsub+0x6a4>)
10017e22:	000d      	movs	r5, r1
10017e24:	401f      	ands	r7, r3
10017e26:	4664      	mov	r4, ip
10017e28:	e5f6      	b.n	10017a18 <__aeabi_dsub+0x58>
10017e2a:	469a      	mov	sl, r3
10017e2c:	e689      	b.n	10017b42 <__aeabi_dsub+0x182>
10017e2e:	003a      	movs	r2, r7
10017e30:	432a      	orrs	r2, r5
10017e32:	2c00      	cmp	r4, #0
10017e34:	d15c      	bne.n	10017ef0 <__aeabi_dsub+0x530>
10017e36:	2a00      	cmp	r2, #0
10017e38:	d175      	bne.n	10017f26 <__aeabi_dsub+0x566>
10017e3a:	0002      	movs	r2, r0
10017e3c:	430a      	orrs	r2, r1
10017e3e:	d100      	bne.n	10017e42 <__aeabi_dsub+0x482>
10017e40:	e0ca      	b.n	10017fd8 <__aeabi_dsub+0x618>
10017e42:	0007      	movs	r7, r0
10017e44:	000d      	movs	r5, r1
10017e46:	469a      	mov	sl, r3
10017e48:	e5e6      	b.n	10017a18 <__aeabi_dsub+0x58>
10017e4a:	4664      	mov	r4, ip
10017e4c:	2200      	movs	r2, #0
10017e4e:	2500      	movs	r5, #0
10017e50:	e681      	b.n	10017b56 <__aeabi_dsub+0x196>
10017e52:	4662      	mov	r2, ip
10017e54:	0006      	movs	r6, r0
10017e56:	3a20      	subs	r2, #32
10017e58:	40d6      	lsrs	r6, r2
10017e5a:	4662      	mov	r2, ip
10017e5c:	46b0      	mov	r8, r6
10017e5e:	2a20      	cmp	r2, #32
10017e60:	d100      	bne.n	10017e64 <__aeabi_dsub+0x4a4>
10017e62:	e0b7      	b.n	10017fd4 <__aeabi_dsub+0x614>
10017e64:	2240      	movs	r2, #64	; 0x40
10017e66:	4666      	mov	r6, ip
10017e68:	1b92      	subs	r2, r2, r6
10017e6a:	4090      	lsls	r0, r2
10017e6c:	4301      	orrs	r1, r0
10017e6e:	4642      	mov	r2, r8
10017e70:	1e48      	subs	r0, r1, #1
10017e72:	4181      	sbcs	r1, r0
10017e74:	4311      	orrs	r1, r2
10017e76:	2200      	movs	r2, #0
10017e78:	e68a      	b.n	10017b90 <__aeabi_dsub+0x1d0>
10017e7a:	4c79      	ldr	r4, [pc, #484]	; (10018060 <__aeabi_dsub+0x6a0>)
10017e7c:	42a2      	cmp	r2, r4
10017e7e:	d000      	beq.n	10017e82 <__aeabi_dsub+0x4c2>
10017e80:	e761      	b.n	10017d46 <__aeabi_dsub+0x386>
10017e82:	0007      	movs	r7, r0
10017e84:	000d      	movs	r5, r1
10017e86:	0014      	movs	r4, r2
10017e88:	469a      	mov	sl, r3
10017e8a:	e5c5      	b.n	10017a18 <__aeabi_dsub+0x58>
10017e8c:	2c00      	cmp	r4, #0
10017e8e:	d141      	bne.n	10017f14 <__aeabi_dsub+0x554>
10017e90:	003c      	movs	r4, r7
10017e92:	432c      	orrs	r4, r5
10017e94:	d078      	beq.n	10017f88 <__aeabi_dsub+0x5c8>
10017e96:	43f4      	mvns	r4, r6
10017e98:	46a1      	mov	r9, r4
10017e9a:	2c00      	cmp	r4, #0
10017e9c:	d020      	beq.n	10017ee0 <__aeabi_dsub+0x520>
10017e9e:	4c70      	ldr	r4, [pc, #448]	; (10018060 <__aeabi_dsub+0x6a0>)
10017ea0:	42a2      	cmp	r2, r4
10017ea2:	d071      	beq.n	10017f88 <__aeabi_dsub+0x5c8>
10017ea4:	464c      	mov	r4, r9
10017ea6:	2c38      	cmp	r4, #56	; 0x38
10017ea8:	dd00      	ble.n	10017eac <__aeabi_dsub+0x4ec>
10017eaa:	e0b2      	b.n	10018012 <__aeabi_dsub+0x652>
10017eac:	2c1f      	cmp	r4, #31
10017eae:	dd00      	ble.n	10017eb2 <__aeabi_dsub+0x4f2>
10017eb0:	e0bc      	b.n	1001802c <__aeabi_dsub+0x66c>
10017eb2:	2620      	movs	r6, #32
10017eb4:	1b34      	subs	r4, r6, r4
10017eb6:	46a2      	mov	sl, r4
10017eb8:	003c      	movs	r4, r7
10017eba:	4656      	mov	r6, sl
10017ebc:	40b4      	lsls	r4, r6
10017ebe:	464e      	mov	r6, r9
10017ec0:	46a0      	mov	r8, r4
10017ec2:	002c      	movs	r4, r5
10017ec4:	40f4      	lsrs	r4, r6
10017ec6:	46a4      	mov	ip, r4
10017ec8:	4644      	mov	r4, r8
10017eca:	4666      	mov	r6, ip
10017ecc:	4334      	orrs	r4, r6
10017ece:	46a4      	mov	ip, r4
10017ed0:	4654      	mov	r4, sl
10017ed2:	40a5      	lsls	r5, r4
10017ed4:	4664      	mov	r4, ip
10017ed6:	1e6e      	subs	r6, r5, #1
10017ed8:	41b5      	sbcs	r5, r6
10017eda:	4325      	orrs	r5, r4
10017edc:	464c      	mov	r4, r9
10017ede:	40e7      	lsrs	r7, r4
10017ee0:	186d      	adds	r5, r5, r1
10017ee2:	428d      	cmp	r5, r1
10017ee4:	4189      	sbcs	r1, r1
10017ee6:	183f      	adds	r7, r7, r0
10017ee8:	4249      	negs	r1, r1
10017eea:	19cf      	adds	r7, r1, r7
10017eec:	0014      	movs	r4, r2
10017eee:	e656      	b.n	10017b9e <__aeabi_dsub+0x1de>
10017ef0:	2a00      	cmp	r2, #0
10017ef2:	d12f      	bne.n	10017f54 <__aeabi_dsub+0x594>
10017ef4:	0002      	movs	r2, r0
10017ef6:	430a      	orrs	r2, r1
10017ef8:	d100      	bne.n	10017efc <__aeabi_dsub+0x53c>
10017efa:	e084      	b.n	10018006 <__aeabi_dsub+0x646>
10017efc:	0007      	movs	r7, r0
10017efe:	000d      	movs	r5, r1
10017f00:	469a      	mov	sl, r3
10017f02:	4c57      	ldr	r4, [pc, #348]	; (10018060 <__aeabi_dsub+0x6a0>)
10017f04:	e588      	b.n	10017a18 <__aeabi_dsub+0x58>
10017f06:	433d      	orrs	r5, r7
10017f08:	1e6f      	subs	r7, r5, #1
10017f0a:	41bd      	sbcs	r5, r7
10017f0c:	b2ec      	uxtb	r4, r5
10017f0e:	2700      	movs	r7, #0
10017f10:	1b0d      	subs	r5, r1, r4
10017f12:	e760      	b.n	10017dd6 <__aeabi_dsub+0x416>
10017f14:	4c52      	ldr	r4, [pc, #328]	; (10018060 <__aeabi_dsub+0x6a0>)
10017f16:	42a2      	cmp	r2, r4
10017f18:	d036      	beq.n	10017f88 <__aeabi_dsub+0x5c8>
10017f1a:	4274      	negs	r4, r6
10017f1c:	2680      	movs	r6, #128	; 0x80
10017f1e:	0436      	lsls	r6, r6, #16
10017f20:	46a1      	mov	r9, r4
10017f22:	4337      	orrs	r7, r6
10017f24:	e7be      	b.n	10017ea4 <__aeabi_dsub+0x4e4>
10017f26:	0002      	movs	r2, r0
10017f28:	430a      	orrs	r2, r1
10017f2a:	d100      	bne.n	10017f2e <__aeabi_dsub+0x56e>
10017f2c:	e574      	b.n	10017a18 <__aeabi_dsub+0x58>
10017f2e:	1a6a      	subs	r2, r5, r1
10017f30:	4690      	mov	r8, r2
10017f32:	4545      	cmp	r5, r8
10017f34:	41b6      	sbcs	r6, r6
10017f36:	1a3a      	subs	r2, r7, r0
10017f38:	4276      	negs	r6, r6
10017f3a:	1b92      	subs	r2, r2, r6
10017f3c:	4694      	mov	ip, r2
10017f3e:	0212      	lsls	r2, r2, #8
10017f40:	d400      	bmi.n	10017f44 <__aeabi_dsub+0x584>
10017f42:	e5f7      	b.n	10017b34 <__aeabi_dsub+0x174>
10017f44:	1b4d      	subs	r5, r1, r5
10017f46:	42a9      	cmp	r1, r5
10017f48:	4189      	sbcs	r1, r1
10017f4a:	1bc7      	subs	r7, r0, r7
10017f4c:	4249      	negs	r1, r1
10017f4e:	1a7f      	subs	r7, r7, r1
10017f50:	469a      	mov	sl, r3
10017f52:	e561      	b.n	10017a18 <__aeabi_dsub+0x58>
10017f54:	0002      	movs	r2, r0
10017f56:	430a      	orrs	r2, r1
10017f58:	d03a      	beq.n	10017fd0 <__aeabi_dsub+0x610>
10017f5a:	08ed      	lsrs	r5, r5, #3
10017f5c:	077c      	lsls	r4, r7, #29
10017f5e:	432c      	orrs	r4, r5
10017f60:	2580      	movs	r5, #128	; 0x80
10017f62:	08fa      	lsrs	r2, r7, #3
10017f64:	032d      	lsls	r5, r5, #12
10017f66:	422a      	tst	r2, r5
10017f68:	d008      	beq.n	10017f7c <__aeabi_dsub+0x5bc>
10017f6a:	08c7      	lsrs	r7, r0, #3
10017f6c:	422f      	tst	r7, r5
10017f6e:	d105      	bne.n	10017f7c <__aeabi_dsub+0x5bc>
10017f70:	0745      	lsls	r5, r0, #29
10017f72:	002c      	movs	r4, r5
10017f74:	003a      	movs	r2, r7
10017f76:	469a      	mov	sl, r3
10017f78:	08c9      	lsrs	r1, r1, #3
10017f7a:	430c      	orrs	r4, r1
10017f7c:	0f67      	lsrs	r7, r4, #29
10017f7e:	00d2      	lsls	r2, r2, #3
10017f80:	00e5      	lsls	r5, r4, #3
10017f82:	4317      	orrs	r7, r2
10017f84:	4c36      	ldr	r4, [pc, #216]	; (10018060 <__aeabi_dsub+0x6a0>)
10017f86:	e547      	b.n	10017a18 <__aeabi_dsub+0x58>
10017f88:	0007      	movs	r7, r0
10017f8a:	000d      	movs	r5, r1
10017f8c:	0014      	movs	r4, r2
10017f8e:	e543      	b.n	10017a18 <__aeabi_dsub+0x58>
10017f90:	003a      	movs	r2, r7
10017f92:	432a      	orrs	r2, r5
10017f94:	d043      	beq.n	1001801e <__aeabi_dsub+0x65e>
10017f96:	0002      	movs	r2, r0
10017f98:	430a      	orrs	r2, r1
10017f9a:	d019      	beq.n	10017fd0 <__aeabi_dsub+0x610>
10017f9c:	08ed      	lsrs	r5, r5, #3
10017f9e:	077c      	lsls	r4, r7, #29
10017fa0:	432c      	orrs	r4, r5
10017fa2:	2580      	movs	r5, #128	; 0x80
10017fa4:	08fa      	lsrs	r2, r7, #3
10017fa6:	032d      	lsls	r5, r5, #12
10017fa8:	422a      	tst	r2, r5
10017faa:	d007      	beq.n	10017fbc <__aeabi_dsub+0x5fc>
10017fac:	08c6      	lsrs	r6, r0, #3
10017fae:	422e      	tst	r6, r5
10017fb0:	d104      	bne.n	10017fbc <__aeabi_dsub+0x5fc>
10017fb2:	0747      	lsls	r7, r0, #29
10017fb4:	003c      	movs	r4, r7
10017fb6:	0032      	movs	r2, r6
10017fb8:	08c9      	lsrs	r1, r1, #3
10017fba:	430c      	orrs	r4, r1
10017fbc:	00d7      	lsls	r7, r2, #3
10017fbe:	0f62      	lsrs	r2, r4, #29
10017fc0:	00e5      	lsls	r5, r4, #3
10017fc2:	4317      	orrs	r7, r2
10017fc4:	469a      	mov	sl, r3
10017fc6:	4c26      	ldr	r4, [pc, #152]	; (10018060 <__aeabi_dsub+0x6a0>)
10017fc8:	e526      	b.n	10017a18 <__aeabi_dsub+0x58>
10017fca:	2200      	movs	r2, #0
10017fcc:	2500      	movs	r5, #0
10017fce:	e544      	b.n	10017a5a <__aeabi_dsub+0x9a>
10017fd0:	4c23      	ldr	r4, [pc, #140]	; (10018060 <__aeabi_dsub+0x6a0>)
10017fd2:	e521      	b.n	10017a18 <__aeabi_dsub+0x58>
10017fd4:	2000      	movs	r0, #0
10017fd6:	e749      	b.n	10017e6c <__aeabi_dsub+0x4ac>
10017fd8:	2300      	movs	r3, #0
10017fda:	2500      	movs	r5, #0
10017fdc:	e5bb      	b.n	10017b56 <__aeabi_dsub+0x196>
10017fde:	464c      	mov	r4, r9
10017fe0:	003e      	movs	r6, r7
10017fe2:	3c20      	subs	r4, #32
10017fe4:	40e6      	lsrs	r6, r4
10017fe6:	464c      	mov	r4, r9
10017fe8:	46b4      	mov	ip, r6
10017fea:	2c20      	cmp	r4, #32
10017fec:	d031      	beq.n	10018052 <__aeabi_dsub+0x692>
10017fee:	2440      	movs	r4, #64	; 0x40
10017ff0:	464e      	mov	r6, r9
10017ff2:	1ba6      	subs	r6, r4, r6
10017ff4:	40b7      	lsls	r7, r6
10017ff6:	433d      	orrs	r5, r7
10017ff8:	1e6c      	subs	r4, r5, #1
10017ffa:	41a5      	sbcs	r5, r4
10017ffc:	4664      	mov	r4, ip
10017ffe:	432c      	orrs	r4, r5
10018000:	2700      	movs	r7, #0
10018002:	1b0d      	subs	r5, r1, r4
10018004:	e6e7      	b.n	10017dd6 <__aeabi_dsub+0x416>
10018006:	2280      	movs	r2, #128	; 0x80
10018008:	2300      	movs	r3, #0
1001800a:	0312      	lsls	r2, r2, #12
1001800c:	4c14      	ldr	r4, [pc, #80]	; (10018060 <__aeabi_dsub+0x6a0>)
1001800e:	2500      	movs	r5, #0
10018010:	e5a1      	b.n	10017b56 <__aeabi_dsub+0x196>
10018012:	433d      	orrs	r5, r7
10018014:	1e6f      	subs	r7, r5, #1
10018016:	41bd      	sbcs	r5, r7
10018018:	2700      	movs	r7, #0
1001801a:	b2ed      	uxtb	r5, r5
1001801c:	e760      	b.n	10017ee0 <__aeabi_dsub+0x520>
1001801e:	0007      	movs	r7, r0
10018020:	000d      	movs	r5, r1
10018022:	4c0f      	ldr	r4, [pc, #60]	; (10018060 <__aeabi_dsub+0x6a0>)
10018024:	e4f8      	b.n	10017a18 <__aeabi_dsub+0x58>
10018026:	0007      	movs	r7, r0
10018028:	000d      	movs	r5, r1
1001802a:	e4f5      	b.n	10017a18 <__aeabi_dsub+0x58>
1001802c:	464e      	mov	r6, r9
1001802e:	003c      	movs	r4, r7
10018030:	3e20      	subs	r6, #32
10018032:	40f4      	lsrs	r4, r6
10018034:	46a0      	mov	r8, r4
10018036:	464c      	mov	r4, r9
10018038:	2c20      	cmp	r4, #32
1001803a:	d00e      	beq.n	1001805a <__aeabi_dsub+0x69a>
1001803c:	2440      	movs	r4, #64	; 0x40
1001803e:	464e      	mov	r6, r9
10018040:	1ba4      	subs	r4, r4, r6
10018042:	40a7      	lsls	r7, r4
10018044:	433d      	orrs	r5, r7
10018046:	1e6f      	subs	r7, r5, #1
10018048:	41bd      	sbcs	r5, r7
1001804a:	4644      	mov	r4, r8
1001804c:	2700      	movs	r7, #0
1001804e:	4325      	orrs	r5, r4
10018050:	e746      	b.n	10017ee0 <__aeabi_dsub+0x520>
10018052:	2700      	movs	r7, #0
10018054:	e7cf      	b.n	10017ff6 <__aeabi_dsub+0x636>
10018056:	000d      	movs	r5, r1
10018058:	e573      	b.n	10017b42 <__aeabi_dsub+0x182>
1001805a:	2700      	movs	r7, #0
1001805c:	e7f2      	b.n	10018044 <__aeabi_dsub+0x684>
1001805e:	46c0      	nop			; (mov r8, r8)
10018060:	000007ff 	.word	0x000007ff
10018064:	ff7fffff 	.word	0xff7fffff

10018068 <__aeabi_d2iz>:
10018068:	030b      	lsls	r3, r1, #12
1001806a:	b530      	push	{r4, r5, lr}
1001806c:	4d13      	ldr	r5, [pc, #76]	; (100180bc <__aeabi_d2iz+0x54>)
1001806e:	0b1a      	lsrs	r2, r3, #12
10018070:	004b      	lsls	r3, r1, #1
10018072:	0d5b      	lsrs	r3, r3, #21
10018074:	0fc9      	lsrs	r1, r1, #31
10018076:	2400      	movs	r4, #0
10018078:	42ab      	cmp	r3, r5
1001807a:	dd11      	ble.n	100180a0 <__aeabi_d2iz+0x38>
1001807c:	4c10      	ldr	r4, [pc, #64]	; (100180c0 <__aeabi_d2iz+0x58>)
1001807e:	42a3      	cmp	r3, r4
10018080:	dc10      	bgt.n	100180a4 <__aeabi_d2iz+0x3c>
10018082:	2480      	movs	r4, #128	; 0x80
10018084:	0364      	lsls	r4, r4, #13
10018086:	4322      	orrs	r2, r4
10018088:	4c0e      	ldr	r4, [pc, #56]	; (100180c4 <__aeabi_d2iz+0x5c>)
1001808a:	1ae4      	subs	r4, r4, r3
1001808c:	2c1f      	cmp	r4, #31
1001808e:	dd0c      	ble.n	100180aa <__aeabi_d2iz+0x42>
10018090:	480d      	ldr	r0, [pc, #52]	; (100180c8 <__aeabi_d2iz+0x60>)
10018092:	1ac3      	subs	r3, r0, r3
10018094:	40da      	lsrs	r2, r3
10018096:	0013      	movs	r3, r2
10018098:	425c      	negs	r4, r3
1001809a:	2900      	cmp	r1, #0
1001809c:	d100      	bne.n	100180a0 <__aeabi_d2iz+0x38>
1001809e:	001c      	movs	r4, r3
100180a0:	0020      	movs	r0, r4
100180a2:	bd30      	pop	{r4, r5, pc}
100180a4:	4b09      	ldr	r3, [pc, #36]	; (100180cc <__aeabi_d2iz+0x64>)
100180a6:	18cc      	adds	r4, r1, r3
100180a8:	e7fa      	b.n	100180a0 <__aeabi_d2iz+0x38>
100180aa:	40e0      	lsrs	r0, r4
100180ac:	4c08      	ldr	r4, [pc, #32]	; (100180d0 <__aeabi_d2iz+0x68>)
100180ae:	46a4      	mov	ip, r4
100180b0:	4463      	add	r3, ip
100180b2:	409a      	lsls	r2, r3
100180b4:	0013      	movs	r3, r2
100180b6:	4303      	orrs	r3, r0
100180b8:	e7ee      	b.n	10018098 <__aeabi_d2iz+0x30>
100180ba:	46c0      	nop			; (mov r8, r8)
100180bc:	000003fe 	.word	0x000003fe
100180c0:	0000041d 	.word	0x0000041d
100180c4:	00000433 	.word	0x00000433
100180c8:	00000413 	.word	0x00000413
100180cc:	7fffffff 	.word	0x7fffffff
100180d0:	fffffbed 	.word	0xfffffbed

100180d4 <__aeabi_i2d>:
100180d4:	b570      	push	{r4, r5, r6, lr}
100180d6:	2800      	cmp	r0, #0
100180d8:	d030      	beq.n	1001813c <__aeabi_i2d+0x68>
100180da:	17c3      	asrs	r3, r0, #31
100180dc:	18c4      	adds	r4, r0, r3
100180de:	405c      	eors	r4, r3
100180e0:	0fc5      	lsrs	r5, r0, #31
100180e2:	0020      	movs	r0, r4
100180e4:	f000 f950 	bl	10018388 <__clzsi2>
100180e8:	4b17      	ldr	r3, [pc, #92]	; (10018148 <__aeabi_i2d+0x74>)
100180ea:	4a18      	ldr	r2, [pc, #96]	; (1001814c <__aeabi_i2d+0x78>)
100180ec:	1a1b      	subs	r3, r3, r0
100180ee:	1ad2      	subs	r2, r2, r3
100180f0:	2a1f      	cmp	r2, #31
100180f2:	dd18      	ble.n	10018126 <__aeabi_i2d+0x52>
100180f4:	4a16      	ldr	r2, [pc, #88]	; (10018150 <__aeabi_i2d+0x7c>)
100180f6:	1ad2      	subs	r2, r2, r3
100180f8:	4094      	lsls	r4, r2
100180fa:	2200      	movs	r2, #0
100180fc:	0324      	lsls	r4, r4, #12
100180fe:	055b      	lsls	r3, r3, #21
10018100:	0b24      	lsrs	r4, r4, #12
10018102:	0d5b      	lsrs	r3, r3, #21
10018104:	2100      	movs	r1, #0
10018106:	0010      	movs	r0, r2
10018108:	0324      	lsls	r4, r4, #12
1001810a:	0d0a      	lsrs	r2, r1, #20
1001810c:	0512      	lsls	r2, r2, #20
1001810e:	0b24      	lsrs	r4, r4, #12
10018110:	4314      	orrs	r4, r2
10018112:	4a10      	ldr	r2, [pc, #64]	; (10018154 <__aeabi_i2d+0x80>)
10018114:	051b      	lsls	r3, r3, #20
10018116:	4014      	ands	r4, r2
10018118:	431c      	orrs	r4, r3
1001811a:	0064      	lsls	r4, r4, #1
1001811c:	07ed      	lsls	r5, r5, #31
1001811e:	0864      	lsrs	r4, r4, #1
10018120:	432c      	orrs	r4, r5
10018122:	0021      	movs	r1, r4
10018124:	bd70      	pop	{r4, r5, r6, pc}
10018126:	0021      	movs	r1, r4
10018128:	4091      	lsls	r1, r2
1001812a:	000a      	movs	r2, r1
1001812c:	210b      	movs	r1, #11
1001812e:	1a08      	subs	r0, r1, r0
10018130:	40c4      	lsrs	r4, r0
10018132:	055b      	lsls	r3, r3, #21
10018134:	0324      	lsls	r4, r4, #12
10018136:	0b24      	lsrs	r4, r4, #12
10018138:	0d5b      	lsrs	r3, r3, #21
1001813a:	e7e3      	b.n	10018104 <__aeabi_i2d+0x30>
1001813c:	2500      	movs	r5, #0
1001813e:	2300      	movs	r3, #0
10018140:	2400      	movs	r4, #0
10018142:	2200      	movs	r2, #0
10018144:	e7de      	b.n	10018104 <__aeabi_i2d+0x30>
10018146:	46c0      	nop			; (mov r8, r8)
10018148:	0000041e 	.word	0x0000041e
1001814c:	00000433 	.word	0x00000433
10018150:	00000413 	.word	0x00000413
10018154:	800fffff 	.word	0x800fffff

10018158 <__aeabi_ui2d>:
10018158:	b570      	push	{r4, r5, r6, lr}
1001815a:	1e05      	subs	r5, r0, #0
1001815c:	d028      	beq.n	100181b0 <__aeabi_ui2d+0x58>
1001815e:	f000 f913 	bl	10018388 <__clzsi2>
10018162:	4b15      	ldr	r3, [pc, #84]	; (100181b8 <__aeabi_ui2d+0x60>)
10018164:	4a15      	ldr	r2, [pc, #84]	; (100181bc <__aeabi_ui2d+0x64>)
10018166:	1a1b      	subs	r3, r3, r0
10018168:	1ad2      	subs	r2, r2, r3
1001816a:	2a1f      	cmp	r2, #31
1001816c:	dd16      	ble.n	1001819c <__aeabi_ui2d+0x44>
1001816e:	002c      	movs	r4, r5
10018170:	4a13      	ldr	r2, [pc, #76]	; (100181c0 <__aeabi_ui2d+0x68>)
10018172:	2500      	movs	r5, #0
10018174:	1ad2      	subs	r2, r2, r3
10018176:	4094      	lsls	r4, r2
10018178:	055a      	lsls	r2, r3, #21
1001817a:	0324      	lsls	r4, r4, #12
1001817c:	0b24      	lsrs	r4, r4, #12
1001817e:	0d52      	lsrs	r2, r2, #21
10018180:	2100      	movs	r1, #0
10018182:	0324      	lsls	r4, r4, #12
10018184:	0d0b      	lsrs	r3, r1, #20
10018186:	0b24      	lsrs	r4, r4, #12
10018188:	051b      	lsls	r3, r3, #20
1001818a:	4323      	orrs	r3, r4
1001818c:	4c0d      	ldr	r4, [pc, #52]	; (100181c4 <__aeabi_ui2d+0x6c>)
1001818e:	0512      	lsls	r2, r2, #20
10018190:	4023      	ands	r3, r4
10018192:	4313      	orrs	r3, r2
10018194:	005b      	lsls	r3, r3, #1
10018196:	0028      	movs	r0, r5
10018198:	0859      	lsrs	r1, r3, #1
1001819a:	bd70      	pop	{r4, r5, r6, pc}
1001819c:	210b      	movs	r1, #11
1001819e:	002c      	movs	r4, r5
100181a0:	1a08      	subs	r0, r1, r0
100181a2:	40c4      	lsrs	r4, r0
100181a4:	4095      	lsls	r5, r2
100181a6:	0324      	lsls	r4, r4, #12
100181a8:	055a      	lsls	r2, r3, #21
100181aa:	0b24      	lsrs	r4, r4, #12
100181ac:	0d52      	lsrs	r2, r2, #21
100181ae:	e7e7      	b.n	10018180 <__aeabi_ui2d+0x28>
100181b0:	2200      	movs	r2, #0
100181b2:	2400      	movs	r4, #0
100181b4:	e7e4      	b.n	10018180 <__aeabi_ui2d+0x28>
100181b6:	46c0      	nop			; (mov r8, r8)
100181b8:	0000041e 	.word	0x0000041e
100181bc:	00000433 	.word	0x00000433
100181c0:	00000413 	.word	0x00000413
100181c4:	800fffff 	.word	0x800fffff

100181c8 <__aeabi_f2d>:
100181c8:	0042      	lsls	r2, r0, #1
100181ca:	0e12      	lsrs	r2, r2, #24
100181cc:	1c51      	adds	r1, r2, #1
100181ce:	0243      	lsls	r3, r0, #9
100181d0:	b2c9      	uxtb	r1, r1
100181d2:	b570      	push	{r4, r5, r6, lr}
100181d4:	0a5d      	lsrs	r5, r3, #9
100181d6:	0fc4      	lsrs	r4, r0, #31
100181d8:	2901      	cmp	r1, #1
100181da:	dd15      	ble.n	10018208 <__aeabi_f2d+0x40>
100181dc:	21e0      	movs	r1, #224	; 0xe0
100181de:	0089      	lsls	r1, r1, #2
100181e0:	468c      	mov	ip, r1
100181e2:	076d      	lsls	r5, r5, #29
100181e4:	0b1b      	lsrs	r3, r3, #12
100181e6:	4462      	add	r2, ip
100181e8:	2100      	movs	r1, #0
100181ea:	0028      	movs	r0, r5
100181ec:	0d0d      	lsrs	r5, r1, #20
100181ee:	052d      	lsls	r5, r5, #20
100181f0:	432b      	orrs	r3, r5
100181f2:	4d1c      	ldr	r5, [pc, #112]	; (10018264 <__aeabi_f2d+0x9c>)
100181f4:	0552      	lsls	r2, r2, #21
100181f6:	402b      	ands	r3, r5
100181f8:	0852      	lsrs	r2, r2, #1
100181fa:	4313      	orrs	r3, r2
100181fc:	005b      	lsls	r3, r3, #1
100181fe:	07e4      	lsls	r4, r4, #31
10018200:	085b      	lsrs	r3, r3, #1
10018202:	4323      	orrs	r3, r4
10018204:	0019      	movs	r1, r3
10018206:	bd70      	pop	{r4, r5, r6, pc}
10018208:	2a00      	cmp	r2, #0
1001820a:	d115      	bne.n	10018238 <__aeabi_f2d+0x70>
1001820c:	2d00      	cmp	r5, #0
1001820e:	d01f      	beq.n	10018250 <__aeabi_f2d+0x88>
10018210:	0028      	movs	r0, r5
10018212:	f000 f8b9 	bl	10018388 <__clzsi2>
10018216:	280a      	cmp	r0, #10
10018218:	dc1d      	bgt.n	10018256 <__aeabi_f2d+0x8e>
1001821a:	230b      	movs	r3, #11
1001821c:	002a      	movs	r2, r5
1001821e:	1a1b      	subs	r3, r3, r0
10018220:	40da      	lsrs	r2, r3
10018222:	0013      	movs	r3, r2
10018224:	0002      	movs	r2, r0
10018226:	3215      	adds	r2, #21
10018228:	4095      	lsls	r5, r2
1001822a:	4a0f      	ldr	r2, [pc, #60]	; (10018268 <__aeabi_f2d+0xa0>)
1001822c:	031b      	lsls	r3, r3, #12
1001822e:	1a12      	subs	r2, r2, r0
10018230:	0552      	lsls	r2, r2, #21
10018232:	0b1b      	lsrs	r3, r3, #12
10018234:	0d52      	lsrs	r2, r2, #21
10018236:	e7d7      	b.n	100181e8 <__aeabi_f2d+0x20>
10018238:	2d00      	cmp	r5, #0
1001823a:	d006      	beq.n	1001824a <__aeabi_f2d+0x82>
1001823c:	2280      	movs	r2, #128	; 0x80
1001823e:	0b1b      	lsrs	r3, r3, #12
10018240:	0312      	lsls	r2, r2, #12
10018242:	4313      	orrs	r3, r2
10018244:	076d      	lsls	r5, r5, #29
10018246:	4a09      	ldr	r2, [pc, #36]	; (1001826c <__aeabi_f2d+0xa4>)
10018248:	e7ce      	b.n	100181e8 <__aeabi_f2d+0x20>
1001824a:	4a08      	ldr	r2, [pc, #32]	; (1001826c <__aeabi_f2d+0xa4>)
1001824c:	2300      	movs	r3, #0
1001824e:	e7cb      	b.n	100181e8 <__aeabi_f2d+0x20>
10018250:	2200      	movs	r2, #0
10018252:	2300      	movs	r3, #0
10018254:	e7c8      	b.n	100181e8 <__aeabi_f2d+0x20>
10018256:	0003      	movs	r3, r0
10018258:	3b0b      	subs	r3, #11
1001825a:	409d      	lsls	r5, r3
1001825c:	002b      	movs	r3, r5
1001825e:	2500      	movs	r5, #0
10018260:	e7e3      	b.n	1001822a <__aeabi_f2d+0x62>
10018262:	46c0      	nop			; (mov r8, r8)
10018264:	800fffff 	.word	0x800fffff
10018268:	00000389 	.word	0x00000389
1001826c:	000007ff 	.word	0x000007ff

10018270 <__aeabi_d2f>:
10018270:	004b      	lsls	r3, r1, #1
10018272:	b570      	push	{r4, r5, r6, lr}
10018274:	0d5e      	lsrs	r6, r3, #21
10018276:	030c      	lsls	r4, r1, #12
10018278:	1c75      	adds	r5, r6, #1
1001827a:	0a64      	lsrs	r4, r4, #9
1001827c:	0f42      	lsrs	r2, r0, #29
1001827e:	056d      	lsls	r5, r5, #21
10018280:	4322      	orrs	r2, r4
10018282:	0fc9      	lsrs	r1, r1, #31
10018284:	00c4      	lsls	r4, r0, #3
10018286:	0d6d      	lsrs	r5, r5, #21
10018288:	2d01      	cmp	r5, #1
1001828a:	dd2a      	ble.n	100182e2 <__aeabi_d2f+0x72>
1001828c:	4b3b      	ldr	r3, [pc, #236]	; (1001837c <__aeabi_d2f+0x10c>)
1001828e:	18f3      	adds	r3, r6, r3
10018290:	2bfe      	cmp	r3, #254	; 0xfe
10018292:	dc1a      	bgt.n	100182ca <__aeabi_d2f+0x5a>
10018294:	2b00      	cmp	r3, #0
10018296:	dd42      	ble.n	1001831e <__aeabi_d2f+0xae>
10018298:	0180      	lsls	r0, r0, #6
1001829a:	1e45      	subs	r5, r0, #1
1001829c:	41a8      	sbcs	r0, r5
1001829e:	00d2      	lsls	r2, r2, #3
100182a0:	4310      	orrs	r0, r2
100182a2:	0f62      	lsrs	r2, r4, #29
100182a4:	4302      	orrs	r2, r0
100182a6:	0750      	lsls	r0, r2, #29
100182a8:	d004      	beq.n	100182b4 <__aeabi_d2f+0x44>
100182aa:	200f      	movs	r0, #15
100182ac:	4010      	ands	r0, r2
100182ae:	2804      	cmp	r0, #4
100182b0:	d000      	beq.n	100182b4 <__aeabi_d2f+0x44>
100182b2:	3204      	adds	r2, #4
100182b4:	2080      	movs	r0, #128	; 0x80
100182b6:	04c0      	lsls	r0, r0, #19
100182b8:	4010      	ands	r0, r2
100182ba:	d021      	beq.n	10018300 <__aeabi_d2f+0x90>
100182bc:	3301      	adds	r3, #1
100182be:	2bff      	cmp	r3, #255	; 0xff
100182c0:	d003      	beq.n	100182ca <__aeabi_d2f+0x5a>
100182c2:	0192      	lsls	r2, r2, #6
100182c4:	0a52      	lsrs	r2, r2, #9
100182c6:	b2db      	uxtb	r3, r3
100182c8:	e001      	b.n	100182ce <__aeabi_d2f+0x5e>
100182ca:	23ff      	movs	r3, #255	; 0xff
100182cc:	2200      	movs	r2, #0
100182ce:	0252      	lsls	r2, r2, #9
100182d0:	0a52      	lsrs	r2, r2, #9
100182d2:	05db      	lsls	r3, r3, #23
100182d4:	4313      	orrs	r3, r2
100182d6:	005b      	lsls	r3, r3, #1
100182d8:	07c9      	lsls	r1, r1, #31
100182da:	085b      	lsrs	r3, r3, #1
100182dc:	430b      	orrs	r3, r1
100182de:	0018      	movs	r0, r3
100182e0:	bd70      	pop	{r4, r5, r6, pc}
100182e2:	2e00      	cmp	r6, #0
100182e4:	d007      	beq.n	100182f6 <__aeabi_d2f+0x86>
100182e6:	4314      	orrs	r4, r2
100182e8:	d0ef      	beq.n	100182ca <__aeabi_d2f+0x5a>
100182ea:	2080      	movs	r0, #128	; 0x80
100182ec:	00d2      	lsls	r2, r2, #3
100182ee:	0480      	lsls	r0, r0, #18
100182f0:	4302      	orrs	r2, r0
100182f2:	23ff      	movs	r3, #255	; 0xff
100182f4:	e7d7      	b.n	100182a6 <__aeabi_d2f+0x36>
100182f6:	4322      	orrs	r2, r4
100182f8:	2300      	movs	r3, #0
100182fa:	2a00      	cmp	r2, #0
100182fc:	d003      	beq.n	10018306 <__aeabi_d2f+0x96>
100182fe:	2205      	movs	r2, #5
10018300:	08d2      	lsrs	r2, r2, #3
10018302:	2bff      	cmp	r3, #255	; 0xff
10018304:	d003      	beq.n	1001830e <__aeabi_d2f+0x9e>
10018306:	0252      	lsls	r2, r2, #9
10018308:	0a52      	lsrs	r2, r2, #9
1001830a:	b2db      	uxtb	r3, r3
1001830c:	e7df      	b.n	100182ce <__aeabi_d2f+0x5e>
1001830e:	2a00      	cmp	r2, #0
10018310:	d032      	beq.n	10018378 <__aeabi_d2f+0x108>
10018312:	2080      	movs	r0, #128	; 0x80
10018314:	03c0      	lsls	r0, r0, #15
10018316:	4302      	orrs	r2, r0
10018318:	0252      	lsls	r2, r2, #9
1001831a:	0a52      	lsrs	r2, r2, #9
1001831c:	e7d7      	b.n	100182ce <__aeabi_d2f+0x5e>
1001831e:	0018      	movs	r0, r3
10018320:	3017      	adds	r0, #23
10018322:	db14      	blt.n	1001834e <__aeabi_d2f+0xde>
10018324:	2080      	movs	r0, #128	; 0x80
10018326:	0400      	lsls	r0, r0, #16
10018328:	4302      	orrs	r2, r0
1001832a:	201e      	movs	r0, #30
1001832c:	1ac0      	subs	r0, r0, r3
1001832e:	281f      	cmp	r0, #31
10018330:	dc0f      	bgt.n	10018352 <__aeabi_d2f+0xe2>
10018332:	0025      	movs	r5, r4
10018334:	4b12      	ldr	r3, [pc, #72]	; (10018380 <__aeabi_d2f+0x110>)
10018336:	18f3      	adds	r3, r6, r3
10018338:	409d      	lsls	r5, r3
1001833a:	1e6e      	subs	r6, r5, #1
1001833c:	41b5      	sbcs	r5, r6
1001833e:	409a      	lsls	r2, r3
10018340:	002b      	movs	r3, r5
10018342:	4313      	orrs	r3, r2
10018344:	0022      	movs	r2, r4
10018346:	40c2      	lsrs	r2, r0
10018348:	431a      	orrs	r2, r3
1001834a:	2300      	movs	r3, #0
1001834c:	e7ab      	b.n	100182a6 <__aeabi_d2f+0x36>
1001834e:	2300      	movs	r3, #0
10018350:	e7d5      	b.n	100182fe <__aeabi_d2f+0x8e>
10018352:	2502      	movs	r5, #2
10018354:	426d      	negs	r5, r5
10018356:	1aeb      	subs	r3, r5, r3
10018358:	0015      	movs	r5, r2
1001835a:	40dd      	lsrs	r5, r3
1001835c:	2820      	cmp	r0, #32
1001835e:	d009      	beq.n	10018374 <__aeabi_d2f+0x104>
10018360:	4b08      	ldr	r3, [pc, #32]	; (10018384 <__aeabi_d2f+0x114>)
10018362:	18f3      	adds	r3, r6, r3
10018364:	409a      	lsls	r2, r3
10018366:	4314      	orrs	r4, r2
10018368:	1e62      	subs	r2, r4, #1
1001836a:	4194      	sbcs	r4, r2
1001836c:	0022      	movs	r2, r4
1001836e:	2300      	movs	r3, #0
10018370:	432a      	orrs	r2, r5
10018372:	e798      	b.n	100182a6 <__aeabi_d2f+0x36>
10018374:	2200      	movs	r2, #0
10018376:	e7f6      	b.n	10018366 <__aeabi_d2f+0xf6>
10018378:	2200      	movs	r2, #0
1001837a:	e7a8      	b.n	100182ce <__aeabi_d2f+0x5e>
1001837c:	fffffc80 	.word	0xfffffc80
10018380:	fffffc82 	.word	0xfffffc82
10018384:	fffffca2 	.word	0xfffffca2

10018388 <__clzsi2>:
10018388:	211c      	movs	r1, #28
1001838a:	2301      	movs	r3, #1
1001838c:	041b      	lsls	r3, r3, #16
1001838e:	4298      	cmp	r0, r3
10018390:	d301      	bcc.n	10018396 <__clzsi2+0xe>
10018392:	0c00      	lsrs	r0, r0, #16
10018394:	3910      	subs	r1, #16
10018396:	0a1b      	lsrs	r3, r3, #8
10018398:	4298      	cmp	r0, r3
1001839a:	d301      	bcc.n	100183a0 <__clzsi2+0x18>
1001839c:	0a00      	lsrs	r0, r0, #8
1001839e:	3908      	subs	r1, #8
100183a0:	091b      	lsrs	r3, r3, #4
100183a2:	4298      	cmp	r0, r3
100183a4:	d301      	bcc.n	100183aa <__clzsi2+0x22>
100183a6:	0900      	lsrs	r0, r0, #4
100183a8:	3904      	subs	r1, #4
100183aa:	a202      	add	r2, pc, #8	; (adr r2, 100183b4 <__clzsi2+0x2c>)
100183ac:	5c10      	ldrb	r0, [r2, r0]
100183ae:	1840      	adds	r0, r0, r1
100183b0:	4770      	bx	lr
100183b2:	46c0      	nop			; (mov r8, r8)
100183b4:	02020304 	.word	0x02020304
100183b8:	01010101 	.word	0x01010101
	...

100183c4 <__divdi3>:
100183c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100183c6:	4644      	mov	r4, r8
100183c8:	465f      	mov	r7, fp
100183ca:	4656      	mov	r6, sl
100183cc:	464d      	mov	r5, r9
100183ce:	b4f0      	push	{r4, r5, r6, r7}
100183d0:	001c      	movs	r4, r3
100183d2:	b083      	sub	sp, #12
100183d4:	2900      	cmp	r1, #0
100183d6:	da00      	bge.n	100183da <__divdi3+0x16>
100183d8:	e092      	b.n	10018500 <__divdi3+0x13c>
100183da:	000f      	movs	r7, r1
100183dc:	2100      	movs	r1, #0
100183de:	0006      	movs	r6, r0
100183e0:	468a      	mov	sl, r1
100183e2:	0010      	movs	r0, r2
100183e4:	0019      	movs	r1, r3
100183e6:	2c00      	cmp	r4, #0
100183e8:	da00      	bge.n	100183ec <__divdi3+0x28>
100183ea:	e080      	b.n	100184ee <__divdi3+0x12a>
100183ec:	0034      	movs	r4, r6
100183ee:	003d      	movs	r5, r7
100183f0:	4681      	mov	r9, r0
100183f2:	4688      	mov	r8, r1
100183f4:	42b9      	cmp	r1, r7
100183f6:	d869      	bhi.n	100184cc <__divdi3+0x108>
100183f8:	d066      	beq.n	100184c8 <__divdi3+0x104>
100183fa:	4641      	mov	r1, r8
100183fc:	4648      	mov	r0, r9
100183fe:	f000 f8bf 	bl	10018580 <__clzdi2>
10018402:	4683      	mov	fp, r0
10018404:	0039      	movs	r1, r7
10018406:	0030      	movs	r0, r6
10018408:	f000 f8ba 	bl	10018580 <__clzdi2>
1001840c:	465b      	mov	r3, fp
1001840e:	1a1b      	subs	r3, r3, r0
10018410:	469c      	mov	ip, r3
10018412:	3b20      	subs	r3, #32
10018414:	469b      	mov	fp, r3
10018416:	d500      	bpl.n	1001841a <__divdi3+0x56>
10018418:	e086      	b.n	10018528 <__divdi3+0x164>
1001841a:	4649      	mov	r1, r9
1001841c:	4658      	mov	r0, fp
1001841e:	4081      	lsls	r1, r0
10018420:	000b      	movs	r3, r1
10018422:	4649      	mov	r1, r9
10018424:	4660      	mov	r0, ip
10018426:	4081      	lsls	r1, r0
10018428:	000a      	movs	r2, r1
1001842a:	42bb      	cmp	r3, r7
1001842c:	d900      	bls.n	10018430 <__divdi3+0x6c>
1001842e:	e071      	b.n	10018514 <__divdi3+0x150>
10018430:	d06d      	beq.n	1001850e <__divdi3+0x14a>
10018432:	0034      	movs	r4, r6
10018434:	003d      	movs	r5, r7
10018436:	4659      	mov	r1, fp
10018438:	1aa4      	subs	r4, r4, r2
1001843a:	419d      	sbcs	r5, r3
1001843c:	2900      	cmp	r1, #0
1001843e:	da00      	bge.n	10018442 <__divdi3+0x7e>
10018440:	e089      	b.n	10018556 <__divdi3+0x192>
10018442:	2100      	movs	r1, #0
10018444:	2000      	movs	r0, #0
10018446:	2601      	movs	r6, #1
10018448:	9000      	str	r0, [sp, #0]
1001844a:	9101      	str	r1, [sp, #4]
1001844c:	4659      	mov	r1, fp
1001844e:	408e      	lsls	r6, r1
10018450:	9601      	str	r6, [sp, #4]
10018452:	4661      	mov	r1, ip
10018454:	2601      	movs	r6, #1
10018456:	408e      	lsls	r6, r1
10018458:	4661      	mov	r1, ip
1001845a:	9600      	str	r6, [sp, #0]
1001845c:	2900      	cmp	r1, #0
1001845e:	d060      	beq.n	10018522 <__divdi3+0x15e>
10018460:	07d9      	lsls	r1, r3, #31
10018462:	0856      	lsrs	r6, r2, #1
10018464:	430e      	orrs	r6, r1
10018466:	085f      	lsrs	r7, r3, #1
10018468:	4661      	mov	r1, ip
1001846a:	2201      	movs	r2, #1
1001846c:	2300      	movs	r3, #0
1001846e:	e00c      	b.n	1001848a <__divdi3+0xc6>
10018470:	42af      	cmp	r7, r5
10018472:	d101      	bne.n	10018478 <__divdi3+0xb4>
10018474:	42a6      	cmp	r6, r4
10018476:	d80a      	bhi.n	1001848e <__divdi3+0xca>
10018478:	1ba4      	subs	r4, r4, r6
1001847a:	41bd      	sbcs	r5, r7
1001847c:	1924      	adds	r4, r4, r4
1001847e:	416d      	adcs	r5, r5
10018480:	3901      	subs	r1, #1
10018482:	18a4      	adds	r4, r4, r2
10018484:	415d      	adcs	r5, r3
10018486:	2900      	cmp	r1, #0
10018488:	d006      	beq.n	10018498 <__divdi3+0xd4>
1001848a:	42af      	cmp	r7, r5
1001848c:	d9f0      	bls.n	10018470 <__divdi3+0xac>
1001848e:	3901      	subs	r1, #1
10018490:	1924      	adds	r4, r4, r4
10018492:	416d      	adcs	r5, r5
10018494:	2900      	cmp	r1, #0
10018496:	d1f8      	bne.n	1001848a <__divdi3+0xc6>
10018498:	465b      	mov	r3, fp
1001849a:	9800      	ldr	r0, [sp, #0]
1001849c:	9901      	ldr	r1, [sp, #4]
1001849e:	1900      	adds	r0, r0, r4
100184a0:	4169      	adcs	r1, r5
100184a2:	2b00      	cmp	r3, #0
100184a4:	db4c      	blt.n	10018540 <__divdi3+0x17c>
100184a6:	002e      	movs	r6, r5
100184a8:	40de      	lsrs	r6, r3
100184aa:	4663      	mov	r3, ip
100184ac:	002c      	movs	r4, r5
100184ae:	40dc      	lsrs	r4, r3
100184b0:	465b      	mov	r3, fp
100184b2:	2b00      	cmp	r3, #0
100184b4:	db5a      	blt.n	1001856c <__divdi3+0x1a8>
100184b6:	0034      	movs	r4, r6
100184b8:	409c      	lsls	r4, r3
100184ba:	0023      	movs	r3, r4
100184bc:	4664      	mov	r4, ip
100184be:	40a6      	lsls	r6, r4
100184c0:	0032      	movs	r2, r6
100184c2:	1a80      	subs	r0, r0, r2
100184c4:	4199      	sbcs	r1, r3
100184c6:	e003      	b.n	100184d0 <__divdi3+0x10c>
100184c8:	42b0      	cmp	r0, r6
100184ca:	d996      	bls.n	100183fa <__divdi3+0x36>
100184cc:	2000      	movs	r0, #0
100184ce:	2100      	movs	r1, #0
100184d0:	4653      	mov	r3, sl
100184d2:	2b00      	cmp	r3, #0
100184d4:	d004      	beq.n	100184e0 <__divdi3+0x11c>
100184d6:	0003      	movs	r3, r0
100184d8:	000c      	movs	r4, r1
100184da:	2100      	movs	r1, #0
100184dc:	4258      	negs	r0, r3
100184de:	41a1      	sbcs	r1, r4
100184e0:	b003      	add	sp, #12
100184e2:	bc3c      	pop	{r2, r3, r4, r5}
100184e4:	4690      	mov	r8, r2
100184e6:	4699      	mov	r9, r3
100184e8:	46a2      	mov	sl, r4
100184ea:	46ab      	mov	fp, r5
100184ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100184ee:	4653      	mov	r3, sl
100184f0:	43db      	mvns	r3, r3
100184f2:	000c      	movs	r4, r1
100184f4:	469a      	mov	sl, r3
100184f6:	0013      	movs	r3, r2
100184f8:	2100      	movs	r1, #0
100184fa:	4258      	negs	r0, r3
100184fc:	41a1      	sbcs	r1, r4
100184fe:	e775      	b.n	100183ec <__divdi3+0x28>
10018500:	2700      	movs	r7, #0
10018502:	4246      	negs	r6, r0
10018504:	418f      	sbcs	r7, r1
10018506:	2101      	movs	r1, #1
10018508:	4249      	negs	r1, r1
1001850a:	468a      	mov	sl, r1
1001850c:	e769      	b.n	100183e2 <__divdi3+0x1e>
1001850e:	42b1      	cmp	r1, r6
10018510:	d800      	bhi.n	10018514 <__divdi3+0x150>
10018512:	e78e      	b.n	10018432 <__divdi3+0x6e>
10018514:	2100      	movs	r1, #0
10018516:	2000      	movs	r0, #0
10018518:	9000      	str	r0, [sp, #0]
1001851a:	9101      	str	r1, [sp, #4]
1001851c:	4661      	mov	r1, ip
1001851e:	2900      	cmp	r1, #0
10018520:	d19e      	bne.n	10018460 <__divdi3+0x9c>
10018522:	9800      	ldr	r0, [sp, #0]
10018524:	9901      	ldr	r1, [sp, #4]
10018526:	e7d3      	b.n	100184d0 <__divdi3+0x10c>
10018528:	4662      	mov	r2, ip
1001852a:	4640      	mov	r0, r8
1001852c:	2320      	movs	r3, #32
1001852e:	4649      	mov	r1, r9
10018530:	4090      	lsls	r0, r2
10018532:	1a9b      	subs	r3, r3, r2
10018534:	40d9      	lsrs	r1, r3
10018536:	0003      	movs	r3, r0
10018538:	9100      	str	r1, [sp, #0]
1001853a:	9900      	ldr	r1, [sp, #0]
1001853c:	430b      	orrs	r3, r1
1001853e:	e770      	b.n	10018422 <__divdi3+0x5e>
10018540:	4662      	mov	r2, ip
10018542:	2320      	movs	r3, #32
10018544:	1a9b      	subs	r3, r3, r2
10018546:	002a      	movs	r2, r5
10018548:	409a      	lsls	r2, r3
1001854a:	0026      	movs	r6, r4
1001854c:	0013      	movs	r3, r2
1001854e:	4662      	mov	r2, ip
10018550:	40d6      	lsrs	r6, r2
10018552:	431e      	orrs	r6, r3
10018554:	e7a9      	b.n	100184aa <__divdi3+0xe6>
10018556:	4661      	mov	r1, ip
10018558:	2620      	movs	r6, #32
1001855a:	2701      	movs	r7, #1
1001855c:	1a76      	subs	r6, r6, r1
1001855e:	2000      	movs	r0, #0
10018560:	2100      	movs	r1, #0
10018562:	40f7      	lsrs	r7, r6
10018564:	9000      	str	r0, [sp, #0]
10018566:	9101      	str	r1, [sp, #4]
10018568:	9701      	str	r7, [sp, #4]
1001856a:	e772      	b.n	10018452 <__divdi3+0x8e>
1001856c:	4662      	mov	r2, ip
1001856e:	2320      	movs	r3, #32
10018570:	0035      	movs	r5, r6
10018572:	4094      	lsls	r4, r2
10018574:	1a9b      	subs	r3, r3, r2
10018576:	40dd      	lsrs	r5, r3
10018578:	0023      	movs	r3, r4
1001857a:	432b      	orrs	r3, r5
1001857c:	e79e      	b.n	100184bc <__divdi3+0xf8>
1001857e:	46c0      	nop			; (mov r8, r8)

10018580 <__clzdi2>:
10018580:	b510      	push	{r4, lr}
10018582:	2900      	cmp	r1, #0
10018584:	d103      	bne.n	1001858e <__clzdi2+0xe>
10018586:	f7ff feff 	bl	10018388 <__clzsi2>
1001858a:	3020      	adds	r0, #32
1001858c:	e002      	b.n	10018594 <__clzdi2+0x14>
1001858e:	1c08      	adds	r0, r1, #0
10018590:	f7ff fefa 	bl	10018388 <__clzsi2>
10018594:	bd10      	pop	{r4, pc}
10018596:	46c0      	nop			; (mov r8, r8)

10018598 <__errno>:
10018598:	4b01      	ldr	r3, [pc, #4]	; (100185a0 <__errno+0x8>)
1001859a:	6818      	ldr	r0, [r3, #0]
1001859c:	4770      	bx	lr
1001859e:	46c0      	nop			; (mov r8, r8)
100185a0:	1001b9dc 	.word	0x1001b9dc

100185a4 <__libc_init_array>:
100185a4:	4b0e      	ldr	r3, [pc, #56]	; (100185e0 <__libc_init_array+0x3c>)
100185a6:	b570      	push	{r4, r5, r6, lr}
100185a8:	2500      	movs	r5, #0
100185aa:	001e      	movs	r6, r3
100185ac:	4c0d      	ldr	r4, [pc, #52]	; (100185e4 <__libc_init_array+0x40>)
100185ae:	1ae4      	subs	r4, r4, r3
100185b0:	10a4      	asrs	r4, r4, #2
100185b2:	42a5      	cmp	r5, r4
100185b4:	d004      	beq.n	100185c0 <__libc_init_array+0x1c>
100185b6:	00ab      	lsls	r3, r5, #2
100185b8:	58f3      	ldr	r3, [r6, r3]
100185ba:	4798      	blx	r3
100185bc:	3501      	adds	r5, #1
100185be:	e7f8      	b.n	100185b2 <__libc_init_array+0xe>
100185c0:	f003 f99a 	bl	1001b8f8 <_init>
100185c4:	4b08      	ldr	r3, [pc, #32]	; (100185e8 <__libc_init_array+0x44>)
100185c6:	2500      	movs	r5, #0
100185c8:	001e      	movs	r6, r3
100185ca:	4c08      	ldr	r4, [pc, #32]	; (100185ec <__libc_init_array+0x48>)
100185cc:	1ae4      	subs	r4, r4, r3
100185ce:	10a4      	asrs	r4, r4, #2
100185d0:	42a5      	cmp	r5, r4
100185d2:	d004      	beq.n	100185de <__libc_init_array+0x3a>
100185d4:	00ab      	lsls	r3, r5, #2
100185d6:	58f3      	ldr	r3, [r6, r3]
100185d8:	4798      	blx	r3
100185da:	3501      	adds	r5, #1
100185dc:	e7f8      	b.n	100185d0 <__libc_init_array+0x2c>
100185de:	bd70      	pop	{r4, r5, r6, pc}
100185e0:	1001b904 	.word	0x1001b904
100185e4:	1001b904 	.word	0x1001b904
100185e8:	1001b904 	.word	0x1001b904
100185ec:	1001b908 	.word	0x1001b908

100185f0 <malloc>:
100185f0:	b510      	push	{r4, lr}
100185f2:	4b03      	ldr	r3, [pc, #12]	; (10018600 <malloc+0x10>)
100185f4:	0001      	movs	r1, r0
100185f6:	6818      	ldr	r0, [r3, #0]
100185f8:	f000 f880 	bl	100186fc <_malloc_r>
100185fc:	bd10      	pop	{r4, pc}
100185fe:	46c0      	nop			; (mov r8, r8)
10018600:	1001b9dc 	.word	0x1001b9dc

10018604 <memcmp>:
10018604:	b530      	push	{r4, r5, lr}
10018606:	2400      	movs	r4, #0
10018608:	42a2      	cmp	r2, r4
1001860a:	d008      	beq.n	1001861e <memcmp+0x1a>
1001860c:	5d03      	ldrb	r3, [r0, r4]
1001860e:	1c65      	adds	r5, r4, #1
10018610:	5d0c      	ldrb	r4, [r1, r4]
10018612:	42a3      	cmp	r3, r4
10018614:	d001      	beq.n	1001861a <memcmp+0x16>
10018616:	1b18      	subs	r0, r3, r4
10018618:	e002      	b.n	10018620 <memcmp+0x1c>
1001861a:	002c      	movs	r4, r5
1001861c:	e7f4      	b.n	10018608 <memcmp+0x4>
1001861e:	2000      	movs	r0, #0
10018620:	bd30      	pop	{r4, r5, pc}

10018622 <memcpy>:
10018622:	2300      	movs	r3, #0
10018624:	b510      	push	{r4, lr}
10018626:	429a      	cmp	r2, r3
10018628:	d003      	beq.n	10018632 <memcpy+0x10>
1001862a:	5ccc      	ldrb	r4, [r1, r3]
1001862c:	54c4      	strb	r4, [r0, r3]
1001862e:	3301      	adds	r3, #1
10018630:	e7f9      	b.n	10018626 <memcpy+0x4>
10018632:	bd10      	pop	{r4, pc}

10018634 <memmove>:
10018634:	b510      	push	{r4, lr}
10018636:	4288      	cmp	r0, r1
10018638:	d902      	bls.n	10018640 <memmove+0xc>
1001863a:	188b      	adds	r3, r1, r2
1001863c:	4298      	cmp	r0, r3
1001863e:	d301      	bcc.n	10018644 <memmove+0x10>
10018640:	2300      	movs	r3, #0
10018642:	e005      	b.n	10018650 <memmove+0x1c>
10018644:	1a9b      	subs	r3, r3, r2
10018646:	3a01      	subs	r2, #1
10018648:	d308      	bcc.n	1001865c <memmove+0x28>
1001864a:	5c99      	ldrb	r1, [r3, r2]
1001864c:	5481      	strb	r1, [r0, r2]
1001864e:	e7fa      	b.n	10018646 <memmove+0x12>
10018650:	4293      	cmp	r3, r2
10018652:	d003      	beq.n	1001865c <memmove+0x28>
10018654:	5ccc      	ldrb	r4, [r1, r3]
10018656:	54c4      	strb	r4, [r0, r3]
10018658:	3301      	adds	r3, #1
1001865a:	e7f9      	b.n	10018650 <memmove+0x1c>
1001865c:	bd10      	pop	{r4, pc}

1001865e <memset>:
1001865e:	0003      	movs	r3, r0
10018660:	1882      	adds	r2, r0, r2
10018662:	4293      	cmp	r3, r2
10018664:	d002      	beq.n	1001866c <memset+0xe>
10018666:	7019      	strb	r1, [r3, #0]
10018668:	3301      	adds	r3, #1
1001866a:	e7fa      	b.n	10018662 <memset+0x4>
1001866c:	4770      	bx	lr
	...

10018670 <_free_r>:
10018670:	b530      	push	{r4, r5, lr}
10018672:	2900      	cmp	r1, #0
10018674:	d03e      	beq.n	100186f4 <_free_r+0x84>
10018676:	3904      	subs	r1, #4
10018678:	680b      	ldr	r3, [r1, #0]
1001867a:	2b00      	cmp	r3, #0
1001867c:	da00      	bge.n	10018680 <_free_r+0x10>
1001867e:	18c9      	adds	r1, r1, r3
10018680:	4a1d      	ldr	r2, [pc, #116]	; (100186f8 <_free_r+0x88>)
10018682:	6813      	ldr	r3, [r2, #0]
10018684:	0014      	movs	r4, r2
10018686:	2b00      	cmp	r3, #0
10018688:	d102      	bne.n	10018690 <_free_r+0x20>
1001868a:	604b      	str	r3, [r1, #4]
1001868c:	6011      	str	r1, [r2, #0]
1001868e:	e031      	b.n	100186f4 <_free_r+0x84>
10018690:	428b      	cmp	r3, r1
10018692:	d90d      	bls.n	100186b0 <_free_r+0x40>
10018694:	680a      	ldr	r2, [r1, #0]
10018696:	1888      	adds	r0, r1, r2
10018698:	4283      	cmp	r3, r0
1001869a:	d103      	bne.n	100186a4 <_free_r+0x34>
1001869c:	6818      	ldr	r0, [r3, #0]
1001869e:	685b      	ldr	r3, [r3, #4]
100186a0:	1882      	adds	r2, r0, r2
100186a2:	600a      	str	r2, [r1, #0]
100186a4:	604b      	str	r3, [r1, #4]
100186a6:	6021      	str	r1, [r4, #0]
100186a8:	e024      	b.n	100186f4 <_free_r+0x84>
100186aa:	428a      	cmp	r2, r1
100186ac:	d803      	bhi.n	100186b6 <_free_r+0x46>
100186ae:	0013      	movs	r3, r2
100186b0:	685a      	ldr	r2, [r3, #4]
100186b2:	2a00      	cmp	r2, #0
100186b4:	d1f9      	bne.n	100186aa <_free_r+0x3a>
100186b6:	681d      	ldr	r5, [r3, #0]
100186b8:	195c      	adds	r4, r3, r5
100186ba:	428c      	cmp	r4, r1
100186bc:	d10b      	bne.n	100186d6 <_free_r+0x66>
100186be:	6809      	ldr	r1, [r1, #0]
100186c0:	1869      	adds	r1, r5, r1
100186c2:	1858      	adds	r0, r3, r1
100186c4:	6019      	str	r1, [r3, #0]
100186c6:	4282      	cmp	r2, r0
100186c8:	d114      	bne.n	100186f4 <_free_r+0x84>
100186ca:	6810      	ldr	r0, [r2, #0]
100186cc:	6852      	ldr	r2, [r2, #4]
100186ce:	1841      	adds	r1, r0, r1
100186d0:	6019      	str	r1, [r3, #0]
100186d2:	605a      	str	r2, [r3, #4]
100186d4:	e00e      	b.n	100186f4 <_free_r+0x84>
100186d6:	428c      	cmp	r4, r1
100186d8:	d902      	bls.n	100186e0 <_free_r+0x70>
100186da:	230c      	movs	r3, #12
100186dc:	6003      	str	r3, [r0, #0]
100186de:	e009      	b.n	100186f4 <_free_r+0x84>
100186e0:	6808      	ldr	r0, [r1, #0]
100186e2:	180c      	adds	r4, r1, r0
100186e4:	42a2      	cmp	r2, r4
100186e6:	d103      	bne.n	100186f0 <_free_r+0x80>
100186e8:	6814      	ldr	r4, [r2, #0]
100186ea:	6852      	ldr	r2, [r2, #4]
100186ec:	1820      	adds	r0, r4, r0
100186ee:	6008      	str	r0, [r1, #0]
100186f0:	604a      	str	r2, [r1, #4]
100186f2:	6059      	str	r1, [r3, #4]
100186f4:	bd30      	pop	{r4, r5, pc}
100186f6:	46c0      	nop			; (mov r8, r8)
100186f8:	1001d874 	.word	0x1001d874

100186fc <_malloc_r>:
100186fc:	2303      	movs	r3, #3
100186fe:	b570      	push	{r4, r5, r6, lr}
10018700:	1ccd      	adds	r5, r1, #3
10018702:	439d      	bics	r5, r3
10018704:	3508      	adds	r5, #8
10018706:	0006      	movs	r6, r0
10018708:	2d0c      	cmp	r5, #12
1001870a:	d201      	bcs.n	10018710 <_malloc_r+0x14>
1001870c:	250c      	movs	r5, #12
1001870e:	e005      	b.n	1001871c <_malloc_r+0x20>
10018710:	2d00      	cmp	r5, #0
10018712:	da03      	bge.n	1001871c <_malloc_r+0x20>
10018714:	230c      	movs	r3, #12
10018716:	2000      	movs	r0, #0
10018718:	6033      	str	r3, [r6, #0]
1001871a:	e040      	b.n	1001879e <_malloc_r+0xa2>
1001871c:	42a9      	cmp	r1, r5
1001871e:	d8f9      	bhi.n	10018714 <_malloc_r+0x18>
10018720:	4b1f      	ldr	r3, [pc, #124]	; (100187a0 <_malloc_r+0xa4>)
10018722:	681c      	ldr	r4, [r3, #0]
10018724:	001a      	movs	r2, r3
10018726:	0021      	movs	r1, r4
10018728:	2900      	cmp	r1, #0
1001872a:	d013      	beq.n	10018754 <_malloc_r+0x58>
1001872c:	680b      	ldr	r3, [r1, #0]
1001872e:	1b5b      	subs	r3, r3, r5
10018730:	d40d      	bmi.n	1001874e <_malloc_r+0x52>
10018732:	2b0b      	cmp	r3, #11
10018734:	d902      	bls.n	1001873c <_malloc_r+0x40>
10018736:	600b      	str	r3, [r1, #0]
10018738:	18cc      	adds	r4, r1, r3
1001873a:	e01e      	b.n	1001877a <_malloc_r+0x7e>
1001873c:	428c      	cmp	r4, r1
1001873e:	d102      	bne.n	10018746 <_malloc_r+0x4a>
10018740:	6863      	ldr	r3, [r4, #4]
10018742:	6013      	str	r3, [r2, #0]
10018744:	e01a      	b.n	1001877c <_malloc_r+0x80>
10018746:	684b      	ldr	r3, [r1, #4]
10018748:	6063      	str	r3, [r4, #4]
1001874a:	000c      	movs	r4, r1
1001874c:	e016      	b.n	1001877c <_malloc_r+0x80>
1001874e:	000c      	movs	r4, r1
10018750:	6849      	ldr	r1, [r1, #4]
10018752:	e7e9      	b.n	10018728 <_malloc_r+0x2c>
10018754:	4c13      	ldr	r4, [pc, #76]	; (100187a4 <_malloc_r+0xa8>)
10018756:	6823      	ldr	r3, [r4, #0]
10018758:	2b00      	cmp	r3, #0
1001875a:	d103      	bne.n	10018764 <_malloc_r+0x68>
1001875c:	0030      	movs	r0, r6
1001875e:	f000 f8f9 	bl	10018954 <_sbrk_r>
10018762:	6020      	str	r0, [r4, #0]
10018764:	0029      	movs	r1, r5
10018766:	0030      	movs	r0, r6
10018768:	f000 f8f4 	bl	10018954 <_sbrk_r>
1001876c:	1c43      	adds	r3, r0, #1
1001876e:	d0d1      	beq.n	10018714 <_malloc_r+0x18>
10018770:	2303      	movs	r3, #3
10018772:	1cc4      	adds	r4, r0, #3
10018774:	439c      	bics	r4, r3
10018776:	42a0      	cmp	r0, r4
10018778:	d10a      	bne.n	10018790 <_malloc_r+0x94>
1001877a:	6025      	str	r5, [r4, #0]
1001877c:	0020      	movs	r0, r4
1001877e:	2207      	movs	r2, #7
10018780:	300b      	adds	r0, #11
10018782:	1d23      	adds	r3, r4, #4
10018784:	4390      	bics	r0, r2
10018786:	1ac3      	subs	r3, r0, r3
10018788:	d009      	beq.n	1001879e <_malloc_r+0xa2>
1001878a:	425a      	negs	r2, r3
1001878c:	50e2      	str	r2, [r4, r3]
1001878e:	e006      	b.n	1001879e <_malloc_r+0xa2>
10018790:	1a21      	subs	r1, r4, r0
10018792:	0030      	movs	r0, r6
10018794:	f000 f8de 	bl	10018954 <_sbrk_r>
10018798:	1c43      	adds	r3, r0, #1
1001879a:	d1ee      	bne.n	1001877a <_malloc_r+0x7e>
1001879c:	e7ba      	b.n	10018714 <_malloc_r+0x18>
1001879e:	bd70      	pop	{r4, r5, r6, pc}
100187a0:	1001d874 	.word	0x1001d874
100187a4:	1001d870 	.word	0x1001d870

100187a8 <iprintf>:
100187a8:	b40f      	push	{r0, r1, r2, r3}
100187aa:	4b0b      	ldr	r3, [pc, #44]	; (100187d8 <iprintf+0x30>)
100187ac:	b513      	push	{r0, r1, r4, lr}
100187ae:	681c      	ldr	r4, [r3, #0]
100187b0:	2c00      	cmp	r4, #0
100187b2:	d005      	beq.n	100187c0 <iprintf+0x18>
100187b4:	69a3      	ldr	r3, [r4, #24]
100187b6:	2b00      	cmp	r3, #0
100187b8:	d102      	bne.n	100187c0 <iprintf+0x18>
100187ba:	0020      	movs	r0, r4
100187bc:	f000 fb58 	bl	10018e70 <__sinit>
100187c0:	ab05      	add	r3, sp, #20
100187c2:	9a04      	ldr	r2, [sp, #16]
100187c4:	68a1      	ldr	r1, [r4, #8]
100187c6:	0020      	movs	r0, r4
100187c8:	9301      	str	r3, [sp, #4]
100187ca:	f000 fc71 	bl	100190b0 <_vfiprintf_r>
100187ce:	bc16      	pop	{r1, r2, r4}
100187d0:	bc08      	pop	{r3}
100187d2:	b004      	add	sp, #16
100187d4:	4718      	bx	r3
100187d6:	46c0      	nop			; (mov r8, r8)
100187d8:	1001b9dc 	.word	0x1001b9dc

100187dc <putchar>:
100187dc:	4b08      	ldr	r3, [pc, #32]	; (10018800 <putchar+0x24>)
100187de:	b570      	push	{r4, r5, r6, lr}
100187e0:	681c      	ldr	r4, [r3, #0]
100187e2:	0005      	movs	r5, r0
100187e4:	2c00      	cmp	r4, #0
100187e6:	d005      	beq.n	100187f4 <putchar+0x18>
100187e8:	69a3      	ldr	r3, [r4, #24]
100187ea:	2b00      	cmp	r3, #0
100187ec:	d102      	bne.n	100187f4 <putchar+0x18>
100187ee:	0020      	movs	r0, r4
100187f0:	f000 fb3e 	bl	10018e70 <__sinit>
100187f4:	0029      	movs	r1, r5
100187f6:	68a2      	ldr	r2, [r4, #8]
100187f8:	0020      	movs	r0, r4
100187fa:	f000 ff05 	bl	10019608 <_putc_r>
100187fe:	bd70      	pop	{r4, r5, r6, pc}
10018800:	1001b9dc 	.word	0x1001b9dc

10018804 <_puts_r>:
10018804:	b570      	push	{r4, r5, r6, lr}
10018806:	0005      	movs	r5, r0
10018808:	000e      	movs	r6, r1
1001880a:	2800      	cmp	r0, #0
1001880c:	d004      	beq.n	10018818 <_puts_r+0x14>
1001880e:	6983      	ldr	r3, [r0, #24]
10018810:	2b00      	cmp	r3, #0
10018812:	d101      	bne.n	10018818 <_puts_r+0x14>
10018814:	f000 fb2c 	bl	10018e70 <__sinit>
10018818:	69ab      	ldr	r3, [r5, #24]
1001881a:	68ac      	ldr	r4, [r5, #8]
1001881c:	2b00      	cmp	r3, #0
1001881e:	d102      	bne.n	10018826 <_puts_r+0x22>
10018820:	0028      	movs	r0, r5
10018822:	f000 fb25 	bl	10018e70 <__sinit>
10018826:	4b25      	ldr	r3, [pc, #148]	; (100188bc <_puts_r+0xb8>)
10018828:	429c      	cmp	r4, r3
1001882a:	d101      	bne.n	10018830 <_puts_r+0x2c>
1001882c:	686c      	ldr	r4, [r5, #4]
1001882e:	e008      	b.n	10018842 <_puts_r+0x3e>
10018830:	4b23      	ldr	r3, [pc, #140]	; (100188c0 <_puts_r+0xbc>)
10018832:	429c      	cmp	r4, r3
10018834:	d101      	bne.n	1001883a <_puts_r+0x36>
10018836:	68ac      	ldr	r4, [r5, #8]
10018838:	e003      	b.n	10018842 <_puts_r+0x3e>
1001883a:	4b22      	ldr	r3, [pc, #136]	; (100188c4 <_puts_r+0xc0>)
1001883c:	429c      	cmp	r4, r3
1001883e:	d100      	bne.n	10018842 <_puts_r+0x3e>
10018840:	68ec      	ldr	r4, [r5, #12]
10018842:	89a3      	ldrh	r3, [r4, #12]
10018844:	071b      	lsls	r3, r3, #28
10018846:	d502      	bpl.n	1001884e <_puts_r+0x4a>
10018848:	6923      	ldr	r3, [r4, #16]
1001884a:	2b00      	cmp	r3, #0
1001884c:	d111      	bne.n	10018872 <_puts_r+0x6e>
1001884e:	0021      	movs	r1, r4
10018850:	0028      	movs	r0, r5
10018852:	f000 f9a3 	bl	10018b9c <__swsetup_r>
10018856:	2800      	cmp	r0, #0
10018858:	d00b      	beq.n	10018872 <_puts_r+0x6e>
1001885a:	2001      	movs	r0, #1
1001885c:	4240      	negs	r0, r0
1001885e:	e02b      	b.n	100188b8 <_puts_r+0xb4>
10018860:	3b01      	subs	r3, #1
10018862:	3601      	adds	r6, #1
10018864:	60a3      	str	r3, [r4, #8]
10018866:	2b00      	cmp	r3, #0
10018868:	db08      	blt.n	1001887c <_puts_r+0x78>
1001886a:	6823      	ldr	r3, [r4, #0]
1001886c:	1c5a      	adds	r2, r3, #1
1001886e:	6022      	str	r2, [r4, #0]
10018870:	7019      	strb	r1, [r3, #0]
10018872:	7831      	ldrb	r1, [r6, #0]
10018874:	68a3      	ldr	r3, [r4, #8]
10018876:	2900      	cmp	r1, #0
10018878:	d1f2      	bne.n	10018860 <_puts_r+0x5c>
1001887a:	e00b      	b.n	10018894 <_puts_r+0x90>
1001887c:	69a2      	ldr	r2, [r4, #24]
1001887e:	4293      	cmp	r3, r2
10018880:	db01      	blt.n	10018886 <_puts_r+0x82>
10018882:	290a      	cmp	r1, #10
10018884:	d1f1      	bne.n	1001886a <_puts_r+0x66>
10018886:	0022      	movs	r2, r4
10018888:	0028      	movs	r0, r5
1001888a:	f000 f92f 	bl	10018aec <__swbuf_r>
1001888e:	1c43      	adds	r3, r0, #1
10018890:	d1ef      	bne.n	10018872 <_puts_r+0x6e>
10018892:	e7e2      	b.n	1001885a <_puts_r+0x56>
10018894:	3b01      	subs	r3, #1
10018896:	60a3      	str	r3, [r4, #8]
10018898:	2b00      	cmp	r3, #0
1001889a:	da08      	bge.n	100188ae <_puts_r+0xaa>
1001889c:	0022      	movs	r2, r4
1001889e:	310a      	adds	r1, #10
100188a0:	0028      	movs	r0, r5
100188a2:	f000 f923 	bl	10018aec <__swbuf_r>
100188a6:	1c43      	adds	r3, r0, #1
100188a8:	d0d7      	beq.n	1001885a <_puts_r+0x56>
100188aa:	200a      	movs	r0, #10
100188ac:	e004      	b.n	100188b8 <_puts_r+0xb4>
100188ae:	200a      	movs	r0, #10
100188b0:	6823      	ldr	r3, [r4, #0]
100188b2:	1c5a      	adds	r2, r3, #1
100188b4:	6022      	str	r2, [r4, #0]
100188b6:	7018      	strb	r0, [r3, #0]
100188b8:	bd70      	pop	{r4, r5, r6, pc}
100188ba:	46c0      	nop			; (mov r8, r8)
100188bc:	1001b864 	.word	0x1001b864
100188c0:	1001b884 	.word	0x1001b884
100188c4:	1001b8a4 	.word	0x1001b8a4

100188c8 <puts>:
100188c8:	b510      	push	{r4, lr}
100188ca:	4b03      	ldr	r3, [pc, #12]	; (100188d8 <puts+0x10>)
100188cc:	0001      	movs	r1, r0
100188ce:	6818      	ldr	r0, [r3, #0]
100188d0:	f7ff ff98 	bl	10018804 <_puts_r>
100188d4:	bd10      	pop	{r4, pc}
100188d6:	46c0      	nop			; (mov r8, r8)
100188d8:	1001b9dc 	.word	0x1001b9dc

100188dc <rand>:
100188dc:	4b15      	ldr	r3, [pc, #84]	; (10018934 <rand+0x58>)
100188de:	b510      	push	{r4, lr}
100188e0:	681c      	ldr	r4, [r3, #0]
100188e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100188e4:	2b00      	cmp	r3, #0
100188e6:	d115      	bne.n	10018914 <rand+0x38>
100188e8:	2018      	movs	r0, #24
100188ea:	f7ff fe81 	bl	100185f0 <malloc>
100188ee:	4b12      	ldr	r3, [pc, #72]	; (10018938 <rand+0x5c>)
100188f0:	63a0      	str	r0, [r4, #56]	; 0x38
100188f2:	8003      	strh	r3, [r0, #0]
100188f4:	4b11      	ldr	r3, [pc, #68]	; (1001893c <rand+0x60>)
100188f6:	2201      	movs	r2, #1
100188f8:	8043      	strh	r3, [r0, #2]
100188fa:	4b11      	ldr	r3, [pc, #68]	; (10018940 <rand+0x64>)
100188fc:	8083      	strh	r3, [r0, #4]
100188fe:	4b11      	ldr	r3, [pc, #68]	; (10018944 <rand+0x68>)
10018900:	80c3      	strh	r3, [r0, #6]
10018902:	4b11      	ldr	r3, [pc, #68]	; (10018948 <rand+0x6c>)
10018904:	8103      	strh	r3, [r0, #8]
10018906:	2305      	movs	r3, #5
10018908:	8143      	strh	r3, [r0, #10]
1001890a:	3306      	adds	r3, #6
1001890c:	8183      	strh	r3, [r0, #12]
1001890e:	2300      	movs	r3, #0
10018910:	6102      	str	r2, [r0, #16]
10018912:	6143      	str	r3, [r0, #20]
10018914:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10018916:	4a0d      	ldr	r2, [pc, #52]	; (1001894c <rand+0x70>)
10018918:	6920      	ldr	r0, [r4, #16]
1001891a:	6961      	ldr	r1, [r4, #20]
1001891c:	4b0c      	ldr	r3, [pc, #48]	; (10018950 <rand+0x74>)
1001891e:	f7fc ff05 	bl	1001572c <__aeabi_lmul>
10018922:	2201      	movs	r2, #1
10018924:	2300      	movs	r3, #0
10018926:	1880      	adds	r0, r0, r2
10018928:	4159      	adcs	r1, r3
1001892a:	6120      	str	r0, [r4, #16]
1001892c:	6161      	str	r1, [r4, #20]
1001892e:	0048      	lsls	r0, r1, #1
10018930:	0840      	lsrs	r0, r0, #1
10018932:	bd10      	pop	{r4, pc}
10018934:	1001b9dc 	.word	0x1001b9dc
10018938:	0000330e 	.word	0x0000330e
1001893c:	ffffabcd 	.word	0xffffabcd
10018940:	00001234 	.word	0x00001234
10018944:	ffffe66d 	.word	0xffffe66d
10018948:	ffffdeec 	.word	0xffffdeec
1001894c:	4c957f2d 	.word	0x4c957f2d
10018950:	5851f42d 	.word	0x5851f42d

10018954 <_sbrk_r>:
10018954:	2300      	movs	r3, #0
10018956:	b570      	push	{r4, r5, r6, lr}
10018958:	4c06      	ldr	r4, [pc, #24]	; (10018974 <_sbrk_r+0x20>)
1001895a:	0005      	movs	r5, r0
1001895c:	0008      	movs	r0, r1
1001895e:	6023      	str	r3, [r4, #0]
10018960:	f7f5 fc3e 	bl	1000e1e0 <_sbrk>
10018964:	1c43      	adds	r3, r0, #1
10018966:	d103      	bne.n	10018970 <_sbrk_r+0x1c>
10018968:	6823      	ldr	r3, [r4, #0]
1001896a:	2b00      	cmp	r3, #0
1001896c:	d000      	beq.n	10018970 <_sbrk_r+0x1c>
1001896e:	602b      	str	r3, [r5, #0]
10018970:	bd70      	pop	{r4, r5, r6, pc}
10018972:	46c0      	nop			; (mov r8, r8)
10018974:	1001ee18 	.word	0x1001ee18

10018978 <setbuf>:
10018978:	424a      	negs	r2, r1
1001897a:	414a      	adcs	r2, r1
1001897c:	2380      	movs	r3, #128	; 0x80
1001897e:	b510      	push	{r4, lr}
10018980:	0052      	lsls	r2, r2, #1
10018982:	00db      	lsls	r3, r3, #3
10018984:	f000 f802 	bl	1001898c <setvbuf>
10018988:	bd10      	pop	{r4, pc}
	...

1001898c <setvbuf>:
1001898c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001898e:	001d      	movs	r5, r3
10018990:	4b51      	ldr	r3, [pc, #324]	; (10018ad8 <setvbuf+0x14c>)
10018992:	b085      	sub	sp, #20
10018994:	681e      	ldr	r6, [r3, #0]
10018996:	0004      	movs	r4, r0
10018998:	000f      	movs	r7, r1
1001899a:	9200      	str	r2, [sp, #0]
1001899c:	2e00      	cmp	r6, #0
1001899e:	d005      	beq.n	100189ac <setvbuf+0x20>
100189a0:	69b3      	ldr	r3, [r6, #24]
100189a2:	2b00      	cmp	r3, #0
100189a4:	d102      	bne.n	100189ac <setvbuf+0x20>
100189a6:	0030      	movs	r0, r6
100189a8:	f000 fa62 	bl	10018e70 <__sinit>
100189ac:	4b4b      	ldr	r3, [pc, #300]	; (10018adc <setvbuf+0x150>)
100189ae:	429c      	cmp	r4, r3
100189b0:	d101      	bne.n	100189b6 <setvbuf+0x2a>
100189b2:	6874      	ldr	r4, [r6, #4]
100189b4:	e008      	b.n	100189c8 <setvbuf+0x3c>
100189b6:	4b4a      	ldr	r3, [pc, #296]	; (10018ae0 <setvbuf+0x154>)
100189b8:	429c      	cmp	r4, r3
100189ba:	d101      	bne.n	100189c0 <setvbuf+0x34>
100189bc:	68b4      	ldr	r4, [r6, #8]
100189be:	e003      	b.n	100189c8 <setvbuf+0x3c>
100189c0:	4b48      	ldr	r3, [pc, #288]	; (10018ae4 <setvbuf+0x158>)
100189c2:	429c      	cmp	r4, r3
100189c4:	d100      	bne.n	100189c8 <setvbuf+0x3c>
100189c6:	68f4      	ldr	r4, [r6, #12]
100189c8:	9b00      	ldr	r3, [sp, #0]
100189ca:	2b02      	cmp	r3, #2
100189cc:	d005      	beq.n	100189da <setvbuf+0x4e>
100189ce:	2b01      	cmp	r3, #1
100189d0:	d900      	bls.n	100189d4 <setvbuf+0x48>
100189d2:	e07c      	b.n	10018ace <setvbuf+0x142>
100189d4:	2d00      	cmp	r5, #0
100189d6:	da00      	bge.n	100189da <setvbuf+0x4e>
100189d8:	e079      	b.n	10018ace <setvbuf+0x142>
100189da:	0021      	movs	r1, r4
100189dc:	0030      	movs	r0, r6
100189de:	f000 f9d9 	bl	10018d94 <_fflush_r>
100189e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100189e4:	2900      	cmp	r1, #0
100189e6:	d008      	beq.n	100189fa <setvbuf+0x6e>
100189e8:	0023      	movs	r3, r4
100189ea:	3344      	adds	r3, #68	; 0x44
100189ec:	4299      	cmp	r1, r3
100189ee:	d002      	beq.n	100189f6 <setvbuf+0x6a>
100189f0:	0030      	movs	r0, r6
100189f2:	f7ff fe3d 	bl	10018670 <_free_r>
100189f6:	2300      	movs	r3, #0
100189f8:	6363      	str	r3, [r4, #52]	; 0x34
100189fa:	2300      	movs	r3, #0
100189fc:	61a3      	str	r3, [r4, #24]
100189fe:	6063      	str	r3, [r4, #4]
10018a00:	89a3      	ldrh	r3, [r4, #12]
10018a02:	061b      	lsls	r3, r3, #24
10018a04:	d503      	bpl.n	10018a0e <setvbuf+0x82>
10018a06:	6921      	ldr	r1, [r4, #16]
10018a08:	0030      	movs	r0, r6
10018a0a:	f7ff fe31 	bl	10018670 <_free_r>
10018a0e:	89a2      	ldrh	r2, [r4, #12]
10018a10:	4b35      	ldr	r3, [pc, #212]	; (10018ae8 <setvbuf+0x15c>)
10018a12:	4013      	ands	r3, r2
10018a14:	81a3      	strh	r3, [r4, #12]
10018a16:	9b00      	ldr	r3, [sp, #0]
10018a18:	2b02      	cmp	r3, #2
10018a1a:	d021      	beq.n	10018a60 <setvbuf+0xd4>
10018a1c:	ab03      	add	r3, sp, #12
10018a1e:	aa02      	add	r2, sp, #8
10018a20:	0021      	movs	r1, r4
10018a22:	0030      	movs	r0, r6
10018a24:	f000 fab8 	bl	10018f98 <__swhatbuf_r>
10018a28:	89a3      	ldrh	r3, [r4, #12]
10018a2a:	4318      	orrs	r0, r3
10018a2c:	81a0      	strh	r0, [r4, #12]
10018a2e:	2d00      	cmp	r5, #0
10018a30:	d101      	bne.n	10018a36 <setvbuf+0xaa>
10018a32:	9d02      	ldr	r5, [sp, #8]
10018a34:	e001      	b.n	10018a3a <setvbuf+0xae>
10018a36:	2f00      	cmp	r7, #0
10018a38:	d125      	bne.n	10018a86 <setvbuf+0xfa>
10018a3a:	0028      	movs	r0, r5
10018a3c:	f7ff fdd8 	bl	100185f0 <malloc>
10018a40:	9501      	str	r5, [sp, #4]
10018a42:	1e07      	subs	r7, r0, #0
10018a44:	d11a      	bne.n	10018a7c <setvbuf+0xf0>
10018a46:	9b02      	ldr	r3, [sp, #8]
10018a48:	9301      	str	r3, [sp, #4]
10018a4a:	42ab      	cmp	r3, r5
10018a4c:	d102      	bne.n	10018a54 <setvbuf+0xc8>
10018a4e:	2001      	movs	r0, #1
10018a50:	4240      	negs	r0, r0
10018a52:	e006      	b.n	10018a62 <setvbuf+0xd6>
10018a54:	9801      	ldr	r0, [sp, #4]
10018a56:	f7ff fdcb 	bl	100185f0 <malloc>
10018a5a:	1e07      	subs	r7, r0, #0
10018a5c:	d10e      	bne.n	10018a7c <setvbuf+0xf0>
10018a5e:	e7f6      	b.n	10018a4e <setvbuf+0xc2>
10018a60:	2000      	movs	r0, #0
10018a62:	2202      	movs	r2, #2
10018a64:	89a3      	ldrh	r3, [r4, #12]
10018a66:	4313      	orrs	r3, r2
10018a68:	81a3      	strh	r3, [r4, #12]
10018a6a:	2300      	movs	r3, #0
10018a6c:	60a3      	str	r3, [r4, #8]
10018a6e:	0023      	movs	r3, r4
10018a70:	3347      	adds	r3, #71	; 0x47
10018a72:	6023      	str	r3, [r4, #0]
10018a74:	6123      	str	r3, [r4, #16]
10018a76:	2301      	movs	r3, #1
10018a78:	6163      	str	r3, [r4, #20]
10018a7a:	e02a      	b.n	10018ad2 <setvbuf+0x146>
10018a7c:	2280      	movs	r2, #128	; 0x80
10018a7e:	89a3      	ldrh	r3, [r4, #12]
10018a80:	9d01      	ldr	r5, [sp, #4]
10018a82:	4313      	orrs	r3, r2
10018a84:	81a3      	strh	r3, [r4, #12]
10018a86:	69b3      	ldr	r3, [r6, #24]
10018a88:	2b00      	cmp	r3, #0
10018a8a:	d102      	bne.n	10018a92 <setvbuf+0x106>
10018a8c:	0030      	movs	r0, r6
10018a8e:	f000 f9ef 	bl	10018e70 <__sinit>
10018a92:	9b00      	ldr	r3, [sp, #0]
10018a94:	2b01      	cmp	r3, #1
10018a96:	d103      	bne.n	10018aa0 <setvbuf+0x114>
10018a98:	89a3      	ldrh	r3, [r4, #12]
10018a9a:	9a00      	ldr	r2, [sp, #0]
10018a9c:	431a      	orrs	r2, r3
10018a9e:	81a2      	strh	r2, [r4, #12]
10018aa0:	2308      	movs	r3, #8
10018aa2:	89a2      	ldrh	r2, [r4, #12]
10018aa4:	6027      	str	r7, [r4, #0]
10018aa6:	4013      	ands	r3, r2
10018aa8:	6127      	str	r7, [r4, #16]
10018aaa:	6165      	str	r5, [r4, #20]
10018aac:	1e18      	subs	r0, r3, #0
10018aae:	d00c      	beq.n	10018aca <setvbuf+0x13e>
10018ab0:	2301      	movs	r3, #1
10018ab2:	401a      	ands	r2, r3
10018ab4:	2300      	movs	r3, #0
10018ab6:	1e10      	subs	r0, r2, #0
10018ab8:	4298      	cmp	r0, r3
10018aba:	d004      	beq.n	10018ac6 <setvbuf+0x13a>
10018abc:	426d      	negs	r5, r5
10018abe:	60a3      	str	r3, [r4, #8]
10018ac0:	61a5      	str	r5, [r4, #24]
10018ac2:	0018      	movs	r0, r3
10018ac4:	e005      	b.n	10018ad2 <setvbuf+0x146>
10018ac6:	60a5      	str	r5, [r4, #8]
10018ac8:	e003      	b.n	10018ad2 <setvbuf+0x146>
10018aca:	60a3      	str	r3, [r4, #8]
10018acc:	e001      	b.n	10018ad2 <setvbuf+0x146>
10018ace:	2001      	movs	r0, #1
10018ad0:	4240      	negs	r0, r0
10018ad2:	b005      	add	sp, #20
10018ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018ad6:	46c0      	nop			; (mov r8, r8)
10018ad8:	1001b9dc 	.word	0x1001b9dc
10018adc:	1001b864 	.word	0x1001b864
10018ae0:	1001b884 	.word	0x1001b884
10018ae4:	1001b8a4 	.word	0x1001b8a4
10018ae8:	fffff35c 	.word	0xfffff35c

10018aec <__swbuf_r>:
10018aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018aee:	0005      	movs	r5, r0
10018af0:	000f      	movs	r7, r1
10018af2:	0014      	movs	r4, r2
10018af4:	2800      	cmp	r0, #0
10018af6:	d004      	beq.n	10018b02 <__swbuf_r+0x16>
10018af8:	6983      	ldr	r3, [r0, #24]
10018afa:	2b00      	cmp	r3, #0
10018afc:	d101      	bne.n	10018b02 <__swbuf_r+0x16>
10018afe:	f000 f9b7 	bl	10018e70 <__sinit>
10018b02:	4b23      	ldr	r3, [pc, #140]	; (10018b90 <__swbuf_r+0xa4>)
10018b04:	429c      	cmp	r4, r3
10018b06:	d101      	bne.n	10018b0c <__swbuf_r+0x20>
10018b08:	686c      	ldr	r4, [r5, #4]
10018b0a:	e008      	b.n	10018b1e <__swbuf_r+0x32>
10018b0c:	4b21      	ldr	r3, [pc, #132]	; (10018b94 <__swbuf_r+0xa8>)
10018b0e:	429c      	cmp	r4, r3
10018b10:	d101      	bne.n	10018b16 <__swbuf_r+0x2a>
10018b12:	68ac      	ldr	r4, [r5, #8]
10018b14:	e003      	b.n	10018b1e <__swbuf_r+0x32>
10018b16:	4b20      	ldr	r3, [pc, #128]	; (10018b98 <__swbuf_r+0xac>)
10018b18:	429c      	cmp	r4, r3
10018b1a:	d100      	bne.n	10018b1e <__swbuf_r+0x32>
10018b1c:	68ec      	ldr	r4, [r5, #12]
10018b1e:	69a3      	ldr	r3, [r4, #24]
10018b20:	60a3      	str	r3, [r4, #8]
10018b22:	89a3      	ldrh	r3, [r4, #12]
10018b24:	071b      	lsls	r3, r3, #28
10018b26:	d50a      	bpl.n	10018b3e <__swbuf_r+0x52>
10018b28:	6923      	ldr	r3, [r4, #16]
10018b2a:	2b00      	cmp	r3, #0
10018b2c:	d007      	beq.n	10018b3e <__swbuf_r+0x52>
10018b2e:	6823      	ldr	r3, [r4, #0]
10018b30:	6922      	ldr	r2, [r4, #16]
10018b32:	b2fe      	uxtb	r6, r7
10018b34:	1a98      	subs	r0, r3, r2
10018b36:	6963      	ldr	r3, [r4, #20]
10018b38:	4298      	cmp	r0, r3
10018b3a:	db0f      	blt.n	10018b5c <__swbuf_r+0x70>
10018b3c:	e008      	b.n	10018b50 <__swbuf_r+0x64>
10018b3e:	0021      	movs	r1, r4
10018b40:	0028      	movs	r0, r5
10018b42:	f000 f82b 	bl	10018b9c <__swsetup_r>
10018b46:	2800      	cmp	r0, #0
10018b48:	d0f1      	beq.n	10018b2e <__swbuf_r+0x42>
10018b4a:	2001      	movs	r0, #1
10018b4c:	4240      	negs	r0, r0
10018b4e:	e01d      	b.n	10018b8c <__swbuf_r+0xa0>
10018b50:	0021      	movs	r1, r4
10018b52:	0028      	movs	r0, r5
10018b54:	f000 f91e 	bl	10018d94 <_fflush_r>
10018b58:	2800      	cmp	r0, #0
10018b5a:	d1f6      	bne.n	10018b4a <__swbuf_r+0x5e>
10018b5c:	68a3      	ldr	r3, [r4, #8]
10018b5e:	3001      	adds	r0, #1
10018b60:	3b01      	subs	r3, #1
10018b62:	60a3      	str	r3, [r4, #8]
10018b64:	6823      	ldr	r3, [r4, #0]
10018b66:	1c5a      	adds	r2, r3, #1
10018b68:	6022      	str	r2, [r4, #0]
10018b6a:	701f      	strb	r7, [r3, #0]
10018b6c:	6963      	ldr	r3, [r4, #20]
10018b6e:	4298      	cmp	r0, r3
10018b70:	d005      	beq.n	10018b7e <__swbuf_r+0x92>
10018b72:	89a3      	ldrh	r3, [r4, #12]
10018b74:	0030      	movs	r0, r6
10018b76:	07db      	lsls	r3, r3, #31
10018b78:	d508      	bpl.n	10018b8c <__swbuf_r+0xa0>
10018b7a:	2e0a      	cmp	r6, #10
10018b7c:	d106      	bne.n	10018b8c <__swbuf_r+0xa0>
10018b7e:	0021      	movs	r1, r4
10018b80:	0028      	movs	r0, r5
10018b82:	f000 f907 	bl	10018d94 <_fflush_r>
10018b86:	2800      	cmp	r0, #0
10018b88:	d1df      	bne.n	10018b4a <__swbuf_r+0x5e>
10018b8a:	0030      	movs	r0, r6
10018b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018b8e:	46c0      	nop			; (mov r8, r8)
10018b90:	1001b864 	.word	0x1001b864
10018b94:	1001b884 	.word	0x1001b884
10018b98:	1001b8a4 	.word	0x1001b8a4

10018b9c <__swsetup_r>:
10018b9c:	4b36      	ldr	r3, [pc, #216]	; (10018c78 <__swsetup_r+0xdc>)
10018b9e:	b570      	push	{r4, r5, r6, lr}
10018ba0:	681d      	ldr	r5, [r3, #0]
10018ba2:	0006      	movs	r6, r0
10018ba4:	000c      	movs	r4, r1
10018ba6:	2d00      	cmp	r5, #0
10018ba8:	d005      	beq.n	10018bb6 <__swsetup_r+0x1a>
10018baa:	69ab      	ldr	r3, [r5, #24]
10018bac:	2b00      	cmp	r3, #0
10018bae:	d102      	bne.n	10018bb6 <__swsetup_r+0x1a>
10018bb0:	0028      	movs	r0, r5
10018bb2:	f000 f95d 	bl	10018e70 <__sinit>
10018bb6:	4b31      	ldr	r3, [pc, #196]	; (10018c7c <__swsetup_r+0xe0>)
10018bb8:	429c      	cmp	r4, r3
10018bba:	d101      	bne.n	10018bc0 <__swsetup_r+0x24>
10018bbc:	686c      	ldr	r4, [r5, #4]
10018bbe:	e008      	b.n	10018bd2 <__swsetup_r+0x36>
10018bc0:	4b2f      	ldr	r3, [pc, #188]	; (10018c80 <__swsetup_r+0xe4>)
10018bc2:	429c      	cmp	r4, r3
10018bc4:	d101      	bne.n	10018bca <__swsetup_r+0x2e>
10018bc6:	68ac      	ldr	r4, [r5, #8]
10018bc8:	e003      	b.n	10018bd2 <__swsetup_r+0x36>
10018bca:	4b2e      	ldr	r3, [pc, #184]	; (10018c84 <__swsetup_r+0xe8>)
10018bcc:	429c      	cmp	r4, r3
10018bce:	d100      	bne.n	10018bd2 <__swsetup_r+0x36>
10018bd0:	68ec      	ldr	r4, [r5, #12]
10018bd2:	220c      	movs	r2, #12
10018bd4:	5ea3      	ldrsh	r3, [r4, r2]
10018bd6:	b29a      	uxth	r2, r3
10018bd8:	0711      	lsls	r1, r2, #28
10018bda:	d423      	bmi.n	10018c24 <__swsetup_r+0x88>
10018bdc:	06d1      	lsls	r1, r2, #27
10018bde:	d407      	bmi.n	10018bf0 <__swsetup_r+0x54>
10018be0:	2209      	movs	r2, #9
10018be2:	2001      	movs	r0, #1
10018be4:	6032      	str	r2, [r6, #0]
10018be6:	3237      	adds	r2, #55	; 0x37
10018be8:	4313      	orrs	r3, r2
10018bea:	81a3      	strh	r3, [r4, #12]
10018bec:	4240      	negs	r0, r0
10018bee:	e042      	b.n	10018c76 <__swsetup_r+0xda>
10018bf0:	0753      	lsls	r3, r2, #29
10018bf2:	d513      	bpl.n	10018c1c <__swsetup_r+0x80>
10018bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018bf6:	2900      	cmp	r1, #0
10018bf8:	d008      	beq.n	10018c0c <__swsetup_r+0x70>
10018bfa:	0023      	movs	r3, r4
10018bfc:	3344      	adds	r3, #68	; 0x44
10018bfe:	4299      	cmp	r1, r3
10018c00:	d002      	beq.n	10018c08 <__swsetup_r+0x6c>
10018c02:	0030      	movs	r0, r6
10018c04:	f7ff fd34 	bl	10018670 <_free_r>
10018c08:	2300      	movs	r3, #0
10018c0a:	6363      	str	r3, [r4, #52]	; 0x34
10018c0c:	2224      	movs	r2, #36	; 0x24
10018c0e:	89a3      	ldrh	r3, [r4, #12]
10018c10:	4393      	bics	r3, r2
10018c12:	81a3      	strh	r3, [r4, #12]
10018c14:	2300      	movs	r3, #0
10018c16:	6063      	str	r3, [r4, #4]
10018c18:	6923      	ldr	r3, [r4, #16]
10018c1a:	6023      	str	r3, [r4, #0]
10018c1c:	2208      	movs	r2, #8
10018c1e:	89a3      	ldrh	r3, [r4, #12]
10018c20:	4313      	orrs	r3, r2
10018c22:	81a3      	strh	r3, [r4, #12]
10018c24:	6923      	ldr	r3, [r4, #16]
10018c26:	2b00      	cmp	r3, #0
10018c28:	d10b      	bne.n	10018c42 <__swsetup_r+0xa6>
10018c2a:	23a0      	movs	r3, #160	; 0xa0
10018c2c:	89a2      	ldrh	r2, [r4, #12]
10018c2e:	009b      	lsls	r3, r3, #2
10018c30:	4013      	ands	r3, r2
10018c32:	2280      	movs	r2, #128	; 0x80
10018c34:	0092      	lsls	r2, r2, #2
10018c36:	4293      	cmp	r3, r2
10018c38:	d003      	beq.n	10018c42 <__swsetup_r+0xa6>
10018c3a:	0021      	movs	r1, r4
10018c3c:	0030      	movs	r0, r6
10018c3e:	f000 f9d1 	bl	10018fe4 <__smakebuf_r>
10018c42:	2301      	movs	r3, #1
10018c44:	89a2      	ldrh	r2, [r4, #12]
10018c46:	4013      	ands	r3, r2
10018c48:	d005      	beq.n	10018c56 <__swsetup_r+0xba>
10018c4a:	2300      	movs	r3, #0
10018c4c:	60a3      	str	r3, [r4, #8]
10018c4e:	6963      	ldr	r3, [r4, #20]
10018c50:	425b      	negs	r3, r3
10018c52:	61a3      	str	r3, [r4, #24]
10018c54:	e003      	b.n	10018c5e <__swsetup_r+0xc2>
10018c56:	0792      	lsls	r2, r2, #30
10018c58:	d400      	bmi.n	10018c5c <__swsetup_r+0xc0>
10018c5a:	6963      	ldr	r3, [r4, #20]
10018c5c:	60a3      	str	r3, [r4, #8]
10018c5e:	2000      	movs	r0, #0
10018c60:	6923      	ldr	r3, [r4, #16]
10018c62:	4283      	cmp	r3, r0
10018c64:	d107      	bne.n	10018c76 <__swsetup_r+0xda>
10018c66:	220c      	movs	r2, #12
10018c68:	5ea3      	ldrsh	r3, [r4, r2]
10018c6a:	061a      	lsls	r2, r3, #24
10018c6c:	d503      	bpl.n	10018c76 <__swsetup_r+0xda>
10018c6e:	2240      	movs	r2, #64	; 0x40
10018c70:	4313      	orrs	r3, r2
10018c72:	81a3      	strh	r3, [r4, #12]
10018c74:	3801      	subs	r0, #1
10018c76:	bd70      	pop	{r4, r5, r6, pc}
10018c78:	1001b9dc 	.word	0x1001b9dc
10018c7c:	1001b864 	.word	0x1001b864
10018c80:	1001b884 	.word	0x1001b884
10018c84:	1001b8a4 	.word	0x1001b8a4

10018c88 <__sflush_r>:
10018c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018c8a:	898a      	ldrh	r2, [r1, #12]
10018c8c:	0005      	movs	r5, r0
10018c8e:	000c      	movs	r4, r1
10018c90:	0713      	lsls	r3, r2, #28
10018c92:	d45a      	bmi.n	10018d4a <__sflush_r+0xc2>
10018c94:	684b      	ldr	r3, [r1, #4]
10018c96:	2b00      	cmp	r3, #0
10018c98:	dc02      	bgt.n	10018ca0 <__sflush_r+0x18>
10018c9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10018c9c:	2b00      	cmp	r3, #0
10018c9e:	dd19      	ble.n	10018cd4 <__sflush_r+0x4c>
10018ca0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10018ca2:	2f00      	cmp	r7, #0
10018ca4:	d016      	beq.n	10018cd4 <__sflush_r+0x4c>
10018ca6:	2300      	movs	r3, #0
10018ca8:	682e      	ldr	r6, [r5, #0]
10018caa:	602b      	str	r3, [r5, #0]
10018cac:	2380      	movs	r3, #128	; 0x80
10018cae:	015b      	lsls	r3, r3, #5
10018cb0:	401a      	ands	r2, r3
10018cb2:	d001      	beq.n	10018cb8 <__sflush_r+0x30>
10018cb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
10018cb6:	e014      	b.n	10018ce2 <__sflush_r+0x5a>
10018cb8:	2301      	movs	r3, #1
10018cba:	6a21      	ldr	r1, [r4, #32]
10018cbc:	0028      	movs	r0, r5
10018cbe:	47b8      	blx	r7
10018cc0:	1c43      	adds	r3, r0, #1
10018cc2:	d10e      	bne.n	10018ce2 <__sflush_r+0x5a>
10018cc4:	682b      	ldr	r3, [r5, #0]
10018cc6:	2b00      	cmp	r3, #0
10018cc8:	d00b      	beq.n	10018ce2 <__sflush_r+0x5a>
10018cca:	2b1d      	cmp	r3, #29
10018ccc:	d001      	beq.n	10018cd2 <__sflush_r+0x4a>
10018cce:	2b16      	cmp	r3, #22
10018cd0:	d102      	bne.n	10018cd8 <__sflush_r+0x50>
10018cd2:	602e      	str	r6, [r5, #0]
10018cd4:	2000      	movs	r0, #0
10018cd6:	e05a      	b.n	10018d8e <__sflush_r+0x106>
10018cd8:	2240      	movs	r2, #64	; 0x40
10018cda:	89a3      	ldrh	r3, [r4, #12]
10018cdc:	4313      	orrs	r3, r2
10018cde:	81a3      	strh	r3, [r4, #12]
10018ce0:	e055      	b.n	10018d8e <__sflush_r+0x106>
10018ce2:	89a3      	ldrh	r3, [r4, #12]
10018ce4:	075b      	lsls	r3, r3, #29
10018ce6:	d506      	bpl.n	10018cf6 <__sflush_r+0x6e>
10018ce8:	6863      	ldr	r3, [r4, #4]
10018cea:	1ac0      	subs	r0, r0, r3
10018cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
10018cee:	2b00      	cmp	r3, #0
10018cf0:	d001      	beq.n	10018cf6 <__sflush_r+0x6e>
10018cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
10018cf4:	1ac0      	subs	r0, r0, r3
10018cf6:	2300      	movs	r3, #0
10018cf8:	0002      	movs	r2, r0
10018cfa:	6a21      	ldr	r1, [r4, #32]
10018cfc:	0028      	movs	r0, r5
10018cfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10018d00:	47b8      	blx	r7
10018d02:	89a3      	ldrh	r3, [r4, #12]
10018d04:	1c42      	adds	r2, r0, #1
10018d06:	d106      	bne.n	10018d16 <__sflush_r+0x8e>
10018d08:	6829      	ldr	r1, [r5, #0]
10018d0a:	291d      	cmp	r1, #29
10018d0c:	d83a      	bhi.n	10018d84 <__sflush_r+0xfc>
10018d0e:	4a20      	ldr	r2, [pc, #128]	; (10018d90 <__sflush_r+0x108>)
10018d10:	40ca      	lsrs	r2, r1
10018d12:	07d2      	lsls	r2, r2, #31
10018d14:	d536      	bpl.n	10018d84 <__sflush_r+0xfc>
10018d16:	2200      	movs	r2, #0
10018d18:	6062      	str	r2, [r4, #4]
10018d1a:	6922      	ldr	r2, [r4, #16]
10018d1c:	6022      	str	r2, [r4, #0]
10018d1e:	04db      	lsls	r3, r3, #19
10018d20:	d505      	bpl.n	10018d2e <__sflush_r+0xa6>
10018d22:	1c43      	adds	r3, r0, #1
10018d24:	d102      	bne.n	10018d2c <__sflush_r+0xa4>
10018d26:	682b      	ldr	r3, [r5, #0]
10018d28:	2b00      	cmp	r3, #0
10018d2a:	d100      	bne.n	10018d2e <__sflush_r+0xa6>
10018d2c:	6560      	str	r0, [r4, #84]	; 0x54
10018d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018d30:	602e      	str	r6, [r5, #0]
10018d32:	2900      	cmp	r1, #0
10018d34:	d0ce      	beq.n	10018cd4 <__sflush_r+0x4c>
10018d36:	0023      	movs	r3, r4
10018d38:	3344      	adds	r3, #68	; 0x44
10018d3a:	4299      	cmp	r1, r3
10018d3c:	d002      	beq.n	10018d44 <__sflush_r+0xbc>
10018d3e:	0028      	movs	r0, r5
10018d40:	f7ff fc96 	bl	10018670 <_free_r>
10018d44:	2000      	movs	r0, #0
10018d46:	6360      	str	r0, [r4, #52]	; 0x34
10018d48:	e021      	b.n	10018d8e <__sflush_r+0x106>
10018d4a:	690f      	ldr	r7, [r1, #16]
10018d4c:	2f00      	cmp	r7, #0
10018d4e:	d0c1      	beq.n	10018cd4 <__sflush_r+0x4c>
10018d50:	680b      	ldr	r3, [r1, #0]
10018d52:	600f      	str	r7, [r1, #0]
10018d54:	1bdb      	subs	r3, r3, r7
10018d56:	9301      	str	r3, [sp, #4]
10018d58:	2300      	movs	r3, #0
10018d5a:	0792      	lsls	r2, r2, #30
10018d5c:	d100      	bne.n	10018d60 <__sflush_r+0xd8>
10018d5e:	694b      	ldr	r3, [r1, #20]
10018d60:	60a3      	str	r3, [r4, #8]
10018d62:	e003      	b.n	10018d6c <__sflush_r+0xe4>
10018d64:	9b01      	ldr	r3, [sp, #4]
10018d66:	183f      	adds	r7, r7, r0
10018d68:	1a1b      	subs	r3, r3, r0
10018d6a:	9301      	str	r3, [sp, #4]
10018d6c:	9b01      	ldr	r3, [sp, #4]
10018d6e:	2b00      	cmp	r3, #0
10018d70:	ddb0      	ble.n	10018cd4 <__sflush_r+0x4c>
10018d72:	9b01      	ldr	r3, [sp, #4]
10018d74:	003a      	movs	r2, r7
10018d76:	6a21      	ldr	r1, [r4, #32]
10018d78:	0028      	movs	r0, r5
10018d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10018d7c:	47b0      	blx	r6
10018d7e:	2800      	cmp	r0, #0
10018d80:	dcf0      	bgt.n	10018d64 <__sflush_r+0xdc>
10018d82:	89a3      	ldrh	r3, [r4, #12]
10018d84:	2240      	movs	r2, #64	; 0x40
10018d86:	2001      	movs	r0, #1
10018d88:	4313      	orrs	r3, r2
10018d8a:	81a3      	strh	r3, [r4, #12]
10018d8c:	4240      	negs	r0, r0
10018d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10018d90:	20400001 	.word	0x20400001

10018d94 <_fflush_r>:
10018d94:	690b      	ldr	r3, [r1, #16]
10018d96:	b570      	push	{r4, r5, r6, lr}
10018d98:	0005      	movs	r5, r0
10018d9a:	000c      	movs	r4, r1
10018d9c:	2b00      	cmp	r3, #0
10018d9e:	d101      	bne.n	10018da4 <_fflush_r+0x10>
10018da0:	2000      	movs	r0, #0
10018da2:	e01c      	b.n	10018dde <_fflush_r+0x4a>
10018da4:	2800      	cmp	r0, #0
10018da6:	d004      	beq.n	10018db2 <_fflush_r+0x1e>
10018da8:	6983      	ldr	r3, [r0, #24]
10018daa:	2b00      	cmp	r3, #0
10018dac:	d101      	bne.n	10018db2 <_fflush_r+0x1e>
10018dae:	f000 f85f 	bl	10018e70 <__sinit>
10018db2:	4b0b      	ldr	r3, [pc, #44]	; (10018de0 <_fflush_r+0x4c>)
10018db4:	429c      	cmp	r4, r3
10018db6:	d101      	bne.n	10018dbc <_fflush_r+0x28>
10018db8:	686c      	ldr	r4, [r5, #4]
10018dba:	e008      	b.n	10018dce <_fflush_r+0x3a>
10018dbc:	4b09      	ldr	r3, [pc, #36]	; (10018de4 <_fflush_r+0x50>)
10018dbe:	429c      	cmp	r4, r3
10018dc0:	d101      	bne.n	10018dc6 <_fflush_r+0x32>
10018dc2:	68ac      	ldr	r4, [r5, #8]
10018dc4:	e003      	b.n	10018dce <_fflush_r+0x3a>
10018dc6:	4b08      	ldr	r3, [pc, #32]	; (10018de8 <_fflush_r+0x54>)
10018dc8:	429c      	cmp	r4, r3
10018dca:	d100      	bne.n	10018dce <_fflush_r+0x3a>
10018dcc:	68ec      	ldr	r4, [r5, #12]
10018dce:	220c      	movs	r2, #12
10018dd0:	5ea3      	ldrsh	r3, [r4, r2]
10018dd2:	2b00      	cmp	r3, #0
10018dd4:	d0e4      	beq.n	10018da0 <_fflush_r+0xc>
10018dd6:	0021      	movs	r1, r4
10018dd8:	0028      	movs	r0, r5
10018dda:	f7ff ff55 	bl	10018c88 <__sflush_r>
10018dde:	bd70      	pop	{r4, r5, r6, pc}
10018de0:	1001b864 	.word	0x1001b864
10018de4:	1001b884 	.word	0x1001b884
10018de8:	1001b8a4 	.word	0x1001b8a4

10018dec <_cleanup_r>:
10018dec:	b510      	push	{r4, lr}
10018dee:	4902      	ldr	r1, [pc, #8]	; (10018df8 <_cleanup_r+0xc>)
10018df0:	f000 f8b0 	bl	10018f54 <_fwalk_reent>
10018df4:	bd10      	pop	{r4, pc}
10018df6:	46c0      	nop			; (mov r8, r8)
10018df8:	10018d95 	.word	0x10018d95

10018dfc <std.isra.0>:
10018dfc:	2300      	movs	r3, #0
10018dfe:	b510      	push	{r4, lr}
10018e00:	0004      	movs	r4, r0
10018e02:	6003      	str	r3, [r0, #0]
10018e04:	6043      	str	r3, [r0, #4]
10018e06:	6083      	str	r3, [r0, #8]
10018e08:	8181      	strh	r1, [r0, #12]
10018e0a:	6643      	str	r3, [r0, #100]	; 0x64
10018e0c:	81c2      	strh	r2, [r0, #14]
10018e0e:	6103      	str	r3, [r0, #16]
10018e10:	6143      	str	r3, [r0, #20]
10018e12:	6183      	str	r3, [r0, #24]
10018e14:	0019      	movs	r1, r3
10018e16:	2208      	movs	r2, #8
10018e18:	305c      	adds	r0, #92	; 0x5c
10018e1a:	f7ff fc20 	bl	1001865e <memset>
10018e1e:	4b05      	ldr	r3, [pc, #20]	; (10018e34 <std.isra.0+0x38>)
10018e20:	6224      	str	r4, [r4, #32]
10018e22:	6263      	str	r3, [r4, #36]	; 0x24
10018e24:	4b04      	ldr	r3, [pc, #16]	; (10018e38 <std.isra.0+0x3c>)
10018e26:	62a3      	str	r3, [r4, #40]	; 0x28
10018e28:	4b04      	ldr	r3, [pc, #16]	; (10018e3c <std.isra.0+0x40>)
10018e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
10018e2c:	4b04      	ldr	r3, [pc, #16]	; (10018e40 <std.isra.0+0x44>)
10018e2e:	6323      	str	r3, [r4, #48]	; 0x30
10018e30:	bd10      	pop	{r4, pc}
10018e32:	46c0      	nop			; (mov r8, r8)
10018e34:	10019675 	.word	0x10019675
10018e38:	1001969d 	.word	0x1001969d
10018e3c:	100196d5 	.word	0x100196d5
10018e40:	10019701 	.word	0x10019701

10018e44 <__sfmoreglue>:
10018e44:	b570      	push	{r4, r5, r6, lr}
10018e46:	2568      	movs	r5, #104	; 0x68
10018e48:	1e4b      	subs	r3, r1, #1
10018e4a:	435d      	muls	r5, r3
10018e4c:	000e      	movs	r6, r1
10018e4e:	0029      	movs	r1, r5
10018e50:	3174      	adds	r1, #116	; 0x74
10018e52:	f7ff fc53 	bl	100186fc <_malloc_r>
10018e56:	1e04      	subs	r4, r0, #0
10018e58:	d008      	beq.n	10018e6c <__sfmoreglue+0x28>
10018e5a:	2100      	movs	r1, #0
10018e5c:	002a      	movs	r2, r5
10018e5e:	6001      	str	r1, [r0, #0]
10018e60:	6046      	str	r6, [r0, #4]
10018e62:	300c      	adds	r0, #12
10018e64:	60a0      	str	r0, [r4, #8]
10018e66:	3268      	adds	r2, #104	; 0x68
10018e68:	f7ff fbf9 	bl	1001865e <memset>
10018e6c:	0020      	movs	r0, r4
10018e6e:	bd70      	pop	{r4, r5, r6, pc}

10018e70 <__sinit>:
10018e70:	6983      	ldr	r3, [r0, #24]
10018e72:	b513      	push	{r0, r1, r4, lr}
10018e74:	0004      	movs	r4, r0
10018e76:	2b00      	cmp	r3, #0
10018e78:	d128      	bne.n	10018ecc <__sinit+0x5c>
10018e7a:	6483      	str	r3, [r0, #72]	; 0x48
10018e7c:	64c3      	str	r3, [r0, #76]	; 0x4c
10018e7e:	6503      	str	r3, [r0, #80]	; 0x50
10018e80:	4b13      	ldr	r3, [pc, #76]	; (10018ed0 <__sinit+0x60>)
10018e82:	4a14      	ldr	r2, [pc, #80]	; (10018ed4 <__sinit+0x64>)
10018e84:	681b      	ldr	r3, [r3, #0]
10018e86:	6282      	str	r2, [r0, #40]	; 0x28
10018e88:	9301      	str	r3, [sp, #4]
10018e8a:	4298      	cmp	r0, r3
10018e8c:	d101      	bne.n	10018e92 <__sinit+0x22>
10018e8e:	2301      	movs	r3, #1
10018e90:	6183      	str	r3, [r0, #24]
10018e92:	0020      	movs	r0, r4
10018e94:	f000 f820 	bl	10018ed8 <__sfp>
10018e98:	6060      	str	r0, [r4, #4]
10018e9a:	0020      	movs	r0, r4
10018e9c:	f000 f81c 	bl	10018ed8 <__sfp>
10018ea0:	60a0      	str	r0, [r4, #8]
10018ea2:	0020      	movs	r0, r4
10018ea4:	f000 f818 	bl	10018ed8 <__sfp>
10018ea8:	2200      	movs	r2, #0
10018eaa:	60e0      	str	r0, [r4, #12]
10018eac:	2104      	movs	r1, #4
10018eae:	6860      	ldr	r0, [r4, #4]
10018eb0:	f7ff ffa4 	bl	10018dfc <std.isra.0>
10018eb4:	2201      	movs	r2, #1
10018eb6:	2109      	movs	r1, #9
10018eb8:	68a0      	ldr	r0, [r4, #8]
10018eba:	f7ff ff9f 	bl	10018dfc <std.isra.0>
10018ebe:	2202      	movs	r2, #2
10018ec0:	2112      	movs	r1, #18
10018ec2:	68e0      	ldr	r0, [r4, #12]
10018ec4:	f7ff ff9a 	bl	10018dfc <std.isra.0>
10018ec8:	2301      	movs	r3, #1
10018eca:	61a3      	str	r3, [r4, #24]
10018ecc:	bd13      	pop	{r0, r1, r4, pc}
10018ece:	46c0      	nop			; (mov r8, r8)
10018ed0:	1001b860 	.word	0x1001b860
10018ed4:	10018ded 	.word	0x10018ded

10018ed8 <__sfp>:
10018ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018eda:	4b1d      	ldr	r3, [pc, #116]	; (10018f50 <__sfp+0x78>)
10018edc:	0006      	movs	r6, r0
10018ede:	681d      	ldr	r5, [r3, #0]
10018ee0:	69ab      	ldr	r3, [r5, #24]
10018ee2:	2b00      	cmp	r3, #0
10018ee4:	d102      	bne.n	10018eec <__sfp+0x14>
10018ee6:	0028      	movs	r0, r5
10018ee8:	f7ff ffc2 	bl	10018e70 <__sinit>
10018eec:	3548      	adds	r5, #72	; 0x48
10018eee:	68ac      	ldr	r4, [r5, #8]
10018ef0:	686b      	ldr	r3, [r5, #4]
10018ef2:	3b01      	subs	r3, #1
10018ef4:	d405      	bmi.n	10018f02 <__sfp+0x2a>
10018ef6:	220c      	movs	r2, #12
10018ef8:	5ea7      	ldrsh	r7, [r4, r2]
10018efa:	2f00      	cmp	r7, #0
10018efc:	d010      	beq.n	10018f20 <__sfp+0x48>
10018efe:	3468      	adds	r4, #104	; 0x68
10018f00:	e7f7      	b.n	10018ef2 <__sfp+0x1a>
10018f02:	682b      	ldr	r3, [r5, #0]
10018f04:	2b00      	cmp	r3, #0
10018f06:	d001      	beq.n	10018f0c <__sfp+0x34>
10018f08:	682d      	ldr	r5, [r5, #0]
10018f0a:	e7f0      	b.n	10018eee <__sfp+0x16>
10018f0c:	2104      	movs	r1, #4
10018f0e:	0030      	movs	r0, r6
10018f10:	f7ff ff98 	bl	10018e44 <__sfmoreglue>
10018f14:	6028      	str	r0, [r5, #0]
10018f16:	2800      	cmp	r0, #0
10018f18:	d1f6      	bne.n	10018f08 <__sfp+0x30>
10018f1a:	230c      	movs	r3, #12
10018f1c:	6033      	str	r3, [r6, #0]
10018f1e:	e016      	b.n	10018f4e <__sfp+0x76>
10018f20:	2301      	movs	r3, #1
10018f22:	0020      	movs	r0, r4
10018f24:	425b      	negs	r3, r3
10018f26:	81e3      	strh	r3, [r4, #14]
10018f28:	3302      	adds	r3, #2
10018f2a:	81a3      	strh	r3, [r4, #12]
10018f2c:	6667      	str	r7, [r4, #100]	; 0x64
10018f2e:	6027      	str	r7, [r4, #0]
10018f30:	60a7      	str	r7, [r4, #8]
10018f32:	6067      	str	r7, [r4, #4]
10018f34:	6127      	str	r7, [r4, #16]
10018f36:	6167      	str	r7, [r4, #20]
10018f38:	61a7      	str	r7, [r4, #24]
10018f3a:	305c      	adds	r0, #92	; 0x5c
10018f3c:	2208      	movs	r2, #8
10018f3e:	0039      	movs	r1, r7
10018f40:	f7ff fb8d 	bl	1001865e <memset>
10018f44:	0020      	movs	r0, r4
10018f46:	6367      	str	r7, [r4, #52]	; 0x34
10018f48:	63a7      	str	r7, [r4, #56]	; 0x38
10018f4a:	64a7      	str	r7, [r4, #72]	; 0x48
10018f4c:	64e7      	str	r7, [r4, #76]	; 0x4c
10018f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018f50:	1001b860 	.word	0x1001b860

10018f54 <_fwalk_reent>:
10018f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018f56:	0004      	movs	r4, r0
10018f58:	0007      	movs	r7, r0
10018f5a:	2600      	movs	r6, #0
10018f5c:	9101      	str	r1, [sp, #4]
10018f5e:	3448      	adds	r4, #72	; 0x48
10018f60:	2c00      	cmp	r4, #0
10018f62:	d016      	beq.n	10018f92 <_fwalk_reent+0x3e>
10018f64:	6863      	ldr	r3, [r4, #4]
10018f66:	68a5      	ldr	r5, [r4, #8]
10018f68:	9300      	str	r3, [sp, #0]
10018f6a:	9b00      	ldr	r3, [sp, #0]
10018f6c:	3b01      	subs	r3, #1
10018f6e:	9300      	str	r3, [sp, #0]
10018f70:	d40d      	bmi.n	10018f8e <_fwalk_reent+0x3a>
10018f72:	89ab      	ldrh	r3, [r5, #12]
10018f74:	2b01      	cmp	r3, #1
10018f76:	d908      	bls.n	10018f8a <_fwalk_reent+0x36>
10018f78:	220e      	movs	r2, #14
10018f7a:	5eab      	ldrsh	r3, [r5, r2]
10018f7c:	3301      	adds	r3, #1
10018f7e:	d004      	beq.n	10018f8a <_fwalk_reent+0x36>
10018f80:	0029      	movs	r1, r5
10018f82:	0038      	movs	r0, r7
10018f84:	9b01      	ldr	r3, [sp, #4]
10018f86:	4798      	blx	r3
10018f88:	4306      	orrs	r6, r0
10018f8a:	3568      	adds	r5, #104	; 0x68
10018f8c:	e7ed      	b.n	10018f6a <_fwalk_reent+0x16>
10018f8e:	6824      	ldr	r4, [r4, #0]
10018f90:	e7e6      	b.n	10018f60 <_fwalk_reent+0xc>
10018f92:	0030      	movs	r0, r6
10018f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10018f98 <__swhatbuf_r>:
10018f98:	b570      	push	{r4, r5, r6, lr}
10018f9a:	000e      	movs	r6, r1
10018f9c:	001d      	movs	r5, r3
10018f9e:	230e      	movs	r3, #14
10018fa0:	5ec9      	ldrsh	r1, [r1, r3]
10018fa2:	b090      	sub	sp, #64	; 0x40
10018fa4:	0014      	movs	r4, r2
10018fa6:	2900      	cmp	r1, #0
10018fa8:	da06      	bge.n	10018fb8 <__swhatbuf_r+0x20>
10018faa:	2300      	movs	r3, #0
10018fac:	602b      	str	r3, [r5, #0]
10018fae:	89b3      	ldrh	r3, [r6, #12]
10018fb0:	061b      	lsls	r3, r3, #24
10018fb2:	d50f      	bpl.n	10018fd4 <__swhatbuf_r+0x3c>
10018fb4:	2340      	movs	r3, #64	; 0x40
10018fb6:	e00f      	b.n	10018fd8 <__swhatbuf_r+0x40>
10018fb8:	aa01      	add	r2, sp, #4
10018fba:	f000 fbcd 	bl	10019758 <_fstat_r>
10018fbe:	2800      	cmp	r0, #0
10018fc0:	dbf3      	blt.n	10018faa <__swhatbuf_r+0x12>
10018fc2:	23f0      	movs	r3, #240	; 0xf0
10018fc4:	9a02      	ldr	r2, [sp, #8]
10018fc6:	021b      	lsls	r3, r3, #8
10018fc8:	4013      	ands	r3, r2
10018fca:	4a05      	ldr	r2, [pc, #20]	; (10018fe0 <__swhatbuf_r+0x48>)
10018fcc:	189b      	adds	r3, r3, r2
10018fce:	425a      	negs	r2, r3
10018fd0:	4153      	adcs	r3, r2
10018fd2:	602b      	str	r3, [r5, #0]
10018fd4:	2380      	movs	r3, #128	; 0x80
10018fd6:	00db      	lsls	r3, r3, #3
10018fd8:	2000      	movs	r0, #0
10018fda:	6023      	str	r3, [r4, #0]
10018fdc:	b010      	add	sp, #64	; 0x40
10018fde:	bd70      	pop	{r4, r5, r6, pc}
10018fe0:	ffffe000 	.word	0xffffe000

10018fe4 <__smakebuf_r>:
10018fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018fe6:	2602      	movs	r6, #2
10018fe8:	898b      	ldrh	r3, [r1, #12]
10018fea:	0005      	movs	r5, r0
10018fec:	000c      	movs	r4, r1
10018fee:	4233      	tst	r3, r6
10018ff0:	d110      	bne.n	10019014 <__smakebuf_r+0x30>
10018ff2:	ab01      	add	r3, sp, #4
10018ff4:	466a      	mov	r2, sp
10018ff6:	f7ff ffcf 	bl	10018f98 <__swhatbuf_r>
10018ffa:	9900      	ldr	r1, [sp, #0]
10018ffc:	0007      	movs	r7, r0
10018ffe:	0028      	movs	r0, r5
10019000:	f7ff fb7c 	bl	100186fc <_malloc_r>
10019004:	2800      	cmp	r0, #0
10019006:	d10c      	bne.n	10019022 <__smakebuf_r+0x3e>
10019008:	220c      	movs	r2, #12
1001900a:	5ea3      	ldrsh	r3, [r4, r2]
1001900c:	059a      	lsls	r2, r3, #22
1001900e:	d423      	bmi.n	10019058 <__smakebuf_r+0x74>
10019010:	4333      	orrs	r3, r6
10019012:	81a3      	strh	r3, [r4, #12]
10019014:	0023      	movs	r3, r4
10019016:	3347      	adds	r3, #71	; 0x47
10019018:	6023      	str	r3, [r4, #0]
1001901a:	6123      	str	r3, [r4, #16]
1001901c:	2301      	movs	r3, #1
1001901e:	6163      	str	r3, [r4, #20]
10019020:	e01a      	b.n	10019058 <__smakebuf_r+0x74>
10019022:	2280      	movs	r2, #128	; 0x80
10019024:	4b0d      	ldr	r3, [pc, #52]	; (1001905c <__smakebuf_r+0x78>)
10019026:	62ab      	str	r3, [r5, #40]	; 0x28
10019028:	89a3      	ldrh	r3, [r4, #12]
1001902a:	6020      	str	r0, [r4, #0]
1001902c:	4313      	orrs	r3, r2
1001902e:	81a3      	strh	r3, [r4, #12]
10019030:	9b00      	ldr	r3, [sp, #0]
10019032:	6120      	str	r0, [r4, #16]
10019034:	6163      	str	r3, [r4, #20]
10019036:	9b01      	ldr	r3, [sp, #4]
10019038:	2b00      	cmp	r3, #0
1001903a:	d00a      	beq.n	10019052 <__smakebuf_r+0x6e>
1001903c:	230e      	movs	r3, #14
1001903e:	5ee1      	ldrsh	r1, [r4, r3]
10019040:	0028      	movs	r0, r5
10019042:	f000 fb9b 	bl	1001977c <_isatty_r>
10019046:	2800      	cmp	r0, #0
10019048:	d003      	beq.n	10019052 <__smakebuf_r+0x6e>
1001904a:	2201      	movs	r2, #1
1001904c:	89a3      	ldrh	r3, [r4, #12]
1001904e:	4313      	orrs	r3, r2
10019050:	81a3      	strh	r3, [r4, #12]
10019052:	89a3      	ldrh	r3, [r4, #12]
10019054:	431f      	orrs	r7, r3
10019056:	81a7      	strh	r7, [r4, #12]
10019058:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001905a:	46c0      	nop			; (mov r8, r8)
1001905c:	10018ded 	.word	0x10018ded

10019060 <__sfputc_r>:
10019060:	6893      	ldr	r3, [r2, #8]
10019062:	b510      	push	{r4, lr}
10019064:	3b01      	subs	r3, #1
10019066:	6093      	str	r3, [r2, #8]
10019068:	2b00      	cmp	r3, #0
1001906a:	da05      	bge.n	10019078 <__sfputc_r+0x18>
1001906c:	6994      	ldr	r4, [r2, #24]
1001906e:	42a3      	cmp	r3, r4
10019070:	db08      	blt.n	10019084 <__sfputc_r+0x24>
10019072:	b2cb      	uxtb	r3, r1
10019074:	2b0a      	cmp	r3, #10
10019076:	d005      	beq.n	10019084 <__sfputc_r+0x24>
10019078:	6813      	ldr	r3, [r2, #0]
1001907a:	1c58      	adds	r0, r3, #1
1001907c:	6010      	str	r0, [r2, #0]
1001907e:	7019      	strb	r1, [r3, #0]
10019080:	b2c8      	uxtb	r0, r1
10019082:	e001      	b.n	10019088 <__sfputc_r+0x28>
10019084:	f7ff fd32 	bl	10018aec <__swbuf_r>
10019088:	bd10      	pop	{r4, pc}

1001908a <__sfputs_r>:
1001908a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001908c:	0006      	movs	r6, r0
1001908e:	000f      	movs	r7, r1
10019090:	0014      	movs	r4, r2
10019092:	18d5      	adds	r5, r2, r3
10019094:	42ac      	cmp	r4, r5
10019096:	d008      	beq.n	100190aa <__sfputs_r+0x20>
10019098:	7821      	ldrb	r1, [r4, #0]
1001909a:	003a      	movs	r2, r7
1001909c:	0030      	movs	r0, r6
1001909e:	f7ff ffdf 	bl	10019060 <__sfputc_r>
100190a2:	3401      	adds	r4, #1
100190a4:	1c43      	adds	r3, r0, #1
100190a6:	d1f5      	bne.n	10019094 <__sfputs_r+0xa>
100190a8:	e000      	b.n	100190ac <__sfputs_r+0x22>
100190aa:	2000      	movs	r0, #0
100190ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100190b0 <_vfiprintf_r>:
100190b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100190b2:	b09f      	sub	sp, #124	; 0x7c
100190b4:	0006      	movs	r6, r0
100190b6:	000f      	movs	r7, r1
100190b8:	9202      	str	r2, [sp, #8]
100190ba:	9305      	str	r3, [sp, #20]
100190bc:	2800      	cmp	r0, #0
100190be:	d004      	beq.n	100190ca <_vfiprintf_r+0x1a>
100190c0:	6983      	ldr	r3, [r0, #24]
100190c2:	2b00      	cmp	r3, #0
100190c4:	d101      	bne.n	100190ca <_vfiprintf_r+0x1a>
100190c6:	f7ff fed3 	bl	10018e70 <__sinit>
100190ca:	4b7f      	ldr	r3, [pc, #508]	; (100192c8 <_vfiprintf_r+0x218>)
100190cc:	429f      	cmp	r7, r3
100190ce:	d101      	bne.n	100190d4 <_vfiprintf_r+0x24>
100190d0:	6877      	ldr	r7, [r6, #4]
100190d2:	e008      	b.n	100190e6 <_vfiprintf_r+0x36>
100190d4:	4b7d      	ldr	r3, [pc, #500]	; (100192cc <_vfiprintf_r+0x21c>)
100190d6:	429f      	cmp	r7, r3
100190d8:	d101      	bne.n	100190de <_vfiprintf_r+0x2e>
100190da:	68b7      	ldr	r7, [r6, #8]
100190dc:	e003      	b.n	100190e6 <_vfiprintf_r+0x36>
100190de:	4b7c      	ldr	r3, [pc, #496]	; (100192d0 <_vfiprintf_r+0x220>)
100190e0:	429f      	cmp	r7, r3
100190e2:	d100      	bne.n	100190e6 <_vfiprintf_r+0x36>
100190e4:	68f7      	ldr	r7, [r6, #12]
100190e6:	89bb      	ldrh	r3, [r7, #12]
100190e8:	071b      	lsls	r3, r3, #28
100190ea:	d50a      	bpl.n	10019102 <_vfiprintf_r+0x52>
100190ec:	693b      	ldr	r3, [r7, #16]
100190ee:	2b00      	cmp	r3, #0
100190f0:	d007      	beq.n	10019102 <_vfiprintf_r+0x52>
100190f2:	2300      	movs	r3, #0
100190f4:	ad06      	add	r5, sp, #24
100190f6:	616b      	str	r3, [r5, #20]
100190f8:	3320      	adds	r3, #32
100190fa:	766b      	strb	r3, [r5, #25]
100190fc:	3310      	adds	r3, #16
100190fe:	76ab      	strb	r3, [r5, #26]
10019100:	e03d      	b.n	1001917e <_vfiprintf_r+0xce>
10019102:	0039      	movs	r1, r7
10019104:	0030      	movs	r0, r6
10019106:	f7ff fd49 	bl	10018b9c <__swsetup_r>
1001910a:	2800      	cmp	r0, #0
1001910c:	d0f1      	beq.n	100190f2 <_vfiprintf_r+0x42>
1001910e:	2001      	movs	r0, #1
10019110:	4240      	negs	r0, r0
10019112:	e0d6      	b.n	100192c2 <_vfiprintf_r+0x212>
10019114:	9a05      	ldr	r2, [sp, #20]
10019116:	1d11      	adds	r1, r2, #4
10019118:	6812      	ldr	r2, [r2, #0]
1001911a:	9105      	str	r1, [sp, #20]
1001911c:	2a00      	cmp	r2, #0
1001911e:	da00      	bge.n	10019122 <_vfiprintf_r+0x72>
10019120:	e07f      	b.n	10019222 <_vfiprintf_r+0x172>
10019122:	9209      	str	r2, [sp, #36]	; 0x24
10019124:	3401      	adds	r4, #1
10019126:	7823      	ldrb	r3, [r4, #0]
10019128:	2b2e      	cmp	r3, #46	; 0x2e
1001912a:	d100      	bne.n	1001912e <_vfiprintf_r+0x7e>
1001912c:	e08d      	b.n	1001924a <_vfiprintf_r+0x19a>
1001912e:	7821      	ldrb	r1, [r4, #0]
10019130:	2203      	movs	r2, #3
10019132:	4868      	ldr	r0, [pc, #416]	; (100192d4 <_vfiprintf_r+0x224>)
10019134:	f000 fb48 	bl	100197c8 <memchr>
10019138:	2800      	cmp	r0, #0
1001913a:	d007      	beq.n	1001914c <_vfiprintf_r+0x9c>
1001913c:	4b65      	ldr	r3, [pc, #404]	; (100192d4 <_vfiprintf_r+0x224>)
1001913e:	682a      	ldr	r2, [r5, #0]
10019140:	1ac0      	subs	r0, r0, r3
10019142:	2340      	movs	r3, #64	; 0x40
10019144:	4083      	lsls	r3, r0
10019146:	4313      	orrs	r3, r2
10019148:	602b      	str	r3, [r5, #0]
1001914a:	3401      	adds	r4, #1
1001914c:	7821      	ldrb	r1, [r4, #0]
1001914e:	1c63      	adds	r3, r4, #1
10019150:	2206      	movs	r2, #6
10019152:	4861      	ldr	r0, [pc, #388]	; (100192d8 <_vfiprintf_r+0x228>)
10019154:	9302      	str	r3, [sp, #8]
10019156:	7629      	strb	r1, [r5, #24]
10019158:	f000 fb36 	bl	100197c8 <memchr>
1001915c:	2800      	cmp	r0, #0
1001915e:	d100      	bne.n	10019162 <_vfiprintf_r+0xb2>
10019160:	e09d      	b.n	1001929e <_vfiprintf_r+0x1ee>
10019162:	4b5e      	ldr	r3, [pc, #376]	; (100192dc <_vfiprintf_r+0x22c>)
10019164:	2b00      	cmp	r3, #0
10019166:	d000      	beq.n	1001916a <_vfiprintf_r+0xba>
10019168:	e090      	b.n	1001928c <_vfiprintf_r+0x1dc>
1001916a:	2207      	movs	r2, #7
1001916c:	9b05      	ldr	r3, [sp, #20]
1001916e:	3307      	adds	r3, #7
10019170:	4393      	bics	r3, r2
10019172:	3308      	adds	r3, #8
10019174:	9305      	str	r3, [sp, #20]
10019176:	696b      	ldr	r3, [r5, #20]
10019178:	9a03      	ldr	r2, [sp, #12]
1001917a:	189b      	adds	r3, r3, r2
1001917c:	616b      	str	r3, [r5, #20]
1001917e:	9c02      	ldr	r4, [sp, #8]
10019180:	7823      	ldrb	r3, [r4, #0]
10019182:	2b00      	cmp	r3, #0
10019184:	d104      	bne.n	10019190 <_vfiprintf_r+0xe0>
10019186:	9b02      	ldr	r3, [sp, #8]
10019188:	1ae3      	subs	r3, r4, r3
1001918a:	9304      	str	r3, [sp, #16]
1001918c:	d012      	beq.n	100191b4 <_vfiprintf_r+0x104>
1001918e:	e003      	b.n	10019198 <_vfiprintf_r+0xe8>
10019190:	2b25      	cmp	r3, #37	; 0x25
10019192:	d0f8      	beq.n	10019186 <_vfiprintf_r+0xd6>
10019194:	3401      	adds	r4, #1
10019196:	e7f3      	b.n	10019180 <_vfiprintf_r+0xd0>
10019198:	9b04      	ldr	r3, [sp, #16]
1001919a:	9a02      	ldr	r2, [sp, #8]
1001919c:	0039      	movs	r1, r7
1001919e:	0030      	movs	r0, r6
100191a0:	f7ff ff73 	bl	1001908a <__sfputs_r>
100191a4:	1c43      	adds	r3, r0, #1
100191a6:	d100      	bne.n	100191aa <_vfiprintf_r+0xfa>
100191a8:	e086      	b.n	100192b8 <_vfiprintf_r+0x208>
100191aa:	696a      	ldr	r2, [r5, #20]
100191ac:	9b04      	ldr	r3, [sp, #16]
100191ae:	4694      	mov	ip, r2
100191b0:	4463      	add	r3, ip
100191b2:	616b      	str	r3, [r5, #20]
100191b4:	7823      	ldrb	r3, [r4, #0]
100191b6:	2b00      	cmp	r3, #0
100191b8:	d07e      	beq.n	100192b8 <_vfiprintf_r+0x208>
100191ba:	2201      	movs	r2, #1
100191bc:	2300      	movs	r3, #0
100191be:	4252      	negs	r2, r2
100191c0:	606a      	str	r2, [r5, #4]
100191c2:	a902      	add	r1, sp, #8
100191c4:	3254      	adds	r2, #84	; 0x54
100191c6:	1852      	adds	r2, r2, r1
100191c8:	3401      	adds	r4, #1
100191ca:	602b      	str	r3, [r5, #0]
100191cc:	60eb      	str	r3, [r5, #12]
100191ce:	60ab      	str	r3, [r5, #8]
100191d0:	7013      	strb	r3, [r2, #0]
100191d2:	65ab      	str	r3, [r5, #88]	; 0x58
100191d4:	7821      	ldrb	r1, [r4, #0]
100191d6:	2205      	movs	r2, #5
100191d8:	4841      	ldr	r0, [pc, #260]	; (100192e0 <_vfiprintf_r+0x230>)
100191da:	f000 faf5 	bl	100197c8 <memchr>
100191de:	2800      	cmp	r0, #0
100191e0:	d008      	beq.n	100191f4 <_vfiprintf_r+0x144>
100191e2:	4b3f      	ldr	r3, [pc, #252]	; (100192e0 <_vfiprintf_r+0x230>)
100191e4:	682a      	ldr	r2, [r5, #0]
100191e6:	1ac0      	subs	r0, r0, r3
100191e8:	2301      	movs	r3, #1
100191ea:	4083      	lsls	r3, r0
100191ec:	4313      	orrs	r3, r2
100191ee:	602b      	str	r3, [r5, #0]
100191f0:	3401      	adds	r4, #1
100191f2:	e7ef      	b.n	100191d4 <_vfiprintf_r+0x124>
100191f4:	682b      	ldr	r3, [r5, #0]
100191f6:	06da      	lsls	r2, r3, #27
100191f8:	d504      	bpl.n	10019204 <_vfiprintf_r+0x154>
100191fa:	2253      	movs	r2, #83	; 0x53
100191fc:	2120      	movs	r1, #32
100191fe:	a802      	add	r0, sp, #8
10019200:	1812      	adds	r2, r2, r0
10019202:	7011      	strb	r1, [r2, #0]
10019204:	071a      	lsls	r2, r3, #28
10019206:	d504      	bpl.n	10019212 <_vfiprintf_r+0x162>
10019208:	2253      	movs	r2, #83	; 0x53
1001920a:	212b      	movs	r1, #43	; 0x2b
1001920c:	a802      	add	r0, sp, #8
1001920e:	1812      	adds	r2, r2, r0
10019210:	7011      	strb	r1, [r2, #0]
10019212:	7822      	ldrb	r2, [r4, #0]
10019214:	2a2a      	cmp	r2, #42	; 0x2a
10019216:	d100      	bne.n	1001921a <_vfiprintf_r+0x16a>
10019218:	e77c      	b.n	10019114 <_vfiprintf_r+0x64>
1001921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001921c:	2000      	movs	r0, #0
1001921e:	210a      	movs	r1, #10
10019220:	e005      	b.n	1001922e <_vfiprintf_r+0x17e>
10019222:	4252      	negs	r2, r2
10019224:	60ea      	str	r2, [r5, #12]
10019226:	2202      	movs	r2, #2
10019228:	4313      	orrs	r3, r2
1001922a:	602b      	str	r3, [r5, #0]
1001922c:	e77a      	b.n	10019124 <_vfiprintf_r+0x74>
1001922e:	7822      	ldrb	r2, [r4, #0]
10019230:	3a30      	subs	r2, #48	; 0x30
10019232:	2a09      	cmp	r2, #9
10019234:	d804      	bhi.n	10019240 <_vfiprintf_r+0x190>
10019236:	434b      	muls	r3, r1
10019238:	3401      	adds	r4, #1
1001923a:	189b      	adds	r3, r3, r2
1001923c:	2001      	movs	r0, #1
1001923e:	e7f6      	b.n	1001922e <_vfiprintf_r+0x17e>
10019240:	2800      	cmp	r0, #0
10019242:	d100      	bne.n	10019246 <_vfiprintf_r+0x196>
10019244:	e76f      	b.n	10019126 <_vfiprintf_r+0x76>
10019246:	9309      	str	r3, [sp, #36]	; 0x24
10019248:	e76d      	b.n	10019126 <_vfiprintf_r+0x76>
1001924a:	7863      	ldrb	r3, [r4, #1]
1001924c:	2b2a      	cmp	r3, #42	; 0x2a
1001924e:	d10a      	bne.n	10019266 <_vfiprintf_r+0x1b6>
10019250:	9b05      	ldr	r3, [sp, #20]
10019252:	3402      	adds	r4, #2
10019254:	1d1a      	adds	r2, r3, #4
10019256:	681b      	ldr	r3, [r3, #0]
10019258:	9205      	str	r2, [sp, #20]
1001925a:	2b00      	cmp	r3, #0
1001925c:	da01      	bge.n	10019262 <_vfiprintf_r+0x1b2>
1001925e:	2301      	movs	r3, #1
10019260:	425b      	negs	r3, r3
10019262:	9307      	str	r3, [sp, #28]
10019264:	e763      	b.n	1001912e <_vfiprintf_r+0x7e>
10019266:	2300      	movs	r3, #0
10019268:	200a      	movs	r0, #10
1001926a:	001a      	movs	r2, r3
1001926c:	3401      	adds	r4, #1
1001926e:	606b      	str	r3, [r5, #4]
10019270:	7821      	ldrb	r1, [r4, #0]
10019272:	3930      	subs	r1, #48	; 0x30
10019274:	2909      	cmp	r1, #9
10019276:	d804      	bhi.n	10019282 <_vfiprintf_r+0x1d2>
10019278:	4342      	muls	r2, r0
1001927a:	3401      	adds	r4, #1
1001927c:	1852      	adds	r2, r2, r1
1001927e:	2301      	movs	r3, #1
10019280:	e7f6      	b.n	10019270 <_vfiprintf_r+0x1c0>
10019282:	2b00      	cmp	r3, #0
10019284:	d100      	bne.n	10019288 <_vfiprintf_r+0x1d8>
10019286:	e752      	b.n	1001912e <_vfiprintf_r+0x7e>
10019288:	9207      	str	r2, [sp, #28]
1001928a:	e750      	b.n	1001912e <_vfiprintf_r+0x7e>
1001928c:	ab05      	add	r3, sp, #20
1001928e:	9300      	str	r3, [sp, #0]
10019290:	003a      	movs	r2, r7
10019292:	4b14      	ldr	r3, [pc, #80]	; (100192e4 <_vfiprintf_r+0x234>)
10019294:	0029      	movs	r1, r5
10019296:	0030      	movs	r0, r6
10019298:	e000      	b.n	1001929c <_vfiprintf_r+0x1ec>
1001929a:	bf00      	nop
1001929c:	e007      	b.n	100192ae <_vfiprintf_r+0x1fe>
1001929e:	ab05      	add	r3, sp, #20
100192a0:	9300      	str	r3, [sp, #0]
100192a2:	003a      	movs	r2, r7
100192a4:	4b0f      	ldr	r3, [pc, #60]	; (100192e4 <_vfiprintf_r+0x234>)
100192a6:	0029      	movs	r1, r5
100192a8:	0030      	movs	r0, r6
100192aa:	f000 f88b 	bl	100193c4 <_printf_i>
100192ae:	9003      	str	r0, [sp, #12]
100192b0:	9b03      	ldr	r3, [sp, #12]
100192b2:	3301      	adds	r3, #1
100192b4:	d000      	beq.n	100192b8 <_vfiprintf_r+0x208>
100192b6:	e75e      	b.n	10019176 <_vfiprintf_r+0xc6>
100192b8:	89bb      	ldrh	r3, [r7, #12]
100192ba:	065b      	lsls	r3, r3, #25
100192bc:	d500      	bpl.n	100192c0 <_vfiprintf_r+0x210>
100192be:	e726      	b.n	1001910e <_vfiprintf_r+0x5e>
100192c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100192c2:	b01f      	add	sp, #124	; 0x7c
100192c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100192c6:	46c0      	nop			; (mov r8, r8)
100192c8:	1001b864 	.word	0x1001b864
100192cc:	1001b884 	.word	0x1001b884
100192d0:	1001b8a4 	.word	0x1001b8a4
100192d4:	1001b8ca 	.word	0x1001b8ca
100192d8:	1001b8ce 	.word	0x1001b8ce
100192dc:	00000000 	.word	0x00000000
100192e0:	1001b8c4 	.word	0x1001b8c4
100192e4:	1001908b 	.word	0x1001908b

100192e8 <_printf_common>:
100192e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100192ea:	0017      	movs	r7, r2
100192ec:	9301      	str	r3, [sp, #4]
100192ee:	688a      	ldr	r2, [r1, #8]
100192f0:	690b      	ldr	r3, [r1, #16]
100192f2:	9000      	str	r0, [sp, #0]
100192f4:	000c      	movs	r4, r1
100192f6:	4293      	cmp	r3, r2
100192f8:	da00      	bge.n	100192fc <_printf_common+0x14>
100192fa:	0013      	movs	r3, r2
100192fc:	0022      	movs	r2, r4
100192fe:	603b      	str	r3, [r7, #0]
10019300:	3243      	adds	r2, #67	; 0x43
10019302:	7812      	ldrb	r2, [r2, #0]
10019304:	2a00      	cmp	r2, #0
10019306:	d001      	beq.n	1001930c <_printf_common+0x24>
10019308:	3301      	adds	r3, #1
1001930a:	603b      	str	r3, [r7, #0]
1001930c:	6823      	ldr	r3, [r4, #0]
1001930e:	069b      	lsls	r3, r3, #26
10019310:	d502      	bpl.n	10019318 <_printf_common+0x30>
10019312:	683b      	ldr	r3, [r7, #0]
10019314:	3302      	adds	r3, #2
10019316:	603b      	str	r3, [r7, #0]
10019318:	2506      	movs	r5, #6
1001931a:	6823      	ldr	r3, [r4, #0]
1001931c:	401d      	ands	r5, r3
1001931e:	d01e      	beq.n	1001935e <_printf_common+0x76>
10019320:	0023      	movs	r3, r4
10019322:	3343      	adds	r3, #67	; 0x43
10019324:	781b      	ldrb	r3, [r3, #0]
10019326:	1e5a      	subs	r2, r3, #1
10019328:	4193      	sbcs	r3, r2
1001932a:	6822      	ldr	r2, [r4, #0]
1001932c:	0692      	lsls	r2, r2, #26
1001932e:	d51c      	bpl.n	1001936a <_printf_common+0x82>
10019330:	2030      	movs	r0, #48	; 0x30
10019332:	18e1      	adds	r1, r4, r3
10019334:	3143      	adds	r1, #67	; 0x43
10019336:	7008      	strb	r0, [r1, #0]
10019338:	0021      	movs	r1, r4
1001933a:	1c5a      	adds	r2, r3, #1
1001933c:	3145      	adds	r1, #69	; 0x45
1001933e:	7809      	ldrb	r1, [r1, #0]
10019340:	18a2      	adds	r2, r4, r2
10019342:	3243      	adds	r2, #67	; 0x43
10019344:	3302      	adds	r3, #2
10019346:	7011      	strb	r1, [r2, #0]
10019348:	e00f      	b.n	1001936a <_printf_common+0x82>
1001934a:	0022      	movs	r2, r4
1001934c:	2301      	movs	r3, #1
1001934e:	3219      	adds	r2, #25
10019350:	9901      	ldr	r1, [sp, #4]
10019352:	9800      	ldr	r0, [sp, #0]
10019354:	9e08      	ldr	r6, [sp, #32]
10019356:	47b0      	blx	r6
10019358:	1c43      	adds	r3, r0, #1
1001935a:	d00e      	beq.n	1001937a <_printf_common+0x92>
1001935c:	3501      	adds	r5, #1
1001935e:	68e3      	ldr	r3, [r4, #12]
10019360:	683a      	ldr	r2, [r7, #0]
10019362:	1a9b      	subs	r3, r3, r2
10019364:	429d      	cmp	r5, r3
10019366:	dbf0      	blt.n	1001934a <_printf_common+0x62>
10019368:	e7da      	b.n	10019320 <_printf_common+0x38>
1001936a:	0022      	movs	r2, r4
1001936c:	9901      	ldr	r1, [sp, #4]
1001936e:	3243      	adds	r2, #67	; 0x43
10019370:	9800      	ldr	r0, [sp, #0]
10019372:	9d08      	ldr	r5, [sp, #32]
10019374:	47a8      	blx	r5
10019376:	1c43      	adds	r3, r0, #1
10019378:	d102      	bne.n	10019380 <_printf_common+0x98>
1001937a:	2001      	movs	r0, #1
1001937c:	4240      	negs	r0, r0
1001937e:	e020      	b.n	100193c2 <_printf_common+0xda>
10019380:	2306      	movs	r3, #6
10019382:	6820      	ldr	r0, [r4, #0]
10019384:	68e1      	ldr	r1, [r4, #12]
10019386:	683a      	ldr	r2, [r7, #0]
10019388:	4003      	ands	r3, r0
1001938a:	2500      	movs	r5, #0
1001938c:	2b04      	cmp	r3, #4
1001938e:	d103      	bne.n	10019398 <_printf_common+0xb0>
10019390:	1a8d      	subs	r5, r1, r2
10019392:	43eb      	mvns	r3, r5
10019394:	17db      	asrs	r3, r3, #31
10019396:	401d      	ands	r5, r3
10019398:	68a3      	ldr	r3, [r4, #8]
1001939a:	6922      	ldr	r2, [r4, #16]
1001939c:	4293      	cmp	r3, r2
1001939e:	dd01      	ble.n	100193a4 <_printf_common+0xbc>
100193a0:	1a9b      	subs	r3, r3, r2
100193a2:	18ed      	adds	r5, r5, r3
100193a4:	2700      	movs	r7, #0
100193a6:	42bd      	cmp	r5, r7
100193a8:	d00a      	beq.n	100193c0 <_printf_common+0xd8>
100193aa:	0022      	movs	r2, r4
100193ac:	2301      	movs	r3, #1
100193ae:	321a      	adds	r2, #26
100193b0:	9901      	ldr	r1, [sp, #4]
100193b2:	9800      	ldr	r0, [sp, #0]
100193b4:	9e08      	ldr	r6, [sp, #32]
100193b6:	47b0      	blx	r6
100193b8:	1c43      	adds	r3, r0, #1
100193ba:	d0de      	beq.n	1001937a <_printf_common+0x92>
100193bc:	3701      	adds	r7, #1
100193be:	e7f2      	b.n	100193a6 <_printf_common+0xbe>
100193c0:	2000      	movs	r0, #0
100193c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100193c4 <_printf_i>:
100193c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100193c6:	b08b      	sub	sp, #44	; 0x2c
100193c8:	9206      	str	r2, [sp, #24]
100193ca:	000a      	movs	r2, r1
100193cc:	3243      	adds	r2, #67	; 0x43
100193ce:	9307      	str	r3, [sp, #28]
100193d0:	9005      	str	r0, [sp, #20]
100193d2:	9204      	str	r2, [sp, #16]
100193d4:	7e0a      	ldrb	r2, [r1, #24]
100193d6:	000c      	movs	r4, r1
100193d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100193da:	2a6e      	cmp	r2, #110	; 0x6e
100193dc:	d100      	bne.n	100193e0 <_printf_i+0x1c>
100193de:	e0ab      	b.n	10019538 <_printf_i+0x174>
100193e0:	d811      	bhi.n	10019406 <_printf_i+0x42>
100193e2:	2a63      	cmp	r2, #99	; 0x63
100193e4:	d022      	beq.n	1001942c <_printf_i+0x68>
100193e6:	d809      	bhi.n	100193fc <_printf_i+0x38>
100193e8:	2a00      	cmp	r2, #0
100193ea:	d100      	bne.n	100193ee <_printf_i+0x2a>
100193ec:	e0b5      	b.n	1001955a <_printf_i+0x196>
100193ee:	2a58      	cmp	r2, #88	; 0x58
100193f0:	d000      	beq.n	100193f4 <_printf_i+0x30>
100193f2:	e0c5      	b.n	10019580 <_printf_i+0x1bc>
100193f4:	3145      	adds	r1, #69	; 0x45
100193f6:	700a      	strb	r2, [r1, #0]
100193f8:	4a81      	ldr	r2, [pc, #516]	; (10019600 <_printf_i+0x23c>)
100193fa:	e04f      	b.n	1001949c <_printf_i+0xd8>
100193fc:	2a64      	cmp	r2, #100	; 0x64
100193fe:	d01d      	beq.n	1001943c <_printf_i+0x78>
10019400:	2a69      	cmp	r2, #105	; 0x69
10019402:	d01b      	beq.n	1001943c <_printf_i+0x78>
10019404:	e0bc      	b.n	10019580 <_printf_i+0x1bc>
10019406:	2a73      	cmp	r2, #115	; 0x73
10019408:	d100      	bne.n	1001940c <_printf_i+0x48>
1001940a:	e0aa      	b.n	10019562 <_printf_i+0x19e>
1001940c:	d809      	bhi.n	10019422 <_printf_i+0x5e>
1001940e:	2a6f      	cmp	r2, #111	; 0x6f
10019410:	d029      	beq.n	10019466 <_printf_i+0xa2>
10019412:	2a70      	cmp	r2, #112	; 0x70
10019414:	d000      	beq.n	10019418 <_printf_i+0x54>
10019416:	e0b3      	b.n	10019580 <_printf_i+0x1bc>
10019418:	2220      	movs	r2, #32
1001941a:	6809      	ldr	r1, [r1, #0]
1001941c:	430a      	orrs	r2, r1
1001941e:	6022      	str	r2, [r4, #0]
10019420:	e037      	b.n	10019492 <_printf_i+0xce>
10019422:	2a75      	cmp	r2, #117	; 0x75
10019424:	d01f      	beq.n	10019466 <_printf_i+0xa2>
10019426:	2a78      	cmp	r2, #120	; 0x78
10019428:	d033      	beq.n	10019492 <_printf_i+0xce>
1001942a:	e0a9      	b.n	10019580 <_printf_i+0x1bc>
1001942c:	000e      	movs	r6, r1
1001942e:	681a      	ldr	r2, [r3, #0]
10019430:	3642      	adds	r6, #66	; 0x42
10019432:	1d11      	adds	r1, r2, #4
10019434:	6019      	str	r1, [r3, #0]
10019436:	6813      	ldr	r3, [r2, #0]
10019438:	7033      	strb	r3, [r6, #0]
1001943a:	e0a4      	b.n	10019586 <_printf_i+0x1c2>
1001943c:	6821      	ldr	r1, [r4, #0]
1001943e:	681a      	ldr	r2, [r3, #0]
10019440:	0608      	lsls	r0, r1, #24
10019442:	d406      	bmi.n	10019452 <_printf_i+0x8e>
10019444:	0649      	lsls	r1, r1, #25
10019446:	d504      	bpl.n	10019452 <_printf_i+0x8e>
10019448:	1d11      	adds	r1, r2, #4
1001944a:	6019      	str	r1, [r3, #0]
1001944c:	2300      	movs	r3, #0
1001944e:	5ed5      	ldrsh	r5, [r2, r3]
10019450:	e002      	b.n	10019458 <_printf_i+0x94>
10019452:	1d11      	adds	r1, r2, #4
10019454:	6019      	str	r1, [r3, #0]
10019456:	6815      	ldr	r5, [r2, #0]
10019458:	2d00      	cmp	r5, #0
1001945a:	da3b      	bge.n	100194d4 <_printf_i+0x110>
1001945c:	232d      	movs	r3, #45	; 0x2d
1001945e:	9a04      	ldr	r2, [sp, #16]
10019460:	426d      	negs	r5, r5
10019462:	7013      	strb	r3, [r2, #0]
10019464:	e036      	b.n	100194d4 <_printf_i+0x110>
10019466:	6821      	ldr	r1, [r4, #0]
10019468:	681a      	ldr	r2, [r3, #0]
1001946a:	0608      	lsls	r0, r1, #24
1001946c:	d406      	bmi.n	1001947c <_printf_i+0xb8>
1001946e:	0649      	lsls	r1, r1, #25
10019470:	d504      	bpl.n	1001947c <_printf_i+0xb8>
10019472:	6815      	ldr	r5, [r2, #0]
10019474:	1d11      	adds	r1, r2, #4
10019476:	6019      	str	r1, [r3, #0]
10019478:	b2ad      	uxth	r5, r5
1001947a:	e002      	b.n	10019482 <_printf_i+0xbe>
1001947c:	1d11      	adds	r1, r2, #4
1001947e:	6019      	str	r1, [r3, #0]
10019480:	6815      	ldr	r5, [r2, #0]
10019482:	4b5f      	ldr	r3, [pc, #380]	; (10019600 <_printf_i+0x23c>)
10019484:	7e22      	ldrb	r2, [r4, #24]
10019486:	9303      	str	r3, [sp, #12]
10019488:	2708      	movs	r7, #8
1001948a:	2a6f      	cmp	r2, #111	; 0x6f
1001948c:	d01d      	beq.n	100194ca <_printf_i+0x106>
1001948e:	270a      	movs	r7, #10
10019490:	e01b      	b.n	100194ca <_printf_i+0x106>
10019492:	0022      	movs	r2, r4
10019494:	2178      	movs	r1, #120	; 0x78
10019496:	3245      	adds	r2, #69	; 0x45
10019498:	7011      	strb	r1, [r2, #0]
1001949a:	4a5a      	ldr	r2, [pc, #360]	; (10019604 <_printf_i+0x240>)
1001949c:	6819      	ldr	r1, [r3, #0]
1001949e:	9203      	str	r2, [sp, #12]
100194a0:	1d08      	adds	r0, r1, #4
100194a2:	6822      	ldr	r2, [r4, #0]
100194a4:	6018      	str	r0, [r3, #0]
100194a6:	680d      	ldr	r5, [r1, #0]
100194a8:	0610      	lsls	r0, r2, #24
100194aa:	d402      	bmi.n	100194b2 <_printf_i+0xee>
100194ac:	0650      	lsls	r0, r2, #25
100194ae:	d500      	bpl.n	100194b2 <_printf_i+0xee>
100194b0:	b2ad      	uxth	r5, r5
100194b2:	07d3      	lsls	r3, r2, #31
100194b4:	d502      	bpl.n	100194bc <_printf_i+0xf8>
100194b6:	2320      	movs	r3, #32
100194b8:	431a      	orrs	r2, r3
100194ba:	6022      	str	r2, [r4, #0]
100194bc:	2710      	movs	r7, #16
100194be:	2d00      	cmp	r5, #0
100194c0:	d103      	bne.n	100194ca <_printf_i+0x106>
100194c2:	2320      	movs	r3, #32
100194c4:	6822      	ldr	r2, [r4, #0]
100194c6:	439a      	bics	r2, r3
100194c8:	6022      	str	r2, [r4, #0]
100194ca:	0023      	movs	r3, r4
100194cc:	2200      	movs	r2, #0
100194ce:	3343      	adds	r3, #67	; 0x43
100194d0:	701a      	strb	r2, [r3, #0]
100194d2:	e002      	b.n	100194da <_printf_i+0x116>
100194d4:	270a      	movs	r7, #10
100194d6:	4b4a      	ldr	r3, [pc, #296]	; (10019600 <_printf_i+0x23c>)
100194d8:	9303      	str	r3, [sp, #12]
100194da:	6863      	ldr	r3, [r4, #4]
100194dc:	60a3      	str	r3, [r4, #8]
100194de:	2b00      	cmp	r3, #0
100194e0:	db09      	blt.n	100194f6 <_printf_i+0x132>
100194e2:	2204      	movs	r2, #4
100194e4:	6821      	ldr	r1, [r4, #0]
100194e6:	4391      	bics	r1, r2
100194e8:	6021      	str	r1, [r4, #0]
100194ea:	2d00      	cmp	r5, #0
100194ec:	d105      	bne.n	100194fa <_printf_i+0x136>
100194ee:	9e04      	ldr	r6, [sp, #16]
100194f0:	2b00      	cmp	r3, #0
100194f2:	d011      	beq.n	10019518 <_printf_i+0x154>
100194f4:	e07b      	b.n	100195ee <_printf_i+0x22a>
100194f6:	2d00      	cmp	r5, #0
100194f8:	d079      	beq.n	100195ee <_printf_i+0x22a>
100194fa:	9e04      	ldr	r6, [sp, #16]
100194fc:	0028      	movs	r0, r5
100194fe:	0039      	movs	r1, r7
10019500:	f7fb ff88 	bl	10015414 <__aeabi_uidivmod>
10019504:	9b03      	ldr	r3, [sp, #12]
10019506:	3e01      	subs	r6, #1
10019508:	5c5b      	ldrb	r3, [r3, r1]
1001950a:	0028      	movs	r0, r5
1001950c:	7033      	strb	r3, [r6, #0]
1001950e:	0039      	movs	r1, r7
10019510:	f7fb fefa 	bl	10015308 <__aeabi_uidiv>
10019514:	1e05      	subs	r5, r0, #0
10019516:	d1f1      	bne.n	100194fc <_printf_i+0x138>
10019518:	2f08      	cmp	r7, #8
1001951a:	d109      	bne.n	10019530 <_printf_i+0x16c>
1001951c:	6823      	ldr	r3, [r4, #0]
1001951e:	07db      	lsls	r3, r3, #31
10019520:	d506      	bpl.n	10019530 <_printf_i+0x16c>
10019522:	6863      	ldr	r3, [r4, #4]
10019524:	6922      	ldr	r2, [r4, #16]
10019526:	4293      	cmp	r3, r2
10019528:	dc02      	bgt.n	10019530 <_printf_i+0x16c>
1001952a:	2330      	movs	r3, #48	; 0x30
1001952c:	3e01      	subs	r6, #1
1001952e:	7033      	strb	r3, [r6, #0]
10019530:	9b04      	ldr	r3, [sp, #16]
10019532:	1b9b      	subs	r3, r3, r6
10019534:	6123      	str	r3, [r4, #16]
10019536:	e02b      	b.n	10019590 <_printf_i+0x1cc>
10019538:	6809      	ldr	r1, [r1, #0]
1001953a:	681a      	ldr	r2, [r3, #0]
1001953c:	0608      	lsls	r0, r1, #24
1001953e:	d407      	bmi.n	10019550 <_printf_i+0x18c>
10019540:	0649      	lsls	r1, r1, #25
10019542:	d505      	bpl.n	10019550 <_printf_i+0x18c>
10019544:	1d11      	adds	r1, r2, #4
10019546:	6019      	str	r1, [r3, #0]
10019548:	6813      	ldr	r3, [r2, #0]
1001954a:	8aa2      	ldrh	r2, [r4, #20]
1001954c:	801a      	strh	r2, [r3, #0]
1001954e:	e004      	b.n	1001955a <_printf_i+0x196>
10019550:	1d11      	adds	r1, r2, #4
10019552:	6019      	str	r1, [r3, #0]
10019554:	6813      	ldr	r3, [r2, #0]
10019556:	6962      	ldr	r2, [r4, #20]
10019558:	601a      	str	r2, [r3, #0]
1001955a:	2300      	movs	r3, #0
1001955c:	9e04      	ldr	r6, [sp, #16]
1001955e:	6123      	str	r3, [r4, #16]
10019560:	e016      	b.n	10019590 <_printf_i+0x1cc>
10019562:	681a      	ldr	r2, [r3, #0]
10019564:	1d11      	adds	r1, r2, #4
10019566:	6019      	str	r1, [r3, #0]
10019568:	6816      	ldr	r6, [r2, #0]
1001956a:	2100      	movs	r1, #0
1001956c:	6862      	ldr	r2, [r4, #4]
1001956e:	0030      	movs	r0, r6
10019570:	f000 f92a 	bl	100197c8 <memchr>
10019574:	2800      	cmp	r0, #0
10019576:	d001      	beq.n	1001957c <_printf_i+0x1b8>
10019578:	1b80      	subs	r0, r0, r6
1001957a:	6060      	str	r0, [r4, #4]
1001957c:	6863      	ldr	r3, [r4, #4]
1001957e:	e003      	b.n	10019588 <_printf_i+0x1c4>
10019580:	0026      	movs	r6, r4
10019582:	3642      	adds	r6, #66	; 0x42
10019584:	7032      	strb	r2, [r6, #0]
10019586:	2301      	movs	r3, #1
10019588:	6123      	str	r3, [r4, #16]
1001958a:	2300      	movs	r3, #0
1001958c:	9a04      	ldr	r2, [sp, #16]
1001958e:	7013      	strb	r3, [r2, #0]
10019590:	9b07      	ldr	r3, [sp, #28]
10019592:	aa09      	add	r2, sp, #36	; 0x24
10019594:	9300      	str	r3, [sp, #0]
10019596:	0021      	movs	r1, r4
10019598:	9b06      	ldr	r3, [sp, #24]
1001959a:	9805      	ldr	r0, [sp, #20]
1001959c:	f7ff fea4 	bl	100192e8 <_printf_common>
100195a0:	1c43      	adds	r3, r0, #1
100195a2:	d102      	bne.n	100195aa <_printf_i+0x1e6>
100195a4:	2001      	movs	r0, #1
100195a6:	4240      	negs	r0, r0
100195a8:	e027      	b.n	100195fa <_printf_i+0x236>
100195aa:	6923      	ldr	r3, [r4, #16]
100195ac:	0032      	movs	r2, r6
100195ae:	9906      	ldr	r1, [sp, #24]
100195b0:	9805      	ldr	r0, [sp, #20]
100195b2:	9d07      	ldr	r5, [sp, #28]
100195b4:	47a8      	blx	r5
100195b6:	1c43      	adds	r3, r0, #1
100195b8:	d0f4      	beq.n	100195a4 <_printf_i+0x1e0>
100195ba:	6823      	ldr	r3, [r4, #0]
100195bc:	2500      	movs	r5, #0
100195be:	079b      	lsls	r3, r3, #30
100195c0:	d40f      	bmi.n	100195e2 <_printf_i+0x21e>
100195c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100195c4:	68e0      	ldr	r0, [r4, #12]
100195c6:	4298      	cmp	r0, r3
100195c8:	da17      	bge.n	100195fa <_printf_i+0x236>
100195ca:	0018      	movs	r0, r3
100195cc:	e015      	b.n	100195fa <_printf_i+0x236>
100195ce:	0022      	movs	r2, r4
100195d0:	2301      	movs	r3, #1
100195d2:	3219      	adds	r2, #25
100195d4:	9906      	ldr	r1, [sp, #24]
100195d6:	9805      	ldr	r0, [sp, #20]
100195d8:	9e07      	ldr	r6, [sp, #28]
100195da:	47b0      	blx	r6
100195dc:	1c43      	adds	r3, r0, #1
100195de:	d0e1      	beq.n	100195a4 <_printf_i+0x1e0>
100195e0:	3501      	adds	r5, #1
100195e2:	68e3      	ldr	r3, [r4, #12]
100195e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100195e6:	1a9b      	subs	r3, r3, r2
100195e8:	429d      	cmp	r5, r3
100195ea:	dbf0      	blt.n	100195ce <_printf_i+0x20a>
100195ec:	e7e9      	b.n	100195c2 <_printf_i+0x1fe>
100195ee:	0026      	movs	r6, r4
100195f0:	9b03      	ldr	r3, [sp, #12]
100195f2:	3642      	adds	r6, #66	; 0x42
100195f4:	781b      	ldrb	r3, [r3, #0]
100195f6:	7033      	strb	r3, [r6, #0]
100195f8:	e78e      	b.n	10019518 <_printf_i+0x154>
100195fa:	b00b      	add	sp, #44	; 0x2c
100195fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100195fe:	46c0      	nop			; (mov r8, r8)
10019600:	1001b8d5 	.word	0x1001b8d5
10019604:	1001b8e6 	.word	0x1001b8e6

10019608 <_putc_r>:
10019608:	b570      	push	{r4, r5, r6, lr}
1001960a:	0006      	movs	r6, r0
1001960c:	000d      	movs	r5, r1
1001960e:	0014      	movs	r4, r2
10019610:	2800      	cmp	r0, #0
10019612:	d004      	beq.n	1001961e <_putc_r+0x16>
10019614:	6983      	ldr	r3, [r0, #24]
10019616:	2b00      	cmp	r3, #0
10019618:	d101      	bne.n	1001961e <_putc_r+0x16>
1001961a:	f7ff fc29 	bl	10018e70 <__sinit>
1001961e:	4b12      	ldr	r3, [pc, #72]	; (10019668 <_putc_r+0x60>)
10019620:	429c      	cmp	r4, r3
10019622:	d101      	bne.n	10019628 <_putc_r+0x20>
10019624:	6874      	ldr	r4, [r6, #4]
10019626:	e008      	b.n	1001963a <_putc_r+0x32>
10019628:	4b10      	ldr	r3, [pc, #64]	; (1001966c <_putc_r+0x64>)
1001962a:	429c      	cmp	r4, r3
1001962c:	d101      	bne.n	10019632 <_putc_r+0x2a>
1001962e:	68b4      	ldr	r4, [r6, #8]
10019630:	e003      	b.n	1001963a <_putc_r+0x32>
10019632:	4b0f      	ldr	r3, [pc, #60]	; (10019670 <_putc_r+0x68>)
10019634:	429c      	cmp	r4, r3
10019636:	d100      	bne.n	1001963a <_putc_r+0x32>
10019638:	68f4      	ldr	r4, [r6, #12]
1001963a:	68a3      	ldr	r3, [r4, #8]
1001963c:	3b01      	subs	r3, #1
1001963e:	60a3      	str	r3, [r4, #8]
10019640:	2b00      	cmp	r3, #0
10019642:	da05      	bge.n	10019650 <_putc_r+0x48>
10019644:	69a2      	ldr	r2, [r4, #24]
10019646:	4293      	cmp	r3, r2
10019648:	db08      	blt.n	1001965c <_putc_r+0x54>
1001964a:	b2eb      	uxtb	r3, r5
1001964c:	2b0a      	cmp	r3, #10
1001964e:	d005      	beq.n	1001965c <_putc_r+0x54>
10019650:	6823      	ldr	r3, [r4, #0]
10019652:	b2e8      	uxtb	r0, r5
10019654:	1c5a      	adds	r2, r3, #1
10019656:	6022      	str	r2, [r4, #0]
10019658:	701d      	strb	r5, [r3, #0]
1001965a:	e004      	b.n	10019666 <_putc_r+0x5e>
1001965c:	0022      	movs	r2, r4
1001965e:	0029      	movs	r1, r5
10019660:	0030      	movs	r0, r6
10019662:	f7ff fa43 	bl	10018aec <__swbuf_r>
10019666:	bd70      	pop	{r4, r5, r6, pc}
10019668:	1001b864 	.word	0x1001b864
1001966c:	1001b884 	.word	0x1001b884
10019670:	1001b8a4 	.word	0x1001b8a4

10019674 <__sread>:
10019674:	b570      	push	{r4, r5, r6, lr}
10019676:	000c      	movs	r4, r1
10019678:	250e      	movs	r5, #14
1001967a:	5f49      	ldrsh	r1, [r1, r5]
1001967c:	f000 f8b0 	bl	100197e0 <_read_r>
10019680:	2800      	cmp	r0, #0
10019682:	db03      	blt.n	1001968c <__sread+0x18>
10019684:	6d63      	ldr	r3, [r4, #84]	; 0x54
10019686:	181b      	adds	r3, r3, r0
10019688:	6563      	str	r3, [r4, #84]	; 0x54
1001968a:	e003      	b.n	10019694 <__sread+0x20>
1001968c:	89a2      	ldrh	r2, [r4, #12]
1001968e:	4b02      	ldr	r3, [pc, #8]	; (10019698 <__sread+0x24>)
10019690:	4013      	ands	r3, r2
10019692:	81a3      	strh	r3, [r4, #12]
10019694:	bd70      	pop	{r4, r5, r6, pc}
10019696:	46c0      	nop			; (mov r8, r8)
10019698:	ffffefff 	.word	0xffffefff

1001969c <__swrite>:
1001969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001969e:	001f      	movs	r7, r3
100196a0:	898b      	ldrh	r3, [r1, #12]
100196a2:	0005      	movs	r5, r0
100196a4:	000c      	movs	r4, r1
100196a6:	0016      	movs	r6, r2
100196a8:	05db      	lsls	r3, r3, #23
100196aa:	d505      	bpl.n	100196b8 <__swrite+0x1c>
100196ac:	230e      	movs	r3, #14
100196ae:	5ec9      	ldrsh	r1, [r1, r3]
100196b0:	2200      	movs	r2, #0
100196b2:	2302      	movs	r3, #2
100196b4:	f000 f874 	bl	100197a0 <_lseek_r>
100196b8:	89a2      	ldrh	r2, [r4, #12]
100196ba:	4b05      	ldr	r3, [pc, #20]	; (100196d0 <__swrite+0x34>)
100196bc:	0028      	movs	r0, r5
100196be:	4013      	ands	r3, r2
100196c0:	81a3      	strh	r3, [r4, #12]
100196c2:	0032      	movs	r2, r6
100196c4:	230e      	movs	r3, #14
100196c6:	5ee1      	ldrsh	r1, [r4, r3]
100196c8:	003b      	movs	r3, r7
100196ca:	f000 f81f 	bl	1001970c <_write_r>
100196ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100196d0:	ffffefff 	.word	0xffffefff

100196d4 <__sseek>:
100196d4:	b570      	push	{r4, r5, r6, lr}
100196d6:	000c      	movs	r4, r1
100196d8:	250e      	movs	r5, #14
100196da:	5f49      	ldrsh	r1, [r1, r5]
100196dc:	f000 f860 	bl	100197a0 <_lseek_r>
100196e0:	89a3      	ldrh	r3, [r4, #12]
100196e2:	1c42      	adds	r2, r0, #1
100196e4:	d103      	bne.n	100196ee <__sseek+0x1a>
100196e6:	4a05      	ldr	r2, [pc, #20]	; (100196fc <__sseek+0x28>)
100196e8:	4013      	ands	r3, r2
100196ea:	81a3      	strh	r3, [r4, #12]
100196ec:	e004      	b.n	100196f8 <__sseek+0x24>
100196ee:	2280      	movs	r2, #128	; 0x80
100196f0:	0152      	lsls	r2, r2, #5
100196f2:	4313      	orrs	r3, r2
100196f4:	81a3      	strh	r3, [r4, #12]
100196f6:	6560      	str	r0, [r4, #84]	; 0x54
100196f8:	bd70      	pop	{r4, r5, r6, pc}
100196fa:	46c0      	nop			; (mov r8, r8)
100196fc:	ffffefff 	.word	0xffffefff

10019700 <__sclose>:
10019700:	b510      	push	{r4, lr}
10019702:	230e      	movs	r3, #14
10019704:	5ec9      	ldrsh	r1, [r1, r3]
10019706:	f000 f815 	bl	10019734 <_close_r>
1001970a:	bd10      	pop	{r4, pc}

1001970c <_write_r>:
1001970c:	b570      	push	{r4, r5, r6, lr}
1001970e:	0005      	movs	r5, r0
10019710:	0008      	movs	r0, r1
10019712:	0011      	movs	r1, r2
10019714:	2200      	movs	r2, #0
10019716:	4c06      	ldr	r4, [pc, #24]	; (10019730 <_write_r+0x24>)
10019718:	6022      	str	r2, [r4, #0]
1001971a:	001a      	movs	r2, r3
1001971c:	f7f3 fab2 	bl	1000cc84 <_write>
10019720:	1c43      	adds	r3, r0, #1
10019722:	d103      	bne.n	1001972c <_write_r+0x20>
10019724:	6823      	ldr	r3, [r4, #0]
10019726:	2b00      	cmp	r3, #0
10019728:	d000      	beq.n	1001972c <_write_r+0x20>
1001972a:	602b      	str	r3, [r5, #0]
1001972c:	bd70      	pop	{r4, r5, r6, pc}
1001972e:	46c0      	nop			; (mov r8, r8)
10019730:	1001ee18 	.word	0x1001ee18

10019734 <_close_r>:
10019734:	2300      	movs	r3, #0
10019736:	b570      	push	{r4, r5, r6, lr}
10019738:	4c06      	ldr	r4, [pc, #24]	; (10019754 <_close_r+0x20>)
1001973a:	0005      	movs	r5, r0
1001973c:	0008      	movs	r0, r1
1001973e:	6023      	str	r3, [r4, #0]
10019740:	f7f4 fd60 	bl	1000e204 <_close>
10019744:	1c43      	adds	r3, r0, #1
10019746:	d103      	bne.n	10019750 <_close_r+0x1c>
10019748:	6823      	ldr	r3, [r4, #0]
1001974a:	2b00      	cmp	r3, #0
1001974c:	d000      	beq.n	10019750 <_close_r+0x1c>
1001974e:	602b      	str	r3, [r5, #0]
10019750:	bd70      	pop	{r4, r5, r6, pc}
10019752:	46c0      	nop			; (mov r8, r8)
10019754:	1001ee18 	.word	0x1001ee18

10019758 <_fstat_r>:
10019758:	2300      	movs	r3, #0
1001975a:	b570      	push	{r4, r5, r6, lr}
1001975c:	4c06      	ldr	r4, [pc, #24]	; (10019778 <_fstat_r+0x20>)
1001975e:	0005      	movs	r5, r0
10019760:	0008      	movs	r0, r1
10019762:	0011      	movs	r1, r2
10019764:	6023      	str	r3, [r4, #0]
10019766:	f7f4 fd51 	bl	1000e20c <_fstat>
1001976a:	1c43      	adds	r3, r0, #1
1001976c:	d103      	bne.n	10019776 <_fstat_r+0x1e>
1001976e:	6823      	ldr	r3, [r4, #0]
10019770:	2b00      	cmp	r3, #0
10019772:	d000      	beq.n	10019776 <_fstat_r+0x1e>
10019774:	602b      	str	r3, [r5, #0]
10019776:	bd70      	pop	{r4, r5, r6, pc}
10019778:	1001ee18 	.word	0x1001ee18

1001977c <_isatty_r>:
1001977c:	2300      	movs	r3, #0
1001977e:	b570      	push	{r4, r5, r6, lr}
10019780:	4c06      	ldr	r4, [pc, #24]	; (1001979c <_isatty_r+0x20>)
10019782:	0005      	movs	r5, r0
10019784:	0008      	movs	r0, r1
10019786:	6023      	str	r3, [r4, #0]
10019788:	f7f4 fd46 	bl	1000e218 <_isatty>
1001978c:	1c43      	adds	r3, r0, #1
1001978e:	d103      	bne.n	10019798 <_isatty_r+0x1c>
10019790:	6823      	ldr	r3, [r4, #0]
10019792:	2b00      	cmp	r3, #0
10019794:	d000      	beq.n	10019798 <_isatty_r+0x1c>
10019796:	602b      	str	r3, [r5, #0]
10019798:	bd70      	pop	{r4, r5, r6, pc}
1001979a:	46c0      	nop			; (mov r8, r8)
1001979c:	1001ee18 	.word	0x1001ee18

100197a0 <_lseek_r>:
100197a0:	b570      	push	{r4, r5, r6, lr}
100197a2:	0005      	movs	r5, r0
100197a4:	0008      	movs	r0, r1
100197a6:	0011      	movs	r1, r2
100197a8:	2200      	movs	r2, #0
100197aa:	4c06      	ldr	r4, [pc, #24]	; (100197c4 <_lseek_r+0x24>)
100197ac:	6022      	str	r2, [r4, #0]
100197ae:	001a      	movs	r2, r3
100197b0:	f7f4 fd34 	bl	1000e21c <_lseek>
100197b4:	1c43      	adds	r3, r0, #1
100197b6:	d103      	bne.n	100197c0 <_lseek_r+0x20>
100197b8:	6823      	ldr	r3, [r4, #0]
100197ba:	2b00      	cmp	r3, #0
100197bc:	d000      	beq.n	100197c0 <_lseek_r+0x20>
100197be:	602b      	str	r3, [r5, #0]
100197c0:	bd70      	pop	{r4, r5, r6, pc}
100197c2:	46c0      	nop			; (mov r8, r8)
100197c4:	1001ee18 	.word	0x1001ee18

100197c8 <memchr>:
100197c8:	b2c9      	uxtb	r1, r1
100197ca:	1882      	adds	r2, r0, r2
100197cc:	4290      	cmp	r0, r2
100197ce:	d004      	beq.n	100197da <memchr+0x12>
100197d0:	7803      	ldrb	r3, [r0, #0]
100197d2:	428b      	cmp	r3, r1
100197d4:	d002      	beq.n	100197dc <memchr+0x14>
100197d6:	3001      	adds	r0, #1
100197d8:	e7f8      	b.n	100197cc <memchr+0x4>
100197da:	2000      	movs	r0, #0
100197dc:	4770      	bx	lr
	...

100197e0 <_read_r>:
100197e0:	b570      	push	{r4, r5, r6, lr}
100197e2:	0005      	movs	r5, r0
100197e4:	0008      	movs	r0, r1
100197e6:	0011      	movs	r1, r2
100197e8:	2200      	movs	r2, #0
100197ea:	4c06      	ldr	r4, [pc, #24]	; (10019804 <_read_r+0x24>)
100197ec:	6022      	str	r2, [r4, #0]
100197ee:	001a      	movs	r2, r3
100197f0:	f7f3 fa28 	bl	1000cc44 <_read>
100197f4:	1c43      	adds	r3, r0, #1
100197f6:	d103      	bne.n	10019800 <_read_r+0x20>
100197f8:	6823      	ldr	r3, [r4, #0]
100197fa:	2b00      	cmp	r3, #0
100197fc:	d000      	beq.n	10019800 <_read_r+0x20>
100197fe:	602b      	str	r3, [r5, #0]
10019800:	bd70      	pop	{r4, r5, r6, pc}
10019802:	46c0      	nop			; (mov r8, r8)
10019804:	1001ee18 	.word	0x1001ee18
10019808:	000003e8 	.word	0x000003e8

1001980c <test>:
1001980c:	00000083 00004000 00000200 00c800c8     .....@..........
1001981c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001982c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001983c:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
1001984c:	5220706f 73646165 00000000 706d6153     op Reads....Samp
1001985c:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
1001986c:	666f206c 74657366 74616420 57482061     l offset data HW
1001987c:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
1001988c:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
1001989c:	6f727947 66666f20 20746573 61746164     Gyro offset data
100198ac:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100198bc:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100198cc:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100198dc:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100198ec:	6e756f66 00002e64 72617453 676e6974     found...Starting
100198fc:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
1001990c:	72746552 69766569 4220676e 65736169     Retrieving Biase
1001991c:	00000d73 72746552 69766569 4220676e     s...Retrieving B
1001992c:	65736169 72452073 20726f72 6f70202d     iases Error - po
1001993c:	62697373 4920656c 65204332 726f7272     ssible I2C error
1001994c:	00000000 72746552 69766569 5320676e     ....Retrieving S
1001995c:	69422054 73657361 00000000 72746552     T Biases....Retr
1001996c:	69766569 5320676e 69422054 73657361     ieving ST Biases
1001997c:	72724520 2d20726f 736f7020 6c626973      Error - possibl
1001998c:	32492065 72652043 00726f72 64616552     e I2C error.Read
1001999c:	20676e69 2050544f 69676552 72657473     ing OTP Register
100199ac:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100199bc:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
100199cc:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
100199dc:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100199ec:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100199fc:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10019a0c:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10019a1c:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10019a2c:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10019a3c:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10019a4c:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10019a5c:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10019a6c:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10019a7c:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10019a8c:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10019a9c:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10019aac:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10019abc:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10019acc:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10019adc:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10019aec:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10019afc:	6c207361 20737365 6e616874 2e372520     as less than %7.
10019b0c:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10019b1c:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10019b2c:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10019b3c:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10019b4c:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10019b5c:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10019b6c:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10019b7c:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10019b8c:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10019b9c:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10019bac:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10019bbc:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10019bcc:	253a7369 72672064 65746165 68742072     is:%d greater th
10019bdc:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10019bec:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10019bfc:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10019c0c:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10019c1c:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10019c2c:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10019c3c:	65542066 52207473 6c757365 203a7374     f Test Results: 
10019c4c:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10019c5c:	73655420 65522074 746c7573 25203a73      Test Results: %
10019c6c:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10019c7c:	00000000                                ....

10019c80 <hw>:
10019c80:	04000069 01410080 01000000 00001333     i.....A.....3...

10019c90 <reg>:
10019c90:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10019ca0:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10019cb0:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10019cc0:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10019cd0:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10019ce0:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10019cf0:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10019d00:	b691a38b 00dab4da                       ........

10019d08 <dmp_memory>:
10019d08:	00700000 24000000 02000000 00000300     ..p....$........
10019d18:	54006500 0000efff 0b0080fa 01008212     .e.T............
10019d28:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
10019d38:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
10019d48:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
10019d58:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
10019d68:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
10019d78:	00000020 00000000 00000040 00000060      .......@...`...
10019d88:	00000c00 6e180c00 92060000 dfc0160a     .......n........
10019d98:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
10019da8:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
10019db8:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
10019dc8:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
10019dd8:	00000000 b5421900 a2390000 65b30000     ......B...9....e
10019de8:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
10019df8:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
10019e08:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
10019e18:	00000100 00003200 000046ff 0000d463     .....2...F..c...
10019e28:	00000010 0000d604 0000cc04 0000cc04     ................
10019e38:	72100000 40000000 00000000 00000000     ...r...@........
10019e48:	02000600 07000500 00000000 00006400     .............d..
10019e58:	00000000 05000000 64000500 00002000     ...........d. ..
	...
10019e70:	00400000 00030000 32000000 000098f8     ..@........2....
10019e80:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
10019eb4:	00100000 00000040 06000000 6ab20000     ....@..........j
10019ec4:	00000200 83fb0100 00006800 00fcd900     .........h......
10019ed4:	83fff17c 00000000 00006500 e8036400     |........e...d..
10019ee4:	28006400 25000000 00000000 0000a016     .d.(...%........
10019ef4:	00100000 00100000 00002f00 f4010000     ........./......
10019f04:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
10019f1c:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
10019f2c:	00000000 00060000 14000000 4d250000     ..............%M
10019f3c:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
10019f58:	00001b00 00000000 00000000 00000000     ................
10019f68:	00006400 00000800 00000000 00000000     .d..............
	...
10019fc8:	00001b00 00000000 00000000 0e000e00     ................
10019fd8:	c70a0000 00000400 32000000 9cffffff     ...........2....
10019fe8:	2b0b0000 02000000 01000000 64000000     ...+...........d
10019ff8:	0000e5ff 00000000 00000000 00000000     ................
1001a008:	01000000 00000000 00000100 00000000     ................
1001a018:	00800100 00800100 00800100 d3262400     .............$&.
	...
1001a030:	10000600 3c009600 00000000 00000000     .......<........
	...
1001a048:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
1001a070:	0084d717 00000003 00000000 00000000     ................
1001a080:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
1001a0a0:	85180302 00400000 03000000 03000000     ......@.........
	...
1001a0b8:	00000040 00000000 00000000 00000000     @...............
	...
1001a0ec:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
1001a108:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
1001a118:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
1001a128:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
1001a138:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
1001a148:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
1001a158:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
1001a168:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
1001a178:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
1001a188:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
1001a198:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
1001a1a8:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
1001a1b8:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
1001a1c8:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
1001a1d8:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
1001a1e8:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
1001a1f8:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
1001a208:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
1001a218:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
1001a228:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
1001a238:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
1001a248:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
1001a258:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
1001a268:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
1001a278:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
1001a288:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
1001a298:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
1001a2a8:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
1001a2b8:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
1001a2c8:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
1001a2d8:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
1001a2e8:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
1001a2f8:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
1001a308:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
1001a318:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
1001a328:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
1001a338:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
1001a348:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
1001a358:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
1001a368:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
1001a378:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
1001a388:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
1001a398:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
1001a3a8:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
1001a3b8:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
1001a3c8:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
1001a3d8:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
1001a3e8:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
1001a3f8:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
1001a408:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
1001a418:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
1001a428:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
1001a438:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
1001a448:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
1001a458:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
1001a468:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
1001a478:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
1001a488:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
1001a498:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
1001a4a8:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
1001a4b8:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
1001a4c8:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
1001a4d8:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
1001a4e8:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
1001a4f8:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
1001a508:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
1001a518:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
1001a528:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
1001a538:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
1001a548:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
1001a558:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
1001a568:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
1001a578:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
1001a588:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
1001a598:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
1001a5a8:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
1001a5b8:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
1001a5c8:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
1001a5d8:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
1001a5e8:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
1001a5f8:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
1001a608:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
1001a618:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
1001a628:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
1001a638:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
1001a648:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
1001a658:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
1001a668:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
1001a678:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
1001a688:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
1001a698:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
1001a6a8:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
1001a6b8:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
1001a6c8:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
1001a6d8:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
1001a6e8:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
1001a6f8:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
1001a708:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
1001a718:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
1001a728:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
1001a738:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
1001a748:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
1001a758:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
1001a768:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
1001a778:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
1001a788:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
1001a798:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
1001a7a8:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
1001a7b8:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
1001a7c8:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
1001a7d8:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
1001a7e8:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
1001a7f8:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
1001a808:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
1001a818:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
1001a828:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
1001a838:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
1001a848:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
1001a858:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
1001a868:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
1001a878:	a890d8ff a899890d 21988010 89d82eda     ...........!....
1001a888:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
1001a898:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
1001a8a8:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
1001a8b8:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
1001a8c8:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
1001a8d8:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
1001a8e8:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
1001a8f8:	d800d9a6 0000fff1 1000b110 1000b112     ................
1001a908:	1000b0f8 1000b0f8 1000b0f8 1000b110     ................
1001a918:	1000b0f8 1000b0f8 1000b95e 1000b9d2     ........^.......
1001a928:	1000b946 1000b9d8 1000b94c 1000b952     F.......L...R...
1001a938:	1000b958 1000c018 1000c018 1000c018     X...............
1001a948:	1000c018 1000c018 1000c018 1000c018     ................
1001a958:	1000c018 1000c018 1000c018 1000c018     ................
1001a968:	1000c018 1000c018 1000c018 1000c018     ................
1001a978:	1000c018 1000c018 1000c018 1000c018     ................
1001a988:	1000c036 1000c036 1000c036 1000c036     6...6...6...6...
1001a998:	1000c036 1000c036 1000c036 1000c036     6...6...6...6...
1001a9a8:	1000c036 1000c036 1000c058 1000c058     6...6...X...X...
1001a9b8:	1000c058 1000c058 1000c058 1000c058     X...X...X...X...
1001a9c8:	1000c058 1000c058 1000c058 1000c058     X...X...X...X...
1001a9d8:	1000c07a 1000c07a 1000c07a 1000c07a     z...z...z...z...
1001a9e8:	1000c07a 1000c07a 1000c094 1000c094     z...z...........
1001a9f8:	1000c094 1000c094 1000c094 1000c094     ................
1001aa08:	1000c094 1000c094 1000c094 1000c0ae     ................
1001aa18:	1000c0ae 1000c0d0 1000c0d0 1000c0ea     ................
1001aa28:	1000c0d0 34333231 00003635 efcdab00     ....123456......
1001aa38:	00efcdab b2d60600 f8f005f0 00000000     ................

1001aa48 <ble_mgr_gatt_server_handle>:
	...
1001aa60:	1000b055 1000b091 1000b059 00000000     U.......Y.......
1001aa70:	6e616353 676e696e 61662020 64656c69     Scanning  failed
1001aa80:	00000000 2055544d 6e616843 46206567     ....MTU Change F
1001aa90:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001aaa0:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001aab0:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
1001aac0:	64206563 6f637369 63656e6e 20646574     ce disconnected 
1001aad0:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
1001aae0:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
1001aaf0:	69747079 66206e6f 656c6961 00000064     yption failed...
1001ab00:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
1001ab10:	64657465 63757320 73736563 6c6c7566     eted successfull
1001ab20:	00000079 20454c42 69766544 6e206563     y...BLE Device n
1001ab30:	6620746f 646e756f 636e6520 74707972     ot found encrypt
1001ab40:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
1001ab50:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
1001ab60:	206e6163 69766564 72206563 68636165     can device reach
1001ab70:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
1001ab80:	00006e61 6c696146 74206465 7473206f     an..Failed to st
1001ab90:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
1001aba0:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
1001abb0:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
1001abc0:	656e6e6f 52207463 65757165 46207473     onnect Request F
1001abd0:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
1001abe0:	636f7270 72756465 6f632065 656c706d     procedure comple
1001abf0:	20646574 63637573 66737365 796c6c75     ted successfully
1001ac00:	00000000 20454c42 69766544 6e206563     ....BLE Device n
1001ac10:	6620746f 646e756f 206f7420 726f7473     ot found to stor
1001ac20:	68742065 61702065 6e697269 6e692067     e the pairing in
1001ac30:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
1001ac40:	7320746f 74726174 00006465 76616c53     ot started..Slav
1001ac50:	65532065 69727563 52207974 2d207165     e Security Req -
1001ac60:	74754120 746e6568 74616369 206e6f69      Authentication 
1001ac70:	6c696146 00006465 72696150 71655220     Failed..Pair Req
1001ac80:	74736575 41202d20 65687475 6369746e     uest - Authentic
1001ac90:	6f697461 6146206e 64656c69 00000000     ation Failed....
1001aca0:	65746e45 68742072 61502065 656b7373     Enter the Passke
1001acb0:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
1001acc0:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
1001acd0:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
1001ace0:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
1001acf0:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
1001ad00:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
1001ad10:	6568746f 65442072 65636976 00003a29     other Device):..
1001ad20:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
1001ad30:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
1001ad40:	20657275 20746f4e 70707573 6574726f     ure Not supporte
1001ad50:	00000064 65746e45 20646572 73736150     d...Entered Pass
1001ad60:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
1001ad70:	6f666e69 74616d72 206e6f69 7020666f     information of p
1001ad80:	20726565 69766564 69206563 6f6e2073     eer device is no
1001ad90:	76612074 616c6961 2e656c62 00000000     t available.....
1001ada0:	61656c50 75206573 6961706e 68742072     Please unpair th
1001adb0:	65642065 65636976 6f726620 6570206d     e device from pe
1001adc0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001add0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001ade0:	20646e61 72617473 61702074 6e697269     and start pairin
1001adf0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
1001ae00:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001ae10:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
1001ae20:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
1001ae30:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
1001ae40:	6166206e 64656c69 00000000 61656c50     n failed....Plea
1001ae50:	63206573 6b636568 65687420 776f7020     se check the pow
1001ae60:	61207265 6320646e 656e6e6f 6f697463     er and connectio
1001ae70:	202f206e 64726168 65726177 6e6f6320     n / hardware con
1001ae80:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
1001ae90:	00000045 69766544 6e206563 20656d61     E...Device name 
1001aea0:	20746573 6c696166 00006465 61204442     set failed..BD a
1001aeb0:	65726464 67207373 66207465 656c6961     ddress get faile
1001aec0:	00000064 41204442 65726464 303a7373     d...BD Address:0
1001aed0:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
1001aee0:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
1001aef0:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
1001af00:	20454c42 69766544 63206563 69666e6f     BLE Device confi
1001af10:	61727567 6e6f6974 69616620 0064656c     guration failed.
1001af20:	20746553 20454c42 69766544 41206563     Set BLE Device A
1001af30:	65726464 66207373 656c6961 00000064     ddress failed...
1001af40:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
1001af50:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
1001af60:	65732065 69727563 72207974 65757165     e security reque
1001af70:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001af80:	65746365 6f742064 65657020 65642072     ected to peer de
1001af90:	65636976 74697720 64612068 73657264     vice with addres
1001afa0:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001afb0:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001afc0:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001afd0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001afe0:	61522067 6d6f646e 64646120 73736572     g Random address
1001aff0:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
1001b000:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001b010:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001b020:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001b030:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001b040:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001b050:	53202d20 75746174 25203a73 00000064      - Status: %d...
1001b060:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001b070:	61642074 73206174 66207465 656c6961     t data set faile
1001b080:	00000064                                d...

1001b084 <ble_mgr_gap_handle>:
1001b084:	1000b051 1000b20d 1000b069 00000000     Q.......i.......
1001b094:	00000000 1000bce1 1000b0c1 1000b065     ............e...
1001b0a4:	1000b3ad 1000b28d 1000b5b1 1000b3c5     ................
1001b0b4:	1000b705 1000b849 1000b149 1000bf1d     ....I...I.......
	...
1001b0d0:	00002121 1000da04 1000da12 1000da20     !!.......... ...
1001b0e0:	1000da2e 1000da3c 1000da4a 1000da58     ....<...J...X...
1001b0f0:	1000da68 1000da78 1000da88 1000da98     h...x...........
1001b100:	1000daa8 1000dab8 1000dac8 1000dad8     ................
1001b110:	1000dae8 1000daf8 1000db08 1000db18     ................
1001b120:	1000db28 1000db38 1000db48 1000db58     (...8...H...X...
1001b130:	1000db68 1000db78 1000db88 1000db98     h...x...........
1001b140:	1000dba8 1000dbb6 1000dbc4 1000dbd2     ................
1001b150:	1000dbe0 1000dbee 1000dbfc 1000dc0a     ................
1001b160:	1000dc18 1000dc28 1000dc38 1000dc48     ....(...8...H...
1001b170:	1000dc58 1000dc68 1000dc78 1000dc88     X...h...x.......
1001b180:	1000dc98 1000dca8 1000dcb8 1000dcc8     ................
1001b190:	1000dcd8 1000dce8 1000dcf8 1000dd08     ................
1001b1a0:	1000dd18 1000dd26 1000dd34 1000dd8c     ....&...4.......
1001b1b0:	1000ddb4 1000dddc 1000de04 1000e044     ............D...
1001b1c0:	1000de34 1000de4c 1000dec4 1000dedc     4...L...........
1001b1d0:	1000de64 1000de7c 1000de94 1000deac     d...|...........
1001b1e0:	1000def4 1000e1b8 1000e1b8 1000e1b8     ................
1001b1f0:	1000e1b8 1000e1b8 1000e1b8 1000e1b8     ................
1001b200:	1000e1b8 1000df9c 1000dfb4 1000dfcc     ................
1001b210:	1000e05a 1000df24 1000e1b8 1000e1b8     Z...$...........
1001b220:	1000e1b8 1000e1b8 1000e1b8 1000e1b8     ................
1001b230:	1000dfe4 1000dffc 1000e014 1000e02c     ............,...
1001b240:	1000e1b8 1000e170 1000e188 1000e1b8     ....p...........
1001b250:	1000e1b8 1000e086 1000e09c 1000e0b2     ................
1001b260:	1000e0c8 1000e1b8 1000e1b8 1000e1b8     ................
1001b270:	1000e1b8 1000e1b8 1000e1b8 1000e1b8     ................
1001b280:	1000e1b8 1000dd78 1000dda0 1000ddc8     ....x...........
1001b290:	1000ddf0 1000de1c 1000df0c 1000df3c     ............<...
1001b2a0:	1000df54 1000df6c 1000df84 1000e070     T...l.......p...
1001b2b0:	1000e0de 1000e158 1000e1a0 45434341     ....X.......ACCE
1001b2c0:	00203a4c 202c6425 00000000 20554d49     L: .%d, ....IMU 
1001b2d0:	45544e49 50555252 00002154 4c504d65     INTERRUPT!..eMPL
1001b2e0:	312e3520 6d744100 43206c65 2e70726f      5.1.Atmel Corp.

1001b2f0 <CSWTCH.47>:
1001b2f0:	03010300 03030303 03030303 00020303     ................
1001b300:	74727173 00000066                       sqrtf...

1001b308 <atanlo>:
1001b308:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

1001b318 <atanhi>:
1001b318:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
1001b328:	10011f32 10011ed6 10011ec2 10011e06     2...............
1001b338:	10011cde 10011db8 10011f50 736f6361     ........P...acos
1001b348:	00000066                                f...

1001b34c <npio2_hw>:
1001b34c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
1001b35c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
1001b36c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
1001b37c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
1001b38c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
1001b39c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
1001b3ac:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
1001b3bc:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

1001b3cc <two_over_pi>:
1001b3cc:	000000a2 000000f9 00000083 0000006e     ............n...
1001b3dc:	0000004e 00000044 00000015 00000029     N...D.......)...
1001b3ec:	000000fc 00000027 00000057 000000d1     ....'...W.......
1001b3fc:	000000f5 00000034 000000dd 000000c0     ....4...........
1001b40c:	000000db 00000062 00000095 00000099     ....b...........
1001b41c:	0000003c 00000043 00000090 00000041     <...C.......A...
1001b42c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
1001b43c:	000000de 000000bb 000000c5 00000061     ............a...
1001b44c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
1001b45c:	00000042 0000004d 000000d2 000000e0     B...M...........
1001b46c:	00000006 00000049 0000002e 000000ea     ....I...........
1001b47c:	00000009 000000d1 00000092 0000001c     ................
1001b48c:	000000fe 0000001d 000000eb 0000001c     ................
1001b49c:	000000b1 00000029 000000a7 0000003e     ....).......>...
1001b4ac:	000000e8 00000082 00000035 000000f5     ........5.......
1001b4bc:	0000002e 000000bb 00000044 00000084     ........D.......
1001b4cc:	000000e9 0000009c 00000070 00000026     ........p...&...
1001b4dc:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1001b4ec:	00000039 00000091 000000d6 00000039     9...........9...
1001b4fc:	00000083 00000053 00000039 000000f4     ....S...9.......
1001b50c:	0000009c 00000084 0000005f 0000008b     ........_.......
1001b51c:	000000bd 000000f9 00000028 0000003b     ........(...;...
1001b52c:	0000001f 000000f8 00000097 000000ff     ................
1001b53c:	000000de 00000005 00000098 0000000f     ................
1001b54c:	000000ef 0000002f 00000011 0000008b     ..../...........
1001b55c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1001b56c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1001b57c:	00000027 000000cb 00000009 000000b7     '...............
1001b58c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1001b59c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1001b5ac:	00000075 00000027 000000ba 000000c7     u...'...........
1001b5bc:	000000eb 000000e5 000000f1 0000007b     ............{...
1001b5cc:	0000003d 00000007 00000039 000000f7     =.......9.......
1001b5dc:	0000008a 00000052 00000092 000000ea     ....R...........
1001b5ec:	0000006b 000000fb 0000005f 000000b1     k......._.......
1001b5fc:	0000001f 0000008d 0000005d 00000008     ........].......
1001b60c:	00000056 00000003 00000030 00000046     V.......0...F...
1001b61c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1001b62c:	000000f0 000000cf 000000bc 00000020     ............ ...
1001b63c:	0000009a 000000f4 00000036 0000001d     ........6.......
1001b64c:	000000a9 000000e3 00000091 00000061     ............a...
1001b65c:	0000005e 000000e6 0000001b 00000008     ^...............
1001b66c:	00000065 00000099 00000085 0000005f     e..........._...
1001b67c:	00000014 000000a0 00000068 00000040     ........h...@...
1001b68c:	0000008d 000000ff 000000d8 00000080     ................
1001b69c:	0000004d 00000073 00000027 00000031     M...s...'...1...
1001b6ac:	00000006 00000006 00000015 00000056     ............V...
1001b6bc:	000000ca 00000073 000000a8 000000c9     ....s...........
1001b6cc:	00000060 000000e2 0000007b 000000c0     `.......{.......
1001b6dc:	0000008c 0000006b                       ....k...

1001b6e4 <init_jk>:
1001b6e4:	00000004 00000007 00000009              ............

1001b6f0 <PIo2>:
1001b6f0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1001b700:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1001b710:	1fc40000 1bc60000 17440000 10015d36     ..........D.6]..
1001b720:	10015c5a 10015d18 10015cf0 10015d18     Z\...]...\...]..
1001b730:	10015ce4 10015d18 10015cf0 10015c5a     .\...]...\..Z\..
1001b740:	10015c5a 10015ce4 10015cf0 10015d9c     Z\...\...\...]..
1001b750:	10015d9c 10015d9c 10015d1e 10015c5a     .]...]...]..Z\..
1001b760:	10015c5a 10015d04 10015cee 10015d04     Z\...]...\...]..
1001b770:	10015ce4 10015d04 10015cee 10015c5a     .\...]...\..Z\..
1001b780:	10015c5a 10015ce4 10015cee 10015d9c     Z\...\...\...]..
1001b790:	10015d9c 10015d9c 10015da8 10016094     .]...]...]...`..
1001b7a0:	10015ff2 10015ff2 10015ff0 10016086     ._..._..._...`..
1001b7b0:	10016086 1001607c 10015ff0 10016086     .`..|`..._...`..
1001b7c0:	1001607c 10016086 10015ff0 1001608c     |`...`..._...`..
1001b7d0:	1001608c 1001608c 10016116 10016e74     .`...`...a..tn..
1001b7e0:	10016d42 10016e48 10016d38 10016e48     Bm..Hn..8m..Hn..
1001b7f0:	10016e52 10016e48 10016d38 10016d42     Rn..Hn..8m..Bm..
1001b800:	10016d42 10016e52 10016d38 10016d2e     Bm..Rn..8m...m..
1001b810:	10016d2e 10016d2e 100170a4 100176bc     .m...m...p...v..
1001b820:	1001757c 1001757c 1001757a 10017694     |u..|u..zu...v..
1001b830:	10017694 10017686 1001757a 10017694     .v...v..zu...v..
1001b840:	10017686 10017694 1001757a 1001769c     .v...v..zu...v..
1001b850:	1001769c 1001769c 1001789c 00000043     .v...v...x..C...

1001b860 <_global_impure_ptr>:
1001b860:	1001b97c                                |...

1001b864 <__sf_fake_stdin>:
	...

1001b884 <__sf_fake_stdout>:
	...

1001b8a4 <__sf_fake_stderr>:
	...
1001b8c4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001b8d4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001b8e4:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001b8f4:	00006665                                ef..

1001b8f8 <_init>:
1001b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b8fa:	46c0      	nop			; (mov r8, r8)
1001b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b8fe:	bc08      	pop	{r3}
1001b900:	469e      	mov	lr, r3
1001b902:	4770      	bx	lr

1001b904 <__init_array_start>:
1001b904:	100080b1 	.word	0x100080b1

1001b908 <_fini>:
1001b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b90a:	46c0      	nop			; (mov r8, r8)
1001b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b90e:	bc08      	pop	{r3}
1001b910:	469e      	mov	lr, r3
1001b912:	4770      	bx	lr

1001b914 <__fini_array_start>:
1001b914:	10008089 	.word	0x10008089
