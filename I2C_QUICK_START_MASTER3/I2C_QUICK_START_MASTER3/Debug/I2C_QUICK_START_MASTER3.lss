
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b5b8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  100135b8  100135b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002800  10013664  10013664  00013664  2**2
                  ALLOC
  3 .stack        00000804  10015e64  10015e64  00013664  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00013664  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001368c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029728  00000000  00000000  00013740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032bf  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000095bb  00000000  00000000  00040127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000980  00000000  00000000  000496e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000aa0  00000000  00000000  0004a062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024751  00000000  00000000  0004ab02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ddfb  00000000  00000000  0006f253  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001461c6  00000000  00000000  0007d04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000025b4  00000000  00000000  001c3214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100135b8 	.word	0x100135b8
10008068:	100135b8 	.word	0x100135b8
1000806c:	10013664 	.word	0x10013664
10008070:	10015e64 	.word	0x10015e64
10008074:	10013664 	.word	0x10013664
10008078:	100135bc 	.word	0x100135bc
1000807c:	10013668 	.word	0x10013668
10008080:	100112d1 	.word	0x100112d1
10008084:	1000cc1d 	.word	0x1000cc1d

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10013664 	.word	0x10013664
100080a8:	00000000 	.word	0x00000000
100080ac:	100135b8 	.word	0x100135b8

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10013668 	.word	0x10013668
100080dc:	100135b8 	.word	0x100135b8
100080e0:	100135b8 	.word	0x100135b8
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c339 	.word	0x1000c339
10008114:	1000f5d9 	.word	0x1000f5d9
10008118:	100135bc 	.word	0x100135bc
1000811c:	000f4240 	.word	0x000f4240
10008120:	100135b8 	.word	0x100135b8
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	100135bc 	.word	0x100135bc
10008150:	e000e010 	.word	0xe000e010

10008154 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008154:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008156:	4b0d      	ldr	r3, [pc, #52]	; (1000818c <dualtimer_isr_handler+0x38>)
10008158:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000815a:	2b00      	cmp	r3, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000815e:	2201      	movs	r2, #1
10008160:	4b0a      	ldr	r3, [pc, #40]	; (1000818c <dualtimer_isr_handler+0x38>)
10008162:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008164:	4b0a      	ldr	r3, [pc, #40]	; (10008190 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000816c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000816e:	2334      	movs	r3, #52	; 0x34
10008170:	4a06      	ldr	r2, [pc, #24]	; (1000818c <dualtimer_isr_handler+0x38>)
10008172:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008174:	2b00      	cmp	r3, #0
10008176:	d007      	beq.n	10008188 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008178:	2101      	movs	r1, #1
1000817a:	232c      	movs	r3, #44	; 0x2c
1000817c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000817e:	4b05      	ldr	r3, [pc, #20]	; (10008194 <dualtimer_isr_handler+0x40>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d000      	beq.n	10008188 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008186:	4798      	blx	r3
	}
}
10008188:	bd10      	pop	{r4, pc}
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40001000 	.word	0x40001000
10008190:	10013680 	.word	0x10013680
10008194:	10013684 	.word	0x10013684

10008198 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008198:	2301      	movs	r3, #1
1000819a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000819c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000819e:	2202      	movs	r2, #2
100081a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100081a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081a8:	2200      	movs	r2, #0
100081aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100081ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100081b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100081b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100081b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100081b6:	7602      	strb	r2, [r0, #24]
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)

100081bc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081bc:	2800      	cmp	r0, #0
100081be:	d105      	bne.n	100081cc <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c0:	4a06      	ldr	r2, [pc, #24]	; (100081dc <dualtimer_enable+0x20>)
100081c2:	7a11      	ldrb	r1, [r2, #8]
100081c4:	2380      	movs	r3, #128	; 0x80
100081c6:	430b      	orrs	r3, r1
100081c8:	7213      	strb	r3, [r2, #8]
100081ca:	e005      	b.n	100081d8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081cc:	4903      	ldr	r1, [pc, #12]	; (100081dc <dualtimer_enable+0x20>)
100081ce:	2228      	movs	r2, #40	; 0x28
100081d0:	5c88      	ldrb	r0, [r1, r2]
100081d2:	2380      	movs	r3, #128	; 0x80
100081d4:	4303      	orrs	r3, r0
100081d6:	548b      	strb	r3, [r1, r2]
	}
}
100081d8:	4770      	bx	lr
100081da:	46c0      	nop			; (mov r8, r8)
100081dc:	40001000 	.word	0x40001000

100081e0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081e0:	b570      	push	{r4, r5, r6, lr}
100081e2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081e4:	2004      	movs	r0, #4
100081e6:	4b39      	ldr	r3, [pc, #228]	; (100082cc <dualtimer_init+0xec>)
100081e8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ea:	7823      	ldrb	r3, [r4, #0]
100081ec:	2b00      	cmp	r3, #0
100081ee:	d102      	bne.n	100081f6 <dualtimer_init+0x16>
100081f0:	7b23      	ldrb	r3, [r4, #12]
100081f2:	2b00      	cmp	r3, #0
100081f4:	d065      	beq.n	100082c2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081f6:	4936      	ldr	r1, [pc, #216]	; (100082d0 <dualtimer_init+0xf0>)
100081f8:	68ca      	ldr	r2, [r1, #12]
100081fa:	2320      	movs	r3, #32
100081fc:	4313      	orrs	r3, r2
100081fe:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008200:	7e22      	ldrb	r2, [r4, #24]
10008202:	698b      	ldr	r3, [r1, #24]
10008204:	2003      	movs	r0, #3
10008206:	4002      	ands	r2, r0
10008208:	0112      	lsls	r2, r2, #4
1000820a:	302d      	adds	r0, #45	; 0x2d
1000820c:	4383      	bics	r3, r0
1000820e:	4313      	orrs	r3, r2
10008210:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008212:	7823      	ldrb	r3, [r4, #0]
10008214:	2b00      	cmp	r3, #0
10008216:	d026      	beq.n	10008266 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008218:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000821a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000821c:	2b00      	cmp	r3, #0
1000821e:	d003      	beq.n	10008228 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008220:	3b02      	subs	r3, #2
10008222:	425d      	negs	r5, r3
10008224:	415d      	adcs	r5, r3
10008226:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008228:	78a2      	ldrb	r2, [r4, #2]
1000822a:	0052      	lsls	r2, r2, #1
1000822c:	2502      	movs	r5, #2
1000822e:	402a      	ands	r2, r5
10008230:	78e3      	ldrb	r3, [r4, #3]
10008232:	009b      	lsls	r3, r3, #2
10008234:	350a      	adds	r5, #10
10008236:	402b      	ands	r3, r5
10008238:	431a      	orrs	r2, r3
1000823a:	0015      	movs	r5, r2
1000823c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000823e:	7923      	ldrb	r3, [r4, #4]
10008240:	2b00      	cmp	r3, #0
10008242:	d001      	beq.n	10008248 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008244:	2320      	movs	r3, #32
10008246:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008248:	4b22      	ldr	r3, [pc, #136]	; (100082d4 <dualtimer_init+0xf4>)
1000824a:	68a2      	ldr	r2, [r4, #8]
1000824c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000824e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008250:	491f      	ldr	r1, [pc, #124]	; (100082d0 <dualtimer_init+0xf0>)
10008252:	22c4      	movs	r2, #196	; 0xc4
10008254:	0052      	lsls	r2, r2, #1
10008256:	5c88      	ldrb	r0, [r1, r2]
10008258:	2301      	movs	r3, #1
1000825a:	4303      	orrs	r3, r0
1000825c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000825e:	2000      	movs	r0, #0
10008260:	4b1d      	ldr	r3, [pc, #116]	; (100082d8 <dualtimer_init+0xf8>)
10008262:	4798      	blx	r3
10008264:	e000      	b.n	10008268 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008266:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008268:	7b23      	ldrb	r3, [r4, #12]
1000826a:	2b00      	cmp	r3, #0
1000826c:	d029      	beq.n	100082c2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000826e:	7b63      	ldrb	r3, [r4, #13]
10008270:	2b00      	cmp	r3, #0
10008272:	d005      	beq.n	10008280 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008274:	2b01      	cmp	r3, #1
10008276:	d005      	beq.n	10008284 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008278:	2b02      	cmp	r3, #2
1000827a:	d104      	bne.n	10008286 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000827c:	2540      	movs	r5, #64	; 0x40
1000827e:	e002      	b.n	10008286 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008280:	2501      	movs	r5, #1
10008282:	e000      	b.n	10008286 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008284:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008286:	7ba3      	ldrb	r3, [r4, #14]
10008288:	005b      	lsls	r3, r3, #1
1000828a:	2102      	movs	r1, #2
1000828c:	4019      	ands	r1, r3
1000828e:	7be2      	ldrb	r2, [r4, #15]
10008290:	0092      	lsls	r2, r2, #2
10008292:	230c      	movs	r3, #12
10008294:	4013      	ands	r3, r2
10008296:	430b      	orrs	r3, r1
10008298:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000829a:	7c23      	ldrb	r3, [r4, #16]
1000829c:	2b00      	cmp	r3, #0
1000829e:	d001      	beq.n	100082a4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100082a0:	2320      	movs	r3, #32
100082a2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a4:	6962      	ldr	r2, [r4, #20]
100082a6:	4b0b      	ldr	r3, [pc, #44]	; (100082d4 <dualtimer_init+0xf4>)
100082a8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2228      	movs	r2, #40	; 0x28
100082ac:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	4908      	ldr	r1, [pc, #32]	; (100082d0 <dualtimer_init+0xf0>)
100082b0:	3261      	adds	r2, #97	; 0x61
100082b2:	32ff      	adds	r2, #255	; 0xff
100082b4:	5c88      	ldrb	r0, [r1, r2]
100082b6:	2302      	movs	r3, #2
100082b8:	4303      	orrs	r3, r0
100082ba:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100082bc:	2001      	movs	r0, #1
100082be:	4b06      	ldr	r3, [pc, #24]	; (100082d8 <dualtimer_init+0xf8>)
100082c0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	4906      	ldr	r1, [pc, #24]	; (100082dc <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b06      	ldr	r3, [pc, #24]	; (100082e0 <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}
100082cc:	1000c6a1 	.word	0x1000c6a1
100082d0:	4000b000 	.word	0x4000b000
100082d4:	40001000 	.word	0x40001000
100082d8:	100081bd 	.word	0x100081bd
100082dc:	10008155 	.word	0x10008155
100082e0:	1000cb09 	.word	0x1000cb09

100082e4 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082e6:	4647      	mov	r7, r8
100082e8:	b480      	push	{r7}
100082ea:	0017      	movs	r7, r2
100082ec:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082ee:	b280      	uxth	r0, r0
100082f0:	4b1d      	ldr	r3, [pc, #116]	; (10008368 <i2c_read+0x84>)
100082f2:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100082f4:	2201      	movs	r2, #1
100082f6:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082f8:	685b      	ldr	r3, [r3, #4]
100082fa:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100082fc:	4b1b      	ldr	r3, [pc, #108]	; (1000836c <i2c_read+0x88>)
100082fe:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008300:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008302:	4c1b      	ldr	r4, [pc, #108]	; (10008370 <i2c_read+0x8c>)
10008304:	4e18      	ldr	r6, [pc, #96]	; (10008368 <i2c_read+0x84>)
10008306:	4d1b      	ldr	r5, [pc, #108]	; (10008374 <i2c_read+0x90>)
10008308:	e003      	b.n	10008312 <i2c_read+0x2e>
1000830a:	3c01      	subs	r4, #1
1000830c:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000830e:	2c00      	cmp	r4, #0
10008310:	d01f      	beq.n	10008352 <i2c_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008312:	0031      	movs	r1, r6
10008314:	4818      	ldr	r0, [pc, #96]	; (10008378 <i2c_read+0x94>)
10008316:	47a8      	blx	r5
10008318:	2800      	cmp	r0, #0
1000831a:	d1f6      	bne.n	1000830a <i2c_read+0x26>
1000831c:	4e14      	ldr	r6, [pc, #80]	; (10008370 <i2c_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000831e:	4d13      	ldr	r5, [pc, #76]	; (1000836c <i2c_read+0x88>)
10008320:	4c16      	ldr	r4, [pc, #88]	; (1000837c <i2c_read+0x98>)
10008322:	e003      	b.n	1000832c <i2c_read+0x48>
10008324:	3e01      	subs	r6, #1
10008326:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
10008328:	2e00      	cmp	r6, #0
1000832a:	d015      	beq.n	10008358 <i2c_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000832c:	0029      	movs	r1, r5
1000832e:	4812      	ldr	r0, [pc, #72]	; (10008378 <i2c_read+0x94>)
10008330:	47a0      	blx	r4
10008332:	2800      	cmp	r0, #0
10008334:	d1f6      	bne.n	10008324 <i2c_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008336:	2f00      	cmp	r7, #0
10008338:	d011      	beq.n	1000835e <i2c_read+0x7a>
1000833a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000833c:	490b      	ldr	r1, [pc, #44]	; (1000836c <i2c_read+0x88>)
1000833e:	684a      	ldr	r2, [r1, #4]
10008340:	5cd2      	ldrb	r2, [r2, r3]
10008342:	4640      	mov	r0, r8
10008344:	54c2      	strb	r2, [r0, r3]
10008346:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008348:	b2da      	uxtb	r2, r3
1000834a:	4297      	cmp	r7, r2
1000834c:	d8f7      	bhi.n	1000833e <i2c_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000834e:	2000      	movs	r0, #0
10008350:	e006      	b.n	10008360 <i2c_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008352:	2001      	movs	r0, #1
10008354:	4240      	negs	r0, r0
10008356:	e003      	b.n	10008360 <i2c_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008358:	2001      	movs	r0, #1
1000835a:	4240      	negs	r0, r0
1000835c:	e000      	b.n	10008360 <i2c_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000835e:	2000      	movs	r0, #0
}
10008360:	bc04      	pop	{r2}
10008362:	4690      	mov	r8, r2
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)
10008368:	10014c68 	.word	0x10014c68
1000836c:	10014c58 	.word	0x10014c58
10008370:	000003e9 	.word	0x000003e9
10008374:	1000c291 	.word	0x1000c291
10008378:	10014c60 	.word	0x10014c60
1000837c:	1000c239 	.word	0x1000c239

10008380 <i2c_write>:

#elif defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008382:	4c12      	ldr	r4, [pc, #72]	; (100083cc <i2c_write+0x4c>)
10008384:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008386:	1c50      	adds	r0, r2, #1
10008388:	b2c0      	uxtb	r0, r0
1000838a:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000838c:	6860      	ldr	r0, [r4, #4]
1000838e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008390:	2a00      	cmp	r2, #0
10008392:	d00e      	beq.n	100083b2 <i2c_write+0x32>
10008394:	2000      	movs	r0, #0
10008396:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008398:	5c18      	ldrb	r0, [r3, r0]
1000839a:	6865      	ldr	r5, [r4, #4]
1000839c:	5468      	strb	r0, [r5, r1]
1000839e:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083a0:	b2c9      	uxtb	r1, r1
100083a2:	428a      	cmp	r2, r1
100083a4:	d8f7      	bhi.n	10008396 <i2c_write+0x16>
100083a6:	e004      	b.n	100083b2 <i2c_write+0x32>
100083a8:	3c01      	subs	r4, #1
100083aa:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100083ac:	2c00      	cmp	r4, #0
100083ae:	d104      	bne.n	100083ba <i2c_write+0x3a>
100083b0:	e009      	b.n	100083c6 <i2c_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083b2:	4c07      	ldr	r4, [pc, #28]	; (100083d0 <i2c_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083b4:	4e05      	ldr	r6, [pc, #20]	; (100083cc <i2c_write+0x4c>)
100083b6:	4d07      	ldr	r5, [pc, #28]	; (100083d4 <i2c_write+0x54>)
100083b8:	4f07      	ldr	r7, [pc, #28]	; (100083d8 <i2c_write+0x58>)
100083ba:	0031      	movs	r1, r6
100083bc:	0028      	movs	r0, r5
100083be:	47b8      	blx	r7
100083c0:	2800      	cmp	r0, #0
100083c2:	d1f1      	bne.n	100083a8 <i2c_write+0x28>
100083c4:	e001      	b.n	100083ca <i2c_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100083c6:	2001      	movs	r0, #1
100083c8:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100083cc:	10014c68 	.word	0x10014c68
100083d0:	000003e9 	.word	0x000003e9
100083d4:	10014c60 	.word	0x10014c60
100083d8:	1000c25d 	.word	0x1000c25d

100083dc <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083dc:	b510      	push	{r4, lr}
100083de:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083e0:	2324      	movs	r3, #36	; 0x24
100083e2:	4a25      	ldr	r2, [pc, #148]	; (10008478 <set_int_enable+0x9c>)
100083e4:	5cd3      	ldrb	r3, [r2, r3]
100083e6:	2b00      	cmp	r3, #0
100083e8:	d019      	beq.n	1000841e <set_int_enable+0x42>
        if (enable)
100083ea:	2800      	cmp	r0, #0
100083ec:	d003      	beq.n	100083f6 <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
100083ee:	2202      	movs	r2, #2
100083f0:	466b      	mov	r3, sp
100083f2:	71da      	strb	r2, [r3, #7]
100083f4:	e002      	b.n	100083fc <set_int_enable+0x20>
        else
            tmp = 0x00;
100083f6:	2200      	movs	r2, #0
100083f8:	466b      	mov	r3, sp
100083fa:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100083fc:	4b1e      	ldr	r3, [pc, #120]	; (10008478 <set_int_enable+0x9c>)
100083fe:	681a      	ldr	r2, [r3, #0]
10008400:	7c51      	ldrb	r1, [r2, #17]
10008402:	685b      	ldr	r3, [r3, #4]
10008404:	7818      	ldrb	r0, [r3, #0]
10008406:	466b      	mov	r3, sp
10008408:	3307      	adds	r3, #7
1000840a:	2201      	movs	r2, #1
1000840c:	4c1b      	ldr	r4, [pc, #108]	; (1000847c <set_int_enable+0xa0>)
1000840e:	47a0      	blx	r4
10008410:	2800      	cmp	r0, #0
10008412:	d127      	bne.n	10008464 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008414:	466b      	mov	r3, sp
10008416:	79da      	ldrb	r2, [r3, #7]
10008418:	4b17      	ldr	r3, [pc, #92]	; (10008478 <set_int_enable+0x9c>)
1000841a:	745a      	strb	r2, [r3, #17]
1000841c:	e02a      	b.n	10008474 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
1000841e:	4b16      	ldr	r3, [pc, #88]	; (10008478 <set_int_enable+0x9c>)
10008420:	7a9b      	ldrb	r3, [r3, #10]
10008422:	2b00      	cmp	r3, #0
10008424:	d021      	beq.n	1000846a <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008426:	2800      	cmp	r0, #0
10008428:	d008      	beq.n	1000843c <set_int_enable+0x60>
1000842a:	4b13      	ldr	r3, [pc, #76]	; (10008478 <set_int_enable+0x9c>)
1000842c:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
1000842e:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008430:	2b00      	cmp	r3, #0
10008432:	d11f      	bne.n	10008474 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008434:	2201      	movs	r2, #1
10008436:	466b      	mov	r3, sp
10008438:	71da      	strb	r2, [r3, #7]
1000843a:	e002      	b.n	10008442 <set_int_enable+0x66>
        else
            tmp = 0x00;
1000843c:	2200      	movs	r2, #0
1000843e:	466b      	mov	r3, sp
10008440:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008442:	4b0d      	ldr	r3, [pc, #52]	; (10008478 <set_int_enable+0x9c>)
10008444:	681a      	ldr	r2, [r3, #0]
10008446:	7c51      	ldrb	r1, [r2, #17]
10008448:	685b      	ldr	r3, [r3, #4]
1000844a:	7818      	ldrb	r0, [r3, #0]
1000844c:	466b      	mov	r3, sp
1000844e:	3307      	adds	r3, #7
10008450:	2201      	movs	r2, #1
10008452:	4c0a      	ldr	r4, [pc, #40]	; (1000847c <set_int_enable+0xa0>)
10008454:	47a0      	blx	r4
10008456:	2800      	cmp	r0, #0
10008458:	d10a      	bne.n	10008470 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
1000845a:	466b      	mov	r3, sp
1000845c:	79da      	ldrb	r2, [r3, #7]
1000845e:	4b06      	ldr	r3, [pc, #24]	; (10008478 <set_int_enable+0x9c>)
10008460:	745a      	strb	r2, [r3, #17]
10008462:	e007      	b.n	10008474 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008464:	2001      	movs	r0, #1
10008466:	4240      	negs	r0, r0
10008468:	e004      	b.n	10008474 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
1000846a:	2001      	movs	r0, #1
1000846c:	4240      	negs	r0, r0
1000846e:	e001      	b.n	10008474 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008470:	2001      	movs	r0, #1
10008472:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
10008474:	b002      	add	sp, #8
10008476:	bd10      	pop	{r4, pc}
10008478:	100135c0 	.word	0x100135c0
1000847c:	10008381 	.word	0x10008381

10008480 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008480:	b510      	push	{r4, lr}
10008482:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008484:	4b79      	ldr	r3, [pc, #484]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008486:	7a9b      	ldrb	r3, [r3, #10]
10008488:	2b00      	cmp	r3, #0
1000848a:	d100      	bne.n	1000848e <mpu_reset_fifo+0xe>
1000848c:	e0ce      	b.n	1000862c <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
1000848e:	466b      	mov	r3, sp
10008490:	3307      	adds	r3, #7
10008492:	2200      	movs	r2, #0
10008494:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008496:	4a75      	ldr	r2, [pc, #468]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008498:	6811      	ldr	r1, [r2, #0]
1000849a:	7c49      	ldrb	r1, [r1, #17]
1000849c:	6852      	ldr	r2, [r2, #4]
1000849e:	7810      	ldrb	r0, [r2, #0]
100084a0:	2201      	movs	r2, #1
100084a2:	4c73      	ldr	r4, [pc, #460]	; (10008670 <mpu_reset_fifo+0x1f0>)
100084a4:	47a0      	blx	r4
100084a6:	2800      	cmp	r0, #0
100084a8:	d000      	beq.n	100084ac <mpu_reset_fifo+0x2c>
100084aa:	e0c2      	b.n	10008632 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084ac:	4b6f      	ldr	r3, [pc, #444]	; (1000866c <mpu_reset_fifo+0x1ec>)
100084ae:	681a      	ldr	r2, [r3, #0]
100084b0:	7951      	ldrb	r1, [r2, #5]
100084b2:	685b      	ldr	r3, [r3, #4]
100084b4:	7818      	ldrb	r0, [r3, #0]
100084b6:	466b      	mov	r3, sp
100084b8:	3307      	adds	r3, #7
100084ba:	2201      	movs	r2, #1
100084bc:	4c6c      	ldr	r4, [pc, #432]	; (10008670 <mpu_reset_fifo+0x1f0>)
100084be:	47a0      	blx	r4
100084c0:	2800      	cmp	r0, #0
100084c2:	d000      	beq.n	100084c6 <mpu_reset_fifo+0x46>
100084c4:	e0b8      	b.n	10008638 <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084c6:	4b69      	ldr	r3, [pc, #420]	; (1000866c <mpu_reset_fifo+0x1ec>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7911      	ldrb	r1, [r2, #4]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c66      	ldr	r4, [pc, #408]	; (10008670 <mpu_reset_fifo+0x1f0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d000      	beq.n	100084e0 <mpu_reset_fifo+0x60>
100084de:	e0ae      	b.n	1000863e <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
100084e0:	2324      	movs	r3, #36	; 0x24
100084e2:	4a62      	ldr	r2, [pc, #392]	; (1000866c <mpu_reset_fifo+0x1ec>)
100084e4:	5cd3      	ldrb	r3, [r2, r3]
100084e6:	2b00      	cmp	r3, #0
100084e8:	d04f      	beq.n	1000858a <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100084ea:	466b      	mov	r3, sp
100084ec:	3307      	adds	r3, #7
100084ee:	220c      	movs	r2, #12
100084f0:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084f2:	4a5e      	ldr	r2, [pc, #376]	; (1000866c <mpu_reset_fifo+0x1ec>)
100084f4:	6811      	ldr	r1, [r2, #0]
100084f6:	7909      	ldrb	r1, [r1, #4]
100084f8:	6852      	ldr	r2, [r2, #4]
100084fa:	7810      	ldrb	r0, [r2, #0]
100084fc:	2201      	movs	r2, #1
100084fe:	4c5c      	ldr	r4, [pc, #368]	; (10008670 <mpu_reset_fifo+0x1f0>)
10008500:	47a0      	blx	r4
10008502:	2800      	cmp	r0, #0
10008504:	d000      	beq.n	10008508 <mpu_reset_fifo+0x88>
10008506:	e09d      	b.n	10008644 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
10008508:	3032      	adds	r0, #50	; 0x32
1000850a:	4b5a      	ldr	r3, [pc, #360]	; (10008674 <mpu_reset_fifo+0x1f4>)
1000850c:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000850e:	22c0      	movs	r2, #192	; 0xc0
10008510:	466b      	mov	r3, sp
10008512:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008514:	4b55      	ldr	r3, [pc, #340]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008516:	7a9b      	ldrb	r3, [r3, #10]
10008518:	07db      	lsls	r3, r3, #31
1000851a:	d502      	bpl.n	10008522 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
1000851c:	3220      	adds	r2, #32
1000851e:	466b      	mov	r3, sp
10008520:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008522:	4b52      	ldr	r3, [pc, #328]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008524:	681a      	ldr	r2, [r3, #0]
10008526:	7911      	ldrb	r1, [r2, #4]
10008528:	685b      	ldr	r3, [r3, #4]
1000852a:	7818      	ldrb	r0, [r3, #0]
1000852c:	466b      	mov	r3, sp
1000852e:	3307      	adds	r3, #7
10008530:	2201      	movs	r2, #1
10008532:	4c4f      	ldr	r4, [pc, #316]	; (10008670 <mpu_reset_fifo+0x1f0>)
10008534:	47a0      	blx	r4
10008536:	2800      	cmp	r0, #0
10008538:	d000      	beq.n	1000853c <mpu_reset_fifo+0xbc>
1000853a:	e086      	b.n	1000864a <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
1000853c:	4b4b      	ldr	r3, [pc, #300]	; (1000866c <mpu_reset_fifo+0x1ec>)
1000853e:	7c5b      	ldrb	r3, [r3, #17]
10008540:	2b00      	cmp	r3, #0
10008542:	d003      	beq.n	1000854c <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
10008544:	2202      	movs	r2, #2
10008546:	466b      	mov	r3, sp
10008548:	71da      	strb	r2, [r3, #7]
1000854a:	e002      	b.n	10008552 <mpu_reset_fifo+0xd2>
        else
            data = 0;
1000854c:	2200      	movs	r2, #0
1000854e:	466b      	mov	r3, sp
10008550:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008552:	4b46      	ldr	r3, [pc, #280]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008554:	681a      	ldr	r2, [r3, #0]
10008556:	7c51      	ldrb	r1, [r2, #17]
10008558:	685b      	ldr	r3, [r3, #4]
1000855a:	7818      	ldrb	r0, [r3, #0]
1000855c:	466b      	mov	r3, sp
1000855e:	3307      	adds	r3, #7
10008560:	2201      	movs	r2, #1
10008562:	4c43      	ldr	r4, [pc, #268]	; (10008670 <mpu_reset_fifo+0x1f0>)
10008564:	47a0      	blx	r4
10008566:	2800      	cmp	r0, #0
10008568:	d172      	bne.n	10008650 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
1000856a:	466b      	mov	r3, sp
1000856c:	3307      	adds	r3, #7
1000856e:	2200      	movs	r2, #0
10008570:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008572:	4a3e      	ldr	r2, [pc, #248]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008574:	6811      	ldr	r1, [r2, #0]
10008576:	7949      	ldrb	r1, [r1, #5]
10008578:	6852      	ldr	r2, [r2, #4]
1000857a:	7810      	ldrb	r0, [r2, #0]
1000857c:	2201      	movs	r2, #1
1000857e:	4c3c      	ldr	r4, [pc, #240]	; (10008670 <mpu_reset_fifo+0x1f0>)
10008580:	47a0      	blx	r4
10008582:	1e43      	subs	r3, r0, #1
10008584:	4198      	sbcs	r0, r3
10008586:	4240      	negs	r0, r0
10008588:	e06d      	b.n	10008666 <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000858a:	466b      	mov	r3, sp
1000858c:	3307      	adds	r3, #7
1000858e:	2204      	movs	r2, #4
10008590:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008592:	4a36      	ldr	r2, [pc, #216]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008594:	6811      	ldr	r1, [r2, #0]
10008596:	7909      	ldrb	r1, [r1, #4]
10008598:	6852      	ldr	r2, [r2, #4]
1000859a:	7810      	ldrb	r0, [r2, #0]
1000859c:	2201      	movs	r2, #1
1000859e:	4c34      	ldr	r4, [pc, #208]	; (10008670 <mpu_reset_fifo+0x1f0>)
100085a0:	47a0      	blx	r4
100085a2:	2800      	cmp	r0, #0
100085a4:	d157      	bne.n	10008656 <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085a6:	4b31      	ldr	r3, [pc, #196]	; (1000866c <mpu_reset_fifo+0x1ec>)
100085a8:	7c9b      	ldrb	r3, [r3, #18]
100085aa:	2b00      	cmp	r3, #0
100085ac:	d103      	bne.n	100085b6 <mpu_reset_fifo+0x136>
100085ae:	4b2f      	ldr	r3, [pc, #188]	; (1000866c <mpu_reset_fifo+0x1ec>)
100085b0:	7a9b      	ldrb	r3, [r3, #10]
100085b2:	07db      	lsls	r3, r3, #31
100085b4:	d403      	bmi.n	100085be <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
100085b6:	2240      	movs	r2, #64	; 0x40
100085b8:	466b      	mov	r3, sp
100085ba:	71da      	strb	r2, [r3, #7]
100085bc:	e002      	b.n	100085c4 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100085be:	2260      	movs	r2, #96	; 0x60
100085c0:	466b      	mov	r3, sp
100085c2:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085c4:	4b29      	ldr	r3, [pc, #164]	; (1000866c <mpu_reset_fifo+0x1ec>)
100085c6:	681a      	ldr	r2, [r3, #0]
100085c8:	7911      	ldrb	r1, [r2, #4]
100085ca:	685b      	ldr	r3, [r3, #4]
100085cc:	7818      	ldrb	r0, [r3, #0]
100085ce:	466b      	mov	r3, sp
100085d0:	3307      	adds	r3, #7
100085d2:	2201      	movs	r2, #1
100085d4:	4c26      	ldr	r4, [pc, #152]	; (10008670 <mpu_reset_fifo+0x1f0>)
100085d6:	47a0      	blx	r4
100085d8:	2800      	cmp	r0, #0
100085da:	d13f      	bne.n	1000865c <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
100085dc:	3032      	adds	r0, #50	; 0x32
100085de:	4b25      	ldr	r3, [pc, #148]	; (10008674 <mpu_reset_fifo+0x1f4>)
100085e0:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
100085e2:	4b22      	ldr	r3, [pc, #136]	; (1000866c <mpu_reset_fifo+0x1ec>)
100085e4:	7c5b      	ldrb	r3, [r3, #17]
100085e6:	2b00      	cmp	r3, #0
100085e8:	d003      	beq.n	100085f2 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
100085ea:	2201      	movs	r2, #1
100085ec:	466b      	mov	r3, sp
100085ee:	71da      	strb	r2, [r3, #7]
100085f0:	e002      	b.n	100085f8 <mpu_reset_fifo+0x178>
        else
            data = 0;
100085f2:	2200      	movs	r2, #0
100085f4:	466b      	mov	r3, sp
100085f6:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085f8:	4b1c      	ldr	r3, [pc, #112]	; (1000866c <mpu_reset_fifo+0x1ec>)
100085fa:	681a      	ldr	r2, [r3, #0]
100085fc:	7c51      	ldrb	r1, [r2, #17]
100085fe:	685b      	ldr	r3, [r3, #4]
10008600:	7818      	ldrb	r0, [r3, #0]
10008602:	466b      	mov	r3, sp
10008604:	3307      	adds	r3, #7
10008606:	2201      	movs	r2, #1
10008608:	4c19      	ldr	r4, [pc, #100]	; (10008670 <mpu_reset_fifo+0x1f0>)
1000860a:	47a0      	blx	r4
1000860c:	2800      	cmp	r0, #0
1000860e:	d128      	bne.n	10008662 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008610:	4a16      	ldr	r2, [pc, #88]	; (1000866c <mpu_reset_fifo+0x1ec>)
10008612:	0013      	movs	r3, r2
10008614:	3310      	adds	r3, #16
10008616:	6811      	ldr	r1, [r2, #0]
10008618:	7949      	ldrb	r1, [r1, #5]
1000861a:	6852      	ldr	r2, [r2, #4]
1000861c:	7810      	ldrb	r0, [r2, #0]
1000861e:	2201      	movs	r2, #1
10008620:	4c13      	ldr	r4, [pc, #76]	; (10008670 <mpu_reset_fifo+0x1f0>)
10008622:	47a0      	blx	r4
10008624:	1e43      	subs	r3, r0, #1
10008626:	4198      	sbcs	r0, r3
10008628:	4240      	negs	r0, r0
1000862a:	e01c      	b.n	10008666 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000862c:	2001      	movs	r0, #1
1000862e:	4240      	negs	r0, r0
10008630:	e019      	b.n	10008666 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
10008632:	2001      	movs	r0, #1
10008634:	4240      	negs	r0, r0
10008636:	e016      	b.n	10008666 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
10008638:	2001      	movs	r0, #1
1000863a:	4240      	negs	r0, r0
1000863c:	e013      	b.n	10008666 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
1000863e:	2001      	movs	r0, #1
10008640:	4240      	negs	r0, r0
10008642:	e010      	b.n	10008666 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008644:	2001      	movs	r0, #1
10008646:	4240      	negs	r0, r0
10008648:	e00d      	b.n	10008666 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000864a:	2001      	movs	r0, #1
1000864c:	4240      	negs	r0, r0
1000864e:	e00a      	b.n	10008666 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008650:	2001      	movs	r0, #1
10008652:	4240      	negs	r0, r0
10008654:	e007      	b.n	10008666 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
10008656:	2001      	movs	r0, #1
10008658:	4240      	negs	r0, r0
1000865a:	e004      	b.n	10008666 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
1000865c:	2001      	movs	r0, #1
1000865e:	4240      	negs	r0, r0
10008660:	e001      	b.n	10008666 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
10008662:	2001      	movs	r0, #1
10008664:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008666:	b002      	add	sp, #8
10008668:	bd10      	pop	{r4, pc}
1000866a:	46c0      	nop			; (mov r8, r8)
1000866c:	100135c0 	.word	0x100135c0
10008670:	10008381 	.word	0x10008381
10008674:	10008129 	.word	0x10008129

10008678 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
10008678:	4b0e      	ldr	r3, [pc, #56]	; (100086b4 <mpu_get_gyro_fsr+0x3c>)
1000867a:	7a1b      	ldrb	r3, [r3, #8]
1000867c:	2b01      	cmp	r3, #1
1000867e:	d009      	beq.n	10008694 <mpu_get_gyro_fsr+0x1c>
10008680:	2b00      	cmp	r3, #0
10008682:	d004      	beq.n	1000868e <mpu_get_gyro_fsr+0x16>
10008684:	2b02      	cmp	r3, #2
10008686:	d009      	beq.n	1000869c <mpu_get_gyro_fsr+0x24>
10008688:	2b03      	cmp	r3, #3
1000868a:	d00b      	beq.n	100086a4 <mpu_get_gyro_fsr+0x2c>
1000868c:	e00e      	b.n	100086ac <mpu_get_gyro_fsr+0x34>
    case INV_FSR_250DPS:
        fsr[0] = 250;
1000868e:	23fa      	movs	r3, #250	; 0xfa
10008690:	8003      	strh	r3, [r0, #0]
        break;
10008692:	e00d      	b.n	100086b0 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_500DPS:
        fsr[0] = 500;
10008694:	23fa      	movs	r3, #250	; 0xfa
10008696:	005b      	lsls	r3, r3, #1
10008698:	8003      	strh	r3, [r0, #0]
        break;
1000869a:	e009      	b.n	100086b0 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
1000869c:	23fa      	movs	r3, #250	; 0xfa
1000869e:	009b      	lsls	r3, r3, #2
100086a0:	8003      	strh	r3, [r0, #0]
        break;
100086a2:	e005      	b.n	100086b0 <mpu_get_gyro_fsr+0x38>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
100086a4:	23fa      	movs	r3, #250	; 0xfa
100086a6:	00db      	lsls	r3, r3, #3
100086a8:	8003      	strh	r3, [r0, #0]
        break;
100086aa:	e001      	b.n	100086b0 <mpu_get_gyro_fsr+0x38>
    default:
        fsr[0] = 0;
100086ac:	2300      	movs	r3, #0
100086ae:	8003      	strh	r3, [r0, #0]
        break;
    }
    return 0;
}
100086b0:	2000      	movs	r0, #0
100086b2:	4770      	bx	lr
100086b4:	100135c0 	.word	0x100135c0

100086b8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086b8:	b510      	push	{r4, lr}
100086ba:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086bc:	4b24      	ldr	r3, [pc, #144]	; (10008750 <mpu_set_gyro_fsr+0x98>)
100086be:	7a9b      	ldrb	r3, [r3, #10]
100086c0:	2b00      	cmp	r3, #0
100086c2:	d03b      	beq.n	1000873c <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
100086c4:	23fa      	movs	r3, #250	; 0xfa
100086c6:	005b      	lsls	r3, r3, #1
100086c8:	4298      	cmp	r0, r3
100086ca:	d010      	beq.n	100086ee <mpu_set_gyro_fsr+0x36>
100086cc:	d802      	bhi.n	100086d4 <mpu_set_gyro_fsr+0x1c>
100086ce:	28fa      	cmp	r0, #250	; 0xfa
100086d0:	d009      	beq.n	100086e6 <mpu_set_gyro_fsr+0x2e>
100086d2:	e036      	b.n	10008742 <mpu_set_gyro_fsr+0x8a>
100086d4:	23fa      	movs	r3, #250	; 0xfa
100086d6:	009b      	lsls	r3, r3, #2
100086d8:	4298      	cmp	r0, r3
100086da:	d00c      	beq.n	100086f6 <mpu_set_gyro_fsr+0x3e>
100086dc:	23fa      	movs	r3, #250	; 0xfa
100086de:	00db      	lsls	r3, r3, #3
100086e0:	4298      	cmp	r0, r3
100086e2:	d00c      	beq.n	100086fe <mpu_set_gyro_fsr+0x46>
100086e4:	e02d      	b.n	10008742 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
100086e6:	2200      	movs	r2, #0
100086e8:	466b      	mov	r3, sp
100086ea:	71da      	strb	r2, [r3, #7]
        break;
100086ec:	e00a      	b.n	10008704 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
100086ee:	2208      	movs	r2, #8
100086f0:	466b      	mov	r3, sp
100086f2:	71da      	strb	r2, [r3, #7]
        break;
100086f4:	e006      	b.n	10008704 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
100086f6:	2210      	movs	r2, #16
100086f8:	466b      	mov	r3, sp
100086fa:	71da      	strb	r2, [r3, #7]
        break;
100086fc:	e002      	b.n	10008704 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
100086fe:	2218      	movs	r2, #24
10008700:	466b      	mov	r3, sp
10008702:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008704:	466b      	mov	r3, sp
10008706:	3307      	adds	r3, #7
10008708:	781b      	ldrb	r3, [r3, #0]
1000870a:	4a11      	ldr	r2, [pc, #68]	; (10008750 <mpu_set_gyro_fsr+0x98>)
1000870c:	7a12      	ldrb	r2, [r2, #8]
1000870e:	08db      	lsrs	r3, r3, #3
        return 0;
10008710:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008712:	429a      	cmp	r2, r3
10008714:	d01a      	beq.n	1000874c <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008716:	4b0e      	ldr	r3, [pc, #56]	; (10008750 <mpu_set_gyro_fsr+0x98>)
10008718:	681a      	ldr	r2, [r3, #0]
1000871a:	7991      	ldrb	r1, [r2, #6]
1000871c:	685b      	ldr	r3, [r3, #4]
1000871e:	7818      	ldrb	r0, [r3, #0]
10008720:	466b      	mov	r3, sp
10008722:	3307      	adds	r3, #7
10008724:	2201      	movs	r2, #1
10008726:	4c0b      	ldr	r4, [pc, #44]	; (10008754 <mpu_set_gyro_fsr+0x9c>)
10008728:	47a0      	blx	r4
1000872a:	2800      	cmp	r0, #0
1000872c:	d10c      	bne.n	10008748 <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000872e:	466b      	mov	r3, sp
10008730:	3307      	adds	r3, #7
10008732:	781b      	ldrb	r3, [r3, #0]
10008734:	08db      	lsrs	r3, r3, #3
10008736:	4a06      	ldr	r2, [pc, #24]	; (10008750 <mpu_set_gyro_fsr+0x98>)
10008738:	7213      	strb	r3, [r2, #8]
    return 0;
1000873a:	e007      	b.n	1000874c <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000873c:	2001      	movs	r0, #1
1000873e:	4240      	negs	r0, r0
10008740:	e004      	b.n	1000874c <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008742:	2001      	movs	r0, #1
10008744:	4240      	negs	r0, r0
10008746:	e001      	b.n	1000874c <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
10008748:	2001      	movs	r0, #1
1000874a:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000874c:	b002      	add	sp, #8
1000874e:	bd10      	pop	{r4, pc}
10008750:	100135c0 	.word	0x100135c0
10008754:	10008381 	.word	0x10008381

10008758 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008758:	4b11      	ldr	r3, [pc, #68]	; (100087a0 <mpu_get_accel_fsr+0x48>)
1000875a:	7a5b      	ldrb	r3, [r3, #9]
1000875c:	2b01      	cmp	r3, #1
1000875e:	d009      	beq.n	10008774 <mpu_get_accel_fsr+0x1c>
10008760:	2b00      	cmp	r3, #0
10008762:	d004      	beq.n	1000876e <mpu_get_accel_fsr+0x16>
10008764:	2b02      	cmp	r3, #2
10008766:	d008      	beq.n	1000877a <mpu_get_accel_fsr+0x22>
10008768:	2b03      	cmp	r3, #3
1000876a:	d009      	beq.n	10008780 <mpu_get_accel_fsr+0x28>
1000876c:	e014      	b.n	10008798 <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
1000876e:	2302      	movs	r3, #2
10008770:	7003      	strb	r3, [r0, #0]
        break;
10008772:	e007      	b.n	10008784 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
10008774:	2304      	movs	r3, #4
10008776:	7003      	strb	r3, [r0, #0]
        break;
10008778:	e004      	b.n	10008784 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
1000877a:	2308      	movs	r3, #8
1000877c:	7003      	strb	r3, [r0, #0]
        break;
1000877e:	e001      	b.n	10008784 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
10008780:	2310      	movs	r3, #16
10008782:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008784:	4b06      	ldr	r3, [pc, #24]	; (100087a0 <mpu_get_accel_fsr+0x48>)
10008786:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
10008788:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000878a:	2a00      	cmp	r2, #0
1000878c:	d006      	beq.n	1000879c <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
1000878e:	7803      	ldrb	r3, [r0, #0]
10008790:	005b      	lsls	r3, r3, #1
10008792:	7003      	strb	r3, [r0, #0]
    return 0;
10008794:	2300      	movs	r3, #0
10008796:	e001      	b.n	1000879c <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008798:	2301      	movs	r3, #1
1000879a:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
1000879c:	0018      	movs	r0, r3
1000879e:	4770      	bx	lr
100087a0:	100135c0 	.word	0x100135c0

100087a4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100087a4:	b510      	push	{r4, lr}
100087a6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087a8:	4b21      	ldr	r3, [pc, #132]	; (10008830 <mpu_set_accel_fsr+0x8c>)
100087aa:	7a9b      	ldrb	r3, [r3, #10]
100087ac:	2b00      	cmp	r3, #0
100087ae:	d035      	beq.n	1000881c <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100087b0:	2804      	cmp	r0, #4
100087b2:	d00c      	beq.n	100087ce <mpu_set_accel_fsr+0x2a>
100087b4:	d802      	bhi.n	100087bc <mpu_set_accel_fsr+0x18>
100087b6:	2802      	cmp	r0, #2
100087b8:	d005      	beq.n	100087c6 <mpu_set_accel_fsr+0x22>
100087ba:	e032      	b.n	10008822 <mpu_set_accel_fsr+0x7e>
100087bc:	2808      	cmp	r0, #8
100087be:	d00a      	beq.n	100087d6 <mpu_set_accel_fsr+0x32>
100087c0:	2810      	cmp	r0, #16
100087c2:	d00c      	beq.n	100087de <mpu_set_accel_fsr+0x3a>
100087c4:	e02d      	b.n	10008822 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100087c6:	2200      	movs	r2, #0
100087c8:	466b      	mov	r3, sp
100087ca:	71da      	strb	r2, [r3, #7]
        break;
100087cc:	e00a      	b.n	100087e4 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100087ce:	2208      	movs	r2, #8
100087d0:	466b      	mov	r3, sp
100087d2:	71da      	strb	r2, [r3, #7]
        break;
100087d4:	e006      	b.n	100087e4 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100087d6:	2210      	movs	r2, #16
100087d8:	466b      	mov	r3, sp
100087da:	71da      	strb	r2, [r3, #7]
        break;
100087dc:	e002      	b.n	100087e4 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100087de:	2218      	movs	r2, #24
100087e0:	466b      	mov	r3, sp
100087e2:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087e4:	466b      	mov	r3, sp
100087e6:	3307      	adds	r3, #7
100087e8:	781b      	ldrb	r3, [r3, #0]
100087ea:	4a11      	ldr	r2, [pc, #68]	; (10008830 <mpu_set_accel_fsr+0x8c>)
100087ec:	7a52      	ldrb	r2, [r2, #9]
100087ee:	08db      	lsrs	r3, r3, #3
        return 0;
100087f0:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087f2:	429a      	cmp	r2, r3
100087f4:	d01a      	beq.n	1000882c <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087f6:	4b0e      	ldr	r3, [pc, #56]	; (10008830 <mpu_set_accel_fsr+0x8c>)
100087f8:	681a      	ldr	r2, [r3, #0]
100087fa:	79d1      	ldrb	r1, [r2, #7]
100087fc:	685b      	ldr	r3, [r3, #4]
100087fe:	7818      	ldrb	r0, [r3, #0]
10008800:	466b      	mov	r3, sp
10008802:	3307      	adds	r3, #7
10008804:	2201      	movs	r2, #1
10008806:	4c0b      	ldr	r4, [pc, #44]	; (10008834 <mpu_set_accel_fsr+0x90>)
10008808:	47a0      	blx	r4
1000880a:	2800      	cmp	r0, #0
1000880c:	d10c      	bne.n	10008828 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000880e:	466b      	mov	r3, sp
10008810:	3307      	adds	r3, #7
10008812:	781b      	ldrb	r3, [r3, #0]
10008814:	08db      	lsrs	r3, r3, #3
10008816:	4a06      	ldr	r2, [pc, #24]	; (10008830 <mpu_set_accel_fsr+0x8c>)
10008818:	7253      	strb	r3, [r2, #9]
    return 0;
1000881a:	e007      	b.n	1000882c <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000881c:	2001      	movs	r0, #1
1000881e:	4240      	negs	r0, r0
10008820:	e004      	b.n	1000882c <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008822:	2001      	movs	r0, #1
10008824:	4240      	negs	r0, r0
10008826:	e001      	b.n	1000882c <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008828:	2001      	movs	r0, #1
1000882a:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
1000882c:	b002      	add	sp, #8
1000882e:	bd10      	pop	{r4, pc}
10008830:	100135c0 	.word	0x100135c0
10008834:	10008381 	.word	0x10008381

10008838 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008838:	b510      	push	{r4, lr}
1000883a:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000883c:	4b2b      	ldr	r3, [pc, #172]	; (100088ec <mpu_set_lpf+0xb4>)
1000883e:	7a9b      	ldrb	r3, [r3, #10]
10008840:	2b00      	cmp	r3, #0
10008842:	d049      	beq.n	100088d8 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008844:	28bb      	cmp	r0, #187	; 0xbb
10008846:	d903      	bls.n	10008850 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008848:	2201      	movs	r2, #1
1000884a:	466b      	mov	r3, sp
1000884c:	71da      	strb	r2, [r3, #7]
1000884e:	e01a      	b.n	10008886 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008850:	2861      	cmp	r0, #97	; 0x61
10008852:	d903      	bls.n	1000885c <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008854:	2202      	movs	r2, #2
10008856:	466b      	mov	r3, sp
10008858:	71da      	strb	r2, [r3, #7]
1000885a:	e014      	b.n	10008886 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
1000885c:	2829      	cmp	r0, #41	; 0x29
1000885e:	d903      	bls.n	10008868 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008860:	2203      	movs	r2, #3
10008862:	466b      	mov	r3, sp
10008864:	71da      	strb	r2, [r3, #7]
10008866:	e00e      	b.n	10008886 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008868:	2813      	cmp	r0, #19
1000886a:	d903      	bls.n	10008874 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
1000886c:	2204      	movs	r2, #4
1000886e:	466b      	mov	r3, sp
10008870:	71da      	strb	r2, [r3, #7]
10008872:	e008      	b.n	10008886 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008874:	2809      	cmp	r0, #9
10008876:	d903      	bls.n	10008880 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008878:	2205      	movs	r2, #5
1000887a:	466b      	mov	r3, sp
1000887c:	71da      	strb	r2, [r3, #7]
1000887e:	e002      	b.n	10008886 <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
10008880:	2206      	movs	r2, #6
10008882:	466b      	mov	r3, sp
10008884:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
10008886:	4b19      	ldr	r3, [pc, #100]	; (100088ec <mpu_set_lpf+0xb4>)
10008888:	7ada      	ldrb	r2, [r3, #11]
1000888a:	466b      	mov	r3, sp
1000888c:	3307      	adds	r3, #7
1000888e:	781b      	ldrb	r3, [r3, #0]
        return 0;
10008890:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008892:	429a      	cmp	r2, r3
10008894:	d028      	beq.n	100088e8 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008896:	4b15      	ldr	r3, [pc, #84]	; (100088ec <mpu_set_lpf+0xb4>)
10008898:	681a      	ldr	r2, [r3, #0]
1000889a:	7891      	ldrb	r1, [r2, #2]
1000889c:	685b      	ldr	r3, [r3, #4]
1000889e:	7818      	ldrb	r0, [r3, #0]
100088a0:	466b      	mov	r3, sp
100088a2:	3307      	adds	r3, #7
100088a4:	2201      	movs	r2, #1
100088a6:	4c12      	ldr	r4, [pc, #72]	; (100088f0 <mpu_set_lpf+0xb8>)
100088a8:	47a0      	blx	r4
100088aa:	2800      	cmp	r0, #0
100088ac:	d117      	bne.n	100088de <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100088ae:	466b      	mov	r3, sp
100088b0:	3307      	adds	r3, #7
100088b2:	7819      	ldrb	r1, [r3, #0]
100088b4:	2240      	movs	r2, #64	; 0x40
100088b6:	430a      	orrs	r2, r1
100088b8:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100088ba:	4a0c      	ldr	r2, [pc, #48]	; (100088ec <mpu_set_lpf+0xb4>)
100088bc:	6811      	ldr	r1, [r2, #0]
100088be:	7a09      	ldrb	r1, [r1, #8]
100088c0:	6852      	ldr	r2, [r2, #4]
100088c2:	7810      	ldrb	r0, [r2, #0]
100088c4:	2201      	movs	r2, #1
100088c6:	4c0a      	ldr	r4, [pc, #40]	; (100088f0 <mpu_set_lpf+0xb8>)
100088c8:	47a0      	blx	r4
100088ca:	2800      	cmp	r0, #0
100088cc:	d10a      	bne.n	100088e4 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100088ce:	466b      	mov	r3, sp
100088d0:	79da      	ldrb	r2, [r3, #7]
100088d2:	4b06      	ldr	r3, [pc, #24]	; (100088ec <mpu_set_lpf+0xb4>)
100088d4:	72da      	strb	r2, [r3, #11]
    return 0;
100088d6:	e007      	b.n	100088e8 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100088d8:	2001      	movs	r0, #1
100088da:	4240      	negs	r0, r0
100088dc:	e004      	b.n	100088e8 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100088de:	2001      	movs	r0, #1
100088e0:	4240      	negs	r0, r0
100088e2:	e001      	b.n	100088e8 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100088e4:	2001      	movs	r0, #1
100088e6:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100088e8:	b002      	add	sp, #8
100088ea:	bd10      	pop	{r4, pc}
100088ec:	100135c0 	.word	0x100135c0
100088f0:	10008381 	.word	0x10008381

100088f4 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100088f4:	2324      	movs	r3, #36	; 0x24
100088f6:	4a05      	ldr	r2, [pc, #20]	; (1000890c <mpu_get_sample_rate+0x18>)
100088f8:	5cd3      	ldrb	r3, [r2, r3]
100088fa:	2b00      	cmp	r3, #0
100088fc:	d103      	bne.n	10008906 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100088fe:	89d3      	ldrh	r3, [r2, #14]
10008900:	8003      	strh	r3, [r0, #0]
    return 0;
10008902:	2000      	movs	r0, #0
10008904:	e001      	b.n	1000890a <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008906:	2001      	movs	r0, #1
10008908:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
1000890a:	4770      	bx	lr
1000890c:	100135c0 	.word	0x100135c0

10008910 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008910:	b530      	push	{r4, r5, lr}
10008912:	b083      	sub	sp, #12
10008914:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008916:	d020      	beq.n	1000895a <mpu_set_compass_sample_rate+0x4a>
10008918:	4b17      	ldr	r3, [pc, #92]	; (10008978 <mpu_set_compass_sample_rate+0x68>)
1000891a:	89d8      	ldrh	r0, [r3, #14]
1000891c:	4281      	cmp	r1, r0
1000891e:	d81f      	bhi.n	10008960 <mpu_set_compass_sample_rate+0x50>
10008920:	2964      	cmp	r1, #100	; 0x64
10008922:	d820      	bhi.n	10008966 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008924:	466b      	mov	r3, sp
10008926:	1ddc      	adds	r4, r3, #7
10008928:	4b14      	ldr	r3, [pc, #80]	; (1000897c <mpu_set_compass_sample_rate+0x6c>)
1000892a:	4798      	blx	r3
1000892c:	3801      	subs	r0, #1
1000892e:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008930:	4b11      	ldr	r3, [pc, #68]	; (10008978 <mpu_set_compass_sample_rate+0x68>)
10008932:	2224      	movs	r2, #36	; 0x24
10008934:	6819      	ldr	r1, [r3, #0]
10008936:	5c89      	ldrb	r1, [r1, r2]
10008938:	685b      	ldr	r3, [r3, #4]
1000893a:	7818      	ldrb	r0, [r3, #0]
1000893c:	0023      	movs	r3, r4
1000893e:	3a23      	subs	r2, #35	; 0x23
10008940:	4c0f      	ldr	r4, [pc, #60]	; (10008980 <mpu_set_compass_sample_rate+0x70>)
10008942:	47a0      	blx	r4
10008944:	1e04      	subs	r4, r0, #0
10008946:	d111      	bne.n	1000896c <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008948:	4d0b      	ldr	r5, [pc, #44]	; (10008978 <mpu_set_compass_sample_rate+0x68>)
1000894a:	89e8      	ldrh	r0, [r5, #14]
1000894c:	466b      	mov	r3, sp
1000894e:	79d9      	ldrb	r1, [r3, #7]
10008950:	3101      	adds	r1, #1
10008952:	4b0c      	ldr	r3, [pc, #48]	; (10008984 <mpu_set_compass_sample_rate+0x74>)
10008954:	4798      	blx	r3
10008956:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008958:	e00a      	b.n	10008970 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
1000895a:	2401      	movs	r4, #1
1000895c:	4264      	negs	r4, r4
1000895e:	e007      	b.n	10008970 <mpu_set_compass_sample_rate+0x60>
10008960:	2401      	movs	r4, #1
10008962:	4264      	negs	r4, r4
10008964:	e004      	b.n	10008970 <mpu_set_compass_sample_rate+0x60>
10008966:	2401      	movs	r4, #1
10008968:	4264      	negs	r4, r4
1000896a:	e001      	b.n	10008970 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
1000896c:	2401      	movs	r4, #1
1000896e:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
10008970:	0020      	movs	r0, r4
10008972:	b003      	add	sp, #12
10008974:	bd30      	pop	{r4, r5, pc}
10008976:	46c0      	nop			; (mov r8, r8)
10008978:	100135c0 	.word	0x100135c0
1000897c:	1000f5d9 	.word	0x1000f5d9
10008980:	10008381 	.word	0x10008381
10008984:	1000f6ed 	.word	0x1000f6ed

10008988 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008988:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000898a:	2324      	movs	r3, #36	; 0x24
1000898c:	4a16      	ldr	r2, [pc, #88]	; (100089e8 <mpu_configure_fifo+0x60>)
1000898e:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
10008990:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008992:	2b00      	cmp	r3, #0
10008994:	d126      	bne.n	100089e4 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008996:	7a94      	ldrb	r4, [r2, #10]
10008998:	2c00      	cmp	r4, #0
1000899a:	d015      	beq.n	100089c8 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
1000899c:	2301      	movs	r3, #1
1000899e:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
100089a0:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
100089a2:	4004      	ands	r4, r0
100089a4:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
100089a6:	1b04      	subs	r4, r0, r4
100089a8:	1e63      	subs	r3, r4, #1
100089aa:	419c      	sbcs	r4, r3
100089ac:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
100089ae:	2800      	cmp	r0, #0
100089b0:	d10d      	bne.n	100089ce <mpu_configure_fifo+0x46>
100089b2:	7d13      	ldrb	r3, [r2, #20]
100089b4:	2b00      	cmp	r3, #0
100089b6:	d112      	bne.n	100089de <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
100089b8:	4b0c      	ldr	r3, [pc, #48]	; (100089ec <mpu_configure_fifo+0x64>)
100089ba:	4798      	blx	r3
100089bc:	e012      	b.n	100089e4 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
100089be:	4b0a      	ldr	r3, [pc, #40]	; (100089e8 <mpu_configure_fifo+0x60>)
100089c0:	741d      	strb	r5, [r3, #16]
                return -1;
100089c2:	2401      	movs	r4, #1
100089c4:	4264      	negs	r4, r4
100089c6:	e00d      	b.n	100089e4 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
100089c8:	2401      	movs	r4, #1
100089ca:	4264      	negs	r4, r4
100089cc:	e00a      	b.n	100089e4 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089ce:	2001      	movs	r0, #1
100089d0:	4b06      	ldr	r3, [pc, #24]	; (100089ec <mpu_configure_fifo+0x64>)
100089d2:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
100089d4:	4b06      	ldr	r3, [pc, #24]	; (100089f0 <mpu_configure_fifo+0x68>)
100089d6:	4798      	blx	r3
100089d8:	2800      	cmp	r0, #0
100089da:	d003      	beq.n	100089e4 <mpu_configure_fifo+0x5c>
100089dc:	e7ef      	b.n	100089be <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089de:	2001      	movs	r0, #1
100089e0:	4b02      	ldr	r3, [pc, #8]	; (100089ec <mpu_configure_fifo+0x64>)
100089e2:	4798      	blx	r3
            }
        }
    }

    return result;
}
100089e4:	0020      	movs	r0, r4
100089e6:	bd70      	pop	{r4, r5, r6, pc}
100089e8:	100135c0 	.word	0x100135c0
100089ec:	100083dd 	.word	0x100083dd
100089f0:	10008481 	.word	0x10008481

100089f4 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
100089f4:	b530      	push	{r4, r5, lr}
100089f6:	b083      	sub	sp, #12
100089f8:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100089fa:	4b59      	ldr	r3, [pc, #356]	; (10008b60 <mpu_set_bypass+0x16c>)
100089fc:	7c9b      	ldrb	r3, [r3, #18]
100089fe:	4283      	cmp	r3, r0
10008a00:	d100      	bne.n	10008a04 <mpu_set_bypass+0x10>
10008a02:	e097      	b.n	10008b34 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008a04:	2800      	cmp	r0, #0
10008a06:	d042      	beq.n	10008a8e <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a08:	4b55      	ldr	r3, [pc, #340]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a0a:	681a      	ldr	r2, [r3, #0]
10008a0c:	7911      	ldrb	r1, [r2, #4]
10008a0e:	685b      	ldr	r3, [r3, #4]
10008a10:	7818      	ldrb	r0, [r3, #0]
10008a12:	466b      	mov	r3, sp
10008a14:	3307      	adds	r3, #7
10008a16:	2201      	movs	r2, #1
10008a18:	4d52      	ldr	r5, [pc, #328]	; (10008b64 <mpu_set_bypass+0x170>)
10008a1a:	47a8      	blx	r5
10008a1c:	2800      	cmp	r0, #0
10008a1e:	d000      	beq.n	10008a22 <mpu_set_bypass+0x2e>
10008a20:	e08a      	b.n	10008b38 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008a22:	466b      	mov	r3, sp
10008a24:	3307      	adds	r3, #7
10008a26:	781a      	ldrb	r2, [r3, #0]
10008a28:	2120      	movs	r1, #32
10008a2a:	438a      	bics	r2, r1
10008a2c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a2e:	4a4c      	ldr	r2, [pc, #304]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a30:	6811      	ldr	r1, [r2, #0]
10008a32:	7909      	ldrb	r1, [r1, #4]
10008a34:	6852      	ldr	r2, [r2, #4]
10008a36:	7810      	ldrb	r0, [r2, #0]
10008a38:	2201      	movs	r2, #1
10008a3a:	4d4b      	ldr	r5, [pc, #300]	; (10008b68 <mpu_set_bypass+0x174>)
10008a3c:	47a8      	blx	r5
10008a3e:	2800      	cmp	r0, #0
10008a40:	d17d      	bne.n	10008b3e <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008a42:	3003      	adds	r0, #3
10008a44:	4b49      	ldr	r3, [pc, #292]	; (10008b6c <mpu_set_bypass+0x178>)
10008a46:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008a48:	2202      	movs	r2, #2
10008a4a:	466b      	mov	r3, sp
10008a4c:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008a4e:	2322      	movs	r3, #34	; 0x22
10008a50:	4a43      	ldr	r2, [pc, #268]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a52:	5cd3      	ldrb	r3, [r2, r3]
10008a54:	2b00      	cmp	r3, #0
10008a56:	d002      	beq.n	10008a5e <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008a58:	2282      	movs	r2, #130	; 0x82
10008a5a:	466b      	mov	r3, sp
10008a5c:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008a5e:	2323      	movs	r3, #35	; 0x23
10008a60:	4a3f      	ldr	r2, [pc, #252]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a62:	5cd3      	ldrb	r3, [r2, r3]
10008a64:	2b00      	cmp	r3, #0
10008a66:	d005      	beq.n	10008a74 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a68:	466b      	mov	r3, sp
10008a6a:	1dda      	adds	r2, r3, #7
10008a6c:	79d9      	ldrb	r1, [r3, #7]
10008a6e:	2330      	movs	r3, #48	; 0x30
10008a70:	430b      	orrs	r3, r1
10008a72:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008a74:	4b3a      	ldr	r3, [pc, #232]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a76:	681a      	ldr	r2, [r3, #0]
10008a78:	7dd1      	ldrb	r1, [r2, #23]
10008a7a:	685b      	ldr	r3, [r3, #4]
10008a7c:	7818      	ldrb	r0, [r3, #0]
10008a7e:	466b      	mov	r3, sp
10008a80:	3307      	adds	r3, #7
10008a82:	2201      	movs	r2, #1
10008a84:	4d38      	ldr	r5, [pc, #224]	; (10008b68 <mpu_set_bypass+0x174>)
10008a86:	47a8      	blx	r5
10008a88:	2800      	cmp	r0, #0
10008a8a:	d04f      	beq.n	10008b2c <mpu_set_bypass+0x138>
10008a8c:	e05a      	b.n	10008b44 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a8e:	4b34      	ldr	r3, [pc, #208]	; (10008b60 <mpu_set_bypass+0x16c>)
10008a90:	681a      	ldr	r2, [r3, #0]
10008a92:	7911      	ldrb	r1, [r2, #4]
10008a94:	685b      	ldr	r3, [r3, #4]
10008a96:	7818      	ldrb	r0, [r3, #0]
10008a98:	466b      	mov	r3, sp
10008a9a:	3307      	adds	r3, #7
10008a9c:	2201      	movs	r2, #1
10008a9e:	4d31      	ldr	r5, [pc, #196]	; (10008b64 <mpu_set_bypass+0x170>)
10008aa0:	47a8      	blx	r5
10008aa2:	2800      	cmp	r0, #0
10008aa4:	d151      	bne.n	10008b4a <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008aa6:	4b2e      	ldr	r3, [pc, #184]	; (10008b60 <mpu_set_bypass+0x16c>)
10008aa8:	7a9b      	ldrb	r3, [r3, #10]
10008aaa:	07db      	lsls	r3, r3, #31
10008aac:	d506      	bpl.n	10008abc <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008aae:	466b      	mov	r3, sp
10008ab0:	1dda      	adds	r2, r3, #7
10008ab2:	79d9      	ldrb	r1, [r3, #7]
10008ab4:	2320      	movs	r3, #32
10008ab6:	430b      	orrs	r3, r1
10008ab8:	7013      	strb	r3, [r2, #0]
10008aba:	e005      	b.n	10008ac8 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008abc:	466b      	mov	r3, sp
10008abe:	1dda      	adds	r2, r3, #7
10008ac0:	79db      	ldrb	r3, [r3, #7]
10008ac2:	2120      	movs	r1, #32
10008ac4:	438b      	bics	r3, r1
10008ac6:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ac8:	4b25      	ldr	r3, [pc, #148]	; (10008b60 <mpu_set_bypass+0x16c>)
10008aca:	681a      	ldr	r2, [r3, #0]
10008acc:	7911      	ldrb	r1, [r2, #4]
10008ace:	685b      	ldr	r3, [r3, #4]
10008ad0:	7818      	ldrb	r0, [r3, #0]
10008ad2:	466b      	mov	r3, sp
10008ad4:	3307      	adds	r3, #7
10008ad6:	2201      	movs	r2, #1
10008ad8:	4d23      	ldr	r5, [pc, #140]	; (10008b68 <mpu_set_bypass+0x174>)
10008ada:	47a8      	blx	r5
10008adc:	2800      	cmp	r0, #0
10008ade:	d137      	bne.n	10008b50 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008ae0:	3003      	adds	r0, #3
10008ae2:	4b22      	ldr	r3, [pc, #136]	; (10008b6c <mpu_set_bypass+0x178>)
10008ae4:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008ae6:	2322      	movs	r3, #34	; 0x22
10008ae8:	4a1d      	ldr	r2, [pc, #116]	; (10008b60 <mpu_set_bypass+0x16c>)
10008aea:	5cd3      	ldrb	r3, [r2, r3]
10008aec:	2b00      	cmp	r3, #0
10008aee:	d003      	beq.n	10008af8 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008af0:	2280      	movs	r2, #128	; 0x80
10008af2:	466b      	mov	r3, sp
10008af4:	71da      	strb	r2, [r3, #7]
10008af6:	e002      	b.n	10008afe <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008af8:	2200      	movs	r2, #0
10008afa:	466b      	mov	r3, sp
10008afc:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008afe:	2323      	movs	r3, #35	; 0x23
10008b00:	4a17      	ldr	r2, [pc, #92]	; (10008b60 <mpu_set_bypass+0x16c>)
10008b02:	5cd3      	ldrb	r3, [r2, r3]
10008b04:	2b00      	cmp	r3, #0
10008b06:	d005      	beq.n	10008b14 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b08:	466b      	mov	r3, sp
10008b0a:	1dda      	adds	r2, r3, #7
10008b0c:	79d9      	ldrb	r1, [r3, #7]
10008b0e:	2330      	movs	r3, #48	; 0x30
10008b10:	430b      	orrs	r3, r1
10008b12:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b14:	4b12      	ldr	r3, [pc, #72]	; (10008b60 <mpu_set_bypass+0x16c>)
10008b16:	681a      	ldr	r2, [r3, #0]
10008b18:	7dd1      	ldrb	r1, [r2, #23]
10008b1a:	685b      	ldr	r3, [r3, #4]
10008b1c:	7818      	ldrb	r0, [r3, #0]
10008b1e:	466b      	mov	r3, sp
10008b20:	3307      	adds	r3, #7
10008b22:	2201      	movs	r2, #1
10008b24:	4d10      	ldr	r5, [pc, #64]	; (10008b68 <mpu_set_bypass+0x174>)
10008b26:	47a8      	blx	r5
10008b28:	2800      	cmp	r0, #0
10008b2a:	d114      	bne.n	10008b56 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008b2c:	4b0c      	ldr	r3, [pc, #48]	; (10008b60 <mpu_set_bypass+0x16c>)
10008b2e:	749c      	strb	r4, [r3, #18]
    return 0;
10008b30:	2000      	movs	r0, #0
10008b32:	e012      	b.n	10008b5a <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008b34:	2000      	movs	r0, #0
10008b36:	e010      	b.n	10008b5a <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b38:	2001      	movs	r0, #1
10008b3a:	4240      	negs	r0, r0
10008b3c:	e00d      	b.n	10008b5a <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b3e:	2001      	movs	r0, #1
10008b40:	4240      	negs	r0, r0
10008b42:	e00a      	b.n	10008b5a <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b44:	2001      	movs	r0, #1
10008b46:	4240      	negs	r0, r0
10008b48:	e007      	b.n	10008b5a <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b4a:	2001      	movs	r0, #1
10008b4c:	4240      	negs	r0, r0
10008b4e:	e004      	b.n	10008b5a <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b50:	2001      	movs	r0, #1
10008b52:	4240      	negs	r0, r0
10008b54:	e001      	b.n	10008b5a <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b56:	2001      	movs	r0, #1
10008b58:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008b5a:	b003      	add	sp, #12
10008b5c:	bd30      	pop	{r4, r5, pc}
10008b5e:	46c0      	nop			; (mov r8, r8)
10008b60:	100135c0 	.word	0x100135c0
10008b64:	100082e5 	.word	0x100082e5
10008b68:	10008381 	.word	0x10008381
10008b6c:	10008129 	.word	0x10008129

10008b70 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008b70:	b530      	push	{r4, r5, lr}
10008b72:	b083      	sub	sp, #12
10008b74:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008b76:	2323      	movs	r3, #35	; 0x23
10008b78:	4a1c      	ldr	r2, [pc, #112]	; (10008bec <mpu_set_int_latched+0x7c>)
10008b7a:	5cd3      	ldrb	r3, [r2, r3]
10008b7c:	4283      	cmp	r3, r0
10008b7e:	d02e      	beq.n	10008bde <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008b80:	2800      	cmp	r0, #0
10008b82:	d003      	beq.n	10008b8c <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b84:	2230      	movs	r2, #48	; 0x30
10008b86:	466b      	mov	r3, sp
10008b88:	71da      	strb	r2, [r3, #7]
10008b8a:	e002      	b.n	10008b92 <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008b8c:	2200      	movs	r2, #0
10008b8e:	466b      	mov	r3, sp
10008b90:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008b92:	4b16      	ldr	r3, [pc, #88]	; (10008bec <mpu_set_int_latched+0x7c>)
10008b94:	7c9b      	ldrb	r3, [r3, #18]
10008b96:	2b00      	cmp	r3, #0
10008b98:	d005      	beq.n	10008ba6 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008b9a:	466b      	mov	r3, sp
10008b9c:	1dda      	adds	r2, r3, #7
10008b9e:	79d9      	ldrb	r1, [r3, #7]
10008ba0:	2302      	movs	r3, #2
10008ba2:	430b      	orrs	r3, r1
10008ba4:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008ba6:	2322      	movs	r3, #34	; 0x22
10008ba8:	4a10      	ldr	r2, [pc, #64]	; (10008bec <mpu_set_int_latched+0x7c>)
10008baa:	5cd3      	ldrb	r3, [r2, r3]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d006      	beq.n	10008bbe <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008bb0:	466b      	mov	r3, sp
10008bb2:	1dda      	adds	r2, r3, #7
10008bb4:	79db      	ldrb	r3, [r3, #7]
10008bb6:	2180      	movs	r1, #128	; 0x80
10008bb8:	4249      	negs	r1, r1
10008bba:	430b      	orrs	r3, r1
10008bbc:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bbe:	4b0b      	ldr	r3, [pc, #44]	; (10008bec <mpu_set_int_latched+0x7c>)
10008bc0:	681a      	ldr	r2, [r3, #0]
10008bc2:	7dd1      	ldrb	r1, [r2, #23]
10008bc4:	685b      	ldr	r3, [r3, #4]
10008bc6:	7818      	ldrb	r0, [r3, #0]
10008bc8:	466b      	mov	r3, sp
10008bca:	3307      	adds	r3, #7
10008bcc:	2201      	movs	r2, #1
10008bce:	4d08      	ldr	r5, [pc, #32]	; (10008bf0 <mpu_set_int_latched+0x80>)
10008bd0:	47a8      	blx	r5
10008bd2:	2800      	cmp	r0, #0
10008bd4:	d105      	bne.n	10008be2 <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008bd6:	2323      	movs	r3, #35	; 0x23
10008bd8:	4a04      	ldr	r2, [pc, #16]	; (10008bec <mpu_set_int_latched+0x7c>)
10008bda:	54d4      	strb	r4, [r2, r3]
    return 0;
10008bdc:	e003      	b.n	10008be6 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008bde:	2000      	movs	r0, #0
10008be0:	e001      	b.n	10008be6 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008be2:	2001      	movs	r0, #1
10008be4:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008be6:	b003      	add	sp, #12
10008be8:	bd30      	pop	{r4, r5, pc}
10008bea:	46c0      	nop			; (mov r8, r8)
10008bec:	100135c0 	.word	0x100135c0
10008bf0:	10008381 	.word	0x10008381

10008bf4 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008bf4:	b510      	push	{r4, lr}
10008bf6:	b082      	sub	sp, #8
10008bf8:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008bfa:	2c28      	cmp	r4, #40	; 0x28
10008bfc:	d878      	bhi.n	10008cf0 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008bfe:	2800      	cmp	r0, #0
10008c00:	d115      	bne.n	10008c2e <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008c02:	2000      	movs	r0, #0
10008c04:	4b44      	ldr	r3, [pc, #272]	; (10008d18 <mpu_lp_accel_mode+0x124>)
10008c06:	4798      	blx	r3
        tmp[0] = 0;
10008c08:	ab01      	add	r3, sp, #4
10008c0a:	2200      	movs	r2, #0
10008c0c:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008c0e:	3207      	adds	r2, #7
10008c10:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008c12:	4a42      	ldr	r2, [pc, #264]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008c14:	6811      	ldr	r1, [r2, #0]
10008c16:	7d49      	ldrb	r1, [r1, #21]
10008c18:	6852      	ldr	r2, [r2, #4]
10008c1a:	7810      	ldrb	r0, [r2, #0]
10008c1c:	2202      	movs	r2, #2
10008c1e:	4c40      	ldr	r4, [pc, #256]	; (10008d20 <mpu_lp_accel_mode+0x12c>)
10008c20:	47a0      	blx	r4
10008c22:	1e04      	subs	r4, r0, #0
10008c24:	d167      	bne.n	10008cf6 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c26:	2200      	movs	r2, #0
10008c28:	4b3c      	ldr	r3, [pc, #240]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008c2a:	751a      	strb	r2, [r3, #20]
        return 0;
10008c2c:	e071      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008c2e:	2001      	movs	r0, #1
10008c30:	4b39      	ldr	r3, [pc, #228]	; (10008d18 <mpu_lp_accel_mode+0x124>)
10008c32:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008c34:	2c01      	cmp	r4, #1
10008c36:	d103      	bne.n	10008c40 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008c38:	2202      	movs	r2, #2
10008c3a:	ab01      	add	r3, sp, #4
10008c3c:	701a      	strb	r2, [r3, #0]
10008c3e:	e01a      	b.n	10008c76 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008c40:	2c02      	cmp	r4, #2
10008c42:	d103      	bne.n	10008c4c <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008c44:	2203      	movs	r2, #3
10008c46:	ab01      	add	r3, sp, #4
10008c48:	701a      	strb	r2, [r3, #0]
10008c4a:	e014      	b.n	10008c76 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008c4c:	2c05      	cmp	r4, #5
10008c4e:	d803      	bhi.n	10008c58 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008c50:	2204      	movs	r2, #4
10008c52:	ab01      	add	r3, sp, #4
10008c54:	701a      	strb	r2, [r3, #0]
10008c56:	e00e      	b.n	10008c76 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008c58:	2c0a      	cmp	r4, #10
10008c5a:	d803      	bhi.n	10008c64 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008c5c:	2205      	movs	r2, #5
10008c5e:	ab01      	add	r3, sp, #4
10008c60:	701a      	strb	r2, [r3, #0]
10008c62:	e008      	b.n	10008c76 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008c64:	2c14      	cmp	r4, #20
10008c66:	d803      	bhi.n	10008c70 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008c68:	2206      	movs	r2, #6
10008c6a:	ab01      	add	r3, sp, #4
10008c6c:	701a      	strb	r2, [r3, #0]
10008c6e:	e002      	b.n	10008c76 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008c70:	2207      	movs	r2, #7
10008c72:	ab01      	add	r3, sp, #4
10008c74:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008c76:	4b29      	ldr	r3, [pc, #164]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008c78:	681a      	ldr	r2, [r3, #0]
10008c7a:	7a51      	ldrb	r1, [r2, #9]
10008c7c:	685b      	ldr	r3, [r3, #4]
10008c7e:	7818      	ldrb	r0, [r3, #0]
10008c80:	ab01      	add	r3, sp, #4
10008c82:	2201      	movs	r2, #1
10008c84:	4c26      	ldr	r4, [pc, #152]	; (10008d20 <mpu_lp_accel_mode+0x12c>)
10008c86:	47a0      	blx	r4
10008c88:	2800      	cmp	r0, #0
10008c8a:	d137      	bne.n	10008cfc <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008c8c:	4b23      	ldr	r3, [pc, #140]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008c8e:	681a      	ldr	r2, [r3, #0]
10008c90:	7a11      	ldrb	r1, [r2, #8]
10008c92:	685b      	ldr	r3, [r3, #4]
10008c94:	7818      	ldrb	r0, [r3, #0]
10008c96:	ab01      	add	r3, sp, #4
10008c98:	2201      	movs	r2, #1
10008c9a:	4c22      	ldr	r4, [pc, #136]	; (10008d24 <mpu_lp_accel_mode+0x130>)
10008c9c:	47a0      	blx	r4
10008c9e:	2800      	cmp	r0, #0
10008ca0:	d12f      	bne.n	10008d02 <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008ca2:	ab01      	add	r3, sp, #4
10008ca4:	7819      	ldrb	r1, [r3, #0]
10008ca6:	2208      	movs	r2, #8
10008ca8:	430a      	orrs	r2, r1
10008caa:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008cac:	4a1b      	ldr	r2, [pc, #108]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008cae:	6811      	ldr	r1, [r2, #0]
10008cb0:	7a09      	ldrb	r1, [r1, #8]
10008cb2:	6852      	ldr	r2, [r2, #4]
10008cb4:	7810      	ldrb	r0, [r2, #0]
10008cb6:	2201      	movs	r2, #1
10008cb8:	4c19      	ldr	r4, [pc, #100]	; (10008d20 <mpu_lp_accel_mode+0x12c>)
10008cba:	47a0      	blx	r4
10008cbc:	2800      	cmp	r0, #0
10008cbe:	d123      	bne.n	10008d08 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008cc0:	ab01      	add	r3, sp, #4
10008cc2:	2220      	movs	r2, #32
10008cc4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008cc6:	4a15      	ldr	r2, [pc, #84]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008cc8:	6811      	ldr	r1, [r2, #0]
10008cca:	7d49      	ldrb	r1, [r1, #21]
10008ccc:	6852      	ldr	r2, [r2, #4]
10008cce:	7810      	ldrb	r0, [r2, #0]
10008cd0:	2201      	movs	r2, #1
10008cd2:	4c13      	ldr	r4, [pc, #76]	; (10008d20 <mpu_lp_accel_mode+0x12c>)
10008cd4:	47a0      	blx	r4
10008cd6:	1e04      	subs	r4, r0, #0
10008cd8:	d119      	bne.n	10008d0e <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008cda:	4b10      	ldr	r3, [pc, #64]	; (10008d1c <mpu_lp_accel_mode+0x128>)
10008cdc:	2208      	movs	r2, #8
10008cde:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008ce0:	2200      	movs	r2, #0
10008ce2:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008ce4:	3201      	adds	r2, #1
10008ce6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008ce8:	2000      	movs	r0, #0
10008cea:	4b0f      	ldr	r3, [pc, #60]	; (10008d28 <mpu_lp_accel_mode+0x134>)
10008cec:	4798      	blx	r3

    return 0;
10008cee:	e010      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008cf0:	2401      	movs	r4, #1
10008cf2:	4264      	negs	r4, r4
10008cf4:	e00d      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008cf6:	2401      	movs	r4, #1
10008cf8:	4264      	negs	r4, r4
10008cfa:	e00a      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008cfc:	2401      	movs	r4, #1
10008cfe:	4264      	negs	r4, r4
10008d00:	e007      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008d02:	2401      	movs	r4, #1
10008d04:	4264      	negs	r4, r4
10008d06:	e004      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008d08:	2401      	movs	r4, #1
10008d0a:	4264      	negs	r4, r4
10008d0c:	e001      	b.n	10008d12 <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008d0e:	2401      	movs	r4, #1
10008d10:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008d12:	0020      	movs	r0, r4
10008d14:	b002      	add	sp, #8
10008d16:	bd10      	pop	{r4, pc}
10008d18:	10008b71 	.word	0x10008b71
10008d1c:	100135c0 	.word	0x100135c0
10008d20:	10008381 	.word	0x10008381
10008d24:	100082e5 	.word	0x100082e5
10008d28:	10008989 	.word	0x10008989

10008d2c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008d2c:	b530      	push	{r4, r5, lr}
10008d2e:	b083      	sub	sp, #12
10008d30:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d32:	4b2c      	ldr	r3, [pc, #176]	; (10008de4 <mpu_set_sample_rate+0xb8>)
10008d34:	7a9b      	ldrb	r3, [r3, #10]
10008d36:	2b00      	cmp	r3, #0
10008d38:	d048      	beq.n	10008dcc <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008d3a:	2324      	movs	r3, #36	; 0x24
10008d3c:	4a29      	ldr	r2, [pc, #164]	; (10008de4 <mpu_set_sample_rate+0xb8>)
10008d3e:	5cd3      	ldrb	r3, [r2, r3]
10008d40:	2b00      	cmp	r3, #0
10008d42:	d146      	bne.n	10008dd2 <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d44:	7d13      	ldrb	r3, [r2, #20]
10008d46:	2b00      	cmp	r3, #0
10008d48:	d00a      	beq.n	10008d60 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008d4a:	1e43      	subs	r3, r0, #1
10008d4c:	b29b      	uxth	r3, r3
10008d4e:	2b27      	cmp	r3, #39	; 0x27
10008d50:	d803      	bhi.n	10008d5a <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d52:	4b25      	ldr	r3, [pc, #148]	; (10008de8 <mpu_set_sample_rate+0xbc>)
10008d54:	4798      	blx	r3
                return 0;
10008d56:	2400      	movs	r4, #0
10008d58:	e040      	b.n	10008ddc <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008d5a:	2000      	movs	r0, #0
10008d5c:	4b22      	ldr	r3, [pc, #136]	; (10008de8 <mpu_set_sample_rate+0xbc>)
10008d5e:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008d60:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008d62:	2c03      	cmp	r4, #3
10008d64:	d907      	bls.n	10008d76 <mpu_set_sample_rate+0x4a>
10008d66:	1c21      	adds	r1, r4, #0
10008d68:	23fa      	movs	r3, #250	; 0xfa
10008d6a:	009b      	lsls	r3, r3, #2
10008d6c:	429c      	cmp	r4, r3
10008d6e:	d901      	bls.n	10008d74 <mpu_set_sample_rate+0x48>
10008d70:	4b1e      	ldr	r3, [pc, #120]	; (10008dec <mpu_set_sample_rate+0xc0>)
10008d72:	8819      	ldrh	r1, [r3, #0]
10008d74:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008d76:	466b      	mov	r3, sp
10008d78:	1ddc      	adds	r4, r3, #7
10008d7a:	20fa      	movs	r0, #250	; 0xfa
10008d7c:	0080      	lsls	r0, r0, #2
10008d7e:	4b1c      	ldr	r3, [pc, #112]	; (10008df0 <mpu_set_sample_rate+0xc4>)
10008d80:	4798      	blx	r3
10008d82:	3801      	subs	r0, #1
10008d84:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008d86:	4b17      	ldr	r3, [pc, #92]	; (10008de4 <mpu_set_sample_rate+0xb8>)
10008d88:	681a      	ldr	r2, [r3, #0]
10008d8a:	7851      	ldrb	r1, [r2, #1]
10008d8c:	685b      	ldr	r3, [r3, #4]
10008d8e:	7818      	ldrb	r0, [r3, #0]
10008d90:	0023      	movs	r3, r4
10008d92:	2201      	movs	r2, #1
10008d94:	4c17      	ldr	r4, [pc, #92]	; (10008df4 <mpu_set_sample_rate+0xc8>)
10008d96:	47a0      	blx	r4
10008d98:	1e04      	subs	r4, r0, #0
10008d9a:	d11d      	bne.n	10008dd8 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008d9c:	4d11      	ldr	r5, [pc, #68]	; (10008de4 <mpu_set_sample_rate+0xb8>)
10008d9e:	466b      	mov	r3, sp
10008da0:	79d9      	ldrb	r1, [r3, #7]
10008da2:	3101      	adds	r1, #1
10008da4:	20fa      	movs	r0, #250	; 0xfa
10008da6:	0080      	lsls	r0, r0, #2
10008da8:	4b11      	ldr	r3, [pc, #68]	; (10008df0 <mpu_set_sample_rate+0xc4>)
10008daa:	4798      	blx	r3
10008dac:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008dae:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008db0:	1c18      	adds	r0, r3, #0
10008db2:	b29b      	uxth	r3, r3
10008db4:	2b64      	cmp	r3, #100	; 0x64
10008db6:	d900      	bls.n	10008dba <mpu_set_sample_rate+0x8e>
10008db8:	2064      	movs	r0, #100	; 0x64
10008dba:	b280      	uxth	r0, r0
10008dbc:	4b0e      	ldr	r3, [pc, #56]	; (10008df8 <mpu_set_sample_rate+0xcc>)
10008dbe:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008dc0:	4b08      	ldr	r3, [pc, #32]	; (10008de4 <mpu_set_sample_rate+0xb8>)
10008dc2:	89d8      	ldrh	r0, [r3, #14]
10008dc4:	0840      	lsrs	r0, r0, #1
10008dc6:	4b0d      	ldr	r3, [pc, #52]	; (10008dfc <mpu_set_sample_rate+0xd0>)
10008dc8:	4798      	blx	r3
        return 0;
10008dca:	e007      	b.n	10008ddc <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008dcc:	2401      	movs	r4, #1
10008dce:	4264      	negs	r4, r4
10008dd0:	e004      	b.n	10008ddc <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008dd2:	2401      	movs	r4, #1
10008dd4:	4264      	negs	r4, r4
10008dd6:	e001      	b.n	10008ddc <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008dd8:	2401      	movs	r4, #1
10008dda:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008ddc:	0020      	movs	r0, r4
10008dde:	b003      	add	sp, #12
10008de0:	bd30      	pop	{r4, r5, pc}
10008de2:	46c0      	nop			; (mov r8, r8)
10008de4:	100135c0 	.word	0x100135c0
10008de8:	10008bf5 	.word	0x10008bf5
10008dec:	10012508 	.word	0x10012508
10008df0:	1000f6ed 	.word	0x1000f6ed
10008df4:	10008381 	.word	0x10008381
10008df8:	10008911 	.word	0x10008911
10008dfc:	10008839 	.word	0x10008839

10008e00 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e00:	b530      	push	{r4, r5, lr}
10008e02:	b083      	sub	sp, #12
10008e04:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e06:	2370      	movs	r3, #112	; 0x70
10008e08:	4203      	tst	r3, r0
10008e0a:	d003      	beq.n	10008e14 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008e0c:	2201      	movs	r2, #1
10008e0e:	466b      	mov	r3, sp
10008e10:	71da      	strb	r2, [r3, #7]
10008e12:	e015      	b.n	10008e40 <mpu_set_sensors+0x40>
    else if (sensors)
10008e14:	2800      	cmp	r0, #0
10008e16:	d003      	beq.n	10008e20 <mpu_set_sensors+0x20>
        data = 0;
10008e18:	2200      	movs	r2, #0
10008e1a:	466b      	mov	r3, sp
10008e1c:	71da      	strb	r2, [r3, #7]
10008e1e:	e00f      	b.n	10008e40 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008e20:	466b      	mov	r3, sp
10008e22:	3307      	adds	r3, #7
10008e24:	2240      	movs	r2, #64	; 0x40
10008e26:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e28:	4a6a      	ldr	r2, [pc, #424]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008e2a:	6811      	ldr	r1, [r2, #0]
10008e2c:	7d49      	ldrb	r1, [r1, #21]
10008e2e:	6852      	ldr	r2, [r2, #4]
10008e30:	7810      	ldrb	r0, [r2, #0]
10008e32:	2201      	movs	r2, #1
10008e34:	4d68      	ldr	r5, [pc, #416]	; (10008fd8 <mpu_set_sensors+0x1d8>)
10008e36:	47a8      	blx	r5
10008e38:	2800      	cmp	r0, #0
10008e3a:	d100      	bne.n	10008e3e <mpu_set_sensors+0x3e>
10008e3c:	e0b2      	b.n	10008fa4 <mpu_set_sensors+0x1a4>
10008e3e:	e00b      	b.n	10008e58 <mpu_set_sensors+0x58>
10008e40:	4b64      	ldr	r3, [pc, #400]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008e42:	681a      	ldr	r2, [r3, #0]
10008e44:	7d51      	ldrb	r1, [r2, #21]
10008e46:	685b      	ldr	r3, [r3, #4]
10008e48:	7818      	ldrb	r0, [r3, #0]
10008e4a:	466b      	mov	r3, sp
10008e4c:	3307      	adds	r3, #7
10008e4e:	2201      	movs	r2, #1
10008e50:	4d61      	ldr	r5, [pc, #388]	; (10008fd8 <mpu_set_sensors+0x1d8>)
10008e52:	47a8      	blx	r5
10008e54:	2800      	cmp	r0, #0
10008e56:	d005      	beq.n	10008e64 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008e58:	2200      	movs	r2, #0
10008e5a:	4b5e      	ldr	r3, [pc, #376]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008e5c:	729a      	strb	r2, [r3, #10]
        return -1;
10008e5e:	2501      	movs	r5, #1
10008e60:	426d      	negs	r5, r5
10008e62:	e0b4      	b.n	10008fce <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008e64:	466b      	mov	r3, sp
10008e66:	1dda      	adds	r2, r3, #7
10008e68:	79db      	ldrb	r3, [r3, #7]
10008e6a:	2140      	movs	r1, #64	; 0x40
10008e6c:	438b      	bics	r3, r1
10008e6e:	4959      	ldr	r1, [pc, #356]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008e70:	730b      	strb	r3, [r1, #12]

    data = 0;
10008e72:	2300      	movs	r3, #0
10008e74:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008e76:	0663      	lsls	r3, r4, #25
10008e78:	d402      	bmi.n	10008e80 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008e7a:	2204      	movs	r2, #4
10008e7c:	466b      	mov	r3, sp
10008e7e:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008e80:	06a3      	lsls	r3, r4, #26
10008e82:	d405      	bmi.n	10008e90 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008e84:	466b      	mov	r3, sp
10008e86:	1dda      	adds	r2, r3, #7
10008e88:	79d9      	ldrb	r1, [r3, #7]
10008e8a:	2302      	movs	r3, #2
10008e8c:	430b      	orrs	r3, r1
10008e8e:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008e90:	06e3      	lsls	r3, r4, #27
10008e92:	d405      	bmi.n	10008ea0 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008e94:	466b      	mov	r3, sp
10008e96:	1dda      	adds	r2, r3, #7
10008e98:	79d9      	ldrb	r1, [r3, #7]
10008e9a:	2301      	movs	r3, #1
10008e9c:	430b      	orrs	r3, r1
10008e9e:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008ea0:	0723      	lsls	r3, r4, #28
10008ea2:	d405      	bmi.n	10008eb0 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008ea4:	466b      	mov	r3, sp
10008ea6:	1dda      	adds	r2, r3, #7
10008ea8:	79d9      	ldrb	r1, [r3, #7]
10008eaa:	2338      	movs	r3, #56	; 0x38
10008eac:	430b      	orrs	r3, r1
10008eae:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008eb0:	4b48      	ldr	r3, [pc, #288]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008eb2:	681a      	ldr	r2, [r3, #0]
10008eb4:	7d91      	ldrb	r1, [r2, #22]
10008eb6:	685b      	ldr	r3, [r3, #4]
10008eb8:	7818      	ldrb	r0, [r3, #0]
10008eba:	466b      	mov	r3, sp
10008ebc:	3307      	adds	r3, #7
10008ebe:	2201      	movs	r2, #1
10008ec0:	4d45      	ldr	r5, [pc, #276]	; (10008fd8 <mpu_set_sensors+0x1d8>)
10008ec2:	47a8      	blx	r5
10008ec4:	2800      	cmp	r0, #0
10008ec6:	d005      	beq.n	10008ed4 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008ec8:	2200      	movs	r2, #0
10008eca:	4b42      	ldr	r3, [pc, #264]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008ecc:	729a      	strb	r2, [r3, #10]
        return -1;
10008ece:	2501      	movs	r5, #1
10008ed0:	426d      	negs	r5, r5
10008ed2:	e07c      	b.n	10008fce <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008ed4:	2308      	movs	r3, #8
10008ed6:	0022      	movs	r2, r4
10008ed8:	439a      	bics	r2, r3
10008eda:	d06b      	beq.n	10008fb4 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008edc:	2000      	movs	r0, #0
10008ede:	4b3f      	ldr	r3, [pc, #252]	; (10008fdc <mpu_set_sensors+0x1dc>)
10008ee0:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ee2:	4b3c      	ldr	r3, [pc, #240]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008ee4:	681a      	ldr	r2, [r3, #0]
10008ee6:	7911      	ldrb	r1, [r2, #4]
10008ee8:	685b      	ldr	r3, [r3, #4]
10008eea:	7818      	ldrb	r0, [r3, #0]
10008eec:	466b      	mov	r3, sp
10008eee:	3306      	adds	r3, #6
10008ef0:	2201      	movs	r2, #1
10008ef2:	4d3b      	ldr	r5, [pc, #236]	; (10008fe0 <mpu_set_sensors+0x1e0>)
10008ef4:	47a8      	blx	r5
10008ef6:	2800      	cmp	r0, #0
10008ef8:	d148      	bne.n	10008f8c <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008efa:	07e3      	lsls	r3, r4, #31
10008efc:	d509      	bpl.n	10008f12 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008efe:	2211      	movs	r2, #17
10008f00:	466b      	mov	r3, sp
10008f02:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f04:	466b      	mov	r3, sp
10008f06:	1d9a      	adds	r2, r3, #6
10008f08:	7999      	ldrb	r1, [r3, #6]
10008f0a:	2320      	movs	r3, #32
10008f0c:	430b      	orrs	r3, r1
10008f0e:	7013      	strb	r3, [r2, #0]
10008f10:	e008      	b.n	10008f24 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008f12:	2210      	movs	r2, #16
10008f14:	466b      	mov	r3, sp
10008f16:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f18:	466b      	mov	r3, sp
10008f1a:	1d9a      	adds	r2, r3, #6
10008f1c:	799b      	ldrb	r3, [r3, #6]
10008f1e:	2120      	movs	r1, #32
10008f20:	438b      	bics	r3, r1
10008f22:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f24:	2324      	movs	r3, #36	; 0x24
10008f26:	4a2b      	ldr	r2, [pc, #172]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008f28:	5cd3      	ldrb	r3, [r2, r3]
10008f2a:	2b00      	cmp	r3, #0
10008f2c:	d007      	beq.n	10008f3e <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008f2e:	466b      	mov	r3, sp
10008f30:	1d9a      	adds	r2, r3, #6
10008f32:	799b      	ldrb	r3, [r3, #6]
10008f34:	2180      	movs	r1, #128	; 0x80
10008f36:	4249      	negs	r1, r1
10008f38:	430b      	orrs	r3, r1
10008f3a:	7013      	strb	r3, [r2, #0]
10008f3c:	e005      	b.n	10008f4a <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008f3e:	466b      	mov	r3, sp
10008f40:	1d9a      	adds	r2, r3, #6
10008f42:	799b      	ldrb	r3, [r3, #6]
10008f44:	217f      	movs	r1, #127	; 0x7f
10008f46:	400b      	ands	r3, r1
10008f48:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f4a:	4b22      	ldr	r3, [pc, #136]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008f4c:	2226      	movs	r2, #38	; 0x26
10008f4e:	6819      	ldr	r1, [r3, #0]
10008f50:	5c89      	ldrb	r1, [r1, r2]
10008f52:	685b      	ldr	r3, [r3, #4]
10008f54:	7818      	ldrb	r0, [r3, #0]
10008f56:	466b      	mov	r3, sp
10008f58:	3307      	adds	r3, #7
10008f5a:	3a25      	subs	r2, #37	; 0x25
10008f5c:	4d1e      	ldr	r5, [pc, #120]	; (10008fd8 <mpu_set_sensors+0x1d8>)
10008f5e:	47a8      	blx	r5
10008f60:	2800      	cmp	r0, #0
10008f62:	d116      	bne.n	10008f92 <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f64:	4b1b      	ldr	r3, [pc, #108]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008f66:	681a      	ldr	r2, [r3, #0]
10008f68:	7911      	ldrb	r1, [r2, #4]
10008f6a:	685b      	ldr	r3, [r3, #4]
10008f6c:	7818      	ldrb	r0, [r3, #0]
10008f6e:	466b      	mov	r3, sp
10008f70:	3306      	adds	r3, #6
10008f72:	2201      	movs	r2, #1
10008f74:	4d18      	ldr	r5, [pc, #96]	; (10008fd8 <mpu_set_sensors+0x1d8>)
10008f76:	47a8      	blx	r5
10008f78:	1e05      	subs	r5, r0, #0
10008f7a:	d10d      	bne.n	10008f98 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f7c:	4b15      	ldr	r3, [pc, #84]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008f7e:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008f80:	2200      	movs	r2, #0
10008f82:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008f84:	2032      	movs	r0, #50	; 0x32
10008f86:	4b17      	ldr	r3, [pc, #92]	; (10008fe4 <mpu_set_sensors+0x1e4>)
10008f88:	4798      	blx	r3
    return 0;
10008f8a:	e020      	b.n	10008fce <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f8c:	2501      	movs	r5, #1
10008f8e:	426d      	negs	r5, r5
10008f90:	e01d      	b.n	10008fce <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
10008f92:	2501      	movs	r5, #1
10008f94:	426d      	negs	r5, r5
10008f96:	e01a      	b.n	10008fce <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f98:	2501      	movs	r5, #1
10008f9a:	426d      	negs	r5, r5
10008f9c:	e017      	b.n	10008fce <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f9e:	2501      	movs	r5, #1
10008fa0:	426d      	negs	r5, r5
10008fa2:	e014      	b.n	10008fce <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fa4:	466b      	mov	r3, sp
10008fa6:	3307      	adds	r3, #7
10008fa8:	781b      	ldrb	r3, [r3, #0]
10008faa:	2240      	movs	r2, #64	; 0x40
10008fac:	4393      	bics	r3, r2
10008fae:	4a09      	ldr	r2, [pc, #36]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008fb0:	7313      	strb	r3, [r2, #12]
10008fb2:	e762      	b.n	10008e7a <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008fb4:	4b07      	ldr	r3, [pc, #28]	; (10008fd4 <mpu_set_sensors+0x1d4>)
10008fb6:	681a      	ldr	r2, [r3, #0]
10008fb8:	7911      	ldrb	r1, [r2, #4]
10008fba:	685b      	ldr	r3, [r3, #4]
10008fbc:	7818      	ldrb	r0, [r3, #0]
10008fbe:	466b      	mov	r3, sp
10008fc0:	3306      	adds	r3, #6
10008fc2:	2201      	movs	r2, #1
10008fc4:	4d06      	ldr	r5, [pc, #24]	; (10008fe0 <mpu_set_sensors+0x1e0>)
10008fc6:	47a8      	blx	r5
10008fc8:	2800      	cmp	r0, #0
10008fca:	d0a2      	beq.n	10008f12 <mpu_set_sensors+0x112>
10008fcc:	e7e7      	b.n	10008f9e <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10008fce:	0028      	movs	r0, r5
10008fd0:	b003      	add	sp, #12
10008fd2:	bd30      	pop	{r4, r5, pc}
10008fd4:	100135c0 	.word	0x100135c0
10008fd8:	10008381 	.word	0x10008381
10008fdc:	10008b71 	.word	0x10008b71
10008fe0:	100082e5 	.word	0x100082e5
10008fe4:	10008129 	.word	0x10008129

10008fe8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008fe8:	b570      	push	{r4, r5, r6, lr}
10008fea:	b084      	sub	sp, #16
10008fec:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008fee:	ab02      	add	r3, sp, #8
10008ff0:	2280      	movs	r2, #128	; 0x80
10008ff2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008ff4:	4abc      	ldr	r2, [pc, #752]	; (100092e8 <mpu_init+0x300>)
10008ff6:	6811      	ldr	r1, [r2, #0]
10008ff8:	7d49      	ldrb	r1, [r1, #21]
10008ffa:	6852      	ldr	r2, [r2, #4]
10008ffc:	7810      	ldrb	r0, [r2, #0]
10008ffe:	2201      	movs	r2, #1
10009000:	4cba      	ldr	r4, [pc, #744]	; (100092ec <mpu_init+0x304>)
10009002:	47a0      	blx	r4
10009004:	2800      	cmp	r0, #0
10009006:	d000      	beq.n	1000900a <mpu_init+0x22>
10009008:	e150      	b.n	100092ac <mpu_init+0x2c4>
        return -1;
    delay_ms(100);
1000900a:	3064      	adds	r0, #100	; 0x64
1000900c:	4bb8      	ldr	r3, [pc, #736]	; (100092f0 <mpu_init+0x308>)
1000900e:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009010:	ab02      	add	r3, sp, #8
10009012:	2200      	movs	r2, #0
10009014:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009016:	4ab4      	ldr	r2, [pc, #720]	; (100092e8 <mpu_init+0x300>)
10009018:	6811      	ldr	r1, [r2, #0]
1000901a:	7d49      	ldrb	r1, [r1, #21]
1000901c:	6852      	ldr	r2, [r2, #4]
1000901e:	7810      	ldrb	r0, [r2, #0]
10009020:	2201      	movs	r2, #1
10009022:	4cb2      	ldr	r4, [pc, #712]	; (100092ec <mpu_init+0x304>)
10009024:	47a0      	blx	r4
10009026:	2800      	cmp	r0, #0
10009028:	d000      	beq.n	1000902c <mpu_init+0x44>
1000902a:	e142      	b.n	100092b2 <mpu_init+0x2ca>
        return -1;

   st.chip_cfg.accel_half = 0;
1000902c:	4aae      	ldr	r2, [pc, #696]	; (100092e8 <mpu_init+0x300>)
1000902e:	2300      	movs	r3, #0
10009030:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009032:	ab02      	add	r3, sp, #8
10009034:	2140      	movs	r1, #64	; 0x40
10009036:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009038:	6811      	ldr	r1, [r2, #0]
1000903a:	7a09      	ldrb	r1, [r1, #8]
1000903c:	6852      	ldr	r2, [r2, #4]
1000903e:	7810      	ldrb	r0, [r2, #0]
10009040:	2201      	movs	r2, #1
10009042:	4caa      	ldr	r4, [pc, #680]	; (100092ec <mpu_init+0x304>)
10009044:	47a0      	blx	r4
10009046:	2800      	cmp	r0, #0
10009048:	d000      	beq.n	1000904c <mpu_init+0x64>
1000904a:	e135      	b.n	100092b8 <mpu_init+0x2d0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000904c:	4ca6      	ldr	r4, [pc, #664]	; (100092e8 <mpu_init+0x300>)
1000904e:	23ff      	movs	r3, #255	; 0xff
10009050:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009052:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009054:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009056:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009058:	2201      	movs	r2, #1
1000905a:	4252      	negs	r2, r2
1000905c:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000905e:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009060:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009062:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10009064:	3bfe      	subs	r3, #254	; 0xfe
10009066:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009068:	2500      	movs	r5, #0
1000906a:	3321      	adds	r3, #33	; 0x21
1000906c:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
1000906e:	3301      	adds	r3, #1
10009070:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009072:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009074:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009076:	0020      	movs	r0, r4
10009078:	3016      	adds	r0, #22
1000907a:	320d      	adds	r2, #13
1000907c:	2100      	movs	r1, #0
1000907e:	4b9d      	ldr	r3, [pc, #628]	; (100092f4 <mpu_init+0x30c>)
10009080:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009082:	2324      	movs	r3, #36	; 0x24
10009084:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009086:	3301      	adds	r3, #1
10009088:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
1000908a:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1000908c:	20fa      	movs	r0, #250	; 0xfa
1000908e:	00c0      	lsls	r0, r0, #3
10009090:	4b99      	ldr	r3, [pc, #612]	; (100092f8 <mpu_init+0x310>)
10009092:	4798      	blx	r3
10009094:	2800      	cmp	r0, #0
10009096:	d000      	beq.n	1000909a <mpu_init+0xb2>
10009098:	e111      	b.n	100092be <mpu_init+0x2d6>
        return -1;
    if (mpu_set_accel_fsr(2))
1000909a:	3002      	adds	r0, #2
1000909c:	4b97      	ldr	r3, [pc, #604]	; (100092fc <mpu_init+0x314>)
1000909e:	4798      	blx	r3
100090a0:	2800      	cmp	r0, #0
100090a2:	d000      	beq.n	100090a6 <mpu_init+0xbe>
100090a4:	e10e      	b.n	100092c4 <mpu_init+0x2dc>
        return -1;
    if (mpu_set_lpf(42))
100090a6:	302a      	adds	r0, #42	; 0x2a
100090a8:	4b95      	ldr	r3, [pc, #596]	; (10009300 <mpu_init+0x318>)
100090aa:	4798      	blx	r3
100090ac:	2800      	cmp	r0, #0
100090ae:	d000      	beq.n	100090b2 <mpu_init+0xca>
100090b0:	e10b      	b.n	100092ca <mpu_init+0x2e2>
        return -1;
    if (mpu_set_sample_rate(50))
100090b2:	3032      	adds	r0, #50	; 0x32
100090b4:	4b93      	ldr	r3, [pc, #588]	; (10009304 <mpu_init+0x31c>)
100090b6:	4798      	blx	r3
100090b8:	2800      	cmp	r0, #0
100090ba:	d000      	beq.n	100090be <mpu_init+0xd6>
100090bc:	e108      	b.n	100092d0 <mpu_init+0x2e8>
        return -1;
    if (mpu_configure_fifo(0))
100090be:	4b92      	ldr	r3, [pc, #584]	; (10009308 <mpu_init+0x320>)
100090c0:	4798      	blx	r3
100090c2:	2800      	cmp	r0, #0
100090c4:	d000      	beq.n	100090c8 <mpu_init+0xe0>
100090c6:	e106      	b.n	100092d6 <mpu_init+0x2ee>
        return -1;

    if (int_param)
100090c8:	2e00      	cmp	r6, #0
100090ca:	d004      	beq.n	100090d6 <mpu_init+0xee>
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
100090cc:	2202      	movs	r2, #2
100090ce:	498f      	ldr	r1, [pc, #572]	; (1000930c <mpu_init+0x324>)
100090d0:	301d      	adds	r0, #29
100090d2:	4b8f      	ldr	r3, [pc, #572]	; (10009310 <mpu_init+0x328>)
100090d4:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100090d6:	2001      	movs	r0, #1
100090d8:	4b8e      	ldr	r3, [pc, #568]	; (10009314 <mpu_init+0x32c>)
100090da:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090dc:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100090de:	4d8e      	ldr	r5, [pc, #568]	; (10009318 <mpu_init+0x330>)
100090e0:	ab01      	add	r3, sp, #4
100090e2:	2201      	movs	r2, #1
100090e4:	2100      	movs	r1, #0
100090e6:	0020      	movs	r0, r4
100090e8:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100090ea:	2800      	cmp	r0, #0
100090ec:	d103      	bne.n	100090f6 <mpu_init+0x10e>
100090ee:	466b      	mov	r3, sp
100090f0:	791b      	ldrb	r3, [r3, #4]
100090f2:	2b48      	cmp	r3, #72	; 0x48
100090f4:	d004      	beq.n	10009100 <mpu_init+0x118>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090f6:	3401      	adds	r4, #1
100090f8:	b2e4      	uxtb	r4, r4
100090fa:	2c10      	cmp	r4, #16
100090fc:	d1f0      	bne.n	100090e0 <mpu_init+0xf8>
100090fe:	e001      	b.n	10009104 <mpu_init+0x11c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009100:	2c0f      	cmp	r4, #15
10009102:	d905      	bls.n	10009110 <mpu_init+0x128>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009104:	4885      	ldr	r0, [pc, #532]	; (1000931c <mpu_init+0x334>)
10009106:	4c86      	ldr	r4, [pc, #536]	; (10009320 <mpu_init+0x338>)
10009108:	47a0      	blx	r4
1000910a:	4886      	ldr	r0, [pc, #536]	; (10009324 <mpu_init+0x33c>)
1000910c:	47a0      	blx	r4
1000910e:	e0c4      	b.n	1000929a <mpu_init+0x2b2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009110:	232a      	movs	r3, #42	; 0x2a
10009112:	4a75      	ldr	r2, [pc, #468]	; (100092e8 <mpu_init+0x300>)
10009114:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009116:	ab01      	add	r3, sp, #4
10009118:	2210      	movs	r2, #16
1000911a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000911c:	3a0f      	subs	r2, #15
1000911e:	210a      	movs	r1, #10
10009120:	0020      	movs	r0, r4
10009122:	4c72      	ldr	r4, [pc, #456]	; (100092ec <mpu_init+0x304>)
10009124:	47a0      	blx	r4
10009126:	2800      	cmp	r0, #0
10009128:	d000      	beq.n	1000912c <mpu_init+0x144>
1000912a:	e0b6      	b.n	1000929a <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
1000912c:	3001      	adds	r0, #1
1000912e:	4b70      	ldr	r3, [pc, #448]	; (100092f0 <mpu_init+0x308>)
10009130:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009132:	ab01      	add	r3, sp, #4
10009134:	221f      	movs	r2, #31
10009136:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009138:	320b      	adds	r2, #11
1000913a:	496b      	ldr	r1, [pc, #428]	; (100092e8 <mpu_init+0x300>)
1000913c:	5c88      	ldrb	r0, [r1, r2]
1000913e:	3a29      	subs	r2, #41	; 0x29
10009140:	210a      	movs	r1, #10
10009142:	4c6a      	ldr	r4, [pc, #424]	; (100092ec <mpu_init+0x304>)
10009144:	47a0      	blx	r4
10009146:	2800      	cmp	r0, #0
10009148:	d000      	beq.n	1000914c <mpu_init+0x164>
1000914a:	e0a6      	b.n	1000929a <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
1000914c:	3001      	adds	r0, #1
1000914e:	4b68      	ldr	r3, [pc, #416]	; (100092f0 <mpu_init+0x308>)
10009150:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009152:	232a      	movs	r3, #42	; 0x2a
10009154:	4a64      	ldr	r2, [pc, #400]	; (100092e8 <mpu_init+0x300>)
10009156:	5cd0      	ldrb	r0, [r2, r3]
10009158:	ab01      	add	r3, sp, #4
1000915a:	2203      	movs	r2, #3
1000915c:	2110      	movs	r1, #16
1000915e:	4c6e      	ldr	r4, [pc, #440]	; (10009318 <mpu_init+0x330>)
10009160:	47a0      	blx	r4
10009162:	2800      	cmp	r0, #0
10009164:	d000      	beq.n	10009168 <mpu_init+0x180>
10009166:	e098      	b.n	1000929a <mpu_init+0x2b2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009168:	4a5f      	ldr	r2, [pc, #380]	; (100092e8 <mpu_init+0x300>)
1000916a:	ab01      	add	r3, sp, #4
1000916c:	7819      	ldrb	r1, [r3, #0]
1000916e:	3180      	adds	r1, #128	; 0x80
10009170:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009172:	7859      	ldrb	r1, [r3, #1]
10009174:	3180      	adds	r1, #128	; 0x80
10009176:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009178:	7899      	ldrb	r1, [r3, #2]
1000917a:	3180      	adds	r1, #128	; 0x80
1000917c:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000917e:	2110      	movs	r1, #16
10009180:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009182:	311a      	adds	r1, #26
10009184:	5c50      	ldrb	r0, [r2, r1]
10009186:	2201      	movs	r2, #1
10009188:	3920      	subs	r1, #32
1000918a:	4c58      	ldr	r4, [pc, #352]	; (100092ec <mpu_init+0x304>)
1000918c:	47a0      	blx	r4
1000918e:	2800      	cmp	r0, #0
10009190:	d000      	beq.n	10009194 <mpu_init+0x1ac>
10009192:	e082      	b.n	1000929a <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009194:	3001      	adds	r0, #1
10009196:	4b56      	ldr	r3, [pc, #344]	; (100092f0 <mpu_init+0x308>)
10009198:	4798      	blx	r3

    mpu_set_bypass(0);
1000919a:	2000      	movs	r0, #0
1000919c:	4b5d      	ldr	r3, [pc, #372]	; (10009314 <mpu_init+0x32c>)
1000919e:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091a0:	ab01      	add	r3, sp, #4
100091a2:	2240      	movs	r2, #64	; 0x40
100091a4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091a6:	4a50      	ldr	r2, [pc, #320]	; (100092e8 <mpu_init+0x300>)
100091a8:	6811      	ldr	r1, [r2, #0]
100091aa:	7e89      	ldrb	r1, [r1, #26]
100091ac:	6852      	ldr	r2, [r2, #4]
100091ae:	7810      	ldrb	r0, [r2, #0]
100091b0:	2201      	movs	r2, #1
100091b2:	4c4e      	ldr	r4, [pc, #312]	; (100092ec <mpu_init+0x304>)
100091b4:	47a0      	blx	r4
100091b6:	2800      	cmp	r0, #0
100091b8:	d16f      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091ba:	ab01      	add	r3, sp, #4
100091bc:	4a4a      	ldr	r2, [pc, #296]	; (100092e8 <mpu_init+0x300>)
100091be:	212a      	movs	r1, #42	; 0x2a
100091c0:	5c51      	ldrb	r1, [r2, r1]
100091c2:	3880      	subs	r0, #128	; 0x80
100091c4:	4301      	orrs	r1, r0
100091c6:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091c8:	6811      	ldr	r1, [r2, #0]
100091ca:	7f89      	ldrb	r1, [r1, #30]
100091cc:	6852      	ldr	r2, [r2, #4]
100091ce:	7810      	ldrb	r0, [r2, #0]
100091d0:	2201      	movs	r2, #1
100091d2:	4c46      	ldr	r4, [pc, #280]	; (100092ec <mpu_init+0x304>)
100091d4:	47a0      	blx	r4
100091d6:	2800      	cmp	r0, #0
100091d8:	d15f      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100091da:	ab01      	add	r3, sp, #4
100091dc:	2202      	movs	r2, #2
100091de:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100091e0:	4a41      	ldr	r2, [pc, #260]	; (100092e8 <mpu_init+0x300>)
100091e2:	6811      	ldr	r1, [r2, #0]
100091e4:	7fc9      	ldrb	r1, [r1, #31]
100091e6:	6852      	ldr	r2, [r2, #4]
100091e8:	7810      	ldrb	r0, [r2, #0]
100091ea:	2201      	movs	r2, #1
100091ec:	4c3f      	ldr	r4, [pc, #252]	; (100092ec <mpu_init+0x304>)
100091ee:	47a0      	blx	r4
100091f0:	2800      	cmp	r0, #0
100091f2:	d152      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100091f4:	ab01      	add	r3, sp, #4
100091f6:	2288      	movs	r2, #136	; 0x88
100091f8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100091fa:	4a3b      	ldr	r2, [pc, #236]	; (100092e8 <mpu_init+0x300>)
100091fc:	2120      	movs	r1, #32
100091fe:	6810      	ldr	r0, [r2, #0]
10009200:	5c41      	ldrb	r1, [r0, r1]
10009202:	6852      	ldr	r2, [r2, #4]
10009204:	7810      	ldrb	r0, [r2, #0]
10009206:	2201      	movs	r2, #1
10009208:	4c38      	ldr	r4, [pc, #224]	; (100092ec <mpu_init+0x304>)
1000920a:	47a0      	blx	r4
1000920c:	2800      	cmp	r0, #0
1000920e:	d144      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009210:	ab01      	add	r3, sp, #4
10009212:	4a35      	ldr	r2, [pc, #212]	; (100092e8 <mpu_init+0x300>)
10009214:	212a      	movs	r1, #42	; 0x2a
10009216:	5c51      	ldrb	r1, [r2, r1]
10009218:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000921a:	2121      	movs	r1, #33	; 0x21
1000921c:	6810      	ldr	r0, [r2, #0]
1000921e:	5c41      	ldrb	r1, [r0, r1]
10009220:	6852      	ldr	r2, [r2, #4]
10009222:	7810      	ldrb	r0, [r2, #0]
10009224:	2201      	movs	r2, #1
10009226:	4c31      	ldr	r4, [pc, #196]	; (100092ec <mpu_init+0x304>)
10009228:	47a0      	blx	r4
1000922a:	2800      	cmp	r0, #0
1000922c:	d135      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000922e:	ab01      	add	r3, sp, #4
10009230:	220a      	movs	r2, #10
10009232:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009234:	4a2c      	ldr	r2, [pc, #176]	; (100092e8 <mpu_init+0x300>)
10009236:	2122      	movs	r1, #34	; 0x22
10009238:	6810      	ldr	r0, [r2, #0]
1000923a:	5c41      	ldrb	r1, [r0, r1]
1000923c:	6852      	ldr	r2, [r2, #4]
1000923e:	7810      	ldrb	r0, [r2, #0]
10009240:	2201      	movs	r2, #1
10009242:	4c2a      	ldr	r4, [pc, #168]	; (100092ec <mpu_init+0x304>)
10009244:	47a0      	blx	r4
10009246:	2800      	cmp	r0, #0
10009248:	d127      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000924a:	ab01      	add	r3, sp, #4
1000924c:	2281      	movs	r2, #129	; 0x81
1000924e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009250:	4a25      	ldr	r2, [pc, #148]	; (100092e8 <mpu_init+0x300>)
10009252:	2123      	movs	r1, #35	; 0x23
10009254:	6810      	ldr	r0, [r2, #0]
10009256:	5c41      	ldrb	r1, [r0, r1]
10009258:	6852      	ldr	r2, [r2, #4]
1000925a:	7810      	ldrb	r0, [r2, #0]
1000925c:	2201      	movs	r2, #1
1000925e:	4c23      	ldr	r4, [pc, #140]	; (100092ec <mpu_init+0x304>)
10009260:	47a0      	blx	r4
10009262:	2800      	cmp	r0, #0
10009264:	d119      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009266:	ab01      	add	r3, sp, #4
10009268:	2211      	movs	r2, #17
1000926a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000926c:	4a1e      	ldr	r2, [pc, #120]	; (100092e8 <mpu_init+0x300>)
1000926e:	2126      	movs	r1, #38	; 0x26
10009270:	6810      	ldr	r0, [r2, #0]
10009272:	5c41      	ldrb	r1, [r0, r1]
10009274:	6852      	ldr	r2, [r2, #4]
10009276:	7810      	ldrb	r0, [r2, #0]
10009278:	2201      	movs	r2, #1
1000927a:	4c1c      	ldr	r4, [pc, #112]	; (100092ec <mpu_init+0x304>)
1000927c:	47a0      	blx	r4
1000927e:	2800      	cmp	r0, #0
10009280:	d10b      	bne.n	1000929a <mpu_init+0x2b2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009282:	ab01      	add	r3, sp, #4
10009284:	2203      	movs	r2, #3
10009286:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009288:	4a17      	ldr	r2, [pc, #92]	; (100092e8 <mpu_init+0x300>)
1000928a:	2127      	movs	r1, #39	; 0x27
1000928c:	6810      	ldr	r0, [r2, #0]
1000928e:	5c41      	ldrb	r1, [r0, r1]
10009290:	6852      	ldr	r2, [r2, #4]
10009292:	7810      	ldrb	r0, [r2, #0]
10009294:	2201      	movs	r2, #1
10009296:	4c15      	ldr	r4, [pc, #84]	; (100092ec <mpu_init+0x304>)
10009298:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
1000929a:	200a      	movs	r0, #10
1000929c:	4b22      	ldr	r3, [pc, #136]	; (10009328 <mpu_init+0x340>)
1000929e:	4798      	blx	r3
100092a0:	1e04      	subs	r4, r0, #0
100092a2:	d11b      	bne.n	100092dc <mpu_init+0x2f4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100092a4:	2000      	movs	r0, #0
100092a6:	4b21      	ldr	r3, [pc, #132]	; (1000932c <mpu_init+0x344>)
100092a8:	4798      	blx	r3
    return 0;
100092aa:	e019      	b.n	100092e0 <mpu_init+0x2f8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092ac:	2401      	movs	r4, #1
100092ae:	4264      	negs	r4, r4
100092b0:	e016      	b.n	100092e0 <mpu_init+0x2f8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100092b2:	2401      	movs	r4, #1
100092b4:	4264      	negs	r4, r4
100092b6:	e013      	b.n	100092e0 <mpu_init+0x2f8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100092b8:	2401      	movs	r4, #1
100092ba:	4264      	negs	r4, r4
100092bc:	e010      	b.n	100092e0 <mpu_init+0x2f8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
100092be:	2401      	movs	r4, #1
100092c0:	4264      	negs	r4, r4
100092c2:	e00d      	b.n	100092e0 <mpu_init+0x2f8>
    if (mpu_set_accel_fsr(2))
        return -1;
100092c4:	2401      	movs	r4, #1
100092c6:	4264      	negs	r4, r4
100092c8:	e00a      	b.n	100092e0 <mpu_init+0x2f8>
    if (mpu_set_lpf(42))
        return -1;
100092ca:	2401      	movs	r4, #1
100092cc:	4264      	negs	r4, r4
100092ce:	e007      	b.n	100092e0 <mpu_init+0x2f8>
    if (mpu_set_sample_rate(50))
        return -1;
100092d0:	2401      	movs	r4, #1
100092d2:	4264      	negs	r4, r4
100092d4:	e004      	b.n	100092e0 <mpu_init+0x2f8>
    if (mpu_configure_fifo(0))
        return -1;
100092d6:	2401      	movs	r4, #1
100092d8:	4264      	negs	r4, r4
100092da:	e001      	b.n	100092e0 <mpu_init+0x2f8>
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100092dc:	2401      	movs	r4, #1
100092de:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100092e0:	0020      	movs	r0, r4
100092e2:	b004      	add	sp, #16
100092e4:	bd70      	pop	{r4, r5, r6, pc}
100092e6:	46c0      	nop			; (mov r8, r8)
100092e8:	100135c0 	.word	0x100135c0
100092ec:	10008381 	.word	0x10008381
100092f0:	10008129 	.word	0x10008129
100092f4:	10011361 	.word	0x10011361
100092f8:	100086b9 	.word	0x100086b9
100092fc:	100087a5 	.word	0x100087a5
10009300:	10008839 	.word	0x10008839
10009304:	10008d2d 	.word	0x10008d2d
10009308:	10008989 	.word	0x10008989
1000930c:	1000cb59 	.word	0x1000cb59
10009310:	1000bf39 	.word	0x1000bf39
10009314:	100089f5 	.word	0x100089f5
10009318:	100082e5 	.word	0x100082e5
1000931c:	10012770 	.word	0x10012770
10009320:	100115c9 	.word	0x100115c9
10009324:	100125e0 	.word	0x100125e0
10009328:	10008911 	.word	0x10008911
1000932c:	10008e01 	.word	0x10008e01

10009330 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009330:	b570      	push	{r4, r5, r6, lr}
10009332:	b082      	sub	sp, #8
10009334:	000c      	movs	r4, r1
10009336:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009338:	d025      	beq.n	10009386 <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
1000933a:	4b19      	ldr	r3, [pc, #100]	; (100093a0 <mpu_write_mem+0x70>)
1000933c:	7a9b      	ldrb	r3, [r3, #10]
1000933e:	2b00      	cmp	r3, #0
10009340:	d024      	beq.n	1000938c <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009342:	ab01      	add	r3, sp, #4
10009344:	0a02      	lsrs	r2, r0, #8
10009346:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009348:	b2c0      	uxtb	r0, r0
1000934a:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000934c:	4b14      	ldr	r3, [pc, #80]	; (100093a0 <mpu_write_mem+0x70>)
1000934e:	685b      	ldr	r3, [r3, #4]
10009350:	1840      	adds	r0, r0, r1
10009352:	895a      	ldrh	r2, [r3, #10]
10009354:	4290      	cmp	r0, r2
10009356:	dc1c      	bgt.n	10009392 <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009358:	4a11      	ldr	r2, [pc, #68]	; (100093a0 <mpu_write_mem+0x70>)
1000935a:	6812      	ldr	r2, [r2, #0]
1000935c:	7ed1      	ldrb	r1, [r2, #27]
1000935e:	7818      	ldrb	r0, [r3, #0]
10009360:	ab01      	add	r3, sp, #4
10009362:	2202      	movs	r2, #2
10009364:	4e0f      	ldr	r6, [pc, #60]	; (100093a4 <mpu_write_mem+0x74>)
10009366:	47b0      	blx	r6
10009368:	2800      	cmp	r0, #0
1000936a:	d115      	bne.n	10009398 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000936c:	b2e2      	uxtb	r2, r4
1000936e:	4b0c      	ldr	r3, [pc, #48]	; (100093a0 <mpu_write_mem+0x70>)
10009370:	6819      	ldr	r1, [r3, #0]
10009372:	7e09      	ldrb	r1, [r1, #24]
10009374:	685b      	ldr	r3, [r3, #4]
10009376:	7818      	ldrb	r0, [r3, #0]
10009378:	002b      	movs	r3, r5
1000937a:	4c0a      	ldr	r4, [pc, #40]	; (100093a4 <mpu_write_mem+0x74>)
1000937c:	47a0      	blx	r4
1000937e:	1e43      	subs	r3, r0, #1
10009380:	4198      	sbcs	r0, r3
10009382:	4240      	negs	r0, r0
10009384:	e00a      	b.n	1000939c <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009386:	2001      	movs	r0, #1
10009388:	4240      	negs	r0, r0
1000938a:	e007      	b.n	1000939c <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
1000938c:	2001      	movs	r0, #1
1000938e:	4240      	negs	r0, r0
10009390:	e004      	b.n	1000939c <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
10009392:	2001      	movs	r0, #1
10009394:	4240      	negs	r0, r0
10009396:	e001      	b.n	1000939c <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009398:	2001      	movs	r0, #1
1000939a:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
1000939c:	b002      	add	sp, #8
1000939e:	bd70      	pop	{r4, r5, r6, pc}
100093a0:	100135c0 	.word	0x100135c0
100093a4:	10008381 	.word	0x10008381

100093a8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
100093a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100093aa:	4647      	mov	r7, r8
100093ac:	b480      	push	{r7}
100093ae:	b082      	sub	sp, #8
100093b0:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
100093b2:	0743      	lsls	r3, r0, #29
100093b4:	d100      	bne.n	100093b8 <dmp_set_tap_thresh+0x10>
100093b6:	e09c      	b.n	100094f2 <dmp_set_tap_thresh+0x14a>
100093b8:	23c8      	movs	r3, #200	; 0xc8
100093ba:	00db      	lsls	r3, r3, #3
100093bc:	4299      	cmp	r1, r3
100093be:	d900      	bls.n	100093c2 <dmp_set_tap_thresh+0x1a>
100093c0:	e09a      	b.n	100094f8 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
100093c2:	0008      	movs	r0, r1
100093c4:	4b58      	ldr	r3, [pc, #352]	; (10009528 <dmp_set_tap_thresh+0x180>)
100093c6:	4798      	blx	r3
100093c8:	4958      	ldr	r1, [pc, #352]	; (1000952c <dmp_set_tap_thresh+0x184>)
100093ca:	4b59      	ldr	r3, [pc, #356]	; (10009530 <dmp_set_tap_thresh+0x188>)
100093cc:	4798      	blx	r3
100093ce:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100093d0:	466b      	mov	r3, sp
100093d2:	1cdd      	adds	r5, r3, #3
100093d4:	0028      	movs	r0, r5
100093d6:	4b57      	ldr	r3, [pc, #348]	; (10009534 <dmp_set_tap_thresh+0x18c>)
100093d8:	4798      	blx	r3
    switch (accel_fsr) {
100093da:	782b      	ldrb	r3, [r5, #0]
100093dc:	2b04      	cmp	r3, #4
100093de:	d019      	beq.n	10009414 <dmp_set_tap_thresh+0x6c>
100093e0:	b2da      	uxtb	r2, r3
100093e2:	2a04      	cmp	r2, #4
100093e4:	d802      	bhi.n	100093ec <dmp_set_tap_thresh+0x44>
100093e6:	2b02      	cmp	r3, #2
100093e8:	d005      	beq.n	100093f6 <dmp_set_tap_thresh+0x4e>
100093ea:	e088      	b.n	100094fe <dmp_set_tap_thresh+0x156>
100093ec:	2b08      	cmp	r3, #8
100093ee:	d020      	beq.n	10009432 <dmp_set_tap_thresh+0x8a>
100093f0:	2b10      	cmp	r3, #16
100093f2:	d02d      	beq.n	10009450 <dmp_set_tap_thresh+0xa8>
100093f4:	e083      	b.n	100094fe <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100093f6:	4b50      	ldr	r3, [pc, #320]	; (10009538 <dmp_set_tap_thresh+0x190>)
100093f8:	4698      	mov	r8, r3
100093fa:	218d      	movs	r1, #141	; 0x8d
100093fc:	05c9      	lsls	r1, r1, #23
100093fe:	1c30      	adds	r0, r6, #0
10009400:	4798      	blx	r3
10009402:	4f4e      	ldr	r7, [pc, #312]	; (1000953c <dmp_set_tap_thresh+0x194>)
10009404:	47b8      	blx	r7
10009406:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009408:	494d      	ldr	r1, [pc, #308]	; (10009540 <dmp_set_tap_thresh+0x198>)
1000940a:	1c30      	adds	r0, r6, #0
1000940c:	47c0      	blx	r8
1000940e:	47b8      	blx	r7
10009410:	b280      	uxth	r0, r0
        break;
10009412:	e02b      	b.n	1000946c <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009414:	4b48      	ldr	r3, [pc, #288]	; (10009538 <dmp_set_tap_thresh+0x190>)
10009416:	4698      	mov	r8, r3
10009418:	218c      	movs	r1, #140	; 0x8c
1000941a:	05c9      	lsls	r1, r1, #23
1000941c:	1c30      	adds	r0, r6, #0
1000941e:	4798      	blx	r3
10009420:	4f46      	ldr	r7, [pc, #280]	; (1000953c <dmp_set_tap_thresh+0x194>)
10009422:	47b8      	blx	r7
10009424:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009426:	4947      	ldr	r1, [pc, #284]	; (10009544 <dmp_set_tap_thresh+0x19c>)
10009428:	1c30      	adds	r0, r6, #0
1000942a:	47c0      	blx	r8
1000942c:	47b8      	blx	r7
1000942e:	b280      	uxth	r0, r0
        break;
10009430:	e01c      	b.n	1000946c <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009432:	4b41      	ldr	r3, [pc, #260]	; (10009538 <dmp_set_tap_thresh+0x190>)
10009434:	4698      	mov	r8, r3
10009436:	218b      	movs	r1, #139	; 0x8b
10009438:	05c9      	lsls	r1, r1, #23
1000943a:	1c30      	adds	r0, r6, #0
1000943c:	4798      	blx	r3
1000943e:	4f3f      	ldr	r7, [pc, #252]	; (1000953c <dmp_set_tap_thresh+0x194>)
10009440:	47b8      	blx	r7
10009442:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009444:	4940      	ldr	r1, [pc, #256]	; (10009548 <dmp_set_tap_thresh+0x1a0>)
10009446:	1c30      	adds	r0, r6, #0
10009448:	47c0      	blx	r8
1000944a:	47b8      	blx	r7
1000944c:	b280      	uxth	r0, r0
        break;
1000944e:	e00d      	b.n	1000946c <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009450:	4b39      	ldr	r3, [pc, #228]	; (10009538 <dmp_set_tap_thresh+0x190>)
10009452:	4698      	mov	r8, r3
10009454:	218a      	movs	r1, #138	; 0x8a
10009456:	05c9      	lsls	r1, r1, #23
10009458:	1c30      	adds	r0, r6, #0
1000945a:	4798      	blx	r3
1000945c:	4f37      	ldr	r7, [pc, #220]	; (1000953c <dmp_set_tap_thresh+0x194>)
1000945e:	47b8      	blx	r7
10009460:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009462:	493a      	ldr	r1, [pc, #232]	; (1000954c <dmp_set_tap_thresh+0x1a4>)
10009464:	1c30      	adds	r0, r6, #0
10009466:	47c0      	blx	r8
10009468:	47b8      	blx	r7
1000946a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000946c:	ab01      	add	r3, sp, #4
1000946e:	0a2a      	lsrs	r2, r5, #8
10009470:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009472:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009474:	0a02      	lsrs	r2, r0, #8
10009476:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009478:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
1000947a:	07e3      	lsls	r3, r4, #31
1000947c:	d510      	bpl.n	100094a0 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000947e:	aa01      	add	r2, sp, #4
10009480:	2102      	movs	r1, #2
10009482:	20ea      	movs	r0, #234	; 0xea
10009484:	0040      	lsls	r0, r0, #1
10009486:	4b32      	ldr	r3, [pc, #200]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
10009488:	4798      	blx	r3
1000948a:	2800      	cmp	r0, #0
1000948c:	d13a      	bne.n	10009504 <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000948e:	466b      	mov	r3, sp
10009490:	1d9a      	adds	r2, r3, #6
10009492:	2102      	movs	r1, #2
10009494:	3025      	adds	r0, #37	; 0x25
10009496:	30ff      	adds	r0, #255	; 0xff
10009498:	4b2d      	ldr	r3, [pc, #180]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
1000949a:	4798      	blx	r3
1000949c:	2800      	cmp	r0, #0
1000949e:	d134      	bne.n	1000950a <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
100094a0:	07a3      	lsls	r3, r4, #30
100094a2:	d510      	bpl.n	100094c6 <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100094a4:	aa01      	add	r2, sp, #4
100094a6:	2102      	movs	r1, #2
100094a8:	20ec      	movs	r0, #236	; 0xec
100094aa:	0040      	lsls	r0, r0, #1
100094ac:	4b28      	ldr	r3, [pc, #160]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
100094ae:	4798      	blx	r3
100094b0:	2800      	cmp	r0, #0
100094b2:	d12d      	bne.n	10009510 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
100094b4:	466b      	mov	r3, sp
100094b6:	1d9a      	adds	r2, r3, #6
100094b8:	2102      	movs	r1, #2
100094ba:	3029      	adds	r0, #41	; 0x29
100094bc:	30ff      	adds	r0, #255	; 0xff
100094be:	4b24      	ldr	r3, [pc, #144]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
100094c0:	4798      	blx	r3
100094c2:	2800      	cmp	r0, #0
100094c4:	d127      	bne.n	10009516 <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100094c6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100094c8:	0763      	lsls	r3, r4, #29
100094ca:	d529      	bpl.n	10009520 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100094cc:	aa01      	add	r2, sp, #4
100094ce:	2102      	movs	r1, #2
100094d0:	30dd      	adds	r0, #221	; 0xdd
100094d2:	30ff      	adds	r0, #255	; 0xff
100094d4:	4b1e      	ldr	r3, [pc, #120]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
100094d6:	4798      	blx	r3
100094d8:	2800      	cmp	r0, #0
100094da:	d11f      	bne.n	1000951c <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100094dc:	466b      	mov	r3, sp
100094de:	1d9a      	adds	r2, r3, #6
100094e0:	2102      	movs	r1, #2
100094e2:	302d      	adds	r0, #45	; 0x2d
100094e4:	30ff      	adds	r0, #255	; 0xff
100094e6:	4b1a      	ldr	r3, [pc, #104]	; (10009550 <dmp_set_tap_thresh+0x1a8>)
100094e8:	4798      	blx	r3
100094ea:	1e43      	subs	r3, r0, #1
100094ec:	4198      	sbcs	r0, r3
100094ee:	4240      	negs	r0, r0
100094f0:	e016      	b.n	10009520 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
100094f2:	2001      	movs	r0, #1
100094f4:	4240      	negs	r0, r0
100094f6:	e013      	b.n	10009520 <dmp_set_tap_thresh+0x178>
100094f8:	2001      	movs	r0, #1
100094fa:	4240      	negs	r0, r0
100094fc:	e010      	b.n	10009520 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100094fe:	2001      	movs	r0, #1
10009500:	4240      	negs	r0, r0
10009502:	e00d      	b.n	10009520 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
10009504:	2001      	movs	r0, #1
10009506:	4240      	negs	r0, r0
10009508:	e00a      	b.n	10009520 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
1000950a:	2001      	movs	r0, #1
1000950c:	4240      	negs	r0, r0
1000950e:	e007      	b.n	10009520 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
10009510:	2001      	movs	r0, #1
10009512:	4240      	negs	r0, r0
10009514:	e004      	b.n	10009520 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
10009516:	2001      	movs	r0, #1
10009518:	4240      	negs	r0, r0
1000951a:	e001      	b.n	10009520 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
1000951c:	2001      	movs	r0, #1
1000951e:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009520:	b002      	add	sp, #8
10009522:	bc04      	pop	{r2}
10009524:	4690      	mov	r8, r2
10009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009528:	10010385 	.word	0x10010385
1000952c:	43480000 	.word	0x43480000
10009530:	1000fa79 	.word	0x1000fa79
10009534:	10008759 	.word	0x10008759
10009538:	1000fe0d 	.word	0x1000fe0d
1000953c:	1000fa0d 	.word	0x1000fa0d
10009540:	46400000 	.word	0x46400000
10009544:	45c00000 	.word	0x45c00000
10009548:	45400000 	.word	0x45400000
1000954c:	44c00000 	.word	0x44c00000
10009550:	10009331 	.word	0x10009331

10009554 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009554:	b500      	push	{lr}
10009556:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009558:	07c3      	lsls	r3, r0, #31
1000955a:	d403      	bmi.n	10009564 <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
1000955c:	2200      	movs	r2, #0
1000955e:	466b      	mov	r3, sp
10009560:	71da      	strb	r2, [r3, #7]
10009562:	e002      	b.n	1000956a <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
10009564:	2230      	movs	r2, #48	; 0x30
10009566:	466b      	mov	r3, sp
10009568:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
1000956a:	0783      	lsls	r3, r0, #30
1000956c:	d505      	bpl.n	1000957a <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
1000956e:	466b      	mov	r3, sp
10009570:	1dda      	adds	r2, r3, #7
10009572:	79d9      	ldrb	r1, [r3, #7]
10009574:	230c      	movs	r3, #12
10009576:	430b      	orrs	r3, r1
10009578:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
1000957a:	0743      	lsls	r3, r0, #29
1000957c:	d505      	bpl.n	1000958a <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
1000957e:	466b      	mov	r3, sp
10009580:	1dda      	adds	r2, r3, #7
10009582:	79d9      	ldrb	r1, [r3, #7]
10009584:	2303      	movs	r3, #3
10009586:	430b      	orrs	r3, r1
10009588:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000958a:	466b      	mov	r3, sp
1000958c:	1dda      	adds	r2, r3, #7
1000958e:	2101      	movs	r1, #1
10009590:	20a4      	movs	r0, #164	; 0xa4
10009592:	0040      	lsls	r0, r0, #1
10009594:	4b01      	ldr	r3, [pc, #4]	; (1000959c <dmp_set_tap_axes+0x48>)
10009596:	4798      	blx	r3
}
10009598:	b003      	add	sp, #12
1000959a:	bd00      	pop	{pc}
1000959c:	10009331 	.word	0x10009331

100095a0 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
100095a0:	b500      	push	{lr}
100095a2:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
100095a4:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
100095a6:	2800      	cmp	r0, #0
100095a8:	d004      	beq.n	100095b4 <dmp_set_tap_count+0x14>
100095aa:	1c03      	adds	r3, r0, #0
100095ac:	2804      	cmp	r0, #4
100095ae:	d900      	bls.n	100095b2 <dmp_set_tap_count+0x12>
100095b0:	2304      	movs	r3, #4
100095b2:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100095b4:	466a      	mov	r2, sp
100095b6:	3207      	adds	r2, #7
100095b8:	3b01      	subs	r3, #1
100095ba:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
100095bc:	2101      	movs	r1, #1
100095be:	2050      	movs	r0, #80	; 0x50
100095c0:	30ff      	adds	r0, #255	; 0xff
100095c2:	4b02      	ldr	r3, [pc, #8]	; (100095cc <dmp_set_tap_count+0x2c>)
100095c4:	4798      	blx	r3
}
100095c6:	b003      	add	sp, #12
100095c8:	bd00      	pop	{pc}
100095ca:	46c0      	nop			; (mov r8, r8)
100095cc:	10009331 	.word	0x10009331

100095d0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
100095d0:	b500      	push	{lr}
100095d2:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100095d4:	2105      	movs	r1, #5
100095d6:	4b07      	ldr	r3, [pc, #28]	; (100095f4 <dmp_set_tap_time+0x24>)
100095d8:	4798      	blx	r3
100095da:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
100095dc:	aa01      	add	r2, sp, #4
100095de:	0a03      	lsrs	r3, r0, #8
100095e0:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100095e2:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100095e4:	2102      	movs	r1, #2
100095e6:	20ef      	movs	r0, #239	; 0xef
100095e8:	0040      	lsls	r0, r0, #1
100095ea:	4b03      	ldr	r3, [pc, #12]	; (100095f8 <dmp_set_tap_time+0x28>)
100095ec:	4798      	blx	r3
}
100095ee:	b003      	add	sp, #12
100095f0:	bd00      	pop	{pc}
100095f2:	46c0      	nop			; (mov r8, r8)
100095f4:	1000f5d9 	.word	0x1000f5d9
100095f8:	10009331 	.word	0x10009331

100095fc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
100095fc:	b500      	push	{lr}
100095fe:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009600:	2105      	movs	r1, #5
10009602:	4b07      	ldr	r3, [pc, #28]	; (10009620 <dmp_set_tap_time_multi+0x24>)
10009604:	4798      	blx	r3
10009606:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009608:	aa01      	add	r2, sp, #4
1000960a:	0a03      	lsrs	r3, r0, #8
1000960c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000960e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009610:	2102      	movs	r1, #2
10009612:	20ed      	movs	r0, #237	; 0xed
10009614:	0040      	lsls	r0, r0, #1
10009616:	4b03      	ldr	r3, [pc, #12]	; (10009624 <dmp_set_tap_time_multi+0x28>)
10009618:	4798      	blx	r3
}
1000961a:	b003      	add	sp, #12
1000961c:	bd00      	pop	{pc}
1000961e:	46c0      	nop			; (mov r8, r8)
10009620:	1000f5d9 	.word	0x1000f5d9
10009624:	10009331 	.word	0x10009331

10009628 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009628:	b510      	push	{r4, lr}
1000962a:	b082      	sub	sp, #8
1000962c:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
1000962e:	21fa      	movs	r1, #250	; 0xfa
10009630:	0089      	lsls	r1, r1, #2
10009632:	4b09      	ldr	r3, [pc, #36]	; (10009658 <dmp_set_shake_reject_thresh+0x30>)
10009634:	4798      	blx	r3
10009636:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009638:	aa01      	add	r2, sp, #4
1000963a:	1603      	asrs	r3, r0, #24
1000963c:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1000963e:	1403      	asrs	r3, r0, #16
10009640:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009642:	1203      	asrs	r3, r0, #8
10009644:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009646:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009648:	2104      	movs	r1, #4
1000964a:	20ae      	movs	r0, #174	; 0xae
1000964c:	0040      	lsls	r0, r0, #1
1000964e:	4b03      	ldr	r3, [pc, #12]	; (1000965c <dmp_set_shake_reject_thresh+0x34>)
10009650:	4798      	blx	r3
}
10009652:	b002      	add	sp, #8
10009654:	bd10      	pop	{r4, pc}
10009656:	46c0      	nop			; (mov r8, r8)
10009658:	1000f6ed 	.word	0x1000f6ed
1000965c:	10009331 	.word	0x10009331

10009660 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009660:	b500      	push	{lr}
10009662:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009664:	2105      	movs	r1, #5
10009666:	4b07      	ldr	r3, [pc, #28]	; (10009684 <dmp_set_shake_reject_time+0x24>)
10009668:	4798      	blx	r3
1000966a:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
1000966c:	aa01      	add	r2, sp, #4
1000966e:	0a03      	lsrs	r3, r0, #8
10009670:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
10009672:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009674:	2102      	movs	r1, #2
10009676:	20ad      	movs	r0, #173	; 0xad
10009678:	0040      	lsls	r0, r0, #1
1000967a:	4b03      	ldr	r3, [pc, #12]	; (10009688 <dmp_set_shake_reject_time+0x28>)
1000967c:	4798      	blx	r3
}
1000967e:	b003      	add	sp, #12
10009680:	bd00      	pop	{pc}
10009682:	46c0      	nop			; (mov r8, r8)
10009684:	1000f5d9 	.word	0x1000f5d9
10009688:	10009331 	.word	0x10009331

1000968c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
1000968c:	b500      	push	{lr}
1000968e:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
10009690:	2105      	movs	r1, #5
10009692:	4b07      	ldr	r3, [pc, #28]	; (100096b0 <dmp_set_shake_reject_timeout+0x24>)
10009694:	4798      	blx	r3
10009696:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009698:	aa01      	add	r2, sp, #4
1000969a:	0a03      	lsrs	r3, r0, #8
1000969c:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000969e:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
100096a0:	2102      	movs	r1, #2
100096a2:	20ac      	movs	r0, #172	; 0xac
100096a4:	0040      	lsls	r0, r0, #1
100096a6:	4b03      	ldr	r3, [pc, #12]	; (100096b4 <dmp_set_shake_reject_timeout+0x28>)
100096a8:	4798      	blx	r3
}
100096aa:	b003      	add	sp, #12
100096ac:	bd00      	pop	{pc}
100096ae:	46c0      	nop			; (mov r8, r8)
100096b0:	1000f5d9 	.word	0x1000f5d9
100096b4:	10009331 	.word	0x10009331

100096b8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
100096b8:	b500      	push	{lr}
100096ba:	b085      	sub	sp, #20
    if (enable) {
100096bc:	2800      	cmp	r0, #0
100096be:	d00c      	beq.n	100096da <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
100096c0:	2209      	movs	r2, #9
100096c2:	490d      	ldr	r1, [pc, #52]	; (100096f8 <dmp_enable_gyro_cal+0x40>)
100096c4:	311c      	adds	r1, #28
100096c6:	a801      	add	r0, sp, #4
100096c8:	4b0c      	ldr	r3, [pc, #48]	; (100096fc <dmp_enable_gyro_cal+0x44>)
100096ca:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100096cc:	aa01      	add	r2, sp, #4
100096ce:	2109      	movs	r1, #9
100096d0:	2097      	movs	r0, #151	; 0x97
100096d2:	00c0      	lsls	r0, r0, #3
100096d4:	4b0a      	ldr	r3, [pc, #40]	; (10009700 <dmp_enable_gyro_cal+0x48>)
100096d6:	4798      	blx	r3
100096d8:	e00b      	b.n	100096f2 <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
100096da:	2209      	movs	r2, #9
100096dc:	4906      	ldr	r1, [pc, #24]	; (100096f8 <dmp_enable_gyro_cal+0x40>)
100096de:	3128      	adds	r1, #40	; 0x28
100096e0:	a801      	add	r0, sp, #4
100096e2:	4b06      	ldr	r3, [pc, #24]	; (100096fc <dmp_enable_gyro_cal+0x44>)
100096e4:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100096e6:	aa01      	add	r2, sp, #4
100096e8:	2109      	movs	r1, #9
100096ea:	2097      	movs	r0, #151	; 0x97
100096ec:	00c0      	lsls	r0, r0, #3
100096ee:	4b04      	ldr	r3, [pc, #16]	; (10009700 <dmp_enable_gyro_cal+0x48>)
100096f0:	4798      	blx	r3
    }
}
100096f2:	b005      	add	sp, #20
100096f4:	bd00      	pop	{pc}
100096f6:	46c0      	nop			; (mov r8, r8)
100096f8:	100129bc 	.word	0x100129bc
100096fc:	1001134f 	.word	0x1001134f
10009700:	10009331 	.word	0x10009331

10009704 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009704:	b500      	push	{lr}
10009706:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009708:	2800      	cmp	r0, #0
1000970a:	d009      	beq.n	10009720 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
1000970c:	ab01      	add	r3, sp, #4
1000970e:	22c0      	movs	r2, #192	; 0xc0
10009710:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009712:	3202      	adds	r2, #2
10009714:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009716:	3202      	adds	r2, #2
10009718:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
1000971a:	3202      	adds	r2, #2
1000971c:	70da      	strb	r2, [r3, #3]
1000971e:	e001      	b.n	10009724 <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009720:	4b05      	ldr	r3, [pc, #20]	; (10009738 <dmp_enable_lp_quat+0x34>)
10009722:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009724:	aa01      	add	r2, sp, #4
10009726:	2104      	movs	r1, #4
10009728:	4804      	ldr	r0, [pc, #16]	; (1000973c <dmp_enable_lp_quat+0x38>)
1000972a:	4b05      	ldr	r3, [pc, #20]	; (10009740 <dmp_enable_lp_quat+0x3c>)
1000972c:	4798      	blx	r3

    return mpu_reset_fifo();
1000972e:	4b05      	ldr	r3, [pc, #20]	; (10009744 <dmp_enable_lp_quat+0x40>)
10009730:	4798      	blx	r3
}
10009732:	b003      	add	sp, #12
10009734:	bd00      	pop	{pc}
10009736:	46c0      	nop			; (mov r8, r8)
10009738:	8b8b8b8b 	.word	0x8b8b8b8b
1000973c:	00000a98 	.word	0x00000a98
10009740:	10009331 	.word	0x10009331
10009744:	10008481 	.word	0x10008481

10009748 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009748:	b500      	push	{lr}
1000974a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
1000974c:	2800      	cmp	r0, #0
1000974e:	d009      	beq.n	10009764 <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009750:	ab01      	add	r3, sp, #4
10009752:	2220      	movs	r2, #32
10009754:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009756:	3208      	adds	r2, #8
10009758:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
1000975a:	3208      	adds	r2, #8
1000975c:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
1000975e:	3208      	adds	r2, #8
10009760:	70da      	strb	r2, [r3, #3]
10009762:	e001      	b.n	10009768 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009764:	4b05      	ldr	r3, [pc, #20]	; (1000977c <dmp_enable_6x_lp_quat+0x34>)
10009766:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009768:	aa01      	add	r2, sp, #4
1000976a:	2104      	movs	r1, #4
1000976c:	4804      	ldr	r0, [pc, #16]	; (10009780 <dmp_enable_6x_lp_quat+0x38>)
1000976e:	4b05      	ldr	r3, [pc, #20]	; (10009784 <dmp_enable_6x_lp_quat+0x3c>)
10009770:	4798      	blx	r3

    return mpu_reset_fifo();
10009772:	4b05      	ldr	r3, [pc, #20]	; (10009788 <dmp_enable_6x_lp_quat+0x40>)
10009774:	4798      	blx	r3
}
10009776:	b003      	add	sp, #12
10009778:	bd00      	pop	{pc}
1000977a:	46c0      	nop			; (mov r8, r8)
1000977c:	a3a3a3a3 	.word	0xa3a3a3a3
10009780:	00000a9e 	.word	0x00000a9e
10009784:	10009331 	.word	0x10009331
10009788:	10008481 	.word	0x10008481

1000978c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000978c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000978e:	b085      	sub	sp, #20
10009790:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009792:	ad01      	add	r5, sp, #4
10009794:	2302      	movs	r3, #2
10009796:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009798:	33c8      	adds	r3, #200	; 0xc8
1000979a:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000979c:	3319      	adds	r3, #25
1000979e:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100097a0:	3bda      	subs	r3, #218	; 0xda
100097a2:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
100097a4:	002a      	movs	r2, r5
100097a6:	2104      	movs	r1, #4
100097a8:	2068      	movs	r0, #104	; 0x68
100097aa:	4b6a      	ldr	r3, [pc, #424]	; (10009954 <dmp_enable_feature+0x1c8>)
100097ac:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
100097ae:	23a3      	movs	r3, #163	; 0xa3
100097b0:	702b      	strb	r3, [r5, #0]
100097b2:	2740      	movs	r7, #64	; 0x40
100097b4:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
100097b6:	d007      	beq.n	100097c8 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
100097b8:	ab01      	add	r3, sp, #4
100097ba:	22c0      	movs	r2, #192	; 0xc0
100097bc:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
100097be:	3208      	adds	r2, #8
100097c0:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
100097c2:	3a06      	subs	r2, #6
100097c4:	70da      	strb	r2, [r3, #3]
100097c6:	e004      	b.n	100097d2 <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
100097c8:	ab01      	add	r3, sp, #4
100097ca:	22a3      	movs	r2, #163	; 0xa3
100097cc:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
100097ce:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
100097d0:	70da      	strb	r2, [r3, #3]
100097d2:	25c0      	movs	r5, #192	; 0xc0
100097d4:	006d      	lsls	r5, r5, #1
100097d6:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100097d8:	d007      	beq.n	100097ea <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
100097da:	ab01      	add	r3, sp, #4
100097dc:	22c4      	movs	r2, #196	; 0xc4
100097de:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
100097e0:	3208      	adds	r2, #8
100097e2:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
100097e4:	3a06      	subs	r2, #6
100097e6:	719a      	strb	r2, [r3, #6]
100097e8:	e004      	b.n	100097f4 <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
100097ea:	ab01      	add	r3, sp, #4
100097ec:	22a3      	movs	r2, #163	; 0xa3
100097ee:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
100097f0:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
100097f2:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
100097f4:	aa01      	add	r2, sp, #4
100097f6:	23a3      	movs	r3, #163	; 0xa3
100097f8:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
100097fa:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
100097fc:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
100097fe:	210a      	movs	r1, #10
10009800:	4855      	ldr	r0, [pc, #340]	; (10009958 <dmp_enable_feature+0x1cc>)
10009802:	4b54      	ldr	r3, [pc, #336]	; (10009954 <dmp_enable_feature+0x1c8>)
10009804:	4798      	blx	r3
10009806:	2603      	movs	r6, #3
10009808:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000980a:	d003      	beq.n	10009814 <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
1000980c:	2220      	movs	r2, #32
1000980e:	ab01      	add	r3, sp, #4
10009810:	701a      	strb	r2, [r3, #0]
10009812:	e002      	b.n	1000981a <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009814:	22d8      	movs	r2, #216	; 0xd8
10009816:	ab01      	add	r3, sp, #4
10009818:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
1000981a:	aa01      	add	r2, sp, #4
1000981c:	2101      	movs	r1, #1
1000981e:	484f      	ldr	r0, [pc, #316]	; (1000995c <dmp_enable_feature+0x1d0>)
10009820:	4b4c      	ldr	r3, [pc, #304]	; (10009954 <dmp_enable_feature+0x1c8>)
10009822:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009824:	06a3      	lsls	r3, r4, #26
10009826:	d503      	bpl.n	10009830 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009828:	2001      	movs	r0, #1
1000982a:	4b4d      	ldr	r3, [pc, #308]	; (10009960 <dmp_enable_feature+0x1d4>)
1000982c:	4798      	blx	r3
1000982e:	e002      	b.n	10009836 <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009830:	2000      	movs	r0, #0
10009832:	4b4b      	ldr	r3, [pc, #300]	; (10009960 <dmp_enable_feature+0x1d4>)
10009834:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009836:	2d00      	cmp	r5, #0
10009838:	d019      	beq.n	1000986e <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1000983a:	05e3      	lsls	r3, r4, #23
1000983c:	d509      	bpl.n	10009852 <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
1000983e:	ab01      	add	r3, sp, #4
10009840:	22b2      	movs	r2, #178	; 0xb2
10009842:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009844:	3a27      	subs	r2, #39	; 0x27
10009846:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009848:	322b      	adds	r2, #43	; 0x2b
1000984a:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
1000984c:	3a1b      	subs	r2, #27
1000984e:	70da      	strb	r2, [r3, #3]
10009850:	e008      	b.n	10009864 <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009852:	ab01      	add	r3, sp, #4
10009854:	22b0      	movs	r2, #176	; 0xb0
10009856:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009858:	3a30      	subs	r2, #48	; 0x30
1000985a:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
1000985c:	3234      	adds	r2, #52	; 0x34
1000985e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009860:	3a24      	subs	r2, #36	; 0x24
10009862:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009864:	aa01      	add	r2, sp, #4
10009866:	2104      	movs	r1, #4
10009868:	483e      	ldr	r0, [pc, #248]	; (10009964 <dmp_enable_feature+0x1d8>)
1000986a:	4b3a      	ldr	r3, [pc, #232]	; (10009954 <dmp_enable_feature+0x1c8>)
1000986c:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
1000986e:	07e3      	lsls	r3, r4, #31
10009870:	d523      	bpl.n	100098ba <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009872:	aa01      	add	r2, sp, #4
10009874:	23f8      	movs	r3, #248	; 0xf8
10009876:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009878:	2101      	movs	r1, #1
1000987a:	208b      	movs	r0, #139	; 0x8b
1000987c:	0100      	lsls	r0, r0, #4
1000987e:	4b35      	ldr	r3, [pc, #212]	; (10009954 <dmp_enable_feature+0x1c8>)
10009880:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009882:	21fa      	movs	r1, #250	; 0xfa
10009884:	2007      	movs	r0, #7
10009886:	4b38      	ldr	r3, [pc, #224]	; (10009968 <dmp_enable_feature+0x1dc>)
10009888:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000988a:	2007      	movs	r0, #7
1000988c:	4b37      	ldr	r3, [pc, #220]	; (1000996c <dmp_enable_feature+0x1e0>)
1000988e:	4798      	blx	r3
        dmp_set_tap_count(1);
10009890:	2001      	movs	r0, #1
10009892:	4b37      	ldr	r3, [pc, #220]	; (10009970 <dmp_enable_feature+0x1e4>)
10009894:	4798      	blx	r3
        dmp_set_tap_time(100);
10009896:	2064      	movs	r0, #100	; 0x64
10009898:	4b36      	ldr	r3, [pc, #216]	; (10009974 <dmp_enable_feature+0x1e8>)
1000989a:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
1000989c:	20fa      	movs	r0, #250	; 0xfa
1000989e:	0040      	lsls	r0, r0, #1
100098a0:	4b35      	ldr	r3, [pc, #212]	; (10009978 <dmp_enable_feature+0x1ec>)
100098a2:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
100098a4:	21c8      	movs	r1, #200	; 0xc8
100098a6:	4835      	ldr	r0, [pc, #212]	; (1000997c <dmp_enable_feature+0x1f0>)
100098a8:	4b35      	ldr	r3, [pc, #212]	; (10009980 <dmp_enable_feature+0x1f4>)
100098aa:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
100098ac:	2028      	movs	r0, #40	; 0x28
100098ae:	4b35      	ldr	r3, [pc, #212]	; (10009984 <dmp_enable_feature+0x1f8>)
100098b0:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
100098b2:	200a      	movs	r0, #10
100098b4:	4b34      	ldr	r3, [pc, #208]	; (10009988 <dmp_enable_feature+0x1fc>)
100098b6:	4798      	blx	r3
100098b8:	e007      	b.n	100098ca <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
100098ba:	aa01      	add	r2, sp, #4
100098bc:	23d8      	movs	r3, #216	; 0xd8
100098be:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100098c0:	2101      	movs	r1, #1
100098c2:	208b      	movs	r0, #139	; 0x8b
100098c4:	0100      	lsls	r0, r0, #4
100098c6:	4b23      	ldr	r3, [pc, #140]	; (10009954 <dmp_enable_feature+0x1c8>)
100098c8:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
100098ca:	07a3      	lsls	r3, r4, #30
100098cc:	d503      	bpl.n	100098d6 <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
100098ce:	22d9      	movs	r2, #217	; 0xd9
100098d0:	ab01      	add	r3, sp, #4
100098d2:	701a      	strb	r2, [r3, #0]
100098d4:	e002      	b.n	100098dc <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
100098d6:	22d8      	movs	r2, #216	; 0xd8
100098d8:	ab01      	add	r3, sp, #4
100098da:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
100098dc:	aa01      	add	r2, sp, #4
100098de:	2101      	movs	r1, #1
100098e0:	482a      	ldr	r0, [pc, #168]	; (1000998c <dmp_enable_feature+0x200>)
100098e2:	4b1c      	ldr	r3, [pc, #112]	; (10009954 <dmp_enable_feature+0x1c8>)
100098e4:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
100098e6:	0763      	lsls	r3, r4, #29
100098e8:	d503      	bpl.n	100098f2 <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
100098ea:	2001      	movs	r0, #1
100098ec:	4b28      	ldr	r3, [pc, #160]	; (10009990 <dmp_enable_feature+0x204>)
100098ee:	4798      	blx	r3
100098f0:	e002      	b.n	100098f8 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
100098f2:	2000      	movs	r0, #0
100098f4:	4b26      	ldr	r3, [pc, #152]	; (10009990 <dmp_enable_feature+0x204>)
100098f6:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
100098f8:	06e3      	lsls	r3, r4, #27
100098fa:	d503      	bpl.n	10009904 <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
100098fc:	2001      	movs	r0, #1
100098fe:	4b25      	ldr	r3, [pc, #148]	; (10009994 <dmp_enable_feature+0x208>)
10009900:	4798      	blx	r3
10009902:	e002      	b.n	1000990a <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009904:	2000      	movs	r0, #0
10009906:	4b23      	ldr	r3, [pc, #140]	; (10009994 <dmp_enable_feature+0x208>)
10009908:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1000990a:	2308      	movs	r3, #8
1000990c:	4323      	orrs	r3, r4
1000990e:	4a22      	ldr	r2, [pc, #136]	; (10009998 <dmp_enable_feature+0x20c>)
10009910:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009912:	4b22      	ldr	r3, [pc, #136]	; (1000999c <dmp_enable_feature+0x210>)
10009914:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009916:	2f00      	cmp	r7, #0
10009918:	d103      	bne.n	10009922 <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
1000991a:	2200      	movs	r2, #0
1000991c:	4b1e      	ldr	r3, [pc, #120]	; (10009998 <dmp_enable_feature+0x20c>)
1000991e:	739a      	strb	r2, [r3, #14]
10009920:	e002      	b.n	10009928 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009922:	2206      	movs	r2, #6
10009924:	4b1c      	ldr	r3, [pc, #112]	; (10009998 <dmp_enable_feature+0x20c>)
10009926:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009928:	2d00      	cmp	r5, #0
1000992a:	d003      	beq.n	10009934 <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
1000992c:	4a1a      	ldr	r2, [pc, #104]	; (10009998 <dmp_enable_feature+0x20c>)
1000992e:	7b93      	ldrb	r3, [r2, #14]
10009930:	3306      	adds	r3, #6
10009932:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009934:	2314      	movs	r3, #20
10009936:	4223      	tst	r3, r4
10009938:	d003      	beq.n	10009942 <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
1000993a:	4a17      	ldr	r2, [pc, #92]	; (10009998 <dmp_enable_feature+0x20c>)
1000993c:	7b93      	ldrb	r3, [r2, #14]
1000993e:	3310      	adds	r3, #16
10009940:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009942:	2e00      	cmp	r6, #0
10009944:	d003      	beq.n	1000994e <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009946:	4a14      	ldr	r2, [pc, #80]	; (10009998 <dmp_enable_feature+0x20c>)
10009948:	7b93      	ldrb	r3, [r2, #14]
1000994a:	3304      	adds	r3, #4
1000994c:	7393      	strb	r3, [r2, #14]

    return 0;
}
1000994e:	2000      	movs	r0, #0
10009950:	b005      	add	sp, #20
10009952:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009954:	10009331 	.word	0x10009331
10009958:	00000aa7 	.word	0x00000aa7
1000995c:	00000ab6 	.word	0x00000ab6
10009960:	100096b9 	.word	0x100096b9
10009964:	00000aa2 	.word	0x00000aa2
10009968:	100093a9 	.word	0x100093a9
1000996c:	10009555 	.word	0x10009555
10009970:	100095a1 	.word	0x100095a1
10009974:	100095d1 	.word	0x100095d1
10009978:	100095fd 	.word	0x100095fd
1000997c:	02cae309 	.word	0x02cae309
10009980:	10009629 	.word	0x10009629
10009984:	10009661 	.word	0x10009661
10009988:	1000968d 	.word	0x1000968d
1000998c:	0000073d 	.word	0x0000073d
10009990:	10009705 	.word	0x10009705
10009994:	10009749 	.word	0x10009749
10009998:	10013688 	.word	0x10013688
1000999c:	10008481 	.word	0x10008481

100099a0 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
100099a0:	2000      	movs	r0, #0
100099a2:	4770      	bx	lr

100099a4 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
100099a4:	2000      	movs	r0, #0
100099a6:	4770      	bx	lr

100099a8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100099a8:	78c0      	ldrb	r0, [r0, #3]
100099aa:	2800      	cmp	r0, #0
100099ac:	d000      	beq.n	100099b0 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
100099ae:	20e2      	movs	r0, #226	; 0xe2
}
100099b0:	4770      	bx	lr
100099b2:	46c0      	nop			; (mov r8, r8)

100099b4 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
100099b4:	2000      	movs	r0, #0
100099b6:	4770      	bx	lr

100099b8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100099b8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100099ba:	7800      	ldrb	r0, [r0, #0]
100099bc:	2800      	cmp	r0, #0
100099be:	d006      	beq.n	100099ce <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100099c0:	4803      	ldr	r0, [pc, #12]	; (100099d0 <ble_scan_report_handler+0x18>)
100099c2:	4b04      	ldr	r3, [pc, #16]	; (100099d4 <ble_scan_report_handler+0x1c>)
100099c4:	4798      	blx	r3
100099c6:	4804      	ldr	r0, [pc, #16]	; (100099d8 <ble_scan_report_handler+0x20>)
100099c8:	4b04      	ldr	r3, [pc, #16]	; (100099dc <ble_scan_report_handler+0x24>)
100099ca:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100099cc:	20e2      	movs	r0, #226	; 0xe2
}
100099ce:	bd10      	pop	{r4, pc}
100099d0:	10012770 	.word	0x10012770
100099d4:	100115c9 	.word	0x100115c9
100099d8:	10012b78 	.word	0x10012b78
100099dc:	100114a9 	.word	0x100114a9

100099e0 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
100099e0:	b510      	push	{r4, lr}
100099e2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100099e4:	78c0      	ldrb	r0, [r0, #3]
100099e6:	2800      	cmp	r0, #0
100099e8:	d008      	beq.n	100099fc <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
100099ea:	4805      	ldr	r0, [pc, #20]	; (10009a00 <ble_mtu_changed_cmd_complete_handler+0x20>)
100099ec:	4b05      	ldr	r3, [pc, #20]	; (10009a04 <ble_mtu_changed_cmd_complete_handler+0x24>)
100099ee:	4798      	blx	r3
100099f0:	78a2      	ldrb	r2, [r4, #2]
100099f2:	8821      	ldrh	r1, [r4, #0]
100099f4:	4804      	ldr	r0, [pc, #16]	; (10009a08 <ble_mtu_changed_cmd_complete_handler+0x28>)
100099f6:	4b05      	ldr	r3, [pc, #20]	; (10009a0c <ble_mtu_changed_cmd_complete_handler+0x2c>)
100099f8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
100099fa:	20e2      	movs	r0, #226	; 0xe2
}
100099fc:	bd10      	pop	{r4, pc}
100099fe:	46c0      	nop			; (mov r8, r8)
10009a00:	10012770 	.word	0x10012770
10009a04:	100115c9 	.word	0x100115c9
10009a08:	10012b8c 	.word	0x10012b8c
10009a0c:	100114a9 	.word	0x100114a9

10009a10 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a12:	0004      	movs	r4, r0
10009a14:	4b19      	ldr	r3, [pc, #100]	; (10009a7c <ble_disconnected_state_handler+0x6c>)
10009a16:	229b      	movs	r2, #155	; 0x9b
10009a18:	0092      	lsls	r2, r2, #2
10009a1a:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009a1c:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009a1e:	2600      	movs	r6, #0
10009a20:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009a22:	001a      	movs	r2, r3
10009a24:	3a56      	subs	r2, #86	; 0x56
10009a26:	8811      	ldrh	r1, [r2, #0]
10009a28:	8822      	ldrh	r2, [r4, #0]
10009a2a:	4291      	cmp	r1, r2
10009a2c:	d119      	bne.n	10009a62 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009a2e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009a30:	2a05      	cmp	r2, #5
10009a32:	d001      	beq.n	10009a38 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009a34:	2a08      	cmp	r2, #8
10009a36:	d101      	bne.n	10009a3c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009a38:	7007      	strb	r7, [r0, #0]
10009a3a:	e012      	b.n	10009a62 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009a3c:	2a07      	cmp	r2, #7
10009a3e:	d80f      	bhi.n	10009a60 <ble_disconnected_state_handler+0x50>
10009a40:	0092      	lsls	r2, r2, #2
10009a42:	490f      	ldr	r1, [pc, #60]	; (10009a80 <ble_disconnected_state_handler+0x70>)
10009a44:	588a      	ldr	r2, [r1, r2]
10009a46:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009a48:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009a4a:	4a0e      	ldr	r2, [pc, #56]	; (10009a84 <ble_disconnected_state_handler+0x74>)
10009a4c:	7812      	ldrb	r2, [r2, #0]
10009a4e:	2a00      	cmp	r2, #0
10009a50:	d007      	beq.n	10009a62 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009a52:	4a0c      	ldr	r2, [pc, #48]	; (10009a84 <ble_disconnected_state_handler+0x74>)
10009a54:	7812      	ldrb	r2, [r2, #0]
10009a56:	3a01      	subs	r2, #1
10009a58:	b2d2      	uxtb	r2, r2
10009a5a:	490a      	ldr	r1, [pc, #40]	; (10009a84 <ble_disconnected_state_handler+0x74>)
10009a5c:	700a      	strb	r2, [r1, #0]
10009a5e:	e000      	b.n	10009a62 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009a60:	7006      	strb	r6, [r0, #0]
10009a62:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a64:	42ab      	cmp	r3, r5
10009a66:	d1db      	bne.n	10009a20 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009a68:	4807      	ldr	r0, [pc, #28]	; (10009a88 <ble_disconnected_state_handler+0x78>)
10009a6a:	4b08      	ldr	r3, [pc, #32]	; (10009a8c <ble_disconnected_state_handler+0x7c>)
10009a6c:	4798      	blx	r3
10009a6e:	8822      	ldrh	r2, [r4, #0]
10009a70:	78a1      	ldrb	r1, [r4, #2]
10009a72:	4807      	ldr	r0, [pc, #28]	; (10009a90 <ble_disconnected_state_handler+0x80>)
10009a74:	4b07      	ldr	r3, [pc, #28]	; (10009a94 <ble_disconnected_state_handler+0x84>)
10009a76:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009a78:	2000      	movs	r0, #0
10009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009a7c:	10014ce6 	.word	0x10014ce6
10009a80:	10012a08 	.word	0x10012a08
10009a84:	10014ef4 	.word	0x10014ef4
10009a88:	10012770 	.word	0x10012770
10009a8c:	100115c9 	.word	0x100115c9
10009a90:	10012bc4 	.word	0x10012bc4
10009a94:	100114a9 	.word	0x100114a9

10009a98 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a9a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009a9c:	8801      	ldrh	r1, [r0, #0]
10009a9e:	4b28      	ldr	r3, [pc, #160]	; (10009b40 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009aa0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009aa2:	891a      	ldrh	r2, [r3, #8]
10009aa4:	428a      	cmp	r2, r1
10009aa6:	d104      	bne.n	10009ab2 <ble_encryption_status_change_handler+0x1a>
10009aa8:	001a      	movs	r2, r3
10009aaa:	325e      	adds	r2, #94	; 0x5e
10009aac:	7812      	ldrb	r2, [r2, #0]
10009aae:	2a06      	cmp	r2, #6
10009ab0:	d02e      	beq.n	10009b10 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ab2:	3401      	adds	r4, #1
10009ab4:	b2e4      	uxtb	r4, r4
10009ab6:	337c      	adds	r3, #124	; 0x7c
10009ab8:	2c05      	cmp	r4, #5
10009aba:	d1f2      	bne.n	10009aa2 <ble_encryption_status_change_handler+0xa>
10009abc:	e039      	b.n	10009b32 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009abe:	4920      	ldr	r1, [pc, #128]	; (10009b40 <ble_encryption_status_change_handler+0xa8>)
10009ac0:	0163      	lsls	r3, r4, #5
10009ac2:	1b1a      	subs	r2, r3, r4
10009ac4:	0092      	lsls	r2, r2, #2
10009ac6:	188a      	adds	r2, r1, r2
10009ac8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009aca:	0014      	movs	r4, r2
10009acc:	345e      	adds	r4, #94	; 0x5e
10009ace:	2307      	movs	r3, #7
10009ad0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009ad2:	481c      	ldr	r0, [pc, #112]	; (10009b44 <ble_encryption_status_change_handler+0xac>)
10009ad4:	4b1c      	ldr	r3, [pc, #112]	; (10009b48 <ble_encryption_status_change_handler+0xb0>)
10009ad6:	4798      	blx	r3
10009ad8:	481c      	ldr	r0, [pc, #112]	; (10009b4c <ble_encryption_status_change_handler+0xb4>)
10009ada:	4b1d      	ldr	r3, [pc, #116]	; (10009b50 <ble_encryption_status_change_handler+0xb8>)
10009adc:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009ade:	25e2      	movs	r5, #226	; 0xe2
10009ae0:	e02b      	b.n	10009b3a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009ae2:	4818      	ldr	r0, [pc, #96]	; (10009b44 <ble_encryption_status_change_handler+0xac>)
10009ae4:	4b18      	ldr	r3, [pc, #96]	; (10009b48 <ble_encryption_status_change_handler+0xb0>)
10009ae6:	4798      	blx	r3
10009ae8:	481a      	ldr	r0, [pc, #104]	; (10009b54 <ble_encryption_status_change_handler+0xbc>)
10009aea:	4b19      	ldr	r3, [pc, #100]	; (10009b50 <ble_encryption_status_change_handler+0xb8>)
10009aec:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009aee:	4914      	ldr	r1, [pc, #80]	; (10009b40 <ble_encryption_status_change_handler+0xa8>)
10009af0:	0163      	lsls	r3, r4, #5
10009af2:	1b1a      	subs	r2, r3, r4
10009af4:	0092      	lsls	r2, r2, #2
10009af6:	188a      	adds	r2, r1, r2
10009af8:	0010      	movs	r0, r2
10009afa:	305e      	adds	r0, #94	; 0x5e
10009afc:	2708      	movs	r7, #8
10009afe:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009b00:	78f0      	ldrb	r0, [r6, #3]
10009b02:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009b04:	78b2      	ldrb	r2, [r6, #2]
10009b06:	1b1c      	subs	r4, r3, r4
10009b08:	00a4      	lsls	r4, r4, #2
10009b0a:	190c      	adds	r4, r1, r4
10009b0c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009b0e:	e014      	b.n	10009b3a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009b10:	78b5      	ldrb	r5, [r6, #2]
10009b12:	2d00      	cmp	r5, #0
10009b14:	d0e5      	beq.n	10009ae2 <ble_encryption_status_change_handler+0x4a>
10009b16:	e7d2      	b.n	10009abe <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009b18:	4e0a      	ldr	r6, [pc, #40]	; (10009b44 <ble_encryption_status_change_handler+0xac>)
10009b1a:	0030      	movs	r0, r6
10009b1c:	4d0a      	ldr	r5, [pc, #40]	; (10009b48 <ble_encryption_status_change_handler+0xb0>)
10009b1e:	47a8      	blx	r5
10009b20:	480c      	ldr	r0, [pc, #48]	; (10009b54 <ble_encryption_status_change_handler+0xbc>)
10009b22:	4c0b      	ldr	r4, [pc, #44]	; (10009b50 <ble_encryption_status_change_handler+0xb8>)
10009b24:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009b26:	0030      	movs	r0, r6
10009b28:	47a8      	blx	r5
10009b2a:	480b      	ldr	r0, [pc, #44]	; (10009b58 <ble_encryption_status_change_handler+0xc0>)
10009b2c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009b2e:	25e2      	movs	r5, #226	; 0xe2
10009b30:	e003      	b.n	10009b3a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009b32:	78b5      	ldrb	r5, [r6, #2]
10009b34:	2d00      	cmp	r5, #0
10009b36:	d1c2      	bne.n	10009abe <ble_encryption_status_change_handler+0x26>
10009b38:	e7ee      	b.n	10009b18 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009b3a:	0028      	movs	r0, r5
10009b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009b3e:	46c0      	nop			; (mov r8, r8)
10009b40:	10014c88 	.word	0x10014c88
10009b44:	10012770 	.word	0x10012770
10009b48:	100115c9 	.word	0x100115c9
10009b4c:	10012bf4 	.word	0x10012bf4
10009b50:	100114a9 	.word	0x100114a9
10009b54:	10012c08 	.word	0x10012c08
10009b58:	10012c2c 	.word	0x10012c2c

10009b5c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009b5c:	b510      	push	{r4, lr}
10009b5e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009b60:	4b15      	ldr	r3, [pc, #84]	; (10009bb8 <ble_scan_info_handler+0x5c>)
10009b62:	781b      	ldrb	r3, [r3, #0]
10009b64:	b2db      	uxtb	r3, r3
10009b66:	2b13      	cmp	r3, #19
10009b68:	d812      	bhi.n	10009b90 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009b6a:	4c13      	ldr	r4, [pc, #76]	; (10009bb8 <ble_scan_info_handler+0x5c>)
10009b6c:	7823      	ldrb	r3, [r4, #0]
10009b6e:	b2db      	uxtb	r3, r3
10009b70:	0098      	lsls	r0, r3, #2
10009b72:	18c0      	adds	r0, r0, r3
10009b74:	00c0      	lsls	r0, r0, #3
10009b76:	18c3      	adds	r3, r0, r3
10009b78:	4810      	ldr	r0, [pc, #64]	; (10009bbc <ble_scan_info_handler+0x60>)
10009b7a:	1818      	adds	r0, r3, r0
10009b7c:	2229      	movs	r2, #41	; 0x29
10009b7e:	4b10      	ldr	r3, [pc, #64]	; (10009bc0 <ble_scan_info_handler+0x64>)
10009b80:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009b82:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009b84:	7823      	ldrb	r3, [r4, #0]
10009b86:	3301      	adds	r3, #1
10009b88:	b2db      	uxtb	r3, r3
10009b8a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009b8c:	2300      	movs	r3, #0
10009b8e:	e011      	b.n	10009bb4 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009b90:	480c      	ldr	r0, [pc, #48]	; (10009bc4 <ble_scan_info_handler+0x68>)
10009b92:	4b0d      	ldr	r3, [pc, #52]	; (10009bc8 <ble_scan_info_handler+0x6c>)
10009b94:	4798      	blx	r3
10009b96:	480d      	ldr	r0, [pc, #52]	; (10009bcc <ble_scan_info_handler+0x70>)
10009b98:	4b0d      	ldr	r3, [pc, #52]	; (10009bd0 <ble_scan_info_handler+0x74>)
10009b9a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009b9c:	4b0d      	ldr	r3, [pc, #52]	; (10009bd4 <ble_scan_info_handler+0x78>)
10009b9e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009ba0:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009ba2:	2800      	cmp	r0, #0
10009ba4:	d006      	beq.n	10009bb4 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009ba6:	4807      	ldr	r0, [pc, #28]	; (10009bc4 <ble_scan_info_handler+0x68>)
10009ba8:	4b07      	ldr	r3, [pc, #28]	; (10009bc8 <ble_scan_info_handler+0x6c>)
10009baa:	4798      	blx	r3
10009bac:	480a      	ldr	r0, [pc, #40]	; (10009bd8 <ble_scan_info_handler+0x7c>)
10009bae:	4b08      	ldr	r3, [pc, #32]	; (10009bd0 <ble_scan_info_handler+0x74>)
10009bb0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009bb2:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009bb4:	0018      	movs	r0, r3
10009bb6:	bd10      	pop	{r4, pc}
10009bb8:	10014a9c 	.word	0x10014a9c
10009bbc:	10014f6c 	.word	0x10014f6c
10009bc0:	1001134f 	.word	0x1001134f
10009bc4:	10012770 	.word	0x10012770
10009bc8:	100115c9 	.word	0x100115c9
10009bcc:	10012c54 	.word	0x10012c54
10009bd0:	100114a9 	.word	0x100114a9
10009bd4:	1000d8b9 	.word	0x1000d8b9
10009bd8:	10012c8c 	.word	0x10012c8c

10009bdc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009bde:	464f      	mov	r7, r9
10009be0:	4646      	mov	r6, r8
10009be2:	b4c0      	push	{r6, r7}
10009be4:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009be6:	8841      	ldrh	r1, [r0, #2]
10009be8:	4b3a      	ldr	r3, [pc, #232]	; (10009cd4 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009bea:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009bec:	891a      	ldrh	r2, [r3, #8]
10009bee:	428a      	cmp	r2, r1
10009bf0:	d104      	bne.n	10009bfc <ble_pair_done_handler+0x20>
10009bf2:	001a      	movs	r2, r3
10009bf4:	325e      	adds	r2, #94	; 0x5e
10009bf6:	7812      	ldrb	r2, [r2, #0]
10009bf8:	2a03      	cmp	r2, #3
10009bfa:	d062      	beq.n	10009cc2 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009bfc:	3401      	adds	r4, #1
10009bfe:	b2e4      	uxtb	r4, r4
10009c00:	337c      	adds	r3, #124	; 0x7c
10009c02:	2c05      	cmp	r4, #5
10009c04:	d1f2      	bne.n	10009bec <ble_pair_done_handler+0x10>
10009c06:	e02b      	b.n	10009c60 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009c08:	0163      	lsls	r3, r4, #5
10009c0a:	1b1c      	subs	r4, r3, r4
10009c0c:	00a4      	lsls	r4, r4, #2
10009c0e:	4b31      	ldr	r3, [pc, #196]	; (10009cd4 <ble_pair_done_handler+0xf8>)
10009c10:	191c      	adds	r4, r3, r4
10009c12:	345e      	adds	r4, #94	; 0x5e
10009c14:	7823      	ldrb	r3, [r4, #0]
10009c16:	2b01      	cmp	r3, #1
10009c18:	d913      	bls.n	10009c42 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009c1a:	482f      	ldr	r0, [pc, #188]	; (10009cd8 <ble_pair_done_handler+0xfc>)
10009c1c:	4b2f      	ldr	r3, [pc, #188]	; (10009cdc <ble_pair_done_handler+0x100>)
10009c1e:	4798      	blx	r3
10009c20:	482f      	ldr	r0, [pc, #188]	; (10009ce0 <ble_pair_done_handler+0x104>)
10009c22:	4b30      	ldr	r3, [pc, #192]	; (10009ce4 <ble_pair_done_handler+0x108>)
10009c24:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009c26:	8868      	ldrh	r0, [r5, #2]
10009c28:	2113      	movs	r1, #19
10009c2a:	4b2f      	ldr	r3, [pc, #188]	; (10009ce8 <ble_pair_done_handler+0x10c>)
10009c2c:	4798      	blx	r3
10009c2e:	1e06      	subs	r6, r0, #0
10009c30:	d04b      	beq.n	10009cca <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009c32:	4829      	ldr	r0, [pc, #164]	; (10009cd8 <ble_pair_done_handler+0xfc>)
10009c34:	4b29      	ldr	r3, [pc, #164]	; (10009cdc <ble_pair_done_handler+0x100>)
10009c36:	4798      	blx	r3
10009c38:	482c      	ldr	r0, [pc, #176]	; (10009cec <ble_pair_done_handler+0x110>)
10009c3a:	4b2a      	ldr	r3, [pc, #168]	; (10009ce4 <ble_pair_done_handler+0x108>)
10009c3c:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009c3e:	26e2      	movs	r6, #226	; 0xe2
10009c40:	e043      	b.n	10009cca <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009c42:	2600      	movs	r6, #0
10009c44:	e041      	b.n	10009cca <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009c46:	4e24      	ldr	r6, [pc, #144]	; (10009cd8 <ble_pair_done_handler+0xfc>)
10009c48:	0030      	movs	r0, r6
10009c4a:	4d24      	ldr	r5, [pc, #144]	; (10009cdc <ble_pair_done_handler+0x100>)
10009c4c:	47a8      	blx	r5
10009c4e:	4828      	ldr	r0, [pc, #160]	; (10009cf0 <ble_pair_done_handler+0x114>)
10009c50:	4c24      	ldr	r4, [pc, #144]	; (10009ce4 <ble_pair_done_handler+0x108>)
10009c52:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009c54:	0030      	movs	r0, r6
10009c56:	47a8      	blx	r5
10009c58:	4826      	ldr	r0, [pc, #152]	; (10009cf4 <ble_pair_done_handler+0x118>)
10009c5a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009c5c:	26e2      	movs	r6, #226	; 0xe2
10009c5e:	e034      	b.n	10009cca <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009c60:	792b      	ldrb	r3, [r5, #4]
10009c62:	2b00      	cmp	r3, #0
10009c64:	d1d0      	bne.n	10009c08 <ble_pair_done_handler+0x2c>
10009c66:	e7ee      	b.n	10009c46 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009c68:	481b      	ldr	r0, [pc, #108]	; (10009cd8 <ble_pair_done_handler+0xfc>)
10009c6a:	4b1c      	ldr	r3, [pc, #112]	; (10009cdc <ble_pair_done_handler+0x100>)
10009c6c:	4798      	blx	r3
10009c6e:	4820      	ldr	r0, [pc, #128]	; (10009cf0 <ble_pair_done_handler+0x114>)
10009c70:	4b1c      	ldr	r3, [pc, #112]	; (10009ce4 <ble_pair_done_handler+0x108>)
10009c72:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009c74:	782a      	ldrb	r2, [r5, #0]
10009c76:	4b17      	ldr	r3, [pc, #92]	; (10009cd4 <ble_pair_done_handler+0xf8>)
10009c78:	4699      	mov	r9, r3
10009c7a:	0167      	lsls	r7, r4, #5
10009c7c:	1b3b      	subs	r3, r7, r4
10009c7e:	009b      	lsls	r3, r3, #2
10009c80:	444b      	add	r3, r9
10009c82:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009c84:	792a      	ldrb	r2, [r5, #4]
10009c86:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009c88:	335e      	adds	r3, #94	; 0x5e
10009c8a:	2205      	movs	r2, #5
10009c8c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009c8e:	1b38      	subs	r0, r7, r4
10009c90:	0080      	lsls	r0, r0, #2
10009c92:	4448      	add	r0, r9
10009c94:	3036      	adds	r0, #54	; 0x36
10009c96:	0029      	movs	r1, r5
10009c98:	3122      	adds	r1, #34	; 0x22
10009c9a:	320b      	adds	r2, #11
10009c9c:	4b16      	ldr	r3, [pc, #88]	; (10009cf8 <ble_pair_done_handler+0x11c>)
10009c9e:	4698      	mov	r8, r3
10009ca0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009ca2:	1b38      	subs	r0, r7, r4
10009ca4:	0080      	lsls	r0, r0, #2
10009ca6:	4448      	add	r0, r9
10009ca8:	3046      	adds	r0, #70	; 0x46
10009caa:	0029      	movs	r1, r5
10009cac:	3132      	adds	r1, #50	; 0x32
10009cae:	2217      	movs	r2, #23
10009cb0:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009cb2:	1b38      	subs	r0, r7, r4
10009cb4:	0080      	lsls	r0, r0, #2
10009cb6:	4448      	add	r0, r9
10009cb8:	301a      	adds	r0, #26
10009cba:	1da9      	adds	r1, r5, #6
10009cbc:	221c      	movs	r2, #28
10009cbe:	47c0      	blx	r8
10009cc0:	e003      	b.n	10009cca <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009cc2:	792e      	ldrb	r6, [r5, #4]
10009cc4:	2e00      	cmp	r6, #0
10009cc6:	d0cf      	beq.n	10009c68 <ble_pair_done_handler+0x8c>
10009cc8:	e79e      	b.n	10009c08 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009cca:	0030      	movs	r0, r6
10009ccc:	bc0c      	pop	{r2, r3}
10009cce:	4690      	mov	r8, r2
10009cd0:	4699      	mov	r9, r3
10009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009cd4:	10014c88 	.word	0x10014c88
10009cd8:	10012770 	.word	0x10012770
10009cdc:	100115c9 	.word	0x100115c9
10009ce0:	10012ca4 	.word	0x10012ca4
10009ce4:	100114a9 	.word	0x100114a9
10009ce8:	1000d8d9 	.word	0x1000d8d9
10009cec:	10012cc4 	.word	0x10012cc4
10009cf0:	10012ce0 	.word	0x10012ce0
10009cf4:	10012d0c 	.word	0x10012d0c
10009cf8:	1001134f 	.word	0x1001134f

10009cfc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009cfc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009cfe:	8800      	ldrh	r0, [r0, #0]
10009d00:	2378      	movs	r3, #120	; 0x78
10009d02:	2201      	movs	r2, #1
10009d04:	2101      	movs	r1, #1
10009d06:	4c02      	ldr	r4, [pc, #8]	; (10009d10 <ble_conn_param_update_req+0x14>)
10009d08:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009d0a:	2000      	movs	r0, #0
10009d0c:	bd10      	pop	{r4, pc}
10009d0e:	46c0      	nop			; (mov r8, r8)
10009d10:	1000d8f9 	.word	0x1000d8f9

10009d14 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009d14:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d16:	4657      	mov	r7, sl
10009d18:	464e      	mov	r6, r9
10009d1a:	4645      	mov	r5, r8
10009d1c:	b4e0      	push	{r5, r6, r7}
10009d1e:	b084      	sub	sp, #16
10009d20:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009d22:	2209      	movs	r2, #9
10009d24:	2100      	movs	r1, #0
10009d26:	a801      	add	r0, sp, #4
10009d28:	4b6b      	ldr	r3, [pc, #428]	; (10009ed8 <ble_slave_security_request_handler+0x1c4>)
10009d2a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009d2c:	8825      	ldrh	r5, [r4, #0]
10009d2e:	496b      	ldr	r1, [pc, #428]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009d30:	000a      	movs	r2, r1
10009d32:	2300      	movs	r3, #0
10009d34:	8910      	ldrh	r0, [r2, #8]
10009d36:	42a8      	cmp	r0, r5
10009d38:	d116      	bne.n	10009d68 <ble_slave_security_request_handler+0x54>
10009d3a:	0010      	movs	r0, r2
10009d3c:	305e      	adds	r0, #94	; 0x5e
10009d3e:	7800      	ldrb	r0, [r0, #0]
10009d40:	2802      	cmp	r0, #2
10009d42:	d111      	bne.n	10009d68 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009d44:	4865      	ldr	r0, [pc, #404]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009d46:	015a      	lsls	r2, r3, #5
10009d48:	1ad6      	subs	r6, r2, r3
10009d4a:	00b6      	lsls	r6, r6, #2
10009d4c:	1986      	adds	r6, r0, r6
10009d4e:	365e      	adds	r6, #94	; 0x5e
10009d50:	2206      	movs	r2, #6
10009d52:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009d54:	32f9      	adds	r2, #249	; 0xf9
10009d56:	4013      	ands	r3, r2
10009d58:	015a      	lsls	r2, r3, #5
10009d5a:	1ad2      	subs	r2, r2, r3
10009d5c:	0092      	lsls	r2, r2, #2
10009d5e:	1882      	adds	r2, r0, r2
10009d60:	7d12      	ldrb	r2, [r2, #20]
10009d62:	07d0      	lsls	r0, r2, #31
10009d64:	d405      	bmi.n	10009d72 <ble_slave_security_request_handler+0x5e>
10009d66:	e01b      	b.n	10009da0 <ble_slave_security_request_handler+0x8c>
10009d68:	3301      	adds	r3, #1
10009d6a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d6c:	2b05      	cmp	r3, #5
10009d6e:	d1e1      	bne.n	10009d34 <ble_slave_security_request_handler+0x20>
10009d70:	e01e      	b.n	10009db0 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009d72:	78e0      	ldrb	r0, [r4, #3]
10009d74:	2800      	cmp	r0, #0
10009d76:	d013      	beq.n	10009da0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009d78:	0159      	lsls	r1, r3, #5
10009d7a:	1ac9      	subs	r1, r1, r3
10009d7c:	008b      	lsls	r3, r1, #2
10009d7e:	4957      	ldr	r1, [pc, #348]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009d80:	18c9      	adds	r1, r1, r3
10009d82:	311a      	adds	r1, #26
10009d84:	8820      	ldrh	r0, [r4, #0]
10009d86:	4b56      	ldr	r3, [pc, #344]	; (10009ee0 <ble_slave_security_request_handler+0x1cc>)
10009d88:	4798      	blx	r3
10009d8a:	2800      	cmp	r0, #0
10009d8c:	d100      	bne.n	10009d90 <ble_slave_security_request_handler+0x7c>
10009d8e:	e09d      	b.n	10009ecc <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009d90:	4854      	ldr	r0, [pc, #336]	; (10009ee4 <ble_slave_security_request_handler+0x1d0>)
10009d92:	4b55      	ldr	r3, [pc, #340]	; (10009ee8 <ble_slave_security_request_handler+0x1d4>)
10009d94:	4798      	blx	r3
10009d96:	4855      	ldr	r0, [pc, #340]	; (10009eec <ble_slave_security_request_handler+0x1d8>)
10009d98:	4b55      	ldr	r3, [pc, #340]	; (10009ef0 <ble_slave_security_request_handler+0x1dc>)
10009d9a:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009d9c:	20e2      	movs	r0, #226	; 0xe2
10009d9e:	e095      	b.n	10009ecc <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009da0:	015a      	lsls	r2, r3, #5
10009da2:	1ad3      	subs	r3, r2, r3
10009da4:	009b      	lsls	r3, r3, #2
10009da6:	4a4d      	ldr	r2, [pc, #308]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009da8:	18d3      	adds	r3, r2, r3
10009daa:	335e      	adds	r3, #94	; 0x5e
10009dac:	2202      	movs	r2, #2
10009dae:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009db0:	8825      	ldrh	r5, [r4, #0]
10009db2:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009db4:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009db6:	0016      	movs	r6, r2
10009db8:	8908      	ldrh	r0, [r1, #8]
10009dba:	42a8      	cmp	r0, r5
10009dbc:	d10d      	bne.n	10009dda <ble_slave_security_request_handler+0xc6>
10009dbe:	0008      	movs	r0, r1
10009dc0:	305e      	adds	r0, #94	; 0x5e
10009dc2:	7800      	ldrb	r0, [r0, #0]
10009dc4:	2802      	cmp	r0, #2
10009dc6:	d108      	bne.n	10009dda <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009dc8:	0152      	lsls	r2, r2, #5
10009dca:	1b92      	subs	r2, r2, r6
10009dcc:	0096      	lsls	r6, r2, #2
10009dce:	4a43      	ldr	r2, [pc, #268]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009dd0:	1992      	adds	r2, r2, r6
10009dd2:	325e      	adds	r2, #94	; 0x5e
10009dd4:	2103      	movs	r1, #3
10009dd6:	7011      	strb	r1, [r2, #0]
			break;
10009dd8:	e005      	b.n	10009de6 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009dda:	3301      	adds	r3, #1
10009ddc:	b2db      	uxtb	r3, r3
10009dde:	3201      	adds	r2, #1
10009de0:	317c      	adds	r1, #124	; 0x7c
10009de2:	2b05      	cmp	r3, #5
10009de4:	d1e7      	bne.n	10009db6 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009de6:	aa01      	add	r2, sp, #4
10009de8:	2102      	movs	r1, #2
10009dea:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009dec:	78e1      	ldrb	r1, [r4, #3]
10009dee:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009df0:	2101      	movs	r1, #1
10009df2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009df4:	3103      	adds	r1, #3
10009df6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009df8:	001f      	movs	r7, r3
10009dfa:	015a      	lsls	r2, r3, #5
10009dfc:	1ad2      	subs	r2, r2, r3
10009dfe:	0092      	lsls	r2, r2, #2
10009e00:	4936      	ldr	r1, [pc, #216]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009e02:	5c52      	ldrb	r2, [r2, r1]
10009e04:	2a02      	cmp	r2, #2
10009e06:	d104      	bne.n	10009e12 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009e08:	aa01      	add	r2, sp, #4
10009e0a:	2103      	movs	r1, #3
10009e0c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009e0e:	71d1      	strb	r1, [r2, #7]
10009e10:	e003      	b.n	10009e1a <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009e12:	aa01      	add	r2, sp, #4
10009e14:	2101      	movs	r1, #1
10009e16:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009e18:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009e1a:	aa01      	add	r2, sp, #4
10009e1c:	2110      	movs	r1, #16
10009e1e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009e20:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009e22:	017a      	lsls	r2, r7, #5
10009e24:	1bd2      	subs	r2, r2, r7
10009e26:	0092      	lsls	r2, r2, #2
10009e28:	492c      	ldr	r1, [pc, #176]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009e2a:	188a      	adds	r2, r1, r2
10009e2c:	7e12      	ldrb	r2, [r2, #24]
10009e2e:	2a40      	cmp	r2, #64	; 0x40
10009e30:	d134      	bne.n	10009e9c <ble_slave_security_request_handler+0x188>
10009e32:	015a      	lsls	r2, r3, #5
10009e34:	1ad3      	subs	r3, r2, r3
10009e36:	009b      	lsls	r3, r3, #2
10009e38:	469a      	mov	sl, r3
10009e3a:	001e      	movs	r6, r3
10009e3c:	3660      	adds	r6, #96	; 0x60
10009e3e:	1876      	adds	r6, r6, r1
10009e40:	4655      	mov	r5, sl
10009e42:	3568      	adds	r5, #104	; 0x68
10009e44:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009e46:	4b2b      	ldr	r3, [pc, #172]	; (10009ef4 <ble_slave_security_request_handler+0x1e0>)
10009e48:	4699      	mov	r9, r3
10009e4a:	230f      	movs	r3, #15
10009e4c:	4698      	mov	r8, r3
10009e4e:	47c8      	blx	r9
10009e50:	4643      	mov	r3, r8
10009e52:	4018      	ands	r0, r3
10009e54:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009e56:	47c8      	blx	r9
10009e58:	4643      	mov	r3, r8
10009e5a:	4018      	ands	r0, r3
10009e5c:	74b0      	strb	r0, [r6, #18]
10009e5e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009e60:	42ae      	cmp	r6, r5
10009e62:	d1f4      	bne.n	10009e4e <ble_slave_security_request_handler+0x13a>
10009e64:	4656      	mov	r6, sl
10009e66:	3670      	adds	r6, #112	; 0x70
10009e68:	4a1c      	ldr	r2, [pc, #112]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009e6a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009e6c:	4b21      	ldr	r3, [pc, #132]	; (10009ef4 <ble_slave_security_request_handler+0x1e0>)
10009e6e:	4699      	mov	r9, r3
10009e70:	230f      	movs	r3, #15
10009e72:	4698      	mov	r8, r3
10009e74:	47c8      	blx	r9
10009e76:	4643      	mov	r3, r8
10009e78:	4018      	ands	r0, r3
10009e7a:	7028      	strb	r0, [r5, #0]
10009e7c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009e7e:	42b5      	cmp	r5, r6
10009e80:	d1f8      	bne.n	10009e74 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009e82:	4b1c      	ldr	r3, [pc, #112]	; (10009ef4 <ble_slave_security_request_handler+0x1e0>)
10009e84:	4798      	blx	r3
10009e86:	017b      	lsls	r3, r7, #5
10009e88:	1bdb      	subs	r3, r3, r7
10009e8a:	009b      	lsls	r3, r3, #2
10009e8c:	4a13      	ldr	r2, [pc, #76]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009e8e:	18d3      	adds	r3, r2, r3
10009e90:	001a      	movs	r2, r3
10009e92:	3270      	adds	r2, #112	; 0x70
10009e94:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009e96:	337a      	adds	r3, #122	; 0x7a
10009e98:	2210      	movs	r2, #16
10009e9a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009e9c:	017a      	lsls	r2, r7, #5
10009e9e:	1bd7      	subs	r7, r2, r7
10009ea0:	00bf      	lsls	r7, r7, #2
10009ea2:	3760      	adds	r7, #96	; 0x60
10009ea4:	4a0d      	ldr	r2, [pc, #52]	; (10009edc <ble_slave_security_request_handler+0x1c8>)
10009ea6:	18ba      	adds	r2, r7, r2
10009ea8:	8820      	ldrh	r0, [r4, #0]
10009eaa:	2300      	movs	r3, #0
10009eac:	a901      	add	r1, sp, #4
10009eae:	4c12      	ldr	r4, [pc, #72]	; (10009ef8 <ble_slave_security_request_handler+0x1e4>)
10009eb0:	47a0      	blx	r4
10009eb2:	2800      	cmp	r0, #0
10009eb4:	d00a      	beq.n	10009ecc <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
10009eb6:	ab01      	add	r3, sp, #4
10009eb8:	2200      	movs	r2, #0
10009eba:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009ebc:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009ebe:	4809      	ldr	r0, [pc, #36]	; (10009ee4 <ble_slave_security_request_handler+0x1d0>)
10009ec0:	4b09      	ldr	r3, [pc, #36]	; (10009ee8 <ble_slave_security_request_handler+0x1d4>)
10009ec2:	4798      	blx	r3
10009ec4:	480d      	ldr	r0, [pc, #52]	; (10009efc <ble_slave_security_request_handler+0x1e8>)
10009ec6:	4b0a      	ldr	r3, [pc, #40]	; (10009ef0 <ble_slave_security_request_handler+0x1dc>)
10009ec8:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009eca:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009ecc:	b004      	add	sp, #16
10009ece:	bc1c      	pop	{r2, r3, r4}
10009ed0:	4690      	mov	r8, r2
10009ed2:	4699      	mov	r9, r3
10009ed4:	46a2      	mov	sl, r4
10009ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ed8:	10011361 	.word	0x10011361
10009edc:	10014c88 	.word	0x10014c88
10009ee0:	1000de31 	.word	0x1000de31
10009ee4:	10012770 	.word	0x10012770
10009ee8:	100115c9 	.word	0x100115c9
10009eec:	10012d3c 	.word	0x10012d3c
10009ef0:	100114a9 	.word	0x100114a9
10009ef4:	100115dd 	.word	0x100115dd
10009ef8:	1000dc45 	.word	0x1000dc45
10009efc:	10012d54 	.word	0x10012d54

10009f00 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f02:	465f      	mov	r7, fp
10009f04:	4656      	mov	r6, sl
10009f06:	464d      	mov	r5, r9
10009f08:	4644      	mov	r4, r8
10009f0a:	b4f0      	push	{r4, r5, r6, r7}
10009f0c:	b085      	sub	sp, #20
10009f0e:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f10:	8804      	ldrh	r4, [r0, #0]
10009f12:	4a49      	ldr	r2, [pc, #292]	; (1000a038 <ble_pair_request_handler+0x138>)
10009f14:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f16:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f18:	8910      	ldrh	r0, [r2, #8]
10009f1a:	42a0      	cmp	r0, r4
10009f1c:	d10d      	bne.n	10009f3a <ble_pair_request_handler+0x3a>
10009f1e:	0010      	movs	r0, r2
10009f20:	305e      	adds	r0, #94	; 0x5e
10009f22:	7800      	ldrb	r0, [r0, #0]
10009f24:	2802      	cmp	r0, #2
10009f26:	d108      	bne.n	10009f3a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009f28:	014a      	lsls	r2, r1, #5
10009f2a:	1a52      	subs	r2, r2, r1
10009f2c:	0095      	lsls	r5, r2, #2
10009f2e:	4a42      	ldr	r2, [pc, #264]	; (1000a038 <ble_pair_request_handler+0x138>)
10009f30:	1952      	adds	r2, r2, r5
10009f32:	325e      	adds	r2, #94	; 0x5e
10009f34:	2103      	movs	r1, #3
10009f36:	7011      	strb	r1, [r2, #0]
			break;
10009f38:	e005      	b.n	10009f46 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f3a:	3301      	adds	r3, #1
10009f3c:	b2db      	uxtb	r3, r3
10009f3e:	3101      	adds	r1, #1
10009f40:	327c      	adds	r2, #124	; 0x7c
10009f42:	2b05      	cmp	r3, #5
10009f44:	d1e8      	bne.n	10009f18 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009f46:	aa01      	add	r2, sp, #4
10009f48:	2102      	movs	r1, #2
10009f4a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009f4c:	3901      	subs	r1, #1
10009f4e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009f50:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009f52:	2100      	movs	r1, #0
10009f54:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009f56:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009f58:	001f      	movs	r7, r3
10009f5a:	015a      	lsls	r2, r3, #5
10009f5c:	1ad2      	subs	r2, r2, r3
10009f5e:	0092      	lsls	r2, r2, #2
10009f60:	4935      	ldr	r1, [pc, #212]	; (1000a038 <ble_pair_request_handler+0x138>)
10009f62:	5c52      	ldrb	r2, [r2, r1]
10009f64:	2a02      	cmp	r2, #2
10009f66:	d104      	bne.n	10009f72 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009f68:	aa01      	add	r2, sp, #4
10009f6a:	2103      	movs	r1, #3
10009f6c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009f6e:	71d1      	strb	r1, [r2, #7]
10009f70:	e003      	b.n	10009f7a <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009f72:	aa01      	add	r2, sp, #4
10009f74:	2101      	movs	r1, #1
10009f76:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009f78:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
10009f7a:	aa01      	add	r2, sp, #4
10009f7c:	2110      	movs	r1, #16
10009f7e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009f80:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009f82:	017a      	lsls	r2, r7, #5
10009f84:	1bd2      	subs	r2, r2, r7
10009f86:	0092      	lsls	r2, r2, #2
10009f88:	492b      	ldr	r1, [pc, #172]	; (1000a038 <ble_pair_request_handler+0x138>)
10009f8a:	188a      	adds	r2, r1, r2
10009f8c:	7e12      	ldrb	r2, [r2, #24]
10009f8e:	2a40      	cmp	r2, #64	; 0x40
10009f90:	d131      	bne.n	10009ff6 <ble_pair_request_handler+0xf6>
10009f92:	015a      	lsls	r2, r3, #5
10009f94:	1ad3      	subs	r3, r2, r3
10009f96:	009b      	lsls	r3, r3, #2
10009f98:	469a      	mov	sl, r3
10009f9a:	001d      	movs	r5, r3
10009f9c:	3560      	adds	r5, #96	; 0x60
10009f9e:	186d      	adds	r5, r5, r1
10009fa0:	4654      	mov	r4, sl
10009fa2:	3468      	adds	r4, #104	; 0x68
10009fa4:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009fa6:	4b25      	ldr	r3, [pc, #148]	; (1000a03c <ble_pair_request_handler+0x13c>)
10009fa8:	4699      	mov	r9, r3
10009faa:	260f      	movs	r6, #15
10009fac:	47c8      	blx	r9
10009fae:	4030      	ands	r0, r6
10009fb0:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009fb2:	47c8      	blx	r9
10009fb4:	4030      	ands	r0, r6
10009fb6:	74a8      	strb	r0, [r5, #18]
10009fb8:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009fba:	42a5      	cmp	r5, r4
10009fbc:	d1f6      	bne.n	10009fac <ble_pair_request_handler+0xac>
10009fbe:	4655      	mov	r5, sl
10009fc0:	3570      	adds	r5, #112	; 0x70
10009fc2:	4a1d      	ldr	r2, [pc, #116]	; (1000a038 <ble_pair_request_handler+0x138>)
10009fc4:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009fc6:	4b1d      	ldr	r3, [pc, #116]	; (1000a03c <ble_pair_request_handler+0x13c>)
10009fc8:	4699      	mov	r9, r3
10009fca:	230f      	movs	r3, #15
10009fcc:	4698      	mov	r8, r3
10009fce:	47c8      	blx	r9
10009fd0:	4643      	mov	r3, r8
10009fd2:	4018      	ands	r0, r3
10009fd4:	7020      	strb	r0, [r4, #0]
10009fd6:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009fd8:	42ac      	cmp	r4, r5
10009fda:	d1f8      	bne.n	10009fce <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009fdc:	4b17      	ldr	r3, [pc, #92]	; (1000a03c <ble_pair_request_handler+0x13c>)
10009fde:	4798      	blx	r3
10009fe0:	017b      	lsls	r3, r7, #5
10009fe2:	1bdb      	subs	r3, r3, r7
10009fe4:	009b      	lsls	r3, r3, #2
10009fe6:	4a14      	ldr	r2, [pc, #80]	; (1000a038 <ble_pair_request_handler+0x138>)
10009fe8:	18d3      	adds	r3, r2, r3
10009fea:	001a      	movs	r2, r3
10009fec:	3270      	adds	r2, #112	; 0x70
10009fee:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009ff0:	337a      	adds	r3, #122	; 0x7a
10009ff2:	2210      	movs	r2, #16
10009ff4:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009ff6:	017a      	lsls	r2, r7, #5
10009ff8:	1bd7      	subs	r7, r2, r7
10009ffa:	00bf      	lsls	r7, r7, #2
10009ffc:	3760      	adds	r7, #96	; 0x60
10009ffe:	4a0e      	ldr	r2, [pc, #56]	; (1000a038 <ble_pair_request_handler+0x138>)
1000a000:	18ba      	adds	r2, r7, r2
1000a002:	465b      	mov	r3, fp
1000a004:	8818      	ldrh	r0, [r3, #0]
1000a006:	2300      	movs	r3, #0
1000a008:	a901      	add	r1, sp, #4
1000a00a:	4c0d      	ldr	r4, [pc, #52]	; (1000a040 <ble_pair_request_handler+0x140>)
1000a00c:	47a0      	blx	r4
1000a00e:	2800      	cmp	r0, #0
1000a010:	d00a      	beq.n	1000a028 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a012:	ab01      	add	r3, sp, #4
1000a014:	2200      	movs	r2, #0
1000a016:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a018:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a01a:	480a      	ldr	r0, [pc, #40]	; (1000a044 <ble_pair_request_handler+0x144>)
1000a01c:	4b0a      	ldr	r3, [pc, #40]	; (1000a048 <ble_pair_request_handler+0x148>)
1000a01e:	4798      	blx	r3
1000a020:	480a      	ldr	r0, [pc, #40]	; (1000a04c <ble_pair_request_handler+0x14c>)
1000a022:	4b0b      	ldr	r3, [pc, #44]	; (1000a050 <ble_pair_request_handler+0x150>)
1000a024:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a026:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a028:	b005      	add	sp, #20
1000a02a:	bc3c      	pop	{r2, r3, r4, r5}
1000a02c:	4690      	mov	r8, r2
1000a02e:	4699      	mov	r9, r3
1000a030:	46a2      	mov	sl, r4
1000a032:	46ab      	mov	fp, r5
1000a034:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a036:	46c0      	nop			; (mov r8, r8)
1000a038:	10014c88 	.word	0x10014c88
1000a03c:	100115dd 	.word	0x100115dd
1000a040:	1000dc45 	.word	0x1000dc45
1000a044:	10012770 	.word	0x10012770
1000a048:	100115c9 	.word	0x100115c9
1000a04c:	10012d80 	.word	0x10012d80
1000a050:	100114a9 	.word	0x100114a9

1000a054 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a054:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a056:	b085      	sub	sp, #20
1000a058:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a05a:	2206      	movs	r2, #6
1000a05c:	493d      	ldr	r1, [pc, #244]	; (1000a154 <ble_pair_key_request_handler+0x100>)
1000a05e:	a802      	add	r0, sp, #8
1000a060:	4e3d      	ldr	r6, [pc, #244]	; (1000a158 <ble_pair_key_request_handler+0x104>)
1000a062:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a064:	ac01      	add	r4, sp, #4
1000a066:	2204      	movs	r2, #4
1000a068:	0029      	movs	r1, r5
1000a06a:	0020      	movs	r0, r4
1000a06c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a06e:	78e3      	ldrb	r3, [r4, #3]
1000a070:	2b00      	cmp	r3, #0
1000a072:	d162      	bne.n	1000a13a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a074:	4839      	ldr	r0, [pc, #228]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a076:	4b3a      	ldr	r3, [pc, #232]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a078:	4798      	blx	r3
1000a07a:	483a      	ldr	r0, [pc, #232]	; (1000a164 <ble_pair_key_request_handler+0x110>)
1000a07c:	4b3a      	ldr	r3, [pc, #232]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a07e:	4798      	blx	r3
1000a080:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a082:	4c3a      	ldr	r4, [pc, #232]	; (1000a16c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a084:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a086:	201e      	movs	r0, #30
1000a088:	47a0      	blx	r4
1000a08a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a08c:	2b00      	cmp	r3, #0
1000a08e:	d11a      	bne.n	1000a0c6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a090:	4f32      	ldr	r7, [pc, #200]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a092:	0038      	movs	r0, r7
1000a094:	4e32      	ldr	r6, [pc, #200]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a096:	47b0      	blx	r6
1000a098:	4835      	ldr	r0, [pc, #212]	; (1000a170 <ble_pair_key_request_handler+0x11c>)
1000a09a:	4c33      	ldr	r4, [pc, #204]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a09c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a09e:	0038      	movs	r0, r7
1000a0a0:	47b0      	blx	r6
1000a0a2:	4834      	ldr	r0, [pc, #208]	; (1000a174 <ble_pair_key_request_handler+0x120>)
1000a0a4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a0a6:	8828      	ldrh	r0, [r5, #0]
1000a0a8:	2113      	movs	r1, #19
1000a0aa:	4b33      	ldr	r3, [pc, #204]	; (1000a178 <ble_pair_key_request_handler+0x124>)
1000a0ac:	4798      	blx	r3
1000a0ae:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a0b0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a0b2:	2b00      	cmp	r3, #0
1000a0b4:	d04c      	beq.n	1000a150 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a0b6:	4829      	ldr	r0, [pc, #164]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a0b8:	4b29      	ldr	r3, [pc, #164]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a0ba:	4798      	blx	r3
1000a0bc:	482f      	ldr	r0, [pc, #188]	; (1000a17c <ble_pair_key_request_handler+0x128>)
1000a0be:	4b2a      	ldr	r3, [pc, #168]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a0c0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a0c2:	20e2      	movs	r0, #226	; 0xe2
1000a0c4:	e044      	b.n	1000a150 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a0c6:	001a      	movs	r2, r3
1000a0c8:	3a30      	subs	r2, #48	; 0x30
1000a0ca:	2a09      	cmp	r2, #9
1000a0cc:	d8db      	bhi.n	1000a086 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a0ce:	aa02      	add	r2, sp, #8
1000a0d0:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a0d2:	4038      	ands	r0, r7
1000a0d4:	4b2a      	ldr	r3, [pc, #168]	; (1000a180 <ble_pair_key_request_handler+0x12c>)
1000a0d6:	4798      	blx	r3
1000a0d8:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a0da:	2e06      	cmp	r6, #6
1000a0dc:	d026      	beq.n	1000a12c <ble_pair_key_request_handler+0xd8>
1000a0de:	e7d2      	b.n	1000a086 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a0e0:	481e      	ldr	r0, [pc, #120]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a0e2:	4b1f      	ldr	r3, [pc, #124]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a0e4:	4798      	blx	r3
1000a0e6:	4827      	ldr	r0, [pc, #156]	; (1000a184 <ble_pair_key_request_handler+0x130>)
1000a0e8:	4b1f      	ldr	r3, [pc, #124]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a0ea:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a0ec:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a0ee:	4e24      	ldr	r6, [pc, #144]	; (1000a180 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a0f0:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a0f2:	5ce0      	ldrb	r0, [r4, r3]
1000a0f4:	47b0      	blx	r6
1000a0f6:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a0f8:	2c06      	cmp	r4, #6
1000a0fa:	d1f9      	bne.n	1000a0f0 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000a0fc:	ab01      	add	r3, sp, #4
1000a0fe:	7899      	ldrb	r1, [r3, #2]
1000a100:	8828      	ldrh	r0, [r5, #0]
1000a102:	aa02      	add	r2, sp, #8
1000a104:	4b20      	ldr	r3, [pc, #128]	; (1000a188 <ble_pair_key_request_handler+0x134>)
1000a106:	4798      	blx	r3
1000a108:	2800      	cmp	r0, #0
1000a10a:	d021      	beq.n	1000a150 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a10c:	4813      	ldr	r0, [pc, #76]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a10e:	4b14      	ldr	r3, [pc, #80]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a110:	4798      	blx	r3
1000a112:	481e      	ldr	r0, [pc, #120]	; (1000a18c <ble_pair_key_request_handler+0x138>)
1000a114:	4b14      	ldr	r3, [pc, #80]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a116:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a118:	2000      	movs	r0, #0
1000a11a:	e019      	b.n	1000a150 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a11c:	480f      	ldr	r0, [pc, #60]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a11e:	4b10      	ldr	r3, [pc, #64]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a120:	4798      	blx	r3
1000a122:	481b      	ldr	r0, [pc, #108]	; (1000a190 <ble_pair_key_request_handler+0x13c>)
1000a124:	4b10      	ldr	r3, [pc, #64]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a126:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a128:	2000      	movs	r0, #0
1000a12a:	e011      	b.n	1000a150 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a12c:	480b      	ldr	r0, [pc, #44]	; (1000a15c <ble_pair_key_request_handler+0x108>)
1000a12e:	4b0c      	ldr	r3, [pc, #48]	; (1000a160 <ble_pair_key_request_handler+0x10c>)
1000a130:	4798      	blx	r3
1000a132:	4818      	ldr	r0, [pc, #96]	; (1000a194 <ble_pair_key_request_handler+0x140>)
1000a134:	4b0c      	ldr	r3, [pc, #48]	; (1000a168 <ble_pair_key_request_handler+0x114>)
1000a136:	4798      	blx	r3
1000a138:	e7d8      	b.n	1000a0ec <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a13a:	ab01      	add	r3, sp, #4
1000a13c:	885a      	ldrh	r2, [r3, #2]
1000a13e:	2380      	movs	r3, #128	; 0x80
1000a140:	005b      	lsls	r3, r3, #1
1000a142:	429a      	cmp	r2, r3
1000a144:	d0cc      	beq.n	1000a0e0 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a146:	ab01      	add	r3, sp, #4
1000a148:	789b      	ldrb	r3, [r3, #2]
1000a14a:	2b01      	cmp	r3, #1
1000a14c:	d0e6      	beq.n	1000a11c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a14e:	2000      	movs	r0, #0
}
1000a150:	b005      	add	sp, #20
1000a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a154:	10012b34 	.word	0x10012b34
1000a158:	1001134f 	.word	0x1001134f
1000a15c:	10012770 	.word	0x10012770
1000a160:	100115c9 	.word	0x100115c9
1000a164:	10012da8 	.word	0x10012da8
1000a168:	100114a9 	.word	0x100114a9
1000a16c:	1000ac6d 	.word	0x1000ac6d
1000a170:	10012dd0 	.word	0x10012dd0
1000a174:	10012ddc 	.word	0x10012ddc
1000a178:	1000d8d9 	.word	0x1000d8d9
1000a17c:	10012cc4 	.word	0x10012cc4
1000a180:	100114dd 	.word	0x100114dd
1000a184:	10012df0 	.word	0x10012df0
1000a188:	1000dd75 	.word	0x1000dd75
1000a18c:	10012e28 	.word	0x10012e28
1000a190:	10012e40 	.word	0x10012e40
1000a194:	10012e5c 	.word	0x10012e5c

1000a198 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a19a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a19c:	8805      	ldrh	r5, [r0, #0]
1000a19e:	4b2f      	ldr	r3, [pc, #188]	; (1000a25c <ble_encryption_request_handler+0xc4>)
1000a1a0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a1a2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a1a4:	0010      	movs	r0, r2
1000a1a6:	8919      	ldrh	r1, [r3, #8]
1000a1a8:	42a9      	cmp	r1, r5
1000a1aa:	d116      	bne.n	1000a1da <ble_encryption_request_handler+0x42>
1000a1ac:	0019      	movs	r1, r3
1000a1ae:	315e      	adds	r1, #94	; 0x5e
1000a1b0:	7809      	ldrb	r1, [r1, #0]
1000a1b2:	2901      	cmp	r1, #1
1000a1b4:	d911      	bls.n	1000a1da <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a1b6:	4929      	ldr	r1, [pc, #164]	; (1000a25c <ble_encryption_request_handler+0xc4>)
1000a1b8:	0152      	lsls	r2, r2, #5
1000a1ba:	1a10      	subs	r0, r2, r0
1000a1bc:	0080      	lsls	r0, r0, #2
1000a1be:	1808      	adds	r0, r1, r0
1000a1c0:	305e      	adds	r0, #94	; 0x5e
1000a1c2:	2306      	movs	r3, #6
1000a1c4:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a1c6:	0162      	lsls	r2, r4, #5
1000a1c8:	1b13      	subs	r3, r2, r4
1000a1ca:	009b      	lsls	r3, r3, #2
1000a1cc:	18cb      	adds	r3, r1, r3
1000a1ce:	3370      	adds	r3, #112	; 0x70
1000a1d0:	881a      	ldrh	r2, [r3, #0]
1000a1d2:	8873      	ldrh	r3, [r6, #2]
1000a1d4:	429a      	cmp	r2, r3
1000a1d6:	d113      	bne.n	1000a200 <ble_encryption_request_handler+0x68>
1000a1d8:	e006      	b.n	1000a1e8 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a1da:	3401      	adds	r4, #1
1000a1dc:	b2e4      	uxtb	r4, r4
1000a1de:	3201      	adds	r2, #1
1000a1e0:	337c      	adds	r3, #124	; 0x7c
1000a1e2:	2c05      	cmp	r4, #5
1000a1e4:	d1de      	bne.n	1000a1a4 <ble_encryption_request_handler+0xc>
1000a1e6:	e00b      	b.n	1000a200 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a1e8:	0161      	lsls	r1, r4, #5
1000a1ea:	1b09      	subs	r1, r1, r4
1000a1ec:	0089      	lsls	r1, r1, #2
1000a1ee:	4b1b      	ldr	r3, [pc, #108]	; (1000a25c <ble_encryption_request_handler+0xc4>)
1000a1f0:	1859      	adds	r1, r3, r1
1000a1f2:	3172      	adds	r1, #114	; 0x72
1000a1f4:	1d30      	adds	r0, r6, #4
1000a1f6:	2208      	movs	r2, #8
1000a1f8:	4b19      	ldr	r3, [pc, #100]	; (1000a260 <ble_encryption_request_handler+0xc8>)
1000a1fa:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a1fc:	2800      	cmp	r0, #0
1000a1fe:	d015      	beq.n	1000a22c <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a200:	4f18      	ldr	r7, [pc, #96]	; (1000a264 <ble_encryption_request_handler+0xcc>)
1000a202:	0038      	movs	r0, r7
1000a204:	4e18      	ldr	r6, [pc, #96]	; (1000a268 <ble_encryption_request_handler+0xd0>)
1000a206:	47b0      	blx	r6
1000a208:	4818      	ldr	r0, [pc, #96]	; (1000a26c <ble_encryption_request_handler+0xd4>)
1000a20a:	4d19      	ldr	r5, [pc, #100]	; (1000a270 <ble_encryption_request_handler+0xd8>)
1000a20c:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a20e:	0038      	movs	r0, r7
1000a210:	47b0      	blx	r6
1000a212:	4818      	ldr	r0, [pc, #96]	; (1000a274 <ble_encryption_request_handler+0xdc>)
1000a214:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a216:	0163      	lsls	r3, r4, #5
1000a218:	1b1c      	subs	r4, r3, r4
1000a21a:	00a4      	lsls	r4, r4, #2
1000a21c:	4b0f      	ldr	r3, [pc, #60]	; (1000a25c <ble_encryption_request_handler+0xc4>)
1000a21e:	191c      	adds	r4, r3, r4
1000a220:	8920      	ldrh	r0, [r4, #8]
1000a222:	2105      	movs	r1, #5
1000a224:	4b14      	ldr	r3, [pc, #80]	; (1000a278 <ble_encryption_request_handler+0xe0>)
1000a226:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a228:	20e2      	movs	r0, #226	; 0xe2
1000a22a:	e016      	b.n	1000a25a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a22c:	0162      	lsls	r2, r4, #5
1000a22e:	1b13      	subs	r3, r2, r4
1000a230:	009b      	lsls	r3, r3, #2
1000a232:	3360      	adds	r3, #96	; 0x60
1000a234:	4909      	ldr	r1, [pc, #36]	; (1000a25c <ble_encryption_request_handler+0xc4>)
1000a236:	185b      	adds	r3, r3, r1
1000a238:	1b14      	subs	r4, r2, r4
1000a23a:	00a4      	lsls	r4, r4, #2
1000a23c:	190c      	adds	r4, r1, r4
1000a23e:	7d21      	ldrb	r1, [r4, #20]
1000a240:	8830      	ldrh	r0, [r6, #0]
1000a242:	2201      	movs	r2, #1
1000a244:	4c0d      	ldr	r4, [pc, #52]	; (1000a27c <ble_encryption_request_handler+0xe4>)
1000a246:	47a0      	blx	r4
1000a248:	2800      	cmp	r0, #0
1000a24a:	d006      	beq.n	1000a25a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a24c:	4805      	ldr	r0, [pc, #20]	; (1000a264 <ble_encryption_request_handler+0xcc>)
1000a24e:	4b06      	ldr	r3, [pc, #24]	; (1000a268 <ble_encryption_request_handler+0xd0>)
1000a250:	4798      	blx	r3
1000a252:	480b      	ldr	r0, [pc, #44]	; (1000a280 <ble_encryption_request_handler+0xe8>)
1000a254:	4b06      	ldr	r3, [pc, #24]	; (1000a270 <ble_encryption_request_handler+0xd8>)
1000a256:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a258:	2000      	movs	r0, #0
}
1000a25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a25c:	10014c88 	.word	0x10014c88
1000a260:	10011331 	.word	0x10011331
1000a264:	10012770 	.word	0x10012770
1000a268:	100115c9 	.word	0x100115c9
1000a26c:	10012e70 	.word	0x10012e70
1000a270:	100114a9 	.word	0x100114a9
1000a274:	10012ea8 	.word	0x10012ea8
1000a278:	1000d8d9 	.word	0x1000d8d9
1000a27c:	1000dea9 	.word	0x1000dea9
1000a280:	10012f00 	.word	0x10012f00

1000a284 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a284:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a286:	2a00      	cmp	r2, #0
1000a288:	d047      	beq.n	1000a31a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a28a:	2906      	cmp	r1, #6
1000a28c:	d847      	bhi.n	1000a31e <ble_mgr_events_callback_handler+0x9a>
1000a28e:	0089      	lsls	r1, r1, #2
1000a290:	4b28      	ldr	r3, [pc, #160]	; (1000a334 <ble_mgr_events_callback_handler+0xb0>)
1000a292:	585b      	ldr	r3, [r3, r1]
1000a294:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a296:	4b28      	ldr	r3, [pc, #160]	; (1000a338 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a298:	2405      	movs	r4, #5
1000a29a:	e00a      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a29c:	4b27      	ldr	r3, [pc, #156]	; (1000a33c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a29e:	2401      	movs	r4, #1
			}
			break;
1000a2a0:	e007      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a2a2:	4b27      	ldr	r3, [pc, #156]	; (1000a340 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a2a4:	2405      	movs	r4, #5
			}
			break;
1000a2a6:	e004      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a2a8:	4b26      	ldr	r3, [pc, #152]	; (1000a344 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a2aa:	2401      	movs	r4, #1
			}
			break;
1000a2ac:	e001      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a2ae:	4b26      	ldr	r3, [pc, #152]	; (1000a348 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a2b0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a2b2:	2800      	cmp	r0, #0
1000a2b4:	d116      	bne.n	1000a2e4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a2b6:	6819      	ldr	r1, [r3, #0]
1000a2b8:	2900      	cmp	r1, #0
1000a2ba:	d10b      	bne.n	1000a2d4 <ble_mgr_events_callback_handler+0x50>
1000a2bc:	e006      	b.n	1000a2cc <ble_mgr_events_callback_handler+0x48>
1000a2be:	001d      	movs	r5, r3
1000a2c0:	3304      	adds	r3, #4
1000a2c2:	1f18      	subs	r0, r3, #4
1000a2c4:	6800      	ldr	r0, [r0, #0]
1000a2c6:	2800      	cmp	r0, #0
1000a2c8:	d106      	bne.n	1000a2d8 <ble_mgr_events_callback_handler+0x54>
1000a2ca:	e000      	b.n	1000a2ce <ble_mgr_events_callback_handler+0x4a>
1000a2cc:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a2ce:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a2d0:	2101      	movs	r1, #1
						break;
1000a2d2:	e02c      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
1000a2d4:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a2d6:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a2d8:	3101      	adds	r1, #1
1000a2da:	b2c9      	uxtb	r1, r1
1000a2dc:	42a1      	cmp	r1, r4
1000a2de:	d3ee      	bcc.n	1000a2be <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a2e0:	2100      	movs	r1, #0
1000a2e2:	e024      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
1000a2e4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a2e6:	2801      	cmp	r0, #1
1000a2e8:	d121      	bne.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a2ea:	6819      	ldr	r1, [r3, #0]
1000a2ec:	428a      	cmp	r2, r1
1000a2ee:	d10c      	bne.n	1000a30a <ble_mgr_events_callback_handler+0x86>
1000a2f0:	e006      	b.n	1000a300 <ble_mgr_events_callback_handler+0x7c>
1000a2f2:	001d      	movs	r5, r3
1000a2f4:	3304      	adds	r3, #4
1000a2f6:	1f18      	subs	r0, r3, #4
1000a2f8:	6800      	ldr	r0, [r0, #0]
1000a2fa:	4282      	cmp	r2, r0
1000a2fc:	d107      	bne.n	1000a30e <ble_mgr_events_callback_handler+0x8a>
1000a2fe:	e000      	b.n	1000a302 <ble_mgr_events_callback_handler+0x7e>
1000a300:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a302:	2300      	movs	r3, #0
1000a304:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a306:	2101      	movs	r1, #1
						break;
1000a308:	e011      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
1000a30a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a30c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a30e:	3101      	adds	r1, #1
1000a310:	b2c9      	uxtb	r1, r1
1000a312:	42a1      	cmp	r1, r4
1000a314:	d3ed      	bcc.n	1000a2f2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a316:	2100      	movs	r1, #0
1000a318:	e009      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a31a:	2100      	movs	r1, #0
1000a31c:	e007      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a31e:	2100      	movs	r1, #0
1000a320:	e005      	b.n	1000a32e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a322:	4b0a      	ldr	r3, [pc, #40]	; (1000a34c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a324:	2405      	movs	r4, #5
1000a326:	e7c4      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a328:	4b09      	ldr	r3, [pc, #36]	; (1000a350 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a32a:	2401      	movs	r4, #1
1000a32c:	e7c1      	b.n	1000a2b2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a32e:	0008      	movs	r0, r1
1000a330:	bd30      	pop	{r4, r5, pc}
1000a332:	46c0      	nop			; (mov r8, r8)
1000a334:	10012a28 	.word	0x10012a28
1000a338:	10014c74 	.word	0x10014c74
1000a33c:	10014c70 	.word	0x10014c70
1000a340:	10014ef8 	.word	0x10014ef8
1000a344:	100154ac 	.word	0x100154ac
1000a348:	10014f0c 	.word	0x10014f0c
1000a34c:	10014f20 	.word	0x10014f20
1000a350:	10014f68 	.word	0x10014f68

1000a354 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a354:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a356:	465f      	mov	r7, fp
1000a358:	4656      	mov	r6, sl
1000a35a:	464d      	mov	r5, r9
1000a35c:	4644      	mov	r4, r8
1000a35e:	b4f0      	push	{r4, r5, r6, r7}
1000a360:	b091      	sub	sp, #68	; 0x44
1000a362:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a364:	2400      	movs	r4, #0
1000a366:	4b7a      	ldr	r3, [pc, #488]	; (1000a550 <ble_device_init+0x1fc>)
1000a368:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a36a:	2207      	movs	r2, #7
1000a36c:	2100      	movs	r1, #0
1000a36e:	4879      	ldr	r0, [pc, #484]	; (1000a554 <ble_device_init+0x200>)
1000a370:	4e79      	ldr	r6, [pc, #484]	; (1000a558 <ble_device_init+0x204>)
1000a372:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a374:	2212      	movs	r2, #18
1000a376:	2100      	movs	r1, #0
1000a378:	4878      	ldr	r0, [pc, #480]	; (1000a55c <ble_device_init+0x208>)
1000a37a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a37c:	4b78      	ldr	r3, [pc, #480]	; (1000a560 <ble_device_init+0x20c>)
1000a37e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a380:	22cd      	movs	r2, #205	; 0xcd
1000a382:	0092      	lsls	r2, r2, #2
1000a384:	2100      	movs	r1, #0
1000a386:	4877      	ldr	r0, [pc, #476]	; (1000a564 <ble_device_init+0x210>)
1000a388:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a38a:	4b77      	ldr	r3, [pc, #476]	; (1000a568 <ble_device_init+0x214>)
1000a38c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a38e:	2283      	movs	r2, #131	; 0x83
1000a390:	0092      	lsls	r2, r2, #2
1000a392:	2100      	movs	r1, #0
1000a394:	4875      	ldr	r0, [pc, #468]	; (1000a56c <ble_device_init+0x218>)
1000a396:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a398:	4b75      	ldr	r3, [pc, #468]	; (1000a570 <ble_device_init+0x21c>)
1000a39a:	469b      	mov	fp, r3
1000a39c:	2380      	movs	r3, #128	; 0x80
1000a39e:	00db      	lsls	r3, r3, #3
1000a3a0:	469a      	mov	sl, r3
1000a3a2:	001a      	movs	r2, r3
1000a3a4:	2100      	movs	r1, #0
1000a3a6:	4658      	mov	r0, fp
1000a3a8:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a3aa:	4b72      	ldr	r3, [pc, #456]	; (1000a574 <ble_device_init+0x220>)
1000a3ac:	4699      	mov	r9, r3
1000a3ae:	2380      	movs	r3, #128	; 0x80
1000a3b0:	015b      	lsls	r3, r3, #5
1000a3b2:	4698      	mov	r8, r3
1000a3b4:	001a      	movs	r2, r3
1000a3b6:	2100      	movs	r1, #0
1000a3b8:	4648      	mov	r0, r9
1000a3ba:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a3bc:	4f6e      	ldr	r7, [pc, #440]	; (1000a578 <ble_device_init+0x224>)
1000a3be:	221c      	movs	r2, #28
1000a3c0:	2100      	movs	r1, #0
1000a3c2:	0038      	movs	r0, r7
1000a3c4:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a3c6:	465b      	mov	r3, fp
1000a3c8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a3ca:	4653      	mov	r3, sl
1000a3cc:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a3ce:	464b      	mov	r3, r9
1000a3d0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a3d2:	4643      	mov	r3, r8
1000a3d4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a3d6:	4b69      	ldr	r3, [pc, #420]	; (1000a57c <ble_device_init+0x228>)
1000a3d8:	601c      	str	r4, [r3, #0]
1000a3da:	605c      	str	r4, [r3, #4]
1000a3dc:	609c      	str	r4, [r3, #8]
1000a3de:	60dc      	str	r4, [r3, #12]
1000a3e0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a3e2:	4b67      	ldr	r3, [pc, #412]	; (1000a580 <ble_device_init+0x22c>)
1000a3e4:	601c      	str	r4, [r3, #0]
1000a3e6:	605c      	str	r4, [r3, #4]
1000a3e8:	609c      	str	r4, [r3, #8]
1000a3ea:	60dc      	str	r4, [r3, #12]
1000a3ec:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a3ee:	4b65      	ldr	r3, [pc, #404]	; (1000a584 <ble_device_init+0x230>)
1000a3f0:	601c      	str	r4, [r3, #0]
1000a3f2:	605c      	str	r4, [r3, #4]
1000a3f4:	609c      	str	r4, [r3, #8]
1000a3f6:	60dc      	str	r4, [r3, #12]
1000a3f8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a3fa:	4b63      	ldr	r3, [pc, #396]	; (1000a588 <ble_device_init+0x234>)
1000a3fc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a3fe:	4b63      	ldr	r3, [pc, #396]	; (1000a58c <ble_device_init+0x238>)
1000a400:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a402:	4b63      	ldr	r3, [pc, #396]	; (1000a590 <ble_device_init+0x23c>)
1000a404:	601c      	str	r4, [r3, #0]
1000a406:	605c      	str	r4, [r3, #4]
1000a408:	609c      	str	r4, [r3, #8]
1000a40a:	60dc      	str	r4, [r3, #12]
1000a40c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a40e:	4b61      	ldr	r3, [pc, #388]	; (1000a594 <ble_device_init+0x240>)
1000a410:	601c      	str	r4, [r3, #0]
1000a412:	4c61      	ldr	r4, [pc, #388]	; (1000a598 <ble_device_init+0x244>)
1000a414:	239b      	movs	r3, #155	; 0x9b
1000a416:	009b      	lsls	r3, r3, #2
1000a418:	4698      	mov	r8, r3
1000a41a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a41c:	4f4e      	ldr	r7, [pc, #312]	; (1000a558 <ble_device_init+0x204>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a41e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a420:	227c      	movs	r2, #124	; 0x7c
1000a422:	2100      	movs	r1, #0
1000a424:	0020      	movs	r0, r4
1000a426:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a428:	0023      	movs	r3, r4
1000a42a:	335e      	adds	r3, #94	; 0x5e
1000a42c:	2200      	movs	r2, #0
1000a42e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a430:	7626      	strb	r6, [r4, #24]
1000a432:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a434:	45a0      	cmp	r8, r4
1000a436:	d1f3      	bne.n	1000a420 <ble_device_init+0xcc>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a438:	4b58      	ldr	r3, [pc, #352]	; (1000a59c <ble_device_init+0x248>)
1000a43a:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a43c:	4858      	ldr	r0, [pc, #352]	; (1000a5a0 <ble_device_init+0x24c>)
1000a43e:	4b59      	ldr	r3, [pc, #356]	; (1000a5a4 <ble_device_init+0x250>)
1000a440:	4798      	blx	r3
1000a442:	4859      	ldr	r0, [pc, #356]	; (1000a5a8 <ble_device_init+0x254>)
1000a444:	4b59      	ldr	r3, [pc, #356]	; (1000a5ac <ble_device_init+0x258>)
1000a446:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a448:	484b      	ldr	r0, [pc, #300]	; (1000a578 <ble_device_init+0x224>)
1000a44a:	4b59      	ldr	r3, [pc, #356]	; (1000a5b0 <ble_device_init+0x25c>)
1000a44c:	4798      	blx	r3
1000a44e:	2800      	cmp	r0, #0
1000a450:	d00b      	beq.n	1000a46a <ble_device_init+0x116>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a452:	4e53      	ldr	r6, [pc, #332]	; (1000a5a0 <ble_device_init+0x24c>)
1000a454:	0030      	movs	r0, r6
1000a456:	4d53      	ldr	r5, [pc, #332]	; (1000a5a4 <ble_device_init+0x250>)
1000a458:	47a8      	blx	r5
1000a45a:	4856      	ldr	r0, [pc, #344]	; (1000a5b4 <ble_device_init+0x260>)
1000a45c:	4c53      	ldr	r4, [pc, #332]	; (1000a5ac <ble_device_init+0x258>)
1000a45e:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a460:	0030      	movs	r0, r6
1000a462:	47a8      	blx	r5
1000a464:	4854      	ldr	r0, [pc, #336]	; (1000a5b8 <ble_device_init+0x264>)
1000a466:	47a0      	blx	r4
1000a468:	e7fe      	b.n	1000a468 <ble_device_init+0x114>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a46a:	4a54      	ldr	r2, [pc, #336]	; (1000a5bc <ble_device_init+0x268>)
1000a46c:	2100      	movs	r1, #0
1000a46e:	2000      	movs	r0, #0
1000a470:	4c53      	ldr	r4, [pc, #332]	; (1000a5c0 <ble_device_init+0x26c>)
1000a472:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a474:	4a53      	ldr	r2, [pc, #332]	; (1000a5c4 <ble_device_init+0x270>)
1000a476:	2102      	movs	r1, #2
1000a478:	2000      	movs	r0, #0
1000a47a:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a47c:	2109      	movs	r1, #9
1000a47e:	4852      	ldr	r0, [pc, #328]	; (1000a5c8 <ble_device_init+0x274>)
1000a480:	4b52      	ldr	r3, [pc, #328]	; (1000a5cc <ble_device_init+0x278>)
1000a482:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a484:	2800      	cmp	r0, #0
1000a486:	d005      	beq.n	1000a494 <ble_device_init+0x140>
	{
		DBG_LOG("Device name set failed");
1000a488:	4845      	ldr	r0, [pc, #276]	; (1000a5a0 <ble_device_init+0x24c>)
1000a48a:	4b46      	ldr	r3, [pc, #280]	; (1000a5a4 <ble_device_init+0x250>)
1000a48c:	4798      	blx	r3
1000a48e:	4850      	ldr	r0, [pc, #320]	; (1000a5d0 <ble_device_init+0x27c>)
1000a490:	4b46      	ldr	r3, [pc, #280]	; (1000a5ac <ble_device_init+0x258>)
1000a492:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a494:	2207      	movs	r2, #7
1000a496:	494f      	ldr	r1, [pc, #316]	; (1000a5d4 <ble_device_init+0x280>)
1000a498:	3108      	adds	r1, #8
1000a49a:	a804      	add	r0, sp, #16
1000a49c:	4b4e      	ldr	r3, [pc, #312]	; (1000a5d8 <ble_device_init+0x284>)
1000a49e:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a4a0:	2226      	movs	r2, #38	; 0x26
1000a4a2:	2100      	movs	r1, #0
1000a4a4:	a806      	add	r0, sp, #24
1000a4a6:	4b2c      	ldr	r3, [pc, #176]	; (1000a558 <ble_device_init+0x204>)
1000a4a8:	4798      	blx	r3
	
	if (addr == NULL)
1000a4aa:	2d00      	cmp	r5, #0
1000a4ac:	d10c      	bne.n	1000a4c8 <ble_device_init+0x174>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a4ae:	a804      	add	r0, sp, #16
1000a4b0:	4b4a      	ldr	r3, [pc, #296]	; (1000a5dc <ble_device_init+0x288>)
1000a4b2:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a4b4:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a4b6:	2800      	cmp	r0, #0
1000a4b8:	d006      	beq.n	1000a4c8 <ble_device_init+0x174>
		{
			DBG_LOG("BD address get failed");
1000a4ba:	4839      	ldr	r0, [pc, #228]	; (1000a5a0 <ble_device_init+0x24c>)
1000a4bc:	4b39      	ldr	r3, [pc, #228]	; (1000a5a4 <ble_device_init+0x250>)
1000a4be:	4798      	blx	r3
1000a4c0:	4847      	ldr	r0, [pc, #284]	; (1000a5e0 <ble_device_init+0x28c>)
1000a4c2:	4b3a      	ldr	r3, [pc, #232]	; (1000a5ac <ble_device_init+0x258>)
1000a4c4:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a4c6:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a4c8:	4835      	ldr	r0, [pc, #212]	; (1000a5a0 <ble_device_init+0x24c>)
1000a4ca:	4b36      	ldr	r3, [pc, #216]	; (1000a5a4 <ble_device_init+0x250>)
1000a4cc:	4798      	blx	r3
1000a4ce:	792b      	ldrb	r3, [r5, #4]
1000a4d0:	796a      	ldrb	r2, [r5, #5]
1000a4d2:	79a9      	ldrb	r1, [r5, #6]
1000a4d4:	7828      	ldrb	r0, [r5, #0]
1000a4d6:	9003      	str	r0, [sp, #12]
1000a4d8:	7868      	ldrb	r0, [r5, #1]
1000a4da:	9002      	str	r0, [sp, #8]
1000a4dc:	78a8      	ldrb	r0, [r5, #2]
1000a4de:	9001      	str	r0, [sp, #4]
1000a4e0:	78e8      	ldrb	r0, [r5, #3]
1000a4e2:	9000      	str	r0, [sp, #0]
1000a4e4:	483f      	ldr	r0, [pc, #252]	; (1000a5e4 <ble_device_init+0x290>)
1000a4e6:	4c31      	ldr	r4, [pc, #196]	; (1000a5ac <ble_device_init+0x258>)
1000a4e8:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a4ea:	ac06      	add	r4, sp, #24
1000a4ec:	230a      	movs	r3, #10
1000a4ee:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a4f0:	4b3d      	ldr	r3, [pc, #244]	; (1000a5e8 <ble_device_init+0x294>)
1000a4f2:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a4f4:	2207      	movs	r2, #7
1000a4f6:	0029      	movs	r1, r5
1000a4f8:	a807      	add	r0, sp, #28
1000a4fa:	4b37      	ldr	r3, [pc, #220]	; (1000a5d8 <ble_device_init+0x284>)
1000a4fc:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a4fe:	2300      	movs	r3, #0
1000a500:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a502:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a504:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a506:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a508:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a50a:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a50c:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a50e:	2380      	movs	r3, #128	; 0x80
1000a510:	009b      	lsls	r3, r3, #2
1000a512:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a514:	0020      	movs	r0, r4
1000a516:	4b35      	ldr	r3, [pc, #212]	; (1000a5ec <ble_device_init+0x298>)
1000a518:	4798      	blx	r3
1000a51a:	2800      	cmp	r0, #0
1000a51c:	d005      	beq.n	1000a52a <ble_device_init+0x1d6>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a51e:	4820      	ldr	r0, [pc, #128]	; (1000a5a0 <ble_device_init+0x24c>)
1000a520:	4b20      	ldr	r3, [pc, #128]	; (1000a5a4 <ble_device_init+0x250>)
1000a522:	4798      	blx	r3
1000a524:	4832      	ldr	r0, [pc, #200]	; (1000a5f0 <ble_device_init+0x29c>)
1000a526:	4b21      	ldr	r3, [pc, #132]	; (1000a5ac <ble_device_init+0x258>)
1000a528:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a52a:	0028      	movs	r0, r5
1000a52c:	4b31      	ldr	r3, [pc, #196]	; (1000a5f4 <ble_device_init+0x2a0>)
1000a52e:	4798      	blx	r3
1000a530:	2800      	cmp	r0, #0
1000a532:	d005      	beq.n	1000a540 <ble_device_init+0x1ec>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a534:	481a      	ldr	r0, [pc, #104]	; (1000a5a0 <ble_device_init+0x24c>)
1000a536:	4b1b      	ldr	r3, [pc, #108]	; (1000a5a4 <ble_device_init+0x250>)
1000a538:	4798      	blx	r3
1000a53a:	482f      	ldr	r0, [pc, #188]	; (1000a5f8 <ble_device_init+0x2a4>)
1000a53c:	4b1b      	ldr	r3, [pc, #108]	; (1000a5ac <ble_device_init+0x258>)
1000a53e:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a540:	b011      	add	sp, #68	; 0x44
1000a542:	bc3c      	pop	{r2, r3, r4, r5}
1000a544:	4690      	mov	r8, r2
1000a546:	4699      	mov	r9, r3
1000a548:	46a2      	mov	sl, r4
1000a54a:	46ab      	mov	fp, r5
1000a54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a54e:	46c0      	nop			; (mov r8, r8)
1000a550:	10014a98 	.word	0x10014a98
1000a554:	10014aa0 	.word	0x10014aa0
1000a558:	10011361 	.word	0x10011361
1000a55c:	10014f34 	.word	0x10014f34
1000a560:	10014a9c 	.word	0x10014a9c
1000a564:	10014f6c 	.word	0x10014f6c
1000a568:	10014f64 	.word	0x10014f64
1000a56c:	100152a0 	.word	0x100152a0
1000a570:	10013698 	.word	0x10013698
1000a574:	10013a98 	.word	0x10013a98
1000a578:	10014f48 	.word	0x10014f48
1000a57c:	10014f0c 	.word	0x10014f0c
1000a580:	10014f20 	.word	0x10014f20
1000a584:	10014c74 	.word	0x10014c74
1000a588:	10014f68 	.word	0x10014f68
1000a58c:	10014c70 	.word	0x10014c70
1000a590:	10014ef8 	.word	0x10014ef8
1000a594:	100154ac 	.word	0x100154ac
1000a598:	10014c88 	.word	0x10014c88
1000a59c:	10014ef4 	.word	0x10014ef4
1000a5a0:	10012770 	.word	0x10012770
1000a5a4:	100115c9 	.word	0x100115c9
1000a5a8:	10012f20 	.word	0x10012f20
1000a5ac:	100114a9 	.word	0x100114a9
1000a5b0:	1000d6b1 	.word	0x1000d6b1
1000a5b4:	10012f34 	.word	0x10012f34
1000a5b8:	10012f54 	.word	0x10012f54
1000a5bc:	1001318c 	.word	0x1001318c
1000a5c0:	1000a285 	.word	0x1000a285
1000a5c4:	10012b50 	.word	0x10012b50
1000a5c8:	10012f90 	.word	0x10012f90
1000a5cc:	1000d5c9 	.word	0x1000d5c9
1000a5d0:	10012f9c 	.word	0x10012f9c
1000a5d4:	10012b34 	.word	0x10012b34
1000a5d8:	1001134f 	.word	0x1001134f
1000a5dc:	1000d5fd 	.word	0x1000d5fd
1000a5e0:	10012fb4 	.word	0x10012fb4
1000a5e4:	10012fcc 	.word	0x10012fcc
1000a5e8:	00003a98 	.word	0x00003a98
1000a5ec:	1000d621 	.word	0x1000d621
1000a5f0:	10013004 	.word	0x10013004
1000a5f4:	1000d865 	.word	0x1000d865
1000a5f8:	10013028 	.word	0x10013028

1000a5fc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a5fc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a5fe:	2201      	movs	r2, #1
1000a600:	2101      	movs	r1, #1
1000a602:	4b06      	ldr	r3, [pc, #24]	; (1000a61c <ble_send_slave_sec_request+0x20>)
1000a604:	4798      	blx	r3
1000a606:	2800      	cmp	r0, #0
1000a608:	d006      	beq.n	1000a618 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a60a:	4805      	ldr	r0, [pc, #20]	; (1000a620 <ble_send_slave_sec_request+0x24>)
1000a60c:	4b05      	ldr	r3, [pc, #20]	; (1000a624 <ble_send_slave_sec_request+0x28>)
1000a60e:	4798      	blx	r3
1000a610:	4805      	ldr	r0, [pc, #20]	; (1000a628 <ble_send_slave_sec_request+0x2c>)
1000a612:	4b06      	ldr	r3, [pc, #24]	; (1000a62c <ble_send_slave_sec_request+0x30>)
1000a614:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a616:	20e2      	movs	r0, #226	; 0xe2
}
1000a618:	bd10      	pop	{r4, pc}
1000a61a:	46c0      	nop			; (mov r8, r8)
1000a61c:	1000ddf1 	.word	0x1000ddf1
1000a620:	10012770 	.word	0x10012770
1000a624:	100115c9 	.word	0x100115c9
1000a628:	10013064 	.word	0x10013064
1000a62c:	100114a9 	.word	0x100114a9

1000a630 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a630:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a632:	465f      	mov	r7, fp
1000a634:	464e      	mov	r6, r9
1000a636:	4645      	mov	r5, r8
1000a638:	b4e0      	push	{r5, r6, r7}
1000a63a:	b09a      	sub	sp, #104	; 0x68
1000a63c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a63e:	7a86      	ldrb	r6, [r0, #10]
1000a640:	2e00      	cmp	r6, #0
1000a642:	d000      	beq.n	1000a646 <ble_connected_state_handler+0x16>
1000a644:	e0c6      	b.n	1000a7d4 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a646:	4875      	ldr	r0, [pc, #468]	; (1000a81c <ble_connected_state_handler+0x1ec>)
1000a648:	4f75      	ldr	r7, [pc, #468]	; (1000a820 <ble_connected_state_handler+0x1f0>)
1000a64a:	47b8      	blx	r7
1000a64c:	792b      	ldrb	r3, [r5, #4]
1000a64e:	796a      	ldrb	r2, [r5, #5]
1000a650:	79a9      	ldrb	r1, [r5, #6]
1000a652:	7868      	ldrb	r0, [r5, #1]
1000a654:	9002      	str	r0, [sp, #8]
1000a656:	78a8      	ldrb	r0, [r5, #2]
1000a658:	9001      	str	r0, [sp, #4]
1000a65a:	78e8      	ldrb	r0, [r5, #3]
1000a65c:	9000      	str	r0, [sp, #0]
1000a65e:	4871      	ldr	r0, [pc, #452]	; (1000a824 <ble_connected_state_handler+0x1f4>)
1000a660:	4c71      	ldr	r4, [pc, #452]	; (1000a828 <ble_connected_state_handler+0x1f8>)
1000a662:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a664:	486d      	ldr	r0, [pc, #436]	; (1000a81c <ble_connected_state_handler+0x1ec>)
1000a666:	47b8      	blx	r7
1000a668:	8929      	ldrh	r1, [r5, #8]
1000a66a:	4870      	ldr	r0, [pc, #448]	; (1000a82c <ble_connected_state_handler+0x1fc>)
1000a66c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a66e:	2212      	movs	r2, #18
1000a670:	0029      	movs	r1, r5
1000a672:	486f      	ldr	r0, [pc, #444]	; (1000a830 <ble_connected_state_handler+0x200>)
1000a674:	4b6f      	ldr	r3, [pc, #444]	; (1000a834 <ble_connected_state_handler+0x204>)
1000a676:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a678:	9504      	str	r5, [sp, #16]
1000a67a:	2207      	movs	r2, #7
1000a67c:	0029      	movs	r1, r5
1000a67e:	486e      	ldr	r0, [pc, #440]	; (1000a838 <ble_connected_state_handler+0x208>)
1000a680:	4b6e      	ldr	r3, [pc, #440]	; (1000a83c <ble_connected_state_handler+0x20c>)
1000a682:	4798      	blx	r3
1000a684:	2800      	cmp	r0, #0
1000a686:	d100      	bne.n	1000a68a <ble_connected_state_handler+0x5a>
1000a688:	e0ad      	b.n	1000a7e6 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a68a:	782b      	ldrb	r3, [r5, #0]
1000a68c:	2b02      	cmp	r3, #2
1000a68e:	d000      	beq.n	1000a692 <ble_connected_state_handler+0x62>
1000a690:	e0a9      	b.n	1000a7e6 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a692:	2250      	movs	r2, #80	; 0x50
1000a694:	2100      	movs	r1, #0
1000a696:	a806      	add	r0, sp, #24
1000a698:	4b69      	ldr	r3, [pc, #420]	; (1000a840 <ble_connected_state_handler+0x210>)
1000a69a:	4798      	blx	r3
1000a69c:	4f69      	ldr	r7, [pc, #420]	; (1000a844 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a69e:	2300      	movs	r3, #0
1000a6a0:	e00b      	b.n	1000a6ba <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a6a2:	1c59      	adds	r1, r3, #1
1000a6a4:	7814      	ldrb	r4, [r2, #0]
1000a6a6:	a806      	add	r0, sp, #24
1000a6a8:	54c4      	strb	r4, [r0, r3]
1000a6aa:	3201      	adds	r2, #1
1000a6ac:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a6ae:	42b3      	cmp	r3, r6
1000a6b0:	d1f7      	bne.n	1000a6a2 <ble_connected_state_handler+0x72>
1000a6b2:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a6b4:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a6b6:	2b50      	cmp	r3, #80	; 0x50
1000a6b8:	d004      	beq.n	1000a6c4 <ble_connected_state_handler+0x94>
1000a6ba:	001e      	movs	r6, r3
1000a6bc:	3610      	adds	r6, #16
1000a6be:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a6c0:	003a      	movs	r2, r7
1000a6c2:	e7ee      	b.n	1000a6a2 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a6c4:	aa06      	add	r2, sp, #24
1000a6c6:	0029      	movs	r1, r5
1000a6c8:	2005      	movs	r0, #5
1000a6ca:	4b5f      	ldr	r3, [pc, #380]	; (1000a848 <ble_connected_state_handler+0x218>)
1000a6cc:	4798      	blx	r3
1000a6ce:	1e06      	subs	r6, r0, #0
1000a6d0:	d100      	bne.n	1000a6d4 <ble_connected_state_handler+0xa4>
1000a6d2:	e09c      	b.n	1000a80e <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a6d4:	4851      	ldr	r0, [pc, #324]	; (1000a81c <ble_connected_state_handler+0x1ec>)
1000a6d6:	4b52      	ldr	r3, [pc, #328]	; (1000a820 <ble_connected_state_handler+0x1f0>)
1000a6d8:	4798      	blx	r3
1000a6da:	485c      	ldr	r0, [pc, #368]	; (1000a84c <ble_connected_state_handler+0x21c>)
1000a6dc:	4b52      	ldr	r3, [pc, #328]	; (1000a828 <ble_connected_state_handler+0x1f8>)
1000a6de:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a6e0:	26e2      	movs	r6, #226	; 0xe2
1000a6e2:	e094      	b.n	1000a80e <ble_connected_state_handler+0x1de>
1000a6e4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a6e6:	9405      	str	r4, [sp, #20]
1000a6e8:	2207      	movs	r2, #7
1000a6ea:	9904      	ldr	r1, [sp, #16]
1000a6ec:	4648      	mov	r0, r9
1000a6ee:	47d8      	blx	fp
1000a6f0:	2800      	cmp	r0, #0
1000a6f2:	d109      	bne.n	1000a708 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a6f4:	9a05      	ldr	r2, [sp, #20]
1000a6f6:	0153      	lsls	r3, r2, #5
1000a6f8:	1a9b      	subs	r3, r3, r2
1000a6fa:	009a      	lsls	r2, r3, #2
1000a6fc:	4b54      	ldr	r3, [pc, #336]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a6fe:	189b      	adds	r3, r3, r2
1000a700:	335e      	adds	r3, #94	; 0x5e
1000a702:	2202      	movs	r2, #2
1000a704:	701a      	strb	r2, [r3, #0]
1000a706:	e02b      	b.n	1000a760 <ble_connected_state_handler+0x130>
1000a708:	3401      	adds	r4, #1
1000a70a:	237c      	movs	r3, #124	; 0x7c
1000a70c:	469c      	mov	ip, r3
1000a70e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a710:	2c05      	cmp	r4, #5
1000a712:	d1e7      	bne.n	1000a6e4 <ble_connected_state_handler+0xb4>
1000a714:	e072      	b.n	1000a7fc <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a716:	001c      	movs	r4, r3
1000a718:	7811      	ldrb	r1, [r2, #0]
1000a71a:	2900      	cmp	r1, #0
1000a71c:	d11a      	bne.n	1000a754 <ble_connected_state_handler+0x124>
1000a71e:	e001      	b.n	1000a724 <ble_connected_state_handler+0xf4>
1000a720:	2400      	movs	r4, #0
1000a722:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a724:	0163      	lsls	r3, r4, #5
1000a726:	4699      	mov	r9, r3
1000a728:	1b18      	subs	r0, r3, r4
1000a72a:	0080      	lsls	r0, r0, #2
1000a72c:	4b48      	ldr	r3, [pc, #288]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a72e:	4698      	mov	r8, r3
1000a730:	4440      	add	r0, r8
1000a732:	2212      	movs	r2, #18
1000a734:	0029      	movs	r1, r5
1000a736:	4b3f      	ldr	r3, [pc, #252]	; (1000a834 <ble_connected_state_handler+0x204>)
1000a738:	4798      	blx	r3
						ble_device_count++;
1000a73a:	4a46      	ldr	r2, [pc, #280]	; (1000a854 <ble_connected_state_handler+0x224>)
1000a73c:	7813      	ldrb	r3, [r2, #0]
1000a73e:	3301      	adds	r3, #1
1000a740:	b2db      	uxtb	r3, r3
1000a742:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a744:	464b      	mov	r3, r9
1000a746:	1b1b      	subs	r3, r3, r4
1000a748:	009b      	lsls	r3, r3, #2
1000a74a:	4443      	add	r3, r8
1000a74c:	335e      	adds	r3, #94	; 0x5e
1000a74e:	2202      	movs	r2, #2
1000a750:	701a      	strb	r2, [r3, #0]
						break;
1000a752:	e005      	b.n	1000a760 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a754:	1c79      	adds	r1, r7, #1
1000a756:	b2cf      	uxtb	r7, r1
1000a758:	3301      	adds	r3, #1
1000a75a:	327c      	adds	r2, #124	; 0x7c
1000a75c:	2f05      	cmp	r7, #5
1000a75e:	d1da      	bne.n	1000a716 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a760:	2207      	movs	r2, #7
1000a762:	0029      	movs	r1, r5
1000a764:	4834      	ldr	r0, [pc, #208]	; (1000a838 <ble_connected_state_handler+0x208>)
1000a766:	4b35      	ldr	r3, [pc, #212]	; (1000a83c <ble_connected_state_handler+0x20c>)
1000a768:	4798      	blx	r3
1000a76a:	2800      	cmp	r0, #0
1000a76c:	d10c      	bne.n	1000a788 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a76e:	017b      	lsls	r3, r7, #5
1000a770:	1bdb      	subs	r3, r3, r7
1000a772:	009b      	lsls	r3, r3, #2
1000a774:	4a36      	ldr	r2, [pc, #216]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a776:	18d3      	adds	r3, r2, r3
1000a778:	2205      	movs	r2, #5
1000a77a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a77c:	3202      	adds	r2, #2
1000a77e:	2100      	movs	r1, #0
1000a780:	482d      	ldr	r0, [pc, #180]	; (1000a838 <ble_connected_state_handler+0x208>)
1000a782:	4b2f      	ldr	r3, [pc, #188]	; (1000a840 <ble_connected_state_handler+0x210>)
1000a784:	4798      	blx	r3
1000a786:	e042      	b.n	1000a80e <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a788:	4b31      	ldr	r3, [pc, #196]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a78a:	4698      	mov	r8, r3
1000a78c:	017c      	lsls	r4, r7, #5
1000a78e:	1be3      	subs	r3, r4, r7
1000a790:	009b      	lsls	r3, r3, #2
1000a792:	4443      	add	r3, r8
1000a794:	220a      	movs	r2, #10
1000a796:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a798:	3a03      	subs	r2, #3
1000a79a:	2100      	movs	r1, #0
1000a79c:	4826      	ldr	r0, [pc, #152]	; (1000a838 <ble_connected_state_handler+0x208>)
1000a79e:	4b28      	ldr	r3, [pc, #160]	; (1000a840 <ble_connected_state_handler+0x210>)
1000a7a0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a7a2:	1be4      	subs	r4, r4, r7
1000a7a4:	00a4      	lsls	r4, r4, #2
1000a7a6:	4444      	add	r4, r8
1000a7a8:	7ca3      	ldrb	r3, [r4, #18]
1000a7aa:	2b0a      	cmp	r3, #10
1000a7ac:	d12f      	bne.n	1000a80e <ble_connected_state_handler+0x1de>
1000a7ae:	e00d      	b.n	1000a7cc <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a7b0:	481a      	ldr	r0, [pc, #104]	; (1000a81c <ble_connected_state_handler+0x1ec>)
1000a7b2:	4b1b      	ldr	r3, [pc, #108]	; (1000a820 <ble_connected_state_handler+0x1f0>)
1000a7b4:	4798      	blx	r3
1000a7b6:	4b27      	ldr	r3, [pc, #156]	; (1000a854 <ble_connected_state_handler+0x224>)
1000a7b8:	7819      	ldrb	r1, [r3, #0]
1000a7ba:	b2c9      	uxtb	r1, r1
1000a7bc:	4826      	ldr	r0, [pc, #152]	; (1000a858 <ble_connected_state_handler+0x228>)
1000a7be:	4b1a      	ldr	r3, [pc, #104]	; (1000a828 <ble_connected_state_handler+0x1f8>)
1000a7c0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a7c2:	8928      	ldrh	r0, [r5, #8]
1000a7c4:	2113      	movs	r1, #19
1000a7c6:	4b25      	ldr	r3, [pc, #148]	; (1000a85c <ble_connected_state_handler+0x22c>)
1000a7c8:	4798      	blx	r3
1000a7ca:	e020      	b.n	1000a80e <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a7cc:	8928      	ldrh	r0, [r5, #8]
1000a7ce:	4b24      	ldr	r3, [pc, #144]	; (1000a860 <ble_connected_state_handler+0x230>)
1000a7d0:	4798      	blx	r3
1000a7d2:	e01c      	b.n	1000a80e <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a7d4:	4811      	ldr	r0, [pc, #68]	; (1000a81c <ble_connected_state_handler+0x1ec>)
1000a7d6:	4b12      	ldr	r3, [pc, #72]	; (1000a820 <ble_connected_state_handler+0x1f0>)
1000a7d8:	4798      	blx	r3
1000a7da:	7aa9      	ldrb	r1, [r5, #10]
1000a7dc:	4821      	ldr	r0, [pc, #132]	; (1000a864 <ble_connected_state_handler+0x234>)
1000a7de:	4b12      	ldr	r3, [pc, #72]	; (1000a828 <ble_connected_state_handler+0x1f8>)
1000a7e0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a7e2:	2600      	movs	r6, #0
1000a7e4:	e013      	b.n	1000a80e <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a7e6:	4b1b      	ldr	r3, [pc, #108]	; (1000a854 <ble_connected_state_handler+0x224>)
1000a7e8:	781b      	ldrb	r3, [r3, #0]
1000a7ea:	b2db      	uxtb	r3, r3
1000a7ec:	2b04      	cmp	r3, #4
1000a7ee:	d8df      	bhi.n	1000a7b0 <ble_connected_state_handler+0x180>
1000a7f0:	4b17      	ldr	r3, [pc, #92]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a7f2:	4699      	mov	r9, r3
1000a7f4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a7f6:	4b11      	ldr	r3, [pc, #68]	; (1000a83c <ble_connected_state_handler+0x20c>)
1000a7f8:	469b      	mov	fp, r3
1000a7fa:	e773      	b.n	1000a6e4 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a7fc:	235e      	movs	r3, #94	; 0x5e
1000a7fe:	4a14      	ldr	r2, [pc, #80]	; (1000a850 <ble_connected_state_handler+0x220>)
1000a800:	5cd3      	ldrb	r3, [r2, r3]
1000a802:	2b00      	cmp	r3, #0
1000a804:	d08c      	beq.n	1000a720 <ble_connected_state_handler+0xf0>
1000a806:	4a18      	ldr	r2, [pc, #96]	; (1000a868 <ble_connected_state_handler+0x238>)
1000a808:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a80a:	2701      	movs	r7, #1
1000a80c:	e783      	b.n	1000a716 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a80e:	0030      	movs	r0, r6
1000a810:	b01a      	add	sp, #104	; 0x68
1000a812:	bc1c      	pop	{r2, r3, r4}
1000a814:	4690      	mov	r8, r2
1000a816:	4699      	mov	r9, r3
1000a818:	46a3      	mov	fp, r4
1000a81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a81c:	10012770 	.word	0x10012770
1000a820:	100115c9 	.word	0x100115c9
1000a824:	10013084 	.word	0x10013084
1000a828:	100114a9 	.word	0x100114a9
1000a82c:	100130c8 	.word	0x100130c8
1000a830:	10014f34 	.word	0x10014f34
1000a834:	1001134f 	.word	0x1001134f
1000a838:	10014aa0 	.word	0x10014aa0
1000a83c:	10011331 	.word	0x10011331
1000a840:	10011361 	.word	0x10011361
1000a844:	10014cce 	.word	0x10014cce
1000a848:	1000d905 	.word	0x1000d905
1000a84c:	100130e0 	.word	0x100130e0
1000a850:	10014c88 	.word	0x10014c88
1000a854:	10014ef4 	.word	0x10014ef4
1000a858:	10013104 	.word	0x10013104
1000a85c:	1000d8d9 	.word	0x1000d8d9
1000a860:	1000a5fd 	.word	0x1000a5fd
1000a864:	10013140 	.word	0x10013140
1000a868:	10014d62 	.word	0x10014d62

1000a86c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a86e:	4647      	mov	r7, r8
1000a870:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a872:	7803      	ldrb	r3, [r0, #0]
1000a874:	2b00      	cmp	r3, #0
1000a876:	d141      	bne.n	1000a8fc <ble_resolv_rand_addr_handler+0x90>
1000a878:	4d2f      	ldr	r5, [pc, #188]	; (1000a938 <ble_resolv_rand_addr_handler+0xcc>)
1000a87a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a87c:	1c46      	adds	r6, r0, #1
1000a87e:	4f2f      	ldr	r7, [pc, #188]	; (1000a93c <ble_resolv_rand_addr_handler+0xd0>)
1000a880:	2210      	movs	r2, #16
1000a882:	0029      	movs	r1, r5
1000a884:	0030      	movs	r0, r6
1000a886:	47b8      	blx	r7
1000a888:	2800      	cmp	r0, #0
1000a88a:	d03f      	beq.n	1000a90c <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a88c:	3401      	adds	r4, #1
1000a88e:	b2e4      	uxtb	r4, r4
1000a890:	357c      	adds	r5, #124	; 0x7c
1000a892:	2c05      	cmp	r4, #5
1000a894:	d1f4      	bne.n	1000a880 <ble_resolv_rand_addr_handler+0x14>
1000a896:	e031      	b.n	1000a8fc <ble_resolv_rand_addr_handler+0x90>
1000a898:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a89a:	001c      	movs	r4, r3
1000a89c:	7811      	ldrb	r1, [r2, #0]
1000a89e:	2900      	cmp	r1, #0
1000a8a0:	d122      	bne.n	1000a8e8 <ble_resolv_rand_addr_handler+0x7c>
1000a8a2:	e001      	b.n	1000a8a8 <ble_resolv_rand_addr_handler+0x3c>
1000a8a4:	2400      	movs	r4, #0
1000a8a6:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a8a8:	4b25      	ldr	r3, [pc, #148]	; (1000a940 <ble_resolv_rand_addr_handler+0xd4>)
1000a8aa:	4698      	mov	r8, r3
1000a8ac:	0166      	lsls	r6, r4, #5
1000a8ae:	1b37      	subs	r7, r6, r4
1000a8b0:	00bf      	lsls	r7, r7, #2
1000a8b2:	4447      	add	r7, r8
1000a8b4:	2212      	movs	r2, #18
1000a8b6:	4923      	ldr	r1, [pc, #140]	; (1000a944 <ble_resolv_rand_addr_handler+0xd8>)
1000a8b8:	0038      	movs	r0, r7
1000a8ba:	4b23      	ldr	r3, [pc, #140]	; (1000a948 <ble_resolv_rand_addr_handler+0xdc>)
1000a8bc:	4798      	blx	r3
				ble_device_count++;
1000a8be:	4a23      	ldr	r2, [pc, #140]	; (1000a94c <ble_resolv_rand_addr_handler+0xe0>)
1000a8c0:	7813      	ldrb	r3, [r2, #0]
1000a8c2:	3301      	adds	r3, #1
1000a8c4:	b2db      	uxtb	r3, r3
1000a8c6:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a8c8:	375e      	adds	r7, #94	; 0x5e
1000a8ca:	2302      	movs	r3, #2
1000a8cc:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a8ce:	1b34      	subs	r4, r6, r4
1000a8d0:	00a4      	lsls	r4, r4, #2
1000a8d2:	4444      	add	r4, r8
1000a8d4:	3308      	adds	r3, #8
1000a8d6:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a8d8:	016b      	lsls	r3, r5, #5
1000a8da:	1b5d      	subs	r5, r3, r5
1000a8dc:	00ad      	lsls	r5, r5, #2
1000a8de:	4445      	add	r5, r8
1000a8e0:	7cab      	ldrb	r3, [r5, #18]
1000a8e2:	2b0a      	cmp	r3, #10
1000a8e4:	d123      	bne.n	1000a92e <ble_resolv_rand_addr_handler+0xc2>
1000a8e6:	e004      	b.n	1000a8f2 <ble_resolv_rand_addr_handler+0x86>
1000a8e8:	3301      	adds	r3, #1
1000a8ea:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8ec:	2b05      	cmp	r3, #5
1000a8ee:	d1d3      	bne.n	1000a898 <ble_resolv_rand_addr_handler+0x2c>
1000a8f0:	e01d      	b.n	1000a92e <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a8f2:	4b14      	ldr	r3, [pc, #80]	; (1000a944 <ble_resolv_rand_addr_handler+0xd8>)
1000a8f4:	8918      	ldrh	r0, [r3, #8]
1000a8f6:	4b16      	ldr	r3, [pc, #88]	; (1000a950 <ble_resolv_rand_addr_handler+0xe4>)
1000a8f8:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a8fa:	e018      	b.n	1000a92e <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a8fc:	235e      	movs	r3, #94	; 0x5e
1000a8fe:	4a10      	ldr	r2, [pc, #64]	; (1000a940 <ble_resolv_rand_addr_handler+0xd4>)
1000a900:	5cd3      	ldrb	r3, [r2, r3]
1000a902:	2b00      	cmp	r3, #0
1000a904:	d0ce      	beq.n	1000a8a4 <ble_resolv_rand_addr_handler+0x38>
1000a906:	4a13      	ldr	r2, [pc, #76]	; (1000a954 <ble_resolv_rand_addr_handler+0xe8>)
1000a908:	2301      	movs	r3, #1
1000a90a:	e7c5      	b.n	1000a898 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a90c:	480c      	ldr	r0, [pc, #48]	; (1000a940 <ble_resolv_rand_addr_handler+0xd4>)
1000a90e:	0163      	lsls	r3, r4, #5
1000a910:	1b1a      	subs	r2, r3, r4
1000a912:	0092      	lsls	r2, r2, #2
1000a914:	1882      	adds	r2, r0, r2
1000a916:	0011      	movs	r1, r2
1000a918:	315e      	adds	r1, #94	; 0x5e
1000a91a:	2502      	movs	r5, #2
1000a91c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a91e:	210a      	movs	r1, #10
1000a920:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a922:	0010      	movs	r0, r2
1000a924:	2212      	movs	r2, #18
1000a926:	4907      	ldr	r1, [pc, #28]	; (1000a944 <ble_resolv_rand_addr_handler+0xd8>)
1000a928:	4b07      	ldr	r3, [pc, #28]	; (1000a948 <ble_resolv_rand_addr_handler+0xdc>)
1000a92a:	4798      	blx	r3
1000a92c:	e7e1      	b.n	1000a8f2 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a92e:	2000      	movs	r0, #0
1000a930:	bc04      	pop	{r2}
1000a932:	4690      	mov	r8, r2
1000a934:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a936:	46c0      	nop			; (mov r8, r8)
1000a938:	10014cce 	.word	0x10014cce
1000a93c:	10011331 	.word	0x10011331
1000a940:	10014c88 	.word	0x10014c88
1000a944:	10014f34 	.word	0x10014f34
1000a948:	1001134f 	.word	0x1001134f
1000a94c:	10014ef4 	.word	0x10014ef4
1000a950:	1000a5fd 	.word	0x1000a5fd
1000a954:	10014d62 	.word	0x10014d62

1000a958 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a95a:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a95c:	283b      	cmp	r0, #59	; 0x3b
1000a95e:	d872      	bhi.n	1000aa46 <ble_event_manager+0xee>
1000a960:	0083      	lsls	r3, r0, #2
1000a962:	4a3c      	ldr	r2, [pc, #240]	; (1000aa54 <ble_event_manager+0xfc>)
1000a964:	58d3      	ldr	r3, [r2, r3]
1000a966:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a968:	0084      	lsls	r4, r0, #2
1000a96a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a96c:	4f3a      	ldr	r7, [pc, #232]	; (1000aa58 <ble_event_manager+0x100>)
1000a96e:	59bb      	ldr	r3, [r7, r6]
1000a970:	2b00      	cmp	r3, #0
1000a972:	d004      	beq.n	1000a97e <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a974:	591b      	ldr	r3, [r3, r4]
1000a976:	2b00      	cmp	r3, #0
1000a978:	d001      	beq.n	1000a97e <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000a97a:	0028      	movs	r0, r5
1000a97c:	4798      	blx	r3
1000a97e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a980:	2e14      	cmp	r6, #20
1000a982:	d1f4      	bne.n	1000a96e <ble_event_manager+0x16>
1000a984:	e065      	b.n	1000aa52 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a986:	3813      	subs	r0, #19
1000a988:	b2c4      	uxtb	r4, r0
1000a98a:	00a4      	lsls	r4, r4, #2
1000a98c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a98e:	4f33      	ldr	r7, [pc, #204]	; (1000aa5c <ble_event_manager+0x104>)
1000a990:	59bb      	ldr	r3, [r7, r6]
1000a992:	2b00      	cmp	r3, #0
1000a994:	d004      	beq.n	1000a9a0 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a996:	591b      	ldr	r3, [r3, r4]
1000a998:	2b00      	cmp	r3, #0
1000a99a:	d001      	beq.n	1000a9a0 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000a99c:	0028      	movs	r0, r5
1000a99e:	4798      	blx	r3
1000a9a0:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a9a2:	2e14      	cmp	r6, #20
1000a9a4:	d1f4      	bne.n	1000a990 <ble_event_manager+0x38>
1000a9a6:	e054      	b.n	1000aa52 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9a8:	381d      	subs	r0, #29
1000a9aa:	b2c4      	uxtb	r4, r0
1000a9ac:	00a4      	lsls	r4, r4, #2
1000a9ae:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a9b0:	4f2b      	ldr	r7, [pc, #172]	; (1000aa60 <ble_event_manager+0x108>)
1000a9b2:	59bb      	ldr	r3, [r7, r6]
1000a9b4:	2b00      	cmp	r3, #0
1000a9b6:	d004      	beq.n	1000a9c2 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9b8:	591b      	ldr	r3, [r3, r4]
1000a9ba:	2b00      	cmp	r3, #0
1000a9bc:	d001      	beq.n	1000a9c2 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000a9be:	0028      	movs	r0, r5
1000a9c0:	4798      	blx	r3
1000a9c2:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a9c4:	2e14      	cmp	r6, #20
1000a9c6:	d1f4      	bne.n	1000a9b2 <ble_event_manager+0x5a>
1000a9c8:	e043      	b.n	1000aa52 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a9ca:	3827      	subs	r0, #39	; 0x27
1000a9cc:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a9ce:	4b25      	ldr	r3, [pc, #148]	; (1000aa64 <ble_event_manager+0x10c>)
1000a9d0:	681b      	ldr	r3, [r3, #0]
1000a9d2:	2b00      	cmp	r3, #0
1000a9d4:	d03d      	beq.n	1000aa52 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9d6:	0080      	lsls	r0, r0, #2
1000a9d8:	58c3      	ldr	r3, [r0, r3]
1000a9da:	2b00      	cmp	r3, #0
1000a9dc:	d039      	beq.n	1000aa52 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a9de:	0008      	movs	r0, r1
1000a9e0:	4798      	blx	r3
1000a9e2:	e036      	b.n	1000aa52 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a9e4:	382d      	subs	r0, #45	; 0x2d
1000a9e6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a9e8:	4b1f      	ldr	r3, [pc, #124]	; (1000aa68 <ble_event_manager+0x110>)
1000a9ea:	681b      	ldr	r3, [r3, #0]
1000a9ec:	2b00      	cmp	r3, #0
1000a9ee:	d030      	beq.n	1000aa52 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9f0:	0080      	lsls	r0, r0, #2
1000a9f2:	58c3      	ldr	r3, [r0, r3]
1000a9f4:	2b00      	cmp	r3, #0
1000a9f6:	d02c      	beq.n	1000aa52 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a9f8:	0008      	movs	r0, r1
1000a9fa:	4798      	blx	r3
1000a9fc:	e029      	b.n	1000aa52 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a9fe:	3836      	subs	r0, #54	; 0x36
1000aa00:	b2c4      	uxtb	r4, r0
1000aa02:	00a4      	lsls	r4, r4, #2
1000aa04:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000aa06:	4f19      	ldr	r7, [pc, #100]	; (1000aa6c <ble_event_manager+0x114>)
1000aa08:	59bb      	ldr	r3, [r7, r6]
1000aa0a:	2b00      	cmp	r3, #0
1000aa0c:	d004      	beq.n	1000aa18 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa0e:	591b      	ldr	r3, [r3, r4]
1000aa10:	2b00      	cmp	r3, #0
1000aa12:	d001      	beq.n	1000aa18 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000aa14:	0028      	movs	r0, r5
1000aa16:	4798      	blx	r3
1000aa18:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000aa1a:	2e14      	cmp	r6, #20
1000aa1c:	d1f4      	bne.n	1000aa08 <ble_event_manager+0xb0>
1000aa1e:	e018      	b.n	1000aa52 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000aa20:	3838      	subs	r0, #56	; 0x38
1000aa22:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000aa24:	4b12      	ldr	r3, [pc, #72]	; (1000aa70 <ble_event_manager+0x118>)
1000aa26:	681b      	ldr	r3, [r3, #0]
1000aa28:	2b00      	cmp	r3, #0
1000aa2a:	d012      	beq.n	1000aa52 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aa2c:	0080      	lsls	r0, r0, #2
1000aa2e:	58c3      	ldr	r3, [r0, r3]
1000aa30:	2b00      	cmp	r3, #0
1000aa32:	d00e      	beq.n	1000aa52 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aa34:	0008      	movs	r0, r1
1000aa36:	4798      	blx	r3
1000aa38:	e00b      	b.n	1000aa52 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000aa3a:	4b0e      	ldr	r3, [pc, #56]	; (1000aa74 <ble_event_manager+0x11c>)
1000aa3c:	681b      	ldr	r3, [r3, #0]
1000aa3e:	2b00      	cmp	r3, #0
1000aa40:	d007      	beq.n	1000aa52 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000aa42:	4798      	blx	r3
1000aa44:	e005      	b.n	1000aa52 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000aa46:	4d0c      	ldr	r5, [pc, #48]	; (1000aa78 <ble_event_manager+0x120>)
1000aa48:	0028      	movs	r0, r5
1000aa4a:	4c0c      	ldr	r4, [pc, #48]	; (1000aa7c <ble_event_manager+0x124>)
1000aa4c:	47a0      	blx	r4
1000aa4e:	0028      	movs	r0, r5
1000aa50:	47a0      	blx	r4
	}
	break;		
	}
}
1000aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa54:	10012a44 	.word	0x10012a44
1000aa58:	10014f0c 	.word	0x10014f0c
1000aa5c:	10014f20 	.word	0x10014f20
1000aa60:	10014c74 	.word	0x10014c74
1000aa64:	10014f68 	.word	0x10014f68
1000aa68:	10014c70 	.word	0x10014c70
1000aa6c:	10014ef8 	.word	0x10014ef8
1000aa70:	100154ac 	.word	0x100154ac
1000aa74:	10014a98 	.word	0x10014a98
1000aa78:	10012770 	.word	0x10012770
1000aa7c:	100115c9 	.word	0x100115c9

1000aa80 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000aa80:	b570      	push	{r4, r5, r6, lr}
1000aa82:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000aa84:	4b0d      	ldr	r3, [pc, #52]	; (1000aabc <ble_event_task+0x3c>)
1000aa86:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000aa88:	2b01      	cmp	r3, #1
1000aa8a:	d101      	bne.n	1000aa90 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000aa8c:	4b0c      	ldr	r3, [pc, #48]	; (1000aac0 <ble_event_task+0x40>)
1000aa8e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000aa90:	0022      	movs	r2, r4
1000aa92:	490c      	ldr	r1, [pc, #48]	; (1000aac4 <ble_event_task+0x44>)
1000aa94:	480c      	ldr	r0, [pc, #48]	; (1000aac8 <ble_event_task+0x48>)
1000aa96:	4b0d      	ldr	r3, [pc, #52]	; (1000aacc <ble_event_task+0x4c>)
1000aa98:	4798      	blx	r3
1000aa9a:	0004      	movs	r4, r0
1000aa9c:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000aa9e:	4b07      	ldr	r3, [pc, #28]	; (1000aabc <ble_event_task+0x3c>)
1000aaa0:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000aaa2:	2b01      	cmp	r3, #1
1000aaa4:	d101      	bne.n	1000aaaa <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000aaa6:	4b0a      	ldr	r3, [pc, #40]	; (1000aad0 <ble_event_task+0x50>)
1000aaa8:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000aaaa:	2d00      	cmp	r5, #0
1000aaac:	d104      	bne.n	1000aab8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000aaae:	4b06      	ldr	r3, [pc, #24]	; (1000aac8 <ble_event_task+0x48>)
1000aab0:	7818      	ldrb	r0, [r3, #0]
1000aab2:	4904      	ldr	r1, [pc, #16]	; (1000aac4 <ble_event_task+0x44>)
1000aab4:	4b07      	ldr	r3, [pc, #28]	; (1000aad4 <ble_event_task+0x54>)
1000aab6:	4798      	blx	r3
    }
    
    return status;
}
1000aab8:	0020      	movs	r0, r4
1000aaba:	bd70      	pop	{r4, r5, r6, pc}
1000aabc:	10014aa7 	.word	0x10014aa7
1000aac0:	1000b3e5 	.word	0x1000b3e5
1000aac4:	100152a0 	.word	0x100152a0
1000aac8:	10014f64 	.word	0x10014f64
1000aacc:	1000ce59 	.word	0x1000ce59
1000aad0:	1000b3bd 	.word	0x1000b3bd
1000aad4:	1000a959 	.word	0x1000a959

1000aad8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000aad8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000aada:	4b0e      	ldr	r3, [pc, #56]	; (1000ab14 <uart_read_complete_callback+0x3c>)
1000aadc:	781b      	ldrb	r3, [r3, #0]
1000aade:	2b01      	cmp	r3, #1
1000aae0:	d10b      	bne.n	1000aafa <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000aae2:	2202      	movs	r2, #2
1000aae4:	4b0b      	ldr	r3, [pc, #44]	; (1000ab14 <uart_read_complete_callback+0x3c>)
1000aae6:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000aae8:	4b0b      	ldr	r3, [pc, #44]	; (1000ab18 <uart_read_complete_callback+0x40>)
1000aaea:	681b      	ldr	r3, [r3, #0]
1000aaec:	2b00      	cmp	r3, #0
1000aaee:	d110      	bne.n	1000ab12 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000aaf0:	2102      	movs	r1, #2
1000aaf2:	480a      	ldr	r0, [pc, #40]	; (1000ab1c <uart_read_complete_callback+0x44>)
1000aaf4:	4b0a      	ldr	r3, [pc, #40]	; (1000ab20 <uart_read_complete_callback+0x48>)
1000aaf6:	4798      	blx	r3
1000aaf8:	e00b      	b.n	1000ab12 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000aafa:	4b07      	ldr	r3, [pc, #28]	; (1000ab18 <uart_read_complete_callback+0x40>)
1000aafc:	681b      	ldr	r3, [r3, #0]
1000aafe:	2b00      	cmp	r3, #0
1000ab00:	d007      	beq.n	1000ab12 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ab02:	4c08      	ldr	r4, [pc, #32]	; (1000ab24 <uart_read_complete_callback+0x4c>)
1000ab04:	7820      	ldrb	r0, [r4, #0]
1000ab06:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ab08:	2201      	movs	r2, #1
1000ab0a:	0021      	movs	r1, r4
1000ab0c:	4803      	ldr	r0, [pc, #12]	; (1000ab1c <uart_read_complete_callback+0x44>)
1000ab0e:	4b06      	ldr	r3, [pc, #24]	; (1000ab28 <uart_read_complete_callback+0x50>)
1000ab10:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ab12:	bd10      	pop	{r4, pc}
1000ab14:	10014aac 	.word	0x10014aac
1000ab18:	10014ab4 	.word	0x10014ab4
1000ab1c:	100154b0 	.word	0x100154b0
1000ab20:	1000bab5 	.word	0x1000bab5
1000ab24:	10014ab0 	.word	0x10014ab0
1000ab28:	1000ba59 	.word	0x1000ba59

1000ab2c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ab2c:	b570      	push	{r4, r5, r6, lr}
1000ab2e:	0006      	movs	r6, r0
1000ab30:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ab32:	4c03      	ldr	r4, [pc, #12]	; (1000ab40 <usart_serial_getchar+0x14>)
1000ab34:	0029      	movs	r1, r5
1000ab36:	0030      	movs	r0, r6
1000ab38:	47a0      	blx	r4
1000ab3a:	2800      	cmp	r0, #0
1000ab3c:	d1fa      	bne.n	1000ab34 <usart_serial_getchar+0x8>
}
1000ab3e:	bd70      	pop	{r4, r5, r6, pc}
1000ab40:	1000ba45 	.word	0x1000ba45

1000ab44 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ab44:	b570      	push	{r4, r5, r6, lr}
1000ab46:	0006      	movs	r6, r0
1000ab48:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ab4a:	4c03      	ldr	r4, [pc, #12]	; (1000ab58 <usart_serial_putchar+0x14>)
1000ab4c:	0029      	movs	r1, r5
1000ab4e:	0030      	movs	r0, r6
1000ab50:	47a0      	blx	r4
1000ab52:	2800      	cmp	r0, #0
1000ab54:	d1fa      	bne.n	1000ab4c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ab56:	bd70      	pop	{r4, r5, r6, pc}
1000ab58:	1000ba35 	.word	0x1000ba35

1000ab5c <serial_console_init>:

void serial_console_init(void)
{
1000ab5c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ab5e:	2100      	movs	r1, #0
1000ab60:	2000      	movs	r0, #0
1000ab62:	4b19      	ldr	r3, [pc, #100]	; (1000abc8 <serial_console_init+0x6c>)
1000ab64:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ab66:	4c19      	ldr	r4, [pc, #100]	; (1000abcc <serial_console_init+0x70>)
1000ab68:	0020      	movs	r0, r4
1000ab6a:	4b19      	ldr	r3, [pc, #100]	; (1000abd0 <serial_console_init+0x74>)
1000ab6c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ab6e:	23e1      	movs	r3, #225	; 0xe1
1000ab70:	025b      	lsls	r3, r3, #9
1000ab72:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ab74:	2302      	movs	r3, #2
1000ab76:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ab78:	2203      	movs	r2, #3
1000ab7a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ab7c:	3201      	adds	r2, #1
1000ab7e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ab80:	3201      	adds	r2, #1
1000ab82:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ab84:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ab86:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ab88:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ab8a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ab8c:	4d11      	ldr	r5, [pc, #68]	; (1000abd4 <serial_console_init+0x78>)
1000ab8e:	4b12      	ldr	r3, [pc, #72]	; (1000abd8 <serial_console_init+0x7c>)
1000ab90:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ab92:	4a12      	ldr	r2, [pc, #72]	; (1000abdc <serial_console_init+0x80>)
1000ab94:	4b12      	ldr	r3, [pc, #72]	; (1000abe0 <serial_console_init+0x84>)
1000ab96:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000ab98:	4a12      	ldr	r2, [pc, #72]	; (1000abe4 <serial_console_init+0x88>)
1000ab9a:	4b13      	ldr	r3, [pc, #76]	; (1000abe8 <serial_console_init+0x8c>)
1000ab9c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ab9e:	0022      	movs	r2, r4
1000aba0:	4912      	ldr	r1, [pc, #72]	; (1000abec <serial_console_init+0x90>)
1000aba2:	0028      	movs	r0, r5
1000aba4:	4b12      	ldr	r3, [pc, #72]	; (1000abf0 <serial_console_init+0x94>)
1000aba6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000aba8:	4e12      	ldr	r6, [pc, #72]	; (1000abf4 <serial_console_init+0x98>)
1000abaa:	6833      	ldr	r3, [r6, #0]
1000abac:	6898      	ldr	r0, [r3, #8]
1000abae:	2100      	movs	r1, #0
1000abb0:	4c11      	ldr	r4, [pc, #68]	; (1000abf8 <serial_console_init+0x9c>)
1000abb2:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000abb4:	6833      	ldr	r3, [r6, #0]
1000abb6:	6858      	ldr	r0, [r3, #4]
1000abb8:	2100      	movs	r1, #0
1000abba:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000abbc:	2202      	movs	r2, #2
1000abbe:	490f      	ldr	r1, [pc, #60]	; (1000abfc <serial_console_init+0xa0>)
1000abc0:	0028      	movs	r0, r5
1000abc2:	4b0f      	ldr	r3, [pc, #60]	; (1000ac00 <serial_console_init+0xa4>)
1000abc4:	4798      	blx	r3
}
1000abc6:	bd70      	pop	{r4, r5, r6, pc}
1000abc8:	1000c2b5 	.word	0x1000c2b5
1000abcc:	100154d4 	.word	0x100154d4
1000abd0:	1000b84d 	.word	0x1000b84d
1000abd4:	100154b0 	.word	0x100154b0
1000abd8:	100157fc 	.word	0x100157fc
1000abdc:	1000ab45 	.word	0x1000ab45
1000abe0:	100157f8 	.word	0x100157f8
1000abe4:	1000ab2d 	.word	0x1000ab2d
1000abe8:	100157f4 	.word	0x100157f4
1000abec:	40004000 	.word	0x40004000
1000abf0:	1000b879 	.word	0x1000b879
1000abf4:	10013660 	.word	0x10013660
1000abf8:	10011679 	.word	0x10011679
1000abfc:	1000aad9 	.word	0x1000aad9
1000ac00:	1000ba81 	.word	0x1000ba81

1000ac04 <_time_start>:

void _time_start(unsigned int sec)
{
1000ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac06:	b083      	sub	sp, #12
1000ac08:	0005      	movs	r5, r0
	system_clock_get_value();
1000ac0a:	4c0d      	ldr	r4, [pc, #52]	; (1000ac40 <_time_start+0x3c>)
1000ac0c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ac0e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ac10:	4f0c      	ldr	r7, [pc, #48]	; (1000ac44 <_time_start+0x40>)
1000ac12:	47b8      	blx	r7
1000ac14:	4e0c      	ldr	r6, [pc, #48]	; (1000ac48 <_time_start+0x44>)
1000ac16:	4a0d      	ldr	r2, [pc, #52]	; (1000ac4c <_time_start+0x48>)
1000ac18:	4b0d      	ldr	r3, [pc, #52]	; (1000ac50 <_time_start+0x4c>)
1000ac1a:	47b0      	blx	r6
1000ac1c:	9000      	str	r0, [sp, #0]
1000ac1e:	9101      	str	r1, [sp, #4]
1000ac20:	20fa      	movs	r0, #250	; 0xfa
1000ac22:	0080      	lsls	r0, r0, #2
1000ac24:	4368      	muls	r0, r5
1000ac26:	47b8      	blx	r7
1000ac28:	0002      	movs	r2, r0
1000ac2a:	000b      	movs	r3, r1
1000ac2c:	9800      	ldr	r0, [sp, #0]
1000ac2e:	9901      	ldr	r1, [sp, #4]
1000ac30:	47b0      	blx	r6
1000ac32:	4b08      	ldr	r3, [pc, #32]	; (1000ac54 <_time_start+0x50>)
1000ac34:	4798      	blx	r3
1000ac36:	4b08      	ldr	r3, [pc, #32]	; (1000ac58 <_time_start+0x54>)
1000ac38:	6018      	str	r0, [r3, #0]
}
1000ac3a:	b003      	add	sp, #12
1000ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac3e:	46c0      	nop			; (mov r8, r8)
1000ac40:	1000c339 	.word	0x1000c339
1000ac44:	10011225 	.word	0x10011225
1000ac48:	1001061d 	.word	0x1001061d
1000ac4c:	19feaec7 	.word	0x19feaec7
1000ac50:	3f09d8ef 	.word	0x3f09d8ef
1000ac54:	1000fa3d 	.word	0x1000fa3d
1000ac58:	10014aa8 	.word	0x10014aa8

1000ac5c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ac5c:	4b02      	ldr	r3, [pc, #8]	; (1000ac68 <_time_done+0xc>)
1000ac5e:	681a      	ldr	r2, [r3, #0]
1000ac60:	1e50      	subs	r0, r2, #1
1000ac62:	6018      	str	r0, [r3, #0]
}
1000ac64:	4770      	bx	lr
1000ac66:	46c0      	nop			; (mov r8, r8)
1000ac68:	10014aa8 	.word	0x10014aa8

1000ac6c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ac6c:	b570      	push	{r4, r5, r6, lr}
1000ac6e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ac70:	2201      	movs	r2, #1
1000ac72:	4b11      	ldr	r3, [pc, #68]	; (1000acb8 <getchar_b11_timeout+0x4c>)
1000ac74:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ac76:	4b11      	ldr	r3, [pc, #68]	; (1000acbc <getchar_b11_timeout+0x50>)
1000ac78:	681b      	ldr	r3, [r3, #0]
1000ac7a:	2b00      	cmp	r3, #0
1000ac7c:	d103      	bne.n	1000ac86 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ac7e:	2102      	movs	r1, #2
1000ac80:	480f      	ldr	r0, [pc, #60]	; (1000acc0 <getchar_b11_timeout+0x54>)
1000ac82:	4b10      	ldr	r3, [pc, #64]	; (1000acc4 <getchar_b11_timeout+0x58>)
1000ac84:	4798      	blx	r3

	_time_start(sec);
1000ac86:	0020      	movs	r0, r4
1000ac88:	4b0f      	ldr	r3, [pc, #60]	; (1000acc8 <getchar_b11_timeout+0x5c>)
1000ac8a:	4798      	blx	r3
	
	string_input[0] = 0;
1000ac8c:	490f      	ldr	r1, [pc, #60]	; (1000accc <getchar_b11_timeout+0x60>)
1000ac8e:	2300      	movs	r3, #0
1000ac90:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ac92:	2201      	movs	r2, #1
1000ac94:	480a      	ldr	r0, [pc, #40]	; (1000acc0 <getchar_b11_timeout+0x54>)
1000ac96:	4b0e      	ldr	r3, [pc, #56]	; (1000acd0 <getchar_b11_timeout+0x64>)
1000ac98:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ac9a:	4c07      	ldr	r4, [pc, #28]	; (1000acb8 <getchar_b11_timeout+0x4c>)
1000ac9c:	4d0d      	ldr	r5, [pc, #52]	; (1000acd4 <getchar_b11_timeout+0x68>)
1000ac9e:	7823      	ldrb	r3, [r4, #0]
1000aca0:	2b02      	cmp	r3, #2
1000aca2:	d002      	beq.n	1000acaa <getchar_b11_timeout+0x3e>
1000aca4:	47a8      	blx	r5
1000aca6:	2800      	cmp	r0, #0
1000aca8:	d1f9      	bne.n	1000ac9e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000acaa:	2200      	movs	r2, #0
1000acac:	4b02      	ldr	r3, [pc, #8]	; (1000acb8 <getchar_b11_timeout+0x4c>)
1000acae:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000acb0:	4b06      	ldr	r3, [pc, #24]	; (1000accc <getchar_b11_timeout+0x60>)
1000acb2:	7818      	ldrb	r0, [r3, #0]
}
1000acb4:	bd70      	pop	{r4, r5, r6, pc}
1000acb6:	46c0      	nop			; (mov r8, r8)
1000acb8:	10014aac 	.word	0x10014aac
1000acbc:	10014ab4 	.word	0x10014ab4
1000acc0:	100154b0 	.word	0x100154b0
1000acc4:	1000ba95 	.word	0x1000ba95
1000acc8:	1000ac05 	.word	0x1000ac05
1000accc:	10014ab0 	.word	0x10014ab0
1000acd0:	1000ba59 	.word	0x1000ba59
1000acd4:	1000ac5d 	.word	0x1000ac5d

1000acd8 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000acd8:	4b02      	ldr	r3, [pc, #8]	; (1000ace4 <platform_event_free+0xc>)
1000acda:	681a      	ldr	r2, [r3, #0]
1000acdc:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000acde:	6018      	str	r0, [r3, #0]
}
1000ace0:	4770      	bx	lr
1000ace2:	46c0      	nop			; (mov r8, r8)
1000ace4:	10014abc 	.word	0x10014abc

1000ace8 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ace8:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000acea:	4b0b      	ldr	r3, [pc, #44]	; (1000ad18 <platform_event_post+0x30>)
1000acec:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000acee:	2c00      	cmp	r4, #0
1000acf0:	d011      	beq.n	1000ad16 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000acf2:	6825      	ldr	r5, [r4, #0]
1000acf4:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000acf6:	2300      	movs	r3, #0
1000acf8:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000acfa:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000acfc:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000acfe:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ad00:	4b06      	ldr	r3, [pc, #24]	; (1000ad1c <platform_event_post+0x34>)
1000ad02:	681a      	ldr	r2, [r3, #0]
1000ad04:	2a00      	cmp	r2, #0
1000ad06:	d102      	bne.n	1000ad0e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ad08:	601c      	str	r4, [r3, #0]
1000ad0a:	e004      	b.n	1000ad16 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ad0c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ad0e:	6813      	ldr	r3, [r2, #0]
1000ad10:	2b00      	cmp	r3, #0
1000ad12:	d1fb      	bne.n	1000ad0c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ad14:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ad16:	bd30      	pop	{r4, r5, pc}
1000ad18:	10014abc 	.word	0x10014abc
1000ad1c:	10014ab8 	.word	0x10014ab8

1000ad20 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000ad20:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ad22:	2300      	movs	r3, #0
1000ad24:	4a06      	ldr	r2, [pc, #24]	; (1000ad40 <platform_event_init+0x20>)
1000ad26:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ad28:	4a06      	ldr	r2, [pc, #24]	; (1000ad44 <platform_event_init+0x24>)
1000ad2a:	6013      	str	r3, [r2, #0]
1000ad2c:	4c06      	ldr	r4, [pc, #24]	; (1000ad48 <platform_event_init+0x28>)
1000ad2e:	0026      	movs	r6, r4
1000ad30:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ad32:	4d06      	ldr	r5, [pc, #24]	; (1000ad4c <platform_event_init+0x2c>)
1000ad34:	0020      	movs	r0, r4
1000ad36:	47a8      	blx	r5
1000ad38:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ad3a:	42b4      	cmp	r4, r6
1000ad3c:	d1fa      	bne.n	1000ad34 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ad3e:	bd70      	pop	{r4, r5, r6, pc}
1000ad40:	10014abc 	.word	0x10014abc
1000ad44:	10014ab8 	.word	0x10014ab8
1000ad48:	10014ac0 	.word	0x10014ac0
1000ad4c:	1000acd9 	.word	0x1000acd9

1000ad50 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ad50:	b570      	push	{r4, r5, r6, lr}
1000ad52:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ad54:	4b13      	ldr	r3, [pc, #76]	; (1000ada4 <at_ke_msg_send+0x54>)
1000ad56:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ad58:	4b13      	ldr	r3, [pc, #76]	; (1000ada8 <at_ke_msg_send+0x58>)
1000ad5a:	681b      	ldr	r3, [r3, #0]
1000ad5c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ad5e:	2c0c      	cmp	r4, #12
1000ad60:	d01f      	beq.n	1000ada2 <at_ke_msg_send+0x52>
1000ad62:	3c0c      	subs	r4, #12
1000ad64:	88e3      	ldrh	r3, [r4, #6]
1000ad66:	2b05      	cmp	r3, #5
1000ad68:	d01b      	beq.n	1000ada2 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ad6a:	07eb      	lsls	r3, r5, #31
1000ad6c:	d414      	bmi.n	1000ad98 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ad6e:	4b0f      	ldr	r3, [pc, #60]	; (1000adac <at_ke_msg_send+0x5c>)
1000ad70:	681b      	ldr	r3, [r3, #0]
1000ad72:	2002      	movs	r0, #2
1000ad74:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ad76:	4b0e      	ldr	r3, [pc, #56]	; (1000adb0 <at_ke_msg_send+0x60>)
1000ad78:	681b      	ldr	r3, [r3, #0]
1000ad7a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ad7c:	4c0d      	ldr	r4, [pc, #52]	; (1000adb4 <at_ke_msg_send+0x64>)
1000ad7e:	2003      	movs	r0, #3
1000ad80:	6823      	ldr	r3, [r4, #0]
1000ad82:	4798      	blx	r3
1000ad84:	2800      	cmp	r0, #0
1000ad86:	d1fa      	bne.n	1000ad7e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ad88:	4b0b      	ldr	r3, [pc, #44]	; (1000adb8 <at_ke_msg_send+0x68>)
1000ad8a:	681b      	ldr	r3, [r3, #0]
1000ad8c:	3002      	adds	r0, #2
1000ad8e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ad90:	2201      	movs	r2, #1
1000ad92:	4b0a      	ldr	r3, [pc, #40]	; (1000adbc <at_ke_msg_send+0x6c>)
1000ad94:	601a      	str	r2, [r3, #0]
1000ad96:	e004      	b.n	1000ada2 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ad98:	4b09      	ldr	r3, [pc, #36]	; (1000adc0 <at_ke_msg_send+0x70>)
1000ad9a:	6818      	ldr	r0, [r3, #0]
1000ad9c:	4b09      	ldr	r3, [pc, #36]	; (1000adc4 <at_ke_msg_send+0x74>)
1000ad9e:	681b      	ldr	r3, [r3, #0]
1000ada0:	4798      	blx	r3
		}
	}
}
1000ada2:	bd70      	pop	{r4, r5, r6, pc}
1000ada4:	4000b1ec 	.word	0x4000b1ec
1000ada8:	10014b68 	.word	0x10014b68
1000adac:	10014b60 	.word	0x10014b60
1000adb0:	10014b70 	.word	0x10014b70
1000adb4:	10014b4c 	.word	0x10014b4c
1000adb8:	10014b54 	.word	0x10014b54
1000adbc:	4000b020 	.word	0x4000b020
1000adc0:	10014b58 	.word	0x10014b58
1000adc4:	10014b48 	.word	0x10014b48

1000adc8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000adc8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000adca:	4b06      	ldr	r3, [pc, #24]	; (1000ade4 <samb11_plf_resume_callback+0x1c>)
1000adcc:	4a06      	ldr	r2, [pc, #24]	; (1000ade8 <samb11_plf_resume_callback+0x20>)
1000adce:	6819      	ldr	r1, [r3, #0]
1000add0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000add2:	685a      	ldr	r2, [r3, #4]
1000add4:	4b05      	ldr	r3, [pc, #20]	; (1000adec <samb11_plf_resume_callback+0x24>)
1000add6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000add8:	4b05      	ldr	r3, [pc, #20]	; (1000adf0 <samb11_plf_resume_callback+0x28>)
1000adda:	681b      	ldr	r3, [r3, #0]
1000addc:	2b00      	cmp	r3, #0
1000adde:	d000      	beq.n	1000ade2 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ade0:	4798      	blx	r3
	}
}
1000ade2:	bd10      	pop	{r4, pc}
1000ade4:	100154fc 	.word	0x100154fc
1000ade8:	4000b00c 	.word	0x4000b00c
1000adec:	4000b010 	.word	0x4000b010
1000adf0:	100157d8 	.word	0x100157d8

1000adf4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000adf4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000adf6:	2232      	movs	r2, #50	; 0x32
1000adf8:	2100      	movs	r1, #0
1000adfa:	480d      	ldr	r0, [pc, #52]	; (1000ae30 <init_port_list+0x3c>)
1000adfc:	4b0d      	ldr	r3, [pc, #52]	; (1000ae34 <init_port_list+0x40>)
1000adfe:	4798      	blx	r3
1000ae00:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae02:	480b      	ldr	r0, [pc, #44]	; (1000ae30 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000ae04:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000ae06:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000ae08:	004a      	lsls	r2, r1, #1
1000ae0a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000ae0c:	1882      	adds	r2, r0, r2
1000ae0e:	7853      	ldrb	r3, [r2, #1]
1000ae10:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000ae12:	b2db      	uxtb	r3, r3
1000ae14:	43a3      	bics	r3, r4
1000ae16:	7053      	strb	r3, [r2, #1]
1000ae18:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ae1a:	2919      	cmp	r1, #25
1000ae1c:	d1f4      	bne.n	1000ae08 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ae1e:	4b04      	ldr	r3, [pc, #16]	; (1000ae30 <init_port_list+0x3c>)
1000ae20:	785a      	ldrb	r2, [r3, #1]
1000ae22:	3918      	subs	r1, #24
1000ae24:	438a      	bics	r2, r1
1000ae26:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000ae28:	78da      	ldrb	r2, [r3, #3]
1000ae2a:	438a      	bics	r2, r1
1000ae2c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000ae2e:	bd70      	pop	{r4, r5, r6, pc}
1000ae30:	10015518 	.word	0x10015518
1000ae34:	10011361 	.word	0x10011361

1000ae38 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ae38:	4a06      	ldr	r2, [pc, #24]	; (1000ae54 <init_clock+0x1c>)
1000ae3a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ae3c:	4b06      	ldr	r3, [pc, #24]	; (1000ae58 <init_clock+0x20>)
1000ae3e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ae40:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ae42:	4a06      	ldr	r2, [pc, #24]	; (1000ae5c <init_clock+0x24>)
1000ae44:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ae46:	4906      	ldr	r1, [pc, #24]	; (1000ae60 <init_clock+0x28>)
1000ae48:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ae4a:	4b06      	ldr	r3, [pc, #24]	; (1000ae64 <init_clock+0x2c>)
1000ae4c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000ae4e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000ae50:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000ae52:	4770      	bx	lr
1000ae54:	4000b00c 	.word	0x4000b00c
1000ae58:	fffe0fd3 	.word	0xfffe0fd3
1000ae5c:	100154fc 	.word	0x100154fc
1000ae60:	4000b010 	.word	0x4000b010
1000ae64:	ffffe7c0 	.word	0xffffe7c0

1000ae68 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae6a:	4657      	mov	r7, sl
1000ae6c:	464e      	mov	r6, r9
1000ae6e:	4645      	mov	r5, r8
1000ae70:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ae72:	4b4f      	ldr	r3, [pc, #316]	; (1000afb0 <platform_driver_init+0x148>)
1000ae74:	781b      	ldrb	r3, [r3, #0]
1000ae76:	2b00      	cmp	r3, #0
1000ae78:	d004      	beq.n	1000ae84 <platform_driver_init+0x1c>
1000ae7a:	4b4d      	ldr	r3, [pc, #308]	; (1000afb0 <platform_driver_init+0x148>)
1000ae7c:	781b      	ldrb	r3, [r3, #0]
1000ae7e:	2b01      	cmp	r3, #1
1000ae80:	d100      	bne.n	1000ae84 <platform_driver_init+0x1c>
1000ae82:	e08c      	b.n	1000af9e <platform_driver_init+0x136>
		init_port_list();
1000ae84:	4b4b      	ldr	r3, [pc, #300]	; (1000afb4 <platform_driver_init+0x14c>)
1000ae86:	4798      	blx	r3
		init_clock();
1000ae88:	4b4b      	ldr	r3, [pc, #300]	; (1000afb8 <platform_driver_init+0x150>)
1000ae8a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ae8c:	2300      	movs	r3, #0
1000ae8e:	4698      	mov	r8, r3
1000ae90:	4b4a      	ldr	r3, [pc, #296]	; (1000afbc <platform_driver_init+0x154>)
1000ae92:	4642      	mov	r2, r8
1000ae94:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae96:	4c4a      	ldr	r4, [pc, #296]	; (1000afc0 <platform_driver_init+0x158>)
1000ae98:	2380      	movs	r3, #128	; 0x80
1000ae9a:	2280      	movs	r2, #128	; 0x80
1000ae9c:	0412      	lsls	r2, r2, #16
1000ae9e:	4692      	mov	sl, r2
1000aea0:	50e2      	str	r2, [r4, r3]
1000aea2:	2280      	movs	r2, #128	; 0x80
1000aea4:	0452      	lsls	r2, r2, #17
1000aea6:	4691      	mov	r9, r2
1000aea8:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000aeaa:	4d46      	ldr	r5, [pc, #280]	; (1000afc4 <platform_driver_init+0x15c>)
1000aeac:	4b46      	ldr	r3, [pc, #280]	; (1000afc8 <platform_driver_init+0x160>)
1000aeae:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000aeb0:	4b46      	ldr	r3, [pc, #280]	; (1000afcc <platform_driver_init+0x164>)
1000aeb2:	4a47      	ldr	r2, [pc, #284]	; (1000afd0 <platform_driver_init+0x168>)
1000aeb4:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000aeb6:	4947      	ldr	r1, [pc, #284]	; (1000afd4 <platform_driver_init+0x16c>)
1000aeb8:	4a47      	ldr	r2, [pc, #284]	; (1000afd8 <platform_driver_init+0x170>)
1000aeba:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000aebc:	4a47      	ldr	r2, [pc, #284]	; (1000afdc <platform_driver_init+0x174>)
1000aebe:	6811      	ldr	r1, [r2, #0]
1000aec0:	4a47      	ldr	r2, [pc, #284]	; (1000afe0 <platform_driver_init+0x178>)
1000aec2:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000aec4:	4a47      	ldr	r2, [pc, #284]	; (1000afe4 <platform_driver_init+0x17c>)
1000aec6:	6811      	ldr	r1, [r2, #0]
1000aec8:	4a47      	ldr	r2, [pc, #284]	; (1000afe8 <platform_driver_init+0x180>)
1000aeca:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000aecc:	4947      	ldr	r1, [pc, #284]	; (1000afec <platform_driver_init+0x184>)
1000aece:	4a48      	ldr	r2, [pc, #288]	; (1000aff0 <platform_driver_init+0x188>)
1000aed0:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000aed2:	4948      	ldr	r1, [pc, #288]	; (1000aff4 <platform_driver_init+0x18c>)
1000aed4:	4a48      	ldr	r2, [pc, #288]	; (1000aff8 <platform_driver_init+0x190>)
1000aed6:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000aed8:	4f48      	ldr	r7, [pc, #288]	; (1000affc <platform_driver_init+0x194>)
1000aeda:	4a49      	ldr	r2, [pc, #292]	; (1000b000 <platform_driver_init+0x198>)
1000aedc:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000aede:	4949      	ldr	r1, [pc, #292]	; (1000b004 <platform_driver_init+0x19c>)
1000aee0:	4a49      	ldr	r2, [pc, #292]	; (1000b008 <platform_driver_init+0x1a0>)
1000aee2:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000aee4:	4949      	ldr	r1, [pc, #292]	; (1000b00c <platform_driver_init+0x1a4>)
1000aee6:	4a4a      	ldr	r2, [pc, #296]	; (1000b010 <platform_driver_init+0x1a8>)
1000aee8:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000aeea:	4e4a      	ldr	r6, [pc, #296]	; (1000b014 <platform_driver_init+0x1ac>)
1000aeec:	4a4a      	ldr	r2, [pc, #296]	; (1000b018 <platform_driver_init+0x1b0>)
1000aeee:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000aef0:	494a      	ldr	r1, [pc, #296]	; (1000b01c <platform_driver_init+0x1b4>)
1000aef2:	4a4b      	ldr	r2, [pc, #300]	; (1000b020 <platform_driver_init+0x1b8>)
1000aef4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000aef6:	494b      	ldr	r1, [pc, #300]	; (1000b024 <platform_driver_init+0x1bc>)
1000aef8:	4a4b      	ldr	r2, [pc, #300]	; (1000b028 <platform_driver_init+0x1c0>)
1000aefa:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000aefc:	494b      	ldr	r1, [pc, #300]	; (1000b02c <platform_driver_init+0x1c4>)
1000aefe:	4a4c      	ldr	r2, [pc, #304]	; (1000b030 <platform_driver_init+0x1c8>)
1000af00:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000af02:	494c      	ldr	r1, [pc, #304]	; (1000b034 <platform_driver_init+0x1cc>)
1000af04:	4a4c      	ldr	r2, [pc, #304]	; (1000b038 <platform_driver_init+0x1d0>)
1000af06:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000af08:	494c      	ldr	r1, [pc, #304]	; (1000b03c <platform_driver_init+0x1d4>)
1000af0a:	4a4d      	ldr	r2, [pc, #308]	; (1000b040 <platform_driver_init+0x1d8>)
1000af0c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000af0e:	2028      	movs	r0, #40	; 0x28
1000af10:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000af12:	494c      	ldr	r1, [pc, #304]	; (1000b044 <platform_driver_init+0x1dc>)
1000af14:	2028      	movs	r0, #40	; 0x28
1000af16:	682b      	ldr	r3, [r5, #0]
1000af18:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000af1a:	682b      	ldr	r3, [r5, #0]
1000af1c:	494a      	ldr	r1, [pc, #296]	; (1000b048 <platform_driver_init+0x1e0>)
1000af1e:	2027      	movs	r0, #39	; 0x27
1000af20:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000af22:	4b4a      	ldr	r3, [pc, #296]	; (1000b04c <platform_driver_init+0x1e4>)
1000af24:	681a      	ldr	r2, [r3, #0]
1000af26:	4b4a      	ldr	r3, [pc, #296]	; (1000b050 <platform_driver_init+0x1e8>)
1000af28:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000af2a:	4a4a      	ldr	r2, [pc, #296]	; (1000b054 <platform_driver_init+0x1ec>)
1000af2c:	4b4a      	ldr	r3, [pc, #296]	; (1000b058 <platform_driver_init+0x1f0>)
1000af2e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000af30:	4a4a      	ldr	r2, [pc, #296]	; (1000b05c <platform_driver_init+0x1f4>)
1000af32:	4b4b      	ldr	r3, [pc, #300]	; (1000b060 <platform_driver_init+0x1f8>)
1000af34:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000af36:	4a4b      	ldr	r2, [pc, #300]	; (1000b064 <platform_driver_init+0x1fc>)
1000af38:	4b4b      	ldr	r3, [pc, #300]	; (1000b068 <platform_driver_init+0x200>)
1000af3a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000af3c:	4a4b      	ldr	r2, [pc, #300]	; (1000b06c <platform_driver_init+0x204>)
1000af3e:	4b4c      	ldr	r3, [pc, #304]	; (1000b070 <platform_driver_init+0x208>)
1000af40:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000af42:	4a4c      	ldr	r2, [pc, #304]	; (1000b074 <platform_driver_init+0x20c>)
1000af44:	4b4c      	ldr	r3, [pc, #304]	; (1000b078 <platform_driver_init+0x210>)
1000af46:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000af48:	4a4c      	ldr	r2, [pc, #304]	; (1000b07c <platform_driver_init+0x214>)
1000af4a:	4b4d      	ldr	r3, [pc, #308]	; (1000b080 <platform_driver_init+0x218>)
1000af4c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000af4e:	4a4d      	ldr	r2, [pc, #308]	; (1000b084 <platform_driver_init+0x21c>)
1000af50:	4b4d      	ldr	r3, [pc, #308]	; (1000b088 <platform_driver_init+0x220>)
1000af52:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000af54:	22a0      	movs	r2, #160	; 0xa0
1000af56:	0092      	lsls	r2, r2, #2
1000af58:	2100      	movs	r1, #0
1000af5a:	484c      	ldr	r0, [pc, #304]	; (1000b08c <platform_driver_init+0x224>)
1000af5c:	4b4c      	ldr	r3, [pc, #304]	; (1000b090 <platform_driver_init+0x228>)
1000af5e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000af60:	2280      	movs	r2, #128	; 0x80
1000af62:	0092      	lsls	r2, r2, #2
1000af64:	4b4b      	ldr	r3, [pc, #300]	; (1000b094 <platform_driver_init+0x22c>)
1000af66:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000af68:	4b4b      	ldr	r3, [pc, #300]	; (1000b098 <platform_driver_init+0x230>)
1000af6a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000af6c:	4653      	mov	r3, sl
1000af6e:	6023      	str	r3, [r4, #0]
1000af70:	464b      	mov	r3, r9
1000af72:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000af74:	4b49      	ldr	r3, [pc, #292]	; (1000b09c <platform_driver_init+0x234>)
1000af76:	4642      	mov	r2, r8
1000af78:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000af7a:	683b      	ldr	r3, [r7, #0]
1000af7c:	4a48      	ldr	r2, [pc, #288]	; (1000b0a0 <platform_driver_init+0x238>)
1000af7e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000af80:	6833      	ldr	r3, [r6, #0]
1000af82:	4a48      	ldr	r2, [pc, #288]	; (1000b0a4 <platform_driver_init+0x23c>)
1000af84:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000af86:	2000      	movs	r0, #0
1000af88:	4c47      	ldr	r4, [pc, #284]	; (1000b0a8 <platform_driver_init+0x240>)
1000af8a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000af8c:	2001      	movs	r0, #1
1000af8e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000af90:	2002      	movs	r0, #2
1000af92:	47a0      	blx	r4
		platform_initialized = 1;
1000af94:	2201      	movs	r2, #1
1000af96:	4b06      	ldr	r3, [pc, #24]	; (1000afb0 <platform_driver_init+0x148>)
1000af98:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000af9a:	2000      	movs	r0, #0
1000af9c:	e003      	b.n	1000afa6 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000af9e:	2201      	movs	r2, #1
1000afa0:	4b03      	ldr	r3, [pc, #12]	; (1000afb0 <platform_driver_init+0x148>)
1000afa2:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000afa4:	2001      	movs	r0, #1
	}
	return status;
}
1000afa6:	bc1c      	pop	{r2, r3, r4}
1000afa8:	4690      	mov	r8, r2
1000afaa:	4699      	mov	r9, r3
1000afac:	46a2      	mov	sl, r4
1000afae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afb0:	10014b50 	.word	0x10014b50
1000afb4:	1000adf5 	.word	0x1000adf5
1000afb8:	1000ae39 	.word	0x1000ae39
1000afbc:	10014b6c 	.word	0x10014b6c
1000afc0:	e000e100 	.word	0xe000e100
1000afc4:	100157cc 	.word	0x100157cc
1000afc8:	000007d7 	.word	0x000007d7
1000afcc:	000007bd 	.word	0x000007bd
1000afd0:	10015508 	.word	0x10015508
1000afd4:	0001bc51 	.word	0x0001bc51
1000afd8:	100157d0 	.word	0x100157d0
1000afdc:	100400bc 	.word	0x100400bc
1000afe0:	10014b44 	.word	0x10014b44
1000afe4:	100400b8 	.word	0x100400b8
1000afe8:	10014b40 	.word	0x10014b40
1000afec:	0001b99f 	.word	0x0001b99f
1000aff0:	10015504 	.word	0x10015504
1000aff4:	0001b9db 	.word	0x0001b9db
1000aff8:	10015510 	.word	0x10015510
1000affc:	100157e0 	.word	0x100157e0
1000b000:	1004003c 	.word	0x1004003c
1000b004:	10041fc0 	.word	0x10041fc0
1000b008:	10015514 	.word	0x10015514
1000b00c:	10041fc4 	.word	0x10041fc4
1000b010:	100157dc 	.word	0x100157dc
1000b014:	100157d4 	.word	0x100157d4
1000b018:	10041fd4 	.word	0x10041fd4
1000b01c:	10041fd8 	.word	0x10041fd8
1000b020:	1001550c 	.word	0x1001550c
1000b024:	0001cbe9 	.word	0x0001cbe9
1000b028:	10014b60 	.word	0x10014b60
1000b02c:	0001cd8f 	.word	0x0001cd8f
1000b030:	10014b54 	.word	0x10014b54
1000b034:	0001cea3 	.word	0x0001cea3
1000b038:	10014b70 	.word	0x10014b70
1000b03c:	0001cbcf 	.word	0x0001cbcf
1000b040:	10014b4c 	.word	0x10014b4c
1000b044:	1000b4dd 	.word	0x1000b4dd
1000b048:	1000b471 	.word	0x1000b471
1000b04c:	100400e4 	.word	0x100400e4
1000b050:	10014b68 	.word	0x10014b68
1000b054:	00019fe9 	.word	0x00019fe9
1000b058:	10014b78 	.word	0x10014b78
1000b05c:	0001dbdd 	.word	0x0001dbdd
1000b060:	10014b48 	.word	0x10014b48
1000b064:	0001dc5b 	.word	0x0001dc5b
1000b068:	10014b5c 	.word	0x10014b5c
1000b06c:	100405ec 	.word	0x100405ec
1000b070:	10014b58 	.word	0x10014b58
1000b074:	0001d5e3 	.word	0x0001d5e3
1000b078:	10014b64 	.word	0x10014b64
1000b07c:	10040c20 	.word	0x10040c20
1000b080:	10014b7c 	.word	0x10014b7c
1000b084:	00019f09 	.word	0x00019f09
1000b088:	10014b3c 	.word	0x10014b3c
1000b08c:	1001554c 	.word	0x1001554c
1000b090:	10011361 	.word	0x10011361
1000b094:	100157e4 	.word	0x100157e4
1000b098:	1000ad21 	.word	0x1000ad21
1000b09c:	100157d8 	.word	0x100157d8
1000b0a0:	1000adc9 	.word	0x1000adc9
1000b0a4:	1000b539 	.word	0x1000b539
1000b0a8:	1000b521 	.word	0x1000b521

1000b0ac <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0ac:	4b04      	ldr	r3, [pc, #16]	; (1000b0c0 <platform_register_ble_msg_handler+0x14>)
1000b0ae:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b0b0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b0b2:	2a01      	cmp	r2, #1
1000b0b4:	d102      	bne.n	1000b0bc <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b0b6:	4b03      	ldr	r3, [pc, #12]	; (1000b0c4 <platform_register_ble_msg_handler+0x18>)
1000b0b8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b0ba:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b0bc:	0018      	movs	r0, r3
1000b0be:	4770      	bx	lr
1000b0c0:	10014b50 	.word	0x10014b50
1000b0c4:	10014b6c 	.word	0x10014b6c

1000b0c8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b0c8:	b570      	push	{r4, r5, r6, lr}
1000b0ca:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b0cc:	4b0e      	ldr	r3, [pc, #56]	; (1000b108 <platform_interface_send+0x40>)
1000b0ce:	681b      	ldr	r3, [r3, #0]
1000b0d0:	2b00      	cmp	r3, #0
1000b0d2:	d002      	beq.n	1000b0da <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b0d4:	8840      	ldrh	r0, [r0, #2]
1000b0d6:	4798      	blx	r3
1000b0d8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b0da:	88e3      	ldrh	r3, [r4, #6]
1000b0dc:	88a2      	ldrh	r2, [r4, #4]
1000b0de:	8861      	ldrh	r1, [r4, #2]
1000b0e0:	8820      	ldrh	r0, [r4, #0]
1000b0e2:	4d0a      	ldr	r5, [pc, #40]	; (1000b10c <platform_interface_send+0x44>)
1000b0e4:	682d      	ldr	r5, [r5, #0]
1000b0e6:	47a8      	blx	r5
1000b0e8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b0ea:	88e2      	ldrh	r2, [r4, #6]
1000b0ec:	2a00      	cmp	r2, #0
1000b0ee:	d102      	bne.n	1000b0f6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b0f0:	4b07      	ldr	r3, [pc, #28]	; (1000b110 <platform_interface_send+0x48>)
1000b0f2:	4798      	blx	r3
1000b0f4:	e006      	b.n	1000b104 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b0f6:	0021      	movs	r1, r4
1000b0f8:	3108      	adds	r1, #8
1000b0fa:	4b06      	ldr	r3, [pc, #24]	; (1000b114 <platform_interface_send+0x4c>)
1000b0fc:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b0fe:	0028      	movs	r0, r5
1000b100:	4b03      	ldr	r3, [pc, #12]	; (1000b110 <platform_interface_send+0x48>)
1000b102:	4798      	blx	r3
	}
}
1000b104:	bd70      	pop	{r4, r5, r6, pc}
1000b106:	46c0      	nop			; (mov r8, r8)
1000b108:	10014b44 	.word	0x10014b44
1000b10c:	10014b78 	.word	0x10014b78
1000b110:	1000ad51 	.word	0x1000ad51
1000b114:	1001134f 	.word	0x1001134f

1000b118 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b118:	b570      	push	{r4, r5, r6, lr}
1000b11a:	0015      	movs	r5, r2
1000b11c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b11e:	020a      	lsls	r2, r1, #8
1000b120:	4302      	orrs	r2, r0
1000b122:	4b0a      	ldr	r3, [pc, #40]	; (1000b14c <send_plf_int_msg_ind+0x34>)
1000b124:	681e      	ldr	r6, [r3, #0]
1000b126:	0023      	movs	r3, r4
1000b128:	2105      	movs	r1, #5
1000b12a:	20a0      	movs	r0, #160	; 0xa0
1000b12c:	00c0      	lsls	r0, r0, #3
1000b12e:	47b0      	blx	r6
1000b130:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000b132:	d00a      	beq.n	1000b14a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b134:	2c00      	cmp	r4, #0
1000b136:	d005      	beq.n	1000b144 <send_plf_int_msg_ind+0x2c>
1000b138:	2d00      	cmp	r5, #0
1000b13a:	d003      	beq.n	1000b144 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b13c:	0022      	movs	r2, r4
1000b13e:	0029      	movs	r1, r5
1000b140:	4b03      	ldr	r3, [pc, #12]	; (1000b150 <send_plf_int_msg_ind+0x38>)
1000b142:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b144:	0030      	movs	r0, r6
1000b146:	4b03      	ldr	r3, [pc, #12]	; (1000b154 <send_plf_int_msg_ind+0x3c>)
1000b148:	4798      	blx	r3
	}
}
1000b14a:	bd70      	pop	{r4, r5, r6, pc}
1000b14c:	10014b78 	.word	0x10014b78
1000b150:	1001134f 	.word	0x1001134f
1000b154:	1000ad51 	.word	0x1000ad51

1000b158 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b158:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b15a:	465f      	mov	r7, fp
1000b15c:	4656      	mov	r6, sl
1000b15e:	464d      	mov	r5, r9
1000b160:	4644      	mov	r4, r8
1000b162:	b4f0      	push	{r4, r5, r6, r7}
1000b164:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b166:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b168:	2300      	movs	r3, #0
1000b16a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b16c:	1ce3      	adds	r3, r4, #3
1000b16e:	d81c      	bhi.n	1000b1aa <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b170:	220d      	movs	r2, #13
1000b172:	2100      	movs	r1, #0
1000b174:	a802      	add	r0, sp, #8
1000b176:	4b82      	ldr	r3, [pc, #520]	; (1000b380 <platform_event_wait+0x228>)
1000b178:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b17a:	2333      	movs	r3, #51	; 0x33
1000b17c:	aa02      	add	r2, sp, #8
1000b17e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b180:	3b30      	subs	r3, #48	; 0x30
1000b182:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b184:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b186:	3302      	adds	r3, #2
1000b188:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b18a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b18c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b18e:	0a23      	lsrs	r3, r4, #8
1000b190:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b192:	0c23      	lsrs	r3, r4, #16
1000b194:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b196:	0e24      	lsrs	r4, r4, #24
1000b198:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b19a:	2301      	movs	r3, #1
1000b19c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b19e:	210d      	movs	r1, #13
1000b1a0:	0010      	movs	r0, r2
1000b1a2:	4b78      	ldr	r3, [pc, #480]	; (1000b384 <platform_event_wait+0x22c>)
1000b1a4:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b1a6:	2301      	movs	r3, #1
1000b1a8:	4699      	mov	r9, r3
1000b1aa:	2400      	movs	r4, #0
1000b1ac:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b1ae:	4f76      	ldr	r7, [pc, #472]	; (1000b388 <platform_event_wait+0x230>)
1000b1b0:	4e76      	ldr	r6, [pc, #472]	; (1000b38c <platform_event_wait+0x234>)
1000b1b2:	4977      	ldr	r1, [pc, #476]	; (1000b390 <platform_event_wait+0x238>)
1000b1b4:	6838      	ldr	r0, [r7, #0]
1000b1b6:	6833      	ldr	r3, [r6, #0]
1000b1b8:	4798      	blx	r3
1000b1ba:	2800      	cmp	r0, #0
1000b1bc:	d000      	beq.n	1000b1c0 <platform_event_wait+0x68>
1000b1be:	e088      	b.n	1000b2d2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b1c0:	4b73      	ldr	r3, [pc, #460]	; (1000b390 <platform_event_wait+0x238>)
1000b1c2:	681c      	ldr	r4, [r3, #0]
1000b1c4:	88a3      	ldrh	r3, [r4, #4]
1000b1c6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b1c8:	23cd      	movs	r3, #205	; 0xcd
1000b1ca:	009b      	lsls	r3, r3, #2
1000b1cc:	459a      	cmp	sl, r3
1000b1ce:	d100      	bne.n	1000b1d2 <platform_event_wait+0x7a>
1000b1d0:	e0c7      	b.n	1000b362 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b1d2:	8923      	ldrh	r3, [r4, #8]
1000b1d4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b1d6:	8963      	ldrh	r3, [r4, #10]
1000b1d8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b1da:	464b      	mov	r3, r9
1000b1dc:	2b00      	cmp	r3, #0
1000b1de:	d011      	beq.n	1000b204 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b1e0:	220d      	movs	r2, #13
1000b1e2:	2100      	movs	r1, #0
1000b1e4:	a802      	add	r0, sp, #8
1000b1e6:	4b66      	ldr	r3, [pc, #408]	; (1000b380 <platform_event_wait+0x228>)
1000b1e8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b1ea:	2333      	movs	r3, #51	; 0x33
1000b1ec:	aa02      	add	r2, sp, #8
1000b1ee:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b1f0:	3b30      	subs	r3, #48	; 0x30
1000b1f2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b1f4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b1f6:	3302      	adds	r3, #2
1000b1f8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b1fa:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b1fc:	210d      	movs	r1, #13
1000b1fe:	0010      	movs	r0, r2
1000b200:	4b60      	ldr	r3, [pc, #384]	; (1000b384 <platform_event_wait+0x22c>)
1000b202:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b204:	23a0      	movs	r3, #160	; 0xa0
1000b206:	00db      	lsls	r3, r3, #3
1000b208:	459a      	cmp	sl, r3
1000b20a:	d121      	bne.n	1000b250 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b20c:	4b61      	ldr	r3, [pc, #388]	; (1000b394 <platform_event_wait+0x23c>)
1000b20e:	881b      	ldrh	r3, [r3, #0]
1000b210:	4443      	add	r3, r8
1000b212:	22a0      	movs	r2, #160	; 0xa0
1000b214:	0092      	lsls	r2, r2, #2
1000b216:	4293      	cmp	r3, r2
1000b218:	dd02      	ble.n	1000b220 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b21a:	3a80      	subs	r2, #128	; 0x80
1000b21c:	4b5d      	ldr	r3, [pc, #372]	; (1000b394 <platform_event_wait+0x23c>)
1000b21e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b220:	4b5c      	ldr	r3, [pc, #368]	; (1000b394 <platform_event_wait+0x23c>)
1000b222:	469a      	mov	sl, r3
1000b224:	881d      	ldrh	r5, [r3, #0]
1000b226:	4b5c      	ldr	r3, [pc, #368]	; (1000b398 <platform_event_wait+0x240>)
1000b228:	18ed      	adds	r5, r5, r3
1000b22a:	0021      	movs	r1, r4
1000b22c:	310c      	adds	r1, #12
1000b22e:	4642      	mov	r2, r8
1000b230:	0028      	movs	r0, r5
1000b232:	4b5a      	ldr	r3, [pc, #360]	; (1000b39c <platform_event_wait+0x244>)
1000b234:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b236:	4642      	mov	r2, r8
1000b238:	0029      	movs	r1, r5
1000b23a:	4658      	mov	r0, fp
1000b23c:	4b58      	ldr	r3, [pc, #352]	; (1000b3a0 <platform_event_wait+0x248>)
1000b23e:	4798      	blx	r3
				plf_event_buff_index += len;
1000b240:	4653      	mov	r3, sl
1000b242:	881b      	ldrh	r3, [r3, #0]
1000b244:	4443      	add	r3, r8
1000b246:	4652      	mov	r2, sl
1000b248:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b24a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b24c:	2502      	movs	r5, #2
1000b24e:	e03a      	b.n	1000b2c6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b250:	4b54      	ldr	r3, [pc, #336]	; (1000b3a4 <platform_event_wait+0x24c>)
1000b252:	681b      	ldr	r3, [r3, #0]
1000b254:	2b00      	cmp	r3, #0
1000b256:	d032      	beq.n	1000b2be <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b258:	4b4d      	ldr	r3, [pc, #308]	; (1000b390 <platform_event_wait+0x238>)
1000b25a:	681a      	ldr	r2, [r3, #0]
1000b25c:	8893      	ldrh	r3, [r2, #4]
1000b25e:	21cd      	movs	r1, #205	; 0xcd
1000b260:	0089      	lsls	r1, r1, #2
1000b262:	428b      	cmp	r3, r1
1000b264:	d104      	bne.n	1000b270 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b266:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b268:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b26a:	2b00      	cmp	r3, #0
1000b26c:	d02b      	beq.n	1000b2c6 <platform_event_wait+0x16e>
1000b26e:	e028      	b.n	1000b2c2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b270:	4c4d      	ldr	r4, [pc, #308]	; (1000b3a8 <platform_event_wait+0x250>)
1000b272:	4d49      	ldr	r5, [pc, #292]	; (1000b398 <platform_event_wait+0x240>)
1000b274:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b276:	702b      	strb	r3, [r5, #0]
1000b278:	0a1b      	lsrs	r3, r3, #8
1000b27a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b27c:	8910      	ldrh	r0, [r2, #8]
1000b27e:	4b4b      	ldr	r3, [pc, #300]	; (1000b3ac <platform_event_wait+0x254>)
1000b280:	681b      	ldr	r3, [r3, #0]
1000b282:	4798      	blx	r3
1000b284:	7128      	strb	r0, [r5, #4]
1000b286:	0a00      	lsrs	r0, r0, #8
1000b288:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b28a:	6820      	ldr	r0, [r4, #0]
1000b28c:	4b40      	ldr	r3, [pc, #256]	; (1000b390 <platform_event_wait+0x238>)
1000b28e:	681a      	ldr	r2, [r3, #0]
1000b290:	88d2      	ldrh	r2, [r2, #6]
1000b292:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b294:	681d      	ldr	r5, [r3, #0]
1000b296:	896b      	ldrh	r3, [r5, #10]
1000b298:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b29a:	3008      	adds	r0, #8
1000b29c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b29e:	896a      	ldrh	r2, [r5, #10]
1000b2a0:	2a00      	cmp	r2, #0
1000b2a2:	d003      	beq.n	1000b2ac <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b2a4:	0029      	movs	r1, r5
1000b2a6:	310c      	adds	r1, #12
1000b2a8:	4b3c      	ldr	r3, [pc, #240]	; (1000b39c <platform_event_wait+0x244>)
1000b2aa:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b2ac:	8969      	ldrh	r1, [r5, #10]
1000b2ae:	3108      	adds	r1, #8
1000b2b0:	4b3c      	ldr	r3, [pc, #240]	; (1000b3a4 <platform_event_wait+0x24c>)
1000b2b2:	681b      	ldr	r3, [r3, #0]
1000b2b4:	4838      	ldr	r0, [pc, #224]	; (1000b398 <platform_event_wait+0x240>)
1000b2b6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2b8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b2ba:	2503      	movs	r5, #3
1000b2bc:	e003      	b.n	1000b2c6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b2be:	2400      	movs	r4, #0
1000b2c0:	e001      	b.n	1000b2c6 <platform_event_wait+0x16e>
1000b2c2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b2c4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b2c6:	4b32      	ldr	r3, [pc, #200]	; (1000b390 <platform_event_wait+0x238>)
1000b2c8:	6818      	ldr	r0, [r3, #0]
1000b2ca:	4b39      	ldr	r3, [pc, #228]	; (1000b3b0 <platform_event_wait+0x258>)
1000b2cc:	681b      	ldr	r3, [r3, #0]
1000b2ce:	4798      	blx	r3
1000b2d0:	e000      	b.n	1000b2d4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b2d2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b2d4:	2c00      	cmp	r4, #0
1000b2d6:	d000      	beq.n	1000b2da <platform_event_wait+0x182>
1000b2d8:	e76b      	b.n	1000b1b2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b2da:	464b      	mov	r3, r9
1000b2dc:	2b00      	cmp	r3, #0
1000b2de:	d046      	beq.n	1000b36e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b2e0:	4b29      	ldr	r3, [pc, #164]	; (1000b388 <platform_event_wait+0x230>)
1000b2e2:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b2e4:	2e00      	cmp	r6, #0
1000b2e6:	d104      	bne.n	1000b2f2 <platform_event_wait+0x19a>
1000b2e8:	2300      	movs	r3, #0
1000b2ea:	6a1c      	ldr	r4, [r3, #32]
1000b2ec:	2c00      	cmp	r4, #0
1000b2ee:	d131      	bne.n	1000b354 <platform_event_wait+0x1fc>
1000b2f0:	e03d      	b.n	1000b36e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b2f2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b2f4:	2314      	movs	r3, #20
1000b2f6:	469c      	mov	ip, r3
1000b2f8:	44b4      	add	ip, r6
1000b2fa:	4663      	mov	r3, ip
1000b2fc:	4660      	mov	r0, ip
1000b2fe:	9300      	str	r3, [sp, #0]
1000b300:	4b2c      	ldr	r3, [pc, #176]	; (1000b3b4 <platform_event_wait+0x25c>)
1000b302:	681b      	ldr	r3, [r3, #0]
1000b304:	4798      	blx	r3
	while(NULL != current)
1000b306:	2c00      	cmp	r4, #0
1000b308:	d01f      	beq.n	1000b34a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b30a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b30c:	23cd      	movs	r3, #205	; 0xcd
1000b30e:	009b      	lsls	r3, r3, #2
1000b310:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b312:	4b27      	ldr	r3, [pc, #156]	; (1000b3b0 <platform_event_wait+0x258>)
1000b314:	469a      	mov	sl, r3
1000b316:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b318:	6803      	ldr	r3, [r0, #0]
1000b31a:	889b      	ldrh	r3, [r3, #4]
1000b31c:	4543      	cmp	r3, r8
1000b31e:	d110      	bne.n	1000b342 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b320:	2f00      	cmp	r7, #0
1000b322:	d006      	beq.n	1000b332 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b324:	6883      	ldr	r3, [r0, #8]
1000b326:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b328:	4653      	mov	r3, sl
1000b32a:	681b      	ldr	r3, [r3, #0]
1000b32c:	4798      	blx	r3
				current = prev->pstrNext;
1000b32e:	68b8      	ldr	r0, [r7, #8]
1000b330:	e009      	b.n	1000b346 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b332:	6883      	ldr	r3, [r0, #8]
1000b334:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b336:	4b1e      	ldr	r3, [pc, #120]	; (1000b3b0 <platform_event_wait+0x258>)
1000b338:	681b      	ldr	r3, [r3, #0]
1000b33a:	9301      	str	r3, [sp, #4]
1000b33c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b33e:	6a30      	ldr	r0, [r6, #32]
1000b340:	e001      	b.n	1000b346 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b342:	0007      	movs	r7, r0
1000b344:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b346:	2800      	cmp	r0, #0
1000b348:	d1e6      	bne.n	1000b318 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b34a:	4b1b      	ldr	r3, [pc, #108]	; (1000b3b8 <platform_event_wait+0x260>)
1000b34c:	681b      	ldr	r3, [r3, #0]
1000b34e:	9800      	ldr	r0, [sp, #0]
1000b350:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b352:	e00c      	b.n	1000b36e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b354:	2314      	movs	r3, #20
1000b356:	9300      	str	r3, [sp, #0]
1000b358:	4b16      	ldr	r3, [pc, #88]	; (1000b3b4 <platform_event_wait+0x25c>)
1000b35a:	681b      	ldr	r3, [r3, #0]
1000b35c:	2014      	movs	r0, #20
1000b35e:	4798      	blx	r3
1000b360:	e7d3      	b.n	1000b30a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b362:	4b10      	ldr	r3, [pc, #64]	; (1000b3a4 <platform_event_wait+0x24c>)
1000b364:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b366:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b368:	2b00      	cmp	r3, #0
1000b36a:	d0ac      	beq.n	1000b2c6 <platform_event_wait+0x16e>
1000b36c:	e77b      	b.n	1000b266 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b36e:	0028      	movs	r0, r5
1000b370:	b007      	add	sp, #28
1000b372:	bc3c      	pop	{r2, r3, r4, r5}
1000b374:	4690      	mov	r8, r2
1000b376:	4699      	mov	r9, r3
1000b378:	46a2      	mov	sl, r4
1000b37a:	46ab      	mov	fp, r5
1000b37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b37e:	46c0      	nop			; (mov r8, r8)
1000b380:	10011361 	.word	0x10011361
1000b384:	1000b0c9 	.word	0x1000b0c9
1000b388:	10014b7c 	.word	0x10014b7c
1000b38c:	10014b64 	.word	0x10014b64
1000b390:	10014b38 	.word	0x10014b38
1000b394:	100157e4 	.word	0x100157e4
1000b398:	1001554c 	.word	0x1001554c
1000b39c:	1001134f 	.word	0x1001134f
1000b3a0:	1000ace9 	.word	0x1000ace9
1000b3a4:	10014b6c 	.word	0x10014b6c
1000b3a8:	10014b74 	.word	0x10014b74
1000b3ac:	10014b40 	.word	0x10014b40
1000b3b0:	10014b3c 	.word	0x10014b3c
1000b3b4:	10014b5c 	.word	0x10014b5c
1000b3b8:	10014b48 	.word	0x10014b48

1000b3bc <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b3bc:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b3be:	4b03      	ldr	r3, [pc, #12]	; (1000b3cc <acquire_sleep_lock+0x10>)
1000b3c0:	681b      	ldr	r3, [r3, #0]
1000b3c2:	2080      	movs	r0, #128	; 0x80
1000b3c4:	0200      	lsls	r0, r0, #8
1000b3c6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b3c8:	2008      	movs	r0, #8
1000b3ca:	bd10      	pop	{r4, pc}
1000b3cc:	10015504 	.word	0x10015504

1000b3d0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b3d0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b3d2:	4b03      	ldr	r3, [pc, #12]	; (1000b3e0 <release_message_lock+0x10>)
1000b3d4:	681b      	ldr	r3, [r3, #0]
1000b3d6:	2080      	movs	r0, #128	; 0x80
1000b3d8:	01c0      	lsls	r0, r0, #7
1000b3da:	4798      	blx	r3
	return status;
}
1000b3dc:	2000      	movs	r0, #0
1000b3de:	bd10      	pop	{r4, pc}
1000b3e0:	10015510 	.word	0x10015510

1000b3e4 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000b3e4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b3e6:	4c05      	ldr	r4, [pc, #20]	; (1000b3fc <release_sleep_lock+0x18>)
1000b3e8:	2080      	movs	r0, #128	; 0x80
1000b3ea:	01c0      	lsls	r0, r0, #7
1000b3ec:	6823      	ldr	r3, [r4, #0]
1000b3ee:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000b3f0:	6823      	ldr	r3, [r4, #0]
1000b3f2:	2080      	movs	r0, #128	; 0x80
1000b3f4:	0200      	lsls	r0, r0, #8
1000b3f6:	4798      	blx	r3
	return status;
}
1000b3f8:	2000      	movs	r0, #0
1000b3fa:	bd10      	pop	{r4, pc}
1000b3fc:	10015510 	.word	0x10015510

1000b400 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b400:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b402:	4a18      	ldr	r2, [pc, #96]	; (1000b464 <gpio1_combined_isr_handler+0x64>)
1000b404:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b406:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b408:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b40a:	2180      	movs	r1, #128	; 0x80
1000b40c:	0209      	lsls	r1, r1, #8
1000b40e:	4301      	orrs	r1, r0
1000b410:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b412:	0010      	movs	r0, r2
1000b414:	4d14      	ldr	r5, [pc, #80]	; (1000b468 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b416:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b418:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b41a:	05db      	lsls	r3, r3, #23
1000b41c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b41e:	d011      	beq.n	1000b444 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b420:	b2db      	uxtb	r3, r3
1000b422:	4259      	negs	r1, r3
1000b424:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b426:	2b01      	cmp	r3, #1
1000b428:	d006      	beq.n	1000b438 <gpio1_combined_isr_handler+0x38>
1000b42a:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b42c:	085b      	lsrs	r3, r3, #1
				index++;
1000b42e:	3101      	adds	r1, #1
1000b430:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b432:	2b01      	cmp	r3, #1
1000b434:	d1fa      	bne.n	1000b42c <gpio1_combined_isr_handler+0x2c>
1000b436:	e000      	b.n	1000b43a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b438:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b43a:	0023      	movs	r3, r4
1000b43c:	408b      	lsls	r3, r1
1000b43e:	b29b      	uxth	r3, r3
1000b440:	8703      	strh	r3, [r0, #56]	; 0x38
1000b442:	e003      	b.n	1000b44c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b444:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b446:	432b      	orrs	r3, r5
1000b448:	b29b      	uxth	r3, r3
1000b44a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b44c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b44e:	05db      	lsls	r3, r3, #23
1000b450:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b452:	d1e2      	bne.n	1000b41a <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b454:	2180      	movs	r1, #128	; 0x80
1000b456:	0049      	lsls	r1, r1, #1
1000b458:	3381      	adds	r3, #129	; 0x81
1000b45a:	33ff      	adds	r3, #255	; 0xff
1000b45c:	4a03      	ldr	r2, [pc, #12]	; (1000b46c <gpio1_combined_isr_handler+0x6c>)
1000b45e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b460:	bd30      	pop	{r4, r5, pc}
1000b462:	46c0      	nop			; (mov r8, r8)
1000b464:	40011000 	.word	0x40011000
1000b468:	ffff8000 	.word	0xffff8000
1000b46c:	e000e100 	.word	0xe000e100

1000b470 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b470:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b472:	4a17      	ldr	r2, [pc, #92]	; (1000b4d0 <gpio0_combined_isr_handler+0x60>)
1000b474:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b476:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b478:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b47a:	2180      	movs	r1, #128	; 0x80
1000b47c:	0209      	lsls	r1, r1, #8
1000b47e:	4301      	orrs	r1, r0
1000b480:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b482:	0010      	movs	r0, r2
1000b484:	4d13      	ldr	r5, [pc, #76]	; (1000b4d4 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b486:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b488:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b48a:	05db      	lsls	r3, r3, #23
1000b48c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b48e:	d011      	beq.n	1000b4b4 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b490:	b2db      	uxtb	r3, r3
1000b492:	4259      	negs	r1, r3
1000b494:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b496:	2b01      	cmp	r3, #1
1000b498:	d006      	beq.n	1000b4a8 <gpio0_combined_isr_handler+0x38>
1000b49a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b49c:	085b      	lsrs	r3, r3, #1
				index++;
1000b49e:	3101      	adds	r1, #1
1000b4a0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b4a2:	2b01      	cmp	r3, #1
1000b4a4:	d1fa      	bne.n	1000b49c <gpio0_combined_isr_handler+0x2c>
1000b4a6:	e000      	b.n	1000b4aa <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b4a8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b4aa:	0023      	movs	r3, r4
1000b4ac:	408b      	lsls	r3, r1
1000b4ae:	b29b      	uxth	r3, r3
1000b4b0:	8703      	strh	r3, [r0, #56]	; 0x38
1000b4b2:	e003      	b.n	1000b4bc <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b4b4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b4b6:	432b      	orrs	r3, r5
1000b4b8:	b29b      	uxth	r3, r3
1000b4ba:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b4bc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b4be:	05db      	lsls	r3, r3, #23
1000b4c0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b4c2:	d1e2      	bne.n	1000b48a <gpio0_combined_isr_handler+0x1a>
1000b4c4:	2180      	movs	r1, #128	; 0x80
1000b4c6:	3381      	adds	r3, #129	; 0x81
1000b4c8:	33ff      	adds	r3, #255	; 0xff
1000b4ca:	4a03      	ldr	r2, [pc, #12]	; (1000b4d8 <gpio0_combined_isr_handler+0x68>)
1000b4cc:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b4ce:	bd30      	pop	{r4, r5, pc}
1000b4d0:	40010000 	.word	0x40010000
1000b4d4:	ffff8000 	.word	0xffff8000
1000b4d8:	e000e100 	.word	0xe000e100

1000b4dc <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b4dc:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b4de:	4b0c      	ldr	r3, [pc, #48]	; (1000b510 <PORT1_COMB_Handler+0x34>)
1000b4e0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b4e2:	0b5b      	lsrs	r3, r3, #13
1000b4e4:	d010      	beq.n	1000b508 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b4e6:	4b0b      	ldr	r3, [pc, #44]	; (1000b514 <PORT1_COMB_Handler+0x38>)
1000b4e8:	681b      	ldr	r3, [r3, #0]
1000b4ea:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b4ec:	4a08      	ldr	r2, [pc, #32]	; (1000b510 <PORT1_COMB_Handler+0x34>)
1000b4ee:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b4f0:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b4f2:	0b5b      	lsrs	r3, r3, #13
1000b4f4:	035b      	lsls	r3, r3, #13
1000b4f6:	430b      	orrs	r3, r1
1000b4f8:	8713      	strh	r3, [r2, #56]	; 0x38
1000b4fa:	2180      	movs	r1, #128	; 0x80
1000b4fc:	0049      	lsls	r1, r1, #1
1000b4fe:	23c0      	movs	r3, #192	; 0xc0
1000b500:	005b      	lsls	r3, r3, #1
1000b502:	4a05      	ldr	r2, [pc, #20]	; (1000b518 <PORT1_COMB_Handler+0x3c>)
1000b504:	50d1      	str	r1, [r2, r3]
1000b506:	e001      	b.n	1000b50c <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b508:	4b04      	ldr	r3, [pc, #16]	; (1000b51c <PORT1_COMB_Handler+0x40>)
1000b50a:	4798      	blx	r3
	}
}
1000b50c:	bd10      	pop	{r4, pc}
1000b50e:	46c0      	nop			; (mov r8, r8)
1000b510:	40011000 	.word	0x40011000
1000b514:	100157d0 	.word	0x100157d0
1000b518:	e000e100 	.word	0xe000e100
1000b51c:	1000b401 	.word	0x1000b401

1000b520 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b520:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b522:	2802      	cmp	r0, #2
1000b524:	d804      	bhi.n	1000b530 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b526:	0080      	lsls	r0, r0, #2
1000b528:	2200      	movs	r2, #0
1000b52a:	4b02      	ldr	r3, [pc, #8]	; (1000b534 <wakeup_int_unregister_callback+0x14>)
1000b52c:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b52e:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b530:	0018      	movs	r0, r3
1000b532:	4770      	bx	lr
1000b534:	100157e8 	.word	0x100157e8

1000b538 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b538:	b510      	push	{r4, lr}
1000b53a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b53c:	7803      	ldrb	r3, [r0, #0]
1000b53e:	2b01      	cmp	r3, #1
1000b540:	d108      	bne.n	1000b554 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b542:	4b11      	ldr	r3, [pc, #68]	; (1000b588 <wakeup_active_event_callback+0x50>)
1000b544:	681b      	ldr	r3, [r3, #0]
1000b546:	2b00      	cmp	r3, #0
1000b548:	d000      	beq.n	1000b54c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b54a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b54c:	23ff      	movs	r3, #255	; 0xff
1000b54e:	6822      	ldr	r2, [r4, #0]
1000b550:	439a      	bics	r2, r3
1000b552:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b554:	7863      	ldrb	r3, [r4, #1]
1000b556:	2b01      	cmp	r3, #1
1000b558:	d108      	bne.n	1000b56c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b55a:	4b0b      	ldr	r3, [pc, #44]	; (1000b588 <wakeup_active_event_callback+0x50>)
1000b55c:	685b      	ldr	r3, [r3, #4]
1000b55e:	2b00      	cmp	r3, #0
1000b560:	d000      	beq.n	1000b564 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b562:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b564:	4b09      	ldr	r3, [pc, #36]	; (1000b58c <wakeup_active_event_callback+0x54>)
1000b566:	6822      	ldr	r2, [r4, #0]
1000b568:	4013      	ands	r3, r2
1000b56a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b56c:	78a3      	ldrb	r3, [r4, #2]
1000b56e:	2b01      	cmp	r3, #1
1000b570:	d108      	bne.n	1000b584 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b572:	4b05      	ldr	r3, [pc, #20]	; (1000b588 <wakeup_active_event_callback+0x50>)
1000b574:	689b      	ldr	r3, [r3, #8]
1000b576:	2b00      	cmp	r3, #0
1000b578:	d000      	beq.n	1000b57c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b57a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b57c:	4b04      	ldr	r3, [pc, #16]	; (1000b590 <wakeup_active_event_callback+0x58>)
1000b57e:	6822      	ldr	r2, [r4, #0]
1000b580:	4013      	ands	r3, r2
1000b582:	6023      	str	r3, [r4, #0]
	}
}
1000b584:	bd10      	pop	{r4, pc}
1000b586:	46c0      	nop			; (mov r8, r8)
1000b588:	100157e8 	.word	0x100157e8
1000b58c:	ffff00ff 	.word	0xffff00ff
1000b590:	ff00ffff 	.word	0xff00ffff

1000b594 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b594:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b596:	4647      	mov	r7, r8
1000b598:	b480      	push	{r7}
1000b59a:	000c      	movs	r4, r1
1000b59c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b59e:	2800      	cmp	r0, #0
1000b5a0:	d10d      	bne.n	1000b5be <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b5a2:	2a00      	cmp	r2, #0
1000b5a4:	dd0e      	ble.n	1000b5c4 <_read+0x30>
1000b5a6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b5a8:	4e08      	ldr	r6, [pc, #32]	; (1000b5cc <_read+0x38>)
1000b5aa:	4d09      	ldr	r5, [pc, #36]	; (1000b5d0 <_read+0x3c>)
1000b5ac:	6830      	ldr	r0, [r6, #0]
1000b5ae:	0021      	movs	r1, r4
1000b5b0:	682b      	ldr	r3, [r5, #0]
1000b5b2:	4798      	blx	r3
		ptr++;
1000b5b4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b5b6:	42a7      	cmp	r7, r4
1000b5b8:	d1f8      	bne.n	1000b5ac <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b5ba:	4640      	mov	r0, r8
1000b5bc:	e003      	b.n	1000b5c6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b5be:	2001      	movs	r0, #1
1000b5c0:	4240      	negs	r0, r0
1000b5c2:	e000      	b.n	1000b5c6 <_read+0x32>
	}

	for (; len > 0; --len) {
1000b5c4:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b5c6:	bc04      	pop	{r2}
1000b5c8:	4690      	mov	r8, r2
1000b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b5cc:	100157fc 	.word	0x100157fc
1000b5d0:	100157f4 	.word	0x100157f4

1000b5d4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b5d6:	4647      	mov	r7, r8
1000b5d8:	b480      	push	{r7}
1000b5da:	000e      	movs	r6, r1
1000b5dc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b5de:	3801      	subs	r0, #1
1000b5e0:	2802      	cmp	r0, #2
1000b5e2:	d811      	bhi.n	1000b608 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b5e4:	2a00      	cmp	r2, #0
1000b5e6:	d012      	beq.n	1000b60e <_write+0x3a>
1000b5e8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b5ea:	4b0c      	ldr	r3, [pc, #48]	; (1000b61c <_write+0x48>)
1000b5ec:	4698      	mov	r8, r3
1000b5ee:	4f0c      	ldr	r7, [pc, #48]	; (1000b620 <_write+0x4c>)
1000b5f0:	4643      	mov	r3, r8
1000b5f2:	6818      	ldr	r0, [r3, #0]
1000b5f4:	5d31      	ldrb	r1, [r6, r4]
1000b5f6:	683b      	ldr	r3, [r7, #0]
1000b5f8:	4798      	blx	r3
1000b5fa:	2800      	cmp	r0, #0
1000b5fc:	db09      	blt.n	1000b612 <_write+0x3e>
			return -1;
		}
		++nChars;
1000b5fe:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b600:	42a5      	cmp	r5, r4
1000b602:	d1f5      	bne.n	1000b5f0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b604:	0020      	movs	r0, r4
1000b606:	e006      	b.n	1000b616 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b608:	2001      	movs	r0, #1
1000b60a:	4240      	negs	r0, r0
1000b60c:	e003      	b.n	1000b616 <_write+0x42>
	}

	for (; len != 0; --len) {
1000b60e:	2000      	movs	r0, #0
1000b610:	e001      	b.n	1000b616 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000b612:	2001      	movs	r0, #1
1000b614:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000b616:	bc04      	pop	{r2}
1000b618:	4690      	mov	r8, r2
1000b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b61c:	100157fc 	.word	0x100157fc
1000b620:	100157f8 	.word	0x100157f8

1000b624 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b624:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b626:	4b20      	ldr	r3, [pc, #128]	; (1000b6a8 <uart_rx0_isr_handler+0x84>)
1000b628:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b62a:	6823      	ldr	r3, [r4, #0]
1000b62c:	7d1d      	ldrb	r5, [r3, #20]
1000b62e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b630:	066a      	lsls	r2, r5, #25
1000b632:	d513      	bpl.n	1000b65c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b634:	211e      	movs	r1, #30
1000b636:	2222      	movs	r2, #34	; 0x22
1000b638:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b63a:	7e1a      	ldrb	r2, [r3, #24]
1000b63c:	3123      	adds	r1, #35	; 0x23
1000b63e:	438a      	bics	r2, r1
1000b640:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b642:	2321      	movs	r3, #33	; 0x21
1000b644:	5ce3      	ldrb	r3, [r4, r3]
1000b646:	071b      	lsls	r3, r3, #28
1000b648:	d506      	bpl.n	1000b658 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b64a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b64c:	5ce3      	ldrb	r3, [r4, r3]
1000b64e:	071b      	lsls	r3, r3, #28
1000b650:	d502      	bpl.n	1000b658 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b652:	0020      	movs	r0, r4
1000b654:	6923      	ldr	r3, [r4, #16]
1000b656:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b658:	6823      	ldr	r3, [r4, #0]
1000b65a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b65c:	07eb      	lsls	r3, r5, #31
1000b65e:	d522      	bpl.n	1000b6a6 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b660:	6823      	ldr	r3, [r4, #0]
1000b662:	7c1b      	ldrb	r3, [r3, #16]
1000b664:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b666:	6962      	ldr	r2, [r4, #20]
1000b668:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b66a:	6963      	ldr	r3, [r4, #20]
1000b66c:	3301      	adds	r3, #1
1000b66e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b670:	8ba3      	ldrh	r3, [r4, #28]
1000b672:	3b01      	subs	r3, #1
1000b674:	b29b      	uxth	r3, r3
1000b676:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b678:	8ba3      	ldrh	r3, [r4, #28]
1000b67a:	b29b      	uxth	r3, r3
1000b67c:	2b00      	cmp	r3, #0
1000b67e:	d112      	bne.n	1000b6a6 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b680:	3321      	adds	r3, #33	; 0x21
1000b682:	5ce3      	ldrb	r3, [r4, r3]
1000b684:	075b      	lsls	r3, r3, #29
1000b686:	d50e      	bpl.n	1000b6a6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b688:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b68a:	5ce3      	ldrb	r3, [r4, r3]
1000b68c:	075b      	lsls	r3, r3, #29
1000b68e:	d50a      	bpl.n	1000b6a6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b690:	2200      	movs	r2, #0
1000b692:	2322      	movs	r3, #34	; 0x22
1000b694:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b696:	6822      	ldr	r2, [r4, #0]
1000b698:	7e13      	ldrb	r3, [r2, #24]
1000b69a:	2101      	movs	r1, #1
1000b69c:	438b      	bics	r3, r1
1000b69e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b6a0:	68e3      	ldr	r3, [r4, #12]
1000b6a2:	0020      	movs	r0, r4
1000b6a4:	4798      	blx	r3
			}
		}
	}
}
1000b6a6:	bd70      	pop	{r4, r5, r6, pc}
1000b6a8:	10015800 	.word	0x10015800

1000b6ac <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b6ac:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b6ae:	4b21      	ldr	r3, [pc, #132]	; (1000b734 <uart_tx0_isr_handler+0x88>)
1000b6b0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b6b2:	6823      	ldr	r3, [r4, #0]
1000b6b4:	791d      	ldrb	r5, [r3, #4]
1000b6b6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b6b8:	07ea      	lsls	r2, r5, #31
1000b6ba:	d517      	bpl.n	1000b6ec <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b6bc:	69a2      	ldr	r2, [r4, #24]
1000b6be:	7811      	ldrb	r1, [r2, #0]
1000b6c0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b6c2:	3201      	adds	r2, #1
1000b6c4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b6c6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b6c8:	8be3      	ldrh	r3, [r4, #30]
1000b6ca:	3b01      	subs	r3, #1
1000b6cc:	b29b      	uxth	r3, r3
1000b6ce:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b6d0:	8be3      	ldrh	r3, [r4, #30]
1000b6d2:	b29b      	uxth	r3, r3
1000b6d4:	2b00      	cmp	r3, #0
1000b6d6:	d109      	bne.n	1000b6ec <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b6d8:	6822      	ldr	r2, [r4, #0]
1000b6da:	7a13      	ldrb	r3, [r2, #8]
1000b6dc:	2101      	movs	r1, #1
1000b6de:	438b      	bics	r3, r1
1000b6e0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b6e2:	6822      	ldr	r2, [r4, #0]
1000b6e4:	7a11      	ldrb	r1, [r2, #8]
1000b6e6:	2310      	movs	r3, #16
1000b6e8:	430b      	orrs	r3, r1
1000b6ea:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b6ec:	06eb      	lsls	r3, r5, #27
1000b6ee:	d512      	bpl.n	1000b716 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b6f0:	2321      	movs	r3, #33	; 0x21
1000b6f2:	5ce3      	ldrb	r3, [r4, r3]
1000b6f4:	07db      	lsls	r3, r3, #31
1000b6f6:	d50e      	bpl.n	1000b716 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b6f8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b6fa:	5ce3      	ldrb	r3, [r4, r3]
1000b6fc:	07db      	lsls	r3, r3, #31
1000b6fe:	d50a      	bpl.n	1000b716 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b700:	2200      	movs	r2, #0
1000b702:	2322      	movs	r3, #34	; 0x22
1000b704:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b706:	6822      	ldr	r2, [r4, #0]
1000b708:	7a13      	ldrb	r3, [r2, #8]
1000b70a:	2110      	movs	r1, #16
1000b70c:	438b      	bics	r3, r1
1000b70e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b710:	0020      	movs	r0, r4
1000b712:	6863      	ldr	r3, [r4, #4]
1000b714:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b716:	06ab      	lsls	r3, r5, #26
1000b718:	d50a      	bpl.n	1000b730 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b71a:	2321      	movs	r3, #33	; 0x21
1000b71c:	5ce3      	ldrb	r3, [r4, r3]
1000b71e:	079b      	lsls	r3, r3, #30
1000b720:	d506      	bpl.n	1000b730 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b722:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b724:	5ce3      	ldrb	r3, [r4, r3]
1000b726:	079b      	lsls	r3, r3, #30
1000b728:	d502      	bpl.n	1000b730 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b72a:	68a3      	ldr	r3, [r4, #8]
1000b72c:	0020      	movs	r0, r4
1000b72e:	4798      	blx	r3
		}

	}
}
1000b730:	bd70      	pop	{r4, r5, r6, pc}
1000b732:	46c0      	nop			; (mov r8, r8)
1000b734:	10015800 	.word	0x10015800

1000b738 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b738:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b73a:	4b20      	ldr	r3, [pc, #128]	; (1000b7bc <uart_rx1_isr_handler+0x84>)
1000b73c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b73e:	6823      	ldr	r3, [r4, #0]
1000b740:	7d1d      	ldrb	r5, [r3, #20]
1000b742:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b744:	066a      	lsls	r2, r5, #25
1000b746:	d513      	bpl.n	1000b770 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b748:	211e      	movs	r1, #30
1000b74a:	2222      	movs	r2, #34	; 0x22
1000b74c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b74e:	7e1a      	ldrb	r2, [r3, #24]
1000b750:	3123      	adds	r1, #35	; 0x23
1000b752:	438a      	bics	r2, r1
1000b754:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b756:	2321      	movs	r3, #33	; 0x21
1000b758:	5ce3      	ldrb	r3, [r4, r3]
1000b75a:	071b      	lsls	r3, r3, #28
1000b75c:	d506      	bpl.n	1000b76c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b75e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b760:	5ce3      	ldrb	r3, [r4, r3]
1000b762:	071b      	lsls	r3, r3, #28
1000b764:	d502      	bpl.n	1000b76c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b766:	0020      	movs	r0, r4
1000b768:	6923      	ldr	r3, [r4, #16]
1000b76a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b76c:	6823      	ldr	r3, [r4, #0]
1000b76e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b770:	07eb      	lsls	r3, r5, #31
1000b772:	d522      	bpl.n	1000b7ba <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b774:	6823      	ldr	r3, [r4, #0]
1000b776:	7c1b      	ldrb	r3, [r3, #16]
1000b778:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b77a:	6962      	ldr	r2, [r4, #20]
1000b77c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b77e:	6963      	ldr	r3, [r4, #20]
1000b780:	3301      	adds	r3, #1
1000b782:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b784:	8ba3      	ldrh	r3, [r4, #28]
1000b786:	3b01      	subs	r3, #1
1000b788:	b29b      	uxth	r3, r3
1000b78a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b78c:	8ba3      	ldrh	r3, [r4, #28]
1000b78e:	b29b      	uxth	r3, r3
1000b790:	2b00      	cmp	r3, #0
1000b792:	d112      	bne.n	1000b7ba <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b794:	3321      	adds	r3, #33	; 0x21
1000b796:	5ce3      	ldrb	r3, [r4, r3]
1000b798:	075b      	lsls	r3, r3, #29
1000b79a:	d50e      	bpl.n	1000b7ba <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b79c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b79e:	5ce3      	ldrb	r3, [r4, r3]
1000b7a0:	075b      	lsls	r3, r3, #29
1000b7a2:	d50a      	bpl.n	1000b7ba <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b7a4:	2200      	movs	r2, #0
1000b7a6:	2322      	movs	r3, #34	; 0x22
1000b7a8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b7aa:	6822      	ldr	r2, [r4, #0]
1000b7ac:	7e13      	ldrb	r3, [r2, #24]
1000b7ae:	2101      	movs	r1, #1
1000b7b0:	438b      	bics	r3, r1
1000b7b2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b7b4:	68e3      	ldr	r3, [r4, #12]
1000b7b6:	0020      	movs	r0, r4
1000b7b8:	4798      	blx	r3
			}
		}
	}
}
1000b7ba:	bd70      	pop	{r4, r5, r6, pc}
1000b7bc:	10015800 	.word	0x10015800

1000b7c0 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b7c0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b7c2:	4b21      	ldr	r3, [pc, #132]	; (1000b848 <uart_tx1_isr_handler+0x88>)
1000b7c4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b7c6:	6823      	ldr	r3, [r4, #0]
1000b7c8:	791d      	ldrb	r5, [r3, #4]
1000b7ca:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b7cc:	07ea      	lsls	r2, r5, #31
1000b7ce:	d517      	bpl.n	1000b800 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b7d0:	69a2      	ldr	r2, [r4, #24]
1000b7d2:	7811      	ldrb	r1, [r2, #0]
1000b7d4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b7d6:	3201      	adds	r2, #1
1000b7d8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b7da:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b7dc:	8be3      	ldrh	r3, [r4, #30]
1000b7de:	3b01      	subs	r3, #1
1000b7e0:	b29b      	uxth	r3, r3
1000b7e2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b7e4:	8be3      	ldrh	r3, [r4, #30]
1000b7e6:	b29b      	uxth	r3, r3
1000b7e8:	2b00      	cmp	r3, #0
1000b7ea:	d109      	bne.n	1000b800 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b7ec:	6822      	ldr	r2, [r4, #0]
1000b7ee:	7a13      	ldrb	r3, [r2, #8]
1000b7f0:	2101      	movs	r1, #1
1000b7f2:	438b      	bics	r3, r1
1000b7f4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b7f6:	6822      	ldr	r2, [r4, #0]
1000b7f8:	7a11      	ldrb	r1, [r2, #8]
1000b7fa:	2310      	movs	r3, #16
1000b7fc:	430b      	orrs	r3, r1
1000b7fe:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b800:	06eb      	lsls	r3, r5, #27
1000b802:	d512      	bpl.n	1000b82a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b804:	2321      	movs	r3, #33	; 0x21
1000b806:	5ce3      	ldrb	r3, [r4, r3]
1000b808:	07db      	lsls	r3, r3, #31
1000b80a:	d50e      	bpl.n	1000b82a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b80c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b80e:	5ce3      	ldrb	r3, [r4, r3]
1000b810:	07db      	lsls	r3, r3, #31
1000b812:	d50a      	bpl.n	1000b82a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b814:	2200      	movs	r2, #0
1000b816:	2322      	movs	r3, #34	; 0x22
1000b818:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b81a:	6822      	ldr	r2, [r4, #0]
1000b81c:	7a13      	ldrb	r3, [r2, #8]
1000b81e:	2110      	movs	r1, #16
1000b820:	438b      	bics	r3, r1
1000b822:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b824:	0020      	movs	r0, r4
1000b826:	6863      	ldr	r3, [r4, #4]
1000b828:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b82a:	06ab      	lsls	r3, r5, #26
1000b82c:	d50a      	bpl.n	1000b844 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b82e:	2321      	movs	r3, #33	; 0x21
1000b830:	5ce3      	ldrb	r3, [r4, r3]
1000b832:	079b      	lsls	r3, r3, #30
1000b834:	d506      	bpl.n	1000b844 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b836:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b838:	5ce3      	ldrb	r3, [r4, r3]
1000b83a:	079b      	lsls	r3, r3, #30
1000b83c:	d502      	bpl.n	1000b844 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b83e:	68a3      	ldr	r3, [r4, #8]
1000b840:	0020      	movs	r0, r4
1000b842:	4798      	blx	r3
		}

	}
}
1000b844:	bd70      	pop	{r4, r5, r6, pc}
1000b846:	46c0      	nop			; (mov r8, r8)
1000b848:	10015800 	.word	0x10015800

1000b84c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b84c:	23e1      	movs	r3, #225	; 0xe1
1000b84e:	025b      	lsls	r3, r3, #9
1000b850:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b852:	2300      	movs	r3, #0
1000b854:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b856:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b858:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b85a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b85c:	3302      	adds	r3, #2
1000b85e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b860:	2203      	movs	r2, #3
1000b862:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b864:	3201      	adds	r2, #1
1000b866:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b868:	3201      	adds	r2, #1
1000b86a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b86c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b86e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b870:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b872:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b874:	4770      	bx	lr
1000b876:	46c0      	nop			; (mov r8, r8)

1000b878 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b87a:	464f      	mov	r7, r9
1000b87c:	4646      	mov	r6, r8
1000b87e:	b4c0      	push	{r6, r7}
1000b880:	0005      	movs	r5, r0
1000b882:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b884:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b886:	2300      	movs	r3, #0
1000b888:	6043      	str	r3, [r0, #4]
1000b88a:	6083      	str	r3, [r0, #8]
1000b88c:	60c3      	str	r3, [r0, #12]
1000b88e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b890:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b892:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b894:	2200      	movs	r2, #0
1000b896:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b898:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b89a:	3320      	adds	r3, #32
1000b89c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b89e:	3301      	adds	r3, #1
1000b8a0:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b8a2:	3301      	adds	r3, #1
1000b8a4:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b8a6:	4b55      	ldr	r3, [pc, #340]	; (1000b9fc <uart_init+0x184>)
1000b8a8:	4299      	cmp	r1, r3
1000b8aa:	d118      	bne.n	1000b8de <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b8ac:	2009      	movs	r0, #9
1000b8ae:	4c54      	ldr	r4, [pc, #336]	; (1000ba00 <uart_init+0x188>)
1000b8b0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b8b2:	200a      	movs	r0, #10
1000b8b4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b8b6:	2009      	movs	r0, #9
1000b8b8:	4c52      	ldr	r4, [pc, #328]	; (1000ba04 <uart_init+0x18c>)
1000b8ba:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b8bc:	200a      	movs	r0, #10
1000b8be:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b8c0:	4b51      	ldr	r3, [pc, #324]	; (1000ba08 <uart_init+0x190>)
1000b8c2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b8c4:	4951      	ldr	r1, [pc, #324]	; (1000ba0c <uart_init+0x194>)
1000b8c6:	2010      	movs	r0, #16
1000b8c8:	4c51      	ldr	r4, [pc, #324]	; (1000ba10 <uart_init+0x198>)
1000b8ca:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b8cc:	4951      	ldr	r1, [pc, #324]	; (1000ba14 <uart_init+0x19c>)
1000b8ce:	2011      	movs	r0, #17
1000b8d0:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b8d2:	4b51      	ldr	r3, [pc, #324]	; (1000ba18 <uart_init+0x1a0>)
1000b8d4:	2201      	movs	r2, #1
1000b8d6:	601a      	str	r2, [r3, #0]
1000b8d8:	3201      	adds	r2, #1
1000b8da:	601a      	str	r2, [r3, #0]
1000b8dc:	e01a      	b.n	1000b914 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b8de:	4b4f      	ldr	r3, [pc, #316]	; (1000ba1c <uart_init+0x1a4>)
1000b8e0:	4299      	cmp	r1, r3
1000b8e2:	d117      	bne.n	1000b914 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b8e4:	200b      	movs	r0, #11
1000b8e6:	4c46      	ldr	r4, [pc, #280]	; (1000ba00 <uart_init+0x188>)
1000b8e8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b8ea:	200c      	movs	r0, #12
1000b8ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b8ee:	200b      	movs	r0, #11
1000b8f0:	4c44      	ldr	r4, [pc, #272]	; (1000ba04 <uart_init+0x18c>)
1000b8f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b8f4:	200c      	movs	r0, #12
1000b8f6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b8f8:	4b43      	ldr	r3, [pc, #268]	; (1000ba08 <uart_init+0x190>)
1000b8fa:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b8fc:	4948      	ldr	r1, [pc, #288]	; (1000ba20 <uart_init+0x1a8>)
1000b8fe:	2012      	movs	r0, #18
1000b900:	4c43      	ldr	r4, [pc, #268]	; (1000ba10 <uart_init+0x198>)
1000b902:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b904:	4947      	ldr	r1, [pc, #284]	; (1000ba24 <uart_init+0x1ac>)
1000b906:	2013      	movs	r0, #19
1000b908:	47a0      	blx	r4
1000b90a:	4b43      	ldr	r3, [pc, #268]	; (1000ba18 <uart_init+0x1a0>)
1000b90c:	2204      	movs	r2, #4
1000b90e:	601a      	str	r2, [r3, #0]
1000b910:	3204      	adds	r2, #4
1000b912:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b914:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b916:	2204      	movs	r2, #4
1000b918:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b91a:	2b00      	cmp	r3, #0
1000b91c:	d152      	bne.n	1000b9c4 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b91e:	3302      	adds	r3, #2
1000b920:	4698      	mov	r8, r3
1000b922:	e04f      	b.n	1000b9c4 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b924:	8a31      	ldrh	r1, [r6, #16]
1000b926:	ce01      	ldmia	r6!, {r0}
1000b928:	b2c0      	uxtb	r0, r0
1000b92a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b92c:	3401      	adds	r4, #1
1000b92e:	b2e4      	uxtb	r4, r4
1000b930:	4544      	cmp	r4, r8
1000b932:	d3f7      	bcc.n	1000b924 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b934:	682b      	ldr	r3, [r5, #0]
1000b936:	7d1a      	ldrb	r2, [r3, #20]
1000b938:	07d2      	lsls	r2, r2, #31
1000b93a:	d504      	bpl.n	1000b946 <uart_init+0xce>
1000b93c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b93e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b940:	7d1a      	ldrb	r2, [r3, #20]
1000b942:	420a      	tst	r2, r1
1000b944:	d1fb      	bne.n	1000b93e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b946:	2100      	movs	r1, #0
1000b948:	2220      	movs	r2, #32
1000b94a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b94c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b94e:	1e59      	subs	r1, r3, #1
1000b950:	418b      	sbcs	r3, r1
1000b952:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b954:	793b      	ldrb	r3, [r7, #4]
1000b956:	797a      	ldrb	r2, [r7, #5]
1000b958:	4313      	orrs	r3, r2
1000b95a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b95c:	79ba      	ldrb	r2, [r7, #6]
1000b95e:	2a02      	cmp	r2, #2
1000b960:	d00d      	beq.n	1000b97e <uart_init+0x106>
1000b962:	b2d1      	uxtb	r1, r2
1000b964:	2902      	cmp	r1, #2
1000b966:	d802      	bhi.n	1000b96e <uart_init+0xf6>
1000b968:	2a01      	cmp	r2, #1
1000b96a:	d005      	beq.n	1000b978 <uart_init+0x100>
1000b96c:	e00f      	b.n	1000b98e <uart_init+0x116>
1000b96e:	2a03      	cmp	r2, #3
1000b970:	d008      	beq.n	1000b984 <uart_init+0x10c>
1000b972:	2a04      	cmp	r2, #4
1000b974:	d009      	beq.n	1000b98a <uart_init+0x112>
1000b976:	e00a      	b.n	1000b98e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b978:	2202      	movs	r2, #2
1000b97a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b97c:	e007      	b.n	1000b98e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b97e:	2206      	movs	r2, #6
1000b980:	4313      	orrs	r3, r2
			break;
1000b982:	e004      	b.n	1000b98e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b984:	220a      	movs	r2, #10
1000b986:	4313      	orrs	r3, r2
			break;
1000b988:	e001      	b.n	1000b98e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b98a:	220e      	movs	r2, #14
1000b98c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b98e:	2220      	movs	r2, #32
1000b990:	6829      	ldr	r1, [r5, #0]
1000b992:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b994:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b996:	4b24      	ldr	r3, [pc, #144]	; (1000ba28 <uart_init+0x1b0>)
1000b998:	4798      	blx	r3
1000b99a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b99c:	0031      	movs	r1, r6
1000b99e:	4b23      	ldr	r3, [pc, #140]	; (1000ba2c <uart_init+0x1b4>)
1000b9a0:	4798      	blx	r3
1000b9a2:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b9a4:	0400      	lsls	r0, r0, #16
1000b9a6:	0c00      	lsrs	r0, r0, #16
1000b9a8:	4370      	muls	r0, r6
1000b9aa:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b9ac:	0931      	lsrs	r1, r6, #4
1000b9ae:	4288      	cmp	r0, r1
1000b9b0:	d906      	bls.n	1000b9c0 <uart_init+0x148>
1000b9b2:	2300      	movs	r3, #0
		i++;
1000b9b4:	3301      	adds	r3, #1
1000b9b6:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b9b8:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b9ba:	4288      	cmp	r0, r1
1000b9bc:	d8fa      	bhi.n	1000b9b4 <uart_init+0x13c>
1000b9be:	e007      	b.n	1000b9d0 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b9c0:	2300      	movs	r3, #0
1000b9c2:	e005      	b.n	1000b9d0 <uart_init+0x158>
1000b9c4:	003e      	movs	r6, r7
1000b9c6:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b9c8:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b9ca:	4b19      	ldr	r3, [pc, #100]	; (1000ba30 <uart_init+0x1b8>)
1000b9cc:	4699      	mov	r9, r3
1000b9ce:	e7a9      	b.n	1000b924 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b9d0:	2100      	movs	r1, #0
1000b9d2:	2028      	movs	r0, #40	; 0x28
1000b9d4:	682c      	ldr	r4, [r5, #0]
1000b9d6:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b9d8:	3301      	adds	r3, #1
1000b9da:	071b      	lsls	r3, r3, #28
1000b9dc:	0f5b      	lsrs	r3, r3, #29
1000b9de:	00d2      	lsls	r2, r2, #3
1000b9e0:	4313      	orrs	r3, r2
1000b9e2:	b29b      	uxth	r3, r3
1000b9e4:	682a      	ldr	r2, [r5, #0]
1000b9e6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b9e8:	682b      	ldr	r3, [r5, #0]
1000b9ea:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b9ec:	682b      	ldr	r3, [r5, #0]
1000b9ee:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b9f0:	2000      	movs	r0, #0
1000b9f2:	bc0c      	pop	{r2, r3}
1000b9f4:	4690      	mov	r8, r2
1000b9f6:	4699      	mov	r9, r3
1000b9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b9fa:	46c0      	nop			; (mov r8, r8)
1000b9fc:	40004000 	.word	0x40004000
1000ba00:	1000c6a1 	.word	0x1000c6a1
1000ba04:	1000c345 	.word	0x1000c345
1000ba08:	10015800 	.word	0x10015800
1000ba0c:	1000b625 	.word	0x1000b625
1000ba10:	1000cb09 	.word	0x1000cb09
1000ba14:	1000b6ad 	.word	0x1000b6ad
1000ba18:	e000e100 	.word	0xe000e100
1000ba1c:	40005000 	.word	0x40005000
1000ba20:	1000b739 	.word	0x1000b739
1000ba24:	1000b7c1 	.word	0x1000b7c1
1000ba28:	1000c339 	.word	0x1000c339
1000ba2c:	1000f5d9 	.word	0x1000f5d9
1000ba30:	1000bded 	.word	0x1000bded

1000ba34 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ba34:	6802      	ldr	r2, [r0, #0]
1000ba36:	2001      	movs	r0, #1
1000ba38:	7913      	ldrb	r3, [r2, #4]
1000ba3a:	4203      	tst	r3, r0
1000ba3c:	d0fc      	beq.n	1000ba38 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000ba3e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000ba40:	2000      	movs	r0, #0
1000ba42:	4770      	bx	lr

1000ba44 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000ba44:	6802      	ldr	r2, [r0, #0]
1000ba46:	2001      	movs	r0, #1
1000ba48:	7d13      	ldrb	r3, [r2, #20]
1000ba4a:	4203      	tst	r3, r0
1000ba4c:	d0fc      	beq.n	1000ba48 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ba4e:	7c13      	ldrb	r3, [r2, #16]
1000ba50:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000ba52:	2000      	movs	r0, #0
1000ba54:	4770      	bx	lr
1000ba56:	46c0      	nop			; (mov r8, r8)

1000ba58 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ba58:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ba5a:	2a00      	cmp	r2, #0
1000ba5c:	d00d      	beq.n	1000ba7a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000ba5e:	330b      	adds	r3, #11
1000ba60:	5cc3      	ldrb	r3, [r0, r3]
1000ba62:	b2db      	uxtb	r3, r3
1000ba64:	2b05      	cmp	r3, #5
1000ba66:	d008      	beq.n	1000ba7a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000ba68:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000ba6a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000ba6c:	2205      	movs	r2, #5
1000ba6e:	2322      	movs	r3, #34	; 0x22
1000ba70:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000ba72:	6803      	ldr	r3, [r0, #0]
1000ba74:	3a04      	subs	r2, #4
1000ba76:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000ba78:	2300      	movs	r3, #0
}
1000ba7a:	0018      	movs	r0, r3
1000ba7c:	4770      	bx	lr
1000ba7e:	46c0      	nop			; (mov r8, r8)

1000ba80 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ba80:	0093      	lsls	r3, r2, #2
1000ba82:	18c3      	adds	r3, r0, r3
1000ba84:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000ba86:	2120      	movs	r1, #32
1000ba88:	2301      	movs	r3, #1
1000ba8a:	4093      	lsls	r3, r2
1000ba8c:	5c42      	ldrb	r2, [r0, r1]
1000ba8e:	4313      	orrs	r3, r2
1000ba90:	5443      	strb	r3, [r0, r1]
}
1000ba92:	4770      	bx	lr

1000ba94 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ba94:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000ba96:	2221      	movs	r2, #33	; 0x21
1000ba98:	2301      	movs	r3, #1
1000ba9a:	408b      	lsls	r3, r1
1000ba9c:	5c84      	ldrb	r4, [r0, r2]
1000ba9e:	4323      	orrs	r3, r4
1000baa0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000baa2:	2901      	cmp	r1, #1
1000baa4:	d104      	bne.n	1000bab0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000baa6:	6802      	ldr	r2, [r0, #0]
1000baa8:	7a11      	ldrb	r1, [r2, #8]
1000baaa:	2320      	movs	r3, #32
1000baac:	430b      	orrs	r3, r1
1000baae:	7213      	strb	r3, [r2, #8]
	}
}
1000bab0:	bd10      	pop	{r4, pc}
1000bab2:	46c0      	nop			; (mov r8, r8)

1000bab4 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bab4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bab6:	2201      	movs	r2, #1
1000bab8:	408a      	lsls	r2, r1
1000baba:	2421      	movs	r4, #33	; 0x21
1000babc:	5d03      	ldrb	r3, [r0, r4]
1000babe:	4393      	bics	r3, r2
1000bac0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000bac2:	2901      	cmp	r1, #1
1000bac4:	d104      	bne.n	1000bad0 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bac6:	6802      	ldr	r2, [r0, #0]
1000bac8:	7a13      	ldrb	r3, [r2, #8]
1000baca:	311f      	adds	r1, #31
1000bacc:	438b      	bics	r3, r1
1000bace:	7213      	strb	r3, [r2, #8]
	}

}
1000bad0:	bd10      	pop	{r4, pc}
1000bad2:	46c0      	nop			; (mov r8, r8)

1000bad4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bad4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bad6:	4b16      	ldr	r3, [pc, #88]	; (1000bb30 <gpio_port0_isr_handler+0x5c>)
1000bad8:	681d      	ldr	r5, [r3, #0]
1000bada:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000badc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bade:	07cb      	lsls	r3, r1, #31
1000bae0:	d407      	bmi.n	1000baf2 <gpio_port0_isr_handler+0x1e>
1000bae2:	2301      	movs	r3, #1
1000bae4:	2401      	movs	r4, #1
1000bae6:	0018      	movs	r0, r3
1000bae8:	0022      	movs	r2, r4
1000baea:	409a      	lsls	r2, r3
1000baec:	4211      	tst	r1, r2
1000baee:	d014      	beq.n	1000bb1a <gpio_port0_isr_handler+0x46>
1000baf0:	e001      	b.n	1000baf6 <gpio_port0_isr_handler+0x22>
1000baf2:	2201      	movs	r2, #1
1000baf4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000baf6:	b292      	uxth	r2, r2
1000baf8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bafa:	2346      	movs	r3, #70	; 0x46
1000bafc:	4a0c      	ldr	r2, [pc, #48]	; (1000bb30 <gpio_port0_isr_handler+0x5c>)
1000bafe:	5ad3      	ldrh	r3, [r2, r3]
1000bb00:	4103      	asrs	r3, r0
1000bb02:	07db      	lsls	r3, r3, #31
1000bb04:	d50c      	bpl.n	1000bb20 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bb06:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bb08:	5ad3      	ldrh	r3, [r2, r3]
1000bb0a:	4103      	asrs	r3, r0
1000bb0c:	07db      	lsls	r3, r3, #31
1000bb0e:	d507      	bpl.n	1000bb20 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bb10:	0080      	lsls	r0, r0, #2
1000bb12:	1810      	adds	r0, r2, r0
1000bb14:	6843      	ldr	r3, [r0, #4]
1000bb16:	4798      	blx	r3
1000bb18:	e002      	b.n	1000bb20 <gpio_port0_isr_handler+0x4c>
1000bb1a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bb1c:	2b10      	cmp	r3, #16
1000bb1e:	d1e2      	bne.n	1000bae6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bb20:	2180      	movs	r1, #128	; 0x80
1000bb22:	0409      	lsls	r1, r1, #16
1000bb24:	23c0      	movs	r3, #192	; 0xc0
1000bb26:	005b      	lsls	r3, r3, #1
1000bb28:	4a02      	ldr	r2, [pc, #8]	; (1000bb34 <gpio_port0_isr_handler+0x60>)
1000bb2a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bb2c:	bd70      	pop	{r4, r5, r6, pc}
1000bb2e:	46c0      	nop			; (mov r8, r8)
1000bb30:	10015808 	.word	0x10015808
1000bb34:	e000e100 	.word	0xe000e100

1000bb38 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bb3a:	4b18      	ldr	r3, [pc, #96]	; (1000bb9c <gpio_port1_isr_handler+0x64>)
1000bb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bb3e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bb40:	b2b6      	uxth	r6, r6
1000bb42:	0037      	movs	r7, r6
1000bb44:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bb46:	0b76      	lsrs	r6, r6, #13
1000bb48:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb4a:	4d14      	ldr	r5, [pc, #80]	; (1000bb9c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bb4c:	2e00      	cmp	r6, #0
1000bb4e:	d001      	beq.n	1000bb54 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bb50:	4b13      	ldr	r3, [pc, #76]	; (1000bba0 <gpio_port1_isr_handler+0x68>)
1000bb52:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bb54:	0022      	movs	r2, r4
1000bb56:	2301      	movs	r3, #1
1000bb58:	40a3      	lsls	r3, r4
1000bb5a:	421f      	tst	r7, r3
1000bb5c:	d013      	beq.n	1000bb86 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bb5e:	b29b      	uxth	r3, r3
1000bb60:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bb62:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bb64:	238e      	movs	r3, #142	; 0x8e
1000bb66:	5aeb      	ldrh	r3, [r5, r3]
1000bb68:	4123      	asrs	r3, r4
1000bb6a:	07db      	lsls	r3, r3, #31
1000bb6c:	d50b      	bpl.n	1000bb86 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bb6e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bb70:	490a      	ldr	r1, [pc, #40]	; (1000bb9c <gpio_port1_isr_handler+0x64>)
1000bb72:	5acb      	ldrh	r3, [r1, r3]
1000bb74:	4123      	asrs	r3, r4
1000bb76:	07db      	lsls	r3, r3, #31
1000bb78:	d505      	bpl.n	1000bb86 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bb7a:	3212      	adds	r2, #18
1000bb7c:	0092      	lsls	r2, r2, #2
1000bb7e:	188a      	adds	r2, r1, r2
1000bb80:	6853      	ldr	r3, [r2, #4]
1000bb82:	4798      	blx	r3
				break;
1000bb84:	e002      	b.n	1000bb8c <gpio_port1_isr_handler+0x54>
1000bb86:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bb88:	2c10      	cmp	r4, #16
1000bb8a:	d1df      	bne.n	1000bb4c <gpio_port1_isr_handler+0x14>
1000bb8c:	2180      	movs	r1, #128	; 0x80
1000bb8e:	0449      	lsls	r1, r1, #17
1000bb90:	23c0      	movs	r3, #192	; 0xc0
1000bb92:	005b      	lsls	r3, r3, #1
1000bb94:	4a03      	ldr	r2, [pc, #12]	; (1000bba4 <gpio_port1_isr_handler+0x6c>)
1000bb96:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bb9a:	46c0      	nop			; (mov r8, r8)
1000bb9c:	10015808 	.word	0x10015808
1000bba0:	0001bc51 	.word	0x0001bc51
1000bba4:	e000e100 	.word	0xe000e100

1000bba8 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bba8:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bbaa:	2390      	movs	r3, #144	; 0x90
1000bbac:	4a1b      	ldr	r2, [pc, #108]	; (1000bc1c <gpio_port2_isr_handler+0x74>)
1000bbae:	58d2      	ldr	r2, [r2, r3]
1000bbb0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bbb2:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bbb4:	04d9      	lsls	r1, r3, #19
1000bbb6:	d414      	bmi.n	1000bbe2 <gpio_port2_isr_handler+0x3a>
1000bbb8:	0499      	lsls	r1, r3, #18
1000bbba:	d40a      	bmi.n	1000bbd2 <gpio_port2_isr_handler+0x2a>
1000bbbc:	0459      	lsls	r1, r3, #17
1000bbbe:	d40c      	bmi.n	1000bbda <gpio_port2_isr_handler+0x32>
1000bbc0:	0bdb      	lsrs	r3, r3, #15
1000bbc2:	03db      	lsls	r3, r3, #15
1000bbc4:	b29b      	uxth	r3, r3
1000bbc6:	2b00      	cmp	r3, #0
1000bbc8:	d020      	beq.n	1000bc0c <gpio_port2_isr_handler+0x64>
1000bbca:	2380      	movs	r3, #128	; 0x80
1000bbcc:	021b      	lsls	r3, r3, #8
1000bbce:	210f      	movs	r1, #15
1000bbd0:	e00a      	b.n	1000bbe8 <gpio_port2_isr_handler+0x40>
1000bbd2:	2380      	movs	r3, #128	; 0x80
1000bbd4:	019b      	lsls	r3, r3, #6
1000bbd6:	210d      	movs	r1, #13
1000bbd8:	e006      	b.n	1000bbe8 <gpio_port2_isr_handler+0x40>
1000bbda:	2380      	movs	r3, #128	; 0x80
1000bbdc:	01db      	lsls	r3, r3, #7
1000bbde:	210e      	movs	r1, #14
1000bbe0:	e002      	b.n	1000bbe8 <gpio_port2_isr_handler+0x40>
1000bbe2:	2380      	movs	r3, #128	; 0x80
1000bbe4:	015b      	lsls	r3, r3, #5
1000bbe6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bbe8:	b29b      	uxth	r3, r3
1000bbea:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bbec:	23d6      	movs	r3, #214	; 0xd6
1000bbee:	4a0b      	ldr	r2, [pc, #44]	; (1000bc1c <gpio_port2_isr_handler+0x74>)
1000bbf0:	5ad3      	ldrh	r3, [r2, r3]
1000bbf2:	410b      	asrs	r3, r1
1000bbf4:	07db      	lsls	r3, r3, #31
1000bbf6:	d509      	bpl.n	1000bc0c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bbf8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bbfa:	5ad3      	ldrh	r3, [r2, r3]
1000bbfc:	410b      	asrs	r3, r1
1000bbfe:	07db      	lsls	r3, r3, #31
1000bc00:	d504      	bpl.n	1000bc0c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bc02:	3124      	adds	r1, #36	; 0x24
1000bc04:	0089      	lsls	r1, r1, #2
1000bc06:	1851      	adds	r1, r2, r1
1000bc08:	684b      	ldr	r3, [r1, #4]
1000bc0a:	4798      	blx	r3
1000bc0c:	2180      	movs	r1, #128	; 0x80
1000bc0e:	0489      	lsls	r1, r1, #18
1000bc10:	23c0      	movs	r3, #192	; 0xc0
1000bc12:	005b      	lsls	r3, r3, #1
1000bc14:	4a02      	ldr	r2, [pc, #8]	; (1000bc20 <gpio_port2_isr_handler+0x78>)
1000bc16:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bc18:	bd10      	pop	{r4, pc}
1000bc1a:	46c0      	nop			; (mov r8, r8)
1000bc1c:	10015808 	.word	0x10015808
1000bc20:	e000e100 	.word	0xe000e100

1000bc24 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bc24:	2300      	movs	r3, #0
1000bc26:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bc28:	2201      	movs	r2, #1
1000bc2a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bc2c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bc2e:	70c3      	strb	r3, [r0, #3]
}
1000bc30:	4770      	bx	lr
1000bc32:	46c0      	nop			; (mov r8, r8)

1000bc34 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bc34:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bc36:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bc38:	2801      	cmp	r0, #1
1000bc3a:	d800      	bhi.n	1000bc3e <gpio_pin_set_config+0xa>
1000bc3c:	e0c8      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bc3e:	2807      	cmp	r0, #7
1000bc40:	d809      	bhi.n	1000bc56 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc42:	4d64      	ldr	r5, [pc, #400]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bc44:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000bc46:	3b10      	subs	r3, #16
1000bc48:	4003      	ands	r3, r0
1000bc4a:	009b      	lsls	r3, r3, #2
1000bc4c:	2407      	movs	r4, #7
1000bc4e:	409c      	lsls	r4, r3
1000bc50:	43a2      	bics	r2, r4
1000bc52:	646a      	str	r2, [r5, #68]	; 0x44
1000bc54:	e029      	b.n	1000bcaa <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000bc56:	280f      	cmp	r0, #15
1000bc58:	d809      	bhi.n	1000bc6e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc5a:	4d5e      	ldr	r5, [pc, #376]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bc5c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000bc5e:	2307      	movs	r3, #7
1000bc60:	4003      	ands	r3, r0
1000bc62:	009b      	lsls	r3, r3, #2
1000bc64:	2407      	movs	r4, #7
1000bc66:	409c      	lsls	r4, r3
1000bc68:	43a2      	bics	r2, r4
1000bc6a:	64aa      	str	r2, [r5, #72]	; 0x48
1000bc6c:	e01d      	b.n	1000bcaa <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000bc6e:	2817      	cmp	r0, #23
1000bc70:	d809      	bhi.n	1000bc86 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc72:	4d58      	ldr	r5, [pc, #352]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bc74:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000bc76:	2307      	movs	r3, #7
1000bc78:	4003      	ands	r3, r0
1000bc7a:	009b      	lsls	r3, r3, #2
1000bc7c:	2407      	movs	r4, #7
1000bc7e:	409c      	lsls	r4, r3
1000bc80:	43a2      	bics	r2, r4
1000bc82:	64ea      	str	r2, [r5, #76]	; 0x4c
1000bc84:	e011      	b.n	1000bcaa <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bc86:	0003      	movs	r3, r0
1000bc88:	3b2c      	subs	r3, #44	; 0x2c
1000bc8a:	2b03      	cmp	r3, #3
1000bc8c:	d80d      	bhi.n	1000bcaa <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bc8e:	4d52      	ldr	r5, [pc, #328]	; (1000bdd8 <gpio_pin_set_config+0x1a4>)
1000bc90:	2482      	movs	r4, #130	; 0x82
1000bc92:	00e4      	lsls	r4, r4, #3
1000bc94:	5d2a      	ldrb	r2, [r5, r4]
1000bc96:	0712      	lsls	r2, r2, #28
1000bc98:	2601      	movs	r6, #1
1000bc9a:	409e      	lsls	r6, r3
1000bc9c:	0f12      	lsrs	r2, r2, #28
1000bc9e:	5d2b      	ldrb	r3, [r5, r4]
1000bca0:	43b2      	bics	r2, r6
1000bca2:	260f      	movs	r6, #15
1000bca4:	43b3      	bics	r3, r6
1000bca6:	4313      	orrs	r3, r2
1000bca8:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bcaa:	0003      	movs	r3, r0
1000bcac:	3b1d      	subs	r3, #29
1000bcae:	2b02      	cmp	r3, #2
1000bcb0:	d829      	bhi.n	1000bd06 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bcb2:	784b      	ldrb	r3, [r1, #1]
1000bcb4:	2b01      	cmp	r3, #1
1000bcb6:	d108      	bne.n	1000bcca <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bcb8:	4d47      	ldr	r5, [pc, #284]	; (1000bdd8 <gpio_pin_set_config+0x1a4>)
1000bcba:	7d2b      	ldrb	r3, [r5, #20]
1000bcbc:	241f      	movs	r4, #31
1000bcbe:	1a24      	subs	r4, r4, r0
1000bcc0:	2201      	movs	r2, #1
1000bcc2:	40a2      	lsls	r2, r4
1000bcc4:	4393      	bics	r3, r2
1000bcc6:	752b      	strb	r3, [r5, #20]
1000bcc8:	e008      	b.n	1000bcdc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bcca:	4c43      	ldr	r4, [pc, #268]	; (1000bdd8 <gpio_pin_set_config+0x1a4>)
1000bccc:	7d25      	ldrb	r5, [r4, #20]
1000bcce:	221f      	movs	r2, #31
1000bcd0:	1a12      	subs	r2, r2, r0
1000bcd2:	2301      	movs	r3, #1
1000bcd4:	4093      	lsls	r3, r2
1000bcd6:	432b      	orrs	r3, r5
1000bcd8:	b2db      	uxtb	r3, r3
1000bcda:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bcdc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bcde:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bce0:	2a00      	cmp	r2, #0
1000bce2:	d075      	beq.n	1000bdd0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bce4:	493c      	ldr	r1, [pc, #240]	; (1000bdd8 <gpio_pin_set_config+0x1a4>)
1000bce6:	880c      	ldrh	r4, [r1, #0]
1000bce8:	221f      	movs	r2, #31
1000bcea:	1a10      	subs	r0, r2, r0
1000bcec:	0080      	lsls	r0, r0, #2
1000bcee:	3301      	adds	r3, #1
1000bcf0:	4083      	lsls	r3, r0
1000bcf2:	4323      	orrs	r3, r4
1000bcf4:	b29b      	uxth	r3, r3
1000bcf6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bcf8:	4a38      	ldr	r2, [pc, #224]	; (1000bddc <gpio_pin_set_config+0x1a8>)
1000bcfa:	7811      	ldrb	r1, [r2, #0]
1000bcfc:	2302      	movs	r3, #2
1000bcfe:	430b      	orrs	r3, r1
1000bd00:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd02:	2300      	movs	r3, #0
1000bd04:	e064      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bd06:	780a      	ldrb	r2, [r1, #0]
1000bd08:	2a00      	cmp	r2, #0
1000bd0a:	d140      	bne.n	1000bd8e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bd0c:	280f      	cmp	r0, #15
1000bd0e:	d808      	bhi.n	1000bd22 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bd10:	2301      	movs	r3, #1
1000bd12:	4083      	lsls	r3, r0
1000bd14:	b29b      	uxth	r3, r3
1000bd16:	4a32      	ldr	r2, [pc, #200]	; (1000bde0 <gpio_pin_set_config+0x1ac>)
1000bd18:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd1a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bd1c:	281f      	cmp	r0, #31
1000bd1e:	d857      	bhi.n	1000bdd0 <gpio_pin_set_config+0x19c>
1000bd20:	e012      	b.n	1000bd48 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bd22:	281f      	cmp	r0, #31
1000bd24:	d807      	bhi.n	1000bd36 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bd26:	220f      	movs	r2, #15
1000bd28:	4002      	ands	r2, r0
1000bd2a:	2301      	movs	r3, #1
1000bd2c:	4093      	lsls	r3, r2
1000bd2e:	b29b      	uxth	r3, r3
1000bd30:	4a2c      	ldr	r2, [pc, #176]	; (1000bde4 <gpio_pin_set_config+0x1b0>)
1000bd32:	8293      	strh	r3, [r2, #20]
1000bd34:	e008      	b.n	1000bd48 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bd36:	230f      	movs	r3, #15
1000bd38:	4018      	ands	r0, r3
1000bd3a:	3b0e      	subs	r3, #14
1000bd3c:	4083      	lsls	r3, r0
1000bd3e:	b29b      	uxth	r3, r3
1000bd40:	4a29      	ldr	r2, [pc, #164]	; (1000bde8 <gpio_pin_set_config+0x1b4>)
1000bd42:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd44:	2300      	movs	r3, #0
1000bd46:	e043      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bd48:	784b      	ldrb	r3, [r1, #1]
1000bd4a:	2b01      	cmp	r3, #1
1000bd4c:	d00c      	beq.n	1000bd68 <gpio_pin_set_config+0x134>
1000bd4e:	2b00      	cmp	r3, #0
1000bd50:	d002      	beq.n	1000bd58 <gpio_pin_set_config+0x124>
1000bd52:	2b02      	cmp	r3, #2
1000bd54:	d010      	beq.n	1000bd78 <gpio_pin_set_config+0x144>
1000bd56:	e03a      	b.n	1000bdce <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bd58:	491e      	ldr	r1, [pc, #120]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bd5a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bd5c:	2301      	movs	r3, #1
1000bd5e:	4083      	lsls	r3, r0
1000bd60:	4313      	orrs	r3, r2
1000bd62:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd64:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bd66:	e033      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bd68:	491a      	ldr	r1, [pc, #104]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bd6a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bd6c:	2201      	movs	r2, #1
1000bd6e:	4082      	lsls	r2, r0
1000bd70:	4393      	bics	r3, r2
1000bd72:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd74:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bd76:	e02b      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bd78:	4b16      	ldr	r3, [pc, #88]	; (1000bdd4 <gpio_pin_set_config+0x1a0>)
1000bd7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bd7c:	2201      	movs	r2, #1
1000bd7e:	4082      	lsls	r2, r0
1000bd80:	4311      	orrs	r1, r2
1000bd82:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bd84:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bd86:	4391      	bics	r1, r2
1000bd88:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd8a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bd8c:	e020      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bd8e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bd90:	2a01      	cmp	r2, #1
1000bd92:	d11d      	bne.n	1000bdd0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bd94:	280f      	cmp	r0, #15
1000bd96:	d806      	bhi.n	1000bda6 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bd98:	3301      	adds	r3, #1
1000bd9a:	4083      	lsls	r3, r0
1000bd9c:	b29b      	uxth	r3, r3
1000bd9e:	4a10      	ldr	r2, [pc, #64]	; (1000bde0 <gpio_pin_set_config+0x1ac>)
1000bda0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bda2:	2300      	movs	r3, #0
1000bda4:	e014      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bda6:	281f      	cmp	r0, #31
1000bda8:	d808      	bhi.n	1000bdbc <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bdaa:	230f      	movs	r3, #15
1000bdac:	4018      	ands	r0, r3
1000bdae:	3b0e      	subs	r3, #14
1000bdb0:	4083      	lsls	r3, r0
1000bdb2:	b29b      	uxth	r3, r3
1000bdb4:	4a0b      	ldr	r2, [pc, #44]	; (1000bde4 <gpio_pin_set_config+0x1b0>)
1000bdb6:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdb8:	2300      	movs	r3, #0
1000bdba:	e009      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bdbc:	230f      	movs	r3, #15
1000bdbe:	4018      	ands	r0, r3
1000bdc0:	3b0e      	subs	r3, #14
1000bdc2:	4083      	lsls	r3, r0
1000bdc4:	b29b      	uxth	r3, r3
1000bdc6:	4a08      	ldr	r2, [pc, #32]	; (1000bde8 <gpio_pin_set_config+0x1b4>)
1000bdc8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bdca:	2300      	movs	r3, #0
1000bdcc:	e000      	b.n	1000bdd0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bdce:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bdd0:	0018      	movs	r0, r3
1000bdd2:	bd70      	pop	{r4, r5, r6, pc}
1000bdd4:	4000b000 	.word	0x4000b000
1000bdd8:	4000f000 	.word	0x4000f000
1000bddc:	4000e000 	.word	0x4000e000
1000bde0:	40010000 	.word	0x40010000
1000bde4:	40011000 	.word	0x40011000
1000bde8:	40013000 	.word	0x40013000

1000bdec <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bdec:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bdee:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bdf0:	23ff      	movs	r3, #255	; 0xff
1000bdf2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bdf4:	2807      	cmp	r0, #7
1000bdf6:	d833      	bhi.n	1000be60 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bdf8:	4a4e      	ldr	r2, [pc, #312]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000bdfa:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000bdfc:	3bf8      	subs	r3, #248	; 0xf8
1000bdfe:	4003      	ands	r3, r0
1000be00:	009b      	lsls	r3, r3, #2
1000be02:	2607      	movs	r6, #7
1000be04:	409e      	lsls	r6, r3
1000be06:	43b4      	bics	r4, r6
1000be08:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000be0a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000be0c:	000e      	movs	r6, r1
1000be0e:	409e      	lsls	r6, r3
1000be10:	0033      	movs	r3, r6
1000be12:	4323      	orrs	r3, r4
1000be14:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000be16:	2901      	cmp	r1, #1
1000be18:	d000      	beq.n	1000be1c <gpio_pinmux_cofiguration+0x30>
1000be1a:	e08a      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000be1c:	2803      	cmp	r0, #3
1000be1e:	d80f      	bhi.n	1000be40 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000be20:	0011      	movs	r1, r2
1000be22:	22d0      	movs	r2, #208	; 0xd0
1000be24:	0052      	lsls	r2, r2, #1
1000be26:	588c      	ldr	r4, [r1, r2]
1000be28:	2303      	movs	r3, #3
1000be2a:	4018      	ands	r0, r3
1000be2c:	00c0      	lsls	r0, r0, #3
1000be2e:	333c      	adds	r3, #60	; 0x3c
1000be30:	4083      	lsls	r3, r0
1000be32:	439c      	bics	r4, r3
1000be34:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000be36:	588b      	ldr	r3, [r1, r2]
1000be38:	4085      	lsls	r5, r0
1000be3a:	431d      	orrs	r5, r3
1000be3c:	508d      	str	r5, [r1, r2]
1000be3e:	e078      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000be40:	493c      	ldr	r1, [pc, #240]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000be42:	22d2      	movs	r2, #210	; 0xd2
1000be44:	0052      	lsls	r2, r2, #1
1000be46:	588c      	ldr	r4, [r1, r2]
1000be48:	2303      	movs	r3, #3
1000be4a:	4018      	ands	r0, r3
1000be4c:	00c0      	lsls	r0, r0, #3
1000be4e:	333c      	adds	r3, #60	; 0x3c
1000be50:	4083      	lsls	r3, r0
1000be52:	439c      	bics	r4, r3
1000be54:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000be56:	588b      	ldr	r3, [r1, r2]
1000be58:	4085      	lsls	r5, r0
1000be5a:	431d      	orrs	r5, r3
1000be5c:	508d      	str	r5, [r1, r2]
1000be5e:	e068      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000be60:	280f      	cmp	r0, #15
1000be62:	d832      	bhi.n	1000beca <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be64:	4a33      	ldr	r2, [pc, #204]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000be66:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000be68:	2307      	movs	r3, #7
1000be6a:	4003      	ands	r3, r0
1000be6c:	009b      	lsls	r3, r3, #2
1000be6e:	2607      	movs	r6, #7
1000be70:	409e      	lsls	r6, r3
1000be72:	43b4      	bics	r4, r6
1000be74:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000be76:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000be78:	000e      	movs	r6, r1
1000be7a:	409e      	lsls	r6, r3
1000be7c:	0033      	movs	r3, r6
1000be7e:	4323      	orrs	r3, r4
1000be80:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000be82:	2901      	cmp	r1, #1
1000be84:	d155      	bne.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000be86:	280b      	cmp	r0, #11
1000be88:	d80f      	bhi.n	1000beaa <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000be8a:	0011      	movs	r1, r2
1000be8c:	22d4      	movs	r2, #212	; 0xd4
1000be8e:	0052      	lsls	r2, r2, #1
1000be90:	588c      	ldr	r4, [r1, r2]
1000be92:	2303      	movs	r3, #3
1000be94:	4018      	ands	r0, r3
1000be96:	00c0      	lsls	r0, r0, #3
1000be98:	333c      	adds	r3, #60	; 0x3c
1000be9a:	4083      	lsls	r3, r0
1000be9c:	439c      	bics	r4, r3
1000be9e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bea0:	588b      	ldr	r3, [r1, r2]
1000bea2:	4085      	lsls	r5, r0
1000bea4:	431d      	orrs	r5, r3
1000bea6:	508d      	str	r5, [r1, r2]
1000bea8:	e043      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000beaa:	4922      	ldr	r1, [pc, #136]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000beac:	22d6      	movs	r2, #214	; 0xd6
1000beae:	0052      	lsls	r2, r2, #1
1000beb0:	588c      	ldr	r4, [r1, r2]
1000beb2:	2303      	movs	r3, #3
1000beb4:	4018      	ands	r0, r3
1000beb6:	00c0      	lsls	r0, r0, #3
1000beb8:	333c      	adds	r3, #60	; 0x3c
1000beba:	4083      	lsls	r3, r0
1000bebc:	439c      	bics	r4, r3
1000bebe:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bec0:	588b      	ldr	r3, [r1, r2]
1000bec2:	4085      	lsls	r5, r0
1000bec4:	431d      	orrs	r5, r3
1000bec6:	508d      	str	r5, [r1, r2]
1000bec8:	e033      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000beca:	2817      	cmp	r0, #23
1000becc:	d831      	bhi.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bece:	4a19      	ldr	r2, [pc, #100]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000bed0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000bed2:	2307      	movs	r3, #7
1000bed4:	4003      	ands	r3, r0
1000bed6:	009b      	lsls	r3, r3, #2
1000bed8:	2607      	movs	r6, #7
1000beda:	409e      	lsls	r6, r3
1000bedc:	43b4      	bics	r4, r6
1000bede:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bee0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000bee2:	000e      	movs	r6, r1
1000bee4:	409e      	lsls	r6, r3
1000bee6:	0033      	movs	r3, r6
1000bee8:	4323      	orrs	r3, r4
1000beea:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000beec:	2901      	cmp	r1, #1
1000beee:	d120      	bne.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000bef0:	2813      	cmp	r0, #19
1000bef2:	d80f      	bhi.n	1000bf14 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bef4:	0011      	movs	r1, r2
1000bef6:	22d8      	movs	r2, #216	; 0xd8
1000bef8:	0052      	lsls	r2, r2, #1
1000befa:	588c      	ldr	r4, [r1, r2]
1000befc:	2303      	movs	r3, #3
1000befe:	4018      	ands	r0, r3
1000bf00:	00c0      	lsls	r0, r0, #3
1000bf02:	333c      	adds	r3, #60	; 0x3c
1000bf04:	4083      	lsls	r3, r0
1000bf06:	439c      	bics	r4, r3
1000bf08:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bf0a:	588b      	ldr	r3, [r1, r2]
1000bf0c:	4085      	lsls	r5, r0
1000bf0e:	431d      	orrs	r5, r3
1000bf10:	508d      	str	r5, [r1, r2]
1000bf12:	e00e      	b.n	1000bf32 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bf14:	4a07      	ldr	r2, [pc, #28]	; (1000bf34 <gpio_pinmux_cofiguration+0x148>)
1000bf16:	23da      	movs	r3, #218	; 0xda
1000bf18:	005b      	lsls	r3, r3, #1
1000bf1a:	58d1      	ldr	r1, [r2, r3]
1000bf1c:	2403      	movs	r4, #3
1000bf1e:	4020      	ands	r0, r4
1000bf20:	00c0      	lsls	r0, r0, #3
1000bf22:	343c      	adds	r4, #60	; 0x3c
1000bf24:	4084      	lsls	r4, r0
1000bf26:	43a1      	bics	r1, r4
1000bf28:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bf2a:	58d1      	ldr	r1, [r2, r3]
1000bf2c:	4085      	lsls	r5, r0
1000bf2e:	430d      	orrs	r5, r1
1000bf30:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000bf32:	bd70      	pop	{r4, r5, r6, pc}
1000bf34:	4000b000 	.word	0x4000b000

1000bf38 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bf3a:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bf3c:	280f      	cmp	r0, #15
1000bf3e:	d904      	bls.n	1000bf4a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000bf40:	241f      	movs	r4, #31
1000bf42:	4284      	cmp	r4, r0
1000bf44:	415b      	adcs	r3, r3
1000bf46:	3c1d      	subs	r4, #29
1000bf48:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000bf4a:	2a01      	cmp	r2, #1
1000bf4c:	d016      	beq.n	1000bf7c <gpio_register_callback+0x44>
1000bf4e:	2a00      	cmp	r2, #0
1000bf50:	d004      	beq.n	1000bf5c <gpio_register_callback+0x24>
1000bf52:	2a02      	cmp	r2, #2
1000bf54:	d022      	beq.n	1000bf9c <gpio_register_callback+0x64>
1000bf56:	2a03      	cmp	r2, #3
1000bf58:	d030      	beq.n	1000bfbc <gpio_register_callback+0x84>
1000bf5a:	e03e      	b.n	1000bfda <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bf5c:	4e29      	ldr	r6, [pc, #164]	; (1000c004 <gpio_register_callback+0xcc>)
1000bf5e:	00dc      	lsls	r4, r3, #3
1000bf60:	18e2      	adds	r2, r4, r3
1000bf62:	00d2      	lsls	r2, r2, #3
1000bf64:	5997      	ldr	r7, [r2, r6]
1000bf66:	250f      	movs	r5, #15
1000bf68:	4005      	ands	r5, r0
1000bf6a:	2201      	movs	r2, #1
1000bf6c:	40aa      	lsls	r2, r5
1000bf6e:	b292      	uxth	r2, r2
1000bf70:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000bf72:	18e4      	adds	r4, r4, r3
1000bf74:	00e4      	lsls	r4, r4, #3
1000bf76:	59a4      	ldr	r4, [r4, r6]
1000bf78:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000bf7a:	e02e      	b.n	1000bfda <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bf7c:	4e21      	ldr	r6, [pc, #132]	; (1000c004 <gpio_register_callback+0xcc>)
1000bf7e:	00dc      	lsls	r4, r3, #3
1000bf80:	18e2      	adds	r2, r4, r3
1000bf82:	00d2      	lsls	r2, r2, #3
1000bf84:	5997      	ldr	r7, [r2, r6]
1000bf86:	250f      	movs	r5, #15
1000bf88:	4005      	ands	r5, r0
1000bf8a:	2201      	movs	r2, #1
1000bf8c:	40aa      	lsls	r2, r5
1000bf8e:	b292      	uxth	r2, r2
1000bf90:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bf92:	18e4      	adds	r4, r4, r3
1000bf94:	00e4      	lsls	r4, r4, #3
1000bf96:	59a4      	ldr	r4, [r4, r6]
1000bf98:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bf9a:	e01e      	b.n	1000bfda <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bf9c:	4e19      	ldr	r6, [pc, #100]	; (1000c004 <gpio_register_callback+0xcc>)
1000bf9e:	00dc      	lsls	r4, r3, #3
1000bfa0:	18e2      	adds	r2, r4, r3
1000bfa2:	00d2      	lsls	r2, r2, #3
1000bfa4:	5997      	ldr	r7, [r2, r6]
1000bfa6:	250f      	movs	r5, #15
1000bfa8:	4005      	ands	r5, r0
1000bfaa:	2201      	movs	r2, #1
1000bfac:	40aa      	lsls	r2, r5
1000bfae:	b292      	uxth	r2, r2
1000bfb0:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bfb2:	18e4      	adds	r4, r4, r3
1000bfb4:	00e4      	lsls	r4, r4, #3
1000bfb6:	59a4      	ldr	r4, [r4, r6]
1000bfb8:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bfba:	e00e      	b.n	1000bfda <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bfbc:	4e11      	ldr	r6, [pc, #68]	; (1000c004 <gpio_register_callback+0xcc>)
1000bfbe:	00dc      	lsls	r4, r3, #3
1000bfc0:	18e2      	adds	r2, r4, r3
1000bfc2:	00d2      	lsls	r2, r2, #3
1000bfc4:	5997      	ldr	r7, [r2, r6]
1000bfc6:	250f      	movs	r5, #15
1000bfc8:	4005      	ands	r5, r0
1000bfca:	2201      	movs	r2, #1
1000bfcc:	40aa      	lsls	r2, r5
1000bfce:	b292      	uxth	r2, r2
1000bfd0:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000bfd2:	18e4      	adds	r4, r4, r3
1000bfd4:	00e4      	lsls	r4, r4, #3
1000bfd6:	59a4      	ldr	r4, [r4, r6]
1000bfd8:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bfda:	220f      	movs	r2, #15
1000bfdc:	4010      	ands	r0, r2
1000bfde:	4c09      	ldr	r4, [pc, #36]	; (1000c004 <gpio_register_callback+0xcc>)
1000bfe0:	00dd      	lsls	r5, r3, #3
1000bfe2:	18ea      	adds	r2, r5, r3
1000bfe4:	0052      	lsls	r2, r2, #1
1000bfe6:	1812      	adds	r2, r2, r0
1000bfe8:	0092      	lsls	r2, r2, #2
1000bfea:	18a2      	adds	r2, r4, r2
1000bfec:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bfee:	18ea      	adds	r2, r5, r3
1000bff0:	00d2      	lsls	r2, r2, #3
1000bff2:	18a2      	adds	r2, r4, r2
1000bff4:	3244      	adds	r2, #68	; 0x44
1000bff6:	2101      	movs	r1, #1
1000bff8:	4081      	lsls	r1, r0
1000bffa:	8813      	ldrh	r3, [r2, #0]
1000bffc:	430b      	orrs	r3, r1
1000bffe:	8013      	strh	r3, [r2, #0]
}
1000c000:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c002:	46c0      	nop			; (mov r8, r8)
1000c004:	10015808 	.word	0x10015808

1000c008 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c008:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c00a:	280f      	cmp	r0, #15
1000c00c:	d805      	bhi.n	1000c01a <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c00e:	2280      	movs	r2, #128	; 0x80
1000c010:	0412      	lsls	r2, r2, #16
1000c012:	4b12      	ldr	r3, [pc, #72]	; (1000c05c <gpio_enable_callback+0x54>)
1000c014:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c016:	2200      	movs	r2, #0
1000c018:	e00c      	b.n	1000c034 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c01a:	281f      	cmp	r0, #31
1000c01c:	d805      	bhi.n	1000c02a <gpio_enable_callback+0x22>
1000c01e:	2280      	movs	r2, #128	; 0x80
1000c020:	0452      	lsls	r2, r2, #17
1000c022:	4b0e      	ldr	r3, [pc, #56]	; (1000c05c <gpio_enable_callback+0x54>)
1000c024:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c026:	2201      	movs	r2, #1
1000c028:	e004      	b.n	1000c034 <gpio_enable_callback+0x2c>
1000c02a:	2280      	movs	r2, #128	; 0x80
1000c02c:	0492      	lsls	r2, r2, #18
1000c02e:	4b0b      	ldr	r3, [pc, #44]	; (1000c05c <gpio_enable_callback+0x54>)
1000c030:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c032:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c034:	230f      	movs	r3, #15
1000c036:	4018      	ands	r0, r3
1000c038:	2101      	movs	r1, #1
1000c03a:	4081      	lsls	r1, r0
1000c03c:	4c08      	ldr	r4, [pc, #32]	; (1000c060 <gpio_enable_callback+0x58>)
1000c03e:	00d5      	lsls	r5, r2, #3
1000c040:	18ab      	adds	r3, r5, r2
1000c042:	00db      	lsls	r3, r3, #3
1000c044:	18e3      	adds	r3, r4, r3
1000c046:	3346      	adds	r3, #70	; 0x46
1000c048:	8818      	ldrh	r0, [r3, #0]
1000c04a:	4308      	orrs	r0, r1
1000c04c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c04e:	18aa      	adds	r2, r5, r2
1000c050:	00d2      	lsls	r2, r2, #3
1000c052:	5913      	ldr	r3, [r2, r4]
1000c054:	b289      	uxth	r1, r1
1000c056:	8419      	strh	r1, [r3, #32]
}
1000c058:	bd30      	pop	{r4, r5, pc}
1000c05a:	46c0      	nop			; (mov r8, r8)
1000c05c:	e000e100 	.word	0xe000e100
1000c060:	10015808 	.word	0x10015808

1000c064 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c064:	b510      	push	{r4, lr}
1000c066:	4a11      	ldr	r2, [pc, #68]	; (1000c0ac <gpio_init+0x48>)
1000c068:	0010      	movs	r0, r2
1000c06a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c06c:	2100      	movs	r1, #0
1000c06e:	e007      	b.n	1000c080 <gpio_init+0x1c>
1000c070:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c072:	4293      	cmp	r3, r2
1000c074:	d1fc      	bne.n	1000c070 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c076:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c078:	8011      	strh	r1, [r2, #0]
1000c07a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c07c:	4282      	cmp	r2, r0
1000c07e:	d002      	beq.n	1000c086 <gpio_init+0x22>
1000c080:	0013      	movs	r3, r2
1000c082:	3b40      	subs	r3, #64	; 0x40
1000c084:	e7f4      	b.n	1000c070 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c086:	4b0a      	ldr	r3, [pc, #40]	; (1000c0b0 <gpio_init+0x4c>)
1000c088:	4a0a      	ldr	r2, [pc, #40]	; (1000c0b4 <gpio_init+0x50>)
1000c08a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c08c:	4a0a      	ldr	r2, [pc, #40]	; (1000c0b8 <gpio_init+0x54>)
1000c08e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c090:	490a      	ldr	r1, [pc, #40]	; (1000c0bc <gpio_init+0x58>)
1000c092:	2290      	movs	r2, #144	; 0x90
1000c094:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c096:	490a      	ldr	r1, [pc, #40]	; (1000c0c0 <gpio_init+0x5c>)
1000c098:	2027      	movs	r0, #39	; 0x27
1000c09a:	4c0a      	ldr	r4, [pc, #40]	; (1000c0c4 <gpio_init+0x60>)
1000c09c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c09e:	490a      	ldr	r1, [pc, #40]	; (1000c0c8 <gpio_init+0x64>)
1000c0a0:	2028      	movs	r0, #40	; 0x28
1000c0a2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c0a4:	4909      	ldr	r1, [pc, #36]	; (1000c0cc <gpio_init+0x68>)
1000c0a6:	2029      	movs	r0, #41	; 0x29
1000c0a8:	47a0      	blx	r4
}
1000c0aa:	bd10      	pop	{r4, pc}
1000c0ac:	1001584c 	.word	0x1001584c
1000c0b0:	10015808 	.word	0x10015808
1000c0b4:	40010000 	.word	0x40010000
1000c0b8:	40011000 	.word	0x40011000
1000c0bc:	40013000 	.word	0x40013000
1000c0c0:	1000bad5 	.word	0x1000bad5
1000c0c4:	1000cb09 	.word	0x1000cb09
1000c0c8:	1000bb39 	.word	0x1000bb39
1000c0cc:	1000bba9 	.word	0x1000bba9

1000c0d0 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0d2:	464f      	mov	r7, r9
1000c0d4:	4646      	mov	r6, r8
1000c0d6:	b4c0      	push	{r6, r7}
1000c0d8:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000c0da:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c0dc:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000c0de:	2d00      	cmp	r5, #0
1000c0e0:	d02f      	beq.n	1000c142 <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000c0e2:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c0e4:	2428      	movs	r4, #40	; 0x28
1000c0e6:	5d13      	ldrb	r3, [r2, r4]
1000c0e8:	07db      	lsls	r3, r3, #31
1000c0ea:	d4fc      	bmi.n	1000c0e6 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000c0ec:	2301      	movs	r3, #1
1000c0ee:	2434      	movs	r4, #52	; 0x34
1000c0f0:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000c0f2:	3c14      	subs	r4, #20
1000c0f4:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c0f6:	880b      	ldrh	r3, [r1, #0]
1000c0f8:	005b      	lsls	r3, r3, #1
1000c0fa:	2402      	movs	r4, #2
1000c0fc:	34ff      	adds	r4, #255	; 0xff
1000c0fe:	4323      	orrs	r3, r4
1000c100:	b29b      	uxth	r3, r3
1000c102:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000c104:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000c106:	2301      	movs	r3, #1
1000c108:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000c10a:	7b13      	ldrb	r3, [r2, #12]
1000c10c:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000c10e:	4640      	mov	r0, r8
1000c110:	4218      	tst	r0, r3
1000c112:	d006      	beq.n	1000c122 <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000c114:	1c67      	adds	r7, r4, #1
1000c116:	7910      	ldrb	r0, [r2, #4]
1000c118:	4684      	mov	ip, r0
1000c11a:	6848      	ldr	r0, [r1, #4]
1000c11c:	4666      	mov	r6, ip
1000c11e:	5506      	strb	r6, [r0, r4]
1000c120:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000c122:	42ac      	cmp	r4, r5
1000c124:	d3f1      	bcc.n	1000c10a <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c126:	06db      	lsls	r3, r3, #27
1000c128:	d403      	bmi.n	1000c132 <_i2c_master_read_packet+0x62>
1000c12a:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000c12c:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c12e:	420b      	tst	r3, r1
1000c130:	d0fc      	beq.n	1000c12c <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000c132:	464b      	mov	r3, r9
1000c134:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000c136:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000c138:	2900      	cmp	r1, #0
1000c13a:	d102      	bne.n	1000c142 <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000c13c:	3320      	adds	r3, #32
1000c13e:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000c140:	2300      	movs	r3, #0
}
1000c142:	0018      	movs	r0, r3
1000c144:	bc0c      	pop	{r2, r3}
1000c146:	4690      	mov	r8, r2
1000c148:	4699      	mov	r9, r3
1000c14a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c14c <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c14c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c14e:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000c150:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000c152:	884e      	ldrh	r6, [r1, #2]
1000c154:	2428      	movs	r4, #40	; 0x28
1000c156:	5d13      	ldrb	r3, [r2, r4]
1000c158:	07db      	lsls	r3, r3, #31
1000c15a:	d4fc      	bmi.n	1000c156 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000c15c:	2301      	movs	r3, #1
1000c15e:	2434      	movs	r4, #52	; 0x34
1000c160:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000c162:	3c14      	subs	r4, #20
1000c164:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000c166:	880b      	ldrh	r3, [r1, #0]
1000c168:	005b      	lsls	r3, r3, #1
1000c16a:	34e0      	adds	r4, #224	; 0xe0
1000c16c:	4323      	orrs	r3, r4
1000c16e:	b29b      	uxth	r3, r3
1000c170:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000c172:	2400      	movs	r4, #0
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000c174:	2501      	movs	r5, #1
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000c176:	7a13      	ldrb	r3, [r2, #8]
1000c178:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000c17a:	421d      	tst	r5, r3
1000c17c:	d004      	beq.n	1000c188 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000c17e:	1c67      	adds	r7, r4, #1
1000c180:	6848      	ldr	r0, [r1, #4]
1000c182:	5d04      	ldrb	r4, [r0, r4]
1000c184:	8014      	strh	r4, [r2, #0]
1000c186:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000c188:	42b4      	cmp	r4, r6
1000c18a:	d3f4      	bcc.n	1000c176 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c18c:	06db      	lsls	r3, r3, #27
1000c18e:	d403      	bmi.n	1000c198 <_i2c_master_write_packet+0x4c>
1000c190:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000c192:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c194:	420b      	tst	r3, r1
1000c196:	d0fc      	beq.n	1000c192 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000c198:	4663      	mov	r3, ip
1000c19a:	795b      	ldrb	r3, [r3, #5]
1000c19c:	2b00      	cmp	r3, #0
1000c19e:	d102      	bne.n	1000c1a6 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000c1a0:	2100      	movs	r1, #0
1000c1a2:	3320      	adds	r3, #32
1000c1a4:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
1000c1a6:	2000      	movs	r0, #0
1000c1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c1aa:	46c0      	nop			; (mov r8, r8)

1000c1ac <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000c1ac:	2303      	movs	r3, #3
1000c1ae:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000c1b0:	330d      	adds	r3, #13
1000c1b2:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000c1b4:	3b08      	subs	r3, #8
1000c1b6:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000c1b8:	3301      	adds	r3, #1
1000c1ba:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c1bc:	3b07      	subs	r3, #7
1000c1be:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c1c0:	6103      	str	r3, [r0, #16]
}
1000c1c2:	4770      	bx	lr

1000c1c4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000c1c4:	b570      	push	{r4, r5, r6, lr}
1000c1c6:	0004      	movs	r4, r0
1000c1c8:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000c1ca:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000c1cc:	2800      	cmp	r0, #0
1000c1ce:	d026      	beq.n	1000c21e <i2c_master_init+0x5a>
1000c1d0:	2a00      	cmp	r2, #0
1000c1d2:	d026      	beq.n	1000c222 <i2c_master_init+0x5e>
1000c1d4:	2228      	movs	r2, #40	; 0x28
1000c1d6:	5c8b      	ldrb	r3, [r1, r2]
1000c1d8:	07db      	lsls	r3, r3, #31
1000c1da:	d4fc      	bmi.n	1000c1d6 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000c1dc:	2300      	movs	r3, #0
1000c1de:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000c1e0:	6823      	ldr	r3, [r4, #0]
1000c1e2:	4a11      	ldr	r2, [pc, #68]	; (1000c228 <i2c_master_init+0x64>)
1000c1e4:	4293      	cmp	r3, r2
1000c1e6:	d103      	bne.n	1000c1f0 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000c1e8:	2003      	movs	r0, #3
1000c1ea:	4b10      	ldr	r3, [pc, #64]	; (1000c22c <i2c_master_init+0x68>)
1000c1ec:	4798      	blx	r3
1000c1ee:	e006      	b.n	1000c1fe <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
1000c1f0:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000c1f2:	4a0f      	ldr	r2, [pc, #60]	; (1000c230 <i2c_master_init+0x6c>)
1000c1f4:	4293      	cmp	r3, r2
1000c1f6:	d115      	bne.n	1000c224 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000c1f8:	3002      	adds	r0, #2
1000c1fa:	4b0c      	ldr	r3, [pc, #48]	; (1000c22c <i2c_master_init+0x68>)
1000c1fc:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000c1fe:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000c200:	8929      	ldrh	r1, [r5, #8]
1000c202:	7928      	ldrb	r0, [r5, #4]
1000c204:	4e0b      	ldr	r6, [pc, #44]	; (1000c234 <i2c_master_init+0x70>)
1000c206:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000c208:	8a29      	ldrh	r1, [r5, #16]
1000c20a:	7b28      	ldrb	r0, [r5, #12]
1000c20c:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000c20e:	782b      	ldrb	r3, [r5, #0]
1000c210:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000c212:	886b      	ldrh	r3, [r5, #2]
1000c214:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000c216:	2301      	movs	r3, #1
1000c218:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000c21a:	2000      	movs	r0, #0
1000c21c:	e002      	b.n	1000c224 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c21e:	2017      	movs	r0, #23
1000c220:	e000      	b.n	1000c224 <i2c_master_init+0x60>
1000c222:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000c224:	bd70      	pop	{r4, r5, r6, pc}
1000c226:	46c0      	nop			; (mov r8, r8)
1000c228:	40003000 	.word	0x40003000
1000c22c:	1000c6a1 	.word	0x1000c6a1
1000c230:	40003400 	.word	0x40003400
1000c234:	1000bded 	.word	0x1000bded

1000c238 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c238:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000c23a:	2800      	cmp	r0, #0
1000c23c:	d008      	beq.n	1000c250 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000c23e:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000c240:	2900      	cmp	r1, #0
1000c242:	d006      	beq.n	1000c252 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c244:	2300      	movs	r3, #0
1000c246:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000c248:	4b03      	ldr	r3, [pc, #12]	; (1000c258 <i2c_master_read_packet_wait+0x20>)
1000c24a:	4798      	blx	r3
1000c24c:	0003      	movs	r3, r0
1000c24e:	e000      	b.n	1000c252 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c250:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000c252:	0018      	movs	r0, r3
1000c254:	bd10      	pop	{r4, pc}
1000c256:	46c0      	nop			; (mov r8, r8)
1000c258:	1000c0d1 	.word	0x1000c0d1

1000c25c <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c25c:	b570      	push	{r4, r5, r6, lr}
1000c25e:	0004      	movs	r4, r0
1000c260:	000d      	movs	r5, r1
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000c262:	2800      	cmp	r0, #0
1000c264:	d00c      	beq.n	1000c280 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
1000c266:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000c268:	2900      	cmp	r1, #0
1000c26a:	d00a      	beq.n	1000c282 <i2c_master_write_packet_wait+0x26>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c26c:	2300      	movs	r3, #0
1000c26e:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000c270:	4804      	ldr	r0, [pc, #16]	; (1000c284 <i2c_master_write_packet_wait+0x28>)
1000c272:	4b05      	ldr	r3, [pc, #20]	; (1000c288 <i2c_master_write_packet_wait+0x2c>)
1000c274:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000c276:	0029      	movs	r1, r5
1000c278:	0020      	movs	r0, r4
1000c27a:	4b04      	ldr	r3, [pc, #16]	; (1000c28c <i2c_master_write_packet_wait+0x30>)
1000c27c:	4798      	blx	r3
1000c27e:	e000      	b.n	1000c282 <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c280:	2017      	movs	r0, #23

	module->no_stop = false;

    printf("!!");
	return _i2c_master_write_packet(module, packet);
}
1000c282:	bd70      	pop	{r4, r5, r6, pc}
1000c284:	100131d8 	.word	0x100131d8
1000c288:	100114a9 	.word	0x100114a9
1000c28c:	1000c14d 	.word	0x1000c14d

1000c290 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c290:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000c292:	2800      	cmp	r0, #0
1000c294:	d008      	beq.n	1000c2a8 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
1000c296:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000c298:	2900      	cmp	r1, #0
1000c29a:	d006      	beq.n	1000c2aa <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000c29c:	3b16      	subs	r3, #22
1000c29e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000c2a0:	4b03      	ldr	r3, [pc, #12]	; (1000c2b0 <i2c_master_write_packet_wait_no_stop+0x20>)
1000c2a2:	4798      	blx	r3
1000c2a4:	0003      	movs	r3, r0
1000c2a6:	e000      	b.n	1000c2aa <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c2a8:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000c2aa:	0018      	movs	r0, r3
1000c2ac:	bd10      	pop	{r4, pc}
1000c2ae:	46c0      	nop			; (mov r8, r8)
1000c2b0:	1000c14d 	.word	0x1000c14d

1000c2b4 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c2b4:	2801      	cmp	r0, #1
1000c2b6:	d00d      	beq.n	1000c2d4 <system_clock_config+0x20>
1000c2b8:	2800      	cmp	r0, #0
1000c2ba:	d002      	beq.n	1000c2c2 <system_clock_config+0xe>
1000c2bc:	2802      	cmp	r0, #2
1000c2be:	d01c      	beq.n	1000c2fa <system_clock_config+0x46>
1000c2c0:	e02e      	b.n	1000c320 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2c2:	4a18      	ldr	r2, [pc, #96]	; (1000c324 <system_clock_config+0x70>)
1000c2c4:	6990      	ldr	r0, [r2, #24]
1000c2c6:	230c      	movs	r3, #12
1000c2c8:	4303      	orrs	r3, r0
1000c2ca:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c2cc:	4a16      	ldr	r2, [pc, #88]	; (1000c328 <system_clock_config+0x74>)
1000c2ce:	4b17      	ldr	r3, [pc, #92]	; (1000c32c <system_clock_config+0x78>)
1000c2d0:	601a      	str	r2, [r3, #0]
			break;
1000c2d2:	e01a      	b.n	1000c30a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c2d4:	4b13      	ldr	r3, [pc, #76]	; (1000c324 <system_clock_config+0x70>)
1000c2d6:	6998      	ldr	r0, [r3, #24]
1000c2d8:	2208      	movs	r2, #8
1000c2da:	4302      	orrs	r2, r0
1000c2dc:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c2de:	699a      	ldr	r2, [r3, #24]
1000c2e0:	2004      	movs	r0, #4
1000c2e2:	4382      	bics	r2, r0
1000c2e4:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c2e6:	4a12      	ldr	r2, [pc, #72]	; (1000c330 <system_clock_config+0x7c>)
1000c2e8:	6853      	ldr	r3, [r2, #4]
1000c2ea:	2080      	movs	r0, #128	; 0x80
1000c2ec:	0300      	lsls	r0, r0, #12
1000c2ee:	4303      	orrs	r3, r0
1000c2f0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c2f2:	4a10      	ldr	r2, [pc, #64]	; (1000c334 <system_clock_config+0x80>)
1000c2f4:	4b0d      	ldr	r3, [pc, #52]	; (1000c32c <system_clock_config+0x78>)
1000c2f6:	601a      	str	r2, [r3, #0]
			break;
1000c2f8:	e007      	b.n	1000c30a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c2fa:	4a0a      	ldr	r2, [pc, #40]	; (1000c324 <system_clock_config+0x70>)
1000c2fc:	6993      	ldr	r3, [r2, #24]
1000c2fe:	200c      	movs	r0, #12
1000c300:	4383      	bics	r3, r0
1000c302:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c304:	4a08      	ldr	r2, [pc, #32]	; (1000c328 <system_clock_config+0x74>)
1000c306:	4b09      	ldr	r3, [pc, #36]	; (1000c32c <system_clock_config+0x78>)
1000c308:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c30a:	4b06      	ldr	r3, [pc, #24]	; (1000c324 <system_clock_config+0x70>)
1000c30c:	699a      	ldr	r2, [r3, #24]
1000c30e:	2003      	movs	r0, #3
1000c310:	4382      	bics	r2, r0
1000c312:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c314:	699a      	ldr	r2, [r3, #24]
1000c316:	4001      	ands	r1, r0
1000c318:	4311      	orrs	r1, r2
1000c31a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c31c:	2000      	movs	r0, #0
1000c31e:	e000      	b.n	1000c322 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c320:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c322:	4770      	bx	lr
1000c324:	4000b000 	.word	0x4000b000
1000c328:	018cba80 	.word	0x018cba80
1000c32c:	100158e0 	.word	0x100158e0
1000c330:	4000f000 	.word	0x4000f000
1000c334:	001e8480 	.word	0x001e8480

1000c338 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c338:	4b01      	ldr	r3, [pc, #4]	; (1000c340 <system_clock_get_value+0x8>)
1000c33a:	6818      	ldr	r0, [r3, #0]
}
1000c33c:	4770      	bx	lr
1000c33e:	46c0      	nop			; (mov r8, r8)
1000c340:	100158e0 	.word	0x100158e0

1000c344 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c344:	b500      	push	{lr}
	switch (peripheral) {
1000c346:	2835      	cmp	r0, #53	; 0x35
1000c348:	d900      	bls.n	1000c34c <system_clock_peripheral_enable+0x8>
1000c34a:	e1a2      	b.n	1000c692 <system_clock_peripheral_enable+0x34e>
1000c34c:	0080      	lsls	r0, r0, #2
1000c34e:	4bd2      	ldr	r3, [pc, #840]	; (1000c698 <system_clock_peripheral_enable+0x354>)
1000c350:	581b      	ldr	r3, [r3, r0]
1000c352:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c354:	4ad1      	ldr	r2, [pc, #836]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c356:	68d1      	ldr	r1, [r2, #12]
1000c358:	2302      	movs	r3, #2
1000c35a:	430b      	orrs	r3, r1
1000c35c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c35e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c360:	e198      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c362:	4ace      	ldr	r2, [pc, #824]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c364:	68d1      	ldr	r1, [r2, #12]
1000c366:	2304      	movs	r3, #4
1000c368:	430b      	orrs	r3, r1
1000c36a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c36c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c36e:	e191      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c370:	4aca      	ldr	r2, [pc, #808]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c372:	68d1      	ldr	r1, [r2, #12]
1000c374:	2308      	movs	r3, #8
1000c376:	430b      	orrs	r3, r1
1000c378:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c37a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c37c:	e18a      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c37e:	4ac7      	ldr	r2, [pc, #796]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c380:	68d1      	ldr	r1, [r2, #12]
1000c382:	2310      	movs	r3, #16
1000c384:	430b      	orrs	r3, r1
1000c386:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c388:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c38a:	e183      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c38c:	4ac3      	ldr	r2, [pc, #780]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c38e:	68d1      	ldr	r1, [r2, #12]
1000c390:	2320      	movs	r3, #32
1000c392:	430b      	orrs	r3, r1
1000c394:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c396:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c398:	e17c      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c39a:	4ac0      	ldr	r2, [pc, #768]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c39c:	68d1      	ldr	r1, [r2, #12]
1000c39e:	2380      	movs	r3, #128	; 0x80
1000c3a0:	430b      	orrs	r3, r1
1000c3a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c3a6:	e175      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3a8:	4abc      	ldr	r2, [pc, #752]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3aa:	68d3      	ldr	r3, [r2, #12]
1000c3ac:	2180      	movs	r1, #128	; 0x80
1000c3ae:	0049      	lsls	r1, r1, #1
1000c3b0:	430b      	orrs	r3, r1
1000c3b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c3b6:	e16d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3b8:	4ab8      	ldr	r2, [pc, #736]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3ba:	68d3      	ldr	r3, [r2, #12]
1000c3bc:	2180      	movs	r1, #128	; 0x80
1000c3be:	0109      	lsls	r1, r1, #4
1000c3c0:	430b      	orrs	r3, r1
1000c3c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c3c6:	e165      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3c8:	4ab4      	ldr	r2, [pc, #720]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3ca:	68d3      	ldr	r3, [r2, #12]
1000c3cc:	2180      	movs	r1, #128	; 0x80
1000c3ce:	0149      	lsls	r1, r1, #5
1000c3d0:	430b      	orrs	r3, r1
1000c3d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c3d6:	e15d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3d8:	4ab0      	ldr	r2, [pc, #704]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3da:	68d3      	ldr	r3, [r2, #12]
1000c3dc:	2180      	movs	r1, #128	; 0x80
1000c3de:	0189      	lsls	r1, r1, #6
1000c3e0:	430b      	orrs	r3, r1
1000c3e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c3e6:	e155      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3e8:	4aac      	ldr	r2, [pc, #688]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3ea:	68d3      	ldr	r3, [r2, #12]
1000c3ec:	2180      	movs	r1, #128	; 0x80
1000c3ee:	01c9      	lsls	r1, r1, #7
1000c3f0:	430b      	orrs	r3, r1
1000c3f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c3f6:	e14d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3f8:	4aa8      	ldr	r2, [pc, #672]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c3fa:	68d3      	ldr	r3, [r2, #12]
1000c3fc:	2180      	movs	r1, #128	; 0x80
1000c3fe:	0209      	lsls	r1, r1, #8
1000c400:	430b      	orrs	r3, r1
1000c402:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c404:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c406:	e145      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c408:	4aa4      	ldr	r2, [pc, #656]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c40a:	68d3      	ldr	r3, [r2, #12]
1000c40c:	2180      	movs	r1, #128	; 0x80
1000c40e:	0249      	lsls	r1, r1, #9
1000c410:	430b      	orrs	r3, r1
1000c412:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c414:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c416:	e13d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c418:	4aa0      	ldr	r2, [pc, #640]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c41a:	68d3      	ldr	r3, [r2, #12]
1000c41c:	2180      	movs	r1, #128	; 0x80
1000c41e:	0289      	lsls	r1, r1, #10
1000c420:	430b      	orrs	r3, r1
1000c422:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c424:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c426:	e135      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c428:	4a9c      	ldr	r2, [pc, #624]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c42a:	68d3      	ldr	r3, [r2, #12]
1000c42c:	2180      	movs	r1, #128	; 0x80
1000c42e:	02c9      	lsls	r1, r1, #11
1000c430:	430b      	orrs	r3, r1
1000c432:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c434:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c436:	e12d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c438:	4a98      	ldr	r2, [pc, #608]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c43a:	68d3      	ldr	r3, [r2, #12]
1000c43c:	2180      	movs	r1, #128	; 0x80
1000c43e:	0309      	lsls	r1, r1, #12
1000c440:	430b      	orrs	r3, r1
1000c442:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c446:	e125      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c448:	4a94      	ldr	r2, [pc, #592]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c44a:	68d3      	ldr	r3, [r2, #12]
1000c44c:	2180      	movs	r1, #128	; 0x80
1000c44e:	0349      	lsls	r1, r1, #13
1000c450:	430b      	orrs	r3, r1
1000c452:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c454:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c456:	e11d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c458:	4a90      	ldr	r2, [pc, #576]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c45a:	68d3      	ldr	r3, [r2, #12]
1000c45c:	2180      	movs	r1, #128	; 0x80
1000c45e:	0389      	lsls	r1, r1, #14
1000c460:	430b      	orrs	r3, r1
1000c462:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c464:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c466:	e115      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c468:	4a8c      	ldr	r2, [pc, #560]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c46a:	68d3      	ldr	r3, [r2, #12]
1000c46c:	2180      	movs	r1, #128	; 0x80
1000c46e:	03c9      	lsls	r1, r1, #15
1000c470:	430b      	orrs	r3, r1
1000c472:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c474:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c476:	e10d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c478:	4a88      	ldr	r2, [pc, #544]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c47a:	68d3      	ldr	r3, [r2, #12]
1000c47c:	2180      	movs	r1, #128	; 0x80
1000c47e:	0409      	lsls	r1, r1, #16
1000c480:	430b      	orrs	r3, r1
1000c482:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c484:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c486:	e105      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c488:	4a84      	ldr	r2, [pc, #528]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c48a:	68d3      	ldr	r3, [r2, #12]
1000c48c:	2180      	movs	r1, #128	; 0x80
1000c48e:	0449      	lsls	r1, r1, #17
1000c490:	430b      	orrs	r3, r1
1000c492:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c494:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c496:	e0fd      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c498:	4a80      	ldr	r2, [pc, #512]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c49a:	68d3      	ldr	r3, [r2, #12]
1000c49c:	2180      	movs	r1, #128	; 0x80
1000c49e:	0489      	lsls	r1, r1, #18
1000c4a0:	430b      	orrs	r3, r1
1000c4a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c4a6:	e0f5      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4a8:	4a7c      	ldr	r2, [pc, #496]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4aa:	68d3      	ldr	r3, [r2, #12]
1000c4ac:	2180      	movs	r1, #128	; 0x80
1000c4ae:	04c9      	lsls	r1, r1, #19
1000c4b0:	430b      	orrs	r3, r1
1000c4b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c4b6:	e0ed      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4b8:	4a78      	ldr	r2, [pc, #480]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4ba:	68d3      	ldr	r3, [r2, #12]
1000c4bc:	2180      	movs	r1, #128	; 0x80
1000c4be:	0509      	lsls	r1, r1, #20
1000c4c0:	430b      	orrs	r3, r1
1000c4c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c4c6:	e0e5      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4c8:	4a74      	ldr	r2, [pc, #464]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4ca:	68d3      	ldr	r3, [r2, #12]
1000c4cc:	2180      	movs	r1, #128	; 0x80
1000c4ce:	0549      	lsls	r1, r1, #21
1000c4d0:	430b      	orrs	r3, r1
1000c4d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c4d6:	e0dd      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4d8:	4a70      	ldr	r2, [pc, #448]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4da:	68d3      	ldr	r3, [r2, #12]
1000c4dc:	2180      	movs	r1, #128	; 0x80
1000c4de:	0589      	lsls	r1, r1, #22
1000c4e0:	430b      	orrs	r3, r1
1000c4e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c4e6:	e0d5      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4e8:	4a6c      	ldr	r2, [pc, #432]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4ea:	68d3      	ldr	r3, [r2, #12]
1000c4ec:	2180      	movs	r1, #128	; 0x80
1000c4ee:	05c9      	lsls	r1, r1, #23
1000c4f0:	430b      	orrs	r3, r1
1000c4f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c4f6:	e0cd      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c4f8:	4a68      	ldr	r2, [pc, #416]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c4fa:	6911      	ldr	r1, [r2, #16]
1000c4fc:	2301      	movs	r3, #1
1000c4fe:	430b      	orrs	r3, r1
1000c500:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c502:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c504:	e0c6      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c506:	4a65      	ldr	r2, [pc, #404]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c508:	6911      	ldr	r1, [r2, #16]
1000c50a:	2302      	movs	r3, #2
1000c50c:	430b      	orrs	r3, r1
1000c50e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c512:	e0bf      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c514:	4a61      	ldr	r2, [pc, #388]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c516:	6911      	ldr	r1, [r2, #16]
1000c518:	2304      	movs	r3, #4
1000c51a:	430b      	orrs	r3, r1
1000c51c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c51e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c520:	e0b8      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c522:	4a5e      	ldr	r2, [pc, #376]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c524:	6911      	ldr	r1, [r2, #16]
1000c526:	2308      	movs	r3, #8
1000c528:	430b      	orrs	r3, r1
1000c52a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c52c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c52e:	e0b1      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c530:	4a5a      	ldr	r2, [pc, #360]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c532:	6911      	ldr	r1, [r2, #16]
1000c534:	2310      	movs	r3, #16
1000c536:	430b      	orrs	r3, r1
1000c538:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c53a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c53c:	e0aa      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c53e:	4a57      	ldr	r2, [pc, #348]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c540:	6911      	ldr	r1, [r2, #16]
1000c542:	2320      	movs	r3, #32
1000c544:	430b      	orrs	r3, r1
1000c546:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c548:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c54a:	e0a3      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c54c:	4a53      	ldr	r2, [pc, #332]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c54e:	6911      	ldr	r1, [r2, #16]
1000c550:	2340      	movs	r3, #64	; 0x40
1000c552:	430b      	orrs	r3, r1
1000c554:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c556:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c558:	e09c      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c55a:	4a50      	ldr	r2, [pc, #320]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c55c:	6911      	ldr	r1, [r2, #16]
1000c55e:	2380      	movs	r3, #128	; 0x80
1000c560:	430b      	orrs	r3, r1
1000c562:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c566:	e095      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c568:	4a4c      	ldr	r2, [pc, #304]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c56a:	6913      	ldr	r3, [r2, #16]
1000c56c:	2180      	movs	r1, #128	; 0x80
1000c56e:	0049      	lsls	r1, r1, #1
1000c570:	430b      	orrs	r3, r1
1000c572:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c574:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c576:	e08d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c578:	4a48      	ldr	r2, [pc, #288]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c57a:	6913      	ldr	r3, [r2, #16]
1000c57c:	2180      	movs	r1, #128	; 0x80
1000c57e:	0089      	lsls	r1, r1, #2
1000c580:	430b      	orrs	r3, r1
1000c582:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c586:	e085      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c588:	4a44      	ldr	r2, [pc, #272]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c58a:	6913      	ldr	r3, [r2, #16]
1000c58c:	2180      	movs	r1, #128	; 0x80
1000c58e:	00c9      	lsls	r1, r1, #3
1000c590:	430b      	orrs	r3, r1
1000c592:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c594:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c596:	e07d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c598:	4a40      	ldr	r2, [pc, #256]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c59a:	6913      	ldr	r3, [r2, #16]
1000c59c:	2180      	movs	r1, #128	; 0x80
1000c59e:	0109      	lsls	r1, r1, #4
1000c5a0:	430b      	orrs	r3, r1
1000c5a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c5a6:	e075      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5a8:	4a3c      	ldr	r2, [pc, #240]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5aa:	6913      	ldr	r3, [r2, #16]
1000c5ac:	2180      	movs	r1, #128	; 0x80
1000c5ae:	0149      	lsls	r1, r1, #5
1000c5b0:	430b      	orrs	r3, r1
1000c5b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c5b6:	e06d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5b8:	4a38      	ldr	r2, [pc, #224]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5ba:	6913      	ldr	r3, [r2, #16]
1000c5bc:	2180      	movs	r1, #128	; 0x80
1000c5be:	0189      	lsls	r1, r1, #6
1000c5c0:	430b      	orrs	r3, r1
1000c5c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c5c6:	e065      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5c8:	4a34      	ldr	r2, [pc, #208]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5ca:	6913      	ldr	r3, [r2, #16]
1000c5cc:	2180      	movs	r1, #128	; 0x80
1000c5ce:	01c9      	lsls	r1, r1, #7
1000c5d0:	430b      	orrs	r3, r1
1000c5d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c5d6:	e05d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5d8:	4a30      	ldr	r2, [pc, #192]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5da:	6913      	ldr	r3, [r2, #16]
1000c5dc:	2180      	movs	r1, #128	; 0x80
1000c5de:	0209      	lsls	r1, r1, #8
1000c5e0:	430b      	orrs	r3, r1
1000c5e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c5e6:	e055      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5e8:	4a2c      	ldr	r2, [pc, #176]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5ea:	6913      	ldr	r3, [r2, #16]
1000c5ec:	2180      	movs	r1, #128	; 0x80
1000c5ee:	0249      	lsls	r1, r1, #9
1000c5f0:	430b      	orrs	r3, r1
1000c5f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c5f6:	e04d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c5f8:	4a28      	ldr	r2, [pc, #160]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c5fa:	6913      	ldr	r3, [r2, #16]
1000c5fc:	2180      	movs	r1, #128	; 0x80
1000c5fe:	0289      	lsls	r1, r1, #10
1000c600:	430b      	orrs	r3, r1
1000c602:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c606:	e045      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c608:	4a24      	ldr	r2, [pc, #144]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c60a:	6913      	ldr	r3, [r2, #16]
1000c60c:	2180      	movs	r1, #128	; 0x80
1000c60e:	02c9      	lsls	r1, r1, #11
1000c610:	430b      	orrs	r3, r1
1000c612:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c614:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c616:	e03d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c618:	4a20      	ldr	r2, [pc, #128]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c61a:	6913      	ldr	r3, [r2, #16]
1000c61c:	2180      	movs	r1, #128	; 0x80
1000c61e:	0309      	lsls	r1, r1, #12
1000c620:	430b      	orrs	r3, r1
1000c622:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c624:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c626:	e035      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c628:	4a1c      	ldr	r2, [pc, #112]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c62a:	6913      	ldr	r3, [r2, #16]
1000c62c:	2180      	movs	r1, #128	; 0x80
1000c62e:	0349      	lsls	r1, r1, #13
1000c630:	430b      	orrs	r3, r1
1000c632:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c634:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c636:	e02d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c638:	4a18      	ldr	r2, [pc, #96]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c63a:	6913      	ldr	r3, [r2, #16]
1000c63c:	2180      	movs	r1, #128	; 0x80
1000c63e:	0389      	lsls	r1, r1, #14
1000c640:	430b      	orrs	r3, r1
1000c642:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c644:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c646:	e025      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c648:	4a14      	ldr	r2, [pc, #80]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c64a:	6913      	ldr	r3, [r2, #16]
1000c64c:	2180      	movs	r1, #128	; 0x80
1000c64e:	03c9      	lsls	r1, r1, #15
1000c650:	430b      	orrs	r3, r1
1000c652:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c654:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c656:	e01d      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c658:	4a10      	ldr	r2, [pc, #64]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c65a:	6913      	ldr	r3, [r2, #16]
1000c65c:	2180      	movs	r1, #128	; 0x80
1000c65e:	0409      	lsls	r1, r1, #16
1000c660:	430b      	orrs	r3, r1
1000c662:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c664:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c666:	e015      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c668:	4a0c      	ldr	r2, [pc, #48]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c66a:	7d11      	ldrb	r1, [r2, #20]
1000c66c:	2301      	movs	r3, #1
1000c66e:	430b      	orrs	r3, r1
1000c670:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c672:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c674:	e00e      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c676:	4a09      	ldr	r2, [pc, #36]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c678:	7d11      	ldrb	r1, [r2, #20]
1000c67a:	2302      	movs	r3, #2
1000c67c:	430b      	orrs	r3, r1
1000c67e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c682:	e007      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c684:	4a05      	ldr	r2, [pc, #20]	; (1000c69c <system_clock_peripheral_enable+0x358>)
1000c686:	7d11      	ldrb	r1, [r2, #20]
1000c688:	2304      	movs	r3, #4
1000c68a:	430b      	orrs	r3, r1
1000c68c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c68e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c690:	e000      	b.n	1000c694 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c692:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c694:	bd00      	pop	{pc}
1000c696:	46c0      	nop			; (mov r8, r8)
1000c698:	100131dc 	.word	0x100131dc
1000c69c:	4000b000 	.word	0x4000b000

1000c6a0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c6a0:	b500      	push	{lr}
	switch (peripheral) {
1000c6a2:	2843      	cmp	r0, #67	; 0x43
1000c6a4:	d900      	bls.n	1000c6a8 <system_peripheral_reset+0x8>
1000c6a6:	e223      	b.n	1000caf0 <system_peripheral_reset+0x450>
1000c6a8:	0080      	lsls	r0, r0, #2
1000c6aa:	4be0      	ldr	r3, [pc, #896]	; (1000ca2c <system_peripheral_reset+0x38c>)
1000c6ac:	581b      	ldr	r3, [r3, r0]
1000c6ae:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6b0:	4bdf      	ldr	r3, [pc, #892]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c6b2:	6859      	ldr	r1, [r3, #4]
1000c6b4:	2202      	movs	r2, #2
1000c6b6:	4391      	bics	r1, r2
1000c6b8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6ba:	6859      	ldr	r1, [r3, #4]
1000c6bc:	430a      	orrs	r2, r1
1000c6be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c6c2:	e216      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6c4:	4bda      	ldr	r3, [pc, #872]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c6c6:	6859      	ldr	r1, [r3, #4]
1000c6c8:	2204      	movs	r2, #4
1000c6ca:	4391      	bics	r1, r2
1000c6cc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6ce:	6859      	ldr	r1, [r3, #4]
1000c6d0:	430a      	orrs	r2, r1
1000c6d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c6d6:	e20c      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6d8:	4bd5      	ldr	r3, [pc, #852]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c6da:	6859      	ldr	r1, [r3, #4]
1000c6dc:	2208      	movs	r2, #8
1000c6de:	4391      	bics	r1, r2
1000c6e0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6e2:	6859      	ldr	r1, [r3, #4]
1000c6e4:	430a      	orrs	r2, r1
1000c6e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c6ea:	e202      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ec:	4bd0      	ldr	r3, [pc, #832]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c6ee:	6859      	ldr	r1, [r3, #4]
1000c6f0:	2210      	movs	r2, #16
1000c6f2:	4391      	bics	r1, r2
1000c6f4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6f6:	6859      	ldr	r1, [r3, #4]
1000c6f8:	430a      	orrs	r2, r1
1000c6fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c6fe:	e1f8      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c700:	4bcb      	ldr	r3, [pc, #812]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c702:	6859      	ldr	r1, [r3, #4]
1000c704:	2220      	movs	r2, #32
1000c706:	4391      	bics	r1, r2
1000c708:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c70a:	6859      	ldr	r1, [r3, #4]
1000c70c:	430a      	orrs	r2, r1
1000c70e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c710:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c712:	e1ee      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c714:	4bc6      	ldr	r3, [pc, #792]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c716:	6859      	ldr	r1, [r3, #4]
1000c718:	2240      	movs	r2, #64	; 0x40
1000c71a:	4391      	bics	r1, r2
1000c71c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c71e:	6859      	ldr	r1, [r3, #4]
1000c720:	430a      	orrs	r2, r1
1000c722:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c724:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c726:	e1e4      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c728:	4bc1      	ldr	r3, [pc, #772]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c72a:	6859      	ldr	r1, [r3, #4]
1000c72c:	2280      	movs	r2, #128	; 0x80
1000c72e:	4391      	bics	r1, r2
1000c730:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c732:	6859      	ldr	r1, [r3, #4]
1000c734:	430a      	orrs	r2, r1
1000c736:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c738:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c73a:	e1da      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c73c:	4bbc      	ldr	r3, [pc, #752]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c73e:	6859      	ldr	r1, [r3, #4]
1000c740:	4abc      	ldr	r2, [pc, #752]	; (1000ca34 <system_peripheral_reset+0x394>)
1000c742:	400a      	ands	r2, r1
1000c744:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c746:	685a      	ldr	r2, [r3, #4]
1000c748:	2180      	movs	r1, #128	; 0x80
1000c74a:	0049      	lsls	r1, r1, #1
1000c74c:	430a      	orrs	r2, r1
1000c74e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c750:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c752:	e1ce      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c754:	4bb6      	ldr	r3, [pc, #728]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c756:	6859      	ldr	r1, [r3, #4]
1000c758:	4ab7      	ldr	r2, [pc, #732]	; (1000ca38 <system_peripheral_reset+0x398>)
1000c75a:	400a      	ands	r2, r1
1000c75c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c75e:	685a      	ldr	r2, [r3, #4]
1000c760:	2180      	movs	r1, #128	; 0x80
1000c762:	0089      	lsls	r1, r1, #2
1000c764:	430a      	orrs	r2, r1
1000c766:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c768:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c76a:	e1c2      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c76c:	4bb0      	ldr	r3, [pc, #704]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c76e:	6859      	ldr	r1, [r3, #4]
1000c770:	4ab2      	ldr	r2, [pc, #712]	; (1000ca3c <system_peripheral_reset+0x39c>)
1000c772:	400a      	ands	r2, r1
1000c774:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c776:	685a      	ldr	r2, [r3, #4]
1000c778:	2180      	movs	r1, #128	; 0x80
1000c77a:	00c9      	lsls	r1, r1, #3
1000c77c:	430a      	orrs	r2, r1
1000c77e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c780:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c782:	e1b6      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c784:	4baa      	ldr	r3, [pc, #680]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c786:	6859      	ldr	r1, [r3, #4]
1000c788:	4aad      	ldr	r2, [pc, #692]	; (1000ca40 <system_peripheral_reset+0x3a0>)
1000c78a:	400a      	ands	r2, r1
1000c78c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c78e:	685a      	ldr	r2, [r3, #4]
1000c790:	2180      	movs	r1, #128	; 0x80
1000c792:	0109      	lsls	r1, r1, #4
1000c794:	430a      	orrs	r2, r1
1000c796:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c798:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c79a:	e1aa      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c79c:	4ba4      	ldr	r3, [pc, #656]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c79e:	6859      	ldr	r1, [r3, #4]
1000c7a0:	4aa8      	ldr	r2, [pc, #672]	; (1000ca44 <system_peripheral_reset+0x3a4>)
1000c7a2:	400a      	ands	r2, r1
1000c7a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7a6:	685a      	ldr	r2, [r3, #4]
1000c7a8:	2180      	movs	r1, #128	; 0x80
1000c7aa:	0149      	lsls	r1, r1, #5
1000c7ac:	430a      	orrs	r2, r1
1000c7ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c7b2:	e19e      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7b4:	4b9e      	ldr	r3, [pc, #632]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c7b6:	6859      	ldr	r1, [r3, #4]
1000c7b8:	4aa3      	ldr	r2, [pc, #652]	; (1000ca48 <system_peripheral_reset+0x3a8>)
1000c7ba:	400a      	ands	r2, r1
1000c7bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7be:	685a      	ldr	r2, [r3, #4]
1000c7c0:	2180      	movs	r1, #128	; 0x80
1000c7c2:	0189      	lsls	r1, r1, #6
1000c7c4:	430a      	orrs	r2, r1
1000c7c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c7ca:	e192      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7cc:	4b98      	ldr	r3, [pc, #608]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c7ce:	6859      	ldr	r1, [r3, #4]
1000c7d0:	4a9e      	ldr	r2, [pc, #632]	; (1000ca4c <system_peripheral_reset+0x3ac>)
1000c7d2:	400a      	ands	r2, r1
1000c7d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7d6:	685a      	ldr	r2, [r3, #4]
1000c7d8:	2180      	movs	r1, #128	; 0x80
1000c7da:	01c9      	lsls	r1, r1, #7
1000c7dc:	430a      	orrs	r2, r1
1000c7de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c7e2:	e186      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7e4:	4b92      	ldr	r3, [pc, #584]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c7e6:	6859      	ldr	r1, [r3, #4]
1000c7e8:	4a99      	ldr	r2, [pc, #612]	; (1000ca50 <system_peripheral_reset+0x3b0>)
1000c7ea:	400a      	ands	r2, r1
1000c7ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7ee:	685a      	ldr	r2, [r3, #4]
1000c7f0:	2180      	movs	r1, #128	; 0x80
1000c7f2:	0209      	lsls	r1, r1, #8
1000c7f4:	430a      	orrs	r2, r1
1000c7f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c7fa:	e17a      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7fc:	4b8c      	ldr	r3, [pc, #560]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c7fe:	6859      	ldr	r1, [r3, #4]
1000c800:	4a94      	ldr	r2, [pc, #592]	; (1000ca54 <system_peripheral_reset+0x3b4>)
1000c802:	400a      	ands	r2, r1
1000c804:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c806:	685a      	ldr	r2, [r3, #4]
1000c808:	2180      	movs	r1, #128	; 0x80
1000c80a:	0249      	lsls	r1, r1, #9
1000c80c:	430a      	orrs	r2, r1
1000c80e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c810:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c812:	e16e      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c814:	4b86      	ldr	r3, [pc, #536]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c816:	6859      	ldr	r1, [r3, #4]
1000c818:	4a8f      	ldr	r2, [pc, #572]	; (1000ca58 <system_peripheral_reset+0x3b8>)
1000c81a:	400a      	ands	r2, r1
1000c81c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c81e:	685a      	ldr	r2, [r3, #4]
1000c820:	2180      	movs	r1, #128	; 0x80
1000c822:	0289      	lsls	r1, r1, #10
1000c824:	430a      	orrs	r2, r1
1000c826:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c828:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c82a:	e162      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c82c:	4b80      	ldr	r3, [pc, #512]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c82e:	6859      	ldr	r1, [r3, #4]
1000c830:	4a8a      	ldr	r2, [pc, #552]	; (1000ca5c <system_peripheral_reset+0x3bc>)
1000c832:	400a      	ands	r2, r1
1000c834:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c836:	685a      	ldr	r2, [r3, #4]
1000c838:	2180      	movs	r1, #128	; 0x80
1000c83a:	02c9      	lsls	r1, r1, #11
1000c83c:	430a      	orrs	r2, r1
1000c83e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c840:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c842:	e156      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c844:	4b7a      	ldr	r3, [pc, #488]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c846:	6859      	ldr	r1, [r3, #4]
1000c848:	4a85      	ldr	r2, [pc, #532]	; (1000ca60 <system_peripheral_reset+0x3c0>)
1000c84a:	400a      	ands	r2, r1
1000c84c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c84e:	685a      	ldr	r2, [r3, #4]
1000c850:	2180      	movs	r1, #128	; 0x80
1000c852:	0309      	lsls	r1, r1, #12
1000c854:	430a      	orrs	r2, r1
1000c856:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c858:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c85a:	e14a      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c85c:	4b74      	ldr	r3, [pc, #464]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c85e:	6859      	ldr	r1, [r3, #4]
1000c860:	4a80      	ldr	r2, [pc, #512]	; (1000ca64 <system_peripheral_reset+0x3c4>)
1000c862:	400a      	ands	r2, r1
1000c864:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c866:	685a      	ldr	r2, [r3, #4]
1000c868:	2180      	movs	r1, #128	; 0x80
1000c86a:	0349      	lsls	r1, r1, #13
1000c86c:	430a      	orrs	r2, r1
1000c86e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c870:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c872:	e13e      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c874:	4b6e      	ldr	r3, [pc, #440]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c876:	6859      	ldr	r1, [r3, #4]
1000c878:	4a7b      	ldr	r2, [pc, #492]	; (1000ca68 <system_peripheral_reset+0x3c8>)
1000c87a:	400a      	ands	r2, r1
1000c87c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c87e:	685a      	ldr	r2, [r3, #4]
1000c880:	2180      	movs	r1, #128	; 0x80
1000c882:	0389      	lsls	r1, r1, #14
1000c884:	430a      	orrs	r2, r1
1000c886:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c888:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c88a:	e132      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c88c:	4b68      	ldr	r3, [pc, #416]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c88e:	6859      	ldr	r1, [r3, #4]
1000c890:	4a76      	ldr	r2, [pc, #472]	; (1000ca6c <system_peripheral_reset+0x3cc>)
1000c892:	400a      	ands	r2, r1
1000c894:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c896:	685a      	ldr	r2, [r3, #4]
1000c898:	2180      	movs	r1, #128	; 0x80
1000c89a:	03c9      	lsls	r1, r1, #15
1000c89c:	430a      	orrs	r2, r1
1000c89e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c8a2:	e126      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8a4:	4b62      	ldr	r3, [pc, #392]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c8a6:	6859      	ldr	r1, [r3, #4]
1000c8a8:	4a71      	ldr	r2, [pc, #452]	; (1000ca70 <system_peripheral_reset+0x3d0>)
1000c8aa:	400a      	ands	r2, r1
1000c8ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8ae:	685a      	ldr	r2, [r3, #4]
1000c8b0:	2180      	movs	r1, #128	; 0x80
1000c8b2:	0409      	lsls	r1, r1, #16
1000c8b4:	430a      	orrs	r2, r1
1000c8b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c8ba:	e11a      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8bc:	4b5c      	ldr	r3, [pc, #368]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c8be:	6859      	ldr	r1, [r3, #4]
1000c8c0:	4a6c      	ldr	r2, [pc, #432]	; (1000ca74 <system_peripheral_reset+0x3d4>)
1000c8c2:	400a      	ands	r2, r1
1000c8c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8c6:	685a      	ldr	r2, [r3, #4]
1000c8c8:	2180      	movs	r1, #128	; 0x80
1000c8ca:	0449      	lsls	r1, r1, #17
1000c8cc:	430a      	orrs	r2, r1
1000c8ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c8d2:	e10e      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8d4:	4b56      	ldr	r3, [pc, #344]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c8d6:	6859      	ldr	r1, [r3, #4]
1000c8d8:	4a67      	ldr	r2, [pc, #412]	; (1000ca78 <system_peripheral_reset+0x3d8>)
1000c8da:	400a      	ands	r2, r1
1000c8dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8de:	685a      	ldr	r2, [r3, #4]
1000c8e0:	2180      	movs	r1, #128	; 0x80
1000c8e2:	0489      	lsls	r1, r1, #18
1000c8e4:	430a      	orrs	r2, r1
1000c8e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c8ea:	e102      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8ec:	4b50      	ldr	r3, [pc, #320]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c8ee:	6859      	ldr	r1, [r3, #4]
1000c8f0:	4a62      	ldr	r2, [pc, #392]	; (1000ca7c <system_peripheral_reset+0x3dc>)
1000c8f2:	400a      	ands	r2, r1
1000c8f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8f6:	685a      	ldr	r2, [r3, #4]
1000c8f8:	2180      	movs	r1, #128	; 0x80
1000c8fa:	04c9      	lsls	r1, r1, #19
1000c8fc:	430a      	orrs	r2, r1
1000c8fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c900:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c902:	e0f6      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c904:	4b4a      	ldr	r3, [pc, #296]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c906:	6859      	ldr	r1, [r3, #4]
1000c908:	4a5d      	ldr	r2, [pc, #372]	; (1000ca80 <system_peripheral_reset+0x3e0>)
1000c90a:	400a      	ands	r2, r1
1000c90c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c90e:	685a      	ldr	r2, [r3, #4]
1000c910:	2180      	movs	r1, #128	; 0x80
1000c912:	0509      	lsls	r1, r1, #20
1000c914:	430a      	orrs	r2, r1
1000c916:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c918:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c91a:	e0ea      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c91c:	4b44      	ldr	r3, [pc, #272]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c91e:	6859      	ldr	r1, [r3, #4]
1000c920:	4a58      	ldr	r2, [pc, #352]	; (1000ca84 <system_peripheral_reset+0x3e4>)
1000c922:	400a      	ands	r2, r1
1000c924:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c926:	685a      	ldr	r2, [r3, #4]
1000c928:	2180      	movs	r1, #128	; 0x80
1000c92a:	0549      	lsls	r1, r1, #21
1000c92c:	430a      	orrs	r2, r1
1000c92e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c930:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c932:	e0de      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c934:	4b3e      	ldr	r3, [pc, #248]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c936:	6859      	ldr	r1, [r3, #4]
1000c938:	4a53      	ldr	r2, [pc, #332]	; (1000ca88 <system_peripheral_reset+0x3e8>)
1000c93a:	400a      	ands	r2, r1
1000c93c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c93e:	685a      	ldr	r2, [r3, #4]
1000c940:	2180      	movs	r1, #128	; 0x80
1000c942:	0589      	lsls	r1, r1, #22
1000c944:	430a      	orrs	r2, r1
1000c946:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c948:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c94a:	e0d2      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c94c:	4b38      	ldr	r3, [pc, #224]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c94e:	6859      	ldr	r1, [r3, #4]
1000c950:	4a4e      	ldr	r2, [pc, #312]	; (1000ca8c <system_peripheral_reset+0x3ec>)
1000c952:	400a      	ands	r2, r1
1000c954:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c956:	685a      	ldr	r2, [r3, #4]
1000c958:	2180      	movs	r1, #128	; 0x80
1000c95a:	05c9      	lsls	r1, r1, #23
1000c95c:	430a      	orrs	r2, r1
1000c95e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c960:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c962:	e0c6      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c964:	4a32      	ldr	r2, [pc, #200]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c966:	6853      	ldr	r3, [r2, #4]
1000c968:	005b      	lsls	r3, r3, #1
1000c96a:	085b      	lsrs	r3, r3, #1
1000c96c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c96e:	6853      	ldr	r3, [r2, #4]
1000c970:	2180      	movs	r1, #128	; 0x80
1000c972:	0609      	lsls	r1, r1, #24
1000c974:	430b      	orrs	r3, r1
1000c976:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c978:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c97a:	e0ba      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c97c:	4b2c      	ldr	r3, [pc, #176]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c97e:	891a      	ldrh	r2, [r3, #8]
1000c980:	2101      	movs	r1, #1
1000c982:	438a      	bics	r2, r1
1000c984:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c986:	8919      	ldrh	r1, [r3, #8]
1000c988:	2201      	movs	r2, #1
1000c98a:	430a      	orrs	r2, r1
1000c98c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c98e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c990:	e0af      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c992:	4b27      	ldr	r3, [pc, #156]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c994:	891a      	ldrh	r2, [r3, #8]
1000c996:	2102      	movs	r1, #2
1000c998:	438a      	bics	r2, r1
1000c99a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c99c:	8919      	ldrh	r1, [r3, #8]
1000c99e:	2202      	movs	r2, #2
1000c9a0:	430a      	orrs	r2, r1
1000c9a2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c9a6:	e0a4      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c9a8:	4b21      	ldr	r3, [pc, #132]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c9aa:	891a      	ldrh	r2, [r3, #8]
1000c9ac:	2104      	movs	r1, #4
1000c9ae:	438a      	bics	r2, r1
1000c9b0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9b2:	8919      	ldrh	r1, [r3, #8]
1000c9b4:	2204      	movs	r2, #4
1000c9b6:	430a      	orrs	r2, r1
1000c9b8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ba:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c9bc:	e099      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c9be:	4b1c      	ldr	r3, [pc, #112]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c9c0:	891a      	ldrh	r2, [r3, #8]
1000c9c2:	2108      	movs	r1, #8
1000c9c4:	438a      	bics	r2, r1
1000c9c6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9c8:	8919      	ldrh	r1, [r3, #8]
1000c9ca:	2208      	movs	r2, #8
1000c9cc:	430a      	orrs	r2, r1
1000c9ce:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9d0:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c9d2:	e08e      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c9d4:	4b16      	ldr	r3, [pc, #88]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c9d6:	891a      	ldrh	r2, [r3, #8]
1000c9d8:	2110      	movs	r1, #16
1000c9da:	438a      	bics	r2, r1
1000c9dc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9de:	8919      	ldrh	r1, [r3, #8]
1000c9e0:	2210      	movs	r2, #16
1000c9e2:	430a      	orrs	r2, r1
1000c9e4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9e6:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c9e8:	e083      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c9ea:	4b11      	ldr	r3, [pc, #68]	; (1000ca30 <system_peripheral_reset+0x390>)
1000c9ec:	891a      	ldrh	r2, [r3, #8]
1000c9ee:	2120      	movs	r1, #32
1000c9f0:	438a      	bics	r2, r1
1000c9f2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9f4:	8919      	ldrh	r1, [r3, #8]
1000c9f6:	2220      	movs	r2, #32
1000c9f8:	430a      	orrs	r2, r1
1000c9fa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9fc:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c9fe:	e078      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca00:	4b0b      	ldr	r3, [pc, #44]	; (1000ca30 <system_peripheral_reset+0x390>)
1000ca02:	891a      	ldrh	r2, [r3, #8]
1000ca04:	2140      	movs	r1, #64	; 0x40
1000ca06:	438a      	bics	r2, r1
1000ca08:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca0a:	8919      	ldrh	r1, [r3, #8]
1000ca0c:	2240      	movs	r2, #64	; 0x40
1000ca0e:	430a      	orrs	r2, r1
1000ca10:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca12:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000ca14:	e06d      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca16:	4b06      	ldr	r3, [pc, #24]	; (1000ca30 <system_peripheral_reset+0x390>)
1000ca18:	891a      	ldrh	r2, [r3, #8]
1000ca1a:	2180      	movs	r1, #128	; 0x80
1000ca1c:	438a      	bics	r2, r1
1000ca1e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca20:	8919      	ldrh	r1, [r3, #8]
1000ca22:	2280      	movs	r2, #128	; 0x80
1000ca24:	430a      	orrs	r2, r1
1000ca26:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca28:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000ca2a:	e062      	b.n	1000caf2 <system_peripheral_reset+0x452>
1000ca2c:	100132b4 	.word	0x100132b4
1000ca30:	4000b000 	.word	0x4000b000
1000ca34:	fffffeff 	.word	0xfffffeff
1000ca38:	fffffdff 	.word	0xfffffdff
1000ca3c:	fffffbff 	.word	0xfffffbff
1000ca40:	fffff7ff 	.word	0xfffff7ff
1000ca44:	ffffefff 	.word	0xffffefff
1000ca48:	ffffdfff 	.word	0xffffdfff
1000ca4c:	ffffbfff 	.word	0xffffbfff
1000ca50:	ffff7fff 	.word	0xffff7fff
1000ca54:	fffeffff 	.word	0xfffeffff
1000ca58:	fffdffff 	.word	0xfffdffff
1000ca5c:	fffbffff 	.word	0xfffbffff
1000ca60:	fff7ffff 	.word	0xfff7ffff
1000ca64:	ffefffff 	.word	0xffefffff
1000ca68:	ffdfffff 	.word	0xffdfffff
1000ca6c:	ffbfffff 	.word	0xffbfffff
1000ca70:	ff7fffff 	.word	0xff7fffff
1000ca74:	feffffff 	.word	0xfeffffff
1000ca78:	fdffffff 	.word	0xfdffffff
1000ca7c:	fbffffff 	.word	0xfbffffff
1000ca80:	f7ffffff 	.word	0xf7ffffff
1000ca84:	efffffff 	.word	0xefffffff
1000ca88:	dfffffff 	.word	0xdfffffff
1000ca8c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca90:	4b18      	ldr	r3, [pc, #96]	; (1000caf4 <system_peripheral_reset+0x454>)
1000ca92:	8919      	ldrh	r1, [r3, #8]
1000ca94:	4a18      	ldr	r2, [pc, #96]	; (1000caf8 <system_peripheral_reset+0x458>)
1000ca96:	400a      	ands	r2, r1
1000ca98:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca9a:	8919      	ldrh	r1, [r3, #8]
1000ca9c:	2280      	movs	r2, #128	; 0x80
1000ca9e:	0052      	lsls	r2, r2, #1
1000caa0:	430a      	orrs	r2, r1
1000caa2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000caa6:	e024      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000caa8:	4b12      	ldr	r3, [pc, #72]	; (1000caf4 <system_peripheral_reset+0x454>)
1000caaa:	8919      	ldrh	r1, [r3, #8]
1000caac:	4a13      	ldr	r2, [pc, #76]	; (1000cafc <system_peripheral_reset+0x45c>)
1000caae:	400a      	ands	r2, r1
1000cab0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cab2:	8919      	ldrh	r1, [r3, #8]
1000cab4:	2280      	movs	r2, #128	; 0x80
1000cab6:	0092      	lsls	r2, r2, #2
1000cab8:	430a      	orrs	r2, r1
1000caba:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cabc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cabe:	e018      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cac0:	4b0c      	ldr	r3, [pc, #48]	; (1000caf4 <system_peripheral_reset+0x454>)
1000cac2:	8919      	ldrh	r1, [r3, #8]
1000cac4:	4a0e      	ldr	r2, [pc, #56]	; (1000cb00 <system_peripheral_reset+0x460>)
1000cac6:	400a      	ands	r2, r1
1000cac8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000caca:	8919      	ldrh	r1, [r3, #8]
1000cacc:	2280      	movs	r2, #128	; 0x80
1000cace:	00d2      	lsls	r2, r2, #3
1000cad0:	430a      	orrs	r2, r1
1000cad2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cad6:	e00c      	b.n	1000caf2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cad8:	4b06      	ldr	r3, [pc, #24]	; (1000caf4 <system_peripheral_reset+0x454>)
1000cada:	8919      	ldrh	r1, [r3, #8]
1000cadc:	4a09      	ldr	r2, [pc, #36]	; (1000cb04 <system_peripheral_reset+0x464>)
1000cade:	400a      	ands	r2, r1
1000cae0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cae2:	8919      	ldrh	r1, [r3, #8]
1000cae4:	2280      	movs	r2, #128	; 0x80
1000cae6:	0112      	lsls	r2, r2, #4
1000cae8:	430a      	orrs	r2, r1
1000caea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caec:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000caee:	e000      	b.n	1000caf2 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000caf0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000caf2:	bd00      	pop	{pc}
1000caf4:	4000b000 	.word	0x4000b000
1000caf8:	fffffeff 	.word	0xfffffeff
1000cafc:	fffffdff 	.word	0xfffffdff
1000cb00:	fffffbff 	.word	0xfffffbff
1000cb04:	fffff7ff 	.word	0xfffff7ff

1000cb08 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000cb08:	2380      	movs	r3, #128	; 0x80
1000cb0a:	04db      	lsls	r3, r3, #19
1000cb0c:	469c      	mov	ip, r3
1000cb0e:	4460      	add	r0, ip
1000cb10:	0080      	lsls	r0, r0, #2
1000cb12:	6001      	str	r1, [r0, #0]
}
1000cb14:	4770      	bx	lr
1000cb16:	46c0      	nop			; (mov r8, r8)

1000cb18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000cb18:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000cb1a:	4a06      	ldr	r2, [pc, #24]	; (1000cb34 <_sbrk+0x1c>)
1000cb1c:	6812      	ldr	r2, [r2, #0]
1000cb1e:	2a00      	cmp	r2, #0
1000cb20:	d102      	bne.n	1000cb28 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000cb22:	4905      	ldr	r1, [pc, #20]	; (1000cb38 <_sbrk+0x20>)
1000cb24:	4a03      	ldr	r2, [pc, #12]	; (1000cb34 <_sbrk+0x1c>)
1000cb26:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000cb28:	4a02      	ldr	r2, [pc, #8]	; (1000cb34 <_sbrk+0x1c>)
1000cb2a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000cb2c:	18c3      	adds	r3, r0, r3
1000cb2e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000cb30:	4770      	bx	lr
1000cb32:	46c0      	nop			; (mov r8, r8)
1000cb34:	10014b80 	.word	0x10014b80
1000cb38:	10016668 	.word	0x10016668

1000cb3c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000cb3c:	2001      	movs	r0, #1
1000cb3e:	4240      	negs	r0, r0
1000cb40:	4770      	bx	lr
1000cb42:	46c0      	nop			; (mov r8, r8)

1000cb44 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000cb44:	2380      	movs	r3, #128	; 0x80
1000cb46:	019b      	lsls	r3, r3, #6
1000cb48:	604b      	str	r3, [r1, #4]

	return 0;
}
1000cb4a:	2000      	movs	r0, #0
1000cb4c:	4770      	bx	lr
1000cb4e:	46c0      	nop			; (mov r8, r8)

1000cb50 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000cb50:	2001      	movs	r0, #1
1000cb52:	4770      	bx	lr

1000cb54 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000cb54:	2000      	movs	r0, #0
1000cb56:	4770      	bx	lr

1000cb58 <interrupt_cb>:
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000cb58:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000cb5a:	2201      	movs	r2, #1
1000cb5c:	4b04      	ldr	r3, [pc, #16]	; (1000cb70 <interrupt_cb+0x18>)
1000cb5e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000cb60:	2300      	movs	r3, #0
1000cb62:	2200      	movs	r2, #0
1000cb64:	2102      	movs	r1, #2
1000cb66:	201d      	movs	r0, #29
1000cb68:	4c02      	ldr	r4, [pc, #8]	; (1000cb74 <interrupt_cb+0x1c>)
1000cb6a:	47a0      	blx	r4
}
1000cb6c:	bd10      	pop	{r4, pc}
1000cb6e:	46c0      	nop			; (mov r8, r8)
1000cb70:	10014b84 	.word	0x10014b84
1000cb74:	1000b119 	.word	0x1000b119

1000cb78 <configure_i2c_master>:
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000cb78:	b530      	push	{r4, r5, lr}
1000cb7a:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000cb7c:	2010      	movs	r0, #16
1000cb7e:	4c14      	ldr	r4, [pc, #80]	; (1000cbd0 <configure_i2c_master+0x58>)
1000cb80:	47a0      	blx	r4
1000cb82:	4b14      	ldr	r3, [pc, #80]	; (1000cbd4 <configure_i2c_master+0x5c>)
1000cb84:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000cb86:	2010      	movs	r0, #16
1000cb88:	47a0      	blx	r4
1000cb8a:	4b13      	ldr	r3, [pc, #76]	; (1000cbd8 <configure_i2c_master+0x60>)
1000cb8c:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000cb8e:	ac01      	add	r4, sp, #4
1000cb90:	0020      	movs	r0, r4
1000cb92:	4b12      	ldr	r3, [pc, #72]	; (1000cbdc <configure_i2c_master+0x64>)
1000cb94:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000cb96:	2300      	movs	r3, #0
1000cb98:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000cb9a:	3341      	adds	r3, #65	; 0x41
1000cb9c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000cb9e:	3b39      	subs	r3, #57	; 0x39
1000cba0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000cba2:	3301      	adds	r3, #1
1000cba4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000cba6:	3b07      	subs	r3, #7
1000cba8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000cbaa:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000cbac:	4d0c      	ldr	r5, [pc, #48]	; (1000cbe0 <configure_i2c_master+0x68>)
1000cbae:	4c0d      	ldr	r4, [pc, #52]	; (1000cbe4 <configure_i2c_master+0x6c>)
1000cbb0:	aa01      	add	r2, sp, #4
1000cbb2:	490d      	ldr	r1, [pc, #52]	; (1000cbe8 <configure_i2c_master+0x70>)
1000cbb4:	0028      	movs	r0, r5
1000cbb6:	47a0      	blx	r4
1000cbb8:	2800      	cmp	r0, #0
1000cbba:	d1f9      	bne.n	1000cbb0 <configure_i2c_master+0x38>
	
	i2c_enable(i2c_master_instance.hw);
1000cbbc:	4b08      	ldr	r3, [pc, #32]	; (1000cbe0 <configure_i2c_master+0x68>)
1000cbbe:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000cbc0:	2128      	movs	r1, #40	; 0x28
1000cbc2:	5c53      	ldrb	r3, [r2, r1]
1000cbc4:	07db      	lsls	r3, r3, #31
1000cbc6:	d4fc      	bmi.n	1000cbc2 <configure_i2c_master+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000cbc8:	2301      	movs	r3, #1
1000cbca:	7513      	strb	r3, [r2, #20]
}
1000cbcc:	b007      	add	sp, #28
1000cbce:	bd30      	pop	{r4, r5, pc}
1000cbd0:	1001131d 	.word	0x1001131d
1000cbd4:	10014c68 	.word	0x10014c68
1000cbd8:	10014c58 	.word	0x10014c58
1000cbdc:	1000c1ad 	.word	0x1000c1ad
1000cbe0:	10014c60 	.word	0x10014c60
1000cbe4:	1000c1c5 	.word	0x1000c1c5
1000cbe8:	40003000 	.word	0x40003000

1000cbec <init_dualtimer>:

void init_dualtimer(void)
{
1000cbec:	b510      	push	{r4, lr}
1000cbee:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000cbf0:	ac01      	add	r4, sp, #4
1000cbf2:	0020      	movs	r0, r4
1000cbf4:	4b06      	ldr	r3, [pc, #24]	; (1000cc10 <init_dualtimer+0x24>)
1000cbf6:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000cbf8:	4b06      	ldr	r3, [pc, #24]	; (1000cc14 <init_dualtimer+0x28>)
1000cbfa:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000cbfc:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000cbfe:	2300      	movs	r3, #0
1000cc00:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000cc02:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000cc04:	0020      	movs	r0, r4
1000cc06:	4b04      	ldr	r3, [pc, #16]	; (1000cc18 <init_dualtimer+0x2c>)
1000cc08:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000cc0a:	b008      	add	sp, #32
1000cc0c:	bd10      	pop	{r4, pc}
1000cc0e:	46c0      	nop			; (mov r8, r8)
1000cc10:	10008199 	.word	0x10008199
1000cc14:	00006590 	.word	0x00006590
1000cc18:	100081e1 	.word	0x100081e1

1000cc1c <main>:
    //int res;
    //res = dmp_read_fifo(gyro, accel_short, quaternion, &timestamp, &sensors, &more);
}

int main(void)
{
1000cc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc1e:	b085      	sub	sp, #20
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000cc20:	4b2c      	ldr	r3, [pc, #176]	; (1000ccd4 <main+0xb8>)
1000cc22:	4798      	blx	r3
    gpio_init();
1000cc24:	4b2c      	ldr	r3, [pc, #176]	; (1000ccd8 <main+0xbc>)
1000cc26:	4798      	blx	r3
    acquire_sleep_lock();
1000cc28:	4b2c      	ldr	r3, [pc, #176]	; (1000ccdc <main+0xc0>)
1000cc2a:	4798      	blx	r3
    serial_console_init();
1000cc2c:	4b2c      	ldr	r3, [pc, #176]	; (1000cce0 <main+0xc4>)
1000cc2e:	4798      	blx	r3
    ble_device_init(NULL);
1000cc30:	2000      	movs	r0, #0
1000cc32:	4b2c      	ldr	r3, [pc, #176]	; (1000cce4 <main+0xc8>)
1000cc34:	4798      	blx	r3

    init_dualtimer();
1000cc36:	4b2c      	ldr	r3, [pc, #176]	; (1000cce8 <main+0xcc>)
1000cc38:	4798      	blx	r3
    delay_init();
1000cc3a:	4b2c      	ldr	r3, [pc, #176]	; (1000ccec <main+0xd0>)
1000cc3c:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000cc3e:	ac01      	add	r4, sp, #4
1000cc40:	0020      	movs	r0, r4
1000cc42:	4b2b      	ldr	r3, [pc, #172]	; (1000ccf0 <main+0xd4>)
1000cc44:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000cc46:	2300      	movs	r3, #0
1000cc48:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000cc4a:	3302      	adds	r3, #2
1000cc4c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000cc4e:	3b01      	subs	r3, #1
1000cc50:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000cc52:	0021      	movs	r1, r4
1000cc54:	201d      	movs	r0, #29
1000cc56:	4b27      	ldr	r3, [pc, #156]	; (1000ccf4 <main+0xd8>)
1000cc58:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000cc5a:	4b27      	ldr	r3, [pc, #156]	; (1000ccf8 <main+0xdc>)
1000cc5c:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000cc5e:	4d27      	ldr	r5, [pc, #156]	; (1000ccfc <main+0xe0>)
1000cc60:	6065      	str	r5, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000cc62:	231d      	movs	r3, #29
1000cc64:	8023      	strh	r3, [r4, #0]
    mpu_init(&int_param);
1000cc66:	0020      	movs	r0, r4
1000cc68:	4b25      	ldr	r3, [pc, #148]	; (1000cd00 <main+0xe4>)
1000cc6a:	4798      	blx	r3
}
static void configure_imu(void)
{
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000cc6c:	2078      	movs	r0, #120	; 0x78
1000cc6e:	4b25      	ldr	r3, [pc, #148]	; (1000cd04 <main+0xe8>)
1000cc70:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000cc72:	2078      	movs	r0, #120	; 0x78
1000cc74:	4b24      	ldr	r3, [pc, #144]	; (1000cd08 <main+0xec>)
1000cc76:	4798      	blx	r3
    mpu_set_sample_rate(10);
1000cc78:	200a      	movs	r0, #10
1000cc7a:	4b24      	ldr	r3, [pc, #144]	; (1000cd0c <main+0xf0>)
1000cc7c:	4798      	blx	r3
    
    uint16_t gyro_rate, gyro_fsr;
    uint8_t accel_fsr;
    mpu_get_sample_rate(&gyro_rate);
1000cc7e:	466b      	mov	r3, sp
1000cc80:	1c98      	adds	r0, r3, #2
1000cc82:	4b23      	ldr	r3, [pc, #140]	; (1000cd10 <main+0xf4>)
1000cc84:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000cc86:	0020      	movs	r0, r4
1000cc88:	4b22      	ldr	r3, [pc, #136]	; (1000cd14 <main+0xf8>)
1000cc8a:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000cc8c:	466b      	mov	r3, sp
1000cc8e:	1c58      	adds	r0, r3, #1
1000cc90:	4b21      	ldr	r3, [pc, #132]	; (1000cd18 <main+0xfc>)
1000cc92:	4798      	blx	r3
    
    //inv_set_gyro_sample_rate
    
    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
    dmp_enable_feature(hal.dmp_features);
1000cc94:	20c0      	movs	r0, #192	; 0xc0
1000cc96:	4b21      	ldr	r3, [pc, #132]	; (1000cd1c <main+0x100>)
1000cc98:	4798      	blx	r3
	configure_i2c_master();
	//! [config]
    
    init_imu();
    configure_imu();
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000cc9a:	2202      	movs	r2, #2
1000cc9c:	0029      	movs	r1, r5
1000cc9e:	201d      	movs	r0, #29
1000cca0:	4b1f      	ldr	r3, [pc, #124]	; (1000cd20 <main+0x104>)
1000cca2:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_2);
1000cca4:	201d      	movs	r0, #29
1000cca6:	4b1f      	ldr	r3, [pc, #124]	; (1000cd24 <main+0x108>)
1000cca8:	4798      	blx	r3
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000ccaa:	4f1f      	ldr	r7, [pc, #124]	; (1000cd28 <main+0x10c>)
        if(imu_interrupt) {
1000ccac:	4d1f      	ldr	r5, [pc, #124]	; (1000cd2c <main+0x110>)
            DBG_LOG("IMU INTERRUPT!");
1000ccae:	4e20      	ldr	r6, [pc, #128]	; (1000cd30 <main+0x114>)
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000ccb0:	2401      	movs	r4, #1
1000ccb2:	4264      	negs	r4, r4
1000ccb4:	0020      	movs	r0, r4
1000ccb6:	47b8      	blx	r7
        if(imu_interrupt) {
1000ccb8:	782b      	ldrb	r3, [r5, #0]
1000ccba:	2b00      	cmp	r3, #0
1000ccbc:	d0fa      	beq.n	1000ccb4 <main+0x98>
            DBG_LOG("IMU INTERRUPT!");
1000ccbe:	0030      	movs	r0, r6
1000ccc0:	4b1c      	ldr	r3, [pc, #112]	; (1000cd34 <main+0x118>)
1000ccc2:	4798      	blx	r3
1000ccc4:	481c      	ldr	r0, [pc, #112]	; (1000cd38 <main+0x11c>)
1000ccc6:	4b1d      	ldr	r3, [pc, #116]	; (1000cd3c <main+0x120>)
1000ccc8:	4798      	blx	r3
            imu_poll_data();
            imu_interrupt = false;
1000ccca:	2200      	movs	r2, #0
1000cccc:	4b17      	ldr	r3, [pc, #92]	; (1000cd2c <main+0x110>)
1000ccce:	701a      	strb	r2, [r3, #0]
1000ccd0:	e7ee      	b.n	1000ccb0 <main+0x94>
1000ccd2:	46c0      	nop			; (mov r8, r8)
1000ccd4:	1000ae69 	.word	0x1000ae69
1000ccd8:	1000c065 	.word	0x1000c065
1000ccdc:	1000b3bd 	.word	0x1000b3bd
1000cce0:	1000ab5d 	.word	0x1000ab5d
1000cce4:	1000a355 	.word	0x1000a355
1000cce8:	1000cbed 	.word	0x1000cbed
1000ccec:	100080e9 	.word	0x100080e9
1000ccf0:	1000bc25 	.word	0x1000bc25
1000ccf4:	1000bc35 	.word	0x1000bc35
1000ccf8:	1000cb79 	.word	0x1000cb79
1000ccfc:	1000cb59 	.word	0x1000cb59
1000cd00:	10008fe9 	.word	0x10008fe9
1000cd04:	10008e01 	.word	0x10008e01
1000cd08:	10008989 	.word	0x10008989
1000cd0c:	10008d2d 	.word	0x10008d2d
1000cd10:	100088f5 	.word	0x100088f5
1000cd14:	10008679 	.word	0x10008679
1000cd18:	10008759 	.word	0x10008759
1000cd1c:	1000978d 	.word	0x1000978d
1000cd20:	1000bf39 	.word	0x1000bf39
1000cd24:	1000c009 	.word	0x1000c009
1000cd28:	1000aa81 	.word	0x1000aa81
1000cd2c:	10014b84 	.word	0x10014b84
1000cd30:	10012770 	.word	0x10012770
1000cd34:	100115c9 	.word	0x100115c9
1000cd38:	100133c4 	.word	0x100133c4
1000cd3c:	100114a9 	.word	0x100114a9

1000cd40 <internal_event_post>:
1000cd40:	b570      	push	{r4, r5, r6, lr}
1000cd42:	4d12      	ldr	r5, [pc, #72]	; (1000cd8c <internal_event_post+0x4c>)
1000cd44:	682c      	ldr	r4, [r5, #0]
1000cd46:	2c00      	cmp	r4, #0
1000cd48:	d014      	beq.n	1000cd74 <internal_event_post+0x34>
1000cd4a:	6826      	ldr	r6, [r4, #0]
1000cd4c:	60e2      	str	r2, [r4, #12]
1000cd4e:	602e      	str	r6, [r5, #0]
1000cd50:	2500      	movs	r5, #0
1000cd52:	4a0f      	ldr	r2, [pc, #60]	; (1000cd90 <internal_event_post+0x50>)
1000cd54:	8123      	strh	r3, [r4, #8]
1000cd56:	6813      	ldr	r3, [r2, #0]
1000cd58:	6025      	str	r5, [r4, #0]
1000cd5a:	80a0      	strh	r0, [r4, #4]
1000cd5c:	80e1      	strh	r1, [r4, #6]
1000cd5e:	42ab      	cmp	r3, r5
1000cd60:	d101      	bne.n	1000cd66 <internal_event_post+0x26>
1000cd62:	6014      	str	r4, [r2, #0]
1000cd64:	e011      	b.n	1000cd8a <internal_event_post+0x4a>
1000cd66:	681a      	ldr	r2, [r3, #0]
1000cd68:	2a00      	cmp	r2, #0
1000cd6a:	d001      	beq.n	1000cd70 <internal_event_post+0x30>
1000cd6c:	1c13      	adds	r3, r2, #0
1000cd6e:	e7fa      	b.n	1000cd66 <internal_event_post+0x26>
1000cd70:	601c      	str	r4, [r3, #0]
1000cd72:	e00a      	b.n	1000cd8a <internal_event_post+0x4a>
1000cd74:	b2c4      	uxtb	r4, r0
1000cd76:	2c00      	cmp	r4, #0
1000cd78:	d107      	bne.n	1000cd8a <internal_event_post+0x4a>
1000cd7a:	4c06      	ldr	r4, [pc, #24]	; (1000cd94 <internal_event_post+0x54>)
1000cd7c:	60e2      	str	r2, [r4, #12]
1000cd7e:	2201      	movs	r2, #1
1000cd80:	8123      	strh	r3, [r4, #8]
1000cd82:	4b05      	ldr	r3, [pc, #20]	; (1000cd98 <internal_event_post+0x58>)
1000cd84:	80a0      	strh	r0, [r4, #4]
1000cd86:	80e1      	strh	r1, [r4, #6]
1000cd88:	701a      	strb	r2, [r3, #0]
1000cd8a:	bd70      	pop	{r4, r5, r6, pc}
1000cd8c:	10014ba0 	.word	0x10014ba0
1000cd90:	10014b9c 	.word	0x10014b9c
1000cd94:	10014b88 	.word	0x10014b88
1000cd98:	10014b98 	.word	0x10014b98

1000cd9c <internal_event_init>:
1000cd9c:	b510      	push	{r4, lr}
1000cd9e:	4b08      	ldr	r3, [pc, #32]	; (1000cdc0 <internal_event_init+0x24>)
1000cda0:	0900      	lsrs	r0, r0, #4
1000cda2:	0100      	lsls	r0, r0, #4
1000cda4:	681a      	ldr	r2, [r3, #0]
1000cda6:	1808      	adds	r0, r1, r0
1000cda8:	4281      	cmp	r1, r0
1000cdaa:	d003      	beq.n	1000cdb4 <internal_event_init+0x18>
1000cdac:	600a      	str	r2, [r1, #0]
1000cdae:	1c0a      	adds	r2, r1, #0
1000cdb0:	3110      	adds	r1, #16
1000cdb2:	e7f9      	b.n	1000cda8 <internal_event_init+0xc>
1000cdb4:	601a      	str	r2, [r3, #0]
1000cdb6:	2200      	movs	r2, #0
1000cdb8:	4b02      	ldr	r3, [pc, #8]	; (1000cdc4 <internal_event_init+0x28>)
1000cdba:	601a      	str	r2, [r3, #0]
1000cdbc:	bd10      	pop	{r4, pc}
1000cdbe:	46c0      	nop			; (mov r8, r8)
1000cdc0:	10014ba0 	.word	0x10014ba0
1000cdc4:	10014b9c 	.word	0x10014b9c

1000cdc8 <special_events_handler>:
1000cdc8:	b538      	push	{r3, r4, r5, lr}
1000cdca:	4c1b      	ldr	r4, [pc, #108]	; (1000ce38 <special_events_handler+0x70>)
1000cdcc:	1c03      	adds	r3, r0, #0
1000cdce:	8825      	ldrh	r5, [r4, #0]
1000cdd0:	1c08      	adds	r0, r1, #0
1000cdd2:	1c21      	adds	r1, r4, #0
1000cdd4:	429d      	cmp	r5, r3
1000cdd6:	d107      	bne.n	1000cde8 <special_events_handler+0x20>
1000cdd8:	88a5      	ldrh	r5, [r4, #4]
1000cdda:	4285      	cmp	r5, r0
1000cddc:	d104      	bne.n	1000cde8 <special_events_handler+0x20>
1000cdde:	2301      	movs	r3, #1
1000cde0:	425b      	negs	r3, r3
1000cde2:	8023      	strh	r3, [r4, #0]
1000cde4:	60a2      	str	r2, [r4, #8]
1000cde6:	e009      	b.n	1000cdfc <special_events_handler+0x34>
1000cde8:	884c      	ldrh	r4, [r1, #2]
1000cdea:	429c      	cmp	r4, r3
1000cdec:	d10a      	bne.n	1000ce04 <special_events_handler+0x3c>
1000cdee:	888c      	ldrh	r4, [r1, #4]
1000cdf0:	4284      	cmp	r4, r0
1000cdf2:	d107      	bne.n	1000ce04 <special_events_handler+0x3c>
1000cdf4:	2301      	movs	r3, #1
1000cdf6:	425b      	negs	r3, r3
1000cdf8:	804b      	strh	r3, [r1, #2]
1000cdfa:	608a      	str	r2, [r1, #8]
1000cdfc:	4b0f      	ldr	r3, [pc, #60]	; (1000ce3c <special_events_handler+0x74>)
1000cdfe:	4798      	blx	r3
1000ce00:	2001      	movs	r0, #1
1000ce02:	e017      	b.n	1000ce34 <special_events_handler+0x6c>
1000ce04:	490e      	ldr	r1, [pc, #56]	; (1000ce40 <special_events_handler+0x78>)
1000ce06:	428b      	cmp	r3, r1
1000ce08:	d00e      	beq.n	1000ce28 <special_events_handler+0x60>
1000ce0a:	490e      	ldr	r1, [pc, #56]	; (1000ce44 <special_events_handler+0x7c>)
1000ce0c:	428b      	cmp	r3, r1
1000ce0e:	d007      	beq.n	1000ce20 <special_events_handler+0x58>
1000ce10:	490d      	ldr	r1, [pc, #52]	; (1000ce48 <special_events_handler+0x80>)
1000ce12:	2000      	movs	r0, #0
1000ce14:	428b      	cmp	r3, r1
1000ce16:	d10d      	bne.n	1000ce34 <special_events_handler+0x6c>
1000ce18:	1c10      	adds	r0, r2, #0
1000ce1a:	4b0c      	ldr	r3, [pc, #48]	; (1000ce4c <special_events_handler+0x84>)
1000ce1c:	4798      	blx	r3
1000ce1e:	e7ef      	b.n	1000ce00 <special_events_handler+0x38>
1000ce20:	1c11      	adds	r1, r2, #0
1000ce22:	4b0b      	ldr	r3, [pc, #44]	; (1000ce50 <special_events_handler+0x88>)
1000ce24:	2200      	movs	r2, #0
1000ce26:	e002      	b.n	1000ce2e <special_events_handler+0x66>
1000ce28:	1c11      	adds	r1, r2, #0
1000ce2a:	2200      	movs	r2, #0
1000ce2c:	4b09      	ldr	r3, [pc, #36]	; (1000ce54 <special_events_handler+0x8c>)
1000ce2e:	4798      	blx	r3
1000ce30:	4243      	negs	r3, r0
1000ce32:	4158      	adcs	r0, r3
1000ce34:	bd38      	pop	{r3, r4, r5, pc}
1000ce36:	46c0      	nop			; (mov r8, r8)
1000ce38:	100158e4 	.word	0x100158e4
1000ce3c:	1000dfcd 	.word	0x1000dfcd
1000ce40:	00000e13 	.word	0x00000e13
1000ce44:	00000e15 	.word	0x00000e15
1000ce48:	00000e01 	.word	0x00000e01
1000ce4c:	1000e33d 	.word	0x1000e33d
1000ce50:	1000e4fd 	.word	0x1000e4fd
1000ce54:	1000e5d5 	.word	0x1000e5d5

1000ce58 <at_ble_event_get>:
1000ce58:	2300      	movs	r3, #0
1000ce5a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce5c:	b087      	sub	sp, #28
1000ce5e:	9204      	str	r2, [sp, #16]
1000ce60:	7003      	strb	r3, [r0, #0]
1000ce62:	9b04      	ldr	r3, [sp, #16]
1000ce64:	9003      	str	r0, [sp, #12]
1000ce66:	3b01      	subs	r3, #1
1000ce68:	1c0d      	adds	r5, r1, #0
1000ce6a:	9305      	str	r3, [sp, #20]
1000ce6c:	3303      	adds	r3, #3
1000ce6e:	d802      	bhi.n	1000ce76 <at_ble_event_get+0x1e>
1000ce70:	9804      	ldr	r0, [sp, #16]
1000ce72:	4bae      	ldr	r3, [pc, #696]	; (1000d12c <at_ble_event_get+0x2d4>)
1000ce74:	4798      	blx	r3
1000ce76:	9b05      	ldr	r3, [sp, #20]
1000ce78:	4cad      	ldr	r4, [pc, #692]	; (1000d130 <at_ble_event_get+0x2d8>)
1000ce7a:	3303      	adds	r3, #3
1000ce7c:	d902      	bls.n	1000ce84 <at_ble_event_get+0x2c>
1000ce7e:	2300      	movs	r3, #0
1000ce80:	9302      	str	r3, [sp, #8]
1000ce82:	e015      	b.n	1000ceb0 <at_ble_event_get+0x58>
1000ce84:	2300      	movs	r3, #0
1000ce86:	9302      	str	r3, [sp, #8]
1000ce88:	6823      	ldr	r3, [r4, #0]
1000ce8a:	2b00      	cmp	r3, #0
1000ce8c:	d113      	bne.n	1000ceb6 <at_ble_event_get+0x5e>
1000ce8e:	9b02      	ldr	r3, [sp, #8]
1000ce90:	2bd0      	cmp	r3, #208	; 0xd0
1000ce92:	d100      	bne.n	1000ce96 <at_ble_event_get+0x3e>
1000ce94:	e2da      	b.n	1000d44c <at_ble_event_get+0x5f4>
1000ce96:	9804      	ldr	r0, [sp, #16]
1000ce98:	4ba6      	ldr	r3, [pc, #664]	; (1000d134 <at_ble_event_get+0x2dc>)
1000ce9a:	4798      	blx	r3
1000ce9c:	9002      	str	r0, [sp, #8]
1000ce9e:	2802      	cmp	r0, #2
1000cea0:	d1f2      	bne.n	1000ce88 <at_ble_event_get+0x30>
1000cea2:	e03f      	b.n	1000cf24 <at_ble_event_get+0xcc>
1000cea4:	9804      	ldr	r0, [sp, #16]
1000cea6:	4ba3      	ldr	r3, [pc, #652]	; (1000d134 <at_ble_event_get+0x2dc>)
1000cea8:	4798      	blx	r3
1000ceaa:	9002      	str	r0, [sp, #8]
1000ceac:	2802      	cmp	r0, #2
1000ceae:	d039      	beq.n	1000cf24 <at_ble_event_get+0xcc>
1000ceb0:	6823      	ldr	r3, [r4, #0]
1000ceb2:	2b00      	cmp	r3, #0
1000ceb4:	d0f6      	beq.n	1000cea4 <at_ble_event_get+0x4c>
1000ceb6:	9b02      	ldr	r3, [sp, #8]
1000ceb8:	2bd0      	cmp	r3, #208	; 0xd0
1000ceba:	d100      	bne.n	1000cebe <at_ble_event_get+0x66>
1000cebc:	e2c6      	b.n	1000d44c <at_ble_event_get+0x5f4>
1000cebe:	9b02      	ldr	r3, [sp, #8]
1000cec0:	3b03      	subs	r3, #3
1000cec2:	1e5a      	subs	r2, r3, #1
1000cec4:	4193      	sbcs	r3, r2
1000cec6:	9a02      	ldr	r2, [sp, #8]
1000cec8:	425b      	negs	r3, r3
1000ceca:	401a      	ands	r2, r3
1000cecc:	6823      	ldr	r3, [r4, #0]
1000cece:	9202      	str	r2, [sp, #8]
1000ced0:	2b00      	cmp	r3, #0
1000ced2:	d100      	bne.n	1000ced6 <at_ble_event_get+0x7e>
1000ced4:	e2c2      	b.n	1000d45c <at_ble_event_get+0x604>
1000ced6:	681a      	ldr	r2, [r3, #0]
1000ced8:	68de      	ldr	r6, [r3, #12]
1000ceda:	6022      	str	r2, [r4, #0]
1000cedc:	88da      	ldrh	r2, [r3, #6]
1000cede:	9201      	str	r2, [sp, #4]
1000cee0:	4a95      	ldr	r2, [pc, #596]	; (1000d138 <at_ble_event_get+0x2e0>)
1000cee2:	889c      	ldrh	r4, [r3, #4]
1000cee4:	6811      	ldr	r1, [r2, #0]
1000cee6:	6013      	str	r3, [r2, #0]
1000cee8:	6019      	str	r1, [r3, #0]
1000ceea:	4b94      	ldr	r3, [pc, #592]	; (1000d13c <at_ble_event_get+0x2e4>)
1000ceec:	781b      	ldrb	r3, [r3, #0]
1000ceee:	2b01      	cmp	r3, #1
1000cef0:	d10f      	bne.n	1000cf12 <at_ble_event_get+0xba>
1000cef2:	4b93      	ldr	r3, [pc, #588]	; (1000d140 <at_ble_event_get+0x2e8>)
1000cef4:	4a92      	ldr	r2, [pc, #584]	; (1000d140 <at_ble_event_get+0x2e8>)
1000cef6:	8898      	ldrh	r0, [r3, #4]
1000cef8:	88d9      	ldrh	r1, [r3, #6]
1000cefa:	68d2      	ldr	r2, [r2, #12]
1000cefc:	891b      	ldrh	r3, [r3, #8]
1000cefe:	4f91      	ldr	r7, [pc, #580]	; (1000d144 <at_ble_event_get+0x2ec>)
1000cf00:	47b8      	blx	r7
1000cf02:	2210      	movs	r2, #16
1000cf04:	4b90      	ldr	r3, [pc, #576]	; (1000d148 <at_ble_event_get+0x2f0>)
1000cf06:	488e      	ldr	r0, [pc, #568]	; (1000d140 <at_ble_event_get+0x2e8>)
1000cf08:	2100      	movs	r1, #0
1000cf0a:	4798      	blx	r3
1000cf0c:	2300      	movs	r3, #0
1000cf0e:	4a8b      	ldr	r2, [pc, #556]	; (1000d13c <at_ble_event_get+0x2e4>)
1000cf10:	7013      	strb	r3, [r2, #0]
1000cf12:	9b02      	ldr	r3, [sp, #8]
1000cf14:	2b00      	cmp	r3, #0
1000cf16:	d114      	bne.n	1000cf42 <at_ble_event_get+0xea>
1000cf18:	4b8c      	ldr	r3, [pc, #560]	; (1000d14c <at_ble_event_get+0x2f4>)
1000cf1a:	429c      	cmp	r4, r3
1000cf1c:	d009      	beq.n	1000cf32 <at_ble_event_get+0xda>
1000cf1e:	4b8c      	ldr	r3, [pc, #560]	; (1000d150 <at_ble_event_get+0x2f8>)
1000cf20:	429c      	cmp	r4, r3
1000cf22:	d127      	bne.n	1000cf74 <at_ble_event_get+0x11c>
1000cf24:	233a      	movs	r3, #58	; 0x3a
1000cf26:	9a03      	ldr	r2, [sp, #12]
1000cf28:	7013      	strb	r3, [r2, #0]
1000cf2a:	2300      	movs	r3, #0
1000cf2c:	9302      	str	r3, [sp, #8]
1000cf2e:	1c1d      	adds	r5, r3, #0
1000cf30:	e007      	b.n	1000cf42 <at_ble_event_get+0xea>
1000cf32:	9b01      	ldr	r3, [sp, #4]
1000cf34:	42a3      	cmp	r3, r4
1000cf36:	d000      	beq.n	1000cf3a <at_ble_event_get+0xe2>
1000cf38:	e28a      	b.n	1000d450 <at_ble_event_get+0x5f8>
1000cf3a:	2338      	movs	r3, #56	; 0x38
1000cf3c:	9a03      	ldr	r2, [sp, #12]
1000cf3e:	7013      	strb	r3, [r2, #0]
1000cf40:	602e      	str	r6, [r5, #0]
1000cf42:	9b03      	ldr	r3, [sp, #12]
1000cf44:	781b      	ldrb	r3, [r3, #0]
1000cf46:	2b3b      	cmp	r3, #59	; 0x3b
1000cf48:	d101      	bne.n	1000cf4e <at_ble_event_get+0xf6>
1000cf4a:	4b82      	ldr	r3, [pc, #520]	; (1000d154 <at_ble_event_get+0x2fc>)
1000cf4c:	4798      	blx	r3
1000cf4e:	9b03      	ldr	r3, [sp, #12]
1000cf50:	781b      	ldrb	r3, [r3, #0]
1000cf52:	2b3b      	cmp	r3, #59	; 0x3b
1000cf54:	d003      	beq.n	1000cf5e <at_ble_event_get+0x106>
1000cf56:	9b05      	ldr	r3, [sp, #20]
1000cf58:	3303      	adds	r3, #3
1000cf5a:	d904      	bls.n	1000cf66 <at_ble_event_get+0x10e>
1000cf5c:	e283      	b.n	1000d466 <at_ble_event_get+0x60e>
1000cf5e:	9b02      	ldr	r3, [sp, #8]
1000cf60:	2b00      	cmp	r3, #0
1000cf62:	d088      	beq.n	1000ce76 <at_ble_event_get+0x1e>
1000cf64:	e7f7      	b.n	1000cf56 <at_ble_event_get+0xfe>
1000cf66:	9b02      	ldr	r3, [sp, #8]
1000cf68:	2bd0      	cmp	r3, #208	; 0xd0
1000cf6a:	d100      	bne.n	1000cf6e <at_ble_event_get+0x116>
1000cf6c:	e27b      	b.n	1000d466 <at_ble_event_get+0x60e>
1000cf6e:	4b7a      	ldr	r3, [pc, #488]	; (1000d158 <at_ble_event_get+0x300>)
1000cf70:	4798      	blx	r3
1000cf72:	e278      	b.n	1000d466 <at_ble_event_get+0x60e>
1000cf74:	9b01      	ldr	r3, [sp, #4]
1000cf76:	2bbb      	cmp	r3, #187	; 0xbb
1000cf78:	d125      	bne.n	1000cfc6 <at_ble_event_get+0x16e>
1000cf7a:	2cbb      	cmp	r4, #187	; 0xbb
1000cf7c:	d123      	bne.n	1000cfc6 <at_ble_event_get+0x16e>
1000cf7e:	466b      	mov	r3, sp
1000cf80:	891b      	ldrh	r3, [r3, #8]
1000cf82:	80ab      	strh	r3, [r5, #4]
1000cf84:	78b3      	ldrb	r3, [r6, #2]
1000cf86:	7872      	ldrb	r2, [r6, #1]
1000cf88:	78f0      	ldrb	r0, [r6, #3]
1000cf8a:	021b      	lsls	r3, r3, #8
1000cf8c:	4313      	orrs	r3, r2
1000cf8e:	7971      	ldrb	r1, [r6, #5]
1000cf90:	7932      	ldrb	r2, [r6, #4]
1000cf92:	70a8      	strb	r0, [r5, #2]
1000cf94:	4871      	ldr	r0, [pc, #452]	; (1000d15c <at_ble_event_get+0x304>)
1000cf96:	802b      	strh	r3, [r5, #0]
1000cf98:	4283      	cmp	r3, r0
1000cf9a:	d806      	bhi.n	1000cfaa <at_ble_event_get+0x152>
1000cf9c:	4a70      	ldr	r2, [pc, #448]	; (1000d160 <at_ble_event_get+0x308>)
1000cf9e:	4293      	cmp	r3, r2
1000cfa0:	d20b      	bcs.n	1000cfba <at_ble_event_get+0x162>
1000cfa2:	4a70      	ldr	r2, [pc, #448]	; (1000d164 <at_ble_event_get+0x30c>)
1000cfa4:	4293      	cmp	r3, r2
1000cfa6:	d008      	beq.n	1000cfba <at_ble_event_get+0x162>
1000cfa8:	e009      	b.n	1000cfbe <at_ble_event_get+0x166>
1000cfaa:	486f      	ldr	r0, [pc, #444]	; (1000d168 <at_ble_event_get+0x310>)
1000cfac:	4283      	cmp	r3, r0
1000cfae:	d106      	bne.n	1000cfbe <at_ble_event_get+0x166>
1000cfb0:	020b      	lsls	r3, r1, #8
1000cfb2:	4313      	orrs	r3, r2
1000cfb4:	80ab      	strh	r3, [r5, #4]
1000cfb6:	2337      	movs	r3, #55	; 0x37
1000cfb8:	e002      	b.n	1000cfc0 <at_ble_event_get+0x168>
1000cfba:	2336      	movs	r3, #54	; 0x36
1000cfbc:	e000      	b.n	1000cfc0 <at_ble_event_get+0x168>
1000cfbe:	2300      	movs	r3, #0
1000cfc0:	9a03      	ldr	r2, [sp, #12]
1000cfc2:	7013      	strb	r3, [r2, #0]
1000cfc4:	e7bd      	b.n	1000cf42 <at_ble_event_get+0xea>
1000cfc6:	4b69      	ldr	r3, [pc, #420]	; (1000d16c <at_ble_event_get+0x314>)
1000cfc8:	429c      	cmp	r4, r3
1000cfca:	d100      	bne.n	1000cfce <at_ble_event_get+0x176>
1000cfcc:	e144      	b.n	1000d258 <at_ble_event_get+0x400>
1000cfce:	d865      	bhi.n	1000d09c <at_ble_event_get+0x244>
1000cfd0:	4b67      	ldr	r3, [pc, #412]	; (1000d170 <at_ble_event_get+0x318>)
1000cfd2:	429c      	cmp	r4, r3
1000cfd4:	d100      	bne.n	1000cfd8 <at_ble_event_get+0x180>
1000cfd6:	e1d5      	b.n	1000d384 <at_ble_event_get+0x52c>
1000cfd8:	d82f      	bhi.n	1000d03a <at_ble_event_get+0x1e2>
1000cfda:	4b66      	ldr	r3, [pc, #408]	; (1000d174 <at_ble_event_get+0x31c>)
1000cfdc:	429c      	cmp	r4, r3
1000cfde:	d100      	bne.n	1000cfe2 <at_ble_event_get+0x18a>
1000cfe0:	e1e0      	b.n	1000d3a4 <at_ble_event_get+0x54c>
1000cfe2:	d813      	bhi.n	1000d00c <at_ble_event_get+0x1b4>
1000cfe4:	4b64      	ldr	r3, [pc, #400]	; (1000d178 <at_ble_event_get+0x320>)
1000cfe6:	429c      	cmp	r4, r3
1000cfe8:	d100      	bne.n	1000cfec <at_ble_event_get+0x194>
1000cfea:	e1a3      	b.n	1000d334 <at_ble_event_get+0x4dc>
1000cfec:	d804      	bhi.n	1000cff8 <at_ble_event_get+0x1a0>
1000cfee:	2638      	movs	r6, #56	; 0x38
1000cff0:	42b4      	cmp	r4, r6
1000cff2:	d100      	bne.n	1000cff6 <at_ble_event_get+0x19e>
1000cff4:	e225      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000cff6:	e117      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000cff8:	4b60      	ldr	r3, [pc, #384]	; (1000d17c <at_ble_event_get+0x324>)
1000cffa:	429c      	cmp	r4, r3
1000cffc:	d100      	bne.n	1000d000 <at_ble_event_get+0x1a8>
1000cffe:	e19f      	b.n	1000d340 <at_ble_event_get+0x4e8>
1000d000:	33fe      	adds	r3, #254	; 0xfe
1000d002:	33ff      	adds	r3, #255	; 0xff
1000d004:	429c      	cmp	r4, r3
1000d006:	d100      	bne.n	1000d00a <at_ble_event_get+0x1b2>
1000d008:	e1d3      	b.n	1000d3b2 <at_ble_event_get+0x55a>
1000d00a:	e10d      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d00c:	4b5c      	ldr	r3, [pc, #368]	; (1000d180 <at_ble_event_get+0x328>)
1000d00e:	429c      	cmp	r4, r3
1000d010:	d100      	bne.n	1000d014 <at_ble_event_get+0x1bc>
1000d012:	e1a9      	b.n	1000d368 <at_ble_event_get+0x510>
1000d014:	d808      	bhi.n	1000d028 <at_ble_event_get+0x1d0>
1000d016:	4b5b      	ldr	r3, [pc, #364]	; (1000d184 <at_ble_event_get+0x32c>)
1000d018:	429c      	cmp	r4, r3
1000d01a:	d100      	bne.n	1000d01e <at_ble_event_get+0x1c6>
1000d01c:	e196      	b.n	1000d34c <at_ble_event_get+0x4f4>
1000d01e:	4b5a      	ldr	r3, [pc, #360]	; (1000d188 <at_ble_event_get+0x330>)
1000d020:	429c      	cmp	r4, r3
1000d022:	d100      	bne.n	1000d026 <at_ble_event_get+0x1ce>
1000d024:	e199      	b.n	1000d35a <at_ble_event_get+0x502>
1000d026:	e0ff      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d028:	4b58      	ldr	r3, [pc, #352]	; (1000d18c <at_ble_event_get+0x334>)
1000d02a:	429c      	cmp	r4, r3
1000d02c:	d100      	bne.n	1000d030 <at_ble_event_get+0x1d8>
1000d02e:	e1a2      	b.n	1000d376 <at_ble_event_get+0x51e>
1000d030:	4b57      	ldr	r3, [pc, #348]	; (1000d190 <at_ble_event_get+0x338>)
1000d032:	429c      	cmp	r4, r3
1000d034:	d100      	bne.n	1000d038 <at_ble_event_get+0x1e0>
1000d036:	e1d4      	b.n	1000d3e2 <at_ble_event_get+0x58a>
1000d038:	e0f6      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d03a:	4b56      	ldr	r3, [pc, #344]	; (1000d194 <at_ble_event_get+0x33c>)
1000d03c:	429c      	cmp	r4, r3
1000d03e:	d100      	bne.n	1000d042 <at_ble_event_get+0x1ea>
1000d040:	e1c8      	b.n	1000d3d4 <at_ble_event_get+0x57c>
1000d042:	d812      	bhi.n	1000d06a <at_ble_event_get+0x212>
1000d044:	4b54      	ldr	r3, [pc, #336]	; (1000d198 <at_ble_event_get+0x340>)
1000d046:	429c      	cmp	r4, r3
1000d048:	d100      	bne.n	1000d04c <at_ble_event_get+0x1f4>
1000d04a:	e1d1      	b.n	1000d3f0 <at_ble_event_get+0x598>
1000d04c:	d804      	bhi.n	1000d058 <at_ble_event_get+0x200>
1000d04e:	4b53      	ldr	r3, [pc, #332]	; (1000d19c <at_ble_event_get+0x344>)
1000d050:	429c      	cmp	r4, r3
1000d052:	d100      	bne.n	1000d056 <at_ble_event_get+0x1fe>
1000d054:	e19b      	b.n	1000d38e <at_ble_event_get+0x536>
1000d056:	e0e7      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d058:	4b51      	ldr	r3, [pc, #324]	; (1000d1a0 <at_ble_event_get+0x348>)
1000d05a:	429c      	cmp	r4, r3
1000d05c:	d100      	bne.n	1000d060 <at_ble_event_get+0x208>
1000d05e:	e1ad      	b.n	1000d3bc <at_ble_event_get+0x564>
1000d060:	4b50      	ldr	r3, [pc, #320]	; (1000d1a4 <at_ble_event_get+0x34c>)
1000d062:	429c      	cmp	r4, r3
1000d064:	d100      	bne.n	1000d068 <at_ble_event_get+0x210>
1000d066:	e1b0      	b.n	1000d3ca <at_ble_event_get+0x572>
1000d068:	e0de      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d06a:	4b4f      	ldr	r3, [pc, #316]	; (1000d1a8 <at_ble_event_get+0x350>)
1000d06c:	429c      	cmp	r4, r3
1000d06e:	d100      	bne.n	1000d072 <at_ble_event_get+0x21a>
1000d070:	e0e0      	b.n	1000d234 <at_ble_event_get+0x3dc>
1000d072:	d809      	bhi.n	1000d088 <at_ble_event_get+0x230>
1000d074:	3b08      	subs	r3, #8
1000d076:	429c      	cmp	r4, r3
1000d078:	d100      	bne.n	1000d07c <at_ble_event_get+0x224>
1000d07a:	e0d7      	b.n	1000d22c <at_ble_event_get+0x3d4>
1000d07c:	4b4b      	ldr	r3, [pc, #300]	; (1000d1ac <at_ble_event_get+0x354>)
1000d07e:	2639      	movs	r6, #57	; 0x39
1000d080:	429c      	cmp	r4, r3
1000d082:	d100      	bne.n	1000d086 <at_ble_event_get+0x22e>
1000d084:	e1dd      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d086:	e0cf      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d088:	23d1      	movs	r3, #209	; 0xd1
1000d08a:	011b      	lsls	r3, r3, #4
1000d08c:	429c      	cmp	r4, r3
1000d08e:	d100      	bne.n	1000d092 <at_ble_event_get+0x23a>
1000d090:	e0d6      	b.n	1000d240 <at_ble_event_get+0x3e8>
1000d092:	4b47      	ldr	r3, [pc, #284]	; (1000d1b0 <at_ble_event_get+0x358>)
1000d094:	429c      	cmp	r4, r3
1000d096:	d100      	bne.n	1000d09a <at_ble_event_get+0x242>
1000d098:	e0d8      	b.n	1000d24c <at_ble_event_get+0x3f4>
1000d09a:	e0c5      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d09c:	4b45      	ldr	r3, [pc, #276]	; (1000d1b4 <at_ble_event_get+0x35c>)
1000d09e:	429c      	cmp	r4, r3
1000d0a0:	d100      	bne.n	1000d0a4 <at_ble_event_get+0x24c>
1000d0a2:	e117      	b.n	1000d2d4 <at_ble_event_get+0x47c>
1000d0a4:	d82e      	bhi.n	1000d104 <at_ble_event_get+0x2ac>
1000d0a6:	4b44      	ldr	r3, [pc, #272]	; (1000d1b8 <at_ble_event_get+0x360>)
1000d0a8:	429c      	cmp	r4, r3
1000d0aa:	d100      	bne.n	1000d0ae <at_ble_event_get+0x256>
1000d0ac:	e13d      	b.n	1000d32a <at_ble_event_get+0x4d2>
1000d0ae:	d812      	bhi.n	1000d0d6 <at_ble_event_get+0x27e>
1000d0b0:	4b42      	ldr	r3, [pc, #264]	; (1000d1bc <at_ble_event_get+0x364>)
1000d0b2:	429c      	cmp	r4, r3
1000d0b4:	d100      	bne.n	1000d0b8 <at_ble_event_get+0x260>
1000d0b6:	e0e8      	b.n	1000d28a <at_ble_event_get+0x432>
1000d0b8:	d804      	bhi.n	1000d0c4 <at_ble_event_get+0x26c>
1000d0ba:	3b03      	subs	r3, #3
1000d0bc:	429c      	cmp	r4, r3
1000d0be:	d100      	bne.n	1000d0c2 <at_ble_event_get+0x26a>
1000d0c0:	e0d0      	b.n	1000d264 <at_ble_event_get+0x40c>
1000d0c2:	e0b1      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d0c4:	4b3e      	ldr	r3, [pc, #248]	; (1000d1c0 <at_ble_event_get+0x368>)
1000d0c6:	429c      	cmp	r4, r3
1000d0c8:	d100      	bne.n	1000d0cc <at_ble_event_get+0x274>
1000d0ca:	e0d0      	b.n	1000d26e <at_ble_event_get+0x416>
1000d0cc:	4b3d      	ldr	r3, [pc, #244]	; (1000d1c4 <at_ble_event_get+0x36c>)
1000d0ce:	429c      	cmp	r4, r3
1000d0d0:	d100      	bne.n	1000d0d4 <at_ble_event_get+0x27c>
1000d0d2:	e0f9      	b.n	1000d2c8 <at_ble_event_get+0x470>
1000d0d4:	e0a8      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d0d6:	4b3c      	ldr	r3, [pc, #240]	; (1000d1c8 <at_ble_event_get+0x370>)
1000d0d8:	429c      	cmp	r4, r3
1000d0da:	d100      	bne.n	1000d0de <at_ble_event_get+0x286>
1000d0dc:	e0db      	b.n	1000d296 <at_ble_event_get+0x43e>
1000d0de:	d808      	bhi.n	1000d0f2 <at_ble_event_get+0x29a>
1000d0e0:	4b3a      	ldr	r3, [pc, #232]	; (1000d1cc <at_ble_event_get+0x374>)
1000d0e2:	429c      	cmp	r4, r3
1000d0e4:	d100      	bne.n	1000d0e8 <at_ble_event_get+0x290>
1000d0e6:	e11b      	b.n	1000d320 <at_ble_event_get+0x4c8>
1000d0e8:	4b39      	ldr	r3, [pc, #228]	; (1000d1d0 <at_ble_event_get+0x378>)
1000d0ea:	429c      	cmp	r4, r3
1000d0ec:	d100      	bne.n	1000d0f0 <at_ble_event_get+0x298>
1000d0ee:	e0d8      	b.n	1000d2a2 <at_ble_event_get+0x44a>
1000d0f0:	e09a      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d0f2:	4b38      	ldr	r3, [pc, #224]	; (1000d1d4 <at_ble_event_get+0x37c>)
1000d0f4:	429c      	cmp	r4, r3
1000d0f6:	d100      	bne.n	1000d0fa <at_ble_event_get+0x2a2>
1000d0f8:	e0d8      	b.n	1000d2ac <at_ble_event_get+0x454>
1000d0fa:	4b37      	ldr	r3, [pc, #220]	; (1000d1d8 <at_ble_event_get+0x380>)
1000d0fc:	429c      	cmp	r4, r3
1000d0fe:	d100      	bne.n	1000d102 <at_ble_event_get+0x2aa>
1000d100:	e0db      	b.n	1000d2ba <at_ble_event_get+0x462>
1000d102:	e091      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d104:	4b35      	ldr	r3, [pc, #212]	; (1000d1dc <at_ble_event_get+0x384>)
1000d106:	429c      	cmp	r4, r3
1000d108:	d100      	bne.n	1000d10c <at_ble_event_get+0x2b4>
1000d10a:	e0f7      	b.n	1000d2fc <at_ble_event_get+0x4a4>
1000d10c:	d876      	bhi.n	1000d1fc <at_ble_event_get+0x3a4>
1000d10e:	4b34      	ldr	r3, [pc, #208]	; (1000d1e0 <at_ble_event_get+0x388>)
1000d110:	429c      	cmp	r4, r3
1000d112:	d100      	bne.n	1000d116 <at_ble_event_get+0x2be>
1000d114:	e0f8      	b.n	1000d308 <at_ble_event_get+0x4b0>
1000d116:	d869      	bhi.n	1000d1ec <at_ble_event_get+0x394>
1000d118:	4b32      	ldr	r3, [pc, #200]	; (1000d1e4 <at_ble_event_get+0x38c>)
1000d11a:	429c      	cmp	r4, r3
1000d11c:	d100      	bne.n	1000d120 <at_ble_event_get+0x2c8>
1000d11e:	e0e0      	b.n	1000d2e2 <at_ble_event_get+0x48a>
1000d120:	4b31      	ldr	r3, [pc, #196]	; (1000d1e8 <at_ble_event_get+0x390>)
1000d122:	429c      	cmp	r4, r3
1000d124:	d100      	bne.n	1000d128 <at_ble_event_get+0x2d0>
1000d126:	e0a9      	b.n	1000d27c <at_ble_event_get+0x424>
1000d128:	e07e      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d12a:	46c0      	nop			; (mov r8, r8)
1000d12c:	1000e005 	.word	0x1000e005
1000d130:	10014b9c 	.word	0x10014b9c
1000d134:	1000b159 	.word	0x1000b159
1000d138:	10014ba0 	.word	0x10014ba0
1000d13c:	10014b98 	.word	0x10014b98
1000d140:	10014b88 	.word	0x10014b88
1000d144:	1000cd41 	.word	0x1000cd41
1000d148:	10011361 	.word	0x10011361
1000d14c:	0000ffff 	.word	0x0000ffff
1000d150:	0000fffe 	.word	0x0000fffe
1000d154:	1000b3d1 	.word	0x1000b3d1
1000d158:	1000e007 	.word	0x1000e007
1000d15c:	0000201e 	.word	0x0000201e
1000d160:	0000201d 	.word	0x0000201d
1000d164:	00000c03 	.word	0x00000c03
1000d168:	0000201f 	.word	0x0000201f
1000d16c:	00000d1c 	.word	0x00000d1c
1000d170:	00000c0c 	.word	0x00000c0c
1000d174:	00000c02 	.word	0x00000c02
1000d178:	00000a02 	.word	0x00000a02
1000d17c:	00000a03 	.word	0x00000a03
1000d180:	00000c06 	.word	0x00000c06
1000d184:	00000c04 	.word	0x00000c04
1000d188:	00000c05 	.word	0x00000c05
1000d18c:	00000c07 	.word	0x00000c07
1000d190:	00000c09 	.word	0x00000c09
1000d194:	00000c17 	.word	0x00000c17
1000d198:	00000c12 	.word	0x00000c12
1000d19c:	00000c0d 	.word	0x00000c0d
1000d1a0:	00000c13 	.word	0x00000c13
1000d1a4:	00000c15 	.word	0x00000c15
1000d1a8:	00000d08 	.word	0x00000d08
1000d1ac:	00000d01 	.word	0x00000d01
1000d1b0:	00000d15 	.word	0x00000d15
1000d1b4:	00000e1b 	.word	0x00000e1b
1000d1b8:	00000e0f 	.word	0x00000e0f
1000d1bc:	00000e03 	.word	0x00000e03
1000d1c0:	00000e06 	.word	0x00000e06
1000d1c4:	00000e0a 	.word	0x00000e0a
1000d1c8:	00000e15 	.word	0x00000e15
1000d1cc:	00000e11 	.word	0x00000e11
1000d1d0:	00000e13 	.word	0x00000e13
1000d1d4:	00000e17 	.word	0x00000e17
1000d1d8:	00000e19 	.word	0x00000e19
1000d1dc:	00000e27 	.word	0x00000e27
1000d1e0:	00000e21 	.word	0x00000e21
1000d1e4:	00000e1c 	.word	0x00000e1c
1000d1e8:	00000e1d 	.word	0x00000e1d
1000d1ec:	4b9f      	ldr	r3, [pc, #636]	; (1000d46c <at_ble_event_get+0x614>)
1000d1ee:	429c      	cmp	r4, r3
1000d1f0:	d07e      	beq.n	1000d2f0 <at_ble_event_get+0x498>
1000d1f2:	4b9f      	ldr	r3, [pc, #636]	; (1000d470 <at_ble_event_get+0x618>)
1000d1f4:	429c      	cmp	r4, r3
1000d1f6:	d100      	bne.n	1000d1fa <at_ble_event_get+0x3a2>
1000d1f8:	e08c      	b.n	1000d314 <at_ble_event_get+0x4bc>
1000d1fa:	e015      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d1fc:	4b9d      	ldr	r3, [pc, #628]	; (1000d474 <at_ble_event_get+0x61c>)
1000d1fe:	429c      	cmp	r4, r3
1000d200:	d100      	bne.n	1000d204 <at_ble_event_get+0x3ac>
1000d202:	e10a      	b.n	1000d41a <at_ble_event_get+0x5c2>
1000d204:	d808      	bhi.n	1000d218 <at_ble_event_get+0x3c0>
1000d206:	4b9c      	ldr	r3, [pc, #624]	; (1000d478 <at_ble_event_get+0x620>)
1000d208:	429c      	cmp	r4, r3
1000d20a:	d100      	bne.n	1000d20e <at_ble_event_get+0x3b6>
1000d20c:	e0f7      	b.n	1000d3fe <at_ble_event_get+0x5a6>
1000d20e:	4b9b      	ldr	r3, [pc, #620]	; (1000d47c <at_ble_event_get+0x624>)
1000d210:	429c      	cmp	r4, r3
1000d212:	d100      	bne.n	1000d216 <at_ble_event_get+0x3be>
1000d214:	e0fa      	b.n	1000d40c <at_ble_event_get+0x5b4>
1000d216:	e007      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d218:	4b99      	ldr	r3, [pc, #612]	; (1000d480 <at_ble_event_get+0x628>)
1000d21a:	429c      	cmp	r4, r3
1000d21c:	d100      	bne.n	1000d220 <at_ble_event_get+0x3c8>
1000d21e:	e103      	b.n	1000d428 <at_ble_event_get+0x5d0>
1000d220:	4b98      	ldr	r3, [pc, #608]	; (1000d484 <at_ble_event_get+0x62c>)
1000d222:	429c      	cmp	r4, r3
1000d224:	d100      	bne.n	1000d228 <at_ble_event_get+0x3d0>
1000d226:	e106      	b.n	1000d436 <at_ble_event_get+0x5de>
1000d228:	2600      	movs	r6, #0
1000d22a:	e10a      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d22c:	1c30      	adds	r0, r6, #0
1000d22e:	1c29      	adds	r1, r5, #0
1000d230:	4b95      	ldr	r3, [pc, #596]	; (1000d488 <at_ble_event_get+0x630>)
1000d232:	e014      	b.n	1000d25e <at_ble_event_get+0x406>
1000d234:	1c30      	adds	r0, r6, #0
1000d236:	1c29      	adds	r1, r5, #0
1000d238:	4b94      	ldr	r3, [pc, #592]	; (1000d48c <at_ble_event_get+0x634>)
1000d23a:	4798      	blx	r3
1000d23c:	2604      	movs	r6, #4
1000d23e:	e100      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d240:	1c30      	adds	r0, r6, #0
1000d242:	1c29      	adds	r1, r5, #0
1000d244:	4b92      	ldr	r3, [pc, #584]	; (1000d490 <at_ble_event_get+0x638>)
1000d246:	4798      	blx	r3
1000d248:	2601      	movs	r6, #1
1000d24a:	e0fa      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d24c:	1c30      	adds	r0, r6, #0
1000d24e:	1c29      	adds	r1, r5, #0
1000d250:	4b90      	ldr	r3, [pc, #576]	; (1000d494 <at_ble_event_get+0x63c>)
1000d252:	4798      	blx	r3
1000d254:	260f      	movs	r6, #15
1000d256:	e0f4      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d258:	1c30      	adds	r0, r6, #0
1000d25a:	1c29      	adds	r1, r5, #0
1000d25c:	4b8e      	ldr	r3, [pc, #568]	; (1000d498 <at_ble_event_get+0x640>)
1000d25e:	4798      	blx	r3
1000d260:	1c06      	adds	r6, r0, #0
1000d262:	e0ee      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d264:	9801      	ldr	r0, [sp, #4]
1000d266:	1c31      	adds	r1, r6, #0
1000d268:	1c2a      	adds	r2, r5, #0
1000d26a:	4b8c      	ldr	r3, [pc, #560]	; (1000d49c <at_ble_event_get+0x644>)
1000d26c:	e017      	b.n	1000d29e <at_ble_event_get+0x446>
1000d26e:	1c31      	adds	r1, r6, #0
1000d270:	9801      	ldr	r0, [sp, #4]
1000d272:	1c2a      	adds	r2, r5, #0
1000d274:	4b8a      	ldr	r3, [pc, #552]	; (1000d4a0 <at_ble_event_get+0x648>)
1000d276:	4798      	blx	r3
1000d278:	2611      	movs	r6, #17
1000d27a:	e0e2      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d27c:	1c31      	adds	r1, r6, #0
1000d27e:	9801      	ldr	r0, [sp, #4]
1000d280:	1c2a      	adds	r2, r5, #0
1000d282:	4b88      	ldr	r3, [pc, #544]	; (1000d4a4 <at_ble_event_get+0x64c>)
1000d284:	4798      	blx	r3
1000d286:	2612      	movs	r6, #18
1000d288:	e0db      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d28a:	1c30      	adds	r0, r6, #0
1000d28c:	1c29      	adds	r1, r5, #0
1000d28e:	4b86      	ldr	r3, [pc, #536]	; (1000d4a8 <at_ble_event_get+0x650>)
1000d290:	4798      	blx	r3
1000d292:	2606      	movs	r6, #6
1000d294:	e0d5      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d296:	1c31      	adds	r1, r6, #0
1000d298:	1c2a      	adds	r2, r5, #0
1000d29a:	9801      	ldr	r0, [sp, #4]
1000d29c:	4b83      	ldr	r3, [pc, #524]	; (1000d4ac <at_ble_event_get+0x654>)
1000d29e:	4798      	blx	r3
1000d2a0:	e7de      	b.n	1000d260 <at_ble_event_get+0x408>
1000d2a2:	9801      	ldr	r0, [sp, #4]
1000d2a4:	1c31      	adds	r1, r6, #0
1000d2a6:	1c2a      	adds	r2, r5, #0
1000d2a8:	4b81      	ldr	r3, [pc, #516]	; (1000d4b0 <at_ble_event_get+0x658>)
1000d2aa:	e7f8      	b.n	1000d29e <at_ble_event_get+0x446>
1000d2ac:	1c31      	adds	r1, r6, #0
1000d2ae:	9801      	ldr	r0, [sp, #4]
1000d2b0:	1c2a      	adds	r2, r5, #0
1000d2b2:	4b80      	ldr	r3, [pc, #512]	; (1000d4b4 <at_ble_event_get+0x65c>)
1000d2b4:	4798      	blx	r3
1000d2b6:	260d      	movs	r6, #13
1000d2b8:	e0c3      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d2ba:	1c31      	adds	r1, r6, #0
1000d2bc:	9801      	ldr	r0, [sp, #4]
1000d2be:	1c2a      	adds	r2, r5, #0
1000d2c0:	4b7d      	ldr	r3, [pc, #500]	; (1000d4b8 <at_ble_event_get+0x660>)
1000d2c2:	4798      	blx	r3
1000d2c4:	260e      	movs	r6, #14
1000d2c6:	e0bc      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d2c8:	9801      	ldr	r0, [sp, #4]
1000d2ca:	1c31      	adds	r1, r6, #0
1000d2cc:	1c2a      	adds	r2, r5, #0
1000d2ce:	4b7b      	ldr	r3, [pc, #492]	; (1000d4bc <at_ble_event_get+0x664>)
1000d2d0:	4798      	blx	r3
1000d2d2:	e084      	b.n	1000d3de <at_ble_event_get+0x586>
1000d2d4:	1c31      	adds	r1, r6, #0
1000d2d6:	9801      	ldr	r0, [sp, #4]
1000d2d8:	1c2a      	adds	r2, r5, #0
1000d2da:	4b79      	ldr	r3, [pc, #484]	; (1000d4c0 <at_ble_event_get+0x668>)
1000d2dc:	4798      	blx	r3
1000d2de:	260b      	movs	r6, #11
1000d2e0:	e0af      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d2e2:	1c31      	adds	r1, r6, #0
1000d2e4:	9801      	ldr	r0, [sp, #4]
1000d2e6:	1c2a      	adds	r2, r5, #0
1000d2e8:	4b76      	ldr	r3, [pc, #472]	; (1000d4c4 <at_ble_event_get+0x66c>)
1000d2ea:	4798      	blx	r3
1000d2ec:	2610      	movs	r6, #16
1000d2ee:	e0a8      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d2f0:	1c30      	adds	r0, r6, #0
1000d2f2:	1c29      	adds	r1, r5, #0
1000d2f4:	4b74      	ldr	r3, [pc, #464]	; (1000d4c8 <at_ble_event_get+0x670>)
1000d2f6:	4798      	blx	r3
1000d2f8:	2628      	movs	r6, #40	; 0x28
1000d2fa:	e0a2      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d2fc:	1c30      	adds	r0, r6, #0
1000d2fe:	1c29      	adds	r1, r5, #0
1000d300:	4b72      	ldr	r3, [pc, #456]	; (1000d4cc <at_ble_event_get+0x674>)
1000d302:	4798      	blx	r3
1000d304:	2629      	movs	r6, #41	; 0x29
1000d306:	e09c      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d308:	1c30      	adds	r0, r6, #0
1000d30a:	1c29      	adds	r1, r5, #0
1000d30c:	4b70      	ldr	r3, [pc, #448]	; (1000d4d0 <at_ble_event_get+0x678>)
1000d30e:	4798      	blx	r3
1000d310:	2627      	movs	r6, #39	; 0x27
1000d312:	e096      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d314:	1c30      	adds	r0, r6, #0
1000d316:	1c29      	adds	r1, r5, #0
1000d318:	4b6e      	ldr	r3, [pc, #440]	; (1000d4d4 <at_ble_event_get+0x67c>)
1000d31a:	4798      	blx	r3
1000d31c:	262a      	movs	r6, #42	; 0x2a
1000d31e:	e090      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d320:	9801      	ldr	r0, [sp, #4]
1000d322:	1c31      	adds	r1, r6, #0
1000d324:	1c2a      	adds	r2, r5, #0
1000d326:	4b6c      	ldr	r3, [pc, #432]	; (1000d4d8 <at_ble_event_get+0x680>)
1000d328:	e7b9      	b.n	1000d29e <at_ble_event_get+0x446>
1000d32a:	9801      	ldr	r0, [sp, #4]
1000d32c:	1c31      	adds	r1, r6, #0
1000d32e:	1c2a      	adds	r2, r5, #0
1000d330:	4b6a      	ldr	r3, [pc, #424]	; (1000d4dc <at_ble_event_get+0x684>)
1000d332:	e7b4      	b.n	1000d29e <at_ble_event_get+0x446>
1000d334:	1c30      	adds	r0, r6, #0
1000d336:	1c29      	adds	r1, r5, #0
1000d338:	4b69      	ldr	r3, [pc, #420]	; (1000d4e0 <at_ble_event_get+0x688>)
1000d33a:	4798      	blx	r3
1000d33c:	262b      	movs	r6, #43	; 0x2b
1000d33e:	e080      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d340:	1c30      	adds	r0, r6, #0
1000d342:	1c29      	adds	r1, r5, #0
1000d344:	4b67      	ldr	r3, [pc, #412]	; (1000d4e4 <at_ble_event_get+0x68c>)
1000d346:	4798      	blx	r3
1000d348:	262c      	movs	r6, #44	; 0x2c
1000d34a:	e07a      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d34c:	1c31      	adds	r1, r6, #0
1000d34e:	9801      	ldr	r0, [sp, #4]
1000d350:	1c2a      	adds	r2, r5, #0
1000d352:	4b65      	ldr	r3, [pc, #404]	; (1000d4e8 <at_ble_event_get+0x690>)
1000d354:	4798      	blx	r3
1000d356:	2613      	movs	r6, #19
1000d358:	e073      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d35a:	1c31      	adds	r1, r6, #0
1000d35c:	9801      	ldr	r0, [sp, #4]
1000d35e:	1c2a      	adds	r2, r5, #0
1000d360:	4b62      	ldr	r3, [pc, #392]	; (1000d4ec <at_ble_event_get+0x694>)
1000d362:	4798      	blx	r3
1000d364:	2614      	movs	r6, #20
1000d366:	e06c      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d368:	1c31      	adds	r1, r6, #0
1000d36a:	9801      	ldr	r0, [sp, #4]
1000d36c:	1c2a      	adds	r2, r5, #0
1000d36e:	4b60      	ldr	r3, [pc, #384]	; (1000d4f0 <at_ble_event_get+0x698>)
1000d370:	4798      	blx	r3
1000d372:	2615      	movs	r6, #21
1000d374:	e065      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d376:	1c31      	adds	r1, r6, #0
1000d378:	9801      	ldr	r0, [sp, #4]
1000d37a:	1c2a      	adds	r2, r5, #0
1000d37c:	4b5d      	ldr	r3, [pc, #372]	; (1000d4f4 <at_ble_event_get+0x69c>)
1000d37e:	4798      	blx	r3
1000d380:	2616      	movs	r6, #22
1000d382:	e05e      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d384:	9801      	ldr	r0, [sp, #4]
1000d386:	1c31      	adds	r1, r6, #0
1000d388:	1c2a      	adds	r2, r5, #0
1000d38a:	4b5b      	ldr	r3, [pc, #364]	; (1000d4f8 <at_ble_event_get+0x6a0>)
1000d38c:	e787      	b.n	1000d29e <at_ble_event_get+0x446>
1000d38e:	1c31      	adds	r1, r6, #0
1000d390:	9801      	ldr	r0, [sp, #4]
1000d392:	1c2a      	adds	r2, r5, #0
1000d394:	4b58      	ldr	r3, [pc, #352]	; (1000d4f8 <at_ble_event_get+0x6a0>)
1000d396:	4798      	blx	r3
1000d398:	88a9      	ldrh	r1, [r5, #4]
1000d39a:	1c06      	adds	r6, r0, #0
1000d39c:	4b57      	ldr	r3, [pc, #348]	; (1000d4fc <at_ble_event_get+0x6a4>)
1000d39e:	8828      	ldrh	r0, [r5, #0]
1000d3a0:	4798      	blx	r3
1000d3a2:	e04e      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d3a4:	1c31      	adds	r1, r6, #0
1000d3a6:	9801      	ldr	r0, [sp, #4]
1000d3a8:	1c2a      	adds	r2, r5, #0
1000d3aa:	4b55      	ldr	r3, [pc, #340]	; (1000d500 <at_ble_event_get+0x6a8>)
1000d3ac:	4798      	blx	r3
1000d3ae:	2623      	movs	r6, #35	; 0x23
1000d3b0:	e047      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d3b2:	9801      	ldr	r0, [sp, #4]
1000d3b4:	1c31      	adds	r1, r6, #0
1000d3b6:	1c2a      	adds	r2, r5, #0
1000d3b8:	4b52      	ldr	r3, [pc, #328]	; (1000d504 <at_ble_event_get+0x6ac>)
1000d3ba:	e770      	b.n	1000d29e <at_ble_event_get+0x446>
1000d3bc:	9b01      	ldr	r3, [sp, #4]
1000d3be:	1c30      	adds	r0, r6, #0
1000d3c0:	0a1f      	lsrs	r7, r3, #8
1000d3c2:	802f      	strh	r7, [r5, #0]
1000d3c4:	1c29      	adds	r1, r5, #0
1000d3c6:	4b50      	ldr	r3, [pc, #320]	; (1000d508 <at_ble_event_get+0x6b0>)
1000d3c8:	e749      	b.n	1000d25e <at_ble_event_get+0x406>
1000d3ca:	9801      	ldr	r0, [sp, #4]
1000d3cc:	1c31      	adds	r1, r6, #0
1000d3ce:	1c2a      	adds	r2, r5, #0
1000d3d0:	4b4e      	ldr	r3, [pc, #312]	; (1000d50c <at_ble_event_get+0x6b4>)
1000d3d2:	e764      	b.n	1000d29e <at_ble_event_get+0x446>
1000d3d4:	1c30      	adds	r0, r6, #0
1000d3d6:	1c29      	adds	r1, r5, #0
1000d3d8:	9a01      	ldr	r2, [sp, #4]
1000d3da:	4b4d      	ldr	r3, [pc, #308]	; (1000d510 <at_ble_event_get+0x6b8>)
1000d3dc:	4798      	blx	r3
1000d3de:	263b      	movs	r6, #59	; 0x3b
1000d3e0:	e02f      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d3e2:	1c31      	adds	r1, r6, #0
1000d3e4:	9801      	ldr	r0, [sp, #4]
1000d3e6:	1c2a      	adds	r2, r5, #0
1000d3e8:	4b4a      	ldr	r3, [pc, #296]	; (1000d514 <at_ble_event_get+0x6bc>)
1000d3ea:	4798      	blx	r3
1000d3ec:	2618      	movs	r6, #24
1000d3ee:	e028      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d3f0:	1c31      	adds	r1, r6, #0
1000d3f2:	9801      	ldr	r0, [sp, #4]
1000d3f4:	1c2a      	adds	r2, r5, #0
1000d3f6:	4b48      	ldr	r3, [pc, #288]	; (1000d518 <at_ble_event_get+0x6c0>)
1000d3f8:	4798      	blx	r3
1000d3fa:	2620      	movs	r6, #32
1000d3fc:	e021      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d3fe:	1c31      	adds	r1, r6, #0
1000d400:	9801      	ldr	r0, [sp, #4]
1000d402:	1c2a      	adds	r2, r5, #0
1000d404:	4b45      	ldr	r3, [pc, #276]	; (1000d51c <at_ble_event_get+0x6c4>)
1000d406:	4798      	blx	r3
1000d408:	2633      	movs	r6, #51	; 0x33
1000d40a:	e01a      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d40c:	1c31      	adds	r1, r6, #0
1000d40e:	9801      	ldr	r0, [sp, #4]
1000d410:	1c2a      	adds	r2, r5, #0
1000d412:	4b43      	ldr	r3, [pc, #268]	; (1000d520 <at_ble_event_get+0x6c8>)
1000d414:	4798      	blx	r3
1000d416:	2630      	movs	r6, #48	; 0x30
1000d418:	e013      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d41a:	1c31      	adds	r1, r6, #0
1000d41c:	9801      	ldr	r0, [sp, #4]
1000d41e:	1c2a      	adds	r2, r5, #0
1000d420:	4b40      	ldr	r3, [pc, #256]	; (1000d524 <at_ble_event_get+0x6cc>)
1000d422:	4798      	blx	r3
1000d424:	2634      	movs	r6, #52	; 0x34
1000d426:	e00c      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d428:	1c31      	adds	r1, r6, #0
1000d42a:	9801      	ldr	r0, [sp, #4]
1000d42c:	1c2a      	adds	r2, r5, #0
1000d42e:	4b3e      	ldr	r3, [pc, #248]	; (1000d528 <at_ble_event_get+0x6d0>)
1000d430:	4798      	blx	r3
1000d432:	2635      	movs	r6, #53	; 0x35
1000d434:	e005      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d436:	1c31      	adds	r1, r6, #0
1000d438:	9801      	ldr	r0, [sp, #4]
1000d43a:	1c2a      	adds	r2, r5, #0
1000d43c:	4b3b      	ldr	r3, [pc, #236]	; (1000d52c <at_ble_event_get+0x6d4>)
1000d43e:	4798      	blx	r3
1000d440:	2632      	movs	r6, #50	; 0x32
1000d442:	9b03      	ldr	r3, [sp, #12]
1000d444:	701e      	strb	r6, [r3, #0]
1000d446:	2300      	movs	r3, #0
1000d448:	9302      	str	r3, [sp, #8]
1000d44a:	e57a      	b.n	1000cf42 <at_ble_event_get+0xea>
1000d44c:	23d0      	movs	r3, #208	; 0xd0
1000d44e:	e7fb      	b.n	1000d448 <at_ble_event_get+0x5f0>
1000d450:	9b01      	ldr	r3, [sp, #4]
1000d452:	9e02      	ldr	r6, [sp, #8]
1000d454:	2bbb      	cmp	r3, #187	; 0xbb
1000d456:	d000      	beq.n	1000d45a <at_ble_event_get+0x602>
1000d458:	e6e6      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d45a:	e7f2      	b.n	1000d442 <at_ble_event_get+0x5ea>
1000d45c:	9b02      	ldr	r3, [sp, #8]
1000d45e:	2b00      	cmp	r3, #0
1000d460:	d000      	beq.n	1000d464 <at_ble_event_get+0x60c>
1000d462:	e56e      	b.n	1000cf42 <at_ble_event_get+0xea>
1000d464:	e6e0      	b.n	1000d228 <at_ble_event_get+0x3d0>
1000d466:	9802      	ldr	r0, [sp, #8]
1000d468:	b007      	add	sp, #28
1000d46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d46c:	00000e22 	.word	0x00000e22
1000d470:	00000e25 	.word	0x00000e25
1000d474:	00001b05 	.word	0x00001b05
1000d478:	00001b01 	.word	0x00001b01
1000d47c:	00001b03 	.word	0x00001b03
1000d480:	00001b06 	.word	0x00001b06
1000d484:	00001b08 	.word	0x00001b08
1000d488:	1000ee31 	.word	0x1000ee31
1000d48c:	1000ee15 	.word	0x1000ee15
1000d490:	1000ef79 	.word	0x1000ef79
1000d494:	1000f069 	.word	0x1000f069
1000d498:	1000f08d 	.word	0x1000f08d
1000d49c:	1000e1a9 	.word	0x1000e1a9
1000d4a0:	1000ea29 	.word	0x1000ea29
1000d4a4:	1000eaa5 	.word	0x1000eaa5
1000d4a8:	1000e461 	.word	0x1000e461
1000d4ac:	1000e4fd 	.word	0x1000e4fd
1000d4b0:	1000e5d5 	.word	0x1000e5d5
1000d4b4:	1000e85d 	.word	0x1000e85d
1000d4b8:	1000e8fd 	.word	0x1000e8fd
1000d4bc:	1000e9b5 	.word	0x1000e9b5
1000d4c0:	1000e9dd 	.word	0x1000e9dd
1000d4c4:	1000e9f3 	.word	0x1000e9f3
1000d4c8:	1000eabd 	.word	0x1000eabd
1000d4cc:	1000eaeb 	.word	0x1000eaeb
1000d4d0:	1000eb01 	.word	0x1000eb01
1000d4d4:	1000eb2b 	.word	0x1000eb2b
1000d4d8:	1000e959 	.word	0x1000e959
1000d4dc:	1000e983 	.word	0x1000e983
1000d4e0:	1000dbe9 	.word	0x1000dbe9
1000d4e4:	1000dc15 	.word	0x1000dc15
1000d4e8:	1000f235 	.word	0x1000f235
1000d4ec:	1000f271 	.word	0x1000f271
1000d4f0:	1000f2b9 	.word	0x1000f2b9
1000d4f4:	1000f2fd 	.word	0x1000f2fd
1000d4f8:	1000f331 	.word	0x1000f331
1000d4fc:	1000f1f5 	.word	0x1000f1f5
1000d500:	1000f3fd 	.word	0x1000f3fd
1000d504:	1000f385 	.word	0x1000f385
1000d508:	1000db41 	.word	0x1000db41
1000d50c:	1000dbad 	.word	0x1000dbad
1000d510:	1000db71 	.word	0x1000db71
1000d514:	1000f40d 	.word	0x1000f40d
1000d518:	1000f44d 	.word	0x1000f44d
1000d51c:	1000f599 	.word	0x1000f599
1000d520:	1000f5a3 	.word	0x1000f5a3
1000d524:	1000f5a9 	.word	0x1000f5a9
1000d528:	1000f5af 	.word	0x1000f5af
1000d52c:	1000f5bb 	.word	0x1000f5bb

1000d530 <internal_event_flush>:
1000d530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d532:	490e      	ldr	r1, [pc, #56]	; (1000d56c <internal_event_flush+0x3c>)
1000d534:	2400      	movs	r4, #0
1000d536:	680b      	ldr	r3, [r1, #0]
1000d538:	1c0f      	adds	r7, r1, #0
1000d53a:	1c1e      	adds	r6, r3, #0
1000d53c:	4a0c      	ldr	r2, [pc, #48]	; (1000d570 <internal_event_flush+0x40>)
1000d53e:	6815      	ldr	r5, [r2, #0]
1000d540:	9201      	str	r2, [sp, #4]
1000d542:	2b00      	cmp	r3, #0
1000d544:	d00e      	beq.n	1000d564 <internal_event_flush+0x34>
1000d546:	889a      	ldrh	r2, [r3, #4]
1000d548:	6819      	ldr	r1, [r3, #0]
1000d54a:	4282      	cmp	r2, r0
1000d54c:	d107      	bne.n	1000d55e <internal_event_flush+0x2e>
1000d54e:	2c00      	cmp	r4, #0
1000d550:	d001      	beq.n	1000d556 <internal_event_flush+0x26>
1000d552:	6021      	str	r1, [r4, #0]
1000d554:	e000      	b.n	1000d558 <internal_event_flush+0x28>
1000d556:	1c0e      	adds	r6, r1, #0
1000d558:	601d      	str	r5, [r3, #0]
1000d55a:	1c1d      	adds	r5, r3, #0
1000d55c:	1c23      	adds	r3, r4, #0
1000d55e:	1c1c      	adds	r4, r3, #0
1000d560:	1c0b      	adds	r3, r1, #0
1000d562:	e7ee      	b.n	1000d542 <internal_event_flush+0x12>
1000d564:	9b01      	ldr	r3, [sp, #4]
1000d566:	603e      	str	r6, [r7, #0]
1000d568:	601d      	str	r5, [r3, #0]
1000d56a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d56c:	10014b9c 	.word	0x10014b9c
1000d570:	10014ba0 	.word	0x10014ba0

1000d574 <internal_conn_flush>:
1000d574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d576:	4a12      	ldr	r2, [pc, #72]	; (1000d5c0 <internal_conn_flush+0x4c>)
1000d578:	9000      	str	r0, [sp, #0]
1000d57a:	6813      	ldr	r3, [r2, #0]
1000d57c:	4811      	ldr	r0, [pc, #68]	; (1000d5c4 <internal_conn_flush+0x50>)
1000d57e:	1c1f      	adds	r7, r3, #0
1000d580:	2100      	movs	r1, #0
1000d582:	4684      	mov	ip, r0
1000d584:	6804      	ldr	r4, [r0, #0]
1000d586:	9201      	str	r2, [sp, #4]
1000d588:	2b00      	cmp	r3, #0
1000d58a:	d014      	beq.n	1000d5b6 <internal_conn_flush+0x42>
1000d58c:	88d8      	ldrh	r0, [r3, #6]
1000d58e:	9a00      	ldr	r2, [sp, #0]
1000d590:	681d      	ldr	r5, [r3, #0]
1000d592:	0a06      	lsrs	r6, r0, #8
1000d594:	4296      	cmp	r6, r2
1000d596:	d10b      	bne.n	1000d5b0 <internal_conn_flush+0x3c>
1000d598:	26fd      	movs	r6, #253	; 0xfd
1000d59a:	4006      	ands	r6, r0
1000d59c:	2e0c      	cmp	r6, #12
1000d59e:	d107      	bne.n	1000d5b0 <internal_conn_flush+0x3c>
1000d5a0:	2900      	cmp	r1, #0
1000d5a2:	d001      	beq.n	1000d5a8 <internal_conn_flush+0x34>
1000d5a4:	600d      	str	r5, [r1, #0]
1000d5a6:	e000      	b.n	1000d5aa <internal_conn_flush+0x36>
1000d5a8:	1c2f      	adds	r7, r5, #0
1000d5aa:	601c      	str	r4, [r3, #0]
1000d5ac:	1c1c      	adds	r4, r3, #0
1000d5ae:	1c0b      	adds	r3, r1, #0
1000d5b0:	1c19      	adds	r1, r3, #0
1000d5b2:	1c2b      	adds	r3, r5, #0
1000d5b4:	e7e8      	b.n	1000d588 <internal_conn_flush+0x14>
1000d5b6:	9b01      	ldr	r3, [sp, #4]
1000d5b8:	601f      	str	r7, [r3, #0]
1000d5ba:	4663      	mov	r3, ip
1000d5bc:	601c      	str	r4, [r3, #0]
1000d5be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d5c0:	10014b9c 	.word	0x10014b9c
1000d5c4:	10014ba0 	.word	0x10014ba0

1000d5c8 <at_ble_device_name_set>:
1000d5c8:	b530      	push	{r4, r5, lr}
1000d5ca:	23cf      	movs	r3, #207	; 0xcf
1000d5cc:	2800      	cmp	r0, #0
1000d5ce:	d010      	beq.n	1000d5f2 <at_ble_device_name_set+0x2a>
1000d5d0:	1e4a      	subs	r2, r1, #1
1000d5d2:	2a1f      	cmp	r2, #31
1000d5d4:	d80d      	bhi.n	1000d5f2 <at_ble_device_name_set+0x2a>
1000d5d6:	4a08      	ldr	r2, [pc, #32]	; (1000d5f8 <at_ble_device_name_set+0x30>)
1000d5d8:	1c13      	adds	r3, r2, #0
1000d5da:	33aa      	adds	r3, #170	; 0xaa
1000d5dc:	8019      	strh	r1, [r3, #0]
1000d5de:	2300      	movs	r3, #0
1000d5e0:	1c1c      	adds	r4, r3, #0
1000d5e2:	5cc5      	ldrb	r5, [r0, r3]
1000d5e4:	34ac      	adds	r4, #172	; 0xac
1000d5e6:	3301      	adds	r3, #1
1000d5e8:	5515      	strb	r5, [r2, r4]
1000d5ea:	b2dc      	uxtb	r4, r3
1000d5ec:	428c      	cmp	r4, r1
1000d5ee:	d3f7      	bcc.n	1000d5e0 <at_ble_device_name_set+0x18>
1000d5f0:	2300      	movs	r3, #0
1000d5f2:	1c18      	adds	r0, r3, #0
1000d5f4:	bd30      	pop	{r4, r5, pc}
1000d5f6:	46c0      	nop			; (mov r8, r8)
1000d5f8:	10015982 	.word	0x10015982

1000d5fc <at_ble_addr_get>:
1000d5fc:	b510      	push	{r4, lr}
1000d5fe:	1c04      	adds	r4, r0, #0
1000d600:	20cf      	movs	r0, #207	; 0xcf
1000d602:	2c00      	cmp	r4, #0
1000d604:	d006      	beq.n	1000d614 <at_ble_addr_get+0x18>
1000d606:	4b04      	ldr	r3, [pc, #16]	; (1000d618 <at_ble_addr_get+0x1c>)
1000d608:	38ce      	subs	r0, #206	; 0xce
1000d60a:	1c21      	adds	r1, r4, #0
1000d60c:	4798      	blx	r3
1000d60e:	4b03      	ldr	r3, [pc, #12]	; (1000d61c <at_ble_addr_get+0x20>)
1000d610:	791b      	ldrb	r3, [r3, #4]
1000d612:	7023      	strb	r3, [r4, #0]
1000d614:	bd10      	pop	{r4, pc}
1000d616:	46c0      	nop			; (mov r8, r8)
1000d618:	1000ecc5 	.word	0x1000ecc5
1000d61c:	10015982 	.word	0x10015982

1000d620 <at_ble_set_dev_config>:
1000d620:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d622:	7906      	ldrb	r6, [r0, #4]
1000d624:	b089      	sub	sp, #36	; 0x24
1000d626:	25cf      	movs	r5, #207	; 0xcf
1000d628:	2e03      	cmp	r6, #3
1000d62a:	d838      	bhi.n	1000d69e <at_ble_set_dev_config+0x7e>
1000d62c:	7803      	ldrb	r3, [r0, #0]
1000d62e:	3511      	adds	r5, #17
1000d630:	2b0f      	cmp	r3, #15
1000d632:	d834      	bhi.n	1000d69e <at_ble_set_dev_config+0x7e>
1000d634:	2380      	movs	r3, #128	; 0x80
1000d636:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d638:	3d11      	subs	r5, #17
1000d63a:	009b      	lsls	r3, r3, #2
1000d63c:	429f      	cmp	r7, r3
1000d63e:	d82e      	bhi.n	1000d69e <at_ble_set_dev_config+0x7e>
1000d640:	7fc5      	ldrb	r5, [r0, #31]
1000d642:	7f83      	ldrb	r3, [r0, #30]
1000d644:	01ad      	lsls	r5, r5, #6
1000d646:	015b      	lsls	r3, r3, #5
1000d648:	431d      	orrs	r5, r3
1000d64a:	7ec3      	ldrb	r3, [r0, #27]
1000d64c:	431d      	orrs	r5, r3
1000d64e:	7f43      	ldrb	r3, [r0, #29]
1000d650:	011b      	lsls	r3, r3, #4
1000d652:	431d      	orrs	r5, r3
1000d654:	7f03      	ldrb	r3, [r0, #28]
1000d656:	009b      	lsls	r3, r3, #2
1000d658:	431d      	orrs	r5, r3
1000d65a:	4b12      	ldr	r3, [pc, #72]	; (1000d6a4 <at_ble_set_dev_config+0x84>)
1000d65c:	b2ed      	uxtb	r5, r5
1000d65e:	711e      	strb	r6, [r3, #4]
1000d660:	7903      	ldrb	r3, [r0, #4]
1000d662:	3b02      	subs	r3, #2
1000d664:	2b01      	cmp	r3, #1
1000d666:	d801      	bhi.n	1000d66c <at_ble_set_dev_config+0x4c>
1000d668:	2302      	movs	r3, #2
1000d66a:	7103      	strb	r3, [r0, #4]
1000d66c:	1c04      	adds	r4, r0, #0
1000d66e:	1c23      	adds	r3, r4, #0
1000d670:	330b      	adds	r3, #11
1000d672:	8861      	ldrh	r1, [r4, #2]
1000d674:	9307      	str	r3, [sp, #28]
1000d676:	7923      	ldrb	r3, [r4, #4]
1000d678:	7800      	ldrb	r0, [r0, #0]
1000d67a:	9300      	str	r3, [sp, #0]
1000d67c:	9501      	str	r5, [sp, #4]
1000d67e:	8c25      	ldrh	r5, [r4, #32]
1000d680:	1d62      	adds	r2, r4, #5
1000d682:	9502      	str	r5, [sp, #8]
1000d684:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d686:	9b07      	ldr	r3, [sp, #28]
1000d688:	9503      	str	r5, [sp, #12]
1000d68a:	9704      	str	r7, [sp, #16]
1000d68c:	4d06      	ldr	r5, [pc, #24]	; (1000d6a8 <at_ble_set_dev_config+0x88>)
1000d68e:	47a8      	blx	r5
1000d690:	7126      	strb	r6, [r4, #4]
1000d692:	1c05      	adds	r5, r0, #0
1000d694:	1c21      	adds	r1, r4, #0
1000d696:	4803      	ldr	r0, [pc, #12]	; (1000d6a4 <at_ble_set_dev_config+0x84>)
1000d698:	2226      	movs	r2, #38	; 0x26
1000d69a:	4b04      	ldr	r3, [pc, #16]	; (1000d6ac <at_ble_set_dev_config+0x8c>)
1000d69c:	4798      	blx	r3
1000d69e:	1c28      	adds	r0, r5, #0
1000d6a0:	b009      	add	sp, #36	; 0x24
1000d6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6a4:	10015982 	.word	0x10015982
1000d6a8:	1000ebbd 	.word	0x1000ebbd
1000d6ac:	1001134f 	.word	0x1001134f

1000d6b0 <at_ble_init>:
1000d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6b2:	b087      	sub	sp, #28
1000d6b4:	af03      	add	r7, sp, #12
1000d6b6:	4954      	ldr	r1, [pc, #336]	; (1000d808 <at_ble_init+0x158>)
1000d6b8:	220b      	movs	r2, #11
1000d6ba:	4b54      	ldr	r3, [pc, #336]	; (1000d80c <at_ble_init+0x15c>)
1000d6bc:	1c04      	adds	r4, r0, #0
1000d6be:	1c38      	adds	r0, r7, #0
1000d6c0:	4798      	blx	r3
1000d6c2:	2205      	movs	r2, #5
1000d6c4:	4b52      	ldr	r3, [pc, #328]	; (1000d810 <at_ble_init+0x160>)
1000d6c6:	2640      	movs	r6, #64	; 0x40
1000d6c8:	801a      	strh	r2, [r3, #0]
1000d6ca:	2300      	movs	r3, #0
1000d6cc:	4a51      	ldr	r2, [pc, #324]	; (1000d814 <at_ble_init+0x164>)
1000d6ce:	6013      	str	r3, [r2, #0]
1000d6d0:	4a51      	ldr	r2, [pc, #324]	; (1000d818 <at_ble_init+0x168>)
1000d6d2:	7013      	strb	r3, [r2, #0]
1000d6d4:	4a51      	ldr	r2, [pc, #324]	; (1000d81c <at_ble_init+0x16c>)
1000d6d6:	7013      	strb	r3, [r2, #0]
1000d6d8:	4b51      	ldr	r3, [pc, #324]	; (1000d820 <at_ble_init+0x170>)
1000d6da:	4798      	blx	r3
1000d6dc:	4b51      	ldr	r3, [pc, #324]	; (1000d824 <at_ble_init+0x174>)
1000d6de:	4798      	blx	r3
1000d6e0:	4b51      	ldr	r3, [pc, #324]	; (1000d828 <at_ble_init+0x178>)
1000d6e2:	4798      	blx	r3
1000d6e4:	4b51      	ldr	r3, [pc, #324]	; (1000d82c <at_ble_init+0x17c>)
1000d6e6:	4798      	blx	r3
1000d6e8:	2c00      	cmp	r4, #0
1000d6ea:	d100      	bne.n	1000d6ee <at_ble_init+0x3e>
1000d6ec:	e089      	b.n	1000d802 <at_ble_init+0x152>
1000d6ee:	68a3      	ldr	r3, [r4, #8]
1000d6f0:	2b00      	cmp	r3, #0
1000d6f2:	d100      	bne.n	1000d6f6 <at_ble_init+0x46>
1000d6f4:	e085      	b.n	1000d802 <at_ble_init+0x152>
1000d6f6:	6923      	ldr	r3, [r4, #16]
1000d6f8:	2b00      	cmp	r3, #0
1000d6fa:	d100      	bne.n	1000d6fe <at_ble_init+0x4e>
1000d6fc:	e081      	b.n	1000d802 <at_ble_init+0x152>
1000d6fe:	6820      	ldr	r0, [r4, #0]
1000d700:	2800      	cmp	r0, #0
1000d702:	d102      	bne.n	1000d70a <at_ble_init+0x5a>
1000d704:	6863      	ldr	r3, [r4, #4]
1000d706:	2b00      	cmp	r3, #0
1000d708:	d17b      	bne.n	1000d802 <at_ble_init+0x152>
1000d70a:	4b49      	ldr	r3, [pc, #292]	; (1000d830 <at_ble_init+0x180>)
1000d70c:	6861      	ldr	r1, [r4, #4]
1000d70e:	4798      	blx	r3
1000d710:	4b48      	ldr	r3, [pc, #288]	; (1000d834 <at_ble_init+0x184>)
1000d712:	4798      	blx	r3
1000d714:	2801      	cmp	r0, #1
1000d716:	d901      	bls.n	1000d71c <at_ble_init+0x6c>
1000d718:	26e2      	movs	r6, #226	; 0xe2
1000d71a:	e072      	b.n	1000d802 <at_ble_init+0x152>
1000d71c:	4846      	ldr	r0, [pc, #280]	; (1000d838 <at_ble_init+0x188>)
1000d71e:	4b47      	ldr	r3, [pc, #284]	; (1000d83c <at_ble_init+0x18c>)
1000d720:	4798      	blx	r3
1000d722:	2800      	cmp	r0, #0
1000d724:	d1f8      	bne.n	1000d718 <at_ble_init+0x68>
1000d726:	1c20      	adds	r0, r4, #0
1000d728:	4b45      	ldr	r3, [pc, #276]	; (1000d840 <at_ble_init+0x190>)
1000d72a:	4798      	blx	r3
1000d72c:	68e0      	ldr	r0, [r4, #12]
1000d72e:	68a1      	ldr	r1, [r4, #8]
1000d730:	4b44      	ldr	r3, [pc, #272]	; (1000d844 <at_ble_init+0x194>)
1000d732:	4798      	blx	r3
1000d734:	466b      	mov	r3, sp
1000d736:	2201      	movs	r2, #1
1000d738:	1cdc      	adds	r4, r3, #3
1000d73a:	1c20      	adds	r0, r4, #0
1000d73c:	a901      	add	r1, sp, #4
1000d73e:	4252      	negs	r2, r2
1000d740:	4b41      	ldr	r3, [pc, #260]	; (1000d848 <at_ble_init+0x198>)
1000d742:	4798      	blx	r3
1000d744:	2800      	cmp	r0, #0
1000d746:	d102      	bne.n	1000d74e <at_ble_init+0x9e>
1000d748:	7823      	ldrb	r3, [r4, #0]
1000d74a:	2b39      	cmp	r3, #57	; 0x39
1000d74c:	d1f2      	bne.n	1000d734 <at_ble_init+0x84>
1000d74e:	4b3f      	ldr	r3, [pc, #252]	; (1000d84c <at_ble_init+0x19c>)
1000d750:	4798      	blx	r3
1000d752:	1e06      	subs	r6, r0, #0
1000d754:	d155      	bne.n	1000d802 <at_ble_init+0x152>
1000d756:	1c03      	adds	r3, r0, #0
1000d758:	2101      	movs	r1, #1
1000d75a:	4a3d      	ldr	r2, [pc, #244]	; (1000d850 <at_ble_init+0x1a0>)
1000d75c:	4249      	negs	r1, r1
1000d75e:	189a      	adds	r2, r3, r2
1000d760:	3312      	adds	r3, #18
1000d762:	8151      	strh	r1, [r2, #10]
1000d764:	2b90      	cmp	r3, #144	; 0x90
1000d766:	d1f7      	bne.n	1000d758 <at_ble_init+0xa8>
1000d768:	4c3a      	ldr	r4, [pc, #232]	; (1000d854 <at_ble_init+0x1a4>)
1000d76a:	3b81      	subs	r3, #129	; 0x81
1000d76c:	7023      	strb	r3, [r4, #0]
1000d76e:	4b3a      	ldr	r3, [pc, #232]	; (1000d858 <at_ble_init+0x1a8>)
1000d770:	4a3a      	ldr	r2, [pc, #232]	; (1000d85c <at_ble_init+0x1ac>)
1000d772:	8063      	strh	r3, [r4, #2]
1000d774:	2300      	movs	r3, #0
1000d776:	7123      	strb	r3, [r4, #4]
1000d778:	3301      	adds	r3, #1
1000d77a:	1e58      	subs	r0, r3, #1
1000d77c:	0119      	lsls	r1, r3, #4
1000d77e:	4301      	orrs	r1, r0
1000d780:	3302      	adds	r3, #2
1000d782:	7011      	strb	r1, [r2, #0]
1000d784:	3201      	adds	r2, #1
1000d786:	2b21      	cmp	r3, #33	; 0x21
1000d788:	d1f7      	bne.n	1000d77a <at_ble_init+0xca>
1000d78a:	33e0      	adds	r3, #224	; 0xe0
1000d78c:	33ff      	adds	r3, #255	; 0xff
1000d78e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d790:	1c23      	adds	r3, r4, #0
1000d792:	2500      	movs	r5, #0
1000d794:	3373      	adds	r3, #115	; 0x73
1000d796:	701d      	strb	r5, [r3, #0]
1000d798:	1c23      	adds	r3, r4, #0
1000d79a:	3372      	adds	r3, #114	; 0x72
1000d79c:	701d      	strb	r5, [r3, #0]
1000d79e:	1c23      	adds	r3, r4, #0
1000d7a0:	3376      	adds	r3, #118	; 0x76
1000d7a2:	701d      	strb	r5, [r3, #0]
1000d7a4:	1c23      	adds	r3, r4, #0
1000d7a6:	33cc      	adds	r3, #204	; 0xcc
1000d7a8:	801d      	strh	r5, [r3, #0]
1000d7aa:	1c22      	adds	r2, r4, #0
1000d7ac:	23a0      	movs	r3, #160	; 0xa0
1000d7ae:	32d0      	adds	r2, #208	; 0xd0
1000d7b0:	005b      	lsls	r3, r3, #1
1000d7b2:	8013      	strh	r3, [r2, #0]
1000d7b4:	1c22      	adds	r2, r4, #0
1000d7b6:	32ce      	adds	r2, #206	; 0xce
1000d7b8:	8013      	strh	r3, [r2, #0]
1000d7ba:	1c23      	adds	r3, r4, #0
1000d7bc:	33d2      	adds	r3, #210	; 0xd2
1000d7be:	801d      	strh	r5, [r3, #0]
1000d7c0:	22fa      	movs	r2, #250	; 0xfa
1000d7c2:	1c23      	adds	r3, r4, #0
1000d7c4:	0052      	lsls	r2, r2, #1
1000d7c6:	33d4      	adds	r3, #212	; 0xd4
1000d7c8:	801a      	strh	r2, [r3, #0]
1000d7ca:	1c23      	adds	r3, r4, #0
1000d7cc:	33d6      	adds	r3, #214	; 0xd6
1000d7ce:	701d      	strb	r5, [r3, #0]
1000d7d0:	1c20      	adds	r0, r4, #0
1000d7d2:	4b23      	ldr	r3, [pc, #140]	; (1000d860 <at_ble_init+0x1b0>)
1000d7d4:	76e5      	strb	r5, [r4, #27]
1000d7d6:	7725      	strb	r5, [r4, #28]
1000d7d8:	7765      	strb	r5, [r4, #29]
1000d7da:	77a5      	strb	r5, [r4, #30]
1000d7dc:	77e5      	strb	r5, [r4, #31]
1000d7de:	8425      	strh	r5, [r4, #32]
1000d7e0:	8465      	strh	r5, [r4, #34]	; 0x22
1000d7e2:	4798      	blx	r3
1000d7e4:	1c23      	adds	r3, r4, #0
1000d7e6:	2207      	movs	r2, #7
1000d7e8:	3374      	adds	r3, #116	; 0x74
1000d7ea:	701a      	strb	r2, [r3, #0]
1000d7ec:	1c23      	adds	r3, r4, #0
1000d7ee:	3204      	adds	r2, #4
1000d7f0:	33aa      	adds	r3, #170	; 0xaa
1000d7f2:	801a      	strh	r2, [r3, #0]
1000d7f4:	1c2b      	adds	r3, r5, #0
1000d7f6:	5d7a      	ldrb	r2, [r7, r5]
1000d7f8:	33ac      	adds	r3, #172	; 0xac
1000d7fa:	3501      	adds	r5, #1
1000d7fc:	54e2      	strb	r2, [r4, r3]
1000d7fe:	2d0b      	cmp	r5, #11
1000d800:	d1f8      	bne.n	1000d7f4 <at_ble_init+0x144>
1000d802:	1c30      	adds	r0, r6, #0
1000d804:	b007      	add	sp, #28
1000d806:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d808:	100133e0 	.word	0x100133e0
1000d80c:	1001134f 	.word	0x1001134f
1000d810:	100158f0 	.word	0x100158f0
1000d814:	10014c4c 	.word	0x10014c4c
1000d818:	10014bac 	.word	0x10014bac
1000d81c:	100135f8 	.word	0x100135f8
1000d820:	1000f45d 	.word	0x1000f45d
1000d824:	1000d941 	.word	0x1000d941
1000d828:	1000d9bd 	.word	0x1000d9bd
1000d82c:	1000dbdd 	.word	0x1000dbdd
1000d830:	1000d9f9 	.word	0x1000d9f9
1000d834:	1000ae69 	.word	0x1000ae69
1000d838:	1000dedd 	.word	0x1000dedd
1000d83c:	1000b0ad 	.word	0x1000b0ad
1000d840:	1000df85 	.word	0x1000df85
1000d844:	1000cd9d 	.word	0x1000cd9d
1000d848:	1000ce59 	.word	0x1000ce59
1000d84c:	1000eb4d 	.word	0x1000eb4d
1000d850:	100158f2 	.word	0x100158f2
1000d854:	10015982 	.word	0x10015982
1000d858:	00003a98 	.word	0x00003a98
1000d85c:	1001598d 	.word	0x1001598d
1000d860:	1000d621 	.word	0x1000d621

1000d864 <at_ble_addr_set>:
1000d864:	b538      	push	{r3, r4, r5, lr}
1000d866:	1c45      	adds	r5, r0, #1
1000d868:	1c03      	adds	r3, r0, #0
1000d86a:	20cf      	movs	r0, #207	; 0xcf
1000d86c:	2d00      	cmp	r5, #0
1000d86e:	d018      	beq.n	1000d8a2 <at_ble_addr_set+0x3e>
1000d870:	781a      	ldrb	r2, [r3, #0]
1000d872:	2a03      	cmp	r2, #3
1000d874:	d815      	bhi.n	1000d8a2 <at_ble_addr_set+0x3e>
1000d876:	2a01      	cmp	r2, #1
1000d878:	d102      	bne.n	1000d880 <at_ble_addr_set+0x1c>
1000d87a:	785a      	ldrb	r2, [r3, #1]
1000d87c:	2a00      	cmp	r2, #0
1000d87e:	d010      	beq.n	1000d8a2 <at_ble_addr_set+0x3e>
1000d880:	1c1c      	adds	r4, r3, #0
1000d882:	1c29      	adds	r1, r5, #0
1000d884:	2206      	movs	r2, #6
1000d886:	4b07      	ldr	r3, [pc, #28]	; (1000d8a4 <at_ble_addr_set+0x40>)
1000d888:	4807      	ldr	r0, [pc, #28]	; (1000d8a8 <at_ble_addr_set+0x44>)
1000d88a:	4798      	blx	r3
1000d88c:	7823      	ldrb	r3, [r4, #0]
1000d88e:	4807      	ldr	r0, [pc, #28]	; (1000d8ac <at_ble_addr_set+0x48>)
1000d890:	7103      	strb	r3, [r0, #4]
1000d892:	4b07      	ldr	r3, [pc, #28]	; (1000d8b0 <at_ble_addr_set+0x4c>)
1000d894:	4798      	blx	r3
1000d896:	7823      	ldrb	r3, [r4, #0]
1000d898:	2b00      	cmp	r3, #0
1000d89a:	d102      	bne.n	1000d8a2 <at_ble_addr_set+0x3e>
1000d89c:	1c28      	adds	r0, r5, #0
1000d89e:	4b05      	ldr	r3, [pc, #20]	; (1000d8b4 <at_ble_addr_set+0x50>)
1000d8a0:	4798      	blx	r3
1000d8a2:	bd38      	pop	{r3, r4, r5, pc}
1000d8a4:	1001134f 	.word	0x1001134f
1000d8a8:	10015987 	.word	0x10015987
1000d8ac:	10015982 	.word	0x10015982
1000d8b0:	1000d621 	.word	0x1000d621
1000d8b4:	1000e009 	.word	0x1000e009

1000d8b8 <at_ble_scan_stop>:
1000d8b8:	b510      	push	{r4, lr}
1000d8ba:	4b05      	ldr	r3, [pc, #20]	; (1000d8d0 <at_ble_scan_stop+0x18>)
1000d8bc:	4798      	blx	r3
1000d8be:	1e04      	subs	r4, r0, #0
1000d8c0:	d103      	bne.n	1000d8ca <at_ble_scan_stop+0x12>
1000d8c2:	20d1      	movs	r0, #209	; 0xd1
1000d8c4:	4b03      	ldr	r3, [pc, #12]	; (1000d8d4 <at_ble_scan_stop+0x1c>)
1000d8c6:	0100      	lsls	r0, r0, #4
1000d8c8:	4798      	blx	r3
1000d8ca:	1c20      	adds	r0, r4, #0
1000d8cc:	bd10      	pop	{r4, pc}
1000d8ce:	46c0      	nop			; (mov r8, r8)
1000d8d0:	1000eda5 	.word	0x1000eda5
1000d8d4:	1000d531 	.word	0x1000d531

1000d8d8 <at_ble_disconnect>:
1000d8d8:	b538      	push	{r3, r4, r5, lr}
1000d8da:	1c04      	adds	r4, r0, #0
1000d8dc:	4b04      	ldr	r3, [pc, #16]	; (1000d8f0 <at_ble_disconnect+0x18>)
1000d8de:	1c08      	adds	r0, r1, #0
1000d8e0:	1c21      	adds	r1, r4, #0
1000d8e2:	4798      	blx	r3
1000d8e4:	1c05      	adds	r5, r0, #0
1000d8e6:	4b03      	ldr	r3, [pc, #12]	; (1000d8f4 <at_ble_disconnect+0x1c>)
1000d8e8:	1c20      	adds	r0, r4, #0
1000d8ea:	4798      	blx	r3
1000d8ec:	1c28      	adds	r0, r5, #0
1000d8ee:	bd38      	pop	{r3, r4, r5, pc}
1000d8f0:	1000e41d 	.word	0x1000e41d
1000d8f4:	1000d575 	.word	0x1000d575

1000d8f8 <at_ble_conn_update_reply>:
1000d8f8:	b510      	push	{r4, lr}
1000d8fa:	4c01      	ldr	r4, [pc, #4]	; (1000d900 <at_ble_conn_update_reply+0x8>)
1000d8fc:	47a0      	blx	r4
1000d8fe:	bd10      	pop	{r4, pc}
1000d900:	1000e90d 	.word	0x1000e90d

1000d904 <at_ble_random_address_resolve>:
1000d904:	b510      	push	{r4, lr}
1000d906:	23cf      	movs	r3, #207	; 0xcf
1000d908:	2800      	cmp	r0, #0
1000d90a:	d00a      	beq.n	1000d922 <at_ble_random_address_resolve+0x1e>
1000d90c:	2900      	cmp	r1, #0
1000d90e:	d008      	beq.n	1000d922 <at_ble_random_address_resolve+0x1e>
1000d910:	2a00      	cmp	r2, #0
1000d912:	d006      	beq.n	1000d922 <at_ble_random_address_resolve+0x1e>
1000d914:	780c      	ldrb	r4, [r1, #0]
1000d916:	2c02      	cmp	r4, #2
1000d918:	d103      	bne.n	1000d922 <at_ble_random_address_resolve+0x1e>
1000d91a:	4b03      	ldr	r3, [pc, #12]	; (1000d928 <at_ble_random_address_resolve+0x24>)
1000d91c:	3101      	adds	r1, #1
1000d91e:	4798      	blx	r3
1000d920:	2300      	movs	r3, #0
1000d922:	1c18      	adds	r0, r3, #0
1000d924:	bd10      	pop	{r4, pc}
1000d926:	46c0      	nop			; (mov r8, r8)
1000d928:	1000f001 	.word	0x1000f001

1000d92c <at_ble_uuid_len2type>:
1000d92c:	1e83      	subs	r3, r0, #2
1000d92e:	b2db      	uxtb	r3, r3
1000d930:	2003      	movs	r0, #3
1000d932:	2b0e      	cmp	r3, #14
1000d934:	d801      	bhi.n	1000d93a <at_ble_uuid_len2type+0xe>
1000d936:	4a01      	ldr	r2, [pc, #4]	; (1000d93c <at_ble_uuid_len2type+0x10>)
1000d938:	5cd0      	ldrb	r0, [r2, r3]
1000d93a:	4770      	bx	lr
1000d93c:	100133eb 	.word	0x100133eb

1000d940 <init_gatt_client_module>:
1000d940:	2200      	movs	r2, #0
1000d942:	4b01      	ldr	r3, [pc, #4]	; (1000d948 <init_gatt_client_module+0x8>)
1000d944:	801a      	strh	r2, [r3, #0]
1000d946:	4770      	bx	lr
1000d948:	10014ba4 	.word	0x10014ba4

1000d94c <db_searchATT>:
1000d94c:	b570      	push	{r4, r5, r6, lr}
1000d94e:	1c05      	adds	r5, r0, #0
1000d950:	2400      	movs	r4, #0
1000d952:	4b0c      	ldr	r3, [pc, #48]	; (1000d984 <db_searchATT+0x38>)
1000d954:	6819      	ldr	r1, [r3, #0]
1000d956:	4b0c      	ldr	r3, [pc, #48]	; (1000d988 <db_searchATT+0x3c>)
1000d958:	681e      	ldr	r6, [r3, #0]
1000d95a:	428c      	cmp	r4, r1
1000d95c:	dc10      	bgt.n	1000d980 <db_searchATT+0x34>
1000d95e:	200c      	movs	r0, #12
1000d960:	1863      	adds	r3, r4, r1
1000d962:	0fda      	lsrs	r2, r3, #31
1000d964:	18d3      	adds	r3, r2, r3
1000d966:	1c02      	adds	r2, r0, #0
1000d968:	105b      	asrs	r3, r3, #1
1000d96a:	435a      	muls	r2, r3
1000d96c:	18b0      	adds	r0, r6, r2
1000d96e:	8802      	ldrh	r2, [r0, #0]
1000d970:	42aa      	cmp	r2, r5
1000d972:	d201      	bcs.n	1000d978 <db_searchATT+0x2c>
1000d974:	1e59      	subs	r1, r3, #1
1000d976:	e7f0      	b.n	1000d95a <db_searchATT+0xe>
1000d978:	42aa      	cmp	r2, r5
1000d97a:	d902      	bls.n	1000d982 <db_searchATT+0x36>
1000d97c:	1c5c      	adds	r4, r3, #1
1000d97e:	e7ec      	b.n	1000d95a <db_searchATT+0xe>
1000d980:	2000      	movs	r0, #0
1000d982:	bd70      	pop	{r4, r5, r6, pc}
1000d984:	10014bb8 	.word	0x10014bb8
1000d988:	10014bb0 	.word	0x10014bb0

1000d98c <at_ble_read_authorize_reply.part.1>:
1000d98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d98e:	4b09      	ldr	r3, [pc, #36]	; (1000d9b4 <at_ble_read_authorize_reply.part.1+0x28>)
1000d990:	1c05      	adds	r5, r0, #0
1000d992:	1c08      	adds	r0, r1, #0
1000d994:	1c0c      	adds	r4, r1, #0
1000d996:	4798      	blx	r3
1000d998:	2800      	cmp	r0, #0
1000d99a:	d009      	beq.n	1000d9b0 <at_ble_read_authorize_reply.part.1+0x24>
1000d99c:	6882      	ldr	r2, [r0, #8]
1000d99e:	2a00      	cmp	r2, #0
1000d9a0:	d006      	beq.n	1000d9b0 <at_ble_read_authorize_reply.part.1+0x24>
1000d9a2:	8883      	ldrh	r3, [r0, #4]
1000d9a4:	1c29      	adds	r1, r5, #0
1000d9a6:	9200      	str	r2, [sp, #0]
1000d9a8:	1c20      	adds	r0, r4, #0
1000d9aa:	2200      	movs	r2, #0
1000d9ac:	4c02      	ldr	r4, [pc, #8]	; (1000d9b8 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d9ae:	47a0      	blx	r4
1000d9b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d9b2:	46c0      	nop			; (mov r8, r8)
1000d9b4:	1000d94d 	.word	0x1000d94d
1000d9b8:	1000f0fd 	.word	0x1000f0fd

1000d9bc <initi_gatt_server_module>:
1000d9bc:	2300      	movs	r3, #0
1000d9be:	4a07      	ldr	r2, [pc, #28]	; (1000d9dc <initi_gatt_server_module+0x20>)
1000d9c0:	7013      	strb	r3, [r2, #0]
1000d9c2:	4a07      	ldr	r2, [pc, #28]	; (1000d9e0 <initi_gatt_server_module+0x24>)
1000d9c4:	6013      	str	r3, [r2, #0]
1000d9c6:	4a07      	ldr	r2, [pc, #28]	; (1000d9e4 <initi_gatt_server_module+0x28>)
1000d9c8:	6013      	str	r3, [r2, #0]
1000d9ca:	4a07      	ldr	r2, [pc, #28]	; (1000d9e8 <initi_gatt_server_module+0x2c>)
1000d9cc:	6013      	str	r3, [r2, #0]
1000d9ce:	4a07      	ldr	r2, [pc, #28]	; (1000d9ec <initi_gatt_server_module+0x30>)
1000d9d0:	6013      	str	r3, [r2, #0]
1000d9d2:	4a07      	ldr	r2, [pc, #28]	; (1000d9f0 <initi_gatt_server_module+0x34>)
1000d9d4:	6013      	str	r3, [r2, #0]
1000d9d6:	4a07      	ldr	r2, [pc, #28]	; (1000d9f4 <initi_gatt_server_module+0x38>)
1000d9d8:	6013      	str	r3, [r2, #0]
1000d9da:	4770      	bx	lr
1000d9dc:	10014bac 	.word	0x10014bac
1000d9e0:	10014bbc 	.word	0x10014bbc
1000d9e4:	10014bb8 	.word	0x10014bb8
1000d9e8:	10014ba8 	.word	0x10014ba8
1000d9ec:	10014bb4 	.word	0x10014bb4
1000d9f0:	10014bb0 	.word	0x10014bb0
1000d9f4:	10014bc0 	.word	0x10014bc0

1000d9f8 <db_init>:
1000d9f8:	4b0a      	ldr	r3, [pc, #40]	; (1000da24 <db_init+0x2c>)
1000d9fa:	4a0b      	ldr	r2, [pc, #44]	; (1000da28 <db_init+0x30>)
1000d9fc:	6018      	str	r0, [r3, #0]
1000d9fe:	084b      	lsrs	r3, r1, #1
1000da00:	6013      	str	r3, [r2, #0]
1000da02:	4a0a      	ldr	r2, [pc, #40]	; (1000da2c <db_init+0x34>)
1000da04:	18c3      	adds	r3, r0, r3
1000da06:	6013      	str	r3, [r2, #0]
1000da08:	4a09      	ldr	r2, [pc, #36]	; (1000da30 <db_init+0x38>)
1000da0a:	1841      	adds	r1, r0, r1
1000da0c:	6013      	str	r3, [r2, #0]
1000da0e:	2303      	movs	r3, #3
1000da10:	2200      	movs	r2, #0
1000da12:	3103      	adds	r1, #3
1000da14:	4399      	bics	r1, r3
1000da16:	4b07      	ldr	r3, [pc, #28]	; (1000da34 <db_init+0x3c>)
1000da18:	3904      	subs	r1, #4
1000da1a:	6019      	str	r1, [r3, #0]
1000da1c:	4b06      	ldr	r3, [pc, #24]	; (1000da38 <db_init+0x40>)
1000da1e:	601a      	str	r2, [r3, #0]
1000da20:	4770      	bx	lr
1000da22:	46c0      	nop			; (mov r8, r8)
1000da24:	10014bc0 	.word	0x10014bc0
1000da28:	10014bbc 	.word	0x10014bbc
1000da2c:	10014ba8 	.word	0x10014ba8
1000da30:	10014bb4 	.word	0x10014bb4
1000da34:	10014bb0 	.word	0x10014bb0
1000da38:	10014bb8 	.word	0x10014bb8

1000da3c <at_ble_characteristic_value_set>:
1000da3c:	b570      	push	{r4, r5, r6, lr}
1000da3e:	4b0b      	ldr	r3, [pc, #44]	; (1000da6c <at_ble_characteristic_value_set+0x30>)
1000da40:	1c06      	adds	r6, r0, #0
1000da42:	1c0c      	adds	r4, r1, #0
1000da44:	1c15      	adds	r5, r2, #0
1000da46:	4798      	blx	r3
1000da48:	2800      	cmp	r0, #0
1000da4a:	d008      	beq.n	1000da5e <at_ble_characteristic_value_set+0x22>
1000da4c:	6880      	ldr	r0, [r0, #8]
1000da4e:	2800      	cmp	r0, #0
1000da50:	d005      	beq.n	1000da5e <at_ble_characteristic_value_set+0x22>
1000da52:	1c21      	adds	r1, r4, #0
1000da54:	1c2a      	adds	r2, r5, #0
1000da56:	4b06      	ldr	r3, [pc, #24]	; (1000da70 <at_ble_characteristic_value_set+0x34>)
1000da58:	4798      	blx	r3
1000da5a:	2000      	movs	r0, #0
1000da5c:	e004      	b.n	1000da68 <at_ble_characteristic_value_set+0x2c>
1000da5e:	1c30      	adds	r0, r6, #0
1000da60:	1c29      	adds	r1, r5, #0
1000da62:	1c22      	adds	r2, r4, #0
1000da64:	4b03      	ldr	r3, [pc, #12]	; (1000da74 <at_ble_characteristic_value_set+0x38>)
1000da66:	4798      	blx	r3
1000da68:	bd70      	pop	{r4, r5, r6, pc}
1000da6a:	46c0      	nop			; (mov r8, r8)
1000da6c:	1000d94d 	.word	0x1000d94d
1000da70:	1001134f 	.word	0x1001134f
1000da74:	1000f471 	.word	0x1000f471

1000da78 <at_ble_characteristic_value_get>:
1000da78:	b570      	push	{r4, r5, r6, lr}
1000da7a:	4b0c      	ldr	r3, [pc, #48]	; (1000daac <at_ble_characteristic_value_get+0x34>)
1000da7c:	1c06      	adds	r6, r0, #0
1000da7e:	1c0c      	adds	r4, r1, #0
1000da80:	1c15      	adds	r5, r2, #0
1000da82:	4798      	blx	r3
1000da84:	2800      	cmp	r0, #0
1000da86:	d00b      	beq.n	1000daa0 <at_ble_characteristic_value_get+0x28>
1000da88:	6883      	ldr	r3, [r0, #8]
1000da8a:	2b00      	cmp	r3, #0
1000da8c:	d008      	beq.n	1000daa0 <at_ble_characteristic_value_get+0x28>
1000da8e:	8883      	ldrh	r3, [r0, #4]
1000da90:	802b      	strh	r3, [r5, #0]
1000da92:	8882      	ldrh	r2, [r0, #4]
1000da94:	6881      	ldr	r1, [r0, #8]
1000da96:	4b06      	ldr	r3, [pc, #24]	; (1000dab0 <at_ble_characteristic_value_get+0x38>)
1000da98:	1c20      	adds	r0, r4, #0
1000da9a:	4798      	blx	r3
1000da9c:	2000      	movs	r0, #0
1000da9e:	e004      	b.n	1000daaa <at_ble_characteristic_value_get+0x32>
1000daa0:	1c30      	adds	r0, r6, #0
1000daa2:	1c29      	adds	r1, r5, #0
1000daa4:	1c22      	adds	r2, r4, #0
1000daa6:	4b03      	ldr	r3, [pc, #12]	; (1000dab4 <at_ble_characteristic_value_get+0x3c>)
1000daa8:	4798      	blx	r3
1000daaa:	bd70      	pop	{r4, r5, r6, pc}
1000daac:	1000d94d 	.word	0x1000d94d
1000dab0:	1001134f 	.word	0x1001134f
1000dab4:	1000f4fd 	.word	0x1000f4fd

1000dab8 <at_ble_write_authorize_reply>:
1000dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000daba:	b085      	sub	sp, #20
1000dabc:	1c04      	adds	r4, r0, #0
1000dabe:	9101      	str	r1, [sp, #4]
1000dac0:	2900      	cmp	r1, #0
1000dac2:	d128      	bne.n	1000db16 <at_ble_write_authorize_reply+0x5e>
1000dac4:	8843      	ldrh	r3, [r0, #2]
1000dac6:	1c27      	adds	r7, r4, #0
1000dac8:	9300      	str	r3, [sp, #0]
1000daca:	1c18      	adds	r0, r3, #0
1000dacc:	4b16      	ldr	r3, [pc, #88]	; (1000db28 <at_ble_write_authorize_reply+0x70>)
1000dace:	4798      	blx	r3
1000dad0:	3708      	adds	r7, #8
1000dad2:	2800      	cmp	r0, #0
1000dad4:	d009      	beq.n	1000daea <at_ble_write_authorize_reply+0x32>
1000dad6:	6880      	ldr	r0, [r0, #8]
1000dad8:	2800      	cmp	r0, #0
1000dada:	d006      	beq.n	1000daea <at_ble_write_authorize_reply+0x32>
1000dadc:	88a3      	ldrh	r3, [r4, #4]
1000dade:	88e2      	ldrh	r2, [r4, #6]
1000dae0:	18c0      	adds	r0, r0, r3
1000dae2:	1c39      	adds	r1, r7, #0
1000dae4:	4b11      	ldr	r3, [pc, #68]	; (1000db2c <at_ble_write_authorize_reply+0x74>)
1000dae6:	4798      	blx	r3
1000dae8:	e015      	b.n	1000db16 <at_ble_write_authorize_reply+0x5e>
1000daea:	ab02      	add	r3, sp, #8
1000daec:	1d9e      	adds	r6, r3, #6
1000daee:	2300      	movs	r3, #0
1000daf0:	4d0f      	ldr	r5, [pc, #60]	; (1000db30 <at_ble_write_authorize_reply+0x78>)
1000daf2:	8033      	strh	r3, [r6, #0]
1000daf4:	6829      	ldr	r1, [r5, #0]
1000daf6:	1c32      	adds	r2, r6, #0
1000daf8:	4b0e      	ldr	r3, [pc, #56]	; (1000db34 <at_ble_write_authorize_reply+0x7c>)
1000dafa:	9800      	ldr	r0, [sp, #0]
1000dafc:	4798      	blx	r3
1000dafe:	682b      	ldr	r3, [r5, #0]
1000db00:	88a0      	ldrh	r0, [r4, #4]
1000db02:	88e2      	ldrh	r2, [r4, #6]
1000db04:	1818      	adds	r0, r3, r0
1000db06:	1c39      	adds	r1, r7, #0
1000db08:	4b08      	ldr	r3, [pc, #32]	; (1000db2c <at_ble_write_authorize_reply+0x74>)
1000db0a:	4798      	blx	r3
1000db0c:	8860      	ldrh	r0, [r4, #2]
1000db0e:	8832      	ldrh	r2, [r6, #0]
1000db10:	6829      	ldr	r1, [r5, #0]
1000db12:	4b09      	ldr	r3, [pc, #36]	; (1000db38 <at_ble_write_authorize_reply+0x80>)
1000db14:	4798      	blx	r3
1000db16:	8860      	ldrh	r0, [r4, #2]
1000db18:	8821      	ldrh	r1, [r4, #0]
1000db1a:	9a01      	ldr	r2, [sp, #4]
1000db1c:	4b07      	ldr	r3, [pc, #28]	; (1000db3c <at_ble_write_authorize_reply+0x84>)
1000db1e:	4798      	blx	r3
1000db20:	2000      	movs	r0, #0
1000db22:	b005      	add	sp, #20
1000db24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000db26:	46c0      	nop			; (mov r8, r8)
1000db28:	1000d94d 	.word	0x1000d94d
1000db2c:	1001134f 	.word	0x1001134f
1000db30:	100135fc 	.word	0x100135fc
1000db34:	1000da79 	.word	0x1000da79
1000db38:	1000da3d 	.word	0x1000da3d
1000db3c:	1000f169 	.word	0x1000f169

1000db40 <gatts_handle_read_req>:
1000db40:	b538      	push	{r3, r4, r5, lr}
1000db42:	1c0c      	adds	r4, r1, #0
1000db44:	4b07      	ldr	r3, [pc, #28]	; (1000db64 <gatts_handle_read_req+0x24>)
1000db46:	4798      	blx	r3
1000db48:	8865      	ldrh	r5, [r4, #2]
1000db4a:	4b07      	ldr	r3, [pc, #28]	; (1000db68 <gatts_handle_read_req+0x28>)
1000db4c:	1c28      	adds	r0, r5, #0
1000db4e:	4798      	blx	r3
1000db50:	7883      	ldrb	r3, [r0, #2]
1000db52:	2026      	movs	r0, #38	; 0x26
1000db54:	07db      	lsls	r3, r3, #31
1000db56:	d404      	bmi.n	1000db62 <gatts_handle_read_req+0x22>
1000db58:	8820      	ldrh	r0, [r4, #0]
1000db5a:	1c29      	adds	r1, r5, #0
1000db5c:	4b03      	ldr	r3, [pc, #12]	; (1000db6c <gatts_handle_read_req+0x2c>)
1000db5e:	4798      	blx	r3
1000db60:	203b      	movs	r0, #59	; 0x3b
1000db62:	bd38      	pop	{r3, r4, r5, pc}
1000db64:	1000f0ad 	.word	0x1000f0ad
1000db68:	1000d94d 	.word	0x1000d94d
1000db6c:	1000d98d 	.word	0x1000d98d

1000db70 <gatts_handle_att_info_req>:
1000db70:	b538      	push	{r3, r4, r5, lr}
1000db72:	1c0d      	adds	r5, r1, #0
1000db74:	4b0a      	ldr	r3, [pc, #40]	; (1000dba0 <gatts_handle_att_info_req+0x30>)
1000db76:	1c14      	adds	r4, r2, #0
1000db78:	4798      	blx	r3
1000db7a:	882d      	ldrh	r5, [r5, #0]
1000db7c:	4b09      	ldr	r3, [pc, #36]	; (1000dba4 <gatts_handle_att_info_req+0x34>)
1000db7e:	1c28      	adds	r0, r5, #0
1000db80:	4798      	blx	r3
1000db82:	0a22      	lsrs	r2, r4, #8
1000db84:	1c03      	adds	r3, r0, #0
1000db86:	4c08      	ldr	r4, [pc, #32]	; (1000dba8 <gatts_handle_att_info_req+0x38>)
1000db88:	b291      	uxth	r1, r2
1000db8a:	2800      	cmp	r0, #0
1000db8c:	d003      	beq.n	1000db96 <gatts_handle_att_info_req+0x26>
1000db8e:	8882      	ldrh	r2, [r0, #4]
1000db90:	2300      	movs	r3, #0
1000db92:	1c28      	adds	r0, r5, #0
1000db94:	e001      	b.n	1000db9a <gatts_handle_att_info_req+0x2a>
1000db96:	1c28      	adds	r0, r5, #0
1000db98:	2201      	movs	r2, #1
1000db9a:	47a0      	blx	r4
1000db9c:	203b      	movs	r0, #59	; 0x3b
1000db9e:	bd38      	pop	{r3, r4, r5, pc}
1000dba0:	1000f0f1 	.word	0x1000f0f1
1000dba4:	1000d94d 	.word	0x1000d94d
1000dba8:	1000f1ad 	.word	0x1000f1ad

1000dbac <gatts_handle_write_req>:
1000dbac:	b510      	push	{r4, lr}
1000dbae:	1c14      	adds	r4, r2, #0
1000dbb0:	4b07      	ldr	r3, [pc, #28]	; (1000dbd0 <gatts_handle_write_req+0x24>)
1000dbb2:	4798      	blx	r3
1000dbb4:	4b07      	ldr	r3, [pc, #28]	; (1000dbd4 <gatts_handle_write_req+0x28>)
1000dbb6:	8860      	ldrh	r0, [r4, #2]
1000dbb8:	4798      	blx	r3
1000dbba:	2302      	movs	r3, #2
1000dbbc:	7881      	ldrb	r1, [r0, #2]
1000dbbe:	2022      	movs	r0, #34	; 0x22
1000dbc0:	4019      	ands	r1, r3
1000dbc2:	d103      	bne.n	1000dbcc <gatts_handle_write_req+0x20>
1000dbc4:	1c20      	adds	r0, r4, #0
1000dbc6:	4b04      	ldr	r3, [pc, #16]	; (1000dbd8 <gatts_handle_write_req+0x2c>)
1000dbc8:	4798      	blx	r3
1000dbca:	201f      	movs	r0, #31
1000dbcc:	bd10      	pop	{r4, pc}
1000dbce:	46c0      	nop			; (mov r8, r8)
1000dbd0:	1000f0b9 	.word	0x1000f0b9
1000dbd4:	1000d94d 	.word	0x1000d94d
1000dbd8:	1000dab9 	.word	0x1000dab9

1000dbdc <init_l2cc_task_module>:
1000dbdc:	220a      	movs	r2, #10
1000dbde:	4b01      	ldr	r3, [pc, #4]	; (1000dbe4 <init_l2cc_task_module+0x8>)
1000dbe0:	701a      	strb	r2, [r3, #0]
1000dbe2:	4770      	bx	lr
1000dbe4:	100135f8 	.word	0x100135f8

1000dbe8 <l2cc_data_send_rsp_handler>:
1000dbe8:	b510      	push	{r4, lr}
1000dbea:	7802      	ldrb	r2, [r0, #0]
1000dbec:	700a      	strb	r2, [r1, #0]
1000dbee:	7883      	ldrb	r3, [r0, #2]
1000dbf0:	7844      	ldrb	r4, [r0, #1]
1000dbf2:	021b      	lsls	r3, r3, #8
1000dbf4:	4323      	orrs	r3, r4
1000dbf6:	804b      	strh	r3, [r1, #2]
1000dbf8:	7903      	ldrb	r3, [r0, #4]
1000dbfa:	78c0      	ldrb	r0, [r0, #3]
1000dbfc:	021b      	lsls	r3, r3, #8
1000dbfe:	4303      	orrs	r3, r0
1000dc00:	808b      	strh	r3, [r1, #4]
1000dc02:	2a00      	cmp	r2, #0
1000dc04:	d103      	bne.n	1000dc0e <l2cc_data_send_rsp_handler+0x26>
1000dc06:	4a02      	ldr	r2, [pc, #8]	; (1000dc10 <l2cc_data_send_rsp_handler+0x28>)
1000dc08:	7813      	ldrb	r3, [r2, #0]
1000dc0a:	3301      	adds	r3, #1
1000dc0c:	7013      	strb	r3, [r2, #0]
1000dc0e:	bd10      	pop	{r4, pc}
1000dc10:	100135f8 	.word	0x100135f8

1000dc14 <l2cc_data_received_handler>:
1000dc14:	b508      	push	{r3, lr}
1000dc16:	1c03      	adds	r3, r0, #0
1000dc18:	7842      	ldrb	r2, [r0, #1]
1000dc1a:	7800      	ldrb	r0, [r0, #0]
1000dc1c:	0212      	lsls	r2, r2, #8
1000dc1e:	4302      	orrs	r2, r0
1000dc20:	800a      	strh	r2, [r1, #0]
1000dc22:	78da      	ldrb	r2, [r3, #3]
1000dc24:	7898      	ldrb	r0, [r3, #2]
1000dc26:	0212      	lsls	r2, r2, #8
1000dc28:	4302      	orrs	r2, r0
1000dc2a:	804a      	strh	r2, [r1, #2]
1000dc2c:	795a      	ldrb	r2, [r3, #5]
1000dc2e:	7918      	ldrb	r0, [r3, #4]
1000dc30:	0212      	lsls	r2, r2, #8
1000dc32:	4302      	orrs	r2, r0
1000dc34:	808a      	strh	r2, [r1, #4]
1000dc36:	1d88      	adds	r0, r1, #6
1000dc38:	1d99      	adds	r1, r3, #6
1000dc3a:	4b01      	ldr	r3, [pc, #4]	; (1000dc40 <l2cc_data_received_handler+0x2c>)
1000dc3c:	4798      	blx	r3
1000dc3e:	bd08      	pop	{r3, pc}
1000dc40:	1001134f 	.word	0x1001134f

1000dc44 <at_ble_authenticate>:
1000dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc46:	1c0c      	adds	r4, r1, #0
1000dc48:	211f      	movs	r1, #31
1000dc4a:	b08b      	sub	sp, #44	; 0x2c
1000dc4c:	9307      	str	r3, [sp, #28]
1000dc4e:	ab02      	add	r3, sp, #8
1000dc50:	18c9      	adds	r1, r1, r3
1000dc52:	230f      	movs	r3, #15
1000dc54:	700b      	strb	r3, [r1, #0]
1000dc56:	4b40      	ldr	r3, [pc, #256]	; (1000dd58 <at_ble_authenticate+0x114>)
1000dc58:	1c05      	adds	r5, r0, #0
1000dc5a:	1c16      	adds	r6, r2, #0
1000dc5c:	4798      	blx	r3
1000dc5e:	1c07      	adds	r7, r0, #0
1000dc60:	2001      	movs	r0, #1
1000dc62:	2f07      	cmp	r7, #7
1000dc64:	d875      	bhi.n	1000dd52 <at_ble_authenticate+0x10e>
1000dc66:	2c00      	cmp	r4, #0
1000dc68:	d113      	bne.n	1000dc92 <at_ble_authenticate+0x4e>
1000dc6a:	2312      	movs	r3, #18
1000dc6c:	435f      	muls	r7, r3
1000dc6e:	4b3b      	ldr	r3, [pc, #236]	; (1000dd5c <at_ble_authenticate+0x118>)
1000dc70:	5cfb      	ldrb	r3, [r7, r3]
1000dc72:	4283      	cmp	r3, r0
1000dc74:	d001      	beq.n	1000dc7a <at_ble_authenticate+0x36>
1000dc76:	20cf      	movs	r0, #207	; 0xcf
1000dc78:	e06b      	b.n	1000dd52 <at_ble_authenticate+0x10e>
1000dc7a:	9504      	str	r5, [sp, #16]
1000dc7c:	9400      	str	r4, [sp, #0]
1000dc7e:	9401      	str	r4, [sp, #4]
1000dc80:	9402      	str	r4, [sp, #8]
1000dc82:	9403      	str	r4, [sp, #12]
1000dc84:	1c20      	adds	r0, r4, #0
1000dc86:	1c21      	adds	r1, r4, #0
1000dc88:	1c22      	adds	r2, r4, #0
1000dc8a:	1c23      	adds	r3, r4, #0
1000dc8c:	4d34      	ldr	r5, [pc, #208]	; (1000dd60 <at_ble_authenticate+0x11c>)
1000dc8e:	47a8      	blx	r5
1000dc90:	e05e      	b.n	1000dd50 <at_ble_authenticate+0x10c>
1000dc92:	7922      	ldrb	r2, [r4, #4]
1000dc94:	2a06      	cmp	r2, #6
1000dc96:	d9ee      	bls.n	1000dc76 <at_ble_authenticate+0x32>
1000dc98:	7963      	ldrb	r3, [r4, #5]
1000dc9a:	2b10      	cmp	r3, #16
1000dc9c:	d8eb      	bhi.n	1000dc76 <at_ble_authenticate+0x32>
1000dc9e:	429a      	cmp	r2, r3
1000dca0:	d8e9      	bhi.n	1000dc76 <at_ble_authenticate+0x32>
1000dca2:	7a23      	ldrb	r3, [r4, #8]
1000dca4:	2b04      	cmp	r3, #4
1000dca6:	d8e6      	bhi.n	1000dc76 <at_ble_authenticate+0x32>
1000dca8:	79a3      	ldrb	r3, [r4, #6]
1000dcaa:	2b07      	cmp	r3, #7
1000dcac:	d8e3      	bhi.n	1000dc76 <at_ble_authenticate+0x32>
1000dcae:	79e3      	ldrb	r3, [r4, #7]
1000dcb0:	2b07      	cmp	r3, #7
1000dcb2:	d8e0      	bhi.n	1000dc76 <at_ble_authenticate+0x32>
1000dcb4:	78a3      	ldrb	r3, [r4, #2]
1000dcb6:	2b00      	cmp	r3, #0
1000dcb8:	d006      	beq.n	1000dcc8 <at_ble_authenticate+0x84>
1000dcba:	2e00      	cmp	r6, #0
1000dcbc:	d0db      	beq.n	1000dc76 <at_ble_authenticate+0x32>
1000dcbe:	4829      	ldr	r0, [pc, #164]	; (1000dd64 <at_ble_authenticate+0x120>)
1000dcc0:	1c31      	adds	r1, r6, #0
1000dcc2:	221c      	movs	r2, #28
1000dcc4:	4b28      	ldr	r3, [pc, #160]	; (1000dd68 <at_ble_authenticate+0x124>)
1000dcc6:	4798      	blx	r3
1000dcc8:	9b07      	ldr	r3, [sp, #28]
1000dcca:	2b00      	cmp	r3, #0
1000dccc:	d005      	beq.n	1000dcda <at_ble_authenticate+0x96>
1000dcce:	4827      	ldr	r0, [pc, #156]	; (1000dd6c <at_ble_authenticate+0x128>)
1000dcd0:	1c19      	adds	r1, r3, #0
1000dcd2:	309a      	adds	r0, #154	; 0x9a
1000dcd4:	2210      	movs	r2, #16
1000dcd6:	4b24      	ldr	r3, [pc, #144]	; (1000dd68 <at_ble_authenticate+0x124>)
1000dcd8:	4798      	blx	r3
1000dcda:	7863      	ldrb	r3, [r4, #1]
1000dcdc:	78a2      	ldrb	r2, [r4, #2]
1000dcde:	009b      	lsls	r3, r3, #2
1000dce0:	4313      	orrs	r3, r2
1000dce2:	2212      	movs	r2, #18
1000dce4:	4357      	muls	r7, r2
1000dce6:	4a1d      	ldr	r2, [pc, #116]	; (1000dd5c <at_ble_authenticate+0x118>)
1000dce8:	b2db      	uxtb	r3, r3
1000dcea:	5cba      	ldrb	r2, [r7, r2]
1000dcec:	2a00      	cmp	r2, #0
1000dcee:	d116      	bne.n	1000dd1e <at_ble_authenticate+0xda>
1000dcf0:	79a0      	ldrb	r0, [r4, #6]
1000dcf2:	0742      	lsls	r2, r0, #29
1000dcf4:	d502      	bpl.n	1000dcfc <at_ble_authenticate+0xb8>
1000dcf6:	9a07      	ldr	r2, [sp, #28]
1000dcf8:	2a00      	cmp	r2, #0
1000dcfa:	d0bc      	beq.n	1000dc76 <at_ble_authenticate+0x32>
1000dcfc:	07c2      	lsls	r2, r0, #31
1000dcfe:	d501      	bpl.n	1000dd04 <at_ble_authenticate+0xc0>
1000dd00:	2e00      	cmp	r6, #0
1000dd02:	d0b8      	beq.n	1000dc76 <at_ble_authenticate+0x32>
1000dd04:	7966      	ldrb	r6, [r4, #5]
1000dd06:	7821      	ldrb	r1, [r4, #0]
1000dd08:	78e2      	ldrb	r2, [r4, #3]
1000dd0a:	9600      	str	r6, [sp, #0]
1000dd0c:	9001      	str	r0, [sp, #4]
1000dd0e:	79e0      	ldrb	r0, [r4, #7]
1000dd10:	9002      	str	r0, [sp, #8]
1000dd12:	7a20      	ldrb	r0, [r4, #8]
1000dd14:	4c16      	ldr	r4, [pc, #88]	; (1000dd70 <at_ble_authenticate+0x12c>)
1000dd16:	9003      	str	r0, [sp, #12]
1000dd18:	1c28      	adds	r0, r5, #0
1000dd1a:	47a0      	blx	r4
1000dd1c:	e018      	b.n	1000dd50 <at_ble_authenticate+0x10c>
1000dd1e:	2a01      	cmp	r2, #1
1000dd20:	d1a9      	bne.n	1000dc76 <at_ble_authenticate+0x32>
1000dd22:	79e0      	ldrb	r0, [r4, #7]
1000dd24:	0742      	lsls	r2, r0, #29
1000dd26:	d502      	bpl.n	1000dd2e <at_ble_authenticate+0xea>
1000dd28:	9a07      	ldr	r2, [sp, #28]
1000dd2a:	2a00      	cmp	r2, #0
1000dd2c:	d0a3      	beq.n	1000dc76 <at_ble_authenticate+0x32>
1000dd2e:	07c2      	lsls	r2, r0, #31
1000dd30:	d501      	bpl.n	1000dd36 <at_ble_authenticate+0xf2>
1000dd32:	2e00      	cmp	r6, #0
1000dd34:	d09f      	beq.n	1000dc76 <at_ble_authenticate+0x32>
1000dd36:	7966      	ldrb	r6, [r4, #5]
1000dd38:	7821      	ldrb	r1, [r4, #0]
1000dd3a:	78e2      	ldrb	r2, [r4, #3]
1000dd3c:	9600      	str	r6, [sp, #0]
1000dd3e:	79a6      	ldrb	r6, [r4, #6]
1000dd40:	9002      	str	r0, [sp, #8]
1000dd42:	9601      	str	r6, [sp, #4]
1000dd44:	7a20      	ldrb	r0, [r4, #8]
1000dd46:	9504      	str	r5, [sp, #16]
1000dd48:	9003      	str	r0, [sp, #12]
1000dd4a:	4c05      	ldr	r4, [pc, #20]	; (1000dd60 <at_ble_authenticate+0x11c>)
1000dd4c:	2001      	movs	r0, #1
1000dd4e:	47a0      	blx	r4
1000dd50:	2000      	movs	r0, #0
1000dd52:	b00b      	add	sp, #44	; 0x2c
1000dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd56:	46c0      	nop			; (mov r8, r8)
1000dd58:	1000e145 	.word	0x1000e145
1000dd5c:	100158f2 	.word	0x100158f2
1000dd60:	1000e6b5 	.word	0x1000e6b5
1000dd64:	10015a00 	.word	0x10015a00
1000dd68:	1001134f 	.word	0x1001134f
1000dd6c:	10015982 	.word	0x10015982
1000dd70:	1000e495 	.word	0x1000e495

1000dd74 <at_ble_pair_key_reply>:
1000dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd76:	b085      	sub	sp, #20
1000dd78:	1c05      	adds	r5, r0, #0
1000dd7a:	1c0c      	adds	r4, r1, #0
1000dd7c:	1c16      	adds	r6, r2, #0
1000dd7e:	2100      	movs	r1, #0
1000dd80:	4668      	mov	r0, sp
1000dd82:	2210      	movs	r2, #16
1000dd84:	4b18      	ldr	r3, [pc, #96]	; (1000dde8 <at_ble_pair_key_reply+0x74>)
1000dd86:	4798      	blx	r3
1000dd88:	2101      	movs	r1, #1
1000dd8a:	2e00      	cmp	r6, #0
1000dd8c:	d101      	bne.n	1000dd92 <at_ble_pair_key_reply+0x1e>
1000dd8e:	1c31      	adds	r1, r6, #0
1000dd90:	466e      	mov	r6, sp
1000dd92:	2c00      	cmp	r4, #0
1000dd94:	d116      	bne.n	1000ddc4 <at_ble_pair_key_reply+0x50>
1000dd96:	2701      	movs	r7, #1
1000dd98:	1c23      	adds	r3, r4, #0
1000dd9a:	1d70      	adds	r0, r6, #5
1000dd9c:	3e01      	subs	r6, #1
1000dd9e:	7802      	ldrb	r2, [r0, #0]
1000dda0:	3801      	subs	r0, #1
1000dda2:	3a30      	subs	r2, #48	; 0x30
1000dda4:	437a      	muls	r2, r7
1000dda6:	189b      	adds	r3, r3, r2
1000dda8:	220a      	movs	r2, #10
1000ddaa:	4357      	muls	r7, r2
1000ddac:	42b0      	cmp	r0, r6
1000ddae:	d1f6      	bne.n	1000dd9e <at_ble_pair_key_reply+0x2a>
1000ddb0:	466a      	mov	r2, sp
1000ddb2:	4668      	mov	r0, sp
1000ddb4:	7013      	strb	r3, [r2, #0]
1000ddb6:	0a1a      	lsrs	r2, r3, #8
1000ddb8:	7042      	strb	r2, [r0, #1]
1000ddba:	0c1a      	lsrs	r2, r3, #16
1000ddbc:	0e1b      	lsrs	r3, r3, #24
1000ddbe:	7082      	strb	r2, [r0, #2]
1000ddc0:	70c3      	strb	r3, [r0, #3]
1000ddc2:	e009      	b.n	1000ddd8 <at_ble_pair_key_reply+0x64>
1000ddc4:	20cf      	movs	r0, #207	; 0xcf
1000ddc6:	2c01      	cmp	r4, #1
1000ddc8:	d10c      	bne.n	1000dde4 <at_ble_pair_key_reply+0x70>
1000ddca:	2300      	movs	r3, #0
1000ddcc:	4668      	mov	r0, sp
1000ddce:	5cf2      	ldrb	r2, [r6, r3]
1000ddd0:	54c2      	strb	r2, [r0, r3]
1000ddd2:	3301      	adds	r3, #1
1000ddd4:	2b10      	cmp	r3, #16
1000ddd6:	d1f9      	bne.n	1000ddcc <at_ble_pair_key_reply+0x58>
1000ddd8:	2004      	movs	r0, #4
1000ddda:	466a      	mov	r2, sp
1000dddc:	1c2b      	adds	r3, r5, #0
1000ddde:	4c03      	ldr	r4, [pc, #12]	; (1000ddec <at_ble_pair_key_reply+0x78>)
1000dde0:	47a0      	blx	r4
1000dde2:	2000      	movs	r0, #0
1000dde4:	b005      	add	sp, #20
1000dde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dde8:	10011361 	.word	0x10011361
1000ddec:	1000e731 	.word	0x1000e731

1000ddf0 <at_ble_send_slave_sec_request>:
1000ddf0:	b570      	push	{r4, r5, r6, lr}
1000ddf2:	4b0c      	ldr	r3, [pc, #48]	; (1000de24 <at_ble_send_slave_sec_request+0x34>)
1000ddf4:	1c0e      	adds	r6, r1, #0
1000ddf6:	2100      	movs	r1, #0
1000ddf8:	1c05      	adds	r5, r0, #0
1000ddfa:	1c14      	adds	r4, r2, #0
1000ddfc:	4798      	blx	r3
1000ddfe:	2301      	movs	r3, #1
1000de00:	2807      	cmp	r0, #7
1000de02:	d80d      	bhi.n	1000de20 <at_ble_send_slave_sec_request+0x30>
1000de04:	3311      	adds	r3, #17
1000de06:	4358      	muls	r0, r3
1000de08:	4b07      	ldr	r3, [pc, #28]	; (1000de28 <at_ble_send_slave_sec_request+0x38>)
1000de0a:	5cc2      	ldrb	r2, [r0, r3]
1000de0c:	23e0      	movs	r3, #224	; 0xe0
1000de0e:	2a01      	cmp	r2, #1
1000de10:	d106      	bne.n	1000de20 <at_ble_send_slave_sec_request+0x30>
1000de12:	00b1      	lsls	r1, r6, #2
1000de14:	430c      	orrs	r4, r1
1000de16:	4b05      	ldr	r3, [pc, #20]	; (1000de2c <at_ble_send_slave_sec_request+0x3c>)
1000de18:	b2e1      	uxtb	r1, r4
1000de1a:	1c28      	adds	r0, r5, #0
1000de1c:	4798      	blx	r3
1000de1e:	2300      	movs	r3, #0
1000de20:	1c18      	adds	r0, r3, #0
1000de22:	bd70      	pop	{r4, r5, r6, pc}
1000de24:	1000e145 	.word	0x1000e145
1000de28:	100158f2 	.word	0x100158f2
1000de2c:	1000e781 	.word	0x1000e781

1000de30 <at_ble_encryption_start>:
1000de30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de32:	23cf      	movs	r3, #207	; 0xcf
1000de34:	2900      	cmp	r1, #0
1000de36:	d02b      	beq.n	1000de90 <at_ble_encryption_start+0x60>
1000de38:	2a05      	cmp	r2, #5
1000de3a:	d829      	bhi.n	1000de90 <at_ble_encryption_start+0x60>
1000de3c:	2701      	movs	r7, #1
1000de3e:	1c3d      	adds	r5, r7, #0
1000de40:	2433      	movs	r4, #51	; 0x33
1000de42:	4095      	lsls	r5, r2
1000de44:	4225      	tst	r5, r4
1000de46:	d023      	beq.n	1000de90 <at_ble_encryption_start+0x60>
1000de48:	7e8c      	ldrb	r4, [r1, #26]
1000de4a:	3c07      	subs	r4, #7
1000de4c:	2c09      	cmp	r4, #9
1000de4e:	d81f      	bhi.n	1000de90 <at_ble_encryption_start+0x60>
1000de50:	4b10      	ldr	r3, [pc, #64]	; (1000de94 <at_ble_encryption_start+0x64>)
1000de52:	1c0c      	adds	r4, r1, #0
1000de54:	2100      	movs	r1, #0
1000de56:	1c15      	adds	r5, r2, #0
1000de58:	1c06      	adds	r6, r0, #0
1000de5a:	4798      	blx	r3
1000de5c:	1c3b      	adds	r3, r7, #0
1000de5e:	2807      	cmp	r0, #7
1000de60:	d816      	bhi.n	1000de90 <at_ble_encryption_start+0x60>
1000de62:	2312      	movs	r3, #18
1000de64:	4358      	muls	r0, r3
1000de66:	4b0c      	ldr	r3, [pc, #48]	; (1000de98 <at_ble_encryption_start+0x68>)
1000de68:	5cc7      	ldrb	r7, [r0, r3]
1000de6a:	23e0      	movs	r3, #224	; 0xe0
1000de6c:	2f00      	cmp	r7, #0
1000de6e:	d10f      	bne.n	1000de90 <at_ble_encryption_start+0x60>
1000de70:	1c21      	adds	r1, r4, #0
1000de72:	221c      	movs	r2, #28
1000de74:	4b09      	ldr	r3, [pc, #36]	; (1000de9c <at_ble_encryption_start+0x6c>)
1000de76:	480a      	ldr	r0, [pc, #40]	; (1000dea0 <at_ble_encryption_start+0x70>)
1000de78:	4798      	blx	r3
1000de7a:	1c23      	adds	r3, r4, #0
1000de7c:	7ea1      	ldrb	r1, [r4, #26]
1000de7e:	8a22      	ldrh	r2, [r4, #16]
1000de80:	3312      	adds	r3, #18
1000de82:	9100      	str	r1, [sp, #0]
1000de84:	9501      	str	r5, [sp, #4]
1000de86:	1c21      	adds	r1, r4, #0
1000de88:	1c30      	adds	r0, r6, #0
1000de8a:	4c06      	ldr	r4, [pc, #24]	; (1000dea4 <at_ble_encryption_start+0x74>)
1000de8c:	47a0      	blx	r4
1000de8e:	1c3b      	adds	r3, r7, #0
1000de90:	1c18      	adds	r0, r3, #0
1000de92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000de94:	1000e145 	.word	0x1000e145
1000de98:	100158f2 	.word	0x100158f2
1000de9c:	1001134f 	.word	0x1001134f
1000dea0:	10015a00 	.word	0x10015a00
1000dea4:	1000e7c1 	.word	0x1000e7c1

1000dea8 <at_ble_encryption_request_reply>:
1000dea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000deaa:	24cf      	movs	r4, #207	; 0xcf
1000deac:	2b00      	cmp	r3, #0
1000deae:	d011      	beq.n	1000ded4 <at_ble_encryption_request_reply+0x2c>
1000deb0:	2a00      	cmp	r2, #0
1000deb2:	d00a      	beq.n	1000deca <at_ble_encryption_request_reply+0x22>
1000deb4:	2905      	cmp	r1, #5
1000deb6:	d80d      	bhi.n	1000ded4 <at_ble_encryption_request_reply+0x2c>
1000deb8:	2501      	movs	r5, #1
1000deba:	2633      	movs	r6, #51	; 0x33
1000debc:	408d      	lsls	r5, r1
1000debe:	4235      	tst	r5, r6
1000dec0:	d008      	beq.n	1000ded4 <at_ble_encryption_request_reply+0x2c>
1000dec2:	7e9d      	ldrb	r5, [r3, #26]
1000dec4:	3d07      	subs	r5, #7
1000dec6:	2d09      	cmp	r5, #9
1000dec8:	d804      	bhi.n	1000ded4 <at_ble_encryption_request_reply+0x2c>
1000deca:	7e9c      	ldrb	r4, [r3, #26]
1000decc:	9400      	str	r4, [sp, #0]
1000dece:	4c02      	ldr	r4, [pc, #8]	; (1000ded8 <at_ble_encryption_request_reply+0x30>)
1000ded0:	47a0      	blx	r4
1000ded2:	2400      	movs	r4, #0
1000ded4:	1c20      	adds	r0, r4, #0
1000ded6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ded8:	1000e87d 	.word	0x1000e87d

1000dedc <rx_callback>:
1000dedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dede:	8883      	ldrh	r3, [r0, #4]
1000dee0:	1c01      	adds	r1, r0, #0
1000dee2:	9301      	str	r3, [sp, #4]
1000dee4:	88c5      	ldrh	r5, [r0, #6]
1000dee6:	8806      	ldrh	r6, [r0, #0]
1000dee8:	2d00      	cmp	r5, #0
1000deea:	d10f      	bne.n	1000df0c <rx_callback+0x30>
1000deec:	1c19      	adds	r1, r3, #0
1000deee:	1c30      	adds	r0, r6, #0
1000def0:	4b19      	ldr	r3, [pc, #100]	; (1000df58 <rx_callback+0x7c>)
1000def2:	1c2a      	adds	r2, r5, #0
1000def4:	4798      	blx	r3
1000def6:	1e03      	subs	r3, r0, #0
1000def8:	d105      	bne.n	1000df06 <rx_callback+0x2a>
1000defa:	1c30      	adds	r0, r6, #0
1000defc:	9901      	ldr	r1, [sp, #4]
1000defe:	1c1a      	adds	r2, r3, #0
1000df00:	4c16      	ldr	r4, [pc, #88]	; (1000df5c <rx_callback+0x80>)
1000df02:	47a0      	blx	r4
1000df04:	e027      	b.n	1000df56 <rx_callback+0x7a>
1000df06:	4b16      	ldr	r3, [pc, #88]	; (1000df60 <rx_callback+0x84>)
1000df08:	4798      	blx	r3
1000df0a:	e024      	b.n	1000df56 <rx_callback+0x7a>
1000df0c:	4c15      	ldr	r4, [pc, #84]	; (1000df64 <rx_callback+0x88>)
1000df0e:	4a16      	ldr	r2, [pc, #88]	; (1000df68 <rx_callback+0x8c>)
1000df10:	6823      	ldr	r3, [r4, #0]
1000df12:	6812      	ldr	r2, [r2, #0]
1000df14:	18eb      	adds	r3, r5, r3
1000df16:	4293      	cmp	r3, r2
1000df18:	d901      	bls.n	1000df1e <rx_callback+0x42>
1000df1a:	2300      	movs	r3, #0
1000df1c:	6023      	str	r3, [r4, #0]
1000df1e:	4f13      	ldr	r7, [pc, #76]	; (1000df6c <rx_callback+0x90>)
1000df20:	6822      	ldr	r2, [r4, #0]
1000df22:	683b      	ldr	r3, [r7, #0]
1000df24:	3108      	adds	r1, #8
1000df26:	1898      	adds	r0, r3, r2
1000df28:	1c2a      	adds	r2, r5, #0
1000df2a:	4b11      	ldr	r3, [pc, #68]	; (1000df70 <rx_callback+0x94>)
1000df2c:	4798      	blx	r3
1000df2e:	683b      	ldr	r3, [r7, #0]
1000df30:	6822      	ldr	r2, [r4, #0]
1000df32:	1c30      	adds	r0, r6, #0
1000df34:	189a      	adds	r2, r3, r2
1000df36:	9901      	ldr	r1, [sp, #4]
1000df38:	4b07      	ldr	r3, [pc, #28]	; (1000df58 <rx_callback+0x7c>)
1000df3a:	4798      	blx	r3
1000df3c:	2800      	cmp	r0, #0
1000df3e:	d1e2      	bne.n	1000df06 <rx_callback+0x2a>
1000df40:	6823      	ldr	r3, [r4, #0]
1000df42:	683a      	ldr	r2, [r7, #0]
1000df44:	1c30      	adds	r0, r6, #0
1000df46:	18d2      	adds	r2, r2, r3
1000df48:	9901      	ldr	r1, [sp, #4]
1000df4a:	1c2b      	adds	r3, r5, #0
1000df4c:	4e03      	ldr	r6, [pc, #12]	; (1000df5c <rx_callback+0x80>)
1000df4e:	47b0      	blx	r6
1000df50:	6823      	ldr	r3, [r4, #0]
1000df52:	18ed      	adds	r5, r5, r3
1000df54:	6025      	str	r5, [r4, #0]
1000df56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000df58:	1000cdc9 	.word	0x1000cdc9
1000df5c:	1000cd41 	.word	0x1000cd41
1000df60:	1000b3d1 	.word	0x1000b3d1
1000df64:	10015a5c 	.word	0x10015a5c
1000df68:	10014bc8 	.word	0x10014bc8
1000df6c:	10014bc4 	.word	0x10014bc4
1000df70:	1001134f 	.word	0x1001134f

1000df74 <interface_send>:
1000df74:	b508      	push	{r3, lr}
1000df76:	4b02      	ldr	r3, [pc, #8]	; (1000df80 <interface_send+0xc>)
1000df78:	4798      	blx	r3
1000df7a:	2000      	movs	r0, #0
1000df7c:	bd08      	pop	{r3, pc}
1000df7e:	46c0      	nop			; (mov r8, r8)
1000df80:	1000b0c9 	.word	0x1000b0c9

1000df84 <interface_init>:
1000df84:	2280      	movs	r2, #128	; 0x80
1000df86:	b510      	push	{r4, lr}
1000df88:	2100      	movs	r1, #0
1000df8a:	1c04      	adds	r4, r0, #0
1000df8c:	0092      	lsls	r2, r2, #2
1000df8e:	4b08      	ldr	r3, [pc, #32]	; (1000dfb0 <interface_init+0x2c>)
1000df90:	4808      	ldr	r0, [pc, #32]	; (1000dfb4 <interface_init+0x30>)
1000df92:	4798      	blx	r3
1000df94:	2200      	movs	r2, #0
1000df96:	4b08      	ldr	r3, [pc, #32]	; (1000dfb8 <interface_init+0x34>)
1000df98:	601a      	str	r2, [r3, #0]
1000df9a:	4a08      	ldr	r2, [pc, #32]	; (1000dfbc <interface_init+0x38>)
1000df9c:	4b08      	ldr	r3, [pc, #32]	; (1000dfc0 <interface_init+0x3c>)
1000df9e:	601a      	str	r2, [r3, #0]
1000dfa0:	4b08      	ldr	r3, [pc, #32]	; (1000dfc4 <interface_init+0x40>)
1000dfa2:	6922      	ldr	r2, [r4, #16]
1000dfa4:	601a      	str	r2, [r3, #0]
1000dfa6:	6962      	ldr	r2, [r4, #20]
1000dfa8:	4b07      	ldr	r3, [pc, #28]	; (1000dfc8 <interface_init+0x44>)
1000dfaa:	601a      	str	r2, [r3, #0]
1000dfac:	bd10      	pop	{r4, pc}
1000dfae:	46c0      	nop			; (mov r8, r8)
1000dfb0:	10011361 	.word	0x10011361
1000dfb4:	10015c60 	.word	0x10015c60
1000dfb8:	10015a5c 	.word	0x10015a5c
1000dfbc:	10015a60 	.word	0x10015a60
1000dfc0:	100135fc 	.word	0x100135fc
1000dfc4:	10014bc4 	.word	0x10014bc4
1000dfc8:	10014bc8 	.word	0x10014bc8

1000dfcc <platform_cmd_cmpl_signal>:
1000dfcc:	2201      	movs	r2, #1
1000dfce:	4b01      	ldr	r3, [pc, #4]	; (1000dfd4 <platform_cmd_cmpl_signal+0x8>)
1000dfd0:	601a      	str	r2, [r3, #0]
1000dfd2:	4770      	bx	lr
1000dfd4:	10014bcc 	.word	0x10014bcc

1000dfd8 <platform_cmd_cmpl_wait>:
1000dfd8:	b510      	push	{r4, lr}
1000dfda:	1c04      	adds	r4, r0, #0
1000dfdc:	4b07      	ldr	r3, [pc, #28]	; (1000dffc <platform_cmd_cmpl_wait+0x24>)
1000dfde:	681a      	ldr	r2, [r3, #0]
1000dfe0:	2a01      	cmp	r2, #1
1000dfe2:	d003      	beq.n	1000dfec <platform_cmd_cmpl_wait+0x14>
1000dfe4:	4b06      	ldr	r3, [pc, #24]	; (1000e000 <platform_cmd_cmpl_wait+0x28>)
1000dfe6:	2000      	movs	r0, #0
1000dfe8:	4798      	blx	r3
1000dfea:	e7f7      	b.n	1000dfdc <platform_cmd_cmpl_wait+0x4>
1000dfec:	6819      	ldr	r1, [r3, #0]
1000dfee:	2901      	cmp	r1, #1
1000dff0:	d102      	bne.n	1000dff8 <platform_cmd_cmpl_wait+0x20>
1000dff2:	2200      	movs	r2, #0
1000dff4:	601a      	str	r2, [r3, #0]
1000dff6:	e000      	b.n	1000dffa <platform_cmd_cmpl_wait+0x22>
1000dff8:	7022      	strb	r2, [r4, #0]
1000dffa:	bd10      	pop	{r4, pc}
1000dffc:	10014bcc 	.word	0x10014bcc
1000e000:	1000b159 	.word	0x1000b159

1000e004 <start_timer>:
1000e004:	4770      	bx	lr

1000e006 <stop_timer>:
1000e006:	4770      	bx	lr

1000e008 <dbg_le_set_bd_addr_req_handler>:
1000e008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e00a:	466b      	mov	r3, sp
1000e00c:	1dde      	adds	r6, r3, #7
1000e00e:	2300      	movs	r3, #0
1000e010:	7033      	strb	r3, [r6, #0]
1000e012:	230f      	movs	r3, #15
1000e014:	4c13      	ldr	r4, [pc, #76]	; (1000e064 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e016:	2703      	movs	r7, #3
1000e018:	7023      	strb	r3, [r4, #0]
1000e01a:	2300      	movs	r3, #0
1000e01c:	70e3      	strb	r3, [r4, #3]
1000e01e:	4b12      	ldr	r3, [pc, #72]	; (1000e068 <dbg_le_set_bd_addr_req_handler+0x60>)
1000e020:	1c01      	adds	r1, r0, #0
1000e022:	881a      	ldrh	r2, [r3, #0]
1000e024:	881b      	ldrh	r3, [r3, #0]
1000e026:	7122      	strb	r2, [r4, #4]
1000e028:	0a1b      	lsrs	r3, r3, #8
1000e02a:	2206      	movs	r2, #6
1000e02c:	7163      	strb	r3, [r4, #5]
1000e02e:	480f      	ldr	r0, [pc, #60]	; (1000e06c <dbg_le_set_bd_addr_req_handler+0x64>)
1000e030:	4b0f      	ldr	r3, [pc, #60]	; (1000e070 <dbg_le_set_bd_addr_req_handler+0x68>)
1000e032:	7067      	strb	r7, [r4, #1]
1000e034:	70a7      	strb	r7, [r4, #2]
1000e036:	4798      	blx	r3
1000e038:	4d0e      	ldr	r5, [pc, #56]	; (1000e074 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e03a:	4b0f      	ldr	r3, [pc, #60]	; (1000e078 <dbg_le_set_bd_addr_req_handler+0x70>)
1000e03c:	210e      	movs	r1, #14
1000e03e:	802b      	strh	r3, [r5, #0]
1000e040:	2306      	movs	r3, #6
1000e042:	71a3      	strb	r3, [r4, #6]
1000e044:	2300      	movs	r3, #0
1000e046:	1c20      	adds	r0, r4, #0
1000e048:	71e3      	strb	r3, [r4, #7]
1000e04a:	4b0c      	ldr	r3, [pc, #48]	; (1000e07c <dbg_le_set_bd_addr_req_handler+0x74>)
1000e04c:	80af      	strh	r7, [r5, #4]
1000e04e:	4798      	blx	r3
1000e050:	1c30      	adds	r0, r6, #0
1000e052:	4b0b      	ldr	r3, [pc, #44]	; (1000e080 <dbg_le_set_bd_addr_req_handler+0x78>)
1000e054:	4798      	blx	r3
1000e056:	7833      	ldrb	r3, [r6, #0]
1000e058:	20e2      	movs	r0, #226	; 0xe2
1000e05a:	2b00      	cmp	r3, #0
1000e05c:	d101      	bne.n	1000e062 <dbg_le_set_bd_addr_req_handler+0x5a>
1000e05e:	68ab      	ldr	r3, [r5, #8]
1000e060:	7818      	ldrb	r0, [r3, #0]
1000e062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e064:	10015c60 	.word	0x10015c60
1000e068:	100158f0 	.word	0x100158f0
1000e06c:	10015c68 	.word	0x10015c68
1000e070:	1001134f 	.word	0x1001134f
1000e074:	100158e4 	.word	0x100158e4
1000e078:	00000329 	.word	0x00000329
1000e07c:	1000df75 	.word	0x1000df75
1000e080:	1000dfd9 	.word	0x1000dfd9

1000e084 <gapc_get_dev_info_cfm.constprop.1>:
1000e084:	b538      	push	{r3, r4, r5, lr}
1000e086:	230b      	movs	r3, #11
1000e088:	4c27      	ldr	r4, [pc, #156]	; (1000e128 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e08a:	7023      	strb	r3, [r4, #0]
1000e08c:	3303      	adds	r3, #3
1000e08e:	7063      	strb	r3, [r4, #1]
1000e090:	3329      	adds	r3, #41	; 0x29
1000e092:	70a3      	strb	r3, [r4, #2]
1000e094:	4b25      	ldr	r3, [pc, #148]	; (1000e12c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e096:	70e1      	strb	r1, [r4, #3]
1000e098:	881a      	ldrh	r2, [r3, #0]
1000e09a:	881b      	ldrh	r3, [r3, #0]
1000e09c:	7122      	strb	r2, [r4, #4]
1000e09e:	0a1b      	lsrs	r3, r3, #8
1000e0a0:	7163      	strb	r3, [r4, #5]
1000e0a2:	2300      	movs	r3, #0
1000e0a4:	7220      	strb	r0, [r4, #8]
1000e0a6:	7263      	strb	r3, [r4, #9]
1000e0a8:	2801      	cmp	r0, #1
1000e0aa:	d02b      	beq.n	1000e104 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e0ac:	4298      	cmp	r0, r3
1000e0ae:	d01b      	beq.n	1000e0e8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e0b0:	2802      	cmp	r0, #2
1000e0b2:	d12f      	bne.n	1000e114 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e0b4:	4b1e      	ldr	r3, [pc, #120]	; (1000e130 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e0b6:	2112      	movs	r1, #18
1000e0b8:	1c1a      	adds	r2, r3, #0
1000e0ba:	32ce      	adds	r2, #206	; 0xce
1000e0bc:	8812      	ldrh	r2, [r2, #0]
1000e0be:	72a2      	strb	r2, [r4, #10]
1000e0c0:	0a12      	lsrs	r2, r2, #8
1000e0c2:	72e2      	strb	r2, [r4, #11]
1000e0c4:	1c1a      	adds	r2, r3, #0
1000e0c6:	32d0      	adds	r2, #208	; 0xd0
1000e0c8:	8812      	ldrh	r2, [r2, #0]
1000e0ca:	7322      	strb	r2, [r4, #12]
1000e0cc:	0a12      	lsrs	r2, r2, #8
1000e0ce:	7362      	strb	r2, [r4, #13]
1000e0d0:	1c1a      	adds	r2, r3, #0
1000e0d2:	32d2      	adds	r2, #210	; 0xd2
1000e0d4:	8812      	ldrh	r2, [r2, #0]
1000e0d6:	33d4      	adds	r3, #212	; 0xd4
1000e0d8:	73a2      	strb	r2, [r4, #14]
1000e0da:	0a12      	lsrs	r2, r2, #8
1000e0dc:	73e2      	strb	r2, [r4, #15]
1000e0de:	881b      	ldrh	r3, [r3, #0]
1000e0e0:	7423      	strb	r3, [r4, #16]
1000e0e2:	0a1b      	lsrs	r3, r3, #8
1000e0e4:	7463      	strb	r3, [r4, #17]
1000e0e6:	e016      	b.n	1000e116 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e0e8:	4b11      	ldr	r3, [pc, #68]	; (1000e130 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e0ea:	4912      	ldr	r1, [pc, #72]	; (1000e134 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e0ec:	33aa      	adds	r3, #170	; 0xaa
1000e0ee:	881d      	ldrh	r5, [r3, #0]
1000e0f0:	4811      	ldr	r0, [pc, #68]	; (1000e138 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e0f2:	0a2b      	lsrs	r3, r5, #8
1000e0f4:	72a5      	strb	r5, [r4, #10]
1000e0f6:	72e3      	strb	r3, [r4, #11]
1000e0f8:	1c2a      	adds	r2, r5, #0
1000e0fa:	4b10      	ldr	r3, [pc, #64]	; (1000e13c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e0fc:	350c      	adds	r5, #12
1000e0fe:	4798      	blx	r3
1000e100:	b2a9      	uxth	r1, r5
1000e102:	e008      	b.n	1000e116 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e104:	4b0a      	ldr	r3, [pc, #40]	; (1000e130 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e106:	210c      	movs	r1, #12
1000e108:	33cc      	adds	r3, #204	; 0xcc
1000e10a:	881b      	ldrh	r3, [r3, #0]
1000e10c:	72a3      	strb	r3, [r4, #10]
1000e10e:	0a1b      	lsrs	r3, r3, #8
1000e110:	72e3      	strb	r3, [r4, #11]
1000e112:	e000      	b.n	1000e116 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e114:	210a      	movs	r1, #10
1000e116:	1c0b      	adds	r3, r1, #0
1000e118:	3b08      	subs	r3, #8
1000e11a:	71a3      	strb	r3, [r4, #6]
1000e11c:	121b      	asrs	r3, r3, #8
1000e11e:	71e3      	strb	r3, [r4, #7]
1000e120:	1c20      	adds	r0, r4, #0
1000e122:	4b07      	ldr	r3, [pc, #28]	; (1000e140 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e124:	4798      	blx	r3
1000e126:	bd38      	pop	{r3, r4, r5, pc}
1000e128:	10015c60 	.word	0x10015c60
1000e12c:	100158f0 	.word	0x100158f0
1000e130:	10015982 	.word	0x10015982
1000e134:	10015a2e 	.word	0x10015a2e
1000e138:	10015c6c 	.word	0x10015c6c
1000e13c:	1001134f 	.word	0x1001134f
1000e140:	1000df75 	.word	0x1000df75

1000e144 <check_ConnData_idx_role>:
1000e144:	4b0c      	ldr	r3, [pc, #48]	; (1000e178 <check_ConnData_idx_role+0x34>)
1000e146:	b570      	push	{r4, r5, r6, lr}
1000e148:	1c04      	adds	r4, r0, #0
1000e14a:	2008      	movs	r0, #8
1000e14c:	429c      	cmp	r4, r3
1000e14e:	d011      	beq.n	1000e174 <check_ConnData_idx_role+0x30>
1000e150:	2300      	movs	r3, #0
1000e152:	2212      	movs	r2, #18
1000e154:	435a      	muls	r2, r3
1000e156:	4d09      	ldr	r5, [pc, #36]	; (1000e17c <check_ConnData_idx_role+0x38>)
1000e158:	b2d8      	uxtb	r0, r3
1000e15a:	1956      	adds	r6, r2, r5
1000e15c:	8976      	ldrh	r6, [r6, #10]
1000e15e:	42a6      	cmp	r6, r4
1000e160:	d104      	bne.n	1000e16c <check_ConnData_idx_role+0x28>
1000e162:	2900      	cmp	r1, #0
1000e164:	d006      	beq.n	1000e174 <check_ConnData_idx_role+0x30>
1000e166:	5d53      	ldrb	r3, [r2, r5]
1000e168:	700b      	strb	r3, [r1, #0]
1000e16a:	e003      	b.n	1000e174 <check_ConnData_idx_role+0x30>
1000e16c:	3301      	adds	r3, #1
1000e16e:	2b08      	cmp	r3, #8
1000e170:	d1ef      	bne.n	1000e152 <check_ConnData_idx_role+0xe>
1000e172:	1c18      	adds	r0, r3, #0
1000e174:	bd70      	pop	{r4, r5, r6, pc}
1000e176:	46c0      	nop			; (mov r8, r8)
1000e178:	0000ffff 	.word	0x0000ffff
1000e17c:	100158f2 	.word	0x100158f2

1000e180 <check_ConnData_emptyEntry>:
1000e180:	2300      	movs	r3, #0
1000e182:	2212      	movs	r2, #18
1000e184:	435a      	muls	r2, r3
1000e186:	4906      	ldr	r1, [pc, #24]	; (1000e1a0 <check_ConnData_emptyEntry+0x20>)
1000e188:	b2d8      	uxtb	r0, r3
1000e18a:	1852      	adds	r2, r2, r1
1000e18c:	8951      	ldrh	r1, [r2, #10]
1000e18e:	4a05      	ldr	r2, [pc, #20]	; (1000e1a4 <check_ConnData_emptyEntry+0x24>)
1000e190:	4291      	cmp	r1, r2
1000e192:	d003      	beq.n	1000e19c <check_ConnData_emptyEntry+0x1c>
1000e194:	3301      	adds	r3, #1
1000e196:	2b08      	cmp	r3, #8
1000e198:	d1f3      	bne.n	1000e182 <check_ConnData_emptyEntry+0x2>
1000e19a:	1c18      	adds	r0, r3, #0
1000e19c:	4770      	bx	lr
1000e19e:	46c0      	nop			; (mov r8, r8)
1000e1a0:	100158f2 	.word	0x100158f2
1000e1a4:	0000ffff 	.word	0x0000ffff

1000e1a8 <gapc_cmp_evt>:
1000e1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e1aa:	780b      	ldrb	r3, [r1, #0]
1000e1ac:	1c05      	adds	r5, r0, #0
1000e1ae:	1e58      	subs	r0, r3, #1
1000e1b0:	784e      	ldrb	r6, [r1, #1]
1000e1b2:	280f      	cmp	r0, #15
1000e1b4:	d85a      	bhi.n	1000e26c <gapc_cmp_evt+0xc4>
1000e1b6:	1c14      	adds	r4, r2, #0
1000e1b8:	f001 fa04 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000e1bc:	5858440a 	.word	0x5858440a
1000e1c0:	4b584444 	.word	0x4b584444
1000e1c4:	0825122d 	.word	0x0825122d
1000e1c8:	3e395858 	.word	0x3e395858
1000e1cc:	203b      	movs	r0, #59	; 0x3b
1000e1ce:	e04e      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e1d0:	203b      	movs	r0, #59	; 0x3b
1000e1d2:	2e00      	cmp	r6, #0
1000e1d4:	d04b      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e1d6:	0a2d      	lsrs	r5, r5, #8
1000e1d8:	8015      	strh	r5, [r2, #0]
1000e1da:	7096      	strb	r6, [r2, #2]
1000e1dc:	3835      	subs	r0, #53	; 0x35
1000e1de:	e046      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e1e0:	466b      	mov	r3, sp
1000e1e2:	1ddf      	adds	r7, r3, #7
1000e1e4:	2301      	movs	r3, #1
1000e1e6:	0a2d      	lsrs	r5, r5, #8
1000e1e8:	703b      	strb	r3, [r7, #0]
1000e1ea:	1c28      	adds	r0, r5, #0
1000e1ec:	1c39      	adds	r1, r7, #0
1000e1ee:	4b20      	ldr	r3, [pc, #128]	; (1000e270 <gapc_cmp_evt+0xc8>)
1000e1f0:	4798      	blx	r3
1000e1f2:	2807      	cmp	r0, #7
1000e1f4:	d803      	bhi.n	1000e1fe <gapc_cmp_evt+0x56>
1000e1f6:	783b      	ldrb	r3, [r7, #0]
1000e1f8:	203b      	movs	r0, #59	; 0x3b
1000e1fa:	2b00      	cmp	r3, #0
1000e1fc:	d037      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e1fe:	8065      	strh	r5, [r4, #2]
1000e200:	7126      	strb	r6, [r4, #4]
1000e202:	2009      	movs	r0, #9
1000e204:	e033      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e206:	203b      	movs	r0, #59	; 0x3b
1000e208:	2e00      	cmp	r6, #0
1000e20a:	d030      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e20c:	0a2d      	lsrs	r5, r5, #8
1000e20e:	8015      	strh	r5, [r2, #0]
1000e210:	7096      	strb	r6, [r2, #2]
1000e212:	382d      	subs	r0, #45	; 0x2d
1000e214:	e02b      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e216:	203b      	movs	r0, #59	; 0x3b
1000e218:	2e00      	cmp	r6, #0
1000e21a:	d028      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e21c:	2300      	movs	r3, #0
1000e21e:	0a2d      	lsrs	r5, r5, #8
1000e220:	8015      	strh	r5, [r2, #0]
1000e222:	7096      	strb	r6, [r2, #2]
1000e224:	8093      	strh	r3, [r2, #4]
1000e226:	80d3      	strh	r3, [r2, #6]
1000e228:	8113      	strh	r3, [r2, #8]
1000e22a:	3834      	subs	r0, #52	; 0x34
1000e22c:	e01f      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e22e:	203b      	movs	r0, #59	; 0x3b
1000e230:	2e00      	cmp	r6, #0
1000e232:	d01c      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e234:	7216      	strb	r6, [r2, #8]
1000e236:	e003      	b.n	1000e240 <gapc_cmp_evt+0x98>
1000e238:	203b      	movs	r0, #59	; 0x3b
1000e23a:	2e00      	cmp	r6, #0
1000e23c:	d017      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e23e:	7116      	strb	r6, [r2, #4]
1000e240:	3812      	subs	r0, #18
1000e242:	e014      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e244:	203b      	movs	r0, #59	; 0x3b
1000e246:	2e00      	cmp	r6, #0
1000e248:	d011      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e24a:	7093      	strb	r3, [r2, #2]
1000e24c:	70d6      	strb	r6, [r2, #3]
1000e24e:	382a      	subs	r0, #42	; 0x2a
1000e250:	e00d      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e252:	203b      	movs	r0, #59	; 0x3b
1000e254:	2e00      	cmp	r6, #0
1000e256:	d00a      	beq.n	1000e26e <gapc_cmp_evt+0xc6>
1000e258:	0a2d      	lsrs	r5, r5, #8
1000e25a:	7016      	strb	r6, [r2, #0]
1000e25c:	8055      	strh	r5, [r2, #2]
1000e25e:	1d10      	adds	r0, r2, #4
1000e260:	2100      	movs	r1, #0
1000e262:	2205      	movs	r2, #5
1000e264:	4b03      	ldr	r3, [pc, #12]	; (1000e274 <gapc_cmp_evt+0xcc>)
1000e266:	4798      	blx	r3
1000e268:	2012      	movs	r0, #18
1000e26a:	e000      	b.n	1000e26e <gapc_cmp_evt+0xc6>
1000e26c:	2000      	movs	r0, #0
1000e26e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e270:	1000e145 	.word	0x1000e145
1000e274:	10011361 	.word	0x10011361

1000e278 <gapc_connection_cfm_handler>:
1000e278:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e27a:	b085      	sub	sp, #20
1000e27c:	1c1d      	adds	r5, r3, #0
1000e27e:	ab0a      	add	r3, sp, #40	; 0x28
1000e280:	781b      	ldrb	r3, [r3, #0]
1000e282:	9201      	str	r2, [sp, #4]
1000e284:	9302      	str	r3, [sp, #8]
1000e286:	ab0b      	add	r3, sp, #44	; 0x2c
1000e288:	781b      	ldrb	r3, [r3, #0]
1000e28a:	1c07      	adds	r7, r0, #0
1000e28c:	9303      	str	r3, [sp, #12]
1000e28e:	ab0c      	add	r3, sp, #48	; 0x30
1000e290:	881a      	ldrh	r2, [r3, #0]
1000e292:	2302      	movs	r3, #2
1000e294:	1c0e      	adds	r6, r1, #0
1000e296:	4c23      	ldr	r4, [pc, #140]	; (1000e324 <gapc_connection_cfm_handler+0xac>)
1000e298:	1c39      	adds	r1, r7, #0
1000e29a:	7023      	strb	r3, [r4, #0]
1000e29c:	330c      	adds	r3, #12
1000e29e:	7063      	strb	r3, [r4, #1]
1000e2a0:	70a3      	strb	r3, [r4, #2]
1000e2a2:	4b21      	ldr	r3, [pc, #132]	; (1000e328 <gapc_connection_cfm_handler+0xb0>)
1000e2a4:	70e2      	strb	r2, [r4, #3]
1000e2a6:	881a      	ldrh	r2, [r3, #0]
1000e2a8:	881b      	ldrh	r3, [r3, #0]
1000e2aa:	7122      	strb	r2, [r4, #4]
1000e2ac:	0a1b      	lsrs	r3, r3, #8
1000e2ae:	4f1f      	ldr	r7, [pc, #124]	; (1000e32c <gapc_connection_cfm_handler+0xb4>)
1000e2b0:	2210      	movs	r2, #16
1000e2b2:	481f      	ldr	r0, [pc, #124]	; (1000e330 <gapc_connection_cfm_handler+0xb8>)
1000e2b4:	7163      	strb	r3, [r4, #5]
1000e2b6:	47b8      	blx	r7
1000e2b8:	0a33      	lsrs	r3, r6, #8
1000e2ba:	7626      	strb	r6, [r4, #24]
1000e2bc:	7663      	strb	r3, [r4, #25]
1000e2be:	9901      	ldr	r1, [sp, #4]
1000e2c0:	0c33      	lsrs	r3, r6, #16
1000e2c2:	2210      	movs	r2, #16
1000e2c4:	0e36      	lsrs	r6, r6, #24
1000e2c6:	481b      	ldr	r0, [pc, #108]	; (1000e334 <gapc_connection_cfm_handler+0xbc>)
1000e2c8:	76a3      	strb	r3, [r4, #26]
1000e2ca:	76e6      	strb	r6, [r4, #27]
1000e2cc:	47b8      	blx	r7
1000e2ce:	1c23      	adds	r3, r4, #0
1000e2d0:	332c      	adds	r3, #44	; 0x2c
1000e2d2:	701d      	strb	r5, [r3, #0]
1000e2d4:	1c23      	adds	r3, r4, #0
1000e2d6:	0a2a      	lsrs	r2, r5, #8
1000e2d8:	332d      	adds	r3, #45	; 0x2d
1000e2da:	701a      	strb	r2, [r3, #0]
1000e2dc:	1c23      	adds	r3, r4, #0
1000e2de:	0c2a      	lsrs	r2, r5, #16
1000e2e0:	332e      	adds	r3, #46	; 0x2e
1000e2e2:	701a      	strb	r2, [r3, #0]
1000e2e4:	1c23      	adds	r3, r4, #0
1000e2e6:	0e2d      	lsrs	r5, r5, #24
1000e2e8:	332f      	adds	r3, #47	; 0x2f
1000e2ea:	466a      	mov	r2, sp
1000e2ec:	701d      	strb	r5, [r3, #0]
1000e2ee:	1c23      	adds	r3, r4, #0
1000e2f0:	7a12      	ldrb	r2, [r2, #8]
1000e2f2:	3330      	adds	r3, #48	; 0x30
1000e2f4:	701a      	strb	r2, [r3, #0]
1000e2f6:	1c23      	adds	r3, r4, #0
1000e2f8:	2500      	movs	r5, #0
1000e2fa:	3331      	adds	r3, #49	; 0x31
1000e2fc:	466a      	mov	r2, sp
1000e2fe:	701d      	strb	r5, [r3, #0]
1000e300:	1c23      	adds	r3, r4, #0
1000e302:	7b12      	ldrb	r2, [r2, #12]
1000e304:	3332      	adds	r3, #50	; 0x32
1000e306:	701a      	strb	r2, [r3, #0]
1000e308:	1c23      	adds	r3, r4, #0
1000e30a:	3333      	adds	r3, #51	; 0x33
1000e30c:	701d      	strb	r5, [r3, #0]
1000e30e:	232c      	movs	r3, #44	; 0x2c
1000e310:	1c20      	adds	r0, r4, #0
1000e312:	71a3      	strb	r3, [r4, #6]
1000e314:	2134      	movs	r1, #52	; 0x34
1000e316:	4b08      	ldr	r3, [pc, #32]	; (1000e338 <gapc_connection_cfm_handler+0xc0>)
1000e318:	71e5      	strb	r5, [r4, #7]
1000e31a:	4798      	blx	r3
1000e31c:	1c28      	adds	r0, r5, #0
1000e31e:	b005      	add	sp, #20
1000e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e322:	46c0      	nop			; (mov r8, r8)
1000e324:	10015c60 	.word	0x10015c60
1000e328:	100158f0 	.word	0x100158f0
1000e32c:	1001134f 	.word	0x1001134f
1000e330:	10015c68 	.word	0x10015c68
1000e334:	10015c7c 	.word	0x10015c7c
1000e338:	1000df75 	.word	0x1000df75

1000e33c <gapc_con_req_ind>:
1000e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e33e:	7845      	ldrb	r5, [r0, #1]
1000e340:	7803      	ldrb	r3, [r0, #0]
1000e342:	4c30      	ldr	r4, [pc, #192]	; (1000e404 <gapc_con_req_ind+0xc8>)
1000e344:	022d      	lsls	r5, r5, #8
1000e346:	431d      	orrs	r5, r3
1000e348:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e34a:	78c3      	ldrb	r3, [r0, #3]
1000e34c:	7882      	ldrb	r2, [r0, #2]
1000e34e:	b08b      	sub	sp, #44	; 0x2c
1000e350:	021b      	lsls	r3, r3, #8
1000e352:	431a      	orrs	r2, r3
1000e354:	466b      	mov	r3, sp
1000e356:	9205      	str	r2, [sp, #20]
1000e358:	8a9b      	ldrh	r3, [r3, #20]
1000e35a:	2120      	movs	r1, #32
1000e35c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e35e:	7943      	ldrb	r3, [r0, #5]
1000e360:	7902      	ldrb	r2, [r0, #4]
1000e362:	021b      	lsls	r3, r3, #8
1000e364:	431a      	orrs	r2, r3
1000e366:	466b      	mov	r3, sp
1000e368:	9206      	str	r2, [sp, #24]
1000e36a:	8b1b      	ldrh	r3, [r3, #24]
1000e36c:	1c06      	adds	r6, r0, #0
1000e36e:	8623      	strh	r3, [r4, #48]	; 0x30
1000e370:	79c3      	ldrb	r3, [r0, #7]
1000e372:	7982      	ldrb	r2, [r0, #6]
1000e374:	021b      	lsls	r3, r3, #8
1000e376:	431a      	orrs	r2, r3
1000e378:	466b      	mov	r3, sp
1000e37a:	9207      	str	r2, [sp, #28]
1000e37c:	466a      	mov	r2, sp
1000e37e:	8b9b      	ldrh	r3, [r3, #28]
1000e380:	1852      	adds	r2, r2, r1
1000e382:	8663      	strh	r3, [r4, #50]	; 0x32
1000e384:	7a43      	ldrb	r3, [r0, #9]
1000e386:	1c01      	adds	r1, r0, #0
1000e388:	9308      	str	r3, [sp, #32]
1000e38a:	1c23      	adds	r3, r4, #0
1000e38c:	7812      	ldrb	r2, [r2, #0]
1000e38e:	3377      	adds	r3, #119	; 0x77
1000e390:	3478      	adds	r4, #120	; 0x78
1000e392:	701a      	strb	r2, [r3, #0]
1000e394:	310a      	adds	r1, #10
1000e396:	2206      	movs	r2, #6
1000e398:	4b1b      	ldr	r3, [pc, #108]	; (1000e408 <gapc_con_req_ind+0xcc>)
1000e39a:	1c20      	adds	r0, r4, #0
1000e39c:	4798      	blx	r3
1000e39e:	7c33      	ldrb	r3, [r6, #16]
1000e3a0:	9309      	str	r3, [sp, #36]	; 0x24
1000e3a2:	4b1a      	ldr	r3, [pc, #104]	; (1000e40c <gapc_con_req_ind+0xd0>)
1000e3a4:	4798      	blx	r3
1000e3a6:	4e1a      	ldr	r6, [pc, #104]	; (1000e410 <gapc_con_req_ind+0xd4>)
1000e3a8:	1e07      	subs	r7, r0, #0
1000e3aa:	2f07      	cmp	r7, #7
1000e3ac:	d81b      	bhi.n	1000e3e6 <gapc_con_req_ind+0xaa>
1000e3ae:	2312      	movs	r3, #18
1000e3b0:	4343      	muls	r3, r0
1000e3b2:	18f0      	adds	r0, r6, r3
1000e3b4:	8145      	strh	r5, [r0, #10]
1000e3b6:	4669      	mov	r1, sp
1000e3b8:	2524      	movs	r5, #36	; 0x24
1000e3ba:	1949      	adds	r1, r1, r5
1000e3bc:	7809      	ldrb	r1, [r1, #0]
1000e3be:	2206      	movs	r2, #6
1000e3c0:	54f1      	strb	r1, [r6, r3]
1000e3c2:	2120      	movs	r1, #32
1000e3c4:	466b      	mov	r3, sp
1000e3c6:	185b      	adds	r3, r3, r1
1000e3c8:	781b      	ldrb	r3, [r3, #0]
1000e3ca:	1c21      	adds	r1, r4, #0
1000e3cc:	7043      	strb	r3, [r0, #1]
1000e3ce:	466b      	mov	r3, sp
1000e3d0:	8a9b      	ldrh	r3, [r3, #20]
1000e3d2:	3002      	adds	r0, #2
1000e3d4:	8143      	strh	r3, [r0, #10]
1000e3d6:	466b      	mov	r3, sp
1000e3d8:	8b1b      	ldrh	r3, [r3, #24]
1000e3da:	8183      	strh	r3, [r0, #12]
1000e3dc:	466b      	mov	r3, sp
1000e3de:	8b9b      	ldrh	r3, [r3, #28]
1000e3e0:	81c3      	strh	r3, [r0, #14]
1000e3e2:	4b09      	ldr	r3, [pc, #36]	; (1000e408 <gapc_con_req_ind+0xcc>)
1000e3e4:	4798      	blx	r3
1000e3e6:	2112      	movs	r1, #18
1000e3e8:	2300      	movs	r3, #0
1000e3ea:	434f      	muls	r7, r1
1000e3ec:	9300      	str	r3, [sp, #0]
1000e3ee:	9301      	str	r3, [sp, #4]
1000e3f0:	19f6      	adds	r6, r6, r7
1000e3f2:	8971      	ldrh	r1, [r6, #10]
1000e3f4:	4a07      	ldr	r2, [pc, #28]	; (1000e414 <gapc_con_req_ind+0xd8>)
1000e3f6:	9102      	str	r1, [sp, #8]
1000e3f8:	1c10      	adds	r0, r2, #0
1000e3fa:	1c19      	adds	r1, r3, #0
1000e3fc:	4c06      	ldr	r4, [pc, #24]	; (1000e418 <gapc_con_req_ind+0xdc>)
1000e3fe:	47a0      	blx	r4
1000e400:	b00b      	add	sp, #44	; 0x2c
1000e402:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e404:	10015982 	.word	0x10015982
1000e408:	1001134f 	.word	0x1001134f
1000e40c:	1000e181 	.word	0x1000e181
1000e410:	100158f2 	.word	0x100158f2
1000e414:	10014bd0 	.word	0x10014bd0
1000e418:	1000e279 	.word	0x1000e279

1000e41c <gapc_disconnect_cmd_handler>:
1000e41c:	2204      	movs	r2, #4
1000e41e:	b510      	push	{r4, lr}
1000e420:	4b0c      	ldr	r3, [pc, #48]	; (1000e454 <gapc_disconnect_cmd_handler+0x38>)
1000e422:	2400      	movs	r4, #0
1000e424:	701a      	strb	r2, [r3, #0]
1000e426:	320a      	adds	r2, #10
1000e428:	705a      	strb	r2, [r3, #1]
1000e42a:	709a      	strb	r2, [r3, #2]
1000e42c:	4a0a      	ldr	r2, [pc, #40]	; (1000e458 <gapc_disconnect_cmd_handler+0x3c>)
1000e42e:	70d9      	strb	r1, [r3, #3]
1000e430:	8811      	ldrh	r1, [r2, #0]
1000e432:	8812      	ldrh	r2, [r2, #0]
1000e434:	7119      	strb	r1, [r3, #4]
1000e436:	0a12      	lsrs	r2, r2, #8
1000e438:	715a      	strb	r2, [r3, #5]
1000e43a:	2201      	movs	r2, #1
1000e43c:	721a      	strb	r2, [r3, #8]
1000e43e:	1892      	adds	r2, r2, r2
1000e440:	7258      	strb	r0, [r3, #9]
1000e442:	719a      	strb	r2, [r3, #6]
1000e444:	71dc      	strb	r4, [r3, #7]
1000e446:	1c18      	adds	r0, r3, #0
1000e448:	210a      	movs	r1, #10
1000e44a:	4b04      	ldr	r3, [pc, #16]	; (1000e45c <gapc_disconnect_cmd_handler+0x40>)
1000e44c:	4798      	blx	r3
1000e44e:	1c20      	adds	r0, r4, #0
1000e450:	bd10      	pop	{r4, pc}
1000e452:	46c0      	nop			; (mov r8, r8)
1000e454:	10015c60 	.word	0x10015c60
1000e458:	100158f0 	.word	0x100158f0
1000e45c:	1000df75 	.word	0x1000df75

1000e460 <gapc_disconnect_ind>:
1000e460:	1c02      	adds	r2, r0, #0
1000e462:	b508      	push	{r3, lr}
1000e464:	7843      	ldrb	r3, [r0, #1]
1000e466:	7800      	ldrb	r0, [r0, #0]
1000e468:	021b      	lsls	r3, r3, #8
1000e46a:	4318      	orrs	r0, r3
1000e46c:	8008      	strh	r0, [r1, #0]
1000e46e:	7893      	ldrb	r3, [r2, #2]
1000e470:	708b      	strb	r3, [r1, #2]
1000e472:	2100      	movs	r1, #0
1000e474:	4b05      	ldr	r3, [pc, #20]	; (1000e48c <gapc_disconnect_ind+0x2c>)
1000e476:	4798      	blx	r3
1000e478:	2807      	cmp	r0, #7
1000e47a:	d806      	bhi.n	1000e48a <gapc_disconnect_ind+0x2a>
1000e47c:	2312      	movs	r3, #18
1000e47e:	4358      	muls	r0, r3
1000e480:	4b03      	ldr	r3, [pc, #12]	; (1000e490 <gapc_disconnect_ind+0x30>)
1000e482:	1818      	adds	r0, r3, r0
1000e484:	2301      	movs	r3, #1
1000e486:	425b      	negs	r3, r3
1000e488:	8143      	strh	r3, [r0, #10]
1000e48a:	bd08      	pop	{r3, pc}
1000e48c:	1000e145 	.word	0x1000e145
1000e490:	100158f2 	.word	0x100158f2

1000e494 <gapc_bond_cmd_handler>:
1000e494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e496:	9300      	str	r3, [sp, #0]
1000e498:	2312      	movs	r3, #18
1000e49a:	1c04      	adds	r4, r0, #0
1000e49c:	a808      	add	r0, sp, #32
1000e49e:	7807      	ldrb	r7, [r0, #0]
1000e4a0:	a809      	add	r0, sp, #36	; 0x24
1000e4a2:	7806      	ldrb	r6, [r0, #0]
1000e4a4:	a80a      	add	r0, sp, #40	; 0x28
1000e4a6:	7805      	ldrb	r5, [r0, #0]
1000e4a8:	a80b      	add	r0, sp, #44	; 0x2c
1000e4aa:	7800      	ldrb	r0, [r0, #0]
1000e4ac:	9001      	str	r0, [sp, #4]
1000e4ae:	4810      	ldr	r0, [pc, #64]	; (1000e4f0 <gapc_bond_cmd_handler+0x5c>)
1000e4b0:	7003      	strb	r3, [r0, #0]
1000e4b2:	230e      	movs	r3, #14
1000e4b4:	70c4      	strb	r4, [r0, #3]
1000e4b6:	4c0f      	ldr	r4, [pc, #60]	; (1000e4f4 <gapc_bond_cmd_handler+0x60>)
1000e4b8:	7043      	strb	r3, [r0, #1]
1000e4ba:	7083      	strb	r3, [r0, #2]
1000e4bc:	8823      	ldrh	r3, [r4, #0]
1000e4be:	8824      	ldrh	r4, [r4, #0]
1000e4c0:	7103      	strb	r3, [r0, #4]
1000e4c2:	466b      	mov	r3, sp
1000e4c4:	781b      	ldrb	r3, [r3, #0]
1000e4c6:	0a24      	lsrs	r4, r4, #8
1000e4c8:	72c3      	strb	r3, [r0, #11]
1000e4ca:	466b      	mov	r3, sp
1000e4cc:	791b      	ldrb	r3, [r3, #4]
1000e4ce:	7144      	strb	r4, [r0, #5]
1000e4d0:	73c3      	strb	r3, [r0, #15]
1000e4d2:	2308      	movs	r3, #8
1000e4d4:	7183      	strb	r3, [r0, #6]
1000e4d6:	2300      	movs	r3, #0
1000e4d8:	240a      	movs	r4, #10
1000e4da:	7241      	strb	r1, [r0, #9]
1000e4dc:	71c3      	strb	r3, [r0, #7]
1000e4de:	2110      	movs	r1, #16
1000e4e0:	4b05      	ldr	r3, [pc, #20]	; (1000e4f8 <gapc_bond_cmd_handler+0x64>)
1000e4e2:	7307      	strb	r7, [r0, #12]
1000e4e4:	7346      	strb	r6, [r0, #13]
1000e4e6:	7385      	strb	r5, [r0, #14]
1000e4e8:	7204      	strb	r4, [r0, #8]
1000e4ea:	7282      	strb	r2, [r0, #10]
1000e4ec:	4798      	blx	r3
1000e4ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e4f0:	10015c60 	.word	0x10015c60
1000e4f4:	100158f0 	.word	0x100158f0
1000e4f8:	1000df75 	.word	0x1000df75

1000e4fc <gapc_bond_ind>:
1000e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e4fe:	780e      	ldrb	r6, [r1, #0]
1000e500:	1c03      	adds	r3, r0, #0
1000e502:	1eb0      	subs	r0, r6, #2
1000e504:	2805      	cmp	r0, #5
1000e506:	d85d      	bhi.n	1000e5c4 <gapc_bond_ind+0xc8>
1000e508:	1c15      	adds	r5, r2, #0
1000e50a:	1c0c      	adds	r4, r1, #0
1000e50c:	f001 f85a 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000e510:	2f5a030d 	.word	0x2f5a030d
1000e514:	4740      	.short	0x4740
1000e516:	2009      	movs	r0, #9
1000e518:	2a00      	cmp	r2, #0
1000e51a:	d054      	beq.n	1000e5c6 <gapc_bond_ind+0xca>
1000e51c:	0a1b      	lsrs	r3, r3, #8
1000e51e:	8053      	strh	r3, [r2, #2]
1000e520:	788b      	ldrb	r3, [r1, #2]
1000e522:	4829      	ldr	r0, [pc, #164]	; (1000e5c8 <gapc_bond_ind+0xcc>)
1000e524:	7113      	strb	r3, [r2, #4]
1000e526:	2100      	movs	r1, #0
1000e528:	e01c      	b.n	1000e564 <gapc_bond_ind+0x68>
1000e52a:	2009      	movs	r0, #9
1000e52c:	2a00      	cmp	r2, #0
1000e52e:	d04a      	beq.n	1000e5c6 <gapc_bond_ind+0xca>
1000e530:	4c25      	ldr	r4, [pc, #148]	; (1000e5c8 <gapc_bond_ind+0xcc>)
1000e532:	0a1b      	lsrs	r3, r3, #8
1000e534:	8053      	strh	r3, [r2, #2]
1000e536:	788b      	ldrb	r3, [r1, #2]
1000e538:	2700      	movs	r7, #0
1000e53a:	1c10      	adds	r0, r2, #0
1000e53c:	1c21      	adds	r1, r4, #0
1000e53e:	7013      	strb	r3, [r2, #0]
1000e540:	4e22      	ldr	r6, [pc, #136]	; (1000e5cc <gapc_bond_ind+0xd0>)
1000e542:	7117      	strb	r7, [r2, #4]
1000e544:	312e      	adds	r1, #46	; 0x2e
1000e546:	2217      	movs	r2, #23
1000e548:	3032      	adds	r0, #50	; 0x32
1000e54a:	47b0      	blx	r6
1000e54c:	1c28      	adds	r0, r5, #0
1000e54e:	1c21      	adds	r1, r4, #0
1000e550:	2210      	movs	r2, #16
1000e552:	311e      	adds	r1, #30
1000e554:	3022      	adds	r0, #34	; 0x22
1000e556:	47b0      	blx	r6
1000e558:	1ca1      	adds	r1, r4, #2
1000e55a:	1da8      	adds	r0, r5, #6
1000e55c:	221c      	movs	r2, #28
1000e55e:	47b0      	blx	r6
1000e560:	1c20      	adds	r0, r4, #0
1000e562:	1c39      	adds	r1, r7, #0
1000e564:	2246      	movs	r2, #70	; 0x46
1000e566:	4b1a      	ldr	r3, [pc, #104]	; (1000e5d0 <gapc_bond_ind+0xd4>)
1000e568:	4798      	blx	r3
1000e56a:	2009      	movs	r0, #9
1000e56c:	e02b      	b.n	1000e5c6 <gapc_bond_ind+0xca>
1000e56e:	4d16      	ldr	r5, [pc, #88]	; (1000e5c8 <gapc_bond_ind+0xcc>)
1000e570:	3102      	adds	r1, #2
1000e572:	1c28      	adds	r0, r5, #0
1000e574:	2210      	movs	r2, #16
1000e576:	4e15      	ldr	r6, [pc, #84]	; (1000e5cc <gapc_bond_ind+0xd0>)
1000e578:	302e      	adds	r0, #46	; 0x2e
1000e57a:	47b0      	blx	r6
1000e57c:	1c28      	adds	r0, r5, #0
1000e57e:	1c21      	adds	r1, r4, #0
1000e580:	303f      	adds	r0, #63	; 0x3f
1000e582:	3112      	adds	r1, #18
1000e584:	2206      	movs	r2, #6
1000e586:	47b0      	blx	r6
1000e588:	7e23      	ldrb	r3, [r4, #24]
1000e58a:	353e      	adds	r5, #62	; 0x3e
1000e58c:	702b      	strb	r3, [r5, #0]
1000e58e:	e019      	b.n	1000e5c4 <gapc_bond_ind+0xc8>
1000e590:	480d      	ldr	r0, [pc, #52]	; (1000e5c8 <gapc_bond_ind+0xcc>)
1000e592:	3102      	adds	r1, #2
1000e594:	2210      	movs	r2, #16
1000e596:	4b0d      	ldr	r3, [pc, #52]	; (1000e5cc <gapc_bond_ind+0xd0>)
1000e598:	301e      	adds	r0, #30
1000e59a:	4798      	blx	r3
1000e59c:	e012      	b.n	1000e5c4 <gapc_bond_ind+0xc8>
1000e59e:	4d0a      	ldr	r5, [pc, #40]	; (1000e5c8 <gapc_bond_ind+0xcc>)
1000e5a0:	3102      	adds	r1, #2
1000e5a2:	2210      	movs	r2, #16
1000e5a4:	4e09      	ldr	r6, [pc, #36]	; (1000e5cc <gapc_bond_ind+0xd0>)
1000e5a6:	1ca8      	adds	r0, r5, #2
1000e5a8:	47b0      	blx	r6
1000e5aa:	1c28      	adds	r0, r5, #0
1000e5ac:	1c21      	adds	r1, r4, #0
1000e5ae:	7ce3      	ldrb	r3, [r4, #19]
1000e5b0:	7ca2      	ldrb	r2, [r4, #18]
1000e5b2:	021b      	lsls	r3, r3, #8
1000e5b4:	4313      	orrs	r3, r2
1000e5b6:	3014      	adds	r0, #20
1000e5b8:	3114      	adds	r1, #20
1000e5ba:	2208      	movs	r2, #8
1000e5bc:	826b      	strh	r3, [r5, #18]
1000e5be:	47b0      	blx	r6
1000e5c0:	7f23      	ldrb	r3, [r4, #28]
1000e5c2:	772b      	strb	r3, [r5, #28]
1000e5c4:	2000      	movs	r0, #0
1000e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e5c8:	10014c00 	.word	0x10014c00
1000e5cc:	1001134f 	.word	0x1001134f
1000e5d0:	10011361 	.word	0x10011361

1000e5d4 <gapc_bond_req_ind>:
1000e5d4:	b570      	push	{r4, r5, r6, lr}
1000e5d6:	780c      	ldrb	r4, [r1, #0]
1000e5d8:	1c03      	adds	r3, r0, #0
1000e5da:	7849      	ldrb	r1, [r1, #1]
1000e5dc:	2c07      	cmp	r4, #7
1000e5de:	d85c      	bhi.n	1000e69a <gapc_bond_req_ind+0xc6>
1000e5e0:	1c20      	adds	r0, r4, #0
1000e5e2:	f000 ffef 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000e5e6:	5a04      	.short	0x5a04
1000e5e8:	5a0b5a5a 	.word	0x5a0b5a5a
1000e5ec:	1f1f      	.short	0x1f1f
1000e5ee:	200a      	movs	r0, #10
1000e5f0:	2a00      	cmp	r2, #0
1000e5f2:	d053      	beq.n	1000e69c <gapc_bond_req_ind+0xc8>
1000e5f4:	0a1b      	lsrs	r3, r3, #8
1000e5f6:	8013      	strh	r3, [r2, #0]
1000e5f8:	7091      	strb	r1, [r2, #2]
1000e5fa:	e04f      	b.n	1000e69c <gapc_bond_req_ind+0xc8>
1000e5fc:	2a00      	cmp	r2, #0
1000e5fe:	d00b      	beq.n	1000e618 <gapc_bond_req_ind+0x44>
1000e600:	0a1b      	lsrs	r3, r3, #8
1000e602:	8013      	strh	r3, [r2, #0]
1000e604:	2900      	cmp	r1, #0
1000e606:	d102      	bne.n	1000e60e <gapc_bond_req_ind+0x3a>
1000e608:	2301      	movs	r3, #1
1000e60a:	7093      	strb	r3, [r2, #2]
1000e60c:	e004      	b.n	1000e618 <gapc_bond_req_ind+0x44>
1000e60e:	2300      	movs	r3, #0
1000e610:	7093      	strb	r3, [r2, #2]
1000e612:	2902      	cmp	r1, #2
1000e614:	d102      	bne.n	1000e61c <gapc_bond_req_ind+0x48>
1000e616:	70d3      	strb	r3, [r2, #3]
1000e618:	200c      	movs	r0, #12
1000e61a:	e03f      	b.n	1000e69c <gapc_bond_req_ind+0xc8>
1000e61c:	2901      	cmp	r1, #1
1000e61e:	d1fb      	bne.n	1000e618 <gapc_bond_req_ind+0x44>
1000e620:	70d1      	strb	r1, [r2, #3]
1000e622:	e7f9      	b.n	1000e618 <gapc_bond_req_ind+0x44>
1000e624:	2214      	movs	r2, #20
1000e626:	481e      	ldr	r0, [pc, #120]	; (1000e6a0 <gapc_bond_req_ind+0xcc>)
1000e628:	0a1b      	lsrs	r3, r3, #8
1000e62a:	70c3      	strb	r3, [r0, #3]
1000e62c:	4b1d      	ldr	r3, [pc, #116]	; (1000e6a4 <gapc_bond_req_ind+0xd0>)
1000e62e:	7002      	strb	r2, [r0, #0]
1000e630:	3a06      	subs	r2, #6
1000e632:	7042      	strb	r2, [r0, #1]
1000e634:	7082      	strb	r2, [r0, #2]
1000e636:	881a      	ldrh	r2, [r3, #0]
1000e638:	881b      	ldrh	r3, [r3, #0]
1000e63a:	4e1b      	ldr	r6, [pc, #108]	; (1000e6a8 <gapc_bond_req_ind+0xd4>)
1000e63c:	0a1b      	lsrs	r3, r3, #8
1000e63e:	7143      	strb	r3, [r0, #5]
1000e640:	2301      	movs	r3, #1
1000e642:	7102      	strb	r2, [r0, #4]
1000e644:	7204      	strb	r4, [r0, #8]
1000e646:	7243      	strb	r3, [r0, #9]
1000e648:	1c05      	adds	r5, r0, #0
1000e64a:	1c31      	adds	r1, r6, #0
1000e64c:	300a      	adds	r0, #10
1000e64e:	2c07      	cmp	r4, #7
1000e650:	d116      	bne.n	1000e680 <gapc_bond_req_ind+0xac>
1000e652:	317e      	adds	r1, #126	; 0x7e
1000e654:	2210      	movs	r2, #16
1000e656:	4c15      	ldr	r4, [pc, #84]	; (1000e6ac <gapc_bond_req_ind+0xd8>)
1000e658:	47a0      	blx	r4
1000e65a:	1c33      	adds	r3, r6, #0
1000e65c:	1c31      	adds	r1, r6, #0
1000e65e:	1c28      	adds	r0, r5, #0
1000e660:	338e      	adds	r3, #142	; 0x8e
1000e662:	881b      	ldrh	r3, [r3, #0]
1000e664:	3190      	adds	r1, #144	; 0x90
1000e666:	76ab      	strb	r3, [r5, #26]
1000e668:	2208      	movs	r2, #8
1000e66a:	0a1b      	lsrs	r3, r3, #8
1000e66c:	301c      	adds	r0, #28
1000e66e:	76eb      	strb	r3, [r5, #27]
1000e670:	47a0      	blx	r4
1000e672:	1c31      	adds	r1, r6, #0
1000e674:	3198      	adds	r1, #152	; 0x98
1000e676:	780a      	ldrb	r2, [r1, #0]
1000e678:	1d6b      	adds	r3, r5, #5
1000e67a:	77da      	strb	r2, [r3, #31]
1000e67c:	2125      	movs	r1, #37	; 0x25
1000e67e:	e004      	b.n	1000e68a <gapc_bond_req_ind+0xb6>
1000e680:	319a      	adds	r1, #154	; 0x9a
1000e682:	2210      	movs	r2, #16
1000e684:	4b09      	ldr	r3, [pc, #36]	; (1000e6ac <gapc_bond_req_ind+0xd8>)
1000e686:	4798      	blx	r3
1000e688:	211a      	movs	r1, #26
1000e68a:	1c0b      	adds	r3, r1, #0
1000e68c:	2400      	movs	r4, #0
1000e68e:	3b08      	subs	r3, #8
1000e690:	71ab      	strb	r3, [r5, #6]
1000e692:	1c28      	adds	r0, r5, #0
1000e694:	4b06      	ldr	r3, [pc, #24]	; (1000e6b0 <gapc_bond_req_ind+0xdc>)
1000e696:	71ec      	strb	r4, [r5, #7]
1000e698:	4798      	blx	r3
1000e69a:	2000      	movs	r0, #0
1000e69c:	bd70      	pop	{r4, r5, r6, pc}
1000e69e:	46c0      	nop			; (mov r8, r8)
1000e6a0:	10015c60 	.word	0x10015c60
1000e6a4:	100158f0 	.word	0x100158f0
1000e6a8:	10015982 	.word	0x10015982
1000e6ac:	1001134f 	.word	0x1001134f
1000e6b0:	1000df75 	.word	0x1000df75

1000e6b4 <gapc_bond_cfm_handler_pair_resp>:
1000e6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6b6:	b085      	sub	sp, #20
1000e6b8:	1c07      	adds	r7, r0, #0
1000e6ba:	a80a      	add	r0, sp, #40	; 0x28
1000e6bc:	7806      	ldrb	r6, [r0, #0]
1000e6be:	a80b      	add	r0, sp, #44	; 0x2c
1000e6c0:	7805      	ldrb	r5, [r0, #0]
1000e6c2:	a80c      	add	r0, sp, #48	; 0x30
1000e6c4:	7800      	ldrb	r0, [r0, #0]
1000e6c6:	2414      	movs	r4, #20
1000e6c8:	9002      	str	r0, [sp, #8]
1000e6ca:	a80d      	add	r0, sp, #52	; 0x34
1000e6cc:	7800      	ldrb	r0, [r0, #0]
1000e6ce:	9301      	str	r3, [sp, #4]
1000e6d0:	9003      	str	r0, [sp, #12]
1000e6d2:	a80e      	add	r0, sp, #56	; 0x38
1000e6d4:	8800      	ldrh	r0, [r0, #0]
1000e6d6:	4684      	mov	ip, r0
1000e6d8:	4812      	ldr	r0, [pc, #72]	; (1000e724 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e6da:	7004      	strb	r4, [r0, #0]
1000e6dc:	3c06      	subs	r4, #6
1000e6de:	7044      	strb	r4, [r0, #1]
1000e6e0:	7084      	strb	r4, [r0, #2]
1000e6e2:	4664      	mov	r4, ip
1000e6e4:	70c4      	strb	r4, [r0, #3]
1000e6e6:	4c10      	ldr	r4, [pc, #64]	; (1000e728 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e6e8:	7247      	strb	r7, [r0, #9]
1000e6ea:	8823      	ldrh	r3, [r4, #0]
1000e6ec:	8824      	ldrh	r4, [r4, #0]
1000e6ee:	7103      	strb	r3, [r0, #4]
1000e6f0:	466b      	mov	r3, sp
1000e6f2:	791b      	ldrb	r3, [r3, #4]
1000e6f4:	0a24      	lsrs	r4, r4, #8
1000e6f6:	7303      	strb	r3, [r0, #12]
1000e6f8:	466b      	mov	r3, sp
1000e6fa:	7a1b      	ldrb	r3, [r3, #8]
1000e6fc:	7144      	strb	r4, [r0, #5]
1000e6fe:	73c3      	strb	r3, [r0, #15]
1000e700:	466b      	mov	r3, sp
1000e702:	7b1b      	ldrb	r3, [r3, #12]
1000e704:	2401      	movs	r4, #1
1000e706:	7403      	strb	r3, [r0, #16]
1000e708:	2309      	movs	r3, #9
1000e70a:	7183      	strb	r3, [r0, #6]
1000e70c:	2300      	movs	r3, #0
1000e70e:	7204      	strb	r4, [r0, #8]
1000e710:	7281      	strb	r1, [r0, #10]
1000e712:	72c2      	strb	r2, [r0, #11]
1000e714:	7346      	strb	r6, [r0, #13]
1000e716:	7385      	strb	r5, [r0, #14]
1000e718:	71c3      	strb	r3, [r0, #7]
1000e71a:	2111      	movs	r1, #17
1000e71c:	4b03      	ldr	r3, [pc, #12]	; (1000e72c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e71e:	4798      	blx	r3
1000e720:	b005      	add	sp, #20
1000e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e724:	10015c60 	.word	0x10015c60
1000e728:	100158f0 	.word	0x100158f0
1000e72c:	1000df75 	.word	0x1000df75

1000e730 <gapc_bond_cfm_handler_key_exch>:
1000e730:	b538      	push	{r3, r4, r5, lr}
1000e732:	2514      	movs	r5, #20
1000e734:	4c0d      	ldr	r4, [pc, #52]	; (1000e76c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e736:	70e3      	strb	r3, [r4, #3]
1000e738:	4b0d      	ldr	r3, [pc, #52]	; (1000e770 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e73a:	7025      	strb	r5, [r4, #0]
1000e73c:	3d06      	subs	r5, #6
1000e73e:	7065      	strb	r5, [r4, #1]
1000e740:	70a5      	strb	r5, [r4, #2]
1000e742:	881d      	ldrh	r5, [r3, #0]
1000e744:	881b      	ldrh	r3, [r3, #0]
1000e746:	7220      	strb	r0, [r4, #8]
1000e748:	0a1b      	lsrs	r3, r3, #8
1000e74a:	7163      	strb	r3, [r4, #5]
1000e74c:	7261      	strb	r1, [r4, #9]
1000e74e:	4b09      	ldr	r3, [pc, #36]	; (1000e774 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e750:	1c11      	adds	r1, r2, #0
1000e752:	4809      	ldr	r0, [pc, #36]	; (1000e778 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e754:	2210      	movs	r2, #16
1000e756:	7125      	strb	r5, [r4, #4]
1000e758:	4798      	blx	r3
1000e75a:	2312      	movs	r3, #18
1000e75c:	71a3      	strb	r3, [r4, #6]
1000e75e:	2300      	movs	r3, #0
1000e760:	1c20      	adds	r0, r4, #0
1000e762:	71e3      	strb	r3, [r4, #7]
1000e764:	211a      	movs	r1, #26
1000e766:	4b05      	ldr	r3, [pc, #20]	; (1000e77c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e768:	4798      	blx	r3
1000e76a:	bd38      	pop	{r3, r4, r5, pc}
1000e76c:	10015c60 	.word	0x10015c60
1000e770:	100158f0 	.word	0x100158f0
1000e774:	1001134f 	.word	0x1001134f
1000e778:	10015c6a 	.word	0x10015c6a
1000e77c:	1000df75 	.word	0x1000df75

1000e780 <gapc_security_cmd_handler>:
1000e780:	221a      	movs	r2, #26
1000e782:	b508      	push	{r3, lr}
1000e784:	4b0b      	ldr	r3, [pc, #44]	; (1000e7b4 <gapc_security_cmd_handler+0x34>)
1000e786:	701a      	strb	r2, [r3, #0]
1000e788:	3a0c      	subs	r2, #12
1000e78a:	705a      	strb	r2, [r3, #1]
1000e78c:	709a      	strb	r2, [r3, #2]
1000e78e:	4a0a      	ldr	r2, [pc, #40]	; (1000e7b8 <gapc_security_cmd_handler+0x38>)
1000e790:	70d8      	strb	r0, [r3, #3]
1000e792:	8810      	ldrh	r0, [r2, #0]
1000e794:	8812      	ldrh	r2, [r2, #0]
1000e796:	7118      	strb	r0, [r3, #4]
1000e798:	0a12      	lsrs	r2, r2, #8
1000e79a:	715a      	strb	r2, [r3, #5]
1000e79c:	220c      	movs	r2, #12
1000e79e:	721a      	strb	r2, [r3, #8]
1000e7a0:	3a0a      	subs	r2, #10
1000e7a2:	719a      	strb	r2, [r3, #6]
1000e7a4:	2200      	movs	r2, #0
1000e7a6:	7259      	strb	r1, [r3, #9]
1000e7a8:	71da      	strb	r2, [r3, #7]
1000e7aa:	1c18      	adds	r0, r3, #0
1000e7ac:	210a      	movs	r1, #10
1000e7ae:	4b03      	ldr	r3, [pc, #12]	; (1000e7bc <gapc_security_cmd_handler+0x3c>)
1000e7b0:	4798      	blx	r3
1000e7b2:	bd08      	pop	{r3, pc}
1000e7b4:	10015c60 	.word	0x10015c60
1000e7b8:	100158f0 	.word	0x100158f0
1000e7bc:	1000df75 	.word	0x1000df75

1000e7c0 <gapc_encrypt_cmd_handler>:
1000e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e7c2:	2500      	movs	r5, #0
1000e7c4:	b089      	sub	sp, #36	; 0x24
1000e7c6:	9306      	str	r3, [sp, #24]
1000e7c8:	ab0e      	add	r3, sp, #56	; 0x38
1000e7ca:	781b      	ldrb	r3, [r3, #0]
1000e7cc:	1c17      	adds	r7, r2, #0
1000e7ce:	9307      	str	r3, [sp, #28]
1000e7d0:	ab0f      	add	r3, sp, #60	; 0x3c
1000e7d2:	781b      	ldrb	r3, [r3, #0]
1000e7d4:	4a19      	ldr	r2, [pc, #100]	; (1000e83c <gapc_encrypt_cmd_handler+0x7c>)
1000e7d6:	1c06      	adds	r6, r0, #0
1000e7d8:	9105      	str	r1, [sp, #20]
1000e7da:	9300      	str	r3, [sp, #0]
1000e7dc:	9002      	str	r0, [sp, #8]
1000e7de:	1c29      	adds	r1, r5, #0
1000e7e0:	1c2b      	adds	r3, r5, #0
1000e7e2:	9501      	str	r5, [sp, #4]
1000e7e4:	1c10      	adds	r0, r2, #0
1000e7e6:	4c16      	ldr	r4, [pc, #88]	; (1000e840 <gapc_encrypt_cmd_handler+0x80>)
1000e7e8:	47a0      	blx	r4
1000e7ea:	2316      	movs	r3, #22
1000e7ec:	4c15      	ldr	r4, [pc, #84]	; (1000e844 <gapc_encrypt_cmd_handler+0x84>)
1000e7ee:	9905      	ldr	r1, [sp, #20]
1000e7f0:	7023      	strb	r3, [r4, #0]
1000e7f2:	3b08      	subs	r3, #8
1000e7f4:	7063      	strb	r3, [r4, #1]
1000e7f6:	70a3      	strb	r3, [r4, #2]
1000e7f8:	4b13      	ldr	r3, [pc, #76]	; (1000e848 <gapc_encrypt_cmd_handler+0x88>)
1000e7fa:	70e6      	strb	r6, [r4, #3]
1000e7fc:	881a      	ldrh	r2, [r3, #0]
1000e7fe:	881b      	ldrh	r3, [r3, #0]
1000e800:	7122      	strb	r2, [r4, #4]
1000e802:	0a1b      	lsrs	r3, r3, #8
1000e804:	7163      	strb	r3, [r4, #5]
1000e806:	230b      	movs	r3, #11
1000e808:	4e10      	ldr	r6, [pc, #64]	; (1000e84c <gapc_encrypt_cmd_handler+0x8c>)
1000e80a:	2210      	movs	r2, #16
1000e80c:	4810      	ldr	r0, [pc, #64]	; (1000e850 <gapc_encrypt_cmd_handler+0x90>)
1000e80e:	7223      	strb	r3, [r4, #8]
1000e810:	7265      	strb	r5, [r4, #9]
1000e812:	47b0      	blx	r6
1000e814:	0a3b      	lsrs	r3, r7, #8
1000e816:	9906      	ldr	r1, [sp, #24]
1000e818:	2208      	movs	r2, #8
1000e81a:	480e      	ldr	r0, [pc, #56]	; (1000e854 <gapc_encrypt_cmd_handler+0x94>)
1000e81c:	76e3      	strb	r3, [r4, #27]
1000e81e:	76a7      	strb	r7, [r4, #26]
1000e820:	47b0      	blx	r6
1000e822:	466a      	mov	r2, sp
1000e824:	7f12      	ldrb	r2, [r2, #28]
1000e826:	1d63      	adds	r3, r4, #5
1000e828:	77da      	strb	r2, [r3, #31]
1000e82a:	231d      	movs	r3, #29
1000e82c:	1c20      	adds	r0, r4, #0
1000e82e:	71a3      	strb	r3, [r4, #6]
1000e830:	2125      	movs	r1, #37	; 0x25
1000e832:	4b09      	ldr	r3, [pc, #36]	; (1000e858 <gapc_encrypt_cmd_handler+0x98>)
1000e834:	71e5      	strb	r5, [r4, #7]
1000e836:	4798      	blx	r3
1000e838:	b009      	add	sp, #36	; 0x24
1000e83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e83c:	10014be0 	.word	0x10014be0
1000e840:	1000e279 	.word	0x1000e279
1000e844:	10015c60 	.word	0x10015c60
1000e848:	100158f0 	.word	0x100158f0
1000e84c:	1001134f 	.word	0x1001134f
1000e850:	10015c6a 	.word	0x10015c6a
1000e854:	10015c7c 	.word	0x10015c7c
1000e858:	1000df75 	.word	0x1000df75

1000e85c <gapc_encrypt_req_ind>:
1000e85c:	b508      	push	{r3, lr}
1000e85e:	0a00      	lsrs	r0, r0, #8
1000e860:	8010      	strh	r0, [r2, #0]
1000e862:	784b      	ldrb	r3, [r1, #1]
1000e864:	7808      	ldrb	r0, [r1, #0]
1000e866:	021b      	lsls	r3, r3, #8
1000e868:	4303      	orrs	r3, r0
1000e86a:	8053      	strh	r3, [r2, #2]
1000e86c:	1d10      	adds	r0, r2, #4
1000e86e:	3102      	adds	r1, #2
1000e870:	2208      	movs	r2, #8
1000e872:	4b01      	ldr	r3, [pc, #4]	; (1000e878 <gapc_encrypt_req_ind+0x1c>)
1000e874:	4798      	blx	r3
1000e876:	bd08      	pop	{r3, pc}
1000e878:	1001134f 	.word	0x1001134f

1000e87c <gapc_encrypt_cfm_handler>:
1000e87c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e87e:	2500      	movs	r5, #0
1000e880:	b087      	sub	sp, #28
1000e882:	9304      	str	r3, [sp, #16]
1000e884:	ab0c      	add	r3, sp, #48	; 0x30
1000e886:	781b      	ldrb	r3, [r3, #0]
1000e888:	1c17      	adds	r7, r2, #0
1000e88a:	4a15      	ldr	r2, [pc, #84]	; (1000e8e0 <gapc_encrypt_cfm_handler+0x64>)
1000e88c:	1c06      	adds	r6, r0, #0
1000e88e:	9305      	str	r3, [sp, #20]
1000e890:	9100      	str	r1, [sp, #0]
1000e892:	9002      	str	r0, [sp, #8]
1000e894:	1c29      	adds	r1, r5, #0
1000e896:	1c2b      	adds	r3, r5, #0
1000e898:	9501      	str	r5, [sp, #4]
1000e89a:	1c10      	adds	r0, r2, #0
1000e89c:	4c11      	ldr	r4, [pc, #68]	; (1000e8e4 <gapc_encrypt_cfm_handler+0x68>)
1000e89e:	47a0      	blx	r4
1000e8a0:	2318      	movs	r3, #24
1000e8a2:	4c11      	ldr	r4, [pc, #68]	; (1000e8e8 <gapc_encrypt_cfm_handler+0x6c>)
1000e8a4:	9904      	ldr	r1, [sp, #16]
1000e8a6:	7023      	strb	r3, [r4, #0]
1000e8a8:	3b0a      	subs	r3, #10
1000e8aa:	7063      	strb	r3, [r4, #1]
1000e8ac:	70a3      	strb	r3, [r4, #2]
1000e8ae:	4b0f      	ldr	r3, [pc, #60]	; (1000e8ec <gapc_encrypt_cfm_handler+0x70>)
1000e8b0:	480f      	ldr	r0, [pc, #60]	; (1000e8f0 <gapc_encrypt_cfm_handler+0x74>)
1000e8b2:	881a      	ldrh	r2, [r3, #0]
1000e8b4:	881b      	ldrh	r3, [r3, #0]
1000e8b6:	7122      	strb	r2, [r4, #4]
1000e8b8:	0a1b      	lsrs	r3, r3, #8
1000e8ba:	7163      	strb	r3, [r4, #5]
1000e8bc:	2210      	movs	r2, #16
1000e8be:	4b0d      	ldr	r3, [pc, #52]	; (1000e8f4 <gapc_encrypt_cfm_handler+0x78>)
1000e8c0:	70e6      	strb	r6, [r4, #3]
1000e8c2:	7227      	strb	r7, [r4, #8]
1000e8c4:	4798      	blx	r3
1000e8c6:	466b      	mov	r3, sp
1000e8c8:	7d1b      	ldrb	r3, [r3, #20]
1000e8ca:	1c20      	adds	r0, r4, #0
1000e8cc:	7663      	strb	r3, [r4, #25]
1000e8ce:	2312      	movs	r3, #18
1000e8d0:	211a      	movs	r1, #26
1000e8d2:	71a3      	strb	r3, [r4, #6]
1000e8d4:	4b08      	ldr	r3, [pc, #32]	; (1000e8f8 <gapc_encrypt_cfm_handler+0x7c>)
1000e8d6:	71e5      	strb	r5, [r4, #7]
1000e8d8:	4798      	blx	r3
1000e8da:	b007      	add	sp, #28
1000e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e8de:	46c0      	nop			; (mov r8, r8)
1000e8e0:	10014bf0 	.word	0x10014bf0
1000e8e4:	1000e279 	.word	0x1000e279
1000e8e8:	10015c60 	.word	0x10015c60
1000e8ec:	100158f0 	.word	0x100158f0
1000e8f0:	10015c69 	.word	0x10015c69
1000e8f4:	1001134f 	.word	0x1001134f
1000e8f8:	1000df75 	.word	0x1000df75

1000e8fc <gapc_encrypt_ind>:
1000e8fc:	780b      	ldrb	r3, [r1, #0]
1000e8fe:	0a00      	lsrs	r0, r0, #8
1000e900:	70d3      	strb	r3, [r2, #3]
1000e902:	2300      	movs	r3, #0
1000e904:	8010      	strh	r0, [r2, #0]
1000e906:	7093      	strb	r3, [r2, #2]
1000e908:	4770      	bx	lr
	...

1000e90c <gapc_param_update_cfm_handler>:
1000e90c:	b538      	push	{r3, r4, r5, lr}
1000e90e:	2410      	movs	r4, #16
1000e910:	1c05      	adds	r5, r0, #0
1000e912:	480e      	ldr	r0, [pc, #56]	; (1000e94c <gapc_param_update_cfm_handler+0x40>)
1000e914:	7004      	strb	r4, [r0, #0]
1000e916:	3c02      	subs	r4, #2
1000e918:	7044      	strb	r4, [r0, #1]
1000e91a:	7084      	strb	r4, [r0, #2]
1000e91c:	4c0c      	ldr	r4, [pc, #48]	; (1000e950 <gapc_param_update_cfm_handler+0x44>)
1000e91e:	70c5      	strb	r5, [r0, #3]
1000e920:	8825      	ldrh	r5, [r4, #0]
1000e922:	8824      	ldrh	r4, [r4, #0]
1000e924:	72c3      	strb	r3, [r0, #11]
1000e926:	0a1b      	lsrs	r3, r3, #8
1000e928:	0a24      	lsrs	r4, r4, #8
1000e92a:	7303      	strb	r3, [r0, #12]
1000e92c:	2305      	movs	r3, #5
1000e92e:	7144      	strb	r4, [r0, #5]
1000e930:	2400      	movs	r4, #0
1000e932:	7201      	strb	r1, [r0, #8]
1000e934:	7242      	strb	r2, [r0, #9]
1000e936:	7183      	strb	r3, [r0, #6]
1000e938:	0a12      	lsrs	r2, r2, #8
1000e93a:	210d      	movs	r1, #13
1000e93c:	4b05      	ldr	r3, [pc, #20]	; (1000e954 <gapc_param_update_cfm_handler+0x48>)
1000e93e:	7105      	strb	r5, [r0, #4]
1000e940:	7282      	strb	r2, [r0, #10]
1000e942:	71c4      	strb	r4, [r0, #7]
1000e944:	4798      	blx	r3
1000e946:	1c20      	adds	r0, r4, #0
1000e948:	bd38      	pop	{r3, r4, r5, pc}
1000e94a:	46c0      	nop			; (mov r8, r8)
1000e94c:	10015c60 	.word	0x10015c60
1000e950:	100158f0 	.word	0x100158f0
1000e954:	1000df75 	.word	0x1000df75

1000e958 <gapc_param_updated_ind>:
1000e958:	2300      	movs	r3, #0
1000e95a:	0a00      	lsrs	r0, r0, #8
1000e95c:	8010      	strh	r0, [r2, #0]
1000e95e:	7093      	strb	r3, [r2, #2]
1000e960:	784b      	ldrb	r3, [r1, #1]
1000e962:	7808      	ldrb	r0, [r1, #0]
1000e964:	021b      	lsls	r3, r3, #8
1000e966:	4303      	orrs	r3, r0
1000e968:	8093      	strh	r3, [r2, #4]
1000e96a:	78cb      	ldrb	r3, [r1, #3]
1000e96c:	7888      	ldrb	r0, [r1, #2]
1000e96e:	021b      	lsls	r3, r3, #8
1000e970:	4303      	orrs	r3, r0
1000e972:	80d3      	strh	r3, [r2, #6]
1000e974:	794b      	ldrb	r3, [r1, #5]
1000e976:	7909      	ldrb	r1, [r1, #4]
1000e978:	021b      	lsls	r3, r3, #8
1000e97a:	430b      	orrs	r3, r1
1000e97c:	2007      	movs	r0, #7
1000e97e:	8113      	strh	r3, [r2, #8]
1000e980:	4770      	bx	lr

1000e982 <gapc_param_updated_req_ind>:
1000e982:	0a00      	lsrs	r0, r0, #8
1000e984:	8010      	strh	r0, [r2, #0]
1000e986:	784b      	ldrb	r3, [r1, #1]
1000e988:	7808      	ldrb	r0, [r1, #0]
1000e98a:	021b      	lsls	r3, r3, #8
1000e98c:	4303      	orrs	r3, r0
1000e98e:	8053      	strh	r3, [r2, #2]
1000e990:	78cb      	ldrb	r3, [r1, #3]
1000e992:	7888      	ldrb	r0, [r1, #2]
1000e994:	021b      	lsls	r3, r3, #8
1000e996:	4303      	orrs	r3, r0
1000e998:	8093      	strh	r3, [r2, #4]
1000e99a:	794b      	ldrb	r3, [r1, #5]
1000e99c:	7908      	ldrb	r0, [r1, #4]
1000e99e:	021b      	lsls	r3, r3, #8
1000e9a0:	4303      	orrs	r3, r0
1000e9a2:	80d3      	strh	r3, [r2, #6]
1000e9a4:	79cb      	ldrb	r3, [r1, #7]
1000e9a6:	7989      	ldrb	r1, [r1, #6]
1000e9a8:	021b      	lsls	r3, r3, #8
1000e9aa:	430b      	orrs	r3, r1
1000e9ac:	2008      	movs	r0, #8
1000e9ae:	8113      	strh	r3, [r2, #8]
1000e9b0:	4770      	bx	lr
	...

1000e9b4 <gapc_dev_info_req_ind_handler>:
1000e9b4:	b508      	push	{r3, lr}
1000e9b6:	1c0b      	adds	r3, r1, #0
1000e9b8:	0a01      	lsrs	r1, r0, #8
1000e9ba:	8011      	strh	r1, [r2, #0]
1000e9bc:	7818      	ldrb	r0, [r3, #0]
1000e9be:	7090      	strb	r0, [r2, #2]
1000e9c0:	2800      	cmp	r0, #0
1000e9c2:	d104      	bne.n	1000e9ce <gapc_dev_info_req_ind_handler+0x1a>
1000e9c4:	4b03      	ldr	r3, [pc, #12]	; (1000e9d4 <gapc_dev_info_req_ind_handler+0x20>)
1000e9c6:	33aa      	adds	r3, #170	; 0xaa
1000e9c8:	881b      	ldrh	r3, [r3, #0]
1000e9ca:	2b00      	cmp	r3, #0
1000e9cc:	d001      	beq.n	1000e9d2 <gapc_dev_info_req_ind_handler+0x1e>
1000e9ce:	4b02      	ldr	r3, [pc, #8]	; (1000e9d8 <gapc_dev_info_req_ind_handler+0x24>)
1000e9d0:	4798      	blx	r3
1000e9d2:	bd08      	pop	{r3, pc}
1000e9d4:	10015982 	.word	0x10015982
1000e9d8:	1000e085 	.word	0x1000e085

1000e9dc <gapc_sec_req_ind>:
1000e9dc:	0a00      	lsrs	r0, r0, #8
1000e9de:	8010      	strh	r0, [r2, #0]
1000e9e0:	7809      	ldrb	r1, [r1, #0]
1000e9e2:	2301      	movs	r3, #1
1000e9e4:	1c08      	adds	r0, r1, #0
1000e9e6:	0889      	lsrs	r1, r1, #2
1000e9e8:	4018      	ands	r0, r3
1000e9ea:	400b      	ands	r3, r1
1000e9ec:	70d0      	strb	r0, [r2, #3]
1000e9ee:	7113      	strb	r3, [r2, #4]
1000e9f0:	4770      	bx	lr

1000e9f2 <gapc_sign_counter_ind_handler>:
1000e9f2:	0a00      	lsrs	r0, r0, #8
1000e9f4:	8010      	strh	r0, [r2, #0]
1000e9f6:	784b      	ldrb	r3, [r1, #1]
1000e9f8:	0218      	lsls	r0, r3, #8
1000e9fa:	788b      	ldrb	r3, [r1, #2]
1000e9fc:	041b      	lsls	r3, r3, #16
1000e9fe:	4303      	orrs	r3, r0
1000ea00:	7808      	ldrb	r0, [r1, #0]
1000ea02:	4303      	orrs	r3, r0
1000ea04:	78c8      	ldrb	r0, [r1, #3]
1000ea06:	0600      	lsls	r0, r0, #24
1000ea08:	4303      	orrs	r3, r0
1000ea0a:	6053      	str	r3, [r2, #4]
1000ea0c:	794b      	ldrb	r3, [r1, #5]
1000ea0e:	0218      	lsls	r0, r3, #8
1000ea10:	798b      	ldrb	r3, [r1, #6]
1000ea12:	041b      	lsls	r3, r3, #16
1000ea14:	4303      	orrs	r3, r0
1000ea16:	7908      	ldrb	r0, [r1, #4]
1000ea18:	79c9      	ldrb	r1, [r1, #7]
1000ea1a:	4303      	orrs	r3, r0
1000ea1c:	0609      	lsls	r1, r1, #24
1000ea1e:	430b      	orrs	r3, r1
1000ea20:	2000      	movs	r0, #0
1000ea22:	6093      	str	r3, [r2, #8]
1000ea24:	4770      	bx	lr
	...

1000ea28 <gapc_peer_att_info_ind_handler>:
1000ea28:	b510      	push	{r4, lr}
1000ea2a:	0a00      	lsrs	r0, r0, #8
1000ea2c:	8010      	strh	r0, [r2, #0]
1000ea2e:	7808      	ldrb	r0, [r1, #0]
1000ea30:	7090      	strb	r0, [r2, #2]
1000ea32:	788b      	ldrb	r3, [r1, #2]
1000ea34:	784c      	ldrb	r4, [r1, #1]
1000ea36:	021b      	lsls	r3, r3, #8
1000ea38:	4323      	orrs	r3, r4
1000ea3a:	8093      	strh	r3, [r2, #4]
1000ea3c:	2801      	cmp	r0, #1
1000ea3e:	d027      	beq.n	1000ea90 <gapc_peer_att_info_ind_handler+0x68>
1000ea40:	2800      	cmp	r0, #0
1000ea42:	d017      	beq.n	1000ea74 <gapc_peer_att_info_ind_handler+0x4c>
1000ea44:	2802      	cmp	r0, #2
1000ea46:	d12a      	bne.n	1000ea9e <gapc_peer_att_info_ind_handler+0x76>
1000ea48:	790b      	ldrb	r3, [r1, #4]
1000ea4a:	78c8      	ldrb	r0, [r1, #3]
1000ea4c:	021b      	lsls	r3, r3, #8
1000ea4e:	4303      	orrs	r3, r0
1000ea50:	8113      	strh	r3, [r2, #8]
1000ea52:	798b      	ldrb	r3, [r1, #6]
1000ea54:	7948      	ldrb	r0, [r1, #5]
1000ea56:	021b      	lsls	r3, r3, #8
1000ea58:	4303      	orrs	r3, r0
1000ea5a:	80d3      	strh	r3, [r2, #6]
1000ea5c:	7a0b      	ldrb	r3, [r1, #8]
1000ea5e:	79c8      	ldrb	r0, [r1, #7]
1000ea60:	021b      	lsls	r3, r3, #8
1000ea62:	4303      	orrs	r3, r0
1000ea64:	8193      	strh	r3, [r2, #12]
1000ea66:	7a8b      	ldrb	r3, [r1, #10]
1000ea68:	7a49      	ldrb	r1, [r1, #9]
1000ea6a:	021b      	lsls	r3, r3, #8
1000ea6c:	430b      	orrs	r3, r1
1000ea6e:	8153      	strh	r3, [r2, #10]
1000ea70:	2306      	movs	r3, #6
1000ea72:	e013      	b.n	1000ea9c <gapc_peer_att_info_ind_handler+0x74>
1000ea74:	1c14      	adds	r4, r2, #0
1000ea76:	1c20      	adds	r0, r4, #0
1000ea78:	790a      	ldrb	r2, [r1, #4]
1000ea7a:	78cb      	ldrb	r3, [r1, #3]
1000ea7c:	0212      	lsls	r2, r2, #8
1000ea7e:	431a      	orrs	r2, r3
1000ea80:	80e2      	strh	r2, [r4, #6]
1000ea82:	4b07      	ldr	r3, [pc, #28]	; (1000eaa0 <gapc_peer_att_info_ind_handler+0x78>)
1000ea84:	3008      	adds	r0, #8
1000ea86:	3105      	adds	r1, #5
1000ea88:	4798      	blx	r3
1000ea8a:	2302      	movs	r3, #2
1000ea8c:	70a3      	strb	r3, [r4, #2]
1000ea8e:	e006      	b.n	1000ea9e <gapc_peer_att_info_ind_handler+0x76>
1000ea90:	790b      	ldrb	r3, [r1, #4]
1000ea92:	78c9      	ldrb	r1, [r1, #3]
1000ea94:	021b      	lsls	r3, r3, #8
1000ea96:	430b      	orrs	r3, r1
1000ea98:	80d3      	strh	r3, [r2, #6]
1000ea9a:	2305      	movs	r3, #5
1000ea9c:	7093      	strb	r3, [r2, #2]
1000ea9e:	bd10      	pop	{r4, pc}
1000eaa0:	1001134f 	.word	0x1001134f

1000eaa4 <gapc_con_channel_map_ind_handler>:
1000eaa4:	b508      	push	{r3, lr}
1000eaa6:	2300      	movs	r3, #0
1000eaa8:	0a00      	lsrs	r0, r0, #8
1000eaaa:	7013      	strb	r3, [r2, #0]
1000eaac:	8050      	strh	r0, [r2, #2]
1000eaae:	4b02      	ldr	r3, [pc, #8]	; (1000eab8 <gapc_con_channel_map_ind_handler+0x14>)
1000eab0:	1d10      	adds	r0, r2, #4
1000eab2:	2205      	movs	r2, #5
1000eab4:	4798      	blx	r3
1000eab6:	bd08      	pop	{r3, pc}
1000eab8:	1001134f 	.word	0x1001134f

1000eabc <gapc_lecb_connected>:
1000eabc:	7843      	ldrb	r3, [r0, #1]
1000eabe:	7802      	ldrb	r2, [r0, #0]
1000eac0:	021b      	lsls	r3, r3, #8
1000eac2:	4313      	orrs	r3, r2
1000eac4:	800b      	strh	r3, [r1, #0]
1000eac6:	78c3      	ldrb	r3, [r0, #3]
1000eac8:	7882      	ldrb	r2, [r0, #2]
1000eaca:	021b      	lsls	r3, r3, #8
1000eacc:	4313      	orrs	r3, r2
1000eace:	804b      	strh	r3, [r1, #2]
1000ead0:	7943      	ldrb	r3, [r0, #5]
1000ead2:	7902      	ldrb	r2, [r0, #4]
1000ead4:	021b      	lsls	r3, r3, #8
1000ead6:	4313      	orrs	r3, r2
1000ead8:	808b      	strh	r3, [r1, #4]
1000eada:	79c3      	ldrb	r3, [r0, #7]
1000eadc:	7982      	ldrb	r2, [r0, #6]
1000eade:	021b      	lsls	r3, r3, #8
1000eae0:	4313      	orrs	r3, r2
1000eae2:	80cb      	strh	r3, [r1, #6]
1000eae4:	2300      	movs	r3, #0
1000eae6:	720b      	strb	r3, [r1, #8]
1000eae8:	4770      	bx	lr

1000eaea <gapc_lecb_disconnected>:
1000eaea:	7843      	ldrb	r3, [r0, #1]
1000eaec:	7802      	ldrb	r2, [r0, #0]
1000eaee:	021b      	lsls	r3, r3, #8
1000eaf0:	4313      	orrs	r3, r2
1000eaf2:	800b      	strh	r3, [r1, #0]
1000eaf4:	78c3      	ldrb	r3, [r0, #3]
1000eaf6:	7882      	ldrb	r2, [r0, #2]
1000eaf8:	021b      	lsls	r3, r3, #8
1000eafa:	4313      	orrs	r3, r2
1000eafc:	804b      	strh	r3, [r1, #2]
1000eafe:	4770      	bx	lr

1000eb00 <gapc_lecb_connect_req_ind>:
1000eb00:	7843      	ldrb	r3, [r0, #1]
1000eb02:	7802      	ldrb	r2, [r0, #0]
1000eb04:	021b      	lsls	r3, r3, #8
1000eb06:	4313      	orrs	r3, r2
1000eb08:	800b      	strh	r3, [r1, #0]
1000eb0a:	78c3      	ldrb	r3, [r0, #3]
1000eb0c:	7882      	ldrb	r2, [r0, #2]
1000eb0e:	021b      	lsls	r3, r3, #8
1000eb10:	4313      	orrs	r3, r2
1000eb12:	804b      	strh	r3, [r1, #2]
1000eb14:	7943      	ldrb	r3, [r0, #5]
1000eb16:	7902      	ldrb	r2, [r0, #4]
1000eb18:	021b      	lsls	r3, r3, #8
1000eb1a:	4313      	orrs	r3, r2
1000eb1c:	808b      	strh	r3, [r1, #4]
1000eb1e:	79c3      	ldrb	r3, [r0, #7]
1000eb20:	7982      	ldrb	r2, [r0, #6]
1000eb22:	021b      	lsls	r3, r3, #8
1000eb24:	4313      	orrs	r3, r2
1000eb26:	80cb      	strh	r3, [r1, #6]
1000eb28:	4770      	bx	lr

1000eb2a <gapc_lecb_add_credit_resp_handler>:
1000eb2a:	7843      	ldrb	r3, [r0, #1]
1000eb2c:	7802      	ldrb	r2, [r0, #0]
1000eb2e:	021b      	lsls	r3, r3, #8
1000eb30:	4313      	orrs	r3, r2
1000eb32:	800b      	strh	r3, [r1, #0]
1000eb34:	78c3      	ldrb	r3, [r0, #3]
1000eb36:	7882      	ldrb	r2, [r0, #2]
1000eb38:	021b      	lsls	r3, r3, #8
1000eb3a:	4313      	orrs	r3, r2
1000eb3c:	804b      	strh	r3, [r1, #2]
1000eb3e:	7943      	ldrb	r3, [r0, #5]
1000eb40:	7902      	ldrb	r2, [r0, #4]
1000eb42:	021b      	lsls	r3, r3, #8
1000eb44:	4313      	orrs	r3, r2
1000eb46:	808b      	strh	r3, [r1, #4]
1000eb48:	4770      	bx	lr
	...

1000eb4c <gapm_reset_req_handler>:
1000eb4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000eb4e:	466b      	mov	r3, sp
1000eb50:	4915      	ldr	r1, [pc, #84]	; (1000eba8 <gapm_reset_req_handler+0x5c>)
1000eb52:	4816      	ldr	r0, [pc, #88]	; (1000ebac <gapm_reset_req_handler+0x60>)
1000eb54:	880c      	ldrh	r4, [r1, #0]
1000eb56:	8809      	ldrh	r1, [r1, #0]
1000eb58:	1ddd      	adds	r5, r3, #7
1000eb5a:	0a09      	lsrs	r1, r1, #8
1000eb5c:	2300      	movs	r3, #0
1000eb5e:	2202      	movs	r2, #2
1000eb60:	7141      	strb	r1, [r0, #5]
1000eb62:	26d0      	movs	r6, #208	; 0xd0
1000eb64:	2101      	movs	r1, #1
1000eb66:	7104      	strb	r4, [r0, #4]
1000eb68:	4c11      	ldr	r4, [pc, #68]	; (1000ebb0 <gapm_reset_req_handler+0x64>)
1000eb6a:	702b      	strb	r3, [r5, #0]
1000eb6c:	7002      	strb	r2, [r0, #0]
1000eb6e:	70c3      	strb	r3, [r0, #3]
1000eb70:	320b      	adds	r2, #11
1000eb72:	7201      	strb	r1, [r0, #8]
1000eb74:	7181      	strb	r1, [r0, #6]
1000eb76:	71c3      	strb	r3, [r0, #7]
1000eb78:	3108      	adds	r1, #8
1000eb7a:	4b0e      	ldr	r3, [pc, #56]	; (1000ebb4 <gapm_reset_req_handler+0x68>)
1000eb7c:	0136      	lsls	r6, r6, #4
1000eb7e:	7042      	strb	r2, [r0, #1]
1000eb80:	7082      	strb	r2, [r0, #2]
1000eb82:	80a2      	strh	r2, [r4, #4]
1000eb84:	8026      	strh	r6, [r4, #0]
1000eb86:	4798      	blx	r3
1000eb88:	1c28      	adds	r0, r5, #0
1000eb8a:	4b0b      	ldr	r3, [pc, #44]	; (1000ebb8 <gapm_reset_req_handler+0x6c>)
1000eb8c:	4798      	blx	r3
1000eb8e:	782b      	ldrb	r3, [r5, #0]
1000eb90:	20e2      	movs	r0, #226	; 0xe2
1000eb92:	2b00      	cmp	r3, #0
1000eb94:	d106      	bne.n	1000eba4 <gapm_reset_req_handler+0x58>
1000eb96:	68a3      	ldr	r3, [r4, #8]
1000eb98:	20e2      	movs	r0, #226	; 0xe2
1000eb9a:	781a      	ldrb	r2, [r3, #0]
1000eb9c:	785b      	ldrb	r3, [r3, #1]
1000eb9e:	2a01      	cmp	r2, #1
1000eba0:	d100      	bne.n	1000eba4 <gapm_reset_req_handler+0x58>
1000eba2:	1c18      	adds	r0, r3, #0
1000eba4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000eba6:	46c0      	nop			; (mov r8, r8)
1000eba8:	100158f0 	.word	0x100158f0
1000ebac:	10015c60 	.word	0x10015c60
1000ebb0:	100158e4 	.word	0x100158e4
1000ebb4:	1000df75 	.word	0x1000df75
1000ebb8:	1000dfd9 	.word	0x1000dfd9

1000ebbc <gapm_set_dev_config_cmd_handler>:
1000ebbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebbe:	b089      	sub	sp, #36	; 0x24
1000ebc0:	9303      	str	r3, [sp, #12]
1000ebc2:	ab0e      	add	r3, sp, #56	; 0x38
1000ebc4:	781b      	ldrb	r3, [r3, #0]
1000ebc6:	4c37      	ldr	r4, [pc, #220]	; (1000eca4 <gapm_set_dev_config_cmd_handler+0xe8>)
1000ebc8:	9304      	str	r3, [sp, #16]
1000ebca:	ab0f      	add	r3, sp, #60	; 0x3c
1000ebcc:	781b      	ldrb	r3, [r3, #0]
1000ebce:	270d      	movs	r7, #13
1000ebd0:	9305      	str	r3, [sp, #20]
1000ebd2:	ab10      	add	r3, sp, #64	; 0x40
1000ebd4:	881b      	ldrh	r3, [r3, #0]
1000ebd6:	72a1      	strb	r1, [r4, #10]
1000ebd8:	9300      	str	r3, [sp, #0]
1000ebda:	ab11      	add	r3, sp, #68	; 0x44
1000ebdc:	881b      	ldrh	r3, [r3, #0]
1000ebde:	0a09      	lsrs	r1, r1, #8
1000ebe0:	9301      	str	r3, [sp, #4]
1000ebe2:	ab12      	add	r3, sp, #72	; 0x48
1000ebe4:	881b      	ldrh	r3, [r3, #0]
1000ebe6:	7260      	strb	r0, [r4, #9]
1000ebe8:	9302      	str	r3, [sp, #8]
1000ebea:	ab06      	add	r3, sp, #24
1000ebec:	1dde      	adds	r6, r3, #7
1000ebee:	2300      	movs	r3, #0
1000ebf0:	7033      	strb	r3, [r6, #0]
1000ebf2:	2304      	movs	r3, #4
1000ebf4:	7023      	strb	r3, [r4, #0]
1000ebf6:	2300      	movs	r3, #0
1000ebf8:	70e3      	strb	r3, [r4, #3]
1000ebfa:	4b2b      	ldr	r3, [pc, #172]	; (1000eca8 <gapm_set_dev_config_cmd_handler+0xec>)
1000ebfc:	72e1      	strb	r1, [r4, #11]
1000ebfe:	881d      	ldrh	r5, [r3, #0]
1000ec00:	881b      	ldrh	r3, [r3, #0]
1000ec02:	1c11      	adds	r1, r2, #0
1000ec04:	0a1b      	lsrs	r3, r3, #8
1000ec06:	7163      	strb	r3, [r4, #5]
1000ec08:	2303      	movs	r3, #3
1000ec0a:	7125      	strb	r5, [r4, #4]
1000ec0c:	2206      	movs	r2, #6
1000ec0e:	4d27      	ldr	r5, [pc, #156]	; (1000ecac <gapm_set_dev_config_cmd_handler+0xf0>)
1000ec10:	4827      	ldr	r0, [pc, #156]	; (1000ecb0 <gapm_set_dev_config_cmd_handler+0xf4>)
1000ec12:	7223      	strb	r3, [r4, #8]
1000ec14:	7067      	strb	r7, [r4, #1]
1000ec16:	70a7      	strb	r7, [r4, #2]
1000ec18:	47a8      	blx	r5
1000ec1a:	9903      	ldr	r1, [sp, #12]
1000ec1c:	2210      	movs	r2, #16
1000ec1e:	4825      	ldr	r0, [pc, #148]	; (1000ecb4 <gapm_set_dev_config_cmd_handler+0xf8>)
1000ec20:	47a8      	blx	r5
1000ec22:	466a      	mov	r2, sp
1000ec24:	7c12      	ldrb	r2, [r2, #16]
1000ec26:	1ce3      	adds	r3, r4, #3
1000ec28:	77da      	strb	r2, [r3, #31]
1000ec2a:	466a      	mov	r2, sp
1000ec2c:	7d12      	ldrb	r2, [r2, #20]
1000ec2e:	1d23      	adds	r3, r4, #4
1000ec30:	77da      	strb	r2, [r3, #31]
1000ec32:	466a      	mov	r2, sp
1000ec34:	7812      	ldrb	r2, [r2, #0]
1000ec36:	1d63      	adds	r3, r4, #5
1000ec38:	77da      	strb	r2, [r3, #31]
1000ec3a:	9b00      	ldr	r3, [sp, #0]
1000ec3c:	1da2      	adds	r2, r4, #6
1000ec3e:	0a1b      	lsrs	r3, r3, #8
1000ec40:	77d3      	strb	r3, [r2, #31]
1000ec42:	466a      	mov	r2, sp
1000ec44:	7912      	ldrb	r2, [r2, #4]
1000ec46:	1de3      	adds	r3, r4, #7
1000ec48:	77da      	strb	r2, [r3, #31]
1000ec4a:	1c22      	adds	r2, r4, #0
1000ec4c:	9b01      	ldr	r3, [sp, #4]
1000ec4e:	3208      	adds	r2, #8
1000ec50:	0a1b      	lsrs	r3, r3, #8
1000ec52:	77d3      	strb	r3, [r2, #31]
1000ec54:	466a      	mov	r2, sp
1000ec56:	1c23      	adds	r3, r4, #0
1000ec58:	7a12      	ldrb	r2, [r2, #8]
1000ec5a:	3328      	adds	r3, #40	; 0x28
1000ec5c:	701a      	strb	r2, [r3, #0]
1000ec5e:	1c22      	adds	r2, r4, #0
1000ec60:	9b02      	ldr	r3, [sp, #8]
1000ec62:	3229      	adds	r2, #41	; 0x29
1000ec64:	0a1b      	lsrs	r3, r3, #8
1000ec66:	7013      	strb	r3, [r2, #0]
1000ec68:	23d0      	movs	r3, #208	; 0xd0
1000ec6a:	4d13      	ldr	r5, [pc, #76]	; (1000ecb8 <gapm_set_dev_config_cmd_handler+0xfc>)
1000ec6c:	011b      	lsls	r3, r3, #4
1000ec6e:	802b      	strh	r3, [r5, #0]
1000ec70:	2322      	movs	r3, #34	; 0x22
1000ec72:	71a3      	strb	r3, [r4, #6]
1000ec74:	2300      	movs	r3, #0
1000ec76:	212a      	movs	r1, #42	; 0x2a
1000ec78:	71e3      	strb	r3, [r4, #7]
1000ec7a:	1c20      	adds	r0, r4, #0
1000ec7c:	4b0f      	ldr	r3, [pc, #60]	; (1000ecbc <gapm_set_dev_config_cmd_handler+0x100>)
1000ec7e:	80af      	strh	r7, [r5, #4]
1000ec80:	4798      	blx	r3
1000ec82:	1c30      	adds	r0, r6, #0
1000ec84:	4b0e      	ldr	r3, [pc, #56]	; (1000ecc0 <gapm_set_dev_config_cmd_handler+0x104>)
1000ec86:	4798      	blx	r3
1000ec88:	7833      	ldrb	r3, [r6, #0]
1000ec8a:	20e2      	movs	r0, #226	; 0xe2
1000ec8c:	2b00      	cmp	r3, #0
1000ec8e:	d106      	bne.n	1000ec9e <gapm_set_dev_config_cmd_handler+0xe2>
1000ec90:	68ab      	ldr	r3, [r5, #8]
1000ec92:	20e2      	movs	r0, #226	; 0xe2
1000ec94:	781a      	ldrb	r2, [r3, #0]
1000ec96:	785b      	ldrb	r3, [r3, #1]
1000ec98:	2a03      	cmp	r2, #3
1000ec9a:	d100      	bne.n	1000ec9e <gapm_set_dev_config_cmd_handler+0xe2>
1000ec9c:	1c18      	adds	r0, r3, #0
1000ec9e:	b009      	add	sp, #36	; 0x24
1000eca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eca2:	46c0      	nop			; (mov r8, r8)
1000eca4:	10015c60 	.word	0x10015c60
1000eca8:	100158f0 	.word	0x100158f0
1000ecac:	1001134f 	.word	0x1001134f
1000ecb0:	10015c6c 	.word	0x10015c6c
1000ecb4:	10015c72 	.word	0x10015c72
1000ecb8:	100158e4 	.word	0x100158e4
1000ecbc:	1000df75 	.word	0x1000df75
1000ecc0:	1000dfd9 	.word	0x1000dfd9

1000ecc4 <gapm_get_dev_config_cmd_handler>:
1000ecc4:	4684      	mov	ip, r0
1000ecc6:	4663      	mov	r3, ip
1000ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecca:	b085      	sub	sp, #20
1000eccc:	9100      	str	r1, [sp, #0]
1000ecce:	20cf      	movs	r0, #207	; 0xcf
1000ecd0:	2b01      	cmp	r3, #1
1000ecd2:	d854      	bhi.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ecd4:	2900      	cmp	r1, #0
1000ecd6:	d052      	beq.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ecd8:	2200      	movs	r2, #0
1000ecda:	492a      	ldr	r1, [pc, #168]	; (1000ed84 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ecdc:	ab02      	add	r3, sp, #8
1000ecde:	880c      	ldrh	r4, [r1, #0]
1000ece0:	8809      	ldrh	r1, [r1, #0]
1000ece2:	1d9f      	adds	r7, r3, #6
1000ece4:	719a      	strb	r2, [r3, #6]
1000ece6:	4b28      	ldr	r3, [pc, #160]	; (1000ed88 <gapm_get_dev_config_cmd_handler+0xc4>)
1000ece8:	0a09      	lsrs	r1, r1, #8
1000ecea:	250d      	movs	r5, #13
1000ecec:	2606      	movs	r6, #6
1000ecee:	7159      	strb	r1, [r3, #5]
1000ecf0:	4661      	mov	r1, ip
1000ecf2:	701e      	strb	r6, [r3, #0]
1000ecf4:	705d      	strb	r5, [r3, #1]
1000ecf6:	709d      	strb	r5, [r3, #2]
1000ecf8:	70da      	strb	r2, [r3, #3]
1000ecfa:	711c      	strb	r4, [r3, #4]
1000ecfc:	2901      	cmp	r1, #1
1000ecfe:	d13e      	bne.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ed00:	21d0      	movs	r1, #208	; 0xd0
1000ed02:	4c22      	ldr	r4, [pc, #136]	; (1000ed8c <gapm_get_dev_config_cmd_handler+0xc8>)
1000ed04:	0109      	lsls	r1, r1, #4
1000ed06:	8061      	strh	r1, [r4, #2]
1000ed08:	4921      	ldr	r1, [pc, #132]	; (1000ed90 <gapm_get_dev_config_cmd_handler+0xcc>)
1000ed0a:	71da      	strb	r2, [r3, #7]
1000ed0c:	8021      	strh	r1, [r4, #0]
1000ed0e:	4661      	mov	r1, ip
1000ed10:	721e      	strb	r6, [r3, #8]
1000ed12:	7199      	strb	r1, [r3, #6]
1000ed14:	1c18      	adds	r0, r3, #0
1000ed16:	2109      	movs	r1, #9
1000ed18:	4b1e      	ldr	r3, [pc, #120]	; (1000ed94 <gapm_get_dev_config_cmd_handler+0xd0>)
1000ed1a:	80a5      	strh	r5, [r4, #4]
1000ed1c:	4798      	blx	r3
1000ed1e:	1c38      	adds	r0, r7, #0
1000ed20:	4b1d      	ldr	r3, [pc, #116]	; (1000ed98 <gapm_get_dev_config_cmd_handler+0xd4>)
1000ed22:	4798      	blx	r3
1000ed24:	783b      	ldrb	r3, [r7, #0]
1000ed26:	20e2      	movs	r0, #226	; 0xe2
1000ed28:	9301      	str	r3, [sp, #4]
1000ed2a:	2b00      	cmp	r3, #0
1000ed2c:	d127      	bne.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ed2e:	8821      	ldrh	r1, [r4, #0]
1000ed30:	4a1a      	ldr	r2, [pc, #104]	; (1000ed9c <gapm_get_dev_config_cmd_handler+0xd8>)
1000ed32:	68a7      	ldr	r7, [r4, #8]
1000ed34:	3b01      	subs	r3, #1
1000ed36:	4291      	cmp	r1, r2
1000ed38:	d001      	beq.n	1000ed3e <gapm_get_dev_config_cmd_handler+0x7a>
1000ed3a:	8023      	strh	r3, [r4, #0]
1000ed3c:	e01a      	b.n	1000ed74 <gapm_get_dev_config_cmd_handler+0xb0>
1000ed3e:	8063      	strh	r3, [r4, #2]
1000ed40:	9b00      	ldr	r3, [sp, #0]
1000ed42:	1c39      	adds	r1, r7, #0
1000ed44:	1c58      	adds	r0, r3, #1
1000ed46:	1c32      	adds	r2, r6, #0
1000ed48:	4b15      	ldr	r3, [pc, #84]	; (1000eda0 <gapm_get_dev_config_cmd_handler+0xdc>)
1000ed4a:	4798      	blx	r3
1000ed4c:	79bb      	ldrb	r3, [r7, #6]
1000ed4e:	9a00      	ldr	r2, [sp, #0]
1000ed50:	7013      	strb	r3, [r2, #0]
1000ed52:	23d0      	movs	r3, #208	; 0xd0
1000ed54:	011b      	lsls	r3, r3, #4
1000ed56:	8023      	strh	r3, [r4, #0]
1000ed58:	ab02      	add	r3, sp, #8
1000ed5a:	80a5      	strh	r5, [r4, #4]
1000ed5c:	1ddd      	adds	r5, r3, #7
1000ed5e:	466b      	mov	r3, sp
1000ed60:	791b      	ldrb	r3, [r3, #4]
1000ed62:	1c28      	adds	r0, r5, #0
1000ed64:	702b      	strb	r3, [r5, #0]
1000ed66:	4b0c      	ldr	r3, [pc, #48]	; (1000ed98 <gapm_get_dev_config_cmd_handler+0xd4>)
1000ed68:	4798      	blx	r3
1000ed6a:	782b      	ldrb	r3, [r5, #0]
1000ed6c:	20d0      	movs	r0, #208	; 0xd0
1000ed6e:	2b00      	cmp	r3, #0
1000ed70:	d105      	bne.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ed72:	68a7      	ldr	r7, [r4, #8]
1000ed74:	783b      	ldrb	r3, [r7, #0]
1000ed76:	7878      	ldrb	r0, [r7, #1]
1000ed78:	2b06      	cmp	r3, #6
1000ed7a:	d000      	beq.n	1000ed7e <gapm_get_dev_config_cmd_handler+0xba>
1000ed7c:	20e2      	movs	r0, #226	; 0xe2
1000ed7e:	b005      	add	sp, #20
1000ed80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed82:	46c0      	nop			; (mov r8, r8)
1000ed84:	100158f0 	.word	0x100158f0
1000ed88:	10015c60 	.word	0x10015c60
1000ed8c:	100158e4 	.word	0x100158e4
1000ed90:	00000d08 	.word	0x00000d08
1000ed94:	1000df75 	.word	0x1000df75
1000ed98:	1000dfd9 	.word	0x1000dfd9
1000ed9c:	0000ffff 	.word	0x0000ffff
1000eda0:	1001134f 	.word	0x1001134f

1000eda4 <gapm_cancel_cmd_handler>:
1000eda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000eda6:	4916      	ldr	r1, [pc, #88]	; (1000ee00 <gapm_cancel_cmd_handler+0x5c>)
1000eda8:	4816      	ldr	r0, [pc, #88]	; (1000ee04 <gapm_cancel_cmd_handler+0x60>)
1000edaa:	880c      	ldrh	r4, [r1, #0]
1000edac:	8809      	ldrh	r1, [r1, #0]
1000edae:	466b      	mov	r3, sp
1000edb0:	0a09      	lsrs	r1, r1, #8
1000edb2:	7141      	strb	r1, [r0, #5]
1000edb4:	2102      	movs	r1, #2
1000edb6:	2203      	movs	r2, #3
1000edb8:	7201      	strb	r1, [r0, #8]
1000edba:	21d0      	movs	r1, #208	; 0xd0
1000edbc:	1ddd      	adds	r5, r3, #7
1000edbe:	2300      	movs	r3, #0
1000edc0:	7104      	strb	r4, [r0, #4]
1000edc2:	4c11      	ldr	r4, [pc, #68]	; (1000ee08 <gapm_cancel_cmd_handler+0x64>)
1000edc4:	7002      	strb	r2, [r0, #0]
1000edc6:	0109      	lsls	r1, r1, #4
1000edc8:	320a      	adds	r2, #10
1000edca:	702b      	strb	r3, [r5, #0]
1000edcc:	7042      	strb	r2, [r0, #1]
1000edce:	7082      	strb	r2, [r0, #2]
1000edd0:	70c3      	strb	r3, [r0, #3]
1000edd2:	8021      	strh	r1, [r4, #0]
1000edd4:	80a2      	strh	r2, [r4, #4]
1000edd6:	71c3      	strb	r3, [r0, #7]
1000edd8:	3a0c      	subs	r2, #12
1000edda:	2109      	movs	r1, #9
1000eddc:	4b0b      	ldr	r3, [pc, #44]	; (1000ee0c <gapm_cancel_cmd_handler+0x68>)
1000edde:	7182      	strb	r2, [r0, #6]
1000ede0:	4798      	blx	r3
1000ede2:	1c28      	adds	r0, r5, #0
1000ede4:	4b0a      	ldr	r3, [pc, #40]	; (1000ee10 <gapm_cancel_cmd_handler+0x6c>)
1000ede6:	4798      	blx	r3
1000ede8:	7828      	ldrb	r0, [r5, #0]
1000edea:	2800      	cmp	r0, #0
1000edec:	d001      	beq.n	1000edf2 <gapm_cancel_cmd_handler+0x4e>
1000edee:	20e2      	movs	r0, #226	; 0xe2
1000edf0:	e004      	b.n	1000edfc <gapm_cancel_cmd_handler+0x58>
1000edf2:	68a3      	ldr	r3, [r4, #8]
1000edf4:	785b      	ldrb	r3, [r3, #1]
1000edf6:	2b44      	cmp	r3, #68	; 0x44
1000edf8:	d000      	beq.n	1000edfc <gapm_cancel_cmd_handler+0x58>
1000edfa:	1c18      	adds	r0, r3, #0
1000edfc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000edfe:	46c0      	nop			; (mov r8, r8)
1000ee00:	100158f0 	.word	0x100158f0
1000ee04:	10015c60 	.word	0x10015c60
1000ee08:	100158e4 	.word	0x100158e4
1000ee0c:	1000df75 	.word	0x1000df75
1000ee10:	1000dfd9 	.word	0x1000dfd9

1000ee14 <gapm_dev_bdaddr_ind_handler>:
1000ee14:	b538      	push	{r3, r4, r5, lr}
1000ee16:	1c05      	adds	r5, r0, #0
1000ee18:	1c0c      	adds	r4, r1, #0
1000ee1a:	1c48      	adds	r0, r1, #1
1000ee1c:	2206      	movs	r2, #6
1000ee1e:	1c29      	adds	r1, r5, #0
1000ee20:	4b02      	ldr	r3, [pc, #8]	; (1000ee2c <gapm_dev_bdaddr_ind_handler+0x18>)
1000ee22:	4798      	blx	r3
1000ee24:	79ab      	ldrb	r3, [r5, #6]
1000ee26:	2000      	movs	r0, #0
1000ee28:	7023      	strb	r3, [r4, #0]
1000ee2a:	bd38      	pop	{r3, r4, r5, pc}
1000ee2c:	1001134f 	.word	0x1001134f

1000ee30 <gapm_cmp_evt>:
1000ee30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ee32:	7803      	ldrb	r3, [r0, #0]
1000ee34:	7845      	ldrb	r5, [r0, #1]
1000ee36:	3b0c      	subs	r3, #12
1000ee38:	1e18      	subs	r0, r3, #0
1000ee3a:	280b      	cmp	r0, #11
1000ee3c:	d900      	bls.n	1000ee40 <gapm_cmp_evt+0x10>
1000ee3e:	e08d      	b.n	1000ef5c <gapm_cmp_evt+0x12c>
1000ee40:	1c0c      	adds	r4, r1, #0
1000ee42:	f000 fbbf 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000ee46:	1952      	.short	0x1952
1000ee48:	068b1919 	.word	0x068b1919
1000ee4c:	8b595906 	.word	0x8b595906
1000ee50:	0d8b      	.short	0x0d8b
1000ee52:	2300      	movs	r3, #0
1000ee54:	2d45      	cmp	r5, #69	; 0x45
1000ee56:	d000      	beq.n	1000ee5a <gapm_cmp_evt+0x2a>
1000ee58:	1c2b      	adds	r3, r5, #0
1000ee5a:	7023      	strb	r3, [r4, #0]
1000ee5c:	2002      	movs	r0, #2
1000ee5e:	e07e      	b.n	1000ef5e <gapm_cmp_evt+0x12e>
1000ee60:	203b      	movs	r0, #59	; 0x3b
1000ee62:	2d00      	cmp	r5, #0
1000ee64:	d100      	bne.n	1000ee68 <gapm_cmp_evt+0x38>
1000ee66:	e07a      	b.n	1000ef5e <gapm_cmp_evt+0x12e>
1000ee68:	700d      	strb	r5, [r1, #0]
1000ee6a:	1c48      	adds	r0, r1, #1
1000ee6c:	2210      	movs	r2, #16
1000ee6e:	2100      	movs	r1, #0
1000ee70:	4b3b      	ldr	r3, [pc, #236]	; (1000ef60 <gapm_cmp_evt+0x130>)
1000ee72:	4798      	blx	r3
1000ee74:	200f      	movs	r0, #15
1000ee76:	e072      	b.n	1000ef5e <gapm_cmp_evt+0x12e>
1000ee78:	2d00      	cmp	r5, #0
1000ee7a:	d134      	bne.n	1000eee6 <gapm_cmp_evt+0xb6>
1000ee7c:	4b39      	ldr	r3, [pc, #228]	; (1000ef64 <gapm_cmp_evt+0x134>)
1000ee7e:	4798      	blx	r3
1000ee80:	1e43      	subs	r3, r0, #1
1000ee82:	b2db      	uxtb	r3, r3
1000ee84:	1c28      	adds	r0, r5, #0
1000ee86:	2b06      	cmp	r3, #6
1000ee88:	d869      	bhi.n	1000ef5e <gapm_cmp_evt+0x12e>
1000ee8a:	466b      	mov	r3, sp
1000ee8c:	4e36      	ldr	r6, [pc, #216]	; (1000ef68 <gapm_cmp_evt+0x138>)
1000ee8e:	1dd9      	adds	r1, r3, #7
1000ee90:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ee92:	4b36      	ldr	r3, [pc, #216]	; (1000ef6c <gapm_cmp_evt+0x13c>)
1000ee94:	4798      	blx	r3
1000ee96:	2312      	movs	r3, #18
1000ee98:	4358      	muls	r0, r3
1000ee9a:	4935      	ldr	r1, [pc, #212]	; (1000ef70 <gapm_cmp_evt+0x140>)
1000ee9c:	1809      	adds	r1, r1, r0
1000ee9e:	1c0b      	adds	r3, r1, #0
1000eea0:	894a      	ldrh	r2, [r1, #10]
1000eea2:	3308      	adds	r3, #8
1000eea4:	8122      	strh	r2, [r4, #8]
1000eea6:	784f      	ldrb	r7, [r1, #1]
1000eea8:	72a5      	strb	r5, [r4, #10]
1000eeaa:	7027      	strb	r7, [r4, #0]
1000eeac:	898a      	ldrh	r2, [r1, #12]
1000eeae:	1c60      	adds	r0, r4, #1
1000eeb0:	81a2      	strh	r2, [r4, #12]
1000eeb2:	88db      	ldrh	r3, [r3, #6]
1000eeb4:	3102      	adds	r1, #2
1000eeb6:	81e3      	strh	r3, [r4, #14]
1000eeb8:	89cb      	ldrh	r3, [r1, #14]
1000eeba:	2206      	movs	r2, #6
1000eebc:	8223      	strh	r3, [r4, #16]
1000eebe:	4b2d      	ldr	r3, [pc, #180]	; (1000ef74 <gapm_cmp_evt+0x144>)
1000eec0:	4798      	blx	r3
1000eec2:	2f00      	cmp	r7, #0
1000eec4:	d00a      	beq.n	1000eedc <gapm_cmp_evt+0xac>
1000eec6:	79a3      	ldrb	r3, [r4, #6]
1000eec8:	223f      	movs	r2, #63	; 0x3f
1000eeca:	1c19      	adds	r1, r3, #0
1000eecc:	3501      	adds	r5, #1
1000eece:	4391      	bics	r1, r2
1000eed0:	29c0      	cmp	r1, #192	; 0xc0
1000eed2:	d003      	beq.n	1000eedc <gapm_cmp_evt+0xac>
1000eed4:	065b      	lsls	r3, r3, #25
1000eed6:	0fdb      	lsrs	r3, r3, #31
1000eed8:	3502      	adds	r5, #2
1000eeda:	1aed      	subs	r5, r5, r3
1000eedc:	2301      	movs	r3, #1
1000eede:	425b      	negs	r3, r3
1000eee0:	7025      	strb	r5, [r4, #0]
1000eee2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000eee4:	e038      	b.n	1000ef58 <gapm_cmp_evt+0x128>
1000eee6:	700d      	strb	r5, [r1, #0]
1000eee8:	e004      	b.n	1000eef4 <gapm_cmp_evt+0xc4>
1000eeea:	2300      	movs	r3, #0
1000eeec:	2d45      	cmp	r5, #69	; 0x45
1000eeee:	d000      	beq.n	1000eef2 <gapm_cmp_evt+0xc2>
1000eef0:	1c2b      	adds	r3, r5, #0
1000eef2:	7023      	strb	r3, [r4, #0]
1000eef4:	2003      	movs	r0, #3
1000eef6:	e032      	b.n	1000ef5e <gapm_cmp_evt+0x12e>
1000eef8:	4e1b      	ldr	r6, [pc, #108]	; (1000ef68 <gapm_cmp_evt+0x138>)
1000eefa:	2100      	movs	r1, #0
1000eefc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000eefe:	4b1b      	ldr	r3, [pc, #108]	; (1000ef6c <gapm_cmp_evt+0x13c>)
1000ef00:	4798      	blx	r3
1000ef02:	2807      	cmp	r0, #7
1000ef04:	d818      	bhi.n	1000ef38 <gapm_cmp_evt+0x108>
1000ef06:	2301      	movs	r3, #1
1000ef08:	425b      	negs	r3, r3
1000ef0a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ef0c:	3313      	adds	r3, #19
1000ef0e:	4358      	muls	r0, r3
1000ef10:	4917      	ldr	r1, [pc, #92]	; (1000ef70 <gapm_cmp_evt+0x140>)
1000ef12:	1809      	adds	r1, r1, r0
1000ef14:	1c0b      	adds	r3, r1, #0
1000ef16:	894a      	ldrh	r2, [r1, #10]
1000ef18:	3308      	adds	r3, #8
1000ef1a:	8122      	strh	r2, [r4, #8]
1000ef1c:	784a      	ldrb	r2, [r1, #1]
1000ef1e:	72a5      	strb	r5, [r4, #10]
1000ef20:	7022      	strb	r2, [r4, #0]
1000ef22:	898a      	ldrh	r2, [r1, #12]
1000ef24:	1c60      	adds	r0, r4, #1
1000ef26:	81a2      	strh	r2, [r4, #12]
1000ef28:	88db      	ldrh	r3, [r3, #6]
1000ef2a:	3102      	adds	r1, #2
1000ef2c:	81e3      	strh	r3, [r4, #14]
1000ef2e:	89cb      	ldrh	r3, [r1, #14]
1000ef30:	2206      	movs	r2, #6
1000ef32:	8223      	strh	r3, [r4, #16]
1000ef34:	4b0f      	ldr	r3, [pc, #60]	; (1000ef74 <gapm_cmp_evt+0x144>)
1000ef36:	4798      	blx	r3
1000ef38:	2200      	movs	r2, #0
1000ef3a:	7823      	ldrb	r3, [r4, #0]
1000ef3c:	4293      	cmp	r3, r2
1000ef3e:	d00a      	beq.n	1000ef56 <gapm_cmp_evt+0x126>
1000ef40:	79a3      	ldrb	r3, [r4, #6]
1000ef42:	323f      	adds	r2, #63	; 0x3f
1000ef44:	1c19      	adds	r1, r3, #0
1000ef46:	4391      	bics	r1, r2
1000ef48:	3a3e      	subs	r2, #62	; 0x3e
1000ef4a:	29c0      	cmp	r1, #192	; 0xc0
1000ef4c:	d003      	beq.n	1000ef56 <gapm_cmp_evt+0x126>
1000ef4e:	065b      	lsls	r3, r3, #25
1000ef50:	0fdb      	lsrs	r3, r3, #31
1000ef52:	3202      	adds	r2, #2
1000ef54:	1ad2      	subs	r2, r2, r3
1000ef56:	7022      	strb	r2, [r4, #0]
1000ef58:	2005      	movs	r0, #5
1000ef5a:	e000      	b.n	1000ef5e <gapm_cmp_evt+0x12e>
1000ef5c:	2000      	movs	r0, #0
1000ef5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ef60:	10011361 	.word	0x10011361
1000ef64:	1000e181 	.word	0x1000e181
1000ef68:	10015982 	.word	0x10015982
1000ef6c:	1000e145 	.word	0x1000e145
1000ef70:	100158f2 	.word	0x100158f2
1000ef74:	1001134f 	.word	0x1001134f

1000ef78 <gapm_adv_report_evt_handler>:
1000ef78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ef7a:	7843      	ldrb	r3, [r0, #1]
1000ef7c:	1c05      	adds	r5, r0, #0
1000ef7e:	9301      	str	r3, [sp, #4]
1000ef80:	466b      	mov	r3, sp
1000ef82:	1c0c      	adds	r4, r1, #0
1000ef84:	791b      	ldrb	r3, [r3, #4]
1000ef86:	7806      	ldrb	r6, [r0, #0]
1000ef88:	2206      	movs	r2, #6
1000ef8a:	704b      	strb	r3, [r1, #1]
1000ef8c:	1c88      	adds	r0, r1, #2
1000ef8e:	4f1b      	ldr	r7, [pc, #108]	; (1000effc <gapm_adv_report_evt_handler+0x84>)
1000ef90:	1ca9      	adds	r1, r5, #2
1000ef92:	47b8      	blx	r7
1000ef94:	1c20      	adds	r0, r4, #0
1000ef96:	1c29      	adds	r1, r5, #0
1000ef98:	7a2a      	ldrb	r2, [r5, #8]
1000ef9a:	3008      	adds	r0, #8
1000ef9c:	77c2      	strb	r2, [r0, #31]
1000ef9e:	3109      	adds	r1, #9
1000efa0:	3528      	adds	r5, #40	; 0x28
1000efa2:	47b8      	blx	r7
1000efa4:	782b      	ldrb	r3, [r5, #0]
1000efa6:	b25a      	sxtb	r2, r3
1000efa8:	2a00      	cmp	r2, #0
1000efaa:	da01      	bge.n	1000efb0 <gapm_adv_report_evt_handler+0x38>
1000efac:	3301      	adds	r3, #1
1000efae:	b2db      	uxtb	r3, r3
1000efb0:	1c22      	adds	r2, r4, #0
1000efb2:	3228      	adds	r2, #40	; 0x28
1000efb4:	7013      	strb	r3, [r2, #0]
1000efb6:	2200      	movs	r2, #0
1000efb8:	9b01      	ldr	r3, [sp, #4]
1000efba:	4293      	cmp	r3, r2
1000efbc:	d00a      	beq.n	1000efd4 <gapm_adv_report_evt_handler+0x5c>
1000efbe:	79e3      	ldrb	r3, [r4, #7]
1000efc0:	323f      	adds	r2, #63	; 0x3f
1000efc2:	1c19      	adds	r1, r3, #0
1000efc4:	4391      	bics	r1, r2
1000efc6:	3a3e      	subs	r2, #62	; 0x3e
1000efc8:	29c0      	cmp	r1, #192	; 0xc0
1000efca:	d003      	beq.n	1000efd4 <gapm_adv_report_evt_handler+0x5c>
1000efcc:	065b      	lsls	r3, r3, #25
1000efce:	0fdb      	lsrs	r3, r3, #31
1000efd0:	3202      	adds	r2, #2
1000efd2:	1ad2      	subs	r2, r2, r3
1000efd4:	7062      	strb	r2, [r4, #1]
1000efd6:	2e04      	cmp	r6, #4
1000efd8:	d80f      	bhi.n	1000effa <gapm_adv_report_evt_handler+0x82>
1000efda:	1c30      	adds	r0, r6, #0
1000efdc:	f000 faf2 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000efe0:	09070503 	.word	0x09070503
1000efe4:	0b          	.byte	0x0b
1000efe5:	00          	.byte	0x00
1000efe6:	2300      	movs	r3, #0
1000efe8:	e006      	b.n	1000eff8 <gapm_adv_report_evt_handler+0x80>
1000efea:	2301      	movs	r3, #1
1000efec:	e004      	b.n	1000eff8 <gapm_adv_report_evt_handler+0x80>
1000efee:	2302      	movs	r3, #2
1000eff0:	e002      	b.n	1000eff8 <gapm_adv_report_evt_handler+0x80>
1000eff2:	2303      	movs	r3, #3
1000eff4:	e000      	b.n	1000eff8 <gapm_adv_report_evt_handler+0x80>
1000eff6:	2305      	movs	r3, #5
1000eff8:	7023      	strb	r3, [r4, #0]
1000effa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000effc:	1001134f 	.word	0x1001134f

1000f000 <gapm_resolv_addr_cmd_handler>:
1000f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f002:	2314      	movs	r3, #20
1000f004:	4c12      	ldr	r4, [pc, #72]	; (1000f050 <gapm_resolv_addr_cmd_handler+0x50>)
1000f006:	1c17      	adds	r7, r2, #0
1000f008:	7023      	strb	r3, [r4, #0]
1000f00a:	3b07      	subs	r3, #7
1000f00c:	7063      	strb	r3, [r4, #1]
1000f00e:	70a3      	strb	r3, [r4, #2]
1000f010:	2300      	movs	r3, #0
1000f012:	70e3      	strb	r3, [r4, #3]
1000f014:	4b0f      	ldr	r3, [pc, #60]	; (1000f054 <gapm_resolv_addr_cmd_handler+0x54>)
1000f016:	1c05      	adds	r5, r0, #0
1000f018:	881a      	ldrh	r2, [r3, #0]
1000f01a:	881b      	ldrh	r3, [r3, #0]
1000f01c:	4e0e      	ldr	r6, [pc, #56]	; (1000f058 <gapm_resolv_addr_cmd_handler+0x58>)
1000f01e:	0a1b      	lsrs	r3, r3, #8
1000f020:	7163      	strb	r3, [r4, #5]
1000f022:	2317      	movs	r3, #23
1000f024:	012d      	lsls	r5, r5, #4
1000f026:	7122      	strb	r2, [r4, #4]
1000f028:	7260      	strb	r0, [r4, #9]
1000f02a:	2206      	movs	r2, #6
1000f02c:	480b      	ldr	r0, [pc, #44]	; (1000f05c <gapm_resolv_addr_cmd_handler+0x5c>)
1000f02e:	7223      	strb	r3, [r4, #8]
1000f030:	47b0      	blx	r6
1000f032:	1c39      	adds	r1, r7, #0
1000f034:	1c2a      	adds	r2, r5, #0
1000f036:	480a      	ldr	r0, [pc, #40]	; (1000f060 <gapm_resolv_addr_cmd_handler+0x60>)
1000f038:	47b0      	blx	r6
1000f03a:	1c29      	adds	r1, r5, #0
1000f03c:	3110      	adds	r1, #16
1000f03e:	1c0b      	adds	r3, r1, #0
1000f040:	3b08      	subs	r3, #8
1000f042:	71a3      	strb	r3, [r4, #6]
1000f044:	121b      	asrs	r3, r3, #8
1000f046:	71e3      	strb	r3, [r4, #7]
1000f048:	1c20      	adds	r0, r4, #0
1000f04a:	4b06      	ldr	r3, [pc, #24]	; (1000f064 <gapm_resolv_addr_cmd_handler+0x64>)
1000f04c:	4798      	blx	r3
1000f04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f050:	10015c60 	.word	0x10015c60
1000f054:	100158f0 	.word	0x100158f0
1000f058:	1001134f 	.word	0x1001134f
1000f05c:	10015c6a 	.word	0x10015c6a
1000f060:	10015c70 	.word	0x10015c70
1000f064:	1000df75 	.word	0x1000df75

1000f068 <gapm_addr_solved_ind_handler>:
1000f068:	b570      	push	{r4, r5, r6, lr}
1000f06a:	1c04      	adds	r4, r0, #0
1000f06c:	1c08      	adds	r0, r1, #0
1000f06e:	1c0d      	adds	r5, r1, #0
1000f070:	4e05      	ldr	r6, [pc, #20]	; (1000f088 <gapm_addr_solved_ind_handler+0x20>)
1000f072:	1c21      	adds	r1, r4, #0
1000f074:	2206      	movs	r2, #6
1000f076:	3011      	adds	r0, #17
1000f078:	47b0      	blx	r6
1000f07a:	1c68      	adds	r0, r5, #1
1000f07c:	1da1      	adds	r1, r4, #6
1000f07e:	2210      	movs	r2, #16
1000f080:	47b0      	blx	r6
1000f082:	2300      	movs	r3, #0
1000f084:	702b      	strb	r3, [r5, #0]
1000f086:	bd70      	pop	{r4, r5, r6, pc}
1000f088:	1001134f 	.word	0x1001134f

1000f08c <gapm_profile_added_ind_handler>:
1000f08c:	b510      	push	{r4, lr}
1000f08e:	7843      	ldrb	r3, [r0, #1]
1000f090:	7902      	ldrb	r2, [r0, #4]
1000f092:	7944      	ldrb	r4, [r0, #5]
1000f094:	7800      	ldrb	r0, [r0, #0]
1000f096:	021b      	lsls	r3, r3, #8
1000f098:	4303      	orrs	r3, r0
1000f09a:	2b1b      	cmp	r3, #27
1000f09c:	d104      	bne.n	1000f0a8 <gapm_profile_added_ind_handler+0x1c>
1000f09e:	2300      	movs	r3, #0
1000f0a0:	700b      	strb	r3, [r1, #0]
1000f0a2:	0223      	lsls	r3, r4, #8
1000f0a4:	4313      	orrs	r3, r2
1000f0a6:	804b      	strh	r3, [r1, #2]
1000f0a8:	203b      	movs	r0, #59	; 0x3b
1000f0aa:	bd10      	pop	{r4, pc}

1000f0ac <gattc_read_req_ind_parser>:
1000f0ac:	7843      	ldrb	r3, [r0, #1]
1000f0ae:	7802      	ldrb	r2, [r0, #0]
1000f0b0:	021b      	lsls	r3, r3, #8
1000f0b2:	4313      	orrs	r3, r2
1000f0b4:	804b      	strh	r3, [r1, #2]
1000f0b6:	4770      	bx	lr

1000f0b8 <gattc_write_req_ind_parser>:
1000f0b8:	b508      	push	{r3, lr}
1000f0ba:	1c13      	adds	r3, r2, #0
1000f0bc:	0a00      	lsrs	r0, r0, #8
1000f0be:	8010      	strh	r0, [r2, #0]
1000f0c0:	784a      	ldrb	r2, [r1, #1]
1000f0c2:	7808      	ldrb	r0, [r1, #0]
1000f0c4:	0212      	lsls	r2, r2, #8
1000f0c6:	4302      	orrs	r2, r0
1000f0c8:	805a      	strh	r2, [r3, #2]
1000f0ca:	78ca      	ldrb	r2, [r1, #3]
1000f0cc:	7888      	ldrb	r0, [r1, #2]
1000f0ce:	0212      	lsls	r2, r2, #8
1000f0d0:	4302      	orrs	r2, r0
1000f0d2:	809a      	strh	r2, [r3, #4]
1000f0d4:	794a      	ldrb	r2, [r1, #5]
1000f0d6:	7908      	ldrb	r0, [r1, #4]
1000f0d8:	0212      	lsls	r2, r2, #8
1000f0da:	4302      	orrs	r2, r0
1000f0dc:	80da      	strh	r2, [r3, #6]
1000f0de:	3308      	adds	r3, #8
1000f0e0:	1c18      	adds	r0, r3, #0
1000f0e2:	3106      	adds	r1, #6
1000f0e4:	4b01      	ldr	r3, [pc, #4]	; (1000f0ec <gattc_write_req_ind_parser+0x34>)
1000f0e6:	4798      	blx	r3
1000f0e8:	bd08      	pop	{r3, pc}
1000f0ea:	46c0      	nop			; (mov r8, r8)
1000f0ec:	1001134f 	.word	0x1001134f

1000f0f0 <gattc_att_info_req_parser>:
1000f0f0:	7843      	ldrb	r3, [r0, #1]
1000f0f2:	7802      	ldrb	r2, [r0, #0]
1000f0f4:	021b      	lsls	r3, r3, #8
1000f0f6:	4313      	orrs	r3, r2
1000f0f8:	800b      	strh	r3, [r1, #0]
1000f0fa:	4770      	bx	lr

1000f0fc <gattc_read_cfm>:
1000f0fc:	b538      	push	{r3, r4, r5, lr}
1000f0fe:	2514      	movs	r5, #20
1000f100:	1c1c      	adds	r4, r3, #0
1000f102:	4b14      	ldr	r3, [pc, #80]	; (1000f154 <gattc_read_cfm+0x58>)
1000f104:	70d9      	strb	r1, [r3, #3]
1000f106:	4914      	ldr	r1, [pc, #80]	; (1000f158 <gattc_read_cfm+0x5c>)
1000f108:	701d      	strb	r5, [r3, #0]
1000f10a:	3d08      	subs	r5, #8
1000f10c:	705d      	strb	r5, [r3, #1]
1000f10e:	709d      	strb	r5, [r3, #2]
1000f110:	880d      	ldrh	r5, [r1, #0]
1000f112:	8809      	ldrh	r1, [r1, #0]
1000f114:	7218      	strb	r0, [r3, #8]
1000f116:	0a09      	lsrs	r1, r1, #8
1000f118:	7159      	strb	r1, [r3, #5]
1000f11a:	0a00      	lsrs	r0, r0, #8
1000f11c:	0a21      	lsrs	r1, r4, #8
1000f11e:	711d      	strb	r5, [r3, #4]
1000f120:	7258      	strb	r0, [r3, #9]
1000f122:	729c      	strb	r4, [r3, #10]
1000f124:	72d9      	strb	r1, [r3, #11]
1000f126:	731a      	strb	r2, [r3, #12]
1000f128:	1c1d      	adds	r5, r3, #0
1000f12a:	2c00      	cmp	r4, #0
1000f12c:	d007      	beq.n	1000f13e <gattc_read_cfm+0x42>
1000f12e:	9904      	ldr	r1, [sp, #16]
1000f130:	1c22      	adds	r2, r4, #0
1000f132:	480a      	ldr	r0, [pc, #40]	; (1000f15c <gattc_read_cfm+0x60>)
1000f134:	4b0a      	ldr	r3, [pc, #40]	; (1000f160 <gattc_read_cfm+0x64>)
1000f136:	340d      	adds	r4, #13
1000f138:	4798      	blx	r3
1000f13a:	b2a1      	uxth	r1, r4
1000f13c:	e001      	b.n	1000f142 <gattc_read_cfm+0x46>
1000f13e:	210e      	movs	r1, #14
1000f140:	735c      	strb	r4, [r3, #13]
1000f142:	1c0b      	adds	r3, r1, #0
1000f144:	3b08      	subs	r3, #8
1000f146:	71ab      	strb	r3, [r5, #6]
1000f148:	121b      	asrs	r3, r3, #8
1000f14a:	71eb      	strb	r3, [r5, #7]
1000f14c:	1c28      	adds	r0, r5, #0
1000f14e:	4b05      	ldr	r3, [pc, #20]	; (1000f164 <gattc_read_cfm+0x68>)
1000f150:	4798      	blx	r3
1000f152:	bd38      	pop	{r3, r4, r5, pc}
1000f154:	10015c60 	.word	0x10015c60
1000f158:	100158f0 	.word	0x100158f0
1000f15c:	10015c6d 	.word	0x10015c6d
1000f160:	1001134f 	.word	0x1001134f
1000f164:	1000df75 	.word	0x1000df75

1000f168 <gattc_write_cfm>:
1000f168:	4b0d      	ldr	r3, [pc, #52]	; (1000f1a0 <gattc_write_cfm+0x38>)
1000f16a:	b510      	push	{r4, lr}
1000f16c:	729a      	strb	r2, [r3, #10]
1000f16e:	2203      	movs	r2, #3
1000f170:	2416      	movs	r4, #22
1000f172:	719a      	strb	r2, [r3, #6]
1000f174:	2200      	movs	r2, #0
1000f176:	70d9      	strb	r1, [r3, #3]
1000f178:	490a      	ldr	r1, [pc, #40]	; (1000f1a4 <gattc_write_cfm+0x3c>)
1000f17a:	701c      	strb	r4, [r3, #0]
1000f17c:	3c0a      	subs	r4, #10
1000f17e:	705c      	strb	r4, [r3, #1]
1000f180:	709c      	strb	r4, [r3, #2]
1000f182:	880c      	ldrh	r4, [r1, #0]
1000f184:	8809      	ldrh	r1, [r1, #0]
1000f186:	7218      	strb	r0, [r3, #8]
1000f188:	0a09      	lsrs	r1, r1, #8
1000f18a:	0a00      	lsrs	r0, r0, #8
1000f18c:	711c      	strb	r4, [r3, #4]
1000f18e:	7159      	strb	r1, [r3, #5]
1000f190:	7258      	strb	r0, [r3, #9]
1000f192:	71da      	strb	r2, [r3, #7]
1000f194:	1c18      	adds	r0, r3, #0
1000f196:	210b      	movs	r1, #11
1000f198:	4b03      	ldr	r3, [pc, #12]	; (1000f1a8 <gattc_write_cfm+0x40>)
1000f19a:	4798      	blx	r3
1000f19c:	bd10      	pop	{r4, pc}
1000f19e:	46c0      	nop			; (mov r8, r8)
1000f1a0:	10015c60 	.word	0x10015c60
1000f1a4:	100158f0 	.word	0x100158f0
1000f1a8:	1000df75 	.word	0x1000df75

1000f1ac <gattc_att_info_cfm>:
1000f1ac:	b538      	push	{r3, r4, r5, lr}
1000f1ae:	4c0e      	ldr	r4, [pc, #56]	; (1000f1e8 <gattc_att_info_cfm+0x3c>)
1000f1b0:	2518      	movs	r5, #24
1000f1b2:	7323      	strb	r3, [r4, #12]
1000f1b4:	2305      	movs	r3, #5
1000f1b6:	71a3      	strb	r3, [r4, #6]
1000f1b8:	2300      	movs	r3, #0
1000f1ba:	70e1      	strb	r1, [r4, #3]
1000f1bc:	490b      	ldr	r1, [pc, #44]	; (1000f1ec <gattc_att_info_cfm+0x40>)
1000f1be:	7025      	strb	r5, [r4, #0]
1000f1c0:	3d0c      	subs	r5, #12
1000f1c2:	7065      	strb	r5, [r4, #1]
1000f1c4:	70a5      	strb	r5, [r4, #2]
1000f1c6:	880d      	ldrh	r5, [r1, #0]
1000f1c8:	8809      	ldrh	r1, [r1, #0]
1000f1ca:	7220      	strb	r0, [r4, #8]
1000f1cc:	0a09      	lsrs	r1, r1, #8
1000f1ce:	0a00      	lsrs	r0, r0, #8
1000f1d0:	7161      	strb	r1, [r4, #5]
1000f1d2:	7260      	strb	r0, [r4, #9]
1000f1d4:	72a2      	strb	r2, [r4, #10]
1000f1d6:	71e3      	strb	r3, [r4, #7]
1000f1d8:	0a12      	lsrs	r2, r2, #8
1000f1da:	1c20      	adds	r0, r4, #0
1000f1dc:	210d      	movs	r1, #13
1000f1de:	4b04      	ldr	r3, [pc, #16]	; (1000f1f0 <gattc_att_info_cfm+0x44>)
1000f1e0:	7125      	strb	r5, [r4, #4]
1000f1e2:	72e2      	strb	r2, [r4, #11]
1000f1e4:	4798      	blx	r3
1000f1e6:	bd38      	pop	{r3, r4, r5, pc}
1000f1e8:	10015c60 	.word	0x10015c60
1000f1ec:	100158f0 	.word	0x100158f0
1000f1f0:	1000df75 	.word	0x1000df75

1000f1f4 <gattc_event_cfm_handler>:
1000f1f4:	220e      	movs	r2, #14
1000f1f6:	b508      	push	{r3, lr}
1000f1f8:	4b0b      	ldr	r3, [pc, #44]	; (1000f228 <gattc_event_cfm_handler+0x34>)
1000f1fa:	701a      	strb	r2, [r3, #0]
1000f1fc:	3a02      	subs	r2, #2
1000f1fe:	705a      	strb	r2, [r3, #1]
1000f200:	709a      	strb	r2, [r3, #2]
1000f202:	4a0a      	ldr	r2, [pc, #40]	; (1000f22c <gattc_event_cfm_handler+0x38>)
1000f204:	70d8      	strb	r0, [r3, #3]
1000f206:	8810      	ldrh	r0, [r2, #0]
1000f208:	8812      	ldrh	r2, [r2, #0]
1000f20a:	7219      	strb	r1, [r3, #8]
1000f20c:	0a12      	lsrs	r2, r2, #8
1000f20e:	715a      	strb	r2, [r3, #5]
1000f210:	2202      	movs	r2, #2
1000f212:	719a      	strb	r2, [r3, #6]
1000f214:	2200      	movs	r2, #0
1000f216:	0a09      	lsrs	r1, r1, #8
1000f218:	7118      	strb	r0, [r3, #4]
1000f21a:	7259      	strb	r1, [r3, #9]
1000f21c:	71da      	strb	r2, [r3, #7]
1000f21e:	1c18      	adds	r0, r3, #0
1000f220:	210a      	movs	r1, #10
1000f222:	4b03      	ldr	r3, [pc, #12]	; (1000f230 <gattc_event_cfm_handler+0x3c>)
1000f224:	4798      	blx	r3
1000f226:	bd08      	pop	{r3, pc}
1000f228:	10015c60 	.word	0x10015c60
1000f22c:	100158f0 	.word	0x100158f0
1000f230:	1000df75 	.word	0x1000df75

1000f234 <gattc_disc_svc_ind_parser>:
1000f234:	b570      	push	{r4, r5, r6, lr}
1000f236:	1c15      	adds	r5, r2, #0
1000f238:	0a00      	lsrs	r0, r0, #8
1000f23a:	8010      	strh	r0, [r2, #0]
1000f23c:	784b      	ldrb	r3, [r1, #1]
1000f23e:	780a      	ldrb	r2, [r1, #0]
1000f240:	021b      	lsls	r3, r3, #8
1000f242:	4313      	orrs	r3, r2
1000f244:	806b      	strh	r3, [r5, #2]
1000f246:	78cb      	ldrb	r3, [r1, #3]
1000f248:	788a      	ldrb	r2, [r1, #2]
1000f24a:	021b      	lsls	r3, r3, #8
1000f24c:	4313      	orrs	r3, r2
1000f24e:	80ab      	strh	r3, [r5, #4]
1000f250:	790e      	ldrb	r6, [r1, #4]
1000f252:	4b05      	ldr	r3, [pc, #20]	; (1000f268 <gattc_disc_svc_ind_parser+0x34>)
1000f254:	1c30      	adds	r0, r6, #0
1000f256:	1c0c      	adds	r4, r1, #0
1000f258:	4798      	blx	r3
1000f25a:	1c32      	adds	r2, r6, #0
1000f25c:	71a8      	strb	r0, [r5, #6]
1000f25e:	1d61      	adds	r1, r4, #5
1000f260:	1de8      	adds	r0, r5, #7
1000f262:	4b02      	ldr	r3, [pc, #8]	; (1000f26c <gattc_disc_svc_ind_parser+0x38>)
1000f264:	4798      	blx	r3
1000f266:	bd70      	pop	{r4, r5, r6, pc}
1000f268:	1000d92d 	.word	0x1000d92d
1000f26c:	1001134f 	.word	0x1001134f

1000f270 <gattc_disc_svc_incl_ind_parser>:
1000f270:	b570      	push	{r4, r5, r6, lr}
1000f272:	1c15      	adds	r5, r2, #0
1000f274:	0a00      	lsrs	r0, r0, #8
1000f276:	8010      	strh	r0, [r2, #0]
1000f278:	784b      	ldrb	r3, [r1, #1]
1000f27a:	780a      	ldrb	r2, [r1, #0]
1000f27c:	021b      	lsls	r3, r3, #8
1000f27e:	4313      	orrs	r3, r2
1000f280:	806b      	strh	r3, [r5, #2]
1000f282:	78cb      	ldrb	r3, [r1, #3]
1000f284:	788a      	ldrb	r2, [r1, #2]
1000f286:	021b      	lsls	r3, r3, #8
1000f288:	4313      	orrs	r3, r2
1000f28a:	80ab      	strh	r3, [r5, #4]
1000f28c:	794b      	ldrb	r3, [r1, #5]
1000f28e:	790a      	ldrb	r2, [r1, #4]
1000f290:	021b      	lsls	r3, r3, #8
1000f292:	4313      	orrs	r3, r2
1000f294:	80eb      	strh	r3, [r5, #6]
1000f296:	798e      	ldrb	r6, [r1, #6]
1000f298:	4b05      	ldr	r3, [pc, #20]	; (1000f2b0 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f29a:	1c30      	adds	r0, r6, #0
1000f29c:	1c0c      	adds	r4, r1, #0
1000f29e:	4798      	blx	r3
1000f2a0:	7228      	strb	r0, [r5, #8]
1000f2a2:	1c28      	adds	r0, r5, #0
1000f2a4:	1c32      	adds	r2, r6, #0
1000f2a6:	1de1      	adds	r1, r4, #7
1000f2a8:	4b02      	ldr	r3, [pc, #8]	; (1000f2b4 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f2aa:	3009      	adds	r0, #9
1000f2ac:	4798      	blx	r3
1000f2ae:	bd70      	pop	{r4, r5, r6, pc}
1000f2b0:	1000d92d 	.word	0x1000d92d
1000f2b4:	1001134f 	.word	0x1001134f

1000f2b8 <gattc_disc_char_ind_parser>:
1000f2b8:	b570      	push	{r4, r5, r6, lr}
1000f2ba:	1c15      	adds	r5, r2, #0
1000f2bc:	0a00      	lsrs	r0, r0, #8
1000f2be:	8010      	strh	r0, [r2, #0]
1000f2c0:	784b      	ldrb	r3, [r1, #1]
1000f2c2:	780a      	ldrb	r2, [r1, #0]
1000f2c4:	021b      	lsls	r3, r3, #8
1000f2c6:	4313      	orrs	r3, r2
1000f2c8:	806b      	strh	r3, [r5, #2]
1000f2ca:	78cb      	ldrb	r3, [r1, #3]
1000f2cc:	788a      	ldrb	r2, [r1, #2]
1000f2ce:	021b      	lsls	r3, r3, #8
1000f2d0:	4313      	orrs	r3, r2
1000f2d2:	80ab      	strh	r3, [r5, #4]
1000f2d4:	790b      	ldrb	r3, [r1, #4]
1000f2d6:	1c0c      	adds	r4, r1, #0
1000f2d8:	71ab      	strb	r3, [r5, #6]
1000f2da:	794e      	ldrb	r6, [r1, #5]
1000f2dc:	4b05      	ldr	r3, [pc, #20]	; (1000f2f4 <gattc_disc_char_ind_parser+0x3c>)
1000f2de:	1c30      	adds	r0, r6, #0
1000f2e0:	4798      	blx	r3
1000f2e2:	71e8      	strb	r0, [r5, #7]
1000f2e4:	1c28      	adds	r0, r5, #0
1000f2e6:	1c32      	adds	r2, r6, #0
1000f2e8:	1da1      	adds	r1, r4, #6
1000f2ea:	4b03      	ldr	r3, [pc, #12]	; (1000f2f8 <gattc_disc_char_ind_parser+0x40>)
1000f2ec:	3008      	adds	r0, #8
1000f2ee:	4798      	blx	r3
1000f2f0:	bd70      	pop	{r4, r5, r6, pc}
1000f2f2:	46c0      	nop			; (mov r8, r8)
1000f2f4:	1000d92d 	.word	0x1000d92d
1000f2f8:	1001134f 	.word	0x1001134f

1000f2fc <gattc_disc_char_desc_ind_parser>:
1000f2fc:	b570      	push	{r4, r5, r6, lr}
1000f2fe:	1c15      	adds	r5, r2, #0
1000f300:	0a00      	lsrs	r0, r0, #8
1000f302:	8010      	strh	r0, [r2, #0]
1000f304:	784b      	ldrb	r3, [r1, #1]
1000f306:	780a      	ldrb	r2, [r1, #0]
1000f308:	021b      	lsls	r3, r3, #8
1000f30a:	4313      	orrs	r3, r2
1000f30c:	806b      	strh	r3, [r5, #2]
1000f30e:	788e      	ldrb	r6, [r1, #2]
1000f310:	4b05      	ldr	r3, [pc, #20]	; (1000f328 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f312:	1c30      	adds	r0, r6, #0
1000f314:	1c0c      	adds	r4, r1, #0
1000f316:	4798      	blx	r3
1000f318:	1c32      	adds	r2, r6, #0
1000f31a:	7128      	strb	r0, [r5, #4]
1000f31c:	1ce1      	adds	r1, r4, #3
1000f31e:	1d68      	adds	r0, r5, #5
1000f320:	4b02      	ldr	r3, [pc, #8]	; (1000f32c <gattc_disc_char_desc_ind_parser+0x30>)
1000f322:	4798      	blx	r3
1000f324:	bd70      	pop	{r4, r5, r6, pc}
1000f326:	46c0      	nop			; (mov r8, r8)
1000f328:	1000d92d 	.word	0x1000d92d
1000f32c:	1001134f 	.word	0x1001134f

1000f330 <gattc_event_ind_and_notification_parser>:
1000f330:	b510      	push	{r4, lr}
1000f332:	780c      	ldrb	r4, [r1, #0]
1000f334:	1c13      	adds	r3, r2, #0
1000f336:	2c12      	cmp	r4, #18
1000f338:	d10e      	bne.n	1000f358 <gattc_event_ind_and_notification_parser+0x28>
1000f33a:	0a00      	lsrs	r0, r0, #8
1000f33c:	8010      	strh	r0, [r2, #0]
1000f33e:	788a      	ldrb	r2, [r1, #2]
1000f340:	709a      	strb	r2, [r3, #2]
1000f342:	7948      	ldrb	r0, [r1, #5]
1000f344:	790c      	ldrb	r4, [r1, #4]
1000f346:	0200      	lsls	r0, r0, #8
1000f348:	4320      	orrs	r0, r4
1000f34a:	8098      	strh	r0, [r3, #4]
1000f34c:	3106      	adds	r1, #6
1000f34e:	1d98      	adds	r0, r3, #6
1000f350:	4b0b      	ldr	r3, [pc, #44]	; (1000f380 <gattc_event_ind_and_notification_parser+0x50>)
1000f352:	4798      	blx	r3
1000f354:	221b      	movs	r2, #27
1000f356:	e010      	b.n	1000f37a <gattc_event_ind_and_notification_parser+0x4a>
1000f358:	2200      	movs	r2, #0
1000f35a:	2c13      	cmp	r4, #19
1000f35c:	d10d      	bne.n	1000f37a <gattc_event_ind_and_notification_parser+0x4a>
1000f35e:	0a00      	lsrs	r0, r0, #8
1000f360:	8018      	strh	r0, [r3, #0]
1000f362:	788a      	ldrb	r2, [r1, #2]
1000f364:	709a      	strb	r2, [r3, #2]
1000f366:	7908      	ldrb	r0, [r1, #4]
1000f368:	78cc      	ldrb	r4, [r1, #3]
1000f36a:	0200      	lsls	r0, r0, #8
1000f36c:	4320      	orrs	r0, r4
1000f36e:	8098      	strh	r0, [r3, #4]
1000f370:	3106      	adds	r1, #6
1000f372:	1d98      	adds	r0, r3, #6
1000f374:	4b02      	ldr	r3, [pc, #8]	; (1000f380 <gattc_event_ind_and_notification_parser+0x50>)
1000f376:	4798      	blx	r3
1000f378:	221c      	movs	r2, #28
1000f37a:	1c10      	adds	r0, r2, #0
1000f37c:	bd10      	pop	{r4, pc}
1000f37e:	46c0      	nop			; (mov r8, r8)
1000f380:	1001134f 	.word	0x1001134f

1000f384 <gattc_complete_evt_handler>:
1000f384:	b500      	push	{lr}
1000f386:	0a00      	lsrs	r0, r0, #8
1000f388:	8010      	strh	r0, [r2, #0]
1000f38a:	7808      	ldrb	r0, [r1, #0]
1000f38c:	7090      	strb	r0, [r2, #2]
1000f38e:	784b      	ldrb	r3, [r1, #1]
1000f390:	3801      	subs	r0, #1
1000f392:	70d3      	strb	r3, [r2, #3]
1000f394:	2813      	cmp	r0, #19
1000f396:	d82c      	bhi.n	1000f3f2 <gattc_complete_evt_handler+0x6e>
1000f398:	f000 f914 	bl	1000f5c4 <__gnu_thumb1_case_uqi>
1000f39c:	0a0a0a0c 	.word	0x0a0a0a0c
1000f3a0:	210a0a0a 	.word	0x210a0a0a
1000f3a4:	111f2121 	.word	0x111f2121
1000f3a8:	2b111111 	.word	0x2b111111
1000f3ac:	2919132b 	.word	0x2919132b
1000f3b0:	2017      	movs	r0, #23
1000f3b2:	e01f      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3b4:	2024      	movs	r0, #36	; 0x24
1000f3b6:	2b00      	cmp	r3, #0
1000f3b8:	d11c      	bne.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3ba:	3017      	adds	r0, #23
1000f3bc:	e01a      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3be:	2025      	movs	r0, #37	; 0x25
1000f3c0:	e018      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3c2:	4a0d      	ldr	r2, [pc, #52]	; (1000f3f8 <gattc_complete_evt_handler+0x74>)
1000f3c4:	201d      	movs	r0, #29
1000f3c6:	6813      	ldr	r3, [r2, #0]
1000f3c8:	3b01      	subs	r3, #1
1000f3ca:	6013      	str	r3, [r2, #0]
1000f3cc:	e012      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3ce:	4a0a      	ldr	r2, [pc, #40]	; (1000f3f8 <gattc_complete_evt_handler+0x74>)
1000f3d0:	201e      	movs	r0, #30
1000f3d2:	6813      	ldr	r3, [r2, #0]
1000f3d4:	3b01      	subs	r3, #1
1000f3d6:	6013      	str	r3, [r2, #0]
1000f3d8:	e00c      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3da:	2019      	movs	r0, #25
1000f3dc:	e00a      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3de:	203b      	movs	r0, #59	; 0x3b
1000f3e0:	2b00      	cmp	r3, #0
1000f3e2:	d007      	beq.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3e4:	2182      	movs	r1, #130	; 0x82
1000f3e6:	0089      	lsls	r1, r1, #2
1000f3e8:	5453      	strb	r3, [r2, r1]
1000f3ea:	3823      	subs	r0, #35	; 0x23
1000f3ec:	e002      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3ee:	2021      	movs	r0, #33	; 0x21
1000f3f0:	e000      	b.n	1000f3f4 <gattc_complete_evt_handler+0x70>
1000f3f2:	2000      	movs	r0, #0
1000f3f4:	bd00      	pop	{pc}
1000f3f6:	46c0      	nop			; (mov r8, r8)
1000f3f8:	10014c4c 	.word	0x10014c4c

1000f3fc <gattc_event_mtu_changed_ind_parser>:
1000f3fc:	0a00      	lsrs	r0, r0, #8
1000f3fe:	8010      	strh	r0, [r2, #0]
1000f400:	784b      	ldrb	r3, [r1, #1]
1000f402:	7809      	ldrb	r1, [r1, #0]
1000f404:	021b      	lsls	r3, r3, #8
1000f406:	430b      	orrs	r3, r1
1000f408:	8053      	strh	r3, [r2, #2]
1000f40a:	4770      	bx	lr

1000f40c <gattc_read_ind_parser>:
1000f40c:	0a00      	lsrs	r0, r0, #8
1000f40e:	b508      	push	{r3, lr}
1000f410:	8010      	strh	r0, [r2, #0]
1000f412:	1c13      	adds	r3, r2, #0
1000f414:	2282      	movs	r2, #130	; 0x82
1000f416:	2000      	movs	r0, #0
1000f418:	0092      	lsls	r2, r2, #2
1000f41a:	5498      	strb	r0, [r3, r2]
1000f41c:	784a      	ldrb	r2, [r1, #1]
1000f41e:	7808      	ldrb	r0, [r1, #0]
1000f420:	0212      	lsls	r2, r2, #8
1000f422:	4302      	orrs	r2, r0
1000f424:	805a      	strh	r2, [r3, #2]
1000f426:	78ca      	ldrb	r2, [r1, #3]
1000f428:	7888      	ldrb	r0, [r1, #2]
1000f42a:	0212      	lsls	r2, r2, #8
1000f42c:	4302      	orrs	r2, r0
1000f42e:	80da      	strh	r2, [r3, #6]
1000f430:	794a      	ldrb	r2, [r1, #5]
1000f432:	7908      	ldrb	r0, [r1, #4]
1000f434:	0212      	lsls	r2, r2, #8
1000f436:	4302      	orrs	r2, r0
1000f438:	809a      	strh	r2, [r3, #4]
1000f43a:	3308      	adds	r3, #8
1000f43c:	1c18      	adds	r0, r3, #0
1000f43e:	3106      	adds	r1, #6
1000f440:	4b01      	ldr	r3, [pc, #4]	; (1000f448 <gattc_read_ind_parser+0x3c>)
1000f442:	4798      	blx	r3
1000f444:	bd08      	pop	{r3, pc}
1000f446:	46c0      	nop			; (mov r8, r8)
1000f448:	1001134f 	.word	0x1001134f

1000f44c <gattc_svc_changed_cfg_ind_parser>:
1000f44c:	0a00      	lsrs	r0, r0, #8
1000f44e:	8010      	strh	r0, [r2, #0]
1000f450:	784b      	ldrb	r3, [r1, #1]
1000f452:	7809      	ldrb	r1, [r1, #0]
1000f454:	021b      	lsls	r3, r3, #8
1000f456:	430b      	orrs	r3, r1
1000f458:	8053      	strh	r3, [r2, #2]
1000f45a:	4770      	bx	lr

1000f45c <init_gattc_task_module>:
1000f45c:	2300      	movs	r3, #0
1000f45e:	4a02      	ldr	r2, [pc, #8]	; (1000f468 <init_gattc_task_module+0xc>)
1000f460:	8013      	strh	r3, [r2, #0]
1000f462:	4a02      	ldr	r2, [pc, #8]	; (1000f46c <init_gattc_task_module+0x10>)
1000f464:	8013      	strh	r3, [r2, #0]
1000f466:	4770      	bx	lr
1000f468:	10014c46 	.word	0x10014c46
1000f46c:	10014c48 	.word	0x10014c48

1000f470 <gattm_att_set_value_req_handler>:
1000f470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f472:	466b      	mov	r3, sp
1000f474:	1dde      	adds	r6, r3, #7
1000f476:	2300      	movs	r3, #0
1000f478:	1c0d      	adds	r5, r1, #0
1000f47a:	210c      	movs	r1, #12
1000f47c:	270b      	movs	r7, #11
1000f47e:	4c17      	ldr	r4, [pc, #92]	; (1000f4dc <gattm_att_set_value_req_handler+0x6c>)
1000f480:	7033      	strb	r3, [r6, #0]
1000f482:	70e3      	strb	r3, [r4, #3]
1000f484:	4b16      	ldr	r3, [pc, #88]	; (1000f4e0 <gattm_att_set_value_req_handler+0x70>)
1000f486:	7021      	strb	r1, [r4, #0]
1000f488:	8819      	ldrh	r1, [r3, #0]
1000f48a:	881b      	ldrh	r3, [r3, #0]
1000f48c:	7220      	strb	r0, [r4, #8]
1000f48e:	0a1b      	lsrs	r3, r3, #8
1000f490:	7163      	strb	r3, [r4, #5]
1000f492:	0a00      	lsrs	r0, r0, #8
1000f494:	0a2b      	lsrs	r3, r5, #8
1000f496:	7121      	strb	r1, [r4, #4]
1000f498:	7260      	strb	r0, [r4, #9]
1000f49a:	1c11      	adds	r1, r2, #0
1000f49c:	72a5      	strb	r5, [r4, #10]
1000f49e:	1c2a      	adds	r2, r5, #0
1000f4a0:	72e3      	strb	r3, [r4, #11]
1000f4a2:	350c      	adds	r5, #12
1000f4a4:	4b0f      	ldr	r3, [pc, #60]	; (1000f4e4 <gattm_att_set_value_req_handler+0x74>)
1000f4a6:	4810      	ldr	r0, [pc, #64]	; (1000f4e8 <gattm_att_set_value_req_handler+0x78>)
1000f4a8:	7067      	strb	r7, [r4, #1]
1000f4aa:	70a7      	strb	r7, [r4, #2]
1000f4ac:	4798      	blx	r3
1000f4ae:	b2a9      	uxth	r1, r5
1000f4b0:	4b0e      	ldr	r3, [pc, #56]	; (1000f4ec <gattm_att_set_value_req_handler+0x7c>)
1000f4b2:	4d0f      	ldr	r5, [pc, #60]	; (1000f4f0 <gattm_att_set_value_req_handler+0x80>)
1000f4b4:	1c20      	adds	r0, r4, #0
1000f4b6:	802b      	strh	r3, [r5, #0]
1000f4b8:	1c0b      	adds	r3, r1, #0
1000f4ba:	3b08      	subs	r3, #8
1000f4bc:	71a3      	strb	r3, [r4, #6]
1000f4be:	121b      	asrs	r3, r3, #8
1000f4c0:	71e3      	strb	r3, [r4, #7]
1000f4c2:	4b0c      	ldr	r3, [pc, #48]	; (1000f4f4 <gattm_att_set_value_req_handler+0x84>)
1000f4c4:	80af      	strh	r7, [r5, #4]
1000f4c6:	4798      	blx	r3
1000f4c8:	1c30      	adds	r0, r6, #0
1000f4ca:	4b0b      	ldr	r3, [pc, #44]	; (1000f4f8 <gattm_att_set_value_req_handler+0x88>)
1000f4cc:	4798      	blx	r3
1000f4ce:	7833      	ldrb	r3, [r6, #0]
1000f4d0:	20e2      	movs	r0, #226	; 0xe2
1000f4d2:	2b00      	cmp	r3, #0
1000f4d4:	d101      	bne.n	1000f4da <gattm_att_set_value_req_handler+0x6a>
1000f4d6:	68ab      	ldr	r3, [r5, #8]
1000f4d8:	7898      	ldrb	r0, [r3, #2]
1000f4da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f4dc:	10015c60 	.word	0x10015c60
1000f4e0:	100158f0 	.word	0x100158f0
1000f4e4:	1001134f 	.word	0x1001134f
1000f4e8:	10015c6c 	.word	0x10015c6c
1000f4ec:	00000b0d 	.word	0x00000b0d
1000f4f0:	100158e4 	.word	0x100158e4
1000f4f4:	1000df75 	.word	0x1000df75
1000f4f8:	1000dfd9 	.word	0x1000dfd9

1000f4fc <gattm_att_get_value_req_handler>:
1000f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4fe:	b085      	sub	sp, #20
1000f500:	9201      	str	r2, [sp, #4]
1000f502:	220a      	movs	r2, #10
1000f504:	1c04      	adds	r4, r0, #0
1000f506:	481d      	ldr	r0, [pc, #116]	; (1000f57c <gattm_att_get_value_req_handler+0x80>)
1000f508:	ab02      	add	r3, sp, #8
1000f50a:	1dde      	adds	r6, r3, #7
1000f50c:	7002      	strb	r2, [r0, #0]
1000f50e:	2300      	movs	r3, #0
1000f510:	220b      	movs	r2, #11
1000f512:	4d1b      	ldr	r5, [pc, #108]	; (1000f580 <gattm_att_get_value_req_handler+0x84>)
1000f514:	1c0f      	adds	r7, r1, #0
1000f516:	8829      	ldrh	r1, [r5, #0]
1000f518:	882d      	ldrh	r5, [r5, #0]
1000f51a:	7101      	strb	r1, [r0, #4]
1000f51c:	0a2d      	lsrs	r5, r5, #8
1000f51e:	7145      	strb	r5, [r0, #5]
1000f520:	0a25      	lsrs	r5, r4, #8
1000f522:	7245      	strb	r5, [r0, #9]
1000f524:	4917      	ldr	r1, [pc, #92]	; (1000f584 <gattm_att_get_value_req_handler+0x88>)
1000f526:	4d18      	ldr	r5, [pc, #96]	; (1000f588 <gattm_att_get_value_req_handler+0x8c>)
1000f528:	7033      	strb	r3, [r6, #0]
1000f52a:	7042      	strb	r2, [r0, #1]
1000f52c:	7082      	strb	r2, [r0, #2]
1000f52e:	70c3      	strb	r3, [r0, #3]
1000f530:	8029      	strh	r1, [r5, #0]
1000f532:	80aa      	strh	r2, [r5, #4]
1000f534:	71c3      	strb	r3, [r0, #7]
1000f536:	3a09      	subs	r2, #9
1000f538:	210a      	movs	r1, #10
1000f53a:	4b14      	ldr	r3, [pc, #80]	; (1000f58c <gattm_att_get_value_req_handler+0x90>)
1000f53c:	7182      	strb	r2, [r0, #6]
1000f53e:	7204      	strb	r4, [r0, #8]
1000f540:	4798      	blx	r3
1000f542:	1c30      	adds	r0, r6, #0
1000f544:	4b12      	ldr	r3, [pc, #72]	; (1000f590 <gattm_att_get_value_req_handler+0x94>)
1000f546:	4798      	blx	r3
1000f548:	7833      	ldrb	r3, [r6, #0]
1000f54a:	20e2      	movs	r0, #226	; 0xe2
1000f54c:	2b00      	cmp	r3, #0
1000f54e:	d112      	bne.n	1000f576 <gattm_att_get_value_req_handler+0x7a>
1000f550:	68a9      	ldr	r1, [r5, #8]
1000f552:	9801      	ldr	r0, [sp, #4]
1000f554:	784d      	ldrb	r5, [r1, #1]
1000f556:	780b      	ldrb	r3, [r1, #0]
1000f558:	78ca      	ldrb	r2, [r1, #3]
1000f55a:	022d      	lsls	r5, r5, #8
1000f55c:	431d      	orrs	r5, r3
1000f55e:	788b      	ldrb	r3, [r1, #2]
1000f560:	0212      	lsls	r2, r2, #8
1000f562:	431a      	orrs	r2, r3
1000f564:	803a      	strh	r2, [r7, #0]
1000f566:	790e      	ldrb	r6, [r1, #4]
1000f568:	4b0a      	ldr	r3, [pc, #40]	; (1000f594 <gattm_att_get_value_req_handler+0x98>)
1000f56a:	3105      	adds	r1, #5
1000f56c:	4798      	blx	r3
1000f56e:	20e2      	movs	r0, #226	; 0xe2
1000f570:	42ac      	cmp	r4, r5
1000f572:	d100      	bne.n	1000f576 <gattm_att_get_value_req_handler+0x7a>
1000f574:	1c30      	adds	r0, r6, #0
1000f576:	b005      	add	sp, #20
1000f578:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f57a:	46c0      	nop			; (mov r8, r8)
1000f57c:	10015c60 	.word	0x10015c60
1000f580:	100158f0 	.word	0x100158f0
1000f584:	00000b0b 	.word	0x00000b0b
1000f588:	100158e4 	.word	0x100158e4
1000f58c:	1000df75 	.word	0x1000df75
1000f590:	1000dfd9 	.word	0x1000dfd9
1000f594:	1001134f 	.word	0x1001134f

1000f598 <htpt_enable_rsp_handler>:
1000f598:	780b      	ldrb	r3, [r1, #0]
1000f59a:	7013      	strb	r3, [r2, #0]
1000f59c:	784b      	ldrb	r3, [r1, #1]
1000f59e:	7053      	strb	r3, [r2, #1]
1000f5a0:	4770      	bx	lr

1000f5a2 <htpt_temp_send_rsp_handler>:
1000f5a2:	780b      	ldrb	r3, [r1, #0]
1000f5a4:	7013      	strb	r3, [r2, #0]
1000f5a6:	4770      	bx	lr

1000f5a8 <htpt_meas_intv_upd_rsp_handler>:
1000f5a8:	780b      	ldrb	r3, [r1, #0]
1000f5aa:	7013      	strb	r3, [r2, #0]
1000f5ac:	4770      	bx	lr

1000f5ae <htpt_meas_intv_chg_req_ind_handler>:
1000f5ae:	78cb      	ldrb	r3, [r1, #3]
1000f5b0:	7889      	ldrb	r1, [r1, #2]
1000f5b2:	021b      	lsls	r3, r3, #8
1000f5b4:	430b      	orrs	r3, r1
1000f5b6:	8013      	strh	r3, [r2, #0]
1000f5b8:	4770      	bx	lr

1000f5ba <htpt_cfg_indntf_ind_handler>:
1000f5ba:	780b      	ldrb	r3, [r1, #0]
1000f5bc:	7013      	strb	r3, [r2, #0]
1000f5be:	784b      	ldrb	r3, [r1, #1]
1000f5c0:	7053      	strb	r3, [r2, #1]
1000f5c2:	4770      	bx	lr

1000f5c4 <__gnu_thumb1_case_uqi>:
1000f5c4:	b402      	push	{r1}
1000f5c6:	4671      	mov	r1, lr
1000f5c8:	0849      	lsrs	r1, r1, #1
1000f5ca:	0049      	lsls	r1, r1, #1
1000f5cc:	5c09      	ldrb	r1, [r1, r0]
1000f5ce:	0049      	lsls	r1, r1, #1
1000f5d0:	448e      	add	lr, r1
1000f5d2:	bc02      	pop	{r1}
1000f5d4:	4770      	bx	lr
1000f5d6:	46c0      	nop			; (mov r8, r8)

1000f5d8 <__aeabi_uidiv>:
1000f5d8:	2200      	movs	r2, #0
1000f5da:	0843      	lsrs	r3, r0, #1
1000f5dc:	428b      	cmp	r3, r1
1000f5de:	d374      	bcc.n	1000f6ca <__aeabi_uidiv+0xf2>
1000f5e0:	0903      	lsrs	r3, r0, #4
1000f5e2:	428b      	cmp	r3, r1
1000f5e4:	d35f      	bcc.n	1000f6a6 <__aeabi_uidiv+0xce>
1000f5e6:	0a03      	lsrs	r3, r0, #8
1000f5e8:	428b      	cmp	r3, r1
1000f5ea:	d344      	bcc.n	1000f676 <__aeabi_uidiv+0x9e>
1000f5ec:	0b03      	lsrs	r3, r0, #12
1000f5ee:	428b      	cmp	r3, r1
1000f5f0:	d328      	bcc.n	1000f644 <__aeabi_uidiv+0x6c>
1000f5f2:	0c03      	lsrs	r3, r0, #16
1000f5f4:	428b      	cmp	r3, r1
1000f5f6:	d30d      	bcc.n	1000f614 <__aeabi_uidiv+0x3c>
1000f5f8:	22ff      	movs	r2, #255	; 0xff
1000f5fa:	0209      	lsls	r1, r1, #8
1000f5fc:	ba12      	rev	r2, r2
1000f5fe:	0c03      	lsrs	r3, r0, #16
1000f600:	428b      	cmp	r3, r1
1000f602:	d302      	bcc.n	1000f60a <__aeabi_uidiv+0x32>
1000f604:	1212      	asrs	r2, r2, #8
1000f606:	0209      	lsls	r1, r1, #8
1000f608:	d065      	beq.n	1000f6d6 <__aeabi_uidiv+0xfe>
1000f60a:	0b03      	lsrs	r3, r0, #12
1000f60c:	428b      	cmp	r3, r1
1000f60e:	d319      	bcc.n	1000f644 <__aeabi_uidiv+0x6c>
1000f610:	e000      	b.n	1000f614 <__aeabi_uidiv+0x3c>
1000f612:	0a09      	lsrs	r1, r1, #8
1000f614:	0bc3      	lsrs	r3, r0, #15
1000f616:	428b      	cmp	r3, r1
1000f618:	d301      	bcc.n	1000f61e <__aeabi_uidiv+0x46>
1000f61a:	03cb      	lsls	r3, r1, #15
1000f61c:	1ac0      	subs	r0, r0, r3
1000f61e:	4152      	adcs	r2, r2
1000f620:	0b83      	lsrs	r3, r0, #14
1000f622:	428b      	cmp	r3, r1
1000f624:	d301      	bcc.n	1000f62a <__aeabi_uidiv+0x52>
1000f626:	038b      	lsls	r3, r1, #14
1000f628:	1ac0      	subs	r0, r0, r3
1000f62a:	4152      	adcs	r2, r2
1000f62c:	0b43      	lsrs	r3, r0, #13
1000f62e:	428b      	cmp	r3, r1
1000f630:	d301      	bcc.n	1000f636 <__aeabi_uidiv+0x5e>
1000f632:	034b      	lsls	r3, r1, #13
1000f634:	1ac0      	subs	r0, r0, r3
1000f636:	4152      	adcs	r2, r2
1000f638:	0b03      	lsrs	r3, r0, #12
1000f63a:	428b      	cmp	r3, r1
1000f63c:	d301      	bcc.n	1000f642 <__aeabi_uidiv+0x6a>
1000f63e:	030b      	lsls	r3, r1, #12
1000f640:	1ac0      	subs	r0, r0, r3
1000f642:	4152      	adcs	r2, r2
1000f644:	0ac3      	lsrs	r3, r0, #11
1000f646:	428b      	cmp	r3, r1
1000f648:	d301      	bcc.n	1000f64e <__aeabi_uidiv+0x76>
1000f64a:	02cb      	lsls	r3, r1, #11
1000f64c:	1ac0      	subs	r0, r0, r3
1000f64e:	4152      	adcs	r2, r2
1000f650:	0a83      	lsrs	r3, r0, #10
1000f652:	428b      	cmp	r3, r1
1000f654:	d301      	bcc.n	1000f65a <__aeabi_uidiv+0x82>
1000f656:	028b      	lsls	r3, r1, #10
1000f658:	1ac0      	subs	r0, r0, r3
1000f65a:	4152      	adcs	r2, r2
1000f65c:	0a43      	lsrs	r3, r0, #9
1000f65e:	428b      	cmp	r3, r1
1000f660:	d301      	bcc.n	1000f666 <__aeabi_uidiv+0x8e>
1000f662:	024b      	lsls	r3, r1, #9
1000f664:	1ac0      	subs	r0, r0, r3
1000f666:	4152      	adcs	r2, r2
1000f668:	0a03      	lsrs	r3, r0, #8
1000f66a:	428b      	cmp	r3, r1
1000f66c:	d301      	bcc.n	1000f672 <__aeabi_uidiv+0x9a>
1000f66e:	020b      	lsls	r3, r1, #8
1000f670:	1ac0      	subs	r0, r0, r3
1000f672:	4152      	adcs	r2, r2
1000f674:	d2cd      	bcs.n	1000f612 <__aeabi_uidiv+0x3a>
1000f676:	09c3      	lsrs	r3, r0, #7
1000f678:	428b      	cmp	r3, r1
1000f67a:	d301      	bcc.n	1000f680 <__aeabi_uidiv+0xa8>
1000f67c:	01cb      	lsls	r3, r1, #7
1000f67e:	1ac0      	subs	r0, r0, r3
1000f680:	4152      	adcs	r2, r2
1000f682:	0983      	lsrs	r3, r0, #6
1000f684:	428b      	cmp	r3, r1
1000f686:	d301      	bcc.n	1000f68c <__aeabi_uidiv+0xb4>
1000f688:	018b      	lsls	r3, r1, #6
1000f68a:	1ac0      	subs	r0, r0, r3
1000f68c:	4152      	adcs	r2, r2
1000f68e:	0943      	lsrs	r3, r0, #5
1000f690:	428b      	cmp	r3, r1
1000f692:	d301      	bcc.n	1000f698 <__aeabi_uidiv+0xc0>
1000f694:	014b      	lsls	r3, r1, #5
1000f696:	1ac0      	subs	r0, r0, r3
1000f698:	4152      	adcs	r2, r2
1000f69a:	0903      	lsrs	r3, r0, #4
1000f69c:	428b      	cmp	r3, r1
1000f69e:	d301      	bcc.n	1000f6a4 <__aeabi_uidiv+0xcc>
1000f6a0:	010b      	lsls	r3, r1, #4
1000f6a2:	1ac0      	subs	r0, r0, r3
1000f6a4:	4152      	adcs	r2, r2
1000f6a6:	08c3      	lsrs	r3, r0, #3
1000f6a8:	428b      	cmp	r3, r1
1000f6aa:	d301      	bcc.n	1000f6b0 <__aeabi_uidiv+0xd8>
1000f6ac:	00cb      	lsls	r3, r1, #3
1000f6ae:	1ac0      	subs	r0, r0, r3
1000f6b0:	4152      	adcs	r2, r2
1000f6b2:	0883      	lsrs	r3, r0, #2
1000f6b4:	428b      	cmp	r3, r1
1000f6b6:	d301      	bcc.n	1000f6bc <__aeabi_uidiv+0xe4>
1000f6b8:	008b      	lsls	r3, r1, #2
1000f6ba:	1ac0      	subs	r0, r0, r3
1000f6bc:	4152      	adcs	r2, r2
1000f6be:	0843      	lsrs	r3, r0, #1
1000f6c0:	428b      	cmp	r3, r1
1000f6c2:	d301      	bcc.n	1000f6c8 <__aeabi_uidiv+0xf0>
1000f6c4:	004b      	lsls	r3, r1, #1
1000f6c6:	1ac0      	subs	r0, r0, r3
1000f6c8:	4152      	adcs	r2, r2
1000f6ca:	1a41      	subs	r1, r0, r1
1000f6cc:	d200      	bcs.n	1000f6d0 <__aeabi_uidiv+0xf8>
1000f6ce:	4601      	mov	r1, r0
1000f6d0:	4152      	adcs	r2, r2
1000f6d2:	4610      	mov	r0, r2
1000f6d4:	4770      	bx	lr
1000f6d6:	e7ff      	b.n	1000f6d8 <__aeabi_uidiv+0x100>
1000f6d8:	b501      	push	{r0, lr}
1000f6da:	2000      	movs	r0, #0
1000f6dc:	f000 f8f0 	bl	1000f8c0 <__aeabi_idiv0>
1000f6e0:	bd02      	pop	{r1, pc}
1000f6e2:	46c0      	nop			; (mov r8, r8)

1000f6e4 <__aeabi_uidivmod>:
1000f6e4:	2900      	cmp	r1, #0
1000f6e6:	d0f7      	beq.n	1000f6d8 <__aeabi_uidiv+0x100>
1000f6e8:	e776      	b.n	1000f5d8 <__aeabi_uidiv>
1000f6ea:	4770      	bx	lr

1000f6ec <__aeabi_idiv>:
1000f6ec:	4603      	mov	r3, r0
1000f6ee:	430b      	orrs	r3, r1
1000f6f0:	d47f      	bmi.n	1000f7f2 <__aeabi_idiv+0x106>
1000f6f2:	2200      	movs	r2, #0
1000f6f4:	0843      	lsrs	r3, r0, #1
1000f6f6:	428b      	cmp	r3, r1
1000f6f8:	d374      	bcc.n	1000f7e4 <__aeabi_idiv+0xf8>
1000f6fa:	0903      	lsrs	r3, r0, #4
1000f6fc:	428b      	cmp	r3, r1
1000f6fe:	d35f      	bcc.n	1000f7c0 <__aeabi_idiv+0xd4>
1000f700:	0a03      	lsrs	r3, r0, #8
1000f702:	428b      	cmp	r3, r1
1000f704:	d344      	bcc.n	1000f790 <__aeabi_idiv+0xa4>
1000f706:	0b03      	lsrs	r3, r0, #12
1000f708:	428b      	cmp	r3, r1
1000f70a:	d328      	bcc.n	1000f75e <__aeabi_idiv+0x72>
1000f70c:	0c03      	lsrs	r3, r0, #16
1000f70e:	428b      	cmp	r3, r1
1000f710:	d30d      	bcc.n	1000f72e <__aeabi_idiv+0x42>
1000f712:	22ff      	movs	r2, #255	; 0xff
1000f714:	0209      	lsls	r1, r1, #8
1000f716:	ba12      	rev	r2, r2
1000f718:	0c03      	lsrs	r3, r0, #16
1000f71a:	428b      	cmp	r3, r1
1000f71c:	d302      	bcc.n	1000f724 <__aeabi_idiv+0x38>
1000f71e:	1212      	asrs	r2, r2, #8
1000f720:	0209      	lsls	r1, r1, #8
1000f722:	d065      	beq.n	1000f7f0 <__aeabi_idiv+0x104>
1000f724:	0b03      	lsrs	r3, r0, #12
1000f726:	428b      	cmp	r3, r1
1000f728:	d319      	bcc.n	1000f75e <__aeabi_idiv+0x72>
1000f72a:	e000      	b.n	1000f72e <__aeabi_idiv+0x42>
1000f72c:	0a09      	lsrs	r1, r1, #8
1000f72e:	0bc3      	lsrs	r3, r0, #15
1000f730:	428b      	cmp	r3, r1
1000f732:	d301      	bcc.n	1000f738 <__aeabi_idiv+0x4c>
1000f734:	03cb      	lsls	r3, r1, #15
1000f736:	1ac0      	subs	r0, r0, r3
1000f738:	4152      	adcs	r2, r2
1000f73a:	0b83      	lsrs	r3, r0, #14
1000f73c:	428b      	cmp	r3, r1
1000f73e:	d301      	bcc.n	1000f744 <__aeabi_idiv+0x58>
1000f740:	038b      	lsls	r3, r1, #14
1000f742:	1ac0      	subs	r0, r0, r3
1000f744:	4152      	adcs	r2, r2
1000f746:	0b43      	lsrs	r3, r0, #13
1000f748:	428b      	cmp	r3, r1
1000f74a:	d301      	bcc.n	1000f750 <__aeabi_idiv+0x64>
1000f74c:	034b      	lsls	r3, r1, #13
1000f74e:	1ac0      	subs	r0, r0, r3
1000f750:	4152      	adcs	r2, r2
1000f752:	0b03      	lsrs	r3, r0, #12
1000f754:	428b      	cmp	r3, r1
1000f756:	d301      	bcc.n	1000f75c <__aeabi_idiv+0x70>
1000f758:	030b      	lsls	r3, r1, #12
1000f75a:	1ac0      	subs	r0, r0, r3
1000f75c:	4152      	adcs	r2, r2
1000f75e:	0ac3      	lsrs	r3, r0, #11
1000f760:	428b      	cmp	r3, r1
1000f762:	d301      	bcc.n	1000f768 <__aeabi_idiv+0x7c>
1000f764:	02cb      	lsls	r3, r1, #11
1000f766:	1ac0      	subs	r0, r0, r3
1000f768:	4152      	adcs	r2, r2
1000f76a:	0a83      	lsrs	r3, r0, #10
1000f76c:	428b      	cmp	r3, r1
1000f76e:	d301      	bcc.n	1000f774 <__aeabi_idiv+0x88>
1000f770:	028b      	lsls	r3, r1, #10
1000f772:	1ac0      	subs	r0, r0, r3
1000f774:	4152      	adcs	r2, r2
1000f776:	0a43      	lsrs	r3, r0, #9
1000f778:	428b      	cmp	r3, r1
1000f77a:	d301      	bcc.n	1000f780 <__aeabi_idiv+0x94>
1000f77c:	024b      	lsls	r3, r1, #9
1000f77e:	1ac0      	subs	r0, r0, r3
1000f780:	4152      	adcs	r2, r2
1000f782:	0a03      	lsrs	r3, r0, #8
1000f784:	428b      	cmp	r3, r1
1000f786:	d301      	bcc.n	1000f78c <__aeabi_idiv+0xa0>
1000f788:	020b      	lsls	r3, r1, #8
1000f78a:	1ac0      	subs	r0, r0, r3
1000f78c:	4152      	adcs	r2, r2
1000f78e:	d2cd      	bcs.n	1000f72c <__aeabi_idiv+0x40>
1000f790:	09c3      	lsrs	r3, r0, #7
1000f792:	428b      	cmp	r3, r1
1000f794:	d301      	bcc.n	1000f79a <__aeabi_idiv+0xae>
1000f796:	01cb      	lsls	r3, r1, #7
1000f798:	1ac0      	subs	r0, r0, r3
1000f79a:	4152      	adcs	r2, r2
1000f79c:	0983      	lsrs	r3, r0, #6
1000f79e:	428b      	cmp	r3, r1
1000f7a0:	d301      	bcc.n	1000f7a6 <__aeabi_idiv+0xba>
1000f7a2:	018b      	lsls	r3, r1, #6
1000f7a4:	1ac0      	subs	r0, r0, r3
1000f7a6:	4152      	adcs	r2, r2
1000f7a8:	0943      	lsrs	r3, r0, #5
1000f7aa:	428b      	cmp	r3, r1
1000f7ac:	d301      	bcc.n	1000f7b2 <__aeabi_idiv+0xc6>
1000f7ae:	014b      	lsls	r3, r1, #5
1000f7b0:	1ac0      	subs	r0, r0, r3
1000f7b2:	4152      	adcs	r2, r2
1000f7b4:	0903      	lsrs	r3, r0, #4
1000f7b6:	428b      	cmp	r3, r1
1000f7b8:	d301      	bcc.n	1000f7be <__aeabi_idiv+0xd2>
1000f7ba:	010b      	lsls	r3, r1, #4
1000f7bc:	1ac0      	subs	r0, r0, r3
1000f7be:	4152      	adcs	r2, r2
1000f7c0:	08c3      	lsrs	r3, r0, #3
1000f7c2:	428b      	cmp	r3, r1
1000f7c4:	d301      	bcc.n	1000f7ca <__aeabi_idiv+0xde>
1000f7c6:	00cb      	lsls	r3, r1, #3
1000f7c8:	1ac0      	subs	r0, r0, r3
1000f7ca:	4152      	adcs	r2, r2
1000f7cc:	0883      	lsrs	r3, r0, #2
1000f7ce:	428b      	cmp	r3, r1
1000f7d0:	d301      	bcc.n	1000f7d6 <__aeabi_idiv+0xea>
1000f7d2:	008b      	lsls	r3, r1, #2
1000f7d4:	1ac0      	subs	r0, r0, r3
1000f7d6:	4152      	adcs	r2, r2
1000f7d8:	0843      	lsrs	r3, r0, #1
1000f7da:	428b      	cmp	r3, r1
1000f7dc:	d301      	bcc.n	1000f7e2 <__aeabi_idiv+0xf6>
1000f7de:	004b      	lsls	r3, r1, #1
1000f7e0:	1ac0      	subs	r0, r0, r3
1000f7e2:	4152      	adcs	r2, r2
1000f7e4:	1a41      	subs	r1, r0, r1
1000f7e6:	d200      	bcs.n	1000f7ea <__aeabi_idiv+0xfe>
1000f7e8:	4601      	mov	r1, r0
1000f7ea:	4152      	adcs	r2, r2
1000f7ec:	4610      	mov	r0, r2
1000f7ee:	4770      	bx	lr
1000f7f0:	e05d      	b.n	1000f8ae <__aeabi_idiv+0x1c2>
1000f7f2:	0fca      	lsrs	r2, r1, #31
1000f7f4:	d000      	beq.n	1000f7f8 <__aeabi_idiv+0x10c>
1000f7f6:	4249      	negs	r1, r1
1000f7f8:	1003      	asrs	r3, r0, #32
1000f7fa:	d300      	bcc.n	1000f7fe <__aeabi_idiv+0x112>
1000f7fc:	4240      	negs	r0, r0
1000f7fe:	4053      	eors	r3, r2
1000f800:	2200      	movs	r2, #0
1000f802:	469c      	mov	ip, r3
1000f804:	0903      	lsrs	r3, r0, #4
1000f806:	428b      	cmp	r3, r1
1000f808:	d32d      	bcc.n	1000f866 <__aeabi_idiv+0x17a>
1000f80a:	0a03      	lsrs	r3, r0, #8
1000f80c:	428b      	cmp	r3, r1
1000f80e:	d312      	bcc.n	1000f836 <__aeabi_idiv+0x14a>
1000f810:	22fc      	movs	r2, #252	; 0xfc
1000f812:	0189      	lsls	r1, r1, #6
1000f814:	ba12      	rev	r2, r2
1000f816:	0a03      	lsrs	r3, r0, #8
1000f818:	428b      	cmp	r3, r1
1000f81a:	d30c      	bcc.n	1000f836 <__aeabi_idiv+0x14a>
1000f81c:	0189      	lsls	r1, r1, #6
1000f81e:	1192      	asrs	r2, r2, #6
1000f820:	428b      	cmp	r3, r1
1000f822:	d308      	bcc.n	1000f836 <__aeabi_idiv+0x14a>
1000f824:	0189      	lsls	r1, r1, #6
1000f826:	1192      	asrs	r2, r2, #6
1000f828:	428b      	cmp	r3, r1
1000f82a:	d304      	bcc.n	1000f836 <__aeabi_idiv+0x14a>
1000f82c:	0189      	lsls	r1, r1, #6
1000f82e:	d03a      	beq.n	1000f8a6 <__aeabi_idiv+0x1ba>
1000f830:	1192      	asrs	r2, r2, #6
1000f832:	e000      	b.n	1000f836 <__aeabi_idiv+0x14a>
1000f834:	0989      	lsrs	r1, r1, #6
1000f836:	09c3      	lsrs	r3, r0, #7
1000f838:	428b      	cmp	r3, r1
1000f83a:	d301      	bcc.n	1000f840 <__aeabi_idiv+0x154>
1000f83c:	01cb      	lsls	r3, r1, #7
1000f83e:	1ac0      	subs	r0, r0, r3
1000f840:	4152      	adcs	r2, r2
1000f842:	0983      	lsrs	r3, r0, #6
1000f844:	428b      	cmp	r3, r1
1000f846:	d301      	bcc.n	1000f84c <__aeabi_idiv+0x160>
1000f848:	018b      	lsls	r3, r1, #6
1000f84a:	1ac0      	subs	r0, r0, r3
1000f84c:	4152      	adcs	r2, r2
1000f84e:	0943      	lsrs	r3, r0, #5
1000f850:	428b      	cmp	r3, r1
1000f852:	d301      	bcc.n	1000f858 <__aeabi_idiv+0x16c>
1000f854:	014b      	lsls	r3, r1, #5
1000f856:	1ac0      	subs	r0, r0, r3
1000f858:	4152      	adcs	r2, r2
1000f85a:	0903      	lsrs	r3, r0, #4
1000f85c:	428b      	cmp	r3, r1
1000f85e:	d301      	bcc.n	1000f864 <__aeabi_idiv+0x178>
1000f860:	010b      	lsls	r3, r1, #4
1000f862:	1ac0      	subs	r0, r0, r3
1000f864:	4152      	adcs	r2, r2
1000f866:	08c3      	lsrs	r3, r0, #3
1000f868:	428b      	cmp	r3, r1
1000f86a:	d301      	bcc.n	1000f870 <__aeabi_idiv+0x184>
1000f86c:	00cb      	lsls	r3, r1, #3
1000f86e:	1ac0      	subs	r0, r0, r3
1000f870:	4152      	adcs	r2, r2
1000f872:	0883      	lsrs	r3, r0, #2
1000f874:	428b      	cmp	r3, r1
1000f876:	d301      	bcc.n	1000f87c <__aeabi_idiv+0x190>
1000f878:	008b      	lsls	r3, r1, #2
1000f87a:	1ac0      	subs	r0, r0, r3
1000f87c:	4152      	adcs	r2, r2
1000f87e:	d2d9      	bcs.n	1000f834 <__aeabi_idiv+0x148>
1000f880:	0843      	lsrs	r3, r0, #1
1000f882:	428b      	cmp	r3, r1
1000f884:	d301      	bcc.n	1000f88a <__aeabi_idiv+0x19e>
1000f886:	004b      	lsls	r3, r1, #1
1000f888:	1ac0      	subs	r0, r0, r3
1000f88a:	4152      	adcs	r2, r2
1000f88c:	1a41      	subs	r1, r0, r1
1000f88e:	d200      	bcs.n	1000f892 <__aeabi_idiv+0x1a6>
1000f890:	4601      	mov	r1, r0
1000f892:	4663      	mov	r3, ip
1000f894:	4152      	adcs	r2, r2
1000f896:	105b      	asrs	r3, r3, #1
1000f898:	4610      	mov	r0, r2
1000f89a:	d301      	bcc.n	1000f8a0 <__aeabi_idiv+0x1b4>
1000f89c:	4240      	negs	r0, r0
1000f89e:	2b00      	cmp	r3, #0
1000f8a0:	d500      	bpl.n	1000f8a4 <__aeabi_idiv+0x1b8>
1000f8a2:	4249      	negs	r1, r1
1000f8a4:	4770      	bx	lr
1000f8a6:	4663      	mov	r3, ip
1000f8a8:	105b      	asrs	r3, r3, #1
1000f8aa:	d300      	bcc.n	1000f8ae <__aeabi_idiv+0x1c2>
1000f8ac:	4240      	negs	r0, r0
1000f8ae:	b501      	push	{r0, lr}
1000f8b0:	2000      	movs	r0, #0
1000f8b2:	f000 f805 	bl	1000f8c0 <__aeabi_idiv0>
1000f8b6:	bd02      	pop	{r1, pc}

1000f8b8 <__aeabi_idivmod>:
1000f8b8:	2900      	cmp	r1, #0
1000f8ba:	d0f8      	beq.n	1000f8ae <__aeabi_idiv+0x1c2>
1000f8bc:	e716      	b.n	1000f6ec <__aeabi_idiv>
1000f8be:	4770      	bx	lr

1000f8c0 <__aeabi_idiv0>:
1000f8c0:	4770      	bx	lr
1000f8c2:	46c0      	nop			; (mov r8, r8)

1000f8c4 <__aeabi_cdrcmple>:
1000f8c4:	4684      	mov	ip, r0
1000f8c6:	1c10      	adds	r0, r2, #0
1000f8c8:	4662      	mov	r2, ip
1000f8ca:	468c      	mov	ip, r1
1000f8cc:	1c19      	adds	r1, r3, #0
1000f8ce:	4663      	mov	r3, ip
1000f8d0:	e000      	b.n	1000f8d4 <__aeabi_cdcmpeq>
1000f8d2:	46c0      	nop			; (mov r8, r8)

1000f8d4 <__aeabi_cdcmpeq>:
1000f8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f8d6:	f000 fe37 	bl	10010548 <__ledf2>
1000f8da:	2800      	cmp	r0, #0
1000f8dc:	d401      	bmi.n	1000f8e2 <__aeabi_cdcmpeq+0xe>
1000f8de:	2100      	movs	r1, #0
1000f8e0:	42c8      	cmn	r0, r1
1000f8e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f8e4 <__aeabi_dcmpeq>:
1000f8e4:	b510      	push	{r4, lr}
1000f8e6:	f000 fd8b 	bl	10010400 <__eqdf2>
1000f8ea:	4240      	negs	r0, r0
1000f8ec:	3001      	adds	r0, #1
1000f8ee:	bd10      	pop	{r4, pc}

1000f8f0 <__aeabi_dcmplt>:
1000f8f0:	b510      	push	{r4, lr}
1000f8f2:	f000 fe29 	bl	10010548 <__ledf2>
1000f8f6:	2800      	cmp	r0, #0
1000f8f8:	db01      	blt.n	1000f8fe <__aeabi_dcmplt+0xe>
1000f8fa:	2000      	movs	r0, #0
1000f8fc:	bd10      	pop	{r4, pc}
1000f8fe:	2001      	movs	r0, #1
1000f900:	bd10      	pop	{r4, pc}
1000f902:	46c0      	nop			; (mov r8, r8)

1000f904 <__aeabi_dcmple>:
1000f904:	b510      	push	{r4, lr}
1000f906:	f000 fe1f 	bl	10010548 <__ledf2>
1000f90a:	2800      	cmp	r0, #0
1000f90c:	dd01      	ble.n	1000f912 <__aeabi_dcmple+0xe>
1000f90e:	2000      	movs	r0, #0
1000f910:	bd10      	pop	{r4, pc}
1000f912:	2001      	movs	r0, #1
1000f914:	bd10      	pop	{r4, pc}
1000f916:	46c0      	nop			; (mov r8, r8)

1000f918 <__aeabi_dcmpgt>:
1000f918:	b510      	push	{r4, lr}
1000f91a:	f000 fdb1 	bl	10010480 <__gedf2>
1000f91e:	2800      	cmp	r0, #0
1000f920:	dc01      	bgt.n	1000f926 <__aeabi_dcmpgt+0xe>
1000f922:	2000      	movs	r0, #0
1000f924:	bd10      	pop	{r4, pc}
1000f926:	2001      	movs	r0, #1
1000f928:	bd10      	pop	{r4, pc}
1000f92a:	46c0      	nop			; (mov r8, r8)

1000f92c <__aeabi_dcmpge>:
1000f92c:	b510      	push	{r4, lr}
1000f92e:	f000 fda7 	bl	10010480 <__gedf2>
1000f932:	2800      	cmp	r0, #0
1000f934:	da01      	bge.n	1000f93a <__aeabi_dcmpge+0xe>
1000f936:	2000      	movs	r0, #0
1000f938:	bd10      	pop	{r4, pc}
1000f93a:	2001      	movs	r0, #1
1000f93c:	bd10      	pop	{r4, pc}
1000f93e:	46c0      	nop			; (mov r8, r8)

1000f940 <__aeabi_cfrcmple>:
1000f940:	4684      	mov	ip, r0
1000f942:	1c08      	adds	r0, r1, #0
1000f944:	4661      	mov	r1, ip
1000f946:	e7ff      	b.n	1000f948 <__aeabi_cfcmpeq>

1000f948 <__aeabi_cfcmpeq>:
1000f948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f94a:	f000 fa1b 	bl	1000fd84 <__lesf2>
1000f94e:	2800      	cmp	r0, #0
1000f950:	d401      	bmi.n	1000f956 <__aeabi_cfcmpeq+0xe>
1000f952:	2100      	movs	r1, #0
1000f954:	42c8      	cmn	r0, r1
1000f956:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f958 <__aeabi_fcmpeq>:
1000f958:	b510      	push	{r4, lr}
1000f95a:	f000 f9a7 	bl	1000fcac <__eqsf2>
1000f95e:	4240      	negs	r0, r0
1000f960:	3001      	adds	r0, #1
1000f962:	bd10      	pop	{r4, pc}

1000f964 <__aeabi_fcmplt>:
1000f964:	b510      	push	{r4, lr}
1000f966:	f000 fa0d 	bl	1000fd84 <__lesf2>
1000f96a:	2800      	cmp	r0, #0
1000f96c:	db01      	blt.n	1000f972 <__aeabi_fcmplt+0xe>
1000f96e:	2000      	movs	r0, #0
1000f970:	bd10      	pop	{r4, pc}
1000f972:	2001      	movs	r0, #1
1000f974:	bd10      	pop	{r4, pc}
1000f976:	46c0      	nop			; (mov r8, r8)

1000f978 <__aeabi_fcmple>:
1000f978:	b510      	push	{r4, lr}
1000f97a:	f000 fa03 	bl	1000fd84 <__lesf2>
1000f97e:	2800      	cmp	r0, #0
1000f980:	dd01      	ble.n	1000f986 <__aeabi_fcmple+0xe>
1000f982:	2000      	movs	r0, #0
1000f984:	bd10      	pop	{r4, pc}
1000f986:	2001      	movs	r0, #1
1000f988:	bd10      	pop	{r4, pc}
1000f98a:	46c0      	nop			; (mov r8, r8)

1000f98c <__aeabi_fcmpgt>:
1000f98c:	b510      	push	{r4, lr}
1000f98e:	f000 f9b5 	bl	1000fcfc <__gesf2>
1000f992:	2800      	cmp	r0, #0
1000f994:	dc01      	bgt.n	1000f99a <__aeabi_fcmpgt+0xe>
1000f996:	2000      	movs	r0, #0
1000f998:	bd10      	pop	{r4, pc}
1000f99a:	2001      	movs	r0, #1
1000f99c:	bd10      	pop	{r4, pc}
1000f99e:	46c0      	nop			; (mov r8, r8)

1000f9a0 <__aeabi_fcmpge>:
1000f9a0:	b510      	push	{r4, lr}
1000f9a2:	f000 f9ab 	bl	1000fcfc <__gesf2>
1000f9a6:	2800      	cmp	r0, #0
1000f9a8:	da01      	bge.n	1000f9ae <__aeabi_fcmpge+0xe>
1000f9aa:	2000      	movs	r0, #0
1000f9ac:	bd10      	pop	{r4, pc}
1000f9ae:	2001      	movs	r0, #1
1000f9b0:	bd10      	pop	{r4, pc}
1000f9b2:	46c0      	nop			; (mov r8, r8)

1000f9b4 <__aeabi_lmul>:
1000f9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9b6:	464f      	mov	r7, r9
1000f9b8:	4646      	mov	r6, r8
1000f9ba:	b4c0      	push	{r6, r7}
1000f9bc:	0416      	lsls	r6, r2, #16
1000f9be:	0c36      	lsrs	r6, r6, #16
1000f9c0:	4699      	mov	r9, r3
1000f9c2:	0033      	movs	r3, r6
1000f9c4:	0405      	lsls	r5, r0, #16
1000f9c6:	0c2c      	lsrs	r4, r5, #16
1000f9c8:	0c07      	lsrs	r7, r0, #16
1000f9ca:	0c15      	lsrs	r5, r2, #16
1000f9cc:	4363      	muls	r3, r4
1000f9ce:	437e      	muls	r6, r7
1000f9d0:	436f      	muls	r7, r5
1000f9d2:	4365      	muls	r5, r4
1000f9d4:	0c1c      	lsrs	r4, r3, #16
1000f9d6:	19ad      	adds	r5, r5, r6
1000f9d8:	1964      	adds	r4, r4, r5
1000f9da:	469c      	mov	ip, r3
1000f9dc:	42a6      	cmp	r6, r4
1000f9de:	d903      	bls.n	1000f9e8 <__aeabi_lmul+0x34>
1000f9e0:	2380      	movs	r3, #128	; 0x80
1000f9e2:	025b      	lsls	r3, r3, #9
1000f9e4:	4698      	mov	r8, r3
1000f9e6:	4447      	add	r7, r8
1000f9e8:	4663      	mov	r3, ip
1000f9ea:	0c25      	lsrs	r5, r4, #16
1000f9ec:	19ef      	adds	r7, r5, r7
1000f9ee:	041d      	lsls	r5, r3, #16
1000f9f0:	464b      	mov	r3, r9
1000f9f2:	434a      	muls	r2, r1
1000f9f4:	4343      	muls	r3, r0
1000f9f6:	0c2d      	lsrs	r5, r5, #16
1000f9f8:	0424      	lsls	r4, r4, #16
1000f9fa:	1964      	adds	r4, r4, r5
1000f9fc:	1899      	adds	r1, r3, r2
1000f9fe:	19c9      	adds	r1, r1, r7
1000fa00:	0020      	movs	r0, r4
1000fa02:	bc0c      	pop	{r2, r3}
1000fa04:	4690      	mov	r8, r2
1000fa06:	4699      	mov	r9, r3
1000fa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa0a:	46c0      	nop			; (mov r8, r8)

1000fa0c <__aeabi_f2uiz>:
1000fa0c:	219e      	movs	r1, #158	; 0x9e
1000fa0e:	b510      	push	{r4, lr}
1000fa10:	05c9      	lsls	r1, r1, #23
1000fa12:	1c04      	adds	r4, r0, #0
1000fa14:	f7ff ffc4 	bl	1000f9a0 <__aeabi_fcmpge>
1000fa18:	2800      	cmp	r0, #0
1000fa1a:	d103      	bne.n	1000fa24 <__aeabi_f2uiz+0x18>
1000fa1c:	1c20      	adds	r0, r4, #0
1000fa1e:	f000 fc8f 	bl	10010340 <__aeabi_f2iz>
1000fa22:	bd10      	pop	{r4, pc}
1000fa24:	219e      	movs	r1, #158	; 0x9e
1000fa26:	1c20      	adds	r0, r4, #0
1000fa28:	05c9      	lsls	r1, r1, #23
1000fa2a:	f000 fb03 	bl	10010034 <__aeabi_fsub>
1000fa2e:	f000 fc87 	bl	10010340 <__aeabi_f2iz>
1000fa32:	2380      	movs	r3, #128	; 0x80
1000fa34:	061b      	lsls	r3, r3, #24
1000fa36:	469c      	mov	ip, r3
1000fa38:	4460      	add	r0, ip
1000fa3a:	e7f2      	b.n	1000fa22 <__aeabi_f2uiz+0x16>

1000fa3c <__aeabi_d2uiz>:
1000fa3c:	b570      	push	{r4, r5, r6, lr}
1000fa3e:	2200      	movs	r2, #0
1000fa40:	4b0c      	ldr	r3, [pc, #48]	; (1000fa74 <__aeabi_d2uiz+0x38>)
1000fa42:	0004      	movs	r4, r0
1000fa44:	000d      	movs	r5, r1
1000fa46:	f7ff ff71 	bl	1000f92c <__aeabi_dcmpge>
1000fa4a:	2800      	cmp	r0, #0
1000fa4c:	d104      	bne.n	1000fa58 <__aeabi_d2uiz+0x1c>
1000fa4e:	0020      	movs	r0, r4
1000fa50:	0029      	movs	r1, r5
1000fa52:	f001 fbb1 	bl	100111b8 <__aeabi_d2iz>
1000fa56:	bd70      	pop	{r4, r5, r6, pc}
1000fa58:	4b06      	ldr	r3, [pc, #24]	; (1000fa74 <__aeabi_d2uiz+0x38>)
1000fa5a:	2200      	movs	r2, #0
1000fa5c:	0020      	movs	r0, r4
1000fa5e:	0029      	movs	r1, r5
1000fa60:	f001 f856 	bl	10010b10 <__aeabi_dsub>
1000fa64:	f001 fba8 	bl	100111b8 <__aeabi_d2iz>
1000fa68:	2380      	movs	r3, #128	; 0x80
1000fa6a:	061b      	lsls	r3, r3, #24
1000fa6c:	469c      	mov	ip, r3
1000fa6e:	4460      	add	r0, ip
1000fa70:	e7f1      	b.n	1000fa56 <__aeabi_d2uiz+0x1a>
1000fa72:	46c0      	nop			; (mov r8, r8)
1000fa74:	41e00000 	.word	0x41e00000

1000fa78 <__aeabi_fdiv>:
1000fa78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa7a:	4656      	mov	r6, sl
1000fa7c:	4644      	mov	r4, r8
1000fa7e:	465f      	mov	r7, fp
1000fa80:	464d      	mov	r5, r9
1000fa82:	b4f0      	push	{r4, r5, r6, r7}
1000fa84:	0244      	lsls	r4, r0, #9
1000fa86:	0046      	lsls	r6, r0, #1
1000fa88:	0fc7      	lsrs	r7, r0, #31
1000fa8a:	b083      	sub	sp, #12
1000fa8c:	4688      	mov	r8, r1
1000fa8e:	0a65      	lsrs	r5, r4, #9
1000fa90:	0e36      	lsrs	r6, r6, #24
1000fa92:	46ba      	mov	sl, r7
1000fa94:	d03d      	beq.n	1000fb12 <__aeabi_fdiv+0x9a>
1000fa96:	2eff      	cmp	r6, #255	; 0xff
1000fa98:	d022      	beq.n	1000fae0 <__aeabi_fdiv+0x68>
1000fa9a:	2300      	movs	r3, #0
1000fa9c:	00ec      	lsls	r4, r5, #3
1000fa9e:	2580      	movs	r5, #128	; 0x80
1000faa0:	4699      	mov	r9, r3
1000faa2:	469b      	mov	fp, r3
1000faa4:	04ed      	lsls	r5, r5, #19
1000faa6:	4325      	orrs	r5, r4
1000faa8:	3e7f      	subs	r6, #127	; 0x7f
1000faaa:	4643      	mov	r3, r8
1000faac:	025c      	lsls	r4, r3, #9
1000faae:	0058      	lsls	r0, r3, #1
1000fab0:	0fdb      	lsrs	r3, r3, #31
1000fab2:	0a64      	lsrs	r4, r4, #9
1000fab4:	0e00      	lsrs	r0, r0, #24
1000fab6:	4698      	mov	r8, r3
1000fab8:	d036      	beq.n	1000fb28 <__aeabi_fdiv+0xb0>
1000faba:	28ff      	cmp	r0, #255	; 0xff
1000fabc:	d030      	beq.n	1000fb20 <__aeabi_fdiv+0xa8>
1000fabe:	2380      	movs	r3, #128	; 0x80
1000fac0:	2100      	movs	r1, #0
1000fac2:	00e4      	lsls	r4, r4, #3
1000fac4:	04db      	lsls	r3, r3, #19
1000fac6:	431c      	orrs	r4, r3
1000fac8:	387f      	subs	r0, #127	; 0x7f
1000faca:	1a30      	subs	r0, r6, r0
1000facc:	9001      	str	r0, [sp, #4]
1000face:	4648      	mov	r0, r9
1000fad0:	4642      	mov	r2, r8
1000fad2:	4308      	orrs	r0, r1
1000fad4:	4e72      	ldr	r6, [pc, #456]	; (1000fca0 <__aeabi_fdiv+0x228>)
1000fad6:	0080      	lsls	r0, r0, #2
1000fad8:	5830      	ldr	r0, [r6, r0]
1000fada:	407a      	eors	r2, r7
1000fadc:	0013      	movs	r3, r2
1000fade:	4687      	mov	pc, r0
1000fae0:	2d00      	cmp	r5, #0
1000fae2:	d144      	bne.n	1000fb6e <__aeabi_fdiv+0xf6>
1000fae4:	2308      	movs	r3, #8
1000fae6:	4699      	mov	r9, r3
1000fae8:	3b06      	subs	r3, #6
1000faea:	469b      	mov	fp, r3
1000faec:	e7dd      	b.n	1000faaa <__aeabi_fdiv+0x32>
1000faee:	2201      	movs	r2, #1
1000faf0:	20ff      	movs	r0, #255	; 0xff
1000faf2:	2400      	movs	r4, #0
1000faf4:	401a      	ands	r2, r3
1000faf6:	0264      	lsls	r4, r4, #9
1000faf8:	05c3      	lsls	r3, r0, #23
1000fafa:	0a64      	lsrs	r4, r4, #9
1000fafc:	07d2      	lsls	r2, r2, #31
1000fafe:	431c      	orrs	r4, r3
1000fb00:	4314      	orrs	r4, r2
1000fb02:	0020      	movs	r0, r4
1000fb04:	b003      	add	sp, #12
1000fb06:	bc3c      	pop	{r2, r3, r4, r5}
1000fb08:	4690      	mov	r8, r2
1000fb0a:	4699      	mov	r9, r3
1000fb0c:	46a2      	mov	sl, r4
1000fb0e:	46ab      	mov	fp, r5
1000fb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb12:	2d00      	cmp	r5, #0
1000fb14:	d120      	bne.n	1000fb58 <__aeabi_fdiv+0xe0>
1000fb16:	2304      	movs	r3, #4
1000fb18:	4699      	mov	r9, r3
1000fb1a:	3b03      	subs	r3, #3
1000fb1c:	469b      	mov	fp, r3
1000fb1e:	e7c4      	b.n	1000faaa <__aeabi_fdiv+0x32>
1000fb20:	2c00      	cmp	r4, #0
1000fb22:	d117      	bne.n	1000fb54 <__aeabi_fdiv+0xdc>
1000fb24:	2102      	movs	r1, #2
1000fb26:	e002      	b.n	1000fb2e <__aeabi_fdiv+0xb6>
1000fb28:	2c00      	cmp	r4, #0
1000fb2a:	d10a      	bne.n	1000fb42 <__aeabi_fdiv+0xca>
1000fb2c:	2101      	movs	r1, #1
1000fb2e:	1a32      	subs	r2, r6, r0
1000fb30:	9201      	str	r2, [sp, #4]
1000fb32:	464a      	mov	r2, r9
1000fb34:	4643      	mov	r3, r8
1000fb36:	430a      	orrs	r2, r1
1000fb38:	485a      	ldr	r0, [pc, #360]	; (1000fca4 <__aeabi_fdiv+0x22c>)
1000fb3a:	0092      	lsls	r2, r2, #2
1000fb3c:	5882      	ldr	r2, [r0, r2]
1000fb3e:	407b      	eors	r3, r7
1000fb40:	4697      	mov	pc, r2
1000fb42:	0020      	movs	r0, r4
1000fb44:	f001 fba6 	bl	10011294 <__clzsi2>
1000fb48:	1f43      	subs	r3, r0, #5
1000fb4a:	3076      	adds	r0, #118	; 0x76
1000fb4c:	409c      	lsls	r4, r3
1000fb4e:	4240      	negs	r0, r0
1000fb50:	2100      	movs	r1, #0
1000fb52:	e7ba      	b.n	1000faca <__aeabi_fdiv+0x52>
1000fb54:	2103      	movs	r1, #3
1000fb56:	e7b8      	b.n	1000faca <__aeabi_fdiv+0x52>
1000fb58:	0028      	movs	r0, r5
1000fb5a:	f001 fb9b 	bl	10011294 <__clzsi2>
1000fb5e:	1f43      	subs	r3, r0, #5
1000fb60:	409d      	lsls	r5, r3
1000fb62:	2300      	movs	r3, #0
1000fb64:	3076      	adds	r0, #118	; 0x76
1000fb66:	4246      	negs	r6, r0
1000fb68:	4699      	mov	r9, r3
1000fb6a:	469b      	mov	fp, r3
1000fb6c:	e79d      	b.n	1000faaa <__aeabi_fdiv+0x32>
1000fb6e:	230c      	movs	r3, #12
1000fb70:	4699      	mov	r9, r3
1000fb72:	3b09      	subs	r3, #9
1000fb74:	469b      	mov	fp, r3
1000fb76:	e798      	b.n	1000faaa <__aeabi_fdiv+0x32>
1000fb78:	2480      	movs	r4, #128	; 0x80
1000fb7a:	2200      	movs	r2, #0
1000fb7c:	03e4      	lsls	r4, r4, #15
1000fb7e:	20ff      	movs	r0, #255	; 0xff
1000fb80:	e7b9      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fb82:	2400      	movs	r4, #0
1000fb84:	46c2      	mov	sl, r8
1000fb86:	468b      	mov	fp, r1
1000fb88:	465a      	mov	r2, fp
1000fb8a:	4653      	mov	r3, sl
1000fb8c:	2a02      	cmp	r2, #2
1000fb8e:	d0ae      	beq.n	1000faee <__aeabi_fdiv+0x76>
1000fb90:	2a03      	cmp	r2, #3
1000fb92:	d07d      	beq.n	1000fc90 <__aeabi_fdiv+0x218>
1000fb94:	2a01      	cmp	r2, #1
1000fb96:	d131      	bne.n	1000fbfc <__aeabi_fdiv+0x184>
1000fb98:	2201      	movs	r2, #1
1000fb9a:	2000      	movs	r0, #0
1000fb9c:	401a      	ands	r2, r3
1000fb9e:	2400      	movs	r4, #0
1000fba0:	e7a9      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fba2:	2201      	movs	r2, #1
1000fba4:	1a10      	subs	r0, r2, r0
1000fba6:	281b      	cmp	r0, #27
1000fba8:	dd56      	ble.n	1000fc58 <__aeabi_fdiv+0x1e0>
1000fbaa:	401a      	ands	r2, r3
1000fbac:	2000      	movs	r0, #0
1000fbae:	2400      	movs	r4, #0
1000fbb0:	e7a1      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fbb2:	2380      	movs	r3, #128	; 0x80
1000fbb4:	03db      	lsls	r3, r3, #15
1000fbb6:	421d      	tst	r5, r3
1000fbb8:	d14b      	bne.n	1000fc52 <__aeabi_fdiv+0x1da>
1000fbba:	2380      	movs	r3, #128	; 0x80
1000fbbc:	03db      	lsls	r3, r3, #15
1000fbbe:	432b      	orrs	r3, r5
1000fbc0:	025c      	lsls	r4, r3, #9
1000fbc2:	0a64      	lsrs	r4, r4, #9
1000fbc4:	003a      	movs	r2, r7
1000fbc6:	20ff      	movs	r0, #255	; 0xff
1000fbc8:	e795      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fbca:	016d      	lsls	r5, r5, #5
1000fbcc:	0160      	lsls	r0, r4, #5
1000fbce:	4285      	cmp	r5, r0
1000fbd0:	d230      	bcs.n	1000fc34 <__aeabi_fdiv+0x1bc>
1000fbd2:	9a01      	ldr	r2, [sp, #4]
1000fbd4:	2400      	movs	r4, #0
1000fbd6:	3a01      	subs	r2, #1
1000fbd8:	9201      	str	r2, [sp, #4]
1000fbda:	221b      	movs	r2, #27
1000fbdc:	2701      	movs	r7, #1
1000fbde:	0029      	movs	r1, r5
1000fbe0:	0064      	lsls	r4, r4, #1
1000fbe2:	006d      	lsls	r5, r5, #1
1000fbe4:	2900      	cmp	r1, #0
1000fbe6:	db01      	blt.n	1000fbec <__aeabi_fdiv+0x174>
1000fbe8:	42a8      	cmp	r0, r5
1000fbea:	d801      	bhi.n	1000fbf0 <__aeabi_fdiv+0x178>
1000fbec:	1a2d      	subs	r5, r5, r0
1000fbee:	433c      	orrs	r4, r7
1000fbf0:	3a01      	subs	r2, #1
1000fbf2:	2a00      	cmp	r2, #0
1000fbf4:	d1f3      	bne.n	1000fbde <__aeabi_fdiv+0x166>
1000fbf6:	1e6a      	subs	r2, r5, #1
1000fbf8:	4195      	sbcs	r5, r2
1000fbfa:	432c      	orrs	r4, r5
1000fbfc:	9801      	ldr	r0, [sp, #4]
1000fbfe:	307f      	adds	r0, #127	; 0x7f
1000fc00:	2800      	cmp	r0, #0
1000fc02:	ddce      	ble.n	1000fba2 <__aeabi_fdiv+0x12a>
1000fc04:	0762      	lsls	r2, r4, #29
1000fc06:	d004      	beq.n	1000fc12 <__aeabi_fdiv+0x19a>
1000fc08:	220f      	movs	r2, #15
1000fc0a:	4022      	ands	r2, r4
1000fc0c:	2a04      	cmp	r2, #4
1000fc0e:	d000      	beq.n	1000fc12 <__aeabi_fdiv+0x19a>
1000fc10:	3404      	adds	r4, #4
1000fc12:	0122      	lsls	r2, r4, #4
1000fc14:	d503      	bpl.n	1000fc1e <__aeabi_fdiv+0x1a6>
1000fc16:	4a24      	ldr	r2, [pc, #144]	; (1000fca8 <__aeabi_fdiv+0x230>)
1000fc18:	9801      	ldr	r0, [sp, #4]
1000fc1a:	4014      	ands	r4, r2
1000fc1c:	3080      	adds	r0, #128	; 0x80
1000fc1e:	28fe      	cmp	r0, #254	; 0xfe
1000fc20:	dd00      	ble.n	1000fc24 <__aeabi_fdiv+0x1ac>
1000fc22:	e764      	b.n	1000faee <__aeabi_fdiv+0x76>
1000fc24:	2201      	movs	r2, #1
1000fc26:	01a4      	lsls	r4, r4, #6
1000fc28:	0a64      	lsrs	r4, r4, #9
1000fc2a:	b2c0      	uxtb	r0, r0
1000fc2c:	401a      	ands	r2, r3
1000fc2e:	e762      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fc30:	002c      	movs	r4, r5
1000fc32:	e7a9      	b.n	1000fb88 <__aeabi_fdiv+0x110>
1000fc34:	1a2d      	subs	r5, r5, r0
1000fc36:	221a      	movs	r2, #26
1000fc38:	2401      	movs	r4, #1
1000fc3a:	e7cf      	b.n	1000fbdc <__aeabi_fdiv+0x164>
1000fc3c:	026b      	lsls	r3, r5, #9
1000fc3e:	d5bc      	bpl.n	1000fbba <__aeabi_fdiv+0x142>
1000fc40:	2400      	movs	r4, #0
1000fc42:	2380      	movs	r3, #128	; 0x80
1000fc44:	03db      	lsls	r3, r3, #15
1000fc46:	431c      	orrs	r4, r3
1000fc48:	0264      	lsls	r4, r4, #9
1000fc4a:	0a64      	lsrs	r4, r4, #9
1000fc4c:	4642      	mov	r2, r8
1000fc4e:	20ff      	movs	r0, #255	; 0xff
1000fc50:	e751      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fc52:	421c      	tst	r4, r3
1000fc54:	d1b3      	bne.n	1000fbbe <__aeabi_fdiv+0x146>
1000fc56:	e7f4      	b.n	1000fc42 <__aeabi_fdiv+0x1ca>
1000fc58:	0021      	movs	r1, r4
1000fc5a:	2220      	movs	r2, #32
1000fc5c:	40c1      	lsrs	r1, r0
1000fc5e:	1a10      	subs	r0, r2, r0
1000fc60:	4084      	lsls	r4, r0
1000fc62:	1e62      	subs	r2, r4, #1
1000fc64:	4194      	sbcs	r4, r2
1000fc66:	430c      	orrs	r4, r1
1000fc68:	0762      	lsls	r2, r4, #29
1000fc6a:	d004      	beq.n	1000fc76 <__aeabi_fdiv+0x1fe>
1000fc6c:	220f      	movs	r2, #15
1000fc6e:	4022      	ands	r2, r4
1000fc70:	2a04      	cmp	r2, #4
1000fc72:	d000      	beq.n	1000fc76 <__aeabi_fdiv+0x1fe>
1000fc74:	3404      	adds	r4, #4
1000fc76:	0162      	lsls	r2, r4, #5
1000fc78:	d504      	bpl.n	1000fc84 <__aeabi_fdiv+0x20c>
1000fc7a:	2201      	movs	r2, #1
1000fc7c:	2001      	movs	r0, #1
1000fc7e:	401a      	ands	r2, r3
1000fc80:	2400      	movs	r4, #0
1000fc82:	e738      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fc84:	2201      	movs	r2, #1
1000fc86:	01a4      	lsls	r4, r4, #6
1000fc88:	0a64      	lsrs	r4, r4, #9
1000fc8a:	401a      	ands	r2, r3
1000fc8c:	2000      	movs	r0, #0
1000fc8e:	e732      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fc90:	2380      	movs	r3, #128	; 0x80
1000fc92:	03db      	lsls	r3, r3, #15
1000fc94:	431c      	orrs	r4, r3
1000fc96:	0264      	lsls	r4, r4, #9
1000fc98:	0a64      	lsrs	r4, r4, #9
1000fc9a:	4652      	mov	r2, sl
1000fc9c:	20ff      	movs	r0, #255	; 0xff
1000fc9e:	e72a      	b.n	1000faf6 <__aeabi_fdiv+0x7e>
1000fca0:	100133fc 	.word	0x100133fc
1000fca4:	1001343c 	.word	0x1001343c
1000fca8:	f7ffffff 	.word	0xf7ffffff

1000fcac <__eqsf2>:
1000fcac:	0243      	lsls	r3, r0, #9
1000fcae:	b570      	push	{r4, r5, r6, lr}
1000fcb0:	0042      	lsls	r2, r0, #1
1000fcb2:	004c      	lsls	r4, r1, #1
1000fcb4:	0a5d      	lsrs	r5, r3, #9
1000fcb6:	0fc3      	lsrs	r3, r0, #31
1000fcb8:	0248      	lsls	r0, r1, #9
1000fcba:	0e12      	lsrs	r2, r2, #24
1000fcbc:	0a46      	lsrs	r6, r0, #9
1000fcbe:	0e24      	lsrs	r4, r4, #24
1000fcc0:	0fc9      	lsrs	r1, r1, #31
1000fcc2:	2aff      	cmp	r2, #255	; 0xff
1000fcc4:	d00f      	beq.n	1000fce6 <__eqsf2+0x3a>
1000fcc6:	2cff      	cmp	r4, #255	; 0xff
1000fcc8:	d011      	beq.n	1000fcee <__eqsf2+0x42>
1000fcca:	2001      	movs	r0, #1
1000fccc:	42a2      	cmp	r2, r4
1000fcce:	d000      	beq.n	1000fcd2 <__eqsf2+0x26>
1000fcd0:	bd70      	pop	{r4, r5, r6, pc}
1000fcd2:	42b5      	cmp	r5, r6
1000fcd4:	d1fc      	bne.n	1000fcd0 <__eqsf2+0x24>
1000fcd6:	428b      	cmp	r3, r1
1000fcd8:	d00d      	beq.n	1000fcf6 <__eqsf2+0x4a>
1000fcda:	2a00      	cmp	r2, #0
1000fcdc:	d1f8      	bne.n	1000fcd0 <__eqsf2+0x24>
1000fcde:	0028      	movs	r0, r5
1000fce0:	1e43      	subs	r3, r0, #1
1000fce2:	4198      	sbcs	r0, r3
1000fce4:	e7f4      	b.n	1000fcd0 <__eqsf2+0x24>
1000fce6:	2001      	movs	r0, #1
1000fce8:	2d00      	cmp	r5, #0
1000fcea:	d1f1      	bne.n	1000fcd0 <__eqsf2+0x24>
1000fcec:	e7eb      	b.n	1000fcc6 <__eqsf2+0x1a>
1000fcee:	2001      	movs	r0, #1
1000fcf0:	2e00      	cmp	r6, #0
1000fcf2:	d1ed      	bne.n	1000fcd0 <__eqsf2+0x24>
1000fcf4:	e7e9      	b.n	1000fcca <__eqsf2+0x1e>
1000fcf6:	2000      	movs	r0, #0
1000fcf8:	e7ea      	b.n	1000fcd0 <__eqsf2+0x24>
1000fcfa:	46c0      	nop			; (mov r8, r8)

1000fcfc <__gesf2>:
1000fcfc:	0243      	lsls	r3, r0, #9
1000fcfe:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd00:	0042      	lsls	r2, r0, #1
1000fd02:	0a5d      	lsrs	r5, r3, #9
1000fd04:	0fc3      	lsrs	r3, r0, #31
1000fd06:	0248      	lsls	r0, r1, #9
1000fd08:	0a44      	lsrs	r4, r0, #9
1000fd0a:	0048      	lsls	r0, r1, #1
1000fd0c:	0e12      	lsrs	r2, r2, #24
1000fd0e:	0e00      	lsrs	r0, r0, #24
1000fd10:	0fc9      	lsrs	r1, r1, #31
1000fd12:	2aff      	cmp	r2, #255	; 0xff
1000fd14:	d01f      	beq.n	1000fd56 <__gesf2+0x5a>
1000fd16:	28ff      	cmp	r0, #255	; 0xff
1000fd18:	d022      	beq.n	1000fd60 <__gesf2+0x64>
1000fd1a:	2a00      	cmp	r2, #0
1000fd1c:	d109      	bne.n	1000fd32 <__gesf2+0x36>
1000fd1e:	426e      	negs	r6, r5
1000fd20:	416e      	adcs	r6, r5
1000fd22:	2800      	cmp	r0, #0
1000fd24:	d10f      	bne.n	1000fd46 <__gesf2+0x4a>
1000fd26:	2c00      	cmp	r4, #0
1000fd28:	d10d      	bne.n	1000fd46 <__gesf2+0x4a>
1000fd2a:	2000      	movs	r0, #0
1000fd2c:	2d00      	cmp	r5, #0
1000fd2e:	d009      	beq.n	1000fd44 <__gesf2+0x48>
1000fd30:	e005      	b.n	1000fd3e <__gesf2+0x42>
1000fd32:	2800      	cmp	r0, #0
1000fd34:	d101      	bne.n	1000fd3a <__gesf2+0x3e>
1000fd36:	2c00      	cmp	r4, #0
1000fd38:	d001      	beq.n	1000fd3e <__gesf2+0x42>
1000fd3a:	428b      	cmp	r3, r1
1000fd3c:	d013      	beq.n	1000fd66 <__gesf2+0x6a>
1000fd3e:	4258      	negs	r0, r3
1000fd40:	2301      	movs	r3, #1
1000fd42:	4318      	orrs	r0, r3
1000fd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd46:	2e00      	cmp	r6, #0
1000fd48:	d0f7      	beq.n	1000fd3a <__gesf2+0x3e>
1000fd4a:	4248      	negs	r0, r1
1000fd4c:	4141      	adcs	r1, r0
1000fd4e:	2001      	movs	r0, #1
1000fd50:	4249      	negs	r1, r1
1000fd52:	4308      	orrs	r0, r1
1000fd54:	e7f6      	b.n	1000fd44 <__gesf2+0x48>
1000fd56:	2d00      	cmp	r5, #0
1000fd58:	d0dd      	beq.n	1000fd16 <__gesf2+0x1a>
1000fd5a:	2002      	movs	r0, #2
1000fd5c:	4240      	negs	r0, r0
1000fd5e:	e7f1      	b.n	1000fd44 <__gesf2+0x48>
1000fd60:	2c00      	cmp	r4, #0
1000fd62:	d0da      	beq.n	1000fd1a <__gesf2+0x1e>
1000fd64:	e7f9      	b.n	1000fd5a <__gesf2+0x5e>
1000fd66:	4282      	cmp	r2, r0
1000fd68:	dce9      	bgt.n	1000fd3e <__gesf2+0x42>
1000fd6a:	db04      	blt.n	1000fd76 <__gesf2+0x7a>
1000fd6c:	42a5      	cmp	r5, r4
1000fd6e:	d8e6      	bhi.n	1000fd3e <__gesf2+0x42>
1000fd70:	2000      	movs	r0, #0
1000fd72:	42a5      	cmp	r5, r4
1000fd74:	d2e6      	bcs.n	1000fd44 <__gesf2+0x48>
1000fd76:	4258      	negs	r0, r3
1000fd78:	4143      	adcs	r3, r0
1000fd7a:	2001      	movs	r0, #1
1000fd7c:	425b      	negs	r3, r3
1000fd7e:	4318      	orrs	r0, r3
1000fd80:	e7e0      	b.n	1000fd44 <__gesf2+0x48>
1000fd82:	46c0      	nop			; (mov r8, r8)

1000fd84 <__lesf2>:
1000fd84:	0243      	lsls	r3, r0, #9
1000fd86:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd88:	0042      	lsls	r2, r0, #1
1000fd8a:	004c      	lsls	r4, r1, #1
1000fd8c:	0a5e      	lsrs	r6, r3, #9
1000fd8e:	0fc3      	lsrs	r3, r0, #31
1000fd90:	0248      	lsls	r0, r1, #9
1000fd92:	0e12      	lsrs	r2, r2, #24
1000fd94:	0a45      	lsrs	r5, r0, #9
1000fd96:	0e24      	lsrs	r4, r4, #24
1000fd98:	0fc9      	lsrs	r1, r1, #31
1000fd9a:	2aff      	cmp	r2, #255	; 0xff
1000fd9c:	d017      	beq.n	1000fdce <__lesf2+0x4a>
1000fd9e:	2cff      	cmp	r4, #255	; 0xff
1000fda0:	d019      	beq.n	1000fdd6 <__lesf2+0x52>
1000fda2:	2a00      	cmp	r2, #0
1000fda4:	d10b      	bne.n	1000fdbe <__lesf2+0x3a>
1000fda6:	4270      	negs	r0, r6
1000fda8:	4170      	adcs	r0, r6
1000fdaa:	2c00      	cmp	r4, #0
1000fdac:	d017      	beq.n	1000fdde <__lesf2+0x5a>
1000fdae:	2800      	cmp	r0, #0
1000fdb0:	d007      	beq.n	1000fdc2 <__lesf2+0x3e>
1000fdb2:	4248      	negs	r0, r1
1000fdb4:	4141      	adcs	r1, r0
1000fdb6:	2001      	movs	r0, #1
1000fdb8:	4249      	negs	r1, r1
1000fdba:	4308      	orrs	r0, r1
1000fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdbe:	2c00      	cmp	r4, #0
1000fdc0:	d013      	beq.n	1000fdea <__lesf2+0x66>
1000fdc2:	428b      	cmp	r3, r1
1000fdc4:	d014      	beq.n	1000fdf0 <__lesf2+0x6c>
1000fdc6:	4258      	negs	r0, r3
1000fdc8:	2301      	movs	r3, #1
1000fdca:	4318      	orrs	r0, r3
1000fdcc:	e7f6      	b.n	1000fdbc <__lesf2+0x38>
1000fdce:	2002      	movs	r0, #2
1000fdd0:	2e00      	cmp	r6, #0
1000fdd2:	d1f3      	bne.n	1000fdbc <__lesf2+0x38>
1000fdd4:	e7e3      	b.n	1000fd9e <__lesf2+0x1a>
1000fdd6:	2002      	movs	r0, #2
1000fdd8:	2d00      	cmp	r5, #0
1000fdda:	d1ef      	bne.n	1000fdbc <__lesf2+0x38>
1000fddc:	e7e1      	b.n	1000fda2 <__lesf2+0x1e>
1000fdde:	2d00      	cmp	r5, #0
1000fde0:	d1e5      	bne.n	1000fdae <__lesf2+0x2a>
1000fde2:	2000      	movs	r0, #0
1000fde4:	2e00      	cmp	r6, #0
1000fde6:	d0e9      	beq.n	1000fdbc <__lesf2+0x38>
1000fde8:	e7ed      	b.n	1000fdc6 <__lesf2+0x42>
1000fdea:	2d00      	cmp	r5, #0
1000fdec:	d1e9      	bne.n	1000fdc2 <__lesf2+0x3e>
1000fdee:	e7ea      	b.n	1000fdc6 <__lesf2+0x42>
1000fdf0:	42a2      	cmp	r2, r4
1000fdf2:	dce8      	bgt.n	1000fdc6 <__lesf2+0x42>
1000fdf4:	db04      	blt.n	1000fe00 <__lesf2+0x7c>
1000fdf6:	42ae      	cmp	r6, r5
1000fdf8:	d8e5      	bhi.n	1000fdc6 <__lesf2+0x42>
1000fdfa:	2000      	movs	r0, #0
1000fdfc:	42ae      	cmp	r6, r5
1000fdfe:	d2dd      	bcs.n	1000fdbc <__lesf2+0x38>
1000fe00:	4258      	negs	r0, r3
1000fe02:	4143      	adcs	r3, r0
1000fe04:	2001      	movs	r0, #1
1000fe06:	425b      	negs	r3, r3
1000fe08:	4318      	orrs	r0, r3
1000fe0a:	e7d7      	b.n	1000fdbc <__lesf2+0x38>

1000fe0c <__aeabi_fmul>:
1000fe0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe0e:	4657      	mov	r7, sl
1000fe10:	464e      	mov	r6, r9
1000fe12:	4645      	mov	r5, r8
1000fe14:	0043      	lsls	r3, r0, #1
1000fe16:	b4e0      	push	{r5, r6, r7}
1000fe18:	0246      	lsls	r6, r0, #9
1000fe1a:	4688      	mov	r8, r1
1000fe1c:	0a76      	lsrs	r6, r6, #9
1000fe1e:	0e1f      	lsrs	r7, r3, #24
1000fe20:	0fc4      	lsrs	r4, r0, #31
1000fe22:	2f00      	cmp	r7, #0
1000fe24:	d047      	beq.n	1000feb6 <__aeabi_fmul+0xaa>
1000fe26:	2fff      	cmp	r7, #255	; 0xff
1000fe28:	d025      	beq.n	1000fe76 <__aeabi_fmul+0x6a>
1000fe2a:	2300      	movs	r3, #0
1000fe2c:	2580      	movs	r5, #128	; 0x80
1000fe2e:	469a      	mov	sl, r3
1000fe30:	4699      	mov	r9, r3
1000fe32:	00f6      	lsls	r6, r6, #3
1000fe34:	04ed      	lsls	r5, r5, #19
1000fe36:	432e      	orrs	r6, r5
1000fe38:	3f7f      	subs	r7, #127	; 0x7f
1000fe3a:	4643      	mov	r3, r8
1000fe3c:	4642      	mov	r2, r8
1000fe3e:	025d      	lsls	r5, r3, #9
1000fe40:	0fd2      	lsrs	r2, r2, #31
1000fe42:	005b      	lsls	r3, r3, #1
1000fe44:	0a6d      	lsrs	r5, r5, #9
1000fe46:	0e1b      	lsrs	r3, r3, #24
1000fe48:	4690      	mov	r8, r2
1000fe4a:	d040      	beq.n	1000fece <__aeabi_fmul+0xc2>
1000fe4c:	2bff      	cmp	r3, #255	; 0xff
1000fe4e:	d039      	beq.n	1000fec4 <__aeabi_fmul+0xb8>
1000fe50:	2280      	movs	r2, #128	; 0x80
1000fe52:	2000      	movs	r0, #0
1000fe54:	00ed      	lsls	r5, r5, #3
1000fe56:	04d2      	lsls	r2, r2, #19
1000fe58:	4315      	orrs	r5, r2
1000fe5a:	3b7f      	subs	r3, #127	; 0x7f
1000fe5c:	18fb      	adds	r3, r7, r3
1000fe5e:	4642      	mov	r2, r8
1000fe60:	4657      	mov	r7, sl
1000fe62:	1c59      	adds	r1, r3, #1
1000fe64:	4062      	eors	r2, r4
1000fe66:	468c      	mov	ip, r1
1000fe68:	4307      	orrs	r7, r0
1000fe6a:	2f0f      	cmp	r7, #15
1000fe6c:	d85c      	bhi.n	1000ff28 <__aeabi_fmul+0x11c>
1000fe6e:	496f      	ldr	r1, [pc, #444]	; (1001002c <__aeabi_fmul+0x220>)
1000fe70:	00bf      	lsls	r7, r7, #2
1000fe72:	59c9      	ldr	r1, [r1, r7]
1000fe74:	468f      	mov	pc, r1
1000fe76:	2e00      	cmp	r6, #0
1000fe78:	d145      	bne.n	1000ff06 <__aeabi_fmul+0xfa>
1000fe7a:	2308      	movs	r3, #8
1000fe7c:	469a      	mov	sl, r3
1000fe7e:	3b06      	subs	r3, #6
1000fe80:	4699      	mov	r9, r3
1000fe82:	e7da      	b.n	1000fe3a <__aeabi_fmul+0x2e>
1000fe84:	4642      	mov	r2, r8
1000fe86:	2802      	cmp	r0, #2
1000fe88:	d02d      	beq.n	1000fee6 <__aeabi_fmul+0xda>
1000fe8a:	2803      	cmp	r0, #3
1000fe8c:	d100      	bne.n	1000fe90 <__aeabi_fmul+0x84>
1000fe8e:	e0c3      	b.n	10010018 <__aeabi_fmul+0x20c>
1000fe90:	2801      	cmp	r0, #1
1000fe92:	d000      	beq.n	1000fe96 <__aeabi_fmul+0x8a>
1000fe94:	e0a2      	b.n	1000ffdc <__aeabi_fmul+0x1d0>
1000fe96:	2500      	movs	r5, #0
1000fe98:	2600      	movs	r6, #0
1000fe9a:	4002      	ands	r2, r0
1000fe9c:	b2d4      	uxtb	r4, r2
1000fe9e:	0276      	lsls	r6, r6, #9
1000fea0:	05ed      	lsls	r5, r5, #23
1000fea2:	0a76      	lsrs	r6, r6, #9
1000fea4:	432e      	orrs	r6, r5
1000fea6:	07e4      	lsls	r4, r4, #31
1000fea8:	4326      	orrs	r6, r4
1000feaa:	0030      	movs	r0, r6
1000feac:	bc1c      	pop	{r2, r3, r4}
1000feae:	4690      	mov	r8, r2
1000feb0:	4699      	mov	r9, r3
1000feb2:	46a2      	mov	sl, r4
1000feb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000feb6:	2e00      	cmp	r6, #0
1000feb8:	d11a      	bne.n	1000fef0 <__aeabi_fmul+0xe4>
1000feba:	2304      	movs	r3, #4
1000febc:	469a      	mov	sl, r3
1000febe:	3b03      	subs	r3, #3
1000fec0:	4699      	mov	r9, r3
1000fec2:	e7ba      	b.n	1000fe3a <__aeabi_fmul+0x2e>
1000fec4:	002a      	movs	r2, r5
1000fec6:	1e51      	subs	r1, r2, #1
1000fec8:	418a      	sbcs	r2, r1
1000feca:	1c90      	adds	r0, r2, #2
1000fecc:	e7c6      	b.n	1000fe5c <__aeabi_fmul+0x50>
1000fece:	2001      	movs	r0, #1
1000fed0:	2d00      	cmp	r5, #0
1000fed2:	d0c3      	beq.n	1000fe5c <__aeabi_fmul+0x50>
1000fed4:	0028      	movs	r0, r5
1000fed6:	f001 f9dd 	bl	10011294 <__clzsi2>
1000feda:	1f43      	subs	r3, r0, #5
1000fedc:	3076      	adds	r0, #118	; 0x76
1000fede:	409d      	lsls	r5, r3
1000fee0:	4243      	negs	r3, r0
1000fee2:	2000      	movs	r0, #0
1000fee4:	e7ba      	b.n	1000fe5c <__aeabi_fmul+0x50>
1000fee6:	2401      	movs	r4, #1
1000fee8:	25ff      	movs	r5, #255	; 0xff
1000feea:	4014      	ands	r4, r2
1000feec:	2600      	movs	r6, #0
1000feee:	e7d6      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000fef0:	0030      	movs	r0, r6
1000fef2:	f001 f9cf 	bl	10011294 <__clzsi2>
1000fef6:	1f43      	subs	r3, r0, #5
1000fef8:	409e      	lsls	r6, r3
1000fefa:	2300      	movs	r3, #0
1000fefc:	3076      	adds	r0, #118	; 0x76
1000fefe:	4247      	negs	r7, r0
1000ff00:	469a      	mov	sl, r3
1000ff02:	4699      	mov	r9, r3
1000ff04:	e799      	b.n	1000fe3a <__aeabi_fmul+0x2e>
1000ff06:	230c      	movs	r3, #12
1000ff08:	469a      	mov	sl, r3
1000ff0a:	3b09      	subs	r3, #9
1000ff0c:	4699      	mov	r9, r3
1000ff0e:	e794      	b.n	1000fe3a <__aeabi_fmul+0x2e>
1000ff10:	2680      	movs	r6, #128	; 0x80
1000ff12:	2400      	movs	r4, #0
1000ff14:	03f6      	lsls	r6, r6, #15
1000ff16:	25ff      	movs	r5, #255	; 0xff
1000ff18:	e7c1      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000ff1a:	0035      	movs	r5, r6
1000ff1c:	4648      	mov	r0, r9
1000ff1e:	e7b2      	b.n	1000fe86 <__aeabi_fmul+0x7a>
1000ff20:	0035      	movs	r5, r6
1000ff22:	0022      	movs	r2, r4
1000ff24:	4648      	mov	r0, r9
1000ff26:	e7ae      	b.n	1000fe86 <__aeabi_fmul+0x7a>
1000ff28:	0429      	lsls	r1, r5, #16
1000ff2a:	0c09      	lsrs	r1, r1, #16
1000ff2c:	0008      	movs	r0, r1
1000ff2e:	0c37      	lsrs	r7, r6, #16
1000ff30:	0436      	lsls	r6, r6, #16
1000ff32:	0c36      	lsrs	r6, r6, #16
1000ff34:	0c2c      	lsrs	r4, r5, #16
1000ff36:	4379      	muls	r1, r7
1000ff38:	4370      	muls	r0, r6
1000ff3a:	4367      	muls	r7, r4
1000ff3c:	4374      	muls	r4, r6
1000ff3e:	0c06      	lsrs	r6, r0, #16
1000ff40:	1864      	adds	r4, r4, r1
1000ff42:	1936      	adds	r6, r6, r4
1000ff44:	42b1      	cmp	r1, r6
1000ff46:	d903      	bls.n	1000ff50 <__aeabi_fmul+0x144>
1000ff48:	2180      	movs	r1, #128	; 0x80
1000ff4a:	0249      	lsls	r1, r1, #9
1000ff4c:	4688      	mov	r8, r1
1000ff4e:	4447      	add	r7, r8
1000ff50:	0400      	lsls	r0, r0, #16
1000ff52:	0c00      	lsrs	r0, r0, #16
1000ff54:	0431      	lsls	r1, r6, #16
1000ff56:	1809      	adds	r1, r1, r0
1000ff58:	018d      	lsls	r5, r1, #6
1000ff5a:	1e68      	subs	r0, r5, #1
1000ff5c:	4185      	sbcs	r5, r0
1000ff5e:	0e89      	lsrs	r1, r1, #26
1000ff60:	4329      	orrs	r1, r5
1000ff62:	0c35      	lsrs	r5, r6, #16
1000ff64:	19ed      	adds	r5, r5, r7
1000ff66:	01ad      	lsls	r5, r5, #6
1000ff68:	430d      	orrs	r5, r1
1000ff6a:	0129      	lsls	r1, r5, #4
1000ff6c:	d504      	bpl.n	1000ff78 <__aeabi_fmul+0x16c>
1000ff6e:	2301      	movs	r3, #1
1000ff70:	0869      	lsrs	r1, r5, #1
1000ff72:	401d      	ands	r5, r3
1000ff74:	4663      	mov	r3, ip
1000ff76:	430d      	orrs	r5, r1
1000ff78:	0019      	movs	r1, r3
1000ff7a:	317f      	adds	r1, #127	; 0x7f
1000ff7c:	2900      	cmp	r1, #0
1000ff7e:	dd25      	ble.n	1000ffcc <__aeabi_fmul+0x1c0>
1000ff80:	0768      	lsls	r0, r5, #29
1000ff82:	d004      	beq.n	1000ff8e <__aeabi_fmul+0x182>
1000ff84:	200f      	movs	r0, #15
1000ff86:	4028      	ands	r0, r5
1000ff88:	2804      	cmp	r0, #4
1000ff8a:	d000      	beq.n	1000ff8e <__aeabi_fmul+0x182>
1000ff8c:	3504      	adds	r5, #4
1000ff8e:	0128      	lsls	r0, r5, #4
1000ff90:	d503      	bpl.n	1000ff9a <__aeabi_fmul+0x18e>
1000ff92:	4927      	ldr	r1, [pc, #156]	; (10010030 <__aeabi_fmul+0x224>)
1000ff94:	3380      	adds	r3, #128	; 0x80
1000ff96:	400d      	ands	r5, r1
1000ff98:	0019      	movs	r1, r3
1000ff9a:	29fe      	cmp	r1, #254	; 0xfe
1000ff9c:	dca3      	bgt.n	1000fee6 <__aeabi_fmul+0xda>
1000ff9e:	2401      	movs	r4, #1
1000ffa0:	01ad      	lsls	r5, r5, #6
1000ffa2:	0a6e      	lsrs	r6, r5, #9
1000ffa4:	4014      	ands	r4, r2
1000ffa6:	b2cd      	uxtb	r5, r1
1000ffa8:	e779      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000ffaa:	2080      	movs	r0, #128	; 0x80
1000ffac:	03c0      	lsls	r0, r0, #15
1000ffae:	4206      	tst	r6, r0
1000ffb0:	d007      	beq.n	1000ffc2 <__aeabi_fmul+0x1b6>
1000ffb2:	4205      	tst	r5, r0
1000ffb4:	d105      	bne.n	1000ffc2 <__aeabi_fmul+0x1b6>
1000ffb6:	4328      	orrs	r0, r5
1000ffb8:	0246      	lsls	r6, r0, #9
1000ffba:	0a76      	lsrs	r6, r6, #9
1000ffbc:	4644      	mov	r4, r8
1000ffbe:	25ff      	movs	r5, #255	; 0xff
1000ffc0:	e76d      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000ffc2:	4306      	orrs	r6, r0
1000ffc4:	0276      	lsls	r6, r6, #9
1000ffc6:	0a76      	lsrs	r6, r6, #9
1000ffc8:	25ff      	movs	r5, #255	; 0xff
1000ffca:	e768      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000ffcc:	2401      	movs	r4, #1
1000ffce:	1a61      	subs	r1, r4, r1
1000ffd0:	291b      	cmp	r1, #27
1000ffd2:	dd05      	ble.n	1000ffe0 <__aeabi_fmul+0x1d4>
1000ffd4:	4014      	ands	r4, r2
1000ffd6:	2500      	movs	r5, #0
1000ffd8:	2600      	movs	r6, #0
1000ffda:	e760      	b.n	1000fe9e <__aeabi_fmul+0x92>
1000ffdc:	4663      	mov	r3, ip
1000ffde:	e7cb      	b.n	1000ff78 <__aeabi_fmul+0x16c>
1000ffe0:	002e      	movs	r6, r5
1000ffe2:	2320      	movs	r3, #32
1000ffe4:	40ce      	lsrs	r6, r1
1000ffe6:	1a59      	subs	r1, r3, r1
1000ffe8:	408d      	lsls	r5, r1
1000ffea:	1e6b      	subs	r3, r5, #1
1000ffec:	419d      	sbcs	r5, r3
1000ffee:	432e      	orrs	r6, r5
1000fff0:	0773      	lsls	r3, r6, #29
1000fff2:	d004      	beq.n	1000fffe <__aeabi_fmul+0x1f2>
1000fff4:	230f      	movs	r3, #15
1000fff6:	4033      	ands	r3, r6
1000fff8:	2b04      	cmp	r3, #4
1000fffa:	d000      	beq.n	1000fffe <__aeabi_fmul+0x1f2>
1000fffc:	3604      	adds	r6, #4
1000fffe:	0173      	lsls	r3, r6, #5
10010000:	d504      	bpl.n	1001000c <__aeabi_fmul+0x200>
10010002:	2401      	movs	r4, #1
10010004:	2501      	movs	r5, #1
10010006:	4014      	ands	r4, r2
10010008:	2600      	movs	r6, #0
1001000a:	e748      	b.n	1000fe9e <__aeabi_fmul+0x92>
1001000c:	2401      	movs	r4, #1
1001000e:	01b6      	lsls	r6, r6, #6
10010010:	0a76      	lsrs	r6, r6, #9
10010012:	4014      	ands	r4, r2
10010014:	2500      	movs	r5, #0
10010016:	e742      	b.n	1000fe9e <__aeabi_fmul+0x92>
10010018:	2680      	movs	r6, #128	; 0x80
1001001a:	2401      	movs	r4, #1
1001001c:	03f6      	lsls	r6, r6, #15
1001001e:	432e      	orrs	r6, r5
10010020:	0276      	lsls	r6, r6, #9
10010022:	0a76      	lsrs	r6, r6, #9
10010024:	4014      	ands	r4, r2
10010026:	25ff      	movs	r5, #255	; 0xff
10010028:	e739      	b.n	1000fe9e <__aeabi_fmul+0x92>
1001002a:	46c0      	nop			; (mov r8, r8)
1001002c:	1001347c 	.word	0x1001347c
10010030:	f7ffffff 	.word	0xf7ffffff

10010034 <__aeabi_fsub>:
10010034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010036:	024a      	lsls	r2, r1, #9
10010038:	004e      	lsls	r6, r1, #1
1001003a:	0243      	lsls	r3, r0, #9
1001003c:	0044      	lsls	r4, r0, #1
1001003e:	0e24      	lsrs	r4, r4, #24
10010040:	0fc5      	lsrs	r5, r0, #31
10010042:	099b      	lsrs	r3, r3, #6
10010044:	0e36      	lsrs	r6, r6, #24
10010046:	0fc9      	lsrs	r1, r1, #31
10010048:	0992      	lsrs	r2, r2, #6
1001004a:	2eff      	cmp	r6, #255	; 0xff
1001004c:	d100      	bne.n	10010050 <__aeabi_fsub+0x1c>
1001004e:	e083      	b.n	10010158 <__aeabi_fsub+0x124>
10010050:	2001      	movs	r0, #1
10010052:	4041      	eors	r1, r0
10010054:	1ba0      	subs	r0, r4, r6
10010056:	42a9      	cmp	r1, r5
10010058:	d05c      	beq.n	10010114 <__aeabi_fsub+0xe0>
1001005a:	2800      	cmp	r0, #0
1001005c:	dc00      	bgt.n	10010060 <__aeabi_fsub+0x2c>
1001005e:	e095      	b.n	1001018c <__aeabi_fsub+0x158>
10010060:	2e00      	cmp	r6, #0
10010062:	d11c      	bne.n	1001009e <__aeabi_fsub+0x6a>
10010064:	2a00      	cmp	r2, #0
10010066:	d000      	beq.n	1001006a <__aeabi_fsub+0x36>
10010068:	e081      	b.n	1001016e <__aeabi_fsub+0x13a>
1001006a:	075a      	lsls	r2, r3, #29
1001006c:	d004      	beq.n	10010078 <__aeabi_fsub+0x44>
1001006e:	220f      	movs	r2, #15
10010070:	401a      	ands	r2, r3
10010072:	2a04      	cmp	r2, #4
10010074:	d000      	beq.n	10010078 <__aeabi_fsub+0x44>
10010076:	3304      	adds	r3, #4
10010078:	015a      	lsls	r2, r3, #5
1001007a:	d53b      	bpl.n	100100f4 <__aeabi_fsub+0xc0>
1001007c:	3401      	adds	r4, #1
1001007e:	2cff      	cmp	r4, #255	; 0xff
10010080:	d100      	bne.n	10010084 <__aeabi_fsub+0x50>
10010082:	e091      	b.n	100101a8 <__aeabi_fsub+0x174>
10010084:	2001      	movs	r0, #1
10010086:	019b      	lsls	r3, r3, #6
10010088:	0a5b      	lsrs	r3, r3, #9
1001008a:	b2e4      	uxtb	r4, r4
1001008c:	4005      	ands	r5, r0
1001008e:	025b      	lsls	r3, r3, #9
10010090:	05e4      	lsls	r4, r4, #23
10010092:	0a5b      	lsrs	r3, r3, #9
10010094:	07ed      	lsls	r5, r5, #31
10010096:	4323      	orrs	r3, r4
10010098:	432b      	orrs	r3, r5
1001009a:	0018      	movs	r0, r3
1001009c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001009e:	2cff      	cmp	r4, #255	; 0xff
100100a0:	d0e3      	beq.n	1001006a <__aeabi_fsub+0x36>
100100a2:	2180      	movs	r1, #128	; 0x80
100100a4:	04c9      	lsls	r1, r1, #19
100100a6:	430a      	orrs	r2, r1
100100a8:	281b      	cmp	r0, #27
100100aa:	dd00      	ble.n	100100ae <__aeabi_fsub+0x7a>
100100ac:	e090      	b.n	100101d0 <__aeabi_fsub+0x19c>
100100ae:	0016      	movs	r6, r2
100100b0:	2120      	movs	r1, #32
100100b2:	40c6      	lsrs	r6, r0
100100b4:	1a08      	subs	r0, r1, r0
100100b6:	4082      	lsls	r2, r0
100100b8:	1e51      	subs	r1, r2, #1
100100ba:	418a      	sbcs	r2, r1
100100bc:	4332      	orrs	r2, r6
100100be:	1a9b      	subs	r3, r3, r2
100100c0:	015a      	lsls	r2, r3, #5
100100c2:	d515      	bpl.n	100100f0 <__aeabi_fsub+0xbc>
100100c4:	019b      	lsls	r3, r3, #6
100100c6:	099e      	lsrs	r6, r3, #6
100100c8:	0030      	movs	r0, r6
100100ca:	f001 f8e3 	bl	10011294 <__clzsi2>
100100ce:	3805      	subs	r0, #5
100100d0:	4086      	lsls	r6, r0
100100d2:	4284      	cmp	r4, r0
100100d4:	dc6c      	bgt.n	100101b0 <__aeabi_fsub+0x17c>
100100d6:	1b04      	subs	r4, r0, r4
100100d8:	0033      	movs	r3, r6
100100da:	2020      	movs	r0, #32
100100dc:	3401      	adds	r4, #1
100100de:	40e3      	lsrs	r3, r4
100100e0:	1b04      	subs	r4, r0, r4
100100e2:	40a6      	lsls	r6, r4
100100e4:	1e72      	subs	r2, r6, #1
100100e6:	4196      	sbcs	r6, r2
100100e8:	2400      	movs	r4, #0
100100ea:	4333      	orrs	r3, r6
100100ec:	e7bd      	b.n	1001006a <__aeabi_fsub+0x36>
100100ee:	000d      	movs	r5, r1
100100f0:	075a      	lsls	r2, r3, #29
100100f2:	d1bc      	bne.n	1001006e <__aeabi_fsub+0x3a>
100100f4:	08df      	lsrs	r7, r3, #3
100100f6:	2301      	movs	r3, #1
100100f8:	401d      	ands	r5, r3
100100fa:	2cff      	cmp	r4, #255	; 0xff
100100fc:	d133      	bne.n	10010166 <__aeabi_fsub+0x132>
100100fe:	2f00      	cmp	r7, #0
10010100:	d100      	bne.n	10010104 <__aeabi_fsub+0xd0>
10010102:	e090      	b.n	10010226 <__aeabi_fsub+0x1f2>
10010104:	2280      	movs	r2, #128	; 0x80
10010106:	03d2      	lsls	r2, r2, #15
10010108:	0013      	movs	r3, r2
1001010a:	433b      	orrs	r3, r7
1001010c:	025b      	lsls	r3, r3, #9
1001010e:	0a5b      	lsrs	r3, r3, #9
10010110:	24ff      	movs	r4, #255	; 0xff
10010112:	e7bc      	b.n	1001008e <__aeabi_fsub+0x5a>
10010114:	2800      	cmp	r0, #0
10010116:	dd4f      	ble.n	100101b8 <__aeabi_fsub+0x184>
10010118:	2e00      	cmp	r6, #0
1001011a:	d02e      	beq.n	1001017a <__aeabi_fsub+0x146>
1001011c:	2cff      	cmp	r4, #255	; 0xff
1001011e:	d0a4      	beq.n	1001006a <__aeabi_fsub+0x36>
10010120:	2580      	movs	r5, #128	; 0x80
10010122:	04ed      	lsls	r5, r5, #19
10010124:	432a      	orrs	r2, r5
10010126:	281b      	cmp	r0, #27
10010128:	dd00      	ble.n	1001012c <__aeabi_fsub+0xf8>
1001012a:	e097      	b.n	1001025c <__aeabi_fsub+0x228>
1001012c:	0016      	movs	r6, r2
1001012e:	2520      	movs	r5, #32
10010130:	40c6      	lsrs	r6, r0
10010132:	1a28      	subs	r0, r5, r0
10010134:	4082      	lsls	r2, r0
10010136:	1e50      	subs	r0, r2, #1
10010138:	4182      	sbcs	r2, r0
1001013a:	4332      	orrs	r2, r6
1001013c:	189b      	adds	r3, r3, r2
1001013e:	015a      	lsls	r2, r3, #5
10010140:	d5d5      	bpl.n	100100ee <__aeabi_fsub+0xba>
10010142:	3401      	adds	r4, #1
10010144:	2cff      	cmp	r4, #255	; 0xff
10010146:	d06d      	beq.n	10010224 <__aeabi_fsub+0x1f0>
10010148:	2201      	movs	r2, #1
1001014a:	487b      	ldr	r0, [pc, #492]	; (10010338 <__aeabi_fsub+0x304>)
1001014c:	401a      	ands	r2, r3
1001014e:	085b      	lsrs	r3, r3, #1
10010150:	4003      	ands	r3, r0
10010152:	4313      	orrs	r3, r2
10010154:	000d      	movs	r5, r1
10010156:	e788      	b.n	1001006a <__aeabi_fsub+0x36>
10010158:	2a00      	cmp	r2, #0
1001015a:	d000      	beq.n	1001015e <__aeabi_fsub+0x12a>
1001015c:	e77a      	b.n	10010054 <__aeabi_fsub+0x20>
1001015e:	e777      	b.n	10010050 <__aeabi_fsub+0x1c>
10010160:	1e03      	subs	r3, r0, #0
10010162:	d1c5      	bne.n	100100f0 <__aeabi_fsub+0xbc>
10010164:	2500      	movs	r5, #0
10010166:	027b      	lsls	r3, r7, #9
10010168:	0a5b      	lsrs	r3, r3, #9
1001016a:	b2e4      	uxtb	r4, r4
1001016c:	e78f      	b.n	1001008e <__aeabi_fsub+0x5a>
1001016e:	3801      	subs	r0, #1
10010170:	2800      	cmp	r0, #0
10010172:	d0a4      	beq.n	100100be <__aeabi_fsub+0x8a>
10010174:	2cff      	cmp	r4, #255	; 0xff
10010176:	d197      	bne.n	100100a8 <__aeabi_fsub+0x74>
10010178:	e777      	b.n	1001006a <__aeabi_fsub+0x36>
1001017a:	2a00      	cmp	r2, #0
1001017c:	d100      	bne.n	10010180 <__aeabi_fsub+0x14c>
1001017e:	e774      	b.n	1001006a <__aeabi_fsub+0x36>
10010180:	3801      	subs	r0, #1
10010182:	2800      	cmp	r0, #0
10010184:	d0da      	beq.n	1001013c <__aeabi_fsub+0x108>
10010186:	2cff      	cmp	r4, #255	; 0xff
10010188:	d1cd      	bne.n	10010126 <__aeabi_fsub+0xf2>
1001018a:	e76e      	b.n	1001006a <__aeabi_fsub+0x36>
1001018c:	2800      	cmp	r0, #0
1001018e:	d121      	bne.n	100101d4 <__aeabi_fsub+0x1a0>
10010190:	1c60      	adds	r0, r4, #1
10010192:	b2c0      	uxtb	r0, r0
10010194:	2801      	cmp	r0, #1
10010196:	dd58      	ble.n	1001024a <__aeabi_fsub+0x216>
10010198:	2780      	movs	r7, #128	; 0x80
1001019a:	1a9e      	subs	r6, r3, r2
1001019c:	04ff      	lsls	r7, r7, #19
1001019e:	4037      	ands	r7, r6
100101a0:	d02f      	beq.n	10010202 <__aeabi_fsub+0x1ce>
100101a2:	1ad6      	subs	r6, r2, r3
100101a4:	000d      	movs	r5, r1
100101a6:	e78f      	b.n	100100c8 <__aeabi_fsub+0x94>
100101a8:	2301      	movs	r3, #1
100101aa:	401d      	ands	r5, r3
100101ac:	2300      	movs	r3, #0
100101ae:	e76e      	b.n	1001008e <__aeabi_fsub+0x5a>
100101b0:	4b62      	ldr	r3, [pc, #392]	; (1001033c <__aeabi_fsub+0x308>)
100101b2:	1a24      	subs	r4, r4, r0
100101b4:	4033      	ands	r3, r6
100101b6:	e758      	b.n	1001006a <__aeabi_fsub+0x36>
100101b8:	2800      	cmp	r0, #0
100101ba:	d151      	bne.n	10010260 <__aeabi_fsub+0x22c>
100101bc:	1c60      	adds	r0, r4, #1
100101be:	b2c6      	uxtb	r6, r0
100101c0:	2e01      	cmp	r6, #1
100101c2:	dd33      	ble.n	1001022c <__aeabi_fsub+0x1f8>
100101c4:	28ff      	cmp	r0, #255	; 0xff
100101c6:	d02d      	beq.n	10010224 <__aeabi_fsub+0x1f0>
100101c8:	189b      	adds	r3, r3, r2
100101ca:	085b      	lsrs	r3, r3, #1
100101cc:	0004      	movs	r4, r0
100101ce:	e74c      	b.n	1001006a <__aeabi_fsub+0x36>
100101d0:	2201      	movs	r2, #1
100101d2:	e774      	b.n	100100be <__aeabi_fsub+0x8a>
100101d4:	2c00      	cmp	r4, #0
100101d6:	d01a      	beq.n	1001020e <__aeabi_fsub+0x1da>
100101d8:	2eff      	cmp	r6, #255	; 0xff
100101da:	d01f      	beq.n	1001021c <__aeabi_fsub+0x1e8>
100101dc:	2480      	movs	r4, #128	; 0x80
100101de:	04e4      	lsls	r4, r4, #19
100101e0:	4240      	negs	r0, r0
100101e2:	4323      	orrs	r3, r4
100101e4:	281b      	cmp	r0, #27
100101e6:	dd00      	ble.n	100101ea <__aeabi_fsub+0x1b6>
100101e8:	e096      	b.n	10010318 <__aeabi_fsub+0x2e4>
100101ea:	001d      	movs	r5, r3
100101ec:	2420      	movs	r4, #32
100101ee:	40c5      	lsrs	r5, r0
100101f0:	1a20      	subs	r0, r4, r0
100101f2:	4083      	lsls	r3, r0
100101f4:	1e58      	subs	r0, r3, #1
100101f6:	4183      	sbcs	r3, r0
100101f8:	432b      	orrs	r3, r5
100101fa:	1ad3      	subs	r3, r2, r3
100101fc:	0034      	movs	r4, r6
100101fe:	000d      	movs	r5, r1
10010200:	e75e      	b.n	100100c0 <__aeabi_fsub+0x8c>
10010202:	2e00      	cmp	r6, #0
10010204:	d000      	beq.n	10010208 <__aeabi_fsub+0x1d4>
10010206:	e75f      	b.n	100100c8 <__aeabi_fsub+0x94>
10010208:	2500      	movs	r5, #0
1001020a:	2400      	movs	r4, #0
1001020c:	e7ab      	b.n	10010166 <__aeabi_fsub+0x132>
1001020e:	2b00      	cmp	r3, #0
10010210:	d044      	beq.n	1001029c <__aeabi_fsub+0x268>
10010212:	43c0      	mvns	r0, r0
10010214:	2800      	cmp	r0, #0
10010216:	d0f0      	beq.n	100101fa <__aeabi_fsub+0x1c6>
10010218:	2eff      	cmp	r6, #255	; 0xff
1001021a:	d1e3      	bne.n	100101e4 <__aeabi_fsub+0x1b0>
1001021c:	0013      	movs	r3, r2
1001021e:	24ff      	movs	r4, #255	; 0xff
10010220:	000d      	movs	r5, r1
10010222:	e722      	b.n	1001006a <__aeabi_fsub+0x36>
10010224:	000d      	movs	r5, r1
10010226:	24ff      	movs	r4, #255	; 0xff
10010228:	2300      	movs	r3, #0
1001022a:	e730      	b.n	1001008e <__aeabi_fsub+0x5a>
1001022c:	2c00      	cmp	r4, #0
1001022e:	d15d      	bne.n	100102ec <__aeabi_fsub+0x2b8>
10010230:	2b00      	cmp	r3, #0
10010232:	d07d      	beq.n	10010330 <__aeabi_fsub+0x2fc>
10010234:	2a00      	cmp	r2, #0
10010236:	d100      	bne.n	1001023a <__aeabi_fsub+0x206>
10010238:	e717      	b.n	1001006a <__aeabi_fsub+0x36>
1001023a:	189b      	adds	r3, r3, r2
1001023c:	015a      	lsls	r2, r3, #5
1001023e:	d400      	bmi.n	10010242 <__aeabi_fsub+0x20e>
10010240:	e756      	b.n	100100f0 <__aeabi_fsub+0xbc>
10010242:	4a3e      	ldr	r2, [pc, #248]	; (1001033c <__aeabi_fsub+0x308>)
10010244:	0004      	movs	r4, r0
10010246:	4013      	ands	r3, r2
10010248:	e70f      	b.n	1001006a <__aeabi_fsub+0x36>
1001024a:	2c00      	cmp	r4, #0
1001024c:	d11e      	bne.n	1001028c <__aeabi_fsub+0x258>
1001024e:	2b00      	cmp	r3, #0
10010250:	d12f      	bne.n	100102b2 <__aeabi_fsub+0x27e>
10010252:	2a00      	cmp	r2, #0
10010254:	d065      	beq.n	10010322 <__aeabi_fsub+0x2ee>
10010256:	0013      	movs	r3, r2
10010258:	000d      	movs	r5, r1
1001025a:	e706      	b.n	1001006a <__aeabi_fsub+0x36>
1001025c:	2201      	movs	r2, #1
1001025e:	e76d      	b.n	1001013c <__aeabi_fsub+0x108>
10010260:	2c00      	cmp	r4, #0
10010262:	d11f      	bne.n	100102a4 <__aeabi_fsub+0x270>
10010264:	2b00      	cmp	r3, #0
10010266:	d059      	beq.n	1001031c <__aeabi_fsub+0x2e8>
10010268:	43c0      	mvns	r0, r0
1001026a:	2800      	cmp	r0, #0
1001026c:	d00b      	beq.n	10010286 <__aeabi_fsub+0x252>
1001026e:	2eff      	cmp	r6, #255	; 0xff
10010270:	d04f      	beq.n	10010312 <__aeabi_fsub+0x2de>
10010272:	281b      	cmp	r0, #27
10010274:	dc5e      	bgt.n	10010334 <__aeabi_fsub+0x300>
10010276:	001d      	movs	r5, r3
10010278:	2420      	movs	r4, #32
1001027a:	40c5      	lsrs	r5, r0
1001027c:	1a20      	subs	r0, r4, r0
1001027e:	4083      	lsls	r3, r0
10010280:	1e58      	subs	r0, r3, #1
10010282:	4183      	sbcs	r3, r0
10010284:	432b      	orrs	r3, r5
10010286:	189b      	adds	r3, r3, r2
10010288:	0034      	movs	r4, r6
1001028a:	e758      	b.n	1001013e <__aeabi_fsub+0x10a>
1001028c:	2b00      	cmp	r3, #0
1001028e:	d11c      	bne.n	100102ca <__aeabi_fsub+0x296>
10010290:	2a00      	cmp	r2, #0
10010292:	d049      	beq.n	10010328 <__aeabi_fsub+0x2f4>
10010294:	0013      	movs	r3, r2
10010296:	000d      	movs	r5, r1
10010298:	24ff      	movs	r4, #255	; 0xff
1001029a:	e6e6      	b.n	1001006a <__aeabi_fsub+0x36>
1001029c:	0013      	movs	r3, r2
1001029e:	0034      	movs	r4, r6
100102a0:	000d      	movs	r5, r1
100102a2:	e6e2      	b.n	1001006a <__aeabi_fsub+0x36>
100102a4:	2eff      	cmp	r6, #255	; 0xff
100102a6:	d034      	beq.n	10010312 <__aeabi_fsub+0x2de>
100102a8:	2480      	movs	r4, #128	; 0x80
100102aa:	04e4      	lsls	r4, r4, #19
100102ac:	4240      	negs	r0, r0
100102ae:	4323      	orrs	r3, r4
100102b0:	e7df      	b.n	10010272 <__aeabi_fsub+0x23e>
100102b2:	2a00      	cmp	r2, #0
100102b4:	d100      	bne.n	100102b8 <__aeabi_fsub+0x284>
100102b6:	e6d8      	b.n	1001006a <__aeabi_fsub+0x36>
100102b8:	2780      	movs	r7, #128	; 0x80
100102ba:	1a98      	subs	r0, r3, r2
100102bc:	04ff      	lsls	r7, r7, #19
100102be:	4007      	ands	r7, r0
100102c0:	d100      	bne.n	100102c4 <__aeabi_fsub+0x290>
100102c2:	e74d      	b.n	10010160 <__aeabi_fsub+0x12c>
100102c4:	1ad3      	subs	r3, r2, r3
100102c6:	000d      	movs	r5, r1
100102c8:	e6cf      	b.n	1001006a <__aeabi_fsub+0x36>
100102ca:	24ff      	movs	r4, #255	; 0xff
100102cc:	2a00      	cmp	r2, #0
100102ce:	d100      	bne.n	100102d2 <__aeabi_fsub+0x29e>
100102d0:	e6cb      	b.n	1001006a <__aeabi_fsub+0x36>
100102d2:	2080      	movs	r0, #128	; 0x80
100102d4:	08db      	lsrs	r3, r3, #3
100102d6:	03c0      	lsls	r0, r0, #15
100102d8:	4203      	tst	r3, r0
100102da:	d004      	beq.n	100102e6 <__aeabi_fsub+0x2b2>
100102dc:	08d2      	lsrs	r2, r2, #3
100102de:	4202      	tst	r2, r0
100102e0:	d101      	bne.n	100102e6 <__aeabi_fsub+0x2b2>
100102e2:	0013      	movs	r3, r2
100102e4:	000d      	movs	r5, r1
100102e6:	00db      	lsls	r3, r3, #3
100102e8:	24ff      	movs	r4, #255	; 0xff
100102ea:	e6be      	b.n	1001006a <__aeabi_fsub+0x36>
100102ec:	2b00      	cmp	r3, #0
100102ee:	d010      	beq.n	10010312 <__aeabi_fsub+0x2de>
100102f0:	24ff      	movs	r4, #255	; 0xff
100102f2:	2a00      	cmp	r2, #0
100102f4:	d100      	bne.n	100102f8 <__aeabi_fsub+0x2c4>
100102f6:	e6b8      	b.n	1001006a <__aeabi_fsub+0x36>
100102f8:	2080      	movs	r0, #128	; 0x80
100102fa:	08db      	lsrs	r3, r3, #3
100102fc:	03c0      	lsls	r0, r0, #15
100102fe:	4203      	tst	r3, r0
10010300:	d003      	beq.n	1001030a <__aeabi_fsub+0x2d6>
10010302:	08d2      	lsrs	r2, r2, #3
10010304:	4202      	tst	r2, r0
10010306:	d100      	bne.n	1001030a <__aeabi_fsub+0x2d6>
10010308:	0013      	movs	r3, r2
1001030a:	00db      	lsls	r3, r3, #3
1001030c:	000d      	movs	r5, r1
1001030e:	24ff      	movs	r4, #255	; 0xff
10010310:	e6ab      	b.n	1001006a <__aeabi_fsub+0x36>
10010312:	0013      	movs	r3, r2
10010314:	24ff      	movs	r4, #255	; 0xff
10010316:	e6a8      	b.n	1001006a <__aeabi_fsub+0x36>
10010318:	2301      	movs	r3, #1
1001031a:	e76e      	b.n	100101fa <__aeabi_fsub+0x1c6>
1001031c:	0013      	movs	r3, r2
1001031e:	0034      	movs	r4, r6
10010320:	e6a3      	b.n	1001006a <__aeabi_fsub+0x36>
10010322:	2700      	movs	r7, #0
10010324:	2500      	movs	r5, #0
10010326:	e71e      	b.n	10010166 <__aeabi_fsub+0x132>
10010328:	2780      	movs	r7, #128	; 0x80
1001032a:	2500      	movs	r5, #0
1001032c:	03ff      	lsls	r7, r7, #15
1001032e:	e6e9      	b.n	10010104 <__aeabi_fsub+0xd0>
10010330:	0013      	movs	r3, r2
10010332:	e69a      	b.n	1001006a <__aeabi_fsub+0x36>
10010334:	2301      	movs	r3, #1
10010336:	e7a6      	b.n	10010286 <__aeabi_fsub+0x252>
10010338:	7dffffff 	.word	0x7dffffff
1001033c:	fbffffff 	.word	0xfbffffff

10010340 <__aeabi_f2iz>:
10010340:	0243      	lsls	r3, r0, #9
10010342:	0a59      	lsrs	r1, r3, #9
10010344:	0043      	lsls	r3, r0, #1
10010346:	0fc2      	lsrs	r2, r0, #31
10010348:	0e1b      	lsrs	r3, r3, #24
1001034a:	2000      	movs	r0, #0
1001034c:	2b7e      	cmp	r3, #126	; 0x7e
1001034e:	dd0e      	ble.n	1001036e <__aeabi_f2iz+0x2e>
10010350:	2b9d      	cmp	r3, #157	; 0x9d
10010352:	dc0d      	bgt.n	10010370 <__aeabi_f2iz+0x30>
10010354:	2080      	movs	r0, #128	; 0x80
10010356:	0400      	lsls	r0, r0, #16
10010358:	4301      	orrs	r1, r0
1001035a:	2b95      	cmp	r3, #149	; 0x95
1001035c:	dc0b      	bgt.n	10010376 <__aeabi_f2iz+0x36>
1001035e:	2096      	movs	r0, #150	; 0x96
10010360:	1ac3      	subs	r3, r0, r3
10010362:	40d9      	lsrs	r1, r3
10010364:	000b      	movs	r3, r1
10010366:	4258      	negs	r0, r3
10010368:	2a00      	cmp	r2, #0
1001036a:	d100      	bne.n	1001036e <__aeabi_f2iz+0x2e>
1001036c:	0018      	movs	r0, r3
1001036e:	4770      	bx	lr
10010370:	4b03      	ldr	r3, [pc, #12]	; (10010380 <__aeabi_f2iz+0x40>)
10010372:	18d0      	adds	r0, r2, r3
10010374:	e7fb      	b.n	1001036e <__aeabi_f2iz+0x2e>
10010376:	3b96      	subs	r3, #150	; 0x96
10010378:	4099      	lsls	r1, r3
1001037a:	000b      	movs	r3, r1
1001037c:	e7f3      	b.n	10010366 <__aeabi_f2iz+0x26>
1001037e:	46c0      	nop			; (mov r8, r8)
10010380:	7fffffff 	.word	0x7fffffff

10010384 <__aeabi_ui2f>:
10010384:	b570      	push	{r4, r5, r6, lr}
10010386:	1e04      	subs	r4, r0, #0
10010388:	d028      	beq.n	100103dc <__aeabi_ui2f+0x58>
1001038a:	f000 ff83 	bl	10011294 <__clzsi2>
1001038e:	239e      	movs	r3, #158	; 0x9e
10010390:	1a1b      	subs	r3, r3, r0
10010392:	2b96      	cmp	r3, #150	; 0x96
10010394:	dc0a      	bgt.n	100103ac <__aeabi_ui2f+0x28>
10010396:	2296      	movs	r2, #150	; 0x96
10010398:	1ad2      	subs	r2, r2, r3
1001039a:	4094      	lsls	r4, r2
1001039c:	0262      	lsls	r2, r4, #9
1001039e:	0a52      	lsrs	r2, r2, #9
100103a0:	b2d8      	uxtb	r0, r3
100103a2:	0252      	lsls	r2, r2, #9
100103a4:	0a52      	lsrs	r2, r2, #9
100103a6:	05c0      	lsls	r0, r0, #23
100103a8:	4310      	orrs	r0, r2
100103aa:	bd70      	pop	{r4, r5, r6, pc}
100103ac:	2b99      	cmp	r3, #153	; 0x99
100103ae:	dc18      	bgt.n	100103e2 <__aeabi_ui2f+0x5e>
100103b0:	2299      	movs	r2, #153	; 0x99
100103b2:	1ad2      	subs	r2, r2, r3
100103b4:	4094      	lsls	r4, r2
100103b6:	4a11      	ldr	r2, [pc, #68]	; (100103fc <__aeabi_ui2f+0x78>)
100103b8:	4022      	ands	r2, r4
100103ba:	0761      	lsls	r1, r4, #29
100103bc:	d004      	beq.n	100103c8 <__aeabi_ui2f+0x44>
100103be:	210f      	movs	r1, #15
100103c0:	400c      	ands	r4, r1
100103c2:	2c04      	cmp	r4, #4
100103c4:	d000      	beq.n	100103c8 <__aeabi_ui2f+0x44>
100103c6:	3204      	adds	r2, #4
100103c8:	0151      	lsls	r1, r2, #5
100103ca:	d503      	bpl.n	100103d4 <__aeabi_ui2f+0x50>
100103cc:	4b0b      	ldr	r3, [pc, #44]	; (100103fc <__aeabi_ui2f+0x78>)
100103ce:	401a      	ands	r2, r3
100103d0:	239f      	movs	r3, #159	; 0x9f
100103d2:	1a1b      	subs	r3, r3, r0
100103d4:	0192      	lsls	r2, r2, #6
100103d6:	0a52      	lsrs	r2, r2, #9
100103d8:	b2d8      	uxtb	r0, r3
100103da:	e7e2      	b.n	100103a2 <__aeabi_ui2f+0x1e>
100103dc:	2000      	movs	r0, #0
100103de:	2200      	movs	r2, #0
100103e0:	e7df      	b.n	100103a2 <__aeabi_ui2f+0x1e>
100103e2:	2205      	movs	r2, #5
100103e4:	0025      	movs	r5, r4
100103e6:	1a12      	subs	r2, r2, r0
100103e8:	21b9      	movs	r1, #185	; 0xb9
100103ea:	40d5      	lsrs	r5, r2
100103ec:	0022      	movs	r2, r4
100103ee:	1ac9      	subs	r1, r1, r3
100103f0:	408a      	lsls	r2, r1
100103f2:	1e54      	subs	r4, r2, #1
100103f4:	41a2      	sbcs	r2, r4
100103f6:	002c      	movs	r4, r5
100103f8:	4314      	orrs	r4, r2
100103fa:	e7dc      	b.n	100103b6 <__aeabi_ui2f+0x32>
100103fc:	fbffffff 	.word	0xfbffffff

10010400 <__eqdf2>:
10010400:	b5f0      	push	{r4, r5, r6, r7, lr}
10010402:	465f      	mov	r7, fp
10010404:	4656      	mov	r6, sl
10010406:	464d      	mov	r5, r9
10010408:	4644      	mov	r4, r8
1001040a:	b4f0      	push	{r4, r5, r6, r7}
1001040c:	031f      	lsls	r7, r3, #12
1001040e:	005c      	lsls	r4, r3, #1
10010410:	0fdb      	lsrs	r3, r3, #31
10010412:	469a      	mov	sl, r3
10010414:	4b19      	ldr	r3, [pc, #100]	; (1001047c <__eqdf2+0x7c>)
10010416:	030e      	lsls	r6, r1, #12
10010418:	004d      	lsls	r5, r1, #1
1001041a:	0fc9      	lsrs	r1, r1, #31
1001041c:	4680      	mov	r8, r0
1001041e:	0b36      	lsrs	r6, r6, #12
10010420:	0d6d      	lsrs	r5, r5, #21
10010422:	468b      	mov	fp, r1
10010424:	4691      	mov	r9, r2
10010426:	0b3f      	lsrs	r7, r7, #12
10010428:	0d64      	lsrs	r4, r4, #21
1001042a:	429d      	cmp	r5, r3
1001042c:	d019      	beq.n	10010462 <__eqdf2+0x62>
1001042e:	4b13      	ldr	r3, [pc, #76]	; (1001047c <__eqdf2+0x7c>)
10010430:	429c      	cmp	r4, r3
10010432:	d01b      	beq.n	1001046c <__eqdf2+0x6c>
10010434:	2301      	movs	r3, #1
10010436:	42a5      	cmp	r5, r4
10010438:	d006      	beq.n	10010448 <__eqdf2+0x48>
1001043a:	0018      	movs	r0, r3
1001043c:	bc3c      	pop	{r2, r3, r4, r5}
1001043e:	4690      	mov	r8, r2
10010440:	4699      	mov	r9, r3
10010442:	46a2      	mov	sl, r4
10010444:	46ab      	mov	fp, r5
10010446:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010448:	42be      	cmp	r6, r7
1001044a:	d1f6      	bne.n	1001043a <__eqdf2+0x3a>
1001044c:	45c8      	cmp	r8, r9
1001044e:	d1f4      	bne.n	1001043a <__eqdf2+0x3a>
10010450:	45d3      	cmp	fp, sl
10010452:	d010      	beq.n	10010476 <__eqdf2+0x76>
10010454:	2d00      	cmp	r5, #0
10010456:	d1f0      	bne.n	1001043a <__eqdf2+0x3a>
10010458:	4330      	orrs	r0, r6
1001045a:	0003      	movs	r3, r0
1001045c:	1e5a      	subs	r2, r3, #1
1001045e:	4193      	sbcs	r3, r2
10010460:	e7eb      	b.n	1001043a <__eqdf2+0x3a>
10010462:	0031      	movs	r1, r6
10010464:	2301      	movs	r3, #1
10010466:	4301      	orrs	r1, r0
10010468:	d1e7      	bne.n	1001043a <__eqdf2+0x3a>
1001046a:	e7e0      	b.n	1001042e <__eqdf2+0x2e>
1001046c:	433a      	orrs	r2, r7
1001046e:	2301      	movs	r3, #1
10010470:	2a00      	cmp	r2, #0
10010472:	d1e2      	bne.n	1001043a <__eqdf2+0x3a>
10010474:	e7de      	b.n	10010434 <__eqdf2+0x34>
10010476:	2300      	movs	r3, #0
10010478:	e7df      	b.n	1001043a <__eqdf2+0x3a>
1001047a:	46c0      	nop			; (mov r8, r8)
1001047c:	000007ff 	.word	0x000007ff

10010480 <__gedf2>:
10010480:	b5f0      	push	{r4, r5, r6, r7, lr}
10010482:	465f      	mov	r7, fp
10010484:	4644      	mov	r4, r8
10010486:	4656      	mov	r6, sl
10010488:	464d      	mov	r5, r9
1001048a:	b4f0      	push	{r4, r5, r6, r7}
1001048c:	031f      	lsls	r7, r3, #12
1001048e:	0b3c      	lsrs	r4, r7, #12
10010490:	4f2c      	ldr	r7, [pc, #176]	; (10010544 <__gedf2+0xc4>)
10010492:	030e      	lsls	r6, r1, #12
10010494:	004d      	lsls	r5, r1, #1
10010496:	46a3      	mov	fp, r4
10010498:	005c      	lsls	r4, r3, #1
1001049a:	4684      	mov	ip, r0
1001049c:	0b36      	lsrs	r6, r6, #12
1001049e:	0d6d      	lsrs	r5, r5, #21
100104a0:	0fc9      	lsrs	r1, r1, #31
100104a2:	4690      	mov	r8, r2
100104a4:	0d64      	lsrs	r4, r4, #21
100104a6:	0fdb      	lsrs	r3, r3, #31
100104a8:	42bd      	cmp	r5, r7
100104aa:	d02b      	beq.n	10010504 <__gedf2+0x84>
100104ac:	4f25      	ldr	r7, [pc, #148]	; (10010544 <__gedf2+0xc4>)
100104ae:	42bc      	cmp	r4, r7
100104b0:	d02e      	beq.n	10010510 <__gedf2+0x90>
100104b2:	2d00      	cmp	r5, #0
100104b4:	d10e      	bne.n	100104d4 <__gedf2+0x54>
100104b6:	4330      	orrs	r0, r6
100104b8:	0007      	movs	r7, r0
100104ba:	4681      	mov	r9, r0
100104bc:	4278      	negs	r0, r7
100104be:	4178      	adcs	r0, r7
100104c0:	2c00      	cmp	r4, #0
100104c2:	d117      	bne.n	100104f4 <__gedf2+0x74>
100104c4:	465f      	mov	r7, fp
100104c6:	433a      	orrs	r2, r7
100104c8:	d114      	bne.n	100104f4 <__gedf2+0x74>
100104ca:	464b      	mov	r3, r9
100104cc:	2000      	movs	r0, #0
100104ce:	2b00      	cmp	r3, #0
100104d0:	d00a      	beq.n	100104e8 <__gedf2+0x68>
100104d2:	e006      	b.n	100104e2 <__gedf2+0x62>
100104d4:	2c00      	cmp	r4, #0
100104d6:	d102      	bne.n	100104de <__gedf2+0x5e>
100104d8:	4658      	mov	r0, fp
100104da:	4302      	orrs	r2, r0
100104dc:	d001      	beq.n	100104e2 <__gedf2+0x62>
100104de:	4299      	cmp	r1, r3
100104e0:	d01a      	beq.n	10010518 <__gedf2+0x98>
100104e2:	2301      	movs	r3, #1
100104e4:	4248      	negs	r0, r1
100104e6:	4318      	orrs	r0, r3
100104e8:	bc3c      	pop	{r2, r3, r4, r5}
100104ea:	4690      	mov	r8, r2
100104ec:	4699      	mov	r9, r3
100104ee:	46a2      	mov	sl, r4
100104f0:	46ab      	mov	fp, r5
100104f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104f4:	2800      	cmp	r0, #0
100104f6:	d0f2      	beq.n	100104de <__gedf2+0x5e>
100104f8:	4258      	negs	r0, r3
100104fa:	4158      	adcs	r0, r3
100104fc:	2201      	movs	r2, #1
100104fe:	4240      	negs	r0, r0
10010500:	4310      	orrs	r0, r2
10010502:	e7f1      	b.n	100104e8 <__gedf2+0x68>
10010504:	0037      	movs	r7, r6
10010506:	4307      	orrs	r7, r0
10010508:	d0d0      	beq.n	100104ac <__gedf2+0x2c>
1001050a:	2002      	movs	r0, #2
1001050c:	4240      	negs	r0, r0
1001050e:	e7eb      	b.n	100104e8 <__gedf2+0x68>
10010510:	465f      	mov	r7, fp
10010512:	4317      	orrs	r7, r2
10010514:	d0cd      	beq.n	100104b2 <__gedf2+0x32>
10010516:	e7f8      	b.n	1001050a <__gedf2+0x8a>
10010518:	42a5      	cmp	r5, r4
1001051a:	dce2      	bgt.n	100104e2 <__gedf2+0x62>
1001051c:	db05      	blt.n	1001052a <__gedf2+0xaa>
1001051e:	455e      	cmp	r6, fp
10010520:	d8df      	bhi.n	100104e2 <__gedf2+0x62>
10010522:	d008      	beq.n	10010536 <__gedf2+0xb6>
10010524:	2000      	movs	r0, #0
10010526:	455e      	cmp	r6, fp
10010528:	d2de      	bcs.n	100104e8 <__gedf2+0x68>
1001052a:	4248      	negs	r0, r1
1001052c:	4148      	adcs	r0, r1
1001052e:	2301      	movs	r3, #1
10010530:	4240      	negs	r0, r0
10010532:	4318      	orrs	r0, r3
10010534:	e7d8      	b.n	100104e8 <__gedf2+0x68>
10010536:	45c4      	cmp	ip, r8
10010538:	d8d3      	bhi.n	100104e2 <__gedf2+0x62>
1001053a:	2000      	movs	r0, #0
1001053c:	45c4      	cmp	ip, r8
1001053e:	d3f4      	bcc.n	1001052a <__gedf2+0xaa>
10010540:	e7d2      	b.n	100104e8 <__gedf2+0x68>
10010542:	46c0      	nop			; (mov r8, r8)
10010544:	000007ff 	.word	0x000007ff

10010548 <__ledf2>:
10010548:	b5f0      	push	{r4, r5, r6, r7, lr}
1001054a:	465f      	mov	r7, fp
1001054c:	464d      	mov	r5, r9
1001054e:	4644      	mov	r4, r8
10010550:	4656      	mov	r6, sl
10010552:	b4f0      	push	{r4, r5, r6, r7}
10010554:	031c      	lsls	r4, r3, #12
10010556:	0b24      	lsrs	r4, r4, #12
10010558:	46a4      	mov	ip, r4
1001055a:	4c2f      	ldr	r4, [pc, #188]	; (10010618 <__ledf2+0xd0>)
1001055c:	030f      	lsls	r7, r1, #12
1001055e:	004d      	lsls	r5, r1, #1
10010560:	005e      	lsls	r6, r3, #1
10010562:	0fc9      	lsrs	r1, r1, #31
10010564:	4680      	mov	r8, r0
10010566:	0b3f      	lsrs	r7, r7, #12
10010568:	0d6d      	lsrs	r5, r5, #21
1001056a:	468b      	mov	fp, r1
1001056c:	4691      	mov	r9, r2
1001056e:	0d76      	lsrs	r6, r6, #21
10010570:	0fdb      	lsrs	r3, r3, #31
10010572:	42a5      	cmp	r5, r4
10010574:	d020      	beq.n	100105b8 <__ledf2+0x70>
10010576:	4c28      	ldr	r4, [pc, #160]	; (10010618 <__ledf2+0xd0>)
10010578:	42a6      	cmp	r6, r4
1001057a:	d022      	beq.n	100105c2 <__ledf2+0x7a>
1001057c:	2d00      	cmp	r5, #0
1001057e:	d112      	bne.n	100105a6 <__ledf2+0x5e>
10010580:	4338      	orrs	r0, r7
10010582:	4244      	negs	r4, r0
10010584:	4144      	adcs	r4, r0
10010586:	2e00      	cmp	r6, #0
10010588:	d020      	beq.n	100105cc <__ledf2+0x84>
1001058a:	2c00      	cmp	r4, #0
1001058c:	d00d      	beq.n	100105aa <__ledf2+0x62>
1001058e:	425c      	negs	r4, r3
10010590:	4163      	adcs	r3, r4
10010592:	2401      	movs	r4, #1
10010594:	425b      	negs	r3, r3
10010596:	431c      	orrs	r4, r3
10010598:	0020      	movs	r0, r4
1001059a:	bc3c      	pop	{r2, r3, r4, r5}
1001059c:	4690      	mov	r8, r2
1001059e:	4699      	mov	r9, r3
100105a0:	46a2      	mov	sl, r4
100105a2:	46ab      	mov	fp, r5
100105a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105a6:	2e00      	cmp	r6, #0
100105a8:	d017      	beq.n	100105da <__ledf2+0x92>
100105aa:	455b      	cmp	r3, fp
100105ac:	d019      	beq.n	100105e2 <__ledf2+0x9a>
100105ae:	465b      	mov	r3, fp
100105b0:	425c      	negs	r4, r3
100105b2:	2301      	movs	r3, #1
100105b4:	431c      	orrs	r4, r3
100105b6:	e7ef      	b.n	10010598 <__ledf2+0x50>
100105b8:	0039      	movs	r1, r7
100105ba:	2402      	movs	r4, #2
100105bc:	4301      	orrs	r1, r0
100105be:	d1eb      	bne.n	10010598 <__ledf2+0x50>
100105c0:	e7d9      	b.n	10010576 <__ledf2+0x2e>
100105c2:	4661      	mov	r1, ip
100105c4:	2402      	movs	r4, #2
100105c6:	4311      	orrs	r1, r2
100105c8:	d1e6      	bne.n	10010598 <__ledf2+0x50>
100105ca:	e7d7      	b.n	1001057c <__ledf2+0x34>
100105cc:	4661      	mov	r1, ip
100105ce:	430a      	orrs	r2, r1
100105d0:	d1db      	bne.n	1001058a <__ledf2+0x42>
100105d2:	2400      	movs	r4, #0
100105d4:	2800      	cmp	r0, #0
100105d6:	d0df      	beq.n	10010598 <__ledf2+0x50>
100105d8:	e7e9      	b.n	100105ae <__ledf2+0x66>
100105da:	4661      	mov	r1, ip
100105dc:	430a      	orrs	r2, r1
100105de:	d1e4      	bne.n	100105aa <__ledf2+0x62>
100105e0:	e7e5      	b.n	100105ae <__ledf2+0x66>
100105e2:	42b5      	cmp	r5, r6
100105e4:	dd03      	ble.n	100105ee <__ledf2+0xa6>
100105e6:	2201      	movs	r2, #1
100105e8:	425c      	negs	r4, r3
100105ea:	4314      	orrs	r4, r2
100105ec:	e7d4      	b.n	10010598 <__ledf2+0x50>
100105ee:	42b5      	cmp	r5, r6
100105f0:	dbcd      	blt.n	1001058e <__ledf2+0x46>
100105f2:	4567      	cmp	r7, ip
100105f4:	d8db      	bhi.n	100105ae <__ledf2+0x66>
100105f6:	d009      	beq.n	1001060c <__ledf2+0xc4>
100105f8:	2400      	movs	r4, #0
100105fa:	4567      	cmp	r7, ip
100105fc:	d2cc      	bcs.n	10010598 <__ledf2+0x50>
100105fe:	4659      	mov	r1, fp
10010600:	424c      	negs	r4, r1
10010602:	4161      	adcs	r1, r4
10010604:	2401      	movs	r4, #1
10010606:	4249      	negs	r1, r1
10010608:	430c      	orrs	r4, r1
1001060a:	e7c5      	b.n	10010598 <__ledf2+0x50>
1001060c:	45c8      	cmp	r8, r9
1001060e:	d8ce      	bhi.n	100105ae <__ledf2+0x66>
10010610:	2400      	movs	r4, #0
10010612:	45c8      	cmp	r8, r9
10010614:	d3f3      	bcc.n	100105fe <__ledf2+0xb6>
10010616:	e7bf      	b.n	10010598 <__ledf2+0x50>
10010618:	000007ff 	.word	0x000007ff

1001061c <__aeabi_dmul>:
1001061c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001061e:	465f      	mov	r7, fp
10010620:	4656      	mov	r6, sl
10010622:	464d      	mov	r5, r9
10010624:	4644      	mov	r4, r8
10010626:	b4f0      	push	{r4, r5, r6, r7}
10010628:	030d      	lsls	r5, r1, #12
1001062a:	4699      	mov	r9, r3
1001062c:	004e      	lsls	r6, r1, #1
1001062e:	0b2b      	lsrs	r3, r5, #12
10010630:	b087      	sub	sp, #28
10010632:	0007      	movs	r7, r0
10010634:	4692      	mov	sl, r2
10010636:	4680      	mov	r8, r0
10010638:	469b      	mov	fp, r3
1001063a:	0d76      	lsrs	r6, r6, #21
1001063c:	0fcc      	lsrs	r4, r1, #31
1001063e:	2e00      	cmp	r6, #0
10010640:	d069      	beq.n	10010716 <__aeabi_dmul+0xfa>
10010642:	4b6d      	ldr	r3, [pc, #436]	; (100107f8 <__aeabi_dmul+0x1dc>)
10010644:	429e      	cmp	r6, r3
10010646:	d035      	beq.n	100106b4 <__aeabi_dmul+0x98>
10010648:	465b      	mov	r3, fp
1001064a:	2280      	movs	r2, #128	; 0x80
1001064c:	00dd      	lsls	r5, r3, #3
1001064e:	0412      	lsls	r2, r2, #16
10010650:	0f43      	lsrs	r3, r0, #29
10010652:	4313      	orrs	r3, r2
10010654:	432b      	orrs	r3, r5
10010656:	469b      	mov	fp, r3
10010658:	00c3      	lsls	r3, r0, #3
1001065a:	4698      	mov	r8, r3
1001065c:	4b67      	ldr	r3, [pc, #412]	; (100107fc <__aeabi_dmul+0x1e0>)
1001065e:	2700      	movs	r7, #0
10010660:	469c      	mov	ip, r3
10010662:	2300      	movs	r3, #0
10010664:	4466      	add	r6, ip
10010666:	9301      	str	r3, [sp, #4]
10010668:	464a      	mov	r2, r9
1001066a:	0315      	lsls	r5, r2, #12
1001066c:	0050      	lsls	r0, r2, #1
1001066e:	0fd2      	lsrs	r2, r2, #31
10010670:	4653      	mov	r3, sl
10010672:	0b2d      	lsrs	r5, r5, #12
10010674:	0d40      	lsrs	r0, r0, #21
10010676:	4691      	mov	r9, r2
10010678:	d100      	bne.n	1001067c <__aeabi_dmul+0x60>
1001067a:	e076      	b.n	1001076a <__aeabi_dmul+0x14e>
1001067c:	4a5e      	ldr	r2, [pc, #376]	; (100107f8 <__aeabi_dmul+0x1dc>)
1001067e:	4290      	cmp	r0, r2
10010680:	d06c      	beq.n	1001075c <__aeabi_dmul+0x140>
10010682:	2280      	movs	r2, #128	; 0x80
10010684:	0f5b      	lsrs	r3, r3, #29
10010686:	0412      	lsls	r2, r2, #16
10010688:	4313      	orrs	r3, r2
1001068a:	4a5c      	ldr	r2, [pc, #368]	; (100107fc <__aeabi_dmul+0x1e0>)
1001068c:	00ed      	lsls	r5, r5, #3
1001068e:	4694      	mov	ip, r2
10010690:	431d      	orrs	r5, r3
10010692:	4653      	mov	r3, sl
10010694:	2200      	movs	r2, #0
10010696:	00db      	lsls	r3, r3, #3
10010698:	4460      	add	r0, ip
1001069a:	4649      	mov	r1, r9
1001069c:	1836      	adds	r6, r6, r0
1001069e:	1c70      	adds	r0, r6, #1
100106a0:	4061      	eors	r1, r4
100106a2:	9002      	str	r0, [sp, #8]
100106a4:	4317      	orrs	r7, r2
100106a6:	2f0f      	cmp	r7, #15
100106a8:	d900      	bls.n	100106ac <__aeabi_dmul+0x90>
100106aa:	e0af      	b.n	1001080c <__aeabi_dmul+0x1f0>
100106ac:	4854      	ldr	r0, [pc, #336]	; (10010800 <__aeabi_dmul+0x1e4>)
100106ae:	00bf      	lsls	r7, r7, #2
100106b0:	59c7      	ldr	r7, [r0, r7]
100106b2:	46bf      	mov	pc, r7
100106b4:	465b      	mov	r3, fp
100106b6:	431f      	orrs	r7, r3
100106b8:	d000      	beq.n	100106bc <__aeabi_dmul+0xa0>
100106ba:	e088      	b.n	100107ce <__aeabi_dmul+0x1b2>
100106bc:	2300      	movs	r3, #0
100106be:	469b      	mov	fp, r3
100106c0:	4698      	mov	r8, r3
100106c2:	3302      	adds	r3, #2
100106c4:	2708      	movs	r7, #8
100106c6:	9301      	str	r3, [sp, #4]
100106c8:	e7ce      	b.n	10010668 <__aeabi_dmul+0x4c>
100106ca:	4649      	mov	r1, r9
100106cc:	2a02      	cmp	r2, #2
100106ce:	d06a      	beq.n	100107a6 <__aeabi_dmul+0x18a>
100106d0:	2a03      	cmp	r2, #3
100106d2:	d100      	bne.n	100106d6 <__aeabi_dmul+0xba>
100106d4:	e209      	b.n	10010aea <__aeabi_dmul+0x4ce>
100106d6:	2a01      	cmp	r2, #1
100106d8:	d000      	beq.n	100106dc <__aeabi_dmul+0xc0>
100106da:	e1bb      	b.n	10010a54 <__aeabi_dmul+0x438>
100106dc:	4011      	ands	r1, r2
100106de:	2200      	movs	r2, #0
100106e0:	2300      	movs	r3, #0
100106e2:	2500      	movs	r5, #0
100106e4:	4690      	mov	r8, r2
100106e6:	b2cc      	uxtb	r4, r1
100106e8:	2100      	movs	r1, #0
100106ea:	032d      	lsls	r5, r5, #12
100106ec:	0d0a      	lsrs	r2, r1, #20
100106ee:	0512      	lsls	r2, r2, #20
100106f0:	0b2d      	lsrs	r5, r5, #12
100106f2:	4315      	orrs	r5, r2
100106f4:	4a43      	ldr	r2, [pc, #268]	; (10010804 <__aeabi_dmul+0x1e8>)
100106f6:	051b      	lsls	r3, r3, #20
100106f8:	4015      	ands	r5, r2
100106fa:	431d      	orrs	r5, r3
100106fc:	006d      	lsls	r5, r5, #1
100106fe:	07e4      	lsls	r4, r4, #31
10010700:	086d      	lsrs	r5, r5, #1
10010702:	4325      	orrs	r5, r4
10010704:	4640      	mov	r0, r8
10010706:	0029      	movs	r1, r5
10010708:	b007      	add	sp, #28
1001070a:	bc3c      	pop	{r2, r3, r4, r5}
1001070c:	4690      	mov	r8, r2
1001070e:	4699      	mov	r9, r3
10010710:	46a2      	mov	sl, r4
10010712:	46ab      	mov	fp, r5
10010714:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010716:	4303      	orrs	r3, r0
10010718:	d052      	beq.n	100107c0 <__aeabi_dmul+0x1a4>
1001071a:	465b      	mov	r3, fp
1001071c:	2b00      	cmp	r3, #0
1001071e:	d100      	bne.n	10010722 <__aeabi_dmul+0x106>
10010720:	e18a      	b.n	10010a38 <__aeabi_dmul+0x41c>
10010722:	4658      	mov	r0, fp
10010724:	f000 fdb6 	bl	10011294 <__clzsi2>
10010728:	0003      	movs	r3, r0
1001072a:	3b0b      	subs	r3, #11
1001072c:	2b1c      	cmp	r3, #28
1001072e:	dd00      	ble.n	10010732 <__aeabi_dmul+0x116>
10010730:	e17b      	b.n	10010a2a <__aeabi_dmul+0x40e>
10010732:	221d      	movs	r2, #29
10010734:	1ad3      	subs	r3, r2, r3
10010736:	003a      	movs	r2, r7
10010738:	0001      	movs	r1, r0
1001073a:	465d      	mov	r5, fp
1001073c:	40da      	lsrs	r2, r3
1001073e:	3908      	subs	r1, #8
10010740:	408d      	lsls	r5, r1
10010742:	0013      	movs	r3, r2
10010744:	408f      	lsls	r7, r1
10010746:	432b      	orrs	r3, r5
10010748:	469b      	mov	fp, r3
1001074a:	46b8      	mov	r8, r7
1001074c:	4b2e      	ldr	r3, [pc, #184]	; (10010808 <__aeabi_dmul+0x1ec>)
1001074e:	2700      	movs	r7, #0
10010750:	469c      	mov	ip, r3
10010752:	2300      	movs	r3, #0
10010754:	4460      	add	r0, ip
10010756:	4246      	negs	r6, r0
10010758:	9301      	str	r3, [sp, #4]
1001075a:	e785      	b.n	10010668 <__aeabi_dmul+0x4c>
1001075c:	4652      	mov	r2, sl
1001075e:	432a      	orrs	r2, r5
10010760:	d12c      	bne.n	100107bc <__aeabi_dmul+0x1a0>
10010762:	2500      	movs	r5, #0
10010764:	2300      	movs	r3, #0
10010766:	2202      	movs	r2, #2
10010768:	e797      	b.n	1001069a <__aeabi_dmul+0x7e>
1001076a:	4652      	mov	r2, sl
1001076c:	432a      	orrs	r2, r5
1001076e:	d021      	beq.n	100107b4 <__aeabi_dmul+0x198>
10010770:	2d00      	cmp	r5, #0
10010772:	d100      	bne.n	10010776 <__aeabi_dmul+0x15a>
10010774:	e154      	b.n	10010a20 <__aeabi_dmul+0x404>
10010776:	0028      	movs	r0, r5
10010778:	f000 fd8c 	bl	10011294 <__clzsi2>
1001077c:	0003      	movs	r3, r0
1001077e:	3b0b      	subs	r3, #11
10010780:	2b1c      	cmp	r3, #28
10010782:	dd00      	ble.n	10010786 <__aeabi_dmul+0x16a>
10010784:	e146      	b.n	10010a14 <__aeabi_dmul+0x3f8>
10010786:	211d      	movs	r1, #29
10010788:	1acb      	subs	r3, r1, r3
1001078a:	4651      	mov	r1, sl
1001078c:	0002      	movs	r2, r0
1001078e:	40d9      	lsrs	r1, r3
10010790:	4653      	mov	r3, sl
10010792:	3a08      	subs	r2, #8
10010794:	4095      	lsls	r5, r2
10010796:	4093      	lsls	r3, r2
10010798:	430d      	orrs	r5, r1
1001079a:	4a1b      	ldr	r2, [pc, #108]	; (10010808 <__aeabi_dmul+0x1ec>)
1001079c:	4694      	mov	ip, r2
1001079e:	4460      	add	r0, ip
100107a0:	4240      	negs	r0, r0
100107a2:	2200      	movs	r2, #0
100107a4:	e779      	b.n	1001069a <__aeabi_dmul+0x7e>
100107a6:	2401      	movs	r4, #1
100107a8:	2200      	movs	r2, #0
100107aa:	400c      	ands	r4, r1
100107ac:	4b12      	ldr	r3, [pc, #72]	; (100107f8 <__aeabi_dmul+0x1dc>)
100107ae:	2500      	movs	r5, #0
100107b0:	4690      	mov	r8, r2
100107b2:	e799      	b.n	100106e8 <__aeabi_dmul+0xcc>
100107b4:	2500      	movs	r5, #0
100107b6:	2300      	movs	r3, #0
100107b8:	2201      	movs	r2, #1
100107ba:	e76e      	b.n	1001069a <__aeabi_dmul+0x7e>
100107bc:	2203      	movs	r2, #3
100107be:	e76c      	b.n	1001069a <__aeabi_dmul+0x7e>
100107c0:	2300      	movs	r3, #0
100107c2:	469b      	mov	fp, r3
100107c4:	4698      	mov	r8, r3
100107c6:	3301      	adds	r3, #1
100107c8:	2704      	movs	r7, #4
100107ca:	9301      	str	r3, [sp, #4]
100107cc:	e74c      	b.n	10010668 <__aeabi_dmul+0x4c>
100107ce:	2303      	movs	r3, #3
100107d0:	270c      	movs	r7, #12
100107d2:	9301      	str	r3, [sp, #4]
100107d4:	e748      	b.n	10010668 <__aeabi_dmul+0x4c>
100107d6:	2300      	movs	r3, #0
100107d8:	2580      	movs	r5, #128	; 0x80
100107da:	4698      	mov	r8, r3
100107dc:	2400      	movs	r4, #0
100107de:	032d      	lsls	r5, r5, #12
100107e0:	4b05      	ldr	r3, [pc, #20]	; (100107f8 <__aeabi_dmul+0x1dc>)
100107e2:	e781      	b.n	100106e8 <__aeabi_dmul+0xcc>
100107e4:	465d      	mov	r5, fp
100107e6:	4643      	mov	r3, r8
100107e8:	9a01      	ldr	r2, [sp, #4]
100107ea:	e76f      	b.n	100106cc <__aeabi_dmul+0xb0>
100107ec:	465d      	mov	r5, fp
100107ee:	4643      	mov	r3, r8
100107f0:	0021      	movs	r1, r4
100107f2:	9a01      	ldr	r2, [sp, #4]
100107f4:	e76a      	b.n	100106cc <__aeabi_dmul+0xb0>
100107f6:	46c0      	nop			; (mov r8, r8)
100107f8:	000007ff 	.word	0x000007ff
100107fc:	fffffc01 	.word	0xfffffc01
10010800:	100134bc 	.word	0x100134bc
10010804:	800fffff 	.word	0x800fffff
10010808:	000003f3 	.word	0x000003f3
1001080c:	4642      	mov	r2, r8
1001080e:	0c12      	lsrs	r2, r2, #16
10010810:	4691      	mov	r9, r2
10010812:	0c1a      	lsrs	r2, r3, #16
10010814:	4694      	mov	ip, r2
10010816:	4642      	mov	r2, r8
10010818:	0417      	lsls	r7, r2, #16
1001081a:	464a      	mov	r2, r9
1001081c:	041b      	lsls	r3, r3, #16
1001081e:	0c1b      	lsrs	r3, r3, #16
10010820:	435a      	muls	r2, r3
10010822:	4660      	mov	r0, ip
10010824:	4690      	mov	r8, r2
10010826:	464a      	mov	r2, r9
10010828:	4342      	muls	r2, r0
1001082a:	0010      	movs	r0, r2
1001082c:	9203      	str	r2, [sp, #12]
1001082e:	4662      	mov	r2, ip
10010830:	001c      	movs	r4, r3
10010832:	0c3f      	lsrs	r7, r7, #16
10010834:	437a      	muls	r2, r7
10010836:	437c      	muls	r4, r7
10010838:	4442      	add	r2, r8
1001083a:	9201      	str	r2, [sp, #4]
1001083c:	0c22      	lsrs	r2, r4, #16
1001083e:	4692      	mov	sl, r2
10010840:	9a01      	ldr	r2, [sp, #4]
10010842:	4452      	add	r2, sl
10010844:	4590      	cmp	r8, r2
10010846:	d906      	bls.n	10010856 <__aeabi_dmul+0x23a>
10010848:	4682      	mov	sl, r0
1001084a:	2080      	movs	r0, #128	; 0x80
1001084c:	0240      	lsls	r0, r0, #9
1001084e:	4680      	mov	r8, r0
10010850:	44c2      	add	sl, r8
10010852:	4650      	mov	r0, sl
10010854:	9003      	str	r0, [sp, #12]
10010856:	0c10      	lsrs	r0, r2, #16
10010858:	9004      	str	r0, [sp, #16]
1001085a:	4648      	mov	r0, r9
1001085c:	0424      	lsls	r4, r4, #16
1001085e:	0c24      	lsrs	r4, r4, #16
10010860:	0412      	lsls	r2, r2, #16
10010862:	1912      	adds	r2, r2, r4
10010864:	9205      	str	r2, [sp, #20]
10010866:	0c2a      	lsrs	r2, r5, #16
10010868:	042d      	lsls	r5, r5, #16
1001086a:	0c2d      	lsrs	r5, r5, #16
1001086c:	4368      	muls	r0, r5
1001086e:	002c      	movs	r4, r5
10010870:	4682      	mov	sl, r0
10010872:	4648      	mov	r0, r9
10010874:	437c      	muls	r4, r7
10010876:	4350      	muls	r0, r2
10010878:	4681      	mov	r9, r0
1001087a:	0c20      	lsrs	r0, r4, #16
1001087c:	4680      	mov	r8, r0
1001087e:	4357      	muls	r7, r2
10010880:	4457      	add	r7, sl
10010882:	4447      	add	r7, r8
10010884:	45ba      	cmp	sl, r7
10010886:	d903      	bls.n	10010890 <__aeabi_dmul+0x274>
10010888:	2080      	movs	r0, #128	; 0x80
1001088a:	0240      	lsls	r0, r0, #9
1001088c:	4680      	mov	r8, r0
1001088e:	44c1      	add	r9, r8
10010890:	0c38      	lsrs	r0, r7, #16
10010892:	043f      	lsls	r7, r7, #16
10010894:	46b8      	mov	r8, r7
10010896:	4448      	add	r0, r9
10010898:	0424      	lsls	r4, r4, #16
1001089a:	0c24      	lsrs	r4, r4, #16
1001089c:	9001      	str	r0, [sp, #4]
1001089e:	9804      	ldr	r0, [sp, #16]
100108a0:	44a0      	add	r8, r4
100108a2:	4440      	add	r0, r8
100108a4:	9004      	str	r0, [sp, #16]
100108a6:	4658      	mov	r0, fp
100108a8:	0c00      	lsrs	r0, r0, #16
100108aa:	4681      	mov	r9, r0
100108ac:	4658      	mov	r0, fp
100108ae:	0404      	lsls	r4, r0, #16
100108b0:	0c20      	lsrs	r0, r4, #16
100108b2:	4682      	mov	sl, r0
100108b4:	0007      	movs	r7, r0
100108b6:	4648      	mov	r0, r9
100108b8:	435f      	muls	r7, r3
100108ba:	464c      	mov	r4, r9
100108bc:	4343      	muls	r3, r0
100108be:	4660      	mov	r0, ip
100108c0:	4360      	muls	r0, r4
100108c2:	4664      	mov	r4, ip
100108c4:	4683      	mov	fp, r0
100108c6:	4650      	mov	r0, sl
100108c8:	4344      	muls	r4, r0
100108ca:	0c38      	lsrs	r0, r7, #16
100108cc:	4684      	mov	ip, r0
100108ce:	18e4      	adds	r4, r4, r3
100108d0:	4464      	add	r4, ip
100108d2:	42a3      	cmp	r3, r4
100108d4:	d903      	bls.n	100108de <__aeabi_dmul+0x2c2>
100108d6:	2380      	movs	r3, #128	; 0x80
100108d8:	025b      	lsls	r3, r3, #9
100108da:	469c      	mov	ip, r3
100108dc:	44e3      	add	fp, ip
100108de:	4648      	mov	r0, r9
100108e0:	043f      	lsls	r7, r7, #16
100108e2:	0c23      	lsrs	r3, r4, #16
100108e4:	0c3f      	lsrs	r7, r7, #16
100108e6:	0424      	lsls	r4, r4, #16
100108e8:	19e4      	adds	r4, r4, r7
100108ea:	4657      	mov	r7, sl
100108ec:	4368      	muls	r0, r5
100108ee:	436f      	muls	r7, r5
100108f0:	4684      	mov	ip, r0
100108f2:	464d      	mov	r5, r9
100108f4:	4650      	mov	r0, sl
100108f6:	4355      	muls	r5, r2
100108f8:	4342      	muls	r2, r0
100108fa:	0c38      	lsrs	r0, r7, #16
100108fc:	4681      	mov	r9, r0
100108fe:	4462      	add	r2, ip
10010900:	444a      	add	r2, r9
10010902:	445b      	add	r3, fp
10010904:	4594      	cmp	ip, r2
10010906:	d903      	bls.n	10010910 <__aeabi_dmul+0x2f4>
10010908:	2080      	movs	r0, #128	; 0x80
1001090a:	0240      	lsls	r0, r0, #9
1001090c:	4684      	mov	ip, r0
1001090e:	4465      	add	r5, ip
10010910:	9803      	ldr	r0, [sp, #12]
10010912:	043f      	lsls	r7, r7, #16
10010914:	4683      	mov	fp, r0
10010916:	9804      	ldr	r0, [sp, #16]
10010918:	0c3f      	lsrs	r7, r7, #16
1001091a:	4684      	mov	ip, r0
1001091c:	44e3      	add	fp, ip
1001091e:	45c3      	cmp	fp, r8
10010920:	4180      	sbcs	r0, r0
10010922:	4240      	negs	r0, r0
10010924:	4682      	mov	sl, r0
10010926:	0410      	lsls	r0, r2, #16
10010928:	4684      	mov	ip, r0
1001092a:	9801      	ldr	r0, [sp, #4]
1001092c:	4467      	add	r7, ip
1001092e:	4684      	mov	ip, r0
10010930:	4467      	add	r7, ip
10010932:	44a3      	add	fp, r4
10010934:	46bc      	mov	ip, r7
10010936:	45a3      	cmp	fp, r4
10010938:	41a4      	sbcs	r4, r4
1001093a:	4699      	mov	r9, r3
1001093c:	44d4      	add	ip, sl
1001093e:	4264      	negs	r4, r4
10010940:	4287      	cmp	r7, r0
10010942:	41bf      	sbcs	r7, r7
10010944:	45d4      	cmp	ip, sl
10010946:	4180      	sbcs	r0, r0
10010948:	44e1      	add	r9, ip
1001094a:	46a0      	mov	r8, r4
1001094c:	4599      	cmp	r9, r3
1001094e:	419b      	sbcs	r3, r3
10010950:	427f      	negs	r7, r7
10010952:	4240      	negs	r0, r0
10010954:	44c8      	add	r8, r9
10010956:	4307      	orrs	r7, r0
10010958:	0c12      	lsrs	r2, r2, #16
1001095a:	18ba      	adds	r2, r7, r2
1001095c:	45a0      	cmp	r8, r4
1001095e:	41a4      	sbcs	r4, r4
10010960:	425f      	negs	r7, r3
10010962:	003b      	movs	r3, r7
10010964:	4264      	negs	r4, r4
10010966:	4323      	orrs	r3, r4
10010968:	18d7      	adds	r7, r2, r3
1001096a:	4643      	mov	r3, r8
1001096c:	197d      	adds	r5, r7, r5
1001096e:	0ddb      	lsrs	r3, r3, #23
10010970:	026d      	lsls	r5, r5, #9
10010972:	431d      	orrs	r5, r3
10010974:	465b      	mov	r3, fp
10010976:	025a      	lsls	r2, r3, #9
10010978:	9b05      	ldr	r3, [sp, #20]
1001097a:	431a      	orrs	r2, r3
1001097c:	1e53      	subs	r3, r2, #1
1001097e:	419a      	sbcs	r2, r3
10010980:	465b      	mov	r3, fp
10010982:	0ddb      	lsrs	r3, r3, #23
10010984:	431a      	orrs	r2, r3
10010986:	4643      	mov	r3, r8
10010988:	025b      	lsls	r3, r3, #9
1001098a:	4313      	orrs	r3, r2
1001098c:	01ea      	lsls	r2, r5, #7
1001098e:	d507      	bpl.n	100109a0 <__aeabi_dmul+0x384>
10010990:	2201      	movs	r2, #1
10010992:	085c      	lsrs	r4, r3, #1
10010994:	4013      	ands	r3, r2
10010996:	4323      	orrs	r3, r4
10010998:	07ea      	lsls	r2, r5, #31
1001099a:	9e02      	ldr	r6, [sp, #8]
1001099c:	4313      	orrs	r3, r2
1001099e:	086d      	lsrs	r5, r5, #1
100109a0:	4a57      	ldr	r2, [pc, #348]	; (10010b00 <__aeabi_dmul+0x4e4>)
100109a2:	18b2      	adds	r2, r6, r2
100109a4:	2a00      	cmp	r2, #0
100109a6:	dd4b      	ble.n	10010a40 <__aeabi_dmul+0x424>
100109a8:	0758      	lsls	r0, r3, #29
100109aa:	d009      	beq.n	100109c0 <__aeabi_dmul+0x3a4>
100109ac:	200f      	movs	r0, #15
100109ae:	4018      	ands	r0, r3
100109b0:	2804      	cmp	r0, #4
100109b2:	d005      	beq.n	100109c0 <__aeabi_dmul+0x3a4>
100109b4:	1d18      	adds	r0, r3, #4
100109b6:	4298      	cmp	r0, r3
100109b8:	419b      	sbcs	r3, r3
100109ba:	425b      	negs	r3, r3
100109bc:	18ed      	adds	r5, r5, r3
100109be:	0003      	movs	r3, r0
100109c0:	01e8      	lsls	r0, r5, #7
100109c2:	d504      	bpl.n	100109ce <__aeabi_dmul+0x3b2>
100109c4:	4a4f      	ldr	r2, [pc, #316]	; (10010b04 <__aeabi_dmul+0x4e8>)
100109c6:	4015      	ands	r5, r2
100109c8:	2280      	movs	r2, #128	; 0x80
100109ca:	00d2      	lsls	r2, r2, #3
100109cc:	18b2      	adds	r2, r6, r2
100109ce:	484e      	ldr	r0, [pc, #312]	; (10010b08 <__aeabi_dmul+0x4ec>)
100109d0:	4282      	cmp	r2, r0
100109d2:	dd00      	ble.n	100109d6 <__aeabi_dmul+0x3ba>
100109d4:	e6e7      	b.n	100107a6 <__aeabi_dmul+0x18a>
100109d6:	2401      	movs	r4, #1
100109d8:	08db      	lsrs	r3, r3, #3
100109da:	0768      	lsls	r0, r5, #29
100109dc:	4318      	orrs	r0, r3
100109de:	026d      	lsls	r5, r5, #9
100109e0:	0553      	lsls	r3, r2, #21
100109e2:	4680      	mov	r8, r0
100109e4:	0b2d      	lsrs	r5, r5, #12
100109e6:	0d5b      	lsrs	r3, r3, #21
100109e8:	400c      	ands	r4, r1
100109ea:	e67d      	b.n	100106e8 <__aeabi_dmul+0xcc>
100109ec:	2280      	movs	r2, #128	; 0x80
100109ee:	4659      	mov	r1, fp
100109f0:	0312      	lsls	r2, r2, #12
100109f2:	4211      	tst	r1, r2
100109f4:	d008      	beq.n	10010a08 <__aeabi_dmul+0x3ec>
100109f6:	4215      	tst	r5, r2
100109f8:	d106      	bne.n	10010a08 <__aeabi_dmul+0x3ec>
100109fa:	4315      	orrs	r5, r2
100109fc:	032d      	lsls	r5, r5, #12
100109fe:	4698      	mov	r8, r3
10010a00:	0b2d      	lsrs	r5, r5, #12
10010a02:	464c      	mov	r4, r9
10010a04:	4b41      	ldr	r3, [pc, #260]	; (10010b0c <__aeabi_dmul+0x4f0>)
10010a06:	e66f      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010a08:	465d      	mov	r5, fp
10010a0a:	4315      	orrs	r5, r2
10010a0c:	032d      	lsls	r5, r5, #12
10010a0e:	0b2d      	lsrs	r5, r5, #12
10010a10:	4b3e      	ldr	r3, [pc, #248]	; (10010b0c <__aeabi_dmul+0x4f0>)
10010a12:	e669      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010a14:	0003      	movs	r3, r0
10010a16:	4655      	mov	r5, sl
10010a18:	3b28      	subs	r3, #40	; 0x28
10010a1a:	409d      	lsls	r5, r3
10010a1c:	2300      	movs	r3, #0
10010a1e:	e6bc      	b.n	1001079a <__aeabi_dmul+0x17e>
10010a20:	4650      	mov	r0, sl
10010a22:	f000 fc37 	bl	10011294 <__clzsi2>
10010a26:	3020      	adds	r0, #32
10010a28:	e6a8      	b.n	1001077c <__aeabi_dmul+0x160>
10010a2a:	0003      	movs	r3, r0
10010a2c:	3b28      	subs	r3, #40	; 0x28
10010a2e:	409f      	lsls	r7, r3
10010a30:	2300      	movs	r3, #0
10010a32:	46bb      	mov	fp, r7
10010a34:	4698      	mov	r8, r3
10010a36:	e689      	b.n	1001074c <__aeabi_dmul+0x130>
10010a38:	f000 fc2c 	bl	10011294 <__clzsi2>
10010a3c:	3020      	adds	r0, #32
10010a3e:	e673      	b.n	10010728 <__aeabi_dmul+0x10c>
10010a40:	2401      	movs	r4, #1
10010a42:	1aa6      	subs	r6, r4, r2
10010a44:	2e38      	cmp	r6, #56	; 0x38
10010a46:	dd07      	ble.n	10010a58 <__aeabi_dmul+0x43c>
10010a48:	2200      	movs	r2, #0
10010a4a:	400c      	ands	r4, r1
10010a4c:	2300      	movs	r3, #0
10010a4e:	2500      	movs	r5, #0
10010a50:	4690      	mov	r8, r2
10010a52:	e649      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010a54:	9e02      	ldr	r6, [sp, #8]
10010a56:	e7a3      	b.n	100109a0 <__aeabi_dmul+0x384>
10010a58:	2e1f      	cmp	r6, #31
10010a5a:	dc20      	bgt.n	10010a9e <__aeabi_dmul+0x482>
10010a5c:	2220      	movs	r2, #32
10010a5e:	002c      	movs	r4, r5
10010a60:	0018      	movs	r0, r3
10010a62:	1b92      	subs	r2, r2, r6
10010a64:	40f0      	lsrs	r0, r6
10010a66:	4094      	lsls	r4, r2
10010a68:	4093      	lsls	r3, r2
10010a6a:	4304      	orrs	r4, r0
10010a6c:	1e58      	subs	r0, r3, #1
10010a6e:	4183      	sbcs	r3, r0
10010a70:	431c      	orrs	r4, r3
10010a72:	40f5      	lsrs	r5, r6
10010a74:	0763      	lsls	r3, r4, #29
10010a76:	d009      	beq.n	10010a8c <__aeabi_dmul+0x470>
10010a78:	230f      	movs	r3, #15
10010a7a:	4023      	ands	r3, r4
10010a7c:	2b04      	cmp	r3, #4
10010a7e:	d005      	beq.n	10010a8c <__aeabi_dmul+0x470>
10010a80:	0023      	movs	r3, r4
10010a82:	1d1c      	adds	r4, r3, #4
10010a84:	429c      	cmp	r4, r3
10010a86:	4192      	sbcs	r2, r2
10010a88:	4252      	negs	r2, r2
10010a8a:	18ad      	adds	r5, r5, r2
10010a8c:	022b      	lsls	r3, r5, #8
10010a8e:	d51f      	bpl.n	10010ad0 <__aeabi_dmul+0x4b4>
10010a90:	2401      	movs	r4, #1
10010a92:	2200      	movs	r2, #0
10010a94:	400c      	ands	r4, r1
10010a96:	2301      	movs	r3, #1
10010a98:	2500      	movs	r5, #0
10010a9a:	4690      	mov	r8, r2
10010a9c:	e624      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010a9e:	201f      	movs	r0, #31
10010aa0:	002c      	movs	r4, r5
10010aa2:	4240      	negs	r0, r0
10010aa4:	1a82      	subs	r2, r0, r2
10010aa6:	40d4      	lsrs	r4, r2
10010aa8:	2e20      	cmp	r6, #32
10010aaa:	d01c      	beq.n	10010ae6 <__aeabi_dmul+0x4ca>
10010aac:	2240      	movs	r2, #64	; 0x40
10010aae:	1b96      	subs	r6, r2, r6
10010ab0:	40b5      	lsls	r5, r6
10010ab2:	432b      	orrs	r3, r5
10010ab4:	1e58      	subs	r0, r3, #1
10010ab6:	4183      	sbcs	r3, r0
10010ab8:	2007      	movs	r0, #7
10010aba:	4323      	orrs	r3, r4
10010abc:	4018      	ands	r0, r3
10010abe:	2500      	movs	r5, #0
10010ac0:	2800      	cmp	r0, #0
10010ac2:	d009      	beq.n	10010ad8 <__aeabi_dmul+0x4bc>
10010ac4:	220f      	movs	r2, #15
10010ac6:	2500      	movs	r5, #0
10010ac8:	401a      	ands	r2, r3
10010aca:	001c      	movs	r4, r3
10010acc:	2a04      	cmp	r2, #4
10010ace:	d1d8      	bne.n	10010a82 <__aeabi_dmul+0x466>
10010ad0:	0023      	movs	r3, r4
10010ad2:	0768      	lsls	r0, r5, #29
10010ad4:	026d      	lsls	r5, r5, #9
10010ad6:	0b2d      	lsrs	r5, r5, #12
10010ad8:	2401      	movs	r4, #1
10010ada:	08db      	lsrs	r3, r3, #3
10010adc:	4303      	orrs	r3, r0
10010ade:	4698      	mov	r8, r3
10010ae0:	400c      	ands	r4, r1
10010ae2:	2300      	movs	r3, #0
10010ae4:	e600      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010ae6:	2500      	movs	r5, #0
10010ae8:	e7e3      	b.n	10010ab2 <__aeabi_dmul+0x496>
10010aea:	2280      	movs	r2, #128	; 0x80
10010aec:	2401      	movs	r4, #1
10010aee:	0312      	lsls	r2, r2, #12
10010af0:	4315      	orrs	r5, r2
10010af2:	032d      	lsls	r5, r5, #12
10010af4:	4698      	mov	r8, r3
10010af6:	0b2d      	lsrs	r5, r5, #12
10010af8:	400c      	ands	r4, r1
10010afa:	4b04      	ldr	r3, [pc, #16]	; (10010b0c <__aeabi_dmul+0x4f0>)
10010afc:	e5f4      	b.n	100106e8 <__aeabi_dmul+0xcc>
10010afe:	46c0      	nop			; (mov r8, r8)
10010b00:	000003ff 	.word	0x000003ff
10010b04:	feffffff 	.word	0xfeffffff
10010b08:	000007fe 	.word	0x000007fe
10010b0c:	000007ff 	.word	0x000007ff

10010b10 <__aeabi_dsub>:
10010b10:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b12:	4657      	mov	r7, sl
10010b14:	464e      	mov	r6, r9
10010b16:	4645      	mov	r5, r8
10010b18:	b4e0      	push	{r5, r6, r7}
10010b1a:	000e      	movs	r6, r1
10010b1c:	0011      	movs	r1, r2
10010b1e:	0ff2      	lsrs	r2, r6, #31
10010b20:	4692      	mov	sl, r2
10010b22:	00c5      	lsls	r5, r0, #3
10010b24:	0f42      	lsrs	r2, r0, #29
10010b26:	0318      	lsls	r0, r3, #12
10010b28:	0337      	lsls	r7, r6, #12
10010b2a:	0074      	lsls	r4, r6, #1
10010b2c:	0a40      	lsrs	r0, r0, #9
10010b2e:	0f4e      	lsrs	r6, r1, #29
10010b30:	0a7f      	lsrs	r7, r7, #9
10010b32:	4330      	orrs	r0, r6
10010b34:	4ecf      	ldr	r6, [pc, #828]	; (10010e74 <__aeabi_dsub+0x364>)
10010b36:	4317      	orrs	r7, r2
10010b38:	005a      	lsls	r2, r3, #1
10010b3a:	0d64      	lsrs	r4, r4, #21
10010b3c:	0d52      	lsrs	r2, r2, #21
10010b3e:	0fdb      	lsrs	r3, r3, #31
10010b40:	00c9      	lsls	r1, r1, #3
10010b42:	42b2      	cmp	r2, r6
10010b44:	d100      	bne.n	10010b48 <__aeabi_dsub+0x38>
10010b46:	e0e5      	b.n	10010d14 <__aeabi_dsub+0x204>
10010b48:	2601      	movs	r6, #1
10010b4a:	4073      	eors	r3, r6
10010b4c:	1aa6      	subs	r6, r4, r2
10010b4e:	46b4      	mov	ip, r6
10010b50:	4553      	cmp	r3, sl
10010b52:	d100      	bne.n	10010b56 <__aeabi_dsub+0x46>
10010b54:	e0af      	b.n	10010cb6 <__aeabi_dsub+0x1a6>
10010b56:	2e00      	cmp	r6, #0
10010b58:	dc00      	bgt.n	10010b5c <__aeabi_dsub+0x4c>
10010b5a:	e10d      	b.n	10010d78 <__aeabi_dsub+0x268>
10010b5c:	2a00      	cmp	r2, #0
10010b5e:	d13a      	bne.n	10010bd6 <__aeabi_dsub+0xc6>
10010b60:	0003      	movs	r3, r0
10010b62:	430b      	orrs	r3, r1
10010b64:	d000      	beq.n	10010b68 <__aeabi_dsub+0x58>
10010b66:	e0e4      	b.n	10010d32 <__aeabi_dsub+0x222>
10010b68:	076b      	lsls	r3, r5, #29
10010b6a:	d009      	beq.n	10010b80 <__aeabi_dsub+0x70>
10010b6c:	230f      	movs	r3, #15
10010b6e:	402b      	ands	r3, r5
10010b70:	2b04      	cmp	r3, #4
10010b72:	d005      	beq.n	10010b80 <__aeabi_dsub+0x70>
10010b74:	1d2b      	adds	r3, r5, #4
10010b76:	42ab      	cmp	r3, r5
10010b78:	41ad      	sbcs	r5, r5
10010b7a:	426d      	negs	r5, r5
10010b7c:	197f      	adds	r7, r7, r5
10010b7e:	001d      	movs	r5, r3
10010b80:	023b      	lsls	r3, r7, #8
10010b82:	d400      	bmi.n	10010b86 <__aeabi_dsub+0x76>
10010b84:	e088      	b.n	10010c98 <__aeabi_dsub+0x188>
10010b86:	4bbb      	ldr	r3, [pc, #748]	; (10010e74 <__aeabi_dsub+0x364>)
10010b88:	3401      	adds	r4, #1
10010b8a:	429c      	cmp	r4, r3
10010b8c:	d100      	bne.n	10010b90 <__aeabi_dsub+0x80>
10010b8e:	e110      	b.n	10010db2 <__aeabi_dsub+0x2a2>
10010b90:	003a      	movs	r2, r7
10010b92:	4bb9      	ldr	r3, [pc, #740]	; (10010e78 <__aeabi_dsub+0x368>)
10010b94:	4651      	mov	r1, sl
10010b96:	401a      	ands	r2, r3
10010b98:	2301      	movs	r3, #1
10010b9a:	0750      	lsls	r0, r2, #29
10010b9c:	08ed      	lsrs	r5, r5, #3
10010b9e:	0252      	lsls	r2, r2, #9
10010ba0:	0564      	lsls	r4, r4, #21
10010ba2:	4305      	orrs	r5, r0
10010ba4:	0b12      	lsrs	r2, r2, #12
10010ba6:	0d64      	lsrs	r4, r4, #21
10010ba8:	400b      	ands	r3, r1
10010baa:	2100      	movs	r1, #0
10010bac:	0028      	movs	r0, r5
10010bae:	0312      	lsls	r2, r2, #12
10010bb0:	0d0d      	lsrs	r5, r1, #20
10010bb2:	0b12      	lsrs	r2, r2, #12
10010bb4:	0564      	lsls	r4, r4, #21
10010bb6:	052d      	lsls	r5, r5, #20
10010bb8:	4315      	orrs	r5, r2
10010bba:	0862      	lsrs	r2, r4, #1
10010bbc:	4caf      	ldr	r4, [pc, #700]	; (10010e7c <__aeabi_dsub+0x36c>)
10010bbe:	07db      	lsls	r3, r3, #31
10010bc0:	402c      	ands	r4, r5
10010bc2:	4314      	orrs	r4, r2
10010bc4:	0064      	lsls	r4, r4, #1
10010bc6:	0864      	lsrs	r4, r4, #1
10010bc8:	431c      	orrs	r4, r3
10010bca:	0021      	movs	r1, r4
10010bcc:	bc1c      	pop	{r2, r3, r4}
10010bce:	4690      	mov	r8, r2
10010bd0:	4699      	mov	r9, r3
10010bd2:	46a2      	mov	sl, r4
10010bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bd6:	4ba7      	ldr	r3, [pc, #668]	; (10010e74 <__aeabi_dsub+0x364>)
10010bd8:	429c      	cmp	r4, r3
10010bda:	d0c5      	beq.n	10010b68 <__aeabi_dsub+0x58>
10010bdc:	2380      	movs	r3, #128	; 0x80
10010bde:	041b      	lsls	r3, r3, #16
10010be0:	4318      	orrs	r0, r3
10010be2:	4663      	mov	r3, ip
10010be4:	2b38      	cmp	r3, #56	; 0x38
10010be6:	dd00      	ble.n	10010bea <__aeabi_dsub+0xda>
10010be8:	e0fd      	b.n	10010de6 <__aeabi_dsub+0x2d6>
10010bea:	2b1f      	cmp	r3, #31
10010bec:	dd00      	ble.n	10010bf0 <__aeabi_dsub+0xe0>
10010bee:	e130      	b.n	10010e52 <__aeabi_dsub+0x342>
10010bf0:	4662      	mov	r2, ip
10010bf2:	2320      	movs	r3, #32
10010bf4:	1a9b      	subs	r3, r3, r2
10010bf6:	0002      	movs	r2, r0
10010bf8:	409a      	lsls	r2, r3
10010bfa:	4666      	mov	r6, ip
10010bfc:	4690      	mov	r8, r2
10010bfe:	000a      	movs	r2, r1
10010c00:	4099      	lsls	r1, r3
10010c02:	40f2      	lsrs	r2, r6
10010c04:	4646      	mov	r6, r8
10010c06:	1e4b      	subs	r3, r1, #1
10010c08:	4199      	sbcs	r1, r3
10010c0a:	4332      	orrs	r2, r6
10010c0c:	4311      	orrs	r1, r2
10010c0e:	4663      	mov	r3, ip
10010c10:	0002      	movs	r2, r0
10010c12:	40da      	lsrs	r2, r3
10010c14:	1a69      	subs	r1, r5, r1
10010c16:	428d      	cmp	r5, r1
10010c18:	419b      	sbcs	r3, r3
10010c1a:	000d      	movs	r5, r1
10010c1c:	1aba      	subs	r2, r7, r2
10010c1e:	425b      	negs	r3, r3
10010c20:	1ad7      	subs	r7, r2, r3
10010c22:	023b      	lsls	r3, r7, #8
10010c24:	d535      	bpl.n	10010c92 <__aeabi_dsub+0x182>
10010c26:	027a      	lsls	r2, r7, #9
10010c28:	0a53      	lsrs	r3, r2, #9
10010c2a:	4698      	mov	r8, r3
10010c2c:	4643      	mov	r3, r8
10010c2e:	2b00      	cmp	r3, #0
10010c30:	d100      	bne.n	10010c34 <__aeabi_dsub+0x124>
10010c32:	e0c4      	b.n	10010dbe <__aeabi_dsub+0x2ae>
10010c34:	4640      	mov	r0, r8
10010c36:	f000 fb2d 	bl	10011294 <__clzsi2>
10010c3a:	0003      	movs	r3, r0
10010c3c:	3b08      	subs	r3, #8
10010c3e:	2b1f      	cmp	r3, #31
10010c40:	dd00      	ble.n	10010c44 <__aeabi_dsub+0x134>
10010c42:	e0c5      	b.n	10010dd0 <__aeabi_dsub+0x2c0>
10010c44:	2220      	movs	r2, #32
10010c46:	0029      	movs	r1, r5
10010c48:	1ad2      	subs	r2, r2, r3
10010c4a:	4647      	mov	r7, r8
10010c4c:	40d1      	lsrs	r1, r2
10010c4e:	409f      	lsls	r7, r3
10010c50:	000a      	movs	r2, r1
10010c52:	409d      	lsls	r5, r3
10010c54:	433a      	orrs	r2, r7
10010c56:	429c      	cmp	r4, r3
10010c58:	dd00      	ble.n	10010c5c <__aeabi_dsub+0x14c>
10010c5a:	e0c0      	b.n	10010dde <__aeabi_dsub+0x2ce>
10010c5c:	1b1c      	subs	r4, r3, r4
10010c5e:	1c63      	adds	r3, r4, #1
10010c60:	2b1f      	cmp	r3, #31
10010c62:	dd00      	ble.n	10010c66 <__aeabi_dsub+0x156>
10010c64:	e0e4      	b.n	10010e30 <__aeabi_dsub+0x320>
10010c66:	2120      	movs	r1, #32
10010c68:	0014      	movs	r4, r2
10010c6a:	0028      	movs	r0, r5
10010c6c:	1ac9      	subs	r1, r1, r3
10010c6e:	40d8      	lsrs	r0, r3
10010c70:	408c      	lsls	r4, r1
10010c72:	408d      	lsls	r5, r1
10010c74:	4304      	orrs	r4, r0
10010c76:	40da      	lsrs	r2, r3
10010c78:	1e68      	subs	r0, r5, #1
10010c7a:	4185      	sbcs	r5, r0
10010c7c:	0017      	movs	r7, r2
10010c7e:	4325      	orrs	r5, r4
10010c80:	2400      	movs	r4, #0
10010c82:	e771      	b.n	10010b68 <__aeabi_dsub+0x58>
10010c84:	4642      	mov	r2, r8
10010c86:	4663      	mov	r3, ip
10010c88:	431a      	orrs	r2, r3
10010c8a:	d100      	bne.n	10010c8e <__aeabi_dsub+0x17e>
10010c8c:	e24c      	b.n	10011128 <__aeabi_dsub+0x618>
10010c8e:	4667      	mov	r7, ip
10010c90:	4645      	mov	r5, r8
10010c92:	076b      	lsls	r3, r5, #29
10010c94:	d000      	beq.n	10010c98 <__aeabi_dsub+0x188>
10010c96:	e769      	b.n	10010b6c <__aeabi_dsub+0x5c>
10010c98:	2301      	movs	r3, #1
10010c9a:	4651      	mov	r1, sl
10010c9c:	0778      	lsls	r0, r7, #29
10010c9e:	08ed      	lsrs	r5, r5, #3
10010ca0:	08fa      	lsrs	r2, r7, #3
10010ca2:	400b      	ands	r3, r1
10010ca4:	4305      	orrs	r5, r0
10010ca6:	4973      	ldr	r1, [pc, #460]	; (10010e74 <__aeabi_dsub+0x364>)
10010ca8:	428c      	cmp	r4, r1
10010caa:	d038      	beq.n	10010d1e <__aeabi_dsub+0x20e>
10010cac:	0312      	lsls	r2, r2, #12
10010cae:	0564      	lsls	r4, r4, #21
10010cb0:	0b12      	lsrs	r2, r2, #12
10010cb2:	0d64      	lsrs	r4, r4, #21
10010cb4:	e779      	b.n	10010baa <__aeabi_dsub+0x9a>
10010cb6:	2e00      	cmp	r6, #0
10010cb8:	dc00      	bgt.n	10010cbc <__aeabi_dsub+0x1ac>
10010cba:	e09a      	b.n	10010df2 <__aeabi_dsub+0x2e2>
10010cbc:	2a00      	cmp	r2, #0
10010cbe:	d047      	beq.n	10010d50 <__aeabi_dsub+0x240>
10010cc0:	4a6c      	ldr	r2, [pc, #432]	; (10010e74 <__aeabi_dsub+0x364>)
10010cc2:	4294      	cmp	r4, r2
10010cc4:	d100      	bne.n	10010cc8 <__aeabi_dsub+0x1b8>
10010cc6:	e74f      	b.n	10010b68 <__aeabi_dsub+0x58>
10010cc8:	2280      	movs	r2, #128	; 0x80
10010cca:	0412      	lsls	r2, r2, #16
10010ccc:	4310      	orrs	r0, r2
10010cce:	4662      	mov	r2, ip
10010cd0:	2a38      	cmp	r2, #56	; 0x38
10010cd2:	dc00      	bgt.n	10010cd6 <__aeabi_dsub+0x1c6>
10010cd4:	e108      	b.n	10010ee8 <__aeabi_dsub+0x3d8>
10010cd6:	4301      	orrs	r1, r0
10010cd8:	1e48      	subs	r0, r1, #1
10010cda:	4181      	sbcs	r1, r0
10010cdc:	2200      	movs	r2, #0
10010cde:	b2c9      	uxtb	r1, r1
10010ce0:	1949      	adds	r1, r1, r5
10010ce2:	19d2      	adds	r2, r2, r7
10010ce4:	42a9      	cmp	r1, r5
10010ce6:	41bf      	sbcs	r7, r7
10010ce8:	000d      	movs	r5, r1
10010cea:	427f      	negs	r7, r7
10010cec:	18bf      	adds	r7, r7, r2
10010cee:	023a      	lsls	r2, r7, #8
10010cf0:	d400      	bmi.n	10010cf4 <__aeabi_dsub+0x1e4>
10010cf2:	e142      	b.n	10010f7a <__aeabi_dsub+0x46a>
10010cf4:	4a5f      	ldr	r2, [pc, #380]	; (10010e74 <__aeabi_dsub+0x364>)
10010cf6:	3401      	adds	r4, #1
10010cf8:	4294      	cmp	r4, r2
10010cfa:	d100      	bne.n	10010cfe <__aeabi_dsub+0x1ee>
10010cfc:	e14e      	b.n	10010f9c <__aeabi_dsub+0x48c>
10010cfe:	2001      	movs	r0, #1
10010d00:	4a5d      	ldr	r2, [pc, #372]	; (10010e78 <__aeabi_dsub+0x368>)
10010d02:	0869      	lsrs	r1, r5, #1
10010d04:	403a      	ands	r2, r7
10010d06:	4028      	ands	r0, r5
10010d08:	4308      	orrs	r0, r1
10010d0a:	07d5      	lsls	r5, r2, #31
10010d0c:	4305      	orrs	r5, r0
10010d0e:	0857      	lsrs	r7, r2, #1
10010d10:	469a      	mov	sl, r3
10010d12:	e729      	b.n	10010b68 <__aeabi_dsub+0x58>
10010d14:	0006      	movs	r6, r0
10010d16:	430e      	orrs	r6, r1
10010d18:	d000      	beq.n	10010d1c <__aeabi_dsub+0x20c>
10010d1a:	e717      	b.n	10010b4c <__aeabi_dsub+0x3c>
10010d1c:	e714      	b.n	10010b48 <__aeabi_dsub+0x38>
10010d1e:	0029      	movs	r1, r5
10010d20:	4311      	orrs	r1, r2
10010d22:	d100      	bne.n	10010d26 <__aeabi_dsub+0x216>
10010d24:	e1f9      	b.n	1001111a <__aeabi_dsub+0x60a>
10010d26:	2180      	movs	r1, #128	; 0x80
10010d28:	0309      	lsls	r1, r1, #12
10010d2a:	430a      	orrs	r2, r1
10010d2c:	0312      	lsls	r2, r2, #12
10010d2e:	0b12      	lsrs	r2, r2, #12
10010d30:	e73b      	b.n	10010baa <__aeabi_dsub+0x9a>
10010d32:	2301      	movs	r3, #1
10010d34:	425b      	negs	r3, r3
10010d36:	4698      	mov	r8, r3
10010d38:	44c4      	add	ip, r8
10010d3a:	4663      	mov	r3, ip
10010d3c:	2b00      	cmp	r3, #0
10010d3e:	d172      	bne.n	10010e26 <__aeabi_dsub+0x316>
10010d40:	1a69      	subs	r1, r5, r1
10010d42:	428d      	cmp	r5, r1
10010d44:	419b      	sbcs	r3, r3
10010d46:	1a3f      	subs	r7, r7, r0
10010d48:	425b      	negs	r3, r3
10010d4a:	1aff      	subs	r7, r7, r3
10010d4c:	000d      	movs	r5, r1
10010d4e:	e768      	b.n	10010c22 <__aeabi_dsub+0x112>
10010d50:	0002      	movs	r2, r0
10010d52:	430a      	orrs	r2, r1
10010d54:	d100      	bne.n	10010d58 <__aeabi_dsub+0x248>
10010d56:	e707      	b.n	10010b68 <__aeabi_dsub+0x58>
10010d58:	2201      	movs	r2, #1
10010d5a:	4252      	negs	r2, r2
10010d5c:	4690      	mov	r8, r2
10010d5e:	44c4      	add	ip, r8
10010d60:	4662      	mov	r2, ip
10010d62:	2a00      	cmp	r2, #0
10010d64:	d000      	beq.n	10010d68 <__aeabi_dsub+0x258>
10010d66:	e0e6      	b.n	10010f36 <__aeabi_dsub+0x426>
10010d68:	1869      	adds	r1, r5, r1
10010d6a:	42a9      	cmp	r1, r5
10010d6c:	41b6      	sbcs	r6, r6
10010d6e:	183f      	adds	r7, r7, r0
10010d70:	4276      	negs	r6, r6
10010d72:	19f7      	adds	r7, r6, r7
10010d74:	000d      	movs	r5, r1
10010d76:	e7ba      	b.n	10010cee <__aeabi_dsub+0x1de>
10010d78:	2e00      	cmp	r6, #0
10010d7a:	d000      	beq.n	10010d7e <__aeabi_dsub+0x26e>
10010d7c:	e080      	b.n	10010e80 <__aeabi_dsub+0x370>
10010d7e:	1c62      	adds	r2, r4, #1
10010d80:	0552      	lsls	r2, r2, #21
10010d82:	0d52      	lsrs	r2, r2, #21
10010d84:	2a01      	cmp	r2, #1
10010d86:	dc00      	bgt.n	10010d8a <__aeabi_dsub+0x27a>
10010d88:	e0f9      	b.n	10010f7e <__aeabi_dsub+0x46e>
10010d8a:	1a6a      	subs	r2, r5, r1
10010d8c:	4691      	mov	r9, r2
10010d8e:	454d      	cmp	r5, r9
10010d90:	41b6      	sbcs	r6, r6
10010d92:	1a3a      	subs	r2, r7, r0
10010d94:	4276      	negs	r6, r6
10010d96:	1b92      	subs	r2, r2, r6
10010d98:	4690      	mov	r8, r2
10010d9a:	0212      	lsls	r2, r2, #8
10010d9c:	d400      	bmi.n	10010da0 <__aeabi_dsub+0x290>
10010d9e:	e099      	b.n	10010ed4 <__aeabi_dsub+0x3c4>
10010da0:	1b4d      	subs	r5, r1, r5
10010da2:	42a9      	cmp	r1, r5
10010da4:	4189      	sbcs	r1, r1
10010da6:	1bc7      	subs	r7, r0, r7
10010da8:	4249      	negs	r1, r1
10010daa:	1a7a      	subs	r2, r7, r1
10010dac:	4690      	mov	r8, r2
10010dae:	469a      	mov	sl, r3
10010db0:	e73c      	b.n	10010c2c <__aeabi_dsub+0x11c>
10010db2:	4652      	mov	r2, sl
10010db4:	2301      	movs	r3, #1
10010db6:	2500      	movs	r5, #0
10010db8:	4013      	ands	r3, r2
10010dba:	2200      	movs	r2, #0
10010dbc:	e6f5      	b.n	10010baa <__aeabi_dsub+0x9a>
10010dbe:	0028      	movs	r0, r5
10010dc0:	f000 fa68 	bl	10011294 <__clzsi2>
10010dc4:	3020      	adds	r0, #32
10010dc6:	0003      	movs	r3, r0
10010dc8:	3b08      	subs	r3, #8
10010dca:	2b1f      	cmp	r3, #31
10010dcc:	dc00      	bgt.n	10010dd0 <__aeabi_dsub+0x2c0>
10010dce:	e739      	b.n	10010c44 <__aeabi_dsub+0x134>
10010dd0:	002a      	movs	r2, r5
10010dd2:	3828      	subs	r0, #40	; 0x28
10010dd4:	4082      	lsls	r2, r0
10010dd6:	2500      	movs	r5, #0
10010dd8:	429c      	cmp	r4, r3
10010dda:	dc00      	bgt.n	10010dde <__aeabi_dsub+0x2ce>
10010ddc:	e73e      	b.n	10010c5c <__aeabi_dsub+0x14c>
10010dde:	4f26      	ldr	r7, [pc, #152]	; (10010e78 <__aeabi_dsub+0x368>)
10010de0:	1ae4      	subs	r4, r4, r3
10010de2:	4017      	ands	r7, r2
10010de4:	e6c0      	b.n	10010b68 <__aeabi_dsub+0x58>
10010de6:	4301      	orrs	r1, r0
10010de8:	1e48      	subs	r0, r1, #1
10010dea:	4181      	sbcs	r1, r0
10010dec:	2200      	movs	r2, #0
10010dee:	b2c9      	uxtb	r1, r1
10010df0:	e710      	b.n	10010c14 <__aeabi_dsub+0x104>
10010df2:	2e00      	cmp	r6, #0
10010df4:	d000      	beq.n	10010df8 <__aeabi_dsub+0x2e8>
10010df6:	e0f1      	b.n	10010fdc <__aeabi_dsub+0x4cc>
10010df8:	1c62      	adds	r2, r4, #1
10010dfa:	4694      	mov	ip, r2
10010dfc:	0552      	lsls	r2, r2, #21
10010dfe:	0d52      	lsrs	r2, r2, #21
10010e00:	2a01      	cmp	r2, #1
10010e02:	dc00      	bgt.n	10010e06 <__aeabi_dsub+0x2f6>
10010e04:	e0a0      	b.n	10010f48 <__aeabi_dsub+0x438>
10010e06:	4a1b      	ldr	r2, [pc, #108]	; (10010e74 <__aeabi_dsub+0x364>)
10010e08:	4594      	cmp	ip, r2
10010e0a:	d100      	bne.n	10010e0e <__aeabi_dsub+0x2fe>
10010e0c:	e0c5      	b.n	10010f9a <__aeabi_dsub+0x48a>
10010e0e:	1869      	adds	r1, r5, r1
10010e10:	42a9      	cmp	r1, r5
10010e12:	4192      	sbcs	r2, r2
10010e14:	183f      	adds	r7, r7, r0
10010e16:	4252      	negs	r2, r2
10010e18:	19d2      	adds	r2, r2, r7
10010e1a:	0849      	lsrs	r1, r1, #1
10010e1c:	07d5      	lsls	r5, r2, #31
10010e1e:	430d      	orrs	r5, r1
10010e20:	0857      	lsrs	r7, r2, #1
10010e22:	4664      	mov	r4, ip
10010e24:	e6a0      	b.n	10010b68 <__aeabi_dsub+0x58>
10010e26:	4b13      	ldr	r3, [pc, #76]	; (10010e74 <__aeabi_dsub+0x364>)
10010e28:	429c      	cmp	r4, r3
10010e2a:	d000      	beq.n	10010e2e <__aeabi_dsub+0x31e>
10010e2c:	e6d9      	b.n	10010be2 <__aeabi_dsub+0xd2>
10010e2e:	e69b      	b.n	10010b68 <__aeabi_dsub+0x58>
10010e30:	0011      	movs	r1, r2
10010e32:	3c1f      	subs	r4, #31
10010e34:	40e1      	lsrs	r1, r4
10010e36:	000c      	movs	r4, r1
10010e38:	2b20      	cmp	r3, #32
10010e3a:	d100      	bne.n	10010e3e <__aeabi_dsub+0x32e>
10010e3c:	e080      	b.n	10010f40 <__aeabi_dsub+0x430>
10010e3e:	2140      	movs	r1, #64	; 0x40
10010e40:	1acb      	subs	r3, r1, r3
10010e42:	409a      	lsls	r2, r3
10010e44:	4315      	orrs	r5, r2
10010e46:	1e6a      	subs	r2, r5, #1
10010e48:	4195      	sbcs	r5, r2
10010e4a:	2700      	movs	r7, #0
10010e4c:	4325      	orrs	r5, r4
10010e4e:	2400      	movs	r4, #0
10010e50:	e71f      	b.n	10010c92 <__aeabi_dsub+0x182>
10010e52:	4663      	mov	r3, ip
10010e54:	0002      	movs	r2, r0
10010e56:	3b20      	subs	r3, #32
10010e58:	40da      	lsrs	r2, r3
10010e5a:	4663      	mov	r3, ip
10010e5c:	2b20      	cmp	r3, #32
10010e5e:	d071      	beq.n	10010f44 <__aeabi_dsub+0x434>
10010e60:	2340      	movs	r3, #64	; 0x40
10010e62:	4666      	mov	r6, ip
10010e64:	1b9b      	subs	r3, r3, r6
10010e66:	4098      	lsls	r0, r3
10010e68:	4301      	orrs	r1, r0
10010e6a:	1e48      	subs	r0, r1, #1
10010e6c:	4181      	sbcs	r1, r0
10010e6e:	4311      	orrs	r1, r2
10010e70:	2200      	movs	r2, #0
10010e72:	e6cf      	b.n	10010c14 <__aeabi_dsub+0x104>
10010e74:	000007ff 	.word	0x000007ff
10010e78:	ff7fffff 	.word	0xff7fffff
10010e7c:	800fffff 	.word	0x800fffff
10010e80:	2c00      	cmp	r4, #0
10010e82:	d048      	beq.n	10010f16 <__aeabi_dsub+0x406>
10010e84:	4cca      	ldr	r4, [pc, #808]	; (100111b0 <__aeabi_dsub+0x6a0>)
10010e86:	42a2      	cmp	r2, r4
10010e88:	d100      	bne.n	10010e8c <__aeabi_dsub+0x37c>
10010e8a:	e0a2      	b.n	10010fd2 <__aeabi_dsub+0x4c2>
10010e8c:	4274      	negs	r4, r6
10010e8e:	46a1      	mov	r9, r4
10010e90:	2480      	movs	r4, #128	; 0x80
10010e92:	0424      	lsls	r4, r4, #16
10010e94:	4327      	orrs	r7, r4
10010e96:	464c      	mov	r4, r9
10010e98:	2c38      	cmp	r4, #56	; 0x38
10010e9a:	dd00      	ble.n	10010e9e <__aeabi_dsub+0x38e>
10010e9c:	e0db      	b.n	10011056 <__aeabi_dsub+0x546>
10010e9e:	2c1f      	cmp	r4, #31
10010ea0:	dd00      	ble.n	10010ea4 <__aeabi_dsub+0x394>
10010ea2:	e144      	b.n	1001112e <__aeabi_dsub+0x61e>
10010ea4:	464e      	mov	r6, r9
10010ea6:	2420      	movs	r4, #32
10010ea8:	1ba4      	subs	r4, r4, r6
10010eaa:	003e      	movs	r6, r7
10010eac:	40a6      	lsls	r6, r4
10010eae:	46a2      	mov	sl, r4
10010eb0:	46b0      	mov	r8, r6
10010eb2:	464c      	mov	r4, r9
10010eb4:	002e      	movs	r6, r5
10010eb6:	40e6      	lsrs	r6, r4
10010eb8:	46b4      	mov	ip, r6
10010eba:	4646      	mov	r6, r8
10010ebc:	4664      	mov	r4, ip
10010ebe:	4326      	orrs	r6, r4
10010ec0:	4654      	mov	r4, sl
10010ec2:	40a5      	lsls	r5, r4
10010ec4:	1e6c      	subs	r4, r5, #1
10010ec6:	41a5      	sbcs	r5, r4
10010ec8:	0034      	movs	r4, r6
10010eca:	432c      	orrs	r4, r5
10010ecc:	464d      	mov	r5, r9
10010ece:	40ef      	lsrs	r7, r5
10010ed0:	1b0d      	subs	r5, r1, r4
10010ed2:	e028      	b.n	10010f26 <__aeabi_dsub+0x416>
10010ed4:	464a      	mov	r2, r9
10010ed6:	4643      	mov	r3, r8
10010ed8:	464d      	mov	r5, r9
10010eda:	431a      	orrs	r2, r3
10010edc:	d000      	beq.n	10010ee0 <__aeabi_dsub+0x3d0>
10010ede:	e6a5      	b.n	10010c2c <__aeabi_dsub+0x11c>
10010ee0:	2300      	movs	r3, #0
10010ee2:	2400      	movs	r4, #0
10010ee4:	2500      	movs	r5, #0
10010ee6:	e6de      	b.n	10010ca6 <__aeabi_dsub+0x196>
10010ee8:	2a1f      	cmp	r2, #31
10010eea:	dc5a      	bgt.n	10010fa2 <__aeabi_dsub+0x492>
10010eec:	4666      	mov	r6, ip
10010eee:	2220      	movs	r2, #32
10010ef0:	1b92      	subs	r2, r2, r6
10010ef2:	0006      	movs	r6, r0
10010ef4:	4096      	lsls	r6, r2
10010ef6:	4691      	mov	r9, r2
10010ef8:	46b0      	mov	r8, r6
10010efa:	4662      	mov	r2, ip
10010efc:	000e      	movs	r6, r1
10010efe:	40d6      	lsrs	r6, r2
10010f00:	4642      	mov	r2, r8
10010f02:	4316      	orrs	r6, r2
10010f04:	464a      	mov	r2, r9
10010f06:	4091      	lsls	r1, r2
10010f08:	1e4a      	subs	r2, r1, #1
10010f0a:	4191      	sbcs	r1, r2
10010f0c:	0002      	movs	r2, r0
10010f0e:	4660      	mov	r0, ip
10010f10:	4331      	orrs	r1, r6
10010f12:	40c2      	lsrs	r2, r0
10010f14:	e6e4      	b.n	10010ce0 <__aeabi_dsub+0x1d0>
10010f16:	003c      	movs	r4, r7
10010f18:	432c      	orrs	r4, r5
10010f1a:	d05a      	beq.n	10010fd2 <__aeabi_dsub+0x4c2>
10010f1c:	43f4      	mvns	r4, r6
10010f1e:	46a1      	mov	r9, r4
10010f20:	2c00      	cmp	r4, #0
10010f22:	d152      	bne.n	10010fca <__aeabi_dsub+0x4ba>
10010f24:	1b4d      	subs	r5, r1, r5
10010f26:	42a9      	cmp	r1, r5
10010f28:	4189      	sbcs	r1, r1
10010f2a:	1bc7      	subs	r7, r0, r7
10010f2c:	4249      	negs	r1, r1
10010f2e:	1a7f      	subs	r7, r7, r1
10010f30:	0014      	movs	r4, r2
10010f32:	469a      	mov	sl, r3
10010f34:	e675      	b.n	10010c22 <__aeabi_dsub+0x112>
10010f36:	4a9e      	ldr	r2, [pc, #632]	; (100111b0 <__aeabi_dsub+0x6a0>)
10010f38:	4294      	cmp	r4, r2
10010f3a:	d000      	beq.n	10010f3e <__aeabi_dsub+0x42e>
10010f3c:	e6c7      	b.n	10010cce <__aeabi_dsub+0x1be>
10010f3e:	e613      	b.n	10010b68 <__aeabi_dsub+0x58>
10010f40:	2200      	movs	r2, #0
10010f42:	e77f      	b.n	10010e44 <__aeabi_dsub+0x334>
10010f44:	2000      	movs	r0, #0
10010f46:	e78f      	b.n	10010e68 <__aeabi_dsub+0x358>
10010f48:	2c00      	cmp	r4, #0
10010f4a:	d000      	beq.n	10010f4e <__aeabi_dsub+0x43e>
10010f4c:	e0c8      	b.n	100110e0 <__aeabi_dsub+0x5d0>
10010f4e:	003b      	movs	r3, r7
10010f50:	432b      	orrs	r3, r5
10010f52:	d100      	bne.n	10010f56 <__aeabi_dsub+0x446>
10010f54:	e10f      	b.n	10011176 <__aeabi_dsub+0x666>
10010f56:	0003      	movs	r3, r0
10010f58:	430b      	orrs	r3, r1
10010f5a:	d100      	bne.n	10010f5e <__aeabi_dsub+0x44e>
10010f5c:	e604      	b.n	10010b68 <__aeabi_dsub+0x58>
10010f5e:	1869      	adds	r1, r5, r1
10010f60:	42a9      	cmp	r1, r5
10010f62:	419b      	sbcs	r3, r3
10010f64:	183f      	adds	r7, r7, r0
10010f66:	425b      	negs	r3, r3
10010f68:	19df      	adds	r7, r3, r7
10010f6a:	023b      	lsls	r3, r7, #8
10010f6c:	d400      	bmi.n	10010f70 <__aeabi_dsub+0x460>
10010f6e:	e11a      	b.n	100111a6 <__aeabi_dsub+0x696>
10010f70:	4b90      	ldr	r3, [pc, #576]	; (100111b4 <__aeabi_dsub+0x6a4>)
10010f72:	000d      	movs	r5, r1
10010f74:	401f      	ands	r7, r3
10010f76:	4664      	mov	r4, ip
10010f78:	e5f6      	b.n	10010b68 <__aeabi_dsub+0x58>
10010f7a:	469a      	mov	sl, r3
10010f7c:	e689      	b.n	10010c92 <__aeabi_dsub+0x182>
10010f7e:	003a      	movs	r2, r7
10010f80:	432a      	orrs	r2, r5
10010f82:	2c00      	cmp	r4, #0
10010f84:	d15c      	bne.n	10011040 <__aeabi_dsub+0x530>
10010f86:	2a00      	cmp	r2, #0
10010f88:	d175      	bne.n	10011076 <__aeabi_dsub+0x566>
10010f8a:	0002      	movs	r2, r0
10010f8c:	430a      	orrs	r2, r1
10010f8e:	d100      	bne.n	10010f92 <__aeabi_dsub+0x482>
10010f90:	e0ca      	b.n	10011128 <__aeabi_dsub+0x618>
10010f92:	0007      	movs	r7, r0
10010f94:	000d      	movs	r5, r1
10010f96:	469a      	mov	sl, r3
10010f98:	e5e6      	b.n	10010b68 <__aeabi_dsub+0x58>
10010f9a:	4664      	mov	r4, ip
10010f9c:	2200      	movs	r2, #0
10010f9e:	2500      	movs	r5, #0
10010fa0:	e681      	b.n	10010ca6 <__aeabi_dsub+0x196>
10010fa2:	4662      	mov	r2, ip
10010fa4:	0006      	movs	r6, r0
10010fa6:	3a20      	subs	r2, #32
10010fa8:	40d6      	lsrs	r6, r2
10010faa:	4662      	mov	r2, ip
10010fac:	46b0      	mov	r8, r6
10010fae:	2a20      	cmp	r2, #32
10010fb0:	d100      	bne.n	10010fb4 <__aeabi_dsub+0x4a4>
10010fb2:	e0b7      	b.n	10011124 <__aeabi_dsub+0x614>
10010fb4:	2240      	movs	r2, #64	; 0x40
10010fb6:	4666      	mov	r6, ip
10010fb8:	1b92      	subs	r2, r2, r6
10010fba:	4090      	lsls	r0, r2
10010fbc:	4301      	orrs	r1, r0
10010fbe:	4642      	mov	r2, r8
10010fc0:	1e48      	subs	r0, r1, #1
10010fc2:	4181      	sbcs	r1, r0
10010fc4:	4311      	orrs	r1, r2
10010fc6:	2200      	movs	r2, #0
10010fc8:	e68a      	b.n	10010ce0 <__aeabi_dsub+0x1d0>
10010fca:	4c79      	ldr	r4, [pc, #484]	; (100111b0 <__aeabi_dsub+0x6a0>)
10010fcc:	42a2      	cmp	r2, r4
10010fce:	d000      	beq.n	10010fd2 <__aeabi_dsub+0x4c2>
10010fd0:	e761      	b.n	10010e96 <__aeabi_dsub+0x386>
10010fd2:	0007      	movs	r7, r0
10010fd4:	000d      	movs	r5, r1
10010fd6:	0014      	movs	r4, r2
10010fd8:	469a      	mov	sl, r3
10010fda:	e5c5      	b.n	10010b68 <__aeabi_dsub+0x58>
10010fdc:	2c00      	cmp	r4, #0
10010fde:	d141      	bne.n	10011064 <__aeabi_dsub+0x554>
10010fe0:	003c      	movs	r4, r7
10010fe2:	432c      	orrs	r4, r5
10010fe4:	d078      	beq.n	100110d8 <__aeabi_dsub+0x5c8>
10010fe6:	43f4      	mvns	r4, r6
10010fe8:	46a1      	mov	r9, r4
10010fea:	2c00      	cmp	r4, #0
10010fec:	d020      	beq.n	10011030 <__aeabi_dsub+0x520>
10010fee:	4c70      	ldr	r4, [pc, #448]	; (100111b0 <__aeabi_dsub+0x6a0>)
10010ff0:	42a2      	cmp	r2, r4
10010ff2:	d071      	beq.n	100110d8 <__aeabi_dsub+0x5c8>
10010ff4:	464c      	mov	r4, r9
10010ff6:	2c38      	cmp	r4, #56	; 0x38
10010ff8:	dd00      	ble.n	10010ffc <__aeabi_dsub+0x4ec>
10010ffa:	e0b2      	b.n	10011162 <__aeabi_dsub+0x652>
10010ffc:	2c1f      	cmp	r4, #31
10010ffe:	dd00      	ble.n	10011002 <__aeabi_dsub+0x4f2>
10011000:	e0bc      	b.n	1001117c <__aeabi_dsub+0x66c>
10011002:	2620      	movs	r6, #32
10011004:	1b34      	subs	r4, r6, r4
10011006:	46a2      	mov	sl, r4
10011008:	003c      	movs	r4, r7
1001100a:	4656      	mov	r6, sl
1001100c:	40b4      	lsls	r4, r6
1001100e:	464e      	mov	r6, r9
10011010:	46a0      	mov	r8, r4
10011012:	002c      	movs	r4, r5
10011014:	40f4      	lsrs	r4, r6
10011016:	46a4      	mov	ip, r4
10011018:	4644      	mov	r4, r8
1001101a:	4666      	mov	r6, ip
1001101c:	4334      	orrs	r4, r6
1001101e:	46a4      	mov	ip, r4
10011020:	4654      	mov	r4, sl
10011022:	40a5      	lsls	r5, r4
10011024:	4664      	mov	r4, ip
10011026:	1e6e      	subs	r6, r5, #1
10011028:	41b5      	sbcs	r5, r6
1001102a:	4325      	orrs	r5, r4
1001102c:	464c      	mov	r4, r9
1001102e:	40e7      	lsrs	r7, r4
10011030:	186d      	adds	r5, r5, r1
10011032:	428d      	cmp	r5, r1
10011034:	4189      	sbcs	r1, r1
10011036:	183f      	adds	r7, r7, r0
10011038:	4249      	negs	r1, r1
1001103a:	19cf      	adds	r7, r1, r7
1001103c:	0014      	movs	r4, r2
1001103e:	e656      	b.n	10010cee <__aeabi_dsub+0x1de>
10011040:	2a00      	cmp	r2, #0
10011042:	d12f      	bne.n	100110a4 <__aeabi_dsub+0x594>
10011044:	0002      	movs	r2, r0
10011046:	430a      	orrs	r2, r1
10011048:	d100      	bne.n	1001104c <__aeabi_dsub+0x53c>
1001104a:	e084      	b.n	10011156 <__aeabi_dsub+0x646>
1001104c:	0007      	movs	r7, r0
1001104e:	000d      	movs	r5, r1
10011050:	469a      	mov	sl, r3
10011052:	4c57      	ldr	r4, [pc, #348]	; (100111b0 <__aeabi_dsub+0x6a0>)
10011054:	e588      	b.n	10010b68 <__aeabi_dsub+0x58>
10011056:	433d      	orrs	r5, r7
10011058:	1e6f      	subs	r7, r5, #1
1001105a:	41bd      	sbcs	r5, r7
1001105c:	b2ec      	uxtb	r4, r5
1001105e:	2700      	movs	r7, #0
10011060:	1b0d      	subs	r5, r1, r4
10011062:	e760      	b.n	10010f26 <__aeabi_dsub+0x416>
10011064:	4c52      	ldr	r4, [pc, #328]	; (100111b0 <__aeabi_dsub+0x6a0>)
10011066:	42a2      	cmp	r2, r4
10011068:	d036      	beq.n	100110d8 <__aeabi_dsub+0x5c8>
1001106a:	4274      	negs	r4, r6
1001106c:	2680      	movs	r6, #128	; 0x80
1001106e:	0436      	lsls	r6, r6, #16
10011070:	46a1      	mov	r9, r4
10011072:	4337      	orrs	r7, r6
10011074:	e7be      	b.n	10010ff4 <__aeabi_dsub+0x4e4>
10011076:	0002      	movs	r2, r0
10011078:	430a      	orrs	r2, r1
1001107a:	d100      	bne.n	1001107e <__aeabi_dsub+0x56e>
1001107c:	e574      	b.n	10010b68 <__aeabi_dsub+0x58>
1001107e:	1a6a      	subs	r2, r5, r1
10011080:	4690      	mov	r8, r2
10011082:	4545      	cmp	r5, r8
10011084:	41b6      	sbcs	r6, r6
10011086:	1a3a      	subs	r2, r7, r0
10011088:	4276      	negs	r6, r6
1001108a:	1b92      	subs	r2, r2, r6
1001108c:	4694      	mov	ip, r2
1001108e:	0212      	lsls	r2, r2, #8
10011090:	d400      	bmi.n	10011094 <__aeabi_dsub+0x584>
10011092:	e5f7      	b.n	10010c84 <__aeabi_dsub+0x174>
10011094:	1b4d      	subs	r5, r1, r5
10011096:	42a9      	cmp	r1, r5
10011098:	4189      	sbcs	r1, r1
1001109a:	1bc7      	subs	r7, r0, r7
1001109c:	4249      	negs	r1, r1
1001109e:	1a7f      	subs	r7, r7, r1
100110a0:	469a      	mov	sl, r3
100110a2:	e561      	b.n	10010b68 <__aeabi_dsub+0x58>
100110a4:	0002      	movs	r2, r0
100110a6:	430a      	orrs	r2, r1
100110a8:	d03a      	beq.n	10011120 <__aeabi_dsub+0x610>
100110aa:	08ed      	lsrs	r5, r5, #3
100110ac:	077c      	lsls	r4, r7, #29
100110ae:	432c      	orrs	r4, r5
100110b0:	2580      	movs	r5, #128	; 0x80
100110b2:	08fa      	lsrs	r2, r7, #3
100110b4:	032d      	lsls	r5, r5, #12
100110b6:	422a      	tst	r2, r5
100110b8:	d008      	beq.n	100110cc <__aeabi_dsub+0x5bc>
100110ba:	08c7      	lsrs	r7, r0, #3
100110bc:	422f      	tst	r7, r5
100110be:	d105      	bne.n	100110cc <__aeabi_dsub+0x5bc>
100110c0:	0745      	lsls	r5, r0, #29
100110c2:	002c      	movs	r4, r5
100110c4:	003a      	movs	r2, r7
100110c6:	469a      	mov	sl, r3
100110c8:	08c9      	lsrs	r1, r1, #3
100110ca:	430c      	orrs	r4, r1
100110cc:	0f67      	lsrs	r7, r4, #29
100110ce:	00d2      	lsls	r2, r2, #3
100110d0:	00e5      	lsls	r5, r4, #3
100110d2:	4317      	orrs	r7, r2
100110d4:	4c36      	ldr	r4, [pc, #216]	; (100111b0 <__aeabi_dsub+0x6a0>)
100110d6:	e547      	b.n	10010b68 <__aeabi_dsub+0x58>
100110d8:	0007      	movs	r7, r0
100110da:	000d      	movs	r5, r1
100110dc:	0014      	movs	r4, r2
100110de:	e543      	b.n	10010b68 <__aeabi_dsub+0x58>
100110e0:	003a      	movs	r2, r7
100110e2:	432a      	orrs	r2, r5
100110e4:	d043      	beq.n	1001116e <__aeabi_dsub+0x65e>
100110e6:	0002      	movs	r2, r0
100110e8:	430a      	orrs	r2, r1
100110ea:	d019      	beq.n	10011120 <__aeabi_dsub+0x610>
100110ec:	08ed      	lsrs	r5, r5, #3
100110ee:	077c      	lsls	r4, r7, #29
100110f0:	432c      	orrs	r4, r5
100110f2:	2580      	movs	r5, #128	; 0x80
100110f4:	08fa      	lsrs	r2, r7, #3
100110f6:	032d      	lsls	r5, r5, #12
100110f8:	422a      	tst	r2, r5
100110fa:	d007      	beq.n	1001110c <__aeabi_dsub+0x5fc>
100110fc:	08c6      	lsrs	r6, r0, #3
100110fe:	422e      	tst	r6, r5
10011100:	d104      	bne.n	1001110c <__aeabi_dsub+0x5fc>
10011102:	0747      	lsls	r7, r0, #29
10011104:	003c      	movs	r4, r7
10011106:	0032      	movs	r2, r6
10011108:	08c9      	lsrs	r1, r1, #3
1001110a:	430c      	orrs	r4, r1
1001110c:	00d7      	lsls	r7, r2, #3
1001110e:	0f62      	lsrs	r2, r4, #29
10011110:	00e5      	lsls	r5, r4, #3
10011112:	4317      	orrs	r7, r2
10011114:	469a      	mov	sl, r3
10011116:	4c26      	ldr	r4, [pc, #152]	; (100111b0 <__aeabi_dsub+0x6a0>)
10011118:	e526      	b.n	10010b68 <__aeabi_dsub+0x58>
1001111a:	2200      	movs	r2, #0
1001111c:	2500      	movs	r5, #0
1001111e:	e544      	b.n	10010baa <__aeabi_dsub+0x9a>
10011120:	4c23      	ldr	r4, [pc, #140]	; (100111b0 <__aeabi_dsub+0x6a0>)
10011122:	e521      	b.n	10010b68 <__aeabi_dsub+0x58>
10011124:	2000      	movs	r0, #0
10011126:	e749      	b.n	10010fbc <__aeabi_dsub+0x4ac>
10011128:	2300      	movs	r3, #0
1001112a:	2500      	movs	r5, #0
1001112c:	e5bb      	b.n	10010ca6 <__aeabi_dsub+0x196>
1001112e:	464c      	mov	r4, r9
10011130:	003e      	movs	r6, r7
10011132:	3c20      	subs	r4, #32
10011134:	40e6      	lsrs	r6, r4
10011136:	464c      	mov	r4, r9
10011138:	46b4      	mov	ip, r6
1001113a:	2c20      	cmp	r4, #32
1001113c:	d031      	beq.n	100111a2 <__aeabi_dsub+0x692>
1001113e:	2440      	movs	r4, #64	; 0x40
10011140:	464e      	mov	r6, r9
10011142:	1ba6      	subs	r6, r4, r6
10011144:	40b7      	lsls	r7, r6
10011146:	433d      	orrs	r5, r7
10011148:	1e6c      	subs	r4, r5, #1
1001114a:	41a5      	sbcs	r5, r4
1001114c:	4664      	mov	r4, ip
1001114e:	432c      	orrs	r4, r5
10011150:	2700      	movs	r7, #0
10011152:	1b0d      	subs	r5, r1, r4
10011154:	e6e7      	b.n	10010f26 <__aeabi_dsub+0x416>
10011156:	2280      	movs	r2, #128	; 0x80
10011158:	2300      	movs	r3, #0
1001115a:	0312      	lsls	r2, r2, #12
1001115c:	4c14      	ldr	r4, [pc, #80]	; (100111b0 <__aeabi_dsub+0x6a0>)
1001115e:	2500      	movs	r5, #0
10011160:	e5a1      	b.n	10010ca6 <__aeabi_dsub+0x196>
10011162:	433d      	orrs	r5, r7
10011164:	1e6f      	subs	r7, r5, #1
10011166:	41bd      	sbcs	r5, r7
10011168:	2700      	movs	r7, #0
1001116a:	b2ed      	uxtb	r5, r5
1001116c:	e760      	b.n	10011030 <__aeabi_dsub+0x520>
1001116e:	0007      	movs	r7, r0
10011170:	000d      	movs	r5, r1
10011172:	4c0f      	ldr	r4, [pc, #60]	; (100111b0 <__aeabi_dsub+0x6a0>)
10011174:	e4f8      	b.n	10010b68 <__aeabi_dsub+0x58>
10011176:	0007      	movs	r7, r0
10011178:	000d      	movs	r5, r1
1001117a:	e4f5      	b.n	10010b68 <__aeabi_dsub+0x58>
1001117c:	464e      	mov	r6, r9
1001117e:	003c      	movs	r4, r7
10011180:	3e20      	subs	r6, #32
10011182:	40f4      	lsrs	r4, r6
10011184:	46a0      	mov	r8, r4
10011186:	464c      	mov	r4, r9
10011188:	2c20      	cmp	r4, #32
1001118a:	d00e      	beq.n	100111aa <__aeabi_dsub+0x69a>
1001118c:	2440      	movs	r4, #64	; 0x40
1001118e:	464e      	mov	r6, r9
10011190:	1ba4      	subs	r4, r4, r6
10011192:	40a7      	lsls	r7, r4
10011194:	433d      	orrs	r5, r7
10011196:	1e6f      	subs	r7, r5, #1
10011198:	41bd      	sbcs	r5, r7
1001119a:	4644      	mov	r4, r8
1001119c:	2700      	movs	r7, #0
1001119e:	4325      	orrs	r5, r4
100111a0:	e746      	b.n	10011030 <__aeabi_dsub+0x520>
100111a2:	2700      	movs	r7, #0
100111a4:	e7cf      	b.n	10011146 <__aeabi_dsub+0x636>
100111a6:	000d      	movs	r5, r1
100111a8:	e573      	b.n	10010c92 <__aeabi_dsub+0x182>
100111aa:	2700      	movs	r7, #0
100111ac:	e7f2      	b.n	10011194 <__aeabi_dsub+0x684>
100111ae:	46c0      	nop			; (mov r8, r8)
100111b0:	000007ff 	.word	0x000007ff
100111b4:	ff7fffff 	.word	0xff7fffff

100111b8 <__aeabi_d2iz>:
100111b8:	030b      	lsls	r3, r1, #12
100111ba:	b530      	push	{r4, r5, lr}
100111bc:	4d13      	ldr	r5, [pc, #76]	; (1001120c <__aeabi_d2iz+0x54>)
100111be:	0b1a      	lsrs	r2, r3, #12
100111c0:	004b      	lsls	r3, r1, #1
100111c2:	0d5b      	lsrs	r3, r3, #21
100111c4:	0fc9      	lsrs	r1, r1, #31
100111c6:	2400      	movs	r4, #0
100111c8:	42ab      	cmp	r3, r5
100111ca:	dd11      	ble.n	100111f0 <__aeabi_d2iz+0x38>
100111cc:	4c10      	ldr	r4, [pc, #64]	; (10011210 <__aeabi_d2iz+0x58>)
100111ce:	42a3      	cmp	r3, r4
100111d0:	dc10      	bgt.n	100111f4 <__aeabi_d2iz+0x3c>
100111d2:	2480      	movs	r4, #128	; 0x80
100111d4:	0364      	lsls	r4, r4, #13
100111d6:	4322      	orrs	r2, r4
100111d8:	4c0e      	ldr	r4, [pc, #56]	; (10011214 <__aeabi_d2iz+0x5c>)
100111da:	1ae4      	subs	r4, r4, r3
100111dc:	2c1f      	cmp	r4, #31
100111de:	dd0c      	ble.n	100111fa <__aeabi_d2iz+0x42>
100111e0:	480d      	ldr	r0, [pc, #52]	; (10011218 <__aeabi_d2iz+0x60>)
100111e2:	1ac3      	subs	r3, r0, r3
100111e4:	40da      	lsrs	r2, r3
100111e6:	0013      	movs	r3, r2
100111e8:	425c      	negs	r4, r3
100111ea:	2900      	cmp	r1, #0
100111ec:	d100      	bne.n	100111f0 <__aeabi_d2iz+0x38>
100111ee:	001c      	movs	r4, r3
100111f0:	0020      	movs	r0, r4
100111f2:	bd30      	pop	{r4, r5, pc}
100111f4:	4b09      	ldr	r3, [pc, #36]	; (1001121c <__aeabi_d2iz+0x64>)
100111f6:	18cc      	adds	r4, r1, r3
100111f8:	e7fa      	b.n	100111f0 <__aeabi_d2iz+0x38>
100111fa:	40e0      	lsrs	r0, r4
100111fc:	4c08      	ldr	r4, [pc, #32]	; (10011220 <__aeabi_d2iz+0x68>)
100111fe:	46a4      	mov	ip, r4
10011200:	4463      	add	r3, ip
10011202:	409a      	lsls	r2, r3
10011204:	0013      	movs	r3, r2
10011206:	4303      	orrs	r3, r0
10011208:	e7ee      	b.n	100111e8 <__aeabi_d2iz+0x30>
1001120a:	46c0      	nop			; (mov r8, r8)
1001120c:	000003fe 	.word	0x000003fe
10011210:	0000041d 	.word	0x0000041d
10011214:	00000433 	.word	0x00000433
10011218:	00000413 	.word	0x00000413
1001121c:	7fffffff 	.word	0x7fffffff
10011220:	fffffbed 	.word	0xfffffbed

10011224 <__aeabi_ui2d>:
10011224:	b570      	push	{r4, r5, r6, lr}
10011226:	1e05      	subs	r5, r0, #0
10011228:	d028      	beq.n	1001127c <__aeabi_ui2d+0x58>
1001122a:	f000 f833 	bl	10011294 <__clzsi2>
1001122e:	4b15      	ldr	r3, [pc, #84]	; (10011284 <__aeabi_ui2d+0x60>)
10011230:	4a15      	ldr	r2, [pc, #84]	; (10011288 <__aeabi_ui2d+0x64>)
10011232:	1a1b      	subs	r3, r3, r0
10011234:	1ad2      	subs	r2, r2, r3
10011236:	2a1f      	cmp	r2, #31
10011238:	dd16      	ble.n	10011268 <__aeabi_ui2d+0x44>
1001123a:	002c      	movs	r4, r5
1001123c:	4a13      	ldr	r2, [pc, #76]	; (1001128c <__aeabi_ui2d+0x68>)
1001123e:	2500      	movs	r5, #0
10011240:	1ad2      	subs	r2, r2, r3
10011242:	4094      	lsls	r4, r2
10011244:	055a      	lsls	r2, r3, #21
10011246:	0324      	lsls	r4, r4, #12
10011248:	0b24      	lsrs	r4, r4, #12
1001124a:	0d52      	lsrs	r2, r2, #21
1001124c:	2100      	movs	r1, #0
1001124e:	0324      	lsls	r4, r4, #12
10011250:	0d0b      	lsrs	r3, r1, #20
10011252:	0b24      	lsrs	r4, r4, #12
10011254:	051b      	lsls	r3, r3, #20
10011256:	4323      	orrs	r3, r4
10011258:	4c0d      	ldr	r4, [pc, #52]	; (10011290 <__aeabi_ui2d+0x6c>)
1001125a:	0512      	lsls	r2, r2, #20
1001125c:	4023      	ands	r3, r4
1001125e:	4313      	orrs	r3, r2
10011260:	005b      	lsls	r3, r3, #1
10011262:	0028      	movs	r0, r5
10011264:	0859      	lsrs	r1, r3, #1
10011266:	bd70      	pop	{r4, r5, r6, pc}
10011268:	210b      	movs	r1, #11
1001126a:	002c      	movs	r4, r5
1001126c:	1a08      	subs	r0, r1, r0
1001126e:	40c4      	lsrs	r4, r0
10011270:	4095      	lsls	r5, r2
10011272:	0324      	lsls	r4, r4, #12
10011274:	055a      	lsls	r2, r3, #21
10011276:	0b24      	lsrs	r4, r4, #12
10011278:	0d52      	lsrs	r2, r2, #21
1001127a:	e7e7      	b.n	1001124c <__aeabi_ui2d+0x28>
1001127c:	2200      	movs	r2, #0
1001127e:	2400      	movs	r4, #0
10011280:	e7e4      	b.n	1001124c <__aeabi_ui2d+0x28>
10011282:	46c0      	nop			; (mov r8, r8)
10011284:	0000041e 	.word	0x0000041e
10011288:	00000433 	.word	0x00000433
1001128c:	00000413 	.word	0x00000413
10011290:	800fffff 	.word	0x800fffff

10011294 <__clzsi2>:
10011294:	211c      	movs	r1, #28
10011296:	2301      	movs	r3, #1
10011298:	041b      	lsls	r3, r3, #16
1001129a:	4298      	cmp	r0, r3
1001129c:	d301      	bcc.n	100112a2 <__clzsi2+0xe>
1001129e:	0c00      	lsrs	r0, r0, #16
100112a0:	3910      	subs	r1, #16
100112a2:	0a1b      	lsrs	r3, r3, #8
100112a4:	4298      	cmp	r0, r3
100112a6:	d301      	bcc.n	100112ac <__clzsi2+0x18>
100112a8:	0a00      	lsrs	r0, r0, #8
100112aa:	3908      	subs	r1, #8
100112ac:	091b      	lsrs	r3, r3, #4
100112ae:	4298      	cmp	r0, r3
100112b0:	d301      	bcc.n	100112b6 <__clzsi2+0x22>
100112b2:	0900      	lsrs	r0, r0, #4
100112b4:	3904      	subs	r1, #4
100112b6:	a202      	add	r2, pc, #8	; (adr r2, 100112c0 <__clzsi2+0x2c>)
100112b8:	5c10      	ldrb	r0, [r2, r0]
100112ba:	1840      	adds	r0, r0, r1
100112bc:	4770      	bx	lr
100112be:	46c0      	nop			; (mov r8, r8)
100112c0:	02020304 	.word	0x02020304
100112c4:	01010101 	.word	0x01010101
	...

100112d0 <__libc_init_array>:
100112d0:	4b0e      	ldr	r3, [pc, #56]	; (1001130c <__libc_init_array+0x3c>)
100112d2:	b570      	push	{r4, r5, r6, lr}
100112d4:	2500      	movs	r5, #0
100112d6:	001e      	movs	r6, r3
100112d8:	4c0d      	ldr	r4, [pc, #52]	; (10011310 <__libc_init_array+0x40>)
100112da:	1ae4      	subs	r4, r4, r3
100112dc:	10a4      	asrs	r4, r4, #2
100112de:	42a5      	cmp	r5, r4
100112e0:	d004      	beq.n	100112ec <__libc_init_array+0x1c>
100112e2:	00ab      	lsls	r3, r5, #2
100112e4:	58f3      	ldr	r3, [r6, r3]
100112e6:	4798      	blx	r3
100112e8:	3501      	adds	r5, #1
100112ea:	e7f8      	b.n	100112de <__libc_init_array+0xe>
100112ec:	f002 f954 	bl	10013598 <_init>
100112f0:	4b08      	ldr	r3, [pc, #32]	; (10011314 <__libc_init_array+0x44>)
100112f2:	2500      	movs	r5, #0
100112f4:	001e      	movs	r6, r3
100112f6:	4c08      	ldr	r4, [pc, #32]	; (10011318 <__libc_init_array+0x48>)
100112f8:	1ae4      	subs	r4, r4, r3
100112fa:	10a4      	asrs	r4, r4, #2
100112fc:	42a5      	cmp	r5, r4
100112fe:	d004      	beq.n	1001130a <__libc_init_array+0x3a>
10011300:	00ab      	lsls	r3, r5, #2
10011302:	58f3      	ldr	r3, [r6, r3]
10011304:	4798      	blx	r3
10011306:	3501      	adds	r5, #1
10011308:	e7f8      	b.n	100112fc <__libc_init_array+0x2c>
1001130a:	bd70      	pop	{r4, r5, r6, pc}
1001130c:	100135a4 	.word	0x100135a4
10011310:	100135a4 	.word	0x100135a4
10011314:	100135a4 	.word	0x100135a4
10011318:	100135a8 	.word	0x100135a8

1001131c <malloc>:
1001131c:	b510      	push	{r4, lr}
1001131e:	4b03      	ldr	r3, [pc, #12]	; (1001132c <malloc+0x10>)
10011320:	0001      	movs	r1, r0
10011322:	6818      	ldr	r0, [r3, #0]
10011324:	f000 f86a 	bl	100113fc <_malloc_r>
10011328:	bd10      	pop	{r4, pc}
1001132a:	46c0      	nop			; (mov r8, r8)
1001132c:	10013660 	.word	0x10013660

10011330 <memcmp>:
10011330:	b530      	push	{r4, r5, lr}
10011332:	2400      	movs	r4, #0
10011334:	42a2      	cmp	r2, r4
10011336:	d008      	beq.n	1001134a <memcmp+0x1a>
10011338:	5d03      	ldrb	r3, [r0, r4]
1001133a:	1c65      	adds	r5, r4, #1
1001133c:	5d0c      	ldrb	r4, [r1, r4]
1001133e:	42a3      	cmp	r3, r4
10011340:	d001      	beq.n	10011346 <memcmp+0x16>
10011342:	1b18      	subs	r0, r3, r4
10011344:	e002      	b.n	1001134c <memcmp+0x1c>
10011346:	002c      	movs	r4, r5
10011348:	e7f4      	b.n	10011334 <memcmp+0x4>
1001134a:	2000      	movs	r0, #0
1001134c:	bd30      	pop	{r4, r5, pc}

1001134e <memcpy>:
1001134e:	2300      	movs	r3, #0
10011350:	b510      	push	{r4, lr}
10011352:	429a      	cmp	r2, r3
10011354:	d003      	beq.n	1001135e <memcpy+0x10>
10011356:	5ccc      	ldrb	r4, [r1, r3]
10011358:	54c4      	strb	r4, [r0, r3]
1001135a:	3301      	adds	r3, #1
1001135c:	e7f9      	b.n	10011352 <memcpy+0x4>
1001135e:	bd10      	pop	{r4, pc}

10011360 <memset>:
10011360:	0003      	movs	r3, r0
10011362:	1882      	adds	r2, r0, r2
10011364:	4293      	cmp	r3, r2
10011366:	d002      	beq.n	1001136e <memset+0xe>
10011368:	7019      	strb	r1, [r3, #0]
1001136a:	3301      	adds	r3, #1
1001136c:	e7fa      	b.n	10011364 <memset+0x4>
1001136e:	4770      	bx	lr

10011370 <_free_r>:
10011370:	b530      	push	{r4, r5, lr}
10011372:	2900      	cmp	r1, #0
10011374:	d03e      	beq.n	100113f4 <_free_r+0x84>
10011376:	3904      	subs	r1, #4
10011378:	680b      	ldr	r3, [r1, #0]
1001137a:	2b00      	cmp	r3, #0
1001137c:	da00      	bge.n	10011380 <_free_r+0x10>
1001137e:	18c9      	adds	r1, r1, r3
10011380:	4a1d      	ldr	r2, [pc, #116]	; (100113f8 <_free_r+0x88>)
10011382:	6813      	ldr	r3, [r2, #0]
10011384:	0014      	movs	r4, r2
10011386:	2b00      	cmp	r3, #0
10011388:	d102      	bne.n	10011390 <_free_r+0x20>
1001138a:	604b      	str	r3, [r1, #4]
1001138c:	6011      	str	r1, [r2, #0]
1001138e:	e031      	b.n	100113f4 <_free_r+0x84>
10011390:	428b      	cmp	r3, r1
10011392:	d90d      	bls.n	100113b0 <_free_r+0x40>
10011394:	680a      	ldr	r2, [r1, #0]
10011396:	1888      	adds	r0, r1, r2
10011398:	4283      	cmp	r3, r0
1001139a:	d103      	bne.n	100113a4 <_free_r+0x34>
1001139c:	6818      	ldr	r0, [r3, #0]
1001139e:	685b      	ldr	r3, [r3, #4]
100113a0:	1882      	adds	r2, r0, r2
100113a2:	600a      	str	r2, [r1, #0]
100113a4:	604b      	str	r3, [r1, #4]
100113a6:	6021      	str	r1, [r4, #0]
100113a8:	e024      	b.n	100113f4 <_free_r+0x84>
100113aa:	428a      	cmp	r2, r1
100113ac:	d803      	bhi.n	100113b6 <_free_r+0x46>
100113ae:	0013      	movs	r3, r2
100113b0:	685a      	ldr	r2, [r3, #4]
100113b2:	2a00      	cmp	r2, #0
100113b4:	d1f9      	bne.n	100113aa <_free_r+0x3a>
100113b6:	681d      	ldr	r5, [r3, #0]
100113b8:	195c      	adds	r4, r3, r5
100113ba:	428c      	cmp	r4, r1
100113bc:	d10b      	bne.n	100113d6 <_free_r+0x66>
100113be:	6809      	ldr	r1, [r1, #0]
100113c0:	1869      	adds	r1, r5, r1
100113c2:	1858      	adds	r0, r3, r1
100113c4:	6019      	str	r1, [r3, #0]
100113c6:	4282      	cmp	r2, r0
100113c8:	d114      	bne.n	100113f4 <_free_r+0x84>
100113ca:	6810      	ldr	r0, [r2, #0]
100113cc:	6852      	ldr	r2, [r2, #4]
100113ce:	1841      	adds	r1, r0, r1
100113d0:	6019      	str	r1, [r3, #0]
100113d2:	605a      	str	r2, [r3, #4]
100113d4:	e00e      	b.n	100113f4 <_free_r+0x84>
100113d6:	428c      	cmp	r4, r1
100113d8:	d902      	bls.n	100113e0 <_free_r+0x70>
100113da:	230c      	movs	r3, #12
100113dc:	6003      	str	r3, [r0, #0]
100113de:	e009      	b.n	100113f4 <_free_r+0x84>
100113e0:	6808      	ldr	r0, [r1, #0]
100113e2:	180c      	adds	r4, r1, r0
100113e4:	42a2      	cmp	r2, r4
100113e6:	d103      	bne.n	100113f0 <_free_r+0x80>
100113e8:	6814      	ldr	r4, [r2, #0]
100113ea:	6852      	ldr	r2, [r2, #4]
100113ec:	1820      	adds	r0, r4, r0
100113ee:	6008      	str	r0, [r1, #0]
100113f0:	604a      	str	r2, [r1, #4]
100113f2:	6059      	str	r1, [r3, #4]
100113f4:	bd30      	pop	{r4, r5, pc}
100113f6:	46c0      	nop			; (mov r8, r8)
100113f8:	10014c54 	.word	0x10014c54

100113fc <_malloc_r>:
100113fc:	2303      	movs	r3, #3
100113fe:	b570      	push	{r4, r5, r6, lr}
10011400:	1ccd      	adds	r5, r1, #3
10011402:	439d      	bics	r5, r3
10011404:	3508      	adds	r5, #8
10011406:	0006      	movs	r6, r0
10011408:	2d0c      	cmp	r5, #12
1001140a:	d201      	bcs.n	10011410 <_malloc_r+0x14>
1001140c:	250c      	movs	r5, #12
1001140e:	e005      	b.n	1001141c <_malloc_r+0x20>
10011410:	2d00      	cmp	r5, #0
10011412:	da03      	bge.n	1001141c <_malloc_r+0x20>
10011414:	230c      	movs	r3, #12
10011416:	2000      	movs	r0, #0
10011418:	6033      	str	r3, [r6, #0]
1001141a:	e040      	b.n	1001149e <_malloc_r+0xa2>
1001141c:	42a9      	cmp	r1, r5
1001141e:	d8f9      	bhi.n	10011414 <_malloc_r+0x18>
10011420:	4b1f      	ldr	r3, [pc, #124]	; (100114a0 <_malloc_r+0xa4>)
10011422:	681c      	ldr	r4, [r3, #0]
10011424:	001a      	movs	r2, r3
10011426:	0021      	movs	r1, r4
10011428:	2900      	cmp	r1, #0
1001142a:	d013      	beq.n	10011454 <_malloc_r+0x58>
1001142c:	680b      	ldr	r3, [r1, #0]
1001142e:	1b5b      	subs	r3, r3, r5
10011430:	d40d      	bmi.n	1001144e <_malloc_r+0x52>
10011432:	2b0b      	cmp	r3, #11
10011434:	d902      	bls.n	1001143c <_malloc_r+0x40>
10011436:	600b      	str	r3, [r1, #0]
10011438:	18cc      	adds	r4, r1, r3
1001143a:	e01e      	b.n	1001147a <_malloc_r+0x7e>
1001143c:	428c      	cmp	r4, r1
1001143e:	d102      	bne.n	10011446 <_malloc_r+0x4a>
10011440:	6863      	ldr	r3, [r4, #4]
10011442:	6013      	str	r3, [r2, #0]
10011444:	e01a      	b.n	1001147c <_malloc_r+0x80>
10011446:	684b      	ldr	r3, [r1, #4]
10011448:	6063      	str	r3, [r4, #4]
1001144a:	000c      	movs	r4, r1
1001144c:	e016      	b.n	1001147c <_malloc_r+0x80>
1001144e:	000c      	movs	r4, r1
10011450:	6849      	ldr	r1, [r1, #4]
10011452:	e7e9      	b.n	10011428 <_malloc_r+0x2c>
10011454:	4c13      	ldr	r4, [pc, #76]	; (100114a4 <_malloc_r+0xa8>)
10011456:	6823      	ldr	r3, [r4, #0]
10011458:	2b00      	cmp	r3, #0
1001145a:	d103      	bne.n	10011464 <_malloc_r+0x68>
1001145c:	0030      	movs	r0, r6
1001145e:	f000 f8f9 	bl	10011654 <_sbrk_r>
10011462:	6020      	str	r0, [r4, #0]
10011464:	0029      	movs	r1, r5
10011466:	0030      	movs	r0, r6
10011468:	f000 f8f4 	bl	10011654 <_sbrk_r>
1001146c:	1c43      	adds	r3, r0, #1
1001146e:	d0d1      	beq.n	10011414 <_malloc_r+0x18>
10011470:	2303      	movs	r3, #3
10011472:	1cc4      	adds	r4, r0, #3
10011474:	439c      	bics	r4, r3
10011476:	42a0      	cmp	r0, r4
10011478:	d10a      	bne.n	10011490 <_malloc_r+0x94>
1001147a:	6025      	str	r5, [r4, #0]
1001147c:	0020      	movs	r0, r4
1001147e:	2207      	movs	r2, #7
10011480:	300b      	adds	r0, #11
10011482:	1d23      	adds	r3, r4, #4
10011484:	4390      	bics	r0, r2
10011486:	1ac3      	subs	r3, r0, r3
10011488:	d009      	beq.n	1001149e <_malloc_r+0xa2>
1001148a:	425a      	negs	r2, r3
1001148c:	50e2      	str	r2, [r4, r3]
1001148e:	e006      	b.n	1001149e <_malloc_r+0xa2>
10011490:	1a21      	subs	r1, r4, r0
10011492:	0030      	movs	r0, r6
10011494:	f000 f8de 	bl	10011654 <_sbrk_r>
10011498:	1c43      	adds	r3, r0, #1
1001149a:	d1ee      	bne.n	1001147a <_malloc_r+0x7e>
1001149c:	e7ba      	b.n	10011414 <_malloc_r+0x18>
1001149e:	bd70      	pop	{r4, r5, r6, pc}
100114a0:	10014c54 	.word	0x10014c54
100114a4:	10014c50 	.word	0x10014c50

100114a8 <iprintf>:
100114a8:	b40f      	push	{r0, r1, r2, r3}
100114aa:	4b0b      	ldr	r3, [pc, #44]	; (100114d8 <iprintf+0x30>)
100114ac:	b513      	push	{r0, r1, r4, lr}
100114ae:	681c      	ldr	r4, [r3, #0]
100114b0:	2c00      	cmp	r4, #0
100114b2:	d005      	beq.n	100114c0 <iprintf+0x18>
100114b4:	69a3      	ldr	r3, [r4, #24]
100114b6:	2b00      	cmp	r3, #0
100114b8:	d102      	bne.n	100114c0 <iprintf+0x18>
100114ba:	0020      	movs	r0, r4
100114bc:	f000 fb58 	bl	10011b70 <__sinit>
100114c0:	ab05      	add	r3, sp, #20
100114c2:	9a04      	ldr	r2, [sp, #16]
100114c4:	68a1      	ldr	r1, [r4, #8]
100114c6:	0020      	movs	r0, r4
100114c8:	9301      	str	r3, [sp, #4]
100114ca:	f000 fc71 	bl	10011db0 <_vfiprintf_r>
100114ce:	bc16      	pop	{r1, r2, r4}
100114d0:	bc08      	pop	{r3}
100114d2:	b004      	add	sp, #16
100114d4:	4718      	bx	r3
100114d6:	46c0      	nop			; (mov r8, r8)
100114d8:	10013660 	.word	0x10013660

100114dc <putchar>:
100114dc:	4b08      	ldr	r3, [pc, #32]	; (10011500 <putchar+0x24>)
100114de:	b570      	push	{r4, r5, r6, lr}
100114e0:	681c      	ldr	r4, [r3, #0]
100114e2:	0005      	movs	r5, r0
100114e4:	2c00      	cmp	r4, #0
100114e6:	d005      	beq.n	100114f4 <putchar+0x18>
100114e8:	69a3      	ldr	r3, [r4, #24]
100114ea:	2b00      	cmp	r3, #0
100114ec:	d102      	bne.n	100114f4 <putchar+0x18>
100114ee:	0020      	movs	r0, r4
100114f0:	f000 fb3e 	bl	10011b70 <__sinit>
100114f4:	0029      	movs	r1, r5
100114f6:	68a2      	ldr	r2, [r4, #8]
100114f8:	0020      	movs	r0, r4
100114fa:	f000 ff05 	bl	10012308 <_putc_r>
100114fe:	bd70      	pop	{r4, r5, r6, pc}
10011500:	10013660 	.word	0x10013660

10011504 <_puts_r>:
10011504:	b570      	push	{r4, r5, r6, lr}
10011506:	0005      	movs	r5, r0
10011508:	000e      	movs	r6, r1
1001150a:	2800      	cmp	r0, #0
1001150c:	d004      	beq.n	10011518 <_puts_r+0x14>
1001150e:	6983      	ldr	r3, [r0, #24]
10011510:	2b00      	cmp	r3, #0
10011512:	d101      	bne.n	10011518 <_puts_r+0x14>
10011514:	f000 fb2c 	bl	10011b70 <__sinit>
10011518:	69ab      	ldr	r3, [r5, #24]
1001151a:	68ac      	ldr	r4, [r5, #8]
1001151c:	2b00      	cmp	r3, #0
1001151e:	d102      	bne.n	10011526 <_puts_r+0x22>
10011520:	0028      	movs	r0, r5
10011522:	f000 fb25 	bl	10011b70 <__sinit>
10011526:	4b25      	ldr	r3, [pc, #148]	; (100115bc <_puts_r+0xb8>)
10011528:	429c      	cmp	r4, r3
1001152a:	d101      	bne.n	10011530 <_puts_r+0x2c>
1001152c:	686c      	ldr	r4, [r5, #4]
1001152e:	e008      	b.n	10011542 <_puts_r+0x3e>
10011530:	4b23      	ldr	r3, [pc, #140]	; (100115c0 <_puts_r+0xbc>)
10011532:	429c      	cmp	r4, r3
10011534:	d101      	bne.n	1001153a <_puts_r+0x36>
10011536:	68ac      	ldr	r4, [r5, #8]
10011538:	e003      	b.n	10011542 <_puts_r+0x3e>
1001153a:	4b22      	ldr	r3, [pc, #136]	; (100115c4 <_puts_r+0xc0>)
1001153c:	429c      	cmp	r4, r3
1001153e:	d100      	bne.n	10011542 <_puts_r+0x3e>
10011540:	68ec      	ldr	r4, [r5, #12]
10011542:	89a3      	ldrh	r3, [r4, #12]
10011544:	071b      	lsls	r3, r3, #28
10011546:	d502      	bpl.n	1001154e <_puts_r+0x4a>
10011548:	6923      	ldr	r3, [r4, #16]
1001154a:	2b00      	cmp	r3, #0
1001154c:	d111      	bne.n	10011572 <_puts_r+0x6e>
1001154e:	0021      	movs	r1, r4
10011550:	0028      	movs	r0, r5
10011552:	f000 f9a3 	bl	1001189c <__swsetup_r>
10011556:	2800      	cmp	r0, #0
10011558:	d00b      	beq.n	10011572 <_puts_r+0x6e>
1001155a:	2001      	movs	r0, #1
1001155c:	4240      	negs	r0, r0
1001155e:	e02b      	b.n	100115b8 <_puts_r+0xb4>
10011560:	3b01      	subs	r3, #1
10011562:	3601      	adds	r6, #1
10011564:	60a3      	str	r3, [r4, #8]
10011566:	2b00      	cmp	r3, #0
10011568:	db08      	blt.n	1001157c <_puts_r+0x78>
1001156a:	6823      	ldr	r3, [r4, #0]
1001156c:	1c5a      	adds	r2, r3, #1
1001156e:	6022      	str	r2, [r4, #0]
10011570:	7019      	strb	r1, [r3, #0]
10011572:	7831      	ldrb	r1, [r6, #0]
10011574:	68a3      	ldr	r3, [r4, #8]
10011576:	2900      	cmp	r1, #0
10011578:	d1f2      	bne.n	10011560 <_puts_r+0x5c>
1001157a:	e00b      	b.n	10011594 <_puts_r+0x90>
1001157c:	69a2      	ldr	r2, [r4, #24]
1001157e:	4293      	cmp	r3, r2
10011580:	db01      	blt.n	10011586 <_puts_r+0x82>
10011582:	290a      	cmp	r1, #10
10011584:	d1f1      	bne.n	1001156a <_puts_r+0x66>
10011586:	0022      	movs	r2, r4
10011588:	0028      	movs	r0, r5
1001158a:	f000 f92f 	bl	100117ec <__swbuf_r>
1001158e:	1c43      	adds	r3, r0, #1
10011590:	d1ef      	bne.n	10011572 <_puts_r+0x6e>
10011592:	e7e2      	b.n	1001155a <_puts_r+0x56>
10011594:	3b01      	subs	r3, #1
10011596:	60a3      	str	r3, [r4, #8]
10011598:	2b00      	cmp	r3, #0
1001159a:	da08      	bge.n	100115ae <_puts_r+0xaa>
1001159c:	0022      	movs	r2, r4
1001159e:	310a      	adds	r1, #10
100115a0:	0028      	movs	r0, r5
100115a2:	f000 f923 	bl	100117ec <__swbuf_r>
100115a6:	1c43      	adds	r3, r0, #1
100115a8:	d0d7      	beq.n	1001155a <_puts_r+0x56>
100115aa:	200a      	movs	r0, #10
100115ac:	e004      	b.n	100115b8 <_puts_r+0xb4>
100115ae:	200a      	movs	r0, #10
100115b0:	6823      	ldr	r3, [r4, #0]
100115b2:	1c5a      	adds	r2, r3, #1
100115b4:	6022      	str	r2, [r4, #0]
100115b6:	7018      	strb	r0, [r3, #0]
100115b8:	bd70      	pop	{r4, r5, r6, pc}
100115ba:	46c0      	nop			; (mov r8, r8)
100115bc:	10013504 	.word	0x10013504
100115c0:	10013524 	.word	0x10013524
100115c4:	10013544 	.word	0x10013544

100115c8 <puts>:
100115c8:	b510      	push	{r4, lr}
100115ca:	4b03      	ldr	r3, [pc, #12]	; (100115d8 <puts+0x10>)
100115cc:	0001      	movs	r1, r0
100115ce:	6818      	ldr	r0, [r3, #0]
100115d0:	f7ff ff98 	bl	10011504 <_puts_r>
100115d4:	bd10      	pop	{r4, pc}
100115d6:	46c0      	nop			; (mov r8, r8)
100115d8:	10013660 	.word	0x10013660

100115dc <rand>:
100115dc:	4b15      	ldr	r3, [pc, #84]	; (10011634 <rand+0x58>)
100115de:	b510      	push	{r4, lr}
100115e0:	681c      	ldr	r4, [r3, #0]
100115e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100115e4:	2b00      	cmp	r3, #0
100115e6:	d115      	bne.n	10011614 <rand+0x38>
100115e8:	2018      	movs	r0, #24
100115ea:	f7ff fe97 	bl	1001131c <malloc>
100115ee:	4b12      	ldr	r3, [pc, #72]	; (10011638 <rand+0x5c>)
100115f0:	63a0      	str	r0, [r4, #56]	; 0x38
100115f2:	8003      	strh	r3, [r0, #0]
100115f4:	4b11      	ldr	r3, [pc, #68]	; (1001163c <rand+0x60>)
100115f6:	2201      	movs	r2, #1
100115f8:	8043      	strh	r3, [r0, #2]
100115fa:	4b11      	ldr	r3, [pc, #68]	; (10011640 <rand+0x64>)
100115fc:	8083      	strh	r3, [r0, #4]
100115fe:	4b11      	ldr	r3, [pc, #68]	; (10011644 <rand+0x68>)
10011600:	80c3      	strh	r3, [r0, #6]
10011602:	4b11      	ldr	r3, [pc, #68]	; (10011648 <rand+0x6c>)
10011604:	8103      	strh	r3, [r0, #8]
10011606:	2305      	movs	r3, #5
10011608:	8143      	strh	r3, [r0, #10]
1001160a:	3306      	adds	r3, #6
1001160c:	8183      	strh	r3, [r0, #12]
1001160e:	2300      	movs	r3, #0
10011610:	6102      	str	r2, [r0, #16]
10011612:	6143      	str	r3, [r0, #20]
10011614:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011616:	4a0d      	ldr	r2, [pc, #52]	; (1001164c <rand+0x70>)
10011618:	6920      	ldr	r0, [r4, #16]
1001161a:	6961      	ldr	r1, [r4, #20]
1001161c:	4b0c      	ldr	r3, [pc, #48]	; (10011650 <rand+0x74>)
1001161e:	f7fe f9c9 	bl	1000f9b4 <__aeabi_lmul>
10011622:	2201      	movs	r2, #1
10011624:	2300      	movs	r3, #0
10011626:	1880      	adds	r0, r0, r2
10011628:	4159      	adcs	r1, r3
1001162a:	6120      	str	r0, [r4, #16]
1001162c:	6161      	str	r1, [r4, #20]
1001162e:	0048      	lsls	r0, r1, #1
10011630:	0840      	lsrs	r0, r0, #1
10011632:	bd10      	pop	{r4, pc}
10011634:	10013660 	.word	0x10013660
10011638:	0000330e 	.word	0x0000330e
1001163c:	ffffabcd 	.word	0xffffabcd
10011640:	00001234 	.word	0x00001234
10011644:	ffffe66d 	.word	0xffffe66d
10011648:	ffffdeec 	.word	0xffffdeec
1001164c:	4c957f2d 	.word	0x4c957f2d
10011650:	5851f42d 	.word	0x5851f42d

10011654 <_sbrk_r>:
10011654:	2300      	movs	r3, #0
10011656:	b570      	push	{r4, r5, r6, lr}
10011658:	4c06      	ldr	r4, [pc, #24]	; (10011674 <_sbrk_r+0x20>)
1001165a:	0005      	movs	r5, r0
1001165c:	0008      	movs	r0, r1
1001165e:	6023      	str	r3, [r4, #0]
10011660:	f7fb fa5a 	bl	1000cb18 <_sbrk>
10011664:	1c43      	adds	r3, r0, #1
10011666:	d103      	bne.n	10011670 <_sbrk_r+0x1c>
10011668:	6823      	ldr	r3, [r4, #0]
1001166a:	2b00      	cmp	r3, #0
1001166c:	d000      	beq.n	10011670 <_sbrk_r+0x1c>
1001166e:	602b      	str	r3, [r5, #0]
10011670:	bd70      	pop	{r4, r5, r6, pc}
10011672:	46c0      	nop			; (mov r8, r8)
10011674:	10015e60 	.word	0x10015e60

10011678 <setbuf>:
10011678:	424a      	negs	r2, r1
1001167a:	414a      	adcs	r2, r1
1001167c:	2380      	movs	r3, #128	; 0x80
1001167e:	b510      	push	{r4, lr}
10011680:	0052      	lsls	r2, r2, #1
10011682:	00db      	lsls	r3, r3, #3
10011684:	f000 f802 	bl	1001168c <setvbuf>
10011688:	bd10      	pop	{r4, pc}
	...

1001168c <setvbuf>:
1001168c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001168e:	001d      	movs	r5, r3
10011690:	4b51      	ldr	r3, [pc, #324]	; (100117d8 <setvbuf+0x14c>)
10011692:	b085      	sub	sp, #20
10011694:	681e      	ldr	r6, [r3, #0]
10011696:	0004      	movs	r4, r0
10011698:	000f      	movs	r7, r1
1001169a:	9200      	str	r2, [sp, #0]
1001169c:	2e00      	cmp	r6, #0
1001169e:	d005      	beq.n	100116ac <setvbuf+0x20>
100116a0:	69b3      	ldr	r3, [r6, #24]
100116a2:	2b00      	cmp	r3, #0
100116a4:	d102      	bne.n	100116ac <setvbuf+0x20>
100116a6:	0030      	movs	r0, r6
100116a8:	f000 fa62 	bl	10011b70 <__sinit>
100116ac:	4b4b      	ldr	r3, [pc, #300]	; (100117dc <setvbuf+0x150>)
100116ae:	429c      	cmp	r4, r3
100116b0:	d101      	bne.n	100116b6 <setvbuf+0x2a>
100116b2:	6874      	ldr	r4, [r6, #4]
100116b4:	e008      	b.n	100116c8 <setvbuf+0x3c>
100116b6:	4b4a      	ldr	r3, [pc, #296]	; (100117e0 <setvbuf+0x154>)
100116b8:	429c      	cmp	r4, r3
100116ba:	d101      	bne.n	100116c0 <setvbuf+0x34>
100116bc:	68b4      	ldr	r4, [r6, #8]
100116be:	e003      	b.n	100116c8 <setvbuf+0x3c>
100116c0:	4b48      	ldr	r3, [pc, #288]	; (100117e4 <setvbuf+0x158>)
100116c2:	429c      	cmp	r4, r3
100116c4:	d100      	bne.n	100116c8 <setvbuf+0x3c>
100116c6:	68f4      	ldr	r4, [r6, #12]
100116c8:	9b00      	ldr	r3, [sp, #0]
100116ca:	2b02      	cmp	r3, #2
100116cc:	d005      	beq.n	100116da <setvbuf+0x4e>
100116ce:	2b01      	cmp	r3, #1
100116d0:	d900      	bls.n	100116d4 <setvbuf+0x48>
100116d2:	e07c      	b.n	100117ce <setvbuf+0x142>
100116d4:	2d00      	cmp	r5, #0
100116d6:	da00      	bge.n	100116da <setvbuf+0x4e>
100116d8:	e079      	b.n	100117ce <setvbuf+0x142>
100116da:	0021      	movs	r1, r4
100116dc:	0030      	movs	r0, r6
100116de:	f000 f9d9 	bl	10011a94 <_fflush_r>
100116e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100116e4:	2900      	cmp	r1, #0
100116e6:	d008      	beq.n	100116fa <setvbuf+0x6e>
100116e8:	0023      	movs	r3, r4
100116ea:	3344      	adds	r3, #68	; 0x44
100116ec:	4299      	cmp	r1, r3
100116ee:	d002      	beq.n	100116f6 <setvbuf+0x6a>
100116f0:	0030      	movs	r0, r6
100116f2:	f7ff fe3d 	bl	10011370 <_free_r>
100116f6:	2300      	movs	r3, #0
100116f8:	6363      	str	r3, [r4, #52]	; 0x34
100116fa:	2300      	movs	r3, #0
100116fc:	61a3      	str	r3, [r4, #24]
100116fe:	6063      	str	r3, [r4, #4]
10011700:	89a3      	ldrh	r3, [r4, #12]
10011702:	061b      	lsls	r3, r3, #24
10011704:	d503      	bpl.n	1001170e <setvbuf+0x82>
10011706:	6921      	ldr	r1, [r4, #16]
10011708:	0030      	movs	r0, r6
1001170a:	f7ff fe31 	bl	10011370 <_free_r>
1001170e:	89a2      	ldrh	r2, [r4, #12]
10011710:	4b35      	ldr	r3, [pc, #212]	; (100117e8 <setvbuf+0x15c>)
10011712:	4013      	ands	r3, r2
10011714:	81a3      	strh	r3, [r4, #12]
10011716:	9b00      	ldr	r3, [sp, #0]
10011718:	2b02      	cmp	r3, #2
1001171a:	d021      	beq.n	10011760 <setvbuf+0xd4>
1001171c:	ab03      	add	r3, sp, #12
1001171e:	aa02      	add	r2, sp, #8
10011720:	0021      	movs	r1, r4
10011722:	0030      	movs	r0, r6
10011724:	f000 fab8 	bl	10011c98 <__swhatbuf_r>
10011728:	89a3      	ldrh	r3, [r4, #12]
1001172a:	4318      	orrs	r0, r3
1001172c:	81a0      	strh	r0, [r4, #12]
1001172e:	2d00      	cmp	r5, #0
10011730:	d101      	bne.n	10011736 <setvbuf+0xaa>
10011732:	9d02      	ldr	r5, [sp, #8]
10011734:	e001      	b.n	1001173a <setvbuf+0xae>
10011736:	2f00      	cmp	r7, #0
10011738:	d125      	bne.n	10011786 <setvbuf+0xfa>
1001173a:	0028      	movs	r0, r5
1001173c:	f7ff fdee 	bl	1001131c <malloc>
10011740:	9501      	str	r5, [sp, #4]
10011742:	1e07      	subs	r7, r0, #0
10011744:	d11a      	bne.n	1001177c <setvbuf+0xf0>
10011746:	9b02      	ldr	r3, [sp, #8]
10011748:	9301      	str	r3, [sp, #4]
1001174a:	42ab      	cmp	r3, r5
1001174c:	d102      	bne.n	10011754 <setvbuf+0xc8>
1001174e:	2001      	movs	r0, #1
10011750:	4240      	negs	r0, r0
10011752:	e006      	b.n	10011762 <setvbuf+0xd6>
10011754:	9801      	ldr	r0, [sp, #4]
10011756:	f7ff fde1 	bl	1001131c <malloc>
1001175a:	1e07      	subs	r7, r0, #0
1001175c:	d10e      	bne.n	1001177c <setvbuf+0xf0>
1001175e:	e7f6      	b.n	1001174e <setvbuf+0xc2>
10011760:	2000      	movs	r0, #0
10011762:	2202      	movs	r2, #2
10011764:	89a3      	ldrh	r3, [r4, #12]
10011766:	4313      	orrs	r3, r2
10011768:	81a3      	strh	r3, [r4, #12]
1001176a:	2300      	movs	r3, #0
1001176c:	60a3      	str	r3, [r4, #8]
1001176e:	0023      	movs	r3, r4
10011770:	3347      	adds	r3, #71	; 0x47
10011772:	6023      	str	r3, [r4, #0]
10011774:	6123      	str	r3, [r4, #16]
10011776:	2301      	movs	r3, #1
10011778:	6163      	str	r3, [r4, #20]
1001177a:	e02a      	b.n	100117d2 <setvbuf+0x146>
1001177c:	2280      	movs	r2, #128	; 0x80
1001177e:	89a3      	ldrh	r3, [r4, #12]
10011780:	9d01      	ldr	r5, [sp, #4]
10011782:	4313      	orrs	r3, r2
10011784:	81a3      	strh	r3, [r4, #12]
10011786:	69b3      	ldr	r3, [r6, #24]
10011788:	2b00      	cmp	r3, #0
1001178a:	d102      	bne.n	10011792 <setvbuf+0x106>
1001178c:	0030      	movs	r0, r6
1001178e:	f000 f9ef 	bl	10011b70 <__sinit>
10011792:	9b00      	ldr	r3, [sp, #0]
10011794:	2b01      	cmp	r3, #1
10011796:	d103      	bne.n	100117a0 <setvbuf+0x114>
10011798:	89a3      	ldrh	r3, [r4, #12]
1001179a:	9a00      	ldr	r2, [sp, #0]
1001179c:	431a      	orrs	r2, r3
1001179e:	81a2      	strh	r2, [r4, #12]
100117a0:	2308      	movs	r3, #8
100117a2:	89a2      	ldrh	r2, [r4, #12]
100117a4:	6027      	str	r7, [r4, #0]
100117a6:	4013      	ands	r3, r2
100117a8:	6127      	str	r7, [r4, #16]
100117aa:	6165      	str	r5, [r4, #20]
100117ac:	1e18      	subs	r0, r3, #0
100117ae:	d00c      	beq.n	100117ca <setvbuf+0x13e>
100117b0:	2301      	movs	r3, #1
100117b2:	401a      	ands	r2, r3
100117b4:	2300      	movs	r3, #0
100117b6:	1e10      	subs	r0, r2, #0
100117b8:	4298      	cmp	r0, r3
100117ba:	d004      	beq.n	100117c6 <setvbuf+0x13a>
100117bc:	426d      	negs	r5, r5
100117be:	60a3      	str	r3, [r4, #8]
100117c0:	61a5      	str	r5, [r4, #24]
100117c2:	0018      	movs	r0, r3
100117c4:	e005      	b.n	100117d2 <setvbuf+0x146>
100117c6:	60a5      	str	r5, [r4, #8]
100117c8:	e003      	b.n	100117d2 <setvbuf+0x146>
100117ca:	60a3      	str	r3, [r4, #8]
100117cc:	e001      	b.n	100117d2 <setvbuf+0x146>
100117ce:	2001      	movs	r0, #1
100117d0:	4240      	negs	r0, r0
100117d2:	b005      	add	sp, #20
100117d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100117d6:	46c0      	nop			; (mov r8, r8)
100117d8:	10013660 	.word	0x10013660
100117dc:	10013504 	.word	0x10013504
100117e0:	10013524 	.word	0x10013524
100117e4:	10013544 	.word	0x10013544
100117e8:	fffff35c 	.word	0xfffff35c

100117ec <__swbuf_r>:
100117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100117ee:	0005      	movs	r5, r0
100117f0:	000f      	movs	r7, r1
100117f2:	0014      	movs	r4, r2
100117f4:	2800      	cmp	r0, #0
100117f6:	d004      	beq.n	10011802 <__swbuf_r+0x16>
100117f8:	6983      	ldr	r3, [r0, #24]
100117fa:	2b00      	cmp	r3, #0
100117fc:	d101      	bne.n	10011802 <__swbuf_r+0x16>
100117fe:	f000 f9b7 	bl	10011b70 <__sinit>
10011802:	4b23      	ldr	r3, [pc, #140]	; (10011890 <__swbuf_r+0xa4>)
10011804:	429c      	cmp	r4, r3
10011806:	d101      	bne.n	1001180c <__swbuf_r+0x20>
10011808:	686c      	ldr	r4, [r5, #4]
1001180a:	e008      	b.n	1001181e <__swbuf_r+0x32>
1001180c:	4b21      	ldr	r3, [pc, #132]	; (10011894 <__swbuf_r+0xa8>)
1001180e:	429c      	cmp	r4, r3
10011810:	d101      	bne.n	10011816 <__swbuf_r+0x2a>
10011812:	68ac      	ldr	r4, [r5, #8]
10011814:	e003      	b.n	1001181e <__swbuf_r+0x32>
10011816:	4b20      	ldr	r3, [pc, #128]	; (10011898 <__swbuf_r+0xac>)
10011818:	429c      	cmp	r4, r3
1001181a:	d100      	bne.n	1001181e <__swbuf_r+0x32>
1001181c:	68ec      	ldr	r4, [r5, #12]
1001181e:	69a3      	ldr	r3, [r4, #24]
10011820:	60a3      	str	r3, [r4, #8]
10011822:	89a3      	ldrh	r3, [r4, #12]
10011824:	071b      	lsls	r3, r3, #28
10011826:	d50a      	bpl.n	1001183e <__swbuf_r+0x52>
10011828:	6923      	ldr	r3, [r4, #16]
1001182a:	2b00      	cmp	r3, #0
1001182c:	d007      	beq.n	1001183e <__swbuf_r+0x52>
1001182e:	6823      	ldr	r3, [r4, #0]
10011830:	6922      	ldr	r2, [r4, #16]
10011832:	b2fe      	uxtb	r6, r7
10011834:	1a98      	subs	r0, r3, r2
10011836:	6963      	ldr	r3, [r4, #20]
10011838:	4298      	cmp	r0, r3
1001183a:	db0f      	blt.n	1001185c <__swbuf_r+0x70>
1001183c:	e008      	b.n	10011850 <__swbuf_r+0x64>
1001183e:	0021      	movs	r1, r4
10011840:	0028      	movs	r0, r5
10011842:	f000 f82b 	bl	1001189c <__swsetup_r>
10011846:	2800      	cmp	r0, #0
10011848:	d0f1      	beq.n	1001182e <__swbuf_r+0x42>
1001184a:	2001      	movs	r0, #1
1001184c:	4240      	negs	r0, r0
1001184e:	e01d      	b.n	1001188c <__swbuf_r+0xa0>
10011850:	0021      	movs	r1, r4
10011852:	0028      	movs	r0, r5
10011854:	f000 f91e 	bl	10011a94 <_fflush_r>
10011858:	2800      	cmp	r0, #0
1001185a:	d1f6      	bne.n	1001184a <__swbuf_r+0x5e>
1001185c:	68a3      	ldr	r3, [r4, #8]
1001185e:	3001      	adds	r0, #1
10011860:	3b01      	subs	r3, #1
10011862:	60a3      	str	r3, [r4, #8]
10011864:	6823      	ldr	r3, [r4, #0]
10011866:	1c5a      	adds	r2, r3, #1
10011868:	6022      	str	r2, [r4, #0]
1001186a:	701f      	strb	r7, [r3, #0]
1001186c:	6963      	ldr	r3, [r4, #20]
1001186e:	4298      	cmp	r0, r3
10011870:	d005      	beq.n	1001187e <__swbuf_r+0x92>
10011872:	89a3      	ldrh	r3, [r4, #12]
10011874:	0030      	movs	r0, r6
10011876:	07db      	lsls	r3, r3, #31
10011878:	d508      	bpl.n	1001188c <__swbuf_r+0xa0>
1001187a:	2e0a      	cmp	r6, #10
1001187c:	d106      	bne.n	1001188c <__swbuf_r+0xa0>
1001187e:	0021      	movs	r1, r4
10011880:	0028      	movs	r0, r5
10011882:	f000 f907 	bl	10011a94 <_fflush_r>
10011886:	2800      	cmp	r0, #0
10011888:	d1df      	bne.n	1001184a <__swbuf_r+0x5e>
1001188a:	0030      	movs	r0, r6
1001188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001188e:	46c0      	nop			; (mov r8, r8)
10011890:	10013504 	.word	0x10013504
10011894:	10013524 	.word	0x10013524
10011898:	10013544 	.word	0x10013544

1001189c <__swsetup_r>:
1001189c:	4b36      	ldr	r3, [pc, #216]	; (10011978 <__swsetup_r+0xdc>)
1001189e:	b570      	push	{r4, r5, r6, lr}
100118a0:	681d      	ldr	r5, [r3, #0]
100118a2:	0006      	movs	r6, r0
100118a4:	000c      	movs	r4, r1
100118a6:	2d00      	cmp	r5, #0
100118a8:	d005      	beq.n	100118b6 <__swsetup_r+0x1a>
100118aa:	69ab      	ldr	r3, [r5, #24]
100118ac:	2b00      	cmp	r3, #0
100118ae:	d102      	bne.n	100118b6 <__swsetup_r+0x1a>
100118b0:	0028      	movs	r0, r5
100118b2:	f000 f95d 	bl	10011b70 <__sinit>
100118b6:	4b31      	ldr	r3, [pc, #196]	; (1001197c <__swsetup_r+0xe0>)
100118b8:	429c      	cmp	r4, r3
100118ba:	d101      	bne.n	100118c0 <__swsetup_r+0x24>
100118bc:	686c      	ldr	r4, [r5, #4]
100118be:	e008      	b.n	100118d2 <__swsetup_r+0x36>
100118c0:	4b2f      	ldr	r3, [pc, #188]	; (10011980 <__swsetup_r+0xe4>)
100118c2:	429c      	cmp	r4, r3
100118c4:	d101      	bne.n	100118ca <__swsetup_r+0x2e>
100118c6:	68ac      	ldr	r4, [r5, #8]
100118c8:	e003      	b.n	100118d2 <__swsetup_r+0x36>
100118ca:	4b2e      	ldr	r3, [pc, #184]	; (10011984 <__swsetup_r+0xe8>)
100118cc:	429c      	cmp	r4, r3
100118ce:	d100      	bne.n	100118d2 <__swsetup_r+0x36>
100118d0:	68ec      	ldr	r4, [r5, #12]
100118d2:	220c      	movs	r2, #12
100118d4:	5ea3      	ldrsh	r3, [r4, r2]
100118d6:	b29a      	uxth	r2, r3
100118d8:	0711      	lsls	r1, r2, #28
100118da:	d423      	bmi.n	10011924 <__swsetup_r+0x88>
100118dc:	06d1      	lsls	r1, r2, #27
100118de:	d407      	bmi.n	100118f0 <__swsetup_r+0x54>
100118e0:	2209      	movs	r2, #9
100118e2:	2001      	movs	r0, #1
100118e4:	6032      	str	r2, [r6, #0]
100118e6:	3237      	adds	r2, #55	; 0x37
100118e8:	4313      	orrs	r3, r2
100118ea:	81a3      	strh	r3, [r4, #12]
100118ec:	4240      	negs	r0, r0
100118ee:	e042      	b.n	10011976 <__swsetup_r+0xda>
100118f0:	0753      	lsls	r3, r2, #29
100118f2:	d513      	bpl.n	1001191c <__swsetup_r+0x80>
100118f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
100118f6:	2900      	cmp	r1, #0
100118f8:	d008      	beq.n	1001190c <__swsetup_r+0x70>
100118fa:	0023      	movs	r3, r4
100118fc:	3344      	adds	r3, #68	; 0x44
100118fe:	4299      	cmp	r1, r3
10011900:	d002      	beq.n	10011908 <__swsetup_r+0x6c>
10011902:	0030      	movs	r0, r6
10011904:	f7ff fd34 	bl	10011370 <_free_r>
10011908:	2300      	movs	r3, #0
1001190a:	6363      	str	r3, [r4, #52]	; 0x34
1001190c:	2224      	movs	r2, #36	; 0x24
1001190e:	89a3      	ldrh	r3, [r4, #12]
10011910:	4393      	bics	r3, r2
10011912:	81a3      	strh	r3, [r4, #12]
10011914:	2300      	movs	r3, #0
10011916:	6063      	str	r3, [r4, #4]
10011918:	6923      	ldr	r3, [r4, #16]
1001191a:	6023      	str	r3, [r4, #0]
1001191c:	2208      	movs	r2, #8
1001191e:	89a3      	ldrh	r3, [r4, #12]
10011920:	4313      	orrs	r3, r2
10011922:	81a3      	strh	r3, [r4, #12]
10011924:	6923      	ldr	r3, [r4, #16]
10011926:	2b00      	cmp	r3, #0
10011928:	d10b      	bne.n	10011942 <__swsetup_r+0xa6>
1001192a:	23a0      	movs	r3, #160	; 0xa0
1001192c:	89a2      	ldrh	r2, [r4, #12]
1001192e:	009b      	lsls	r3, r3, #2
10011930:	4013      	ands	r3, r2
10011932:	2280      	movs	r2, #128	; 0x80
10011934:	0092      	lsls	r2, r2, #2
10011936:	4293      	cmp	r3, r2
10011938:	d003      	beq.n	10011942 <__swsetup_r+0xa6>
1001193a:	0021      	movs	r1, r4
1001193c:	0030      	movs	r0, r6
1001193e:	f000 f9d1 	bl	10011ce4 <__smakebuf_r>
10011942:	2301      	movs	r3, #1
10011944:	89a2      	ldrh	r2, [r4, #12]
10011946:	4013      	ands	r3, r2
10011948:	d005      	beq.n	10011956 <__swsetup_r+0xba>
1001194a:	2300      	movs	r3, #0
1001194c:	60a3      	str	r3, [r4, #8]
1001194e:	6963      	ldr	r3, [r4, #20]
10011950:	425b      	negs	r3, r3
10011952:	61a3      	str	r3, [r4, #24]
10011954:	e003      	b.n	1001195e <__swsetup_r+0xc2>
10011956:	0792      	lsls	r2, r2, #30
10011958:	d400      	bmi.n	1001195c <__swsetup_r+0xc0>
1001195a:	6963      	ldr	r3, [r4, #20]
1001195c:	60a3      	str	r3, [r4, #8]
1001195e:	2000      	movs	r0, #0
10011960:	6923      	ldr	r3, [r4, #16]
10011962:	4283      	cmp	r3, r0
10011964:	d107      	bne.n	10011976 <__swsetup_r+0xda>
10011966:	220c      	movs	r2, #12
10011968:	5ea3      	ldrsh	r3, [r4, r2]
1001196a:	061a      	lsls	r2, r3, #24
1001196c:	d503      	bpl.n	10011976 <__swsetup_r+0xda>
1001196e:	2240      	movs	r2, #64	; 0x40
10011970:	4313      	orrs	r3, r2
10011972:	81a3      	strh	r3, [r4, #12]
10011974:	3801      	subs	r0, #1
10011976:	bd70      	pop	{r4, r5, r6, pc}
10011978:	10013660 	.word	0x10013660
1001197c:	10013504 	.word	0x10013504
10011980:	10013524 	.word	0x10013524
10011984:	10013544 	.word	0x10013544

10011988 <__sflush_r>:
10011988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001198a:	898a      	ldrh	r2, [r1, #12]
1001198c:	0005      	movs	r5, r0
1001198e:	000c      	movs	r4, r1
10011990:	0713      	lsls	r3, r2, #28
10011992:	d45a      	bmi.n	10011a4a <__sflush_r+0xc2>
10011994:	684b      	ldr	r3, [r1, #4]
10011996:	2b00      	cmp	r3, #0
10011998:	dc02      	bgt.n	100119a0 <__sflush_r+0x18>
1001199a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001199c:	2b00      	cmp	r3, #0
1001199e:	dd19      	ble.n	100119d4 <__sflush_r+0x4c>
100119a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100119a2:	2f00      	cmp	r7, #0
100119a4:	d016      	beq.n	100119d4 <__sflush_r+0x4c>
100119a6:	2300      	movs	r3, #0
100119a8:	682e      	ldr	r6, [r5, #0]
100119aa:	602b      	str	r3, [r5, #0]
100119ac:	2380      	movs	r3, #128	; 0x80
100119ae:	015b      	lsls	r3, r3, #5
100119b0:	401a      	ands	r2, r3
100119b2:	d001      	beq.n	100119b8 <__sflush_r+0x30>
100119b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
100119b6:	e014      	b.n	100119e2 <__sflush_r+0x5a>
100119b8:	2301      	movs	r3, #1
100119ba:	6a21      	ldr	r1, [r4, #32]
100119bc:	0028      	movs	r0, r5
100119be:	47b8      	blx	r7
100119c0:	1c43      	adds	r3, r0, #1
100119c2:	d10e      	bne.n	100119e2 <__sflush_r+0x5a>
100119c4:	682b      	ldr	r3, [r5, #0]
100119c6:	2b00      	cmp	r3, #0
100119c8:	d00b      	beq.n	100119e2 <__sflush_r+0x5a>
100119ca:	2b1d      	cmp	r3, #29
100119cc:	d001      	beq.n	100119d2 <__sflush_r+0x4a>
100119ce:	2b16      	cmp	r3, #22
100119d0:	d102      	bne.n	100119d8 <__sflush_r+0x50>
100119d2:	602e      	str	r6, [r5, #0]
100119d4:	2000      	movs	r0, #0
100119d6:	e05a      	b.n	10011a8e <__sflush_r+0x106>
100119d8:	2240      	movs	r2, #64	; 0x40
100119da:	89a3      	ldrh	r3, [r4, #12]
100119dc:	4313      	orrs	r3, r2
100119de:	81a3      	strh	r3, [r4, #12]
100119e0:	e055      	b.n	10011a8e <__sflush_r+0x106>
100119e2:	89a3      	ldrh	r3, [r4, #12]
100119e4:	075b      	lsls	r3, r3, #29
100119e6:	d506      	bpl.n	100119f6 <__sflush_r+0x6e>
100119e8:	6863      	ldr	r3, [r4, #4]
100119ea:	1ac0      	subs	r0, r0, r3
100119ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
100119ee:	2b00      	cmp	r3, #0
100119f0:	d001      	beq.n	100119f6 <__sflush_r+0x6e>
100119f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
100119f4:	1ac0      	subs	r0, r0, r3
100119f6:	2300      	movs	r3, #0
100119f8:	0002      	movs	r2, r0
100119fa:	6a21      	ldr	r1, [r4, #32]
100119fc:	0028      	movs	r0, r5
100119fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011a00:	47b8      	blx	r7
10011a02:	89a3      	ldrh	r3, [r4, #12]
10011a04:	1c42      	adds	r2, r0, #1
10011a06:	d106      	bne.n	10011a16 <__sflush_r+0x8e>
10011a08:	6829      	ldr	r1, [r5, #0]
10011a0a:	291d      	cmp	r1, #29
10011a0c:	d83a      	bhi.n	10011a84 <__sflush_r+0xfc>
10011a0e:	4a20      	ldr	r2, [pc, #128]	; (10011a90 <__sflush_r+0x108>)
10011a10:	40ca      	lsrs	r2, r1
10011a12:	07d2      	lsls	r2, r2, #31
10011a14:	d536      	bpl.n	10011a84 <__sflush_r+0xfc>
10011a16:	2200      	movs	r2, #0
10011a18:	6062      	str	r2, [r4, #4]
10011a1a:	6922      	ldr	r2, [r4, #16]
10011a1c:	6022      	str	r2, [r4, #0]
10011a1e:	04db      	lsls	r3, r3, #19
10011a20:	d505      	bpl.n	10011a2e <__sflush_r+0xa6>
10011a22:	1c43      	adds	r3, r0, #1
10011a24:	d102      	bne.n	10011a2c <__sflush_r+0xa4>
10011a26:	682b      	ldr	r3, [r5, #0]
10011a28:	2b00      	cmp	r3, #0
10011a2a:	d100      	bne.n	10011a2e <__sflush_r+0xa6>
10011a2c:	6560      	str	r0, [r4, #84]	; 0x54
10011a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011a30:	602e      	str	r6, [r5, #0]
10011a32:	2900      	cmp	r1, #0
10011a34:	d0ce      	beq.n	100119d4 <__sflush_r+0x4c>
10011a36:	0023      	movs	r3, r4
10011a38:	3344      	adds	r3, #68	; 0x44
10011a3a:	4299      	cmp	r1, r3
10011a3c:	d002      	beq.n	10011a44 <__sflush_r+0xbc>
10011a3e:	0028      	movs	r0, r5
10011a40:	f7ff fc96 	bl	10011370 <_free_r>
10011a44:	2000      	movs	r0, #0
10011a46:	6360      	str	r0, [r4, #52]	; 0x34
10011a48:	e021      	b.n	10011a8e <__sflush_r+0x106>
10011a4a:	690f      	ldr	r7, [r1, #16]
10011a4c:	2f00      	cmp	r7, #0
10011a4e:	d0c1      	beq.n	100119d4 <__sflush_r+0x4c>
10011a50:	680b      	ldr	r3, [r1, #0]
10011a52:	600f      	str	r7, [r1, #0]
10011a54:	1bdb      	subs	r3, r3, r7
10011a56:	9301      	str	r3, [sp, #4]
10011a58:	2300      	movs	r3, #0
10011a5a:	0792      	lsls	r2, r2, #30
10011a5c:	d100      	bne.n	10011a60 <__sflush_r+0xd8>
10011a5e:	694b      	ldr	r3, [r1, #20]
10011a60:	60a3      	str	r3, [r4, #8]
10011a62:	e003      	b.n	10011a6c <__sflush_r+0xe4>
10011a64:	9b01      	ldr	r3, [sp, #4]
10011a66:	183f      	adds	r7, r7, r0
10011a68:	1a1b      	subs	r3, r3, r0
10011a6a:	9301      	str	r3, [sp, #4]
10011a6c:	9b01      	ldr	r3, [sp, #4]
10011a6e:	2b00      	cmp	r3, #0
10011a70:	ddb0      	ble.n	100119d4 <__sflush_r+0x4c>
10011a72:	9b01      	ldr	r3, [sp, #4]
10011a74:	003a      	movs	r2, r7
10011a76:	6a21      	ldr	r1, [r4, #32]
10011a78:	0028      	movs	r0, r5
10011a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011a7c:	47b0      	blx	r6
10011a7e:	2800      	cmp	r0, #0
10011a80:	dcf0      	bgt.n	10011a64 <__sflush_r+0xdc>
10011a82:	89a3      	ldrh	r3, [r4, #12]
10011a84:	2240      	movs	r2, #64	; 0x40
10011a86:	2001      	movs	r0, #1
10011a88:	4313      	orrs	r3, r2
10011a8a:	81a3      	strh	r3, [r4, #12]
10011a8c:	4240      	negs	r0, r0
10011a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011a90:	20400001 	.word	0x20400001

10011a94 <_fflush_r>:
10011a94:	690b      	ldr	r3, [r1, #16]
10011a96:	b570      	push	{r4, r5, r6, lr}
10011a98:	0005      	movs	r5, r0
10011a9a:	000c      	movs	r4, r1
10011a9c:	2b00      	cmp	r3, #0
10011a9e:	d101      	bne.n	10011aa4 <_fflush_r+0x10>
10011aa0:	2000      	movs	r0, #0
10011aa2:	e01c      	b.n	10011ade <_fflush_r+0x4a>
10011aa4:	2800      	cmp	r0, #0
10011aa6:	d004      	beq.n	10011ab2 <_fflush_r+0x1e>
10011aa8:	6983      	ldr	r3, [r0, #24]
10011aaa:	2b00      	cmp	r3, #0
10011aac:	d101      	bne.n	10011ab2 <_fflush_r+0x1e>
10011aae:	f000 f85f 	bl	10011b70 <__sinit>
10011ab2:	4b0b      	ldr	r3, [pc, #44]	; (10011ae0 <_fflush_r+0x4c>)
10011ab4:	429c      	cmp	r4, r3
10011ab6:	d101      	bne.n	10011abc <_fflush_r+0x28>
10011ab8:	686c      	ldr	r4, [r5, #4]
10011aba:	e008      	b.n	10011ace <_fflush_r+0x3a>
10011abc:	4b09      	ldr	r3, [pc, #36]	; (10011ae4 <_fflush_r+0x50>)
10011abe:	429c      	cmp	r4, r3
10011ac0:	d101      	bne.n	10011ac6 <_fflush_r+0x32>
10011ac2:	68ac      	ldr	r4, [r5, #8]
10011ac4:	e003      	b.n	10011ace <_fflush_r+0x3a>
10011ac6:	4b08      	ldr	r3, [pc, #32]	; (10011ae8 <_fflush_r+0x54>)
10011ac8:	429c      	cmp	r4, r3
10011aca:	d100      	bne.n	10011ace <_fflush_r+0x3a>
10011acc:	68ec      	ldr	r4, [r5, #12]
10011ace:	220c      	movs	r2, #12
10011ad0:	5ea3      	ldrsh	r3, [r4, r2]
10011ad2:	2b00      	cmp	r3, #0
10011ad4:	d0e4      	beq.n	10011aa0 <_fflush_r+0xc>
10011ad6:	0021      	movs	r1, r4
10011ad8:	0028      	movs	r0, r5
10011ada:	f7ff ff55 	bl	10011988 <__sflush_r>
10011ade:	bd70      	pop	{r4, r5, r6, pc}
10011ae0:	10013504 	.word	0x10013504
10011ae4:	10013524 	.word	0x10013524
10011ae8:	10013544 	.word	0x10013544

10011aec <_cleanup_r>:
10011aec:	b510      	push	{r4, lr}
10011aee:	4902      	ldr	r1, [pc, #8]	; (10011af8 <_cleanup_r+0xc>)
10011af0:	f000 f8b0 	bl	10011c54 <_fwalk_reent>
10011af4:	bd10      	pop	{r4, pc}
10011af6:	46c0      	nop			; (mov r8, r8)
10011af8:	10011a95 	.word	0x10011a95

10011afc <std.isra.0>:
10011afc:	2300      	movs	r3, #0
10011afe:	b510      	push	{r4, lr}
10011b00:	0004      	movs	r4, r0
10011b02:	6003      	str	r3, [r0, #0]
10011b04:	6043      	str	r3, [r0, #4]
10011b06:	6083      	str	r3, [r0, #8]
10011b08:	8181      	strh	r1, [r0, #12]
10011b0a:	6643      	str	r3, [r0, #100]	; 0x64
10011b0c:	81c2      	strh	r2, [r0, #14]
10011b0e:	6103      	str	r3, [r0, #16]
10011b10:	6143      	str	r3, [r0, #20]
10011b12:	6183      	str	r3, [r0, #24]
10011b14:	0019      	movs	r1, r3
10011b16:	2208      	movs	r2, #8
10011b18:	305c      	adds	r0, #92	; 0x5c
10011b1a:	f7ff fc21 	bl	10011360 <memset>
10011b1e:	4b05      	ldr	r3, [pc, #20]	; (10011b34 <std.isra.0+0x38>)
10011b20:	6224      	str	r4, [r4, #32]
10011b22:	6263      	str	r3, [r4, #36]	; 0x24
10011b24:	4b04      	ldr	r3, [pc, #16]	; (10011b38 <std.isra.0+0x3c>)
10011b26:	62a3      	str	r3, [r4, #40]	; 0x28
10011b28:	4b04      	ldr	r3, [pc, #16]	; (10011b3c <std.isra.0+0x40>)
10011b2a:	62e3      	str	r3, [r4, #44]	; 0x2c
10011b2c:	4b04      	ldr	r3, [pc, #16]	; (10011b40 <std.isra.0+0x44>)
10011b2e:	6323      	str	r3, [r4, #48]	; 0x30
10011b30:	bd10      	pop	{r4, pc}
10011b32:	46c0      	nop			; (mov r8, r8)
10011b34:	10012375 	.word	0x10012375
10011b38:	1001239d 	.word	0x1001239d
10011b3c:	100123d5 	.word	0x100123d5
10011b40:	10012401 	.word	0x10012401

10011b44 <__sfmoreglue>:
10011b44:	b570      	push	{r4, r5, r6, lr}
10011b46:	2568      	movs	r5, #104	; 0x68
10011b48:	1e4b      	subs	r3, r1, #1
10011b4a:	435d      	muls	r5, r3
10011b4c:	000e      	movs	r6, r1
10011b4e:	0029      	movs	r1, r5
10011b50:	3174      	adds	r1, #116	; 0x74
10011b52:	f7ff fc53 	bl	100113fc <_malloc_r>
10011b56:	1e04      	subs	r4, r0, #0
10011b58:	d008      	beq.n	10011b6c <__sfmoreglue+0x28>
10011b5a:	2100      	movs	r1, #0
10011b5c:	002a      	movs	r2, r5
10011b5e:	6001      	str	r1, [r0, #0]
10011b60:	6046      	str	r6, [r0, #4]
10011b62:	300c      	adds	r0, #12
10011b64:	60a0      	str	r0, [r4, #8]
10011b66:	3268      	adds	r2, #104	; 0x68
10011b68:	f7ff fbfa 	bl	10011360 <memset>
10011b6c:	0020      	movs	r0, r4
10011b6e:	bd70      	pop	{r4, r5, r6, pc}

10011b70 <__sinit>:
10011b70:	6983      	ldr	r3, [r0, #24]
10011b72:	b513      	push	{r0, r1, r4, lr}
10011b74:	0004      	movs	r4, r0
10011b76:	2b00      	cmp	r3, #0
10011b78:	d128      	bne.n	10011bcc <__sinit+0x5c>
10011b7a:	6483      	str	r3, [r0, #72]	; 0x48
10011b7c:	64c3      	str	r3, [r0, #76]	; 0x4c
10011b7e:	6503      	str	r3, [r0, #80]	; 0x50
10011b80:	4b13      	ldr	r3, [pc, #76]	; (10011bd0 <__sinit+0x60>)
10011b82:	4a14      	ldr	r2, [pc, #80]	; (10011bd4 <__sinit+0x64>)
10011b84:	681b      	ldr	r3, [r3, #0]
10011b86:	6282      	str	r2, [r0, #40]	; 0x28
10011b88:	9301      	str	r3, [sp, #4]
10011b8a:	4298      	cmp	r0, r3
10011b8c:	d101      	bne.n	10011b92 <__sinit+0x22>
10011b8e:	2301      	movs	r3, #1
10011b90:	6183      	str	r3, [r0, #24]
10011b92:	0020      	movs	r0, r4
10011b94:	f000 f820 	bl	10011bd8 <__sfp>
10011b98:	6060      	str	r0, [r4, #4]
10011b9a:	0020      	movs	r0, r4
10011b9c:	f000 f81c 	bl	10011bd8 <__sfp>
10011ba0:	60a0      	str	r0, [r4, #8]
10011ba2:	0020      	movs	r0, r4
10011ba4:	f000 f818 	bl	10011bd8 <__sfp>
10011ba8:	2200      	movs	r2, #0
10011baa:	60e0      	str	r0, [r4, #12]
10011bac:	2104      	movs	r1, #4
10011bae:	6860      	ldr	r0, [r4, #4]
10011bb0:	f7ff ffa4 	bl	10011afc <std.isra.0>
10011bb4:	2201      	movs	r2, #1
10011bb6:	2109      	movs	r1, #9
10011bb8:	68a0      	ldr	r0, [r4, #8]
10011bba:	f7ff ff9f 	bl	10011afc <std.isra.0>
10011bbe:	2202      	movs	r2, #2
10011bc0:	2112      	movs	r1, #18
10011bc2:	68e0      	ldr	r0, [r4, #12]
10011bc4:	f7ff ff9a 	bl	10011afc <std.isra.0>
10011bc8:	2301      	movs	r3, #1
10011bca:	61a3      	str	r3, [r4, #24]
10011bcc:	bd13      	pop	{r0, r1, r4, pc}
10011bce:	46c0      	nop			; (mov r8, r8)
10011bd0:	10013500 	.word	0x10013500
10011bd4:	10011aed 	.word	0x10011aed

10011bd8 <__sfp>:
10011bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011bda:	4b1d      	ldr	r3, [pc, #116]	; (10011c50 <__sfp+0x78>)
10011bdc:	0006      	movs	r6, r0
10011bde:	681d      	ldr	r5, [r3, #0]
10011be0:	69ab      	ldr	r3, [r5, #24]
10011be2:	2b00      	cmp	r3, #0
10011be4:	d102      	bne.n	10011bec <__sfp+0x14>
10011be6:	0028      	movs	r0, r5
10011be8:	f7ff ffc2 	bl	10011b70 <__sinit>
10011bec:	3548      	adds	r5, #72	; 0x48
10011bee:	68ac      	ldr	r4, [r5, #8]
10011bf0:	686b      	ldr	r3, [r5, #4]
10011bf2:	3b01      	subs	r3, #1
10011bf4:	d405      	bmi.n	10011c02 <__sfp+0x2a>
10011bf6:	220c      	movs	r2, #12
10011bf8:	5ea7      	ldrsh	r7, [r4, r2]
10011bfa:	2f00      	cmp	r7, #0
10011bfc:	d010      	beq.n	10011c20 <__sfp+0x48>
10011bfe:	3468      	adds	r4, #104	; 0x68
10011c00:	e7f7      	b.n	10011bf2 <__sfp+0x1a>
10011c02:	682b      	ldr	r3, [r5, #0]
10011c04:	2b00      	cmp	r3, #0
10011c06:	d001      	beq.n	10011c0c <__sfp+0x34>
10011c08:	682d      	ldr	r5, [r5, #0]
10011c0a:	e7f0      	b.n	10011bee <__sfp+0x16>
10011c0c:	2104      	movs	r1, #4
10011c0e:	0030      	movs	r0, r6
10011c10:	f7ff ff98 	bl	10011b44 <__sfmoreglue>
10011c14:	6028      	str	r0, [r5, #0]
10011c16:	2800      	cmp	r0, #0
10011c18:	d1f6      	bne.n	10011c08 <__sfp+0x30>
10011c1a:	230c      	movs	r3, #12
10011c1c:	6033      	str	r3, [r6, #0]
10011c1e:	e016      	b.n	10011c4e <__sfp+0x76>
10011c20:	2301      	movs	r3, #1
10011c22:	0020      	movs	r0, r4
10011c24:	425b      	negs	r3, r3
10011c26:	81e3      	strh	r3, [r4, #14]
10011c28:	3302      	adds	r3, #2
10011c2a:	81a3      	strh	r3, [r4, #12]
10011c2c:	6667      	str	r7, [r4, #100]	; 0x64
10011c2e:	6027      	str	r7, [r4, #0]
10011c30:	60a7      	str	r7, [r4, #8]
10011c32:	6067      	str	r7, [r4, #4]
10011c34:	6127      	str	r7, [r4, #16]
10011c36:	6167      	str	r7, [r4, #20]
10011c38:	61a7      	str	r7, [r4, #24]
10011c3a:	305c      	adds	r0, #92	; 0x5c
10011c3c:	2208      	movs	r2, #8
10011c3e:	0039      	movs	r1, r7
10011c40:	f7ff fb8e 	bl	10011360 <memset>
10011c44:	0020      	movs	r0, r4
10011c46:	6367      	str	r7, [r4, #52]	; 0x34
10011c48:	63a7      	str	r7, [r4, #56]	; 0x38
10011c4a:	64a7      	str	r7, [r4, #72]	; 0x48
10011c4c:	64e7      	str	r7, [r4, #76]	; 0x4c
10011c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011c50:	10013500 	.word	0x10013500

10011c54 <_fwalk_reent>:
10011c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011c56:	0004      	movs	r4, r0
10011c58:	0007      	movs	r7, r0
10011c5a:	2600      	movs	r6, #0
10011c5c:	9101      	str	r1, [sp, #4]
10011c5e:	3448      	adds	r4, #72	; 0x48
10011c60:	2c00      	cmp	r4, #0
10011c62:	d016      	beq.n	10011c92 <_fwalk_reent+0x3e>
10011c64:	6863      	ldr	r3, [r4, #4]
10011c66:	68a5      	ldr	r5, [r4, #8]
10011c68:	9300      	str	r3, [sp, #0]
10011c6a:	9b00      	ldr	r3, [sp, #0]
10011c6c:	3b01      	subs	r3, #1
10011c6e:	9300      	str	r3, [sp, #0]
10011c70:	d40d      	bmi.n	10011c8e <_fwalk_reent+0x3a>
10011c72:	89ab      	ldrh	r3, [r5, #12]
10011c74:	2b01      	cmp	r3, #1
10011c76:	d908      	bls.n	10011c8a <_fwalk_reent+0x36>
10011c78:	220e      	movs	r2, #14
10011c7a:	5eab      	ldrsh	r3, [r5, r2]
10011c7c:	3301      	adds	r3, #1
10011c7e:	d004      	beq.n	10011c8a <_fwalk_reent+0x36>
10011c80:	0029      	movs	r1, r5
10011c82:	0038      	movs	r0, r7
10011c84:	9b01      	ldr	r3, [sp, #4]
10011c86:	4798      	blx	r3
10011c88:	4306      	orrs	r6, r0
10011c8a:	3568      	adds	r5, #104	; 0x68
10011c8c:	e7ed      	b.n	10011c6a <_fwalk_reent+0x16>
10011c8e:	6824      	ldr	r4, [r4, #0]
10011c90:	e7e6      	b.n	10011c60 <_fwalk_reent+0xc>
10011c92:	0030      	movs	r0, r6
10011c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011c98 <__swhatbuf_r>:
10011c98:	b570      	push	{r4, r5, r6, lr}
10011c9a:	000e      	movs	r6, r1
10011c9c:	001d      	movs	r5, r3
10011c9e:	230e      	movs	r3, #14
10011ca0:	5ec9      	ldrsh	r1, [r1, r3]
10011ca2:	b090      	sub	sp, #64	; 0x40
10011ca4:	0014      	movs	r4, r2
10011ca6:	2900      	cmp	r1, #0
10011ca8:	da06      	bge.n	10011cb8 <__swhatbuf_r+0x20>
10011caa:	2300      	movs	r3, #0
10011cac:	602b      	str	r3, [r5, #0]
10011cae:	89b3      	ldrh	r3, [r6, #12]
10011cb0:	061b      	lsls	r3, r3, #24
10011cb2:	d50f      	bpl.n	10011cd4 <__swhatbuf_r+0x3c>
10011cb4:	2340      	movs	r3, #64	; 0x40
10011cb6:	e00f      	b.n	10011cd8 <__swhatbuf_r+0x40>
10011cb8:	aa01      	add	r2, sp, #4
10011cba:	f000 fbcd 	bl	10012458 <_fstat_r>
10011cbe:	2800      	cmp	r0, #0
10011cc0:	dbf3      	blt.n	10011caa <__swhatbuf_r+0x12>
10011cc2:	23f0      	movs	r3, #240	; 0xf0
10011cc4:	9a02      	ldr	r2, [sp, #8]
10011cc6:	021b      	lsls	r3, r3, #8
10011cc8:	4013      	ands	r3, r2
10011cca:	4a05      	ldr	r2, [pc, #20]	; (10011ce0 <__swhatbuf_r+0x48>)
10011ccc:	189b      	adds	r3, r3, r2
10011cce:	425a      	negs	r2, r3
10011cd0:	4153      	adcs	r3, r2
10011cd2:	602b      	str	r3, [r5, #0]
10011cd4:	2380      	movs	r3, #128	; 0x80
10011cd6:	00db      	lsls	r3, r3, #3
10011cd8:	2000      	movs	r0, #0
10011cda:	6023      	str	r3, [r4, #0]
10011cdc:	b010      	add	sp, #64	; 0x40
10011cde:	bd70      	pop	{r4, r5, r6, pc}
10011ce0:	ffffe000 	.word	0xffffe000

10011ce4 <__smakebuf_r>:
10011ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ce6:	2602      	movs	r6, #2
10011ce8:	898b      	ldrh	r3, [r1, #12]
10011cea:	0005      	movs	r5, r0
10011cec:	000c      	movs	r4, r1
10011cee:	4233      	tst	r3, r6
10011cf0:	d110      	bne.n	10011d14 <__smakebuf_r+0x30>
10011cf2:	ab01      	add	r3, sp, #4
10011cf4:	466a      	mov	r2, sp
10011cf6:	f7ff ffcf 	bl	10011c98 <__swhatbuf_r>
10011cfa:	9900      	ldr	r1, [sp, #0]
10011cfc:	0007      	movs	r7, r0
10011cfe:	0028      	movs	r0, r5
10011d00:	f7ff fb7c 	bl	100113fc <_malloc_r>
10011d04:	2800      	cmp	r0, #0
10011d06:	d10c      	bne.n	10011d22 <__smakebuf_r+0x3e>
10011d08:	220c      	movs	r2, #12
10011d0a:	5ea3      	ldrsh	r3, [r4, r2]
10011d0c:	059a      	lsls	r2, r3, #22
10011d0e:	d423      	bmi.n	10011d58 <__smakebuf_r+0x74>
10011d10:	4333      	orrs	r3, r6
10011d12:	81a3      	strh	r3, [r4, #12]
10011d14:	0023      	movs	r3, r4
10011d16:	3347      	adds	r3, #71	; 0x47
10011d18:	6023      	str	r3, [r4, #0]
10011d1a:	6123      	str	r3, [r4, #16]
10011d1c:	2301      	movs	r3, #1
10011d1e:	6163      	str	r3, [r4, #20]
10011d20:	e01a      	b.n	10011d58 <__smakebuf_r+0x74>
10011d22:	2280      	movs	r2, #128	; 0x80
10011d24:	4b0d      	ldr	r3, [pc, #52]	; (10011d5c <__smakebuf_r+0x78>)
10011d26:	62ab      	str	r3, [r5, #40]	; 0x28
10011d28:	89a3      	ldrh	r3, [r4, #12]
10011d2a:	6020      	str	r0, [r4, #0]
10011d2c:	4313      	orrs	r3, r2
10011d2e:	81a3      	strh	r3, [r4, #12]
10011d30:	9b00      	ldr	r3, [sp, #0]
10011d32:	6120      	str	r0, [r4, #16]
10011d34:	6163      	str	r3, [r4, #20]
10011d36:	9b01      	ldr	r3, [sp, #4]
10011d38:	2b00      	cmp	r3, #0
10011d3a:	d00a      	beq.n	10011d52 <__smakebuf_r+0x6e>
10011d3c:	230e      	movs	r3, #14
10011d3e:	5ee1      	ldrsh	r1, [r4, r3]
10011d40:	0028      	movs	r0, r5
10011d42:	f000 fb9b 	bl	1001247c <_isatty_r>
10011d46:	2800      	cmp	r0, #0
10011d48:	d003      	beq.n	10011d52 <__smakebuf_r+0x6e>
10011d4a:	2201      	movs	r2, #1
10011d4c:	89a3      	ldrh	r3, [r4, #12]
10011d4e:	4313      	orrs	r3, r2
10011d50:	81a3      	strh	r3, [r4, #12]
10011d52:	89a3      	ldrh	r3, [r4, #12]
10011d54:	431f      	orrs	r7, r3
10011d56:	81a7      	strh	r7, [r4, #12]
10011d58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011d5a:	46c0      	nop			; (mov r8, r8)
10011d5c:	10011aed 	.word	0x10011aed

10011d60 <__sfputc_r>:
10011d60:	6893      	ldr	r3, [r2, #8]
10011d62:	b510      	push	{r4, lr}
10011d64:	3b01      	subs	r3, #1
10011d66:	6093      	str	r3, [r2, #8]
10011d68:	2b00      	cmp	r3, #0
10011d6a:	da05      	bge.n	10011d78 <__sfputc_r+0x18>
10011d6c:	6994      	ldr	r4, [r2, #24]
10011d6e:	42a3      	cmp	r3, r4
10011d70:	db08      	blt.n	10011d84 <__sfputc_r+0x24>
10011d72:	b2cb      	uxtb	r3, r1
10011d74:	2b0a      	cmp	r3, #10
10011d76:	d005      	beq.n	10011d84 <__sfputc_r+0x24>
10011d78:	6813      	ldr	r3, [r2, #0]
10011d7a:	1c58      	adds	r0, r3, #1
10011d7c:	6010      	str	r0, [r2, #0]
10011d7e:	7019      	strb	r1, [r3, #0]
10011d80:	b2c8      	uxtb	r0, r1
10011d82:	e001      	b.n	10011d88 <__sfputc_r+0x28>
10011d84:	f7ff fd32 	bl	100117ec <__swbuf_r>
10011d88:	bd10      	pop	{r4, pc}

10011d8a <__sfputs_r>:
10011d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011d8c:	0006      	movs	r6, r0
10011d8e:	000f      	movs	r7, r1
10011d90:	0014      	movs	r4, r2
10011d92:	18d5      	adds	r5, r2, r3
10011d94:	42ac      	cmp	r4, r5
10011d96:	d008      	beq.n	10011daa <__sfputs_r+0x20>
10011d98:	7821      	ldrb	r1, [r4, #0]
10011d9a:	003a      	movs	r2, r7
10011d9c:	0030      	movs	r0, r6
10011d9e:	f7ff ffdf 	bl	10011d60 <__sfputc_r>
10011da2:	3401      	adds	r4, #1
10011da4:	1c43      	adds	r3, r0, #1
10011da6:	d1f5      	bne.n	10011d94 <__sfputs_r+0xa>
10011da8:	e000      	b.n	10011dac <__sfputs_r+0x22>
10011daa:	2000      	movs	r0, #0
10011dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011db0 <_vfiprintf_r>:
10011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011db2:	b09f      	sub	sp, #124	; 0x7c
10011db4:	0006      	movs	r6, r0
10011db6:	000f      	movs	r7, r1
10011db8:	9202      	str	r2, [sp, #8]
10011dba:	9305      	str	r3, [sp, #20]
10011dbc:	2800      	cmp	r0, #0
10011dbe:	d004      	beq.n	10011dca <_vfiprintf_r+0x1a>
10011dc0:	6983      	ldr	r3, [r0, #24]
10011dc2:	2b00      	cmp	r3, #0
10011dc4:	d101      	bne.n	10011dca <_vfiprintf_r+0x1a>
10011dc6:	f7ff fed3 	bl	10011b70 <__sinit>
10011dca:	4b7f      	ldr	r3, [pc, #508]	; (10011fc8 <_vfiprintf_r+0x218>)
10011dcc:	429f      	cmp	r7, r3
10011dce:	d101      	bne.n	10011dd4 <_vfiprintf_r+0x24>
10011dd0:	6877      	ldr	r7, [r6, #4]
10011dd2:	e008      	b.n	10011de6 <_vfiprintf_r+0x36>
10011dd4:	4b7d      	ldr	r3, [pc, #500]	; (10011fcc <_vfiprintf_r+0x21c>)
10011dd6:	429f      	cmp	r7, r3
10011dd8:	d101      	bne.n	10011dde <_vfiprintf_r+0x2e>
10011dda:	68b7      	ldr	r7, [r6, #8]
10011ddc:	e003      	b.n	10011de6 <_vfiprintf_r+0x36>
10011dde:	4b7c      	ldr	r3, [pc, #496]	; (10011fd0 <_vfiprintf_r+0x220>)
10011de0:	429f      	cmp	r7, r3
10011de2:	d100      	bne.n	10011de6 <_vfiprintf_r+0x36>
10011de4:	68f7      	ldr	r7, [r6, #12]
10011de6:	89bb      	ldrh	r3, [r7, #12]
10011de8:	071b      	lsls	r3, r3, #28
10011dea:	d50a      	bpl.n	10011e02 <_vfiprintf_r+0x52>
10011dec:	693b      	ldr	r3, [r7, #16]
10011dee:	2b00      	cmp	r3, #0
10011df0:	d007      	beq.n	10011e02 <_vfiprintf_r+0x52>
10011df2:	2300      	movs	r3, #0
10011df4:	ad06      	add	r5, sp, #24
10011df6:	616b      	str	r3, [r5, #20]
10011df8:	3320      	adds	r3, #32
10011dfa:	766b      	strb	r3, [r5, #25]
10011dfc:	3310      	adds	r3, #16
10011dfe:	76ab      	strb	r3, [r5, #26]
10011e00:	e03d      	b.n	10011e7e <_vfiprintf_r+0xce>
10011e02:	0039      	movs	r1, r7
10011e04:	0030      	movs	r0, r6
10011e06:	f7ff fd49 	bl	1001189c <__swsetup_r>
10011e0a:	2800      	cmp	r0, #0
10011e0c:	d0f1      	beq.n	10011df2 <_vfiprintf_r+0x42>
10011e0e:	2001      	movs	r0, #1
10011e10:	4240      	negs	r0, r0
10011e12:	e0d6      	b.n	10011fc2 <_vfiprintf_r+0x212>
10011e14:	9a05      	ldr	r2, [sp, #20]
10011e16:	1d11      	adds	r1, r2, #4
10011e18:	6812      	ldr	r2, [r2, #0]
10011e1a:	9105      	str	r1, [sp, #20]
10011e1c:	2a00      	cmp	r2, #0
10011e1e:	da00      	bge.n	10011e22 <_vfiprintf_r+0x72>
10011e20:	e07f      	b.n	10011f22 <_vfiprintf_r+0x172>
10011e22:	9209      	str	r2, [sp, #36]	; 0x24
10011e24:	3401      	adds	r4, #1
10011e26:	7823      	ldrb	r3, [r4, #0]
10011e28:	2b2e      	cmp	r3, #46	; 0x2e
10011e2a:	d100      	bne.n	10011e2e <_vfiprintf_r+0x7e>
10011e2c:	e08d      	b.n	10011f4a <_vfiprintf_r+0x19a>
10011e2e:	7821      	ldrb	r1, [r4, #0]
10011e30:	2203      	movs	r2, #3
10011e32:	4868      	ldr	r0, [pc, #416]	; (10011fd4 <_vfiprintf_r+0x224>)
10011e34:	f000 fb48 	bl	100124c8 <memchr>
10011e38:	2800      	cmp	r0, #0
10011e3a:	d007      	beq.n	10011e4c <_vfiprintf_r+0x9c>
10011e3c:	4b65      	ldr	r3, [pc, #404]	; (10011fd4 <_vfiprintf_r+0x224>)
10011e3e:	682a      	ldr	r2, [r5, #0]
10011e40:	1ac0      	subs	r0, r0, r3
10011e42:	2340      	movs	r3, #64	; 0x40
10011e44:	4083      	lsls	r3, r0
10011e46:	4313      	orrs	r3, r2
10011e48:	602b      	str	r3, [r5, #0]
10011e4a:	3401      	adds	r4, #1
10011e4c:	7821      	ldrb	r1, [r4, #0]
10011e4e:	1c63      	adds	r3, r4, #1
10011e50:	2206      	movs	r2, #6
10011e52:	4861      	ldr	r0, [pc, #388]	; (10011fd8 <_vfiprintf_r+0x228>)
10011e54:	9302      	str	r3, [sp, #8]
10011e56:	7629      	strb	r1, [r5, #24]
10011e58:	f000 fb36 	bl	100124c8 <memchr>
10011e5c:	2800      	cmp	r0, #0
10011e5e:	d100      	bne.n	10011e62 <_vfiprintf_r+0xb2>
10011e60:	e09d      	b.n	10011f9e <_vfiprintf_r+0x1ee>
10011e62:	4b5e      	ldr	r3, [pc, #376]	; (10011fdc <_vfiprintf_r+0x22c>)
10011e64:	2b00      	cmp	r3, #0
10011e66:	d000      	beq.n	10011e6a <_vfiprintf_r+0xba>
10011e68:	e090      	b.n	10011f8c <_vfiprintf_r+0x1dc>
10011e6a:	2207      	movs	r2, #7
10011e6c:	9b05      	ldr	r3, [sp, #20]
10011e6e:	3307      	adds	r3, #7
10011e70:	4393      	bics	r3, r2
10011e72:	3308      	adds	r3, #8
10011e74:	9305      	str	r3, [sp, #20]
10011e76:	696b      	ldr	r3, [r5, #20]
10011e78:	9a03      	ldr	r2, [sp, #12]
10011e7a:	189b      	adds	r3, r3, r2
10011e7c:	616b      	str	r3, [r5, #20]
10011e7e:	9c02      	ldr	r4, [sp, #8]
10011e80:	7823      	ldrb	r3, [r4, #0]
10011e82:	2b00      	cmp	r3, #0
10011e84:	d104      	bne.n	10011e90 <_vfiprintf_r+0xe0>
10011e86:	9b02      	ldr	r3, [sp, #8]
10011e88:	1ae3      	subs	r3, r4, r3
10011e8a:	9304      	str	r3, [sp, #16]
10011e8c:	d012      	beq.n	10011eb4 <_vfiprintf_r+0x104>
10011e8e:	e003      	b.n	10011e98 <_vfiprintf_r+0xe8>
10011e90:	2b25      	cmp	r3, #37	; 0x25
10011e92:	d0f8      	beq.n	10011e86 <_vfiprintf_r+0xd6>
10011e94:	3401      	adds	r4, #1
10011e96:	e7f3      	b.n	10011e80 <_vfiprintf_r+0xd0>
10011e98:	9b04      	ldr	r3, [sp, #16]
10011e9a:	9a02      	ldr	r2, [sp, #8]
10011e9c:	0039      	movs	r1, r7
10011e9e:	0030      	movs	r0, r6
10011ea0:	f7ff ff73 	bl	10011d8a <__sfputs_r>
10011ea4:	1c43      	adds	r3, r0, #1
10011ea6:	d100      	bne.n	10011eaa <_vfiprintf_r+0xfa>
10011ea8:	e086      	b.n	10011fb8 <_vfiprintf_r+0x208>
10011eaa:	696a      	ldr	r2, [r5, #20]
10011eac:	9b04      	ldr	r3, [sp, #16]
10011eae:	4694      	mov	ip, r2
10011eb0:	4463      	add	r3, ip
10011eb2:	616b      	str	r3, [r5, #20]
10011eb4:	7823      	ldrb	r3, [r4, #0]
10011eb6:	2b00      	cmp	r3, #0
10011eb8:	d07e      	beq.n	10011fb8 <_vfiprintf_r+0x208>
10011eba:	2201      	movs	r2, #1
10011ebc:	2300      	movs	r3, #0
10011ebe:	4252      	negs	r2, r2
10011ec0:	606a      	str	r2, [r5, #4]
10011ec2:	a902      	add	r1, sp, #8
10011ec4:	3254      	adds	r2, #84	; 0x54
10011ec6:	1852      	adds	r2, r2, r1
10011ec8:	3401      	adds	r4, #1
10011eca:	602b      	str	r3, [r5, #0]
10011ecc:	60eb      	str	r3, [r5, #12]
10011ece:	60ab      	str	r3, [r5, #8]
10011ed0:	7013      	strb	r3, [r2, #0]
10011ed2:	65ab      	str	r3, [r5, #88]	; 0x58
10011ed4:	7821      	ldrb	r1, [r4, #0]
10011ed6:	2205      	movs	r2, #5
10011ed8:	4841      	ldr	r0, [pc, #260]	; (10011fe0 <_vfiprintf_r+0x230>)
10011eda:	f000 faf5 	bl	100124c8 <memchr>
10011ede:	2800      	cmp	r0, #0
10011ee0:	d008      	beq.n	10011ef4 <_vfiprintf_r+0x144>
10011ee2:	4b3f      	ldr	r3, [pc, #252]	; (10011fe0 <_vfiprintf_r+0x230>)
10011ee4:	682a      	ldr	r2, [r5, #0]
10011ee6:	1ac0      	subs	r0, r0, r3
10011ee8:	2301      	movs	r3, #1
10011eea:	4083      	lsls	r3, r0
10011eec:	4313      	orrs	r3, r2
10011eee:	602b      	str	r3, [r5, #0]
10011ef0:	3401      	adds	r4, #1
10011ef2:	e7ef      	b.n	10011ed4 <_vfiprintf_r+0x124>
10011ef4:	682b      	ldr	r3, [r5, #0]
10011ef6:	06da      	lsls	r2, r3, #27
10011ef8:	d504      	bpl.n	10011f04 <_vfiprintf_r+0x154>
10011efa:	2253      	movs	r2, #83	; 0x53
10011efc:	2120      	movs	r1, #32
10011efe:	a802      	add	r0, sp, #8
10011f00:	1812      	adds	r2, r2, r0
10011f02:	7011      	strb	r1, [r2, #0]
10011f04:	071a      	lsls	r2, r3, #28
10011f06:	d504      	bpl.n	10011f12 <_vfiprintf_r+0x162>
10011f08:	2253      	movs	r2, #83	; 0x53
10011f0a:	212b      	movs	r1, #43	; 0x2b
10011f0c:	a802      	add	r0, sp, #8
10011f0e:	1812      	adds	r2, r2, r0
10011f10:	7011      	strb	r1, [r2, #0]
10011f12:	7822      	ldrb	r2, [r4, #0]
10011f14:	2a2a      	cmp	r2, #42	; 0x2a
10011f16:	d100      	bne.n	10011f1a <_vfiprintf_r+0x16a>
10011f18:	e77c      	b.n	10011e14 <_vfiprintf_r+0x64>
10011f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011f1c:	2000      	movs	r0, #0
10011f1e:	210a      	movs	r1, #10
10011f20:	e005      	b.n	10011f2e <_vfiprintf_r+0x17e>
10011f22:	4252      	negs	r2, r2
10011f24:	60ea      	str	r2, [r5, #12]
10011f26:	2202      	movs	r2, #2
10011f28:	4313      	orrs	r3, r2
10011f2a:	602b      	str	r3, [r5, #0]
10011f2c:	e77a      	b.n	10011e24 <_vfiprintf_r+0x74>
10011f2e:	7822      	ldrb	r2, [r4, #0]
10011f30:	3a30      	subs	r2, #48	; 0x30
10011f32:	2a09      	cmp	r2, #9
10011f34:	d804      	bhi.n	10011f40 <_vfiprintf_r+0x190>
10011f36:	434b      	muls	r3, r1
10011f38:	3401      	adds	r4, #1
10011f3a:	189b      	adds	r3, r3, r2
10011f3c:	2001      	movs	r0, #1
10011f3e:	e7f6      	b.n	10011f2e <_vfiprintf_r+0x17e>
10011f40:	2800      	cmp	r0, #0
10011f42:	d100      	bne.n	10011f46 <_vfiprintf_r+0x196>
10011f44:	e76f      	b.n	10011e26 <_vfiprintf_r+0x76>
10011f46:	9309      	str	r3, [sp, #36]	; 0x24
10011f48:	e76d      	b.n	10011e26 <_vfiprintf_r+0x76>
10011f4a:	7863      	ldrb	r3, [r4, #1]
10011f4c:	2b2a      	cmp	r3, #42	; 0x2a
10011f4e:	d10a      	bne.n	10011f66 <_vfiprintf_r+0x1b6>
10011f50:	9b05      	ldr	r3, [sp, #20]
10011f52:	3402      	adds	r4, #2
10011f54:	1d1a      	adds	r2, r3, #4
10011f56:	681b      	ldr	r3, [r3, #0]
10011f58:	9205      	str	r2, [sp, #20]
10011f5a:	2b00      	cmp	r3, #0
10011f5c:	da01      	bge.n	10011f62 <_vfiprintf_r+0x1b2>
10011f5e:	2301      	movs	r3, #1
10011f60:	425b      	negs	r3, r3
10011f62:	9307      	str	r3, [sp, #28]
10011f64:	e763      	b.n	10011e2e <_vfiprintf_r+0x7e>
10011f66:	2300      	movs	r3, #0
10011f68:	200a      	movs	r0, #10
10011f6a:	001a      	movs	r2, r3
10011f6c:	3401      	adds	r4, #1
10011f6e:	606b      	str	r3, [r5, #4]
10011f70:	7821      	ldrb	r1, [r4, #0]
10011f72:	3930      	subs	r1, #48	; 0x30
10011f74:	2909      	cmp	r1, #9
10011f76:	d804      	bhi.n	10011f82 <_vfiprintf_r+0x1d2>
10011f78:	4342      	muls	r2, r0
10011f7a:	3401      	adds	r4, #1
10011f7c:	1852      	adds	r2, r2, r1
10011f7e:	2301      	movs	r3, #1
10011f80:	e7f6      	b.n	10011f70 <_vfiprintf_r+0x1c0>
10011f82:	2b00      	cmp	r3, #0
10011f84:	d100      	bne.n	10011f88 <_vfiprintf_r+0x1d8>
10011f86:	e752      	b.n	10011e2e <_vfiprintf_r+0x7e>
10011f88:	9207      	str	r2, [sp, #28]
10011f8a:	e750      	b.n	10011e2e <_vfiprintf_r+0x7e>
10011f8c:	ab05      	add	r3, sp, #20
10011f8e:	9300      	str	r3, [sp, #0]
10011f90:	003a      	movs	r2, r7
10011f92:	4b14      	ldr	r3, [pc, #80]	; (10011fe4 <_vfiprintf_r+0x234>)
10011f94:	0029      	movs	r1, r5
10011f96:	0030      	movs	r0, r6
10011f98:	e000      	b.n	10011f9c <_vfiprintf_r+0x1ec>
10011f9a:	bf00      	nop
10011f9c:	e007      	b.n	10011fae <_vfiprintf_r+0x1fe>
10011f9e:	ab05      	add	r3, sp, #20
10011fa0:	9300      	str	r3, [sp, #0]
10011fa2:	003a      	movs	r2, r7
10011fa4:	4b0f      	ldr	r3, [pc, #60]	; (10011fe4 <_vfiprintf_r+0x234>)
10011fa6:	0029      	movs	r1, r5
10011fa8:	0030      	movs	r0, r6
10011faa:	f000 f88b 	bl	100120c4 <_printf_i>
10011fae:	9003      	str	r0, [sp, #12]
10011fb0:	9b03      	ldr	r3, [sp, #12]
10011fb2:	3301      	adds	r3, #1
10011fb4:	d000      	beq.n	10011fb8 <_vfiprintf_r+0x208>
10011fb6:	e75e      	b.n	10011e76 <_vfiprintf_r+0xc6>
10011fb8:	89bb      	ldrh	r3, [r7, #12]
10011fba:	065b      	lsls	r3, r3, #25
10011fbc:	d500      	bpl.n	10011fc0 <_vfiprintf_r+0x210>
10011fbe:	e726      	b.n	10011e0e <_vfiprintf_r+0x5e>
10011fc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10011fc2:	b01f      	add	sp, #124	; 0x7c
10011fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011fc6:	46c0      	nop			; (mov r8, r8)
10011fc8:	10013504 	.word	0x10013504
10011fcc:	10013524 	.word	0x10013524
10011fd0:	10013544 	.word	0x10013544
10011fd4:	1001356a 	.word	0x1001356a
10011fd8:	1001356e 	.word	0x1001356e
10011fdc:	00000000 	.word	0x00000000
10011fe0:	10013564 	.word	0x10013564
10011fe4:	10011d8b 	.word	0x10011d8b

10011fe8 <_printf_common>:
10011fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011fea:	0017      	movs	r7, r2
10011fec:	9301      	str	r3, [sp, #4]
10011fee:	688a      	ldr	r2, [r1, #8]
10011ff0:	690b      	ldr	r3, [r1, #16]
10011ff2:	9000      	str	r0, [sp, #0]
10011ff4:	000c      	movs	r4, r1
10011ff6:	4293      	cmp	r3, r2
10011ff8:	da00      	bge.n	10011ffc <_printf_common+0x14>
10011ffa:	0013      	movs	r3, r2
10011ffc:	0022      	movs	r2, r4
10011ffe:	603b      	str	r3, [r7, #0]
10012000:	3243      	adds	r2, #67	; 0x43
10012002:	7812      	ldrb	r2, [r2, #0]
10012004:	2a00      	cmp	r2, #0
10012006:	d001      	beq.n	1001200c <_printf_common+0x24>
10012008:	3301      	adds	r3, #1
1001200a:	603b      	str	r3, [r7, #0]
1001200c:	6823      	ldr	r3, [r4, #0]
1001200e:	069b      	lsls	r3, r3, #26
10012010:	d502      	bpl.n	10012018 <_printf_common+0x30>
10012012:	683b      	ldr	r3, [r7, #0]
10012014:	3302      	adds	r3, #2
10012016:	603b      	str	r3, [r7, #0]
10012018:	2506      	movs	r5, #6
1001201a:	6823      	ldr	r3, [r4, #0]
1001201c:	401d      	ands	r5, r3
1001201e:	d01e      	beq.n	1001205e <_printf_common+0x76>
10012020:	0023      	movs	r3, r4
10012022:	3343      	adds	r3, #67	; 0x43
10012024:	781b      	ldrb	r3, [r3, #0]
10012026:	1e5a      	subs	r2, r3, #1
10012028:	4193      	sbcs	r3, r2
1001202a:	6822      	ldr	r2, [r4, #0]
1001202c:	0692      	lsls	r2, r2, #26
1001202e:	d51c      	bpl.n	1001206a <_printf_common+0x82>
10012030:	2030      	movs	r0, #48	; 0x30
10012032:	18e1      	adds	r1, r4, r3
10012034:	3143      	adds	r1, #67	; 0x43
10012036:	7008      	strb	r0, [r1, #0]
10012038:	0021      	movs	r1, r4
1001203a:	1c5a      	adds	r2, r3, #1
1001203c:	3145      	adds	r1, #69	; 0x45
1001203e:	7809      	ldrb	r1, [r1, #0]
10012040:	18a2      	adds	r2, r4, r2
10012042:	3243      	adds	r2, #67	; 0x43
10012044:	3302      	adds	r3, #2
10012046:	7011      	strb	r1, [r2, #0]
10012048:	e00f      	b.n	1001206a <_printf_common+0x82>
1001204a:	0022      	movs	r2, r4
1001204c:	2301      	movs	r3, #1
1001204e:	3219      	adds	r2, #25
10012050:	9901      	ldr	r1, [sp, #4]
10012052:	9800      	ldr	r0, [sp, #0]
10012054:	9e08      	ldr	r6, [sp, #32]
10012056:	47b0      	blx	r6
10012058:	1c43      	adds	r3, r0, #1
1001205a:	d00e      	beq.n	1001207a <_printf_common+0x92>
1001205c:	3501      	adds	r5, #1
1001205e:	68e3      	ldr	r3, [r4, #12]
10012060:	683a      	ldr	r2, [r7, #0]
10012062:	1a9b      	subs	r3, r3, r2
10012064:	429d      	cmp	r5, r3
10012066:	dbf0      	blt.n	1001204a <_printf_common+0x62>
10012068:	e7da      	b.n	10012020 <_printf_common+0x38>
1001206a:	0022      	movs	r2, r4
1001206c:	9901      	ldr	r1, [sp, #4]
1001206e:	3243      	adds	r2, #67	; 0x43
10012070:	9800      	ldr	r0, [sp, #0]
10012072:	9d08      	ldr	r5, [sp, #32]
10012074:	47a8      	blx	r5
10012076:	1c43      	adds	r3, r0, #1
10012078:	d102      	bne.n	10012080 <_printf_common+0x98>
1001207a:	2001      	movs	r0, #1
1001207c:	4240      	negs	r0, r0
1001207e:	e020      	b.n	100120c2 <_printf_common+0xda>
10012080:	2306      	movs	r3, #6
10012082:	6820      	ldr	r0, [r4, #0]
10012084:	68e1      	ldr	r1, [r4, #12]
10012086:	683a      	ldr	r2, [r7, #0]
10012088:	4003      	ands	r3, r0
1001208a:	2500      	movs	r5, #0
1001208c:	2b04      	cmp	r3, #4
1001208e:	d103      	bne.n	10012098 <_printf_common+0xb0>
10012090:	1a8d      	subs	r5, r1, r2
10012092:	43eb      	mvns	r3, r5
10012094:	17db      	asrs	r3, r3, #31
10012096:	401d      	ands	r5, r3
10012098:	68a3      	ldr	r3, [r4, #8]
1001209a:	6922      	ldr	r2, [r4, #16]
1001209c:	4293      	cmp	r3, r2
1001209e:	dd01      	ble.n	100120a4 <_printf_common+0xbc>
100120a0:	1a9b      	subs	r3, r3, r2
100120a2:	18ed      	adds	r5, r5, r3
100120a4:	2700      	movs	r7, #0
100120a6:	42bd      	cmp	r5, r7
100120a8:	d00a      	beq.n	100120c0 <_printf_common+0xd8>
100120aa:	0022      	movs	r2, r4
100120ac:	2301      	movs	r3, #1
100120ae:	321a      	adds	r2, #26
100120b0:	9901      	ldr	r1, [sp, #4]
100120b2:	9800      	ldr	r0, [sp, #0]
100120b4:	9e08      	ldr	r6, [sp, #32]
100120b6:	47b0      	blx	r6
100120b8:	1c43      	adds	r3, r0, #1
100120ba:	d0de      	beq.n	1001207a <_printf_common+0x92>
100120bc:	3701      	adds	r7, #1
100120be:	e7f2      	b.n	100120a6 <_printf_common+0xbe>
100120c0:	2000      	movs	r0, #0
100120c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100120c4 <_printf_i>:
100120c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100120c6:	b08b      	sub	sp, #44	; 0x2c
100120c8:	9206      	str	r2, [sp, #24]
100120ca:	000a      	movs	r2, r1
100120cc:	3243      	adds	r2, #67	; 0x43
100120ce:	9307      	str	r3, [sp, #28]
100120d0:	9005      	str	r0, [sp, #20]
100120d2:	9204      	str	r2, [sp, #16]
100120d4:	7e0a      	ldrb	r2, [r1, #24]
100120d6:	000c      	movs	r4, r1
100120d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100120da:	2a6e      	cmp	r2, #110	; 0x6e
100120dc:	d100      	bne.n	100120e0 <_printf_i+0x1c>
100120de:	e0ab      	b.n	10012238 <_printf_i+0x174>
100120e0:	d811      	bhi.n	10012106 <_printf_i+0x42>
100120e2:	2a63      	cmp	r2, #99	; 0x63
100120e4:	d022      	beq.n	1001212c <_printf_i+0x68>
100120e6:	d809      	bhi.n	100120fc <_printf_i+0x38>
100120e8:	2a00      	cmp	r2, #0
100120ea:	d100      	bne.n	100120ee <_printf_i+0x2a>
100120ec:	e0b5      	b.n	1001225a <_printf_i+0x196>
100120ee:	2a58      	cmp	r2, #88	; 0x58
100120f0:	d000      	beq.n	100120f4 <_printf_i+0x30>
100120f2:	e0c5      	b.n	10012280 <_printf_i+0x1bc>
100120f4:	3145      	adds	r1, #69	; 0x45
100120f6:	700a      	strb	r2, [r1, #0]
100120f8:	4a81      	ldr	r2, [pc, #516]	; (10012300 <_printf_i+0x23c>)
100120fa:	e04f      	b.n	1001219c <_printf_i+0xd8>
100120fc:	2a64      	cmp	r2, #100	; 0x64
100120fe:	d01d      	beq.n	1001213c <_printf_i+0x78>
10012100:	2a69      	cmp	r2, #105	; 0x69
10012102:	d01b      	beq.n	1001213c <_printf_i+0x78>
10012104:	e0bc      	b.n	10012280 <_printf_i+0x1bc>
10012106:	2a73      	cmp	r2, #115	; 0x73
10012108:	d100      	bne.n	1001210c <_printf_i+0x48>
1001210a:	e0aa      	b.n	10012262 <_printf_i+0x19e>
1001210c:	d809      	bhi.n	10012122 <_printf_i+0x5e>
1001210e:	2a6f      	cmp	r2, #111	; 0x6f
10012110:	d029      	beq.n	10012166 <_printf_i+0xa2>
10012112:	2a70      	cmp	r2, #112	; 0x70
10012114:	d000      	beq.n	10012118 <_printf_i+0x54>
10012116:	e0b3      	b.n	10012280 <_printf_i+0x1bc>
10012118:	2220      	movs	r2, #32
1001211a:	6809      	ldr	r1, [r1, #0]
1001211c:	430a      	orrs	r2, r1
1001211e:	6022      	str	r2, [r4, #0]
10012120:	e037      	b.n	10012192 <_printf_i+0xce>
10012122:	2a75      	cmp	r2, #117	; 0x75
10012124:	d01f      	beq.n	10012166 <_printf_i+0xa2>
10012126:	2a78      	cmp	r2, #120	; 0x78
10012128:	d033      	beq.n	10012192 <_printf_i+0xce>
1001212a:	e0a9      	b.n	10012280 <_printf_i+0x1bc>
1001212c:	000e      	movs	r6, r1
1001212e:	681a      	ldr	r2, [r3, #0]
10012130:	3642      	adds	r6, #66	; 0x42
10012132:	1d11      	adds	r1, r2, #4
10012134:	6019      	str	r1, [r3, #0]
10012136:	6813      	ldr	r3, [r2, #0]
10012138:	7033      	strb	r3, [r6, #0]
1001213a:	e0a4      	b.n	10012286 <_printf_i+0x1c2>
1001213c:	6821      	ldr	r1, [r4, #0]
1001213e:	681a      	ldr	r2, [r3, #0]
10012140:	0608      	lsls	r0, r1, #24
10012142:	d406      	bmi.n	10012152 <_printf_i+0x8e>
10012144:	0649      	lsls	r1, r1, #25
10012146:	d504      	bpl.n	10012152 <_printf_i+0x8e>
10012148:	1d11      	adds	r1, r2, #4
1001214a:	6019      	str	r1, [r3, #0]
1001214c:	2300      	movs	r3, #0
1001214e:	5ed5      	ldrsh	r5, [r2, r3]
10012150:	e002      	b.n	10012158 <_printf_i+0x94>
10012152:	1d11      	adds	r1, r2, #4
10012154:	6019      	str	r1, [r3, #0]
10012156:	6815      	ldr	r5, [r2, #0]
10012158:	2d00      	cmp	r5, #0
1001215a:	da3b      	bge.n	100121d4 <_printf_i+0x110>
1001215c:	232d      	movs	r3, #45	; 0x2d
1001215e:	9a04      	ldr	r2, [sp, #16]
10012160:	426d      	negs	r5, r5
10012162:	7013      	strb	r3, [r2, #0]
10012164:	e036      	b.n	100121d4 <_printf_i+0x110>
10012166:	6821      	ldr	r1, [r4, #0]
10012168:	681a      	ldr	r2, [r3, #0]
1001216a:	0608      	lsls	r0, r1, #24
1001216c:	d406      	bmi.n	1001217c <_printf_i+0xb8>
1001216e:	0649      	lsls	r1, r1, #25
10012170:	d504      	bpl.n	1001217c <_printf_i+0xb8>
10012172:	6815      	ldr	r5, [r2, #0]
10012174:	1d11      	adds	r1, r2, #4
10012176:	6019      	str	r1, [r3, #0]
10012178:	b2ad      	uxth	r5, r5
1001217a:	e002      	b.n	10012182 <_printf_i+0xbe>
1001217c:	1d11      	adds	r1, r2, #4
1001217e:	6019      	str	r1, [r3, #0]
10012180:	6815      	ldr	r5, [r2, #0]
10012182:	4b5f      	ldr	r3, [pc, #380]	; (10012300 <_printf_i+0x23c>)
10012184:	7e22      	ldrb	r2, [r4, #24]
10012186:	9303      	str	r3, [sp, #12]
10012188:	2708      	movs	r7, #8
1001218a:	2a6f      	cmp	r2, #111	; 0x6f
1001218c:	d01d      	beq.n	100121ca <_printf_i+0x106>
1001218e:	270a      	movs	r7, #10
10012190:	e01b      	b.n	100121ca <_printf_i+0x106>
10012192:	0022      	movs	r2, r4
10012194:	2178      	movs	r1, #120	; 0x78
10012196:	3245      	adds	r2, #69	; 0x45
10012198:	7011      	strb	r1, [r2, #0]
1001219a:	4a5a      	ldr	r2, [pc, #360]	; (10012304 <_printf_i+0x240>)
1001219c:	6819      	ldr	r1, [r3, #0]
1001219e:	9203      	str	r2, [sp, #12]
100121a0:	1d08      	adds	r0, r1, #4
100121a2:	6822      	ldr	r2, [r4, #0]
100121a4:	6018      	str	r0, [r3, #0]
100121a6:	680d      	ldr	r5, [r1, #0]
100121a8:	0610      	lsls	r0, r2, #24
100121aa:	d402      	bmi.n	100121b2 <_printf_i+0xee>
100121ac:	0650      	lsls	r0, r2, #25
100121ae:	d500      	bpl.n	100121b2 <_printf_i+0xee>
100121b0:	b2ad      	uxth	r5, r5
100121b2:	07d3      	lsls	r3, r2, #31
100121b4:	d502      	bpl.n	100121bc <_printf_i+0xf8>
100121b6:	2320      	movs	r3, #32
100121b8:	431a      	orrs	r2, r3
100121ba:	6022      	str	r2, [r4, #0]
100121bc:	2710      	movs	r7, #16
100121be:	2d00      	cmp	r5, #0
100121c0:	d103      	bne.n	100121ca <_printf_i+0x106>
100121c2:	2320      	movs	r3, #32
100121c4:	6822      	ldr	r2, [r4, #0]
100121c6:	439a      	bics	r2, r3
100121c8:	6022      	str	r2, [r4, #0]
100121ca:	0023      	movs	r3, r4
100121cc:	2200      	movs	r2, #0
100121ce:	3343      	adds	r3, #67	; 0x43
100121d0:	701a      	strb	r2, [r3, #0]
100121d2:	e002      	b.n	100121da <_printf_i+0x116>
100121d4:	270a      	movs	r7, #10
100121d6:	4b4a      	ldr	r3, [pc, #296]	; (10012300 <_printf_i+0x23c>)
100121d8:	9303      	str	r3, [sp, #12]
100121da:	6863      	ldr	r3, [r4, #4]
100121dc:	60a3      	str	r3, [r4, #8]
100121de:	2b00      	cmp	r3, #0
100121e0:	db09      	blt.n	100121f6 <_printf_i+0x132>
100121e2:	2204      	movs	r2, #4
100121e4:	6821      	ldr	r1, [r4, #0]
100121e6:	4391      	bics	r1, r2
100121e8:	6021      	str	r1, [r4, #0]
100121ea:	2d00      	cmp	r5, #0
100121ec:	d105      	bne.n	100121fa <_printf_i+0x136>
100121ee:	9e04      	ldr	r6, [sp, #16]
100121f0:	2b00      	cmp	r3, #0
100121f2:	d011      	beq.n	10012218 <_printf_i+0x154>
100121f4:	e07b      	b.n	100122ee <_printf_i+0x22a>
100121f6:	2d00      	cmp	r5, #0
100121f8:	d079      	beq.n	100122ee <_printf_i+0x22a>
100121fa:	9e04      	ldr	r6, [sp, #16]
100121fc:	0028      	movs	r0, r5
100121fe:	0039      	movs	r1, r7
10012200:	f7fd fa70 	bl	1000f6e4 <__aeabi_uidivmod>
10012204:	9b03      	ldr	r3, [sp, #12]
10012206:	3e01      	subs	r6, #1
10012208:	5c5b      	ldrb	r3, [r3, r1]
1001220a:	0028      	movs	r0, r5
1001220c:	7033      	strb	r3, [r6, #0]
1001220e:	0039      	movs	r1, r7
10012210:	f7fd f9e2 	bl	1000f5d8 <__aeabi_uidiv>
10012214:	1e05      	subs	r5, r0, #0
10012216:	d1f1      	bne.n	100121fc <_printf_i+0x138>
10012218:	2f08      	cmp	r7, #8
1001221a:	d109      	bne.n	10012230 <_printf_i+0x16c>
1001221c:	6823      	ldr	r3, [r4, #0]
1001221e:	07db      	lsls	r3, r3, #31
10012220:	d506      	bpl.n	10012230 <_printf_i+0x16c>
10012222:	6863      	ldr	r3, [r4, #4]
10012224:	6922      	ldr	r2, [r4, #16]
10012226:	4293      	cmp	r3, r2
10012228:	dc02      	bgt.n	10012230 <_printf_i+0x16c>
1001222a:	2330      	movs	r3, #48	; 0x30
1001222c:	3e01      	subs	r6, #1
1001222e:	7033      	strb	r3, [r6, #0]
10012230:	9b04      	ldr	r3, [sp, #16]
10012232:	1b9b      	subs	r3, r3, r6
10012234:	6123      	str	r3, [r4, #16]
10012236:	e02b      	b.n	10012290 <_printf_i+0x1cc>
10012238:	6809      	ldr	r1, [r1, #0]
1001223a:	681a      	ldr	r2, [r3, #0]
1001223c:	0608      	lsls	r0, r1, #24
1001223e:	d407      	bmi.n	10012250 <_printf_i+0x18c>
10012240:	0649      	lsls	r1, r1, #25
10012242:	d505      	bpl.n	10012250 <_printf_i+0x18c>
10012244:	1d11      	adds	r1, r2, #4
10012246:	6019      	str	r1, [r3, #0]
10012248:	6813      	ldr	r3, [r2, #0]
1001224a:	8aa2      	ldrh	r2, [r4, #20]
1001224c:	801a      	strh	r2, [r3, #0]
1001224e:	e004      	b.n	1001225a <_printf_i+0x196>
10012250:	1d11      	adds	r1, r2, #4
10012252:	6019      	str	r1, [r3, #0]
10012254:	6813      	ldr	r3, [r2, #0]
10012256:	6962      	ldr	r2, [r4, #20]
10012258:	601a      	str	r2, [r3, #0]
1001225a:	2300      	movs	r3, #0
1001225c:	9e04      	ldr	r6, [sp, #16]
1001225e:	6123      	str	r3, [r4, #16]
10012260:	e016      	b.n	10012290 <_printf_i+0x1cc>
10012262:	681a      	ldr	r2, [r3, #0]
10012264:	1d11      	adds	r1, r2, #4
10012266:	6019      	str	r1, [r3, #0]
10012268:	6816      	ldr	r6, [r2, #0]
1001226a:	2100      	movs	r1, #0
1001226c:	6862      	ldr	r2, [r4, #4]
1001226e:	0030      	movs	r0, r6
10012270:	f000 f92a 	bl	100124c8 <memchr>
10012274:	2800      	cmp	r0, #0
10012276:	d001      	beq.n	1001227c <_printf_i+0x1b8>
10012278:	1b80      	subs	r0, r0, r6
1001227a:	6060      	str	r0, [r4, #4]
1001227c:	6863      	ldr	r3, [r4, #4]
1001227e:	e003      	b.n	10012288 <_printf_i+0x1c4>
10012280:	0026      	movs	r6, r4
10012282:	3642      	adds	r6, #66	; 0x42
10012284:	7032      	strb	r2, [r6, #0]
10012286:	2301      	movs	r3, #1
10012288:	6123      	str	r3, [r4, #16]
1001228a:	2300      	movs	r3, #0
1001228c:	9a04      	ldr	r2, [sp, #16]
1001228e:	7013      	strb	r3, [r2, #0]
10012290:	9b07      	ldr	r3, [sp, #28]
10012292:	aa09      	add	r2, sp, #36	; 0x24
10012294:	9300      	str	r3, [sp, #0]
10012296:	0021      	movs	r1, r4
10012298:	9b06      	ldr	r3, [sp, #24]
1001229a:	9805      	ldr	r0, [sp, #20]
1001229c:	f7ff fea4 	bl	10011fe8 <_printf_common>
100122a0:	1c43      	adds	r3, r0, #1
100122a2:	d102      	bne.n	100122aa <_printf_i+0x1e6>
100122a4:	2001      	movs	r0, #1
100122a6:	4240      	negs	r0, r0
100122a8:	e027      	b.n	100122fa <_printf_i+0x236>
100122aa:	6923      	ldr	r3, [r4, #16]
100122ac:	0032      	movs	r2, r6
100122ae:	9906      	ldr	r1, [sp, #24]
100122b0:	9805      	ldr	r0, [sp, #20]
100122b2:	9d07      	ldr	r5, [sp, #28]
100122b4:	47a8      	blx	r5
100122b6:	1c43      	adds	r3, r0, #1
100122b8:	d0f4      	beq.n	100122a4 <_printf_i+0x1e0>
100122ba:	6823      	ldr	r3, [r4, #0]
100122bc:	2500      	movs	r5, #0
100122be:	079b      	lsls	r3, r3, #30
100122c0:	d40f      	bmi.n	100122e2 <_printf_i+0x21e>
100122c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100122c4:	68e0      	ldr	r0, [r4, #12]
100122c6:	4298      	cmp	r0, r3
100122c8:	da17      	bge.n	100122fa <_printf_i+0x236>
100122ca:	0018      	movs	r0, r3
100122cc:	e015      	b.n	100122fa <_printf_i+0x236>
100122ce:	0022      	movs	r2, r4
100122d0:	2301      	movs	r3, #1
100122d2:	3219      	adds	r2, #25
100122d4:	9906      	ldr	r1, [sp, #24]
100122d6:	9805      	ldr	r0, [sp, #20]
100122d8:	9e07      	ldr	r6, [sp, #28]
100122da:	47b0      	blx	r6
100122dc:	1c43      	adds	r3, r0, #1
100122de:	d0e1      	beq.n	100122a4 <_printf_i+0x1e0>
100122e0:	3501      	adds	r5, #1
100122e2:	68e3      	ldr	r3, [r4, #12]
100122e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100122e6:	1a9b      	subs	r3, r3, r2
100122e8:	429d      	cmp	r5, r3
100122ea:	dbf0      	blt.n	100122ce <_printf_i+0x20a>
100122ec:	e7e9      	b.n	100122c2 <_printf_i+0x1fe>
100122ee:	0026      	movs	r6, r4
100122f0:	9b03      	ldr	r3, [sp, #12]
100122f2:	3642      	adds	r6, #66	; 0x42
100122f4:	781b      	ldrb	r3, [r3, #0]
100122f6:	7033      	strb	r3, [r6, #0]
100122f8:	e78e      	b.n	10012218 <_printf_i+0x154>
100122fa:	b00b      	add	sp, #44	; 0x2c
100122fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122fe:	46c0      	nop			; (mov r8, r8)
10012300:	10013575 	.word	0x10013575
10012304:	10013586 	.word	0x10013586

10012308 <_putc_r>:
10012308:	b570      	push	{r4, r5, r6, lr}
1001230a:	0006      	movs	r6, r0
1001230c:	000d      	movs	r5, r1
1001230e:	0014      	movs	r4, r2
10012310:	2800      	cmp	r0, #0
10012312:	d004      	beq.n	1001231e <_putc_r+0x16>
10012314:	6983      	ldr	r3, [r0, #24]
10012316:	2b00      	cmp	r3, #0
10012318:	d101      	bne.n	1001231e <_putc_r+0x16>
1001231a:	f7ff fc29 	bl	10011b70 <__sinit>
1001231e:	4b12      	ldr	r3, [pc, #72]	; (10012368 <_putc_r+0x60>)
10012320:	429c      	cmp	r4, r3
10012322:	d101      	bne.n	10012328 <_putc_r+0x20>
10012324:	6874      	ldr	r4, [r6, #4]
10012326:	e008      	b.n	1001233a <_putc_r+0x32>
10012328:	4b10      	ldr	r3, [pc, #64]	; (1001236c <_putc_r+0x64>)
1001232a:	429c      	cmp	r4, r3
1001232c:	d101      	bne.n	10012332 <_putc_r+0x2a>
1001232e:	68b4      	ldr	r4, [r6, #8]
10012330:	e003      	b.n	1001233a <_putc_r+0x32>
10012332:	4b0f      	ldr	r3, [pc, #60]	; (10012370 <_putc_r+0x68>)
10012334:	429c      	cmp	r4, r3
10012336:	d100      	bne.n	1001233a <_putc_r+0x32>
10012338:	68f4      	ldr	r4, [r6, #12]
1001233a:	68a3      	ldr	r3, [r4, #8]
1001233c:	3b01      	subs	r3, #1
1001233e:	60a3      	str	r3, [r4, #8]
10012340:	2b00      	cmp	r3, #0
10012342:	da05      	bge.n	10012350 <_putc_r+0x48>
10012344:	69a2      	ldr	r2, [r4, #24]
10012346:	4293      	cmp	r3, r2
10012348:	db08      	blt.n	1001235c <_putc_r+0x54>
1001234a:	b2eb      	uxtb	r3, r5
1001234c:	2b0a      	cmp	r3, #10
1001234e:	d005      	beq.n	1001235c <_putc_r+0x54>
10012350:	6823      	ldr	r3, [r4, #0]
10012352:	b2e8      	uxtb	r0, r5
10012354:	1c5a      	adds	r2, r3, #1
10012356:	6022      	str	r2, [r4, #0]
10012358:	701d      	strb	r5, [r3, #0]
1001235a:	e004      	b.n	10012366 <_putc_r+0x5e>
1001235c:	0022      	movs	r2, r4
1001235e:	0029      	movs	r1, r5
10012360:	0030      	movs	r0, r6
10012362:	f7ff fa43 	bl	100117ec <__swbuf_r>
10012366:	bd70      	pop	{r4, r5, r6, pc}
10012368:	10013504 	.word	0x10013504
1001236c:	10013524 	.word	0x10013524
10012370:	10013544 	.word	0x10013544

10012374 <__sread>:
10012374:	b570      	push	{r4, r5, r6, lr}
10012376:	000c      	movs	r4, r1
10012378:	250e      	movs	r5, #14
1001237a:	5f49      	ldrsh	r1, [r1, r5]
1001237c:	f000 f8b0 	bl	100124e0 <_read_r>
10012380:	2800      	cmp	r0, #0
10012382:	db03      	blt.n	1001238c <__sread+0x18>
10012384:	6d63      	ldr	r3, [r4, #84]	; 0x54
10012386:	181b      	adds	r3, r3, r0
10012388:	6563      	str	r3, [r4, #84]	; 0x54
1001238a:	e003      	b.n	10012394 <__sread+0x20>
1001238c:	89a2      	ldrh	r2, [r4, #12]
1001238e:	4b02      	ldr	r3, [pc, #8]	; (10012398 <__sread+0x24>)
10012390:	4013      	ands	r3, r2
10012392:	81a3      	strh	r3, [r4, #12]
10012394:	bd70      	pop	{r4, r5, r6, pc}
10012396:	46c0      	nop			; (mov r8, r8)
10012398:	ffffefff 	.word	0xffffefff

1001239c <__swrite>:
1001239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001239e:	001f      	movs	r7, r3
100123a0:	898b      	ldrh	r3, [r1, #12]
100123a2:	0005      	movs	r5, r0
100123a4:	000c      	movs	r4, r1
100123a6:	0016      	movs	r6, r2
100123a8:	05db      	lsls	r3, r3, #23
100123aa:	d505      	bpl.n	100123b8 <__swrite+0x1c>
100123ac:	230e      	movs	r3, #14
100123ae:	5ec9      	ldrsh	r1, [r1, r3]
100123b0:	2200      	movs	r2, #0
100123b2:	2302      	movs	r3, #2
100123b4:	f000 f874 	bl	100124a0 <_lseek_r>
100123b8:	89a2      	ldrh	r2, [r4, #12]
100123ba:	4b05      	ldr	r3, [pc, #20]	; (100123d0 <__swrite+0x34>)
100123bc:	0028      	movs	r0, r5
100123be:	4013      	ands	r3, r2
100123c0:	81a3      	strh	r3, [r4, #12]
100123c2:	0032      	movs	r2, r6
100123c4:	230e      	movs	r3, #14
100123c6:	5ee1      	ldrsh	r1, [r4, r3]
100123c8:	003b      	movs	r3, r7
100123ca:	f000 f81f 	bl	1001240c <_write_r>
100123ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100123d0:	ffffefff 	.word	0xffffefff

100123d4 <__sseek>:
100123d4:	b570      	push	{r4, r5, r6, lr}
100123d6:	000c      	movs	r4, r1
100123d8:	250e      	movs	r5, #14
100123da:	5f49      	ldrsh	r1, [r1, r5]
100123dc:	f000 f860 	bl	100124a0 <_lseek_r>
100123e0:	89a3      	ldrh	r3, [r4, #12]
100123e2:	1c42      	adds	r2, r0, #1
100123e4:	d103      	bne.n	100123ee <__sseek+0x1a>
100123e6:	4a05      	ldr	r2, [pc, #20]	; (100123fc <__sseek+0x28>)
100123e8:	4013      	ands	r3, r2
100123ea:	81a3      	strh	r3, [r4, #12]
100123ec:	e004      	b.n	100123f8 <__sseek+0x24>
100123ee:	2280      	movs	r2, #128	; 0x80
100123f0:	0152      	lsls	r2, r2, #5
100123f2:	4313      	orrs	r3, r2
100123f4:	81a3      	strh	r3, [r4, #12]
100123f6:	6560      	str	r0, [r4, #84]	; 0x54
100123f8:	bd70      	pop	{r4, r5, r6, pc}
100123fa:	46c0      	nop			; (mov r8, r8)
100123fc:	ffffefff 	.word	0xffffefff

10012400 <__sclose>:
10012400:	b510      	push	{r4, lr}
10012402:	230e      	movs	r3, #14
10012404:	5ec9      	ldrsh	r1, [r1, r3]
10012406:	f000 f815 	bl	10012434 <_close_r>
1001240a:	bd10      	pop	{r4, pc}

1001240c <_write_r>:
1001240c:	b570      	push	{r4, r5, r6, lr}
1001240e:	0005      	movs	r5, r0
10012410:	0008      	movs	r0, r1
10012412:	0011      	movs	r1, r2
10012414:	2200      	movs	r2, #0
10012416:	4c06      	ldr	r4, [pc, #24]	; (10012430 <_write_r+0x24>)
10012418:	6022      	str	r2, [r4, #0]
1001241a:	001a      	movs	r2, r3
1001241c:	f7f9 f8da 	bl	1000b5d4 <_write>
10012420:	1c43      	adds	r3, r0, #1
10012422:	d103      	bne.n	1001242c <_write_r+0x20>
10012424:	6823      	ldr	r3, [r4, #0]
10012426:	2b00      	cmp	r3, #0
10012428:	d000      	beq.n	1001242c <_write_r+0x20>
1001242a:	602b      	str	r3, [r5, #0]
1001242c:	bd70      	pop	{r4, r5, r6, pc}
1001242e:	46c0      	nop			; (mov r8, r8)
10012430:	10015e60 	.word	0x10015e60

10012434 <_close_r>:
10012434:	2300      	movs	r3, #0
10012436:	b570      	push	{r4, r5, r6, lr}
10012438:	4c06      	ldr	r4, [pc, #24]	; (10012454 <_close_r+0x20>)
1001243a:	0005      	movs	r5, r0
1001243c:	0008      	movs	r0, r1
1001243e:	6023      	str	r3, [r4, #0]
10012440:	f7fa fb7c 	bl	1000cb3c <_close>
10012444:	1c43      	adds	r3, r0, #1
10012446:	d103      	bne.n	10012450 <_close_r+0x1c>
10012448:	6823      	ldr	r3, [r4, #0]
1001244a:	2b00      	cmp	r3, #0
1001244c:	d000      	beq.n	10012450 <_close_r+0x1c>
1001244e:	602b      	str	r3, [r5, #0]
10012450:	bd70      	pop	{r4, r5, r6, pc}
10012452:	46c0      	nop			; (mov r8, r8)
10012454:	10015e60 	.word	0x10015e60

10012458 <_fstat_r>:
10012458:	2300      	movs	r3, #0
1001245a:	b570      	push	{r4, r5, r6, lr}
1001245c:	4c06      	ldr	r4, [pc, #24]	; (10012478 <_fstat_r+0x20>)
1001245e:	0005      	movs	r5, r0
10012460:	0008      	movs	r0, r1
10012462:	0011      	movs	r1, r2
10012464:	6023      	str	r3, [r4, #0]
10012466:	f7fa fb6d 	bl	1000cb44 <_fstat>
1001246a:	1c43      	adds	r3, r0, #1
1001246c:	d103      	bne.n	10012476 <_fstat_r+0x1e>
1001246e:	6823      	ldr	r3, [r4, #0]
10012470:	2b00      	cmp	r3, #0
10012472:	d000      	beq.n	10012476 <_fstat_r+0x1e>
10012474:	602b      	str	r3, [r5, #0]
10012476:	bd70      	pop	{r4, r5, r6, pc}
10012478:	10015e60 	.word	0x10015e60

1001247c <_isatty_r>:
1001247c:	2300      	movs	r3, #0
1001247e:	b570      	push	{r4, r5, r6, lr}
10012480:	4c06      	ldr	r4, [pc, #24]	; (1001249c <_isatty_r+0x20>)
10012482:	0005      	movs	r5, r0
10012484:	0008      	movs	r0, r1
10012486:	6023      	str	r3, [r4, #0]
10012488:	f7fa fb62 	bl	1000cb50 <_isatty>
1001248c:	1c43      	adds	r3, r0, #1
1001248e:	d103      	bne.n	10012498 <_isatty_r+0x1c>
10012490:	6823      	ldr	r3, [r4, #0]
10012492:	2b00      	cmp	r3, #0
10012494:	d000      	beq.n	10012498 <_isatty_r+0x1c>
10012496:	602b      	str	r3, [r5, #0]
10012498:	bd70      	pop	{r4, r5, r6, pc}
1001249a:	46c0      	nop			; (mov r8, r8)
1001249c:	10015e60 	.word	0x10015e60

100124a0 <_lseek_r>:
100124a0:	b570      	push	{r4, r5, r6, lr}
100124a2:	0005      	movs	r5, r0
100124a4:	0008      	movs	r0, r1
100124a6:	0011      	movs	r1, r2
100124a8:	2200      	movs	r2, #0
100124aa:	4c06      	ldr	r4, [pc, #24]	; (100124c4 <_lseek_r+0x24>)
100124ac:	6022      	str	r2, [r4, #0]
100124ae:	001a      	movs	r2, r3
100124b0:	f7fa fb50 	bl	1000cb54 <_lseek>
100124b4:	1c43      	adds	r3, r0, #1
100124b6:	d103      	bne.n	100124c0 <_lseek_r+0x20>
100124b8:	6823      	ldr	r3, [r4, #0]
100124ba:	2b00      	cmp	r3, #0
100124bc:	d000      	beq.n	100124c0 <_lseek_r+0x20>
100124be:	602b      	str	r3, [r5, #0]
100124c0:	bd70      	pop	{r4, r5, r6, pc}
100124c2:	46c0      	nop			; (mov r8, r8)
100124c4:	10015e60 	.word	0x10015e60

100124c8 <memchr>:
100124c8:	b2c9      	uxtb	r1, r1
100124ca:	1882      	adds	r2, r0, r2
100124cc:	4290      	cmp	r0, r2
100124ce:	d004      	beq.n	100124da <memchr+0x12>
100124d0:	7803      	ldrb	r3, [r0, #0]
100124d2:	428b      	cmp	r3, r1
100124d4:	d002      	beq.n	100124dc <memchr+0x14>
100124d6:	3001      	adds	r0, #1
100124d8:	e7f8      	b.n	100124cc <memchr+0x4>
100124da:	2000      	movs	r0, #0
100124dc:	4770      	bx	lr
	...

100124e0 <_read_r>:
100124e0:	b570      	push	{r4, r5, r6, lr}
100124e2:	0005      	movs	r5, r0
100124e4:	0008      	movs	r0, r1
100124e6:	0011      	movs	r1, r2
100124e8:	2200      	movs	r2, #0
100124ea:	4c06      	ldr	r4, [pc, #24]	; (10012504 <_read_r+0x24>)
100124ec:	6022      	str	r2, [r4, #0]
100124ee:	001a      	movs	r2, r3
100124f0:	f7f9 f850 	bl	1000b594 <_read>
100124f4:	1c43      	adds	r3, r0, #1
100124f6:	d103      	bne.n	10012500 <_read_r+0x20>
100124f8:	6823      	ldr	r3, [r4, #0]
100124fa:	2b00      	cmp	r3, #0
100124fc:	d000      	beq.n	10012500 <_read_r+0x20>
100124fe:	602b      	str	r3, [r5, #0]
10012500:	bd70      	pop	{r4, r5, r6, pc}
10012502:	46c0      	nop			; (mov r8, r8)
10012504:	10015e60 	.word	0x10015e60
10012508:	000003e8 	.word	0x000003e8

1001250c <test>:
1001250c:	00000083 00004000 00000200 00c800c8     .....@..........
1001251c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001252c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001253c:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
1001254c:	5220706f 73646165 00000000 706d6153     op Reads....Samp
1001255c:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
1001256c:	666f206c 74657366 74616420 57482061     l offset data HW
1001257c:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
1001258c:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
1001259c:	6f727947 66666f20 20746573 61746164     Gyro offset data
100125ac:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100125bc:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100125cc:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100125dc:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100125ec:	6e756f66 00002e64 72617453 676e6974     found...Starting
100125fc:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
1001260c:	72746552 69766569 4220676e 65736169     Retrieving Biase
1001261c:	00000d73 72746552 69766569 4220676e     s...Retrieving B
1001262c:	65736169 72452073 20726f72 6f70202d     iases Error - po
1001263c:	62697373 4920656c 65204332 726f7272     ssible I2C error
1001264c:	00000000 72746552 69766569 5320676e     ....Retrieving S
1001265c:	69422054 73657361 00000000 72746552     T Biases....Retr
1001266c:	69766569 5320676e 69422054 73657361     ieving ST Biases
1001267c:	72724520 2d20726f 736f7020 6c626973      Error - possibl
1001268c:	32492065 72652043 00726f72 64616552     e I2C error.Read
1001269c:	20676e69 2050544f 69676552 72657473     ing OTP Register
100126ac:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100126bc:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
100126cc:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
100126dc:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100126ec:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100126fc:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
1001270c:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
1001271c:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
1001272c:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
1001273c:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
1001274c:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
1001275c:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
1001276c:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
1001277c:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
1001278c:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
1001279c:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100127ac:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
100127bc:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
100127cc:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
100127dc:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
100127ec:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
100127fc:	6c207361 20737365 6e616874 2e372520     as less than %7.
1001280c:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
1001281c:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
1001282c:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
1001283c:	6553206c 5420666c 20747365 75736552     l Self Test Resu
1001284c:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
1001285c:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
1001286c:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
1001287c:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
1001288c:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
1001289c:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100128ac:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
100128bc:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
100128cc:	253a7369 72672064 65746165 68742072     is:%d greater th
100128dc:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
100128ec:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
100128fc:	656c2073 74207373 206e6168 342e3725     s less than %7.4
1001290c:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
1001291c:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
1001292c:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
1001293c:	65542066 52207473 6c757365 203a7374     f Test Results: 
1001294c:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
1001295c:	73655420 65522074 746c7573 25203a73      Test Results: %
1001296c:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
1001297c:	00000000                                ....

10012980 <hw>:
10012980:	04000069 01410080 01000000 00001333     i.....A.....3...

10012990 <reg>:
10012990:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100129a0:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100129b0:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
100129c0:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
100129d0:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
100129e0:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
100129f0:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10012a00:	b691a38b 00dab4da 10009a60 10009a62     ........`...b...
10012a10:	10009a48 10009a48 10009a48 10009a60     H...H...H...`...
10012a20:	10009a48 10009a48 1000a2ae 1000a322     H...H......."...
10012a30:	1000a296 1000a328 1000a29c 1000a2a2     ....(...........
10012a40:	1000a2a8 1000a968 1000a968 1000a968     ....h...h...h...
10012a50:	1000a968 1000a968 1000a968 1000a968     h...h...h...h...
10012a60:	1000a968 1000a968 1000a968 1000a968     h...h...h...h...
10012a70:	1000a968 1000a968 1000a968 1000a968     h...h...h...h...
10012a80:	1000a968 1000a968 1000a968 1000a968     h...h...h...h...
10012a90:	1000a986 1000a986 1000a986 1000a986     ................
10012aa0:	1000a986 1000a986 1000a986 1000a986     ................
10012ab0:	1000a986 1000a986 1000a9a8 1000a9a8     ................
10012ac0:	1000a9a8 1000a9a8 1000a9a8 1000a9a8     ................
10012ad0:	1000a9a8 1000a9a8 1000a9a8 1000a9a8     ................
10012ae0:	1000a9ca 1000a9ca 1000a9ca 1000a9ca     ................
10012af0:	1000a9ca 1000a9ca 1000a9e4 1000a9e4     ................
10012b00:	1000a9e4 1000a9e4 1000a9e4 1000a9e4     ................
10012b10:	1000a9e4 1000a9e4 1000a9e4 1000a9fe     ................
10012b20:	1000a9fe 1000aa20 1000aa20 1000aa3a     .... ... ...:...
10012b30:	1000aa20 34333231 00003635 efcdab00      ...123456......
10012b40:	00efcdab b2d60600 f8f005f0 00000000     ................

10012b50 <ble_mgr_gatt_server_handle>:
	...
10012b68:	100099a5 100099e1 100099a9 00000000     ................
10012b78:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10012b88:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10012b98:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012ba8:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012bb8:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10012bc8:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10012bd8:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10012be8:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
10012bf8:	69747079 66206e6f 656c6961 00000064     yption failed...
10012c08:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10012c18:	64657465 63757320 73736563 6c6c7566     eted successfull
10012c28:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10012c38:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10012c48:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10012c58:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012c68:	206e6163 69766564 72206563 68636165     can device reach
10012c78:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012c88:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012c98:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10012ca8:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10012cb8:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10012cc8:	656e6e6f 52207463 65757165 46207473     onnect Request F
10012cd8:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10012ce8:	636f7270 72756465 6f632065 656c706d     procedure comple
10012cf8:	20646574 63637573 66737365 796c6c75     ted successfully
10012d08:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10012d18:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10012d28:	68742065 61702065 6e697269 6e692067     e the pairing in
10012d38:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10012d48:	7320746f 74726174 00006465 76616c53     ot started..Slav
10012d58:	65532065 69727563 52207974 2d207165     e Security Req -
10012d68:	74754120 746e6568 74616369 206e6f69      Authentication 
10012d78:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10012d88:	74736575 41202d20 65687475 6369746e     uest - Authentic
10012d98:	6f697461 6146206e 64656c69 00000000     ation Failed....
10012da8:	65746e45 68742072 61502065 656b7373     Enter the Passke
10012db8:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10012dc8:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10012dd8:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10012de8:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10012df8:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10012e08:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10012e18:	6568746f 65442072 65636976 00003a29     other Device):..
10012e28:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10012e38:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10012e48:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10012e58:	00000064 65746e45 20646572 73736150     d...Entered Pass
10012e68:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10012e78:	6f666e69 74616d72 206e6f69 7020666f     information of p
10012e88:	20726565 69766564 69206563 6f6e2073     eer device is no
10012e98:	76612074 616c6961 2e656c62 00000000     t available.....
10012ea8:	61656c50 75206573 6961706e 68742072     Please unpair th
10012eb8:	65642065 65636976 6f726620 6570206d     e device from pe
10012ec8:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10012ed8:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10012ee8:	20646e61 72617473 61702074 6e697269     and start pairin
10012ef8:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10012f08:	52206e6f 65757165 52207473 796c7065     on Request Reply
10012f18:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10012f28:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10012f38:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10012f48:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10012f58:	63206573 6b636568 65687420 776f7020     se check the pow
10012f68:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10012f78:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10012f88:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
10012f98:	00000045 69766544 6e206563 20656d61     E...Device name 
10012fa8:	20746573 6c696166 00006465 61204442     set failed..BD a
10012fb8:	65726464 67207373 66207465 656c6961     ddress get faile
10012fc8:	00000064 41204442 65726464 303a7373     d...BD Address:0
10012fd8:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10012fe8:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10012ff8:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10013008:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10013018:	61727567 6e6f6974 69616620 0064656c     guration failed.
10013028:	20746553 20454c42 69766544 41206563     Set BLE Device A
10013038:	65726464 66207373 656c6961 00000064     ddress failed...
10013048:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10013058:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10013068:	65732065 69727563 72207974 65757165     e security reque
10013078:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10013088:	65746365 6f742064 65657020 65642072     ected to peer de
10013098:	65636976 74697720 64612068 73657264     vice with addres
100130a8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100130b8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100130c8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100130d8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100130e8:	61522067 6d6f646e 64646120 73736572     g Random address
100130f8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013108:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013118:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013128:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10013138:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10013148:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10013158:	53202d20 75746174 25203a73 00000064      - Status: %d...
10013168:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10013178:	61642074 73206174 66207465 656c6961     t data set faile
10013188:	00000064                                d...

1001318c <ble_mgr_gap_handle>:
1001318c:	100099a1 10009b5d 100099b9 00000000     ....]...........
1001319c:	00000000 1000a631 10009a11 100099b5     ....1...........
100131ac:	10009cfd 10009bdd 10009f01 10009d15     ................
100131bc:	1000a055 1000a199 10009a99 1000a86d     U...........m...
	...
100131d8:	00002121 1000c354 1000c362 1000c370     !!..T...b...p...
100131e8:	1000c37e 1000c38c 1000c39a 1000c3a8     ~...............
100131f8:	1000c3b8 1000c3c8 1000c3d8 1000c3e8     ................
10013208:	1000c3f8 1000c408 1000c418 1000c428     ............(...
10013218:	1000c438 1000c448 1000c458 1000c468     8...H...X...h...
10013228:	1000c478 1000c488 1000c498 1000c4a8     x...............
10013238:	1000c4b8 1000c4c8 1000c4d8 1000c4e8     ................
10013248:	1000c4f8 1000c506 1000c514 1000c522     ............"...
10013258:	1000c530 1000c53e 1000c54c 1000c55a     0...>...L...Z...
10013268:	1000c568 1000c578 1000c588 1000c598     h...x...........
10013278:	1000c5a8 1000c5b8 1000c5c8 1000c5d8     ................
10013288:	1000c5e8 1000c5f8 1000c608 1000c618     ................
10013298:	1000c628 1000c638 1000c648 1000c658     (...8...H...X...
100132a8:	1000c668 1000c676 1000c684 1000c6c4     h...v...........
100132b8:	1000c6ec 1000c714 1000c73c 1000c97c     ........<...|...
100132c8:	1000c76c 1000c784 1000c7fc 1000c814     l...............
100132d8:	1000c79c 1000c7b4 1000c7cc 1000c7e4     ................
100132e8:	1000c82c 1000caf0 1000caf0 1000caf0     ,...............
100132f8:	1000caf0 1000caf0 1000caf0 1000caf0     ................
10013308:	1000caf0 1000c8d4 1000c8ec 1000c904     ................
10013318:	1000c992 1000c85c 1000caf0 1000caf0     ....\...........
10013328:	1000caf0 1000caf0 1000caf0 1000caf0     ................
10013338:	1000c91c 1000c934 1000c94c 1000c964     ....4...L...d...
10013348:	1000caf0 1000caa8 1000cac0 1000caf0     ................
10013358:	1000caf0 1000c9be 1000c9d4 1000c9ea     ................
10013368:	1000ca00 1000caf0 1000caf0 1000caf0     ................
10013378:	1000caf0 1000caf0 1000caf0 1000caf0     ................
10013388:	1000caf0 1000c6b0 1000c6d8 1000c700     ................
10013398:	1000c728 1000c754 1000c844 1000c874     (...T...D...t...
100133a8:	1000c88c 1000c8a4 1000c8bc 1000c9a8     ................
100133b8:	1000ca16 1000ca90 1000cad8 20554d49     ............IMU 
100133c8:	45544e49 50555252 00002154 4c504d65     INTERRUPT!..eMPL
100133d8:	312e3520 00000000 656d7441 6f43206c      5.1....Atmel Co
100133e8:	002e7072                                         rp.

100133eb <CSWTCH.47>:
100133eb:	03010300 03030303 03030303 00020303     ................
100133fb:	00fbca00 00faee10 00fbac10 00fb8410     ................
1001340b:	00fbac10 00fb7810 00fbac10 00fb8410     .....x..........
1001341b:	00faee10 00faee10 00fb7810 00fb8410     .........x......
1001342b:	00fc3010 00fc3010 00fc3010 00fbb210     .0...0...0......
1001343b:	00faee10 00faee10 00fb9810 00fb8210     ................
1001344b:	00fb9810 00fb7810 00fb9810 00fb8210     .....x..........
1001345b:	00faee10 00faee10 00fb7810 00fb8210     .........x......
1001346b:	00fc3010 00fc3010 00fc3010 00fc3c10     .0...0...0...<..
1001347b:	00ff2810 00fe8610 00fe8610 00fe8410     .(..............
1001348b:	00ff1a10 00ff1a10 00ff1010 00fe8410     ................
1001349b:	00ff1a10 00ff1010 00ff1a10 00fe8410     ................
100134ab:	00ff2010 00ff2010 00ff2010 00ffaa10     . ... ... ......
100134bb:	01080c10 0106cc10 0106cc10 0106ca10     ................
100134cb:	0107e410 0107e410 0107d610 0106ca10     ................
100134db:	0107e410 0107d610 0107e410 0106ca10     ................
100134eb:	0107ec10 0107ec10 0107ec10 0109ec10     ................
100134fb:	00004310 01360000                                .C...

10013500 <_global_impure_ptr>:
10013500:	10013600                                .6..

10013504 <__sf_fake_stdin>:
	...

10013524 <__sf_fake_stdout>:
	...

10013544 <__sf_fake_stderr>:
	...
10013564:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013574:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013584:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013594:	00006665                                ef..

10013598 <_init>:
10013598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001359a:	46c0      	nop			; (mov r8, r8)
1001359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001359e:	bc08      	pop	{r3}
100135a0:	469e      	mov	lr, r3
100135a2:	4770      	bx	lr

100135a4 <__init_array_start>:
100135a4:	100080b1 	.word	0x100080b1

100135a8 <_fini>:
100135a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100135aa:	46c0      	nop			; (mov r8, r8)
100135ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
100135ae:	bc08      	pop	{r3}
100135b0:	469e      	mov	lr, r3
100135b2:	4770      	bx	lr

100135b4 <__fini_array_start>:
100135b4:	10008089 	.word	0x10008089
