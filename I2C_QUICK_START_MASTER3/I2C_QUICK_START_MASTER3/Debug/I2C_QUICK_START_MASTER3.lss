
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b844  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10013844  10013844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002820  100138f0  100138f0  000138f0  2**2
                  ALLOC
  3 .stack        00000800  10016110  10016110  000138f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000138f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00013918  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029ea2  00000000  00000000  000139cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003511  00000000  00000000  0003d86e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a0c3  00000000  00000000  00040d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000970  00000000  00000000  0004ae42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001020  00000000  00000000  0004b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000246f6  00000000  00000000  0004c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e6cc  00000000  00000000  00070ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014603c  00000000  00000000  0007f594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026dc  00000000  00000000  001c55d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	10013844 	.word	0x10013844
10008054:	10013844 	.word	0x10013844
10008058:	100138f0 	.word	0x100138f0
1000805c:	100138f0 	.word	0x100138f0
10008060:	10016110 	.word	0x10016110
10008064:	10011541 	.word	0x10011541
10008068:	1000c9bd 	.word	0x1000c9bd

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	100138f0 	.word	0x100138f0
1000808c:	00000000 	.word	0x00000000
10008090:	10013844 	.word	0x10013844

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	100138f4 	.word	0x100138f4
100080c0:	10013844 	.word	0x10013844
100080c4:	10013844 	.word	0x10013844
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000c175 	.word	0x1000c175
100080f8:	1000f4cd 	.word	0x1000f4cd
100080fc:	10013848 	.word	0x10013848
10008100:	000f4240 	.word	0x000f4240
10008104:	10013844 	.word	0x10013844
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	10013848 	.word	0x10013848
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	1001390c 	.word	0x1001390c
10008178:	10013910 	.word	0x10013910

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081b4:	2800      	cmp	r0, #0
100081b6:	d006      	beq.n	100081c6 <dualtimer_enable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081b8:	2228      	movs	r2, #40	; 0x28
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	4905      	ldr	r1, [pc, #20]	; (100081d4 <dualtimer_enable+0x20>)
100081be:	5c88      	ldrb	r0, [r1, r2]
100081c0:	4303      	orrs	r3, r0
100081c2:	548b      	strb	r3, [r1, r2]
	}
}
100081c4:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c6:	2380      	movs	r3, #128	; 0x80
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <dualtimer_enable+0x20>)
100081ca:	7a11      	ldrb	r1, [r2, #8]
100081cc:	430b      	orrs	r3, r1
100081ce:	7213      	strb	r3, [r2, #8]
100081d0:	e7f8      	b.n	100081c4 <dualtimer_enable+0x10>
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	40001000 	.word	0x40001000

100081d8 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081d8:	2800      	cmp	r0, #0
100081da:	d006      	beq.n	100081ea <dualtimer_disable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081dc:	2228      	movs	r2, #40	; 0x28
100081de:	207f      	movs	r0, #127	; 0x7f
100081e0:	4905      	ldr	r1, [pc, #20]	; (100081f8 <dualtimer_disable+0x20>)
100081e2:	5c8b      	ldrb	r3, [r1, r2]
100081e4:	4003      	ands	r3, r0
100081e6:	548b      	strb	r3, [r1, r2]
	}
}
100081e8:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081ea:	217f      	movs	r1, #127	; 0x7f
100081ec:	4a02      	ldr	r2, [pc, #8]	; (100081f8 <dualtimer_disable+0x20>)
100081ee:	7a13      	ldrb	r3, [r2, #8]
100081f0:	400b      	ands	r3, r1
100081f2:	7213      	strb	r3, [r2, #8]
100081f4:	e7f8      	b.n	100081e8 <dualtimer_disable+0x10>
100081f6:	46c0      	nop			; (mov r8, r8)
100081f8:	40001000 	.word	0x40001000

100081fc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081fc:	b570      	push	{r4, r5, r6, lr}
100081fe:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008200:	4b3a      	ldr	r3, [pc, #232]	; (100082ec <dualtimer_init+0xf0>)
10008202:	2004      	movs	r0, #4
10008204:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008206:	7823      	ldrb	r3, [r4, #0]
10008208:	2b00      	cmp	r3, #0
1000820a:	d102      	bne.n	10008212 <dualtimer_init+0x16>
1000820c:	7b23      	ldrb	r3, [r4, #12]
1000820e:	2b00      	cmp	r3, #0
10008210:	d057      	beq.n	100082c2 <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008212:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008214:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008216:	4936      	ldr	r1, [pc, #216]	; (100082f0 <dualtimer_init+0xf4>)
10008218:	68ca      	ldr	r2, [r1, #12]
1000821a:	4313      	orrs	r3, r2
1000821c:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000821e:	7e22      	ldrb	r2, [r4, #24]
10008220:	698b      	ldr	r3, [r1, #24]
10008222:	4002      	ands	r2, r0
10008224:	302d      	adds	r0, #45	; 0x2d
10008226:	0112      	lsls	r2, r2, #4
10008228:	4383      	bics	r3, r0
1000822a:	4313      	orrs	r3, r2
1000822c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000822e:	7823      	ldrb	r3, [r4, #0]
10008230:	2b00      	cmp	r3, #0
10008232:	d020      	beq.n	10008276 <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008236:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008238:	2a00      	cmp	r2, #0
1000823a:	d150      	bne.n	100082de <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000823c:	2302      	movs	r3, #2
1000823e:	78a1      	ldrb	r1, [r4, #2]
10008240:	78e2      	ldrb	r2, [r4, #3]
10008242:	0049      	lsls	r1, r1, #1
10008244:	4019      	ands	r1, r3
10008246:	0092      	lsls	r2, r2, #2
10008248:	330a      	adds	r3, #10
1000824a:	401a      	ands	r2, r3
1000824c:	000b      	movs	r3, r1
1000824e:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008250:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008252:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008254:	2a00      	cmp	r2, #0
10008256:	d13f      	bne.n	100082d8 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008258:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000825a:	68a1      	ldr	r1, [r4, #8]
1000825c:	4a25      	ldr	r2, [pc, #148]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000825e:	4d24      	ldr	r5, [pc, #144]	; (100082f0 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008260:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008262:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008264:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008266:	0040      	lsls	r0, r0, #1
10008268:	5c2e      	ldrb	r6, [r5, r0]
1000826a:	4331      	orrs	r1, r6
1000826c:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000826e:	2180      	movs	r1, #128	; 0x80
10008270:	7a10      	ldrb	r0, [r2, #8]
10008272:	4301      	orrs	r1, r0
10008274:	7211      	strb	r1, [r2, #8]
10008276:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008278:	2a00      	cmp	r2, #0
1000827a:	d022      	beq.n	100082c2 <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000827c:	7b62      	ldrb	r2, [r4, #13]
1000827e:	2a00      	cmp	r2, #0
10008280:	d124      	bne.n	100082cc <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008282:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008284:	2002      	movs	r0, #2
10008286:	7ba2      	ldrb	r2, [r4, #14]
10008288:	7be1      	ldrb	r1, [r4, #15]
1000828a:	0052      	lsls	r2, r2, #1
1000828c:	4010      	ands	r0, r2
1000828e:	220c      	movs	r2, #12
10008290:	0089      	lsls	r1, r1, #2
10008292:	400a      	ands	r2, r1
10008294:	4302      	orrs	r2, r0
10008296:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008298:	7c22      	ldrb	r2, [r4, #16]
1000829a:	2a00      	cmp	r2, #0
1000829c:	d001      	beq.n	100082a2 <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000829e:	2220      	movs	r2, #32
100082a0:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a2:	6961      	ldr	r1, [r4, #20]
100082a4:	4a13      	ldr	r2, [pc, #76]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082a6:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a8:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2128      	movs	r1, #40	; 0x28
100082ac:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	2302      	movs	r3, #2
100082b0:	4c0f      	ldr	r4, [pc, #60]	; (100082f0 <dualtimer_init+0xf4>)
100082b2:	0040      	lsls	r0, r0, #1
100082b4:	5c25      	ldrb	r5, [r4, r0]
100082b6:	432b      	orrs	r3, r5
100082b8:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100082ba:	2380      	movs	r3, #128	; 0x80
100082bc:	5c50      	ldrb	r0, [r2, r1]
100082be:	4303      	orrs	r3, r0
100082c0:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	490d      	ldr	r1, [pc, #52]	; (100082f8 <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b0d      	ldr	r3, [pc, #52]	; (100082fc <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100082cc:	2a01      	cmp	r2, #1
100082ce:	d00b      	beq.n	100082e8 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100082d0:	2a02      	cmp	r2, #2
100082d2:	d1d7      	bne.n	10008284 <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100082d4:	2340      	movs	r3, #64	; 0x40
100082d6:	e7d5      	b.n	10008284 <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100082d8:	2220      	movs	r2, #32
100082da:	4313      	orrs	r3, r2
100082dc:	e7bc      	b.n	10008258 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100082de:	3a02      	subs	r2, #2
100082e0:	4253      	negs	r3, r2
100082e2:	4153      	adcs	r3, r2
100082e4:	0198      	lsls	r0, r3, #6
100082e6:	e7a9      	b.n	1000823c <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082e8:	2300      	movs	r3, #0
100082ea:	e7cb      	b.n	10008284 <dualtimer_init+0x88>
100082ec:	1000c489 	.word	0x1000c489
100082f0:	4000b000 	.word	0x4000b000
100082f4:	40001000 	.word	0x40001000
100082f8:	1000813d 	.word	0x1000813d
100082fc:	1000c8a1 	.word	0x1000c8a1

10008300 <i2c_write>:
 */
#if defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008302:	4d11      	ldr	r5, [pc, #68]	; (10008348 <i2c_write+0x48>)
10008304:	8028      	strh	r0, [r5, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008306:	1c50      	adds	r0, r2, #1
10008308:	b2c0      	uxtb	r0, r0
1000830a:	8068      	strh	r0, [r5, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000830c:	6868      	ldr	r0, [r5, #4]
1000830e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008310:	2a00      	cmp	r2, #0
10008312:	d008      	beq.n	10008326 <i2c_write+0x26>
10008314:	2100      	movs	r1, #0
10008316:	1c48      	adds	r0, r1, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008318:	686c      	ldr	r4, [r5, #4]
1000831a:	5c59      	ldrb	r1, [r3, r1]
1000831c:	5421      	strb	r1, [r4, r0]
1000831e:	0001      	movs	r1, r0
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008320:	b2c0      	uxtb	r0, r0
10008322:	4290      	cmp	r0, r2
10008324:	d3f7      	bcc.n	10008316 <i2c_write+0x16>
10008326:	4c09      	ldr	r4, [pc, #36]	; (1000834c <i2c_write+0x4c>)
10008328:	4f09      	ldr	r7, [pc, #36]	; (10008350 <i2c_write+0x50>)
1000832a:	4e0a      	ldr	r6, [pc, #40]	; (10008354 <i2c_write+0x54>)
1000832c:	e003      	b.n	10008336 <i2c_write+0x36>
1000832e:	3c01      	subs	r4, #1
10008330:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008332:	2c00      	cmp	r4, #0
10008334:	d005      	beq.n	10008342 <i2c_write+0x42>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008336:	0029      	movs	r1, r5
10008338:	0038      	movs	r0, r7
1000833a:	47b0      	blx	r6
1000833c:	2800      	cmp	r0, #0
1000833e:	d1f6      	bne.n	1000832e <i2c_write+0x2e>
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    return 0;
}
10008340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008342:	2001      	movs	r0, #1
10008344:	4240      	negs	r0, r0
10008346:	e7fb      	b.n	10008340 <i2c_write+0x40>
10008348:	10014f14 	.word	0x10014f14
1000834c:	000003e9 	.word	0x000003e9
10008350:	10014f0c 	.word	0x10014f0c
10008354:	1000c0a1 	.word	0x1000c0a1

10008358 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000835a:	4645      	mov	r5, r8
1000835c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000835e:	4b20      	ldr	r3, [pc, #128]	; (100083e0 <i2c_read+0x88>)
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008360:	4657      	mov	r7, sl
10008362:	464e      	mov	r6, r9
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008364:	4699      	mov	r9, r3
10008366:	b280      	uxth	r0, r0
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008368:	b4e0      	push	{r5, r6, r7}
1000836a:	4692      	mov	sl, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000836c:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000836e:	464a      	mov	r2, r9
10008370:	2301      	movs	r3, #1
10008372:	8053      	strh	r3, [r2, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008374:	6853      	ldr	r3, [r2, #4]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008376:	4e1b      	ldr	r6, [pc, #108]	; (100083e4 <i2c_read+0x8c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008378:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837a:	4653      	mov	r3, sl
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
1000837c:	8030      	strh	r0, [r6, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837e:	8073      	strh	r3, [r6, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008380:	4c19      	ldr	r4, [pc, #100]	; (100083e8 <i2c_read+0x90>)
10008382:	4d1a      	ldr	r5, [pc, #104]	; (100083ec <i2c_read+0x94>)
10008384:	4f1a      	ldr	r7, [pc, #104]	; (100083f0 <i2c_read+0x98>)
10008386:	e003      	b.n	10008390 <i2c_read+0x38>
10008388:	3c01      	subs	r4, #1
1000838a:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000838c:	2c00      	cmp	r4, #0
1000838e:	d023      	beq.n	100083d8 <i2c_read+0x80>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008390:	4649      	mov	r1, r9
10008392:	0028      	movs	r0, r5
10008394:	47b8      	blx	r7
10008396:	2800      	cmp	r0, #0
10008398:	d1f6      	bne.n	10008388 <i2c_read+0x30>
1000839a:	4b16      	ldr	r3, [pc, #88]	; (100083f4 <i2c_read+0x9c>)
1000839c:	4c12      	ldr	r4, [pc, #72]	; (100083e8 <i2c_read+0x90>)
1000839e:	4699      	mov	r9, r3
100083a0:	e003      	b.n	100083aa <i2c_read+0x52>
100083a2:	3c01      	subs	r4, #1
100083a4:	b2a4      	uxth	r4, r4
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
100083a6:	2c00      	cmp	r4, #0
100083a8:	d016      	beq.n	100083d8 <i2c_read+0x80>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100083aa:	0031      	movs	r1, r6
100083ac:	0028      	movs	r0, r5
100083ae:	47c8      	blx	r9
100083b0:	2800      	cmp	r0, #0
100083b2:	d1f6      	bne.n	100083a2 <i2c_read+0x4a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083b4:	4652      	mov	r2, sl
100083b6:	2300      	movs	r3, #0
100083b8:	2a00      	cmp	r2, #0
100083ba:	d007      	beq.n	100083cc <i2c_read+0x74>
        data[i] = i2c_rpacket.data[i];
100083bc:	4641      	mov	r1, r8
100083be:	6872      	ldr	r2, [r6, #4]
100083c0:	5cd2      	ldrb	r2, [r2, r3]
100083c2:	54ca      	strb	r2, [r1, r3]
100083c4:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083c6:	b2da      	uxtb	r2, r3
100083c8:	4592      	cmp	sl, r2
100083ca:	d8f7      	bhi.n	100083bc <i2c_read+0x64>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083cc:	2000      	movs	r0, #0
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
}
100083ce:	bc1c      	pop	{r2, r3, r4}
100083d0:	4690      	mov	r8, r2
100083d2:	4699      	mov	r9, r3
100083d4:	46a2      	mov	sl, r4
100083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083d8:	2001      	movs	r0, #1
100083da:	4240      	negs	r0, r0
100083dc:	e7f7      	b.n	100083ce <i2c_read+0x76>
100083de:	46c0      	nop			; (mov r8, r8)
100083e0:	10014f14 	.word	0x10014f14
100083e4:	10014f04 	.word	0x10014f04
100083e8:	000003e9 	.word	0x000003e9
100083ec:	10014f0c 	.word	0x10014f0c
100083f0:	1000c0d1 	.word	0x1000c0d1
100083f4:	1000c081 	.word	0x1000c081

100083f8 <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083f8:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fa:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083fc:	4c17      	ldr	r4, [pc, #92]	; (1000845c <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fe:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008400:	5ce3      	ldrb	r3, [r4, r3]
10008402:	2b00      	cmp	r3, #0
10008404:	d012      	beq.n	1000842c <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
10008406:	466b      	mov	r3, sp
10008408:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
1000840a:	2800      	cmp	r0, #0
1000840c:	d117      	bne.n	1000843e <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
1000840e:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008410:	6823      	ldr	r3, [r4, #0]
10008412:	2201      	movs	r2, #1
10008414:	7c59      	ldrb	r1, [r3, #17]
10008416:	6863      	ldr	r3, [r4, #4]
10008418:	4e11      	ldr	r6, [pc, #68]	; (10008460 <set_int_enable+0x68>)
1000841a:	7818      	ldrb	r0, [r3, #0]
1000841c:	002b      	movs	r3, r5
1000841e:	47b0      	blx	r6
10008420:	2800      	cmp	r0, #0
10008422:	d118      	bne.n	10008456 <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008424:	782b      	ldrb	r3, [r5, #0]
10008426:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
10008428:	b002      	add	sp, #8
1000842a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
1000842c:	7aa3      	ldrb	r3, [r4, #10]
1000842e:	2b00      	cmp	r3, #0
10008430:	d011      	beq.n	10008456 <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008432:	2800      	cmp	r0, #0
10008434:	d106      	bne.n	10008444 <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
10008436:	466b      	mov	r3, sp
10008438:	1ddd      	adds	r5, r3, #7
1000843a:	71d8      	strb	r0, [r3, #7]
1000843c:	e7e8      	b.n	10008410 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
1000843e:	2302      	movs	r3, #2
10008440:	702b      	strb	r3, [r5, #0]
10008442:	e7e5      	b.n	10008410 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008444:	7c63      	ldrb	r3, [r4, #17]
            return 0;
10008446:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008448:	2b00      	cmp	r3, #0
1000844a:	d1ed      	bne.n	10008428 <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000844c:	466b      	mov	r3, sp
1000844e:	1ddd      	adds	r5, r3, #7
10008450:	2301      	movs	r3, #1
10008452:	702b      	strb	r3, [r5, #0]
10008454:	e7dc      	b.n	10008410 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008456:	2001      	movs	r0, #1
10008458:	4240      	negs	r0, r0
1000845a:	e7e5      	b.n	10008428 <set_int_enable+0x30>
1000845c:	1001384c 	.word	0x1001384c
10008460:	10008301 	.word	0x10008301

10008464 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008464:	b5f0      	push	{r4, r5, r6, r7, lr}
10008466:	4647      	mov	r7, r8
10008468:	b480      	push	{r7}
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846a:	4d24      	ldr	r5, [pc, #144]	; (100084fc <mpu_get_temperature+0x98>)
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
1000846c:	b082      	sub	sp, #8
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846e:	7aab      	ldrb	r3, [r5, #10]
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008470:	0007      	movs	r7, r0
10008472:	4688      	mov	r8, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008474:	2b00      	cmp	r3, #0
10008476:	d03d      	beq.n	100084f4 <mpu_get_temperature+0x90>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008478:	682b      	ldr	r3, [r5, #0]
1000847a:	2202      	movs	r2, #2
1000847c:	7c19      	ldrb	r1, [r3, #16]
1000847e:	686b      	ldr	r3, [r5, #4]
10008480:	4c1f      	ldr	r4, [pc, #124]	; (10008500 <mpu_get_temperature+0x9c>)
10008482:	7818      	ldrb	r0, [r3, #0]
10008484:	466b      	mov	r3, sp
10008486:	47a0      	blx	r4
10008488:	1e06      	subs	r6, r0, #0
1000848a:	d133      	bne.n	100084f4 <mpu_get_temperature+0x90>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000848c:	466b      	mov	r3, sp
1000848e:	781c      	ldrb	r4, [r3, #0]
10008490:	785b      	ldrb	r3, [r3, #1]
10008492:	0224      	lsls	r4, r4, #8
10008494:	431c      	orrs	r4, r3
    if (timestamp)
10008496:	4643      	mov	r3, r8
    if (!(st.chip_cfg.sensors))
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008498:	b224      	sxth	r4, r4
    if (timestamp)
1000849a:	2b00      	cmp	r3, #0
1000849c:	d005      	beq.n	100084aa <mpu_get_temperature+0x46>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
1000849e:	4b19      	ldr	r3, [pc, #100]	; (10008504 <mpu_get_temperature+0xa0>)
100084a0:	2001      	movs	r0, #1
100084a2:	4798      	blx	r3
100084a4:	43c0      	mvns	r0, r0
100084a6:	9001      	str	r0, [sp, #4]
    count = (uint32_t *)(load / 26000);
100084a8:	9b01      	ldr	r3, [sp, #4]
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
100084aa:	686b      	ldr	r3, [r5, #4]
100084ac:	0020      	movs	r0, r4
100084ae:	4698      	mov	r8, r3
100084b0:	4d15      	ldr	r5, [pc, #84]	; (10008508 <mpu_get_temperature+0xa4>)
100084b2:	47a8      	blx	r5
100084b4:	4643      	mov	r3, r8
100084b6:	1c04      	adds	r4, r0, #0
100084b8:	2008      	movs	r0, #8
100084ba:	5e18      	ldrsh	r0, [r3, r0]
100084bc:	47a8      	blx	r5
100084be:	4b13      	ldr	r3, [pc, #76]	; (1000850c <mpu_get_temperature+0xa8>)
100084c0:	1c01      	adds	r1, r0, #0
100084c2:	1c20      	adds	r0, r4, #0
100084c4:	4798      	blx	r3
100084c6:	4643      	mov	r3, r8
100084c8:	1c04      	adds	r4, r0, #0
100084ca:	88d8      	ldrh	r0, [r3, #6]
100084cc:	47a8      	blx	r5
100084ce:	4b10      	ldr	r3, [pc, #64]	; (10008510 <mpu_get_temperature+0xac>)
100084d0:	1c01      	adds	r1, r0, #0
100084d2:	1c20      	adds	r0, r4, #0
100084d4:	4798      	blx	r3
100084d6:	490f      	ldr	r1, [pc, #60]	; (10008514 <mpu_get_temperature+0xb0>)
100084d8:	4b0f      	ldr	r3, [pc, #60]	; (10008518 <mpu_get_temperature+0xb4>)
100084da:	4798      	blx	r3
100084dc:	218f      	movs	r1, #143	; 0x8f
100084de:	4b0f      	ldr	r3, [pc, #60]	; (1000851c <mpu_get_temperature+0xb8>)
100084e0:	05c9      	lsls	r1, r1, #23
100084e2:	4798      	blx	r3
100084e4:	4b0e      	ldr	r3, [pc, #56]	; (10008520 <mpu_get_temperature+0xbc>)
100084e6:	4798      	blx	r3
100084e8:	6038      	str	r0, [r7, #0]
    return 0;
}
100084ea:	0030      	movs	r0, r6
100084ec:	b002      	add	sp, #8
100084ee:	bc04      	pop	{r2}
100084f0:	4690      	mov	r8, r2
100084f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100084f4:	2601      	movs	r6, #1
100084f6:	4276      	negs	r6, r6
100084f8:	e7f7      	b.n	100084ea <mpu_get_temperature+0x86>
100084fa:	46c0      	nop			; (mov r8, r8)
100084fc:	1001384c 	.word	0x1001384c
10008500:	10008359 	.word	0x10008359
10008504:	100081a1 	.word	0x100081a1
10008508:	10010565 	.word	0x10010565
1000850c:	10010215 	.word	0x10010215
10008510:	1000fc59 	.word	0x1000fc59
10008514:	420c0000 	.word	0x420c0000
10008518:	1000f96d 	.word	0x1000f96d
1000851c:	1000ffed 	.word	0x1000ffed
10008520:	10010521 	.word	0x10010521

10008524 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008524:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008526:	4c54      	ldr	r4, [pc, #336]	; (10008678 <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008528:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000852a:	7aa3      	ldrb	r3, [r4, #10]
1000852c:	2b00      	cmp	r3, #0
1000852e:	d100      	bne.n	10008532 <mpu_reset_fifo+0xe>
10008530:	e08f      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
10008532:	466b      	mov	r3, sp
10008534:	1ddd      	adds	r5, r3, #7
10008536:	2300      	movs	r3, #0
10008538:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000853a:	6823      	ldr	r3, [r4, #0]
1000853c:	2201      	movs	r2, #1
1000853e:	7c59      	ldrb	r1, [r3, #17]
10008540:	6863      	ldr	r3, [r4, #4]
10008542:	4e4e      	ldr	r6, [pc, #312]	; (1000867c <mpu_reset_fifo+0x158>)
10008544:	7818      	ldrb	r0, [r3, #0]
10008546:	002b      	movs	r3, r5
10008548:	47b0      	blx	r6
1000854a:	2800      	cmp	r0, #0
1000854c:	d000      	beq.n	10008550 <mpu_reset_fifo+0x2c>
1000854e:	e080      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008550:	6823      	ldr	r3, [r4, #0]
10008552:	2201      	movs	r2, #1
10008554:	7959      	ldrb	r1, [r3, #5]
10008556:	6863      	ldr	r3, [r4, #4]
10008558:	7818      	ldrb	r0, [r3, #0]
1000855a:	002b      	movs	r3, r5
1000855c:	47b0      	blx	r6
1000855e:	2800      	cmp	r0, #0
10008560:	d177      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008562:	6823      	ldr	r3, [r4, #0]
10008564:	2201      	movs	r2, #1
10008566:	7919      	ldrb	r1, [r3, #4]
10008568:	6863      	ldr	r3, [r4, #4]
1000856a:	7818      	ldrb	r0, [r3, #0]
1000856c:	002b      	movs	r3, r5
1000856e:	47b0      	blx	r6
10008570:	2800      	cmp	r0, #0
10008572:	d16e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008574:	2324      	movs	r3, #36	; 0x24
10008576:	5ce3      	ldrb	r3, [r4, r3]
10008578:	2b00      	cmp	r3, #0
1000857a:	d034      	beq.n	100085e6 <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000857c:	230c      	movs	r3, #12
1000857e:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008580:	6823      	ldr	r3, [r4, #0]
10008582:	2201      	movs	r2, #1
10008584:	7919      	ldrb	r1, [r3, #4]
10008586:	6863      	ldr	r3, [r4, #4]
10008588:	7818      	ldrb	r0, [r3, #0]
1000858a:	002b      	movs	r3, r5
1000858c:	47b0      	blx	r6
1000858e:	2800      	cmp	r0, #0
10008590:	d15f      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008592:	4b3b      	ldr	r3, [pc, #236]	; (10008680 <mpu_reset_fifo+0x15c>)
10008594:	3032      	adds	r0, #50	; 0x32
10008596:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008598:	23c0      	movs	r3, #192	; 0xc0
1000859a:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1000859c:	7aa3      	ldrb	r3, [r4, #10]
1000859e:	07db      	lsls	r3, r3, #31
100085a0:	d461      	bmi.n	10008666 <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a2:	6823      	ldr	r3, [r4, #0]
100085a4:	2201      	movs	r2, #1
100085a6:	7919      	ldrb	r1, [r3, #4]
100085a8:	6863      	ldr	r3, [r4, #4]
100085aa:	7818      	ldrb	r0, [r3, #0]
100085ac:	002b      	movs	r3, r5
100085ae:	47b0      	blx	r6
100085b0:	2800      	cmp	r0, #0
100085b2:	d14e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100085b4:	7c63      	ldrb	r3, [r4, #17]
100085b6:	2b00      	cmp	r3, #0
100085b8:	d158      	bne.n	1000866c <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100085ba:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085bc:	6823      	ldr	r3, [r4, #0]
100085be:	2201      	movs	r2, #1
100085c0:	7c59      	ldrb	r1, [r3, #17]
100085c2:	6863      	ldr	r3, [r4, #4]
100085c4:	7818      	ldrb	r0, [r3, #0]
100085c6:	002b      	movs	r3, r5
100085c8:	47b0      	blx	r6
100085ca:	2800      	cmp	r0, #0
100085cc:	d141      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085ce:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
100085d0:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085d2:	7959      	ldrb	r1, [r3, #5]
100085d4:	6863      	ldr	r3, [r4, #4]
100085d6:	2201      	movs	r2, #1
100085d8:	7818      	ldrb	r0, [r3, #0]
100085da:	002b      	movs	r3, r5
100085dc:	47b0      	blx	r6
100085de:	1e43      	subs	r3, r0, #1
100085e0:	4198      	sbcs	r0, r3
100085e2:	4240      	negs	r0, r0
100085e4:	e037      	b.n	10008656 <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100085e6:	2304      	movs	r3, #4
100085e8:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ea:	6823      	ldr	r3, [r4, #0]
100085ec:	2201      	movs	r2, #1
100085ee:	7919      	ldrb	r1, [r3, #4]
100085f0:	6863      	ldr	r3, [r4, #4]
100085f2:	7818      	ldrb	r0, [r3, #0]
100085f4:	002b      	movs	r3, r5
100085f6:	47b0      	blx	r6
100085f8:	2800      	cmp	r0, #0
100085fa:	d12a      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085fc:	7ca3      	ldrb	r3, [r4, #18]
100085fe:	2b00      	cmp	r3, #0
10008600:	d02b      	beq.n	1000865a <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
10008602:	2340      	movs	r3, #64	; 0x40
10008604:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008606:	6823      	ldr	r3, [r4, #0]
10008608:	2201      	movs	r2, #1
1000860a:	7919      	ldrb	r1, [r3, #4]
1000860c:	6863      	ldr	r3, [r4, #4]
1000860e:	7818      	ldrb	r0, [r3, #0]
10008610:	002b      	movs	r3, r5
10008612:	47b0      	blx	r6
10008614:	2800      	cmp	r0, #0
10008616:	d11c      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008618:	4b19      	ldr	r3, [pc, #100]	; (10008680 <mpu_reset_fifo+0x15c>)
1000861a:	3032      	adds	r0, #50	; 0x32
1000861c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000861e:	7c63      	ldrb	r3, [r4, #17]
10008620:	2b00      	cmp	r3, #0
10008622:	d026      	beq.n	10008672 <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
10008624:	2301      	movs	r3, #1
10008626:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008628:	6823      	ldr	r3, [r4, #0]
1000862a:	2201      	movs	r2, #1
1000862c:	7c59      	ldrb	r1, [r3, #17]
1000862e:	6863      	ldr	r3, [r4, #4]
10008630:	7818      	ldrb	r0, [r3, #0]
10008632:	002b      	movs	r3, r5
10008634:	47b0      	blx	r6
10008636:	2800      	cmp	r0, #0
10008638:	d10b      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000863a:	0023      	movs	r3, r4
1000863c:	6822      	ldr	r2, [r4, #0]
1000863e:	3310      	adds	r3, #16
10008640:	7951      	ldrb	r1, [r2, #5]
10008642:	6862      	ldr	r2, [r4, #4]
10008644:	7810      	ldrb	r0, [r2, #0]
10008646:	2201      	movs	r2, #1
10008648:	47b0      	blx	r6
1000864a:	1e43      	subs	r3, r0, #1
1000864c:	4198      	sbcs	r0, r3
1000864e:	4240      	negs	r0, r0
10008650:	e001      	b.n	10008656 <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008652:	2001      	movs	r0, #1
10008654:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008656:	b002      	add	sp, #8
10008658:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000865a:	7aa3      	ldrb	r3, [r4, #10]
1000865c:	07db      	lsls	r3, r3, #31
1000865e:	d5d0      	bpl.n	10008602 <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008660:	2360      	movs	r3, #96	; 0x60
10008662:	702b      	strb	r3, [r5, #0]
10008664:	e7cf      	b.n	10008606 <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
10008666:	23e0      	movs	r3, #224	; 0xe0
10008668:	702b      	strb	r3, [r5, #0]
1000866a:	e79a      	b.n	100085a2 <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
1000866c:	2302      	movs	r3, #2
1000866e:	702b      	strb	r3, [r5, #0]
10008670:	e7a4      	b.n	100085bc <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
10008672:	702b      	strb	r3, [r5, #0]
10008674:	e7d8      	b.n	10008628 <mpu_reset_fifo+0x104>
10008676:	46c0      	nop			; (mov r8, r8)
10008678:	1001384c 	.word	0x1001384c
1000867c:	10008301 	.word	0x10008301
10008680:	1000810d 	.word	0x1000810d

10008684 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
10008684:	4b0e      	ldr	r3, [pc, #56]	; (100086c0 <mpu_get_gyro_fsr+0x3c>)
10008686:	7a1b      	ldrb	r3, [r3, #8]
10008688:	2b01      	cmp	r3, #1
1000868a:	d014      	beq.n	100086b6 <mpu_get_gyro_fsr+0x32>
1000868c:	2b00      	cmp	r3, #0
1000868e:	d00f      	beq.n	100086b0 <mpu_get_gyro_fsr+0x2c>
10008690:	2b02      	cmp	r3, #2
10008692:	d006      	beq.n	100086a2 <mpu_get_gyro_fsr+0x1e>
10008694:	2b03      	cmp	r3, #3
10008696:	d108      	bne.n	100086aa <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008698:	23fa      	movs	r3, #250	; 0xfa
1000869a:	00db      	lsls	r3, r3, #3
1000869c:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
1000869e:	2000      	movs	r0, #0
100086a0:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
100086a2:	23fa      	movs	r3, #250	; 0xfa
100086a4:	009b      	lsls	r3, r3, #2
100086a6:	8003      	strh	r3, [r0, #0]
        break;
100086a8:	e7f9      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
100086aa:	2300      	movs	r3, #0
100086ac:	8003      	strh	r3, [r0, #0]
        break;
100086ae:	e7f6      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
100086b0:	23fa      	movs	r3, #250	; 0xfa
100086b2:	8003      	strh	r3, [r0, #0]
        break;
100086b4:	e7f3      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100086b6:	23fa      	movs	r3, #250	; 0xfa
100086b8:	005b      	lsls	r3, r3, #1
100086ba:	8003      	strh	r3, [r0, #0]
        break;
100086bc:	e7ef      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
100086be:	46c0      	nop			; (mov r8, r8)
100086c0:	1001384c 	.word	0x1001384c

100086c4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c4:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086c6:	4c20      	ldr	r4, [pc, #128]	; (10008748 <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c8:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086ca:	7aa3      	ldrb	r3, [r4, #10]
100086cc:	2b00      	cmp	r3, #0
100086ce:	d02a      	beq.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
100086d0:	23fa      	movs	r3, #250	; 0xfa
100086d2:	005b      	lsls	r3, r3, #1
100086d4:	4298      	cmp	r0, r3
100086d6:	d030      	beq.n	1000873a <mpu_set_gyro_fsr+0x76>
100086d8:	d90d      	bls.n	100086f6 <mpu_set_gyro_fsr+0x32>
100086da:	23fa      	movs	r3, #250	; 0xfa
100086dc:	009b      	lsls	r3, r3, #2
100086de:	4298      	cmp	r0, r3
100086e0:	d025      	beq.n	1000872e <mpu_set_gyro_fsr+0x6a>
100086e2:	23fa      	movs	r3, #250	; 0xfa
100086e4:	00db      	lsls	r3, r3, #3
100086e6:	4298      	cmp	r0, r3
100086e8:	d11d      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
100086ea:	466b      	mov	r3, sp
100086ec:	1ddd      	adds	r5, r3, #7
100086ee:	2318      	movs	r3, #24
100086f0:	702b      	strb	r3, [r5, #0]
        break;
100086f2:	3b15      	subs	r3, #21
100086f4:	e005      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100086f6:	28fa      	cmp	r0, #250	; 0xfa
100086f8:	d115      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
100086fa:	466b      	mov	r3, sp
100086fc:	1ddd      	adds	r5, r3, #7
100086fe:	2300      	movs	r3, #0
10008700:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008702:	7a22      	ldrb	r2, [r4, #8]
        return 0;
10008704:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008706:	429a      	cmp	r2, r3
10008708:	d00f      	beq.n	1000872a <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000870a:	6823      	ldr	r3, [r4, #0]
1000870c:	2201      	movs	r2, #1
1000870e:	7999      	ldrb	r1, [r3, #6]
10008710:	6863      	ldr	r3, [r4, #4]
10008712:	4e0e      	ldr	r6, [pc, #56]	; (1000874c <mpu_set_gyro_fsr+0x88>)
10008714:	7818      	ldrb	r0, [r3, #0]
10008716:	002b      	movs	r3, r5
10008718:	47b0      	blx	r6
1000871a:	2800      	cmp	r0, #0
1000871c:	d103      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000871e:	782b      	ldrb	r3, [r5, #0]
10008720:	08db      	lsrs	r3, r3, #3
10008722:	7223      	strb	r3, [r4, #8]
    return 0;
10008724:	e001      	b.n	1000872a <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008726:	2001      	movs	r0, #1
10008728:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000872a:	b002      	add	sp, #8
1000872c:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000872e:	466b      	mov	r3, sp
10008730:	1ddd      	adds	r5, r3, #7
10008732:	2310      	movs	r3, #16
10008734:	702b      	strb	r3, [r5, #0]
        break;
10008736:	3b0e      	subs	r3, #14
10008738:	e7e3      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
1000873a:	466b      	mov	r3, sp
1000873c:	1ddd      	adds	r5, r3, #7
1000873e:	2308      	movs	r3, #8
10008740:	702b      	strb	r3, [r5, #0]
        break;
10008742:	3b07      	subs	r3, #7
10008744:	e7dd      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
10008746:	46c0      	nop			; (mov r8, r8)
10008748:	1001384c 	.word	0x1001384c
1000874c:	10008301 	.word	0x10008301

10008750 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008750:	4a10      	ldr	r2, [pc, #64]	; (10008794 <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008752:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
10008754:	7a53      	ldrb	r3, [r2, #9]
10008756:	2b01      	cmp	r3, #1
10008758:	d018      	beq.n	1000878c <mpu_get_accel_fsr+0x3c>
1000875a:	2b00      	cmp	r3, #0
1000875c:	d013      	beq.n	10008786 <mpu_get_accel_fsr+0x36>
1000875e:	2b02      	cmp	r3, #2
10008760:	d00b      	beq.n	1000877a <mpu_get_accel_fsr+0x2a>
10008762:	2b03      	cmp	r3, #3
10008764:	d10c      	bne.n	10008780 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
10008766:	2310      	movs	r3, #16
10008768:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876a:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
1000876c:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876e:	2b00      	cmp	r3, #0
10008770:	d002      	beq.n	10008778 <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
10008772:	780b      	ldrb	r3, [r1, #0]
10008774:	005b      	lsls	r3, r3, #1
10008776:	700b      	strb	r3, [r1, #0]
    return 0;
}
10008778:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
1000877a:	2308      	movs	r3, #8
1000877c:	7003      	strb	r3, [r0, #0]
        break;
1000877e:	e7f4      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e7f8      	b.n	10008778 <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
10008786:	2302      	movs	r3, #2
10008788:	7003      	strb	r3, [r0, #0]
        break;
1000878a:	e7ee      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
1000878c:	2304      	movs	r3, #4
1000878e:	7003      	strb	r3, [r0, #0]
        break;
10008790:	e7eb      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
10008792:	46c0      	nop			; (mov r8, r8)
10008794:	1001384c 	.word	0x1001384c

10008798 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008798:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879a:	4c1d      	ldr	r4, [pc, #116]	; (10008810 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000879c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879e:	7aa3      	ldrb	r3, [r4, #10]
100087a0:	2b00      	cmp	r3, #0
100087a2:	d024      	beq.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
100087a4:	2804      	cmp	r0, #4
100087a6:	d02c      	beq.n	10008802 <mpu_set_accel_fsr+0x6a>
100087a8:	d909      	bls.n	100087be <mpu_set_accel_fsr+0x26>
100087aa:	2808      	cmp	r0, #8
100087ac:	d023      	beq.n	100087f6 <mpu_set_accel_fsr+0x5e>
100087ae:	2810      	cmp	r0, #16
100087b0:	d11d      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
100087b2:	466b      	mov	r3, sp
100087b4:	1ddd      	adds	r5, r3, #7
100087b6:	2318      	movs	r3, #24
100087b8:	702b      	strb	r3, [r5, #0]
        break;
100087ba:	3b15      	subs	r3, #21
100087bc:	e005      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100087be:	2802      	cmp	r0, #2
100087c0:	d115      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
100087c2:	466b      	mov	r3, sp
100087c4:	1ddd      	adds	r5, r3, #7
100087c6:	2300      	movs	r3, #0
100087c8:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ca:	7a62      	ldrb	r2, [r4, #9]
        return 0;
100087cc:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ce:	429a      	cmp	r2, r3
100087d0:	d00f      	beq.n	100087f2 <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087d2:	6823      	ldr	r3, [r4, #0]
100087d4:	2201      	movs	r2, #1
100087d6:	79d9      	ldrb	r1, [r3, #7]
100087d8:	6863      	ldr	r3, [r4, #4]
100087da:	4e0e      	ldr	r6, [pc, #56]	; (10008814 <mpu_set_accel_fsr+0x7c>)
100087dc:	7818      	ldrb	r0, [r3, #0]
100087de:	002b      	movs	r3, r5
100087e0:	47b0      	blx	r6
100087e2:	2800      	cmp	r0, #0
100087e4:	d103      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100087e6:	782b      	ldrb	r3, [r5, #0]
100087e8:	08db      	lsrs	r3, r3, #3
100087ea:	7263      	strb	r3, [r4, #9]
    return 0;
100087ec:	e001      	b.n	100087f2 <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100087ee:	2001      	movs	r0, #1
100087f0:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100087f2:	b002      	add	sp, #8
100087f4:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
100087f6:	466b      	mov	r3, sp
100087f8:	1ddd      	adds	r5, r3, #7
100087fa:	2310      	movs	r3, #16
100087fc:	702b      	strb	r3, [r5, #0]
        break;
100087fe:	3b0e      	subs	r3, #14
10008800:	e7e3      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
10008802:	466b      	mov	r3, sp
10008804:	1ddd      	adds	r5, r3, #7
10008806:	2308      	movs	r3, #8
10008808:	702b      	strb	r3, [r5, #0]
        break;
1000880a:	3b07      	subs	r3, #7
1000880c:	e7dd      	b.n	100087ca <mpu_set_accel_fsr+0x32>
1000880e:	46c0      	nop			; (mov r8, r8)
10008810:	1001384c 	.word	0x1001384c
10008814:	10008301 	.word	0x10008301

10008818 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008818:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881a:	4c22      	ldr	r4, [pc, #136]	; (100088a4 <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000881c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881e:	7aa3      	ldrb	r3, [r4, #10]
10008820:	2b00      	cmp	r3, #0
10008822:	d033      	beq.n	1000888c <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008824:	466b      	mov	r3, sp
10008826:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008828:	28bb      	cmp	r0, #187	; 0xbb
1000882a:	d822      	bhi.n	10008872 <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
1000882c:	2861      	cmp	r0, #97	; 0x61
1000882e:	d923      	bls.n	10008878 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008830:	2302      	movs	r3, #2
10008832:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008834:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
10008836:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008838:	429a      	cmp	r2, r3
1000883a:	d018      	beq.n	1000886e <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000883c:	6823      	ldr	r3, [r4, #0]
1000883e:	2201      	movs	r2, #1
10008840:	7899      	ldrb	r1, [r3, #2]
10008842:	6863      	ldr	r3, [r4, #4]
10008844:	4e18      	ldr	r6, [pc, #96]	; (100088a8 <mpu_set_lpf+0x90>)
10008846:	7818      	ldrb	r0, [r3, #0]
10008848:	002b      	movs	r3, r5
1000884a:	47b0      	blx	r6
1000884c:	2800      	cmp	r0, #0
1000884e:	d11d      	bne.n	1000888c <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008850:	2340      	movs	r3, #64	; 0x40
10008852:	782a      	ldrb	r2, [r5, #0]
10008854:	4313      	orrs	r3, r2
10008856:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008858:	6823      	ldr	r3, [r4, #0]
1000885a:	2201      	movs	r2, #1
1000885c:	7a19      	ldrb	r1, [r3, #8]
1000885e:	6863      	ldr	r3, [r4, #4]
10008860:	7818      	ldrb	r0, [r3, #0]
10008862:	002b      	movs	r3, r5
10008864:	47b0      	blx	r6
10008866:	2800      	cmp	r0, #0
10008868:	d110      	bne.n	1000888c <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
1000886a:	782b      	ldrb	r3, [r5, #0]
1000886c:	72e3      	strb	r3, [r4, #11]
    return 0;
}
1000886e:	b002      	add	sp, #8
10008870:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008872:	2301      	movs	r3, #1
10008874:	702b      	strb	r3, [r5, #0]
10008876:	e7dd      	b.n	10008834 <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
10008878:	2829      	cmp	r0, #41	; 0x29
1000887a:	d804      	bhi.n	10008886 <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
1000887c:	2813      	cmp	r0, #19
1000887e:	d908      	bls.n	10008892 <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
10008880:	2304      	movs	r3, #4
10008882:	702b      	strb	r3, [r5, #0]
10008884:	e7d6      	b.n	10008834 <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
10008886:	2303      	movs	r3, #3
10008888:	702b      	strb	r3, [r5, #0]
1000888a:	e7d3      	b.n	10008834 <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000888c:	2001      	movs	r0, #1
1000888e:	4240      	negs	r0, r0
10008890:	e7ed      	b.n	1000886e <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
10008892:	2809      	cmp	r0, #9
10008894:	d902      	bls.n	1000889c <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
10008896:	2305      	movs	r3, #5
10008898:	702b      	strb	r3, [r5, #0]
1000889a:	e7cb      	b.n	10008834 <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
1000889c:	2306      	movs	r3, #6
1000889e:	702b      	strb	r3, [r5, #0]
100088a0:	e7c8      	b.n	10008834 <mpu_set_lpf+0x1c>
100088a2:	46c0      	nop			; (mov r8, r8)
100088a4:	1001384c 	.word	0x1001384c
100088a8:	10008301 	.word	0x10008301

100088ac <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100088ac:	2224      	movs	r2, #36	; 0x24
100088ae:	4b05      	ldr	r3, [pc, #20]	; (100088c4 <mpu_get_sample_rate+0x18>)
100088b0:	5c9a      	ldrb	r2, [r3, r2]
100088b2:	2a00      	cmp	r2, #0
100088b4:	d103      	bne.n	100088be <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100088b6:	89db      	ldrh	r3, [r3, #14]
100088b8:	8003      	strh	r3, [r0, #0]
    return 0;
100088ba:	2000      	movs	r0, #0
}
100088bc:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100088be:	2001      	movs	r0, #1
100088c0:	4240      	negs	r0, r0
100088c2:	e7fb      	b.n	100088bc <mpu_get_sample_rate+0x10>
100088c4:	1001384c 	.word	0x1001384c

100088c8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100088c8:	b530      	push	{r4, r5, lr}
100088ca:	0001      	movs	r1, r0
100088cc:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100088ce:	2800      	cmp	r0, #0
100088d0:	d020      	beq.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088d2:	4c12      	ldr	r4, [pc, #72]	; (1000891c <mpu_set_compass_sample_rate+0x54>)
100088d4:	89e0      	ldrh	r0, [r4, #14]
100088d6:	4281      	cmp	r1, r0
100088d8:	d81c      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088da:	2964      	cmp	r1, #100	; 0x64
100088dc:	d81a      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100088de:	4b10      	ldr	r3, [pc, #64]	; (10008920 <mpu_set_compass_sample_rate+0x58>)
100088e0:	4798      	blx	r3
100088e2:	466b      	mov	r3, sp
100088e4:	3801      	subs	r0, #1
100088e6:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100088e8:	2324      	movs	r3, #36	; 0x24
100088ea:	6822      	ldr	r2, [r4, #0]
100088ec:	4d0d      	ldr	r5, [pc, #52]	; (10008924 <mpu_set_compass_sample_rate+0x5c>)
100088ee:	5cd1      	ldrb	r1, [r2, r3]
100088f0:	6863      	ldr	r3, [r4, #4]
100088f2:	2201      	movs	r2, #1
100088f4:	7818      	ldrb	r0, [r3, #0]
100088f6:	466b      	mov	r3, sp
100088f8:	3307      	adds	r3, #7
100088fa:	47a8      	blx	r5
100088fc:	1e05      	subs	r5, r0, #0
100088fe:	d109      	bne.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008900:	466b      	mov	r3, sp
10008902:	79d9      	ldrb	r1, [r3, #7]
10008904:	89e0      	ldrh	r0, [r4, #14]
10008906:	3101      	adds	r1, #1
10008908:	4b07      	ldr	r3, [pc, #28]	; (10008928 <mpu_set_compass_sample_rate+0x60>)
1000890a:	4798      	blx	r3
1000890c:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
1000890e:	0028      	movs	r0, r5
10008910:	b003      	add	sp, #12
10008912:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008914:	2501      	movs	r5, #1
10008916:	426d      	negs	r5, r5
10008918:	e7f9      	b.n	1000890e <mpu_set_compass_sample_rate+0x46>
1000891a:	46c0      	nop			; (mov r8, r8)
1000891c:	1001384c 	.word	0x1001384c
10008920:	1000f4cd 	.word	0x1000f4cd
10008924:	10008301 	.word	0x10008301
10008928:	1000f5e1 	.word	0x1000f5e1

1000892c <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000892c:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1000892e:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008930:	4d14      	ldr	r5, [pc, #80]	; (10008984 <mpu_configure_fifo+0x58>)
        return 0;
10008932:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008934:	5ceb      	ldrb	r3, [r5, r3]
10008936:	2b00      	cmp	r3, #0
10008938:	d113      	bne.n	10008962 <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
1000893a:	7aac      	ldrb	r4, [r5, #10]
1000893c:	2c00      	cmp	r4, #0
1000893e:	d01d      	beq.n	1000897c <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008940:	3301      	adds	r3, #1
10008942:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008944:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008946:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008948:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1000894a:	1b04      	subs	r4, r0, r4
1000894c:	1e63      	subs	r3, r4, #1
1000894e:	419c      	sbcs	r4, r3
10008950:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008952:	2800      	cmp	r0, #0
10008954:	d107      	bne.n	10008966 <mpu_configure_fifo+0x3a>
10008956:	7d2b      	ldrb	r3, [r5, #20]
10008958:	2b00      	cmp	r3, #0
1000895a:	d000      	beq.n	1000895e <mpu_configure_fifo+0x32>
            set_int_enable(1);
1000895c:	2001      	movs	r0, #1
1000895e:	4b0a      	ldr	r3, [pc, #40]	; (10008988 <mpu_configure_fifo+0x5c>)
10008960:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008962:	0020      	movs	r0, r4
10008964:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008966:	4b08      	ldr	r3, [pc, #32]	; (10008988 <mpu_configure_fifo+0x5c>)
10008968:	2001      	movs	r0, #1
1000896a:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
1000896c:	4b07      	ldr	r3, [pc, #28]	; (1000898c <mpu_configure_fifo+0x60>)
1000896e:	4798      	blx	r3
10008970:	2800      	cmp	r0, #0
10008972:	d0f6      	beq.n	10008962 <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
10008974:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008976:	742e      	strb	r6, [r5, #16]
                return -1;
10008978:	4264      	negs	r4, r4
1000897a:	e7f2      	b.n	10008962 <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
1000897c:	2401      	movs	r4, #1
1000897e:	4264      	negs	r4, r4
10008980:	e7ef      	b.n	10008962 <mpu_configure_fifo+0x36>
10008982:	46c0      	nop			; (mov r8, r8)
10008984:	1001384c 	.word	0x1001384c
10008988:	100083f9 	.word	0x100083f9
1000898c:	10008525 	.word	0x10008525

10008990 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008990:	b5f0      	push	{r4, r5, r6, r7, lr}
10008992:	464d      	mov	r5, r9
10008994:	4644      	mov	r4, r8
10008996:	465f      	mov	r7, fp
10008998:	4656      	mov	r6, sl
1000899a:	4698      	mov	r8, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
1000899c:	2324      	movs	r3, #36	; 0x24
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
1000899e:	b4f0      	push	{r4, r5, r6, r7}
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a0:	4d68      	ldr	r5, [pc, #416]	; (10008b44 <mpu_read_fifo+0x1b4>)
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
100089a2:	b087      	sub	sp, #28
100089a4:	9000      	str	r0, [sp, #0]
100089a6:	9101      	str	r1, [sp, #4]
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a8:	5ceb      	ldrb	r3, [r5, r3]
100089aa:	2b00      	cmp	r3, #0
100089ac:	d000      	beq.n	100089b0 <mpu_read_fifo+0x20>
100089ae:	e0be      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    sensors[0] = 0;
100089b0:	4642      	mov	r2, r8
100089b2:	7013      	strb	r3, [r2, #0]
    if (!st.chip_cfg.sensors)
100089b4:	7aab      	ldrb	r3, [r5, #10]
100089b6:	2b00      	cmp	r3, #0
100089b8:	d100      	bne.n	100089bc <mpu_read_fifo+0x2c>
100089ba:	e0b8      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    if (!st.chip_cfg.fifo_enable)
100089bc:	7c2b      	ldrb	r3, [r5, #16]
100089be:	2b00      	cmp	r3, #0
100089c0:	d100      	bne.n	100089c4 <mpu_read_fifo+0x34>
100089c2:	e0b4      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
100089c4:	065c      	lsls	r4, r3, #25
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
100089c6:	0fe4      	lsrs	r4, r4, #31
100089c8:	0064      	lsls	r4, r4, #1
    if (!st.chip_cfg.fifo_enable)
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
100089ca:	069a      	lsls	r2, r3, #26
100089cc:	d501      	bpl.n	100089d2 <mpu_read_fifo+0x42>
        packet_size += 2;
100089ce:	3402      	adds	r4, #2
100089d0:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
100089d2:	06da      	lsls	r2, r3, #27
100089d4:	d501      	bpl.n	100089da <mpu_read_fifo+0x4a>
        packet_size += 2;
100089d6:	3402      	adds	r4, #2
100089d8:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
100089da:	071b      	lsls	r3, r3, #28
100089dc:	d500      	bpl.n	100089e0 <mpu_read_fifo+0x50>
100089de:	e08b      	b.n	10008af8 <mpu_read_fifo+0x168>
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
100089e0:	682b      	ldr	r3, [r5, #0]
100089e2:	ae03      	add	r6, sp, #12
100089e4:	7b19      	ldrb	r1, [r3, #12]
100089e6:	686b      	ldr	r3, [r5, #4]
100089e8:	4f57      	ldr	r7, [pc, #348]	; (10008b48 <mpu_read_fifo+0x1b8>)
100089ea:	7818      	ldrb	r0, [r3, #0]
100089ec:	2202      	movs	r2, #2
100089ee:	0033      	movs	r3, r6
100089f0:	47b8      	blx	r7
100089f2:	46ba      	mov	sl, r7
100089f4:	4681      	mov	r9, r0
100089f6:	2800      	cmp	r0, #0
100089f8:	d000      	beq.n	100089fc <mpu_read_fifo+0x6c>
100089fa:	e098      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
100089fc:	7837      	ldrb	r7, [r6, #0]
100089fe:	7873      	ldrb	r3, [r6, #1]
10008a00:	023f      	lsls	r7, r7, #8
10008a02:	431f      	orrs	r7, r3
    if (fifo_count < packet_size)
10008a04:	b2a3      	uxth	r3, r4
10008a06:	469b      	mov	fp, r3
10008a08:	429f      	cmp	r7, r3
10008a0a:	d36d      	bcc.n	10008ae8 <mpu_read_fifo+0x158>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008a0c:	686a      	ldr	r2, [r5, #4]
10008a0e:	8853      	ldrh	r3, [r2, #2]
10008a10:	085b      	lsrs	r3, r3, #1
10008a12:	429f      	cmp	r7, r3
10008a14:	d90c      	bls.n	10008a30 <mpu_read_fifo+0xa0>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008a16:	682b      	ldr	r3, [r5, #0]
10008a18:	7810      	ldrb	r0, [r2, #0]
10008a1a:	7cd9      	ldrb	r1, [r3, #19]
10008a1c:	2201      	movs	r2, #1
10008a1e:	0033      	movs	r3, r6
10008a20:	47d0      	blx	sl
10008a22:	2800      	cmp	r0, #0
10008a24:	d000      	beq.n	10008a28 <mpu_read_fifo+0x98>
10008a26:	e082      	b.n	10008b2e <mpu_read_fifo+0x19e>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008a28:	7833      	ldrb	r3, [r6, #0]
10008a2a:	06db      	lsls	r3, r3, #27
10008a2c:	d500      	bpl.n	10008a30 <mpu_read_fifo+0xa0>
10008a2e:	e082      	b.n	10008b36 <mpu_read_fifo+0x1a6>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
10008a30:	4b46      	ldr	r3, [pc, #280]	; (10008b4c <mpu_read_fifo+0x1bc>)
10008a32:	2001      	movs	r0, #1
10008a34:	4798      	blx	r3
10008a36:	43c0      	mvns	r0, r0
10008a38:	9002      	str	r0, [sp, #8]
    count = (uint32_t *)(load / 26000);
10008a3a:	9b02      	ldr	r3, [sp, #8]
            return -2;
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008a3c:	682b      	ldr	r3, [r5, #0]
10008a3e:	0022      	movs	r2, r4
10008a40:	7b59      	ldrb	r1, [r3, #13]
10008a42:	686b      	ldr	r3, [r5, #4]
10008a44:	7818      	ldrb	r0, [r3, #0]
10008a46:	0033      	movs	r3, r6
10008a48:	47d0      	blx	sl
10008a4a:	4682      	mov	sl, r0
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d16e      	bne.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008a50:	4b3f      	ldr	r3, [pc, #252]	; (10008b50 <mpu_read_fifo+0x1c0>)
10008a52:	0021      	movs	r1, r4
10008a54:	0038      	movs	r0, r7
10008a56:	4798      	blx	r3
10008a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008a5a:	3801      	subs	r0, #1
10008a5c:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008a5e:	4652      	mov	r2, sl
10008a60:	4643      	mov	r3, r8
10008a62:	701a      	strb	r2, [r3, #0]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008a64:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008a66:	2c00      	cmp	r4, #0
10008a68:	d002      	beq.n	10008a70 <mpu_read_fifo+0xe0>
10008a6a:	7c2a      	ldrb	r2, [r5, #16]
10008a6c:	0712      	lsls	r2, r2, #28
10008a6e:	d446      	bmi.n	10008afe <mpu_read_fifo+0x16e>
        accel[1] = (data[index+2] << 8) | data[index+3];
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008a70:	455b      	cmp	r3, fp
10008a72:	d039      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a74:	7c2a      	ldrb	r2, [r5, #16]
10008a76:	0651      	lsls	r1, r2, #25
10008a78:	d511      	bpl.n	10008a9e <mpu_read_fifo+0x10e>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a7a:	5cf2      	ldrb	r2, [r6, r3]
10008a7c:	18f1      	adds	r1, r6, r3
10008a7e:	7849      	ldrb	r1, [r1, #1]
10008a80:	0212      	lsls	r2, r2, #8
10008a82:	430a      	orrs	r2, r1
10008a84:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_X_GYRO;
        index += 2;
10008a86:	3302      	adds	r3, #2
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a88:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008a8a:	4642      	mov	r2, r8
10008a8c:	7811      	ldrb	r1, [r2, #0]
10008a8e:	2240      	movs	r2, #64	; 0x40
10008a90:	430a      	orrs	r2, r1
10008a92:	4641      	mov	r1, r8
        index += 2;
10008a94:	b29b      	uxth	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
10008a96:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008a98:	459b      	cmp	fp, r3
10008a9a:	d025      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a9c:	7c2a      	ldrb	r2, [r5, #16]
10008a9e:	0691      	lsls	r1, r2, #26
10008aa0:	d511      	bpl.n	10008ac6 <mpu_read_fifo+0x136>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008aa2:	5cf2      	ldrb	r2, [r6, r3]
10008aa4:	18f1      	adds	r1, r6, r3
10008aa6:	7849      	ldrb	r1, [r1, #1]
10008aa8:	0212      	lsls	r2, r2, #8
10008aaa:	430a      	orrs	r2, r1
10008aac:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_Y_GYRO;
        index += 2;
10008aae:	3302      	adds	r3, #2
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008ab0:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008ab2:	4642      	mov	r2, r8
10008ab4:	7811      	ldrb	r1, [r2, #0]
10008ab6:	2220      	movs	r2, #32
10008ab8:	430a      	orrs	r2, r1
10008aba:	4641      	mov	r1, r8
        index += 2;
10008abc:	b29b      	uxth	r3, r3
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_Y_GYRO;
10008abe:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008ac0:	459b      	cmp	fp, r3
10008ac2:	d011      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008ac4:	7c2a      	ldrb	r2, [r5, #16]
10008ac6:	06d2      	lsls	r2, r2, #27
10008ac8:	d50e      	bpl.n	10008ae8 <mpu_read_fifo+0x158>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008aca:	5cf2      	ldrb	r2, [r6, r3]
10008acc:	18f6      	adds	r6, r6, r3
10008ace:	7873      	ldrb	r3, [r6, #1]
10008ad0:	0212      	lsls	r2, r2, #8
10008ad2:	4313      	orrs	r3, r2
10008ad4:	9a00      	ldr	r2, [sp, #0]
10008ad6:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008ad8:	4643      	mov	r3, r8
10008ada:	781a      	ldrb	r2, [r3, #0]
10008adc:	2310      	movs	r3, #16
10008ade:	4313      	orrs	r3, r2
10008ae0:	4642      	mov	r2, r8
10008ae2:	7013      	strb	r3, [r2, #0]
        index += 2;
    }

    return 0;
10008ae4:	2300      	movs	r3, #0
10008ae6:	4699      	mov	r9, r3
}
10008ae8:	4648      	mov	r0, r9
10008aea:	b007      	add	sp, #28
10008aec:	bc3c      	pop	{r2, r3, r4, r5}
10008aee:	4690      	mov	r8, r2
10008af0:	4699      	mov	r9, r3
10008af2:	46a2      	mov	sl, r4
10008af4:	46ab      	mov	fp, r5
10008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;
10008af8:	3406      	adds	r4, #6
10008afa:	b2e4      	uxtb	r4, r4
10008afc:	e770      	b.n	100089e0 <mpu_read_fifo+0x50>
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
        accel[0] = (data[index+0] << 8) | data[index+1];
10008afe:	7833      	ldrb	r3, [r6, #0]
10008b00:	7872      	ldrb	r2, [r6, #1]
10008b02:	9901      	ldr	r1, [sp, #4]
10008b04:	021b      	lsls	r3, r3, #8
10008b06:	4313      	orrs	r3, r2
10008b08:	800b      	strh	r3, [r1, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008b0a:	78b3      	ldrb	r3, [r6, #2]
10008b0c:	78f2      	ldrb	r2, [r6, #3]
10008b0e:	021b      	lsls	r3, r3, #8
10008b10:	4313      	orrs	r3, r2
10008b12:	804b      	strh	r3, [r1, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008b14:	7933      	ldrb	r3, [r6, #4]
10008b16:	7972      	ldrb	r2, [r6, #5]
10008b18:	021b      	lsls	r3, r3, #8
10008b1a:	4313      	orrs	r3, r2
10008b1c:	808b      	strh	r3, [r1, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008b1e:	4643      	mov	r3, r8
10008b20:	781a      	ldrb	r2, [r3, #0]
10008b22:	2308      	movs	r3, #8
10008b24:	4313      	orrs	r3, r2
10008b26:	4642      	mov	r2, r8
10008b28:	7013      	strb	r3, [r2, #0]
        index += 6;
10008b2a:	2306      	movs	r3, #6
10008b2c:	e7a0      	b.n	10008a70 <mpu_read_fifo+0xe0>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008b2e:	2301      	movs	r3, #1
10008b30:	425b      	negs	r3, r3
10008b32:	4699      	mov	r9, r3
10008b34:	e7d8      	b.n	10008ae8 <mpu_read_fifo+0x158>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
10008b36:	4b07      	ldr	r3, [pc, #28]	; (10008b54 <mpu_read_fifo+0x1c4>)
10008b38:	4798      	blx	r3
            return -2;
10008b3a:	2302      	movs	r3, #2
10008b3c:	425b      	negs	r3, r3
10008b3e:	4699      	mov	r9, r3
10008b40:	e7d2      	b.n	10008ae8 <mpu_read_fifo+0x158>
10008b42:	46c0      	nop			; (mov r8, r8)
10008b44:	1001384c 	.word	0x1001384c
10008b48:	10008359 	.word	0x10008359
10008b4c:	100081a1 	.word	0x100081a1
10008b50:	1000f5e1 	.word	0x1000f5e1
10008b54:	10008525 	.word	0x10008525

10008b58 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5a:	4c36      	ldr	r4, [pc, #216]	; (10008c34 <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b5c:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5e:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b60:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b62:	4283      	cmp	r3, r0
10008b64:	d05f      	beq.n	10008c26 <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b66:	466b      	mov	r3, sp
10008b68:	1ddd      	adds	r5, r3, #7
10008b6a:	6823      	ldr	r3, [r4, #0]
10008b6c:	2201      	movs	r2, #1
10008b6e:	7919      	ldrb	r1, [r3, #4]
10008b70:	6863      	ldr	r3, [r4, #4]
10008b72:	4f31      	ldr	r7, [pc, #196]	; (10008c38 <mpu_set_bypass+0xe0>)
10008b74:	7818      	ldrb	r0, [r3, #0]
10008b76:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
10008b78:	2e00      	cmp	r6, #0
10008b7a:	d02e      	beq.n	10008bda <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b7c:	47b8      	blx	r7
10008b7e:	2800      	cmp	r0, #0
10008b80:	d155      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b82:	2220      	movs	r2, #32
10008b84:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b86:	4f2d      	ldr	r7, [pc, #180]	; (10008c3c <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b88:	4393      	bics	r3, r2
10008b8a:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b8c:	6823      	ldr	r3, [r4, #0]
10008b8e:	3a1f      	subs	r2, #31
10008b90:	7919      	ldrb	r1, [r3, #4]
10008b92:	6863      	ldr	r3, [r4, #4]
10008b94:	7818      	ldrb	r0, [r3, #0]
10008b96:	002b      	movs	r3, r5
10008b98:	47b8      	blx	r7
10008b9a:	2800      	cmp	r0, #0
10008b9c:	d147      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008b9e:	4b28      	ldr	r3, [pc, #160]	; (10008c40 <mpu_set_bypass+0xe8>)
10008ba0:	3003      	adds	r0, #3
10008ba2:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008ba4:	2302      	movs	r3, #2
10008ba6:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008ba8:	3320      	adds	r3, #32
10008baa:	5ce3      	ldrb	r3, [r4, r3]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d137      	bne.n	10008c20 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008bb0:	2323      	movs	r3, #35	; 0x23
10008bb2:	5ce3      	ldrb	r3, [r4, r3]
10008bb4:	2b00      	cmp	r3, #0
10008bb6:	d003      	beq.n	10008bc0 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bb8:	2330      	movs	r3, #48	; 0x30
10008bba:	782a      	ldrb	r2, [r5, #0]
10008bbc:	4313      	orrs	r3, r2
10008bbe:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bc0:	6823      	ldr	r3, [r4, #0]
10008bc2:	2201      	movs	r2, #1
10008bc4:	7dd9      	ldrb	r1, [r3, #23]
10008bc6:	6863      	ldr	r3, [r4, #4]
10008bc8:	7818      	ldrb	r0, [r3, #0]
10008bca:	002b      	movs	r3, r5
10008bcc:	47b8      	blx	r7
10008bce:	2800      	cmp	r0, #0
10008bd0:	d12d      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
10008bd2:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008bd4:	74a6      	strb	r6, [r4, #18]
    return 0;
}
10008bd6:	b003      	add	sp, #12
10008bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bda:	47b8      	blx	r7
10008bdc:	2800      	cmp	r0, #0
10008bde:	d126      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008be0:	7aa3      	ldrb	r3, [r4, #10]
10008be2:	07db      	lsls	r3, r3, #31
10008be4:	d417      	bmi.n	10008c16 <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
10008be6:	2220      	movs	r2, #32
10008be8:	782b      	ldrb	r3, [r5, #0]
10008bea:	4393      	bics	r3, r2
10008bec:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bee:	6823      	ldr	r3, [r4, #0]
10008bf0:	2201      	movs	r2, #1
10008bf2:	7919      	ldrb	r1, [r3, #4]
10008bf4:	6863      	ldr	r3, [r4, #4]
10008bf6:	4f11      	ldr	r7, [pc, #68]	; (10008c3c <mpu_set_bypass+0xe4>)
10008bf8:	7818      	ldrb	r0, [r3, #0]
10008bfa:	002b      	movs	r3, r5
10008bfc:	47b8      	blx	r7
10008bfe:	2800      	cmp	r0, #0
10008c00:	d115      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008c02:	4b0f      	ldr	r3, [pc, #60]	; (10008c40 <mpu_set_bypass+0xe8>)
10008c04:	3003      	adds	r0, #3
10008c06:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008c08:	2322      	movs	r3, #34	; 0x22
10008c0a:	5ce3      	ldrb	r3, [r4, r3]
10008c0c:	2b00      	cmp	r3, #0
10008c0e:	d00c      	beq.n	10008c2a <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
10008c10:	2380      	movs	r3, #128	; 0x80
10008c12:	702b      	strb	r3, [r5, #0]
10008c14:	e7cc      	b.n	10008bb0 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
10008c16:	2320      	movs	r3, #32
10008c18:	782a      	ldrb	r2, [r5, #0]
10008c1a:	4313      	orrs	r3, r2
10008c1c:	702b      	strb	r3, [r5, #0]
10008c1e:	e7e6      	b.n	10008bee <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008c20:	2382      	movs	r3, #130	; 0x82
10008c22:	702b      	strb	r3, [r5, #0]
10008c24:	e7c4      	b.n	10008bb0 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008c26:	2000      	movs	r0, #0
10008c28:	e7d5      	b.n	10008bd6 <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
10008c2a:	702b      	strb	r3, [r5, #0]
10008c2c:	e7c0      	b.n	10008bb0 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008c2e:	2001      	movs	r0, #1
10008c30:	4240      	negs	r0, r0
10008c32:	e7d0      	b.n	10008bd6 <mpu_set_bypass+0x7e>
10008c34:	1001384c 	.word	0x1001384c
10008c38:	10008359 	.word	0x10008359
10008c3c:	10008301 	.word	0x10008301
10008c40:	1000810d 	.word	0x1000810d

10008c44 <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c44:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c46:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c48:	4c17      	ldr	r4, [pc, #92]	; (10008ca8 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c4c:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4e:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c50:	4283      	cmp	r3, r0
10008c52:	d024      	beq.n	10008c9e <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c54:	466b      	mov	r3, sp
10008c56:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
10008c58:	2800      	cmp	r0, #0
10008c5a:	d11d      	bne.n	10008c98 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
10008c5c:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10008c5e:	7ca2      	ldrb	r2, [r4, #18]
10008c60:	2a00      	cmp	r2, #0
10008c62:	d003      	beq.n	10008c6c <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
10008c64:	2202      	movs	r2, #2
10008c66:	7819      	ldrb	r1, [r3, #0]
10008c68:	430a      	orrs	r2, r1
10008c6a:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
10008c6c:	2222      	movs	r2, #34	; 0x22
10008c6e:	5ca2      	ldrb	r2, [r4, r2]
10008c70:	2a00      	cmp	r2, #0
10008c72:	d004      	beq.n	10008c7e <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
10008c74:	2180      	movs	r1, #128	; 0x80
10008c76:	781a      	ldrb	r2, [r3, #0]
10008c78:	4249      	negs	r1, r1
10008c7a:	430a      	orrs	r2, r1
10008c7c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c7e:	6822      	ldr	r2, [r4, #0]
10008c80:	4e0a      	ldr	r6, [pc, #40]	; (10008cac <mpu_set_int_latched+0x68>)
10008c82:	7dd1      	ldrb	r1, [r2, #23]
10008c84:	6862      	ldr	r2, [r4, #4]
10008c86:	7810      	ldrb	r0, [r2, #0]
10008c88:	2201      	movs	r2, #1
10008c8a:	47b0      	blx	r6
10008c8c:	2800      	cmp	r0, #0
10008c8e:	d108      	bne.n	10008ca2 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c90:	2323      	movs	r3, #35	; 0x23
10008c92:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008c94:	b002      	add	sp, #8
10008c96:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c98:	2230      	movs	r2, #48	; 0x30
10008c9a:	701a      	strb	r2, [r3, #0]
10008c9c:	e7df      	b.n	10008c5e <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c9e:	2000      	movs	r0, #0
10008ca0:	e7f8      	b.n	10008c94 <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ca2:	2001      	movs	r0, #1
10008ca4:	4240      	negs	r0, r0
10008ca6:	e7f5      	b.n	10008c94 <mpu_set_int_latched+0x50>
10008ca8:	1001384c 	.word	0x1001384c
10008cac:	10008301 	.word	0x10008301

10008cb0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cb2:	0004      	movs	r4, r0
10008cb4:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
10008cb6:	2828      	cmp	r0, #40	; 0x28
10008cb8:	d85a      	bhi.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10008cba:	2800      	cmp	r0, #0
10008cbc:	d114      	bne.n	10008ce8 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10008cbe:	4b36      	ldr	r3, [pc, #216]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cc0:	2000      	movs	r0, #0
10008cc2:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008cc4:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
10008cc6:	ab01      	add	r3, sp, #4
10008cc8:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cca:	4c34      	ldr	r4, [pc, #208]	; (10008d9c <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008ccc:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cce:	6822      	ldr	r2, [r4, #0]
10008cd0:	4d33      	ldr	r5, [pc, #204]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008cd2:	7d51      	ldrb	r1, [r2, #21]
10008cd4:	6862      	ldr	r2, [r4, #4]
10008cd6:	7810      	ldrb	r0, [r2, #0]
10008cd8:	2202      	movs	r2, #2
10008cda:	47a8      	blx	r5
10008cdc:	1e05      	subs	r5, r0, #0
10008cde:	d147      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008ce0:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008ce2:	0028      	movs	r0, r5
10008ce4:	b003      	add	sp, #12
10008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ce8:	2001      	movs	r0, #1
10008cea:	4b2b      	ldr	r3, [pc, #172]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cec:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008cee:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cf0:	2c01      	cmp	r4, #1
10008cf2:	d043      	beq.n	10008d7c <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
10008cf4:	2c02      	cmp	r4, #2
10008cf6:	d044      	beq.n	10008d82 <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10008cf8:	2c05      	cmp	r4, #5
10008cfa:	d93c      	bls.n	10008d76 <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10008cfc:	2c0a      	cmp	r4, #10
10008cfe:	d843      	bhi.n	10008d88 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10008d00:	2305      	movs	r3, #5
10008d02:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008d04:	4c25      	ldr	r4, [pc, #148]	; (10008d9c <mpu_lp_accel_mode+0xec>)
10008d06:	2201      	movs	r2, #1
10008d08:	6823      	ldr	r3, [r4, #0]
10008d0a:	4e25      	ldr	r6, [pc, #148]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008d0c:	7a59      	ldrb	r1, [r3, #9]
10008d0e:	6863      	ldr	r3, [r4, #4]
10008d10:	7818      	ldrb	r0, [r3, #0]
10008d12:	002b      	movs	r3, r5
10008d14:	47b0      	blx	r6
10008d16:	2800      	cmp	r0, #0
10008d18:	d12a      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d1a:	6823      	ldr	r3, [r4, #0]
10008d1c:	2201      	movs	r2, #1
10008d1e:	7a19      	ldrb	r1, [r3, #8]
10008d20:	6863      	ldr	r3, [r4, #4]
10008d22:	4f20      	ldr	r7, [pc, #128]	; (10008da4 <mpu_lp_accel_mode+0xf4>)
10008d24:	7818      	ldrb	r0, [r3, #0]
10008d26:	002b      	movs	r3, r5
10008d28:	47b8      	blx	r7
10008d2a:	2800      	cmp	r0, #0
10008d2c:	d120      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d2e:	2308      	movs	r3, #8
10008d30:	782a      	ldrb	r2, [r5, #0]
10008d32:	4313      	orrs	r3, r2
10008d34:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d36:	6823      	ldr	r3, [r4, #0]
10008d38:	2201      	movs	r2, #1
10008d3a:	7a19      	ldrb	r1, [r3, #8]
10008d3c:	6863      	ldr	r3, [r4, #4]
10008d3e:	7818      	ldrb	r0, [r3, #0]
10008d40:	002b      	movs	r3, r5
10008d42:	47b0      	blx	r6
10008d44:	2800      	cmp	r0, #0
10008d46:	d113      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d48:	2320      	movs	r3, #32
10008d4a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d4c:	6823      	ldr	r3, [r4, #0]
10008d4e:	2201      	movs	r2, #1
10008d50:	7d59      	ldrb	r1, [r3, #21]
10008d52:	6863      	ldr	r3, [r4, #4]
10008d54:	7818      	ldrb	r0, [r3, #0]
10008d56:	002b      	movs	r3, r5
10008d58:	47b0      	blx	r6
10008d5a:	1e05      	subs	r5, r0, #0
10008d5c:	d108      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d5e:	2308      	movs	r3, #8
10008d60:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
10008d62:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
10008d64:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d66:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
10008d68:	2000      	movs	r0, #0
10008d6a:	4b0f      	ldr	r3, [pc, #60]	; (10008da8 <mpu_lp_accel_mode+0xf8>)
10008d6c:	4798      	blx	r3
10008d6e:	e7b8      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d70:	2501      	movs	r5, #1
10008d72:	426d      	negs	r5, r5
10008d74:	e7b5      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
10008d76:	2304      	movs	r3, #4
10008d78:	702b      	strb	r3, [r5, #0]
10008d7a:	e7c3      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008d7c:	2302      	movs	r3, #2
10008d7e:	702b      	strb	r3, [r5, #0]
10008d80:	e7c0      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
10008d82:	2303      	movs	r3, #3
10008d84:	702b      	strb	r3, [r5, #0]
10008d86:	e7bd      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
10008d88:	2c14      	cmp	r4, #20
10008d8a:	d802      	bhi.n	10008d92 <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
10008d8c:	2306      	movs	r3, #6
10008d8e:	702b      	strb	r3, [r5, #0]
10008d90:	e7b8      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008d92:	2307      	movs	r3, #7
10008d94:	702b      	strb	r3, [r5, #0]
10008d96:	e7b5      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
10008d98:	10008c45 	.word	0x10008c45
10008d9c:	1001384c 	.word	0x1001384c
10008da0:	10008301 	.word	0x10008301
10008da4:	10008359 	.word	0x10008359
10008da8:	1000892d 	.word	0x1000892d

10008dac <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008dac:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008dae:	4c2c      	ldr	r4, [pc, #176]	; (10008e60 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db0:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db2:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db4:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db6:	2b00      	cmp	r3, #0
10008db8:	d04e      	beq.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10008dba:	2324      	movs	r3, #36	; 0x24
10008dbc:	5ce3      	ldrb	r3, [r4, r3]
10008dbe:	2b00      	cmp	r3, #0
10008dc0:	d14a      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dc2:	7d23      	ldrb	r3, [r4, #20]
10008dc4:	2b00      	cmp	r3, #0
10008dc6:	d005      	beq.n	10008dd4 <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10008dc8:	1e43      	subs	r3, r0, #1
10008dca:	2b27      	cmp	r3, #39	; 0x27
10008dcc:	d940      	bls.n	10008e50 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008dce:	2000      	movs	r0, #0
10008dd0:	4b24      	ldr	r3, [pc, #144]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008dd2:	4798      	blx	r3
10008dd4:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
10008dd6:	2d03      	cmp	r5, #3
10008dd8:	d822      	bhi.n	10008e20 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008dda:	466b      	mov	r3, sp
10008ddc:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dde:	6823      	ldr	r3, [r4, #0]
10008de0:	4d21      	ldr	r5, [pc, #132]	; (10008e68 <mpu_set_sample_rate+0xbc>)
10008de2:	7859      	ldrb	r1, [r3, #1]
10008de4:	6863      	ldr	r3, [r4, #4]
10008de6:	2201      	movs	r2, #1
10008de8:	7818      	ldrb	r0, [r3, #0]
10008dea:	466b      	mov	r3, sp
10008dec:	3307      	adds	r3, #7
10008dee:	47a8      	blx	r5
10008df0:	1e05      	subs	r5, r0, #0
10008df2:	d131      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008df4:	466b      	mov	r3, sp
10008df6:	20fa      	movs	r0, #250	; 0xfa
10008df8:	79d9      	ldrb	r1, [r3, #7]
10008dfa:	0080      	lsls	r0, r0, #2
10008dfc:	4b1b      	ldr	r3, [pc, #108]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008dfe:	3101      	adds	r1, #1
10008e00:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e02:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e04:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e06:	1c18      	adds	r0, r3, #0
10008e08:	2b64      	cmp	r3, #100	; 0x64
10008e0a:	d816      	bhi.n	10008e3a <mpu_set_sample_rate+0x8e>
10008e0c:	4b18      	ldr	r3, [pc, #96]	; (10008e70 <mpu_set_sample_rate+0xc4>)
10008e0e:	b280      	uxth	r0, r0
10008e10:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e12:	89e0      	ldrh	r0, [r4, #14]
10008e14:	4b17      	ldr	r3, [pc, #92]	; (10008e74 <mpu_set_sample_rate+0xc8>)
10008e16:	0840      	lsrs	r0, r0, #1
10008e18:	4798      	blx	r3
        return 0;
    }
}
10008e1a:	0028      	movs	r0, r5
10008e1c:	b003      	add	sp, #12
10008e1e:	bd30      	pop	{r4, r5, pc}
10008e20:	23fa      	movs	r3, #250	; 0xfa
10008e22:	1c29      	adds	r1, r5, #0
10008e24:	009b      	lsls	r3, r3, #2
10008e26:	429d      	cmp	r5, r3
10008e28:	d809      	bhi.n	10008e3e <mpu_set_sample_rate+0x92>
10008e2a:	20fa      	movs	r0, #250	; 0xfa
10008e2c:	b289      	uxth	r1, r1
10008e2e:	0080      	lsls	r0, r0, #2
10008e30:	4b0e      	ldr	r3, [pc, #56]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e32:	4798      	blx	r3
10008e34:	3801      	subs	r0, #1
10008e36:	b2c0      	uxtb	r0, r0
10008e38:	e7cf      	b.n	10008dda <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e3a:	2064      	movs	r0, #100	; 0x64
10008e3c:	e7e6      	b.n	10008e0c <mpu_set_sample_rate+0x60>
10008e3e:	20fa      	movs	r0, #250	; 0xfa
10008e40:	1c19      	adds	r1, r3, #0
10008e42:	b289      	uxth	r1, r1
10008e44:	0080      	lsls	r0, r0, #2
10008e46:	4b09      	ldr	r3, [pc, #36]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e48:	4798      	blx	r3
10008e4a:	3801      	subs	r0, #1
10008e4c:	b2c0      	uxtb	r0, r0
10008e4e:	e7c4      	b.n	10008dda <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008e50:	4b04      	ldr	r3, [pc, #16]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008e52:	4798      	blx	r3
                return 0;
10008e54:	2500      	movs	r5, #0
10008e56:	e7e0      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e58:	2501      	movs	r5, #1
10008e5a:	426d      	negs	r5, r5
10008e5c:	e7dd      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
10008e5e:	46c0      	nop			; (mov r8, r8)
10008e60:	1001384c 	.word	0x1001384c
10008e64:	10008cb1 	.word	0x10008cb1
10008e68:	10008301 	.word	0x10008301
10008e6c:	1000f5e1 	.word	0x1000f5e1
10008e70:	100088c9 	.word	0x100088c9
10008e74:	10008819 	.word	0x10008819

10008e78 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e7a:	464e      	mov	r6, r9
10008e7c:	4657      	mov	r7, sl
10008e7e:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e80:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e82:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e84:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e86:	b082      	sub	sp, #8
10008e88:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e8a:	2b00      	cmp	r3, #0
10008e8c:	d100      	bne.n	10008e90 <mpu_set_sensors+0x18>
10008e8e:	e095      	b.n	10008fbc <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
10008e90:	466b      	mov	r3, sp
10008e92:	1d9d      	adds	r5, r3, #6
10008e94:	2301      	movs	r3, #1
10008e96:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e98:	4c5f      	ldr	r4, [pc, #380]	; (10009018 <mpu_set_sensors+0x1a0>)
10008e9a:	4f60      	ldr	r7, [pc, #384]	; (1000901c <mpu_set_sensors+0x1a4>)
10008e9c:	6823      	ldr	r3, [r4, #0]
10008e9e:	2201      	movs	r2, #1
10008ea0:	7d59      	ldrb	r1, [r3, #21]
10008ea2:	6863      	ldr	r3, [r4, #4]
10008ea4:	46b8      	mov	r8, r7
10008ea6:	7818      	ldrb	r0, [r3, #0]
10008ea8:	002b      	movs	r3, r5
10008eaa:	47b8      	blx	r7
10008eac:	2800      	cmp	r0, #0
10008eae:	d000      	beq.n	10008eb2 <mpu_set_sensors+0x3a>
10008eb0:	e0ad      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb2:	2240      	movs	r2, #64	; 0x40
10008eb4:	782b      	ldrb	r3, [r5, #0]

    data = 0;
10008eb6:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb8:	4393      	bics	r3, r2
10008eba:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10008ebc:	4232      	tst	r2, r6
10008ebe:	d100      	bne.n	10008ec2 <mpu_set_sensors+0x4a>
10008ec0:	e093      	b.n	10008fea <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
10008ec2:	06b3      	lsls	r3, r6, #26
10008ec4:	d403      	bmi.n	10008ece <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
10008ec6:	2302      	movs	r3, #2
10008ec8:	782a      	ldrb	r2, [r5, #0]
10008eca:	4313      	orrs	r3, r2
10008ecc:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10008ece:	06f3      	lsls	r3, r6, #27
10008ed0:	d403      	bmi.n	10008eda <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
10008ed2:	2301      	movs	r3, #1
10008ed4:	782a      	ldrb	r2, [r5, #0]
10008ed6:	4313      	orrs	r3, r2
10008ed8:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008eda:	0733      	lsls	r3, r6, #28
10008edc:	d400      	bmi.n	10008ee0 <mpu_set_sensors+0x68>
10008ede:	e08a      	b.n	10008ff6 <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008ee0:	6823      	ldr	r3, [r4, #0]
10008ee2:	2201      	movs	r2, #1
10008ee4:	7d99      	ldrb	r1, [r3, #22]
10008ee6:	6863      	ldr	r3, [r4, #4]
10008ee8:	7818      	ldrb	r0, [r3, #0]
10008eea:	002b      	movs	r3, r5
10008eec:	47c0      	blx	r8
10008eee:	2800      	cmp	r0, #0
10008ef0:	d000      	beq.n	10008ef4 <mpu_set_sensors+0x7c>
10008ef2:	e08c      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008ef4:	2308      	movs	r3, #8
10008ef6:	0032      	movs	r2, r6
10008ef8:	439a      	bics	r2, r3
10008efa:	d041      	beq.n	10008f80 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008efc:	4b48      	ldr	r3, [pc, #288]	; (10009020 <mpu_set_sensors+0x1a8>)
10008efe:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f00:	466b      	mov	r3, sp
10008f02:	3307      	adds	r3, #7
10008f04:	469a      	mov	sl, r3
10008f06:	6823      	ldr	r3, [r4, #0]
10008f08:	2201      	movs	r2, #1
10008f0a:	7919      	ldrb	r1, [r3, #4]
10008f0c:	6863      	ldr	r3, [r4, #4]
10008f0e:	4f45      	ldr	r7, [pc, #276]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f10:	7818      	ldrb	r0, [r3, #0]
10008f12:	4653      	mov	r3, sl
10008f14:	47b8      	blx	r7
10008f16:	2800      	cmp	r0, #0
10008f18:	d000      	beq.n	10008f1c <mpu_set_sensors+0xa4>
10008f1a:	e075      	b.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f1c:	07f3      	lsls	r3, r6, #31
10008f1e:	d53c      	bpl.n	10008f9a <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10008f20:	2311      	movs	r3, #17
10008f22:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
10008f24:	4653      	mov	r3, sl
10008f26:	781a      	ldrb	r2, [r3, #0]
10008f28:	2320      	movs	r3, #32
10008f2a:	4313      	orrs	r3, r2
10008f2c:	4652      	mov	r2, sl
10008f2e:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10008f30:	2224      	movs	r2, #36	; 0x24
10008f32:	5ca2      	ldrb	r2, [r4, r2]
10008f34:	2a00      	cmp	r2, #0
10008f36:	d03c      	beq.n	10008fb2 <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10008f38:	2280      	movs	r2, #128	; 0x80
10008f3a:	4252      	negs	r2, r2
10008f3c:	4313      	orrs	r3, r2
10008f3e:	4652      	mov	r2, sl
10008f40:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f42:	2326      	movs	r3, #38	; 0x26
10008f44:	6822      	ldr	r2, [r4, #0]
10008f46:	5cd1      	ldrb	r1, [r2, r3]
10008f48:	6863      	ldr	r3, [r4, #4]
10008f4a:	2201      	movs	r2, #1
10008f4c:	7818      	ldrb	r0, [r3, #0]
10008f4e:	002b      	movs	r3, r5
10008f50:	47c0      	blx	r8
10008f52:	2800      	cmp	r0, #0
10008f54:	d158      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f56:	6823      	ldr	r3, [r4, #0]
10008f58:	2201      	movs	r2, #1
10008f5a:	7919      	ldrb	r1, [r3, #4]
10008f5c:	6863      	ldr	r3, [r4, #4]
10008f5e:	7818      	ldrb	r0, [r3, #0]
10008f60:	4653      	mov	r3, sl
10008f62:	47c0      	blx	r8
10008f64:	1e05      	subs	r5, r0, #0
10008f66:	d14f      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
10008f68:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
10008f6a:	4b2f      	ldr	r3, [pc, #188]	; (10009028 <mpu_set_sensors+0x1b0>)
10008f6c:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f6e:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
10008f70:	4798      	blx	r3
    return 0;
}
10008f72:	0028      	movs	r0, r5
10008f74:	b002      	add	sp, #8
10008f76:	bc1c      	pop	{r2, r3, r4}
10008f78:	4690      	mov	r8, r2
10008f7a:	4699      	mov	r9, r3
10008f7c:	46a2      	mov	sl, r4
10008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f80:	466b      	mov	r3, sp
10008f82:	3307      	adds	r3, #7
10008f84:	469a      	mov	sl, r3
10008f86:	6823      	ldr	r3, [r4, #0]
10008f88:	2201      	movs	r2, #1
10008f8a:	7919      	ldrb	r1, [r3, #4]
10008f8c:	6863      	ldr	r3, [r4, #4]
10008f8e:	4f25      	ldr	r7, [pc, #148]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f90:	7818      	ldrb	r0, [r3, #0]
10008f92:	4653      	mov	r3, sl
10008f94:	47b8      	blx	r7
10008f96:	2800      	cmp	r0, #0
10008f98:	d136      	bne.n	10009008 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
10008f9a:	2310      	movs	r3, #16
10008f9c:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f9e:	4653      	mov	r3, sl
10008fa0:	2220      	movs	r2, #32
10008fa2:	781b      	ldrb	r3, [r3, #0]
10008fa4:	4393      	bics	r3, r2
10008fa6:	4652      	mov	r2, sl
10008fa8:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008faa:	2224      	movs	r2, #36	; 0x24
10008fac:	5ca2      	ldrb	r2, [r4, r2]
10008fae:	2a00      	cmp	r2, #0
10008fb0:	d1c2      	bne.n	10008f38 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fb2:	227f      	movs	r2, #127	; 0x7f
10008fb4:	4013      	ands	r3, r2
10008fb6:	4652      	mov	r2, sl
10008fb8:	7013      	strb	r3, [r2, #0]
10008fba:	e7c2      	b.n	10008f42 <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10008fbc:	2800      	cmp	r0, #0
10008fbe:	d11f      	bne.n	10009000 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10008fc0:	466b      	mov	r3, sp
10008fc2:	1d9d      	adds	r5, r3, #6
10008fc4:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fc6:	4c14      	ldr	r4, [pc, #80]	; (10009018 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10008fc8:	702b      	strb	r3, [r5, #0]
10008fca:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fcc:	6823      	ldr	r3, [r4, #0]
10008fce:	4f13      	ldr	r7, [pc, #76]	; (1000901c <mpu_set_sensors+0x1a4>)
10008fd0:	7d59      	ldrb	r1, [r3, #21]
10008fd2:	6863      	ldr	r3, [r4, #4]
10008fd4:	2201      	movs	r2, #1
10008fd6:	7818      	ldrb	r0, [r3, #0]
10008fd8:	002b      	movs	r3, r5
10008fda:	46b8      	mov	r8, r7
10008fdc:	47b8      	blx	r7
10008fde:	2800      	cmp	r0, #0
10008fe0:	d115      	bne.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fe2:	464a      	mov	r2, r9
10008fe4:	782b      	ldrb	r3, [r5, #0]
10008fe6:	4393      	bics	r3, r2
10008fe8:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10008fea:	2304      	movs	r3, #4
10008fec:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10008fee:	06b3      	lsls	r3, r6, #26
10008ff0:	d500      	bpl.n	10008ff4 <mpu_set_sensors+0x17c>
10008ff2:	e76c      	b.n	10008ece <mpu_set_sensors+0x56>
10008ff4:	e767      	b.n	10008ec6 <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
10008ff6:	2338      	movs	r3, #56	; 0x38
10008ff8:	782a      	ldrb	r2, [r5, #0]
10008ffa:	4313      	orrs	r3, r2
10008ffc:	702b      	strb	r3, [r5, #0]
10008ffe:	e76f      	b.n	10008ee0 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10009000:	466a      	mov	r2, sp
10009002:	1d95      	adds	r5, r2, #6
10009004:	702b      	strb	r3, [r5, #0]
10009006:	e747      	b.n	10008e98 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009008:	2501      	movs	r5, #1
1000900a:	426d      	negs	r5, r5
1000900c:	e7b1      	b.n	10008f72 <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
1000900e:	2300      	movs	r3, #0
        return -1;
10009010:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10009012:	72a3      	strb	r3, [r4, #10]
        return -1;
10009014:	426d      	negs	r5, r5
10009016:	e7ac      	b.n	10008f72 <mpu_set_sensors+0xfa>
10009018:	1001384c 	.word	0x1001384c
1000901c:	10008301 	.word	0x10008301
10009020:	10008c45 	.word	0x10008c45
10009024:	10008359 	.word	0x10008359
10009028:	1000810d 	.word	0x1000810d

1000902c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000902c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000902e:	464d      	mov	r5, r9
10009030:	465f      	mov	r7, fp
10009032:	4656      	mov	r6, sl
10009034:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009036:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009038:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000903a:	4ca1      	ldr	r4, [pc, #644]	; (100092c0 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000903c:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1000903e:	ad02      	add	r5, sp, #8
10009040:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009042:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009044:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009046:	7d59      	ldrb	r1, [r3, #21]
10009048:	6863      	ldr	r3, [r4, #4]
1000904a:	2201      	movs	r2, #1
1000904c:	7818      	ldrb	r0, [r3, #0]
1000904e:	4f9d      	ldr	r7, [pc, #628]	; (100092c4 <mpu_init+0x298>)
10009050:	002b      	movs	r3, r5
10009052:	47b8      	blx	r7
10009054:	4681      	mov	r9, r0
10009056:	2800      	cmp	r0, #0
10009058:	d17c      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    delay_ms(100);
1000905a:	4b9b      	ldr	r3, [pc, #620]	; (100092c8 <mpu_init+0x29c>)
1000905c:	2064      	movs	r0, #100	; 0x64
1000905e:	4698      	mov	r8, r3
10009060:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009062:	464b      	mov	r3, r9
10009064:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009066:	6823      	ldr	r3, [r4, #0]
10009068:	2201      	movs	r2, #1
1000906a:	7d59      	ldrb	r1, [r3, #21]
1000906c:	6863      	ldr	r3, [r4, #4]
1000906e:	7818      	ldrb	r0, [r3, #0]
10009070:	002b      	movs	r3, r5
10009072:	47b8      	blx	r7
10009074:	2800      	cmp	r0, #0
10009076:	d16d      	bne.n	10009154 <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009078:	2340      	movs	r3, #64	; 0x40
1000907a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000907c:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
1000907e:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009080:	7a19      	ldrb	r1, [r3, #8]
10009082:	6863      	ldr	r3, [r4, #4]
10009084:	2201      	movs	r2, #1
10009086:	7818      	ldrb	r0, [r3, #0]
10009088:	002b      	movs	r3, r5
1000908a:	47b8      	blx	r7
1000908c:	1e05      	subs	r5, r0, #0
1000908e:	d161      	bne.n	10009154 <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009090:	23ff      	movs	r3, #255	; 0xff
10009092:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009094:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009096:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009098:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
1000909a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000909c:	3bfe      	subs	r3, #254	; 0xfe
1000909e:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090a0:	3321      	adds	r3, #33	; 0x21
100090a2:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090a4:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
100090a6:	3301      	adds	r3, #1
100090a8:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090aa:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090ac:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090ae:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090b0:	4252      	negs	r2, r2
100090b2:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090b4:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090b6:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090b8:	4b84      	ldr	r3, [pc, #528]	; (100092cc <mpu_init+0x2a0>)
100090ba:	3016      	adds	r0, #22
100090bc:	320d      	adds	r2, #13
100090be:	2100      	movs	r1, #0
100090c0:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090c2:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090c4:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
100090c6:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090c8:	3301      	adds	r3, #1
100090ca:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090cc:	00c0      	lsls	r0, r0, #3
100090ce:	4b80      	ldr	r3, [pc, #512]	; (100092d0 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
100090d0:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100090d2:	4798      	blx	r3
100090d4:	2800      	cmp	r0, #0
100090d6:	d13d      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
100090d8:	3002      	adds	r0, #2
100090da:	4b7e      	ldr	r3, [pc, #504]	; (100092d4 <mpu_init+0x2a8>)
100090dc:	4798      	blx	r3
100090de:	2800      	cmp	r0, #0
100090e0:	d138      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
100090e2:	302a      	adds	r0, #42	; 0x2a
100090e4:	4b7c      	ldr	r3, [pc, #496]	; (100092d8 <mpu_init+0x2ac>)
100090e6:	4798      	blx	r3
100090e8:	2800      	cmp	r0, #0
100090ea:	d133      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
100090ec:	3032      	adds	r0, #50	; 0x32
100090ee:	4b7b      	ldr	r3, [pc, #492]	; (100092dc <mpu_init+0x2b0>)
100090f0:	4798      	blx	r3
100090f2:	2800      	cmp	r0, #0
100090f4:	d12e      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
100090f6:	4b7a      	ldr	r3, [pc, #488]	; (100092e0 <mpu_init+0x2b4>)
100090f8:	4798      	blx	r3
100090fa:	2800      	cmp	r0, #0
100090fc:	d12a      	bne.n	10009154 <mpu_init+0x128>
        return -1;

    if (int_param)
100090fe:	2e00      	cmp	r6, #0
10009100:	d004      	beq.n	1000910c <mpu_init+0xe0>
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
10009102:	6871      	ldr	r1, [r6, #4]
10009104:	7830      	ldrb	r0, [r6, #0]
10009106:	2202      	movs	r2, #2
10009108:	4b76      	ldr	r3, [pc, #472]	; (100092e4 <mpu_init+0x2b8>)
1000910a:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000910c:	4b76      	ldr	r3, [pc, #472]	; (100092e8 <mpu_init+0x2bc>)
1000910e:	2001      	movs	r0, #1
10009110:	469b      	mov	fp, r3
10009112:	4798      	blx	r3
10009114:	4b75      	ldr	r3, [pc, #468]	; (100092ec <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009116:	250c      	movs	r5, #12
10009118:	4699      	mov	r9, r3
1000911a:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1000911c:	0033      	movs	r3, r6
1000911e:	2201      	movs	r2, #1
10009120:	2100      	movs	r1, #0
10009122:	0028      	movs	r0, r5
10009124:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
10009126:	2800      	cmp	r0, #0
10009128:	d102      	bne.n	10009130 <mpu_init+0x104>
1000912a:	7833      	ldrb	r3, [r6, #0]
1000912c:	2b48      	cmp	r3, #72	; 0x48
1000912e:	d01b      	beq.n	10009168 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009130:	3501      	adds	r5, #1
10009132:	b2ed      	uxtb	r5, r5
10009134:	2d10      	cmp	r5, #16
10009136:	d1f1      	bne.n	1000911c <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009138:	486d      	ldr	r0, [pc, #436]	; (100092f0 <mpu_init+0x2c4>)
1000913a:	4c6e      	ldr	r4, [pc, #440]	; (100092f4 <mpu_init+0x2c8>)
1000913c:	47a0      	blx	r4
1000913e:	486e      	ldr	r0, [pc, #440]	; (100092f8 <mpu_init+0x2cc>)
10009140:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009142:	200a      	movs	r0, #10
10009144:	4b6d      	ldr	r3, [pc, #436]	; (100092fc <mpu_init+0x2d0>)
10009146:	4798      	blx	r3
10009148:	1e04      	subs	r4, r0, #0
1000914a:	d103      	bne.n	10009154 <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000914c:	4b6c      	ldr	r3, [pc, #432]	; (10009300 <mpu_init+0x2d4>)
1000914e:	2000      	movs	r0, #0
10009150:	4798      	blx	r3
    return 0;
10009152:	e001      	b.n	10009158 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009154:	2401      	movs	r4, #1
10009156:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009158:	0020      	movs	r0, r4
1000915a:	b005      	add	sp, #20
1000915c:	bc3c      	pop	{r2, r3, r4, r5}
1000915e:	4690      	mov	r8, r2
10009160:	4699      	mov	r9, r3
10009162:	46a2      	mov	sl, r4
10009164:	46ab      	mov	fp, r5
10009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009168:	232a      	movs	r3, #42	; 0x2a
1000916a:	469a      	mov	sl, r3
1000916c:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
1000916e:	3b1a      	subs	r3, #26
10009170:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009172:	2201      	movs	r2, #1
10009174:	0033      	movs	r3, r6
10009176:	210a      	movs	r1, #10
10009178:	0028      	movs	r0, r5
1000917a:	47b8      	blx	r7
1000917c:	2800      	cmp	r0, #0
1000917e:	d1e0      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009180:	2001      	movs	r0, #1
10009182:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
10009184:	231f      	movs	r3, #31
10009186:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009188:	4653      	mov	r3, sl
1000918a:	2201      	movs	r2, #1
1000918c:	5ce0      	ldrb	r0, [r4, r3]
1000918e:	210a      	movs	r1, #10
10009190:	0033      	movs	r3, r6
10009192:	47b8      	blx	r7
10009194:	2800      	cmp	r0, #0
10009196:	d1d4      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009198:	3001      	adds	r0, #1
1000919a:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000919c:	4653      	mov	r3, sl
1000919e:	2203      	movs	r2, #3
100091a0:	5ce0      	ldrb	r0, [r4, r3]
100091a2:	2110      	movs	r1, #16
100091a4:	0033      	movs	r3, r6
100091a6:	47c8      	blx	r9
100091a8:	2800      	cmp	r0, #0
100091aa:	d1ca      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091ac:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091ae:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091b0:	3380      	adds	r3, #128	; 0x80
100091b2:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b4:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091b6:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b8:	3380      	adds	r3, #128	; 0x80
100091ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091bc:	78b3      	ldrb	r3, [r6, #2]
100091be:	3380      	adds	r3, #128	; 0x80
100091c0:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091c2:	2310      	movs	r3, #16
100091c4:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091c6:	4653      	mov	r3, sl
100091c8:	5ce0      	ldrb	r0, [r4, r3]
100091ca:	0033      	movs	r3, r6
100091cc:	47b8      	blx	r7
100091ce:	2800      	cmp	r0, #0
100091d0:	d1b7      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
100091d2:	3001      	adds	r0, #1
100091d4:	47c0      	blx	r8

    mpu_set_bypass(0);
100091d6:	2000      	movs	r0, #0
100091d8:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091da:	2340      	movs	r3, #64	; 0x40
100091dc:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091de:	6823      	ldr	r3, [r4, #0]
100091e0:	2201      	movs	r2, #1
100091e2:	7e99      	ldrb	r1, [r3, #26]
100091e4:	6863      	ldr	r3, [r4, #4]
100091e6:	7818      	ldrb	r0, [r3, #0]
100091e8:	0033      	movs	r3, r6
100091ea:	47b8      	blx	r7
100091ec:	2800      	cmp	r0, #0
100091ee:	d1a8      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091f0:	4653      	mov	r3, sl
100091f2:	2280      	movs	r2, #128	; 0x80
100091f4:	5ce3      	ldrb	r3, [r4, r3]
100091f6:	4252      	negs	r2, r2
100091f8:	4313      	orrs	r3, r2
100091fa:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091fc:	6823      	ldr	r3, [r4, #0]
100091fe:	3281      	adds	r2, #129	; 0x81
10009200:	7f99      	ldrb	r1, [r3, #30]
10009202:	6863      	ldr	r3, [r4, #4]
10009204:	7818      	ldrb	r0, [r3, #0]
10009206:	0033      	movs	r3, r6
10009208:	47b8      	blx	r7
1000920a:	2800      	cmp	r0, #0
1000920c:	d199      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1000920e:	2302      	movs	r3, #2
10009210:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009212:	6823      	ldr	r3, [r4, #0]
10009214:	2201      	movs	r2, #1
10009216:	7fd9      	ldrb	r1, [r3, #31]
10009218:	6863      	ldr	r3, [r4, #4]
1000921a:	7818      	ldrb	r0, [r3, #0]
1000921c:	0033      	movs	r3, r6
1000921e:	47b8      	blx	r7
10009220:	2800      	cmp	r0, #0
10009222:	d000      	beq.n	10009226 <mpu_init+0x1fa>
10009224:	e78d      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009226:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009228:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000922a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000922c:	3b68      	subs	r3, #104	; 0x68
1000922e:	5cd1      	ldrb	r1, [r2, r3]
10009230:	6863      	ldr	r3, [r4, #4]
10009232:	2201      	movs	r2, #1
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	0033      	movs	r3, r6
10009238:	47b8      	blx	r7
1000923a:	2800      	cmp	r0, #0
1000923c:	d000      	beq.n	10009240 <mpu_init+0x214>
1000923e:	e780      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009240:	232a      	movs	r3, #42	; 0x2a
10009242:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009244:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009246:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009248:	2321      	movs	r3, #33	; 0x21
1000924a:	5cd1      	ldrb	r1, [r2, r3]
1000924c:	6863      	ldr	r3, [r4, #4]
1000924e:	2201      	movs	r2, #1
10009250:	7818      	ldrb	r0, [r3, #0]
10009252:	0033      	movs	r3, r6
10009254:	47b8      	blx	r7
10009256:	2800      	cmp	r0, #0
10009258:	d000      	beq.n	1000925c <mpu_init+0x230>
1000925a:	e772      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000925c:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000925e:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009260:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009262:	3318      	adds	r3, #24
10009264:	5cd1      	ldrb	r1, [r2, r3]
10009266:	6863      	ldr	r3, [r4, #4]
10009268:	2201      	movs	r2, #1
1000926a:	7818      	ldrb	r0, [r3, #0]
1000926c:	0033      	movs	r3, r6
1000926e:	47b8      	blx	r7
10009270:	2800      	cmp	r0, #0
10009272:	d000      	beq.n	10009276 <mpu_init+0x24a>
10009274:	e765      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009276:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009278:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000927a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000927c:	3b5e      	subs	r3, #94	; 0x5e
1000927e:	5cd1      	ldrb	r1, [r2, r3]
10009280:	6863      	ldr	r3, [r4, #4]
10009282:	2201      	movs	r2, #1
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	0033      	movs	r3, r6
10009288:	47b8      	blx	r7
1000928a:	2800      	cmp	r0, #0
1000928c:	d000      	beq.n	10009290 <mpu_init+0x264>
1000928e:	e758      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009290:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009292:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009294:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009296:	3315      	adds	r3, #21
10009298:	5cd1      	ldrb	r1, [r2, r3]
1000929a:	6863      	ldr	r3, [r4, #4]
1000929c:	2201      	movs	r2, #1
1000929e:	7818      	ldrb	r0, [r3, #0]
100092a0:	0033      	movs	r3, r6
100092a2:	47b8      	blx	r7
100092a4:	2800      	cmp	r0, #0
100092a6:	d000      	beq.n	100092aa <mpu_init+0x27e>
100092a8:	e74b      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092aa:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092ac:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092ae:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092b0:	3324      	adds	r3, #36	; 0x24
100092b2:	5cd1      	ldrb	r1, [r2, r3]
100092b4:	6863      	ldr	r3, [r4, #4]
100092b6:	2201      	movs	r2, #1
100092b8:	7818      	ldrb	r0, [r3, #0]
100092ba:	0033      	movs	r3, r6
100092bc:	47b8      	blx	r7
100092be:	e740      	b.n	10009142 <mpu_init+0x116>
100092c0:	1001384c 	.word	0x1001384c
100092c4:	10008301 	.word	0x10008301
100092c8:	1000810d 	.word	0x1000810d
100092cc:	100115d1 	.word	0x100115d1
100092d0:	100086c5 	.word	0x100086c5
100092d4:	10008799 	.word	0x10008799
100092d8:	10008819 	.word	0x10008819
100092dc:	10008dad 	.word	0x10008dad
100092e0:	1000892d 	.word	0x1000892d
100092e4:	1000bda5 	.word	0x1000bda5
100092e8:	10008b59 	.word	0x10008b59
100092ec:	10008359 	.word	0x10008359
100092f0:	100129dc 	.word	0x100129dc
100092f4:	10011839 	.word	0x10011839
100092f8:	1001284c 	.word	0x1001284c
100092fc:	100088c9 	.word	0x100088c9
10009300:	10008e79 	.word	0x10008e79

10009304 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009304:	b5f0      	push	{r4, r5, r6, r7, lr}
10009306:	000d      	movs	r5, r1
10009308:	b083      	sub	sp, #12
1000930a:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
1000930c:	d021      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
1000930e:	4c12      	ldr	r4, [pc, #72]	; (10009358 <mpu_write_mem+0x54>)
10009310:	7aa3      	ldrb	r3, [r4, #10]
10009312:	2b00      	cmp	r3, #0
10009314:	d01d      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009316:	0a02      	lsrs	r2, r0, #8
10009318:	ab01      	add	r3, sp, #4
1000931a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000931c:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000931e:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009320:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009322:	1840      	adds	r0, r0, r1
10009324:	8951      	ldrh	r1, [r2, #10]
10009326:	4288      	cmp	r0, r1
10009328:	dc13      	bgt.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000932a:	6821      	ldr	r1, [r4, #0]
1000932c:	7810      	ldrb	r0, [r2, #0]
1000932e:	7ec9      	ldrb	r1, [r1, #27]
10009330:	2202      	movs	r2, #2
10009332:	4f0a      	ldr	r7, [pc, #40]	; (1000935c <mpu_write_mem+0x58>)
10009334:	47b8      	blx	r7
10009336:	2800      	cmp	r0, #0
10009338:	d10b      	bne.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000933a:	6823      	ldr	r3, [r4, #0]
1000933c:	b2ea      	uxtb	r2, r5
1000933e:	7e19      	ldrb	r1, [r3, #24]
10009340:	6863      	ldr	r3, [r4, #4]
10009342:	7818      	ldrb	r0, [r3, #0]
10009344:	0033      	movs	r3, r6
10009346:	47b8      	blx	r7
10009348:	1e43      	subs	r3, r0, #1
1000934a:	4198      	sbcs	r0, r3
1000934c:	4240      	negs	r0, r0
        return -1;
    return 0;
}
1000934e:	b003      	add	sp, #12
10009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009352:	2001      	movs	r0, #1
10009354:	4240      	negs	r0, r0
10009356:	e7fa      	b.n	1000934e <mpu_write_mem+0x4a>
10009358:	1001384c 	.word	0x1001384c
1000935c:	10008301 	.word	0x10008301

10009360 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009360:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009362:	2624      	movs	r6, #36	; 0x24
10009364:	4c1f      	ldr	r4, [pc, #124]	; (100093e4 <mpu_set_dmp_state+0x84>)
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009366:	b083      	sub	sp, #12
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009368:	5da3      	ldrb	r3, [r4, r6]
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1000936a:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000936c:	4283      	cmp	r3, r0
1000936e:	d033      	beq.n	100093d8 <mpu_set_dmp_state+0x78>
        return 0;

    if (enable) {
10009370:	2800      	cmp	r0, #0
10009372:	d01f      	beq.n	100093b4 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
10009374:	2325      	movs	r3, #37	; 0x25
10009376:	5ce3      	ldrb	r3, [r4, r3]
10009378:	2b00      	cmp	r3, #0
1000937a:	d02f      	beq.n	100093dc <mpu_set_dmp_state+0x7c>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
1000937c:	4d1a      	ldr	r5, [pc, #104]	; (100093e8 <mpu_set_dmp_state+0x88>)
1000937e:	2000      	movs	r0, #0
10009380:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009382:	4b1a      	ldr	r3, [pc, #104]	; (100093ec <mpu_set_dmp_state+0x8c>)
10009384:	2000      	movs	r0, #0
10009386:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
10009388:	4b19      	ldr	r3, [pc, #100]	; (100093f0 <mpu_set_dmp_state+0x90>)
1000938a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
1000938c:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
1000938e:	466b      	mov	r3, sp
10009390:	2200      	movs	r2, #0
10009392:	3307      	adds	r3, #7
10009394:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009396:	6862      	ldr	r2, [r4, #4]
10009398:	2123      	movs	r1, #35	; 0x23
1000939a:	7810      	ldrb	r0, [r2, #0]
1000939c:	4f15      	ldr	r7, [pc, #84]	; (100093f4 <mpu_set_dmp_state+0x94>)
1000939e:	2201      	movs	r2, #1
100093a0:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 1;
100093a2:	2301      	movs	r3, #1
        /* Enable DMP interrupt. */
        set_int_enable(1);
100093a4:	2001      	movs	r0, #1
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
        /* Remove FIFO elements. */
        tmp = 0;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 1;
100093a6:	55a3      	strb	r3, [r4, r6]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100093a8:	47a8      	blx	r5
        mpu_reset_fifo();
100093aa:	4b13      	ldr	r3, [pc, #76]	; (100093f8 <mpu_set_dmp_state+0x98>)
100093ac:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100093ae:	2000      	movs	r0, #0
}
100093b0:	b003      	add	sp, #12
100093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100093b4:	4b0c      	ldr	r3, [pc, #48]	; (100093e8 <mpu_set_dmp_state+0x88>)
100093b6:	2000      	movs	r0, #0
100093b8:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100093ba:	466b      	mov	r3, sp
100093bc:	7c22      	ldrb	r2, [r4, #16]
100093be:	3307      	adds	r3, #7
100093c0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100093c2:	6862      	ldr	r2, [r4, #4]
100093c4:	2123      	movs	r1, #35	; 0x23
100093c6:	7810      	ldrb	r0, [r2, #0]
100093c8:	4f0a      	ldr	r7, [pc, #40]	; (100093f4 <mpu_set_dmp_state+0x94>)
100093ca:	2201      	movs	r2, #1
100093cc:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
100093ce:	4b0a      	ldr	r3, [pc, #40]	; (100093f8 <mpu_set_dmp_state+0x98>)
        /* Disable DMP interrupt. */
        set_int_enable(0);
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
100093d0:	55a5      	strb	r5, [r4, r6]
        mpu_reset_fifo();
100093d2:	4798      	blx	r3
100093d4:	2000      	movs	r0, #0
100093d6:	e7eb      	b.n	100093b0 <mpu_set_dmp_state+0x50>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100093d8:	2000      	movs	r0, #0
100093da:	e7e9      	b.n	100093b0 <mpu_set_dmp_state+0x50>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100093dc:	2001      	movs	r0, #1
100093de:	4240      	negs	r0, r0
100093e0:	e7e6      	b.n	100093b0 <mpu_set_dmp_state+0x50>
100093e2:	46c0      	nop			; (mov r8, r8)
100093e4:	1001384c 	.word	0x1001384c
100093e8:	100083f9 	.word	0x100083f9
100093ec:	10008b59 	.word	0x10008b59
100093f0:	10008dad 	.word	0x10008dad
100093f4:	10008301 	.word	0x10008301
100093f8:	10008525 	.word	0x10008525

100093fc <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100093fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100093fe:	4647      	mov	r7, r8
10009400:	b480      	push	{r7}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009402:	4e29      	ldr	r6, [pc, #164]	; (100094a8 <mpu_get_compass_reg+0xac>)
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009404:	b084      	sub	sp, #16
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009406:	7ab3      	ldrb	r3, [r6, #10]
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009408:	0004      	movs	r4, r0
1000940a:	4688      	mov	r8, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000940c:	07db      	lsls	r3, r3, #31
1000940e:	d542      	bpl.n	10009496 <mpu_get_compass_reg+0x9a>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009410:	2328      	movs	r3, #40	; 0x28
10009412:	6832      	ldr	r2, [r6, #0]
10009414:	af01      	add	r7, sp, #4
10009416:	5cd1      	ldrb	r1, [r2, r3]
10009418:	6873      	ldr	r3, [r6, #4]
1000941a:	4d24      	ldr	r5, [pc, #144]	; (100094ac <mpu_get_compass_reg+0xb0>)
1000941c:	7818      	ldrb	r0, [r3, #0]
1000941e:	2208      	movs	r2, #8
10009420:	003b      	movs	r3, r7
10009422:	47a8      	blx	r5
10009424:	1e05      	subs	r5, r0, #0
10009426:	d136      	bne.n	10009496 <mpu_get_compass_reg+0x9a>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
10009428:	2203      	movs	r2, #3
1000942a:	783b      	ldrb	r3, [r7, #0]
1000942c:	4013      	ands	r3, r2
1000942e:	2b01      	cmp	r3, #1
10009430:	d134      	bne.n	1000949c <mpu_get_compass_reg+0xa0>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009432:	79fb      	ldrb	r3, [r7, #7]
10009434:	2b7f      	cmp	r3, #127	; 0x7f
10009436:	d834      	bhi.n	100094a2 <mpu_get_compass_reg+0xa6>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
10009438:	78b9      	ldrb	r1, [r7, #2]
1000943a:	787b      	ldrb	r3, [r7, #1]
1000943c:	0209      	lsls	r1, r1, #8
1000943e:	4319      	orrs	r1, r3
10009440:	b209      	sxth	r1, r1
10009442:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
10009444:	793a      	ldrb	r2, [r7, #4]
10009446:	78fb      	ldrb	r3, [r7, #3]
10009448:	0212      	lsls	r2, r2, #8
1000944a:	431a      	orrs	r2, r3
1000944c:	b212      	sxth	r2, r2
1000944e:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009450:	79bb      	ldrb	r3, [r7, #6]
10009452:	7978      	ldrb	r0, [r7, #5]
10009454:	021b      	lsls	r3, r3, #8
10009456:	4303      	orrs	r3, r0
10009458:	b21b      	sxth	r3, r3
1000945a:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
1000945c:	272c      	movs	r7, #44	; 0x2c
1000945e:	5ff0      	ldrsh	r0, [r6, r7]
10009460:	4341      	muls	r1, r0
10009462:	1209      	asrs	r1, r1, #8
10009464:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
10009466:	202e      	movs	r0, #46	; 0x2e
10009468:	5e31      	ldrsh	r1, [r6, r0]
1000946a:	434a      	muls	r2, r1
1000946c:	1212      	asrs	r2, r2, #8
1000946e:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
10009470:	2130      	movs	r1, #48	; 0x30
10009472:	5e72      	ldrsh	r2, [r6, r1]
10009474:	4353      	muls	r3, r2
10009476:	121b      	asrs	r3, r3, #8
10009478:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
1000947a:	4643      	mov	r3, r8
1000947c:	2b00      	cmp	r3, #0
1000947e:	d005      	beq.n	1000948c <mpu_get_compass_reg+0x90>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
10009480:	4b0b      	ldr	r3, [pc, #44]	; (100094b0 <mpu_get_compass_reg+0xb4>)
10009482:	2001      	movs	r0, #1
10009484:	4798      	blx	r3
10009486:	43c0      	mvns	r0, r0
10009488:	9000      	str	r0, [sp, #0]
    count = (uint32_t *)(load / 26000);
1000948a:	9b00      	ldr	r3, [sp, #0]
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
1000948c:	0028      	movs	r0, r5
1000948e:	b004      	add	sp, #16
10009490:	bc04      	pop	{r2}
10009492:	4690      	mov	r8, r2
10009494:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
10009496:	2501      	movs	r5, #1
10009498:	426d      	negs	r5, r5
1000949a:	e7f7      	b.n	1000948c <mpu_get_compass_reg+0x90>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
1000949c:	2502      	movs	r5, #2
1000949e:	426d      	negs	r5, r5
100094a0:	e7f4      	b.n	1000948c <mpu_get_compass_reg+0x90>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
100094a2:	2503      	movs	r5, #3
100094a4:	426d      	negs	r5, r5
100094a6:	e7f1      	b.n	1000948c <mpu_get_compass_reg+0x90>
100094a8:	1001384c 	.word	0x1001384c
100094ac:	10008359 	.word	0x10008359
100094b0:	100081a1 	.word	0x100081a1

100094b4 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
100094b4:	4b02      	ldr	r3, [pc, #8]	; (100094c0 <mpu_get_compass_fsr+0xc>)
100094b6:	685b      	ldr	r3, [r3, #4]
100094b8:	899b      	ldrh	r3, [r3, #12]
100094ba:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
100094bc:	2000      	movs	r0, #0
100094be:	4770      	bx	lr
100094c0:	1001384c 	.word	0x1001384c

100094c4 <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
100094c4:	b500      	push	{lr}
100094c6:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
100094c8:	2209      	movs	r2, #9
100094ca:	4906      	ldr	r1, [pc, #24]	; (100094e4 <dmp_enable_gyro_cal.part.1+0x20>)
100094cc:	a801      	add	r0, sp, #4
100094ce:	4b06      	ldr	r3, [pc, #24]	; (100094e8 <dmp_enable_gyro_cal.part.1+0x24>)
100094d0:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100094d2:	2097      	movs	r0, #151	; 0x97
100094d4:	aa01      	add	r2, sp, #4
100094d6:	2109      	movs	r1, #9
100094d8:	4b04      	ldr	r3, [pc, #16]	; (100094ec <dmp_enable_gyro_cal.part.1+0x28>)
100094da:	00c0      	lsls	r0, r0, #3
100094dc:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
100094de:	b005      	add	sp, #20
100094e0:	bd00      	pop	{pc}
100094e2:	46c0      	nop			; (mov r8, r8)
100094e4:	10012c28 	.word	0x10012c28
100094e8:	100115bf 	.word	0x100115bf
100094ec:	10009305 	.word	0x10009305

100094f0 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094f0:	b530      	push	{r4, r5, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094f2:	4913      	ldr	r1, [pc, #76]	; (10009540 <dmp_set_fifo_rate+0x50>)
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094f4:	b087      	sub	sp, #28
100094f6:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094f8:	220c      	movs	r2, #12
100094fa:	311c      	adds	r1, #28
100094fc:	a803      	add	r0, sp, #12
100094fe:	4b11      	ldr	r3, [pc, #68]	; (10009544 <dmp_set_fifo_rate+0x54>)
10009500:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
10009502:	2cc8      	cmp	r4, #200	; 0xc8
10009504:	d819      	bhi.n	1000953a <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
10009506:	0021      	movs	r1, r4
10009508:	4b0f      	ldr	r3, [pc, #60]	; (10009548 <dmp_set_fifo_rate+0x58>)
1000950a:	20c8      	movs	r0, #200	; 0xc8
1000950c:	4798      	blx	r3
1000950e:	3801      	subs	r0, #1
10009510:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
10009512:	aa01      	add	r2, sp, #4
10009514:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(div & 0xFF);
10009516:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
10009518:	2102      	movs	r1, #2
1000951a:	480c      	ldr	r0, [pc, #48]	; (1000954c <dmp_set_fifo_rate+0x5c>)
1000951c:	4d0c      	ldr	r5, [pc, #48]	; (10009550 <dmp_set_fifo_rate+0x60>)
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000951e:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
10009520:	47a8      	blx	r5
10009522:	2800      	cmp	r0, #0
10009524:	d109      	bne.n	1000953a <dmp_set_fifo_rate+0x4a>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
10009526:	aa03      	add	r2, sp, #12
10009528:	210c      	movs	r1, #12
1000952a:	480a      	ldr	r0, [pc, #40]	; (10009554 <dmp_set_fifo_rate+0x64>)
1000952c:	47a8      	blx	r5
1000952e:	2800      	cmp	r0, #0
10009530:	d103      	bne.n	1000953a <dmp_set_fifo_rate+0x4a>
        return -1;

    dmp.fifo_rate = rate;
10009532:	4b09      	ldr	r3, [pc, #36]	; (10009558 <dmp_set_fifo_rate+0x68>)
10009534:	819c      	strh	r4, [r3, #12]
    return 0;
}
10009536:	b007      	add	sp, #28
10009538:	bd30      	pop	{r4, r5, pc}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
1000953a:	2001      	movs	r0, #1
1000953c:	4240      	negs	r0, r0
1000953e:	e7fa      	b.n	10009536 <dmp_set_fifo_rate+0x46>
10009540:	10012c28 	.word	0x10012c28
10009544:	100115bf 	.word	0x100115bf
10009548:	1000f5e1 	.word	0x1000f5e1
1000954c:	00000216 	.word	0x00000216
10009550:	10009305 	.word	0x10009305
10009554:	00000ac1 	.word	0x00000ac1
10009558:	10013914 	.word	0x10013914

1000955c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
1000955c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000955e:	4647      	mov	r7, r8
10009560:	b480      	push	{r7}
10009562:	0005      	movs	r5, r0
10009564:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
10009566:	0743      	lsls	r3, r0, #29
10009568:	d067      	beq.n	1000963a <dmp_set_tap_thresh+0xde>
1000956a:	23c8      	movs	r3, #200	; 0xc8
1000956c:	00db      	lsls	r3, r3, #3
1000956e:	4299      	cmp	r1, r3
10009570:	d863      	bhi.n	1000963a <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009572:	4b4c      	ldr	r3, [pc, #304]	; (100096a4 <dmp_set_tap_thresh+0x148>)
10009574:	0008      	movs	r0, r1
10009576:	4798      	blx	r3
10009578:	4b4b      	ldr	r3, [pc, #300]	; (100096a8 <dmp_set_tap_thresh+0x14c>)
1000957a:	494c      	ldr	r1, [pc, #304]	; (100096ac <dmp_set_tap_thresh+0x150>)
1000957c:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
1000957e:	466b      	mov	r3, sp
10009580:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009582:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
10009584:	4b4a      	ldr	r3, [pc, #296]	; (100096b0 <dmp_set_tap_thresh+0x154>)
10009586:	0020      	movs	r0, r4
10009588:	4798      	blx	r3
    switch (accel_fsr) {
1000958a:	7823      	ldrb	r3, [r4, #0]
1000958c:	2b04      	cmp	r3, #4
1000958e:	d100      	bne.n	10009592 <dmp_set_tap_thresh+0x36>
10009590:	e079      	b.n	10009686 <dmp_set_tap_thresh+0x12a>
10009592:	d931      	bls.n	100095f8 <dmp_set_tap_thresh+0x9c>
10009594:	2b08      	cmp	r3, #8
10009596:	d067      	beq.n	10009668 <dmp_set_tap_thresh+0x10c>
10009598:	2b10      	cmp	r3, #16
1000959a:	d14e      	bne.n	1000963a <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1000959c:	218a      	movs	r1, #138	; 0x8a
1000959e:	4b45      	ldr	r3, [pc, #276]	; (100096b4 <dmp_set_tap_thresh+0x158>)
100095a0:	05c9      	lsls	r1, r1, #23
100095a2:	1c38      	adds	r0, r7, #0
100095a4:	4698      	mov	r8, r3
100095a6:	4798      	blx	r3
100095a8:	4c43      	ldr	r4, [pc, #268]	; (100096b8 <dmp_set_tap_thresh+0x15c>)
100095aa:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100095ac:	4943      	ldr	r1, [pc, #268]	; (100096bc <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100095ae:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100095b0:	1c38      	adds	r0, r7, #0
100095b2:	47c0      	blx	r8
100095b4:	47a0      	blx	r4
100095b6:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100095b8:	ac01      	add	r4, sp, #4
100095ba:	0a33      	lsrs	r3, r6, #8
100095bc:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100095be:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
100095c0:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100095c2:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100095c4:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
100095c6:	07eb      	lsls	r3, r5, #31
100095c8:	d427      	bmi.n	1000961a <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
100095ca:	07ab      	lsls	r3, r5, #30
100095cc:	d43b      	bmi.n	10009646 <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100095ce:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100095d0:	076b      	lsls	r3, r5, #29
100095d2:	d534      	bpl.n	1000963e <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100095d4:	20ee      	movs	r0, #238	; 0xee
100095d6:	0022      	movs	r2, r4
100095d8:	2102      	movs	r1, #2
100095da:	0040      	lsls	r0, r0, #1
100095dc:	4c38      	ldr	r4, [pc, #224]	; (100096c0 <dmp_set_tap_thresh+0x164>)
100095de:	47a0      	blx	r4
100095e0:	2800      	cmp	r0, #0
100095e2:	d12a      	bne.n	1000963a <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100095e4:	466b      	mov	r3, sp
100095e6:	302d      	adds	r0, #45	; 0x2d
100095e8:	1d9a      	adds	r2, r3, #6
100095ea:	2102      	movs	r1, #2
100095ec:	30ff      	adds	r0, #255	; 0xff
100095ee:	47a0      	blx	r4
100095f0:	1e43      	subs	r3, r0, #1
100095f2:	4198      	sbcs	r0, r3
100095f4:	4240      	negs	r0, r0
100095f6:	e022      	b.n	1000963e <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
100095f8:	2b02      	cmp	r3, #2
100095fa:	d11e      	bne.n	1000963a <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095fc:	218d      	movs	r1, #141	; 0x8d
100095fe:	4b2d      	ldr	r3, [pc, #180]	; (100096b4 <dmp_set_tap_thresh+0x158>)
10009600:	05c9      	lsls	r1, r1, #23
10009602:	1c38      	adds	r0, r7, #0
10009604:	4698      	mov	r8, r3
10009606:	4798      	blx	r3
10009608:	4c2b      	ldr	r4, [pc, #172]	; (100096b8 <dmp_set_tap_thresh+0x15c>)
1000960a:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
1000960c:	492d      	ldr	r1, [pc, #180]	; (100096c4 <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000960e:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009610:	1c38      	adds	r0, r7, #0
10009612:	47c0      	blx	r8
10009614:	47a0      	blx	r4
10009616:	b280      	uxth	r0, r0
        break;
10009618:	e7ce      	b.n	100095b8 <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000961a:	20ea      	movs	r0, #234	; 0xea
1000961c:	0022      	movs	r2, r4
1000961e:	2102      	movs	r1, #2
10009620:	0040      	lsls	r0, r0, #1
10009622:	4e27      	ldr	r6, [pc, #156]	; (100096c0 <dmp_set_tap_thresh+0x164>)
10009624:	47b0      	blx	r6
10009626:	2800      	cmp	r0, #0
10009628:	d107      	bne.n	1000963a <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000962a:	466b      	mov	r3, sp
1000962c:	3025      	adds	r0, #37	; 0x25
1000962e:	1d9a      	adds	r2, r3, #6
10009630:	2102      	movs	r1, #2
10009632:	30ff      	adds	r0, #255	; 0xff
10009634:	47b0      	blx	r6
10009636:	2800      	cmp	r0, #0
10009638:	d0c7      	beq.n	100095ca <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000963a:	2001      	movs	r0, #1
1000963c:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
1000963e:	b002      	add	sp, #8
10009640:	bc04      	pop	{r2}
10009642:	4690      	mov	r8, r2
10009644:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
10009646:	20ec      	movs	r0, #236	; 0xec
10009648:	0022      	movs	r2, r4
1000964a:	2102      	movs	r1, #2
1000964c:	0040      	lsls	r0, r0, #1
1000964e:	4e1c      	ldr	r6, [pc, #112]	; (100096c0 <dmp_set_tap_thresh+0x164>)
10009650:	47b0      	blx	r6
10009652:	2800      	cmp	r0, #0
10009654:	d1f1      	bne.n	1000963a <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
10009656:	466b      	mov	r3, sp
10009658:	3029      	adds	r0, #41	; 0x29
1000965a:	1d9a      	adds	r2, r3, #6
1000965c:	2102      	movs	r1, #2
1000965e:	30ff      	adds	r0, #255	; 0xff
10009660:	47b0      	blx	r6
10009662:	2800      	cmp	r0, #0
10009664:	d0b3      	beq.n	100095ce <dmp_set_tap_thresh+0x72>
10009666:	e7e8      	b.n	1000963a <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009668:	218b      	movs	r1, #139	; 0x8b
1000966a:	4b12      	ldr	r3, [pc, #72]	; (100096b4 <dmp_set_tap_thresh+0x158>)
1000966c:	05c9      	lsls	r1, r1, #23
1000966e:	1c38      	adds	r0, r7, #0
10009670:	4698      	mov	r8, r3
10009672:	4798      	blx	r3
10009674:	4c10      	ldr	r4, [pc, #64]	; (100096b8 <dmp_set_tap_thresh+0x15c>)
10009676:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009678:	4913      	ldr	r1, [pc, #76]	; (100096c8 <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000967a:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000967c:	1c38      	adds	r0, r7, #0
1000967e:	47c0      	blx	r8
10009680:	47a0      	blx	r4
10009682:	b280      	uxth	r0, r0
        break;
10009684:	e798      	b.n	100095b8 <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009686:	218c      	movs	r1, #140	; 0x8c
10009688:	4b0a      	ldr	r3, [pc, #40]	; (100096b4 <dmp_set_tap_thresh+0x158>)
1000968a:	05c9      	lsls	r1, r1, #23
1000968c:	1c38      	adds	r0, r7, #0
1000968e:	4698      	mov	r8, r3
10009690:	4798      	blx	r3
10009692:	4c09      	ldr	r4, [pc, #36]	; (100096b8 <dmp_set_tap_thresh+0x15c>)
10009694:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009696:	490d      	ldr	r1, [pc, #52]	; (100096cc <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009698:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000969a:	1c38      	adds	r0, r7, #0
1000969c:	47c0      	blx	r8
1000969e:	47a0      	blx	r4
100096a0:	b280      	uxth	r0, r0
        break;
100096a2:	e789      	b.n	100095b8 <dmp_set_tap_thresh+0x5c>
100096a4:	100105f5 	.word	0x100105f5
100096a8:	1000fc59 	.word	0x1000fc59
100096ac:	43480000 	.word	0x43480000
100096b0:	10008751 	.word	0x10008751
100096b4:	1000ffed 	.word	0x1000ffed
100096b8:	1000f901 	.word	0x1000f901
100096bc:	44c00000 	.word	0x44c00000
100096c0:	10009305 	.word	0x10009305
100096c4:	46400000 	.word	0x46400000
100096c8:	45400000 	.word	0x45400000
100096cc:	45c00000 	.word	0x45c00000

100096d0 <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096d0:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096d2:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096d4:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096d6:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096d8:	2b00      	cmp	r3, #0
100096da:	d115      	bne.n	10009708 <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100096dc:	466a      	mov	r2, sp
100096de:	3207      	adds	r2, #7
100096e0:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
100096e2:	0783      	lsls	r3, r0, #30
100096e4:	d503      	bpl.n	100096ee <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
100096e6:	230c      	movs	r3, #12
100096e8:	7811      	ldrb	r1, [r2, #0]
100096ea:	430b      	orrs	r3, r1
100096ec:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100096ee:	0743      	lsls	r3, r0, #29
100096f0:	d503      	bpl.n	100096fa <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
100096f2:	2303      	movs	r3, #3
100096f4:	7811      	ldrb	r1, [r2, #0]
100096f6:	430b      	orrs	r3, r1
100096f8:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100096fa:	20a4      	movs	r0, #164	; 0xa4
100096fc:	2101      	movs	r1, #1
100096fe:	4b05      	ldr	r3, [pc, #20]	; (10009714 <dmp_set_tap_axes+0x44>)
10009700:	0040      	lsls	r0, r0, #1
10009702:	4798      	blx	r3
}
10009704:	b003      	add	sp, #12
10009706:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
10009708:	466b      	mov	r3, sp
1000970a:	1dda      	adds	r2, r3, #7
1000970c:	2330      	movs	r3, #48	; 0x30
1000970e:	7013      	strb	r3, [r2, #0]
10009710:	e7e7      	b.n	100096e2 <dmp_set_tap_axes+0x12>
10009712:	46c0      	nop			; (mov r8, r8)
10009714:	10009305 	.word	0x10009305

10009718 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009718:	b500      	push	{lr}
1000971a:	b085      	sub	sp, #20
    if (enable) {
1000971c:	2800      	cmp	r0, #0
1000971e:	d10d      	bne.n	1000973c <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009720:	4908      	ldr	r1, [pc, #32]	; (10009744 <dmp_enable_gyro_cal+0x2c>)
10009722:	2209      	movs	r2, #9
10009724:	3128      	adds	r1, #40	; 0x28
10009726:	4b08      	ldr	r3, [pc, #32]	; (10009748 <dmp_enable_gyro_cal+0x30>)
10009728:	a801      	add	r0, sp, #4
1000972a:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000972c:	2097      	movs	r0, #151	; 0x97
1000972e:	aa01      	add	r2, sp, #4
10009730:	2109      	movs	r1, #9
10009732:	00c0      	lsls	r0, r0, #3
10009734:	4b05      	ldr	r3, [pc, #20]	; (1000974c <dmp_enable_gyro_cal+0x34>)
10009736:	4798      	blx	r3
    }
}
10009738:	b005      	add	sp, #20
1000973a:	bd00      	pop	{pc}
1000973c:	4b04      	ldr	r3, [pc, #16]	; (10009750 <dmp_enable_gyro_cal+0x38>)
1000973e:	4798      	blx	r3
10009740:	e7fa      	b.n	10009738 <dmp_enable_gyro_cal+0x20>
10009742:	46c0      	nop			; (mov r8, r8)
10009744:	10012c28 	.word	0x10012c28
10009748:	100115bf 	.word	0x100115bf
1000974c:	10009305 	.word	0x10009305
10009750:	100094c5 	.word	0x100094c5

10009754 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009754:	b500      	push	{lr}
10009756:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009758:	2800      	cmp	r0, #0
1000975a:	d010      	beq.n	1000977e <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
1000975c:	23c0      	movs	r3, #192	; 0xc0
1000975e:	aa01      	add	r2, sp, #4
10009760:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
10009762:	3302      	adds	r3, #2
10009764:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
10009766:	3302      	adds	r3, #2
10009768:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
1000976a:	3302      	adds	r3, #2
1000976c:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1000976e:	2104      	movs	r1, #4
10009770:	4b05      	ldr	r3, [pc, #20]	; (10009788 <dmp_enable_lp_quat+0x34>)
10009772:	4806      	ldr	r0, [pc, #24]	; (1000978c <dmp_enable_lp_quat+0x38>)
10009774:	4798      	blx	r3

    return mpu_reset_fifo();
10009776:	4b06      	ldr	r3, [pc, #24]	; (10009790 <dmp_enable_lp_quat+0x3c>)
10009778:	4798      	blx	r3
}
1000977a:	b003      	add	sp, #12
1000977c:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
1000977e:	4b05      	ldr	r3, [pc, #20]	; (10009794 <dmp_enable_lp_quat+0x40>)
10009780:	aa01      	add	r2, sp, #4
10009782:	9301      	str	r3, [sp, #4]
10009784:	e7f3      	b.n	1000976e <dmp_enable_lp_quat+0x1a>
10009786:	46c0      	nop			; (mov r8, r8)
10009788:	10009305 	.word	0x10009305
1000978c:	00000a98 	.word	0x00000a98
10009790:	10008525 	.word	0x10008525
10009794:	8b8b8b8b 	.word	0x8b8b8b8b

10009798 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009798:	b500      	push	{lr}
1000979a:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
1000979c:	2800      	cmp	r0, #0
1000979e:	d010      	beq.n	100097c2 <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
100097a0:	2320      	movs	r3, #32
100097a2:	aa01      	add	r2, sp, #4
100097a4:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
100097a6:	3308      	adds	r3, #8
100097a8:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
100097aa:	3308      	adds	r3, #8
100097ac:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
100097ae:	3308      	adds	r3, #8
100097b0:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
100097b2:	2104      	movs	r1, #4
100097b4:	4b05      	ldr	r3, [pc, #20]	; (100097cc <dmp_enable_6x_lp_quat+0x34>)
100097b6:	4806      	ldr	r0, [pc, #24]	; (100097d0 <dmp_enable_6x_lp_quat+0x38>)
100097b8:	4798      	blx	r3

    return mpu_reset_fifo();
100097ba:	4b06      	ldr	r3, [pc, #24]	; (100097d4 <dmp_enable_6x_lp_quat+0x3c>)
100097bc:	4798      	blx	r3
}
100097be:	b003      	add	sp, #12
100097c0:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
100097c2:	4b05      	ldr	r3, [pc, #20]	; (100097d8 <dmp_enable_6x_lp_quat+0x40>)
100097c4:	aa01      	add	r2, sp, #4
100097c6:	9301      	str	r3, [sp, #4]
100097c8:	e7f3      	b.n	100097b2 <dmp_enable_6x_lp_quat+0x1a>
100097ca:	46c0      	nop			; (mov r8, r8)
100097cc:	10009305 	.word	0x10009305
100097d0:	00000a9e 	.word	0x00000a9e
100097d4:	10008525 	.word	0x10008525
100097d8:	a3a3a3a3 	.word	0xa3a3a3a3

100097dc <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100097de:	4645      	mov	r5, r8
100097e0:	464e      	mov	r6, r9
100097e2:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100097e4:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097e6:	b4e0      	push	{r5, r6, r7}
100097e8:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100097ea:	ac01      	add	r4, sp, #4
100097ec:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100097ee:	33c8      	adds	r3, #200	; 0xc8
100097f0:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100097f2:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097f4:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100097f6:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
100097f8:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100097fa:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
100097fc:	2104      	movs	r1, #4
100097fe:	2068      	movs	r0, #104	; 0x68
10009800:	4e7c      	ldr	r6, [pc, #496]	; (100099f4 <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009802:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009804:	47b0      	blx	r6
10009806:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009808:	23a3      	movs	r3, #163	; 0xa3
1000980a:	402a      	ands	r2, r5
1000980c:	7023      	strb	r3, [r4, #0]
1000980e:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009810:	d100      	bne.n	10009814 <dmp_enable_feature+0x38>
10009812:	e0e1      	b.n	100099d8 <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
10009814:	331d      	adds	r3, #29
10009816:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
10009818:	3308      	adds	r3, #8
1000981a:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
1000981c:	3b06      	subs	r3, #6
1000981e:	70e3      	strb	r3, [r4, #3]
10009820:	27c0      	movs	r7, #192	; 0xc0
10009822:	007f      	lsls	r7, r7, #1
10009824:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009826:	d100      	bne.n	1000982a <dmp_enable_feature+0x4e>
10009828:	e0d1      	b.n	100099ce <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
1000982a:	23c4      	movs	r3, #196	; 0xc4
1000982c:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
1000982e:	3308      	adds	r3, #8
10009830:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
10009832:	3b06      	subs	r3, #6
10009834:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
10009836:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
10009838:	0022      	movs	r2, r4
1000983a:	210a      	movs	r1, #10
1000983c:	486e      	ldr	r0, [pc, #440]	; (100099f8 <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000983e:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
10009840:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
10009842:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009844:	47b0      	blx	r6
10009846:	2303      	movs	r3, #3
10009848:	402b      	ands	r3, r5
1000984a:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000984c:	d100      	bne.n	10009850 <dmp_enable_feature+0x74>
1000984e:	e0bb      	b.n	100099c8 <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
10009850:	2320      	movs	r3, #32
10009852:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
10009854:	0022      	movs	r2, r4
10009856:	2101      	movs	r1, #1
10009858:	4868      	ldr	r0, [pc, #416]	; (100099fc <dmp_enable_feature+0x220>)
1000985a:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
1000985c:	06ab      	lsls	r3, r5, #26
1000985e:	d400      	bmi.n	10009862 <dmp_enable_feature+0x86>
10009860:	e0ae      	b.n	100099c0 <dmp_enable_feature+0x1e4>
10009862:	4b67      	ldr	r3, [pc, #412]	; (10009a00 <dmp_enable_feature+0x224>)
10009864:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009866:	2f00      	cmp	r7, #0
10009868:	d00e      	beq.n	10009888 <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1000986a:	05eb      	lsls	r3, r5, #23
1000986c:	d500      	bpl.n	10009870 <dmp_enable_feature+0x94>
1000986e:	e0b7      	b.n	100099e0 <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
10009870:	23b0      	movs	r3, #176	; 0xb0
10009872:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
10009874:	3b30      	subs	r3, #48	; 0x30
10009876:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
10009878:	3334      	adds	r3, #52	; 0x34
1000987a:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
1000987c:	3b24      	subs	r3, #36	; 0x24
1000987e:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009880:	0022      	movs	r2, r4
10009882:	2104      	movs	r1, #4
10009884:	485f      	ldr	r0, [pc, #380]	; (10009a04 <dmp_enable_feature+0x228>)
10009886:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
10009888:	07eb      	lsls	r3, r5, #31
1000988a:	d400      	bmi.n	1000988e <dmp_enable_feature+0xb2>
1000988c:	e090      	b.n	100099b0 <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
1000988e:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009890:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
10009892:	0022      	movs	r2, r4
10009894:	2101      	movs	r1, #1
10009896:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009898:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000989a:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
1000989c:	21fa      	movs	r1, #250	; 0xfa
1000989e:	4b5a      	ldr	r3, [pc, #360]	; (10009a08 <dmp_enable_feature+0x22c>)
100098a0:	2007      	movs	r0, #7
100098a2:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
100098a4:	4b59      	ldr	r3, [pc, #356]	; (10009a0c <dmp_enable_feature+0x230>)
100098a6:	2007      	movs	r0, #7
100098a8:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100098aa:	2300      	movs	r3, #0
100098ac:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
100098ae:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100098b0:	466b      	mov	r3, sp
100098b2:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
100098b4:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100098b6:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
100098b8:	30ff      	adds	r0, #255	; 0xff
100098ba:	466a      	mov	r2, sp
100098bc:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098be:	466b      	mov	r3, sp
100098c0:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100098c2:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098c4:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098c6:	2314      	movs	r3, #20
100098c8:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100098ca:	2102      	movs	r1, #2
100098cc:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098ce:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100098d0:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098d2:	466b      	mov	r3, sp
100098d4:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
100098d6:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098d8:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098da:	2364      	movs	r3, #100	; 0x64
100098dc:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
100098de:	2102      	movs	r1, #2
100098e0:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098e2:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100098e4:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100098e6:	466b      	mov	r3, sp
100098e8:	4652      	mov	r2, sl
100098ea:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100098ec:	466a      	mov	r2, sp
100098ee:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100098f0:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100098f2:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100098f4:	336b      	adds	r3, #107	; 0x6b
100098f6:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100098f8:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100098fa:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
100098fc:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100098fe:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009900:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009902:	466b      	mov	r3, sp
10009904:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
10009906:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009908:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
1000990a:	2308      	movs	r3, #8
1000990c:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
1000990e:	2102      	movs	r1, #2
10009910:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
10009912:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
10009914:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009916:	466b      	mov	r3, sp
10009918:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
1000991a:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000991c:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
1000991e:	2302      	movs	r3, #2
10009920:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
10009922:	2102      	movs	r1, #2
10009924:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
10009926:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009928:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
1000992a:	07ab      	lsls	r3, r5, #30
1000992c:	d53d      	bpl.n	100099aa <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
1000992e:	23d9      	movs	r3, #217	; 0xd9
10009930:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009932:	0022      	movs	r2, r4
10009934:	2101      	movs	r1, #1
10009936:	4836      	ldr	r0, [pc, #216]	; (10009a10 <dmp_enable_feature+0x234>)
10009938:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
1000993a:	076b      	lsls	r3, r5, #29
1000993c:	d531      	bpl.n	100099a2 <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
1000993e:	2001      	movs	r0, #1
10009940:	4b34      	ldr	r3, [pc, #208]	; (10009a14 <dmp_enable_feature+0x238>)
10009942:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009944:	06eb      	lsls	r3, r5, #27
10009946:	d528      	bpl.n	1000999a <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
10009948:	2001      	movs	r0, #1
1000994a:	4b33      	ldr	r3, [pc, #204]	; (10009a18 <dmp_enable_feature+0x23c>)
1000994c:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1000994e:	2308      	movs	r3, #8
10009950:	4c32      	ldr	r4, [pc, #200]	; (10009a1c <dmp_enable_feature+0x240>)
10009952:	432b      	orrs	r3, r5
10009954:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
10009956:	4b32      	ldr	r3, [pc, #200]	; (10009a20 <dmp_enable_feature+0x244>)
10009958:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1000995a:	4643      	mov	r3, r8
1000995c:	2b00      	cmp	r3, #0
1000995e:	d119      	bne.n	10009994 <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009960:	4643      	mov	r3, r8
10009962:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009964:	2f00      	cmp	r7, #0
10009966:	d002      	beq.n	1000996e <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
10009968:	7ba3      	ldrb	r3, [r4, #14]
1000996a:	3306      	adds	r3, #6
1000996c:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1000996e:	2314      	movs	r3, #20
10009970:	422b      	tst	r3, r5
10009972:	d002      	beq.n	1000997a <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
10009974:	7ba3      	ldrb	r3, [r4, #14]
10009976:	3310      	adds	r3, #16
10009978:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000997a:	464b      	mov	r3, r9
1000997c:	2b00      	cmp	r3, #0
1000997e:	d002      	beq.n	10009986 <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
10009980:	7ba3      	ldrb	r3, [r4, #14]
10009982:	3304      	adds	r3, #4
10009984:	73a3      	strb	r3, [r4, #14]

    return 0;
}
10009986:	2000      	movs	r0, #0
10009988:	b004      	add	sp, #16
1000998a:	bc1c      	pop	{r2, r3, r4}
1000998c:	4690      	mov	r8, r2
1000998e:	4699      	mov	r9, r3
10009990:	46a2      	mov	sl, r4
10009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009994:	2306      	movs	r3, #6
10009996:	73a3      	strb	r3, [r4, #14]
10009998:	e7e4      	b.n	10009964 <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
1000999a:	4b1f      	ldr	r3, [pc, #124]	; (10009a18 <dmp_enable_feature+0x23c>)
1000999c:	2000      	movs	r0, #0
1000999e:	4798      	blx	r3
100099a0:	e7d5      	b.n	1000994e <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
100099a2:	4b1c      	ldr	r3, [pc, #112]	; (10009a14 <dmp_enable_feature+0x238>)
100099a4:	2000      	movs	r0, #0
100099a6:	4798      	blx	r3
100099a8:	e7cc      	b.n	10009944 <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
100099aa:	23d8      	movs	r3, #216	; 0xd8
100099ac:	7023      	strb	r3, [r4, #0]
100099ae:	e7c0      	b.n	10009932 <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
100099b0:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100099b2:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
100099b4:	0022      	movs	r2, r4
100099b6:	2101      	movs	r1, #1
100099b8:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100099ba:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100099bc:	47b0      	blx	r6
100099be:	e7b4      	b.n	1000992a <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
100099c0:	4b18      	ldr	r3, [pc, #96]	; (10009a24 <dmp_enable_feature+0x248>)
100099c2:	2000      	movs	r0, #0
100099c4:	4798      	blx	r3
100099c6:	e74e      	b.n	10009866 <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
100099c8:	23d8      	movs	r3, #216	; 0xd8
100099ca:	7023      	strb	r3, [r4, #0]
100099cc:	e742      	b.n	10009854 <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
100099ce:	23a3      	movs	r3, #163	; 0xa3
100099d0:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
100099d2:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
100099d4:	71a3      	strb	r3, [r4, #6]
100099d6:	e72e      	b.n	10009836 <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
100099d8:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
100099da:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
100099dc:	70e3      	strb	r3, [r4, #3]
100099de:	e71f      	b.n	10009820 <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
100099e0:	23b2      	movs	r3, #178	; 0xb2
100099e2:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
100099e4:	3b27      	subs	r3, #39	; 0x27
100099e6:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
100099e8:	332b      	adds	r3, #43	; 0x2b
100099ea:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
100099ec:	3b1b      	subs	r3, #27
100099ee:	70e3      	strb	r3, [r4, #3]
100099f0:	e746      	b.n	10009880 <dmp_enable_feature+0xa4>
100099f2:	46c0      	nop			; (mov r8, r8)
100099f4:	10009305 	.word	0x10009305
100099f8:	00000aa7 	.word	0x00000aa7
100099fc:	00000ab6 	.word	0x00000ab6
10009a00:	100094c5 	.word	0x100094c5
10009a04:	00000aa2 	.word	0x00000aa2
10009a08:	1000955d 	.word	0x1000955d
10009a0c:	100096d1 	.word	0x100096d1
10009a10:	0000073d 	.word	0x0000073d
10009a14:	10009755 	.word	0x10009755
10009a18:	10009799 	.word	0x10009799
10009a1c:	10013914 	.word	0x10013914
10009a20:	10008525 	.word	0x10008525
10009a24:	10009719 	.word	0x10009719

10009a28 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009a28:	78c0      	ldrb	r0, [r0, #3]
10009a2a:	2800      	cmp	r0, #0
10009a2c:	d000      	beq.n	10009a30 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009a2e:	20e2      	movs	r0, #226	; 0xe2
}
10009a30:	4770      	bx	lr
10009a32:	46c0      	nop			; (mov r8, r8)

10009a34 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009a34:	2000      	movs	r0, #0
10009a36:	4770      	bx	lr

10009a38 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009a38:	229b      	movs	r2, #155	; 0x9b
10009a3a:	4b20      	ldr	r3, [pc, #128]	; (10009abc <ble_disconnected_state_handler+0x84>)
10009a3c:	0092      	lsls	r2, r2, #2
10009a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a40:	0004      	movs	r4, r0
10009a42:	1898      	adds	r0, r3, r2
10009a44:	3a91      	subs	r2, #145	; 0x91
10009a46:	4647      	mov	r7, r8
10009a48:	3aff      	subs	r2, #255	; 0xff
10009a4a:	4694      	mov	ip, r2
10009a4c:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009a4e:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009a50:	2600      	movs	r6, #0
10009a52:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009a54:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
10009a56:	4f1a      	ldr	r7, [pc, #104]	; (10009ac0 <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009a58:	001a      	movs	r2, r3
10009a5a:	3a56      	subs	r2, #86	; 0x56
10009a5c:	8811      	ldrh	r1, [r2, #0]
10009a5e:	8822      	ldrh	r2, [r4, #0]
10009a60:	4291      	cmp	r1, r2
10009a62:	d00e      	beq.n	10009a82 <ble_disconnected_state_handler+0x4a>
10009a64:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a66:	4283      	cmp	r3, r0
10009a68:	d1f6      	bne.n	10009a58 <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009a6a:	4b16      	ldr	r3, [pc, #88]	; (10009ac4 <ble_disconnected_state_handler+0x8c>)
10009a6c:	4816      	ldr	r0, [pc, #88]	; (10009ac8 <ble_disconnected_state_handler+0x90>)
10009a6e:	4798      	blx	r3
10009a70:	8822      	ldrh	r2, [r4, #0]
10009a72:	78a1      	ldrb	r1, [r4, #2]
10009a74:	4b15      	ldr	r3, [pc, #84]	; (10009acc <ble_disconnected_state_handler+0x94>)
10009a76:	4816      	ldr	r0, [pc, #88]	; (10009ad0 <ble_disconnected_state_handler+0x98>)
10009a78:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009a7a:	2000      	movs	r0, #0
10009a7c:	bc04      	pop	{r2}
10009a7e:	4690      	mov	r8, r2
10009a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009a82:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009a84:	2a05      	cmp	r2, #5
10009a86:	d00e      	beq.n	10009aa6 <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009a88:	2a08      	cmp	r2, #8
10009a8a:	d00c      	beq.n	10009aa6 <ble_disconnected_state_handler+0x6e>
10009a8c:	2a07      	cmp	r2, #7
10009a8e:	d808      	bhi.n	10009aa2 <ble_disconnected_state_handler+0x6a>
10009a90:	0029      	movs	r1, r5
10009a92:	4091      	lsls	r1, r2
10009a94:	000a      	movs	r2, r1
10009a96:	4661      	mov	r1, ip
10009a98:	4211      	tst	r1, r2
10009a9a:	d106      	bne.n	10009aaa <ble_disconnected_state_handler+0x72>
10009a9c:	4641      	mov	r1, r8
10009a9e:	4211      	tst	r1, r2
10009aa0:	d1e0      	bne.n	10009a64 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009aa2:	701e      	strb	r6, [r3, #0]
				break;				
10009aa4:	e7de      	b.n	10009a64 <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009aa6:	701d      	strb	r5, [r3, #0]
10009aa8:	e7dc      	b.n	10009a64 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009aaa:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009aac:	783a      	ldrb	r2, [r7, #0]
10009aae:	2a00      	cmp	r2, #0
10009ab0:	d0d8      	beq.n	10009a64 <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
10009ab2:	783a      	ldrb	r2, [r7, #0]
10009ab4:	3a01      	subs	r2, #1
10009ab6:	b2d2      	uxtb	r2, r2
10009ab8:	703a      	strb	r2, [r7, #0]
10009aba:	e7d3      	b.n	10009a64 <ble_disconnected_state_handler+0x2c>
10009abc:	10014f92 	.word	0x10014f92
10009ac0:	100151a0 	.word	0x100151a0
10009ac4:	10011839 	.word	0x10011839
10009ac8:	100129dc 	.word	0x100129dc
10009acc:	10011719 	.word	0x10011719
10009ad0:	10012da8 	.word	0x10012da8

10009ad4 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ad6:	4647      	mov	r7, r8
10009ad8:	b480      	push	{r7}
10009ada:	4f33      	ldr	r7, [pc, #204]	; (10009ba8 <ble_pair_done_handler+0xd4>)
10009adc:	0006      	movs	r6, r0
10009ade:	003b      	movs	r3, r7
10009ae0:	2400      	movs	r4, #0
10009ae2:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009ae4:	891a      	ldrh	r2, [r3, #8]
10009ae6:	42aa      	cmp	r2, r5
10009ae8:	d022      	beq.n	10009b30 <ble_pair_done_handler+0x5c>
10009aea:	3401      	adds	r4, #1
10009aec:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009aee:	2c05      	cmp	r4, #5
10009af0:	d1f8      	bne.n	10009ae4 <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009af2:	7933      	ldrb	r3, [r6, #4]
10009af4:	2b00      	cmp	r3, #0
10009af6:	d049      	beq.n	10009b8c <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009af8:	4b2c      	ldr	r3, [pc, #176]	; (10009bac <ble_pair_done_handler+0xd8>)
10009afa:	5cfb      	ldrb	r3, [r7, r3]
10009afc:	2b01      	cmp	r3, #1
10009afe:	d912      	bls.n	10009b26 <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
10009b00:	4f2b      	ldr	r7, [pc, #172]	; (10009bb0 <ble_pair_done_handler+0xdc>)
10009b02:	4d2c      	ldr	r5, [pc, #176]	; (10009bb4 <ble_pair_done_handler+0xe0>)
10009b04:	0038      	movs	r0, r7
10009b06:	47a8      	blx	r5
10009b08:	482b      	ldr	r0, [pc, #172]	; (10009bb8 <ble_pair_done_handler+0xe4>)
10009b0a:	4c2c      	ldr	r4, [pc, #176]	; (10009bbc <ble_pair_done_handler+0xe8>)
10009b0c:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009b0e:	8870      	ldrh	r0, [r6, #2]
10009b10:	2113      	movs	r1, #19
10009b12:	4b2b      	ldr	r3, [pc, #172]	; (10009bc0 <ble_pair_done_handler+0xec>)
10009b14:	4798      	blx	r3
10009b16:	2800      	cmp	r0, #0
10009b18:	d005      	beq.n	10009b26 <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
10009b1a:	0038      	movs	r0, r7
10009b1c:	47a8      	blx	r5
10009b1e:	4829      	ldr	r0, [pc, #164]	; (10009bc4 <ble_pair_done_handler+0xf0>)
10009b20:	47a0      	blx	r4
				return AT_BLE_FAILURE;
10009b22:	25e2      	movs	r5, #226	; 0xe2
10009b24:	e000      	b.n	10009b28 <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009b26:	2500      	movs	r5, #0
}
10009b28:	0028      	movs	r0, r5
10009b2a:	bc04      	pop	{r2}
10009b2c:	4690      	mov	r8, r2
10009b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009b30:	001a      	movs	r2, r3
10009b32:	325e      	adds	r2, #94	; 0x5e
10009b34:	7812      	ldrb	r2, [r2, #0]
10009b36:	2a03      	cmp	r2, #3
10009b38:	d1d7      	bne.n	10009aea <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009b3a:	7935      	ldrb	r5, [r6, #4]
10009b3c:	2d00      	cmp	r5, #0
10009b3e:	d1df      	bne.n	10009b00 <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009b40:	4b1c      	ldr	r3, [pc, #112]	; (10009bb4 <ble_pair_done_handler+0xe0>)
10009b42:	481b      	ldr	r0, [pc, #108]	; (10009bb0 <ble_pair_done_handler+0xdc>)
10009b44:	4798      	blx	r3
10009b46:	4b1d      	ldr	r3, [pc, #116]	; (10009bbc <ble_pair_done_handler+0xe8>)
10009b48:	481f      	ldr	r0, [pc, #124]	; (10009bc8 <ble_pair_done_handler+0xf4>)
10009b4a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009b4c:	0163      	lsls	r3, r4, #5
10009b4e:	1b1c      	subs	r4, r3, r4
10009b50:	7832      	ldrb	r2, [r6, #0]
10009b52:	00a4      	lsls	r4, r4, #2
10009b54:	193b      	adds	r3, r7, r4
10009b56:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009b58:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009b5a:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009b5c:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009b5e:	2205      	movs	r2, #5
10009b60:	335e      	adds	r3, #94	; 0x5e
10009b62:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009b64:	1938      	adds	r0, r7, r4
10009b66:	4b19      	ldr	r3, [pc, #100]	; (10009bcc <ble_pair_done_handler+0xf8>)
10009b68:	3122      	adds	r1, #34	; 0x22
10009b6a:	320b      	adds	r2, #11
10009b6c:	3036      	adds	r0, #54	; 0x36
10009b6e:	4698      	mov	r8, r3
10009b70:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009b72:	0031      	movs	r1, r6
10009b74:	1938      	adds	r0, r7, r4
10009b76:	3132      	adds	r1, #50	; 0x32
10009b78:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009b7a:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009b7c:	3046      	adds	r0, #70	; 0x46
10009b7e:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009b80:	0020      	movs	r0, r4
10009b82:	1db1      	adds	r1, r6, #6
10009b84:	221c      	movs	r2, #28
10009b86:	301a      	adds	r0, #26
10009b88:	47c0      	blx	r8
10009b8a:	e7cd      	b.n	10009b28 <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009b8c:	4e08      	ldr	r6, [pc, #32]	; (10009bb0 <ble_pair_done_handler+0xdc>)
10009b8e:	4d09      	ldr	r5, [pc, #36]	; (10009bb4 <ble_pair_done_handler+0xe0>)
10009b90:	0030      	movs	r0, r6
10009b92:	47a8      	blx	r5
10009b94:	4c09      	ldr	r4, [pc, #36]	; (10009bbc <ble_pair_done_handler+0xe8>)
10009b96:	480c      	ldr	r0, [pc, #48]	; (10009bc8 <ble_pair_done_handler+0xf4>)
10009b98:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009b9a:	0030      	movs	r0, r6
10009b9c:	47a8      	blx	r5
10009b9e:	480c      	ldr	r0, [pc, #48]	; (10009bd0 <ble_pair_done_handler+0xfc>)
10009ba0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009ba2:	25e2      	movs	r5, #226	; 0xe2
10009ba4:	e7c0      	b.n	10009b28 <ble_pair_done_handler+0x54>
10009ba6:	46c0      	nop			; (mov r8, r8)
10009ba8:	10014f34 	.word	0x10014f34
10009bac:	000002ca 	.word	0x000002ca
10009bb0:	100129dc 	.word	0x100129dc
10009bb4:	10011839 	.word	0x10011839
10009bb8:	10012dd8 	.word	0x10012dd8
10009bbc:	10011719 	.word	0x10011719
10009bc0:	1000d7cd 	.word	0x1000d7cd
10009bc4:	10012df8 	.word	0x10012df8
10009bc8:	10012e14 	.word	0x10012e14
10009bcc:	100115bf 	.word	0x100115bf
10009bd0:	10012e40 	.word	0x10012e40

10009bd4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009bd4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009bd6:	2378      	movs	r3, #120	; 0x78
10009bd8:	2201      	movs	r2, #1
10009bda:	2101      	movs	r1, #1
10009bdc:	4c02      	ldr	r4, [pc, #8]	; (10009be8 <ble_conn_param_update_req+0x14>)
10009bde:	8800      	ldrh	r0, [r0, #0]
10009be0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009be2:	2000      	movs	r0, #0
10009be4:	bd10      	pop	{r4, pc}
10009be6:	46c0      	nop			; (mov r8, r8)
10009be8:	1000d7ed 	.word	0x1000d7ed

10009bec <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bee:	4644      	mov	r4, r8
10009bf0:	4656      	mov	r6, sl
10009bf2:	465f      	mov	r7, fp
10009bf4:	464d      	mov	r5, r9
10009bf6:	4682      	mov	sl, r0
10009bf8:	b4f0      	push	{r4, r5, r6, r7}
10009bfa:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009bfc:	ac03      	add	r4, sp, #12
10009bfe:	2209      	movs	r2, #9
10009c00:	2100      	movs	r1, #0
10009c02:	4b63      	ldr	r3, [pc, #396]	; (10009d90 <ble_slave_security_request_handler+0x1a4>)
10009c04:	0020      	movs	r0, r4
10009c06:	4798      	blx	r3
10009c08:	4653      	mov	r3, sl
10009c0a:	8819      	ldrh	r1, [r3, #0]
10009c0c:	4b61      	ldr	r3, [pc, #388]	; (10009d94 <ble_slave_security_request_handler+0x1a8>)
10009c0e:	4698      	mov	r8, r3
10009c10:	0018      	movs	r0, r3
10009c12:	001a      	movs	r2, r3
10009c14:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009c16:	8915      	ldrh	r5, [r2, #8]
10009c18:	428d      	cmp	r5, r1
10009c1a:	d041      	beq.n	10009ca0 <ble_slave_security_request_handler+0xb4>
10009c1c:	3301      	adds	r3, #1
10009c1e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c20:	2b05      	cmp	r3, #5
10009c22:	d1f8      	bne.n	10009c16 <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009c24:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009c26:	8902      	ldrh	r2, [r0, #8]
10009c28:	001f      	movs	r7, r3
10009c2a:	428a      	cmp	r2, r1
10009c2c:	d056      	beq.n	10009cdc <ble_slave_security_request_handler+0xf0>
10009c2e:	3301      	adds	r3, #1
10009c30:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c32:	2b05      	cmp	r3, #5
10009c34:	d1f7      	bne.n	10009c26 <ble_slave_security_request_handler+0x3a>
10009c36:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009c38:	2302      	movs	r3, #2
10009c3a:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
10009c3c:	4653      	mov	r3, sl
10009c3e:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009c40:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
10009c42:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009c44:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
10009c46:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009c48:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009c4a:	017b      	lsls	r3, r7, #5
10009c4c:	9300      	str	r3, [sp, #0]
10009c4e:	1bdb      	subs	r3, r3, r7
10009c50:	009b      	lsls	r3, r3, #2
10009c52:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
10009c54:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009c56:	2b02      	cmp	r3, #2
10009c58:	d100      	bne.n	10009c5c <ble_slave_security_request_handler+0x70>
10009c5a:	e084      	b.n	10009d66 <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009c5c:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009c5e:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
10009c60:	2310      	movs	r3, #16
10009c62:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
10009c64:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009c66:	9b00      	ldr	r3, [sp, #0]
10009c68:	1bde      	subs	r6, r3, r7
10009c6a:	4643      	mov	r3, r8
10009c6c:	00b6      	lsls	r6, r6, #2
10009c6e:	199b      	adds	r3, r3, r6
10009c70:	7e1b      	ldrb	r3, [r3, #24]
10009c72:	2b40      	cmp	r3, #64	; 0x40
10009c74:	d04a      	beq.n	10009d0c <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009c76:	9b00      	ldr	r3, [sp, #0]
10009c78:	0021      	movs	r1, r4
10009c7a:	1bda      	subs	r2, r3, r7
10009c7c:	4653      	mov	r3, sl
10009c7e:	0092      	lsls	r2, r2, #2
10009c80:	3260      	adds	r2, #96	; 0x60
10009c82:	8818      	ldrh	r0, [r3, #0]
10009c84:	4442      	add	r2, r8
10009c86:	2300      	movs	r3, #0
10009c88:	4d43      	ldr	r5, [pc, #268]	; (10009d98 <ble_slave_security_request_handler+0x1ac>)
10009c8a:	47a8      	blx	r5
10009c8c:	2800      	cmp	r0, #0
10009c8e:	d132      	bne.n	10009cf6 <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
10009c90:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009c92:	b007      	add	sp, #28
10009c94:	bc3c      	pop	{r2, r3, r4, r5}
10009c96:	4690      	mov	r8, r2
10009c98:	4699      	mov	r9, r3
10009c9a:	46a2      	mov	sl, r4
10009c9c:	46ab      	mov	fp, r5
10009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009ca0:	0015      	movs	r5, r2
10009ca2:	355e      	adds	r5, #94	; 0x5e
10009ca4:	782d      	ldrb	r5, [r5, #0]
10009ca6:	2d02      	cmp	r5, #2
10009ca8:	d1b8      	bne.n	10009c1c <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009caa:	4642      	mov	r2, r8
10009cac:	015d      	lsls	r5, r3, #5
10009cae:	1ae9      	subs	r1, r5, r3
10009cb0:	0089      	lsls	r1, r1, #2
10009cb2:	1852      	adds	r2, r2, r1
10009cb4:	0016      	movs	r6, r2
10009cb6:	2706      	movs	r7, #6
10009cb8:	365e      	adds	r6, #94	; 0x5e
10009cba:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009cbc:	7d12      	ldrb	r2, [r2, #20]
10009cbe:	07d6      	lsls	r6, r2, #31
10009cc0:	d503      	bpl.n	10009cca <ble_slave_security_request_handler+0xde>
10009cc2:	4656      	mov	r6, sl
10009cc4:	78f6      	ldrb	r6, [r6, #3]
10009cc6:	2e00      	cmp	r6, #0
10009cc8:	d151      	bne.n	10009d6e <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009cca:	2202      	movs	r2, #2
10009ccc:	1aeb      	subs	r3, r5, r3
10009cce:	009b      	lsls	r3, r3, #2
10009cd0:	4443      	add	r3, r8
10009cd2:	335e      	adds	r3, #94	; 0x5e
10009cd4:	701a      	strb	r2, [r3, #0]
10009cd6:	4653      	mov	r3, sl
10009cd8:	8819      	ldrh	r1, [r3, #0]
10009cda:	e7a3      	b.n	10009c24 <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009cdc:	0002      	movs	r2, r0
10009cde:	325e      	adds	r2, #94	; 0x5e
10009ce0:	7812      	ldrb	r2, [r2, #0]
10009ce2:	2a02      	cmp	r2, #2
10009ce4:	d1a3      	bne.n	10009c2e <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009ce6:	015b      	lsls	r3, r3, #5
10009ce8:	1bdb      	subs	r3, r3, r7
10009cea:	009b      	lsls	r3, r3, #2
10009cec:	4443      	add	r3, r8
10009cee:	335e      	adds	r3, #94	; 0x5e
10009cf0:	3201      	adds	r2, #1
10009cf2:	701a      	strb	r2, [r3, #0]
			break;
10009cf4:	e7a0      	b.n	10009c38 <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009cf6:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
10009cf8:	4828      	ldr	r0, [pc, #160]	; (10009d9c <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009cfa:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
10009cfc:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009cfe:	4b28      	ldr	r3, [pc, #160]	; (10009da0 <ble_slave_security_request_handler+0x1b4>)
10009d00:	4798      	blx	r3
10009d02:	4828      	ldr	r0, [pc, #160]	; (10009da4 <ble_slave_security_request_handler+0x1b8>)
10009d04:	4b28      	ldr	r3, [pc, #160]	; (10009da8 <ble_slave_security_request_handler+0x1bc>)
10009d06:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d08:	20e2      	movs	r0, #226	; 0xe2
10009d0a:	e7c2      	b.n	10009c92 <ble_slave_security_request_handler+0xa6>
10009d0c:	4b27      	ldr	r3, [pc, #156]	; (10009dac <ble_slave_security_request_handler+0x1c0>)
10009d0e:	0035      	movs	r5, r6
10009d10:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009d12:	230f      	movs	r3, #15
10009d14:	469b      	mov	fp, r3
10009d16:	9601      	str	r6, [sp, #4]
10009d18:	3568      	adds	r5, #104	; 0x68
10009d1a:	3660      	adds	r6, #96	; 0x60
10009d1c:	4446      	add	r6, r8
10009d1e:	4445      	add	r5, r8
10009d20:	47c8      	blx	r9
10009d22:	465b      	mov	r3, fp
10009d24:	4018      	ands	r0, r3
10009d26:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009d28:	47c8      	blx	r9
10009d2a:	465b      	mov	r3, fp
10009d2c:	4018      	ands	r0, r3
10009d2e:	74b0      	strb	r0, [r6, #18]
10009d30:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009d32:	42ae      	cmp	r6, r5
10009d34:	d1f4      	bne.n	10009d20 <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009d36:	230f      	movs	r3, #15
10009d38:	469b      	mov	fp, r3
10009d3a:	9e01      	ldr	r6, [sp, #4]
10009d3c:	3670      	adds	r6, #112	; 0x70
10009d3e:	4446      	add	r6, r8
10009d40:	47c8      	blx	r9
10009d42:	465b      	mov	r3, fp
10009d44:	4018      	ands	r0, r3
10009d46:	7028      	strb	r0, [r5, #0]
10009d48:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009d4a:	42b5      	cmp	r5, r6
10009d4c:	d1f8      	bne.n	10009d40 <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009d4e:	47c8      	blx	r9
10009d50:	9b00      	ldr	r3, [sp, #0]
10009d52:	1bdb      	subs	r3, r3, r7
10009d54:	009b      	lsls	r3, r3, #2
10009d56:	4443      	add	r3, r8
10009d58:	001a      	movs	r2, r3
10009d5a:	3270      	adds	r2, #112	; 0x70
10009d5c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009d5e:	2210      	movs	r2, #16
10009d60:	337a      	adds	r3, #122	; 0x7a
10009d62:	701a      	strb	r2, [r3, #0]
10009d64:	e787      	b.n	10009c76 <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009d66:	3301      	adds	r3, #1
10009d68:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009d6a:	71e3      	strb	r3, [r4, #7]
10009d6c:	e778      	b.n	10009c60 <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009d6e:	4653      	mov	r3, sl
10009d70:	4441      	add	r1, r8
10009d72:	8818      	ldrh	r0, [r3, #0]
10009d74:	311a      	adds	r1, #26
10009d76:	4b0e      	ldr	r3, [pc, #56]	; (10009db0 <ble_slave_security_request_handler+0x1c4>)
10009d78:	4798      	blx	r3
10009d7a:	2800      	cmp	r0, #0
10009d7c:	d100      	bne.n	10009d80 <ble_slave_security_request_handler+0x194>
10009d7e:	e787      	b.n	10009c90 <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009d80:	4b07      	ldr	r3, [pc, #28]	; (10009da0 <ble_slave_security_request_handler+0x1b4>)
10009d82:	4806      	ldr	r0, [pc, #24]	; (10009d9c <ble_slave_security_request_handler+0x1b0>)
10009d84:	4798      	blx	r3
10009d86:	480b      	ldr	r0, [pc, #44]	; (10009db4 <ble_slave_security_request_handler+0x1c8>)
10009d88:	4b07      	ldr	r3, [pc, #28]	; (10009da8 <ble_slave_security_request_handler+0x1bc>)
10009d8a:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009d8c:	20e2      	movs	r0, #226	; 0xe2
10009d8e:	e780      	b.n	10009c92 <ble_slave_security_request_handler+0xa6>
10009d90:	100115d1 	.word	0x100115d1
10009d94:	10014f34 	.word	0x10014f34
10009d98:	1000db39 	.word	0x1000db39
10009d9c:	100129dc 	.word	0x100129dc
10009da0:	10011839 	.word	0x10011839
10009da4:	10012e88 	.word	0x10012e88
10009da8:	10011719 	.word	0x10011719
10009dac:	1001184d 	.word	0x1001184d
10009db0:	1000dd25 	.word	0x1000dd25
10009db4:	10012e70 	.word	0x10012e70

10009db8 <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dba:	4656      	mov	r6, sl
10009dbc:	465f      	mov	r7, fp
10009dbe:	464d      	mov	r5, r9
10009dc0:	4644      	mov	r4, r8
10009dc2:	4b45      	ldr	r3, [pc, #276]	; (10009ed8 <ble_pair_request_handler+0x120>)
10009dc4:	b4f0      	push	{r4, r5, r6, r7}
10009dc6:	469a      	mov	sl, r3
10009dc8:	001a      	movs	r2, r3
10009dca:	2300      	movs	r3, #0
10009dcc:	b087      	sub	sp, #28
10009dce:	9000      	str	r0, [sp, #0]
10009dd0:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009dd2:	8911      	ldrh	r1, [r2, #8]
10009dd4:	001c      	movs	r4, r3
10009dd6:	4281      	cmp	r1, r0
10009dd8:	d040      	beq.n	10009e5c <ble_pair_request_handler+0xa4>
10009dda:	3301      	adds	r3, #1
10009ddc:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009dde:	2b05      	cmp	r3, #5
10009de0:	d1f7      	bne.n	10009dd2 <ble_pair_request_handler+0x1a>
10009de2:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009de4:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009de6:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009de8:	2302      	movs	r3, #2
10009dea:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009dec:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009dee:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009df0:	0162      	lsls	r2, r4, #5
10009df2:	4690      	mov	r8, r2
10009df4:	1b12      	subs	r2, r2, r4
10009df6:	0092      	lsls	r2, r2, #2
10009df8:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009dfa:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
10009dfc:	3b01      	subs	r3, #1
10009dfe:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009e00:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009e02:	2a02      	cmp	r2, #2
10009e04:	d064      	beq.n	10009ed0 <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009e06:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009e08:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
10009e0a:	2310      	movs	r3, #16
10009e0c:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
10009e0e:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009e10:	4643      	mov	r3, r8
10009e12:	1b1e      	subs	r6, r3, r4
10009e14:	4653      	mov	r3, sl
10009e16:	00b6      	lsls	r6, r6, #2
10009e18:	199b      	adds	r3, r3, r6
10009e1a:	7e1b      	ldrb	r3, [r3, #24]
10009e1c:	2b40      	cmp	r3, #64	; 0x40
10009e1e:	d02a      	beq.n	10009e76 <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009e20:	4643      	mov	r3, r8
10009e22:	1b1a      	subs	r2, r3, r4
10009e24:	0092      	lsls	r2, r2, #2
10009e26:	9b00      	ldr	r3, [sp, #0]
10009e28:	3260      	adds	r2, #96	; 0x60
10009e2a:	8818      	ldrh	r0, [r3, #0]
10009e2c:	4452      	add	r2, sl
10009e2e:	2300      	movs	r3, #0
10009e30:	0039      	movs	r1, r7
10009e32:	4c2a      	ldr	r4, [pc, #168]	; (10009edc <ble_pair_request_handler+0x124>)
10009e34:	47a0      	blx	r4
10009e36:	2800      	cmp	r0, #0
10009e38:	d009      	beq.n	10009e4e <ble_pair_request_handler+0x96>
	{
		features.bond = false;
10009e3a:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
10009e3c:	4828      	ldr	r0, [pc, #160]	; (10009ee0 <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009e3e:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
10009e40:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
10009e42:	4b28      	ldr	r3, [pc, #160]	; (10009ee4 <ble_pair_request_handler+0x12c>)
10009e44:	4798      	blx	r3
10009e46:	4828      	ldr	r0, [pc, #160]	; (10009ee8 <ble_pair_request_handler+0x130>)
10009e48:	4b28      	ldr	r3, [pc, #160]	; (10009eec <ble_pair_request_handler+0x134>)
10009e4a:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009e4c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009e4e:	b007      	add	sp, #28
10009e50:	bc3c      	pop	{r2, r3, r4, r5}
10009e52:	4690      	mov	r8, r2
10009e54:	4699      	mov	r9, r3
10009e56:	46a2      	mov	sl, r4
10009e58:	46ab      	mov	fp, r5
10009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009e5c:	0011      	movs	r1, r2
10009e5e:	315e      	adds	r1, #94	; 0x5e
10009e60:	7809      	ldrb	r1, [r1, #0]
10009e62:	2902      	cmp	r1, #2
10009e64:	d1b9      	bne.n	10009dda <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009e66:	2203      	movs	r2, #3
10009e68:	015b      	lsls	r3, r3, #5
10009e6a:	1b1b      	subs	r3, r3, r4
10009e6c:	009b      	lsls	r3, r3, #2
10009e6e:	4453      	add	r3, sl
10009e70:	335e      	adds	r3, #94	; 0x5e
10009e72:	701a      	strb	r2, [r3, #0]
			break;
10009e74:	e7b6      	b.n	10009de4 <ble_pair_request_handler+0x2c>
10009e76:	4b1e      	ldr	r3, [pc, #120]	; (10009ef0 <ble_pair_request_handler+0x138>)
10009e78:	0035      	movs	r5, r6
10009e7a:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009e7c:	230f      	movs	r3, #15
10009e7e:	469b      	mov	fp, r3
10009e80:	9601      	str	r6, [sp, #4]
10009e82:	3568      	adds	r5, #104	; 0x68
10009e84:	3660      	adds	r6, #96	; 0x60
10009e86:	4456      	add	r6, sl
10009e88:	4455      	add	r5, sl
10009e8a:	47c8      	blx	r9
10009e8c:	465b      	mov	r3, fp
10009e8e:	4018      	ands	r0, r3
10009e90:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009e92:	47c8      	blx	r9
10009e94:	465b      	mov	r3, fp
10009e96:	4018      	ands	r0, r3
10009e98:	74b0      	strb	r0, [r6, #18]
10009e9a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009e9c:	42ae      	cmp	r6, r5
10009e9e:	d1f4      	bne.n	10009e8a <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009ea0:	230f      	movs	r3, #15
10009ea2:	469b      	mov	fp, r3
10009ea4:	9e01      	ldr	r6, [sp, #4]
10009ea6:	3670      	adds	r6, #112	; 0x70
10009ea8:	4456      	add	r6, sl
10009eaa:	47c8      	blx	r9
10009eac:	465b      	mov	r3, fp
10009eae:	4018      	ands	r0, r3
10009eb0:	7028      	strb	r0, [r5, #0]
10009eb2:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009eb4:	42b5      	cmp	r5, r6
10009eb6:	d1f8      	bne.n	10009eaa <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009eb8:	47c8      	blx	r9
10009eba:	4643      	mov	r3, r8
10009ebc:	1b1b      	subs	r3, r3, r4
10009ebe:	009b      	lsls	r3, r3, #2
10009ec0:	4453      	add	r3, sl
10009ec2:	001a      	movs	r2, r3
10009ec4:	3270      	adds	r2, #112	; 0x70
10009ec6:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009ec8:	2210      	movs	r2, #16
10009eca:	337a      	adds	r3, #122	; 0x7a
10009ecc:	701a      	strb	r2, [r3, #0]
10009ece:	e7a7      	b.n	10009e20 <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009ed0:	3302      	adds	r3, #2
10009ed2:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009ed4:	71fb      	strb	r3, [r7, #7]
10009ed6:	e798      	b.n	10009e0a <ble_pair_request_handler+0x52>
10009ed8:	10014f34 	.word	0x10014f34
10009edc:	1000db39 	.word	0x1000db39
10009ee0:	100129dc 	.word	0x100129dc
10009ee4:	10011839 	.word	0x10011839
10009ee8:	10012eb4 	.word	0x10012eb4
10009eec:	10011719 	.word	0x10011719
10009ef0:	1001184d 	.word	0x1001184d

10009ef4 <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ef6:	465f      	mov	r7, fp
10009ef8:	4656      	mov	r6, sl
10009efa:	464d      	mov	r5, r9
10009efc:	4644      	mov	r4, r8
10009efe:	b4f0      	push	{r4, r5, r6, r7}
10009f00:	0007      	movs	r7, r0
10009f02:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009f04:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009f06:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009f08:	2206      	movs	r2, #6
10009f0a:	4940      	ldr	r1, [pc, #256]	; (1000a00c <ble_pair_key_request_handler+0x118>)
10009f0c:	4e40      	ldr	r6, [pc, #256]	; (1000a010 <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009f0e:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009f10:	0020      	movs	r0, r4
10009f12:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009f14:	2204      	movs	r2, #4
10009f16:	0039      	movs	r1, r7
10009f18:	0028      	movs	r0, r5
10009f1a:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10009f1c:	78eb      	ldrb	r3, [r5, #3]
10009f1e:	2b00      	cmp	r3, #0
10009f20:	d02e      	beq.n	10009f80 <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009f22:	2380      	movs	r3, #128	; 0x80
10009f24:	886a      	ldrh	r2, [r5, #2]
10009f26:	005b      	lsls	r3, r3, #1
10009f28:	429a      	cmp	r2, r3
10009f2a:	d00b      	beq.n	10009f44 <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009f2c:	78ab      	ldrb	r3, [r5, #2]
10009f2e:	2b01      	cmp	r3, #1
10009f30:	d052      	beq.n	10009fd8 <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009f32:	2400      	movs	r4, #0
}
10009f34:	0020      	movs	r0, r4
10009f36:	b007      	add	sp, #28
10009f38:	bc3c      	pop	{r2, r3, r4, r5}
10009f3a:	4690      	mov	r8, r2
10009f3c:	4699      	mov	r9, r3
10009f3e:	46a2      	mov	sl, r4
10009f40:	46ab      	mov	fp, r5
10009f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009f44:	4b33      	ldr	r3, [pc, #204]	; (1000a014 <ble_pair_key_request_handler+0x120>)
10009f46:	0018      	movs	r0, r3
10009f48:	469a      	mov	sl, r3
10009f4a:	4b33      	ldr	r3, [pc, #204]	; (1000a018 <ble_pair_key_request_handler+0x124>)
10009f4c:	4699      	mov	r9, r3
10009f4e:	4798      	blx	r3
10009f50:	4b32      	ldr	r3, [pc, #200]	; (1000a01c <ble_pair_key_request_handler+0x128>)
10009f52:	4833      	ldr	r0, [pc, #204]	; (1000a020 <ble_pair_key_request_handler+0x12c>)
10009f54:	4698      	mov	r8, r3
10009f56:	4798      	blx	r3
10009f58:	4e32      	ldr	r6, [pc, #200]	; (1000a024 <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009f5a:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
10009f5c:	5de0      	ldrb	r0, [r4, r7]
10009f5e:	3701      	adds	r7, #1
10009f60:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10009f62:	2f06      	cmp	r7, #6
10009f64:	d1fa      	bne.n	10009f5c <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
10009f66:	9b01      	ldr	r3, [sp, #4]
10009f68:	78a9      	ldrb	r1, [r5, #2]
10009f6a:	8818      	ldrh	r0, [r3, #0]
10009f6c:	0022      	movs	r2, r4
10009f6e:	4b2e      	ldr	r3, [pc, #184]	; (1000a028 <ble_pair_key_request_handler+0x134>)
10009f70:	4798      	blx	r3
10009f72:	2800      	cmp	r0, #0
10009f74:	d0dd      	beq.n	10009f32 <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
10009f76:	4650      	mov	r0, sl
10009f78:	47c8      	blx	r9
10009f7a:	482c      	ldr	r0, [pc, #176]	; (1000a02c <ble_pair_key_request_handler+0x138>)
10009f7c:	47c0      	blx	r8
10009f7e:	e7d8      	b.n	10009f32 <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009f80:	4b24      	ldr	r3, [pc, #144]	; (1000a014 <ble_pair_key_request_handler+0x120>)
10009f82:	0018      	movs	r0, r3
10009f84:	469a      	mov	sl, r3
10009f86:	4b24      	ldr	r3, [pc, #144]	; (1000a018 <ble_pair_key_request_handler+0x124>)
10009f88:	4699      	mov	r9, r3
10009f8a:	4798      	blx	r3
10009f8c:	4b23      	ldr	r3, [pc, #140]	; (1000a01c <ble_pair_key_request_handler+0x128>)
10009f8e:	4828      	ldr	r0, [pc, #160]	; (1000a030 <ble_pair_key_request_handler+0x13c>)
10009f90:	4698      	mov	r8, r3
10009f92:	4798      	blx	r3
10009f94:	2300      	movs	r3, #0
10009f96:	4f27      	ldr	r7, [pc, #156]	; (1000a034 <ble_pair_key_request_handler+0x140>)
10009f98:	469b      	mov	fp, r3
10009f9a:	e003      	b.n	10009fa4 <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009f9c:	001a      	movs	r2, r3
10009f9e:	3a30      	subs	r2, #48	; 0x30
10009fa0:	2a09      	cmp	r2, #9
10009fa2:	d921      	bls.n	10009fe8 <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009fa4:	201e      	movs	r0, #30
10009fa6:	47b8      	blx	r7
10009fa8:	b2c3      	uxtb	r3, r0

			if (!pin) {
10009faa:	2b00      	cmp	r3, #0
10009fac:	d1f6      	bne.n	10009f9c <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
10009fae:	4650      	mov	r0, sl
10009fb0:	47c8      	blx	r9
10009fb2:	4821      	ldr	r0, [pc, #132]	; (1000a038 <ble_pair_key_request_handler+0x144>)
10009fb4:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
10009fb6:	4650      	mov	r0, sl
10009fb8:	47c8      	blx	r9
10009fba:	4820      	ldr	r0, [pc, #128]	; (1000a03c <ble_pair_key_request_handler+0x148>)
10009fbc:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
10009fbe:	9b01      	ldr	r3, [sp, #4]
10009fc0:	2113      	movs	r1, #19
10009fc2:	8818      	ldrh	r0, [r3, #0]
10009fc4:	4b1e      	ldr	r3, [pc, #120]	; (1000a040 <ble_pair_key_request_handler+0x14c>)
10009fc6:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009fc8:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009fca:	2800      	cmp	r0, #0
10009fcc:	d0b2      	beq.n	10009f34 <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009fce:	4650      	mov	r0, sl
10009fd0:	47c8      	blx	r9
10009fd2:	481c      	ldr	r0, [pc, #112]	; (1000a044 <ble_pair_key_request_handler+0x150>)
10009fd4:	47c0      	blx	r8
10009fd6:	e7ad      	b.n	10009f34 <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009fd8:	4b0f      	ldr	r3, [pc, #60]	; (1000a018 <ble_pair_key_request_handler+0x124>)
10009fda:	480e      	ldr	r0, [pc, #56]	; (1000a014 <ble_pair_key_request_handler+0x120>)
10009fdc:	4798      	blx	r3
10009fde:	481a      	ldr	r0, [pc, #104]	; (1000a048 <ble_pair_key_request_handler+0x154>)
10009fe0:	4b0e      	ldr	r3, [pc, #56]	; (1000a01c <ble_pair_key_request_handler+0x128>)
10009fe2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10009fe4:	2400      	movs	r4, #0
10009fe6:	e7a5      	b.n	10009f34 <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
10009fe8:	465a      	mov	r2, fp
10009fea:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
10009fec:	23ff      	movs	r3, #255	; 0xff
10009fee:	4e0d      	ldr	r6, [pc, #52]	; (1000a024 <ble_pair_key_request_handler+0x130>)
10009ff0:	4018      	ands	r0, r3
10009ff2:	47b0      	blx	r6
10009ff4:	2301      	movs	r3, #1
10009ff6:	469c      	mov	ip, r3
10009ff8:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10009ffa:	465b      	mov	r3, fp
10009ffc:	2b06      	cmp	r3, #6
10009ffe:	d1d1      	bne.n	10009fa4 <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a000:	4650      	mov	r0, sl
1000a002:	47c8      	blx	r9
1000a004:	4811      	ldr	r0, [pc, #68]	; (1000a04c <ble_pair_key_request_handler+0x158>)
1000a006:	47c0      	blx	r8
1000a008:	e7a7      	b.n	10009f5a <ble_pair_key_request_handler+0x66>
1000a00a:	46c0      	nop			; (mov r8, r8)
1000a00c:	10012d64 	.word	0x10012d64
1000a010:	100115bf 	.word	0x100115bf
1000a014:	100129dc 	.word	0x100129dc
1000a018:	10011839 	.word	0x10011839
1000a01c:	10011719 	.word	0x10011719
1000a020:	10012f24 	.word	0x10012f24
1000a024:	1001174d 	.word	0x1001174d
1000a028:	1000dc69 	.word	0x1000dc69
1000a02c:	10012f5c 	.word	0x10012f5c
1000a030:	10012edc 	.word	0x10012edc
1000a034:	1000ab59 	.word	0x1000ab59
1000a038:	10012f04 	.word	0x10012f04
1000a03c:	10012f10 	.word	0x10012f10
1000a040:	1000d7cd 	.word	0x1000d7cd
1000a044:	10012df8 	.word	0x10012df8
1000a048:	10012f74 	.word	0x10012f74
1000a04c:	10012f90 	.word	0x10012f90

1000a050 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a050:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a052:	4647      	mov	r7, r8
1000a054:	4e29      	ldr	r6, [pc, #164]	; (1000a0fc <ble_encryption_request_handler+0xac>)
1000a056:	b480      	push	{r7}
1000a058:	0031      	movs	r1, r6
1000a05a:	0007      	movs	r7, r0
1000a05c:	2200      	movs	r2, #0
1000a05e:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a060:	8908      	ldrh	r0, [r1, #8]
1000a062:	0014      	movs	r4, r2
1000a064:	42a8      	cmp	r0, r5
1000a066:	d01c      	beq.n	1000a0a2 <ble_encryption_request_handler+0x52>
1000a068:	3201      	adds	r2, #1
1000a06a:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a06c:	2a05      	cmp	r2, #5
1000a06e:	d1f7      	bne.n	1000a060 <ble_encryption_request_handler+0x10>
1000a070:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a072:	4b23      	ldr	r3, [pc, #140]	; (1000a100 <ble_encryption_request_handler+0xb0>)
1000a074:	4f23      	ldr	r7, [pc, #140]	; (1000a104 <ble_encryption_request_handler+0xb4>)
1000a076:	4698      	mov	r8, r3
1000a078:	0018      	movs	r0, r3
1000a07a:	47b8      	blx	r7
1000a07c:	4d22      	ldr	r5, [pc, #136]	; (1000a108 <ble_encryption_request_handler+0xb8>)
1000a07e:	4823      	ldr	r0, [pc, #140]	; (1000a10c <ble_encryption_request_handler+0xbc>)
1000a080:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a082:	4640      	mov	r0, r8
1000a084:	47b8      	blx	r7
1000a086:	4822      	ldr	r0, [pc, #136]	; (1000a110 <ble_encryption_request_handler+0xc0>)
1000a088:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a08a:	0163      	lsls	r3, r4, #5
1000a08c:	1b1b      	subs	r3, r3, r4
1000a08e:	009b      	lsls	r3, r3, #2
1000a090:	18f3      	adds	r3, r6, r3
1000a092:	8918      	ldrh	r0, [r3, #8]
1000a094:	2105      	movs	r1, #5
1000a096:	4b1f      	ldr	r3, [pc, #124]	; (1000a114 <ble_encryption_request_handler+0xc4>)
1000a098:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a09a:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
1000a09c:	bc04      	pop	{r2}
1000a09e:	4690      	mov	r8, r2
1000a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a0a2:	000b      	movs	r3, r1
1000a0a4:	335e      	adds	r3, #94	; 0x5e
1000a0a6:	781b      	ldrb	r3, [r3, #0]
1000a0a8:	2b01      	cmp	r3, #1
1000a0aa:	d9dd      	bls.n	1000a068 <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a0ac:	0155      	lsls	r5, r2, #5
1000a0ae:	1aad      	subs	r5, r5, r2
1000a0b0:	2206      	movs	r2, #6
1000a0b2:	00ad      	lsls	r5, r5, #2
1000a0b4:	1973      	adds	r3, r6, r5
1000a0b6:	4698      	mov	r8, r3
1000a0b8:	335e      	adds	r3, #94	; 0x5e
1000a0ba:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a0bc:	8a5a      	ldrh	r2, [r3, #18]
1000a0be:	887b      	ldrh	r3, [r7, #2]
1000a0c0:	429a      	cmp	r2, r3
1000a0c2:	d1d6      	bne.n	1000a072 <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a0c4:	1971      	adds	r1, r6, r5
1000a0c6:	3172      	adds	r1, #114	; 0x72
1000a0c8:	1d38      	adds	r0, r7, #4
1000a0ca:	2208      	movs	r2, #8
1000a0cc:	4b12      	ldr	r3, [pc, #72]	; (1000a118 <ble_encryption_request_handler+0xc8>)
1000a0ce:	4798      	blx	r3
1000a0d0:	2800      	cmp	r0, #0
1000a0d2:	d1ce      	bne.n	1000a072 <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a0d4:	002b      	movs	r3, r5
1000a0d6:	4642      	mov	r2, r8
1000a0d8:	3360      	adds	r3, #96	; 0x60
1000a0da:	7d11      	ldrb	r1, [r2, #20]
1000a0dc:	199b      	adds	r3, r3, r6
1000a0de:	8838      	ldrh	r0, [r7, #0]
1000a0e0:	2201      	movs	r2, #1
1000a0e2:	4c0e      	ldr	r4, [pc, #56]	; (1000a11c <ble_encryption_request_handler+0xcc>)
1000a0e4:	47a0      	blx	r4
1000a0e6:	2800      	cmp	r0, #0
1000a0e8:	d0d8      	beq.n	1000a09c <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a0ea:	4b06      	ldr	r3, [pc, #24]	; (1000a104 <ble_encryption_request_handler+0xb4>)
1000a0ec:	4804      	ldr	r0, [pc, #16]	; (1000a100 <ble_encryption_request_handler+0xb0>)
1000a0ee:	4798      	blx	r3
1000a0f0:	480b      	ldr	r0, [pc, #44]	; (1000a120 <ble_encryption_request_handler+0xd0>)
1000a0f2:	4b05      	ldr	r3, [pc, #20]	; (1000a108 <ble_encryption_request_handler+0xb8>)
1000a0f4:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a0f6:	2000      	movs	r0, #0
1000a0f8:	e7d0      	b.n	1000a09c <ble_encryption_request_handler+0x4c>
1000a0fa:	46c0      	nop			; (mov r8, r8)
1000a0fc:	10014f34 	.word	0x10014f34
1000a100:	100129dc 	.word	0x100129dc
1000a104:	10011839 	.word	0x10011839
1000a108:	10011719 	.word	0x10011719
1000a10c:	10012fa4 	.word	0x10012fa4
1000a110:	10012fdc 	.word	0x10012fdc
1000a114:	1000d7cd 	.word	0x1000d7cd
1000a118:	100115a1 	.word	0x100115a1
1000a11c:	1000dd9d 	.word	0x1000dd9d
1000a120:	10013034 	.word	0x10013034

1000a124 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a124:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a126:	7800      	ldrb	r0, [r0, #0]
1000a128:	2800      	cmp	r0, #0
1000a12a:	d006      	beq.n	1000a13a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a12c:	4b03      	ldr	r3, [pc, #12]	; (1000a13c <ble_scan_report_handler+0x18>)
1000a12e:	4804      	ldr	r0, [pc, #16]	; (1000a140 <ble_scan_report_handler+0x1c>)
1000a130:	4798      	blx	r3
1000a132:	4804      	ldr	r0, [pc, #16]	; (1000a144 <ble_scan_report_handler+0x20>)
1000a134:	4b04      	ldr	r3, [pc, #16]	; (1000a148 <ble_scan_report_handler+0x24>)
1000a136:	4798      	blx	r3
1000a138:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000a13a:	bd10      	pop	{r4, pc}
1000a13c:	10011839 	.word	0x10011839
1000a140:	100129dc 	.word	0x100129dc
1000a144:	10013054 	.word	0x10013054
1000a148:	10011719 	.word	0x10011719

1000a14c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a14c:	b510      	push	{r4, lr}
1000a14e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a150:	78c0      	ldrb	r0, [r0, #3]
1000a152:	2800      	cmp	r0, #0
1000a154:	d008      	beq.n	1000a168 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a156:	4b05      	ldr	r3, [pc, #20]	; (1000a16c <ble_mtu_changed_cmd_complete_handler+0x20>)
1000a158:	4805      	ldr	r0, [pc, #20]	; (1000a170 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000a15a:	4798      	blx	r3
1000a15c:	78a2      	ldrb	r2, [r4, #2]
1000a15e:	8821      	ldrh	r1, [r4, #0]
1000a160:	4804      	ldr	r0, [pc, #16]	; (1000a174 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000a162:	4b05      	ldr	r3, [pc, #20]	; (1000a178 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000a164:	4798      	blx	r3
1000a166:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000a168:	bd10      	pop	{r4, pc}
1000a16a:	46c0      	nop			; (mov r8, r8)
1000a16c:	10011839 	.word	0x10011839
1000a170:	100129dc 	.word	0x100129dc
1000a174:	10013068 	.word	0x10013068
1000a178:	10011719 	.word	0x10011719

1000a17c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a17e:	4d25      	ldr	r5, [pc, #148]	; (1000a214 <ble_encryption_status_change_handler+0x98>)
1000a180:	2400      	movs	r4, #0
1000a182:	002b      	movs	r3, r5
1000a184:	0007      	movs	r7, r0
1000a186:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a188:	891a      	ldrh	r2, [r3, #8]
1000a18a:	0021      	movs	r1, r4
1000a18c:	4282      	cmp	r2, r0
1000a18e:	d018      	beq.n	1000a1c2 <ble_encryption_status_change_handler+0x46>
1000a190:	3401      	adds	r4, #1
1000a192:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a194:	2c05      	cmp	r4, #5
1000a196:	d1f7      	bne.n	1000a188 <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a198:	78be      	ldrb	r6, [r7, #2]
1000a19a:	2e00      	cmp	r6, #0
1000a19c:	d02c      	beq.n	1000a1f8 <ble_encryption_status_change_handler+0x7c>
1000a19e:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a1a0:	014b      	lsls	r3, r1, #5
1000a1a2:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a1a4:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a1a6:	00a4      	lsls	r4, r4, #2
1000a1a8:	192c      	adds	r4, r5, r4
1000a1aa:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a1ac:	345e      	adds	r4, #94	; 0x5e
1000a1ae:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a1b0:	4819      	ldr	r0, [pc, #100]	; (1000a218 <ble_encryption_status_change_handler+0x9c>)
1000a1b2:	4b1a      	ldr	r3, [pc, #104]	; (1000a21c <ble_encryption_status_change_handler+0xa0>)
1000a1b4:	4798      	blx	r3
1000a1b6:	481a      	ldr	r0, [pc, #104]	; (1000a220 <ble_encryption_status_change_handler+0xa4>)
1000a1b8:	4b1a      	ldr	r3, [pc, #104]	; (1000a224 <ble_encryption_status_change_handler+0xa8>)
1000a1ba:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a1bc:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a1be:	0030      	movs	r0, r6
1000a1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a1c2:	001a      	movs	r2, r3
1000a1c4:	325e      	adds	r2, #94	; 0x5e
1000a1c6:	7812      	ldrb	r2, [r2, #0]
1000a1c8:	2a06      	cmp	r2, #6
1000a1ca:	d1e1      	bne.n	1000a190 <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a1cc:	78be      	ldrb	r6, [r7, #2]
1000a1ce:	2e00      	cmp	r6, #0
1000a1d0:	d1e6      	bne.n	1000a1a0 <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000a1d2:	4b12      	ldr	r3, [pc, #72]	; (1000a21c <ble_encryption_status_change_handler+0xa0>)
1000a1d4:	4810      	ldr	r0, [pc, #64]	; (1000a218 <ble_encryption_status_change_handler+0x9c>)
1000a1d6:	4798      	blx	r3
1000a1d8:	4b12      	ldr	r3, [pc, #72]	; (1000a224 <ble_encryption_status_change_handler+0xa8>)
1000a1da:	4813      	ldr	r0, [pc, #76]	; (1000a228 <ble_encryption_status_change_handler+0xac>)
1000a1dc:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a1de:	0163      	lsls	r3, r4, #5
1000a1e0:	1b1c      	subs	r4, r3, r4
1000a1e2:	00a4      	lsls	r4, r4, #2
1000a1e4:	192c      	adds	r4, r5, r4
1000a1e6:	0023      	movs	r3, r4
1000a1e8:	2208      	movs	r2, #8
1000a1ea:	335e      	adds	r3, #94	; 0x5e
1000a1ec:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a1ee:	78fb      	ldrb	r3, [r7, #3]
1000a1f0:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a1f2:	78bb      	ldrb	r3, [r7, #2]
1000a1f4:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a1f6:	e7e2      	b.n	1000a1be <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a1f8:	4e07      	ldr	r6, [pc, #28]	; (1000a218 <ble_encryption_status_change_handler+0x9c>)
1000a1fa:	4d08      	ldr	r5, [pc, #32]	; (1000a21c <ble_encryption_status_change_handler+0xa0>)
1000a1fc:	0030      	movs	r0, r6
1000a1fe:	47a8      	blx	r5
1000a200:	4c08      	ldr	r4, [pc, #32]	; (1000a224 <ble_encryption_status_change_handler+0xa8>)
1000a202:	4809      	ldr	r0, [pc, #36]	; (1000a228 <ble_encryption_status_change_handler+0xac>)
1000a204:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a206:	0030      	movs	r0, r6
1000a208:	47a8      	blx	r5
1000a20a:	4808      	ldr	r0, [pc, #32]	; (1000a22c <ble_encryption_status_change_handler+0xb0>)
1000a20c:	47a0      	blx	r4
1000a20e:	26e2      	movs	r6, #226	; 0xe2
1000a210:	e7d5      	b.n	1000a1be <ble_encryption_status_change_handler+0x42>
1000a212:	46c0      	nop			; (mov r8, r8)
1000a214:	10014f34 	.word	0x10014f34
1000a218:	100129dc 	.word	0x100129dc
1000a21c:	10011839 	.word	0x10011839
1000a220:	100130a0 	.word	0x100130a0
1000a224:	10011719 	.word	0x10011719
1000a228:	100130b4 	.word	0x100130b4
1000a22c:	100130d8 	.word	0x100130d8

1000a230 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a232:	4c15      	ldr	r4, [pc, #84]	; (1000a288 <ble_scan_info_handler+0x58>)
1000a234:	7823      	ldrb	r3, [r4, #0]
1000a236:	2b13      	cmp	r3, #19
1000a238:	d90d      	bls.n	1000a256 <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a23a:	4f14      	ldr	r7, [pc, #80]	; (1000a28c <ble_scan_info_handler+0x5c>)
1000a23c:	4e14      	ldr	r6, [pc, #80]	; (1000a290 <ble_scan_info_handler+0x60>)
1000a23e:	0038      	movs	r0, r7
1000a240:	47b0      	blx	r6
1000a242:	4814      	ldr	r0, [pc, #80]	; (1000a294 <ble_scan_info_handler+0x64>)
1000a244:	4d14      	ldr	r5, [pc, #80]	; (1000a298 <ble_scan_info_handler+0x68>)
1000a246:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a248:	4b14      	ldr	r3, [pc, #80]	; (1000a29c <ble_scan_info_handler+0x6c>)
1000a24a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a24c:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a24e:	2800      	cmp	r0, #0
1000a250:	d115      	bne.n	1000a27e <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000a252:	0020      	movs	r0, r4
1000a254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a256:	7823      	ldrb	r3, [r4, #0]
1000a258:	0001      	movs	r1, r0
1000a25a:	b2db      	uxtb	r3, r3
1000a25c:	009a      	lsls	r2, r3, #2
1000a25e:	18d2      	adds	r2, r2, r3
1000a260:	00d2      	lsls	r2, r2, #3
1000a262:	18d3      	adds	r3, r2, r3
1000a264:	4a0e      	ldr	r2, [pc, #56]	; (1000a2a0 <ble_scan_info_handler+0x70>)
1000a266:	189b      	adds	r3, r3, r2
1000a268:	0018      	movs	r0, r3
1000a26a:	2229      	movs	r2, #41	; 0x29
1000a26c:	4b0d      	ldr	r3, [pc, #52]	; (1000a2a4 <ble_scan_info_handler+0x74>)
1000a26e:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a270:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a272:	7823      	ldrb	r3, [r4, #0]
1000a274:	3301      	adds	r3, #1
1000a276:	b2db      	uxtb	r3, r3
1000a278:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000a27a:	2400      	movs	r4, #0
1000a27c:	e7e9      	b.n	1000a252 <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000a27e:	0038      	movs	r0, r7
1000a280:	47b0      	blx	r6
1000a282:	4809      	ldr	r0, [pc, #36]	; (1000a2a8 <ble_scan_info_handler+0x78>)
1000a284:	47a8      	blx	r5
1000a286:	e7e4      	b.n	1000a252 <ble_scan_info_handler+0x22>
1000a288:	10014d28 	.word	0x10014d28
1000a28c:	100129dc 	.word	0x100129dc
1000a290:	10011839 	.word	0x10011839
1000a294:	10013100 	.word	0x10013100
1000a298:	10011719 	.word	0x10011719
1000a29c:	1000d7ad 	.word	0x1000d7ad
1000a2a0:	10015218 	.word	0x10015218
1000a2a4:	100115bf 	.word	0x100115bf
1000a2a8:	10013138 	.word	0x10013138

1000a2ac <ble_mtu_changed_indication_handler>:
1000a2ac:	2000      	movs	r0, #0
1000a2ae:	4770      	bx	lr

1000a2b0 <ble_undefined_event_handler>:
1000a2b0:	2000      	movs	r0, #0
1000a2b2:	4770      	bx	lr

1000a2b4 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a2b6:	465f      	mov	r7, fp
1000a2b8:	4656      	mov	r6, sl
1000a2ba:	464d      	mov	r5, r9
1000a2bc:	4644      	mov	r4, r8
1000a2be:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a2c0:	2700      	movs	r7, #0
1000a2c2:	4b82      	ldr	r3, [pc, #520]	; (1000a4cc <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a2c4:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a2c6:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a2c8:	2207      	movs	r2, #7
1000a2ca:	2100      	movs	r1, #0
1000a2cc:	4b80      	ldr	r3, [pc, #512]	; (1000a4d0 <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a2ce:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a2d0:	4880      	ldr	r0, [pc, #512]	; (1000a4d4 <ble_device_init+0x220>)
1000a2d2:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a2d4:	2212      	movs	r2, #18
1000a2d6:	2100      	movs	r1, #0
1000a2d8:	4b7d      	ldr	r3, [pc, #500]	; (1000a4d0 <ble_device_init+0x21c>)
1000a2da:	487f      	ldr	r0, [pc, #508]	; (1000a4d8 <ble_device_init+0x224>)
1000a2dc:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000a2de:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a2e0:	4b7e      	ldr	r3, [pc, #504]	; (1000a4dc <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000a2e2:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a2e4:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a2e6:	2100      	movs	r1, #0
1000a2e8:	4b79      	ldr	r3, [pc, #484]	; (1000a4d0 <ble_device_init+0x21c>)
1000a2ea:	487d      	ldr	r0, [pc, #500]	; (1000a4e0 <ble_device_init+0x22c>)
1000a2ec:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a2ee:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000a2f0:	4b7c      	ldr	r3, [pc, #496]	; (1000a4e4 <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a2f2:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000a2f4:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a2f6:	2100      	movs	r1, #0
1000a2f8:	4b75      	ldr	r3, [pc, #468]	; (1000a4d0 <ble_device_init+0x21c>)
1000a2fa:	487b      	ldr	r0, [pc, #492]	; (1000a4e8 <ble_device_init+0x234>)
1000a2fc:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a2fe:	4b7b      	ldr	r3, [pc, #492]	; (1000a4ec <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a300:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a302:	469a      	mov	sl, r3
1000a304:	2380      	movs	r3, #128	; 0x80
1000a306:	00db      	lsls	r3, r3, #3
1000a308:	4699      	mov	r9, r3
1000a30a:	001a      	movs	r2, r3
1000a30c:	2100      	movs	r1, #0
1000a30e:	4650      	mov	r0, sl
1000a310:	4b6f      	ldr	r3, [pc, #444]	; (1000a4d0 <ble_device_init+0x21c>)
1000a312:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a314:	4d76      	ldr	r5, [pc, #472]	; (1000a4f0 <ble_device_init+0x23c>)
1000a316:	0164      	lsls	r4, r4, #5
1000a318:	0022      	movs	r2, r4
1000a31a:	2100      	movs	r1, #0
1000a31c:	0028      	movs	r0, r5
1000a31e:	4b6c      	ldr	r3, [pc, #432]	; (1000a4d0 <ble_device_init+0x21c>)
1000a320:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a322:	4b74      	ldr	r3, [pc, #464]	; (1000a4f4 <ble_device_init+0x240>)
1000a324:	221c      	movs	r2, #28
1000a326:	469b      	mov	fp, r3
1000a328:	0018      	movs	r0, r3
1000a32a:	2100      	movs	r1, #0
1000a32c:	4b68      	ldr	r3, [pc, #416]	; (1000a4d0 <ble_device_init+0x21c>)
1000a32e:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a330:	465b      	mov	r3, fp
1000a332:	4652      	mov	r2, sl
1000a334:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a336:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a338:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a33a:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a33c:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a33e:	4b6e      	ldr	r3, [pc, #440]	; (1000a4f8 <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a340:	4d6e      	ldr	r5, [pc, #440]	; (1000a4fc <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a342:	601f      	str	r7, [r3, #0]
1000a344:	605f      	str	r7, [r3, #4]
1000a346:	609f      	str	r7, [r3, #8]
1000a348:	60df      	str	r7, [r3, #12]
1000a34a:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a34c:	4b6c      	ldr	r3, [pc, #432]	; (1000a500 <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a34e:	4c6d      	ldr	r4, [pc, #436]	; (1000a504 <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a350:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a352:	4b6d      	ldr	r3, [pc, #436]	; (1000a508 <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a354:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a356:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a358:	4b6c      	ldr	r3, [pc, #432]	; (1000a50c <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a35a:	606f      	str	r7, [r5, #4]
1000a35c:	60af      	str	r7, [r5, #8]
1000a35e:	60ef      	str	r7, [r5, #12]
1000a360:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a362:	6027      	str	r7, [r4, #0]
1000a364:	6067      	str	r7, [r4, #4]
1000a366:	60a7      	str	r7, [r4, #8]
1000a368:	60e7      	str	r7, [r4, #12]
1000a36a:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a36c:	601f      	str	r7, [r3, #0]
1000a36e:	605f      	str	r7, [r3, #4]
1000a370:	609f      	str	r7, [r3, #8]
1000a372:	60df      	str	r7, [r3, #12]
1000a374:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a376:	4b66      	ldr	r3, [pc, #408]	; (1000a510 <ble_device_init+0x25c>)
1000a378:	601f      	str	r7, [r3, #0]
1000a37a:	4b66      	ldr	r3, [pc, #408]	; (1000a514 <ble_device_init+0x260>)
1000a37c:	4698      	mov	r8, r3
1000a37e:	239b      	movs	r3, #155	; 0x9b
1000a380:	009b      	lsls	r3, r3, #2
1000a382:	4443      	add	r3, r8
1000a384:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a386:	2340      	movs	r3, #64	; 0x40
1000a388:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a38a:	227c      	movs	r2, #124	; 0x7c
1000a38c:	2100      	movs	r1, #0
1000a38e:	4640      	mov	r0, r8
1000a390:	4b4f      	ldr	r3, [pc, #316]	; (1000a4d0 <ble_device_init+0x21c>)
1000a392:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a394:	4642      	mov	r2, r8
1000a396:	2300      	movs	r3, #0
1000a398:	325e      	adds	r2, #94	; 0x5e
1000a39a:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a39c:	4649      	mov	r1, r9
1000a39e:	4642      	mov	r2, r8
1000a3a0:	7611      	strb	r1, [r2, #24]
1000a3a2:	227c      	movs	r2, #124	; 0x7c
1000a3a4:	4694      	mov	ip, r2
1000a3a6:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3a8:	45d0      	cmp	r8, sl
1000a3aa:	d1ee      	bne.n	1000a38a <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a3ac:	4a5a      	ldr	r2, [pc, #360]	; (1000a518 <ble_device_init+0x264>)
1000a3ae:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a3b0:	4b5a      	ldr	r3, [pc, #360]	; (1000a51c <ble_device_init+0x268>)
1000a3b2:	0018      	movs	r0, r3
1000a3b4:	469a      	mov	sl, r3
1000a3b6:	4b5a      	ldr	r3, [pc, #360]	; (1000a520 <ble_device_init+0x26c>)
1000a3b8:	4699      	mov	r9, r3
1000a3ba:	4798      	blx	r3
1000a3bc:	4b59      	ldr	r3, [pc, #356]	; (1000a524 <ble_device_init+0x270>)
1000a3be:	485a      	ldr	r0, [pc, #360]	; (1000a528 <ble_device_init+0x274>)
1000a3c0:	4698      	mov	r8, r3
1000a3c2:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a3c4:	4658      	mov	r0, fp
1000a3c6:	4b59      	ldr	r3, [pc, #356]	; (1000a52c <ble_device_init+0x278>)
1000a3c8:	4798      	blx	r3
1000a3ca:	2800      	cmp	r0, #0
1000a3cc:	d15e      	bne.n	1000a48c <ble_device_init+0x1d8>
1000a3ce:	002b      	movs	r3, r5
1000a3d0:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a3d2:	682a      	ldr	r2, [r5, #0]
1000a3d4:	2a00      	cmp	r2, #0
1000a3d6:	d062      	beq.n	1000a49e <ble_device_init+0x1ea>
1000a3d8:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a3da:	429d      	cmp	r5, r3
1000a3dc:	d1f9      	bne.n	1000a3d2 <ble_device_init+0x11e>
1000a3de:	0023      	movs	r3, r4
1000a3e0:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a3e2:	6822      	ldr	r2, [r4, #0]
1000a3e4:	2a00      	cmp	r2, #0
1000a3e6:	d06d      	beq.n	1000a4c4 <ble_device_init+0x210>
1000a3e8:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a3ea:	42a3      	cmp	r3, r4
1000a3ec:	d1f9      	bne.n	1000a3e2 <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a3ee:	2109      	movs	r1, #9
1000a3f0:	484f      	ldr	r0, [pc, #316]	; (1000a530 <ble_device_init+0x27c>)
1000a3f2:	4b50      	ldr	r3, [pc, #320]	; (1000a534 <ble_device_init+0x280>)
1000a3f4:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a3f6:	2800      	cmp	r0, #0
1000a3f8:	d003      	beq.n	1000a402 <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000a3fa:	4650      	mov	r0, sl
1000a3fc:	47c8      	blx	r9
1000a3fe:	484e      	ldr	r0, [pc, #312]	; (1000a538 <ble_device_init+0x284>)
1000a400:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a402:	494e      	ldr	r1, [pc, #312]	; (1000a53c <ble_device_init+0x288>)
1000a404:	2207      	movs	r2, #7
1000a406:	3108      	adds	r1, #8
1000a408:	a804      	add	r0, sp, #16
1000a40a:	4d4d      	ldr	r5, [pc, #308]	; (1000a540 <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a40c:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a40e:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a410:	2226      	movs	r2, #38	; 0x26
1000a412:	2100      	movs	r1, #0
1000a414:	0020      	movs	r0, r4
1000a416:	4b2e      	ldr	r3, [pc, #184]	; (1000a4d0 <ble_device_init+0x21c>)
1000a418:	4798      	blx	r3
	
	if (addr == NULL)
1000a41a:	2e00      	cmp	r6, #0
1000a41c:	d047      	beq.n	1000a4ae <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a41e:	4650      	mov	r0, sl
1000a420:	47c8      	blx	r9
1000a422:	7830      	ldrb	r0, [r6, #0]
1000a424:	7933      	ldrb	r3, [r6, #4]
1000a426:	7972      	ldrb	r2, [r6, #5]
1000a428:	79b1      	ldrb	r1, [r6, #6]
1000a42a:	9003      	str	r0, [sp, #12]
1000a42c:	7870      	ldrb	r0, [r6, #1]
1000a42e:	9002      	str	r0, [sp, #8]
1000a430:	78b0      	ldrb	r0, [r6, #2]
1000a432:	9001      	str	r0, [sp, #4]
1000a434:	78f0      	ldrb	r0, [r6, #3]
1000a436:	9000      	str	r0, [sp, #0]
1000a438:	4842      	ldr	r0, [pc, #264]	; (1000a544 <ble_device_init+0x290>)
1000a43a:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a43c:	230a      	movs	r3, #10
1000a43e:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a440:	4b41      	ldr	r3, [pc, #260]	; (1000a548 <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a442:	2207      	movs	r2, #7
1000a444:	0031      	movs	r1, r6
1000a446:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a448:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a44a:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a44c:	2300      	movs	r3, #0
1000a44e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a450:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a452:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a454:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a456:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a458:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a45a:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a45c:	2380      	movs	r3, #128	; 0x80
1000a45e:	009b      	lsls	r3, r3, #2
1000a460:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a462:	0020      	movs	r0, r4
1000a464:	4b39      	ldr	r3, [pc, #228]	; (1000a54c <ble_device_init+0x298>)
1000a466:	4798      	blx	r3
1000a468:	2800      	cmp	r0, #0
1000a46a:	d11b      	bne.n	1000a4a4 <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a46c:	0030      	movs	r0, r6
1000a46e:	4b38      	ldr	r3, [pc, #224]	; (1000a550 <ble_device_init+0x29c>)
1000a470:	4798      	blx	r3
1000a472:	2800      	cmp	r0, #0
1000a474:	d003      	beq.n	1000a47e <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a476:	4650      	mov	r0, sl
1000a478:	47c8      	blx	r9
1000a47a:	4836      	ldr	r0, [pc, #216]	; (1000a554 <ble_device_init+0x2a0>)
1000a47c:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a47e:	b011      	add	sp, #68	; 0x44
1000a480:	bc3c      	pop	{r2, r3, r4, r5}
1000a482:	4690      	mov	r8, r2
1000a484:	4699      	mov	r9, r3
1000a486:	46a2      	mov	sl, r4
1000a488:	46ab      	mov	fp, r5
1000a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a48c:	4650      	mov	r0, sl
1000a48e:	47c8      	blx	r9
1000a490:	4831      	ldr	r0, [pc, #196]	; (1000a558 <ble_device_init+0x2a4>)
1000a492:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a494:	4650      	mov	r0, sl
1000a496:	47c8      	blx	r9
1000a498:	4830      	ldr	r0, [pc, #192]	; (1000a55c <ble_device_init+0x2a8>)
1000a49a:	47c0      	blx	r8
1000a49c:	e7fe      	b.n	1000a49c <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a49e:	4b30      	ldr	r3, [pc, #192]	; (1000a560 <ble_device_init+0x2ac>)
1000a4a0:	602b      	str	r3, [r5, #0]
1000a4a2:	e79c      	b.n	1000a3de <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a4a4:	4650      	mov	r0, sl
1000a4a6:	47c8      	blx	r9
1000a4a8:	482e      	ldr	r0, [pc, #184]	; (1000a564 <ble_device_init+0x2b0>)
1000a4aa:	47c0      	blx	r8
1000a4ac:	e7de      	b.n	1000a46c <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a4ae:	a804      	add	r0, sp, #16
1000a4b0:	4b2d      	ldr	r3, [pc, #180]	; (1000a568 <ble_device_init+0x2b4>)
1000a4b2:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a4b4:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a4b6:	2800      	cmp	r0, #0
1000a4b8:	d0b1      	beq.n	1000a41e <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000a4ba:	4650      	mov	r0, sl
1000a4bc:	47c8      	blx	r9
1000a4be:	482b      	ldr	r0, [pc, #172]	; (1000a56c <ble_device_init+0x2b8>)
1000a4c0:	47c0      	blx	r8
1000a4c2:	e7ac      	b.n	1000a41e <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a4c4:	4b2a      	ldr	r3, [pc, #168]	; (1000a570 <ble_device_init+0x2bc>)
1000a4c6:	6023      	str	r3, [r4, #0]
1000a4c8:	e791      	b.n	1000a3ee <ble_device_init+0x13a>
1000a4ca:	46c0      	nop			; (mov r8, r8)
1000a4cc:	10014d24 	.word	0x10014d24
1000a4d0:	100115d1 	.word	0x100115d1
1000a4d4:	10014d2c 	.word	0x10014d2c
1000a4d8:	100151e0 	.word	0x100151e0
1000a4dc:	10014d28 	.word	0x10014d28
1000a4e0:	10015218 	.word	0x10015218
1000a4e4:	10015210 	.word	0x10015210
1000a4e8:	1001554c 	.word	0x1001554c
1000a4ec:	10013924 	.word	0x10013924
1000a4f0:	10013d24 	.word	0x10013d24
1000a4f4:	100151f4 	.word	0x100151f4
1000a4f8:	100151cc 	.word	0x100151cc
1000a4fc:	100151b8 	.word	0x100151b8
1000a500:	10015214 	.word	0x10015214
1000a504:	10014f20 	.word	0x10014f20
1000a508:	10014f1c 	.word	0x10014f1c
1000a50c:	100151a4 	.word	0x100151a4
1000a510:	10015758 	.word	0x10015758
1000a514:	10014f34 	.word	0x10014f34
1000a518:	100151a0 	.word	0x100151a0
1000a51c:	100129dc 	.word	0x100129dc
1000a520:	10011839 	.word	0x10011839
1000a524:	10011719 	.word	0x10011719
1000a528:	10013150 	.word	0x10013150
1000a52c:	1000d5a5 	.word	0x1000d5a5
1000a530:	100131c0 	.word	0x100131c0
1000a534:	1000d4bd 	.word	0x1000d4bd
1000a538:	100131cc 	.word	0x100131cc
1000a53c:	10012d64 	.word	0x10012d64
1000a540:	100115bf 	.word	0x100115bf
1000a544:	100131fc 	.word	0x100131fc
1000a548:	00003a98 	.word	0x00003a98
1000a54c:	1000d515 	.word	0x1000d515
1000a550:	1000d759 	.word	0x1000d759
1000a554:	10013258 	.word	0x10013258
1000a558:	10013164 	.word	0x10013164
1000a55c:	10013184 	.word	0x10013184
1000a560:	100133bc 	.word	0x100133bc
1000a564:	10013234 	.word	0x10013234
1000a568:	1000d4f1 	.word	0x1000d4f1
1000a56c:	100131e4 	.word	0x100131e4
1000a570:	10012d80 	.word	0x10012d80

1000a574 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a574:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a576:	2201      	movs	r2, #1
1000a578:	2101      	movs	r1, #1
1000a57a:	4b06      	ldr	r3, [pc, #24]	; (1000a594 <ble_send_slave_sec_request+0x20>)
1000a57c:	4798      	blx	r3
1000a57e:	2800      	cmp	r0, #0
1000a580:	d006      	beq.n	1000a590 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a582:	4b05      	ldr	r3, [pc, #20]	; (1000a598 <ble_send_slave_sec_request+0x24>)
1000a584:	4805      	ldr	r0, [pc, #20]	; (1000a59c <ble_send_slave_sec_request+0x28>)
1000a586:	4798      	blx	r3
1000a588:	4805      	ldr	r0, [pc, #20]	; (1000a5a0 <ble_send_slave_sec_request+0x2c>)
1000a58a:	4b06      	ldr	r3, [pc, #24]	; (1000a5a4 <ble_send_slave_sec_request+0x30>)
1000a58c:	4798      	blx	r3
1000a58e:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000a590:	bd10      	pop	{r4, pc}
1000a592:	46c0      	nop			; (mov r8, r8)
1000a594:	1000dce5 	.word	0x1000dce5
1000a598:	10011839 	.word	0x10011839
1000a59c:	100129dc 	.word	0x100129dc
1000a5a0:	10013294 	.word	0x10013294
1000a5a4:	10011719 	.word	0x10011719

1000a5a8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5aa:	464d      	mov	r5, r9
1000a5ac:	4644      	mov	r4, r8
1000a5ae:	465f      	mov	r7, fp
1000a5b0:	4656      	mov	r6, sl
1000a5b2:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a5b4:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a5b6:	b099      	sub	sp, #100	; 0x64
1000a5b8:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a5ba:	2d00      	cmp	r5, #0
1000a5bc:	d156      	bne.n	1000a66c <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a5be:	4b69      	ldr	r3, [pc, #420]	; (1000a764 <ble_connected_state_handler+0x1bc>)
1000a5c0:	4699      	mov	r9, r3
1000a5c2:	0018      	movs	r0, r3
1000a5c4:	4b68      	ldr	r3, [pc, #416]	; (1000a768 <ble_connected_state_handler+0x1c0>)
1000a5c6:	4698      	mov	r8, r3
1000a5c8:	4798      	blx	r3
1000a5ca:	7860      	ldrb	r0, [r4, #1]
1000a5cc:	7923      	ldrb	r3, [r4, #4]
1000a5ce:	7962      	ldrb	r2, [r4, #5]
1000a5d0:	79a1      	ldrb	r1, [r4, #6]
1000a5d2:	9002      	str	r0, [sp, #8]
1000a5d4:	78a0      	ldrb	r0, [r4, #2]
1000a5d6:	4f65      	ldr	r7, [pc, #404]	; (1000a76c <ble_connected_state_handler+0x1c4>)
1000a5d8:	9001      	str	r0, [sp, #4]
1000a5da:	78e0      	ldrb	r0, [r4, #3]
1000a5dc:	9000      	str	r0, [sp, #0]
1000a5de:	4864      	ldr	r0, [pc, #400]	; (1000a770 <ble_connected_state_handler+0x1c8>)
1000a5e0:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a5e2:	4648      	mov	r0, r9
1000a5e4:	47c0      	blx	r8
1000a5e6:	8921      	ldrh	r1, [r4, #8]
1000a5e8:	4862      	ldr	r0, [pc, #392]	; (1000a774 <ble_connected_state_handler+0x1cc>)
1000a5ea:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a5ec:	2212      	movs	r2, #18
1000a5ee:	0021      	movs	r1, r4
1000a5f0:	4b61      	ldr	r3, [pc, #388]	; (1000a778 <ble_connected_state_handler+0x1d0>)
1000a5f2:	4862      	ldr	r0, [pc, #392]	; (1000a77c <ble_connected_state_handler+0x1d4>)
1000a5f4:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a5f6:	4b62      	ldr	r3, [pc, #392]	; (1000a780 <ble_connected_state_handler+0x1d8>)
1000a5f8:	2207      	movs	r2, #7
1000a5fa:	0018      	movs	r0, r3
1000a5fc:	469b      	mov	fp, r3
1000a5fe:	0021      	movs	r1, r4
1000a600:	4b60      	ldr	r3, [pc, #384]	; (1000a784 <ble_connected_state_handler+0x1dc>)
1000a602:	4798      	blx	r3
1000a604:	4682      	mov	sl, r0
1000a606:	2800      	cmp	r0, #0
1000a608:	d140      	bne.n	1000a68c <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a60a:	4b5f      	ldr	r3, [pc, #380]	; (1000a788 <ble_connected_state_handler+0x1e0>)
1000a60c:	781b      	ldrb	r3, [r3, #0]
1000a60e:	2b04      	cmp	r3, #4
1000a610:	d900      	bls.n	1000a614 <ble_connected_state_handler+0x6c>
1000a612:	e076      	b.n	1000a702 <ble_connected_state_handler+0x15a>
1000a614:	4b5d      	ldr	r3, [pc, #372]	; (1000a78c <ble_connected_state_handler+0x1e4>)
1000a616:	2600      	movs	r6, #0
1000a618:	46a8      	mov	r8, r5
1000a61a:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a61c:	2207      	movs	r2, #7
1000a61e:	0021      	movs	r1, r4
1000a620:	0038      	movs	r0, r7
1000a622:	4b58      	ldr	r3, [pc, #352]	; (1000a784 <ble_connected_state_handler+0x1dc>)
1000a624:	4798      	blx	r3
1000a626:	2800      	cmp	r0, #0
1000a628:	d100      	bne.n	1000a62c <ble_connected_state_handler+0x84>
1000a62a:	e076      	b.n	1000a71a <ble_connected_state_handler+0x172>
1000a62c:	3601      	adds	r6, #1
1000a62e:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a630:	2e05      	cmp	r6, #5
1000a632:	d1f3      	bne.n	1000a61c <ble_connected_state_handler+0x74>
1000a634:	4645      	mov	r5, r8
1000a636:	2700      	movs	r7, #0
1000a638:	4b55      	ldr	r3, [pc, #340]	; (1000a790 <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a63a:	781a      	ldrb	r2, [r3, #0]
1000a63c:	2a00      	cmp	r2, #0
1000a63e:	d100      	bne.n	1000a642 <ble_connected_state_handler+0x9a>
1000a640:	e07d      	b.n	1000a73e <ble_connected_state_handler+0x196>
1000a642:	3701      	adds	r7, #1
1000a644:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a646:	2f05      	cmp	r7, #5
1000a648:	d1f7      	bne.n	1000a63a <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a64a:	4653      	mov	r3, sl
1000a64c:	2b00      	cmp	r3, #0
1000a64e:	d147      	bne.n	1000a6e0 <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a650:	017b      	lsls	r3, r7, #5
1000a652:	1bdf      	subs	r7, r3, r7
1000a654:	4b4d      	ldr	r3, [pc, #308]	; (1000a78c <ble_connected_state_handler+0x1e4>)
1000a656:	00bf      	lsls	r7, r7, #2
1000a658:	469c      	mov	ip, r3
1000a65a:	2305      	movs	r3, #5
1000a65c:	4467      	add	r7, ip
1000a65e:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a660:	2207      	movs	r2, #7
1000a662:	2100      	movs	r1, #0
1000a664:	4658      	mov	r0, fp
1000a666:	4b4b      	ldr	r3, [pc, #300]	; (1000a794 <ble_connected_state_handler+0x1ec>)
1000a668:	4798      	blx	r3
1000a66a:	e007      	b.n	1000a67c <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a66c:	4b3e      	ldr	r3, [pc, #248]	; (1000a768 <ble_connected_state_handler+0x1c0>)
1000a66e:	483d      	ldr	r0, [pc, #244]	; (1000a764 <ble_connected_state_handler+0x1bc>)
1000a670:	4798      	blx	r3
1000a672:	7aa1      	ldrb	r1, [r4, #10]
1000a674:	4848      	ldr	r0, [pc, #288]	; (1000a798 <ble_connected_state_handler+0x1f0>)
1000a676:	4b3d      	ldr	r3, [pc, #244]	; (1000a76c <ble_connected_state_handler+0x1c4>)
1000a678:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a67a:	2500      	movs	r5, #0
}
1000a67c:	0028      	movs	r0, r5
1000a67e:	b019      	add	sp, #100	; 0x64
1000a680:	bc3c      	pop	{r2, r3, r4, r5}
1000a682:	4690      	mov	r8, r2
1000a684:	4699      	mov	r9, r3
1000a686:	46a2      	mov	sl, r4
1000a688:	46ab      	mov	fp, r5
1000a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a68c:	7823      	ldrb	r3, [r4, #0]
1000a68e:	2b02      	cmp	r3, #2
1000a690:	d1bb      	bne.n	1000a60a <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a692:	ad04      	add	r5, sp, #16
1000a694:	2250      	movs	r2, #80	; 0x50
1000a696:	4b3f      	ldr	r3, [pc, #252]	; (1000a794 <ble_connected_state_handler+0x1ec>)
1000a698:	2100      	movs	r1, #0
1000a69a:	0028      	movs	r0, r5
1000a69c:	4798      	blx	r3
1000a69e:	4b3f      	ldr	r3, [pc, #252]	; (1000a79c <ble_connected_state_handler+0x1f4>)
1000a6a0:	0022      	movs	r2, r4
1000a6a2:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a6a4:	2300      	movs	r3, #0
1000a6a6:	4664      	mov	r4, ip
1000a6a8:	4694      	mov	ip, r2
1000a6aa:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a6ac:	0022      	movs	r2, r4
1000a6ae:	3610      	adds	r6, #16
1000a6b0:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a6b2:	7810      	ldrb	r0, [r2, #0]
1000a6b4:	1c59      	adds	r1, r3, #1
1000a6b6:	54e8      	strb	r0, [r5, r3]
1000a6b8:	b28b      	uxth	r3, r1
1000a6ba:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a6bc:	42b3      	cmp	r3, r6
1000a6be:	d1f8      	bne.n	1000a6b2 <ble_connected_state_handler+0x10a>
1000a6c0:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a6c2:	2b50      	cmp	r3, #80	; 0x50
1000a6c4:	d1f1      	bne.n	1000a6aa <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a6c6:	002a      	movs	r2, r5
1000a6c8:	4661      	mov	r1, ip
1000a6ca:	2005      	movs	r0, #5
1000a6cc:	4b34      	ldr	r3, [pc, #208]	; (1000a7a0 <ble_connected_state_handler+0x1f8>)
1000a6ce:	4798      	blx	r3
1000a6d0:	1e05      	subs	r5, r0, #0
1000a6d2:	d0d3      	beq.n	1000a67c <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a6d4:	4648      	mov	r0, r9
1000a6d6:	47c0      	blx	r8
1000a6d8:	4832      	ldr	r0, [pc, #200]	; (1000a7a4 <ble_connected_state_handler+0x1fc>)
1000a6da:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000a6dc:	25e2      	movs	r5, #226	; 0xe2
1000a6de:	e7cd      	b.n	1000a67c <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a6e0:	017b      	lsls	r3, r7, #5
1000a6e2:	1bdf      	subs	r7, r3, r7
1000a6e4:	4b29      	ldr	r3, [pc, #164]	; (1000a78c <ble_connected_state_handler+0x1e4>)
1000a6e6:	00bf      	lsls	r7, r7, #2
1000a6e8:	469c      	mov	ip, r3
1000a6ea:	230a      	movs	r3, #10
1000a6ec:	4467      	add	r7, ip
1000a6ee:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a6f0:	2207      	movs	r2, #7
1000a6f2:	2100      	movs	r1, #0
1000a6f4:	4658      	mov	r0, fp
1000a6f6:	4b27      	ldr	r3, [pc, #156]	; (1000a794 <ble_connected_state_handler+0x1ec>)
1000a6f8:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a6fa:	8920      	ldrh	r0, [r4, #8]
1000a6fc:	4b2a      	ldr	r3, [pc, #168]	; (1000a7a8 <ble_connected_state_handler+0x200>)
1000a6fe:	4798      	blx	r3
1000a700:	e7bc      	b.n	1000a67c <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a702:	4648      	mov	r0, r9
1000a704:	47c0      	blx	r8
1000a706:	4b20      	ldr	r3, [pc, #128]	; (1000a788 <ble_connected_state_handler+0x1e0>)
1000a708:	4828      	ldr	r0, [pc, #160]	; (1000a7ac <ble_connected_state_handler+0x204>)
1000a70a:	7819      	ldrb	r1, [r3, #0]
1000a70c:	b2c9      	uxtb	r1, r1
1000a70e:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a710:	8920      	ldrh	r0, [r4, #8]
1000a712:	2113      	movs	r1, #19
1000a714:	4b26      	ldr	r3, [pc, #152]	; (1000a7b0 <ble_connected_state_handler+0x208>)
1000a716:	4798      	blx	r3
1000a718:	e7b0      	b.n	1000a67c <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a71a:	4a1c      	ldr	r2, [pc, #112]	; (1000a78c <ble_connected_state_handler+0x1e4>)
1000a71c:	0037      	movs	r7, r6
1000a71e:	4694      	mov	ip, r2
1000a720:	4645      	mov	r5, r8
1000a722:	0173      	lsls	r3, r6, #5
1000a724:	1b9b      	subs	r3, r3, r6
1000a726:	009b      	lsls	r3, r3, #2
1000a728:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a72a:	2202      	movs	r2, #2
1000a72c:	335e      	adds	r3, #94	; 0x5e
1000a72e:	701a      	strb	r2, [r3, #0]
1000a730:	0021      	movs	r1, r4
1000a732:	3205      	adds	r2, #5
1000a734:	4658      	mov	r0, fp
1000a736:	4b13      	ldr	r3, [pc, #76]	; (1000a784 <ble_connected_state_handler+0x1dc>)
1000a738:	4798      	blx	r3
1000a73a:	4682      	mov	sl, r0
1000a73c:	e785      	b.n	1000a64a <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a73e:	4a13      	ldr	r2, [pc, #76]	; (1000a78c <ble_connected_state_handler+0x1e4>)
1000a740:	017b      	lsls	r3, r7, #5
1000a742:	4690      	mov	r8, r2
1000a744:	1bdb      	subs	r3, r3, r7
1000a746:	009b      	lsls	r3, r3, #2
1000a748:	4498      	add	r8, r3
1000a74a:	2212      	movs	r2, #18
1000a74c:	4b0a      	ldr	r3, [pc, #40]	; (1000a778 <ble_connected_state_handler+0x1d0>)
1000a74e:	0021      	movs	r1, r4
1000a750:	4640      	mov	r0, r8
1000a752:	4798      	blx	r3
						ble_device_count++;
1000a754:	4b0c      	ldr	r3, [pc, #48]	; (1000a788 <ble_connected_state_handler+0x1e0>)
1000a756:	4a0c      	ldr	r2, [pc, #48]	; (1000a788 <ble_connected_state_handler+0x1e0>)
1000a758:	781b      	ldrb	r3, [r3, #0]
1000a75a:	3301      	adds	r3, #1
1000a75c:	b2db      	uxtb	r3, r3
1000a75e:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a760:	4643      	mov	r3, r8
1000a762:	e7e2      	b.n	1000a72a <ble_connected_state_handler+0x182>
1000a764:	100129dc 	.word	0x100129dc
1000a768:	10011839 	.word	0x10011839
1000a76c:	10011719 	.word	0x10011719
1000a770:	100132b4 	.word	0x100132b4
1000a774:	100132f8 	.word	0x100132f8
1000a778:	100115bf 	.word	0x100115bf
1000a77c:	100151e0 	.word	0x100151e0
1000a780:	10014d2c 	.word	0x10014d2c
1000a784:	100115a1 	.word	0x100115a1
1000a788:	100151a0 	.word	0x100151a0
1000a78c:	10014f34 	.word	0x10014f34
1000a790:	10014f92 	.word	0x10014f92
1000a794:	100115d1 	.word	0x100115d1
1000a798:	10013370 	.word	0x10013370
1000a79c:	10014f7a 	.word	0x10014f7a
1000a7a0:	1000d7f9 	.word	0x1000d7f9
1000a7a4:	10013310 	.word	0x10013310
1000a7a8:	1000a575 	.word	0x1000a575
1000a7ac:	10013334 	.word	0x10013334
1000a7b0:	1000d7cd 	.word	0x1000d7cd

1000a7b4 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a7b6:	7803      	ldrb	r3, [r0, #0]
1000a7b8:	2b00      	cmp	r3, #0
1000a7ba:	d10d      	bne.n	1000a7d8 <ble_resolv_rand_addr_handler+0x24>
1000a7bc:	2400      	movs	r4, #0
1000a7be:	4d21      	ldr	r5, [pc, #132]	; (1000a844 <ble_resolv_rand_addr_handler+0x90>)
1000a7c0:	4f21      	ldr	r7, [pc, #132]	; (1000a848 <ble_resolv_rand_addr_handler+0x94>)
1000a7c2:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a7c4:	2210      	movs	r2, #16
1000a7c6:	0029      	movs	r1, r5
1000a7c8:	0030      	movs	r0, r6
1000a7ca:	47b8      	blx	r7
1000a7cc:	2800      	cmp	r0, #0
1000a7ce:	d00e      	beq.n	1000a7ee <ble_resolv_rand_addr_handler+0x3a>
1000a7d0:	3401      	adds	r4, #1
1000a7d2:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a7d4:	2c05      	cmp	r4, #5
1000a7d6:	d1f5      	bne.n	1000a7c4 <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a7d8:	2300      	movs	r3, #0
1000a7da:	4a1c      	ldr	r2, [pc, #112]	; (1000a84c <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a7dc:	7811      	ldrb	r1, [r2, #0]
1000a7de:	2900      	cmp	r1, #0
1000a7e0:	d019      	beq.n	1000a816 <ble_resolv_rand_addr_handler+0x62>
1000a7e2:	3301      	adds	r3, #1
1000a7e4:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a7e6:	2b05      	cmp	r3, #5
1000a7e8:	d1f8      	bne.n	1000a7dc <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a7ea:	2000      	movs	r0, #0
1000a7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a7ee:	0160      	lsls	r0, r4, #5
1000a7f0:	1b00      	subs	r0, r0, r4
1000a7f2:	0084      	lsls	r4, r0, #2
1000a7f4:	4816      	ldr	r0, [pc, #88]	; (1000a850 <ble_resolv_rand_addr_handler+0x9c>)
1000a7f6:	2202      	movs	r2, #2
1000a7f8:	1900      	adds	r0, r0, r4
1000a7fa:	0003      	movs	r3, r0
1000a7fc:	335e      	adds	r3, #94	; 0x5e
1000a7fe:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a800:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a802:	4c14      	ldr	r4, [pc, #80]	; (1000a854 <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a804:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a806:	3210      	adds	r2, #16
1000a808:	0021      	movs	r1, r4
1000a80a:	4b13      	ldr	r3, [pc, #76]	; (1000a858 <ble_resolv_rand_addr_handler+0xa4>)
1000a80c:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a80e:	8920      	ldrh	r0, [r4, #8]
1000a810:	4b12      	ldr	r3, [pc, #72]	; (1000a85c <ble_resolv_rand_addr_handler+0xa8>)
1000a812:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a814:	e7e9      	b.n	1000a7ea <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a816:	015d      	lsls	r5, r3, #5
1000a818:	1aeb      	subs	r3, r5, r3
1000a81a:	4d0d      	ldr	r5, [pc, #52]	; (1000a850 <ble_resolv_rand_addr_handler+0x9c>)
1000a81c:	009b      	lsls	r3, r3, #2
1000a81e:	4c0d      	ldr	r4, [pc, #52]	; (1000a854 <ble_resolv_rand_addr_handler+0xa0>)
1000a820:	18ed      	adds	r5, r5, r3
1000a822:	2212      	movs	r2, #18
1000a824:	4b0c      	ldr	r3, [pc, #48]	; (1000a858 <ble_resolv_rand_addr_handler+0xa4>)
1000a826:	0021      	movs	r1, r4
1000a828:	0028      	movs	r0, r5
1000a82a:	4798      	blx	r3
				ble_device_count++;
1000a82c:	4a0c      	ldr	r2, [pc, #48]	; (1000a860 <ble_resolv_rand_addr_handler+0xac>)
1000a82e:	7813      	ldrb	r3, [r2, #0]
1000a830:	3301      	adds	r3, #1
1000a832:	b2db      	uxtb	r3, r3
1000a834:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a836:	002b      	movs	r3, r5
1000a838:	2202      	movs	r2, #2
1000a83a:	335e      	adds	r3, #94	; 0x5e
1000a83c:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a83e:	230a      	movs	r3, #10
1000a840:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000a842:	e7e4      	b.n	1000a80e <ble_resolv_rand_addr_handler+0x5a>
1000a844:	10014f7a 	.word	0x10014f7a
1000a848:	100115a1 	.word	0x100115a1
1000a84c:	10014f92 	.word	0x10014f92
1000a850:	10014f34 	.word	0x10014f34
1000a854:	100151e0 	.word	0x100151e0
1000a858:	100115bf 	.word	0x100115bf
1000a85c:	1000a575 	.word	0x1000a575
1000a860:	100151a0 	.word	0x100151a0

1000a864 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a866:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a868:	283b      	cmp	r0, #59	; 0x3b
1000a86a:	d865      	bhi.n	1000a938 <ble_event_manager+0xd4>
1000a86c:	4b36      	ldr	r3, [pc, #216]	; (1000a948 <ble_event_manager+0xe4>)
1000a86e:	0086      	lsls	r6, r0, #2
1000a870:	599b      	ldr	r3, [r3, r6]
1000a872:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a874:	4b35      	ldr	r3, [pc, #212]	; (1000a94c <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a876:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a878:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a87a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a87c:	2b00      	cmp	r3, #0
1000a87e:	d005      	beq.n	1000a88c <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a880:	0080      	lsls	r0, r0, #2
1000a882:	58c3      	ldr	r3, [r0, r3]
1000a884:	2b00      	cmp	r3, #0
1000a886:	d001      	beq.n	1000a88c <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000a888:	0028      	movs	r0, r5
1000a88a:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000a88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a88e:	4b30      	ldr	r3, [pc, #192]	; (1000a950 <ble_event_manager+0xec>)
1000a890:	681b      	ldr	r3, [r3, #0]
1000a892:	2b00      	cmp	r3, #0
1000a894:	d0fa      	beq.n	1000a88c <ble_event_manager+0x28>
			ble_user_event_cb();
1000a896:	4798      	blx	r3
1000a898:	e7f8      	b.n	1000a88c <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a89a:	2400      	movs	r4, #0
1000a89c:	4f2d      	ldr	r7, [pc, #180]	; (1000a954 <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a89e:	593b      	ldr	r3, [r7, r4]
1000a8a0:	2b00      	cmp	r3, #0
1000a8a2:	d004      	beq.n	1000a8ae <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a8a4:	599b      	ldr	r3, [r3, r6]
1000a8a6:	2b00      	cmp	r3, #0
1000a8a8:	d001      	beq.n	1000a8ae <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000a8aa:	0028      	movs	r0, r5
1000a8ac:	4798      	blx	r3
1000a8ae:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a8b0:	2c14      	cmp	r4, #20
1000a8b2:	d1f4      	bne.n	1000a89e <ble_event_manager+0x3a>
1000a8b4:	e7ea      	b.n	1000a88c <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a8b6:	2600      	movs	r6, #0
1000a8b8:	3813      	subs	r0, #19
1000a8ba:	b2c4      	uxtb	r4, r0
1000a8bc:	4f26      	ldr	r7, [pc, #152]	; (1000a958 <ble_event_manager+0xf4>)
1000a8be:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a8c0:	59bb      	ldr	r3, [r7, r6]
1000a8c2:	2b00      	cmp	r3, #0
1000a8c4:	d004      	beq.n	1000a8d0 <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a8c6:	591b      	ldr	r3, [r3, r4]
1000a8c8:	2b00      	cmp	r3, #0
1000a8ca:	d001      	beq.n	1000a8d0 <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000a8cc:	0028      	movs	r0, r5
1000a8ce:	4798      	blx	r3
1000a8d0:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a8d2:	2e14      	cmp	r6, #20
1000a8d4:	d1f4      	bne.n	1000a8c0 <ble_event_manager+0x5c>
1000a8d6:	e7d9      	b.n	1000a88c <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a8d8:	2600      	movs	r6, #0
1000a8da:	381d      	subs	r0, #29
1000a8dc:	b2c4      	uxtb	r4, r0
1000a8de:	4f1f      	ldr	r7, [pc, #124]	; (1000a95c <ble_event_manager+0xf8>)
1000a8e0:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a8e2:	59bb      	ldr	r3, [r7, r6]
1000a8e4:	2b00      	cmp	r3, #0
1000a8e6:	d004      	beq.n	1000a8f2 <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a8e8:	591b      	ldr	r3, [r3, r4]
1000a8ea:	2b00      	cmp	r3, #0
1000a8ec:	d001      	beq.n	1000a8f2 <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000a8ee:	0028      	movs	r0, r5
1000a8f0:	4798      	blx	r3
1000a8f2:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a8f4:	2e14      	cmp	r6, #20
1000a8f6:	d1f4      	bne.n	1000a8e2 <ble_event_manager+0x7e>
1000a8f8:	e7c8      	b.n	1000a88c <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a8fa:	4b19      	ldr	r3, [pc, #100]	; (1000a960 <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a8fc:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a8fe:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a900:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a902:	2b00      	cmp	r3, #0
1000a904:	d1bc      	bne.n	1000a880 <ble_event_manager+0x1c>
1000a906:	e7c1      	b.n	1000a88c <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a908:	4b16      	ldr	r3, [pc, #88]	; (1000a964 <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a90a:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a90c:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a90e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a910:	2b00      	cmp	r3, #0
1000a912:	d1b5      	bne.n	1000a880 <ble_event_manager+0x1c>
1000a914:	e7ba      	b.n	1000a88c <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a916:	2600      	movs	r6, #0
1000a918:	3836      	subs	r0, #54	; 0x36
1000a91a:	b2c4      	uxtb	r4, r0
1000a91c:	4f12      	ldr	r7, [pc, #72]	; (1000a968 <ble_event_manager+0x104>)
1000a91e:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a920:	59bb      	ldr	r3, [r7, r6]
1000a922:	2b00      	cmp	r3, #0
1000a924:	d004      	beq.n	1000a930 <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a926:	591b      	ldr	r3, [r3, r4]
1000a928:	2b00      	cmp	r3, #0
1000a92a:	d001      	beq.n	1000a930 <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000a92c:	0028      	movs	r0, r5
1000a92e:	4798      	blx	r3
1000a930:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a932:	2e14      	cmp	r6, #20
1000a934:	d1f4      	bne.n	1000a920 <ble_event_manager+0xbc>
1000a936:	e7a9      	b.n	1000a88c <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a938:	4d0c      	ldr	r5, [pc, #48]	; (1000a96c <ble_event_manager+0x108>)
1000a93a:	4c0d      	ldr	r4, [pc, #52]	; (1000a970 <ble_event_manager+0x10c>)
1000a93c:	0028      	movs	r0, r5
1000a93e:	47a0      	blx	r4
1000a940:	0028      	movs	r0, r5
1000a942:	47a0      	blx	r4
	}
	break;		
	}
}
1000a944:	e7a2      	b.n	1000a88c <ble_event_manager+0x28>
1000a946:	46c0      	nop			; (mov r8, r8)
1000a948:	10012c74 	.word	0x10012c74
1000a94c:	10015758 	.word	0x10015758
1000a950:	10014d24 	.word	0x10014d24
1000a954:	100151b8 	.word	0x100151b8
1000a958:	100151cc 	.word	0x100151cc
1000a95c:	10014f20 	.word	0x10014f20
1000a960:	10015214 	.word	0x10015214
1000a964:	10014f1c 	.word	0x10014f1c
1000a968:	100151a4 	.word	0x100151a4
1000a96c:	100129dc 	.word	0x100129dc
1000a970:	10011839 	.word	0x10011839

1000a974 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a976:	4d0f      	ldr	r5, [pc, #60]	; (1000a9b4 <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a978:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a97a:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a97c:	2b01      	cmp	r3, #1
1000a97e:	d015      	beq.n	1000a9ac <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a980:	4e0d      	ldr	r6, [pc, #52]	; (1000a9b8 <ble_event_task+0x44>)
1000a982:	4f0e      	ldr	r7, [pc, #56]	; (1000a9bc <ble_event_task+0x48>)
1000a984:	0022      	movs	r2, r4
1000a986:	4b0e      	ldr	r3, [pc, #56]	; (1000a9c0 <ble_event_task+0x4c>)
1000a988:	0031      	movs	r1, r6
1000a98a:	0038      	movs	r0, r7
1000a98c:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a98e:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a990:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a992:	2b01      	cmp	r3, #1
1000a994:	d007      	beq.n	1000a9a6 <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000a996:	2c00      	cmp	r4, #0
1000a998:	d103      	bne.n	1000a9a2 <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000a99a:	7838      	ldrb	r0, [r7, #0]
1000a99c:	0031      	movs	r1, r6
1000a99e:	4b09      	ldr	r3, [pc, #36]	; (1000a9c4 <ble_event_task+0x50>)
1000a9a0:	4798      	blx	r3
    }
    
    return status;
}
1000a9a2:	0020      	movs	r0, r4
1000a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000a9a6:	4b08      	ldr	r3, [pc, #32]	; (1000a9c8 <ble_event_task+0x54>)
1000a9a8:	4798      	blx	r3
1000a9aa:	e7f4      	b.n	1000a996 <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000a9ac:	4b07      	ldr	r3, [pc, #28]	; (1000a9cc <ble_event_task+0x58>)
1000a9ae:	4798      	blx	r3
1000a9b0:	e7e6      	b.n	1000a980 <ble_event_task+0xc>
1000a9b2:	46c0      	nop			; (mov r8, r8)
1000a9b4:	10014d33 	.word	0x10014d33
1000a9b8:	1001554c 	.word	0x1001554c
1000a9bc:	10015210 	.word	0x10015210
1000a9c0:	1000cd4d 	.word	0x1000cd4d
1000a9c4:	1000a865 	.word	0x1000a865
1000a9c8:	1000b2c1 	.word	0x1000b2c1
1000a9cc:	1000b2e9 	.word	0x1000b2e9

1000a9d0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a9d0:	b570      	push	{r4, r5, r6, lr}
1000a9d2:	0006      	movs	r6, r0
1000a9d4:	000d      	movs	r5, r1
1000a9d6:	4c03      	ldr	r4, [pc, #12]	; (1000a9e4 <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000a9d8:	0029      	movs	r1, r5
1000a9da:	0030      	movs	r0, r6
1000a9dc:	47a0      	blx	r4
1000a9de:	2800      	cmp	r0, #0
1000a9e0:	d1fa      	bne.n	1000a9d8 <usart_serial_getchar+0x8>
}
1000a9e2:	bd70      	pop	{r4, r5, r6, pc}
1000a9e4:	1000b93d 	.word	0x1000b93d

1000a9e8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a9e8:	b570      	push	{r4, r5, r6, lr}
1000a9ea:	0006      	movs	r6, r0
1000a9ec:	000d      	movs	r5, r1
1000a9ee:	4c03      	ldr	r4, [pc, #12]	; (1000a9fc <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000a9f0:	0029      	movs	r1, r5
1000a9f2:	0030      	movs	r0, r6
1000a9f4:	47a0      	blx	r4
1000a9f6:	2800      	cmp	r0, #0
1000a9f8:	d1fa      	bne.n	1000a9f0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a9fa:	bd70      	pop	{r4, r5, r6, pc}
1000a9fc:	1000b92d 	.word	0x1000b92d

1000aa00 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000aa00:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000aa02:	4b0e      	ldr	r3, [pc, #56]	; (1000aa3c <uart_read_complete_callback+0x3c>)
1000aa04:	781a      	ldrb	r2, [r3, #0]
1000aa06:	2a01      	cmp	r2, #1
1000aa08:	d00c      	beq.n	1000aa24 <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000aa0a:	4b0d      	ldr	r3, [pc, #52]	; (1000aa40 <uart_read_complete_callback+0x40>)
1000aa0c:	681b      	ldr	r3, [r3, #0]
1000aa0e:	2b00      	cmp	r3, #0
1000aa10:	d007      	beq.n	1000aa22 <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000aa12:	4c0c      	ldr	r4, [pc, #48]	; (1000aa44 <uart_read_complete_callback+0x44>)
1000aa14:	7820      	ldrb	r0, [r4, #0]
1000aa16:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aa18:	2201      	movs	r2, #1
1000aa1a:	0021      	movs	r1, r4
1000aa1c:	480a      	ldr	r0, [pc, #40]	; (1000aa48 <uart_read_complete_callback+0x48>)
1000aa1e:	4b0b      	ldr	r3, [pc, #44]	; (1000aa4c <uart_read_complete_callback+0x4c>)
1000aa20:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000aa22:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000aa24:	3201      	adds	r2, #1
1000aa26:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000aa28:	4b05      	ldr	r3, [pc, #20]	; (1000aa40 <uart_read_complete_callback+0x40>)
1000aa2a:	681b      	ldr	r3, [r3, #0]
1000aa2c:	2b00      	cmp	r3, #0
1000aa2e:	d1f8      	bne.n	1000aa22 <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000aa30:	2102      	movs	r1, #2
1000aa32:	4805      	ldr	r0, [pc, #20]	; (1000aa48 <uart_read_complete_callback+0x48>)
1000aa34:	4b06      	ldr	r3, [pc, #24]	; (1000aa50 <uart_read_complete_callback+0x50>)
1000aa36:	4798      	blx	r3
1000aa38:	e7f3      	b.n	1000aa22 <uart_read_complete_callback+0x22>
1000aa3a:	46c0      	nop			; (mov r8, r8)
1000aa3c:	10014d38 	.word	0x10014d38
1000aa40:	10014d40 	.word	0x10014d40
1000aa44:	10014d3c 	.word	0x10014d3c
1000aa48:	1001575c 	.word	0x1001575c
1000aa4c:	1000b951 	.word	0x1000b951
1000aa50:	1000b9ad 	.word	0x1000b9ad

1000aa54 <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000aa54:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000aa56:	2100      	movs	r1, #0
1000aa58:	4b19      	ldr	r3, [pc, #100]	; (1000aac0 <serial_console_init+0x6c>)
1000aa5a:	2000      	movs	r0, #0
1000aa5c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000aa5e:	4c19      	ldr	r4, [pc, #100]	; (1000aac4 <serial_console_init+0x70>)
1000aa60:	4b19      	ldr	r3, [pc, #100]	; (1000aac8 <serial_console_init+0x74>)
1000aa62:	0020      	movs	r0, r4
1000aa64:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000aa66:	23e1      	movs	r3, #225	; 0xe1
1000aa68:	025b      	lsls	r3, r3, #9
1000aa6a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000aa6c:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000aa6e:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000aa70:	4d16      	ldr	r5, [pc, #88]	; (1000aacc <serial_console_init+0x78>)
1000aa72:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000aa74:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000aa76:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000aa78:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000aa7a:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000aa7c:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000aa7e:	3201      	adds	r2, #1
1000aa80:	4b13      	ldr	r3, [pc, #76]	; (1000aad0 <serial_console_init+0x7c>)
1000aa82:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000aa84:	3201      	adds	r2, #1
1000aa86:	601d      	str	r5, [r3, #0]
1000aa88:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000aa8a:	4b12      	ldr	r3, [pc, #72]	; (1000aad4 <serial_console_init+0x80>)
1000aa8c:	4a12      	ldr	r2, [pc, #72]	; (1000aad8 <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000aa8e:	0028      	movs	r0, r5
1000aa90:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000aa92:	4a12      	ldr	r2, [pc, #72]	; (1000aadc <serial_console_init+0x88>)
1000aa94:	4b12      	ldr	r3, [pc, #72]	; (1000aae0 <serial_console_init+0x8c>)
1000aa96:	4913      	ldr	r1, [pc, #76]	; (1000aae4 <serial_console_init+0x90>)
1000aa98:	601a      	str	r2, [r3, #0]
1000aa9a:	0022      	movs	r2, r4
1000aa9c:	4b12      	ldr	r3, [pc, #72]	; (1000aae8 <serial_console_init+0x94>)
1000aa9e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000aaa0:	4e12      	ldr	r6, [pc, #72]	; (1000aaec <serial_console_init+0x98>)
1000aaa2:	4c13      	ldr	r4, [pc, #76]	; (1000aaf0 <serial_console_init+0x9c>)
1000aaa4:	6833      	ldr	r3, [r6, #0]
1000aaa6:	2100      	movs	r1, #0
1000aaa8:	6898      	ldr	r0, [r3, #8]
1000aaaa:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000aaac:	6833      	ldr	r3, [r6, #0]
1000aaae:	2100      	movs	r1, #0
1000aab0:	6858      	ldr	r0, [r3, #4]
1000aab2:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000aab4:	0028      	movs	r0, r5
1000aab6:	2202      	movs	r2, #2
1000aab8:	490e      	ldr	r1, [pc, #56]	; (1000aaf4 <serial_console_init+0xa0>)
1000aaba:	4b0f      	ldr	r3, [pc, #60]	; (1000aaf8 <serial_console_init+0xa4>)
1000aabc:	4798      	blx	r3
}
1000aabe:	bd70      	pop	{r4, r5, r6, pc}
1000aac0:	1000c0f1 	.word	0x1000c0f1
1000aac4:	10015780 	.word	0x10015780
1000aac8:	1000b755 	.word	0x1000b755
1000aacc:	1001575c 	.word	0x1001575c
1000aad0:	10015aa8 	.word	0x10015aa8
1000aad4:	10015aa4 	.word	0x10015aa4
1000aad8:	1000a9e9 	.word	0x1000a9e9
1000aadc:	1000a9d1 	.word	0x1000a9d1
1000aae0:	10015aa0 	.word	0x10015aa0
1000aae4:	40004000 	.word	0x40004000
1000aae8:	1000b781 	.word	0x1000b781
1000aaec:	100138ec 	.word	0x100138ec
1000aaf0:	100118e9 	.word	0x100118e9
1000aaf4:	1000aa01 	.word	0x1000aa01
1000aaf8:	1000b979 	.word	0x1000b979

1000aafc <_time_start>:

void _time_start(unsigned int sec)
{
1000aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aafe:	4647      	mov	r7, r8
	system_clock_get_value();
1000ab00:	4c0e      	ldr	r4, [pc, #56]	; (1000ab3c <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000ab02:	b480      	push	{r7}
1000ab04:	4680      	mov	r8, r0
	system_clock_get_value();
1000ab06:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ab08:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ab0a:	4f0d      	ldr	r7, [pc, #52]	; (1000ab40 <_time_start+0x44>)
1000ab0c:	47b8      	blx	r7
1000ab0e:	4e0d      	ldr	r6, [pc, #52]	; (1000ab44 <_time_start+0x48>)
1000ab10:	4a0d      	ldr	r2, [pc, #52]	; (1000ab48 <_time_start+0x4c>)
1000ab12:	4b0e      	ldr	r3, [pc, #56]	; (1000ab4c <_time_start+0x50>)
1000ab14:	47b0      	blx	r6
1000ab16:	0004      	movs	r4, r0
1000ab18:	20fa      	movs	r0, #250	; 0xfa
1000ab1a:	4643      	mov	r3, r8
1000ab1c:	0080      	lsls	r0, r0, #2
1000ab1e:	4358      	muls	r0, r3
1000ab20:	000d      	movs	r5, r1
1000ab22:	47b8      	blx	r7
1000ab24:	0002      	movs	r2, r0
1000ab26:	000b      	movs	r3, r1
1000ab28:	0020      	movs	r0, r4
1000ab2a:	0029      	movs	r1, r5
1000ab2c:	47b0      	blx	r6
1000ab2e:	4b08      	ldr	r3, [pc, #32]	; (1000ab50 <_time_start+0x54>)
1000ab30:	4798      	blx	r3
1000ab32:	4b08      	ldr	r3, [pc, #32]	; (1000ab54 <_time_start+0x58>)
1000ab34:	6018      	str	r0, [r3, #0]
}
1000ab36:	bc04      	pop	{r2}
1000ab38:	4690      	mov	r8, r2
1000ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab3c:	1000c175 	.word	0x1000c175
1000ab40:	10011495 	.word	0x10011495
1000ab44:	1001088d 	.word	0x1001088d
1000ab48:	19feaec7 	.word	0x19feaec7
1000ab4c:	3f09d8ef 	.word	0x3f09d8ef
1000ab50:	1000f931 	.word	0x1000f931
1000ab54:	10014d34 	.word	0x10014d34

1000ab58 <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000ab58:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000ab5a:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000ab5c:	4c15      	ldr	r4, [pc, #84]	; (1000abb4 <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000ab5e:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000ab60:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000ab62:	4b15      	ldr	r3, [pc, #84]	; (1000abb8 <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ab64:	4e15      	ldr	r6, [pc, #84]	; (1000abbc <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000ab66:	681b      	ldr	r3, [r3, #0]
1000ab68:	2b00      	cmp	r3, #0
1000ab6a:	d01d      	beq.n	1000aba8 <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000ab6c:	0028      	movs	r0, r5
1000ab6e:	4b14      	ldr	r3, [pc, #80]	; (1000abc0 <getchar_b11_timeout+0x68>)
1000ab70:	4798      	blx	r3
	
	string_input[0] = 0;
1000ab72:	2300      	movs	r3, #0
1000ab74:	4d13      	ldr	r5, [pc, #76]	; (1000abc4 <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ab76:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000ab78:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ab7a:	0029      	movs	r1, r5
1000ab7c:	4b12      	ldr	r3, [pc, #72]	; (1000abc8 <getchar_b11_timeout+0x70>)
1000ab7e:	0030      	movs	r0, r6
1000ab80:	4798      	blx	r3
1000ab82:	4812      	ldr	r0, [pc, #72]	; (1000abcc <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ab84:	2100      	movs	r1, #0
1000ab86:	6803      	ldr	r3, [r0, #0]
1000ab88:	e003      	b.n	1000ab92 <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000ab8a:	3b01      	subs	r3, #1
1000ab8c:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ab8e:	2b00      	cmp	r3, #0
1000ab90:	d008      	beq.n	1000aba4 <getchar_b11_timeout+0x4c>
1000ab92:	7822      	ldrb	r2, [r4, #0]
1000ab94:	2a02      	cmp	r2, #2
1000ab96:	d1f8      	bne.n	1000ab8a <getchar_b11_timeout+0x32>
1000ab98:	2900      	cmp	r1, #0
1000ab9a:	d103      	bne.n	1000aba4 <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000ab9c:	2300      	movs	r3, #0

	return string_input[0];
1000ab9e:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000aba0:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000aba2:	bd70      	pop	{r4, r5, r6, pc}
1000aba4:	6003      	str	r3, [r0, #0]
1000aba6:	e7f9      	b.n	1000ab9c <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000aba8:	2102      	movs	r1, #2
1000abaa:	0030      	movs	r0, r6
1000abac:	4b08      	ldr	r3, [pc, #32]	; (1000abd0 <getchar_b11_timeout+0x78>)
1000abae:	4798      	blx	r3
1000abb0:	e7dc      	b.n	1000ab6c <getchar_b11_timeout+0x14>
1000abb2:	46c0      	nop			; (mov r8, r8)
1000abb4:	10014d38 	.word	0x10014d38
1000abb8:	10014d40 	.word	0x10014d40
1000abbc:	1001575c 	.word	0x1001575c
1000abc0:	1000aafd 	.word	0x1000aafd
1000abc4:	10014d3c 	.word	0x10014d3c
1000abc8:	1000b951 	.word	0x1000b951
1000abcc:	10014d34 	.word	0x10014d34
1000abd0:	1000b98d 	.word	0x1000b98d

1000abd4 <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000abd4:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000abd6:	4b0c      	ldr	r3, [pc, #48]	; (1000ac08 <platform_event_post+0x34>)
1000abd8:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000abda:	2c00      	cmp	r4, #0
1000abdc:	d010      	beq.n	1000ac00 <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000abde:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000abe0:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000abe2:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000abe4:	2300      	movs	r3, #0
1000abe6:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000abe8:	4b08      	ldr	r3, [pc, #32]	; (1000ac0c <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000abea:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000abec:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000abee:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000abf0:	2a00      	cmp	r2, #0
1000abf2:	d101      	bne.n	1000abf8 <platform_event_post+0x24>
1000abf4:	e005      	b.n	1000ac02 <platform_event_post+0x2e>
1000abf6:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000abf8:	6813      	ldr	r3, [r2, #0]
1000abfa:	2b00      	cmp	r3, #0
1000abfc:	d1fb      	bne.n	1000abf6 <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000abfe:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ac00:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000ac02:	601c      	str	r4, [r3, #0]
1000ac04:	e7fc      	b.n	1000ac00 <platform_event_post+0x2c>
1000ac06:	46c0      	nop			; (mov r8, r8)
1000ac08:	10014d48 	.word	0x10014d48
1000ac0c:	10014d44 	.word	0x10014d44

1000ac10 <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000ac10:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000ac12:	b510      	push	{r4, lr}
1000ac14:	4c07      	ldr	r4, [pc, #28]	; (1000ac34 <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000ac16:	4b08      	ldr	r3, [pc, #32]	; (1000ac38 <platform_event_init+0x28>)
1000ac18:	0020      	movs	r0, r4
1000ac1a:	601a      	str	r2, [r3, #0]
1000ac1c:	0023      	movs	r3, r4
1000ac1e:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ac20:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ac22:	601a      	str	r2, [r3, #0]
1000ac24:	330c      	adds	r3, #12
1000ac26:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ac28:	4283      	cmp	r3, r0
1000ac2a:	d1f9      	bne.n	1000ac20 <platform_event_init+0x10>
1000ac2c:	4b03      	ldr	r3, [pc, #12]	; (1000ac3c <platform_event_init+0x2c>)
1000ac2e:	346c      	adds	r4, #108	; 0x6c
1000ac30:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ac32:	bd10      	pop	{r4, pc}
1000ac34:	10014d4c 	.word	0x10014d4c
1000ac38:	10014d44 	.word	0x10014d44
1000ac3c:	10014d48 	.word	0x10014d48

1000ac40 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ac40:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ac42:	4b06      	ldr	r3, [pc, #24]	; (1000ac5c <samb11_plf_resume_callback+0x1c>)
1000ac44:	4a06      	ldr	r2, [pc, #24]	; (1000ac60 <samb11_plf_resume_callback+0x20>)
1000ac46:	6819      	ldr	r1, [r3, #0]
1000ac48:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ac4a:	685a      	ldr	r2, [r3, #4]
1000ac4c:	4b05      	ldr	r3, [pc, #20]	; (1000ac64 <samb11_plf_resume_callback+0x24>)
1000ac4e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ac50:	4b05      	ldr	r3, [pc, #20]	; (1000ac68 <samb11_plf_resume_callback+0x28>)
1000ac52:	681b      	ldr	r3, [r3, #0]
1000ac54:	2b00      	cmp	r3, #0
1000ac56:	d000      	beq.n	1000ac5a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ac58:	4798      	blx	r3
	}
}
1000ac5a:	bd10      	pop	{r4, pc}
1000ac5c:	100157a8 	.word	0x100157a8
1000ac60:	4000b00c 	.word	0x4000b00c
1000ac64:	4000b010 	.word	0x4000b010
1000ac68:	10015a84 	.word	0x10015a84

1000ac6c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ac6c:	b570      	push	{r4, r5, r6, lr}
1000ac6e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ac70:	4b13      	ldr	r3, [pc, #76]	; (1000acc0 <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ac72:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ac74:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ac76:	4b13      	ldr	r3, [pc, #76]	; (1000acc4 <at_ke_msg_send+0x58>)
1000ac78:	681b      	ldr	r3, [r3, #0]
1000ac7a:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ac7c:	2c00      	cmp	r4, #0
1000ac7e:	d018      	beq.n	1000acb2 <at_ke_msg_send+0x46>
1000ac80:	88e3      	ldrh	r3, [r4, #6]
1000ac82:	2b05      	cmp	r3, #5
1000ac84:	d015      	beq.n	1000acb2 <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000ac86:	07eb      	lsls	r3, r5, #31
1000ac88:	d414      	bmi.n	1000acb4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ac8a:	4b0f      	ldr	r3, [pc, #60]	; (1000acc8 <at_ke_msg_send+0x5c>)
1000ac8c:	2002      	movs	r0, #2
1000ac8e:	681b      	ldr	r3, [r3, #0]
1000ac90:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ac92:	4b0e      	ldr	r3, [pc, #56]	; (1000accc <at_ke_msg_send+0x60>)
1000ac94:	681b      	ldr	r3, [r3, #0]
1000ac96:	4798      	blx	r3
1000ac98:	4c0d      	ldr	r4, [pc, #52]	; (1000acd0 <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000ac9a:	2003      	movs	r0, #3
1000ac9c:	6823      	ldr	r3, [r4, #0]
1000ac9e:	4798      	blx	r3
1000aca0:	2800      	cmp	r0, #0
1000aca2:	d1fa      	bne.n	1000ac9a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000aca4:	4b0b      	ldr	r3, [pc, #44]	; (1000acd4 <at_ke_msg_send+0x68>)
1000aca6:	3002      	adds	r0, #2
1000aca8:	681b      	ldr	r3, [r3, #0]
1000acaa:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000acac:	2201      	movs	r2, #1
1000acae:	4b0a      	ldr	r3, [pc, #40]	; (1000acd8 <at_ke_msg_send+0x6c>)
1000acb0:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000acb2:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000acb4:	4b09      	ldr	r3, [pc, #36]	; (1000acdc <at_ke_msg_send+0x70>)
1000acb6:	6818      	ldr	r0, [r3, #0]
1000acb8:	4b09      	ldr	r3, [pc, #36]	; (1000ace0 <at_ke_msg_send+0x74>)
1000acba:	681b      	ldr	r3, [r3, #0]
1000acbc:	4798      	blx	r3
		}
	}
}
1000acbe:	e7f8      	b.n	1000acb2 <at_ke_msg_send+0x46>
1000acc0:	4000b1ec 	.word	0x4000b1ec
1000acc4:	10014df4 	.word	0x10014df4
1000acc8:	10014dec 	.word	0x10014dec
1000accc:	10014dfc 	.word	0x10014dfc
1000acd0:	10014dd8 	.word	0x10014dd8
1000acd4:	10014de0 	.word	0x10014de0
1000acd8:	4000b020 	.word	0x4000b020
1000acdc:	10014de4 	.word	0x10014de4
1000ace0:	10014dd4 	.word	0x10014dd4

1000ace4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000ace4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000ace6:	4c0e      	ldr	r4, [pc, #56]	; (1000ad20 <init_port_list+0x3c>)
1000ace8:	2100      	movs	r1, #0
1000acea:	2232      	movs	r2, #50	; 0x32
1000acec:	0020      	movs	r0, r4
1000acee:	4b0d      	ldr	r3, [pc, #52]	; (1000ad24 <init_port_list+0x40>)
1000acf0:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000acf2:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000acf4:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000acf6:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000acf8:	004a      	lsls	r2, r1, #1
1000acfa:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000acfc:	18a2      	adds	r2, r4, r2
1000acfe:	7853      	ldrb	r3, [r2, #1]
1000ad00:	3101      	adds	r1, #1
1000ad02:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000ad04:	b2db      	uxtb	r3, r3
1000ad06:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000ad08:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000ad0a:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ad0c:	2919      	cmp	r1, #25
1000ad0e:	d1f3      	bne.n	1000acf8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ad10:	7863      	ldrb	r3, [r4, #1]
1000ad12:	4383      	bics	r3, r0
1000ad14:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000ad16:	78e3      	ldrb	r3, [r4, #3]
1000ad18:	4383      	bics	r3, r0
1000ad1a:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000ad1c:	bd70      	pop	{r4, r5, r6, pc}
1000ad1e:	46c0      	nop			; (mov r8, r8)
1000ad20:	100157c4 	.word	0x100157c4
1000ad24:	100115d1 	.word	0x100115d1

1000ad28 <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ad2a:	4644      	mov	r4, r8
1000ad2c:	465f      	mov	r7, fp
1000ad2e:	4656      	mov	r6, sl
1000ad30:	464d      	mov	r5, r9
1000ad32:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ad34:	4c55      	ldr	r4, [pc, #340]	; (1000ae8c <platform_driver_init+0x164>)
1000ad36:	7823      	ldrb	r3, [r4, #0]
1000ad38:	2b00      	cmp	r3, #0
1000ad3a:	d004      	beq.n	1000ad46 <platform_driver_init+0x1e>
1000ad3c:	7823      	ldrb	r3, [r4, #0]
1000ad3e:	b2db      	uxtb	r3, r3
1000ad40:	2b01      	cmp	r3, #1
1000ad42:	d100      	bne.n	1000ad46 <platform_driver_init+0x1e>
1000ad44:	e09e      	b.n	1000ae84 <platform_driver_init+0x15c>
		init_port_list();
1000ad46:	4b52      	ldr	r3, [pc, #328]	; (1000ae90 <platform_driver_init+0x168>)
1000ad48:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ad4a:	4a52      	ldr	r2, [pc, #328]	; (1000ae94 <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ad4c:	4b52      	ldr	r3, [pc, #328]	; (1000ae98 <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ad4e:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ad50:	4d52      	ldr	r5, [pc, #328]	; (1000ae9c <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ad52:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ad54:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ad56:	4a52      	ldr	r2, [pc, #328]	; (1000aea0 <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ad58:	4952      	ldr	r1, [pc, #328]	; (1000aea4 <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000ad5a:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ad5c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ad5e:	4b52      	ldr	r3, [pc, #328]	; (1000aea8 <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ad60:	4e52      	ldr	r6, [pc, #328]	; (1000aeac <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ad62:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000ad64:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000ad66:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ad68:	2300      	movs	r3, #0
1000ad6a:	4699      	mov	r9, r3
1000ad6c:	464a      	mov	r2, r9
1000ad6e:	4b50      	ldr	r3, [pc, #320]	; (1000aeb0 <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ad70:	4950      	ldr	r1, [pc, #320]	; (1000aeb4 <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ad72:	601a      	str	r2, [r3, #0]
1000ad74:	2280      	movs	r2, #128	; 0x80
1000ad76:	2380      	movs	r3, #128	; 0x80
1000ad78:	0412      	lsls	r2, r2, #16
1000ad7a:	50ea      	str	r2, [r5, r3]
1000ad7c:	4693      	mov	fp, r2
1000ad7e:	2280      	movs	r2, #128	; 0x80
1000ad80:	0452      	lsls	r2, r2, #17
1000ad82:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ad84:	4b4c      	ldr	r3, [pc, #304]	; (1000aeb8 <platform_driver_init+0x190>)
1000ad86:	4692      	mov	sl, r2
1000ad88:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ad8a:	4a4c      	ldr	r2, [pc, #304]	; (1000aebc <platform_driver_init+0x194>)
1000ad8c:	4b4c      	ldr	r3, [pc, #304]	; (1000aec0 <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ad8e:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ad90:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ad92:	4a4c      	ldr	r2, [pc, #304]	; (1000aec4 <platform_driver_init+0x19c>)
1000ad94:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ad96:	4a4c      	ldr	r2, [pc, #304]	; (1000aec8 <platform_driver_init+0x1a0>)
1000ad98:	6811      	ldr	r1, [r2, #0]
1000ad9a:	4a4c      	ldr	r2, [pc, #304]	; (1000aecc <platform_driver_init+0x1a4>)
1000ad9c:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ad9e:	4a4c      	ldr	r2, [pc, #304]	; (1000aed0 <platform_driver_init+0x1a8>)
1000ada0:	6811      	ldr	r1, [r2, #0]
1000ada2:	4a4c      	ldr	r2, [pc, #304]	; (1000aed4 <platform_driver_init+0x1ac>)
1000ada4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ada6:	4a4c      	ldr	r2, [pc, #304]	; (1000aed8 <platform_driver_init+0x1b0>)
1000ada8:	494c      	ldr	r1, [pc, #304]	; (1000aedc <platform_driver_init+0x1b4>)
1000adaa:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000adac:	4a4c      	ldr	r2, [pc, #304]	; (1000aee0 <platform_driver_init+0x1b8>)
1000adae:	494d      	ldr	r1, [pc, #308]	; (1000aee4 <platform_driver_init+0x1bc>)
1000adb0:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000adb2:	4a4d      	ldr	r2, [pc, #308]	; (1000aee8 <platform_driver_init+0x1c0>)
1000adb4:	4690      	mov	r8, r2
1000adb6:	4641      	mov	r1, r8
1000adb8:	4a4c      	ldr	r2, [pc, #304]	; (1000aeec <platform_driver_init+0x1c4>)
1000adba:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000adbc:	4a4c      	ldr	r2, [pc, #304]	; (1000aef0 <platform_driver_init+0x1c8>)
1000adbe:	494d      	ldr	r1, [pc, #308]	; (1000aef4 <platform_driver_init+0x1cc>)
1000adc0:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000adc2:	494d      	ldr	r1, [pc, #308]	; (1000aef8 <platform_driver_init+0x1d0>)
1000adc4:	4a4d      	ldr	r2, [pc, #308]	; (1000aefc <platform_driver_init+0x1d4>)
1000adc6:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000adc8:	4f4d      	ldr	r7, [pc, #308]	; (1000af00 <platform_driver_init+0x1d8>)
1000adca:	4a4e      	ldr	r2, [pc, #312]	; (1000af04 <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000adcc:	494e      	ldr	r1, [pc, #312]	; (1000af08 <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000adce:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000add0:	4a4e      	ldr	r2, [pc, #312]	; (1000af0c <platform_driver_init+0x1e4>)
1000add2:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000add4:	4a4e      	ldr	r2, [pc, #312]	; (1000af10 <platform_driver_init+0x1e8>)
1000add6:	494f      	ldr	r1, [pc, #316]	; (1000af14 <platform_driver_init+0x1ec>)
1000add8:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000adda:	4a4f      	ldr	r2, [pc, #316]	; (1000af18 <platform_driver_init+0x1f0>)
1000addc:	494f      	ldr	r1, [pc, #316]	; (1000af1c <platform_driver_init+0x1f4>)
1000adde:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ade0:	4a4f      	ldr	r2, [pc, #316]	; (1000af20 <platform_driver_init+0x1f8>)
1000ade2:	4950      	ldr	r1, [pc, #320]	; (1000af24 <platform_driver_init+0x1fc>)
1000ade4:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ade6:	4a50      	ldr	r2, [pc, #320]	; (1000af28 <platform_driver_init+0x200>)
1000ade8:	4950      	ldr	r1, [pc, #320]	; (1000af2c <platform_driver_init+0x204>)
1000adea:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000adec:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000adee:	4950      	ldr	r1, [pc, #320]	; (1000af30 <platform_driver_init+0x208>)
1000adf0:	6833      	ldr	r3, [r6, #0]
1000adf2:	2028      	movs	r0, #40	; 0x28
1000adf4:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000adf6:	6833      	ldr	r3, [r6, #0]
1000adf8:	494e      	ldr	r1, [pc, #312]	; (1000af34 <platform_driver_init+0x20c>)
1000adfa:	2027      	movs	r0, #39	; 0x27
1000adfc:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000adfe:	4b4e      	ldr	r3, [pc, #312]	; (1000af38 <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ae00:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ae02:	681a      	ldr	r2, [r3, #0]
1000ae04:	4b4d      	ldr	r3, [pc, #308]	; (1000af3c <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ae06:	484e      	ldr	r0, [pc, #312]	; (1000af40 <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ae08:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ae0a:	4b4e      	ldr	r3, [pc, #312]	; (1000af44 <platform_driver_init+0x21c>)
1000ae0c:	4a4e      	ldr	r2, [pc, #312]	; (1000af48 <platform_driver_init+0x220>)
1000ae0e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ae10:	4b4e      	ldr	r3, [pc, #312]	; (1000af4c <platform_driver_init+0x224>)
1000ae12:	4a4f      	ldr	r2, [pc, #316]	; (1000af50 <platform_driver_init+0x228>)
1000ae14:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ae16:	4b4f      	ldr	r3, [pc, #316]	; (1000af54 <platform_driver_init+0x22c>)
1000ae18:	4a4f      	ldr	r2, [pc, #316]	; (1000af58 <platform_driver_init+0x230>)
1000ae1a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000ae1c:	4b4f      	ldr	r3, [pc, #316]	; (1000af5c <platform_driver_init+0x234>)
1000ae1e:	4a50      	ldr	r2, [pc, #320]	; (1000af60 <platform_driver_init+0x238>)
1000ae20:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000ae22:	4b50      	ldr	r3, [pc, #320]	; (1000af64 <platform_driver_init+0x23c>)
1000ae24:	4a50      	ldr	r2, [pc, #320]	; (1000af68 <platform_driver_init+0x240>)
1000ae26:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000ae28:	4b50      	ldr	r3, [pc, #320]	; (1000af6c <platform_driver_init+0x244>)
1000ae2a:	4a51      	ldr	r2, [pc, #324]	; (1000af70 <platform_driver_init+0x248>)
1000ae2c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000ae2e:	4b51      	ldr	r3, [pc, #324]	; (1000af74 <platform_driver_init+0x24c>)
1000ae30:	4a51      	ldr	r2, [pc, #324]	; (1000af78 <platform_driver_init+0x250>)
1000ae32:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ae34:	22a0      	movs	r2, #160	; 0xa0
1000ae36:	4b51      	ldr	r3, [pc, #324]	; (1000af7c <platform_driver_init+0x254>)
1000ae38:	0092      	lsls	r2, r2, #2
1000ae3a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ae3c:	2280      	movs	r2, #128	; 0x80
1000ae3e:	4b50      	ldr	r3, [pc, #320]	; (1000af80 <platform_driver_init+0x258>)
1000ae40:	0092      	lsls	r2, r2, #2
1000ae42:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000ae44:	4b4f      	ldr	r3, [pc, #316]	; (1000af84 <platform_driver_init+0x25c>)
1000ae46:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae48:	465b      	mov	r3, fp
1000ae4a:	602b      	str	r3, [r5, #0]
1000ae4c:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ae4e:	464a      	mov	r2, r9
1000ae50:	602b      	str	r3, [r5, #0]
1000ae52:	4b4d      	ldr	r3, [pc, #308]	; (1000af88 <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000ae54:	4d4d      	ldr	r5, [pc, #308]	; (1000af8c <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ae56:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ae58:	4643      	mov	r3, r8
1000ae5a:	4a4d      	ldr	r2, [pc, #308]	; (1000af90 <platform_driver_init+0x268>)
1000ae5c:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000ae5e:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ae60:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ae62:	683b      	ldr	r3, [r7, #0]
1000ae64:	4a4b      	ldr	r2, [pc, #300]	; (1000af94 <platform_driver_init+0x26c>)
1000ae66:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ae68:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000ae6a:	2001      	movs	r0, #1
1000ae6c:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000ae6e:	2002      	movs	r0, #2
1000ae70:	47a8      	blx	r5
		platform_initialized = 1;
1000ae72:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000ae74:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000ae76:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000ae78:	bc3c      	pop	{r2, r3, r4, r5}
1000ae7a:	4690      	mov	r8, r2
1000ae7c:	4699      	mov	r9, r3
1000ae7e:	46a2      	mov	sl, r4
1000ae80:	46ab      	mov	fp, r5
1000ae82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000ae84:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ae86:	2001      	movs	r0, #1
1000ae88:	e7f6      	b.n	1000ae78 <platform_driver_init+0x150>
1000ae8a:	46c0      	nop			; (mov r8, r8)
1000ae8c:	10014ddc 	.word	0x10014ddc
1000ae90:	1000ace5 	.word	0x1000ace5
1000ae94:	4000b00c 	.word	0x4000b00c
1000ae98:	fffe0fd3 	.word	0xfffe0fd3
1000ae9c:	e000e100 	.word	0xe000e100
1000aea0:	100157a8 	.word	0x100157a8
1000aea4:	4000b010 	.word	0x4000b010
1000aea8:	ffffe7c0 	.word	0xffffe7c0
1000aeac:	10015a78 	.word	0x10015a78
1000aeb0:	10014df8 	.word	0x10014df8
1000aeb4:	0001bc51 	.word	0x0001bc51
1000aeb8:	000007d7 	.word	0x000007d7
1000aebc:	100157b4 	.word	0x100157b4
1000aec0:	000007bd 	.word	0x000007bd
1000aec4:	10015a7c 	.word	0x10015a7c
1000aec8:	100400bc 	.word	0x100400bc
1000aecc:	10014dd0 	.word	0x10014dd0
1000aed0:	100400b8 	.word	0x100400b8
1000aed4:	10014dcc 	.word	0x10014dcc
1000aed8:	100157b0 	.word	0x100157b0
1000aedc:	0001b99f 	.word	0x0001b99f
1000aee0:	100157bc 	.word	0x100157bc
1000aee4:	0001b9db 	.word	0x0001b9db
1000aee8:	10015a8c 	.word	0x10015a8c
1000aeec:	1004003c 	.word	0x1004003c
1000aef0:	100157c0 	.word	0x100157c0
1000aef4:	10041fc0 	.word	0x10041fc0
1000aef8:	10041fc4 	.word	0x10041fc4
1000aefc:	10015a88 	.word	0x10015a88
1000af00:	10015a80 	.word	0x10015a80
1000af04:	10041fd4 	.word	0x10041fd4
1000af08:	10041fd8 	.word	0x10041fd8
1000af0c:	100157b8 	.word	0x100157b8
1000af10:	10014dec 	.word	0x10014dec
1000af14:	0001cbe9 	.word	0x0001cbe9
1000af18:	10014de0 	.word	0x10014de0
1000af1c:	0001cd8f 	.word	0x0001cd8f
1000af20:	10014dfc 	.word	0x10014dfc
1000af24:	0001cea3 	.word	0x0001cea3
1000af28:	10014dd8 	.word	0x10014dd8
1000af2c:	0001cbcf 	.word	0x0001cbcf
1000af30:	1000b3c5 	.word	0x1000b3c5
1000af34:	1000b365 	.word	0x1000b365
1000af38:	100400e4 	.word	0x100400e4
1000af3c:	10014df4 	.word	0x10014df4
1000af40:	100157f8 	.word	0x100157f8
1000af44:	10014e04 	.word	0x10014e04
1000af48:	00019fe9 	.word	0x00019fe9
1000af4c:	10014dd4 	.word	0x10014dd4
1000af50:	0001dbdd 	.word	0x0001dbdd
1000af54:	10014de8 	.word	0x10014de8
1000af58:	0001dc5b 	.word	0x0001dc5b
1000af5c:	10014de4 	.word	0x10014de4
1000af60:	100405ec 	.word	0x100405ec
1000af64:	10014df0 	.word	0x10014df0
1000af68:	0001d5e3 	.word	0x0001d5e3
1000af6c:	10014e08 	.word	0x10014e08
1000af70:	10040c20 	.word	0x10040c20
1000af74:	10014dc8 	.word	0x10014dc8
1000af78:	00019f09 	.word	0x00019f09
1000af7c:	100115d1 	.word	0x100115d1
1000af80:	10015a90 	.word	0x10015a90
1000af84:	1000ac11 	.word	0x1000ac11
1000af88:	10015a84 	.word	0x10015a84
1000af8c:	1000b405 	.word	0x1000b405
1000af90:	1000ac41 	.word	0x1000ac41
1000af94:	1000b421 	.word	0x1000b421

1000af98 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000af98:	4b05      	ldr	r3, [pc, #20]	; (1000afb0 <platform_register_ble_msg_handler+0x18>)
1000af9a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000af9c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000af9e:	2a01      	cmp	r2, #1
1000afa0:	d001      	beq.n	1000afa6 <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000afa2:	0018      	movs	r0, r3
1000afa4:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000afa6:	4b03      	ldr	r3, [pc, #12]	; (1000afb4 <platform_register_ble_msg_handler+0x1c>)
1000afa8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000afaa:	2300      	movs	r3, #0
1000afac:	e7f9      	b.n	1000afa2 <platform_register_ble_msg_handler+0xa>
1000afae:	46c0      	nop			; (mov r8, r8)
1000afb0:	10014ddc 	.word	0x10014ddc
1000afb4:	10014df8 	.word	0x10014df8

1000afb8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000afb8:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000afba:	4b0e      	ldr	r3, [pc, #56]	; (1000aff4 <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000afbc:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000afbe:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000afc0:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000afc2:	2b00      	cmp	r3, #0
1000afc4:	d014      	beq.n	1000aff0 <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000afc6:	4798      	blx	r3
1000afc8:	0001      	movs	r1, r0
1000afca:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000afcc:	4d0a      	ldr	r5, [pc, #40]	; (1000aff8 <platform_interface_send+0x40>)
1000afce:	88a2      	ldrh	r2, [r4, #4]
1000afd0:	682d      	ldr	r5, [r5, #0]
1000afd2:	88e3      	ldrh	r3, [r4, #6]
1000afd4:	8820      	ldrh	r0, [r4, #0]
1000afd6:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000afd8:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000afda:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000afdc:	2a00      	cmp	r2, #0
1000afde:	d003      	beq.n	1000afe8 <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000afe0:	0021      	movs	r1, r4
1000afe2:	4b06      	ldr	r3, [pc, #24]	; (1000affc <platform_interface_send+0x44>)
1000afe4:	3108      	adds	r1, #8
1000afe6:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000afe8:	0028      	movs	r0, r5
1000afea:	4b05      	ldr	r3, [pc, #20]	; (1000b000 <platform_interface_send+0x48>)
1000afec:	4798      	blx	r3
	}
}
1000afee:	bd70      	pop	{r4, r5, r6, pc}
1000aff0:	0001      	movs	r1, r0
1000aff2:	e7eb      	b.n	1000afcc <platform_interface_send+0x14>
1000aff4:	10014dd0 	.word	0x10014dd0
1000aff8:	10014e04 	.word	0x10014e04
1000affc:	100115bf 	.word	0x100115bf
1000b000:	1000ac6d 	.word	0x1000ac6d

1000b004 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b004:	b570      	push	{r4, r5, r6, lr}
1000b006:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b008:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b00a:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b00c:	4302      	orrs	r2, r0
1000b00e:	20a0      	movs	r0, #160	; 0xa0
1000b010:	4b09      	ldr	r3, [pc, #36]	; (1000b038 <send_plf_int_msg_ind+0x34>)
1000b012:	2105      	movs	r1, #5
1000b014:	681c      	ldr	r4, [r3, #0]
1000b016:	00c0      	lsls	r0, r0, #3
1000b018:	002b      	movs	r3, r5
1000b01a:	47a0      	blx	r4
1000b01c:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000b01e:	d00a      	beq.n	1000b036 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b020:	2d00      	cmp	r5, #0
1000b022:	d005      	beq.n	1000b030 <send_plf_int_msg_ind+0x2c>
1000b024:	2e00      	cmp	r6, #0
1000b026:	d003      	beq.n	1000b030 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b028:	002a      	movs	r2, r5
1000b02a:	0031      	movs	r1, r6
1000b02c:	4b03      	ldr	r3, [pc, #12]	; (1000b03c <send_plf_int_msg_ind+0x38>)
1000b02e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b030:	0020      	movs	r0, r4
1000b032:	4b03      	ldr	r3, [pc, #12]	; (1000b040 <send_plf_int_msg_ind+0x3c>)
1000b034:	4798      	blx	r3
	}
}
1000b036:	bd70      	pop	{r4, r5, r6, pc}
1000b038:	10014e04 	.word	0x10014e04
1000b03c:	100115bf 	.word	0x100115bf
1000b040:	1000ac6d 	.word	0x1000ac6d

1000b044 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b044:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b046:	4644      	mov	r4, r8
1000b048:	465f      	mov	r7, fp
1000b04a:	4656      	mov	r6, sl
1000b04c:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b04e:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b050:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b052:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b054:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b056:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b058:	1ce3      	adds	r3, r4, #3
1000b05a:	d800      	bhi.n	1000b05e <platform_event_wait+0x1a>
1000b05c:	e0ea      	b.n	1000b234 <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b05e:	2300      	movs	r3, #0
1000b060:	4699      	mov	r9, r3
1000b062:	4b88      	ldr	r3, [pc, #544]	; (1000b284 <platform_event_wait+0x240>)
1000b064:	2700      	movs	r7, #0
1000b066:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b068:	4b87      	ldr	r3, [pc, #540]	; (1000b288 <platform_event_wait+0x244>)
1000b06a:	4d88      	ldr	r5, [pc, #544]	; (1000b28c <platform_event_wait+0x248>)
1000b06c:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b06e:	4b88      	ldr	r3, [pc, #544]	; (1000b290 <platform_event_wait+0x24c>)
1000b070:	4e88      	ldr	r6, [pc, #544]	; (1000b294 <platform_event_wait+0x250>)
1000b072:	469a      	mov	sl, r3
1000b074:	e003      	b.n	1000b07e <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000b076:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b078:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000b07a:	2b00      	cmp	r3, #0
1000b07c:	d052      	beq.n	1000b124 <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b07e:	4643      	mov	r3, r8
1000b080:	0029      	movs	r1, r5
1000b082:	6830      	ldr	r0, [r6, #0]
1000b084:	681b      	ldr	r3, [r3, #0]
1000b086:	4798      	blx	r3
1000b088:	2800      	cmp	r0, #0
1000b08a:	d1f4      	bne.n	1000b076 <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000b08c:	682c      	ldr	r4, [r5, #0]
1000b08e:	88a3      	ldrh	r3, [r4, #4]
1000b090:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b092:	23cd      	movs	r3, #205	; 0xcd
1000b094:	009b      	lsls	r3, r3, #2
1000b096:	4599      	cmp	r9, r3
1000b098:	d04f      	beq.n	1000b13a <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b09a:	8923      	ldrh	r3, [r4, #8]
1000b09c:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b09e:	8963      	ldrh	r3, [r4, #10]
1000b0a0:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b0a2:	9b01      	ldr	r3, [sp, #4]
1000b0a4:	2b00      	cmp	r3, #0
1000b0a6:	d000      	beq.n	1000b0aa <platform_event_wait+0x66>
1000b0a8:	e07b      	b.n	1000b1a2 <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b0aa:	23a0      	movs	r3, #160	; 0xa0
1000b0ac:	00db      	lsls	r3, r3, #3
1000b0ae:	4599      	cmp	r9, r3
1000b0b0:	d051      	beq.n	1000b156 <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b0b2:	4653      	mov	r3, sl
1000b0b4:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b0b6:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b0b8:	2b00      	cmp	r3, #0
1000b0ba:	d100      	bne.n	1000b0be <platform_event_wait+0x7a>
1000b0bc:	e084      	b.n	1000b1c8 <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b0be:	22cd      	movs	r2, #205	; 0xcd
1000b0c0:	88a3      	ldrh	r3, [r4, #4]
1000b0c2:	0092      	lsls	r2, r2, #2
1000b0c4:	4293      	cmp	r3, r2
1000b0c6:	d03d      	beq.n	1000b144 <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b0c8:	4a73      	ldr	r2, [pc, #460]	; (1000b298 <platform_event_wait+0x254>)
1000b0ca:	4f74      	ldr	r7, [pc, #464]	; (1000b29c <platform_event_wait+0x258>)
1000b0cc:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000b0ce:	703b      	strb	r3, [r7, #0]
1000b0d0:	0a1b      	lsrs	r3, r3, #8
1000b0d2:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b0d4:	4b72      	ldr	r3, [pc, #456]	; (1000b2a0 <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b0d6:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b0d8:	8920      	ldrh	r0, [r4, #8]
1000b0da:	681b      	ldr	r3, [r3, #0]
1000b0dc:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b0de:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b0e0:	7138      	strb	r0, [r7, #4]
1000b0e2:	0a00      	lsrs	r0, r0, #8
1000b0e4:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b0e6:	6818      	ldr	r0, [r3, #0]
1000b0e8:	682b      	ldr	r3, [r5, #0]
1000b0ea:	88db      	ldrh	r3, [r3, #6]
1000b0ec:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b0ee:	682c      	ldr	r4, [r5, #0]
1000b0f0:	8963      	ldrh	r3, [r4, #10]
1000b0f2:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b0f4:	464b      	mov	r3, r9
1000b0f6:	3008      	adds	r0, #8
1000b0f8:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000b0fa:	8962      	ldrh	r2, [r4, #10]
1000b0fc:	2a00      	cmp	r2, #0
1000b0fe:	d000      	beq.n	1000b102 <platform_event_wait+0xbe>
1000b100:	e092      	b.n	1000b228 <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b102:	4653      	mov	r3, sl
1000b104:	3208      	adds	r2, #8
1000b106:	0038      	movs	r0, r7
1000b108:	681b      	ldr	r3, [r3, #0]
1000b10a:	0011      	movs	r1, r2
1000b10c:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b10e:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b110:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b112:	4699      	mov	r9, r3
1000b114:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b116:	465b      	mov	r3, fp
1000b118:	0020      	movs	r0, r4
1000b11a:	681b      	ldr	r3, [r3, #0]
1000b11c:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000b11e:	464b      	mov	r3, r9
1000b120:	2b00      	cmp	r3, #0
1000b122:	d1ac      	bne.n	1000b07e <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000b124:	9b01      	ldr	r3, [sp, #4]
1000b126:	2b00      	cmp	r3, #0
1000b128:	d150      	bne.n	1000b1cc <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b12a:	0038      	movs	r0, r7
1000b12c:	b009      	add	sp, #36	; 0x24
1000b12e:	bc3c      	pop	{r2, r3, r4, r5}
1000b130:	4690      	mov	r8, r2
1000b132:	4699      	mov	r9, r3
1000b134:	46a2      	mov	sl, r4
1000b136:	46ab      	mov	fp, r5
1000b138:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b13a:	4b55      	ldr	r3, [pc, #340]	; (1000b290 <platform_event_wait+0x24c>)
1000b13c:	681b      	ldr	r3, [r3, #0]
1000b13e:	9302      	str	r3, [sp, #8]
1000b140:	2b00      	cmp	r3, #0
1000b142:	d041      	beq.n	1000b1c8 <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b144:	2301      	movs	r3, #1
1000b146:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b148:	9b01      	ldr	r3, [sp, #4]
1000b14a:	2b00      	cmp	r3, #0
1000b14c:	d0e3      	beq.n	1000b116 <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b14e:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b150:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b152:	4699      	mov	r9, r3
1000b154:	e7df      	b.n	1000b116 <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b156:	4b53      	ldr	r3, [pc, #332]	; (1000b2a4 <platform_event_wait+0x260>)
1000b158:	881f      	ldrh	r7, [r3, #0]
1000b15a:	4699      	mov	r9, r3
1000b15c:	9b02      	ldr	r3, [sp, #8]
1000b15e:	19da      	adds	r2, r3, r7
1000b160:	23a0      	movs	r3, #160	; 0xa0
1000b162:	009b      	lsls	r3, r3, #2
1000b164:	429a      	cmp	r2, r3
1000b166:	dd03      	ble.n	1000b170 <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b168:	2780      	movs	r7, #128	; 0x80
1000b16a:	464b      	mov	r3, r9
1000b16c:	00bf      	lsls	r7, r7, #2
1000b16e:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b170:	0021      	movs	r1, r4
1000b172:	4b4a      	ldr	r3, [pc, #296]	; (1000b29c <platform_event_wait+0x258>)
1000b174:	9c02      	ldr	r4, [sp, #8]
1000b176:	18ff      	adds	r7, r7, r3
1000b178:	0022      	movs	r2, r4
1000b17a:	310c      	adds	r1, #12
1000b17c:	0038      	movs	r0, r7
1000b17e:	4b4a      	ldr	r3, [pc, #296]	; (1000b2a8 <platform_event_wait+0x264>)
1000b180:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b182:	0022      	movs	r2, r4
1000b184:	0039      	movs	r1, r7
1000b186:	4b49      	ldr	r3, [pc, #292]	; (1000b2ac <platform_event_wait+0x268>)
1000b188:	9803      	ldr	r0, [sp, #12]
1000b18a:	4798      	blx	r3
				plf_event_buff_index += len;
1000b18c:	464b      	mov	r3, r9
1000b18e:	46a4      	mov	ip, r4
1000b190:	464a      	mov	r2, r9
1000b192:	881b      	ldrh	r3, [r3, #0]
1000b194:	682c      	ldr	r4, [r5, #0]
1000b196:	4463      	add	r3, ip
1000b198:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b19a:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b19c:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b19e:	4699      	mov	r9, r3
1000b1a0:	e7b9      	b.n	1000b116 <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b1a2:	220d      	movs	r2, #13
1000b1a4:	2100      	movs	r1, #0
1000b1a6:	a804      	add	r0, sp, #16
1000b1a8:	4b41      	ldr	r3, [pc, #260]	; (1000b2b0 <platform_event_wait+0x26c>)
1000b1aa:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b1ac:	2333      	movs	r3, #51	; 0x33
1000b1ae:	aa04      	add	r2, sp, #16
1000b1b0:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b1b2:	3b30      	subs	r3, #48	; 0x30
1000b1b4:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b1b6:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b1b8:	3302      	adds	r3, #2
1000b1ba:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b1bc:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b1be:	210d      	movs	r1, #13
1000b1c0:	0010      	movs	r0, r2
1000b1c2:	4b3c      	ldr	r3, [pc, #240]	; (1000b2b4 <platform_event_wait+0x270>)
1000b1c4:	4798      	blx	r3
1000b1c6:	e770      	b.n	1000b0aa <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b1c8:	4699      	mov	r9, r3
1000b1ca:	e7a4      	b.n	1000b116 <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b1cc:	6833      	ldr	r3, [r6, #0]
1000b1ce:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b1d0:	2b00      	cmp	r3, #0
1000b1d2:	d053      	beq.n	1000b27c <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b1d4:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b1d6:	2314      	movs	r3, #20
1000b1d8:	4443      	add	r3, r8
1000b1da:	469a      	mov	sl, r3
1000b1dc:	4b36      	ldr	r3, [pc, #216]	; (1000b2b8 <platform_event_wait+0x274>)
1000b1de:	4650      	mov	r0, sl
1000b1e0:	681b      	ldr	r3, [r3, #0]
1000b1e2:	4798      	blx	r3
	while(NULL != current)
1000b1e4:	2500      	movs	r5, #0
1000b1e6:	2c00      	cmp	r4, #0
1000b1e8:	d019      	beq.n	1000b21e <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b1ea:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000b1ec:	4b26      	ldr	r3, [pc, #152]	; (1000b288 <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b1ee:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b1f0:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000b1f2:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b1f4:	4699      	mov	r9, r3
1000b1f6:	4644      	mov	r4, r8
1000b1f8:	e003      	b.n	1000b202 <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b1fa:	0005      	movs	r5, r0
1000b1fc:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b1fe:	2800      	cmp	r0, #0
1000b200:	d00d      	beq.n	1000b21e <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b202:	6803      	ldr	r3, [r0, #0]
1000b204:	889b      	ldrh	r3, [r3, #4]
1000b206:	42b3      	cmp	r3, r6
1000b208:	d1f7      	bne.n	1000b1fa <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000b20a:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000b20c:	2d00      	cmp	r5, #0
1000b20e:	d02f      	beq.n	1000b270 <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000b210:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000b212:	464b      	mov	r3, r9
1000b214:	681b      	ldr	r3, [r3, #0]
1000b216:	4798      	blx	r3
				current = prev->pstrNext;
1000b218:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b21a:	2800      	cmp	r0, #0
1000b21c:	d1f1      	bne.n	1000b202 <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b21e:	4b27      	ldr	r3, [pc, #156]	; (1000b2bc <platform_event_wait+0x278>)
1000b220:	4650      	mov	r0, sl
1000b222:	681b      	ldr	r3, [r3, #0]
1000b224:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b226:	e780      	b.n	1000b12a <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b228:	0021      	movs	r1, r4
1000b22a:	4b1f      	ldr	r3, [pc, #124]	; (1000b2a8 <platform_event_wait+0x264>)
1000b22c:	310c      	adds	r1, #12
1000b22e:	4798      	blx	r3
1000b230:	8962      	ldrh	r2, [r4, #10]
1000b232:	e766      	b.n	1000b102 <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b234:	220d      	movs	r2, #13
1000b236:	2100      	movs	r1, #0
1000b238:	4b1d      	ldr	r3, [pc, #116]	; (1000b2b0 <platform_event_wait+0x26c>)
1000b23a:	a804      	add	r0, sp, #16
1000b23c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b23e:	2333      	movs	r3, #51	; 0x33
1000b240:	aa04      	add	r2, sp, #16
1000b242:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b244:	3b30      	subs	r3, #48	; 0x30
1000b246:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b248:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b24a:	3302      	adds	r3, #2
1000b24c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b24e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b250:	0a23      	lsrs	r3, r4, #8
1000b252:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b254:	0c23      	lsrs	r3, r4, #16
1000b256:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b258:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b25a:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b25c:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b25e:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b260:	4b14      	ldr	r3, [pc, #80]	; (1000b2b4 <platform_event_wait+0x270>)
1000b262:	210d      	movs	r1, #13
1000b264:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b266:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b268:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b26a:	2301      	movs	r3, #1
1000b26c:	9301      	str	r3, [sp, #4]
1000b26e:	e6f6      	b.n	1000b05e <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b270:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000b272:	465b      	mov	r3, fp
1000b274:	681b      	ldr	r3, [r3, #0]
1000b276:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b278:	6a20      	ldr	r0, [r4, #32]
1000b27a:	e7c0      	b.n	1000b1fe <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b27c:	464b      	mov	r3, r9
1000b27e:	6a1b      	ldr	r3, [r3, #32]
1000b280:	deff      	udf	#255	; 0xff
1000b282:	46c0      	nop			; (mov r8, r8)
1000b284:	10014df0 	.word	0x10014df0
1000b288:	10014dc8 	.word	0x10014dc8
1000b28c:	10014dc4 	.word	0x10014dc4
1000b290:	10014df8 	.word	0x10014df8
1000b294:	10014e08 	.word	0x10014e08
1000b298:	10014e00 	.word	0x10014e00
1000b29c:	100157f8 	.word	0x100157f8
1000b2a0:	10014dcc 	.word	0x10014dcc
1000b2a4:	10015a90 	.word	0x10015a90
1000b2a8:	100115bf 	.word	0x100115bf
1000b2ac:	1000abd5 	.word	0x1000abd5
1000b2b0:	100115d1 	.word	0x100115d1
1000b2b4:	1000afb9 	.word	0x1000afb9
1000b2b8:	10014de8 	.word	0x10014de8
1000b2bc:	10014dd4 	.word	0x10014dd4

1000b2c0 <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b2c0:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000b2c2:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b2c4:	4b02      	ldr	r3, [pc, #8]	; (1000b2d0 <acquire_sleep_lock+0x10>)
1000b2c6:	0200      	lsls	r0, r0, #8
1000b2c8:	681b      	ldr	r3, [r3, #0]
1000b2ca:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b2cc:	2008      	movs	r0, #8
1000b2ce:	bd10      	pop	{r4, pc}
1000b2d0:	100157b0 	.word	0x100157b0

1000b2d4 <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b2d4:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000b2d6:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b2d8:	4b02      	ldr	r3, [pc, #8]	; (1000b2e4 <release_message_lock+0x10>)
1000b2da:	01c0      	lsls	r0, r0, #7
1000b2dc:	681b      	ldr	r3, [r3, #0]
1000b2de:	4798      	blx	r3
	return status;
}
1000b2e0:	2000      	movs	r0, #0
1000b2e2:	bd10      	pop	{r4, pc}
1000b2e4:	100157bc 	.word	0x100157bc

1000b2e8 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b2e8:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000b2ea:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b2ec:	4c04      	ldr	r4, [pc, #16]	; (1000b300 <release_sleep_lock+0x18>)
1000b2ee:	01c0      	lsls	r0, r0, #7
1000b2f0:	6823      	ldr	r3, [r4, #0]
1000b2f2:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000b2f4:	2080      	movs	r0, #128	; 0x80
1000b2f6:	6823      	ldr	r3, [r4, #0]
1000b2f8:	0200      	lsls	r0, r0, #8
1000b2fa:	4798      	blx	r3
	return status;
}
1000b2fc:	2000      	movs	r0, #0
1000b2fe:	bd10      	pop	{r4, pc}
1000b300:	100157bc 	.word	0x100157bc

1000b304 <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b304:	4914      	ldr	r1, [pc, #80]	; (1000b358 <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b306:	4815      	ldr	r0, [pc, #84]	; (1000b35c <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b308:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b30a:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b30c:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b30e:	4302      	orrs	r2, r0
1000b310:	b292      	uxth	r2, r2
1000b312:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b314:	05db      	lsls	r3, r3, #23
1000b316:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b318:	d018      	beq.n	1000b34c <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b31a:	b2db      	uxtb	r3, r3
1000b31c:	425a      	negs	r2, r3
1000b31e:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000b320:	2b01      	cmp	r3, #1
1000b322:	d017      	beq.n	1000b354 <gpio1_combined_isr_handler+0x50>
1000b324:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000b326:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000b328:	085b      	lsrs	r3, r3, #1
				index++;
1000b32a:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b32c:	2b01      	cmp	r3, #1
1000b32e:	d1fa      	bne.n	1000b326 <gpio1_combined_isr_handler+0x22>
1000b330:	4093      	lsls	r3, r2
1000b332:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b334:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b336:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b338:	05db      	lsls	r3, r3, #23
1000b33a:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b33c:	d1ea      	bne.n	1000b314 <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b33e:	2180      	movs	r1, #128	; 0x80
1000b340:	4a07      	ldr	r2, [pc, #28]	; (1000b360 <gpio1_combined_isr_handler+0x5c>)
1000b342:	3381      	adds	r3, #129	; 0x81
1000b344:	0049      	lsls	r1, r1, #1
1000b346:	33ff      	adds	r3, #255	; 0xff
1000b348:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b34a:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b34c:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b34e:	4303      	orrs	r3, r0
1000b350:	b29b      	uxth	r3, r3
1000b352:	e7ef      	b.n	1000b334 <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b354:	2301      	movs	r3, #1
1000b356:	e7ed      	b.n	1000b334 <gpio1_combined_isr_handler+0x30>
1000b358:	40011000 	.word	0x40011000
1000b35c:	ffff8000 	.word	0xffff8000
1000b360:	e000e100 	.word	0xe000e100

1000b364 <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b364:	4914      	ldr	r1, [pc, #80]	; (1000b3b8 <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b366:	4815      	ldr	r0, [pc, #84]	; (1000b3bc <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b368:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b36a:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b36c:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b36e:	4302      	orrs	r2, r0
1000b370:	b292      	uxth	r2, r2
1000b372:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b374:	05db      	lsls	r3, r3, #23
1000b376:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b378:	d017      	beq.n	1000b3aa <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b37a:	b2db      	uxtb	r3, r3
1000b37c:	425a      	negs	r2, r3
1000b37e:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000b380:	2b01      	cmp	r3, #1
1000b382:	d016      	beq.n	1000b3b2 <gpio0_combined_isr_handler+0x4e>
1000b384:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000b386:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000b388:	085b      	lsrs	r3, r3, #1
				index++;
1000b38a:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b38c:	2b01      	cmp	r3, #1
1000b38e:	d1fa      	bne.n	1000b386 <gpio0_combined_isr_handler+0x22>
1000b390:	4093      	lsls	r3, r2
1000b392:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b394:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b396:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b398:	05db      	lsls	r3, r3, #23
1000b39a:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b39c:	d1ea      	bne.n	1000b374 <gpio0_combined_isr_handler+0x10>
1000b39e:	2180      	movs	r1, #128	; 0x80
1000b3a0:	4a07      	ldr	r2, [pc, #28]	; (1000b3c0 <gpio0_combined_isr_handler+0x5c>)
1000b3a2:	3381      	adds	r3, #129	; 0x81
1000b3a4:	33ff      	adds	r3, #255	; 0xff
1000b3a6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b3a8:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b3aa:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b3ac:	4303      	orrs	r3, r0
1000b3ae:	b29b      	uxth	r3, r3
1000b3b0:	e7f0      	b.n	1000b394 <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b3b2:	2301      	movs	r3, #1
1000b3b4:	e7ee      	b.n	1000b394 <gpio0_combined_isr_handler+0x30>
1000b3b6:	46c0      	nop			; (mov r8, r8)
1000b3b8:	40010000 	.word	0x40010000
1000b3bc:	ffff8000 	.word	0xffff8000
1000b3c0:	e000e100 	.word	0xe000e100

1000b3c4 <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b3c4:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b3c6:	4c0b      	ldr	r4, [pc, #44]	; (1000b3f4 <PORT1_COMB_Handler+0x30>)
1000b3c8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000b3ca:	0b5b      	lsrs	r3, r3, #13
1000b3cc:	d102      	bne.n	1000b3d4 <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b3ce:	4b0a      	ldr	r3, [pc, #40]	; (1000b3f8 <PORT1_COMB_Handler+0x34>)
1000b3d0:	4798      	blx	r3
	}
}
1000b3d2:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000b3d4:	4b09      	ldr	r3, [pc, #36]	; (1000b3fc <PORT1_COMB_Handler+0x38>)
1000b3d6:	681b      	ldr	r3, [r3, #0]
1000b3d8:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b3da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000b3dc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000b3de:	0b5b      	lsrs	r3, r3, #13
1000b3e0:	035b      	lsls	r3, r3, #13
1000b3e2:	4313      	orrs	r3, r2
1000b3e4:	8723      	strh	r3, [r4, #56]	; 0x38
1000b3e6:	2180      	movs	r1, #128	; 0x80
1000b3e8:	23c0      	movs	r3, #192	; 0xc0
1000b3ea:	4a05      	ldr	r2, [pc, #20]	; (1000b400 <PORT1_COMB_Handler+0x3c>)
1000b3ec:	0049      	lsls	r1, r1, #1
1000b3ee:	005b      	lsls	r3, r3, #1
1000b3f0:	50d1      	str	r1, [r2, r3]
1000b3f2:	e7ee      	b.n	1000b3d2 <PORT1_COMB_Handler+0xe>
1000b3f4:	40011000 	.word	0x40011000
1000b3f8:	1000b305 	.word	0x1000b305
1000b3fc:	10015a7c 	.word	0x10015a7c
1000b400:	e000e100 	.word	0xe000e100

1000b404 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b404:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b406:	2802      	cmp	r0, #2
1000b408:	d901      	bls.n	1000b40e <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b40a:	0018      	movs	r0, r3
1000b40c:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b40e:	2200      	movs	r2, #0
1000b410:	4b02      	ldr	r3, [pc, #8]	; (1000b41c <wakeup_int_unregister_callback+0x18>)
1000b412:	0080      	lsls	r0, r0, #2
1000b414:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b416:	2300      	movs	r3, #0
1000b418:	e7f7      	b.n	1000b40a <wakeup_int_unregister_callback+0x6>
1000b41a:	46c0      	nop			; (mov r8, r8)
1000b41c:	10015a94 	.word	0x10015a94

1000b420 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b420:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b422:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b424:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b426:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b428:	2a01      	cmp	r2, #1
1000b42a:	d01c      	beq.n	1000b466 <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b42c:	041a      	lsls	r2, r3, #16
1000b42e:	0e12      	lsrs	r2, r2, #24
1000b430:	2a01      	cmp	r2, #1
1000b432:	d00e      	beq.n	1000b452 <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b434:	021a      	lsls	r2, r3, #8
1000b436:	0e12      	lsrs	r2, r2, #24
1000b438:	2a01      	cmp	r2, #1
1000b43a:	d000      	beq.n	1000b43e <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000b43c:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000b43e:	4a0f      	ldr	r2, [pc, #60]	; (1000b47c <wakeup_active_event_callback+0x5c>)
1000b440:	6892      	ldr	r2, [r2, #8]
1000b442:	2a00      	cmp	r2, #0
1000b444:	d001      	beq.n	1000b44a <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000b446:	4790      	blx	r2
1000b448:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b44a:	4a0d      	ldr	r2, [pc, #52]	; (1000b480 <wakeup_active_event_callback+0x60>)
1000b44c:	4013      	ands	r3, r2
1000b44e:	6023      	str	r3, [r4, #0]
	}
}
1000b450:	e7f4      	b.n	1000b43c <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000b452:	4a0a      	ldr	r2, [pc, #40]	; (1000b47c <wakeup_active_event_callback+0x5c>)
1000b454:	6852      	ldr	r2, [r2, #4]
1000b456:	2a00      	cmp	r2, #0
1000b458:	d001      	beq.n	1000b45e <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000b45a:	4790      	blx	r2
1000b45c:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b45e:	4a09      	ldr	r2, [pc, #36]	; (1000b484 <wakeup_active_event_callback+0x64>)
1000b460:	4013      	ands	r3, r2
1000b462:	6023      	str	r3, [r4, #0]
1000b464:	e7e6      	b.n	1000b434 <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000b466:	4a05      	ldr	r2, [pc, #20]	; (1000b47c <wakeup_active_event_callback+0x5c>)
1000b468:	6812      	ldr	r2, [r2, #0]
1000b46a:	2a00      	cmp	r2, #0
1000b46c:	d001      	beq.n	1000b472 <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000b46e:	4790      	blx	r2
1000b470:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000b472:	22ff      	movs	r2, #255	; 0xff
1000b474:	4393      	bics	r3, r2
1000b476:	6023      	str	r3, [r4, #0]
1000b478:	e7d8      	b.n	1000b42c <wakeup_active_event_callback+0xc>
1000b47a:	46c0      	nop			; (mov r8, r8)
1000b47c:	10015a94 	.word	0x10015a94
1000b480:	ff00ffff 	.word	0xff00ffff
1000b484:	ffff00ff 	.word	0xffff00ff

1000b488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b48a:	4647      	mov	r7, r8
1000b48c:	000c      	movs	r4, r1
1000b48e:	b480      	push	{r7}
1000b490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b492:	2800      	cmp	r0, #0
1000b494:	d111      	bne.n	1000b4ba <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000b496:	2a00      	cmp	r2, #0
1000b498:	dd0d      	ble.n	1000b4b6 <_read+0x2e>
1000b49a:	4e09      	ldr	r6, [pc, #36]	; (1000b4c0 <_read+0x38>)
1000b49c:	4d09      	ldr	r5, [pc, #36]	; (1000b4c4 <_read+0x3c>)
1000b49e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b4a0:	0021      	movs	r1, r4
1000b4a2:	6830      	ldr	r0, [r6, #0]
1000b4a4:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000b4a6:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000b4a8:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b4aa:	42bc      	cmp	r4, r7
1000b4ac:	d1f8      	bne.n	1000b4a0 <_read+0x18>
1000b4ae:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b4b0:	bc04      	pop	{r2}
1000b4b2:	4690      	mov	r8, r2
1000b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b4b6:	2000      	movs	r0, #0
1000b4b8:	e7fa      	b.n	1000b4b0 <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b4ba:	2001      	movs	r0, #1
1000b4bc:	4240      	negs	r0, r0
1000b4be:	e7f7      	b.n	1000b4b0 <_read+0x28>
1000b4c0:	10015aa8 	.word	0x10015aa8
1000b4c4:	10015aa0 	.word	0x10015aa0

1000b4c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4ca:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b4cc:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b4ce:	b480      	push	{r7}
1000b4d0:	000e      	movs	r6, r1
1000b4d2:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b4d4:	2802      	cmp	r0, #2
1000b4d6:	d810      	bhi.n	1000b4fa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000b4d8:	2a00      	cmp	r2, #0
1000b4da:	d015      	beq.n	1000b508 <_write+0x40>
1000b4dc:	4b0b      	ldr	r3, [pc, #44]	; (1000b50c <_write+0x44>)
1000b4de:	2400      	movs	r4, #0
1000b4e0:	4698      	mov	r8, r3
1000b4e2:	4f0b      	ldr	r7, [pc, #44]	; (1000b510 <_write+0x48>)
1000b4e4:	e002      	b.n	1000b4ec <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b4e6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b4e8:	42a5      	cmp	r5, r4
1000b4ea:	d00b      	beq.n	1000b504 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b4ec:	4643      	mov	r3, r8
1000b4ee:	5d31      	ldrb	r1, [r6, r4]
1000b4f0:	6818      	ldr	r0, [r3, #0]
1000b4f2:	683b      	ldr	r3, [r7, #0]
1000b4f4:	4798      	blx	r3
1000b4f6:	2800      	cmp	r0, #0
1000b4f8:	daf5      	bge.n	1000b4e6 <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b4fa:	2001      	movs	r0, #1
1000b4fc:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000b4fe:	bc04      	pop	{r2}
1000b500:	4690      	mov	r8, r2
1000b502:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b504:	0028      	movs	r0, r5
1000b506:	e7fa      	b.n	1000b4fe <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b508:	2000      	movs	r0, #0
1000b50a:	e7f8      	b.n	1000b4fe <_write+0x36>
1000b50c:	10015aa8 	.word	0x10015aa8
1000b510:	10015aa4 	.word	0x10015aa4

1000b514 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b514:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b516:	4b21      	ldr	r3, [pc, #132]	; (1000b59c <uart_rx0_isr_handler+0x88>)
1000b518:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b51a:	6823      	ldr	r3, [r4, #0]
1000b51c:	7d1d      	ldrb	r5, [r3, #20]
1000b51e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b520:	066a      	lsls	r2, r5, #25
1000b522:	d50d      	bpl.n	1000b540 <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b524:	211e      	movs	r1, #30
1000b526:	2222      	movs	r2, #34	; 0x22
1000b528:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b52a:	7e1a      	ldrb	r2, [r3, #24]
1000b52c:	3123      	adds	r1, #35	; 0x23
1000b52e:	438a      	bics	r2, r1
1000b530:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b532:	2321      	movs	r3, #33	; 0x21
1000b534:	5ce2      	ldrb	r2, [r4, r3]
1000b536:	3b19      	subs	r3, #25
1000b538:	4213      	tst	r3, r2
1000b53a:	d11d      	bne.n	1000b578 <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b53c:	6823      	ldr	r3, [r4, #0]
1000b53e:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b540:	2201      	movs	r2, #1
1000b542:	422a      	tst	r2, r5
1000b544:	d017      	beq.n	1000b576 <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b546:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b548:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b54a:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b54c:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b54e:	6963      	ldr	r3, [r4, #20]
1000b550:	3301      	adds	r3, #1
1000b552:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b554:	8ba3      	ldrh	r3, [r4, #28]
1000b556:	3b01      	subs	r3, #1
1000b558:	b29b      	uxth	r3, r3
1000b55a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b55c:	8ba3      	ldrh	r3, [r4, #28]
1000b55e:	b29b      	uxth	r3, r3
1000b560:	2b00      	cmp	r3, #0
1000b562:	d108      	bne.n	1000b576 <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b564:	2121      	movs	r1, #33	; 0x21
1000b566:	5c60      	ldrb	r0, [r4, r1]
1000b568:	391d      	subs	r1, #29
1000b56a:	4201      	tst	r1, r0
1000b56c:	d003      	beq.n	1000b576 <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b56e:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b570:	5c20      	ldrb	r0, [r4, r0]
1000b572:	4201      	tst	r1, r0
1000b574:	d108      	bne.n	1000b588 <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000b576:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b578:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b57a:	5ca2      	ldrb	r2, [r4, r2]
1000b57c:	4213      	tst	r3, r2
1000b57e:	d0dd      	beq.n	1000b53c <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b580:	0020      	movs	r0, r4
1000b582:	6923      	ldr	r3, [r4, #16]
1000b584:	4798      	blx	r3
1000b586:	e7d9      	b.n	1000b53c <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b588:	311e      	adds	r1, #30
1000b58a:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b58c:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b58e:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b590:	7e0b      	ldrb	r3, [r1, #24]
1000b592:	4393      	bics	r3, r2
1000b594:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b596:	68e3      	ldr	r3, [r4, #12]
1000b598:	4798      	blx	r3
			}
		}
	}
}
1000b59a:	e7ec      	b.n	1000b576 <uart_rx0_isr_handler+0x62>
1000b59c:	10015aac 	.word	0x10015aac

1000b5a0 <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5a0:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000b5a2:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b5a4:	4b22      	ldr	r3, [pc, #136]	; (1000b630 <uart_tx0_isr_handler+0x90>)
1000b5a6:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b5a8:	6823      	ldr	r3, [r4, #0]
1000b5aa:	791d      	ldrb	r5, [r3, #4]
1000b5ac:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5ae:	4229      	tst	r1, r5
1000b5b0:	d00c      	beq.n	1000b5cc <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b5b2:	69a2      	ldr	r2, [r4, #24]
1000b5b4:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b5b6:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b5b8:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b5ba:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b5bc:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b5be:	8be3      	ldrh	r3, [r4, #30]
1000b5c0:	3b01      	subs	r3, #1
1000b5c2:	b29b      	uxth	r3, r3
1000b5c4:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b5c6:	8be3      	ldrh	r3, [r4, #30]
1000b5c8:	2b00      	cmp	r3, #0
1000b5ca:	d022      	beq.n	1000b612 <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b5cc:	2310      	movs	r3, #16
1000b5ce:	422b      	tst	r3, r5
1000b5d0:	d004      	beq.n	1000b5dc <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b5d2:	2221      	movs	r2, #33	; 0x21
1000b5d4:	5ca1      	ldrb	r1, [r4, r2]
1000b5d6:	3a20      	subs	r2, #32
1000b5d8:	420a      	tst	r2, r1
1000b5da:	d10b      	bne.n	1000b5f4 <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b5dc:	2320      	movs	r3, #32
1000b5de:	422b      	tst	r3, r5
1000b5e0:	d007      	beq.n	1000b5f2 <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b5e2:	2221      	movs	r2, #33	; 0x21
1000b5e4:	5ca1      	ldrb	r1, [r4, r2]
1000b5e6:	3a1f      	subs	r2, #31
1000b5e8:	420a      	tst	r2, r1
1000b5ea:	d002      	beq.n	1000b5f2 <uart_tx0_isr_handler+0x52>
1000b5ec:	5ce3      	ldrb	r3, [r4, r3]
1000b5ee:	421a      	tst	r2, r3
1000b5f0:	d119      	bne.n	1000b626 <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000b5f2:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b5f4:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b5f6:	5c61      	ldrb	r1, [r4, r1]
1000b5f8:	420a      	tst	r2, r1
1000b5fa:	d0ef      	beq.n	1000b5dc <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b5fc:	2100      	movs	r1, #0
1000b5fe:	3221      	adds	r2, #33	; 0x21
1000b600:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b602:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b604:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b606:	7a0a      	ldrb	r2, [r1, #8]
1000b608:	439a      	bics	r2, r3
1000b60a:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b60c:	6863      	ldr	r3, [r4, #4]
1000b60e:	4798      	blx	r3
1000b610:	e7e4      	b.n	1000b5dc <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b612:	6822      	ldr	r2, [r4, #0]
1000b614:	7a13      	ldrb	r3, [r2, #8]
1000b616:	438b      	bics	r3, r1
1000b618:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b61a:	2310      	movs	r3, #16
1000b61c:	6822      	ldr	r2, [r4, #0]
1000b61e:	7a11      	ldrb	r1, [r2, #8]
1000b620:	430b      	orrs	r3, r1
1000b622:	7213      	strb	r3, [r2, #8]
1000b624:	e7d2      	b.n	1000b5cc <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b626:	68a3      	ldr	r3, [r4, #8]
1000b628:	0020      	movs	r0, r4
1000b62a:	4798      	blx	r3
		}

	}
}
1000b62c:	e7e1      	b.n	1000b5f2 <uart_tx0_isr_handler+0x52>
1000b62e:	46c0      	nop			; (mov r8, r8)
1000b630:	10015aac 	.word	0x10015aac

1000b634 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b634:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b636:	4b21      	ldr	r3, [pc, #132]	; (1000b6bc <uart_rx1_isr_handler+0x88>)
1000b638:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b63a:	6823      	ldr	r3, [r4, #0]
1000b63c:	7d1d      	ldrb	r5, [r3, #20]
1000b63e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b640:	066a      	lsls	r2, r5, #25
1000b642:	d50d      	bpl.n	1000b660 <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b644:	211e      	movs	r1, #30
1000b646:	2222      	movs	r2, #34	; 0x22
1000b648:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b64a:	7e1a      	ldrb	r2, [r3, #24]
1000b64c:	3123      	adds	r1, #35	; 0x23
1000b64e:	438a      	bics	r2, r1
1000b650:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b652:	2321      	movs	r3, #33	; 0x21
1000b654:	5ce2      	ldrb	r2, [r4, r3]
1000b656:	3b19      	subs	r3, #25
1000b658:	4213      	tst	r3, r2
1000b65a:	d11d      	bne.n	1000b698 <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b65c:	6823      	ldr	r3, [r4, #0]
1000b65e:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b660:	2201      	movs	r2, #1
1000b662:	422a      	tst	r2, r5
1000b664:	d017      	beq.n	1000b696 <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b666:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b668:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b66a:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b66c:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b66e:	6963      	ldr	r3, [r4, #20]
1000b670:	3301      	adds	r3, #1
1000b672:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b674:	8ba3      	ldrh	r3, [r4, #28]
1000b676:	3b01      	subs	r3, #1
1000b678:	b29b      	uxth	r3, r3
1000b67a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b67c:	8ba3      	ldrh	r3, [r4, #28]
1000b67e:	b29b      	uxth	r3, r3
1000b680:	2b00      	cmp	r3, #0
1000b682:	d108      	bne.n	1000b696 <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b684:	2121      	movs	r1, #33	; 0x21
1000b686:	5c60      	ldrb	r0, [r4, r1]
1000b688:	391d      	subs	r1, #29
1000b68a:	4201      	tst	r1, r0
1000b68c:	d003      	beq.n	1000b696 <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b68e:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b690:	5c20      	ldrb	r0, [r4, r0]
1000b692:	4201      	tst	r1, r0
1000b694:	d108      	bne.n	1000b6a8 <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000b696:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b698:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b69a:	5ca2      	ldrb	r2, [r4, r2]
1000b69c:	4213      	tst	r3, r2
1000b69e:	d0dd      	beq.n	1000b65c <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b6a0:	0020      	movs	r0, r4
1000b6a2:	6923      	ldr	r3, [r4, #16]
1000b6a4:	4798      	blx	r3
1000b6a6:	e7d9      	b.n	1000b65c <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b6a8:	311e      	adds	r1, #30
1000b6aa:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b6ac:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b6ae:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b6b0:	7e0b      	ldrb	r3, [r1, #24]
1000b6b2:	4393      	bics	r3, r2
1000b6b4:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b6b6:	68e3      	ldr	r3, [r4, #12]
1000b6b8:	4798      	blx	r3
			}
		}
	}
}
1000b6ba:	e7ec      	b.n	1000b696 <uart_rx1_isr_handler+0x62>
1000b6bc:	10015aac 	.word	0x10015aac

1000b6c0 <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b6c0:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000b6c2:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b6c4:	4b22      	ldr	r3, [pc, #136]	; (1000b750 <uart_tx1_isr_handler+0x90>)
1000b6c6:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b6c8:	6823      	ldr	r3, [r4, #0]
1000b6ca:	791d      	ldrb	r5, [r3, #4]
1000b6cc:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b6ce:	4229      	tst	r1, r5
1000b6d0:	d00c      	beq.n	1000b6ec <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b6d2:	69a2      	ldr	r2, [r4, #24]
1000b6d4:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b6d6:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b6d8:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b6da:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b6dc:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b6de:	8be3      	ldrh	r3, [r4, #30]
1000b6e0:	3b01      	subs	r3, #1
1000b6e2:	b29b      	uxth	r3, r3
1000b6e4:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b6e6:	8be3      	ldrh	r3, [r4, #30]
1000b6e8:	2b00      	cmp	r3, #0
1000b6ea:	d022      	beq.n	1000b732 <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b6ec:	2310      	movs	r3, #16
1000b6ee:	422b      	tst	r3, r5
1000b6f0:	d004      	beq.n	1000b6fc <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b6f2:	2221      	movs	r2, #33	; 0x21
1000b6f4:	5ca1      	ldrb	r1, [r4, r2]
1000b6f6:	3a20      	subs	r2, #32
1000b6f8:	420a      	tst	r2, r1
1000b6fa:	d10b      	bne.n	1000b714 <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b6fc:	2320      	movs	r3, #32
1000b6fe:	422b      	tst	r3, r5
1000b700:	d007      	beq.n	1000b712 <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b702:	2221      	movs	r2, #33	; 0x21
1000b704:	5ca1      	ldrb	r1, [r4, r2]
1000b706:	3a1f      	subs	r2, #31
1000b708:	420a      	tst	r2, r1
1000b70a:	d002      	beq.n	1000b712 <uart_tx1_isr_handler+0x52>
1000b70c:	5ce3      	ldrb	r3, [r4, r3]
1000b70e:	421a      	tst	r2, r3
1000b710:	d119      	bne.n	1000b746 <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000b712:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b714:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b716:	5c61      	ldrb	r1, [r4, r1]
1000b718:	420a      	tst	r2, r1
1000b71a:	d0ef      	beq.n	1000b6fc <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b71c:	2100      	movs	r1, #0
1000b71e:	3221      	adds	r2, #33	; 0x21
1000b720:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b722:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b724:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b726:	7a0a      	ldrb	r2, [r1, #8]
1000b728:	439a      	bics	r2, r3
1000b72a:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b72c:	6863      	ldr	r3, [r4, #4]
1000b72e:	4798      	blx	r3
1000b730:	e7e4      	b.n	1000b6fc <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b732:	6822      	ldr	r2, [r4, #0]
1000b734:	7a13      	ldrb	r3, [r2, #8]
1000b736:	438b      	bics	r3, r1
1000b738:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b73a:	2310      	movs	r3, #16
1000b73c:	6822      	ldr	r2, [r4, #0]
1000b73e:	7a11      	ldrb	r1, [r2, #8]
1000b740:	430b      	orrs	r3, r1
1000b742:	7213      	strb	r3, [r2, #8]
1000b744:	e7d2      	b.n	1000b6ec <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b746:	68a3      	ldr	r3, [r4, #8]
1000b748:	0020      	movs	r0, r4
1000b74a:	4798      	blx	r3
		}

	}
}
1000b74c:	e7e1      	b.n	1000b712 <uart_tx1_isr_handler+0x52>
1000b74e:	46c0      	nop			; (mov r8, r8)
1000b750:	10015aac 	.word	0x10015aac

1000b754 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b754:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b756:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b758:	025b      	lsls	r3, r3, #9
1000b75a:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b75c:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b75e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b760:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000b762:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b764:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b766:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b768:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b76a:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b76c:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b76e:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b770:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b772:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b774:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b776:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b778:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b77a:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b77c:	4770      	bx	lr
1000b77e:	46c0      	nop			; (mov r8, r8)

1000b780 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b780:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b782:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b784:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b786:	b480      	push	{r7}
1000b788:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000b78a:	2200      	movs	r2, #0
1000b78c:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b78e:	6043      	str	r3, [r0, #4]
1000b790:	6083      	str	r3, [r0, #8]
1000b792:	60c3      	str	r3, [r0, #12]
1000b794:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b796:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b798:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000b79a:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b79c:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b79e:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000b7a0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b7a2:	3301      	adds	r3, #1
1000b7a4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b7a6:	3301      	adds	r3, #1
1000b7a8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b7aa:	4b52      	ldr	r3, [pc, #328]	; (1000b8f4 <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b7ac:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000b7ae:	4299      	cmp	r1, r3
1000b7b0:	d100      	bne.n	1000b7b4 <uart_init+0x34>
1000b7b2:	e06c      	b.n	1000b88e <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b7b4:	4b50      	ldr	r3, [pc, #320]	; (1000b8f8 <uart_init+0x178>)
1000b7b6:	4299      	cmp	r1, r3
1000b7b8:	d100      	bne.n	1000b7bc <uart_init+0x3c>
1000b7ba:	e081      	b.n	1000b8c0 <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b7bc:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000b7be:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b7c0:	2a00      	cmp	r2, #0
1000b7c2:	d000      	beq.n	1000b7c6 <uart_init+0x46>
		index = 4;
1000b7c4:	3302      	adds	r3, #2
1000b7c6:	3b01      	subs	r3, #1
1000b7c8:	b2de      	uxtb	r6, r3
1000b7ca:	4b4c      	ldr	r3, [pc, #304]	; (1000b8fc <uart_init+0x17c>)
1000b7cc:	003c      	movs	r4, r7
1000b7ce:	4698      	mov	r8, r3
1000b7d0:	3603      	adds	r6, #3
1000b7d2:	00b6      	lsls	r6, r6, #2
1000b7d4:	3408      	adds	r4, #8
1000b7d6:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b7d8:	8a21      	ldrh	r1, [r4, #16]
1000b7da:	cc01      	ldmia	r4!, {r0}
1000b7dc:	b2c0      	uxtb	r0, r0
1000b7de:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b7e0:	42a6      	cmp	r6, r4
1000b7e2:	d1f9      	bne.n	1000b7d8 <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b7e4:	682b      	ldr	r3, [r5, #0]
1000b7e6:	7d1a      	ldrb	r2, [r3, #20]
1000b7e8:	07d2      	lsls	r2, r2, #31
1000b7ea:	d504      	bpl.n	1000b7f6 <uart_init+0x76>
1000b7ec:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b7ee:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b7f0:	7d1a      	ldrb	r2, [r3, #20]
1000b7f2:	4211      	tst	r1, r2
1000b7f4:	d1fb      	bne.n	1000b7ee <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b7f6:	2100      	movs	r1, #0
1000b7f8:	2220      	movs	r2, #32
1000b7fa:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b7fc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b7fe:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000b800:	1e59      	subs	r1, r3, #1
1000b802:	418b      	sbcs	r3, r1
1000b804:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b806:	793b      	ldrb	r3, [r7, #4]
1000b808:	4313      	orrs	r3, r2
	switch(config->parity) {
1000b80a:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b80c:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b80e:	2a02      	cmp	r2, #2
1000b810:	d03a      	beq.n	1000b888 <uart_init+0x108>
1000b812:	d934      	bls.n	1000b87e <uart_init+0xfe>
1000b814:	2a03      	cmp	r2, #3
1000b816:	d02f      	beq.n	1000b878 <uart_init+0xf8>
1000b818:	2a04      	cmp	r2, #4
1000b81a:	d101      	bne.n	1000b820 <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b81c:	220e      	movs	r2, #14
1000b81e:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b820:	2220      	movs	r2, #32
1000b822:	6829      	ldr	r1, [r5, #0]
1000b824:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b826:	4b36      	ldr	r3, [pc, #216]	; (1000b900 <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b828:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b82a:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000b82c:	0031      	movs	r1, r6
1000b82e:	4b35      	ldr	r3, [pc, #212]	; (1000b904 <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b830:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b832:	4798      	blx	r3
1000b834:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b836:	0400      	lsls	r0, r0, #16
1000b838:	0c00      	lsrs	r0, r0, #16
1000b83a:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b83c:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000b83e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b840:	2300      	movs	r3, #0
1000b842:	4281      	cmp	r1, r0
1000b844:	d207      	bcs.n	1000b856 <uart_init+0xd6>
		i++;
1000b846:	3301      	adds	r3, #1
1000b848:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b84a:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b84c:	4281      	cmp	r1, r0
1000b84e:	d3fa      	bcc.n	1000b846 <uart_init+0xc6>
1000b850:	3301      	adds	r3, #1
1000b852:	071b      	lsls	r3, r3, #28
1000b854:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b856:	2100      	movs	r1, #0
1000b858:	2028      	movs	r0, #40	; 0x28
1000b85a:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000b85c:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b85e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b860:	4313      	orrs	r3, r2
1000b862:	682a      	ldr	r2, [r5, #0]
1000b864:	b29b      	uxth	r3, r3
1000b866:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b868:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000b86a:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b86c:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b86e:	682b      	ldr	r3, [r5, #0]
1000b870:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b872:	bc04      	pop	{r2}
1000b874:	4690      	mov	r8, r2
1000b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b878:	220a      	movs	r2, #10
1000b87a:	4313      	orrs	r3, r2
			break;
1000b87c:	e7d0      	b.n	1000b820 <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000b87e:	2a01      	cmp	r2, #1
1000b880:	d1ce      	bne.n	1000b820 <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b882:	2202      	movs	r2, #2
1000b884:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b886:	e7cb      	b.n	1000b820 <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b888:	2206      	movs	r2, #6
1000b88a:	4313      	orrs	r3, r2
			break;
1000b88c:	e7c8      	b.n	1000b820 <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b88e:	4c1e      	ldr	r4, [pc, #120]	; (1000b908 <uart_init+0x188>)
1000b890:	2009      	movs	r0, #9
1000b892:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b894:	200a      	movs	r0, #10
1000b896:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b898:	4c1c      	ldr	r4, [pc, #112]	; (1000b90c <uart_init+0x18c>)
1000b89a:	2009      	movs	r0, #9
1000b89c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b89e:	200a      	movs	r0, #10
1000b8a0:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b8a2:	4b1b      	ldr	r3, [pc, #108]	; (1000b910 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b8a4:	491b      	ldr	r1, [pc, #108]	; (1000b914 <uart_init+0x194>)
1000b8a6:	2010      	movs	r0, #16
1000b8a8:	4c1b      	ldr	r4, [pc, #108]	; (1000b918 <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000b8aa:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b8ac:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b8ae:	491b      	ldr	r1, [pc, #108]	; (1000b91c <uart_init+0x19c>)
1000b8b0:	2011      	movs	r0, #17
1000b8b2:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b8b4:	2201      	movs	r2, #1
1000b8b6:	4b1a      	ldr	r3, [pc, #104]	; (1000b920 <uart_init+0x1a0>)
1000b8b8:	601a      	str	r2, [r3, #0]
1000b8ba:	3201      	adds	r2, #1
1000b8bc:	601a      	str	r2, [r3, #0]
1000b8be:	e77d      	b.n	1000b7bc <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b8c0:	4c11      	ldr	r4, [pc, #68]	; (1000b908 <uart_init+0x188>)
1000b8c2:	200b      	movs	r0, #11
1000b8c4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b8c6:	200c      	movs	r0, #12
1000b8c8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b8ca:	4c10      	ldr	r4, [pc, #64]	; (1000b90c <uart_init+0x18c>)
1000b8cc:	200b      	movs	r0, #11
1000b8ce:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b8d0:	200c      	movs	r0, #12
1000b8d2:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b8d4:	4b0e      	ldr	r3, [pc, #56]	; (1000b910 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b8d6:	4913      	ldr	r1, [pc, #76]	; (1000b924 <uart_init+0x1a4>)
1000b8d8:	2012      	movs	r0, #18
1000b8da:	4c0f      	ldr	r4, [pc, #60]	; (1000b918 <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000b8dc:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b8de:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b8e0:	4911      	ldr	r1, [pc, #68]	; (1000b928 <uart_init+0x1a8>)
1000b8e2:	2013      	movs	r0, #19
1000b8e4:	47a0      	blx	r4
1000b8e6:	2204      	movs	r2, #4
1000b8e8:	4b0d      	ldr	r3, [pc, #52]	; (1000b920 <uart_init+0x1a0>)
1000b8ea:	601a      	str	r2, [r3, #0]
1000b8ec:	3204      	adds	r2, #4
1000b8ee:	601a      	str	r2, [r3, #0]
1000b8f0:	e764      	b.n	1000b7bc <uart_init+0x3c>
1000b8f2:	46c0      	nop			; (mov r8, r8)
1000b8f4:	40004000 	.word	0x40004000
1000b8f8:	40005000 	.word	0x40005000
1000b8fc:	1000bcc9 	.word	0x1000bcc9
1000b900:	1000c175 	.word	0x1000c175
1000b904:	1000f4cd 	.word	0x1000f4cd
1000b908:	1000c489 	.word	0x1000c489
1000b90c:	1000c181 	.word	0x1000c181
1000b910:	10015aac 	.word	0x10015aac
1000b914:	1000b515 	.word	0x1000b515
1000b918:	1000c8a1 	.word	0x1000c8a1
1000b91c:	1000b5a1 	.word	0x1000b5a1
1000b920:	e000e100 	.word	0xe000e100
1000b924:	1000b635 	.word	0x1000b635
1000b928:	1000b6c1 	.word	0x1000b6c1

1000b92c <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000b92c:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b92e:	2001      	movs	r0, #1
1000b930:	7913      	ldrb	r3, [r2, #4]
1000b932:	4218      	tst	r0, r3
1000b934:	d0fc      	beq.n	1000b930 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000b936:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b938:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b93a:	4770      	bx	lr

1000b93c <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000b93c:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b93e:	2001      	movs	r0, #1
1000b940:	7d13      	ldrb	r3, [r2, #20]
1000b942:	4218      	tst	r0, r3
1000b944:	d0fc      	beq.n	1000b940 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b946:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000b948:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b94a:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b94c:	4770      	bx	lr
1000b94e:	46c0      	nop			; (mov r8, r8)

1000b950 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000b950:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b952:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b954:	2a00      	cmp	r2, #0
1000b956:	d101      	bne.n	1000b95c <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000b958:	0018      	movs	r0, r3
1000b95a:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b95c:	2422      	movs	r4, #34	; 0x22
1000b95e:	5d03      	ldrb	r3, [r0, r4]
1000b960:	b2db      	uxtb	r3, r3
1000b962:	2b05      	cmp	r3, #5
1000b964:	d0f8      	beq.n	1000b958 <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000b966:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b968:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b96a:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000b96c:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b96e:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b970:	6803      	ldr	r3, [r0, #0]
1000b972:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b974:	2300      	movs	r3, #0
1000b976:	e7ef      	b.n	1000b958 <uart_read_buffer_job+0x8>

1000b978 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b978:	0093      	lsls	r3, r2, #2
1000b97a:	18c3      	adds	r3, r0, r3
1000b97c:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b97e:	2301      	movs	r3, #1
1000b980:	2120      	movs	r1, #32
1000b982:	4093      	lsls	r3, r2
1000b984:	5c42      	ldrb	r2, [r0, r1]
1000b986:	4313      	orrs	r3, r2
1000b988:	5443      	strb	r3, [r0, r1]
}
1000b98a:	4770      	bx	lr

1000b98c <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b98c:	2301      	movs	r3, #1
1000b98e:	2221      	movs	r2, #33	; 0x21
1000b990:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b992:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b994:	5c84      	ldrb	r4, [r0, r2]
1000b996:	4323      	orrs	r3, r4
1000b998:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b99a:	2901      	cmp	r1, #1
1000b99c:	d104      	bne.n	1000b9a8 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b99e:	2320      	movs	r3, #32
1000b9a0:	6802      	ldr	r2, [r0, #0]
1000b9a2:	7a11      	ldrb	r1, [r2, #8]
1000b9a4:	430b      	orrs	r3, r1
1000b9a6:	7213      	strb	r3, [r2, #8]
	}
}
1000b9a8:	bd10      	pop	{r4, pc}
1000b9aa:	46c0      	nop			; (mov r8, r8)

1000b9ac <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b9ac:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b9ae:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b9b0:	2421      	movs	r4, #33	; 0x21
1000b9b2:	408a      	lsls	r2, r1
1000b9b4:	5d03      	ldrb	r3, [r0, r4]
1000b9b6:	4393      	bics	r3, r2
1000b9b8:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b9ba:	2901      	cmp	r1, #1
1000b9bc:	d104      	bne.n	1000b9c8 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b9be:	6802      	ldr	r2, [r0, #0]
1000b9c0:	311f      	adds	r1, #31
1000b9c2:	7a13      	ldrb	r3, [r2, #8]
1000b9c4:	438b      	bics	r3, r1
1000b9c6:	7213      	strb	r3, [r2, #8]
	}

}
1000b9c8:	bd10      	pop	{r4, pc}
1000b9ca:	46c0      	nop			; (mov r8, r8)

1000b9cc <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b9cc:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b9ce:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b9d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b9d2:	4d12      	ldr	r5, [pc, #72]	; (1000ba1c <gpio_port0_isr_handler+0x50>)
1000b9d4:	682e      	ldr	r6, [r5, #0]
1000b9d6:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000b9d8:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b9da:	0002      	movs	r2, r0
1000b9dc:	409a      	lsls	r2, r3
1000b9de:	2401      	movs	r4, #1
1000b9e0:	4211      	tst	r1, r2
1000b9e2:	d109      	bne.n	1000b9f8 <gpio_port0_isr_handler+0x2c>
1000b9e4:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b9e6:	2b10      	cmp	r3, #16
1000b9e8:	d1f7      	bne.n	1000b9da <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b9ea:	2180      	movs	r1, #128	; 0x80
1000b9ec:	23c0      	movs	r3, #192	; 0xc0
1000b9ee:	4a0c      	ldr	r2, [pc, #48]	; (1000ba20 <gpio_port0_isr_handler+0x54>)
1000b9f0:	0409      	lsls	r1, r1, #16
1000b9f2:	005b      	lsls	r3, r3, #1
1000b9f4:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b9f6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b9f8:	b292      	uxth	r2, r2
1000b9fa:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b9fc:	2246      	movs	r2, #70	; 0x46
1000b9fe:	5aaa      	ldrh	r2, [r5, r2]
1000ba00:	411a      	asrs	r2, r3
1000ba02:	4214      	tst	r4, r2
1000ba04:	d0f1      	beq.n	1000b9ea <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000ba06:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000ba08:	5aaa      	ldrh	r2, [r5, r2]
1000ba0a:	411a      	asrs	r2, r3
1000ba0c:	4214      	tst	r4, r2
1000ba0e:	d0ec      	beq.n	1000b9ea <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000ba10:	009b      	lsls	r3, r3, #2
1000ba12:	18eb      	adds	r3, r5, r3
1000ba14:	685b      	ldr	r3, [r3, #4]
1000ba16:	4798      	blx	r3
1000ba18:	e7e7      	b.n	1000b9ea <gpio_port0_isr_handler+0x1e>
1000ba1a:	46c0      	nop			; (mov r8, r8)
1000ba1c:	10015ab4 	.word	0x10015ab4
1000ba20:	e000e100 	.word	0xe000e100

1000ba24 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba26:	4657      	mov	r7, sl
1000ba28:	464e      	mov	r6, r9
1000ba2a:	4645      	mov	r5, r8
1000ba2c:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000ba2e:	4e1b      	ldr	r6, [pc, #108]	; (1000ba9c <gpio_port1_isr_handler+0x78>)
1000ba30:	2400      	movs	r4, #0
1000ba32:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000ba34:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000ba36:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000ba38:	b2bf      	uxth	r7, r7
1000ba3a:	0b7b      	lsrs	r3, r7, #13
1000ba3c:	035b      	lsls	r3, r3, #13
1000ba3e:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000ba40:	4b17      	ldr	r3, [pc, #92]	; (1000baa0 <gpio_port1_isr_handler+0x7c>)
1000ba42:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ba44:	238e      	movs	r3, #142	; 0x8e
1000ba46:	4699      	mov	r9, r3
1000ba48:	e013      	b.n	1000ba72 <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000ba4a:	002b      	movs	r3, r5
1000ba4c:	40a3      	lsls	r3, r4
1000ba4e:	421f      	tst	r7, r3
1000ba50:	d00c      	beq.n	1000ba6c <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000ba52:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000ba54:	b29b      	uxth	r3, r3
1000ba56:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ba58:	464b      	mov	r3, r9
1000ba5a:	5af3      	ldrh	r3, [r6, r3]
1000ba5c:	4123      	asrs	r3, r4
1000ba5e:	421d      	tst	r5, r3
1000ba60:	d004      	beq.n	1000ba6c <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000ba62:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ba64:	5af3      	ldrh	r3, [r6, r3]
1000ba66:	4123      	asrs	r3, r4
1000ba68:	421d      	tst	r5, r3
1000ba6a:	d107      	bne.n	1000ba7c <gpio_port1_isr_handler+0x58>
1000ba6c:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000ba6e:	2c10      	cmp	r4, #16
1000ba70:	d009      	beq.n	1000ba86 <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000ba72:	4643      	mov	r3, r8
1000ba74:	2b00      	cmp	r3, #0
1000ba76:	d0e8      	beq.n	1000ba4a <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000ba78:	47d0      	blx	sl
1000ba7a:	e7e6      	b.n	1000ba4a <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000ba7c:	3412      	adds	r4, #18
1000ba7e:	00a4      	lsls	r4, r4, #2
1000ba80:	1934      	adds	r4, r6, r4
1000ba82:	6863      	ldr	r3, [r4, #4]
1000ba84:	4798      	blx	r3
1000ba86:	2180      	movs	r1, #128	; 0x80
1000ba88:	23c0      	movs	r3, #192	; 0xc0
1000ba8a:	4a06      	ldr	r2, [pc, #24]	; (1000baa4 <gpio_port1_isr_handler+0x80>)
1000ba8c:	0449      	lsls	r1, r1, #17
1000ba8e:	005b      	lsls	r3, r3, #1
1000ba90:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000ba92:	bc1c      	pop	{r2, r3, r4}
1000ba94:	4690      	mov	r8, r2
1000ba96:	4699      	mov	r9, r3
1000ba98:	46a2      	mov	sl, r4
1000ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba9c:	10015ab4 	.word	0x10015ab4
1000baa0:	0001bc51 	.word	0x0001bc51
1000baa4:	e000e100 	.word	0xe000e100

1000baa8 <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000baa8:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000baaa:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000baac:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000baae:	491a      	ldr	r1, [pc, #104]	; (1000bb18 <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bab0:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bab2:	58c8      	ldr	r0, [r1, r3]
1000bab4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bab6:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bab8:	4213      	tst	r3, r2
1000baba:	d110      	bne.n	1000bade <gpio_port2_isr_handler+0x36>
1000babc:	2280      	movs	r2, #128	; 0x80
1000babe:	0192      	lsls	r2, r2, #6
1000bac0:	4213      	tst	r3, r2
1000bac2:	d120      	bne.n	1000bb06 <gpio_port2_isr_handler+0x5e>
1000bac4:	2280      	movs	r2, #128	; 0x80
1000bac6:	01d2      	lsls	r2, r2, #7
1000bac8:	4213      	tst	r3, r2
1000baca:	d11e      	bne.n	1000bb0a <gpio_port2_isr_handler+0x62>
1000bacc:	0bdb      	lsrs	r3, r3, #15
1000bace:	d11e      	bne.n	1000bb0e <gpio_port2_isr_handler+0x66>
1000bad0:	2180      	movs	r1, #128	; 0x80
1000bad2:	23c0      	movs	r3, #192	; 0xc0
1000bad4:	4a11      	ldr	r2, [pc, #68]	; (1000bb1c <gpio_port2_isr_handler+0x74>)
1000bad6:	0489      	lsls	r1, r1, #18
1000bad8:	005b      	lsls	r3, r3, #1
1000bada:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000badc:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bade:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bae0:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bae2:	b292      	uxth	r2, r2
1000bae4:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bae6:	5acb      	ldrh	r3, [r1, r3]
1000bae8:	2201      	movs	r2, #1
1000baea:	4123      	asrs	r3, r4
1000baec:	421a      	tst	r2, r3
1000baee:	d0ef      	beq.n	1000bad0 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000baf0:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000baf2:	5acb      	ldrh	r3, [r1, r3]
1000baf4:	4123      	asrs	r3, r4
1000baf6:	421a      	tst	r2, r3
1000baf8:	d0ea      	beq.n	1000bad0 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bafa:	3424      	adds	r4, #36	; 0x24
1000bafc:	00a4      	lsls	r4, r4, #2
1000bafe:	1909      	adds	r1, r1, r4
1000bb00:	684b      	ldr	r3, [r1, #4]
1000bb02:	4798      	blx	r3
1000bb04:	e7e4      	b.n	1000bad0 <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bb06:	240d      	movs	r4, #13
1000bb08:	e7ea      	b.n	1000bae0 <gpio_port2_isr_handler+0x38>
1000bb0a:	240e      	movs	r4, #14
1000bb0c:	e7e8      	b.n	1000bae0 <gpio_port2_isr_handler+0x38>
1000bb0e:	2280      	movs	r2, #128	; 0x80
1000bb10:	240f      	movs	r4, #15
1000bb12:	0212      	lsls	r2, r2, #8
1000bb14:	e7e4      	b.n	1000bae0 <gpio_port2_isr_handler+0x38>
1000bb16:	46c0      	nop			; (mov r8, r8)
1000bb18:	10015ab4 	.word	0x10015ab4
1000bb1c:	e000e100 	.word	0xe000e100

1000bb20 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bb20:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000bb22:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bb24:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bb26:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bb28:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bb2a:	70c3      	strb	r3, [r0, #3]
}
1000bb2c:	4770      	bx	lr
1000bb2e:	46c0      	nop			; (mov r8, r8)

1000bb30 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000bb30:	0003      	movs	r3, r0
1000bb32:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000bb34:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000bb36:	2b01      	cmp	r3, #1
1000bb38:	d92b      	bls.n	1000bb92 <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000bb3a:	2b07      	cmp	r3, #7
1000bb3c:	d82a      	bhi.n	1000bb94 <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bb3e:	009d      	lsls	r5, r3, #2
1000bb40:	3810      	subs	r0, #16
1000bb42:	40a8      	lsls	r0, r5
1000bb44:	4c5a      	ldr	r4, [pc, #360]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bb46:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000bb48:	4382      	bics	r2, r0
1000bb4a:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bb4c:	001a      	movs	r2, r3
1000bb4e:	3a1d      	subs	r2, #29
1000bb50:	2a02      	cmp	r2, #2
1000bb52:	d834      	bhi.n	1000bbbe <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bb54:	241f      	movs	r4, #31
1000bb56:	4d57      	ldr	r5, [pc, #348]	; (1000bcb4 <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bb58:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bb5a:	7d28      	ldrb	r0, [r5, #20]
1000bb5c:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bb5e:	2a01      	cmp	r2, #1
1000bb60:	d063      	beq.n	1000bc2a <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bb62:	2201      	movs	r2, #1
1000bb64:	40a2      	lsls	r2, r4
1000bb66:	4302      	orrs	r2, r0
1000bb68:	b2d2      	uxtb	r2, r2
1000bb6a:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000bb6c:	78ca      	ldrb	r2, [r1, #3]
1000bb6e:	2a00      	cmp	r2, #0
1000bb70:	d023      	beq.n	1000bbba <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bb72:	201f      	movs	r0, #31
1000bb74:	1ac0      	subs	r0, r0, r3
1000bb76:	2301      	movs	r3, #1
1000bb78:	0080      	lsls	r0, r0, #2
1000bb7a:	4083      	lsls	r3, r0
1000bb7c:	494d      	ldr	r1, [pc, #308]	; (1000bcb4 <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb7e:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bb80:	880a      	ldrh	r2, [r1, #0]
1000bb82:	4313      	orrs	r3, r2
1000bb84:	b29b      	uxth	r3, r3
1000bb86:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bb88:	2302      	movs	r3, #2
1000bb8a:	4a4b      	ldr	r2, [pc, #300]	; (1000bcb8 <gpio_pin_set_config+0x188>)
1000bb8c:	7811      	ldrb	r1, [r2, #0]
1000bb8e:	430b      	orrs	r3, r1
1000bb90:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000bb92:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000bb94:	2b0f      	cmp	r3, #15
1000bb96:	d93e      	bls.n	1000bc16 <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000bb98:	2b17      	cmp	r3, #23
1000bb9a:	d84a      	bhi.n	1000bc32 <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bb9c:	2207      	movs	r2, #7
1000bb9e:	0014      	movs	r4, r2
1000bba0:	401c      	ands	r4, r3
1000bba2:	00a4      	lsls	r4, r4, #2
1000bba4:	40a2      	lsls	r2, r4
1000bba6:	4d42      	ldr	r5, [pc, #264]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bba8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000bbaa:	4390      	bics	r0, r2
1000bbac:	64e8      	str	r0, [r5, #76]	; 0x4c
1000bbae:	e7cd      	b.n	1000bb4c <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bbb0:	4003      	ands	r3, r0
1000bbb2:	409a      	lsls	r2, r3
1000bbb4:	4b41      	ldr	r3, [pc, #260]	; (1000bcbc <gpio_pin_set_config+0x18c>)
1000bbb6:	b292      	uxth	r2, r2
1000bbb8:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bbba:	2000      	movs	r0, #0
1000bbbc:	e7e9      	b.n	1000bb92 <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bbbe:	780a      	ldrb	r2, [r1, #0]
1000bbc0:	2a00      	cmp	r2, #0
1000bbc2:	d11a      	bne.n	1000bbfa <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000bbc4:	2b0f      	cmp	r3, #15
1000bbc6:	d849      	bhi.n	1000bc5c <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bbc8:	3201      	adds	r2, #1
1000bbca:	409a      	lsls	r2, r3
1000bbcc:	483c      	ldr	r0, [pc, #240]	; (1000bcc0 <gpio_pin_set_config+0x190>)
1000bbce:	b292      	uxth	r2, r2
1000bbd0:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bbd2:	784a      	ldrb	r2, [r1, #1]
1000bbd4:	2a01      	cmp	r2, #1
1000bbd6:	d063      	beq.n	1000bca0 <gpio_pin_set_config+0x170>
1000bbd8:	2a00      	cmp	r2, #0
1000bbda:	d050      	beq.n	1000bc7e <gpio_pin_set_config+0x14e>
1000bbdc:	2a02      	cmp	r2, #2
1000bbde:	d15d      	bne.n	1000bc9c <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bbe0:	2101      	movs	r1, #1
1000bbe2:	4099      	lsls	r1, r3
1000bbe4:	4a32      	ldr	r2, [pc, #200]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bbe6:	000b      	movs	r3, r1
1000bbe8:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000bbea:	0001      	movs	r1, r0
1000bbec:	4319      	orrs	r1, r3
1000bbee:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bbf0:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bbf2:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bbf4:	4399      	bics	r1, r3
1000bbf6:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000bbf8:	e7cb      	b.n	1000bb92 <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bbfa:	2a01      	cmp	r2, #1
1000bbfc:	d1dd      	bne.n	1000bbba <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000bbfe:	2b0f      	cmp	r3, #15
1000bc00:	d946      	bls.n	1000bc90 <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bc02:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bc04:	2b1f      	cmp	r3, #31
1000bc06:	d9d3      	bls.n	1000bbb0 <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bc08:	4003      	ands	r3, r0
1000bc0a:	409a      	lsls	r2, r3
1000bc0c:	4b2d      	ldr	r3, [pc, #180]	; (1000bcc4 <gpio_pin_set_config+0x194>)
1000bc0e:	b292      	uxth	r2, r2
1000bc10:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc12:	2000      	movs	r0, #0
1000bc14:	e7bd      	b.n	1000bb92 <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc16:	2207      	movs	r2, #7
1000bc18:	0014      	movs	r4, r2
1000bc1a:	401c      	ands	r4, r3
1000bc1c:	00a4      	lsls	r4, r4, #2
1000bc1e:	40a2      	lsls	r2, r4
1000bc20:	4d23      	ldr	r5, [pc, #140]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bc22:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000bc24:	4390      	bics	r0, r2
1000bc26:	64a8      	str	r0, [r5, #72]	; 0x48
1000bc28:	e790      	b.n	1000bb4c <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bc2a:	40a2      	lsls	r2, r4
1000bc2c:	4390      	bics	r0, r2
1000bc2e:	7528      	strb	r0, [r5, #20]
1000bc30:	e79c      	b.n	1000bb6c <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bc32:	001a      	movs	r2, r3
1000bc34:	3a2c      	subs	r2, #44	; 0x2c
1000bc36:	b2d0      	uxtb	r0, r2
1000bc38:	2803      	cmp	r0, #3
1000bc3a:	d900      	bls.n	1000bc3e <gpio_pin_set_config+0x10e>
1000bc3c:	e786      	b.n	1000bb4c <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bc3e:	2601      	movs	r6, #1
1000bc40:	2482      	movs	r4, #130	; 0x82
1000bc42:	4096      	lsls	r6, r2
1000bc44:	4d1b      	ldr	r5, [pc, #108]	; (1000bcb4 <gpio_pin_set_config+0x184>)
1000bc46:	00e4      	lsls	r4, r4, #3
1000bc48:	5d28      	ldrb	r0, [r5, r4]
1000bc4a:	5d2a      	ldrb	r2, [r5, r4]
1000bc4c:	0700      	lsls	r0, r0, #28
1000bc4e:	0f00      	lsrs	r0, r0, #28
1000bc50:	43b0      	bics	r0, r6
1000bc52:	260f      	movs	r6, #15
1000bc54:	43b2      	bics	r2, r6
1000bc56:	4302      	orrs	r2, r0
1000bc58:	552a      	strb	r2, [r5, r4]
1000bc5a:	e777      	b.n	1000bb4c <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bc5c:	200f      	movs	r0, #15
1000bc5e:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bc60:	2b1f      	cmp	r3, #31
1000bc62:	d805      	bhi.n	1000bc70 <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bc64:	2201      	movs	r2, #1
1000bc66:	4082      	lsls	r2, r0
1000bc68:	4814      	ldr	r0, [pc, #80]	; (1000bcbc <gpio_pin_set_config+0x18c>)
1000bc6a:	b292      	uxth	r2, r2
1000bc6c:	8282      	strh	r2, [r0, #20]
1000bc6e:	e7b0      	b.n	1000bbd2 <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bc70:	2301      	movs	r3, #1
1000bc72:	4083      	lsls	r3, r0
1000bc74:	4a13      	ldr	r2, [pc, #76]	; (1000bcc4 <gpio_pin_set_config+0x194>)
1000bc76:	b29b      	uxth	r3, r3
1000bc78:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc7a:	2000      	movs	r0, #0
1000bc7c:	e789      	b.n	1000bb92 <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bc7e:	2101      	movs	r1, #1
1000bc80:	4099      	lsls	r1, r3
1000bc82:	000b      	movs	r3, r1
1000bc84:	480a      	ldr	r0, [pc, #40]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bc86:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000bc88:	4313      	orrs	r3, r2
1000bc8a:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc8c:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bc8e:	e780      	b.n	1000bb92 <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bc90:	409a      	lsls	r2, r3
1000bc92:	4b0b      	ldr	r3, [pc, #44]	; (1000bcc0 <gpio_pin_set_config+0x190>)
1000bc94:	b292      	uxth	r2, r2
1000bc96:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bc98:	2000      	movs	r0, #0
1000bc9a:	e77a      	b.n	1000bb92 <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bc9c:	2017      	movs	r0, #23
1000bc9e:	e778      	b.n	1000bb92 <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bca0:	4803      	ldr	r0, [pc, #12]	; (1000bcb0 <gpio_pin_set_config+0x180>)
1000bca2:	409a      	lsls	r2, r3
1000bca4:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000bca6:	000b      	movs	r3, r1
1000bca8:	4393      	bics	r3, r2
1000bcaa:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bcac:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bcae:	e770      	b.n	1000bb92 <gpio_pin_set_config+0x62>
1000bcb0:	4000b000 	.word	0x4000b000
1000bcb4:	4000f000 	.word	0x4000f000
1000bcb8:	4000e000 	.word	0x4000e000
1000bcbc:	40011000 	.word	0x40011000
1000bcc0:	40010000 	.word	0x40010000
1000bcc4:	40013000 	.word	0x40013000

1000bcc8 <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000bcc8:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bcca:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bccc:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bcce:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bcd0:	2807      	cmp	r0, #7
1000bcd2:	d80e      	bhi.n	1000bcf2 <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bcd4:	2407      	movs	r4, #7
1000bcd6:	0086      	lsls	r6, r0, #2
1000bcd8:	40b4      	lsls	r4, r6
1000bcda:	4b31      	ldr	r3, [pc, #196]	; (1000bda0 <gpio_pinmux_cofiguration+0xd8>)
1000bcdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000bcde:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bce0:	000c      	movs	r4, r1
1000bce2:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bce4:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000bce8:	4322      	orrs	r2, r4
1000bcea:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bcec:	2901      	cmp	r1, #1
1000bcee:	d036      	beq.n	1000bd5e <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000bcf0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000bcf2:	280f      	cmp	r0, #15
1000bcf4:	d816      	bhi.n	1000bd24 <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bcf6:	2407      	movs	r4, #7
1000bcf8:	0022      	movs	r2, r4
1000bcfa:	4002      	ands	r2, r0
1000bcfc:	0092      	lsls	r2, r2, #2
1000bcfe:	4094      	lsls	r4, r2
1000bd00:	4b27      	ldr	r3, [pc, #156]	; (1000bda0 <gpio_pinmux_cofiguration+0xd8>)
1000bd02:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000bd04:	43a6      	bics	r6, r4
1000bd06:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bd08:	000e      	movs	r6, r1
1000bd0a:	4096      	lsls	r6, r2
1000bd0c:	0032      	movs	r2, r6
1000bd0e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000bd10:	4322      	orrs	r2, r4
1000bd12:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000bd14:	2901      	cmp	r1, #1
1000bd16:	d1eb      	bne.n	1000bcf0 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd18:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000bd1a:	280b      	cmp	r0, #11
1000bd1c:	d93e      	bls.n	1000bd9c <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd1e:	21d6      	movs	r1, #214	; 0xd6
1000bd20:	0049      	lsls	r1, r1, #1
1000bd22:	e020      	b.n	1000bd66 <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000bd24:	2817      	cmp	r0, #23
1000bd26:	d8e3      	bhi.n	1000bcf0 <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bd28:	2407      	movs	r4, #7
1000bd2a:	0022      	movs	r2, r4
1000bd2c:	4002      	ands	r2, r0
1000bd2e:	0092      	lsls	r2, r2, #2
1000bd30:	4094      	lsls	r4, r2
1000bd32:	4b1b      	ldr	r3, [pc, #108]	; (1000bda0 <gpio_pinmux_cofiguration+0xd8>)
1000bd34:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000bd36:	43a6      	bics	r6, r4
1000bd38:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bd3a:	000e      	movs	r6, r1
1000bd3c:	4096      	lsls	r6, r2
1000bd3e:	0032      	movs	r2, r6
1000bd40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000bd42:	4322      	orrs	r2, r4
1000bd44:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000bd46:	2901      	cmp	r1, #1
1000bd48:	d1d2      	bne.n	1000bcf0 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000bd4a:	2813      	cmp	r0, #19
1000bd4c:	d925      	bls.n	1000bd9a <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd4e:	2403      	movs	r4, #3
1000bd50:	22da      	movs	r2, #218	; 0xda
1000bd52:	4020      	ands	r0, r4
1000bd54:	0052      	lsls	r2, r2, #1
1000bd56:	5899      	ldr	r1, [r3, r2]
1000bd58:	00c0      	lsls	r0, r0, #3
1000bd5a:	343c      	adds	r4, #60	; 0x3c
1000bd5c:	e015      	b.n	1000bd8a <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000bd5e:	2803      	cmp	r0, #3
1000bd60:	d90e      	bls.n	1000bd80 <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd62:	21d2      	movs	r1, #210	; 0xd2
1000bd64:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd66:	2203      	movs	r2, #3
1000bd68:	4010      	ands	r0, r2
1000bd6a:	00c0      	lsls	r0, r0, #3
1000bd6c:	323c      	adds	r2, #60	; 0x3c
1000bd6e:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bd70:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd72:	585c      	ldr	r4, [r3, r1]
1000bd74:	4394      	bics	r4, r2
1000bd76:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bd78:	585a      	ldr	r2, [r3, r1]
1000bd7a:	4315      	orrs	r5, r2
1000bd7c:	505d      	str	r5, [r3, r1]
1000bd7e:	e7b7      	b.n	1000bcf0 <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd80:	22d0      	movs	r2, #208	; 0xd0
1000bd82:	243f      	movs	r4, #63	; 0x3f
1000bd84:	0052      	lsls	r2, r2, #1
1000bd86:	5899      	ldr	r1, [r3, r2]
1000bd88:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd8a:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bd8c:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd8e:	43a1      	bics	r1, r4
1000bd90:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bd92:	5899      	ldr	r1, [r3, r2]
1000bd94:	430d      	orrs	r5, r1
1000bd96:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000bd98:	e7aa      	b.n	1000bcf0 <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bd9a:	31b0      	adds	r1, #176	; 0xb0
1000bd9c:	31ff      	adds	r1, #255	; 0xff
1000bd9e:	e7e2      	b.n	1000bd66 <gpio_pinmux_cofiguration+0x9e>
1000bda0:	4000b000 	.word	0x4000b000

1000bda4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bda4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bda6:	468c      	mov	ip, r1
1000bda8:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bdaa:	280f      	cmp	r0, #15
1000bdac:	d904      	bls.n	1000bdb8 <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000bdae:	331f      	adds	r3, #31
1000bdb0:	4283      	cmp	r3, r0
1000bdb2:	419b      	sbcs	r3, r3
1000bdb4:	425b      	negs	r3, r3
1000bdb6:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000bdb8:	2a01      	cmp	r2, #1
1000bdba:	d043      	beq.n	1000be44 <gpio_register_callback+0xa0>
1000bdbc:	2a00      	cmp	r2, #0
1000bdbe:	d033      	beq.n	1000be28 <gpio_register_callback+0x84>
1000bdc0:	2a02      	cmp	r2, #2
1000bdc2:	d015      	beq.n	1000bdf0 <gpio_register_callback+0x4c>
1000bdc4:	2a03      	cmp	r2, #3
1000bdc6:	d021      	beq.n	1000be0c <gpio_register_callback+0x68>
1000bdc8:	220f      	movs	r2, #15
1000bdca:	4010      	ands	r0, r2
1000bdcc:	3a0e      	subs	r2, #14
1000bdce:	4082      	lsls	r2, r0
1000bdd0:	4c23      	ldr	r4, [pc, #140]	; (1000be60 <gpio_register_callback+0xbc>)
1000bdd2:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bdd4:	4661      	mov	r1, ip
1000bdd6:	18eb      	adds	r3, r5, r3
1000bdd8:	005d      	lsls	r5, r3, #1
1000bdda:	1828      	adds	r0, r5, r0
1000bddc:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bdde:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bde0:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bde2:	18e3      	adds	r3, r4, r3
1000bde4:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bde6:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bde8:	8819      	ldrh	r1, [r3, #0]
1000bdea:	430a      	orrs	r2, r1
1000bdec:	801a      	strh	r2, [r3, #0]
}
1000bdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bdf0:	220f      	movs	r2, #15
1000bdf2:	4010      	ands	r0, r2
1000bdf4:	3a0e      	subs	r2, #14
1000bdf6:	4082      	lsls	r2, r0
1000bdf8:	00dd      	lsls	r5, r3, #3
1000bdfa:	4c19      	ldr	r4, [pc, #100]	; (1000be60 <gpio_register_callback+0xbc>)
1000bdfc:	18ee      	adds	r6, r5, r3
1000bdfe:	00f6      	lsls	r6, r6, #3
1000be00:	59a1      	ldr	r1, [r4, r6]
1000be02:	b297      	uxth	r7, r2
1000be04:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000be06:	59a6      	ldr	r6, [r4, r6]
1000be08:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000be0a:	e7e3      	b.n	1000bdd4 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000be0c:	220f      	movs	r2, #15
1000be0e:	4010      	ands	r0, r2
1000be10:	3a0e      	subs	r2, #14
1000be12:	4082      	lsls	r2, r0
1000be14:	00dd      	lsls	r5, r3, #3
1000be16:	4c12      	ldr	r4, [pc, #72]	; (1000be60 <gpio_register_callback+0xbc>)
1000be18:	18ee      	adds	r6, r5, r3
1000be1a:	00f6      	lsls	r6, r6, #3
1000be1c:	59a1      	ldr	r1, [r4, r6]
1000be1e:	b297      	uxth	r7, r2
1000be20:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000be22:	59a6      	ldr	r6, [r4, r6]
1000be24:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000be26:	e7d5      	b.n	1000bdd4 <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000be28:	220f      	movs	r2, #15
1000be2a:	4010      	ands	r0, r2
1000be2c:	3a0e      	subs	r2, #14
1000be2e:	4082      	lsls	r2, r0
1000be30:	00dd      	lsls	r5, r3, #3
1000be32:	4c0b      	ldr	r4, [pc, #44]	; (1000be60 <gpio_register_callback+0xbc>)
1000be34:	18ee      	adds	r6, r5, r3
1000be36:	00f6      	lsls	r6, r6, #3
1000be38:	59a1      	ldr	r1, [r4, r6]
1000be3a:	b297      	uxth	r7, r2
1000be3c:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000be3e:	59a6      	ldr	r6, [r4, r6]
1000be40:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000be42:	e7c7      	b.n	1000bdd4 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000be44:	270f      	movs	r7, #15
1000be46:	4038      	ands	r0, r7
1000be48:	4082      	lsls	r2, r0
1000be4a:	00dd      	lsls	r5, r3, #3
1000be4c:	4c04      	ldr	r4, [pc, #16]	; (1000be60 <gpio_register_callback+0xbc>)
1000be4e:	18ee      	adds	r6, r5, r3
1000be50:	00f6      	lsls	r6, r6, #3
1000be52:	59a1      	ldr	r1, [r4, r6]
1000be54:	b297      	uxth	r7, r2
1000be56:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000be58:	59a6      	ldr	r6, [r4, r6]
1000be5a:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000be5c:	e7ba      	b.n	1000bdd4 <gpio_register_callback+0x30>
1000be5e:	46c0      	nop			; (mov r8, r8)
1000be60:	10015ab4 	.word	0x10015ab4

1000be64 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000be64:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000be66:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000be68:	280f      	cmp	r0, #15
1000be6a:	d91b      	bls.n	1000bea4 <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000be6c:	281f      	cmp	r0, #31
1000be6e:	d914      	bls.n	1000be9a <gpio_enable_callback+0x36>
1000be70:	4b0f      	ldr	r3, [pc, #60]	; (1000beb0 <gpio_enable_callback+0x4c>)
1000be72:	0492      	lsls	r2, r2, #18
1000be74:	601a      	str	r2, [r3, #0]
1000be76:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000be78:	220f      	movs	r2, #15
1000be7a:	4010      	ands	r0, r2
1000be7c:	3a0e      	subs	r2, #14
1000be7e:	4082      	lsls	r2, r0
1000be80:	00d9      	lsls	r1, r3, #3
1000be82:	4c0c      	ldr	r4, [pc, #48]	; (1000beb4 <gpio_enable_callback+0x50>)
1000be84:	18cb      	adds	r3, r1, r3
1000be86:	00db      	lsls	r3, r3, #3
1000be88:	18e1      	adds	r1, r4, r3
1000be8a:	3146      	adds	r1, #70	; 0x46
1000be8c:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000be8e:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000be90:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000be92:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000be94:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000be96:	841a      	strh	r2, [r3, #32]
}
1000be98:	bd10      	pop	{r4, pc}
1000be9a:	4b05      	ldr	r3, [pc, #20]	; (1000beb0 <gpio_enable_callback+0x4c>)
1000be9c:	0452      	lsls	r2, r2, #17
1000be9e:	601a      	str	r2, [r3, #0]
1000bea0:	2301      	movs	r3, #1
1000bea2:	e7e9      	b.n	1000be78 <gpio_enable_callback+0x14>
1000bea4:	4b02      	ldr	r3, [pc, #8]	; (1000beb0 <gpio_enable_callback+0x4c>)
1000bea6:	0412      	lsls	r2, r2, #16
1000bea8:	601a      	str	r2, [r3, #0]
1000beaa:	2300      	movs	r3, #0
1000beac:	e7e4      	b.n	1000be78 <gpio_enable_callback+0x14>
1000beae:	46c0      	nop			; (mov r8, r8)
1000beb0:	e000e100 	.word	0xe000e100
1000beb4:	10015ab4 	.word	0x10015ab4

1000beb8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000beb8:	4a11      	ldr	r2, [pc, #68]	; (1000bf00 <gpio_init+0x48>)
1000beba:	b510      	push	{r4, lr}
1000bebc:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000bebe:	2100      	movs	r1, #0
1000bec0:	2000      	movs	r0, #0
1000bec2:	34d8      	adds	r4, #216	; 0xd8
1000bec4:	0013      	movs	r3, r2
1000bec6:	3b40      	subs	r3, #64	; 0x40
1000bec8:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000beca:	429a      	cmp	r2, r3
1000becc:	d1fc      	bne.n	1000bec8 <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000bece:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000bed0:	8010      	strh	r0, [r2, #0]
1000bed2:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000bed4:	42a2      	cmp	r2, r4
1000bed6:	d1f5      	bne.n	1000bec4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bed8:	4b0a      	ldr	r3, [pc, #40]	; (1000bf04 <gpio_init+0x4c>)
1000beda:	4a0b      	ldr	r2, [pc, #44]	; (1000bf08 <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000bedc:	490b      	ldr	r1, [pc, #44]	; (1000bf0c <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bede:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000bee0:	4a0b      	ldr	r2, [pc, #44]	; (1000bf10 <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bee2:	4c0c      	ldr	r4, [pc, #48]	; (1000bf14 <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000bee4:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000bee6:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bee8:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000beea:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000beec:	490a      	ldr	r1, [pc, #40]	; (1000bf18 <gpio_init+0x60>)
1000beee:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000bef0:	490a      	ldr	r1, [pc, #40]	; (1000bf1c <gpio_init+0x64>)
1000bef2:	2028      	movs	r0, #40	; 0x28
1000bef4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000bef6:	490a      	ldr	r1, [pc, #40]	; (1000bf20 <gpio_init+0x68>)
1000bef8:	2029      	movs	r0, #41	; 0x29
1000befa:	47a0      	blx	r4
}
1000befc:	bd10      	pop	{r4, pc}
1000befe:	46c0      	nop			; (mov r8, r8)
1000bf00:	10015af8 	.word	0x10015af8
1000bf04:	10015ab4 	.word	0x10015ab4
1000bf08:	40010000 	.word	0x40010000
1000bf0c:	40013000 	.word	0x40013000
1000bf10:	40011000 	.word	0x40011000
1000bf14:	1000c8a1 	.word	0x1000c8a1
1000bf18:	1000b9cd 	.word	0x1000b9cd
1000bf1c:	1000ba25 	.word	0x1000ba25
1000bf20:	1000baa9 	.word	0x1000baa9

1000bf24 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf26:	464f      	mov	r7, r9
1000bf28:	4646      	mov	r6, r8
1000bf2a:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000bf2c:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bf2e:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bf30:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000bf32:	2d00      	cmp	r5, #0
1000bf34:	d104      	bne.n	1000bf40 <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000bf36:	0018      	movs	r0, r3
1000bf38:	bc0c      	pop	{r2, r3}
1000bf3a:	4690      	mov	r8, r2
1000bf3c:	4699      	mov	r9, r3
1000bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000bf40:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000bf42:	6802      	ldr	r2, [r0, #0]
1000bf44:	5d13      	ldrb	r3, [r2, r4]
1000bf46:	07db      	lsls	r3, r3, #31
1000bf48:	d4fc      	bmi.n	1000bf44 <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000bf4a:	2301      	movs	r3, #1
1000bf4c:	2434      	movs	r4, #52	; 0x34
1000bf4e:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000bf50:	3c14      	subs	r4, #20
1000bf52:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000bf54:	2402      	movs	r4, #2
1000bf56:	880b      	ldrh	r3, [r1, #0]
1000bf58:	34ff      	adds	r4, #255	; 0xff
1000bf5a:	005b      	lsls	r3, r3, #1
1000bf5c:	4323      	orrs	r3, r4
1000bf5e:	b29b      	uxth	r3, r3
1000bf60:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000bf62:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000bf64:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000bf66:	4698      	mov	r8, r3
1000bf68:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000bf6a:	7b13      	ldrb	r3, [r2, #12]
1000bf6c:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000bf6e:	4218      	tst	r0, r3
1000bf70:	d006      	beq.n	1000bf80 <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000bf72:	7910      	ldrb	r0, [r2, #4]
1000bf74:	1c67      	adds	r7, r4, #1
1000bf76:	4684      	mov	ip, r0
1000bf78:	4666      	mov	r6, ip
1000bf7a:	6848      	ldr	r0, [r1, #4]
1000bf7c:	5506      	strb	r6, [r0, r4]
1000bf7e:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000bf80:	42ac      	cmp	r4, r5
1000bf82:	d3f1      	bcc.n	1000bf68 <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bf84:	06db      	lsls	r3, r3, #27
1000bf86:	d403      	bmi.n	1000bf90 <_i2c_master_read_packet+0x6c>
1000bf88:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000bf8a:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bf8c:	4219      	tst	r1, r3
1000bf8e:	d0fc      	beq.n	1000bf8a <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000bf90:	464b      	mov	r3, r9
1000bf92:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000bf94:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000bf96:	2900      	cmp	r1, #0
1000bf98:	d1cd      	bne.n	1000bf36 <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000bf9a:	3120      	adds	r1, #32
1000bf9c:	5453      	strb	r3, [r2, r1]
1000bf9e:	e7ca      	b.n	1000bf36 <_i2c_master_read_packet+0x12>

1000bfa0 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfa2:	4684      	mov	ip, r0
1000bfa4:	2428      	movs	r4, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000bfa6:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000bfa8:	884e      	ldrh	r6, [r1, #2]
1000bfaa:	5d13      	ldrb	r3, [r2, r4]
1000bfac:	07db      	lsls	r3, r3, #31
1000bfae:	d4fc      	bmi.n	1000bfaa <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000bfb0:	2301      	movs	r3, #1
1000bfb2:	2434      	movs	r4, #52	; 0x34
1000bfb4:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000bfb6:	3c14      	subs	r4, #20
1000bfb8:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000bfba:	880b      	ldrh	r3, [r1, #0]
1000bfbc:	34e0      	adds	r4, #224	; 0xe0
1000bfbe:	005b      	lsls	r3, r3, #1
1000bfc0:	4323      	orrs	r3, r4
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000bfc2:	2501      	movs	r5, #1
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000bfc4:	2400      	movs	r4, #0

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000bfc6:	b29b      	uxth	r3, r3
1000bfc8:	8013      	strh	r3, [r2, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000bfca:	7a13      	ldrb	r3, [r2, #8]
1000bfcc:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000bfce:	421d      	tst	r5, r3
1000bfd0:	d004      	beq.n	1000bfdc <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000bfd2:	6848      	ldr	r0, [r1, #4]
1000bfd4:	1c67      	adds	r7, r4, #1
1000bfd6:	5d04      	ldrb	r4, [r0, r4]
1000bfd8:	8014      	strh	r4, [r2, #0]
1000bfda:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000bfdc:	42b4      	cmp	r4, r6
1000bfde:	d3f4      	bcc.n	1000bfca <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bfe0:	06db      	lsls	r3, r3, #27
1000bfe2:	d403      	bmi.n	1000bfec <_i2c_master_write_packet+0x4c>
1000bfe4:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000bfe6:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bfe8:	4219      	tst	r1, r3
1000bfea:	d0fc      	beq.n	1000bfe6 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000bfec:	4663      	mov	r3, ip
1000bfee:	795b      	ldrb	r3, [r3, #5]
1000bff0:	2b00      	cmp	r3, #0
1000bff2:	d101      	bne.n	1000bff8 <_i2c_master_write_packet+0x58>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000bff4:	2120      	movs	r1, #32
1000bff6:	5453      	strb	r3, [r2, r1]
	}

	return STATUS_OK;
}
1000bff8:	2000      	movs	r0, #0
1000bffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bffc <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000bffc:	2303      	movs	r3, #3
1000bffe:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000c000:	330d      	adds	r3, #13
1000c002:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000c004:	3b08      	subs	r3, #8
1000c006:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000c008:	3301      	adds	r3, #1
1000c00a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c00c:	3b07      	subs	r3, #7
1000c00e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c010:	6103      	str	r3, [r0, #16]
}
1000c012:	4770      	bx	lr

1000c014 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000c014:	b570      	push	{r4, r5, r6, lr}
1000c016:	0015      	movs	r5, r2
1000c018:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000c01a:	6001      	str	r1, [r0, #0]
1000c01c:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000c01e:	2d00      	cmp	r5, #0
1000c020:	d00d      	beq.n	1000c03e <i2c_master_init+0x2a>
1000c022:	5c8b      	ldrb	r3, [r1, r2]
1000c024:	07db      	lsls	r3, r3, #31
1000c026:	0fdb      	lsrs	r3, r3, #31
1000c028:	b2db      	uxtb	r3, r3
1000c02a:	2b00      	cmp	r3, #0
1000c02c:	d1f9      	bne.n	1000c022 <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000c02e:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000c030:	6823      	ldr	r3, [r4, #0]
1000c032:	4a0f      	ldr	r2, [pc, #60]	; (1000c070 <i2c_master_init+0x5c>)
1000c034:	4293      	cmp	r3, r2
1000c036:	d017      	beq.n	1000c068 <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000c038:	4a0e      	ldr	r2, [pc, #56]	; (1000c074 <i2c_master_init+0x60>)
1000c03a:	4293      	cmp	r3, r2
1000c03c:	d001      	beq.n	1000c042 <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c03e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000c040:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000c042:	2019      	movs	r0, #25
1000c044:	4b0c      	ldr	r3, [pc, #48]	; (1000c078 <i2c_master_init+0x64>)
1000c046:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000c048:	8929      	ldrh	r1, [r5, #8]
1000c04a:	7928      	ldrb	r0, [r5, #4]
1000c04c:	4e0b      	ldr	r6, [pc, #44]	; (1000c07c <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000c04e:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000c050:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000c052:	7b28      	ldrb	r0, [r5, #12]
1000c054:	8a29      	ldrh	r1, [r5, #16]
1000c056:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000c058:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000c05a:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000c05c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000c05e:	886b      	ldrh	r3, [r5, #2]
1000c060:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000c062:	2301      	movs	r3, #1
1000c064:	7723      	strb	r3, [r4, #28]
1000c066:	e7eb      	b.n	1000c040 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000c068:	4b03      	ldr	r3, [pc, #12]	; (1000c078 <i2c_master_init+0x64>)
1000c06a:	2003      	movs	r0, #3
1000c06c:	4798      	blx	r3
1000c06e:	e7eb      	b.n	1000c048 <i2c_master_init+0x34>
1000c070:	40003000 	.word	0x40003000
1000c074:	40003400 	.word	0x40003400
1000c078:	1000c489 	.word	0x1000c489
1000c07c:	1000bcc9 	.word	0x1000bcc9

1000c080 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c080:	0003      	movs	r3, r0
1000c082:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c084:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000c086:	2b00      	cmp	r3, #0
1000c088:	d006      	beq.n	1000c098 <i2c_master_read_packet_wait+0x18>
1000c08a:	2900      	cmp	r1, #0
1000c08c:	d004      	beq.n	1000c098 <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c08e:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000c090:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c092:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000c094:	4b01      	ldr	r3, [pc, #4]	; (1000c09c <i2c_master_read_packet_wait+0x1c>)
1000c096:	4798      	blx	r3
}
1000c098:	bd10      	pop	{r4, pc}
1000c09a:	46c0      	nop			; (mov r8, r8)
1000c09c:	1000bf25 	.word	0x1000bf25

1000c0a0 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c0a0:	b570      	push	{r4, r5, r6, lr}
1000c0a2:	0004      	movs	r4, r0
1000c0a4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c0a6:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000c0a8:	2c00      	cmp	r4, #0
1000c0aa:	d00a      	beq.n	1000c0c2 <i2c_master_write_packet_wait+0x22>
1000c0ac:	2900      	cmp	r1, #0
1000c0ae:	d008      	beq.n	1000c0c2 <i2c_master_write_packet_wait+0x22>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c0b0:	2300      	movs	r3, #0

    printf("!!");
1000c0b2:	4804      	ldr	r0, [pc, #16]	; (1000c0c4 <i2c_master_write_packet_wait+0x24>)
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c0b4:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000c0b6:	4b04      	ldr	r3, [pc, #16]	; (1000c0c8 <i2c_master_write_packet_wait+0x28>)
1000c0b8:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000c0ba:	0029      	movs	r1, r5
1000c0bc:	0020      	movs	r0, r4
1000c0be:	4b03      	ldr	r3, [pc, #12]	; (1000c0cc <i2c_master_write_packet_wait+0x2c>)
1000c0c0:	4798      	blx	r3
}
1000c0c2:	bd70      	pop	{r4, r5, r6, pc}
1000c0c4:	10013408 	.word	0x10013408
1000c0c8:	10011719 	.word	0x10011719
1000c0cc:	1000bfa1 	.word	0x1000bfa1

1000c0d0 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c0d0:	0003      	movs	r3, r0
1000c0d2:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c0d4:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000c0d6:	2b00      	cmp	r3, #0
1000c0d8:	d006      	beq.n	1000c0e8 <i2c_master_write_packet_wait_no_stop+0x18>
1000c0da:	2900      	cmp	r1, #0
1000c0dc:	d004      	beq.n	1000c0e8 <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000c0de:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000c0e0:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000c0e2:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000c0e4:	4b01      	ldr	r3, [pc, #4]	; (1000c0ec <i2c_master_write_packet_wait_no_stop+0x1c>)
1000c0e6:	4798      	blx	r3
}
1000c0e8:	bd10      	pop	{r4, pc}
1000c0ea:	46c0      	nop			; (mov r8, r8)
1000c0ec:	1000bfa1 	.word	0x1000bfa1

1000c0f0 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c0f0:	2801      	cmp	r0, #1
1000c0f2:	d021      	beq.n	1000c138 <system_clock_config+0x48>
1000c0f4:	2800      	cmp	r0, #0
1000c0f6:	d016      	beq.n	1000c126 <system_clock_config+0x36>
1000c0f8:	2802      	cmp	r0, #2
1000c0fa:	d112      	bne.n	1000c122 <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c0fc:	200c      	movs	r0, #12
1000c0fe:	4a18      	ldr	r2, [pc, #96]	; (1000c160 <system_clock_config+0x70>)
1000c100:	6993      	ldr	r3, [r2, #24]
1000c102:	4383      	bics	r3, r0
1000c104:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c106:	4a17      	ldr	r2, [pc, #92]	; (1000c164 <system_clock_config+0x74>)
1000c108:	4b17      	ldr	r3, [pc, #92]	; (1000c168 <system_clock_config+0x78>)
1000c10a:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c10c:	2003      	movs	r0, #3
1000c10e:	4b14      	ldr	r3, [pc, #80]	; (1000c160 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c110:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c112:	699a      	ldr	r2, [r3, #24]
1000c114:	4382      	bics	r2, r0
1000c116:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c118:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c11a:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c11c:	4311      	orrs	r1, r2
1000c11e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c120:	e000      	b.n	1000c124 <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c122:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c124:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c126:	230c      	movs	r3, #12
1000c128:	4a0d      	ldr	r2, [pc, #52]	; (1000c160 <system_clock_config+0x70>)
1000c12a:	6990      	ldr	r0, [r2, #24]
1000c12c:	4303      	orrs	r3, r0
1000c12e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c130:	4a0c      	ldr	r2, [pc, #48]	; (1000c164 <system_clock_config+0x74>)
1000c132:	4b0d      	ldr	r3, [pc, #52]	; (1000c168 <system_clock_config+0x78>)
1000c134:	601a      	str	r2, [r3, #0]
			break;
1000c136:	e7e9      	b.n	1000c10c <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c138:	2208      	movs	r2, #8
1000c13a:	4b09      	ldr	r3, [pc, #36]	; (1000c160 <system_clock_config+0x70>)
1000c13c:	6998      	ldr	r0, [r3, #24]
1000c13e:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c140:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c142:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c144:	699a      	ldr	r2, [r3, #24]
1000c146:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c148:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c14a:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c14c:	4a07      	ldr	r2, [pc, #28]	; (1000c16c <system_clock_config+0x7c>)
1000c14e:	0300      	lsls	r0, r0, #12
1000c150:	6853      	ldr	r3, [r2, #4]
1000c152:	4303      	orrs	r3, r0
1000c154:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c156:	4a06      	ldr	r2, [pc, #24]	; (1000c170 <system_clock_config+0x80>)
1000c158:	4b03      	ldr	r3, [pc, #12]	; (1000c168 <system_clock_config+0x78>)
1000c15a:	601a      	str	r2, [r3, #0]
			break;
1000c15c:	e7d6      	b.n	1000c10c <system_clock_config+0x1c>
1000c15e:	46c0      	nop			; (mov r8, r8)
1000c160:	4000b000 	.word	0x4000b000
1000c164:	018cba80 	.word	0x018cba80
1000c168:	10015b8c 	.word	0x10015b8c
1000c16c:	4000f000 	.word	0x4000f000
1000c170:	001e8480 	.word	0x001e8480

1000c174 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c174:	4b01      	ldr	r3, [pc, #4]	; (1000c17c <system_clock_get_value+0x8>)
1000c176:	6818      	ldr	r0, [r3, #0]
}
1000c178:	4770      	bx	lr
1000c17a:	46c0      	nop			; (mov r8, r8)
1000c17c:	10015b8c 	.word	0x10015b8c

1000c180 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c180:	b500      	push	{lr}
	switch (peripheral) {
1000c182:	2835      	cmp	r0, #53	; 0x35
1000c184:	d900      	bls.n	1000c188 <system_clock_peripheral_enable+0x8>
1000c186:	e16d      	b.n	1000c464 <system_clock_peripheral_enable+0x2e4>
1000c188:	4bb7      	ldr	r3, [pc, #732]	; (1000c468 <system_clock_peripheral_enable+0x2e8>)
1000c18a:	0080      	lsls	r0, r0, #2
1000c18c:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c18e:	4ab7      	ldr	r2, [pc, #732]	; (1000c46c <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000c190:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c192:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c194:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c196:	7d11      	ldrb	r1, [r2, #20]
1000c198:	430b      	orrs	r3, r1
1000c19a:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000c19c:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c19e:	2301      	movs	r3, #1
1000c1a0:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1a2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c1a4:	430b      	orrs	r3, r1
1000c1a6:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c1a8:	e7f8      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1aa:	2180      	movs	r1, #128	; 0x80
1000c1ac:	6913      	ldr	r3, [r2, #16]
1000c1ae:	0409      	lsls	r1, r1, #16
1000c1b0:	430b      	orrs	r3, r1
1000c1b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c1b6:	e7f1      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1b8:	2180      	movs	r1, #128	; 0x80
1000c1ba:	6913      	ldr	r3, [r2, #16]
1000c1bc:	03c9      	lsls	r1, r1, #15
1000c1be:	430b      	orrs	r3, r1
1000c1c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c1c4:	e7ea      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1c6:	2180      	movs	r1, #128	; 0x80
1000c1c8:	6913      	ldr	r3, [r2, #16]
1000c1ca:	0389      	lsls	r1, r1, #14
1000c1cc:	430b      	orrs	r3, r1
1000c1ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c1d2:	e7e3      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1d4:	2180      	movs	r1, #128	; 0x80
1000c1d6:	6913      	ldr	r3, [r2, #16]
1000c1d8:	0349      	lsls	r1, r1, #13
1000c1da:	430b      	orrs	r3, r1
1000c1dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c1e0:	e7dc      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1e2:	2180      	movs	r1, #128	; 0x80
1000c1e4:	6913      	ldr	r3, [r2, #16]
1000c1e6:	0309      	lsls	r1, r1, #12
1000c1e8:	430b      	orrs	r3, r1
1000c1ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c1ee:	e7d5      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1f0:	2180      	movs	r1, #128	; 0x80
1000c1f2:	6913      	ldr	r3, [r2, #16]
1000c1f4:	02c9      	lsls	r1, r1, #11
1000c1f6:	430b      	orrs	r3, r1
1000c1f8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c1fc:	e7ce      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1fe:	2180      	movs	r1, #128	; 0x80
1000c200:	6913      	ldr	r3, [r2, #16]
1000c202:	0289      	lsls	r1, r1, #10
1000c204:	430b      	orrs	r3, r1
1000c206:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c20a:	e7c7      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c20c:	2180      	movs	r1, #128	; 0x80
1000c20e:	6913      	ldr	r3, [r2, #16]
1000c210:	0249      	lsls	r1, r1, #9
1000c212:	430b      	orrs	r3, r1
1000c214:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c216:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c218:	e7c0      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c21a:	2180      	movs	r1, #128	; 0x80
1000c21c:	6913      	ldr	r3, [r2, #16]
1000c21e:	0209      	lsls	r1, r1, #8
1000c220:	430b      	orrs	r3, r1
1000c222:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c224:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c226:	e7b9      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c228:	2180      	movs	r1, #128	; 0x80
1000c22a:	6913      	ldr	r3, [r2, #16]
1000c22c:	01c9      	lsls	r1, r1, #7
1000c22e:	430b      	orrs	r3, r1
1000c230:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c232:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c234:	e7b2      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c236:	2180      	movs	r1, #128	; 0x80
1000c238:	6913      	ldr	r3, [r2, #16]
1000c23a:	0189      	lsls	r1, r1, #6
1000c23c:	430b      	orrs	r3, r1
1000c23e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c240:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c242:	e7ab      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c244:	2180      	movs	r1, #128	; 0x80
1000c246:	6913      	ldr	r3, [r2, #16]
1000c248:	0149      	lsls	r1, r1, #5
1000c24a:	430b      	orrs	r3, r1
1000c24c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c24e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c250:	e7a4      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c252:	2180      	movs	r1, #128	; 0x80
1000c254:	6913      	ldr	r3, [r2, #16]
1000c256:	0109      	lsls	r1, r1, #4
1000c258:	430b      	orrs	r3, r1
1000c25a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c25e:	e79d      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c260:	2180      	movs	r1, #128	; 0x80
1000c262:	6913      	ldr	r3, [r2, #16]
1000c264:	00c9      	lsls	r1, r1, #3
1000c266:	430b      	orrs	r3, r1
1000c268:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c26a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c26c:	e796      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c26e:	2180      	movs	r1, #128	; 0x80
1000c270:	6913      	ldr	r3, [r2, #16]
1000c272:	0089      	lsls	r1, r1, #2
1000c274:	430b      	orrs	r3, r1
1000c276:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c27a:	e78f      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c27c:	2180      	movs	r1, #128	; 0x80
1000c27e:	6913      	ldr	r3, [r2, #16]
1000c280:	0049      	lsls	r1, r1, #1
1000c282:	430b      	orrs	r3, r1
1000c284:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c286:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c288:	e788      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c28a:	2380      	movs	r3, #128	; 0x80
1000c28c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c28e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c290:	430b      	orrs	r3, r1
1000c292:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c294:	e782      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c296:	2340      	movs	r3, #64	; 0x40
1000c298:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c29a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c29c:	430b      	orrs	r3, r1
1000c29e:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c2a0:	e77c      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2a2:	2320      	movs	r3, #32
1000c2a4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2a8:	430b      	orrs	r3, r1
1000c2aa:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c2ac:	e776      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2ae:	2310      	movs	r3, #16
1000c2b0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2b2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2b4:	430b      	orrs	r3, r1
1000c2b6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c2b8:	e770      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2ba:	2308      	movs	r3, #8
1000c2bc:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2be:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2c0:	430b      	orrs	r3, r1
1000c2c2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c2c4:	e76a      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2c6:	2304      	movs	r3, #4
1000c2c8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ca:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2cc:	430b      	orrs	r3, r1
1000c2ce:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c2d0:	e764      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2d2:	2302      	movs	r3, #2
1000c2d4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2d8:	430b      	orrs	r3, r1
1000c2da:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c2dc:	e75e      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2de:	2301      	movs	r3, #1
1000c2e0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2e2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c2e4:	430b      	orrs	r3, r1
1000c2e6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c2e8:	e758      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2ea:	2180      	movs	r1, #128	; 0x80
1000c2ec:	68d3      	ldr	r3, [r2, #12]
1000c2ee:	05c9      	lsls	r1, r1, #23
1000c2f0:	430b      	orrs	r3, r1
1000c2f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c2f6:	e751      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2f8:	2180      	movs	r1, #128	; 0x80
1000c2fa:	68d3      	ldr	r3, [r2, #12]
1000c2fc:	0589      	lsls	r1, r1, #22
1000c2fe:	430b      	orrs	r3, r1
1000c300:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c302:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c304:	e74a      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c306:	2180      	movs	r1, #128	; 0x80
1000c308:	68d3      	ldr	r3, [r2, #12]
1000c30a:	0549      	lsls	r1, r1, #21
1000c30c:	430b      	orrs	r3, r1
1000c30e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c310:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c312:	e743      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c314:	2180      	movs	r1, #128	; 0x80
1000c316:	68d3      	ldr	r3, [r2, #12]
1000c318:	0509      	lsls	r1, r1, #20
1000c31a:	430b      	orrs	r3, r1
1000c31c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c31e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c320:	e73c      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c322:	2180      	movs	r1, #128	; 0x80
1000c324:	68d3      	ldr	r3, [r2, #12]
1000c326:	04c9      	lsls	r1, r1, #19
1000c328:	430b      	orrs	r3, r1
1000c32a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c32c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c32e:	e735      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c330:	2180      	movs	r1, #128	; 0x80
1000c332:	68d3      	ldr	r3, [r2, #12]
1000c334:	0489      	lsls	r1, r1, #18
1000c336:	430b      	orrs	r3, r1
1000c338:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c33a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c33c:	e72e      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c33e:	2180      	movs	r1, #128	; 0x80
1000c340:	68d3      	ldr	r3, [r2, #12]
1000c342:	0449      	lsls	r1, r1, #17
1000c344:	430b      	orrs	r3, r1
1000c346:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c348:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c34a:	e727      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c34c:	2180      	movs	r1, #128	; 0x80
1000c34e:	68d3      	ldr	r3, [r2, #12]
1000c350:	0409      	lsls	r1, r1, #16
1000c352:	430b      	orrs	r3, r1
1000c354:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c356:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c358:	e720      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c35a:	2180      	movs	r1, #128	; 0x80
1000c35c:	68d3      	ldr	r3, [r2, #12]
1000c35e:	03c9      	lsls	r1, r1, #15
1000c360:	430b      	orrs	r3, r1
1000c362:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c366:	e719      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c368:	2180      	movs	r1, #128	; 0x80
1000c36a:	68d3      	ldr	r3, [r2, #12]
1000c36c:	0389      	lsls	r1, r1, #14
1000c36e:	430b      	orrs	r3, r1
1000c370:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c372:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c374:	e712      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c376:	2180      	movs	r1, #128	; 0x80
1000c378:	68d3      	ldr	r3, [r2, #12]
1000c37a:	0349      	lsls	r1, r1, #13
1000c37c:	430b      	orrs	r3, r1
1000c37e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c380:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c382:	e70b      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c384:	2180      	movs	r1, #128	; 0x80
1000c386:	68d3      	ldr	r3, [r2, #12]
1000c388:	0309      	lsls	r1, r1, #12
1000c38a:	430b      	orrs	r3, r1
1000c38c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c38e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c390:	e704      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c392:	2180      	movs	r1, #128	; 0x80
1000c394:	68d3      	ldr	r3, [r2, #12]
1000c396:	02c9      	lsls	r1, r1, #11
1000c398:	430b      	orrs	r3, r1
1000c39a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c39c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c39e:	e6fd      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3a0:	2180      	movs	r1, #128	; 0x80
1000c3a2:	68d3      	ldr	r3, [r2, #12]
1000c3a4:	0289      	lsls	r1, r1, #10
1000c3a6:	430b      	orrs	r3, r1
1000c3a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c3ac:	e6f6      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3ae:	2180      	movs	r1, #128	; 0x80
1000c3b0:	68d3      	ldr	r3, [r2, #12]
1000c3b2:	0249      	lsls	r1, r1, #9
1000c3b4:	430b      	orrs	r3, r1
1000c3b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c3ba:	e6ef      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3bc:	2180      	movs	r1, #128	; 0x80
1000c3be:	68d3      	ldr	r3, [r2, #12]
1000c3c0:	0209      	lsls	r1, r1, #8
1000c3c2:	430b      	orrs	r3, r1
1000c3c4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c3c8:	e6e8      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3ca:	2180      	movs	r1, #128	; 0x80
1000c3cc:	68d3      	ldr	r3, [r2, #12]
1000c3ce:	01c9      	lsls	r1, r1, #7
1000c3d0:	430b      	orrs	r3, r1
1000c3d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c3d6:	e6e1      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3d8:	2180      	movs	r1, #128	; 0x80
1000c3da:	68d3      	ldr	r3, [r2, #12]
1000c3dc:	0189      	lsls	r1, r1, #6
1000c3de:	430b      	orrs	r3, r1
1000c3e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c3e4:	e6da      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3e6:	2180      	movs	r1, #128	; 0x80
1000c3e8:	68d3      	ldr	r3, [r2, #12]
1000c3ea:	0149      	lsls	r1, r1, #5
1000c3ec:	430b      	orrs	r3, r1
1000c3ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c3f2:	e6d3      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c3f4:	2180      	movs	r1, #128	; 0x80
1000c3f6:	68d3      	ldr	r3, [r2, #12]
1000c3f8:	0109      	lsls	r1, r1, #4
1000c3fa:	430b      	orrs	r3, r1
1000c3fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c400:	e6cc      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c402:	2180      	movs	r1, #128	; 0x80
1000c404:	68d3      	ldr	r3, [r2, #12]
1000c406:	0049      	lsls	r1, r1, #1
1000c408:	430b      	orrs	r3, r1
1000c40a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c40c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c40e:	e6c5      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c410:	2380      	movs	r3, #128	; 0x80
1000c412:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c414:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c416:	430b      	orrs	r3, r1
1000c418:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c41a:	e6bf      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c41c:	2320      	movs	r3, #32
1000c41e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c420:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c422:	430b      	orrs	r3, r1
1000c424:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c426:	e6b9      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c428:	2310      	movs	r3, #16
1000c42a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c42c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c42e:	430b      	orrs	r3, r1
1000c430:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c432:	e6b3      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c434:	2308      	movs	r3, #8
1000c436:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c438:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c43a:	430b      	orrs	r3, r1
1000c43c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c43e:	e6ad      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c440:	2304      	movs	r3, #4
1000c442:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c444:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c446:	430b      	orrs	r3, r1
1000c448:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c44a:	e6a7      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c44c:	2302      	movs	r3, #2
1000c44e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c450:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c452:	430b      	orrs	r3, r1
1000c454:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c456:	e6a1      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c458:	2304      	movs	r3, #4
1000c45a:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c45c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c45e:	430b      	orrs	r3, r1
1000c460:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c462:	e69b      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c464:	2017      	movs	r0, #23
1000c466:	e699      	b.n	1000c19c <system_clock_peripheral_enable+0x1c>
1000c468:	1001340c 	.word	0x1001340c
1000c46c:	4000b000 	.word	0x4000b000

1000c470 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c470:	2201      	movs	r2, #1
1000c472:	4b04      	ldr	r3, [pc, #16]	; (1000c484 <system_global_reset+0x14>)
1000c474:	6859      	ldr	r1, [r3, #4]
1000c476:	4391      	bics	r1, r2
1000c478:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c47a:	6859      	ldr	r1, [r3, #4]
1000c47c:	430a      	orrs	r2, r1
1000c47e:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000c480:	4770      	bx	lr
1000c482:	46c0      	nop			; (mov r8, r8)
1000c484:	4000b000 	.word	0x4000b000

1000c488 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c488:	b500      	push	{lr}
	switch (peripheral) {
1000c48a:	2843      	cmp	r0, #67	; 0x43
1000c48c:	d900      	bls.n	1000c490 <system_peripheral_reset+0x8>
1000c48e:	e200      	b.n	1000c892 <system_peripheral_reset+0x40a>
1000c490:	4bd5      	ldr	r3, [pc, #852]	; (1000c7e8 <system_peripheral_reset+0x360>)
1000c492:	0080      	lsls	r0, r0, #2
1000c494:	581b      	ldr	r3, [r3, r0]
1000c496:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c498:	4bd4      	ldr	r3, [pc, #848]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c49a:	4ad5      	ldr	r2, [pc, #852]	; (1000c7f0 <system_peripheral_reset+0x368>)
1000c49c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c49e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4a0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4a2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4a6:	891a      	ldrh	r2, [r3, #8]
1000c4a8:	0109      	lsls	r1, r1, #4
1000c4aa:	430a      	orrs	r2, r1
1000c4ac:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000c4ae:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4b0:	4bce      	ldr	r3, [pc, #824]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c4b2:	4ad0      	ldr	r2, [pc, #832]	; (1000c7f4 <system_peripheral_reset+0x36c>)
1000c4b4:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4b8:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4ba:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4bc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4be:	891a      	ldrh	r2, [r3, #8]
1000c4c0:	0049      	lsls	r1, r1, #1
1000c4c2:	430a      	orrs	r2, r1
1000c4c4:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c4c6:	e7f2      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4c8:	2180      	movs	r1, #128	; 0x80
1000c4ca:	4bc8      	ldr	r3, [pc, #800]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4cc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4ce:	891a      	ldrh	r2, [r3, #8]
1000c4d0:	438a      	bics	r2, r1
1000c4d2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4d4:	2280      	movs	r2, #128	; 0x80
1000c4d6:	8919      	ldrh	r1, [r3, #8]
1000c4d8:	430a      	orrs	r2, r1
1000c4da:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c4dc:	e7e7      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4de:	2104      	movs	r1, #4
1000c4e0:	4bc2      	ldr	r3, [pc, #776]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4e4:	891a      	ldrh	r2, [r3, #8]
1000c4e6:	438a      	bics	r2, r1
1000c4e8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4ea:	2204      	movs	r2, #4
1000c4ec:	8919      	ldrh	r1, [r3, #8]
1000c4ee:	430a      	orrs	r2, r1
1000c4f0:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c4f2:	e7dc      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4f4:	4bbd      	ldr	r3, [pc, #756]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c4f6:	4ac0      	ldr	r2, [pc, #768]	; (1000c7f8 <system_peripheral_reset+0x370>)
1000c4f8:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4fa:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4fc:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4fe:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c500:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c502:	685a      	ldr	r2, [r3, #4]
1000c504:	0449      	lsls	r1, r1, #17
1000c506:	430a      	orrs	r2, r1
1000c508:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c50a:	e7d0      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c50c:	4bb7      	ldr	r3, [pc, #732]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c50e:	4abb      	ldr	r2, [pc, #748]	; (1000c7fc <system_peripheral_reset+0x374>)
1000c510:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c512:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c514:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c516:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c518:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c51a:	685a      	ldr	r2, [r3, #4]
1000c51c:	0409      	lsls	r1, r1, #16
1000c51e:	430a      	orrs	r2, r1
1000c520:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c522:	e7c4      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c524:	4bb1      	ldr	r3, [pc, #708]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c526:	4ab6      	ldr	r2, [pc, #728]	; (1000c800 <system_peripheral_reset+0x378>)
1000c528:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c52a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c52c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c52e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c530:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c532:	685a      	ldr	r2, [r3, #4]
1000c534:	03c9      	lsls	r1, r1, #15
1000c536:	430a      	orrs	r2, r1
1000c538:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c53a:	e7b8      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c53c:	4bab      	ldr	r3, [pc, #684]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c53e:	4ab1      	ldr	r2, [pc, #708]	; (1000c804 <system_peripheral_reset+0x37c>)
1000c540:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c542:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c544:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c546:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c548:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c54a:	685a      	ldr	r2, [r3, #4]
1000c54c:	0389      	lsls	r1, r1, #14
1000c54e:	430a      	orrs	r2, r1
1000c550:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c552:	e7ac      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c554:	4ba5      	ldr	r3, [pc, #660]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c556:	4aac      	ldr	r2, [pc, #688]	; (1000c808 <system_peripheral_reset+0x380>)
1000c558:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c55a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c55c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c55e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c560:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c562:	685a      	ldr	r2, [r3, #4]
1000c564:	0309      	lsls	r1, r1, #12
1000c566:	430a      	orrs	r2, r1
1000c568:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c56a:	e7a0      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c56c:	4b9f      	ldr	r3, [pc, #636]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c56e:	4aa7      	ldr	r2, [pc, #668]	; (1000c80c <system_peripheral_reset+0x384>)
1000c570:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c572:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c574:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c576:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c578:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c57a:	685a      	ldr	r2, [r3, #4]
1000c57c:	0089      	lsls	r1, r1, #2
1000c57e:	430a      	orrs	r2, r1
1000c580:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c582:	e794      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c584:	2280      	movs	r2, #128	; 0x80
1000c586:	4b99      	ldr	r3, [pc, #612]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c588:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c58a:	4391      	bics	r1, r2
1000c58c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c58e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c590:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c592:	430a      	orrs	r2, r1
1000c594:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c596:	e78a      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c598:	4b94      	ldr	r3, [pc, #592]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c59a:	2220      	movs	r2, #32
1000c59c:	6859      	ldr	r1, [r3, #4]
1000c59e:	e7f4      	b.n	1000c58a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5a0:	4b92      	ldr	r3, [pc, #584]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c5a2:	2208      	movs	r2, #8
1000c5a4:	6859      	ldr	r1, [r3, #4]
1000c5a6:	e7f0      	b.n	1000c58a <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5a8:	4b90      	ldr	r3, [pc, #576]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c5aa:	2202      	movs	r2, #2
1000c5ac:	6859      	ldr	r1, [r3, #4]
1000c5ae:	e7ec      	b.n	1000c58a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5b0:	2140      	movs	r1, #64	; 0x40
1000c5b2:	4b8e      	ldr	r3, [pc, #568]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5b6:	891a      	ldrh	r2, [r3, #8]
1000c5b8:	438a      	bics	r2, r1
1000c5ba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5bc:	2240      	movs	r2, #64	; 0x40
1000c5be:	8919      	ldrh	r1, [r3, #8]
1000c5c0:	430a      	orrs	r2, r1
1000c5c2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c5c4:	e773      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5c6:	2120      	movs	r1, #32
1000c5c8:	4b88      	ldr	r3, [pc, #544]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ca:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5cc:	891a      	ldrh	r2, [r3, #8]
1000c5ce:	438a      	bics	r2, r1
1000c5d0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5d2:	2220      	movs	r2, #32
1000c5d4:	8919      	ldrh	r1, [r3, #8]
1000c5d6:	430a      	orrs	r2, r1
1000c5d8:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c5da:	e768      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5dc:	2110      	movs	r1, #16
1000c5de:	4b83      	ldr	r3, [pc, #524]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5e2:	891a      	ldrh	r2, [r3, #8]
1000c5e4:	438a      	bics	r2, r1
1000c5e6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5e8:	2210      	movs	r2, #16
1000c5ea:	8919      	ldrh	r1, [r3, #8]
1000c5ec:	430a      	orrs	r2, r1
1000c5ee:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c5f0:	e75d      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5f2:	2108      	movs	r1, #8
1000c5f4:	4b7d      	ldr	r3, [pc, #500]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5f8:	891a      	ldrh	r2, [r3, #8]
1000c5fa:	438a      	bics	r2, r1
1000c5fc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5fe:	2208      	movs	r2, #8
1000c600:	8919      	ldrh	r1, [r3, #8]
1000c602:	430a      	orrs	r2, r1
1000c604:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c606:	e752      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c608:	4b78      	ldr	r3, [pc, #480]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c60a:	4a81      	ldr	r2, [pc, #516]	; (1000c810 <system_peripheral_reset+0x388>)
1000c60c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c60e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c610:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c612:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c614:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c616:	891a      	ldrh	r2, [r3, #8]
1000c618:	00c9      	lsls	r1, r1, #3
1000c61a:	430a      	orrs	r2, r1
1000c61c:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c61e:	e746      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c620:	4b72      	ldr	r3, [pc, #456]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c622:	4a7a      	ldr	r2, [pc, #488]	; (1000c80c <system_peripheral_reset+0x384>)
1000c624:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c626:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c628:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c62a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c62c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c62e:	891a      	ldrh	r2, [r3, #8]
1000c630:	0089      	lsls	r1, r1, #2
1000c632:	430a      	orrs	r2, r1
1000c634:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c636:	e73a      	b.n	1000c4ae <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c638:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c63a:	4a6c      	ldr	r2, [pc, #432]	; (1000c7ec <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c63c:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c63e:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c640:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c642:	005b      	lsls	r3, r3, #1
1000c644:	085b      	lsrs	r3, r3, #1
1000c646:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c648:	6853      	ldr	r3, [r2, #4]
1000c64a:	430b      	orrs	r3, r1
1000c64c:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c64e:	e72e      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c650:	4b66      	ldr	r3, [pc, #408]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c652:	4a70      	ldr	r2, [pc, #448]	; (1000c814 <system_peripheral_reset+0x38c>)
1000c654:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c656:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c658:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c65a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c65c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c65e:	685a      	ldr	r2, [r3, #4]
1000c660:	05c9      	lsls	r1, r1, #23
1000c662:	430a      	orrs	r2, r1
1000c664:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c666:	e722      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c668:	4b60      	ldr	r3, [pc, #384]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c66a:	4a6b      	ldr	r2, [pc, #428]	; (1000c818 <system_peripheral_reset+0x390>)
1000c66c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c66e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c670:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c672:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c674:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c676:	685a      	ldr	r2, [r3, #4]
1000c678:	0589      	lsls	r1, r1, #22
1000c67a:	430a      	orrs	r2, r1
1000c67c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c67e:	e716      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c680:	4b5a      	ldr	r3, [pc, #360]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c682:	4a66      	ldr	r2, [pc, #408]	; (1000c81c <system_peripheral_reset+0x394>)
1000c684:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c686:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c688:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c68a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c68c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c68e:	685a      	ldr	r2, [r3, #4]
1000c690:	0549      	lsls	r1, r1, #21
1000c692:	430a      	orrs	r2, r1
1000c694:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c696:	e70a      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c698:	4b54      	ldr	r3, [pc, #336]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c69a:	4a61      	ldr	r2, [pc, #388]	; (1000c820 <system_peripheral_reset+0x398>)
1000c69c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c69e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6a0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a6:	685a      	ldr	r2, [r3, #4]
1000c6a8:	0349      	lsls	r1, r1, #13
1000c6aa:	430a      	orrs	r2, r1
1000c6ac:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c6ae:	e6fe      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c6b0:	2102      	movs	r1, #2
1000c6b2:	4b4e      	ldr	r3, [pc, #312]	; (1000c7ec <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c6b6:	891a      	ldrh	r2, [r3, #8]
1000c6b8:	438a      	bics	r2, r1
1000c6ba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c6bc:	2202      	movs	r2, #2
1000c6be:	8919      	ldrh	r1, [r3, #8]
1000c6c0:	430a      	orrs	r2, r1
1000c6c2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c6c4:	e6f3      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6c6:	4b49      	ldr	r3, [pc, #292]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c6c8:	4a56      	ldr	r2, [pc, #344]	; (1000c824 <system_peripheral_reset+0x39c>)
1000c6ca:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6cc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ce:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6d0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6d2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6d4:	685a      	ldr	r2, [r3, #4]
1000c6d6:	0509      	lsls	r1, r1, #20
1000c6d8:	430a      	orrs	r2, r1
1000c6da:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c6dc:	e6e7      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6de:	4b43      	ldr	r3, [pc, #268]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c6e0:	4a51      	ldr	r2, [pc, #324]	; (1000c828 <system_peripheral_reset+0x3a0>)
1000c6e2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6e6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6e8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ea:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6ec:	685a      	ldr	r2, [r3, #4]
1000c6ee:	04c9      	lsls	r1, r1, #19
1000c6f0:	430a      	orrs	r2, r1
1000c6f2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c6f4:	e6db      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6f6:	4b3d      	ldr	r3, [pc, #244]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c6f8:	4a4c      	ldr	r2, [pc, #304]	; (1000c82c <system_peripheral_reset+0x3a4>)
1000c6fa:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6fc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6fe:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c700:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c702:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c704:	685a      	ldr	r2, [r3, #4]
1000c706:	0489      	lsls	r1, r1, #18
1000c708:	430a      	orrs	r2, r1
1000c70a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c70c:	e6cf      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c70e:	4b37      	ldr	r3, [pc, #220]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c710:	4a47      	ldr	r2, [pc, #284]	; (1000c830 <system_peripheral_reset+0x3a8>)
1000c712:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c714:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c716:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c718:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c71a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c71c:	685a      	ldr	r2, [r3, #4]
1000c71e:	02c9      	lsls	r1, r1, #11
1000c720:	430a      	orrs	r2, r1
1000c722:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c724:	e6c3      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c726:	4b31      	ldr	r3, [pc, #196]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c728:	4a42      	ldr	r2, [pc, #264]	; (1000c834 <system_peripheral_reset+0x3ac>)
1000c72a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c72c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c72e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c730:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c732:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c734:	685a      	ldr	r2, [r3, #4]
1000c736:	0209      	lsls	r1, r1, #8
1000c738:	430a      	orrs	r2, r1
1000c73a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c73c:	e6b7      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c73e:	4b2b      	ldr	r3, [pc, #172]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c740:	4a3d      	ldr	r2, [pc, #244]	; (1000c838 <system_peripheral_reset+0x3b0>)
1000c742:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c744:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c746:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c748:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c74a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c74c:	685a      	ldr	r2, [r3, #4]
1000c74e:	01c9      	lsls	r1, r1, #7
1000c750:	430a      	orrs	r2, r1
1000c752:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c754:	e6ab      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c756:	4b25      	ldr	r3, [pc, #148]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c758:	4a38      	ldr	r2, [pc, #224]	; (1000c83c <system_peripheral_reset+0x3b4>)
1000c75a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c75c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c75e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c760:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c762:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c764:	685a      	ldr	r2, [r3, #4]
1000c766:	0189      	lsls	r1, r1, #6
1000c768:	430a      	orrs	r2, r1
1000c76a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c76c:	e69f      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c76e:	4b1f      	ldr	r3, [pc, #124]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c770:	4a33      	ldr	r2, [pc, #204]	; (1000c840 <system_peripheral_reset+0x3b8>)
1000c772:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c774:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c776:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c778:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c77a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c77c:	685a      	ldr	r2, [r3, #4]
1000c77e:	0149      	lsls	r1, r1, #5
1000c780:	430a      	orrs	r2, r1
1000c782:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c784:	e693      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c786:	4b19      	ldr	r3, [pc, #100]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c788:	4a2e      	ldr	r2, [pc, #184]	; (1000c844 <system_peripheral_reset+0x3bc>)
1000c78a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c78c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c78e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c790:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c792:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c794:	685a      	ldr	r2, [r3, #4]
1000c796:	0289      	lsls	r1, r1, #10
1000c798:	430a      	orrs	r2, r1
1000c79a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c79c:	e687      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c79e:	4b13      	ldr	r3, [pc, #76]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c7a0:	4a29      	ldr	r2, [pc, #164]	; (1000c848 <system_peripheral_reset+0x3c0>)
1000c7a2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7a6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7a8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7aa:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7ac:	685a      	ldr	r2, [r3, #4]
1000c7ae:	0249      	lsls	r1, r1, #9
1000c7b0:	430a      	orrs	r2, r1
1000c7b2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c7b4:	e67b      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7b6:	4b0d      	ldr	r3, [pc, #52]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c7b8:	4a0d      	ldr	r2, [pc, #52]	; (1000c7f0 <system_peripheral_reset+0x368>)
1000c7ba:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7bc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7be:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7c0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7c2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7c4:	685a      	ldr	r2, [r3, #4]
1000c7c6:	0109      	lsls	r1, r1, #4
1000c7c8:	430a      	orrs	r2, r1
1000c7ca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c7cc:	e66f      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7ce:	4b07      	ldr	r3, [pc, #28]	; (1000c7ec <system_peripheral_reset+0x364>)
1000c7d0:	4a0f      	ldr	r2, [pc, #60]	; (1000c810 <system_peripheral_reset+0x388>)
1000c7d2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7d6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7d8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7da:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7dc:	685a      	ldr	r2, [r3, #4]
1000c7de:	00c9      	lsls	r1, r1, #3
1000c7e0:	430a      	orrs	r2, r1
1000c7e2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c7e4:	e663      	b.n	1000c4ae <system_peripheral_reset+0x26>
1000c7e6:	46c0      	nop			; (mov r8, r8)
1000c7e8:	100134e4 	.word	0x100134e4
1000c7ec:	4000b000 	.word	0x4000b000
1000c7f0:	fffff7ff 	.word	0xfffff7ff
1000c7f4:	fffffeff 	.word	0xfffffeff
1000c7f8:	feffffff 	.word	0xfeffffff
1000c7fc:	ff7fffff 	.word	0xff7fffff
1000c800:	ffbfffff 	.word	0xffbfffff
1000c804:	ffdfffff 	.word	0xffdfffff
1000c808:	fff7ffff 	.word	0xfff7ffff
1000c80c:	fffffdff 	.word	0xfffffdff
1000c810:	fffffbff 	.word	0xfffffbff
1000c814:	bfffffff 	.word	0xbfffffff
1000c818:	dfffffff 	.word	0xdfffffff
1000c81c:	efffffff 	.word	0xefffffff
1000c820:	ffefffff 	.word	0xffefffff
1000c824:	f7ffffff 	.word	0xf7ffffff
1000c828:	fbffffff 	.word	0xfbffffff
1000c82c:	fdffffff 	.word	0xfdffffff
1000c830:	fffbffff 	.word	0xfffbffff
1000c834:	ffff7fff 	.word	0xffff7fff
1000c838:	ffffbfff 	.word	0xffffbfff
1000c83c:	ffffdfff 	.word	0xffffdfff
1000c840:	ffffefff 	.word	0xffffefff
1000c844:	fffdffff 	.word	0xfffdffff
1000c848:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c84c:	2101      	movs	r1, #1
1000c84e:	4b12      	ldr	r3, [pc, #72]	; (1000c898 <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c850:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c852:	891a      	ldrh	r2, [r3, #8]
1000c854:	438a      	bics	r2, r1
1000c856:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c858:	2201      	movs	r2, #1
1000c85a:	8919      	ldrh	r1, [r3, #8]
1000c85c:	430a      	orrs	r2, r1
1000c85e:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c860:	e625      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c862:	4b0d      	ldr	r3, [pc, #52]	; (1000c898 <system_peripheral_reset+0x410>)
1000c864:	4a0d      	ldr	r2, [pc, #52]	; (1000c89c <system_peripheral_reset+0x414>)
1000c866:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c868:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c86a:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c86c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c86e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c870:	685a      	ldr	r2, [r3, #4]
1000c872:	0049      	lsls	r1, r1, #1
1000c874:	430a      	orrs	r2, r1
1000c876:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c878:	e619      	b.n	1000c4ae <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c87a:	4b07      	ldr	r3, [pc, #28]	; (1000c898 <system_peripheral_reset+0x410>)
1000c87c:	2240      	movs	r2, #64	; 0x40
1000c87e:	6859      	ldr	r1, [r3, #4]
1000c880:	e683      	b.n	1000c58a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c882:	4b05      	ldr	r3, [pc, #20]	; (1000c898 <system_peripheral_reset+0x410>)
1000c884:	2210      	movs	r2, #16
1000c886:	6859      	ldr	r1, [r3, #4]
1000c888:	e67f      	b.n	1000c58a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c88a:	4b03      	ldr	r3, [pc, #12]	; (1000c898 <system_peripheral_reset+0x410>)
1000c88c:	2204      	movs	r2, #4
1000c88e:	6859      	ldr	r1, [r3, #4]
1000c890:	e67b      	b.n	1000c58a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c892:	2017      	movs	r0, #23
1000c894:	e60b      	b.n	1000c4ae <system_peripheral_reset+0x26>
1000c896:	46c0      	nop			; (mov r8, r8)
1000c898:	4000b000 	.word	0x4000b000
1000c89c:	fffffeff 	.word	0xfffffeff

1000c8a0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c8a0:	2380      	movs	r3, #128	; 0x80
1000c8a2:	04db      	lsls	r3, r3, #19
1000c8a4:	469c      	mov	ip, r3
1000c8a6:	4460      	add	r0, ip
1000c8a8:	0080      	lsls	r0, r0, #2
1000c8aa:	6001      	str	r1, [r0, #0]
}
1000c8ac:	4770      	bx	lr
1000c8ae:	46c0      	nop			; (mov r8, r8)

1000c8b0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c8b0:	4a04      	ldr	r2, [pc, #16]	; (1000c8c4 <_sbrk+0x14>)
1000c8b2:	6813      	ldr	r3, [r2, #0]
1000c8b4:	2b00      	cmp	r3, #0
1000c8b6:	d003      	beq.n	1000c8c0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000c8b8:	1818      	adds	r0, r3, r0
1000c8ba:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c8bc:	0018      	movs	r0, r3
1000c8be:	4770      	bx	lr
1000c8c0:	4b01      	ldr	r3, [pc, #4]	; (1000c8c8 <_sbrk+0x18>)
1000c8c2:	e7f9      	b.n	1000c8b8 <_sbrk+0x8>
1000c8c4:	10014e0c 	.word	0x10014e0c
1000c8c8:	10016910 	.word	0x10016910

1000c8cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c8cc:	2001      	movs	r0, #1
1000c8ce:	4240      	negs	r0, r0
1000c8d0:	4770      	bx	lr
1000c8d2:	46c0      	nop			; (mov r8, r8)

1000c8d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c8d4:	2380      	movs	r3, #128	; 0x80
1000c8d6:	019b      	lsls	r3, r3, #6

	return 0;
}
1000c8d8:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c8da:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c8dc:	4770      	bx	lr
1000c8de:	46c0      	nop			; (mov r8, r8)

1000c8e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c8e0:	2001      	movs	r0, #1
1000c8e2:	4770      	bx	lr

1000c8e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c8e4:	2000      	movs	r0, #0
1000c8e6:	4770      	bx	lr

1000c8e8 <interrupt_cb>:
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c8e8:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000c8ea:	b510      	push	{r4, lr}
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c8ec:	4b04      	ldr	r3, [pc, #16]	; (1000c900 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c8ee:	2102      	movs	r1, #2
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c8f0:	711a      	strb	r2, [r3, #4]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c8f2:	201d      	movs	r0, #29
1000c8f4:	2300      	movs	r3, #0
1000c8f6:	2200      	movs	r2, #0
1000c8f8:	4c02      	ldr	r4, [pc, #8]	; (1000c904 <interrupt_cb+0x1c>)
1000c8fa:	47a0      	blx	r4
}
1000c8fc:	bd10      	pop	{r4, pc}
1000c8fe:	46c0      	nop			; (mov r8, r8)
1000c900:	10014e10 	.word	0x10014e10
1000c904:	1000b005 	.word	0x1000b005

1000c908 <configure_i2c_master>:
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000c908:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000c90a:	2010      	movs	r0, #16
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000c90c:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000c90e:	4c14      	ldr	r4, [pc, #80]	; (1000c960 <configure_i2c_master+0x58>)
1000c910:	47a0      	blx	r4
1000c912:	4b14      	ldr	r3, [pc, #80]	; (1000c964 <configure_i2c_master+0x5c>)
1000c914:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000c916:	2010      	movs	r0, #16
1000c918:	47a0      	blx	r4
1000c91a:	4b13      	ldr	r3, [pc, #76]	; (1000c968 <configure_i2c_master+0x60>)
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000c91c:	ac01      	add	r4, sp, #4
}

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000c91e:	6058      	str	r0, [r3, #4]
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000c920:	4b12      	ldr	r3, [pc, #72]	; (1000c96c <configure_i2c_master+0x64>)
1000c922:	0020      	movs	r0, r4
1000c924:	4798      	blx	r3
    /* 26 MHz / 65 = 400 kHz */
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000c926:	2300      	movs	r3, #0
1000c928:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65;
1000c92a:	3341      	adds	r3, #65	; 0x41
1000c92c:	8063      	strh	r3, [r4, #2]
    /* 3 MHz / 30 = 100 kHz */
    //config_i2c_master.clock_source = I2C_CLK_INPUT_3;
    //config_i2c_master.clock_divider = 30;
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000c92e:	3b39      	subs	r3, #57	; 0x39
1000c930:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000c932:	3301      	adds	r3, #1
1000c934:	60e3      	str	r3, [r4, #12]
1000c936:	4d0e      	ldr	r5, [pc, #56]	; (1000c970 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c938:	3b07      	subs	r3, #7
1000c93a:	4e0e      	ldr	r6, [pc, #56]	; (1000c974 <configure_i2c_master+0x6c>)
1000c93c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c93e:	6123      	str	r3, [r4, #16]
    /* Initialize and enable device with config, and enable i2c. */
    while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000c940:	0022      	movs	r2, r4
1000c942:	490d      	ldr	r1, [pc, #52]	; (1000c978 <configure_i2c_master+0x70>)
1000c944:	0028      	movs	r0, r5
1000c946:	47b0      	blx	r6
1000c948:	2800      	cmp	r0, #0
1000c94a:	d1f9      	bne.n	1000c940 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c94c:	2128      	movs	r1, #40	; 0x28
    
    i2c_enable(i2c_master_instance.hw);
1000c94e:	682a      	ldr	r2, [r5, #0]
1000c950:	5c53      	ldrb	r3, [r2, r1]
1000c952:	07db      	lsls	r3, r3, #31
1000c954:	d4fc      	bmi.n	1000c950 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000c956:	2301      	movs	r3, #1
1000c958:	7513      	strb	r3, [r2, #20]
}
1000c95a:	b006      	add	sp, #24
1000c95c:	bd70      	pop	{r4, r5, r6, pc}
1000c95e:	46c0      	nop			; (mov r8, r8)
1000c960:	1001158d 	.word	0x1001158d
1000c964:	10014f14 	.word	0x10014f14
1000c968:	10014f04 	.word	0x10014f04
1000c96c:	1000bffd 	.word	0x1000bffd
1000c970:	10014f0c 	.word	0x10014f0c
1000c974:	1000c015 	.word	0x1000c015
1000c978:	40003000 	.word	0x40003000

1000c97c <init_dualtimer>:

void init_dualtimer(void)
{
1000c97c:	b510      	push	{r4, lr}
1000c97e:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000c980:	ac01      	add	r4, sp, #4
1000c982:	0020      	movs	r0, r4
1000c984:	4b09      	ldr	r3, [pc, #36]	; (1000c9ac <init_dualtimer+0x30>)
1000c986:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000c988:	4b09      	ldr	r3, [pc, #36]	; (1000c9b0 <init_dualtimer+0x34>)
    config_dualtimer.timer2.load_value = 0xffffffff;
    config_dualtimer.timer2.interrup_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000c98a:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000c98c:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 0xffffffff;
1000c98e:	2301      	movs	r3, #1
1000c990:	425b      	negs	r3, r3
1000c992:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.interrup_enable = false;
1000c994:	2300      	movs	r3, #0
1000c996:	7423      	strb	r3, [r4, #16]
    
    dualtimer_init(&config_dualtimer);
1000c998:	4b06      	ldr	r3, [pc, #24]	; (1000c9b4 <init_dualtimer+0x38>)
1000c99a:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000c99c:	4c06      	ldr	r4, [pc, #24]	; (1000c9b8 <init_dualtimer+0x3c>)
1000c99e:	2000      	movs	r0, #0
1000c9a0:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000c9a2:	2001      	movs	r0, #1
1000c9a4:	47a0      	blx	r4
}
1000c9a6:	b008      	add	sp, #32
1000c9a8:	bd10      	pop	{r4, pc}
1000c9aa:	46c0      	nop			; (mov r8, r8)
1000c9ac:	1000817d 	.word	0x1000817d
1000c9b0:	00006590 	.word	0x00006590
1000c9b4:	100081fd 	.word	0x100081fd
1000c9b8:	100081d9 	.word	0x100081d9

1000c9bc <main>:
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9be:	4644      	mov	r4, r8
1000c9c0:	4656      	mov	r6, sl
1000c9c2:	464d      	mov	r5, r9
1000c9c4:	465f      	mov	r7, fp
1000c9c6:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000c9c8:	250b      	movs	r5, #11
1000c9ca:	2600      	movs	r6, #0
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000c9cc:	b093      	sub	sp, #76	; 0x4c
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000c9ce:	4b70      	ldr	r3, [pc, #448]	; (1000cb90 <main+0x1d4>)
}

int main(void)
{
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000c9d0:	446d      	add	r5, sp
1000c9d2:	702e      	strb	r6, [r5, #0]
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000c9d4:	4798      	blx	r3
    gpio_init();
1000c9d6:	4b6f      	ldr	r3, [pc, #444]	; (1000cb94 <main+0x1d8>)
1000c9d8:	4798      	blx	r3
    acquire_sleep_lock();
1000c9da:	4b6f      	ldr	r3, [pc, #444]	; (1000cb98 <main+0x1dc>)
1000c9dc:	4798      	blx	r3
    serial_console_init();
1000c9de:	4b6f      	ldr	r3, [pc, #444]	; (1000cb9c <main+0x1e0>)
1000c9e0:	4798      	blx	r3
    ble_device_init(NULL);
1000c9e2:	2000      	movs	r0, #0
1000c9e4:	4b6e      	ldr	r3, [pc, #440]	; (1000cba0 <main+0x1e4>)
1000c9e6:	4798      	blx	r3

    init_dualtimer();
1000c9e8:	4b6e      	ldr	r3, [pc, #440]	; (1000cba4 <main+0x1e8>)
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c9ea:	ac0f      	add	r4, sp, #60	; 0x3c
    gpio_init();
    acquire_sleep_lock();
    serial_console_init();
    ble_device_init(NULL);

    init_dualtimer();
1000c9ec:	4798      	blx	r3
    delay_init();
1000c9ee:	4b6e      	ldr	r3, [pc, #440]	; (1000cba8 <main+0x1ec>)
1000c9f0:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c9f2:	0020      	movs	r0, r4
1000c9f4:	4b6d      	ldr	r3, [pc, #436]	; (1000cbac <main+0x1f0>)
1000c9f6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000c9f8:	2302      	movs	r3, #2
1000c9fa:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000c9fc:	3b01      	subs	r3, #1
1000c9fe:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000ca00:	0021      	movs	r1, r4
1000ca02:	4b6b      	ldr	r3, [pc, #428]	; (1000cbb0 <main+0x1f4>)
1000ca04:	201d      	movs	r0, #29

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ca06:	7026      	strb	r6, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000ca08:	4798      	blx	r3

    init_dualtimer();
    delay_init();

    configure_imu_gpio();
    configure_i2c_master();
1000ca0a:	4b6a      	ldr	r3, [pc, #424]	; (1000cbb4 <main+0x1f8>)
1000ca0c:	4798      	blx	r3
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000ca0e:	4b6a      	ldr	r3, [pc, #424]	; (1000cbb8 <main+0x1fc>)
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
1000ca10:	0020      	movs	r0, r4

    configure_imu_gpio();
    configure_i2c_master();
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000ca12:	6063      	str	r3, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000ca14:	231d      	movs	r3, #29
1000ca16:	8023      	strh	r3, [r4, #0]
    result = mpu_init(&int_param);
1000ca18:	4b68      	ldr	r3, [pc, #416]	; (1000cbbc <main+0x200>)
1000ca1a:	4798      	blx	r3
    if(result) {
1000ca1c:	2800      	cmp	r0, #0
1000ca1e:	d000      	beq.n	1000ca22 <main+0x66>
1000ca20:	e0b2      	b.n	1000cb88 <main+0x1cc>
        //system_global_reset();
    //}

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ca22:	4b67      	ldr	r3, [pc, #412]	; (1000cbc0 <main+0x204>)
1000ca24:	2079      	movs	r0, #121	; 0x79
1000ca26:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ca28:	4b66      	ldr	r3, [pc, #408]	; (1000cbc4 <main+0x208>)
1000ca2a:	2078      	movs	r0, #120	; 0x78
1000ca2c:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000ca2e:	4b66      	ldr	r3, [pc, #408]	; (1000cbc8 <main+0x20c>)
1000ca30:	200a      	movs	r0, #10
1000ca32:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
    * Use this function for proper power management.
    */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000ca34:	4b65      	ldr	r3, [pc, #404]	; (1000cbcc <main+0x210>)
1000ca36:	200a      	movs	r0, #10
1000ca38:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000ca3a:	200e      	movs	r0, #14
1000ca3c:	4b64      	ldr	r3, [pc, #400]	; (1000cbd0 <main+0x214>)
1000ca3e:	4468      	add	r0, sp
1000ca40:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000ca42:	4b64      	ldr	r3, [pc, #400]	; (1000cbd4 <main+0x218>)
1000ca44:	a804      	add	r0, sp, #16
1000ca46:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000ca48:	0028      	movs	r0, r5
1000ca4a:	4b63      	ldr	r3, [pc, #396]	; (1000cbd8 <main+0x21c>)
1000ca4c:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000ca4e:	2012      	movs	r0, #18
1000ca50:	4b62      	ldr	r3, [pc, #392]	; (1000cbdc <main+0x220>)
1000ca52:	4468      	add	r0, sp
1000ca54:	4798      	blx	r3
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000ca56:	2307      	movs	r3, #7
1000ca58:	4f61      	ldr	r7, [pc, #388]	; (1000cbe0 <main+0x224>)
    hal.dmp_on = 0;
    hal.report = 0;
    hal.rx.cmd = 0;
1000ca5a:	2221      	movs	r2, #33	; 0x21
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000ca5c:	707b      	strb	r3, [r7, #1]
    hal.dmp_on = 0;
1000ca5e:	2300      	movs	r3, #0
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000ca60:	2001      	movs	r0, #1

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
    hal.report = 0;
    hal.rx.cmd = 0;
1000ca62:	54bb      	strb	r3, [r7, r2]
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
1000ca64:	70bb      	strb	r3, [r7, #2]
    hal.report = 0;
1000ca66:	61bb      	str	r3, [r7, #24]
    hal.rx.cmd = 0;
    hal.next_pedo_ms = 0;
1000ca68:	60fb      	str	r3, [r7, #12]
    hal.next_compass_ms = 0;
1000ca6a:	617b      	str	r3, [r7, #20]
    hal.next_temp_ms = 0;
1000ca6c:	613b      	str	r3, [r7, #16]

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000ca6e:	4b5d      	ldr	r3, [pc, #372]	; (1000cbe4 <main+0x228>)
1000ca70:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000ca72:	4b5d      	ldr	r3, [pc, #372]	; (1000cbe8 <main+0x22c>)
1000ca74:	2001      	movs	r0, #1
1000ca76:	469b      	mov	fp, r3
1000ca78:	4798      	blx	r3
1000ca7a:	4b5c      	ldr	r3, [pc, #368]	; (1000cbec <main+0x230>)
1000ca7c:	495c      	ldr	r1, [pc, #368]	; (1000cbf0 <main+0x234>)
1000ca7e:	43c0      	mvns	r0, r0
1000ca80:	469a      	mov	sl, r3
1000ca82:	4798      	blx	r3
1000ca84:	9007      	str	r0, [sp, #28]
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000ca86:	20f0      	movs	r0, #240	; 0xf0
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000ca88:	9b07      	ldr	r3, [sp, #28]
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000ca8a:	0040      	lsls	r0, r0, #1
    dmp_enable_feature(hal.dmp_features);
1000ca8c:	4b59      	ldr	r3, [pc, #356]	; (1000cbf4 <main+0x238>)
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000ca8e:	83b8      	strh	r0, [r7, #28]
    dmp_enable_feature(hal.dmp_features);
1000ca90:	4798      	blx	r3
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1000ca92:	4b59      	ldr	r3, [pc, #356]	; (1000cbf8 <main+0x23c>)
1000ca94:	200a      	movs	r0, #10
1000ca96:	4798      	blx	r3
    //inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
    mpu_set_dmp_state(1);
1000ca98:	4b58      	ldr	r3, [pc, #352]	; (1000cbfc <main+0x240>)
1000ca9a:	2001      	movs	r0, #1
1000ca9c:	4798      	blx	r3
    hal.dmp_on = 1;
1000ca9e:	2301      	movs	r3, #1

    //gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
    gpio_enable_callback(PIN_AO_GPIO_2);
1000caa0:	201d      	movs	r0, #29
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
    dmp_enable_feature(hal.dmp_features);
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
    //inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
    mpu_set_dmp_state(1);
    hal.dmp_on = 1;
1000caa2:	70bb      	strb	r3, [r7, #2]

    //gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
    gpio_enable_callback(PIN_AO_GPIO_2);
1000caa4:	4b56      	ldr	r3, [pc, #344]	; (1000cc00 <main+0x244>)
1000caa6:	4798      	blx	r3
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
1000caa8:	2300      	movs	r3, #0
1000caaa:	4699      	mov	r9, r3
    inv_error_t result;
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
1000caac:	4698      	mov	r8, r3
1000caae:	ad0b      	add	r5, sp, #44	; 0x2c
1000cab0:	ac09      	add	r4, sp, #36	; 0x24
    gpio_enable_callback(PIN_AO_GPIO_2);

    while (true) {
        unsigned long sensor_timestamp;
        
        ble_event_task(BLE_EVENT_TIMEOUT);
1000cab2:	2001      	movs	r0, #1
1000cab4:	4b53      	ldr	r3, [pc, #332]	; (1000cc04 <main+0x248>)
1000cab6:	4240      	negs	r0, r0
1000cab8:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000caba:	2001      	movs	r0, #1
1000cabc:	47d8      	blx	fp
1000cabe:	494c      	ldr	r1, [pc, #304]	; (1000cbf0 <main+0x234>)
1000cac0:	43c0      	mvns	r0, r0
1000cac2:	47d0      	blx	sl
1000cac4:	9008      	str	r0, [sp, #32]
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000cac6:	9b08      	ldr	r3, [sp, #32]
        
        ble_event_task(BLE_EVENT_TIMEOUT);

        get_ms(&timestamp);
        
        if (hal.new_gyro) {
1000cac8:	793b      	ldrb	r3, [r7, #4]
1000caca:	2b00      	cmp	r3, #0
1000cacc:	d0f1      	beq.n	1000cab2 <main+0xf6>
            short gyro[3], accel_short[3], compass_short[3];
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
1000cace:	2300      	movs	r3, #0
1000cad0:	713b      	strb	r3, [r7, #4]
            compass_cnt++;
1000cad2:	464b      	mov	r3, r9
1000cad4:	3301      	adds	r3, #1
1000cad6:	b2db      	uxtb	r3, r3
1000cad8:	4699      	mov	r9, r3
            temp_cnt++;
1000cada:	4643      	mov	r3, r8
1000cadc:	3301      	adds	r3, #1
1000cade:	b2db      	uxtb	r3, r3
1000cae0:	4698      	mov	r8, r3
            
            mpu_read_fifo(gyro, accel_short, &sensor_timestamp, &sensors, &more);
1000cae2:	230d      	movs	r3, #13
1000cae4:	446b      	add	r3, sp
1000cae6:	9300      	str	r3, [sp, #0]
1000cae8:	aa05      	add	r2, sp, #20
1000caea:	ab03      	add	r3, sp, #12
1000caec:	0029      	movs	r1, r5
1000caee:	0020      	movs	r0, r4
1000caf0:	4e45      	ldr	r6, [pc, #276]	; (1000cc08 <main+0x24c>)
1000caf2:	47b0      	blx	r6
            
            if (more) {
1000caf4:	466b      	mov	r3, sp
1000caf6:	7b5b      	ldrb	r3, [r3, #13]
1000caf8:	2b00      	cmp	r3, #0
1000cafa:	d001      	beq.n	1000cb00 <main+0x144>
                hal.new_gyro = 1;
1000cafc:	2301      	movs	r3, #1
1000cafe:	713b      	strb	r3, [r7, #4]
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
1000cb00:	4b42      	ldr	r3, [pc, #264]	; (1000cc0c <main+0x250>)
1000cb02:	4843      	ldr	r0, [pc, #268]	; (1000cc10 <main+0x254>)
1000cb04:	4798      	blx	r3
1000cb06:	2204      	movs	r2, #4
1000cb08:	5ea3      	ldrsh	r3, [r4, r2]
1000cb0a:	4e42      	ldr	r6, [pc, #264]	; (1000cc14 <main+0x258>)
1000cb0c:	2102      	movs	r1, #2
1000cb0e:	5e62      	ldrsh	r2, [r4, r1]
1000cb10:	2000      	movs	r0, #0
1000cb12:	5e21      	ldrsh	r1, [r4, r0]
1000cb14:	4840      	ldr	r0, [pc, #256]	; (1000cc18 <main+0x25c>)
1000cb16:	47b0      	blx	r6
                if (temp_cnt >= 10) {
1000cb18:	4643      	mov	r3, r8
1000cb1a:	2b09      	cmp	r3, #9
1000cb1c:	d826      	bhi.n	1000cb6c <main+0x1b0>
                    mpu_get_temperature(&temperature, &sensor_timestamp);
                    DBG_LOG("Temp: %ld", temperature);
                }
            //}
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
1000cb1e:	4b3b      	ldr	r3, [pc, #236]	; (1000cc0c <main+0x250>)
1000cb20:	483b      	ldr	r0, [pc, #236]	; (1000cc10 <main+0x254>)
1000cb22:	4798      	blx	r3
1000cb24:	2204      	movs	r2, #4
1000cb26:	5eab      	ldrsh	r3, [r5, r2]
1000cb28:	4e3a      	ldr	r6, [pc, #232]	; (1000cc14 <main+0x258>)
1000cb2a:	2102      	movs	r1, #2
1000cb2c:	5e6a      	ldrsh	r2, [r5, r1]
1000cb2e:	2000      	movs	r0, #0
1000cb30:	5e29      	ldrsh	r1, [r5, r0]
1000cb32:	483a      	ldr	r0, [pc, #232]	; (1000cc1c <main+0x260>)
1000cb34:	47b0      	blx	r6
            //}                

            if(compass_cnt > 10) {
1000cb36:	464b      	mov	r3, r9
1000cb38:	2b0a      	cmp	r3, #10
1000cb3a:	d9ba      	bls.n	1000cab2 <main+0xf6>
                compass_cnt = 0;
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000cb3c:	4b38      	ldr	r3, [pc, #224]	; (1000cc20 <main+0x264>)
1000cb3e:	a905      	add	r1, sp, #20
1000cb40:	a80d      	add	r0, sp, #52	; 0x34
1000cb42:	4798      	blx	r3
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
            //}                

            if(compass_cnt > 10) {
                compass_cnt = 0;
1000cb44:	2300      	movs	r3, #0
1000cb46:	4699      	mov	r9, r3
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000cb48:	2800      	cmp	r0, #0
1000cb4a:	d1b2      	bne.n	1000cab2 <main+0xf6>
                    DBG_LOG("Compass: %d %d %d", compass_short[0], compass_short[1], compass_short[2]);
1000cb4c:	4b2f      	ldr	r3, [pc, #188]	; (1000cc0c <main+0x250>)
1000cb4e:	4830      	ldr	r0, [pc, #192]	; (1000cc10 <main+0x254>)
1000cb50:	4798      	blx	r3
1000cb52:	466b      	mov	r3, sp
1000cb54:	2238      	movs	r2, #56	; 0x38
1000cb56:	5e9b      	ldrsh	r3, [r3, r2]
1000cb58:	466a      	mov	r2, sp
1000cb5a:	2136      	movs	r1, #54	; 0x36
1000cb5c:	5e52      	ldrsh	r2, [r2, r1]
1000cb5e:	4669      	mov	r1, sp
1000cb60:	4e2c      	ldr	r6, [pc, #176]	; (1000cc14 <main+0x258>)
1000cb62:	2034      	movs	r0, #52	; 0x34
1000cb64:	5e09      	ldrsh	r1, [r1, r0]
1000cb66:	482f      	ldr	r0, [pc, #188]	; (1000cc24 <main+0x268>)
1000cb68:	47b0      	blx	r6
                    ////DBG_LOG("Quat: %ld %ld %ld %ld", data[0], data[1], data[2], data[3]);
                //}
            //}
            //imu_interrupt = false;
        //}
    }
1000cb6a:	e7a2      	b.n	1000cab2 <main+0xf6>
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
                    /* Temperature only used for gyro temp comp. */
                    mpu_get_temperature(&temperature, &sensor_timestamp);
1000cb6c:	a905      	add	r1, sp, #20
1000cb6e:	4b2e      	ldr	r3, [pc, #184]	; (1000cc28 <main+0x26c>)
1000cb70:	a806      	add	r0, sp, #24
1000cb72:	4798      	blx	r3
                    DBG_LOG("Temp: %ld", temperature);
1000cb74:	4b25      	ldr	r3, [pc, #148]	; (1000cc0c <main+0x250>)
1000cb76:	4826      	ldr	r0, [pc, #152]	; (1000cc10 <main+0x254>)
1000cb78:	4798      	blx	r3
1000cb7a:	4b26      	ldr	r3, [pc, #152]	; (1000cc14 <main+0x258>)
1000cb7c:	9906      	ldr	r1, [sp, #24]
1000cb7e:	482b      	ldr	r0, [pc, #172]	; (1000cc2c <main+0x270>)
1000cb80:	4798      	blx	r3
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
1000cb82:	2300      	movs	r3, #0
1000cb84:	4698      	mov	r8, r3
1000cb86:	e7ca      	b.n	1000cb1e <main+0x162>
    int_param.cb = (void*)interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
    if(result) {
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000cb88:	4b29      	ldr	r3, [pc, #164]	; (1000cc30 <main+0x274>)
1000cb8a:	4798      	blx	r3
1000cb8c:	e749      	b.n	1000ca22 <main+0x66>
1000cb8e:	46c0      	nop			; (mov r8, r8)
1000cb90:	1000ad29 	.word	0x1000ad29
1000cb94:	1000beb9 	.word	0x1000beb9
1000cb98:	1000b2c1 	.word	0x1000b2c1
1000cb9c:	1000aa55 	.word	0x1000aa55
1000cba0:	1000a2b5 	.word	0x1000a2b5
1000cba4:	1000c97d 	.word	0x1000c97d
1000cba8:	100080cd 	.word	0x100080cd
1000cbac:	1000bb21 	.word	0x1000bb21
1000cbb0:	1000bb31 	.word	0x1000bb31
1000cbb4:	1000c909 	.word	0x1000c909
1000cbb8:	1000c8e9 	.word	0x1000c8e9
1000cbbc:	1000902d 	.word	0x1000902d
1000cbc0:	10008e79 	.word	0x10008e79
1000cbc4:	1000892d 	.word	0x1000892d
1000cbc8:	10008dad 	.word	0x10008dad
1000cbcc:	100088c9 	.word	0x100088c9
1000cbd0:	100088ad 	.word	0x100088ad
1000cbd4:	10008685 	.word	0x10008685
1000cbd8:	10008751 	.word	0x10008751
1000cbdc:	100094b5 	.word	0x100094b5
1000cbe0:	10014e10 	.word	0x10014e10
1000cbe4:	100081b5 	.word	0x100081b5
1000cbe8:	100081a1 	.word	0x100081a1
1000cbec:	1000f4cd 	.word	0x1000f4cd
1000cbf0:	00006590 	.word	0x00006590
1000cbf4:	100097dd 	.word	0x100097dd
1000cbf8:	100094f1 	.word	0x100094f1
1000cbfc:	10009361 	.word	0x10009361
1000cc00:	1000be65 	.word	0x1000be65
1000cc04:	1000a975 	.word	0x1000a975
1000cc08:	10008991 	.word	0x10008991
1000cc0c:	10011839 	.word	0x10011839
1000cc10:	100129dc 	.word	0x100129dc
1000cc14:	10011719 	.word	0x10011719
1000cc18:	10013620 	.word	0x10013620
1000cc1c:	1001363c 	.word	0x1001363c
1000cc20:	100093fd 	.word	0x100093fd
1000cc24:	1001364c 	.word	0x1001364c
1000cc28:	10008465 	.word	0x10008465
1000cc2c:	10013630 	.word	0x10013630
1000cc30:	1000c471 	.word	0x1000c471

1000cc34 <internal_event_post>:
1000cc34:	b570      	push	{r4, r5, r6, lr}
1000cc36:	4d12      	ldr	r5, [pc, #72]	; (1000cc80 <internal_event_post+0x4c>)
1000cc38:	682c      	ldr	r4, [r5, #0]
1000cc3a:	2c00      	cmp	r4, #0
1000cc3c:	d014      	beq.n	1000cc68 <internal_event_post+0x34>
1000cc3e:	6826      	ldr	r6, [r4, #0]
1000cc40:	60e2      	str	r2, [r4, #12]
1000cc42:	602e      	str	r6, [r5, #0]
1000cc44:	2500      	movs	r5, #0
1000cc46:	4a0f      	ldr	r2, [pc, #60]	; (1000cc84 <internal_event_post+0x50>)
1000cc48:	8123      	strh	r3, [r4, #8]
1000cc4a:	6813      	ldr	r3, [r2, #0]
1000cc4c:	6025      	str	r5, [r4, #0]
1000cc4e:	80a0      	strh	r0, [r4, #4]
1000cc50:	80e1      	strh	r1, [r4, #6]
1000cc52:	42ab      	cmp	r3, r5
1000cc54:	d101      	bne.n	1000cc5a <internal_event_post+0x26>
1000cc56:	6014      	str	r4, [r2, #0]
1000cc58:	e011      	b.n	1000cc7e <internal_event_post+0x4a>
1000cc5a:	681a      	ldr	r2, [r3, #0]
1000cc5c:	2a00      	cmp	r2, #0
1000cc5e:	d001      	beq.n	1000cc64 <internal_event_post+0x30>
1000cc60:	1c13      	adds	r3, r2, #0
1000cc62:	e7fa      	b.n	1000cc5a <internal_event_post+0x26>
1000cc64:	601c      	str	r4, [r3, #0]
1000cc66:	e00a      	b.n	1000cc7e <internal_event_post+0x4a>
1000cc68:	b2c4      	uxtb	r4, r0
1000cc6a:	2c00      	cmp	r4, #0
1000cc6c:	d107      	bne.n	1000cc7e <internal_event_post+0x4a>
1000cc6e:	4c06      	ldr	r4, [pc, #24]	; (1000cc88 <internal_event_post+0x54>)
1000cc70:	60e2      	str	r2, [r4, #12]
1000cc72:	2201      	movs	r2, #1
1000cc74:	8123      	strh	r3, [r4, #8]
1000cc76:	4b05      	ldr	r3, [pc, #20]	; (1000cc8c <internal_event_post+0x58>)
1000cc78:	80a0      	strh	r0, [r4, #4]
1000cc7a:	80e1      	strh	r1, [r4, #6]
1000cc7c:	701a      	strb	r2, [r3, #0]
1000cc7e:	bd70      	pop	{r4, r5, r6, pc}
1000cc80:	10014e4c 	.word	0x10014e4c
1000cc84:	10014e48 	.word	0x10014e48
1000cc88:	10014e34 	.word	0x10014e34
1000cc8c:	10014e44 	.word	0x10014e44

1000cc90 <internal_event_init>:
1000cc90:	b510      	push	{r4, lr}
1000cc92:	4b08      	ldr	r3, [pc, #32]	; (1000ccb4 <internal_event_init+0x24>)
1000cc94:	0900      	lsrs	r0, r0, #4
1000cc96:	0100      	lsls	r0, r0, #4
1000cc98:	681a      	ldr	r2, [r3, #0]
1000cc9a:	1808      	adds	r0, r1, r0
1000cc9c:	4281      	cmp	r1, r0
1000cc9e:	d003      	beq.n	1000cca8 <internal_event_init+0x18>
1000cca0:	600a      	str	r2, [r1, #0]
1000cca2:	1c0a      	adds	r2, r1, #0
1000cca4:	3110      	adds	r1, #16
1000cca6:	e7f9      	b.n	1000cc9c <internal_event_init+0xc>
1000cca8:	601a      	str	r2, [r3, #0]
1000ccaa:	2200      	movs	r2, #0
1000ccac:	4b02      	ldr	r3, [pc, #8]	; (1000ccb8 <internal_event_init+0x28>)
1000ccae:	601a      	str	r2, [r3, #0]
1000ccb0:	bd10      	pop	{r4, pc}
1000ccb2:	46c0      	nop			; (mov r8, r8)
1000ccb4:	10014e4c 	.word	0x10014e4c
1000ccb8:	10014e48 	.word	0x10014e48

1000ccbc <special_events_handler>:
1000ccbc:	b538      	push	{r3, r4, r5, lr}
1000ccbe:	4c1b      	ldr	r4, [pc, #108]	; (1000cd2c <special_events_handler+0x70>)
1000ccc0:	1c03      	adds	r3, r0, #0
1000ccc2:	8825      	ldrh	r5, [r4, #0]
1000ccc4:	1c08      	adds	r0, r1, #0
1000ccc6:	1c21      	adds	r1, r4, #0
1000ccc8:	429d      	cmp	r5, r3
1000ccca:	d107      	bne.n	1000ccdc <special_events_handler+0x20>
1000cccc:	88a5      	ldrh	r5, [r4, #4]
1000ccce:	4285      	cmp	r5, r0
1000ccd0:	d104      	bne.n	1000ccdc <special_events_handler+0x20>
1000ccd2:	2301      	movs	r3, #1
1000ccd4:	425b      	negs	r3, r3
1000ccd6:	8023      	strh	r3, [r4, #0]
1000ccd8:	60a2      	str	r2, [r4, #8]
1000ccda:	e009      	b.n	1000ccf0 <special_events_handler+0x34>
1000ccdc:	884c      	ldrh	r4, [r1, #2]
1000ccde:	429c      	cmp	r4, r3
1000cce0:	d10a      	bne.n	1000ccf8 <special_events_handler+0x3c>
1000cce2:	888c      	ldrh	r4, [r1, #4]
1000cce4:	4284      	cmp	r4, r0
1000cce6:	d107      	bne.n	1000ccf8 <special_events_handler+0x3c>
1000cce8:	2301      	movs	r3, #1
1000ccea:	425b      	negs	r3, r3
1000ccec:	804b      	strh	r3, [r1, #2]
1000ccee:	608a      	str	r2, [r1, #8]
1000ccf0:	4b0f      	ldr	r3, [pc, #60]	; (1000cd30 <special_events_handler+0x74>)
1000ccf2:	4798      	blx	r3
1000ccf4:	2001      	movs	r0, #1
1000ccf6:	e017      	b.n	1000cd28 <special_events_handler+0x6c>
1000ccf8:	490e      	ldr	r1, [pc, #56]	; (1000cd34 <special_events_handler+0x78>)
1000ccfa:	428b      	cmp	r3, r1
1000ccfc:	d00e      	beq.n	1000cd1c <special_events_handler+0x60>
1000ccfe:	490e      	ldr	r1, [pc, #56]	; (1000cd38 <special_events_handler+0x7c>)
1000cd00:	428b      	cmp	r3, r1
1000cd02:	d007      	beq.n	1000cd14 <special_events_handler+0x58>
1000cd04:	490d      	ldr	r1, [pc, #52]	; (1000cd3c <special_events_handler+0x80>)
1000cd06:	2000      	movs	r0, #0
1000cd08:	428b      	cmp	r3, r1
1000cd0a:	d10d      	bne.n	1000cd28 <special_events_handler+0x6c>
1000cd0c:	1c10      	adds	r0, r2, #0
1000cd0e:	4b0c      	ldr	r3, [pc, #48]	; (1000cd40 <special_events_handler+0x84>)
1000cd10:	4798      	blx	r3
1000cd12:	e7ef      	b.n	1000ccf4 <special_events_handler+0x38>
1000cd14:	1c11      	adds	r1, r2, #0
1000cd16:	4b0b      	ldr	r3, [pc, #44]	; (1000cd44 <special_events_handler+0x88>)
1000cd18:	2200      	movs	r2, #0
1000cd1a:	e002      	b.n	1000cd22 <special_events_handler+0x66>
1000cd1c:	1c11      	adds	r1, r2, #0
1000cd1e:	2200      	movs	r2, #0
1000cd20:	4b09      	ldr	r3, [pc, #36]	; (1000cd48 <special_events_handler+0x8c>)
1000cd22:	4798      	blx	r3
1000cd24:	4243      	negs	r3, r0
1000cd26:	4158      	adcs	r0, r3
1000cd28:	bd38      	pop	{r3, r4, r5, pc}
1000cd2a:	46c0      	nop			; (mov r8, r8)
1000cd2c:	10015b90 	.word	0x10015b90
1000cd30:	1000dec1 	.word	0x1000dec1
1000cd34:	00000e13 	.word	0x00000e13
1000cd38:	00000e15 	.word	0x00000e15
1000cd3c:	00000e01 	.word	0x00000e01
1000cd40:	1000e231 	.word	0x1000e231
1000cd44:	1000e3f1 	.word	0x1000e3f1
1000cd48:	1000e4c9 	.word	0x1000e4c9

1000cd4c <at_ble_event_get>:
1000cd4c:	2300      	movs	r3, #0
1000cd4e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd50:	b087      	sub	sp, #28
1000cd52:	9204      	str	r2, [sp, #16]
1000cd54:	7003      	strb	r3, [r0, #0]
1000cd56:	9b04      	ldr	r3, [sp, #16]
1000cd58:	9003      	str	r0, [sp, #12]
1000cd5a:	3b01      	subs	r3, #1
1000cd5c:	1c0d      	adds	r5, r1, #0
1000cd5e:	9305      	str	r3, [sp, #20]
1000cd60:	3303      	adds	r3, #3
1000cd62:	d802      	bhi.n	1000cd6a <at_ble_event_get+0x1e>
1000cd64:	9804      	ldr	r0, [sp, #16]
1000cd66:	4bae      	ldr	r3, [pc, #696]	; (1000d020 <at_ble_event_get+0x2d4>)
1000cd68:	4798      	blx	r3
1000cd6a:	9b05      	ldr	r3, [sp, #20]
1000cd6c:	4cad      	ldr	r4, [pc, #692]	; (1000d024 <at_ble_event_get+0x2d8>)
1000cd6e:	3303      	adds	r3, #3
1000cd70:	d902      	bls.n	1000cd78 <at_ble_event_get+0x2c>
1000cd72:	2300      	movs	r3, #0
1000cd74:	9302      	str	r3, [sp, #8]
1000cd76:	e015      	b.n	1000cda4 <at_ble_event_get+0x58>
1000cd78:	2300      	movs	r3, #0
1000cd7a:	9302      	str	r3, [sp, #8]
1000cd7c:	6823      	ldr	r3, [r4, #0]
1000cd7e:	2b00      	cmp	r3, #0
1000cd80:	d113      	bne.n	1000cdaa <at_ble_event_get+0x5e>
1000cd82:	9b02      	ldr	r3, [sp, #8]
1000cd84:	2bd0      	cmp	r3, #208	; 0xd0
1000cd86:	d100      	bne.n	1000cd8a <at_ble_event_get+0x3e>
1000cd88:	e2da      	b.n	1000d340 <at_ble_event_get+0x5f4>
1000cd8a:	9804      	ldr	r0, [sp, #16]
1000cd8c:	4ba6      	ldr	r3, [pc, #664]	; (1000d028 <at_ble_event_get+0x2dc>)
1000cd8e:	4798      	blx	r3
1000cd90:	9002      	str	r0, [sp, #8]
1000cd92:	2802      	cmp	r0, #2
1000cd94:	d1f2      	bne.n	1000cd7c <at_ble_event_get+0x30>
1000cd96:	e03f      	b.n	1000ce18 <at_ble_event_get+0xcc>
1000cd98:	9804      	ldr	r0, [sp, #16]
1000cd9a:	4ba3      	ldr	r3, [pc, #652]	; (1000d028 <at_ble_event_get+0x2dc>)
1000cd9c:	4798      	blx	r3
1000cd9e:	9002      	str	r0, [sp, #8]
1000cda0:	2802      	cmp	r0, #2
1000cda2:	d039      	beq.n	1000ce18 <at_ble_event_get+0xcc>
1000cda4:	6823      	ldr	r3, [r4, #0]
1000cda6:	2b00      	cmp	r3, #0
1000cda8:	d0f6      	beq.n	1000cd98 <at_ble_event_get+0x4c>
1000cdaa:	9b02      	ldr	r3, [sp, #8]
1000cdac:	2bd0      	cmp	r3, #208	; 0xd0
1000cdae:	d100      	bne.n	1000cdb2 <at_ble_event_get+0x66>
1000cdb0:	e2c6      	b.n	1000d340 <at_ble_event_get+0x5f4>
1000cdb2:	9b02      	ldr	r3, [sp, #8]
1000cdb4:	3b03      	subs	r3, #3
1000cdb6:	1e5a      	subs	r2, r3, #1
1000cdb8:	4193      	sbcs	r3, r2
1000cdba:	9a02      	ldr	r2, [sp, #8]
1000cdbc:	425b      	negs	r3, r3
1000cdbe:	401a      	ands	r2, r3
1000cdc0:	6823      	ldr	r3, [r4, #0]
1000cdc2:	9202      	str	r2, [sp, #8]
1000cdc4:	2b00      	cmp	r3, #0
1000cdc6:	d100      	bne.n	1000cdca <at_ble_event_get+0x7e>
1000cdc8:	e2c2      	b.n	1000d350 <at_ble_event_get+0x604>
1000cdca:	681a      	ldr	r2, [r3, #0]
1000cdcc:	68de      	ldr	r6, [r3, #12]
1000cdce:	6022      	str	r2, [r4, #0]
1000cdd0:	88da      	ldrh	r2, [r3, #6]
1000cdd2:	9201      	str	r2, [sp, #4]
1000cdd4:	4a95      	ldr	r2, [pc, #596]	; (1000d02c <at_ble_event_get+0x2e0>)
1000cdd6:	889c      	ldrh	r4, [r3, #4]
1000cdd8:	6811      	ldr	r1, [r2, #0]
1000cdda:	6013      	str	r3, [r2, #0]
1000cddc:	6019      	str	r1, [r3, #0]
1000cdde:	4b94      	ldr	r3, [pc, #592]	; (1000d030 <at_ble_event_get+0x2e4>)
1000cde0:	781b      	ldrb	r3, [r3, #0]
1000cde2:	2b01      	cmp	r3, #1
1000cde4:	d10f      	bne.n	1000ce06 <at_ble_event_get+0xba>
1000cde6:	4b93      	ldr	r3, [pc, #588]	; (1000d034 <at_ble_event_get+0x2e8>)
1000cde8:	4a92      	ldr	r2, [pc, #584]	; (1000d034 <at_ble_event_get+0x2e8>)
1000cdea:	8898      	ldrh	r0, [r3, #4]
1000cdec:	88d9      	ldrh	r1, [r3, #6]
1000cdee:	68d2      	ldr	r2, [r2, #12]
1000cdf0:	891b      	ldrh	r3, [r3, #8]
1000cdf2:	4f91      	ldr	r7, [pc, #580]	; (1000d038 <at_ble_event_get+0x2ec>)
1000cdf4:	47b8      	blx	r7
1000cdf6:	2210      	movs	r2, #16
1000cdf8:	4b90      	ldr	r3, [pc, #576]	; (1000d03c <at_ble_event_get+0x2f0>)
1000cdfa:	488e      	ldr	r0, [pc, #568]	; (1000d034 <at_ble_event_get+0x2e8>)
1000cdfc:	2100      	movs	r1, #0
1000cdfe:	4798      	blx	r3
1000ce00:	2300      	movs	r3, #0
1000ce02:	4a8b      	ldr	r2, [pc, #556]	; (1000d030 <at_ble_event_get+0x2e4>)
1000ce04:	7013      	strb	r3, [r2, #0]
1000ce06:	9b02      	ldr	r3, [sp, #8]
1000ce08:	2b00      	cmp	r3, #0
1000ce0a:	d114      	bne.n	1000ce36 <at_ble_event_get+0xea>
1000ce0c:	4b8c      	ldr	r3, [pc, #560]	; (1000d040 <at_ble_event_get+0x2f4>)
1000ce0e:	429c      	cmp	r4, r3
1000ce10:	d009      	beq.n	1000ce26 <at_ble_event_get+0xda>
1000ce12:	4b8c      	ldr	r3, [pc, #560]	; (1000d044 <at_ble_event_get+0x2f8>)
1000ce14:	429c      	cmp	r4, r3
1000ce16:	d127      	bne.n	1000ce68 <at_ble_event_get+0x11c>
1000ce18:	233a      	movs	r3, #58	; 0x3a
1000ce1a:	9a03      	ldr	r2, [sp, #12]
1000ce1c:	7013      	strb	r3, [r2, #0]
1000ce1e:	2300      	movs	r3, #0
1000ce20:	9302      	str	r3, [sp, #8]
1000ce22:	1c1d      	adds	r5, r3, #0
1000ce24:	e007      	b.n	1000ce36 <at_ble_event_get+0xea>
1000ce26:	9b01      	ldr	r3, [sp, #4]
1000ce28:	42a3      	cmp	r3, r4
1000ce2a:	d000      	beq.n	1000ce2e <at_ble_event_get+0xe2>
1000ce2c:	e28a      	b.n	1000d344 <at_ble_event_get+0x5f8>
1000ce2e:	2338      	movs	r3, #56	; 0x38
1000ce30:	9a03      	ldr	r2, [sp, #12]
1000ce32:	7013      	strb	r3, [r2, #0]
1000ce34:	602e      	str	r6, [r5, #0]
1000ce36:	9b03      	ldr	r3, [sp, #12]
1000ce38:	781b      	ldrb	r3, [r3, #0]
1000ce3a:	2b3b      	cmp	r3, #59	; 0x3b
1000ce3c:	d101      	bne.n	1000ce42 <at_ble_event_get+0xf6>
1000ce3e:	4b82      	ldr	r3, [pc, #520]	; (1000d048 <at_ble_event_get+0x2fc>)
1000ce40:	4798      	blx	r3
1000ce42:	9b03      	ldr	r3, [sp, #12]
1000ce44:	781b      	ldrb	r3, [r3, #0]
1000ce46:	2b3b      	cmp	r3, #59	; 0x3b
1000ce48:	d003      	beq.n	1000ce52 <at_ble_event_get+0x106>
1000ce4a:	9b05      	ldr	r3, [sp, #20]
1000ce4c:	3303      	adds	r3, #3
1000ce4e:	d904      	bls.n	1000ce5a <at_ble_event_get+0x10e>
1000ce50:	e283      	b.n	1000d35a <at_ble_event_get+0x60e>
1000ce52:	9b02      	ldr	r3, [sp, #8]
1000ce54:	2b00      	cmp	r3, #0
1000ce56:	d088      	beq.n	1000cd6a <at_ble_event_get+0x1e>
1000ce58:	e7f7      	b.n	1000ce4a <at_ble_event_get+0xfe>
1000ce5a:	9b02      	ldr	r3, [sp, #8]
1000ce5c:	2bd0      	cmp	r3, #208	; 0xd0
1000ce5e:	d100      	bne.n	1000ce62 <at_ble_event_get+0x116>
1000ce60:	e27b      	b.n	1000d35a <at_ble_event_get+0x60e>
1000ce62:	4b7a      	ldr	r3, [pc, #488]	; (1000d04c <at_ble_event_get+0x300>)
1000ce64:	4798      	blx	r3
1000ce66:	e278      	b.n	1000d35a <at_ble_event_get+0x60e>
1000ce68:	9b01      	ldr	r3, [sp, #4]
1000ce6a:	2bbb      	cmp	r3, #187	; 0xbb
1000ce6c:	d125      	bne.n	1000ceba <at_ble_event_get+0x16e>
1000ce6e:	2cbb      	cmp	r4, #187	; 0xbb
1000ce70:	d123      	bne.n	1000ceba <at_ble_event_get+0x16e>
1000ce72:	466b      	mov	r3, sp
1000ce74:	891b      	ldrh	r3, [r3, #8]
1000ce76:	80ab      	strh	r3, [r5, #4]
1000ce78:	78b3      	ldrb	r3, [r6, #2]
1000ce7a:	7872      	ldrb	r2, [r6, #1]
1000ce7c:	78f0      	ldrb	r0, [r6, #3]
1000ce7e:	021b      	lsls	r3, r3, #8
1000ce80:	4313      	orrs	r3, r2
1000ce82:	7971      	ldrb	r1, [r6, #5]
1000ce84:	7932      	ldrb	r2, [r6, #4]
1000ce86:	70a8      	strb	r0, [r5, #2]
1000ce88:	4871      	ldr	r0, [pc, #452]	; (1000d050 <at_ble_event_get+0x304>)
1000ce8a:	802b      	strh	r3, [r5, #0]
1000ce8c:	4283      	cmp	r3, r0
1000ce8e:	d806      	bhi.n	1000ce9e <at_ble_event_get+0x152>
1000ce90:	4a70      	ldr	r2, [pc, #448]	; (1000d054 <at_ble_event_get+0x308>)
1000ce92:	4293      	cmp	r3, r2
1000ce94:	d20b      	bcs.n	1000ceae <at_ble_event_get+0x162>
1000ce96:	4a70      	ldr	r2, [pc, #448]	; (1000d058 <at_ble_event_get+0x30c>)
1000ce98:	4293      	cmp	r3, r2
1000ce9a:	d008      	beq.n	1000ceae <at_ble_event_get+0x162>
1000ce9c:	e009      	b.n	1000ceb2 <at_ble_event_get+0x166>
1000ce9e:	486f      	ldr	r0, [pc, #444]	; (1000d05c <at_ble_event_get+0x310>)
1000cea0:	4283      	cmp	r3, r0
1000cea2:	d106      	bne.n	1000ceb2 <at_ble_event_get+0x166>
1000cea4:	020b      	lsls	r3, r1, #8
1000cea6:	4313      	orrs	r3, r2
1000cea8:	80ab      	strh	r3, [r5, #4]
1000ceaa:	2337      	movs	r3, #55	; 0x37
1000ceac:	e002      	b.n	1000ceb4 <at_ble_event_get+0x168>
1000ceae:	2336      	movs	r3, #54	; 0x36
1000ceb0:	e000      	b.n	1000ceb4 <at_ble_event_get+0x168>
1000ceb2:	2300      	movs	r3, #0
1000ceb4:	9a03      	ldr	r2, [sp, #12]
1000ceb6:	7013      	strb	r3, [r2, #0]
1000ceb8:	e7bd      	b.n	1000ce36 <at_ble_event_get+0xea>
1000ceba:	4b69      	ldr	r3, [pc, #420]	; (1000d060 <at_ble_event_get+0x314>)
1000cebc:	429c      	cmp	r4, r3
1000cebe:	d100      	bne.n	1000cec2 <at_ble_event_get+0x176>
1000cec0:	e144      	b.n	1000d14c <at_ble_event_get+0x400>
1000cec2:	d865      	bhi.n	1000cf90 <at_ble_event_get+0x244>
1000cec4:	4b67      	ldr	r3, [pc, #412]	; (1000d064 <at_ble_event_get+0x318>)
1000cec6:	429c      	cmp	r4, r3
1000cec8:	d100      	bne.n	1000cecc <at_ble_event_get+0x180>
1000ceca:	e1d5      	b.n	1000d278 <at_ble_event_get+0x52c>
1000cecc:	d82f      	bhi.n	1000cf2e <at_ble_event_get+0x1e2>
1000cece:	4b66      	ldr	r3, [pc, #408]	; (1000d068 <at_ble_event_get+0x31c>)
1000ced0:	429c      	cmp	r4, r3
1000ced2:	d100      	bne.n	1000ced6 <at_ble_event_get+0x18a>
1000ced4:	e1e0      	b.n	1000d298 <at_ble_event_get+0x54c>
1000ced6:	d813      	bhi.n	1000cf00 <at_ble_event_get+0x1b4>
1000ced8:	4b64      	ldr	r3, [pc, #400]	; (1000d06c <at_ble_event_get+0x320>)
1000ceda:	429c      	cmp	r4, r3
1000cedc:	d100      	bne.n	1000cee0 <at_ble_event_get+0x194>
1000cede:	e1a3      	b.n	1000d228 <at_ble_event_get+0x4dc>
1000cee0:	d804      	bhi.n	1000ceec <at_ble_event_get+0x1a0>
1000cee2:	2638      	movs	r6, #56	; 0x38
1000cee4:	42b4      	cmp	r4, r6
1000cee6:	d100      	bne.n	1000ceea <at_ble_event_get+0x19e>
1000cee8:	e225      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000ceea:	e117      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000ceec:	4b60      	ldr	r3, [pc, #384]	; (1000d070 <at_ble_event_get+0x324>)
1000ceee:	429c      	cmp	r4, r3
1000cef0:	d100      	bne.n	1000cef4 <at_ble_event_get+0x1a8>
1000cef2:	e19f      	b.n	1000d234 <at_ble_event_get+0x4e8>
1000cef4:	33fe      	adds	r3, #254	; 0xfe
1000cef6:	33ff      	adds	r3, #255	; 0xff
1000cef8:	429c      	cmp	r4, r3
1000cefa:	d100      	bne.n	1000cefe <at_ble_event_get+0x1b2>
1000cefc:	e1d3      	b.n	1000d2a6 <at_ble_event_get+0x55a>
1000cefe:	e10d      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf00:	4b5c      	ldr	r3, [pc, #368]	; (1000d074 <at_ble_event_get+0x328>)
1000cf02:	429c      	cmp	r4, r3
1000cf04:	d100      	bne.n	1000cf08 <at_ble_event_get+0x1bc>
1000cf06:	e1a9      	b.n	1000d25c <at_ble_event_get+0x510>
1000cf08:	d808      	bhi.n	1000cf1c <at_ble_event_get+0x1d0>
1000cf0a:	4b5b      	ldr	r3, [pc, #364]	; (1000d078 <at_ble_event_get+0x32c>)
1000cf0c:	429c      	cmp	r4, r3
1000cf0e:	d100      	bne.n	1000cf12 <at_ble_event_get+0x1c6>
1000cf10:	e196      	b.n	1000d240 <at_ble_event_get+0x4f4>
1000cf12:	4b5a      	ldr	r3, [pc, #360]	; (1000d07c <at_ble_event_get+0x330>)
1000cf14:	429c      	cmp	r4, r3
1000cf16:	d100      	bne.n	1000cf1a <at_ble_event_get+0x1ce>
1000cf18:	e199      	b.n	1000d24e <at_ble_event_get+0x502>
1000cf1a:	e0ff      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf1c:	4b58      	ldr	r3, [pc, #352]	; (1000d080 <at_ble_event_get+0x334>)
1000cf1e:	429c      	cmp	r4, r3
1000cf20:	d100      	bne.n	1000cf24 <at_ble_event_get+0x1d8>
1000cf22:	e1a2      	b.n	1000d26a <at_ble_event_get+0x51e>
1000cf24:	4b57      	ldr	r3, [pc, #348]	; (1000d084 <at_ble_event_get+0x338>)
1000cf26:	429c      	cmp	r4, r3
1000cf28:	d100      	bne.n	1000cf2c <at_ble_event_get+0x1e0>
1000cf2a:	e1d4      	b.n	1000d2d6 <at_ble_event_get+0x58a>
1000cf2c:	e0f6      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf2e:	4b56      	ldr	r3, [pc, #344]	; (1000d088 <at_ble_event_get+0x33c>)
1000cf30:	429c      	cmp	r4, r3
1000cf32:	d100      	bne.n	1000cf36 <at_ble_event_get+0x1ea>
1000cf34:	e1c8      	b.n	1000d2c8 <at_ble_event_get+0x57c>
1000cf36:	d812      	bhi.n	1000cf5e <at_ble_event_get+0x212>
1000cf38:	4b54      	ldr	r3, [pc, #336]	; (1000d08c <at_ble_event_get+0x340>)
1000cf3a:	429c      	cmp	r4, r3
1000cf3c:	d100      	bne.n	1000cf40 <at_ble_event_get+0x1f4>
1000cf3e:	e1d1      	b.n	1000d2e4 <at_ble_event_get+0x598>
1000cf40:	d804      	bhi.n	1000cf4c <at_ble_event_get+0x200>
1000cf42:	4b53      	ldr	r3, [pc, #332]	; (1000d090 <at_ble_event_get+0x344>)
1000cf44:	429c      	cmp	r4, r3
1000cf46:	d100      	bne.n	1000cf4a <at_ble_event_get+0x1fe>
1000cf48:	e19b      	b.n	1000d282 <at_ble_event_get+0x536>
1000cf4a:	e0e7      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf4c:	4b51      	ldr	r3, [pc, #324]	; (1000d094 <at_ble_event_get+0x348>)
1000cf4e:	429c      	cmp	r4, r3
1000cf50:	d100      	bne.n	1000cf54 <at_ble_event_get+0x208>
1000cf52:	e1ad      	b.n	1000d2b0 <at_ble_event_get+0x564>
1000cf54:	4b50      	ldr	r3, [pc, #320]	; (1000d098 <at_ble_event_get+0x34c>)
1000cf56:	429c      	cmp	r4, r3
1000cf58:	d100      	bne.n	1000cf5c <at_ble_event_get+0x210>
1000cf5a:	e1b0      	b.n	1000d2be <at_ble_event_get+0x572>
1000cf5c:	e0de      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf5e:	4b4f      	ldr	r3, [pc, #316]	; (1000d09c <at_ble_event_get+0x350>)
1000cf60:	429c      	cmp	r4, r3
1000cf62:	d100      	bne.n	1000cf66 <at_ble_event_get+0x21a>
1000cf64:	e0e0      	b.n	1000d128 <at_ble_event_get+0x3dc>
1000cf66:	d809      	bhi.n	1000cf7c <at_ble_event_get+0x230>
1000cf68:	3b08      	subs	r3, #8
1000cf6a:	429c      	cmp	r4, r3
1000cf6c:	d100      	bne.n	1000cf70 <at_ble_event_get+0x224>
1000cf6e:	e0d7      	b.n	1000d120 <at_ble_event_get+0x3d4>
1000cf70:	4b4b      	ldr	r3, [pc, #300]	; (1000d0a0 <at_ble_event_get+0x354>)
1000cf72:	2639      	movs	r6, #57	; 0x39
1000cf74:	429c      	cmp	r4, r3
1000cf76:	d100      	bne.n	1000cf7a <at_ble_event_get+0x22e>
1000cf78:	e1dd      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000cf7a:	e0cf      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf7c:	23d1      	movs	r3, #209	; 0xd1
1000cf7e:	011b      	lsls	r3, r3, #4
1000cf80:	429c      	cmp	r4, r3
1000cf82:	d100      	bne.n	1000cf86 <at_ble_event_get+0x23a>
1000cf84:	e0d6      	b.n	1000d134 <at_ble_event_get+0x3e8>
1000cf86:	4b47      	ldr	r3, [pc, #284]	; (1000d0a4 <at_ble_event_get+0x358>)
1000cf88:	429c      	cmp	r4, r3
1000cf8a:	d100      	bne.n	1000cf8e <at_ble_event_get+0x242>
1000cf8c:	e0d8      	b.n	1000d140 <at_ble_event_get+0x3f4>
1000cf8e:	e0c5      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cf90:	4b45      	ldr	r3, [pc, #276]	; (1000d0a8 <at_ble_event_get+0x35c>)
1000cf92:	429c      	cmp	r4, r3
1000cf94:	d100      	bne.n	1000cf98 <at_ble_event_get+0x24c>
1000cf96:	e117      	b.n	1000d1c8 <at_ble_event_get+0x47c>
1000cf98:	d82e      	bhi.n	1000cff8 <at_ble_event_get+0x2ac>
1000cf9a:	4b44      	ldr	r3, [pc, #272]	; (1000d0ac <at_ble_event_get+0x360>)
1000cf9c:	429c      	cmp	r4, r3
1000cf9e:	d100      	bne.n	1000cfa2 <at_ble_event_get+0x256>
1000cfa0:	e13d      	b.n	1000d21e <at_ble_event_get+0x4d2>
1000cfa2:	d812      	bhi.n	1000cfca <at_ble_event_get+0x27e>
1000cfa4:	4b42      	ldr	r3, [pc, #264]	; (1000d0b0 <at_ble_event_get+0x364>)
1000cfa6:	429c      	cmp	r4, r3
1000cfa8:	d100      	bne.n	1000cfac <at_ble_event_get+0x260>
1000cfaa:	e0e8      	b.n	1000d17e <at_ble_event_get+0x432>
1000cfac:	d804      	bhi.n	1000cfb8 <at_ble_event_get+0x26c>
1000cfae:	3b03      	subs	r3, #3
1000cfb0:	429c      	cmp	r4, r3
1000cfb2:	d100      	bne.n	1000cfb6 <at_ble_event_get+0x26a>
1000cfb4:	e0d0      	b.n	1000d158 <at_ble_event_get+0x40c>
1000cfb6:	e0b1      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cfb8:	4b3e      	ldr	r3, [pc, #248]	; (1000d0b4 <at_ble_event_get+0x368>)
1000cfba:	429c      	cmp	r4, r3
1000cfbc:	d100      	bne.n	1000cfc0 <at_ble_event_get+0x274>
1000cfbe:	e0d0      	b.n	1000d162 <at_ble_event_get+0x416>
1000cfc0:	4b3d      	ldr	r3, [pc, #244]	; (1000d0b8 <at_ble_event_get+0x36c>)
1000cfc2:	429c      	cmp	r4, r3
1000cfc4:	d100      	bne.n	1000cfc8 <at_ble_event_get+0x27c>
1000cfc6:	e0f9      	b.n	1000d1bc <at_ble_event_get+0x470>
1000cfc8:	e0a8      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cfca:	4b3c      	ldr	r3, [pc, #240]	; (1000d0bc <at_ble_event_get+0x370>)
1000cfcc:	429c      	cmp	r4, r3
1000cfce:	d100      	bne.n	1000cfd2 <at_ble_event_get+0x286>
1000cfd0:	e0db      	b.n	1000d18a <at_ble_event_get+0x43e>
1000cfd2:	d808      	bhi.n	1000cfe6 <at_ble_event_get+0x29a>
1000cfd4:	4b3a      	ldr	r3, [pc, #232]	; (1000d0c0 <at_ble_event_get+0x374>)
1000cfd6:	429c      	cmp	r4, r3
1000cfd8:	d100      	bne.n	1000cfdc <at_ble_event_get+0x290>
1000cfda:	e11b      	b.n	1000d214 <at_ble_event_get+0x4c8>
1000cfdc:	4b39      	ldr	r3, [pc, #228]	; (1000d0c4 <at_ble_event_get+0x378>)
1000cfde:	429c      	cmp	r4, r3
1000cfe0:	d100      	bne.n	1000cfe4 <at_ble_event_get+0x298>
1000cfe2:	e0d8      	b.n	1000d196 <at_ble_event_get+0x44a>
1000cfe4:	e09a      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cfe6:	4b38      	ldr	r3, [pc, #224]	; (1000d0c8 <at_ble_event_get+0x37c>)
1000cfe8:	429c      	cmp	r4, r3
1000cfea:	d100      	bne.n	1000cfee <at_ble_event_get+0x2a2>
1000cfec:	e0d8      	b.n	1000d1a0 <at_ble_event_get+0x454>
1000cfee:	4b37      	ldr	r3, [pc, #220]	; (1000d0cc <at_ble_event_get+0x380>)
1000cff0:	429c      	cmp	r4, r3
1000cff2:	d100      	bne.n	1000cff6 <at_ble_event_get+0x2aa>
1000cff4:	e0db      	b.n	1000d1ae <at_ble_event_get+0x462>
1000cff6:	e091      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000cff8:	4b35      	ldr	r3, [pc, #212]	; (1000d0d0 <at_ble_event_get+0x384>)
1000cffa:	429c      	cmp	r4, r3
1000cffc:	d100      	bne.n	1000d000 <at_ble_event_get+0x2b4>
1000cffe:	e0f7      	b.n	1000d1f0 <at_ble_event_get+0x4a4>
1000d000:	d876      	bhi.n	1000d0f0 <at_ble_event_get+0x3a4>
1000d002:	4b34      	ldr	r3, [pc, #208]	; (1000d0d4 <at_ble_event_get+0x388>)
1000d004:	429c      	cmp	r4, r3
1000d006:	d100      	bne.n	1000d00a <at_ble_event_get+0x2be>
1000d008:	e0f8      	b.n	1000d1fc <at_ble_event_get+0x4b0>
1000d00a:	d869      	bhi.n	1000d0e0 <at_ble_event_get+0x394>
1000d00c:	4b32      	ldr	r3, [pc, #200]	; (1000d0d8 <at_ble_event_get+0x38c>)
1000d00e:	429c      	cmp	r4, r3
1000d010:	d100      	bne.n	1000d014 <at_ble_event_get+0x2c8>
1000d012:	e0e0      	b.n	1000d1d6 <at_ble_event_get+0x48a>
1000d014:	4b31      	ldr	r3, [pc, #196]	; (1000d0dc <at_ble_event_get+0x390>)
1000d016:	429c      	cmp	r4, r3
1000d018:	d100      	bne.n	1000d01c <at_ble_event_get+0x2d0>
1000d01a:	e0a9      	b.n	1000d170 <at_ble_event_get+0x424>
1000d01c:	e07e      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000d01e:	46c0      	nop			; (mov r8, r8)
1000d020:	1000def9 	.word	0x1000def9
1000d024:	10014e48 	.word	0x10014e48
1000d028:	1000b045 	.word	0x1000b045
1000d02c:	10014e4c 	.word	0x10014e4c
1000d030:	10014e44 	.word	0x10014e44
1000d034:	10014e34 	.word	0x10014e34
1000d038:	1000cc35 	.word	0x1000cc35
1000d03c:	100115d1 	.word	0x100115d1
1000d040:	0000ffff 	.word	0x0000ffff
1000d044:	0000fffe 	.word	0x0000fffe
1000d048:	1000b2d5 	.word	0x1000b2d5
1000d04c:	1000defb 	.word	0x1000defb
1000d050:	0000201e 	.word	0x0000201e
1000d054:	0000201d 	.word	0x0000201d
1000d058:	00000c03 	.word	0x00000c03
1000d05c:	0000201f 	.word	0x0000201f
1000d060:	00000d1c 	.word	0x00000d1c
1000d064:	00000c0c 	.word	0x00000c0c
1000d068:	00000c02 	.word	0x00000c02
1000d06c:	00000a02 	.word	0x00000a02
1000d070:	00000a03 	.word	0x00000a03
1000d074:	00000c06 	.word	0x00000c06
1000d078:	00000c04 	.word	0x00000c04
1000d07c:	00000c05 	.word	0x00000c05
1000d080:	00000c07 	.word	0x00000c07
1000d084:	00000c09 	.word	0x00000c09
1000d088:	00000c17 	.word	0x00000c17
1000d08c:	00000c12 	.word	0x00000c12
1000d090:	00000c0d 	.word	0x00000c0d
1000d094:	00000c13 	.word	0x00000c13
1000d098:	00000c15 	.word	0x00000c15
1000d09c:	00000d08 	.word	0x00000d08
1000d0a0:	00000d01 	.word	0x00000d01
1000d0a4:	00000d15 	.word	0x00000d15
1000d0a8:	00000e1b 	.word	0x00000e1b
1000d0ac:	00000e0f 	.word	0x00000e0f
1000d0b0:	00000e03 	.word	0x00000e03
1000d0b4:	00000e06 	.word	0x00000e06
1000d0b8:	00000e0a 	.word	0x00000e0a
1000d0bc:	00000e15 	.word	0x00000e15
1000d0c0:	00000e11 	.word	0x00000e11
1000d0c4:	00000e13 	.word	0x00000e13
1000d0c8:	00000e17 	.word	0x00000e17
1000d0cc:	00000e19 	.word	0x00000e19
1000d0d0:	00000e27 	.word	0x00000e27
1000d0d4:	00000e21 	.word	0x00000e21
1000d0d8:	00000e1c 	.word	0x00000e1c
1000d0dc:	00000e1d 	.word	0x00000e1d
1000d0e0:	4b9f      	ldr	r3, [pc, #636]	; (1000d360 <at_ble_event_get+0x614>)
1000d0e2:	429c      	cmp	r4, r3
1000d0e4:	d07e      	beq.n	1000d1e4 <at_ble_event_get+0x498>
1000d0e6:	4b9f      	ldr	r3, [pc, #636]	; (1000d364 <at_ble_event_get+0x618>)
1000d0e8:	429c      	cmp	r4, r3
1000d0ea:	d100      	bne.n	1000d0ee <at_ble_event_get+0x3a2>
1000d0ec:	e08c      	b.n	1000d208 <at_ble_event_get+0x4bc>
1000d0ee:	e015      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000d0f0:	4b9d      	ldr	r3, [pc, #628]	; (1000d368 <at_ble_event_get+0x61c>)
1000d0f2:	429c      	cmp	r4, r3
1000d0f4:	d100      	bne.n	1000d0f8 <at_ble_event_get+0x3ac>
1000d0f6:	e10a      	b.n	1000d30e <at_ble_event_get+0x5c2>
1000d0f8:	d808      	bhi.n	1000d10c <at_ble_event_get+0x3c0>
1000d0fa:	4b9c      	ldr	r3, [pc, #624]	; (1000d36c <at_ble_event_get+0x620>)
1000d0fc:	429c      	cmp	r4, r3
1000d0fe:	d100      	bne.n	1000d102 <at_ble_event_get+0x3b6>
1000d100:	e0f7      	b.n	1000d2f2 <at_ble_event_get+0x5a6>
1000d102:	4b9b      	ldr	r3, [pc, #620]	; (1000d370 <at_ble_event_get+0x624>)
1000d104:	429c      	cmp	r4, r3
1000d106:	d100      	bne.n	1000d10a <at_ble_event_get+0x3be>
1000d108:	e0fa      	b.n	1000d300 <at_ble_event_get+0x5b4>
1000d10a:	e007      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000d10c:	4b99      	ldr	r3, [pc, #612]	; (1000d374 <at_ble_event_get+0x628>)
1000d10e:	429c      	cmp	r4, r3
1000d110:	d100      	bne.n	1000d114 <at_ble_event_get+0x3c8>
1000d112:	e103      	b.n	1000d31c <at_ble_event_get+0x5d0>
1000d114:	4b98      	ldr	r3, [pc, #608]	; (1000d378 <at_ble_event_get+0x62c>)
1000d116:	429c      	cmp	r4, r3
1000d118:	d100      	bne.n	1000d11c <at_ble_event_get+0x3d0>
1000d11a:	e106      	b.n	1000d32a <at_ble_event_get+0x5de>
1000d11c:	2600      	movs	r6, #0
1000d11e:	e10a      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d120:	1c30      	adds	r0, r6, #0
1000d122:	1c29      	adds	r1, r5, #0
1000d124:	4b95      	ldr	r3, [pc, #596]	; (1000d37c <at_ble_event_get+0x630>)
1000d126:	e014      	b.n	1000d152 <at_ble_event_get+0x406>
1000d128:	1c30      	adds	r0, r6, #0
1000d12a:	1c29      	adds	r1, r5, #0
1000d12c:	4b94      	ldr	r3, [pc, #592]	; (1000d380 <at_ble_event_get+0x634>)
1000d12e:	4798      	blx	r3
1000d130:	2604      	movs	r6, #4
1000d132:	e100      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d134:	1c30      	adds	r0, r6, #0
1000d136:	1c29      	adds	r1, r5, #0
1000d138:	4b92      	ldr	r3, [pc, #584]	; (1000d384 <at_ble_event_get+0x638>)
1000d13a:	4798      	blx	r3
1000d13c:	2601      	movs	r6, #1
1000d13e:	e0fa      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d140:	1c30      	adds	r0, r6, #0
1000d142:	1c29      	adds	r1, r5, #0
1000d144:	4b90      	ldr	r3, [pc, #576]	; (1000d388 <at_ble_event_get+0x63c>)
1000d146:	4798      	blx	r3
1000d148:	260f      	movs	r6, #15
1000d14a:	e0f4      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d14c:	1c30      	adds	r0, r6, #0
1000d14e:	1c29      	adds	r1, r5, #0
1000d150:	4b8e      	ldr	r3, [pc, #568]	; (1000d38c <at_ble_event_get+0x640>)
1000d152:	4798      	blx	r3
1000d154:	1c06      	adds	r6, r0, #0
1000d156:	e0ee      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d158:	9801      	ldr	r0, [sp, #4]
1000d15a:	1c31      	adds	r1, r6, #0
1000d15c:	1c2a      	adds	r2, r5, #0
1000d15e:	4b8c      	ldr	r3, [pc, #560]	; (1000d390 <at_ble_event_get+0x644>)
1000d160:	e017      	b.n	1000d192 <at_ble_event_get+0x446>
1000d162:	1c31      	adds	r1, r6, #0
1000d164:	9801      	ldr	r0, [sp, #4]
1000d166:	1c2a      	adds	r2, r5, #0
1000d168:	4b8a      	ldr	r3, [pc, #552]	; (1000d394 <at_ble_event_get+0x648>)
1000d16a:	4798      	blx	r3
1000d16c:	2611      	movs	r6, #17
1000d16e:	e0e2      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d170:	1c31      	adds	r1, r6, #0
1000d172:	9801      	ldr	r0, [sp, #4]
1000d174:	1c2a      	adds	r2, r5, #0
1000d176:	4b88      	ldr	r3, [pc, #544]	; (1000d398 <at_ble_event_get+0x64c>)
1000d178:	4798      	blx	r3
1000d17a:	2612      	movs	r6, #18
1000d17c:	e0db      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d17e:	1c30      	adds	r0, r6, #0
1000d180:	1c29      	adds	r1, r5, #0
1000d182:	4b86      	ldr	r3, [pc, #536]	; (1000d39c <at_ble_event_get+0x650>)
1000d184:	4798      	blx	r3
1000d186:	2606      	movs	r6, #6
1000d188:	e0d5      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d18a:	1c31      	adds	r1, r6, #0
1000d18c:	1c2a      	adds	r2, r5, #0
1000d18e:	9801      	ldr	r0, [sp, #4]
1000d190:	4b83      	ldr	r3, [pc, #524]	; (1000d3a0 <at_ble_event_get+0x654>)
1000d192:	4798      	blx	r3
1000d194:	e7de      	b.n	1000d154 <at_ble_event_get+0x408>
1000d196:	9801      	ldr	r0, [sp, #4]
1000d198:	1c31      	adds	r1, r6, #0
1000d19a:	1c2a      	adds	r2, r5, #0
1000d19c:	4b81      	ldr	r3, [pc, #516]	; (1000d3a4 <at_ble_event_get+0x658>)
1000d19e:	e7f8      	b.n	1000d192 <at_ble_event_get+0x446>
1000d1a0:	1c31      	adds	r1, r6, #0
1000d1a2:	9801      	ldr	r0, [sp, #4]
1000d1a4:	1c2a      	adds	r2, r5, #0
1000d1a6:	4b80      	ldr	r3, [pc, #512]	; (1000d3a8 <at_ble_event_get+0x65c>)
1000d1a8:	4798      	blx	r3
1000d1aa:	260d      	movs	r6, #13
1000d1ac:	e0c3      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1ae:	1c31      	adds	r1, r6, #0
1000d1b0:	9801      	ldr	r0, [sp, #4]
1000d1b2:	1c2a      	adds	r2, r5, #0
1000d1b4:	4b7d      	ldr	r3, [pc, #500]	; (1000d3ac <at_ble_event_get+0x660>)
1000d1b6:	4798      	blx	r3
1000d1b8:	260e      	movs	r6, #14
1000d1ba:	e0bc      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1bc:	9801      	ldr	r0, [sp, #4]
1000d1be:	1c31      	adds	r1, r6, #0
1000d1c0:	1c2a      	adds	r2, r5, #0
1000d1c2:	4b7b      	ldr	r3, [pc, #492]	; (1000d3b0 <at_ble_event_get+0x664>)
1000d1c4:	4798      	blx	r3
1000d1c6:	e084      	b.n	1000d2d2 <at_ble_event_get+0x586>
1000d1c8:	1c31      	adds	r1, r6, #0
1000d1ca:	9801      	ldr	r0, [sp, #4]
1000d1cc:	1c2a      	adds	r2, r5, #0
1000d1ce:	4b79      	ldr	r3, [pc, #484]	; (1000d3b4 <at_ble_event_get+0x668>)
1000d1d0:	4798      	blx	r3
1000d1d2:	260b      	movs	r6, #11
1000d1d4:	e0af      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1d6:	1c31      	adds	r1, r6, #0
1000d1d8:	9801      	ldr	r0, [sp, #4]
1000d1da:	1c2a      	adds	r2, r5, #0
1000d1dc:	4b76      	ldr	r3, [pc, #472]	; (1000d3b8 <at_ble_event_get+0x66c>)
1000d1de:	4798      	blx	r3
1000d1e0:	2610      	movs	r6, #16
1000d1e2:	e0a8      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1e4:	1c30      	adds	r0, r6, #0
1000d1e6:	1c29      	adds	r1, r5, #0
1000d1e8:	4b74      	ldr	r3, [pc, #464]	; (1000d3bc <at_ble_event_get+0x670>)
1000d1ea:	4798      	blx	r3
1000d1ec:	2628      	movs	r6, #40	; 0x28
1000d1ee:	e0a2      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1f0:	1c30      	adds	r0, r6, #0
1000d1f2:	1c29      	adds	r1, r5, #0
1000d1f4:	4b72      	ldr	r3, [pc, #456]	; (1000d3c0 <at_ble_event_get+0x674>)
1000d1f6:	4798      	blx	r3
1000d1f8:	2629      	movs	r6, #41	; 0x29
1000d1fa:	e09c      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d1fc:	1c30      	adds	r0, r6, #0
1000d1fe:	1c29      	adds	r1, r5, #0
1000d200:	4b70      	ldr	r3, [pc, #448]	; (1000d3c4 <at_ble_event_get+0x678>)
1000d202:	4798      	blx	r3
1000d204:	2627      	movs	r6, #39	; 0x27
1000d206:	e096      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d208:	1c30      	adds	r0, r6, #0
1000d20a:	1c29      	adds	r1, r5, #0
1000d20c:	4b6e      	ldr	r3, [pc, #440]	; (1000d3c8 <at_ble_event_get+0x67c>)
1000d20e:	4798      	blx	r3
1000d210:	262a      	movs	r6, #42	; 0x2a
1000d212:	e090      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d214:	9801      	ldr	r0, [sp, #4]
1000d216:	1c31      	adds	r1, r6, #0
1000d218:	1c2a      	adds	r2, r5, #0
1000d21a:	4b6c      	ldr	r3, [pc, #432]	; (1000d3cc <at_ble_event_get+0x680>)
1000d21c:	e7b9      	b.n	1000d192 <at_ble_event_get+0x446>
1000d21e:	9801      	ldr	r0, [sp, #4]
1000d220:	1c31      	adds	r1, r6, #0
1000d222:	1c2a      	adds	r2, r5, #0
1000d224:	4b6a      	ldr	r3, [pc, #424]	; (1000d3d0 <at_ble_event_get+0x684>)
1000d226:	e7b4      	b.n	1000d192 <at_ble_event_get+0x446>
1000d228:	1c30      	adds	r0, r6, #0
1000d22a:	1c29      	adds	r1, r5, #0
1000d22c:	4b69      	ldr	r3, [pc, #420]	; (1000d3d4 <at_ble_event_get+0x688>)
1000d22e:	4798      	blx	r3
1000d230:	262b      	movs	r6, #43	; 0x2b
1000d232:	e080      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d234:	1c30      	adds	r0, r6, #0
1000d236:	1c29      	adds	r1, r5, #0
1000d238:	4b67      	ldr	r3, [pc, #412]	; (1000d3d8 <at_ble_event_get+0x68c>)
1000d23a:	4798      	blx	r3
1000d23c:	262c      	movs	r6, #44	; 0x2c
1000d23e:	e07a      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d240:	1c31      	adds	r1, r6, #0
1000d242:	9801      	ldr	r0, [sp, #4]
1000d244:	1c2a      	adds	r2, r5, #0
1000d246:	4b65      	ldr	r3, [pc, #404]	; (1000d3dc <at_ble_event_get+0x690>)
1000d248:	4798      	blx	r3
1000d24a:	2613      	movs	r6, #19
1000d24c:	e073      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d24e:	1c31      	adds	r1, r6, #0
1000d250:	9801      	ldr	r0, [sp, #4]
1000d252:	1c2a      	adds	r2, r5, #0
1000d254:	4b62      	ldr	r3, [pc, #392]	; (1000d3e0 <at_ble_event_get+0x694>)
1000d256:	4798      	blx	r3
1000d258:	2614      	movs	r6, #20
1000d25a:	e06c      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d25c:	1c31      	adds	r1, r6, #0
1000d25e:	9801      	ldr	r0, [sp, #4]
1000d260:	1c2a      	adds	r2, r5, #0
1000d262:	4b60      	ldr	r3, [pc, #384]	; (1000d3e4 <at_ble_event_get+0x698>)
1000d264:	4798      	blx	r3
1000d266:	2615      	movs	r6, #21
1000d268:	e065      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d26a:	1c31      	adds	r1, r6, #0
1000d26c:	9801      	ldr	r0, [sp, #4]
1000d26e:	1c2a      	adds	r2, r5, #0
1000d270:	4b5d      	ldr	r3, [pc, #372]	; (1000d3e8 <at_ble_event_get+0x69c>)
1000d272:	4798      	blx	r3
1000d274:	2616      	movs	r6, #22
1000d276:	e05e      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d278:	9801      	ldr	r0, [sp, #4]
1000d27a:	1c31      	adds	r1, r6, #0
1000d27c:	1c2a      	adds	r2, r5, #0
1000d27e:	4b5b      	ldr	r3, [pc, #364]	; (1000d3ec <at_ble_event_get+0x6a0>)
1000d280:	e787      	b.n	1000d192 <at_ble_event_get+0x446>
1000d282:	1c31      	adds	r1, r6, #0
1000d284:	9801      	ldr	r0, [sp, #4]
1000d286:	1c2a      	adds	r2, r5, #0
1000d288:	4b58      	ldr	r3, [pc, #352]	; (1000d3ec <at_ble_event_get+0x6a0>)
1000d28a:	4798      	blx	r3
1000d28c:	88a9      	ldrh	r1, [r5, #4]
1000d28e:	1c06      	adds	r6, r0, #0
1000d290:	4b57      	ldr	r3, [pc, #348]	; (1000d3f0 <at_ble_event_get+0x6a4>)
1000d292:	8828      	ldrh	r0, [r5, #0]
1000d294:	4798      	blx	r3
1000d296:	e04e      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d298:	1c31      	adds	r1, r6, #0
1000d29a:	9801      	ldr	r0, [sp, #4]
1000d29c:	1c2a      	adds	r2, r5, #0
1000d29e:	4b55      	ldr	r3, [pc, #340]	; (1000d3f4 <at_ble_event_get+0x6a8>)
1000d2a0:	4798      	blx	r3
1000d2a2:	2623      	movs	r6, #35	; 0x23
1000d2a4:	e047      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d2a6:	9801      	ldr	r0, [sp, #4]
1000d2a8:	1c31      	adds	r1, r6, #0
1000d2aa:	1c2a      	adds	r2, r5, #0
1000d2ac:	4b52      	ldr	r3, [pc, #328]	; (1000d3f8 <at_ble_event_get+0x6ac>)
1000d2ae:	e770      	b.n	1000d192 <at_ble_event_get+0x446>
1000d2b0:	9b01      	ldr	r3, [sp, #4]
1000d2b2:	1c30      	adds	r0, r6, #0
1000d2b4:	0a1f      	lsrs	r7, r3, #8
1000d2b6:	802f      	strh	r7, [r5, #0]
1000d2b8:	1c29      	adds	r1, r5, #0
1000d2ba:	4b50      	ldr	r3, [pc, #320]	; (1000d3fc <at_ble_event_get+0x6b0>)
1000d2bc:	e749      	b.n	1000d152 <at_ble_event_get+0x406>
1000d2be:	9801      	ldr	r0, [sp, #4]
1000d2c0:	1c31      	adds	r1, r6, #0
1000d2c2:	1c2a      	adds	r2, r5, #0
1000d2c4:	4b4e      	ldr	r3, [pc, #312]	; (1000d400 <at_ble_event_get+0x6b4>)
1000d2c6:	e764      	b.n	1000d192 <at_ble_event_get+0x446>
1000d2c8:	1c30      	adds	r0, r6, #0
1000d2ca:	1c29      	adds	r1, r5, #0
1000d2cc:	9a01      	ldr	r2, [sp, #4]
1000d2ce:	4b4d      	ldr	r3, [pc, #308]	; (1000d404 <at_ble_event_get+0x6b8>)
1000d2d0:	4798      	blx	r3
1000d2d2:	263b      	movs	r6, #59	; 0x3b
1000d2d4:	e02f      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d2d6:	1c31      	adds	r1, r6, #0
1000d2d8:	9801      	ldr	r0, [sp, #4]
1000d2da:	1c2a      	adds	r2, r5, #0
1000d2dc:	4b4a      	ldr	r3, [pc, #296]	; (1000d408 <at_ble_event_get+0x6bc>)
1000d2de:	4798      	blx	r3
1000d2e0:	2618      	movs	r6, #24
1000d2e2:	e028      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d2e4:	1c31      	adds	r1, r6, #0
1000d2e6:	9801      	ldr	r0, [sp, #4]
1000d2e8:	1c2a      	adds	r2, r5, #0
1000d2ea:	4b48      	ldr	r3, [pc, #288]	; (1000d40c <at_ble_event_get+0x6c0>)
1000d2ec:	4798      	blx	r3
1000d2ee:	2620      	movs	r6, #32
1000d2f0:	e021      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d2f2:	1c31      	adds	r1, r6, #0
1000d2f4:	9801      	ldr	r0, [sp, #4]
1000d2f6:	1c2a      	adds	r2, r5, #0
1000d2f8:	4b45      	ldr	r3, [pc, #276]	; (1000d410 <at_ble_event_get+0x6c4>)
1000d2fa:	4798      	blx	r3
1000d2fc:	2633      	movs	r6, #51	; 0x33
1000d2fe:	e01a      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d300:	1c31      	adds	r1, r6, #0
1000d302:	9801      	ldr	r0, [sp, #4]
1000d304:	1c2a      	adds	r2, r5, #0
1000d306:	4b43      	ldr	r3, [pc, #268]	; (1000d414 <at_ble_event_get+0x6c8>)
1000d308:	4798      	blx	r3
1000d30a:	2630      	movs	r6, #48	; 0x30
1000d30c:	e013      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d30e:	1c31      	adds	r1, r6, #0
1000d310:	9801      	ldr	r0, [sp, #4]
1000d312:	1c2a      	adds	r2, r5, #0
1000d314:	4b40      	ldr	r3, [pc, #256]	; (1000d418 <at_ble_event_get+0x6cc>)
1000d316:	4798      	blx	r3
1000d318:	2634      	movs	r6, #52	; 0x34
1000d31a:	e00c      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d31c:	1c31      	adds	r1, r6, #0
1000d31e:	9801      	ldr	r0, [sp, #4]
1000d320:	1c2a      	adds	r2, r5, #0
1000d322:	4b3e      	ldr	r3, [pc, #248]	; (1000d41c <at_ble_event_get+0x6d0>)
1000d324:	4798      	blx	r3
1000d326:	2635      	movs	r6, #53	; 0x35
1000d328:	e005      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d32a:	1c31      	adds	r1, r6, #0
1000d32c:	9801      	ldr	r0, [sp, #4]
1000d32e:	1c2a      	adds	r2, r5, #0
1000d330:	4b3b      	ldr	r3, [pc, #236]	; (1000d420 <at_ble_event_get+0x6d4>)
1000d332:	4798      	blx	r3
1000d334:	2632      	movs	r6, #50	; 0x32
1000d336:	9b03      	ldr	r3, [sp, #12]
1000d338:	701e      	strb	r6, [r3, #0]
1000d33a:	2300      	movs	r3, #0
1000d33c:	9302      	str	r3, [sp, #8]
1000d33e:	e57a      	b.n	1000ce36 <at_ble_event_get+0xea>
1000d340:	23d0      	movs	r3, #208	; 0xd0
1000d342:	e7fb      	b.n	1000d33c <at_ble_event_get+0x5f0>
1000d344:	9b01      	ldr	r3, [sp, #4]
1000d346:	9e02      	ldr	r6, [sp, #8]
1000d348:	2bbb      	cmp	r3, #187	; 0xbb
1000d34a:	d000      	beq.n	1000d34e <at_ble_event_get+0x602>
1000d34c:	e6e6      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000d34e:	e7f2      	b.n	1000d336 <at_ble_event_get+0x5ea>
1000d350:	9b02      	ldr	r3, [sp, #8]
1000d352:	2b00      	cmp	r3, #0
1000d354:	d000      	beq.n	1000d358 <at_ble_event_get+0x60c>
1000d356:	e56e      	b.n	1000ce36 <at_ble_event_get+0xea>
1000d358:	e6e0      	b.n	1000d11c <at_ble_event_get+0x3d0>
1000d35a:	9802      	ldr	r0, [sp, #8]
1000d35c:	b007      	add	sp, #28
1000d35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d360:	00000e22 	.word	0x00000e22
1000d364:	00000e25 	.word	0x00000e25
1000d368:	00001b05 	.word	0x00001b05
1000d36c:	00001b01 	.word	0x00001b01
1000d370:	00001b03 	.word	0x00001b03
1000d374:	00001b06 	.word	0x00001b06
1000d378:	00001b08 	.word	0x00001b08
1000d37c:	1000ed25 	.word	0x1000ed25
1000d380:	1000ed09 	.word	0x1000ed09
1000d384:	1000ee6d 	.word	0x1000ee6d
1000d388:	1000ef5d 	.word	0x1000ef5d
1000d38c:	1000ef81 	.word	0x1000ef81
1000d390:	1000e09d 	.word	0x1000e09d
1000d394:	1000e91d 	.word	0x1000e91d
1000d398:	1000e999 	.word	0x1000e999
1000d39c:	1000e355 	.word	0x1000e355
1000d3a0:	1000e3f1 	.word	0x1000e3f1
1000d3a4:	1000e4c9 	.word	0x1000e4c9
1000d3a8:	1000e751 	.word	0x1000e751
1000d3ac:	1000e7f1 	.word	0x1000e7f1
1000d3b0:	1000e8a9 	.word	0x1000e8a9
1000d3b4:	1000e8d1 	.word	0x1000e8d1
1000d3b8:	1000e8e7 	.word	0x1000e8e7
1000d3bc:	1000e9b1 	.word	0x1000e9b1
1000d3c0:	1000e9df 	.word	0x1000e9df
1000d3c4:	1000e9f5 	.word	0x1000e9f5
1000d3c8:	1000ea1f 	.word	0x1000ea1f
1000d3cc:	1000e84d 	.word	0x1000e84d
1000d3d0:	1000e877 	.word	0x1000e877
1000d3d4:	1000dadd 	.word	0x1000dadd
1000d3d8:	1000db09 	.word	0x1000db09
1000d3dc:	1000f129 	.word	0x1000f129
1000d3e0:	1000f165 	.word	0x1000f165
1000d3e4:	1000f1ad 	.word	0x1000f1ad
1000d3e8:	1000f1f1 	.word	0x1000f1f1
1000d3ec:	1000f225 	.word	0x1000f225
1000d3f0:	1000f0e9 	.word	0x1000f0e9
1000d3f4:	1000f2f1 	.word	0x1000f2f1
1000d3f8:	1000f279 	.word	0x1000f279
1000d3fc:	1000da35 	.word	0x1000da35
1000d400:	1000daa1 	.word	0x1000daa1
1000d404:	1000da65 	.word	0x1000da65
1000d408:	1000f301 	.word	0x1000f301
1000d40c:	1000f341 	.word	0x1000f341
1000d410:	1000f48d 	.word	0x1000f48d
1000d414:	1000f497 	.word	0x1000f497
1000d418:	1000f49d 	.word	0x1000f49d
1000d41c:	1000f4a3 	.word	0x1000f4a3
1000d420:	1000f4af 	.word	0x1000f4af

1000d424 <internal_event_flush>:
1000d424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d426:	490e      	ldr	r1, [pc, #56]	; (1000d460 <internal_event_flush+0x3c>)
1000d428:	2400      	movs	r4, #0
1000d42a:	680b      	ldr	r3, [r1, #0]
1000d42c:	1c0f      	adds	r7, r1, #0
1000d42e:	1c1e      	adds	r6, r3, #0
1000d430:	4a0c      	ldr	r2, [pc, #48]	; (1000d464 <internal_event_flush+0x40>)
1000d432:	6815      	ldr	r5, [r2, #0]
1000d434:	9201      	str	r2, [sp, #4]
1000d436:	2b00      	cmp	r3, #0
1000d438:	d00e      	beq.n	1000d458 <internal_event_flush+0x34>
1000d43a:	889a      	ldrh	r2, [r3, #4]
1000d43c:	6819      	ldr	r1, [r3, #0]
1000d43e:	4282      	cmp	r2, r0
1000d440:	d107      	bne.n	1000d452 <internal_event_flush+0x2e>
1000d442:	2c00      	cmp	r4, #0
1000d444:	d001      	beq.n	1000d44a <internal_event_flush+0x26>
1000d446:	6021      	str	r1, [r4, #0]
1000d448:	e000      	b.n	1000d44c <internal_event_flush+0x28>
1000d44a:	1c0e      	adds	r6, r1, #0
1000d44c:	601d      	str	r5, [r3, #0]
1000d44e:	1c1d      	adds	r5, r3, #0
1000d450:	1c23      	adds	r3, r4, #0
1000d452:	1c1c      	adds	r4, r3, #0
1000d454:	1c0b      	adds	r3, r1, #0
1000d456:	e7ee      	b.n	1000d436 <internal_event_flush+0x12>
1000d458:	9b01      	ldr	r3, [sp, #4]
1000d45a:	603e      	str	r6, [r7, #0]
1000d45c:	601d      	str	r5, [r3, #0]
1000d45e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d460:	10014e48 	.word	0x10014e48
1000d464:	10014e4c 	.word	0x10014e4c

1000d468 <internal_conn_flush>:
1000d468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d46a:	4a12      	ldr	r2, [pc, #72]	; (1000d4b4 <internal_conn_flush+0x4c>)
1000d46c:	9000      	str	r0, [sp, #0]
1000d46e:	6813      	ldr	r3, [r2, #0]
1000d470:	4811      	ldr	r0, [pc, #68]	; (1000d4b8 <internal_conn_flush+0x50>)
1000d472:	1c1f      	adds	r7, r3, #0
1000d474:	2100      	movs	r1, #0
1000d476:	4684      	mov	ip, r0
1000d478:	6804      	ldr	r4, [r0, #0]
1000d47a:	9201      	str	r2, [sp, #4]
1000d47c:	2b00      	cmp	r3, #0
1000d47e:	d014      	beq.n	1000d4aa <internal_conn_flush+0x42>
1000d480:	88d8      	ldrh	r0, [r3, #6]
1000d482:	9a00      	ldr	r2, [sp, #0]
1000d484:	681d      	ldr	r5, [r3, #0]
1000d486:	0a06      	lsrs	r6, r0, #8
1000d488:	4296      	cmp	r6, r2
1000d48a:	d10b      	bne.n	1000d4a4 <internal_conn_flush+0x3c>
1000d48c:	26fd      	movs	r6, #253	; 0xfd
1000d48e:	4006      	ands	r6, r0
1000d490:	2e0c      	cmp	r6, #12
1000d492:	d107      	bne.n	1000d4a4 <internal_conn_flush+0x3c>
1000d494:	2900      	cmp	r1, #0
1000d496:	d001      	beq.n	1000d49c <internal_conn_flush+0x34>
1000d498:	600d      	str	r5, [r1, #0]
1000d49a:	e000      	b.n	1000d49e <internal_conn_flush+0x36>
1000d49c:	1c2f      	adds	r7, r5, #0
1000d49e:	601c      	str	r4, [r3, #0]
1000d4a0:	1c1c      	adds	r4, r3, #0
1000d4a2:	1c0b      	adds	r3, r1, #0
1000d4a4:	1c19      	adds	r1, r3, #0
1000d4a6:	1c2b      	adds	r3, r5, #0
1000d4a8:	e7e8      	b.n	1000d47c <internal_conn_flush+0x14>
1000d4aa:	9b01      	ldr	r3, [sp, #4]
1000d4ac:	601f      	str	r7, [r3, #0]
1000d4ae:	4663      	mov	r3, ip
1000d4b0:	601c      	str	r4, [r3, #0]
1000d4b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d4b4:	10014e48 	.word	0x10014e48
1000d4b8:	10014e4c 	.word	0x10014e4c

1000d4bc <at_ble_device_name_set>:
1000d4bc:	b530      	push	{r4, r5, lr}
1000d4be:	23cf      	movs	r3, #207	; 0xcf
1000d4c0:	2800      	cmp	r0, #0
1000d4c2:	d010      	beq.n	1000d4e6 <at_ble_device_name_set+0x2a>
1000d4c4:	1e4a      	subs	r2, r1, #1
1000d4c6:	2a1f      	cmp	r2, #31
1000d4c8:	d80d      	bhi.n	1000d4e6 <at_ble_device_name_set+0x2a>
1000d4ca:	4a08      	ldr	r2, [pc, #32]	; (1000d4ec <at_ble_device_name_set+0x30>)
1000d4cc:	1c13      	adds	r3, r2, #0
1000d4ce:	33aa      	adds	r3, #170	; 0xaa
1000d4d0:	8019      	strh	r1, [r3, #0]
1000d4d2:	2300      	movs	r3, #0
1000d4d4:	1c1c      	adds	r4, r3, #0
1000d4d6:	5cc5      	ldrb	r5, [r0, r3]
1000d4d8:	34ac      	adds	r4, #172	; 0xac
1000d4da:	3301      	adds	r3, #1
1000d4dc:	5515      	strb	r5, [r2, r4]
1000d4de:	b2dc      	uxtb	r4, r3
1000d4e0:	428c      	cmp	r4, r1
1000d4e2:	d3f7      	bcc.n	1000d4d4 <at_ble_device_name_set+0x18>
1000d4e4:	2300      	movs	r3, #0
1000d4e6:	1c18      	adds	r0, r3, #0
1000d4e8:	bd30      	pop	{r4, r5, pc}
1000d4ea:	46c0      	nop			; (mov r8, r8)
1000d4ec:	10015c2e 	.word	0x10015c2e

1000d4f0 <at_ble_addr_get>:
1000d4f0:	b510      	push	{r4, lr}
1000d4f2:	1c04      	adds	r4, r0, #0
1000d4f4:	20cf      	movs	r0, #207	; 0xcf
1000d4f6:	2c00      	cmp	r4, #0
1000d4f8:	d006      	beq.n	1000d508 <at_ble_addr_get+0x18>
1000d4fa:	4b04      	ldr	r3, [pc, #16]	; (1000d50c <at_ble_addr_get+0x1c>)
1000d4fc:	38ce      	subs	r0, #206	; 0xce
1000d4fe:	1c21      	adds	r1, r4, #0
1000d500:	4798      	blx	r3
1000d502:	4b03      	ldr	r3, [pc, #12]	; (1000d510 <at_ble_addr_get+0x20>)
1000d504:	791b      	ldrb	r3, [r3, #4]
1000d506:	7023      	strb	r3, [r4, #0]
1000d508:	bd10      	pop	{r4, pc}
1000d50a:	46c0      	nop			; (mov r8, r8)
1000d50c:	1000ebb9 	.word	0x1000ebb9
1000d510:	10015c2e 	.word	0x10015c2e

1000d514 <at_ble_set_dev_config>:
1000d514:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d516:	7906      	ldrb	r6, [r0, #4]
1000d518:	b089      	sub	sp, #36	; 0x24
1000d51a:	25cf      	movs	r5, #207	; 0xcf
1000d51c:	2e03      	cmp	r6, #3
1000d51e:	d838      	bhi.n	1000d592 <at_ble_set_dev_config+0x7e>
1000d520:	7803      	ldrb	r3, [r0, #0]
1000d522:	3511      	adds	r5, #17
1000d524:	2b0f      	cmp	r3, #15
1000d526:	d834      	bhi.n	1000d592 <at_ble_set_dev_config+0x7e>
1000d528:	2380      	movs	r3, #128	; 0x80
1000d52a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d52c:	3d11      	subs	r5, #17
1000d52e:	009b      	lsls	r3, r3, #2
1000d530:	429f      	cmp	r7, r3
1000d532:	d82e      	bhi.n	1000d592 <at_ble_set_dev_config+0x7e>
1000d534:	7fc5      	ldrb	r5, [r0, #31]
1000d536:	7f83      	ldrb	r3, [r0, #30]
1000d538:	01ad      	lsls	r5, r5, #6
1000d53a:	015b      	lsls	r3, r3, #5
1000d53c:	431d      	orrs	r5, r3
1000d53e:	7ec3      	ldrb	r3, [r0, #27]
1000d540:	431d      	orrs	r5, r3
1000d542:	7f43      	ldrb	r3, [r0, #29]
1000d544:	011b      	lsls	r3, r3, #4
1000d546:	431d      	orrs	r5, r3
1000d548:	7f03      	ldrb	r3, [r0, #28]
1000d54a:	009b      	lsls	r3, r3, #2
1000d54c:	431d      	orrs	r5, r3
1000d54e:	4b12      	ldr	r3, [pc, #72]	; (1000d598 <at_ble_set_dev_config+0x84>)
1000d550:	b2ed      	uxtb	r5, r5
1000d552:	711e      	strb	r6, [r3, #4]
1000d554:	7903      	ldrb	r3, [r0, #4]
1000d556:	3b02      	subs	r3, #2
1000d558:	2b01      	cmp	r3, #1
1000d55a:	d801      	bhi.n	1000d560 <at_ble_set_dev_config+0x4c>
1000d55c:	2302      	movs	r3, #2
1000d55e:	7103      	strb	r3, [r0, #4]
1000d560:	1c04      	adds	r4, r0, #0
1000d562:	1c23      	adds	r3, r4, #0
1000d564:	330b      	adds	r3, #11
1000d566:	8861      	ldrh	r1, [r4, #2]
1000d568:	9307      	str	r3, [sp, #28]
1000d56a:	7923      	ldrb	r3, [r4, #4]
1000d56c:	7800      	ldrb	r0, [r0, #0]
1000d56e:	9300      	str	r3, [sp, #0]
1000d570:	9501      	str	r5, [sp, #4]
1000d572:	8c25      	ldrh	r5, [r4, #32]
1000d574:	1d62      	adds	r2, r4, #5
1000d576:	9502      	str	r5, [sp, #8]
1000d578:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d57a:	9b07      	ldr	r3, [sp, #28]
1000d57c:	9503      	str	r5, [sp, #12]
1000d57e:	9704      	str	r7, [sp, #16]
1000d580:	4d06      	ldr	r5, [pc, #24]	; (1000d59c <at_ble_set_dev_config+0x88>)
1000d582:	47a8      	blx	r5
1000d584:	7126      	strb	r6, [r4, #4]
1000d586:	1c05      	adds	r5, r0, #0
1000d588:	1c21      	adds	r1, r4, #0
1000d58a:	4803      	ldr	r0, [pc, #12]	; (1000d598 <at_ble_set_dev_config+0x84>)
1000d58c:	2226      	movs	r2, #38	; 0x26
1000d58e:	4b04      	ldr	r3, [pc, #16]	; (1000d5a0 <at_ble_set_dev_config+0x8c>)
1000d590:	4798      	blx	r3
1000d592:	1c28      	adds	r0, r5, #0
1000d594:	b009      	add	sp, #36	; 0x24
1000d596:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d598:	10015c2e 	.word	0x10015c2e
1000d59c:	1000eab1 	.word	0x1000eab1
1000d5a0:	100115bf 	.word	0x100115bf

1000d5a4 <at_ble_init>:
1000d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5a6:	b087      	sub	sp, #28
1000d5a8:	af03      	add	r7, sp, #12
1000d5aa:	4954      	ldr	r1, [pc, #336]	; (1000d6fc <at_ble_init+0x158>)
1000d5ac:	220b      	movs	r2, #11
1000d5ae:	4b54      	ldr	r3, [pc, #336]	; (1000d700 <at_ble_init+0x15c>)
1000d5b0:	1c04      	adds	r4, r0, #0
1000d5b2:	1c38      	adds	r0, r7, #0
1000d5b4:	4798      	blx	r3
1000d5b6:	2205      	movs	r2, #5
1000d5b8:	4b52      	ldr	r3, [pc, #328]	; (1000d704 <at_ble_init+0x160>)
1000d5ba:	2640      	movs	r6, #64	; 0x40
1000d5bc:	801a      	strh	r2, [r3, #0]
1000d5be:	2300      	movs	r3, #0
1000d5c0:	4a51      	ldr	r2, [pc, #324]	; (1000d708 <at_ble_init+0x164>)
1000d5c2:	6013      	str	r3, [r2, #0]
1000d5c4:	4a51      	ldr	r2, [pc, #324]	; (1000d70c <at_ble_init+0x168>)
1000d5c6:	7013      	strb	r3, [r2, #0]
1000d5c8:	4a51      	ldr	r2, [pc, #324]	; (1000d710 <at_ble_init+0x16c>)
1000d5ca:	7013      	strb	r3, [r2, #0]
1000d5cc:	4b51      	ldr	r3, [pc, #324]	; (1000d714 <at_ble_init+0x170>)
1000d5ce:	4798      	blx	r3
1000d5d0:	4b51      	ldr	r3, [pc, #324]	; (1000d718 <at_ble_init+0x174>)
1000d5d2:	4798      	blx	r3
1000d5d4:	4b51      	ldr	r3, [pc, #324]	; (1000d71c <at_ble_init+0x178>)
1000d5d6:	4798      	blx	r3
1000d5d8:	4b51      	ldr	r3, [pc, #324]	; (1000d720 <at_ble_init+0x17c>)
1000d5da:	4798      	blx	r3
1000d5dc:	2c00      	cmp	r4, #0
1000d5de:	d100      	bne.n	1000d5e2 <at_ble_init+0x3e>
1000d5e0:	e089      	b.n	1000d6f6 <at_ble_init+0x152>
1000d5e2:	68a3      	ldr	r3, [r4, #8]
1000d5e4:	2b00      	cmp	r3, #0
1000d5e6:	d100      	bne.n	1000d5ea <at_ble_init+0x46>
1000d5e8:	e085      	b.n	1000d6f6 <at_ble_init+0x152>
1000d5ea:	6923      	ldr	r3, [r4, #16]
1000d5ec:	2b00      	cmp	r3, #0
1000d5ee:	d100      	bne.n	1000d5f2 <at_ble_init+0x4e>
1000d5f0:	e081      	b.n	1000d6f6 <at_ble_init+0x152>
1000d5f2:	6820      	ldr	r0, [r4, #0]
1000d5f4:	2800      	cmp	r0, #0
1000d5f6:	d102      	bne.n	1000d5fe <at_ble_init+0x5a>
1000d5f8:	6863      	ldr	r3, [r4, #4]
1000d5fa:	2b00      	cmp	r3, #0
1000d5fc:	d17b      	bne.n	1000d6f6 <at_ble_init+0x152>
1000d5fe:	4b49      	ldr	r3, [pc, #292]	; (1000d724 <at_ble_init+0x180>)
1000d600:	6861      	ldr	r1, [r4, #4]
1000d602:	4798      	blx	r3
1000d604:	4b48      	ldr	r3, [pc, #288]	; (1000d728 <at_ble_init+0x184>)
1000d606:	4798      	blx	r3
1000d608:	2801      	cmp	r0, #1
1000d60a:	d901      	bls.n	1000d610 <at_ble_init+0x6c>
1000d60c:	26e2      	movs	r6, #226	; 0xe2
1000d60e:	e072      	b.n	1000d6f6 <at_ble_init+0x152>
1000d610:	4846      	ldr	r0, [pc, #280]	; (1000d72c <at_ble_init+0x188>)
1000d612:	4b47      	ldr	r3, [pc, #284]	; (1000d730 <at_ble_init+0x18c>)
1000d614:	4798      	blx	r3
1000d616:	2800      	cmp	r0, #0
1000d618:	d1f8      	bne.n	1000d60c <at_ble_init+0x68>
1000d61a:	1c20      	adds	r0, r4, #0
1000d61c:	4b45      	ldr	r3, [pc, #276]	; (1000d734 <at_ble_init+0x190>)
1000d61e:	4798      	blx	r3
1000d620:	68e0      	ldr	r0, [r4, #12]
1000d622:	68a1      	ldr	r1, [r4, #8]
1000d624:	4b44      	ldr	r3, [pc, #272]	; (1000d738 <at_ble_init+0x194>)
1000d626:	4798      	blx	r3
1000d628:	466b      	mov	r3, sp
1000d62a:	2201      	movs	r2, #1
1000d62c:	1cdc      	adds	r4, r3, #3
1000d62e:	1c20      	adds	r0, r4, #0
1000d630:	a901      	add	r1, sp, #4
1000d632:	4252      	negs	r2, r2
1000d634:	4b41      	ldr	r3, [pc, #260]	; (1000d73c <at_ble_init+0x198>)
1000d636:	4798      	blx	r3
1000d638:	2800      	cmp	r0, #0
1000d63a:	d102      	bne.n	1000d642 <at_ble_init+0x9e>
1000d63c:	7823      	ldrb	r3, [r4, #0]
1000d63e:	2b39      	cmp	r3, #57	; 0x39
1000d640:	d1f2      	bne.n	1000d628 <at_ble_init+0x84>
1000d642:	4b3f      	ldr	r3, [pc, #252]	; (1000d740 <at_ble_init+0x19c>)
1000d644:	4798      	blx	r3
1000d646:	1e06      	subs	r6, r0, #0
1000d648:	d155      	bne.n	1000d6f6 <at_ble_init+0x152>
1000d64a:	1c03      	adds	r3, r0, #0
1000d64c:	2101      	movs	r1, #1
1000d64e:	4a3d      	ldr	r2, [pc, #244]	; (1000d744 <at_ble_init+0x1a0>)
1000d650:	4249      	negs	r1, r1
1000d652:	189a      	adds	r2, r3, r2
1000d654:	3312      	adds	r3, #18
1000d656:	8151      	strh	r1, [r2, #10]
1000d658:	2b90      	cmp	r3, #144	; 0x90
1000d65a:	d1f7      	bne.n	1000d64c <at_ble_init+0xa8>
1000d65c:	4c3a      	ldr	r4, [pc, #232]	; (1000d748 <at_ble_init+0x1a4>)
1000d65e:	3b81      	subs	r3, #129	; 0x81
1000d660:	7023      	strb	r3, [r4, #0]
1000d662:	4b3a      	ldr	r3, [pc, #232]	; (1000d74c <at_ble_init+0x1a8>)
1000d664:	4a3a      	ldr	r2, [pc, #232]	; (1000d750 <at_ble_init+0x1ac>)
1000d666:	8063      	strh	r3, [r4, #2]
1000d668:	2300      	movs	r3, #0
1000d66a:	7123      	strb	r3, [r4, #4]
1000d66c:	3301      	adds	r3, #1
1000d66e:	1e58      	subs	r0, r3, #1
1000d670:	0119      	lsls	r1, r3, #4
1000d672:	4301      	orrs	r1, r0
1000d674:	3302      	adds	r3, #2
1000d676:	7011      	strb	r1, [r2, #0]
1000d678:	3201      	adds	r2, #1
1000d67a:	2b21      	cmp	r3, #33	; 0x21
1000d67c:	d1f7      	bne.n	1000d66e <at_ble_init+0xca>
1000d67e:	33e0      	adds	r3, #224	; 0xe0
1000d680:	33ff      	adds	r3, #255	; 0xff
1000d682:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d684:	1c23      	adds	r3, r4, #0
1000d686:	2500      	movs	r5, #0
1000d688:	3373      	adds	r3, #115	; 0x73
1000d68a:	701d      	strb	r5, [r3, #0]
1000d68c:	1c23      	adds	r3, r4, #0
1000d68e:	3372      	adds	r3, #114	; 0x72
1000d690:	701d      	strb	r5, [r3, #0]
1000d692:	1c23      	adds	r3, r4, #0
1000d694:	3376      	adds	r3, #118	; 0x76
1000d696:	701d      	strb	r5, [r3, #0]
1000d698:	1c23      	adds	r3, r4, #0
1000d69a:	33cc      	adds	r3, #204	; 0xcc
1000d69c:	801d      	strh	r5, [r3, #0]
1000d69e:	1c22      	adds	r2, r4, #0
1000d6a0:	23a0      	movs	r3, #160	; 0xa0
1000d6a2:	32d0      	adds	r2, #208	; 0xd0
1000d6a4:	005b      	lsls	r3, r3, #1
1000d6a6:	8013      	strh	r3, [r2, #0]
1000d6a8:	1c22      	adds	r2, r4, #0
1000d6aa:	32ce      	adds	r2, #206	; 0xce
1000d6ac:	8013      	strh	r3, [r2, #0]
1000d6ae:	1c23      	adds	r3, r4, #0
1000d6b0:	33d2      	adds	r3, #210	; 0xd2
1000d6b2:	801d      	strh	r5, [r3, #0]
1000d6b4:	22fa      	movs	r2, #250	; 0xfa
1000d6b6:	1c23      	adds	r3, r4, #0
1000d6b8:	0052      	lsls	r2, r2, #1
1000d6ba:	33d4      	adds	r3, #212	; 0xd4
1000d6bc:	801a      	strh	r2, [r3, #0]
1000d6be:	1c23      	adds	r3, r4, #0
1000d6c0:	33d6      	adds	r3, #214	; 0xd6
1000d6c2:	701d      	strb	r5, [r3, #0]
1000d6c4:	1c20      	adds	r0, r4, #0
1000d6c6:	4b23      	ldr	r3, [pc, #140]	; (1000d754 <at_ble_init+0x1b0>)
1000d6c8:	76e5      	strb	r5, [r4, #27]
1000d6ca:	7725      	strb	r5, [r4, #28]
1000d6cc:	7765      	strb	r5, [r4, #29]
1000d6ce:	77a5      	strb	r5, [r4, #30]
1000d6d0:	77e5      	strb	r5, [r4, #31]
1000d6d2:	8425      	strh	r5, [r4, #32]
1000d6d4:	8465      	strh	r5, [r4, #34]	; 0x22
1000d6d6:	4798      	blx	r3
1000d6d8:	1c23      	adds	r3, r4, #0
1000d6da:	2207      	movs	r2, #7
1000d6dc:	3374      	adds	r3, #116	; 0x74
1000d6de:	701a      	strb	r2, [r3, #0]
1000d6e0:	1c23      	adds	r3, r4, #0
1000d6e2:	3204      	adds	r2, #4
1000d6e4:	33aa      	adds	r3, #170	; 0xaa
1000d6e6:	801a      	strh	r2, [r3, #0]
1000d6e8:	1c2b      	adds	r3, r5, #0
1000d6ea:	5d7a      	ldrb	r2, [r7, r5]
1000d6ec:	33ac      	adds	r3, #172	; 0xac
1000d6ee:	3501      	adds	r5, #1
1000d6f0:	54e2      	strb	r2, [r4, r3]
1000d6f2:	2d0b      	cmp	r5, #11
1000d6f4:	d1f8      	bne.n	1000d6e8 <at_ble_init+0x144>
1000d6f6:	1c30      	adds	r0, r6, #0
1000d6f8:	b007      	add	sp, #28
1000d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6fc:	1001366c 	.word	0x1001366c
1000d700:	100115bf 	.word	0x100115bf
1000d704:	10015b9c 	.word	0x10015b9c
1000d708:	10014ef8 	.word	0x10014ef8
1000d70c:	10014e58 	.word	0x10014e58
1000d710:	10013884 	.word	0x10013884
1000d714:	1000f351 	.word	0x1000f351
1000d718:	1000d835 	.word	0x1000d835
1000d71c:	1000d8b1 	.word	0x1000d8b1
1000d720:	1000dad1 	.word	0x1000dad1
1000d724:	1000d8ed 	.word	0x1000d8ed
1000d728:	1000ad29 	.word	0x1000ad29
1000d72c:	1000ddd1 	.word	0x1000ddd1
1000d730:	1000af99 	.word	0x1000af99
1000d734:	1000de79 	.word	0x1000de79
1000d738:	1000cc91 	.word	0x1000cc91
1000d73c:	1000cd4d 	.word	0x1000cd4d
1000d740:	1000ea41 	.word	0x1000ea41
1000d744:	10015b9e 	.word	0x10015b9e
1000d748:	10015c2e 	.word	0x10015c2e
1000d74c:	00003a98 	.word	0x00003a98
1000d750:	10015c39 	.word	0x10015c39
1000d754:	1000d515 	.word	0x1000d515

1000d758 <at_ble_addr_set>:
1000d758:	b538      	push	{r3, r4, r5, lr}
1000d75a:	1c45      	adds	r5, r0, #1
1000d75c:	1c03      	adds	r3, r0, #0
1000d75e:	20cf      	movs	r0, #207	; 0xcf
1000d760:	2d00      	cmp	r5, #0
1000d762:	d018      	beq.n	1000d796 <at_ble_addr_set+0x3e>
1000d764:	781a      	ldrb	r2, [r3, #0]
1000d766:	2a03      	cmp	r2, #3
1000d768:	d815      	bhi.n	1000d796 <at_ble_addr_set+0x3e>
1000d76a:	2a01      	cmp	r2, #1
1000d76c:	d102      	bne.n	1000d774 <at_ble_addr_set+0x1c>
1000d76e:	785a      	ldrb	r2, [r3, #1]
1000d770:	2a00      	cmp	r2, #0
1000d772:	d010      	beq.n	1000d796 <at_ble_addr_set+0x3e>
1000d774:	1c1c      	adds	r4, r3, #0
1000d776:	1c29      	adds	r1, r5, #0
1000d778:	2206      	movs	r2, #6
1000d77a:	4b07      	ldr	r3, [pc, #28]	; (1000d798 <at_ble_addr_set+0x40>)
1000d77c:	4807      	ldr	r0, [pc, #28]	; (1000d79c <at_ble_addr_set+0x44>)
1000d77e:	4798      	blx	r3
1000d780:	7823      	ldrb	r3, [r4, #0]
1000d782:	4807      	ldr	r0, [pc, #28]	; (1000d7a0 <at_ble_addr_set+0x48>)
1000d784:	7103      	strb	r3, [r0, #4]
1000d786:	4b07      	ldr	r3, [pc, #28]	; (1000d7a4 <at_ble_addr_set+0x4c>)
1000d788:	4798      	blx	r3
1000d78a:	7823      	ldrb	r3, [r4, #0]
1000d78c:	2b00      	cmp	r3, #0
1000d78e:	d102      	bne.n	1000d796 <at_ble_addr_set+0x3e>
1000d790:	1c28      	adds	r0, r5, #0
1000d792:	4b05      	ldr	r3, [pc, #20]	; (1000d7a8 <at_ble_addr_set+0x50>)
1000d794:	4798      	blx	r3
1000d796:	bd38      	pop	{r3, r4, r5, pc}
1000d798:	100115bf 	.word	0x100115bf
1000d79c:	10015c33 	.word	0x10015c33
1000d7a0:	10015c2e 	.word	0x10015c2e
1000d7a4:	1000d515 	.word	0x1000d515
1000d7a8:	1000defd 	.word	0x1000defd

1000d7ac <at_ble_scan_stop>:
1000d7ac:	b510      	push	{r4, lr}
1000d7ae:	4b05      	ldr	r3, [pc, #20]	; (1000d7c4 <at_ble_scan_stop+0x18>)
1000d7b0:	4798      	blx	r3
1000d7b2:	1e04      	subs	r4, r0, #0
1000d7b4:	d103      	bne.n	1000d7be <at_ble_scan_stop+0x12>
1000d7b6:	20d1      	movs	r0, #209	; 0xd1
1000d7b8:	4b03      	ldr	r3, [pc, #12]	; (1000d7c8 <at_ble_scan_stop+0x1c>)
1000d7ba:	0100      	lsls	r0, r0, #4
1000d7bc:	4798      	blx	r3
1000d7be:	1c20      	adds	r0, r4, #0
1000d7c0:	bd10      	pop	{r4, pc}
1000d7c2:	46c0      	nop			; (mov r8, r8)
1000d7c4:	1000ec99 	.word	0x1000ec99
1000d7c8:	1000d425 	.word	0x1000d425

1000d7cc <at_ble_disconnect>:
1000d7cc:	b538      	push	{r3, r4, r5, lr}
1000d7ce:	1c04      	adds	r4, r0, #0
1000d7d0:	4b04      	ldr	r3, [pc, #16]	; (1000d7e4 <at_ble_disconnect+0x18>)
1000d7d2:	1c08      	adds	r0, r1, #0
1000d7d4:	1c21      	adds	r1, r4, #0
1000d7d6:	4798      	blx	r3
1000d7d8:	1c05      	adds	r5, r0, #0
1000d7da:	4b03      	ldr	r3, [pc, #12]	; (1000d7e8 <at_ble_disconnect+0x1c>)
1000d7dc:	1c20      	adds	r0, r4, #0
1000d7de:	4798      	blx	r3
1000d7e0:	1c28      	adds	r0, r5, #0
1000d7e2:	bd38      	pop	{r3, r4, r5, pc}
1000d7e4:	1000e311 	.word	0x1000e311
1000d7e8:	1000d469 	.word	0x1000d469

1000d7ec <at_ble_conn_update_reply>:
1000d7ec:	b510      	push	{r4, lr}
1000d7ee:	4c01      	ldr	r4, [pc, #4]	; (1000d7f4 <at_ble_conn_update_reply+0x8>)
1000d7f0:	47a0      	blx	r4
1000d7f2:	bd10      	pop	{r4, pc}
1000d7f4:	1000e801 	.word	0x1000e801

1000d7f8 <at_ble_random_address_resolve>:
1000d7f8:	b510      	push	{r4, lr}
1000d7fa:	23cf      	movs	r3, #207	; 0xcf
1000d7fc:	2800      	cmp	r0, #0
1000d7fe:	d00a      	beq.n	1000d816 <at_ble_random_address_resolve+0x1e>
1000d800:	2900      	cmp	r1, #0
1000d802:	d008      	beq.n	1000d816 <at_ble_random_address_resolve+0x1e>
1000d804:	2a00      	cmp	r2, #0
1000d806:	d006      	beq.n	1000d816 <at_ble_random_address_resolve+0x1e>
1000d808:	780c      	ldrb	r4, [r1, #0]
1000d80a:	2c02      	cmp	r4, #2
1000d80c:	d103      	bne.n	1000d816 <at_ble_random_address_resolve+0x1e>
1000d80e:	4b03      	ldr	r3, [pc, #12]	; (1000d81c <at_ble_random_address_resolve+0x24>)
1000d810:	3101      	adds	r1, #1
1000d812:	4798      	blx	r3
1000d814:	2300      	movs	r3, #0
1000d816:	1c18      	adds	r0, r3, #0
1000d818:	bd10      	pop	{r4, pc}
1000d81a:	46c0      	nop			; (mov r8, r8)
1000d81c:	1000eef5 	.word	0x1000eef5

1000d820 <at_ble_uuid_len2type>:
1000d820:	1e83      	subs	r3, r0, #2
1000d822:	b2db      	uxtb	r3, r3
1000d824:	2003      	movs	r0, #3
1000d826:	2b0e      	cmp	r3, #14
1000d828:	d801      	bhi.n	1000d82e <at_ble_uuid_len2type+0xe>
1000d82a:	4a01      	ldr	r2, [pc, #4]	; (1000d830 <at_ble_uuid_len2type+0x10>)
1000d82c:	5cd0      	ldrb	r0, [r2, r3]
1000d82e:	4770      	bx	lr
1000d830:	10013677 	.word	0x10013677

1000d834 <init_gatt_client_module>:
1000d834:	2200      	movs	r2, #0
1000d836:	4b01      	ldr	r3, [pc, #4]	; (1000d83c <init_gatt_client_module+0x8>)
1000d838:	801a      	strh	r2, [r3, #0]
1000d83a:	4770      	bx	lr
1000d83c:	10014e50 	.word	0x10014e50

1000d840 <db_searchATT>:
1000d840:	b570      	push	{r4, r5, r6, lr}
1000d842:	1c05      	adds	r5, r0, #0
1000d844:	2400      	movs	r4, #0
1000d846:	4b0c      	ldr	r3, [pc, #48]	; (1000d878 <db_searchATT+0x38>)
1000d848:	6819      	ldr	r1, [r3, #0]
1000d84a:	4b0c      	ldr	r3, [pc, #48]	; (1000d87c <db_searchATT+0x3c>)
1000d84c:	681e      	ldr	r6, [r3, #0]
1000d84e:	428c      	cmp	r4, r1
1000d850:	dc10      	bgt.n	1000d874 <db_searchATT+0x34>
1000d852:	200c      	movs	r0, #12
1000d854:	1863      	adds	r3, r4, r1
1000d856:	0fda      	lsrs	r2, r3, #31
1000d858:	18d3      	adds	r3, r2, r3
1000d85a:	1c02      	adds	r2, r0, #0
1000d85c:	105b      	asrs	r3, r3, #1
1000d85e:	435a      	muls	r2, r3
1000d860:	18b0      	adds	r0, r6, r2
1000d862:	8802      	ldrh	r2, [r0, #0]
1000d864:	42aa      	cmp	r2, r5
1000d866:	d201      	bcs.n	1000d86c <db_searchATT+0x2c>
1000d868:	1e59      	subs	r1, r3, #1
1000d86a:	e7f0      	b.n	1000d84e <db_searchATT+0xe>
1000d86c:	42aa      	cmp	r2, r5
1000d86e:	d902      	bls.n	1000d876 <db_searchATT+0x36>
1000d870:	1c5c      	adds	r4, r3, #1
1000d872:	e7ec      	b.n	1000d84e <db_searchATT+0xe>
1000d874:	2000      	movs	r0, #0
1000d876:	bd70      	pop	{r4, r5, r6, pc}
1000d878:	10014e64 	.word	0x10014e64
1000d87c:	10014e5c 	.word	0x10014e5c

1000d880 <at_ble_read_authorize_reply.part.1>:
1000d880:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d882:	4b09      	ldr	r3, [pc, #36]	; (1000d8a8 <at_ble_read_authorize_reply.part.1+0x28>)
1000d884:	1c05      	adds	r5, r0, #0
1000d886:	1c08      	adds	r0, r1, #0
1000d888:	1c0c      	adds	r4, r1, #0
1000d88a:	4798      	blx	r3
1000d88c:	2800      	cmp	r0, #0
1000d88e:	d009      	beq.n	1000d8a4 <at_ble_read_authorize_reply.part.1+0x24>
1000d890:	6882      	ldr	r2, [r0, #8]
1000d892:	2a00      	cmp	r2, #0
1000d894:	d006      	beq.n	1000d8a4 <at_ble_read_authorize_reply.part.1+0x24>
1000d896:	8883      	ldrh	r3, [r0, #4]
1000d898:	1c29      	adds	r1, r5, #0
1000d89a:	9200      	str	r2, [sp, #0]
1000d89c:	1c20      	adds	r0, r4, #0
1000d89e:	2200      	movs	r2, #0
1000d8a0:	4c02      	ldr	r4, [pc, #8]	; (1000d8ac <at_ble_read_authorize_reply.part.1+0x2c>)
1000d8a2:	47a0      	blx	r4
1000d8a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d8a6:	46c0      	nop			; (mov r8, r8)
1000d8a8:	1000d841 	.word	0x1000d841
1000d8ac:	1000eff1 	.word	0x1000eff1

1000d8b0 <initi_gatt_server_module>:
1000d8b0:	2300      	movs	r3, #0
1000d8b2:	4a07      	ldr	r2, [pc, #28]	; (1000d8d0 <initi_gatt_server_module+0x20>)
1000d8b4:	7013      	strb	r3, [r2, #0]
1000d8b6:	4a07      	ldr	r2, [pc, #28]	; (1000d8d4 <initi_gatt_server_module+0x24>)
1000d8b8:	6013      	str	r3, [r2, #0]
1000d8ba:	4a07      	ldr	r2, [pc, #28]	; (1000d8d8 <initi_gatt_server_module+0x28>)
1000d8bc:	6013      	str	r3, [r2, #0]
1000d8be:	4a07      	ldr	r2, [pc, #28]	; (1000d8dc <initi_gatt_server_module+0x2c>)
1000d8c0:	6013      	str	r3, [r2, #0]
1000d8c2:	4a07      	ldr	r2, [pc, #28]	; (1000d8e0 <initi_gatt_server_module+0x30>)
1000d8c4:	6013      	str	r3, [r2, #0]
1000d8c6:	4a07      	ldr	r2, [pc, #28]	; (1000d8e4 <initi_gatt_server_module+0x34>)
1000d8c8:	6013      	str	r3, [r2, #0]
1000d8ca:	4a07      	ldr	r2, [pc, #28]	; (1000d8e8 <initi_gatt_server_module+0x38>)
1000d8cc:	6013      	str	r3, [r2, #0]
1000d8ce:	4770      	bx	lr
1000d8d0:	10014e58 	.word	0x10014e58
1000d8d4:	10014e68 	.word	0x10014e68
1000d8d8:	10014e64 	.word	0x10014e64
1000d8dc:	10014e54 	.word	0x10014e54
1000d8e0:	10014e60 	.word	0x10014e60
1000d8e4:	10014e5c 	.word	0x10014e5c
1000d8e8:	10014e6c 	.word	0x10014e6c

1000d8ec <db_init>:
1000d8ec:	4b0a      	ldr	r3, [pc, #40]	; (1000d918 <db_init+0x2c>)
1000d8ee:	4a0b      	ldr	r2, [pc, #44]	; (1000d91c <db_init+0x30>)
1000d8f0:	6018      	str	r0, [r3, #0]
1000d8f2:	084b      	lsrs	r3, r1, #1
1000d8f4:	6013      	str	r3, [r2, #0]
1000d8f6:	4a0a      	ldr	r2, [pc, #40]	; (1000d920 <db_init+0x34>)
1000d8f8:	18c3      	adds	r3, r0, r3
1000d8fa:	6013      	str	r3, [r2, #0]
1000d8fc:	4a09      	ldr	r2, [pc, #36]	; (1000d924 <db_init+0x38>)
1000d8fe:	1841      	adds	r1, r0, r1
1000d900:	6013      	str	r3, [r2, #0]
1000d902:	2303      	movs	r3, #3
1000d904:	2200      	movs	r2, #0
1000d906:	3103      	adds	r1, #3
1000d908:	4399      	bics	r1, r3
1000d90a:	4b07      	ldr	r3, [pc, #28]	; (1000d928 <db_init+0x3c>)
1000d90c:	3904      	subs	r1, #4
1000d90e:	6019      	str	r1, [r3, #0]
1000d910:	4b06      	ldr	r3, [pc, #24]	; (1000d92c <db_init+0x40>)
1000d912:	601a      	str	r2, [r3, #0]
1000d914:	4770      	bx	lr
1000d916:	46c0      	nop			; (mov r8, r8)
1000d918:	10014e6c 	.word	0x10014e6c
1000d91c:	10014e68 	.word	0x10014e68
1000d920:	10014e54 	.word	0x10014e54
1000d924:	10014e60 	.word	0x10014e60
1000d928:	10014e5c 	.word	0x10014e5c
1000d92c:	10014e64 	.word	0x10014e64

1000d930 <at_ble_characteristic_value_set>:
1000d930:	b570      	push	{r4, r5, r6, lr}
1000d932:	4b0b      	ldr	r3, [pc, #44]	; (1000d960 <at_ble_characteristic_value_set+0x30>)
1000d934:	1c06      	adds	r6, r0, #0
1000d936:	1c0c      	adds	r4, r1, #0
1000d938:	1c15      	adds	r5, r2, #0
1000d93a:	4798      	blx	r3
1000d93c:	2800      	cmp	r0, #0
1000d93e:	d008      	beq.n	1000d952 <at_ble_characteristic_value_set+0x22>
1000d940:	6880      	ldr	r0, [r0, #8]
1000d942:	2800      	cmp	r0, #0
1000d944:	d005      	beq.n	1000d952 <at_ble_characteristic_value_set+0x22>
1000d946:	1c21      	adds	r1, r4, #0
1000d948:	1c2a      	adds	r2, r5, #0
1000d94a:	4b06      	ldr	r3, [pc, #24]	; (1000d964 <at_ble_characteristic_value_set+0x34>)
1000d94c:	4798      	blx	r3
1000d94e:	2000      	movs	r0, #0
1000d950:	e004      	b.n	1000d95c <at_ble_characteristic_value_set+0x2c>
1000d952:	1c30      	adds	r0, r6, #0
1000d954:	1c29      	adds	r1, r5, #0
1000d956:	1c22      	adds	r2, r4, #0
1000d958:	4b03      	ldr	r3, [pc, #12]	; (1000d968 <at_ble_characteristic_value_set+0x38>)
1000d95a:	4798      	blx	r3
1000d95c:	bd70      	pop	{r4, r5, r6, pc}
1000d95e:	46c0      	nop			; (mov r8, r8)
1000d960:	1000d841 	.word	0x1000d841
1000d964:	100115bf 	.word	0x100115bf
1000d968:	1000f365 	.word	0x1000f365

1000d96c <at_ble_characteristic_value_get>:
1000d96c:	b570      	push	{r4, r5, r6, lr}
1000d96e:	4b0c      	ldr	r3, [pc, #48]	; (1000d9a0 <at_ble_characteristic_value_get+0x34>)
1000d970:	1c06      	adds	r6, r0, #0
1000d972:	1c0c      	adds	r4, r1, #0
1000d974:	1c15      	adds	r5, r2, #0
1000d976:	4798      	blx	r3
1000d978:	2800      	cmp	r0, #0
1000d97a:	d00b      	beq.n	1000d994 <at_ble_characteristic_value_get+0x28>
1000d97c:	6883      	ldr	r3, [r0, #8]
1000d97e:	2b00      	cmp	r3, #0
1000d980:	d008      	beq.n	1000d994 <at_ble_characteristic_value_get+0x28>
1000d982:	8883      	ldrh	r3, [r0, #4]
1000d984:	802b      	strh	r3, [r5, #0]
1000d986:	8882      	ldrh	r2, [r0, #4]
1000d988:	6881      	ldr	r1, [r0, #8]
1000d98a:	4b06      	ldr	r3, [pc, #24]	; (1000d9a4 <at_ble_characteristic_value_get+0x38>)
1000d98c:	1c20      	adds	r0, r4, #0
1000d98e:	4798      	blx	r3
1000d990:	2000      	movs	r0, #0
1000d992:	e004      	b.n	1000d99e <at_ble_characteristic_value_get+0x32>
1000d994:	1c30      	adds	r0, r6, #0
1000d996:	1c29      	adds	r1, r5, #0
1000d998:	1c22      	adds	r2, r4, #0
1000d99a:	4b03      	ldr	r3, [pc, #12]	; (1000d9a8 <at_ble_characteristic_value_get+0x3c>)
1000d99c:	4798      	blx	r3
1000d99e:	bd70      	pop	{r4, r5, r6, pc}
1000d9a0:	1000d841 	.word	0x1000d841
1000d9a4:	100115bf 	.word	0x100115bf
1000d9a8:	1000f3f1 	.word	0x1000f3f1

1000d9ac <at_ble_write_authorize_reply>:
1000d9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d9ae:	b085      	sub	sp, #20
1000d9b0:	1c04      	adds	r4, r0, #0
1000d9b2:	9101      	str	r1, [sp, #4]
1000d9b4:	2900      	cmp	r1, #0
1000d9b6:	d128      	bne.n	1000da0a <at_ble_write_authorize_reply+0x5e>
1000d9b8:	8843      	ldrh	r3, [r0, #2]
1000d9ba:	1c27      	adds	r7, r4, #0
1000d9bc:	9300      	str	r3, [sp, #0]
1000d9be:	1c18      	adds	r0, r3, #0
1000d9c0:	4b16      	ldr	r3, [pc, #88]	; (1000da1c <at_ble_write_authorize_reply+0x70>)
1000d9c2:	4798      	blx	r3
1000d9c4:	3708      	adds	r7, #8
1000d9c6:	2800      	cmp	r0, #0
1000d9c8:	d009      	beq.n	1000d9de <at_ble_write_authorize_reply+0x32>
1000d9ca:	6880      	ldr	r0, [r0, #8]
1000d9cc:	2800      	cmp	r0, #0
1000d9ce:	d006      	beq.n	1000d9de <at_ble_write_authorize_reply+0x32>
1000d9d0:	88a3      	ldrh	r3, [r4, #4]
1000d9d2:	88e2      	ldrh	r2, [r4, #6]
1000d9d4:	18c0      	adds	r0, r0, r3
1000d9d6:	1c39      	adds	r1, r7, #0
1000d9d8:	4b11      	ldr	r3, [pc, #68]	; (1000da20 <at_ble_write_authorize_reply+0x74>)
1000d9da:	4798      	blx	r3
1000d9dc:	e015      	b.n	1000da0a <at_ble_write_authorize_reply+0x5e>
1000d9de:	ab02      	add	r3, sp, #8
1000d9e0:	1d9e      	adds	r6, r3, #6
1000d9e2:	2300      	movs	r3, #0
1000d9e4:	4d0f      	ldr	r5, [pc, #60]	; (1000da24 <at_ble_write_authorize_reply+0x78>)
1000d9e6:	8033      	strh	r3, [r6, #0]
1000d9e8:	6829      	ldr	r1, [r5, #0]
1000d9ea:	1c32      	adds	r2, r6, #0
1000d9ec:	4b0e      	ldr	r3, [pc, #56]	; (1000da28 <at_ble_write_authorize_reply+0x7c>)
1000d9ee:	9800      	ldr	r0, [sp, #0]
1000d9f0:	4798      	blx	r3
1000d9f2:	682b      	ldr	r3, [r5, #0]
1000d9f4:	88a0      	ldrh	r0, [r4, #4]
1000d9f6:	88e2      	ldrh	r2, [r4, #6]
1000d9f8:	1818      	adds	r0, r3, r0
1000d9fa:	1c39      	adds	r1, r7, #0
1000d9fc:	4b08      	ldr	r3, [pc, #32]	; (1000da20 <at_ble_write_authorize_reply+0x74>)
1000d9fe:	4798      	blx	r3
1000da00:	8860      	ldrh	r0, [r4, #2]
1000da02:	8832      	ldrh	r2, [r6, #0]
1000da04:	6829      	ldr	r1, [r5, #0]
1000da06:	4b09      	ldr	r3, [pc, #36]	; (1000da2c <at_ble_write_authorize_reply+0x80>)
1000da08:	4798      	blx	r3
1000da0a:	8860      	ldrh	r0, [r4, #2]
1000da0c:	8821      	ldrh	r1, [r4, #0]
1000da0e:	9a01      	ldr	r2, [sp, #4]
1000da10:	4b07      	ldr	r3, [pc, #28]	; (1000da30 <at_ble_write_authorize_reply+0x84>)
1000da12:	4798      	blx	r3
1000da14:	2000      	movs	r0, #0
1000da16:	b005      	add	sp, #20
1000da18:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da1a:	46c0      	nop			; (mov r8, r8)
1000da1c:	1000d841 	.word	0x1000d841
1000da20:	100115bf 	.word	0x100115bf
1000da24:	10013888 	.word	0x10013888
1000da28:	1000d96d 	.word	0x1000d96d
1000da2c:	1000d931 	.word	0x1000d931
1000da30:	1000f05d 	.word	0x1000f05d

1000da34 <gatts_handle_read_req>:
1000da34:	b538      	push	{r3, r4, r5, lr}
1000da36:	1c0c      	adds	r4, r1, #0
1000da38:	4b07      	ldr	r3, [pc, #28]	; (1000da58 <gatts_handle_read_req+0x24>)
1000da3a:	4798      	blx	r3
1000da3c:	8865      	ldrh	r5, [r4, #2]
1000da3e:	4b07      	ldr	r3, [pc, #28]	; (1000da5c <gatts_handle_read_req+0x28>)
1000da40:	1c28      	adds	r0, r5, #0
1000da42:	4798      	blx	r3
1000da44:	7883      	ldrb	r3, [r0, #2]
1000da46:	2026      	movs	r0, #38	; 0x26
1000da48:	07db      	lsls	r3, r3, #31
1000da4a:	d404      	bmi.n	1000da56 <gatts_handle_read_req+0x22>
1000da4c:	8820      	ldrh	r0, [r4, #0]
1000da4e:	1c29      	adds	r1, r5, #0
1000da50:	4b03      	ldr	r3, [pc, #12]	; (1000da60 <gatts_handle_read_req+0x2c>)
1000da52:	4798      	blx	r3
1000da54:	203b      	movs	r0, #59	; 0x3b
1000da56:	bd38      	pop	{r3, r4, r5, pc}
1000da58:	1000efa1 	.word	0x1000efa1
1000da5c:	1000d841 	.word	0x1000d841
1000da60:	1000d881 	.word	0x1000d881

1000da64 <gatts_handle_att_info_req>:
1000da64:	b538      	push	{r3, r4, r5, lr}
1000da66:	1c0d      	adds	r5, r1, #0
1000da68:	4b0a      	ldr	r3, [pc, #40]	; (1000da94 <gatts_handle_att_info_req+0x30>)
1000da6a:	1c14      	adds	r4, r2, #0
1000da6c:	4798      	blx	r3
1000da6e:	882d      	ldrh	r5, [r5, #0]
1000da70:	4b09      	ldr	r3, [pc, #36]	; (1000da98 <gatts_handle_att_info_req+0x34>)
1000da72:	1c28      	adds	r0, r5, #0
1000da74:	4798      	blx	r3
1000da76:	0a22      	lsrs	r2, r4, #8
1000da78:	1c03      	adds	r3, r0, #0
1000da7a:	4c08      	ldr	r4, [pc, #32]	; (1000da9c <gatts_handle_att_info_req+0x38>)
1000da7c:	b291      	uxth	r1, r2
1000da7e:	2800      	cmp	r0, #0
1000da80:	d003      	beq.n	1000da8a <gatts_handle_att_info_req+0x26>
1000da82:	8882      	ldrh	r2, [r0, #4]
1000da84:	2300      	movs	r3, #0
1000da86:	1c28      	adds	r0, r5, #0
1000da88:	e001      	b.n	1000da8e <gatts_handle_att_info_req+0x2a>
1000da8a:	1c28      	adds	r0, r5, #0
1000da8c:	2201      	movs	r2, #1
1000da8e:	47a0      	blx	r4
1000da90:	203b      	movs	r0, #59	; 0x3b
1000da92:	bd38      	pop	{r3, r4, r5, pc}
1000da94:	1000efe5 	.word	0x1000efe5
1000da98:	1000d841 	.word	0x1000d841
1000da9c:	1000f0a1 	.word	0x1000f0a1

1000daa0 <gatts_handle_write_req>:
1000daa0:	b510      	push	{r4, lr}
1000daa2:	1c14      	adds	r4, r2, #0
1000daa4:	4b07      	ldr	r3, [pc, #28]	; (1000dac4 <gatts_handle_write_req+0x24>)
1000daa6:	4798      	blx	r3
1000daa8:	4b07      	ldr	r3, [pc, #28]	; (1000dac8 <gatts_handle_write_req+0x28>)
1000daaa:	8860      	ldrh	r0, [r4, #2]
1000daac:	4798      	blx	r3
1000daae:	2302      	movs	r3, #2
1000dab0:	7881      	ldrb	r1, [r0, #2]
1000dab2:	2022      	movs	r0, #34	; 0x22
1000dab4:	4019      	ands	r1, r3
1000dab6:	d103      	bne.n	1000dac0 <gatts_handle_write_req+0x20>
1000dab8:	1c20      	adds	r0, r4, #0
1000daba:	4b04      	ldr	r3, [pc, #16]	; (1000dacc <gatts_handle_write_req+0x2c>)
1000dabc:	4798      	blx	r3
1000dabe:	201f      	movs	r0, #31
1000dac0:	bd10      	pop	{r4, pc}
1000dac2:	46c0      	nop			; (mov r8, r8)
1000dac4:	1000efad 	.word	0x1000efad
1000dac8:	1000d841 	.word	0x1000d841
1000dacc:	1000d9ad 	.word	0x1000d9ad

1000dad0 <init_l2cc_task_module>:
1000dad0:	220a      	movs	r2, #10
1000dad2:	4b01      	ldr	r3, [pc, #4]	; (1000dad8 <init_l2cc_task_module+0x8>)
1000dad4:	701a      	strb	r2, [r3, #0]
1000dad6:	4770      	bx	lr
1000dad8:	10013884 	.word	0x10013884

1000dadc <l2cc_data_send_rsp_handler>:
1000dadc:	b510      	push	{r4, lr}
1000dade:	7802      	ldrb	r2, [r0, #0]
1000dae0:	700a      	strb	r2, [r1, #0]
1000dae2:	7883      	ldrb	r3, [r0, #2]
1000dae4:	7844      	ldrb	r4, [r0, #1]
1000dae6:	021b      	lsls	r3, r3, #8
1000dae8:	4323      	orrs	r3, r4
1000daea:	804b      	strh	r3, [r1, #2]
1000daec:	7903      	ldrb	r3, [r0, #4]
1000daee:	78c0      	ldrb	r0, [r0, #3]
1000daf0:	021b      	lsls	r3, r3, #8
1000daf2:	4303      	orrs	r3, r0
1000daf4:	808b      	strh	r3, [r1, #4]
1000daf6:	2a00      	cmp	r2, #0
1000daf8:	d103      	bne.n	1000db02 <l2cc_data_send_rsp_handler+0x26>
1000dafa:	4a02      	ldr	r2, [pc, #8]	; (1000db04 <l2cc_data_send_rsp_handler+0x28>)
1000dafc:	7813      	ldrb	r3, [r2, #0]
1000dafe:	3301      	adds	r3, #1
1000db00:	7013      	strb	r3, [r2, #0]
1000db02:	bd10      	pop	{r4, pc}
1000db04:	10013884 	.word	0x10013884

1000db08 <l2cc_data_received_handler>:
1000db08:	b508      	push	{r3, lr}
1000db0a:	1c03      	adds	r3, r0, #0
1000db0c:	7842      	ldrb	r2, [r0, #1]
1000db0e:	7800      	ldrb	r0, [r0, #0]
1000db10:	0212      	lsls	r2, r2, #8
1000db12:	4302      	orrs	r2, r0
1000db14:	800a      	strh	r2, [r1, #0]
1000db16:	78da      	ldrb	r2, [r3, #3]
1000db18:	7898      	ldrb	r0, [r3, #2]
1000db1a:	0212      	lsls	r2, r2, #8
1000db1c:	4302      	orrs	r2, r0
1000db1e:	804a      	strh	r2, [r1, #2]
1000db20:	795a      	ldrb	r2, [r3, #5]
1000db22:	7918      	ldrb	r0, [r3, #4]
1000db24:	0212      	lsls	r2, r2, #8
1000db26:	4302      	orrs	r2, r0
1000db28:	808a      	strh	r2, [r1, #4]
1000db2a:	1d88      	adds	r0, r1, #6
1000db2c:	1d99      	adds	r1, r3, #6
1000db2e:	4b01      	ldr	r3, [pc, #4]	; (1000db34 <l2cc_data_received_handler+0x2c>)
1000db30:	4798      	blx	r3
1000db32:	bd08      	pop	{r3, pc}
1000db34:	100115bf 	.word	0x100115bf

1000db38 <at_ble_authenticate>:
1000db38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db3a:	1c0c      	adds	r4, r1, #0
1000db3c:	211f      	movs	r1, #31
1000db3e:	b08b      	sub	sp, #44	; 0x2c
1000db40:	9307      	str	r3, [sp, #28]
1000db42:	ab02      	add	r3, sp, #8
1000db44:	18c9      	adds	r1, r1, r3
1000db46:	230f      	movs	r3, #15
1000db48:	700b      	strb	r3, [r1, #0]
1000db4a:	4b40      	ldr	r3, [pc, #256]	; (1000dc4c <at_ble_authenticate+0x114>)
1000db4c:	1c05      	adds	r5, r0, #0
1000db4e:	1c16      	adds	r6, r2, #0
1000db50:	4798      	blx	r3
1000db52:	1c07      	adds	r7, r0, #0
1000db54:	2001      	movs	r0, #1
1000db56:	2f07      	cmp	r7, #7
1000db58:	d875      	bhi.n	1000dc46 <at_ble_authenticate+0x10e>
1000db5a:	2c00      	cmp	r4, #0
1000db5c:	d113      	bne.n	1000db86 <at_ble_authenticate+0x4e>
1000db5e:	2312      	movs	r3, #18
1000db60:	435f      	muls	r7, r3
1000db62:	4b3b      	ldr	r3, [pc, #236]	; (1000dc50 <at_ble_authenticate+0x118>)
1000db64:	5cfb      	ldrb	r3, [r7, r3]
1000db66:	4283      	cmp	r3, r0
1000db68:	d001      	beq.n	1000db6e <at_ble_authenticate+0x36>
1000db6a:	20cf      	movs	r0, #207	; 0xcf
1000db6c:	e06b      	b.n	1000dc46 <at_ble_authenticate+0x10e>
1000db6e:	9504      	str	r5, [sp, #16]
1000db70:	9400      	str	r4, [sp, #0]
1000db72:	9401      	str	r4, [sp, #4]
1000db74:	9402      	str	r4, [sp, #8]
1000db76:	9403      	str	r4, [sp, #12]
1000db78:	1c20      	adds	r0, r4, #0
1000db7a:	1c21      	adds	r1, r4, #0
1000db7c:	1c22      	adds	r2, r4, #0
1000db7e:	1c23      	adds	r3, r4, #0
1000db80:	4d34      	ldr	r5, [pc, #208]	; (1000dc54 <at_ble_authenticate+0x11c>)
1000db82:	47a8      	blx	r5
1000db84:	e05e      	b.n	1000dc44 <at_ble_authenticate+0x10c>
1000db86:	7922      	ldrb	r2, [r4, #4]
1000db88:	2a06      	cmp	r2, #6
1000db8a:	d9ee      	bls.n	1000db6a <at_ble_authenticate+0x32>
1000db8c:	7963      	ldrb	r3, [r4, #5]
1000db8e:	2b10      	cmp	r3, #16
1000db90:	d8eb      	bhi.n	1000db6a <at_ble_authenticate+0x32>
1000db92:	429a      	cmp	r2, r3
1000db94:	d8e9      	bhi.n	1000db6a <at_ble_authenticate+0x32>
1000db96:	7a23      	ldrb	r3, [r4, #8]
1000db98:	2b04      	cmp	r3, #4
1000db9a:	d8e6      	bhi.n	1000db6a <at_ble_authenticate+0x32>
1000db9c:	79a3      	ldrb	r3, [r4, #6]
1000db9e:	2b07      	cmp	r3, #7
1000dba0:	d8e3      	bhi.n	1000db6a <at_ble_authenticate+0x32>
1000dba2:	79e3      	ldrb	r3, [r4, #7]
1000dba4:	2b07      	cmp	r3, #7
1000dba6:	d8e0      	bhi.n	1000db6a <at_ble_authenticate+0x32>
1000dba8:	78a3      	ldrb	r3, [r4, #2]
1000dbaa:	2b00      	cmp	r3, #0
1000dbac:	d006      	beq.n	1000dbbc <at_ble_authenticate+0x84>
1000dbae:	2e00      	cmp	r6, #0
1000dbb0:	d0db      	beq.n	1000db6a <at_ble_authenticate+0x32>
1000dbb2:	4829      	ldr	r0, [pc, #164]	; (1000dc58 <at_ble_authenticate+0x120>)
1000dbb4:	1c31      	adds	r1, r6, #0
1000dbb6:	221c      	movs	r2, #28
1000dbb8:	4b28      	ldr	r3, [pc, #160]	; (1000dc5c <at_ble_authenticate+0x124>)
1000dbba:	4798      	blx	r3
1000dbbc:	9b07      	ldr	r3, [sp, #28]
1000dbbe:	2b00      	cmp	r3, #0
1000dbc0:	d005      	beq.n	1000dbce <at_ble_authenticate+0x96>
1000dbc2:	4827      	ldr	r0, [pc, #156]	; (1000dc60 <at_ble_authenticate+0x128>)
1000dbc4:	1c19      	adds	r1, r3, #0
1000dbc6:	309a      	adds	r0, #154	; 0x9a
1000dbc8:	2210      	movs	r2, #16
1000dbca:	4b24      	ldr	r3, [pc, #144]	; (1000dc5c <at_ble_authenticate+0x124>)
1000dbcc:	4798      	blx	r3
1000dbce:	7863      	ldrb	r3, [r4, #1]
1000dbd0:	78a2      	ldrb	r2, [r4, #2]
1000dbd2:	009b      	lsls	r3, r3, #2
1000dbd4:	4313      	orrs	r3, r2
1000dbd6:	2212      	movs	r2, #18
1000dbd8:	4357      	muls	r7, r2
1000dbda:	4a1d      	ldr	r2, [pc, #116]	; (1000dc50 <at_ble_authenticate+0x118>)
1000dbdc:	b2db      	uxtb	r3, r3
1000dbde:	5cba      	ldrb	r2, [r7, r2]
1000dbe0:	2a00      	cmp	r2, #0
1000dbe2:	d116      	bne.n	1000dc12 <at_ble_authenticate+0xda>
1000dbe4:	79a0      	ldrb	r0, [r4, #6]
1000dbe6:	0742      	lsls	r2, r0, #29
1000dbe8:	d502      	bpl.n	1000dbf0 <at_ble_authenticate+0xb8>
1000dbea:	9a07      	ldr	r2, [sp, #28]
1000dbec:	2a00      	cmp	r2, #0
1000dbee:	d0bc      	beq.n	1000db6a <at_ble_authenticate+0x32>
1000dbf0:	07c2      	lsls	r2, r0, #31
1000dbf2:	d501      	bpl.n	1000dbf8 <at_ble_authenticate+0xc0>
1000dbf4:	2e00      	cmp	r6, #0
1000dbf6:	d0b8      	beq.n	1000db6a <at_ble_authenticate+0x32>
1000dbf8:	7966      	ldrb	r6, [r4, #5]
1000dbfa:	7821      	ldrb	r1, [r4, #0]
1000dbfc:	78e2      	ldrb	r2, [r4, #3]
1000dbfe:	9600      	str	r6, [sp, #0]
1000dc00:	9001      	str	r0, [sp, #4]
1000dc02:	79e0      	ldrb	r0, [r4, #7]
1000dc04:	9002      	str	r0, [sp, #8]
1000dc06:	7a20      	ldrb	r0, [r4, #8]
1000dc08:	4c16      	ldr	r4, [pc, #88]	; (1000dc64 <at_ble_authenticate+0x12c>)
1000dc0a:	9003      	str	r0, [sp, #12]
1000dc0c:	1c28      	adds	r0, r5, #0
1000dc0e:	47a0      	blx	r4
1000dc10:	e018      	b.n	1000dc44 <at_ble_authenticate+0x10c>
1000dc12:	2a01      	cmp	r2, #1
1000dc14:	d1a9      	bne.n	1000db6a <at_ble_authenticate+0x32>
1000dc16:	79e0      	ldrb	r0, [r4, #7]
1000dc18:	0742      	lsls	r2, r0, #29
1000dc1a:	d502      	bpl.n	1000dc22 <at_ble_authenticate+0xea>
1000dc1c:	9a07      	ldr	r2, [sp, #28]
1000dc1e:	2a00      	cmp	r2, #0
1000dc20:	d0a3      	beq.n	1000db6a <at_ble_authenticate+0x32>
1000dc22:	07c2      	lsls	r2, r0, #31
1000dc24:	d501      	bpl.n	1000dc2a <at_ble_authenticate+0xf2>
1000dc26:	2e00      	cmp	r6, #0
1000dc28:	d09f      	beq.n	1000db6a <at_ble_authenticate+0x32>
1000dc2a:	7966      	ldrb	r6, [r4, #5]
1000dc2c:	7821      	ldrb	r1, [r4, #0]
1000dc2e:	78e2      	ldrb	r2, [r4, #3]
1000dc30:	9600      	str	r6, [sp, #0]
1000dc32:	79a6      	ldrb	r6, [r4, #6]
1000dc34:	9002      	str	r0, [sp, #8]
1000dc36:	9601      	str	r6, [sp, #4]
1000dc38:	7a20      	ldrb	r0, [r4, #8]
1000dc3a:	9504      	str	r5, [sp, #16]
1000dc3c:	9003      	str	r0, [sp, #12]
1000dc3e:	4c05      	ldr	r4, [pc, #20]	; (1000dc54 <at_ble_authenticate+0x11c>)
1000dc40:	2001      	movs	r0, #1
1000dc42:	47a0      	blx	r4
1000dc44:	2000      	movs	r0, #0
1000dc46:	b00b      	add	sp, #44	; 0x2c
1000dc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc4a:	46c0      	nop			; (mov r8, r8)
1000dc4c:	1000e039 	.word	0x1000e039
1000dc50:	10015b9e 	.word	0x10015b9e
1000dc54:	1000e5a9 	.word	0x1000e5a9
1000dc58:	10015cac 	.word	0x10015cac
1000dc5c:	100115bf 	.word	0x100115bf
1000dc60:	10015c2e 	.word	0x10015c2e
1000dc64:	1000e389 	.word	0x1000e389

1000dc68 <at_ble_pair_key_reply>:
1000dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc6a:	b085      	sub	sp, #20
1000dc6c:	1c05      	adds	r5, r0, #0
1000dc6e:	1c0c      	adds	r4, r1, #0
1000dc70:	1c16      	adds	r6, r2, #0
1000dc72:	2100      	movs	r1, #0
1000dc74:	4668      	mov	r0, sp
1000dc76:	2210      	movs	r2, #16
1000dc78:	4b18      	ldr	r3, [pc, #96]	; (1000dcdc <at_ble_pair_key_reply+0x74>)
1000dc7a:	4798      	blx	r3
1000dc7c:	2101      	movs	r1, #1
1000dc7e:	2e00      	cmp	r6, #0
1000dc80:	d101      	bne.n	1000dc86 <at_ble_pair_key_reply+0x1e>
1000dc82:	1c31      	adds	r1, r6, #0
1000dc84:	466e      	mov	r6, sp
1000dc86:	2c00      	cmp	r4, #0
1000dc88:	d116      	bne.n	1000dcb8 <at_ble_pair_key_reply+0x50>
1000dc8a:	2701      	movs	r7, #1
1000dc8c:	1c23      	adds	r3, r4, #0
1000dc8e:	1d70      	adds	r0, r6, #5
1000dc90:	3e01      	subs	r6, #1
1000dc92:	7802      	ldrb	r2, [r0, #0]
1000dc94:	3801      	subs	r0, #1
1000dc96:	3a30      	subs	r2, #48	; 0x30
1000dc98:	437a      	muls	r2, r7
1000dc9a:	189b      	adds	r3, r3, r2
1000dc9c:	220a      	movs	r2, #10
1000dc9e:	4357      	muls	r7, r2
1000dca0:	42b0      	cmp	r0, r6
1000dca2:	d1f6      	bne.n	1000dc92 <at_ble_pair_key_reply+0x2a>
1000dca4:	466a      	mov	r2, sp
1000dca6:	4668      	mov	r0, sp
1000dca8:	7013      	strb	r3, [r2, #0]
1000dcaa:	0a1a      	lsrs	r2, r3, #8
1000dcac:	7042      	strb	r2, [r0, #1]
1000dcae:	0c1a      	lsrs	r2, r3, #16
1000dcb0:	0e1b      	lsrs	r3, r3, #24
1000dcb2:	7082      	strb	r2, [r0, #2]
1000dcb4:	70c3      	strb	r3, [r0, #3]
1000dcb6:	e009      	b.n	1000dccc <at_ble_pair_key_reply+0x64>
1000dcb8:	20cf      	movs	r0, #207	; 0xcf
1000dcba:	2c01      	cmp	r4, #1
1000dcbc:	d10c      	bne.n	1000dcd8 <at_ble_pair_key_reply+0x70>
1000dcbe:	2300      	movs	r3, #0
1000dcc0:	4668      	mov	r0, sp
1000dcc2:	5cf2      	ldrb	r2, [r6, r3]
1000dcc4:	54c2      	strb	r2, [r0, r3]
1000dcc6:	3301      	adds	r3, #1
1000dcc8:	2b10      	cmp	r3, #16
1000dcca:	d1f9      	bne.n	1000dcc0 <at_ble_pair_key_reply+0x58>
1000dccc:	2004      	movs	r0, #4
1000dcce:	466a      	mov	r2, sp
1000dcd0:	1c2b      	adds	r3, r5, #0
1000dcd2:	4c03      	ldr	r4, [pc, #12]	; (1000dce0 <at_ble_pair_key_reply+0x78>)
1000dcd4:	47a0      	blx	r4
1000dcd6:	2000      	movs	r0, #0
1000dcd8:	b005      	add	sp, #20
1000dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcdc:	100115d1 	.word	0x100115d1
1000dce0:	1000e625 	.word	0x1000e625

1000dce4 <at_ble_send_slave_sec_request>:
1000dce4:	b570      	push	{r4, r5, r6, lr}
1000dce6:	4b0c      	ldr	r3, [pc, #48]	; (1000dd18 <at_ble_send_slave_sec_request+0x34>)
1000dce8:	1c0e      	adds	r6, r1, #0
1000dcea:	2100      	movs	r1, #0
1000dcec:	1c05      	adds	r5, r0, #0
1000dcee:	1c14      	adds	r4, r2, #0
1000dcf0:	4798      	blx	r3
1000dcf2:	2301      	movs	r3, #1
1000dcf4:	2807      	cmp	r0, #7
1000dcf6:	d80d      	bhi.n	1000dd14 <at_ble_send_slave_sec_request+0x30>
1000dcf8:	3311      	adds	r3, #17
1000dcfa:	4358      	muls	r0, r3
1000dcfc:	4b07      	ldr	r3, [pc, #28]	; (1000dd1c <at_ble_send_slave_sec_request+0x38>)
1000dcfe:	5cc2      	ldrb	r2, [r0, r3]
1000dd00:	23e0      	movs	r3, #224	; 0xe0
1000dd02:	2a01      	cmp	r2, #1
1000dd04:	d106      	bne.n	1000dd14 <at_ble_send_slave_sec_request+0x30>
1000dd06:	00b1      	lsls	r1, r6, #2
1000dd08:	430c      	orrs	r4, r1
1000dd0a:	4b05      	ldr	r3, [pc, #20]	; (1000dd20 <at_ble_send_slave_sec_request+0x3c>)
1000dd0c:	b2e1      	uxtb	r1, r4
1000dd0e:	1c28      	adds	r0, r5, #0
1000dd10:	4798      	blx	r3
1000dd12:	2300      	movs	r3, #0
1000dd14:	1c18      	adds	r0, r3, #0
1000dd16:	bd70      	pop	{r4, r5, r6, pc}
1000dd18:	1000e039 	.word	0x1000e039
1000dd1c:	10015b9e 	.word	0x10015b9e
1000dd20:	1000e675 	.word	0x1000e675

1000dd24 <at_ble_encryption_start>:
1000dd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dd26:	23cf      	movs	r3, #207	; 0xcf
1000dd28:	2900      	cmp	r1, #0
1000dd2a:	d02b      	beq.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd2c:	2a05      	cmp	r2, #5
1000dd2e:	d829      	bhi.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd30:	2701      	movs	r7, #1
1000dd32:	1c3d      	adds	r5, r7, #0
1000dd34:	2433      	movs	r4, #51	; 0x33
1000dd36:	4095      	lsls	r5, r2
1000dd38:	4225      	tst	r5, r4
1000dd3a:	d023      	beq.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd3c:	7e8c      	ldrb	r4, [r1, #26]
1000dd3e:	3c07      	subs	r4, #7
1000dd40:	2c09      	cmp	r4, #9
1000dd42:	d81f      	bhi.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd44:	4b10      	ldr	r3, [pc, #64]	; (1000dd88 <at_ble_encryption_start+0x64>)
1000dd46:	1c0c      	adds	r4, r1, #0
1000dd48:	2100      	movs	r1, #0
1000dd4a:	1c15      	adds	r5, r2, #0
1000dd4c:	1c06      	adds	r6, r0, #0
1000dd4e:	4798      	blx	r3
1000dd50:	1c3b      	adds	r3, r7, #0
1000dd52:	2807      	cmp	r0, #7
1000dd54:	d816      	bhi.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd56:	2312      	movs	r3, #18
1000dd58:	4358      	muls	r0, r3
1000dd5a:	4b0c      	ldr	r3, [pc, #48]	; (1000dd8c <at_ble_encryption_start+0x68>)
1000dd5c:	5cc7      	ldrb	r7, [r0, r3]
1000dd5e:	23e0      	movs	r3, #224	; 0xe0
1000dd60:	2f00      	cmp	r7, #0
1000dd62:	d10f      	bne.n	1000dd84 <at_ble_encryption_start+0x60>
1000dd64:	1c21      	adds	r1, r4, #0
1000dd66:	221c      	movs	r2, #28
1000dd68:	4b09      	ldr	r3, [pc, #36]	; (1000dd90 <at_ble_encryption_start+0x6c>)
1000dd6a:	480a      	ldr	r0, [pc, #40]	; (1000dd94 <at_ble_encryption_start+0x70>)
1000dd6c:	4798      	blx	r3
1000dd6e:	1c23      	adds	r3, r4, #0
1000dd70:	7ea1      	ldrb	r1, [r4, #26]
1000dd72:	8a22      	ldrh	r2, [r4, #16]
1000dd74:	3312      	adds	r3, #18
1000dd76:	9100      	str	r1, [sp, #0]
1000dd78:	9501      	str	r5, [sp, #4]
1000dd7a:	1c21      	adds	r1, r4, #0
1000dd7c:	1c30      	adds	r0, r6, #0
1000dd7e:	4c06      	ldr	r4, [pc, #24]	; (1000dd98 <at_ble_encryption_start+0x74>)
1000dd80:	47a0      	blx	r4
1000dd82:	1c3b      	adds	r3, r7, #0
1000dd84:	1c18      	adds	r0, r3, #0
1000dd86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dd88:	1000e039 	.word	0x1000e039
1000dd8c:	10015b9e 	.word	0x10015b9e
1000dd90:	100115bf 	.word	0x100115bf
1000dd94:	10015cac 	.word	0x10015cac
1000dd98:	1000e6b5 	.word	0x1000e6b5

1000dd9c <at_ble_encryption_request_reply>:
1000dd9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000dd9e:	24cf      	movs	r4, #207	; 0xcf
1000dda0:	2b00      	cmp	r3, #0
1000dda2:	d011      	beq.n	1000ddc8 <at_ble_encryption_request_reply+0x2c>
1000dda4:	2a00      	cmp	r2, #0
1000dda6:	d00a      	beq.n	1000ddbe <at_ble_encryption_request_reply+0x22>
1000dda8:	2905      	cmp	r1, #5
1000ddaa:	d80d      	bhi.n	1000ddc8 <at_ble_encryption_request_reply+0x2c>
1000ddac:	2501      	movs	r5, #1
1000ddae:	2633      	movs	r6, #51	; 0x33
1000ddb0:	408d      	lsls	r5, r1
1000ddb2:	4235      	tst	r5, r6
1000ddb4:	d008      	beq.n	1000ddc8 <at_ble_encryption_request_reply+0x2c>
1000ddb6:	7e9d      	ldrb	r5, [r3, #26]
1000ddb8:	3d07      	subs	r5, #7
1000ddba:	2d09      	cmp	r5, #9
1000ddbc:	d804      	bhi.n	1000ddc8 <at_ble_encryption_request_reply+0x2c>
1000ddbe:	7e9c      	ldrb	r4, [r3, #26]
1000ddc0:	9400      	str	r4, [sp, #0]
1000ddc2:	4c02      	ldr	r4, [pc, #8]	; (1000ddcc <at_ble_encryption_request_reply+0x30>)
1000ddc4:	47a0      	blx	r4
1000ddc6:	2400      	movs	r4, #0
1000ddc8:	1c20      	adds	r0, r4, #0
1000ddca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ddcc:	1000e771 	.word	0x1000e771

1000ddd0 <rx_callback>:
1000ddd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ddd2:	8883      	ldrh	r3, [r0, #4]
1000ddd4:	1c01      	adds	r1, r0, #0
1000ddd6:	9301      	str	r3, [sp, #4]
1000ddd8:	88c5      	ldrh	r5, [r0, #6]
1000ddda:	8806      	ldrh	r6, [r0, #0]
1000dddc:	2d00      	cmp	r5, #0
1000ddde:	d10f      	bne.n	1000de00 <rx_callback+0x30>
1000dde0:	1c19      	adds	r1, r3, #0
1000dde2:	1c30      	adds	r0, r6, #0
1000dde4:	4b19      	ldr	r3, [pc, #100]	; (1000de4c <rx_callback+0x7c>)
1000dde6:	1c2a      	adds	r2, r5, #0
1000dde8:	4798      	blx	r3
1000ddea:	1e03      	subs	r3, r0, #0
1000ddec:	d105      	bne.n	1000ddfa <rx_callback+0x2a>
1000ddee:	1c30      	adds	r0, r6, #0
1000ddf0:	9901      	ldr	r1, [sp, #4]
1000ddf2:	1c1a      	adds	r2, r3, #0
1000ddf4:	4c16      	ldr	r4, [pc, #88]	; (1000de50 <rx_callback+0x80>)
1000ddf6:	47a0      	blx	r4
1000ddf8:	e027      	b.n	1000de4a <rx_callback+0x7a>
1000ddfa:	4b16      	ldr	r3, [pc, #88]	; (1000de54 <rx_callback+0x84>)
1000ddfc:	4798      	blx	r3
1000ddfe:	e024      	b.n	1000de4a <rx_callback+0x7a>
1000de00:	4c15      	ldr	r4, [pc, #84]	; (1000de58 <rx_callback+0x88>)
1000de02:	4a16      	ldr	r2, [pc, #88]	; (1000de5c <rx_callback+0x8c>)
1000de04:	6823      	ldr	r3, [r4, #0]
1000de06:	6812      	ldr	r2, [r2, #0]
1000de08:	18eb      	adds	r3, r5, r3
1000de0a:	4293      	cmp	r3, r2
1000de0c:	d901      	bls.n	1000de12 <rx_callback+0x42>
1000de0e:	2300      	movs	r3, #0
1000de10:	6023      	str	r3, [r4, #0]
1000de12:	4f13      	ldr	r7, [pc, #76]	; (1000de60 <rx_callback+0x90>)
1000de14:	6822      	ldr	r2, [r4, #0]
1000de16:	683b      	ldr	r3, [r7, #0]
1000de18:	3108      	adds	r1, #8
1000de1a:	1898      	adds	r0, r3, r2
1000de1c:	1c2a      	adds	r2, r5, #0
1000de1e:	4b11      	ldr	r3, [pc, #68]	; (1000de64 <rx_callback+0x94>)
1000de20:	4798      	blx	r3
1000de22:	683b      	ldr	r3, [r7, #0]
1000de24:	6822      	ldr	r2, [r4, #0]
1000de26:	1c30      	adds	r0, r6, #0
1000de28:	189a      	adds	r2, r3, r2
1000de2a:	9901      	ldr	r1, [sp, #4]
1000de2c:	4b07      	ldr	r3, [pc, #28]	; (1000de4c <rx_callback+0x7c>)
1000de2e:	4798      	blx	r3
1000de30:	2800      	cmp	r0, #0
1000de32:	d1e2      	bne.n	1000ddfa <rx_callback+0x2a>
1000de34:	6823      	ldr	r3, [r4, #0]
1000de36:	683a      	ldr	r2, [r7, #0]
1000de38:	1c30      	adds	r0, r6, #0
1000de3a:	18d2      	adds	r2, r2, r3
1000de3c:	9901      	ldr	r1, [sp, #4]
1000de3e:	1c2b      	adds	r3, r5, #0
1000de40:	4e03      	ldr	r6, [pc, #12]	; (1000de50 <rx_callback+0x80>)
1000de42:	47b0      	blx	r6
1000de44:	6823      	ldr	r3, [r4, #0]
1000de46:	18ed      	adds	r5, r5, r3
1000de48:	6025      	str	r5, [r4, #0]
1000de4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000de4c:	1000ccbd 	.word	0x1000ccbd
1000de50:	1000cc35 	.word	0x1000cc35
1000de54:	1000b2d5 	.word	0x1000b2d5
1000de58:	10015d08 	.word	0x10015d08
1000de5c:	10014e74 	.word	0x10014e74
1000de60:	10014e70 	.word	0x10014e70
1000de64:	100115bf 	.word	0x100115bf

1000de68 <interface_send>:
1000de68:	b508      	push	{r3, lr}
1000de6a:	4b02      	ldr	r3, [pc, #8]	; (1000de74 <interface_send+0xc>)
1000de6c:	4798      	blx	r3
1000de6e:	2000      	movs	r0, #0
1000de70:	bd08      	pop	{r3, pc}
1000de72:	46c0      	nop			; (mov r8, r8)
1000de74:	1000afb9 	.word	0x1000afb9

1000de78 <interface_init>:
1000de78:	2280      	movs	r2, #128	; 0x80
1000de7a:	b510      	push	{r4, lr}
1000de7c:	2100      	movs	r1, #0
1000de7e:	1c04      	adds	r4, r0, #0
1000de80:	0092      	lsls	r2, r2, #2
1000de82:	4b08      	ldr	r3, [pc, #32]	; (1000dea4 <interface_init+0x2c>)
1000de84:	4808      	ldr	r0, [pc, #32]	; (1000dea8 <interface_init+0x30>)
1000de86:	4798      	blx	r3
1000de88:	2200      	movs	r2, #0
1000de8a:	4b08      	ldr	r3, [pc, #32]	; (1000deac <interface_init+0x34>)
1000de8c:	601a      	str	r2, [r3, #0]
1000de8e:	4a08      	ldr	r2, [pc, #32]	; (1000deb0 <interface_init+0x38>)
1000de90:	4b08      	ldr	r3, [pc, #32]	; (1000deb4 <interface_init+0x3c>)
1000de92:	601a      	str	r2, [r3, #0]
1000de94:	4b08      	ldr	r3, [pc, #32]	; (1000deb8 <interface_init+0x40>)
1000de96:	6922      	ldr	r2, [r4, #16]
1000de98:	601a      	str	r2, [r3, #0]
1000de9a:	6962      	ldr	r2, [r4, #20]
1000de9c:	4b07      	ldr	r3, [pc, #28]	; (1000debc <interface_init+0x44>)
1000de9e:	601a      	str	r2, [r3, #0]
1000dea0:	bd10      	pop	{r4, pc}
1000dea2:	46c0      	nop			; (mov r8, r8)
1000dea4:	100115d1 	.word	0x100115d1
1000dea8:	10015f0c 	.word	0x10015f0c
1000deac:	10015d08 	.word	0x10015d08
1000deb0:	10015d0c 	.word	0x10015d0c
1000deb4:	10013888 	.word	0x10013888
1000deb8:	10014e70 	.word	0x10014e70
1000debc:	10014e74 	.word	0x10014e74

1000dec0 <platform_cmd_cmpl_signal>:
1000dec0:	2201      	movs	r2, #1
1000dec2:	4b01      	ldr	r3, [pc, #4]	; (1000dec8 <platform_cmd_cmpl_signal+0x8>)
1000dec4:	601a      	str	r2, [r3, #0]
1000dec6:	4770      	bx	lr
1000dec8:	10014e78 	.word	0x10014e78

1000decc <platform_cmd_cmpl_wait>:
1000decc:	b510      	push	{r4, lr}
1000dece:	1c04      	adds	r4, r0, #0
1000ded0:	4b07      	ldr	r3, [pc, #28]	; (1000def0 <platform_cmd_cmpl_wait+0x24>)
1000ded2:	681a      	ldr	r2, [r3, #0]
1000ded4:	2a01      	cmp	r2, #1
1000ded6:	d003      	beq.n	1000dee0 <platform_cmd_cmpl_wait+0x14>
1000ded8:	4b06      	ldr	r3, [pc, #24]	; (1000def4 <platform_cmd_cmpl_wait+0x28>)
1000deda:	2000      	movs	r0, #0
1000dedc:	4798      	blx	r3
1000dede:	e7f7      	b.n	1000ded0 <platform_cmd_cmpl_wait+0x4>
1000dee0:	6819      	ldr	r1, [r3, #0]
1000dee2:	2901      	cmp	r1, #1
1000dee4:	d102      	bne.n	1000deec <platform_cmd_cmpl_wait+0x20>
1000dee6:	2200      	movs	r2, #0
1000dee8:	601a      	str	r2, [r3, #0]
1000deea:	e000      	b.n	1000deee <platform_cmd_cmpl_wait+0x22>
1000deec:	7022      	strb	r2, [r4, #0]
1000deee:	bd10      	pop	{r4, pc}
1000def0:	10014e78 	.word	0x10014e78
1000def4:	1000b045 	.word	0x1000b045

1000def8 <start_timer>:
1000def8:	4770      	bx	lr

1000defa <stop_timer>:
1000defa:	4770      	bx	lr

1000defc <dbg_le_set_bd_addr_req_handler>:
1000defc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000defe:	466b      	mov	r3, sp
1000df00:	1dde      	adds	r6, r3, #7
1000df02:	2300      	movs	r3, #0
1000df04:	7033      	strb	r3, [r6, #0]
1000df06:	230f      	movs	r3, #15
1000df08:	4c13      	ldr	r4, [pc, #76]	; (1000df58 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000df0a:	2703      	movs	r7, #3
1000df0c:	7023      	strb	r3, [r4, #0]
1000df0e:	2300      	movs	r3, #0
1000df10:	70e3      	strb	r3, [r4, #3]
1000df12:	4b12      	ldr	r3, [pc, #72]	; (1000df5c <dbg_le_set_bd_addr_req_handler+0x60>)
1000df14:	1c01      	adds	r1, r0, #0
1000df16:	881a      	ldrh	r2, [r3, #0]
1000df18:	881b      	ldrh	r3, [r3, #0]
1000df1a:	7122      	strb	r2, [r4, #4]
1000df1c:	0a1b      	lsrs	r3, r3, #8
1000df1e:	2206      	movs	r2, #6
1000df20:	7163      	strb	r3, [r4, #5]
1000df22:	480f      	ldr	r0, [pc, #60]	; (1000df60 <dbg_le_set_bd_addr_req_handler+0x64>)
1000df24:	4b0f      	ldr	r3, [pc, #60]	; (1000df64 <dbg_le_set_bd_addr_req_handler+0x68>)
1000df26:	7067      	strb	r7, [r4, #1]
1000df28:	70a7      	strb	r7, [r4, #2]
1000df2a:	4798      	blx	r3
1000df2c:	4d0e      	ldr	r5, [pc, #56]	; (1000df68 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000df2e:	4b0f      	ldr	r3, [pc, #60]	; (1000df6c <dbg_le_set_bd_addr_req_handler+0x70>)
1000df30:	210e      	movs	r1, #14
1000df32:	802b      	strh	r3, [r5, #0]
1000df34:	2306      	movs	r3, #6
1000df36:	71a3      	strb	r3, [r4, #6]
1000df38:	2300      	movs	r3, #0
1000df3a:	1c20      	adds	r0, r4, #0
1000df3c:	71e3      	strb	r3, [r4, #7]
1000df3e:	4b0c      	ldr	r3, [pc, #48]	; (1000df70 <dbg_le_set_bd_addr_req_handler+0x74>)
1000df40:	80af      	strh	r7, [r5, #4]
1000df42:	4798      	blx	r3
1000df44:	1c30      	adds	r0, r6, #0
1000df46:	4b0b      	ldr	r3, [pc, #44]	; (1000df74 <dbg_le_set_bd_addr_req_handler+0x78>)
1000df48:	4798      	blx	r3
1000df4a:	7833      	ldrb	r3, [r6, #0]
1000df4c:	20e2      	movs	r0, #226	; 0xe2
1000df4e:	2b00      	cmp	r3, #0
1000df50:	d101      	bne.n	1000df56 <dbg_le_set_bd_addr_req_handler+0x5a>
1000df52:	68ab      	ldr	r3, [r5, #8]
1000df54:	7818      	ldrb	r0, [r3, #0]
1000df56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000df58:	10015f0c 	.word	0x10015f0c
1000df5c:	10015b9c 	.word	0x10015b9c
1000df60:	10015f14 	.word	0x10015f14
1000df64:	100115bf 	.word	0x100115bf
1000df68:	10015b90 	.word	0x10015b90
1000df6c:	00000329 	.word	0x00000329
1000df70:	1000de69 	.word	0x1000de69
1000df74:	1000decd 	.word	0x1000decd

1000df78 <gapc_get_dev_info_cfm.constprop.1>:
1000df78:	b538      	push	{r3, r4, r5, lr}
1000df7a:	230b      	movs	r3, #11
1000df7c:	4c27      	ldr	r4, [pc, #156]	; (1000e01c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000df7e:	7023      	strb	r3, [r4, #0]
1000df80:	3303      	adds	r3, #3
1000df82:	7063      	strb	r3, [r4, #1]
1000df84:	3329      	adds	r3, #41	; 0x29
1000df86:	70a3      	strb	r3, [r4, #2]
1000df88:	4b25      	ldr	r3, [pc, #148]	; (1000e020 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000df8a:	70e1      	strb	r1, [r4, #3]
1000df8c:	881a      	ldrh	r2, [r3, #0]
1000df8e:	881b      	ldrh	r3, [r3, #0]
1000df90:	7122      	strb	r2, [r4, #4]
1000df92:	0a1b      	lsrs	r3, r3, #8
1000df94:	7163      	strb	r3, [r4, #5]
1000df96:	2300      	movs	r3, #0
1000df98:	7220      	strb	r0, [r4, #8]
1000df9a:	7263      	strb	r3, [r4, #9]
1000df9c:	2801      	cmp	r0, #1
1000df9e:	d02b      	beq.n	1000dff8 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000dfa0:	4298      	cmp	r0, r3
1000dfa2:	d01b      	beq.n	1000dfdc <gapc_get_dev_info_cfm.constprop.1+0x64>
1000dfa4:	2802      	cmp	r0, #2
1000dfa6:	d12f      	bne.n	1000e008 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000dfa8:	4b1e      	ldr	r3, [pc, #120]	; (1000e024 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dfaa:	2112      	movs	r1, #18
1000dfac:	1c1a      	adds	r2, r3, #0
1000dfae:	32ce      	adds	r2, #206	; 0xce
1000dfb0:	8812      	ldrh	r2, [r2, #0]
1000dfb2:	72a2      	strb	r2, [r4, #10]
1000dfb4:	0a12      	lsrs	r2, r2, #8
1000dfb6:	72e2      	strb	r2, [r4, #11]
1000dfb8:	1c1a      	adds	r2, r3, #0
1000dfba:	32d0      	adds	r2, #208	; 0xd0
1000dfbc:	8812      	ldrh	r2, [r2, #0]
1000dfbe:	7322      	strb	r2, [r4, #12]
1000dfc0:	0a12      	lsrs	r2, r2, #8
1000dfc2:	7362      	strb	r2, [r4, #13]
1000dfc4:	1c1a      	adds	r2, r3, #0
1000dfc6:	32d2      	adds	r2, #210	; 0xd2
1000dfc8:	8812      	ldrh	r2, [r2, #0]
1000dfca:	33d4      	adds	r3, #212	; 0xd4
1000dfcc:	73a2      	strb	r2, [r4, #14]
1000dfce:	0a12      	lsrs	r2, r2, #8
1000dfd0:	73e2      	strb	r2, [r4, #15]
1000dfd2:	881b      	ldrh	r3, [r3, #0]
1000dfd4:	7423      	strb	r3, [r4, #16]
1000dfd6:	0a1b      	lsrs	r3, r3, #8
1000dfd8:	7463      	strb	r3, [r4, #17]
1000dfda:	e016      	b.n	1000e00a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dfdc:	4b11      	ldr	r3, [pc, #68]	; (1000e024 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dfde:	4912      	ldr	r1, [pc, #72]	; (1000e028 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000dfe0:	33aa      	adds	r3, #170	; 0xaa
1000dfe2:	881d      	ldrh	r5, [r3, #0]
1000dfe4:	4811      	ldr	r0, [pc, #68]	; (1000e02c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000dfe6:	0a2b      	lsrs	r3, r5, #8
1000dfe8:	72a5      	strb	r5, [r4, #10]
1000dfea:	72e3      	strb	r3, [r4, #11]
1000dfec:	1c2a      	adds	r2, r5, #0
1000dfee:	4b10      	ldr	r3, [pc, #64]	; (1000e030 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000dff0:	350c      	adds	r5, #12
1000dff2:	4798      	blx	r3
1000dff4:	b2a9      	uxth	r1, r5
1000dff6:	e008      	b.n	1000e00a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dff8:	4b0a      	ldr	r3, [pc, #40]	; (1000e024 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000dffa:	210c      	movs	r1, #12
1000dffc:	33cc      	adds	r3, #204	; 0xcc
1000dffe:	881b      	ldrh	r3, [r3, #0]
1000e000:	72a3      	strb	r3, [r4, #10]
1000e002:	0a1b      	lsrs	r3, r3, #8
1000e004:	72e3      	strb	r3, [r4, #11]
1000e006:	e000      	b.n	1000e00a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e008:	210a      	movs	r1, #10
1000e00a:	1c0b      	adds	r3, r1, #0
1000e00c:	3b08      	subs	r3, #8
1000e00e:	71a3      	strb	r3, [r4, #6]
1000e010:	121b      	asrs	r3, r3, #8
1000e012:	71e3      	strb	r3, [r4, #7]
1000e014:	1c20      	adds	r0, r4, #0
1000e016:	4b07      	ldr	r3, [pc, #28]	; (1000e034 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e018:	4798      	blx	r3
1000e01a:	bd38      	pop	{r3, r4, r5, pc}
1000e01c:	10015f0c 	.word	0x10015f0c
1000e020:	10015b9c 	.word	0x10015b9c
1000e024:	10015c2e 	.word	0x10015c2e
1000e028:	10015cda 	.word	0x10015cda
1000e02c:	10015f18 	.word	0x10015f18
1000e030:	100115bf 	.word	0x100115bf
1000e034:	1000de69 	.word	0x1000de69

1000e038 <check_ConnData_idx_role>:
1000e038:	4b0c      	ldr	r3, [pc, #48]	; (1000e06c <check_ConnData_idx_role+0x34>)
1000e03a:	b570      	push	{r4, r5, r6, lr}
1000e03c:	1c04      	adds	r4, r0, #0
1000e03e:	2008      	movs	r0, #8
1000e040:	429c      	cmp	r4, r3
1000e042:	d011      	beq.n	1000e068 <check_ConnData_idx_role+0x30>
1000e044:	2300      	movs	r3, #0
1000e046:	2212      	movs	r2, #18
1000e048:	435a      	muls	r2, r3
1000e04a:	4d09      	ldr	r5, [pc, #36]	; (1000e070 <check_ConnData_idx_role+0x38>)
1000e04c:	b2d8      	uxtb	r0, r3
1000e04e:	1956      	adds	r6, r2, r5
1000e050:	8976      	ldrh	r6, [r6, #10]
1000e052:	42a6      	cmp	r6, r4
1000e054:	d104      	bne.n	1000e060 <check_ConnData_idx_role+0x28>
1000e056:	2900      	cmp	r1, #0
1000e058:	d006      	beq.n	1000e068 <check_ConnData_idx_role+0x30>
1000e05a:	5d53      	ldrb	r3, [r2, r5]
1000e05c:	700b      	strb	r3, [r1, #0]
1000e05e:	e003      	b.n	1000e068 <check_ConnData_idx_role+0x30>
1000e060:	3301      	adds	r3, #1
1000e062:	2b08      	cmp	r3, #8
1000e064:	d1ef      	bne.n	1000e046 <check_ConnData_idx_role+0xe>
1000e066:	1c18      	adds	r0, r3, #0
1000e068:	bd70      	pop	{r4, r5, r6, pc}
1000e06a:	46c0      	nop			; (mov r8, r8)
1000e06c:	0000ffff 	.word	0x0000ffff
1000e070:	10015b9e 	.word	0x10015b9e

1000e074 <check_ConnData_emptyEntry>:
1000e074:	2300      	movs	r3, #0
1000e076:	2212      	movs	r2, #18
1000e078:	435a      	muls	r2, r3
1000e07a:	4906      	ldr	r1, [pc, #24]	; (1000e094 <check_ConnData_emptyEntry+0x20>)
1000e07c:	b2d8      	uxtb	r0, r3
1000e07e:	1852      	adds	r2, r2, r1
1000e080:	8951      	ldrh	r1, [r2, #10]
1000e082:	4a05      	ldr	r2, [pc, #20]	; (1000e098 <check_ConnData_emptyEntry+0x24>)
1000e084:	4291      	cmp	r1, r2
1000e086:	d003      	beq.n	1000e090 <check_ConnData_emptyEntry+0x1c>
1000e088:	3301      	adds	r3, #1
1000e08a:	2b08      	cmp	r3, #8
1000e08c:	d1f3      	bne.n	1000e076 <check_ConnData_emptyEntry+0x2>
1000e08e:	1c18      	adds	r0, r3, #0
1000e090:	4770      	bx	lr
1000e092:	46c0      	nop			; (mov r8, r8)
1000e094:	10015b9e 	.word	0x10015b9e
1000e098:	0000ffff 	.word	0x0000ffff

1000e09c <gapc_cmp_evt>:
1000e09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e09e:	780b      	ldrb	r3, [r1, #0]
1000e0a0:	1c05      	adds	r5, r0, #0
1000e0a2:	1e58      	subs	r0, r3, #1
1000e0a4:	784e      	ldrb	r6, [r1, #1]
1000e0a6:	280f      	cmp	r0, #15
1000e0a8:	d85a      	bhi.n	1000e160 <gapc_cmp_evt+0xc4>
1000e0aa:	1c14      	adds	r4, r2, #0
1000e0ac:	f001 fa04 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000e0b0:	5858440a 	.word	0x5858440a
1000e0b4:	4b584444 	.word	0x4b584444
1000e0b8:	0825122d 	.word	0x0825122d
1000e0bc:	3e395858 	.word	0x3e395858
1000e0c0:	203b      	movs	r0, #59	; 0x3b
1000e0c2:	e04e      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e0c4:	203b      	movs	r0, #59	; 0x3b
1000e0c6:	2e00      	cmp	r6, #0
1000e0c8:	d04b      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e0ca:	0a2d      	lsrs	r5, r5, #8
1000e0cc:	8015      	strh	r5, [r2, #0]
1000e0ce:	7096      	strb	r6, [r2, #2]
1000e0d0:	3835      	subs	r0, #53	; 0x35
1000e0d2:	e046      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e0d4:	466b      	mov	r3, sp
1000e0d6:	1ddf      	adds	r7, r3, #7
1000e0d8:	2301      	movs	r3, #1
1000e0da:	0a2d      	lsrs	r5, r5, #8
1000e0dc:	703b      	strb	r3, [r7, #0]
1000e0de:	1c28      	adds	r0, r5, #0
1000e0e0:	1c39      	adds	r1, r7, #0
1000e0e2:	4b20      	ldr	r3, [pc, #128]	; (1000e164 <gapc_cmp_evt+0xc8>)
1000e0e4:	4798      	blx	r3
1000e0e6:	2807      	cmp	r0, #7
1000e0e8:	d803      	bhi.n	1000e0f2 <gapc_cmp_evt+0x56>
1000e0ea:	783b      	ldrb	r3, [r7, #0]
1000e0ec:	203b      	movs	r0, #59	; 0x3b
1000e0ee:	2b00      	cmp	r3, #0
1000e0f0:	d037      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e0f2:	8065      	strh	r5, [r4, #2]
1000e0f4:	7126      	strb	r6, [r4, #4]
1000e0f6:	2009      	movs	r0, #9
1000e0f8:	e033      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e0fa:	203b      	movs	r0, #59	; 0x3b
1000e0fc:	2e00      	cmp	r6, #0
1000e0fe:	d030      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e100:	0a2d      	lsrs	r5, r5, #8
1000e102:	8015      	strh	r5, [r2, #0]
1000e104:	7096      	strb	r6, [r2, #2]
1000e106:	382d      	subs	r0, #45	; 0x2d
1000e108:	e02b      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e10a:	203b      	movs	r0, #59	; 0x3b
1000e10c:	2e00      	cmp	r6, #0
1000e10e:	d028      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e110:	2300      	movs	r3, #0
1000e112:	0a2d      	lsrs	r5, r5, #8
1000e114:	8015      	strh	r5, [r2, #0]
1000e116:	7096      	strb	r6, [r2, #2]
1000e118:	8093      	strh	r3, [r2, #4]
1000e11a:	80d3      	strh	r3, [r2, #6]
1000e11c:	8113      	strh	r3, [r2, #8]
1000e11e:	3834      	subs	r0, #52	; 0x34
1000e120:	e01f      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e122:	203b      	movs	r0, #59	; 0x3b
1000e124:	2e00      	cmp	r6, #0
1000e126:	d01c      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e128:	7216      	strb	r6, [r2, #8]
1000e12a:	e003      	b.n	1000e134 <gapc_cmp_evt+0x98>
1000e12c:	203b      	movs	r0, #59	; 0x3b
1000e12e:	2e00      	cmp	r6, #0
1000e130:	d017      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e132:	7116      	strb	r6, [r2, #4]
1000e134:	3812      	subs	r0, #18
1000e136:	e014      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e138:	203b      	movs	r0, #59	; 0x3b
1000e13a:	2e00      	cmp	r6, #0
1000e13c:	d011      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e13e:	7093      	strb	r3, [r2, #2]
1000e140:	70d6      	strb	r6, [r2, #3]
1000e142:	382a      	subs	r0, #42	; 0x2a
1000e144:	e00d      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e146:	203b      	movs	r0, #59	; 0x3b
1000e148:	2e00      	cmp	r6, #0
1000e14a:	d00a      	beq.n	1000e162 <gapc_cmp_evt+0xc6>
1000e14c:	0a2d      	lsrs	r5, r5, #8
1000e14e:	7016      	strb	r6, [r2, #0]
1000e150:	8055      	strh	r5, [r2, #2]
1000e152:	1d10      	adds	r0, r2, #4
1000e154:	2100      	movs	r1, #0
1000e156:	2205      	movs	r2, #5
1000e158:	4b03      	ldr	r3, [pc, #12]	; (1000e168 <gapc_cmp_evt+0xcc>)
1000e15a:	4798      	blx	r3
1000e15c:	2012      	movs	r0, #18
1000e15e:	e000      	b.n	1000e162 <gapc_cmp_evt+0xc6>
1000e160:	2000      	movs	r0, #0
1000e162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e164:	1000e039 	.word	0x1000e039
1000e168:	100115d1 	.word	0x100115d1

1000e16c <gapc_connection_cfm_handler>:
1000e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e16e:	b085      	sub	sp, #20
1000e170:	1c1d      	adds	r5, r3, #0
1000e172:	ab0a      	add	r3, sp, #40	; 0x28
1000e174:	781b      	ldrb	r3, [r3, #0]
1000e176:	9201      	str	r2, [sp, #4]
1000e178:	9302      	str	r3, [sp, #8]
1000e17a:	ab0b      	add	r3, sp, #44	; 0x2c
1000e17c:	781b      	ldrb	r3, [r3, #0]
1000e17e:	1c07      	adds	r7, r0, #0
1000e180:	9303      	str	r3, [sp, #12]
1000e182:	ab0c      	add	r3, sp, #48	; 0x30
1000e184:	881a      	ldrh	r2, [r3, #0]
1000e186:	2302      	movs	r3, #2
1000e188:	1c0e      	adds	r6, r1, #0
1000e18a:	4c23      	ldr	r4, [pc, #140]	; (1000e218 <gapc_connection_cfm_handler+0xac>)
1000e18c:	1c39      	adds	r1, r7, #0
1000e18e:	7023      	strb	r3, [r4, #0]
1000e190:	330c      	adds	r3, #12
1000e192:	7063      	strb	r3, [r4, #1]
1000e194:	70a3      	strb	r3, [r4, #2]
1000e196:	4b21      	ldr	r3, [pc, #132]	; (1000e21c <gapc_connection_cfm_handler+0xb0>)
1000e198:	70e2      	strb	r2, [r4, #3]
1000e19a:	881a      	ldrh	r2, [r3, #0]
1000e19c:	881b      	ldrh	r3, [r3, #0]
1000e19e:	7122      	strb	r2, [r4, #4]
1000e1a0:	0a1b      	lsrs	r3, r3, #8
1000e1a2:	4f1f      	ldr	r7, [pc, #124]	; (1000e220 <gapc_connection_cfm_handler+0xb4>)
1000e1a4:	2210      	movs	r2, #16
1000e1a6:	481f      	ldr	r0, [pc, #124]	; (1000e224 <gapc_connection_cfm_handler+0xb8>)
1000e1a8:	7163      	strb	r3, [r4, #5]
1000e1aa:	47b8      	blx	r7
1000e1ac:	0a33      	lsrs	r3, r6, #8
1000e1ae:	7626      	strb	r6, [r4, #24]
1000e1b0:	7663      	strb	r3, [r4, #25]
1000e1b2:	9901      	ldr	r1, [sp, #4]
1000e1b4:	0c33      	lsrs	r3, r6, #16
1000e1b6:	2210      	movs	r2, #16
1000e1b8:	0e36      	lsrs	r6, r6, #24
1000e1ba:	481b      	ldr	r0, [pc, #108]	; (1000e228 <gapc_connection_cfm_handler+0xbc>)
1000e1bc:	76a3      	strb	r3, [r4, #26]
1000e1be:	76e6      	strb	r6, [r4, #27]
1000e1c0:	47b8      	blx	r7
1000e1c2:	1c23      	adds	r3, r4, #0
1000e1c4:	332c      	adds	r3, #44	; 0x2c
1000e1c6:	701d      	strb	r5, [r3, #0]
1000e1c8:	1c23      	adds	r3, r4, #0
1000e1ca:	0a2a      	lsrs	r2, r5, #8
1000e1cc:	332d      	adds	r3, #45	; 0x2d
1000e1ce:	701a      	strb	r2, [r3, #0]
1000e1d0:	1c23      	adds	r3, r4, #0
1000e1d2:	0c2a      	lsrs	r2, r5, #16
1000e1d4:	332e      	adds	r3, #46	; 0x2e
1000e1d6:	701a      	strb	r2, [r3, #0]
1000e1d8:	1c23      	adds	r3, r4, #0
1000e1da:	0e2d      	lsrs	r5, r5, #24
1000e1dc:	332f      	adds	r3, #47	; 0x2f
1000e1de:	466a      	mov	r2, sp
1000e1e0:	701d      	strb	r5, [r3, #0]
1000e1e2:	1c23      	adds	r3, r4, #0
1000e1e4:	7a12      	ldrb	r2, [r2, #8]
1000e1e6:	3330      	adds	r3, #48	; 0x30
1000e1e8:	701a      	strb	r2, [r3, #0]
1000e1ea:	1c23      	adds	r3, r4, #0
1000e1ec:	2500      	movs	r5, #0
1000e1ee:	3331      	adds	r3, #49	; 0x31
1000e1f0:	466a      	mov	r2, sp
1000e1f2:	701d      	strb	r5, [r3, #0]
1000e1f4:	1c23      	adds	r3, r4, #0
1000e1f6:	7b12      	ldrb	r2, [r2, #12]
1000e1f8:	3332      	adds	r3, #50	; 0x32
1000e1fa:	701a      	strb	r2, [r3, #0]
1000e1fc:	1c23      	adds	r3, r4, #0
1000e1fe:	3333      	adds	r3, #51	; 0x33
1000e200:	701d      	strb	r5, [r3, #0]
1000e202:	232c      	movs	r3, #44	; 0x2c
1000e204:	1c20      	adds	r0, r4, #0
1000e206:	71a3      	strb	r3, [r4, #6]
1000e208:	2134      	movs	r1, #52	; 0x34
1000e20a:	4b08      	ldr	r3, [pc, #32]	; (1000e22c <gapc_connection_cfm_handler+0xc0>)
1000e20c:	71e5      	strb	r5, [r4, #7]
1000e20e:	4798      	blx	r3
1000e210:	1c28      	adds	r0, r5, #0
1000e212:	b005      	add	sp, #20
1000e214:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e216:	46c0      	nop			; (mov r8, r8)
1000e218:	10015f0c 	.word	0x10015f0c
1000e21c:	10015b9c 	.word	0x10015b9c
1000e220:	100115bf 	.word	0x100115bf
1000e224:	10015f14 	.word	0x10015f14
1000e228:	10015f28 	.word	0x10015f28
1000e22c:	1000de69 	.word	0x1000de69

1000e230 <gapc_con_req_ind>:
1000e230:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e232:	7845      	ldrb	r5, [r0, #1]
1000e234:	7803      	ldrb	r3, [r0, #0]
1000e236:	4c30      	ldr	r4, [pc, #192]	; (1000e2f8 <gapc_con_req_ind+0xc8>)
1000e238:	022d      	lsls	r5, r5, #8
1000e23a:	431d      	orrs	r5, r3
1000e23c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e23e:	78c3      	ldrb	r3, [r0, #3]
1000e240:	7882      	ldrb	r2, [r0, #2]
1000e242:	b08b      	sub	sp, #44	; 0x2c
1000e244:	021b      	lsls	r3, r3, #8
1000e246:	431a      	orrs	r2, r3
1000e248:	466b      	mov	r3, sp
1000e24a:	9205      	str	r2, [sp, #20]
1000e24c:	8a9b      	ldrh	r3, [r3, #20]
1000e24e:	2120      	movs	r1, #32
1000e250:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e252:	7943      	ldrb	r3, [r0, #5]
1000e254:	7902      	ldrb	r2, [r0, #4]
1000e256:	021b      	lsls	r3, r3, #8
1000e258:	431a      	orrs	r2, r3
1000e25a:	466b      	mov	r3, sp
1000e25c:	9206      	str	r2, [sp, #24]
1000e25e:	8b1b      	ldrh	r3, [r3, #24]
1000e260:	1c06      	adds	r6, r0, #0
1000e262:	8623      	strh	r3, [r4, #48]	; 0x30
1000e264:	79c3      	ldrb	r3, [r0, #7]
1000e266:	7982      	ldrb	r2, [r0, #6]
1000e268:	021b      	lsls	r3, r3, #8
1000e26a:	431a      	orrs	r2, r3
1000e26c:	466b      	mov	r3, sp
1000e26e:	9207      	str	r2, [sp, #28]
1000e270:	466a      	mov	r2, sp
1000e272:	8b9b      	ldrh	r3, [r3, #28]
1000e274:	1852      	adds	r2, r2, r1
1000e276:	8663      	strh	r3, [r4, #50]	; 0x32
1000e278:	7a43      	ldrb	r3, [r0, #9]
1000e27a:	1c01      	adds	r1, r0, #0
1000e27c:	9308      	str	r3, [sp, #32]
1000e27e:	1c23      	adds	r3, r4, #0
1000e280:	7812      	ldrb	r2, [r2, #0]
1000e282:	3377      	adds	r3, #119	; 0x77
1000e284:	3478      	adds	r4, #120	; 0x78
1000e286:	701a      	strb	r2, [r3, #0]
1000e288:	310a      	adds	r1, #10
1000e28a:	2206      	movs	r2, #6
1000e28c:	4b1b      	ldr	r3, [pc, #108]	; (1000e2fc <gapc_con_req_ind+0xcc>)
1000e28e:	1c20      	adds	r0, r4, #0
1000e290:	4798      	blx	r3
1000e292:	7c33      	ldrb	r3, [r6, #16]
1000e294:	9309      	str	r3, [sp, #36]	; 0x24
1000e296:	4b1a      	ldr	r3, [pc, #104]	; (1000e300 <gapc_con_req_ind+0xd0>)
1000e298:	4798      	blx	r3
1000e29a:	4e1a      	ldr	r6, [pc, #104]	; (1000e304 <gapc_con_req_ind+0xd4>)
1000e29c:	1e07      	subs	r7, r0, #0
1000e29e:	2f07      	cmp	r7, #7
1000e2a0:	d81b      	bhi.n	1000e2da <gapc_con_req_ind+0xaa>
1000e2a2:	2312      	movs	r3, #18
1000e2a4:	4343      	muls	r3, r0
1000e2a6:	18f0      	adds	r0, r6, r3
1000e2a8:	8145      	strh	r5, [r0, #10]
1000e2aa:	4669      	mov	r1, sp
1000e2ac:	2524      	movs	r5, #36	; 0x24
1000e2ae:	1949      	adds	r1, r1, r5
1000e2b0:	7809      	ldrb	r1, [r1, #0]
1000e2b2:	2206      	movs	r2, #6
1000e2b4:	54f1      	strb	r1, [r6, r3]
1000e2b6:	2120      	movs	r1, #32
1000e2b8:	466b      	mov	r3, sp
1000e2ba:	185b      	adds	r3, r3, r1
1000e2bc:	781b      	ldrb	r3, [r3, #0]
1000e2be:	1c21      	adds	r1, r4, #0
1000e2c0:	7043      	strb	r3, [r0, #1]
1000e2c2:	466b      	mov	r3, sp
1000e2c4:	8a9b      	ldrh	r3, [r3, #20]
1000e2c6:	3002      	adds	r0, #2
1000e2c8:	8143      	strh	r3, [r0, #10]
1000e2ca:	466b      	mov	r3, sp
1000e2cc:	8b1b      	ldrh	r3, [r3, #24]
1000e2ce:	8183      	strh	r3, [r0, #12]
1000e2d0:	466b      	mov	r3, sp
1000e2d2:	8b9b      	ldrh	r3, [r3, #28]
1000e2d4:	81c3      	strh	r3, [r0, #14]
1000e2d6:	4b09      	ldr	r3, [pc, #36]	; (1000e2fc <gapc_con_req_ind+0xcc>)
1000e2d8:	4798      	blx	r3
1000e2da:	2112      	movs	r1, #18
1000e2dc:	2300      	movs	r3, #0
1000e2de:	434f      	muls	r7, r1
1000e2e0:	9300      	str	r3, [sp, #0]
1000e2e2:	9301      	str	r3, [sp, #4]
1000e2e4:	19f6      	adds	r6, r6, r7
1000e2e6:	8971      	ldrh	r1, [r6, #10]
1000e2e8:	4a07      	ldr	r2, [pc, #28]	; (1000e308 <gapc_con_req_ind+0xd8>)
1000e2ea:	9102      	str	r1, [sp, #8]
1000e2ec:	1c10      	adds	r0, r2, #0
1000e2ee:	1c19      	adds	r1, r3, #0
1000e2f0:	4c06      	ldr	r4, [pc, #24]	; (1000e30c <gapc_con_req_ind+0xdc>)
1000e2f2:	47a0      	blx	r4
1000e2f4:	b00b      	add	sp, #44	; 0x2c
1000e2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2f8:	10015c2e 	.word	0x10015c2e
1000e2fc:	100115bf 	.word	0x100115bf
1000e300:	1000e075 	.word	0x1000e075
1000e304:	10015b9e 	.word	0x10015b9e
1000e308:	10014e7c 	.word	0x10014e7c
1000e30c:	1000e16d 	.word	0x1000e16d

1000e310 <gapc_disconnect_cmd_handler>:
1000e310:	2204      	movs	r2, #4
1000e312:	b510      	push	{r4, lr}
1000e314:	4b0c      	ldr	r3, [pc, #48]	; (1000e348 <gapc_disconnect_cmd_handler+0x38>)
1000e316:	2400      	movs	r4, #0
1000e318:	701a      	strb	r2, [r3, #0]
1000e31a:	320a      	adds	r2, #10
1000e31c:	705a      	strb	r2, [r3, #1]
1000e31e:	709a      	strb	r2, [r3, #2]
1000e320:	4a0a      	ldr	r2, [pc, #40]	; (1000e34c <gapc_disconnect_cmd_handler+0x3c>)
1000e322:	70d9      	strb	r1, [r3, #3]
1000e324:	8811      	ldrh	r1, [r2, #0]
1000e326:	8812      	ldrh	r2, [r2, #0]
1000e328:	7119      	strb	r1, [r3, #4]
1000e32a:	0a12      	lsrs	r2, r2, #8
1000e32c:	715a      	strb	r2, [r3, #5]
1000e32e:	2201      	movs	r2, #1
1000e330:	721a      	strb	r2, [r3, #8]
1000e332:	1892      	adds	r2, r2, r2
1000e334:	7258      	strb	r0, [r3, #9]
1000e336:	719a      	strb	r2, [r3, #6]
1000e338:	71dc      	strb	r4, [r3, #7]
1000e33a:	1c18      	adds	r0, r3, #0
1000e33c:	210a      	movs	r1, #10
1000e33e:	4b04      	ldr	r3, [pc, #16]	; (1000e350 <gapc_disconnect_cmd_handler+0x40>)
1000e340:	4798      	blx	r3
1000e342:	1c20      	adds	r0, r4, #0
1000e344:	bd10      	pop	{r4, pc}
1000e346:	46c0      	nop			; (mov r8, r8)
1000e348:	10015f0c 	.word	0x10015f0c
1000e34c:	10015b9c 	.word	0x10015b9c
1000e350:	1000de69 	.word	0x1000de69

1000e354 <gapc_disconnect_ind>:
1000e354:	1c02      	adds	r2, r0, #0
1000e356:	b508      	push	{r3, lr}
1000e358:	7843      	ldrb	r3, [r0, #1]
1000e35a:	7800      	ldrb	r0, [r0, #0]
1000e35c:	021b      	lsls	r3, r3, #8
1000e35e:	4318      	orrs	r0, r3
1000e360:	8008      	strh	r0, [r1, #0]
1000e362:	7893      	ldrb	r3, [r2, #2]
1000e364:	708b      	strb	r3, [r1, #2]
1000e366:	2100      	movs	r1, #0
1000e368:	4b05      	ldr	r3, [pc, #20]	; (1000e380 <gapc_disconnect_ind+0x2c>)
1000e36a:	4798      	blx	r3
1000e36c:	2807      	cmp	r0, #7
1000e36e:	d806      	bhi.n	1000e37e <gapc_disconnect_ind+0x2a>
1000e370:	2312      	movs	r3, #18
1000e372:	4358      	muls	r0, r3
1000e374:	4b03      	ldr	r3, [pc, #12]	; (1000e384 <gapc_disconnect_ind+0x30>)
1000e376:	1818      	adds	r0, r3, r0
1000e378:	2301      	movs	r3, #1
1000e37a:	425b      	negs	r3, r3
1000e37c:	8143      	strh	r3, [r0, #10]
1000e37e:	bd08      	pop	{r3, pc}
1000e380:	1000e039 	.word	0x1000e039
1000e384:	10015b9e 	.word	0x10015b9e

1000e388 <gapc_bond_cmd_handler>:
1000e388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e38a:	9300      	str	r3, [sp, #0]
1000e38c:	2312      	movs	r3, #18
1000e38e:	1c04      	adds	r4, r0, #0
1000e390:	a808      	add	r0, sp, #32
1000e392:	7807      	ldrb	r7, [r0, #0]
1000e394:	a809      	add	r0, sp, #36	; 0x24
1000e396:	7806      	ldrb	r6, [r0, #0]
1000e398:	a80a      	add	r0, sp, #40	; 0x28
1000e39a:	7805      	ldrb	r5, [r0, #0]
1000e39c:	a80b      	add	r0, sp, #44	; 0x2c
1000e39e:	7800      	ldrb	r0, [r0, #0]
1000e3a0:	9001      	str	r0, [sp, #4]
1000e3a2:	4810      	ldr	r0, [pc, #64]	; (1000e3e4 <gapc_bond_cmd_handler+0x5c>)
1000e3a4:	7003      	strb	r3, [r0, #0]
1000e3a6:	230e      	movs	r3, #14
1000e3a8:	70c4      	strb	r4, [r0, #3]
1000e3aa:	4c0f      	ldr	r4, [pc, #60]	; (1000e3e8 <gapc_bond_cmd_handler+0x60>)
1000e3ac:	7043      	strb	r3, [r0, #1]
1000e3ae:	7083      	strb	r3, [r0, #2]
1000e3b0:	8823      	ldrh	r3, [r4, #0]
1000e3b2:	8824      	ldrh	r4, [r4, #0]
1000e3b4:	7103      	strb	r3, [r0, #4]
1000e3b6:	466b      	mov	r3, sp
1000e3b8:	781b      	ldrb	r3, [r3, #0]
1000e3ba:	0a24      	lsrs	r4, r4, #8
1000e3bc:	72c3      	strb	r3, [r0, #11]
1000e3be:	466b      	mov	r3, sp
1000e3c0:	791b      	ldrb	r3, [r3, #4]
1000e3c2:	7144      	strb	r4, [r0, #5]
1000e3c4:	73c3      	strb	r3, [r0, #15]
1000e3c6:	2308      	movs	r3, #8
1000e3c8:	7183      	strb	r3, [r0, #6]
1000e3ca:	2300      	movs	r3, #0
1000e3cc:	240a      	movs	r4, #10
1000e3ce:	7241      	strb	r1, [r0, #9]
1000e3d0:	71c3      	strb	r3, [r0, #7]
1000e3d2:	2110      	movs	r1, #16
1000e3d4:	4b05      	ldr	r3, [pc, #20]	; (1000e3ec <gapc_bond_cmd_handler+0x64>)
1000e3d6:	7307      	strb	r7, [r0, #12]
1000e3d8:	7346      	strb	r6, [r0, #13]
1000e3da:	7385      	strb	r5, [r0, #14]
1000e3dc:	7204      	strb	r4, [r0, #8]
1000e3de:	7282      	strb	r2, [r0, #10]
1000e3e0:	4798      	blx	r3
1000e3e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e3e4:	10015f0c 	.word	0x10015f0c
1000e3e8:	10015b9c 	.word	0x10015b9c
1000e3ec:	1000de69 	.word	0x1000de69

1000e3f0 <gapc_bond_ind>:
1000e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e3f2:	780e      	ldrb	r6, [r1, #0]
1000e3f4:	1c03      	adds	r3, r0, #0
1000e3f6:	1eb0      	subs	r0, r6, #2
1000e3f8:	2805      	cmp	r0, #5
1000e3fa:	d85d      	bhi.n	1000e4b8 <gapc_bond_ind+0xc8>
1000e3fc:	1c15      	adds	r5, r2, #0
1000e3fe:	1c0c      	adds	r4, r1, #0
1000e400:	f001 f85a 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000e404:	2f5a030d 	.word	0x2f5a030d
1000e408:	4740      	.short	0x4740
1000e40a:	2009      	movs	r0, #9
1000e40c:	2a00      	cmp	r2, #0
1000e40e:	d054      	beq.n	1000e4ba <gapc_bond_ind+0xca>
1000e410:	0a1b      	lsrs	r3, r3, #8
1000e412:	8053      	strh	r3, [r2, #2]
1000e414:	788b      	ldrb	r3, [r1, #2]
1000e416:	4829      	ldr	r0, [pc, #164]	; (1000e4bc <gapc_bond_ind+0xcc>)
1000e418:	7113      	strb	r3, [r2, #4]
1000e41a:	2100      	movs	r1, #0
1000e41c:	e01c      	b.n	1000e458 <gapc_bond_ind+0x68>
1000e41e:	2009      	movs	r0, #9
1000e420:	2a00      	cmp	r2, #0
1000e422:	d04a      	beq.n	1000e4ba <gapc_bond_ind+0xca>
1000e424:	4c25      	ldr	r4, [pc, #148]	; (1000e4bc <gapc_bond_ind+0xcc>)
1000e426:	0a1b      	lsrs	r3, r3, #8
1000e428:	8053      	strh	r3, [r2, #2]
1000e42a:	788b      	ldrb	r3, [r1, #2]
1000e42c:	2700      	movs	r7, #0
1000e42e:	1c10      	adds	r0, r2, #0
1000e430:	1c21      	adds	r1, r4, #0
1000e432:	7013      	strb	r3, [r2, #0]
1000e434:	4e22      	ldr	r6, [pc, #136]	; (1000e4c0 <gapc_bond_ind+0xd0>)
1000e436:	7117      	strb	r7, [r2, #4]
1000e438:	312e      	adds	r1, #46	; 0x2e
1000e43a:	2217      	movs	r2, #23
1000e43c:	3032      	adds	r0, #50	; 0x32
1000e43e:	47b0      	blx	r6
1000e440:	1c28      	adds	r0, r5, #0
1000e442:	1c21      	adds	r1, r4, #0
1000e444:	2210      	movs	r2, #16
1000e446:	311e      	adds	r1, #30
1000e448:	3022      	adds	r0, #34	; 0x22
1000e44a:	47b0      	blx	r6
1000e44c:	1ca1      	adds	r1, r4, #2
1000e44e:	1da8      	adds	r0, r5, #6
1000e450:	221c      	movs	r2, #28
1000e452:	47b0      	blx	r6
1000e454:	1c20      	adds	r0, r4, #0
1000e456:	1c39      	adds	r1, r7, #0
1000e458:	2246      	movs	r2, #70	; 0x46
1000e45a:	4b1a      	ldr	r3, [pc, #104]	; (1000e4c4 <gapc_bond_ind+0xd4>)
1000e45c:	4798      	blx	r3
1000e45e:	2009      	movs	r0, #9
1000e460:	e02b      	b.n	1000e4ba <gapc_bond_ind+0xca>
1000e462:	4d16      	ldr	r5, [pc, #88]	; (1000e4bc <gapc_bond_ind+0xcc>)
1000e464:	3102      	adds	r1, #2
1000e466:	1c28      	adds	r0, r5, #0
1000e468:	2210      	movs	r2, #16
1000e46a:	4e15      	ldr	r6, [pc, #84]	; (1000e4c0 <gapc_bond_ind+0xd0>)
1000e46c:	302e      	adds	r0, #46	; 0x2e
1000e46e:	47b0      	blx	r6
1000e470:	1c28      	adds	r0, r5, #0
1000e472:	1c21      	adds	r1, r4, #0
1000e474:	303f      	adds	r0, #63	; 0x3f
1000e476:	3112      	adds	r1, #18
1000e478:	2206      	movs	r2, #6
1000e47a:	47b0      	blx	r6
1000e47c:	7e23      	ldrb	r3, [r4, #24]
1000e47e:	353e      	adds	r5, #62	; 0x3e
1000e480:	702b      	strb	r3, [r5, #0]
1000e482:	e019      	b.n	1000e4b8 <gapc_bond_ind+0xc8>
1000e484:	480d      	ldr	r0, [pc, #52]	; (1000e4bc <gapc_bond_ind+0xcc>)
1000e486:	3102      	adds	r1, #2
1000e488:	2210      	movs	r2, #16
1000e48a:	4b0d      	ldr	r3, [pc, #52]	; (1000e4c0 <gapc_bond_ind+0xd0>)
1000e48c:	301e      	adds	r0, #30
1000e48e:	4798      	blx	r3
1000e490:	e012      	b.n	1000e4b8 <gapc_bond_ind+0xc8>
1000e492:	4d0a      	ldr	r5, [pc, #40]	; (1000e4bc <gapc_bond_ind+0xcc>)
1000e494:	3102      	adds	r1, #2
1000e496:	2210      	movs	r2, #16
1000e498:	4e09      	ldr	r6, [pc, #36]	; (1000e4c0 <gapc_bond_ind+0xd0>)
1000e49a:	1ca8      	adds	r0, r5, #2
1000e49c:	47b0      	blx	r6
1000e49e:	1c28      	adds	r0, r5, #0
1000e4a0:	1c21      	adds	r1, r4, #0
1000e4a2:	7ce3      	ldrb	r3, [r4, #19]
1000e4a4:	7ca2      	ldrb	r2, [r4, #18]
1000e4a6:	021b      	lsls	r3, r3, #8
1000e4a8:	4313      	orrs	r3, r2
1000e4aa:	3014      	adds	r0, #20
1000e4ac:	3114      	adds	r1, #20
1000e4ae:	2208      	movs	r2, #8
1000e4b0:	826b      	strh	r3, [r5, #18]
1000e4b2:	47b0      	blx	r6
1000e4b4:	7f23      	ldrb	r3, [r4, #28]
1000e4b6:	772b      	strb	r3, [r5, #28]
1000e4b8:	2000      	movs	r0, #0
1000e4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e4bc:	10014eac 	.word	0x10014eac
1000e4c0:	100115bf 	.word	0x100115bf
1000e4c4:	100115d1 	.word	0x100115d1

1000e4c8 <gapc_bond_req_ind>:
1000e4c8:	b570      	push	{r4, r5, r6, lr}
1000e4ca:	780c      	ldrb	r4, [r1, #0]
1000e4cc:	1c03      	adds	r3, r0, #0
1000e4ce:	7849      	ldrb	r1, [r1, #1]
1000e4d0:	2c07      	cmp	r4, #7
1000e4d2:	d85c      	bhi.n	1000e58e <gapc_bond_req_ind+0xc6>
1000e4d4:	1c20      	adds	r0, r4, #0
1000e4d6:	f000 ffef 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000e4da:	5a04      	.short	0x5a04
1000e4dc:	5a0b5a5a 	.word	0x5a0b5a5a
1000e4e0:	1f1f      	.short	0x1f1f
1000e4e2:	200a      	movs	r0, #10
1000e4e4:	2a00      	cmp	r2, #0
1000e4e6:	d053      	beq.n	1000e590 <gapc_bond_req_ind+0xc8>
1000e4e8:	0a1b      	lsrs	r3, r3, #8
1000e4ea:	8013      	strh	r3, [r2, #0]
1000e4ec:	7091      	strb	r1, [r2, #2]
1000e4ee:	e04f      	b.n	1000e590 <gapc_bond_req_ind+0xc8>
1000e4f0:	2a00      	cmp	r2, #0
1000e4f2:	d00b      	beq.n	1000e50c <gapc_bond_req_ind+0x44>
1000e4f4:	0a1b      	lsrs	r3, r3, #8
1000e4f6:	8013      	strh	r3, [r2, #0]
1000e4f8:	2900      	cmp	r1, #0
1000e4fa:	d102      	bne.n	1000e502 <gapc_bond_req_ind+0x3a>
1000e4fc:	2301      	movs	r3, #1
1000e4fe:	7093      	strb	r3, [r2, #2]
1000e500:	e004      	b.n	1000e50c <gapc_bond_req_ind+0x44>
1000e502:	2300      	movs	r3, #0
1000e504:	7093      	strb	r3, [r2, #2]
1000e506:	2902      	cmp	r1, #2
1000e508:	d102      	bne.n	1000e510 <gapc_bond_req_ind+0x48>
1000e50a:	70d3      	strb	r3, [r2, #3]
1000e50c:	200c      	movs	r0, #12
1000e50e:	e03f      	b.n	1000e590 <gapc_bond_req_ind+0xc8>
1000e510:	2901      	cmp	r1, #1
1000e512:	d1fb      	bne.n	1000e50c <gapc_bond_req_ind+0x44>
1000e514:	70d1      	strb	r1, [r2, #3]
1000e516:	e7f9      	b.n	1000e50c <gapc_bond_req_ind+0x44>
1000e518:	2214      	movs	r2, #20
1000e51a:	481e      	ldr	r0, [pc, #120]	; (1000e594 <gapc_bond_req_ind+0xcc>)
1000e51c:	0a1b      	lsrs	r3, r3, #8
1000e51e:	70c3      	strb	r3, [r0, #3]
1000e520:	4b1d      	ldr	r3, [pc, #116]	; (1000e598 <gapc_bond_req_ind+0xd0>)
1000e522:	7002      	strb	r2, [r0, #0]
1000e524:	3a06      	subs	r2, #6
1000e526:	7042      	strb	r2, [r0, #1]
1000e528:	7082      	strb	r2, [r0, #2]
1000e52a:	881a      	ldrh	r2, [r3, #0]
1000e52c:	881b      	ldrh	r3, [r3, #0]
1000e52e:	4e1b      	ldr	r6, [pc, #108]	; (1000e59c <gapc_bond_req_ind+0xd4>)
1000e530:	0a1b      	lsrs	r3, r3, #8
1000e532:	7143      	strb	r3, [r0, #5]
1000e534:	2301      	movs	r3, #1
1000e536:	7102      	strb	r2, [r0, #4]
1000e538:	7204      	strb	r4, [r0, #8]
1000e53a:	7243      	strb	r3, [r0, #9]
1000e53c:	1c05      	adds	r5, r0, #0
1000e53e:	1c31      	adds	r1, r6, #0
1000e540:	300a      	adds	r0, #10
1000e542:	2c07      	cmp	r4, #7
1000e544:	d116      	bne.n	1000e574 <gapc_bond_req_ind+0xac>
1000e546:	317e      	adds	r1, #126	; 0x7e
1000e548:	2210      	movs	r2, #16
1000e54a:	4c15      	ldr	r4, [pc, #84]	; (1000e5a0 <gapc_bond_req_ind+0xd8>)
1000e54c:	47a0      	blx	r4
1000e54e:	1c33      	adds	r3, r6, #0
1000e550:	1c31      	adds	r1, r6, #0
1000e552:	1c28      	adds	r0, r5, #0
1000e554:	338e      	adds	r3, #142	; 0x8e
1000e556:	881b      	ldrh	r3, [r3, #0]
1000e558:	3190      	adds	r1, #144	; 0x90
1000e55a:	76ab      	strb	r3, [r5, #26]
1000e55c:	2208      	movs	r2, #8
1000e55e:	0a1b      	lsrs	r3, r3, #8
1000e560:	301c      	adds	r0, #28
1000e562:	76eb      	strb	r3, [r5, #27]
1000e564:	47a0      	blx	r4
1000e566:	1c31      	adds	r1, r6, #0
1000e568:	3198      	adds	r1, #152	; 0x98
1000e56a:	780a      	ldrb	r2, [r1, #0]
1000e56c:	1d6b      	adds	r3, r5, #5
1000e56e:	77da      	strb	r2, [r3, #31]
1000e570:	2125      	movs	r1, #37	; 0x25
1000e572:	e004      	b.n	1000e57e <gapc_bond_req_ind+0xb6>
1000e574:	319a      	adds	r1, #154	; 0x9a
1000e576:	2210      	movs	r2, #16
1000e578:	4b09      	ldr	r3, [pc, #36]	; (1000e5a0 <gapc_bond_req_ind+0xd8>)
1000e57a:	4798      	blx	r3
1000e57c:	211a      	movs	r1, #26
1000e57e:	1c0b      	adds	r3, r1, #0
1000e580:	2400      	movs	r4, #0
1000e582:	3b08      	subs	r3, #8
1000e584:	71ab      	strb	r3, [r5, #6]
1000e586:	1c28      	adds	r0, r5, #0
1000e588:	4b06      	ldr	r3, [pc, #24]	; (1000e5a4 <gapc_bond_req_ind+0xdc>)
1000e58a:	71ec      	strb	r4, [r5, #7]
1000e58c:	4798      	blx	r3
1000e58e:	2000      	movs	r0, #0
1000e590:	bd70      	pop	{r4, r5, r6, pc}
1000e592:	46c0      	nop			; (mov r8, r8)
1000e594:	10015f0c 	.word	0x10015f0c
1000e598:	10015b9c 	.word	0x10015b9c
1000e59c:	10015c2e 	.word	0x10015c2e
1000e5a0:	100115bf 	.word	0x100115bf
1000e5a4:	1000de69 	.word	0x1000de69

1000e5a8 <gapc_bond_cfm_handler_pair_resp>:
1000e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5aa:	b085      	sub	sp, #20
1000e5ac:	1c07      	adds	r7, r0, #0
1000e5ae:	a80a      	add	r0, sp, #40	; 0x28
1000e5b0:	7806      	ldrb	r6, [r0, #0]
1000e5b2:	a80b      	add	r0, sp, #44	; 0x2c
1000e5b4:	7805      	ldrb	r5, [r0, #0]
1000e5b6:	a80c      	add	r0, sp, #48	; 0x30
1000e5b8:	7800      	ldrb	r0, [r0, #0]
1000e5ba:	2414      	movs	r4, #20
1000e5bc:	9002      	str	r0, [sp, #8]
1000e5be:	a80d      	add	r0, sp, #52	; 0x34
1000e5c0:	7800      	ldrb	r0, [r0, #0]
1000e5c2:	9301      	str	r3, [sp, #4]
1000e5c4:	9003      	str	r0, [sp, #12]
1000e5c6:	a80e      	add	r0, sp, #56	; 0x38
1000e5c8:	8800      	ldrh	r0, [r0, #0]
1000e5ca:	4684      	mov	ip, r0
1000e5cc:	4812      	ldr	r0, [pc, #72]	; (1000e618 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e5ce:	7004      	strb	r4, [r0, #0]
1000e5d0:	3c06      	subs	r4, #6
1000e5d2:	7044      	strb	r4, [r0, #1]
1000e5d4:	7084      	strb	r4, [r0, #2]
1000e5d6:	4664      	mov	r4, ip
1000e5d8:	70c4      	strb	r4, [r0, #3]
1000e5da:	4c10      	ldr	r4, [pc, #64]	; (1000e61c <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e5dc:	7247      	strb	r7, [r0, #9]
1000e5de:	8823      	ldrh	r3, [r4, #0]
1000e5e0:	8824      	ldrh	r4, [r4, #0]
1000e5e2:	7103      	strb	r3, [r0, #4]
1000e5e4:	466b      	mov	r3, sp
1000e5e6:	791b      	ldrb	r3, [r3, #4]
1000e5e8:	0a24      	lsrs	r4, r4, #8
1000e5ea:	7303      	strb	r3, [r0, #12]
1000e5ec:	466b      	mov	r3, sp
1000e5ee:	7a1b      	ldrb	r3, [r3, #8]
1000e5f0:	7144      	strb	r4, [r0, #5]
1000e5f2:	73c3      	strb	r3, [r0, #15]
1000e5f4:	466b      	mov	r3, sp
1000e5f6:	7b1b      	ldrb	r3, [r3, #12]
1000e5f8:	2401      	movs	r4, #1
1000e5fa:	7403      	strb	r3, [r0, #16]
1000e5fc:	2309      	movs	r3, #9
1000e5fe:	7183      	strb	r3, [r0, #6]
1000e600:	2300      	movs	r3, #0
1000e602:	7204      	strb	r4, [r0, #8]
1000e604:	7281      	strb	r1, [r0, #10]
1000e606:	72c2      	strb	r2, [r0, #11]
1000e608:	7346      	strb	r6, [r0, #13]
1000e60a:	7385      	strb	r5, [r0, #14]
1000e60c:	71c3      	strb	r3, [r0, #7]
1000e60e:	2111      	movs	r1, #17
1000e610:	4b03      	ldr	r3, [pc, #12]	; (1000e620 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e612:	4798      	blx	r3
1000e614:	b005      	add	sp, #20
1000e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e618:	10015f0c 	.word	0x10015f0c
1000e61c:	10015b9c 	.word	0x10015b9c
1000e620:	1000de69 	.word	0x1000de69

1000e624 <gapc_bond_cfm_handler_key_exch>:
1000e624:	b538      	push	{r3, r4, r5, lr}
1000e626:	2514      	movs	r5, #20
1000e628:	4c0d      	ldr	r4, [pc, #52]	; (1000e660 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e62a:	70e3      	strb	r3, [r4, #3]
1000e62c:	4b0d      	ldr	r3, [pc, #52]	; (1000e664 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e62e:	7025      	strb	r5, [r4, #0]
1000e630:	3d06      	subs	r5, #6
1000e632:	7065      	strb	r5, [r4, #1]
1000e634:	70a5      	strb	r5, [r4, #2]
1000e636:	881d      	ldrh	r5, [r3, #0]
1000e638:	881b      	ldrh	r3, [r3, #0]
1000e63a:	7220      	strb	r0, [r4, #8]
1000e63c:	0a1b      	lsrs	r3, r3, #8
1000e63e:	7163      	strb	r3, [r4, #5]
1000e640:	7261      	strb	r1, [r4, #9]
1000e642:	4b09      	ldr	r3, [pc, #36]	; (1000e668 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e644:	1c11      	adds	r1, r2, #0
1000e646:	4809      	ldr	r0, [pc, #36]	; (1000e66c <gapc_bond_cfm_handler_key_exch+0x48>)
1000e648:	2210      	movs	r2, #16
1000e64a:	7125      	strb	r5, [r4, #4]
1000e64c:	4798      	blx	r3
1000e64e:	2312      	movs	r3, #18
1000e650:	71a3      	strb	r3, [r4, #6]
1000e652:	2300      	movs	r3, #0
1000e654:	1c20      	adds	r0, r4, #0
1000e656:	71e3      	strb	r3, [r4, #7]
1000e658:	211a      	movs	r1, #26
1000e65a:	4b05      	ldr	r3, [pc, #20]	; (1000e670 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e65c:	4798      	blx	r3
1000e65e:	bd38      	pop	{r3, r4, r5, pc}
1000e660:	10015f0c 	.word	0x10015f0c
1000e664:	10015b9c 	.word	0x10015b9c
1000e668:	100115bf 	.word	0x100115bf
1000e66c:	10015f16 	.word	0x10015f16
1000e670:	1000de69 	.word	0x1000de69

1000e674 <gapc_security_cmd_handler>:
1000e674:	221a      	movs	r2, #26
1000e676:	b508      	push	{r3, lr}
1000e678:	4b0b      	ldr	r3, [pc, #44]	; (1000e6a8 <gapc_security_cmd_handler+0x34>)
1000e67a:	701a      	strb	r2, [r3, #0]
1000e67c:	3a0c      	subs	r2, #12
1000e67e:	705a      	strb	r2, [r3, #1]
1000e680:	709a      	strb	r2, [r3, #2]
1000e682:	4a0a      	ldr	r2, [pc, #40]	; (1000e6ac <gapc_security_cmd_handler+0x38>)
1000e684:	70d8      	strb	r0, [r3, #3]
1000e686:	8810      	ldrh	r0, [r2, #0]
1000e688:	8812      	ldrh	r2, [r2, #0]
1000e68a:	7118      	strb	r0, [r3, #4]
1000e68c:	0a12      	lsrs	r2, r2, #8
1000e68e:	715a      	strb	r2, [r3, #5]
1000e690:	220c      	movs	r2, #12
1000e692:	721a      	strb	r2, [r3, #8]
1000e694:	3a0a      	subs	r2, #10
1000e696:	719a      	strb	r2, [r3, #6]
1000e698:	2200      	movs	r2, #0
1000e69a:	7259      	strb	r1, [r3, #9]
1000e69c:	71da      	strb	r2, [r3, #7]
1000e69e:	1c18      	adds	r0, r3, #0
1000e6a0:	210a      	movs	r1, #10
1000e6a2:	4b03      	ldr	r3, [pc, #12]	; (1000e6b0 <gapc_security_cmd_handler+0x3c>)
1000e6a4:	4798      	blx	r3
1000e6a6:	bd08      	pop	{r3, pc}
1000e6a8:	10015f0c 	.word	0x10015f0c
1000e6ac:	10015b9c 	.word	0x10015b9c
1000e6b0:	1000de69 	.word	0x1000de69

1000e6b4 <gapc_encrypt_cmd_handler>:
1000e6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6b6:	2500      	movs	r5, #0
1000e6b8:	b089      	sub	sp, #36	; 0x24
1000e6ba:	9306      	str	r3, [sp, #24]
1000e6bc:	ab0e      	add	r3, sp, #56	; 0x38
1000e6be:	781b      	ldrb	r3, [r3, #0]
1000e6c0:	1c17      	adds	r7, r2, #0
1000e6c2:	9307      	str	r3, [sp, #28]
1000e6c4:	ab0f      	add	r3, sp, #60	; 0x3c
1000e6c6:	781b      	ldrb	r3, [r3, #0]
1000e6c8:	4a19      	ldr	r2, [pc, #100]	; (1000e730 <gapc_encrypt_cmd_handler+0x7c>)
1000e6ca:	1c06      	adds	r6, r0, #0
1000e6cc:	9105      	str	r1, [sp, #20]
1000e6ce:	9300      	str	r3, [sp, #0]
1000e6d0:	9002      	str	r0, [sp, #8]
1000e6d2:	1c29      	adds	r1, r5, #0
1000e6d4:	1c2b      	adds	r3, r5, #0
1000e6d6:	9501      	str	r5, [sp, #4]
1000e6d8:	1c10      	adds	r0, r2, #0
1000e6da:	4c16      	ldr	r4, [pc, #88]	; (1000e734 <gapc_encrypt_cmd_handler+0x80>)
1000e6dc:	47a0      	blx	r4
1000e6de:	2316      	movs	r3, #22
1000e6e0:	4c15      	ldr	r4, [pc, #84]	; (1000e738 <gapc_encrypt_cmd_handler+0x84>)
1000e6e2:	9905      	ldr	r1, [sp, #20]
1000e6e4:	7023      	strb	r3, [r4, #0]
1000e6e6:	3b08      	subs	r3, #8
1000e6e8:	7063      	strb	r3, [r4, #1]
1000e6ea:	70a3      	strb	r3, [r4, #2]
1000e6ec:	4b13      	ldr	r3, [pc, #76]	; (1000e73c <gapc_encrypt_cmd_handler+0x88>)
1000e6ee:	70e6      	strb	r6, [r4, #3]
1000e6f0:	881a      	ldrh	r2, [r3, #0]
1000e6f2:	881b      	ldrh	r3, [r3, #0]
1000e6f4:	7122      	strb	r2, [r4, #4]
1000e6f6:	0a1b      	lsrs	r3, r3, #8
1000e6f8:	7163      	strb	r3, [r4, #5]
1000e6fa:	230b      	movs	r3, #11
1000e6fc:	4e10      	ldr	r6, [pc, #64]	; (1000e740 <gapc_encrypt_cmd_handler+0x8c>)
1000e6fe:	2210      	movs	r2, #16
1000e700:	4810      	ldr	r0, [pc, #64]	; (1000e744 <gapc_encrypt_cmd_handler+0x90>)
1000e702:	7223      	strb	r3, [r4, #8]
1000e704:	7265      	strb	r5, [r4, #9]
1000e706:	47b0      	blx	r6
1000e708:	0a3b      	lsrs	r3, r7, #8
1000e70a:	9906      	ldr	r1, [sp, #24]
1000e70c:	2208      	movs	r2, #8
1000e70e:	480e      	ldr	r0, [pc, #56]	; (1000e748 <gapc_encrypt_cmd_handler+0x94>)
1000e710:	76e3      	strb	r3, [r4, #27]
1000e712:	76a7      	strb	r7, [r4, #26]
1000e714:	47b0      	blx	r6
1000e716:	466a      	mov	r2, sp
1000e718:	7f12      	ldrb	r2, [r2, #28]
1000e71a:	1d63      	adds	r3, r4, #5
1000e71c:	77da      	strb	r2, [r3, #31]
1000e71e:	231d      	movs	r3, #29
1000e720:	1c20      	adds	r0, r4, #0
1000e722:	71a3      	strb	r3, [r4, #6]
1000e724:	2125      	movs	r1, #37	; 0x25
1000e726:	4b09      	ldr	r3, [pc, #36]	; (1000e74c <gapc_encrypt_cmd_handler+0x98>)
1000e728:	71e5      	strb	r5, [r4, #7]
1000e72a:	4798      	blx	r3
1000e72c:	b009      	add	sp, #36	; 0x24
1000e72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e730:	10014e8c 	.word	0x10014e8c
1000e734:	1000e16d 	.word	0x1000e16d
1000e738:	10015f0c 	.word	0x10015f0c
1000e73c:	10015b9c 	.word	0x10015b9c
1000e740:	100115bf 	.word	0x100115bf
1000e744:	10015f16 	.word	0x10015f16
1000e748:	10015f28 	.word	0x10015f28
1000e74c:	1000de69 	.word	0x1000de69

1000e750 <gapc_encrypt_req_ind>:
1000e750:	b508      	push	{r3, lr}
1000e752:	0a00      	lsrs	r0, r0, #8
1000e754:	8010      	strh	r0, [r2, #0]
1000e756:	784b      	ldrb	r3, [r1, #1]
1000e758:	7808      	ldrb	r0, [r1, #0]
1000e75a:	021b      	lsls	r3, r3, #8
1000e75c:	4303      	orrs	r3, r0
1000e75e:	8053      	strh	r3, [r2, #2]
1000e760:	1d10      	adds	r0, r2, #4
1000e762:	3102      	adds	r1, #2
1000e764:	2208      	movs	r2, #8
1000e766:	4b01      	ldr	r3, [pc, #4]	; (1000e76c <gapc_encrypt_req_ind+0x1c>)
1000e768:	4798      	blx	r3
1000e76a:	bd08      	pop	{r3, pc}
1000e76c:	100115bf 	.word	0x100115bf

1000e770 <gapc_encrypt_cfm_handler>:
1000e770:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e772:	2500      	movs	r5, #0
1000e774:	b087      	sub	sp, #28
1000e776:	9304      	str	r3, [sp, #16]
1000e778:	ab0c      	add	r3, sp, #48	; 0x30
1000e77a:	781b      	ldrb	r3, [r3, #0]
1000e77c:	1c17      	adds	r7, r2, #0
1000e77e:	4a15      	ldr	r2, [pc, #84]	; (1000e7d4 <gapc_encrypt_cfm_handler+0x64>)
1000e780:	1c06      	adds	r6, r0, #0
1000e782:	9305      	str	r3, [sp, #20]
1000e784:	9100      	str	r1, [sp, #0]
1000e786:	9002      	str	r0, [sp, #8]
1000e788:	1c29      	adds	r1, r5, #0
1000e78a:	1c2b      	adds	r3, r5, #0
1000e78c:	9501      	str	r5, [sp, #4]
1000e78e:	1c10      	adds	r0, r2, #0
1000e790:	4c11      	ldr	r4, [pc, #68]	; (1000e7d8 <gapc_encrypt_cfm_handler+0x68>)
1000e792:	47a0      	blx	r4
1000e794:	2318      	movs	r3, #24
1000e796:	4c11      	ldr	r4, [pc, #68]	; (1000e7dc <gapc_encrypt_cfm_handler+0x6c>)
1000e798:	9904      	ldr	r1, [sp, #16]
1000e79a:	7023      	strb	r3, [r4, #0]
1000e79c:	3b0a      	subs	r3, #10
1000e79e:	7063      	strb	r3, [r4, #1]
1000e7a0:	70a3      	strb	r3, [r4, #2]
1000e7a2:	4b0f      	ldr	r3, [pc, #60]	; (1000e7e0 <gapc_encrypt_cfm_handler+0x70>)
1000e7a4:	480f      	ldr	r0, [pc, #60]	; (1000e7e4 <gapc_encrypt_cfm_handler+0x74>)
1000e7a6:	881a      	ldrh	r2, [r3, #0]
1000e7a8:	881b      	ldrh	r3, [r3, #0]
1000e7aa:	7122      	strb	r2, [r4, #4]
1000e7ac:	0a1b      	lsrs	r3, r3, #8
1000e7ae:	7163      	strb	r3, [r4, #5]
1000e7b0:	2210      	movs	r2, #16
1000e7b2:	4b0d      	ldr	r3, [pc, #52]	; (1000e7e8 <gapc_encrypt_cfm_handler+0x78>)
1000e7b4:	70e6      	strb	r6, [r4, #3]
1000e7b6:	7227      	strb	r7, [r4, #8]
1000e7b8:	4798      	blx	r3
1000e7ba:	466b      	mov	r3, sp
1000e7bc:	7d1b      	ldrb	r3, [r3, #20]
1000e7be:	1c20      	adds	r0, r4, #0
1000e7c0:	7663      	strb	r3, [r4, #25]
1000e7c2:	2312      	movs	r3, #18
1000e7c4:	211a      	movs	r1, #26
1000e7c6:	71a3      	strb	r3, [r4, #6]
1000e7c8:	4b08      	ldr	r3, [pc, #32]	; (1000e7ec <gapc_encrypt_cfm_handler+0x7c>)
1000e7ca:	71e5      	strb	r5, [r4, #7]
1000e7cc:	4798      	blx	r3
1000e7ce:	b007      	add	sp, #28
1000e7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7d2:	46c0      	nop			; (mov r8, r8)
1000e7d4:	10014e9c 	.word	0x10014e9c
1000e7d8:	1000e16d 	.word	0x1000e16d
1000e7dc:	10015f0c 	.word	0x10015f0c
1000e7e0:	10015b9c 	.word	0x10015b9c
1000e7e4:	10015f15 	.word	0x10015f15
1000e7e8:	100115bf 	.word	0x100115bf
1000e7ec:	1000de69 	.word	0x1000de69

1000e7f0 <gapc_encrypt_ind>:
1000e7f0:	780b      	ldrb	r3, [r1, #0]
1000e7f2:	0a00      	lsrs	r0, r0, #8
1000e7f4:	70d3      	strb	r3, [r2, #3]
1000e7f6:	2300      	movs	r3, #0
1000e7f8:	8010      	strh	r0, [r2, #0]
1000e7fa:	7093      	strb	r3, [r2, #2]
1000e7fc:	4770      	bx	lr
	...

1000e800 <gapc_param_update_cfm_handler>:
1000e800:	b538      	push	{r3, r4, r5, lr}
1000e802:	2410      	movs	r4, #16
1000e804:	1c05      	adds	r5, r0, #0
1000e806:	480e      	ldr	r0, [pc, #56]	; (1000e840 <gapc_param_update_cfm_handler+0x40>)
1000e808:	7004      	strb	r4, [r0, #0]
1000e80a:	3c02      	subs	r4, #2
1000e80c:	7044      	strb	r4, [r0, #1]
1000e80e:	7084      	strb	r4, [r0, #2]
1000e810:	4c0c      	ldr	r4, [pc, #48]	; (1000e844 <gapc_param_update_cfm_handler+0x44>)
1000e812:	70c5      	strb	r5, [r0, #3]
1000e814:	8825      	ldrh	r5, [r4, #0]
1000e816:	8824      	ldrh	r4, [r4, #0]
1000e818:	72c3      	strb	r3, [r0, #11]
1000e81a:	0a1b      	lsrs	r3, r3, #8
1000e81c:	0a24      	lsrs	r4, r4, #8
1000e81e:	7303      	strb	r3, [r0, #12]
1000e820:	2305      	movs	r3, #5
1000e822:	7144      	strb	r4, [r0, #5]
1000e824:	2400      	movs	r4, #0
1000e826:	7201      	strb	r1, [r0, #8]
1000e828:	7242      	strb	r2, [r0, #9]
1000e82a:	7183      	strb	r3, [r0, #6]
1000e82c:	0a12      	lsrs	r2, r2, #8
1000e82e:	210d      	movs	r1, #13
1000e830:	4b05      	ldr	r3, [pc, #20]	; (1000e848 <gapc_param_update_cfm_handler+0x48>)
1000e832:	7105      	strb	r5, [r0, #4]
1000e834:	7282      	strb	r2, [r0, #10]
1000e836:	71c4      	strb	r4, [r0, #7]
1000e838:	4798      	blx	r3
1000e83a:	1c20      	adds	r0, r4, #0
1000e83c:	bd38      	pop	{r3, r4, r5, pc}
1000e83e:	46c0      	nop			; (mov r8, r8)
1000e840:	10015f0c 	.word	0x10015f0c
1000e844:	10015b9c 	.word	0x10015b9c
1000e848:	1000de69 	.word	0x1000de69

1000e84c <gapc_param_updated_ind>:
1000e84c:	2300      	movs	r3, #0
1000e84e:	0a00      	lsrs	r0, r0, #8
1000e850:	8010      	strh	r0, [r2, #0]
1000e852:	7093      	strb	r3, [r2, #2]
1000e854:	784b      	ldrb	r3, [r1, #1]
1000e856:	7808      	ldrb	r0, [r1, #0]
1000e858:	021b      	lsls	r3, r3, #8
1000e85a:	4303      	orrs	r3, r0
1000e85c:	8093      	strh	r3, [r2, #4]
1000e85e:	78cb      	ldrb	r3, [r1, #3]
1000e860:	7888      	ldrb	r0, [r1, #2]
1000e862:	021b      	lsls	r3, r3, #8
1000e864:	4303      	orrs	r3, r0
1000e866:	80d3      	strh	r3, [r2, #6]
1000e868:	794b      	ldrb	r3, [r1, #5]
1000e86a:	7909      	ldrb	r1, [r1, #4]
1000e86c:	021b      	lsls	r3, r3, #8
1000e86e:	430b      	orrs	r3, r1
1000e870:	2007      	movs	r0, #7
1000e872:	8113      	strh	r3, [r2, #8]
1000e874:	4770      	bx	lr

1000e876 <gapc_param_updated_req_ind>:
1000e876:	0a00      	lsrs	r0, r0, #8
1000e878:	8010      	strh	r0, [r2, #0]
1000e87a:	784b      	ldrb	r3, [r1, #1]
1000e87c:	7808      	ldrb	r0, [r1, #0]
1000e87e:	021b      	lsls	r3, r3, #8
1000e880:	4303      	orrs	r3, r0
1000e882:	8053      	strh	r3, [r2, #2]
1000e884:	78cb      	ldrb	r3, [r1, #3]
1000e886:	7888      	ldrb	r0, [r1, #2]
1000e888:	021b      	lsls	r3, r3, #8
1000e88a:	4303      	orrs	r3, r0
1000e88c:	8093      	strh	r3, [r2, #4]
1000e88e:	794b      	ldrb	r3, [r1, #5]
1000e890:	7908      	ldrb	r0, [r1, #4]
1000e892:	021b      	lsls	r3, r3, #8
1000e894:	4303      	orrs	r3, r0
1000e896:	80d3      	strh	r3, [r2, #6]
1000e898:	79cb      	ldrb	r3, [r1, #7]
1000e89a:	7989      	ldrb	r1, [r1, #6]
1000e89c:	021b      	lsls	r3, r3, #8
1000e89e:	430b      	orrs	r3, r1
1000e8a0:	2008      	movs	r0, #8
1000e8a2:	8113      	strh	r3, [r2, #8]
1000e8a4:	4770      	bx	lr
	...

1000e8a8 <gapc_dev_info_req_ind_handler>:
1000e8a8:	b508      	push	{r3, lr}
1000e8aa:	1c0b      	adds	r3, r1, #0
1000e8ac:	0a01      	lsrs	r1, r0, #8
1000e8ae:	8011      	strh	r1, [r2, #0]
1000e8b0:	7818      	ldrb	r0, [r3, #0]
1000e8b2:	7090      	strb	r0, [r2, #2]
1000e8b4:	2800      	cmp	r0, #0
1000e8b6:	d104      	bne.n	1000e8c2 <gapc_dev_info_req_ind_handler+0x1a>
1000e8b8:	4b03      	ldr	r3, [pc, #12]	; (1000e8c8 <gapc_dev_info_req_ind_handler+0x20>)
1000e8ba:	33aa      	adds	r3, #170	; 0xaa
1000e8bc:	881b      	ldrh	r3, [r3, #0]
1000e8be:	2b00      	cmp	r3, #0
1000e8c0:	d001      	beq.n	1000e8c6 <gapc_dev_info_req_ind_handler+0x1e>
1000e8c2:	4b02      	ldr	r3, [pc, #8]	; (1000e8cc <gapc_dev_info_req_ind_handler+0x24>)
1000e8c4:	4798      	blx	r3
1000e8c6:	bd08      	pop	{r3, pc}
1000e8c8:	10015c2e 	.word	0x10015c2e
1000e8cc:	1000df79 	.word	0x1000df79

1000e8d0 <gapc_sec_req_ind>:
1000e8d0:	0a00      	lsrs	r0, r0, #8
1000e8d2:	8010      	strh	r0, [r2, #0]
1000e8d4:	7809      	ldrb	r1, [r1, #0]
1000e8d6:	2301      	movs	r3, #1
1000e8d8:	1c08      	adds	r0, r1, #0
1000e8da:	0889      	lsrs	r1, r1, #2
1000e8dc:	4018      	ands	r0, r3
1000e8de:	400b      	ands	r3, r1
1000e8e0:	70d0      	strb	r0, [r2, #3]
1000e8e2:	7113      	strb	r3, [r2, #4]
1000e8e4:	4770      	bx	lr

1000e8e6 <gapc_sign_counter_ind_handler>:
1000e8e6:	0a00      	lsrs	r0, r0, #8
1000e8e8:	8010      	strh	r0, [r2, #0]
1000e8ea:	784b      	ldrb	r3, [r1, #1]
1000e8ec:	0218      	lsls	r0, r3, #8
1000e8ee:	788b      	ldrb	r3, [r1, #2]
1000e8f0:	041b      	lsls	r3, r3, #16
1000e8f2:	4303      	orrs	r3, r0
1000e8f4:	7808      	ldrb	r0, [r1, #0]
1000e8f6:	4303      	orrs	r3, r0
1000e8f8:	78c8      	ldrb	r0, [r1, #3]
1000e8fa:	0600      	lsls	r0, r0, #24
1000e8fc:	4303      	orrs	r3, r0
1000e8fe:	6053      	str	r3, [r2, #4]
1000e900:	794b      	ldrb	r3, [r1, #5]
1000e902:	0218      	lsls	r0, r3, #8
1000e904:	798b      	ldrb	r3, [r1, #6]
1000e906:	041b      	lsls	r3, r3, #16
1000e908:	4303      	orrs	r3, r0
1000e90a:	7908      	ldrb	r0, [r1, #4]
1000e90c:	79c9      	ldrb	r1, [r1, #7]
1000e90e:	4303      	orrs	r3, r0
1000e910:	0609      	lsls	r1, r1, #24
1000e912:	430b      	orrs	r3, r1
1000e914:	2000      	movs	r0, #0
1000e916:	6093      	str	r3, [r2, #8]
1000e918:	4770      	bx	lr
	...

1000e91c <gapc_peer_att_info_ind_handler>:
1000e91c:	b510      	push	{r4, lr}
1000e91e:	0a00      	lsrs	r0, r0, #8
1000e920:	8010      	strh	r0, [r2, #0]
1000e922:	7808      	ldrb	r0, [r1, #0]
1000e924:	7090      	strb	r0, [r2, #2]
1000e926:	788b      	ldrb	r3, [r1, #2]
1000e928:	784c      	ldrb	r4, [r1, #1]
1000e92a:	021b      	lsls	r3, r3, #8
1000e92c:	4323      	orrs	r3, r4
1000e92e:	8093      	strh	r3, [r2, #4]
1000e930:	2801      	cmp	r0, #1
1000e932:	d027      	beq.n	1000e984 <gapc_peer_att_info_ind_handler+0x68>
1000e934:	2800      	cmp	r0, #0
1000e936:	d017      	beq.n	1000e968 <gapc_peer_att_info_ind_handler+0x4c>
1000e938:	2802      	cmp	r0, #2
1000e93a:	d12a      	bne.n	1000e992 <gapc_peer_att_info_ind_handler+0x76>
1000e93c:	790b      	ldrb	r3, [r1, #4]
1000e93e:	78c8      	ldrb	r0, [r1, #3]
1000e940:	021b      	lsls	r3, r3, #8
1000e942:	4303      	orrs	r3, r0
1000e944:	8113      	strh	r3, [r2, #8]
1000e946:	798b      	ldrb	r3, [r1, #6]
1000e948:	7948      	ldrb	r0, [r1, #5]
1000e94a:	021b      	lsls	r3, r3, #8
1000e94c:	4303      	orrs	r3, r0
1000e94e:	80d3      	strh	r3, [r2, #6]
1000e950:	7a0b      	ldrb	r3, [r1, #8]
1000e952:	79c8      	ldrb	r0, [r1, #7]
1000e954:	021b      	lsls	r3, r3, #8
1000e956:	4303      	orrs	r3, r0
1000e958:	8193      	strh	r3, [r2, #12]
1000e95a:	7a8b      	ldrb	r3, [r1, #10]
1000e95c:	7a49      	ldrb	r1, [r1, #9]
1000e95e:	021b      	lsls	r3, r3, #8
1000e960:	430b      	orrs	r3, r1
1000e962:	8153      	strh	r3, [r2, #10]
1000e964:	2306      	movs	r3, #6
1000e966:	e013      	b.n	1000e990 <gapc_peer_att_info_ind_handler+0x74>
1000e968:	1c14      	adds	r4, r2, #0
1000e96a:	1c20      	adds	r0, r4, #0
1000e96c:	790a      	ldrb	r2, [r1, #4]
1000e96e:	78cb      	ldrb	r3, [r1, #3]
1000e970:	0212      	lsls	r2, r2, #8
1000e972:	431a      	orrs	r2, r3
1000e974:	80e2      	strh	r2, [r4, #6]
1000e976:	4b07      	ldr	r3, [pc, #28]	; (1000e994 <gapc_peer_att_info_ind_handler+0x78>)
1000e978:	3008      	adds	r0, #8
1000e97a:	3105      	adds	r1, #5
1000e97c:	4798      	blx	r3
1000e97e:	2302      	movs	r3, #2
1000e980:	70a3      	strb	r3, [r4, #2]
1000e982:	e006      	b.n	1000e992 <gapc_peer_att_info_ind_handler+0x76>
1000e984:	790b      	ldrb	r3, [r1, #4]
1000e986:	78c9      	ldrb	r1, [r1, #3]
1000e988:	021b      	lsls	r3, r3, #8
1000e98a:	430b      	orrs	r3, r1
1000e98c:	80d3      	strh	r3, [r2, #6]
1000e98e:	2305      	movs	r3, #5
1000e990:	7093      	strb	r3, [r2, #2]
1000e992:	bd10      	pop	{r4, pc}
1000e994:	100115bf 	.word	0x100115bf

1000e998 <gapc_con_channel_map_ind_handler>:
1000e998:	b508      	push	{r3, lr}
1000e99a:	2300      	movs	r3, #0
1000e99c:	0a00      	lsrs	r0, r0, #8
1000e99e:	7013      	strb	r3, [r2, #0]
1000e9a0:	8050      	strh	r0, [r2, #2]
1000e9a2:	4b02      	ldr	r3, [pc, #8]	; (1000e9ac <gapc_con_channel_map_ind_handler+0x14>)
1000e9a4:	1d10      	adds	r0, r2, #4
1000e9a6:	2205      	movs	r2, #5
1000e9a8:	4798      	blx	r3
1000e9aa:	bd08      	pop	{r3, pc}
1000e9ac:	100115bf 	.word	0x100115bf

1000e9b0 <gapc_lecb_connected>:
1000e9b0:	7843      	ldrb	r3, [r0, #1]
1000e9b2:	7802      	ldrb	r2, [r0, #0]
1000e9b4:	021b      	lsls	r3, r3, #8
1000e9b6:	4313      	orrs	r3, r2
1000e9b8:	800b      	strh	r3, [r1, #0]
1000e9ba:	78c3      	ldrb	r3, [r0, #3]
1000e9bc:	7882      	ldrb	r2, [r0, #2]
1000e9be:	021b      	lsls	r3, r3, #8
1000e9c0:	4313      	orrs	r3, r2
1000e9c2:	804b      	strh	r3, [r1, #2]
1000e9c4:	7943      	ldrb	r3, [r0, #5]
1000e9c6:	7902      	ldrb	r2, [r0, #4]
1000e9c8:	021b      	lsls	r3, r3, #8
1000e9ca:	4313      	orrs	r3, r2
1000e9cc:	808b      	strh	r3, [r1, #4]
1000e9ce:	79c3      	ldrb	r3, [r0, #7]
1000e9d0:	7982      	ldrb	r2, [r0, #6]
1000e9d2:	021b      	lsls	r3, r3, #8
1000e9d4:	4313      	orrs	r3, r2
1000e9d6:	80cb      	strh	r3, [r1, #6]
1000e9d8:	2300      	movs	r3, #0
1000e9da:	720b      	strb	r3, [r1, #8]
1000e9dc:	4770      	bx	lr

1000e9de <gapc_lecb_disconnected>:
1000e9de:	7843      	ldrb	r3, [r0, #1]
1000e9e0:	7802      	ldrb	r2, [r0, #0]
1000e9e2:	021b      	lsls	r3, r3, #8
1000e9e4:	4313      	orrs	r3, r2
1000e9e6:	800b      	strh	r3, [r1, #0]
1000e9e8:	78c3      	ldrb	r3, [r0, #3]
1000e9ea:	7882      	ldrb	r2, [r0, #2]
1000e9ec:	021b      	lsls	r3, r3, #8
1000e9ee:	4313      	orrs	r3, r2
1000e9f0:	804b      	strh	r3, [r1, #2]
1000e9f2:	4770      	bx	lr

1000e9f4 <gapc_lecb_connect_req_ind>:
1000e9f4:	7843      	ldrb	r3, [r0, #1]
1000e9f6:	7802      	ldrb	r2, [r0, #0]
1000e9f8:	021b      	lsls	r3, r3, #8
1000e9fa:	4313      	orrs	r3, r2
1000e9fc:	800b      	strh	r3, [r1, #0]
1000e9fe:	78c3      	ldrb	r3, [r0, #3]
1000ea00:	7882      	ldrb	r2, [r0, #2]
1000ea02:	021b      	lsls	r3, r3, #8
1000ea04:	4313      	orrs	r3, r2
1000ea06:	804b      	strh	r3, [r1, #2]
1000ea08:	7943      	ldrb	r3, [r0, #5]
1000ea0a:	7902      	ldrb	r2, [r0, #4]
1000ea0c:	021b      	lsls	r3, r3, #8
1000ea0e:	4313      	orrs	r3, r2
1000ea10:	808b      	strh	r3, [r1, #4]
1000ea12:	79c3      	ldrb	r3, [r0, #7]
1000ea14:	7982      	ldrb	r2, [r0, #6]
1000ea16:	021b      	lsls	r3, r3, #8
1000ea18:	4313      	orrs	r3, r2
1000ea1a:	80cb      	strh	r3, [r1, #6]
1000ea1c:	4770      	bx	lr

1000ea1e <gapc_lecb_add_credit_resp_handler>:
1000ea1e:	7843      	ldrb	r3, [r0, #1]
1000ea20:	7802      	ldrb	r2, [r0, #0]
1000ea22:	021b      	lsls	r3, r3, #8
1000ea24:	4313      	orrs	r3, r2
1000ea26:	800b      	strh	r3, [r1, #0]
1000ea28:	78c3      	ldrb	r3, [r0, #3]
1000ea2a:	7882      	ldrb	r2, [r0, #2]
1000ea2c:	021b      	lsls	r3, r3, #8
1000ea2e:	4313      	orrs	r3, r2
1000ea30:	804b      	strh	r3, [r1, #2]
1000ea32:	7943      	ldrb	r3, [r0, #5]
1000ea34:	7902      	ldrb	r2, [r0, #4]
1000ea36:	021b      	lsls	r3, r3, #8
1000ea38:	4313      	orrs	r3, r2
1000ea3a:	808b      	strh	r3, [r1, #4]
1000ea3c:	4770      	bx	lr
	...

1000ea40 <gapm_reset_req_handler>:
1000ea40:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ea42:	466b      	mov	r3, sp
1000ea44:	4915      	ldr	r1, [pc, #84]	; (1000ea9c <gapm_reset_req_handler+0x5c>)
1000ea46:	4816      	ldr	r0, [pc, #88]	; (1000eaa0 <gapm_reset_req_handler+0x60>)
1000ea48:	880c      	ldrh	r4, [r1, #0]
1000ea4a:	8809      	ldrh	r1, [r1, #0]
1000ea4c:	1ddd      	adds	r5, r3, #7
1000ea4e:	0a09      	lsrs	r1, r1, #8
1000ea50:	2300      	movs	r3, #0
1000ea52:	2202      	movs	r2, #2
1000ea54:	7141      	strb	r1, [r0, #5]
1000ea56:	26d0      	movs	r6, #208	; 0xd0
1000ea58:	2101      	movs	r1, #1
1000ea5a:	7104      	strb	r4, [r0, #4]
1000ea5c:	4c11      	ldr	r4, [pc, #68]	; (1000eaa4 <gapm_reset_req_handler+0x64>)
1000ea5e:	702b      	strb	r3, [r5, #0]
1000ea60:	7002      	strb	r2, [r0, #0]
1000ea62:	70c3      	strb	r3, [r0, #3]
1000ea64:	320b      	adds	r2, #11
1000ea66:	7201      	strb	r1, [r0, #8]
1000ea68:	7181      	strb	r1, [r0, #6]
1000ea6a:	71c3      	strb	r3, [r0, #7]
1000ea6c:	3108      	adds	r1, #8
1000ea6e:	4b0e      	ldr	r3, [pc, #56]	; (1000eaa8 <gapm_reset_req_handler+0x68>)
1000ea70:	0136      	lsls	r6, r6, #4
1000ea72:	7042      	strb	r2, [r0, #1]
1000ea74:	7082      	strb	r2, [r0, #2]
1000ea76:	80a2      	strh	r2, [r4, #4]
1000ea78:	8026      	strh	r6, [r4, #0]
1000ea7a:	4798      	blx	r3
1000ea7c:	1c28      	adds	r0, r5, #0
1000ea7e:	4b0b      	ldr	r3, [pc, #44]	; (1000eaac <gapm_reset_req_handler+0x6c>)
1000ea80:	4798      	blx	r3
1000ea82:	782b      	ldrb	r3, [r5, #0]
1000ea84:	20e2      	movs	r0, #226	; 0xe2
1000ea86:	2b00      	cmp	r3, #0
1000ea88:	d106      	bne.n	1000ea98 <gapm_reset_req_handler+0x58>
1000ea8a:	68a3      	ldr	r3, [r4, #8]
1000ea8c:	20e2      	movs	r0, #226	; 0xe2
1000ea8e:	781a      	ldrb	r2, [r3, #0]
1000ea90:	785b      	ldrb	r3, [r3, #1]
1000ea92:	2a01      	cmp	r2, #1
1000ea94:	d100      	bne.n	1000ea98 <gapm_reset_req_handler+0x58>
1000ea96:	1c18      	adds	r0, r3, #0
1000ea98:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ea9a:	46c0      	nop			; (mov r8, r8)
1000ea9c:	10015b9c 	.word	0x10015b9c
1000eaa0:	10015f0c 	.word	0x10015f0c
1000eaa4:	10015b90 	.word	0x10015b90
1000eaa8:	1000de69 	.word	0x1000de69
1000eaac:	1000decd 	.word	0x1000decd

1000eab0 <gapm_set_dev_config_cmd_handler>:
1000eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eab2:	b089      	sub	sp, #36	; 0x24
1000eab4:	9303      	str	r3, [sp, #12]
1000eab6:	ab0e      	add	r3, sp, #56	; 0x38
1000eab8:	781b      	ldrb	r3, [r3, #0]
1000eaba:	4c37      	ldr	r4, [pc, #220]	; (1000eb98 <gapm_set_dev_config_cmd_handler+0xe8>)
1000eabc:	9304      	str	r3, [sp, #16]
1000eabe:	ab0f      	add	r3, sp, #60	; 0x3c
1000eac0:	781b      	ldrb	r3, [r3, #0]
1000eac2:	270d      	movs	r7, #13
1000eac4:	9305      	str	r3, [sp, #20]
1000eac6:	ab10      	add	r3, sp, #64	; 0x40
1000eac8:	881b      	ldrh	r3, [r3, #0]
1000eaca:	72a1      	strb	r1, [r4, #10]
1000eacc:	9300      	str	r3, [sp, #0]
1000eace:	ab11      	add	r3, sp, #68	; 0x44
1000ead0:	881b      	ldrh	r3, [r3, #0]
1000ead2:	0a09      	lsrs	r1, r1, #8
1000ead4:	9301      	str	r3, [sp, #4]
1000ead6:	ab12      	add	r3, sp, #72	; 0x48
1000ead8:	881b      	ldrh	r3, [r3, #0]
1000eada:	7260      	strb	r0, [r4, #9]
1000eadc:	9302      	str	r3, [sp, #8]
1000eade:	ab06      	add	r3, sp, #24
1000eae0:	1dde      	adds	r6, r3, #7
1000eae2:	2300      	movs	r3, #0
1000eae4:	7033      	strb	r3, [r6, #0]
1000eae6:	2304      	movs	r3, #4
1000eae8:	7023      	strb	r3, [r4, #0]
1000eaea:	2300      	movs	r3, #0
1000eaec:	70e3      	strb	r3, [r4, #3]
1000eaee:	4b2b      	ldr	r3, [pc, #172]	; (1000eb9c <gapm_set_dev_config_cmd_handler+0xec>)
1000eaf0:	72e1      	strb	r1, [r4, #11]
1000eaf2:	881d      	ldrh	r5, [r3, #0]
1000eaf4:	881b      	ldrh	r3, [r3, #0]
1000eaf6:	1c11      	adds	r1, r2, #0
1000eaf8:	0a1b      	lsrs	r3, r3, #8
1000eafa:	7163      	strb	r3, [r4, #5]
1000eafc:	2303      	movs	r3, #3
1000eafe:	7125      	strb	r5, [r4, #4]
1000eb00:	2206      	movs	r2, #6
1000eb02:	4d27      	ldr	r5, [pc, #156]	; (1000eba0 <gapm_set_dev_config_cmd_handler+0xf0>)
1000eb04:	4827      	ldr	r0, [pc, #156]	; (1000eba4 <gapm_set_dev_config_cmd_handler+0xf4>)
1000eb06:	7223      	strb	r3, [r4, #8]
1000eb08:	7067      	strb	r7, [r4, #1]
1000eb0a:	70a7      	strb	r7, [r4, #2]
1000eb0c:	47a8      	blx	r5
1000eb0e:	9903      	ldr	r1, [sp, #12]
1000eb10:	2210      	movs	r2, #16
1000eb12:	4825      	ldr	r0, [pc, #148]	; (1000eba8 <gapm_set_dev_config_cmd_handler+0xf8>)
1000eb14:	47a8      	blx	r5
1000eb16:	466a      	mov	r2, sp
1000eb18:	7c12      	ldrb	r2, [r2, #16]
1000eb1a:	1ce3      	adds	r3, r4, #3
1000eb1c:	77da      	strb	r2, [r3, #31]
1000eb1e:	466a      	mov	r2, sp
1000eb20:	7d12      	ldrb	r2, [r2, #20]
1000eb22:	1d23      	adds	r3, r4, #4
1000eb24:	77da      	strb	r2, [r3, #31]
1000eb26:	466a      	mov	r2, sp
1000eb28:	7812      	ldrb	r2, [r2, #0]
1000eb2a:	1d63      	adds	r3, r4, #5
1000eb2c:	77da      	strb	r2, [r3, #31]
1000eb2e:	9b00      	ldr	r3, [sp, #0]
1000eb30:	1da2      	adds	r2, r4, #6
1000eb32:	0a1b      	lsrs	r3, r3, #8
1000eb34:	77d3      	strb	r3, [r2, #31]
1000eb36:	466a      	mov	r2, sp
1000eb38:	7912      	ldrb	r2, [r2, #4]
1000eb3a:	1de3      	adds	r3, r4, #7
1000eb3c:	77da      	strb	r2, [r3, #31]
1000eb3e:	1c22      	adds	r2, r4, #0
1000eb40:	9b01      	ldr	r3, [sp, #4]
1000eb42:	3208      	adds	r2, #8
1000eb44:	0a1b      	lsrs	r3, r3, #8
1000eb46:	77d3      	strb	r3, [r2, #31]
1000eb48:	466a      	mov	r2, sp
1000eb4a:	1c23      	adds	r3, r4, #0
1000eb4c:	7a12      	ldrb	r2, [r2, #8]
1000eb4e:	3328      	adds	r3, #40	; 0x28
1000eb50:	701a      	strb	r2, [r3, #0]
1000eb52:	1c22      	adds	r2, r4, #0
1000eb54:	9b02      	ldr	r3, [sp, #8]
1000eb56:	3229      	adds	r2, #41	; 0x29
1000eb58:	0a1b      	lsrs	r3, r3, #8
1000eb5a:	7013      	strb	r3, [r2, #0]
1000eb5c:	23d0      	movs	r3, #208	; 0xd0
1000eb5e:	4d13      	ldr	r5, [pc, #76]	; (1000ebac <gapm_set_dev_config_cmd_handler+0xfc>)
1000eb60:	011b      	lsls	r3, r3, #4
1000eb62:	802b      	strh	r3, [r5, #0]
1000eb64:	2322      	movs	r3, #34	; 0x22
1000eb66:	71a3      	strb	r3, [r4, #6]
1000eb68:	2300      	movs	r3, #0
1000eb6a:	212a      	movs	r1, #42	; 0x2a
1000eb6c:	71e3      	strb	r3, [r4, #7]
1000eb6e:	1c20      	adds	r0, r4, #0
1000eb70:	4b0f      	ldr	r3, [pc, #60]	; (1000ebb0 <gapm_set_dev_config_cmd_handler+0x100>)
1000eb72:	80af      	strh	r7, [r5, #4]
1000eb74:	4798      	blx	r3
1000eb76:	1c30      	adds	r0, r6, #0
1000eb78:	4b0e      	ldr	r3, [pc, #56]	; (1000ebb4 <gapm_set_dev_config_cmd_handler+0x104>)
1000eb7a:	4798      	blx	r3
1000eb7c:	7833      	ldrb	r3, [r6, #0]
1000eb7e:	20e2      	movs	r0, #226	; 0xe2
1000eb80:	2b00      	cmp	r3, #0
1000eb82:	d106      	bne.n	1000eb92 <gapm_set_dev_config_cmd_handler+0xe2>
1000eb84:	68ab      	ldr	r3, [r5, #8]
1000eb86:	20e2      	movs	r0, #226	; 0xe2
1000eb88:	781a      	ldrb	r2, [r3, #0]
1000eb8a:	785b      	ldrb	r3, [r3, #1]
1000eb8c:	2a03      	cmp	r2, #3
1000eb8e:	d100      	bne.n	1000eb92 <gapm_set_dev_config_cmd_handler+0xe2>
1000eb90:	1c18      	adds	r0, r3, #0
1000eb92:	b009      	add	sp, #36	; 0x24
1000eb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb96:	46c0      	nop			; (mov r8, r8)
1000eb98:	10015f0c 	.word	0x10015f0c
1000eb9c:	10015b9c 	.word	0x10015b9c
1000eba0:	100115bf 	.word	0x100115bf
1000eba4:	10015f18 	.word	0x10015f18
1000eba8:	10015f1e 	.word	0x10015f1e
1000ebac:	10015b90 	.word	0x10015b90
1000ebb0:	1000de69 	.word	0x1000de69
1000ebb4:	1000decd 	.word	0x1000decd

1000ebb8 <gapm_get_dev_config_cmd_handler>:
1000ebb8:	4684      	mov	ip, r0
1000ebba:	4663      	mov	r3, ip
1000ebbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebbe:	b085      	sub	sp, #20
1000ebc0:	9100      	str	r1, [sp, #0]
1000ebc2:	20cf      	movs	r0, #207	; 0xcf
1000ebc4:	2b01      	cmp	r3, #1
1000ebc6:	d854      	bhi.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ebc8:	2900      	cmp	r1, #0
1000ebca:	d052      	beq.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ebcc:	2200      	movs	r2, #0
1000ebce:	492a      	ldr	r1, [pc, #168]	; (1000ec78 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ebd0:	ab02      	add	r3, sp, #8
1000ebd2:	880c      	ldrh	r4, [r1, #0]
1000ebd4:	8809      	ldrh	r1, [r1, #0]
1000ebd6:	1d9f      	adds	r7, r3, #6
1000ebd8:	719a      	strb	r2, [r3, #6]
1000ebda:	4b28      	ldr	r3, [pc, #160]	; (1000ec7c <gapm_get_dev_config_cmd_handler+0xc4>)
1000ebdc:	0a09      	lsrs	r1, r1, #8
1000ebde:	250d      	movs	r5, #13
1000ebe0:	2606      	movs	r6, #6
1000ebe2:	7159      	strb	r1, [r3, #5]
1000ebe4:	4661      	mov	r1, ip
1000ebe6:	701e      	strb	r6, [r3, #0]
1000ebe8:	705d      	strb	r5, [r3, #1]
1000ebea:	709d      	strb	r5, [r3, #2]
1000ebec:	70da      	strb	r2, [r3, #3]
1000ebee:	711c      	strb	r4, [r3, #4]
1000ebf0:	2901      	cmp	r1, #1
1000ebf2:	d13e      	bne.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ebf4:	21d0      	movs	r1, #208	; 0xd0
1000ebf6:	4c22      	ldr	r4, [pc, #136]	; (1000ec80 <gapm_get_dev_config_cmd_handler+0xc8>)
1000ebf8:	0109      	lsls	r1, r1, #4
1000ebfa:	8061      	strh	r1, [r4, #2]
1000ebfc:	4921      	ldr	r1, [pc, #132]	; (1000ec84 <gapm_get_dev_config_cmd_handler+0xcc>)
1000ebfe:	71da      	strb	r2, [r3, #7]
1000ec00:	8021      	strh	r1, [r4, #0]
1000ec02:	4661      	mov	r1, ip
1000ec04:	721e      	strb	r6, [r3, #8]
1000ec06:	7199      	strb	r1, [r3, #6]
1000ec08:	1c18      	adds	r0, r3, #0
1000ec0a:	2109      	movs	r1, #9
1000ec0c:	4b1e      	ldr	r3, [pc, #120]	; (1000ec88 <gapm_get_dev_config_cmd_handler+0xd0>)
1000ec0e:	80a5      	strh	r5, [r4, #4]
1000ec10:	4798      	blx	r3
1000ec12:	1c38      	adds	r0, r7, #0
1000ec14:	4b1d      	ldr	r3, [pc, #116]	; (1000ec8c <gapm_get_dev_config_cmd_handler+0xd4>)
1000ec16:	4798      	blx	r3
1000ec18:	783b      	ldrb	r3, [r7, #0]
1000ec1a:	20e2      	movs	r0, #226	; 0xe2
1000ec1c:	9301      	str	r3, [sp, #4]
1000ec1e:	2b00      	cmp	r3, #0
1000ec20:	d127      	bne.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ec22:	8821      	ldrh	r1, [r4, #0]
1000ec24:	4a1a      	ldr	r2, [pc, #104]	; (1000ec90 <gapm_get_dev_config_cmd_handler+0xd8>)
1000ec26:	68a7      	ldr	r7, [r4, #8]
1000ec28:	3b01      	subs	r3, #1
1000ec2a:	4291      	cmp	r1, r2
1000ec2c:	d001      	beq.n	1000ec32 <gapm_get_dev_config_cmd_handler+0x7a>
1000ec2e:	8023      	strh	r3, [r4, #0]
1000ec30:	e01a      	b.n	1000ec68 <gapm_get_dev_config_cmd_handler+0xb0>
1000ec32:	8063      	strh	r3, [r4, #2]
1000ec34:	9b00      	ldr	r3, [sp, #0]
1000ec36:	1c39      	adds	r1, r7, #0
1000ec38:	1c58      	adds	r0, r3, #1
1000ec3a:	1c32      	adds	r2, r6, #0
1000ec3c:	4b15      	ldr	r3, [pc, #84]	; (1000ec94 <gapm_get_dev_config_cmd_handler+0xdc>)
1000ec3e:	4798      	blx	r3
1000ec40:	79bb      	ldrb	r3, [r7, #6]
1000ec42:	9a00      	ldr	r2, [sp, #0]
1000ec44:	7013      	strb	r3, [r2, #0]
1000ec46:	23d0      	movs	r3, #208	; 0xd0
1000ec48:	011b      	lsls	r3, r3, #4
1000ec4a:	8023      	strh	r3, [r4, #0]
1000ec4c:	ab02      	add	r3, sp, #8
1000ec4e:	80a5      	strh	r5, [r4, #4]
1000ec50:	1ddd      	adds	r5, r3, #7
1000ec52:	466b      	mov	r3, sp
1000ec54:	791b      	ldrb	r3, [r3, #4]
1000ec56:	1c28      	adds	r0, r5, #0
1000ec58:	702b      	strb	r3, [r5, #0]
1000ec5a:	4b0c      	ldr	r3, [pc, #48]	; (1000ec8c <gapm_get_dev_config_cmd_handler+0xd4>)
1000ec5c:	4798      	blx	r3
1000ec5e:	782b      	ldrb	r3, [r5, #0]
1000ec60:	20d0      	movs	r0, #208	; 0xd0
1000ec62:	2b00      	cmp	r3, #0
1000ec64:	d105      	bne.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ec66:	68a7      	ldr	r7, [r4, #8]
1000ec68:	783b      	ldrb	r3, [r7, #0]
1000ec6a:	7878      	ldrb	r0, [r7, #1]
1000ec6c:	2b06      	cmp	r3, #6
1000ec6e:	d000      	beq.n	1000ec72 <gapm_get_dev_config_cmd_handler+0xba>
1000ec70:	20e2      	movs	r0, #226	; 0xe2
1000ec72:	b005      	add	sp, #20
1000ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec76:	46c0      	nop			; (mov r8, r8)
1000ec78:	10015b9c 	.word	0x10015b9c
1000ec7c:	10015f0c 	.word	0x10015f0c
1000ec80:	10015b90 	.word	0x10015b90
1000ec84:	00000d08 	.word	0x00000d08
1000ec88:	1000de69 	.word	0x1000de69
1000ec8c:	1000decd 	.word	0x1000decd
1000ec90:	0000ffff 	.word	0x0000ffff
1000ec94:	100115bf 	.word	0x100115bf

1000ec98 <gapm_cancel_cmd_handler>:
1000ec98:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ec9a:	4916      	ldr	r1, [pc, #88]	; (1000ecf4 <gapm_cancel_cmd_handler+0x5c>)
1000ec9c:	4816      	ldr	r0, [pc, #88]	; (1000ecf8 <gapm_cancel_cmd_handler+0x60>)
1000ec9e:	880c      	ldrh	r4, [r1, #0]
1000eca0:	8809      	ldrh	r1, [r1, #0]
1000eca2:	466b      	mov	r3, sp
1000eca4:	0a09      	lsrs	r1, r1, #8
1000eca6:	7141      	strb	r1, [r0, #5]
1000eca8:	2102      	movs	r1, #2
1000ecaa:	2203      	movs	r2, #3
1000ecac:	7201      	strb	r1, [r0, #8]
1000ecae:	21d0      	movs	r1, #208	; 0xd0
1000ecb0:	1ddd      	adds	r5, r3, #7
1000ecb2:	2300      	movs	r3, #0
1000ecb4:	7104      	strb	r4, [r0, #4]
1000ecb6:	4c11      	ldr	r4, [pc, #68]	; (1000ecfc <gapm_cancel_cmd_handler+0x64>)
1000ecb8:	7002      	strb	r2, [r0, #0]
1000ecba:	0109      	lsls	r1, r1, #4
1000ecbc:	320a      	adds	r2, #10
1000ecbe:	702b      	strb	r3, [r5, #0]
1000ecc0:	7042      	strb	r2, [r0, #1]
1000ecc2:	7082      	strb	r2, [r0, #2]
1000ecc4:	70c3      	strb	r3, [r0, #3]
1000ecc6:	8021      	strh	r1, [r4, #0]
1000ecc8:	80a2      	strh	r2, [r4, #4]
1000ecca:	71c3      	strb	r3, [r0, #7]
1000eccc:	3a0c      	subs	r2, #12
1000ecce:	2109      	movs	r1, #9
1000ecd0:	4b0b      	ldr	r3, [pc, #44]	; (1000ed00 <gapm_cancel_cmd_handler+0x68>)
1000ecd2:	7182      	strb	r2, [r0, #6]
1000ecd4:	4798      	blx	r3
1000ecd6:	1c28      	adds	r0, r5, #0
1000ecd8:	4b0a      	ldr	r3, [pc, #40]	; (1000ed04 <gapm_cancel_cmd_handler+0x6c>)
1000ecda:	4798      	blx	r3
1000ecdc:	7828      	ldrb	r0, [r5, #0]
1000ecde:	2800      	cmp	r0, #0
1000ece0:	d001      	beq.n	1000ece6 <gapm_cancel_cmd_handler+0x4e>
1000ece2:	20e2      	movs	r0, #226	; 0xe2
1000ece4:	e004      	b.n	1000ecf0 <gapm_cancel_cmd_handler+0x58>
1000ece6:	68a3      	ldr	r3, [r4, #8]
1000ece8:	785b      	ldrb	r3, [r3, #1]
1000ecea:	2b44      	cmp	r3, #68	; 0x44
1000ecec:	d000      	beq.n	1000ecf0 <gapm_cancel_cmd_handler+0x58>
1000ecee:	1c18      	adds	r0, r3, #0
1000ecf0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ecf2:	46c0      	nop			; (mov r8, r8)
1000ecf4:	10015b9c 	.word	0x10015b9c
1000ecf8:	10015f0c 	.word	0x10015f0c
1000ecfc:	10015b90 	.word	0x10015b90
1000ed00:	1000de69 	.word	0x1000de69
1000ed04:	1000decd 	.word	0x1000decd

1000ed08 <gapm_dev_bdaddr_ind_handler>:
1000ed08:	b538      	push	{r3, r4, r5, lr}
1000ed0a:	1c05      	adds	r5, r0, #0
1000ed0c:	1c0c      	adds	r4, r1, #0
1000ed0e:	1c48      	adds	r0, r1, #1
1000ed10:	2206      	movs	r2, #6
1000ed12:	1c29      	adds	r1, r5, #0
1000ed14:	4b02      	ldr	r3, [pc, #8]	; (1000ed20 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ed16:	4798      	blx	r3
1000ed18:	79ab      	ldrb	r3, [r5, #6]
1000ed1a:	2000      	movs	r0, #0
1000ed1c:	7023      	strb	r3, [r4, #0]
1000ed1e:	bd38      	pop	{r3, r4, r5, pc}
1000ed20:	100115bf 	.word	0x100115bf

1000ed24 <gapm_cmp_evt>:
1000ed24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed26:	7803      	ldrb	r3, [r0, #0]
1000ed28:	7845      	ldrb	r5, [r0, #1]
1000ed2a:	3b0c      	subs	r3, #12
1000ed2c:	1e18      	subs	r0, r3, #0
1000ed2e:	280b      	cmp	r0, #11
1000ed30:	d900      	bls.n	1000ed34 <gapm_cmp_evt+0x10>
1000ed32:	e08d      	b.n	1000ee50 <gapm_cmp_evt+0x12c>
1000ed34:	1c0c      	adds	r4, r1, #0
1000ed36:	f000 fbbf 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000ed3a:	1952      	.short	0x1952
1000ed3c:	068b1919 	.word	0x068b1919
1000ed40:	8b595906 	.word	0x8b595906
1000ed44:	0d8b      	.short	0x0d8b
1000ed46:	2300      	movs	r3, #0
1000ed48:	2d45      	cmp	r5, #69	; 0x45
1000ed4a:	d000      	beq.n	1000ed4e <gapm_cmp_evt+0x2a>
1000ed4c:	1c2b      	adds	r3, r5, #0
1000ed4e:	7023      	strb	r3, [r4, #0]
1000ed50:	2002      	movs	r0, #2
1000ed52:	e07e      	b.n	1000ee52 <gapm_cmp_evt+0x12e>
1000ed54:	203b      	movs	r0, #59	; 0x3b
1000ed56:	2d00      	cmp	r5, #0
1000ed58:	d100      	bne.n	1000ed5c <gapm_cmp_evt+0x38>
1000ed5a:	e07a      	b.n	1000ee52 <gapm_cmp_evt+0x12e>
1000ed5c:	700d      	strb	r5, [r1, #0]
1000ed5e:	1c48      	adds	r0, r1, #1
1000ed60:	2210      	movs	r2, #16
1000ed62:	2100      	movs	r1, #0
1000ed64:	4b3b      	ldr	r3, [pc, #236]	; (1000ee54 <gapm_cmp_evt+0x130>)
1000ed66:	4798      	blx	r3
1000ed68:	200f      	movs	r0, #15
1000ed6a:	e072      	b.n	1000ee52 <gapm_cmp_evt+0x12e>
1000ed6c:	2d00      	cmp	r5, #0
1000ed6e:	d134      	bne.n	1000edda <gapm_cmp_evt+0xb6>
1000ed70:	4b39      	ldr	r3, [pc, #228]	; (1000ee58 <gapm_cmp_evt+0x134>)
1000ed72:	4798      	blx	r3
1000ed74:	1e43      	subs	r3, r0, #1
1000ed76:	b2db      	uxtb	r3, r3
1000ed78:	1c28      	adds	r0, r5, #0
1000ed7a:	2b06      	cmp	r3, #6
1000ed7c:	d869      	bhi.n	1000ee52 <gapm_cmp_evt+0x12e>
1000ed7e:	466b      	mov	r3, sp
1000ed80:	4e36      	ldr	r6, [pc, #216]	; (1000ee5c <gapm_cmp_evt+0x138>)
1000ed82:	1dd9      	adds	r1, r3, #7
1000ed84:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ed86:	4b36      	ldr	r3, [pc, #216]	; (1000ee60 <gapm_cmp_evt+0x13c>)
1000ed88:	4798      	blx	r3
1000ed8a:	2312      	movs	r3, #18
1000ed8c:	4358      	muls	r0, r3
1000ed8e:	4935      	ldr	r1, [pc, #212]	; (1000ee64 <gapm_cmp_evt+0x140>)
1000ed90:	1809      	adds	r1, r1, r0
1000ed92:	1c0b      	adds	r3, r1, #0
1000ed94:	894a      	ldrh	r2, [r1, #10]
1000ed96:	3308      	adds	r3, #8
1000ed98:	8122      	strh	r2, [r4, #8]
1000ed9a:	784f      	ldrb	r7, [r1, #1]
1000ed9c:	72a5      	strb	r5, [r4, #10]
1000ed9e:	7027      	strb	r7, [r4, #0]
1000eda0:	898a      	ldrh	r2, [r1, #12]
1000eda2:	1c60      	adds	r0, r4, #1
1000eda4:	81a2      	strh	r2, [r4, #12]
1000eda6:	88db      	ldrh	r3, [r3, #6]
1000eda8:	3102      	adds	r1, #2
1000edaa:	81e3      	strh	r3, [r4, #14]
1000edac:	89cb      	ldrh	r3, [r1, #14]
1000edae:	2206      	movs	r2, #6
1000edb0:	8223      	strh	r3, [r4, #16]
1000edb2:	4b2d      	ldr	r3, [pc, #180]	; (1000ee68 <gapm_cmp_evt+0x144>)
1000edb4:	4798      	blx	r3
1000edb6:	2f00      	cmp	r7, #0
1000edb8:	d00a      	beq.n	1000edd0 <gapm_cmp_evt+0xac>
1000edba:	79a3      	ldrb	r3, [r4, #6]
1000edbc:	223f      	movs	r2, #63	; 0x3f
1000edbe:	1c19      	adds	r1, r3, #0
1000edc0:	3501      	adds	r5, #1
1000edc2:	4391      	bics	r1, r2
1000edc4:	29c0      	cmp	r1, #192	; 0xc0
1000edc6:	d003      	beq.n	1000edd0 <gapm_cmp_evt+0xac>
1000edc8:	065b      	lsls	r3, r3, #25
1000edca:	0fdb      	lsrs	r3, r3, #31
1000edcc:	3502      	adds	r5, #2
1000edce:	1aed      	subs	r5, r5, r3
1000edd0:	2301      	movs	r3, #1
1000edd2:	425b      	negs	r3, r3
1000edd4:	7025      	strb	r5, [r4, #0]
1000edd6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000edd8:	e038      	b.n	1000ee4c <gapm_cmp_evt+0x128>
1000edda:	700d      	strb	r5, [r1, #0]
1000eddc:	e004      	b.n	1000ede8 <gapm_cmp_evt+0xc4>
1000edde:	2300      	movs	r3, #0
1000ede0:	2d45      	cmp	r5, #69	; 0x45
1000ede2:	d000      	beq.n	1000ede6 <gapm_cmp_evt+0xc2>
1000ede4:	1c2b      	adds	r3, r5, #0
1000ede6:	7023      	strb	r3, [r4, #0]
1000ede8:	2003      	movs	r0, #3
1000edea:	e032      	b.n	1000ee52 <gapm_cmp_evt+0x12e>
1000edec:	4e1b      	ldr	r6, [pc, #108]	; (1000ee5c <gapm_cmp_evt+0x138>)
1000edee:	2100      	movs	r1, #0
1000edf0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000edf2:	4b1b      	ldr	r3, [pc, #108]	; (1000ee60 <gapm_cmp_evt+0x13c>)
1000edf4:	4798      	blx	r3
1000edf6:	2807      	cmp	r0, #7
1000edf8:	d818      	bhi.n	1000ee2c <gapm_cmp_evt+0x108>
1000edfa:	2301      	movs	r3, #1
1000edfc:	425b      	negs	r3, r3
1000edfe:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ee00:	3313      	adds	r3, #19
1000ee02:	4358      	muls	r0, r3
1000ee04:	4917      	ldr	r1, [pc, #92]	; (1000ee64 <gapm_cmp_evt+0x140>)
1000ee06:	1809      	adds	r1, r1, r0
1000ee08:	1c0b      	adds	r3, r1, #0
1000ee0a:	894a      	ldrh	r2, [r1, #10]
1000ee0c:	3308      	adds	r3, #8
1000ee0e:	8122      	strh	r2, [r4, #8]
1000ee10:	784a      	ldrb	r2, [r1, #1]
1000ee12:	72a5      	strb	r5, [r4, #10]
1000ee14:	7022      	strb	r2, [r4, #0]
1000ee16:	898a      	ldrh	r2, [r1, #12]
1000ee18:	1c60      	adds	r0, r4, #1
1000ee1a:	81a2      	strh	r2, [r4, #12]
1000ee1c:	88db      	ldrh	r3, [r3, #6]
1000ee1e:	3102      	adds	r1, #2
1000ee20:	81e3      	strh	r3, [r4, #14]
1000ee22:	89cb      	ldrh	r3, [r1, #14]
1000ee24:	2206      	movs	r2, #6
1000ee26:	8223      	strh	r3, [r4, #16]
1000ee28:	4b0f      	ldr	r3, [pc, #60]	; (1000ee68 <gapm_cmp_evt+0x144>)
1000ee2a:	4798      	blx	r3
1000ee2c:	2200      	movs	r2, #0
1000ee2e:	7823      	ldrb	r3, [r4, #0]
1000ee30:	4293      	cmp	r3, r2
1000ee32:	d00a      	beq.n	1000ee4a <gapm_cmp_evt+0x126>
1000ee34:	79a3      	ldrb	r3, [r4, #6]
1000ee36:	323f      	adds	r2, #63	; 0x3f
1000ee38:	1c19      	adds	r1, r3, #0
1000ee3a:	4391      	bics	r1, r2
1000ee3c:	3a3e      	subs	r2, #62	; 0x3e
1000ee3e:	29c0      	cmp	r1, #192	; 0xc0
1000ee40:	d003      	beq.n	1000ee4a <gapm_cmp_evt+0x126>
1000ee42:	065b      	lsls	r3, r3, #25
1000ee44:	0fdb      	lsrs	r3, r3, #31
1000ee46:	3202      	adds	r2, #2
1000ee48:	1ad2      	subs	r2, r2, r3
1000ee4a:	7022      	strb	r2, [r4, #0]
1000ee4c:	2005      	movs	r0, #5
1000ee4e:	e000      	b.n	1000ee52 <gapm_cmp_evt+0x12e>
1000ee50:	2000      	movs	r0, #0
1000ee52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ee54:	100115d1 	.word	0x100115d1
1000ee58:	1000e075 	.word	0x1000e075
1000ee5c:	10015c2e 	.word	0x10015c2e
1000ee60:	1000e039 	.word	0x1000e039
1000ee64:	10015b9e 	.word	0x10015b9e
1000ee68:	100115bf 	.word	0x100115bf

1000ee6c <gapm_adv_report_evt_handler>:
1000ee6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ee6e:	7843      	ldrb	r3, [r0, #1]
1000ee70:	1c05      	adds	r5, r0, #0
1000ee72:	9301      	str	r3, [sp, #4]
1000ee74:	466b      	mov	r3, sp
1000ee76:	1c0c      	adds	r4, r1, #0
1000ee78:	791b      	ldrb	r3, [r3, #4]
1000ee7a:	7806      	ldrb	r6, [r0, #0]
1000ee7c:	2206      	movs	r2, #6
1000ee7e:	704b      	strb	r3, [r1, #1]
1000ee80:	1c88      	adds	r0, r1, #2
1000ee82:	4f1b      	ldr	r7, [pc, #108]	; (1000eef0 <gapm_adv_report_evt_handler+0x84>)
1000ee84:	1ca9      	adds	r1, r5, #2
1000ee86:	47b8      	blx	r7
1000ee88:	1c20      	adds	r0, r4, #0
1000ee8a:	1c29      	adds	r1, r5, #0
1000ee8c:	7a2a      	ldrb	r2, [r5, #8]
1000ee8e:	3008      	adds	r0, #8
1000ee90:	77c2      	strb	r2, [r0, #31]
1000ee92:	3109      	adds	r1, #9
1000ee94:	3528      	adds	r5, #40	; 0x28
1000ee96:	47b8      	blx	r7
1000ee98:	782b      	ldrb	r3, [r5, #0]
1000ee9a:	b25a      	sxtb	r2, r3
1000ee9c:	2a00      	cmp	r2, #0
1000ee9e:	da01      	bge.n	1000eea4 <gapm_adv_report_evt_handler+0x38>
1000eea0:	3301      	adds	r3, #1
1000eea2:	b2db      	uxtb	r3, r3
1000eea4:	1c22      	adds	r2, r4, #0
1000eea6:	3228      	adds	r2, #40	; 0x28
1000eea8:	7013      	strb	r3, [r2, #0]
1000eeaa:	2200      	movs	r2, #0
1000eeac:	9b01      	ldr	r3, [sp, #4]
1000eeae:	4293      	cmp	r3, r2
1000eeb0:	d00a      	beq.n	1000eec8 <gapm_adv_report_evt_handler+0x5c>
1000eeb2:	79e3      	ldrb	r3, [r4, #7]
1000eeb4:	323f      	adds	r2, #63	; 0x3f
1000eeb6:	1c19      	adds	r1, r3, #0
1000eeb8:	4391      	bics	r1, r2
1000eeba:	3a3e      	subs	r2, #62	; 0x3e
1000eebc:	29c0      	cmp	r1, #192	; 0xc0
1000eebe:	d003      	beq.n	1000eec8 <gapm_adv_report_evt_handler+0x5c>
1000eec0:	065b      	lsls	r3, r3, #25
1000eec2:	0fdb      	lsrs	r3, r3, #31
1000eec4:	3202      	adds	r2, #2
1000eec6:	1ad2      	subs	r2, r2, r3
1000eec8:	7062      	strb	r2, [r4, #1]
1000eeca:	2e04      	cmp	r6, #4
1000eecc:	d80f      	bhi.n	1000eeee <gapm_adv_report_evt_handler+0x82>
1000eece:	1c30      	adds	r0, r6, #0
1000eed0:	f000 faf2 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000eed4:	09070503 	.word	0x09070503
1000eed8:	0b          	.byte	0x0b
1000eed9:	00          	.byte	0x00
1000eeda:	2300      	movs	r3, #0
1000eedc:	e006      	b.n	1000eeec <gapm_adv_report_evt_handler+0x80>
1000eede:	2301      	movs	r3, #1
1000eee0:	e004      	b.n	1000eeec <gapm_adv_report_evt_handler+0x80>
1000eee2:	2302      	movs	r3, #2
1000eee4:	e002      	b.n	1000eeec <gapm_adv_report_evt_handler+0x80>
1000eee6:	2303      	movs	r3, #3
1000eee8:	e000      	b.n	1000eeec <gapm_adv_report_evt_handler+0x80>
1000eeea:	2305      	movs	r3, #5
1000eeec:	7023      	strb	r3, [r4, #0]
1000eeee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000eef0:	100115bf 	.word	0x100115bf

1000eef4 <gapm_resolv_addr_cmd_handler>:
1000eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eef6:	2314      	movs	r3, #20
1000eef8:	4c12      	ldr	r4, [pc, #72]	; (1000ef44 <gapm_resolv_addr_cmd_handler+0x50>)
1000eefa:	1c17      	adds	r7, r2, #0
1000eefc:	7023      	strb	r3, [r4, #0]
1000eefe:	3b07      	subs	r3, #7
1000ef00:	7063      	strb	r3, [r4, #1]
1000ef02:	70a3      	strb	r3, [r4, #2]
1000ef04:	2300      	movs	r3, #0
1000ef06:	70e3      	strb	r3, [r4, #3]
1000ef08:	4b0f      	ldr	r3, [pc, #60]	; (1000ef48 <gapm_resolv_addr_cmd_handler+0x54>)
1000ef0a:	1c05      	adds	r5, r0, #0
1000ef0c:	881a      	ldrh	r2, [r3, #0]
1000ef0e:	881b      	ldrh	r3, [r3, #0]
1000ef10:	4e0e      	ldr	r6, [pc, #56]	; (1000ef4c <gapm_resolv_addr_cmd_handler+0x58>)
1000ef12:	0a1b      	lsrs	r3, r3, #8
1000ef14:	7163      	strb	r3, [r4, #5]
1000ef16:	2317      	movs	r3, #23
1000ef18:	012d      	lsls	r5, r5, #4
1000ef1a:	7122      	strb	r2, [r4, #4]
1000ef1c:	7260      	strb	r0, [r4, #9]
1000ef1e:	2206      	movs	r2, #6
1000ef20:	480b      	ldr	r0, [pc, #44]	; (1000ef50 <gapm_resolv_addr_cmd_handler+0x5c>)
1000ef22:	7223      	strb	r3, [r4, #8]
1000ef24:	47b0      	blx	r6
1000ef26:	1c39      	adds	r1, r7, #0
1000ef28:	1c2a      	adds	r2, r5, #0
1000ef2a:	480a      	ldr	r0, [pc, #40]	; (1000ef54 <gapm_resolv_addr_cmd_handler+0x60>)
1000ef2c:	47b0      	blx	r6
1000ef2e:	1c29      	adds	r1, r5, #0
1000ef30:	3110      	adds	r1, #16
1000ef32:	1c0b      	adds	r3, r1, #0
1000ef34:	3b08      	subs	r3, #8
1000ef36:	71a3      	strb	r3, [r4, #6]
1000ef38:	121b      	asrs	r3, r3, #8
1000ef3a:	71e3      	strb	r3, [r4, #7]
1000ef3c:	1c20      	adds	r0, r4, #0
1000ef3e:	4b06      	ldr	r3, [pc, #24]	; (1000ef58 <gapm_resolv_addr_cmd_handler+0x64>)
1000ef40:	4798      	blx	r3
1000ef42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef44:	10015f0c 	.word	0x10015f0c
1000ef48:	10015b9c 	.word	0x10015b9c
1000ef4c:	100115bf 	.word	0x100115bf
1000ef50:	10015f16 	.word	0x10015f16
1000ef54:	10015f1c 	.word	0x10015f1c
1000ef58:	1000de69 	.word	0x1000de69

1000ef5c <gapm_addr_solved_ind_handler>:
1000ef5c:	b570      	push	{r4, r5, r6, lr}
1000ef5e:	1c04      	adds	r4, r0, #0
1000ef60:	1c08      	adds	r0, r1, #0
1000ef62:	1c0d      	adds	r5, r1, #0
1000ef64:	4e05      	ldr	r6, [pc, #20]	; (1000ef7c <gapm_addr_solved_ind_handler+0x20>)
1000ef66:	1c21      	adds	r1, r4, #0
1000ef68:	2206      	movs	r2, #6
1000ef6a:	3011      	adds	r0, #17
1000ef6c:	47b0      	blx	r6
1000ef6e:	1c68      	adds	r0, r5, #1
1000ef70:	1da1      	adds	r1, r4, #6
1000ef72:	2210      	movs	r2, #16
1000ef74:	47b0      	blx	r6
1000ef76:	2300      	movs	r3, #0
1000ef78:	702b      	strb	r3, [r5, #0]
1000ef7a:	bd70      	pop	{r4, r5, r6, pc}
1000ef7c:	100115bf 	.word	0x100115bf

1000ef80 <gapm_profile_added_ind_handler>:
1000ef80:	b510      	push	{r4, lr}
1000ef82:	7843      	ldrb	r3, [r0, #1]
1000ef84:	7902      	ldrb	r2, [r0, #4]
1000ef86:	7944      	ldrb	r4, [r0, #5]
1000ef88:	7800      	ldrb	r0, [r0, #0]
1000ef8a:	021b      	lsls	r3, r3, #8
1000ef8c:	4303      	orrs	r3, r0
1000ef8e:	2b1b      	cmp	r3, #27
1000ef90:	d104      	bne.n	1000ef9c <gapm_profile_added_ind_handler+0x1c>
1000ef92:	2300      	movs	r3, #0
1000ef94:	700b      	strb	r3, [r1, #0]
1000ef96:	0223      	lsls	r3, r4, #8
1000ef98:	4313      	orrs	r3, r2
1000ef9a:	804b      	strh	r3, [r1, #2]
1000ef9c:	203b      	movs	r0, #59	; 0x3b
1000ef9e:	bd10      	pop	{r4, pc}

1000efa0 <gattc_read_req_ind_parser>:
1000efa0:	7843      	ldrb	r3, [r0, #1]
1000efa2:	7802      	ldrb	r2, [r0, #0]
1000efa4:	021b      	lsls	r3, r3, #8
1000efa6:	4313      	orrs	r3, r2
1000efa8:	804b      	strh	r3, [r1, #2]
1000efaa:	4770      	bx	lr

1000efac <gattc_write_req_ind_parser>:
1000efac:	b508      	push	{r3, lr}
1000efae:	1c13      	adds	r3, r2, #0
1000efb0:	0a00      	lsrs	r0, r0, #8
1000efb2:	8010      	strh	r0, [r2, #0]
1000efb4:	784a      	ldrb	r2, [r1, #1]
1000efb6:	7808      	ldrb	r0, [r1, #0]
1000efb8:	0212      	lsls	r2, r2, #8
1000efba:	4302      	orrs	r2, r0
1000efbc:	805a      	strh	r2, [r3, #2]
1000efbe:	78ca      	ldrb	r2, [r1, #3]
1000efc0:	7888      	ldrb	r0, [r1, #2]
1000efc2:	0212      	lsls	r2, r2, #8
1000efc4:	4302      	orrs	r2, r0
1000efc6:	809a      	strh	r2, [r3, #4]
1000efc8:	794a      	ldrb	r2, [r1, #5]
1000efca:	7908      	ldrb	r0, [r1, #4]
1000efcc:	0212      	lsls	r2, r2, #8
1000efce:	4302      	orrs	r2, r0
1000efd0:	80da      	strh	r2, [r3, #6]
1000efd2:	3308      	adds	r3, #8
1000efd4:	1c18      	adds	r0, r3, #0
1000efd6:	3106      	adds	r1, #6
1000efd8:	4b01      	ldr	r3, [pc, #4]	; (1000efe0 <gattc_write_req_ind_parser+0x34>)
1000efda:	4798      	blx	r3
1000efdc:	bd08      	pop	{r3, pc}
1000efde:	46c0      	nop			; (mov r8, r8)
1000efe0:	100115bf 	.word	0x100115bf

1000efe4 <gattc_att_info_req_parser>:
1000efe4:	7843      	ldrb	r3, [r0, #1]
1000efe6:	7802      	ldrb	r2, [r0, #0]
1000efe8:	021b      	lsls	r3, r3, #8
1000efea:	4313      	orrs	r3, r2
1000efec:	800b      	strh	r3, [r1, #0]
1000efee:	4770      	bx	lr

1000eff0 <gattc_read_cfm>:
1000eff0:	b538      	push	{r3, r4, r5, lr}
1000eff2:	2514      	movs	r5, #20
1000eff4:	1c1c      	adds	r4, r3, #0
1000eff6:	4b14      	ldr	r3, [pc, #80]	; (1000f048 <gattc_read_cfm+0x58>)
1000eff8:	70d9      	strb	r1, [r3, #3]
1000effa:	4914      	ldr	r1, [pc, #80]	; (1000f04c <gattc_read_cfm+0x5c>)
1000effc:	701d      	strb	r5, [r3, #0]
1000effe:	3d08      	subs	r5, #8
1000f000:	705d      	strb	r5, [r3, #1]
1000f002:	709d      	strb	r5, [r3, #2]
1000f004:	880d      	ldrh	r5, [r1, #0]
1000f006:	8809      	ldrh	r1, [r1, #0]
1000f008:	7218      	strb	r0, [r3, #8]
1000f00a:	0a09      	lsrs	r1, r1, #8
1000f00c:	7159      	strb	r1, [r3, #5]
1000f00e:	0a00      	lsrs	r0, r0, #8
1000f010:	0a21      	lsrs	r1, r4, #8
1000f012:	711d      	strb	r5, [r3, #4]
1000f014:	7258      	strb	r0, [r3, #9]
1000f016:	729c      	strb	r4, [r3, #10]
1000f018:	72d9      	strb	r1, [r3, #11]
1000f01a:	731a      	strb	r2, [r3, #12]
1000f01c:	1c1d      	adds	r5, r3, #0
1000f01e:	2c00      	cmp	r4, #0
1000f020:	d007      	beq.n	1000f032 <gattc_read_cfm+0x42>
1000f022:	9904      	ldr	r1, [sp, #16]
1000f024:	1c22      	adds	r2, r4, #0
1000f026:	480a      	ldr	r0, [pc, #40]	; (1000f050 <gattc_read_cfm+0x60>)
1000f028:	4b0a      	ldr	r3, [pc, #40]	; (1000f054 <gattc_read_cfm+0x64>)
1000f02a:	340d      	adds	r4, #13
1000f02c:	4798      	blx	r3
1000f02e:	b2a1      	uxth	r1, r4
1000f030:	e001      	b.n	1000f036 <gattc_read_cfm+0x46>
1000f032:	210e      	movs	r1, #14
1000f034:	735c      	strb	r4, [r3, #13]
1000f036:	1c0b      	adds	r3, r1, #0
1000f038:	3b08      	subs	r3, #8
1000f03a:	71ab      	strb	r3, [r5, #6]
1000f03c:	121b      	asrs	r3, r3, #8
1000f03e:	71eb      	strb	r3, [r5, #7]
1000f040:	1c28      	adds	r0, r5, #0
1000f042:	4b05      	ldr	r3, [pc, #20]	; (1000f058 <gattc_read_cfm+0x68>)
1000f044:	4798      	blx	r3
1000f046:	bd38      	pop	{r3, r4, r5, pc}
1000f048:	10015f0c 	.word	0x10015f0c
1000f04c:	10015b9c 	.word	0x10015b9c
1000f050:	10015f19 	.word	0x10015f19
1000f054:	100115bf 	.word	0x100115bf
1000f058:	1000de69 	.word	0x1000de69

1000f05c <gattc_write_cfm>:
1000f05c:	4b0d      	ldr	r3, [pc, #52]	; (1000f094 <gattc_write_cfm+0x38>)
1000f05e:	b510      	push	{r4, lr}
1000f060:	729a      	strb	r2, [r3, #10]
1000f062:	2203      	movs	r2, #3
1000f064:	2416      	movs	r4, #22
1000f066:	719a      	strb	r2, [r3, #6]
1000f068:	2200      	movs	r2, #0
1000f06a:	70d9      	strb	r1, [r3, #3]
1000f06c:	490a      	ldr	r1, [pc, #40]	; (1000f098 <gattc_write_cfm+0x3c>)
1000f06e:	701c      	strb	r4, [r3, #0]
1000f070:	3c0a      	subs	r4, #10
1000f072:	705c      	strb	r4, [r3, #1]
1000f074:	709c      	strb	r4, [r3, #2]
1000f076:	880c      	ldrh	r4, [r1, #0]
1000f078:	8809      	ldrh	r1, [r1, #0]
1000f07a:	7218      	strb	r0, [r3, #8]
1000f07c:	0a09      	lsrs	r1, r1, #8
1000f07e:	0a00      	lsrs	r0, r0, #8
1000f080:	711c      	strb	r4, [r3, #4]
1000f082:	7159      	strb	r1, [r3, #5]
1000f084:	7258      	strb	r0, [r3, #9]
1000f086:	71da      	strb	r2, [r3, #7]
1000f088:	1c18      	adds	r0, r3, #0
1000f08a:	210b      	movs	r1, #11
1000f08c:	4b03      	ldr	r3, [pc, #12]	; (1000f09c <gattc_write_cfm+0x40>)
1000f08e:	4798      	blx	r3
1000f090:	bd10      	pop	{r4, pc}
1000f092:	46c0      	nop			; (mov r8, r8)
1000f094:	10015f0c 	.word	0x10015f0c
1000f098:	10015b9c 	.word	0x10015b9c
1000f09c:	1000de69 	.word	0x1000de69

1000f0a0 <gattc_att_info_cfm>:
1000f0a0:	b538      	push	{r3, r4, r5, lr}
1000f0a2:	4c0e      	ldr	r4, [pc, #56]	; (1000f0dc <gattc_att_info_cfm+0x3c>)
1000f0a4:	2518      	movs	r5, #24
1000f0a6:	7323      	strb	r3, [r4, #12]
1000f0a8:	2305      	movs	r3, #5
1000f0aa:	71a3      	strb	r3, [r4, #6]
1000f0ac:	2300      	movs	r3, #0
1000f0ae:	70e1      	strb	r1, [r4, #3]
1000f0b0:	490b      	ldr	r1, [pc, #44]	; (1000f0e0 <gattc_att_info_cfm+0x40>)
1000f0b2:	7025      	strb	r5, [r4, #0]
1000f0b4:	3d0c      	subs	r5, #12
1000f0b6:	7065      	strb	r5, [r4, #1]
1000f0b8:	70a5      	strb	r5, [r4, #2]
1000f0ba:	880d      	ldrh	r5, [r1, #0]
1000f0bc:	8809      	ldrh	r1, [r1, #0]
1000f0be:	7220      	strb	r0, [r4, #8]
1000f0c0:	0a09      	lsrs	r1, r1, #8
1000f0c2:	0a00      	lsrs	r0, r0, #8
1000f0c4:	7161      	strb	r1, [r4, #5]
1000f0c6:	7260      	strb	r0, [r4, #9]
1000f0c8:	72a2      	strb	r2, [r4, #10]
1000f0ca:	71e3      	strb	r3, [r4, #7]
1000f0cc:	0a12      	lsrs	r2, r2, #8
1000f0ce:	1c20      	adds	r0, r4, #0
1000f0d0:	210d      	movs	r1, #13
1000f0d2:	4b04      	ldr	r3, [pc, #16]	; (1000f0e4 <gattc_att_info_cfm+0x44>)
1000f0d4:	7125      	strb	r5, [r4, #4]
1000f0d6:	72e2      	strb	r2, [r4, #11]
1000f0d8:	4798      	blx	r3
1000f0da:	bd38      	pop	{r3, r4, r5, pc}
1000f0dc:	10015f0c 	.word	0x10015f0c
1000f0e0:	10015b9c 	.word	0x10015b9c
1000f0e4:	1000de69 	.word	0x1000de69

1000f0e8 <gattc_event_cfm_handler>:
1000f0e8:	220e      	movs	r2, #14
1000f0ea:	b508      	push	{r3, lr}
1000f0ec:	4b0b      	ldr	r3, [pc, #44]	; (1000f11c <gattc_event_cfm_handler+0x34>)
1000f0ee:	701a      	strb	r2, [r3, #0]
1000f0f0:	3a02      	subs	r2, #2
1000f0f2:	705a      	strb	r2, [r3, #1]
1000f0f4:	709a      	strb	r2, [r3, #2]
1000f0f6:	4a0a      	ldr	r2, [pc, #40]	; (1000f120 <gattc_event_cfm_handler+0x38>)
1000f0f8:	70d8      	strb	r0, [r3, #3]
1000f0fa:	8810      	ldrh	r0, [r2, #0]
1000f0fc:	8812      	ldrh	r2, [r2, #0]
1000f0fe:	7219      	strb	r1, [r3, #8]
1000f100:	0a12      	lsrs	r2, r2, #8
1000f102:	715a      	strb	r2, [r3, #5]
1000f104:	2202      	movs	r2, #2
1000f106:	719a      	strb	r2, [r3, #6]
1000f108:	2200      	movs	r2, #0
1000f10a:	0a09      	lsrs	r1, r1, #8
1000f10c:	7118      	strb	r0, [r3, #4]
1000f10e:	7259      	strb	r1, [r3, #9]
1000f110:	71da      	strb	r2, [r3, #7]
1000f112:	1c18      	adds	r0, r3, #0
1000f114:	210a      	movs	r1, #10
1000f116:	4b03      	ldr	r3, [pc, #12]	; (1000f124 <gattc_event_cfm_handler+0x3c>)
1000f118:	4798      	blx	r3
1000f11a:	bd08      	pop	{r3, pc}
1000f11c:	10015f0c 	.word	0x10015f0c
1000f120:	10015b9c 	.word	0x10015b9c
1000f124:	1000de69 	.word	0x1000de69

1000f128 <gattc_disc_svc_ind_parser>:
1000f128:	b570      	push	{r4, r5, r6, lr}
1000f12a:	1c15      	adds	r5, r2, #0
1000f12c:	0a00      	lsrs	r0, r0, #8
1000f12e:	8010      	strh	r0, [r2, #0]
1000f130:	784b      	ldrb	r3, [r1, #1]
1000f132:	780a      	ldrb	r2, [r1, #0]
1000f134:	021b      	lsls	r3, r3, #8
1000f136:	4313      	orrs	r3, r2
1000f138:	806b      	strh	r3, [r5, #2]
1000f13a:	78cb      	ldrb	r3, [r1, #3]
1000f13c:	788a      	ldrb	r2, [r1, #2]
1000f13e:	021b      	lsls	r3, r3, #8
1000f140:	4313      	orrs	r3, r2
1000f142:	80ab      	strh	r3, [r5, #4]
1000f144:	790e      	ldrb	r6, [r1, #4]
1000f146:	4b05      	ldr	r3, [pc, #20]	; (1000f15c <gattc_disc_svc_ind_parser+0x34>)
1000f148:	1c30      	adds	r0, r6, #0
1000f14a:	1c0c      	adds	r4, r1, #0
1000f14c:	4798      	blx	r3
1000f14e:	1c32      	adds	r2, r6, #0
1000f150:	71a8      	strb	r0, [r5, #6]
1000f152:	1d61      	adds	r1, r4, #5
1000f154:	1de8      	adds	r0, r5, #7
1000f156:	4b02      	ldr	r3, [pc, #8]	; (1000f160 <gattc_disc_svc_ind_parser+0x38>)
1000f158:	4798      	blx	r3
1000f15a:	bd70      	pop	{r4, r5, r6, pc}
1000f15c:	1000d821 	.word	0x1000d821
1000f160:	100115bf 	.word	0x100115bf

1000f164 <gattc_disc_svc_incl_ind_parser>:
1000f164:	b570      	push	{r4, r5, r6, lr}
1000f166:	1c15      	adds	r5, r2, #0
1000f168:	0a00      	lsrs	r0, r0, #8
1000f16a:	8010      	strh	r0, [r2, #0]
1000f16c:	784b      	ldrb	r3, [r1, #1]
1000f16e:	780a      	ldrb	r2, [r1, #0]
1000f170:	021b      	lsls	r3, r3, #8
1000f172:	4313      	orrs	r3, r2
1000f174:	806b      	strh	r3, [r5, #2]
1000f176:	78cb      	ldrb	r3, [r1, #3]
1000f178:	788a      	ldrb	r2, [r1, #2]
1000f17a:	021b      	lsls	r3, r3, #8
1000f17c:	4313      	orrs	r3, r2
1000f17e:	80ab      	strh	r3, [r5, #4]
1000f180:	794b      	ldrb	r3, [r1, #5]
1000f182:	790a      	ldrb	r2, [r1, #4]
1000f184:	021b      	lsls	r3, r3, #8
1000f186:	4313      	orrs	r3, r2
1000f188:	80eb      	strh	r3, [r5, #6]
1000f18a:	798e      	ldrb	r6, [r1, #6]
1000f18c:	4b05      	ldr	r3, [pc, #20]	; (1000f1a4 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f18e:	1c30      	adds	r0, r6, #0
1000f190:	1c0c      	adds	r4, r1, #0
1000f192:	4798      	blx	r3
1000f194:	7228      	strb	r0, [r5, #8]
1000f196:	1c28      	adds	r0, r5, #0
1000f198:	1c32      	adds	r2, r6, #0
1000f19a:	1de1      	adds	r1, r4, #7
1000f19c:	4b02      	ldr	r3, [pc, #8]	; (1000f1a8 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f19e:	3009      	adds	r0, #9
1000f1a0:	4798      	blx	r3
1000f1a2:	bd70      	pop	{r4, r5, r6, pc}
1000f1a4:	1000d821 	.word	0x1000d821
1000f1a8:	100115bf 	.word	0x100115bf

1000f1ac <gattc_disc_char_ind_parser>:
1000f1ac:	b570      	push	{r4, r5, r6, lr}
1000f1ae:	1c15      	adds	r5, r2, #0
1000f1b0:	0a00      	lsrs	r0, r0, #8
1000f1b2:	8010      	strh	r0, [r2, #0]
1000f1b4:	784b      	ldrb	r3, [r1, #1]
1000f1b6:	780a      	ldrb	r2, [r1, #0]
1000f1b8:	021b      	lsls	r3, r3, #8
1000f1ba:	4313      	orrs	r3, r2
1000f1bc:	806b      	strh	r3, [r5, #2]
1000f1be:	78cb      	ldrb	r3, [r1, #3]
1000f1c0:	788a      	ldrb	r2, [r1, #2]
1000f1c2:	021b      	lsls	r3, r3, #8
1000f1c4:	4313      	orrs	r3, r2
1000f1c6:	80ab      	strh	r3, [r5, #4]
1000f1c8:	790b      	ldrb	r3, [r1, #4]
1000f1ca:	1c0c      	adds	r4, r1, #0
1000f1cc:	71ab      	strb	r3, [r5, #6]
1000f1ce:	794e      	ldrb	r6, [r1, #5]
1000f1d0:	4b05      	ldr	r3, [pc, #20]	; (1000f1e8 <gattc_disc_char_ind_parser+0x3c>)
1000f1d2:	1c30      	adds	r0, r6, #0
1000f1d4:	4798      	blx	r3
1000f1d6:	71e8      	strb	r0, [r5, #7]
1000f1d8:	1c28      	adds	r0, r5, #0
1000f1da:	1c32      	adds	r2, r6, #0
1000f1dc:	1da1      	adds	r1, r4, #6
1000f1de:	4b03      	ldr	r3, [pc, #12]	; (1000f1ec <gattc_disc_char_ind_parser+0x40>)
1000f1e0:	3008      	adds	r0, #8
1000f1e2:	4798      	blx	r3
1000f1e4:	bd70      	pop	{r4, r5, r6, pc}
1000f1e6:	46c0      	nop			; (mov r8, r8)
1000f1e8:	1000d821 	.word	0x1000d821
1000f1ec:	100115bf 	.word	0x100115bf

1000f1f0 <gattc_disc_char_desc_ind_parser>:
1000f1f0:	b570      	push	{r4, r5, r6, lr}
1000f1f2:	1c15      	adds	r5, r2, #0
1000f1f4:	0a00      	lsrs	r0, r0, #8
1000f1f6:	8010      	strh	r0, [r2, #0]
1000f1f8:	784b      	ldrb	r3, [r1, #1]
1000f1fa:	780a      	ldrb	r2, [r1, #0]
1000f1fc:	021b      	lsls	r3, r3, #8
1000f1fe:	4313      	orrs	r3, r2
1000f200:	806b      	strh	r3, [r5, #2]
1000f202:	788e      	ldrb	r6, [r1, #2]
1000f204:	4b05      	ldr	r3, [pc, #20]	; (1000f21c <gattc_disc_char_desc_ind_parser+0x2c>)
1000f206:	1c30      	adds	r0, r6, #0
1000f208:	1c0c      	adds	r4, r1, #0
1000f20a:	4798      	blx	r3
1000f20c:	1c32      	adds	r2, r6, #0
1000f20e:	7128      	strb	r0, [r5, #4]
1000f210:	1ce1      	adds	r1, r4, #3
1000f212:	1d68      	adds	r0, r5, #5
1000f214:	4b02      	ldr	r3, [pc, #8]	; (1000f220 <gattc_disc_char_desc_ind_parser+0x30>)
1000f216:	4798      	blx	r3
1000f218:	bd70      	pop	{r4, r5, r6, pc}
1000f21a:	46c0      	nop			; (mov r8, r8)
1000f21c:	1000d821 	.word	0x1000d821
1000f220:	100115bf 	.word	0x100115bf

1000f224 <gattc_event_ind_and_notification_parser>:
1000f224:	b510      	push	{r4, lr}
1000f226:	780c      	ldrb	r4, [r1, #0]
1000f228:	1c13      	adds	r3, r2, #0
1000f22a:	2c12      	cmp	r4, #18
1000f22c:	d10e      	bne.n	1000f24c <gattc_event_ind_and_notification_parser+0x28>
1000f22e:	0a00      	lsrs	r0, r0, #8
1000f230:	8010      	strh	r0, [r2, #0]
1000f232:	788a      	ldrb	r2, [r1, #2]
1000f234:	709a      	strb	r2, [r3, #2]
1000f236:	7948      	ldrb	r0, [r1, #5]
1000f238:	790c      	ldrb	r4, [r1, #4]
1000f23a:	0200      	lsls	r0, r0, #8
1000f23c:	4320      	orrs	r0, r4
1000f23e:	8098      	strh	r0, [r3, #4]
1000f240:	3106      	adds	r1, #6
1000f242:	1d98      	adds	r0, r3, #6
1000f244:	4b0b      	ldr	r3, [pc, #44]	; (1000f274 <gattc_event_ind_and_notification_parser+0x50>)
1000f246:	4798      	blx	r3
1000f248:	221b      	movs	r2, #27
1000f24a:	e010      	b.n	1000f26e <gattc_event_ind_and_notification_parser+0x4a>
1000f24c:	2200      	movs	r2, #0
1000f24e:	2c13      	cmp	r4, #19
1000f250:	d10d      	bne.n	1000f26e <gattc_event_ind_and_notification_parser+0x4a>
1000f252:	0a00      	lsrs	r0, r0, #8
1000f254:	8018      	strh	r0, [r3, #0]
1000f256:	788a      	ldrb	r2, [r1, #2]
1000f258:	709a      	strb	r2, [r3, #2]
1000f25a:	7908      	ldrb	r0, [r1, #4]
1000f25c:	78cc      	ldrb	r4, [r1, #3]
1000f25e:	0200      	lsls	r0, r0, #8
1000f260:	4320      	orrs	r0, r4
1000f262:	8098      	strh	r0, [r3, #4]
1000f264:	3106      	adds	r1, #6
1000f266:	1d98      	adds	r0, r3, #6
1000f268:	4b02      	ldr	r3, [pc, #8]	; (1000f274 <gattc_event_ind_and_notification_parser+0x50>)
1000f26a:	4798      	blx	r3
1000f26c:	221c      	movs	r2, #28
1000f26e:	1c10      	adds	r0, r2, #0
1000f270:	bd10      	pop	{r4, pc}
1000f272:	46c0      	nop			; (mov r8, r8)
1000f274:	100115bf 	.word	0x100115bf

1000f278 <gattc_complete_evt_handler>:
1000f278:	b500      	push	{lr}
1000f27a:	0a00      	lsrs	r0, r0, #8
1000f27c:	8010      	strh	r0, [r2, #0]
1000f27e:	7808      	ldrb	r0, [r1, #0]
1000f280:	7090      	strb	r0, [r2, #2]
1000f282:	784b      	ldrb	r3, [r1, #1]
1000f284:	3801      	subs	r0, #1
1000f286:	70d3      	strb	r3, [r2, #3]
1000f288:	2813      	cmp	r0, #19
1000f28a:	d82c      	bhi.n	1000f2e6 <gattc_complete_evt_handler+0x6e>
1000f28c:	f000 f914 	bl	1000f4b8 <__gnu_thumb1_case_uqi>
1000f290:	0a0a0a0c 	.word	0x0a0a0a0c
1000f294:	210a0a0a 	.word	0x210a0a0a
1000f298:	111f2121 	.word	0x111f2121
1000f29c:	2b111111 	.word	0x2b111111
1000f2a0:	2919132b 	.word	0x2919132b
1000f2a4:	2017      	movs	r0, #23
1000f2a6:	e01f      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2a8:	2024      	movs	r0, #36	; 0x24
1000f2aa:	2b00      	cmp	r3, #0
1000f2ac:	d11c      	bne.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2ae:	3017      	adds	r0, #23
1000f2b0:	e01a      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2b2:	2025      	movs	r0, #37	; 0x25
1000f2b4:	e018      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2b6:	4a0d      	ldr	r2, [pc, #52]	; (1000f2ec <gattc_complete_evt_handler+0x74>)
1000f2b8:	201d      	movs	r0, #29
1000f2ba:	6813      	ldr	r3, [r2, #0]
1000f2bc:	3b01      	subs	r3, #1
1000f2be:	6013      	str	r3, [r2, #0]
1000f2c0:	e012      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2c2:	4a0a      	ldr	r2, [pc, #40]	; (1000f2ec <gattc_complete_evt_handler+0x74>)
1000f2c4:	201e      	movs	r0, #30
1000f2c6:	6813      	ldr	r3, [r2, #0]
1000f2c8:	3b01      	subs	r3, #1
1000f2ca:	6013      	str	r3, [r2, #0]
1000f2cc:	e00c      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2ce:	2019      	movs	r0, #25
1000f2d0:	e00a      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2d2:	203b      	movs	r0, #59	; 0x3b
1000f2d4:	2b00      	cmp	r3, #0
1000f2d6:	d007      	beq.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2d8:	2182      	movs	r1, #130	; 0x82
1000f2da:	0089      	lsls	r1, r1, #2
1000f2dc:	5453      	strb	r3, [r2, r1]
1000f2de:	3823      	subs	r0, #35	; 0x23
1000f2e0:	e002      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2e2:	2021      	movs	r0, #33	; 0x21
1000f2e4:	e000      	b.n	1000f2e8 <gattc_complete_evt_handler+0x70>
1000f2e6:	2000      	movs	r0, #0
1000f2e8:	bd00      	pop	{pc}
1000f2ea:	46c0      	nop			; (mov r8, r8)
1000f2ec:	10014ef8 	.word	0x10014ef8

1000f2f0 <gattc_event_mtu_changed_ind_parser>:
1000f2f0:	0a00      	lsrs	r0, r0, #8
1000f2f2:	8010      	strh	r0, [r2, #0]
1000f2f4:	784b      	ldrb	r3, [r1, #1]
1000f2f6:	7809      	ldrb	r1, [r1, #0]
1000f2f8:	021b      	lsls	r3, r3, #8
1000f2fa:	430b      	orrs	r3, r1
1000f2fc:	8053      	strh	r3, [r2, #2]
1000f2fe:	4770      	bx	lr

1000f300 <gattc_read_ind_parser>:
1000f300:	0a00      	lsrs	r0, r0, #8
1000f302:	b508      	push	{r3, lr}
1000f304:	8010      	strh	r0, [r2, #0]
1000f306:	1c13      	adds	r3, r2, #0
1000f308:	2282      	movs	r2, #130	; 0x82
1000f30a:	2000      	movs	r0, #0
1000f30c:	0092      	lsls	r2, r2, #2
1000f30e:	5498      	strb	r0, [r3, r2]
1000f310:	784a      	ldrb	r2, [r1, #1]
1000f312:	7808      	ldrb	r0, [r1, #0]
1000f314:	0212      	lsls	r2, r2, #8
1000f316:	4302      	orrs	r2, r0
1000f318:	805a      	strh	r2, [r3, #2]
1000f31a:	78ca      	ldrb	r2, [r1, #3]
1000f31c:	7888      	ldrb	r0, [r1, #2]
1000f31e:	0212      	lsls	r2, r2, #8
1000f320:	4302      	orrs	r2, r0
1000f322:	80da      	strh	r2, [r3, #6]
1000f324:	794a      	ldrb	r2, [r1, #5]
1000f326:	7908      	ldrb	r0, [r1, #4]
1000f328:	0212      	lsls	r2, r2, #8
1000f32a:	4302      	orrs	r2, r0
1000f32c:	809a      	strh	r2, [r3, #4]
1000f32e:	3308      	adds	r3, #8
1000f330:	1c18      	adds	r0, r3, #0
1000f332:	3106      	adds	r1, #6
1000f334:	4b01      	ldr	r3, [pc, #4]	; (1000f33c <gattc_read_ind_parser+0x3c>)
1000f336:	4798      	blx	r3
1000f338:	bd08      	pop	{r3, pc}
1000f33a:	46c0      	nop			; (mov r8, r8)
1000f33c:	100115bf 	.word	0x100115bf

1000f340 <gattc_svc_changed_cfg_ind_parser>:
1000f340:	0a00      	lsrs	r0, r0, #8
1000f342:	8010      	strh	r0, [r2, #0]
1000f344:	784b      	ldrb	r3, [r1, #1]
1000f346:	7809      	ldrb	r1, [r1, #0]
1000f348:	021b      	lsls	r3, r3, #8
1000f34a:	430b      	orrs	r3, r1
1000f34c:	8053      	strh	r3, [r2, #2]
1000f34e:	4770      	bx	lr

1000f350 <init_gattc_task_module>:
1000f350:	2300      	movs	r3, #0
1000f352:	4a02      	ldr	r2, [pc, #8]	; (1000f35c <init_gattc_task_module+0xc>)
1000f354:	8013      	strh	r3, [r2, #0]
1000f356:	4a02      	ldr	r2, [pc, #8]	; (1000f360 <init_gattc_task_module+0x10>)
1000f358:	8013      	strh	r3, [r2, #0]
1000f35a:	4770      	bx	lr
1000f35c:	10014ef2 	.word	0x10014ef2
1000f360:	10014ef4 	.word	0x10014ef4

1000f364 <gattm_att_set_value_req_handler>:
1000f364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f366:	466b      	mov	r3, sp
1000f368:	1dde      	adds	r6, r3, #7
1000f36a:	2300      	movs	r3, #0
1000f36c:	1c0d      	adds	r5, r1, #0
1000f36e:	210c      	movs	r1, #12
1000f370:	270b      	movs	r7, #11
1000f372:	4c17      	ldr	r4, [pc, #92]	; (1000f3d0 <gattm_att_set_value_req_handler+0x6c>)
1000f374:	7033      	strb	r3, [r6, #0]
1000f376:	70e3      	strb	r3, [r4, #3]
1000f378:	4b16      	ldr	r3, [pc, #88]	; (1000f3d4 <gattm_att_set_value_req_handler+0x70>)
1000f37a:	7021      	strb	r1, [r4, #0]
1000f37c:	8819      	ldrh	r1, [r3, #0]
1000f37e:	881b      	ldrh	r3, [r3, #0]
1000f380:	7220      	strb	r0, [r4, #8]
1000f382:	0a1b      	lsrs	r3, r3, #8
1000f384:	7163      	strb	r3, [r4, #5]
1000f386:	0a00      	lsrs	r0, r0, #8
1000f388:	0a2b      	lsrs	r3, r5, #8
1000f38a:	7121      	strb	r1, [r4, #4]
1000f38c:	7260      	strb	r0, [r4, #9]
1000f38e:	1c11      	adds	r1, r2, #0
1000f390:	72a5      	strb	r5, [r4, #10]
1000f392:	1c2a      	adds	r2, r5, #0
1000f394:	72e3      	strb	r3, [r4, #11]
1000f396:	350c      	adds	r5, #12
1000f398:	4b0f      	ldr	r3, [pc, #60]	; (1000f3d8 <gattm_att_set_value_req_handler+0x74>)
1000f39a:	4810      	ldr	r0, [pc, #64]	; (1000f3dc <gattm_att_set_value_req_handler+0x78>)
1000f39c:	7067      	strb	r7, [r4, #1]
1000f39e:	70a7      	strb	r7, [r4, #2]
1000f3a0:	4798      	blx	r3
1000f3a2:	b2a9      	uxth	r1, r5
1000f3a4:	4b0e      	ldr	r3, [pc, #56]	; (1000f3e0 <gattm_att_set_value_req_handler+0x7c>)
1000f3a6:	4d0f      	ldr	r5, [pc, #60]	; (1000f3e4 <gattm_att_set_value_req_handler+0x80>)
1000f3a8:	1c20      	adds	r0, r4, #0
1000f3aa:	802b      	strh	r3, [r5, #0]
1000f3ac:	1c0b      	adds	r3, r1, #0
1000f3ae:	3b08      	subs	r3, #8
1000f3b0:	71a3      	strb	r3, [r4, #6]
1000f3b2:	121b      	asrs	r3, r3, #8
1000f3b4:	71e3      	strb	r3, [r4, #7]
1000f3b6:	4b0c      	ldr	r3, [pc, #48]	; (1000f3e8 <gattm_att_set_value_req_handler+0x84>)
1000f3b8:	80af      	strh	r7, [r5, #4]
1000f3ba:	4798      	blx	r3
1000f3bc:	1c30      	adds	r0, r6, #0
1000f3be:	4b0b      	ldr	r3, [pc, #44]	; (1000f3ec <gattm_att_set_value_req_handler+0x88>)
1000f3c0:	4798      	blx	r3
1000f3c2:	7833      	ldrb	r3, [r6, #0]
1000f3c4:	20e2      	movs	r0, #226	; 0xe2
1000f3c6:	2b00      	cmp	r3, #0
1000f3c8:	d101      	bne.n	1000f3ce <gattm_att_set_value_req_handler+0x6a>
1000f3ca:	68ab      	ldr	r3, [r5, #8]
1000f3cc:	7898      	ldrb	r0, [r3, #2]
1000f3ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3d0:	10015f0c 	.word	0x10015f0c
1000f3d4:	10015b9c 	.word	0x10015b9c
1000f3d8:	100115bf 	.word	0x100115bf
1000f3dc:	10015f18 	.word	0x10015f18
1000f3e0:	00000b0d 	.word	0x00000b0d
1000f3e4:	10015b90 	.word	0x10015b90
1000f3e8:	1000de69 	.word	0x1000de69
1000f3ec:	1000decd 	.word	0x1000decd

1000f3f0 <gattm_att_get_value_req_handler>:
1000f3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3f2:	b085      	sub	sp, #20
1000f3f4:	9201      	str	r2, [sp, #4]
1000f3f6:	220a      	movs	r2, #10
1000f3f8:	1c04      	adds	r4, r0, #0
1000f3fa:	481d      	ldr	r0, [pc, #116]	; (1000f470 <gattm_att_get_value_req_handler+0x80>)
1000f3fc:	ab02      	add	r3, sp, #8
1000f3fe:	1dde      	adds	r6, r3, #7
1000f400:	7002      	strb	r2, [r0, #0]
1000f402:	2300      	movs	r3, #0
1000f404:	220b      	movs	r2, #11
1000f406:	4d1b      	ldr	r5, [pc, #108]	; (1000f474 <gattm_att_get_value_req_handler+0x84>)
1000f408:	1c0f      	adds	r7, r1, #0
1000f40a:	8829      	ldrh	r1, [r5, #0]
1000f40c:	882d      	ldrh	r5, [r5, #0]
1000f40e:	7101      	strb	r1, [r0, #4]
1000f410:	0a2d      	lsrs	r5, r5, #8
1000f412:	7145      	strb	r5, [r0, #5]
1000f414:	0a25      	lsrs	r5, r4, #8
1000f416:	7245      	strb	r5, [r0, #9]
1000f418:	4917      	ldr	r1, [pc, #92]	; (1000f478 <gattm_att_get_value_req_handler+0x88>)
1000f41a:	4d18      	ldr	r5, [pc, #96]	; (1000f47c <gattm_att_get_value_req_handler+0x8c>)
1000f41c:	7033      	strb	r3, [r6, #0]
1000f41e:	7042      	strb	r2, [r0, #1]
1000f420:	7082      	strb	r2, [r0, #2]
1000f422:	70c3      	strb	r3, [r0, #3]
1000f424:	8029      	strh	r1, [r5, #0]
1000f426:	80aa      	strh	r2, [r5, #4]
1000f428:	71c3      	strb	r3, [r0, #7]
1000f42a:	3a09      	subs	r2, #9
1000f42c:	210a      	movs	r1, #10
1000f42e:	4b14      	ldr	r3, [pc, #80]	; (1000f480 <gattm_att_get_value_req_handler+0x90>)
1000f430:	7182      	strb	r2, [r0, #6]
1000f432:	7204      	strb	r4, [r0, #8]
1000f434:	4798      	blx	r3
1000f436:	1c30      	adds	r0, r6, #0
1000f438:	4b12      	ldr	r3, [pc, #72]	; (1000f484 <gattm_att_get_value_req_handler+0x94>)
1000f43a:	4798      	blx	r3
1000f43c:	7833      	ldrb	r3, [r6, #0]
1000f43e:	20e2      	movs	r0, #226	; 0xe2
1000f440:	2b00      	cmp	r3, #0
1000f442:	d112      	bne.n	1000f46a <gattm_att_get_value_req_handler+0x7a>
1000f444:	68a9      	ldr	r1, [r5, #8]
1000f446:	9801      	ldr	r0, [sp, #4]
1000f448:	784d      	ldrb	r5, [r1, #1]
1000f44a:	780b      	ldrb	r3, [r1, #0]
1000f44c:	78ca      	ldrb	r2, [r1, #3]
1000f44e:	022d      	lsls	r5, r5, #8
1000f450:	431d      	orrs	r5, r3
1000f452:	788b      	ldrb	r3, [r1, #2]
1000f454:	0212      	lsls	r2, r2, #8
1000f456:	431a      	orrs	r2, r3
1000f458:	803a      	strh	r2, [r7, #0]
1000f45a:	790e      	ldrb	r6, [r1, #4]
1000f45c:	4b0a      	ldr	r3, [pc, #40]	; (1000f488 <gattm_att_get_value_req_handler+0x98>)
1000f45e:	3105      	adds	r1, #5
1000f460:	4798      	blx	r3
1000f462:	20e2      	movs	r0, #226	; 0xe2
1000f464:	42ac      	cmp	r4, r5
1000f466:	d100      	bne.n	1000f46a <gattm_att_get_value_req_handler+0x7a>
1000f468:	1c30      	adds	r0, r6, #0
1000f46a:	b005      	add	sp, #20
1000f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f46e:	46c0      	nop			; (mov r8, r8)
1000f470:	10015f0c 	.word	0x10015f0c
1000f474:	10015b9c 	.word	0x10015b9c
1000f478:	00000b0b 	.word	0x00000b0b
1000f47c:	10015b90 	.word	0x10015b90
1000f480:	1000de69 	.word	0x1000de69
1000f484:	1000decd 	.word	0x1000decd
1000f488:	100115bf 	.word	0x100115bf

1000f48c <htpt_enable_rsp_handler>:
1000f48c:	780b      	ldrb	r3, [r1, #0]
1000f48e:	7013      	strb	r3, [r2, #0]
1000f490:	784b      	ldrb	r3, [r1, #1]
1000f492:	7053      	strb	r3, [r2, #1]
1000f494:	4770      	bx	lr

1000f496 <htpt_temp_send_rsp_handler>:
1000f496:	780b      	ldrb	r3, [r1, #0]
1000f498:	7013      	strb	r3, [r2, #0]
1000f49a:	4770      	bx	lr

1000f49c <htpt_meas_intv_upd_rsp_handler>:
1000f49c:	780b      	ldrb	r3, [r1, #0]
1000f49e:	7013      	strb	r3, [r2, #0]
1000f4a0:	4770      	bx	lr

1000f4a2 <htpt_meas_intv_chg_req_ind_handler>:
1000f4a2:	78cb      	ldrb	r3, [r1, #3]
1000f4a4:	7889      	ldrb	r1, [r1, #2]
1000f4a6:	021b      	lsls	r3, r3, #8
1000f4a8:	430b      	orrs	r3, r1
1000f4aa:	8013      	strh	r3, [r2, #0]
1000f4ac:	4770      	bx	lr

1000f4ae <htpt_cfg_indntf_ind_handler>:
1000f4ae:	780b      	ldrb	r3, [r1, #0]
1000f4b0:	7013      	strb	r3, [r2, #0]
1000f4b2:	784b      	ldrb	r3, [r1, #1]
1000f4b4:	7053      	strb	r3, [r2, #1]
1000f4b6:	4770      	bx	lr

1000f4b8 <__gnu_thumb1_case_uqi>:
1000f4b8:	b402      	push	{r1}
1000f4ba:	4671      	mov	r1, lr
1000f4bc:	0849      	lsrs	r1, r1, #1
1000f4be:	0049      	lsls	r1, r1, #1
1000f4c0:	5c09      	ldrb	r1, [r1, r0]
1000f4c2:	0049      	lsls	r1, r1, #1
1000f4c4:	448e      	add	lr, r1
1000f4c6:	bc02      	pop	{r1}
1000f4c8:	4770      	bx	lr
1000f4ca:	46c0      	nop			; (mov r8, r8)

1000f4cc <__aeabi_uidiv>:
1000f4cc:	2200      	movs	r2, #0
1000f4ce:	0843      	lsrs	r3, r0, #1
1000f4d0:	428b      	cmp	r3, r1
1000f4d2:	d374      	bcc.n	1000f5be <__aeabi_uidiv+0xf2>
1000f4d4:	0903      	lsrs	r3, r0, #4
1000f4d6:	428b      	cmp	r3, r1
1000f4d8:	d35f      	bcc.n	1000f59a <__aeabi_uidiv+0xce>
1000f4da:	0a03      	lsrs	r3, r0, #8
1000f4dc:	428b      	cmp	r3, r1
1000f4de:	d344      	bcc.n	1000f56a <__aeabi_uidiv+0x9e>
1000f4e0:	0b03      	lsrs	r3, r0, #12
1000f4e2:	428b      	cmp	r3, r1
1000f4e4:	d328      	bcc.n	1000f538 <__aeabi_uidiv+0x6c>
1000f4e6:	0c03      	lsrs	r3, r0, #16
1000f4e8:	428b      	cmp	r3, r1
1000f4ea:	d30d      	bcc.n	1000f508 <__aeabi_uidiv+0x3c>
1000f4ec:	22ff      	movs	r2, #255	; 0xff
1000f4ee:	0209      	lsls	r1, r1, #8
1000f4f0:	ba12      	rev	r2, r2
1000f4f2:	0c03      	lsrs	r3, r0, #16
1000f4f4:	428b      	cmp	r3, r1
1000f4f6:	d302      	bcc.n	1000f4fe <__aeabi_uidiv+0x32>
1000f4f8:	1212      	asrs	r2, r2, #8
1000f4fa:	0209      	lsls	r1, r1, #8
1000f4fc:	d065      	beq.n	1000f5ca <__aeabi_uidiv+0xfe>
1000f4fe:	0b03      	lsrs	r3, r0, #12
1000f500:	428b      	cmp	r3, r1
1000f502:	d319      	bcc.n	1000f538 <__aeabi_uidiv+0x6c>
1000f504:	e000      	b.n	1000f508 <__aeabi_uidiv+0x3c>
1000f506:	0a09      	lsrs	r1, r1, #8
1000f508:	0bc3      	lsrs	r3, r0, #15
1000f50a:	428b      	cmp	r3, r1
1000f50c:	d301      	bcc.n	1000f512 <__aeabi_uidiv+0x46>
1000f50e:	03cb      	lsls	r3, r1, #15
1000f510:	1ac0      	subs	r0, r0, r3
1000f512:	4152      	adcs	r2, r2
1000f514:	0b83      	lsrs	r3, r0, #14
1000f516:	428b      	cmp	r3, r1
1000f518:	d301      	bcc.n	1000f51e <__aeabi_uidiv+0x52>
1000f51a:	038b      	lsls	r3, r1, #14
1000f51c:	1ac0      	subs	r0, r0, r3
1000f51e:	4152      	adcs	r2, r2
1000f520:	0b43      	lsrs	r3, r0, #13
1000f522:	428b      	cmp	r3, r1
1000f524:	d301      	bcc.n	1000f52a <__aeabi_uidiv+0x5e>
1000f526:	034b      	lsls	r3, r1, #13
1000f528:	1ac0      	subs	r0, r0, r3
1000f52a:	4152      	adcs	r2, r2
1000f52c:	0b03      	lsrs	r3, r0, #12
1000f52e:	428b      	cmp	r3, r1
1000f530:	d301      	bcc.n	1000f536 <__aeabi_uidiv+0x6a>
1000f532:	030b      	lsls	r3, r1, #12
1000f534:	1ac0      	subs	r0, r0, r3
1000f536:	4152      	adcs	r2, r2
1000f538:	0ac3      	lsrs	r3, r0, #11
1000f53a:	428b      	cmp	r3, r1
1000f53c:	d301      	bcc.n	1000f542 <__aeabi_uidiv+0x76>
1000f53e:	02cb      	lsls	r3, r1, #11
1000f540:	1ac0      	subs	r0, r0, r3
1000f542:	4152      	adcs	r2, r2
1000f544:	0a83      	lsrs	r3, r0, #10
1000f546:	428b      	cmp	r3, r1
1000f548:	d301      	bcc.n	1000f54e <__aeabi_uidiv+0x82>
1000f54a:	028b      	lsls	r3, r1, #10
1000f54c:	1ac0      	subs	r0, r0, r3
1000f54e:	4152      	adcs	r2, r2
1000f550:	0a43      	lsrs	r3, r0, #9
1000f552:	428b      	cmp	r3, r1
1000f554:	d301      	bcc.n	1000f55a <__aeabi_uidiv+0x8e>
1000f556:	024b      	lsls	r3, r1, #9
1000f558:	1ac0      	subs	r0, r0, r3
1000f55a:	4152      	adcs	r2, r2
1000f55c:	0a03      	lsrs	r3, r0, #8
1000f55e:	428b      	cmp	r3, r1
1000f560:	d301      	bcc.n	1000f566 <__aeabi_uidiv+0x9a>
1000f562:	020b      	lsls	r3, r1, #8
1000f564:	1ac0      	subs	r0, r0, r3
1000f566:	4152      	adcs	r2, r2
1000f568:	d2cd      	bcs.n	1000f506 <__aeabi_uidiv+0x3a>
1000f56a:	09c3      	lsrs	r3, r0, #7
1000f56c:	428b      	cmp	r3, r1
1000f56e:	d301      	bcc.n	1000f574 <__aeabi_uidiv+0xa8>
1000f570:	01cb      	lsls	r3, r1, #7
1000f572:	1ac0      	subs	r0, r0, r3
1000f574:	4152      	adcs	r2, r2
1000f576:	0983      	lsrs	r3, r0, #6
1000f578:	428b      	cmp	r3, r1
1000f57a:	d301      	bcc.n	1000f580 <__aeabi_uidiv+0xb4>
1000f57c:	018b      	lsls	r3, r1, #6
1000f57e:	1ac0      	subs	r0, r0, r3
1000f580:	4152      	adcs	r2, r2
1000f582:	0943      	lsrs	r3, r0, #5
1000f584:	428b      	cmp	r3, r1
1000f586:	d301      	bcc.n	1000f58c <__aeabi_uidiv+0xc0>
1000f588:	014b      	lsls	r3, r1, #5
1000f58a:	1ac0      	subs	r0, r0, r3
1000f58c:	4152      	adcs	r2, r2
1000f58e:	0903      	lsrs	r3, r0, #4
1000f590:	428b      	cmp	r3, r1
1000f592:	d301      	bcc.n	1000f598 <__aeabi_uidiv+0xcc>
1000f594:	010b      	lsls	r3, r1, #4
1000f596:	1ac0      	subs	r0, r0, r3
1000f598:	4152      	adcs	r2, r2
1000f59a:	08c3      	lsrs	r3, r0, #3
1000f59c:	428b      	cmp	r3, r1
1000f59e:	d301      	bcc.n	1000f5a4 <__aeabi_uidiv+0xd8>
1000f5a0:	00cb      	lsls	r3, r1, #3
1000f5a2:	1ac0      	subs	r0, r0, r3
1000f5a4:	4152      	adcs	r2, r2
1000f5a6:	0883      	lsrs	r3, r0, #2
1000f5a8:	428b      	cmp	r3, r1
1000f5aa:	d301      	bcc.n	1000f5b0 <__aeabi_uidiv+0xe4>
1000f5ac:	008b      	lsls	r3, r1, #2
1000f5ae:	1ac0      	subs	r0, r0, r3
1000f5b0:	4152      	adcs	r2, r2
1000f5b2:	0843      	lsrs	r3, r0, #1
1000f5b4:	428b      	cmp	r3, r1
1000f5b6:	d301      	bcc.n	1000f5bc <__aeabi_uidiv+0xf0>
1000f5b8:	004b      	lsls	r3, r1, #1
1000f5ba:	1ac0      	subs	r0, r0, r3
1000f5bc:	4152      	adcs	r2, r2
1000f5be:	1a41      	subs	r1, r0, r1
1000f5c0:	d200      	bcs.n	1000f5c4 <__aeabi_uidiv+0xf8>
1000f5c2:	4601      	mov	r1, r0
1000f5c4:	4152      	adcs	r2, r2
1000f5c6:	4610      	mov	r0, r2
1000f5c8:	4770      	bx	lr
1000f5ca:	e7ff      	b.n	1000f5cc <__aeabi_uidiv+0x100>
1000f5cc:	b501      	push	{r0, lr}
1000f5ce:	2000      	movs	r0, #0
1000f5d0:	f000 f8f0 	bl	1000f7b4 <__aeabi_idiv0>
1000f5d4:	bd02      	pop	{r1, pc}
1000f5d6:	46c0      	nop			; (mov r8, r8)

1000f5d8 <__aeabi_uidivmod>:
1000f5d8:	2900      	cmp	r1, #0
1000f5da:	d0f7      	beq.n	1000f5cc <__aeabi_uidiv+0x100>
1000f5dc:	e776      	b.n	1000f4cc <__aeabi_uidiv>
1000f5de:	4770      	bx	lr

1000f5e0 <__aeabi_idiv>:
1000f5e0:	4603      	mov	r3, r0
1000f5e2:	430b      	orrs	r3, r1
1000f5e4:	d47f      	bmi.n	1000f6e6 <__aeabi_idiv+0x106>
1000f5e6:	2200      	movs	r2, #0
1000f5e8:	0843      	lsrs	r3, r0, #1
1000f5ea:	428b      	cmp	r3, r1
1000f5ec:	d374      	bcc.n	1000f6d8 <__aeabi_idiv+0xf8>
1000f5ee:	0903      	lsrs	r3, r0, #4
1000f5f0:	428b      	cmp	r3, r1
1000f5f2:	d35f      	bcc.n	1000f6b4 <__aeabi_idiv+0xd4>
1000f5f4:	0a03      	lsrs	r3, r0, #8
1000f5f6:	428b      	cmp	r3, r1
1000f5f8:	d344      	bcc.n	1000f684 <__aeabi_idiv+0xa4>
1000f5fa:	0b03      	lsrs	r3, r0, #12
1000f5fc:	428b      	cmp	r3, r1
1000f5fe:	d328      	bcc.n	1000f652 <__aeabi_idiv+0x72>
1000f600:	0c03      	lsrs	r3, r0, #16
1000f602:	428b      	cmp	r3, r1
1000f604:	d30d      	bcc.n	1000f622 <__aeabi_idiv+0x42>
1000f606:	22ff      	movs	r2, #255	; 0xff
1000f608:	0209      	lsls	r1, r1, #8
1000f60a:	ba12      	rev	r2, r2
1000f60c:	0c03      	lsrs	r3, r0, #16
1000f60e:	428b      	cmp	r3, r1
1000f610:	d302      	bcc.n	1000f618 <__aeabi_idiv+0x38>
1000f612:	1212      	asrs	r2, r2, #8
1000f614:	0209      	lsls	r1, r1, #8
1000f616:	d065      	beq.n	1000f6e4 <__aeabi_idiv+0x104>
1000f618:	0b03      	lsrs	r3, r0, #12
1000f61a:	428b      	cmp	r3, r1
1000f61c:	d319      	bcc.n	1000f652 <__aeabi_idiv+0x72>
1000f61e:	e000      	b.n	1000f622 <__aeabi_idiv+0x42>
1000f620:	0a09      	lsrs	r1, r1, #8
1000f622:	0bc3      	lsrs	r3, r0, #15
1000f624:	428b      	cmp	r3, r1
1000f626:	d301      	bcc.n	1000f62c <__aeabi_idiv+0x4c>
1000f628:	03cb      	lsls	r3, r1, #15
1000f62a:	1ac0      	subs	r0, r0, r3
1000f62c:	4152      	adcs	r2, r2
1000f62e:	0b83      	lsrs	r3, r0, #14
1000f630:	428b      	cmp	r3, r1
1000f632:	d301      	bcc.n	1000f638 <__aeabi_idiv+0x58>
1000f634:	038b      	lsls	r3, r1, #14
1000f636:	1ac0      	subs	r0, r0, r3
1000f638:	4152      	adcs	r2, r2
1000f63a:	0b43      	lsrs	r3, r0, #13
1000f63c:	428b      	cmp	r3, r1
1000f63e:	d301      	bcc.n	1000f644 <__aeabi_idiv+0x64>
1000f640:	034b      	lsls	r3, r1, #13
1000f642:	1ac0      	subs	r0, r0, r3
1000f644:	4152      	adcs	r2, r2
1000f646:	0b03      	lsrs	r3, r0, #12
1000f648:	428b      	cmp	r3, r1
1000f64a:	d301      	bcc.n	1000f650 <__aeabi_idiv+0x70>
1000f64c:	030b      	lsls	r3, r1, #12
1000f64e:	1ac0      	subs	r0, r0, r3
1000f650:	4152      	adcs	r2, r2
1000f652:	0ac3      	lsrs	r3, r0, #11
1000f654:	428b      	cmp	r3, r1
1000f656:	d301      	bcc.n	1000f65c <__aeabi_idiv+0x7c>
1000f658:	02cb      	lsls	r3, r1, #11
1000f65a:	1ac0      	subs	r0, r0, r3
1000f65c:	4152      	adcs	r2, r2
1000f65e:	0a83      	lsrs	r3, r0, #10
1000f660:	428b      	cmp	r3, r1
1000f662:	d301      	bcc.n	1000f668 <__aeabi_idiv+0x88>
1000f664:	028b      	lsls	r3, r1, #10
1000f666:	1ac0      	subs	r0, r0, r3
1000f668:	4152      	adcs	r2, r2
1000f66a:	0a43      	lsrs	r3, r0, #9
1000f66c:	428b      	cmp	r3, r1
1000f66e:	d301      	bcc.n	1000f674 <__aeabi_idiv+0x94>
1000f670:	024b      	lsls	r3, r1, #9
1000f672:	1ac0      	subs	r0, r0, r3
1000f674:	4152      	adcs	r2, r2
1000f676:	0a03      	lsrs	r3, r0, #8
1000f678:	428b      	cmp	r3, r1
1000f67a:	d301      	bcc.n	1000f680 <__aeabi_idiv+0xa0>
1000f67c:	020b      	lsls	r3, r1, #8
1000f67e:	1ac0      	subs	r0, r0, r3
1000f680:	4152      	adcs	r2, r2
1000f682:	d2cd      	bcs.n	1000f620 <__aeabi_idiv+0x40>
1000f684:	09c3      	lsrs	r3, r0, #7
1000f686:	428b      	cmp	r3, r1
1000f688:	d301      	bcc.n	1000f68e <__aeabi_idiv+0xae>
1000f68a:	01cb      	lsls	r3, r1, #7
1000f68c:	1ac0      	subs	r0, r0, r3
1000f68e:	4152      	adcs	r2, r2
1000f690:	0983      	lsrs	r3, r0, #6
1000f692:	428b      	cmp	r3, r1
1000f694:	d301      	bcc.n	1000f69a <__aeabi_idiv+0xba>
1000f696:	018b      	lsls	r3, r1, #6
1000f698:	1ac0      	subs	r0, r0, r3
1000f69a:	4152      	adcs	r2, r2
1000f69c:	0943      	lsrs	r3, r0, #5
1000f69e:	428b      	cmp	r3, r1
1000f6a0:	d301      	bcc.n	1000f6a6 <__aeabi_idiv+0xc6>
1000f6a2:	014b      	lsls	r3, r1, #5
1000f6a4:	1ac0      	subs	r0, r0, r3
1000f6a6:	4152      	adcs	r2, r2
1000f6a8:	0903      	lsrs	r3, r0, #4
1000f6aa:	428b      	cmp	r3, r1
1000f6ac:	d301      	bcc.n	1000f6b2 <__aeabi_idiv+0xd2>
1000f6ae:	010b      	lsls	r3, r1, #4
1000f6b0:	1ac0      	subs	r0, r0, r3
1000f6b2:	4152      	adcs	r2, r2
1000f6b4:	08c3      	lsrs	r3, r0, #3
1000f6b6:	428b      	cmp	r3, r1
1000f6b8:	d301      	bcc.n	1000f6be <__aeabi_idiv+0xde>
1000f6ba:	00cb      	lsls	r3, r1, #3
1000f6bc:	1ac0      	subs	r0, r0, r3
1000f6be:	4152      	adcs	r2, r2
1000f6c0:	0883      	lsrs	r3, r0, #2
1000f6c2:	428b      	cmp	r3, r1
1000f6c4:	d301      	bcc.n	1000f6ca <__aeabi_idiv+0xea>
1000f6c6:	008b      	lsls	r3, r1, #2
1000f6c8:	1ac0      	subs	r0, r0, r3
1000f6ca:	4152      	adcs	r2, r2
1000f6cc:	0843      	lsrs	r3, r0, #1
1000f6ce:	428b      	cmp	r3, r1
1000f6d0:	d301      	bcc.n	1000f6d6 <__aeabi_idiv+0xf6>
1000f6d2:	004b      	lsls	r3, r1, #1
1000f6d4:	1ac0      	subs	r0, r0, r3
1000f6d6:	4152      	adcs	r2, r2
1000f6d8:	1a41      	subs	r1, r0, r1
1000f6da:	d200      	bcs.n	1000f6de <__aeabi_idiv+0xfe>
1000f6dc:	4601      	mov	r1, r0
1000f6de:	4152      	adcs	r2, r2
1000f6e0:	4610      	mov	r0, r2
1000f6e2:	4770      	bx	lr
1000f6e4:	e05d      	b.n	1000f7a2 <__aeabi_idiv+0x1c2>
1000f6e6:	0fca      	lsrs	r2, r1, #31
1000f6e8:	d000      	beq.n	1000f6ec <__aeabi_idiv+0x10c>
1000f6ea:	4249      	negs	r1, r1
1000f6ec:	1003      	asrs	r3, r0, #32
1000f6ee:	d300      	bcc.n	1000f6f2 <__aeabi_idiv+0x112>
1000f6f0:	4240      	negs	r0, r0
1000f6f2:	4053      	eors	r3, r2
1000f6f4:	2200      	movs	r2, #0
1000f6f6:	469c      	mov	ip, r3
1000f6f8:	0903      	lsrs	r3, r0, #4
1000f6fa:	428b      	cmp	r3, r1
1000f6fc:	d32d      	bcc.n	1000f75a <__aeabi_idiv+0x17a>
1000f6fe:	0a03      	lsrs	r3, r0, #8
1000f700:	428b      	cmp	r3, r1
1000f702:	d312      	bcc.n	1000f72a <__aeabi_idiv+0x14a>
1000f704:	22fc      	movs	r2, #252	; 0xfc
1000f706:	0189      	lsls	r1, r1, #6
1000f708:	ba12      	rev	r2, r2
1000f70a:	0a03      	lsrs	r3, r0, #8
1000f70c:	428b      	cmp	r3, r1
1000f70e:	d30c      	bcc.n	1000f72a <__aeabi_idiv+0x14a>
1000f710:	0189      	lsls	r1, r1, #6
1000f712:	1192      	asrs	r2, r2, #6
1000f714:	428b      	cmp	r3, r1
1000f716:	d308      	bcc.n	1000f72a <__aeabi_idiv+0x14a>
1000f718:	0189      	lsls	r1, r1, #6
1000f71a:	1192      	asrs	r2, r2, #6
1000f71c:	428b      	cmp	r3, r1
1000f71e:	d304      	bcc.n	1000f72a <__aeabi_idiv+0x14a>
1000f720:	0189      	lsls	r1, r1, #6
1000f722:	d03a      	beq.n	1000f79a <__aeabi_idiv+0x1ba>
1000f724:	1192      	asrs	r2, r2, #6
1000f726:	e000      	b.n	1000f72a <__aeabi_idiv+0x14a>
1000f728:	0989      	lsrs	r1, r1, #6
1000f72a:	09c3      	lsrs	r3, r0, #7
1000f72c:	428b      	cmp	r3, r1
1000f72e:	d301      	bcc.n	1000f734 <__aeabi_idiv+0x154>
1000f730:	01cb      	lsls	r3, r1, #7
1000f732:	1ac0      	subs	r0, r0, r3
1000f734:	4152      	adcs	r2, r2
1000f736:	0983      	lsrs	r3, r0, #6
1000f738:	428b      	cmp	r3, r1
1000f73a:	d301      	bcc.n	1000f740 <__aeabi_idiv+0x160>
1000f73c:	018b      	lsls	r3, r1, #6
1000f73e:	1ac0      	subs	r0, r0, r3
1000f740:	4152      	adcs	r2, r2
1000f742:	0943      	lsrs	r3, r0, #5
1000f744:	428b      	cmp	r3, r1
1000f746:	d301      	bcc.n	1000f74c <__aeabi_idiv+0x16c>
1000f748:	014b      	lsls	r3, r1, #5
1000f74a:	1ac0      	subs	r0, r0, r3
1000f74c:	4152      	adcs	r2, r2
1000f74e:	0903      	lsrs	r3, r0, #4
1000f750:	428b      	cmp	r3, r1
1000f752:	d301      	bcc.n	1000f758 <__aeabi_idiv+0x178>
1000f754:	010b      	lsls	r3, r1, #4
1000f756:	1ac0      	subs	r0, r0, r3
1000f758:	4152      	adcs	r2, r2
1000f75a:	08c3      	lsrs	r3, r0, #3
1000f75c:	428b      	cmp	r3, r1
1000f75e:	d301      	bcc.n	1000f764 <__aeabi_idiv+0x184>
1000f760:	00cb      	lsls	r3, r1, #3
1000f762:	1ac0      	subs	r0, r0, r3
1000f764:	4152      	adcs	r2, r2
1000f766:	0883      	lsrs	r3, r0, #2
1000f768:	428b      	cmp	r3, r1
1000f76a:	d301      	bcc.n	1000f770 <__aeabi_idiv+0x190>
1000f76c:	008b      	lsls	r3, r1, #2
1000f76e:	1ac0      	subs	r0, r0, r3
1000f770:	4152      	adcs	r2, r2
1000f772:	d2d9      	bcs.n	1000f728 <__aeabi_idiv+0x148>
1000f774:	0843      	lsrs	r3, r0, #1
1000f776:	428b      	cmp	r3, r1
1000f778:	d301      	bcc.n	1000f77e <__aeabi_idiv+0x19e>
1000f77a:	004b      	lsls	r3, r1, #1
1000f77c:	1ac0      	subs	r0, r0, r3
1000f77e:	4152      	adcs	r2, r2
1000f780:	1a41      	subs	r1, r0, r1
1000f782:	d200      	bcs.n	1000f786 <__aeabi_idiv+0x1a6>
1000f784:	4601      	mov	r1, r0
1000f786:	4663      	mov	r3, ip
1000f788:	4152      	adcs	r2, r2
1000f78a:	105b      	asrs	r3, r3, #1
1000f78c:	4610      	mov	r0, r2
1000f78e:	d301      	bcc.n	1000f794 <__aeabi_idiv+0x1b4>
1000f790:	4240      	negs	r0, r0
1000f792:	2b00      	cmp	r3, #0
1000f794:	d500      	bpl.n	1000f798 <__aeabi_idiv+0x1b8>
1000f796:	4249      	negs	r1, r1
1000f798:	4770      	bx	lr
1000f79a:	4663      	mov	r3, ip
1000f79c:	105b      	asrs	r3, r3, #1
1000f79e:	d300      	bcc.n	1000f7a2 <__aeabi_idiv+0x1c2>
1000f7a0:	4240      	negs	r0, r0
1000f7a2:	b501      	push	{r0, lr}
1000f7a4:	2000      	movs	r0, #0
1000f7a6:	f000 f805 	bl	1000f7b4 <__aeabi_idiv0>
1000f7aa:	bd02      	pop	{r1, pc}

1000f7ac <__aeabi_idivmod>:
1000f7ac:	2900      	cmp	r1, #0
1000f7ae:	d0f8      	beq.n	1000f7a2 <__aeabi_idiv+0x1c2>
1000f7b0:	e716      	b.n	1000f5e0 <__aeabi_idiv>
1000f7b2:	4770      	bx	lr

1000f7b4 <__aeabi_idiv0>:
1000f7b4:	4770      	bx	lr
1000f7b6:	46c0      	nop			; (mov r8, r8)

1000f7b8 <__aeabi_cdrcmple>:
1000f7b8:	4684      	mov	ip, r0
1000f7ba:	1c10      	adds	r0, r2, #0
1000f7bc:	4662      	mov	r2, ip
1000f7be:	468c      	mov	ip, r1
1000f7c0:	1c19      	adds	r1, r3, #0
1000f7c2:	4663      	mov	r3, ip
1000f7c4:	e000      	b.n	1000f7c8 <__aeabi_cdcmpeq>
1000f7c6:	46c0      	nop			; (mov r8, r8)

1000f7c8 <__aeabi_cdcmpeq>:
1000f7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f7ca:	f000 fff5 	bl	100107b8 <__ledf2>
1000f7ce:	2800      	cmp	r0, #0
1000f7d0:	d401      	bmi.n	1000f7d6 <__aeabi_cdcmpeq+0xe>
1000f7d2:	2100      	movs	r1, #0
1000f7d4:	42c8      	cmn	r0, r1
1000f7d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f7d8 <__aeabi_dcmpeq>:
1000f7d8:	b510      	push	{r4, lr}
1000f7da:	f000 ff49 	bl	10010670 <__eqdf2>
1000f7de:	4240      	negs	r0, r0
1000f7e0:	3001      	adds	r0, #1
1000f7e2:	bd10      	pop	{r4, pc}

1000f7e4 <__aeabi_dcmplt>:
1000f7e4:	b510      	push	{r4, lr}
1000f7e6:	f000 ffe7 	bl	100107b8 <__ledf2>
1000f7ea:	2800      	cmp	r0, #0
1000f7ec:	db01      	blt.n	1000f7f2 <__aeabi_dcmplt+0xe>
1000f7ee:	2000      	movs	r0, #0
1000f7f0:	bd10      	pop	{r4, pc}
1000f7f2:	2001      	movs	r0, #1
1000f7f4:	bd10      	pop	{r4, pc}
1000f7f6:	46c0      	nop			; (mov r8, r8)

1000f7f8 <__aeabi_dcmple>:
1000f7f8:	b510      	push	{r4, lr}
1000f7fa:	f000 ffdd 	bl	100107b8 <__ledf2>
1000f7fe:	2800      	cmp	r0, #0
1000f800:	dd01      	ble.n	1000f806 <__aeabi_dcmple+0xe>
1000f802:	2000      	movs	r0, #0
1000f804:	bd10      	pop	{r4, pc}
1000f806:	2001      	movs	r0, #1
1000f808:	bd10      	pop	{r4, pc}
1000f80a:	46c0      	nop			; (mov r8, r8)

1000f80c <__aeabi_dcmpgt>:
1000f80c:	b510      	push	{r4, lr}
1000f80e:	f000 ff6f 	bl	100106f0 <__gedf2>
1000f812:	2800      	cmp	r0, #0
1000f814:	dc01      	bgt.n	1000f81a <__aeabi_dcmpgt+0xe>
1000f816:	2000      	movs	r0, #0
1000f818:	bd10      	pop	{r4, pc}
1000f81a:	2001      	movs	r0, #1
1000f81c:	bd10      	pop	{r4, pc}
1000f81e:	46c0      	nop			; (mov r8, r8)

1000f820 <__aeabi_dcmpge>:
1000f820:	b510      	push	{r4, lr}
1000f822:	f000 ff65 	bl	100106f0 <__gedf2>
1000f826:	2800      	cmp	r0, #0
1000f828:	da01      	bge.n	1000f82e <__aeabi_dcmpge+0xe>
1000f82a:	2000      	movs	r0, #0
1000f82c:	bd10      	pop	{r4, pc}
1000f82e:	2001      	movs	r0, #1
1000f830:	bd10      	pop	{r4, pc}
1000f832:	46c0      	nop			; (mov r8, r8)

1000f834 <__aeabi_cfrcmple>:
1000f834:	4684      	mov	ip, r0
1000f836:	1c08      	adds	r0, r1, #0
1000f838:	4661      	mov	r1, ip
1000f83a:	e7ff      	b.n	1000f83c <__aeabi_cfcmpeq>

1000f83c <__aeabi_cfcmpeq>:
1000f83c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f83e:	f000 fb91 	bl	1000ff64 <__lesf2>
1000f842:	2800      	cmp	r0, #0
1000f844:	d401      	bmi.n	1000f84a <__aeabi_cfcmpeq+0xe>
1000f846:	2100      	movs	r1, #0
1000f848:	42c8      	cmn	r0, r1
1000f84a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f84c <__aeabi_fcmpeq>:
1000f84c:	b510      	push	{r4, lr}
1000f84e:	f000 fb1d 	bl	1000fe8c <__eqsf2>
1000f852:	4240      	negs	r0, r0
1000f854:	3001      	adds	r0, #1
1000f856:	bd10      	pop	{r4, pc}

1000f858 <__aeabi_fcmplt>:
1000f858:	b510      	push	{r4, lr}
1000f85a:	f000 fb83 	bl	1000ff64 <__lesf2>
1000f85e:	2800      	cmp	r0, #0
1000f860:	db01      	blt.n	1000f866 <__aeabi_fcmplt+0xe>
1000f862:	2000      	movs	r0, #0
1000f864:	bd10      	pop	{r4, pc}
1000f866:	2001      	movs	r0, #1
1000f868:	bd10      	pop	{r4, pc}
1000f86a:	46c0      	nop			; (mov r8, r8)

1000f86c <__aeabi_fcmple>:
1000f86c:	b510      	push	{r4, lr}
1000f86e:	f000 fb79 	bl	1000ff64 <__lesf2>
1000f872:	2800      	cmp	r0, #0
1000f874:	dd01      	ble.n	1000f87a <__aeabi_fcmple+0xe>
1000f876:	2000      	movs	r0, #0
1000f878:	bd10      	pop	{r4, pc}
1000f87a:	2001      	movs	r0, #1
1000f87c:	bd10      	pop	{r4, pc}
1000f87e:	46c0      	nop			; (mov r8, r8)

1000f880 <__aeabi_fcmpgt>:
1000f880:	b510      	push	{r4, lr}
1000f882:	f000 fb2b 	bl	1000fedc <__gesf2>
1000f886:	2800      	cmp	r0, #0
1000f888:	dc01      	bgt.n	1000f88e <__aeabi_fcmpgt+0xe>
1000f88a:	2000      	movs	r0, #0
1000f88c:	bd10      	pop	{r4, pc}
1000f88e:	2001      	movs	r0, #1
1000f890:	bd10      	pop	{r4, pc}
1000f892:	46c0      	nop			; (mov r8, r8)

1000f894 <__aeabi_fcmpge>:
1000f894:	b510      	push	{r4, lr}
1000f896:	f000 fb21 	bl	1000fedc <__gesf2>
1000f89a:	2800      	cmp	r0, #0
1000f89c:	da01      	bge.n	1000f8a2 <__aeabi_fcmpge+0xe>
1000f89e:	2000      	movs	r0, #0
1000f8a0:	bd10      	pop	{r4, pc}
1000f8a2:	2001      	movs	r0, #1
1000f8a4:	bd10      	pop	{r4, pc}
1000f8a6:	46c0      	nop			; (mov r8, r8)

1000f8a8 <__aeabi_lmul>:
1000f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8aa:	464f      	mov	r7, r9
1000f8ac:	4646      	mov	r6, r8
1000f8ae:	b4c0      	push	{r6, r7}
1000f8b0:	0416      	lsls	r6, r2, #16
1000f8b2:	0c36      	lsrs	r6, r6, #16
1000f8b4:	4699      	mov	r9, r3
1000f8b6:	0033      	movs	r3, r6
1000f8b8:	0405      	lsls	r5, r0, #16
1000f8ba:	0c2c      	lsrs	r4, r5, #16
1000f8bc:	0c07      	lsrs	r7, r0, #16
1000f8be:	0c15      	lsrs	r5, r2, #16
1000f8c0:	4363      	muls	r3, r4
1000f8c2:	437e      	muls	r6, r7
1000f8c4:	436f      	muls	r7, r5
1000f8c6:	4365      	muls	r5, r4
1000f8c8:	0c1c      	lsrs	r4, r3, #16
1000f8ca:	19ad      	adds	r5, r5, r6
1000f8cc:	1964      	adds	r4, r4, r5
1000f8ce:	469c      	mov	ip, r3
1000f8d0:	42a6      	cmp	r6, r4
1000f8d2:	d903      	bls.n	1000f8dc <__aeabi_lmul+0x34>
1000f8d4:	2380      	movs	r3, #128	; 0x80
1000f8d6:	025b      	lsls	r3, r3, #9
1000f8d8:	4698      	mov	r8, r3
1000f8da:	4447      	add	r7, r8
1000f8dc:	4663      	mov	r3, ip
1000f8de:	0c25      	lsrs	r5, r4, #16
1000f8e0:	19ef      	adds	r7, r5, r7
1000f8e2:	041d      	lsls	r5, r3, #16
1000f8e4:	464b      	mov	r3, r9
1000f8e6:	434a      	muls	r2, r1
1000f8e8:	4343      	muls	r3, r0
1000f8ea:	0c2d      	lsrs	r5, r5, #16
1000f8ec:	0424      	lsls	r4, r4, #16
1000f8ee:	1964      	adds	r4, r4, r5
1000f8f0:	1899      	adds	r1, r3, r2
1000f8f2:	19c9      	adds	r1, r1, r7
1000f8f4:	0020      	movs	r0, r4
1000f8f6:	bc0c      	pop	{r2, r3}
1000f8f8:	4690      	mov	r8, r2
1000f8fa:	4699      	mov	r9, r3
1000f8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f8fe:	46c0      	nop			; (mov r8, r8)

1000f900 <__aeabi_f2uiz>:
1000f900:	219e      	movs	r1, #158	; 0x9e
1000f902:	b510      	push	{r4, lr}
1000f904:	05c9      	lsls	r1, r1, #23
1000f906:	1c04      	adds	r4, r0, #0
1000f908:	f7ff ffc4 	bl	1000f894 <__aeabi_fcmpge>
1000f90c:	2800      	cmp	r0, #0
1000f90e:	d103      	bne.n	1000f918 <__aeabi_f2uiz+0x18>
1000f910:	1c20      	adds	r0, r4, #0
1000f912:	f000 fe05 	bl	10010520 <__aeabi_f2iz>
1000f916:	bd10      	pop	{r4, pc}
1000f918:	219e      	movs	r1, #158	; 0x9e
1000f91a:	1c20      	adds	r0, r4, #0
1000f91c:	05c9      	lsls	r1, r1, #23
1000f91e:	f000 fc79 	bl	10010214 <__aeabi_fsub>
1000f922:	f000 fdfd 	bl	10010520 <__aeabi_f2iz>
1000f926:	2380      	movs	r3, #128	; 0x80
1000f928:	061b      	lsls	r3, r3, #24
1000f92a:	469c      	mov	ip, r3
1000f92c:	4460      	add	r0, ip
1000f92e:	e7f2      	b.n	1000f916 <__aeabi_f2uiz+0x16>

1000f930 <__aeabi_d2uiz>:
1000f930:	b570      	push	{r4, r5, r6, lr}
1000f932:	2200      	movs	r2, #0
1000f934:	4b0c      	ldr	r3, [pc, #48]	; (1000f968 <__aeabi_d2uiz+0x38>)
1000f936:	0004      	movs	r4, r0
1000f938:	000d      	movs	r5, r1
1000f93a:	f7ff ff71 	bl	1000f820 <__aeabi_dcmpge>
1000f93e:	2800      	cmp	r0, #0
1000f940:	d104      	bne.n	1000f94c <__aeabi_d2uiz+0x1c>
1000f942:	0020      	movs	r0, r4
1000f944:	0029      	movs	r1, r5
1000f946:	f001 fd6f 	bl	10011428 <__aeabi_d2iz>
1000f94a:	bd70      	pop	{r4, r5, r6, pc}
1000f94c:	4b06      	ldr	r3, [pc, #24]	; (1000f968 <__aeabi_d2uiz+0x38>)
1000f94e:	2200      	movs	r2, #0
1000f950:	0020      	movs	r0, r4
1000f952:	0029      	movs	r1, r5
1000f954:	f001 fa14 	bl	10010d80 <__aeabi_dsub>
1000f958:	f001 fd66 	bl	10011428 <__aeabi_d2iz>
1000f95c:	2380      	movs	r3, #128	; 0x80
1000f95e:	061b      	lsls	r3, r3, #24
1000f960:	469c      	mov	ip, r3
1000f962:	4460      	add	r0, ip
1000f964:	e7f1      	b.n	1000f94a <__aeabi_d2uiz+0x1a>
1000f966:	46c0      	nop			; (mov r8, r8)
1000f968:	41e00000 	.word	0x41e00000

1000f96c <__aeabi_fadd>:
1000f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f96e:	024a      	lsls	r2, r1, #9
1000f970:	0243      	lsls	r3, r0, #9
1000f972:	0044      	lsls	r4, r0, #1
1000f974:	004e      	lsls	r6, r1, #1
1000f976:	0fc5      	lsrs	r5, r0, #31
1000f978:	0e24      	lsrs	r4, r4, #24
1000f97a:	0028      	movs	r0, r5
1000f97c:	099b      	lsrs	r3, r3, #6
1000f97e:	0e36      	lsrs	r6, r6, #24
1000f980:	0fc9      	lsrs	r1, r1, #31
1000f982:	0992      	lsrs	r2, r2, #6
1000f984:	428d      	cmp	r5, r1
1000f986:	d059      	beq.n	1000fa3c <__aeabi_fadd+0xd0>
1000f988:	1ba0      	subs	r0, r4, r6
1000f98a:	2800      	cmp	r0, #0
1000f98c:	dc00      	bgt.n	1000f990 <__aeabi_fadd+0x24>
1000f98e:	e08d      	b.n	1000faac <__aeabi_fadd+0x140>
1000f990:	2e00      	cmp	r6, #0
1000f992:	d11a      	bne.n	1000f9ca <__aeabi_fadd+0x5e>
1000f994:	2a00      	cmp	r2, #0
1000f996:	d000      	beq.n	1000f99a <__aeabi_fadd+0x2e>
1000f998:	e079      	b.n	1000fa8e <__aeabi_fadd+0x122>
1000f99a:	075a      	lsls	r2, r3, #29
1000f99c:	d004      	beq.n	1000f9a8 <__aeabi_fadd+0x3c>
1000f99e:	220f      	movs	r2, #15
1000f9a0:	401a      	ands	r2, r3
1000f9a2:	2a04      	cmp	r2, #4
1000f9a4:	d000      	beq.n	1000f9a8 <__aeabi_fadd+0x3c>
1000f9a6:	3304      	adds	r3, #4
1000f9a8:	015a      	lsls	r2, r3, #5
1000f9aa:	d538      	bpl.n	1000fa1e <__aeabi_fadd+0xb2>
1000f9ac:	3401      	adds	r4, #1
1000f9ae:	2cff      	cmp	r4, #255	; 0xff
1000f9b0:	d100      	bne.n	1000f9b4 <__aeabi_fadd+0x48>
1000f9b2:	e089      	b.n	1000fac8 <__aeabi_fadd+0x15c>
1000f9b4:	0028      	movs	r0, r5
1000f9b6:	019b      	lsls	r3, r3, #6
1000f9b8:	0a5b      	lsrs	r3, r3, #9
1000f9ba:	b2e4      	uxtb	r4, r4
1000f9bc:	025b      	lsls	r3, r3, #9
1000f9be:	05e4      	lsls	r4, r4, #23
1000f9c0:	0a5b      	lsrs	r3, r3, #9
1000f9c2:	4323      	orrs	r3, r4
1000f9c4:	07c0      	lsls	r0, r0, #31
1000f9c6:	4318      	orrs	r0, r3
1000f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f9ca:	2cff      	cmp	r4, #255	; 0xff
1000f9cc:	d0e5      	beq.n	1000f99a <__aeabi_fadd+0x2e>
1000f9ce:	2180      	movs	r1, #128	; 0x80
1000f9d0:	04c9      	lsls	r1, r1, #19
1000f9d2:	430a      	orrs	r2, r1
1000f9d4:	281b      	cmp	r0, #27
1000f9d6:	dd00      	ble.n	1000f9da <__aeabi_fadd+0x6e>
1000f9d8:	e089      	b.n	1000faee <__aeabi_fadd+0x182>
1000f9da:	0016      	movs	r6, r2
1000f9dc:	2120      	movs	r1, #32
1000f9de:	40c6      	lsrs	r6, r0
1000f9e0:	1a08      	subs	r0, r1, r0
1000f9e2:	4082      	lsls	r2, r0
1000f9e4:	1e51      	subs	r1, r2, #1
1000f9e6:	418a      	sbcs	r2, r1
1000f9e8:	4332      	orrs	r2, r6
1000f9ea:	1a9b      	subs	r3, r3, r2
1000f9ec:	015a      	lsls	r2, r3, #5
1000f9ee:	d514      	bpl.n	1000fa1a <__aeabi_fadd+0xae>
1000f9f0:	019b      	lsls	r3, r3, #6
1000f9f2:	099e      	lsrs	r6, r3, #6
1000f9f4:	0030      	movs	r0, r6
1000f9f6:	f001 fd85 	bl	10011504 <__clzsi2>
1000f9fa:	3805      	subs	r0, #5
1000f9fc:	4086      	lsls	r6, r0
1000f9fe:	4284      	cmp	r4, r0
1000fa00:	dc65      	bgt.n	1000face <__aeabi_fadd+0x162>
1000fa02:	1b04      	subs	r4, r0, r4
1000fa04:	0033      	movs	r3, r6
1000fa06:	2020      	movs	r0, #32
1000fa08:	3401      	adds	r4, #1
1000fa0a:	40e3      	lsrs	r3, r4
1000fa0c:	1b04      	subs	r4, r0, r4
1000fa0e:	40a6      	lsls	r6, r4
1000fa10:	1e72      	subs	r2, r6, #1
1000fa12:	4196      	sbcs	r6, r2
1000fa14:	2400      	movs	r4, #0
1000fa16:	4333      	orrs	r3, r6
1000fa18:	e7bf      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fa1a:	075a      	lsls	r2, r3, #29
1000fa1c:	d1bf      	bne.n	1000f99e <__aeabi_fadd+0x32>
1000fa1e:	08df      	lsrs	r7, r3, #3
1000fa20:	0028      	movs	r0, r5
1000fa22:	2cff      	cmp	r4, #255	; 0xff
1000fa24:	d12f      	bne.n	1000fa86 <__aeabi_fadd+0x11a>
1000fa26:	2f00      	cmp	r7, #0
1000fa28:	d100      	bne.n	1000fa2c <__aeabi_fadd+0xc0>
1000fa2a:	e087      	b.n	1000fb3c <__aeabi_fadd+0x1d0>
1000fa2c:	2280      	movs	r2, #128	; 0x80
1000fa2e:	03d2      	lsls	r2, r2, #15
1000fa30:	0013      	movs	r3, r2
1000fa32:	433b      	orrs	r3, r7
1000fa34:	025b      	lsls	r3, r3, #9
1000fa36:	0a5b      	lsrs	r3, r3, #9
1000fa38:	24ff      	movs	r4, #255	; 0xff
1000fa3a:	e7bf      	b.n	1000f9bc <__aeabi_fadd+0x50>
1000fa3c:	1ba1      	subs	r1, r4, r6
1000fa3e:	2900      	cmp	r1, #0
1000fa40:	dd49      	ble.n	1000fad6 <__aeabi_fadd+0x16a>
1000fa42:	2e00      	cmp	r6, #0
1000fa44:	d029      	beq.n	1000fa9a <__aeabi_fadd+0x12e>
1000fa46:	2cff      	cmp	r4, #255	; 0xff
1000fa48:	d0a7      	beq.n	1000f99a <__aeabi_fadd+0x2e>
1000fa4a:	2680      	movs	r6, #128	; 0x80
1000fa4c:	04f6      	lsls	r6, r6, #19
1000fa4e:	4332      	orrs	r2, r6
1000fa50:	291b      	cmp	r1, #27
1000fa52:	dd00      	ble.n	1000fa56 <__aeabi_fadd+0xea>
1000fa54:	e08d      	b.n	1000fb72 <__aeabi_fadd+0x206>
1000fa56:	0017      	movs	r7, r2
1000fa58:	2620      	movs	r6, #32
1000fa5a:	40cf      	lsrs	r7, r1
1000fa5c:	1a71      	subs	r1, r6, r1
1000fa5e:	408a      	lsls	r2, r1
1000fa60:	1e51      	subs	r1, r2, #1
1000fa62:	418a      	sbcs	r2, r1
1000fa64:	433a      	orrs	r2, r7
1000fa66:	189b      	adds	r3, r3, r2
1000fa68:	015a      	lsls	r2, r3, #5
1000fa6a:	d5d6      	bpl.n	1000fa1a <__aeabi_fadd+0xae>
1000fa6c:	3401      	adds	r4, #1
1000fa6e:	2cff      	cmp	r4, #255	; 0xff
1000fa70:	d064      	beq.n	1000fb3c <__aeabi_fadd+0x1d0>
1000fa72:	2201      	movs	r2, #1
1000fa74:	4976      	ldr	r1, [pc, #472]	; (1000fc50 <__aeabi_fadd+0x2e4>)
1000fa76:	401a      	ands	r2, r3
1000fa78:	085b      	lsrs	r3, r3, #1
1000fa7a:	400b      	ands	r3, r1
1000fa7c:	4313      	orrs	r3, r2
1000fa7e:	e78c      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fa80:	1e03      	subs	r3, r0, #0
1000fa82:	d1ca      	bne.n	1000fa1a <__aeabi_fadd+0xae>
1000fa84:	2000      	movs	r0, #0
1000fa86:	027b      	lsls	r3, r7, #9
1000fa88:	0a5b      	lsrs	r3, r3, #9
1000fa8a:	b2e4      	uxtb	r4, r4
1000fa8c:	e796      	b.n	1000f9bc <__aeabi_fadd+0x50>
1000fa8e:	3801      	subs	r0, #1
1000fa90:	2800      	cmp	r0, #0
1000fa92:	d0aa      	beq.n	1000f9ea <__aeabi_fadd+0x7e>
1000fa94:	2cff      	cmp	r4, #255	; 0xff
1000fa96:	d19d      	bne.n	1000f9d4 <__aeabi_fadd+0x68>
1000fa98:	e77f      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fa9a:	2a00      	cmp	r2, #0
1000fa9c:	d100      	bne.n	1000faa0 <__aeabi_fadd+0x134>
1000fa9e:	e77c      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000faa0:	3901      	subs	r1, #1
1000faa2:	2900      	cmp	r1, #0
1000faa4:	d0df      	beq.n	1000fa66 <__aeabi_fadd+0xfa>
1000faa6:	2cff      	cmp	r4, #255	; 0xff
1000faa8:	d1d2      	bne.n	1000fa50 <__aeabi_fadd+0xe4>
1000faaa:	e776      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000faac:	2800      	cmp	r0, #0
1000faae:	d120      	bne.n	1000faf2 <__aeabi_fadd+0x186>
1000fab0:	1c60      	adds	r0, r4, #1
1000fab2:	b2c0      	uxtb	r0, r0
1000fab4:	2801      	cmp	r0, #1
1000fab6:	dd53      	ble.n	1000fb60 <__aeabi_fadd+0x1f4>
1000fab8:	2780      	movs	r7, #128	; 0x80
1000faba:	1a9e      	subs	r6, r3, r2
1000fabc:	04ff      	lsls	r7, r7, #19
1000fabe:	4037      	ands	r7, r6
1000fac0:	d02f      	beq.n	1000fb22 <__aeabi_fadd+0x1b6>
1000fac2:	1ad6      	subs	r6, r2, r3
1000fac4:	000d      	movs	r5, r1
1000fac6:	e795      	b.n	1000f9f4 <__aeabi_fadd+0x88>
1000fac8:	0028      	movs	r0, r5
1000faca:	2300      	movs	r3, #0
1000facc:	e776      	b.n	1000f9bc <__aeabi_fadd+0x50>
1000face:	4b61      	ldr	r3, [pc, #388]	; (1000fc54 <__aeabi_fadd+0x2e8>)
1000fad0:	1a24      	subs	r4, r4, r0
1000fad2:	4033      	ands	r3, r6
1000fad4:	e761      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fad6:	2900      	cmp	r1, #0
1000fad8:	d14d      	bne.n	1000fb76 <__aeabi_fadd+0x20a>
1000fada:	1c61      	adds	r1, r4, #1
1000fadc:	b2ce      	uxtb	r6, r1
1000fade:	2e01      	cmp	r6, #1
1000fae0:	dd2f      	ble.n	1000fb42 <__aeabi_fadd+0x1d6>
1000fae2:	29ff      	cmp	r1, #255	; 0xff
1000fae4:	d02a      	beq.n	1000fb3c <__aeabi_fadd+0x1d0>
1000fae6:	189b      	adds	r3, r3, r2
1000fae8:	085b      	lsrs	r3, r3, #1
1000faea:	000c      	movs	r4, r1
1000faec:	e755      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000faee:	2201      	movs	r2, #1
1000faf0:	e77b      	b.n	1000f9ea <__aeabi_fadd+0x7e>
1000faf2:	2c00      	cmp	r4, #0
1000faf4:	d11b      	bne.n	1000fb2e <__aeabi_fadd+0x1c2>
1000faf6:	2b00      	cmp	r3, #0
1000faf8:	d05b      	beq.n	1000fbb2 <__aeabi_fadd+0x246>
1000fafa:	43c0      	mvns	r0, r0
1000fafc:	2800      	cmp	r0, #0
1000fafe:	d00c      	beq.n	1000fb1a <__aeabi_fadd+0x1ae>
1000fb00:	2eff      	cmp	r6, #255	; 0xff
1000fb02:	d07e      	beq.n	1000fc02 <__aeabi_fadd+0x296>
1000fb04:	281b      	cmp	r0, #27
1000fb06:	dd00      	ble.n	1000fb0a <__aeabi_fadd+0x19e>
1000fb08:	e092      	b.n	1000fc30 <__aeabi_fadd+0x2c4>
1000fb0a:	001d      	movs	r5, r3
1000fb0c:	2420      	movs	r4, #32
1000fb0e:	40c5      	lsrs	r5, r0
1000fb10:	1a20      	subs	r0, r4, r0
1000fb12:	4083      	lsls	r3, r0
1000fb14:	1e58      	subs	r0, r3, #1
1000fb16:	4183      	sbcs	r3, r0
1000fb18:	432b      	orrs	r3, r5
1000fb1a:	1ad3      	subs	r3, r2, r3
1000fb1c:	0034      	movs	r4, r6
1000fb1e:	000d      	movs	r5, r1
1000fb20:	e764      	b.n	1000f9ec <__aeabi_fadd+0x80>
1000fb22:	2e00      	cmp	r6, #0
1000fb24:	d000      	beq.n	1000fb28 <__aeabi_fadd+0x1bc>
1000fb26:	e765      	b.n	1000f9f4 <__aeabi_fadd+0x88>
1000fb28:	2000      	movs	r0, #0
1000fb2a:	2400      	movs	r4, #0
1000fb2c:	e7ab      	b.n	1000fa86 <__aeabi_fadd+0x11a>
1000fb2e:	2eff      	cmp	r6, #255	; 0xff
1000fb30:	d067      	beq.n	1000fc02 <__aeabi_fadd+0x296>
1000fb32:	2480      	movs	r4, #128	; 0x80
1000fb34:	04e4      	lsls	r4, r4, #19
1000fb36:	4240      	negs	r0, r0
1000fb38:	4323      	orrs	r3, r4
1000fb3a:	e7e3      	b.n	1000fb04 <__aeabi_fadd+0x198>
1000fb3c:	24ff      	movs	r4, #255	; 0xff
1000fb3e:	2300      	movs	r3, #0
1000fb40:	e73c      	b.n	1000f9bc <__aeabi_fadd+0x50>
1000fb42:	2c00      	cmp	r4, #0
1000fb44:	d161      	bne.n	1000fc0a <__aeabi_fadd+0x29e>
1000fb46:	2b00      	cmp	r3, #0
1000fb48:	d07e      	beq.n	1000fc48 <__aeabi_fadd+0x2dc>
1000fb4a:	2a00      	cmp	r2, #0
1000fb4c:	d100      	bne.n	1000fb50 <__aeabi_fadd+0x1e4>
1000fb4e:	e724      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fb50:	189b      	adds	r3, r3, r2
1000fb52:	015a      	lsls	r2, r3, #5
1000fb54:	d400      	bmi.n	1000fb58 <__aeabi_fadd+0x1ec>
1000fb56:	e760      	b.n	1000fa1a <__aeabi_fadd+0xae>
1000fb58:	4a3e      	ldr	r2, [pc, #248]	; (1000fc54 <__aeabi_fadd+0x2e8>)
1000fb5a:	000c      	movs	r4, r1
1000fb5c:	4013      	ands	r3, r2
1000fb5e:	e71c      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fb60:	2c00      	cmp	r4, #0
1000fb62:	d11e      	bne.n	1000fba2 <__aeabi_fadd+0x236>
1000fb64:	2b00      	cmp	r3, #0
1000fb66:	d12f      	bne.n	1000fbc8 <__aeabi_fadd+0x25c>
1000fb68:	2a00      	cmp	r2, #0
1000fb6a:	d066      	beq.n	1000fc3a <__aeabi_fadd+0x2ce>
1000fb6c:	0013      	movs	r3, r2
1000fb6e:	000d      	movs	r5, r1
1000fb70:	e713      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fb72:	2201      	movs	r2, #1
1000fb74:	e777      	b.n	1000fa66 <__aeabi_fadd+0xfa>
1000fb76:	2c00      	cmp	r4, #0
1000fb78:	d11f      	bne.n	1000fbba <__aeabi_fadd+0x24e>
1000fb7a:	2b00      	cmp	r3, #0
1000fb7c:	d05a      	beq.n	1000fc34 <__aeabi_fadd+0x2c8>
1000fb7e:	43c9      	mvns	r1, r1
1000fb80:	2900      	cmp	r1, #0
1000fb82:	d00b      	beq.n	1000fb9c <__aeabi_fadd+0x230>
1000fb84:	2eff      	cmp	r6, #255	; 0xff
1000fb86:	d050      	beq.n	1000fc2a <__aeabi_fadd+0x2be>
1000fb88:	291b      	cmp	r1, #27
1000fb8a:	dc5f      	bgt.n	1000fc4c <__aeabi_fadd+0x2e0>
1000fb8c:	001f      	movs	r7, r3
1000fb8e:	2420      	movs	r4, #32
1000fb90:	40cf      	lsrs	r7, r1
1000fb92:	1a61      	subs	r1, r4, r1
1000fb94:	408b      	lsls	r3, r1
1000fb96:	1e59      	subs	r1, r3, #1
1000fb98:	418b      	sbcs	r3, r1
1000fb9a:	433b      	orrs	r3, r7
1000fb9c:	189b      	adds	r3, r3, r2
1000fb9e:	0034      	movs	r4, r6
1000fba0:	e762      	b.n	1000fa68 <__aeabi_fadd+0xfc>
1000fba2:	2b00      	cmp	r3, #0
1000fba4:	d11c      	bne.n	1000fbe0 <__aeabi_fadd+0x274>
1000fba6:	2a00      	cmp	r2, #0
1000fba8:	d04a      	beq.n	1000fc40 <__aeabi_fadd+0x2d4>
1000fbaa:	0013      	movs	r3, r2
1000fbac:	000d      	movs	r5, r1
1000fbae:	24ff      	movs	r4, #255	; 0xff
1000fbb0:	e6f3      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fbb2:	0013      	movs	r3, r2
1000fbb4:	0034      	movs	r4, r6
1000fbb6:	000d      	movs	r5, r1
1000fbb8:	e6ef      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fbba:	2eff      	cmp	r6, #255	; 0xff
1000fbbc:	d035      	beq.n	1000fc2a <__aeabi_fadd+0x2be>
1000fbbe:	2480      	movs	r4, #128	; 0x80
1000fbc0:	04e4      	lsls	r4, r4, #19
1000fbc2:	4249      	negs	r1, r1
1000fbc4:	4323      	orrs	r3, r4
1000fbc6:	e7df      	b.n	1000fb88 <__aeabi_fadd+0x21c>
1000fbc8:	2a00      	cmp	r2, #0
1000fbca:	d100      	bne.n	1000fbce <__aeabi_fadd+0x262>
1000fbcc:	e6e5      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fbce:	2780      	movs	r7, #128	; 0x80
1000fbd0:	1a98      	subs	r0, r3, r2
1000fbd2:	04ff      	lsls	r7, r7, #19
1000fbd4:	4007      	ands	r7, r0
1000fbd6:	d100      	bne.n	1000fbda <__aeabi_fadd+0x26e>
1000fbd8:	e752      	b.n	1000fa80 <__aeabi_fadd+0x114>
1000fbda:	1ad3      	subs	r3, r2, r3
1000fbdc:	000d      	movs	r5, r1
1000fbde:	e6dc      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fbe0:	24ff      	movs	r4, #255	; 0xff
1000fbe2:	2a00      	cmp	r2, #0
1000fbe4:	d100      	bne.n	1000fbe8 <__aeabi_fadd+0x27c>
1000fbe6:	e6d8      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fbe8:	2080      	movs	r0, #128	; 0x80
1000fbea:	08db      	lsrs	r3, r3, #3
1000fbec:	03c0      	lsls	r0, r0, #15
1000fbee:	4203      	tst	r3, r0
1000fbf0:	d004      	beq.n	1000fbfc <__aeabi_fadd+0x290>
1000fbf2:	08d2      	lsrs	r2, r2, #3
1000fbf4:	4202      	tst	r2, r0
1000fbf6:	d101      	bne.n	1000fbfc <__aeabi_fadd+0x290>
1000fbf8:	0013      	movs	r3, r2
1000fbfa:	000d      	movs	r5, r1
1000fbfc:	00db      	lsls	r3, r3, #3
1000fbfe:	24ff      	movs	r4, #255	; 0xff
1000fc00:	e6cb      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc02:	0013      	movs	r3, r2
1000fc04:	24ff      	movs	r4, #255	; 0xff
1000fc06:	000d      	movs	r5, r1
1000fc08:	e6c7      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc0a:	2b00      	cmp	r3, #0
1000fc0c:	d00d      	beq.n	1000fc2a <__aeabi_fadd+0x2be>
1000fc0e:	24ff      	movs	r4, #255	; 0xff
1000fc10:	2a00      	cmp	r2, #0
1000fc12:	d100      	bne.n	1000fc16 <__aeabi_fadd+0x2aa>
1000fc14:	e6c1      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc16:	2180      	movs	r1, #128	; 0x80
1000fc18:	08db      	lsrs	r3, r3, #3
1000fc1a:	03c9      	lsls	r1, r1, #15
1000fc1c:	420b      	tst	r3, r1
1000fc1e:	d0ed      	beq.n	1000fbfc <__aeabi_fadd+0x290>
1000fc20:	08d2      	lsrs	r2, r2, #3
1000fc22:	420a      	tst	r2, r1
1000fc24:	d1ea      	bne.n	1000fbfc <__aeabi_fadd+0x290>
1000fc26:	0013      	movs	r3, r2
1000fc28:	e7e8      	b.n	1000fbfc <__aeabi_fadd+0x290>
1000fc2a:	0013      	movs	r3, r2
1000fc2c:	24ff      	movs	r4, #255	; 0xff
1000fc2e:	e6b4      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc30:	2301      	movs	r3, #1
1000fc32:	e772      	b.n	1000fb1a <__aeabi_fadd+0x1ae>
1000fc34:	0013      	movs	r3, r2
1000fc36:	0034      	movs	r4, r6
1000fc38:	e6af      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc3a:	2700      	movs	r7, #0
1000fc3c:	2000      	movs	r0, #0
1000fc3e:	e722      	b.n	1000fa86 <__aeabi_fadd+0x11a>
1000fc40:	2780      	movs	r7, #128	; 0x80
1000fc42:	2000      	movs	r0, #0
1000fc44:	03ff      	lsls	r7, r7, #15
1000fc46:	e6f1      	b.n	1000fa2c <__aeabi_fadd+0xc0>
1000fc48:	0013      	movs	r3, r2
1000fc4a:	e6a6      	b.n	1000f99a <__aeabi_fadd+0x2e>
1000fc4c:	2301      	movs	r3, #1
1000fc4e:	e7a5      	b.n	1000fb9c <__aeabi_fadd+0x230>
1000fc50:	7dffffff 	.word	0x7dffffff
1000fc54:	fbffffff 	.word	0xfbffffff

1000fc58 <__aeabi_fdiv>:
1000fc58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc5a:	4656      	mov	r6, sl
1000fc5c:	4644      	mov	r4, r8
1000fc5e:	465f      	mov	r7, fp
1000fc60:	464d      	mov	r5, r9
1000fc62:	b4f0      	push	{r4, r5, r6, r7}
1000fc64:	0244      	lsls	r4, r0, #9
1000fc66:	0046      	lsls	r6, r0, #1
1000fc68:	0fc7      	lsrs	r7, r0, #31
1000fc6a:	b083      	sub	sp, #12
1000fc6c:	4688      	mov	r8, r1
1000fc6e:	0a65      	lsrs	r5, r4, #9
1000fc70:	0e36      	lsrs	r6, r6, #24
1000fc72:	46ba      	mov	sl, r7
1000fc74:	d03d      	beq.n	1000fcf2 <__aeabi_fdiv+0x9a>
1000fc76:	2eff      	cmp	r6, #255	; 0xff
1000fc78:	d022      	beq.n	1000fcc0 <__aeabi_fdiv+0x68>
1000fc7a:	2300      	movs	r3, #0
1000fc7c:	00ec      	lsls	r4, r5, #3
1000fc7e:	2580      	movs	r5, #128	; 0x80
1000fc80:	4699      	mov	r9, r3
1000fc82:	469b      	mov	fp, r3
1000fc84:	04ed      	lsls	r5, r5, #19
1000fc86:	4325      	orrs	r5, r4
1000fc88:	3e7f      	subs	r6, #127	; 0x7f
1000fc8a:	4643      	mov	r3, r8
1000fc8c:	025c      	lsls	r4, r3, #9
1000fc8e:	0058      	lsls	r0, r3, #1
1000fc90:	0fdb      	lsrs	r3, r3, #31
1000fc92:	0a64      	lsrs	r4, r4, #9
1000fc94:	0e00      	lsrs	r0, r0, #24
1000fc96:	4698      	mov	r8, r3
1000fc98:	d036      	beq.n	1000fd08 <__aeabi_fdiv+0xb0>
1000fc9a:	28ff      	cmp	r0, #255	; 0xff
1000fc9c:	d030      	beq.n	1000fd00 <__aeabi_fdiv+0xa8>
1000fc9e:	2380      	movs	r3, #128	; 0x80
1000fca0:	2100      	movs	r1, #0
1000fca2:	00e4      	lsls	r4, r4, #3
1000fca4:	04db      	lsls	r3, r3, #19
1000fca6:	431c      	orrs	r4, r3
1000fca8:	387f      	subs	r0, #127	; 0x7f
1000fcaa:	1a30      	subs	r0, r6, r0
1000fcac:	9001      	str	r0, [sp, #4]
1000fcae:	4648      	mov	r0, r9
1000fcb0:	4642      	mov	r2, r8
1000fcb2:	4308      	orrs	r0, r1
1000fcb4:	4e72      	ldr	r6, [pc, #456]	; (1000fe80 <__aeabi_fdiv+0x228>)
1000fcb6:	0080      	lsls	r0, r0, #2
1000fcb8:	5830      	ldr	r0, [r6, r0]
1000fcba:	407a      	eors	r2, r7
1000fcbc:	0013      	movs	r3, r2
1000fcbe:	4687      	mov	pc, r0
1000fcc0:	2d00      	cmp	r5, #0
1000fcc2:	d144      	bne.n	1000fd4e <__aeabi_fdiv+0xf6>
1000fcc4:	2308      	movs	r3, #8
1000fcc6:	4699      	mov	r9, r3
1000fcc8:	3b06      	subs	r3, #6
1000fcca:	469b      	mov	fp, r3
1000fccc:	e7dd      	b.n	1000fc8a <__aeabi_fdiv+0x32>
1000fcce:	2201      	movs	r2, #1
1000fcd0:	20ff      	movs	r0, #255	; 0xff
1000fcd2:	2400      	movs	r4, #0
1000fcd4:	401a      	ands	r2, r3
1000fcd6:	0264      	lsls	r4, r4, #9
1000fcd8:	05c3      	lsls	r3, r0, #23
1000fcda:	0a64      	lsrs	r4, r4, #9
1000fcdc:	07d2      	lsls	r2, r2, #31
1000fcde:	431c      	orrs	r4, r3
1000fce0:	4314      	orrs	r4, r2
1000fce2:	0020      	movs	r0, r4
1000fce4:	b003      	add	sp, #12
1000fce6:	bc3c      	pop	{r2, r3, r4, r5}
1000fce8:	4690      	mov	r8, r2
1000fcea:	4699      	mov	r9, r3
1000fcec:	46a2      	mov	sl, r4
1000fcee:	46ab      	mov	fp, r5
1000fcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fcf2:	2d00      	cmp	r5, #0
1000fcf4:	d120      	bne.n	1000fd38 <__aeabi_fdiv+0xe0>
1000fcf6:	2304      	movs	r3, #4
1000fcf8:	4699      	mov	r9, r3
1000fcfa:	3b03      	subs	r3, #3
1000fcfc:	469b      	mov	fp, r3
1000fcfe:	e7c4      	b.n	1000fc8a <__aeabi_fdiv+0x32>
1000fd00:	2c00      	cmp	r4, #0
1000fd02:	d117      	bne.n	1000fd34 <__aeabi_fdiv+0xdc>
1000fd04:	2102      	movs	r1, #2
1000fd06:	e002      	b.n	1000fd0e <__aeabi_fdiv+0xb6>
1000fd08:	2c00      	cmp	r4, #0
1000fd0a:	d10a      	bne.n	1000fd22 <__aeabi_fdiv+0xca>
1000fd0c:	2101      	movs	r1, #1
1000fd0e:	1a32      	subs	r2, r6, r0
1000fd10:	9201      	str	r2, [sp, #4]
1000fd12:	464a      	mov	r2, r9
1000fd14:	4643      	mov	r3, r8
1000fd16:	430a      	orrs	r2, r1
1000fd18:	485a      	ldr	r0, [pc, #360]	; (1000fe84 <__aeabi_fdiv+0x22c>)
1000fd1a:	0092      	lsls	r2, r2, #2
1000fd1c:	5882      	ldr	r2, [r0, r2]
1000fd1e:	407b      	eors	r3, r7
1000fd20:	4697      	mov	pc, r2
1000fd22:	0020      	movs	r0, r4
1000fd24:	f001 fbee 	bl	10011504 <__clzsi2>
1000fd28:	1f43      	subs	r3, r0, #5
1000fd2a:	3076      	adds	r0, #118	; 0x76
1000fd2c:	409c      	lsls	r4, r3
1000fd2e:	4240      	negs	r0, r0
1000fd30:	2100      	movs	r1, #0
1000fd32:	e7ba      	b.n	1000fcaa <__aeabi_fdiv+0x52>
1000fd34:	2103      	movs	r1, #3
1000fd36:	e7b8      	b.n	1000fcaa <__aeabi_fdiv+0x52>
1000fd38:	0028      	movs	r0, r5
1000fd3a:	f001 fbe3 	bl	10011504 <__clzsi2>
1000fd3e:	1f43      	subs	r3, r0, #5
1000fd40:	409d      	lsls	r5, r3
1000fd42:	2300      	movs	r3, #0
1000fd44:	3076      	adds	r0, #118	; 0x76
1000fd46:	4246      	negs	r6, r0
1000fd48:	4699      	mov	r9, r3
1000fd4a:	469b      	mov	fp, r3
1000fd4c:	e79d      	b.n	1000fc8a <__aeabi_fdiv+0x32>
1000fd4e:	230c      	movs	r3, #12
1000fd50:	4699      	mov	r9, r3
1000fd52:	3b09      	subs	r3, #9
1000fd54:	469b      	mov	fp, r3
1000fd56:	e798      	b.n	1000fc8a <__aeabi_fdiv+0x32>
1000fd58:	2480      	movs	r4, #128	; 0x80
1000fd5a:	2200      	movs	r2, #0
1000fd5c:	03e4      	lsls	r4, r4, #15
1000fd5e:	20ff      	movs	r0, #255	; 0xff
1000fd60:	e7b9      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fd62:	2400      	movs	r4, #0
1000fd64:	46c2      	mov	sl, r8
1000fd66:	468b      	mov	fp, r1
1000fd68:	465a      	mov	r2, fp
1000fd6a:	4653      	mov	r3, sl
1000fd6c:	2a02      	cmp	r2, #2
1000fd6e:	d0ae      	beq.n	1000fcce <__aeabi_fdiv+0x76>
1000fd70:	2a03      	cmp	r2, #3
1000fd72:	d07d      	beq.n	1000fe70 <__aeabi_fdiv+0x218>
1000fd74:	2a01      	cmp	r2, #1
1000fd76:	d131      	bne.n	1000fddc <__aeabi_fdiv+0x184>
1000fd78:	2201      	movs	r2, #1
1000fd7a:	2000      	movs	r0, #0
1000fd7c:	401a      	ands	r2, r3
1000fd7e:	2400      	movs	r4, #0
1000fd80:	e7a9      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fd82:	2201      	movs	r2, #1
1000fd84:	1a10      	subs	r0, r2, r0
1000fd86:	281b      	cmp	r0, #27
1000fd88:	dd56      	ble.n	1000fe38 <__aeabi_fdiv+0x1e0>
1000fd8a:	401a      	ands	r2, r3
1000fd8c:	2000      	movs	r0, #0
1000fd8e:	2400      	movs	r4, #0
1000fd90:	e7a1      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fd92:	2380      	movs	r3, #128	; 0x80
1000fd94:	03db      	lsls	r3, r3, #15
1000fd96:	421d      	tst	r5, r3
1000fd98:	d14b      	bne.n	1000fe32 <__aeabi_fdiv+0x1da>
1000fd9a:	2380      	movs	r3, #128	; 0x80
1000fd9c:	03db      	lsls	r3, r3, #15
1000fd9e:	432b      	orrs	r3, r5
1000fda0:	025c      	lsls	r4, r3, #9
1000fda2:	0a64      	lsrs	r4, r4, #9
1000fda4:	003a      	movs	r2, r7
1000fda6:	20ff      	movs	r0, #255	; 0xff
1000fda8:	e795      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fdaa:	016d      	lsls	r5, r5, #5
1000fdac:	0160      	lsls	r0, r4, #5
1000fdae:	4285      	cmp	r5, r0
1000fdb0:	d230      	bcs.n	1000fe14 <__aeabi_fdiv+0x1bc>
1000fdb2:	9a01      	ldr	r2, [sp, #4]
1000fdb4:	2400      	movs	r4, #0
1000fdb6:	3a01      	subs	r2, #1
1000fdb8:	9201      	str	r2, [sp, #4]
1000fdba:	221b      	movs	r2, #27
1000fdbc:	2701      	movs	r7, #1
1000fdbe:	0029      	movs	r1, r5
1000fdc0:	0064      	lsls	r4, r4, #1
1000fdc2:	006d      	lsls	r5, r5, #1
1000fdc4:	2900      	cmp	r1, #0
1000fdc6:	db01      	blt.n	1000fdcc <__aeabi_fdiv+0x174>
1000fdc8:	42a8      	cmp	r0, r5
1000fdca:	d801      	bhi.n	1000fdd0 <__aeabi_fdiv+0x178>
1000fdcc:	1a2d      	subs	r5, r5, r0
1000fdce:	433c      	orrs	r4, r7
1000fdd0:	3a01      	subs	r2, #1
1000fdd2:	2a00      	cmp	r2, #0
1000fdd4:	d1f3      	bne.n	1000fdbe <__aeabi_fdiv+0x166>
1000fdd6:	1e6a      	subs	r2, r5, #1
1000fdd8:	4195      	sbcs	r5, r2
1000fdda:	432c      	orrs	r4, r5
1000fddc:	9801      	ldr	r0, [sp, #4]
1000fdde:	307f      	adds	r0, #127	; 0x7f
1000fde0:	2800      	cmp	r0, #0
1000fde2:	ddce      	ble.n	1000fd82 <__aeabi_fdiv+0x12a>
1000fde4:	0762      	lsls	r2, r4, #29
1000fde6:	d004      	beq.n	1000fdf2 <__aeabi_fdiv+0x19a>
1000fde8:	220f      	movs	r2, #15
1000fdea:	4022      	ands	r2, r4
1000fdec:	2a04      	cmp	r2, #4
1000fdee:	d000      	beq.n	1000fdf2 <__aeabi_fdiv+0x19a>
1000fdf0:	3404      	adds	r4, #4
1000fdf2:	0122      	lsls	r2, r4, #4
1000fdf4:	d503      	bpl.n	1000fdfe <__aeabi_fdiv+0x1a6>
1000fdf6:	4a24      	ldr	r2, [pc, #144]	; (1000fe88 <__aeabi_fdiv+0x230>)
1000fdf8:	9801      	ldr	r0, [sp, #4]
1000fdfa:	4014      	ands	r4, r2
1000fdfc:	3080      	adds	r0, #128	; 0x80
1000fdfe:	28fe      	cmp	r0, #254	; 0xfe
1000fe00:	dd00      	ble.n	1000fe04 <__aeabi_fdiv+0x1ac>
1000fe02:	e764      	b.n	1000fcce <__aeabi_fdiv+0x76>
1000fe04:	2201      	movs	r2, #1
1000fe06:	01a4      	lsls	r4, r4, #6
1000fe08:	0a64      	lsrs	r4, r4, #9
1000fe0a:	b2c0      	uxtb	r0, r0
1000fe0c:	401a      	ands	r2, r3
1000fe0e:	e762      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fe10:	002c      	movs	r4, r5
1000fe12:	e7a9      	b.n	1000fd68 <__aeabi_fdiv+0x110>
1000fe14:	1a2d      	subs	r5, r5, r0
1000fe16:	221a      	movs	r2, #26
1000fe18:	2401      	movs	r4, #1
1000fe1a:	e7cf      	b.n	1000fdbc <__aeabi_fdiv+0x164>
1000fe1c:	026b      	lsls	r3, r5, #9
1000fe1e:	d5bc      	bpl.n	1000fd9a <__aeabi_fdiv+0x142>
1000fe20:	2400      	movs	r4, #0
1000fe22:	2380      	movs	r3, #128	; 0x80
1000fe24:	03db      	lsls	r3, r3, #15
1000fe26:	431c      	orrs	r4, r3
1000fe28:	0264      	lsls	r4, r4, #9
1000fe2a:	0a64      	lsrs	r4, r4, #9
1000fe2c:	4642      	mov	r2, r8
1000fe2e:	20ff      	movs	r0, #255	; 0xff
1000fe30:	e751      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fe32:	421c      	tst	r4, r3
1000fe34:	d1b3      	bne.n	1000fd9e <__aeabi_fdiv+0x146>
1000fe36:	e7f4      	b.n	1000fe22 <__aeabi_fdiv+0x1ca>
1000fe38:	0021      	movs	r1, r4
1000fe3a:	2220      	movs	r2, #32
1000fe3c:	40c1      	lsrs	r1, r0
1000fe3e:	1a10      	subs	r0, r2, r0
1000fe40:	4084      	lsls	r4, r0
1000fe42:	1e62      	subs	r2, r4, #1
1000fe44:	4194      	sbcs	r4, r2
1000fe46:	430c      	orrs	r4, r1
1000fe48:	0762      	lsls	r2, r4, #29
1000fe4a:	d004      	beq.n	1000fe56 <__aeabi_fdiv+0x1fe>
1000fe4c:	220f      	movs	r2, #15
1000fe4e:	4022      	ands	r2, r4
1000fe50:	2a04      	cmp	r2, #4
1000fe52:	d000      	beq.n	1000fe56 <__aeabi_fdiv+0x1fe>
1000fe54:	3404      	adds	r4, #4
1000fe56:	0162      	lsls	r2, r4, #5
1000fe58:	d504      	bpl.n	1000fe64 <__aeabi_fdiv+0x20c>
1000fe5a:	2201      	movs	r2, #1
1000fe5c:	2001      	movs	r0, #1
1000fe5e:	401a      	ands	r2, r3
1000fe60:	2400      	movs	r4, #0
1000fe62:	e738      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fe64:	2201      	movs	r2, #1
1000fe66:	01a4      	lsls	r4, r4, #6
1000fe68:	0a64      	lsrs	r4, r4, #9
1000fe6a:	401a      	ands	r2, r3
1000fe6c:	2000      	movs	r0, #0
1000fe6e:	e732      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fe70:	2380      	movs	r3, #128	; 0x80
1000fe72:	03db      	lsls	r3, r3, #15
1000fe74:	431c      	orrs	r4, r3
1000fe76:	0264      	lsls	r4, r4, #9
1000fe78:	0a64      	lsrs	r4, r4, #9
1000fe7a:	4652      	mov	r2, sl
1000fe7c:	20ff      	movs	r0, #255	; 0xff
1000fe7e:	e72a      	b.n	1000fcd6 <__aeabi_fdiv+0x7e>
1000fe80:	10013688 	.word	0x10013688
1000fe84:	100136c8 	.word	0x100136c8
1000fe88:	f7ffffff 	.word	0xf7ffffff

1000fe8c <__eqsf2>:
1000fe8c:	0243      	lsls	r3, r0, #9
1000fe8e:	b570      	push	{r4, r5, r6, lr}
1000fe90:	0042      	lsls	r2, r0, #1
1000fe92:	004c      	lsls	r4, r1, #1
1000fe94:	0a5d      	lsrs	r5, r3, #9
1000fe96:	0fc3      	lsrs	r3, r0, #31
1000fe98:	0248      	lsls	r0, r1, #9
1000fe9a:	0e12      	lsrs	r2, r2, #24
1000fe9c:	0a46      	lsrs	r6, r0, #9
1000fe9e:	0e24      	lsrs	r4, r4, #24
1000fea0:	0fc9      	lsrs	r1, r1, #31
1000fea2:	2aff      	cmp	r2, #255	; 0xff
1000fea4:	d00f      	beq.n	1000fec6 <__eqsf2+0x3a>
1000fea6:	2cff      	cmp	r4, #255	; 0xff
1000fea8:	d011      	beq.n	1000fece <__eqsf2+0x42>
1000feaa:	2001      	movs	r0, #1
1000feac:	42a2      	cmp	r2, r4
1000feae:	d000      	beq.n	1000feb2 <__eqsf2+0x26>
1000feb0:	bd70      	pop	{r4, r5, r6, pc}
1000feb2:	42b5      	cmp	r5, r6
1000feb4:	d1fc      	bne.n	1000feb0 <__eqsf2+0x24>
1000feb6:	428b      	cmp	r3, r1
1000feb8:	d00d      	beq.n	1000fed6 <__eqsf2+0x4a>
1000feba:	2a00      	cmp	r2, #0
1000febc:	d1f8      	bne.n	1000feb0 <__eqsf2+0x24>
1000febe:	0028      	movs	r0, r5
1000fec0:	1e43      	subs	r3, r0, #1
1000fec2:	4198      	sbcs	r0, r3
1000fec4:	e7f4      	b.n	1000feb0 <__eqsf2+0x24>
1000fec6:	2001      	movs	r0, #1
1000fec8:	2d00      	cmp	r5, #0
1000feca:	d1f1      	bne.n	1000feb0 <__eqsf2+0x24>
1000fecc:	e7eb      	b.n	1000fea6 <__eqsf2+0x1a>
1000fece:	2001      	movs	r0, #1
1000fed0:	2e00      	cmp	r6, #0
1000fed2:	d1ed      	bne.n	1000feb0 <__eqsf2+0x24>
1000fed4:	e7e9      	b.n	1000feaa <__eqsf2+0x1e>
1000fed6:	2000      	movs	r0, #0
1000fed8:	e7ea      	b.n	1000feb0 <__eqsf2+0x24>
1000feda:	46c0      	nop			; (mov r8, r8)

1000fedc <__gesf2>:
1000fedc:	0243      	lsls	r3, r0, #9
1000fede:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fee0:	0042      	lsls	r2, r0, #1
1000fee2:	0a5d      	lsrs	r5, r3, #9
1000fee4:	0fc3      	lsrs	r3, r0, #31
1000fee6:	0248      	lsls	r0, r1, #9
1000fee8:	0a44      	lsrs	r4, r0, #9
1000feea:	0048      	lsls	r0, r1, #1
1000feec:	0e12      	lsrs	r2, r2, #24
1000feee:	0e00      	lsrs	r0, r0, #24
1000fef0:	0fc9      	lsrs	r1, r1, #31
1000fef2:	2aff      	cmp	r2, #255	; 0xff
1000fef4:	d01f      	beq.n	1000ff36 <__gesf2+0x5a>
1000fef6:	28ff      	cmp	r0, #255	; 0xff
1000fef8:	d022      	beq.n	1000ff40 <__gesf2+0x64>
1000fefa:	2a00      	cmp	r2, #0
1000fefc:	d109      	bne.n	1000ff12 <__gesf2+0x36>
1000fefe:	426e      	negs	r6, r5
1000ff00:	416e      	adcs	r6, r5
1000ff02:	2800      	cmp	r0, #0
1000ff04:	d10f      	bne.n	1000ff26 <__gesf2+0x4a>
1000ff06:	2c00      	cmp	r4, #0
1000ff08:	d10d      	bne.n	1000ff26 <__gesf2+0x4a>
1000ff0a:	2000      	movs	r0, #0
1000ff0c:	2d00      	cmp	r5, #0
1000ff0e:	d009      	beq.n	1000ff24 <__gesf2+0x48>
1000ff10:	e005      	b.n	1000ff1e <__gesf2+0x42>
1000ff12:	2800      	cmp	r0, #0
1000ff14:	d101      	bne.n	1000ff1a <__gesf2+0x3e>
1000ff16:	2c00      	cmp	r4, #0
1000ff18:	d001      	beq.n	1000ff1e <__gesf2+0x42>
1000ff1a:	428b      	cmp	r3, r1
1000ff1c:	d013      	beq.n	1000ff46 <__gesf2+0x6a>
1000ff1e:	4258      	negs	r0, r3
1000ff20:	2301      	movs	r3, #1
1000ff22:	4318      	orrs	r0, r3
1000ff24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff26:	2e00      	cmp	r6, #0
1000ff28:	d0f7      	beq.n	1000ff1a <__gesf2+0x3e>
1000ff2a:	4248      	negs	r0, r1
1000ff2c:	4141      	adcs	r1, r0
1000ff2e:	2001      	movs	r0, #1
1000ff30:	4249      	negs	r1, r1
1000ff32:	4308      	orrs	r0, r1
1000ff34:	e7f6      	b.n	1000ff24 <__gesf2+0x48>
1000ff36:	2d00      	cmp	r5, #0
1000ff38:	d0dd      	beq.n	1000fef6 <__gesf2+0x1a>
1000ff3a:	2002      	movs	r0, #2
1000ff3c:	4240      	negs	r0, r0
1000ff3e:	e7f1      	b.n	1000ff24 <__gesf2+0x48>
1000ff40:	2c00      	cmp	r4, #0
1000ff42:	d0da      	beq.n	1000fefa <__gesf2+0x1e>
1000ff44:	e7f9      	b.n	1000ff3a <__gesf2+0x5e>
1000ff46:	4282      	cmp	r2, r0
1000ff48:	dce9      	bgt.n	1000ff1e <__gesf2+0x42>
1000ff4a:	db04      	blt.n	1000ff56 <__gesf2+0x7a>
1000ff4c:	42a5      	cmp	r5, r4
1000ff4e:	d8e6      	bhi.n	1000ff1e <__gesf2+0x42>
1000ff50:	2000      	movs	r0, #0
1000ff52:	42a5      	cmp	r5, r4
1000ff54:	d2e6      	bcs.n	1000ff24 <__gesf2+0x48>
1000ff56:	4258      	negs	r0, r3
1000ff58:	4143      	adcs	r3, r0
1000ff5a:	2001      	movs	r0, #1
1000ff5c:	425b      	negs	r3, r3
1000ff5e:	4318      	orrs	r0, r3
1000ff60:	e7e0      	b.n	1000ff24 <__gesf2+0x48>
1000ff62:	46c0      	nop			; (mov r8, r8)

1000ff64 <__lesf2>:
1000ff64:	0243      	lsls	r3, r0, #9
1000ff66:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff68:	0042      	lsls	r2, r0, #1
1000ff6a:	004c      	lsls	r4, r1, #1
1000ff6c:	0a5e      	lsrs	r6, r3, #9
1000ff6e:	0fc3      	lsrs	r3, r0, #31
1000ff70:	0248      	lsls	r0, r1, #9
1000ff72:	0e12      	lsrs	r2, r2, #24
1000ff74:	0a45      	lsrs	r5, r0, #9
1000ff76:	0e24      	lsrs	r4, r4, #24
1000ff78:	0fc9      	lsrs	r1, r1, #31
1000ff7a:	2aff      	cmp	r2, #255	; 0xff
1000ff7c:	d017      	beq.n	1000ffae <__lesf2+0x4a>
1000ff7e:	2cff      	cmp	r4, #255	; 0xff
1000ff80:	d019      	beq.n	1000ffb6 <__lesf2+0x52>
1000ff82:	2a00      	cmp	r2, #0
1000ff84:	d10b      	bne.n	1000ff9e <__lesf2+0x3a>
1000ff86:	4270      	negs	r0, r6
1000ff88:	4170      	adcs	r0, r6
1000ff8a:	2c00      	cmp	r4, #0
1000ff8c:	d017      	beq.n	1000ffbe <__lesf2+0x5a>
1000ff8e:	2800      	cmp	r0, #0
1000ff90:	d007      	beq.n	1000ffa2 <__lesf2+0x3e>
1000ff92:	4248      	negs	r0, r1
1000ff94:	4141      	adcs	r1, r0
1000ff96:	2001      	movs	r0, #1
1000ff98:	4249      	negs	r1, r1
1000ff9a:	4308      	orrs	r0, r1
1000ff9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff9e:	2c00      	cmp	r4, #0
1000ffa0:	d013      	beq.n	1000ffca <__lesf2+0x66>
1000ffa2:	428b      	cmp	r3, r1
1000ffa4:	d014      	beq.n	1000ffd0 <__lesf2+0x6c>
1000ffa6:	4258      	negs	r0, r3
1000ffa8:	2301      	movs	r3, #1
1000ffaa:	4318      	orrs	r0, r3
1000ffac:	e7f6      	b.n	1000ff9c <__lesf2+0x38>
1000ffae:	2002      	movs	r0, #2
1000ffb0:	2e00      	cmp	r6, #0
1000ffb2:	d1f3      	bne.n	1000ff9c <__lesf2+0x38>
1000ffb4:	e7e3      	b.n	1000ff7e <__lesf2+0x1a>
1000ffb6:	2002      	movs	r0, #2
1000ffb8:	2d00      	cmp	r5, #0
1000ffba:	d1ef      	bne.n	1000ff9c <__lesf2+0x38>
1000ffbc:	e7e1      	b.n	1000ff82 <__lesf2+0x1e>
1000ffbe:	2d00      	cmp	r5, #0
1000ffc0:	d1e5      	bne.n	1000ff8e <__lesf2+0x2a>
1000ffc2:	2000      	movs	r0, #0
1000ffc4:	2e00      	cmp	r6, #0
1000ffc6:	d0e9      	beq.n	1000ff9c <__lesf2+0x38>
1000ffc8:	e7ed      	b.n	1000ffa6 <__lesf2+0x42>
1000ffca:	2d00      	cmp	r5, #0
1000ffcc:	d1e9      	bne.n	1000ffa2 <__lesf2+0x3e>
1000ffce:	e7ea      	b.n	1000ffa6 <__lesf2+0x42>
1000ffd0:	42a2      	cmp	r2, r4
1000ffd2:	dce8      	bgt.n	1000ffa6 <__lesf2+0x42>
1000ffd4:	db04      	blt.n	1000ffe0 <__lesf2+0x7c>
1000ffd6:	42ae      	cmp	r6, r5
1000ffd8:	d8e5      	bhi.n	1000ffa6 <__lesf2+0x42>
1000ffda:	2000      	movs	r0, #0
1000ffdc:	42ae      	cmp	r6, r5
1000ffde:	d2dd      	bcs.n	1000ff9c <__lesf2+0x38>
1000ffe0:	4258      	negs	r0, r3
1000ffe2:	4143      	adcs	r3, r0
1000ffe4:	2001      	movs	r0, #1
1000ffe6:	425b      	negs	r3, r3
1000ffe8:	4318      	orrs	r0, r3
1000ffea:	e7d7      	b.n	1000ff9c <__lesf2+0x38>

1000ffec <__aeabi_fmul>:
1000ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffee:	4657      	mov	r7, sl
1000fff0:	464e      	mov	r6, r9
1000fff2:	4645      	mov	r5, r8
1000fff4:	0043      	lsls	r3, r0, #1
1000fff6:	b4e0      	push	{r5, r6, r7}
1000fff8:	0246      	lsls	r6, r0, #9
1000fffa:	4688      	mov	r8, r1
1000fffc:	0a76      	lsrs	r6, r6, #9
1000fffe:	0e1f      	lsrs	r7, r3, #24
10010000:	0fc4      	lsrs	r4, r0, #31
10010002:	2f00      	cmp	r7, #0
10010004:	d047      	beq.n	10010096 <__aeabi_fmul+0xaa>
10010006:	2fff      	cmp	r7, #255	; 0xff
10010008:	d025      	beq.n	10010056 <__aeabi_fmul+0x6a>
1001000a:	2300      	movs	r3, #0
1001000c:	2580      	movs	r5, #128	; 0x80
1001000e:	469a      	mov	sl, r3
10010010:	4699      	mov	r9, r3
10010012:	00f6      	lsls	r6, r6, #3
10010014:	04ed      	lsls	r5, r5, #19
10010016:	432e      	orrs	r6, r5
10010018:	3f7f      	subs	r7, #127	; 0x7f
1001001a:	4643      	mov	r3, r8
1001001c:	4642      	mov	r2, r8
1001001e:	025d      	lsls	r5, r3, #9
10010020:	0fd2      	lsrs	r2, r2, #31
10010022:	005b      	lsls	r3, r3, #1
10010024:	0a6d      	lsrs	r5, r5, #9
10010026:	0e1b      	lsrs	r3, r3, #24
10010028:	4690      	mov	r8, r2
1001002a:	d040      	beq.n	100100ae <__aeabi_fmul+0xc2>
1001002c:	2bff      	cmp	r3, #255	; 0xff
1001002e:	d039      	beq.n	100100a4 <__aeabi_fmul+0xb8>
10010030:	2280      	movs	r2, #128	; 0x80
10010032:	2000      	movs	r0, #0
10010034:	00ed      	lsls	r5, r5, #3
10010036:	04d2      	lsls	r2, r2, #19
10010038:	4315      	orrs	r5, r2
1001003a:	3b7f      	subs	r3, #127	; 0x7f
1001003c:	18fb      	adds	r3, r7, r3
1001003e:	4642      	mov	r2, r8
10010040:	4657      	mov	r7, sl
10010042:	1c59      	adds	r1, r3, #1
10010044:	4062      	eors	r2, r4
10010046:	468c      	mov	ip, r1
10010048:	4307      	orrs	r7, r0
1001004a:	2f0f      	cmp	r7, #15
1001004c:	d85c      	bhi.n	10010108 <__aeabi_fmul+0x11c>
1001004e:	496f      	ldr	r1, [pc, #444]	; (1001020c <__aeabi_fmul+0x220>)
10010050:	00bf      	lsls	r7, r7, #2
10010052:	59c9      	ldr	r1, [r1, r7]
10010054:	468f      	mov	pc, r1
10010056:	2e00      	cmp	r6, #0
10010058:	d145      	bne.n	100100e6 <__aeabi_fmul+0xfa>
1001005a:	2308      	movs	r3, #8
1001005c:	469a      	mov	sl, r3
1001005e:	3b06      	subs	r3, #6
10010060:	4699      	mov	r9, r3
10010062:	e7da      	b.n	1001001a <__aeabi_fmul+0x2e>
10010064:	4642      	mov	r2, r8
10010066:	2802      	cmp	r0, #2
10010068:	d02d      	beq.n	100100c6 <__aeabi_fmul+0xda>
1001006a:	2803      	cmp	r0, #3
1001006c:	d100      	bne.n	10010070 <__aeabi_fmul+0x84>
1001006e:	e0c3      	b.n	100101f8 <__aeabi_fmul+0x20c>
10010070:	2801      	cmp	r0, #1
10010072:	d000      	beq.n	10010076 <__aeabi_fmul+0x8a>
10010074:	e0a2      	b.n	100101bc <__aeabi_fmul+0x1d0>
10010076:	2500      	movs	r5, #0
10010078:	2600      	movs	r6, #0
1001007a:	4002      	ands	r2, r0
1001007c:	b2d4      	uxtb	r4, r2
1001007e:	0276      	lsls	r6, r6, #9
10010080:	05ed      	lsls	r5, r5, #23
10010082:	0a76      	lsrs	r6, r6, #9
10010084:	432e      	orrs	r6, r5
10010086:	07e4      	lsls	r4, r4, #31
10010088:	4326      	orrs	r6, r4
1001008a:	0030      	movs	r0, r6
1001008c:	bc1c      	pop	{r2, r3, r4}
1001008e:	4690      	mov	r8, r2
10010090:	4699      	mov	r9, r3
10010092:	46a2      	mov	sl, r4
10010094:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010096:	2e00      	cmp	r6, #0
10010098:	d11a      	bne.n	100100d0 <__aeabi_fmul+0xe4>
1001009a:	2304      	movs	r3, #4
1001009c:	469a      	mov	sl, r3
1001009e:	3b03      	subs	r3, #3
100100a0:	4699      	mov	r9, r3
100100a2:	e7ba      	b.n	1001001a <__aeabi_fmul+0x2e>
100100a4:	002a      	movs	r2, r5
100100a6:	1e51      	subs	r1, r2, #1
100100a8:	418a      	sbcs	r2, r1
100100aa:	1c90      	adds	r0, r2, #2
100100ac:	e7c6      	b.n	1001003c <__aeabi_fmul+0x50>
100100ae:	2001      	movs	r0, #1
100100b0:	2d00      	cmp	r5, #0
100100b2:	d0c3      	beq.n	1001003c <__aeabi_fmul+0x50>
100100b4:	0028      	movs	r0, r5
100100b6:	f001 fa25 	bl	10011504 <__clzsi2>
100100ba:	1f43      	subs	r3, r0, #5
100100bc:	3076      	adds	r0, #118	; 0x76
100100be:	409d      	lsls	r5, r3
100100c0:	4243      	negs	r3, r0
100100c2:	2000      	movs	r0, #0
100100c4:	e7ba      	b.n	1001003c <__aeabi_fmul+0x50>
100100c6:	2401      	movs	r4, #1
100100c8:	25ff      	movs	r5, #255	; 0xff
100100ca:	4014      	ands	r4, r2
100100cc:	2600      	movs	r6, #0
100100ce:	e7d6      	b.n	1001007e <__aeabi_fmul+0x92>
100100d0:	0030      	movs	r0, r6
100100d2:	f001 fa17 	bl	10011504 <__clzsi2>
100100d6:	1f43      	subs	r3, r0, #5
100100d8:	409e      	lsls	r6, r3
100100da:	2300      	movs	r3, #0
100100dc:	3076      	adds	r0, #118	; 0x76
100100de:	4247      	negs	r7, r0
100100e0:	469a      	mov	sl, r3
100100e2:	4699      	mov	r9, r3
100100e4:	e799      	b.n	1001001a <__aeabi_fmul+0x2e>
100100e6:	230c      	movs	r3, #12
100100e8:	469a      	mov	sl, r3
100100ea:	3b09      	subs	r3, #9
100100ec:	4699      	mov	r9, r3
100100ee:	e794      	b.n	1001001a <__aeabi_fmul+0x2e>
100100f0:	2680      	movs	r6, #128	; 0x80
100100f2:	2400      	movs	r4, #0
100100f4:	03f6      	lsls	r6, r6, #15
100100f6:	25ff      	movs	r5, #255	; 0xff
100100f8:	e7c1      	b.n	1001007e <__aeabi_fmul+0x92>
100100fa:	0035      	movs	r5, r6
100100fc:	4648      	mov	r0, r9
100100fe:	e7b2      	b.n	10010066 <__aeabi_fmul+0x7a>
10010100:	0035      	movs	r5, r6
10010102:	0022      	movs	r2, r4
10010104:	4648      	mov	r0, r9
10010106:	e7ae      	b.n	10010066 <__aeabi_fmul+0x7a>
10010108:	0429      	lsls	r1, r5, #16
1001010a:	0c09      	lsrs	r1, r1, #16
1001010c:	0008      	movs	r0, r1
1001010e:	0c37      	lsrs	r7, r6, #16
10010110:	0436      	lsls	r6, r6, #16
10010112:	0c36      	lsrs	r6, r6, #16
10010114:	0c2c      	lsrs	r4, r5, #16
10010116:	4379      	muls	r1, r7
10010118:	4370      	muls	r0, r6
1001011a:	4367      	muls	r7, r4
1001011c:	4374      	muls	r4, r6
1001011e:	0c06      	lsrs	r6, r0, #16
10010120:	1864      	adds	r4, r4, r1
10010122:	1936      	adds	r6, r6, r4
10010124:	42b1      	cmp	r1, r6
10010126:	d903      	bls.n	10010130 <__aeabi_fmul+0x144>
10010128:	2180      	movs	r1, #128	; 0x80
1001012a:	0249      	lsls	r1, r1, #9
1001012c:	4688      	mov	r8, r1
1001012e:	4447      	add	r7, r8
10010130:	0400      	lsls	r0, r0, #16
10010132:	0c00      	lsrs	r0, r0, #16
10010134:	0431      	lsls	r1, r6, #16
10010136:	1809      	adds	r1, r1, r0
10010138:	018d      	lsls	r5, r1, #6
1001013a:	1e68      	subs	r0, r5, #1
1001013c:	4185      	sbcs	r5, r0
1001013e:	0e89      	lsrs	r1, r1, #26
10010140:	4329      	orrs	r1, r5
10010142:	0c35      	lsrs	r5, r6, #16
10010144:	19ed      	adds	r5, r5, r7
10010146:	01ad      	lsls	r5, r5, #6
10010148:	430d      	orrs	r5, r1
1001014a:	0129      	lsls	r1, r5, #4
1001014c:	d504      	bpl.n	10010158 <__aeabi_fmul+0x16c>
1001014e:	2301      	movs	r3, #1
10010150:	0869      	lsrs	r1, r5, #1
10010152:	401d      	ands	r5, r3
10010154:	4663      	mov	r3, ip
10010156:	430d      	orrs	r5, r1
10010158:	0019      	movs	r1, r3
1001015a:	317f      	adds	r1, #127	; 0x7f
1001015c:	2900      	cmp	r1, #0
1001015e:	dd25      	ble.n	100101ac <__aeabi_fmul+0x1c0>
10010160:	0768      	lsls	r0, r5, #29
10010162:	d004      	beq.n	1001016e <__aeabi_fmul+0x182>
10010164:	200f      	movs	r0, #15
10010166:	4028      	ands	r0, r5
10010168:	2804      	cmp	r0, #4
1001016a:	d000      	beq.n	1001016e <__aeabi_fmul+0x182>
1001016c:	3504      	adds	r5, #4
1001016e:	0128      	lsls	r0, r5, #4
10010170:	d503      	bpl.n	1001017a <__aeabi_fmul+0x18e>
10010172:	4927      	ldr	r1, [pc, #156]	; (10010210 <__aeabi_fmul+0x224>)
10010174:	3380      	adds	r3, #128	; 0x80
10010176:	400d      	ands	r5, r1
10010178:	0019      	movs	r1, r3
1001017a:	29fe      	cmp	r1, #254	; 0xfe
1001017c:	dca3      	bgt.n	100100c6 <__aeabi_fmul+0xda>
1001017e:	2401      	movs	r4, #1
10010180:	01ad      	lsls	r5, r5, #6
10010182:	0a6e      	lsrs	r6, r5, #9
10010184:	4014      	ands	r4, r2
10010186:	b2cd      	uxtb	r5, r1
10010188:	e779      	b.n	1001007e <__aeabi_fmul+0x92>
1001018a:	2080      	movs	r0, #128	; 0x80
1001018c:	03c0      	lsls	r0, r0, #15
1001018e:	4206      	tst	r6, r0
10010190:	d007      	beq.n	100101a2 <__aeabi_fmul+0x1b6>
10010192:	4205      	tst	r5, r0
10010194:	d105      	bne.n	100101a2 <__aeabi_fmul+0x1b6>
10010196:	4328      	orrs	r0, r5
10010198:	0246      	lsls	r6, r0, #9
1001019a:	0a76      	lsrs	r6, r6, #9
1001019c:	4644      	mov	r4, r8
1001019e:	25ff      	movs	r5, #255	; 0xff
100101a0:	e76d      	b.n	1001007e <__aeabi_fmul+0x92>
100101a2:	4306      	orrs	r6, r0
100101a4:	0276      	lsls	r6, r6, #9
100101a6:	0a76      	lsrs	r6, r6, #9
100101a8:	25ff      	movs	r5, #255	; 0xff
100101aa:	e768      	b.n	1001007e <__aeabi_fmul+0x92>
100101ac:	2401      	movs	r4, #1
100101ae:	1a61      	subs	r1, r4, r1
100101b0:	291b      	cmp	r1, #27
100101b2:	dd05      	ble.n	100101c0 <__aeabi_fmul+0x1d4>
100101b4:	4014      	ands	r4, r2
100101b6:	2500      	movs	r5, #0
100101b8:	2600      	movs	r6, #0
100101ba:	e760      	b.n	1001007e <__aeabi_fmul+0x92>
100101bc:	4663      	mov	r3, ip
100101be:	e7cb      	b.n	10010158 <__aeabi_fmul+0x16c>
100101c0:	002e      	movs	r6, r5
100101c2:	2320      	movs	r3, #32
100101c4:	40ce      	lsrs	r6, r1
100101c6:	1a59      	subs	r1, r3, r1
100101c8:	408d      	lsls	r5, r1
100101ca:	1e6b      	subs	r3, r5, #1
100101cc:	419d      	sbcs	r5, r3
100101ce:	432e      	orrs	r6, r5
100101d0:	0773      	lsls	r3, r6, #29
100101d2:	d004      	beq.n	100101de <__aeabi_fmul+0x1f2>
100101d4:	230f      	movs	r3, #15
100101d6:	4033      	ands	r3, r6
100101d8:	2b04      	cmp	r3, #4
100101da:	d000      	beq.n	100101de <__aeabi_fmul+0x1f2>
100101dc:	3604      	adds	r6, #4
100101de:	0173      	lsls	r3, r6, #5
100101e0:	d504      	bpl.n	100101ec <__aeabi_fmul+0x200>
100101e2:	2401      	movs	r4, #1
100101e4:	2501      	movs	r5, #1
100101e6:	4014      	ands	r4, r2
100101e8:	2600      	movs	r6, #0
100101ea:	e748      	b.n	1001007e <__aeabi_fmul+0x92>
100101ec:	2401      	movs	r4, #1
100101ee:	01b6      	lsls	r6, r6, #6
100101f0:	0a76      	lsrs	r6, r6, #9
100101f2:	4014      	ands	r4, r2
100101f4:	2500      	movs	r5, #0
100101f6:	e742      	b.n	1001007e <__aeabi_fmul+0x92>
100101f8:	2680      	movs	r6, #128	; 0x80
100101fa:	2401      	movs	r4, #1
100101fc:	03f6      	lsls	r6, r6, #15
100101fe:	432e      	orrs	r6, r5
10010200:	0276      	lsls	r6, r6, #9
10010202:	0a76      	lsrs	r6, r6, #9
10010204:	4014      	ands	r4, r2
10010206:	25ff      	movs	r5, #255	; 0xff
10010208:	e739      	b.n	1001007e <__aeabi_fmul+0x92>
1001020a:	46c0      	nop			; (mov r8, r8)
1001020c:	10013708 	.word	0x10013708
10010210:	f7ffffff 	.word	0xf7ffffff

10010214 <__aeabi_fsub>:
10010214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010216:	024a      	lsls	r2, r1, #9
10010218:	004e      	lsls	r6, r1, #1
1001021a:	0243      	lsls	r3, r0, #9
1001021c:	0044      	lsls	r4, r0, #1
1001021e:	0e24      	lsrs	r4, r4, #24
10010220:	0fc5      	lsrs	r5, r0, #31
10010222:	099b      	lsrs	r3, r3, #6
10010224:	0e36      	lsrs	r6, r6, #24
10010226:	0fc9      	lsrs	r1, r1, #31
10010228:	0992      	lsrs	r2, r2, #6
1001022a:	2eff      	cmp	r6, #255	; 0xff
1001022c:	d100      	bne.n	10010230 <__aeabi_fsub+0x1c>
1001022e:	e083      	b.n	10010338 <__aeabi_fsub+0x124>
10010230:	2001      	movs	r0, #1
10010232:	4041      	eors	r1, r0
10010234:	1ba0      	subs	r0, r4, r6
10010236:	42a9      	cmp	r1, r5
10010238:	d05c      	beq.n	100102f4 <__aeabi_fsub+0xe0>
1001023a:	2800      	cmp	r0, #0
1001023c:	dc00      	bgt.n	10010240 <__aeabi_fsub+0x2c>
1001023e:	e095      	b.n	1001036c <__aeabi_fsub+0x158>
10010240:	2e00      	cmp	r6, #0
10010242:	d11c      	bne.n	1001027e <__aeabi_fsub+0x6a>
10010244:	2a00      	cmp	r2, #0
10010246:	d000      	beq.n	1001024a <__aeabi_fsub+0x36>
10010248:	e081      	b.n	1001034e <__aeabi_fsub+0x13a>
1001024a:	075a      	lsls	r2, r3, #29
1001024c:	d004      	beq.n	10010258 <__aeabi_fsub+0x44>
1001024e:	220f      	movs	r2, #15
10010250:	401a      	ands	r2, r3
10010252:	2a04      	cmp	r2, #4
10010254:	d000      	beq.n	10010258 <__aeabi_fsub+0x44>
10010256:	3304      	adds	r3, #4
10010258:	015a      	lsls	r2, r3, #5
1001025a:	d53b      	bpl.n	100102d4 <__aeabi_fsub+0xc0>
1001025c:	3401      	adds	r4, #1
1001025e:	2cff      	cmp	r4, #255	; 0xff
10010260:	d100      	bne.n	10010264 <__aeabi_fsub+0x50>
10010262:	e091      	b.n	10010388 <__aeabi_fsub+0x174>
10010264:	2001      	movs	r0, #1
10010266:	019b      	lsls	r3, r3, #6
10010268:	0a5b      	lsrs	r3, r3, #9
1001026a:	b2e4      	uxtb	r4, r4
1001026c:	4005      	ands	r5, r0
1001026e:	025b      	lsls	r3, r3, #9
10010270:	05e4      	lsls	r4, r4, #23
10010272:	0a5b      	lsrs	r3, r3, #9
10010274:	07ed      	lsls	r5, r5, #31
10010276:	4323      	orrs	r3, r4
10010278:	432b      	orrs	r3, r5
1001027a:	0018      	movs	r0, r3
1001027c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001027e:	2cff      	cmp	r4, #255	; 0xff
10010280:	d0e3      	beq.n	1001024a <__aeabi_fsub+0x36>
10010282:	2180      	movs	r1, #128	; 0x80
10010284:	04c9      	lsls	r1, r1, #19
10010286:	430a      	orrs	r2, r1
10010288:	281b      	cmp	r0, #27
1001028a:	dd00      	ble.n	1001028e <__aeabi_fsub+0x7a>
1001028c:	e090      	b.n	100103b0 <__aeabi_fsub+0x19c>
1001028e:	0016      	movs	r6, r2
10010290:	2120      	movs	r1, #32
10010292:	40c6      	lsrs	r6, r0
10010294:	1a08      	subs	r0, r1, r0
10010296:	4082      	lsls	r2, r0
10010298:	1e51      	subs	r1, r2, #1
1001029a:	418a      	sbcs	r2, r1
1001029c:	4332      	orrs	r2, r6
1001029e:	1a9b      	subs	r3, r3, r2
100102a0:	015a      	lsls	r2, r3, #5
100102a2:	d515      	bpl.n	100102d0 <__aeabi_fsub+0xbc>
100102a4:	019b      	lsls	r3, r3, #6
100102a6:	099e      	lsrs	r6, r3, #6
100102a8:	0030      	movs	r0, r6
100102aa:	f001 f92b 	bl	10011504 <__clzsi2>
100102ae:	3805      	subs	r0, #5
100102b0:	4086      	lsls	r6, r0
100102b2:	4284      	cmp	r4, r0
100102b4:	dc6c      	bgt.n	10010390 <__aeabi_fsub+0x17c>
100102b6:	1b04      	subs	r4, r0, r4
100102b8:	0033      	movs	r3, r6
100102ba:	2020      	movs	r0, #32
100102bc:	3401      	adds	r4, #1
100102be:	40e3      	lsrs	r3, r4
100102c0:	1b04      	subs	r4, r0, r4
100102c2:	40a6      	lsls	r6, r4
100102c4:	1e72      	subs	r2, r6, #1
100102c6:	4196      	sbcs	r6, r2
100102c8:	2400      	movs	r4, #0
100102ca:	4333      	orrs	r3, r6
100102cc:	e7bd      	b.n	1001024a <__aeabi_fsub+0x36>
100102ce:	000d      	movs	r5, r1
100102d0:	075a      	lsls	r2, r3, #29
100102d2:	d1bc      	bne.n	1001024e <__aeabi_fsub+0x3a>
100102d4:	08df      	lsrs	r7, r3, #3
100102d6:	2301      	movs	r3, #1
100102d8:	401d      	ands	r5, r3
100102da:	2cff      	cmp	r4, #255	; 0xff
100102dc:	d133      	bne.n	10010346 <__aeabi_fsub+0x132>
100102de:	2f00      	cmp	r7, #0
100102e0:	d100      	bne.n	100102e4 <__aeabi_fsub+0xd0>
100102e2:	e090      	b.n	10010406 <__aeabi_fsub+0x1f2>
100102e4:	2280      	movs	r2, #128	; 0x80
100102e6:	03d2      	lsls	r2, r2, #15
100102e8:	0013      	movs	r3, r2
100102ea:	433b      	orrs	r3, r7
100102ec:	025b      	lsls	r3, r3, #9
100102ee:	0a5b      	lsrs	r3, r3, #9
100102f0:	24ff      	movs	r4, #255	; 0xff
100102f2:	e7bc      	b.n	1001026e <__aeabi_fsub+0x5a>
100102f4:	2800      	cmp	r0, #0
100102f6:	dd4f      	ble.n	10010398 <__aeabi_fsub+0x184>
100102f8:	2e00      	cmp	r6, #0
100102fa:	d02e      	beq.n	1001035a <__aeabi_fsub+0x146>
100102fc:	2cff      	cmp	r4, #255	; 0xff
100102fe:	d0a4      	beq.n	1001024a <__aeabi_fsub+0x36>
10010300:	2580      	movs	r5, #128	; 0x80
10010302:	04ed      	lsls	r5, r5, #19
10010304:	432a      	orrs	r2, r5
10010306:	281b      	cmp	r0, #27
10010308:	dd00      	ble.n	1001030c <__aeabi_fsub+0xf8>
1001030a:	e097      	b.n	1001043c <__aeabi_fsub+0x228>
1001030c:	0016      	movs	r6, r2
1001030e:	2520      	movs	r5, #32
10010310:	40c6      	lsrs	r6, r0
10010312:	1a28      	subs	r0, r5, r0
10010314:	4082      	lsls	r2, r0
10010316:	1e50      	subs	r0, r2, #1
10010318:	4182      	sbcs	r2, r0
1001031a:	4332      	orrs	r2, r6
1001031c:	189b      	adds	r3, r3, r2
1001031e:	015a      	lsls	r2, r3, #5
10010320:	d5d5      	bpl.n	100102ce <__aeabi_fsub+0xba>
10010322:	3401      	adds	r4, #1
10010324:	2cff      	cmp	r4, #255	; 0xff
10010326:	d06d      	beq.n	10010404 <__aeabi_fsub+0x1f0>
10010328:	2201      	movs	r2, #1
1001032a:	487b      	ldr	r0, [pc, #492]	; (10010518 <__aeabi_fsub+0x304>)
1001032c:	401a      	ands	r2, r3
1001032e:	085b      	lsrs	r3, r3, #1
10010330:	4003      	ands	r3, r0
10010332:	4313      	orrs	r3, r2
10010334:	000d      	movs	r5, r1
10010336:	e788      	b.n	1001024a <__aeabi_fsub+0x36>
10010338:	2a00      	cmp	r2, #0
1001033a:	d000      	beq.n	1001033e <__aeabi_fsub+0x12a>
1001033c:	e77a      	b.n	10010234 <__aeabi_fsub+0x20>
1001033e:	e777      	b.n	10010230 <__aeabi_fsub+0x1c>
10010340:	1e03      	subs	r3, r0, #0
10010342:	d1c5      	bne.n	100102d0 <__aeabi_fsub+0xbc>
10010344:	2500      	movs	r5, #0
10010346:	027b      	lsls	r3, r7, #9
10010348:	0a5b      	lsrs	r3, r3, #9
1001034a:	b2e4      	uxtb	r4, r4
1001034c:	e78f      	b.n	1001026e <__aeabi_fsub+0x5a>
1001034e:	3801      	subs	r0, #1
10010350:	2800      	cmp	r0, #0
10010352:	d0a4      	beq.n	1001029e <__aeabi_fsub+0x8a>
10010354:	2cff      	cmp	r4, #255	; 0xff
10010356:	d197      	bne.n	10010288 <__aeabi_fsub+0x74>
10010358:	e777      	b.n	1001024a <__aeabi_fsub+0x36>
1001035a:	2a00      	cmp	r2, #0
1001035c:	d100      	bne.n	10010360 <__aeabi_fsub+0x14c>
1001035e:	e774      	b.n	1001024a <__aeabi_fsub+0x36>
10010360:	3801      	subs	r0, #1
10010362:	2800      	cmp	r0, #0
10010364:	d0da      	beq.n	1001031c <__aeabi_fsub+0x108>
10010366:	2cff      	cmp	r4, #255	; 0xff
10010368:	d1cd      	bne.n	10010306 <__aeabi_fsub+0xf2>
1001036a:	e76e      	b.n	1001024a <__aeabi_fsub+0x36>
1001036c:	2800      	cmp	r0, #0
1001036e:	d121      	bne.n	100103b4 <__aeabi_fsub+0x1a0>
10010370:	1c60      	adds	r0, r4, #1
10010372:	b2c0      	uxtb	r0, r0
10010374:	2801      	cmp	r0, #1
10010376:	dd58      	ble.n	1001042a <__aeabi_fsub+0x216>
10010378:	2780      	movs	r7, #128	; 0x80
1001037a:	1a9e      	subs	r6, r3, r2
1001037c:	04ff      	lsls	r7, r7, #19
1001037e:	4037      	ands	r7, r6
10010380:	d02f      	beq.n	100103e2 <__aeabi_fsub+0x1ce>
10010382:	1ad6      	subs	r6, r2, r3
10010384:	000d      	movs	r5, r1
10010386:	e78f      	b.n	100102a8 <__aeabi_fsub+0x94>
10010388:	2301      	movs	r3, #1
1001038a:	401d      	ands	r5, r3
1001038c:	2300      	movs	r3, #0
1001038e:	e76e      	b.n	1001026e <__aeabi_fsub+0x5a>
10010390:	4b62      	ldr	r3, [pc, #392]	; (1001051c <__aeabi_fsub+0x308>)
10010392:	1a24      	subs	r4, r4, r0
10010394:	4033      	ands	r3, r6
10010396:	e758      	b.n	1001024a <__aeabi_fsub+0x36>
10010398:	2800      	cmp	r0, #0
1001039a:	d151      	bne.n	10010440 <__aeabi_fsub+0x22c>
1001039c:	1c60      	adds	r0, r4, #1
1001039e:	b2c6      	uxtb	r6, r0
100103a0:	2e01      	cmp	r6, #1
100103a2:	dd33      	ble.n	1001040c <__aeabi_fsub+0x1f8>
100103a4:	28ff      	cmp	r0, #255	; 0xff
100103a6:	d02d      	beq.n	10010404 <__aeabi_fsub+0x1f0>
100103a8:	189b      	adds	r3, r3, r2
100103aa:	085b      	lsrs	r3, r3, #1
100103ac:	0004      	movs	r4, r0
100103ae:	e74c      	b.n	1001024a <__aeabi_fsub+0x36>
100103b0:	2201      	movs	r2, #1
100103b2:	e774      	b.n	1001029e <__aeabi_fsub+0x8a>
100103b4:	2c00      	cmp	r4, #0
100103b6:	d01a      	beq.n	100103ee <__aeabi_fsub+0x1da>
100103b8:	2eff      	cmp	r6, #255	; 0xff
100103ba:	d01f      	beq.n	100103fc <__aeabi_fsub+0x1e8>
100103bc:	2480      	movs	r4, #128	; 0x80
100103be:	04e4      	lsls	r4, r4, #19
100103c0:	4240      	negs	r0, r0
100103c2:	4323      	orrs	r3, r4
100103c4:	281b      	cmp	r0, #27
100103c6:	dd00      	ble.n	100103ca <__aeabi_fsub+0x1b6>
100103c8:	e096      	b.n	100104f8 <__aeabi_fsub+0x2e4>
100103ca:	001d      	movs	r5, r3
100103cc:	2420      	movs	r4, #32
100103ce:	40c5      	lsrs	r5, r0
100103d0:	1a20      	subs	r0, r4, r0
100103d2:	4083      	lsls	r3, r0
100103d4:	1e58      	subs	r0, r3, #1
100103d6:	4183      	sbcs	r3, r0
100103d8:	432b      	orrs	r3, r5
100103da:	1ad3      	subs	r3, r2, r3
100103dc:	0034      	movs	r4, r6
100103de:	000d      	movs	r5, r1
100103e0:	e75e      	b.n	100102a0 <__aeabi_fsub+0x8c>
100103e2:	2e00      	cmp	r6, #0
100103e4:	d000      	beq.n	100103e8 <__aeabi_fsub+0x1d4>
100103e6:	e75f      	b.n	100102a8 <__aeabi_fsub+0x94>
100103e8:	2500      	movs	r5, #0
100103ea:	2400      	movs	r4, #0
100103ec:	e7ab      	b.n	10010346 <__aeabi_fsub+0x132>
100103ee:	2b00      	cmp	r3, #0
100103f0:	d044      	beq.n	1001047c <__aeabi_fsub+0x268>
100103f2:	43c0      	mvns	r0, r0
100103f4:	2800      	cmp	r0, #0
100103f6:	d0f0      	beq.n	100103da <__aeabi_fsub+0x1c6>
100103f8:	2eff      	cmp	r6, #255	; 0xff
100103fa:	d1e3      	bne.n	100103c4 <__aeabi_fsub+0x1b0>
100103fc:	0013      	movs	r3, r2
100103fe:	24ff      	movs	r4, #255	; 0xff
10010400:	000d      	movs	r5, r1
10010402:	e722      	b.n	1001024a <__aeabi_fsub+0x36>
10010404:	000d      	movs	r5, r1
10010406:	24ff      	movs	r4, #255	; 0xff
10010408:	2300      	movs	r3, #0
1001040a:	e730      	b.n	1001026e <__aeabi_fsub+0x5a>
1001040c:	2c00      	cmp	r4, #0
1001040e:	d15d      	bne.n	100104cc <__aeabi_fsub+0x2b8>
10010410:	2b00      	cmp	r3, #0
10010412:	d07d      	beq.n	10010510 <__aeabi_fsub+0x2fc>
10010414:	2a00      	cmp	r2, #0
10010416:	d100      	bne.n	1001041a <__aeabi_fsub+0x206>
10010418:	e717      	b.n	1001024a <__aeabi_fsub+0x36>
1001041a:	189b      	adds	r3, r3, r2
1001041c:	015a      	lsls	r2, r3, #5
1001041e:	d400      	bmi.n	10010422 <__aeabi_fsub+0x20e>
10010420:	e756      	b.n	100102d0 <__aeabi_fsub+0xbc>
10010422:	4a3e      	ldr	r2, [pc, #248]	; (1001051c <__aeabi_fsub+0x308>)
10010424:	0004      	movs	r4, r0
10010426:	4013      	ands	r3, r2
10010428:	e70f      	b.n	1001024a <__aeabi_fsub+0x36>
1001042a:	2c00      	cmp	r4, #0
1001042c:	d11e      	bne.n	1001046c <__aeabi_fsub+0x258>
1001042e:	2b00      	cmp	r3, #0
10010430:	d12f      	bne.n	10010492 <__aeabi_fsub+0x27e>
10010432:	2a00      	cmp	r2, #0
10010434:	d065      	beq.n	10010502 <__aeabi_fsub+0x2ee>
10010436:	0013      	movs	r3, r2
10010438:	000d      	movs	r5, r1
1001043a:	e706      	b.n	1001024a <__aeabi_fsub+0x36>
1001043c:	2201      	movs	r2, #1
1001043e:	e76d      	b.n	1001031c <__aeabi_fsub+0x108>
10010440:	2c00      	cmp	r4, #0
10010442:	d11f      	bne.n	10010484 <__aeabi_fsub+0x270>
10010444:	2b00      	cmp	r3, #0
10010446:	d059      	beq.n	100104fc <__aeabi_fsub+0x2e8>
10010448:	43c0      	mvns	r0, r0
1001044a:	2800      	cmp	r0, #0
1001044c:	d00b      	beq.n	10010466 <__aeabi_fsub+0x252>
1001044e:	2eff      	cmp	r6, #255	; 0xff
10010450:	d04f      	beq.n	100104f2 <__aeabi_fsub+0x2de>
10010452:	281b      	cmp	r0, #27
10010454:	dc5e      	bgt.n	10010514 <__aeabi_fsub+0x300>
10010456:	001d      	movs	r5, r3
10010458:	2420      	movs	r4, #32
1001045a:	40c5      	lsrs	r5, r0
1001045c:	1a20      	subs	r0, r4, r0
1001045e:	4083      	lsls	r3, r0
10010460:	1e58      	subs	r0, r3, #1
10010462:	4183      	sbcs	r3, r0
10010464:	432b      	orrs	r3, r5
10010466:	189b      	adds	r3, r3, r2
10010468:	0034      	movs	r4, r6
1001046a:	e758      	b.n	1001031e <__aeabi_fsub+0x10a>
1001046c:	2b00      	cmp	r3, #0
1001046e:	d11c      	bne.n	100104aa <__aeabi_fsub+0x296>
10010470:	2a00      	cmp	r2, #0
10010472:	d049      	beq.n	10010508 <__aeabi_fsub+0x2f4>
10010474:	0013      	movs	r3, r2
10010476:	000d      	movs	r5, r1
10010478:	24ff      	movs	r4, #255	; 0xff
1001047a:	e6e6      	b.n	1001024a <__aeabi_fsub+0x36>
1001047c:	0013      	movs	r3, r2
1001047e:	0034      	movs	r4, r6
10010480:	000d      	movs	r5, r1
10010482:	e6e2      	b.n	1001024a <__aeabi_fsub+0x36>
10010484:	2eff      	cmp	r6, #255	; 0xff
10010486:	d034      	beq.n	100104f2 <__aeabi_fsub+0x2de>
10010488:	2480      	movs	r4, #128	; 0x80
1001048a:	04e4      	lsls	r4, r4, #19
1001048c:	4240      	negs	r0, r0
1001048e:	4323      	orrs	r3, r4
10010490:	e7df      	b.n	10010452 <__aeabi_fsub+0x23e>
10010492:	2a00      	cmp	r2, #0
10010494:	d100      	bne.n	10010498 <__aeabi_fsub+0x284>
10010496:	e6d8      	b.n	1001024a <__aeabi_fsub+0x36>
10010498:	2780      	movs	r7, #128	; 0x80
1001049a:	1a98      	subs	r0, r3, r2
1001049c:	04ff      	lsls	r7, r7, #19
1001049e:	4007      	ands	r7, r0
100104a0:	d100      	bne.n	100104a4 <__aeabi_fsub+0x290>
100104a2:	e74d      	b.n	10010340 <__aeabi_fsub+0x12c>
100104a4:	1ad3      	subs	r3, r2, r3
100104a6:	000d      	movs	r5, r1
100104a8:	e6cf      	b.n	1001024a <__aeabi_fsub+0x36>
100104aa:	24ff      	movs	r4, #255	; 0xff
100104ac:	2a00      	cmp	r2, #0
100104ae:	d100      	bne.n	100104b2 <__aeabi_fsub+0x29e>
100104b0:	e6cb      	b.n	1001024a <__aeabi_fsub+0x36>
100104b2:	2080      	movs	r0, #128	; 0x80
100104b4:	08db      	lsrs	r3, r3, #3
100104b6:	03c0      	lsls	r0, r0, #15
100104b8:	4203      	tst	r3, r0
100104ba:	d004      	beq.n	100104c6 <__aeabi_fsub+0x2b2>
100104bc:	08d2      	lsrs	r2, r2, #3
100104be:	4202      	tst	r2, r0
100104c0:	d101      	bne.n	100104c6 <__aeabi_fsub+0x2b2>
100104c2:	0013      	movs	r3, r2
100104c4:	000d      	movs	r5, r1
100104c6:	00db      	lsls	r3, r3, #3
100104c8:	24ff      	movs	r4, #255	; 0xff
100104ca:	e6be      	b.n	1001024a <__aeabi_fsub+0x36>
100104cc:	2b00      	cmp	r3, #0
100104ce:	d010      	beq.n	100104f2 <__aeabi_fsub+0x2de>
100104d0:	24ff      	movs	r4, #255	; 0xff
100104d2:	2a00      	cmp	r2, #0
100104d4:	d100      	bne.n	100104d8 <__aeabi_fsub+0x2c4>
100104d6:	e6b8      	b.n	1001024a <__aeabi_fsub+0x36>
100104d8:	2080      	movs	r0, #128	; 0x80
100104da:	08db      	lsrs	r3, r3, #3
100104dc:	03c0      	lsls	r0, r0, #15
100104de:	4203      	tst	r3, r0
100104e0:	d003      	beq.n	100104ea <__aeabi_fsub+0x2d6>
100104e2:	08d2      	lsrs	r2, r2, #3
100104e4:	4202      	tst	r2, r0
100104e6:	d100      	bne.n	100104ea <__aeabi_fsub+0x2d6>
100104e8:	0013      	movs	r3, r2
100104ea:	00db      	lsls	r3, r3, #3
100104ec:	000d      	movs	r5, r1
100104ee:	24ff      	movs	r4, #255	; 0xff
100104f0:	e6ab      	b.n	1001024a <__aeabi_fsub+0x36>
100104f2:	0013      	movs	r3, r2
100104f4:	24ff      	movs	r4, #255	; 0xff
100104f6:	e6a8      	b.n	1001024a <__aeabi_fsub+0x36>
100104f8:	2301      	movs	r3, #1
100104fa:	e76e      	b.n	100103da <__aeabi_fsub+0x1c6>
100104fc:	0013      	movs	r3, r2
100104fe:	0034      	movs	r4, r6
10010500:	e6a3      	b.n	1001024a <__aeabi_fsub+0x36>
10010502:	2700      	movs	r7, #0
10010504:	2500      	movs	r5, #0
10010506:	e71e      	b.n	10010346 <__aeabi_fsub+0x132>
10010508:	2780      	movs	r7, #128	; 0x80
1001050a:	2500      	movs	r5, #0
1001050c:	03ff      	lsls	r7, r7, #15
1001050e:	e6e9      	b.n	100102e4 <__aeabi_fsub+0xd0>
10010510:	0013      	movs	r3, r2
10010512:	e69a      	b.n	1001024a <__aeabi_fsub+0x36>
10010514:	2301      	movs	r3, #1
10010516:	e7a6      	b.n	10010466 <__aeabi_fsub+0x252>
10010518:	7dffffff 	.word	0x7dffffff
1001051c:	fbffffff 	.word	0xfbffffff

10010520 <__aeabi_f2iz>:
10010520:	0243      	lsls	r3, r0, #9
10010522:	0a59      	lsrs	r1, r3, #9
10010524:	0043      	lsls	r3, r0, #1
10010526:	0fc2      	lsrs	r2, r0, #31
10010528:	0e1b      	lsrs	r3, r3, #24
1001052a:	2000      	movs	r0, #0
1001052c:	2b7e      	cmp	r3, #126	; 0x7e
1001052e:	dd0e      	ble.n	1001054e <__aeabi_f2iz+0x2e>
10010530:	2b9d      	cmp	r3, #157	; 0x9d
10010532:	dc0d      	bgt.n	10010550 <__aeabi_f2iz+0x30>
10010534:	2080      	movs	r0, #128	; 0x80
10010536:	0400      	lsls	r0, r0, #16
10010538:	4301      	orrs	r1, r0
1001053a:	2b95      	cmp	r3, #149	; 0x95
1001053c:	dc0b      	bgt.n	10010556 <__aeabi_f2iz+0x36>
1001053e:	2096      	movs	r0, #150	; 0x96
10010540:	1ac3      	subs	r3, r0, r3
10010542:	40d9      	lsrs	r1, r3
10010544:	000b      	movs	r3, r1
10010546:	4258      	negs	r0, r3
10010548:	2a00      	cmp	r2, #0
1001054a:	d100      	bne.n	1001054e <__aeabi_f2iz+0x2e>
1001054c:	0018      	movs	r0, r3
1001054e:	4770      	bx	lr
10010550:	4b03      	ldr	r3, [pc, #12]	; (10010560 <__aeabi_f2iz+0x40>)
10010552:	18d0      	adds	r0, r2, r3
10010554:	e7fb      	b.n	1001054e <__aeabi_f2iz+0x2e>
10010556:	3b96      	subs	r3, #150	; 0x96
10010558:	4099      	lsls	r1, r3
1001055a:	000b      	movs	r3, r1
1001055c:	e7f3      	b.n	10010546 <__aeabi_f2iz+0x26>
1001055e:	46c0      	nop			; (mov r8, r8)
10010560:	7fffffff 	.word	0x7fffffff

10010564 <__aeabi_i2f>:
10010564:	b570      	push	{r4, r5, r6, lr}
10010566:	2800      	cmp	r0, #0
10010568:	d030      	beq.n	100105cc <__aeabi_i2f+0x68>
1001056a:	17c3      	asrs	r3, r0, #31
1001056c:	18c5      	adds	r5, r0, r3
1001056e:	405d      	eors	r5, r3
10010570:	0fc4      	lsrs	r4, r0, #31
10010572:	0028      	movs	r0, r5
10010574:	f000 ffc6 	bl	10011504 <__clzsi2>
10010578:	239e      	movs	r3, #158	; 0x9e
1001057a:	1a1b      	subs	r3, r3, r0
1001057c:	2b96      	cmp	r3, #150	; 0x96
1001057e:	dc0d      	bgt.n	1001059c <__aeabi_i2f+0x38>
10010580:	2296      	movs	r2, #150	; 0x96
10010582:	1ad2      	subs	r2, r2, r3
10010584:	4095      	lsls	r5, r2
10010586:	026a      	lsls	r2, r5, #9
10010588:	0a52      	lsrs	r2, r2, #9
1001058a:	b2d8      	uxtb	r0, r3
1001058c:	0252      	lsls	r2, r2, #9
1001058e:	05c0      	lsls	r0, r0, #23
10010590:	0a52      	lsrs	r2, r2, #9
10010592:	07e4      	lsls	r4, r4, #31
10010594:	4302      	orrs	r2, r0
10010596:	4322      	orrs	r2, r4
10010598:	0010      	movs	r0, r2
1001059a:	bd70      	pop	{r4, r5, r6, pc}
1001059c:	2b99      	cmp	r3, #153	; 0x99
1001059e:	dc19      	bgt.n	100105d4 <__aeabi_i2f+0x70>
100105a0:	2299      	movs	r2, #153	; 0x99
100105a2:	1ad2      	subs	r2, r2, r3
100105a4:	4095      	lsls	r5, r2
100105a6:	4a12      	ldr	r2, [pc, #72]	; (100105f0 <__aeabi_i2f+0x8c>)
100105a8:	402a      	ands	r2, r5
100105aa:	0769      	lsls	r1, r5, #29
100105ac:	d004      	beq.n	100105b8 <__aeabi_i2f+0x54>
100105ae:	210f      	movs	r1, #15
100105b0:	400d      	ands	r5, r1
100105b2:	2d04      	cmp	r5, #4
100105b4:	d000      	beq.n	100105b8 <__aeabi_i2f+0x54>
100105b6:	3204      	adds	r2, #4
100105b8:	0151      	lsls	r1, r2, #5
100105ba:	d503      	bpl.n	100105c4 <__aeabi_i2f+0x60>
100105bc:	4b0c      	ldr	r3, [pc, #48]	; (100105f0 <__aeabi_i2f+0x8c>)
100105be:	401a      	ands	r2, r3
100105c0:	239f      	movs	r3, #159	; 0x9f
100105c2:	1a1b      	subs	r3, r3, r0
100105c4:	0192      	lsls	r2, r2, #6
100105c6:	0a52      	lsrs	r2, r2, #9
100105c8:	b2d8      	uxtb	r0, r3
100105ca:	e7df      	b.n	1001058c <__aeabi_i2f+0x28>
100105cc:	2400      	movs	r4, #0
100105ce:	2000      	movs	r0, #0
100105d0:	2200      	movs	r2, #0
100105d2:	e7db      	b.n	1001058c <__aeabi_i2f+0x28>
100105d4:	2205      	movs	r2, #5
100105d6:	002e      	movs	r6, r5
100105d8:	1a12      	subs	r2, r2, r0
100105da:	21b9      	movs	r1, #185	; 0xb9
100105dc:	40d6      	lsrs	r6, r2
100105de:	002a      	movs	r2, r5
100105e0:	1ac9      	subs	r1, r1, r3
100105e2:	408a      	lsls	r2, r1
100105e4:	1e55      	subs	r5, r2, #1
100105e6:	41aa      	sbcs	r2, r5
100105e8:	0035      	movs	r5, r6
100105ea:	4315      	orrs	r5, r2
100105ec:	e7db      	b.n	100105a6 <__aeabi_i2f+0x42>
100105ee:	46c0      	nop			; (mov r8, r8)
100105f0:	fbffffff 	.word	0xfbffffff

100105f4 <__aeabi_ui2f>:
100105f4:	b570      	push	{r4, r5, r6, lr}
100105f6:	1e04      	subs	r4, r0, #0
100105f8:	d028      	beq.n	1001064c <__aeabi_ui2f+0x58>
100105fa:	f000 ff83 	bl	10011504 <__clzsi2>
100105fe:	239e      	movs	r3, #158	; 0x9e
10010600:	1a1b      	subs	r3, r3, r0
10010602:	2b96      	cmp	r3, #150	; 0x96
10010604:	dc0a      	bgt.n	1001061c <__aeabi_ui2f+0x28>
10010606:	2296      	movs	r2, #150	; 0x96
10010608:	1ad2      	subs	r2, r2, r3
1001060a:	4094      	lsls	r4, r2
1001060c:	0262      	lsls	r2, r4, #9
1001060e:	0a52      	lsrs	r2, r2, #9
10010610:	b2d8      	uxtb	r0, r3
10010612:	0252      	lsls	r2, r2, #9
10010614:	0a52      	lsrs	r2, r2, #9
10010616:	05c0      	lsls	r0, r0, #23
10010618:	4310      	orrs	r0, r2
1001061a:	bd70      	pop	{r4, r5, r6, pc}
1001061c:	2b99      	cmp	r3, #153	; 0x99
1001061e:	dc18      	bgt.n	10010652 <__aeabi_ui2f+0x5e>
10010620:	2299      	movs	r2, #153	; 0x99
10010622:	1ad2      	subs	r2, r2, r3
10010624:	4094      	lsls	r4, r2
10010626:	4a11      	ldr	r2, [pc, #68]	; (1001066c <__aeabi_ui2f+0x78>)
10010628:	4022      	ands	r2, r4
1001062a:	0761      	lsls	r1, r4, #29
1001062c:	d004      	beq.n	10010638 <__aeabi_ui2f+0x44>
1001062e:	210f      	movs	r1, #15
10010630:	400c      	ands	r4, r1
10010632:	2c04      	cmp	r4, #4
10010634:	d000      	beq.n	10010638 <__aeabi_ui2f+0x44>
10010636:	3204      	adds	r2, #4
10010638:	0151      	lsls	r1, r2, #5
1001063a:	d503      	bpl.n	10010644 <__aeabi_ui2f+0x50>
1001063c:	4b0b      	ldr	r3, [pc, #44]	; (1001066c <__aeabi_ui2f+0x78>)
1001063e:	401a      	ands	r2, r3
10010640:	239f      	movs	r3, #159	; 0x9f
10010642:	1a1b      	subs	r3, r3, r0
10010644:	0192      	lsls	r2, r2, #6
10010646:	0a52      	lsrs	r2, r2, #9
10010648:	b2d8      	uxtb	r0, r3
1001064a:	e7e2      	b.n	10010612 <__aeabi_ui2f+0x1e>
1001064c:	2000      	movs	r0, #0
1001064e:	2200      	movs	r2, #0
10010650:	e7df      	b.n	10010612 <__aeabi_ui2f+0x1e>
10010652:	2205      	movs	r2, #5
10010654:	0025      	movs	r5, r4
10010656:	1a12      	subs	r2, r2, r0
10010658:	21b9      	movs	r1, #185	; 0xb9
1001065a:	40d5      	lsrs	r5, r2
1001065c:	0022      	movs	r2, r4
1001065e:	1ac9      	subs	r1, r1, r3
10010660:	408a      	lsls	r2, r1
10010662:	1e54      	subs	r4, r2, #1
10010664:	41a2      	sbcs	r2, r4
10010666:	002c      	movs	r4, r5
10010668:	4314      	orrs	r4, r2
1001066a:	e7dc      	b.n	10010626 <__aeabi_ui2f+0x32>
1001066c:	fbffffff 	.word	0xfbffffff

10010670 <__eqdf2>:
10010670:	b5f0      	push	{r4, r5, r6, r7, lr}
10010672:	465f      	mov	r7, fp
10010674:	4656      	mov	r6, sl
10010676:	464d      	mov	r5, r9
10010678:	4644      	mov	r4, r8
1001067a:	b4f0      	push	{r4, r5, r6, r7}
1001067c:	031f      	lsls	r7, r3, #12
1001067e:	005c      	lsls	r4, r3, #1
10010680:	0fdb      	lsrs	r3, r3, #31
10010682:	469a      	mov	sl, r3
10010684:	4b19      	ldr	r3, [pc, #100]	; (100106ec <__eqdf2+0x7c>)
10010686:	030e      	lsls	r6, r1, #12
10010688:	004d      	lsls	r5, r1, #1
1001068a:	0fc9      	lsrs	r1, r1, #31
1001068c:	4680      	mov	r8, r0
1001068e:	0b36      	lsrs	r6, r6, #12
10010690:	0d6d      	lsrs	r5, r5, #21
10010692:	468b      	mov	fp, r1
10010694:	4691      	mov	r9, r2
10010696:	0b3f      	lsrs	r7, r7, #12
10010698:	0d64      	lsrs	r4, r4, #21
1001069a:	429d      	cmp	r5, r3
1001069c:	d019      	beq.n	100106d2 <__eqdf2+0x62>
1001069e:	4b13      	ldr	r3, [pc, #76]	; (100106ec <__eqdf2+0x7c>)
100106a0:	429c      	cmp	r4, r3
100106a2:	d01b      	beq.n	100106dc <__eqdf2+0x6c>
100106a4:	2301      	movs	r3, #1
100106a6:	42a5      	cmp	r5, r4
100106a8:	d006      	beq.n	100106b8 <__eqdf2+0x48>
100106aa:	0018      	movs	r0, r3
100106ac:	bc3c      	pop	{r2, r3, r4, r5}
100106ae:	4690      	mov	r8, r2
100106b0:	4699      	mov	r9, r3
100106b2:	46a2      	mov	sl, r4
100106b4:	46ab      	mov	fp, r5
100106b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106b8:	42be      	cmp	r6, r7
100106ba:	d1f6      	bne.n	100106aa <__eqdf2+0x3a>
100106bc:	45c8      	cmp	r8, r9
100106be:	d1f4      	bne.n	100106aa <__eqdf2+0x3a>
100106c0:	45d3      	cmp	fp, sl
100106c2:	d010      	beq.n	100106e6 <__eqdf2+0x76>
100106c4:	2d00      	cmp	r5, #0
100106c6:	d1f0      	bne.n	100106aa <__eqdf2+0x3a>
100106c8:	4330      	orrs	r0, r6
100106ca:	0003      	movs	r3, r0
100106cc:	1e5a      	subs	r2, r3, #1
100106ce:	4193      	sbcs	r3, r2
100106d0:	e7eb      	b.n	100106aa <__eqdf2+0x3a>
100106d2:	0031      	movs	r1, r6
100106d4:	2301      	movs	r3, #1
100106d6:	4301      	orrs	r1, r0
100106d8:	d1e7      	bne.n	100106aa <__eqdf2+0x3a>
100106da:	e7e0      	b.n	1001069e <__eqdf2+0x2e>
100106dc:	433a      	orrs	r2, r7
100106de:	2301      	movs	r3, #1
100106e0:	2a00      	cmp	r2, #0
100106e2:	d1e2      	bne.n	100106aa <__eqdf2+0x3a>
100106e4:	e7de      	b.n	100106a4 <__eqdf2+0x34>
100106e6:	2300      	movs	r3, #0
100106e8:	e7df      	b.n	100106aa <__eqdf2+0x3a>
100106ea:	46c0      	nop			; (mov r8, r8)
100106ec:	000007ff 	.word	0x000007ff

100106f0 <__gedf2>:
100106f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100106f2:	465f      	mov	r7, fp
100106f4:	4644      	mov	r4, r8
100106f6:	4656      	mov	r6, sl
100106f8:	464d      	mov	r5, r9
100106fa:	b4f0      	push	{r4, r5, r6, r7}
100106fc:	031f      	lsls	r7, r3, #12
100106fe:	0b3c      	lsrs	r4, r7, #12
10010700:	4f2c      	ldr	r7, [pc, #176]	; (100107b4 <__gedf2+0xc4>)
10010702:	030e      	lsls	r6, r1, #12
10010704:	004d      	lsls	r5, r1, #1
10010706:	46a3      	mov	fp, r4
10010708:	005c      	lsls	r4, r3, #1
1001070a:	4684      	mov	ip, r0
1001070c:	0b36      	lsrs	r6, r6, #12
1001070e:	0d6d      	lsrs	r5, r5, #21
10010710:	0fc9      	lsrs	r1, r1, #31
10010712:	4690      	mov	r8, r2
10010714:	0d64      	lsrs	r4, r4, #21
10010716:	0fdb      	lsrs	r3, r3, #31
10010718:	42bd      	cmp	r5, r7
1001071a:	d02b      	beq.n	10010774 <__gedf2+0x84>
1001071c:	4f25      	ldr	r7, [pc, #148]	; (100107b4 <__gedf2+0xc4>)
1001071e:	42bc      	cmp	r4, r7
10010720:	d02e      	beq.n	10010780 <__gedf2+0x90>
10010722:	2d00      	cmp	r5, #0
10010724:	d10e      	bne.n	10010744 <__gedf2+0x54>
10010726:	4330      	orrs	r0, r6
10010728:	0007      	movs	r7, r0
1001072a:	4681      	mov	r9, r0
1001072c:	4278      	negs	r0, r7
1001072e:	4178      	adcs	r0, r7
10010730:	2c00      	cmp	r4, #0
10010732:	d117      	bne.n	10010764 <__gedf2+0x74>
10010734:	465f      	mov	r7, fp
10010736:	433a      	orrs	r2, r7
10010738:	d114      	bne.n	10010764 <__gedf2+0x74>
1001073a:	464b      	mov	r3, r9
1001073c:	2000      	movs	r0, #0
1001073e:	2b00      	cmp	r3, #0
10010740:	d00a      	beq.n	10010758 <__gedf2+0x68>
10010742:	e006      	b.n	10010752 <__gedf2+0x62>
10010744:	2c00      	cmp	r4, #0
10010746:	d102      	bne.n	1001074e <__gedf2+0x5e>
10010748:	4658      	mov	r0, fp
1001074a:	4302      	orrs	r2, r0
1001074c:	d001      	beq.n	10010752 <__gedf2+0x62>
1001074e:	4299      	cmp	r1, r3
10010750:	d01a      	beq.n	10010788 <__gedf2+0x98>
10010752:	2301      	movs	r3, #1
10010754:	4248      	negs	r0, r1
10010756:	4318      	orrs	r0, r3
10010758:	bc3c      	pop	{r2, r3, r4, r5}
1001075a:	4690      	mov	r8, r2
1001075c:	4699      	mov	r9, r3
1001075e:	46a2      	mov	sl, r4
10010760:	46ab      	mov	fp, r5
10010762:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010764:	2800      	cmp	r0, #0
10010766:	d0f2      	beq.n	1001074e <__gedf2+0x5e>
10010768:	4258      	negs	r0, r3
1001076a:	4158      	adcs	r0, r3
1001076c:	2201      	movs	r2, #1
1001076e:	4240      	negs	r0, r0
10010770:	4310      	orrs	r0, r2
10010772:	e7f1      	b.n	10010758 <__gedf2+0x68>
10010774:	0037      	movs	r7, r6
10010776:	4307      	orrs	r7, r0
10010778:	d0d0      	beq.n	1001071c <__gedf2+0x2c>
1001077a:	2002      	movs	r0, #2
1001077c:	4240      	negs	r0, r0
1001077e:	e7eb      	b.n	10010758 <__gedf2+0x68>
10010780:	465f      	mov	r7, fp
10010782:	4317      	orrs	r7, r2
10010784:	d0cd      	beq.n	10010722 <__gedf2+0x32>
10010786:	e7f8      	b.n	1001077a <__gedf2+0x8a>
10010788:	42a5      	cmp	r5, r4
1001078a:	dce2      	bgt.n	10010752 <__gedf2+0x62>
1001078c:	db05      	blt.n	1001079a <__gedf2+0xaa>
1001078e:	455e      	cmp	r6, fp
10010790:	d8df      	bhi.n	10010752 <__gedf2+0x62>
10010792:	d008      	beq.n	100107a6 <__gedf2+0xb6>
10010794:	2000      	movs	r0, #0
10010796:	455e      	cmp	r6, fp
10010798:	d2de      	bcs.n	10010758 <__gedf2+0x68>
1001079a:	4248      	negs	r0, r1
1001079c:	4148      	adcs	r0, r1
1001079e:	2301      	movs	r3, #1
100107a0:	4240      	negs	r0, r0
100107a2:	4318      	orrs	r0, r3
100107a4:	e7d8      	b.n	10010758 <__gedf2+0x68>
100107a6:	45c4      	cmp	ip, r8
100107a8:	d8d3      	bhi.n	10010752 <__gedf2+0x62>
100107aa:	2000      	movs	r0, #0
100107ac:	45c4      	cmp	ip, r8
100107ae:	d3f4      	bcc.n	1001079a <__gedf2+0xaa>
100107b0:	e7d2      	b.n	10010758 <__gedf2+0x68>
100107b2:	46c0      	nop			; (mov r8, r8)
100107b4:	000007ff 	.word	0x000007ff

100107b8 <__ledf2>:
100107b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100107ba:	465f      	mov	r7, fp
100107bc:	464d      	mov	r5, r9
100107be:	4644      	mov	r4, r8
100107c0:	4656      	mov	r6, sl
100107c2:	b4f0      	push	{r4, r5, r6, r7}
100107c4:	031c      	lsls	r4, r3, #12
100107c6:	0b24      	lsrs	r4, r4, #12
100107c8:	46a4      	mov	ip, r4
100107ca:	4c2f      	ldr	r4, [pc, #188]	; (10010888 <__ledf2+0xd0>)
100107cc:	030f      	lsls	r7, r1, #12
100107ce:	004d      	lsls	r5, r1, #1
100107d0:	005e      	lsls	r6, r3, #1
100107d2:	0fc9      	lsrs	r1, r1, #31
100107d4:	4680      	mov	r8, r0
100107d6:	0b3f      	lsrs	r7, r7, #12
100107d8:	0d6d      	lsrs	r5, r5, #21
100107da:	468b      	mov	fp, r1
100107dc:	4691      	mov	r9, r2
100107de:	0d76      	lsrs	r6, r6, #21
100107e0:	0fdb      	lsrs	r3, r3, #31
100107e2:	42a5      	cmp	r5, r4
100107e4:	d020      	beq.n	10010828 <__ledf2+0x70>
100107e6:	4c28      	ldr	r4, [pc, #160]	; (10010888 <__ledf2+0xd0>)
100107e8:	42a6      	cmp	r6, r4
100107ea:	d022      	beq.n	10010832 <__ledf2+0x7a>
100107ec:	2d00      	cmp	r5, #0
100107ee:	d112      	bne.n	10010816 <__ledf2+0x5e>
100107f0:	4338      	orrs	r0, r7
100107f2:	4244      	negs	r4, r0
100107f4:	4144      	adcs	r4, r0
100107f6:	2e00      	cmp	r6, #0
100107f8:	d020      	beq.n	1001083c <__ledf2+0x84>
100107fa:	2c00      	cmp	r4, #0
100107fc:	d00d      	beq.n	1001081a <__ledf2+0x62>
100107fe:	425c      	negs	r4, r3
10010800:	4163      	adcs	r3, r4
10010802:	2401      	movs	r4, #1
10010804:	425b      	negs	r3, r3
10010806:	431c      	orrs	r4, r3
10010808:	0020      	movs	r0, r4
1001080a:	bc3c      	pop	{r2, r3, r4, r5}
1001080c:	4690      	mov	r8, r2
1001080e:	4699      	mov	r9, r3
10010810:	46a2      	mov	sl, r4
10010812:	46ab      	mov	fp, r5
10010814:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010816:	2e00      	cmp	r6, #0
10010818:	d017      	beq.n	1001084a <__ledf2+0x92>
1001081a:	455b      	cmp	r3, fp
1001081c:	d019      	beq.n	10010852 <__ledf2+0x9a>
1001081e:	465b      	mov	r3, fp
10010820:	425c      	negs	r4, r3
10010822:	2301      	movs	r3, #1
10010824:	431c      	orrs	r4, r3
10010826:	e7ef      	b.n	10010808 <__ledf2+0x50>
10010828:	0039      	movs	r1, r7
1001082a:	2402      	movs	r4, #2
1001082c:	4301      	orrs	r1, r0
1001082e:	d1eb      	bne.n	10010808 <__ledf2+0x50>
10010830:	e7d9      	b.n	100107e6 <__ledf2+0x2e>
10010832:	4661      	mov	r1, ip
10010834:	2402      	movs	r4, #2
10010836:	4311      	orrs	r1, r2
10010838:	d1e6      	bne.n	10010808 <__ledf2+0x50>
1001083a:	e7d7      	b.n	100107ec <__ledf2+0x34>
1001083c:	4661      	mov	r1, ip
1001083e:	430a      	orrs	r2, r1
10010840:	d1db      	bne.n	100107fa <__ledf2+0x42>
10010842:	2400      	movs	r4, #0
10010844:	2800      	cmp	r0, #0
10010846:	d0df      	beq.n	10010808 <__ledf2+0x50>
10010848:	e7e9      	b.n	1001081e <__ledf2+0x66>
1001084a:	4661      	mov	r1, ip
1001084c:	430a      	orrs	r2, r1
1001084e:	d1e4      	bne.n	1001081a <__ledf2+0x62>
10010850:	e7e5      	b.n	1001081e <__ledf2+0x66>
10010852:	42b5      	cmp	r5, r6
10010854:	dd03      	ble.n	1001085e <__ledf2+0xa6>
10010856:	2201      	movs	r2, #1
10010858:	425c      	negs	r4, r3
1001085a:	4314      	orrs	r4, r2
1001085c:	e7d4      	b.n	10010808 <__ledf2+0x50>
1001085e:	42b5      	cmp	r5, r6
10010860:	dbcd      	blt.n	100107fe <__ledf2+0x46>
10010862:	4567      	cmp	r7, ip
10010864:	d8db      	bhi.n	1001081e <__ledf2+0x66>
10010866:	d009      	beq.n	1001087c <__ledf2+0xc4>
10010868:	2400      	movs	r4, #0
1001086a:	4567      	cmp	r7, ip
1001086c:	d2cc      	bcs.n	10010808 <__ledf2+0x50>
1001086e:	4659      	mov	r1, fp
10010870:	424c      	negs	r4, r1
10010872:	4161      	adcs	r1, r4
10010874:	2401      	movs	r4, #1
10010876:	4249      	negs	r1, r1
10010878:	430c      	orrs	r4, r1
1001087a:	e7c5      	b.n	10010808 <__ledf2+0x50>
1001087c:	45c8      	cmp	r8, r9
1001087e:	d8ce      	bhi.n	1001081e <__ledf2+0x66>
10010880:	2400      	movs	r4, #0
10010882:	45c8      	cmp	r8, r9
10010884:	d3f3      	bcc.n	1001086e <__ledf2+0xb6>
10010886:	e7bf      	b.n	10010808 <__ledf2+0x50>
10010888:	000007ff 	.word	0x000007ff

1001088c <__aeabi_dmul>:
1001088c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001088e:	465f      	mov	r7, fp
10010890:	4656      	mov	r6, sl
10010892:	464d      	mov	r5, r9
10010894:	4644      	mov	r4, r8
10010896:	b4f0      	push	{r4, r5, r6, r7}
10010898:	030d      	lsls	r5, r1, #12
1001089a:	4699      	mov	r9, r3
1001089c:	004e      	lsls	r6, r1, #1
1001089e:	0b2b      	lsrs	r3, r5, #12
100108a0:	b087      	sub	sp, #28
100108a2:	0007      	movs	r7, r0
100108a4:	4692      	mov	sl, r2
100108a6:	4680      	mov	r8, r0
100108a8:	469b      	mov	fp, r3
100108aa:	0d76      	lsrs	r6, r6, #21
100108ac:	0fcc      	lsrs	r4, r1, #31
100108ae:	2e00      	cmp	r6, #0
100108b0:	d069      	beq.n	10010986 <__aeabi_dmul+0xfa>
100108b2:	4b6d      	ldr	r3, [pc, #436]	; (10010a68 <__aeabi_dmul+0x1dc>)
100108b4:	429e      	cmp	r6, r3
100108b6:	d035      	beq.n	10010924 <__aeabi_dmul+0x98>
100108b8:	465b      	mov	r3, fp
100108ba:	2280      	movs	r2, #128	; 0x80
100108bc:	00dd      	lsls	r5, r3, #3
100108be:	0412      	lsls	r2, r2, #16
100108c0:	0f43      	lsrs	r3, r0, #29
100108c2:	4313      	orrs	r3, r2
100108c4:	432b      	orrs	r3, r5
100108c6:	469b      	mov	fp, r3
100108c8:	00c3      	lsls	r3, r0, #3
100108ca:	4698      	mov	r8, r3
100108cc:	4b67      	ldr	r3, [pc, #412]	; (10010a6c <__aeabi_dmul+0x1e0>)
100108ce:	2700      	movs	r7, #0
100108d0:	469c      	mov	ip, r3
100108d2:	2300      	movs	r3, #0
100108d4:	4466      	add	r6, ip
100108d6:	9301      	str	r3, [sp, #4]
100108d8:	464a      	mov	r2, r9
100108da:	0315      	lsls	r5, r2, #12
100108dc:	0050      	lsls	r0, r2, #1
100108de:	0fd2      	lsrs	r2, r2, #31
100108e0:	4653      	mov	r3, sl
100108e2:	0b2d      	lsrs	r5, r5, #12
100108e4:	0d40      	lsrs	r0, r0, #21
100108e6:	4691      	mov	r9, r2
100108e8:	d100      	bne.n	100108ec <__aeabi_dmul+0x60>
100108ea:	e076      	b.n	100109da <__aeabi_dmul+0x14e>
100108ec:	4a5e      	ldr	r2, [pc, #376]	; (10010a68 <__aeabi_dmul+0x1dc>)
100108ee:	4290      	cmp	r0, r2
100108f0:	d06c      	beq.n	100109cc <__aeabi_dmul+0x140>
100108f2:	2280      	movs	r2, #128	; 0x80
100108f4:	0f5b      	lsrs	r3, r3, #29
100108f6:	0412      	lsls	r2, r2, #16
100108f8:	4313      	orrs	r3, r2
100108fa:	4a5c      	ldr	r2, [pc, #368]	; (10010a6c <__aeabi_dmul+0x1e0>)
100108fc:	00ed      	lsls	r5, r5, #3
100108fe:	4694      	mov	ip, r2
10010900:	431d      	orrs	r5, r3
10010902:	4653      	mov	r3, sl
10010904:	2200      	movs	r2, #0
10010906:	00db      	lsls	r3, r3, #3
10010908:	4460      	add	r0, ip
1001090a:	4649      	mov	r1, r9
1001090c:	1836      	adds	r6, r6, r0
1001090e:	1c70      	adds	r0, r6, #1
10010910:	4061      	eors	r1, r4
10010912:	9002      	str	r0, [sp, #8]
10010914:	4317      	orrs	r7, r2
10010916:	2f0f      	cmp	r7, #15
10010918:	d900      	bls.n	1001091c <__aeabi_dmul+0x90>
1001091a:	e0af      	b.n	10010a7c <__aeabi_dmul+0x1f0>
1001091c:	4854      	ldr	r0, [pc, #336]	; (10010a70 <__aeabi_dmul+0x1e4>)
1001091e:	00bf      	lsls	r7, r7, #2
10010920:	59c7      	ldr	r7, [r0, r7]
10010922:	46bf      	mov	pc, r7
10010924:	465b      	mov	r3, fp
10010926:	431f      	orrs	r7, r3
10010928:	d000      	beq.n	1001092c <__aeabi_dmul+0xa0>
1001092a:	e088      	b.n	10010a3e <__aeabi_dmul+0x1b2>
1001092c:	2300      	movs	r3, #0
1001092e:	469b      	mov	fp, r3
10010930:	4698      	mov	r8, r3
10010932:	3302      	adds	r3, #2
10010934:	2708      	movs	r7, #8
10010936:	9301      	str	r3, [sp, #4]
10010938:	e7ce      	b.n	100108d8 <__aeabi_dmul+0x4c>
1001093a:	4649      	mov	r1, r9
1001093c:	2a02      	cmp	r2, #2
1001093e:	d06a      	beq.n	10010a16 <__aeabi_dmul+0x18a>
10010940:	2a03      	cmp	r2, #3
10010942:	d100      	bne.n	10010946 <__aeabi_dmul+0xba>
10010944:	e209      	b.n	10010d5a <__aeabi_dmul+0x4ce>
10010946:	2a01      	cmp	r2, #1
10010948:	d000      	beq.n	1001094c <__aeabi_dmul+0xc0>
1001094a:	e1bb      	b.n	10010cc4 <__aeabi_dmul+0x438>
1001094c:	4011      	ands	r1, r2
1001094e:	2200      	movs	r2, #0
10010950:	2300      	movs	r3, #0
10010952:	2500      	movs	r5, #0
10010954:	4690      	mov	r8, r2
10010956:	b2cc      	uxtb	r4, r1
10010958:	2100      	movs	r1, #0
1001095a:	032d      	lsls	r5, r5, #12
1001095c:	0d0a      	lsrs	r2, r1, #20
1001095e:	0512      	lsls	r2, r2, #20
10010960:	0b2d      	lsrs	r5, r5, #12
10010962:	4315      	orrs	r5, r2
10010964:	4a43      	ldr	r2, [pc, #268]	; (10010a74 <__aeabi_dmul+0x1e8>)
10010966:	051b      	lsls	r3, r3, #20
10010968:	4015      	ands	r5, r2
1001096a:	431d      	orrs	r5, r3
1001096c:	006d      	lsls	r5, r5, #1
1001096e:	07e4      	lsls	r4, r4, #31
10010970:	086d      	lsrs	r5, r5, #1
10010972:	4325      	orrs	r5, r4
10010974:	4640      	mov	r0, r8
10010976:	0029      	movs	r1, r5
10010978:	b007      	add	sp, #28
1001097a:	bc3c      	pop	{r2, r3, r4, r5}
1001097c:	4690      	mov	r8, r2
1001097e:	4699      	mov	r9, r3
10010980:	46a2      	mov	sl, r4
10010982:	46ab      	mov	fp, r5
10010984:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010986:	4303      	orrs	r3, r0
10010988:	d052      	beq.n	10010a30 <__aeabi_dmul+0x1a4>
1001098a:	465b      	mov	r3, fp
1001098c:	2b00      	cmp	r3, #0
1001098e:	d100      	bne.n	10010992 <__aeabi_dmul+0x106>
10010990:	e18a      	b.n	10010ca8 <__aeabi_dmul+0x41c>
10010992:	4658      	mov	r0, fp
10010994:	f000 fdb6 	bl	10011504 <__clzsi2>
10010998:	0003      	movs	r3, r0
1001099a:	3b0b      	subs	r3, #11
1001099c:	2b1c      	cmp	r3, #28
1001099e:	dd00      	ble.n	100109a2 <__aeabi_dmul+0x116>
100109a0:	e17b      	b.n	10010c9a <__aeabi_dmul+0x40e>
100109a2:	221d      	movs	r2, #29
100109a4:	1ad3      	subs	r3, r2, r3
100109a6:	003a      	movs	r2, r7
100109a8:	0001      	movs	r1, r0
100109aa:	465d      	mov	r5, fp
100109ac:	40da      	lsrs	r2, r3
100109ae:	3908      	subs	r1, #8
100109b0:	408d      	lsls	r5, r1
100109b2:	0013      	movs	r3, r2
100109b4:	408f      	lsls	r7, r1
100109b6:	432b      	orrs	r3, r5
100109b8:	469b      	mov	fp, r3
100109ba:	46b8      	mov	r8, r7
100109bc:	4b2e      	ldr	r3, [pc, #184]	; (10010a78 <__aeabi_dmul+0x1ec>)
100109be:	2700      	movs	r7, #0
100109c0:	469c      	mov	ip, r3
100109c2:	2300      	movs	r3, #0
100109c4:	4460      	add	r0, ip
100109c6:	4246      	negs	r6, r0
100109c8:	9301      	str	r3, [sp, #4]
100109ca:	e785      	b.n	100108d8 <__aeabi_dmul+0x4c>
100109cc:	4652      	mov	r2, sl
100109ce:	432a      	orrs	r2, r5
100109d0:	d12c      	bne.n	10010a2c <__aeabi_dmul+0x1a0>
100109d2:	2500      	movs	r5, #0
100109d4:	2300      	movs	r3, #0
100109d6:	2202      	movs	r2, #2
100109d8:	e797      	b.n	1001090a <__aeabi_dmul+0x7e>
100109da:	4652      	mov	r2, sl
100109dc:	432a      	orrs	r2, r5
100109de:	d021      	beq.n	10010a24 <__aeabi_dmul+0x198>
100109e0:	2d00      	cmp	r5, #0
100109e2:	d100      	bne.n	100109e6 <__aeabi_dmul+0x15a>
100109e4:	e154      	b.n	10010c90 <__aeabi_dmul+0x404>
100109e6:	0028      	movs	r0, r5
100109e8:	f000 fd8c 	bl	10011504 <__clzsi2>
100109ec:	0003      	movs	r3, r0
100109ee:	3b0b      	subs	r3, #11
100109f0:	2b1c      	cmp	r3, #28
100109f2:	dd00      	ble.n	100109f6 <__aeabi_dmul+0x16a>
100109f4:	e146      	b.n	10010c84 <__aeabi_dmul+0x3f8>
100109f6:	211d      	movs	r1, #29
100109f8:	1acb      	subs	r3, r1, r3
100109fa:	4651      	mov	r1, sl
100109fc:	0002      	movs	r2, r0
100109fe:	40d9      	lsrs	r1, r3
10010a00:	4653      	mov	r3, sl
10010a02:	3a08      	subs	r2, #8
10010a04:	4095      	lsls	r5, r2
10010a06:	4093      	lsls	r3, r2
10010a08:	430d      	orrs	r5, r1
10010a0a:	4a1b      	ldr	r2, [pc, #108]	; (10010a78 <__aeabi_dmul+0x1ec>)
10010a0c:	4694      	mov	ip, r2
10010a0e:	4460      	add	r0, ip
10010a10:	4240      	negs	r0, r0
10010a12:	2200      	movs	r2, #0
10010a14:	e779      	b.n	1001090a <__aeabi_dmul+0x7e>
10010a16:	2401      	movs	r4, #1
10010a18:	2200      	movs	r2, #0
10010a1a:	400c      	ands	r4, r1
10010a1c:	4b12      	ldr	r3, [pc, #72]	; (10010a68 <__aeabi_dmul+0x1dc>)
10010a1e:	2500      	movs	r5, #0
10010a20:	4690      	mov	r8, r2
10010a22:	e799      	b.n	10010958 <__aeabi_dmul+0xcc>
10010a24:	2500      	movs	r5, #0
10010a26:	2300      	movs	r3, #0
10010a28:	2201      	movs	r2, #1
10010a2a:	e76e      	b.n	1001090a <__aeabi_dmul+0x7e>
10010a2c:	2203      	movs	r2, #3
10010a2e:	e76c      	b.n	1001090a <__aeabi_dmul+0x7e>
10010a30:	2300      	movs	r3, #0
10010a32:	469b      	mov	fp, r3
10010a34:	4698      	mov	r8, r3
10010a36:	3301      	adds	r3, #1
10010a38:	2704      	movs	r7, #4
10010a3a:	9301      	str	r3, [sp, #4]
10010a3c:	e74c      	b.n	100108d8 <__aeabi_dmul+0x4c>
10010a3e:	2303      	movs	r3, #3
10010a40:	270c      	movs	r7, #12
10010a42:	9301      	str	r3, [sp, #4]
10010a44:	e748      	b.n	100108d8 <__aeabi_dmul+0x4c>
10010a46:	2300      	movs	r3, #0
10010a48:	2580      	movs	r5, #128	; 0x80
10010a4a:	4698      	mov	r8, r3
10010a4c:	2400      	movs	r4, #0
10010a4e:	032d      	lsls	r5, r5, #12
10010a50:	4b05      	ldr	r3, [pc, #20]	; (10010a68 <__aeabi_dmul+0x1dc>)
10010a52:	e781      	b.n	10010958 <__aeabi_dmul+0xcc>
10010a54:	465d      	mov	r5, fp
10010a56:	4643      	mov	r3, r8
10010a58:	9a01      	ldr	r2, [sp, #4]
10010a5a:	e76f      	b.n	1001093c <__aeabi_dmul+0xb0>
10010a5c:	465d      	mov	r5, fp
10010a5e:	4643      	mov	r3, r8
10010a60:	0021      	movs	r1, r4
10010a62:	9a01      	ldr	r2, [sp, #4]
10010a64:	e76a      	b.n	1001093c <__aeabi_dmul+0xb0>
10010a66:	46c0      	nop			; (mov r8, r8)
10010a68:	000007ff 	.word	0x000007ff
10010a6c:	fffffc01 	.word	0xfffffc01
10010a70:	10013748 	.word	0x10013748
10010a74:	800fffff 	.word	0x800fffff
10010a78:	000003f3 	.word	0x000003f3
10010a7c:	4642      	mov	r2, r8
10010a7e:	0c12      	lsrs	r2, r2, #16
10010a80:	4691      	mov	r9, r2
10010a82:	0c1a      	lsrs	r2, r3, #16
10010a84:	4694      	mov	ip, r2
10010a86:	4642      	mov	r2, r8
10010a88:	0417      	lsls	r7, r2, #16
10010a8a:	464a      	mov	r2, r9
10010a8c:	041b      	lsls	r3, r3, #16
10010a8e:	0c1b      	lsrs	r3, r3, #16
10010a90:	435a      	muls	r2, r3
10010a92:	4660      	mov	r0, ip
10010a94:	4690      	mov	r8, r2
10010a96:	464a      	mov	r2, r9
10010a98:	4342      	muls	r2, r0
10010a9a:	0010      	movs	r0, r2
10010a9c:	9203      	str	r2, [sp, #12]
10010a9e:	4662      	mov	r2, ip
10010aa0:	001c      	movs	r4, r3
10010aa2:	0c3f      	lsrs	r7, r7, #16
10010aa4:	437a      	muls	r2, r7
10010aa6:	437c      	muls	r4, r7
10010aa8:	4442      	add	r2, r8
10010aaa:	9201      	str	r2, [sp, #4]
10010aac:	0c22      	lsrs	r2, r4, #16
10010aae:	4692      	mov	sl, r2
10010ab0:	9a01      	ldr	r2, [sp, #4]
10010ab2:	4452      	add	r2, sl
10010ab4:	4590      	cmp	r8, r2
10010ab6:	d906      	bls.n	10010ac6 <__aeabi_dmul+0x23a>
10010ab8:	4682      	mov	sl, r0
10010aba:	2080      	movs	r0, #128	; 0x80
10010abc:	0240      	lsls	r0, r0, #9
10010abe:	4680      	mov	r8, r0
10010ac0:	44c2      	add	sl, r8
10010ac2:	4650      	mov	r0, sl
10010ac4:	9003      	str	r0, [sp, #12]
10010ac6:	0c10      	lsrs	r0, r2, #16
10010ac8:	9004      	str	r0, [sp, #16]
10010aca:	4648      	mov	r0, r9
10010acc:	0424      	lsls	r4, r4, #16
10010ace:	0c24      	lsrs	r4, r4, #16
10010ad0:	0412      	lsls	r2, r2, #16
10010ad2:	1912      	adds	r2, r2, r4
10010ad4:	9205      	str	r2, [sp, #20]
10010ad6:	0c2a      	lsrs	r2, r5, #16
10010ad8:	042d      	lsls	r5, r5, #16
10010ada:	0c2d      	lsrs	r5, r5, #16
10010adc:	4368      	muls	r0, r5
10010ade:	002c      	movs	r4, r5
10010ae0:	4682      	mov	sl, r0
10010ae2:	4648      	mov	r0, r9
10010ae4:	437c      	muls	r4, r7
10010ae6:	4350      	muls	r0, r2
10010ae8:	4681      	mov	r9, r0
10010aea:	0c20      	lsrs	r0, r4, #16
10010aec:	4680      	mov	r8, r0
10010aee:	4357      	muls	r7, r2
10010af0:	4457      	add	r7, sl
10010af2:	4447      	add	r7, r8
10010af4:	45ba      	cmp	sl, r7
10010af6:	d903      	bls.n	10010b00 <__aeabi_dmul+0x274>
10010af8:	2080      	movs	r0, #128	; 0x80
10010afa:	0240      	lsls	r0, r0, #9
10010afc:	4680      	mov	r8, r0
10010afe:	44c1      	add	r9, r8
10010b00:	0c38      	lsrs	r0, r7, #16
10010b02:	043f      	lsls	r7, r7, #16
10010b04:	46b8      	mov	r8, r7
10010b06:	4448      	add	r0, r9
10010b08:	0424      	lsls	r4, r4, #16
10010b0a:	0c24      	lsrs	r4, r4, #16
10010b0c:	9001      	str	r0, [sp, #4]
10010b0e:	9804      	ldr	r0, [sp, #16]
10010b10:	44a0      	add	r8, r4
10010b12:	4440      	add	r0, r8
10010b14:	9004      	str	r0, [sp, #16]
10010b16:	4658      	mov	r0, fp
10010b18:	0c00      	lsrs	r0, r0, #16
10010b1a:	4681      	mov	r9, r0
10010b1c:	4658      	mov	r0, fp
10010b1e:	0404      	lsls	r4, r0, #16
10010b20:	0c20      	lsrs	r0, r4, #16
10010b22:	4682      	mov	sl, r0
10010b24:	0007      	movs	r7, r0
10010b26:	4648      	mov	r0, r9
10010b28:	435f      	muls	r7, r3
10010b2a:	464c      	mov	r4, r9
10010b2c:	4343      	muls	r3, r0
10010b2e:	4660      	mov	r0, ip
10010b30:	4360      	muls	r0, r4
10010b32:	4664      	mov	r4, ip
10010b34:	4683      	mov	fp, r0
10010b36:	4650      	mov	r0, sl
10010b38:	4344      	muls	r4, r0
10010b3a:	0c38      	lsrs	r0, r7, #16
10010b3c:	4684      	mov	ip, r0
10010b3e:	18e4      	adds	r4, r4, r3
10010b40:	4464      	add	r4, ip
10010b42:	42a3      	cmp	r3, r4
10010b44:	d903      	bls.n	10010b4e <__aeabi_dmul+0x2c2>
10010b46:	2380      	movs	r3, #128	; 0x80
10010b48:	025b      	lsls	r3, r3, #9
10010b4a:	469c      	mov	ip, r3
10010b4c:	44e3      	add	fp, ip
10010b4e:	4648      	mov	r0, r9
10010b50:	043f      	lsls	r7, r7, #16
10010b52:	0c23      	lsrs	r3, r4, #16
10010b54:	0c3f      	lsrs	r7, r7, #16
10010b56:	0424      	lsls	r4, r4, #16
10010b58:	19e4      	adds	r4, r4, r7
10010b5a:	4657      	mov	r7, sl
10010b5c:	4368      	muls	r0, r5
10010b5e:	436f      	muls	r7, r5
10010b60:	4684      	mov	ip, r0
10010b62:	464d      	mov	r5, r9
10010b64:	4650      	mov	r0, sl
10010b66:	4355      	muls	r5, r2
10010b68:	4342      	muls	r2, r0
10010b6a:	0c38      	lsrs	r0, r7, #16
10010b6c:	4681      	mov	r9, r0
10010b6e:	4462      	add	r2, ip
10010b70:	444a      	add	r2, r9
10010b72:	445b      	add	r3, fp
10010b74:	4594      	cmp	ip, r2
10010b76:	d903      	bls.n	10010b80 <__aeabi_dmul+0x2f4>
10010b78:	2080      	movs	r0, #128	; 0x80
10010b7a:	0240      	lsls	r0, r0, #9
10010b7c:	4684      	mov	ip, r0
10010b7e:	4465      	add	r5, ip
10010b80:	9803      	ldr	r0, [sp, #12]
10010b82:	043f      	lsls	r7, r7, #16
10010b84:	4683      	mov	fp, r0
10010b86:	9804      	ldr	r0, [sp, #16]
10010b88:	0c3f      	lsrs	r7, r7, #16
10010b8a:	4684      	mov	ip, r0
10010b8c:	44e3      	add	fp, ip
10010b8e:	45c3      	cmp	fp, r8
10010b90:	4180      	sbcs	r0, r0
10010b92:	4240      	negs	r0, r0
10010b94:	4682      	mov	sl, r0
10010b96:	0410      	lsls	r0, r2, #16
10010b98:	4684      	mov	ip, r0
10010b9a:	9801      	ldr	r0, [sp, #4]
10010b9c:	4467      	add	r7, ip
10010b9e:	4684      	mov	ip, r0
10010ba0:	4467      	add	r7, ip
10010ba2:	44a3      	add	fp, r4
10010ba4:	46bc      	mov	ip, r7
10010ba6:	45a3      	cmp	fp, r4
10010ba8:	41a4      	sbcs	r4, r4
10010baa:	4699      	mov	r9, r3
10010bac:	44d4      	add	ip, sl
10010bae:	4264      	negs	r4, r4
10010bb0:	4287      	cmp	r7, r0
10010bb2:	41bf      	sbcs	r7, r7
10010bb4:	45d4      	cmp	ip, sl
10010bb6:	4180      	sbcs	r0, r0
10010bb8:	44e1      	add	r9, ip
10010bba:	46a0      	mov	r8, r4
10010bbc:	4599      	cmp	r9, r3
10010bbe:	419b      	sbcs	r3, r3
10010bc0:	427f      	negs	r7, r7
10010bc2:	4240      	negs	r0, r0
10010bc4:	44c8      	add	r8, r9
10010bc6:	4307      	orrs	r7, r0
10010bc8:	0c12      	lsrs	r2, r2, #16
10010bca:	18ba      	adds	r2, r7, r2
10010bcc:	45a0      	cmp	r8, r4
10010bce:	41a4      	sbcs	r4, r4
10010bd0:	425f      	negs	r7, r3
10010bd2:	003b      	movs	r3, r7
10010bd4:	4264      	negs	r4, r4
10010bd6:	4323      	orrs	r3, r4
10010bd8:	18d7      	adds	r7, r2, r3
10010bda:	4643      	mov	r3, r8
10010bdc:	197d      	adds	r5, r7, r5
10010bde:	0ddb      	lsrs	r3, r3, #23
10010be0:	026d      	lsls	r5, r5, #9
10010be2:	431d      	orrs	r5, r3
10010be4:	465b      	mov	r3, fp
10010be6:	025a      	lsls	r2, r3, #9
10010be8:	9b05      	ldr	r3, [sp, #20]
10010bea:	431a      	orrs	r2, r3
10010bec:	1e53      	subs	r3, r2, #1
10010bee:	419a      	sbcs	r2, r3
10010bf0:	465b      	mov	r3, fp
10010bf2:	0ddb      	lsrs	r3, r3, #23
10010bf4:	431a      	orrs	r2, r3
10010bf6:	4643      	mov	r3, r8
10010bf8:	025b      	lsls	r3, r3, #9
10010bfa:	4313      	orrs	r3, r2
10010bfc:	01ea      	lsls	r2, r5, #7
10010bfe:	d507      	bpl.n	10010c10 <__aeabi_dmul+0x384>
10010c00:	2201      	movs	r2, #1
10010c02:	085c      	lsrs	r4, r3, #1
10010c04:	4013      	ands	r3, r2
10010c06:	4323      	orrs	r3, r4
10010c08:	07ea      	lsls	r2, r5, #31
10010c0a:	9e02      	ldr	r6, [sp, #8]
10010c0c:	4313      	orrs	r3, r2
10010c0e:	086d      	lsrs	r5, r5, #1
10010c10:	4a57      	ldr	r2, [pc, #348]	; (10010d70 <__aeabi_dmul+0x4e4>)
10010c12:	18b2      	adds	r2, r6, r2
10010c14:	2a00      	cmp	r2, #0
10010c16:	dd4b      	ble.n	10010cb0 <__aeabi_dmul+0x424>
10010c18:	0758      	lsls	r0, r3, #29
10010c1a:	d009      	beq.n	10010c30 <__aeabi_dmul+0x3a4>
10010c1c:	200f      	movs	r0, #15
10010c1e:	4018      	ands	r0, r3
10010c20:	2804      	cmp	r0, #4
10010c22:	d005      	beq.n	10010c30 <__aeabi_dmul+0x3a4>
10010c24:	1d18      	adds	r0, r3, #4
10010c26:	4298      	cmp	r0, r3
10010c28:	419b      	sbcs	r3, r3
10010c2a:	425b      	negs	r3, r3
10010c2c:	18ed      	adds	r5, r5, r3
10010c2e:	0003      	movs	r3, r0
10010c30:	01e8      	lsls	r0, r5, #7
10010c32:	d504      	bpl.n	10010c3e <__aeabi_dmul+0x3b2>
10010c34:	4a4f      	ldr	r2, [pc, #316]	; (10010d74 <__aeabi_dmul+0x4e8>)
10010c36:	4015      	ands	r5, r2
10010c38:	2280      	movs	r2, #128	; 0x80
10010c3a:	00d2      	lsls	r2, r2, #3
10010c3c:	18b2      	adds	r2, r6, r2
10010c3e:	484e      	ldr	r0, [pc, #312]	; (10010d78 <__aeabi_dmul+0x4ec>)
10010c40:	4282      	cmp	r2, r0
10010c42:	dd00      	ble.n	10010c46 <__aeabi_dmul+0x3ba>
10010c44:	e6e7      	b.n	10010a16 <__aeabi_dmul+0x18a>
10010c46:	2401      	movs	r4, #1
10010c48:	08db      	lsrs	r3, r3, #3
10010c4a:	0768      	lsls	r0, r5, #29
10010c4c:	4318      	orrs	r0, r3
10010c4e:	026d      	lsls	r5, r5, #9
10010c50:	0553      	lsls	r3, r2, #21
10010c52:	4680      	mov	r8, r0
10010c54:	0b2d      	lsrs	r5, r5, #12
10010c56:	0d5b      	lsrs	r3, r3, #21
10010c58:	400c      	ands	r4, r1
10010c5a:	e67d      	b.n	10010958 <__aeabi_dmul+0xcc>
10010c5c:	2280      	movs	r2, #128	; 0x80
10010c5e:	4659      	mov	r1, fp
10010c60:	0312      	lsls	r2, r2, #12
10010c62:	4211      	tst	r1, r2
10010c64:	d008      	beq.n	10010c78 <__aeabi_dmul+0x3ec>
10010c66:	4215      	tst	r5, r2
10010c68:	d106      	bne.n	10010c78 <__aeabi_dmul+0x3ec>
10010c6a:	4315      	orrs	r5, r2
10010c6c:	032d      	lsls	r5, r5, #12
10010c6e:	4698      	mov	r8, r3
10010c70:	0b2d      	lsrs	r5, r5, #12
10010c72:	464c      	mov	r4, r9
10010c74:	4b41      	ldr	r3, [pc, #260]	; (10010d7c <__aeabi_dmul+0x4f0>)
10010c76:	e66f      	b.n	10010958 <__aeabi_dmul+0xcc>
10010c78:	465d      	mov	r5, fp
10010c7a:	4315      	orrs	r5, r2
10010c7c:	032d      	lsls	r5, r5, #12
10010c7e:	0b2d      	lsrs	r5, r5, #12
10010c80:	4b3e      	ldr	r3, [pc, #248]	; (10010d7c <__aeabi_dmul+0x4f0>)
10010c82:	e669      	b.n	10010958 <__aeabi_dmul+0xcc>
10010c84:	0003      	movs	r3, r0
10010c86:	4655      	mov	r5, sl
10010c88:	3b28      	subs	r3, #40	; 0x28
10010c8a:	409d      	lsls	r5, r3
10010c8c:	2300      	movs	r3, #0
10010c8e:	e6bc      	b.n	10010a0a <__aeabi_dmul+0x17e>
10010c90:	4650      	mov	r0, sl
10010c92:	f000 fc37 	bl	10011504 <__clzsi2>
10010c96:	3020      	adds	r0, #32
10010c98:	e6a8      	b.n	100109ec <__aeabi_dmul+0x160>
10010c9a:	0003      	movs	r3, r0
10010c9c:	3b28      	subs	r3, #40	; 0x28
10010c9e:	409f      	lsls	r7, r3
10010ca0:	2300      	movs	r3, #0
10010ca2:	46bb      	mov	fp, r7
10010ca4:	4698      	mov	r8, r3
10010ca6:	e689      	b.n	100109bc <__aeabi_dmul+0x130>
10010ca8:	f000 fc2c 	bl	10011504 <__clzsi2>
10010cac:	3020      	adds	r0, #32
10010cae:	e673      	b.n	10010998 <__aeabi_dmul+0x10c>
10010cb0:	2401      	movs	r4, #1
10010cb2:	1aa6      	subs	r6, r4, r2
10010cb4:	2e38      	cmp	r6, #56	; 0x38
10010cb6:	dd07      	ble.n	10010cc8 <__aeabi_dmul+0x43c>
10010cb8:	2200      	movs	r2, #0
10010cba:	400c      	ands	r4, r1
10010cbc:	2300      	movs	r3, #0
10010cbe:	2500      	movs	r5, #0
10010cc0:	4690      	mov	r8, r2
10010cc2:	e649      	b.n	10010958 <__aeabi_dmul+0xcc>
10010cc4:	9e02      	ldr	r6, [sp, #8]
10010cc6:	e7a3      	b.n	10010c10 <__aeabi_dmul+0x384>
10010cc8:	2e1f      	cmp	r6, #31
10010cca:	dc20      	bgt.n	10010d0e <__aeabi_dmul+0x482>
10010ccc:	2220      	movs	r2, #32
10010cce:	002c      	movs	r4, r5
10010cd0:	0018      	movs	r0, r3
10010cd2:	1b92      	subs	r2, r2, r6
10010cd4:	40f0      	lsrs	r0, r6
10010cd6:	4094      	lsls	r4, r2
10010cd8:	4093      	lsls	r3, r2
10010cda:	4304      	orrs	r4, r0
10010cdc:	1e58      	subs	r0, r3, #1
10010cde:	4183      	sbcs	r3, r0
10010ce0:	431c      	orrs	r4, r3
10010ce2:	40f5      	lsrs	r5, r6
10010ce4:	0763      	lsls	r3, r4, #29
10010ce6:	d009      	beq.n	10010cfc <__aeabi_dmul+0x470>
10010ce8:	230f      	movs	r3, #15
10010cea:	4023      	ands	r3, r4
10010cec:	2b04      	cmp	r3, #4
10010cee:	d005      	beq.n	10010cfc <__aeabi_dmul+0x470>
10010cf0:	0023      	movs	r3, r4
10010cf2:	1d1c      	adds	r4, r3, #4
10010cf4:	429c      	cmp	r4, r3
10010cf6:	4192      	sbcs	r2, r2
10010cf8:	4252      	negs	r2, r2
10010cfa:	18ad      	adds	r5, r5, r2
10010cfc:	022b      	lsls	r3, r5, #8
10010cfe:	d51f      	bpl.n	10010d40 <__aeabi_dmul+0x4b4>
10010d00:	2401      	movs	r4, #1
10010d02:	2200      	movs	r2, #0
10010d04:	400c      	ands	r4, r1
10010d06:	2301      	movs	r3, #1
10010d08:	2500      	movs	r5, #0
10010d0a:	4690      	mov	r8, r2
10010d0c:	e624      	b.n	10010958 <__aeabi_dmul+0xcc>
10010d0e:	201f      	movs	r0, #31
10010d10:	002c      	movs	r4, r5
10010d12:	4240      	negs	r0, r0
10010d14:	1a82      	subs	r2, r0, r2
10010d16:	40d4      	lsrs	r4, r2
10010d18:	2e20      	cmp	r6, #32
10010d1a:	d01c      	beq.n	10010d56 <__aeabi_dmul+0x4ca>
10010d1c:	2240      	movs	r2, #64	; 0x40
10010d1e:	1b96      	subs	r6, r2, r6
10010d20:	40b5      	lsls	r5, r6
10010d22:	432b      	orrs	r3, r5
10010d24:	1e58      	subs	r0, r3, #1
10010d26:	4183      	sbcs	r3, r0
10010d28:	2007      	movs	r0, #7
10010d2a:	4323      	orrs	r3, r4
10010d2c:	4018      	ands	r0, r3
10010d2e:	2500      	movs	r5, #0
10010d30:	2800      	cmp	r0, #0
10010d32:	d009      	beq.n	10010d48 <__aeabi_dmul+0x4bc>
10010d34:	220f      	movs	r2, #15
10010d36:	2500      	movs	r5, #0
10010d38:	401a      	ands	r2, r3
10010d3a:	001c      	movs	r4, r3
10010d3c:	2a04      	cmp	r2, #4
10010d3e:	d1d8      	bne.n	10010cf2 <__aeabi_dmul+0x466>
10010d40:	0023      	movs	r3, r4
10010d42:	0768      	lsls	r0, r5, #29
10010d44:	026d      	lsls	r5, r5, #9
10010d46:	0b2d      	lsrs	r5, r5, #12
10010d48:	2401      	movs	r4, #1
10010d4a:	08db      	lsrs	r3, r3, #3
10010d4c:	4303      	orrs	r3, r0
10010d4e:	4698      	mov	r8, r3
10010d50:	400c      	ands	r4, r1
10010d52:	2300      	movs	r3, #0
10010d54:	e600      	b.n	10010958 <__aeabi_dmul+0xcc>
10010d56:	2500      	movs	r5, #0
10010d58:	e7e3      	b.n	10010d22 <__aeabi_dmul+0x496>
10010d5a:	2280      	movs	r2, #128	; 0x80
10010d5c:	2401      	movs	r4, #1
10010d5e:	0312      	lsls	r2, r2, #12
10010d60:	4315      	orrs	r5, r2
10010d62:	032d      	lsls	r5, r5, #12
10010d64:	4698      	mov	r8, r3
10010d66:	0b2d      	lsrs	r5, r5, #12
10010d68:	400c      	ands	r4, r1
10010d6a:	4b04      	ldr	r3, [pc, #16]	; (10010d7c <__aeabi_dmul+0x4f0>)
10010d6c:	e5f4      	b.n	10010958 <__aeabi_dmul+0xcc>
10010d6e:	46c0      	nop			; (mov r8, r8)
10010d70:	000003ff 	.word	0x000003ff
10010d74:	feffffff 	.word	0xfeffffff
10010d78:	000007fe 	.word	0x000007fe
10010d7c:	000007ff 	.word	0x000007ff

10010d80 <__aeabi_dsub>:
10010d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d82:	4657      	mov	r7, sl
10010d84:	464e      	mov	r6, r9
10010d86:	4645      	mov	r5, r8
10010d88:	b4e0      	push	{r5, r6, r7}
10010d8a:	000e      	movs	r6, r1
10010d8c:	0011      	movs	r1, r2
10010d8e:	0ff2      	lsrs	r2, r6, #31
10010d90:	4692      	mov	sl, r2
10010d92:	00c5      	lsls	r5, r0, #3
10010d94:	0f42      	lsrs	r2, r0, #29
10010d96:	0318      	lsls	r0, r3, #12
10010d98:	0337      	lsls	r7, r6, #12
10010d9a:	0074      	lsls	r4, r6, #1
10010d9c:	0a40      	lsrs	r0, r0, #9
10010d9e:	0f4e      	lsrs	r6, r1, #29
10010da0:	0a7f      	lsrs	r7, r7, #9
10010da2:	4330      	orrs	r0, r6
10010da4:	4ecf      	ldr	r6, [pc, #828]	; (100110e4 <__aeabi_dsub+0x364>)
10010da6:	4317      	orrs	r7, r2
10010da8:	005a      	lsls	r2, r3, #1
10010daa:	0d64      	lsrs	r4, r4, #21
10010dac:	0d52      	lsrs	r2, r2, #21
10010dae:	0fdb      	lsrs	r3, r3, #31
10010db0:	00c9      	lsls	r1, r1, #3
10010db2:	42b2      	cmp	r2, r6
10010db4:	d100      	bne.n	10010db8 <__aeabi_dsub+0x38>
10010db6:	e0e5      	b.n	10010f84 <__aeabi_dsub+0x204>
10010db8:	2601      	movs	r6, #1
10010dba:	4073      	eors	r3, r6
10010dbc:	1aa6      	subs	r6, r4, r2
10010dbe:	46b4      	mov	ip, r6
10010dc0:	4553      	cmp	r3, sl
10010dc2:	d100      	bne.n	10010dc6 <__aeabi_dsub+0x46>
10010dc4:	e0af      	b.n	10010f26 <__aeabi_dsub+0x1a6>
10010dc6:	2e00      	cmp	r6, #0
10010dc8:	dc00      	bgt.n	10010dcc <__aeabi_dsub+0x4c>
10010dca:	e10d      	b.n	10010fe8 <__aeabi_dsub+0x268>
10010dcc:	2a00      	cmp	r2, #0
10010dce:	d13a      	bne.n	10010e46 <__aeabi_dsub+0xc6>
10010dd0:	0003      	movs	r3, r0
10010dd2:	430b      	orrs	r3, r1
10010dd4:	d000      	beq.n	10010dd8 <__aeabi_dsub+0x58>
10010dd6:	e0e4      	b.n	10010fa2 <__aeabi_dsub+0x222>
10010dd8:	076b      	lsls	r3, r5, #29
10010dda:	d009      	beq.n	10010df0 <__aeabi_dsub+0x70>
10010ddc:	230f      	movs	r3, #15
10010dde:	402b      	ands	r3, r5
10010de0:	2b04      	cmp	r3, #4
10010de2:	d005      	beq.n	10010df0 <__aeabi_dsub+0x70>
10010de4:	1d2b      	adds	r3, r5, #4
10010de6:	42ab      	cmp	r3, r5
10010de8:	41ad      	sbcs	r5, r5
10010dea:	426d      	negs	r5, r5
10010dec:	197f      	adds	r7, r7, r5
10010dee:	001d      	movs	r5, r3
10010df0:	023b      	lsls	r3, r7, #8
10010df2:	d400      	bmi.n	10010df6 <__aeabi_dsub+0x76>
10010df4:	e088      	b.n	10010f08 <__aeabi_dsub+0x188>
10010df6:	4bbb      	ldr	r3, [pc, #748]	; (100110e4 <__aeabi_dsub+0x364>)
10010df8:	3401      	adds	r4, #1
10010dfa:	429c      	cmp	r4, r3
10010dfc:	d100      	bne.n	10010e00 <__aeabi_dsub+0x80>
10010dfe:	e110      	b.n	10011022 <__aeabi_dsub+0x2a2>
10010e00:	003a      	movs	r2, r7
10010e02:	4bb9      	ldr	r3, [pc, #740]	; (100110e8 <__aeabi_dsub+0x368>)
10010e04:	4651      	mov	r1, sl
10010e06:	401a      	ands	r2, r3
10010e08:	2301      	movs	r3, #1
10010e0a:	0750      	lsls	r0, r2, #29
10010e0c:	08ed      	lsrs	r5, r5, #3
10010e0e:	0252      	lsls	r2, r2, #9
10010e10:	0564      	lsls	r4, r4, #21
10010e12:	4305      	orrs	r5, r0
10010e14:	0b12      	lsrs	r2, r2, #12
10010e16:	0d64      	lsrs	r4, r4, #21
10010e18:	400b      	ands	r3, r1
10010e1a:	2100      	movs	r1, #0
10010e1c:	0028      	movs	r0, r5
10010e1e:	0312      	lsls	r2, r2, #12
10010e20:	0d0d      	lsrs	r5, r1, #20
10010e22:	0b12      	lsrs	r2, r2, #12
10010e24:	0564      	lsls	r4, r4, #21
10010e26:	052d      	lsls	r5, r5, #20
10010e28:	4315      	orrs	r5, r2
10010e2a:	0862      	lsrs	r2, r4, #1
10010e2c:	4caf      	ldr	r4, [pc, #700]	; (100110ec <__aeabi_dsub+0x36c>)
10010e2e:	07db      	lsls	r3, r3, #31
10010e30:	402c      	ands	r4, r5
10010e32:	4314      	orrs	r4, r2
10010e34:	0064      	lsls	r4, r4, #1
10010e36:	0864      	lsrs	r4, r4, #1
10010e38:	431c      	orrs	r4, r3
10010e3a:	0021      	movs	r1, r4
10010e3c:	bc1c      	pop	{r2, r3, r4}
10010e3e:	4690      	mov	r8, r2
10010e40:	4699      	mov	r9, r3
10010e42:	46a2      	mov	sl, r4
10010e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e46:	4ba7      	ldr	r3, [pc, #668]	; (100110e4 <__aeabi_dsub+0x364>)
10010e48:	429c      	cmp	r4, r3
10010e4a:	d0c5      	beq.n	10010dd8 <__aeabi_dsub+0x58>
10010e4c:	2380      	movs	r3, #128	; 0x80
10010e4e:	041b      	lsls	r3, r3, #16
10010e50:	4318      	orrs	r0, r3
10010e52:	4663      	mov	r3, ip
10010e54:	2b38      	cmp	r3, #56	; 0x38
10010e56:	dd00      	ble.n	10010e5a <__aeabi_dsub+0xda>
10010e58:	e0fd      	b.n	10011056 <__aeabi_dsub+0x2d6>
10010e5a:	2b1f      	cmp	r3, #31
10010e5c:	dd00      	ble.n	10010e60 <__aeabi_dsub+0xe0>
10010e5e:	e130      	b.n	100110c2 <__aeabi_dsub+0x342>
10010e60:	4662      	mov	r2, ip
10010e62:	2320      	movs	r3, #32
10010e64:	1a9b      	subs	r3, r3, r2
10010e66:	0002      	movs	r2, r0
10010e68:	409a      	lsls	r2, r3
10010e6a:	4666      	mov	r6, ip
10010e6c:	4690      	mov	r8, r2
10010e6e:	000a      	movs	r2, r1
10010e70:	4099      	lsls	r1, r3
10010e72:	40f2      	lsrs	r2, r6
10010e74:	4646      	mov	r6, r8
10010e76:	1e4b      	subs	r3, r1, #1
10010e78:	4199      	sbcs	r1, r3
10010e7a:	4332      	orrs	r2, r6
10010e7c:	4311      	orrs	r1, r2
10010e7e:	4663      	mov	r3, ip
10010e80:	0002      	movs	r2, r0
10010e82:	40da      	lsrs	r2, r3
10010e84:	1a69      	subs	r1, r5, r1
10010e86:	428d      	cmp	r5, r1
10010e88:	419b      	sbcs	r3, r3
10010e8a:	000d      	movs	r5, r1
10010e8c:	1aba      	subs	r2, r7, r2
10010e8e:	425b      	negs	r3, r3
10010e90:	1ad7      	subs	r7, r2, r3
10010e92:	023b      	lsls	r3, r7, #8
10010e94:	d535      	bpl.n	10010f02 <__aeabi_dsub+0x182>
10010e96:	027a      	lsls	r2, r7, #9
10010e98:	0a53      	lsrs	r3, r2, #9
10010e9a:	4698      	mov	r8, r3
10010e9c:	4643      	mov	r3, r8
10010e9e:	2b00      	cmp	r3, #0
10010ea0:	d100      	bne.n	10010ea4 <__aeabi_dsub+0x124>
10010ea2:	e0c4      	b.n	1001102e <__aeabi_dsub+0x2ae>
10010ea4:	4640      	mov	r0, r8
10010ea6:	f000 fb2d 	bl	10011504 <__clzsi2>
10010eaa:	0003      	movs	r3, r0
10010eac:	3b08      	subs	r3, #8
10010eae:	2b1f      	cmp	r3, #31
10010eb0:	dd00      	ble.n	10010eb4 <__aeabi_dsub+0x134>
10010eb2:	e0c5      	b.n	10011040 <__aeabi_dsub+0x2c0>
10010eb4:	2220      	movs	r2, #32
10010eb6:	0029      	movs	r1, r5
10010eb8:	1ad2      	subs	r2, r2, r3
10010eba:	4647      	mov	r7, r8
10010ebc:	40d1      	lsrs	r1, r2
10010ebe:	409f      	lsls	r7, r3
10010ec0:	000a      	movs	r2, r1
10010ec2:	409d      	lsls	r5, r3
10010ec4:	433a      	orrs	r2, r7
10010ec6:	429c      	cmp	r4, r3
10010ec8:	dd00      	ble.n	10010ecc <__aeabi_dsub+0x14c>
10010eca:	e0c0      	b.n	1001104e <__aeabi_dsub+0x2ce>
10010ecc:	1b1c      	subs	r4, r3, r4
10010ece:	1c63      	adds	r3, r4, #1
10010ed0:	2b1f      	cmp	r3, #31
10010ed2:	dd00      	ble.n	10010ed6 <__aeabi_dsub+0x156>
10010ed4:	e0e4      	b.n	100110a0 <__aeabi_dsub+0x320>
10010ed6:	2120      	movs	r1, #32
10010ed8:	0014      	movs	r4, r2
10010eda:	0028      	movs	r0, r5
10010edc:	1ac9      	subs	r1, r1, r3
10010ede:	40d8      	lsrs	r0, r3
10010ee0:	408c      	lsls	r4, r1
10010ee2:	408d      	lsls	r5, r1
10010ee4:	4304      	orrs	r4, r0
10010ee6:	40da      	lsrs	r2, r3
10010ee8:	1e68      	subs	r0, r5, #1
10010eea:	4185      	sbcs	r5, r0
10010eec:	0017      	movs	r7, r2
10010eee:	4325      	orrs	r5, r4
10010ef0:	2400      	movs	r4, #0
10010ef2:	e771      	b.n	10010dd8 <__aeabi_dsub+0x58>
10010ef4:	4642      	mov	r2, r8
10010ef6:	4663      	mov	r3, ip
10010ef8:	431a      	orrs	r2, r3
10010efa:	d100      	bne.n	10010efe <__aeabi_dsub+0x17e>
10010efc:	e24c      	b.n	10011398 <__aeabi_dsub+0x618>
10010efe:	4667      	mov	r7, ip
10010f00:	4645      	mov	r5, r8
10010f02:	076b      	lsls	r3, r5, #29
10010f04:	d000      	beq.n	10010f08 <__aeabi_dsub+0x188>
10010f06:	e769      	b.n	10010ddc <__aeabi_dsub+0x5c>
10010f08:	2301      	movs	r3, #1
10010f0a:	4651      	mov	r1, sl
10010f0c:	0778      	lsls	r0, r7, #29
10010f0e:	08ed      	lsrs	r5, r5, #3
10010f10:	08fa      	lsrs	r2, r7, #3
10010f12:	400b      	ands	r3, r1
10010f14:	4305      	orrs	r5, r0
10010f16:	4973      	ldr	r1, [pc, #460]	; (100110e4 <__aeabi_dsub+0x364>)
10010f18:	428c      	cmp	r4, r1
10010f1a:	d038      	beq.n	10010f8e <__aeabi_dsub+0x20e>
10010f1c:	0312      	lsls	r2, r2, #12
10010f1e:	0564      	lsls	r4, r4, #21
10010f20:	0b12      	lsrs	r2, r2, #12
10010f22:	0d64      	lsrs	r4, r4, #21
10010f24:	e779      	b.n	10010e1a <__aeabi_dsub+0x9a>
10010f26:	2e00      	cmp	r6, #0
10010f28:	dc00      	bgt.n	10010f2c <__aeabi_dsub+0x1ac>
10010f2a:	e09a      	b.n	10011062 <__aeabi_dsub+0x2e2>
10010f2c:	2a00      	cmp	r2, #0
10010f2e:	d047      	beq.n	10010fc0 <__aeabi_dsub+0x240>
10010f30:	4a6c      	ldr	r2, [pc, #432]	; (100110e4 <__aeabi_dsub+0x364>)
10010f32:	4294      	cmp	r4, r2
10010f34:	d100      	bne.n	10010f38 <__aeabi_dsub+0x1b8>
10010f36:	e74f      	b.n	10010dd8 <__aeabi_dsub+0x58>
10010f38:	2280      	movs	r2, #128	; 0x80
10010f3a:	0412      	lsls	r2, r2, #16
10010f3c:	4310      	orrs	r0, r2
10010f3e:	4662      	mov	r2, ip
10010f40:	2a38      	cmp	r2, #56	; 0x38
10010f42:	dc00      	bgt.n	10010f46 <__aeabi_dsub+0x1c6>
10010f44:	e108      	b.n	10011158 <__aeabi_dsub+0x3d8>
10010f46:	4301      	orrs	r1, r0
10010f48:	1e48      	subs	r0, r1, #1
10010f4a:	4181      	sbcs	r1, r0
10010f4c:	2200      	movs	r2, #0
10010f4e:	b2c9      	uxtb	r1, r1
10010f50:	1949      	adds	r1, r1, r5
10010f52:	19d2      	adds	r2, r2, r7
10010f54:	42a9      	cmp	r1, r5
10010f56:	41bf      	sbcs	r7, r7
10010f58:	000d      	movs	r5, r1
10010f5a:	427f      	negs	r7, r7
10010f5c:	18bf      	adds	r7, r7, r2
10010f5e:	023a      	lsls	r2, r7, #8
10010f60:	d400      	bmi.n	10010f64 <__aeabi_dsub+0x1e4>
10010f62:	e142      	b.n	100111ea <__aeabi_dsub+0x46a>
10010f64:	4a5f      	ldr	r2, [pc, #380]	; (100110e4 <__aeabi_dsub+0x364>)
10010f66:	3401      	adds	r4, #1
10010f68:	4294      	cmp	r4, r2
10010f6a:	d100      	bne.n	10010f6e <__aeabi_dsub+0x1ee>
10010f6c:	e14e      	b.n	1001120c <__aeabi_dsub+0x48c>
10010f6e:	2001      	movs	r0, #1
10010f70:	4a5d      	ldr	r2, [pc, #372]	; (100110e8 <__aeabi_dsub+0x368>)
10010f72:	0869      	lsrs	r1, r5, #1
10010f74:	403a      	ands	r2, r7
10010f76:	4028      	ands	r0, r5
10010f78:	4308      	orrs	r0, r1
10010f7a:	07d5      	lsls	r5, r2, #31
10010f7c:	4305      	orrs	r5, r0
10010f7e:	0857      	lsrs	r7, r2, #1
10010f80:	469a      	mov	sl, r3
10010f82:	e729      	b.n	10010dd8 <__aeabi_dsub+0x58>
10010f84:	0006      	movs	r6, r0
10010f86:	430e      	orrs	r6, r1
10010f88:	d000      	beq.n	10010f8c <__aeabi_dsub+0x20c>
10010f8a:	e717      	b.n	10010dbc <__aeabi_dsub+0x3c>
10010f8c:	e714      	b.n	10010db8 <__aeabi_dsub+0x38>
10010f8e:	0029      	movs	r1, r5
10010f90:	4311      	orrs	r1, r2
10010f92:	d100      	bne.n	10010f96 <__aeabi_dsub+0x216>
10010f94:	e1f9      	b.n	1001138a <__aeabi_dsub+0x60a>
10010f96:	2180      	movs	r1, #128	; 0x80
10010f98:	0309      	lsls	r1, r1, #12
10010f9a:	430a      	orrs	r2, r1
10010f9c:	0312      	lsls	r2, r2, #12
10010f9e:	0b12      	lsrs	r2, r2, #12
10010fa0:	e73b      	b.n	10010e1a <__aeabi_dsub+0x9a>
10010fa2:	2301      	movs	r3, #1
10010fa4:	425b      	negs	r3, r3
10010fa6:	4698      	mov	r8, r3
10010fa8:	44c4      	add	ip, r8
10010faa:	4663      	mov	r3, ip
10010fac:	2b00      	cmp	r3, #0
10010fae:	d172      	bne.n	10011096 <__aeabi_dsub+0x316>
10010fb0:	1a69      	subs	r1, r5, r1
10010fb2:	428d      	cmp	r5, r1
10010fb4:	419b      	sbcs	r3, r3
10010fb6:	1a3f      	subs	r7, r7, r0
10010fb8:	425b      	negs	r3, r3
10010fba:	1aff      	subs	r7, r7, r3
10010fbc:	000d      	movs	r5, r1
10010fbe:	e768      	b.n	10010e92 <__aeabi_dsub+0x112>
10010fc0:	0002      	movs	r2, r0
10010fc2:	430a      	orrs	r2, r1
10010fc4:	d100      	bne.n	10010fc8 <__aeabi_dsub+0x248>
10010fc6:	e707      	b.n	10010dd8 <__aeabi_dsub+0x58>
10010fc8:	2201      	movs	r2, #1
10010fca:	4252      	negs	r2, r2
10010fcc:	4690      	mov	r8, r2
10010fce:	44c4      	add	ip, r8
10010fd0:	4662      	mov	r2, ip
10010fd2:	2a00      	cmp	r2, #0
10010fd4:	d000      	beq.n	10010fd8 <__aeabi_dsub+0x258>
10010fd6:	e0e6      	b.n	100111a6 <__aeabi_dsub+0x426>
10010fd8:	1869      	adds	r1, r5, r1
10010fda:	42a9      	cmp	r1, r5
10010fdc:	41b6      	sbcs	r6, r6
10010fde:	183f      	adds	r7, r7, r0
10010fe0:	4276      	negs	r6, r6
10010fe2:	19f7      	adds	r7, r6, r7
10010fe4:	000d      	movs	r5, r1
10010fe6:	e7ba      	b.n	10010f5e <__aeabi_dsub+0x1de>
10010fe8:	2e00      	cmp	r6, #0
10010fea:	d000      	beq.n	10010fee <__aeabi_dsub+0x26e>
10010fec:	e080      	b.n	100110f0 <__aeabi_dsub+0x370>
10010fee:	1c62      	adds	r2, r4, #1
10010ff0:	0552      	lsls	r2, r2, #21
10010ff2:	0d52      	lsrs	r2, r2, #21
10010ff4:	2a01      	cmp	r2, #1
10010ff6:	dc00      	bgt.n	10010ffa <__aeabi_dsub+0x27a>
10010ff8:	e0f9      	b.n	100111ee <__aeabi_dsub+0x46e>
10010ffa:	1a6a      	subs	r2, r5, r1
10010ffc:	4691      	mov	r9, r2
10010ffe:	454d      	cmp	r5, r9
10011000:	41b6      	sbcs	r6, r6
10011002:	1a3a      	subs	r2, r7, r0
10011004:	4276      	negs	r6, r6
10011006:	1b92      	subs	r2, r2, r6
10011008:	4690      	mov	r8, r2
1001100a:	0212      	lsls	r2, r2, #8
1001100c:	d400      	bmi.n	10011010 <__aeabi_dsub+0x290>
1001100e:	e099      	b.n	10011144 <__aeabi_dsub+0x3c4>
10011010:	1b4d      	subs	r5, r1, r5
10011012:	42a9      	cmp	r1, r5
10011014:	4189      	sbcs	r1, r1
10011016:	1bc7      	subs	r7, r0, r7
10011018:	4249      	negs	r1, r1
1001101a:	1a7a      	subs	r2, r7, r1
1001101c:	4690      	mov	r8, r2
1001101e:	469a      	mov	sl, r3
10011020:	e73c      	b.n	10010e9c <__aeabi_dsub+0x11c>
10011022:	4652      	mov	r2, sl
10011024:	2301      	movs	r3, #1
10011026:	2500      	movs	r5, #0
10011028:	4013      	ands	r3, r2
1001102a:	2200      	movs	r2, #0
1001102c:	e6f5      	b.n	10010e1a <__aeabi_dsub+0x9a>
1001102e:	0028      	movs	r0, r5
10011030:	f000 fa68 	bl	10011504 <__clzsi2>
10011034:	3020      	adds	r0, #32
10011036:	0003      	movs	r3, r0
10011038:	3b08      	subs	r3, #8
1001103a:	2b1f      	cmp	r3, #31
1001103c:	dc00      	bgt.n	10011040 <__aeabi_dsub+0x2c0>
1001103e:	e739      	b.n	10010eb4 <__aeabi_dsub+0x134>
10011040:	002a      	movs	r2, r5
10011042:	3828      	subs	r0, #40	; 0x28
10011044:	4082      	lsls	r2, r0
10011046:	2500      	movs	r5, #0
10011048:	429c      	cmp	r4, r3
1001104a:	dc00      	bgt.n	1001104e <__aeabi_dsub+0x2ce>
1001104c:	e73e      	b.n	10010ecc <__aeabi_dsub+0x14c>
1001104e:	4f26      	ldr	r7, [pc, #152]	; (100110e8 <__aeabi_dsub+0x368>)
10011050:	1ae4      	subs	r4, r4, r3
10011052:	4017      	ands	r7, r2
10011054:	e6c0      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011056:	4301      	orrs	r1, r0
10011058:	1e48      	subs	r0, r1, #1
1001105a:	4181      	sbcs	r1, r0
1001105c:	2200      	movs	r2, #0
1001105e:	b2c9      	uxtb	r1, r1
10011060:	e710      	b.n	10010e84 <__aeabi_dsub+0x104>
10011062:	2e00      	cmp	r6, #0
10011064:	d000      	beq.n	10011068 <__aeabi_dsub+0x2e8>
10011066:	e0f1      	b.n	1001124c <__aeabi_dsub+0x4cc>
10011068:	1c62      	adds	r2, r4, #1
1001106a:	4694      	mov	ip, r2
1001106c:	0552      	lsls	r2, r2, #21
1001106e:	0d52      	lsrs	r2, r2, #21
10011070:	2a01      	cmp	r2, #1
10011072:	dc00      	bgt.n	10011076 <__aeabi_dsub+0x2f6>
10011074:	e0a0      	b.n	100111b8 <__aeabi_dsub+0x438>
10011076:	4a1b      	ldr	r2, [pc, #108]	; (100110e4 <__aeabi_dsub+0x364>)
10011078:	4594      	cmp	ip, r2
1001107a:	d100      	bne.n	1001107e <__aeabi_dsub+0x2fe>
1001107c:	e0c5      	b.n	1001120a <__aeabi_dsub+0x48a>
1001107e:	1869      	adds	r1, r5, r1
10011080:	42a9      	cmp	r1, r5
10011082:	4192      	sbcs	r2, r2
10011084:	183f      	adds	r7, r7, r0
10011086:	4252      	negs	r2, r2
10011088:	19d2      	adds	r2, r2, r7
1001108a:	0849      	lsrs	r1, r1, #1
1001108c:	07d5      	lsls	r5, r2, #31
1001108e:	430d      	orrs	r5, r1
10011090:	0857      	lsrs	r7, r2, #1
10011092:	4664      	mov	r4, ip
10011094:	e6a0      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011096:	4b13      	ldr	r3, [pc, #76]	; (100110e4 <__aeabi_dsub+0x364>)
10011098:	429c      	cmp	r4, r3
1001109a:	d000      	beq.n	1001109e <__aeabi_dsub+0x31e>
1001109c:	e6d9      	b.n	10010e52 <__aeabi_dsub+0xd2>
1001109e:	e69b      	b.n	10010dd8 <__aeabi_dsub+0x58>
100110a0:	0011      	movs	r1, r2
100110a2:	3c1f      	subs	r4, #31
100110a4:	40e1      	lsrs	r1, r4
100110a6:	000c      	movs	r4, r1
100110a8:	2b20      	cmp	r3, #32
100110aa:	d100      	bne.n	100110ae <__aeabi_dsub+0x32e>
100110ac:	e080      	b.n	100111b0 <__aeabi_dsub+0x430>
100110ae:	2140      	movs	r1, #64	; 0x40
100110b0:	1acb      	subs	r3, r1, r3
100110b2:	409a      	lsls	r2, r3
100110b4:	4315      	orrs	r5, r2
100110b6:	1e6a      	subs	r2, r5, #1
100110b8:	4195      	sbcs	r5, r2
100110ba:	2700      	movs	r7, #0
100110bc:	4325      	orrs	r5, r4
100110be:	2400      	movs	r4, #0
100110c0:	e71f      	b.n	10010f02 <__aeabi_dsub+0x182>
100110c2:	4663      	mov	r3, ip
100110c4:	0002      	movs	r2, r0
100110c6:	3b20      	subs	r3, #32
100110c8:	40da      	lsrs	r2, r3
100110ca:	4663      	mov	r3, ip
100110cc:	2b20      	cmp	r3, #32
100110ce:	d071      	beq.n	100111b4 <__aeabi_dsub+0x434>
100110d0:	2340      	movs	r3, #64	; 0x40
100110d2:	4666      	mov	r6, ip
100110d4:	1b9b      	subs	r3, r3, r6
100110d6:	4098      	lsls	r0, r3
100110d8:	4301      	orrs	r1, r0
100110da:	1e48      	subs	r0, r1, #1
100110dc:	4181      	sbcs	r1, r0
100110de:	4311      	orrs	r1, r2
100110e0:	2200      	movs	r2, #0
100110e2:	e6cf      	b.n	10010e84 <__aeabi_dsub+0x104>
100110e4:	000007ff 	.word	0x000007ff
100110e8:	ff7fffff 	.word	0xff7fffff
100110ec:	800fffff 	.word	0x800fffff
100110f0:	2c00      	cmp	r4, #0
100110f2:	d048      	beq.n	10011186 <__aeabi_dsub+0x406>
100110f4:	4cca      	ldr	r4, [pc, #808]	; (10011420 <__aeabi_dsub+0x6a0>)
100110f6:	42a2      	cmp	r2, r4
100110f8:	d100      	bne.n	100110fc <__aeabi_dsub+0x37c>
100110fa:	e0a2      	b.n	10011242 <__aeabi_dsub+0x4c2>
100110fc:	4274      	negs	r4, r6
100110fe:	46a1      	mov	r9, r4
10011100:	2480      	movs	r4, #128	; 0x80
10011102:	0424      	lsls	r4, r4, #16
10011104:	4327      	orrs	r7, r4
10011106:	464c      	mov	r4, r9
10011108:	2c38      	cmp	r4, #56	; 0x38
1001110a:	dd00      	ble.n	1001110e <__aeabi_dsub+0x38e>
1001110c:	e0db      	b.n	100112c6 <__aeabi_dsub+0x546>
1001110e:	2c1f      	cmp	r4, #31
10011110:	dd00      	ble.n	10011114 <__aeabi_dsub+0x394>
10011112:	e144      	b.n	1001139e <__aeabi_dsub+0x61e>
10011114:	464e      	mov	r6, r9
10011116:	2420      	movs	r4, #32
10011118:	1ba4      	subs	r4, r4, r6
1001111a:	003e      	movs	r6, r7
1001111c:	40a6      	lsls	r6, r4
1001111e:	46a2      	mov	sl, r4
10011120:	46b0      	mov	r8, r6
10011122:	464c      	mov	r4, r9
10011124:	002e      	movs	r6, r5
10011126:	40e6      	lsrs	r6, r4
10011128:	46b4      	mov	ip, r6
1001112a:	4646      	mov	r6, r8
1001112c:	4664      	mov	r4, ip
1001112e:	4326      	orrs	r6, r4
10011130:	4654      	mov	r4, sl
10011132:	40a5      	lsls	r5, r4
10011134:	1e6c      	subs	r4, r5, #1
10011136:	41a5      	sbcs	r5, r4
10011138:	0034      	movs	r4, r6
1001113a:	432c      	orrs	r4, r5
1001113c:	464d      	mov	r5, r9
1001113e:	40ef      	lsrs	r7, r5
10011140:	1b0d      	subs	r5, r1, r4
10011142:	e028      	b.n	10011196 <__aeabi_dsub+0x416>
10011144:	464a      	mov	r2, r9
10011146:	4643      	mov	r3, r8
10011148:	464d      	mov	r5, r9
1001114a:	431a      	orrs	r2, r3
1001114c:	d000      	beq.n	10011150 <__aeabi_dsub+0x3d0>
1001114e:	e6a5      	b.n	10010e9c <__aeabi_dsub+0x11c>
10011150:	2300      	movs	r3, #0
10011152:	2400      	movs	r4, #0
10011154:	2500      	movs	r5, #0
10011156:	e6de      	b.n	10010f16 <__aeabi_dsub+0x196>
10011158:	2a1f      	cmp	r2, #31
1001115a:	dc5a      	bgt.n	10011212 <__aeabi_dsub+0x492>
1001115c:	4666      	mov	r6, ip
1001115e:	2220      	movs	r2, #32
10011160:	1b92      	subs	r2, r2, r6
10011162:	0006      	movs	r6, r0
10011164:	4096      	lsls	r6, r2
10011166:	4691      	mov	r9, r2
10011168:	46b0      	mov	r8, r6
1001116a:	4662      	mov	r2, ip
1001116c:	000e      	movs	r6, r1
1001116e:	40d6      	lsrs	r6, r2
10011170:	4642      	mov	r2, r8
10011172:	4316      	orrs	r6, r2
10011174:	464a      	mov	r2, r9
10011176:	4091      	lsls	r1, r2
10011178:	1e4a      	subs	r2, r1, #1
1001117a:	4191      	sbcs	r1, r2
1001117c:	0002      	movs	r2, r0
1001117e:	4660      	mov	r0, ip
10011180:	4331      	orrs	r1, r6
10011182:	40c2      	lsrs	r2, r0
10011184:	e6e4      	b.n	10010f50 <__aeabi_dsub+0x1d0>
10011186:	003c      	movs	r4, r7
10011188:	432c      	orrs	r4, r5
1001118a:	d05a      	beq.n	10011242 <__aeabi_dsub+0x4c2>
1001118c:	43f4      	mvns	r4, r6
1001118e:	46a1      	mov	r9, r4
10011190:	2c00      	cmp	r4, #0
10011192:	d152      	bne.n	1001123a <__aeabi_dsub+0x4ba>
10011194:	1b4d      	subs	r5, r1, r5
10011196:	42a9      	cmp	r1, r5
10011198:	4189      	sbcs	r1, r1
1001119a:	1bc7      	subs	r7, r0, r7
1001119c:	4249      	negs	r1, r1
1001119e:	1a7f      	subs	r7, r7, r1
100111a0:	0014      	movs	r4, r2
100111a2:	469a      	mov	sl, r3
100111a4:	e675      	b.n	10010e92 <__aeabi_dsub+0x112>
100111a6:	4a9e      	ldr	r2, [pc, #632]	; (10011420 <__aeabi_dsub+0x6a0>)
100111a8:	4294      	cmp	r4, r2
100111aa:	d000      	beq.n	100111ae <__aeabi_dsub+0x42e>
100111ac:	e6c7      	b.n	10010f3e <__aeabi_dsub+0x1be>
100111ae:	e613      	b.n	10010dd8 <__aeabi_dsub+0x58>
100111b0:	2200      	movs	r2, #0
100111b2:	e77f      	b.n	100110b4 <__aeabi_dsub+0x334>
100111b4:	2000      	movs	r0, #0
100111b6:	e78f      	b.n	100110d8 <__aeabi_dsub+0x358>
100111b8:	2c00      	cmp	r4, #0
100111ba:	d000      	beq.n	100111be <__aeabi_dsub+0x43e>
100111bc:	e0c8      	b.n	10011350 <__aeabi_dsub+0x5d0>
100111be:	003b      	movs	r3, r7
100111c0:	432b      	orrs	r3, r5
100111c2:	d100      	bne.n	100111c6 <__aeabi_dsub+0x446>
100111c4:	e10f      	b.n	100113e6 <__aeabi_dsub+0x666>
100111c6:	0003      	movs	r3, r0
100111c8:	430b      	orrs	r3, r1
100111ca:	d100      	bne.n	100111ce <__aeabi_dsub+0x44e>
100111cc:	e604      	b.n	10010dd8 <__aeabi_dsub+0x58>
100111ce:	1869      	adds	r1, r5, r1
100111d0:	42a9      	cmp	r1, r5
100111d2:	419b      	sbcs	r3, r3
100111d4:	183f      	adds	r7, r7, r0
100111d6:	425b      	negs	r3, r3
100111d8:	19df      	adds	r7, r3, r7
100111da:	023b      	lsls	r3, r7, #8
100111dc:	d400      	bmi.n	100111e0 <__aeabi_dsub+0x460>
100111de:	e11a      	b.n	10011416 <__aeabi_dsub+0x696>
100111e0:	4b90      	ldr	r3, [pc, #576]	; (10011424 <__aeabi_dsub+0x6a4>)
100111e2:	000d      	movs	r5, r1
100111e4:	401f      	ands	r7, r3
100111e6:	4664      	mov	r4, ip
100111e8:	e5f6      	b.n	10010dd8 <__aeabi_dsub+0x58>
100111ea:	469a      	mov	sl, r3
100111ec:	e689      	b.n	10010f02 <__aeabi_dsub+0x182>
100111ee:	003a      	movs	r2, r7
100111f0:	432a      	orrs	r2, r5
100111f2:	2c00      	cmp	r4, #0
100111f4:	d15c      	bne.n	100112b0 <__aeabi_dsub+0x530>
100111f6:	2a00      	cmp	r2, #0
100111f8:	d175      	bne.n	100112e6 <__aeabi_dsub+0x566>
100111fa:	0002      	movs	r2, r0
100111fc:	430a      	orrs	r2, r1
100111fe:	d100      	bne.n	10011202 <__aeabi_dsub+0x482>
10011200:	e0ca      	b.n	10011398 <__aeabi_dsub+0x618>
10011202:	0007      	movs	r7, r0
10011204:	000d      	movs	r5, r1
10011206:	469a      	mov	sl, r3
10011208:	e5e6      	b.n	10010dd8 <__aeabi_dsub+0x58>
1001120a:	4664      	mov	r4, ip
1001120c:	2200      	movs	r2, #0
1001120e:	2500      	movs	r5, #0
10011210:	e681      	b.n	10010f16 <__aeabi_dsub+0x196>
10011212:	4662      	mov	r2, ip
10011214:	0006      	movs	r6, r0
10011216:	3a20      	subs	r2, #32
10011218:	40d6      	lsrs	r6, r2
1001121a:	4662      	mov	r2, ip
1001121c:	46b0      	mov	r8, r6
1001121e:	2a20      	cmp	r2, #32
10011220:	d100      	bne.n	10011224 <__aeabi_dsub+0x4a4>
10011222:	e0b7      	b.n	10011394 <__aeabi_dsub+0x614>
10011224:	2240      	movs	r2, #64	; 0x40
10011226:	4666      	mov	r6, ip
10011228:	1b92      	subs	r2, r2, r6
1001122a:	4090      	lsls	r0, r2
1001122c:	4301      	orrs	r1, r0
1001122e:	4642      	mov	r2, r8
10011230:	1e48      	subs	r0, r1, #1
10011232:	4181      	sbcs	r1, r0
10011234:	4311      	orrs	r1, r2
10011236:	2200      	movs	r2, #0
10011238:	e68a      	b.n	10010f50 <__aeabi_dsub+0x1d0>
1001123a:	4c79      	ldr	r4, [pc, #484]	; (10011420 <__aeabi_dsub+0x6a0>)
1001123c:	42a2      	cmp	r2, r4
1001123e:	d000      	beq.n	10011242 <__aeabi_dsub+0x4c2>
10011240:	e761      	b.n	10011106 <__aeabi_dsub+0x386>
10011242:	0007      	movs	r7, r0
10011244:	000d      	movs	r5, r1
10011246:	0014      	movs	r4, r2
10011248:	469a      	mov	sl, r3
1001124a:	e5c5      	b.n	10010dd8 <__aeabi_dsub+0x58>
1001124c:	2c00      	cmp	r4, #0
1001124e:	d141      	bne.n	100112d4 <__aeabi_dsub+0x554>
10011250:	003c      	movs	r4, r7
10011252:	432c      	orrs	r4, r5
10011254:	d078      	beq.n	10011348 <__aeabi_dsub+0x5c8>
10011256:	43f4      	mvns	r4, r6
10011258:	46a1      	mov	r9, r4
1001125a:	2c00      	cmp	r4, #0
1001125c:	d020      	beq.n	100112a0 <__aeabi_dsub+0x520>
1001125e:	4c70      	ldr	r4, [pc, #448]	; (10011420 <__aeabi_dsub+0x6a0>)
10011260:	42a2      	cmp	r2, r4
10011262:	d071      	beq.n	10011348 <__aeabi_dsub+0x5c8>
10011264:	464c      	mov	r4, r9
10011266:	2c38      	cmp	r4, #56	; 0x38
10011268:	dd00      	ble.n	1001126c <__aeabi_dsub+0x4ec>
1001126a:	e0b2      	b.n	100113d2 <__aeabi_dsub+0x652>
1001126c:	2c1f      	cmp	r4, #31
1001126e:	dd00      	ble.n	10011272 <__aeabi_dsub+0x4f2>
10011270:	e0bc      	b.n	100113ec <__aeabi_dsub+0x66c>
10011272:	2620      	movs	r6, #32
10011274:	1b34      	subs	r4, r6, r4
10011276:	46a2      	mov	sl, r4
10011278:	003c      	movs	r4, r7
1001127a:	4656      	mov	r6, sl
1001127c:	40b4      	lsls	r4, r6
1001127e:	464e      	mov	r6, r9
10011280:	46a0      	mov	r8, r4
10011282:	002c      	movs	r4, r5
10011284:	40f4      	lsrs	r4, r6
10011286:	46a4      	mov	ip, r4
10011288:	4644      	mov	r4, r8
1001128a:	4666      	mov	r6, ip
1001128c:	4334      	orrs	r4, r6
1001128e:	46a4      	mov	ip, r4
10011290:	4654      	mov	r4, sl
10011292:	40a5      	lsls	r5, r4
10011294:	4664      	mov	r4, ip
10011296:	1e6e      	subs	r6, r5, #1
10011298:	41b5      	sbcs	r5, r6
1001129a:	4325      	orrs	r5, r4
1001129c:	464c      	mov	r4, r9
1001129e:	40e7      	lsrs	r7, r4
100112a0:	186d      	adds	r5, r5, r1
100112a2:	428d      	cmp	r5, r1
100112a4:	4189      	sbcs	r1, r1
100112a6:	183f      	adds	r7, r7, r0
100112a8:	4249      	negs	r1, r1
100112aa:	19cf      	adds	r7, r1, r7
100112ac:	0014      	movs	r4, r2
100112ae:	e656      	b.n	10010f5e <__aeabi_dsub+0x1de>
100112b0:	2a00      	cmp	r2, #0
100112b2:	d12f      	bne.n	10011314 <__aeabi_dsub+0x594>
100112b4:	0002      	movs	r2, r0
100112b6:	430a      	orrs	r2, r1
100112b8:	d100      	bne.n	100112bc <__aeabi_dsub+0x53c>
100112ba:	e084      	b.n	100113c6 <__aeabi_dsub+0x646>
100112bc:	0007      	movs	r7, r0
100112be:	000d      	movs	r5, r1
100112c0:	469a      	mov	sl, r3
100112c2:	4c57      	ldr	r4, [pc, #348]	; (10011420 <__aeabi_dsub+0x6a0>)
100112c4:	e588      	b.n	10010dd8 <__aeabi_dsub+0x58>
100112c6:	433d      	orrs	r5, r7
100112c8:	1e6f      	subs	r7, r5, #1
100112ca:	41bd      	sbcs	r5, r7
100112cc:	b2ec      	uxtb	r4, r5
100112ce:	2700      	movs	r7, #0
100112d0:	1b0d      	subs	r5, r1, r4
100112d2:	e760      	b.n	10011196 <__aeabi_dsub+0x416>
100112d4:	4c52      	ldr	r4, [pc, #328]	; (10011420 <__aeabi_dsub+0x6a0>)
100112d6:	42a2      	cmp	r2, r4
100112d8:	d036      	beq.n	10011348 <__aeabi_dsub+0x5c8>
100112da:	4274      	negs	r4, r6
100112dc:	2680      	movs	r6, #128	; 0x80
100112de:	0436      	lsls	r6, r6, #16
100112e0:	46a1      	mov	r9, r4
100112e2:	4337      	orrs	r7, r6
100112e4:	e7be      	b.n	10011264 <__aeabi_dsub+0x4e4>
100112e6:	0002      	movs	r2, r0
100112e8:	430a      	orrs	r2, r1
100112ea:	d100      	bne.n	100112ee <__aeabi_dsub+0x56e>
100112ec:	e574      	b.n	10010dd8 <__aeabi_dsub+0x58>
100112ee:	1a6a      	subs	r2, r5, r1
100112f0:	4690      	mov	r8, r2
100112f2:	4545      	cmp	r5, r8
100112f4:	41b6      	sbcs	r6, r6
100112f6:	1a3a      	subs	r2, r7, r0
100112f8:	4276      	negs	r6, r6
100112fa:	1b92      	subs	r2, r2, r6
100112fc:	4694      	mov	ip, r2
100112fe:	0212      	lsls	r2, r2, #8
10011300:	d400      	bmi.n	10011304 <__aeabi_dsub+0x584>
10011302:	e5f7      	b.n	10010ef4 <__aeabi_dsub+0x174>
10011304:	1b4d      	subs	r5, r1, r5
10011306:	42a9      	cmp	r1, r5
10011308:	4189      	sbcs	r1, r1
1001130a:	1bc7      	subs	r7, r0, r7
1001130c:	4249      	negs	r1, r1
1001130e:	1a7f      	subs	r7, r7, r1
10011310:	469a      	mov	sl, r3
10011312:	e561      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011314:	0002      	movs	r2, r0
10011316:	430a      	orrs	r2, r1
10011318:	d03a      	beq.n	10011390 <__aeabi_dsub+0x610>
1001131a:	08ed      	lsrs	r5, r5, #3
1001131c:	077c      	lsls	r4, r7, #29
1001131e:	432c      	orrs	r4, r5
10011320:	2580      	movs	r5, #128	; 0x80
10011322:	08fa      	lsrs	r2, r7, #3
10011324:	032d      	lsls	r5, r5, #12
10011326:	422a      	tst	r2, r5
10011328:	d008      	beq.n	1001133c <__aeabi_dsub+0x5bc>
1001132a:	08c7      	lsrs	r7, r0, #3
1001132c:	422f      	tst	r7, r5
1001132e:	d105      	bne.n	1001133c <__aeabi_dsub+0x5bc>
10011330:	0745      	lsls	r5, r0, #29
10011332:	002c      	movs	r4, r5
10011334:	003a      	movs	r2, r7
10011336:	469a      	mov	sl, r3
10011338:	08c9      	lsrs	r1, r1, #3
1001133a:	430c      	orrs	r4, r1
1001133c:	0f67      	lsrs	r7, r4, #29
1001133e:	00d2      	lsls	r2, r2, #3
10011340:	00e5      	lsls	r5, r4, #3
10011342:	4317      	orrs	r7, r2
10011344:	4c36      	ldr	r4, [pc, #216]	; (10011420 <__aeabi_dsub+0x6a0>)
10011346:	e547      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011348:	0007      	movs	r7, r0
1001134a:	000d      	movs	r5, r1
1001134c:	0014      	movs	r4, r2
1001134e:	e543      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011350:	003a      	movs	r2, r7
10011352:	432a      	orrs	r2, r5
10011354:	d043      	beq.n	100113de <__aeabi_dsub+0x65e>
10011356:	0002      	movs	r2, r0
10011358:	430a      	orrs	r2, r1
1001135a:	d019      	beq.n	10011390 <__aeabi_dsub+0x610>
1001135c:	08ed      	lsrs	r5, r5, #3
1001135e:	077c      	lsls	r4, r7, #29
10011360:	432c      	orrs	r4, r5
10011362:	2580      	movs	r5, #128	; 0x80
10011364:	08fa      	lsrs	r2, r7, #3
10011366:	032d      	lsls	r5, r5, #12
10011368:	422a      	tst	r2, r5
1001136a:	d007      	beq.n	1001137c <__aeabi_dsub+0x5fc>
1001136c:	08c6      	lsrs	r6, r0, #3
1001136e:	422e      	tst	r6, r5
10011370:	d104      	bne.n	1001137c <__aeabi_dsub+0x5fc>
10011372:	0747      	lsls	r7, r0, #29
10011374:	003c      	movs	r4, r7
10011376:	0032      	movs	r2, r6
10011378:	08c9      	lsrs	r1, r1, #3
1001137a:	430c      	orrs	r4, r1
1001137c:	00d7      	lsls	r7, r2, #3
1001137e:	0f62      	lsrs	r2, r4, #29
10011380:	00e5      	lsls	r5, r4, #3
10011382:	4317      	orrs	r7, r2
10011384:	469a      	mov	sl, r3
10011386:	4c26      	ldr	r4, [pc, #152]	; (10011420 <__aeabi_dsub+0x6a0>)
10011388:	e526      	b.n	10010dd8 <__aeabi_dsub+0x58>
1001138a:	2200      	movs	r2, #0
1001138c:	2500      	movs	r5, #0
1001138e:	e544      	b.n	10010e1a <__aeabi_dsub+0x9a>
10011390:	4c23      	ldr	r4, [pc, #140]	; (10011420 <__aeabi_dsub+0x6a0>)
10011392:	e521      	b.n	10010dd8 <__aeabi_dsub+0x58>
10011394:	2000      	movs	r0, #0
10011396:	e749      	b.n	1001122c <__aeabi_dsub+0x4ac>
10011398:	2300      	movs	r3, #0
1001139a:	2500      	movs	r5, #0
1001139c:	e5bb      	b.n	10010f16 <__aeabi_dsub+0x196>
1001139e:	464c      	mov	r4, r9
100113a0:	003e      	movs	r6, r7
100113a2:	3c20      	subs	r4, #32
100113a4:	40e6      	lsrs	r6, r4
100113a6:	464c      	mov	r4, r9
100113a8:	46b4      	mov	ip, r6
100113aa:	2c20      	cmp	r4, #32
100113ac:	d031      	beq.n	10011412 <__aeabi_dsub+0x692>
100113ae:	2440      	movs	r4, #64	; 0x40
100113b0:	464e      	mov	r6, r9
100113b2:	1ba6      	subs	r6, r4, r6
100113b4:	40b7      	lsls	r7, r6
100113b6:	433d      	orrs	r5, r7
100113b8:	1e6c      	subs	r4, r5, #1
100113ba:	41a5      	sbcs	r5, r4
100113bc:	4664      	mov	r4, ip
100113be:	432c      	orrs	r4, r5
100113c0:	2700      	movs	r7, #0
100113c2:	1b0d      	subs	r5, r1, r4
100113c4:	e6e7      	b.n	10011196 <__aeabi_dsub+0x416>
100113c6:	2280      	movs	r2, #128	; 0x80
100113c8:	2300      	movs	r3, #0
100113ca:	0312      	lsls	r2, r2, #12
100113cc:	4c14      	ldr	r4, [pc, #80]	; (10011420 <__aeabi_dsub+0x6a0>)
100113ce:	2500      	movs	r5, #0
100113d0:	e5a1      	b.n	10010f16 <__aeabi_dsub+0x196>
100113d2:	433d      	orrs	r5, r7
100113d4:	1e6f      	subs	r7, r5, #1
100113d6:	41bd      	sbcs	r5, r7
100113d8:	2700      	movs	r7, #0
100113da:	b2ed      	uxtb	r5, r5
100113dc:	e760      	b.n	100112a0 <__aeabi_dsub+0x520>
100113de:	0007      	movs	r7, r0
100113e0:	000d      	movs	r5, r1
100113e2:	4c0f      	ldr	r4, [pc, #60]	; (10011420 <__aeabi_dsub+0x6a0>)
100113e4:	e4f8      	b.n	10010dd8 <__aeabi_dsub+0x58>
100113e6:	0007      	movs	r7, r0
100113e8:	000d      	movs	r5, r1
100113ea:	e4f5      	b.n	10010dd8 <__aeabi_dsub+0x58>
100113ec:	464e      	mov	r6, r9
100113ee:	003c      	movs	r4, r7
100113f0:	3e20      	subs	r6, #32
100113f2:	40f4      	lsrs	r4, r6
100113f4:	46a0      	mov	r8, r4
100113f6:	464c      	mov	r4, r9
100113f8:	2c20      	cmp	r4, #32
100113fa:	d00e      	beq.n	1001141a <__aeabi_dsub+0x69a>
100113fc:	2440      	movs	r4, #64	; 0x40
100113fe:	464e      	mov	r6, r9
10011400:	1ba4      	subs	r4, r4, r6
10011402:	40a7      	lsls	r7, r4
10011404:	433d      	orrs	r5, r7
10011406:	1e6f      	subs	r7, r5, #1
10011408:	41bd      	sbcs	r5, r7
1001140a:	4644      	mov	r4, r8
1001140c:	2700      	movs	r7, #0
1001140e:	4325      	orrs	r5, r4
10011410:	e746      	b.n	100112a0 <__aeabi_dsub+0x520>
10011412:	2700      	movs	r7, #0
10011414:	e7cf      	b.n	100113b6 <__aeabi_dsub+0x636>
10011416:	000d      	movs	r5, r1
10011418:	e573      	b.n	10010f02 <__aeabi_dsub+0x182>
1001141a:	2700      	movs	r7, #0
1001141c:	e7f2      	b.n	10011404 <__aeabi_dsub+0x684>
1001141e:	46c0      	nop			; (mov r8, r8)
10011420:	000007ff 	.word	0x000007ff
10011424:	ff7fffff 	.word	0xff7fffff

10011428 <__aeabi_d2iz>:
10011428:	030b      	lsls	r3, r1, #12
1001142a:	b530      	push	{r4, r5, lr}
1001142c:	4d13      	ldr	r5, [pc, #76]	; (1001147c <__aeabi_d2iz+0x54>)
1001142e:	0b1a      	lsrs	r2, r3, #12
10011430:	004b      	lsls	r3, r1, #1
10011432:	0d5b      	lsrs	r3, r3, #21
10011434:	0fc9      	lsrs	r1, r1, #31
10011436:	2400      	movs	r4, #0
10011438:	42ab      	cmp	r3, r5
1001143a:	dd11      	ble.n	10011460 <__aeabi_d2iz+0x38>
1001143c:	4c10      	ldr	r4, [pc, #64]	; (10011480 <__aeabi_d2iz+0x58>)
1001143e:	42a3      	cmp	r3, r4
10011440:	dc10      	bgt.n	10011464 <__aeabi_d2iz+0x3c>
10011442:	2480      	movs	r4, #128	; 0x80
10011444:	0364      	lsls	r4, r4, #13
10011446:	4322      	orrs	r2, r4
10011448:	4c0e      	ldr	r4, [pc, #56]	; (10011484 <__aeabi_d2iz+0x5c>)
1001144a:	1ae4      	subs	r4, r4, r3
1001144c:	2c1f      	cmp	r4, #31
1001144e:	dd0c      	ble.n	1001146a <__aeabi_d2iz+0x42>
10011450:	480d      	ldr	r0, [pc, #52]	; (10011488 <__aeabi_d2iz+0x60>)
10011452:	1ac3      	subs	r3, r0, r3
10011454:	40da      	lsrs	r2, r3
10011456:	0013      	movs	r3, r2
10011458:	425c      	negs	r4, r3
1001145a:	2900      	cmp	r1, #0
1001145c:	d100      	bne.n	10011460 <__aeabi_d2iz+0x38>
1001145e:	001c      	movs	r4, r3
10011460:	0020      	movs	r0, r4
10011462:	bd30      	pop	{r4, r5, pc}
10011464:	4b09      	ldr	r3, [pc, #36]	; (1001148c <__aeabi_d2iz+0x64>)
10011466:	18cc      	adds	r4, r1, r3
10011468:	e7fa      	b.n	10011460 <__aeabi_d2iz+0x38>
1001146a:	40e0      	lsrs	r0, r4
1001146c:	4c08      	ldr	r4, [pc, #32]	; (10011490 <__aeabi_d2iz+0x68>)
1001146e:	46a4      	mov	ip, r4
10011470:	4463      	add	r3, ip
10011472:	409a      	lsls	r2, r3
10011474:	0013      	movs	r3, r2
10011476:	4303      	orrs	r3, r0
10011478:	e7ee      	b.n	10011458 <__aeabi_d2iz+0x30>
1001147a:	46c0      	nop			; (mov r8, r8)
1001147c:	000003fe 	.word	0x000003fe
10011480:	0000041d 	.word	0x0000041d
10011484:	00000433 	.word	0x00000433
10011488:	00000413 	.word	0x00000413
1001148c:	7fffffff 	.word	0x7fffffff
10011490:	fffffbed 	.word	0xfffffbed

10011494 <__aeabi_ui2d>:
10011494:	b570      	push	{r4, r5, r6, lr}
10011496:	1e05      	subs	r5, r0, #0
10011498:	d028      	beq.n	100114ec <__aeabi_ui2d+0x58>
1001149a:	f000 f833 	bl	10011504 <__clzsi2>
1001149e:	4b15      	ldr	r3, [pc, #84]	; (100114f4 <__aeabi_ui2d+0x60>)
100114a0:	4a15      	ldr	r2, [pc, #84]	; (100114f8 <__aeabi_ui2d+0x64>)
100114a2:	1a1b      	subs	r3, r3, r0
100114a4:	1ad2      	subs	r2, r2, r3
100114a6:	2a1f      	cmp	r2, #31
100114a8:	dd16      	ble.n	100114d8 <__aeabi_ui2d+0x44>
100114aa:	002c      	movs	r4, r5
100114ac:	4a13      	ldr	r2, [pc, #76]	; (100114fc <__aeabi_ui2d+0x68>)
100114ae:	2500      	movs	r5, #0
100114b0:	1ad2      	subs	r2, r2, r3
100114b2:	4094      	lsls	r4, r2
100114b4:	055a      	lsls	r2, r3, #21
100114b6:	0324      	lsls	r4, r4, #12
100114b8:	0b24      	lsrs	r4, r4, #12
100114ba:	0d52      	lsrs	r2, r2, #21
100114bc:	2100      	movs	r1, #0
100114be:	0324      	lsls	r4, r4, #12
100114c0:	0d0b      	lsrs	r3, r1, #20
100114c2:	0b24      	lsrs	r4, r4, #12
100114c4:	051b      	lsls	r3, r3, #20
100114c6:	4323      	orrs	r3, r4
100114c8:	4c0d      	ldr	r4, [pc, #52]	; (10011500 <__aeabi_ui2d+0x6c>)
100114ca:	0512      	lsls	r2, r2, #20
100114cc:	4023      	ands	r3, r4
100114ce:	4313      	orrs	r3, r2
100114d0:	005b      	lsls	r3, r3, #1
100114d2:	0028      	movs	r0, r5
100114d4:	0859      	lsrs	r1, r3, #1
100114d6:	bd70      	pop	{r4, r5, r6, pc}
100114d8:	210b      	movs	r1, #11
100114da:	002c      	movs	r4, r5
100114dc:	1a08      	subs	r0, r1, r0
100114de:	40c4      	lsrs	r4, r0
100114e0:	4095      	lsls	r5, r2
100114e2:	0324      	lsls	r4, r4, #12
100114e4:	055a      	lsls	r2, r3, #21
100114e6:	0b24      	lsrs	r4, r4, #12
100114e8:	0d52      	lsrs	r2, r2, #21
100114ea:	e7e7      	b.n	100114bc <__aeabi_ui2d+0x28>
100114ec:	2200      	movs	r2, #0
100114ee:	2400      	movs	r4, #0
100114f0:	e7e4      	b.n	100114bc <__aeabi_ui2d+0x28>
100114f2:	46c0      	nop			; (mov r8, r8)
100114f4:	0000041e 	.word	0x0000041e
100114f8:	00000433 	.word	0x00000433
100114fc:	00000413 	.word	0x00000413
10011500:	800fffff 	.word	0x800fffff

10011504 <__clzsi2>:
10011504:	211c      	movs	r1, #28
10011506:	2301      	movs	r3, #1
10011508:	041b      	lsls	r3, r3, #16
1001150a:	4298      	cmp	r0, r3
1001150c:	d301      	bcc.n	10011512 <__clzsi2+0xe>
1001150e:	0c00      	lsrs	r0, r0, #16
10011510:	3910      	subs	r1, #16
10011512:	0a1b      	lsrs	r3, r3, #8
10011514:	4298      	cmp	r0, r3
10011516:	d301      	bcc.n	1001151c <__clzsi2+0x18>
10011518:	0a00      	lsrs	r0, r0, #8
1001151a:	3908      	subs	r1, #8
1001151c:	091b      	lsrs	r3, r3, #4
1001151e:	4298      	cmp	r0, r3
10011520:	d301      	bcc.n	10011526 <__clzsi2+0x22>
10011522:	0900      	lsrs	r0, r0, #4
10011524:	3904      	subs	r1, #4
10011526:	a202      	add	r2, pc, #8	; (adr r2, 10011530 <__clzsi2+0x2c>)
10011528:	5c10      	ldrb	r0, [r2, r0]
1001152a:	1840      	adds	r0, r0, r1
1001152c:	4770      	bx	lr
1001152e:	46c0      	nop			; (mov r8, r8)
10011530:	02020304 	.word	0x02020304
10011534:	01010101 	.word	0x01010101
	...

10011540 <__libc_init_array>:
10011540:	4b0e      	ldr	r3, [pc, #56]	; (1001157c <__libc_init_array+0x3c>)
10011542:	b570      	push	{r4, r5, r6, lr}
10011544:	2500      	movs	r5, #0
10011546:	001e      	movs	r6, r3
10011548:	4c0d      	ldr	r4, [pc, #52]	; (10011580 <__libc_init_array+0x40>)
1001154a:	1ae4      	subs	r4, r4, r3
1001154c:	10a4      	asrs	r4, r4, #2
1001154e:	42a5      	cmp	r5, r4
10011550:	d004      	beq.n	1001155c <__libc_init_array+0x1c>
10011552:	00ab      	lsls	r3, r5, #2
10011554:	58f3      	ldr	r3, [r6, r3]
10011556:	4798      	blx	r3
10011558:	3501      	adds	r5, #1
1001155a:	e7f8      	b.n	1001154e <__libc_init_array+0xe>
1001155c:	f002 f962 	bl	10013824 <_init>
10011560:	4b08      	ldr	r3, [pc, #32]	; (10011584 <__libc_init_array+0x44>)
10011562:	2500      	movs	r5, #0
10011564:	001e      	movs	r6, r3
10011566:	4c08      	ldr	r4, [pc, #32]	; (10011588 <__libc_init_array+0x48>)
10011568:	1ae4      	subs	r4, r4, r3
1001156a:	10a4      	asrs	r4, r4, #2
1001156c:	42a5      	cmp	r5, r4
1001156e:	d004      	beq.n	1001157a <__libc_init_array+0x3a>
10011570:	00ab      	lsls	r3, r5, #2
10011572:	58f3      	ldr	r3, [r6, r3]
10011574:	4798      	blx	r3
10011576:	3501      	adds	r5, #1
10011578:	e7f8      	b.n	1001156c <__libc_init_array+0x2c>
1001157a:	bd70      	pop	{r4, r5, r6, pc}
1001157c:	10013830 	.word	0x10013830
10011580:	10013830 	.word	0x10013830
10011584:	10013830 	.word	0x10013830
10011588:	10013834 	.word	0x10013834

1001158c <malloc>:
1001158c:	b510      	push	{r4, lr}
1001158e:	4b03      	ldr	r3, [pc, #12]	; (1001159c <malloc+0x10>)
10011590:	0001      	movs	r1, r0
10011592:	6818      	ldr	r0, [r3, #0]
10011594:	f000 f86a 	bl	1001166c <_malloc_r>
10011598:	bd10      	pop	{r4, pc}
1001159a:	46c0      	nop			; (mov r8, r8)
1001159c:	100138ec 	.word	0x100138ec

100115a0 <memcmp>:
100115a0:	b530      	push	{r4, r5, lr}
100115a2:	2400      	movs	r4, #0
100115a4:	42a2      	cmp	r2, r4
100115a6:	d008      	beq.n	100115ba <memcmp+0x1a>
100115a8:	5d03      	ldrb	r3, [r0, r4]
100115aa:	1c65      	adds	r5, r4, #1
100115ac:	5d0c      	ldrb	r4, [r1, r4]
100115ae:	42a3      	cmp	r3, r4
100115b0:	d001      	beq.n	100115b6 <memcmp+0x16>
100115b2:	1b18      	subs	r0, r3, r4
100115b4:	e002      	b.n	100115bc <memcmp+0x1c>
100115b6:	002c      	movs	r4, r5
100115b8:	e7f4      	b.n	100115a4 <memcmp+0x4>
100115ba:	2000      	movs	r0, #0
100115bc:	bd30      	pop	{r4, r5, pc}

100115be <memcpy>:
100115be:	2300      	movs	r3, #0
100115c0:	b510      	push	{r4, lr}
100115c2:	429a      	cmp	r2, r3
100115c4:	d003      	beq.n	100115ce <memcpy+0x10>
100115c6:	5ccc      	ldrb	r4, [r1, r3]
100115c8:	54c4      	strb	r4, [r0, r3]
100115ca:	3301      	adds	r3, #1
100115cc:	e7f9      	b.n	100115c2 <memcpy+0x4>
100115ce:	bd10      	pop	{r4, pc}

100115d0 <memset>:
100115d0:	0003      	movs	r3, r0
100115d2:	1882      	adds	r2, r0, r2
100115d4:	4293      	cmp	r3, r2
100115d6:	d002      	beq.n	100115de <memset+0xe>
100115d8:	7019      	strb	r1, [r3, #0]
100115da:	3301      	adds	r3, #1
100115dc:	e7fa      	b.n	100115d4 <memset+0x4>
100115de:	4770      	bx	lr

100115e0 <_free_r>:
100115e0:	b530      	push	{r4, r5, lr}
100115e2:	2900      	cmp	r1, #0
100115e4:	d03e      	beq.n	10011664 <_free_r+0x84>
100115e6:	3904      	subs	r1, #4
100115e8:	680b      	ldr	r3, [r1, #0]
100115ea:	2b00      	cmp	r3, #0
100115ec:	da00      	bge.n	100115f0 <_free_r+0x10>
100115ee:	18c9      	adds	r1, r1, r3
100115f0:	4a1d      	ldr	r2, [pc, #116]	; (10011668 <_free_r+0x88>)
100115f2:	6813      	ldr	r3, [r2, #0]
100115f4:	0014      	movs	r4, r2
100115f6:	2b00      	cmp	r3, #0
100115f8:	d102      	bne.n	10011600 <_free_r+0x20>
100115fa:	604b      	str	r3, [r1, #4]
100115fc:	6011      	str	r1, [r2, #0]
100115fe:	e031      	b.n	10011664 <_free_r+0x84>
10011600:	428b      	cmp	r3, r1
10011602:	d90d      	bls.n	10011620 <_free_r+0x40>
10011604:	680a      	ldr	r2, [r1, #0]
10011606:	1888      	adds	r0, r1, r2
10011608:	4283      	cmp	r3, r0
1001160a:	d103      	bne.n	10011614 <_free_r+0x34>
1001160c:	6818      	ldr	r0, [r3, #0]
1001160e:	685b      	ldr	r3, [r3, #4]
10011610:	1882      	adds	r2, r0, r2
10011612:	600a      	str	r2, [r1, #0]
10011614:	604b      	str	r3, [r1, #4]
10011616:	6021      	str	r1, [r4, #0]
10011618:	e024      	b.n	10011664 <_free_r+0x84>
1001161a:	428a      	cmp	r2, r1
1001161c:	d803      	bhi.n	10011626 <_free_r+0x46>
1001161e:	0013      	movs	r3, r2
10011620:	685a      	ldr	r2, [r3, #4]
10011622:	2a00      	cmp	r2, #0
10011624:	d1f9      	bne.n	1001161a <_free_r+0x3a>
10011626:	681d      	ldr	r5, [r3, #0]
10011628:	195c      	adds	r4, r3, r5
1001162a:	428c      	cmp	r4, r1
1001162c:	d10b      	bne.n	10011646 <_free_r+0x66>
1001162e:	6809      	ldr	r1, [r1, #0]
10011630:	1869      	adds	r1, r5, r1
10011632:	1858      	adds	r0, r3, r1
10011634:	6019      	str	r1, [r3, #0]
10011636:	4282      	cmp	r2, r0
10011638:	d114      	bne.n	10011664 <_free_r+0x84>
1001163a:	6810      	ldr	r0, [r2, #0]
1001163c:	6852      	ldr	r2, [r2, #4]
1001163e:	1841      	adds	r1, r0, r1
10011640:	6019      	str	r1, [r3, #0]
10011642:	605a      	str	r2, [r3, #4]
10011644:	e00e      	b.n	10011664 <_free_r+0x84>
10011646:	428c      	cmp	r4, r1
10011648:	d902      	bls.n	10011650 <_free_r+0x70>
1001164a:	230c      	movs	r3, #12
1001164c:	6003      	str	r3, [r0, #0]
1001164e:	e009      	b.n	10011664 <_free_r+0x84>
10011650:	6808      	ldr	r0, [r1, #0]
10011652:	180c      	adds	r4, r1, r0
10011654:	42a2      	cmp	r2, r4
10011656:	d103      	bne.n	10011660 <_free_r+0x80>
10011658:	6814      	ldr	r4, [r2, #0]
1001165a:	6852      	ldr	r2, [r2, #4]
1001165c:	1820      	adds	r0, r4, r0
1001165e:	6008      	str	r0, [r1, #0]
10011660:	604a      	str	r2, [r1, #4]
10011662:	6059      	str	r1, [r3, #4]
10011664:	bd30      	pop	{r4, r5, pc}
10011666:	46c0      	nop			; (mov r8, r8)
10011668:	10014f00 	.word	0x10014f00

1001166c <_malloc_r>:
1001166c:	2303      	movs	r3, #3
1001166e:	b570      	push	{r4, r5, r6, lr}
10011670:	1ccd      	adds	r5, r1, #3
10011672:	439d      	bics	r5, r3
10011674:	3508      	adds	r5, #8
10011676:	0006      	movs	r6, r0
10011678:	2d0c      	cmp	r5, #12
1001167a:	d201      	bcs.n	10011680 <_malloc_r+0x14>
1001167c:	250c      	movs	r5, #12
1001167e:	e005      	b.n	1001168c <_malloc_r+0x20>
10011680:	2d00      	cmp	r5, #0
10011682:	da03      	bge.n	1001168c <_malloc_r+0x20>
10011684:	230c      	movs	r3, #12
10011686:	2000      	movs	r0, #0
10011688:	6033      	str	r3, [r6, #0]
1001168a:	e040      	b.n	1001170e <_malloc_r+0xa2>
1001168c:	42a9      	cmp	r1, r5
1001168e:	d8f9      	bhi.n	10011684 <_malloc_r+0x18>
10011690:	4b1f      	ldr	r3, [pc, #124]	; (10011710 <_malloc_r+0xa4>)
10011692:	681c      	ldr	r4, [r3, #0]
10011694:	001a      	movs	r2, r3
10011696:	0021      	movs	r1, r4
10011698:	2900      	cmp	r1, #0
1001169a:	d013      	beq.n	100116c4 <_malloc_r+0x58>
1001169c:	680b      	ldr	r3, [r1, #0]
1001169e:	1b5b      	subs	r3, r3, r5
100116a0:	d40d      	bmi.n	100116be <_malloc_r+0x52>
100116a2:	2b0b      	cmp	r3, #11
100116a4:	d902      	bls.n	100116ac <_malloc_r+0x40>
100116a6:	600b      	str	r3, [r1, #0]
100116a8:	18cc      	adds	r4, r1, r3
100116aa:	e01e      	b.n	100116ea <_malloc_r+0x7e>
100116ac:	428c      	cmp	r4, r1
100116ae:	d102      	bne.n	100116b6 <_malloc_r+0x4a>
100116b0:	6863      	ldr	r3, [r4, #4]
100116b2:	6013      	str	r3, [r2, #0]
100116b4:	e01a      	b.n	100116ec <_malloc_r+0x80>
100116b6:	684b      	ldr	r3, [r1, #4]
100116b8:	6063      	str	r3, [r4, #4]
100116ba:	000c      	movs	r4, r1
100116bc:	e016      	b.n	100116ec <_malloc_r+0x80>
100116be:	000c      	movs	r4, r1
100116c0:	6849      	ldr	r1, [r1, #4]
100116c2:	e7e9      	b.n	10011698 <_malloc_r+0x2c>
100116c4:	4c13      	ldr	r4, [pc, #76]	; (10011714 <_malloc_r+0xa8>)
100116c6:	6823      	ldr	r3, [r4, #0]
100116c8:	2b00      	cmp	r3, #0
100116ca:	d103      	bne.n	100116d4 <_malloc_r+0x68>
100116cc:	0030      	movs	r0, r6
100116ce:	f000 f8f9 	bl	100118c4 <_sbrk_r>
100116d2:	6020      	str	r0, [r4, #0]
100116d4:	0029      	movs	r1, r5
100116d6:	0030      	movs	r0, r6
100116d8:	f000 f8f4 	bl	100118c4 <_sbrk_r>
100116dc:	1c43      	adds	r3, r0, #1
100116de:	d0d1      	beq.n	10011684 <_malloc_r+0x18>
100116e0:	2303      	movs	r3, #3
100116e2:	1cc4      	adds	r4, r0, #3
100116e4:	439c      	bics	r4, r3
100116e6:	42a0      	cmp	r0, r4
100116e8:	d10a      	bne.n	10011700 <_malloc_r+0x94>
100116ea:	6025      	str	r5, [r4, #0]
100116ec:	0020      	movs	r0, r4
100116ee:	2207      	movs	r2, #7
100116f0:	300b      	adds	r0, #11
100116f2:	1d23      	adds	r3, r4, #4
100116f4:	4390      	bics	r0, r2
100116f6:	1ac3      	subs	r3, r0, r3
100116f8:	d009      	beq.n	1001170e <_malloc_r+0xa2>
100116fa:	425a      	negs	r2, r3
100116fc:	50e2      	str	r2, [r4, r3]
100116fe:	e006      	b.n	1001170e <_malloc_r+0xa2>
10011700:	1a21      	subs	r1, r4, r0
10011702:	0030      	movs	r0, r6
10011704:	f000 f8de 	bl	100118c4 <_sbrk_r>
10011708:	1c43      	adds	r3, r0, #1
1001170a:	d1ee      	bne.n	100116ea <_malloc_r+0x7e>
1001170c:	e7ba      	b.n	10011684 <_malloc_r+0x18>
1001170e:	bd70      	pop	{r4, r5, r6, pc}
10011710:	10014f00 	.word	0x10014f00
10011714:	10014efc 	.word	0x10014efc

10011718 <iprintf>:
10011718:	b40f      	push	{r0, r1, r2, r3}
1001171a:	4b0b      	ldr	r3, [pc, #44]	; (10011748 <iprintf+0x30>)
1001171c:	b513      	push	{r0, r1, r4, lr}
1001171e:	681c      	ldr	r4, [r3, #0]
10011720:	2c00      	cmp	r4, #0
10011722:	d005      	beq.n	10011730 <iprintf+0x18>
10011724:	69a3      	ldr	r3, [r4, #24]
10011726:	2b00      	cmp	r3, #0
10011728:	d102      	bne.n	10011730 <iprintf+0x18>
1001172a:	0020      	movs	r0, r4
1001172c:	f000 fb58 	bl	10011de0 <__sinit>
10011730:	ab05      	add	r3, sp, #20
10011732:	9a04      	ldr	r2, [sp, #16]
10011734:	68a1      	ldr	r1, [r4, #8]
10011736:	0020      	movs	r0, r4
10011738:	9301      	str	r3, [sp, #4]
1001173a:	f000 fc71 	bl	10012020 <_vfiprintf_r>
1001173e:	bc16      	pop	{r1, r2, r4}
10011740:	bc08      	pop	{r3}
10011742:	b004      	add	sp, #16
10011744:	4718      	bx	r3
10011746:	46c0      	nop			; (mov r8, r8)
10011748:	100138ec 	.word	0x100138ec

1001174c <putchar>:
1001174c:	4b08      	ldr	r3, [pc, #32]	; (10011770 <putchar+0x24>)
1001174e:	b570      	push	{r4, r5, r6, lr}
10011750:	681c      	ldr	r4, [r3, #0]
10011752:	0005      	movs	r5, r0
10011754:	2c00      	cmp	r4, #0
10011756:	d005      	beq.n	10011764 <putchar+0x18>
10011758:	69a3      	ldr	r3, [r4, #24]
1001175a:	2b00      	cmp	r3, #0
1001175c:	d102      	bne.n	10011764 <putchar+0x18>
1001175e:	0020      	movs	r0, r4
10011760:	f000 fb3e 	bl	10011de0 <__sinit>
10011764:	0029      	movs	r1, r5
10011766:	68a2      	ldr	r2, [r4, #8]
10011768:	0020      	movs	r0, r4
1001176a:	f000 ff05 	bl	10012578 <_putc_r>
1001176e:	bd70      	pop	{r4, r5, r6, pc}
10011770:	100138ec 	.word	0x100138ec

10011774 <_puts_r>:
10011774:	b570      	push	{r4, r5, r6, lr}
10011776:	0005      	movs	r5, r0
10011778:	000e      	movs	r6, r1
1001177a:	2800      	cmp	r0, #0
1001177c:	d004      	beq.n	10011788 <_puts_r+0x14>
1001177e:	6983      	ldr	r3, [r0, #24]
10011780:	2b00      	cmp	r3, #0
10011782:	d101      	bne.n	10011788 <_puts_r+0x14>
10011784:	f000 fb2c 	bl	10011de0 <__sinit>
10011788:	69ab      	ldr	r3, [r5, #24]
1001178a:	68ac      	ldr	r4, [r5, #8]
1001178c:	2b00      	cmp	r3, #0
1001178e:	d102      	bne.n	10011796 <_puts_r+0x22>
10011790:	0028      	movs	r0, r5
10011792:	f000 fb25 	bl	10011de0 <__sinit>
10011796:	4b25      	ldr	r3, [pc, #148]	; (1001182c <_puts_r+0xb8>)
10011798:	429c      	cmp	r4, r3
1001179a:	d101      	bne.n	100117a0 <_puts_r+0x2c>
1001179c:	686c      	ldr	r4, [r5, #4]
1001179e:	e008      	b.n	100117b2 <_puts_r+0x3e>
100117a0:	4b23      	ldr	r3, [pc, #140]	; (10011830 <_puts_r+0xbc>)
100117a2:	429c      	cmp	r4, r3
100117a4:	d101      	bne.n	100117aa <_puts_r+0x36>
100117a6:	68ac      	ldr	r4, [r5, #8]
100117a8:	e003      	b.n	100117b2 <_puts_r+0x3e>
100117aa:	4b22      	ldr	r3, [pc, #136]	; (10011834 <_puts_r+0xc0>)
100117ac:	429c      	cmp	r4, r3
100117ae:	d100      	bne.n	100117b2 <_puts_r+0x3e>
100117b0:	68ec      	ldr	r4, [r5, #12]
100117b2:	89a3      	ldrh	r3, [r4, #12]
100117b4:	071b      	lsls	r3, r3, #28
100117b6:	d502      	bpl.n	100117be <_puts_r+0x4a>
100117b8:	6923      	ldr	r3, [r4, #16]
100117ba:	2b00      	cmp	r3, #0
100117bc:	d111      	bne.n	100117e2 <_puts_r+0x6e>
100117be:	0021      	movs	r1, r4
100117c0:	0028      	movs	r0, r5
100117c2:	f000 f9a3 	bl	10011b0c <__swsetup_r>
100117c6:	2800      	cmp	r0, #0
100117c8:	d00b      	beq.n	100117e2 <_puts_r+0x6e>
100117ca:	2001      	movs	r0, #1
100117cc:	4240      	negs	r0, r0
100117ce:	e02b      	b.n	10011828 <_puts_r+0xb4>
100117d0:	3b01      	subs	r3, #1
100117d2:	3601      	adds	r6, #1
100117d4:	60a3      	str	r3, [r4, #8]
100117d6:	2b00      	cmp	r3, #0
100117d8:	db08      	blt.n	100117ec <_puts_r+0x78>
100117da:	6823      	ldr	r3, [r4, #0]
100117dc:	1c5a      	adds	r2, r3, #1
100117de:	6022      	str	r2, [r4, #0]
100117e0:	7019      	strb	r1, [r3, #0]
100117e2:	7831      	ldrb	r1, [r6, #0]
100117e4:	68a3      	ldr	r3, [r4, #8]
100117e6:	2900      	cmp	r1, #0
100117e8:	d1f2      	bne.n	100117d0 <_puts_r+0x5c>
100117ea:	e00b      	b.n	10011804 <_puts_r+0x90>
100117ec:	69a2      	ldr	r2, [r4, #24]
100117ee:	4293      	cmp	r3, r2
100117f0:	db01      	blt.n	100117f6 <_puts_r+0x82>
100117f2:	290a      	cmp	r1, #10
100117f4:	d1f1      	bne.n	100117da <_puts_r+0x66>
100117f6:	0022      	movs	r2, r4
100117f8:	0028      	movs	r0, r5
100117fa:	f000 f92f 	bl	10011a5c <__swbuf_r>
100117fe:	1c43      	adds	r3, r0, #1
10011800:	d1ef      	bne.n	100117e2 <_puts_r+0x6e>
10011802:	e7e2      	b.n	100117ca <_puts_r+0x56>
10011804:	3b01      	subs	r3, #1
10011806:	60a3      	str	r3, [r4, #8]
10011808:	2b00      	cmp	r3, #0
1001180a:	da08      	bge.n	1001181e <_puts_r+0xaa>
1001180c:	0022      	movs	r2, r4
1001180e:	310a      	adds	r1, #10
10011810:	0028      	movs	r0, r5
10011812:	f000 f923 	bl	10011a5c <__swbuf_r>
10011816:	1c43      	adds	r3, r0, #1
10011818:	d0d7      	beq.n	100117ca <_puts_r+0x56>
1001181a:	200a      	movs	r0, #10
1001181c:	e004      	b.n	10011828 <_puts_r+0xb4>
1001181e:	200a      	movs	r0, #10
10011820:	6823      	ldr	r3, [r4, #0]
10011822:	1c5a      	adds	r2, r3, #1
10011824:	6022      	str	r2, [r4, #0]
10011826:	7018      	strb	r0, [r3, #0]
10011828:	bd70      	pop	{r4, r5, r6, pc}
1001182a:	46c0      	nop			; (mov r8, r8)
1001182c:	10013790 	.word	0x10013790
10011830:	100137b0 	.word	0x100137b0
10011834:	100137d0 	.word	0x100137d0

10011838 <puts>:
10011838:	b510      	push	{r4, lr}
1001183a:	4b03      	ldr	r3, [pc, #12]	; (10011848 <puts+0x10>)
1001183c:	0001      	movs	r1, r0
1001183e:	6818      	ldr	r0, [r3, #0]
10011840:	f7ff ff98 	bl	10011774 <_puts_r>
10011844:	bd10      	pop	{r4, pc}
10011846:	46c0      	nop			; (mov r8, r8)
10011848:	100138ec 	.word	0x100138ec

1001184c <rand>:
1001184c:	4b15      	ldr	r3, [pc, #84]	; (100118a4 <rand+0x58>)
1001184e:	b510      	push	{r4, lr}
10011850:	681c      	ldr	r4, [r3, #0]
10011852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011854:	2b00      	cmp	r3, #0
10011856:	d115      	bne.n	10011884 <rand+0x38>
10011858:	2018      	movs	r0, #24
1001185a:	f7ff fe97 	bl	1001158c <malloc>
1001185e:	4b12      	ldr	r3, [pc, #72]	; (100118a8 <rand+0x5c>)
10011860:	63a0      	str	r0, [r4, #56]	; 0x38
10011862:	8003      	strh	r3, [r0, #0]
10011864:	4b11      	ldr	r3, [pc, #68]	; (100118ac <rand+0x60>)
10011866:	2201      	movs	r2, #1
10011868:	8043      	strh	r3, [r0, #2]
1001186a:	4b11      	ldr	r3, [pc, #68]	; (100118b0 <rand+0x64>)
1001186c:	8083      	strh	r3, [r0, #4]
1001186e:	4b11      	ldr	r3, [pc, #68]	; (100118b4 <rand+0x68>)
10011870:	80c3      	strh	r3, [r0, #6]
10011872:	4b11      	ldr	r3, [pc, #68]	; (100118b8 <rand+0x6c>)
10011874:	8103      	strh	r3, [r0, #8]
10011876:	2305      	movs	r3, #5
10011878:	8143      	strh	r3, [r0, #10]
1001187a:	3306      	adds	r3, #6
1001187c:	8183      	strh	r3, [r0, #12]
1001187e:	2300      	movs	r3, #0
10011880:	6102      	str	r2, [r0, #16]
10011882:	6143      	str	r3, [r0, #20]
10011884:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011886:	4a0d      	ldr	r2, [pc, #52]	; (100118bc <rand+0x70>)
10011888:	6920      	ldr	r0, [r4, #16]
1001188a:	6961      	ldr	r1, [r4, #20]
1001188c:	4b0c      	ldr	r3, [pc, #48]	; (100118c0 <rand+0x74>)
1001188e:	f7fe f80b 	bl	1000f8a8 <__aeabi_lmul>
10011892:	2201      	movs	r2, #1
10011894:	2300      	movs	r3, #0
10011896:	1880      	adds	r0, r0, r2
10011898:	4159      	adcs	r1, r3
1001189a:	6120      	str	r0, [r4, #16]
1001189c:	6161      	str	r1, [r4, #20]
1001189e:	0048      	lsls	r0, r1, #1
100118a0:	0840      	lsrs	r0, r0, #1
100118a2:	bd10      	pop	{r4, pc}
100118a4:	100138ec 	.word	0x100138ec
100118a8:	0000330e 	.word	0x0000330e
100118ac:	ffffabcd 	.word	0xffffabcd
100118b0:	00001234 	.word	0x00001234
100118b4:	ffffe66d 	.word	0xffffe66d
100118b8:	ffffdeec 	.word	0xffffdeec
100118bc:	4c957f2d 	.word	0x4c957f2d
100118c0:	5851f42d 	.word	0x5851f42d

100118c4 <_sbrk_r>:
100118c4:	2300      	movs	r3, #0
100118c6:	b570      	push	{r4, r5, r6, lr}
100118c8:	4c06      	ldr	r4, [pc, #24]	; (100118e4 <_sbrk_r+0x20>)
100118ca:	0005      	movs	r5, r0
100118cc:	0008      	movs	r0, r1
100118ce:	6023      	str	r3, [r4, #0]
100118d0:	f7fa ffee 	bl	1000c8b0 <_sbrk>
100118d4:	1c43      	adds	r3, r0, #1
100118d6:	d103      	bne.n	100118e0 <_sbrk_r+0x1c>
100118d8:	6823      	ldr	r3, [r4, #0]
100118da:	2b00      	cmp	r3, #0
100118dc:	d000      	beq.n	100118e0 <_sbrk_r+0x1c>
100118de:	602b      	str	r3, [r5, #0]
100118e0:	bd70      	pop	{r4, r5, r6, pc}
100118e2:	46c0      	nop			; (mov r8, r8)
100118e4:	1001610c 	.word	0x1001610c

100118e8 <setbuf>:
100118e8:	424a      	negs	r2, r1
100118ea:	414a      	adcs	r2, r1
100118ec:	2380      	movs	r3, #128	; 0x80
100118ee:	b510      	push	{r4, lr}
100118f0:	0052      	lsls	r2, r2, #1
100118f2:	00db      	lsls	r3, r3, #3
100118f4:	f000 f802 	bl	100118fc <setvbuf>
100118f8:	bd10      	pop	{r4, pc}
	...

100118fc <setvbuf>:
100118fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100118fe:	001d      	movs	r5, r3
10011900:	4b51      	ldr	r3, [pc, #324]	; (10011a48 <setvbuf+0x14c>)
10011902:	b085      	sub	sp, #20
10011904:	681e      	ldr	r6, [r3, #0]
10011906:	0004      	movs	r4, r0
10011908:	000f      	movs	r7, r1
1001190a:	9200      	str	r2, [sp, #0]
1001190c:	2e00      	cmp	r6, #0
1001190e:	d005      	beq.n	1001191c <setvbuf+0x20>
10011910:	69b3      	ldr	r3, [r6, #24]
10011912:	2b00      	cmp	r3, #0
10011914:	d102      	bne.n	1001191c <setvbuf+0x20>
10011916:	0030      	movs	r0, r6
10011918:	f000 fa62 	bl	10011de0 <__sinit>
1001191c:	4b4b      	ldr	r3, [pc, #300]	; (10011a4c <setvbuf+0x150>)
1001191e:	429c      	cmp	r4, r3
10011920:	d101      	bne.n	10011926 <setvbuf+0x2a>
10011922:	6874      	ldr	r4, [r6, #4]
10011924:	e008      	b.n	10011938 <setvbuf+0x3c>
10011926:	4b4a      	ldr	r3, [pc, #296]	; (10011a50 <setvbuf+0x154>)
10011928:	429c      	cmp	r4, r3
1001192a:	d101      	bne.n	10011930 <setvbuf+0x34>
1001192c:	68b4      	ldr	r4, [r6, #8]
1001192e:	e003      	b.n	10011938 <setvbuf+0x3c>
10011930:	4b48      	ldr	r3, [pc, #288]	; (10011a54 <setvbuf+0x158>)
10011932:	429c      	cmp	r4, r3
10011934:	d100      	bne.n	10011938 <setvbuf+0x3c>
10011936:	68f4      	ldr	r4, [r6, #12]
10011938:	9b00      	ldr	r3, [sp, #0]
1001193a:	2b02      	cmp	r3, #2
1001193c:	d005      	beq.n	1001194a <setvbuf+0x4e>
1001193e:	2b01      	cmp	r3, #1
10011940:	d900      	bls.n	10011944 <setvbuf+0x48>
10011942:	e07c      	b.n	10011a3e <setvbuf+0x142>
10011944:	2d00      	cmp	r5, #0
10011946:	da00      	bge.n	1001194a <setvbuf+0x4e>
10011948:	e079      	b.n	10011a3e <setvbuf+0x142>
1001194a:	0021      	movs	r1, r4
1001194c:	0030      	movs	r0, r6
1001194e:	f000 f9d9 	bl	10011d04 <_fflush_r>
10011952:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011954:	2900      	cmp	r1, #0
10011956:	d008      	beq.n	1001196a <setvbuf+0x6e>
10011958:	0023      	movs	r3, r4
1001195a:	3344      	adds	r3, #68	; 0x44
1001195c:	4299      	cmp	r1, r3
1001195e:	d002      	beq.n	10011966 <setvbuf+0x6a>
10011960:	0030      	movs	r0, r6
10011962:	f7ff fe3d 	bl	100115e0 <_free_r>
10011966:	2300      	movs	r3, #0
10011968:	6363      	str	r3, [r4, #52]	; 0x34
1001196a:	2300      	movs	r3, #0
1001196c:	61a3      	str	r3, [r4, #24]
1001196e:	6063      	str	r3, [r4, #4]
10011970:	89a3      	ldrh	r3, [r4, #12]
10011972:	061b      	lsls	r3, r3, #24
10011974:	d503      	bpl.n	1001197e <setvbuf+0x82>
10011976:	6921      	ldr	r1, [r4, #16]
10011978:	0030      	movs	r0, r6
1001197a:	f7ff fe31 	bl	100115e0 <_free_r>
1001197e:	89a2      	ldrh	r2, [r4, #12]
10011980:	4b35      	ldr	r3, [pc, #212]	; (10011a58 <setvbuf+0x15c>)
10011982:	4013      	ands	r3, r2
10011984:	81a3      	strh	r3, [r4, #12]
10011986:	9b00      	ldr	r3, [sp, #0]
10011988:	2b02      	cmp	r3, #2
1001198a:	d021      	beq.n	100119d0 <setvbuf+0xd4>
1001198c:	ab03      	add	r3, sp, #12
1001198e:	aa02      	add	r2, sp, #8
10011990:	0021      	movs	r1, r4
10011992:	0030      	movs	r0, r6
10011994:	f000 fab8 	bl	10011f08 <__swhatbuf_r>
10011998:	89a3      	ldrh	r3, [r4, #12]
1001199a:	4318      	orrs	r0, r3
1001199c:	81a0      	strh	r0, [r4, #12]
1001199e:	2d00      	cmp	r5, #0
100119a0:	d101      	bne.n	100119a6 <setvbuf+0xaa>
100119a2:	9d02      	ldr	r5, [sp, #8]
100119a4:	e001      	b.n	100119aa <setvbuf+0xae>
100119a6:	2f00      	cmp	r7, #0
100119a8:	d125      	bne.n	100119f6 <setvbuf+0xfa>
100119aa:	0028      	movs	r0, r5
100119ac:	f7ff fdee 	bl	1001158c <malloc>
100119b0:	9501      	str	r5, [sp, #4]
100119b2:	1e07      	subs	r7, r0, #0
100119b4:	d11a      	bne.n	100119ec <setvbuf+0xf0>
100119b6:	9b02      	ldr	r3, [sp, #8]
100119b8:	9301      	str	r3, [sp, #4]
100119ba:	42ab      	cmp	r3, r5
100119bc:	d102      	bne.n	100119c4 <setvbuf+0xc8>
100119be:	2001      	movs	r0, #1
100119c0:	4240      	negs	r0, r0
100119c2:	e006      	b.n	100119d2 <setvbuf+0xd6>
100119c4:	9801      	ldr	r0, [sp, #4]
100119c6:	f7ff fde1 	bl	1001158c <malloc>
100119ca:	1e07      	subs	r7, r0, #0
100119cc:	d10e      	bne.n	100119ec <setvbuf+0xf0>
100119ce:	e7f6      	b.n	100119be <setvbuf+0xc2>
100119d0:	2000      	movs	r0, #0
100119d2:	2202      	movs	r2, #2
100119d4:	89a3      	ldrh	r3, [r4, #12]
100119d6:	4313      	orrs	r3, r2
100119d8:	81a3      	strh	r3, [r4, #12]
100119da:	2300      	movs	r3, #0
100119dc:	60a3      	str	r3, [r4, #8]
100119de:	0023      	movs	r3, r4
100119e0:	3347      	adds	r3, #71	; 0x47
100119e2:	6023      	str	r3, [r4, #0]
100119e4:	6123      	str	r3, [r4, #16]
100119e6:	2301      	movs	r3, #1
100119e8:	6163      	str	r3, [r4, #20]
100119ea:	e02a      	b.n	10011a42 <setvbuf+0x146>
100119ec:	2280      	movs	r2, #128	; 0x80
100119ee:	89a3      	ldrh	r3, [r4, #12]
100119f0:	9d01      	ldr	r5, [sp, #4]
100119f2:	4313      	orrs	r3, r2
100119f4:	81a3      	strh	r3, [r4, #12]
100119f6:	69b3      	ldr	r3, [r6, #24]
100119f8:	2b00      	cmp	r3, #0
100119fa:	d102      	bne.n	10011a02 <setvbuf+0x106>
100119fc:	0030      	movs	r0, r6
100119fe:	f000 f9ef 	bl	10011de0 <__sinit>
10011a02:	9b00      	ldr	r3, [sp, #0]
10011a04:	2b01      	cmp	r3, #1
10011a06:	d103      	bne.n	10011a10 <setvbuf+0x114>
10011a08:	89a3      	ldrh	r3, [r4, #12]
10011a0a:	9a00      	ldr	r2, [sp, #0]
10011a0c:	431a      	orrs	r2, r3
10011a0e:	81a2      	strh	r2, [r4, #12]
10011a10:	2308      	movs	r3, #8
10011a12:	89a2      	ldrh	r2, [r4, #12]
10011a14:	6027      	str	r7, [r4, #0]
10011a16:	4013      	ands	r3, r2
10011a18:	6127      	str	r7, [r4, #16]
10011a1a:	6165      	str	r5, [r4, #20]
10011a1c:	1e18      	subs	r0, r3, #0
10011a1e:	d00c      	beq.n	10011a3a <setvbuf+0x13e>
10011a20:	2301      	movs	r3, #1
10011a22:	401a      	ands	r2, r3
10011a24:	2300      	movs	r3, #0
10011a26:	1e10      	subs	r0, r2, #0
10011a28:	4298      	cmp	r0, r3
10011a2a:	d004      	beq.n	10011a36 <setvbuf+0x13a>
10011a2c:	426d      	negs	r5, r5
10011a2e:	60a3      	str	r3, [r4, #8]
10011a30:	61a5      	str	r5, [r4, #24]
10011a32:	0018      	movs	r0, r3
10011a34:	e005      	b.n	10011a42 <setvbuf+0x146>
10011a36:	60a5      	str	r5, [r4, #8]
10011a38:	e003      	b.n	10011a42 <setvbuf+0x146>
10011a3a:	60a3      	str	r3, [r4, #8]
10011a3c:	e001      	b.n	10011a42 <setvbuf+0x146>
10011a3e:	2001      	movs	r0, #1
10011a40:	4240      	negs	r0, r0
10011a42:	b005      	add	sp, #20
10011a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a46:	46c0      	nop			; (mov r8, r8)
10011a48:	100138ec 	.word	0x100138ec
10011a4c:	10013790 	.word	0x10013790
10011a50:	100137b0 	.word	0x100137b0
10011a54:	100137d0 	.word	0x100137d0
10011a58:	fffff35c 	.word	0xfffff35c

10011a5c <__swbuf_r>:
10011a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a5e:	0005      	movs	r5, r0
10011a60:	000f      	movs	r7, r1
10011a62:	0014      	movs	r4, r2
10011a64:	2800      	cmp	r0, #0
10011a66:	d004      	beq.n	10011a72 <__swbuf_r+0x16>
10011a68:	6983      	ldr	r3, [r0, #24]
10011a6a:	2b00      	cmp	r3, #0
10011a6c:	d101      	bne.n	10011a72 <__swbuf_r+0x16>
10011a6e:	f000 f9b7 	bl	10011de0 <__sinit>
10011a72:	4b23      	ldr	r3, [pc, #140]	; (10011b00 <__swbuf_r+0xa4>)
10011a74:	429c      	cmp	r4, r3
10011a76:	d101      	bne.n	10011a7c <__swbuf_r+0x20>
10011a78:	686c      	ldr	r4, [r5, #4]
10011a7a:	e008      	b.n	10011a8e <__swbuf_r+0x32>
10011a7c:	4b21      	ldr	r3, [pc, #132]	; (10011b04 <__swbuf_r+0xa8>)
10011a7e:	429c      	cmp	r4, r3
10011a80:	d101      	bne.n	10011a86 <__swbuf_r+0x2a>
10011a82:	68ac      	ldr	r4, [r5, #8]
10011a84:	e003      	b.n	10011a8e <__swbuf_r+0x32>
10011a86:	4b20      	ldr	r3, [pc, #128]	; (10011b08 <__swbuf_r+0xac>)
10011a88:	429c      	cmp	r4, r3
10011a8a:	d100      	bne.n	10011a8e <__swbuf_r+0x32>
10011a8c:	68ec      	ldr	r4, [r5, #12]
10011a8e:	69a3      	ldr	r3, [r4, #24]
10011a90:	60a3      	str	r3, [r4, #8]
10011a92:	89a3      	ldrh	r3, [r4, #12]
10011a94:	071b      	lsls	r3, r3, #28
10011a96:	d50a      	bpl.n	10011aae <__swbuf_r+0x52>
10011a98:	6923      	ldr	r3, [r4, #16]
10011a9a:	2b00      	cmp	r3, #0
10011a9c:	d007      	beq.n	10011aae <__swbuf_r+0x52>
10011a9e:	6823      	ldr	r3, [r4, #0]
10011aa0:	6922      	ldr	r2, [r4, #16]
10011aa2:	b2fe      	uxtb	r6, r7
10011aa4:	1a98      	subs	r0, r3, r2
10011aa6:	6963      	ldr	r3, [r4, #20]
10011aa8:	4298      	cmp	r0, r3
10011aaa:	db0f      	blt.n	10011acc <__swbuf_r+0x70>
10011aac:	e008      	b.n	10011ac0 <__swbuf_r+0x64>
10011aae:	0021      	movs	r1, r4
10011ab0:	0028      	movs	r0, r5
10011ab2:	f000 f82b 	bl	10011b0c <__swsetup_r>
10011ab6:	2800      	cmp	r0, #0
10011ab8:	d0f1      	beq.n	10011a9e <__swbuf_r+0x42>
10011aba:	2001      	movs	r0, #1
10011abc:	4240      	negs	r0, r0
10011abe:	e01d      	b.n	10011afc <__swbuf_r+0xa0>
10011ac0:	0021      	movs	r1, r4
10011ac2:	0028      	movs	r0, r5
10011ac4:	f000 f91e 	bl	10011d04 <_fflush_r>
10011ac8:	2800      	cmp	r0, #0
10011aca:	d1f6      	bne.n	10011aba <__swbuf_r+0x5e>
10011acc:	68a3      	ldr	r3, [r4, #8]
10011ace:	3001      	adds	r0, #1
10011ad0:	3b01      	subs	r3, #1
10011ad2:	60a3      	str	r3, [r4, #8]
10011ad4:	6823      	ldr	r3, [r4, #0]
10011ad6:	1c5a      	adds	r2, r3, #1
10011ad8:	6022      	str	r2, [r4, #0]
10011ada:	701f      	strb	r7, [r3, #0]
10011adc:	6963      	ldr	r3, [r4, #20]
10011ade:	4298      	cmp	r0, r3
10011ae0:	d005      	beq.n	10011aee <__swbuf_r+0x92>
10011ae2:	89a3      	ldrh	r3, [r4, #12]
10011ae4:	0030      	movs	r0, r6
10011ae6:	07db      	lsls	r3, r3, #31
10011ae8:	d508      	bpl.n	10011afc <__swbuf_r+0xa0>
10011aea:	2e0a      	cmp	r6, #10
10011aec:	d106      	bne.n	10011afc <__swbuf_r+0xa0>
10011aee:	0021      	movs	r1, r4
10011af0:	0028      	movs	r0, r5
10011af2:	f000 f907 	bl	10011d04 <_fflush_r>
10011af6:	2800      	cmp	r0, #0
10011af8:	d1df      	bne.n	10011aba <__swbuf_r+0x5e>
10011afa:	0030      	movs	r0, r6
10011afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011afe:	46c0      	nop			; (mov r8, r8)
10011b00:	10013790 	.word	0x10013790
10011b04:	100137b0 	.word	0x100137b0
10011b08:	100137d0 	.word	0x100137d0

10011b0c <__swsetup_r>:
10011b0c:	4b36      	ldr	r3, [pc, #216]	; (10011be8 <__swsetup_r+0xdc>)
10011b0e:	b570      	push	{r4, r5, r6, lr}
10011b10:	681d      	ldr	r5, [r3, #0]
10011b12:	0006      	movs	r6, r0
10011b14:	000c      	movs	r4, r1
10011b16:	2d00      	cmp	r5, #0
10011b18:	d005      	beq.n	10011b26 <__swsetup_r+0x1a>
10011b1a:	69ab      	ldr	r3, [r5, #24]
10011b1c:	2b00      	cmp	r3, #0
10011b1e:	d102      	bne.n	10011b26 <__swsetup_r+0x1a>
10011b20:	0028      	movs	r0, r5
10011b22:	f000 f95d 	bl	10011de0 <__sinit>
10011b26:	4b31      	ldr	r3, [pc, #196]	; (10011bec <__swsetup_r+0xe0>)
10011b28:	429c      	cmp	r4, r3
10011b2a:	d101      	bne.n	10011b30 <__swsetup_r+0x24>
10011b2c:	686c      	ldr	r4, [r5, #4]
10011b2e:	e008      	b.n	10011b42 <__swsetup_r+0x36>
10011b30:	4b2f      	ldr	r3, [pc, #188]	; (10011bf0 <__swsetup_r+0xe4>)
10011b32:	429c      	cmp	r4, r3
10011b34:	d101      	bne.n	10011b3a <__swsetup_r+0x2e>
10011b36:	68ac      	ldr	r4, [r5, #8]
10011b38:	e003      	b.n	10011b42 <__swsetup_r+0x36>
10011b3a:	4b2e      	ldr	r3, [pc, #184]	; (10011bf4 <__swsetup_r+0xe8>)
10011b3c:	429c      	cmp	r4, r3
10011b3e:	d100      	bne.n	10011b42 <__swsetup_r+0x36>
10011b40:	68ec      	ldr	r4, [r5, #12]
10011b42:	220c      	movs	r2, #12
10011b44:	5ea3      	ldrsh	r3, [r4, r2]
10011b46:	b29a      	uxth	r2, r3
10011b48:	0711      	lsls	r1, r2, #28
10011b4a:	d423      	bmi.n	10011b94 <__swsetup_r+0x88>
10011b4c:	06d1      	lsls	r1, r2, #27
10011b4e:	d407      	bmi.n	10011b60 <__swsetup_r+0x54>
10011b50:	2209      	movs	r2, #9
10011b52:	2001      	movs	r0, #1
10011b54:	6032      	str	r2, [r6, #0]
10011b56:	3237      	adds	r2, #55	; 0x37
10011b58:	4313      	orrs	r3, r2
10011b5a:	81a3      	strh	r3, [r4, #12]
10011b5c:	4240      	negs	r0, r0
10011b5e:	e042      	b.n	10011be6 <__swsetup_r+0xda>
10011b60:	0753      	lsls	r3, r2, #29
10011b62:	d513      	bpl.n	10011b8c <__swsetup_r+0x80>
10011b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011b66:	2900      	cmp	r1, #0
10011b68:	d008      	beq.n	10011b7c <__swsetup_r+0x70>
10011b6a:	0023      	movs	r3, r4
10011b6c:	3344      	adds	r3, #68	; 0x44
10011b6e:	4299      	cmp	r1, r3
10011b70:	d002      	beq.n	10011b78 <__swsetup_r+0x6c>
10011b72:	0030      	movs	r0, r6
10011b74:	f7ff fd34 	bl	100115e0 <_free_r>
10011b78:	2300      	movs	r3, #0
10011b7a:	6363      	str	r3, [r4, #52]	; 0x34
10011b7c:	2224      	movs	r2, #36	; 0x24
10011b7e:	89a3      	ldrh	r3, [r4, #12]
10011b80:	4393      	bics	r3, r2
10011b82:	81a3      	strh	r3, [r4, #12]
10011b84:	2300      	movs	r3, #0
10011b86:	6063      	str	r3, [r4, #4]
10011b88:	6923      	ldr	r3, [r4, #16]
10011b8a:	6023      	str	r3, [r4, #0]
10011b8c:	2208      	movs	r2, #8
10011b8e:	89a3      	ldrh	r3, [r4, #12]
10011b90:	4313      	orrs	r3, r2
10011b92:	81a3      	strh	r3, [r4, #12]
10011b94:	6923      	ldr	r3, [r4, #16]
10011b96:	2b00      	cmp	r3, #0
10011b98:	d10b      	bne.n	10011bb2 <__swsetup_r+0xa6>
10011b9a:	23a0      	movs	r3, #160	; 0xa0
10011b9c:	89a2      	ldrh	r2, [r4, #12]
10011b9e:	009b      	lsls	r3, r3, #2
10011ba0:	4013      	ands	r3, r2
10011ba2:	2280      	movs	r2, #128	; 0x80
10011ba4:	0092      	lsls	r2, r2, #2
10011ba6:	4293      	cmp	r3, r2
10011ba8:	d003      	beq.n	10011bb2 <__swsetup_r+0xa6>
10011baa:	0021      	movs	r1, r4
10011bac:	0030      	movs	r0, r6
10011bae:	f000 f9d1 	bl	10011f54 <__smakebuf_r>
10011bb2:	2301      	movs	r3, #1
10011bb4:	89a2      	ldrh	r2, [r4, #12]
10011bb6:	4013      	ands	r3, r2
10011bb8:	d005      	beq.n	10011bc6 <__swsetup_r+0xba>
10011bba:	2300      	movs	r3, #0
10011bbc:	60a3      	str	r3, [r4, #8]
10011bbe:	6963      	ldr	r3, [r4, #20]
10011bc0:	425b      	negs	r3, r3
10011bc2:	61a3      	str	r3, [r4, #24]
10011bc4:	e003      	b.n	10011bce <__swsetup_r+0xc2>
10011bc6:	0792      	lsls	r2, r2, #30
10011bc8:	d400      	bmi.n	10011bcc <__swsetup_r+0xc0>
10011bca:	6963      	ldr	r3, [r4, #20]
10011bcc:	60a3      	str	r3, [r4, #8]
10011bce:	2000      	movs	r0, #0
10011bd0:	6923      	ldr	r3, [r4, #16]
10011bd2:	4283      	cmp	r3, r0
10011bd4:	d107      	bne.n	10011be6 <__swsetup_r+0xda>
10011bd6:	220c      	movs	r2, #12
10011bd8:	5ea3      	ldrsh	r3, [r4, r2]
10011bda:	061a      	lsls	r2, r3, #24
10011bdc:	d503      	bpl.n	10011be6 <__swsetup_r+0xda>
10011bde:	2240      	movs	r2, #64	; 0x40
10011be0:	4313      	orrs	r3, r2
10011be2:	81a3      	strh	r3, [r4, #12]
10011be4:	3801      	subs	r0, #1
10011be6:	bd70      	pop	{r4, r5, r6, pc}
10011be8:	100138ec 	.word	0x100138ec
10011bec:	10013790 	.word	0x10013790
10011bf0:	100137b0 	.word	0x100137b0
10011bf4:	100137d0 	.word	0x100137d0

10011bf8 <__sflush_r>:
10011bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011bfa:	898a      	ldrh	r2, [r1, #12]
10011bfc:	0005      	movs	r5, r0
10011bfe:	000c      	movs	r4, r1
10011c00:	0713      	lsls	r3, r2, #28
10011c02:	d45a      	bmi.n	10011cba <__sflush_r+0xc2>
10011c04:	684b      	ldr	r3, [r1, #4]
10011c06:	2b00      	cmp	r3, #0
10011c08:	dc02      	bgt.n	10011c10 <__sflush_r+0x18>
10011c0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011c0c:	2b00      	cmp	r3, #0
10011c0e:	dd19      	ble.n	10011c44 <__sflush_r+0x4c>
10011c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011c12:	2f00      	cmp	r7, #0
10011c14:	d016      	beq.n	10011c44 <__sflush_r+0x4c>
10011c16:	2300      	movs	r3, #0
10011c18:	682e      	ldr	r6, [r5, #0]
10011c1a:	602b      	str	r3, [r5, #0]
10011c1c:	2380      	movs	r3, #128	; 0x80
10011c1e:	015b      	lsls	r3, r3, #5
10011c20:	401a      	ands	r2, r3
10011c22:	d001      	beq.n	10011c28 <__sflush_r+0x30>
10011c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011c26:	e014      	b.n	10011c52 <__sflush_r+0x5a>
10011c28:	2301      	movs	r3, #1
10011c2a:	6a21      	ldr	r1, [r4, #32]
10011c2c:	0028      	movs	r0, r5
10011c2e:	47b8      	blx	r7
10011c30:	1c43      	adds	r3, r0, #1
10011c32:	d10e      	bne.n	10011c52 <__sflush_r+0x5a>
10011c34:	682b      	ldr	r3, [r5, #0]
10011c36:	2b00      	cmp	r3, #0
10011c38:	d00b      	beq.n	10011c52 <__sflush_r+0x5a>
10011c3a:	2b1d      	cmp	r3, #29
10011c3c:	d001      	beq.n	10011c42 <__sflush_r+0x4a>
10011c3e:	2b16      	cmp	r3, #22
10011c40:	d102      	bne.n	10011c48 <__sflush_r+0x50>
10011c42:	602e      	str	r6, [r5, #0]
10011c44:	2000      	movs	r0, #0
10011c46:	e05a      	b.n	10011cfe <__sflush_r+0x106>
10011c48:	2240      	movs	r2, #64	; 0x40
10011c4a:	89a3      	ldrh	r3, [r4, #12]
10011c4c:	4313      	orrs	r3, r2
10011c4e:	81a3      	strh	r3, [r4, #12]
10011c50:	e055      	b.n	10011cfe <__sflush_r+0x106>
10011c52:	89a3      	ldrh	r3, [r4, #12]
10011c54:	075b      	lsls	r3, r3, #29
10011c56:	d506      	bpl.n	10011c66 <__sflush_r+0x6e>
10011c58:	6863      	ldr	r3, [r4, #4]
10011c5a:	1ac0      	subs	r0, r0, r3
10011c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011c5e:	2b00      	cmp	r3, #0
10011c60:	d001      	beq.n	10011c66 <__sflush_r+0x6e>
10011c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011c64:	1ac0      	subs	r0, r0, r3
10011c66:	2300      	movs	r3, #0
10011c68:	0002      	movs	r2, r0
10011c6a:	6a21      	ldr	r1, [r4, #32]
10011c6c:	0028      	movs	r0, r5
10011c6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011c70:	47b8      	blx	r7
10011c72:	89a3      	ldrh	r3, [r4, #12]
10011c74:	1c42      	adds	r2, r0, #1
10011c76:	d106      	bne.n	10011c86 <__sflush_r+0x8e>
10011c78:	6829      	ldr	r1, [r5, #0]
10011c7a:	291d      	cmp	r1, #29
10011c7c:	d83a      	bhi.n	10011cf4 <__sflush_r+0xfc>
10011c7e:	4a20      	ldr	r2, [pc, #128]	; (10011d00 <__sflush_r+0x108>)
10011c80:	40ca      	lsrs	r2, r1
10011c82:	07d2      	lsls	r2, r2, #31
10011c84:	d536      	bpl.n	10011cf4 <__sflush_r+0xfc>
10011c86:	2200      	movs	r2, #0
10011c88:	6062      	str	r2, [r4, #4]
10011c8a:	6922      	ldr	r2, [r4, #16]
10011c8c:	6022      	str	r2, [r4, #0]
10011c8e:	04db      	lsls	r3, r3, #19
10011c90:	d505      	bpl.n	10011c9e <__sflush_r+0xa6>
10011c92:	1c43      	adds	r3, r0, #1
10011c94:	d102      	bne.n	10011c9c <__sflush_r+0xa4>
10011c96:	682b      	ldr	r3, [r5, #0]
10011c98:	2b00      	cmp	r3, #0
10011c9a:	d100      	bne.n	10011c9e <__sflush_r+0xa6>
10011c9c:	6560      	str	r0, [r4, #84]	; 0x54
10011c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011ca0:	602e      	str	r6, [r5, #0]
10011ca2:	2900      	cmp	r1, #0
10011ca4:	d0ce      	beq.n	10011c44 <__sflush_r+0x4c>
10011ca6:	0023      	movs	r3, r4
10011ca8:	3344      	adds	r3, #68	; 0x44
10011caa:	4299      	cmp	r1, r3
10011cac:	d002      	beq.n	10011cb4 <__sflush_r+0xbc>
10011cae:	0028      	movs	r0, r5
10011cb0:	f7ff fc96 	bl	100115e0 <_free_r>
10011cb4:	2000      	movs	r0, #0
10011cb6:	6360      	str	r0, [r4, #52]	; 0x34
10011cb8:	e021      	b.n	10011cfe <__sflush_r+0x106>
10011cba:	690f      	ldr	r7, [r1, #16]
10011cbc:	2f00      	cmp	r7, #0
10011cbe:	d0c1      	beq.n	10011c44 <__sflush_r+0x4c>
10011cc0:	680b      	ldr	r3, [r1, #0]
10011cc2:	600f      	str	r7, [r1, #0]
10011cc4:	1bdb      	subs	r3, r3, r7
10011cc6:	9301      	str	r3, [sp, #4]
10011cc8:	2300      	movs	r3, #0
10011cca:	0792      	lsls	r2, r2, #30
10011ccc:	d100      	bne.n	10011cd0 <__sflush_r+0xd8>
10011cce:	694b      	ldr	r3, [r1, #20]
10011cd0:	60a3      	str	r3, [r4, #8]
10011cd2:	e003      	b.n	10011cdc <__sflush_r+0xe4>
10011cd4:	9b01      	ldr	r3, [sp, #4]
10011cd6:	183f      	adds	r7, r7, r0
10011cd8:	1a1b      	subs	r3, r3, r0
10011cda:	9301      	str	r3, [sp, #4]
10011cdc:	9b01      	ldr	r3, [sp, #4]
10011cde:	2b00      	cmp	r3, #0
10011ce0:	ddb0      	ble.n	10011c44 <__sflush_r+0x4c>
10011ce2:	9b01      	ldr	r3, [sp, #4]
10011ce4:	003a      	movs	r2, r7
10011ce6:	6a21      	ldr	r1, [r4, #32]
10011ce8:	0028      	movs	r0, r5
10011cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011cec:	47b0      	blx	r6
10011cee:	2800      	cmp	r0, #0
10011cf0:	dcf0      	bgt.n	10011cd4 <__sflush_r+0xdc>
10011cf2:	89a3      	ldrh	r3, [r4, #12]
10011cf4:	2240      	movs	r2, #64	; 0x40
10011cf6:	2001      	movs	r0, #1
10011cf8:	4313      	orrs	r3, r2
10011cfa:	81a3      	strh	r3, [r4, #12]
10011cfc:	4240      	negs	r0, r0
10011cfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011d00:	20400001 	.word	0x20400001

10011d04 <_fflush_r>:
10011d04:	690b      	ldr	r3, [r1, #16]
10011d06:	b570      	push	{r4, r5, r6, lr}
10011d08:	0005      	movs	r5, r0
10011d0a:	000c      	movs	r4, r1
10011d0c:	2b00      	cmp	r3, #0
10011d0e:	d101      	bne.n	10011d14 <_fflush_r+0x10>
10011d10:	2000      	movs	r0, #0
10011d12:	e01c      	b.n	10011d4e <_fflush_r+0x4a>
10011d14:	2800      	cmp	r0, #0
10011d16:	d004      	beq.n	10011d22 <_fflush_r+0x1e>
10011d18:	6983      	ldr	r3, [r0, #24]
10011d1a:	2b00      	cmp	r3, #0
10011d1c:	d101      	bne.n	10011d22 <_fflush_r+0x1e>
10011d1e:	f000 f85f 	bl	10011de0 <__sinit>
10011d22:	4b0b      	ldr	r3, [pc, #44]	; (10011d50 <_fflush_r+0x4c>)
10011d24:	429c      	cmp	r4, r3
10011d26:	d101      	bne.n	10011d2c <_fflush_r+0x28>
10011d28:	686c      	ldr	r4, [r5, #4]
10011d2a:	e008      	b.n	10011d3e <_fflush_r+0x3a>
10011d2c:	4b09      	ldr	r3, [pc, #36]	; (10011d54 <_fflush_r+0x50>)
10011d2e:	429c      	cmp	r4, r3
10011d30:	d101      	bne.n	10011d36 <_fflush_r+0x32>
10011d32:	68ac      	ldr	r4, [r5, #8]
10011d34:	e003      	b.n	10011d3e <_fflush_r+0x3a>
10011d36:	4b08      	ldr	r3, [pc, #32]	; (10011d58 <_fflush_r+0x54>)
10011d38:	429c      	cmp	r4, r3
10011d3a:	d100      	bne.n	10011d3e <_fflush_r+0x3a>
10011d3c:	68ec      	ldr	r4, [r5, #12]
10011d3e:	220c      	movs	r2, #12
10011d40:	5ea3      	ldrsh	r3, [r4, r2]
10011d42:	2b00      	cmp	r3, #0
10011d44:	d0e4      	beq.n	10011d10 <_fflush_r+0xc>
10011d46:	0021      	movs	r1, r4
10011d48:	0028      	movs	r0, r5
10011d4a:	f7ff ff55 	bl	10011bf8 <__sflush_r>
10011d4e:	bd70      	pop	{r4, r5, r6, pc}
10011d50:	10013790 	.word	0x10013790
10011d54:	100137b0 	.word	0x100137b0
10011d58:	100137d0 	.word	0x100137d0

10011d5c <_cleanup_r>:
10011d5c:	b510      	push	{r4, lr}
10011d5e:	4902      	ldr	r1, [pc, #8]	; (10011d68 <_cleanup_r+0xc>)
10011d60:	f000 f8b0 	bl	10011ec4 <_fwalk_reent>
10011d64:	bd10      	pop	{r4, pc}
10011d66:	46c0      	nop			; (mov r8, r8)
10011d68:	10011d05 	.word	0x10011d05

10011d6c <std.isra.0>:
10011d6c:	2300      	movs	r3, #0
10011d6e:	b510      	push	{r4, lr}
10011d70:	0004      	movs	r4, r0
10011d72:	6003      	str	r3, [r0, #0]
10011d74:	6043      	str	r3, [r0, #4]
10011d76:	6083      	str	r3, [r0, #8]
10011d78:	8181      	strh	r1, [r0, #12]
10011d7a:	6643      	str	r3, [r0, #100]	; 0x64
10011d7c:	81c2      	strh	r2, [r0, #14]
10011d7e:	6103      	str	r3, [r0, #16]
10011d80:	6143      	str	r3, [r0, #20]
10011d82:	6183      	str	r3, [r0, #24]
10011d84:	0019      	movs	r1, r3
10011d86:	2208      	movs	r2, #8
10011d88:	305c      	adds	r0, #92	; 0x5c
10011d8a:	f7ff fc21 	bl	100115d0 <memset>
10011d8e:	4b05      	ldr	r3, [pc, #20]	; (10011da4 <std.isra.0+0x38>)
10011d90:	6224      	str	r4, [r4, #32]
10011d92:	6263      	str	r3, [r4, #36]	; 0x24
10011d94:	4b04      	ldr	r3, [pc, #16]	; (10011da8 <std.isra.0+0x3c>)
10011d96:	62a3      	str	r3, [r4, #40]	; 0x28
10011d98:	4b04      	ldr	r3, [pc, #16]	; (10011dac <std.isra.0+0x40>)
10011d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
10011d9c:	4b04      	ldr	r3, [pc, #16]	; (10011db0 <std.isra.0+0x44>)
10011d9e:	6323      	str	r3, [r4, #48]	; 0x30
10011da0:	bd10      	pop	{r4, pc}
10011da2:	46c0      	nop			; (mov r8, r8)
10011da4:	100125e5 	.word	0x100125e5
10011da8:	1001260d 	.word	0x1001260d
10011dac:	10012645 	.word	0x10012645
10011db0:	10012671 	.word	0x10012671

10011db4 <__sfmoreglue>:
10011db4:	b570      	push	{r4, r5, r6, lr}
10011db6:	2568      	movs	r5, #104	; 0x68
10011db8:	1e4b      	subs	r3, r1, #1
10011dba:	435d      	muls	r5, r3
10011dbc:	000e      	movs	r6, r1
10011dbe:	0029      	movs	r1, r5
10011dc0:	3174      	adds	r1, #116	; 0x74
10011dc2:	f7ff fc53 	bl	1001166c <_malloc_r>
10011dc6:	1e04      	subs	r4, r0, #0
10011dc8:	d008      	beq.n	10011ddc <__sfmoreglue+0x28>
10011dca:	2100      	movs	r1, #0
10011dcc:	002a      	movs	r2, r5
10011dce:	6001      	str	r1, [r0, #0]
10011dd0:	6046      	str	r6, [r0, #4]
10011dd2:	300c      	adds	r0, #12
10011dd4:	60a0      	str	r0, [r4, #8]
10011dd6:	3268      	adds	r2, #104	; 0x68
10011dd8:	f7ff fbfa 	bl	100115d0 <memset>
10011ddc:	0020      	movs	r0, r4
10011dde:	bd70      	pop	{r4, r5, r6, pc}

10011de0 <__sinit>:
10011de0:	6983      	ldr	r3, [r0, #24]
10011de2:	b513      	push	{r0, r1, r4, lr}
10011de4:	0004      	movs	r4, r0
10011de6:	2b00      	cmp	r3, #0
10011de8:	d128      	bne.n	10011e3c <__sinit+0x5c>
10011dea:	6483      	str	r3, [r0, #72]	; 0x48
10011dec:	64c3      	str	r3, [r0, #76]	; 0x4c
10011dee:	6503      	str	r3, [r0, #80]	; 0x50
10011df0:	4b13      	ldr	r3, [pc, #76]	; (10011e40 <__sinit+0x60>)
10011df2:	4a14      	ldr	r2, [pc, #80]	; (10011e44 <__sinit+0x64>)
10011df4:	681b      	ldr	r3, [r3, #0]
10011df6:	6282      	str	r2, [r0, #40]	; 0x28
10011df8:	9301      	str	r3, [sp, #4]
10011dfa:	4298      	cmp	r0, r3
10011dfc:	d101      	bne.n	10011e02 <__sinit+0x22>
10011dfe:	2301      	movs	r3, #1
10011e00:	6183      	str	r3, [r0, #24]
10011e02:	0020      	movs	r0, r4
10011e04:	f000 f820 	bl	10011e48 <__sfp>
10011e08:	6060      	str	r0, [r4, #4]
10011e0a:	0020      	movs	r0, r4
10011e0c:	f000 f81c 	bl	10011e48 <__sfp>
10011e10:	60a0      	str	r0, [r4, #8]
10011e12:	0020      	movs	r0, r4
10011e14:	f000 f818 	bl	10011e48 <__sfp>
10011e18:	2200      	movs	r2, #0
10011e1a:	60e0      	str	r0, [r4, #12]
10011e1c:	2104      	movs	r1, #4
10011e1e:	6860      	ldr	r0, [r4, #4]
10011e20:	f7ff ffa4 	bl	10011d6c <std.isra.0>
10011e24:	2201      	movs	r2, #1
10011e26:	2109      	movs	r1, #9
10011e28:	68a0      	ldr	r0, [r4, #8]
10011e2a:	f7ff ff9f 	bl	10011d6c <std.isra.0>
10011e2e:	2202      	movs	r2, #2
10011e30:	2112      	movs	r1, #18
10011e32:	68e0      	ldr	r0, [r4, #12]
10011e34:	f7ff ff9a 	bl	10011d6c <std.isra.0>
10011e38:	2301      	movs	r3, #1
10011e3a:	61a3      	str	r3, [r4, #24]
10011e3c:	bd13      	pop	{r0, r1, r4, pc}
10011e3e:	46c0      	nop			; (mov r8, r8)
10011e40:	1001378c 	.word	0x1001378c
10011e44:	10011d5d 	.word	0x10011d5d

10011e48 <__sfp>:
10011e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011e4a:	4b1d      	ldr	r3, [pc, #116]	; (10011ec0 <__sfp+0x78>)
10011e4c:	0006      	movs	r6, r0
10011e4e:	681d      	ldr	r5, [r3, #0]
10011e50:	69ab      	ldr	r3, [r5, #24]
10011e52:	2b00      	cmp	r3, #0
10011e54:	d102      	bne.n	10011e5c <__sfp+0x14>
10011e56:	0028      	movs	r0, r5
10011e58:	f7ff ffc2 	bl	10011de0 <__sinit>
10011e5c:	3548      	adds	r5, #72	; 0x48
10011e5e:	68ac      	ldr	r4, [r5, #8]
10011e60:	686b      	ldr	r3, [r5, #4]
10011e62:	3b01      	subs	r3, #1
10011e64:	d405      	bmi.n	10011e72 <__sfp+0x2a>
10011e66:	220c      	movs	r2, #12
10011e68:	5ea7      	ldrsh	r7, [r4, r2]
10011e6a:	2f00      	cmp	r7, #0
10011e6c:	d010      	beq.n	10011e90 <__sfp+0x48>
10011e6e:	3468      	adds	r4, #104	; 0x68
10011e70:	e7f7      	b.n	10011e62 <__sfp+0x1a>
10011e72:	682b      	ldr	r3, [r5, #0]
10011e74:	2b00      	cmp	r3, #0
10011e76:	d001      	beq.n	10011e7c <__sfp+0x34>
10011e78:	682d      	ldr	r5, [r5, #0]
10011e7a:	e7f0      	b.n	10011e5e <__sfp+0x16>
10011e7c:	2104      	movs	r1, #4
10011e7e:	0030      	movs	r0, r6
10011e80:	f7ff ff98 	bl	10011db4 <__sfmoreglue>
10011e84:	6028      	str	r0, [r5, #0]
10011e86:	2800      	cmp	r0, #0
10011e88:	d1f6      	bne.n	10011e78 <__sfp+0x30>
10011e8a:	230c      	movs	r3, #12
10011e8c:	6033      	str	r3, [r6, #0]
10011e8e:	e016      	b.n	10011ebe <__sfp+0x76>
10011e90:	2301      	movs	r3, #1
10011e92:	0020      	movs	r0, r4
10011e94:	425b      	negs	r3, r3
10011e96:	81e3      	strh	r3, [r4, #14]
10011e98:	3302      	adds	r3, #2
10011e9a:	81a3      	strh	r3, [r4, #12]
10011e9c:	6667      	str	r7, [r4, #100]	; 0x64
10011e9e:	6027      	str	r7, [r4, #0]
10011ea0:	60a7      	str	r7, [r4, #8]
10011ea2:	6067      	str	r7, [r4, #4]
10011ea4:	6127      	str	r7, [r4, #16]
10011ea6:	6167      	str	r7, [r4, #20]
10011ea8:	61a7      	str	r7, [r4, #24]
10011eaa:	305c      	adds	r0, #92	; 0x5c
10011eac:	2208      	movs	r2, #8
10011eae:	0039      	movs	r1, r7
10011eb0:	f7ff fb8e 	bl	100115d0 <memset>
10011eb4:	0020      	movs	r0, r4
10011eb6:	6367      	str	r7, [r4, #52]	; 0x34
10011eb8:	63a7      	str	r7, [r4, #56]	; 0x38
10011eba:	64a7      	str	r7, [r4, #72]	; 0x48
10011ebc:	64e7      	str	r7, [r4, #76]	; 0x4c
10011ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011ec0:	1001378c 	.word	0x1001378c

10011ec4 <_fwalk_reent>:
10011ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ec6:	0004      	movs	r4, r0
10011ec8:	0007      	movs	r7, r0
10011eca:	2600      	movs	r6, #0
10011ecc:	9101      	str	r1, [sp, #4]
10011ece:	3448      	adds	r4, #72	; 0x48
10011ed0:	2c00      	cmp	r4, #0
10011ed2:	d016      	beq.n	10011f02 <_fwalk_reent+0x3e>
10011ed4:	6863      	ldr	r3, [r4, #4]
10011ed6:	68a5      	ldr	r5, [r4, #8]
10011ed8:	9300      	str	r3, [sp, #0]
10011eda:	9b00      	ldr	r3, [sp, #0]
10011edc:	3b01      	subs	r3, #1
10011ede:	9300      	str	r3, [sp, #0]
10011ee0:	d40d      	bmi.n	10011efe <_fwalk_reent+0x3a>
10011ee2:	89ab      	ldrh	r3, [r5, #12]
10011ee4:	2b01      	cmp	r3, #1
10011ee6:	d908      	bls.n	10011efa <_fwalk_reent+0x36>
10011ee8:	220e      	movs	r2, #14
10011eea:	5eab      	ldrsh	r3, [r5, r2]
10011eec:	3301      	adds	r3, #1
10011eee:	d004      	beq.n	10011efa <_fwalk_reent+0x36>
10011ef0:	0029      	movs	r1, r5
10011ef2:	0038      	movs	r0, r7
10011ef4:	9b01      	ldr	r3, [sp, #4]
10011ef6:	4798      	blx	r3
10011ef8:	4306      	orrs	r6, r0
10011efa:	3568      	adds	r5, #104	; 0x68
10011efc:	e7ed      	b.n	10011eda <_fwalk_reent+0x16>
10011efe:	6824      	ldr	r4, [r4, #0]
10011f00:	e7e6      	b.n	10011ed0 <_fwalk_reent+0xc>
10011f02:	0030      	movs	r0, r6
10011f04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011f08 <__swhatbuf_r>:
10011f08:	b570      	push	{r4, r5, r6, lr}
10011f0a:	000e      	movs	r6, r1
10011f0c:	001d      	movs	r5, r3
10011f0e:	230e      	movs	r3, #14
10011f10:	5ec9      	ldrsh	r1, [r1, r3]
10011f12:	b090      	sub	sp, #64	; 0x40
10011f14:	0014      	movs	r4, r2
10011f16:	2900      	cmp	r1, #0
10011f18:	da06      	bge.n	10011f28 <__swhatbuf_r+0x20>
10011f1a:	2300      	movs	r3, #0
10011f1c:	602b      	str	r3, [r5, #0]
10011f1e:	89b3      	ldrh	r3, [r6, #12]
10011f20:	061b      	lsls	r3, r3, #24
10011f22:	d50f      	bpl.n	10011f44 <__swhatbuf_r+0x3c>
10011f24:	2340      	movs	r3, #64	; 0x40
10011f26:	e00f      	b.n	10011f48 <__swhatbuf_r+0x40>
10011f28:	aa01      	add	r2, sp, #4
10011f2a:	f000 fbcd 	bl	100126c8 <_fstat_r>
10011f2e:	2800      	cmp	r0, #0
10011f30:	dbf3      	blt.n	10011f1a <__swhatbuf_r+0x12>
10011f32:	23f0      	movs	r3, #240	; 0xf0
10011f34:	9a02      	ldr	r2, [sp, #8]
10011f36:	021b      	lsls	r3, r3, #8
10011f38:	4013      	ands	r3, r2
10011f3a:	4a05      	ldr	r2, [pc, #20]	; (10011f50 <__swhatbuf_r+0x48>)
10011f3c:	189b      	adds	r3, r3, r2
10011f3e:	425a      	negs	r2, r3
10011f40:	4153      	adcs	r3, r2
10011f42:	602b      	str	r3, [r5, #0]
10011f44:	2380      	movs	r3, #128	; 0x80
10011f46:	00db      	lsls	r3, r3, #3
10011f48:	2000      	movs	r0, #0
10011f4a:	6023      	str	r3, [r4, #0]
10011f4c:	b010      	add	sp, #64	; 0x40
10011f4e:	bd70      	pop	{r4, r5, r6, pc}
10011f50:	ffffe000 	.word	0xffffe000

10011f54 <__smakebuf_r>:
10011f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011f56:	2602      	movs	r6, #2
10011f58:	898b      	ldrh	r3, [r1, #12]
10011f5a:	0005      	movs	r5, r0
10011f5c:	000c      	movs	r4, r1
10011f5e:	4233      	tst	r3, r6
10011f60:	d110      	bne.n	10011f84 <__smakebuf_r+0x30>
10011f62:	ab01      	add	r3, sp, #4
10011f64:	466a      	mov	r2, sp
10011f66:	f7ff ffcf 	bl	10011f08 <__swhatbuf_r>
10011f6a:	9900      	ldr	r1, [sp, #0]
10011f6c:	0007      	movs	r7, r0
10011f6e:	0028      	movs	r0, r5
10011f70:	f7ff fb7c 	bl	1001166c <_malloc_r>
10011f74:	2800      	cmp	r0, #0
10011f76:	d10c      	bne.n	10011f92 <__smakebuf_r+0x3e>
10011f78:	220c      	movs	r2, #12
10011f7a:	5ea3      	ldrsh	r3, [r4, r2]
10011f7c:	059a      	lsls	r2, r3, #22
10011f7e:	d423      	bmi.n	10011fc8 <__smakebuf_r+0x74>
10011f80:	4333      	orrs	r3, r6
10011f82:	81a3      	strh	r3, [r4, #12]
10011f84:	0023      	movs	r3, r4
10011f86:	3347      	adds	r3, #71	; 0x47
10011f88:	6023      	str	r3, [r4, #0]
10011f8a:	6123      	str	r3, [r4, #16]
10011f8c:	2301      	movs	r3, #1
10011f8e:	6163      	str	r3, [r4, #20]
10011f90:	e01a      	b.n	10011fc8 <__smakebuf_r+0x74>
10011f92:	2280      	movs	r2, #128	; 0x80
10011f94:	4b0d      	ldr	r3, [pc, #52]	; (10011fcc <__smakebuf_r+0x78>)
10011f96:	62ab      	str	r3, [r5, #40]	; 0x28
10011f98:	89a3      	ldrh	r3, [r4, #12]
10011f9a:	6020      	str	r0, [r4, #0]
10011f9c:	4313      	orrs	r3, r2
10011f9e:	81a3      	strh	r3, [r4, #12]
10011fa0:	9b00      	ldr	r3, [sp, #0]
10011fa2:	6120      	str	r0, [r4, #16]
10011fa4:	6163      	str	r3, [r4, #20]
10011fa6:	9b01      	ldr	r3, [sp, #4]
10011fa8:	2b00      	cmp	r3, #0
10011faa:	d00a      	beq.n	10011fc2 <__smakebuf_r+0x6e>
10011fac:	230e      	movs	r3, #14
10011fae:	5ee1      	ldrsh	r1, [r4, r3]
10011fb0:	0028      	movs	r0, r5
10011fb2:	f000 fb9b 	bl	100126ec <_isatty_r>
10011fb6:	2800      	cmp	r0, #0
10011fb8:	d003      	beq.n	10011fc2 <__smakebuf_r+0x6e>
10011fba:	2201      	movs	r2, #1
10011fbc:	89a3      	ldrh	r3, [r4, #12]
10011fbe:	4313      	orrs	r3, r2
10011fc0:	81a3      	strh	r3, [r4, #12]
10011fc2:	89a3      	ldrh	r3, [r4, #12]
10011fc4:	431f      	orrs	r7, r3
10011fc6:	81a7      	strh	r7, [r4, #12]
10011fc8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011fca:	46c0      	nop			; (mov r8, r8)
10011fcc:	10011d5d 	.word	0x10011d5d

10011fd0 <__sfputc_r>:
10011fd0:	6893      	ldr	r3, [r2, #8]
10011fd2:	b510      	push	{r4, lr}
10011fd4:	3b01      	subs	r3, #1
10011fd6:	6093      	str	r3, [r2, #8]
10011fd8:	2b00      	cmp	r3, #0
10011fda:	da05      	bge.n	10011fe8 <__sfputc_r+0x18>
10011fdc:	6994      	ldr	r4, [r2, #24]
10011fde:	42a3      	cmp	r3, r4
10011fe0:	db08      	blt.n	10011ff4 <__sfputc_r+0x24>
10011fe2:	b2cb      	uxtb	r3, r1
10011fe4:	2b0a      	cmp	r3, #10
10011fe6:	d005      	beq.n	10011ff4 <__sfputc_r+0x24>
10011fe8:	6813      	ldr	r3, [r2, #0]
10011fea:	1c58      	adds	r0, r3, #1
10011fec:	6010      	str	r0, [r2, #0]
10011fee:	7019      	strb	r1, [r3, #0]
10011ff0:	b2c8      	uxtb	r0, r1
10011ff2:	e001      	b.n	10011ff8 <__sfputc_r+0x28>
10011ff4:	f7ff fd32 	bl	10011a5c <__swbuf_r>
10011ff8:	bd10      	pop	{r4, pc}

10011ffa <__sfputs_r>:
10011ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011ffc:	0006      	movs	r6, r0
10011ffe:	000f      	movs	r7, r1
10012000:	0014      	movs	r4, r2
10012002:	18d5      	adds	r5, r2, r3
10012004:	42ac      	cmp	r4, r5
10012006:	d008      	beq.n	1001201a <__sfputs_r+0x20>
10012008:	7821      	ldrb	r1, [r4, #0]
1001200a:	003a      	movs	r2, r7
1001200c:	0030      	movs	r0, r6
1001200e:	f7ff ffdf 	bl	10011fd0 <__sfputc_r>
10012012:	3401      	adds	r4, #1
10012014:	1c43      	adds	r3, r0, #1
10012016:	d1f5      	bne.n	10012004 <__sfputs_r+0xa>
10012018:	e000      	b.n	1001201c <__sfputs_r+0x22>
1001201a:	2000      	movs	r0, #0
1001201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012020 <_vfiprintf_r>:
10012020:	b5f0      	push	{r4, r5, r6, r7, lr}
10012022:	b09f      	sub	sp, #124	; 0x7c
10012024:	0006      	movs	r6, r0
10012026:	000f      	movs	r7, r1
10012028:	9202      	str	r2, [sp, #8]
1001202a:	9305      	str	r3, [sp, #20]
1001202c:	2800      	cmp	r0, #0
1001202e:	d004      	beq.n	1001203a <_vfiprintf_r+0x1a>
10012030:	6983      	ldr	r3, [r0, #24]
10012032:	2b00      	cmp	r3, #0
10012034:	d101      	bne.n	1001203a <_vfiprintf_r+0x1a>
10012036:	f7ff fed3 	bl	10011de0 <__sinit>
1001203a:	4b7f      	ldr	r3, [pc, #508]	; (10012238 <_vfiprintf_r+0x218>)
1001203c:	429f      	cmp	r7, r3
1001203e:	d101      	bne.n	10012044 <_vfiprintf_r+0x24>
10012040:	6877      	ldr	r7, [r6, #4]
10012042:	e008      	b.n	10012056 <_vfiprintf_r+0x36>
10012044:	4b7d      	ldr	r3, [pc, #500]	; (1001223c <_vfiprintf_r+0x21c>)
10012046:	429f      	cmp	r7, r3
10012048:	d101      	bne.n	1001204e <_vfiprintf_r+0x2e>
1001204a:	68b7      	ldr	r7, [r6, #8]
1001204c:	e003      	b.n	10012056 <_vfiprintf_r+0x36>
1001204e:	4b7c      	ldr	r3, [pc, #496]	; (10012240 <_vfiprintf_r+0x220>)
10012050:	429f      	cmp	r7, r3
10012052:	d100      	bne.n	10012056 <_vfiprintf_r+0x36>
10012054:	68f7      	ldr	r7, [r6, #12]
10012056:	89bb      	ldrh	r3, [r7, #12]
10012058:	071b      	lsls	r3, r3, #28
1001205a:	d50a      	bpl.n	10012072 <_vfiprintf_r+0x52>
1001205c:	693b      	ldr	r3, [r7, #16]
1001205e:	2b00      	cmp	r3, #0
10012060:	d007      	beq.n	10012072 <_vfiprintf_r+0x52>
10012062:	2300      	movs	r3, #0
10012064:	ad06      	add	r5, sp, #24
10012066:	616b      	str	r3, [r5, #20]
10012068:	3320      	adds	r3, #32
1001206a:	766b      	strb	r3, [r5, #25]
1001206c:	3310      	adds	r3, #16
1001206e:	76ab      	strb	r3, [r5, #26]
10012070:	e03d      	b.n	100120ee <_vfiprintf_r+0xce>
10012072:	0039      	movs	r1, r7
10012074:	0030      	movs	r0, r6
10012076:	f7ff fd49 	bl	10011b0c <__swsetup_r>
1001207a:	2800      	cmp	r0, #0
1001207c:	d0f1      	beq.n	10012062 <_vfiprintf_r+0x42>
1001207e:	2001      	movs	r0, #1
10012080:	4240      	negs	r0, r0
10012082:	e0d6      	b.n	10012232 <_vfiprintf_r+0x212>
10012084:	9a05      	ldr	r2, [sp, #20]
10012086:	1d11      	adds	r1, r2, #4
10012088:	6812      	ldr	r2, [r2, #0]
1001208a:	9105      	str	r1, [sp, #20]
1001208c:	2a00      	cmp	r2, #0
1001208e:	da00      	bge.n	10012092 <_vfiprintf_r+0x72>
10012090:	e07f      	b.n	10012192 <_vfiprintf_r+0x172>
10012092:	9209      	str	r2, [sp, #36]	; 0x24
10012094:	3401      	adds	r4, #1
10012096:	7823      	ldrb	r3, [r4, #0]
10012098:	2b2e      	cmp	r3, #46	; 0x2e
1001209a:	d100      	bne.n	1001209e <_vfiprintf_r+0x7e>
1001209c:	e08d      	b.n	100121ba <_vfiprintf_r+0x19a>
1001209e:	7821      	ldrb	r1, [r4, #0]
100120a0:	2203      	movs	r2, #3
100120a2:	4868      	ldr	r0, [pc, #416]	; (10012244 <_vfiprintf_r+0x224>)
100120a4:	f000 fb48 	bl	10012738 <memchr>
100120a8:	2800      	cmp	r0, #0
100120aa:	d007      	beq.n	100120bc <_vfiprintf_r+0x9c>
100120ac:	4b65      	ldr	r3, [pc, #404]	; (10012244 <_vfiprintf_r+0x224>)
100120ae:	682a      	ldr	r2, [r5, #0]
100120b0:	1ac0      	subs	r0, r0, r3
100120b2:	2340      	movs	r3, #64	; 0x40
100120b4:	4083      	lsls	r3, r0
100120b6:	4313      	orrs	r3, r2
100120b8:	602b      	str	r3, [r5, #0]
100120ba:	3401      	adds	r4, #1
100120bc:	7821      	ldrb	r1, [r4, #0]
100120be:	1c63      	adds	r3, r4, #1
100120c0:	2206      	movs	r2, #6
100120c2:	4861      	ldr	r0, [pc, #388]	; (10012248 <_vfiprintf_r+0x228>)
100120c4:	9302      	str	r3, [sp, #8]
100120c6:	7629      	strb	r1, [r5, #24]
100120c8:	f000 fb36 	bl	10012738 <memchr>
100120cc:	2800      	cmp	r0, #0
100120ce:	d100      	bne.n	100120d2 <_vfiprintf_r+0xb2>
100120d0:	e09d      	b.n	1001220e <_vfiprintf_r+0x1ee>
100120d2:	4b5e      	ldr	r3, [pc, #376]	; (1001224c <_vfiprintf_r+0x22c>)
100120d4:	2b00      	cmp	r3, #0
100120d6:	d000      	beq.n	100120da <_vfiprintf_r+0xba>
100120d8:	e090      	b.n	100121fc <_vfiprintf_r+0x1dc>
100120da:	2207      	movs	r2, #7
100120dc:	9b05      	ldr	r3, [sp, #20]
100120de:	3307      	adds	r3, #7
100120e0:	4393      	bics	r3, r2
100120e2:	3308      	adds	r3, #8
100120e4:	9305      	str	r3, [sp, #20]
100120e6:	696b      	ldr	r3, [r5, #20]
100120e8:	9a03      	ldr	r2, [sp, #12]
100120ea:	189b      	adds	r3, r3, r2
100120ec:	616b      	str	r3, [r5, #20]
100120ee:	9c02      	ldr	r4, [sp, #8]
100120f0:	7823      	ldrb	r3, [r4, #0]
100120f2:	2b00      	cmp	r3, #0
100120f4:	d104      	bne.n	10012100 <_vfiprintf_r+0xe0>
100120f6:	9b02      	ldr	r3, [sp, #8]
100120f8:	1ae3      	subs	r3, r4, r3
100120fa:	9304      	str	r3, [sp, #16]
100120fc:	d012      	beq.n	10012124 <_vfiprintf_r+0x104>
100120fe:	e003      	b.n	10012108 <_vfiprintf_r+0xe8>
10012100:	2b25      	cmp	r3, #37	; 0x25
10012102:	d0f8      	beq.n	100120f6 <_vfiprintf_r+0xd6>
10012104:	3401      	adds	r4, #1
10012106:	e7f3      	b.n	100120f0 <_vfiprintf_r+0xd0>
10012108:	9b04      	ldr	r3, [sp, #16]
1001210a:	9a02      	ldr	r2, [sp, #8]
1001210c:	0039      	movs	r1, r7
1001210e:	0030      	movs	r0, r6
10012110:	f7ff ff73 	bl	10011ffa <__sfputs_r>
10012114:	1c43      	adds	r3, r0, #1
10012116:	d100      	bne.n	1001211a <_vfiprintf_r+0xfa>
10012118:	e086      	b.n	10012228 <_vfiprintf_r+0x208>
1001211a:	696a      	ldr	r2, [r5, #20]
1001211c:	9b04      	ldr	r3, [sp, #16]
1001211e:	4694      	mov	ip, r2
10012120:	4463      	add	r3, ip
10012122:	616b      	str	r3, [r5, #20]
10012124:	7823      	ldrb	r3, [r4, #0]
10012126:	2b00      	cmp	r3, #0
10012128:	d07e      	beq.n	10012228 <_vfiprintf_r+0x208>
1001212a:	2201      	movs	r2, #1
1001212c:	2300      	movs	r3, #0
1001212e:	4252      	negs	r2, r2
10012130:	606a      	str	r2, [r5, #4]
10012132:	a902      	add	r1, sp, #8
10012134:	3254      	adds	r2, #84	; 0x54
10012136:	1852      	adds	r2, r2, r1
10012138:	3401      	adds	r4, #1
1001213a:	602b      	str	r3, [r5, #0]
1001213c:	60eb      	str	r3, [r5, #12]
1001213e:	60ab      	str	r3, [r5, #8]
10012140:	7013      	strb	r3, [r2, #0]
10012142:	65ab      	str	r3, [r5, #88]	; 0x58
10012144:	7821      	ldrb	r1, [r4, #0]
10012146:	2205      	movs	r2, #5
10012148:	4841      	ldr	r0, [pc, #260]	; (10012250 <_vfiprintf_r+0x230>)
1001214a:	f000 faf5 	bl	10012738 <memchr>
1001214e:	2800      	cmp	r0, #0
10012150:	d008      	beq.n	10012164 <_vfiprintf_r+0x144>
10012152:	4b3f      	ldr	r3, [pc, #252]	; (10012250 <_vfiprintf_r+0x230>)
10012154:	682a      	ldr	r2, [r5, #0]
10012156:	1ac0      	subs	r0, r0, r3
10012158:	2301      	movs	r3, #1
1001215a:	4083      	lsls	r3, r0
1001215c:	4313      	orrs	r3, r2
1001215e:	602b      	str	r3, [r5, #0]
10012160:	3401      	adds	r4, #1
10012162:	e7ef      	b.n	10012144 <_vfiprintf_r+0x124>
10012164:	682b      	ldr	r3, [r5, #0]
10012166:	06da      	lsls	r2, r3, #27
10012168:	d504      	bpl.n	10012174 <_vfiprintf_r+0x154>
1001216a:	2253      	movs	r2, #83	; 0x53
1001216c:	2120      	movs	r1, #32
1001216e:	a802      	add	r0, sp, #8
10012170:	1812      	adds	r2, r2, r0
10012172:	7011      	strb	r1, [r2, #0]
10012174:	071a      	lsls	r2, r3, #28
10012176:	d504      	bpl.n	10012182 <_vfiprintf_r+0x162>
10012178:	2253      	movs	r2, #83	; 0x53
1001217a:	212b      	movs	r1, #43	; 0x2b
1001217c:	a802      	add	r0, sp, #8
1001217e:	1812      	adds	r2, r2, r0
10012180:	7011      	strb	r1, [r2, #0]
10012182:	7822      	ldrb	r2, [r4, #0]
10012184:	2a2a      	cmp	r2, #42	; 0x2a
10012186:	d100      	bne.n	1001218a <_vfiprintf_r+0x16a>
10012188:	e77c      	b.n	10012084 <_vfiprintf_r+0x64>
1001218a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001218c:	2000      	movs	r0, #0
1001218e:	210a      	movs	r1, #10
10012190:	e005      	b.n	1001219e <_vfiprintf_r+0x17e>
10012192:	4252      	negs	r2, r2
10012194:	60ea      	str	r2, [r5, #12]
10012196:	2202      	movs	r2, #2
10012198:	4313      	orrs	r3, r2
1001219a:	602b      	str	r3, [r5, #0]
1001219c:	e77a      	b.n	10012094 <_vfiprintf_r+0x74>
1001219e:	7822      	ldrb	r2, [r4, #0]
100121a0:	3a30      	subs	r2, #48	; 0x30
100121a2:	2a09      	cmp	r2, #9
100121a4:	d804      	bhi.n	100121b0 <_vfiprintf_r+0x190>
100121a6:	434b      	muls	r3, r1
100121a8:	3401      	adds	r4, #1
100121aa:	189b      	adds	r3, r3, r2
100121ac:	2001      	movs	r0, #1
100121ae:	e7f6      	b.n	1001219e <_vfiprintf_r+0x17e>
100121b0:	2800      	cmp	r0, #0
100121b2:	d100      	bne.n	100121b6 <_vfiprintf_r+0x196>
100121b4:	e76f      	b.n	10012096 <_vfiprintf_r+0x76>
100121b6:	9309      	str	r3, [sp, #36]	; 0x24
100121b8:	e76d      	b.n	10012096 <_vfiprintf_r+0x76>
100121ba:	7863      	ldrb	r3, [r4, #1]
100121bc:	2b2a      	cmp	r3, #42	; 0x2a
100121be:	d10a      	bne.n	100121d6 <_vfiprintf_r+0x1b6>
100121c0:	9b05      	ldr	r3, [sp, #20]
100121c2:	3402      	adds	r4, #2
100121c4:	1d1a      	adds	r2, r3, #4
100121c6:	681b      	ldr	r3, [r3, #0]
100121c8:	9205      	str	r2, [sp, #20]
100121ca:	2b00      	cmp	r3, #0
100121cc:	da01      	bge.n	100121d2 <_vfiprintf_r+0x1b2>
100121ce:	2301      	movs	r3, #1
100121d0:	425b      	negs	r3, r3
100121d2:	9307      	str	r3, [sp, #28]
100121d4:	e763      	b.n	1001209e <_vfiprintf_r+0x7e>
100121d6:	2300      	movs	r3, #0
100121d8:	200a      	movs	r0, #10
100121da:	001a      	movs	r2, r3
100121dc:	3401      	adds	r4, #1
100121de:	606b      	str	r3, [r5, #4]
100121e0:	7821      	ldrb	r1, [r4, #0]
100121e2:	3930      	subs	r1, #48	; 0x30
100121e4:	2909      	cmp	r1, #9
100121e6:	d804      	bhi.n	100121f2 <_vfiprintf_r+0x1d2>
100121e8:	4342      	muls	r2, r0
100121ea:	3401      	adds	r4, #1
100121ec:	1852      	adds	r2, r2, r1
100121ee:	2301      	movs	r3, #1
100121f0:	e7f6      	b.n	100121e0 <_vfiprintf_r+0x1c0>
100121f2:	2b00      	cmp	r3, #0
100121f4:	d100      	bne.n	100121f8 <_vfiprintf_r+0x1d8>
100121f6:	e752      	b.n	1001209e <_vfiprintf_r+0x7e>
100121f8:	9207      	str	r2, [sp, #28]
100121fa:	e750      	b.n	1001209e <_vfiprintf_r+0x7e>
100121fc:	ab05      	add	r3, sp, #20
100121fe:	9300      	str	r3, [sp, #0]
10012200:	003a      	movs	r2, r7
10012202:	4b14      	ldr	r3, [pc, #80]	; (10012254 <_vfiprintf_r+0x234>)
10012204:	0029      	movs	r1, r5
10012206:	0030      	movs	r0, r6
10012208:	e000      	b.n	1001220c <_vfiprintf_r+0x1ec>
1001220a:	bf00      	nop
1001220c:	e007      	b.n	1001221e <_vfiprintf_r+0x1fe>
1001220e:	ab05      	add	r3, sp, #20
10012210:	9300      	str	r3, [sp, #0]
10012212:	003a      	movs	r2, r7
10012214:	4b0f      	ldr	r3, [pc, #60]	; (10012254 <_vfiprintf_r+0x234>)
10012216:	0029      	movs	r1, r5
10012218:	0030      	movs	r0, r6
1001221a:	f000 f88b 	bl	10012334 <_printf_i>
1001221e:	9003      	str	r0, [sp, #12]
10012220:	9b03      	ldr	r3, [sp, #12]
10012222:	3301      	adds	r3, #1
10012224:	d000      	beq.n	10012228 <_vfiprintf_r+0x208>
10012226:	e75e      	b.n	100120e6 <_vfiprintf_r+0xc6>
10012228:	89bb      	ldrh	r3, [r7, #12]
1001222a:	065b      	lsls	r3, r3, #25
1001222c:	d500      	bpl.n	10012230 <_vfiprintf_r+0x210>
1001222e:	e726      	b.n	1001207e <_vfiprintf_r+0x5e>
10012230:	980b      	ldr	r0, [sp, #44]	; 0x2c
10012232:	b01f      	add	sp, #124	; 0x7c
10012234:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012236:	46c0      	nop			; (mov r8, r8)
10012238:	10013790 	.word	0x10013790
1001223c:	100137b0 	.word	0x100137b0
10012240:	100137d0 	.word	0x100137d0
10012244:	100137f6 	.word	0x100137f6
10012248:	100137fa 	.word	0x100137fa
1001224c:	00000000 	.word	0x00000000
10012250:	100137f0 	.word	0x100137f0
10012254:	10011ffb 	.word	0x10011ffb

10012258 <_printf_common>:
10012258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001225a:	0017      	movs	r7, r2
1001225c:	9301      	str	r3, [sp, #4]
1001225e:	688a      	ldr	r2, [r1, #8]
10012260:	690b      	ldr	r3, [r1, #16]
10012262:	9000      	str	r0, [sp, #0]
10012264:	000c      	movs	r4, r1
10012266:	4293      	cmp	r3, r2
10012268:	da00      	bge.n	1001226c <_printf_common+0x14>
1001226a:	0013      	movs	r3, r2
1001226c:	0022      	movs	r2, r4
1001226e:	603b      	str	r3, [r7, #0]
10012270:	3243      	adds	r2, #67	; 0x43
10012272:	7812      	ldrb	r2, [r2, #0]
10012274:	2a00      	cmp	r2, #0
10012276:	d001      	beq.n	1001227c <_printf_common+0x24>
10012278:	3301      	adds	r3, #1
1001227a:	603b      	str	r3, [r7, #0]
1001227c:	6823      	ldr	r3, [r4, #0]
1001227e:	069b      	lsls	r3, r3, #26
10012280:	d502      	bpl.n	10012288 <_printf_common+0x30>
10012282:	683b      	ldr	r3, [r7, #0]
10012284:	3302      	adds	r3, #2
10012286:	603b      	str	r3, [r7, #0]
10012288:	2506      	movs	r5, #6
1001228a:	6823      	ldr	r3, [r4, #0]
1001228c:	401d      	ands	r5, r3
1001228e:	d01e      	beq.n	100122ce <_printf_common+0x76>
10012290:	0023      	movs	r3, r4
10012292:	3343      	adds	r3, #67	; 0x43
10012294:	781b      	ldrb	r3, [r3, #0]
10012296:	1e5a      	subs	r2, r3, #1
10012298:	4193      	sbcs	r3, r2
1001229a:	6822      	ldr	r2, [r4, #0]
1001229c:	0692      	lsls	r2, r2, #26
1001229e:	d51c      	bpl.n	100122da <_printf_common+0x82>
100122a0:	2030      	movs	r0, #48	; 0x30
100122a2:	18e1      	adds	r1, r4, r3
100122a4:	3143      	adds	r1, #67	; 0x43
100122a6:	7008      	strb	r0, [r1, #0]
100122a8:	0021      	movs	r1, r4
100122aa:	1c5a      	adds	r2, r3, #1
100122ac:	3145      	adds	r1, #69	; 0x45
100122ae:	7809      	ldrb	r1, [r1, #0]
100122b0:	18a2      	adds	r2, r4, r2
100122b2:	3243      	adds	r2, #67	; 0x43
100122b4:	3302      	adds	r3, #2
100122b6:	7011      	strb	r1, [r2, #0]
100122b8:	e00f      	b.n	100122da <_printf_common+0x82>
100122ba:	0022      	movs	r2, r4
100122bc:	2301      	movs	r3, #1
100122be:	3219      	adds	r2, #25
100122c0:	9901      	ldr	r1, [sp, #4]
100122c2:	9800      	ldr	r0, [sp, #0]
100122c4:	9e08      	ldr	r6, [sp, #32]
100122c6:	47b0      	blx	r6
100122c8:	1c43      	adds	r3, r0, #1
100122ca:	d00e      	beq.n	100122ea <_printf_common+0x92>
100122cc:	3501      	adds	r5, #1
100122ce:	68e3      	ldr	r3, [r4, #12]
100122d0:	683a      	ldr	r2, [r7, #0]
100122d2:	1a9b      	subs	r3, r3, r2
100122d4:	429d      	cmp	r5, r3
100122d6:	dbf0      	blt.n	100122ba <_printf_common+0x62>
100122d8:	e7da      	b.n	10012290 <_printf_common+0x38>
100122da:	0022      	movs	r2, r4
100122dc:	9901      	ldr	r1, [sp, #4]
100122de:	3243      	adds	r2, #67	; 0x43
100122e0:	9800      	ldr	r0, [sp, #0]
100122e2:	9d08      	ldr	r5, [sp, #32]
100122e4:	47a8      	blx	r5
100122e6:	1c43      	adds	r3, r0, #1
100122e8:	d102      	bne.n	100122f0 <_printf_common+0x98>
100122ea:	2001      	movs	r0, #1
100122ec:	4240      	negs	r0, r0
100122ee:	e020      	b.n	10012332 <_printf_common+0xda>
100122f0:	2306      	movs	r3, #6
100122f2:	6820      	ldr	r0, [r4, #0]
100122f4:	68e1      	ldr	r1, [r4, #12]
100122f6:	683a      	ldr	r2, [r7, #0]
100122f8:	4003      	ands	r3, r0
100122fa:	2500      	movs	r5, #0
100122fc:	2b04      	cmp	r3, #4
100122fe:	d103      	bne.n	10012308 <_printf_common+0xb0>
10012300:	1a8d      	subs	r5, r1, r2
10012302:	43eb      	mvns	r3, r5
10012304:	17db      	asrs	r3, r3, #31
10012306:	401d      	ands	r5, r3
10012308:	68a3      	ldr	r3, [r4, #8]
1001230a:	6922      	ldr	r2, [r4, #16]
1001230c:	4293      	cmp	r3, r2
1001230e:	dd01      	ble.n	10012314 <_printf_common+0xbc>
10012310:	1a9b      	subs	r3, r3, r2
10012312:	18ed      	adds	r5, r5, r3
10012314:	2700      	movs	r7, #0
10012316:	42bd      	cmp	r5, r7
10012318:	d00a      	beq.n	10012330 <_printf_common+0xd8>
1001231a:	0022      	movs	r2, r4
1001231c:	2301      	movs	r3, #1
1001231e:	321a      	adds	r2, #26
10012320:	9901      	ldr	r1, [sp, #4]
10012322:	9800      	ldr	r0, [sp, #0]
10012324:	9e08      	ldr	r6, [sp, #32]
10012326:	47b0      	blx	r6
10012328:	1c43      	adds	r3, r0, #1
1001232a:	d0de      	beq.n	100122ea <_printf_common+0x92>
1001232c:	3701      	adds	r7, #1
1001232e:	e7f2      	b.n	10012316 <_printf_common+0xbe>
10012330:	2000      	movs	r0, #0
10012332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012334 <_printf_i>:
10012334:	b5f0      	push	{r4, r5, r6, r7, lr}
10012336:	b08b      	sub	sp, #44	; 0x2c
10012338:	9206      	str	r2, [sp, #24]
1001233a:	000a      	movs	r2, r1
1001233c:	3243      	adds	r2, #67	; 0x43
1001233e:	9307      	str	r3, [sp, #28]
10012340:	9005      	str	r0, [sp, #20]
10012342:	9204      	str	r2, [sp, #16]
10012344:	7e0a      	ldrb	r2, [r1, #24]
10012346:	000c      	movs	r4, r1
10012348:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001234a:	2a6e      	cmp	r2, #110	; 0x6e
1001234c:	d100      	bne.n	10012350 <_printf_i+0x1c>
1001234e:	e0ab      	b.n	100124a8 <_printf_i+0x174>
10012350:	d811      	bhi.n	10012376 <_printf_i+0x42>
10012352:	2a63      	cmp	r2, #99	; 0x63
10012354:	d022      	beq.n	1001239c <_printf_i+0x68>
10012356:	d809      	bhi.n	1001236c <_printf_i+0x38>
10012358:	2a00      	cmp	r2, #0
1001235a:	d100      	bne.n	1001235e <_printf_i+0x2a>
1001235c:	e0b5      	b.n	100124ca <_printf_i+0x196>
1001235e:	2a58      	cmp	r2, #88	; 0x58
10012360:	d000      	beq.n	10012364 <_printf_i+0x30>
10012362:	e0c5      	b.n	100124f0 <_printf_i+0x1bc>
10012364:	3145      	adds	r1, #69	; 0x45
10012366:	700a      	strb	r2, [r1, #0]
10012368:	4a81      	ldr	r2, [pc, #516]	; (10012570 <_printf_i+0x23c>)
1001236a:	e04f      	b.n	1001240c <_printf_i+0xd8>
1001236c:	2a64      	cmp	r2, #100	; 0x64
1001236e:	d01d      	beq.n	100123ac <_printf_i+0x78>
10012370:	2a69      	cmp	r2, #105	; 0x69
10012372:	d01b      	beq.n	100123ac <_printf_i+0x78>
10012374:	e0bc      	b.n	100124f0 <_printf_i+0x1bc>
10012376:	2a73      	cmp	r2, #115	; 0x73
10012378:	d100      	bne.n	1001237c <_printf_i+0x48>
1001237a:	e0aa      	b.n	100124d2 <_printf_i+0x19e>
1001237c:	d809      	bhi.n	10012392 <_printf_i+0x5e>
1001237e:	2a6f      	cmp	r2, #111	; 0x6f
10012380:	d029      	beq.n	100123d6 <_printf_i+0xa2>
10012382:	2a70      	cmp	r2, #112	; 0x70
10012384:	d000      	beq.n	10012388 <_printf_i+0x54>
10012386:	e0b3      	b.n	100124f0 <_printf_i+0x1bc>
10012388:	2220      	movs	r2, #32
1001238a:	6809      	ldr	r1, [r1, #0]
1001238c:	430a      	orrs	r2, r1
1001238e:	6022      	str	r2, [r4, #0]
10012390:	e037      	b.n	10012402 <_printf_i+0xce>
10012392:	2a75      	cmp	r2, #117	; 0x75
10012394:	d01f      	beq.n	100123d6 <_printf_i+0xa2>
10012396:	2a78      	cmp	r2, #120	; 0x78
10012398:	d033      	beq.n	10012402 <_printf_i+0xce>
1001239a:	e0a9      	b.n	100124f0 <_printf_i+0x1bc>
1001239c:	000e      	movs	r6, r1
1001239e:	681a      	ldr	r2, [r3, #0]
100123a0:	3642      	adds	r6, #66	; 0x42
100123a2:	1d11      	adds	r1, r2, #4
100123a4:	6019      	str	r1, [r3, #0]
100123a6:	6813      	ldr	r3, [r2, #0]
100123a8:	7033      	strb	r3, [r6, #0]
100123aa:	e0a4      	b.n	100124f6 <_printf_i+0x1c2>
100123ac:	6821      	ldr	r1, [r4, #0]
100123ae:	681a      	ldr	r2, [r3, #0]
100123b0:	0608      	lsls	r0, r1, #24
100123b2:	d406      	bmi.n	100123c2 <_printf_i+0x8e>
100123b4:	0649      	lsls	r1, r1, #25
100123b6:	d504      	bpl.n	100123c2 <_printf_i+0x8e>
100123b8:	1d11      	adds	r1, r2, #4
100123ba:	6019      	str	r1, [r3, #0]
100123bc:	2300      	movs	r3, #0
100123be:	5ed5      	ldrsh	r5, [r2, r3]
100123c0:	e002      	b.n	100123c8 <_printf_i+0x94>
100123c2:	1d11      	adds	r1, r2, #4
100123c4:	6019      	str	r1, [r3, #0]
100123c6:	6815      	ldr	r5, [r2, #0]
100123c8:	2d00      	cmp	r5, #0
100123ca:	da3b      	bge.n	10012444 <_printf_i+0x110>
100123cc:	232d      	movs	r3, #45	; 0x2d
100123ce:	9a04      	ldr	r2, [sp, #16]
100123d0:	426d      	negs	r5, r5
100123d2:	7013      	strb	r3, [r2, #0]
100123d4:	e036      	b.n	10012444 <_printf_i+0x110>
100123d6:	6821      	ldr	r1, [r4, #0]
100123d8:	681a      	ldr	r2, [r3, #0]
100123da:	0608      	lsls	r0, r1, #24
100123dc:	d406      	bmi.n	100123ec <_printf_i+0xb8>
100123de:	0649      	lsls	r1, r1, #25
100123e0:	d504      	bpl.n	100123ec <_printf_i+0xb8>
100123e2:	6815      	ldr	r5, [r2, #0]
100123e4:	1d11      	adds	r1, r2, #4
100123e6:	6019      	str	r1, [r3, #0]
100123e8:	b2ad      	uxth	r5, r5
100123ea:	e002      	b.n	100123f2 <_printf_i+0xbe>
100123ec:	1d11      	adds	r1, r2, #4
100123ee:	6019      	str	r1, [r3, #0]
100123f0:	6815      	ldr	r5, [r2, #0]
100123f2:	4b5f      	ldr	r3, [pc, #380]	; (10012570 <_printf_i+0x23c>)
100123f4:	7e22      	ldrb	r2, [r4, #24]
100123f6:	9303      	str	r3, [sp, #12]
100123f8:	2708      	movs	r7, #8
100123fa:	2a6f      	cmp	r2, #111	; 0x6f
100123fc:	d01d      	beq.n	1001243a <_printf_i+0x106>
100123fe:	270a      	movs	r7, #10
10012400:	e01b      	b.n	1001243a <_printf_i+0x106>
10012402:	0022      	movs	r2, r4
10012404:	2178      	movs	r1, #120	; 0x78
10012406:	3245      	adds	r2, #69	; 0x45
10012408:	7011      	strb	r1, [r2, #0]
1001240a:	4a5a      	ldr	r2, [pc, #360]	; (10012574 <_printf_i+0x240>)
1001240c:	6819      	ldr	r1, [r3, #0]
1001240e:	9203      	str	r2, [sp, #12]
10012410:	1d08      	adds	r0, r1, #4
10012412:	6822      	ldr	r2, [r4, #0]
10012414:	6018      	str	r0, [r3, #0]
10012416:	680d      	ldr	r5, [r1, #0]
10012418:	0610      	lsls	r0, r2, #24
1001241a:	d402      	bmi.n	10012422 <_printf_i+0xee>
1001241c:	0650      	lsls	r0, r2, #25
1001241e:	d500      	bpl.n	10012422 <_printf_i+0xee>
10012420:	b2ad      	uxth	r5, r5
10012422:	07d3      	lsls	r3, r2, #31
10012424:	d502      	bpl.n	1001242c <_printf_i+0xf8>
10012426:	2320      	movs	r3, #32
10012428:	431a      	orrs	r2, r3
1001242a:	6022      	str	r2, [r4, #0]
1001242c:	2710      	movs	r7, #16
1001242e:	2d00      	cmp	r5, #0
10012430:	d103      	bne.n	1001243a <_printf_i+0x106>
10012432:	2320      	movs	r3, #32
10012434:	6822      	ldr	r2, [r4, #0]
10012436:	439a      	bics	r2, r3
10012438:	6022      	str	r2, [r4, #0]
1001243a:	0023      	movs	r3, r4
1001243c:	2200      	movs	r2, #0
1001243e:	3343      	adds	r3, #67	; 0x43
10012440:	701a      	strb	r2, [r3, #0]
10012442:	e002      	b.n	1001244a <_printf_i+0x116>
10012444:	270a      	movs	r7, #10
10012446:	4b4a      	ldr	r3, [pc, #296]	; (10012570 <_printf_i+0x23c>)
10012448:	9303      	str	r3, [sp, #12]
1001244a:	6863      	ldr	r3, [r4, #4]
1001244c:	60a3      	str	r3, [r4, #8]
1001244e:	2b00      	cmp	r3, #0
10012450:	db09      	blt.n	10012466 <_printf_i+0x132>
10012452:	2204      	movs	r2, #4
10012454:	6821      	ldr	r1, [r4, #0]
10012456:	4391      	bics	r1, r2
10012458:	6021      	str	r1, [r4, #0]
1001245a:	2d00      	cmp	r5, #0
1001245c:	d105      	bne.n	1001246a <_printf_i+0x136>
1001245e:	9e04      	ldr	r6, [sp, #16]
10012460:	2b00      	cmp	r3, #0
10012462:	d011      	beq.n	10012488 <_printf_i+0x154>
10012464:	e07b      	b.n	1001255e <_printf_i+0x22a>
10012466:	2d00      	cmp	r5, #0
10012468:	d079      	beq.n	1001255e <_printf_i+0x22a>
1001246a:	9e04      	ldr	r6, [sp, #16]
1001246c:	0028      	movs	r0, r5
1001246e:	0039      	movs	r1, r7
10012470:	f7fd f8b2 	bl	1000f5d8 <__aeabi_uidivmod>
10012474:	9b03      	ldr	r3, [sp, #12]
10012476:	3e01      	subs	r6, #1
10012478:	5c5b      	ldrb	r3, [r3, r1]
1001247a:	0028      	movs	r0, r5
1001247c:	7033      	strb	r3, [r6, #0]
1001247e:	0039      	movs	r1, r7
10012480:	f7fd f824 	bl	1000f4cc <__aeabi_uidiv>
10012484:	1e05      	subs	r5, r0, #0
10012486:	d1f1      	bne.n	1001246c <_printf_i+0x138>
10012488:	2f08      	cmp	r7, #8
1001248a:	d109      	bne.n	100124a0 <_printf_i+0x16c>
1001248c:	6823      	ldr	r3, [r4, #0]
1001248e:	07db      	lsls	r3, r3, #31
10012490:	d506      	bpl.n	100124a0 <_printf_i+0x16c>
10012492:	6863      	ldr	r3, [r4, #4]
10012494:	6922      	ldr	r2, [r4, #16]
10012496:	4293      	cmp	r3, r2
10012498:	dc02      	bgt.n	100124a0 <_printf_i+0x16c>
1001249a:	2330      	movs	r3, #48	; 0x30
1001249c:	3e01      	subs	r6, #1
1001249e:	7033      	strb	r3, [r6, #0]
100124a0:	9b04      	ldr	r3, [sp, #16]
100124a2:	1b9b      	subs	r3, r3, r6
100124a4:	6123      	str	r3, [r4, #16]
100124a6:	e02b      	b.n	10012500 <_printf_i+0x1cc>
100124a8:	6809      	ldr	r1, [r1, #0]
100124aa:	681a      	ldr	r2, [r3, #0]
100124ac:	0608      	lsls	r0, r1, #24
100124ae:	d407      	bmi.n	100124c0 <_printf_i+0x18c>
100124b0:	0649      	lsls	r1, r1, #25
100124b2:	d505      	bpl.n	100124c0 <_printf_i+0x18c>
100124b4:	1d11      	adds	r1, r2, #4
100124b6:	6019      	str	r1, [r3, #0]
100124b8:	6813      	ldr	r3, [r2, #0]
100124ba:	8aa2      	ldrh	r2, [r4, #20]
100124bc:	801a      	strh	r2, [r3, #0]
100124be:	e004      	b.n	100124ca <_printf_i+0x196>
100124c0:	1d11      	adds	r1, r2, #4
100124c2:	6019      	str	r1, [r3, #0]
100124c4:	6813      	ldr	r3, [r2, #0]
100124c6:	6962      	ldr	r2, [r4, #20]
100124c8:	601a      	str	r2, [r3, #0]
100124ca:	2300      	movs	r3, #0
100124cc:	9e04      	ldr	r6, [sp, #16]
100124ce:	6123      	str	r3, [r4, #16]
100124d0:	e016      	b.n	10012500 <_printf_i+0x1cc>
100124d2:	681a      	ldr	r2, [r3, #0]
100124d4:	1d11      	adds	r1, r2, #4
100124d6:	6019      	str	r1, [r3, #0]
100124d8:	6816      	ldr	r6, [r2, #0]
100124da:	2100      	movs	r1, #0
100124dc:	6862      	ldr	r2, [r4, #4]
100124de:	0030      	movs	r0, r6
100124e0:	f000 f92a 	bl	10012738 <memchr>
100124e4:	2800      	cmp	r0, #0
100124e6:	d001      	beq.n	100124ec <_printf_i+0x1b8>
100124e8:	1b80      	subs	r0, r0, r6
100124ea:	6060      	str	r0, [r4, #4]
100124ec:	6863      	ldr	r3, [r4, #4]
100124ee:	e003      	b.n	100124f8 <_printf_i+0x1c4>
100124f0:	0026      	movs	r6, r4
100124f2:	3642      	adds	r6, #66	; 0x42
100124f4:	7032      	strb	r2, [r6, #0]
100124f6:	2301      	movs	r3, #1
100124f8:	6123      	str	r3, [r4, #16]
100124fa:	2300      	movs	r3, #0
100124fc:	9a04      	ldr	r2, [sp, #16]
100124fe:	7013      	strb	r3, [r2, #0]
10012500:	9b07      	ldr	r3, [sp, #28]
10012502:	aa09      	add	r2, sp, #36	; 0x24
10012504:	9300      	str	r3, [sp, #0]
10012506:	0021      	movs	r1, r4
10012508:	9b06      	ldr	r3, [sp, #24]
1001250a:	9805      	ldr	r0, [sp, #20]
1001250c:	f7ff fea4 	bl	10012258 <_printf_common>
10012510:	1c43      	adds	r3, r0, #1
10012512:	d102      	bne.n	1001251a <_printf_i+0x1e6>
10012514:	2001      	movs	r0, #1
10012516:	4240      	negs	r0, r0
10012518:	e027      	b.n	1001256a <_printf_i+0x236>
1001251a:	6923      	ldr	r3, [r4, #16]
1001251c:	0032      	movs	r2, r6
1001251e:	9906      	ldr	r1, [sp, #24]
10012520:	9805      	ldr	r0, [sp, #20]
10012522:	9d07      	ldr	r5, [sp, #28]
10012524:	47a8      	blx	r5
10012526:	1c43      	adds	r3, r0, #1
10012528:	d0f4      	beq.n	10012514 <_printf_i+0x1e0>
1001252a:	6823      	ldr	r3, [r4, #0]
1001252c:	2500      	movs	r5, #0
1001252e:	079b      	lsls	r3, r3, #30
10012530:	d40f      	bmi.n	10012552 <_printf_i+0x21e>
10012532:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012534:	68e0      	ldr	r0, [r4, #12]
10012536:	4298      	cmp	r0, r3
10012538:	da17      	bge.n	1001256a <_printf_i+0x236>
1001253a:	0018      	movs	r0, r3
1001253c:	e015      	b.n	1001256a <_printf_i+0x236>
1001253e:	0022      	movs	r2, r4
10012540:	2301      	movs	r3, #1
10012542:	3219      	adds	r2, #25
10012544:	9906      	ldr	r1, [sp, #24]
10012546:	9805      	ldr	r0, [sp, #20]
10012548:	9e07      	ldr	r6, [sp, #28]
1001254a:	47b0      	blx	r6
1001254c:	1c43      	adds	r3, r0, #1
1001254e:	d0e1      	beq.n	10012514 <_printf_i+0x1e0>
10012550:	3501      	adds	r5, #1
10012552:	68e3      	ldr	r3, [r4, #12]
10012554:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012556:	1a9b      	subs	r3, r3, r2
10012558:	429d      	cmp	r5, r3
1001255a:	dbf0      	blt.n	1001253e <_printf_i+0x20a>
1001255c:	e7e9      	b.n	10012532 <_printf_i+0x1fe>
1001255e:	0026      	movs	r6, r4
10012560:	9b03      	ldr	r3, [sp, #12]
10012562:	3642      	adds	r6, #66	; 0x42
10012564:	781b      	ldrb	r3, [r3, #0]
10012566:	7033      	strb	r3, [r6, #0]
10012568:	e78e      	b.n	10012488 <_printf_i+0x154>
1001256a:	b00b      	add	sp, #44	; 0x2c
1001256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001256e:	46c0      	nop			; (mov r8, r8)
10012570:	10013801 	.word	0x10013801
10012574:	10013812 	.word	0x10013812

10012578 <_putc_r>:
10012578:	b570      	push	{r4, r5, r6, lr}
1001257a:	0006      	movs	r6, r0
1001257c:	000d      	movs	r5, r1
1001257e:	0014      	movs	r4, r2
10012580:	2800      	cmp	r0, #0
10012582:	d004      	beq.n	1001258e <_putc_r+0x16>
10012584:	6983      	ldr	r3, [r0, #24]
10012586:	2b00      	cmp	r3, #0
10012588:	d101      	bne.n	1001258e <_putc_r+0x16>
1001258a:	f7ff fc29 	bl	10011de0 <__sinit>
1001258e:	4b12      	ldr	r3, [pc, #72]	; (100125d8 <_putc_r+0x60>)
10012590:	429c      	cmp	r4, r3
10012592:	d101      	bne.n	10012598 <_putc_r+0x20>
10012594:	6874      	ldr	r4, [r6, #4]
10012596:	e008      	b.n	100125aa <_putc_r+0x32>
10012598:	4b10      	ldr	r3, [pc, #64]	; (100125dc <_putc_r+0x64>)
1001259a:	429c      	cmp	r4, r3
1001259c:	d101      	bne.n	100125a2 <_putc_r+0x2a>
1001259e:	68b4      	ldr	r4, [r6, #8]
100125a0:	e003      	b.n	100125aa <_putc_r+0x32>
100125a2:	4b0f      	ldr	r3, [pc, #60]	; (100125e0 <_putc_r+0x68>)
100125a4:	429c      	cmp	r4, r3
100125a6:	d100      	bne.n	100125aa <_putc_r+0x32>
100125a8:	68f4      	ldr	r4, [r6, #12]
100125aa:	68a3      	ldr	r3, [r4, #8]
100125ac:	3b01      	subs	r3, #1
100125ae:	60a3      	str	r3, [r4, #8]
100125b0:	2b00      	cmp	r3, #0
100125b2:	da05      	bge.n	100125c0 <_putc_r+0x48>
100125b4:	69a2      	ldr	r2, [r4, #24]
100125b6:	4293      	cmp	r3, r2
100125b8:	db08      	blt.n	100125cc <_putc_r+0x54>
100125ba:	b2eb      	uxtb	r3, r5
100125bc:	2b0a      	cmp	r3, #10
100125be:	d005      	beq.n	100125cc <_putc_r+0x54>
100125c0:	6823      	ldr	r3, [r4, #0]
100125c2:	b2e8      	uxtb	r0, r5
100125c4:	1c5a      	adds	r2, r3, #1
100125c6:	6022      	str	r2, [r4, #0]
100125c8:	701d      	strb	r5, [r3, #0]
100125ca:	e004      	b.n	100125d6 <_putc_r+0x5e>
100125cc:	0022      	movs	r2, r4
100125ce:	0029      	movs	r1, r5
100125d0:	0030      	movs	r0, r6
100125d2:	f7ff fa43 	bl	10011a5c <__swbuf_r>
100125d6:	bd70      	pop	{r4, r5, r6, pc}
100125d8:	10013790 	.word	0x10013790
100125dc:	100137b0 	.word	0x100137b0
100125e0:	100137d0 	.word	0x100137d0

100125e4 <__sread>:
100125e4:	b570      	push	{r4, r5, r6, lr}
100125e6:	000c      	movs	r4, r1
100125e8:	250e      	movs	r5, #14
100125ea:	5f49      	ldrsh	r1, [r1, r5]
100125ec:	f000 f8b0 	bl	10012750 <_read_r>
100125f0:	2800      	cmp	r0, #0
100125f2:	db03      	blt.n	100125fc <__sread+0x18>
100125f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100125f6:	181b      	adds	r3, r3, r0
100125f8:	6563      	str	r3, [r4, #84]	; 0x54
100125fa:	e003      	b.n	10012604 <__sread+0x20>
100125fc:	89a2      	ldrh	r2, [r4, #12]
100125fe:	4b02      	ldr	r3, [pc, #8]	; (10012608 <__sread+0x24>)
10012600:	4013      	ands	r3, r2
10012602:	81a3      	strh	r3, [r4, #12]
10012604:	bd70      	pop	{r4, r5, r6, pc}
10012606:	46c0      	nop			; (mov r8, r8)
10012608:	ffffefff 	.word	0xffffefff

1001260c <__swrite>:
1001260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001260e:	001f      	movs	r7, r3
10012610:	898b      	ldrh	r3, [r1, #12]
10012612:	0005      	movs	r5, r0
10012614:	000c      	movs	r4, r1
10012616:	0016      	movs	r6, r2
10012618:	05db      	lsls	r3, r3, #23
1001261a:	d505      	bpl.n	10012628 <__swrite+0x1c>
1001261c:	230e      	movs	r3, #14
1001261e:	5ec9      	ldrsh	r1, [r1, r3]
10012620:	2200      	movs	r2, #0
10012622:	2302      	movs	r3, #2
10012624:	f000 f874 	bl	10012710 <_lseek_r>
10012628:	89a2      	ldrh	r2, [r4, #12]
1001262a:	4b05      	ldr	r3, [pc, #20]	; (10012640 <__swrite+0x34>)
1001262c:	0028      	movs	r0, r5
1001262e:	4013      	ands	r3, r2
10012630:	81a3      	strh	r3, [r4, #12]
10012632:	0032      	movs	r2, r6
10012634:	230e      	movs	r3, #14
10012636:	5ee1      	ldrsh	r1, [r4, r3]
10012638:	003b      	movs	r3, r7
1001263a:	f000 f81f 	bl	1001267c <_write_r>
1001263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012640:	ffffefff 	.word	0xffffefff

10012644 <__sseek>:
10012644:	b570      	push	{r4, r5, r6, lr}
10012646:	000c      	movs	r4, r1
10012648:	250e      	movs	r5, #14
1001264a:	5f49      	ldrsh	r1, [r1, r5]
1001264c:	f000 f860 	bl	10012710 <_lseek_r>
10012650:	89a3      	ldrh	r3, [r4, #12]
10012652:	1c42      	adds	r2, r0, #1
10012654:	d103      	bne.n	1001265e <__sseek+0x1a>
10012656:	4a05      	ldr	r2, [pc, #20]	; (1001266c <__sseek+0x28>)
10012658:	4013      	ands	r3, r2
1001265a:	81a3      	strh	r3, [r4, #12]
1001265c:	e004      	b.n	10012668 <__sseek+0x24>
1001265e:	2280      	movs	r2, #128	; 0x80
10012660:	0152      	lsls	r2, r2, #5
10012662:	4313      	orrs	r3, r2
10012664:	81a3      	strh	r3, [r4, #12]
10012666:	6560      	str	r0, [r4, #84]	; 0x54
10012668:	bd70      	pop	{r4, r5, r6, pc}
1001266a:	46c0      	nop			; (mov r8, r8)
1001266c:	ffffefff 	.word	0xffffefff

10012670 <__sclose>:
10012670:	b510      	push	{r4, lr}
10012672:	230e      	movs	r3, #14
10012674:	5ec9      	ldrsh	r1, [r1, r3]
10012676:	f000 f815 	bl	100126a4 <_close_r>
1001267a:	bd10      	pop	{r4, pc}

1001267c <_write_r>:
1001267c:	b570      	push	{r4, r5, r6, lr}
1001267e:	0005      	movs	r5, r0
10012680:	0008      	movs	r0, r1
10012682:	0011      	movs	r1, r2
10012684:	2200      	movs	r2, #0
10012686:	4c06      	ldr	r4, [pc, #24]	; (100126a0 <_write_r+0x24>)
10012688:	6022      	str	r2, [r4, #0]
1001268a:	001a      	movs	r2, r3
1001268c:	f7f8 ff1c 	bl	1000b4c8 <_write>
10012690:	1c43      	adds	r3, r0, #1
10012692:	d103      	bne.n	1001269c <_write_r+0x20>
10012694:	6823      	ldr	r3, [r4, #0]
10012696:	2b00      	cmp	r3, #0
10012698:	d000      	beq.n	1001269c <_write_r+0x20>
1001269a:	602b      	str	r3, [r5, #0]
1001269c:	bd70      	pop	{r4, r5, r6, pc}
1001269e:	46c0      	nop			; (mov r8, r8)
100126a0:	1001610c 	.word	0x1001610c

100126a4 <_close_r>:
100126a4:	2300      	movs	r3, #0
100126a6:	b570      	push	{r4, r5, r6, lr}
100126a8:	4c06      	ldr	r4, [pc, #24]	; (100126c4 <_close_r+0x20>)
100126aa:	0005      	movs	r5, r0
100126ac:	0008      	movs	r0, r1
100126ae:	6023      	str	r3, [r4, #0]
100126b0:	f7fa f90c 	bl	1000c8cc <_close>
100126b4:	1c43      	adds	r3, r0, #1
100126b6:	d103      	bne.n	100126c0 <_close_r+0x1c>
100126b8:	6823      	ldr	r3, [r4, #0]
100126ba:	2b00      	cmp	r3, #0
100126bc:	d000      	beq.n	100126c0 <_close_r+0x1c>
100126be:	602b      	str	r3, [r5, #0]
100126c0:	bd70      	pop	{r4, r5, r6, pc}
100126c2:	46c0      	nop			; (mov r8, r8)
100126c4:	1001610c 	.word	0x1001610c

100126c8 <_fstat_r>:
100126c8:	2300      	movs	r3, #0
100126ca:	b570      	push	{r4, r5, r6, lr}
100126cc:	4c06      	ldr	r4, [pc, #24]	; (100126e8 <_fstat_r+0x20>)
100126ce:	0005      	movs	r5, r0
100126d0:	0008      	movs	r0, r1
100126d2:	0011      	movs	r1, r2
100126d4:	6023      	str	r3, [r4, #0]
100126d6:	f7fa f8fd 	bl	1000c8d4 <_fstat>
100126da:	1c43      	adds	r3, r0, #1
100126dc:	d103      	bne.n	100126e6 <_fstat_r+0x1e>
100126de:	6823      	ldr	r3, [r4, #0]
100126e0:	2b00      	cmp	r3, #0
100126e2:	d000      	beq.n	100126e6 <_fstat_r+0x1e>
100126e4:	602b      	str	r3, [r5, #0]
100126e6:	bd70      	pop	{r4, r5, r6, pc}
100126e8:	1001610c 	.word	0x1001610c

100126ec <_isatty_r>:
100126ec:	2300      	movs	r3, #0
100126ee:	b570      	push	{r4, r5, r6, lr}
100126f0:	4c06      	ldr	r4, [pc, #24]	; (1001270c <_isatty_r+0x20>)
100126f2:	0005      	movs	r5, r0
100126f4:	0008      	movs	r0, r1
100126f6:	6023      	str	r3, [r4, #0]
100126f8:	f7fa f8f2 	bl	1000c8e0 <_isatty>
100126fc:	1c43      	adds	r3, r0, #1
100126fe:	d103      	bne.n	10012708 <_isatty_r+0x1c>
10012700:	6823      	ldr	r3, [r4, #0]
10012702:	2b00      	cmp	r3, #0
10012704:	d000      	beq.n	10012708 <_isatty_r+0x1c>
10012706:	602b      	str	r3, [r5, #0]
10012708:	bd70      	pop	{r4, r5, r6, pc}
1001270a:	46c0      	nop			; (mov r8, r8)
1001270c:	1001610c 	.word	0x1001610c

10012710 <_lseek_r>:
10012710:	b570      	push	{r4, r5, r6, lr}
10012712:	0005      	movs	r5, r0
10012714:	0008      	movs	r0, r1
10012716:	0011      	movs	r1, r2
10012718:	2200      	movs	r2, #0
1001271a:	4c06      	ldr	r4, [pc, #24]	; (10012734 <_lseek_r+0x24>)
1001271c:	6022      	str	r2, [r4, #0]
1001271e:	001a      	movs	r2, r3
10012720:	f7fa f8e0 	bl	1000c8e4 <_lseek>
10012724:	1c43      	adds	r3, r0, #1
10012726:	d103      	bne.n	10012730 <_lseek_r+0x20>
10012728:	6823      	ldr	r3, [r4, #0]
1001272a:	2b00      	cmp	r3, #0
1001272c:	d000      	beq.n	10012730 <_lseek_r+0x20>
1001272e:	602b      	str	r3, [r5, #0]
10012730:	bd70      	pop	{r4, r5, r6, pc}
10012732:	46c0      	nop			; (mov r8, r8)
10012734:	1001610c 	.word	0x1001610c

10012738 <memchr>:
10012738:	b2c9      	uxtb	r1, r1
1001273a:	1882      	adds	r2, r0, r2
1001273c:	4290      	cmp	r0, r2
1001273e:	d004      	beq.n	1001274a <memchr+0x12>
10012740:	7803      	ldrb	r3, [r0, #0]
10012742:	428b      	cmp	r3, r1
10012744:	d002      	beq.n	1001274c <memchr+0x14>
10012746:	3001      	adds	r0, #1
10012748:	e7f8      	b.n	1001273c <memchr+0x4>
1001274a:	2000      	movs	r0, #0
1001274c:	4770      	bx	lr
	...

10012750 <_read_r>:
10012750:	b570      	push	{r4, r5, r6, lr}
10012752:	0005      	movs	r5, r0
10012754:	0008      	movs	r0, r1
10012756:	0011      	movs	r1, r2
10012758:	2200      	movs	r2, #0
1001275a:	4c06      	ldr	r4, [pc, #24]	; (10012774 <_read_r+0x24>)
1001275c:	6022      	str	r2, [r4, #0]
1001275e:	001a      	movs	r2, r3
10012760:	f7f8 fe92 	bl	1000b488 <_read>
10012764:	1c43      	adds	r3, r0, #1
10012766:	d103      	bne.n	10012770 <_read_r+0x20>
10012768:	6823      	ldr	r3, [r4, #0]
1001276a:	2b00      	cmp	r3, #0
1001276c:	d000      	beq.n	10012770 <_read_r+0x20>
1001276e:	602b      	str	r3, [r5, #0]
10012770:	bd70      	pop	{r4, r5, r6, pc}
10012772:	46c0      	nop			; (mov r8, r8)
10012774:	1001610c 	.word	0x1001610c

10012778 <test>:
10012778:	00000083 00004000 00000200 00c800c8     .....@..........
10012788:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10012798:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100127a8:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
100127b8:	5220706f 73646165 00000000 706d6153     op Reads....Samp
100127c8:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100127d8:	666f206c 74657366 74616420 57482061     l offset data HW
100127e8:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100127f8:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10012808:	6f727947 66666f20 20746573 61746164     Gyro offset data
10012818:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10012828:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10012838:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10012848:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10012858:	6e756f66 00002e64 72617453 676e6974     found...Starting
10012868:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10012878:	72746552 69766569 4220676e 65736169     Retrieving Biase
10012888:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10012898:	65736169 72452073 20726f72 6f70202d     iases Error - po
100128a8:	62697373 4920656c 65204332 726f7272     ssible I2C error
100128b8:	00000000 72746552 69766569 5320676e     ....Retrieving S
100128c8:	69422054 73657361 00000000 72746552     T Biases....Retr
100128d8:	69766569 5320676e 69422054 73657361     ieving ST Biases
100128e8:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100128f8:	32492065 72652043 00726f72 64616552     e I2C error.Read
10012908:	20676e69 2050544f 69676552 72657473     ing OTP Register
10012918:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10012928:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10012938:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10012948:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10012958:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10012968:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10012978:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10012988:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10012998:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100129a8:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100129b8:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100129c8:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100129d8:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100129e8:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100129f8:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10012a08:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10012a18:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10012a28:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10012a38:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10012a48:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10012a58:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10012a68:	6c207361 20737365 6e616874 2e372520     as less than %7.
10012a78:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10012a88:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10012a98:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10012aa8:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10012ab8:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10012ac8:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10012ad8:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10012ae8:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10012af8:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10012b08:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10012b18:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10012b28:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10012b38:	253a7369 72672064 65746165 68742072     is:%d greater th
10012b48:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10012b58:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10012b68:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10012b78:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10012b88:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10012b98:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10012ba8:	65542066 52207473 6c757365 203a7374     f Test Results: 
10012bb8:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10012bc8:	73655420 65522074 746c7573 25203a73      Test Results: %
10012bd8:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10012be8:	00000000                                ....

10012bec <hw>:
10012bec:	04000069 01410080 01000000 00001333     i.....A.....3...

10012bfc <reg>:
10012bfc:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10012c0c:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10012c1c:	2a292827 67646334 00000049 8db3aab8     '()*4cdgI.......
10012c2c:	350d98b4 0000005d 006ccd4c 002cc90c     ...5]...L.l...,.
10012c3c:	00765636 00664626 c4abf2fe dfdff1aa     6Vv.&Ff.........
10012c4c:	dfdfafbb aaaaaab8 c5c388b0 000000c7     ................
10012c5c:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10012c6c:	b691a38b 00dab4da 1000a89a 1000a89a     ................
10012c7c:	1000a89a 1000a89a 1000a89a 1000a89a     ................
10012c8c:	1000a89a 1000a89a 1000a89a 1000a89a     ................
10012c9c:	1000a89a 1000a89a 1000a89a 1000a89a     ................
10012cac:	1000a89a 1000a89a 1000a89a 1000a89a     ................
10012cbc:	1000a89a 1000a8b6 1000a8b6 1000a8b6     ................
10012ccc:	1000a8b6 1000a8b6 1000a8b6 1000a8b6     ................
10012cdc:	1000a8b6 1000a8b6 1000a8b6 1000a8d8     ................
10012cec:	1000a8d8 1000a8d8 1000a8d8 1000a8d8     ................
10012cfc:	1000a8d8 1000a8d8 1000a8d8 1000a8d8     ................
10012d0c:	1000a8d8 1000a8fa 1000a8fa 1000a8fa     ................
10012d1c:	1000a8fa 1000a8fa 1000a8fa 1000a908     ................
10012d2c:	1000a908 1000a908 1000a908 1000a908     ................
10012d3c:	1000a908 1000a908 1000a908 1000a908     ................
10012d4c:	1000a916 1000a916 1000a874 1000a874     ........t...t...
10012d5c:	1000a88e 1000a874 34333231 00003635     ....t...123456..
10012d6c:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10012d7c:	00000000                                ....

10012d80 <ble_mgr_gatt_server_handle>:
	...
10012d98:	1000a2ad 1000a14d 10009a29 00000000     ....M...).......
10012da8:	69766544 64206563 6f637369 63656e6e     Device disconnec
10012db8:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10012dc8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10012dd8:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10012de8:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10012df8:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10012e08:	46207473 656c6961 00000064 72696150     st Failed...Pair
10012e18:	20676e69 636f7270 72756465 6f632065     ing procedure co
10012e28:	656c706d 20646574 63637573 66737365     mpleted successf
10012e38:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10012e48:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10012e58:	726f7473 68742065 61702065 6e697269     store the pairin
10012e68:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10012e78:	4e206e6f 7320746f 74726174 00006465     on Not started..
10012e88:	76616c53 65532065 69727563 52207974     Slave Security R
10012e98:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10012ea8:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10012eb8:	71655220 74736575 41202d20 65687475      Request - Authe
10012ec8:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10012ed8:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10012ee8:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10012ef8:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10012f08:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10012f18:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10012f28:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10012f38:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10012f48:	206e6f28 6568746f 65442072 65636976     (on other Device
10012f58:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10012f68:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10012f78:	74616546 20657275 20746f4e 70707573     Feature Not supp
10012f88:	6574726f 00000064 65746e45 20646572     orted...Entered 
10012f98:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10012fa8:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10012fb8:	7020666f 20726565 69766564 69206563     of peer device i
10012fc8:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10012fd8:	00000000 61656c50 75206573 6961706e     ....Please unpai
10012fe8:	68742072 65642065 65636976 6f726620     r the device fro
10012ff8:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10013008:	656c6962 65732029 6e697474 6d207367     bile) settings m
10013018:	20756e65 20646e61 72617473 61702074     enu and start pa
10013028:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10013038:	69747079 52206e6f 65757165 52207473     yption Request R
10013048:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
10013058:	676e696e 61662020 64656c69 00000000     ning  failed....
10013068:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
10013078:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10013088:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10013098:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
100130a8:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
100130b8:	69747079 63206e6f 6c706d6f 64657465     yption completed
100130c8:	63757320 73736563 6c6c7566 00000079      successfully...
100130d8:	20454c42 69766544 6e206563 6620746f     BLE Device not f
100130e8:	646e756f 636e6520 74707972 206e6f69     ound encryption 
100130f8:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
10013108:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
10013118:	69766564 72206563 68636165 2e2e6465     device reached..
10013128:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
10013138:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10013148:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
10013158:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10013168:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10013178:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10013188:	63206573 6b636568 65687420 776f7020     se check the pow
10013198:	61207265 6320646e 656e6e6f 6f697463     er and connectio
100131a8:	202f206e 64726168 65726177 6e6f6320     n / hardware con
100131b8:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
100131c8:	00000045 69766544 6e206563 20656d61     E...Device name 
100131d8:	20746573 6c696166 00006465 61204442     set failed..BD a
100131e8:	65726464 67207373 66207465 656c6961     ddress get faile
100131f8:	00000064 41204442 65726464 303a7373     d...BD Address:0
10013208:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10013218:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10013228:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10013238:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10013248:	61727567 6e6f6974 69616620 0064656c     guration failed.
10013258:	20746553 20454c42 69766544 41206563     Set BLE Device A
10013268:	65726464 66207373 656c6961 00000064     ddress failed...
10013278:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10013288:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10013298:	65732065 69727563 72207974 65757165     e security reque
100132a8:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100132b8:	65746365 6f742064 65657020 65642072     ected to peer de
100132c8:	65636976 74697720 64612068 73657264     vice with addres
100132d8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100132e8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100132f8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10013308:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10013318:	61522067 6d6f646e 64646120 73736572     g Random address
10013328:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013338:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013348:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013358:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10013368:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10013378:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10013388:	53202d20 75746174 25203a73 00000064      - Status: %d...
10013398:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
100133a8:	61642074 73206174 66207465 656c6961     t data set faile
100133b8:	00000064                                d...

100133bc <ble_mgr_gap_handle>:
100133bc:	1000a2b1 1000a231 1000a125 00000000     ....1...%.......
100133cc:	00000000 1000a5a9 10009a39 10009a35     ........9...5...
100133dc:	10009bd5 10009ad5 10009db9 10009bed     ................
100133ec:	10009ef5 1000a051 1000a17d 1000a7b5     ....Q...}.......
	...
10013408:	00002121 1000c44c 1000c440 1000c434     !!..L...@...4...
10013418:	1000c428 1000c41c 1000c410 1000c402     (...............
10013428:	1000c3f4 1000c3e6 1000c3d8 1000c3ca     ................
10013438:	1000c3bc 1000c3ae 1000c3a0 1000c392     ................
10013448:	1000c384 1000c376 1000c368 1000c35a     ....v...h...Z...
10013458:	1000c34c 1000c33e 1000c330 1000c322     L...>...0..."...
10013468:	1000c314 1000c306 1000c2f8 1000c2ea     ................
10013478:	1000c2de 1000c2d2 1000c2c6 1000c2ba     ................
10013488:	1000c2ae 1000c2a2 1000c296 1000c28a     ................
10013498:	1000c27c 1000c26e 1000c260 1000c252     |...n...`...R...
100134a8:	1000c244 1000c236 1000c228 1000c21a     D...6...(.......
100134b8:	1000c20c 1000c1fe 1000c1f0 1000c1e2     ................
100134c8:	1000c1d4 1000c1c6 1000c1b8 1000c1aa     ................
100134d8:	1000c19e 1000c192 1000c458 1000c88a     ........X.......
100134e8:	1000c882 1000c87a 1000c862 1000c84c     ....z...b...L...
100134f8:	1000c7ce 1000c7b6 1000c79e 1000c786     ................
10013508:	1000c76e 1000c756 1000c73e 1000c726     n...V...>...&...
10013518:	1000c70e 1000c892 1000c892 1000c892     ................
10013528:	1000c892 1000c892 1000c892 1000c892     ................
10013538:	1000c892 1000c6f6 1000c6de 1000c6c6     ................
10013548:	1000c6b0 1000c698 1000c892 1000c892     ................
10013558:	1000c892 1000c892 1000c892 1000c892     ................
10013568:	1000c680 1000c668 1000c650 1000c638     ....h...P...8...
10013578:	1000c892 1000c620 1000c608 1000c892     .... ...........
10013588:	1000c892 1000c5f2 1000c5dc 1000c5c6     ................
10013598:	1000c5b0 1000c892 1000c892 1000c892     ................
100135a8:	1000c892 1000c892 1000c892 1000c892     ................
100135b8:	1000c892 1000c5a8 1000c5a0 1000c598     ................
100135c8:	1000c584 1000c56c 1000c554 1000c53c     ....l...T...<...
100135d8:	1000c524 1000c50c 1000c4f4 1000c4de     $...............
100135e8:	1000c4c8 1000c4b0 1000c498 4f464946     ............FIFO
100135f8:	6425203a 20642520 202c6425 25206425     : %d %d %d, %d %
10013608:	64252064 6c25202c 6c252064 6c252064     d %d, %ld %ld %l
10013618:	6c252064 00000064 6f727947 6425203a     d %ld...Gyro: %d
10013628:	20642520 00006425 706d6554 6c25203a      %d %d..Temp: %l
10013638:	00000064 65636341 25203a6c 64252064     d...Accel: %d %d
10013648:	00642520 706d6f43 3a737361 20642520      %d.Compass: %d 
10013658:	25206425 00000064 4c504d65 312e3520     %d %d...eMPL 5.1
10013668:	00000000 656d7441 6f43206c 002e7072              ....Atmel Corp.

10013677 <CSWTCH.47>:
10013677:	03010300 03030303 03030303 00020303     ................
10013687:	00fdaa00 00fcce10 00fd8c10 00fd6410     .............d..
10013697:	00fd8c10 00fd5810 00fd8c10 00fd6410     .....X.......d..
100136a7:	00fcce10 00fcce10 00fd5810 00fd6410     .........X...d..
100136b7:	00fe1010 00fe1010 00fe1010 00fd9210     ................
100136c7:	00fcce10 00fcce10 00fd7810 00fd6210     .........x...b..
100136d7:	00fd7810 00fd5810 00fd7810 00fd6210     .x...X...x...b..
100136e7:	00fcce10 00fcce10 00fd5810 00fd6210     .........X...b..
100136f7:	00fe1010 00fe1010 00fe1010 00fe1c10     ................
10013707:	01010810 01006610 01006610 01006410     .....f...f...d..
10013717:	0100fa10 0100fa10 0100f010 01006410     .............d..
10013727:	0100fa10 0100f010 0100fa10 01006410     .............d..
10013737:	01010010 01010010 01010010 01018a10     ................
10013747:	010a7c10 01093c10 01093c10 01093a10     .|...<...<...:..
10013757:	010a5410 010a5410 010a4610 01093a10     .T...T...F...:..
10013767:	010a5410 010a4610 010a5410 01093a10     .T...F...T...:..
10013777:	010a5c10 010a5c10 010a5c10 010c5c10     .\...\...\...\..
10013787:	00004310 01388c00                                .C...

1001378c <_global_impure_ptr>:
1001378c:	1001388c                                .8..

10013790 <__sf_fake_stdin>:
	...

100137b0 <__sf_fake_stdout>:
	...

100137d0 <__sf_fake_stderr>:
	...
100137f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013800:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013810:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013820:	00006665                                ef..

10013824 <_init>:
10013824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013826:	46c0      	nop			; (mov r8, r8)
10013828:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001382a:	bc08      	pop	{r3}
1001382c:	469e      	mov	lr, r3
1001382e:	4770      	bx	lr

10013830 <__init_array_start>:
10013830:	10008095 	.word	0x10008095

10013834 <_fini>:
10013834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013836:	46c0      	nop			; (mov r8, r8)
10013838:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001383a:	bc08      	pop	{r3}
1001383c:	469e      	mov	lr, r3
1001383e:	4770      	bx	lr

10013840 <__fini_array_start>:
10013840:	1000806d 	.word	0x1000806d
