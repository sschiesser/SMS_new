
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f574  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b8  10017574  10017574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002c70  1001762c  1001762c  0001762c  2**2
                  ALLOC
  3 .stack        00000804  1001a29c  1001a29c  0001762c  2**0
                  ALLOC
  4 .ARM.exidx    00000008  1001aaa0  1001aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  0001aaa8  2**0
                  CONTENTS, READONLY
  6 .comment      00000124  00000000  00000000  0001aad0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002f07e  00000000  00000000  0001abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000045b5  00000000  00000000  00049c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ea9b  00000000  00000000  0004e227  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ee0  00000000  00000000  0005ccc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017d8  00000000  00000000  0005dba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024f56  00000000  00000000  0005f37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010d86  00000000  00000000  000842d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001477e4  00000000  00000000  00095056  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003adc  00000000  00000000  001dc83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	10017574 	.word	0x10017574
10008054:	10017574 	.word	0x10017574
10008058:	1001762c 	.word	0x1001762c
1000805c:	1001762c 	.word	0x1001762c
10008060:	1001a29c 	.word	0x1001a29c
10008064:	100143bd 	.word	0x100143bd
10008068:	1000e319 	.word	0x1000e319

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	1001762c 	.word	0x1001762c
1000808c:	00000000 	.word	0x00000000
10008090:	1001aaa8 	.word	0x1001aaa8

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	10017630 	.word	0x10017630
100080c0:	1001aaa8 	.word	0x1001aaa8
100080c4:	1001aaa8 	.word	0x1001aaa8
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000da65 	.word	0x1000da65
100080f8:	100118cd 	.word	0x100118cd
100080fc:	10017578 	.word	0x10017578
10008100:	000f4240 	.word	0x000f4240
10008104:	10017574 	.word	0x10017574
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	10017578 	.word	0x10017578
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	10017648 	.word	0x10017648
10008178:	1001764c 	.word	0x1001764c

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081b4:	b570      	push	{r4, r5, r6, lr}
100081b6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081b8:	4b3a      	ldr	r3, [pc, #232]	; (100082a4 <dualtimer_init+0xf0>)
100081ba:	2004      	movs	r0, #4
100081bc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081be:	7823      	ldrb	r3, [r4, #0]
100081c0:	2b00      	cmp	r3, #0
100081c2:	d102      	bne.n	100081ca <dualtimer_init+0x16>
100081c4:	7b23      	ldrb	r3, [r4, #12]
100081c6:	2b00      	cmp	r3, #0
100081c8:	d057      	beq.n	1000827a <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081ca:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081cc:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081ce:	4936      	ldr	r1, [pc, #216]	; (100082a8 <dualtimer_init+0xf4>)
100081d0:	68ca      	ldr	r2, [r1, #12]
100081d2:	4313      	orrs	r3, r2
100081d4:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081d6:	7e22      	ldrb	r2, [r4, #24]
100081d8:	698b      	ldr	r3, [r1, #24]
100081da:	4002      	ands	r2, r0
100081dc:	302d      	adds	r0, #45	; 0x2d
100081de:	0112      	lsls	r2, r2, #4
100081e0:	4383      	bics	r3, r0
100081e2:	4313      	orrs	r3, r2
100081e4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081e6:	7823      	ldrb	r3, [r4, #0]
100081e8:	2b00      	cmp	r3, #0
100081ea:	d020      	beq.n	1000822e <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081ec:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081ee:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081f0:	2a00      	cmp	r2, #0
100081f2:	d150      	bne.n	10008296 <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
100081f4:	2302      	movs	r3, #2
100081f6:	78a1      	ldrb	r1, [r4, #2]
100081f8:	78e2      	ldrb	r2, [r4, #3]
100081fa:	0049      	lsls	r1, r1, #1
100081fc:	4019      	ands	r1, r3
100081fe:	0092      	lsls	r2, r2, #2
10008200:	330a      	adds	r3, #10
10008202:	401a      	ands	r2, r3
10008204:	000b      	movs	r3, r1
10008206:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008208:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000820a:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000820c:	2a00      	cmp	r2, #0
1000820e:	d13f      	bne.n	10008290 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008210:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008212:	68a1      	ldr	r1, [r4, #8]
10008214:	4a25      	ldr	r2, [pc, #148]	; (100082ac <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008216:	4d24      	ldr	r5, [pc, #144]	; (100082a8 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008218:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000821a:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000821c:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000821e:	0040      	lsls	r0, r0, #1
10008220:	5c2e      	ldrb	r6, [r5, r0]
10008222:	4331      	orrs	r1, r6
10008224:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008226:	2180      	movs	r1, #128	; 0x80
10008228:	7a10      	ldrb	r0, [r2, #8]
1000822a:	4301      	orrs	r1, r0
1000822c:	7211      	strb	r1, [r2, #8]
1000822e:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008230:	2a00      	cmp	r2, #0
10008232:	d022      	beq.n	1000827a <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7b62      	ldrb	r2, [r4, #13]
10008236:	2a00      	cmp	r2, #0
10008238:	d124      	bne.n	10008284 <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000823a:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000823c:	2002      	movs	r0, #2
1000823e:	7ba2      	ldrb	r2, [r4, #14]
10008240:	7be1      	ldrb	r1, [r4, #15]
10008242:	0052      	lsls	r2, r2, #1
10008244:	4010      	ands	r0, r2
10008246:	220c      	movs	r2, #12
10008248:	0089      	lsls	r1, r1, #2
1000824a:	400a      	ands	r2, r1
1000824c:	4302      	orrs	r2, r0
1000824e:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008250:	7c22      	ldrb	r2, [r4, #16]
10008252:	2a00      	cmp	r2, #0
10008254:	d001      	beq.n	1000825a <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008256:	2220      	movs	r2, #32
10008258:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000825a:	6961      	ldr	r1, [r4, #20]
1000825c:	4a13      	ldr	r2, [pc, #76]	; (100082ac <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000825e:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008260:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008262:	2128      	movs	r1, #40	; 0x28
10008264:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10008266:	2302      	movs	r3, #2
10008268:	4c0f      	ldr	r4, [pc, #60]	; (100082a8 <dualtimer_init+0xf4>)
1000826a:	0040      	lsls	r0, r0, #1
1000826c:	5c25      	ldrb	r5, [r4, r0]
1000826e:	432b      	orrs	r3, r5
10008270:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008272:	2380      	movs	r3, #128	; 0x80
10008274:	5c50      	ldrb	r0, [r2, r1]
10008276:	4303      	orrs	r3, r0
10008278:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000827a:	490d      	ldr	r1, [pc, #52]	; (100082b0 <dualtimer_init+0xfc>)
1000827c:	201e      	movs	r0, #30
1000827e:	4b0d      	ldr	r3, [pc, #52]	; (100082b4 <dualtimer_init+0x100>)
10008280:	4798      	blx	r3
}
10008282:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008284:	2a01      	cmp	r2, #1
10008286:	d00b      	beq.n	100082a0 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008288:	2a02      	cmp	r2, #2
1000828a:	d1d7      	bne.n	1000823c <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000828c:	2340      	movs	r3, #64	; 0x40
1000828e:	e7d5      	b.n	1000823c <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008290:	2220      	movs	r2, #32
10008292:	4313      	orrs	r3, r2
10008294:	e7bc      	b.n	10008210 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008296:	3a02      	subs	r2, #2
10008298:	4253      	negs	r3, r2
1000829a:	4153      	adcs	r3, r2
1000829c:	0198      	lsls	r0, r3, #6
1000829e:	e7a9      	b.n	100081f4 <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082a0:	2300      	movs	r3, #0
100082a2:	e7cb      	b.n	1000823c <dualtimer_init+0x88>
100082a4:	1000dd79 	.word	0x1000dd79
100082a8:	4000b000 	.word	0x4000b000
100082ac:	40001000 	.word	0x40001000
100082b0:	1000813d 	.word	0x1000813d
100082b4:	1000e191 	.word	0x1000e191

100082b8 <i2c_read>:
    if(i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;

    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100082ba:	0015      	movs	r5, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
100082bc:	2201      	movs	r2, #1
    if(i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;

    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082be:	001e      	movs	r6, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082c0:	4b12      	ldr	r3, [pc, #72]	; (1000830c <i2c_read+0x54>)
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
100082c2:	4c13      	ldr	r4, [pc, #76]	; (10008310 <i2c_read+0x58>)
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
100082c4:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    if(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
100082c6:	4f13      	ldr	r7, [pc, #76]	; (10008314 <i2c_read+0x5c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082c8:	685a      	ldr	r2, [r3, #4]
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082ca:	b280      	uxth	r0, r0
100082cc:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082ce:	7011      	strb	r1, [r2, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100082d0:	8020      	strh	r0, [r4, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    if(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
100082d2:	0019      	movs	r1, r3
100082d4:	0038      	movs	r0, r7
100082d6:	4b10      	ldr	r3, [pc, #64]	; (10008318 <i2c_read+0x60>)
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
100082d8:	8065      	strh	r5, [r4, #2]
    
    timeout = 0;
    if(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
100082da:	4798      	blx	r3
100082dc:	2800      	cmp	r0, #0
100082de:	d111      	bne.n	10008304 <i2c_read+0x4c>
    
    timeout = 0;
    if(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) return -1;
100082e0:	0021      	movs	r1, r4
100082e2:	0038      	movs	r0, r7
100082e4:	4b0d      	ldr	r3, [pc, #52]	; (1000831c <i2c_read+0x64>)
100082e6:	4798      	blx	r3
100082e8:	2800      	cmp	r0, #0
100082ea:	d10b      	bne.n	10008304 <i2c_read+0x4c>
    for(uint8_t i = 0; i < data_len; i++) {
100082ec:	2300      	movs	r3, #0
100082ee:	2d00      	cmp	r5, #0
100082f0:	d006      	beq.n	10008300 <i2c_read+0x48>
        data[i] = i2c_rpacket.data[i];
100082f2:	6862      	ldr	r2, [r4, #4]
100082f4:	5cd2      	ldrb	r2, [r2, r3]
100082f6:	54f2      	strb	r2, [r6, r3]
100082f8:	3301      	adds	r3, #1
    timeout = 0;
    if(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
    
    timeout = 0;
    if(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) return -1;
    for(uint8_t i = 0; i < data_len; i++) {
100082fa:	b2da      	uxtb	r2, r3
100082fc:	42aa      	cmp	r2, r5
100082fe:	d3f8      	bcc.n	100082f2 <i2c_read+0x3a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008300:	2000      	movs	r0, #0
}
10008302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    if(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
10008304:	2001      	movs	r0, #1
10008306:	4240      	negs	r0, r0
10008308:	e7fb      	b.n	10008302 <i2c_read+0x4a>
1000830a:	46c0      	nop			; (mov r8, r8)
1000830c:	100190a0 	.word	0x100190a0
10008310:	10019090 	.word	0x10019090
10008314:	10019098 	.word	0x10019098
10008318:	1000d9c1 	.word	0x1000d9c1
1000831c:	1000d981 	.word	0x1000d981

10008320 <i2c_write>:
 */
#if defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008320:	b530      	push	{r4, r5, lr}
10008322:	b083      	sub	sp, #12
10008324:	000c      	movs	r4, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
10008326:	2500      	movs	r5, #0
10008328:	4669      	mov	r1, sp
1000832a:	80cd      	strh	r5, [r1, #6]
    i2c_wpacket.address = (uint8_t)slave_addr;
1000832c:	490c      	ldr	r1, [pc, #48]	; (10008360 <i2c_write+0x40>)
1000832e:	8008      	strh	r0, [r1, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008330:	1c50      	adds	r0, r2, #1
10008332:	b2c0      	uxtb	r0, r0
10008334:	8048      	strh	r0, [r1, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008336:	6848      	ldr	r0, [r1, #4]
10008338:	7004      	strb	r4, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000833a:	2000      	movs	r0, #0
1000833c:	2a00      	cmp	r2, #0
1000833e:	d007      	beq.n	10008350 <i2c_write+0x30>
10008340:	1c44      	adds	r4, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008342:	684d      	ldr	r5, [r1, #4]
10008344:	5c18      	ldrb	r0, [r3, r0]
10008346:	5528      	strb	r0, [r5, r4]
10008348:	0020      	movs	r0, r4
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000834a:	b2e4      	uxtb	r4, r4
1000834c:	4294      	cmp	r4, r2
1000834e:	d3f7      	bcc.n	10008340 <i2c_write+0x20>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    if(i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) return -1;
10008350:	4b04      	ldr	r3, [pc, #16]	; (10008364 <i2c_write+0x44>)
10008352:	4805      	ldr	r0, [pc, #20]	; (10008368 <i2c_write+0x48>)
10008354:	4798      	blx	r3
10008356:	1e43      	subs	r3, r0, #1
10008358:	4198      	sbcs	r0, r3
1000835a:	4240      	negs	r0, r0

    return 0;
}
1000835c:	b003      	add	sp, #12
1000835e:	bd30      	pop	{r4, r5, pc}
10008360:	100190a0 	.word	0x100190a0
10008364:	1000d9a1 	.word	0x1000d9a1
10008368:	10019098 	.word	0x10019098

1000836c <get_st_6500_biases>:
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
1000836c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000836e:	4656      	mov	r6, sl
10008370:	4644      	mov	r4, r8
10008372:	465f      	mov	r7, fp
10008374:	464d      	mov	r5, r9
10008376:	b4f0      	push	{r4, r5, r6, r7}
10008378:	4cf0      	ldr	r4, [pc, #960]	; (1000873c <get_st_6500_biases+0x3d0>)
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
1000837a:	4ef1      	ldr	r6, [pc, #964]	; (10008740 <get_st_6500_biases+0x3d4>)
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
1000837c:	44a5      	add	sp, r4
1000837e:	9306      	str	r3, [sp, #24]
    unsigned char data[HWST_MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
10008380:	2301      	movs	r3, #1
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
10008382:	9205      	str	r2, [sp, #20]
    unsigned char data[HWST_MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
10008384:	aa04      	add	r2, sp, #16
10008386:	7413      	strb	r3, [r2, #16]
    data[1] = 0;
10008388:	2300      	movs	r3, #0
1000838a:	7453      	strb	r3, [r2, #17]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
1000838c:	4bed      	ldr	r3, [pc, #948]	; (10008744 <get_st_6500_biases+0x3d8>)
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
1000838e:	000c      	movs	r4, r1
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
10008390:	4698      	mov	r8, r3
10008392:	681b      	ldr	r3, [r3, #0]
	}
    return result;
}

static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
10008394:	0005      	movs	r5, r0
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
10008396:	7d59      	ldrb	r1, [r3, #21]
10008398:	4643      	mov	r3, r8
1000839a:	685b      	ldr	r3, [r3, #4]
1000839c:	2202      	movs	r2, #2
1000839e:	7818      	ldrb	r0, [r3, #0]
100083a0:	ab08      	add	r3, sp, #32
100083a2:	47b0      	blx	r6
100083a4:	46b2      	mov	sl, r6
100083a6:	1e07      	subs	r7, r0, #0
100083a8:	d000      	beq.n	100083ac <get_st_6500_biases+0x40>
100083aa:	e23a      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    delay_ms(200);
100083ac:	20c8      	movs	r0, #200	; 0xc8
100083ae:	4be6      	ldr	r3, [pc, #920]	; (10008748 <get_st_6500_biases+0x3dc>)
100083b0:	4798      	blx	r3
    data[0] = 0;
100083b2:	ab04      	add	r3, sp, #16
100083b4:	741f      	strb	r7, [r3, #16]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
100083b6:	4643      	mov	r3, r8
100083b8:	681b      	ldr	r3, [r3, #0]
100083ba:	2201      	movs	r2, #1
100083bc:	7c59      	ldrb	r1, [r3, #17]
100083be:	4643      	mov	r3, r8
100083c0:	685b      	ldr	r3, [r3, #4]
100083c2:	7818      	ldrb	r0, [r3, #0]
100083c4:	ab08      	add	r3, sp, #32
100083c6:	47b0      	blx	r6
100083c8:	2800      	cmp	r0, #0
100083ca:	d000      	beq.n	100083ce <get_st_6500_biases+0x62>
100083cc:	e229      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
100083ce:	4643      	mov	r3, r8
100083d0:	681b      	ldr	r3, [r3, #0]
100083d2:	2201      	movs	r2, #1
100083d4:	7959      	ldrb	r1, [r3, #5]
100083d6:	4643      	mov	r3, r8
100083d8:	685b      	ldr	r3, [r3, #4]
100083da:	7818      	ldrb	r0, [r3, #0]
100083dc:	ab08      	add	r3, sp, #32
100083de:	47b0      	blx	r6
100083e0:	2800      	cmp	r0, #0
100083e2:	d000      	beq.n	100083e6 <get_st_6500_biases+0x7a>
100083e4:	e21d      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100083e6:	4643      	mov	r3, r8
100083e8:	681b      	ldr	r3, [r3, #0]
100083ea:	2201      	movs	r2, #1
100083ec:	7d59      	ldrb	r1, [r3, #21]
100083ee:	4643      	mov	r3, r8
100083f0:	685b      	ldr	r3, [r3, #4]
100083f2:	7818      	ldrb	r0, [r3, #0]
100083f4:	ab08      	add	r3, sp, #32
100083f6:	47b0      	blx	r6
100083f8:	2800      	cmp	r0, #0
100083fa:	d000      	beq.n	100083fe <get_st_6500_biases+0x92>
100083fc:	e211      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100083fe:	4643      	mov	r3, r8
10008400:	681b      	ldr	r3, [r3, #0]
10008402:	2201      	movs	r2, #1
10008404:	7e99      	ldrb	r1, [r3, #26]
10008406:	4643      	mov	r3, r8
10008408:	685b      	ldr	r3, [r3, #4]
1000840a:	7818      	ldrb	r0, [r3, #0]
1000840c:	ab08      	add	r3, sp, #32
1000840e:	47b0      	blx	r6
10008410:	2800      	cmp	r0, #0
10008412:	d000      	beq.n	10008416 <get_st_6500_biases+0xaa>
10008414:	e205      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
10008416:	4643      	mov	r3, r8
10008418:	681b      	ldr	r3, [r3, #0]
1000841a:	2201      	movs	r2, #1
1000841c:	7919      	ldrb	r1, [r3, #4]
1000841e:	4643      	mov	r3, r8
10008420:	685b      	ldr	r3, [r3, #4]
10008422:	7818      	ldrb	r0, [r3, #0]
10008424:	ab08      	add	r3, sp, #32
10008426:	47b0      	blx	r6
10008428:	2800      	cmp	r0, #0
1000842a:	d000      	beq.n	1000842e <get_st_6500_biases+0xc2>
1000842c:	e1f9      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
1000842e:	230c      	movs	r3, #12
10008430:	aa04      	add	r2, sp, #16
10008432:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
10008434:	4643      	mov	r3, r8
10008436:	681b      	ldr	r3, [r3, #0]
10008438:	2201      	movs	r2, #1
1000843a:	7919      	ldrb	r1, [r3, #4]
1000843c:	4643      	mov	r3, r8
1000843e:	685b      	ldr	r3, [r3, #4]
10008440:	7818      	ldrb	r0, [r3, #0]
10008442:	ab08      	add	r3, sp, #32
10008444:	47b0      	blx	r6
10008446:	2800      	cmp	r0, #0
10008448:	d000      	beq.n	1000844c <get_st_6500_biases+0xe0>
1000844a:	e1ea      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    delay_ms(15);
1000844c:	300f      	adds	r0, #15
1000844e:	4bbe      	ldr	r3, [pc, #760]	; (10008748 <get_st_6500_biases+0x3dc>)
10008450:	4798      	blx	r3
    data[0] = st.test->reg_lpf;
10008452:	4643      	mov	r3, r8
10008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10008456:	aa04      	add	r2, sp, #16
10008458:	7a5b      	ldrb	r3, [r3, #9]
1000845a:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
1000845c:	4643      	mov	r3, r8
1000845e:	681b      	ldr	r3, [r3, #0]
10008460:	2201      	movs	r2, #1
10008462:	7899      	ldrb	r1, [r3, #2]
10008464:	4643      	mov	r3, r8
10008466:	685b      	ldr	r3, [r3, #4]
10008468:	7818      	ldrb	r0, [r3, #0]
1000846a:	ab08      	add	r3, sp, #32
1000846c:	47b0      	blx	r6
1000846e:	2800      	cmp	r0, #0
10008470:	d000      	beq.n	10008474 <get_st_6500_biases+0x108>
10008472:	e1d6      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    data[0] = st.test->reg_rate_div;
10008474:	4643      	mov	r3, r8
10008476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10008478:	aa04      	add	r2, sp, #16
1000847a:	7a1b      	ldrb	r3, [r3, #8]
1000847c:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
1000847e:	4643      	mov	r3, r8
10008480:	681b      	ldr	r3, [r3, #0]
10008482:	2201      	movs	r2, #1
10008484:	7859      	ldrb	r1, [r3, #1]
10008486:	4643      	mov	r3, r8
10008488:	685b      	ldr	r3, [r3, #4]
1000848a:	7818      	ldrb	r0, [r3, #0]
1000848c:	ab08      	add	r3, sp, #32
1000848e:	47b0      	blx	r6
10008490:	2800      	cmp	r0, #0
10008492:	d000      	beq.n	10008496 <get_st_6500_biases+0x12a>
10008494:	e1c5      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    if (hw_test)
10008496:	9b05      	ldr	r3, [sp, #20]
10008498:	2b00      	cmp	r3, #0
1000849a:	d100      	bne.n	1000849e <get_st_6500_biases+0x132>
1000849c:	e1e3      	b.n	10008866 <get_st_6500_biases+0x4fa>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
1000849e:	4643      	mov	r3, r8
100084a0:	2720      	movs	r7, #32
100084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100084a4:	427f      	negs	r7, r7
100084a6:	7a9b      	ldrb	r3, [r3, #10]
100084a8:	aa04      	add	r2, sp, #16
100084aa:	433b      	orrs	r3, r7
100084ac:	7413      	strb	r3, [r2, #16]
    else
        data[0] = st.test->reg_gyro_fsr;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
100084ae:	4643      	mov	r3, r8
100084b0:	681b      	ldr	r3, [r3, #0]
100084b2:	2201      	movs	r2, #1
100084b4:	7999      	ldrb	r1, [r3, #6]
100084b6:	4643      	mov	r3, r8
100084b8:	685b      	ldr	r3, [r3, #4]
100084ba:	7818      	ldrb	r0, [r3, #0]
100084bc:	ab08      	add	r3, sp, #32
100084be:	47b0      	blx	r6
100084c0:	2800      	cmp	r0, #0
100084c2:	d000      	beq.n	100084c6 <get_st_6500_biases+0x15a>
100084c4:	e1ad      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;

    if (hw_test)
        data[0] = st.test->reg_accel_fsr | 0xE0;
100084c6:	4643      	mov	r3, r8
100084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100084ca:	7adb      	ldrb	r3, [r3, #11]
100084cc:	431f      	orrs	r7, r3
100084ce:	ab04      	add	r3, sp, #16
100084d0:	741f      	strb	r7, [r3, #16]
    else
        data[0] = test.reg_accel_fsr;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
100084d2:	4643      	mov	r3, r8
100084d4:	681b      	ldr	r3, [r3, #0]
100084d6:	2201      	movs	r2, #1
100084d8:	79d9      	ldrb	r1, [r3, #7]
100084da:	4643      	mov	r3, r8
100084dc:	685b      	ldr	r3, [r3, #4]
100084de:	7818      	ldrb	r0, [r3, #0]
100084e0:	ab08      	add	r3, sp, #32
100084e2:	47d0      	blx	sl
100084e4:	2800      	cmp	r0, #0
100084e6:	d000      	beq.n	100084ea <get_st_6500_biases+0x17e>
100084e8:	e19b      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;

    delay_ms(test.wait_ms);  //wait 200ms for sensors to stabilize
100084ea:	30c8      	adds	r0, #200	; 0xc8
100084ec:	4b96      	ldr	r3, [pc, #600]	; (10008748 <get_st_6500_biases+0x3dc>)
100084ee:	4798      	blx	r3

    /* Enable FIFO */
    data[0] = BIT_FIFO_EN;
100084f0:	2340      	movs	r3, #64	; 0x40
100084f2:	aa04      	add	r2, sp, #16
100084f4:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
100084f6:	4643      	mov	r3, r8
100084f8:	681b      	ldr	r3, [r3, #0]
100084fa:	2201      	movs	r2, #1
100084fc:	7919      	ldrb	r1, [r3, #4]
100084fe:	4643      	mov	r3, r8
10008500:	685b      	ldr	r3, [r3, #4]
10008502:	7818      	ldrb	r0, [r3, #0]
10008504:	ab08      	add	r3, sp, #32
10008506:	47d0      	blx	sl
10008508:	2800      	cmp	r0, #0
1000850a:	d000      	beq.n	1000850e <get_st_6500_biases+0x1a2>
1000850c:	e189      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;
    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
1000850e:	2378      	movs	r3, #120	; 0x78
10008510:	aa04      	add	r2, sp, #16
10008512:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
10008514:	4643      	mov	r3, r8
10008516:	681b      	ldr	r3, [r3, #0]
10008518:	2201      	movs	r2, #1
1000851a:	7959      	ldrb	r1, [r3, #5]
1000851c:	4643      	mov	r3, r8
1000851e:	685b      	ldr	r3, [r3, #4]
10008520:	7818      	ldrb	r0, [r3, #0]
10008522:	ab08      	add	r3, sp, #32
10008524:	47d0      	blx	sl
10008526:	2800      	cmp	r0, #0
10008528:	d000      	beq.n	1000852c <get_st_6500_biases+0x1c0>
1000852a:	e17a      	b.n	10008822 <get_st_6500_biases+0x4b6>

    //initialize the bias return values
    gyro[0] = gyro[1] = gyro[2] = 0;
    accel[0] = accel[1] = accel[2] = 0;

    if(debug)
1000852c:	9b06      	ldr	r3, [sp, #24]
    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
        return -1;

    //initialize the bias return values
    gyro[0] = gyro[1] = gyro[2] = 0;
1000852e:	60a8      	str	r0, [r5, #8]
10008530:	6068      	str	r0, [r5, #4]
10008532:	6028      	str	r0, [r5, #0]
    accel[0] = accel[1] = accel[2] = 0;
10008534:	60a0      	str	r0, [r4, #8]
10008536:	6060      	str	r0, [r4, #4]
10008538:	6020      	str	r0, [r4, #0]

    if(debug)
1000853a:	2b00      	cmp	r3, #0
1000853c:	d000      	beq.n	10008540 <get_st_6500_biases+0x1d4>
1000853e:	e1a5      	b.n	1000888c <get_st_6500_biases+0x520>
10008540:	4b82      	ldr	r3, [pc, #520]	; (1000874c <get_st_6500_biases+0x3e0>)
10008542:	9307      	str	r3, [sp, #28]
    	log_i("Starting Bias Loop Reads\n");
10008544:	9b07      	ldr	r3, [sp, #28]
10008546:	4882      	ldr	r0, [pc, #520]	; (10008750 <get_st_6500_biases+0x3e4>)
10008548:	4798      	blx	r3
static int get_st_6500_biases(long *gyro, long *accel, unsigned char hw_test, int debug)
{
    unsigned char data[HWST_MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;
    int s = 0, read_size = 0, ind;
1000854a:	2300      	movs	r3, #0
1000854c:	4699      	mov	r9, r3
    if(debug)
    	log_i("Starting Bias Loop Reads\n");

    //start reading samples
    while (s < test.packet_thresh) {
    	delay_ms(test.sample_wait_ms); //wait 10ms to fill FIFO
1000854e:	200a      	movs	r0, #10
10008550:	4b7d      	ldr	r3, [pc, #500]	; (10008748 <get_st_6500_biases+0x3dc>)
10008552:	4798      	blx	r3
		if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008554:	4643      	mov	r3, r8
10008556:	681b      	ldr	r3, [r3, #0]
10008558:	2202      	movs	r2, #2
1000855a:	7b19      	ldrb	r1, [r3, #12]
1000855c:	4643      	mov	r3, r8
1000855e:	685b      	ldr	r3, [r3, #4]
10008560:	4e7c      	ldr	r6, [pc, #496]	; (10008754 <get_st_6500_biases+0x3e8>)
10008562:	7818      	ldrb	r0, [r3, #0]
10008564:	ab08      	add	r3, sp, #32
10008566:	47b0      	blx	r6
10008568:	2800      	cmp	r0, #0
1000856a:	d000      	beq.n	1000856e <get_st_6500_biases+0x202>
1000856c:	e159      	b.n	10008822 <get_st_6500_biases+0x4b6>
			return -1;
		fifo_count = (data[0] << 8) | data[1];
		packet_count = fifo_count / MAX_PACKET_LENGTH;
1000856e:	ab04      	add	r3, sp, #16
10008570:	7c18      	ldrb	r0, [r3, #16]
10008572:	7c5b      	ldrb	r3, [r3, #17]
10008574:	0200      	lsls	r0, r0, #8
10008576:	4318      	orrs	r0, r3
10008578:	210c      	movs	r1, #12
1000857a:	4b77      	ldr	r3, [pc, #476]	; (10008758 <get_st_6500_biases+0x3ec>)
1000857c:	4798      	blx	r3
1000857e:	b2c3      	uxtb	r3, r0
10008580:	469b      	mov	fp, r3
		if ((test.packet_thresh - s) < packet_count)
10008582:	464a      	mov	r2, r9
10008584:	23c8      	movs	r3, #200	; 0xc8
10008586:	1a9b      	subs	r3, r3, r2
10008588:	455b      	cmp	r3, fp
1000858a:	db00      	blt.n	1000858e <get_st_6500_biases+0x222>
1000858c:	e156      	b.n	1000883c <get_st_6500_biases+0x4d0>
		            packet_count = test.packet_thresh - s;
1000858e:	2338      	movs	r3, #56	; 0x38
10008590:	425b      	negs	r3, r3
10008592:	1a9e      	subs	r6, r3, r2
10008594:	b2f3      	uxtb	r3, r6
10008596:	469b      	mov	fp, r3
		read_size = packet_count * MAX_PACKET_LENGTH;

		//burst read from FIFO
		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
10008598:	005a      	lsls	r2, r3, #1
1000859a:	4643      	mov	r3, r8
1000859c:	681b      	ldr	r3, [r3, #0]
1000859e:	445a      	add	r2, fp
100085a0:	7b59      	ldrb	r1, [r3, #13]
100085a2:	4643      	mov	r3, r8
100085a4:	685b      	ldr	r3, [r3, #4]
100085a6:	0092      	lsls	r2, r2, #2
100085a8:	7818      	ldrb	r0, [r3, #0]
100085aa:	b2d2      	uxtb	r2, r2
100085ac:	ab08      	add	r3, sp, #32
100085ae:	4e69      	ldr	r6, [pc, #420]	; (10008754 <get_st_6500_biases+0x3e8>)
100085b0:	47b0      	blx	r6
100085b2:	2800      	cmp	r0, #0
100085b4:	d000      	beq.n	100085b8 <get_st_6500_biases+0x24c>
100085b6:	e134      	b.n	10008822 <get_st_6500_biases+0x4b6>
100085b8:	465a      	mov	r2, fp
100085ba:	3a01      	subs	r2, #1
100085bc:	b2d2      	uxtb	r2, r2
100085be:	3201      	adds	r2, #1
100085c0:	0051      	lsls	r1, r2, #1
100085c2:	188a      	adds	r2, r1, r2
100085c4:	ab08      	add	r3, sp, #32
100085c6:	0092      	lsls	r2, r2, #2
100085c8:	189f      	adds	r7, r3, r2
						return -1;
		ind = 0;
		for (ii = 0; ii < packet_count; ii++) {
			short accel_cur[3], gyro_cur[3];
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
100085ca:	7899      	ldrb	r1, [r3, #2]
100085cc:	78da      	ldrb	r2, [r3, #3]
100085ce:	0209      	lsls	r1, r1, #8
100085d0:	4311      	orrs	r1, r2
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
100085d2:	791a      	ldrb	r2, [r3, #4]
100085d4:	7958      	ldrb	r0, [r3, #5]
100085d6:	0212      	lsls	r2, r2, #8
100085d8:	4302      	orrs	r2, r0
			accel[0] += (long)accel_cur[0];
100085da:	7818      	ldrb	r0, [r3, #0]
100085dc:	785e      	ldrb	r6, [r3, #1]
100085de:	0200      	lsls	r0, r0, #8
100085e0:	4330      	orrs	r0, r6
100085e2:	6826      	ldr	r6, [r4, #0]
100085e4:	b200      	sxth	r0, r0
100085e6:	46b4      	mov	ip, r6
100085e8:	4460      	add	r0, ip
100085ea:	6020      	str	r0, [r4, #0]
			accel[1] += (long)accel_cur[1];
100085ec:	6860      	ldr	r0, [r4, #4]
						return -1;
		ind = 0;
		for (ii = 0; ii < packet_count; ii++) {
			short accel_cur[3], gyro_cur[3];
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
100085ee:	b209      	sxth	r1, r1
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
			accel[0] += (long)accel_cur[0];
			accel[1] += (long)accel_cur[1];
100085f0:	4684      	mov	ip, r0
100085f2:	4461      	add	r1, ip
100085f4:	6061      	str	r1, [r4, #4]
			accel[2] += (long)accel_cur[2];
100085f6:	68a1      	ldr	r1, [r4, #8]
		ind = 0;
		for (ii = 0; ii < packet_count; ii++) {
			short accel_cur[3], gyro_cur[3];
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
100085f8:	b212      	sxth	r2, r2
			accel[0] += (long)accel_cur[0];
			accel[1] += (long)accel_cur[1];
			accel[2] += (long)accel_cur[2];
100085fa:	468c      	mov	ip, r1
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
100085fc:	7a19      	ldrb	r1, [r3, #8]
			accel_cur[0] = ((short)data[ind + 0] << 8) | data[ind + 1];
			accel_cur[1] = ((short)data[ind + 2] << 8) | data[ind + 3];
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
			accel[0] += (long)accel_cur[0];
			accel[1] += (long)accel_cur[1];
			accel[2] += (long)accel_cur[2];
100085fe:	4462      	add	r2, ip
10008600:	60a2      	str	r2, [r4, #8]
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
10008602:	7a5a      	ldrb	r2, [r3, #9]
10008604:	0209      	lsls	r1, r1, #8
10008606:	4311      	orrs	r1, r2
			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
10008608:	7a9a      	ldrb	r2, [r3, #10]
1000860a:	7ad8      	ldrb	r0, [r3, #11]
1000860c:	0212      	lsls	r2, r2, #8
1000860e:	4302      	orrs	r2, r0
			gyro[0] += (long)gyro_cur[0];
10008610:	7998      	ldrb	r0, [r3, #6]
10008612:	79de      	ldrb	r6, [r3, #7]
10008614:	0200      	lsls	r0, r0, #8
10008616:	4330      	orrs	r0, r6
10008618:	682e      	ldr	r6, [r5, #0]
1000861a:	b200      	sxth	r0, r0
1000861c:	46b4      	mov	ip, r6
1000861e:	4460      	add	r0, ip
10008620:	6028      	str	r0, [r5, #0]
			gyro[1] += (long)gyro_cur[1];
10008622:	6868      	ldr	r0, [r5, #4]
			accel_cur[2] = ((short)data[ind + 4] << 8) | data[ind + 5];
			accel[0] += (long)accel_cur[0];
			accel[1] += (long)accel_cur[1];
			accel[2] += (long)accel_cur[2];
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
10008624:	b209      	sxth	r1, r1
			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
			gyro[0] += (long)gyro_cur[0];
			gyro[1] += (long)gyro_cur[1];
10008626:	4684      	mov	ip, r0
10008628:	4461      	add	r1, ip
1000862a:	6069      	str	r1, [r5, #4]
			gyro[2] += (long)gyro_cur[2];
1000862c:	68a9      	ldr	r1, [r5, #8]
			accel[0] += (long)accel_cur[0];
			accel[1] += (long)accel_cur[1];
			accel[2] += (long)accel_cur[2];
			gyro_cur[0] = (((short)data[ind + 6] << 8) | data[ind + 7]);
			gyro_cur[1] = (((short)data[ind + 8] << 8) | data[ind + 9]);
			gyro_cur[2] = (((short)data[ind + 10] << 8) | data[ind + 11]);
1000862e:	b212      	sxth	r2, r2
			gyro[0] += (long)gyro_cur[0];
			gyro[1] += (long)gyro_cur[1];
			gyro[2] += (long)gyro_cur[2];
10008630:	468c      	mov	ip, r1
10008632:	330c      	adds	r3, #12
10008634:	4462      	add	r2, ip
10008636:	60aa      	str	r2, [r5, #8]

		//burst read from FIFO
		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
						return -1;
		ind = 0;
		for (ii = 0; ii < packet_count; ii++) {
10008638:	429f      	cmp	r7, r3
1000863a:	d1c6      	bne.n	100085ca <get_st_6500_biases+0x25e>
			gyro[0] += (long)gyro_cur[0];
			gyro[1] += (long)gyro_cur[1];
			gyro[2] += (long)gyro_cur[2];
			ind += MAX_PACKET_LENGTH;
		}
		s += packet_count;
1000863c:	44d9      	add	r9, fp

    if(debug)
    	log_i("Starting Bias Loop Reads\n");

    //start reading samples
    while (s < test.packet_thresh) {
1000863e:	464b      	mov	r3, r9
10008640:	2bc7      	cmp	r3, #199	; 0xc7
10008642:	dd84      	ble.n	1000854e <get_st_6500_biases+0x1e2>
			ind += MAX_PACKET_LENGTH;
		}
		s += packet_count;
    }

    if(debug)
10008644:	9b06      	ldr	r3, [sp, #24]
10008646:	2b00      	cmp	r3, #0
10008648:	d000      	beq.n	1000864c <get_st_6500_biases+0x2e0>
1000864a:	e124      	b.n	10008896 <get_st_6500_biases+0x52a>
    	log_i("Samples: %d\n", s);
1000864c:	4649      	mov	r1, r9
1000864e:	4b43      	ldr	r3, [pc, #268]	; (1000875c <get_st_6500_biases+0x3f0>)
10008650:	4843      	ldr	r0, [pc, #268]	; (10008760 <get_st_6500_biases+0x3f4>)
10008652:	4798      	blx	r3

    //stop FIFO
    data[0] = 0;
10008654:	2300      	movs	r3, #0
10008656:	aa04      	add	r2, sp, #16
10008658:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
1000865a:	4643      	mov	r3, r8
1000865c:	681b      	ldr	r3, [r3, #0]
1000865e:	2201      	movs	r2, #1
10008660:	7959      	ldrb	r1, [r3, #5]
10008662:	4643      	mov	r3, r8
10008664:	685b      	ldr	r3, [r3, #4]
10008666:	7818      	ldrb	r0, [r3, #0]
10008668:	ab08      	add	r3, sp, #32
1000866a:	47d0      	blx	sl
1000866c:	4680      	mov	r8, r0
1000866e:	2800      	cmp	r0, #0
10008670:	d000      	beq.n	10008674 <get_st_6500_biases+0x308>
10008672:	e0d6      	b.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;

    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
10008674:	464b      	mov	r3, r9
10008676:	17db      	asrs	r3, r3, #31
10008678:	469a      	mov	sl, r3
1000867a:	6828      	ldr	r0, [r5, #0]
1000867c:	4e39      	ldr	r6, [pc, #228]	; (10008764 <get_st_6500_biases+0x3f8>)
1000867e:	17c1      	asrs	r1, r0, #31
10008680:	0c03      	lsrs	r3, r0, #16
10008682:	0409      	lsls	r1, r1, #16
10008684:	4319      	orrs	r1, r3
10008686:	2283      	movs	r2, #131	; 0x83
10008688:	2300      	movs	r3, #0
1000868a:	0400      	lsls	r0, r0, #16
1000868c:	47b0      	blx	r6
1000868e:	464a      	mov	r2, r9
10008690:	4653      	mov	r3, sl
10008692:	47b0      	blx	r6
10008694:	6028      	str	r0, [r5, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
10008696:	6868      	ldr	r0, [r5, #4]
10008698:	2283      	movs	r2, #131	; 0x83
1000869a:	17c1      	asrs	r1, r0, #31
1000869c:	0c03      	lsrs	r3, r0, #16
1000869e:	0409      	lsls	r1, r1, #16
100086a0:	4319      	orrs	r1, r3
100086a2:	0400      	lsls	r0, r0, #16
100086a4:	2300      	movs	r3, #0
100086a6:	47b0      	blx	r6
100086a8:	464a      	mov	r2, r9
100086aa:	4653      	mov	r3, sl
100086ac:	47b0      	blx	r6
100086ae:	6068      	str	r0, [r5, #4]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
100086b0:	68a8      	ldr	r0, [r5, #8]
100086b2:	2283      	movs	r2, #131	; 0x83
100086b4:	17c1      	asrs	r1, r0, #31
100086b6:	0c03      	lsrs	r3, r0, #16
100086b8:	0409      	lsls	r1, r1, #16
100086ba:	4319      	orrs	r1, r3
100086bc:	0400      	lsls	r0, r0, #16
100086be:	2300      	movs	r3, #0
100086c0:	47b0      	blx	r6
100086c2:	464a      	mov	r2, r9
100086c4:	4653      	mov	r3, sl
100086c6:	47b0      	blx	r6
100086c8:	60a8      	str	r0, [r5, #8]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
100086ca:	6823      	ldr	r3, [r4, #0]
100086cc:	17da      	asrs	r2, r3, #31
100086ce:	4694      	mov	ip, r2
100086d0:	4667      	mov	r7, ip
100086d2:	0c1a      	lsrs	r2, r3, #16
100086d4:	0439      	lsls	r1, r7, #16
100086d6:	4311      	orrs	r1, r2
100086d8:	0418      	lsls	r0, r3, #16
100086da:	17cb      	asrs	r3, r1, #31
100086dc:	049b      	lsls	r3, r3, #18
100086de:	0c9a      	lsrs	r2, r3, #18
100086e0:	2300      	movs	r3, #0
100086e2:	1812      	adds	r2, r2, r0
100086e4:	414b      	adcs	r3, r1
100086e6:	0499      	lsls	r1, r3, #18
100086e8:	0b90      	lsrs	r0, r2, #14
100086ea:	4308      	orrs	r0, r1
100086ec:	464a      	mov	r2, r9
100086ee:	1399      	asrs	r1, r3, #14
100086f0:	4653      	mov	r3, sl
100086f2:	47b0      	blx	r6
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
100086f4:	6863      	ldr	r3, [r4, #4]
        return -1;

    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
100086f6:	6020      	str	r0, [r4, #0]
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
100086f8:	17da      	asrs	r2, r3, #31
100086fa:	4694      	mov	ip, r2
100086fc:	4667      	mov	r7, ip
100086fe:	0c1a      	lsrs	r2, r3, #16
10008700:	0439      	lsls	r1, r7, #16
10008702:	4311      	orrs	r1, r2
10008704:	0418      	lsls	r0, r3, #16
10008706:	17cb      	asrs	r3, r1, #31
10008708:	049b      	lsls	r3, r3, #18
1000870a:	0c9a      	lsrs	r2, r3, #18
1000870c:	2300      	movs	r3, #0
1000870e:	1812      	adds	r2, r2, r0
10008710:	414b      	adcs	r3, r1
10008712:	0499      	lsls	r1, r3, #18
10008714:	0b90      	lsrs	r0, r2, #14
10008716:	4308      	orrs	r0, r1
10008718:	464a      	mov	r2, r9
1000871a:	1399      	asrs	r1, r3, #14
1000871c:	4653      	mov	r3, sl
1000871e:	47b0      	blx	r6
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
10008720:	68a3      	ldr	r3, [r4, #8]

    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / s);
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / s);
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
10008722:	6060      	str	r0, [r4, #4]
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
10008724:	17da      	asrs	r2, r3, #31
10008726:	4694      	mov	ip, r2
10008728:	4667      	mov	r7, ip
1000872a:	0c1a      	lsrs	r2, r3, #16
1000872c:	0439      	lsls	r1, r7, #16
1000872e:	4311      	orrs	r1, r2
10008730:	0418      	lsls	r0, r3, #16
10008732:	17cb      	asrs	r3, r1, #31
10008734:	049b      	lsls	r3, r3, #18
10008736:	0c9a      	lsrs	r2, r3, #18
10008738:	2300      	movs	r3, #0
1000873a:	e015      	b.n	10008768 <get_st_6500_biases+0x3fc>
1000873c:	fffffddc 	.word	0xfffffddc
10008740:	10008321 	.word	0x10008321
10008744:	1001757c 	.word	0x1001757c
10008748:	1000810d 	.word	0x1000810d
1000874c:	100146e1 	.word	0x100146e1
10008750:	1001566c 	.word	0x1001566c
10008754:	100082b9 	.word	0x100082b9
10008758:	100118cd 	.word	0x100118cd
1000875c:	100145c1 	.word	0x100145c1
10008760:	10015688 	.word	0x10015688
10008764:	10011ca9 	.word	0x10011ca9
10008768:	1812      	adds	r2, r2, r0
1000876a:	414b      	adcs	r3, r1
1000876c:	0499      	lsls	r1, r3, #18
1000876e:	0b90      	lsrs	r0, r2, #14
10008770:	4308      	orrs	r0, r1
10008772:	464a      	mov	r2, r9
10008774:	1399      	asrs	r1, r3, #14
10008776:	4653      	mov	r3, sl
10008778:	47b0      	blx	r6
1000877a:	60a0      	str	r0, [r4, #8]
    /* remove gravity from bias calculation */
    if (accel[2] > 0L)
1000877c:	2900      	cmp	r1, #0
1000877e:	dc00      	bgt.n	10008782 <get_st_6500_biases+0x416>
10008780:	e08d      	b.n	1000889e <get_st_6500_biases+0x532>
        accel[2] -= 65536L;
10008782:	4b4c      	ldr	r3, [pc, #304]	; (100088b4 <get_st_6500_biases+0x548>)
10008784:	469c      	mov	ip, r3
10008786:	4460      	add	r0, ip
10008788:	60a0      	str	r0, [r4, #8]
    else
        accel[2] += 65536L;


    if(debug) {
1000878a:	9b06      	ldr	r3, [sp, #24]
1000878c:	2b00      	cmp	r3, #0
1000878e:	d04b      	beq.n	10008828 <get_st_6500_biases+0x4bc>
    	log_i("Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, accel[0]/65536.f, accel[1]/65536.f, accel[2]/65536.f);
10008790:	9b07      	ldr	r3, [sp, #28]
10008792:	4849      	ldr	r0, [pc, #292]	; (100088b8 <get_st_6500_biases+0x54c>)
10008794:	4798      	blx	r3
10008796:	4a49      	ldr	r2, [pc, #292]	; (100088bc <get_st_6500_biases+0x550>)
10008798:	6820      	ldr	r0, [r4, #0]
1000879a:	4693      	mov	fp, r2
1000879c:	4790      	blx	r2
1000879e:	21de      	movs	r1, #222	; 0xde
100087a0:	4a47      	ldr	r2, [pc, #284]	; (100088c0 <get_st_6500_biases+0x554>)
100087a2:	0589      	lsls	r1, r1, #22
100087a4:	4692      	mov	sl, r2
100087a6:	4790      	blx	r2
100087a8:	4a46      	ldr	r2, [pc, #280]	; (100088c4 <get_st_6500_biases+0x558>)
100087aa:	4691      	mov	r9, r2
100087ac:	4790      	blx	r2
100087ae:	0006      	movs	r6, r0
100087b0:	68a0      	ldr	r0, [r4, #8]
100087b2:	000f      	movs	r7, r1
100087b4:	47d8      	blx	fp
100087b6:	21de      	movs	r1, #222	; 0xde
100087b8:	0589      	lsls	r1, r1, #22
100087ba:	47d0      	blx	sl
100087bc:	47c8      	blx	r9
100087be:	9002      	str	r0, [sp, #8]
100087c0:	9103      	str	r1, [sp, #12]
100087c2:	6860      	ldr	r0, [r4, #4]
100087c4:	47d8      	blx	fp
100087c6:	21de      	movs	r1, #222	; 0xde
100087c8:	0589      	lsls	r1, r1, #22
100087ca:	47d0      	blx	sl
100087cc:	47c8      	blx	r9
100087ce:	0032      	movs	r2, r6
100087d0:	9000      	str	r0, [sp, #0]
100087d2:	9101      	str	r1, [sp, #4]
100087d4:	003b      	movs	r3, r7
100087d6:	9905      	ldr	r1, [sp, #20]
100087d8:	4c3b      	ldr	r4, [pc, #236]	; (100088c8 <get_st_6500_biases+0x55c>)
100087da:	483c      	ldr	r0, [pc, #240]	; (100088cc <get_st_6500_biases+0x560>)
100087dc:	47a0      	blx	r4
    	log_i("Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, gyro[0]/65536.f, gyro[1]/65536.f, gyro[2]/65536.f);
100087de:	9b07      	ldr	r3, [sp, #28]
100087e0:	4835      	ldr	r0, [pc, #212]	; (100088b8 <get_st_6500_biases+0x54c>)
100087e2:	4798      	blx	r3
100087e4:	6828      	ldr	r0, [r5, #0]
100087e6:	47d8      	blx	fp
100087e8:	21de      	movs	r1, #222	; 0xde
100087ea:	0589      	lsls	r1, r1, #22
100087ec:	47d0      	blx	sl
100087ee:	47c8      	blx	r9
100087f0:	0006      	movs	r6, r0
100087f2:	68a8      	ldr	r0, [r5, #8]
100087f4:	000f      	movs	r7, r1
100087f6:	47d8      	blx	fp
100087f8:	21de      	movs	r1, #222	; 0xde
100087fa:	0589      	lsls	r1, r1, #22
100087fc:	47d0      	blx	sl
100087fe:	47c8      	blx	r9
10008800:	9002      	str	r0, [sp, #8]
10008802:	9103      	str	r1, [sp, #12]
10008804:	6868      	ldr	r0, [r5, #4]
10008806:	47d8      	blx	fp
10008808:	21de      	movs	r1, #222	; 0xde
1000880a:	0589      	lsls	r1, r1, #22
1000880c:	47d0      	blx	sl
1000880e:	47c8      	blx	r9
10008810:	0032      	movs	r2, r6
10008812:	9000      	str	r0, [sp, #0]
10008814:	9101      	str	r1, [sp, #4]
10008816:	003b      	movs	r3, r7
10008818:	9905      	ldr	r1, [sp, #20]
1000881a:	4c2b      	ldr	r4, [pc, #172]	; (100088c8 <get_st_6500_biases+0x55c>)
1000881c:	482c      	ldr	r0, [pc, #176]	; (100088d0 <get_st_6500_biases+0x564>)
1000881e:	47a0      	blx	r4
10008820:	e002      	b.n	10008828 <get_st_6500_biases+0x4bc>
    int s = 0, read_size = 0, ind;

    data[0] = 0x01;
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
        return -1;
10008822:	2301      	movs	r3, #1
10008824:	425b      	negs	r3, r3
10008826:	4698      	mov	r8, r3
    	log_i("Accel offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, accel[0]/65536.f, accel[1]/65536.f, accel[2]/65536.f);
    	log_i("Gyro offset data HWST bit=%d: %7.4f %7.4f %7.4f\r\n", hw_test, gyro[0]/65536.f, gyro[1]/65536.f, gyro[2]/65536.f);
    }

    return 0;
}
10008828:	4640      	mov	r0, r8
1000882a:	2389      	movs	r3, #137	; 0x89
1000882c:	009b      	lsls	r3, r3, #2
1000882e:	449d      	add	sp, r3
10008830:	bc3c      	pop	{r2, r3, r4, r5}
10008832:	4690      	mov	r8, r2
10008834:	4699      	mov	r9, r3
10008836:	46a2      	mov	sl, r4
10008838:	46ab      	mov	fp, r5
1000883a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((test.packet_thresh - s) < packet_count)
		            packet_count = test.packet_thresh - s;
		read_size = packet_count * MAX_PACKET_LENGTH;

		//burst read from FIFO
		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, read_size, data))
1000883c:	465b      	mov	r3, fp
1000883e:	005a      	lsls	r2, r3, #1
10008840:	4643      	mov	r3, r8
10008842:	681b      	ldr	r3, [r3, #0]
10008844:	445a      	add	r2, fp
10008846:	7b59      	ldrb	r1, [r3, #13]
10008848:	4643      	mov	r3, r8
1000884a:	685b      	ldr	r3, [r3, #4]
1000884c:	0092      	lsls	r2, r2, #2
1000884e:	7818      	ldrb	r0, [r3, #0]
10008850:	b2d2      	uxtb	r2, r2
10008852:	ab08      	add	r3, sp, #32
10008854:	4e1f      	ldr	r6, [pc, #124]	; (100088d4 <get_st_6500_biases+0x568>)
10008856:	47b0      	blx	r6
10008858:	2800      	cmp	r0, #0
1000885a:	d1e2      	bne.n	10008822 <get_st_6500_biases+0x4b6>
						return -1;
		ind = 0;
		for (ii = 0; ii < packet_count; ii++) {
1000885c:	465b      	mov	r3, fp
1000885e:	2b00      	cmp	r3, #0
10008860:	d000      	beq.n	10008864 <get_st_6500_biases+0x4f8>
10008862:	e6a9      	b.n	100085b8 <get_st_6500_biases+0x24c>
10008864:	e6ea      	b.n	1000863c <get_st_6500_biases+0x2d0>
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
        return -1;
    if (hw_test)
        data[0] = st.test->reg_gyro_fsr | 0xE0;
    else
        data[0] = st.test->reg_gyro_fsr;
10008866:	4643      	mov	r3, r8
10008868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000886a:	aa04      	add	r2, sp, #16
1000886c:	7a9b      	ldrb	r3, [r3, #10]
1000886e:	7413      	strb	r3, [r2, #16]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
10008870:	4643      	mov	r3, r8
10008872:	681b      	ldr	r3, [r3, #0]
10008874:	2201      	movs	r2, #1
10008876:	7999      	ldrb	r1, [r3, #6]
10008878:	4643      	mov	r3, r8
1000887a:	685b      	ldr	r3, [r3, #4]
1000887c:	7818      	ldrb	r0, [r3, #0]
1000887e:	ab08      	add	r3, sp, #32
10008880:	47b0      	blx	r6
10008882:	2800      	cmp	r0, #0
10008884:	d1cd      	bne.n	10008822 <get_st_6500_biases+0x4b6>
        return -1;

    if (hw_test)
        data[0] = st.test->reg_accel_fsr | 0xE0;
    else
        data[0] = test.reg_accel_fsr;
10008886:	ab04      	add	r3, sp, #16
10008888:	7418      	strb	r0, [r3, #16]
1000888a:	e622      	b.n	100084d2 <get_st_6500_biases+0x166>
    //initialize the bias return values
    gyro[0] = gyro[1] = gyro[2] = 0;
    accel[0] = accel[1] = accel[2] = 0;

    if(debug)
    	log_i("Starting Bias Loop Reads\n");
1000888c:	4b12      	ldr	r3, [pc, #72]	; (100088d8 <get_st_6500_biases+0x56c>)
1000888e:	480a      	ldr	r0, [pc, #40]	; (100088b8 <get_st_6500_biases+0x54c>)
10008890:	9307      	str	r3, [sp, #28]
10008892:	4798      	blx	r3
10008894:	e656      	b.n	10008544 <get_st_6500_biases+0x1d8>
		}
		s += packet_count;
    }

    if(debug)
    	log_i("Samples: %d\n", s);
10008896:	9b07      	ldr	r3, [sp, #28]
10008898:	4807      	ldr	r0, [pc, #28]	; (100088b8 <get_st_6500_biases+0x54c>)
1000889a:	4798      	blx	r3
1000889c:	e6d6      	b.n	1000864c <get_st_6500_biases+0x2e0>
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / s);
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens / s);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens / s);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens / s);
    /* remove gravity from bias calculation */
    if (accel[2] > 0L)
1000889e:	2900      	cmp	r1, #0
100088a0:	d102      	bne.n	100088a8 <get_st_6500_biases+0x53c>
100088a2:	2800      	cmp	r0, #0
100088a4:	d000      	beq.n	100088a8 <get_st_6500_biases+0x53c>
100088a6:	e76c      	b.n	10008782 <get_st_6500_biases+0x416>
        accel[2] -= 65536L;
    else
        accel[2] += 65536L;
100088a8:	2380      	movs	r3, #128	; 0x80
100088aa:	025b      	lsls	r3, r3, #9
100088ac:	469c      	mov	ip, r3
100088ae:	4460      	add	r0, ip
100088b0:	60a0      	str	r0, [r4, #8]
100088b2:	e76a      	b.n	1000878a <get_st_6500_biases+0x41e>
100088b4:	ffff0000 	.word	0xffff0000
100088b8:	100158a0 	.word	0x100158a0
100088bc:	10012a15 	.word	0x10012a15
100088c0:	1001246d 	.word	0x1001246d
100088c4:	10013fe1 	.word	0x10013fe1
100088c8:	100145c1 	.word	0x100145c1
100088cc:	10015698 	.word	0x10015698
100088d0:	100156cc 	.word	0x100156cc
100088d4:	100082b9 	.word	0x100082b9
100088d8:	100146e1 	.word	0x100146e1

100088dc <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100088dc:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100088de:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100088e0:	4c17      	ldr	r4, [pc, #92]	; (10008940 <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100088e2:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100088e4:	5ce3      	ldrb	r3, [r4, r3]
100088e6:	2b00      	cmp	r3, #0
100088e8:	d012      	beq.n	10008910 <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
100088ea:	466b      	mov	r3, sp
100088ec:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
100088ee:	2800      	cmp	r0, #0
100088f0:	d117      	bne.n	10008922 <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
100088f2:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100088f4:	6823      	ldr	r3, [r4, #0]
100088f6:	2201      	movs	r2, #1
100088f8:	7c59      	ldrb	r1, [r3, #17]
100088fa:	6863      	ldr	r3, [r4, #4]
100088fc:	4e11      	ldr	r6, [pc, #68]	; (10008944 <set_int_enable+0x68>)
100088fe:	7818      	ldrb	r0, [r3, #0]
10008900:	002b      	movs	r3, r5
10008902:	47b0      	blx	r6
10008904:	2800      	cmp	r0, #0
10008906:	d118      	bne.n	1000893a <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008908:	782b      	ldrb	r3, [r5, #0]
1000890a:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
1000890c:	b002      	add	sp, #8
1000890e:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
10008910:	7aa3      	ldrb	r3, [r4, #10]
10008912:	2b00      	cmp	r3, #0
10008914:	d011      	beq.n	1000893a <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008916:	2800      	cmp	r0, #0
10008918:	d106      	bne.n	10008928 <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
1000891a:	466b      	mov	r3, sp
1000891c:	1ddd      	adds	r5, r3, #7
1000891e:	71d8      	strb	r0, [r3, #7]
10008920:	e7e8      	b.n	100088f4 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
10008922:	2302      	movs	r3, #2
10008924:	702b      	strb	r3, [r5, #0]
10008926:	e7e5      	b.n	100088f4 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008928:	7c63      	ldrb	r3, [r4, #17]
            return 0;
1000892a:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
1000892c:	2b00      	cmp	r3, #0
1000892e:	d1ed      	bne.n	1000890c <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008930:	466b      	mov	r3, sp
10008932:	1ddd      	adds	r5, r3, #7
10008934:	2301      	movs	r3, #1
10008936:	702b      	strb	r3, [r5, #0]
10008938:	e7dc      	b.n	100088f4 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000893a:	2001      	movs	r0, #1
1000893c:	4240      	negs	r0, r0
1000893e:	e7e5      	b.n	1000890c <set_int_enable+0x30>
10008940:	1001757c 	.word	0x1001757c
10008944:	10008321 	.word	0x10008321

10008948 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008948:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000894a:	4c54      	ldr	r4, [pc, #336]	; (10008a9c <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
1000894c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000894e:	7aa3      	ldrb	r3, [r4, #10]
10008950:	2b00      	cmp	r3, #0
10008952:	d100      	bne.n	10008956 <mpu_reset_fifo+0xe>
10008954:	e08f      	b.n	10008a76 <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
10008956:	466b      	mov	r3, sp
10008958:	1ddd      	adds	r5, r3, #7
1000895a:	2300      	movs	r3, #0
1000895c:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000895e:	6823      	ldr	r3, [r4, #0]
10008960:	2201      	movs	r2, #1
10008962:	7c59      	ldrb	r1, [r3, #17]
10008964:	6863      	ldr	r3, [r4, #4]
10008966:	4e4e      	ldr	r6, [pc, #312]	; (10008aa0 <mpu_reset_fifo+0x158>)
10008968:	7818      	ldrb	r0, [r3, #0]
1000896a:	002b      	movs	r3, r5
1000896c:	47b0      	blx	r6
1000896e:	2800      	cmp	r0, #0
10008970:	d000      	beq.n	10008974 <mpu_reset_fifo+0x2c>
10008972:	e080      	b.n	10008a76 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008974:	6823      	ldr	r3, [r4, #0]
10008976:	2201      	movs	r2, #1
10008978:	7959      	ldrb	r1, [r3, #5]
1000897a:	6863      	ldr	r3, [r4, #4]
1000897c:	7818      	ldrb	r0, [r3, #0]
1000897e:	002b      	movs	r3, r5
10008980:	47b0      	blx	r6
10008982:	2800      	cmp	r0, #0
10008984:	d177      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008986:	6823      	ldr	r3, [r4, #0]
10008988:	2201      	movs	r2, #1
1000898a:	7919      	ldrb	r1, [r3, #4]
1000898c:	6863      	ldr	r3, [r4, #4]
1000898e:	7818      	ldrb	r0, [r3, #0]
10008990:	002b      	movs	r3, r5
10008992:	47b0      	blx	r6
10008994:	2800      	cmp	r0, #0
10008996:	d16e      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008998:	2324      	movs	r3, #36	; 0x24
1000899a:	5ce3      	ldrb	r3, [r4, r3]
1000899c:	2b00      	cmp	r3, #0
1000899e:	d034      	beq.n	10008a0a <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100089a0:	230c      	movs	r3, #12
100089a2:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100089a4:	6823      	ldr	r3, [r4, #0]
100089a6:	2201      	movs	r2, #1
100089a8:	7919      	ldrb	r1, [r3, #4]
100089aa:	6863      	ldr	r3, [r4, #4]
100089ac:	7818      	ldrb	r0, [r3, #0]
100089ae:	002b      	movs	r3, r5
100089b0:	47b0      	blx	r6
100089b2:	2800      	cmp	r0, #0
100089b4:	d15f      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
100089b6:	4b3b      	ldr	r3, [pc, #236]	; (10008aa4 <mpu_reset_fifo+0x15c>)
100089b8:	3032      	adds	r0, #50	; 0x32
100089ba:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100089bc:	23c0      	movs	r3, #192	; 0xc0
100089be:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100089c0:	7aa3      	ldrb	r3, [r4, #10]
100089c2:	07db      	lsls	r3, r3, #31
100089c4:	d461      	bmi.n	10008a8a <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100089c6:	6823      	ldr	r3, [r4, #0]
100089c8:	2201      	movs	r2, #1
100089ca:	7919      	ldrb	r1, [r3, #4]
100089cc:	6863      	ldr	r3, [r4, #4]
100089ce:	7818      	ldrb	r0, [r3, #0]
100089d0:	002b      	movs	r3, r5
100089d2:	47b0      	blx	r6
100089d4:	2800      	cmp	r0, #0
100089d6:	d14e      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100089d8:	7c63      	ldrb	r3, [r4, #17]
100089da:	2b00      	cmp	r3, #0
100089dc:	d158      	bne.n	10008a90 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100089de:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100089e0:	6823      	ldr	r3, [r4, #0]
100089e2:	2201      	movs	r2, #1
100089e4:	7c59      	ldrb	r1, [r3, #17]
100089e6:	6863      	ldr	r3, [r4, #4]
100089e8:	7818      	ldrb	r0, [r3, #0]
100089ea:	002b      	movs	r3, r5
100089ec:	47b0      	blx	r6
100089ee:	2800      	cmp	r0, #0
100089f0:	d141      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100089f2:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
100089f4:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100089f6:	7959      	ldrb	r1, [r3, #5]
100089f8:	6863      	ldr	r3, [r4, #4]
100089fa:	2201      	movs	r2, #1
100089fc:	7818      	ldrb	r0, [r3, #0]
100089fe:	002b      	movs	r3, r5
10008a00:	47b0      	blx	r6
10008a02:	1e43      	subs	r3, r0, #1
10008a04:	4198      	sbcs	r0, r3
10008a06:	4240      	negs	r0, r0
10008a08:	e037      	b.n	10008a7a <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
10008a0a:	2304      	movs	r3, #4
10008a0c:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008a0e:	6823      	ldr	r3, [r4, #0]
10008a10:	2201      	movs	r2, #1
10008a12:	7919      	ldrb	r1, [r3, #4]
10008a14:	6863      	ldr	r3, [r4, #4]
10008a16:	7818      	ldrb	r0, [r3, #0]
10008a18:	002b      	movs	r3, r5
10008a1a:	47b0      	blx	r6
10008a1c:	2800      	cmp	r0, #0
10008a1e:	d12a      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008a20:	7ca3      	ldrb	r3, [r4, #18]
10008a22:	2b00      	cmp	r3, #0
10008a24:	d02b      	beq.n	10008a7e <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
10008a26:	2340      	movs	r3, #64	; 0x40
10008a28:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008a2a:	6823      	ldr	r3, [r4, #0]
10008a2c:	2201      	movs	r2, #1
10008a2e:	7919      	ldrb	r1, [r3, #4]
10008a30:	6863      	ldr	r3, [r4, #4]
10008a32:	7818      	ldrb	r0, [r3, #0]
10008a34:	002b      	movs	r3, r5
10008a36:	47b0      	blx	r6
10008a38:	2800      	cmp	r0, #0
10008a3a:	d11c      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008a3c:	4b19      	ldr	r3, [pc, #100]	; (10008aa4 <mpu_reset_fifo+0x15c>)
10008a3e:	3032      	adds	r0, #50	; 0x32
10008a40:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008a42:	7c63      	ldrb	r3, [r4, #17]
10008a44:	2b00      	cmp	r3, #0
10008a46:	d026      	beq.n	10008a96 <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
10008a48:	2301      	movs	r3, #1
10008a4a:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008a4c:	6823      	ldr	r3, [r4, #0]
10008a4e:	2201      	movs	r2, #1
10008a50:	7c59      	ldrb	r1, [r3, #17]
10008a52:	6863      	ldr	r3, [r4, #4]
10008a54:	7818      	ldrb	r0, [r3, #0]
10008a56:	002b      	movs	r3, r5
10008a58:	47b0      	blx	r6
10008a5a:	2800      	cmp	r0, #0
10008a5c:	d10b      	bne.n	10008a76 <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008a5e:	0023      	movs	r3, r4
10008a60:	6822      	ldr	r2, [r4, #0]
10008a62:	3310      	adds	r3, #16
10008a64:	7951      	ldrb	r1, [r2, #5]
10008a66:	6862      	ldr	r2, [r4, #4]
10008a68:	7810      	ldrb	r0, [r2, #0]
10008a6a:	2201      	movs	r2, #1
10008a6c:	47b0      	blx	r6
10008a6e:	1e43      	subs	r3, r0, #1
10008a70:	4198      	sbcs	r0, r3
10008a72:	4240      	negs	r0, r0
10008a74:	e001      	b.n	10008a7a <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008a76:	2001      	movs	r0, #1
10008a78:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008a7a:	b002      	add	sp, #8
10008a7c:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008a7e:	7aa3      	ldrb	r3, [r4, #10]
10008a80:	07db      	lsls	r3, r3, #31
10008a82:	d5d0      	bpl.n	10008a26 <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008a84:	2360      	movs	r3, #96	; 0x60
10008a86:	702b      	strb	r3, [r5, #0]
10008a88:	e7cf      	b.n	10008a2a <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
10008a8a:	23e0      	movs	r3, #224	; 0xe0
10008a8c:	702b      	strb	r3, [r5, #0]
10008a8e:	e79a      	b.n	100089c6 <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
10008a90:	2302      	movs	r3, #2
10008a92:	702b      	strb	r3, [r5, #0]
10008a94:	e7a4      	b.n	100089e0 <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
10008a96:	702b      	strb	r3, [r5, #0]
10008a98:	e7d8      	b.n	10008a4c <mpu_reset_fifo+0x104>
10008a9a:	46c0      	nop			; (mov r8, r8)
10008a9c:	1001757c 	.word	0x1001757c
10008aa0:	10008321 	.word	0x10008321
10008aa4:	1000810d 	.word	0x1000810d

10008aa8 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
10008aa8:	4b0e      	ldr	r3, [pc, #56]	; (10008ae4 <mpu_get_gyro_fsr+0x3c>)
10008aaa:	7a1b      	ldrb	r3, [r3, #8]
10008aac:	2b01      	cmp	r3, #1
10008aae:	d014      	beq.n	10008ada <mpu_get_gyro_fsr+0x32>
10008ab0:	2b00      	cmp	r3, #0
10008ab2:	d00f      	beq.n	10008ad4 <mpu_get_gyro_fsr+0x2c>
10008ab4:	2b02      	cmp	r3, #2
10008ab6:	d006      	beq.n	10008ac6 <mpu_get_gyro_fsr+0x1e>
10008ab8:	2b03      	cmp	r3, #3
10008aba:	d108      	bne.n	10008ace <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008abc:	23fa      	movs	r3, #250	; 0xfa
10008abe:	00db      	lsls	r3, r3, #3
10008ac0:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
10008ac2:	2000      	movs	r0, #0
10008ac4:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
10008ac6:	23fa      	movs	r3, #250	; 0xfa
10008ac8:	009b      	lsls	r3, r3, #2
10008aca:	8003      	strh	r3, [r0, #0]
        break;
10008acc:	e7f9      	b.n	10008ac2 <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
10008ace:	2300      	movs	r3, #0
10008ad0:	8003      	strh	r3, [r0, #0]
        break;
10008ad2:	e7f6      	b.n	10008ac2 <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
10008ad4:	23fa      	movs	r3, #250	; 0xfa
10008ad6:	8003      	strh	r3, [r0, #0]
        break;
10008ad8:	e7f3      	b.n	10008ac2 <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
10008ada:	23fa      	movs	r3, #250	; 0xfa
10008adc:	005b      	lsls	r3, r3, #1
10008ade:	8003      	strh	r3, [r0, #0]
        break;
10008ae0:	e7ef      	b.n	10008ac2 <mpu_get_gyro_fsr+0x1a>
10008ae2:	46c0      	nop			; (mov r8, r8)
10008ae4:	1001757c 	.word	0x1001757c

10008ae8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008ae8:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008aea:	4c20      	ldr	r4, [pc, #128]	; (10008b6c <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008aec:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008aee:	7aa3      	ldrb	r3, [r4, #10]
10008af0:	2b00      	cmp	r3, #0
10008af2:	d02a      	beq.n	10008b4a <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
10008af4:	23fa      	movs	r3, #250	; 0xfa
10008af6:	005b      	lsls	r3, r3, #1
10008af8:	4298      	cmp	r0, r3
10008afa:	d030      	beq.n	10008b5e <mpu_set_gyro_fsr+0x76>
10008afc:	d90d      	bls.n	10008b1a <mpu_set_gyro_fsr+0x32>
10008afe:	23fa      	movs	r3, #250	; 0xfa
10008b00:	009b      	lsls	r3, r3, #2
10008b02:	4298      	cmp	r0, r3
10008b04:	d025      	beq.n	10008b52 <mpu_set_gyro_fsr+0x6a>
10008b06:	23fa      	movs	r3, #250	; 0xfa
10008b08:	00db      	lsls	r3, r3, #3
10008b0a:	4298      	cmp	r0, r3
10008b0c:	d11d      	bne.n	10008b4a <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008b0e:	466b      	mov	r3, sp
10008b10:	1ddd      	adds	r5, r3, #7
10008b12:	2318      	movs	r3, #24
10008b14:	702b      	strb	r3, [r5, #0]
        break;
10008b16:	3b15      	subs	r3, #21
10008b18:	e005      	b.n	10008b26 <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
10008b1a:	28fa      	cmp	r0, #250	; 0xfa
10008b1c:	d115      	bne.n	10008b4a <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
10008b1e:	466b      	mov	r3, sp
10008b20:	1ddd      	adds	r5, r3, #7
10008b22:	2300      	movs	r3, #0
10008b24:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008b26:	7a22      	ldrb	r2, [r4, #8]
        return 0;
10008b28:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008b2a:	429a      	cmp	r2, r3
10008b2c:	d00f      	beq.n	10008b4e <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008b2e:	6823      	ldr	r3, [r4, #0]
10008b30:	2201      	movs	r2, #1
10008b32:	7999      	ldrb	r1, [r3, #6]
10008b34:	6863      	ldr	r3, [r4, #4]
10008b36:	4e0e      	ldr	r6, [pc, #56]	; (10008b70 <mpu_set_gyro_fsr+0x88>)
10008b38:	7818      	ldrb	r0, [r3, #0]
10008b3a:	002b      	movs	r3, r5
10008b3c:	47b0      	blx	r6
10008b3e:	2800      	cmp	r0, #0
10008b40:	d103      	bne.n	10008b4a <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008b42:	782b      	ldrb	r3, [r5, #0]
10008b44:	08db      	lsrs	r3, r3, #3
10008b46:	7223      	strb	r3, [r4, #8]
    return 0;
10008b48:	e001      	b.n	10008b4e <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008b4a:	2001      	movs	r0, #1
10008b4c:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008b4e:	b002      	add	sp, #8
10008b50:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008b52:	466b      	mov	r3, sp
10008b54:	1ddd      	adds	r5, r3, #7
10008b56:	2310      	movs	r3, #16
10008b58:	702b      	strb	r3, [r5, #0]
        break;
10008b5a:	3b0e      	subs	r3, #14
10008b5c:	e7e3      	b.n	10008b26 <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
10008b5e:	466b      	mov	r3, sp
10008b60:	1ddd      	adds	r5, r3, #7
10008b62:	2308      	movs	r3, #8
10008b64:	702b      	strb	r3, [r5, #0]
        break;
10008b66:	3b07      	subs	r3, #7
10008b68:	e7dd      	b.n	10008b26 <mpu_set_gyro_fsr+0x3e>
10008b6a:	46c0      	nop			; (mov r8, r8)
10008b6c:	1001757c 	.word	0x1001757c
10008b70:	10008321 	.word	0x10008321

10008b74 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008b74:	4a10      	ldr	r2, [pc, #64]	; (10008bb8 <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008b76:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
10008b78:	7a53      	ldrb	r3, [r2, #9]
10008b7a:	2b01      	cmp	r3, #1
10008b7c:	d018      	beq.n	10008bb0 <mpu_get_accel_fsr+0x3c>
10008b7e:	2b00      	cmp	r3, #0
10008b80:	d013      	beq.n	10008baa <mpu_get_accel_fsr+0x36>
10008b82:	2b02      	cmp	r3, #2
10008b84:	d00b      	beq.n	10008b9e <mpu_get_accel_fsr+0x2a>
10008b86:	2b03      	cmp	r3, #3
10008b88:	d10c      	bne.n	10008ba4 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
10008b8a:	2310      	movs	r3, #16
10008b8c:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008b8e:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
10008b90:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008b92:	2b00      	cmp	r3, #0
10008b94:	d002      	beq.n	10008b9c <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
10008b96:	780b      	ldrb	r3, [r1, #0]
10008b98:	005b      	lsls	r3, r3, #1
10008b9a:	700b      	strb	r3, [r1, #0]
    return 0;
}
10008b9c:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
10008b9e:	2308      	movs	r3, #8
10008ba0:	7003      	strb	r3, [r0, #0]
        break;
10008ba2:	e7f4      	b.n	10008b8e <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008ba4:	2001      	movs	r0, #1
10008ba6:	4240      	negs	r0, r0
10008ba8:	e7f8      	b.n	10008b9c <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
10008baa:	2302      	movs	r3, #2
10008bac:	7003      	strb	r3, [r0, #0]
        break;
10008bae:	e7ee      	b.n	10008b8e <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
10008bb0:	2304      	movs	r3, #4
10008bb2:	7003      	strb	r3, [r0, #0]
        break;
10008bb4:	e7eb      	b.n	10008b8e <mpu_get_accel_fsr+0x1a>
10008bb6:	46c0      	nop			; (mov r8, r8)
10008bb8:	1001757c 	.word	0x1001757c

10008bbc <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008bbc:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008bbe:	4c1d      	ldr	r4, [pc, #116]	; (10008c34 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008bc0:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008bc2:	7aa3      	ldrb	r3, [r4, #10]
10008bc4:	2b00      	cmp	r3, #0
10008bc6:	d024      	beq.n	10008c12 <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
10008bc8:	2804      	cmp	r0, #4
10008bca:	d02c      	beq.n	10008c26 <mpu_set_accel_fsr+0x6a>
10008bcc:	d909      	bls.n	10008be2 <mpu_set_accel_fsr+0x26>
10008bce:	2808      	cmp	r0, #8
10008bd0:	d023      	beq.n	10008c1a <mpu_set_accel_fsr+0x5e>
10008bd2:	2810      	cmp	r0, #16
10008bd4:	d11d      	bne.n	10008c12 <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
10008bd6:	466b      	mov	r3, sp
10008bd8:	1ddd      	adds	r5, r3, #7
10008bda:	2318      	movs	r3, #24
10008bdc:	702b      	strb	r3, [r5, #0]
        break;
10008bde:	3b15      	subs	r3, #21
10008be0:	e005      	b.n	10008bee <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
10008be2:	2802      	cmp	r0, #2
10008be4:	d115      	bne.n	10008c12 <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
10008be6:	466b      	mov	r3, sp
10008be8:	1ddd      	adds	r5, r3, #7
10008bea:	2300      	movs	r3, #0
10008bec:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008bee:	7a62      	ldrb	r2, [r4, #9]
        return 0;
10008bf0:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008bf2:	429a      	cmp	r2, r3
10008bf4:	d00f      	beq.n	10008c16 <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008bf6:	6823      	ldr	r3, [r4, #0]
10008bf8:	2201      	movs	r2, #1
10008bfa:	79d9      	ldrb	r1, [r3, #7]
10008bfc:	6863      	ldr	r3, [r4, #4]
10008bfe:	4e0e      	ldr	r6, [pc, #56]	; (10008c38 <mpu_set_accel_fsr+0x7c>)
10008c00:	7818      	ldrb	r0, [r3, #0]
10008c02:	002b      	movs	r3, r5
10008c04:	47b0      	blx	r6
10008c06:	2800      	cmp	r0, #0
10008c08:	d103      	bne.n	10008c12 <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008c0a:	782b      	ldrb	r3, [r5, #0]
10008c0c:	08db      	lsrs	r3, r3, #3
10008c0e:	7263      	strb	r3, [r4, #9]
    return 0;
10008c10:	e001      	b.n	10008c16 <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008c12:	2001      	movs	r0, #1
10008c14:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008c16:	b002      	add	sp, #8
10008c18:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
10008c1a:	466b      	mov	r3, sp
10008c1c:	1ddd      	adds	r5, r3, #7
10008c1e:	2310      	movs	r3, #16
10008c20:	702b      	strb	r3, [r5, #0]
        break;
10008c22:	3b0e      	subs	r3, #14
10008c24:	e7e3      	b.n	10008bee <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
10008c26:	466b      	mov	r3, sp
10008c28:	1ddd      	adds	r5, r3, #7
10008c2a:	2308      	movs	r3, #8
10008c2c:	702b      	strb	r3, [r5, #0]
        break;
10008c2e:	3b07      	subs	r3, #7
10008c30:	e7dd      	b.n	10008bee <mpu_set_accel_fsr+0x32>
10008c32:	46c0      	nop			; (mov r8, r8)
10008c34:	1001757c 	.word	0x1001757c
10008c38:	10008321 	.word	0x10008321

10008c3c <mpu_get_lpf>:
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
    switch (st.chip_cfg.lpf) {
10008c3c:	4b0e      	ldr	r3, [pc, #56]	; (10008c78 <mpu_get_lpf+0x3c>)
10008c3e:	7adb      	ldrb	r3, [r3, #11]
10008c40:	2b06      	cmp	r3, #6
10008c42:	d816      	bhi.n	10008c72 <mpu_get_lpf+0x36>
10008c44:	4a0d      	ldr	r2, [pc, #52]	; (10008c7c <mpu_get_lpf+0x40>)
10008c46:	009b      	lsls	r3, r3, #2
10008c48:	58d3      	ldr	r3, [r2, r3]
10008c4a:	469f      	mov	pc, r3
        break;
    case INV_FILTER_10HZ:
        lpf[0] = 10;
        break;
    case INV_FILTER_5HZ:
        lpf[0] = 5;
10008c4c:	2305      	movs	r3, #5
10008c4e:	8003      	strh	r3, [r0, #0]
    default:
        lpf[0] = 0;
        break;
    }
    return 0;
}
10008c50:	2000      	movs	r0, #0
10008c52:	4770      	bx	lr
 */
int mpu_get_lpf(unsigned short *lpf)
{
    switch (st.chip_cfg.lpf) {
    case INV_FILTER_188HZ:
        lpf[0] = 188;
10008c54:	23bc      	movs	r3, #188	; 0xbc
10008c56:	8003      	strh	r3, [r0, #0]
        break;
10008c58:	e7fa      	b.n	10008c50 <mpu_get_lpf+0x14>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
10008c5a:	2362      	movs	r3, #98	; 0x62
10008c5c:	8003      	strh	r3, [r0, #0]
        break;
10008c5e:	e7f7      	b.n	10008c50 <mpu_get_lpf+0x14>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
10008c60:	232a      	movs	r3, #42	; 0x2a
10008c62:	8003      	strh	r3, [r0, #0]
        break;
10008c64:	e7f4      	b.n	10008c50 <mpu_get_lpf+0x14>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
10008c66:	2314      	movs	r3, #20
10008c68:	8003      	strh	r3, [r0, #0]
        break;
10008c6a:	e7f1      	b.n	10008c50 <mpu_get_lpf+0x14>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
10008c6c:	230a      	movs	r3, #10
10008c6e:	8003      	strh	r3, [r0, #0]
        break;
10008c70:	e7ee      	b.n	10008c50 <mpu_get_lpf+0x14>
        lpf[0] = 5;
        break;
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
10008c72:	2300      	movs	r3, #0
10008c74:	8003      	strh	r3, [r0, #0]
        break;
10008c76:	e7eb      	b.n	10008c50 <mpu_get_lpf+0x14>
10008c78:	1001757c 	.word	0x1001757c
10008c7c:	10015620 	.word	0x10015620

10008c80 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008c80:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008c82:	4c22      	ldr	r4, [pc, #136]	; (10008d0c <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008c84:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008c86:	7aa3      	ldrb	r3, [r4, #10]
10008c88:	2b00      	cmp	r3, #0
10008c8a:	d033      	beq.n	10008cf4 <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008c8c:	466b      	mov	r3, sp
10008c8e:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008c90:	28bb      	cmp	r0, #187	; 0xbb
10008c92:	d822      	bhi.n	10008cda <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
10008c94:	2861      	cmp	r0, #97	; 0x61
10008c96:	d923      	bls.n	10008ce0 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008c98:	2302      	movs	r3, #2
10008c9a:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008c9c:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
10008c9e:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008ca0:	429a      	cmp	r2, r3
10008ca2:	d018      	beq.n	10008cd6 <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008ca4:	6823      	ldr	r3, [r4, #0]
10008ca6:	2201      	movs	r2, #1
10008ca8:	7899      	ldrb	r1, [r3, #2]
10008caa:	6863      	ldr	r3, [r4, #4]
10008cac:	4e18      	ldr	r6, [pc, #96]	; (10008d10 <mpu_set_lpf+0x90>)
10008cae:	7818      	ldrb	r0, [r3, #0]
10008cb0:	002b      	movs	r3, r5
10008cb2:	47b0      	blx	r6
10008cb4:	2800      	cmp	r0, #0
10008cb6:	d11d      	bne.n	10008cf4 <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008cb8:	2340      	movs	r3, #64	; 0x40
10008cba:	782a      	ldrb	r2, [r5, #0]
10008cbc:	4313      	orrs	r3, r2
10008cbe:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008cc0:	6823      	ldr	r3, [r4, #0]
10008cc2:	2201      	movs	r2, #1
10008cc4:	7a19      	ldrb	r1, [r3, #8]
10008cc6:	6863      	ldr	r3, [r4, #4]
10008cc8:	7818      	ldrb	r0, [r3, #0]
10008cca:	002b      	movs	r3, r5
10008ccc:	47b0      	blx	r6
10008cce:	2800      	cmp	r0, #0
10008cd0:	d110      	bne.n	10008cf4 <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008cd2:	782b      	ldrb	r3, [r5, #0]
10008cd4:	72e3      	strb	r3, [r4, #11]
    return 0;
}
10008cd6:	b002      	add	sp, #8
10008cd8:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008cda:	2301      	movs	r3, #1
10008cdc:	702b      	strb	r3, [r5, #0]
10008cde:	e7dd      	b.n	10008c9c <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
10008ce0:	2829      	cmp	r0, #41	; 0x29
10008ce2:	d804      	bhi.n	10008cee <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
10008ce4:	2813      	cmp	r0, #19
10008ce6:	d908      	bls.n	10008cfa <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
10008ce8:	2304      	movs	r3, #4
10008cea:	702b      	strb	r3, [r5, #0]
10008cec:	e7d6      	b.n	10008c9c <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
10008cee:	2303      	movs	r3, #3
10008cf0:	702b      	strb	r3, [r5, #0]
10008cf2:	e7d3      	b.n	10008c9c <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008cf4:	2001      	movs	r0, #1
10008cf6:	4240      	negs	r0, r0
10008cf8:	e7ed      	b.n	10008cd6 <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
10008cfa:	2809      	cmp	r0, #9
10008cfc:	d902      	bls.n	10008d04 <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
10008cfe:	2305      	movs	r3, #5
10008d00:	702b      	strb	r3, [r5, #0]
10008d02:	e7cb      	b.n	10008c9c <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
10008d04:	2306      	movs	r3, #6
10008d06:	702b      	strb	r3, [r5, #0]
10008d08:	e7c8      	b.n	10008c9c <mpu_set_lpf+0x1c>
10008d0a:	46c0      	nop			; (mov r8, r8)
10008d0c:	1001757c 	.word	0x1001757c
10008d10:	10008321 	.word	0x10008321

10008d14 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008d14:	2224      	movs	r2, #36	; 0x24
10008d16:	4b05      	ldr	r3, [pc, #20]	; (10008d2c <mpu_get_sample_rate+0x18>)
10008d18:	5c9a      	ldrb	r2, [r3, r2]
10008d1a:	2a00      	cmp	r2, #0
10008d1c:	d103      	bne.n	10008d26 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008d1e:	89db      	ldrh	r3, [r3, #14]
10008d20:	8003      	strh	r3, [r0, #0]
    return 0;
10008d22:	2000      	movs	r0, #0
}
10008d24:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
10008d26:	2001      	movs	r0, #1
10008d28:	4240      	negs	r0, r0
10008d2a:	e7fb      	b.n	10008d24 <mpu_get_sample_rate+0x10>
10008d2c:	1001757c 	.word	0x1001757c

10008d30 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008d30:	b530      	push	{r4, r5, lr}
10008d32:	0001      	movs	r1, r0
10008d34:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008d36:	2800      	cmp	r0, #0
10008d38:	d020      	beq.n	10008d7c <mpu_set_compass_sample_rate+0x4c>
10008d3a:	4c12      	ldr	r4, [pc, #72]	; (10008d84 <mpu_set_compass_sample_rate+0x54>)
10008d3c:	89e0      	ldrh	r0, [r4, #14]
10008d3e:	4281      	cmp	r1, r0
10008d40:	d81c      	bhi.n	10008d7c <mpu_set_compass_sample_rate+0x4c>
10008d42:	2964      	cmp	r1, #100	; 0x64
10008d44:	d81a      	bhi.n	10008d7c <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008d46:	4b10      	ldr	r3, [pc, #64]	; (10008d88 <mpu_set_compass_sample_rate+0x58>)
10008d48:	4798      	blx	r3
10008d4a:	466b      	mov	r3, sp
10008d4c:	3801      	subs	r0, #1
10008d4e:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008d50:	2324      	movs	r3, #36	; 0x24
10008d52:	6822      	ldr	r2, [r4, #0]
10008d54:	4d0d      	ldr	r5, [pc, #52]	; (10008d8c <mpu_set_compass_sample_rate+0x5c>)
10008d56:	5cd1      	ldrb	r1, [r2, r3]
10008d58:	6863      	ldr	r3, [r4, #4]
10008d5a:	2201      	movs	r2, #1
10008d5c:	7818      	ldrb	r0, [r3, #0]
10008d5e:	466b      	mov	r3, sp
10008d60:	3307      	adds	r3, #7
10008d62:	47a8      	blx	r5
10008d64:	1e05      	subs	r5, r0, #0
10008d66:	d109      	bne.n	10008d7c <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008d68:	466b      	mov	r3, sp
10008d6a:	79d9      	ldrb	r1, [r3, #7]
10008d6c:	89e0      	ldrh	r0, [r4, #14]
10008d6e:	3101      	adds	r1, #1
10008d70:	4b07      	ldr	r3, [pc, #28]	; (10008d90 <mpu_set_compass_sample_rate+0x60>)
10008d72:	4798      	blx	r3
10008d74:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
10008d76:	0028      	movs	r0, r5
10008d78:	b003      	add	sp, #12
10008d7a:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008d7c:	2501      	movs	r5, #1
10008d7e:	426d      	negs	r5, r5
10008d80:	e7f9      	b.n	10008d76 <mpu_set_compass_sample_rate+0x46>
10008d82:	46c0      	nop			; (mov r8, r8)
10008d84:	1001757c 	.word	0x1001757c
10008d88:	100118cd 	.word	0x100118cd
10008d8c:	10008321 	.word	0x10008321
10008d90:	100119e1 	.word	0x100119e1

10008d94 <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008d94:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008d96:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008d98:	4d14      	ldr	r5, [pc, #80]	; (10008dec <mpu_configure_fifo+0x58>)
        return 0;
10008d9a:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008d9c:	5ceb      	ldrb	r3, [r5, r3]
10008d9e:	2b00      	cmp	r3, #0
10008da0:	d113      	bne.n	10008dca <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008da2:	7aac      	ldrb	r4, [r5, #10]
10008da4:	2c00      	cmp	r4, #0
10008da6:	d01d      	beq.n	10008de4 <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008da8:	3301      	adds	r3, #1
10008daa:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008dac:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008dae:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008db0:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008db2:	1b04      	subs	r4, r0, r4
10008db4:	1e63      	subs	r3, r4, #1
10008db6:	419c      	sbcs	r4, r3
10008db8:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008dba:	2800      	cmp	r0, #0
10008dbc:	d107      	bne.n	10008dce <mpu_configure_fifo+0x3a>
10008dbe:	7d2b      	ldrb	r3, [r5, #20]
10008dc0:	2b00      	cmp	r3, #0
10008dc2:	d000      	beq.n	10008dc6 <mpu_configure_fifo+0x32>
            set_int_enable(1);
10008dc4:	2001      	movs	r0, #1
10008dc6:	4b0a      	ldr	r3, [pc, #40]	; (10008df0 <mpu_configure_fifo+0x5c>)
10008dc8:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008dca:	0020      	movs	r0, r4
10008dcc:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008dce:	4b08      	ldr	r3, [pc, #32]	; (10008df0 <mpu_configure_fifo+0x5c>)
10008dd0:	2001      	movs	r0, #1
10008dd2:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008dd4:	4b07      	ldr	r3, [pc, #28]	; (10008df4 <mpu_configure_fifo+0x60>)
10008dd6:	4798      	blx	r3
10008dd8:	2800      	cmp	r0, #0
10008dda:	d0f6      	beq.n	10008dca <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
10008ddc:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008dde:	742e      	strb	r6, [r5, #16]
                return -1;
10008de0:	4264      	negs	r4, r4
10008de2:	e7f2      	b.n	10008dca <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008de4:	2401      	movs	r4, #1
10008de6:	4264      	negs	r4, r4
10008de8:	e7ef      	b.n	10008dca <mpu_configure_fifo+0x36>
10008dea:	46c0      	nop			; (mov r8, r8)
10008dec:	1001757c 	.word	0x1001757c
10008df0:	100088dd 	.word	0x100088dd
10008df4:	10008949 	.word	0x10008949

10008df8 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
10008dfa:	4657      	mov	r7, sl
10008dfc:	464e      	mov	r6, r9
10008dfe:	4645      	mov	r5, r8
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008e00:	2324      	movs	r3, #36	; 0x24
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008e02:	b4e0      	push	{r5, r6, r7}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008e04:	4c26      	ldr	r4, [pc, #152]	; (10008ea0 <mpu_read_fifo_stream+0xa8>)
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008e06:	b082      	sub	sp, #8
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008e08:	5ce3      	ldrb	r3, [r4, r3]
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008e0a:	0007      	movs	r7, r0
10008e0c:	468a      	mov	sl, r1
10008e0e:	4691      	mov	r9, r2
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008e10:	2b00      	cmp	r3, #0
10008e12:	d03d      	beq.n	10008e90 <mpu_read_fifo_stream+0x98>
        return -1;
    if (!st.chip_cfg.sensors)
10008e14:	7aa3      	ldrb	r3, [r4, #10]
10008e16:	2b00      	cmp	r3, #0
10008e18:	d03a      	beq.n	10008e90 <mpu_read_fifo_stream+0x98>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
10008e1a:	6823      	ldr	r3, [r4, #0]
10008e1c:	ae01      	add	r6, sp, #4
10008e1e:	7b19      	ldrb	r1, [r3, #12]
10008e20:	6863      	ldr	r3, [r4, #4]
10008e22:	4d20      	ldr	r5, [pc, #128]	; (10008ea4 <mpu_read_fifo_stream+0xac>)
10008e24:	7818      	ldrb	r0, [r3, #0]
10008e26:	2202      	movs	r2, #2
10008e28:	0033      	movs	r3, r6
10008e2a:	46a8      	mov	r8, r5
10008e2c:	47a8      	blx	r5
10008e2e:	2800      	cmp	r0, #0
10008e30:	d12e      	bne.n	10008e90 <mpu_read_fifo_stream+0x98>
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
10008e32:	7835      	ldrb	r5, [r6, #0]
10008e34:	7873      	ldrb	r3, [r6, #1]
10008e36:	022d      	lsls	r5, r5, #8
10008e38:	431d      	orrs	r5, r3
    if (fifo_count < length) {
10008e3a:	42bd      	cmp	r5, r7
10008e3c:	d326      	bcc.n	10008e8c <mpu_read_fifo_stream+0x94>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008e3e:	6860      	ldr	r0, [r4, #4]
10008e40:	8843      	ldrh	r3, [r0, #2]
10008e42:	085b      	lsrs	r3, r3, #1
10008e44:	429d      	cmp	r5, r3
10008e46:	d90b      	bls.n	10008e60 <mpu_read_fifo_stream+0x68>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
10008e48:	6823      	ldr	r3, [r4, #0]
10008e4a:	7800      	ldrb	r0, [r0, #0]
10008e4c:	7cd9      	ldrb	r1, [r3, #19]
10008e4e:	2201      	movs	r2, #1
10008e50:	0033      	movs	r3, r6
10008e52:	47c0      	blx	r8
10008e54:	2800      	cmp	r0, #0
10008e56:	d11b      	bne.n	10008e90 <mpu_read_fifo_stream+0x98>
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
10008e58:	7833      	ldrb	r3, [r6, #0]
10008e5a:	06db      	lsls	r3, r3, #27
10008e5c:	d41b      	bmi.n	10008e96 <mpu_read_fifo_stream+0x9e>
10008e5e:	6860      	ldr	r0, [r4, #4]
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
10008e60:	6823      	ldr	r3, [r4, #0]
10008e62:	b2fa      	uxtb	r2, r7
10008e64:	7b59      	ldrb	r1, [r3, #13]
10008e66:	7800      	ldrb	r0, [r0, #0]
10008e68:	4653      	mov	r3, sl
10008e6a:	47c0      	blx	r8
10008e6c:	1e04      	subs	r4, r0, #0
10008e6e:	d10f      	bne.n	10008e90 <mpu_read_fifo_stream+0x98>
        return -1;
    more[0] = fifo_count / length - 1;
10008e70:	4b0d      	ldr	r3, [pc, #52]	; (10008ea8 <mpu_read_fifo_stream+0xb0>)
10008e72:	0039      	movs	r1, r7
10008e74:	0028      	movs	r0, r5
10008e76:	4798      	blx	r3
10008e78:	464b      	mov	r3, r9
10008e7a:	3801      	subs	r0, #1
10008e7c:	7018      	strb	r0, [r3, #0]
    return 0;
}
10008e7e:	0020      	movs	r0, r4
10008e80:	b002      	add	sp, #8
10008e82:	bc1c      	pop	{r2, r3, r4}
10008e84:	4690      	mov	r8, r2
10008e86:	4699      	mov	r9, r3
10008e88:	46a2      	mov	sl, r4
10008e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
10008e8c:	464b      	mov	r3, r9
10008e8e:	7018      	strb	r0, [r3, #0]
        return -1;
10008e90:	2401      	movs	r4, #1
10008e92:	4264      	negs	r4, r4
10008e94:	e7f3      	b.n	10008e7e <mpu_read_fifo_stream+0x86>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
            return -2;
10008e96:	2402      	movs	r4, #2
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
10008e98:	4b04      	ldr	r3, [pc, #16]	; (10008eac <mpu_read_fifo_stream+0xb4>)
10008e9a:	4798      	blx	r3
            return -2;
10008e9c:	4264      	negs	r4, r4
10008e9e:	e7ee      	b.n	10008e7e <mpu_read_fifo_stream+0x86>
10008ea0:	1001757c 	.word	0x1001757c
10008ea4:	100082b9 	.word	0x100082b9
10008ea8:	100118cd 	.word	0x100118cd
10008eac:	10008949 	.word	0x10008949

10008eb0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008eb2:	4c36      	ldr	r4, [pc, #216]	; (10008f8c <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008eb4:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008eb6:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008eb8:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008eba:	4283      	cmp	r3, r0
10008ebc:	d05f      	beq.n	10008f7e <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ebe:	466b      	mov	r3, sp
10008ec0:	1ddd      	adds	r5, r3, #7
10008ec2:	6823      	ldr	r3, [r4, #0]
10008ec4:	2201      	movs	r2, #1
10008ec6:	7919      	ldrb	r1, [r3, #4]
10008ec8:	6863      	ldr	r3, [r4, #4]
10008eca:	4f31      	ldr	r7, [pc, #196]	; (10008f90 <mpu_set_bypass+0xe0>)
10008ecc:	7818      	ldrb	r0, [r3, #0]
10008ece:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
10008ed0:	2e00      	cmp	r6, #0
10008ed2:	d02e      	beq.n	10008f32 <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ed4:	47b8      	blx	r7
10008ed6:	2800      	cmp	r0, #0
10008ed8:	d155      	bne.n	10008f86 <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008eda:	2220      	movs	r2, #32
10008edc:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ede:	4f2d      	ldr	r7, [pc, #180]	; (10008f94 <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008ee0:	4393      	bics	r3, r2
10008ee2:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008ee4:	6823      	ldr	r3, [r4, #0]
10008ee6:	3a1f      	subs	r2, #31
10008ee8:	7919      	ldrb	r1, [r3, #4]
10008eea:	6863      	ldr	r3, [r4, #4]
10008eec:	7818      	ldrb	r0, [r3, #0]
10008eee:	002b      	movs	r3, r5
10008ef0:	47b8      	blx	r7
10008ef2:	2800      	cmp	r0, #0
10008ef4:	d147      	bne.n	10008f86 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008ef6:	4b28      	ldr	r3, [pc, #160]	; (10008f98 <mpu_set_bypass+0xe8>)
10008ef8:	3003      	adds	r0, #3
10008efa:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008efc:	2302      	movs	r3, #2
10008efe:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008f00:	3320      	adds	r3, #32
10008f02:	5ce3      	ldrb	r3, [r4, r3]
10008f04:	2b00      	cmp	r3, #0
10008f06:	d137      	bne.n	10008f78 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008f08:	2323      	movs	r3, #35	; 0x23
10008f0a:	5ce3      	ldrb	r3, [r4, r3]
10008f0c:	2b00      	cmp	r3, #0
10008f0e:	d003      	beq.n	10008f18 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008f10:	2330      	movs	r3, #48	; 0x30
10008f12:	782a      	ldrb	r2, [r5, #0]
10008f14:	4313      	orrs	r3, r2
10008f16:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008f18:	6823      	ldr	r3, [r4, #0]
10008f1a:	2201      	movs	r2, #1
10008f1c:	7dd9      	ldrb	r1, [r3, #23]
10008f1e:	6863      	ldr	r3, [r4, #4]
10008f20:	7818      	ldrb	r0, [r3, #0]
10008f22:	002b      	movs	r3, r5
10008f24:	47b8      	blx	r7
10008f26:	2800      	cmp	r0, #0
10008f28:	d12d      	bne.n	10008f86 <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
10008f2a:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008f2c:	74a6      	strb	r6, [r4, #18]
    return 0;
}
10008f2e:	b003      	add	sp, #12
10008f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008f32:	47b8      	blx	r7
10008f34:	2800      	cmp	r0, #0
10008f36:	d126      	bne.n	10008f86 <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008f38:	7aa3      	ldrb	r3, [r4, #10]
10008f3a:	07db      	lsls	r3, r3, #31
10008f3c:	d417      	bmi.n	10008f6e <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
10008f3e:	2220      	movs	r2, #32
10008f40:	782b      	ldrb	r3, [r5, #0]
10008f42:	4393      	bics	r3, r2
10008f44:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008f46:	6823      	ldr	r3, [r4, #0]
10008f48:	2201      	movs	r2, #1
10008f4a:	7919      	ldrb	r1, [r3, #4]
10008f4c:	6863      	ldr	r3, [r4, #4]
10008f4e:	4f11      	ldr	r7, [pc, #68]	; (10008f94 <mpu_set_bypass+0xe4>)
10008f50:	7818      	ldrb	r0, [r3, #0]
10008f52:	002b      	movs	r3, r5
10008f54:	47b8      	blx	r7
10008f56:	2800      	cmp	r0, #0
10008f58:	d115      	bne.n	10008f86 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008f5a:	4b0f      	ldr	r3, [pc, #60]	; (10008f98 <mpu_set_bypass+0xe8>)
10008f5c:	3003      	adds	r0, #3
10008f5e:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008f60:	2322      	movs	r3, #34	; 0x22
10008f62:	5ce3      	ldrb	r3, [r4, r3]
10008f64:	2b00      	cmp	r3, #0
10008f66:	d00c      	beq.n	10008f82 <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
10008f68:	2380      	movs	r3, #128	; 0x80
10008f6a:	702b      	strb	r3, [r5, #0]
10008f6c:	e7cc      	b.n	10008f08 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
10008f6e:	2320      	movs	r3, #32
10008f70:	782a      	ldrb	r2, [r5, #0]
10008f72:	4313      	orrs	r3, r2
10008f74:	702b      	strb	r3, [r5, #0]
10008f76:	e7e6      	b.n	10008f46 <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008f78:	2382      	movs	r3, #130	; 0x82
10008f7a:	702b      	strb	r3, [r5, #0]
10008f7c:	e7c4      	b.n	10008f08 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008f7e:	2000      	movs	r0, #0
10008f80:	e7d5      	b.n	10008f2e <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
10008f82:	702b      	strb	r3, [r5, #0]
10008f84:	e7c0      	b.n	10008f08 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008f86:	2001      	movs	r0, #1
10008f88:	4240      	negs	r0, r0
10008f8a:	e7d0      	b.n	10008f2e <mpu_set_bypass+0x7e>
10008f8c:	1001757c 	.word	0x1001757c
10008f90:	100082b9 	.word	0x100082b9
10008f94:	10008321 	.word	0x10008321
10008f98:	1000810d 	.word	0x1000810d

10008f9c <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008f9c:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008f9e:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008fa0:	4c17      	ldr	r4, [pc, #92]	; (10009000 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008fa2:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008fa4:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008fa6:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008fa8:	4283      	cmp	r3, r0
10008faa:	d024      	beq.n	10008ff6 <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008fac:	466b      	mov	r3, sp
10008fae:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
10008fb0:	2800      	cmp	r0, #0
10008fb2:	d11d      	bne.n	10008ff0 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
10008fb4:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10008fb6:	7ca2      	ldrb	r2, [r4, #18]
10008fb8:	2a00      	cmp	r2, #0
10008fba:	d003      	beq.n	10008fc4 <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
10008fbc:	2202      	movs	r2, #2
10008fbe:	7819      	ldrb	r1, [r3, #0]
10008fc0:	430a      	orrs	r2, r1
10008fc2:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
10008fc4:	2222      	movs	r2, #34	; 0x22
10008fc6:	5ca2      	ldrb	r2, [r4, r2]
10008fc8:	2a00      	cmp	r2, #0
10008fca:	d004      	beq.n	10008fd6 <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
10008fcc:	2180      	movs	r1, #128	; 0x80
10008fce:	781a      	ldrb	r2, [r3, #0]
10008fd0:	4249      	negs	r1, r1
10008fd2:	430a      	orrs	r2, r1
10008fd4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008fd6:	6822      	ldr	r2, [r4, #0]
10008fd8:	4e0a      	ldr	r6, [pc, #40]	; (10009004 <mpu_set_int_latched+0x68>)
10008fda:	7dd1      	ldrb	r1, [r2, #23]
10008fdc:	6862      	ldr	r2, [r4, #4]
10008fde:	7810      	ldrb	r0, [r2, #0]
10008fe0:	2201      	movs	r2, #1
10008fe2:	47b0      	blx	r6
10008fe4:	2800      	cmp	r0, #0
10008fe6:	d108      	bne.n	10008ffa <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008fe8:	2323      	movs	r3, #35	; 0x23
10008fea:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008fec:	b002      	add	sp, #8
10008fee:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008ff0:	2230      	movs	r2, #48	; 0x30
10008ff2:	701a      	strb	r2, [r3, #0]
10008ff4:	e7df      	b.n	10008fb6 <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008ff6:	2000      	movs	r0, #0
10008ff8:	e7f8      	b.n	10008fec <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ffa:	2001      	movs	r0, #1
10008ffc:	4240      	negs	r0, r0
10008ffe:	e7f5      	b.n	10008fec <mpu_set_int_latched+0x50>
10009000:	1001757c 	.word	0x1001757c
10009004:	10008321 	.word	0x10008321

10009008 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10009008:	b5f0      	push	{r4, r5, r6, r7, lr}
1000900a:	0004      	movs	r4, r0
1000900c:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
1000900e:	2828      	cmp	r0, #40	; 0x28
10009010:	d85a      	bhi.n	100090c8 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10009012:	2800      	cmp	r0, #0
10009014:	d114      	bne.n	10009040 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10009016:	4b36      	ldr	r3, [pc, #216]	; (100090f0 <mpu_lp_accel_mode+0xe8>)
10009018:	2000      	movs	r0, #0
1000901a:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
1000901c:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
1000901e:	ab01      	add	r3, sp, #4
10009020:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10009022:	4c34      	ldr	r4, [pc, #208]	; (100090f4 <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10009024:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10009026:	6822      	ldr	r2, [r4, #0]
10009028:	4d33      	ldr	r5, [pc, #204]	; (100090f8 <mpu_lp_accel_mode+0xf0>)
1000902a:	7d51      	ldrb	r1, [r2, #21]
1000902c:	6862      	ldr	r2, [r4, #4]
1000902e:	7810      	ldrb	r0, [r2, #0]
10009030:	2202      	movs	r2, #2
10009032:	47a8      	blx	r5
10009034:	1e05      	subs	r5, r0, #0
10009036:	d147      	bne.n	100090c8 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10009038:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
1000903a:	0028      	movs	r0, r5
1000903c:	b003      	add	sp, #12
1000903e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10009040:	2001      	movs	r0, #1
10009042:	4b2b      	ldr	r3, [pc, #172]	; (100090f0 <mpu_lp_accel_mode+0xe8>)
10009044:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10009046:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10009048:	2c01      	cmp	r4, #1
1000904a:	d043      	beq.n	100090d4 <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
1000904c:	2c02      	cmp	r4, #2
1000904e:	d044      	beq.n	100090da <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10009050:	2c05      	cmp	r4, #5
10009052:	d93c      	bls.n	100090ce <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10009054:	2c0a      	cmp	r4, #10
10009056:	d843      	bhi.n	100090e0 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10009058:	2305      	movs	r3, #5
1000905a:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
1000905c:	4c25      	ldr	r4, [pc, #148]	; (100090f4 <mpu_lp_accel_mode+0xec>)
1000905e:	2201      	movs	r2, #1
10009060:	6823      	ldr	r3, [r4, #0]
10009062:	4e25      	ldr	r6, [pc, #148]	; (100090f8 <mpu_lp_accel_mode+0xf0>)
10009064:	7a59      	ldrb	r1, [r3, #9]
10009066:	6863      	ldr	r3, [r4, #4]
10009068:	7818      	ldrb	r0, [r3, #0]
1000906a:	002b      	movs	r3, r5
1000906c:	47b0      	blx	r6
1000906e:	2800      	cmp	r0, #0
10009070:	d12a      	bne.n	100090c8 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10009072:	6823      	ldr	r3, [r4, #0]
10009074:	2201      	movs	r2, #1
10009076:	7a19      	ldrb	r1, [r3, #8]
10009078:	6863      	ldr	r3, [r4, #4]
1000907a:	4f20      	ldr	r7, [pc, #128]	; (100090fc <mpu_lp_accel_mode+0xf4>)
1000907c:	7818      	ldrb	r0, [r3, #0]
1000907e:	002b      	movs	r3, r5
10009080:	47b8      	blx	r7
10009082:	2800      	cmp	r0, #0
10009084:	d120      	bne.n	100090c8 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10009086:	2308      	movs	r3, #8
10009088:	782a      	ldrb	r2, [r5, #0]
1000908a:	4313      	orrs	r3, r2
1000908c:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
1000908e:	6823      	ldr	r3, [r4, #0]
10009090:	2201      	movs	r2, #1
10009092:	7a19      	ldrb	r1, [r3, #8]
10009094:	6863      	ldr	r3, [r4, #4]
10009096:	7818      	ldrb	r0, [r3, #0]
10009098:	002b      	movs	r3, r5
1000909a:	47b0      	blx	r6
1000909c:	2800      	cmp	r0, #0
1000909e:	d113      	bne.n	100090c8 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
100090a0:	2320      	movs	r3, #32
100090a2:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
100090a4:	6823      	ldr	r3, [r4, #0]
100090a6:	2201      	movs	r2, #1
100090a8:	7d59      	ldrb	r1, [r3, #21]
100090aa:	6863      	ldr	r3, [r4, #4]
100090ac:	7818      	ldrb	r0, [r3, #0]
100090ae:	002b      	movs	r3, r5
100090b0:	47b0      	blx	r6
100090b2:	1e05      	subs	r5, r0, #0
100090b4:	d108      	bne.n	100090c8 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
100090b6:	2308      	movs	r3, #8
100090b8:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
100090ba:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
100090bc:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
100090be:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
100090c0:	2000      	movs	r0, #0
100090c2:	4b0f      	ldr	r3, [pc, #60]	; (10009100 <mpu_lp_accel_mode+0xf8>)
100090c4:	4798      	blx	r3
100090c6:	e7b8      	b.n	1000903a <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
100090c8:	2501      	movs	r5, #1
100090ca:	426d      	negs	r5, r5
100090cc:	e7b5      	b.n	1000903a <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
100090ce:	2304      	movs	r3, #4
100090d0:	702b      	strb	r3, [r5, #0]
100090d2:	e7c3      	b.n	1000905c <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
100090d4:	2302      	movs	r3, #2
100090d6:	702b      	strb	r3, [r5, #0]
100090d8:	e7c0      	b.n	1000905c <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
100090da:	2303      	movs	r3, #3
100090dc:	702b      	strb	r3, [r5, #0]
100090de:	e7bd      	b.n	1000905c <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
100090e0:	2c14      	cmp	r4, #20
100090e2:	d802      	bhi.n	100090ea <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
100090e4:	2306      	movs	r3, #6
100090e6:	702b      	strb	r3, [r5, #0]
100090e8:	e7b8      	b.n	1000905c <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
100090ea:	2307      	movs	r3, #7
100090ec:	702b      	strb	r3, [r5, #0]
100090ee:	e7b5      	b.n	1000905c <mpu_lp_accel_mode+0x54>
100090f0:	10008f9d 	.word	0x10008f9d
100090f4:	1001757c 	.word	0x1001757c
100090f8:	10008321 	.word	0x10008321
100090fc:	100082b9 	.word	0x100082b9
10009100:	10008d95 	.word	0x10008d95

10009104 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009104:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10009106:	4c2c      	ldr	r4, [pc, #176]	; (100091b8 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10009108:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000910a:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
1000910c:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000910e:	2b00      	cmp	r3, #0
10009110:	d04e      	beq.n	100091b0 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10009112:	2324      	movs	r3, #36	; 0x24
10009114:	5ce3      	ldrb	r3, [r4, r3]
10009116:	2b00      	cmp	r3, #0
10009118:	d14a      	bne.n	100091b0 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
1000911a:	7d23      	ldrb	r3, [r4, #20]
1000911c:	2b00      	cmp	r3, #0
1000911e:	d005      	beq.n	1000912c <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10009120:	1e43      	subs	r3, r0, #1
10009122:	2b27      	cmp	r3, #39	; 0x27
10009124:	d940      	bls.n	100091a8 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10009126:	2000      	movs	r0, #0
10009128:	4b24      	ldr	r3, [pc, #144]	; (100091bc <mpu_set_sample_rate+0xb8>)
1000912a:	4798      	blx	r3
1000912c:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
1000912e:	2d03      	cmp	r5, #3
10009130:	d822      	bhi.n	10009178 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10009132:	466b      	mov	r3, sp
10009134:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10009136:	6823      	ldr	r3, [r4, #0]
10009138:	4d21      	ldr	r5, [pc, #132]	; (100091c0 <mpu_set_sample_rate+0xbc>)
1000913a:	7859      	ldrb	r1, [r3, #1]
1000913c:	6863      	ldr	r3, [r4, #4]
1000913e:	2201      	movs	r2, #1
10009140:	7818      	ldrb	r0, [r3, #0]
10009142:	466b      	mov	r3, sp
10009144:	3307      	adds	r3, #7
10009146:	47a8      	blx	r5
10009148:	1e05      	subs	r5, r0, #0
1000914a:	d131      	bne.n	100091b0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
1000914c:	466b      	mov	r3, sp
1000914e:	20fa      	movs	r0, #250	; 0xfa
10009150:	79d9      	ldrb	r1, [r3, #7]
10009152:	0080      	lsls	r0, r0, #2
10009154:	4b1b      	ldr	r3, [pc, #108]	; (100091c4 <mpu_set_sample_rate+0xc0>)
10009156:	3101      	adds	r1, #1
10009158:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
1000915a:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
1000915c:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
1000915e:	1c18      	adds	r0, r3, #0
10009160:	2b64      	cmp	r3, #100	; 0x64
10009162:	d816      	bhi.n	10009192 <mpu_set_sample_rate+0x8e>
10009164:	4b18      	ldr	r3, [pc, #96]	; (100091c8 <mpu_set_sample_rate+0xc4>)
10009166:	b280      	uxth	r0, r0
10009168:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
1000916a:	89e0      	ldrh	r0, [r4, #14]
1000916c:	4b17      	ldr	r3, [pc, #92]	; (100091cc <mpu_set_sample_rate+0xc8>)
1000916e:	0840      	lsrs	r0, r0, #1
10009170:	4798      	blx	r3
        return 0;
    }
}
10009172:	0028      	movs	r0, r5
10009174:	b003      	add	sp, #12
10009176:	bd30      	pop	{r4, r5, pc}
10009178:	23fa      	movs	r3, #250	; 0xfa
1000917a:	1c29      	adds	r1, r5, #0
1000917c:	009b      	lsls	r3, r3, #2
1000917e:	429d      	cmp	r5, r3
10009180:	d809      	bhi.n	10009196 <mpu_set_sample_rate+0x92>
10009182:	20fa      	movs	r0, #250	; 0xfa
10009184:	b289      	uxth	r1, r1
10009186:	0080      	lsls	r0, r0, #2
10009188:	4b0e      	ldr	r3, [pc, #56]	; (100091c4 <mpu_set_sample_rate+0xc0>)
1000918a:	4798      	blx	r3
1000918c:	3801      	subs	r0, #1
1000918e:	b2c0      	uxtb	r0, r0
10009190:	e7cf      	b.n	10009132 <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10009192:	2064      	movs	r0, #100	; 0x64
10009194:	e7e6      	b.n	10009164 <mpu_set_sample_rate+0x60>
10009196:	20fa      	movs	r0, #250	; 0xfa
10009198:	1c19      	adds	r1, r3, #0
1000919a:	b289      	uxth	r1, r1
1000919c:	0080      	lsls	r0, r0, #2
1000919e:	4b09      	ldr	r3, [pc, #36]	; (100091c4 <mpu_set_sample_rate+0xc0>)
100091a0:	4798      	blx	r3
100091a2:	3801      	subs	r0, #1
100091a4:	b2c0      	uxtb	r0, r0
100091a6:	e7c4      	b.n	10009132 <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
100091a8:	4b04      	ldr	r3, [pc, #16]	; (100091bc <mpu_set_sample_rate+0xb8>)
100091aa:	4798      	blx	r3
                return 0;
100091ac:	2500      	movs	r5, #0
100091ae:	e7e0      	b.n	10009172 <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100091b0:	2501      	movs	r5, #1
100091b2:	426d      	negs	r5, r5
100091b4:	e7dd      	b.n	10009172 <mpu_set_sample_rate+0x6e>
100091b6:	46c0      	nop			; (mov r8, r8)
100091b8:	1001757c 	.word	0x1001757c
100091bc:	10009009 	.word	0x10009009
100091c0:	10008321 	.word	0x10008321
100091c4:	100119e1 	.word	0x100119e1
100091c8:	10008d31 	.word	0x10008d31
100091cc:	10008c81 	.word	0x10008c81

100091d0 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100091d2:	464e      	mov	r6, r9
100091d4:	4657      	mov	r7, sl
100091d6:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100091d8:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100091da:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100091dc:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
100091de:	b082      	sub	sp, #8
100091e0:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
100091e2:	2b00      	cmp	r3, #0
100091e4:	d100      	bne.n	100091e8 <mpu_set_sensors+0x18>
100091e6:	e095      	b.n	10009314 <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
100091e8:	466b      	mov	r3, sp
100091ea:	1d9d      	adds	r5, r3, #6
100091ec:	2301      	movs	r3, #1
100091ee:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
100091f0:	4c5f      	ldr	r4, [pc, #380]	; (10009370 <mpu_set_sensors+0x1a0>)
100091f2:	4f60      	ldr	r7, [pc, #384]	; (10009374 <mpu_set_sensors+0x1a4>)
100091f4:	6823      	ldr	r3, [r4, #0]
100091f6:	2201      	movs	r2, #1
100091f8:	7d59      	ldrb	r1, [r3, #21]
100091fa:	6863      	ldr	r3, [r4, #4]
100091fc:	46b8      	mov	r8, r7
100091fe:	7818      	ldrb	r0, [r3, #0]
10009200:	002b      	movs	r3, r5
10009202:	47b8      	blx	r7
10009204:	2800      	cmp	r0, #0
10009206:	d000      	beq.n	1000920a <mpu_set_sensors+0x3a>
10009208:	e0ad      	b.n	10009366 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000920a:	2240      	movs	r2, #64	; 0x40
1000920c:	782b      	ldrb	r3, [r5, #0]

    data = 0;
1000920e:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009210:	4393      	bics	r3, r2
10009212:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10009214:	4232      	tst	r2, r6
10009216:	d100      	bne.n	1000921a <mpu_set_sensors+0x4a>
10009218:	e093      	b.n	10009342 <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
1000921a:	06b3      	lsls	r3, r6, #26
1000921c:	d403      	bmi.n	10009226 <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
1000921e:	2302      	movs	r3, #2
10009220:	782a      	ldrb	r2, [r5, #0]
10009222:	4313      	orrs	r3, r2
10009224:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10009226:	06f3      	lsls	r3, r6, #27
10009228:	d403      	bmi.n	10009232 <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
1000922a:	2301      	movs	r3, #1
1000922c:	782a      	ldrb	r2, [r5, #0]
1000922e:	4313      	orrs	r3, r2
10009230:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10009232:	0733      	lsls	r3, r6, #28
10009234:	d400      	bmi.n	10009238 <mpu_set_sensors+0x68>
10009236:	e08a      	b.n	1000934e <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10009238:	6823      	ldr	r3, [r4, #0]
1000923a:	2201      	movs	r2, #1
1000923c:	7d99      	ldrb	r1, [r3, #22]
1000923e:	6863      	ldr	r3, [r4, #4]
10009240:	7818      	ldrb	r0, [r3, #0]
10009242:	002b      	movs	r3, r5
10009244:	47c0      	blx	r8
10009246:	2800      	cmp	r0, #0
10009248:	d000      	beq.n	1000924c <mpu_set_sensors+0x7c>
1000924a:	e08c      	b.n	10009366 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
1000924c:	2308      	movs	r3, #8
1000924e:	0032      	movs	r2, r6
10009250:	439a      	bics	r2, r3
10009252:	d041      	beq.n	100092d8 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10009254:	4b48      	ldr	r3, [pc, #288]	; (10009378 <mpu_set_sensors+0x1a8>)
10009256:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009258:	466b      	mov	r3, sp
1000925a:	3307      	adds	r3, #7
1000925c:	469a      	mov	sl, r3
1000925e:	6823      	ldr	r3, [r4, #0]
10009260:	2201      	movs	r2, #1
10009262:	7919      	ldrb	r1, [r3, #4]
10009264:	6863      	ldr	r3, [r4, #4]
10009266:	4f45      	ldr	r7, [pc, #276]	; (1000937c <mpu_set_sensors+0x1ac>)
10009268:	7818      	ldrb	r0, [r3, #0]
1000926a:	4653      	mov	r3, sl
1000926c:	47b8      	blx	r7
1000926e:	2800      	cmp	r0, #0
10009270:	d000      	beq.n	10009274 <mpu_set_sensors+0xa4>
10009272:	e075      	b.n	10009360 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10009274:	07f3      	lsls	r3, r6, #31
10009276:	d53c      	bpl.n	100092f2 <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10009278:	2311      	movs	r3, #17
1000927a:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
1000927c:	4653      	mov	r3, sl
1000927e:	781a      	ldrb	r2, [r3, #0]
10009280:	2320      	movs	r3, #32
10009282:	4313      	orrs	r3, r2
10009284:	4652      	mov	r2, sl
10009286:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10009288:	2224      	movs	r2, #36	; 0x24
1000928a:	5ca2      	ldrb	r2, [r4, r2]
1000928c:	2a00      	cmp	r2, #0
1000928e:	d03c      	beq.n	1000930a <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10009290:	2280      	movs	r2, #128	; 0x80
10009292:	4252      	negs	r2, r2
10009294:	4313      	orrs	r3, r2
10009296:	4652      	mov	r2, sl
10009298:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1000929a:	2326      	movs	r3, #38	; 0x26
1000929c:	6822      	ldr	r2, [r4, #0]
1000929e:	5cd1      	ldrb	r1, [r2, r3]
100092a0:	6863      	ldr	r3, [r4, #4]
100092a2:	2201      	movs	r2, #1
100092a4:	7818      	ldrb	r0, [r3, #0]
100092a6:	002b      	movs	r3, r5
100092a8:	47c0      	blx	r8
100092aa:	2800      	cmp	r0, #0
100092ac:	d158      	bne.n	10009360 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092ae:	6823      	ldr	r3, [r4, #0]
100092b0:	2201      	movs	r2, #1
100092b2:	7919      	ldrb	r1, [r3, #4]
100092b4:	6863      	ldr	r3, [r4, #4]
100092b6:	7818      	ldrb	r0, [r3, #0]
100092b8:	4653      	mov	r3, sl
100092ba:	47c0      	blx	r8
100092bc:	1e05      	subs	r5, r0, #0
100092be:	d14f      	bne.n	10009360 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
100092c0:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
100092c2:	4b2f      	ldr	r3, [pc, #188]	; (10009380 <mpu_set_sensors+0x1b0>)
100092c4:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
100092c6:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
100092c8:	4798      	blx	r3
    return 0;
}
100092ca:	0028      	movs	r0, r5
100092cc:	b002      	add	sp, #8
100092ce:	bc1c      	pop	{r2, r3, r4}
100092d0:	4690      	mov	r8, r2
100092d2:	4699      	mov	r9, r3
100092d4:	46a2      	mov	sl, r4
100092d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100092d8:	466b      	mov	r3, sp
100092da:	3307      	adds	r3, #7
100092dc:	469a      	mov	sl, r3
100092de:	6823      	ldr	r3, [r4, #0]
100092e0:	2201      	movs	r2, #1
100092e2:	7919      	ldrb	r1, [r3, #4]
100092e4:	6863      	ldr	r3, [r4, #4]
100092e6:	4f25      	ldr	r7, [pc, #148]	; (1000937c <mpu_set_sensors+0x1ac>)
100092e8:	7818      	ldrb	r0, [r3, #0]
100092ea:	4653      	mov	r3, sl
100092ec:	47b8      	blx	r7
100092ee:	2800      	cmp	r0, #0
100092f0:	d136      	bne.n	10009360 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
100092f2:	2310      	movs	r3, #16
100092f4:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
100092f6:	4653      	mov	r3, sl
100092f8:	2220      	movs	r2, #32
100092fa:	781b      	ldrb	r3, [r3, #0]
100092fc:	4393      	bics	r3, r2
100092fe:	4652      	mov	r2, sl
10009300:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10009302:	2224      	movs	r2, #36	; 0x24
10009304:	5ca2      	ldrb	r2, [r4, r2]
10009306:	2a00      	cmp	r2, #0
10009308:	d1c2      	bne.n	10009290 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
1000930a:	227f      	movs	r2, #127	; 0x7f
1000930c:	4013      	ands	r3, r2
1000930e:	4652      	mov	r2, sl
10009310:	7013      	strb	r3, [r2, #0]
10009312:	e7c2      	b.n	1000929a <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10009314:	2800      	cmp	r0, #0
10009316:	d11f      	bne.n	10009358 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10009318:	466b      	mov	r3, sp
1000931a:	1d9d      	adds	r5, r3, #6
1000931c:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
1000931e:	4c14      	ldr	r4, [pc, #80]	; (10009370 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10009320:	702b      	strb	r3, [r5, #0]
10009322:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009324:	6823      	ldr	r3, [r4, #0]
10009326:	4f13      	ldr	r7, [pc, #76]	; (10009374 <mpu_set_sensors+0x1a4>)
10009328:	7d59      	ldrb	r1, [r3, #21]
1000932a:	6863      	ldr	r3, [r4, #4]
1000932c:	2201      	movs	r2, #1
1000932e:	7818      	ldrb	r0, [r3, #0]
10009330:	002b      	movs	r3, r5
10009332:	46b8      	mov	r8, r7
10009334:	47b8      	blx	r7
10009336:	2800      	cmp	r0, #0
10009338:	d115      	bne.n	10009366 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
1000933a:	464a      	mov	r2, r9
1000933c:	782b      	ldrb	r3, [r5, #0]
1000933e:	4393      	bics	r3, r2
10009340:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10009342:	2304      	movs	r3, #4
10009344:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10009346:	06b3      	lsls	r3, r6, #26
10009348:	d500      	bpl.n	1000934c <mpu_set_sensors+0x17c>
1000934a:	e76c      	b.n	10009226 <mpu_set_sensors+0x56>
1000934c:	e767      	b.n	1000921e <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
1000934e:	2338      	movs	r3, #56	; 0x38
10009350:	782a      	ldrb	r2, [r5, #0]
10009352:	4313      	orrs	r3, r2
10009354:	702b      	strb	r3, [r5, #0]
10009356:	e76f      	b.n	10009238 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10009358:	466a      	mov	r2, sp
1000935a:	1d95      	adds	r5, r2, #6
1000935c:	702b      	strb	r3, [r5, #0]
1000935e:	e747      	b.n	100091f0 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009360:	2501      	movs	r5, #1
10009362:	426d      	negs	r5, r5
10009364:	e7b1      	b.n	100092ca <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10009366:	2300      	movs	r3, #0
        return -1;
10009368:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
1000936a:	72a3      	strb	r3, [r4, #10]
        return -1;
1000936c:	426d      	negs	r5, r5
1000936e:	e7ac      	b.n	100092ca <mpu_set_sensors+0xfa>
10009370:	1001757c 	.word	0x1001757c
10009374:	10008321 	.word	0x10008321
10009378:	10008f9d 	.word	0x10008f9d
1000937c:	100082b9 	.word	0x100082b9
10009380:	1000810d 	.word	0x1000810d

10009384 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009384:	b5f0      	push	{r4, r5, r6, r7, lr}
10009386:	464d      	mov	r5, r9
10009388:	465f      	mov	r7, fp
1000938a:	4656      	mov	r6, sl
1000938c:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1000938e:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009390:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009392:	4ca1      	ldr	r4, [pc, #644]	; (10009618 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009394:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009396:	ad02      	add	r5, sp, #8
10009398:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000939a:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000939c:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000939e:	7d59      	ldrb	r1, [r3, #21]
100093a0:	6863      	ldr	r3, [r4, #4]
100093a2:	2201      	movs	r2, #1
100093a4:	7818      	ldrb	r0, [r3, #0]
100093a6:	4f9d      	ldr	r7, [pc, #628]	; (1000961c <mpu_init+0x298>)
100093a8:	002b      	movs	r3, r5
100093aa:	47b8      	blx	r7
100093ac:	4681      	mov	r9, r0
100093ae:	2800      	cmp	r0, #0
100093b0:	d17c      	bne.n	100094ac <mpu_init+0x128>
        return -1;
    delay_ms(100);
100093b2:	4b9b      	ldr	r3, [pc, #620]	; (10009620 <mpu_init+0x29c>)
100093b4:	2064      	movs	r0, #100	; 0x64
100093b6:	4698      	mov	r8, r3
100093b8:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
100093ba:	464b      	mov	r3, r9
100093bc:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
100093be:	6823      	ldr	r3, [r4, #0]
100093c0:	2201      	movs	r2, #1
100093c2:	7d59      	ldrb	r1, [r3, #21]
100093c4:	6863      	ldr	r3, [r4, #4]
100093c6:	7818      	ldrb	r0, [r3, #0]
100093c8:	002b      	movs	r3, r5
100093ca:	47b8      	blx	r7
100093cc:	2800      	cmp	r0, #0
100093ce:	d16d      	bne.n	100094ac <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
100093d0:	2340      	movs	r3, #64	; 0x40
100093d2:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100093d4:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
100093d6:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
100093d8:	7a19      	ldrb	r1, [r3, #8]
100093da:	6863      	ldr	r3, [r4, #4]
100093dc:	2201      	movs	r2, #1
100093de:	7818      	ldrb	r0, [r3, #0]
100093e0:	002b      	movs	r3, r5
100093e2:	47b8      	blx	r7
100093e4:	1e05      	subs	r5, r0, #0
100093e6:	d161      	bne.n	100094ac <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
100093e8:	23ff      	movs	r3, #255	; 0xff
100093ea:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
100093ec:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
100093ee:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
100093f0:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
100093f2:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
100093f4:	3bfe      	subs	r3, #254	; 0xfe
100093f6:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100093f8:	3321      	adds	r3, #33	; 0x21
100093fa:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100093fc:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
100093fe:	3301      	adds	r3, #1
10009400:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009402:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009404:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009406:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
10009408:	4252      	negs	r2, r2
1000940a:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000940c:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1000940e:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009410:	4b84      	ldr	r3, [pc, #528]	; (10009624 <mpu_init+0x2a0>)
10009412:	3016      	adds	r0, #22
10009414:	320d      	adds	r2, #13
10009416:	2100      	movs	r1, #0
10009418:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000941a:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
1000941c:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
1000941e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009420:	3301      	adds	r3, #1
10009422:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
10009424:	00c0      	lsls	r0, r0, #3
10009426:	4b80      	ldr	r3, [pc, #512]	; (10009628 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
10009428:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1000942a:	4798      	blx	r3
1000942c:	2800      	cmp	r0, #0
1000942e:	d13d      	bne.n	100094ac <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
10009430:	3002      	adds	r0, #2
10009432:	4b7e      	ldr	r3, [pc, #504]	; (1000962c <mpu_init+0x2a8>)
10009434:	4798      	blx	r3
10009436:	2800      	cmp	r0, #0
10009438:	d138      	bne.n	100094ac <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
1000943a:	302a      	adds	r0, #42	; 0x2a
1000943c:	4b7c      	ldr	r3, [pc, #496]	; (10009630 <mpu_init+0x2ac>)
1000943e:	4798      	blx	r3
10009440:	2800      	cmp	r0, #0
10009442:	d133      	bne.n	100094ac <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
10009444:	3032      	adds	r0, #50	; 0x32
10009446:	4b7b      	ldr	r3, [pc, #492]	; (10009634 <mpu_init+0x2b0>)
10009448:	4798      	blx	r3
1000944a:	2800      	cmp	r0, #0
1000944c:	d12e      	bne.n	100094ac <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
1000944e:	4b7a      	ldr	r3, [pc, #488]	; (10009638 <mpu_init+0x2b4>)
10009450:	4798      	blx	r3
10009452:	2800      	cmp	r0, #0
10009454:	d12a      	bne.n	100094ac <mpu_init+0x128>
        return -1;

    if (int_param)
10009456:	2e00      	cmp	r6, #0
10009458:	d004      	beq.n	10009464 <mpu_init+0xe0>
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
1000945a:	6871      	ldr	r1, [r6, #4]
1000945c:	7830      	ldrb	r0, [r6, #0]
1000945e:	2202      	movs	r2, #2
10009460:	4b76      	ldr	r3, [pc, #472]	; (1000963c <mpu_init+0x2b8>)
10009462:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
10009464:	4b76      	ldr	r3, [pc, #472]	; (10009640 <mpu_init+0x2bc>)
10009466:	2001      	movs	r0, #1
10009468:	469b      	mov	fp, r3
1000946a:	4798      	blx	r3
1000946c:	4b75      	ldr	r3, [pc, #468]	; (10009644 <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
1000946e:	250c      	movs	r5, #12
10009470:	4699      	mov	r9, r3
10009472:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009474:	0033      	movs	r3, r6
10009476:	2201      	movs	r2, #1
10009478:	2100      	movs	r1, #0
1000947a:	0028      	movs	r0, r5
1000947c:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
1000947e:	2800      	cmp	r0, #0
10009480:	d102      	bne.n	10009488 <mpu_init+0x104>
10009482:	7833      	ldrb	r3, [r6, #0]
10009484:	2b48      	cmp	r3, #72	; 0x48
10009486:	d01b      	beq.n	100094c0 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009488:	3501      	adds	r5, #1
1000948a:	b2ed      	uxtb	r5, r5
1000948c:	2d10      	cmp	r5, #16
1000948e:	d1f1      	bne.n	10009474 <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009490:	486d      	ldr	r0, [pc, #436]	; (10009648 <mpu_init+0x2c4>)
10009492:	4c6e      	ldr	r4, [pc, #440]	; (1000964c <mpu_init+0x2c8>)
10009494:	47a0      	blx	r4
10009496:	486e      	ldr	r0, [pc, #440]	; (10009650 <mpu_init+0x2cc>)
10009498:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
1000949a:	200a      	movs	r0, #10
1000949c:	4b6d      	ldr	r3, [pc, #436]	; (10009654 <mpu_init+0x2d0>)
1000949e:	4798      	blx	r3
100094a0:	1e04      	subs	r4, r0, #0
100094a2:	d103      	bne.n	100094ac <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100094a4:	4b6c      	ldr	r3, [pc, #432]	; (10009658 <mpu_init+0x2d4>)
100094a6:	2000      	movs	r0, #0
100094a8:	4798      	blx	r3
    return 0;
100094aa:	e001      	b.n	100094b0 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100094ac:	2401      	movs	r4, #1
100094ae:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100094b0:	0020      	movs	r0, r4
100094b2:	b005      	add	sp, #20
100094b4:	bc3c      	pop	{r2, r3, r4, r5}
100094b6:	4690      	mov	r8, r2
100094b8:	4699      	mov	r9, r3
100094ba:	46a2      	mov	sl, r4
100094bc:	46ab      	mov	fp, r5
100094be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100094c0:	232a      	movs	r3, #42	; 0x2a
100094c2:	469a      	mov	sl, r3
100094c4:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
100094c6:	3b1a      	subs	r3, #26
100094c8:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100094ca:	2201      	movs	r2, #1
100094cc:	0033      	movs	r3, r6
100094ce:	210a      	movs	r1, #10
100094d0:	0028      	movs	r0, r5
100094d2:	47b8      	blx	r7
100094d4:	2800      	cmp	r0, #0
100094d6:	d1e0      	bne.n	1000949a <mpu_init+0x116>
        return -1;
    delay_ms(1);
100094d8:	2001      	movs	r0, #1
100094da:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
100094dc:	231f      	movs	r3, #31
100094de:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100094e0:	4653      	mov	r3, sl
100094e2:	2201      	movs	r2, #1
100094e4:	5ce0      	ldrb	r0, [r4, r3]
100094e6:	210a      	movs	r1, #10
100094e8:	0033      	movs	r3, r6
100094ea:	47b8      	blx	r7
100094ec:	2800      	cmp	r0, #0
100094ee:	d1d4      	bne.n	1000949a <mpu_init+0x116>
        return -1;
    delay_ms(1);
100094f0:	3001      	adds	r0, #1
100094f2:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
100094f4:	4653      	mov	r3, sl
100094f6:	2203      	movs	r2, #3
100094f8:	5ce0      	ldrb	r0, [r4, r3]
100094fa:	2110      	movs	r1, #16
100094fc:	0033      	movs	r3, r6
100094fe:	47c8      	blx	r9
10009500:	2800      	cmp	r0, #0
10009502:	d1ca      	bne.n	1000949a <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009504:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009506:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009508:	3380      	adds	r3, #128	; 0x80
1000950a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000950c:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000950e:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009510:	3380      	adds	r3, #128	; 0x80
10009512:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009514:	78b3      	ldrb	r3, [r6, #2]
10009516:	3380      	adds	r3, #128	; 0x80
10009518:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000951a:	2310      	movs	r3, #16
1000951c:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000951e:	4653      	mov	r3, sl
10009520:	5ce0      	ldrb	r0, [r4, r3]
10009522:	0033      	movs	r3, r6
10009524:	47b8      	blx	r7
10009526:	2800      	cmp	r0, #0
10009528:	d1b7      	bne.n	1000949a <mpu_init+0x116>
        return -1;
    delay_ms(1);
1000952a:	3001      	adds	r0, #1
1000952c:	47c0      	blx	r8

    mpu_set_bypass(0);
1000952e:	2000      	movs	r0, #0
10009530:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10009532:	2340      	movs	r3, #64	; 0x40
10009534:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10009536:	6823      	ldr	r3, [r4, #0]
10009538:	2201      	movs	r2, #1
1000953a:	7e99      	ldrb	r1, [r3, #26]
1000953c:	6863      	ldr	r3, [r4, #4]
1000953e:	7818      	ldrb	r0, [r3, #0]
10009540:	0033      	movs	r3, r6
10009542:	47b8      	blx	r7
10009544:	2800      	cmp	r0, #0
10009546:	d1a8      	bne.n	1000949a <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009548:	4653      	mov	r3, sl
1000954a:	2280      	movs	r2, #128	; 0x80
1000954c:	5ce3      	ldrb	r3, [r4, r3]
1000954e:	4252      	negs	r2, r2
10009550:	4313      	orrs	r3, r2
10009552:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009554:	6823      	ldr	r3, [r4, #0]
10009556:	3281      	adds	r2, #129	; 0x81
10009558:	7f99      	ldrb	r1, [r3, #30]
1000955a:	6863      	ldr	r3, [r4, #4]
1000955c:	7818      	ldrb	r0, [r3, #0]
1000955e:	0033      	movs	r3, r6
10009560:	47b8      	blx	r7
10009562:	2800      	cmp	r0, #0
10009564:	d199      	bne.n	1000949a <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009566:	2302      	movs	r3, #2
10009568:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
1000956a:	6823      	ldr	r3, [r4, #0]
1000956c:	2201      	movs	r2, #1
1000956e:	7fd9      	ldrb	r1, [r3, #31]
10009570:	6863      	ldr	r3, [r4, #4]
10009572:	7818      	ldrb	r0, [r3, #0]
10009574:	0033      	movs	r3, r6
10009576:	47b8      	blx	r7
10009578:	2800      	cmp	r0, #0
1000957a:	d000      	beq.n	1000957e <mpu_init+0x1fa>
1000957c:	e78d      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000957e:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009580:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009582:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009584:	3b68      	subs	r3, #104	; 0x68
10009586:	5cd1      	ldrb	r1, [r2, r3]
10009588:	6863      	ldr	r3, [r4, #4]
1000958a:	2201      	movs	r2, #1
1000958c:	7818      	ldrb	r0, [r3, #0]
1000958e:	0033      	movs	r3, r6
10009590:	47b8      	blx	r7
10009592:	2800      	cmp	r0, #0
10009594:	d000      	beq.n	10009598 <mpu_init+0x214>
10009596:	e780      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009598:	232a      	movs	r3, #42	; 0x2a
1000959a:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000959c:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000959e:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100095a0:	2321      	movs	r3, #33	; 0x21
100095a2:	5cd1      	ldrb	r1, [r2, r3]
100095a4:	6863      	ldr	r3, [r4, #4]
100095a6:	2201      	movs	r2, #1
100095a8:	7818      	ldrb	r0, [r3, #0]
100095aa:	0033      	movs	r3, r6
100095ac:	47b8      	blx	r7
100095ae:	2800      	cmp	r0, #0
100095b0:	d000      	beq.n	100095b4 <mpu_init+0x230>
100095b2:	e772      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100095b4:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100095b6:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100095b8:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
100095ba:	3318      	adds	r3, #24
100095bc:	5cd1      	ldrb	r1, [r2, r3]
100095be:	6863      	ldr	r3, [r4, #4]
100095c0:	2201      	movs	r2, #1
100095c2:	7818      	ldrb	r0, [r3, #0]
100095c4:	0033      	movs	r3, r6
100095c6:	47b8      	blx	r7
100095c8:	2800      	cmp	r0, #0
100095ca:	d000      	beq.n	100095ce <mpu_init+0x24a>
100095cc:	e765      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100095ce:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
100095d0:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100095d2:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
100095d4:	3b5e      	subs	r3, #94	; 0x5e
100095d6:	5cd1      	ldrb	r1, [r2, r3]
100095d8:	6863      	ldr	r3, [r4, #4]
100095da:	2201      	movs	r2, #1
100095dc:	7818      	ldrb	r0, [r3, #0]
100095de:	0033      	movs	r3, r6
100095e0:	47b8      	blx	r7
100095e2:	2800      	cmp	r0, #0
100095e4:	d000      	beq.n	100095e8 <mpu_init+0x264>
100095e6:	e758      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100095e8:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100095ea:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100095ec:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100095ee:	3315      	adds	r3, #21
100095f0:	5cd1      	ldrb	r1, [r2, r3]
100095f2:	6863      	ldr	r3, [r4, #4]
100095f4:	2201      	movs	r2, #1
100095f6:	7818      	ldrb	r0, [r3, #0]
100095f8:	0033      	movs	r3, r6
100095fa:	47b8      	blx	r7
100095fc:	2800      	cmp	r0, #0
100095fe:	d000      	beq.n	10009602 <mpu_init+0x27e>
10009600:	e74b      	b.n	1000949a <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009602:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009604:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009606:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009608:	3324      	adds	r3, #36	; 0x24
1000960a:	5cd1      	ldrb	r1, [r2, r3]
1000960c:	6863      	ldr	r3, [r4, #4]
1000960e:	2201      	movs	r2, #1
10009610:	7818      	ldrb	r0, [r3, #0]
10009612:	0033      	movs	r3, r6
10009614:	47b8      	blx	r7
10009616:	e740      	b.n	1000949a <mpu_init+0x116>
10009618:	1001757c 	.word	0x1001757c
1000961c:	10008321 	.word	0x10008321
10009620:	1000810d 	.word	0x1000810d
10009624:	10014477 	.word	0x10014477
10009628:	10008ae9 	.word	0x10008ae9
1000962c:	10008bbd 	.word	0x10008bbd
10009630:	10008c81 	.word	0x10008c81
10009634:	10009105 	.word	0x10009105
10009638:	10008d95 	.word	0x10008d95
1000963c:	1000d681 	.word	0x1000d681
10009640:	10008eb1 	.word	0x10008eb1
10009644:	100082b9 	.word	0x100082b9
10009648:	100158a0 	.word	0x100158a0
1000964c:	100146e1 	.word	0x100146e1
10009650:	10015710 	.word	0x10015710
10009654:	10008d31 	.word	0x10008d31
10009658:	100091d1 	.word	0x100091d1

1000965c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1000965c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000965e:	000d      	movs	r5, r1
10009660:	b083      	sub	sp, #12
10009662:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
10009664:	d021      	beq.n	100096aa <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
10009666:	4c12      	ldr	r4, [pc, #72]	; (100096b0 <mpu_write_mem+0x54>)
10009668:	7aa3      	ldrb	r3, [r4, #10]
1000966a:	2b00      	cmp	r3, #0
1000966c:	d01d      	beq.n	100096aa <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000966e:	0a02      	lsrs	r2, r0, #8
10009670:	ab01      	add	r3, sp, #4
10009672:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009674:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009676:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009678:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000967a:	1840      	adds	r0, r0, r1
1000967c:	8951      	ldrh	r1, [r2, #10]
1000967e:	4288      	cmp	r0, r1
10009680:	dc13      	bgt.n	100096aa <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009682:	6821      	ldr	r1, [r4, #0]
10009684:	7810      	ldrb	r0, [r2, #0]
10009686:	7ec9      	ldrb	r1, [r1, #27]
10009688:	2202      	movs	r2, #2
1000968a:	4f0a      	ldr	r7, [pc, #40]	; (100096b4 <mpu_write_mem+0x58>)
1000968c:	47b8      	blx	r7
1000968e:	2800      	cmp	r0, #0
10009690:	d10b      	bne.n	100096aa <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009692:	6823      	ldr	r3, [r4, #0]
10009694:	b2ea      	uxtb	r2, r5
10009696:	7e19      	ldrb	r1, [r3, #24]
10009698:	6863      	ldr	r3, [r4, #4]
1000969a:	7818      	ldrb	r0, [r3, #0]
1000969c:	0033      	movs	r3, r6
1000969e:	47b8      	blx	r7
100096a0:	1e43      	subs	r3, r0, #1
100096a2:	4198      	sbcs	r0, r3
100096a4:	4240      	negs	r0, r0
        return -1;
    return 0;
}
100096a6:	b003      	add	sp, #12
100096a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
100096aa:	2001      	movs	r0, #1
100096ac:	4240      	negs	r0, r0
100096ae:	e7fa      	b.n	100096a6 <mpu_write_mem+0x4a>
100096b0:	1001757c 	.word	0x1001757c
100096b4:	10008321 	.word	0x10008321

100096b8 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100096ba:	000d      	movs	r5, r1
100096bc:	b083      	sub	sp, #12
100096be:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
100096c0:	d022      	beq.n	10009708 <mpu_read_mem+0x50>
        return -1;
    if (!st.chip_cfg.sensors)
100096c2:	4c13      	ldr	r4, [pc, #76]	; (10009710 <mpu_read_mem+0x58>)
100096c4:	7aa3      	ldrb	r3, [r4, #10]
100096c6:	2b00      	cmp	r3, #0
100096c8:	d01e      	beq.n	10009708 <mpu_read_mem+0x50>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100096ca:	0a02      	lsrs	r2, r0, #8
100096cc:	ab01      	add	r3, sp, #4
100096ce:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100096d0:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100096d2:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100096d4:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100096d6:	1840      	adds	r0, r0, r1
100096d8:	8951      	ldrh	r1, [r2, #10]
100096da:	4288      	cmp	r0, r1
100096dc:	dc14      	bgt.n	10009708 <mpu_read_mem+0x50>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100096de:	6821      	ldr	r1, [r4, #0]
100096e0:	7810      	ldrb	r0, [r2, #0]
100096e2:	7ec9      	ldrb	r1, [r1, #27]
100096e4:	2202      	movs	r2, #2
100096e6:	4f0b      	ldr	r7, [pc, #44]	; (10009714 <mpu_read_mem+0x5c>)
100096e8:	47b8      	blx	r7
100096ea:	2800      	cmp	r0, #0
100096ec:	d10c      	bne.n	10009708 <mpu_read_mem+0x50>
        return -1;
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
100096ee:	6823      	ldr	r3, [r4, #0]
100096f0:	b2ea      	uxtb	r2, r5
100096f2:	7e19      	ldrb	r1, [r3, #24]
100096f4:	6863      	ldr	r3, [r4, #4]
100096f6:	4c08      	ldr	r4, [pc, #32]	; (10009718 <mpu_read_mem+0x60>)
100096f8:	7818      	ldrb	r0, [r3, #0]
100096fa:	0033      	movs	r3, r6
100096fc:	47a0      	blx	r4
100096fe:	1e43      	subs	r3, r0, #1
10009700:	4198      	sbcs	r0, r3
10009702:	4240      	negs	r0, r0
        return -1;
    return 0;
}
10009704:	b003      	add	sp, #12
10009706:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009708:	2001      	movs	r0, #1
1000970a:	4240      	negs	r0, r0
1000970c:	e7fa      	b.n	10009704 <mpu_read_mem+0x4c>
1000970e:	46c0      	nop			; (mov r8, r8)
10009710:	1001757c 	.word	0x1001757c
10009714:	10008321 	.word	0x10008321
10009718:	100082b9 	.word	0x100082b9

1000971c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1000971c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000971e:	464d      	mov	r5, r9
10009720:	4644      	mov	r4, r8
10009722:	465f      	mov	r7, fp
10009724:	4656      	mov	r6, sl
10009726:	b4f0      	push	{r4, r5, r6, r7}
10009728:	b089      	sub	sp, #36	; 0x24
1000972a:	9301      	str	r3, [sp, #4]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
1000972c:	2325      	movs	r3, #37	; 0x25
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1000972e:	9200      	str	r2, [sp, #0]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009730:	4a2a      	ldr	r2, [pc, #168]	; (100097dc <mpu_load_firmware+0xc0>)
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
10009732:	4680      	mov	r8, r0
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009734:	5cd3      	ldrb	r3, [r2, r3]
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
10009736:	4689      	mov	r9, r1
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009738:	2b00      	cmp	r3, #0
1000973a:	d129      	bne.n	10009790 <mpu_load_firmware+0x74>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
1000973c:	2900      	cmp	r1, #0
1000973e:	d027      	beq.n	10009790 <mpu_load_firmware+0x74>
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
10009740:	2800      	cmp	r0, #0
10009742:	d02e      	beq.n	100097a2 <mpu_load_firmware+0x86>
10009744:	4b26      	ldr	r3, [pc, #152]	; (100097e0 <mpu_load_firmware+0xc4>)
10009746:	2400      	movs	r4, #0
10009748:	469a      	mov	sl, r3
        this_write = min(LOAD_CHUNK, length - ii);
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
1000974a:	4b26      	ldr	r3, [pc, #152]	; (100097e4 <mpu_load_firmware+0xc8>)
1000974c:	469b      	mov	fp, r3
1000974e:	e011      	b.n	10009774 <mpu_load_firmware+0x58>
10009750:	aa04      	add	r2, sp, #16
10009752:	0031      	movs	r1, r6
10009754:	0020      	movs	r0, r4
10009756:	47d8      	blx	fp
10009758:	2800      	cmp	r0, #0
1000975a:	d119      	bne.n	10009790 <mpu_load_firmware+0x74>
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
1000975c:	042a      	lsls	r2, r5, #16
1000975e:	0c12      	lsrs	r2, r2, #16
10009760:	a904      	add	r1, sp, #16
10009762:	0038      	movs	r0, r7
10009764:	4b20      	ldr	r3, [pc, #128]	; (100097e8 <mpu_load_firmware+0xcc>)
10009766:	4798      	blx	r3
10009768:	2800      	cmp	r0, #0
1000976a:	d134      	bne.n	100097d6 <mpu_load_firmware+0xba>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
1000976c:	1934      	adds	r4, r6, r4
1000976e:	b2a4      	uxth	r4, r4
10009770:	45a0      	cmp	r8, r4
10009772:	d916      	bls.n	100097a2 <mpu_load_firmware+0x86>
        this_write = min(LOAD_CHUNK, length - ii);
10009774:	4643      	mov	r3, r8
10009776:	1b1d      	subs	r5, r3, r4
10009778:	2d10      	cmp	r5, #16
1000977a:	dd00      	ble.n	1000977e <mpu_load_firmware+0x62>
1000977c:	2510      	movs	r5, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1000977e:	464b      	mov	r3, r9
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
        this_write = min(LOAD_CHUNK, length - ii);
10009780:	b2ae      	uxth	r6, r5
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
10009782:	191f      	adds	r7, r3, r4
10009784:	003a      	movs	r2, r7
10009786:	0031      	movs	r1, r6
10009788:	0020      	movs	r0, r4
1000978a:	47d0      	blx	sl
1000978c:	2800      	cmp	r0, #0
1000978e:	d0df      	beq.n	10009750 <mpu_load_firmware+0x34>
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
        /* DMP should only be loaded once. */
        return -1;
10009790:	2001      	movs	r0, #1
10009792:	4240      	negs	r0, r0
        return -1;

    st.chip_cfg.dmp_loaded = 1;
    st.chip_cfg.dmp_sample_rate = sample_rate;
    return 0;
}
10009794:	b009      	add	sp, #36	; 0x24
10009796:	bc3c      	pop	{r2, r3, r4, r5}
10009798:	4690      	mov	r8, r2
1000979a:	4699      	mov	r9, r3
1000979c:	46a2      	mov	sl, r4
1000979e:	46ab      	mov	fp, r5
100097a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
100097a2:	9900      	ldr	r1, [sp, #0]
100097a4:	ab03      	add	r3, sp, #12
100097a6:	0a0a      	lsrs	r2, r1, #8
100097a8:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
100097aa:	4a0c      	ldr	r2, [pc, #48]	; (100097dc <mpu_load_firmware+0xc0>)
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
    tmp[1] = start_addr & 0xFF;
100097ac:	7059      	strb	r1, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
100097ae:	6812      	ldr	r2, [r2, #0]
100097b0:	4c0e      	ldr	r4, [pc, #56]	; (100097ec <mpu_load_firmware+0xd0>)
100097b2:	9200      	str	r2, [sp, #0]
100097b4:	7f51      	ldrb	r1, [r2, #29]
100097b6:	4a09      	ldr	r2, [pc, #36]	; (100097dc <mpu_load_firmware+0xc0>)
100097b8:	6852      	ldr	r2, [r2, #4]
100097ba:	9200      	str	r2, [sp, #0]
100097bc:	7810      	ldrb	r0, [r2, #0]
100097be:	2202      	movs	r2, #2
100097c0:	47a0      	blx	r4
100097c2:	2800      	cmp	r0, #0
100097c4:	d1e4      	bne.n	10009790 <mpu_load_firmware+0x74>
        return -1;

    st.chip_cfg.dmp_loaded = 1;
100097c6:	2201      	movs	r2, #1
100097c8:	2325      	movs	r3, #37	; 0x25
100097ca:	4904      	ldr	r1, [pc, #16]	; (100097dc <mpu_load_firmware+0xc0>)
100097cc:	54ca      	strb	r2, [r1, r3]
    st.chip_cfg.dmp_sample_rate = sample_rate;
100097ce:	466a      	mov	r2, sp
100097d0:	8892      	ldrh	r2, [r2, #4]
100097d2:	84ca      	strh	r2, [r1, #38]	; 0x26
    return 0;
100097d4:	e7de      	b.n	10009794 <mpu_load_firmware+0x78>
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
100097d6:	2002      	movs	r0, #2
100097d8:	4240      	negs	r0, r0
100097da:	e7db      	b.n	10009794 <mpu_load_firmware+0x78>
100097dc:	1001757c 	.word	0x1001757c
100097e0:	1000965d 	.word	0x1000965d
100097e4:	100096b9 	.word	0x100096b9
100097e8:	1001441d 	.word	0x1001441d
100097ec:	10008321 	.word	0x10008321

100097f0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100097f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100097f2:	2624      	movs	r6, #36	; 0x24
100097f4:	4c1f      	ldr	r4, [pc, #124]	; (10009874 <mpu_set_dmp_state+0x84>)
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100097f6:	b083      	sub	sp, #12
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100097f8:	5da3      	ldrb	r3, [r4, r6]
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100097fa:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100097fc:	4283      	cmp	r3, r0
100097fe:	d033      	beq.n	10009868 <mpu_set_dmp_state+0x78>
        return 0;

    if (enable) {
10009800:	2800      	cmp	r0, #0
10009802:	d01f      	beq.n	10009844 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
10009804:	2325      	movs	r3, #37	; 0x25
10009806:	5ce3      	ldrb	r3, [r4, r3]
10009808:	2b00      	cmp	r3, #0
1000980a:	d02f      	beq.n	1000986c <mpu_set_dmp_state+0x7c>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
1000980c:	4d1a      	ldr	r5, [pc, #104]	; (10009878 <mpu_set_dmp_state+0x88>)
1000980e:	2000      	movs	r0, #0
10009810:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009812:	4b1a      	ldr	r3, [pc, #104]	; (1000987c <mpu_set_dmp_state+0x8c>)
10009814:	2000      	movs	r0, #0
10009816:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
10009818:	4b19      	ldr	r3, [pc, #100]	; (10009880 <mpu_set_dmp_state+0x90>)
1000981a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
1000981c:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
1000981e:	466b      	mov	r3, sp
10009820:	2200      	movs	r2, #0
10009822:	3307      	adds	r3, #7
10009824:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009826:	6862      	ldr	r2, [r4, #4]
10009828:	2123      	movs	r1, #35	; 0x23
1000982a:	7810      	ldrb	r0, [r2, #0]
1000982c:	4f15      	ldr	r7, [pc, #84]	; (10009884 <mpu_set_dmp_state+0x94>)
1000982e:	2201      	movs	r2, #1
10009830:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 1;
10009832:	2301      	movs	r3, #1
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009834:	2001      	movs	r0, #1
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
        /* Remove FIFO elements. */
        tmp = 0;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 1;
10009836:	55a3      	strb	r3, [r4, r6]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009838:	47a8      	blx	r5
        mpu_reset_fifo();
1000983a:	4b13      	ldr	r3, [pc, #76]	; (10009888 <mpu_set_dmp_state+0x98>)
1000983c:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
1000983e:	2000      	movs	r0, #0
}
10009840:	b003      	add	sp, #12
10009842:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009844:	4b0c      	ldr	r3, [pc, #48]	; (10009878 <mpu_set_dmp_state+0x88>)
10009846:	2000      	movs	r0, #0
10009848:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1000984a:	466b      	mov	r3, sp
1000984c:	7c22      	ldrb	r2, [r4, #16]
1000984e:	3307      	adds	r3, #7
10009850:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009852:	6862      	ldr	r2, [r4, #4]
10009854:	2123      	movs	r1, #35	; 0x23
10009856:	7810      	ldrb	r0, [r2, #0]
10009858:	4f0a      	ldr	r7, [pc, #40]	; (10009884 <mpu_set_dmp_state+0x94>)
1000985a:	2201      	movs	r2, #1
1000985c:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
1000985e:	4b0a      	ldr	r3, [pc, #40]	; (10009888 <mpu_set_dmp_state+0x98>)
        /* Disable DMP interrupt. */
        set_int_enable(0);
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
10009860:	55a5      	strb	r5, [r4, r6]
        mpu_reset_fifo();
10009862:	4798      	blx	r3
10009864:	2000      	movs	r0, #0
10009866:	e7eb      	b.n	10009840 <mpu_set_dmp_state+0x50>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009868:	2000      	movs	r0, #0
1000986a:	e7e9      	b.n	10009840 <mpu_set_dmp_state+0x50>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000986c:	2001      	movs	r0, #1
1000986e:	4240      	negs	r0, r0
10009870:	e7e6      	b.n	10009840 <mpu_set_dmp_state+0x50>
10009872:	46c0      	nop			; (mov r8, r8)
10009874:	1001757c 	.word	0x1001757c
10009878:	100088dd 	.word	0x100088dd
1000987c:	10008eb1 	.word	0x10008eb1
10009880:	10009105 	.word	0x10009105
10009884:	10008321 	.word	0x10008321
10009888:	10008949 	.word	0x10008949

1000988c <mpu_run_6500_self_test>:
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @param[in]  debug       Debug flag used to print out more detailed logs. Must first set up logging in Motion Driver.
 *  @return     Result mask (see above).
 */
int mpu_run_6500_self_test(long *gyro, long *accel, unsigned char debug)
{
1000988c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000988e:	4656      	mov	r6, sl
10009890:	464d      	mov	r5, r9
10009892:	465f      	mov	r7, fp
10009894:	4644      	mov	r4, r8
10009896:	b4f0      	push	{r4, r5, r6, r7}
10009898:	b0a5      	sub	sp, #148	; 0x94
1000989a:	9004      	str	r0, [sp, #16]
1000989c:	000d      	movs	r5, r1
1000989e:	4692      	mov	sl, r2
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;



    if(debug)
100098a0:	2a00      	cmp	r2, #0
100098a2:	d000      	beq.n	100098a6 <mpu_run_6500_self_test+0x1a>
100098a4:	e10d      	b.n	10009ac2 <mpu_run_6500_self_test+0x236>
100098a6:	4b94      	ldr	r3, [pc, #592]	; (10009af8 <mpu_run_6500_self_test+0x26c>)
100098a8:	469b      	mov	fp, r3
    	log_i("Starting MPU6500 HWST!\r\n");
100098aa:	4894      	ldr	r0, [pc, #592]	; (10009afc <mpu_run_6500_self_test+0x270>)
100098ac:	47d8      	blx	fp

    if (st.chip_cfg.dmp_on) {
100098ae:	2324      	movs	r3, #36	; 0x24
        mpu_set_dmp_state(0);
        dmp_was_on = 1;
    } else
        dmp_was_on = 0;
100098b0:	2200      	movs	r2, #0


    if(debug)
    	log_i("Starting MPU6500 HWST!\r\n");

    if (st.chip_cfg.dmp_on) {
100098b2:	4c93      	ldr	r4, [pc, #588]	; (10009b00 <mpu_run_6500_self_test+0x274>)
100098b4:	5ce3      	ldrb	r3, [r4, r3]
        mpu_set_dmp_state(0);
        dmp_was_on = 1;
    } else
        dmp_was_on = 0;
100098b6:	9208      	str	r2, [sp, #32]


    if(debug)
    	log_i("Starting MPU6500 HWST!\r\n");

    if (st.chip_cfg.dmp_on) {
100098b8:	2b00      	cmp	r3, #0
100098ba:	d000      	beq.n	100098be <mpu_run_6500_self_test+0x32>
100098bc:	e0fb      	b.n	10009ab6 <mpu_run_6500_self_test+0x22a>
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
100098be:	2200      	movs	r2, #0
100098c0:	7a23      	ldrb	r3, [r4, #8]
100098c2:	9206      	str	r2, [sp, #24]
100098c4:	2b03      	cmp	r3, #3
100098c6:	d803      	bhi.n	100098d0 <mpu_run_6500_self_test+0x44>
100098c8:	4a8e      	ldr	r2, [pc, #568]	; (10009b04 <mpu_run_6500_self_test+0x278>)
100098ca:	005b      	lsls	r3, r3, #1
100098cc:	5a9b      	ldrh	r3, [r3, r2]
100098ce:	9306      	str	r3, [sp, #24]
    } else
        dmp_was_on = 0;

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
    mpu_get_accel_fsr(&accel_fsr);
100098d0:	aa14      	add	r2, sp, #80	; 0x50
100098d2:	4694      	mov	ip, r2
100098d4:	2315      	movs	r3, #21
100098d6:	4463      	add	r3, ip
100098d8:	0018      	movs	r0, r3
100098da:	4b8b      	ldr	r3, [pc, #556]	; (10009b08 <mpu_run_6500_self_test+0x27c>)
100098dc:	4798      	blx	r3
    mpu_get_lpf(&lpf);
100098de:	aa14      	add	r2, sp, #80	; 0x50
100098e0:	4694      	mov	ip, r2
100098e2:	2316      	movs	r3, #22
100098e4:	4463      	add	r3, ip
100098e6:	0018      	movs	r0, r3
100098e8:	4b88      	ldr	r3, [pc, #544]	; (10009b0c <mpu_run_6500_self_test+0x280>)
100098ea:	4798      	blx	r3
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100098ec:	2324      	movs	r3, #36	; 0x24
100098ee:	5ce3      	ldrb	r3, [r4, r3]
100098f0:	2b00      	cmp	r3, #0
100098f2:	d101      	bne.n	100098f8 <mpu_run_6500_self_test+0x6c>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100098f4:	89e3      	ldrh	r3, [r4, #14]
100098f6:	930b      	str	r3, [sp, #44]	; 0x2c
    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
    mpu_get_accel_fsr(&accel_fsr);
    mpu_get_lpf(&lpf);
    mpu_get_sample_rate(&sample_rate);
    sensors_on = st.chip_cfg.sensors;
100098f8:	7aa3      	ldrb	r3, [r4, #10]
100098fa:	9309      	str	r3, [sp, #36]	; 0x24
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
    sensors[0] = st.chip_cfg.fifo_enable;
100098fc:	7c23      	ldrb	r3, [r4, #16]
100098fe:	930a      	str	r3, [sp, #40]	; 0x28
    mpu_get_lpf(&lpf);
    mpu_get_sample_rate(&sample_rate);
    sensors_on = st.chip_cfg.sensors;
    mpu_get_fifo_config(&fifo_sensors);

    if(debug)
10009900:	4653      	mov	r3, sl
10009902:	2b00      	cmp	r3, #0
10009904:	d000      	beq.n	10009908 <mpu_run_6500_self_test+0x7c>
10009906:	e0c6      	b.n	10009a96 <mpu_run_6500_self_test+0x20a>
    	log_i("Retrieving Biases\r\n");
10009908:	4881      	ldr	r0, [pc, #516]	; (10009b10 <mpu_run_6500_self_test+0x284>)
1000990a:	47d8      	blx	fp

    for (ii = 0; ii < tries; ii++)
        if (!get_st_6500_biases(gyro, accel, 0, debug))
1000990c:	2300      	movs	r3, #0
1000990e:	2200      	movs	r2, #0
10009910:	0029      	movs	r1, r5
10009912:	9804      	ldr	r0, [sp, #16]
10009914:	4f7f      	ldr	r7, [pc, #508]	; (10009b14 <mpu_run_6500_self_test+0x288>)
10009916:	47b8      	blx	r7
10009918:	4681      	mov	r9, r0
1000991a:	2800      	cmp	r0, #0
1000991c:	d047      	beq.n	100099ae <mpu_run_6500_self_test+0x122>
1000991e:	2300      	movs	r3, #0
10009920:	4699      	mov	r9, r3
10009922:	464b      	mov	r3, r9
10009924:	2200      	movs	r2, #0
10009926:	0029      	movs	r1, r5
10009928:	9804      	ldr	r0, [sp, #16]
1000992a:	47b8      	blx	r7

        result = 0;
        goto restore;
    }

    if(debug)
1000992c:	4653      	mov	r3, sl

    if(debug)
    	log_i("Retrieving Biases\r\n");

    for (ii = 0; ii < tries; ii++)
        if (!get_st_6500_biases(gyro, accel, 0, debug))
1000992e:	2800      	cmp	r0, #0
10009930:	d038      	beq.n	100099a4 <mpu_run_6500_self_test+0x118>
            break;
    if (ii == tries) {
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        if(debug)
10009932:	2b00      	cmp	r3, #0
10009934:	d000      	beq.n	10009938 <mpu_run_6500_self_test+0xac>
10009936:	e2a7      	b.n	10009e88 <mpu_run_6500_self_test+0x5fc>
        	log_i("Retrieving Biases Error - possible I2C error\n");
10009938:	4877      	ldr	r0, [pc, #476]	; (10009b18 <mpu_run_6500_self_test+0x28c>)
1000993a:	47d8      	blx	fp

        result = 0;
1000993c:	2300      	movs	r3, #0
1000993e:	9304      	str	r3, [sp, #16]
        result |= 0x04;
#else
    result |= 0x04;
#endif
restore:
	if(debug)
10009940:	4653      	mov	r3, sl
10009942:	2b00      	cmp	r3, #0
10009944:	d14d      	bne.n	100099e2 <mpu_run_6500_self_test+0x156>
		log_i("Exiting HWST\n");
10009946:	4875      	ldr	r0, [pc, #468]	; (10009b1c <mpu_run_6500_self_test+0x290>)
10009948:	47d8      	blx	fp
	/* Set to invalid values to ensure no I2C writes are skipped. */
	st.chip_cfg.gyro_fsr = 0xFF;
1000994a:	23ff      	movs	r3, #255	; 0xff
	st.chip_cfg.accel_fsr = 0xFF;
	st.chip_cfg.lpf = 0xFF;
	st.chip_cfg.sample_rate = 0xFFFF;
1000994c:	2201      	movs	r2, #1
#endif
restore:
	if(debug)
		log_i("Exiting HWST\n");
	/* Set to invalid values to ensure no I2C writes are skipped. */
	st.chip_cfg.gyro_fsr = 0xFF;
1000994e:	7223      	strb	r3, [r4, #8]
	st.chip_cfg.accel_fsr = 0xFF;
10009950:	7263      	strb	r3, [r4, #9]
	st.chip_cfg.lpf = 0xFF;
10009952:	72e3      	strb	r3, [r4, #11]
	st.chip_cfg.sample_rate = 0xFFFF;
	st.chip_cfg.sensors = 0xFF;
	st.chip_cfg.fifo_enable = 0xFF;
10009954:	7423      	strb	r3, [r4, #16]
	st.chip_cfg.clk_src = INV_CLK_PLL;
10009956:	3bfe      	subs	r3, #254	; 0xfe
		log_i("Exiting HWST\n");
	/* Set to invalid values to ensure no I2C writes are skipped. */
	st.chip_cfg.gyro_fsr = 0xFF;
	st.chip_cfg.accel_fsr = 0xFF;
	st.chip_cfg.lpf = 0xFF;
	st.chip_cfg.sample_rate = 0xFFFF;
10009958:	4252      	negs	r2, r2
	st.chip_cfg.sensors = 0xFF;
	st.chip_cfg.fifo_enable = 0xFF;
	st.chip_cfg.clk_src = INV_CLK_PLL;
1000995a:	7323      	strb	r3, [r4, #12]
	mpu_set_gyro_fsr(gyro_fsr);
1000995c:	9806      	ldr	r0, [sp, #24]
1000995e:	4b70      	ldr	r3, [pc, #448]	; (10009b20 <mpu_run_6500_self_test+0x294>)
		log_i("Exiting HWST\n");
	/* Set to invalid values to ensure no I2C writes are skipped. */
	st.chip_cfg.gyro_fsr = 0xFF;
	st.chip_cfg.accel_fsr = 0xFF;
	st.chip_cfg.lpf = 0xFF;
	st.chip_cfg.sample_rate = 0xFFFF;
10009960:	81e2      	strh	r2, [r4, #14]
	st.chip_cfg.sensors = 0xFF;
10009962:	72a2      	strb	r2, [r4, #10]
	st.chip_cfg.fifo_enable = 0xFF;
	st.chip_cfg.clk_src = INV_CLK_PLL;
	mpu_set_gyro_fsr(gyro_fsr);
10009964:	4798      	blx	r3
	mpu_set_accel_fsr(accel_fsr);
10009966:	ab14      	add	r3, sp, #80	; 0x50
10009968:	7d58      	ldrb	r0, [r3, #21]
1000996a:	4b6e      	ldr	r3, [pc, #440]	; (10009b24 <mpu_run_6500_self_test+0x298>)
1000996c:	4798      	blx	r3
	mpu_set_lpf(lpf);
1000996e:	ab14      	add	r3, sp, #80	; 0x50
10009970:	8ad8      	ldrh	r0, [r3, #22]
10009972:	4b6d      	ldr	r3, [pc, #436]	; (10009b28 <mpu_run_6500_self_test+0x29c>)
10009974:	4798      	blx	r3
	mpu_set_sample_rate(sample_rate);
10009976:	4b6d      	ldr	r3, [pc, #436]	; (10009b2c <mpu_run_6500_self_test+0x2a0>)
10009978:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000997a:	4798      	blx	r3
	mpu_set_sensors(sensors_on);
1000997c:	4b6c      	ldr	r3, [pc, #432]	; (10009b30 <mpu_run_6500_self_test+0x2a4>)
1000997e:	9809      	ldr	r0, [sp, #36]	; 0x24
10009980:	4798      	blx	r3
	mpu_configure_fifo(fifo_sensors);
10009982:	4b6c      	ldr	r3, [pc, #432]	; (10009b34 <mpu_run_6500_self_test+0x2a8>)
10009984:	980a      	ldr	r0, [sp, #40]	; 0x28
10009986:	4798      	blx	r3

	if (dmp_was_on)
10009988:	9b08      	ldr	r3, [sp, #32]
1000998a:	2b00      	cmp	r3, #0
1000998c:	d002      	beq.n	10009994 <mpu_run_6500_self_test+0x108>
		mpu_set_dmp_state(1);
1000998e:	2001      	movs	r0, #1
10009990:	4b69      	ldr	r3, [pc, #420]	; (10009b38 <mpu_run_6500_self_test+0x2ac>)
10009992:	4798      	blx	r3

	return result;
}
10009994:	9804      	ldr	r0, [sp, #16]
10009996:	b025      	add	sp, #148	; 0x94
10009998:	bc3c      	pop	{r2, r3, r4, r5}
1000999a:	4690      	mov	r8, r2
1000999c:	4699      	mov	r9, r3
1000999e:	46a2      	mov	sl, r4
100099a0:	46ab      	mov	fp, r5
100099a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

        result = 0;
        goto restore;
    }

    if(debug)
100099a4:	2b00      	cmp	r3, #0
100099a6:	d002      	beq.n	100099ae <mpu_run_6500_self_test+0x122>
100099a8:	4e64      	ldr	r6, [pc, #400]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
    	log_i("Retrieving ST Biases\n");
100099aa:	0030      	movs	r0, r6
100099ac:	47d8      	blx	fp
100099ae:	4864      	ldr	r0, [pc, #400]	; (10009b40 <mpu_run_6500_self_test+0x2b4>)
100099b0:	47d8      	blx	fp

    for (ii = 0; ii < tries; ii++)
        if (!get_st_6500_biases(gyro_st, accel_st, 1, debug))
100099b2:	464b      	mov	r3, r9
100099b4:	2201      	movs	r2, #1
100099b6:	a91e      	add	r1, sp, #120	; 0x78
100099b8:	a81b      	add	r0, sp, #108	; 0x6c
100099ba:	47b8      	blx	r7
100099bc:	2800      	cmp	r0, #0
100099be:	d014      	beq.n	100099ea <mpu_run_6500_self_test+0x15e>
100099c0:	464b      	mov	r3, r9
100099c2:	2201      	movs	r2, #1
100099c4:	a91e      	add	r1, sp, #120	; 0x78
100099c6:	a81b      	add	r0, sp, #108	; 0x6c
100099c8:	47b8      	blx	r7
100099ca:	2800      	cmp	r0, #0
100099cc:	d00d      	beq.n	100099ea <mpu_run_6500_self_test+0x15e>
            break;
    if (ii == tries) {

        if(debug)
100099ce:	4653      	mov	r3, sl
100099d0:	2b00      	cmp	r3, #0
100099d2:	d17c      	bne.n	10009ace <mpu_run_6500_self_test+0x242>
        	log_i("Retrieving ST Biases Error - possible I2C error\n");
100099d4:	485b      	ldr	r0, [pc, #364]	; (10009b44 <mpu_run_6500_self_test+0x2b8>)
100099d6:	47d8      	blx	fp

        /* Again, probably an I2C error. */
        result = 0;
100099d8:	2300      	movs	r3, #0
100099da:	9304      	str	r3, [sp, #16]
        result |= 0x04;
#else
    result |= 0x04;
#endif
restore:
	if(debug)
100099dc:	4653      	mov	r3, sl
100099de:	2b00      	cmp	r3, #0
100099e0:	d0b1      	beq.n	10009946 <mpu_run_6500_self_test+0xba>
100099e2:	4e56      	ldr	r6, [pc, #344]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
		log_i("Exiting HWST\n");
100099e4:	0030      	movs	r0, r6
100099e6:	47d8      	blx	fp
100099e8:	e7ad      	b.n	10009946 <mpu_run_6500_self_test+0xba>
{
    int i, result = 0, otp_value_zero = 0;
    float accel_st_al_min, accel_st_al_max;
    float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], accel_offset_max;
    unsigned char regs[3];
    if (i2c_read(st.hw->addr, REG_6500_XA_ST_DATA, 3, regs)) {
100099ea:	6863      	ldr	r3, [r4, #4]
100099ec:	2203      	movs	r2, #3
100099ee:	7818      	ldrb	r0, [r3, #0]
100099f0:	210d      	movs	r1, #13
100099f2:	ab1a      	add	r3, sp, #104	; 0x68
100099f4:	4e54      	ldr	r6, [pc, #336]	; (10009b48 <mpu_run_6500_self_test+0x2bc>)
100099f6:	47b0      	blx	r6
100099f8:	2800      	cmp	r0, #0
100099fa:	d100      	bne.n	100099fe <mpu_run_6500_self_test+0x172>
100099fc:	e0b4      	b.n	10009b68 <mpu_run_6500_self_test+0x2dc>
    	if(debug)
100099fe:	464b      	mov	r3, r9
10009a00:	2b00      	cmp	r3, #0
10009a02:	d175      	bne.n	10009af0 <mpu_run_6500_self_test+0x264>
    		log_i("Reading OTP Register Error.\n");
10009a04:	4851      	ldr	r0, [pc, #324]	; (10009b4c <mpu_run_6500_self_test+0x2c0>)
10009a06:	47d8      	blx	fp
10009a08:	2307      	movs	r3, #7
10009a0a:	2507      	movs	r5, #7
10009a0c:	9310      	str	r3, [sp, #64]	; 0x40
10009a0e:	4b50      	ldr	r3, [pc, #320]	; (10009b50 <mpu_run_6500_self_test+0x2c4>)
10009a10:	9305      	str	r3, [sp, #20]
10009a12:	ab21      	add	r3, sp, #132	; 0x84
10009a14:	930e      	str	r3, [sp, #56]	; 0x38
        result = 0;
        goto restore;
    }

    accel_result = accel_6500_self_test(accel, accel_st, debug);
    if(debug)
10009a16:	4653      	mov	r3, sl
10009a18:	2b00      	cmp	r3, #0
10009a1a:	d000      	beq.n	10009a1e <mpu_run_6500_self_test+0x192>
10009a1c:	e22c      	b.n	10009e78 <mpu_run_6500_self_test+0x5ec>
    	log_i("Accel Self Test Results: %d\n", accel_result);
10009a1e:	0029      	movs	r1, r5
10009a20:	9b05      	ldr	r3, [sp, #20]
10009a22:	484c      	ldr	r0, [pc, #304]	; (10009b54 <mpu_run_6500_self_test+0x2c8>)
10009a24:	4798      	blx	r3
    int i, result = 0, otp_value_zero = 0;
    float gyro_st_al_max;
    float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], gyro_offset_max;
    unsigned char regs[3];

    if (i2c_read(st.hw->addr, REG_6500_XG_ST_DATA, 3, regs)) {
10009a26:	6863      	ldr	r3, [r4, #4]
10009a28:	2203      	movs	r2, #3
10009a2a:	7818      	ldrb	r0, [r3, #0]
10009a2c:	2100      	movs	r1, #0
10009a2e:	ab1a      	add	r3, sp, #104	; 0x68
10009a30:	4d45      	ldr	r5, [pc, #276]	; (10009b48 <mpu_run_6500_self_test+0x2bc>)
10009a32:	47a8      	blx	r5
    	if(debug)
10009a34:	464b      	mov	r3, r9
    int i, result = 0, otp_value_zero = 0;
    float gyro_st_al_max;
    float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], gyro_offset_max;
    unsigned char regs[3];

    if (i2c_read(st.hw->addr, REG_6500_XG_ST_DATA, 3, regs)) {
10009a36:	2800      	cmp	r0, #0
10009a38:	d100      	bne.n	10009a3c <mpu_run_6500_self_test+0x1b0>
10009a3a:	e15d      	b.n	10009cf8 <mpu_run_6500_self_test+0x46c>
    	if(debug)
10009a3c:	2b00      	cmp	r3, #0
10009a3e:	d153      	bne.n	10009ae8 <mpu_run_6500_self_test+0x25c>
    		log_i("Reading OTP Register Error.\n");
10009a40:	4842      	ldr	r0, [pc, #264]	; (10009b4c <mpu_run_6500_self_test+0x2c0>)
10009a42:	47d8      	blx	fp
10009a44:	2300      	movs	r3, #0
10009a46:	2707      	movs	r7, #7
10009a48:	9304      	str	r3, [sp, #16]
    accel_result = accel_6500_self_test(accel, accel_st, debug);
    if(debug)
    	log_i("Accel Self Test Results: %d\n", accel_result);

    gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
    if(debug)
10009a4a:	4653      	mov	r3, sl
10009a4c:	2b00      	cmp	r3, #0
10009a4e:	d000      	beq.n	10009a52 <mpu_run_6500_self_test+0x1c6>
10009a50:	e216      	b.n	10009e80 <mpu_run_6500_self_test+0x5f4>
    	log_i("Gyro Self Test Results: %d\n", gyro_result);
10009a52:	9b05      	ldr	r3, [sp, #20]
10009a54:	0039      	movs	r1, r7
10009a56:	4840      	ldr	r0, [pc, #256]	; (10009b58 <mpu_run_6500_self_test+0x2cc>)
10009a58:	4798      	blx	r3

    result = 0;
    if (!gyro_result)
        result |= 0x01;
    if (!accel_result)
10009a5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009a5c:	2b00      	cmp	r3, #0
10009a5e:	d03e      	beq.n	10009ade <mpu_run_6500_self_test+0x252>
    unsigned char tmp[6];
    unsigned char tries = 10;
    int result = 0x07;
    short data;

    mpu_set_bypass(1);
10009a60:	4b3e      	ldr	r3, [pc, #248]	; (10009b5c <mpu_run_6500_self_test+0x2d0>)
10009a62:	2001      	movs	r0, #1
10009a64:	4698      	mov	r8, r3
10009a66:	4798      	blx	r3

    tmp[0] = AKM_POWER_DOWN;
10009a68:	2310      	movs	r3, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
10009a6a:	272a      	movs	r7, #42	; 0x2a
    int result = 0x07;
    short data;

    mpu_set_bypass(1);

    tmp[0] = AKM_POWER_DOWN;
10009a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
10009a6e:	210a      	movs	r1, #10
    int result = 0x07;
    short data;

    mpu_set_bypass(1);

    tmp[0] = AKM_POWER_DOWN;
10009a70:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
10009a72:	5de0      	ldrb	r0, [r4, r7]
10009a74:	0013      	movs	r3, r2
10009a76:	4e3a      	ldr	r6, [pc, #232]	; (10009b60 <mpu_run_6500_self_test+0x2d4>)
10009a78:	2201      	movs	r2, #1
10009a7a:	47b0      	blx	r6
10009a7c:	2800      	cmp	r0, #0
10009a7e:	d100      	bne.n	10009a82 <mpu_run_6500_self_test+0x1f6>
10009a80:	e206      	b.n	10009e90 <mpu_run_6500_self_test+0x604>
    if (!accel_result)
        result |= 0x02;

#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if(debug)
10009a82:	4653      	mov	r3, sl
10009a84:	2b00      	cmp	r3, #0
10009a86:	d001      	beq.n	10009a8c <mpu_run_6500_self_test+0x200>
10009a88:	f000 fcca 	bl	1000a420 <mpu_run_6500_self_test+0xb94>
    	log_i("Compass Self Test Results: %d\n", compass_result);
10009a8c:	2107      	movs	r1, #7
10009a8e:	9b05      	ldr	r3, [sp, #20]
10009a90:	4834      	ldr	r0, [pc, #208]	; (10009b64 <mpu_run_6500_self_test+0x2d8>)
10009a92:	4798      	blx	r3
10009a94:	e757      	b.n	10009946 <mpu_run_6500_self_test+0xba>
    mpu_get_sample_rate(&sample_rate);
    sensors_on = st.chip_cfg.sensors;
    mpu_get_fifo_config(&fifo_sensors);

    if(debug)
    	log_i("Retrieving Biases\r\n");
10009a96:	4e29      	ldr	r6, [pc, #164]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
10009a98:	46d1      	mov	r9, sl
10009a9a:	0030      	movs	r0, r6
10009a9c:	47d8      	blx	fp
10009a9e:	481c      	ldr	r0, [pc, #112]	; (10009b10 <mpu_run_6500_self_test+0x284>)
10009aa0:	47d8      	blx	fp

    for (ii = 0; ii < tries; ii++)
        if (!get_st_6500_biases(gyro, accel, 0, debug))
10009aa2:	4653      	mov	r3, sl
10009aa4:	2200      	movs	r2, #0
10009aa6:	0029      	movs	r1, r5
10009aa8:	9804      	ldr	r0, [sp, #16]
10009aaa:	4f1a      	ldr	r7, [pc, #104]	; (10009b14 <mpu_run_6500_self_test+0x288>)
10009aac:	47b8      	blx	r7
10009aae:	2800      	cmp	r0, #0
10009ab0:	d000      	beq.n	10009ab4 <mpu_run_6500_self_test+0x228>
10009ab2:	e736      	b.n	10009922 <mpu_run_6500_self_test+0x96>
10009ab4:	e779      	b.n	100099aa <mpu_run_6500_self_test+0x11e>

    if(debug)
    	log_i("Starting MPU6500 HWST!\r\n");

    if (st.chip_cfg.dmp_on) {
        mpu_set_dmp_state(0);
10009ab6:	4b20      	ldr	r3, [pc, #128]	; (10009b38 <mpu_run_6500_self_test+0x2ac>)
10009ab8:	2000      	movs	r0, #0
10009aba:	4798      	blx	r3
        dmp_was_on = 1;
10009abc:	2301      	movs	r3, #1
10009abe:	9308      	str	r3, [sp, #32]
10009ac0:	e6fd      	b.n	100098be <mpu_run_6500_self_test+0x32>
    unsigned char dmp_was_on;



    if(debug)
    	log_i("Starting MPU6500 HWST!\r\n");
10009ac2:	4e1e      	ldr	r6, [pc, #120]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
10009ac4:	4b0c      	ldr	r3, [pc, #48]	; (10009af8 <mpu_run_6500_self_test+0x26c>)
10009ac6:	0030      	movs	r0, r6
10009ac8:	469b      	mov	fp, r3
10009aca:	4798      	blx	r3
10009acc:	e6ed      	b.n	100098aa <mpu_run_6500_self_test+0x1e>
        if (!get_st_6500_biases(gyro_st, accel_st, 1, debug))
            break;
    if (ii == tries) {

        if(debug)
        	log_i("Retrieving ST Biases Error - possible I2C error\n");
10009ace:	4e1b      	ldr	r6, [pc, #108]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
10009ad0:	0030      	movs	r0, r6
10009ad2:	47d8      	blx	fp
10009ad4:	481b      	ldr	r0, [pc, #108]	; (10009b44 <mpu_run_6500_self_test+0x2b8>)
10009ad6:	47d8      	blx	fp

        /* Again, probably an I2C error. */
        result = 0;
10009ad8:	2300      	movs	r3, #0
10009ada:	9304      	str	r3, [sp, #16]
10009adc:	e77e      	b.n	100099dc <mpu_run_6500_self_test+0x150>

    result = 0;
    if (!gyro_result)
        result |= 0x01;
    if (!accel_result)
        result |= 0x02;
10009ade:	9a04      	ldr	r2, [sp, #16]
10009ae0:	3302      	adds	r3, #2
10009ae2:	431a      	orrs	r2, r3
10009ae4:	9204      	str	r2, [sp, #16]
10009ae6:	e7bb      	b.n	10009a60 <mpu_run_6500_self_test+0x1d4>
    float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], gyro_offset_max;
    unsigned char regs[3];

    if (i2c_read(st.hw->addr, REG_6500_XG_ST_DATA, 3, regs)) {
    	if(debug)
    		log_i("Reading OTP Register Error.\n");
10009ae8:	4e14      	ldr	r6, [pc, #80]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
10009aea:	0030      	movs	r0, r6
10009aec:	47d8      	blx	fp
10009aee:	e7a7      	b.n	10009a40 <mpu_run_6500_self_test+0x1b4>
    float accel_st_al_min, accel_st_al_max;
    float st_shift_cust[3], st_shift_ratio[3], ct_shift_prod[3], accel_offset_max;
    unsigned char regs[3];
    if (i2c_read(st.hw->addr, REG_6500_XA_ST_DATA, 3, regs)) {
    	if(debug)
    		log_i("Reading OTP Register Error.\n");
10009af0:	4e12      	ldr	r6, [pc, #72]	; (10009b3c <mpu_run_6500_self_test+0x2b0>)
10009af2:	0030      	movs	r0, r6
10009af4:	47d8      	blx	fp
10009af6:	e785      	b.n	10009a04 <mpu_run_6500_self_test+0x178>
10009af8:	100146e1 	.word	0x100146e1
10009afc:	10015724 	.word	0x10015724
10009b00:	1001757c 	.word	0x1001757c
10009b04:	10015cec 	.word	0x10015cec
10009b08:	10008b75 	.word	0x10008b75
10009b0c:	10008c3d 	.word	0x10008c3d
10009b10:	1001573c 	.word	0x1001573c
10009b14:	1000836d 	.word	0x1000836d
10009b18:	10015750 	.word	0x10015750
10009b1c:	10015aa0 	.word	0x10015aa0
10009b20:	10008ae9 	.word	0x10008ae9
10009b24:	10008bbd 	.word	0x10008bbd
10009b28:	10008c81 	.word	0x10008c81
10009b2c:	10009105 	.word	0x10009105
10009b30:	100091d1 	.word	0x100091d1
10009b34:	10008d95 	.word	0x10008d95
10009b38:	100097f1 	.word	0x100097f1
10009b3c:	100158a0 	.word	0x100158a0
10009b40:	10015780 	.word	0x10015780
10009b44:	10015798 	.word	0x10015798
10009b48:	100082b9 	.word	0x100082b9
10009b4c:	100157c8 	.word	0x100157c8
10009b50:	100145c1 	.word	0x100145c1
10009b54:	10015968 	.word	0x10015968
10009b58:	10015a64 	.word	0x10015a64
10009b5c:	10008eb1 	.word	0x10008eb1
10009b60:	10008321 	.word	0x10008321
10009b64:	10015a80 	.word	0x10015a80
    	return 0x07;
    }
    if(debug)
10009b68:	464b      	mov	r3, r9
10009b6a:	2b00      	cmp	r3, #0
10009b6c:	d001      	beq.n	10009b72 <mpu_run_6500_self_test+0x2e6>
10009b6e:	f000 fc07 	bl	1000a380 <mpu_run_6500_self_test+0xaf4>
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
10009b72:	4ee2      	ldr	r6, [pc, #904]	; (10009efc <mpu_run_6500_self_test+0x670>)
10009b74:	ab14      	add	r3, sp, #80	; 0x50
10009b76:	aa14      	add	r2, sp, #80	; 0x50
10009b78:	a914      	add	r1, sp, #80	; 0x50
10009b7a:	7e9b      	ldrb	r3, [r3, #26]
10009b7c:	7e52      	ldrb	r2, [r2, #25]
10009b7e:	7e09      	ldrb	r1, [r1, #24]
10009b80:	48df      	ldr	r0, [pc, #892]	; (10009f00 <mpu_run_6500_self_test+0x674>)
10009b82:	9605      	str	r6, [sp, #20]
10009b84:	47b0      	blx	r6
10009b86:	ab21      	add	r3, sp, #132	; 0x84
10009b88:	930e      	str	r3, [sp, #56]	; 0x38
10009b8a:	001f      	movs	r7, r3
	28538,28823,29112,29403,29697,29994,30294,30597,
	30903,31212,31524,31839,32157,32479,32804,33132
};
static int accel_6500_self_test(long *bias_regular, long *bias_st, int debug)
{
    int i, result = 0, otp_value_zero = 0;
10009b8c:	2300      	movs	r3, #0
10009b8e:	9307      	str	r3, [sp, #28]
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.accel_sens;
10009b90:	4bdc      	ldr	r3, [pc, #880]	; (10009f04 <mpu_run_6500_self_test+0x678>)
    		log_i("Reading OTP Register Error.\n");
    	return 0x07;
    }
    if(debug)
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
	for (i = 0; i < 3; i++) {
10009b92:	2600      	movs	r6, #0
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.accel_sens;
10009b94:	4698      	mov	r8, r3
    	return 0x07;
    }
    if(debug)
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
10009b96:	2218      	movs	r2, #24
10009b98:	ab14      	add	r3, sp, #80	; 0x50
10009b9a:	189b      	adds	r3, r3, r2
10009b9c:	5d9b      	ldrb	r3, [r3, r6]
10009b9e:	2b00      	cmp	r3, #0
10009ba0:	d100      	bne.n	10009ba4 <mpu_run_6500_self_test+0x318>
10009ba2:	e0a4      	b.n	10009cee <mpu_run_6500_self_test+0x462>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.accel_sens;
10009ba4:	4ad8      	ldr	r2, [pc, #864]	; (10009f08 <mpu_run_6500_self_test+0x67c>)
    }
    if(debug)
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
10009ba6:	3b01      	subs	r3, #1
10009ba8:	005b      	lsls	r3, r3, #1
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.accel_sens;
10009baa:	5a98      	ldrh	r0, [r3, r2]
10009bac:	4bd7      	ldr	r3, [pc, #860]	; (10009f0c <mpu_run_6500_self_test+0x680>)
10009bae:	4798      	blx	r3
10009bb0:	218f      	movs	r1, #143	; 0x8f
10009bb2:	05c9      	lsls	r1, r1, #23
10009bb4:	47c0      	blx	r8
10009bb6:	21e2      	movs	r1, #226	; 0xe2
10009bb8:	0589      	lsls	r1, r1, #22
10009bba:	47c0      	blx	r8
10009bbc:	6038      	str	r0, [r7, #0]
    		log_i("Reading OTP Register Error.\n");
    	return 0x07;
    }
    if(debug)
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
	for (i = 0; i < 3; i++) {
10009bbe:	3601      	adds	r6, #1
10009bc0:	3704      	adds	r7, #4
10009bc2:	2e03      	cmp	r6, #3
10009bc4:	d1e7      	bne.n	10009b96 <mpu_run_6500_self_test+0x30a>
		else {
			ct_shift_prod[i] = 0;
			otp_value_zero = 1;
		}
	}
	if(otp_value_zero == 0) {
10009bc6:	9b07      	ldr	r3, [sp, #28]
10009bc8:	2b00      	cmp	r3, #0
10009bca:	d000      	beq.n	10009bce <mpu_run_6500_self_test+0x342>
10009bcc:	e21e      	b.n	1000a00c <mpu_run_6500_self_test+0x780>
		if(debug)
10009bce:	464b      	mov	r3, r9
10009bd0:	2b00      	cmp	r3, #0
10009bd2:	d000      	beq.n	10009bd6 <mpu_run_6500_self_test+0x34a>
10009bd4:	e378      	b.n	1000a2c8 <mpu_run_6500_self_test+0xa3c>
			log_i("ACCEL:CRITERIA A\n");
10009bd6:	48ce      	ldr	r0, [pc, #824]	; (10009f10 <mpu_run_6500_self_test+0x684>)
10009bd8:	47d8      	blx	fp
10009bda:	2300      	movs	r3, #0
10009bdc:	4698      	mov	r8, r3
10009bde:	4fcd      	ldr	r7, [pc, #820]	; (10009f14 <mpu_run_6500_self_test+0x688>)
10009be0:	4646      	mov	r6, r8
10009be2:	46b8      	mov	r8, r7
	28538,28823,29112,29403,29697,29994,30294,30597,
	30903,31212,31524,31839,32157,32479,32804,33132
};
static int accel_6500_self_test(long *bias_regular, long *bias_st, int debug)
{
    int i, result = 0, otp_value_zero = 0;
10009be4:	930f      	str	r3, [sp, #60]	; 0x3c
		}
	}
	if(otp_value_zero == 0) {
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
		for (i = 0; i < 3; i++) {
10009be6:	9310      	str	r3, [sp, #64]	; 0x40
10009be8:	4bcb      	ldr	r3, [pc, #812]	; (10009f18 <mpu_run_6500_self_test+0x68c>)
10009bea:	9307      	str	r3, [sp, #28]
10009bec:	4bcb      	ldr	r3, [pc, #812]	; (10009f1c <mpu_run_6500_self_test+0x690>)
10009bee:	9316      	str	r3, [sp, #88]	; 0x58
10009bf0:	4bcb      	ldr	r3, [pc, #812]	; (10009f20 <mpu_run_6500_self_test+0x694>)
10009bf2:	9312      	str	r3, [sp, #72]	; 0x48
10009bf4:	4bcb      	ldr	r3, [pc, #812]	; (10009f24 <mpu_run_6500_self_test+0x698>)
10009bf6:	930c      	str	r3, [sp, #48]	; 0x30
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009bf8:	2228      	movs	r2, #40	; 0x28
10009bfa:	ab14      	add	r3, sp, #80	; 0x50
10009bfc:	189b      	adds	r3, r3, r2
10009bfe:	599b      	ldr	r3, [r3, r6]
10009c00:	59aa      	ldr	r2, [r5, r6]
10009c02:	9311      	str	r3, [sp, #68]	; 0x44
10009c04:	1a98      	subs	r0, r3, r2
10009c06:	9b07      	ldr	r3, [sp, #28]
10009c08:	4798      	blx	r3
			if(debug) {
10009c0a:	464b      	mov	r3, r9
	}
	if(otp_value_zero == 0) {
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009c0c:	1c07      	adds	r7, r0, #0
			if(debug) {
10009c0e:	2b00      	cmp	r3, #0
10009c10:	d000      	beq.n	10009c14 <mpu_run_6500_self_test+0x388>
10009c12:	e25b      	b.n	1000a0cc <mpu_run_6500_self_test+0x840>
						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
						bias_st[i]/1.f);
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
			}

			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i] - 1.f;
10009c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009c16:	5999      	ldr	r1, [r3, r6]
10009c18:	9b16      	ldr	r3, [sp, #88]	; 0x58
10009c1a:	4798      	blx	r3
10009c1c:	21fe      	movs	r1, #254	; 0xfe
10009c1e:	4bc2      	ldr	r3, [pc, #776]	; (10009f28 <mpu_run_6500_self_test+0x69c>)
10009c20:	0589      	lsls	r1, r1, #22
10009c22:	4798      	blx	r3
10009c24:	1c07      	adds	r7, r0, #0

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
10009c26:	1c38      	adds	r0, r7, #0
10009c28:	47c0      	blx	r8
10009c2a:	0002      	movs	r2, r0
10009c2c:	2000      	movs	r0, #0
10009c2e:	000b      	movs	r3, r1
10009c30:	49be      	ldr	r1, [pc, #760]	; (10009f2c <mpu_run_6500_self_test+0x6a0>)
10009c32:	9000      	str	r0, [sp, #0]
10009c34:	9101      	str	r1, [sp, #4]
10009c36:	9905      	ldr	r1, [sp, #20]
10009c38:	9812      	ldr	r0, [sp, #72]	; 0x48
10009c3a:	4788      	blx	r1
							test.max_accel_var/1.f);

			if (fabs(st_shift_ratio[i]) > test.max_accel_var) {
10009c3c:	2100      	movs	r1, #0
10009c3e:	1c38      	adds	r0, r7, #0
10009c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009c42:	4798      	blx	r3
10009c44:	2800      	cmp	r0, #0
10009c46:	d100      	bne.n	10009c4a <mpu_run_6500_self_test+0x3be>
10009c48:	e34b      	b.n	1000a2e2 <mpu_run_6500_self_test+0xa56>
10009c4a:	21fc      	movs	r1, #252	; 0xfc
10009c4c:	1c38      	adds	r0, r7, #0
10009c4e:	0589      	lsls	r1, r1, #22
10009c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009c52:	4798      	blx	r3
10009c54:	2800      	cmp	r0, #0
10009c56:	d00d      	beq.n	10009c74 <mpu_run_6500_self_test+0x3e8>
				if(debug)
10009c58:	464b      	mov	r3, r9
10009c5a:	2b00      	cmp	r3, #0
10009c5c:	d000      	beq.n	10009c60 <mpu_run_6500_self_test+0x3d4>
10009c5e:	e39c      	b.n	1000a39a <mpu_run_6500_self_test+0xb0e>
					log_i("ACCEL Fail Axis = %d\n", i);
10009c60:	9f10      	ldr	r7, [sp, #64]	; 0x40
10009c62:	9b05      	ldr	r3, [sp, #20]
10009c64:	0039      	movs	r1, r7
10009c66:	48b2      	ldr	r0, [pc, #712]	; (10009f30 <mpu_run_6500_self_test+0x6a4>)
10009c68:	4798      	blx	r3
				result |= 1 << i;	//Error condition
10009c6a:	2301      	movs	r3, #1
10009c6c:	40bb      	lsls	r3, r7
10009c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009c70:	431a      	orrs	r2, r3
10009c72:	920f      	str	r2, [sp, #60]	; 0x3c
		}
	}
	if(otp_value_zero == 0) {
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
		for (i = 0; i < 3; i++) {
10009c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009c76:	3604      	adds	r6, #4
10009c78:	3301      	adds	r3, #1
10009c7a:	9310      	str	r3, [sp, #64]	; 0x40
10009c7c:	2e0c      	cmp	r6, #12
10009c7e:	d1bb      	bne.n	10009bf8 <mpu_run_6500_self_test+0x36c>
				result |= 1 << i;	//Error condition
			}
		}
	}

	if(result == 0) {
10009c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009c82:	2b00      	cmp	r3, #0
10009c84:	d000      	beq.n	10009c88 <mpu_run_6500_self_test+0x3fc>
10009c86:	e339      	b.n	1000a2fc <mpu_run_6500_self_test+0xa70>
	/* Self Test Pass/Fail Criteria C */
		accel_offset_max = test.max_g_offset * 65536.f;
		if(debug)
10009c88:	464b      	mov	r3, r9
10009c8a:	2b00      	cmp	r3, #0
10009c8c:	d000      	beq.n	10009c90 <mpu_run_6500_self_test+0x404>
10009c8e:	e38b      	b.n	1000a3a8 <mpu_run_6500_self_test+0xb1c>
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
10009c90:	4ba8      	ldr	r3, [pc, #672]	; (10009f34 <mpu_run_6500_self_test+0x6a8>)
10009c92:	2200      	movs	r2, #0
10009c94:	48a8      	ldr	r0, [pc, #672]	; (10009f38 <mpu_run_6500_self_test+0x6ac>)
10009c96:	9905      	ldr	r1, [sp, #20]
10009c98:	4788      	blx	r1
10009c9a:	4ba2      	ldr	r3, [pc, #648]	; (10009f24 <mpu_run_6500_self_test+0x698>)
		for (i = 0; i < 3; i++) {
10009c9c:	2600      	movs	r6, #0
10009c9e:	930c      	str	r3, [sp, #48]	; 0x30
			if(fabs(bias_regular[i]) > accel_offset_max) {
				if(debug)
					log_i("FAILED: Accel axis:%d = %ld > 500mg\n", i, bias_regular[i]);
10009ca0:	4ba6      	ldr	r3, [pc, #664]	; (10009f3c <mpu_run_6500_self_test+0x6b0>)
10009ca2:	4698      	mov	r8, r3
	/* Self Test Pass/Fail Criteria C */
		accel_offset_max = test.max_g_offset * 65536.f;
		if(debug)
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > accel_offset_max) {
10009ca4:	682f      	ldr	r7, [r5, #0]
10009ca6:	2f00      	cmp	r7, #0
10009ca8:	dc00      	bgt.n	10009cac <mpu_run_6500_self_test+0x420>
10009caa:	e20b      	b.n	1000a0c4 <mpu_run_6500_self_test+0x838>
10009cac:	0038      	movs	r0, r7
10009cae:	9b07      	ldr	r3, [sp, #28]
10009cb0:	4798      	blx	r3
10009cb2:	218e      	movs	r1, #142	; 0x8e
10009cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009cb6:	05c9      	lsls	r1, r1, #23
10009cb8:	4798      	blx	r3
10009cba:	2800      	cmp	r0, #0
10009cbc:	d00d      	beq.n	10009cda <mpu_run_6500_self_test+0x44e>
				if(debug)
10009cbe:	464b      	mov	r3, r9
10009cc0:	2b00      	cmp	r3, #0
10009cc2:	d000      	beq.n	10009cc6 <mpu_run_6500_self_test+0x43a>
10009cc4:	e361      	b.n	1000a38a <mpu_run_6500_self_test+0xafe>
					log_i("FAILED: Accel axis:%d = %ld > 500mg\n", i, bias_regular[i]);
10009cc6:	003a      	movs	r2, r7
10009cc8:	9b05      	ldr	r3, [sp, #20]
10009cca:	0031      	movs	r1, r6
10009ccc:	4640      	mov	r0, r8
10009cce:	4798      	blx	r3
				result |= 1 << i;	//Error condition
10009cd0:	2301      	movs	r3, #1
10009cd2:	40b3      	lsls	r3, r6
10009cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009cd6:	431a      	orrs	r2, r3
10009cd8:	920f      	str	r2, [sp, #60]	; 0x3c
	if(result == 0) {
	/* Self Test Pass/Fail Criteria C */
		accel_offset_max = test.max_g_offset * 65536.f;
		if(debug)
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
		for (i = 0; i < 3; i++) {
10009cda:	3601      	adds	r6, #1
10009cdc:	3504      	adds	r5, #4
10009cde:	2e03      	cmp	r6, #3
10009ce0:	d1e0      	bne.n	10009ca4 <mpu_run_6500_self_test+0x418>
10009ce2:	25ff      	movs	r5, #255	; 0xff
10009ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009ce6:	401d      	ands	r5, r3
10009ce8:	b2db      	uxtb	r3, r3
10009cea:	9310      	str	r3, [sp, #64]	; 0x40
10009cec:	e693      	b.n	10009a16 <mpu_run_6500_self_test+0x18a>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.accel_sens;
		}
		else {
			ct_shift_prod[i] = 0;
10009cee:	2300      	movs	r3, #0
10009cf0:	603b      	str	r3, [r7, #0]
			otp_value_zero = 1;
10009cf2:	2301      	movs	r3, #1
10009cf4:	9307      	str	r3, [sp, #28]
10009cf6:	e762      	b.n	10009bbe <mpu_run_6500_self_test+0x332>
    	if(debug)
    		log_i("Reading OTP Register Error.\n");
        return 0x07;
    }

    if(debug)
10009cf8:	2b00      	cmp	r3, #0
10009cfa:	d000      	beq.n	10009cfe <mpu_run_6500_self_test+0x472>
10009cfc:	e33c      	b.n	1000a378 <mpu_run_6500_self_test+0xaec>
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);
10009cfe:	ab14      	add	r3, sp, #80	; 0x50
10009d00:	aa14      	add	r2, sp, #80	; 0x50
10009d02:	a914      	add	r1, sp, #80	; 0x50
10009d04:	7e9b      	ldrb	r3, [r3, #26]
10009d06:	9d05      	ldr	r5, [sp, #20]
10009d08:	7e52      	ldrb	r2, [r2, #25]
10009d0a:	7e09      	ldrb	r1, [r1, #24]
10009d0c:	488c      	ldr	r0, [pc, #560]	; (10009f40 <mpu_run_6500_self_test+0x6b4>)
10009d0e:	47a8      	blx	r5

	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
10009d10:	4b82      	ldr	r3, [pc, #520]	; (10009f1c <mpu_run_6500_self_test+0x690>)
    return result;
}

static int gyro_6500_self_test(long *bias_regular, long *bias_st, int debug)
{
    int i, result = 0, otp_value_zero = 0;
10009d12:	2700      	movs	r7, #0
    }

    if(debug)
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);

	for (i = 0; i < 3; i++) {
10009d14:	2500      	movs	r5, #0
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
10009d16:	4698      	mov	r8, r3
10009d18:	9e0e      	ldr	r6, [sp, #56]	; 0x38

    if(debug)
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);

	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
10009d1a:	2218      	movs	r2, #24
10009d1c:	ab14      	add	r3, sp, #80	; 0x50
10009d1e:	189b      	adds	r3, r3, r2
10009d20:	5d5b      	ldrb	r3, [r3, r5]
10009d22:	2b00      	cmp	r3, #0
10009d24:	d100      	bne.n	10009d28 <mpu_run_6500_self_test+0x49c>
10009d26:	e0a3      	b.n	10009e70 <mpu_run_6500_self_test+0x5e4>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
10009d28:	4a77      	ldr	r2, [pc, #476]	; (10009f08 <mpu_run_6500_self_test+0x67c>)
    if(debug)
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);

	for (i = 0; i < 3; i++) {
		if (regs[i] != 0) {
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
10009d2a:	3b01      	subs	r3, #1
10009d2c:	005b      	lsls	r3, r3, #1
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
10009d2e:	5a98      	ldrh	r0, [r3, r2]
10009d30:	4b76      	ldr	r3, [pc, #472]	; (10009f0c <mpu_run_6500_self_test+0x680>)
10009d32:	4798      	blx	r3
10009d34:	218f      	movs	r1, #143	; 0x8f
10009d36:	4b73      	ldr	r3, [pc, #460]	; (10009f04 <mpu_run_6500_self_test+0x678>)
10009d38:	05c9      	lsls	r1, r1, #23
10009d3a:	4798      	blx	r3
10009d3c:	4981      	ldr	r1, [pc, #516]	; (10009f44 <mpu_run_6500_self_test+0x6b8>)
10009d3e:	47c0      	blx	r8
10009d40:	6030      	str	r0, [r6, #0]
    }

    if(debug)
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);

	for (i = 0; i < 3; i++) {
10009d42:	3501      	adds	r5, #1
10009d44:	3604      	adds	r6, #4
10009d46:	2d03      	cmp	r5, #3
10009d48:	d1e7      	bne.n	10009d1a <mpu_run_6500_self_test+0x48e>
			otp_value_zero = 1;
		}
	}

	if(otp_value_zero == 0) {
		if(debug)
10009d4a:	464b      	mov	r3, r9
			ct_shift_prod[i] = 0;
			otp_value_zero = 1;
		}
	}

	if(otp_value_zero == 0) {
10009d4c:	2f00      	cmp	r7, #0
10009d4e:	d000      	beq.n	10009d52 <mpu_run_6500_self_test+0x4c6>
10009d50:	e10c      	b.n	10009f6c <mpu_run_6500_self_test+0x6e0>
		if(debug)
10009d52:	2b00      	cmp	r3, #0
10009d54:	d000      	beq.n	10009d58 <mpu_run_6500_self_test+0x4cc>
10009d56:	e2bb      	b.n	1000a2d0 <mpu_run_6500_self_test+0xa44>
			log_i("GYRO:CRITERIA A\n");
10009d58:	487b      	ldr	r0, [pc, #492]	; (10009f48 <mpu_run_6500_self_test+0x6bc>)
10009d5a:	47d8      	blx	fp
    return result;
}

static int gyro_6500_self_test(long *bias_regular, long *bias_st, int debug)
{
    int i, result = 0, otp_value_zero = 0;
10009d5c:	2300      	movs	r3, #0

	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
10009d5e:	4698      	mov	r8, r3
    return result;
}

static int gyro_6500_self_test(long *bias_regular, long *bias_st, int debug)
{
    int i, result = 0, otp_value_zero = 0;
10009d60:	930f      	str	r3, [sp, #60]	; 0x3c
10009d62:	4b6d      	ldr	r3, [pc, #436]	; (10009f18 <mpu_run_6500_self_test+0x68c>)
10009d64:	4f6b      	ldr	r7, [pc, #428]	; (10009f14 <mpu_run_6500_self_test+0x688>)
10009d66:	9307      	str	r3, [sp, #28]
10009d68:	4b6c      	ldr	r3, [pc, #432]	; (10009f1c <mpu_run_6500_self_test+0x690>)
		}
	}

	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
10009d6a:	2500      	movs	r5, #0
10009d6c:	9316      	str	r3, [sp, #88]	; 0x58
10009d6e:	4b6c      	ldr	r3, [pc, #432]	; (10009f20 <mpu_run_6500_self_test+0x694>)
10009d70:	9312      	str	r3, [sp, #72]	; 0x48
10009d72:	4b6c      	ldr	r3, [pc, #432]	; (10009f24 <mpu_run_6500_self_test+0x698>)
10009d74:	930c      	str	r3, [sp, #48]	; 0x30
10009d76:	4b75      	ldr	r3, [pc, #468]	; (10009f4c <mpu_run_6500_self_test+0x6c0>)
10009d78:	9311      	str	r3, [sp, #68]	; 0x44
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug) {
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
10009d7a:	003b      	movs	r3, r7
10009d7c:	4647      	mov	r7, r8
10009d7e:	4698      	mov	r8, r3
	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009d80:	221c      	movs	r2, #28
10009d82:	ab14      	add	r3, sp, #80	; 0x50
10009d84:	189b      	adds	r3, r3, r2
10009d86:	595b      	ldr	r3, [r3, r5]
10009d88:	9314      	str	r3, [sp, #80]	; 0x50
10009d8a:	9b04      	ldr	r3, [sp, #16]
10009d8c:	595b      	ldr	r3, [r3, r5]
10009d8e:	9317      	str	r3, [sp, #92]	; 0x5c
10009d90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009d92:	9b14      	ldr	r3, [sp, #80]	; 0x50
10009d94:	1a98      	subs	r0, r3, r2
10009d96:	9b07      	ldr	r3, [sp, #28]
10009d98:	4798      	blx	r3

			if(debug) {
10009d9a:	464b      	mov	r3, r9
	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009d9c:	1c06      	adds	r6, r0, #0

			if(debug) {
10009d9e:	2b00      	cmp	r3, #0
10009da0:	d000      	beq.n	10009da4 <mpu_run_6500_self_test+0x518>
10009da2:	e1f5      	b.n	1000a190 <mpu_run_6500_self_test+0x904>
						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
						bias_st[i]/1.f);
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
			}

			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i];
10009da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009da6:	5959      	ldr	r1, [r3, r5]
10009da8:	9b16      	ldr	r3, [sp, #88]	; 0x58
10009daa:	4798      	blx	r3
10009dac:	1c06      	adds	r6, r0, #0

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
10009dae:	1c30      	adds	r0, r6, #0
10009db0:	47c0      	blx	r8
10009db2:	0002      	movs	r2, r0
10009db4:	2000      	movs	r0, #0
10009db6:	000b      	movs	r3, r1
10009db8:	495c      	ldr	r1, [pc, #368]	; (10009f2c <mpu_run_6500_self_test+0x6a0>)
10009dba:	9000      	str	r0, [sp, #0]
10009dbc:	9101      	str	r1, [sp, #4]
10009dbe:	9905      	ldr	r1, [sp, #20]
10009dc0:	9812      	ldr	r0, [sp, #72]	; 0x48
10009dc2:	4788      	blx	r1
							test.max_gyro_var/1.f);

			if (fabs(st_shift_ratio[i]) < test.max_gyro_var) {
10009dc4:	2100      	movs	r1, #0
10009dc6:	1c30      	adds	r0, r6, #0
10009dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009dca:	4798      	blx	r3
10009dcc:	2800      	cmp	r0, #0
10009dce:	d100      	bne.n	10009dd2 <mpu_run_6500_self_test+0x546>
10009dd0:	e282      	b.n	1000a2d8 <mpu_run_6500_self_test+0xa4c>
10009dd2:	21fc      	movs	r1, #252	; 0xfc
10009dd4:	1c30      	adds	r0, r6, #0
10009dd6:	0589      	lsls	r1, r1, #22
10009dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009dda:	4798      	blx	r3
10009ddc:	2800      	cmp	r0, #0
10009dde:	d00c      	beq.n	10009dfa <mpu_run_6500_self_test+0x56e>
				if(debug)
10009de0:	464b      	mov	r3, r9
10009de2:	2b00      	cmp	r3, #0
10009de4:	d000      	beq.n	10009de8 <mpu_run_6500_self_test+0x55c>
10009de6:	e2dc      	b.n	1000a3a2 <mpu_run_6500_self_test+0xb16>
					log_i("Gyro Fail Axis = %d\n", i);
10009de8:	9b05      	ldr	r3, [sp, #20]
10009dea:	0039      	movs	r1, r7
10009dec:	4858      	ldr	r0, [pc, #352]	; (10009f50 <mpu_run_6500_self_test+0x6c4>)
10009dee:	4798      	blx	r3
				result |= 1 << i;	//Error condition
10009df0:	2301      	movs	r3, #1
10009df2:	40bb      	lsls	r3, r7
10009df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009df6:	431a      	orrs	r2, r3
10009df8:	920f      	str	r2, [sp, #60]	; 0x3c
10009dfa:	3504      	adds	r5, #4

	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
10009dfc:	3701      	adds	r7, #1
10009dfe:	2d0c      	cmp	r5, #12
10009e00:	d1be      	bne.n	10009d80 <mpu_run_6500_self_test+0x4f4>
				result |= 1 << i;	//Error condition
			}
		}
	}

	if(result == 0) {
10009e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009e04:	2b00      	cmp	r3, #0
10009e06:	d000      	beq.n	10009e0a <mpu_run_6500_self_test+0x57e>
10009e08:	e270      	b.n	1000a2ec <mpu_run_6500_self_test+0xa60>
	/* Self Test Pass/Fail Criteria C */
		gyro_offset_max = test.min_dps * 65536.f;
		if(debug)
10009e0a:	464b      	mov	r3, r9
10009e0c:	2b00      	cmp	r3, #0
10009e0e:	d000      	beq.n	10009e12 <mpu_run_6500_self_test+0x586>
10009e10:	e2ce      	b.n	1000a3b0 <mpu_run_6500_self_test+0xb24>
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
10009e12:	4b50      	ldr	r3, [pc, #320]	; (10009f54 <mpu_run_6500_self_test+0x6c8>)
10009e14:	2200      	movs	r2, #0
10009e16:	4850      	ldr	r0, [pc, #320]	; (10009f58 <mpu_run_6500_self_test+0x6cc>)
10009e18:	9905      	ldr	r1, [sp, #20]
10009e1a:	4788      	blx	r1
10009e1c:	4b41      	ldr	r3, [pc, #260]	; (10009f24 <mpu_run_6500_self_test+0x698>)
		for (i = 0; i < 3; i++) {
10009e1e:	2500      	movs	r5, #0
10009e20:	930c      	str	r3, [sp, #48]	; 0x30
			if(fabs(bias_regular[i]) > gyro_offset_max) {
				if(debug)
					log_i("FAILED: Gyro axis:%d = %ld > 20dps\n", i, bias_regular[i]);
10009e22:	4b4e      	ldr	r3, [pc, #312]	; (10009f5c <mpu_run_6500_self_test+0x6d0>)
10009e24:	9f04      	ldr	r7, [sp, #16]
10009e26:	4698      	mov	r8, r3
	/* Self Test Pass/Fail Criteria C */
		gyro_offset_max = test.min_dps * 65536.f;
		if(debug)
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > gyro_offset_max) {
10009e28:	683e      	ldr	r6, [r7, #0]
10009e2a:	2e00      	cmp	r6, #0
10009e2c:	dc00      	bgt.n	10009e30 <mpu_run_6500_self_test+0x5a4>
10009e2e:	e145      	b.n	1000a0bc <mpu_run_6500_self_test+0x830>
10009e30:	0030      	movs	r0, r6
10009e32:	9b07      	ldr	r3, [sp, #28]
10009e34:	4798      	blx	r3
10009e36:	494a      	ldr	r1, [pc, #296]	; (10009f60 <mpu_run_6500_self_test+0x6d4>)
10009e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009e3a:	4798      	blx	r3
10009e3c:	2800      	cmp	r0, #0
10009e3e:	d00d      	beq.n	10009e5c <mpu_run_6500_self_test+0x5d0>
				if(debug)
10009e40:	464b      	mov	r3, r9
10009e42:	2b00      	cmp	r3, #0
10009e44:	d000      	beq.n	10009e48 <mpu_run_6500_self_test+0x5bc>
10009e46:	e2a4      	b.n	1000a392 <mpu_run_6500_self_test+0xb06>
					log_i("FAILED: Gyro axis:%d = %ld > 20dps\n", i, bias_regular[i]);
10009e48:	0032      	movs	r2, r6
10009e4a:	9b05      	ldr	r3, [sp, #20]
10009e4c:	0029      	movs	r1, r5
10009e4e:	4640      	mov	r0, r8
10009e50:	4798      	blx	r3
				result |= 1 << i;	//Error condition
10009e52:	2301      	movs	r3, #1
10009e54:	40ab      	lsls	r3, r5
10009e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009e58:	431a      	orrs	r2, r3
10009e5a:	920f      	str	r2, [sp, #60]	; 0x3c
	if(result == 0) {
	/* Self Test Pass/Fail Criteria C */
		gyro_offset_max = test.min_dps * 65536.f;
		if(debug)
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
		for (i = 0; i < 3; i++) {
10009e5c:	3501      	adds	r5, #1
10009e5e:	3704      	adds	r7, #4
10009e60:	2d03      	cmp	r5, #3
10009e62:	d1e1      	bne.n	10009e28 <mpu_run_6500_self_test+0x59c>
10009e64:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
10009e66:	b2fd      	uxtb	r5, r7
10009e68:	426a      	negs	r2, r5
10009e6a:	416a      	adcs	r2, r5
10009e6c:	9204      	str	r2, [sp, #16]
10009e6e:	e5ec      	b.n	10009a4a <mpu_run_6500_self_test+0x1be>
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
		}
		else {
			ct_shift_prod[i] = 0;
10009e70:	2300      	movs	r3, #0
			otp_value_zero = 1;
10009e72:	2701      	movs	r7, #1
			ct_shift_prod[i] = mpu_6500_st_tb[regs[i] - 1];
			ct_shift_prod[i] *= 65536.f;
			ct_shift_prod[i] /= test.gyro_sens;
		}
		else {
			ct_shift_prod[i] = 0;
10009e74:	6033      	str	r3, [r6, #0]
10009e76:	e764      	b.n	10009d42 <mpu_run_6500_self_test+0x4b6>
        goto restore;
    }

    accel_result = accel_6500_self_test(accel, accel_st, debug);
    if(debug)
    	log_i("Accel Self Test Results: %d\n", accel_result);
10009e78:	4e3a      	ldr	r6, [pc, #232]	; (10009f64 <mpu_run_6500_self_test+0x6d8>)
10009e7a:	0030      	movs	r0, r6
10009e7c:	47d8      	blx	fp
10009e7e:	e5ce      	b.n	10009a1e <mpu_run_6500_self_test+0x192>

    gyro_result = gyro_6500_self_test(gyro, gyro_st, debug);
    if(debug)
    	log_i("Gyro Self Test Results: %d\n", gyro_result);
10009e80:	4e38      	ldr	r6, [pc, #224]	; (10009f64 <mpu_run_6500_self_test+0x6d8>)
10009e82:	0030      	movs	r0, r6
10009e84:	47d8      	blx	fp
10009e86:	e5e4      	b.n	10009a52 <mpu_run_6500_self_test+0x1c6>
    if (ii == tries) {
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        if(debug)
        	log_i("Retrieving Biases Error - possible I2C error\n");
10009e88:	4e36      	ldr	r6, [pc, #216]	; (10009f64 <mpu_run_6500_self_test+0x6d8>)
10009e8a:	0030      	movs	r0, r6
10009e8c:	47d8      	blx	fp
10009e8e:	e553      	b.n	10009938 <mpu_run_6500_self_test+0xac>
    mpu_set_bypass(1);

    tmp[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
        return 0x07;
    tmp[0] = AKM_BIT_SELF_TEST;
10009e90:	2340      	movs	r3, #64	; 0x40
10009e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
10009e94:	210c      	movs	r1, #12
    mpu_set_bypass(1);

    tmp[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
        return 0x07;
    tmp[0] = AKM_BIT_SELF_TEST;
10009e96:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
10009e98:	5de0      	ldrb	r0, [r4, r7]
10009e9a:	0013      	movs	r3, r2
10009e9c:	2201      	movs	r2, #1
10009e9e:	47b0      	blx	r6
10009ea0:	2800      	cmp	r0, #0
10009ea2:	d100      	bne.n	10009ea6 <mpu_run_6500_self_test+0x61a>
10009ea4:	e1c8      	b.n	1000a238 <mpu_run_6500_self_test+0x9ac>
        goto AKM_restore;
    tmp[0] = AKM_MODE_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
10009ea6:	2307      	movs	r3, #7
10009ea8:	930c      	str	r3, [sp, #48]	; 0x30
10009eaa:	9307      	str	r3, [sp, #28]
    data = (short)(tmp[5] << 8) | tmp[4];
    if ((data > -800) || (data < -3200))  
        result |= 0x04;
#endif
AKM_restore:
    tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
10009eac:	2310      	movs	r3, #16
10009eae:	4699      	mov	r9, r3
10009eb0:	464a      	mov	r2, r9
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
10009eb2:	272a      	movs	r7, #42	; 0x2a
    data = (short)(tmp[5] << 8) | tmp[4];
    if ((data > -800) || (data < -3200))  
        result |= 0x04;
#endif
AKM_restore:
    tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
10009eb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
10009eb6:	210c      	movs	r1, #12
    data = (short)(tmp[5] << 8) | tmp[4];
    if ((data > -800) || (data < -3200))  
        result |= 0x04;
#endif
AKM_restore:
    tmp[0] = 0 | SUPPORTS_AK89xx_HIGH_SENS;
10009eb8:	702a      	strb	r2, [r5, #0]
10009eba:	002b      	movs	r3, r5
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp);
10009ebc:	2201      	movs	r2, #1
10009ebe:	5de0      	ldrb	r0, [r4, r7]
10009ec0:	47b0      	blx	r6
    tmp[0] = SUPPORTS_AK89xx_HIGH_SENS;
10009ec2:	464a      	mov	r2, r9
10009ec4:	702a      	strb	r2, [r5, #0]
10009ec6:	002b      	movs	r3, r5
    i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp);
10009ec8:	2201      	movs	r2, #1
10009eca:	210a      	movs	r1, #10
10009ecc:	5de0      	ldrb	r0, [r4, r7]
10009ece:	47b0      	blx	r6
    mpu_set_bypass(0);
10009ed0:	2000      	movs	r0, #0
10009ed2:	47c0      	blx	r8
    if (!accel_result)
        result |= 0x02;

#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if(debug)
10009ed4:	4653      	mov	r3, sl
10009ed6:	2b00      	cmp	r3, #0
10009ed8:	d100      	bne.n	10009edc <mpu_run_6500_self_test+0x650>
10009eda:	e2aa      	b.n	1000a432 <mpu_run_6500_self_test+0xba6>
    	log_i("Compass Self Test Results: %d\n", compass_result);
10009edc:	4e21      	ldr	r6, [pc, #132]	; (10009f64 <mpu_run_6500_self_test+0x6d8>)
10009ede:	0030      	movs	r0, r6
10009ee0:	47d8      	blx	fp
10009ee2:	9b05      	ldr	r3, [sp, #20]
10009ee4:	990c      	ldr	r1, [sp, #48]	; 0x30
10009ee6:	4820      	ldr	r0, [pc, #128]	; (10009f68 <mpu_run_6500_self_test+0x6dc>)
10009ee8:	4798      	blx	r3
    if (!compass_result)
10009eea:	9b07      	ldr	r3, [sp, #28]
10009eec:	2b00      	cmp	r3, #0
10009eee:	d000      	beq.n	10009ef2 <mpu_run_6500_self_test+0x666>
10009ef0:	e578      	b.n	100099e4 <mpu_run_6500_self_test+0x158>
        result |= 0x04;
10009ef2:	2304      	movs	r3, #4
10009ef4:	9a04      	ldr	r2, [sp, #16]
10009ef6:	431a      	orrs	r2, r3
10009ef8:	9204      	str	r2, [sp, #16]
10009efa:	e521      	b.n	10009940 <mpu_run_6500_self_test+0xb4>
10009efc:	100145c1 	.word	0x100145c1
10009f00:	100157e4 	.word	0x100157e4
10009f04:	1001246d 	.word	0x1001246d
10009f08:	10015ac0 	.word	0x10015ac0
10009f0c:	10012aa5 	.word	0x10012aa5
10009f10:	100157fc 	.word	0x100157fc
10009f14:	10013fe1 	.word	0x10013fe1
10009f18:	10012a15 	.word	0x10012a15
10009f1c:	100120d9 	.word	0x100120d9
10009f20:	10015858 	.word	0x10015858
10009f24:	10011c81 	.word	0x10011c81
10009f28:	10012695 	.word	0x10012695
10009f2c:	3fe00000 	.word	0x3fe00000
10009f30:	10015878 	.word	0x10015878
10009f34:	40e00000 	.word	0x40e00000
10009f38:	10015918 	.word	0x10015918
10009f3c:	10015940 	.word	0x10015940
10009f40:	10015988 	.word	0x10015988
10009f44:	43030000 	.word	0x43030000
10009f48:	100159a0 	.word	0x100159a0
10009f4c:	10011c59 	.word	0x10011c59
10009f50:	100159b0 	.word	0x100159b0
10009f54:	41340000 	.word	0x41340000
10009f58:	10015a18 	.word	0x10015a18
10009f5c:	10015a40 	.word	0x10015a40
10009f60:	49a00000 	.word	0x49a00000
10009f64:	100158a0 	.word	0x100158a0
10009f68:	10015a80 	.word	0x10015a80
	}
	else {
		/* Self Test Pass/Fail Criteria B */
		gyro_st_al_max = test.max_dps * 65536.f;

		if(debug) {
10009f6c:	2b00      	cmp	r3, #0
10009f6e:	d000      	beq.n	10009f72 <mpu_run_6500_self_test+0x6e6>
10009f70:	e19d      	b.n	1000a2ae <mpu_run_6500_self_test+0xa22>

	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
10009f72:	2300      	movs	r3, #0
10009f74:	930f      	str	r3, [sp, #60]	; 0x3c
10009f76:	4be8      	ldr	r3, [pc, #928]	; (1000a318 <mpu_run_6500_self_test+0xa8c>)
10009f78:	2500      	movs	r5, #0
10009f7a:	9307      	str	r3, [sp, #28]
10009f7c:	4be7      	ldr	r3, [pc, #924]	; (1000a31c <mpu_run_6500_self_test+0xa90>)
10009f7e:	2600      	movs	r6, #0
10009f80:	9316      	str	r3, [sp, #88]	; 0x58
10009f82:	4be7      	ldr	r3, [pc, #924]	; (1000a320 <mpu_run_6500_self_test+0xa94>)
10009f84:	4fe7      	ldr	r7, [pc, #924]	; (1000a324 <mpu_run_6500_self_test+0xa98>)
10009f86:	9311      	str	r3, [sp, #68]	; 0x44

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug)
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
10009f88:	4653      	mov	r3, sl
10009f8a:	9314      	str	r3, [sp, #80]	; 0x50
10009f8c:	465b      	mov	r3, fp
10009f8e:	46cb      	mov	fp, r9
10009f90:	4699      	mov	r9, r3
			log_i("GYRO:CRITERIA B\r\n");
			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009f92:	221c      	movs	r2, #28
10009f94:	ab14      	add	r3, sp, #80	; 0x50
10009f96:	189b      	adds	r3, r3, r2
10009f98:	9a04      	ldr	r2, [sp, #16]
10009f9a:	595b      	ldr	r3, [r3, r5]
10009f9c:	5952      	ldr	r2, [r2, r5]
10009f9e:	930c      	str	r3, [sp, #48]	; 0x30
10009fa0:	1a98      	subs	r0, r3, r2
10009fa2:	9b07      	ldr	r3, [sp, #28]
10009fa4:	4692      	mov	sl, r2
10009fa6:	4798      	blx	r3

			if(debug)
10009fa8:	465b      	mov	r3, fp
			log_i("GYRO:CRITERIA B\r\n");
			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
10009faa:	4680      	mov	r8, r0

			if(debug)
10009fac:	2b00      	cmp	r3, #0
10009fae:	d000      	beq.n	10009fb2 <mpu_run_6500_self_test+0x726>
10009fb0:	e11d      	b.n	1000a1ee <mpu_run_6500_self_test+0x962>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
10009fb2:	47b8      	blx	r7
10009fb4:	9b07      	ldr	r3, [sp, #28]
10009fb6:	9012      	str	r0, [sp, #72]	; 0x48
10009fb8:	9113      	str	r1, [sp, #76]	; 0x4c
10009fba:	4650      	mov	r0, sl
10009fbc:	4798      	blx	r3
10009fbe:	47b8      	blx	r7
10009fc0:	9b07      	ldr	r3, [sp, #28]
10009fc2:	9002      	str	r0, [sp, #8]
10009fc4:	9103      	str	r1, [sp, #12]
10009fc6:	980c      	ldr	r0, [sp, #48]	; 0x30
10009fc8:	4798      	blx	r3
10009fca:	47b8      	blx	r7
10009fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009fce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009fd0:	9000      	str	r0, [sp, #0]
10009fd2:	9101      	str	r1, [sp, #4]
10009fd4:	9905      	ldr	r1, [sp, #20]
10009fd6:	9816      	ldr	r0, [sp, #88]	; 0x58
10009fd8:	4788      	blx	r1
			if(st_shift_cust[i] < gyro_st_al_max) {
10009fda:	49d3      	ldr	r1, [pc, #844]	; (1000a328 <mpu_run_6500_self_test+0xa9c>)
10009fdc:	4640      	mov	r0, r8
10009fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009fe0:	4798      	blx	r3
10009fe2:	2800      	cmp	r0, #0
10009fe4:	d008      	beq.n	10009ff8 <mpu_run_6500_self_test+0x76c>
				if(debug)
					log_i("GYRO FAIL axis:%d greater than 60dps\n", i);
10009fe6:	9b05      	ldr	r3, [sp, #20]
10009fe8:	0031      	movs	r1, r6
10009fea:	48d0      	ldr	r0, [pc, #832]	; (1000a32c <mpu_run_6500_self_test+0xaa0>)
10009fec:	4798      	blx	r3
				result |= 1 << i;	//Error condition
10009fee:	2301      	movs	r3, #1
10009ff0:	40b3      	lsls	r3, r6
10009ff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009ff4:	431a      	orrs	r2, r3
10009ff6:	920f      	str	r2, [sp, #60]	; 0x3c
10009ff8:	3504      	adds	r5, #4
		if(debug) {
			log_i("GYRO:CRITERIA B\r\n");
			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
10009ffa:	3601      	adds	r6, #1
10009ffc:	2d0c      	cmp	r5, #12
10009ffe:	d1c8      	bne.n	10009f92 <mpu_run_6500_self_test+0x706>
1000a000:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000a002:	469a      	mov	sl, r3
1000a004:	464b      	mov	r3, r9
1000a006:	46d9      	mov	r9, fp
1000a008:	469b      	mov	fp, r3
1000a00a:	e6fa      	b.n	10009e02 <mpu_run_6500_self_test+0x576>
	else {
		/* Self Test Pass/Fail Criteria B */
		accel_st_al_min = test.min_g * 65536.f;
		accel_st_al_max = test.max_g * 65536.f;

		if(debug) {
1000a00c:	464b      	mov	r3, r9
1000a00e:	2b00      	cmp	r3, #0
1000a010:	d000      	beq.n	1000a014 <mpu_run_6500_self_test+0x788>
1000a012:	e137      	b.n	1000a284 <mpu_run_6500_self_test+0x9f8>
		}
	}
	if(otp_value_zero == 0) {
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
		for (i = 0; i < 3; i++) {
1000a014:	2300      	movs	r3, #0
1000a016:	930f      	str	r3, [sp, #60]	; 0x3c
1000a018:	930c      	str	r3, [sp, #48]	; 0x30
1000a01a:	4bbf      	ldr	r3, [pc, #764]	; (1000a318 <mpu_run_6500_self_test+0xa8c>)
1000a01c:	2600      	movs	r6, #0
1000a01e:	9307      	str	r3, [sp, #28]
1000a020:	4bbe      	ldr	r3, [pc, #760]	; (1000a31c <mpu_run_6500_self_test+0xa90>)
1000a022:	4fc0      	ldr	r7, [pc, #768]	; (1000a324 <mpu_run_6500_self_test+0xa98>)
1000a024:	9316      	str	r3, [sp, #88]	; 0x58
1000a026:	4bbe      	ldr	r3, [pc, #760]	; (1000a320 <mpu_run_6500_self_test+0xa94>)
1000a028:	9311      	str	r3, [sp, #68]	; 0x44
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug)
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
1000a02a:	4653      	mov	r3, sl
1000a02c:	9317      	str	r3, [sp, #92]	; 0x5c
1000a02e:	465b      	mov	r3, fp
1000a030:	46ca      	mov	sl, r9
1000a032:	46ab      	mov	fp, r5
1000a034:	46b9      	mov	r9, r7
1000a036:	0035      	movs	r5, r6
1000a038:	9314      	str	r3, [sp, #80]	; 0x50
			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
1000a03a:	2228      	movs	r2, #40	; 0x28
1000a03c:	ab14      	add	r3, sp, #80	; 0x50
1000a03e:	189b      	adds	r3, r3, r2
1000a040:	465a      	mov	r2, fp
1000a042:	595b      	ldr	r3, [r3, r5]
1000a044:	5952      	ldr	r2, [r2, r5]
1000a046:	9310      	str	r3, [sp, #64]	; 0x40
1000a048:	1a98      	subs	r0, r3, r2
1000a04a:	9212      	str	r2, [sp, #72]	; 0x48
1000a04c:	9b07      	ldr	r3, [sp, #28]
1000a04e:	4798      	blx	r3

			if(debug)
1000a050:	4653      	mov	r3, sl
			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
1000a052:	4680      	mov	r8, r0

			if(debug)
1000a054:	2b00      	cmp	r3, #0
1000a056:	d16d      	bne.n	1000a134 <mpu_run_6500_self_test+0x8a8>
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
1000a058:	47c8      	blx	r9
1000a05a:	9b07      	ldr	r3, [sp, #28]
1000a05c:	0006      	movs	r6, r0
1000a05e:	9812      	ldr	r0, [sp, #72]	; 0x48
1000a060:	000f      	movs	r7, r1
1000a062:	4798      	blx	r3
1000a064:	47c8      	blx	r9
1000a066:	9b07      	ldr	r3, [sp, #28]
1000a068:	9002      	str	r0, [sp, #8]
1000a06a:	9103      	str	r1, [sp, #12]
1000a06c:	9810      	ldr	r0, [sp, #64]	; 0x40
1000a06e:	4798      	blx	r3
1000a070:	47c8      	blx	r9
1000a072:	003b      	movs	r3, r7
1000a074:	9000      	str	r0, [sp, #0]
1000a076:	9101      	str	r1, [sp, #4]
1000a078:	0032      	movs	r2, r6
1000a07a:	9905      	ldr	r1, [sp, #20]
1000a07c:	9816      	ldr	r0, [sp, #88]	; 0x58
1000a07e:	4788      	blx	r1
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
1000a080:	49ab      	ldr	r1, [pc, #684]	; (1000a330 <mpu_run_6500_self_test+0xaa4>)
1000a082:	4640      	mov	r0, r8
1000a084:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a086:	4798      	blx	r3
1000a088:	2800      	cmp	r0, #0
1000a08a:	d100      	bne.n	1000a08e <mpu_run_6500_self_test+0x802>
1000a08c:	e13c      	b.n	1000a308 <mpu_run_6500_self_test+0xa7c>
				if(debug)
					log_i("Accel FAIL axis:%d <= 225mg or >= 675mg\n", i);
1000a08e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000a090:	9b05      	ldr	r3, [sp, #20]
1000a092:	0031      	movs	r1, r6
1000a094:	48a7      	ldr	r0, [pc, #668]	; (1000a334 <mpu_run_6500_self_test+0xaa8>)
1000a096:	4798      	blx	r3
				result |= 1 << i;	//Error condition
1000a098:	2301      	movs	r3, #1
1000a09a:	40b3      	lsls	r3, r6
1000a09c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000a09e:	431a      	orrs	r2, r3
1000a0a0:	920f      	str	r2, [sp, #60]	; 0x3c
			log_i("ACCEL:CRITERIA B\r\n");
			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
		}

		for (i = 0; i < 3; i++) {
1000a0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a0a4:	3504      	adds	r5, #4
1000a0a6:	3301      	adds	r3, #1
1000a0a8:	930c      	str	r3, [sp, #48]	; 0x30
1000a0aa:	2d0c      	cmp	r5, #12
1000a0ac:	d1c5      	bne.n	1000a03a <mpu_run_6500_self_test+0x7ae>
1000a0ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000a0b0:	46d1      	mov	r9, sl
1000a0b2:	469a      	mov	sl, r3
1000a0b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000a0b6:	465d      	mov	r5, fp
1000a0b8:	469b      	mov	fp, r3
1000a0ba:	e5e1      	b.n	10009c80 <mpu_run_6500_self_test+0x3f4>
	/* Self Test Pass/Fail Criteria C */
		gyro_offset_max = test.min_dps * 65536.f;
		if(debug)
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > gyro_offset_max) {
1000a0bc:	4270      	negs	r0, r6
1000a0be:	9b07      	ldr	r3, [sp, #28]
1000a0c0:	4798      	blx	r3
1000a0c2:	e6b8      	b.n	10009e36 <mpu_run_6500_self_test+0x5aa>
	/* Self Test Pass/Fail Criteria C */
		accel_offset_max = test.max_g_offset * 65536.f;
		if(debug)
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > accel_offset_max) {
1000a0c4:	4278      	negs	r0, r7
1000a0c6:	9b07      	ldr	r3, [sp, #28]
1000a0c8:	4798      	blx	r3
1000a0ca:	e5f2      	b.n	10009cb2 <mpu_run_6500_self_test+0x426>
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];
			if(debug) {
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
1000a0cc:	4b9a      	ldr	r3, [pc, #616]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a0ce:	0018      	movs	r0, r3
1000a0d0:	9311      	str	r3, [sp, #68]	; 0x44
1000a0d2:	47d8      	blx	fp
1000a0d4:	1c38      	adds	r0, r7, #0
1000a0d6:	47c0      	blx	r8
1000a0d8:	2228      	movs	r2, #40	; 0x28
1000a0da:	9014      	str	r0, [sp, #80]	; 0x50
1000a0dc:	9115      	str	r1, [sp, #84]	; 0x54
1000a0de:	a914      	add	r1, sp, #80	; 0x50
1000a0e0:	1889      	adds	r1, r1, r2
1000a0e2:	5988      	ldr	r0, [r1, r6]
1000a0e4:	9b07      	ldr	r3, [sp, #28]
1000a0e6:	4798      	blx	r3
1000a0e8:	47c0      	blx	r8
1000a0ea:	9002      	str	r0, [sp, #8]
1000a0ec:	9103      	str	r1, [sp, #12]
1000a0ee:	9b07      	ldr	r3, [sp, #28]
1000a0f0:	59a8      	ldr	r0, [r5, r6]
1000a0f2:	4798      	blx	r3
1000a0f4:	47c0      	blx	r8
1000a0f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000a0f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000a0fa:	9000      	str	r0, [sp, #0]
1000a0fc:	9101      	str	r1, [sp, #4]
1000a0fe:	9905      	ldr	r1, [sp, #20]
1000a100:	488e      	ldr	r0, [pc, #568]	; (1000a33c <mpu_run_6500_self_test+0xab0>)
1000a102:	4788      	blx	r1
						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
						bias_st[i]/1.f);
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
1000a104:	9811      	ldr	r0, [sp, #68]	; 0x44
1000a106:	47d8      	blx	fp
1000a108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a10a:	5992      	ldr	r2, [r2, r6]
1000a10c:	9214      	str	r2, [sp, #80]	; 0x50
1000a10e:	1c10      	adds	r0, r2, #0
1000a110:	47c0      	blx	r8
1000a112:	000b      	movs	r3, r1
1000a114:	0002      	movs	r2, r0
1000a116:	9905      	ldr	r1, [sp, #20]
1000a118:	4889      	ldr	r0, [pc, #548]	; (1000a340 <mpu_run_6500_self_test+0xab4>)
1000a11a:	4788      	blx	r1
			}

			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i] - 1.f;
1000a11c:	9914      	ldr	r1, [sp, #80]	; 0x50
1000a11e:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a120:	1c38      	adds	r0, r7, #0
1000a122:	4790      	blx	r2
1000a124:	21fe      	movs	r1, #254	; 0xfe
1000a126:	4a87      	ldr	r2, [pc, #540]	; (1000a344 <mpu_run_6500_self_test+0xab8>)
1000a128:	0589      	lsls	r1, r1, #22
1000a12a:	4790      	blx	r2
1000a12c:	1c07      	adds	r7, r0, #0

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
1000a12e:	9811      	ldr	r0, [sp, #68]	; 0x44
1000a130:	47d8      	blx	fp
1000a132:	e578      	b.n	10009c26 <mpu_run_6500_self_test+0x39a>

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug)
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
1000a134:	4b80      	ldr	r3, [pc, #512]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a136:	9310      	str	r3, [sp, #64]	; 0x40
1000a138:	0018      	movs	r0, r3
1000a13a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000a13c:	4798      	blx	r3
1000a13e:	4640      	mov	r0, r8
1000a140:	47c8      	blx	r9
1000a142:	465b      	mov	r3, fp
1000a144:	0006      	movs	r6, r0
1000a146:	5958      	ldr	r0, [r3, r5]
1000a148:	9b07      	ldr	r3, [sp, #28]
1000a14a:	000f      	movs	r7, r1
1000a14c:	4798      	blx	r3
1000a14e:	47c8      	blx	r9
1000a150:	9002      	str	r0, [sp, #8]
1000a152:	9103      	str	r1, [sp, #12]
1000a154:	2128      	movs	r1, #40	; 0x28
1000a156:	aa14      	add	r2, sp, #80	; 0x50
1000a158:	1852      	adds	r2, r2, r1
1000a15a:	5950      	ldr	r0, [r2, r5]
1000a15c:	9b07      	ldr	r3, [sp, #28]
1000a15e:	4798      	blx	r3
1000a160:	47c8      	blx	r9
1000a162:	003b      	movs	r3, r7
1000a164:	9000      	str	r0, [sp, #0]
1000a166:	9101      	str	r1, [sp, #4]
1000a168:	0032      	movs	r2, r6
1000a16a:	9905      	ldr	r1, [sp, #20]
1000a16c:	9816      	ldr	r0, [sp, #88]	; 0x58
1000a16e:	4788      	blx	r1
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
1000a170:	496f      	ldr	r1, [pc, #444]	; (1000a330 <mpu_run_6500_self_test+0xaa4>)
1000a172:	4640      	mov	r0, r8
1000a174:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a176:	4798      	blx	r3
1000a178:	2800      	cmp	r0, #0
1000a17a:	d105      	bne.n	1000a188 <mpu_run_6500_self_test+0x8fc>
1000a17c:	4b72      	ldr	r3, [pc, #456]	; (1000a348 <mpu_run_6500_self_test+0xabc>)
1000a17e:	4973      	ldr	r1, [pc, #460]	; (1000a34c <mpu_run_6500_self_test+0xac0>)
1000a180:	4640      	mov	r0, r8
1000a182:	4798      	blx	r3
1000a184:	2800      	cmp	r0, #0
1000a186:	d08c      	beq.n	1000a0a2 <mpu_run_6500_self_test+0x816>
				if(debug)
					log_i("Accel FAIL axis:%d <= 225mg or >= 675mg\n", i);
1000a188:	9810      	ldr	r0, [sp, #64]	; 0x40
1000a18a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000a18c:	4798      	blx	r3
1000a18e:	e77e      	b.n	1000a08e <mpu_run_6500_self_test+0x802>
		/* Self Test Pass/Fail Criteria A */
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug) {
				log_i("Bias_Shift=%7.4f, Bias_Reg=%7.4f, Bias_HWST=%7.4f\r\n",
1000a190:	4869      	ldr	r0, [pc, #420]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a192:	47d8      	blx	fp
1000a194:	1c30      	adds	r0, r6, #0
1000a196:	47c0      	blx	r8
1000a198:	9014      	str	r0, [sp, #80]	; 0x50
1000a19a:	9115      	str	r1, [sp, #84]	; 0x54
1000a19c:	211c      	movs	r1, #28
1000a19e:	ab14      	add	r3, sp, #80	; 0x50
1000a1a0:	185b      	adds	r3, r3, r1
1000a1a2:	5958      	ldr	r0, [r3, r5]
1000a1a4:	9b07      	ldr	r3, [sp, #28]
1000a1a6:	4798      	blx	r3
1000a1a8:	47c0      	blx	r8
1000a1aa:	9002      	str	r0, [sp, #8]
1000a1ac:	9103      	str	r1, [sp, #12]
1000a1ae:	9904      	ldr	r1, [sp, #16]
1000a1b0:	9b07      	ldr	r3, [sp, #28]
1000a1b2:	5948      	ldr	r0, [r1, r5]
1000a1b4:	4798      	blx	r3
1000a1b6:	47c0      	blx	r8
1000a1b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000a1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000a1bc:	9000      	str	r0, [sp, #0]
1000a1be:	9101      	str	r1, [sp, #4]
1000a1c0:	9905      	ldr	r1, [sp, #20]
1000a1c2:	485e      	ldr	r0, [pc, #376]	; (1000a33c <mpu_run_6500_self_test+0xab0>)
1000a1c4:	4788      	blx	r1
						st_shift_cust[i]/1.f, bias_regular[i]/1.f,
						bias_st[i]/1.f);
				log_i("OTP value: %7.4f\r\n", ct_shift_prod[i]/1.f);
1000a1c6:	485c      	ldr	r0, [pc, #368]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a1c8:	47d8      	blx	fp
1000a1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a1cc:	595b      	ldr	r3, [r3, r5]
1000a1ce:	9314      	str	r3, [sp, #80]	; 0x50
1000a1d0:	1c18      	adds	r0, r3, #0
1000a1d2:	47c0      	blx	r8
1000a1d4:	0002      	movs	r2, r0
1000a1d6:	000b      	movs	r3, r1
1000a1d8:	4859      	ldr	r0, [pc, #356]	; (1000a340 <mpu_run_6500_self_test+0xab4>)
1000a1da:	9905      	ldr	r1, [sp, #20]
1000a1dc:	4788      	blx	r1
			}

			st_shift_ratio[i] = st_shift_cust[i] / ct_shift_prod[i];
1000a1de:	9914      	ldr	r1, [sp, #80]	; 0x50
1000a1e0:	1c30      	adds	r0, r6, #0
1000a1e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1000a1e4:	4798      	blx	r3
1000a1e6:	1c06      	adds	r6, r0, #0

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
1000a1e8:	4853      	ldr	r0, [pc, #332]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a1ea:	47d8      	blx	fp
1000a1ec:	e5df      	b.n	10009dae <mpu_run_6500_self_test+0x522>

		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug)
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
1000a1ee:	4852      	ldr	r0, [pc, #328]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a1f0:	47c8      	blx	r9
1000a1f2:	4640      	mov	r0, r8
1000a1f4:	47b8      	blx	r7
1000a1f6:	9b04      	ldr	r3, [sp, #16]
1000a1f8:	900c      	str	r0, [sp, #48]	; 0x30
1000a1fa:	910d      	str	r1, [sp, #52]	; 0x34
1000a1fc:	5958      	ldr	r0, [r3, r5]
1000a1fe:	9b07      	ldr	r3, [sp, #28]
1000a200:	4798      	blx	r3
1000a202:	47b8      	blx	r7
1000a204:	221c      	movs	r2, #28
1000a206:	9002      	str	r0, [sp, #8]
1000a208:	9103      	str	r1, [sp, #12]
1000a20a:	a914      	add	r1, sp, #80	; 0x50
1000a20c:	1889      	adds	r1, r1, r2
1000a20e:	5948      	ldr	r0, [r1, r5]
1000a210:	9b07      	ldr	r3, [sp, #28]
1000a212:	4798      	blx	r3
1000a214:	47b8      	blx	r7
1000a216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000a218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a21a:	9000      	str	r0, [sp, #0]
1000a21c:	9101      	str	r1, [sp, #4]
1000a21e:	9905      	ldr	r1, [sp, #20]
1000a220:	9816      	ldr	r0, [sp, #88]	; 0x58
1000a222:	4788      	blx	r1
			if(st_shift_cust[i] < gyro_st_al_max) {
1000a224:	4940      	ldr	r1, [pc, #256]	; (1000a328 <mpu_run_6500_self_test+0xa9c>)
1000a226:	4640      	mov	r0, r8
1000a228:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a22a:	4798      	blx	r3
1000a22c:	2800      	cmp	r0, #0
1000a22e:	d100      	bne.n	1000a232 <mpu_run_6500_self_test+0x9a6>
1000a230:	e6e2      	b.n	10009ff8 <mpu_run_6500_self_test+0x76c>
				if(debug)
					log_i("GYRO FAIL axis:%d greater than 60dps\n", i);
1000a232:	4841      	ldr	r0, [pc, #260]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a234:	47c8      	blx	r9
1000a236:	e6d6      	b.n	10009fe6 <mpu_run_6500_self_test+0x75a>
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
        return 0x07;
    tmp[0] = AKM_BIT_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
        goto AKM_restore;
    tmp[0] = AKM_MODE_SELF_TEST;
1000a238:	2318      	movs	r3, #24
1000a23a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
1000a23c:	2201      	movs	r2, #1
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
        return 0x07;
    tmp[0] = AKM_BIT_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
        goto AKM_restore;
    tmp[0] = AKM_MODE_SELF_TEST;
1000a23e:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
1000a240:	5de0      	ldrb	r0, [r4, r7]
1000a242:	002b      	movs	r3, r5
1000a244:	210a      	movs	r1, #10
1000a246:	47b0      	blx	r6
1000a248:	2800      	cmp	r0, #0
1000a24a:	d000      	beq.n	1000a24e <mpu_run_6500_self_test+0x9c2>
1000a24c:	e62b      	b.n	10009ea6 <mpu_run_6500_self_test+0x61a>
        goto AKM_restore;

    do {
        delay_ms(10);
        if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 1, tmp))
1000a24e:	232a      	movs	r3, #42	; 0x2a
        return 0x07;
    tmp[0] = AKM_BIT_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_ASTC, 1, tmp))
        goto AKM_restore;
    tmp[0] = AKM_MODE_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
1000a250:	270b      	movs	r7, #11
        goto AKM_restore;

    do {
        delay_ms(10);
        if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 1, tmp))
1000a252:	4699      	mov	r9, r3
1000a254:	9507      	str	r5, [sp, #28]
    tmp[0] = AKM_MODE_SELF_TEST;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp))
        goto AKM_restore;

    do {
        delay_ms(10);
1000a256:	200a      	movs	r0, #10
1000a258:	4b3d      	ldr	r3, [pc, #244]	; (1000a350 <mpu_run_6500_self_test+0xac4>)
1000a25a:	4798      	blx	r3
        if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ST1, 1, tmp))
1000a25c:	464b      	mov	r3, r9
1000a25e:	2201      	movs	r2, #1
1000a260:	5ce0      	ldrb	r0, [r4, r3]
1000a262:	2102      	movs	r1, #2
1000a264:	9b07      	ldr	r3, [sp, #28]
1000a266:	4d3b      	ldr	r5, [pc, #236]	; (1000a354 <mpu_run_6500_self_test+0xac8>)
1000a268:	47a8      	blx	r5
1000a26a:	2800      	cmp	r0, #0
1000a26c:	d000      	beq.n	1000a270 <mpu_run_6500_self_test+0x9e4>
1000a26e:	e61a      	b.n	10009ea6 <mpu_run_6500_self_test+0x61a>
            goto AKM_restore;
        if (tmp[0] & AKM_DATA_READY)
1000a270:	9b07      	ldr	r3, [sp, #28]
1000a272:	781b      	ldrb	r3, [r3, #0]
1000a274:	07db      	lsls	r3, r3, #31
1000a276:	d500      	bpl.n	1000a27a <mpu_run_6500_self_test+0x9ee>
1000a278:	e09e      	b.n	1000a3b8 <mpu_run_6500_self_test+0xb2c>
1000a27a:	3f01      	subs	r7, #1
1000a27c:	b2ff      	uxtb	r7, r7
            break;
    } while (tries--);
1000a27e:	2f00      	cmp	r7, #0
1000a280:	d1e9      	bne.n	1000a256 <mpu_run_6500_self_test+0x9ca>
1000a282:	e610      	b.n	10009ea6 <mpu_run_6500_self_test+0x61a>
		/* Self Test Pass/Fail Criteria B */
		accel_st_al_min = test.min_g * 65536.f;
		accel_st_al_max = test.max_g * 65536.f;

		if(debug) {
			log_i("ACCEL:CRITERIA B\r\n");
1000a284:	4e2c      	ldr	r6, [pc, #176]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a286:	0030      	movs	r0, r6
1000a288:	47d8      	blx	fp
1000a28a:	4833      	ldr	r0, [pc, #204]	; (1000a358 <mpu_run_6500_self_test+0xacc>)
1000a28c:	47d8      	blx	fp
			log_i("Min MG: %7.4f\r\n", accel_st_al_min/1.f);
1000a28e:	0030      	movs	r0, r6
1000a290:	47d8      	blx	fp
1000a292:	22c0      	movs	r2, #192	; 0xc0
1000a294:	4b31      	ldr	r3, [pc, #196]	; (1000a35c <mpu_run_6500_self_test+0xad0>)
1000a296:	0612      	lsls	r2, r2, #24
1000a298:	9f05      	ldr	r7, [sp, #20]
1000a29a:	4831      	ldr	r0, [pc, #196]	; (1000a360 <mpu_run_6500_self_test+0xad4>)
1000a29c:	47b8      	blx	r7
			log_i("Max MG: %7.4f\r\n", accel_st_al_max/1.f);
1000a29e:	0030      	movs	r0, r6
1000a2a0:	47d8      	blx	fp
1000a2a2:	22a0      	movs	r2, #160	; 0xa0
1000a2a4:	4b2f      	ldr	r3, [pc, #188]	; (1000a364 <mpu_run_6500_self_test+0xad8>)
1000a2a6:	0612      	lsls	r2, r2, #24
1000a2a8:	482f      	ldr	r0, [pc, #188]	; (1000a368 <mpu_run_6500_self_test+0xadc>)
1000a2aa:	47b8      	blx	r7
1000a2ac:	e6b2      	b.n	1000a014 <mpu_run_6500_self_test+0x788>
	else {
		/* Self Test Pass/Fail Criteria B */
		gyro_st_al_max = test.max_dps * 65536.f;

		if(debug) {
			log_i("GYRO:CRITERIA B\r\n");
1000a2ae:	4e22      	ldr	r6, [pc, #136]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a2b0:	0030      	movs	r0, r6
1000a2b2:	47d8      	blx	fp
1000a2b4:	482d      	ldr	r0, [pc, #180]	; (1000a36c <mpu_run_6500_self_test+0xae0>)
1000a2b6:	47d8      	blx	fp
			log_i("Max DPS: %7.4f\r\n", gyro_st_al_max/1.f);
1000a2b8:	0030      	movs	r0, r6
1000a2ba:	47d8      	blx	fp
1000a2bc:	2200      	movs	r2, #0
1000a2be:	4b2c      	ldr	r3, [pc, #176]	; (1000a370 <mpu_run_6500_self_test+0xae4>)
1000a2c0:	9905      	ldr	r1, [sp, #20]
1000a2c2:	482c      	ldr	r0, [pc, #176]	; (1000a374 <mpu_run_6500_self_test+0xae8>)
1000a2c4:	4788      	blx	r1
1000a2c6:	e654      	b.n	10009f72 <mpu_run_6500_self_test+0x6e6>
			otp_value_zero = 1;
		}
	}
	if(otp_value_zero == 0) {
		if(debug)
			log_i("ACCEL:CRITERIA A\n");
1000a2c8:	4e1b      	ldr	r6, [pc, #108]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a2ca:	0030      	movs	r0, r6
1000a2cc:	47d8      	blx	fp
1000a2ce:	e482      	b.n	10009bd6 <mpu_run_6500_self_test+0x34a>
		}
	}

	if(otp_value_zero == 0) {
		if(debug)
			log_i("GYRO:CRITERIA A\n");
1000a2d0:	4e19      	ldr	r6, [pc, #100]	; (1000a338 <mpu_run_6500_self_test+0xaac>)
1000a2d2:	0030      	movs	r0, r6
1000a2d4:	47d8      	blx	fp
1000a2d6:	e53f      	b.n	10009d58 <mpu_run_6500_self_test+0x4cc>

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
							test.max_gyro_var/1.f);

			if (fabs(st_shift_ratio[i]) < test.max_gyro_var) {
1000a2d8:	2380      	movs	r3, #128	; 0x80
1000a2da:	061b      	lsls	r3, r3, #24
1000a2dc:	469c      	mov	ip, r3
1000a2de:	4466      	add	r6, ip
1000a2e0:	e577      	b.n	10009dd2 <mpu_run_6500_self_test+0x546>

			if(debug)
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
							test.max_accel_var/1.f);

			if (fabs(st_shift_ratio[i]) > test.max_accel_var) {
1000a2e2:	2380      	movs	r3, #128	; 0x80
1000a2e4:	061b      	lsls	r3, r3, #24
1000a2e6:	469c      	mov	ip, r3
1000a2e8:	4467      	add	r7, ip
1000a2ea:	e4ae      	b.n	10009c4a <mpu_run_6500_self_test+0x3be>
1000a2ec:	27ff      	movs	r7, #255	; 0xff
1000a2ee:	b2dd      	uxtb	r5, r3
1000a2f0:	401f      	ands	r7, r3
				result |= 1 << i;	//Error condition
			}
		}
	}

	if(result == 0) {
1000a2f2:	426a      	negs	r2, r5
1000a2f4:	416a      	adcs	r2, r5
1000a2f6:	9204      	str	r2, [sp, #16]
1000a2f8:	f7ff fba7 	bl	10009a4a <mpu_run_6500_self_test+0x1be>
1000a2fc:	25ff      	movs	r5, #255	; 0xff
1000a2fe:	401d      	ands	r5, r3
1000a300:	b2db      	uxtb	r3, r3
1000a302:	9310      	str	r3, [sp, #64]	; 0x40
1000a304:	f7ff fb87 	bl	10009a16 <mpu_run_6500_self_test+0x18a>
		for (i = 0; i < 3; i++) {
			st_shift_cust[i] = bias_st[i] - bias_regular[i];

			if(debug)
				log_i("Bias_shift=%7.4f, st=%7.4f, reg=%7.4f\n", st_shift_cust[i]/1.f, bias_st[i]/1.f, bias_regular[i]/1.f);
			if(st_shift_cust[i] < accel_st_al_min || st_shift_cust[i] > accel_st_al_max) {
1000a308:	4910      	ldr	r1, [pc, #64]	; (1000a34c <mpu_run_6500_self_test+0xac0>)
1000a30a:	4640      	mov	r0, r8
1000a30c:	4b0e      	ldr	r3, [pc, #56]	; (1000a348 <mpu_run_6500_self_test+0xabc>)
1000a30e:	4798      	blx	r3
1000a310:	2800      	cmp	r0, #0
1000a312:	d100      	bne.n	1000a316 <mpu_run_6500_self_test+0xa8a>
1000a314:	e6c5      	b.n	1000a0a2 <mpu_run_6500_self_test+0x816>
1000a316:	e6ba      	b.n	1000a08e <mpu_run_6500_self_test+0x802>
1000a318:	10012a15 	.word	0x10012a15
1000a31c:	100158c4 	.word	0x100158c4
1000a320:	10011c59 	.word	0x10011c59
1000a324:	10013fe1 	.word	0x10013fe1
1000a328:	4a700000 	.word	0x4a700000
1000a32c:	100159f0 	.word	0x100159f0
1000a330:	46666666 	.word	0x46666666
1000a334:	100158ec 	.word	0x100158ec
1000a338:	100158a0 	.word	0x100158a0
1000a33c:	10015810 	.word	0x10015810
1000a340:	10015844 	.word	0x10015844
1000a344:	10012695 	.word	0x10012695
1000a348:	10011c81 	.word	0x10011c81
1000a34c:	472ccccd 	.word	0x472ccccd
1000a350:	1000810d 	.word	0x1000810d
1000a354:	100082b9 	.word	0x100082b9
1000a358:	10015890 	.word	0x10015890
1000a35c:	40cccccc 	.word	0x40cccccc
1000a360:	100158a4 	.word	0x100158a4
1000a364:	40e59999 	.word	0x40e59999
1000a368:	100158b4 	.word	0x100158b4
1000a36c:	100159c8 	.word	0x100159c8
1000a370:	414e0000 	.word	0x414e0000
1000a374:	100159dc 	.word	0x100159dc
    		log_i("Reading OTP Register Error.\n");
        return 0x07;
    }

    if(debug)
    	log_i("Gyro OTP:%d, %d, %d\r\n", regs[0], regs[1], regs[2]);
1000a378:	4e33      	ldr	r6, [pc, #204]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a37a:	0030      	movs	r0, r6
1000a37c:	47d8      	blx	fp
1000a37e:	e4be      	b.n	10009cfe <mpu_run_6500_self_test+0x472>
    	if(debug)
    		log_i("Reading OTP Register Error.\n");
    	return 0x07;
    }
    if(debug)
    	log_i("Accel OTP:%d, %d, %d\n", regs[0], regs[1], regs[2]);
1000a380:	4e31      	ldr	r6, [pc, #196]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a382:	0030      	movs	r0, r6
1000a384:	47d8      	blx	fp
1000a386:	f7ff fbf4 	bl	10009b72 <mpu_run_6500_self_test+0x2e6>
		if(debug)
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > accel_offset_max) {
				if(debug)
					log_i("FAILED: Accel axis:%d = %ld > 500mg\n", i, bias_regular[i]);
1000a38a:	482f      	ldr	r0, [pc, #188]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a38c:	47d8      	blx	fp
1000a38e:	682f      	ldr	r7, [r5, #0]
1000a390:	e499      	b.n	10009cc6 <mpu_run_6500_self_test+0x43a>
		if(debug)
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
		for (i = 0; i < 3; i++) {
			if(fabs(bias_regular[i]) > gyro_offset_max) {
				if(debug)
					log_i("FAILED: Gyro axis:%d = %ld > 20dps\n", i, bias_regular[i]);
1000a392:	482d      	ldr	r0, [pc, #180]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a394:	47d8      	blx	fp
1000a396:	683e      	ldr	r6, [r7, #0]
1000a398:	e556      	b.n	10009e48 <mpu_run_6500_self_test+0x5bc>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
							test.max_accel_var/1.f);

			if (fabs(st_shift_ratio[i]) > test.max_accel_var) {
				if(debug)
					log_i("ACCEL Fail Axis = %d\n", i);
1000a39a:	4b2b      	ldr	r3, [pc, #172]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a39c:	0018      	movs	r0, r3
1000a39e:	47d8      	blx	fp
1000a3a0:	e45e      	b.n	10009c60 <mpu_run_6500_self_test+0x3d4>
				log_i("ratio=%7.4f, threshold=%7.4f\r\n", st_shift_ratio[i]/1.f,
							test.max_gyro_var/1.f);

			if (fabs(st_shift_ratio[i]) < test.max_gyro_var) {
				if(debug)
					log_i("Gyro Fail Axis = %d\n", i);
1000a3a2:	4829      	ldr	r0, [pc, #164]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a3a4:	47d8      	blx	fp
1000a3a6:	e51f      	b.n	10009de8 <mpu_run_6500_self_test+0x55c>

	if(result == 0) {
	/* Self Test Pass/Fail Criteria C */
		accel_offset_max = test.max_g_offset * 65536.f;
		if(debug)
			log_i("Accel:CRITERIA C: bias less than %7.4f\n", accel_offset_max/1.f);
1000a3a8:	4e27      	ldr	r6, [pc, #156]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a3aa:	0030      	movs	r0, r6
1000a3ac:	47d8      	blx	fp
1000a3ae:	e46f      	b.n	10009c90 <mpu_run_6500_self_test+0x404>

	if(result == 0) {
	/* Self Test Pass/Fail Criteria C */
		gyro_offset_max = test.min_dps * 65536.f;
		if(debug)
			log_i("Gyro:CRITERIA C: bias less than %7.4f\n", gyro_offset_max/1.f);
1000a3b0:	4e25      	ldr	r6, [pc, #148]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a3b2:	0030      	movs	r0, r6
1000a3b4:	47d8      	blx	fp
1000a3b6:	e52c      	b.n	10009e12 <mpu_run_6500_self_test+0x586>
            break;
    } while (tries--);
    if (!(tmp[0] & AKM_DATA_READY))
        goto AKM_restore;

    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_HXL, 6, tmp))
1000a3b8:	232a      	movs	r3, #42	; 0x2a
1000a3ba:	2206      	movs	r2, #6
1000a3bc:	5ce0      	ldrb	r0, [r4, r3]
1000a3be:	2103      	movs	r1, #3
1000a3c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a3c2:	4d22      	ldr	r5, [pc, #136]	; (1000a44c <mpu_run_6500_self_test+0xbc0>)
1000a3c4:	47a8      	blx	r5
1000a3c6:	2800      	cmp	r0, #0
1000a3c8:	d000      	beq.n	1000a3cc <mpu_run_6500_self_test+0xb40>
1000a3ca:	e56c      	b.n	10009ea6 <mpu_run_6500_self_test+0x61a>
        goto AKM_restore;

    result = 0;
1000a3cc:	22c8      	movs	r2, #200	; 0xc8
1000a3ce:	990e      	ldr	r1, [sp, #56]	; 0x38
1000a3d0:	0052      	lsls	r2, r2, #1
1000a3d2:	784f      	ldrb	r7, [r1, #1]
1000a3d4:	023b      	lsls	r3, r7, #8
1000a3d6:	780f      	ldrb	r7, [r1, #0]
1000a3d8:	431f      	orrs	r7, r3
1000a3da:	37c8      	adds	r7, #200	; 0xc8
1000a3dc:	b2bf      	uxth	r7, r7
1000a3de:	42ba      	cmp	r2, r7
1000a3e0:	41bf      	sbcs	r7, r7
#elif defined MPU9250
    data = (short)(tmp[1] << 8) | tmp[0];
    if ((data > 200) || (data < -200))  
        result |= 0x01;
    data = (short)(tmp[3] << 8) | tmp[2];
    if ((data > 200) || (data < -200))  
1000a3e2:	78cb      	ldrb	r3, [r1, #3]
1000a3e4:	7889      	ldrb	r1, [r1, #2]
1000a3e6:	021b      	lsls	r3, r3, #8
1000a3e8:	430b      	orrs	r3, r1
1000a3ea:	33c8      	adds	r3, #200	; 0xc8
1000a3ec:	b29b      	uxth	r3, r3
        goto AKM_restore;

    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_HXL, 6, tmp))
        goto AKM_restore;

    result = 0;
1000a3ee:	427f      	negs	r7, r7
#elif defined MPU9250
    data = (short)(tmp[1] << 8) | tmp[0];
    if ((data > 200) || (data < -200))  
        result |= 0x01;
    data = (short)(tmp[3] << 8) | tmp[2];
    if ((data > 200) || (data < -200))  
1000a3f0:	4293      	cmp	r3, r2
1000a3f2:	d901      	bls.n	1000a3f8 <mpu_run_6500_self_test+0xb6c>
        result |= 0x02;
1000a3f4:	2302      	movs	r3, #2
1000a3f6:	431f      	orrs	r7, r3
    data = (short)(tmp[5] << 8) | tmp[4];
    if ((data > -800) || (data < -3200))  
1000a3f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a3fa:	7953      	ldrb	r3, [r2, #5]
1000a3fc:	7912      	ldrb	r2, [r2, #4]
1000a3fe:	021b      	lsls	r3, r3, #8
1000a400:	4313      	orrs	r3, r2
1000a402:	22c8      	movs	r2, #200	; 0xc8
1000a404:	0112      	lsls	r2, r2, #4
1000a406:	4694      	mov	ip, r2
1000a408:	2296      	movs	r2, #150	; 0x96
1000a40a:	4463      	add	r3, ip
1000a40c:	b29b      	uxth	r3, r3
1000a40e:	0112      	lsls	r2, r2, #4
1000a410:	4293      	cmp	r3, r2
1000a412:	d901      	bls.n	1000a418 <mpu_run_6500_self_test+0xb8c>
        result |= 0x04;
1000a414:	2304      	movs	r3, #4
1000a416:	431f      	orrs	r7, r3
1000a418:	b2fb      	uxtb	r3, r7
1000a41a:	9307      	str	r3, [sp, #28]
1000a41c:	970c      	str	r7, [sp, #48]	; 0x30
1000a41e:	e545      	b.n	10009eac <mpu_run_6500_self_test+0x620>
        result |= 0x02;

#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if(debug)
    	log_i("Compass Self Test Results: %d\n", compass_result);
1000a420:	4e09      	ldr	r6, [pc, #36]	; (1000a448 <mpu_run_6500_self_test+0xbbc>)
1000a422:	0030      	movs	r0, r6
1000a424:	47d8      	blx	fp
1000a426:	2107      	movs	r1, #7
1000a428:	9b05      	ldr	r3, [sp, #20]
1000a42a:	4809      	ldr	r0, [pc, #36]	; (1000a450 <mpu_run_6500_self_test+0xbc4>)
1000a42c:	4798      	blx	r3
1000a42e:	f7ff fad9 	bl	100099e4 <mpu_run_6500_self_test+0x158>
1000a432:	9b05      	ldr	r3, [sp, #20]
1000a434:	990c      	ldr	r1, [sp, #48]	; 0x30
1000a436:	4806      	ldr	r0, [pc, #24]	; (1000a450 <mpu_run_6500_self_test+0xbc4>)
1000a438:	4798      	blx	r3
    if (!compass_result)
1000a43a:	9b07      	ldr	r3, [sp, #28]
1000a43c:	2b00      	cmp	r3, #0
1000a43e:	d100      	bne.n	1000a442 <mpu_run_6500_self_test+0xbb6>
1000a440:	e557      	b.n	10009ef2 <mpu_run_6500_self_test+0x666>
1000a442:	f7ff fa80 	bl	10009946 <mpu_run_6500_self_test+0xba>
1000a446:	46c0      	nop			; (mov r8, r8)
1000a448:	100158a0 	.word	0x100158a0
1000a44c:	100082b9 	.word	0x100082b9
1000a450:	10015a80 	.word	0x10015a80

1000a454 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
1000a454:	4b02      	ldr	r3, [pc, #8]	; (1000a460 <mpu_get_compass_fsr+0xc>)
1000a456:	685b      	ldr	r3, [r3, #4]
1000a458:	899b      	ldrh	r3, [r3, #12]
1000a45a:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
1000a45c:	2000      	movs	r0, #0
1000a45e:	4770      	bx	lr
1000a460:	1001757c 	.word	0x1001757c

1000a464 <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
1000a464:	b500      	push	{lr}
1000a466:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000a468:	2209      	movs	r2, #9
1000a46a:	4906      	ldr	r1, [pc, #24]	; (1000a484 <dmp_enable_gyro_cal.part.1+0x20>)
1000a46c:	a801      	add	r0, sp, #4
1000a46e:	4b06      	ldr	r3, [pc, #24]	; (1000a488 <dmp_enable_gyro_cal.part.1+0x24>)
1000a470:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a472:	2097      	movs	r0, #151	; 0x97
1000a474:	aa01      	add	r2, sp, #4
1000a476:	2109      	movs	r1, #9
1000a478:	4b04      	ldr	r3, [pc, #16]	; (1000a48c <dmp_enable_gyro_cal.part.1+0x28>)
1000a47a:	00c0      	lsls	r0, r0, #3
1000a47c:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
1000a47e:	b005      	add	sp, #20
1000a480:	bd00      	pop	{pc}
1000a482:	46c0      	nop			; (mov r8, r8)
1000a484:	10015cf4 	.word	0x10015cf4
1000a488:	1001443b 	.word	0x1001443b
1000a48c:	1000965d 	.word	0x1000965d

1000a490 <dmp_load_motion_driver_firmware>:
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1000a490:	2280      	movs	r2, #128	; 0x80
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
1000a492:	b510      	push	{r4, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1000a494:	23c8      	movs	r3, #200	; 0xc8
1000a496:	00d2      	lsls	r2, r2, #3
1000a498:	4902      	ldr	r1, [pc, #8]	; (1000a4a4 <dmp_load_motion_driver_firmware+0x14>)
1000a49a:	4c03      	ldr	r4, [pc, #12]	; (1000a4a8 <dmp_load_motion_driver_firmware+0x18>)
1000a49c:	4803      	ldr	r0, [pc, #12]	; (1000a4ac <dmp_load_motion_driver_firmware+0x1c>)
1000a49e:	47a0      	blx	r4
        DMP_SAMPLE_RATE);
}
1000a4a0:	bd10      	pop	{r4, pc}
1000a4a2:	46c0      	nop			; (mov r8, r8)
1000a4a4:	10015d40 	.word	0x10015d40
1000a4a8:	1000971d 	.word	0x1000971d
1000a4ac:	00000bf6 	.word	0x00000bf6

1000a4b0 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1000a4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4b2:	4647      	mov	r7, r8
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000a4b4:	4c3a      	ldr	r4, [pc, #232]	; (1000a5a0 <dmp_set_orientation+0xf0>)
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1000a4b6:	b480      	push	{r7}
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000a4b8:	0021      	movs	r1, r4
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1000a4ba:	b086      	sub	sp, #24
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000a4bc:	4b39      	ldr	r3, [pc, #228]	; (1000a5a4 <dmp_set_orientation+0xf4>)
1000a4be:	af02      	add	r7, sp, #8
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1000a4c0:	0005      	movs	r5, r0
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000a4c2:	310c      	adds	r1, #12
1000a4c4:	2203      	movs	r2, #3
1000a4c6:	0038      	movs	r0, r7
1000a4c8:	4698      	mov	r8, r3
1000a4ca:	4798      	blx	r3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
1000a4cc:	0021      	movs	r1, r4
1000a4ce:	ae03      	add	r6, sp, #12
1000a4d0:	3110      	adds	r1, #16
1000a4d2:	2203      	movs	r2, #3
1000a4d4:	0030      	movs	r0, r6
1000a4d6:	47c0      	blx	r8
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
1000a4d8:	0021      	movs	r1, r4
1000a4da:	2203      	movs	r2, #3
1000a4dc:	3114      	adds	r1, #20
1000a4de:	a804      	add	r0, sp, #16
1000a4e0:	47c0      	blx	r8
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
1000a4e2:	0021      	movs	r1, r4
1000a4e4:	2203      	movs	r2, #3
1000a4e6:	3118      	adds	r1, #24
1000a4e8:	a805      	add	r0, sp, #20
1000a4ea:	47c0      	blx	r8

    gyro_regs[0] = gyro_axes[orient & 3];
1000a4ec:	2103      	movs	r1, #3
1000a4ee:	0008      	movs	r0, r1
1000a4f0:	466a      	mov	r2, sp
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1000a4f2:	466c      	mov	r4, sp
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
1000a4f4:	4028      	ands	r0, r5
1000a4f6:	5c3b      	ldrb	r3, [r7, r0]
1000a4f8:	7013      	strb	r3, [r2, #0]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1000a4fa:	08ea      	lsrs	r2, r5, #3
1000a4fc:	400a      	ands	r2, r1
1000a4fe:	5cbb      	ldrb	r3, [r7, r2]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
1000a500:	5cb2      	ldrb	r2, [r6, r2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1000a502:	7063      	strb	r3, [r4, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
1000a504:	09ab      	lsrs	r3, r5, #6
1000a506:	400b      	ands	r3, r1
1000a508:	5cf9      	ldrb	r1, [r7, r3]
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1000a50a:	5cf3      	ldrb	r3, [r6, r3]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
1000a50c:	70a1      	strb	r1, [r4, #2]
    accel_regs[0] = accel_axes[orient & 3];
1000a50e:	5c31      	ldrb	r1, [r6, r0]
1000a510:	ac01      	add	r4, sp, #4
1000a512:	7021      	strb	r1, [r4, #0]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
1000a514:	7062      	strb	r2, [r4, #1]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1000a516:	2103      	movs	r1, #3
1000a518:	466a      	mov	r2, sp
1000a51a:	4823      	ldr	r0, [pc, #140]	; (1000a5a8 <dmp_set_orientation+0xf8>)
1000a51c:	4e23      	ldr	r6, [pc, #140]	; (1000a5ac <dmp_set_orientation+0xfc>)
    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1000a51e:	70a3      	strb	r3, [r4, #2]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1000a520:	47b0      	blx	r6
1000a522:	2800      	cmp	r0, #0
1000a524:	d138      	bne.n	1000a598 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
1000a526:	0022      	movs	r2, r4
1000a528:	2103      	movs	r1, #3
1000a52a:	4821      	ldr	r0, [pc, #132]	; (1000a5b0 <dmp_set_orientation+0x100>)
1000a52c:	47b0      	blx	r6
1000a52e:	2800      	cmp	r0, #0
1000a530:	d132      	bne.n	1000a598 <dmp_set_orientation+0xe8>
        return -1;

    memcpy(gyro_regs, gyro_sign, 3);
1000a532:	2203      	movs	r2, #3
1000a534:	a904      	add	r1, sp, #16
1000a536:	4668      	mov	r0, sp
1000a538:	47c0      	blx	r8
    memcpy(accel_regs, accel_sign, 3);
1000a53a:	466b      	mov	r3, sp
1000a53c:	8a9b      	ldrh	r3, [r3, #20]
1000a53e:	8023      	strh	r3, [r4, #0]
1000a540:	466b      	mov	r3, sp
1000a542:	7d9b      	ldrb	r3, [r3, #22]
1000a544:	70a3      	strb	r3, [r4, #2]
    if (orient & 4) {
1000a546:	076b      	lsls	r3, r5, #29
1000a548:	d504      	bpl.n	1000a554 <dmp_set_orientation+0xa4>
        gyro_regs[0] |= 1;
1000a54a:	2337      	movs	r3, #55	; 0x37
1000a54c:	466a      	mov	r2, sp
1000a54e:	7013      	strb	r3, [r2, #0]
        accel_regs[0] |= 1;
1000a550:	3b10      	subs	r3, #16
1000a552:	7023      	strb	r3, [r4, #0]
    }
    if (orient & 0x20) {
1000a554:	06ab      	lsls	r3, r5, #26
1000a556:	d504      	bpl.n	1000a562 <dmp_set_orientation+0xb2>
        gyro_regs[1] |= 1;
1000a558:	2357      	movs	r3, #87	; 0x57
1000a55a:	466a      	mov	r2, sp
1000a55c:	7053      	strb	r3, [r2, #1]
        accel_regs[1] |= 1;
1000a55e:	3b10      	subs	r3, #16
1000a560:	7063      	strb	r3, [r4, #1]
    }
    if (orient & 0x100) {
1000a562:	05eb      	lsls	r3, r5, #23
1000a564:	d412      	bmi.n	1000a58c <dmp_set_orientation+0xdc>
        gyro_regs[2] |= 1;
        accel_regs[2] |= 1;
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
1000a566:	2088      	movs	r0, #136	; 0x88
1000a568:	466a      	mov	r2, sp
1000a56a:	2103      	movs	r1, #3
1000a56c:	00c0      	lsls	r0, r0, #3
1000a56e:	47b0      	blx	r6
1000a570:	2800      	cmp	r0, #0
1000a572:	d111      	bne.n	1000a598 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
1000a574:	0022      	movs	r2, r4
1000a576:	2103      	movs	r1, #3
1000a578:	480e      	ldr	r0, [pc, #56]	; (1000a5b4 <dmp_set_orientation+0x104>)
1000a57a:	47b0      	blx	r6
1000a57c:	2800      	cmp	r0, #0
1000a57e:	d10b      	bne.n	1000a598 <dmp_set_orientation+0xe8>
        return -1;
    dmp.orient = orient;
1000a580:	4b0d      	ldr	r3, [pc, #52]	; (1000a5b8 <dmp_set_orientation+0x108>)
1000a582:	811d      	strh	r5, [r3, #8]
    return 0;
}
1000a584:	b006      	add	sp, #24
1000a586:	bc04      	pop	{r2}
1000a588:	4690      	mov	r8, r2
1000a58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (orient & 0x20) {
        gyro_regs[1] |= 1;
        accel_regs[1] |= 1;
    }
    if (orient & 0x100) {
        gyro_regs[2] |= 1;
1000a58c:	2377      	movs	r3, #119	; 0x77
1000a58e:	466a      	mov	r2, sp
1000a590:	7093      	strb	r3, [r2, #2]
        accel_regs[2] |= 1;
1000a592:	3b10      	subs	r3, #16
1000a594:	70a3      	strb	r3, [r4, #2]
1000a596:	e7e6      	b.n	1000a566 <dmp_set_orientation+0xb6>
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        return -1;
1000a598:	2001      	movs	r0, #1
1000a59a:	4240      	negs	r0, r0
1000a59c:	e7f2      	b.n	1000a584 <dmp_set_orientation+0xd4>
1000a59e:	46c0      	nop			; (mov r8, r8)
1000a5a0:	10015cf4 	.word	0x10015cf4
1000a5a4:	1001443b 	.word	0x1001443b
1000a5a8:	00000426 	.word	0x00000426
1000a5ac:	1000965d 	.word	0x1000965d
1000a5b0:	0000042a 	.word	0x0000042a
1000a5b4:	00000431 	.word	0x00000431
1000a5b8:	10017650 	.word	0x10017650

1000a5bc <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1000a5bc:	b530      	push	{r4, r5, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000a5be:	4913      	ldr	r1, [pc, #76]	; (1000a60c <dmp_set_fifo_rate+0x50>)
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
1000a5c0:	b087      	sub	sp, #28
1000a5c2:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000a5c4:	220c      	movs	r2, #12
1000a5c6:	311c      	adds	r1, #28
1000a5c8:	a803      	add	r0, sp, #12
1000a5ca:	4b11      	ldr	r3, [pc, #68]	; (1000a610 <dmp_set_fifo_rate+0x54>)
1000a5cc:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
1000a5ce:	2cc8      	cmp	r4, #200	; 0xc8
1000a5d0:	d819      	bhi.n	1000a606 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
1000a5d2:	0021      	movs	r1, r4
1000a5d4:	4b0f      	ldr	r3, [pc, #60]	; (1000a614 <dmp_set_fifo_rate+0x58>)
1000a5d6:	20c8      	movs	r0, #200	; 0xc8
1000a5d8:	4798      	blx	r3
1000a5da:	3801      	subs	r0, #1
1000a5dc:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000a5de:	aa01      	add	r2, sp, #4
1000a5e0:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(div & 0xFF);
1000a5e2:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
1000a5e4:	2102      	movs	r1, #2
1000a5e6:	480c      	ldr	r0, [pc, #48]	; (1000a618 <dmp_set_fifo_rate+0x5c>)
1000a5e8:	4d0c      	ldr	r5, [pc, #48]	; (1000a61c <dmp_set_fifo_rate+0x60>)
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
1000a5ea:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
1000a5ec:	47a8      	blx	r5
1000a5ee:	2800      	cmp	r0, #0
1000a5f0:	d109      	bne.n	1000a606 <dmp_set_fifo_rate+0x4a>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1000a5f2:	aa03      	add	r2, sp, #12
1000a5f4:	210c      	movs	r1, #12
1000a5f6:	480a      	ldr	r0, [pc, #40]	; (1000a620 <dmp_set_fifo_rate+0x64>)
1000a5f8:	47a8      	blx	r5
1000a5fa:	2800      	cmp	r0, #0
1000a5fc:	d103      	bne.n	1000a606 <dmp_set_fifo_rate+0x4a>
        return -1;

    dmp.fifo_rate = rate;
1000a5fe:	4b09      	ldr	r3, [pc, #36]	; (1000a624 <dmp_set_fifo_rate+0x68>)
1000a600:	819c      	strh	r4, [r3, #12]
    return 0;
}
1000a602:	b007      	add	sp, #28
1000a604:	bd30      	pop	{r4, r5, pc}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
1000a606:	2001      	movs	r0, #1
1000a608:	4240      	negs	r0, r0
1000a60a:	e7fa      	b.n	1000a602 <dmp_set_fifo_rate+0x46>
1000a60c:	10015cf4 	.word	0x10015cf4
1000a610:	1001443b 	.word	0x1001443b
1000a614:	100119e1 	.word	0x100119e1
1000a618:	00000216 	.word	0x00000216
1000a61c:	1000965d 	.word	0x1000965d
1000a620:	00000ac1 	.word	0x00000ac1
1000a624:	10017650 	.word	0x10017650

1000a628 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
1000a628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a62a:	4647      	mov	r7, r8
1000a62c:	b480      	push	{r7}
1000a62e:	0005      	movs	r5, r0
1000a630:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000a632:	0743      	lsls	r3, r0, #29
1000a634:	d067      	beq.n	1000a706 <dmp_set_tap_thresh+0xde>
1000a636:	23c8      	movs	r3, #200	; 0xc8
1000a638:	00db      	lsls	r3, r3, #3
1000a63a:	4299      	cmp	r1, r3
1000a63c:	d863      	bhi.n	1000a706 <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000a63e:	4b4c      	ldr	r3, [pc, #304]	; (1000a770 <dmp_set_tap_thresh+0x148>)
1000a640:	0008      	movs	r0, r1
1000a642:	4798      	blx	r3
1000a644:	4b4b      	ldr	r3, [pc, #300]	; (1000a774 <dmp_set_tap_thresh+0x14c>)
1000a646:	494c      	ldr	r1, [pc, #304]	; (1000a778 <dmp_set_tap_thresh+0x150>)
1000a648:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
1000a64a:	466b      	mov	r3, sp
1000a64c:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000a64e:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000a650:	4b4a      	ldr	r3, [pc, #296]	; (1000a77c <dmp_set_tap_thresh+0x154>)
1000a652:	0020      	movs	r0, r4
1000a654:	4798      	blx	r3
    switch (accel_fsr) {
1000a656:	7823      	ldrb	r3, [r4, #0]
1000a658:	2b04      	cmp	r3, #4
1000a65a:	d100      	bne.n	1000a65e <dmp_set_tap_thresh+0x36>
1000a65c:	e079      	b.n	1000a752 <dmp_set_tap_thresh+0x12a>
1000a65e:	d931      	bls.n	1000a6c4 <dmp_set_tap_thresh+0x9c>
1000a660:	2b08      	cmp	r3, #8
1000a662:	d067      	beq.n	1000a734 <dmp_set_tap_thresh+0x10c>
1000a664:	2b10      	cmp	r3, #16
1000a666:	d14e      	bne.n	1000a706 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1000a668:	218a      	movs	r1, #138	; 0x8a
1000a66a:	4b45      	ldr	r3, [pc, #276]	; (1000a780 <dmp_set_tap_thresh+0x158>)
1000a66c:	05c9      	lsls	r1, r1, #23
1000a66e:	1c38      	adds	r0, r7, #0
1000a670:	4698      	mov	r8, r3
1000a672:	4798      	blx	r3
1000a674:	4c43      	ldr	r4, [pc, #268]	; (1000a784 <dmp_set_tap_thresh+0x15c>)
1000a676:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1000a678:	4943      	ldr	r1, [pc, #268]	; (1000a788 <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
1000a67a:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1000a67c:	1c38      	adds	r0, r7, #0
1000a67e:	47c0      	blx	r8
1000a680:	47a0      	blx	r4
1000a682:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000a684:	ac01      	add	r4, sp, #4
1000a686:	0a33      	lsrs	r3, r6, #8
1000a688:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1000a68a:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000a68c:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1000a68e:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
1000a690:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
1000a692:	07eb      	lsls	r3, r5, #31
1000a694:	d427      	bmi.n	1000a6e6 <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
1000a696:	07ab      	lsls	r3, r5, #30
1000a698:	d43b      	bmi.n	1000a712 <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
1000a69a:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
1000a69c:	076b      	lsls	r3, r5, #29
1000a69e:	d534      	bpl.n	1000a70a <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
1000a6a0:	20ee      	movs	r0, #238	; 0xee
1000a6a2:	0022      	movs	r2, r4
1000a6a4:	2102      	movs	r1, #2
1000a6a6:	0040      	lsls	r0, r0, #1
1000a6a8:	4c38      	ldr	r4, [pc, #224]	; (1000a78c <dmp_set_tap_thresh+0x164>)
1000a6aa:	47a0      	blx	r4
1000a6ac:	2800      	cmp	r0, #0
1000a6ae:	d12a      	bne.n	1000a706 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
1000a6b0:	466b      	mov	r3, sp
1000a6b2:	302d      	adds	r0, #45	; 0x2d
1000a6b4:	1d9a      	adds	r2, r3, #6
1000a6b6:	2102      	movs	r1, #2
1000a6b8:	30ff      	adds	r0, #255	; 0xff
1000a6ba:	47a0      	blx	r4
1000a6bc:	1e43      	subs	r3, r0, #1
1000a6be:	4198      	sbcs	r0, r3
1000a6c0:	4240      	negs	r0, r0
1000a6c2:	e022      	b.n	1000a70a <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
1000a6c4:	2b02      	cmp	r3, #2
1000a6c6:	d11e      	bne.n	1000a706 <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000a6c8:	218d      	movs	r1, #141	; 0x8d
1000a6ca:	4b2d      	ldr	r3, [pc, #180]	; (1000a780 <dmp_set_tap_thresh+0x158>)
1000a6cc:	05c9      	lsls	r1, r1, #23
1000a6ce:	1c38      	adds	r0, r7, #0
1000a6d0:	4698      	mov	r8, r3
1000a6d2:	4798      	blx	r3
1000a6d4:	4c2b      	ldr	r4, [pc, #172]	; (1000a784 <dmp_set_tap_thresh+0x15c>)
1000a6d6:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
1000a6d8:	492d      	ldr	r1, [pc, #180]	; (1000a790 <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000a6da:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
1000a6dc:	1c38      	adds	r0, r7, #0
1000a6de:	47c0      	blx	r8
1000a6e0:	47a0      	blx	r4
1000a6e2:	b280      	uxth	r0, r0
        break;
1000a6e4:	e7ce      	b.n	1000a684 <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
1000a6e6:	20ea      	movs	r0, #234	; 0xea
1000a6e8:	0022      	movs	r2, r4
1000a6ea:	2102      	movs	r1, #2
1000a6ec:	0040      	lsls	r0, r0, #1
1000a6ee:	4e27      	ldr	r6, [pc, #156]	; (1000a78c <dmp_set_tap_thresh+0x164>)
1000a6f0:	47b0      	blx	r6
1000a6f2:	2800      	cmp	r0, #0
1000a6f4:	d107      	bne.n	1000a706 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
1000a6f6:	466b      	mov	r3, sp
1000a6f8:	3025      	adds	r0, #37	; 0x25
1000a6fa:	1d9a      	adds	r2, r3, #6
1000a6fc:	2102      	movs	r1, #2
1000a6fe:	30ff      	adds	r0, #255	; 0xff
1000a700:	47b0      	blx	r6
1000a702:	2800      	cmp	r0, #0
1000a704:	d0c7      	beq.n	1000a696 <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
1000a706:	2001      	movs	r0, #1
1000a708:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
1000a70a:	b002      	add	sp, #8
1000a70c:	bc04      	pop	{r2}
1000a70e:	4690      	mov	r8, r2
1000a710:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1000a712:	20ec      	movs	r0, #236	; 0xec
1000a714:	0022      	movs	r2, r4
1000a716:	2102      	movs	r1, #2
1000a718:	0040      	lsls	r0, r0, #1
1000a71a:	4e1c      	ldr	r6, [pc, #112]	; (1000a78c <dmp_set_tap_thresh+0x164>)
1000a71c:	47b0      	blx	r6
1000a71e:	2800      	cmp	r0, #0
1000a720:	d1f1      	bne.n	1000a706 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1000a722:	466b      	mov	r3, sp
1000a724:	3029      	adds	r0, #41	; 0x29
1000a726:	1d9a      	adds	r2, r3, #6
1000a728:	2102      	movs	r1, #2
1000a72a:	30ff      	adds	r0, #255	; 0xff
1000a72c:	47b0      	blx	r6
1000a72e:	2800      	cmp	r0, #0
1000a730:	d0b3      	beq.n	1000a69a <dmp_set_tap_thresh+0x72>
1000a732:	e7e8      	b.n	1000a706 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000a734:	218b      	movs	r1, #139	; 0x8b
1000a736:	4b12      	ldr	r3, [pc, #72]	; (1000a780 <dmp_set_tap_thresh+0x158>)
1000a738:	05c9      	lsls	r1, r1, #23
1000a73a:	1c38      	adds	r0, r7, #0
1000a73c:	4698      	mov	r8, r3
1000a73e:	4798      	blx	r3
1000a740:	4c10      	ldr	r4, [pc, #64]	; (1000a784 <dmp_set_tap_thresh+0x15c>)
1000a742:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000a744:	4913      	ldr	r1, [pc, #76]	; (1000a794 <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000a746:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000a748:	1c38      	adds	r0, r7, #0
1000a74a:	47c0      	blx	r8
1000a74c:	47a0      	blx	r4
1000a74e:	b280      	uxth	r0, r0
        break;
1000a750:	e798      	b.n	1000a684 <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000a752:	218c      	movs	r1, #140	; 0x8c
1000a754:	4b0a      	ldr	r3, [pc, #40]	; (1000a780 <dmp_set_tap_thresh+0x158>)
1000a756:	05c9      	lsls	r1, r1, #23
1000a758:	1c38      	adds	r0, r7, #0
1000a75a:	4698      	mov	r8, r3
1000a75c:	4798      	blx	r3
1000a75e:	4c09      	ldr	r4, [pc, #36]	; (1000a784 <dmp_set_tap_thresh+0x15c>)
1000a760:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000a762:	490d      	ldr	r1, [pc, #52]	; (1000a798 <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000a764:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000a766:	1c38      	adds	r0, r7, #0
1000a768:	47c0      	blx	r8
1000a76a:	47a0      	blx	r4
1000a76c:	b280      	uxth	r0, r0
        break;
1000a76e:	e789      	b.n	1000a684 <dmp_set_tap_thresh+0x5c>
1000a770:	10012aa5 	.word	0x10012aa5
1000a774:	100120d9 	.word	0x100120d9
1000a778:	43480000 	.word	0x43480000
1000a77c:	10008b75 	.word	0x10008b75
1000a780:	1001246d 	.word	0x1001246d
1000a784:	10011d49 	.word	0x10011d49
1000a788:	44c00000 	.word	0x44c00000
1000a78c:	1000965d 	.word	0x1000965d
1000a790:	46400000 	.word	0x46400000
1000a794:	45400000 	.word	0x45400000
1000a798:	45c00000 	.word	0x45c00000

1000a79c <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
1000a79c:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1000a79e:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
1000a7a0:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1000a7a2:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
1000a7a4:	2b00      	cmp	r3, #0
1000a7a6:	d115      	bne.n	1000a7d4 <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
1000a7a8:	466a      	mov	r2, sp
1000a7aa:	3207      	adds	r2, #7
1000a7ac:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
1000a7ae:	0783      	lsls	r3, r0, #30
1000a7b0:	d503      	bpl.n	1000a7ba <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
1000a7b2:	230c      	movs	r3, #12
1000a7b4:	7811      	ldrb	r1, [r2, #0]
1000a7b6:	430b      	orrs	r3, r1
1000a7b8:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
1000a7ba:	0743      	lsls	r3, r0, #29
1000a7bc:	d503      	bpl.n	1000a7c6 <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
1000a7be:	2303      	movs	r3, #3
1000a7c0:	7811      	ldrb	r1, [r2, #0]
1000a7c2:	430b      	orrs	r3, r1
1000a7c4:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000a7c6:	20a4      	movs	r0, #164	; 0xa4
1000a7c8:	2101      	movs	r1, #1
1000a7ca:	4b05      	ldr	r3, [pc, #20]	; (1000a7e0 <dmp_set_tap_axes+0x44>)
1000a7cc:	0040      	lsls	r0, r0, #1
1000a7ce:	4798      	blx	r3
}
1000a7d0:	b003      	add	sp, #12
1000a7d2:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
1000a7d4:	466b      	mov	r3, sp
1000a7d6:	1dda      	adds	r2, r3, #7
1000a7d8:	2330      	movs	r3, #48	; 0x30
1000a7da:	7013      	strb	r3, [r2, #0]
1000a7dc:	e7e7      	b.n	1000a7ae <dmp_set_tap_axes+0x12>
1000a7de:	46c0      	nop			; (mov r8, r8)
1000a7e0:	1000965d 	.word	0x1000965d

1000a7e4 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
1000a7e4:	b500      	push	{lr}
1000a7e6:	b085      	sub	sp, #20
    if (enable) {
1000a7e8:	2800      	cmp	r0, #0
1000a7ea:	d10d      	bne.n	1000a808 <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
1000a7ec:	4908      	ldr	r1, [pc, #32]	; (1000a810 <dmp_enable_gyro_cal+0x2c>)
1000a7ee:	2209      	movs	r2, #9
1000a7f0:	3128      	adds	r1, #40	; 0x28
1000a7f2:	4b08      	ldr	r3, [pc, #32]	; (1000a814 <dmp_enable_gyro_cal+0x30>)
1000a7f4:	a801      	add	r0, sp, #4
1000a7f6:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000a7f8:	2097      	movs	r0, #151	; 0x97
1000a7fa:	aa01      	add	r2, sp, #4
1000a7fc:	2109      	movs	r1, #9
1000a7fe:	00c0      	lsls	r0, r0, #3
1000a800:	4b05      	ldr	r3, [pc, #20]	; (1000a818 <dmp_enable_gyro_cal+0x34>)
1000a802:	4798      	blx	r3
    }
}
1000a804:	b005      	add	sp, #20
1000a806:	bd00      	pop	{pc}
1000a808:	4b04      	ldr	r3, [pc, #16]	; (1000a81c <dmp_enable_gyro_cal+0x38>)
1000a80a:	4798      	blx	r3
1000a80c:	e7fa      	b.n	1000a804 <dmp_enable_gyro_cal+0x20>
1000a80e:	46c0      	nop			; (mov r8, r8)
1000a810:	10015cf4 	.word	0x10015cf4
1000a814:	1001443b 	.word	0x1001443b
1000a818:	1000965d 	.word	0x1000965d
1000a81c:	1000a465 	.word	0x1000a465

1000a820 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000a820:	b500      	push	{lr}
1000a822:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
1000a824:	2800      	cmp	r0, #0
1000a826:	d010      	beq.n	1000a84a <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
1000a828:	23c0      	movs	r3, #192	; 0xc0
1000a82a:	aa01      	add	r2, sp, #4
1000a82c:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
1000a82e:	3302      	adds	r3, #2
1000a830:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
1000a832:	3302      	adds	r3, #2
1000a834:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
1000a836:	3302      	adds	r3, #2
1000a838:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1000a83a:	2104      	movs	r1, #4
1000a83c:	4b05      	ldr	r3, [pc, #20]	; (1000a854 <dmp_enable_lp_quat+0x34>)
1000a83e:	4806      	ldr	r0, [pc, #24]	; (1000a858 <dmp_enable_lp_quat+0x38>)
1000a840:	4798      	blx	r3

    return mpu_reset_fifo();
1000a842:	4b06      	ldr	r3, [pc, #24]	; (1000a85c <dmp_enable_lp_quat+0x3c>)
1000a844:	4798      	blx	r3
}
1000a846:	b003      	add	sp, #12
1000a848:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
1000a84a:	4b05      	ldr	r3, [pc, #20]	; (1000a860 <dmp_enable_lp_quat+0x40>)
1000a84c:	aa01      	add	r2, sp, #4
1000a84e:	9301      	str	r3, [sp, #4]
1000a850:	e7f3      	b.n	1000a83a <dmp_enable_lp_quat+0x1a>
1000a852:	46c0      	nop			; (mov r8, r8)
1000a854:	1000965d 	.word	0x1000965d
1000a858:	00000a98 	.word	0x00000a98
1000a85c:	10008949 	.word	0x10008949
1000a860:	8b8b8b8b 	.word	0x8b8b8b8b

1000a864 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1000a864:	b500      	push	{lr}
1000a866:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
1000a868:	2800      	cmp	r0, #0
1000a86a:	d010      	beq.n	1000a88e <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
1000a86c:	2320      	movs	r3, #32
1000a86e:	aa01      	add	r2, sp, #4
1000a870:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
1000a872:	3308      	adds	r3, #8
1000a874:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
1000a876:	3308      	adds	r3, #8
1000a878:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
1000a87a:	3308      	adds	r3, #8
1000a87c:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
1000a87e:	2104      	movs	r1, #4
1000a880:	4b05      	ldr	r3, [pc, #20]	; (1000a898 <dmp_enable_6x_lp_quat+0x34>)
1000a882:	4806      	ldr	r0, [pc, #24]	; (1000a89c <dmp_enable_6x_lp_quat+0x38>)
1000a884:	4798      	blx	r3

    return mpu_reset_fifo();
1000a886:	4b06      	ldr	r3, [pc, #24]	; (1000a8a0 <dmp_enable_6x_lp_quat+0x3c>)
1000a888:	4798      	blx	r3
}
1000a88a:	b003      	add	sp, #12
1000a88c:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
1000a88e:	4b05      	ldr	r3, [pc, #20]	; (1000a8a4 <dmp_enable_6x_lp_quat+0x40>)
1000a890:	aa01      	add	r2, sp, #4
1000a892:	9301      	str	r3, [sp, #4]
1000a894:	e7f3      	b.n	1000a87e <dmp_enable_6x_lp_quat+0x1a>
1000a896:	46c0      	nop			; (mov r8, r8)
1000a898:	1000965d 	.word	0x1000965d
1000a89c:	00000a9e 	.word	0x00000a9e
1000a8a0:	10008949 	.word	0x10008949
1000a8a4:	a3a3a3a3 	.word	0xa3a3a3a3

1000a8a8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000a8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8aa:	4645      	mov	r5, r8
1000a8ac:	464e      	mov	r6, r9
1000a8ae:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1000a8b0:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000a8b2:	b4e0      	push	{r5, r6, r7}
1000a8b4:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1000a8b6:	ac01      	add	r4, sp, #4
1000a8b8:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
1000a8ba:	33c8      	adds	r3, #200	; 0xc8
1000a8bc:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000a8be:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000a8c0:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000a8c2:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
1000a8c4:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1000a8c6:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
1000a8c8:	2104      	movs	r1, #4
1000a8ca:	2068      	movs	r0, #104	; 0x68
1000a8cc:	4e7c      	ldr	r6, [pc, #496]	; (1000aac0 <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1000a8ce:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
1000a8d0:	47b0      	blx	r6
1000a8d2:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000a8d4:	23a3      	movs	r3, #163	; 0xa3
1000a8d6:	402a      	ands	r2, r5
1000a8d8:	7023      	strb	r3, [r4, #0]
1000a8da:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1000a8dc:	d100      	bne.n	1000a8e0 <dmp_enable_feature+0x38>
1000a8de:	e0e1      	b.n	1000aaa4 <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
1000a8e0:	331d      	adds	r3, #29
1000a8e2:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
1000a8e4:	3308      	adds	r3, #8
1000a8e6:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
1000a8e8:	3b06      	subs	r3, #6
1000a8ea:	70e3      	strb	r3, [r4, #3]
1000a8ec:	27c0      	movs	r7, #192	; 0xc0
1000a8ee:	007f      	lsls	r7, r7, #1
1000a8f0:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000a8f2:	d100      	bne.n	1000a8f6 <dmp_enable_feature+0x4e>
1000a8f4:	e0d1      	b.n	1000aa9a <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
1000a8f6:	23c4      	movs	r3, #196	; 0xc4
1000a8f8:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
1000a8fa:	3308      	adds	r3, #8
1000a8fc:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
1000a8fe:	3b06      	subs	r3, #6
1000a900:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000a902:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
1000a904:	0022      	movs	r2, r4
1000a906:	210a      	movs	r1, #10
1000a908:	486e      	ldr	r0, [pc, #440]	; (1000aac4 <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000a90a:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
1000a90c:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
1000a90e:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000a910:	47b0      	blx	r6
1000a912:	2303      	movs	r3, #3
1000a914:	402b      	ands	r3, r5
1000a916:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000a918:	d100      	bne.n	1000a91c <dmp_enable_feature+0x74>
1000a91a:	e0bb      	b.n	1000aa94 <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
1000a91c:	2320      	movs	r3, #32
1000a91e:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
1000a920:	0022      	movs	r2, r4
1000a922:	2101      	movs	r1, #1
1000a924:	4868      	ldr	r0, [pc, #416]	; (1000aac8 <dmp_enable_feature+0x220>)
1000a926:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
1000a928:	06ab      	lsls	r3, r5, #26
1000a92a:	d400      	bmi.n	1000a92e <dmp_enable_feature+0x86>
1000a92c:	e0ae      	b.n	1000aa8c <dmp_enable_feature+0x1e4>
1000a92e:	4b67      	ldr	r3, [pc, #412]	; (1000aacc <dmp_enable_feature+0x224>)
1000a930:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000a932:	2f00      	cmp	r7, #0
1000a934:	d00e      	beq.n	1000a954 <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
1000a936:	05eb      	lsls	r3, r5, #23
1000a938:	d500      	bpl.n	1000a93c <dmp_enable_feature+0x94>
1000a93a:	e0b7      	b.n	1000aaac <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
1000a93c:	23b0      	movs	r3, #176	; 0xb0
1000a93e:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
1000a940:	3b30      	subs	r3, #48	; 0x30
1000a942:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
1000a944:	3334      	adds	r3, #52	; 0x34
1000a946:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
1000a948:	3b24      	subs	r3, #36	; 0x24
1000a94a:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
1000a94c:	0022      	movs	r2, r4
1000a94e:	2104      	movs	r1, #4
1000a950:	485f      	ldr	r0, [pc, #380]	; (1000aad0 <dmp_enable_feature+0x228>)
1000a952:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
1000a954:	07eb      	lsls	r3, r5, #31
1000a956:	d400      	bmi.n	1000a95a <dmp_enable_feature+0xb2>
1000a958:	e090      	b.n	1000aa7c <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
1000a95a:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
1000a95c:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
1000a95e:	0022      	movs	r2, r4
1000a960:	2101      	movs	r1, #1
1000a962:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
1000a964:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000a966:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
1000a968:	21fa      	movs	r1, #250	; 0xfa
1000a96a:	4b5a      	ldr	r3, [pc, #360]	; (1000aad4 <dmp_enable_feature+0x22c>)
1000a96c:	2007      	movs	r0, #7
1000a96e:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000a970:	4b59      	ldr	r3, [pc, #356]	; (1000aad8 <dmp_enable_feature+0x230>)
1000a972:	2007      	movs	r0, #7
1000a974:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000a976:	2300      	movs	r3, #0
1000a978:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
1000a97a:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000a97c:	466b      	mov	r3, sp
1000a97e:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
1000a980:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000a982:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
1000a984:	30ff      	adds	r0, #255	; 0xff
1000a986:	466a      	mov	r2, sp
1000a988:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000a98a:	466b      	mov	r3, sp
1000a98c:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000a98e:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000a990:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000a992:	2314      	movs	r3, #20
1000a994:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000a996:	2102      	movs	r1, #2
1000a998:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000a99a:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000a99c:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000a99e:	466b      	mov	r3, sp
1000a9a0:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
1000a9a2:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000a9a4:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000a9a6:	2364      	movs	r3, #100	; 0x64
1000a9a8:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
1000a9aa:	2102      	movs	r1, #2
1000a9ac:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000a9ae:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
1000a9b0:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
1000a9b2:	466b      	mov	r3, sp
1000a9b4:	4652      	mov	r2, sl
1000a9b6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1000a9b8:	466a      	mov	r2, sp
1000a9ba:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
1000a9bc:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
1000a9be:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1000a9c0:	336b      	adds	r3, #107	; 0x6b
1000a9c2:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
1000a9c4:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1000a9c6:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
1000a9c8:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1000a9ca:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
1000a9cc:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000a9ce:	466b      	mov	r3, sp
1000a9d0:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
1000a9d2:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000a9d4:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
1000a9d6:	2308      	movs	r3, #8
1000a9d8:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
1000a9da:	2102      	movs	r1, #2
1000a9dc:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000a9de:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
1000a9e0:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000a9e2:	466b      	mov	r3, sp
1000a9e4:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
1000a9e6:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000a9e8:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
1000a9ea:	2302      	movs	r3, #2
1000a9ec:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
1000a9ee:	2102      	movs	r1, #2
1000a9f0:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000a9f2:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
1000a9f4:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
1000a9f6:	07ab      	lsls	r3, r5, #30
1000a9f8:	d53d      	bpl.n	1000aa76 <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
1000a9fa:	23d9      	movs	r3, #217	; 0xd9
1000a9fc:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1000a9fe:	0022      	movs	r2, r4
1000aa00:	2101      	movs	r1, #1
1000aa02:	4836      	ldr	r0, [pc, #216]	; (1000aadc <dmp_enable_feature+0x234>)
1000aa04:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
1000aa06:	076b      	lsls	r3, r5, #29
1000aa08:	d531      	bpl.n	1000aa6e <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
1000aa0a:	2001      	movs	r0, #1
1000aa0c:	4b34      	ldr	r3, [pc, #208]	; (1000aae0 <dmp_enable_feature+0x238>)
1000aa0e:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1000aa10:	06eb      	lsls	r3, r5, #27
1000aa12:	d528      	bpl.n	1000aa66 <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
1000aa14:	2001      	movs	r0, #1
1000aa16:	4b33      	ldr	r3, [pc, #204]	; (1000aae4 <dmp_enable_feature+0x23c>)
1000aa18:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
1000aa1a:	2308      	movs	r3, #8
1000aa1c:	4c32      	ldr	r4, [pc, #200]	; (1000aae8 <dmp_enable_feature+0x240>)
1000aa1e:	432b      	orrs	r3, r5
1000aa20:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
1000aa22:	4b32      	ldr	r3, [pc, #200]	; (1000aaec <dmp_enable_feature+0x244>)
1000aa24:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1000aa26:	4643      	mov	r3, r8
1000aa28:	2b00      	cmp	r3, #0
1000aa2a:	d119      	bne.n	1000aa60 <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
1000aa2c:	4643      	mov	r3, r8
1000aa2e:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1000aa30:	2f00      	cmp	r7, #0
1000aa32:	d002      	beq.n	1000aa3a <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
1000aa34:	7ba3      	ldrb	r3, [r4, #14]
1000aa36:	3306      	adds	r3, #6
1000aa38:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1000aa3a:	2314      	movs	r3, #20
1000aa3c:	422b      	tst	r3, r5
1000aa3e:	d002      	beq.n	1000aa46 <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
1000aa40:	7ba3      	ldrb	r3, [r4, #14]
1000aa42:	3310      	adds	r3, #16
1000aa44:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000aa46:	464b      	mov	r3, r9
1000aa48:	2b00      	cmp	r3, #0
1000aa4a:	d002      	beq.n	1000aa52 <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
1000aa4c:	7ba3      	ldrb	r3, [r4, #14]
1000aa4e:	3304      	adds	r3, #4
1000aa50:	73a3      	strb	r3, [r4, #14]

    return 0;
}
1000aa52:	2000      	movs	r0, #0
1000aa54:	b004      	add	sp, #16
1000aa56:	bc1c      	pop	{r2, r3, r4}
1000aa58:	4690      	mov	r8, r2
1000aa5a:	4699      	mov	r9, r3
1000aa5c:	46a2      	mov	sl, r4
1000aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
1000aa60:	2306      	movs	r3, #6
1000aa62:	73a3      	strb	r3, [r4, #14]
1000aa64:	e7e4      	b.n	1000aa30 <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
1000aa66:	4b1f      	ldr	r3, [pc, #124]	; (1000aae4 <dmp_enable_feature+0x23c>)
1000aa68:	2000      	movs	r0, #0
1000aa6a:	4798      	blx	r3
1000aa6c:	e7d5      	b.n	1000aa1a <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
1000aa6e:	4b1c      	ldr	r3, [pc, #112]	; (1000aae0 <dmp_enable_feature+0x238>)
1000aa70:	2000      	movs	r0, #0
1000aa72:	4798      	blx	r3
1000aa74:	e7cc      	b.n	1000aa10 <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
1000aa76:	23d8      	movs	r3, #216	; 0xd8
1000aa78:	7023      	strb	r3, [r4, #0]
1000aa7a:	e7c0      	b.n	1000a9fe <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
1000aa7c:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
1000aa7e:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
1000aa80:	0022      	movs	r2, r4
1000aa82:	2101      	movs	r1, #1
1000aa84:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
1000aa86:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000aa88:	47b0      	blx	r6
1000aa8a:	e7b4      	b.n	1000a9f6 <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
1000aa8c:	4b18      	ldr	r3, [pc, #96]	; (1000aaf0 <dmp_enable_feature+0x248>)
1000aa8e:	2000      	movs	r0, #0
1000aa90:	4798      	blx	r3
1000aa92:	e74e      	b.n	1000a932 <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
1000aa94:	23d8      	movs	r3, #216	; 0xd8
1000aa96:	7023      	strb	r3, [r4, #0]
1000aa98:	e742      	b.n	1000a920 <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
1000aa9a:	23a3      	movs	r3, #163	; 0xa3
1000aa9c:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
1000aa9e:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
1000aaa0:	71a3      	strb	r3, [r4, #6]
1000aaa2:	e72e      	b.n	1000a902 <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
1000aaa4:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
1000aaa6:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
1000aaa8:	70e3      	strb	r3, [r4, #3]
1000aaaa:	e71f      	b.n	1000a8ec <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
1000aaac:	23b2      	movs	r3, #178	; 0xb2
1000aaae:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
1000aab0:	3b27      	subs	r3, #39	; 0x27
1000aab2:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
1000aab4:	332b      	adds	r3, #43	; 0x2b
1000aab6:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
1000aab8:	3b1b      	subs	r3, #27
1000aaba:	70e3      	strb	r3, [r4, #3]
1000aabc:	e746      	b.n	1000a94c <dmp_enable_feature+0xa4>
1000aabe:	46c0      	nop			; (mov r8, r8)
1000aac0:	1000965d 	.word	0x1000965d
1000aac4:	00000aa7 	.word	0x00000aa7
1000aac8:	00000ab6 	.word	0x00000ab6
1000aacc:	1000a465 	.word	0x1000a465
1000aad0:	00000aa2 	.word	0x00000aa2
1000aad4:	1000a629 	.word	0x1000a629
1000aad8:	1000a79d 	.word	0x1000a79d
1000aadc:	0000073d 	.word	0x0000073d
1000aae0:	1000a821 	.word	0x1000a821
1000aae4:	1000a865 	.word	0x1000a865
1000aae8:	10017650 	.word	0x10017650
1000aaec:	10008949 	.word	0x10008949
1000aaf0:	1000a7e5 	.word	0x1000a7e5

1000aaf4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000aaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aaf6:	465f      	mov	r7, fp
1000aaf8:	4644      	mov	r4, r8
1000aafa:	4656      	mov	r6, sl
1000aafc:	464d      	mov	r5, r9
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1000aafe:	2300      	movs	r3, #0
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000ab00:	b4f0      	push	{r4, r5, r6, r7}
1000ab02:	b089      	sub	sp, #36	; 0x24
1000ab04:	9c12      	ldr	r4, [sp, #72]	; 0x48
1000ab06:	0007      	movs	r7, r0
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1000ab08:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
1000ab0a:	4b56      	ldr	r3, [pc, #344]	; (1000ac64 <dmp_read_fifo+0x170>)
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000ab0c:	4688      	mov	r8, r1
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
1000ab0e:	7b98      	ldrb	r0, [r3, #14]
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000ab10:	4691      	mov	r9, r2
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
1000ab12:	469b      	mov	fp, r3
1000ab14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000ab16:	4669      	mov	r1, sp
1000ab18:	4b53      	ldr	r3, [pc, #332]	; (1000ac68 <dmp_read_fifo+0x174>)
1000ab1a:	4798      	blx	r3
1000ab1c:	1e06      	subs	r6, r0, #0
1000ab1e:	d000      	beq.n	1000ab22 <dmp_read_fifo+0x2e>
1000ab20:	e097      	b.n	1000ac52 <dmp_read_fifo+0x15e>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
1000ab22:	465b      	mov	r3, fp
1000ab24:	8958      	ldrh	r0, [r3, #10]
1000ab26:	2314      	movs	r3, #20
1000ab28:	4203      	tst	r3, r0
1000ab2a:	d145      	bne.n	1000abb8 <dmp_read_fifo+0xc4>
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
1000ab2c:	2300      	movs	r3, #0
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1000ab2e:	0642      	lsls	r2, r0, #25
1000ab30:	d519      	bpl.n	1000ab66 <dmp_read_fifo+0x72>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1000ab32:	0019      	movs	r1, r3
1000ab34:	466a      	mov	r2, sp
1000ab36:	4469      	add	r1, sp
1000ab38:	5cd2      	ldrb	r2, [r2, r3]
1000ab3a:	784d      	ldrb	r5, [r1, #1]
1000ab3c:	0212      	lsls	r2, r2, #8
1000ab3e:	432a      	orrs	r2, r5
1000ab40:	4645      	mov	r5, r8
1000ab42:	802a      	strh	r2, [r5, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1000ab44:	788a      	ldrb	r2, [r1, #2]
1000ab46:	78cd      	ldrb	r5, [r1, #3]
1000ab48:	0212      	lsls	r2, r2, #8
1000ab4a:	432a      	orrs	r2, r5
1000ab4c:	4645      	mov	r5, r8
1000ab4e:	806a      	strh	r2, [r5, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1000ab50:	790a      	ldrb	r2, [r1, #4]
1000ab52:	7949      	ldrb	r1, [r1, #5]
1000ab54:	0212      	lsls	r2, r2, #8
1000ab56:	430a      	orrs	r2, r1
1000ab58:	80aa      	strh	r2, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
1000ab5a:	2208      	movs	r2, #8
1000ab5c:	8821      	ldrh	r1, [r4, #0]

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
1000ab5e:	3306      	adds	r3, #6
        sensors[0] |= INV_XYZ_ACCEL;
1000ab60:	430a      	orrs	r2, r1

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
1000ab62:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
1000ab64:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000ab66:	22c0      	movs	r2, #192	; 0xc0
1000ab68:	0052      	lsls	r2, r2, #1
1000ab6a:	4210      	tst	r0, r2
1000ab6c:	d017      	beq.n	1000ab9e <dmp_read_fifo+0xaa>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
1000ab6e:	0019      	movs	r1, r3
1000ab70:	466a      	mov	r2, sp
1000ab72:	4469      	add	r1, sp
1000ab74:	5cd2      	ldrb	r2, [r2, r3]
1000ab76:	784d      	ldrb	r5, [r1, #1]
1000ab78:	0212      	lsls	r2, r2, #8
1000ab7a:	432a      	orrs	r2, r5
1000ab7c:	803a      	strh	r2, [r7, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
1000ab7e:	788a      	ldrb	r2, [r1, #2]
1000ab80:	78cd      	ldrb	r5, [r1, #3]
1000ab82:	0212      	lsls	r2, r2, #8
1000ab84:	432a      	orrs	r2, r5
1000ab86:	807a      	strh	r2, [r7, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
1000ab88:	790a      	ldrb	r2, [r1, #4]
1000ab8a:	7949      	ldrb	r1, [r1, #5]
1000ab8c:	0212      	lsls	r2, r2, #8
1000ab8e:	430a      	orrs	r2, r1
1000ab90:	80ba      	strh	r2, [r7, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
1000ab92:	2270      	movs	r2, #112	; 0x70
1000ab94:	8821      	ldrh	r1, [r4, #0]

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
1000ab96:	3306      	adds	r3, #6
        sensors[0] |= INV_XYZ_GYRO;
1000ab98:	430a      	orrs	r2, r1

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
1000ab9a:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_GYRO;
1000ab9c:	8022      	strh	r2, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000ab9e:	0782      	lsls	r2, r0, #30
1000aba0:	d13c      	bne.n	1000ac1c <dmp_read_fifo+0x128>

#elif defined EMPL_TARGET_SAMB11
#include "include.h"
static inline void get_ms(uint32_t *count)
{
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
1000aba2:	2001      	movs	r0, #1
1000aba4:	4b31      	ldr	r3, [pc, #196]	; (1000ac6c <dmp_read_fifo+0x178>)
1000aba6:	4798      	blx	r3
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        decode_gesture(fifo_data + ii);

    get_ms(timestamp);
    return 0;
}
1000aba8:	0030      	movs	r0, r6
1000abaa:	b009      	add	sp, #36	; 0x24
1000abac:	bc3c      	pop	{r2, r3, r4, r5}
1000abae:	4690      	mov	r8, r2
1000abb0:	4699      	mov	r9, r3
1000abb2:	46a2      	mov	sl, r4
1000abb4:	46ab      	mov	fp, r5
1000abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abb8:	9b00      	ldr	r3, [sp, #0]
1000abba:	ba1a      	rev	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
1000abbc:	464b      	mov	r3, r9
1000abbe:	601a      	str	r2, [r3, #0]
1000abc0:	9b01      	ldr	r3, [sp, #4]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
1000abc2:	1412      	asrs	r2, r2, #16
1000abc4:	ba19      	rev	r1, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
1000abc6:	464b      	mov	r3, r9
1000abc8:	6059      	str	r1, [r3, #4]
1000abca:	9b02      	ldr	r3, [sp, #8]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
1000abcc:	4694      	mov	ip, r2
1000abce:	ba1b      	rev	r3, r3
1000abd0:	469a      	mov	sl, r3
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
1000abd2:	464b      	mov	r3, r9
1000abd4:	4655      	mov	r5, sl
1000abd6:	609d      	str	r5, [r3, #8]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1000abd8:	464d      	mov	r5, r9
1000abda:	9b03      	ldr	r3, [sp, #12]
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
1000abdc:	4652      	mov	r2, sl
1000abde:	ba1b      	rev	r3, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
1000abe0:	60eb      	str	r3, [r5, #12]
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1000abe2:	4665      	mov	r5, ip
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
1000abe4:	141b      	asrs	r3, r3, #16
1000abe6:	4699      	mov	r9, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1000abe8:	436d      	muls	r5, r5
1000abea:	464b      	mov	r3, r9
1000abec:	46ac      	mov	ip, r5
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
1000abee:	1409      	asrs	r1, r1, #16
        quat_q14[2] = quat[2] >> 16;
1000abf0:	1412      	asrs	r2, r2, #16
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
1000abf2:	4349      	muls	r1, r1
1000abf4:	4352      	muls	r2, r2
1000abf6:	435b      	muls	r3, r3
1000abf8:	4461      	add	r1, ip
1000abfa:	1889      	adds	r1, r1, r2
1000abfc:	18c9      	adds	r1, r1, r3
1000abfe:	23f1      	movs	r3, #241	; 0xf1
1000ac00:	061b      	lsls	r3, r3, #24
1000ac02:	469c      	mov	ip, r3
1000ac04:	2380      	movs	r3, #128	; 0x80
1000ac06:	4461      	add	r1, ip
1000ac08:	049b      	lsls	r3, r3, #18
1000ac0a:	4299      	cmp	r1, r3
1000ac0c:	d824      	bhi.n	1000ac58 <dmp_read_fifo+0x164>
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
            sensors[0] = 0;
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
1000ac0e:	2280      	movs	r2, #128	; 0x80
1000ac10:	8823      	ldrh	r3, [r4, #0]
1000ac12:	0052      	lsls	r2, r2, #1
1000ac14:	4313      	orrs	r3, r2
1000ac16:	8023      	strh	r3, [r4, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
1000ac18:	2310      	movs	r3, #16
1000ac1a:	e788      	b.n	1000ab2e <dmp_read_fifo+0x3a>

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        decode_gesture(fifo_data + ii);
1000ac1c:	446b      	add	r3, sp
1000ac1e:	001c      	movs	r4, r3
 */
static int decode_gesture(unsigned char *gesture)
{
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
1000ac20:	78df      	ldrb	r7, [r3, #3]
    tap = 0x3F & gesture[3];

    if (gesture[1] & INT_SRC_TAP) {
1000ac22:	785b      	ldrb	r3, [r3, #1]
1000ac24:	07da      	lsls	r2, r3, #31
1000ac26:	d50b      	bpl.n	1000ac40 <dmp_read_fifo+0x14c>
        unsigned char direction, count;
        direction = tap >> 3;
        count = (tap % 8) + 1;
        if (dmp.tap_cb)
1000ac28:	465a      	mov	r2, fp
1000ac2a:	6812      	ldr	r2, [r2, #0]
1000ac2c:	2a00      	cmp	r2, #0
1000ac2e:	d007      	beq.n	1000ac40 <dmp_read_fifo+0x14c>
            dmp.tap_cb(direction, count);
1000ac30:	2007      	movs	r0, #7
1000ac32:	0001      	movs	r1, r0
1000ac34:	08fb      	lsrs	r3, r7, #3
1000ac36:	4039      	ands	r1, r7
1000ac38:	4018      	ands	r0, r3
1000ac3a:	3101      	adds	r1, #1
1000ac3c:	4790      	blx	r2
1000ac3e:	7863      	ldrb	r3, [r4, #1]
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
1000ac40:	071b      	lsls	r3, r3, #28
1000ac42:	d5ae      	bpl.n	1000aba2 <dmp_read_fifo+0xae>
        if (dmp.android_orient_cb)
1000ac44:	465b      	mov	r3, fp
1000ac46:	685b      	ldr	r3, [r3, #4]
1000ac48:	2b00      	cmp	r3, #0
1000ac4a:	d0aa      	beq.n	1000aba2 <dmp_read_fifo+0xae>
            dmp.android_orient_cb(android_orient >> 6);
1000ac4c:	09b8      	lsrs	r0, r7, #6
1000ac4e:	4798      	blx	r3
1000ac50:	e7a7      	b.n	1000aba2 <dmp_read_fifo+0xae>
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
        return -1;
1000ac52:	2601      	movs	r6, #1
1000ac54:	4276      	negs	r6, r6
1000ac56:	e7a7      	b.n	1000aba8 <dmp_read_fifo+0xb4>
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
1000ac58:	4b05      	ldr	r3, [pc, #20]	; (1000ac70 <dmp_read_fifo+0x17c>)
1000ac5a:	4798      	blx	r3
            sensors[0] = 0;
1000ac5c:	8026      	strh	r6, [r4, #0]
            return -1;
1000ac5e:	3e01      	subs	r6, #1
1000ac60:	e7a2      	b.n	1000aba8 <dmp_read_fifo+0xb4>
1000ac62:	46c0      	nop			; (mov r8, r8)
1000ac64:	10017650 	.word	0x10017650
1000ac68:	10008df9 	.word	0x10008df9
1000ac6c:	100081a1 	.word	0x100081a1
1000ac70:	10008949 	.word	0x10008949

1000ac74 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
1000ac74:	4b02      	ldr	r3, [pc, #8]	; (1000ac80 <inv_get_gyro_on+0xc>)
1000ac76:	6b18      	ldr	r0, [r3, #48]	; 0x30
1000ac78:	05c0      	lsls	r0, r0, #23
1000ac7a:	0fc0      	lsrs	r0, r0, #31
}
1000ac7c:	4770      	bx	lr
1000ac7e:	46c0      	nop			; (mov r8, r8)
1000ac80:	100177a0 	.word	0x100177a0

1000ac84 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
1000ac84:	239e      	movs	r3, #158	; 0x9e
1000ac86:	4a02      	ldr	r2, [pc, #8]	; (1000ac90 <inv_set_compass_disturbance+0xc>)
1000ac88:	005b      	lsls	r3, r3, #1
1000ac8a:	50d0      	str	r0, [r2, r3]
}
1000ac8c:	4770      	bx	lr
1000ac8e:	46c0      	nop			; (mov r8, r8)
1000ac90:	10017660 	.word	0x10017660

1000ac94 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1000ac94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac96:	4656      	mov	r6, sl
1000ac98:	464d      	mov	r5, r9
1000ac9a:	465f      	mov	r7, fp
1000ac9c:	4644      	mov	r4, r8
1000ac9e:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000aca0:	4b3a      	ldr	r3, [pc, #232]	; (1000ad8c <inv_register_data_cb+0xf8>)
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1000aca2:	b083      	sub	sp, #12
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000aca4:	681e      	ldr	r6, [r3, #0]
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
1000aca6:	9200      	str	r2, [sp, #0]
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000aca8:	4699      	mov	r9, r3
1000acaa:	2e00      	cmp	r6, #0
1000acac:	dd22      	ble.n	1000acf4 <inv_register_data_cb+0x60>
        if ((inv_data_builder.process[kk].func == func) ||
1000acae:	685b      	ldr	r3, [r3, #4]
1000acb0:	4298      	cmp	r0, r3
1000acb2:	d017      	beq.n	1000ace4 <inv_register_data_cb+0x50>
1000acb4:	464b      	mov	r3, r9
1000acb6:	689b      	ldr	r3, [r3, #8]
1000acb8:	4299      	cmp	r1, r3
1000acba:	d013      	beq.n	1000ace4 <inv_register_data_cb+0x50>
1000acbc:	464b      	mov	r3, r9
1000acbe:	2400      	movs	r4, #0
1000acc0:	3310      	adds	r3, #16
1000acc2:	e008      	b.n	1000acd6 <inv_register_data_cb+0x42>
1000acc4:	681d      	ldr	r5, [r3, #0]
1000acc6:	4285      	cmp	r5, r0
1000acc8:	d00c      	beq.n	1000ace4 <inv_register_data_cb+0x50>
1000acca:	330c      	adds	r3, #12
                (inv_data_builder.process[kk].priority == priority)) {
1000accc:	001d      	movs	r5, r3
1000acce:	3d08      	subs	r5, #8
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
1000acd0:	682d      	ldr	r5, [r5, #0]
1000acd2:	428d      	cmp	r5, r1
1000acd4:	d006      	beq.n	1000ace4 <inv_register_data_cb+0x50>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000acd6:	3401      	adds	r4, #1
1000acd8:	42b4      	cmp	r4, r6
1000acda:	d1f3      	bne.n	1000acc4 <inv_register_data_cb+0x30>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
1000acdc:	2c13      	cmp	r4, #19
1000acde:	dd1d      	ble.n	1000ad1c <inv_register_data_cb+0x88>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
1000ace0:	200c      	movs	r0, #12
1000ace2:	e000      	b.n	1000ace6 <inv_register_data_cb+0x52>
    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
1000ace4:	2016      	movs	r0, #22
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
1000ace6:	b003      	add	sp, #12
1000ace8:	bc3c      	pop	{r2, r3, r4, r5}
1000acea:	4690      	mov	r8, r2
1000acec:	4699      	mov	r9, r3
1000acee:	46a2      	mov	sl, r4
1000acf0:	46ab      	mov	fp, r5
1000acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000acf4:	2300      	movs	r3, #0
1000acf6:	469b      	mov	fp, r3
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
1000acf8:	2e00      	cmp	r6, #0
1000acfa:	d126      	bne.n	1000ad4a <inv_register_data_cb+0xb6>
1000acfc:	9301      	str	r3, [sp, #4]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1000acfe:	9b01      	ldr	r3, [sp, #4]
1000ad00:	465d      	mov	r5, fp
1000ad02:	469c      	mov	ip, r3
1000ad04:	4465      	add	r5, ip
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
1000ad06:	9b00      	ldr	r3, [sp, #0]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1000ad08:	00ad      	lsls	r5, r5, #2
1000ad0a:	444d      	add	r5, r9
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
1000ad0c:	60eb      	str	r3, [r5, #12]
        inv_data_builder.num_cb++;
1000ad0e:	464b      	mov	r3, r9
1000ad10:	3601      	adds	r6, #1
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
1000ad12:	6068      	str	r0, [r5, #4]
        inv_data_builder.process[kk].priority = priority;
1000ad14:	60a9      	str	r1, [r5, #8]
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
1000ad16:	601e      	str	r6, [r3, #0]
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
    inv_error_t result = INV_SUCCESS;
1000ad18:	2000      	movs	r0, #0
1000ad1a:	e7e4      	b.n	1000ace6 <inv_register_data_cb+0x52>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000ad1c:	464b      	mov	r3, r9
1000ad1e:	689b      	ldr	r3, [r3, #8]
1000ad20:	4299      	cmp	r1, r3
1000ad22:	dd2f      	ble.n	1000ad84 <inv_register_data_cb+0xf0>
1000ad24:	464b      	mov	r3, r9
1000ad26:	2200      	movs	r2, #0
1000ad28:	3314      	adds	r3, #20
1000ad2a:	4693      	mov	fp, r2
1000ad2c:	e005      	b.n	1000ad3a <inv_register_data_cb+0xa6>
1000ad2e:	330c      	adds	r3, #12
                    (inv_data_builder.process[kk].priority < priority)) {
1000ad30:	001c      	movs	r4, r3
1000ad32:	3c0c      	subs	r4, #12
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000ad34:	6824      	ldr	r4, [r4, #0]
1000ad36:	42a1      	cmp	r1, r4
1000ad38:	dd07      	ble.n	1000ad4a <inv_register_data_cb+0xb6>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
1000ad3a:	2201      	movs	r2, #1
1000ad3c:	4694      	mov	ip, r2
1000ad3e:	44e3      	add	fp, ip
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000ad40:	45b3      	cmp	fp, r6
1000ad42:	d1f4      	bne.n	1000ad2e <inv_register_data_cb+0x9a>
1000ad44:	465b      	mov	r3, fp
1000ad46:	005b      	lsls	r3, r3, #1
1000ad48:	e7d8      	b.n	1000acfc <inv_register_data_cb+0x68>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1000ad4a:	45b3      	cmp	fp, r6
1000ad4c:	dafa      	bge.n	1000ad44 <inv_register_data_cb+0xb0>
1000ad4e:	0073      	lsls	r3, r6, #1
1000ad50:	199b      	adds	r3, r3, r6
1000ad52:	009b      	lsls	r3, r3, #2
1000ad54:	3b08      	subs	r3, #8
1000ad56:	444b      	add	r3, r9
1000ad58:	469a      	mov	sl, r3
1000ad5a:	465b      	mov	r3, fp
1000ad5c:	005b      	lsls	r3, r3, #1
1000ad5e:	001c      	movs	r4, r3
1000ad60:	445c      	add	r4, fp
1000ad62:	00a4      	lsls	r4, r4, #2
1000ad64:	3c08      	subs	r4, #8
1000ad66:	46a4      	mov	ip, r4
1000ad68:	9301      	str	r3, [sp, #4]
1000ad6a:	44cc      	add	ip, r9
                    inv_data_builder.process[nn] =
1000ad6c:	4654      	mov	r4, sl
1000ad6e:	4652      	mov	r2, sl
1000ad70:	340c      	adds	r4, #12
1000ad72:	caa8      	ldmia	r2!, {r3, r5, r7}
1000ad74:	c4a8      	stmia	r4!, {r3, r5, r7}
1000ad76:	230c      	movs	r3, #12
1000ad78:	425b      	negs	r3, r3
1000ad7a:	4698      	mov	r8, r3
1000ad7c:	44c2      	add	sl, r8
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
1000ad7e:	45d4      	cmp	ip, sl
1000ad80:	d1f4      	bne.n	1000ad6c <inv_register_data_cb+0xd8>
1000ad82:	e7bc      	b.n	1000acfe <inv_register_data_cb+0x6a>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
1000ad84:	2300      	movs	r3, #0
1000ad86:	469b      	mov	fp, r3
1000ad88:	e7e1      	b.n	1000ad4e <inv_register_data_cb+0xba>
1000ad8a:	46c0      	nop			; (mov r8, r8)
1000ad8c:	10017660 	.word	0x10017660

1000ad90 <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
1000ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000ad92:	4e17      	ldr	r6, [pc, #92]	; (1000adf0 <inv_unregister_data_cb+0x60>)
1000ad94:	6835      	ldr	r5, [r6, #0]
1000ad96:	2d00      	cmp	r5, #0
1000ad98:	dd10      	ble.n	1000adbc <inv_unregister_data_cb+0x2c>
        if (inv_data_builder.process[kk].func == func) {
1000ad9a:	6873      	ldr	r3, [r6, #4]
1000ad9c:	4298      	cmp	r0, r3
1000ad9e:	d025      	beq.n	1000adec <inv_unregister_data_cb+0x5c>
1000ada0:	0032      	movs	r2, r6
1000ada2:	2300      	movs	r3, #0
1000ada4:	3210      	adds	r2, #16
1000ada6:	e006      	b.n	1000adb6 <inv_unregister_data_cb+0x26>
1000ada8:	320c      	adds	r2, #12
1000adaa:	0014      	movs	r4, r2
1000adac:	3c0c      	subs	r4, #12
1000adae:	6824      	ldr	r4, [r4, #0]
1000adb0:	4284      	cmp	r4, r0
1000adb2:	d005      	beq.n	1000adc0 <inv_unregister_data_cb+0x30>
1000adb4:	000b      	movs	r3, r1
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
1000adb6:	1c59      	adds	r1, r3, #1
1000adb8:	42a9      	cmp	r1, r5
1000adba:	d1f5      	bne.n	1000ada8 <inv_unregister_data_cb+0x18>
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
1000adbc:	2000      	movs	r0, #0
1000adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000adc0:	3302      	adds	r3, #2
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
1000adc2:	42ab      	cmp	r3, r5
1000adc4:	da0f      	bge.n	1000ade6 <inv_unregister_data_cb+0x56>
1000adc6:	005a      	lsls	r2, r3, #1
1000adc8:	0069      	lsls	r1, r5, #1
1000adca:	18d3      	adds	r3, r2, r3
1000adcc:	1949      	adds	r1, r1, r5
1000adce:	009b      	lsls	r3, r3, #2
1000add0:	0089      	lsls	r1, r1, #2
1000add2:	3b08      	subs	r3, #8
1000add4:	3908      	subs	r1, #8
1000add6:	18f3      	adds	r3, r6, r3
1000add8:	1871      	adds	r1, r6, r1
                inv_data_builder.process[nn - 1] =
1000adda:	001a      	movs	r2, r3
1000addc:	320c      	adds	r2, #12
1000adde:	ca91      	ldmia	r2!, {r0, r4, r7}
1000ade0:	c391      	stmia	r3!, {r0, r4, r7}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
1000ade2:	428b      	cmp	r3, r1
1000ade4:	d1f9      	bne.n	1000adda <inv_unregister_data_cb+0x4a>
                inv_data_builder.process[nn - 1] =
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
1000ade6:	3d01      	subs	r5, #1
1000ade8:	6035      	str	r5, [r6, #0]
            return INV_SUCCESS;
1000adea:	e7e7      	b.n	1000adbc <inv_unregister_data_cb+0x2c>
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
1000adec:	2301      	movs	r3, #1
1000adee:	e7e8      	b.n	1000adc2 <inv_unregister_data_cb+0x32>
1000adf0:	10017660 	.word	0x10017660

1000adf4 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
1000adf4:	b510      	push	{r4, lr}
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
1000adf6:	4903      	ldr	r1, [pc, #12]	; (1000ae04 <inv_get_gyro+0x10>)
1000adf8:	220c      	movs	r2, #12
1000adfa:	3118      	adds	r1, #24
1000adfc:	4b02      	ldr	r3, [pc, #8]	; (1000ae08 <inv_get_gyro+0x14>)
1000adfe:	4798      	blx	r3
}
1000ae00:	bd10      	pop	{r4, pc}
1000ae02:	46c0      	nop			; (mov r8, r8)
1000ae04:	100177a0 	.word	0x100177a0
1000ae08:	1001443b 	.word	0x1001443b

1000ae0c <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000ae0c:	2200      	movs	r2, #0
1000ae0e:	5682      	ldrsb	r2, [r0, r2]
        b = 0;
1000ae10:	2300      	movs	r3, #0

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000ae12:	2a00      	cmp	r2, #0
1000ae14:	dd01      	ble.n	1000ae1a <inv_row_2_scale+0xe>
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
    return b;
}
1000ae16:	0018      	movs	r0, r3
1000ae18:	4770      	bx	lr
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
1000ae1a:	3304      	adds	r3, #4
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
1000ae1c:	2a00      	cmp	r2, #0
1000ae1e:	d1fa      	bne.n	1000ae16 <inv_row_2_scale+0xa>
        b = 4;
    else if (row[1] > 0)
1000ae20:	2201      	movs	r2, #1
1000ae22:	5682      	ldrsb	r2, [r0, r2]
        b = 1;
1000ae24:	3b03      	subs	r3, #3

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
1000ae26:	2a00      	cmp	r2, #0
1000ae28:	dcf5      	bgt.n	1000ae16 <inv_row_2_scale+0xa>
        b = 1;
    else if (row[1] < 0)
        b = 5;
1000ae2a:	3304      	adds	r3, #4
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
1000ae2c:	2a00      	cmp	r2, #0
1000ae2e:	d1f2      	bne.n	1000ae16 <inv_row_2_scale+0xa>
        b = 5;
    else if (row[2] > 0)
1000ae30:	7880      	ldrb	r0, [r0, #2]
        b = 2;
1000ae32:	3b03      	subs	r3, #3
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
1000ae34:	b240      	sxtb	r0, r0
1000ae36:	2800      	cmp	r0, #0
1000ae38:	dced      	bgt.n	1000ae16 <inv_row_2_scale+0xa>
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
1000ae3a:	1e43      	subs	r3, r0, #1
1000ae3c:	4198      	sbcs	r0, r3
1000ae3e:	2307      	movs	r3, #7
1000ae40:	1a1b      	subs	r3, r3, r0
1000ae42:	e7e8      	b.n	1000ae16 <inv_row_2_scale+0xa>

1000ae44 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1000ae44:	0001      	movs	r1, r0
1000ae46:	0002      	movs	r2, r0
    unsigned long gmag = 0;
1000ae48:	2000      	movs	r0, #0
1000ae4a:	310c      	adds	r1, #12
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1000ae4c:	ca08      	ldmia	r2!, {r3}
1000ae4e:	135b      	asrs	r3, r3, #13
        gmag += temp * temp;
1000ae50:	435b      	muls	r3, r3
1000ae52:	18c0      	adds	r0, r0, r3
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1000ae54:	4291      	cmp	r1, r2
1000ae56:	d1f9      	bne.n	1000ae4c <inv_get_gyro_sum_of_sqr+0x8>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
}
1000ae58:	4770      	bx	lr
1000ae5a:	46c0      	nop			; (mov r8, r8)

1000ae5c <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1000ae5c:	000a      	movs	r2, r1
1000ae5e:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 29);
    return result;
1000ae60:	17d3      	asrs	r3, r2, #31
1000ae62:	4c03      	ldr	r4, [pc, #12]	; (1000ae70 <inv_q29_mult+0x14>)
1000ae64:	17c1      	asrs	r1, r0, #31
1000ae66:	47a0      	blx	r4
1000ae68:	00c9      	lsls	r1, r1, #3
1000ae6a:	0f40      	lsrs	r0, r0, #29
1000ae6c:	4308      	orrs	r0, r1
#endif
}
1000ae6e:	bd10      	pop	{r4, pc}
1000ae70:	10011cf1 	.word	0x10011cf1

1000ae74 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae76:	4647      	mov	r7, r8
1000ae78:	000e      	movs	r6, r1
1000ae7a:	b480      	push	{r7}
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000ae7c:	6803      	ldr	r3, [r0, #0]
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000ae7e:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000ae80:	17d9      	asrs	r1, r3, #31
1000ae82:	6833      	ldr	r3, [r6, #0]
1000ae84:	4c5e      	ldr	r4, [pc, #376]	; (1000b000 <inv_q_mult+0x18c>)
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000ae86:	0017      	movs	r7, r2
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000ae88:	6800      	ldr	r0, [r0, #0]
1000ae8a:	6832      	ldr	r2, [r6, #0]
1000ae8c:	17db      	asrs	r3, r3, #31
1000ae8e:	47a0      	blx	r4
1000ae90:	0089      	lsls	r1, r1, #2
1000ae92:	0f83      	lsrs	r3, r0, #30
1000ae94:	430b      	orrs	r3, r1
1000ae96:	4698      	mov	r8, r3
1000ae98:	686b      	ldr	r3, [r5, #4]
1000ae9a:	6872      	ldr	r2, [r6, #4]
1000ae9c:	17d9      	asrs	r1, r3, #31
1000ae9e:	6873      	ldr	r3, [r6, #4]
1000aea0:	6868      	ldr	r0, [r5, #4]
1000aea2:	17db      	asrs	r3, r3, #31
1000aea4:	47a0      	blx	r4
1000aea6:	4643      	mov	r3, r8
1000aea8:	0089      	lsls	r1, r1, #2
1000aeaa:	0f80      	lsrs	r0, r0, #30
1000aeac:	4308      	orrs	r0, r1
1000aeae:	1a1b      	subs	r3, r3, r0
1000aeb0:	4698      	mov	r8, r3
1000aeb2:	68ab      	ldr	r3, [r5, #8]
1000aeb4:	68b2      	ldr	r2, [r6, #8]
1000aeb6:	17d9      	asrs	r1, r3, #31
1000aeb8:	68b3      	ldr	r3, [r6, #8]
1000aeba:	68a8      	ldr	r0, [r5, #8]
1000aebc:	17db      	asrs	r3, r3, #31
1000aebe:	47a0      	blx	r4
1000aec0:	4643      	mov	r3, r8
1000aec2:	0089      	lsls	r1, r1, #2
1000aec4:	0f80      	lsrs	r0, r0, #30
1000aec6:	4308      	orrs	r0, r1
1000aec8:	1a1b      	subs	r3, r3, r0
1000aeca:	4698      	mov	r8, r3
1000aecc:	68eb      	ldr	r3, [r5, #12]
1000aece:	68f2      	ldr	r2, [r6, #12]
1000aed0:	17d9      	asrs	r1, r3, #31
1000aed2:	68f3      	ldr	r3, [r6, #12]
1000aed4:	68e8      	ldr	r0, [r5, #12]
1000aed6:	17db      	asrs	r3, r3, #31
1000aed8:	47a0      	blx	r4
1000aeda:	4643      	mov	r3, r8
1000aedc:	0089      	lsls	r1, r1, #2
1000aede:	0f80      	lsrs	r0, r0, #30
1000aee0:	4308      	orrs	r0, r1
1000aee2:	1a18      	subs	r0, r3, r0
1000aee4:	6038      	str	r0, [r7, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1000aee6:	686b      	ldr	r3, [r5, #4]
1000aee8:	6832      	ldr	r2, [r6, #0]
1000aeea:	17d9      	asrs	r1, r3, #31
1000aeec:	6833      	ldr	r3, [r6, #0]
1000aeee:	6868      	ldr	r0, [r5, #4]
1000aef0:	17db      	asrs	r3, r3, #31
1000aef2:	47a0      	blx	r4
1000aef4:	0089      	lsls	r1, r1, #2
1000aef6:	0f83      	lsrs	r3, r0, #30
1000aef8:	430b      	orrs	r3, r1
1000aefa:	4698      	mov	r8, r3
1000aefc:	682b      	ldr	r3, [r5, #0]
1000aefe:	6872      	ldr	r2, [r6, #4]
1000af00:	17d9      	asrs	r1, r3, #31
1000af02:	6873      	ldr	r3, [r6, #4]
1000af04:	6828      	ldr	r0, [r5, #0]
1000af06:	17db      	asrs	r3, r3, #31
1000af08:	47a0      	blx	r4
1000af0a:	68ab      	ldr	r3, [r5, #8]
1000af0c:	0089      	lsls	r1, r1, #2
1000af0e:	0f80      	lsrs	r0, r0, #30
1000af10:	4308      	orrs	r0, r1
1000af12:	17d9      	asrs	r1, r3, #31
1000af14:	68f3      	ldr	r3, [r6, #12]
1000af16:	4480      	add	r8, r0
1000af18:	68f2      	ldr	r2, [r6, #12]
1000af1a:	68a8      	ldr	r0, [r5, #8]
1000af1c:	17db      	asrs	r3, r3, #31
1000af1e:	47a0      	blx	r4
1000af20:	68eb      	ldr	r3, [r5, #12]
1000af22:	0089      	lsls	r1, r1, #2
1000af24:	0f80      	lsrs	r0, r0, #30
1000af26:	4308      	orrs	r0, r1
1000af28:	17d9      	asrs	r1, r3, #31
1000af2a:	68b3      	ldr	r3, [r6, #8]
1000af2c:	68b2      	ldr	r2, [r6, #8]
1000af2e:	4480      	add	r8, r0
1000af30:	17db      	asrs	r3, r3, #31
1000af32:	68e8      	ldr	r0, [r5, #12]
1000af34:	47a0      	blx	r4
1000af36:	4643      	mov	r3, r8
1000af38:	0089      	lsls	r1, r1, #2
1000af3a:	0f80      	lsrs	r0, r0, #30
1000af3c:	4308      	orrs	r0, r1
1000af3e:	1a18      	subs	r0, r3, r0
1000af40:	6078      	str	r0, [r7, #4]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1000af42:	682b      	ldr	r3, [r5, #0]
1000af44:	68b2      	ldr	r2, [r6, #8]
1000af46:	17d9      	asrs	r1, r3, #31
1000af48:	68b3      	ldr	r3, [r6, #8]
1000af4a:	6828      	ldr	r0, [r5, #0]
1000af4c:	17db      	asrs	r3, r3, #31
1000af4e:	47a0      	blx	r4
1000af50:	0089      	lsls	r1, r1, #2
1000af52:	0f83      	lsrs	r3, r0, #30
1000af54:	430b      	orrs	r3, r1
1000af56:	4698      	mov	r8, r3
1000af58:	686b      	ldr	r3, [r5, #4]
1000af5a:	68f2      	ldr	r2, [r6, #12]
1000af5c:	17d9      	asrs	r1, r3, #31
1000af5e:	68f3      	ldr	r3, [r6, #12]
1000af60:	6868      	ldr	r0, [r5, #4]
1000af62:	17db      	asrs	r3, r3, #31
1000af64:	47a0      	blx	r4
1000af66:	4643      	mov	r3, r8
1000af68:	0089      	lsls	r1, r1, #2
1000af6a:	0f80      	lsrs	r0, r0, #30
1000af6c:	4308      	orrs	r0, r1
1000af6e:	1a1b      	subs	r3, r3, r0
1000af70:	4698      	mov	r8, r3
1000af72:	68ab      	ldr	r3, [r5, #8]
1000af74:	6832      	ldr	r2, [r6, #0]
1000af76:	17d9      	asrs	r1, r3, #31
1000af78:	6833      	ldr	r3, [r6, #0]
1000af7a:	68a8      	ldr	r0, [r5, #8]
1000af7c:	17db      	asrs	r3, r3, #31
1000af7e:	47a0      	blx	r4
1000af80:	68eb      	ldr	r3, [r5, #12]
1000af82:	0089      	lsls	r1, r1, #2
1000af84:	0f80      	lsrs	r0, r0, #30
1000af86:	4308      	orrs	r0, r1
1000af88:	17d9      	asrs	r1, r3, #31
1000af8a:	6873      	ldr	r3, [r6, #4]
1000af8c:	6872      	ldr	r2, [r6, #4]
1000af8e:	4480      	add	r8, r0
1000af90:	17db      	asrs	r3, r3, #31
1000af92:	68e8      	ldr	r0, [r5, #12]
1000af94:	47a0      	blx	r4
1000af96:	0089      	lsls	r1, r1, #2
1000af98:	0f80      	lsrs	r0, r0, #30
1000af9a:	4308      	orrs	r0, r1
1000af9c:	4440      	add	r0, r8
1000af9e:	60b8      	str	r0, [r7, #8]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1000afa0:	68b3      	ldr	r3, [r6, #8]
1000afa2:	17d9      	asrs	r1, r3, #31
1000afa4:	686b      	ldr	r3, [r5, #4]
1000afa6:	686a      	ldr	r2, [r5, #4]
1000afa8:	17db      	asrs	r3, r3, #31
1000afaa:	68b0      	ldr	r0, [r6, #8]
1000afac:	47a0      	blx	r4
1000afae:	0089      	lsls	r1, r1, #2
1000afb0:	0f83      	lsrs	r3, r0, #30
1000afb2:	430b      	orrs	r3, r1
1000afb4:	4698      	mov	r8, r3
1000afb6:	682b      	ldr	r3, [r5, #0]
1000afb8:	68f2      	ldr	r2, [r6, #12]
1000afba:	17d9      	asrs	r1, r3, #31
1000afbc:	68f3      	ldr	r3, [r6, #12]
1000afbe:	6828      	ldr	r0, [r5, #0]
1000afc0:	17db      	asrs	r3, r3, #31
1000afc2:	47a0      	blx	r4
1000afc4:	6873      	ldr	r3, [r6, #4]
1000afc6:	0089      	lsls	r1, r1, #2
1000afc8:	0f80      	lsrs	r0, r0, #30
1000afca:	4308      	orrs	r0, r1
1000afcc:	17d9      	asrs	r1, r3, #31
1000afce:	68ab      	ldr	r3, [r5, #8]
1000afd0:	68aa      	ldr	r2, [r5, #8]
1000afd2:	4480      	add	r8, r0
1000afd4:	17db      	asrs	r3, r3, #31
1000afd6:	6870      	ldr	r0, [r6, #4]
1000afd8:	47a0      	blx	r4
1000afda:	4643      	mov	r3, r8
1000afdc:	0089      	lsls	r1, r1, #2
1000afde:	0f80      	lsrs	r0, r0, #30
1000afe0:	4308      	orrs	r0, r1
1000afe2:	68ea      	ldr	r2, [r5, #12]
1000afe4:	1a1b      	subs	r3, r3, r0
1000afe6:	6830      	ldr	r0, [r6, #0]
1000afe8:	4698      	mov	r8, r3
1000afea:	17c1      	asrs	r1, r0, #31
1000afec:	17d3      	asrs	r3, r2, #31
1000afee:	47a0      	blx	r4
1000aff0:	0089      	lsls	r1, r1, #2
1000aff2:	0f80      	lsrs	r0, r0, #30
1000aff4:	4308      	orrs	r0, r1
1000aff6:	4440      	add	r0, r8
1000aff8:	60f8      	str	r0, [r7, #12]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1000affa:	bc04      	pop	{r2}
1000affc:	4690      	mov	r8, r2
1000affe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b000:	10011cf1 	.word	0x10011cf1

1000b004 <inv_q_invert>:
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000b004:	6803      	ldr	r3, [r0, #0]
1000b006:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000b008:	6843      	ldr	r3, [r0, #4]
1000b00a:	425b      	negs	r3, r3
1000b00c:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000b00e:	6883      	ldr	r3, [r0, #8]
1000b010:	425b      	negs	r3, r3
1000b012:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000b014:	68c3      	ldr	r3, [r0, #12]
1000b016:	425b      	negs	r3, r3
1000b018:	60cb      	str	r3, [r1, #12]
}
1000b01a:	4770      	bx	lr

1000b01c <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b01e:	464f      	mov	r7, r9
1000b020:	4646      	mov	r6, r8
1000b022:	b4c0      	push	{r6, r7}
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b024:	6843      	ldr	r3, [r0, #4]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000b026:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b028:	4698      	mov	r8, r3
1000b02a:	17db      	asrs	r3, r3, #31
1000b02c:	4699      	mov	r9, r3
1000b02e:	6803      	ldr	r3, [r0, #0]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000b030:	0004      	movs	r4, r0
    rot[0] =
1000b032:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b034:	17d9      	asrs	r1, r3, #31
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1000b036:	4d68      	ldr	r5, [pc, #416]	; (1000b1d8 <inv_quaternion_to_rotation+0x1bc>)
1000b038:	000b      	movs	r3, r1
1000b03a:	0010      	movs	r0, r2
1000b03c:	47a8      	blx	r5
1000b03e:	00c9      	lsls	r1, r1, #3
1000b040:	0f47      	lsrs	r7, r0, #29
1000b042:	430f      	orrs	r7, r1
1000b044:	4642      	mov	r2, r8
1000b046:	464b      	mov	r3, r9
1000b048:	4640      	mov	r0, r8
1000b04a:	4649      	mov	r1, r9
1000b04c:	47a8      	blx	r5
1000b04e:	23c0      	movs	r3, #192	; 0xc0
1000b050:	061b      	lsls	r3, r3, #24
1000b052:	469c      	mov	ip, r3
1000b054:	00c9      	lsls	r1, r1, #3
1000b056:	0f40      	lsrs	r0, r0, #29
1000b058:	4308      	orrs	r0, r1
1000b05a:	1838      	adds	r0, r7, r0
1000b05c:	4460      	add	r0, ip
1000b05e:	6030      	str	r0, [r6, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1000b060:	6863      	ldr	r3, [r4, #4]
1000b062:	68a2      	ldr	r2, [r4, #8]
1000b064:	17d9      	asrs	r1, r3, #31
1000b066:	68a3      	ldr	r3, [r4, #8]
1000b068:	6860      	ldr	r0, [r4, #4]
1000b06a:	17db      	asrs	r3, r3, #31
1000b06c:	47a8      	blx	r5
1000b06e:	68e3      	ldr	r3, [r4, #12]
1000b070:	00c9      	lsls	r1, r1, #3
1000b072:	0f47      	lsrs	r7, r0, #29
1000b074:	430f      	orrs	r7, r1
1000b076:	17d9      	asrs	r1, r3, #31
1000b078:	6823      	ldr	r3, [r4, #0]
1000b07a:	6822      	ldr	r2, [r4, #0]
1000b07c:	68e0      	ldr	r0, [r4, #12]
1000b07e:	17db      	asrs	r3, r3, #31
1000b080:	47a8      	blx	r5
1000b082:	00c9      	lsls	r1, r1, #3
1000b084:	0f40      	lsrs	r0, r0, #29
1000b086:	4308      	orrs	r0, r1
1000b088:	1a3f      	subs	r7, r7, r0
1000b08a:	6077      	str	r7, [r6, #4]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1000b08c:	68a3      	ldr	r3, [r4, #8]
1000b08e:	6822      	ldr	r2, [r4, #0]
1000b090:	17d9      	asrs	r1, r3, #31
1000b092:	6823      	ldr	r3, [r4, #0]
1000b094:	68a0      	ldr	r0, [r4, #8]
1000b096:	17db      	asrs	r3, r3, #31
1000b098:	47a8      	blx	r5
1000b09a:	6863      	ldr	r3, [r4, #4]
1000b09c:	00c9      	lsls	r1, r1, #3
1000b09e:	0f47      	lsrs	r7, r0, #29
1000b0a0:	430f      	orrs	r7, r1
1000b0a2:	17d9      	asrs	r1, r3, #31
1000b0a4:	68e3      	ldr	r3, [r4, #12]
1000b0a6:	68e2      	ldr	r2, [r4, #12]
1000b0a8:	6860      	ldr	r0, [r4, #4]
1000b0aa:	17db      	asrs	r3, r3, #31
1000b0ac:	47a8      	blx	r5
1000b0ae:	00c9      	lsls	r1, r1, #3
1000b0b0:	0f40      	lsrs	r0, r0, #29
1000b0b2:	4308      	orrs	r0, r1
1000b0b4:	1838      	adds	r0, r7, r0
1000b0b6:	60b0      	str	r0, [r6, #8]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1000b0b8:	68e3      	ldr	r3, [r4, #12]
1000b0ba:	6822      	ldr	r2, [r4, #0]
1000b0bc:	17d9      	asrs	r1, r3, #31
1000b0be:	6823      	ldr	r3, [r4, #0]
1000b0c0:	68e0      	ldr	r0, [r4, #12]
1000b0c2:	17db      	asrs	r3, r3, #31
1000b0c4:	47a8      	blx	r5
1000b0c6:	6863      	ldr	r3, [r4, #4]
1000b0c8:	00c9      	lsls	r1, r1, #3
1000b0ca:	0f47      	lsrs	r7, r0, #29
1000b0cc:	430f      	orrs	r7, r1
1000b0ce:	17d9      	asrs	r1, r3, #31
1000b0d0:	68a3      	ldr	r3, [r4, #8]
1000b0d2:	68a2      	ldr	r2, [r4, #8]
1000b0d4:	17db      	asrs	r3, r3, #31
1000b0d6:	6860      	ldr	r0, [r4, #4]
1000b0d8:	47a8      	blx	r5
1000b0da:	00c9      	lsls	r1, r1, #3
1000b0dc:	0f40      	lsrs	r0, r0, #29
1000b0de:	4308      	orrs	r0, r1
1000b0e0:	1838      	adds	r0, r7, r0
1000b0e2:	60f0      	str	r0, [r6, #12]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b0e4:	68a3      	ldr	r3, [r4, #8]
1000b0e6:	4698      	mov	r8, r3
1000b0e8:	17db      	asrs	r3, r3, #31
1000b0ea:	4699      	mov	r9, r3
1000b0ec:	6823      	ldr	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000b0ee:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b0f0:	17d9      	asrs	r1, r3, #31
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000b0f2:	000b      	movs	r3, r1
1000b0f4:	0010      	movs	r0, r2
1000b0f6:	47a8      	blx	r5
1000b0f8:	00c9      	lsls	r1, r1, #3
1000b0fa:	0f47      	lsrs	r7, r0, #29
1000b0fc:	464b      	mov	r3, r9
1000b0fe:	430f      	orrs	r7, r1
1000b100:	4642      	mov	r2, r8
1000b102:	4649      	mov	r1, r9
1000b104:	4640      	mov	r0, r8
1000b106:	47a8      	blx	r5
1000b108:	23c0      	movs	r3, #192	; 0xc0
1000b10a:	061b      	lsls	r3, r3, #24
1000b10c:	469c      	mov	ip, r3
1000b10e:	00c9      	lsls	r1, r1, #3
1000b110:	0f40      	lsrs	r0, r0, #29
1000b112:	4308      	orrs	r0, r1
1000b114:	1838      	adds	r0, r7, r0
1000b116:	4460      	add	r0, ip
1000b118:	6130      	str	r0, [r6, #16]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1000b11a:	68a3      	ldr	r3, [r4, #8]
1000b11c:	68e2      	ldr	r2, [r4, #12]
1000b11e:	17d9      	asrs	r1, r3, #31
1000b120:	68e3      	ldr	r3, [r4, #12]
1000b122:	68a0      	ldr	r0, [r4, #8]
1000b124:	17db      	asrs	r3, r3, #31
1000b126:	47a8      	blx	r5
1000b128:	6863      	ldr	r3, [r4, #4]
1000b12a:	00c9      	lsls	r1, r1, #3
1000b12c:	0f47      	lsrs	r7, r0, #29
1000b12e:	430f      	orrs	r7, r1
1000b130:	17d9      	asrs	r1, r3, #31
1000b132:	6823      	ldr	r3, [r4, #0]
1000b134:	6822      	ldr	r2, [r4, #0]
1000b136:	6860      	ldr	r0, [r4, #4]
1000b138:	17db      	asrs	r3, r3, #31
1000b13a:	47a8      	blx	r5
1000b13c:	00c9      	lsls	r1, r1, #3
1000b13e:	0f40      	lsrs	r0, r0, #29
1000b140:	4308      	orrs	r0, r1
1000b142:	1a3f      	subs	r7, r7, r0
1000b144:	6177      	str	r7, [r6, #20]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1000b146:	6863      	ldr	r3, [r4, #4]
1000b148:	68e2      	ldr	r2, [r4, #12]
1000b14a:	17d9      	asrs	r1, r3, #31
1000b14c:	68e3      	ldr	r3, [r4, #12]
1000b14e:	6860      	ldr	r0, [r4, #4]
1000b150:	17db      	asrs	r3, r3, #31
1000b152:	47a8      	blx	r5
1000b154:	68a3      	ldr	r3, [r4, #8]
1000b156:	00c9      	lsls	r1, r1, #3
1000b158:	0f47      	lsrs	r7, r0, #29
1000b15a:	430f      	orrs	r7, r1
1000b15c:	17d9      	asrs	r1, r3, #31
1000b15e:	6823      	ldr	r3, [r4, #0]
1000b160:	6822      	ldr	r2, [r4, #0]
1000b162:	68a0      	ldr	r0, [r4, #8]
1000b164:	17db      	asrs	r3, r3, #31
1000b166:	47a8      	blx	r5
1000b168:	00c9      	lsls	r1, r1, #3
1000b16a:	0f40      	lsrs	r0, r0, #29
1000b16c:	4308      	orrs	r0, r1
1000b16e:	1a3f      	subs	r7, r7, r0
1000b170:	61b7      	str	r7, [r6, #24]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1000b172:	6823      	ldr	r3, [r4, #0]
1000b174:	6862      	ldr	r2, [r4, #4]
1000b176:	17d9      	asrs	r1, r3, #31
1000b178:	6863      	ldr	r3, [r4, #4]
1000b17a:	6820      	ldr	r0, [r4, #0]
1000b17c:	17db      	asrs	r3, r3, #31
1000b17e:	47a8      	blx	r5
1000b180:	68e3      	ldr	r3, [r4, #12]
1000b182:	00c9      	lsls	r1, r1, #3
1000b184:	0f47      	lsrs	r7, r0, #29
1000b186:	430f      	orrs	r7, r1
1000b188:	17d9      	asrs	r1, r3, #31
1000b18a:	68a3      	ldr	r3, [r4, #8]
1000b18c:	68a2      	ldr	r2, [r4, #8]
1000b18e:	68e0      	ldr	r0, [r4, #12]
1000b190:	17db      	asrs	r3, r3, #31
1000b192:	47a8      	blx	r5
1000b194:	00c9      	lsls	r1, r1, #3
1000b196:	0f40      	lsrs	r0, r0, #29
1000b198:	4308      	orrs	r0, r1
1000b19a:	1838      	adds	r0, r7, r0
1000b19c:	61f0      	str	r0, [r6, #28]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000b19e:	6827      	ldr	r7, [r4, #0]
1000b1a0:	68e0      	ldr	r0, [r4, #12]
1000b1a2:	17fb      	asrs	r3, r7, #31
1000b1a4:	17c1      	asrs	r1, r0, #31
1000b1a6:	4698      	mov	r8, r3
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1000b1a8:	0002      	movs	r2, r0
1000b1aa:	000b      	movs	r3, r1
1000b1ac:	47a8      	blx	r5
1000b1ae:	00c9      	lsls	r1, r1, #3
1000b1b0:	0f44      	lsrs	r4, r0, #29
1000b1b2:	4643      	mov	r3, r8
1000b1b4:	430c      	orrs	r4, r1
1000b1b6:	003a      	movs	r2, r7
1000b1b8:	0038      	movs	r0, r7
1000b1ba:	4641      	mov	r1, r8
1000b1bc:	47a8      	blx	r5
1000b1be:	23c0      	movs	r3, #192	; 0xc0
1000b1c0:	061b      	lsls	r3, r3, #24
1000b1c2:	469c      	mov	ip, r3
1000b1c4:	00c9      	lsls	r1, r1, #3
1000b1c6:	0f40      	lsrs	r0, r0, #29
1000b1c8:	4308      	orrs	r0, r1
1000b1ca:	1820      	adds	r0, r4, r0
1000b1cc:	4460      	add	r0, ip
1000b1ce:	6230      	str	r0, [r6, #32]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1000b1d0:	bc0c      	pop	{r2, r3}
1000b1d2:	4690      	mov	r8, r2
1000b1d4:	4699      	mov	r9, r3
1000b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b1d8:	10011cf1 	.word	0x10011cf1

1000b1dc <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000b1de:	4f07      	ldr	r7, [pc, #28]	; (1000b1fc <inv_orientation_matrix_to_scalar+0x20>)
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000b1e0:	0005      	movs	r5, r0
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000b1e2:	47b8      	blx	r7
1000b1e4:	0004      	movs	r4, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1000b1e6:	1ce8      	adds	r0, r5, #3
1000b1e8:	47b8      	blx	r7
1000b1ea:	0006      	movs	r6, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1000b1ec:	1da8      	adds	r0, r5, #6
1000b1ee:	47b8      	blx	r7
1000b1f0:	00f6      	lsls	r6, r6, #3
1000b1f2:	0180      	lsls	r0, r0, #6
1000b1f4:	4330      	orrs	r0, r6
1000b1f6:	4304      	orrs	r4, r0


    return scalar;
1000b1f8:	b2a0      	uxth	r0, r4
}
1000b1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b1fc:	1000ae0d 	.word	0x1000ae0d

1000b200 <inv_set_compass_correction>:
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000b200:	2301      	movs	r3, #1
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000b202:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000b204:	4c06      	ldr	r4, [pc, #24]	; (1000b220 <inv_set_compass_correction+0x20>)
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000b206:	000d      	movs	r5, r1
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000b208:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000b20a:	0001      	movs	r1, r0
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000b20c:	4313      	orrs	r3, r2
1000b20e:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000b210:	0023      	movs	r3, r4
1000b212:	3340      	adds	r3, #64	; 0x40
1000b214:	2210      	movs	r2, #16
1000b216:	0018      	movs	r0, r3
1000b218:	4b02      	ldr	r3, [pc, #8]	; (1000b224 <inv_set_compass_correction+0x24>)
1000b21a:	4798      	blx	r3
    rh.nav_timestamp = timestamp;
1000b21c:	6225      	str	r5, [r4, #32]
}
1000b21e:	bd70      	pop	{r4, r5, r6, pc}
1000b220:	10017938 	.word	0x10017938
1000b224:	1001443b 	.word	0x1001443b

1000b228 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000b228:	b570      	push	{r4, r5, r6, lr}
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000b22a:	4c05      	ldr	r4, [pc, #20]	; (1000b240 <inv_get_compass_correction+0x18>)
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000b22c:	000d      	movs	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000b22e:	0021      	movs	r1, r4
1000b230:	2210      	movs	r2, #16
1000b232:	3140      	adds	r1, #64	; 0x40
1000b234:	4b03      	ldr	r3, [pc, #12]	; (1000b244 <inv_get_compass_correction+0x1c>)
1000b236:	4798      	blx	r3
    *timestamp = rh.nav_timestamp;
1000b238:	6a23      	ldr	r3, [r4, #32]
1000b23a:	602b      	str	r3, [r5, #0]
}
1000b23c:	bd70      	pop	{r4, r5, r6, pc}
1000b23e:	46c0      	nop			; (mov r8, r8)
1000b240:	10017938 	.word	0x10017938
1000b244:	1001443b 	.word	0x1001443b

1000b248 <inv_get_acc_state>:
/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
    return rh.acc_state;
1000b248:	4b01      	ldr	r3, [pc, #4]	; (1000b250 <inv_get_acc_state+0x8>)
1000b24a:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
1000b24c:	4770      	bx	lr
1000b24e:	46c0      	nop			; (mov r8, r8)
1000b250:	10017938 	.word	0x10017938

1000b254 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1000b254:	b510      	push	{r4, lr}
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1000b256:	4903      	ldr	r1, [pc, #12]	; (1000b264 <inv_get_local_field+0x10>)
1000b258:	220c      	movs	r2, #12
1000b25a:	3128      	adds	r1, #40	; 0x28
1000b25c:	4b02      	ldr	r3, [pc, #8]	; (1000b268 <inv_get_local_field+0x14>)
1000b25e:	4798      	blx	r3
}
1000b260:	bd10      	pop	{r4, pc}
1000b262:	46c0      	nop			; (mov r8, r8)
1000b264:	10017938 	.word	0x10017938
1000b268:	1001443b 	.word	0x1001443b

1000b26c <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000b26e:	4c12      	ldr	r4, [pc, #72]	; (1000b2b8 <inv_get_gravity+0x4c>)
1000b270:	4d12      	ldr	r5, [pc, #72]	; (1000b2bc <inv_get_gravity+0x50>)
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000b272:	0006      	movs	r6, r0
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000b274:	68e1      	ldr	r1, [r4, #12]
1000b276:	6860      	ldr	r0, [r4, #4]
1000b278:	47a8      	blx	r5
1000b27a:	6821      	ldr	r1, [r4, #0]
1000b27c:	0007      	movs	r7, r0
1000b27e:	68a0      	ldr	r0, [r4, #8]
1000b280:	47a8      	blx	r5
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1000b282:	1a3f      	subs	r7, r7, r0
1000b284:	6037      	str	r7, [r6, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1000b286:	68e1      	ldr	r1, [r4, #12]
1000b288:	68a0      	ldr	r0, [r4, #8]
1000b28a:	47a8      	blx	r5
1000b28c:	6821      	ldr	r1, [r4, #0]
1000b28e:	0007      	movs	r7, r0
1000b290:	6860      	ldr	r0, [r4, #4]
1000b292:	47a8      	blx	r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1000b294:	1838      	adds	r0, r7, r0
1000b296:	6070      	str	r0, [r6, #4]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1000b298:	68e1      	ldr	r1, [r4, #12]
1000b29a:	0008      	movs	r0, r1
1000b29c:	47a8      	blx	r5
1000b29e:	0007      	movs	r7, r0
1000b2a0:	6820      	ldr	r0, [r4, #0]
1000b2a2:	0001      	movs	r1, r0
1000b2a4:	47a8      	blx	r5
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1000b2a6:	23c0      	movs	r3, #192	; 0xc0
1000b2a8:	061b      	lsls	r3, r3, #24
1000b2aa:	469c      	mov	ip, r3
1000b2ac:	1838      	adds	r0, r7, r0
1000b2ae:	4460      	add	r0, ip
1000b2b0:	60b0      	str	r0, [r6, #8]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
}
1000b2b2:	2000      	movs	r0, #0
1000b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b2b6:	46c0      	nop			; (mov r8, r8)
1000b2b8:	10017938 	.word	0x10017938
1000b2bc:	1000ae5d 	.word	0x1000ae5d

1000b2c0 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1000b2c0:	b510      	push	{r4, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1000b2c2:	4903      	ldr	r1, [pc, #12]	; (1000b2d0 <inv_get_6axis_quaternion+0x10>)
1000b2c4:	2210      	movs	r2, #16
1000b2c6:	3110      	adds	r1, #16
1000b2c8:	4b02      	ldr	r3, [pc, #8]	; (1000b2d4 <inv_get_6axis_quaternion+0x14>)
1000b2ca:	4798      	blx	r3
    return INV_SUCCESS;
}
1000b2cc:	2000      	movs	r0, #0
1000b2ce:	bd10      	pop	{r4, pc}
1000b2d0:	10017938 	.word	0x10017938
1000b2d4:	1001443b 	.word	0x1001443b

1000b2d8 <inv_got_compass_bias>:
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
    return rh.got_compass_bias;
1000b2d8:	4b01      	ldr	r3, [pc, #4]	; (1000b2e0 <inv_got_compass_bias+0x8>)
1000b2da:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000b2dc:	4770      	bx	lr
1000b2de:	46c0      	nop			; (mov r8, r8)
1000b2e0:	10017938 	.word	0x10017938

1000b2e4 <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000b2e4:	4a06      	ldr	r2, [pc, #24]	; (1000b300 <inv_register_mpl_start_notification+0x1c>)
        return INV_ERROR_INVALID_PARAMETER;
1000b2e6:	2116      	movs	r1, #22
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000b2e8:	6813      	ldr	r3, [r2, #0]
1000b2ea:	2b13      	cmp	r3, #19
1000b2ec:	dd01      	ble.n	1000b2f2 <inv_register_mpl_start_notification+0xe>
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
    inv_start_cb.num_cb++;
    return INV_SUCCESS;
}
1000b2ee:	0008      	movs	r0, r1
1000b2f0:	4770      	bx	lr
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000b2f2:	0099      	lsls	r1, r3, #2
1000b2f4:	1851      	adds	r1, r2, r1
    inv_start_cb.num_cb++;
1000b2f6:	3301      	adds	r3, #1
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000b2f8:	6048      	str	r0, [r1, #4]
    inv_start_cb.num_cb++;
1000b2fa:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1000b2fc:	2100      	movs	r1, #0
1000b2fe:	e7f6      	b.n	1000b2ee <inv_register_mpl_start_notification+0xa>
1000b300:	100179c0 	.word	0x100179c0

1000b304 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b304:	78c0      	ldrb	r0, [r0, #3]
1000b306:	2800      	cmp	r0, #0
1000b308:	d000      	beq.n	1000b30c <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b30a:	20e2      	movs	r0, #226	; 0xe2
}
1000b30c:	4770      	bx	lr
1000b30e:	46c0      	nop			; (mov r8, r8)

1000b310 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000b310:	2000      	movs	r0, #0
1000b312:	4770      	bx	lr

1000b314 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000b314:	229b      	movs	r2, #155	; 0x9b
1000b316:	4b20      	ldr	r3, [pc, #128]	; (1000b398 <ble_disconnected_state_handler+0x84>)
1000b318:	0092      	lsls	r2, r2, #2
1000b31a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b31c:	0004      	movs	r4, r0
1000b31e:	1898      	adds	r0, r3, r2
1000b320:	3a91      	subs	r2, #145	; 0x91
1000b322:	4647      	mov	r7, r8
1000b324:	3aff      	subs	r2, #255	; 0xff
1000b326:	4694      	mov	ip, r2
1000b328:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b32a:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b32c:	2600      	movs	r6, #0
1000b32e:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000b330:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
1000b332:	4f1a      	ldr	r7, [pc, #104]	; (1000b39c <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b334:	001a      	movs	r2, r3
1000b336:	3a56      	subs	r2, #86	; 0x56
1000b338:	8811      	ldrh	r1, [r2, #0]
1000b33a:	8822      	ldrh	r2, [r4, #0]
1000b33c:	4291      	cmp	r1, r2
1000b33e:	d00e      	beq.n	1000b35e <ble_disconnected_state_handler+0x4a>
1000b340:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b342:	4283      	cmp	r3, r0
1000b344:	d1f6      	bne.n	1000b334 <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000b346:	4b16      	ldr	r3, [pc, #88]	; (1000b3a0 <ble_disconnected_state_handler+0x8c>)
1000b348:	4816      	ldr	r0, [pc, #88]	; (1000b3a4 <ble_disconnected_state_handler+0x90>)
1000b34a:	4798      	blx	r3
1000b34c:	8822      	ldrh	r2, [r4, #0]
1000b34e:	78a1      	ldrb	r1, [r4, #2]
1000b350:	4b15      	ldr	r3, [pc, #84]	; (1000b3a8 <ble_disconnected_state_handler+0x94>)
1000b352:	4816      	ldr	r0, [pc, #88]	; (1000b3ac <ble_disconnected_state_handler+0x98>)
1000b354:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000b356:	2000      	movs	r0, #0
1000b358:	bc04      	pop	{r2}
1000b35a:	4690      	mov	r8, r2
1000b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b35e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b360:	2a05      	cmp	r2, #5
1000b362:	d00e      	beq.n	1000b382 <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b364:	2a08      	cmp	r2, #8
1000b366:	d00c      	beq.n	1000b382 <ble_disconnected_state_handler+0x6e>
1000b368:	2a07      	cmp	r2, #7
1000b36a:	d808      	bhi.n	1000b37e <ble_disconnected_state_handler+0x6a>
1000b36c:	0029      	movs	r1, r5
1000b36e:	4091      	lsls	r1, r2
1000b370:	000a      	movs	r2, r1
1000b372:	4661      	mov	r1, ip
1000b374:	4211      	tst	r1, r2
1000b376:	d106      	bne.n	1000b386 <ble_disconnected_state_handler+0x72>
1000b378:	4641      	mov	r1, r8
1000b37a:	4211      	tst	r1, r2
1000b37c:	d1e0      	bne.n	1000b340 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b37e:	701e      	strb	r6, [r3, #0]
				break;				
1000b380:	e7de      	b.n	1000b340 <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b382:	701d      	strb	r5, [r3, #0]
1000b384:	e7dc      	b.n	1000b340 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b386:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000b388:	783a      	ldrb	r2, [r7, #0]
1000b38a:	2a00      	cmp	r2, #0
1000b38c:	d0d8      	beq.n	1000b340 <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
1000b38e:	783a      	ldrb	r2, [r7, #0]
1000b390:	3a01      	subs	r2, #1
1000b392:	b2d2      	uxtb	r2, r2
1000b394:	703a      	strb	r2, [r7, #0]
1000b396:	e7d3      	b.n	1000b340 <ble_disconnected_state_handler+0x2c>
1000b398:	1001911e 	.word	0x1001911e
1000b39c:	1001932c 	.word	0x1001932c
1000b3a0:	100146e1 	.word	0x100146e1
1000b3a4:	100158a0 	.word	0x100158a0
1000b3a8:	100145c1 	.word	0x100145c1
1000b3ac:	10016a6c 	.word	0x10016a6c

1000b3b0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3b2:	4647      	mov	r7, r8
1000b3b4:	b480      	push	{r7}
1000b3b6:	4f33      	ldr	r7, [pc, #204]	; (1000b484 <ble_pair_done_handler+0xd4>)
1000b3b8:	0006      	movs	r6, r0
1000b3ba:	003b      	movs	r3, r7
1000b3bc:	2400      	movs	r4, #0
1000b3be:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b3c0:	891a      	ldrh	r2, [r3, #8]
1000b3c2:	42aa      	cmp	r2, r5
1000b3c4:	d022      	beq.n	1000b40c <ble_pair_done_handler+0x5c>
1000b3c6:	3401      	adds	r4, #1
1000b3c8:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b3ca:	2c05      	cmp	r4, #5
1000b3cc:	d1f8      	bne.n	1000b3c0 <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b3ce:	7933      	ldrb	r3, [r6, #4]
1000b3d0:	2b00      	cmp	r3, #0
1000b3d2:	d049      	beq.n	1000b468 <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000b3d4:	4b2c      	ldr	r3, [pc, #176]	; (1000b488 <ble_pair_done_handler+0xd8>)
1000b3d6:	5cfb      	ldrb	r3, [r7, r3]
1000b3d8:	2b01      	cmp	r3, #1
1000b3da:	d912      	bls.n	1000b402 <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
1000b3dc:	4f2b      	ldr	r7, [pc, #172]	; (1000b48c <ble_pair_done_handler+0xdc>)
1000b3de:	4d2c      	ldr	r5, [pc, #176]	; (1000b490 <ble_pair_done_handler+0xe0>)
1000b3e0:	0038      	movs	r0, r7
1000b3e2:	47a8      	blx	r5
1000b3e4:	482b      	ldr	r0, [pc, #172]	; (1000b494 <ble_pair_done_handler+0xe4>)
1000b3e6:	4c2c      	ldr	r4, [pc, #176]	; (1000b498 <ble_pair_done_handler+0xe8>)
1000b3e8:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b3ea:	8870      	ldrh	r0, [r6, #2]
1000b3ec:	2113      	movs	r1, #19
1000b3ee:	4b2b      	ldr	r3, [pc, #172]	; (1000b49c <ble_pair_done_handler+0xec>)
1000b3f0:	4798      	blx	r3
1000b3f2:	2800      	cmp	r0, #0
1000b3f4:	d005      	beq.n	1000b402 <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
1000b3f6:	0038      	movs	r0, r7
1000b3f8:	47a8      	blx	r5
1000b3fa:	4829      	ldr	r0, [pc, #164]	; (1000b4a0 <ble_pair_done_handler+0xf0>)
1000b3fc:	47a0      	blx	r4
				return AT_BLE_FAILURE;
1000b3fe:	25e2      	movs	r5, #226	; 0xe2
1000b400:	e000      	b.n	1000b404 <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b402:	2500      	movs	r5, #0
}
1000b404:	0028      	movs	r0, r5
1000b406:	bc04      	pop	{r2}
1000b408:	4690      	mov	r8, r2
1000b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b40c:	001a      	movs	r2, r3
1000b40e:	325e      	adds	r2, #94	; 0x5e
1000b410:	7812      	ldrb	r2, [r2, #0]
1000b412:	2a03      	cmp	r2, #3
1000b414:	d1d7      	bne.n	1000b3c6 <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b416:	7935      	ldrb	r5, [r6, #4]
1000b418:	2d00      	cmp	r5, #0
1000b41a:	d1df      	bne.n	1000b3dc <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b41c:	4b1c      	ldr	r3, [pc, #112]	; (1000b490 <ble_pair_done_handler+0xe0>)
1000b41e:	481b      	ldr	r0, [pc, #108]	; (1000b48c <ble_pair_done_handler+0xdc>)
1000b420:	4798      	blx	r3
1000b422:	4b1d      	ldr	r3, [pc, #116]	; (1000b498 <ble_pair_done_handler+0xe8>)
1000b424:	481f      	ldr	r0, [pc, #124]	; (1000b4a4 <ble_pair_done_handler+0xf4>)
1000b426:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b428:	0163      	lsls	r3, r4, #5
1000b42a:	1b1c      	subs	r4, r3, r4
1000b42c:	7832      	ldrb	r2, [r6, #0]
1000b42e:	00a4      	lsls	r4, r4, #2
1000b430:	193b      	adds	r3, r7, r4
1000b432:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b434:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b436:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b438:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b43a:	2205      	movs	r2, #5
1000b43c:	335e      	adds	r3, #94	; 0x5e
1000b43e:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b440:	1938      	adds	r0, r7, r4
1000b442:	4b19      	ldr	r3, [pc, #100]	; (1000b4a8 <ble_pair_done_handler+0xf8>)
1000b444:	3122      	adds	r1, #34	; 0x22
1000b446:	320b      	adds	r2, #11
1000b448:	3036      	adds	r0, #54	; 0x36
1000b44a:	4698      	mov	r8, r3
1000b44c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b44e:	0031      	movs	r1, r6
1000b450:	1938      	adds	r0, r7, r4
1000b452:	3132      	adds	r1, #50	; 0x32
1000b454:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b456:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b458:	3046      	adds	r0, #70	; 0x46
1000b45a:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b45c:	0020      	movs	r0, r4
1000b45e:	1db1      	adds	r1, r6, #6
1000b460:	221c      	movs	r2, #28
1000b462:	301a      	adds	r0, #26
1000b464:	47c0      	blx	r8
1000b466:	e7cd      	b.n	1000b404 <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b468:	4e08      	ldr	r6, [pc, #32]	; (1000b48c <ble_pair_done_handler+0xdc>)
1000b46a:	4d09      	ldr	r5, [pc, #36]	; (1000b490 <ble_pair_done_handler+0xe0>)
1000b46c:	0030      	movs	r0, r6
1000b46e:	47a8      	blx	r5
1000b470:	4c09      	ldr	r4, [pc, #36]	; (1000b498 <ble_pair_done_handler+0xe8>)
1000b472:	480c      	ldr	r0, [pc, #48]	; (1000b4a4 <ble_pair_done_handler+0xf4>)
1000b474:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b476:	0030      	movs	r0, r6
1000b478:	47a8      	blx	r5
1000b47a:	480c      	ldr	r0, [pc, #48]	; (1000b4ac <ble_pair_done_handler+0xfc>)
1000b47c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b47e:	25e2      	movs	r5, #226	; 0xe2
1000b480:	e7c0      	b.n	1000b404 <ble_pair_done_handler+0x54>
1000b482:	46c0      	nop			; (mov r8, r8)
1000b484:	100190c0 	.word	0x100190c0
1000b488:	000002ca 	.word	0x000002ca
1000b48c:	100158a0 	.word	0x100158a0
1000b490:	100146e1 	.word	0x100146e1
1000b494:	10016a9c 	.word	0x10016a9c
1000b498:	100145c1 	.word	0x100145c1
1000b49c:	1000f079 	.word	0x1000f079
1000b4a0:	10016abc 	.word	0x10016abc
1000b4a4:	10016ad8 	.word	0x10016ad8
1000b4a8:	1001443b 	.word	0x1001443b
1000b4ac:	10016b04 	.word	0x10016b04

1000b4b0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b4b0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b4b2:	2378      	movs	r3, #120	; 0x78
1000b4b4:	2201      	movs	r2, #1
1000b4b6:	2101      	movs	r1, #1
1000b4b8:	4c02      	ldr	r4, [pc, #8]	; (1000b4c4 <ble_conn_param_update_req+0x14>)
1000b4ba:	8800      	ldrh	r0, [r0, #0]
1000b4bc:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b4be:	2000      	movs	r0, #0
1000b4c0:	bd10      	pop	{r4, pc}
1000b4c2:	46c0      	nop			; (mov r8, r8)
1000b4c4:	1000f099 	.word	0x1000f099

1000b4c8 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4ca:	4644      	mov	r4, r8
1000b4cc:	4656      	mov	r6, sl
1000b4ce:	465f      	mov	r7, fp
1000b4d0:	464d      	mov	r5, r9
1000b4d2:	4682      	mov	sl, r0
1000b4d4:	b4f0      	push	{r4, r5, r6, r7}
1000b4d6:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b4d8:	ac03      	add	r4, sp, #12
1000b4da:	2209      	movs	r2, #9
1000b4dc:	2100      	movs	r1, #0
1000b4de:	4b63      	ldr	r3, [pc, #396]	; (1000b66c <ble_slave_security_request_handler+0x1a4>)
1000b4e0:	0020      	movs	r0, r4
1000b4e2:	4798      	blx	r3
1000b4e4:	4653      	mov	r3, sl
1000b4e6:	8819      	ldrh	r1, [r3, #0]
1000b4e8:	4b61      	ldr	r3, [pc, #388]	; (1000b670 <ble_slave_security_request_handler+0x1a8>)
1000b4ea:	4698      	mov	r8, r3
1000b4ec:	0018      	movs	r0, r3
1000b4ee:	001a      	movs	r2, r3
1000b4f0:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b4f2:	8915      	ldrh	r5, [r2, #8]
1000b4f4:	428d      	cmp	r5, r1
1000b4f6:	d041      	beq.n	1000b57c <ble_slave_security_request_handler+0xb4>
1000b4f8:	3301      	adds	r3, #1
1000b4fa:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b4fc:	2b05      	cmp	r3, #5
1000b4fe:	d1f8      	bne.n	1000b4f2 <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b500:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b502:	8902      	ldrh	r2, [r0, #8]
1000b504:	001f      	movs	r7, r3
1000b506:	428a      	cmp	r2, r1
1000b508:	d056      	beq.n	1000b5b8 <ble_slave_security_request_handler+0xf0>
1000b50a:	3301      	adds	r3, #1
1000b50c:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b50e:	2b05      	cmp	r3, #5
1000b510:	d1f7      	bne.n	1000b502 <ble_slave_security_request_handler+0x3a>
1000b512:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b514:	2302      	movs	r3, #2
1000b516:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
1000b518:	4653      	mov	r3, sl
1000b51a:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b51c:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000b51e:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b520:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000b522:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b524:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b526:	017b      	lsls	r3, r7, #5
1000b528:	9300      	str	r3, [sp, #0]
1000b52a:	1bdb      	subs	r3, r3, r7
1000b52c:	009b      	lsls	r3, r3, #2
1000b52e:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000b530:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b532:	2b02      	cmp	r3, #2
1000b534:	d100      	bne.n	1000b538 <ble_slave_security_request_handler+0x70>
1000b536:	e084      	b.n	1000b642 <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b538:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b53a:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
1000b53c:	2310      	movs	r3, #16
1000b53e:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
1000b540:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b542:	9b00      	ldr	r3, [sp, #0]
1000b544:	1bde      	subs	r6, r3, r7
1000b546:	4643      	mov	r3, r8
1000b548:	00b6      	lsls	r6, r6, #2
1000b54a:	199b      	adds	r3, r3, r6
1000b54c:	7e1b      	ldrb	r3, [r3, #24]
1000b54e:	2b40      	cmp	r3, #64	; 0x40
1000b550:	d04a      	beq.n	1000b5e8 <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b552:	9b00      	ldr	r3, [sp, #0]
1000b554:	0021      	movs	r1, r4
1000b556:	1bda      	subs	r2, r3, r7
1000b558:	4653      	mov	r3, sl
1000b55a:	0092      	lsls	r2, r2, #2
1000b55c:	3260      	adds	r2, #96	; 0x60
1000b55e:	8818      	ldrh	r0, [r3, #0]
1000b560:	4442      	add	r2, r8
1000b562:	2300      	movs	r3, #0
1000b564:	4d43      	ldr	r5, [pc, #268]	; (1000b674 <ble_slave_security_request_handler+0x1ac>)
1000b566:	47a8      	blx	r5
1000b568:	2800      	cmp	r0, #0
1000b56a:	d132      	bne.n	1000b5d2 <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
1000b56c:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b56e:	b007      	add	sp, #28
1000b570:	bc3c      	pop	{r2, r3, r4, r5}
1000b572:	4690      	mov	r8, r2
1000b574:	4699      	mov	r9, r3
1000b576:	46a2      	mov	sl, r4
1000b578:	46ab      	mov	fp, r5
1000b57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b57c:	0015      	movs	r5, r2
1000b57e:	355e      	adds	r5, #94	; 0x5e
1000b580:	782d      	ldrb	r5, [r5, #0]
1000b582:	2d02      	cmp	r5, #2
1000b584:	d1b8      	bne.n	1000b4f8 <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b586:	4642      	mov	r2, r8
1000b588:	015d      	lsls	r5, r3, #5
1000b58a:	1ae9      	subs	r1, r5, r3
1000b58c:	0089      	lsls	r1, r1, #2
1000b58e:	1852      	adds	r2, r2, r1
1000b590:	0016      	movs	r6, r2
1000b592:	2706      	movs	r7, #6
1000b594:	365e      	adds	r6, #94	; 0x5e
1000b596:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b598:	7d12      	ldrb	r2, [r2, #20]
1000b59a:	07d6      	lsls	r6, r2, #31
1000b59c:	d503      	bpl.n	1000b5a6 <ble_slave_security_request_handler+0xde>
1000b59e:	4656      	mov	r6, sl
1000b5a0:	78f6      	ldrb	r6, [r6, #3]
1000b5a2:	2e00      	cmp	r6, #0
1000b5a4:	d151      	bne.n	1000b64a <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b5a6:	2202      	movs	r2, #2
1000b5a8:	1aeb      	subs	r3, r5, r3
1000b5aa:	009b      	lsls	r3, r3, #2
1000b5ac:	4443      	add	r3, r8
1000b5ae:	335e      	adds	r3, #94	; 0x5e
1000b5b0:	701a      	strb	r2, [r3, #0]
1000b5b2:	4653      	mov	r3, sl
1000b5b4:	8819      	ldrh	r1, [r3, #0]
1000b5b6:	e7a3      	b.n	1000b500 <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b5b8:	0002      	movs	r2, r0
1000b5ba:	325e      	adds	r2, #94	; 0x5e
1000b5bc:	7812      	ldrb	r2, [r2, #0]
1000b5be:	2a02      	cmp	r2, #2
1000b5c0:	d1a3      	bne.n	1000b50a <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b5c2:	015b      	lsls	r3, r3, #5
1000b5c4:	1bdb      	subs	r3, r3, r7
1000b5c6:	009b      	lsls	r3, r3, #2
1000b5c8:	4443      	add	r3, r8
1000b5ca:	335e      	adds	r3, #94	; 0x5e
1000b5cc:	3201      	adds	r2, #1
1000b5ce:	701a      	strb	r2, [r3, #0]
			break;
1000b5d0:	e7a0      	b.n	1000b514 <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b5d2:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b5d4:	4828      	ldr	r0, [pc, #160]	; (1000b678 <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b5d6:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
1000b5d8:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b5da:	4b28      	ldr	r3, [pc, #160]	; (1000b67c <ble_slave_security_request_handler+0x1b4>)
1000b5dc:	4798      	blx	r3
1000b5de:	4828      	ldr	r0, [pc, #160]	; (1000b680 <ble_slave_security_request_handler+0x1b8>)
1000b5e0:	4b28      	ldr	r3, [pc, #160]	; (1000b684 <ble_slave_security_request_handler+0x1bc>)
1000b5e2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b5e4:	20e2      	movs	r0, #226	; 0xe2
1000b5e6:	e7c2      	b.n	1000b56e <ble_slave_security_request_handler+0xa6>
1000b5e8:	4b27      	ldr	r3, [pc, #156]	; (1000b688 <ble_slave_security_request_handler+0x1c0>)
1000b5ea:	0035      	movs	r5, r6
1000b5ec:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b5ee:	230f      	movs	r3, #15
1000b5f0:	469b      	mov	fp, r3
1000b5f2:	9601      	str	r6, [sp, #4]
1000b5f4:	3568      	adds	r5, #104	; 0x68
1000b5f6:	3660      	adds	r6, #96	; 0x60
1000b5f8:	4446      	add	r6, r8
1000b5fa:	4445      	add	r5, r8
1000b5fc:	47c8      	blx	r9
1000b5fe:	465b      	mov	r3, fp
1000b600:	4018      	ands	r0, r3
1000b602:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b604:	47c8      	blx	r9
1000b606:	465b      	mov	r3, fp
1000b608:	4018      	ands	r0, r3
1000b60a:	74b0      	strb	r0, [r6, #18]
1000b60c:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b60e:	42ae      	cmp	r6, r5
1000b610:	d1f4      	bne.n	1000b5fc <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b612:	230f      	movs	r3, #15
1000b614:	469b      	mov	fp, r3
1000b616:	9e01      	ldr	r6, [sp, #4]
1000b618:	3670      	adds	r6, #112	; 0x70
1000b61a:	4446      	add	r6, r8
1000b61c:	47c8      	blx	r9
1000b61e:	465b      	mov	r3, fp
1000b620:	4018      	ands	r0, r3
1000b622:	7028      	strb	r0, [r5, #0]
1000b624:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b626:	42b5      	cmp	r5, r6
1000b628:	d1f8      	bne.n	1000b61c <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b62a:	47c8      	blx	r9
1000b62c:	9b00      	ldr	r3, [sp, #0]
1000b62e:	1bdb      	subs	r3, r3, r7
1000b630:	009b      	lsls	r3, r3, #2
1000b632:	4443      	add	r3, r8
1000b634:	001a      	movs	r2, r3
1000b636:	3270      	adds	r2, #112	; 0x70
1000b638:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b63a:	2210      	movs	r2, #16
1000b63c:	337a      	adds	r3, #122	; 0x7a
1000b63e:	701a      	strb	r2, [r3, #0]
1000b640:	e787      	b.n	1000b552 <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b642:	3301      	adds	r3, #1
1000b644:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b646:	71e3      	strb	r3, [r4, #7]
1000b648:	e778      	b.n	1000b53c <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b64a:	4653      	mov	r3, sl
1000b64c:	4441      	add	r1, r8
1000b64e:	8818      	ldrh	r0, [r3, #0]
1000b650:	311a      	adds	r1, #26
1000b652:	4b0e      	ldr	r3, [pc, #56]	; (1000b68c <ble_slave_security_request_handler+0x1c4>)
1000b654:	4798      	blx	r3
1000b656:	2800      	cmp	r0, #0
1000b658:	d100      	bne.n	1000b65c <ble_slave_security_request_handler+0x194>
1000b65a:	e787      	b.n	1000b56c <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b65c:	4b07      	ldr	r3, [pc, #28]	; (1000b67c <ble_slave_security_request_handler+0x1b4>)
1000b65e:	4806      	ldr	r0, [pc, #24]	; (1000b678 <ble_slave_security_request_handler+0x1b0>)
1000b660:	4798      	blx	r3
1000b662:	480b      	ldr	r0, [pc, #44]	; (1000b690 <ble_slave_security_request_handler+0x1c8>)
1000b664:	4b07      	ldr	r3, [pc, #28]	; (1000b684 <ble_slave_security_request_handler+0x1bc>)
1000b666:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b668:	20e2      	movs	r0, #226	; 0xe2
1000b66a:	e780      	b.n	1000b56e <ble_slave_security_request_handler+0xa6>
1000b66c:	10014477 	.word	0x10014477
1000b670:	100190c0 	.word	0x100190c0
1000b674:	1000f3e5 	.word	0x1000f3e5
1000b678:	100158a0 	.word	0x100158a0
1000b67c:	100146e1 	.word	0x100146e1
1000b680:	10016b4c 	.word	0x10016b4c
1000b684:	100145c1 	.word	0x100145c1
1000b688:	100146f5 	.word	0x100146f5
1000b68c:	1000f5d1 	.word	0x1000f5d1
1000b690:	10016b34 	.word	0x10016b34

1000b694 <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b696:	4656      	mov	r6, sl
1000b698:	465f      	mov	r7, fp
1000b69a:	464d      	mov	r5, r9
1000b69c:	4644      	mov	r4, r8
1000b69e:	4b45      	ldr	r3, [pc, #276]	; (1000b7b4 <ble_pair_request_handler+0x120>)
1000b6a0:	b4f0      	push	{r4, r5, r6, r7}
1000b6a2:	469a      	mov	sl, r3
1000b6a4:	001a      	movs	r2, r3
1000b6a6:	2300      	movs	r3, #0
1000b6a8:	b087      	sub	sp, #28
1000b6aa:	9000      	str	r0, [sp, #0]
1000b6ac:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b6ae:	8911      	ldrh	r1, [r2, #8]
1000b6b0:	001c      	movs	r4, r3
1000b6b2:	4281      	cmp	r1, r0
1000b6b4:	d040      	beq.n	1000b738 <ble_pair_request_handler+0xa4>
1000b6b6:	3301      	adds	r3, #1
1000b6b8:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6ba:	2b05      	cmp	r3, #5
1000b6bc:	d1f7      	bne.n	1000b6ae <ble_pair_request_handler+0x1a>
1000b6be:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b6c0:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b6c2:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b6c4:	2302      	movs	r3, #2
1000b6c6:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b6c8:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b6ca:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b6cc:	0162      	lsls	r2, r4, #5
1000b6ce:	4690      	mov	r8, r2
1000b6d0:	1b12      	subs	r2, r2, r4
1000b6d2:	0092      	lsls	r2, r2, #2
1000b6d4:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b6d6:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
1000b6d8:	3b01      	subs	r3, #1
1000b6da:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b6dc:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b6de:	2a02      	cmp	r2, #2
1000b6e0:	d064      	beq.n	1000b7ac <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b6e2:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b6e4:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
1000b6e6:	2310      	movs	r3, #16
1000b6e8:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
1000b6ea:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b6ec:	4643      	mov	r3, r8
1000b6ee:	1b1e      	subs	r6, r3, r4
1000b6f0:	4653      	mov	r3, sl
1000b6f2:	00b6      	lsls	r6, r6, #2
1000b6f4:	199b      	adds	r3, r3, r6
1000b6f6:	7e1b      	ldrb	r3, [r3, #24]
1000b6f8:	2b40      	cmp	r3, #64	; 0x40
1000b6fa:	d02a      	beq.n	1000b752 <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b6fc:	4643      	mov	r3, r8
1000b6fe:	1b1a      	subs	r2, r3, r4
1000b700:	0092      	lsls	r2, r2, #2
1000b702:	9b00      	ldr	r3, [sp, #0]
1000b704:	3260      	adds	r2, #96	; 0x60
1000b706:	8818      	ldrh	r0, [r3, #0]
1000b708:	4452      	add	r2, sl
1000b70a:	2300      	movs	r3, #0
1000b70c:	0039      	movs	r1, r7
1000b70e:	4c2a      	ldr	r4, [pc, #168]	; (1000b7b8 <ble_pair_request_handler+0x124>)
1000b710:	47a0      	blx	r4
1000b712:	2800      	cmp	r0, #0
1000b714:	d009      	beq.n	1000b72a <ble_pair_request_handler+0x96>
	{
		features.bond = false;
1000b716:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
1000b718:	4828      	ldr	r0, [pc, #160]	; (1000b7bc <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b71a:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
1000b71c:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b71e:	4b28      	ldr	r3, [pc, #160]	; (1000b7c0 <ble_pair_request_handler+0x12c>)
1000b720:	4798      	blx	r3
1000b722:	4828      	ldr	r0, [pc, #160]	; (1000b7c4 <ble_pair_request_handler+0x130>)
1000b724:	4b28      	ldr	r3, [pc, #160]	; (1000b7c8 <ble_pair_request_handler+0x134>)
1000b726:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b728:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b72a:	b007      	add	sp, #28
1000b72c:	bc3c      	pop	{r2, r3, r4, r5}
1000b72e:	4690      	mov	r8, r2
1000b730:	4699      	mov	r9, r3
1000b732:	46a2      	mov	sl, r4
1000b734:	46ab      	mov	fp, r5
1000b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b738:	0011      	movs	r1, r2
1000b73a:	315e      	adds	r1, #94	; 0x5e
1000b73c:	7809      	ldrb	r1, [r1, #0]
1000b73e:	2902      	cmp	r1, #2
1000b740:	d1b9      	bne.n	1000b6b6 <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b742:	2203      	movs	r2, #3
1000b744:	015b      	lsls	r3, r3, #5
1000b746:	1b1b      	subs	r3, r3, r4
1000b748:	009b      	lsls	r3, r3, #2
1000b74a:	4453      	add	r3, sl
1000b74c:	335e      	adds	r3, #94	; 0x5e
1000b74e:	701a      	strb	r2, [r3, #0]
			break;
1000b750:	e7b6      	b.n	1000b6c0 <ble_pair_request_handler+0x2c>
1000b752:	4b1e      	ldr	r3, [pc, #120]	; (1000b7cc <ble_pair_request_handler+0x138>)
1000b754:	0035      	movs	r5, r6
1000b756:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b758:	230f      	movs	r3, #15
1000b75a:	469b      	mov	fp, r3
1000b75c:	9601      	str	r6, [sp, #4]
1000b75e:	3568      	adds	r5, #104	; 0x68
1000b760:	3660      	adds	r6, #96	; 0x60
1000b762:	4456      	add	r6, sl
1000b764:	4455      	add	r5, sl
1000b766:	47c8      	blx	r9
1000b768:	465b      	mov	r3, fp
1000b76a:	4018      	ands	r0, r3
1000b76c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b76e:	47c8      	blx	r9
1000b770:	465b      	mov	r3, fp
1000b772:	4018      	ands	r0, r3
1000b774:	74b0      	strb	r0, [r6, #18]
1000b776:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b778:	42ae      	cmp	r6, r5
1000b77a:	d1f4      	bne.n	1000b766 <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b77c:	230f      	movs	r3, #15
1000b77e:	469b      	mov	fp, r3
1000b780:	9e01      	ldr	r6, [sp, #4]
1000b782:	3670      	adds	r6, #112	; 0x70
1000b784:	4456      	add	r6, sl
1000b786:	47c8      	blx	r9
1000b788:	465b      	mov	r3, fp
1000b78a:	4018      	ands	r0, r3
1000b78c:	7028      	strb	r0, [r5, #0]
1000b78e:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b790:	42b5      	cmp	r5, r6
1000b792:	d1f8      	bne.n	1000b786 <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b794:	47c8      	blx	r9
1000b796:	4643      	mov	r3, r8
1000b798:	1b1b      	subs	r3, r3, r4
1000b79a:	009b      	lsls	r3, r3, #2
1000b79c:	4453      	add	r3, sl
1000b79e:	001a      	movs	r2, r3
1000b7a0:	3270      	adds	r2, #112	; 0x70
1000b7a2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b7a4:	2210      	movs	r2, #16
1000b7a6:	337a      	adds	r3, #122	; 0x7a
1000b7a8:	701a      	strb	r2, [r3, #0]
1000b7aa:	e7a7      	b.n	1000b6fc <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b7ac:	3302      	adds	r3, #2
1000b7ae:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b7b0:	71fb      	strb	r3, [r7, #7]
1000b7b2:	e798      	b.n	1000b6e6 <ble_pair_request_handler+0x52>
1000b7b4:	100190c0 	.word	0x100190c0
1000b7b8:	1000f3e5 	.word	0x1000f3e5
1000b7bc:	100158a0 	.word	0x100158a0
1000b7c0:	100146e1 	.word	0x100146e1
1000b7c4:	10016b78 	.word	0x10016b78
1000b7c8:	100145c1 	.word	0x100145c1
1000b7cc:	100146f5 	.word	0x100146f5

1000b7d0 <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7d2:	465f      	mov	r7, fp
1000b7d4:	4656      	mov	r6, sl
1000b7d6:	464d      	mov	r5, r9
1000b7d8:	4644      	mov	r4, r8
1000b7da:	b4f0      	push	{r4, r5, r6, r7}
1000b7dc:	0007      	movs	r7, r0
1000b7de:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b7e0:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b7e2:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b7e4:	2206      	movs	r2, #6
1000b7e6:	4940      	ldr	r1, [pc, #256]	; (1000b8e8 <ble_pair_key_request_handler+0x118>)
1000b7e8:	4e40      	ldr	r6, [pc, #256]	; (1000b8ec <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b7ea:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b7ec:	0020      	movs	r0, r4
1000b7ee:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b7f0:	2204      	movs	r2, #4
1000b7f2:	0039      	movs	r1, r7
1000b7f4:	0028      	movs	r0, r5
1000b7f6:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b7f8:	78eb      	ldrb	r3, [r5, #3]
1000b7fa:	2b00      	cmp	r3, #0
1000b7fc:	d02e      	beq.n	1000b85c <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b7fe:	2380      	movs	r3, #128	; 0x80
1000b800:	886a      	ldrh	r2, [r5, #2]
1000b802:	005b      	lsls	r3, r3, #1
1000b804:	429a      	cmp	r2, r3
1000b806:	d00b      	beq.n	1000b820 <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b808:	78ab      	ldrb	r3, [r5, #2]
1000b80a:	2b01      	cmp	r3, #1
1000b80c:	d052      	beq.n	1000b8b4 <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b80e:	2400      	movs	r4, #0
}
1000b810:	0020      	movs	r0, r4
1000b812:	b007      	add	sp, #28
1000b814:	bc3c      	pop	{r2, r3, r4, r5}
1000b816:	4690      	mov	r8, r2
1000b818:	4699      	mov	r9, r3
1000b81a:	46a2      	mov	sl, r4
1000b81c:	46ab      	mov	fp, r5
1000b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b820:	4b33      	ldr	r3, [pc, #204]	; (1000b8f0 <ble_pair_key_request_handler+0x120>)
1000b822:	0018      	movs	r0, r3
1000b824:	469a      	mov	sl, r3
1000b826:	4b33      	ldr	r3, [pc, #204]	; (1000b8f4 <ble_pair_key_request_handler+0x124>)
1000b828:	4699      	mov	r9, r3
1000b82a:	4798      	blx	r3
1000b82c:	4b32      	ldr	r3, [pc, #200]	; (1000b8f8 <ble_pair_key_request_handler+0x128>)
1000b82e:	4833      	ldr	r0, [pc, #204]	; (1000b8fc <ble_pair_key_request_handler+0x12c>)
1000b830:	4698      	mov	r8, r3
1000b832:	4798      	blx	r3
1000b834:	4e32      	ldr	r6, [pc, #200]	; (1000b900 <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b836:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b838:	5de0      	ldrb	r0, [r4, r7]
1000b83a:	3701      	adds	r7, #1
1000b83c:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b83e:	2f06      	cmp	r7, #6
1000b840:	d1fa      	bne.n	1000b838 <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b842:	9b01      	ldr	r3, [sp, #4]
1000b844:	78a9      	ldrb	r1, [r5, #2]
1000b846:	8818      	ldrh	r0, [r3, #0]
1000b848:	0022      	movs	r2, r4
1000b84a:	4b2e      	ldr	r3, [pc, #184]	; (1000b904 <ble_pair_key_request_handler+0x134>)
1000b84c:	4798      	blx	r3
1000b84e:	2800      	cmp	r0, #0
1000b850:	d0dd      	beq.n	1000b80e <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
1000b852:	4650      	mov	r0, sl
1000b854:	47c8      	blx	r9
1000b856:	482c      	ldr	r0, [pc, #176]	; (1000b908 <ble_pair_key_request_handler+0x138>)
1000b858:	47c0      	blx	r8
1000b85a:	e7d8      	b.n	1000b80e <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b85c:	4b24      	ldr	r3, [pc, #144]	; (1000b8f0 <ble_pair_key_request_handler+0x120>)
1000b85e:	0018      	movs	r0, r3
1000b860:	469a      	mov	sl, r3
1000b862:	4b24      	ldr	r3, [pc, #144]	; (1000b8f4 <ble_pair_key_request_handler+0x124>)
1000b864:	4699      	mov	r9, r3
1000b866:	4798      	blx	r3
1000b868:	4b23      	ldr	r3, [pc, #140]	; (1000b8f8 <ble_pair_key_request_handler+0x128>)
1000b86a:	4828      	ldr	r0, [pc, #160]	; (1000b90c <ble_pair_key_request_handler+0x13c>)
1000b86c:	4698      	mov	r8, r3
1000b86e:	4798      	blx	r3
1000b870:	2300      	movs	r3, #0
1000b872:	4f27      	ldr	r7, [pc, #156]	; (1000b910 <ble_pair_key_request_handler+0x140>)
1000b874:	469b      	mov	fp, r3
1000b876:	e003      	b.n	1000b880 <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b878:	001a      	movs	r2, r3
1000b87a:	3a30      	subs	r2, #48	; 0x30
1000b87c:	2a09      	cmp	r2, #9
1000b87e:	d921      	bls.n	1000b8c4 <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b880:	201e      	movs	r0, #30
1000b882:	47b8      	blx	r7
1000b884:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b886:	2b00      	cmp	r3, #0
1000b888:	d1f6      	bne.n	1000b878 <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
1000b88a:	4650      	mov	r0, sl
1000b88c:	47c8      	blx	r9
1000b88e:	4821      	ldr	r0, [pc, #132]	; (1000b914 <ble_pair_key_request_handler+0x144>)
1000b890:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
1000b892:	4650      	mov	r0, sl
1000b894:	47c8      	blx	r9
1000b896:	4820      	ldr	r0, [pc, #128]	; (1000b918 <ble_pair_key_request_handler+0x148>)
1000b898:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
1000b89a:	9b01      	ldr	r3, [sp, #4]
1000b89c:	2113      	movs	r1, #19
1000b89e:	8818      	ldrh	r0, [r3, #0]
1000b8a0:	4b1e      	ldr	r3, [pc, #120]	; (1000b91c <ble_pair_key_request_handler+0x14c>)
1000b8a2:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b8a4:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b8a6:	2800      	cmp	r0, #0
1000b8a8:	d0b2      	beq.n	1000b810 <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b8aa:	4650      	mov	r0, sl
1000b8ac:	47c8      	blx	r9
1000b8ae:	481c      	ldr	r0, [pc, #112]	; (1000b920 <ble_pair_key_request_handler+0x150>)
1000b8b0:	47c0      	blx	r8
1000b8b2:	e7ad      	b.n	1000b810 <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b8b4:	4b0f      	ldr	r3, [pc, #60]	; (1000b8f4 <ble_pair_key_request_handler+0x124>)
1000b8b6:	480e      	ldr	r0, [pc, #56]	; (1000b8f0 <ble_pair_key_request_handler+0x120>)
1000b8b8:	4798      	blx	r3
1000b8ba:	481a      	ldr	r0, [pc, #104]	; (1000b924 <ble_pair_key_request_handler+0x154>)
1000b8bc:	4b0e      	ldr	r3, [pc, #56]	; (1000b8f8 <ble_pair_key_request_handler+0x128>)
1000b8be:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b8c0:	2400      	movs	r4, #0
1000b8c2:	e7a5      	b.n	1000b810 <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
1000b8c4:	465a      	mov	r2, fp
1000b8c6:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
1000b8c8:	23ff      	movs	r3, #255	; 0xff
1000b8ca:	4e0d      	ldr	r6, [pc, #52]	; (1000b900 <ble_pair_key_request_handler+0x130>)
1000b8cc:	4018      	ands	r0, r3
1000b8ce:	47b0      	blx	r6
1000b8d0:	2301      	movs	r3, #1
1000b8d2:	469c      	mov	ip, r3
1000b8d4:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b8d6:	465b      	mov	r3, fp
1000b8d8:	2b06      	cmp	r3, #6
1000b8da:	d1d1      	bne.n	1000b880 <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b8dc:	4650      	mov	r0, sl
1000b8de:	47c8      	blx	r9
1000b8e0:	4811      	ldr	r0, [pc, #68]	; (1000b928 <ble_pair_key_request_handler+0x158>)
1000b8e2:	47c0      	blx	r8
1000b8e4:	e7a7      	b.n	1000b836 <ble_pair_key_request_handler+0x66>
1000b8e6:	46c0      	nop			; (mov r8, r8)
1000b8e8:	10016a28 	.word	0x10016a28
1000b8ec:	1001443b 	.word	0x1001443b
1000b8f0:	100158a0 	.word	0x100158a0
1000b8f4:	100146e1 	.word	0x100146e1
1000b8f8:	100145c1 	.word	0x100145c1
1000b8fc:	10016be8 	.word	0x10016be8
1000b900:	100145f5 	.word	0x100145f5
1000b904:	1000f515 	.word	0x1000f515
1000b908:	10016c20 	.word	0x10016c20
1000b90c:	10016ba0 	.word	0x10016ba0
1000b910:	1000c435 	.word	0x1000c435
1000b914:	10016bc8 	.word	0x10016bc8
1000b918:	10016bd4 	.word	0x10016bd4
1000b91c:	1000f079 	.word	0x1000f079
1000b920:	10016abc 	.word	0x10016abc
1000b924:	10016c38 	.word	0x10016c38
1000b928:	10016c54 	.word	0x10016c54

1000b92c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b92c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b92e:	4647      	mov	r7, r8
1000b930:	4e29      	ldr	r6, [pc, #164]	; (1000b9d8 <ble_encryption_request_handler+0xac>)
1000b932:	b480      	push	{r7}
1000b934:	0031      	movs	r1, r6
1000b936:	0007      	movs	r7, r0
1000b938:	2200      	movs	r2, #0
1000b93a:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b93c:	8908      	ldrh	r0, [r1, #8]
1000b93e:	0014      	movs	r4, r2
1000b940:	42a8      	cmp	r0, r5
1000b942:	d01c      	beq.n	1000b97e <ble_encryption_request_handler+0x52>
1000b944:	3201      	adds	r2, #1
1000b946:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b948:	2a05      	cmp	r2, #5
1000b94a:	d1f7      	bne.n	1000b93c <ble_encryption_request_handler+0x10>
1000b94c:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b94e:	4b23      	ldr	r3, [pc, #140]	; (1000b9dc <ble_encryption_request_handler+0xb0>)
1000b950:	4f23      	ldr	r7, [pc, #140]	; (1000b9e0 <ble_encryption_request_handler+0xb4>)
1000b952:	4698      	mov	r8, r3
1000b954:	0018      	movs	r0, r3
1000b956:	47b8      	blx	r7
1000b958:	4d22      	ldr	r5, [pc, #136]	; (1000b9e4 <ble_encryption_request_handler+0xb8>)
1000b95a:	4823      	ldr	r0, [pc, #140]	; (1000b9e8 <ble_encryption_request_handler+0xbc>)
1000b95c:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b95e:	4640      	mov	r0, r8
1000b960:	47b8      	blx	r7
1000b962:	4822      	ldr	r0, [pc, #136]	; (1000b9ec <ble_encryption_request_handler+0xc0>)
1000b964:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b966:	0163      	lsls	r3, r4, #5
1000b968:	1b1b      	subs	r3, r3, r4
1000b96a:	009b      	lsls	r3, r3, #2
1000b96c:	18f3      	adds	r3, r6, r3
1000b96e:	8918      	ldrh	r0, [r3, #8]
1000b970:	2105      	movs	r1, #5
1000b972:	4b1f      	ldr	r3, [pc, #124]	; (1000b9f0 <ble_encryption_request_handler+0xc4>)
1000b974:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b976:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
1000b978:	bc04      	pop	{r2}
1000b97a:	4690      	mov	r8, r2
1000b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b97e:	000b      	movs	r3, r1
1000b980:	335e      	adds	r3, #94	; 0x5e
1000b982:	781b      	ldrb	r3, [r3, #0]
1000b984:	2b01      	cmp	r3, #1
1000b986:	d9dd      	bls.n	1000b944 <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b988:	0155      	lsls	r5, r2, #5
1000b98a:	1aad      	subs	r5, r5, r2
1000b98c:	2206      	movs	r2, #6
1000b98e:	00ad      	lsls	r5, r5, #2
1000b990:	1973      	adds	r3, r6, r5
1000b992:	4698      	mov	r8, r3
1000b994:	335e      	adds	r3, #94	; 0x5e
1000b996:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b998:	8a5a      	ldrh	r2, [r3, #18]
1000b99a:	887b      	ldrh	r3, [r7, #2]
1000b99c:	429a      	cmp	r2, r3
1000b99e:	d1d6      	bne.n	1000b94e <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b9a0:	1971      	adds	r1, r6, r5
1000b9a2:	3172      	adds	r1, #114	; 0x72
1000b9a4:	1d38      	adds	r0, r7, #4
1000b9a6:	2208      	movs	r2, #8
1000b9a8:	4b12      	ldr	r3, [pc, #72]	; (1000b9f4 <ble_encryption_request_handler+0xc8>)
1000b9aa:	4798      	blx	r3
1000b9ac:	2800      	cmp	r0, #0
1000b9ae:	d1ce      	bne.n	1000b94e <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b9b0:	002b      	movs	r3, r5
1000b9b2:	4642      	mov	r2, r8
1000b9b4:	3360      	adds	r3, #96	; 0x60
1000b9b6:	7d11      	ldrb	r1, [r2, #20]
1000b9b8:	199b      	adds	r3, r3, r6
1000b9ba:	8838      	ldrh	r0, [r7, #0]
1000b9bc:	2201      	movs	r2, #1
1000b9be:	4c0e      	ldr	r4, [pc, #56]	; (1000b9f8 <ble_encryption_request_handler+0xcc>)
1000b9c0:	47a0      	blx	r4
1000b9c2:	2800      	cmp	r0, #0
1000b9c4:	d0d8      	beq.n	1000b978 <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b9c6:	4b06      	ldr	r3, [pc, #24]	; (1000b9e0 <ble_encryption_request_handler+0xb4>)
1000b9c8:	4804      	ldr	r0, [pc, #16]	; (1000b9dc <ble_encryption_request_handler+0xb0>)
1000b9ca:	4798      	blx	r3
1000b9cc:	480b      	ldr	r0, [pc, #44]	; (1000b9fc <ble_encryption_request_handler+0xd0>)
1000b9ce:	4b05      	ldr	r3, [pc, #20]	; (1000b9e4 <ble_encryption_request_handler+0xb8>)
1000b9d0:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b9d2:	2000      	movs	r0, #0
1000b9d4:	e7d0      	b.n	1000b978 <ble_encryption_request_handler+0x4c>
1000b9d6:	46c0      	nop			; (mov r8, r8)
1000b9d8:	100190c0 	.word	0x100190c0
1000b9dc:	100158a0 	.word	0x100158a0
1000b9e0:	100146e1 	.word	0x100146e1
1000b9e4:	100145c1 	.word	0x100145c1
1000b9e8:	10016c68 	.word	0x10016c68
1000b9ec:	10016ca0 	.word	0x10016ca0
1000b9f0:	1000f079 	.word	0x1000f079
1000b9f4:	1001441d 	.word	0x1001441d
1000b9f8:	1000f649 	.word	0x1000f649
1000b9fc:	10016cf8 	.word	0x10016cf8

1000ba00 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000ba00:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000ba02:	7800      	ldrb	r0, [r0, #0]
1000ba04:	2800      	cmp	r0, #0
1000ba06:	d006      	beq.n	1000ba16 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ba08:	4b03      	ldr	r3, [pc, #12]	; (1000ba18 <ble_scan_report_handler+0x18>)
1000ba0a:	4804      	ldr	r0, [pc, #16]	; (1000ba1c <ble_scan_report_handler+0x1c>)
1000ba0c:	4798      	blx	r3
1000ba0e:	4804      	ldr	r0, [pc, #16]	; (1000ba20 <ble_scan_report_handler+0x20>)
1000ba10:	4b04      	ldr	r3, [pc, #16]	; (1000ba24 <ble_scan_report_handler+0x24>)
1000ba12:	4798      	blx	r3
1000ba14:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000ba16:	bd10      	pop	{r4, pc}
1000ba18:	100146e1 	.word	0x100146e1
1000ba1c:	100158a0 	.word	0x100158a0
1000ba20:	10016d18 	.word	0x10016d18
1000ba24:	100145c1 	.word	0x100145c1

1000ba28 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ba28:	b510      	push	{r4, lr}
1000ba2a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ba2c:	78c0      	ldrb	r0, [r0, #3]
1000ba2e:	2800      	cmp	r0, #0
1000ba30:	d008      	beq.n	1000ba44 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ba32:	4b05      	ldr	r3, [pc, #20]	; (1000ba48 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000ba34:	4805      	ldr	r0, [pc, #20]	; (1000ba4c <ble_mtu_changed_cmd_complete_handler+0x24>)
1000ba36:	4798      	blx	r3
1000ba38:	78a2      	ldrb	r2, [r4, #2]
1000ba3a:	8821      	ldrh	r1, [r4, #0]
1000ba3c:	4804      	ldr	r0, [pc, #16]	; (1000ba50 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000ba3e:	4b05      	ldr	r3, [pc, #20]	; (1000ba54 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000ba40:	4798      	blx	r3
1000ba42:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000ba44:	bd10      	pop	{r4, pc}
1000ba46:	46c0      	nop			; (mov r8, r8)
1000ba48:	100146e1 	.word	0x100146e1
1000ba4c:	100158a0 	.word	0x100158a0
1000ba50:	10016d2c 	.word	0x10016d2c
1000ba54:	100145c1 	.word	0x100145c1

1000ba58 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba5a:	4d25      	ldr	r5, [pc, #148]	; (1000baf0 <ble_encryption_status_change_handler+0x98>)
1000ba5c:	2400      	movs	r4, #0
1000ba5e:	002b      	movs	r3, r5
1000ba60:	0007      	movs	r7, r0
1000ba62:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000ba64:	891a      	ldrh	r2, [r3, #8]
1000ba66:	0021      	movs	r1, r4
1000ba68:	4282      	cmp	r2, r0
1000ba6a:	d018      	beq.n	1000ba9e <ble_encryption_status_change_handler+0x46>
1000ba6c:	3401      	adds	r4, #1
1000ba6e:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ba70:	2c05      	cmp	r4, #5
1000ba72:	d1f7      	bne.n	1000ba64 <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000ba74:	78be      	ldrb	r6, [r7, #2]
1000ba76:	2e00      	cmp	r6, #0
1000ba78:	d02c      	beq.n	1000bad4 <ble_encryption_status_change_handler+0x7c>
1000ba7a:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000ba7c:	014b      	lsls	r3, r1, #5
1000ba7e:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000ba80:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000ba82:	00a4      	lsls	r4, r4, #2
1000ba84:	192c      	adds	r4, r5, r4
1000ba86:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000ba88:	345e      	adds	r4, #94	; 0x5e
1000ba8a:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000ba8c:	4819      	ldr	r0, [pc, #100]	; (1000baf4 <ble_encryption_status_change_handler+0x9c>)
1000ba8e:	4b1a      	ldr	r3, [pc, #104]	; (1000baf8 <ble_encryption_status_change_handler+0xa0>)
1000ba90:	4798      	blx	r3
1000ba92:	481a      	ldr	r0, [pc, #104]	; (1000bafc <ble_encryption_status_change_handler+0xa4>)
1000ba94:	4b1a      	ldr	r3, [pc, #104]	; (1000bb00 <ble_encryption_status_change_handler+0xa8>)
1000ba96:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ba98:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000ba9a:	0030      	movs	r0, r6
1000ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000ba9e:	001a      	movs	r2, r3
1000baa0:	325e      	adds	r2, #94	; 0x5e
1000baa2:	7812      	ldrb	r2, [r2, #0]
1000baa4:	2a06      	cmp	r2, #6
1000baa6:	d1e1      	bne.n	1000ba6c <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000baa8:	78be      	ldrb	r6, [r7, #2]
1000baaa:	2e00      	cmp	r6, #0
1000baac:	d1e6      	bne.n	1000ba7c <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000baae:	4b12      	ldr	r3, [pc, #72]	; (1000baf8 <ble_encryption_status_change_handler+0xa0>)
1000bab0:	4810      	ldr	r0, [pc, #64]	; (1000baf4 <ble_encryption_status_change_handler+0x9c>)
1000bab2:	4798      	blx	r3
1000bab4:	4b12      	ldr	r3, [pc, #72]	; (1000bb00 <ble_encryption_status_change_handler+0xa8>)
1000bab6:	4813      	ldr	r0, [pc, #76]	; (1000bb04 <ble_encryption_status_change_handler+0xac>)
1000bab8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000baba:	0163      	lsls	r3, r4, #5
1000babc:	1b1c      	subs	r4, r3, r4
1000babe:	00a4      	lsls	r4, r4, #2
1000bac0:	192c      	adds	r4, r5, r4
1000bac2:	0023      	movs	r3, r4
1000bac4:	2208      	movs	r2, #8
1000bac6:	335e      	adds	r3, #94	; 0x5e
1000bac8:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000baca:	78fb      	ldrb	r3, [r7, #3]
1000bacc:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000bace:	78bb      	ldrb	r3, [r7, #2]
1000bad0:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000bad2:	e7e2      	b.n	1000ba9a <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000bad4:	4e07      	ldr	r6, [pc, #28]	; (1000baf4 <ble_encryption_status_change_handler+0x9c>)
1000bad6:	4d08      	ldr	r5, [pc, #32]	; (1000baf8 <ble_encryption_status_change_handler+0xa0>)
1000bad8:	0030      	movs	r0, r6
1000bada:	47a8      	blx	r5
1000badc:	4c08      	ldr	r4, [pc, #32]	; (1000bb00 <ble_encryption_status_change_handler+0xa8>)
1000bade:	4809      	ldr	r0, [pc, #36]	; (1000bb04 <ble_encryption_status_change_handler+0xac>)
1000bae0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000bae2:	0030      	movs	r0, r6
1000bae4:	47a8      	blx	r5
1000bae6:	4808      	ldr	r0, [pc, #32]	; (1000bb08 <ble_encryption_status_change_handler+0xb0>)
1000bae8:	47a0      	blx	r4
1000baea:	26e2      	movs	r6, #226	; 0xe2
1000baec:	e7d5      	b.n	1000ba9a <ble_encryption_status_change_handler+0x42>
1000baee:	46c0      	nop			; (mov r8, r8)
1000baf0:	100190c0 	.word	0x100190c0
1000baf4:	100158a0 	.word	0x100158a0
1000baf8:	100146e1 	.word	0x100146e1
1000bafc:	10016d64 	.word	0x10016d64
1000bb00:	100145c1 	.word	0x100145c1
1000bb04:	10016d78 	.word	0x10016d78
1000bb08:	10016d9c 	.word	0x10016d9c

1000bb0c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000bb0e:	4c15      	ldr	r4, [pc, #84]	; (1000bb64 <ble_scan_info_handler+0x58>)
1000bb10:	7823      	ldrb	r3, [r4, #0]
1000bb12:	2b13      	cmp	r3, #19
1000bb14:	d90d      	bls.n	1000bb32 <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000bb16:	4f14      	ldr	r7, [pc, #80]	; (1000bb68 <ble_scan_info_handler+0x5c>)
1000bb18:	4e14      	ldr	r6, [pc, #80]	; (1000bb6c <ble_scan_info_handler+0x60>)
1000bb1a:	0038      	movs	r0, r7
1000bb1c:	47b0      	blx	r6
1000bb1e:	4814      	ldr	r0, [pc, #80]	; (1000bb70 <ble_scan_info_handler+0x64>)
1000bb20:	4d14      	ldr	r5, [pc, #80]	; (1000bb74 <ble_scan_info_handler+0x68>)
1000bb22:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bb24:	4b14      	ldr	r3, [pc, #80]	; (1000bb78 <ble_scan_info_handler+0x6c>)
1000bb26:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bb28:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bb2a:	2800      	cmp	r0, #0
1000bb2c:	d115      	bne.n	1000bb5a <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000bb2e:	0020      	movs	r0, r4
1000bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000bb32:	7823      	ldrb	r3, [r4, #0]
1000bb34:	0001      	movs	r1, r0
1000bb36:	b2db      	uxtb	r3, r3
1000bb38:	009a      	lsls	r2, r3, #2
1000bb3a:	18d2      	adds	r2, r2, r3
1000bb3c:	00d2      	lsls	r2, r2, #3
1000bb3e:	18d3      	adds	r3, r2, r3
1000bb40:	4a0e      	ldr	r2, [pc, #56]	; (1000bb7c <ble_scan_info_handler+0x70>)
1000bb42:	189b      	adds	r3, r3, r2
1000bb44:	0018      	movs	r0, r3
1000bb46:	2229      	movs	r2, #41	; 0x29
1000bb48:	4b0d      	ldr	r3, [pc, #52]	; (1000bb80 <ble_scan_info_handler+0x74>)
1000bb4a:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bb4c:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000bb4e:	7823      	ldrb	r3, [r4, #0]
1000bb50:	3301      	adds	r3, #1
1000bb52:	b2db      	uxtb	r3, r3
1000bb54:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000bb56:	2400      	movs	r4, #0
1000bb58:	e7e9      	b.n	1000bb2e <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000bb5a:	0038      	movs	r0, r7
1000bb5c:	47b0      	blx	r6
1000bb5e:	4809      	ldr	r0, [pc, #36]	; (1000bb84 <ble_scan_info_handler+0x78>)
1000bb60:	47a8      	blx	r5
1000bb62:	e7e4      	b.n	1000bb2e <ble_scan_info_handler+0x22>
1000bb64:	10018e18 	.word	0x10018e18
1000bb68:	100158a0 	.word	0x100158a0
1000bb6c:	100146e1 	.word	0x100146e1
1000bb70:	10016dc4 	.word	0x10016dc4
1000bb74:	100145c1 	.word	0x100145c1
1000bb78:	1000f059 	.word	0x1000f059
1000bb7c:	100193a4 	.word	0x100193a4
1000bb80:	1001443b 	.word	0x1001443b
1000bb84:	10016dfc 	.word	0x10016dfc

1000bb88 <ble_mtu_changed_indication_handler>:
1000bb88:	2000      	movs	r0, #0
1000bb8a:	4770      	bx	lr

1000bb8c <ble_undefined_event_handler>:
1000bb8c:	2000      	movs	r0, #0
1000bb8e:	4770      	bx	lr

1000bb90 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb92:	465f      	mov	r7, fp
1000bb94:	4656      	mov	r6, sl
1000bb96:	464d      	mov	r5, r9
1000bb98:	4644      	mov	r4, r8
1000bb9a:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000bb9c:	2700      	movs	r7, #0
1000bb9e:	4b82      	ldr	r3, [pc, #520]	; (1000bda8 <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000bba0:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000bba2:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bba4:	2207      	movs	r2, #7
1000bba6:	2100      	movs	r1, #0
1000bba8:	4b80      	ldr	r3, [pc, #512]	; (1000bdac <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000bbaa:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bbac:	4880      	ldr	r0, [pc, #512]	; (1000bdb0 <ble_device_init+0x220>)
1000bbae:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000bbb0:	2212      	movs	r2, #18
1000bbb2:	2100      	movs	r1, #0
1000bbb4:	4b7d      	ldr	r3, [pc, #500]	; (1000bdac <ble_device_init+0x21c>)
1000bbb6:	487f      	ldr	r0, [pc, #508]	; (1000bdb4 <ble_device_init+0x224>)
1000bbb8:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000bbba:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000bbbc:	4b7e      	ldr	r3, [pc, #504]	; (1000bdb8 <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000bbbe:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000bbc0:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000bbc2:	2100      	movs	r1, #0
1000bbc4:	4b79      	ldr	r3, [pc, #484]	; (1000bdac <ble_device_init+0x21c>)
1000bbc6:	487d      	ldr	r0, [pc, #500]	; (1000bdbc <ble_device_init+0x22c>)
1000bbc8:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000bbca:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000bbcc:	4b7c      	ldr	r3, [pc, #496]	; (1000bdc0 <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000bbce:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000bbd0:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000bbd2:	2100      	movs	r1, #0
1000bbd4:	4b75      	ldr	r3, [pc, #468]	; (1000bdac <ble_device_init+0x21c>)
1000bbd6:	487b      	ldr	r0, [pc, #492]	; (1000bdc4 <ble_device_init+0x234>)
1000bbd8:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000bbda:	4b7b      	ldr	r3, [pc, #492]	; (1000bdc8 <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000bbdc:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000bbde:	469a      	mov	sl, r3
1000bbe0:	2380      	movs	r3, #128	; 0x80
1000bbe2:	00db      	lsls	r3, r3, #3
1000bbe4:	4699      	mov	r9, r3
1000bbe6:	001a      	movs	r2, r3
1000bbe8:	2100      	movs	r1, #0
1000bbea:	4650      	mov	r0, sl
1000bbec:	4b6f      	ldr	r3, [pc, #444]	; (1000bdac <ble_device_init+0x21c>)
1000bbee:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000bbf0:	4d76      	ldr	r5, [pc, #472]	; (1000bdcc <ble_device_init+0x23c>)
1000bbf2:	0164      	lsls	r4, r4, #5
1000bbf4:	0022      	movs	r2, r4
1000bbf6:	2100      	movs	r1, #0
1000bbf8:	0028      	movs	r0, r5
1000bbfa:	4b6c      	ldr	r3, [pc, #432]	; (1000bdac <ble_device_init+0x21c>)
1000bbfc:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000bbfe:	4b74      	ldr	r3, [pc, #464]	; (1000bdd0 <ble_device_init+0x240>)
1000bc00:	221c      	movs	r2, #28
1000bc02:	469b      	mov	fp, r3
1000bc04:	0018      	movs	r0, r3
1000bc06:	2100      	movs	r1, #0
1000bc08:	4b68      	ldr	r3, [pc, #416]	; (1000bdac <ble_device_init+0x21c>)
1000bc0a:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000bc0c:	465b      	mov	r3, fp
1000bc0e:	4652      	mov	r2, sl
1000bc10:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000bc12:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000bc14:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000bc16:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000bc18:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000bc1a:	4b6e      	ldr	r3, [pc, #440]	; (1000bdd4 <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000bc1c:	4d6e      	ldr	r5, [pc, #440]	; (1000bdd8 <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000bc1e:	601f      	str	r7, [r3, #0]
1000bc20:	605f      	str	r7, [r3, #4]
1000bc22:	609f      	str	r7, [r3, #8]
1000bc24:	60df      	str	r7, [r3, #12]
1000bc26:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000bc28:	4b6c      	ldr	r3, [pc, #432]	; (1000bddc <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000bc2a:	4c6d      	ldr	r4, [pc, #436]	; (1000bde0 <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000bc2c:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000bc2e:	4b6d      	ldr	r3, [pc, #436]	; (1000bde4 <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000bc30:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000bc32:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000bc34:	4b6c      	ldr	r3, [pc, #432]	; (1000bde8 <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000bc36:	606f      	str	r7, [r5, #4]
1000bc38:	60af      	str	r7, [r5, #8]
1000bc3a:	60ef      	str	r7, [r5, #12]
1000bc3c:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000bc3e:	6027      	str	r7, [r4, #0]
1000bc40:	6067      	str	r7, [r4, #4]
1000bc42:	60a7      	str	r7, [r4, #8]
1000bc44:	60e7      	str	r7, [r4, #12]
1000bc46:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000bc48:	601f      	str	r7, [r3, #0]
1000bc4a:	605f      	str	r7, [r3, #4]
1000bc4c:	609f      	str	r7, [r3, #8]
1000bc4e:	60df      	str	r7, [r3, #12]
1000bc50:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000bc52:	4b66      	ldr	r3, [pc, #408]	; (1000bdec <ble_device_init+0x25c>)
1000bc54:	601f      	str	r7, [r3, #0]
1000bc56:	4b66      	ldr	r3, [pc, #408]	; (1000bdf0 <ble_device_init+0x260>)
1000bc58:	4698      	mov	r8, r3
1000bc5a:	239b      	movs	r3, #155	; 0x9b
1000bc5c:	009b      	lsls	r3, r3, #2
1000bc5e:	4443      	add	r3, r8
1000bc60:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000bc62:	2340      	movs	r3, #64	; 0x40
1000bc64:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000bc66:	227c      	movs	r2, #124	; 0x7c
1000bc68:	2100      	movs	r1, #0
1000bc6a:	4640      	mov	r0, r8
1000bc6c:	4b4f      	ldr	r3, [pc, #316]	; (1000bdac <ble_device_init+0x21c>)
1000bc6e:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bc70:	4642      	mov	r2, r8
1000bc72:	2300      	movs	r3, #0
1000bc74:	325e      	adds	r2, #94	; 0x5e
1000bc76:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000bc78:	4649      	mov	r1, r9
1000bc7a:	4642      	mov	r2, r8
1000bc7c:	7611      	strb	r1, [r2, #24]
1000bc7e:	227c      	movs	r2, #124	; 0x7c
1000bc80:	4694      	mov	ip, r2
1000bc82:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc84:	45d0      	cmp	r8, sl
1000bc86:	d1ee      	bne.n	1000bc66 <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000bc88:	4a5a      	ldr	r2, [pc, #360]	; (1000bdf4 <ble_device_init+0x264>)
1000bc8a:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000bc8c:	4b5a      	ldr	r3, [pc, #360]	; (1000bdf8 <ble_device_init+0x268>)
1000bc8e:	0018      	movs	r0, r3
1000bc90:	469a      	mov	sl, r3
1000bc92:	4b5a      	ldr	r3, [pc, #360]	; (1000bdfc <ble_device_init+0x26c>)
1000bc94:	4699      	mov	r9, r3
1000bc96:	4798      	blx	r3
1000bc98:	4b59      	ldr	r3, [pc, #356]	; (1000be00 <ble_device_init+0x270>)
1000bc9a:	485a      	ldr	r0, [pc, #360]	; (1000be04 <ble_device_init+0x274>)
1000bc9c:	4698      	mov	r8, r3
1000bc9e:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000bca0:	4658      	mov	r0, fp
1000bca2:	4b59      	ldr	r3, [pc, #356]	; (1000be08 <ble_device_init+0x278>)
1000bca4:	4798      	blx	r3
1000bca6:	2800      	cmp	r0, #0
1000bca8:	d15e      	bne.n	1000bd68 <ble_device_init+0x1d8>
1000bcaa:	002b      	movs	r3, r5
1000bcac:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000bcae:	682a      	ldr	r2, [r5, #0]
1000bcb0:	2a00      	cmp	r2, #0
1000bcb2:	d062      	beq.n	1000bd7a <ble_device_init+0x1ea>
1000bcb4:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000bcb6:	429d      	cmp	r5, r3
1000bcb8:	d1f9      	bne.n	1000bcae <ble_device_init+0x11e>
1000bcba:	0023      	movs	r3, r4
1000bcbc:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000bcbe:	6822      	ldr	r2, [r4, #0]
1000bcc0:	2a00      	cmp	r2, #0
1000bcc2:	d06d      	beq.n	1000bda0 <ble_device_init+0x210>
1000bcc4:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000bcc6:	42a3      	cmp	r3, r4
1000bcc8:	d1f9      	bne.n	1000bcbe <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000bcca:	2109      	movs	r1, #9
1000bccc:	484f      	ldr	r0, [pc, #316]	; (1000be0c <ble_device_init+0x27c>)
1000bcce:	4b50      	ldr	r3, [pc, #320]	; (1000be10 <ble_device_init+0x280>)
1000bcd0:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000bcd2:	2800      	cmp	r0, #0
1000bcd4:	d003      	beq.n	1000bcde <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000bcd6:	4650      	mov	r0, sl
1000bcd8:	47c8      	blx	r9
1000bcda:	484e      	ldr	r0, [pc, #312]	; (1000be14 <ble_device_init+0x284>)
1000bcdc:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000bcde:	494e      	ldr	r1, [pc, #312]	; (1000be18 <ble_device_init+0x288>)
1000bce0:	2207      	movs	r2, #7
1000bce2:	3108      	adds	r1, #8
1000bce4:	a804      	add	r0, sp, #16
1000bce6:	4d4d      	ldr	r5, [pc, #308]	; (1000be1c <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000bce8:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000bcea:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000bcec:	2226      	movs	r2, #38	; 0x26
1000bcee:	2100      	movs	r1, #0
1000bcf0:	0020      	movs	r0, r4
1000bcf2:	4b2e      	ldr	r3, [pc, #184]	; (1000bdac <ble_device_init+0x21c>)
1000bcf4:	4798      	blx	r3
	
	if (addr == NULL)
1000bcf6:	2e00      	cmp	r6, #0
1000bcf8:	d047      	beq.n	1000bd8a <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000bcfa:	4650      	mov	r0, sl
1000bcfc:	47c8      	blx	r9
1000bcfe:	7830      	ldrb	r0, [r6, #0]
1000bd00:	7933      	ldrb	r3, [r6, #4]
1000bd02:	7972      	ldrb	r2, [r6, #5]
1000bd04:	79b1      	ldrb	r1, [r6, #6]
1000bd06:	9003      	str	r0, [sp, #12]
1000bd08:	7870      	ldrb	r0, [r6, #1]
1000bd0a:	9002      	str	r0, [sp, #8]
1000bd0c:	78b0      	ldrb	r0, [r6, #2]
1000bd0e:	9001      	str	r0, [sp, #4]
1000bd10:	78f0      	ldrb	r0, [r6, #3]
1000bd12:	9000      	str	r0, [sp, #0]
1000bd14:	4842      	ldr	r0, [pc, #264]	; (1000be20 <ble_device_init+0x290>)
1000bd16:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000bd18:	230a      	movs	r3, #10
1000bd1a:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000bd1c:	4b41      	ldr	r3, [pc, #260]	; (1000be24 <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000bd1e:	2207      	movs	r2, #7
1000bd20:	0031      	movs	r1, r6
1000bd22:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000bd24:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000bd26:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000bd28:	2300      	movs	r3, #0
1000bd2a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000bd2c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000bd2e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000bd30:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000bd32:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bd34:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bd36:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000bd38:	2380      	movs	r3, #128	; 0x80
1000bd3a:	009b      	lsls	r3, r3, #2
1000bd3c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000bd3e:	0020      	movs	r0, r4
1000bd40:	4b39      	ldr	r3, [pc, #228]	; (1000be28 <ble_device_init+0x298>)
1000bd42:	4798      	blx	r3
1000bd44:	2800      	cmp	r0, #0
1000bd46:	d11b      	bne.n	1000bd80 <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000bd48:	0030      	movs	r0, r6
1000bd4a:	4b38      	ldr	r3, [pc, #224]	; (1000be2c <ble_device_init+0x29c>)
1000bd4c:	4798      	blx	r3
1000bd4e:	2800      	cmp	r0, #0
1000bd50:	d003      	beq.n	1000bd5a <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000bd52:	4650      	mov	r0, sl
1000bd54:	47c8      	blx	r9
1000bd56:	4836      	ldr	r0, [pc, #216]	; (1000be30 <ble_device_init+0x2a0>)
1000bd58:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000bd5a:	b011      	add	sp, #68	; 0x44
1000bd5c:	bc3c      	pop	{r2, r3, r4, r5}
1000bd5e:	4690      	mov	r8, r2
1000bd60:	4699      	mov	r9, r3
1000bd62:	46a2      	mov	sl, r4
1000bd64:	46ab      	mov	fp, r5
1000bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000bd68:	4650      	mov	r0, sl
1000bd6a:	47c8      	blx	r9
1000bd6c:	4831      	ldr	r0, [pc, #196]	; (1000be34 <ble_device_init+0x2a4>)
1000bd6e:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000bd70:	4650      	mov	r0, sl
1000bd72:	47c8      	blx	r9
1000bd74:	4830      	ldr	r0, [pc, #192]	; (1000be38 <ble_device_init+0x2a8>)
1000bd76:	47c0      	blx	r8
1000bd78:	e7fe      	b.n	1000bd78 <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000bd7a:	4b30      	ldr	r3, [pc, #192]	; (1000be3c <ble_device_init+0x2ac>)
1000bd7c:	602b      	str	r3, [r5, #0]
1000bd7e:	e79c      	b.n	1000bcba <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000bd80:	4650      	mov	r0, sl
1000bd82:	47c8      	blx	r9
1000bd84:	482e      	ldr	r0, [pc, #184]	; (1000be40 <ble_device_init+0x2b0>)
1000bd86:	47c0      	blx	r8
1000bd88:	e7de      	b.n	1000bd48 <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bd8a:	a804      	add	r0, sp, #16
1000bd8c:	4b2d      	ldr	r3, [pc, #180]	; (1000be44 <ble_device_init+0x2b4>)
1000bd8e:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000bd90:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bd92:	2800      	cmp	r0, #0
1000bd94:	d0b1      	beq.n	1000bcfa <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000bd96:	4650      	mov	r0, sl
1000bd98:	47c8      	blx	r9
1000bd9a:	482b      	ldr	r0, [pc, #172]	; (1000be48 <ble_device_init+0x2b8>)
1000bd9c:	47c0      	blx	r8
1000bd9e:	e7ac      	b.n	1000bcfa <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000bda0:	4b2a      	ldr	r3, [pc, #168]	; (1000be4c <ble_device_init+0x2bc>)
1000bda2:	6023      	str	r3, [r4, #0]
1000bda4:	e791      	b.n	1000bcca <ble_device_init+0x13a>
1000bda6:	46c0      	nop			; (mov r8, r8)
1000bda8:	10018e14 	.word	0x10018e14
1000bdac:	10014477 	.word	0x10014477
1000bdb0:	10018e1c 	.word	0x10018e1c
1000bdb4:	1001936c 	.word	0x1001936c
1000bdb8:	10018e18 	.word	0x10018e18
1000bdbc:	100193a4 	.word	0x100193a4
1000bdc0:	1001939c 	.word	0x1001939c
1000bdc4:	100196d8 	.word	0x100196d8
1000bdc8:	10017a14 	.word	0x10017a14
1000bdcc:	10017e14 	.word	0x10017e14
1000bdd0:	10019380 	.word	0x10019380
1000bdd4:	10019358 	.word	0x10019358
1000bdd8:	10019344 	.word	0x10019344
1000bddc:	100193a0 	.word	0x100193a0
1000bde0:	100190ac 	.word	0x100190ac
1000bde4:	100190a8 	.word	0x100190a8
1000bde8:	10019330 	.word	0x10019330
1000bdec:	100198e4 	.word	0x100198e4
1000bdf0:	100190c0 	.word	0x100190c0
1000bdf4:	1001932c 	.word	0x1001932c
1000bdf8:	100158a0 	.word	0x100158a0
1000bdfc:	100146e1 	.word	0x100146e1
1000be00:	100145c1 	.word	0x100145c1
1000be04:	10016e14 	.word	0x10016e14
1000be08:	1000ee51 	.word	0x1000ee51
1000be0c:	10016e84 	.word	0x10016e84
1000be10:	1000ed69 	.word	0x1000ed69
1000be14:	10016e90 	.word	0x10016e90
1000be18:	10016a28 	.word	0x10016a28
1000be1c:	1001443b 	.word	0x1001443b
1000be20:	10016ec0 	.word	0x10016ec0
1000be24:	00003a98 	.word	0x00003a98
1000be28:	1000edc1 	.word	0x1000edc1
1000be2c:	1000f005 	.word	0x1000f005
1000be30:	10016f1c 	.word	0x10016f1c
1000be34:	10016e28 	.word	0x10016e28
1000be38:	10016e48 	.word	0x10016e48
1000be3c:	10017080 	.word	0x10017080
1000be40:	10016ef8 	.word	0x10016ef8
1000be44:	1000ed9d 	.word	0x1000ed9d
1000be48:	10016ea8 	.word	0x10016ea8
1000be4c:	10016a44 	.word	0x10016a44

1000be50 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000be50:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000be52:	2201      	movs	r2, #1
1000be54:	2101      	movs	r1, #1
1000be56:	4b06      	ldr	r3, [pc, #24]	; (1000be70 <ble_send_slave_sec_request+0x20>)
1000be58:	4798      	blx	r3
1000be5a:	2800      	cmp	r0, #0
1000be5c:	d006      	beq.n	1000be6c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000be5e:	4b05      	ldr	r3, [pc, #20]	; (1000be74 <ble_send_slave_sec_request+0x24>)
1000be60:	4805      	ldr	r0, [pc, #20]	; (1000be78 <ble_send_slave_sec_request+0x28>)
1000be62:	4798      	blx	r3
1000be64:	4805      	ldr	r0, [pc, #20]	; (1000be7c <ble_send_slave_sec_request+0x2c>)
1000be66:	4b06      	ldr	r3, [pc, #24]	; (1000be80 <ble_send_slave_sec_request+0x30>)
1000be68:	4798      	blx	r3
1000be6a:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000be6c:	bd10      	pop	{r4, pc}
1000be6e:	46c0      	nop			; (mov r8, r8)
1000be70:	1000f591 	.word	0x1000f591
1000be74:	100146e1 	.word	0x100146e1
1000be78:	100158a0 	.word	0x100158a0
1000be7c:	10016f58 	.word	0x10016f58
1000be80:	100145c1 	.word	0x100145c1

1000be84 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000be84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be86:	464d      	mov	r5, r9
1000be88:	4644      	mov	r4, r8
1000be8a:	465f      	mov	r7, fp
1000be8c:	4656      	mov	r6, sl
1000be8e:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000be90:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000be92:	b099      	sub	sp, #100	; 0x64
1000be94:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000be96:	2d00      	cmp	r5, #0
1000be98:	d156      	bne.n	1000bf48 <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000be9a:	4b69      	ldr	r3, [pc, #420]	; (1000c040 <ble_connected_state_handler+0x1bc>)
1000be9c:	4699      	mov	r9, r3
1000be9e:	0018      	movs	r0, r3
1000bea0:	4b68      	ldr	r3, [pc, #416]	; (1000c044 <ble_connected_state_handler+0x1c0>)
1000bea2:	4698      	mov	r8, r3
1000bea4:	4798      	blx	r3
1000bea6:	7860      	ldrb	r0, [r4, #1]
1000bea8:	7923      	ldrb	r3, [r4, #4]
1000beaa:	7962      	ldrb	r2, [r4, #5]
1000beac:	79a1      	ldrb	r1, [r4, #6]
1000beae:	9002      	str	r0, [sp, #8]
1000beb0:	78a0      	ldrb	r0, [r4, #2]
1000beb2:	4f65      	ldr	r7, [pc, #404]	; (1000c048 <ble_connected_state_handler+0x1c4>)
1000beb4:	9001      	str	r0, [sp, #4]
1000beb6:	78e0      	ldrb	r0, [r4, #3]
1000beb8:	9000      	str	r0, [sp, #0]
1000beba:	4864      	ldr	r0, [pc, #400]	; (1000c04c <ble_connected_state_handler+0x1c8>)
1000bebc:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000bebe:	4648      	mov	r0, r9
1000bec0:	47c0      	blx	r8
1000bec2:	8921      	ldrh	r1, [r4, #8]
1000bec4:	4862      	ldr	r0, [pc, #392]	; (1000c050 <ble_connected_state_handler+0x1cc>)
1000bec6:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000bec8:	2212      	movs	r2, #18
1000beca:	0021      	movs	r1, r4
1000becc:	4b61      	ldr	r3, [pc, #388]	; (1000c054 <ble_connected_state_handler+0x1d0>)
1000bece:	4862      	ldr	r0, [pc, #392]	; (1000c058 <ble_connected_state_handler+0x1d4>)
1000bed0:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bed2:	4b62      	ldr	r3, [pc, #392]	; (1000c05c <ble_connected_state_handler+0x1d8>)
1000bed4:	2207      	movs	r2, #7
1000bed6:	0018      	movs	r0, r3
1000bed8:	469b      	mov	fp, r3
1000beda:	0021      	movs	r1, r4
1000bedc:	4b60      	ldr	r3, [pc, #384]	; (1000c060 <ble_connected_state_handler+0x1dc>)
1000bede:	4798      	blx	r3
1000bee0:	4682      	mov	sl, r0
1000bee2:	2800      	cmp	r0, #0
1000bee4:	d140      	bne.n	1000bf68 <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000bee6:	4b5f      	ldr	r3, [pc, #380]	; (1000c064 <ble_connected_state_handler+0x1e0>)
1000bee8:	781b      	ldrb	r3, [r3, #0]
1000beea:	2b04      	cmp	r3, #4
1000beec:	d900      	bls.n	1000bef0 <ble_connected_state_handler+0x6c>
1000beee:	e076      	b.n	1000bfde <ble_connected_state_handler+0x15a>
1000bef0:	4b5d      	ldr	r3, [pc, #372]	; (1000c068 <ble_connected_state_handler+0x1e4>)
1000bef2:	2600      	movs	r6, #0
1000bef4:	46a8      	mov	r8, r5
1000bef6:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bef8:	2207      	movs	r2, #7
1000befa:	0021      	movs	r1, r4
1000befc:	0038      	movs	r0, r7
1000befe:	4b58      	ldr	r3, [pc, #352]	; (1000c060 <ble_connected_state_handler+0x1dc>)
1000bf00:	4798      	blx	r3
1000bf02:	2800      	cmp	r0, #0
1000bf04:	d100      	bne.n	1000bf08 <ble_connected_state_handler+0x84>
1000bf06:	e076      	b.n	1000bff6 <ble_connected_state_handler+0x172>
1000bf08:	3601      	adds	r6, #1
1000bf0a:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf0c:	2e05      	cmp	r6, #5
1000bf0e:	d1f3      	bne.n	1000bef8 <ble_connected_state_handler+0x74>
1000bf10:	4645      	mov	r5, r8
1000bf12:	2700      	movs	r7, #0
1000bf14:	4b55      	ldr	r3, [pc, #340]	; (1000c06c <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bf16:	781a      	ldrb	r2, [r3, #0]
1000bf18:	2a00      	cmp	r2, #0
1000bf1a:	d100      	bne.n	1000bf1e <ble_connected_state_handler+0x9a>
1000bf1c:	e07d      	b.n	1000c01a <ble_connected_state_handler+0x196>
1000bf1e:	3701      	adds	r7, #1
1000bf20:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf22:	2f05      	cmp	r7, #5
1000bf24:	d1f7      	bne.n	1000bf16 <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bf26:	4653      	mov	r3, sl
1000bf28:	2b00      	cmp	r3, #0
1000bf2a:	d147      	bne.n	1000bfbc <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000bf2c:	017b      	lsls	r3, r7, #5
1000bf2e:	1bdf      	subs	r7, r3, r7
1000bf30:	4b4d      	ldr	r3, [pc, #308]	; (1000c068 <ble_connected_state_handler+0x1e4>)
1000bf32:	00bf      	lsls	r7, r7, #2
1000bf34:	469c      	mov	ip, r3
1000bf36:	2305      	movs	r3, #5
1000bf38:	4467      	add	r7, ip
1000bf3a:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bf3c:	2207      	movs	r2, #7
1000bf3e:	2100      	movs	r1, #0
1000bf40:	4658      	mov	r0, fp
1000bf42:	4b4b      	ldr	r3, [pc, #300]	; (1000c070 <ble_connected_state_handler+0x1ec>)
1000bf44:	4798      	blx	r3
1000bf46:	e007      	b.n	1000bf58 <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000bf48:	4b3e      	ldr	r3, [pc, #248]	; (1000c044 <ble_connected_state_handler+0x1c0>)
1000bf4a:	483d      	ldr	r0, [pc, #244]	; (1000c040 <ble_connected_state_handler+0x1bc>)
1000bf4c:	4798      	blx	r3
1000bf4e:	7aa1      	ldrb	r1, [r4, #10]
1000bf50:	4848      	ldr	r0, [pc, #288]	; (1000c074 <ble_connected_state_handler+0x1f0>)
1000bf52:	4b3d      	ldr	r3, [pc, #244]	; (1000c048 <ble_connected_state_handler+0x1c4>)
1000bf54:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000bf56:	2500      	movs	r5, #0
}
1000bf58:	0028      	movs	r0, r5
1000bf5a:	b019      	add	sp, #100	; 0x64
1000bf5c:	bc3c      	pop	{r2, r3, r4, r5}
1000bf5e:	4690      	mov	r8, r2
1000bf60:	4699      	mov	r9, r3
1000bf62:	46a2      	mov	sl, r4
1000bf64:	46ab      	mov	fp, r5
1000bf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bf68:	7823      	ldrb	r3, [r4, #0]
1000bf6a:	2b02      	cmp	r3, #2
1000bf6c:	d1bb      	bne.n	1000bee6 <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bf6e:	ad04      	add	r5, sp, #16
1000bf70:	2250      	movs	r2, #80	; 0x50
1000bf72:	4b3f      	ldr	r3, [pc, #252]	; (1000c070 <ble_connected_state_handler+0x1ec>)
1000bf74:	2100      	movs	r1, #0
1000bf76:	0028      	movs	r0, r5
1000bf78:	4798      	blx	r3
1000bf7a:	4b3f      	ldr	r3, [pc, #252]	; (1000c078 <ble_connected_state_handler+0x1f4>)
1000bf7c:	0022      	movs	r2, r4
1000bf7e:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bf80:	2300      	movs	r3, #0
1000bf82:	4664      	mov	r4, ip
1000bf84:	4694      	mov	ip, r2
1000bf86:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bf88:	0022      	movs	r2, r4
1000bf8a:	3610      	adds	r6, #16
1000bf8c:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bf8e:	7810      	ldrb	r0, [r2, #0]
1000bf90:	1c59      	adds	r1, r3, #1
1000bf92:	54e8      	strb	r0, [r5, r3]
1000bf94:	b28b      	uxth	r3, r1
1000bf96:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bf98:	42b3      	cmp	r3, r6
1000bf9a:	d1f8      	bne.n	1000bf8e <ble_connected_state_handler+0x10a>
1000bf9c:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bf9e:	2b50      	cmp	r3, #80	; 0x50
1000bfa0:	d1f1      	bne.n	1000bf86 <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bfa2:	002a      	movs	r2, r5
1000bfa4:	4661      	mov	r1, ip
1000bfa6:	2005      	movs	r0, #5
1000bfa8:	4b34      	ldr	r3, [pc, #208]	; (1000c07c <ble_connected_state_handler+0x1f8>)
1000bfaa:	4798      	blx	r3
1000bfac:	1e05      	subs	r5, r0, #0
1000bfae:	d0d3      	beq.n	1000bf58 <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000bfb0:	4648      	mov	r0, r9
1000bfb2:	47c0      	blx	r8
1000bfb4:	4832      	ldr	r0, [pc, #200]	; (1000c080 <ble_connected_state_handler+0x1fc>)
1000bfb6:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000bfb8:	25e2      	movs	r5, #226	; 0xe2
1000bfba:	e7cd      	b.n	1000bf58 <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bfbc:	017b      	lsls	r3, r7, #5
1000bfbe:	1bdf      	subs	r7, r3, r7
1000bfc0:	4b29      	ldr	r3, [pc, #164]	; (1000c068 <ble_connected_state_handler+0x1e4>)
1000bfc2:	00bf      	lsls	r7, r7, #2
1000bfc4:	469c      	mov	ip, r3
1000bfc6:	230a      	movs	r3, #10
1000bfc8:	4467      	add	r7, ip
1000bfca:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bfcc:	2207      	movs	r2, #7
1000bfce:	2100      	movs	r1, #0
1000bfd0:	4658      	mov	r0, fp
1000bfd2:	4b27      	ldr	r3, [pc, #156]	; (1000c070 <ble_connected_state_handler+0x1ec>)
1000bfd4:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000bfd6:	8920      	ldrh	r0, [r4, #8]
1000bfd8:	4b2a      	ldr	r3, [pc, #168]	; (1000c084 <ble_connected_state_handler+0x200>)
1000bfda:	4798      	blx	r3
1000bfdc:	e7bc      	b.n	1000bf58 <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000bfde:	4648      	mov	r0, r9
1000bfe0:	47c0      	blx	r8
1000bfe2:	4b20      	ldr	r3, [pc, #128]	; (1000c064 <ble_connected_state_handler+0x1e0>)
1000bfe4:	4828      	ldr	r0, [pc, #160]	; (1000c088 <ble_connected_state_handler+0x204>)
1000bfe6:	7819      	ldrb	r1, [r3, #0]
1000bfe8:	b2c9      	uxtb	r1, r1
1000bfea:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000bfec:	8920      	ldrh	r0, [r4, #8]
1000bfee:	2113      	movs	r1, #19
1000bff0:	4b26      	ldr	r3, [pc, #152]	; (1000c08c <ble_connected_state_handler+0x208>)
1000bff2:	4798      	blx	r3
1000bff4:	e7b0      	b.n	1000bf58 <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bff6:	4a1c      	ldr	r2, [pc, #112]	; (1000c068 <ble_connected_state_handler+0x1e4>)
1000bff8:	0037      	movs	r7, r6
1000bffa:	4694      	mov	ip, r2
1000bffc:	4645      	mov	r5, r8
1000bffe:	0173      	lsls	r3, r6, #5
1000c000:	1b9b      	subs	r3, r3, r6
1000c002:	009b      	lsls	r3, r3, #2
1000c004:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c006:	2202      	movs	r2, #2
1000c008:	335e      	adds	r3, #94	; 0x5e
1000c00a:	701a      	strb	r2, [r3, #0]
1000c00c:	0021      	movs	r1, r4
1000c00e:	3205      	adds	r2, #5
1000c010:	4658      	mov	r0, fp
1000c012:	4b13      	ldr	r3, [pc, #76]	; (1000c060 <ble_connected_state_handler+0x1dc>)
1000c014:	4798      	blx	r3
1000c016:	4682      	mov	sl, r0
1000c018:	e785      	b.n	1000bf26 <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000c01a:	4a13      	ldr	r2, [pc, #76]	; (1000c068 <ble_connected_state_handler+0x1e4>)
1000c01c:	017b      	lsls	r3, r7, #5
1000c01e:	4690      	mov	r8, r2
1000c020:	1bdb      	subs	r3, r3, r7
1000c022:	009b      	lsls	r3, r3, #2
1000c024:	4498      	add	r8, r3
1000c026:	2212      	movs	r2, #18
1000c028:	4b0a      	ldr	r3, [pc, #40]	; (1000c054 <ble_connected_state_handler+0x1d0>)
1000c02a:	0021      	movs	r1, r4
1000c02c:	4640      	mov	r0, r8
1000c02e:	4798      	blx	r3
						ble_device_count++;
1000c030:	4b0c      	ldr	r3, [pc, #48]	; (1000c064 <ble_connected_state_handler+0x1e0>)
1000c032:	4a0c      	ldr	r2, [pc, #48]	; (1000c064 <ble_connected_state_handler+0x1e0>)
1000c034:	781b      	ldrb	r3, [r3, #0]
1000c036:	3301      	adds	r3, #1
1000c038:	b2db      	uxtb	r3, r3
1000c03a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c03c:	4643      	mov	r3, r8
1000c03e:	e7e2      	b.n	1000c006 <ble_connected_state_handler+0x182>
1000c040:	100158a0 	.word	0x100158a0
1000c044:	100146e1 	.word	0x100146e1
1000c048:	100145c1 	.word	0x100145c1
1000c04c:	10016f78 	.word	0x10016f78
1000c050:	10016fbc 	.word	0x10016fbc
1000c054:	1001443b 	.word	0x1001443b
1000c058:	1001936c 	.word	0x1001936c
1000c05c:	10018e1c 	.word	0x10018e1c
1000c060:	1001441d 	.word	0x1001441d
1000c064:	1001932c 	.word	0x1001932c
1000c068:	100190c0 	.word	0x100190c0
1000c06c:	1001911e 	.word	0x1001911e
1000c070:	10014477 	.word	0x10014477
1000c074:	10017034 	.word	0x10017034
1000c078:	10019106 	.word	0x10019106
1000c07c:	1000f0a5 	.word	0x1000f0a5
1000c080:	10016fd4 	.word	0x10016fd4
1000c084:	1000be51 	.word	0x1000be51
1000c088:	10016ff8 	.word	0x10016ff8
1000c08c:	1000f079 	.word	0x1000f079

1000c090 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c092:	7803      	ldrb	r3, [r0, #0]
1000c094:	2b00      	cmp	r3, #0
1000c096:	d10d      	bne.n	1000c0b4 <ble_resolv_rand_addr_handler+0x24>
1000c098:	2400      	movs	r4, #0
1000c09a:	4d21      	ldr	r5, [pc, #132]	; (1000c120 <ble_resolv_rand_addr_handler+0x90>)
1000c09c:	4f21      	ldr	r7, [pc, #132]	; (1000c124 <ble_resolv_rand_addr_handler+0x94>)
1000c09e:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000c0a0:	2210      	movs	r2, #16
1000c0a2:	0029      	movs	r1, r5
1000c0a4:	0030      	movs	r0, r6
1000c0a6:	47b8      	blx	r7
1000c0a8:	2800      	cmp	r0, #0
1000c0aa:	d00e      	beq.n	1000c0ca <ble_resolv_rand_addr_handler+0x3a>
1000c0ac:	3401      	adds	r4, #1
1000c0ae:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c0b0:	2c05      	cmp	r4, #5
1000c0b2:	d1f5      	bne.n	1000c0a0 <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c0b4:	2300      	movs	r3, #0
1000c0b6:	4a1c      	ldr	r2, [pc, #112]	; (1000c128 <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c0b8:	7811      	ldrb	r1, [r2, #0]
1000c0ba:	2900      	cmp	r1, #0
1000c0bc:	d019      	beq.n	1000c0f2 <ble_resolv_rand_addr_handler+0x62>
1000c0be:	3301      	adds	r3, #1
1000c0c0:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c0c2:	2b05      	cmp	r3, #5
1000c0c4:	d1f8      	bne.n	1000c0b8 <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c0c6:	2000      	movs	r0, #0
1000c0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c0ca:	0160      	lsls	r0, r4, #5
1000c0cc:	1b00      	subs	r0, r0, r4
1000c0ce:	0084      	lsls	r4, r0, #2
1000c0d0:	4816      	ldr	r0, [pc, #88]	; (1000c12c <ble_resolv_rand_addr_handler+0x9c>)
1000c0d2:	2202      	movs	r2, #2
1000c0d4:	1900      	adds	r0, r0, r4
1000c0d6:	0003      	movs	r3, r0
1000c0d8:	335e      	adds	r3, #94	; 0x5e
1000c0da:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c0dc:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c0de:	4c14      	ldr	r4, [pc, #80]	; (1000c130 <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c0e0:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c0e2:	3210      	adds	r2, #16
1000c0e4:	0021      	movs	r1, r4
1000c0e6:	4b13      	ldr	r3, [pc, #76]	; (1000c134 <ble_resolv_rand_addr_handler+0xa4>)
1000c0e8:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c0ea:	8920      	ldrh	r0, [r4, #8]
1000c0ec:	4b12      	ldr	r3, [pc, #72]	; (1000c138 <ble_resolv_rand_addr_handler+0xa8>)
1000c0ee:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000c0f0:	e7e9      	b.n	1000c0c6 <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c0f2:	015d      	lsls	r5, r3, #5
1000c0f4:	1aeb      	subs	r3, r5, r3
1000c0f6:	4d0d      	ldr	r5, [pc, #52]	; (1000c12c <ble_resolv_rand_addr_handler+0x9c>)
1000c0f8:	009b      	lsls	r3, r3, #2
1000c0fa:	4c0d      	ldr	r4, [pc, #52]	; (1000c130 <ble_resolv_rand_addr_handler+0xa0>)
1000c0fc:	18ed      	adds	r5, r5, r3
1000c0fe:	2212      	movs	r2, #18
1000c100:	4b0c      	ldr	r3, [pc, #48]	; (1000c134 <ble_resolv_rand_addr_handler+0xa4>)
1000c102:	0021      	movs	r1, r4
1000c104:	0028      	movs	r0, r5
1000c106:	4798      	blx	r3
				ble_device_count++;
1000c108:	4a0c      	ldr	r2, [pc, #48]	; (1000c13c <ble_resolv_rand_addr_handler+0xac>)
1000c10a:	7813      	ldrb	r3, [r2, #0]
1000c10c:	3301      	adds	r3, #1
1000c10e:	b2db      	uxtb	r3, r3
1000c110:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c112:	002b      	movs	r3, r5
1000c114:	2202      	movs	r2, #2
1000c116:	335e      	adds	r3, #94	; 0x5e
1000c118:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c11a:	230a      	movs	r3, #10
1000c11c:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000c11e:	e7e4      	b.n	1000c0ea <ble_resolv_rand_addr_handler+0x5a>
1000c120:	10019106 	.word	0x10019106
1000c124:	1001441d 	.word	0x1001441d
1000c128:	1001911e 	.word	0x1001911e
1000c12c:	100190c0 	.word	0x100190c0
1000c130:	1001936c 	.word	0x1001936c
1000c134:	1001443b 	.word	0x1001443b
1000c138:	1000be51 	.word	0x1000be51
1000c13c:	1001932c 	.word	0x1001932c

1000c140 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c142:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000c144:	283b      	cmp	r0, #59	; 0x3b
1000c146:	d865      	bhi.n	1000c214 <ble_event_manager+0xd4>
1000c148:	4b36      	ldr	r3, [pc, #216]	; (1000c224 <ble_event_manager+0xe4>)
1000c14a:	0086      	lsls	r6, r0, #2
1000c14c:	599b      	ldr	r3, [r3, r6]
1000c14e:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c150:	4b35      	ldr	r3, [pc, #212]	; (1000c228 <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c152:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c154:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c156:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c158:	2b00      	cmp	r3, #0
1000c15a:	d005      	beq.n	1000c168 <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c15c:	0080      	lsls	r0, r0, #2
1000c15e:	58c3      	ldr	r3, [r0, r3]
1000c160:	2b00      	cmp	r3, #0
1000c162:	d001      	beq.n	1000c168 <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000c164:	0028      	movs	r0, r5
1000c166:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000c168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000c16a:	4b30      	ldr	r3, [pc, #192]	; (1000c22c <ble_event_manager+0xec>)
1000c16c:	681b      	ldr	r3, [r3, #0]
1000c16e:	2b00      	cmp	r3, #0
1000c170:	d0fa      	beq.n	1000c168 <ble_event_manager+0x28>
			ble_user_event_cb();
1000c172:	4798      	blx	r3
1000c174:	e7f8      	b.n	1000c168 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c176:	2400      	movs	r4, #0
1000c178:	4f2d      	ldr	r7, [pc, #180]	; (1000c230 <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000c17a:	593b      	ldr	r3, [r7, r4]
1000c17c:	2b00      	cmp	r3, #0
1000c17e:	d004      	beq.n	1000c18a <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c180:	599b      	ldr	r3, [r3, r6]
1000c182:	2b00      	cmp	r3, #0
1000c184:	d001      	beq.n	1000c18a <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000c186:	0028      	movs	r0, r5
1000c188:	4798      	blx	r3
1000c18a:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000c18c:	2c14      	cmp	r4, #20
1000c18e:	d1f4      	bne.n	1000c17a <ble_event_manager+0x3a>
1000c190:	e7ea      	b.n	1000c168 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c192:	2600      	movs	r6, #0
1000c194:	3813      	subs	r0, #19
1000c196:	b2c4      	uxtb	r4, r0
1000c198:	4f26      	ldr	r7, [pc, #152]	; (1000c234 <ble_event_manager+0xf4>)
1000c19a:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000c19c:	59bb      	ldr	r3, [r7, r6]
1000c19e:	2b00      	cmp	r3, #0
1000c1a0:	d004      	beq.n	1000c1ac <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c1a2:	591b      	ldr	r3, [r3, r4]
1000c1a4:	2b00      	cmp	r3, #0
1000c1a6:	d001      	beq.n	1000c1ac <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000c1a8:	0028      	movs	r0, r5
1000c1aa:	4798      	blx	r3
1000c1ac:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000c1ae:	2e14      	cmp	r6, #20
1000c1b0:	d1f4      	bne.n	1000c19c <ble_event_manager+0x5c>
1000c1b2:	e7d9      	b.n	1000c168 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c1b4:	2600      	movs	r6, #0
1000c1b6:	381d      	subs	r0, #29
1000c1b8:	b2c4      	uxtb	r4, r0
1000c1ba:	4f1f      	ldr	r7, [pc, #124]	; (1000c238 <ble_event_manager+0xf8>)
1000c1bc:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000c1be:	59bb      	ldr	r3, [r7, r6]
1000c1c0:	2b00      	cmp	r3, #0
1000c1c2:	d004      	beq.n	1000c1ce <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c1c4:	591b      	ldr	r3, [r3, r4]
1000c1c6:	2b00      	cmp	r3, #0
1000c1c8:	d001      	beq.n	1000c1ce <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000c1ca:	0028      	movs	r0, r5
1000c1cc:	4798      	blx	r3
1000c1ce:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000c1d0:	2e14      	cmp	r6, #20
1000c1d2:	d1f4      	bne.n	1000c1be <ble_event_manager+0x7e>
1000c1d4:	e7c8      	b.n	1000c168 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c1d6:	4b19      	ldr	r3, [pc, #100]	; (1000c23c <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c1d8:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c1da:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c1dc:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c1de:	2b00      	cmp	r3, #0
1000c1e0:	d1bc      	bne.n	1000c15c <ble_event_manager+0x1c>
1000c1e2:	e7c1      	b.n	1000c168 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c1e4:	4b16      	ldr	r3, [pc, #88]	; (1000c240 <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c1e6:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c1e8:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c1ea:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c1ec:	2b00      	cmp	r3, #0
1000c1ee:	d1b5      	bne.n	1000c15c <ble_event_manager+0x1c>
1000c1f0:	e7ba      	b.n	1000c168 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c1f2:	2600      	movs	r6, #0
1000c1f4:	3836      	subs	r0, #54	; 0x36
1000c1f6:	b2c4      	uxtb	r4, r0
1000c1f8:	4f12      	ldr	r7, [pc, #72]	; (1000c244 <ble_event_manager+0x104>)
1000c1fa:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000c1fc:	59bb      	ldr	r3, [r7, r6]
1000c1fe:	2b00      	cmp	r3, #0
1000c200:	d004      	beq.n	1000c20c <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c202:	591b      	ldr	r3, [r3, r4]
1000c204:	2b00      	cmp	r3, #0
1000c206:	d001      	beq.n	1000c20c <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000c208:	0028      	movs	r0, r5
1000c20a:	4798      	blx	r3
1000c20c:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000c20e:	2e14      	cmp	r6, #20
1000c210:	d1f4      	bne.n	1000c1fc <ble_event_manager+0xbc>
1000c212:	e7a9      	b.n	1000c168 <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000c214:	4d0c      	ldr	r5, [pc, #48]	; (1000c248 <ble_event_manager+0x108>)
1000c216:	4c0d      	ldr	r4, [pc, #52]	; (1000c24c <ble_event_manager+0x10c>)
1000c218:	0028      	movs	r0, r5
1000c21a:	47a0      	blx	r4
1000c21c:	0028      	movs	r0, r5
1000c21e:	47a0      	blx	r4
	}
	break;		
	}
}
1000c220:	e7a2      	b.n	1000c168 <ble_event_manager+0x28>
1000c222:	46c0      	nop			; (mov r8, r8)
1000c224:	10016938 	.word	0x10016938
1000c228:	100198e4 	.word	0x100198e4
1000c22c:	10018e14 	.word	0x10018e14
1000c230:	10019344 	.word	0x10019344
1000c234:	10019358 	.word	0x10019358
1000c238:	100190ac 	.word	0x100190ac
1000c23c:	100193a0 	.word	0x100193a0
1000c240:	100190a8 	.word	0x100190a8
1000c244:	10019330 	.word	0x10019330
1000c248:	100158a0 	.word	0x100158a0
1000c24c:	100146e1 	.word	0x100146e1

1000c250 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c252:	4d0f      	ldr	r5, [pc, #60]	; (1000c290 <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c254:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c256:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c258:	2b01      	cmp	r3, #1
1000c25a:	d015      	beq.n	1000c288 <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c25c:	4e0d      	ldr	r6, [pc, #52]	; (1000c294 <ble_event_task+0x44>)
1000c25e:	4f0e      	ldr	r7, [pc, #56]	; (1000c298 <ble_event_task+0x48>)
1000c260:	0022      	movs	r2, r4
1000c262:	4b0e      	ldr	r3, [pc, #56]	; (1000c29c <ble_event_task+0x4c>)
1000c264:	0031      	movs	r1, r6
1000c266:	0038      	movs	r0, r7
1000c268:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c26a:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c26c:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c26e:	2b01      	cmp	r3, #1
1000c270:	d007      	beq.n	1000c282 <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000c272:	2c00      	cmp	r4, #0
1000c274:	d103      	bne.n	1000c27e <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000c276:	7838      	ldrb	r0, [r7, #0]
1000c278:	0031      	movs	r1, r6
1000c27a:	4b09      	ldr	r3, [pc, #36]	; (1000c2a0 <ble_event_task+0x50>)
1000c27c:	4798      	blx	r3
    }
    
    return status;
}
1000c27e:	0020      	movs	r0, r4
1000c280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000c282:	4b08      	ldr	r3, [pc, #32]	; (1000c2a4 <ble_event_task+0x54>)
1000c284:	4798      	blx	r3
1000c286:	e7f4      	b.n	1000c272 <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000c288:	4b07      	ldr	r3, [pc, #28]	; (1000c2a8 <ble_event_task+0x58>)
1000c28a:	4798      	blx	r3
1000c28c:	e7e6      	b.n	1000c25c <ble_event_task+0xc>
1000c28e:	46c0      	nop			; (mov r8, r8)
1000c290:	10018e23 	.word	0x10018e23
1000c294:	100196d8 	.word	0x100196d8
1000c298:	1001939c 	.word	0x1001939c
1000c29c:	1000e5f9 	.word	0x1000e5f9
1000c2a0:	1000c141 	.word	0x1000c141
1000c2a4:	1000cb9d 	.word	0x1000cb9d
1000c2a8:	1000cbc5 	.word	0x1000cbc5

1000c2ac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000c2ac:	b570      	push	{r4, r5, r6, lr}
1000c2ae:	0006      	movs	r6, r0
1000c2b0:	000d      	movs	r5, r1
1000c2b2:	4c03      	ldr	r4, [pc, #12]	; (1000c2c0 <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000c2b4:	0029      	movs	r1, r5
1000c2b6:	0030      	movs	r0, r6
1000c2b8:	47a0      	blx	r4
1000c2ba:	2800      	cmp	r0, #0
1000c2bc:	d1fa      	bne.n	1000c2b4 <usart_serial_getchar+0x8>
}
1000c2be:	bd70      	pop	{r4, r5, r6, pc}
1000c2c0:	1000d219 	.word	0x1000d219

1000c2c4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000c2c4:	b570      	push	{r4, r5, r6, lr}
1000c2c6:	0006      	movs	r6, r0
1000c2c8:	000d      	movs	r5, r1
1000c2ca:	4c03      	ldr	r4, [pc, #12]	; (1000c2d8 <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000c2cc:	0029      	movs	r1, r5
1000c2ce:	0030      	movs	r0, r6
1000c2d0:	47a0      	blx	r4
1000c2d2:	2800      	cmp	r0, #0
1000c2d4:	d1fa      	bne.n	1000c2cc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000c2d6:	bd70      	pop	{r4, r5, r6, pc}
1000c2d8:	1000d209 	.word	0x1000d209

1000c2dc <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000c2dc:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000c2de:	4b0e      	ldr	r3, [pc, #56]	; (1000c318 <uart_read_complete_callback+0x3c>)
1000c2e0:	781a      	ldrb	r2, [r3, #0]
1000c2e2:	2a01      	cmp	r2, #1
1000c2e4:	d00c      	beq.n	1000c300 <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000c2e6:	4b0d      	ldr	r3, [pc, #52]	; (1000c31c <uart_read_complete_callback+0x40>)
1000c2e8:	681b      	ldr	r3, [r3, #0]
1000c2ea:	2b00      	cmp	r3, #0
1000c2ec:	d007      	beq.n	1000c2fe <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000c2ee:	4c0c      	ldr	r4, [pc, #48]	; (1000c320 <uart_read_complete_callback+0x44>)
1000c2f0:	7820      	ldrb	r0, [r4, #0]
1000c2f2:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c2f4:	2201      	movs	r2, #1
1000c2f6:	0021      	movs	r1, r4
1000c2f8:	480a      	ldr	r0, [pc, #40]	; (1000c324 <uart_read_complete_callback+0x48>)
1000c2fa:	4b0b      	ldr	r3, [pc, #44]	; (1000c328 <uart_read_complete_callback+0x4c>)
1000c2fc:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000c2fe:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000c300:	3201      	adds	r2, #1
1000c302:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000c304:	4b05      	ldr	r3, [pc, #20]	; (1000c31c <uart_read_complete_callback+0x40>)
1000c306:	681b      	ldr	r3, [r3, #0]
1000c308:	2b00      	cmp	r3, #0
1000c30a:	d1f8      	bne.n	1000c2fe <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000c30c:	2102      	movs	r1, #2
1000c30e:	4805      	ldr	r0, [pc, #20]	; (1000c324 <uart_read_complete_callback+0x48>)
1000c310:	4b06      	ldr	r3, [pc, #24]	; (1000c32c <uart_read_complete_callback+0x50>)
1000c312:	4798      	blx	r3
1000c314:	e7f3      	b.n	1000c2fe <uart_read_complete_callback+0x22>
1000c316:	46c0      	nop			; (mov r8, r8)
1000c318:	10018e28 	.word	0x10018e28
1000c31c:	10018e30 	.word	0x10018e30
1000c320:	10018e2c 	.word	0x10018e2c
1000c324:	100198e8 	.word	0x100198e8
1000c328:	1000d22d 	.word	0x1000d22d
1000c32c:	1000d289 	.word	0x1000d289

1000c330 <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000c330:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000c332:	2100      	movs	r1, #0
1000c334:	4b19      	ldr	r3, [pc, #100]	; (1000c39c <serial_console_init+0x6c>)
1000c336:	2000      	movs	r0, #0
1000c338:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000c33a:	4c19      	ldr	r4, [pc, #100]	; (1000c3a0 <serial_console_init+0x70>)
1000c33c:	4b19      	ldr	r3, [pc, #100]	; (1000c3a4 <serial_console_init+0x74>)
1000c33e:	0020      	movs	r0, r4
1000c340:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000c342:	23e1      	movs	r3, #225	; 0xe1
1000c344:	025b      	lsls	r3, r3, #9
1000c346:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000c348:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000c34a:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000c34c:	4d16      	ldr	r5, [pc, #88]	; (1000c3a8 <serial_console_init+0x78>)
1000c34e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000c350:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000c352:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000c354:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000c356:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000c358:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000c35a:	3201      	adds	r2, #1
1000c35c:	4b13      	ldr	r3, [pc, #76]	; (1000c3ac <serial_console_init+0x7c>)
1000c35e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000c360:	3201      	adds	r2, #1
1000c362:	601d      	str	r5, [r3, #0]
1000c364:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000c366:	4b12      	ldr	r3, [pc, #72]	; (1000c3b0 <serial_console_init+0x80>)
1000c368:	4a12      	ldr	r2, [pc, #72]	; (1000c3b4 <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000c36a:	0028      	movs	r0, r5
1000c36c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000c36e:	4a12      	ldr	r2, [pc, #72]	; (1000c3b8 <serial_console_init+0x88>)
1000c370:	4b12      	ldr	r3, [pc, #72]	; (1000c3bc <serial_console_init+0x8c>)
1000c372:	4913      	ldr	r1, [pc, #76]	; (1000c3c0 <serial_console_init+0x90>)
1000c374:	601a      	str	r2, [r3, #0]
1000c376:	0022      	movs	r2, r4
1000c378:	4b12      	ldr	r3, [pc, #72]	; (1000c3c4 <serial_console_init+0x94>)
1000c37a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000c37c:	4e12      	ldr	r6, [pc, #72]	; (1000c3c8 <serial_console_init+0x98>)
1000c37e:	4c13      	ldr	r4, [pc, #76]	; (1000c3cc <serial_console_init+0x9c>)
1000c380:	6833      	ldr	r3, [r6, #0]
1000c382:	2100      	movs	r1, #0
1000c384:	6898      	ldr	r0, [r3, #8]
1000c386:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000c388:	6833      	ldr	r3, [r6, #0]
1000c38a:	2100      	movs	r1, #0
1000c38c:	6858      	ldr	r0, [r3, #4]
1000c38e:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000c390:	0028      	movs	r0, r5
1000c392:	2202      	movs	r2, #2
1000c394:	490e      	ldr	r1, [pc, #56]	; (1000c3d0 <serial_console_init+0xa0>)
1000c396:	4b0f      	ldr	r3, [pc, #60]	; (1000c3d4 <serial_console_init+0xa4>)
1000c398:	4798      	blx	r3
}
1000c39a:	bd70      	pop	{r4, r5, r6, pc}
1000c39c:	1000d9e1 	.word	0x1000d9e1
1000c3a0:	1001990c 	.word	0x1001990c
1000c3a4:	1000d031 	.word	0x1000d031
1000c3a8:	100198e8 	.word	0x100198e8
1000c3ac:	10019c34 	.word	0x10019c34
1000c3b0:	10019c30 	.word	0x10019c30
1000c3b4:	1000c2c5 	.word	0x1000c2c5
1000c3b8:	1000c2ad 	.word	0x1000c2ad
1000c3bc:	10019c2c 	.word	0x10019c2c
1000c3c0:	40004000 	.word	0x40004000
1000c3c4:	1000d05d 	.word	0x1000d05d
1000c3c8:	10017628 	.word	0x10017628
1000c3cc:	10014791 	.word	0x10014791
1000c3d0:	1000c2dd 	.word	0x1000c2dd
1000c3d4:	1000d255 	.word	0x1000d255

1000c3d8 <_time_start>:

void _time_start(unsigned int sec)
{
1000c3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c3da:	4647      	mov	r7, r8
	system_clock_get_value();
1000c3dc:	4c0e      	ldr	r4, [pc, #56]	; (1000c418 <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000c3de:	b480      	push	{r7}
1000c3e0:	4680      	mov	r8, r0
	system_clock_get_value();
1000c3e2:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000c3e4:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000c3e6:	4f0d      	ldr	r7, [pc, #52]	; (1000c41c <_time_start+0x44>)
1000c3e8:	47b8      	blx	r7
1000c3ea:	4e0d      	ldr	r6, [pc, #52]	; (1000c420 <_time_start+0x48>)
1000c3ec:	4a0d      	ldr	r2, [pc, #52]	; (1000c424 <_time_start+0x4c>)
1000c3ee:	4b0e      	ldr	r3, [pc, #56]	; (1000c428 <_time_start+0x50>)
1000c3f0:	47b0      	blx	r6
1000c3f2:	0004      	movs	r4, r0
1000c3f4:	20fa      	movs	r0, #250	; 0xfa
1000c3f6:	4643      	mov	r3, r8
1000c3f8:	0080      	lsls	r0, r0, #2
1000c3fa:	4358      	muls	r0, r3
1000c3fc:	000d      	movs	r5, r1
1000c3fe:	47b8      	blx	r7
1000c400:	0002      	movs	r2, r0
1000c402:	000b      	movs	r3, r1
1000c404:	0020      	movs	r0, r4
1000c406:	0029      	movs	r1, r5
1000c408:	47b0      	blx	r6
1000c40a:	4b08      	ldr	r3, [pc, #32]	; (1000c42c <_time_start+0x54>)
1000c40c:	4798      	blx	r3
1000c40e:	4b08      	ldr	r3, [pc, #32]	; (1000c430 <_time_start+0x58>)
1000c410:	6018      	str	r0, [r3, #0]
}
1000c412:	bc04      	pop	{r2}
1000c414:	4690      	mov	r8, r2
1000c416:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c418:	1000da65 	.word	0x1000da65
1000c41c:	10013f71 	.word	0x10013f71
1000c420:	10013369 	.word	0x10013369
1000c424:	19feaec7 	.word	0x19feaec7
1000c428:	3f09d8ef 	.word	0x3f09d8ef
1000c42c:	10011d79 	.word	0x10011d79
1000c430:	10018e24 	.word	0x10018e24

1000c434 <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000c434:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000c436:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000c438:	4c15      	ldr	r4, [pc, #84]	; (1000c490 <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000c43a:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000c43c:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000c43e:	4b15      	ldr	r3, [pc, #84]	; (1000c494 <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c440:	4e15      	ldr	r6, [pc, #84]	; (1000c498 <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000c442:	681b      	ldr	r3, [r3, #0]
1000c444:	2b00      	cmp	r3, #0
1000c446:	d01d      	beq.n	1000c484 <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000c448:	0028      	movs	r0, r5
1000c44a:	4b14      	ldr	r3, [pc, #80]	; (1000c49c <getchar_b11_timeout+0x68>)
1000c44c:	4798      	blx	r3
	
	string_input[0] = 0;
1000c44e:	2300      	movs	r3, #0
1000c450:	4d13      	ldr	r5, [pc, #76]	; (1000c4a0 <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c452:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000c454:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c456:	0029      	movs	r1, r5
1000c458:	4b12      	ldr	r3, [pc, #72]	; (1000c4a4 <getchar_b11_timeout+0x70>)
1000c45a:	0030      	movs	r0, r6
1000c45c:	4798      	blx	r3
1000c45e:	4812      	ldr	r0, [pc, #72]	; (1000c4a8 <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c460:	2100      	movs	r1, #0
1000c462:	6803      	ldr	r3, [r0, #0]
1000c464:	e003      	b.n	1000c46e <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000c466:	3b01      	subs	r3, #1
1000c468:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c46a:	2b00      	cmp	r3, #0
1000c46c:	d008      	beq.n	1000c480 <getchar_b11_timeout+0x4c>
1000c46e:	7822      	ldrb	r2, [r4, #0]
1000c470:	2a02      	cmp	r2, #2
1000c472:	d1f8      	bne.n	1000c466 <getchar_b11_timeout+0x32>
1000c474:	2900      	cmp	r1, #0
1000c476:	d103      	bne.n	1000c480 <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000c478:	2300      	movs	r3, #0

	return string_input[0];
1000c47a:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000c47c:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000c47e:	bd70      	pop	{r4, r5, r6, pc}
1000c480:	6003      	str	r3, [r0, #0]
1000c482:	e7f9      	b.n	1000c478 <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c484:	2102      	movs	r1, #2
1000c486:	0030      	movs	r0, r6
1000c488:	4b08      	ldr	r3, [pc, #32]	; (1000c4ac <getchar_b11_timeout+0x78>)
1000c48a:	4798      	blx	r3
1000c48c:	e7dc      	b.n	1000c448 <getchar_b11_timeout+0x14>
1000c48e:	46c0      	nop			; (mov r8, r8)
1000c490:	10018e28 	.word	0x10018e28
1000c494:	10018e30 	.word	0x10018e30
1000c498:	100198e8 	.word	0x100198e8
1000c49c:	1000c3d9 	.word	0x1000c3d9
1000c4a0:	10018e2c 	.word	0x10018e2c
1000c4a4:	1000d22d 	.word	0x1000d22d
1000c4a8:	10018e24 	.word	0x10018e24
1000c4ac:	1000d269 	.word	0x1000d269

1000c4b0 <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000c4b0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000c4b2:	4b0c      	ldr	r3, [pc, #48]	; (1000c4e4 <platform_event_post+0x34>)
1000c4b4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000c4b6:	2c00      	cmp	r4, #0
1000c4b8:	d010      	beq.n	1000c4dc <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000c4ba:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000c4bc:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000c4be:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000c4c0:	2300      	movs	r3, #0
1000c4c2:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000c4c4:	4b08      	ldr	r3, [pc, #32]	; (1000c4e8 <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000c4c6:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000c4c8:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000c4ca:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000c4cc:	2a00      	cmp	r2, #0
1000c4ce:	d101      	bne.n	1000c4d4 <platform_event_post+0x24>
1000c4d0:	e005      	b.n	1000c4de <platform_event_post+0x2e>
1000c4d2:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000c4d4:	6813      	ldr	r3, [r2, #0]
1000c4d6:	2b00      	cmp	r3, #0
1000c4d8:	d1fb      	bne.n	1000c4d2 <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000c4da:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000c4dc:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000c4de:	601c      	str	r4, [r3, #0]
1000c4e0:	e7fc      	b.n	1000c4dc <platform_event_post+0x2c>
1000c4e2:	46c0      	nop			; (mov r8, r8)
1000c4e4:	10018e38 	.word	0x10018e38
1000c4e8:	10018e34 	.word	0x10018e34

1000c4ec <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000c4ec:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000c4ee:	b510      	push	{r4, lr}
1000c4f0:	4c07      	ldr	r4, [pc, #28]	; (1000c510 <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000c4f2:	4b08      	ldr	r3, [pc, #32]	; (1000c514 <platform_event_init+0x28>)
1000c4f4:	0020      	movs	r0, r4
1000c4f6:	601a      	str	r2, [r3, #0]
1000c4f8:	0023      	movs	r3, r4
1000c4fa:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000c4fc:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000c4fe:	601a      	str	r2, [r3, #0]
1000c500:	330c      	adds	r3, #12
1000c502:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000c504:	4283      	cmp	r3, r0
1000c506:	d1f9      	bne.n	1000c4fc <platform_event_init+0x10>
1000c508:	4b03      	ldr	r3, [pc, #12]	; (1000c518 <platform_event_init+0x2c>)
1000c50a:	346c      	adds	r4, #108	; 0x6c
1000c50c:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000c50e:	bd10      	pop	{r4, pc}
1000c510:	10018e3c 	.word	0x10018e3c
1000c514:	10018e34 	.word	0x10018e34
1000c518:	10018e38 	.word	0x10018e38

1000c51c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000c51c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000c51e:	4b06      	ldr	r3, [pc, #24]	; (1000c538 <samb11_plf_resume_callback+0x1c>)
1000c520:	4a06      	ldr	r2, [pc, #24]	; (1000c53c <samb11_plf_resume_callback+0x20>)
1000c522:	6819      	ldr	r1, [r3, #0]
1000c524:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000c526:	685a      	ldr	r2, [r3, #4]
1000c528:	4b05      	ldr	r3, [pc, #20]	; (1000c540 <samb11_plf_resume_callback+0x24>)
1000c52a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000c52c:	4b05      	ldr	r3, [pc, #20]	; (1000c544 <samb11_plf_resume_callback+0x28>)
1000c52e:	681b      	ldr	r3, [r3, #0]
1000c530:	2b00      	cmp	r3, #0
1000c532:	d000      	beq.n	1000c536 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000c534:	4798      	blx	r3
	}
}
1000c536:	bd10      	pop	{r4, pc}
1000c538:	10019934 	.word	0x10019934
1000c53c:	4000b00c 	.word	0x4000b00c
1000c540:	4000b010 	.word	0x4000b010
1000c544:	10019c10 	.word	0x10019c10

1000c548 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000c548:	b570      	push	{r4, r5, r6, lr}
1000c54a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c54c:	4b13      	ldr	r3, [pc, #76]	; (1000c59c <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c54e:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c550:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000c552:	4b13      	ldr	r3, [pc, #76]	; (1000c5a0 <at_ke_msg_send+0x58>)
1000c554:	681b      	ldr	r3, [r3, #0]
1000c556:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c558:	2c00      	cmp	r4, #0
1000c55a:	d018      	beq.n	1000c58e <at_ke_msg_send+0x46>
1000c55c:	88e3      	ldrh	r3, [r4, #6]
1000c55e:	2b05      	cmp	r3, #5
1000c560:	d015      	beq.n	1000c58e <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000c562:	07eb      	lsls	r3, r5, #31
1000c564:	d414      	bmi.n	1000c590 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000c566:	4b0f      	ldr	r3, [pc, #60]	; (1000c5a4 <at_ke_msg_send+0x5c>)
1000c568:	2002      	movs	r0, #2
1000c56a:	681b      	ldr	r3, [r3, #0]
1000c56c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000c56e:	4b0e      	ldr	r3, [pc, #56]	; (1000c5a8 <at_ke_msg_send+0x60>)
1000c570:	681b      	ldr	r3, [r3, #0]
1000c572:	4798      	blx	r3
1000c574:	4c0d      	ldr	r4, [pc, #52]	; (1000c5ac <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000c576:	2003      	movs	r0, #3
1000c578:	6823      	ldr	r3, [r4, #0]
1000c57a:	4798      	blx	r3
1000c57c:	2800      	cmp	r0, #0
1000c57e:	d1fa      	bne.n	1000c576 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000c580:	4b0b      	ldr	r3, [pc, #44]	; (1000c5b0 <at_ke_msg_send+0x68>)
1000c582:	3002      	adds	r0, #2
1000c584:	681b      	ldr	r3, [r3, #0]
1000c586:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000c588:	2201      	movs	r2, #1
1000c58a:	4b0a      	ldr	r3, [pc, #40]	; (1000c5b4 <at_ke_msg_send+0x6c>)
1000c58c:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000c58e:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000c590:	4b09      	ldr	r3, [pc, #36]	; (1000c5b8 <at_ke_msg_send+0x70>)
1000c592:	6818      	ldr	r0, [r3, #0]
1000c594:	4b09      	ldr	r3, [pc, #36]	; (1000c5bc <at_ke_msg_send+0x74>)
1000c596:	681b      	ldr	r3, [r3, #0]
1000c598:	4798      	blx	r3
		}
	}
}
1000c59a:	e7f8      	b.n	1000c58e <at_ke_msg_send+0x46>
1000c59c:	4000b1ec 	.word	0x4000b1ec
1000c5a0:	10018ee4 	.word	0x10018ee4
1000c5a4:	10018edc 	.word	0x10018edc
1000c5a8:	10018eec 	.word	0x10018eec
1000c5ac:	10018ec8 	.word	0x10018ec8
1000c5b0:	10018ed0 	.word	0x10018ed0
1000c5b4:	4000b020 	.word	0x4000b020
1000c5b8:	10018ed4 	.word	0x10018ed4
1000c5bc:	10018ec4 	.word	0x10018ec4

1000c5c0 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000c5c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c5c2:	4c0e      	ldr	r4, [pc, #56]	; (1000c5fc <init_port_list+0x3c>)
1000c5c4:	2100      	movs	r1, #0
1000c5c6:	2232      	movs	r2, #50	; 0x32
1000c5c8:	0020      	movs	r0, r4
1000c5ca:	4b0d      	ldr	r3, [pc, #52]	; (1000c600 <init_port_list+0x40>)
1000c5cc:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c5ce:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c5d0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000c5d2:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000c5d4:	004a      	lsls	r2, r1, #1
1000c5d6:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000c5d8:	18a2      	adds	r2, r4, r2
1000c5da:	7853      	ldrb	r3, [r2, #1]
1000c5dc:	3101      	adds	r1, #1
1000c5de:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000c5e0:	b2db      	uxtb	r3, r3
1000c5e2:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c5e4:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000c5e6:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000c5e8:	2919      	cmp	r1, #25
1000c5ea:	d1f3      	bne.n	1000c5d4 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000c5ec:	7863      	ldrb	r3, [r4, #1]
1000c5ee:	4383      	bics	r3, r0
1000c5f0:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000c5f2:	78e3      	ldrb	r3, [r4, #3]
1000c5f4:	4383      	bics	r3, r0
1000c5f6:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000c5f8:	bd70      	pop	{r4, r5, r6, pc}
1000c5fa:	46c0      	nop			; (mov r8, r8)
1000c5fc:	10019950 	.word	0x10019950
1000c600:	10014477 	.word	0x10014477

1000c604 <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c606:	4644      	mov	r4, r8
1000c608:	465f      	mov	r7, fp
1000c60a:	4656      	mov	r6, sl
1000c60c:	464d      	mov	r5, r9
1000c60e:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000c610:	4c55      	ldr	r4, [pc, #340]	; (1000c768 <platform_driver_init+0x164>)
1000c612:	7823      	ldrb	r3, [r4, #0]
1000c614:	2b00      	cmp	r3, #0
1000c616:	d004      	beq.n	1000c622 <platform_driver_init+0x1e>
1000c618:	7823      	ldrb	r3, [r4, #0]
1000c61a:	b2db      	uxtb	r3, r3
1000c61c:	2b01      	cmp	r3, #1
1000c61e:	d100      	bne.n	1000c622 <platform_driver_init+0x1e>
1000c620:	e09e      	b.n	1000c760 <platform_driver_init+0x15c>
		init_port_list();
1000c622:	4b52      	ldr	r3, [pc, #328]	; (1000c76c <platform_driver_init+0x168>)
1000c624:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c626:	4a52      	ldr	r2, [pc, #328]	; (1000c770 <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c628:	4b52      	ldr	r3, [pc, #328]	; (1000c774 <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c62a:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c62c:	4d52      	ldr	r5, [pc, #328]	; (1000c778 <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c62e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000c630:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000c632:	4a52      	ldr	r2, [pc, #328]	; (1000c77c <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c634:	4952      	ldr	r1, [pc, #328]	; (1000c780 <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000c636:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c638:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c63a:	4b52      	ldr	r3, [pc, #328]	; (1000c784 <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c63c:	4e52      	ldr	r6, [pc, #328]	; (1000c788 <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c63e:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000c640:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000c642:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c644:	2300      	movs	r3, #0
1000c646:	4699      	mov	r9, r3
1000c648:	464a      	mov	r2, r9
1000c64a:	4b50      	ldr	r3, [pc, #320]	; (1000c78c <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c64c:	4950      	ldr	r1, [pc, #320]	; (1000c790 <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c64e:	601a      	str	r2, [r3, #0]
1000c650:	2280      	movs	r2, #128	; 0x80
1000c652:	2380      	movs	r3, #128	; 0x80
1000c654:	0412      	lsls	r2, r2, #16
1000c656:	50ea      	str	r2, [r5, r3]
1000c658:	4693      	mov	fp, r2
1000c65a:	2280      	movs	r2, #128	; 0x80
1000c65c:	0452      	lsls	r2, r2, #17
1000c65e:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c660:	4b4c      	ldr	r3, [pc, #304]	; (1000c794 <platform_driver_init+0x190>)
1000c662:	4692      	mov	sl, r2
1000c664:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c666:	4a4c      	ldr	r2, [pc, #304]	; (1000c798 <platform_driver_init+0x194>)
1000c668:	4b4c      	ldr	r3, [pc, #304]	; (1000c79c <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c66a:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c66c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c66e:	4a4c      	ldr	r2, [pc, #304]	; (1000c7a0 <platform_driver_init+0x19c>)
1000c670:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000c672:	4a4c      	ldr	r2, [pc, #304]	; (1000c7a4 <platform_driver_init+0x1a0>)
1000c674:	6811      	ldr	r1, [r2, #0]
1000c676:	4a4c      	ldr	r2, [pc, #304]	; (1000c7a8 <platform_driver_init+0x1a4>)
1000c678:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000c67a:	4a4c      	ldr	r2, [pc, #304]	; (1000c7ac <platform_driver_init+0x1a8>)
1000c67c:	6811      	ldr	r1, [r2, #0]
1000c67e:	4a4c      	ldr	r2, [pc, #304]	; (1000c7b0 <platform_driver_init+0x1ac>)
1000c680:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000c682:	4a4c      	ldr	r2, [pc, #304]	; (1000c7b4 <platform_driver_init+0x1b0>)
1000c684:	494c      	ldr	r1, [pc, #304]	; (1000c7b8 <platform_driver_init+0x1b4>)
1000c686:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000c688:	4a4c      	ldr	r2, [pc, #304]	; (1000c7bc <platform_driver_init+0x1b8>)
1000c68a:	494d      	ldr	r1, [pc, #308]	; (1000c7c0 <platform_driver_init+0x1bc>)
1000c68c:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000c68e:	4a4d      	ldr	r2, [pc, #308]	; (1000c7c4 <platform_driver_init+0x1c0>)
1000c690:	4690      	mov	r8, r2
1000c692:	4641      	mov	r1, r8
1000c694:	4a4c      	ldr	r2, [pc, #304]	; (1000c7c8 <platform_driver_init+0x1c4>)
1000c696:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000c698:	4a4c      	ldr	r2, [pc, #304]	; (1000c7cc <platform_driver_init+0x1c8>)
1000c69a:	494d      	ldr	r1, [pc, #308]	; (1000c7d0 <platform_driver_init+0x1cc>)
1000c69c:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000c69e:	494d      	ldr	r1, [pc, #308]	; (1000c7d4 <platform_driver_init+0x1d0>)
1000c6a0:	4a4d      	ldr	r2, [pc, #308]	; (1000c7d8 <platform_driver_init+0x1d4>)
1000c6a2:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c6a4:	4f4d      	ldr	r7, [pc, #308]	; (1000c7dc <platform_driver_init+0x1d8>)
1000c6a6:	4a4e      	ldr	r2, [pc, #312]	; (1000c7e0 <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c6a8:	494e      	ldr	r1, [pc, #312]	; (1000c7e4 <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c6aa:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c6ac:	4a4e      	ldr	r2, [pc, #312]	; (1000c7e8 <platform_driver_init+0x1e4>)
1000c6ae:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000c6b0:	4a4e      	ldr	r2, [pc, #312]	; (1000c7ec <platform_driver_init+0x1e8>)
1000c6b2:	494f      	ldr	r1, [pc, #316]	; (1000c7f0 <platform_driver_init+0x1ec>)
1000c6b4:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000c6b6:	4a4f      	ldr	r2, [pc, #316]	; (1000c7f4 <platform_driver_init+0x1f0>)
1000c6b8:	494f      	ldr	r1, [pc, #316]	; (1000c7f8 <platform_driver_init+0x1f4>)
1000c6ba:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000c6bc:	4a4f      	ldr	r2, [pc, #316]	; (1000c7fc <platform_driver_init+0x1f8>)
1000c6be:	4950      	ldr	r1, [pc, #320]	; (1000c800 <platform_driver_init+0x1fc>)
1000c6c0:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000c6c2:	4a50      	ldr	r2, [pc, #320]	; (1000c804 <platform_driver_init+0x200>)
1000c6c4:	4950      	ldr	r1, [pc, #320]	; (1000c808 <platform_driver_init+0x204>)
1000c6c6:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c6c8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000c6ca:	4950      	ldr	r1, [pc, #320]	; (1000c80c <platform_driver_init+0x208>)
1000c6cc:	6833      	ldr	r3, [r6, #0]
1000c6ce:	2028      	movs	r0, #40	; 0x28
1000c6d0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000c6d2:	6833      	ldr	r3, [r6, #0]
1000c6d4:	494e      	ldr	r1, [pc, #312]	; (1000c810 <platform_driver_init+0x20c>)
1000c6d6:	2027      	movs	r0, #39	; 0x27
1000c6d8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c6da:	4b4e      	ldr	r3, [pc, #312]	; (1000c814 <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c6dc:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c6de:	681a      	ldr	r2, [r3, #0]
1000c6e0:	4b4d      	ldr	r3, [pc, #308]	; (1000c818 <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c6e2:	484e      	ldr	r0, [pc, #312]	; (1000c81c <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c6e4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000c6e6:	4b4e      	ldr	r3, [pc, #312]	; (1000c820 <platform_driver_init+0x21c>)
1000c6e8:	4a4e      	ldr	r2, [pc, #312]	; (1000c824 <platform_driver_init+0x220>)
1000c6ea:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000c6ec:	4b4e      	ldr	r3, [pc, #312]	; (1000c828 <platform_driver_init+0x224>)
1000c6ee:	4a4f      	ldr	r2, [pc, #316]	; (1000c82c <platform_driver_init+0x228>)
1000c6f0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000c6f2:	4b4f      	ldr	r3, [pc, #316]	; (1000c830 <platform_driver_init+0x22c>)
1000c6f4:	4a4f      	ldr	r2, [pc, #316]	; (1000c834 <platform_driver_init+0x230>)
1000c6f6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000c6f8:	4b4f      	ldr	r3, [pc, #316]	; (1000c838 <platform_driver_init+0x234>)
1000c6fa:	4a50      	ldr	r2, [pc, #320]	; (1000c83c <platform_driver_init+0x238>)
1000c6fc:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000c6fe:	4b50      	ldr	r3, [pc, #320]	; (1000c840 <platform_driver_init+0x23c>)
1000c700:	4a50      	ldr	r2, [pc, #320]	; (1000c844 <platform_driver_init+0x240>)
1000c702:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000c704:	4b50      	ldr	r3, [pc, #320]	; (1000c848 <platform_driver_init+0x244>)
1000c706:	4a51      	ldr	r2, [pc, #324]	; (1000c84c <platform_driver_init+0x248>)
1000c708:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000c70a:	4b51      	ldr	r3, [pc, #324]	; (1000c850 <platform_driver_init+0x24c>)
1000c70c:	4a51      	ldr	r2, [pc, #324]	; (1000c854 <platform_driver_init+0x250>)
1000c70e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c710:	22a0      	movs	r2, #160	; 0xa0
1000c712:	4b51      	ldr	r3, [pc, #324]	; (1000c858 <platform_driver_init+0x254>)
1000c714:	0092      	lsls	r2, r2, #2
1000c716:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c718:	2280      	movs	r2, #128	; 0x80
1000c71a:	4b50      	ldr	r3, [pc, #320]	; (1000c85c <platform_driver_init+0x258>)
1000c71c:	0092      	lsls	r2, r2, #2
1000c71e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000c720:	4b4f      	ldr	r3, [pc, #316]	; (1000c860 <platform_driver_init+0x25c>)
1000c722:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c724:	465b      	mov	r3, fp
1000c726:	602b      	str	r3, [r5, #0]
1000c728:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c72a:	464a      	mov	r2, r9
1000c72c:	602b      	str	r3, [r5, #0]
1000c72e:	4b4d      	ldr	r3, [pc, #308]	; (1000c864 <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c730:	4d4d      	ldr	r5, [pc, #308]	; (1000c868 <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c732:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c734:	4643      	mov	r3, r8
1000c736:	4a4d      	ldr	r2, [pc, #308]	; (1000c86c <platform_driver_init+0x268>)
1000c738:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c73a:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c73c:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000c73e:	683b      	ldr	r3, [r7, #0]
1000c740:	4a4b      	ldr	r2, [pc, #300]	; (1000c870 <platform_driver_init+0x26c>)
1000c742:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000c744:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000c746:	2001      	movs	r0, #1
1000c748:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000c74a:	2002      	movs	r0, #2
1000c74c:	47a8      	blx	r5
		platform_initialized = 1;
1000c74e:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000c750:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000c752:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000c754:	bc3c      	pop	{r2, r3, r4, r5}
1000c756:	4690      	mov	r8, r2
1000c758:	4699      	mov	r9, r3
1000c75a:	46a2      	mov	sl, r4
1000c75c:	46ab      	mov	fp, r5
1000c75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000c760:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000c762:	2001      	movs	r0, #1
1000c764:	e7f6      	b.n	1000c754 <platform_driver_init+0x150>
1000c766:	46c0      	nop			; (mov r8, r8)
1000c768:	10018ecc 	.word	0x10018ecc
1000c76c:	1000c5c1 	.word	0x1000c5c1
1000c770:	4000b00c 	.word	0x4000b00c
1000c774:	fffe0fd3 	.word	0xfffe0fd3
1000c778:	e000e100 	.word	0xe000e100
1000c77c:	10019934 	.word	0x10019934
1000c780:	4000b010 	.word	0x4000b010
1000c784:	ffffe7c0 	.word	0xffffe7c0
1000c788:	10019c04 	.word	0x10019c04
1000c78c:	10018ee8 	.word	0x10018ee8
1000c790:	0001bc51 	.word	0x0001bc51
1000c794:	000007d7 	.word	0x000007d7
1000c798:	10019940 	.word	0x10019940
1000c79c:	000007bd 	.word	0x000007bd
1000c7a0:	10019c08 	.word	0x10019c08
1000c7a4:	100400bc 	.word	0x100400bc
1000c7a8:	10018ec0 	.word	0x10018ec0
1000c7ac:	100400b8 	.word	0x100400b8
1000c7b0:	10018ebc 	.word	0x10018ebc
1000c7b4:	1001993c 	.word	0x1001993c
1000c7b8:	0001b99f 	.word	0x0001b99f
1000c7bc:	10019948 	.word	0x10019948
1000c7c0:	0001b9db 	.word	0x0001b9db
1000c7c4:	10019c18 	.word	0x10019c18
1000c7c8:	1004003c 	.word	0x1004003c
1000c7cc:	1001994c 	.word	0x1001994c
1000c7d0:	10041fc0 	.word	0x10041fc0
1000c7d4:	10041fc4 	.word	0x10041fc4
1000c7d8:	10019c14 	.word	0x10019c14
1000c7dc:	10019c0c 	.word	0x10019c0c
1000c7e0:	10041fd4 	.word	0x10041fd4
1000c7e4:	10041fd8 	.word	0x10041fd8
1000c7e8:	10019944 	.word	0x10019944
1000c7ec:	10018edc 	.word	0x10018edc
1000c7f0:	0001cbe9 	.word	0x0001cbe9
1000c7f4:	10018ed0 	.word	0x10018ed0
1000c7f8:	0001cd8f 	.word	0x0001cd8f
1000c7fc:	10018eec 	.word	0x10018eec
1000c800:	0001cea3 	.word	0x0001cea3
1000c804:	10018ec8 	.word	0x10018ec8
1000c808:	0001cbcf 	.word	0x0001cbcf
1000c80c:	1000cca1 	.word	0x1000cca1
1000c810:	1000cc41 	.word	0x1000cc41
1000c814:	100400e4 	.word	0x100400e4
1000c818:	10018ee4 	.word	0x10018ee4
1000c81c:	10019984 	.word	0x10019984
1000c820:	10018ef4 	.word	0x10018ef4
1000c824:	00019fe9 	.word	0x00019fe9
1000c828:	10018ec4 	.word	0x10018ec4
1000c82c:	0001dbdd 	.word	0x0001dbdd
1000c830:	10018ed8 	.word	0x10018ed8
1000c834:	0001dc5b 	.word	0x0001dc5b
1000c838:	10018ed4 	.word	0x10018ed4
1000c83c:	100405ec 	.word	0x100405ec
1000c840:	10018ee0 	.word	0x10018ee0
1000c844:	0001d5e3 	.word	0x0001d5e3
1000c848:	10018ef8 	.word	0x10018ef8
1000c84c:	10040c20 	.word	0x10040c20
1000c850:	10018eb8 	.word	0x10018eb8
1000c854:	00019f09 	.word	0x00019f09
1000c858:	10014477 	.word	0x10014477
1000c85c:	10019c1c 	.word	0x10019c1c
1000c860:	1000c4ed 	.word	0x1000c4ed
1000c864:	10019c10 	.word	0x10019c10
1000c868:	1000cce1 	.word	0x1000cce1
1000c86c:	1000c51d 	.word	0x1000c51d
1000c870:	1000ccfd 	.word	0x1000ccfd

1000c874 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c874:	4b05      	ldr	r3, [pc, #20]	; (1000c88c <platform_register_ble_msg_handler+0x18>)
1000c876:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000c878:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c87a:	2a01      	cmp	r2, #1
1000c87c:	d001      	beq.n	1000c882 <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000c87e:	0018      	movs	r0, r3
1000c880:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000c882:	4b03      	ldr	r3, [pc, #12]	; (1000c890 <platform_register_ble_msg_handler+0x1c>)
1000c884:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000c886:	2300      	movs	r3, #0
1000c888:	e7f9      	b.n	1000c87e <platform_register_ble_msg_handler+0xa>
1000c88a:	46c0      	nop			; (mov r8, r8)
1000c88c:	10018ecc 	.word	0x10018ecc
1000c890:	10018ee8 	.word	0x10018ee8

1000c894 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c894:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c896:	4b0e      	ldr	r3, [pc, #56]	; (1000c8d0 <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c898:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c89a:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000c89c:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000c89e:	2b00      	cmp	r3, #0
1000c8a0:	d014      	beq.n	1000c8cc <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c8a2:	4798      	blx	r3
1000c8a4:	0001      	movs	r1, r0
1000c8a6:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c8a8:	4d0a      	ldr	r5, [pc, #40]	; (1000c8d4 <platform_interface_send+0x40>)
1000c8aa:	88a2      	ldrh	r2, [r4, #4]
1000c8ac:	682d      	ldr	r5, [r5, #0]
1000c8ae:	88e3      	ldrh	r3, [r4, #6]
1000c8b0:	8820      	ldrh	r0, [r4, #0]
1000c8b2:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c8b4:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c8b6:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c8b8:	2a00      	cmp	r2, #0
1000c8ba:	d003      	beq.n	1000c8c4 <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c8bc:	0021      	movs	r1, r4
1000c8be:	4b06      	ldr	r3, [pc, #24]	; (1000c8d8 <platform_interface_send+0x44>)
1000c8c0:	3108      	adds	r1, #8
1000c8c2:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c8c4:	0028      	movs	r0, r5
1000c8c6:	4b05      	ldr	r3, [pc, #20]	; (1000c8dc <platform_interface_send+0x48>)
1000c8c8:	4798      	blx	r3
	}
}
1000c8ca:	bd70      	pop	{r4, r5, r6, pc}
1000c8cc:	0001      	movs	r1, r0
1000c8ce:	e7eb      	b.n	1000c8a8 <platform_interface_send+0x14>
1000c8d0:	10018ec0 	.word	0x10018ec0
1000c8d4:	10018ef4 	.word	0x10018ef4
1000c8d8:	1001443b 	.word	0x1001443b
1000c8dc:	1000c549 	.word	0x1000c549

1000c8e0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c8e0:	b570      	push	{r4, r5, r6, lr}
1000c8e2:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c8e4:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c8e6:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c8e8:	4302      	orrs	r2, r0
1000c8ea:	20a0      	movs	r0, #160	; 0xa0
1000c8ec:	4b09      	ldr	r3, [pc, #36]	; (1000c914 <send_plf_int_msg_ind+0x34>)
1000c8ee:	2105      	movs	r1, #5
1000c8f0:	681c      	ldr	r4, [r3, #0]
1000c8f2:	00c0      	lsls	r0, r0, #3
1000c8f4:	002b      	movs	r3, r5
1000c8f6:	47a0      	blx	r4
1000c8f8:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000c8fa:	d00a      	beq.n	1000c912 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c8fc:	2d00      	cmp	r5, #0
1000c8fe:	d005      	beq.n	1000c90c <send_plf_int_msg_ind+0x2c>
1000c900:	2e00      	cmp	r6, #0
1000c902:	d003      	beq.n	1000c90c <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c904:	002a      	movs	r2, r5
1000c906:	0031      	movs	r1, r6
1000c908:	4b03      	ldr	r3, [pc, #12]	; (1000c918 <send_plf_int_msg_ind+0x38>)
1000c90a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c90c:	0020      	movs	r0, r4
1000c90e:	4b03      	ldr	r3, [pc, #12]	; (1000c91c <send_plf_int_msg_ind+0x3c>)
1000c910:	4798      	blx	r3
	}
}
1000c912:	bd70      	pop	{r4, r5, r6, pc}
1000c914:	10018ef4 	.word	0x10018ef4
1000c918:	1001443b 	.word	0x1001443b
1000c91c:	1000c549 	.word	0x1000c549

1000c920 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c920:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c922:	4644      	mov	r4, r8
1000c924:	465f      	mov	r7, fp
1000c926:	4656      	mov	r6, sl
1000c928:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c92a:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c92c:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c92e:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c930:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c932:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c934:	1ce3      	adds	r3, r4, #3
1000c936:	d800      	bhi.n	1000c93a <platform_event_wait+0x1a>
1000c938:	e0ea      	b.n	1000cb10 <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c93a:	2300      	movs	r3, #0
1000c93c:	4699      	mov	r9, r3
1000c93e:	4b88      	ldr	r3, [pc, #544]	; (1000cb60 <platform_event_wait+0x240>)
1000c940:	2700      	movs	r7, #0
1000c942:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c944:	4b87      	ldr	r3, [pc, #540]	; (1000cb64 <platform_event_wait+0x244>)
1000c946:	4d88      	ldr	r5, [pc, #544]	; (1000cb68 <platform_event_wait+0x248>)
1000c948:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c94a:	4b88      	ldr	r3, [pc, #544]	; (1000cb6c <platform_event_wait+0x24c>)
1000c94c:	4e88      	ldr	r6, [pc, #544]	; (1000cb70 <platform_event_wait+0x250>)
1000c94e:	469a      	mov	sl, r3
1000c950:	e003      	b.n	1000c95a <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c952:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c954:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000c956:	2b00      	cmp	r3, #0
1000c958:	d052      	beq.n	1000ca00 <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c95a:	4643      	mov	r3, r8
1000c95c:	0029      	movs	r1, r5
1000c95e:	6830      	ldr	r0, [r6, #0]
1000c960:	681b      	ldr	r3, [r3, #0]
1000c962:	4798      	blx	r3
1000c964:	2800      	cmp	r0, #0
1000c966:	d1f4      	bne.n	1000c952 <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000c968:	682c      	ldr	r4, [r5, #0]
1000c96a:	88a3      	ldrh	r3, [r4, #4]
1000c96c:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c96e:	23cd      	movs	r3, #205	; 0xcd
1000c970:	009b      	lsls	r3, r3, #2
1000c972:	4599      	cmp	r9, r3
1000c974:	d04f      	beq.n	1000ca16 <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c976:	8923      	ldrh	r3, [r4, #8]
1000c978:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c97a:	8963      	ldrh	r3, [r4, #10]
1000c97c:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c97e:	9b01      	ldr	r3, [sp, #4]
1000c980:	2b00      	cmp	r3, #0
1000c982:	d000      	beq.n	1000c986 <platform_event_wait+0x66>
1000c984:	e07b      	b.n	1000ca7e <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c986:	23a0      	movs	r3, #160	; 0xa0
1000c988:	00db      	lsls	r3, r3, #3
1000c98a:	4599      	cmp	r9, r3
1000c98c:	d051      	beq.n	1000ca32 <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c98e:	4653      	mov	r3, sl
1000c990:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c992:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c994:	2b00      	cmp	r3, #0
1000c996:	d100      	bne.n	1000c99a <platform_event_wait+0x7a>
1000c998:	e084      	b.n	1000caa4 <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c99a:	22cd      	movs	r2, #205	; 0xcd
1000c99c:	88a3      	ldrh	r3, [r4, #4]
1000c99e:	0092      	lsls	r2, r2, #2
1000c9a0:	4293      	cmp	r3, r2
1000c9a2:	d03d      	beq.n	1000ca20 <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c9a4:	4a73      	ldr	r2, [pc, #460]	; (1000cb74 <platform_event_wait+0x254>)
1000c9a6:	4f74      	ldr	r7, [pc, #464]	; (1000cb78 <platform_event_wait+0x258>)
1000c9a8:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000c9aa:	703b      	strb	r3, [r7, #0]
1000c9ac:	0a1b      	lsrs	r3, r3, #8
1000c9ae:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c9b0:	4b72      	ldr	r3, [pc, #456]	; (1000cb7c <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c9b2:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c9b4:	8920      	ldrh	r0, [r4, #8]
1000c9b6:	681b      	ldr	r3, [r3, #0]
1000c9b8:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c9ba:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c9bc:	7138      	strb	r0, [r7, #4]
1000c9be:	0a00      	lsrs	r0, r0, #8
1000c9c0:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c9c2:	6818      	ldr	r0, [r3, #0]
1000c9c4:	682b      	ldr	r3, [r5, #0]
1000c9c6:	88db      	ldrh	r3, [r3, #6]
1000c9c8:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c9ca:	682c      	ldr	r4, [r5, #0]
1000c9cc:	8963      	ldrh	r3, [r4, #10]
1000c9ce:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c9d0:	464b      	mov	r3, r9
1000c9d2:	3008      	adds	r0, #8
1000c9d4:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000c9d6:	8962      	ldrh	r2, [r4, #10]
1000c9d8:	2a00      	cmp	r2, #0
1000c9da:	d000      	beq.n	1000c9de <platform_event_wait+0xbe>
1000c9dc:	e092      	b.n	1000cb04 <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c9de:	4653      	mov	r3, sl
1000c9e0:	3208      	adds	r2, #8
1000c9e2:	0038      	movs	r0, r7
1000c9e4:	681b      	ldr	r3, [r3, #0]
1000c9e6:	0011      	movs	r1, r2
1000c9e8:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c9ea:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c9ec:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c9ee:	4699      	mov	r9, r3
1000c9f0:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c9f2:	465b      	mov	r3, fp
1000c9f4:	0020      	movs	r0, r4
1000c9f6:	681b      	ldr	r3, [r3, #0]
1000c9f8:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c9fa:	464b      	mov	r3, r9
1000c9fc:	2b00      	cmp	r3, #0
1000c9fe:	d1ac      	bne.n	1000c95a <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000ca00:	9b01      	ldr	r3, [sp, #4]
1000ca02:	2b00      	cmp	r3, #0
1000ca04:	d150      	bne.n	1000caa8 <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000ca06:	0038      	movs	r0, r7
1000ca08:	b009      	add	sp, #36	; 0x24
1000ca0a:	bc3c      	pop	{r2, r3, r4, r5}
1000ca0c:	4690      	mov	r8, r2
1000ca0e:	4699      	mov	r9, r3
1000ca10:	46a2      	mov	sl, r4
1000ca12:	46ab      	mov	fp, r5
1000ca14:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ca16:	4b55      	ldr	r3, [pc, #340]	; (1000cb6c <platform_event_wait+0x24c>)
1000ca18:	681b      	ldr	r3, [r3, #0]
1000ca1a:	9302      	str	r3, [sp, #8]
1000ca1c:	2b00      	cmp	r3, #0
1000ca1e:	d041      	beq.n	1000caa4 <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000ca20:	2301      	movs	r3, #1
1000ca22:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000ca24:	9b01      	ldr	r3, [sp, #4]
1000ca26:	2b00      	cmp	r3, #0
1000ca28:	d0e3      	beq.n	1000c9f2 <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ca2a:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000ca2c:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ca2e:	4699      	mov	r9, r3
1000ca30:	e7df      	b.n	1000c9f2 <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ca32:	4b53      	ldr	r3, [pc, #332]	; (1000cb80 <platform_event_wait+0x260>)
1000ca34:	881f      	ldrh	r7, [r3, #0]
1000ca36:	4699      	mov	r9, r3
1000ca38:	9b02      	ldr	r3, [sp, #8]
1000ca3a:	19da      	adds	r2, r3, r7
1000ca3c:	23a0      	movs	r3, #160	; 0xa0
1000ca3e:	009b      	lsls	r3, r3, #2
1000ca40:	429a      	cmp	r2, r3
1000ca42:	dd03      	ble.n	1000ca4c <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ca44:	2780      	movs	r7, #128	; 0x80
1000ca46:	464b      	mov	r3, r9
1000ca48:	00bf      	lsls	r7, r7, #2
1000ca4a:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ca4c:	0021      	movs	r1, r4
1000ca4e:	4b4a      	ldr	r3, [pc, #296]	; (1000cb78 <platform_event_wait+0x258>)
1000ca50:	9c02      	ldr	r4, [sp, #8]
1000ca52:	18ff      	adds	r7, r7, r3
1000ca54:	0022      	movs	r2, r4
1000ca56:	310c      	adds	r1, #12
1000ca58:	0038      	movs	r0, r7
1000ca5a:	4b4a      	ldr	r3, [pc, #296]	; (1000cb84 <platform_event_wait+0x264>)
1000ca5c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ca5e:	0022      	movs	r2, r4
1000ca60:	0039      	movs	r1, r7
1000ca62:	4b49      	ldr	r3, [pc, #292]	; (1000cb88 <platform_event_wait+0x268>)
1000ca64:	9803      	ldr	r0, [sp, #12]
1000ca66:	4798      	blx	r3
				plf_event_buff_index += len;
1000ca68:	464b      	mov	r3, r9
1000ca6a:	46a4      	mov	ip, r4
1000ca6c:	464a      	mov	r2, r9
1000ca6e:	881b      	ldrh	r3, [r3, #0]
1000ca70:	682c      	ldr	r4, [r5, #0]
1000ca72:	4463      	add	r3, ip
1000ca74:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ca76:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000ca78:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ca7a:	4699      	mov	r9, r3
1000ca7c:	e7b9      	b.n	1000c9f2 <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ca7e:	220d      	movs	r2, #13
1000ca80:	2100      	movs	r1, #0
1000ca82:	a804      	add	r0, sp, #16
1000ca84:	4b41      	ldr	r3, [pc, #260]	; (1000cb8c <platform_event_wait+0x26c>)
1000ca86:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ca88:	2333      	movs	r3, #51	; 0x33
1000ca8a:	aa04      	add	r2, sp, #16
1000ca8c:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ca8e:	3b30      	subs	r3, #48	; 0x30
1000ca90:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ca92:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ca94:	3302      	adds	r3, #2
1000ca96:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ca98:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000ca9a:	210d      	movs	r1, #13
1000ca9c:	0010      	movs	r0, r2
1000ca9e:	4b3c      	ldr	r3, [pc, #240]	; (1000cb90 <platform_event_wait+0x270>)
1000caa0:	4798      	blx	r3
1000caa2:	e770      	b.n	1000c986 <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000caa4:	4699      	mov	r9, r3
1000caa6:	e7a4      	b.n	1000c9f2 <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000caa8:	6833      	ldr	r3, [r6, #0]
1000caaa:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000caac:	2b00      	cmp	r3, #0
1000caae:	d053      	beq.n	1000cb58 <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000cab0:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000cab2:	2314      	movs	r3, #20
1000cab4:	4443      	add	r3, r8
1000cab6:	469a      	mov	sl, r3
1000cab8:	4b36      	ldr	r3, [pc, #216]	; (1000cb94 <platform_event_wait+0x274>)
1000caba:	4650      	mov	r0, sl
1000cabc:	681b      	ldr	r3, [r3, #0]
1000cabe:	4798      	blx	r3
	while(NULL != current)
1000cac0:	2500      	movs	r5, #0
1000cac2:	2c00      	cmp	r4, #0
1000cac4:	d019      	beq.n	1000cafa <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000cac6:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000cac8:	4b26      	ldr	r3, [pc, #152]	; (1000cb64 <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000caca:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000cacc:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000cace:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000cad0:	4699      	mov	r9, r3
1000cad2:	4644      	mov	r4, r8
1000cad4:	e003      	b.n	1000cade <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000cad6:	0005      	movs	r5, r0
1000cad8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000cada:	2800      	cmp	r0, #0
1000cadc:	d00d      	beq.n	1000cafa <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000cade:	6803      	ldr	r3, [r0, #0]
1000cae0:	889b      	ldrh	r3, [r3, #4]
1000cae2:	42b3      	cmp	r3, r6
1000cae4:	d1f7      	bne.n	1000cad6 <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000cae6:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000cae8:	2d00      	cmp	r5, #0
1000caea:	d02f      	beq.n	1000cb4c <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000caec:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000caee:	464b      	mov	r3, r9
1000caf0:	681b      	ldr	r3, [r3, #0]
1000caf2:	4798      	blx	r3
				current = prev->pstrNext;
1000caf4:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000caf6:	2800      	cmp	r0, #0
1000caf8:	d1f1      	bne.n	1000cade <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000cafa:	4b27      	ldr	r3, [pc, #156]	; (1000cb98 <platform_event_wait+0x278>)
1000cafc:	4650      	mov	r0, sl
1000cafe:	681b      	ldr	r3, [r3, #0]
1000cb00:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000cb02:	e780      	b.n	1000ca06 <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000cb04:	0021      	movs	r1, r4
1000cb06:	4b1f      	ldr	r3, [pc, #124]	; (1000cb84 <platform_event_wait+0x264>)
1000cb08:	310c      	adds	r1, #12
1000cb0a:	4798      	blx	r3
1000cb0c:	8962      	ldrh	r2, [r4, #10]
1000cb0e:	e766      	b.n	1000c9de <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000cb10:	220d      	movs	r2, #13
1000cb12:	2100      	movs	r1, #0
1000cb14:	4b1d      	ldr	r3, [pc, #116]	; (1000cb8c <platform_event_wait+0x26c>)
1000cb16:	a804      	add	r0, sp, #16
1000cb18:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000cb1a:	2333      	movs	r3, #51	; 0x33
1000cb1c:	aa04      	add	r2, sp, #16
1000cb1e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000cb20:	3b30      	subs	r3, #48	; 0x30
1000cb22:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000cb24:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000cb26:	3302      	adds	r3, #2
1000cb28:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000cb2a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000cb2c:	0a23      	lsrs	r3, r4, #8
1000cb2e:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000cb30:	0c23      	lsrs	r3, r4, #16
1000cb32:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000cb34:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000cb36:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000cb38:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000cb3a:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000cb3c:	4b14      	ldr	r3, [pc, #80]	; (1000cb90 <platform_event_wait+0x270>)
1000cb3e:	210d      	movs	r1, #13
1000cb40:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000cb42:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000cb44:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000cb46:	2301      	movs	r3, #1
1000cb48:	9301      	str	r3, [sp, #4]
1000cb4a:	e6f6      	b.n	1000c93a <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000cb4c:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000cb4e:	465b      	mov	r3, fp
1000cb50:	681b      	ldr	r3, [r3, #0]
1000cb52:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000cb54:	6a20      	ldr	r0, [r4, #32]
1000cb56:	e7c0      	b.n	1000cada <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000cb58:	464b      	mov	r3, r9
1000cb5a:	6a1b      	ldr	r3, [r3, #32]
1000cb5c:	deff      	udf	#255	; 0xff
1000cb5e:	46c0      	nop			; (mov r8, r8)
1000cb60:	10018ee0 	.word	0x10018ee0
1000cb64:	10018eb8 	.word	0x10018eb8
1000cb68:	10018eb4 	.word	0x10018eb4
1000cb6c:	10018ee8 	.word	0x10018ee8
1000cb70:	10018ef8 	.word	0x10018ef8
1000cb74:	10018ef0 	.word	0x10018ef0
1000cb78:	10019984 	.word	0x10019984
1000cb7c:	10018ebc 	.word	0x10018ebc
1000cb80:	10019c1c 	.word	0x10019c1c
1000cb84:	1001443b 	.word	0x1001443b
1000cb88:	1000c4b1 	.word	0x1000c4b1
1000cb8c:	10014477 	.word	0x10014477
1000cb90:	1000c895 	.word	0x1000c895
1000cb94:	10018ed8 	.word	0x10018ed8
1000cb98:	10018ec4 	.word	0x10018ec4

1000cb9c <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000cb9c:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000cb9e:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000cba0:	4b02      	ldr	r3, [pc, #8]	; (1000cbac <acquire_sleep_lock+0x10>)
1000cba2:	0200      	lsls	r0, r0, #8
1000cba4:	681b      	ldr	r3, [r3, #0]
1000cba6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000cba8:	2008      	movs	r0, #8
1000cbaa:	bd10      	pop	{r4, pc}
1000cbac:	1001993c 	.word	0x1001993c

1000cbb0 <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000cbb0:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000cbb2:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000cbb4:	4b02      	ldr	r3, [pc, #8]	; (1000cbc0 <release_message_lock+0x10>)
1000cbb6:	01c0      	lsls	r0, r0, #7
1000cbb8:	681b      	ldr	r3, [r3, #0]
1000cbba:	4798      	blx	r3
	return status;
}
1000cbbc:	2000      	movs	r0, #0
1000cbbe:	bd10      	pop	{r4, pc}
1000cbc0:	10019948 	.word	0x10019948

1000cbc4 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000cbc4:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000cbc6:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000cbc8:	4c04      	ldr	r4, [pc, #16]	; (1000cbdc <release_sleep_lock+0x18>)
1000cbca:	01c0      	lsls	r0, r0, #7
1000cbcc:	6823      	ldr	r3, [r4, #0]
1000cbce:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000cbd0:	2080      	movs	r0, #128	; 0x80
1000cbd2:	6823      	ldr	r3, [r4, #0]
1000cbd4:	0200      	lsls	r0, r0, #8
1000cbd6:	4798      	blx	r3
	return status;
}
1000cbd8:	2000      	movs	r0, #0
1000cbda:	bd10      	pop	{r4, pc}
1000cbdc:	10019948 	.word	0x10019948

1000cbe0 <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000cbe0:	4914      	ldr	r1, [pc, #80]	; (1000cc34 <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cbe2:	4815      	ldr	r0, [pc, #84]	; (1000cc38 <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000cbe4:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cbe6:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000cbe8:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cbea:	4302      	orrs	r2, r0
1000cbec:	b292      	uxth	r2, r2
1000cbee:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000cbf0:	05db      	lsls	r3, r3, #23
1000cbf2:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000cbf4:	d018      	beq.n	1000cc28 <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000cbf6:	b2db      	uxtb	r3, r3
1000cbf8:	425a      	negs	r2, r3
1000cbfa:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000cbfc:	2b01      	cmp	r3, #1
1000cbfe:	d017      	beq.n	1000cc30 <gpio1_combined_isr_handler+0x50>
1000cc00:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000cc02:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000cc04:	085b      	lsrs	r3, r3, #1
				index++;
1000cc06:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000cc08:	2b01      	cmp	r3, #1
1000cc0a:	d1fa      	bne.n	1000cc02 <gpio1_combined_isr_handler+0x22>
1000cc0c:	4093      	lsls	r3, r2
1000cc0e:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cc10:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000cc12:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000cc14:	05db      	lsls	r3, r3, #23
1000cc16:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000cc18:	d1ea      	bne.n	1000cbf0 <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000cc1a:	2180      	movs	r1, #128	; 0x80
1000cc1c:	4a07      	ldr	r2, [pc, #28]	; (1000cc3c <gpio1_combined_isr_handler+0x5c>)
1000cc1e:	3381      	adds	r3, #129	; 0x81
1000cc20:	0049      	lsls	r1, r1, #1
1000cc22:	33ff      	adds	r3, #255	; 0xff
1000cc24:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000cc26:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cc28:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000cc2a:	4303      	orrs	r3, r0
1000cc2c:	b29b      	uxth	r3, r3
1000cc2e:	e7ef      	b.n	1000cc10 <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000cc30:	2301      	movs	r3, #1
1000cc32:	e7ed      	b.n	1000cc10 <gpio1_combined_isr_handler+0x30>
1000cc34:	40011000 	.word	0x40011000
1000cc38:	ffff8000 	.word	0xffff8000
1000cc3c:	e000e100 	.word	0xe000e100

1000cc40 <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000cc40:	4914      	ldr	r1, [pc, #80]	; (1000cc94 <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cc42:	4815      	ldr	r0, [pc, #84]	; (1000cc98 <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000cc44:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cc46:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000cc48:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000cc4a:	4302      	orrs	r2, r0
1000cc4c:	b292      	uxth	r2, r2
1000cc4e:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000cc50:	05db      	lsls	r3, r3, #23
1000cc52:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000cc54:	d017      	beq.n	1000cc86 <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000cc56:	b2db      	uxtb	r3, r3
1000cc58:	425a      	negs	r2, r3
1000cc5a:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000cc5c:	2b01      	cmp	r3, #1
1000cc5e:	d016      	beq.n	1000cc8e <gpio0_combined_isr_handler+0x4e>
1000cc60:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000cc62:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000cc64:	085b      	lsrs	r3, r3, #1
				index++;
1000cc66:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000cc68:	2b01      	cmp	r3, #1
1000cc6a:	d1fa      	bne.n	1000cc62 <gpio0_combined_isr_handler+0x22>
1000cc6c:	4093      	lsls	r3, r2
1000cc6e:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cc70:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000cc72:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000cc74:	05db      	lsls	r3, r3, #23
1000cc76:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000cc78:	d1ea      	bne.n	1000cc50 <gpio0_combined_isr_handler+0x10>
1000cc7a:	2180      	movs	r1, #128	; 0x80
1000cc7c:	4a07      	ldr	r2, [pc, #28]	; (1000cc9c <gpio0_combined_isr_handler+0x5c>)
1000cc7e:	3381      	adds	r3, #129	; 0x81
1000cc80:	33ff      	adds	r3, #255	; 0xff
1000cc82:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000cc84:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000cc86:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000cc88:	4303      	orrs	r3, r0
1000cc8a:	b29b      	uxth	r3, r3
1000cc8c:	e7f0      	b.n	1000cc70 <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000cc8e:	2301      	movs	r3, #1
1000cc90:	e7ee      	b.n	1000cc70 <gpio0_combined_isr_handler+0x30>
1000cc92:	46c0      	nop			; (mov r8, r8)
1000cc94:	40010000 	.word	0x40010000
1000cc98:	ffff8000 	.word	0xffff8000
1000cc9c:	e000e100 	.word	0xe000e100

1000cca0 <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000cca0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000cca2:	4c0b      	ldr	r4, [pc, #44]	; (1000ccd0 <PORT1_COMB_Handler+0x30>)
1000cca4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000cca6:	0b5b      	lsrs	r3, r3, #13
1000cca8:	d102      	bne.n	1000ccb0 <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000ccaa:	4b0a      	ldr	r3, [pc, #40]	; (1000ccd4 <PORT1_COMB_Handler+0x34>)
1000ccac:	4798      	blx	r3
	}
}
1000ccae:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000ccb0:	4b09      	ldr	r3, [pc, #36]	; (1000ccd8 <PORT1_COMB_Handler+0x38>)
1000ccb2:	681b      	ldr	r3, [r3, #0]
1000ccb4:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000ccb6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000ccb8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000ccba:	0b5b      	lsrs	r3, r3, #13
1000ccbc:	035b      	lsls	r3, r3, #13
1000ccbe:	4313      	orrs	r3, r2
1000ccc0:	8723      	strh	r3, [r4, #56]	; 0x38
1000ccc2:	2180      	movs	r1, #128	; 0x80
1000ccc4:	23c0      	movs	r3, #192	; 0xc0
1000ccc6:	4a05      	ldr	r2, [pc, #20]	; (1000ccdc <PORT1_COMB_Handler+0x3c>)
1000ccc8:	0049      	lsls	r1, r1, #1
1000ccca:	005b      	lsls	r3, r3, #1
1000cccc:	50d1      	str	r1, [r2, r3]
1000ccce:	e7ee      	b.n	1000ccae <PORT1_COMB_Handler+0xe>
1000ccd0:	40011000 	.word	0x40011000
1000ccd4:	1000cbe1 	.word	0x1000cbe1
1000ccd8:	10019c08 	.word	0x10019c08
1000ccdc:	e000e100 	.word	0xe000e100

1000cce0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000cce0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000cce2:	2802      	cmp	r0, #2
1000cce4:	d901      	bls.n	1000ccea <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000cce6:	0018      	movs	r0, r3
1000cce8:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ccea:	2200      	movs	r2, #0
1000ccec:	4b02      	ldr	r3, [pc, #8]	; (1000ccf8 <wakeup_int_unregister_callback+0x18>)
1000ccee:	0080      	lsls	r0, r0, #2
1000ccf0:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ccf2:	2300      	movs	r3, #0
1000ccf4:	e7f7      	b.n	1000cce6 <wakeup_int_unregister_callback+0x6>
1000ccf6:	46c0      	nop			; (mov r8, r8)
1000ccf8:	10019c20 	.word	0x10019c20

1000ccfc <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000ccfc:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000ccfe:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000cd00:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000cd02:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000cd04:	2a01      	cmp	r2, #1
1000cd06:	d01c      	beq.n	1000cd42 <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000cd08:	041a      	lsls	r2, r3, #16
1000cd0a:	0e12      	lsrs	r2, r2, #24
1000cd0c:	2a01      	cmp	r2, #1
1000cd0e:	d00e      	beq.n	1000cd2e <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000cd10:	021a      	lsls	r2, r3, #8
1000cd12:	0e12      	lsrs	r2, r2, #24
1000cd14:	2a01      	cmp	r2, #1
1000cd16:	d000      	beq.n	1000cd1a <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000cd18:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000cd1a:	4a0f      	ldr	r2, [pc, #60]	; (1000cd58 <wakeup_active_event_callback+0x5c>)
1000cd1c:	6892      	ldr	r2, [r2, #8]
1000cd1e:	2a00      	cmp	r2, #0
1000cd20:	d001      	beq.n	1000cd26 <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000cd22:	4790      	blx	r2
1000cd24:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000cd26:	4a0d      	ldr	r2, [pc, #52]	; (1000cd5c <wakeup_active_event_callback+0x60>)
1000cd28:	4013      	ands	r3, r2
1000cd2a:	6023      	str	r3, [r4, #0]
	}
}
1000cd2c:	e7f4      	b.n	1000cd18 <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000cd2e:	4a0a      	ldr	r2, [pc, #40]	; (1000cd58 <wakeup_active_event_callback+0x5c>)
1000cd30:	6852      	ldr	r2, [r2, #4]
1000cd32:	2a00      	cmp	r2, #0
1000cd34:	d001      	beq.n	1000cd3a <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000cd36:	4790      	blx	r2
1000cd38:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000cd3a:	4a09      	ldr	r2, [pc, #36]	; (1000cd60 <wakeup_active_event_callback+0x64>)
1000cd3c:	4013      	ands	r3, r2
1000cd3e:	6023      	str	r3, [r4, #0]
1000cd40:	e7e6      	b.n	1000cd10 <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000cd42:	4a05      	ldr	r2, [pc, #20]	; (1000cd58 <wakeup_active_event_callback+0x5c>)
1000cd44:	6812      	ldr	r2, [r2, #0]
1000cd46:	2a00      	cmp	r2, #0
1000cd48:	d001      	beq.n	1000cd4e <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000cd4a:	4790      	blx	r2
1000cd4c:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000cd4e:	22ff      	movs	r2, #255	; 0xff
1000cd50:	4393      	bics	r3, r2
1000cd52:	6023      	str	r3, [r4, #0]
1000cd54:	e7d8      	b.n	1000cd08 <wakeup_active_event_callback+0xc>
1000cd56:	46c0      	nop			; (mov r8, r8)
1000cd58:	10019c20 	.word	0x10019c20
1000cd5c:	ff00ffff 	.word	0xff00ffff
1000cd60:	ffff00ff 	.word	0xffff00ff

1000cd64 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd66:	4647      	mov	r7, r8
1000cd68:	000c      	movs	r4, r1
1000cd6a:	b480      	push	{r7}
1000cd6c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000cd6e:	2800      	cmp	r0, #0
1000cd70:	d111      	bne.n	1000cd96 <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000cd72:	2a00      	cmp	r2, #0
1000cd74:	dd0d      	ble.n	1000cd92 <_read+0x2e>
1000cd76:	4e09      	ldr	r6, [pc, #36]	; (1000cd9c <_read+0x38>)
1000cd78:	4d09      	ldr	r5, [pc, #36]	; (1000cda0 <_read+0x3c>)
1000cd7a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000cd7c:	0021      	movs	r1, r4
1000cd7e:	6830      	ldr	r0, [r6, #0]
1000cd80:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000cd82:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000cd84:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cd86:	42bc      	cmp	r4, r7
1000cd88:	d1f8      	bne.n	1000cd7c <_read+0x18>
1000cd8a:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000cd8c:	bc04      	pop	{r2}
1000cd8e:	4690      	mov	r8, r2
1000cd90:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cd92:	2000      	movs	r0, #0
1000cd94:	e7fa      	b.n	1000cd8c <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000cd96:	2001      	movs	r0, #1
1000cd98:	4240      	negs	r0, r0
1000cd9a:	e7f7      	b.n	1000cd8c <_read+0x28>
1000cd9c:	10019c34 	.word	0x10019c34
1000cda0:	10019c2c 	.word	0x10019c2c

1000cda4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cda4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cda6:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cda8:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cdaa:	b480      	push	{r7}
1000cdac:	000e      	movs	r6, r1
1000cdae:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cdb0:	2802      	cmp	r0, #2
1000cdb2:	d810      	bhi.n	1000cdd6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000cdb4:	2a00      	cmp	r2, #0
1000cdb6:	d015      	beq.n	1000cde4 <_write+0x40>
1000cdb8:	4b0b      	ldr	r3, [pc, #44]	; (1000cde8 <_write+0x44>)
1000cdba:	2400      	movs	r4, #0
1000cdbc:	4698      	mov	r8, r3
1000cdbe:	4f0b      	ldr	r7, [pc, #44]	; (1000cdec <_write+0x48>)
1000cdc0:	e002      	b.n	1000cdc8 <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000cdc2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000cdc4:	42a5      	cmp	r5, r4
1000cdc6:	d00b      	beq.n	1000cde0 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000cdc8:	4643      	mov	r3, r8
1000cdca:	5d31      	ldrb	r1, [r6, r4]
1000cdcc:	6818      	ldr	r0, [r3, #0]
1000cdce:	683b      	ldr	r3, [r7, #0]
1000cdd0:	4798      	blx	r3
1000cdd2:	2800      	cmp	r0, #0
1000cdd4:	daf5      	bge.n	1000cdc2 <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000cdd6:	2001      	movs	r0, #1
1000cdd8:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000cdda:	bc04      	pop	{r2}
1000cddc:	4690      	mov	r8, r2
1000cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000cde0:	0028      	movs	r0, r5
1000cde2:	e7fa      	b.n	1000cdda <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000cde4:	2000      	movs	r0, #0
1000cde6:	e7f8      	b.n	1000cdda <_write+0x36>
1000cde8:	10019c34 	.word	0x10019c34
1000cdec:	10019c30 	.word	0x10019c30

1000cdf0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000cdf0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cdf2:	4b21      	ldr	r3, [pc, #132]	; (1000ce78 <uart_rx0_isr_handler+0x88>)
1000cdf4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cdf6:	6823      	ldr	r3, [r4, #0]
1000cdf8:	7d1d      	ldrb	r5, [r3, #20]
1000cdfa:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cdfc:	066a      	lsls	r2, r5, #25
1000cdfe:	d50d      	bpl.n	1000ce1c <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ce00:	211e      	movs	r1, #30
1000ce02:	2222      	movs	r2, #34	; 0x22
1000ce04:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ce06:	7e1a      	ldrb	r2, [r3, #24]
1000ce08:	3123      	adds	r1, #35	; 0x23
1000ce0a:	438a      	bics	r2, r1
1000ce0c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce0e:	2321      	movs	r3, #33	; 0x21
1000ce10:	5ce2      	ldrb	r2, [r4, r3]
1000ce12:	3b19      	subs	r3, #25
1000ce14:	4213      	tst	r3, r2
1000ce16:	d11d      	bne.n	1000ce54 <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ce18:	6823      	ldr	r3, [r4, #0]
1000ce1a:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ce1c:	2201      	movs	r2, #1
1000ce1e:	422a      	tst	r2, r5
1000ce20:	d017      	beq.n	1000ce52 <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ce22:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ce24:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ce26:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ce28:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ce2a:	6963      	ldr	r3, [r4, #20]
1000ce2c:	3301      	adds	r3, #1
1000ce2e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ce30:	8ba3      	ldrh	r3, [r4, #28]
1000ce32:	3b01      	subs	r3, #1
1000ce34:	b29b      	uxth	r3, r3
1000ce36:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ce38:	8ba3      	ldrh	r3, [r4, #28]
1000ce3a:	b29b      	uxth	r3, r3
1000ce3c:	2b00      	cmp	r3, #0
1000ce3e:	d108      	bne.n	1000ce52 <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce40:	2121      	movs	r1, #33	; 0x21
1000ce42:	5c60      	ldrb	r0, [r4, r1]
1000ce44:	391d      	subs	r1, #29
1000ce46:	4201      	tst	r1, r0
1000ce48:	d003      	beq.n	1000ce52 <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ce4a:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ce4c:	5c20      	ldrb	r0, [r4, r0]
1000ce4e:	4201      	tst	r1, r0
1000ce50:	d108      	bne.n	1000ce64 <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000ce52:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ce54:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ce56:	5ca2      	ldrb	r2, [r4, r2]
1000ce58:	4213      	tst	r3, r2
1000ce5a:	d0dd      	beq.n	1000ce18 <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ce5c:	0020      	movs	r0, r4
1000ce5e:	6923      	ldr	r3, [r4, #16]
1000ce60:	4798      	blx	r3
1000ce62:	e7d9      	b.n	1000ce18 <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ce64:	311e      	adds	r1, #30
1000ce66:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ce68:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ce6a:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ce6c:	7e0b      	ldrb	r3, [r1, #24]
1000ce6e:	4393      	bics	r3, r2
1000ce70:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ce72:	68e3      	ldr	r3, [r4, #12]
1000ce74:	4798      	blx	r3
			}
		}
	}
}
1000ce76:	e7ec      	b.n	1000ce52 <uart_rx0_isr_handler+0x62>
1000ce78:	10019c38 	.word	0x10019c38

1000ce7c <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ce7c:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000ce7e:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ce80:	4b22      	ldr	r3, [pc, #136]	; (1000cf0c <uart_tx0_isr_handler+0x90>)
1000ce82:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ce84:	6823      	ldr	r3, [r4, #0]
1000ce86:	791d      	ldrb	r5, [r3, #4]
1000ce88:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ce8a:	4229      	tst	r1, r5
1000ce8c:	d00c      	beq.n	1000cea8 <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ce8e:	69a2      	ldr	r2, [r4, #24]
1000ce90:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ce92:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ce94:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ce96:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ce98:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ce9a:	8be3      	ldrh	r3, [r4, #30]
1000ce9c:	3b01      	subs	r3, #1
1000ce9e:	b29b      	uxth	r3, r3
1000cea0:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cea2:	8be3      	ldrh	r3, [r4, #30]
1000cea4:	2b00      	cmp	r3, #0
1000cea6:	d022      	beq.n	1000ceee <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cea8:	2310      	movs	r3, #16
1000ceaa:	422b      	tst	r3, r5
1000ceac:	d004      	beq.n	1000ceb8 <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ceae:	2221      	movs	r2, #33	; 0x21
1000ceb0:	5ca1      	ldrb	r1, [r4, r2]
1000ceb2:	3a20      	subs	r2, #32
1000ceb4:	420a      	tst	r2, r1
1000ceb6:	d10b      	bne.n	1000ced0 <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ceb8:	2320      	movs	r3, #32
1000ceba:	422b      	tst	r3, r5
1000cebc:	d007      	beq.n	1000cece <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cebe:	2221      	movs	r2, #33	; 0x21
1000cec0:	5ca1      	ldrb	r1, [r4, r2]
1000cec2:	3a1f      	subs	r2, #31
1000cec4:	420a      	tst	r2, r1
1000cec6:	d002      	beq.n	1000cece <uart_tx0_isr_handler+0x52>
1000cec8:	5ce3      	ldrb	r3, [r4, r3]
1000ceca:	421a      	tst	r2, r3
1000cecc:	d119      	bne.n	1000cf02 <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000cece:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ced0:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ced2:	5c61      	ldrb	r1, [r4, r1]
1000ced4:	420a      	tst	r2, r1
1000ced6:	d0ef      	beq.n	1000ceb8 <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ced8:	2100      	movs	r1, #0
1000ceda:	3221      	adds	r2, #33	; 0x21
1000cedc:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cede:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cee0:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cee2:	7a0a      	ldrb	r2, [r1, #8]
1000cee4:	439a      	bics	r2, r3
1000cee6:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cee8:	6863      	ldr	r3, [r4, #4]
1000ceea:	4798      	blx	r3
1000ceec:	e7e4      	b.n	1000ceb8 <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ceee:	6822      	ldr	r2, [r4, #0]
1000cef0:	7a13      	ldrb	r3, [r2, #8]
1000cef2:	438b      	bics	r3, r1
1000cef4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cef6:	2310      	movs	r3, #16
1000cef8:	6822      	ldr	r2, [r4, #0]
1000cefa:	7a11      	ldrb	r1, [r2, #8]
1000cefc:	430b      	orrs	r3, r1
1000cefe:	7213      	strb	r3, [r2, #8]
1000cf00:	e7d2      	b.n	1000cea8 <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cf02:	68a3      	ldr	r3, [r4, #8]
1000cf04:	0020      	movs	r0, r4
1000cf06:	4798      	blx	r3
		}

	}
}
1000cf08:	e7e1      	b.n	1000cece <uart_tx0_isr_handler+0x52>
1000cf0a:	46c0      	nop			; (mov r8, r8)
1000cf0c:	10019c38 	.word	0x10019c38

1000cf10 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cf10:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cf12:	4b21      	ldr	r3, [pc, #132]	; (1000cf98 <uart_rx1_isr_handler+0x88>)
1000cf14:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cf16:	6823      	ldr	r3, [r4, #0]
1000cf18:	7d1d      	ldrb	r5, [r3, #20]
1000cf1a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cf1c:	066a      	lsls	r2, r5, #25
1000cf1e:	d50d      	bpl.n	1000cf3c <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cf20:	211e      	movs	r1, #30
1000cf22:	2222      	movs	r2, #34	; 0x22
1000cf24:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cf26:	7e1a      	ldrb	r2, [r3, #24]
1000cf28:	3123      	adds	r1, #35	; 0x23
1000cf2a:	438a      	bics	r2, r1
1000cf2c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cf2e:	2321      	movs	r3, #33	; 0x21
1000cf30:	5ce2      	ldrb	r2, [r4, r3]
1000cf32:	3b19      	subs	r3, #25
1000cf34:	4213      	tst	r3, r2
1000cf36:	d11d      	bne.n	1000cf74 <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cf38:	6823      	ldr	r3, [r4, #0]
1000cf3a:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cf3c:	2201      	movs	r2, #1
1000cf3e:	422a      	tst	r2, r5
1000cf40:	d017      	beq.n	1000cf72 <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cf42:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cf44:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cf46:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cf48:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cf4a:	6963      	ldr	r3, [r4, #20]
1000cf4c:	3301      	adds	r3, #1
1000cf4e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cf50:	8ba3      	ldrh	r3, [r4, #28]
1000cf52:	3b01      	subs	r3, #1
1000cf54:	b29b      	uxth	r3, r3
1000cf56:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cf58:	8ba3      	ldrh	r3, [r4, #28]
1000cf5a:	b29b      	uxth	r3, r3
1000cf5c:	2b00      	cmp	r3, #0
1000cf5e:	d108      	bne.n	1000cf72 <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf60:	2121      	movs	r1, #33	; 0x21
1000cf62:	5c60      	ldrb	r0, [r4, r1]
1000cf64:	391d      	subs	r1, #29
1000cf66:	4201      	tst	r1, r0
1000cf68:	d003      	beq.n	1000cf72 <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cf6a:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cf6c:	5c20      	ldrb	r0, [r4, r0]
1000cf6e:	4201      	tst	r1, r0
1000cf70:	d108      	bne.n	1000cf84 <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000cf72:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cf74:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cf76:	5ca2      	ldrb	r2, [r4, r2]
1000cf78:	4213      	tst	r3, r2
1000cf7a:	d0dd      	beq.n	1000cf38 <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cf7c:	0020      	movs	r0, r4
1000cf7e:	6923      	ldr	r3, [r4, #16]
1000cf80:	4798      	blx	r3
1000cf82:	e7d9      	b.n	1000cf38 <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cf84:	311e      	adds	r1, #30
1000cf86:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cf88:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cf8a:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cf8c:	7e0b      	ldrb	r3, [r1, #24]
1000cf8e:	4393      	bics	r3, r2
1000cf90:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cf92:	68e3      	ldr	r3, [r4, #12]
1000cf94:	4798      	blx	r3
			}
		}
	}
}
1000cf96:	e7ec      	b.n	1000cf72 <uart_rx1_isr_handler+0x62>
1000cf98:	10019c38 	.word	0x10019c38

1000cf9c <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cf9c:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000cf9e:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cfa0:	4b22      	ldr	r3, [pc, #136]	; (1000d02c <uart_tx1_isr_handler+0x90>)
1000cfa2:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cfa4:	6823      	ldr	r3, [r4, #0]
1000cfa6:	791d      	ldrb	r5, [r3, #4]
1000cfa8:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cfaa:	4229      	tst	r1, r5
1000cfac:	d00c      	beq.n	1000cfc8 <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cfae:	69a2      	ldr	r2, [r4, #24]
1000cfb0:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cfb2:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cfb4:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cfb6:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cfb8:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cfba:	8be3      	ldrh	r3, [r4, #30]
1000cfbc:	3b01      	subs	r3, #1
1000cfbe:	b29b      	uxth	r3, r3
1000cfc0:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cfc2:	8be3      	ldrh	r3, [r4, #30]
1000cfc4:	2b00      	cmp	r3, #0
1000cfc6:	d022      	beq.n	1000d00e <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cfc8:	2310      	movs	r3, #16
1000cfca:	422b      	tst	r3, r5
1000cfcc:	d004      	beq.n	1000cfd8 <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cfce:	2221      	movs	r2, #33	; 0x21
1000cfd0:	5ca1      	ldrb	r1, [r4, r2]
1000cfd2:	3a20      	subs	r2, #32
1000cfd4:	420a      	tst	r2, r1
1000cfd6:	d10b      	bne.n	1000cff0 <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cfd8:	2320      	movs	r3, #32
1000cfda:	422b      	tst	r3, r5
1000cfdc:	d007      	beq.n	1000cfee <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cfde:	2221      	movs	r2, #33	; 0x21
1000cfe0:	5ca1      	ldrb	r1, [r4, r2]
1000cfe2:	3a1f      	subs	r2, #31
1000cfe4:	420a      	tst	r2, r1
1000cfe6:	d002      	beq.n	1000cfee <uart_tx1_isr_handler+0x52>
1000cfe8:	5ce3      	ldrb	r3, [r4, r3]
1000cfea:	421a      	tst	r2, r3
1000cfec:	d119      	bne.n	1000d022 <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000cfee:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cff0:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cff2:	5c61      	ldrb	r1, [r4, r1]
1000cff4:	420a      	tst	r2, r1
1000cff6:	d0ef      	beq.n	1000cfd8 <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cff8:	2100      	movs	r1, #0
1000cffa:	3221      	adds	r2, #33	; 0x21
1000cffc:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cffe:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d000:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d002:	7a0a      	ldrb	r2, [r1, #8]
1000d004:	439a      	bics	r2, r3
1000d006:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d008:	6863      	ldr	r3, [r4, #4]
1000d00a:	4798      	blx	r3
1000d00c:	e7e4      	b.n	1000cfd8 <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d00e:	6822      	ldr	r2, [r4, #0]
1000d010:	7a13      	ldrb	r3, [r2, #8]
1000d012:	438b      	bics	r3, r1
1000d014:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d016:	2310      	movs	r3, #16
1000d018:	6822      	ldr	r2, [r4, #0]
1000d01a:	7a11      	ldrb	r1, [r2, #8]
1000d01c:	430b      	orrs	r3, r1
1000d01e:	7213      	strb	r3, [r2, #8]
1000d020:	e7d2      	b.n	1000cfc8 <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d022:	68a3      	ldr	r3, [r4, #8]
1000d024:	0020      	movs	r0, r4
1000d026:	4798      	blx	r3
		}

	}
}
1000d028:	e7e1      	b.n	1000cfee <uart_tx1_isr_handler+0x52>
1000d02a:	46c0      	nop			; (mov r8, r8)
1000d02c:	10019c38 	.word	0x10019c38

1000d030 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d030:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d032:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d034:	025b      	lsls	r3, r3, #9
1000d036:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d038:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d03a:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d03c:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000d03e:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d040:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d042:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d044:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d046:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d048:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d04a:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d04c:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d04e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d050:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d052:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d054:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d056:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d058:	4770      	bx	lr
1000d05a:	46c0      	nop			; (mov r8, r8)

1000d05c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d05e:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d060:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d062:	b480      	push	{r7}
1000d064:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000d066:	2200      	movs	r2, #0
1000d068:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d06a:	6043      	str	r3, [r0, #4]
1000d06c:	6083      	str	r3, [r0, #8]
1000d06e:	60c3      	str	r3, [r0, #12]
1000d070:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d072:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d074:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000d076:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d078:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d07a:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000d07c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d07e:	3301      	adds	r3, #1
1000d080:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d082:	3301      	adds	r3, #1
1000d084:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d086:	4b52      	ldr	r3, [pc, #328]	; (1000d1d0 <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d088:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000d08a:	4299      	cmp	r1, r3
1000d08c:	d100      	bne.n	1000d090 <uart_init+0x34>
1000d08e:	e06c      	b.n	1000d16a <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d090:	4b50      	ldr	r3, [pc, #320]	; (1000d1d4 <uart_init+0x178>)
1000d092:	4299      	cmp	r1, r3
1000d094:	d100      	bne.n	1000d098 <uart_init+0x3c>
1000d096:	e081      	b.n	1000d19c <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d098:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000d09a:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d09c:	2a00      	cmp	r2, #0
1000d09e:	d000      	beq.n	1000d0a2 <uart_init+0x46>
		index = 4;
1000d0a0:	3302      	adds	r3, #2
1000d0a2:	3b01      	subs	r3, #1
1000d0a4:	b2de      	uxtb	r6, r3
1000d0a6:	4b4c      	ldr	r3, [pc, #304]	; (1000d1d8 <uart_init+0x17c>)
1000d0a8:	003c      	movs	r4, r7
1000d0aa:	4698      	mov	r8, r3
1000d0ac:	3603      	adds	r6, #3
1000d0ae:	00b6      	lsls	r6, r6, #2
1000d0b0:	3408      	adds	r4, #8
1000d0b2:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d0b4:	8a21      	ldrh	r1, [r4, #16]
1000d0b6:	cc01      	ldmia	r4!, {r0}
1000d0b8:	b2c0      	uxtb	r0, r0
1000d0ba:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d0bc:	42a6      	cmp	r6, r4
1000d0be:	d1f9      	bne.n	1000d0b4 <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d0c0:	682b      	ldr	r3, [r5, #0]
1000d0c2:	7d1a      	ldrb	r2, [r3, #20]
1000d0c4:	07d2      	lsls	r2, r2, #31
1000d0c6:	d504      	bpl.n	1000d0d2 <uart_init+0x76>
1000d0c8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d0ca:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d0cc:	7d1a      	ldrb	r2, [r3, #20]
1000d0ce:	4211      	tst	r1, r2
1000d0d0:	d1fb      	bne.n	1000d0ca <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d0d2:	2100      	movs	r1, #0
1000d0d4:	2220      	movs	r2, #32
1000d0d6:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d0d8:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d0da:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000d0dc:	1e59      	subs	r1, r3, #1
1000d0de:	418b      	sbcs	r3, r1
1000d0e0:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d0e2:	793b      	ldrb	r3, [r7, #4]
1000d0e4:	4313      	orrs	r3, r2
	switch(config->parity) {
1000d0e6:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d0e8:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d0ea:	2a02      	cmp	r2, #2
1000d0ec:	d03a      	beq.n	1000d164 <uart_init+0x108>
1000d0ee:	d934      	bls.n	1000d15a <uart_init+0xfe>
1000d0f0:	2a03      	cmp	r2, #3
1000d0f2:	d02f      	beq.n	1000d154 <uart_init+0xf8>
1000d0f4:	2a04      	cmp	r2, #4
1000d0f6:	d101      	bne.n	1000d0fc <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d0f8:	220e      	movs	r2, #14
1000d0fa:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d0fc:	2220      	movs	r2, #32
1000d0fe:	6829      	ldr	r1, [r5, #0]
1000d100:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d102:	4b36      	ldr	r3, [pc, #216]	; (1000d1dc <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d104:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d106:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000d108:	0031      	movs	r1, r6
1000d10a:	4b35      	ldr	r3, [pc, #212]	; (1000d1e0 <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d10c:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d10e:	4798      	blx	r3
1000d110:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d112:	0400      	lsls	r0, r0, #16
1000d114:	0c00      	lsrs	r0, r0, #16
1000d116:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d118:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000d11a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d11c:	2300      	movs	r3, #0
1000d11e:	4281      	cmp	r1, r0
1000d120:	d207      	bcs.n	1000d132 <uart_init+0xd6>
		i++;
1000d122:	3301      	adds	r3, #1
1000d124:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d126:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d128:	4281      	cmp	r1, r0
1000d12a:	d3fa      	bcc.n	1000d122 <uart_init+0xc6>
1000d12c:	3301      	adds	r3, #1
1000d12e:	071b      	lsls	r3, r3, #28
1000d130:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d132:	2100      	movs	r1, #0
1000d134:	2028      	movs	r0, #40	; 0x28
1000d136:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000d138:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d13a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d13c:	4313      	orrs	r3, r2
1000d13e:	682a      	ldr	r2, [r5, #0]
1000d140:	b29b      	uxth	r3, r3
1000d142:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d144:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000d146:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d148:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d14a:	682b      	ldr	r3, [r5, #0]
1000d14c:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d14e:	bc04      	pop	{r2}
1000d150:	4690      	mov	r8, r2
1000d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d154:	220a      	movs	r2, #10
1000d156:	4313      	orrs	r3, r2
			break;
1000d158:	e7d0      	b.n	1000d0fc <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000d15a:	2a01      	cmp	r2, #1
1000d15c:	d1ce      	bne.n	1000d0fc <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d15e:	2202      	movs	r2, #2
1000d160:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d162:	e7cb      	b.n	1000d0fc <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d164:	2206      	movs	r2, #6
1000d166:	4313      	orrs	r3, r2
			break;
1000d168:	e7c8      	b.n	1000d0fc <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d16a:	4c1e      	ldr	r4, [pc, #120]	; (1000d1e4 <uart_init+0x188>)
1000d16c:	2009      	movs	r0, #9
1000d16e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d170:	200a      	movs	r0, #10
1000d172:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d174:	4c1c      	ldr	r4, [pc, #112]	; (1000d1e8 <uart_init+0x18c>)
1000d176:	2009      	movs	r0, #9
1000d178:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d17a:	200a      	movs	r0, #10
1000d17c:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d17e:	4b1b      	ldr	r3, [pc, #108]	; (1000d1ec <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d180:	491b      	ldr	r1, [pc, #108]	; (1000d1f0 <uart_init+0x194>)
1000d182:	2010      	movs	r0, #16
1000d184:	4c1b      	ldr	r4, [pc, #108]	; (1000d1f4 <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000d186:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d188:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d18a:	491b      	ldr	r1, [pc, #108]	; (1000d1f8 <uart_init+0x19c>)
1000d18c:	2011      	movs	r0, #17
1000d18e:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d190:	2201      	movs	r2, #1
1000d192:	4b1a      	ldr	r3, [pc, #104]	; (1000d1fc <uart_init+0x1a0>)
1000d194:	601a      	str	r2, [r3, #0]
1000d196:	3201      	adds	r2, #1
1000d198:	601a      	str	r2, [r3, #0]
1000d19a:	e77d      	b.n	1000d098 <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d19c:	4c11      	ldr	r4, [pc, #68]	; (1000d1e4 <uart_init+0x188>)
1000d19e:	200b      	movs	r0, #11
1000d1a0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d1a2:	200c      	movs	r0, #12
1000d1a4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d1a6:	4c10      	ldr	r4, [pc, #64]	; (1000d1e8 <uart_init+0x18c>)
1000d1a8:	200b      	movs	r0, #11
1000d1aa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d1ac:	200c      	movs	r0, #12
1000d1ae:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d1b0:	4b0e      	ldr	r3, [pc, #56]	; (1000d1ec <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d1b2:	4913      	ldr	r1, [pc, #76]	; (1000d200 <uart_init+0x1a4>)
1000d1b4:	2012      	movs	r0, #18
1000d1b6:	4c0f      	ldr	r4, [pc, #60]	; (1000d1f4 <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000d1b8:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d1ba:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d1bc:	4911      	ldr	r1, [pc, #68]	; (1000d204 <uart_init+0x1a8>)
1000d1be:	2013      	movs	r0, #19
1000d1c0:	47a0      	blx	r4
1000d1c2:	2204      	movs	r2, #4
1000d1c4:	4b0d      	ldr	r3, [pc, #52]	; (1000d1fc <uart_init+0x1a0>)
1000d1c6:	601a      	str	r2, [r3, #0]
1000d1c8:	3204      	adds	r2, #4
1000d1ca:	601a      	str	r2, [r3, #0]
1000d1cc:	e764      	b.n	1000d098 <uart_init+0x3c>
1000d1ce:	46c0      	nop			; (mov r8, r8)
1000d1d0:	40004000 	.word	0x40004000
1000d1d4:	40005000 	.word	0x40005000
1000d1d8:	1000d5a5 	.word	0x1000d5a5
1000d1dc:	1000da65 	.word	0x1000da65
1000d1e0:	100118cd 	.word	0x100118cd
1000d1e4:	1000dd79 	.word	0x1000dd79
1000d1e8:	1000da71 	.word	0x1000da71
1000d1ec:	10019c38 	.word	0x10019c38
1000d1f0:	1000cdf1 	.word	0x1000cdf1
1000d1f4:	1000e191 	.word	0x1000e191
1000d1f8:	1000ce7d 	.word	0x1000ce7d
1000d1fc:	e000e100 	.word	0xe000e100
1000d200:	1000cf11 	.word	0x1000cf11
1000d204:	1000cf9d 	.word	0x1000cf9d

1000d208 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000d208:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d20a:	2001      	movs	r0, #1
1000d20c:	7913      	ldrb	r3, [r2, #4]
1000d20e:	4218      	tst	r0, r3
1000d210:	d0fc      	beq.n	1000d20c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000d212:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d214:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d216:	4770      	bx	lr

1000d218 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000d218:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d21a:	2001      	movs	r0, #1
1000d21c:	7d13      	ldrb	r3, [r2, #20]
1000d21e:	4218      	tst	r0, r3
1000d220:	d0fc      	beq.n	1000d21c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d222:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000d224:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d226:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d228:	4770      	bx	lr
1000d22a:	46c0      	nop			; (mov r8, r8)

1000d22c <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000d22c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d22e:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d230:	2a00      	cmp	r2, #0
1000d232:	d101      	bne.n	1000d238 <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000d234:	0018      	movs	r0, r3
1000d236:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d238:	2422      	movs	r4, #34	; 0x22
1000d23a:	5d03      	ldrb	r3, [r0, r4]
1000d23c:	b2db      	uxtb	r3, r3
1000d23e:	2b05      	cmp	r3, #5
1000d240:	d0f8      	beq.n	1000d234 <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000d242:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d244:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d246:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000d248:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d24a:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d24c:	6803      	ldr	r3, [r0, #0]
1000d24e:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d250:	2300      	movs	r3, #0
1000d252:	e7ef      	b.n	1000d234 <uart_read_buffer_job+0x8>

1000d254 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d254:	0093      	lsls	r3, r2, #2
1000d256:	18c3      	adds	r3, r0, r3
1000d258:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d25a:	2301      	movs	r3, #1
1000d25c:	2120      	movs	r1, #32
1000d25e:	4093      	lsls	r3, r2
1000d260:	5c42      	ldrb	r2, [r0, r1]
1000d262:	4313      	orrs	r3, r2
1000d264:	5443      	strb	r3, [r0, r1]
}
1000d266:	4770      	bx	lr

1000d268 <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d268:	2301      	movs	r3, #1
1000d26a:	2221      	movs	r2, #33	; 0x21
1000d26c:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d26e:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d270:	5c84      	ldrb	r4, [r0, r2]
1000d272:	4323      	orrs	r3, r4
1000d274:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d276:	2901      	cmp	r1, #1
1000d278:	d104      	bne.n	1000d284 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d27a:	2320      	movs	r3, #32
1000d27c:	6802      	ldr	r2, [r0, #0]
1000d27e:	7a11      	ldrb	r1, [r2, #8]
1000d280:	430b      	orrs	r3, r1
1000d282:	7213      	strb	r3, [r2, #8]
	}
}
1000d284:	bd10      	pop	{r4, pc}
1000d286:	46c0      	nop			; (mov r8, r8)

1000d288 <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d288:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d28a:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d28c:	2421      	movs	r4, #33	; 0x21
1000d28e:	408a      	lsls	r2, r1
1000d290:	5d03      	ldrb	r3, [r0, r4]
1000d292:	4393      	bics	r3, r2
1000d294:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d296:	2901      	cmp	r1, #1
1000d298:	d104      	bne.n	1000d2a4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d29a:	6802      	ldr	r2, [r0, #0]
1000d29c:	311f      	adds	r1, #31
1000d29e:	7a13      	ldrb	r3, [r2, #8]
1000d2a0:	438b      	bics	r3, r1
1000d2a2:	7213      	strb	r3, [r2, #8]
	}

}
1000d2a4:	bd10      	pop	{r4, pc}
1000d2a6:	46c0      	nop			; (mov r8, r8)

1000d2a8 <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000d2a8:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000d2aa:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000d2ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000d2ae:	4d12      	ldr	r5, [pc, #72]	; (1000d2f8 <gpio_port0_isr_handler+0x50>)
1000d2b0:	682e      	ldr	r6, [r5, #0]
1000d2b2:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000d2b4:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000d2b6:	0002      	movs	r2, r0
1000d2b8:	409a      	lsls	r2, r3
1000d2ba:	2401      	movs	r4, #1
1000d2bc:	4211      	tst	r1, r2
1000d2be:	d109      	bne.n	1000d2d4 <gpio_port0_isr_handler+0x2c>
1000d2c0:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d2c2:	2b10      	cmp	r3, #16
1000d2c4:	d1f7      	bne.n	1000d2b6 <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d2c6:	2180      	movs	r1, #128	; 0x80
1000d2c8:	23c0      	movs	r3, #192	; 0xc0
1000d2ca:	4a0c      	ldr	r2, [pc, #48]	; (1000d2fc <gpio_port0_isr_handler+0x54>)
1000d2cc:	0409      	lsls	r1, r1, #16
1000d2ce:	005b      	lsls	r3, r3, #1
1000d2d0:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000d2d2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d2d4:	b292      	uxth	r2, r2
1000d2d6:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d2d8:	2246      	movs	r2, #70	; 0x46
1000d2da:	5aaa      	ldrh	r2, [r5, r2]
1000d2dc:	411a      	asrs	r2, r3
1000d2de:	4214      	tst	r4, r2
1000d2e0:	d0f1      	beq.n	1000d2c6 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000d2e2:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000d2e4:	5aaa      	ldrh	r2, [r5, r2]
1000d2e6:	411a      	asrs	r2, r3
1000d2e8:	4214      	tst	r4, r2
1000d2ea:	d0ec      	beq.n	1000d2c6 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000d2ec:	009b      	lsls	r3, r3, #2
1000d2ee:	18eb      	adds	r3, r5, r3
1000d2f0:	685b      	ldr	r3, [r3, #4]
1000d2f2:	4798      	blx	r3
1000d2f4:	e7e7      	b.n	1000d2c6 <gpio_port0_isr_handler+0x1e>
1000d2f6:	46c0      	nop			; (mov r8, r8)
1000d2f8:	10019c40 	.word	0x10019c40
1000d2fc:	e000e100 	.word	0xe000e100

1000d300 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000d300:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d302:	4657      	mov	r7, sl
1000d304:	464e      	mov	r6, r9
1000d306:	4645      	mov	r5, r8
1000d308:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000d30a:	4e1b      	ldr	r6, [pc, #108]	; (1000d378 <gpio_port1_isr_handler+0x78>)
1000d30c:	2400      	movs	r4, #0
1000d30e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000d310:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000d312:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000d314:	b2bf      	uxth	r7, r7
1000d316:	0b7b      	lsrs	r3, r7, #13
1000d318:	035b      	lsls	r3, r3, #13
1000d31a:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000d31c:	4b17      	ldr	r3, [pc, #92]	; (1000d37c <gpio_port1_isr_handler+0x7c>)
1000d31e:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d320:	238e      	movs	r3, #142	; 0x8e
1000d322:	4699      	mov	r9, r3
1000d324:	e013      	b.n	1000d34e <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000d326:	002b      	movs	r3, r5
1000d328:	40a3      	lsls	r3, r4
1000d32a:	421f      	tst	r7, r3
1000d32c:	d00c      	beq.n	1000d348 <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d32e:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000d330:	b29b      	uxth	r3, r3
1000d332:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d334:	464b      	mov	r3, r9
1000d336:	5af3      	ldrh	r3, [r6, r3]
1000d338:	4123      	asrs	r3, r4
1000d33a:	421d      	tst	r5, r3
1000d33c:	d004      	beq.n	1000d348 <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000d33e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000d340:	5af3      	ldrh	r3, [r6, r3]
1000d342:	4123      	asrs	r3, r4
1000d344:	421d      	tst	r5, r3
1000d346:	d107      	bne.n	1000d358 <gpio_port1_isr_handler+0x58>
1000d348:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000d34a:	2c10      	cmp	r4, #16
1000d34c:	d009      	beq.n	1000d362 <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000d34e:	4643      	mov	r3, r8
1000d350:	2b00      	cmp	r3, #0
1000d352:	d0e8      	beq.n	1000d326 <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000d354:	47d0      	blx	sl
1000d356:	e7e6      	b.n	1000d326 <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000d358:	3412      	adds	r4, #18
1000d35a:	00a4      	lsls	r4, r4, #2
1000d35c:	1934      	adds	r4, r6, r4
1000d35e:	6863      	ldr	r3, [r4, #4]
1000d360:	4798      	blx	r3
1000d362:	2180      	movs	r1, #128	; 0x80
1000d364:	23c0      	movs	r3, #192	; 0xc0
1000d366:	4a06      	ldr	r2, [pc, #24]	; (1000d380 <gpio_port1_isr_handler+0x80>)
1000d368:	0449      	lsls	r1, r1, #17
1000d36a:	005b      	lsls	r3, r3, #1
1000d36c:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000d36e:	bc1c      	pop	{r2, r3, r4}
1000d370:	4690      	mov	r8, r2
1000d372:	4699      	mov	r9, r3
1000d374:	46a2      	mov	sl, r4
1000d376:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d378:	10019c40 	.word	0x10019c40
1000d37c:	0001bc51 	.word	0x0001bc51
1000d380:	e000e100 	.word	0xe000e100

1000d384 <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000d384:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d386:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000d388:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000d38a:	491a      	ldr	r1, [pc, #104]	; (1000d3f4 <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d38c:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000d38e:	58c8      	ldr	r0, [r1, r3]
1000d390:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d392:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d394:	4213      	tst	r3, r2
1000d396:	d110      	bne.n	1000d3ba <gpio_port2_isr_handler+0x36>
1000d398:	2280      	movs	r2, #128	; 0x80
1000d39a:	0192      	lsls	r2, r2, #6
1000d39c:	4213      	tst	r3, r2
1000d39e:	d120      	bne.n	1000d3e2 <gpio_port2_isr_handler+0x5e>
1000d3a0:	2280      	movs	r2, #128	; 0x80
1000d3a2:	01d2      	lsls	r2, r2, #7
1000d3a4:	4213      	tst	r3, r2
1000d3a6:	d11e      	bne.n	1000d3e6 <gpio_port2_isr_handler+0x62>
1000d3a8:	0bdb      	lsrs	r3, r3, #15
1000d3aa:	d11e      	bne.n	1000d3ea <gpio_port2_isr_handler+0x66>
1000d3ac:	2180      	movs	r1, #128	; 0x80
1000d3ae:	23c0      	movs	r3, #192	; 0xc0
1000d3b0:	4a11      	ldr	r2, [pc, #68]	; (1000d3f8 <gpio_port2_isr_handler+0x74>)
1000d3b2:	0489      	lsls	r1, r1, #18
1000d3b4:	005b      	lsls	r3, r3, #1
1000d3b6:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000d3b8:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d3ba:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000d3bc:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000d3be:	b292      	uxth	r2, r2
1000d3c0:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000d3c2:	5acb      	ldrh	r3, [r1, r3]
1000d3c4:	2201      	movs	r2, #1
1000d3c6:	4123      	asrs	r3, r4
1000d3c8:	421a      	tst	r2, r3
1000d3ca:	d0ef      	beq.n	1000d3ac <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000d3cc:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000d3ce:	5acb      	ldrh	r3, [r1, r3]
1000d3d0:	4123      	asrs	r3, r4
1000d3d2:	421a      	tst	r2, r3
1000d3d4:	d0ea      	beq.n	1000d3ac <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000d3d6:	3424      	adds	r4, #36	; 0x24
1000d3d8:	00a4      	lsls	r4, r4, #2
1000d3da:	1909      	adds	r1, r1, r4
1000d3dc:	684b      	ldr	r3, [r1, #4]
1000d3de:	4798      	blx	r3
1000d3e0:	e7e4      	b.n	1000d3ac <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d3e2:	240d      	movs	r4, #13
1000d3e4:	e7ea      	b.n	1000d3bc <gpio_port2_isr_handler+0x38>
1000d3e6:	240e      	movs	r4, #14
1000d3e8:	e7e8      	b.n	1000d3bc <gpio_port2_isr_handler+0x38>
1000d3ea:	2280      	movs	r2, #128	; 0x80
1000d3ec:	240f      	movs	r4, #15
1000d3ee:	0212      	lsls	r2, r2, #8
1000d3f0:	e7e4      	b.n	1000d3bc <gpio_port2_isr_handler+0x38>
1000d3f2:	46c0      	nop			; (mov r8, r8)
1000d3f4:	10019c40 	.word	0x10019c40
1000d3f8:	e000e100 	.word	0xe000e100

1000d3fc <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000d3fc:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000d3fe:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000d400:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000d402:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000d404:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000d406:	70c3      	strb	r3, [r0, #3]
}
1000d408:	4770      	bx	lr
1000d40a:	46c0      	nop			; (mov r8, r8)

1000d40c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000d40c:	0003      	movs	r3, r0
1000d40e:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000d410:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000d412:	2b01      	cmp	r3, #1
1000d414:	d92b      	bls.n	1000d46e <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000d416:	2b07      	cmp	r3, #7
1000d418:	d82a      	bhi.n	1000d470 <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d41a:	009d      	lsls	r5, r3, #2
1000d41c:	3810      	subs	r0, #16
1000d41e:	40a8      	lsls	r0, r5
1000d420:	4c5a      	ldr	r4, [pc, #360]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d422:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000d424:	4382      	bics	r2, r0
1000d426:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000d428:	001a      	movs	r2, r3
1000d42a:	3a1d      	subs	r2, #29
1000d42c:	2a02      	cmp	r2, #2
1000d42e:	d834      	bhi.n	1000d49a <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d430:	241f      	movs	r4, #31
1000d432:	4d57      	ldr	r5, [pc, #348]	; (1000d590 <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000d434:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d436:	7d28      	ldrb	r0, [r5, #20]
1000d438:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000d43a:	2a01      	cmp	r2, #1
1000d43c:	d063      	beq.n	1000d506 <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000d43e:	2201      	movs	r2, #1
1000d440:	40a2      	lsls	r2, r4
1000d442:	4302      	orrs	r2, r0
1000d444:	b2d2      	uxtb	r2, r2
1000d446:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000d448:	78ca      	ldrb	r2, [r1, #3]
1000d44a:	2a00      	cmp	r2, #0
1000d44c:	d023      	beq.n	1000d496 <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000d44e:	201f      	movs	r0, #31
1000d450:	1ac0      	subs	r0, r0, r3
1000d452:	2301      	movs	r3, #1
1000d454:	0080      	lsls	r0, r0, #2
1000d456:	4083      	lsls	r3, r0
1000d458:	494d      	ldr	r1, [pc, #308]	; (1000d590 <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d45a:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000d45c:	880a      	ldrh	r2, [r1, #0]
1000d45e:	4313      	orrs	r3, r2
1000d460:	b29b      	uxth	r3, r3
1000d462:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000d464:	2302      	movs	r3, #2
1000d466:	4a4b      	ldr	r2, [pc, #300]	; (1000d594 <gpio_pin_set_config+0x188>)
1000d468:	7811      	ldrb	r1, [r2, #0]
1000d46a:	430b      	orrs	r3, r1
1000d46c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000d46e:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000d470:	2b0f      	cmp	r3, #15
1000d472:	d93e      	bls.n	1000d4f2 <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000d474:	2b17      	cmp	r3, #23
1000d476:	d84a      	bhi.n	1000d50e <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d478:	2207      	movs	r2, #7
1000d47a:	0014      	movs	r4, r2
1000d47c:	401c      	ands	r4, r3
1000d47e:	00a4      	lsls	r4, r4, #2
1000d480:	40a2      	lsls	r2, r4
1000d482:	4d42      	ldr	r5, [pc, #264]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d484:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000d486:	4390      	bics	r0, r2
1000d488:	64e8      	str	r0, [r5, #76]	; 0x4c
1000d48a:	e7cd      	b.n	1000d428 <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d48c:	4003      	ands	r3, r0
1000d48e:	409a      	lsls	r2, r3
1000d490:	4b41      	ldr	r3, [pc, #260]	; (1000d598 <gpio_pin_set_config+0x18c>)
1000d492:	b292      	uxth	r2, r2
1000d494:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d496:	2000      	movs	r0, #0
1000d498:	e7e9      	b.n	1000d46e <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000d49a:	780a      	ldrb	r2, [r1, #0]
1000d49c:	2a00      	cmp	r2, #0
1000d49e:	d11a      	bne.n	1000d4d6 <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000d4a0:	2b0f      	cmp	r3, #15
1000d4a2:	d849      	bhi.n	1000d538 <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000d4a4:	3201      	adds	r2, #1
1000d4a6:	409a      	lsls	r2, r3
1000d4a8:	483c      	ldr	r0, [pc, #240]	; (1000d59c <gpio_pin_set_config+0x190>)
1000d4aa:	b292      	uxth	r2, r2
1000d4ac:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000d4ae:	784a      	ldrb	r2, [r1, #1]
1000d4b0:	2a01      	cmp	r2, #1
1000d4b2:	d063      	beq.n	1000d57c <gpio_pin_set_config+0x170>
1000d4b4:	2a00      	cmp	r2, #0
1000d4b6:	d050      	beq.n	1000d55a <gpio_pin_set_config+0x14e>
1000d4b8:	2a02      	cmp	r2, #2
1000d4ba:	d15d      	bne.n	1000d578 <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000d4bc:	2101      	movs	r1, #1
1000d4be:	4099      	lsls	r1, r3
1000d4c0:	4a32      	ldr	r2, [pc, #200]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d4c2:	000b      	movs	r3, r1
1000d4c4:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000d4c6:	0001      	movs	r1, r0
1000d4c8:	4319      	orrs	r1, r3
1000d4ca:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d4cc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d4ce:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d4d0:	4399      	bics	r1, r3
1000d4d2:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000d4d4:	e7cb      	b.n	1000d46e <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000d4d6:	2a01      	cmp	r2, #1
1000d4d8:	d1dd      	bne.n	1000d496 <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000d4da:	2b0f      	cmp	r3, #15
1000d4dc:	d946      	bls.n	1000d56c <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d4de:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000d4e0:	2b1f      	cmp	r3, #31
1000d4e2:	d9d3      	bls.n	1000d48c <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d4e4:	4003      	ands	r3, r0
1000d4e6:	409a      	lsls	r2, r3
1000d4e8:	4b2d      	ldr	r3, [pc, #180]	; (1000d5a0 <gpio_pin_set_config+0x194>)
1000d4ea:	b292      	uxth	r2, r2
1000d4ec:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d4ee:	2000      	movs	r0, #0
1000d4f0:	e7bd      	b.n	1000d46e <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d4f2:	2207      	movs	r2, #7
1000d4f4:	0014      	movs	r4, r2
1000d4f6:	401c      	ands	r4, r3
1000d4f8:	00a4      	lsls	r4, r4, #2
1000d4fa:	40a2      	lsls	r2, r4
1000d4fc:	4d23      	ldr	r5, [pc, #140]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d4fe:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000d500:	4390      	bics	r0, r2
1000d502:	64a8      	str	r0, [r5, #72]	; 0x48
1000d504:	e790      	b.n	1000d428 <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d506:	40a2      	lsls	r2, r4
1000d508:	4390      	bics	r0, r2
1000d50a:	7528      	strb	r0, [r5, #20]
1000d50c:	e79c      	b.n	1000d448 <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000d50e:	001a      	movs	r2, r3
1000d510:	3a2c      	subs	r2, #44	; 0x2c
1000d512:	b2d0      	uxtb	r0, r2
1000d514:	2803      	cmp	r0, #3
1000d516:	d900      	bls.n	1000d51a <gpio_pin_set_config+0x10e>
1000d518:	e786      	b.n	1000d428 <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000d51a:	2601      	movs	r6, #1
1000d51c:	2482      	movs	r4, #130	; 0x82
1000d51e:	4096      	lsls	r6, r2
1000d520:	4d1b      	ldr	r5, [pc, #108]	; (1000d590 <gpio_pin_set_config+0x184>)
1000d522:	00e4      	lsls	r4, r4, #3
1000d524:	5d28      	ldrb	r0, [r5, r4]
1000d526:	5d2a      	ldrb	r2, [r5, r4]
1000d528:	0700      	lsls	r0, r0, #28
1000d52a:	0f00      	lsrs	r0, r0, #28
1000d52c:	43b0      	bics	r0, r6
1000d52e:	260f      	movs	r6, #15
1000d530:	43b2      	bics	r2, r6
1000d532:	4302      	orrs	r2, r0
1000d534:	552a      	strb	r2, [r5, r4]
1000d536:	e777      	b.n	1000d428 <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d538:	200f      	movs	r0, #15
1000d53a:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000d53c:	2b1f      	cmp	r3, #31
1000d53e:	d805      	bhi.n	1000d54c <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d540:	2201      	movs	r2, #1
1000d542:	4082      	lsls	r2, r0
1000d544:	4814      	ldr	r0, [pc, #80]	; (1000d598 <gpio_pin_set_config+0x18c>)
1000d546:	b292      	uxth	r2, r2
1000d548:	8282      	strh	r2, [r0, #20]
1000d54a:	e7b0      	b.n	1000d4ae <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d54c:	2301      	movs	r3, #1
1000d54e:	4083      	lsls	r3, r0
1000d550:	4a13      	ldr	r2, [pc, #76]	; (1000d5a0 <gpio_pin_set_config+0x194>)
1000d552:	b29b      	uxth	r3, r3
1000d554:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d556:	2000      	movs	r0, #0
1000d558:	e789      	b.n	1000d46e <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000d55a:	2101      	movs	r1, #1
1000d55c:	4099      	lsls	r1, r3
1000d55e:	000b      	movs	r3, r1
1000d560:	480a      	ldr	r0, [pc, #40]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d562:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000d564:	4313      	orrs	r3, r2
1000d566:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d568:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000d56a:	e780      	b.n	1000d46e <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000d56c:	409a      	lsls	r2, r3
1000d56e:	4b0b      	ldr	r3, [pc, #44]	; (1000d59c <gpio_pin_set_config+0x190>)
1000d570:	b292      	uxth	r2, r2
1000d572:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d574:	2000      	movs	r0, #0
1000d576:	e77a      	b.n	1000d46e <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000d578:	2017      	movs	r0, #23
1000d57a:	e778      	b.n	1000d46e <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d57c:	4803      	ldr	r0, [pc, #12]	; (1000d58c <gpio_pin_set_config+0x180>)
1000d57e:	409a      	lsls	r2, r3
1000d580:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000d582:	000b      	movs	r3, r1
1000d584:	4393      	bics	r3, r2
1000d586:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d588:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000d58a:	e770      	b.n	1000d46e <gpio_pin_set_config+0x62>
1000d58c:	4000b000 	.word	0x4000b000
1000d590:	4000f000 	.word	0x4000f000
1000d594:	4000e000 	.word	0x4000e000
1000d598:	40011000 	.word	0x40011000
1000d59c:	40010000 	.word	0x40010000
1000d5a0:	40013000 	.word	0x40013000

1000d5a4 <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000d5a4:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000d5a6:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000d5a8:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000d5aa:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000d5ac:	2807      	cmp	r0, #7
1000d5ae:	d80e      	bhi.n	1000d5ce <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d5b0:	2407      	movs	r4, #7
1000d5b2:	0086      	lsls	r6, r0, #2
1000d5b4:	40b4      	lsls	r4, r6
1000d5b6:	4b31      	ldr	r3, [pc, #196]	; (1000d67c <gpio_pinmux_cofiguration+0xd8>)
1000d5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d5ba:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d5bc:	000c      	movs	r4, r1
1000d5be:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d5c0:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d5c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d5c4:	4322      	orrs	r2, r4
1000d5c6:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000d5c8:	2901      	cmp	r1, #1
1000d5ca:	d036      	beq.n	1000d63a <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000d5cc:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000d5ce:	280f      	cmp	r0, #15
1000d5d0:	d816      	bhi.n	1000d600 <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d5d2:	2407      	movs	r4, #7
1000d5d4:	0022      	movs	r2, r4
1000d5d6:	4002      	ands	r2, r0
1000d5d8:	0092      	lsls	r2, r2, #2
1000d5da:	4094      	lsls	r4, r2
1000d5dc:	4b27      	ldr	r3, [pc, #156]	; (1000d67c <gpio_pinmux_cofiguration+0xd8>)
1000d5de:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000d5e0:	43a6      	bics	r6, r4
1000d5e2:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d5e4:	000e      	movs	r6, r1
1000d5e6:	4096      	lsls	r6, r2
1000d5e8:	0032      	movs	r2, r6
1000d5ea:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000d5ec:	4322      	orrs	r2, r4
1000d5ee:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000d5f0:	2901      	cmp	r1, #1
1000d5f2:	d1eb      	bne.n	1000d5cc <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d5f4:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000d5f6:	280b      	cmp	r0, #11
1000d5f8:	d93e      	bls.n	1000d678 <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d5fa:	21d6      	movs	r1, #214	; 0xd6
1000d5fc:	0049      	lsls	r1, r1, #1
1000d5fe:	e020      	b.n	1000d642 <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000d600:	2817      	cmp	r0, #23
1000d602:	d8e3      	bhi.n	1000d5cc <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d604:	2407      	movs	r4, #7
1000d606:	0022      	movs	r2, r4
1000d608:	4002      	ands	r2, r0
1000d60a:	0092      	lsls	r2, r2, #2
1000d60c:	4094      	lsls	r4, r2
1000d60e:	4b1b      	ldr	r3, [pc, #108]	; (1000d67c <gpio_pinmux_cofiguration+0xd8>)
1000d610:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000d612:	43a6      	bics	r6, r4
1000d614:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d616:	000e      	movs	r6, r1
1000d618:	4096      	lsls	r6, r2
1000d61a:	0032      	movs	r2, r6
1000d61c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000d61e:	4322      	orrs	r2, r4
1000d620:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000d622:	2901      	cmp	r1, #1
1000d624:	d1d2      	bne.n	1000d5cc <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000d626:	2813      	cmp	r0, #19
1000d628:	d925      	bls.n	1000d676 <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d62a:	2403      	movs	r4, #3
1000d62c:	22da      	movs	r2, #218	; 0xda
1000d62e:	4020      	ands	r0, r4
1000d630:	0052      	lsls	r2, r2, #1
1000d632:	5899      	ldr	r1, [r3, r2]
1000d634:	00c0      	lsls	r0, r0, #3
1000d636:	343c      	adds	r4, #60	; 0x3c
1000d638:	e015      	b.n	1000d666 <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000d63a:	2803      	cmp	r0, #3
1000d63c:	d90e      	bls.n	1000d65c <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d63e:	21d2      	movs	r1, #210	; 0xd2
1000d640:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d642:	2203      	movs	r2, #3
1000d644:	4010      	ands	r0, r2
1000d646:	00c0      	lsls	r0, r0, #3
1000d648:	323c      	adds	r2, #60	; 0x3c
1000d64a:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d64c:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d64e:	585c      	ldr	r4, [r3, r1]
1000d650:	4394      	bics	r4, r2
1000d652:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d654:	585a      	ldr	r2, [r3, r1]
1000d656:	4315      	orrs	r5, r2
1000d658:	505d      	str	r5, [r3, r1]
1000d65a:	e7b7      	b.n	1000d5cc <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d65c:	22d0      	movs	r2, #208	; 0xd0
1000d65e:	243f      	movs	r4, #63	; 0x3f
1000d660:	0052      	lsls	r2, r2, #1
1000d662:	5899      	ldr	r1, [r3, r2]
1000d664:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d666:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d668:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d66a:	43a1      	bics	r1, r4
1000d66c:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d66e:	5899      	ldr	r1, [r3, r2]
1000d670:	430d      	orrs	r5, r1
1000d672:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000d674:	e7aa      	b.n	1000d5cc <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d676:	31b0      	adds	r1, #176	; 0xb0
1000d678:	31ff      	adds	r1, #255	; 0xff
1000d67a:	e7e2      	b.n	1000d642 <gpio_pinmux_cofiguration+0x9e>
1000d67c:	4000b000 	.word	0x4000b000

1000d680 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000d680:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d682:	468c      	mov	ip, r1
1000d684:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d686:	280f      	cmp	r0, #15
1000d688:	d904      	bls.n	1000d694 <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000d68a:	331f      	adds	r3, #31
1000d68c:	4283      	cmp	r3, r0
1000d68e:	419b      	sbcs	r3, r3
1000d690:	425b      	negs	r3, r3
1000d692:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000d694:	2a01      	cmp	r2, #1
1000d696:	d043      	beq.n	1000d720 <gpio_register_callback+0xa0>
1000d698:	2a00      	cmp	r2, #0
1000d69a:	d033      	beq.n	1000d704 <gpio_register_callback+0x84>
1000d69c:	2a02      	cmp	r2, #2
1000d69e:	d015      	beq.n	1000d6cc <gpio_register_callback+0x4c>
1000d6a0:	2a03      	cmp	r2, #3
1000d6a2:	d021      	beq.n	1000d6e8 <gpio_register_callback+0x68>
1000d6a4:	220f      	movs	r2, #15
1000d6a6:	4010      	ands	r0, r2
1000d6a8:	3a0e      	subs	r2, #14
1000d6aa:	4082      	lsls	r2, r0
1000d6ac:	4c23      	ldr	r4, [pc, #140]	; (1000d73c <gpio_register_callback+0xbc>)
1000d6ae:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d6b0:	4661      	mov	r1, ip
1000d6b2:	18eb      	adds	r3, r5, r3
1000d6b4:	005d      	lsls	r5, r3, #1
1000d6b6:	1828      	adds	r0, r5, r0
1000d6b8:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d6ba:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d6bc:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d6be:	18e3      	adds	r3, r4, r3
1000d6c0:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d6c2:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d6c4:	8819      	ldrh	r1, [r3, #0]
1000d6c6:	430a      	orrs	r2, r1
1000d6c8:	801a      	strh	r2, [r3, #0]
}
1000d6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d6cc:	220f      	movs	r2, #15
1000d6ce:	4010      	ands	r0, r2
1000d6d0:	3a0e      	subs	r2, #14
1000d6d2:	4082      	lsls	r2, r0
1000d6d4:	00dd      	lsls	r5, r3, #3
1000d6d6:	4c19      	ldr	r4, [pc, #100]	; (1000d73c <gpio_register_callback+0xbc>)
1000d6d8:	18ee      	adds	r6, r5, r3
1000d6da:	00f6      	lsls	r6, r6, #3
1000d6dc:	59a1      	ldr	r1, [r4, r6]
1000d6de:	b297      	uxth	r7, r2
1000d6e0:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d6e2:	59a6      	ldr	r6, [r4, r6]
1000d6e4:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d6e6:	e7e3      	b.n	1000d6b0 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d6e8:	220f      	movs	r2, #15
1000d6ea:	4010      	ands	r0, r2
1000d6ec:	3a0e      	subs	r2, #14
1000d6ee:	4082      	lsls	r2, r0
1000d6f0:	00dd      	lsls	r5, r3, #3
1000d6f2:	4c12      	ldr	r4, [pc, #72]	; (1000d73c <gpio_register_callback+0xbc>)
1000d6f4:	18ee      	adds	r6, r5, r3
1000d6f6:	00f6      	lsls	r6, r6, #3
1000d6f8:	59a1      	ldr	r1, [r4, r6]
1000d6fa:	b297      	uxth	r7, r2
1000d6fc:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000d6fe:	59a6      	ldr	r6, [r4, r6]
1000d700:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d702:	e7d5      	b.n	1000d6b0 <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d704:	220f      	movs	r2, #15
1000d706:	4010      	ands	r0, r2
1000d708:	3a0e      	subs	r2, #14
1000d70a:	4082      	lsls	r2, r0
1000d70c:	00dd      	lsls	r5, r3, #3
1000d70e:	4c0b      	ldr	r4, [pc, #44]	; (1000d73c <gpio_register_callback+0xbc>)
1000d710:	18ee      	adds	r6, r5, r3
1000d712:	00f6      	lsls	r6, r6, #3
1000d714:	59a1      	ldr	r1, [r4, r6]
1000d716:	b297      	uxth	r7, r2
1000d718:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000d71a:	59a6      	ldr	r6, [r4, r6]
1000d71c:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d71e:	e7c7      	b.n	1000d6b0 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d720:	270f      	movs	r7, #15
1000d722:	4038      	ands	r0, r7
1000d724:	4082      	lsls	r2, r0
1000d726:	00dd      	lsls	r5, r3, #3
1000d728:	4c04      	ldr	r4, [pc, #16]	; (1000d73c <gpio_register_callback+0xbc>)
1000d72a:	18ee      	adds	r6, r5, r3
1000d72c:	00f6      	lsls	r6, r6, #3
1000d72e:	59a1      	ldr	r1, [r4, r6]
1000d730:	b297      	uxth	r7, r2
1000d732:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d734:	59a6      	ldr	r6, [r4, r6]
1000d736:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d738:	e7ba      	b.n	1000d6b0 <gpio_register_callback+0x30>
1000d73a:	46c0      	nop			; (mov r8, r8)
1000d73c:	10019c40 	.word	0x10019c40

1000d740 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000d740:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d742:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d744:	280f      	cmp	r0, #15
1000d746:	d91b      	bls.n	1000d780 <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000d748:	281f      	cmp	r0, #31
1000d74a:	d914      	bls.n	1000d776 <gpio_enable_callback+0x36>
1000d74c:	4b0f      	ldr	r3, [pc, #60]	; (1000d78c <gpio_enable_callback+0x4c>)
1000d74e:	0492      	lsls	r2, r2, #18
1000d750:	601a      	str	r2, [r3, #0]
1000d752:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d754:	220f      	movs	r2, #15
1000d756:	4010      	ands	r0, r2
1000d758:	3a0e      	subs	r2, #14
1000d75a:	4082      	lsls	r2, r0
1000d75c:	00d9      	lsls	r1, r3, #3
1000d75e:	4c0c      	ldr	r4, [pc, #48]	; (1000d790 <gpio_enable_callback+0x50>)
1000d760:	18cb      	adds	r3, r1, r3
1000d762:	00db      	lsls	r3, r3, #3
1000d764:	18e1      	adds	r1, r4, r3
1000d766:	3146      	adds	r1, #70	; 0x46
1000d768:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d76a:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d76c:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d76e:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d770:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d772:	841a      	strh	r2, [r3, #32]
}
1000d774:	bd10      	pop	{r4, pc}
1000d776:	4b05      	ldr	r3, [pc, #20]	; (1000d78c <gpio_enable_callback+0x4c>)
1000d778:	0452      	lsls	r2, r2, #17
1000d77a:	601a      	str	r2, [r3, #0]
1000d77c:	2301      	movs	r3, #1
1000d77e:	e7e9      	b.n	1000d754 <gpio_enable_callback+0x14>
1000d780:	4b02      	ldr	r3, [pc, #8]	; (1000d78c <gpio_enable_callback+0x4c>)
1000d782:	0412      	lsls	r2, r2, #16
1000d784:	601a      	str	r2, [r3, #0]
1000d786:	2300      	movs	r3, #0
1000d788:	e7e4      	b.n	1000d754 <gpio_enable_callback+0x14>
1000d78a:	46c0      	nop			; (mov r8, r8)
1000d78c:	e000e100 	.word	0xe000e100
1000d790:	10019c40 	.word	0x10019c40

1000d794 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000d794:	4a11      	ldr	r2, [pc, #68]	; (1000d7dc <gpio_init+0x48>)
1000d796:	b510      	push	{r4, lr}
1000d798:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000d79a:	2100      	movs	r1, #0
1000d79c:	2000      	movs	r0, #0
1000d79e:	34d8      	adds	r4, #216	; 0xd8
1000d7a0:	0013      	movs	r3, r2
1000d7a2:	3b40      	subs	r3, #64	; 0x40
1000d7a4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000d7a6:	429a      	cmp	r2, r3
1000d7a8:	d1fc      	bne.n	1000d7a4 <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000d7aa:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000d7ac:	8010      	strh	r0, [r2, #0]
1000d7ae:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000d7b0:	42a2      	cmp	r2, r4
1000d7b2:	d1f5      	bne.n	1000d7a0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d7b4:	4b0a      	ldr	r3, [pc, #40]	; (1000d7e0 <gpio_init+0x4c>)
1000d7b6:	4a0b      	ldr	r2, [pc, #44]	; (1000d7e4 <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d7b8:	490b      	ldr	r1, [pc, #44]	; (1000d7e8 <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d7ba:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000d7bc:	4a0b      	ldr	r2, [pc, #44]	; (1000d7ec <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d7be:	4c0c      	ldr	r4, [pc, #48]	; (1000d7f0 <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000d7c0:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000d7c2:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d7c4:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d7c6:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d7c8:	490a      	ldr	r1, [pc, #40]	; (1000d7f4 <gpio_init+0x60>)
1000d7ca:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000d7cc:	490a      	ldr	r1, [pc, #40]	; (1000d7f8 <gpio_init+0x64>)
1000d7ce:	2028      	movs	r0, #40	; 0x28
1000d7d0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000d7d2:	490a      	ldr	r1, [pc, #40]	; (1000d7fc <gpio_init+0x68>)
1000d7d4:	2029      	movs	r0, #41	; 0x29
1000d7d6:	47a0      	blx	r4
}
1000d7d8:	bd10      	pop	{r4, pc}
1000d7da:	46c0      	nop			; (mov r8, r8)
1000d7dc:	10019c84 	.word	0x10019c84
1000d7e0:	10019c40 	.word	0x10019c40
1000d7e4:	40010000 	.word	0x40010000
1000d7e8:	40013000 	.word	0x40013000
1000d7ec:	40011000 	.word	0x40011000
1000d7f0:	1000e191 	.word	0x1000e191
1000d7f4:	1000d2a9 	.word	0x1000d2a9
1000d7f8:	1000d301 	.word	0x1000d301
1000d7fc:	1000d385 	.word	0x1000d385

1000d800 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d800:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d802:	464f      	mov	r7, r9
1000d804:	4646      	mov	r6, r8
1000d806:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000d808:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d80a:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d80c:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000d80e:	2d00      	cmp	r5, #0
1000d810:	d104      	bne.n	1000d81c <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000d812:	0018      	movs	r0, r3
1000d814:	bc0c      	pop	{r2, r3}
1000d816:	4690      	mov	r8, r2
1000d818:	4699      	mov	r9, r3
1000d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d81c:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000d81e:	6802      	ldr	r2, [r0, #0]
1000d820:	5d13      	ldrb	r3, [r2, r4]
1000d822:	07db      	lsls	r3, r3, #31
1000d824:	d4fc      	bmi.n	1000d820 <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d826:	2301      	movs	r3, #1
1000d828:	2434      	movs	r4, #52	; 0x34
1000d82a:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d82c:	3c14      	subs	r4, #20
1000d82e:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000d830:	2402      	movs	r4, #2
1000d832:	880b      	ldrh	r3, [r1, #0]
1000d834:	34ff      	adds	r4, #255	; 0xff
1000d836:	005b      	lsls	r3, r3, #1
1000d838:	4323      	orrs	r3, r4
1000d83a:	b29b      	uxth	r3, r3
1000d83c:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d83e:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000d840:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d842:	4698      	mov	r8, r3
1000d844:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000d846:	7b13      	ldrb	r3, [r2, #12]
1000d848:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d84a:	4218      	tst	r0, r3
1000d84c:	d006      	beq.n	1000d85c <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000d84e:	7910      	ldrb	r0, [r2, #4]
1000d850:	1c67      	adds	r7, r4, #1
1000d852:	4684      	mov	ip, r0
1000d854:	4666      	mov	r6, ip
1000d856:	6848      	ldr	r0, [r1, #4]
1000d858:	5506      	strb	r6, [r0, r4]
1000d85a:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000d85c:	42ac      	cmp	r4, r5
1000d85e:	d3f1      	bcc.n	1000d844 <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d860:	06db      	lsls	r3, r3, #27
1000d862:	d403      	bmi.n	1000d86c <_i2c_master_read_packet+0x6c>
1000d864:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d866:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d868:	4219      	tst	r1, r3
1000d86a:	d0fc      	beq.n	1000d866 <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d86c:	464b      	mov	r3, r9
1000d86e:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000d870:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d872:	2900      	cmp	r1, #0
1000d874:	d1cd      	bne.n	1000d812 <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d876:	3120      	adds	r1, #32
1000d878:	5453      	strb	r3, [r2, r1]
1000d87a:	e7ca      	b.n	1000d812 <_i2c_master_read_packet+0x12>

1000d87c <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d87c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d87e:	4657      	mov	r7, sl
1000d880:	464e      	mov	r6, r9
1000d882:	4645      	mov	r5, r8
1000d884:	b4e0      	push	{r5, r6, r7}
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000d886:	884b      	ldrh	r3, [r1, #2]
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d888:	4682      	mov	sl, r0
1000d88a:	4689      	mov	r9, r1
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000d88c:	4698      	mov	r8, r3
1000d88e:	2228      	movs	r2, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000d890:	6804      	ldr	r4, [r0, #0]
1000d892:	5ca3      	ldrb	r3, [r4, r2]
1000d894:	07db      	lsls	r3, r3, #31
1000d896:	d4fc      	bmi.n	1000d892 <_i2c_master_write_packet+0x16>
	uint16_t length = packet->data_length;

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d898:	2301      	movs	r3, #1
1000d89a:	2234      	movs	r2, #52	; 0x34
1000d89c:	54a3      	strb	r3, [r4, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d89e:	3a14      	subs	r2, #20
1000d8a0:	54a3      	strb	r3, [r4, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d8a2:	464b      	mov	r3, r9
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000d8a4:	2500      	movs	r5, #0
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d8a6:	2601      	movs	r6, #1

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d8a8:	881b      	ldrh	r3, [r3, #0]
1000d8aa:	32e0      	adds	r2, #224	; 0xe0
1000d8ac:	005b      	lsls	r3, r3, #1
1000d8ae:	4313      	orrs	r3, r2
1000d8b0:	b29b      	uxth	r3, r3
1000d8b2:	4f11      	ldr	r7, [pc, #68]	; (1000d8f8 <_i2c_master_write_packet+0x7c>)
1000d8b4:	8023      	strh	r3, [r4, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        printf(".");
1000d8b6:	202e      	movs	r0, #46	; 0x2e
1000d8b8:	47b8      	blx	r7
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d8ba:	7a23      	ldrb	r3, [r4, #8]
1000d8bc:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d8be:	421e      	tst	r6, r3
1000d8c0:	d005      	beq.n	1000d8ce <_i2c_master_write_packet+0x52>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000d8c2:	4649      	mov	r1, r9
1000d8c4:	6849      	ldr	r1, [r1, #4]
1000d8c6:	1c6a      	adds	r2, r5, #1
1000d8c8:	5d49      	ldrb	r1, [r1, r5]
1000d8ca:	b295      	uxth	r5, r2
1000d8cc:	8021      	strh	r1, [r4, #0]
		}
	} while (counter < length); 
1000d8ce:	4545      	cmp	r5, r8
1000d8d0:	d3f1      	bcc.n	1000d8b6 <_i2c_master_write_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d8d2:	06db      	lsls	r3, r3, #27
1000d8d4:	d403      	bmi.n	1000d8de <_i2c_master_write_packet+0x62>
1000d8d6:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000d8d8:	7a23      	ldrb	r3, [r4, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d8da:	421a      	tst	r2, r3
1000d8dc:	d0fc      	beq.n	1000d8d8 <_i2c_master_write_packet+0x5c>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000d8de:	4653      	mov	r3, sl
1000d8e0:	795b      	ldrb	r3, [r3, #5]
1000d8e2:	2b00      	cmp	r3, #0
1000d8e4:	d101      	bne.n	1000d8ea <_i2c_master_write_packet+0x6e>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d8e6:	2220      	movs	r2, #32
1000d8e8:	54a3      	strb	r3, [r4, r2]
	}

	return STATUS_OK;
}
1000d8ea:	2000      	movs	r0, #0
1000d8ec:	bc1c      	pop	{r2, r3, r4}
1000d8ee:	4690      	mov	r8, r2
1000d8f0:	4699      	mov	r9, r3
1000d8f2:	46a2      	mov	sl, r4
1000d8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8f6:	46c0      	nop			; (mov r8, r8)
1000d8f8:	100145f5 	.word	0x100145f5

1000d8fc <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d8fc:	2303      	movs	r3, #3
1000d8fe:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000d900:	330d      	adds	r3, #13
1000d902:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000d904:	3b08      	subs	r3, #8
1000d906:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000d908:	3301      	adds	r3, #1
1000d90a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d90c:	3b07      	subs	r3, #7
1000d90e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d910:	6103      	str	r3, [r0, #16]
}
1000d912:	4770      	bx	lr

1000d914 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000d914:	b570      	push	{r4, r5, r6, lr}
1000d916:	0015      	movs	r5, r2
1000d918:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d91a:	6001      	str	r1, [r0, #0]
1000d91c:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d91e:	2d00      	cmp	r5, #0
1000d920:	d00d      	beq.n	1000d93e <i2c_master_init+0x2a>
1000d922:	5c8b      	ldrb	r3, [r1, r2]
1000d924:	07db      	lsls	r3, r3, #31
1000d926:	0fdb      	lsrs	r3, r3, #31
1000d928:	b2db      	uxtb	r3, r3
1000d92a:	2b00      	cmp	r3, #0
1000d92c:	d1f9      	bne.n	1000d922 <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d92e:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000d930:	6823      	ldr	r3, [r4, #0]
1000d932:	4a0f      	ldr	r2, [pc, #60]	; (1000d970 <i2c_master_init+0x5c>)
1000d934:	4293      	cmp	r3, r2
1000d936:	d017      	beq.n	1000d968 <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000d938:	4a0e      	ldr	r2, [pc, #56]	; (1000d974 <i2c_master_init+0x60>)
1000d93a:	4293      	cmp	r3, r2
1000d93c:	d001      	beq.n	1000d942 <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d93e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000d940:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d942:	2019      	movs	r0, #25
1000d944:	4b0c      	ldr	r3, [pc, #48]	; (1000d978 <i2c_master_init+0x64>)
1000d946:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d948:	8929      	ldrh	r1, [r5, #8]
1000d94a:	7928      	ldrb	r0, [r5, #4]
1000d94c:	4e0b      	ldr	r6, [pc, #44]	; (1000d97c <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000d94e:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d950:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d952:	7b28      	ldrb	r0, [r5, #12]
1000d954:	8a29      	ldrh	r1, [r5, #16]
1000d956:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d958:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000d95a:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d95c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d95e:	886b      	ldrh	r3, [r5, #2]
1000d960:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d962:	2301      	movs	r3, #1
1000d964:	7723      	strb	r3, [r4, #28]
1000d966:	e7eb      	b.n	1000d940 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d968:	4b03      	ldr	r3, [pc, #12]	; (1000d978 <i2c_master_init+0x64>)
1000d96a:	2003      	movs	r0, #3
1000d96c:	4798      	blx	r3
1000d96e:	e7eb      	b.n	1000d948 <i2c_master_init+0x34>
1000d970:	40003000 	.word	0x40003000
1000d974:	40003400 	.word	0x40003400
1000d978:	1000dd79 	.word	0x1000dd79
1000d97c:	1000d5a5 	.word	0x1000d5a5

1000d980 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d980:	0003      	movs	r3, r0
1000d982:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d984:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d986:	2b00      	cmp	r3, #0
1000d988:	d006      	beq.n	1000d998 <i2c_master_read_packet_wait+0x18>
1000d98a:	2900      	cmp	r1, #0
1000d98c:	d004      	beq.n	1000d998 <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d98e:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000d990:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d992:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000d994:	4b01      	ldr	r3, [pc, #4]	; (1000d99c <i2c_master_read_packet_wait+0x1c>)
1000d996:	4798      	blx	r3
}
1000d998:	bd10      	pop	{r4, pc}
1000d99a:	46c0      	nop			; (mov r8, r8)
1000d99c:	1000d801 	.word	0x1000d801

1000d9a0 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d9a0:	0003      	movs	r3, r0
1000d9a2:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d9a4:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d9a6:	2b00      	cmp	r3, #0
1000d9a8:	d006      	beq.n	1000d9b8 <i2c_master_write_packet_wait+0x18>
1000d9aa:	2900      	cmp	r1, #0
1000d9ac:	d004      	beq.n	1000d9b8 <i2c_master_write_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d9ae:	2200      	movs	r2, #0

	return _i2c_master_write_packet(module, packet);
1000d9b0:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d9b2:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000d9b4:	4b01      	ldr	r3, [pc, #4]	; (1000d9bc <i2c_master_write_packet_wait+0x1c>)
1000d9b6:	4798      	blx	r3
}
1000d9b8:	bd10      	pop	{r4, pc}
1000d9ba:	46c0      	nop			; (mov r8, r8)
1000d9bc:	1000d87d 	.word	0x1000d87d

1000d9c0 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d9c0:	0003      	movs	r3, r0
1000d9c2:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d9c4:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d9c6:	2b00      	cmp	r3, #0
1000d9c8:	d006      	beq.n	1000d9d8 <i2c_master_write_packet_wait_no_stop+0x18>
1000d9ca:	2900      	cmp	r1, #0
1000d9cc:	d004      	beq.n	1000d9d8 <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d9ce:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000d9d0:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d9d2:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000d9d4:	4b01      	ldr	r3, [pc, #4]	; (1000d9dc <i2c_master_write_packet_wait_no_stop+0x1c>)
1000d9d6:	4798      	blx	r3
}
1000d9d8:	bd10      	pop	{r4, pc}
1000d9da:	46c0      	nop			; (mov r8, r8)
1000d9dc:	1000d87d 	.word	0x1000d87d

1000d9e0 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000d9e0:	2801      	cmp	r0, #1
1000d9e2:	d021      	beq.n	1000da28 <system_clock_config+0x48>
1000d9e4:	2800      	cmp	r0, #0
1000d9e6:	d016      	beq.n	1000da16 <system_clock_config+0x36>
1000d9e8:	2802      	cmp	r0, #2
1000d9ea:	d112      	bne.n	1000da12 <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d9ec:	200c      	movs	r0, #12
1000d9ee:	4a18      	ldr	r2, [pc, #96]	; (1000da50 <system_clock_config+0x70>)
1000d9f0:	6993      	ldr	r3, [r2, #24]
1000d9f2:	4383      	bics	r3, r0
1000d9f4:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d9f6:	4a17      	ldr	r2, [pc, #92]	; (1000da54 <system_clock_config+0x74>)
1000d9f8:	4b17      	ldr	r3, [pc, #92]	; (1000da58 <system_clock_config+0x78>)
1000d9fa:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d9fc:	2003      	movs	r0, #3
1000d9fe:	4b14      	ldr	r3, [pc, #80]	; (1000da50 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da00:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000da02:	699a      	ldr	r2, [r3, #24]
1000da04:	4382      	bics	r2, r0
1000da06:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da08:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000da0a:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da0c:	4311      	orrs	r1, r2
1000da0e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000da10:	e000      	b.n	1000da14 <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000da12:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000da14:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da16:	230c      	movs	r3, #12
1000da18:	4a0d      	ldr	r2, [pc, #52]	; (1000da50 <system_clock_config+0x70>)
1000da1a:	6990      	ldr	r0, [r2, #24]
1000da1c:	4303      	orrs	r3, r0
1000da1e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000da20:	4a0c      	ldr	r2, [pc, #48]	; (1000da54 <system_clock_config+0x74>)
1000da22:	4b0d      	ldr	r3, [pc, #52]	; (1000da58 <system_clock_config+0x78>)
1000da24:	601a      	str	r2, [r3, #0]
			break;
1000da26:	e7e9      	b.n	1000d9fc <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da28:	2208      	movs	r2, #8
1000da2a:	4b09      	ldr	r3, [pc, #36]	; (1000da50 <system_clock_config+0x70>)
1000da2c:	6998      	ldr	r0, [r3, #24]
1000da2e:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000da30:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000da32:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000da34:	699a      	ldr	r2, [r3, #24]
1000da36:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000da38:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000da3a:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000da3c:	4a07      	ldr	r2, [pc, #28]	; (1000da5c <system_clock_config+0x7c>)
1000da3e:	0300      	lsls	r0, r0, #12
1000da40:	6853      	ldr	r3, [r2, #4]
1000da42:	4303      	orrs	r3, r0
1000da44:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000da46:	4a06      	ldr	r2, [pc, #24]	; (1000da60 <system_clock_config+0x80>)
1000da48:	4b03      	ldr	r3, [pc, #12]	; (1000da58 <system_clock_config+0x78>)
1000da4a:	601a      	str	r2, [r3, #0]
			break;
1000da4c:	e7d6      	b.n	1000d9fc <system_clock_config+0x1c>
1000da4e:	46c0      	nop			; (mov r8, r8)
1000da50:	4000b000 	.word	0x4000b000
1000da54:	018cba80 	.word	0x018cba80
1000da58:	10019d18 	.word	0x10019d18
1000da5c:	4000f000 	.word	0x4000f000
1000da60:	001e8480 	.word	0x001e8480

1000da64 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000da64:	4b01      	ldr	r3, [pc, #4]	; (1000da6c <system_clock_get_value+0x8>)
1000da66:	6818      	ldr	r0, [r3, #0]
}
1000da68:	4770      	bx	lr
1000da6a:	46c0      	nop			; (mov r8, r8)
1000da6c:	10019d18 	.word	0x10019d18

1000da70 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000da70:	b500      	push	{lr}
	switch (peripheral) {
1000da72:	2835      	cmp	r0, #53	; 0x35
1000da74:	d900      	bls.n	1000da78 <system_clock_peripheral_enable+0x8>
1000da76:	e16d      	b.n	1000dd54 <system_clock_peripheral_enable+0x2e4>
1000da78:	4bb7      	ldr	r3, [pc, #732]	; (1000dd58 <system_clock_peripheral_enable+0x2e8>)
1000da7a:	0080      	lsls	r0, r0, #2
1000da7c:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000da7e:	4ab7      	ldr	r2, [pc, #732]	; (1000dd5c <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000da80:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000da82:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da84:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000da86:	7d11      	ldrb	r1, [r2, #20]
1000da88:	430b      	orrs	r3, r1
1000da8a:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000da8c:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000da8e:	2301      	movs	r3, #1
1000da90:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da92:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000da94:	430b      	orrs	r3, r1
1000da96:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000da98:	e7f8      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000da9a:	2180      	movs	r1, #128	; 0x80
1000da9c:	6913      	ldr	r3, [r2, #16]
1000da9e:	0409      	lsls	r1, r1, #16
1000daa0:	430b      	orrs	r3, r1
1000daa2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000daa6:	e7f1      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000daa8:	2180      	movs	r1, #128	; 0x80
1000daaa:	6913      	ldr	r3, [r2, #16]
1000daac:	03c9      	lsls	r1, r1, #15
1000daae:	430b      	orrs	r3, r1
1000dab0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dab2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000dab4:	e7ea      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dab6:	2180      	movs	r1, #128	; 0x80
1000dab8:	6913      	ldr	r3, [r2, #16]
1000daba:	0389      	lsls	r1, r1, #14
1000dabc:	430b      	orrs	r3, r1
1000dabe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000dac2:	e7e3      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dac4:	2180      	movs	r1, #128	; 0x80
1000dac6:	6913      	ldr	r3, [r2, #16]
1000dac8:	0349      	lsls	r1, r1, #13
1000daca:	430b      	orrs	r3, r1
1000dacc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dace:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000dad0:	e7dc      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dad2:	2180      	movs	r1, #128	; 0x80
1000dad4:	6913      	ldr	r3, [r2, #16]
1000dad6:	0309      	lsls	r1, r1, #12
1000dad8:	430b      	orrs	r3, r1
1000dada:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dadc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000dade:	e7d5      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dae0:	2180      	movs	r1, #128	; 0x80
1000dae2:	6913      	ldr	r3, [r2, #16]
1000dae4:	02c9      	lsls	r1, r1, #11
1000dae6:	430b      	orrs	r3, r1
1000dae8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000daec:	e7ce      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000daee:	2180      	movs	r1, #128	; 0x80
1000daf0:	6913      	ldr	r3, [r2, #16]
1000daf2:	0289      	lsls	r1, r1, #10
1000daf4:	430b      	orrs	r3, r1
1000daf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000dafa:	e7c7      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dafc:	2180      	movs	r1, #128	; 0x80
1000dafe:	6913      	ldr	r3, [r2, #16]
1000db00:	0249      	lsls	r1, r1, #9
1000db02:	430b      	orrs	r3, r1
1000db04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000db08:	e7c0      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db0a:	2180      	movs	r1, #128	; 0x80
1000db0c:	6913      	ldr	r3, [r2, #16]
1000db0e:	0209      	lsls	r1, r1, #8
1000db10:	430b      	orrs	r3, r1
1000db12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000db16:	e7b9      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db18:	2180      	movs	r1, #128	; 0x80
1000db1a:	6913      	ldr	r3, [r2, #16]
1000db1c:	01c9      	lsls	r1, r1, #7
1000db1e:	430b      	orrs	r3, r1
1000db20:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000db24:	e7b2      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db26:	2180      	movs	r1, #128	; 0x80
1000db28:	6913      	ldr	r3, [r2, #16]
1000db2a:	0189      	lsls	r1, r1, #6
1000db2c:	430b      	orrs	r3, r1
1000db2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000db32:	e7ab      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db34:	2180      	movs	r1, #128	; 0x80
1000db36:	6913      	ldr	r3, [r2, #16]
1000db38:	0149      	lsls	r1, r1, #5
1000db3a:	430b      	orrs	r3, r1
1000db3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000db40:	e7a4      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db42:	2180      	movs	r1, #128	; 0x80
1000db44:	6913      	ldr	r3, [r2, #16]
1000db46:	0109      	lsls	r1, r1, #4
1000db48:	430b      	orrs	r3, r1
1000db4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000db4e:	e79d      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db50:	2180      	movs	r1, #128	; 0x80
1000db52:	6913      	ldr	r3, [r2, #16]
1000db54:	00c9      	lsls	r1, r1, #3
1000db56:	430b      	orrs	r3, r1
1000db58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000db5c:	e796      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db5e:	2180      	movs	r1, #128	; 0x80
1000db60:	6913      	ldr	r3, [r2, #16]
1000db62:	0089      	lsls	r1, r1, #2
1000db64:	430b      	orrs	r3, r1
1000db66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000db6a:	e78f      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db6c:	2180      	movs	r1, #128	; 0x80
1000db6e:	6913      	ldr	r3, [r2, #16]
1000db70:	0049      	lsls	r1, r1, #1
1000db72:	430b      	orrs	r3, r1
1000db74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000db78:	e788      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db7a:	2380      	movs	r3, #128	; 0x80
1000db7c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db7e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db80:	430b      	orrs	r3, r1
1000db82:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000db84:	e782      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db86:	2340      	movs	r3, #64	; 0x40
1000db88:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db8a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db8c:	430b      	orrs	r3, r1
1000db8e:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000db90:	e77c      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db92:	2320      	movs	r3, #32
1000db94:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db96:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db98:	430b      	orrs	r3, r1
1000db9a:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000db9c:	e776      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000db9e:	2310      	movs	r3, #16
1000dba0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dba2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dba4:	430b      	orrs	r3, r1
1000dba6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000dba8:	e770      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbaa:	2308      	movs	r3, #8
1000dbac:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbae:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbb0:	430b      	orrs	r3, r1
1000dbb2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000dbb4:	e76a      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbb6:	2304      	movs	r3, #4
1000dbb8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbba:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbbc:	430b      	orrs	r3, r1
1000dbbe:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000dbc0:	e764      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbc2:	2302      	movs	r3, #2
1000dbc4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbc6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbc8:	430b      	orrs	r3, r1
1000dbca:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000dbcc:	e75e      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbce:	2301      	movs	r3, #1
1000dbd0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbd2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000dbd4:	430b      	orrs	r3, r1
1000dbd6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000dbd8:	e758      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dbda:	2180      	movs	r1, #128	; 0x80
1000dbdc:	68d3      	ldr	r3, [r2, #12]
1000dbde:	05c9      	lsls	r1, r1, #23
1000dbe0:	430b      	orrs	r3, r1
1000dbe2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbe4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000dbe6:	e751      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dbe8:	2180      	movs	r1, #128	; 0x80
1000dbea:	68d3      	ldr	r3, [r2, #12]
1000dbec:	0589      	lsls	r1, r1, #22
1000dbee:	430b      	orrs	r3, r1
1000dbf0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbf2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000dbf4:	e74a      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dbf6:	2180      	movs	r1, #128	; 0x80
1000dbf8:	68d3      	ldr	r3, [r2, #12]
1000dbfa:	0549      	lsls	r1, r1, #21
1000dbfc:	430b      	orrs	r3, r1
1000dbfe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000dc02:	e743      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc04:	2180      	movs	r1, #128	; 0x80
1000dc06:	68d3      	ldr	r3, [r2, #12]
1000dc08:	0509      	lsls	r1, r1, #20
1000dc0a:	430b      	orrs	r3, r1
1000dc0c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000dc10:	e73c      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc12:	2180      	movs	r1, #128	; 0x80
1000dc14:	68d3      	ldr	r3, [r2, #12]
1000dc16:	04c9      	lsls	r1, r1, #19
1000dc18:	430b      	orrs	r3, r1
1000dc1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000dc1e:	e735      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc20:	2180      	movs	r1, #128	; 0x80
1000dc22:	68d3      	ldr	r3, [r2, #12]
1000dc24:	0489      	lsls	r1, r1, #18
1000dc26:	430b      	orrs	r3, r1
1000dc28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000dc2c:	e72e      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc2e:	2180      	movs	r1, #128	; 0x80
1000dc30:	68d3      	ldr	r3, [r2, #12]
1000dc32:	0449      	lsls	r1, r1, #17
1000dc34:	430b      	orrs	r3, r1
1000dc36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000dc3a:	e727      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc3c:	2180      	movs	r1, #128	; 0x80
1000dc3e:	68d3      	ldr	r3, [r2, #12]
1000dc40:	0409      	lsls	r1, r1, #16
1000dc42:	430b      	orrs	r3, r1
1000dc44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000dc48:	e720      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc4a:	2180      	movs	r1, #128	; 0x80
1000dc4c:	68d3      	ldr	r3, [r2, #12]
1000dc4e:	03c9      	lsls	r1, r1, #15
1000dc50:	430b      	orrs	r3, r1
1000dc52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000dc56:	e719      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc58:	2180      	movs	r1, #128	; 0x80
1000dc5a:	68d3      	ldr	r3, [r2, #12]
1000dc5c:	0389      	lsls	r1, r1, #14
1000dc5e:	430b      	orrs	r3, r1
1000dc60:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000dc64:	e712      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc66:	2180      	movs	r1, #128	; 0x80
1000dc68:	68d3      	ldr	r3, [r2, #12]
1000dc6a:	0349      	lsls	r1, r1, #13
1000dc6c:	430b      	orrs	r3, r1
1000dc6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000dc72:	e70b      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc74:	2180      	movs	r1, #128	; 0x80
1000dc76:	68d3      	ldr	r3, [r2, #12]
1000dc78:	0309      	lsls	r1, r1, #12
1000dc7a:	430b      	orrs	r3, r1
1000dc7c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000dc80:	e704      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc82:	2180      	movs	r1, #128	; 0x80
1000dc84:	68d3      	ldr	r3, [r2, #12]
1000dc86:	02c9      	lsls	r1, r1, #11
1000dc88:	430b      	orrs	r3, r1
1000dc8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000dc8e:	e6fd      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc90:	2180      	movs	r1, #128	; 0x80
1000dc92:	68d3      	ldr	r3, [r2, #12]
1000dc94:	0289      	lsls	r1, r1, #10
1000dc96:	430b      	orrs	r3, r1
1000dc98:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000dc9c:	e6f6      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dc9e:	2180      	movs	r1, #128	; 0x80
1000dca0:	68d3      	ldr	r3, [r2, #12]
1000dca2:	0249      	lsls	r1, r1, #9
1000dca4:	430b      	orrs	r3, r1
1000dca6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dca8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000dcaa:	e6ef      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dcac:	2180      	movs	r1, #128	; 0x80
1000dcae:	68d3      	ldr	r3, [r2, #12]
1000dcb0:	0209      	lsls	r1, r1, #8
1000dcb2:	430b      	orrs	r3, r1
1000dcb4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000dcb8:	e6e8      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dcba:	2180      	movs	r1, #128	; 0x80
1000dcbc:	68d3      	ldr	r3, [r2, #12]
1000dcbe:	01c9      	lsls	r1, r1, #7
1000dcc0:	430b      	orrs	r3, r1
1000dcc2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000dcc6:	e6e1      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dcc8:	2180      	movs	r1, #128	; 0x80
1000dcca:	68d3      	ldr	r3, [r2, #12]
1000dccc:	0189      	lsls	r1, r1, #6
1000dcce:	430b      	orrs	r3, r1
1000dcd0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000dcd4:	e6da      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dcd6:	2180      	movs	r1, #128	; 0x80
1000dcd8:	68d3      	ldr	r3, [r2, #12]
1000dcda:	0149      	lsls	r1, r1, #5
1000dcdc:	430b      	orrs	r3, r1
1000dcde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dce0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000dce2:	e6d3      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dce4:	2180      	movs	r1, #128	; 0x80
1000dce6:	68d3      	ldr	r3, [r2, #12]
1000dce8:	0109      	lsls	r1, r1, #4
1000dcea:	430b      	orrs	r3, r1
1000dcec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000dcf0:	e6cc      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dcf2:	2180      	movs	r1, #128	; 0x80
1000dcf4:	68d3      	ldr	r3, [r2, #12]
1000dcf6:	0049      	lsls	r1, r1, #1
1000dcf8:	430b      	orrs	r3, r1
1000dcfa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000dcfe:	e6c5      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd00:	2380      	movs	r3, #128	; 0x80
1000dd02:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd04:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd06:	430b      	orrs	r3, r1
1000dd08:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000dd0a:	e6bf      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd0c:	2320      	movs	r3, #32
1000dd0e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd10:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd12:	430b      	orrs	r3, r1
1000dd14:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000dd16:	e6b9      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd18:	2310      	movs	r3, #16
1000dd1a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd1c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd1e:	430b      	orrs	r3, r1
1000dd20:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000dd22:	e6b3      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd24:	2308      	movs	r3, #8
1000dd26:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd28:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd2a:	430b      	orrs	r3, r1
1000dd2c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000dd2e:	e6ad      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd30:	2304      	movs	r3, #4
1000dd32:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd34:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd36:	430b      	orrs	r3, r1
1000dd38:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000dd3a:	e6a7      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd3c:	2302      	movs	r3, #2
1000dd3e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd40:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000dd42:	430b      	orrs	r3, r1
1000dd44:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000dd46:	e6a1      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000dd48:	2304      	movs	r3, #4
1000dd4a:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd4c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000dd4e:	430b      	orrs	r3, r1
1000dd50:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000dd52:	e69b      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000dd54:	2017      	movs	r0, #23
1000dd56:	e699      	b.n	1000da8c <system_clock_peripheral_enable+0x1c>
1000dd58:	100170cc 	.word	0x100170cc
1000dd5c:	4000b000 	.word	0x4000b000

1000dd60 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd60:	2201      	movs	r2, #1
1000dd62:	4b04      	ldr	r3, [pc, #16]	; (1000dd74 <system_global_reset+0x14>)
1000dd64:	6859      	ldr	r1, [r3, #4]
1000dd66:	4391      	bics	r1, r2
1000dd68:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd6a:	6859      	ldr	r1, [r3, #4]
1000dd6c:	430a      	orrs	r2, r1
1000dd6e:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000dd70:	4770      	bx	lr
1000dd72:	46c0      	nop			; (mov r8, r8)
1000dd74:	4000b000 	.word	0x4000b000

1000dd78 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000dd78:	b500      	push	{lr}
	switch (peripheral) {
1000dd7a:	2843      	cmp	r0, #67	; 0x43
1000dd7c:	d900      	bls.n	1000dd80 <system_peripheral_reset+0x8>
1000dd7e:	e200      	b.n	1000e182 <system_peripheral_reset+0x40a>
1000dd80:	4bd5      	ldr	r3, [pc, #852]	; (1000e0d8 <system_peripheral_reset+0x360>)
1000dd82:	0080      	lsls	r0, r0, #2
1000dd84:	581b      	ldr	r3, [r3, r0]
1000dd86:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dd88:	4bd4      	ldr	r3, [pc, #848]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dd8a:	4ad5      	ldr	r2, [pc, #852]	; (1000e0e0 <system_peripheral_reset+0x368>)
1000dd8c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd8e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dd90:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dd92:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dd94:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dd96:	891a      	ldrh	r2, [r3, #8]
1000dd98:	0109      	lsls	r1, r1, #4
1000dd9a:	430a      	orrs	r2, r1
1000dd9c:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000dd9e:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dda0:	4bce      	ldr	r3, [pc, #824]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dda2:	4ad0      	ldr	r2, [pc, #832]	; (1000e0e4 <system_peripheral_reset+0x36c>)
1000dda4:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dda6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dda8:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ddaa:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ddac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ddae:	891a      	ldrh	r2, [r3, #8]
1000ddb0:	0049      	lsls	r1, r1, #1
1000ddb2:	430a      	orrs	r2, r1
1000ddb4:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000ddb6:	e7f2      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ddb8:	2180      	movs	r1, #128	; 0x80
1000ddba:	4bc8      	ldr	r3, [pc, #800]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddbc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ddbe:	891a      	ldrh	r2, [r3, #8]
1000ddc0:	438a      	bics	r2, r1
1000ddc2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ddc4:	2280      	movs	r2, #128	; 0x80
1000ddc6:	8919      	ldrh	r1, [r3, #8]
1000ddc8:	430a      	orrs	r2, r1
1000ddca:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000ddcc:	e7e7      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ddce:	2104      	movs	r1, #4
1000ddd0:	4bc2      	ldr	r3, [pc, #776]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddd2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ddd4:	891a      	ldrh	r2, [r3, #8]
1000ddd6:	438a      	bics	r2, r1
1000ddd8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ddda:	2204      	movs	r2, #4
1000dddc:	8919      	ldrh	r1, [r3, #8]
1000ddde:	430a      	orrs	r2, r1
1000dde0:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000dde2:	e7dc      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dde4:	4bbd      	ldr	r3, [pc, #756]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dde6:	4ac0      	ldr	r2, [pc, #768]	; (1000e0e8 <system_peripheral_reset+0x370>)
1000dde8:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ddea:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddec:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddee:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ddf2:	685a      	ldr	r2, [r3, #4]
1000ddf4:	0449      	lsls	r1, r1, #17
1000ddf6:	430a      	orrs	r2, r1
1000ddf8:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000ddfa:	e7d0      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ddfc:	4bb7      	ldr	r3, [pc, #732]	; (1000e0dc <system_peripheral_reset+0x364>)
1000ddfe:	4abb      	ldr	r2, [pc, #748]	; (1000e0ec <system_peripheral_reset+0x374>)
1000de00:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de02:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de04:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de06:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de0a:	685a      	ldr	r2, [r3, #4]
1000de0c:	0409      	lsls	r1, r1, #16
1000de0e:	430a      	orrs	r2, r1
1000de10:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000de12:	e7c4      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de14:	4bb1      	ldr	r3, [pc, #708]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de16:	4ab6      	ldr	r2, [pc, #728]	; (1000e0f0 <system_peripheral_reset+0x378>)
1000de18:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de1a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de1c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de1e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de22:	685a      	ldr	r2, [r3, #4]
1000de24:	03c9      	lsls	r1, r1, #15
1000de26:	430a      	orrs	r2, r1
1000de28:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000de2a:	e7b8      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de2c:	4bab      	ldr	r3, [pc, #684]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de2e:	4ab1      	ldr	r2, [pc, #708]	; (1000e0f4 <system_peripheral_reset+0x37c>)
1000de30:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de32:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de34:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de36:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de3a:	685a      	ldr	r2, [r3, #4]
1000de3c:	0389      	lsls	r1, r1, #14
1000de3e:	430a      	orrs	r2, r1
1000de40:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000de42:	e7ac      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de44:	4ba5      	ldr	r3, [pc, #660]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de46:	4aac      	ldr	r2, [pc, #688]	; (1000e0f8 <system_peripheral_reset+0x380>)
1000de48:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de4a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de4c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de4e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de52:	685a      	ldr	r2, [r3, #4]
1000de54:	0309      	lsls	r1, r1, #12
1000de56:	430a      	orrs	r2, r1
1000de58:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000de5a:	e7a0      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de5c:	4b9f      	ldr	r3, [pc, #636]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de5e:	4aa7      	ldr	r2, [pc, #668]	; (1000e0fc <system_peripheral_reset+0x384>)
1000de60:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de62:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de64:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de66:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de6a:	685a      	ldr	r2, [r3, #4]
1000de6c:	0089      	lsls	r1, r1, #2
1000de6e:	430a      	orrs	r2, r1
1000de70:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000de72:	e794      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de74:	2280      	movs	r2, #128	; 0x80
1000de76:	4b99      	ldr	r3, [pc, #612]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de78:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de7a:	4391      	bics	r1, r2
1000de7c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de7e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000de80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000de82:	430a      	orrs	r2, r1
1000de84:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000de86:	e78a      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de88:	4b94      	ldr	r3, [pc, #592]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de8a:	2220      	movs	r2, #32
1000de8c:	6859      	ldr	r1, [r3, #4]
1000de8e:	e7f4      	b.n	1000de7a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de90:	4b92      	ldr	r3, [pc, #584]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de92:	2208      	movs	r2, #8
1000de94:	6859      	ldr	r1, [r3, #4]
1000de96:	e7f0      	b.n	1000de7a <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000de98:	4b90      	ldr	r3, [pc, #576]	; (1000e0dc <system_peripheral_reset+0x364>)
1000de9a:	2202      	movs	r2, #2
1000de9c:	6859      	ldr	r1, [r3, #4]
1000de9e:	e7ec      	b.n	1000de7a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dea0:	2140      	movs	r1, #64	; 0x40
1000dea2:	4b8e      	ldr	r3, [pc, #568]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dea4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dea6:	891a      	ldrh	r2, [r3, #8]
1000dea8:	438a      	bics	r2, r1
1000deaa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000deac:	2240      	movs	r2, #64	; 0x40
1000deae:	8919      	ldrh	r1, [r3, #8]
1000deb0:	430a      	orrs	r2, r1
1000deb2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000deb4:	e773      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000deb6:	2120      	movs	r1, #32
1000deb8:	4b88      	ldr	r3, [pc, #544]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000deba:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000debc:	891a      	ldrh	r2, [r3, #8]
1000debe:	438a      	bics	r2, r1
1000dec0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dec2:	2220      	movs	r2, #32
1000dec4:	8919      	ldrh	r1, [r3, #8]
1000dec6:	430a      	orrs	r2, r1
1000dec8:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000deca:	e768      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000decc:	2110      	movs	r1, #16
1000dece:	4b83      	ldr	r3, [pc, #524]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ded0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ded2:	891a      	ldrh	r2, [r3, #8]
1000ded4:	438a      	bics	r2, r1
1000ded6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ded8:	2210      	movs	r2, #16
1000deda:	8919      	ldrh	r1, [r3, #8]
1000dedc:	430a      	orrs	r2, r1
1000dede:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000dee0:	e75d      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dee2:	2108      	movs	r1, #8
1000dee4:	4b7d      	ldr	r3, [pc, #500]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dee6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dee8:	891a      	ldrh	r2, [r3, #8]
1000deea:	438a      	bics	r2, r1
1000deec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000deee:	2208      	movs	r2, #8
1000def0:	8919      	ldrh	r1, [r3, #8]
1000def2:	430a      	orrs	r2, r1
1000def4:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000def6:	e752      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000def8:	4b78      	ldr	r3, [pc, #480]	; (1000e0dc <system_peripheral_reset+0x364>)
1000defa:	4a81      	ldr	r2, [pc, #516]	; (1000e100 <system_peripheral_reset+0x388>)
1000defc:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000defe:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000df00:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000df02:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000df04:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000df06:	891a      	ldrh	r2, [r3, #8]
1000df08:	00c9      	lsls	r1, r1, #3
1000df0a:	430a      	orrs	r2, r1
1000df0c:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000df0e:	e746      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000df10:	4b72      	ldr	r3, [pc, #456]	; (1000e0dc <system_peripheral_reset+0x364>)
1000df12:	4a7a      	ldr	r2, [pc, #488]	; (1000e0fc <system_peripheral_reset+0x384>)
1000df14:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df16:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000df18:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000df1a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000df1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000df1e:	891a      	ldrh	r2, [r3, #8]
1000df20:	0089      	lsls	r1, r1, #2
1000df22:	430a      	orrs	r2, r1
1000df24:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000df26:	e73a      	b.n	1000dd9e <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df28:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df2a:	4a6c      	ldr	r2, [pc, #432]	; (1000e0dc <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df2c:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df2e:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df30:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df32:	005b      	lsls	r3, r3, #1
1000df34:	085b      	lsrs	r3, r3, #1
1000df36:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df38:	6853      	ldr	r3, [r2, #4]
1000df3a:	430b      	orrs	r3, r1
1000df3c:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000df3e:	e72e      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df40:	4b66      	ldr	r3, [pc, #408]	; (1000e0dc <system_peripheral_reset+0x364>)
1000df42:	4a70      	ldr	r2, [pc, #448]	; (1000e104 <system_peripheral_reset+0x38c>)
1000df44:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df46:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df48:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df4a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df4e:	685a      	ldr	r2, [r3, #4]
1000df50:	05c9      	lsls	r1, r1, #23
1000df52:	430a      	orrs	r2, r1
1000df54:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000df56:	e722      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df58:	4b60      	ldr	r3, [pc, #384]	; (1000e0dc <system_peripheral_reset+0x364>)
1000df5a:	4a6b      	ldr	r2, [pc, #428]	; (1000e108 <system_peripheral_reset+0x390>)
1000df5c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df5e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df60:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df62:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df66:	685a      	ldr	r2, [r3, #4]
1000df68:	0589      	lsls	r1, r1, #22
1000df6a:	430a      	orrs	r2, r1
1000df6c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000df6e:	e716      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df70:	4b5a      	ldr	r3, [pc, #360]	; (1000e0dc <system_peripheral_reset+0x364>)
1000df72:	4a66      	ldr	r2, [pc, #408]	; (1000e10c <system_peripheral_reset+0x394>)
1000df74:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df76:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df78:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df7a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df7e:	685a      	ldr	r2, [r3, #4]
1000df80:	0549      	lsls	r1, r1, #21
1000df82:	430a      	orrs	r2, r1
1000df84:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000df86:	e70a      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df88:	4b54      	ldr	r3, [pc, #336]	; (1000e0dc <system_peripheral_reset+0x364>)
1000df8a:	4a61      	ldr	r2, [pc, #388]	; (1000e110 <system_peripheral_reset+0x398>)
1000df8c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000df8e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df90:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df92:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000df94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000df96:	685a      	ldr	r2, [r3, #4]
1000df98:	0349      	lsls	r1, r1, #13
1000df9a:	430a      	orrs	r2, r1
1000df9c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000df9e:	e6fe      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dfa0:	2102      	movs	r1, #2
1000dfa2:	4b4e      	ldr	r3, [pc, #312]	; (1000e0dc <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfa4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dfa6:	891a      	ldrh	r2, [r3, #8]
1000dfa8:	438a      	bics	r2, r1
1000dfaa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dfac:	2202      	movs	r2, #2
1000dfae:	8919      	ldrh	r1, [r3, #8]
1000dfb0:	430a      	orrs	r2, r1
1000dfb2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000dfb4:	e6f3      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfb6:	4b49      	ldr	r3, [pc, #292]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dfb8:	4a56      	ldr	r2, [pc, #344]	; (1000e114 <system_peripheral_reset+0x39c>)
1000dfba:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfbc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfbe:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfc0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfc2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfc4:	685a      	ldr	r2, [r3, #4]
1000dfc6:	0509      	lsls	r1, r1, #20
1000dfc8:	430a      	orrs	r2, r1
1000dfca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000dfcc:	e6e7      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfce:	4b43      	ldr	r3, [pc, #268]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dfd0:	4a51      	ldr	r2, [pc, #324]	; (1000e118 <system_peripheral_reset+0x3a0>)
1000dfd2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfd4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfd6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfd8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfda:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dfdc:	685a      	ldr	r2, [r3, #4]
1000dfde:	04c9      	lsls	r1, r1, #19
1000dfe0:	430a      	orrs	r2, r1
1000dfe2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000dfe4:	e6db      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfe6:	4b3d      	ldr	r3, [pc, #244]	; (1000e0dc <system_peripheral_reset+0x364>)
1000dfe8:	4a4c      	ldr	r2, [pc, #304]	; (1000e11c <system_peripheral_reset+0x3a4>)
1000dfea:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dfec:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dfee:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dff0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dff2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dff4:	685a      	ldr	r2, [r3, #4]
1000dff6:	0489      	lsls	r1, r1, #18
1000dff8:	430a      	orrs	r2, r1
1000dffa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000dffc:	e6cf      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dffe:	4b37      	ldr	r3, [pc, #220]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e000:	4a47      	ldr	r2, [pc, #284]	; (1000e120 <system_peripheral_reset+0x3a8>)
1000e002:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e004:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e006:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e008:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e00a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e00c:	685a      	ldr	r2, [r3, #4]
1000e00e:	02c9      	lsls	r1, r1, #11
1000e010:	430a      	orrs	r2, r1
1000e012:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000e014:	e6c3      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e016:	4b31      	ldr	r3, [pc, #196]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e018:	4a42      	ldr	r2, [pc, #264]	; (1000e124 <system_peripheral_reset+0x3ac>)
1000e01a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e01c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e01e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e020:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e022:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e024:	685a      	ldr	r2, [r3, #4]
1000e026:	0209      	lsls	r1, r1, #8
1000e028:	430a      	orrs	r2, r1
1000e02a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000e02c:	e6b7      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e02e:	4b2b      	ldr	r3, [pc, #172]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e030:	4a3d      	ldr	r2, [pc, #244]	; (1000e128 <system_peripheral_reset+0x3b0>)
1000e032:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e034:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e036:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e038:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e03a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e03c:	685a      	ldr	r2, [r3, #4]
1000e03e:	01c9      	lsls	r1, r1, #7
1000e040:	430a      	orrs	r2, r1
1000e042:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000e044:	e6ab      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e046:	4b25      	ldr	r3, [pc, #148]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e048:	4a38      	ldr	r2, [pc, #224]	; (1000e12c <system_peripheral_reset+0x3b4>)
1000e04a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e04c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e04e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e050:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e052:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e054:	685a      	ldr	r2, [r3, #4]
1000e056:	0189      	lsls	r1, r1, #6
1000e058:	430a      	orrs	r2, r1
1000e05a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000e05c:	e69f      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e05e:	4b1f      	ldr	r3, [pc, #124]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e060:	4a33      	ldr	r2, [pc, #204]	; (1000e130 <system_peripheral_reset+0x3b8>)
1000e062:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e064:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e066:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e068:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e06a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e06c:	685a      	ldr	r2, [r3, #4]
1000e06e:	0149      	lsls	r1, r1, #5
1000e070:	430a      	orrs	r2, r1
1000e072:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000e074:	e693      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e076:	4b19      	ldr	r3, [pc, #100]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e078:	4a2e      	ldr	r2, [pc, #184]	; (1000e134 <system_peripheral_reset+0x3bc>)
1000e07a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e07c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e07e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e080:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e082:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e084:	685a      	ldr	r2, [r3, #4]
1000e086:	0289      	lsls	r1, r1, #10
1000e088:	430a      	orrs	r2, r1
1000e08a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000e08c:	e687      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e08e:	4b13      	ldr	r3, [pc, #76]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e090:	4a29      	ldr	r2, [pc, #164]	; (1000e138 <system_peripheral_reset+0x3c0>)
1000e092:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e094:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e096:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e098:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e09a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e09c:	685a      	ldr	r2, [r3, #4]
1000e09e:	0249      	lsls	r1, r1, #9
1000e0a0:	430a      	orrs	r2, r1
1000e0a2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000e0a4:	e67b      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0a6:	4b0d      	ldr	r3, [pc, #52]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e0a8:	4a0d      	ldr	r2, [pc, #52]	; (1000e0e0 <system_peripheral_reset+0x368>)
1000e0aa:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0ac:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0ae:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0b0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0b2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0b4:	685a      	ldr	r2, [r3, #4]
1000e0b6:	0109      	lsls	r1, r1, #4
1000e0b8:	430a      	orrs	r2, r1
1000e0ba:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000e0bc:	e66f      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0be:	4b07      	ldr	r3, [pc, #28]	; (1000e0dc <system_peripheral_reset+0x364>)
1000e0c0:	4a0f      	ldr	r2, [pc, #60]	; (1000e100 <system_peripheral_reset+0x388>)
1000e0c2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e0c4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0c6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0c8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e0ca:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e0cc:	685a      	ldr	r2, [r3, #4]
1000e0ce:	00c9      	lsls	r1, r1, #3
1000e0d0:	430a      	orrs	r2, r1
1000e0d2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000e0d4:	e663      	b.n	1000dd9e <system_peripheral_reset+0x26>
1000e0d6:	46c0      	nop			; (mov r8, r8)
1000e0d8:	100171a4 	.word	0x100171a4
1000e0dc:	4000b000 	.word	0x4000b000
1000e0e0:	fffff7ff 	.word	0xfffff7ff
1000e0e4:	fffffeff 	.word	0xfffffeff
1000e0e8:	feffffff 	.word	0xfeffffff
1000e0ec:	ff7fffff 	.word	0xff7fffff
1000e0f0:	ffbfffff 	.word	0xffbfffff
1000e0f4:	ffdfffff 	.word	0xffdfffff
1000e0f8:	fff7ffff 	.word	0xfff7ffff
1000e0fc:	fffffdff 	.word	0xfffffdff
1000e100:	fffffbff 	.word	0xfffffbff
1000e104:	bfffffff 	.word	0xbfffffff
1000e108:	dfffffff 	.word	0xdfffffff
1000e10c:	efffffff 	.word	0xefffffff
1000e110:	ffefffff 	.word	0xffefffff
1000e114:	f7ffffff 	.word	0xf7ffffff
1000e118:	fbffffff 	.word	0xfbffffff
1000e11c:	fdffffff 	.word	0xfdffffff
1000e120:	fffbffff 	.word	0xfffbffff
1000e124:	ffff7fff 	.word	0xffff7fff
1000e128:	ffffbfff 	.word	0xffffbfff
1000e12c:	ffffdfff 	.word	0xffffdfff
1000e130:	ffffefff 	.word	0xffffefff
1000e134:	fffdffff 	.word	0xfffdffff
1000e138:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e13c:	2101      	movs	r1, #1
1000e13e:	4b12      	ldr	r3, [pc, #72]	; (1000e188 <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e140:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000e142:	891a      	ldrh	r2, [r3, #8]
1000e144:	438a      	bics	r2, r1
1000e146:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000e148:	2201      	movs	r2, #1
1000e14a:	8919      	ldrh	r1, [r3, #8]
1000e14c:	430a      	orrs	r2, r1
1000e14e:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000e150:	e625      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e152:	4b0d      	ldr	r3, [pc, #52]	; (1000e188 <system_peripheral_reset+0x410>)
1000e154:	4a0d      	ldr	r2, [pc, #52]	; (1000e18c <system_peripheral_reset+0x414>)
1000e156:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000e158:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e15a:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e15c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e15e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000e160:	685a      	ldr	r2, [r3, #4]
1000e162:	0049      	lsls	r1, r1, #1
1000e164:	430a      	orrs	r2, r1
1000e166:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000e168:	e619      	b.n	1000dd9e <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e16a:	4b07      	ldr	r3, [pc, #28]	; (1000e188 <system_peripheral_reset+0x410>)
1000e16c:	2240      	movs	r2, #64	; 0x40
1000e16e:	6859      	ldr	r1, [r3, #4]
1000e170:	e683      	b.n	1000de7a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e172:	4b05      	ldr	r3, [pc, #20]	; (1000e188 <system_peripheral_reset+0x410>)
1000e174:	2210      	movs	r2, #16
1000e176:	6859      	ldr	r1, [r3, #4]
1000e178:	e67f      	b.n	1000de7a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000e17a:	4b03      	ldr	r3, [pc, #12]	; (1000e188 <system_peripheral_reset+0x410>)
1000e17c:	2204      	movs	r2, #4
1000e17e:	6859      	ldr	r1, [r3, #4]
1000e180:	e67b      	b.n	1000de7a <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000e182:	2017      	movs	r0, #23
1000e184:	e60b      	b.n	1000dd9e <system_peripheral_reset+0x26>
1000e186:	46c0      	nop			; (mov r8, r8)
1000e188:	4000b000 	.word	0x4000b000
1000e18c:	fffffeff 	.word	0xfffffeff

1000e190 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000e190:	2380      	movs	r3, #128	; 0x80
1000e192:	04db      	lsls	r3, r3, #19
1000e194:	469c      	mov	ip, r3
1000e196:	4460      	add	r0, ip
1000e198:	0080      	lsls	r0, r0, #2
1000e19a:	6001      	str	r1, [r0, #0]
}
1000e19c:	4770      	bx	lr
1000e19e:	46c0      	nop			; (mov r8, r8)

1000e1a0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000e1a0:	4a04      	ldr	r2, [pc, #16]	; (1000e1b4 <_sbrk+0x14>)
1000e1a2:	6813      	ldr	r3, [r2, #0]
1000e1a4:	2b00      	cmp	r3, #0
1000e1a6:	d003      	beq.n	1000e1b0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000e1a8:	1818      	adds	r0, r3, r0
1000e1aa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000e1ac:	0018      	movs	r0, r3
1000e1ae:	4770      	bx	lr
1000e1b0:	4b01      	ldr	r3, [pc, #4]	; (1000e1b8 <_sbrk+0x18>)
1000e1b2:	e7f9      	b.n	1000e1a8 <_sbrk+0x8>
1000e1b4:	10018efc 	.word	0x10018efc
1000e1b8:	1001aaa8 	.word	0x1001aaa8

1000e1bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000e1bc:	2001      	movs	r0, #1
1000e1be:	4240      	negs	r0, r0
1000e1c0:	4770      	bx	lr
1000e1c2:	46c0      	nop			; (mov r8, r8)

1000e1c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000e1c4:	2380      	movs	r3, #128	; 0x80
1000e1c6:	019b      	lsls	r3, r3, #6

	return 0;
}
1000e1c8:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000e1ca:	604b      	str	r3, [r1, #4]

	return 0;
}
1000e1cc:	4770      	bx	lr
1000e1ce:	46c0      	nop			; (mov r8, r8)

1000e1d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000e1d0:	2001      	movs	r0, #1
1000e1d2:	4770      	bx	lr

1000e1d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000e1d4:	2000      	movs	r0, #0
1000e1d6:	4770      	bx	lr

1000e1d8 <interrupt_cb>:
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000e1d8:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000e1da:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000e1dc:	4b04      	ldr	r3, [pc, #16]	; (1000e1f0 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000e1de:	2102      	movs	r1, #2
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000e1e0:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000e1e2:	201d      	movs	r0, #29
1000e1e4:	2300      	movs	r3, #0
1000e1e6:	2200      	movs	r2, #0
1000e1e8:	4c02      	ldr	r4, [pc, #8]	; (1000e1f4 <interrupt_cb+0x1c>)
1000e1ea:	47a0      	blx	r4
}
1000e1ec:	bd10      	pop	{r4, pc}
1000e1ee:	46c0      	nop			; (mov r8, r8)
1000e1f0:	10018f04 	.word	0x10018f04
1000e1f4:	1000c8e1 	.word	0x1000c8e1

1000e1f8 <configure_i2c_master>:
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000e1f8:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000e1fa:	2010      	movs	r0, #16
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000e1fc:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000e1fe:	4c14      	ldr	r4, [pc, #80]	; (1000e250 <configure_i2c_master+0x58>)
1000e200:	47a0      	blx	r4
1000e202:	4b14      	ldr	r3, [pc, #80]	; (1000e254 <configure_i2c_master+0x5c>)
1000e204:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000e206:	2010      	movs	r0, #16
1000e208:	47a0      	blx	r4
1000e20a:	4b13      	ldr	r3, [pc, #76]	; (1000e258 <configure_i2c_master+0x60>)
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000e20c:	ac01      	add	r4, sp, #4
//! [dev_inst]

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000e20e:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000e210:	4b12      	ldr	r3, [pc, #72]	; (1000e25c <configure_i2c_master+0x64>)
1000e212:	0020      	movs	r0, r4
1000e214:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000e216:	2300      	movs	r3, #0
1000e218:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000e21a:	3341      	adds	r3, #65	; 0x41
1000e21c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000e21e:	3b39      	subs	r3, #57	; 0x39
1000e220:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000e222:	3301      	adds	r3, #1
1000e224:	60e3      	str	r3, [r4, #12]
1000e226:	4d0e      	ldr	r5, [pc, #56]	; (1000e260 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000e228:	3b07      	subs	r3, #7
1000e22a:	4e0e      	ldr	r6, [pc, #56]	; (1000e264 <configure_i2c_master+0x6c>)
1000e22c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000e22e:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000e230:	0022      	movs	r2, r4
1000e232:	490d      	ldr	r1, [pc, #52]	; (1000e268 <configure_i2c_master+0x70>)
1000e234:	0028      	movs	r0, r5
1000e236:	47b0      	blx	r6
1000e238:	2800      	cmp	r0, #0
1000e23a:	d1f9      	bne.n	1000e230 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000e23c:	2128      	movs	r1, #40	; 0x28
	
	i2c_enable(i2c_master_instance.hw);
1000e23e:	682a      	ldr	r2, [r5, #0]
1000e240:	5c53      	ldrb	r3, [r2, r1]
1000e242:	07db      	lsls	r3, r3, #31
1000e244:	d4fc      	bmi.n	1000e240 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000e246:	2301      	movs	r3, #1
1000e248:	7513      	strb	r3, [r2, #20]
}
1000e24a:	b006      	add	sp, #24
1000e24c:	bd70      	pop	{r4, r5, r6, pc}
1000e24e:	46c0      	nop			; (mov r8, r8)
1000e250:	10014409 	.word	0x10014409
1000e254:	100190a0 	.word	0x100190a0
1000e258:	10019090 	.word	0x10019090
1000e25c:	1000d8fd 	.word	0x1000d8fd
1000e260:	10019098 	.word	0x10019098
1000e264:	1000d915 	.word	0x1000d915
1000e268:	40003000 	.word	0x40003000

1000e26c <init_dualtimer>:

void init_dualtimer(void)
{
1000e26c:	b510      	push	{r4, lr}
1000e26e:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000e270:	ac01      	add	r4, sp, #4
1000e272:	0020      	movs	r0, r4
1000e274:	4b06      	ldr	r3, [pc, #24]	; (1000e290 <init_dualtimer+0x24>)
1000e276:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000e278:	4b06      	ldr	r3, [pc, #24]	; (1000e294 <init_dualtimer+0x28>)
    config_dualtimer.timer2.load_value = 26000;
    config_dualtimer.timer1.timer_enable = false;
    config_dualtimer.timer2.timer_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000e27a:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000e27c:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000e27e:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000e280:	2300      	movs	r3, #0
1000e282:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000e284:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000e286:	4b04      	ldr	r3, [pc, #16]	; (1000e298 <init_dualtimer+0x2c>)
1000e288:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000e28a:	b008      	add	sp, #32
1000e28c:	bd10      	pop	{r4, pc}
1000e28e:	46c0      	nop			; (mov r8, r8)
1000e290:	1000817d 	.word	0x1000817d
1000e294:	00006590 	.word	0x00006590
1000e298:	100081b5 	.word	0x100081b5

1000e29c <imu_poll_data>:
    int_param.pin = PIN_AO_GPIO_2;
    mpu_init(&int_param);
}    

void imu_poll_data(void)
{
1000e29c:	b570      	push	{r4, r5, r6, lr}
1000e29e:	b094      	sub	sp, #80	; 0x50
    static unsigned long sensor_timestamp;
    short gyro[3], accel_short[3], sensors;
    unsigned char more;
    long accel[3], quat[4], temperature;
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
1000e2a0:	aa02      	add	r2, sp, #8
1000e2a2:	4694      	mov	ip, r2
1000e2a4:	2325      	movs	r3, #37	; 0x25
1000e2a6:	4463      	add	r3, ip
1000e2a8:	9301      	str	r3, [sp, #4]
1000e2aa:	2326      	movs	r3, #38	; 0x26
1000e2ac:	ad0c      	add	r5, sp, #48	; 0x30
1000e2ae:	ac0e      	add	r4, sp, #56	; 0x38
1000e2b0:	4463      	add	r3, ip
1000e2b2:	0021      	movs	r1, r4
1000e2b4:	aa10      	add	r2, sp, #64	; 0x40
1000e2b6:	0028      	movs	r0, r5
1000e2b8:	9300      	str	r3, [sp, #0]
1000e2ba:	4e11      	ldr	r6, [pc, #68]	; (1000e300 <imu_poll_data+0x64>)
1000e2bc:	4b11      	ldr	r3, [pc, #68]	; (1000e304 <imu_poll_data+0x68>)
1000e2be:	47b0      	blx	r6
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
1000e2c0:	4b11      	ldr	r3, [pc, #68]	; (1000e308 <imu_poll_data+0x6c>)
1000e2c2:	4812      	ldr	r0, [pc, #72]	; (1000e30c <imu_poll_data+0x70>)
1000e2c4:	4798      	blx	r3
1000e2c6:	2204      	movs	r2, #4
1000e2c8:	5eab      	ldrsh	r3, [r5, r2]
1000e2ca:	2102      	movs	r1, #2
1000e2cc:	5e6a      	ldrsh	r2, [r5, r1]
1000e2ce:	2000      	movs	r0, #0
1000e2d0:	5e29      	ldrsh	r1, [r5, r0]
1000e2d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
1000e2d4:	9006      	str	r0, [sp, #24]
1000e2d6:	9812      	ldr	r0, [sp, #72]	; 0x48
1000e2d8:	9005      	str	r0, [sp, #20]
1000e2da:	9009      	str	r0, [sp, #36]	; 0x24
1000e2dc:	9811      	ldr	r0, [sp, #68]	; 0x44
1000e2de:	9004      	str	r0, [sp, #16]
1000e2e0:	9810      	ldr	r0, [sp, #64]	; 0x40
1000e2e2:	9003      	str	r0, [sp, #12]
1000e2e4:	2504      	movs	r5, #4
1000e2e6:	5f60      	ldrsh	r0, [r4, r5]
1000e2e8:	9002      	str	r0, [sp, #8]
1000e2ea:	2502      	movs	r5, #2
1000e2ec:	5f60      	ldrsh	r0, [r4, r5]
1000e2ee:	9001      	str	r0, [sp, #4]
1000e2f0:	2000      	movs	r0, #0
1000e2f2:	5e20      	ldrsh	r0, [r4, r0]
1000e2f4:	4c06      	ldr	r4, [pc, #24]	; (1000e310 <imu_poll_data+0x74>)
1000e2f6:	9000      	str	r0, [sp, #0]
1000e2f8:	4806      	ldr	r0, [pc, #24]	; (1000e314 <imu_poll_data+0x78>)
1000e2fa:	47a0      	blx	r4
}
1000e2fc:	b014      	add	sp, #80	; 0x50
1000e2fe:	bd70      	pop	{r4, r5, r6, pc}
1000e300:	1000aaf5 	.word	0x1000aaf5
1000e304:	10018f00 	.word	0x10018f00
1000e308:	100146e1 	.word	0x100146e1
1000e30c:	100158a0 	.word	0x100158a0
1000e310:	100145c1 	.word	0x100145c1
1000e314:	100172b4 	.word	0x100172b4

1000e318 <main>:

int main(void)
{
1000e318:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e31a:	4647      	mov	r7, r8
1000e31c:	b480      	push	{r7}
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000e31e:	4b47      	ldr	r3, [pc, #284]	; (1000e43c <main+0x124>)
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000e320:	b088      	sub	sp, #32
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000e322:	4798      	blx	r3
    gpio_init();
1000e324:	4b46      	ldr	r3, [pc, #280]	; (1000e440 <main+0x128>)
1000e326:	4798      	blx	r3
    acquire_sleep_lock();
1000e328:	4b46      	ldr	r3, [pc, #280]	; (1000e444 <main+0x12c>)
1000e32a:	4798      	blx	r3
    serial_console_init();
1000e32c:	4b46      	ldr	r3, [pc, #280]	; (1000e448 <main+0x130>)
1000e32e:	4798      	blx	r3
    ble_device_init(NULL);
1000e330:	2000      	movs	r0, #0
1000e332:	4b46      	ldr	r3, [pc, #280]	; (1000e44c <main+0x134>)
1000e334:	4798      	blx	r3

    init_dualtimer();
1000e336:	4b46      	ldr	r3, [pc, #280]	; (1000e450 <main+0x138>)
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000e338:	ac05      	add	r4, sp, #20
    gpio_init();
    acquire_sleep_lock();
    serial_console_init();
    ble_device_init(NULL);

    init_dualtimer();
1000e33a:	4798      	blx	r3
    delay_init();
1000e33c:	4b45      	ldr	r3, [pc, #276]	; (1000e454 <main+0x13c>)
1000e33e:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000e340:	0020      	movs	r0, r4
1000e342:	4b45      	ldr	r3, [pc, #276]	; (1000e458 <main+0x140>)
1000e344:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000e346:	2300      	movs	r3, #0
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
1000e348:	2501      	movs	r5, #1

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000e34a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000e34c:	3302      	adds	r3, #2
    config_gpio_pin.aon_wakeup = true;
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000e34e:	0021      	movs	r1, r4
static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000e350:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000e352:	201d      	movs	r0, #29
1000e354:	4b41      	ldr	r3, [pc, #260]	; (1000e45c <main+0x144>)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
1000e356:	70e5      	strb	r5, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000e358:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000e35a:	4b41      	ldr	r3, [pc, #260]	; (1000e460 <main+0x148>)
1000e35c:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void run_self_test(void) {
    int result;
    long gyro[3], accel[3];
    result = mpu_run_6500_self_test(gyro, accel, 0);
1000e35e:	2200      	movs	r2, #0
1000e360:	0021      	movs	r1, r4
1000e362:	a802      	add	r0, sp, #8
1000e364:	4b3f      	ldr	r3, [pc, #252]	; (1000e464 <main+0x14c>)
1000e366:	4798      	blx	r3
1000e368:	4680      	mov	r8, r0
    if(result == 7) {
1000e36a:	2807      	cmp	r0, #7
1000e36c:	d012      	beq.n	1000e394 <main+0x7c>
        DBG_LOG_DEV("[run_self_test]\t\t\tAccel: %7.4f %7.4f %7.4f", (accel[0]/65536.f), (accel[1]/65536.f), (accel[2]/65536.f));
        DBG_LOG_DEV("\t\t\t\t\tGyro: %7.4f %7.4f %7.4f", (gyro[0]/65536.f), (gyro[1]/65536.f), (gyro[2]/65536.f));
    }
    else {
        if(!(result & 0x01)) {
            DBG_LOG("[run_self_test]\t\t\tGyro failed!");
1000e36e:	4f3e      	ldr	r7, [pc, #248]	; (1000e468 <main+0x150>)
    if(result == 7) {
        DBG_LOG_DEV("[run_self_test]\t\t\tAccel: %7.4f %7.4f %7.4f", (accel[0]/65536.f), (accel[1]/65536.f), (accel[2]/65536.f));
        DBG_LOG_DEV("\t\t\t\t\tGyro: %7.4f %7.4f %7.4f", (gyro[0]/65536.f), (gyro[1]/65536.f), (gyro[2]/65536.f));
    }
    else {
        if(!(result & 0x01)) {
1000e370:	4205      	tst	r5, r0
1000e372:	d05c      	beq.n	1000e42e <main+0x116>
1000e374:	4e3d      	ldr	r6, [pc, #244]	; (1000e46c <main+0x154>)
1000e376:	4d3e      	ldr	r5, [pc, #248]	; (1000e470 <main+0x158>)
            DBG_LOG("[run_self_test]\t\t\tGyro failed!");
        }
        if(!(result & 0x02)) {
1000e378:	4643      	mov	r3, r8
1000e37a:	079b      	lsls	r3, r3, #30
1000e37c:	d403      	bmi.n	1000e386 <main+0x6e>
            DBG_LOG("[run_self_test]\t\t\tAccel failed!");
1000e37e:	0038      	movs	r0, r7
1000e380:	47b0      	blx	r6
1000e382:	483c      	ldr	r0, [pc, #240]	; (1000e474 <main+0x15c>)
1000e384:	47a8      	blx	r5
        }
        if(!(result & 0x04)) {
1000e386:	4643      	mov	r3, r8
1000e388:	075b      	lsls	r3, r3, #29
1000e38a:	d403      	bmi.n	1000e394 <main+0x7c>
            DBG_LOG("[run_self_test]\t\t\tCompass failed!");
1000e38c:	0038      	movs	r0, r7
1000e38e:	47b0      	blx	r6
1000e390:	4839      	ldr	r0, [pc, #228]	; (1000e478 <main+0x160>)
1000e392:	47a8      	blx	r5
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
1000e394:	231d      	movs	r3, #29
    }
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000e396:	4d39      	ldr	r5, [pc, #228]	; (1000e47c <main+0x164>)
    int_param.pin = PIN_AO_GPIO_2;
1000e398:	8023      	strh	r3, [r4, #0]
    mpu_init(&int_param);
1000e39a:	0020      	movs	r0, r4
1000e39c:	4b38      	ldr	r3, [pc, #224]	; (1000e480 <main+0x168>)
    }
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000e39e:	6065      	str	r5, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
    mpu_init(&int_param);
1000e3a0:	4798      	blx	r3
     * inv_enable_in_use_auto_calibration();
     */
    
    /* Compass calibration algorithms. */
    //inv_enable_vector_compass_cal();
    inv_enable_magnetic_disturbance();
1000e3a2:	4b38      	ldr	r3, [pc, #224]	; (1000e484 <main+0x16c>)
1000e3a4:	4798      	blx	r3
        //system_global_reset();
    //}

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000e3a6:	4b38      	ldr	r3, [pc, #224]	; (1000e488 <main+0x170>)
1000e3a8:	2079      	movs	r0, #121	; 0x79
1000e3aa:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000e3ac:	4b37      	ldr	r3, [pc, #220]	; (1000e48c <main+0x174>)
1000e3ae:	2078      	movs	r0, #120	; 0x78
1000e3b0:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000e3b2:	4b37      	ldr	r3, [pc, #220]	; (1000e490 <main+0x178>)
1000e3b4:	200a      	movs	r0, #10
1000e3b6:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000e3b8:	4b36      	ldr	r3, [pc, #216]	; (1000e494 <main+0x17c>)
1000e3ba:	200a      	movs	r0, #10
1000e3bc:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000e3be:	466b      	mov	r3, sp
1000e3c0:	1d98      	adds	r0, r3, #6
1000e3c2:	4b35      	ldr	r3, [pc, #212]	; (1000e498 <main+0x180>)
1000e3c4:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000e3c6:	4b35      	ldr	r3, [pc, #212]	; (1000e49c <main+0x184>)
1000e3c8:	a802      	add	r0, sp, #8
1000e3ca:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000e3cc:	466b      	mov	r3, sp
1000e3ce:	1d58      	adds	r0, r3, #5
1000e3d0:	4b33      	ldr	r3, [pc, #204]	; (1000e4a0 <main+0x188>)
1000e3d2:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000e3d4:	4b33      	ldr	r3, [pc, #204]	; (1000e4a4 <main+0x18c>)
1000e3d6:	0020      	movs	r0, r4
1000e3d8:	4798      	blx	r3
    /* Compass reads are handled by scheduler. */
    //uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
    //timestamp = (uint32_t *)(load / 26000);
    //DBG_LOG_DEV("Timestamp: %lld", timestamp);
//
    if (dmp_load_motion_driver_firmware()) {
1000e3da:	4b33      	ldr	r3, [pc, #204]	; (1000e4a8 <main+0x190>)
1000e3dc:	4798      	blx	r3
1000e3de:	2800      	cmp	r0, #0
1000e3e0:	d001      	beq.n	1000e3e6 <main+0xce>
        MPL_LOGE("Could not download DMP.\n");
        system_global_reset();
1000e3e2:	4b32      	ldr	r3, [pc, #200]	; (1000e4ac <main+0x194>)
1000e3e4:	4798      	blx	r3
    }
    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
1000e3e6:	4b32      	ldr	r3, [pc, #200]	; (1000e4b0 <main+0x198>)
1000e3e8:	4832      	ldr	r0, [pc, #200]	; (1000e4b4 <main+0x19c>)
1000e3ea:	4798      	blx	r3
1000e3ec:	4b32      	ldr	r3, [pc, #200]	; (1000e4b8 <main+0x1a0>)
1000e3ee:	4798      	blx	r3

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
1000e3f0:	20b9      	movs	r0, #185	; 0xb9
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
        if(imu_interrupt) {
            //DBG_LOG("IMU INTERRUPT!");
            imu_poll_data();
            imu_interrupt = false;
1000e3f2:	2600      	movs	r6, #0
    }
    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
1000e3f4:	4b31      	ldr	r3, [pc, #196]	; (1000e4bc <main+0x1a4>)
1000e3f6:	0040      	lsls	r0, r0, #1
1000e3f8:	4798      	blx	r3
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1000e3fa:	4b31      	ldr	r3, [pc, #196]	; (1000e4c0 <main+0x1a8>)
1000e3fc:	200a      	movs	r0, #10
1000e3fe:	4798      	blx	r3
    //inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
    mpu_set_dmp_state(1);
1000e400:	4b30      	ldr	r3, [pc, #192]	; (1000e4c4 <main+0x1ac>)
1000e402:	2001      	movs	r0, #1
1000e404:	4798      	blx	r3
    hal.dmp_on = 1;

    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000e406:	0029      	movs	r1, r5
1000e408:	2202      	movs	r2, #2
1000e40a:	201d      	movs	r0, #29
1000e40c:	4b2e      	ldr	r3, [pc, #184]	; (1000e4c8 <main+0x1b0>)
1000e40e:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_2);
1000e410:	201d      	movs	r0, #29
1000e412:	4b2e      	ldr	r3, [pc, #184]	; (1000e4cc <main+0x1b4>)
1000e414:	4798      	blx	r3
1000e416:	4d2e      	ldr	r5, [pc, #184]	; (1000e4d0 <main+0x1b8>)
1000e418:	4c2e      	ldr	r4, [pc, #184]	; (1000e4d4 <main+0x1bc>)
1000e41a:	4f2f      	ldr	r7, [pc, #188]	; (1000e4d8 <main+0x1c0>)


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000e41c:	2001      	movs	r0, #1
1000e41e:	4240      	negs	r0, r0
1000e420:	47a8      	blx	r5
        if(imu_interrupt) {
1000e422:	7823      	ldrb	r3, [r4, #0]
1000e424:	2b00      	cmp	r3, #0
1000e426:	d0f9      	beq.n	1000e41c <main+0x104>
            //DBG_LOG("IMU INTERRUPT!");
            imu_poll_data();
1000e428:	47b8      	blx	r7
            imu_interrupt = false;
1000e42a:	7026      	strb	r6, [r4, #0]
1000e42c:	e7f6      	b.n	1000e41c <main+0x104>
        DBG_LOG_DEV("[run_self_test]\t\t\tAccel: %7.4f %7.4f %7.4f", (accel[0]/65536.f), (accel[1]/65536.f), (accel[2]/65536.f));
        DBG_LOG_DEV("\t\t\t\t\tGyro: %7.4f %7.4f %7.4f", (gyro[0]/65536.f), (gyro[1]/65536.f), (gyro[2]/65536.f));
    }
    else {
        if(!(result & 0x01)) {
            DBG_LOG("[run_self_test]\t\t\tGyro failed!");
1000e42e:	0038      	movs	r0, r7
1000e430:	4e0e      	ldr	r6, [pc, #56]	; (1000e46c <main+0x154>)
1000e432:	47b0      	blx	r6
1000e434:	4d0e      	ldr	r5, [pc, #56]	; (1000e470 <main+0x158>)
1000e436:	4829      	ldr	r0, [pc, #164]	; (1000e4dc <main+0x1c4>)
1000e438:	47a8      	blx	r5
1000e43a:	e79d      	b.n	1000e378 <main+0x60>
1000e43c:	1000c605 	.word	0x1000c605
1000e440:	1000d795 	.word	0x1000d795
1000e444:	1000cb9d 	.word	0x1000cb9d
1000e448:	1000c331 	.word	0x1000c331
1000e44c:	1000bb91 	.word	0x1000bb91
1000e450:	1000e26d 	.word	0x1000e26d
1000e454:	100080cd 	.word	0x100080cd
1000e458:	1000d3fd 	.word	0x1000d3fd
1000e45c:	1000d40d 	.word	0x1000d40d
1000e460:	1000e1f9 	.word	0x1000e1f9
1000e464:	1000988d 	.word	0x1000988d
1000e468:	100158a0 	.word	0x100158a0
1000e46c:	100146e1 	.word	0x100146e1
1000e470:	100145c1 	.word	0x100145c1
1000e474:	10017300 	.word	0x10017300
1000e478:	10017320 	.word	0x10017320
1000e47c:	1000e1d9 	.word	0x1000e1d9
1000e480:	10009385 	.word	0x10009385
1000e484:	10010f61 	.word	0x10010f61
1000e488:	100091d1 	.word	0x100091d1
1000e48c:	10008d95 	.word	0x10008d95
1000e490:	10009105 	.word	0x10009105
1000e494:	10008d31 	.word	0x10008d31
1000e498:	10008d15 	.word	0x10008d15
1000e49c:	10008aa9 	.word	0x10008aa9
1000e4a0:	10008b75 	.word	0x10008b75
1000e4a4:	1000a455 	.word	0x1000a455
1000e4a8:	1000a491 	.word	0x1000a491
1000e4ac:	1000dd61 	.word	0x1000dd61
1000e4b0:	1000b1dd 	.word	0x1000b1dd
1000e4b4:	100175b4 	.word	0x100175b4
1000e4b8:	1000a4b1 	.word	0x1000a4b1
1000e4bc:	1000a8a9 	.word	0x1000a8a9
1000e4c0:	1000a5bd 	.word	0x1000a5bd
1000e4c4:	100097f1 	.word	0x100097f1
1000e4c8:	1000d681 	.word	0x1000d681
1000e4cc:	1000d741 	.word	0x1000d741
1000e4d0:	1000c251 	.word	0x1000c251
1000e4d4:	10018f04 	.word	0x10018f04
1000e4d8:	1000e29d 	.word	0x1000e29d
1000e4dc:	100172e0 	.word	0x100172e0

1000e4e0 <internal_event_post>:
1000e4e0:	b570      	push	{r4, r5, r6, lr}
1000e4e2:	4d12      	ldr	r5, [pc, #72]	; (1000e52c <internal_event_post+0x4c>)
1000e4e4:	682c      	ldr	r4, [r5, #0]
1000e4e6:	2c00      	cmp	r4, #0
1000e4e8:	d014      	beq.n	1000e514 <internal_event_post+0x34>
1000e4ea:	6826      	ldr	r6, [r4, #0]
1000e4ec:	60e2      	str	r2, [r4, #12]
1000e4ee:	602e      	str	r6, [r5, #0]
1000e4f0:	2500      	movs	r5, #0
1000e4f2:	4a0f      	ldr	r2, [pc, #60]	; (1000e530 <internal_event_post+0x50>)
1000e4f4:	8123      	strh	r3, [r4, #8]
1000e4f6:	6813      	ldr	r3, [r2, #0]
1000e4f8:	6025      	str	r5, [r4, #0]
1000e4fa:	80a0      	strh	r0, [r4, #4]
1000e4fc:	80e1      	strh	r1, [r4, #6]
1000e4fe:	42ab      	cmp	r3, r5
1000e500:	d101      	bne.n	1000e506 <internal_event_post+0x26>
1000e502:	6014      	str	r4, [r2, #0]
1000e504:	e011      	b.n	1000e52a <internal_event_post+0x4a>
1000e506:	681a      	ldr	r2, [r3, #0]
1000e508:	2a00      	cmp	r2, #0
1000e50a:	d001      	beq.n	1000e510 <internal_event_post+0x30>
1000e50c:	1c13      	adds	r3, r2, #0
1000e50e:	e7fa      	b.n	1000e506 <internal_event_post+0x26>
1000e510:	601c      	str	r4, [r3, #0]
1000e512:	e00a      	b.n	1000e52a <internal_event_post+0x4a>
1000e514:	b2c4      	uxtb	r4, r0
1000e516:	2c00      	cmp	r4, #0
1000e518:	d107      	bne.n	1000e52a <internal_event_post+0x4a>
1000e51a:	4c06      	ldr	r4, [pc, #24]	; (1000e534 <internal_event_post+0x54>)
1000e51c:	60e2      	str	r2, [r4, #12]
1000e51e:	2201      	movs	r2, #1
1000e520:	8123      	strh	r3, [r4, #8]
1000e522:	4b05      	ldr	r3, [pc, #20]	; (1000e538 <internal_event_post+0x58>)
1000e524:	80a0      	strh	r0, [r4, #4]
1000e526:	80e1      	strh	r1, [r4, #6]
1000e528:	701a      	strb	r2, [r3, #0]
1000e52a:	bd70      	pop	{r4, r5, r6, pc}
1000e52c:	10018f20 	.word	0x10018f20
1000e530:	10018f1c 	.word	0x10018f1c
1000e534:	10018f08 	.word	0x10018f08
1000e538:	10018f18 	.word	0x10018f18

1000e53c <internal_event_init>:
1000e53c:	b510      	push	{r4, lr}
1000e53e:	4b08      	ldr	r3, [pc, #32]	; (1000e560 <internal_event_init+0x24>)
1000e540:	0900      	lsrs	r0, r0, #4
1000e542:	0100      	lsls	r0, r0, #4
1000e544:	681a      	ldr	r2, [r3, #0]
1000e546:	1808      	adds	r0, r1, r0
1000e548:	4281      	cmp	r1, r0
1000e54a:	d003      	beq.n	1000e554 <internal_event_init+0x18>
1000e54c:	600a      	str	r2, [r1, #0]
1000e54e:	1c0a      	adds	r2, r1, #0
1000e550:	3110      	adds	r1, #16
1000e552:	e7f9      	b.n	1000e548 <internal_event_init+0xc>
1000e554:	601a      	str	r2, [r3, #0]
1000e556:	2200      	movs	r2, #0
1000e558:	4b02      	ldr	r3, [pc, #8]	; (1000e564 <internal_event_init+0x28>)
1000e55a:	601a      	str	r2, [r3, #0]
1000e55c:	bd10      	pop	{r4, pc}
1000e55e:	46c0      	nop			; (mov r8, r8)
1000e560:	10018f20 	.word	0x10018f20
1000e564:	10018f1c 	.word	0x10018f1c

1000e568 <special_events_handler>:
1000e568:	b538      	push	{r3, r4, r5, lr}
1000e56a:	4c1b      	ldr	r4, [pc, #108]	; (1000e5d8 <special_events_handler+0x70>)
1000e56c:	1c03      	adds	r3, r0, #0
1000e56e:	8825      	ldrh	r5, [r4, #0]
1000e570:	1c08      	adds	r0, r1, #0
1000e572:	1c21      	adds	r1, r4, #0
1000e574:	429d      	cmp	r5, r3
1000e576:	d107      	bne.n	1000e588 <special_events_handler+0x20>
1000e578:	88a5      	ldrh	r5, [r4, #4]
1000e57a:	4285      	cmp	r5, r0
1000e57c:	d104      	bne.n	1000e588 <special_events_handler+0x20>
1000e57e:	2301      	movs	r3, #1
1000e580:	425b      	negs	r3, r3
1000e582:	8023      	strh	r3, [r4, #0]
1000e584:	60a2      	str	r2, [r4, #8]
1000e586:	e009      	b.n	1000e59c <special_events_handler+0x34>
1000e588:	884c      	ldrh	r4, [r1, #2]
1000e58a:	429c      	cmp	r4, r3
1000e58c:	d10a      	bne.n	1000e5a4 <special_events_handler+0x3c>
1000e58e:	888c      	ldrh	r4, [r1, #4]
1000e590:	4284      	cmp	r4, r0
1000e592:	d107      	bne.n	1000e5a4 <special_events_handler+0x3c>
1000e594:	2301      	movs	r3, #1
1000e596:	425b      	negs	r3, r3
1000e598:	804b      	strh	r3, [r1, #2]
1000e59a:	608a      	str	r2, [r1, #8]
1000e59c:	4b0f      	ldr	r3, [pc, #60]	; (1000e5dc <special_events_handler+0x74>)
1000e59e:	4798      	blx	r3
1000e5a0:	2001      	movs	r0, #1
1000e5a2:	e017      	b.n	1000e5d4 <special_events_handler+0x6c>
1000e5a4:	490e      	ldr	r1, [pc, #56]	; (1000e5e0 <special_events_handler+0x78>)
1000e5a6:	428b      	cmp	r3, r1
1000e5a8:	d00e      	beq.n	1000e5c8 <special_events_handler+0x60>
1000e5aa:	490e      	ldr	r1, [pc, #56]	; (1000e5e4 <special_events_handler+0x7c>)
1000e5ac:	428b      	cmp	r3, r1
1000e5ae:	d007      	beq.n	1000e5c0 <special_events_handler+0x58>
1000e5b0:	490d      	ldr	r1, [pc, #52]	; (1000e5e8 <special_events_handler+0x80>)
1000e5b2:	2000      	movs	r0, #0
1000e5b4:	428b      	cmp	r3, r1
1000e5b6:	d10d      	bne.n	1000e5d4 <special_events_handler+0x6c>
1000e5b8:	1c10      	adds	r0, r2, #0
1000e5ba:	4b0c      	ldr	r3, [pc, #48]	; (1000e5ec <special_events_handler+0x84>)
1000e5bc:	4798      	blx	r3
1000e5be:	e7ef      	b.n	1000e5a0 <special_events_handler+0x38>
1000e5c0:	1c11      	adds	r1, r2, #0
1000e5c2:	4b0b      	ldr	r3, [pc, #44]	; (1000e5f0 <special_events_handler+0x88>)
1000e5c4:	2200      	movs	r2, #0
1000e5c6:	e002      	b.n	1000e5ce <special_events_handler+0x66>
1000e5c8:	1c11      	adds	r1, r2, #0
1000e5ca:	2200      	movs	r2, #0
1000e5cc:	4b09      	ldr	r3, [pc, #36]	; (1000e5f4 <special_events_handler+0x8c>)
1000e5ce:	4798      	blx	r3
1000e5d0:	4243      	negs	r3, r0
1000e5d2:	4158      	adcs	r0, r3
1000e5d4:	bd38      	pop	{r3, r4, r5, pc}
1000e5d6:	46c0      	nop			; (mov r8, r8)
1000e5d8:	10019d1c 	.word	0x10019d1c
1000e5dc:	1000f76d 	.word	0x1000f76d
1000e5e0:	00000e13 	.word	0x00000e13
1000e5e4:	00000e15 	.word	0x00000e15
1000e5e8:	00000e01 	.word	0x00000e01
1000e5ec:	1000fadd 	.word	0x1000fadd
1000e5f0:	1000fc9d 	.word	0x1000fc9d
1000e5f4:	1000fd75 	.word	0x1000fd75

1000e5f8 <at_ble_event_get>:
1000e5f8:	2300      	movs	r3, #0
1000e5fa:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5fc:	b087      	sub	sp, #28
1000e5fe:	9204      	str	r2, [sp, #16]
1000e600:	7003      	strb	r3, [r0, #0]
1000e602:	9b04      	ldr	r3, [sp, #16]
1000e604:	9003      	str	r0, [sp, #12]
1000e606:	3b01      	subs	r3, #1
1000e608:	1c0d      	adds	r5, r1, #0
1000e60a:	9305      	str	r3, [sp, #20]
1000e60c:	3303      	adds	r3, #3
1000e60e:	d802      	bhi.n	1000e616 <at_ble_event_get+0x1e>
1000e610:	9804      	ldr	r0, [sp, #16]
1000e612:	4bae      	ldr	r3, [pc, #696]	; (1000e8cc <at_ble_event_get+0x2d4>)
1000e614:	4798      	blx	r3
1000e616:	9b05      	ldr	r3, [sp, #20]
1000e618:	4cad      	ldr	r4, [pc, #692]	; (1000e8d0 <at_ble_event_get+0x2d8>)
1000e61a:	3303      	adds	r3, #3
1000e61c:	d902      	bls.n	1000e624 <at_ble_event_get+0x2c>
1000e61e:	2300      	movs	r3, #0
1000e620:	9302      	str	r3, [sp, #8]
1000e622:	e015      	b.n	1000e650 <at_ble_event_get+0x58>
1000e624:	2300      	movs	r3, #0
1000e626:	9302      	str	r3, [sp, #8]
1000e628:	6823      	ldr	r3, [r4, #0]
1000e62a:	2b00      	cmp	r3, #0
1000e62c:	d113      	bne.n	1000e656 <at_ble_event_get+0x5e>
1000e62e:	9b02      	ldr	r3, [sp, #8]
1000e630:	2bd0      	cmp	r3, #208	; 0xd0
1000e632:	d100      	bne.n	1000e636 <at_ble_event_get+0x3e>
1000e634:	e2da      	b.n	1000ebec <at_ble_event_get+0x5f4>
1000e636:	9804      	ldr	r0, [sp, #16]
1000e638:	4ba6      	ldr	r3, [pc, #664]	; (1000e8d4 <at_ble_event_get+0x2dc>)
1000e63a:	4798      	blx	r3
1000e63c:	9002      	str	r0, [sp, #8]
1000e63e:	2802      	cmp	r0, #2
1000e640:	d1f2      	bne.n	1000e628 <at_ble_event_get+0x30>
1000e642:	e03f      	b.n	1000e6c4 <at_ble_event_get+0xcc>
1000e644:	9804      	ldr	r0, [sp, #16]
1000e646:	4ba3      	ldr	r3, [pc, #652]	; (1000e8d4 <at_ble_event_get+0x2dc>)
1000e648:	4798      	blx	r3
1000e64a:	9002      	str	r0, [sp, #8]
1000e64c:	2802      	cmp	r0, #2
1000e64e:	d039      	beq.n	1000e6c4 <at_ble_event_get+0xcc>
1000e650:	6823      	ldr	r3, [r4, #0]
1000e652:	2b00      	cmp	r3, #0
1000e654:	d0f6      	beq.n	1000e644 <at_ble_event_get+0x4c>
1000e656:	9b02      	ldr	r3, [sp, #8]
1000e658:	2bd0      	cmp	r3, #208	; 0xd0
1000e65a:	d100      	bne.n	1000e65e <at_ble_event_get+0x66>
1000e65c:	e2c6      	b.n	1000ebec <at_ble_event_get+0x5f4>
1000e65e:	9b02      	ldr	r3, [sp, #8]
1000e660:	3b03      	subs	r3, #3
1000e662:	1e5a      	subs	r2, r3, #1
1000e664:	4193      	sbcs	r3, r2
1000e666:	9a02      	ldr	r2, [sp, #8]
1000e668:	425b      	negs	r3, r3
1000e66a:	401a      	ands	r2, r3
1000e66c:	6823      	ldr	r3, [r4, #0]
1000e66e:	9202      	str	r2, [sp, #8]
1000e670:	2b00      	cmp	r3, #0
1000e672:	d100      	bne.n	1000e676 <at_ble_event_get+0x7e>
1000e674:	e2c2      	b.n	1000ebfc <at_ble_event_get+0x604>
1000e676:	681a      	ldr	r2, [r3, #0]
1000e678:	68de      	ldr	r6, [r3, #12]
1000e67a:	6022      	str	r2, [r4, #0]
1000e67c:	88da      	ldrh	r2, [r3, #6]
1000e67e:	9201      	str	r2, [sp, #4]
1000e680:	4a95      	ldr	r2, [pc, #596]	; (1000e8d8 <at_ble_event_get+0x2e0>)
1000e682:	889c      	ldrh	r4, [r3, #4]
1000e684:	6811      	ldr	r1, [r2, #0]
1000e686:	6013      	str	r3, [r2, #0]
1000e688:	6019      	str	r1, [r3, #0]
1000e68a:	4b94      	ldr	r3, [pc, #592]	; (1000e8dc <at_ble_event_get+0x2e4>)
1000e68c:	781b      	ldrb	r3, [r3, #0]
1000e68e:	2b01      	cmp	r3, #1
1000e690:	d10f      	bne.n	1000e6b2 <at_ble_event_get+0xba>
1000e692:	4b93      	ldr	r3, [pc, #588]	; (1000e8e0 <at_ble_event_get+0x2e8>)
1000e694:	4a92      	ldr	r2, [pc, #584]	; (1000e8e0 <at_ble_event_get+0x2e8>)
1000e696:	8898      	ldrh	r0, [r3, #4]
1000e698:	88d9      	ldrh	r1, [r3, #6]
1000e69a:	68d2      	ldr	r2, [r2, #12]
1000e69c:	891b      	ldrh	r3, [r3, #8]
1000e69e:	4f91      	ldr	r7, [pc, #580]	; (1000e8e4 <at_ble_event_get+0x2ec>)
1000e6a0:	47b8      	blx	r7
1000e6a2:	2210      	movs	r2, #16
1000e6a4:	4b90      	ldr	r3, [pc, #576]	; (1000e8e8 <at_ble_event_get+0x2f0>)
1000e6a6:	488e      	ldr	r0, [pc, #568]	; (1000e8e0 <at_ble_event_get+0x2e8>)
1000e6a8:	2100      	movs	r1, #0
1000e6aa:	4798      	blx	r3
1000e6ac:	2300      	movs	r3, #0
1000e6ae:	4a8b      	ldr	r2, [pc, #556]	; (1000e8dc <at_ble_event_get+0x2e4>)
1000e6b0:	7013      	strb	r3, [r2, #0]
1000e6b2:	9b02      	ldr	r3, [sp, #8]
1000e6b4:	2b00      	cmp	r3, #0
1000e6b6:	d114      	bne.n	1000e6e2 <at_ble_event_get+0xea>
1000e6b8:	4b8c      	ldr	r3, [pc, #560]	; (1000e8ec <at_ble_event_get+0x2f4>)
1000e6ba:	429c      	cmp	r4, r3
1000e6bc:	d009      	beq.n	1000e6d2 <at_ble_event_get+0xda>
1000e6be:	4b8c      	ldr	r3, [pc, #560]	; (1000e8f0 <at_ble_event_get+0x2f8>)
1000e6c0:	429c      	cmp	r4, r3
1000e6c2:	d127      	bne.n	1000e714 <at_ble_event_get+0x11c>
1000e6c4:	233a      	movs	r3, #58	; 0x3a
1000e6c6:	9a03      	ldr	r2, [sp, #12]
1000e6c8:	7013      	strb	r3, [r2, #0]
1000e6ca:	2300      	movs	r3, #0
1000e6cc:	9302      	str	r3, [sp, #8]
1000e6ce:	1c1d      	adds	r5, r3, #0
1000e6d0:	e007      	b.n	1000e6e2 <at_ble_event_get+0xea>
1000e6d2:	9b01      	ldr	r3, [sp, #4]
1000e6d4:	42a3      	cmp	r3, r4
1000e6d6:	d000      	beq.n	1000e6da <at_ble_event_get+0xe2>
1000e6d8:	e28a      	b.n	1000ebf0 <at_ble_event_get+0x5f8>
1000e6da:	2338      	movs	r3, #56	; 0x38
1000e6dc:	9a03      	ldr	r2, [sp, #12]
1000e6de:	7013      	strb	r3, [r2, #0]
1000e6e0:	602e      	str	r6, [r5, #0]
1000e6e2:	9b03      	ldr	r3, [sp, #12]
1000e6e4:	781b      	ldrb	r3, [r3, #0]
1000e6e6:	2b3b      	cmp	r3, #59	; 0x3b
1000e6e8:	d101      	bne.n	1000e6ee <at_ble_event_get+0xf6>
1000e6ea:	4b82      	ldr	r3, [pc, #520]	; (1000e8f4 <at_ble_event_get+0x2fc>)
1000e6ec:	4798      	blx	r3
1000e6ee:	9b03      	ldr	r3, [sp, #12]
1000e6f0:	781b      	ldrb	r3, [r3, #0]
1000e6f2:	2b3b      	cmp	r3, #59	; 0x3b
1000e6f4:	d003      	beq.n	1000e6fe <at_ble_event_get+0x106>
1000e6f6:	9b05      	ldr	r3, [sp, #20]
1000e6f8:	3303      	adds	r3, #3
1000e6fa:	d904      	bls.n	1000e706 <at_ble_event_get+0x10e>
1000e6fc:	e283      	b.n	1000ec06 <at_ble_event_get+0x60e>
1000e6fe:	9b02      	ldr	r3, [sp, #8]
1000e700:	2b00      	cmp	r3, #0
1000e702:	d088      	beq.n	1000e616 <at_ble_event_get+0x1e>
1000e704:	e7f7      	b.n	1000e6f6 <at_ble_event_get+0xfe>
1000e706:	9b02      	ldr	r3, [sp, #8]
1000e708:	2bd0      	cmp	r3, #208	; 0xd0
1000e70a:	d100      	bne.n	1000e70e <at_ble_event_get+0x116>
1000e70c:	e27b      	b.n	1000ec06 <at_ble_event_get+0x60e>
1000e70e:	4b7a      	ldr	r3, [pc, #488]	; (1000e8f8 <at_ble_event_get+0x300>)
1000e710:	4798      	blx	r3
1000e712:	e278      	b.n	1000ec06 <at_ble_event_get+0x60e>
1000e714:	9b01      	ldr	r3, [sp, #4]
1000e716:	2bbb      	cmp	r3, #187	; 0xbb
1000e718:	d125      	bne.n	1000e766 <at_ble_event_get+0x16e>
1000e71a:	2cbb      	cmp	r4, #187	; 0xbb
1000e71c:	d123      	bne.n	1000e766 <at_ble_event_get+0x16e>
1000e71e:	466b      	mov	r3, sp
1000e720:	891b      	ldrh	r3, [r3, #8]
1000e722:	80ab      	strh	r3, [r5, #4]
1000e724:	78b3      	ldrb	r3, [r6, #2]
1000e726:	7872      	ldrb	r2, [r6, #1]
1000e728:	78f0      	ldrb	r0, [r6, #3]
1000e72a:	021b      	lsls	r3, r3, #8
1000e72c:	4313      	orrs	r3, r2
1000e72e:	7971      	ldrb	r1, [r6, #5]
1000e730:	7932      	ldrb	r2, [r6, #4]
1000e732:	70a8      	strb	r0, [r5, #2]
1000e734:	4871      	ldr	r0, [pc, #452]	; (1000e8fc <at_ble_event_get+0x304>)
1000e736:	802b      	strh	r3, [r5, #0]
1000e738:	4283      	cmp	r3, r0
1000e73a:	d806      	bhi.n	1000e74a <at_ble_event_get+0x152>
1000e73c:	4a70      	ldr	r2, [pc, #448]	; (1000e900 <at_ble_event_get+0x308>)
1000e73e:	4293      	cmp	r3, r2
1000e740:	d20b      	bcs.n	1000e75a <at_ble_event_get+0x162>
1000e742:	4a70      	ldr	r2, [pc, #448]	; (1000e904 <at_ble_event_get+0x30c>)
1000e744:	4293      	cmp	r3, r2
1000e746:	d008      	beq.n	1000e75a <at_ble_event_get+0x162>
1000e748:	e009      	b.n	1000e75e <at_ble_event_get+0x166>
1000e74a:	486f      	ldr	r0, [pc, #444]	; (1000e908 <at_ble_event_get+0x310>)
1000e74c:	4283      	cmp	r3, r0
1000e74e:	d106      	bne.n	1000e75e <at_ble_event_get+0x166>
1000e750:	020b      	lsls	r3, r1, #8
1000e752:	4313      	orrs	r3, r2
1000e754:	80ab      	strh	r3, [r5, #4]
1000e756:	2337      	movs	r3, #55	; 0x37
1000e758:	e002      	b.n	1000e760 <at_ble_event_get+0x168>
1000e75a:	2336      	movs	r3, #54	; 0x36
1000e75c:	e000      	b.n	1000e760 <at_ble_event_get+0x168>
1000e75e:	2300      	movs	r3, #0
1000e760:	9a03      	ldr	r2, [sp, #12]
1000e762:	7013      	strb	r3, [r2, #0]
1000e764:	e7bd      	b.n	1000e6e2 <at_ble_event_get+0xea>
1000e766:	4b69      	ldr	r3, [pc, #420]	; (1000e90c <at_ble_event_get+0x314>)
1000e768:	429c      	cmp	r4, r3
1000e76a:	d100      	bne.n	1000e76e <at_ble_event_get+0x176>
1000e76c:	e144      	b.n	1000e9f8 <at_ble_event_get+0x400>
1000e76e:	d865      	bhi.n	1000e83c <at_ble_event_get+0x244>
1000e770:	4b67      	ldr	r3, [pc, #412]	; (1000e910 <at_ble_event_get+0x318>)
1000e772:	429c      	cmp	r4, r3
1000e774:	d100      	bne.n	1000e778 <at_ble_event_get+0x180>
1000e776:	e1d5      	b.n	1000eb24 <at_ble_event_get+0x52c>
1000e778:	d82f      	bhi.n	1000e7da <at_ble_event_get+0x1e2>
1000e77a:	4b66      	ldr	r3, [pc, #408]	; (1000e914 <at_ble_event_get+0x31c>)
1000e77c:	429c      	cmp	r4, r3
1000e77e:	d100      	bne.n	1000e782 <at_ble_event_get+0x18a>
1000e780:	e1e0      	b.n	1000eb44 <at_ble_event_get+0x54c>
1000e782:	d813      	bhi.n	1000e7ac <at_ble_event_get+0x1b4>
1000e784:	4b64      	ldr	r3, [pc, #400]	; (1000e918 <at_ble_event_get+0x320>)
1000e786:	429c      	cmp	r4, r3
1000e788:	d100      	bne.n	1000e78c <at_ble_event_get+0x194>
1000e78a:	e1a3      	b.n	1000ead4 <at_ble_event_get+0x4dc>
1000e78c:	d804      	bhi.n	1000e798 <at_ble_event_get+0x1a0>
1000e78e:	2638      	movs	r6, #56	; 0x38
1000e790:	42b4      	cmp	r4, r6
1000e792:	d100      	bne.n	1000e796 <at_ble_event_get+0x19e>
1000e794:	e225      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e796:	e117      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e798:	4b60      	ldr	r3, [pc, #384]	; (1000e91c <at_ble_event_get+0x324>)
1000e79a:	429c      	cmp	r4, r3
1000e79c:	d100      	bne.n	1000e7a0 <at_ble_event_get+0x1a8>
1000e79e:	e19f      	b.n	1000eae0 <at_ble_event_get+0x4e8>
1000e7a0:	33fe      	adds	r3, #254	; 0xfe
1000e7a2:	33ff      	adds	r3, #255	; 0xff
1000e7a4:	429c      	cmp	r4, r3
1000e7a6:	d100      	bne.n	1000e7aa <at_ble_event_get+0x1b2>
1000e7a8:	e1d3      	b.n	1000eb52 <at_ble_event_get+0x55a>
1000e7aa:	e10d      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e7ac:	4b5c      	ldr	r3, [pc, #368]	; (1000e920 <at_ble_event_get+0x328>)
1000e7ae:	429c      	cmp	r4, r3
1000e7b0:	d100      	bne.n	1000e7b4 <at_ble_event_get+0x1bc>
1000e7b2:	e1a9      	b.n	1000eb08 <at_ble_event_get+0x510>
1000e7b4:	d808      	bhi.n	1000e7c8 <at_ble_event_get+0x1d0>
1000e7b6:	4b5b      	ldr	r3, [pc, #364]	; (1000e924 <at_ble_event_get+0x32c>)
1000e7b8:	429c      	cmp	r4, r3
1000e7ba:	d100      	bne.n	1000e7be <at_ble_event_get+0x1c6>
1000e7bc:	e196      	b.n	1000eaec <at_ble_event_get+0x4f4>
1000e7be:	4b5a      	ldr	r3, [pc, #360]	; (1000e928 <at_ble_event_get+0x330>)
1000e7c0:	429c      	cmp	r4, r3
1000e7c2:	d100      	bne.n	1000e7c6 <at_ble_event_get+0x1ce>
1000e7c4:	e199      	b.n	1000eafa <at_ble_event_get+0x502>
1000e7c6:	e0ff      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e7c8:	4b58      	ldr	r3, [pc, #352]	; (1000e92c <at_ble_event_get+0x334>)
1000e7ca:	429c      	cmp	r4, r3
1000e7cc:	d100      	bne.n	1000e7d0 <at_ble_event_get+0x1d8>
1000e7ce:	e1a2      	b.n	1000eb16 <at_ble_event_get+0x51e>
1000e7d0:	4b57      	ldr	r3, [pc, #348]	; (1000e930 <at_ble_event_get+0x338>)
1000e7d2:	429c      	cmp	r4, r3
1000e7d4:	d100      	bne.n	1000e7d8 <at_ble_event_get+0x1e0>
1000e7d6:	e1d4      	b.n	1000eb82 <at_ble_event_get+0x58a>
1000e7d8:	e0f6      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e7da:	4b56      	ldr	r3, [pc, #344]	; (1000e934 <at_ble_event_get+0x33c>)
1000e7dc:	429c      	cmp	r4, r3
1000e7de:	d100      	bne.n	1000e7e2 <at_ble_event_get+0x1ea>
1000e7e0:	e1c8      	b.n	1000eb74 <at_ble_event_get+0x57c>
1000e7e2:	d812      	bhi.n	1000e80a <at_ble_event_get+0x212>
1000e7e4:	4b54      	ldr	r3, [pc, #336]	; (1000e938 <at_ble_event_get+0x340>)
1000e7e6:	429c      	cmp	r4, r3
1000e7e8:	d100      	bne.n	1000e7ec <at_ble_event_get+0x1f4>
1000e7ea:	e1d1      	b.n	1000eb90 <at_ble_event_get+0x598>
1000e7ec:	d804      	bhi.n	1000e7f8 <at_ble_event_get+0x200>
1000e7ee:	4b53      	ldr	r3, [pc, #332]	; (1000e93c <at_ble_event_get+0x344>)
1000e7f0:	429c      	cmp	r4, r3
1000e7f2:	d100      	bne.n	1000e7f6 <at_ble_event_get+0x1fe>
1000e7f4:	e19b      	b.n	1000eb2e <at_ble_event_get+0x536>
1000e7f6:	e0e7      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e7f8:	4b51      	ldr	r3, [pc, #324]	; (1000e940 <at_ble_event_get+0x348>)
1000e7fa:	429c      	cmp	r4, r3
1000e7fc:	d100      	bne.n	1000e800 <at_ble_event_get+0x208>
1000e7fe:	e1ad      	b.n	1000eb5c <at_ble_event_get+0x564>
1000e800:	4b50      	ldr	r3, [pc, #320]	; (1000e944 <at_ble_event_get+0x34c>)
1000e802:	429c      	cmp	r4, r3
1000e804:	d100      	bne.n	1000e808 <at_ble_event_get+0x210>
1000e806:	e1b0      	b.n	1000eb6a <at_ble_event_get+0x572>
1000e808:	e0de      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e80a:	4b4f      	ldr	r3, [pc, #316]	; (1000e948 <at_ble_event_get+0x350>)
1000e80c:	429c      	cmp	r4, r3
1000e80e:	d100      	bne.n	1000e812 <at_ble_event_get+0x21a>
1000e810:	e0e0      	b.n	1000e9d4 <at_ble_event_get+0x3dc>
1000e812:	d809      	bhi.n	1000e828 <at_ble_event_get+0x230>
1000e814:	3b08      	subs	r3, #8
1000e816:	429c      	cmp	r4, r3
1000e818:	d100      	bne.n	1000e81c <at_ble_event_get+0x224>
1000e81a:	e0d7      	b.n	1000e9cc <at_ble_event_get+0x3d4>
1000e81c:	4b4b      	ldr	r3, [pc, #300]	; (1000e94c <at_ble_event_get+0x354>)
1000e81e:	2639      	movs	r6, #57	; 0x39
1000e820:	429c      	cmp	r4, r3
1000e822:	d100      	bne.n	1000e826 <at_ble_event_get+0x22e>
1000e824:	e1dd      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e826:	e0cf      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e828:	23d1      	movs	r3, #209	; 0xd1
1000e82a:	011b      	lsls	r3, r3, #4
1000e82c:	429c      	cmp	r4, r3
1000e82e:	d100      	bne.n	1000e832 <at_ble_event_get+0x23a>
1000e830:	e0d6      	b.n	1000e9e0 <at_ble_event_get+0x3e8>
1000e832:	4b47      	ldr	r3, [pc, #284]	; (1000e950 <at_ble_event_get+0x358>)
1000e834:	429c      	cmp	r4, r3
1000e836:	d100      	bne.n	1000e83a <at_ble_event_get+0x242>
1000e838:	e0d8      	b.n	1000e9ec <at_ble_event_get+0x3f4>
1000e83a:	e0c5      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e83c:	4b45      	ldr	r3, [pc, #276]	; (1000e954 <at_ble_event_get+0x35c>)
1000e83e:	429c      	cmp	r4, r3
1000e840:	d100      	bne.n	1000e844 <at_ble_event_get+0x24c>
1000e842:	e117      	b.n	1000ea74 <at_ble_event_get+0x47c>
1000e844:	d82e      	bhi.n	1000e8a4 <at_ble_event_get+0x2ac>
1000e846:	4b44      	ldr	r3, [pc, #272]	; (1000e958 <at_ble_event_get+0x360>)
1000e848:	429c      	cmp	r4, r3
1000e84a:	d100      	bne.n	1000e84e <at_ble_event_get+0x256>
1000e84c:	e13d      	b.n	1000eaca <at_ble_event_get+0x4d2>
1000e84e:	d812      	bhi.n	1000e876 <at_ble_event_get+0x27e>
1000e850:	4b42      	ldr	r3, [pc, #264]	; (1000e95c <at_ble_event_get+0x364>)
1000e852:	429c      	cmp	r4, r3
1000e854:	d100      	bne.n	1000e858 <at_ble_event_get+0x260>
1000e856:	e0e8      	b.n	1000ea2a <at_ble_event_get+0x432>
1000e858:	d804      	bhi.n	1000e864 <at_ble_event_get+0x26c>
1000e85a:	3b03      	subs	r3, #3
1000e85c:	429c      	cmp	r4, r3
1000e85e:	d100      	bne.n	1000e862 <at_ble_event_get+0x26a>
1000e860:	e0d0      	b.n	1000ea04 <at_ble_event_get+0x40c>
1000e862:	e0b1      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e864:	4b3e      	ldr	r3, [pc, #248]	; (1000e960 <at_ble_event_get+0x368>)
1000e866:	429c      	cmp	r4, r3
1000e868:	d100      	bne.n	1000e86c <at_ble_event_get+0x274>
1000e86a:	e0d0      	b.n	1000ea0e <at_ble_event_get+0x416>
1000e86c:	4b3d      	ldr	r3, [pc, #244]	; (1000e964 <at_ble_event_get+0x36c>)
1000e86e:	429c      	cmp	r4, r3
1000e870:	d100      	bne.n	1000e874 <at_ble_event_get+0x27c>
1000e872:	e0f9      	b.n	1000ea68 <at_ble_event_get+0x470>
1000e874:	e0a8      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e876:	4b3c      	ldr	r3, [pc, #240]	; (1000e968 <at_ble_event_get+0x370>)
1000e878:	429c      	cmp	r4, r3
1000e87a:	d100      	bne.n	1000e87e <at_ble_event_get+0x286>
1000e87c:	e0db      	b.n	1000ea36 <at_ble_event_get+0x43e>
1000e87e:	d808      	bhi.n	1000e892 <at_ble_event_get+0x29a>
1000e880:	4b3a      	ldr	r3, [pc, #232]	; (1000e96c <at_ble_event_get+0x374>)
1000e882:	429c      	cmp	r4, r3
1000e884:	d100      	bne.n	1000e888 <at_ble_event_get+0x290>
1000e886:	e11b      	b.n	1000eac0 <at_ble_event_get+0x4c8>
1000e888:	4b39      	ldr	r3, [pc, #228]	; (1000e970 <at_ble_event_get+0x378>)
1000e88a:	429c      	cmp	r4, r3
1000e88c:	d100      	bne.n	1000e890 <at_ble_event_get+0x298>
1000e88e:	e0d8      	b.n	1000ea42 <at_ble_event_get+0x44a>
1000e890:	e09a      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e892:	4b38      	ldr	r3, [pc, #224]	; (1000e974 <at_ble_event_get+0x37c>)
1000e894:	429c      	cmp	r4, r3
1000e896:	d100      	bne.n	1000e89a <at_ble_event_get+0x2a2>
1000e898:	e0d8      	b.n	1000ea4c <at_ble_event_get+0x454>
1000e89a:	4b37      	ldr	r3, [pc, #220]	; (1000e978 <at_ble_event_get+0x380>)
1000e89c:	429c      	cmp	r4, r3
1000e89e:	d100      	bne.n	1000e8a2 <at_ble_event_get+0x2aa>
1000e8a0:	e0db      	b.n	1000ea5a <at_ble_event_get+0x462>
1000e8a2:	e091      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e8a4:	4b35      	ldr	r3, [pc, #212]	; (1000e97c <at_ble_event_get+0x384>)
1000e8a6:	429c      	cmp	r4, r3
1000e8a8:	d100      	bne.n	1000e8ac <at_ble_event_get+0x2b4>
1000e8aa:	e0f7      	b.n	1000ea9c <at_ble_event_get+0x4a4>
1000e8ac:	d876      	bhi.n	1000e99c <at_ble_event_get+0x3a4>
1000e8ae:	4b34      	ldr	r3, [pc, #208]	; (1000e980 <at_ble_event_get+0x388>)
1000e8b0:	429c      	cmp	r4, r3
1000e8b2:	d100      	bne.n	1000e8b6 <at_ble_event_get+0x2be>
1000e8b4:	e0f8      	b.n	1000eaa8 <at_ble_event_get+0x4b0>
1000e8b6:	d869      	bhi.n	1000e98c <at_ble_event_get+0x394>
1000e8b8:	4b32      	ldr	r3, [pc, #200]	; (1000e984 <at_ble_event_get+0x38c>)
1000e8ba:	429c      	cmp	r4, r3
1000e8bc:	d100      	bne.n	1000e8c0 <at_ble_event_get+0x2c8>
1000e8be:	e0e0      	b.n	1000ea82 <at_ble_event_get+0x48a>
1000e8c0:	4b31      	ldr	r3, [pc, #196]	; (1000e988 <at_ble_event_get+0x390>)
1000e8c2:	429c      	cmp	r4, r3
1000e8c4:	d100      	bne.n	1000e8c8 <at_ble_event_get+0x2d0>
1000e8c6:	e0a9      	b.n	1000ea1c <at_ble_event_get+0x424>
1000e8c8:	e07e      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e8ca:	46c0      	nop			; (mov r8, r8)
1000e8cc:	1000f7a5 	.word	0x1000f7a5
1000e8d0:	10018f1c 	.word	0x10018f1c
1000e8d4:	1000c921 	.word	0x1000c921
1000e8d8:	10018f20 	.word	0x10018f20
1000e8dc:	10018f18 	.word	0x10018f18
1000e8e0:	10018f08 	.word	0x10018f08
1000e8e4:	1000e4e1 	.word	0x1000e4e1
1000e8e8:	10014477 	.word	0x10014477
1000e8ec:	0000ffff 	.word	0x0000ffff
1000e8f0:	0000fffe 	.word	0x0000fffe
1000e8f4:	1000cbb1 	.word	0x1000cbb1
1000e8f8:	1000f7a7 	.word	0x1000f7a7
1000e8fc:	0000201e 	.word	0x0000201e
1000e900:	0000201d 	.word	0x0000201d
1000e904:	00000c03 	.word	0x00000c03
1000e908:	0000201f 	.word	0x0000201f
1000e90c:	00000d1c 	.word	0x00000d1c
1000e910:	00000c0c 	.word	0x00000c0c
1000e914:	00000c02 	.word	0x00000c02
1000e918:	00000a02 	.word	0x00000a02
1000e91c:	00000a03 	.word	0x00000a03
1000e920:	00000c06 	.word	0x00000c06
1000e924:	00000c04 	.word	0x00000c04
1000e928:	00000c05 	.word	0x00000c05
1000e92c:	00000c07 	.word	0x00000c07
1000e930:	00000c09 	.word	0x00000c09
1000e934:	00000c17 	.word	0x00000c17
1000e938:	00000c12 	.word	0x00000c12
1000e93c:	00000c0d 	.word	0x00000c0d
1000e940:	00000c13 	.word	0x00000c13
1000e944:	00000c15 	.word	0x00000c15
1000e948:	00000d08 	.word	0x00000d08
1000e94c:	00000d01 	.word	0x00000d01
1000e950:	00000d15 	.word	0x00000d15
1000e954:	00000e1b 	.word	0x00000e1b
1000e958:	00000e0f 	.word	0x00000e0f
1000e95c:	00000e03 	.word	0x00000e03
1000e960:	00000e06 	.word	0x00000e06
1000e964:	00000e0a 	.word	0x00000e0a
1000e968:	00000e15 	.word	0x00000e15
1000e96c:	00000e11 	.word	0x00000e11
1000e970:	00000e13 	.word	0x00000e13
1000e974:	00000e17 	.word	0x00000e17
1000e978:	00000e19 	.word	0x00000e19
1000e97c:	00000e27 	.word	0x00000e27
1000e980:	00000e21 	.word	0x00000e21
1000e984:	00000e1c 	.word	0x00000e1c
1000e988:	00000e1d 	.word	0x00000e1d
1000e98c:	4b9f      	ldr	r3, [pc, #636]	; (1000ec0c <at_ble_event_get+0x614>)
1000e98e:	429c      	cmp	r4, r3
1000e990:	d07e      	beq.n	1000ea90 <at_ble_event_get+0x498>
1000e992:	4b9f      	ldr	r3, [pc, #636]	; (1000ec10 <at_ble_event_get+0x618>)
1000e994:	429c      	cmp	r4, r3
1000e996:	d100      	bne.n	1000e99a <at_ble_event_get+0x3a2>
1000e998:	e08c      	b.n	1000eab4 <at_ble_event_get+0x4bc>
1000e99a:	e015      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e99c:	4b9d      	ldr	r3, [pc, #628]	; (1000ec14 <at_ble_event_get+0x61c>)
1000e99e:	429c      	cmp	r4, r3
1000e9a0:	d100      	bne.n	1000e9a4 <at_ble_event_get+0x3ac>
1000e9a2:	e10a      	b.n	1000ebba <at_ble_event_get+0x5c2>
1000e9a4:	d808      	bhi.n	1000e9b8 <at_ble_event_get+0x3c0>
1000e9a6:	4b9c      	ldr	r3, [pc, #624]	; (1000ec18 <at_ble_event_get+0x620>)
1000e9a8:	429c      	cmp	r4, r3
1000e9aa:	d100      	bne.n	1000e9ae <at_ble_event_get+0x3b6>
1000e9ac:	e0f7      	b.n	1000eb9e <at_ble_event_get+0x5a6>
1000e9ae:	4b9b      	ldr	r3, [pc, #620]	; (1000ec1c <at_ble_event_get+0x624>)
1000e9b0:	429c      	cmp	r4, r3
1000e9b2:	d100      	bne.n	1000e9b6 <at_ble_event_get+0x3be>
1000e9b4:	e0fa      	b.n	1000ebac <at_ble_event_get+0x5b4>
1000e9b6:	e007      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e9b8:	4b99      	ldr	r3, [pc, #612]	; (1000ec20 <at_ble_event_get+0x628>)
1000e9ba:	429c      	cmp	r4, r3
1000e9bc:	d100      	bne.n	1000e9c0 <at_ble_event_get+0x3c8>
1000e9be:	e103      	b.n	1000ebc8 <at_ble_event_get+0x5d0>
1000e9c0:	4b98      	ldr	r3, [pc, #608]	; (1000ec24 <at_ble_event_get+0x62c>)
1000e9c2:	429c      	cmp	r4, r3
1000e9c4:	d100      	bne.n	1000e9c8 <at_ble_event_get+0x3d0>
1000e9c6:	e106      	b.n	1000ebd6 <at_ble_event_get+0x5de>
1000e9c8:	2600      	movs	r6, #0
1000e9ca:	e10a      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e9cc:	1c30      	adds	r0, r6, #0
1000e9ce:	1c29      	adds	r1, r5, #0
1000e9d0:	4b95      	ldr	r3, [pc, #596]	; (1000ec28 <at_ble_event_get+0x630>)
1000e9d2:	e014      	b.n	1000e9fe <at_ble_event_get+0x406>
1000e9d4:	1c30      	adds	r0, r6, #0
1000e9d6:	1c29      	adds	r1, r5, #0
1000e9d8:	4b94      	ldr	r3, [pc, #592]	; (1000ec2c <at_ble_event_get+0x634>)
1000e9da:	4798      	blx	r3
1000e9dc:	2604      	movs	r6, #4
1000e9de:	e100      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e9e0:	1c30      	adds	r0, r6, #0
1000e9e2:	1c29      	adds	r1, r5, #0
1000e9e4:	4b92      	ldr	r3, [pc, #584]	; (1000ec30 <at_ble_event_get+0x638>)
1000e9e6:	4798      	blx	r3
1000e9e8:	2601      	movs	r6, #1
1000e9ea:	e0fa      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e9ec:	1c30      	adds	r0, r6, #0
1000e9ee:	1c29      	adds	r1, r5, #0
1000e9f0:	4b90      	ldr	r3, [pc, #576]	; (1000ec34 <at_ble_event_get+0x63c>)
1000e9f2:	4798      	blx	r3
1000e9f4:	260f      	movs	r6, #15
1000e9f6:	e0f4      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000e9f8:	1c30      	adds	r0, r6, #0
1000e9fa:	1c29      	adds	r1, r5, #0
1000e9fc:	4b8e      	ldr	r3, [pc, #568]	; (1000ec38 <at_ble_event_get+0x640>)
1000e9fe:	4798      	blx	r3
1000ea00:	1c06      	adds	r6, r0, #0
1000ea02:	e0ee      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea04:	9801      	ldr	r0, [sp, #4]
1000ea06:	1c31      	adds	r1, r6, #0
1000ea08:	1c2a      	adds	r2, r5, #0
1000ea0a:	4b8c      	ldr	r3, [pc, #560]	; (1000ec3c <at_ble_event_get+0x644>)
1000ea0c:	e017      	b.n	1000ea3e <at_ble_event_get+0x446>
1000ea0e:	1c31      	adds	r1, r6, #0
1000ea10:	9801      	ldr	r0, [sp, #4]
1000ea12:	1c2a      	adds	r2, r5, #0
1000ea14:	4b8a      	ldr	r3, [pc, #552]	; (1000ec40 <at_ble_event_get+0x648>)
1000ea16:	4798      	blx	r3
1000ea18:	2611      	movs	r6, #17
1000ea1a:	e0e2      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea1c:	1c31      	adds	r1, r6, #0
1000ea1e:	9801      	ldr	r0, [sp, #4]
1000ea20:	1c2a      	adds	r2, r5, #0
1000ea22:	4b88      	ldr	r3, [pc, #544]	; (1000ec44 <at_ble_event_get+0x64c>)
1000ea24:	4798      	blx	r3
1000ea26:	2612      	movs	r6, #18
1000ea28:	e0db      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea2a:	1c30      	adds	r0, r6, #0
1000ea2c:	1c29      	adds	r1, r5, #0
1000ea2e:	4b86      	ldr	r3, [pc, #536]	; (1000ec48 <at_ble_event_get+0x650>)
1000ea30:	4798      	blx	r3
1000ea32:	2606      	movs	r6, #6
1000ea34:	e0d5      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea36:	1c31      	adds	r1, r6, #0
1000ea38:	1c2a      	adds	r2, r5, #0
1000ea3a:	9801      	ldr	r0, [sp, #4]
1000ea3c:	4b83      	ldr	r3, [pc, #524]	; (1000ec4c <at_ble_event_get+0x654>)
1000ea3e:	4798      	blx	r3
1000ea40:	e7de      	b.n	1000ea00 <at_ble_event_get+0x408>
1000ea42:	9801      	ldr	r0, [sp, #4]
1000ea44:	1c31      	adds	r1, r6, #0
1000ea46:	1c2a      	adds	r2, r5, #0
1000ea48:	4b81      	ldr	r3, [pc, #516]	; (1000ec50 <at_ble_event_get+0x658>)
1000ea4a:	e7f8      	b.n	1000ea3e <at_ble_event_get+0x446>
1000ea4c:	1c31      	adds	r1, r6, #0
1000ea4e:	9801      	ldr	r0, [sp, #4]
1000ea50:	1c2a      	adds	r2, r5, #0
1000ea52:	4b80      	ldr	r3, [pc, #512]	; (1000ec54 <at_ble_event_get+0x65c>)
1000ea54:	4798      	blx	r3
1000ea56:	260d      	movs	r6, #13
1000ea58:	e0c3      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea5a:	1c31      	adds	r1, r6, #0
1000ea5c:	9801      	ldr	r0, [sp, #4]
1000ea5e:	1c2a      	adds	r2, r5, #0
1000ea60:	4b7d      	ldr	r3, [pc, #500]	; (1000ec58 <at_ble_event_get+0x660>)
1000ea62:	4798      	blx	r3
1000ea64:	260e      	movs	r6, #14
1000ea66:	e0bc      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea68:	9801      	ldr	r0, [sp, #4]
1000ea6a:	1c31      	adds	r1, r6, #0
1000ea6c:	1c2a      	adds	r2, r5, #0
1000ea6e:	4b7b      	ldr	r3, [pc, #492]	; (1000ec5c <at_ble_event_get+0x664>)
1000ea70:	4798      	blx	r3
1000ea72:	e084      	b.n	1000eb7e <at_ble_event_get+0x586>
1000ea74:	1c31      	adds	r1, r6, #0
1000ea76:	9801      	ldr	r0, [sp, #4]
1000ea78:	1c2a      	adds	r2, r5, #0
1000ea7a:	4b79      	ldr	r3, [pc, #484]	; (1000ec60 <at_ble_event_get+0x668>)
1000ea7c:	4798      	blx	r3
1000ea7e:	260b      	movs	r6, #11
1000ea80:	e0af      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea82:	1c31      	adds	r1, r6, #0
1000ea84:	9801      	ldr	r0, [sp, #4]
1000ea86:	1c2a      	adds	r2, r5, #0
1000ea88:	4b76      	ldr	r3, [pc, #472]	; (1000ec64 <at_ble_event_get+0x66c>)
1000ea8a:	4798      	blx	r3
1000ea8c:	2610      	movs	r6, #16
1000ea8e:	e0a8      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea90:	1c30      	adds	r0, r6, #0
1000ea92:	1c29      	adds	r1, r5, #0
1000ea94:	4b74      	ldr	r3, [pc, #464]	; (1000ec68 <at_ble_event_get+0x670>)
1000ea96:	4798      	blx	r3
1000ea98:	2628      	movs	r6, #40	; 0x28
1000ea9a:	e0a2      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ea9c:	1c30      	adds	r0, r6, #0
1000ea9e:	1c29      	adds	r1, r5, #0
1000eaa0:	4b72      	ldr	r3, [pc, #456]	; (1000ec6c <at_ble_event_get+0x674>)
1000eaa2:	4798      	blx	r3
1000eaa4:	2629      	movs	r6, #41	; 0x29
1000eaa6:	e09c      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eaa8:	1c30      	adds	r0, r6, #0
1000eaaa:	1c29      	adds	r1, r5, #0
1000eaac:	4b70      	ldr	r3, [pc, #448]	; (1000ec70 <at_ble_event_get+0x678>)
1000eaae:	4798      	blx	r3
1000eab0:	2627      	movs	r6, #39	; 0x27
1000eab2:	e096      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eab4:	1c30      	adds	r0, r6, #0
1000eab6:	1c29      	adds	r1, r5, #0
1000eab8:	4b6e      	ldr	r3, [pc, #440]	; (1000ec74 <at_ble_event_get+0x67c>)
1000eaba:	4798      	blx	r3
1000eabc:	262a      	movs	r6, #42	; 0x2a
1000eabe:	e090      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eac0:	9801      	ldr	r0, [sp, #4]
1000eac2:	1c31      	adds	r1, r6, #0
1000eac4:	1c2a      	adds	r2, r5, #0
1000eac6:	4b6c      	ldr	r3, [pc, #432]	; (1000ec78 <at_ble_event_get+0x680>)
1000eac8:	e7b9      	b.n	1000ea3e <at_ble_event_get+0x446>
1000eaca:	9801      	ldr	r0, [sp, #4]
1000eacc:	1c31      	adds	r1, r6, #0
1000eace:	1c2a      	adds	r2, r5, #0
1000ead0:	4b6a      	ldr	r3, [pc, #424]	; (1000ec7c <at_ble_event_get+0x684>)
1000ead2:	e7b4      	b.n	1000ea3e <at_ble_event_get+0x446>
1000ead4:	1c30      	adds	r0, r6, #0
1000ead6:	1c29      	adds	r1, r5, #0
1000ead8:	4b69      	ldr	r3, [pc, #420]	; (1000ec80 <at_ble_event_get+0x688>)
1000eada:	4798      	blx	r3
1000eadc:	262b      	movs	r6, #43	; 0x2b
1000eade:	e080      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eae0:	1c30      	adds	r0, r6, #0
1000eae2:	1c29      	adds	r1, r5, #0
1000eae4:	4b67      	ldr	r3, [pc, #412]	; (1000ec84 <at_ble_event_get+0x68c>)
1000eae6:	4798      	blx	r3
1000eae8:	262c      	movs	r6, #44	; 0x2c
1000eaea:	e07a      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eaec:	1c31      	adds	r1, r6, #0
1000eaee:	9801      	ldr	r0, [sp, #4]
1000eaf0:	1c2a      	adds	r2, r5, #0
1000eaf2:	4b65      	ldr	r3, [pc, #404]	; (1000ec88 <at_ble_event_get+0x690>)
1000eaf4:	4798      	blx	r3
1000eaf6:	2613      	movs	r6, #19
1000eaf8:	e073      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eafa:	1c31      	adds	r1, r6, #0
1000eafc:	9801      	ldr	r0, [sp, #4]
1000eafe:	1c2a      	adds	r2, r5, #0
1000eb00:	4b62      	ldr	r3, [pc, #392]	; (1000ec8c <at_ble_event_get+0x694>)
1000eb02:	4798      	blx	r3
1000eb04:	2614      	movs	r6, #20
1000eb06:	e06c      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb08:	1c31      	adds	r1, r6, #0
1000eb0a:	9801      	ldr	r0, [sp, #4]
1000eb0c:	1c2a      	adds	r2, r5, #0
1000eb0e:	4b60      	ldr	r3, [pc, #384]	; (1000ec90 <at_ble_event_get+0x698>)
1000eb10:	4798      	blx	r3
1000eb12:	2615      	movs	r6, #21
1000eb14:	e065      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb16:	1c31      	adds	r1, r6, #0
1000eb18:	9801      	ldr	r0, [sp, #4]
1000eb1a:	1c2a      	adds	r2, r5, #0
1000eb1c:	4b5d      	ldr	r3, [pc, #372]	; (1000ec94 <at_ble_event_get+0x69c>)
1000eb1e:	4798      	blx	r3
1000eb20:	2616      	movs	r6, #22
1000eb22:	e05e      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb24:	9801      	ldr	r0, [sp, #4]
1000eb26:	1c31      	adds	r1, r6, #0
1000eb28:	1c2a      	adds	r2, r5, #0
1000eb2a:	4b5b      	ldr	r3, [pc, #364]	; (1000ec98 <at_ble_event_get+0x6a0>)
1000eb2c:	e787      	b.n	1000ea3e <at_ble_event_get+0x446>
1000eb2e:	1c31      	adds	r1, r6, #0
1000eb30:	9801      	ldr	r0, [sp, #4]
1000eb32:	1c2a      	adds	r2, r5, #0
1000eb34:	4b58      	ldr	r3, [pc, #352]	; (1000ec98 <at_ble_event_get+0x6a0>)
1000eb36:	4798      	blx	r3
1000eb38:	88a9      	ldrh	r1, [r5, #4]
1000eb3a:	1c06      	adds	r6, r0, #0
1000eb3c:	4b57      	ldr	r3, [pc, #348]	; (1000ec9c <at_ble_event_get+0x6a4>)
1000eb3e:	8828      	ldrh	r0, [r5, #0]
1000eb40:	4798      	blx	r3
1000eb42:	e04e      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb44:	1c31      	adds	r1, r6, #0
1000eb46:	9801      	ldr	r0, [sp, #4]
1000eb48:	1c2a      	adds	r2, r5, #0
1000eb4a:	4b55      	ldr	r3, [pc, #340]	; (1000eca0 <at_ble_event_get+0x6a8>)
1000eb4c:	4798      	blx	r3
1000eb4e:	2623      	movs	r6, #35	; 0x23
1000eb50:	e047      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb52:	9801      	ldr	r0, [sp, #4]
1000eb54:	1c31      	adds	r1, r6, #0
1000eb56:	1c2a      	adds	r2, r5, #0
1000eb58:	4b52      	ldr	r3, [pc, #328]	; (1000eca4 <at_ble_event_get+0x6ac>)
1000eb5a:	e770      	b.n	1000ea3e <at_ble_event_get+0x446>
1000eb5c:	9b01      	ldr	r3, [sp, #4]
1000eb5e:	1c30      	adds	r0, r6, #0
1000eb60:	0a1f      	lsrs	r7, r3, #8
1000eb62:	802f      	strh	r7, [r5, #0]
1000eb64:	1c29      	adds	r1, r5, #0
1000eb66:	4b50      	ldr	r3, [pc, #320]	; (1000eca8 <at_ble_event_get+0x6b0>)
1000eb68:	e749      	b.n	1000e9fe <at_ble_event_get+0x406>
1000eb6a:	9801      	ldr	r0, [sp, #4]
1000eb6c:	1c31      	adds	r1, r6, #0
1000eb6e:	1c2a      	adds	r2, r5, #0
1000eb70:	4b4e      	ldr	r3, [pc, #312]	; (1000ecac <at_ble_event_get+0x6b4>)
1000eb72:	e764      	b.n	1000ea3e <at_ble_event_get+0x446>
1000eb74:	1c30      	adds	r0, r6, #0
1000eb76:	1c29      	adds	r1, r5, #0
1000eb78:	9a01      	ldr	r2, [sp, #4]
1000eb7a:	4b4d      	ldr	r3, [pc, #308]	; (1000ecb0 <at_ble_event_get+0x6b8>)
1000eb7c:	4798      	blx	r3
1000eb7e:	263b      	movs	r6, #59	; 0x3b
1000eb80:	e02f      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb82:	1c31      	adds	r1, r6, #0
1000eb84:	9801      	ldr	r0, [sp, #4]
1000eb86:	1c2a      	adds	r2, r5, #0
1000eb88:	4b4a      	ldr	r3, [pc, #296]	; (1000ecb4 <at_ble_event_get+0x6bc>)
1000eb8a:	4798      	blx	r3
1000eb8c:	2618      	movs	r6, #24
1000eb8e:	e028      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb90:	1c31      	adds	r1, r6, #0
1000eb92:	9801      	ldr	r0, [sp, #4]
1000eb94:	1c2a      	adds	r2, r5, #0
1000eb96:	4b48      	ldr	r3, [pc, #288]	; (1000ecb8 <at_ble_event_get+0x6c0>)
1000eb98:	4798      	blx	r3
1000eb9a:	2620      	movs	r6, #32
1000eb9c:	e021      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000eb9e:	1c31      	adds	r1, r6, #0
1000eba0:	9801      	ldr	r0, [sp, #4]
1000eba2:	1c2a      	adds	r2, r5, #0
1000eba4:	4b45      	ldr	r3, [pc, #276]	; (1000ecbc <at_ble_event_get+0x6c4>)
1000eba6:	4798      	blx	r3
1000eba8:	2633      	movs	r6, #51	; 0x33
1000ebaa:	e01a      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ebac:	1c31      	adds	r1, r6, #0
1000ebae:	9801      	ldr	r0, [sp, #4]
1000ebb0:	1c2a      	adds	r2, r5, #0
1000ebb2:	4b43      	ldr	r3, [pc, #268]	; (1000ecc0 <at_ble_event_get+0x6c8>)
1000ebb4:	4798      	blx	r3
1000ebb6:	2630      	movs	r6, #48	; 0x30
1000ebb8:	e013      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ebba:	1c31      	adds	r1, r6, #0
1000ebbc:	9801      	ldr	r0, [sp, #4]
1000ebbe:	1c2a      	adds	r2, r5, #0
1000ebc0:	4b40      	ldr	r3, [pc, #256]	; (1000ecc4 <at_ble_event_get+0x6cc>)
1000ebc2:	4798      	blx	r3
1000ebc4:	2634      	movs	r6, #52	; 0x34
1000ebc6:	e00c      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ebc8:	1c31      	adds	r1, r6, #0
1000ebca:	9801      	ldr	r0, [sp, #4]
1000ebcc:	1c2a      	adds	r2, r5, #0
1000ebce:	4b3e      	ldr	r3, [pc, #248]	; (1000ecc8 <at_ble_event_get+0x6d0>)
1000ebd0:	4798      	blx	r3
1000ebd2:	2635      	movs	r6, #53	; 0x35
1000ebd4:	e005      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ebd6:	1c31      	adds	r1, r6, #0
1000ebd8:	9801      	ldr	r0, [sp, #4]
1000ebda:	1c2a      	adds	r2, r5, #0
1000ebdc:	4b3b      	ldr	r3, [pc, #236]	; (1000eccc <at_ble_event_get+0x6d4>)
1000ebde:	4798      	blx	r3
1000ebe0:	2632      	movs	r6, #50	; 0x32
1000ebe2:	9b03      	ldr	r3, [sp, #12]
1000ebe4:	701e      	strb	r6, [r3, #0]
1000ebe6:	2300      	movs	r3, #0
1000ebe8:	9302      	str	r3, [sp, #8]
1000ebea:	e57a      	b.n	1000e6e2 <at_ble_event_get+0xea>
1000ebec:	23d0      	movs	r3, #208	; 0xd0
1000ebee:	e7fb      	b.n	1000ebe8 <at_ble_event_get+0x5f0>
1000ebf0:	9b01      	ldr	r3, [sp, #4]
1000ebf2:	9e02      	ldr	r6, [sp, #8]
1000ebf4:	2bbb      	cmp	r3, #187	; 0xbb
1000ebf6:	d000      	beq.n	1000ebfa <at_ble_event_get+0x602>
1000ebf8:	e6e6      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000ebfa:	e7f2      	b.n	1000ebe2 <at_ble_event_get+0x5ea>
1000ebfc:	9b02      	ldr	r3, [sp, #8]
1000ebfe:	2b00      	cmp	r3, #0
1000ec00:	d000      	beq.n	1000ec04 <at_ble_event_get+0x60c>
1000ec02:	e56e      	b.n	1000e6e2 <at_ble_event_get+0xea>
1000ec04:	e6e0      	b.n	1000e9c8 <at_ble_event_get+0x3d0>
1000ec06:	9802      	ldr	r0, [sp, #8]
1000ec08:	b007      	add	sp, #28
1000ec0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec0c:	00000e22 	.word	0x00000e22
1000ec10:	00000e25 	.word	0x00000e25
1000ec14:	00001b05 	.word	0x00001b05
1000ec18:	00001b01 	.word	0x00001b01
1000ec1c:	00001b03 	.word	0x00001b03
1000ec20:	00001b06 	.word	0x00001b06
1000ec24:	00001b08 	.word	0x00001b08
1000ec28:	100105d1 	.word	0x100105d1
1000ec2c:	100105b5 	.word	0x100105b5
1000ec30:	10010719 	.word	0x10010719
1000ec34:	10010809 	.word	0x10010809
1000ec38:	1001082d 	.word	0x1001082d
1000ec3c:	1000f949 	.word	0x1000f949
1000ec40:	100101c9 	.word	0x100101c9
1000ec44:	10010245 	.word	0x10010245
1000ec48:	1000fc01 	.word	0x1000fc01
1000ec4c:	1000fc9d 	.word	0x1000fc9d
1000ec50:	1000fd75 	.word	0x1000fd75
1000ec54:	1000fffd 	.word	0x1000fffd
1000ec58:	1001009d 	.word	0x1001009d
1000ec5c:	10010155 	.word	0x10010155
1000ec60:	1001017d 	.word	0x1001017d
1000ec64:	10010193 	.word	0x10010193
1000ec68:	1001025d 	.word	0x1001025d
1000ec6c:	1001028b 	.word	0x1001028b
1000ec70:	100102a1 	.word	0x100102a1
1000ec74:	100102cb 	.word	0x100102cb
1000ec78:	100100f9 	.word	0x100100f9
1000ec7c:	10010123 	.word	0x10010123
1000ec80:	1000f389 	.word	0x1000f389
1000ec84:	1000f3b5 	.word	0x1000f3b5
1000ec88:	100109d5 	.word	0x100109d5
1000ec8c:	10010a11 	.word	0x10010a11
1000ec90:	10010a59 	.word	0x10010a59
1000ec94:	10010a9d 	.word	0x10010a9d
1000ec98:	10010ad1 	.word	0x10010ad1
1000ec9c:	10010995 	.word	0x10010995
1000eca0:	10010b9d 	.word	0x10010b9d
1000eca4:	10010b25 	.word	0x10010b25
1000eca8:	1000f2e1 	.word	0x1000f2e1
1000ecac:	1000f34d 	.word	0x1000f34d
1000ecb0:	1000f311 	.word	0x1000f311
1000ecb4:	10010bad 	.word	0x10010bad
1000ecb8:	10010bed 	.word	0x10010bed
1000ecbc:	10010d39 	.word	0x10010d39
1000ecc0:	10010d43 	.word	0x10010d43
1000ecc4:	10010d49 	.word	0x10010d49
1000ecc8:	10010d4f 	.word	0x10010d4f
1000eccc:	10010d5b 	.word	0x10010d5b

1000ecd0 <internal_event_flush>:
1000ecd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ecd2:	490e      	ldr	r1, [pc, #56]	; (1000ed0c <internal_event_flush+0x3c>)
1000ecd4:	2400      	movs	r4, #0
1000ecd6:	680b      	ldr	r3, [r1, #0]
1000ecd8:	1c0f      	adds	r7, r1, #0
1000ecda:	1c1e      	adds	r6, r3, #0
1000ecdc:	4a0c      	ldr	r2, [pc, #48]	; (1000ed10 <internal_event_flush+0x40>)
1000ecde:	6815      	ldr	r5, [r2, #0]
1000ece0:	9201      	str	r2, [sp, #4]
1000ece2:	2b00      	cmp	r3, #0
1000ece4:	d00e      	beq.n	1000ed04 <internal_event_flush+0x34>
1000ece6:	889a      	ldrh	r2, [r3, #4]
1000ece8:	6819      	ldr	r1, [r3, #0]
1000ecea:	4282      	cmp	r2, r0
1000ecec:	d107      	bne.n	1000ecfe <internal_event_flush+0x2e>
1000ecee:	2c00      	cmp	r4, #0
1000ecf0:	d001      	beq.n	1000ecf6 <internal_event_flush+0x26>
1000ecf2:	6021      	str	r1, [r4, #0]
1000ecf4:	e000      	b.n	1000ecf8 <internal_event_flush+0x28>
1000ecf6:	1c0e      	adds	r6, r1, #0
1000ecf8:	601d      	str	r5, [r3, #0]
1000ecfa:	1c1d      	adds	r5, r3, #0
1000ecfc:	1c23      	adds	r3, r4, #0
1000ecfe:	1c1c      	adds	r4, r3, #0
1000ed00:	1c0b      	adds	r3, r1, #0
1000ed02:	e7ee      	b.n	1000ece2 <internal_event_flush+0x12>
1000ed04:	9b01      	ldr	r3, [sp, #4]
1000ed06:	603e      	str	r6, [r7, #0]
1000ed08:	601d      	str	r5, [r3, #0]
1000ed0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ed0c:	10018f1c 	.word	0x10018f1c
1000ed10:	10018f20 	.word	0x10018f20

1000ed14 <internal_conn_flush>:
1000ed14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed16:	4a12      	ldr	r2, [pc, #72]	; (1000ed60 <internal_conn_flush+0x4c>)
1000ed18:	9000      	str	r0, [sp, #0]
1000ed1a:	6813      	ldr	r3, [r2, #0]
1000ed1c:	4811      	ldr	r0, [pc, #68]	; (1000ed64 <internal_conn_flush+0x50>)
1000ed1e:	1c1f      	adds	r7, r3, #0
1000ed20:	2100      	movs	r1, #0
1000ed22:	4684      	mov	ip, r0
1000ed24:	6804      	ldr	r4, [r0, #0]
1000ed26:	9201      	str	r2, [sp, #4]
1000ed28:	2b00      	cmp	r3, #0
1000ed2a:	d014      	beq.n	1000ed56 <internal_conn_flush+0x42>
1000ed2c:	88d8      	ldrh	r0, [r3, #6]
1000ed2e:	9a00      	ldr	r2, [sp, #0]
1000ed30:	681d      	ldr	r5, [r3, #0]
1000ed32:	0a06      	lsrs	r6, r0, #8
1000ed34:	4296      	cmp	r6, r2
1000ed36:	d10b      	bne.n	1000ed50 <internal_conn_flush+0x3c>
1000ed38:	26fd      	movs	r6, #253	; 0xfd
1000ed3a:	4006      	ands	r6, r0
1000ed3c:	2e0c      	cmp	r6, #12
1000ed3e:	d107      	bne.n	1000ed50 <internal_conn_flush+0x3c>
1000ed40:	2900      	cmp	r1, #0
1000ed42:	d001      	beq.n	1000ed48 <internal_conn_flush+0x34>
1000ed44:	600d      	str	r5, [r1, #0]
1000ed46:	e000      	b.n	1000ed4a <internal_conn_flush+0x36>
1000ed48:	1c2f      	adds	r7, r5, #0
1000ed4a:	601c      	str	r4, [r3, #0]
1000ed4c:	1c1c      	adds	r4, r3, #0
1000ed4e:	1c0b      	adds	r3, r1, #0
1000ed50:	1c19      	adds	r1, r3, #0
1000ed52:	1c2b      	adds	r3, r5, #0
1000ed54:	e7e8      	b.n	1000ed28 <internal_conn_flush+0x14>
1000ed56:	9b01      	ldr	r3, [sp, #4]
1000ed58:	601f      	str	r7, [r3, #0]
1000ed5a:	4663      	mov	r3, ip
1000ed5c:	601c      	str	r4, [r3, #0]
1000ed5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ed60:	10018f1c 	.word	0x10018f1c
1000ed64:	10018f20 	.word	0x10018f20

1000ed68 <at_ble_device_name_set>:
1000ed68:	b530      	push	{r4, r5, lr}
1000ed6a:	23cf      	movs	r3, #207	; 0xcf
1000ed6c:	2800      	cmp	r0, #0
1000ed6e:	d010      	beq.n	1000ed92 <at_ble_device_name_set+0x2a>
1000ed70:	1e4a      	subs	r2, r1, #1
1000ed72:	2a1f      	cmp	r2, #31
1000ed74:	d80d      	bhi.n	1000ed92 <at_ble_device_name_set+0x2a>
1000ed76:	4a08      	ldr	r2, [pc, #32]	; (1000ed98 <at_ble_device_name_set+0x30>)
1000ed78:	1c13      	adds	r3, r2, #0
1000ed7a:	33aa      	adds	r3, #170	; 0xaa
1000ed7c:	8019      	strh	r1, [r3, #0]
1000ed7e:	2300      	movs	r3, #0
1000ed80:	1c1c      	adds	r4, r3, #0
1000ed82:	5cc5      	ldrb	r5, [r0, r3]
1000ed84:	34ac      	adds	r4, #172	; 0xac
1000ed86:	3301      	adds	r3, #1
1000ed88:	5515      	strb	r5, [r2, r4]
1000ed8a:	b2dc      	uxtb	r4, r3
1000ed8c:	428c      	cmp	r4, r1
1000ed8e:	d3f7      	bcc.n	1000ed80 <at_ble_device_name_set+0x18>
1000ed90:	2300      	movs	r3, #0
1000ed92:	1c18      	adds	r0, r3, #0
1000ed94:	bd30      	pop	{r4, r5, pc}
1000ed96:	46c0      	nop			; (mov r8, r8)
1000ed98:	10019dba 	.word	0x10019dba

1000ed9c <at_ble_addr_get>:
1000ed9c:	b510      	push	{r4, lr}
1000ed9e:	1c04      	adds	r4, r0, #0
1000eda0:	20cf      	movs	r0, #207	; 0xcf
1000eda2:	2c00      	cmp	r4, #0
1000eda4:	d006      	beq.n	1000edb4 <at_ble_addr_get+0x18>
1000eda6:	4b04      	ldr	r3, [pc, #16]	; (1000edb8 <at_ble_addr_get+0x1c>)
1000eda8:	38ce      	subs	r0, #206	; 0xce
1000edaa:	1c21      	adds	r1, r4, #0
1000edac:	4798      	blx	r3
1000edae:	4b03      	ldr	r3, [pc, #12]	; (1000edbc <at_ble_addr_get+0x20>)
1000edb0:	791b      	ldrb	r3, [r3, #4]
1000edb2:	7023      	strb	r3, [r4, #0]
1000edb4:	bd10      	pop	{r4, pc}
1000edb6:	46c0      	nop			; (mov r8, r8)
1000edb8:	10010465 	.word	0x10010465
1000edbc:	10019dba 	.word	0x10019dba

1000edc0 <at_ble_set_dev_config>:
1000edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000edc2:	7906      	ldrb	r6, [r0, #4]
1000edc4:	b089      	sub	sp, #36	; 0x24
1000edc6:	25cf      	movs	r5, #207	; 0xcf
1000edc8:	2e03      	cmp	r6, #3
1000edca:	d838      	bhi.n	1000ee3e <at_ble_set_dev_config+0x7e>
1000edcc:	7803      	ldrb	r3, [r0, #0]
1000edce:	3511      	adds	r5, #17
1000edd0:	2b0f      	cmp	r3, #15
1000edd2:	d834      	bhi.n	1000ee3e <at_ble_set_dev_config+0x7e>
1000edd4:	2380      	movs	r3, #128	; 0x80
1000edd6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000edd8:	3d11      	subs	r5, #17
1000edda:	009b      	lsls	r3, r3, #2
1000eddc:	429f      	cmp	r7, r3
1000edde:	d82e      	bhi.n	1000ee3e <at_ble_set_dev_config+0x7e>
1000ede0:	7fc5      	ldrb	r5, [r0, #31]
1000ede2:	7f83      	ldrb	r3, [r0, #30]
1000ede4:	01ad      	lsls	r5, r5, #6
1000ede6:	015b      	lsls	r3, r3, #5
1000ede8:	431d      	orrs	r5, r3
1000edea:	7ec3      	ldrb	r3, [r0, #27]
1000edec:	431d      	orrs	r5, r3
1000edee:	7f43      	ldrb	r3, [r0, #29]
1000edf0:	011b      	lsls	r3, r3, #4
1000edf2:	431d      	orrs	r5, r3
1000edf4:	7f03      	ldrb	r3, [r0, #28]
1000edf6:	009b      	lsls	r3, r3, #2
1000edf8:	431d      	orrs	r5, r3
1000edfa:	4b12      	ldr	r3, [pc, #72]	; (1000ee44 <at_ble_set_dev_config+0x84>)
1000edfc:	b2ed      	uxtb	r5, r5
1000edfe:	711e      	strb	r6, [r3, #4]
1000ee00:	7903      	ldrb	r3, [r0, #4]
1000ee02:	3b02      	subs	r3, #2
1000ee04:	2b01      	cmp	r3, #1
1000ee06:	d801      	bhi.n	1000ee0c <at_ble_set_dev_config+0x4c>
1000ee08:	2302      	movs	r3, #2
1000ee0a:	7103      	strb	r3, [r0, #4]
1000ee0c:	1c04      	adds	r4, r0, #0
1000ee0e:	1c23      	adds	r3, r4, #0
1000ee10:	330b      	adds	r3, #11
1000ee12:	8861      	ldrh	r1, [r4, #2]
1000ee14:	9307      	str	r3, [sp, #28]
1000ee16:	7923      	ldrb	r3, [r4, #4]
1000ee18:	7800      	ldrb	r0, [r0, #0]
1000ee1a:	9300      	str	r3, [sp, #0]
1000ee1c:	9501      	str	r5, [sp, #4]
1000ee1e:	8c25      	ldrh	r5, [r4, #32]
1000ee20:	1d62      	adds	r2, r4, #5
1000ee22:	9502      	str	r5, [sp, #8]
1000ee24:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ee26:	9b07      	ldr	r3, [sp, #28]
1000ee28:	9503      	str	r5, [sp, #12]
1000ee2a:	9704      	str	r7, [sp, #16]
1000ee2c:	4d06      	ldr	r5, [pc, #24]	; (1000ee48 <at_ble_set_dev_config+0x88>)
1000ee2e:	47a8      	blx	r5
1000ee30:	7126      	strb	r6, [r4, #4]
1000ee32:	1c05      	adds	r5, r0, #0
1000ee34:	1c21      	adds	r1, r4, #0
1000ee36:	4803      	ldr	r0, [pc, #12]	; (1000ee44 <at_ble_set_dev_config+0x84>)
1000ee38:	2226      	movs	r2, #38	; 0x26
1000ee3a:	4b04      	ldr	r3, [pc, #16]	; (1000ee4c <at_ble_set_dev_config+0x8c>)
1000ee3c:	4798      	blx	r3
1000ee3e:	1c28      	adds	r0, r5, #0
1000ee40:	b009      	add	sp, #36	; 0x24
1000ee42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee44:	10019dba 	.word	0x10019dba
1000ee48:	1001035d 	.word	0x1001035d
1000ee4c:	1001443b 	.word	0x1001443b

1000ee50 <at_ble_init>:
1000ee50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee52:	b087      	sub	sp, #28
1000ee54:	af03      	add	r7, sp, #12
1000ee56:	4954      	ldr	r1, [pc, #336]	; (1000efa8 <at_ble_init+0x158>)
1000ee58:	220b      	movs	r2, #11
1000ee5a:	4b54      	ldr	r3, [pc, #336]	; (1000efac <at_ble_init+0x15c>)
1000ee5c:	1c04      	adds	r4, r0, #0
1000ee5e:	1c38      	adds	r0, r7, #0
1000ee60:	4798      	blx	r3
1000ee62:	2205      	movs	r2, #5
1000ee64:	4b52      	ldr	r3, [pc, #328]	; (1000efb0 <at_ble_init+0x160>)
1000ee66:	2640      	movs	r6, #64	; 0x40
1000ee68:	801a      	strh	r2, [r3, #0]
1000ee6a:	2300      	movs	r3, #0
1000ee6c:	4a51      	ldr	r2, [pc, #324]	; (1000efb4 <at_ble_init+0x164>)
1000ee6e:	6013      	str	r3, [r2, #0]
1000ee70:	4a51      	ldr	r2, [pc, #324]	; (1000efb8 <at_ble_init+0x168>)
1000ee72:	7013      	strb	r3, [r2, #0]
1000ee74:	4a51      	ldr	r2, [pc, #324]	; (1000efbc <at_ble_init+0x16c>)
1000ee76:	7013      	strb	r3, [r2, #0]
1000ee78:	4b51      	ldr	r3, [pc, #324]	; (1000efc0 <at_ble_init+0x170>)
1000ee7a:	4798      	blx	r3
1000ee7c:	4b51      	ldr	r3, [pc, #324]	; (1000efc4 <at_ble_init+0x174>)
1000ee7e:	4798      	blx	r3
1000ee80:	4b51      	ldr	r3, [pc, #324]	; (1000efc8 <at_ble_init+0x178>)
1000ee82:	4798      	blx	r3
1000ee84:	4b51      	ldr	r3, [pc, #324]	; (1000efcc <at_ble_init+0x17c>)
1000ee86:	4798      	blx	r3
1000ee88:	2c00      	cmp	r4, #0
1000ee8a:	d100      	bne.n	1000ee8e <at_ble_init+0x3e>
1000ee8c:	e089      	b.n	1000efa2 <at_ble_init+0x152>
1000ee8e:	68a3      	ldr	r3, [r4, #8]
1000ee90:	2b00      	cmp	r3, #0
1000ee92:	d100      	bne.n	1000ee96 <at_ble_init+0x46>
1000ee94:	e085      	b.n	1000efa2 <at_ble_init+0x152>
1000ee96:	6923      	ldr	r3, [r4, #16]
1000ee98:	2b00      	cmp	r3, #0
1000ee9a:	d100      	bne.n	1000ee9e <at_ble_init+0x4e>
1000ee9c:	e081      	b.n	1000efa2 <at_ble_init+0x152>
1000ee9e:	6820      	ldr	r0, [r4, #0]
1000eea0:	2800      	cmp	r0, #0
1000eea2:	d102      	bne.n	1000eeaa <at_ble_init+0x5a>
1000eea4:	6863      	ldr	r3, [r4, #4]
1000eea6:	2b00      	cmp	r3, #0
1000eea8:	d17b      	bne.n	1000efa2 <at_ble_init+0x152>
1000eeaa:	4b49      	ldr	r3, [pc, #292]	; (1000efd0 <at_ble_init+0x180>)
1000eeac:	6861      	ldr	r1, [r4, #4]
1000eeae:	4798      	blx	r3
1000eeb0:	4b48      	ldr	r3, [pc, #288]	; (1000efd4 <at_ble_init+0x184>)
1000eeb2:	4798      	blx	r3
1000eeb4:	2801      	cmp	r0, #1
1000eeb6:	d901      	bls.n	1000eebc <at_ble_init+0x6c>
1000eeb8:	26e2      	movs	r6, #226	; 0xe2
1000eeba:	e072      	b.n	1000efa2 <at_ble_init+0x152>
1000eebc:	4846      	ldr	r0, [pc, #280]	; (1000efd8 <at_ble_init+0x188>)
1000eebe:	4b47      	ldr	r3, [pc, #284]	; (1000efdc <at_ble_init+0x18c>)
1000eec0:	4798      	blx	r3
1000eec2:	2800      	cmp	r0, #0
1000eec4:	d1f8      	bne.n	1000eeb8 <at_ble_init+0x68>
1000eec6:	1c20      	adds	r0, r4, #0
1000eec8:	4b45      	ldr	r3, [pc, #276]	; (1000efe0 <at_ble_init+0x190>)
1000eeca:	4798      	blx	r3
1000eecc:	68e0      	ldr	r0, [r4, #12]
1000eece:	68a1      	ldr	r1, [r4, #8]
1000eed0:	4b44      	ldr	r3, [pc, #272]	; (1000efe4 <at_ble_init+0x194>)
1000eed2:	4798      	blx	r3
1000eed4:	466b      	mov	r3, sp
1000eed6:	2201      	movs	r2, #1
1000eed8:	1cdc      	adds	r4, r3, #3
1000eeda:	1c20      	adds	r0, r4, #0
1000eedc:	a901      	add	r1, sp, #4
1000eede:	4252      	negs	r2, r2
1000eee0:	4b41      	ldr	r3, [pc, #260]	; (1000efe8 <at_ble_init+0x198>)
1000eee2:	4798      	blx	r3
1000eee4:	2800      	cmp	r0, #0
1000eee6:	d102      	bne.n	1000eeee <at_ble_init+0x9e>
1000eee8:	7823      	ldrb	r3, [r4, #0]
1000eeea:	2b39      	cmp	r3, #57	; 0x39
1000eeec:	d1f2      	bne.n	1000eed4 <at_ble_init+0x84>
1000eeee:	4b3f      	ldr	r3, [pc, #252]	; (1000efec <at_ble_init+0x19c>)
1000eef0:	4798      	blx	r3
1000eef2:	1e06      	subs	r6, r0, #0
1000eef4:	d155      	bne.n	1000efa2 <at_ble_init+0x152>
1000eef6:	1c03      	adds	r3, r0, #0
1000eef8:	2101      	movs	r1, #1
1000eefa:	4a3d      	ldr	r2, [pc, #244]	; (1000eff0 <at_ble_init+0x1a0>)
1000eefc:	4249      	negs	r1, r1
1000eefe:	189a      	adds	r2, r3, r2
1000ef00:	3312      	adds	r3, #18
1000ef02:	8151      	strh	r1, [r2, #10]
1000ef04:	2b90      	cmp	r3, #144	; 0x90
1000ef06:	d1f7      	bne.n	1000eef8 <at_ble_init+0xa8>
1000ef08:	4c3a      	ldr	r4, [pc, #232]	; (1000eff4 <at_ble_init+0x1a4>)
1000ef0a:	3b81      	subs	r3, #129	; 0x81
1000ef0c:	7023      	strb	r3, [r4, #0]
1000ef0e:	4b3a      	ldr	r3, [pc, #232]	; (1000eff8 <at_ble_init+0x1a8>)
1000ef10:	4a3a      	ldr	r2, [pc, #232]	; (1000effc <at_ble_init+0x1ac>)
1000ef12:	8063      	strh	r3, [r4, #2]
1000ef14:	2300      	movs	r3, #0
1000ef16:	7123      	strb	r3, [r4, #4]
1000ef18:	3301      	adds	r3, #1
1000ef1a:	1e58      	subs	r0, r3, #1
1000ef1c:	0119      	lsls	r1, r3, #4
1000ef1e:	4301      	orrs	r1, r0
1000ef20:	3302      	adds	r3, #2
1000ef22:	7011      	strb	r1, [r2, #0]
1000ef24:	3201      	adds	r2, #1
1000ef26:	2b21      	cmp	r3, #33	; 0x21
1000ef28:	d1f7      	bne.n	1000ef1a <at_ble_init+0xca>
1000ef2a:	33e0      	adds	r3, #224	; 0xe0
1000ef2c:	33ff      	adds	r3, #255	; 0xff
1000ef2e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ef30:	1c23      	adds	r3, r4, #0
1000ef32:	2500      	movs	r5, #0
1000ef34:	3373      	adds	r3, #115	; 0x73
1000ef36:	701d      	strb	r5, [r3, #0]
1000ef38:	1c23      	adds	r3, r4, #0
1000ef3a:	3372      	adds	r3, #114	; 0x72
1000ef3c:	701d      	strb	r5, [r3, #0]
1000ef3e:	1c23      	adds	r3, r4, #0
1000ef40:	3376      	adds	r3, #118	; 0x76
1000ef42:	701d      	strb	r5, [r3, #0]
1000ef44:	1c23      	adds	r3, r4, #0
1000ef46:	33cc      	adds	r3, #204	; 0xcc
1000ef48:	801d      	strh	r5, [r3, #0]
1000ef4a:	1c22      	adds	r2, r4, #0
1000ef4c:	23a0      	movs	r3, #160	; 0xa0
1000ef4e:	32d0      	adds	r2, #208	; 0xd0
1000ef50:	005b      	lsls	r3, r3, #1
1000ef52:	8013      	strh	r3, [r2, #0]
1000ef54:	1c22      	adds	r2, r4, #0
1000ef56:	32ce      	adds	r2, #206	; 0xce
1000ef58:	8013      	strh	r3, [r2, #0]
1000ef5a:	1c23      	adds	r3, r4, #0
1000ef5c:	33d2      	adds	r3, #210	; 0xd2
1000ef5e:	801d      	strh	r5, [r3, #0]
1000ef60:	22fa      	movs	r2, #250	; 0xfa
1000ef62:	1c23      	adds	r3, r4, #0
1000ef64:	0052      	lsls	r2, r2, #1
1000ef66:	33d4      	adds	r3, #212	; 0xd4
1000ef68:	801a      	strh	r2, [r3, #0]
1000ef6a:	1c23      	adds	r3, r4, #0
1000ef6c:	33d6      	adds	r3, #214	; 0xd6
1000ef6e:	701d      	strb	r5, [r3, #0]
1000ef70:	1c20      	adds	r0, r4, #0
1000ef72:	4b23      	ldr	r3, [pc, #140]	; (1000f000 <at_ble_init+0x1b0>)
1000ef74:	76e5      	strb	r5, [r4, #27]
1000ef76:	7725      	strb	r5, [r4, #28]
1000ef78:	7765      	strb	r5, [r4, #29]
1000ef7a:	77a5      	strb	r5, [r4, #30]
1000ef7c:	77e5      	strb	r5, [r4, #31]
1000ef7e:	8425      	strh	r5, [r4, #32]
1000ef80:	8465      	strh	r5, [r4, #34]	; 0x22
1000ef82:	4798      	blx	r3
1000ef84:	1c23      	adds	r3, r4, #0
1000ef86:	2207      	movs	r2, #7
1000ef88:	3374      	adds	r3, #116	; 0x74
1000ef8a:	701a      	strb	r2, [r3, #0]
1000ef8c:	1c23      	adds	r3, r4, #0
1000ef8e:	3204      	adds	r2, #4
1000ef90:	33aa      	adds	r3, #170	; 0xaa
1000ef92:	801a      	strh	r2, [r3, #0]
1000ef94:	1c2b      	adds	r3, r5, #0
1000ef96:	5d7a      	ldrb	r2, [r7, r5]
1000ef98:	33ac      	adds	r3, #172	; 0xac
1000ef9a:	3501      	adds	r5, #1
1000ef9c:	54e2      	strb	r2, [r4, r3]
1000ef9e:	2d0b      	cmp	r5, #11
1000efa0:	d1f8      	bne.n	1000ef94 <at_ble_init+0x144>
1000efa2:	1c30      	adds	r0, r6, #0
1000efa4:	b007      	add	sp, #28
1000efa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000efa8:	1001734d 	.word	0x1001734d
1000efac:	1001443b 	.word	0x1001443b
1000efb0:	10019d28 	.word	0x10019d28
1000efb4:	10018fcc 	.word	0x10018fcc
1000efb8:	10018f2c 	.word	0x10018f2c
1000efbc:	100175bd 	.word	0x100175bd
1000efc0:	10010bfd 	.word	0x10010bfd
1000efc4:	1000f0e1 	.word	0x1000f0e1
1000efc8:	1000f15d 	.word	0x1000f15d
1000efcc:	1000f37d 	.word	0x1000f37d
1000efd0:	1000f199 	.word	0x1000f199
1000efd4:	1000c605 	.word	0x1000c605
1000efd8:	1000f67d 	.word	0x1000f67d
1000efdc:	1000c875 	.word	0x1000c875
1000efe0:	1000f725 	.word	0x1000f725
1000efe4:	1000e53d 	.word	0x1000e53d
1000efe8:	1000e5f9 	.word	0x1000e5f9
1000efec:	100102ed 	.word	0x100102ed
1000eff0:	10019d2a 	.word	0x10019d2a
1000eff4:	10019dba 	.word	0x10019dba
1000eff8:	00003a98 	.word	0x00003a98
1000effc:	10019dc5 	.word	0x10019dc5
1000f000:	1000edc1 	.word	0x1000edc1

1000f004 <at_ble_addr_set>:
1000f004:	b538      	push	{r3, r4, r5, lr}
1000f006:	1c45      	adds	r5, r0, #1
1000f008:	1c03      	adds	r3, r0, #0
1000f00a:	20cf      	movs	r0, #207	; 0xcf
1000f00c:	2d00      	cmp	r5, #0
1000f00e:	d018      	beq.n	1000f042 <at_ble_addr_set+0x3e>
1000f010:	781a      	ldrb	r2, [r3, #0]
1000f012:	2a03      	cmp	r2, #3
1000f014:	d815      	bhi.n	1000f042 <at_ble_addr_set+0x3e>
1000f016:	2a01      	cmp	r2, #1
1000f018:	d102      	bne.n	1000f020 <at_ble_addr_set+0x1c>
1000f01a:	785a      	ldrb	r2, [r3, #1]
1000f01c:	2a00      	cmp	r2, #0
1000f01e:	d010      	beq.n	1000f042 <at_ble_addr_set+0x3e>
1000f020:	1c1c      	adds	r4, r3, #0
1000f022:	1c29      	adds	r1, r5, #0
1000f024:	2206      	movs	r2, #6
1000f026:	4b07      	ldr	r3, [pc, #28]	; (1000f044 <at_ble_addr_set+0x40>)
1000f028:	4807      	ldr	r0, [pc, #28]	; (1000f048 <at_ble_addr_set+0x44>)
1000f02a:	4798      	blx	r3
1000f02c:	7823      	ldrb	r3, [r4, #0]
1000f02e:	4807      	ldr	r0, [pc, #28]	; (1000f04c <at_ble_addr_set+0x48>)
1000f030:	7103      	strb	r3, [r0, #4]
1000f032:	4b07      	ldr	r3, [pc, #28]	; (1000f050 <at_ble_addr_set+0x4c>)
1000f034:	4798      	blx	r3
1000f036:	7823      	ldrb	r3, [r4, #0]
1000f038:	2b00      	cmp	r3, #0
1000f03a:	d102      	bne.n	1000f042 <at_ble_addr_set+0x3e>
1000f03c:	1c28      	adds	r0, r5, #0
1000f03e:	4b05      	ldr	r3, [pc, #20]	; (1000f054 <at_ble_addr_set+0x50>)
1000f040:	4798      	blx	r3
1000f042:	bd38      	pop	{r3, r4, r5, pc}
1000f044:	1001443b 	.word	0x1001443b
1000f048:	10019dbf 	.word	0x10019dbf
1000f04c:	10019dba 	.word	0x10019dba
1000f050:	1000edc1 	.word	0x1000edc1
1000f054:	1000f7a9 	.word	0x1000f7a9

1000f058 <at_ble_scan_stop>:
1000f058:	b510      	push	{r4, lr}
1000f05a:	4b05      	ldr	r3, [pc, #20]	; (1000f070 <at_ble_scan_stop+0x18>)
1000f05c:	4798      	blx	r3
1000f05e:	1e04      	subs	r4, r0, #0
1000f060:	d103      	bne.n	1000f06a <at_ble_scan_stop+0x12>
1000f062:	20d1      	movs	r0, #209	; 0xd1
1000f064:	4b03      	ldr	r3, [pc, #12]	; (1000f074 <at_ble_scan_stop+0x1c>)
1000f066:	0100      	lsls	r0, r0, #4
1000f068:	4798      	blx	r3
1000f06a:	1c20      	adds	r0, r4, #0
1000f06c:	bd10      	pop	{r4, pc}
1000f06e:	46c0      	nop			; (mov r8, r8)
1000f070:	10010545 	.word	0x10010545
1000f074:	1000ecd1 	.word	0x1000ecd1

1000f078 <at_ble_disconnect>:
1000f078:	b538      	push	{r3, r4, r5, lr}
1000f07a:	1c04      	adds	r4, r0, #0
1000f07c:	4b04      	ldr	r3, [pc, #16]	; (1000f090 <at_ble_disconnect+0x18>)
1000f07e:	1c08      	adds	r0, r1, #0
1000f080:	1c21      	adds	r1, r4, #0
1000f082:	4798      	blx	r3
1000f084:	1c05      	adds	r5, r0, #0
1000f086:	4b03      	ldr	r3, [pc, #12]	; (1000f094 <at_ble_disconnect+0x1c>)
1000f088:	1c20      	adds	r0, r4, #0
1000f08a:	4798      	blx	r3
1000f08c:	1c28      	adds	r0, r5, #0
1000f08e:	bd38      	pop	{r3, r4, r5, pc}
1000f090:	1000fbbd 	.word	0x1000fbbd
1000f094:	1000ed15 	.word	0x1000ed15

1000f098 <at_ble_conn_update_reply>:
1000f098:	b510      	push	{r4, lr}
1000f09a:	4c01      	ldr	r4, [pc, #4]	; (1000f0a0 <at_ble_conn_update_reply+0x8>)
1000f09c:	47a0      	blx	r4
1000f09e:	bd10      	pop	{r4, pc}
1000f0a0:	100100ad 	.word	0x100100ad

1000f0a4 <at_ble_random_address_resolve>:
1000f0a4:	b510      	push	{r4, lr}
1000f0a6:	23cf      	movs	r3, #207	; 0xcf
1000f0a8:	2800      	cmp	r0, #0
1000f0aa:	d00a      	beq.n	1000f0c2 <at_ble_random_address_resolve+0x1e>
1000f0ac:	2900      	cmp	r1, #0
1000f0ae:	d008      	beq.n	1000f0c2 <at_ble_random_address_resolve+0x1e>
1000f0b0:	2a00      	cmp	r2, #0
1000f0b2:	d006      	beq.n	1000f0c2 <at_ble_random_address_resolve+0x1e>
1000f0b4:	780c      	ldrb	r4, [r1, #0]
1000f0b6:	2c02      	cmp	r4, #2
1000f0b8:	d103      	bne.n	1000f0c2 <at_ble_random_address_resolve+0x1e>
1000f0ba:	4b03      	ldr	r3, [pc, #12]	; (1000f0c8 <at_ble_random_address_resolve+0x24>)
1000f0bc:	3101      	adds	r1, #1
1000f0be:	4798      	blx	r3
1000f0c0:	2300      	movs	r3, #0
1000f0c2:	1c18      	adds	r0, r3, #0
1000f0c4:	bd10      	pop	{r4, pc}
1000f0c6:	46c0      	nop			; (mov r8, r8)
1000f0c8:	100107a1 	.word	0x100107a1

1000f0cc <at_ble_uuid_len2type>:
1000f0cc:	1e83      	subs	r3, r0, #2
1000f0ce:	b2db      	uxtb	r3, r3
1000f0d0:	2003      	movs	r0, #3
1000f0d2:	2b0e      	cmp	r3, #14
1000f0d4:	d801      	bhi.n	1000f0da <at_ble_uuid_len2type+0xe>
1000f0d6:	4a01      	ldr	r2, [pc, #4]	; (1000f0dc <at_ble_uuid_len2type+0x10>)
1000f0d8:	5cd0      	ldrb	r0, [r2, r3]
1000f0da:	4770      	bx	lr
1000f0dc:	10017358 	.word	0x10017358

1000f0e0 <init_gatt_client_module>:
1000f0e0:	2200      	movs	r2, #0
1000f0e2:	4b01      	ldr	r3, [pc, #4]	; (1000f0e8 <init_gatt_client_module+0x8>)
1000f0e4:	801a      	strh	r2, [r3, #0]
1000f0e6:	4770      	bx	lr
1000f0e8:	10018f24 	.word	0x10018f24

1000f0ec <db_searchATT>:
1000f0ec:	b570      	push	{r4, r5, r6, lr}
1000f0ee:	1c05      	adds	r5, r0, #0
1000f0f0:	2400      	movs	r4, #0
1000f0f2:	4b0c      	ldr	r3, [pc, #48]	; (1000f124 <db_searchATT+0x38>)
1000f0f4:	6819      	ldr	r1, [r3, #0]
1000f0f6:	4b0c      	ldr	r3, [pc, #48]	; (1000f128 <db_searchATT+0x3c>)
1000f0f8:	681e      	ldr	r6, [r3, #0]
1000f0fa:	428c      	cmp	r4, r1
1000f0fc:	dc10      	bgt.n	1000f120 <db_searchATT+0x34>
1000f0fe:	200c      	movs	r0, #12
1000f100:	1863      	adds	r3, r4, r1
1000f102:	0fda      	lsrs	r2, r3, #31
1000f104:	18d3      	adds	r3, r2, r3
1000f106:	1c02      	adds	r2, r0, #0
1000f108:	105b      	asrs	r3, r3, #1
1000f10a:	435a      	muls	r2, r3
1000f10c:	18b0      	adds	r0, r6, r2
1000f10e:	8802      	ldrh	r2, [r0, #0]
1000f110:	42aa      	cmp	r2, r5
1000f112:	d201      	bcs.n	1000f118 <db_searchATT+0x2c>
1000f114:	1e59      	subs	r1, r3, #1
1000f116:	e7f0      	b.n	1000f0fa <db_searchATT+0xe>
1000f118:	42aa      	cmp	r2, r5
1000f11a:	d902      	bls.n	1000f122 <db_searchATT+0x36>
1000f11c:	1c5c      	adds	r4, r3, #1
1000f11e:	e7ec      	b.n	1000f0fa <db_searchATT+0xe>
1000f120:	2000      	movs	r0, #0
1000f122:	bd70      	pop	{r4, r5, r6, pc}
1000f124:	10018f38 	.word	0x10018f38
1000f128:	10018f30 	.word	0x10018f30

1000f12c <at_ble_read_authorize_reply.part.1>:
1000f12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f12e:	4b09      	ldr	r3, [pc, #36]	; (1000f154 <at_ble_read_authorize_reply.part.1+0x28>)
1000f130:	1c05      	adds	r5, r0, #0
1000f132:	1c08      	adds	r0, r1, #0
1000f134:	1c0c      	adds	r4, r1, #0
1000f136:	4798      	blx	r3
1000f138:	2800      	cmp	r0, #0
1000f13a:	d009      	beq.n	1000f150 <at_ble_read_authorize_reply.part.1+0x24>
1000f13c:	6882      	ldr	r2, [r0, #8]
1000f13e:	2a00      	cmp	r2, #0
1000f140:	d006      	beq.n	1000f150 <at_ble_read_authorize_reply.part.1+0x24>
1000f142:	8883      	ldrh	r3, [r0, #4]
1000f144:	1c29      	adds	r1, r5, #0
1000f146:	9200      	str	r2, [sp, #0]
1000f148:	1c20      	adds	r0, r4, #0
1000f14a:	2200      	movs	r2, #0
1000f14c:	4c02      	ldr	r4, [pc, #8]	; (1000f158 <at_ble_read_authorize_reply.part.1+0x2c>)
1000f14e:	47a0      	blx	r4
1000f150:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f152:	46c0      	nop			; (mov r8, r8)
1000f154:	1000f0ed 	.word	0x1000f0ed
1000f158:	1001089d 	.word	0x1001089d

1000f15c <initi_gatt_server_module>:
1000f15c:	2300      	movs	r3, #0
1000f15e:	4a07      	ldr	r2, [pc, #28]	; (1000f17c <initi_gatt_server_module+0x20>)
1000f160:	7013      	strb	r3, [r2, #0]
1000f162:	4a07      	ldr	r2, [pc, #28]	; (1000f180 <initi_gatt_server_module+0x24>)
1000f164:	6013      	str	r3, [r2, #0]
1000f166:	4a07      	ldr	r2, [pc, #28]	; (1000f184 <initi_gatt_server_module+0x28>)
1000f168:	6013      	str	r3, [r2, #0]
1000f16a:	4a07      	ldr	r2, [pc, #28]	; (1000f188 <initi_gatt_server_module+0x2c>)
1000f16c:	6013      	str	r3, [r2, #0]
1000f16e:	4a07      	ldr	r2, [pc, #28]	; (1000f18c <initi_gatt_server_module+0x30>)
1000f170:	6013      	str	r3, [r2, #0]
1000f172:	4a07      	ldr	r2, [pc, #28]	; (1000f190 <initi_gatt_server_module+0x34>)
1000f174:	6013      	str	r3, [r2, #0]
1000f176:	4a07      	ldr	r2, [pc, #28]	; (1000f194 <initi_gatt_server_module+0x38>)
1000f178:	6013      	str	r3, [r2, #0]
1000f17a:	4770      	bx	lr
1000f17c:	10018f2c 	.word	0x10018f2c
1000f180:	10018f3c 	.word	0x10018f3c
1000f184:	10018f38 	.word	0x10018f38
1000f188:	10018f28 	.word	0x10018f28
1000f18c:	10018f34 	.word	0x10018f34
1000f190:	10018f30 	.word	0x10018f30
1000f194:	10018f40 	.word	0x10018f40

1000f198 <db_init>:
1000f198:	4b0a      	ldr	r3, [pc, #40]	; (1000f1c4 <db_init+0x2c>)
1000f19a:	4a0b      	ldr	r2, [pc, #44]	; (1000f1c8 <db_init+0x30>)
1000f19c:	6018      	str	r0, [r3, #0]
1000f19e:	084b      	lsrs	r3, r1, #1
1000f1a0:	6013      	str	r3, [r2, #0]
1000f1a2:	4a0a      	ldr	r2, [pc, #40]	; (1000f1cc <db_init+0x34>)
1000f1a4:	18c3      	adds	r3, r0, r3
1000f1a6:	6013      	str	r3, [r2, #0]
1000f1a8:	4a09      	ldr	r2, [pc, #36]	; (1000f1d0 <db_init+0x38>)
1000f1aa:	1841      	adds	r1, r0, r1
1000f1ac:	6013      	str	r3, [r2, #0]
1000f1ae:	2303      	movs	r3, #3
1000f1b0:	2200      	movs	r2, #0
1000f1b2:	3103      	adds	r1, #3
1000f1b4:	4399      	bics	r1, r3
1000f1b6:	4b07      	ldr	r3, [pc, #28]	; (1000f1d4 <db_init+0x3c>)
1000f1b8:	3904      	subs	r1, #4
1000f1ba:	6019      	str	r1, [r3, #0]
1000f1bc:	4b06      	ldr	r3, [pc, #24]	; (1000f1d8 <db_init+0x40>)
1000f1be:	601a      	str	r2, [r3, #0]
1000f1c0:	4770      	bx	lr
1000f1c2:	46c0      	nop			; (mov r8, r8)
1000f1c4:	10018f40 	.word	0x10018f40
1000f1c8:	10018f3c 	.word	0x10018f3c
1000f1cc:	10018f28 	.word	0x10018f28
1000f1d0:	10018f34 	.word	0x10018f34
1000f1d4:	10018f30 	.word	0x10018f30
1000f1d8:	10018f38 	.word	0x10018f38

1000f1dc <at_ble_characteristic_value_set>:
1000f1dc:	b570      	push	{r4, r5, r6, lr}
1000f1de:	4b0b      	ldr	r3, [pc, #44]	; (1000f20c <at_ble_characteristic_value_set+0x30>)
1000f1e0:	1c06      	adds	r6, r0, #0
1000f1e2:	1c0c      	adds	r4, r1, #0
1000f1e4:	1c15      	adds	r5, r2, #0
1000f1e6:	4798      	blx	r3
1000f1e8:	2800      	cmp	r0, #0
1000f1ea:	d008      	beq.n	1000f1fe <at_ble_characteristic_value_set+0x22>
1000f1ec:	6880      	ldr	r0, [r0, #8]
1000f1ee:	2800      	cmp	r0, #0
1000f1f0:	d005      	beq.n	1000f1fe <at_ble_characteristic_value_set+0x22>
1000f1f2:	1c21      	adds	r1, r4, #0
1000f1f4:	1c2a      	adds	r2, r5, #0
1000f1f6:	4b06      	ldr	r3, [pc, #24]	; (1000f210 <at_ble_characteristic_value_set+0x34>)
1000f1f8:	4798      	blx	r3
1000f1fa:	2000      	movs	r0, #0
1000f1fc:	e004      	b.n	1000f208 <at_ble_characteristic_value_set+0x2c>
1000f1fe:	1c30      	adds	r0, r6, #0
1000f200:	1c29      	adds	r1, r5, #0
1000f202:	1c22      	adds	r2, r4, #0
1000f204:	4b03      	ldr	r3, [pc, #12]	; (1000f214 <at_ble_characteristic_value_set+0x38>)
1000f206:	4798      	blx	r3
1000f208:	bd70      	pop	{r4, r5, r6, pc}
1000f20a:	46c0      	nop			; (mov r8, r8)
1000f20c:	1000f0ed 	.word	0x1000f0ed
1000f210:	1001443b 	.word	0x1001443b
1000f214:	10010c11 	.word	0x10010c11

1000f218 <at_ble_characteristic_value_get>:
1000f218:	b570      	push	{r4, r5, r6, lr}
1000f21a:	4b0c      	ldr	r3, [pc, #48]	; (1000f24c <at_ble_characteristic_value_get+0x34>)
1000f21c:	1c06      	adds	r6, r0, #0
1000f21e:	1c0c      	adds	r4, r1, #0
1000f220:	1c15      	adds	r5, r2, #0
1000f222:	4798      	blx	r3
1000f224:	2800      	cmp	r0, #0
1000f226:	d00b      	beq.n	1000f240 <at_ble_characteristic_value_get+0x28>
1000f228:	6883      	ldr	r3, [r0, #8]
1000f22a:	2b00      	cmp	r3, #0
1000f22c:	d008      	beq.n	1000f240 <at_ble_characteristic_value_get+0x28>
1000f22e:	8883      	ldrh	r3, [r0, #4]
1000f230:	802b      	strh	r3, [r5, #0]
1000f232:	8882      	ldrh	r2, [r0, #4]
1000f234:	6881      	ldr	r1, [r0, #8]
1000f236:	4b06      	ldr	r3, [pc, #24]	; (1000f250 <at_ble_characteristic_value_get+0x38>)
1000f238:	1c20      	adds	r0, r4, #0
1000f23a:	4798      	blx	r3
1000f23c:	2000      	movs	r0, #0
1000f23e:	e004      	b.n	1000f24a <at_ble_characteristic_value_get+0x32>
1000f240:	1c30      	adds	r0, r6, #0
1000f242:	1c29      	adds	r1, r5, #0
1000f244:	1c22      	adds	r2, r4, #0
1000f246:	4b03      	ldr	r3, [pc, #12]	; (1000f254 <at_ble_characteristic_value_get+0x3c>)
1000f248:	4798      	blx	r3
1000f24a:	bd70      	pop	{r4, r5, r6, pc}
1000f24c:	1000f0ed 	.word	0x1000f0ed
1000f250:	1001443b 	.word	0x1001443b
1000f254:	10010c9d 	.word	0x10010c9d

1000f258 <at_ble_write_authorize_reply>:
1000f258:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f25a:	b085      	sub	sp, #20
1000f25c:	1c04      	adds	r4, r0, #0
1000f25e:	9101      	str	r1, [sp, #4]
1000f260:	2900      	cmp	r1, #0
1000f262:	d128      	bne.n	1000f2b6 <at_ble_write_authorize_reply+0x5e>
1000f264:	8843      	ldrh	r3, [r0, #2]
1000f266:	1c27      	adds	r7, r4, #0
1000f268:	9300      	str	r3, [sp, #0]
1000f26a:	1c18      	adds	r0, r3, #0
1000f26c:	4b16      	ldr	r3, [pc, #88]	; (1000f2c8 <at_ble_write_authorize_reply+0x70>)
1000f26e:	4798      	blx	r3
1000f270:	3708      	adds	r7, #8
1000f272:	2800      	cmp	r0, #0
1000f274:	d009      	beq.n	1000f28a <at_ble_write_authorize_reply+0x32>
1000f276:	6880      	ldr	r0, [r0, #8]
1000f278:	2800      	cmp	r0, #0
1000f27a:	d006      	beq.n	1000f28a <at_ble_write_authorize_reply+0x32>
1000f27c:	88a3      	ldrh	r3, [r4, #4]
1000f27e:	88e2      	ldrh	r2, [r4, #6]
1000f280:	18c0      	adds	r0, r0, r3
1000f282:	1c39      	adds	r1, r7, #0
1000f284:	4b11      	ldr	r3, [pc, #68]	; (1000f2cc <at_ble_write_authorize_reply+0x74>)
1000f286:	4798      	blx	r3
1000f288:	e015      	b.n	1000f2b6 <at_ble_write_authorize_reply+0x5e>
1000f28a:	ab02      	add	r3, sp, #8
1000f28c:	1d9e      	adds	r6, r3, #6
1000f28e:	2300      	movs	r3, #0
1000f290:	4d0f      	ldr	r5, [pc, #60]	; (1000f2d0 <at_ble_write_authorize_reply+0x78>)
1000f292:	8033      	strh	r3, [r6, #0]
1000f294:	6829      	ldr	r1, [r5, #0]
1000f296:	1c32      	adds	r2, r6, #0
1000f298:	4b0e      	ldr	r3, [pc, #56]	; (1000f2d4 <at_ble_write_authorize_reply+0x7c>)
1000f29a:	9800      	ldr	r0, [sp, #0]
1000f29c:	4798      	blx	r3
1000f29e:	682b      	ldr	r3, [r5, #0]
1000f2a0:	88a0      	ldrh	r0, [r4, #4]
1000f2a2:	88e2      	ldrh	r2, [r4, #6]
1000f2a4:	1818      	adds	r0, r3, r0
1000f2a6:	1c39      	adds	r1, r7, #0
1000f2a8:	4b08      	ldr	r3, [pc, #32]	; (1000f2cc <at_ble_write_authorize_reply+0x74>)
1000f2aa:	4798      	blx	r3
1000f2ac:	8860      	ldrh	r0, [r4, #2]
1000f2ae:	8832      	ldrh	r2, [r6, #0]
1000f2b0:	6829      	ldr	r1, [r5, #0]
1000f2b2:	4b09      	ldr	r3, [pc, #36]	; (1000f2d8 <at_ble_write_authorize_reply+0x80>)
1000f2b4:	4798      	blx	r3
1000f2b6:	8860      	ldrh	r0, [r4, #2]
1000f2b8:	8821      	ldrh	r1, [r4, #0]
1000f2ba:	9a01      	ldr	r2, [sp, #4]
1000f2bc:	4b07      	ldr	r3, [pc, #28]	; (1000f2dc <at_ble_write_authorize_reply+0x84>)
1000f2be:	4798      	blx	r3
1000f2c0:	2000      	movs	r0, #0
1000f2c2:	b005      	add	sp, #20
1000f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2c6:	46c0      	nop			; (mov r8, r8)
1000f2c8:	1000f0ed 	.word	0x1000f0ed
1000f2cc:	1001443b 	.word	0x1001443b
1000f2d0:	100175c0 	.word	0x100175c0
1000f2d4:	1000f219 	.word	0x1000f219
1000f2d8:	1000f1dd 	.word	0x1000f1dd
1000f2dc:	10010909 	.word	0x10010909

1000f2e0 <gatts_handle_read_req>:
1000f2e0:	b538      	push	{r3, r4, r5, lr}
1000f2e2:	1c0c      	adds	r4, r1, #0
1000f2e4:	4b07      	ldr	r3, [pc, #28]	; (1000f304 <gatts_handle_read_req+0x24>)
1000f2e6:	4798      	blx	r3
1000f2e8:	8865      	ldrh	r5, [r4, #2]
1000f2ea:	4b07      	ldr	r3, [pc, #28]	; (1000f308 <gatts_handle_read_req+0x28>)
1000f2ec:	1c28      	adds	r0, r5, #0
1000f2ee:	4798      	blx	r3
1000f2f0:	7883      	ldrb	r3, [r0, #2]
1000f2f2:	2026      	movs	r0, #38	; 0x26
1000f2f4:	07db      	lsls	r3, r3, #31
1000f2f6:	d404      	bmi.n	1000f302 <gatts_handle_read_req+0x22>
1000f2f8:	8820      	ldrh	r0, [r4, #0]
1000f2fa:	1c29      	adds	r1, r5, #0
1000f2fc:	4b03      	ldr	r3, [pc, #12]	; (1000f30c <gatts_handle_read_req+0x2c>)
1000f2fe:	4798      	blx	r3
1000f300:	203b      	movs	r0, #59	; 0x3b
1000f302:	bd38      	pop	{r3, r4, r5, pc}
1000f304:	1001084d 	.word	0x1001084d
1000f308:	1000f0ed 	.word	0x1000f0ed
1000f30c:	1000f12d 	.word	0x1000f12d

1000f310 <gatts_handle_att_info_req>:
1000f310:	b538      	push	{r3, r4, r5, lr}
1000f312:	1c0d      	adds	r5, r1, #0
1000f314:	4b0a      	ldr	r3, [pc, #40]	; (1000f340 <gatts_handle_att_info_req+0x30>)
1000f316:	1c14      	adds	r4, r2, #0
1000f318:	4798      	blx	r3
1000f31a:	882d      	ldrh	r5, [r5, #0]
1000f31c:	4b09      	ldr	r3, [pc, #36]	; (1000f344 <gatts_handle_att_info_req+0x34>)
1000f31e:	1c28      	adds	r0, r5, #0
1000f320:	4798      	blx	r3
1000f322:	0a22      	lsrs	r2, r4, #8
1000f324:	1c03      	adds	r3, r0, #0
1000f326:	4c08      	ldr	r4, [pc, #32]	; (1000f348 <gatts_handle_att_info_req+0x38>)
1000f328:	b291      	uxth	r1, r2
1000f32a:	2800      	cmp	r0, #0
1000f32c:	d003      	beq.n	1000f336 <gatts_handle_att_info_req+0x26>
1000f32e:	8882      	ldrh	r2, [r0, #4]
1000f330:	2300      	movs	r3, #0
1000f332:	1c28      	adds	r0, r5, #0
1000f334:	e001      	b.n	1000f33a <gatts_handle_att_info_req+0x2a>
1000f336:	1c28      	adds	r0, r5, #0
1000f338:	2201      	movs	r2, #1
1000f33a:	47a0      	blx	r4
1000f33c:	203b      	movs	r0, #59	; 0x3b
1000f33e:	bd38      	pop	{r3, r4, r5, pc}
1000f340:	10010891 	.word	0x10010891
1000f344:	1000f0ed 	.word	0x1000f0ed
1000f348:	1001094d 	.word	0x1001094d

1000f34c <gatts_handle_write_req>:
1000f34c:	b510      	push	{r4, lr}
1000f34e:	1c14      	adds	r4, r2, #0
1000f350:	4b07      	ldr	r3, [pc, #28]	; (1000f370 <gatts_handle_write_req+0x24>)
1000f352:	4798      	blx	r3
1000f354:	4b07      	ldr	r3, [pc, #28]	; (1000f374 <gatts_handle_write_req+0x28>)
1000f356:	8860      	ldrh	r0, [r4, #2]
1000f358:	4798      	blx	r3
1000f35a:	2302      	movs	r3, #2
1000f35c:	7881      	ldrb	r1, [r0, #2]
1000f35e:	2022      	movs	r0, #34	; 0x22
1000f360:	4019      	ands	r1, r3
1000f362:	d103      	bne.n	1000f36c <gatts_handle_write_req+0x20>
1000f364:	1c20      	adds	r0, r4, #0
1000f366:	4b04      	ldr	r3, [pc, #16]	; (1000f378 <gatts_handle_write_req+0x2c>)
1000f368:	4798      	blx	r3
1000f36a:	201f      	movs	r0, #31
1000f36c:	bd10      	pop	{r4, pc}
1000f36e:	46c0      	nop			; (mov r8, r8)
1000f370:	10010859 	.word	0x10010859
1000f374:	1000f0ed 	.word	0x1000f0ed
1000f378:	1000f259 	.word	0x1000f259

1000f37c <init_l2cc_task_module>:
1000f37c:	220a      	movs	r2, #10
1000f37e:	4b01      	ldr	r3, [pc, #4]	; (1000f384 <init_l2cc_task_module+0x8>)
1000f380:	701a      	strb	r2, [r3, #0]
1000f382:	4770      	bx	lr
1000f384:	100175bd 	.word	0x100175bd

1000f388 <l2cc_data_send_rsp_handler>:
1000f388:	b510      	push	{r4, lr}
1000f38a:	7802      	ldrb	r2, [r0, #0]
1000f38c:	700a      	strb	r2, [r1, #0]
1000f38e:	7883      	ldrb	r3, [r0, #2]
1000f390:	7844      	ldrb	r4, [r0, #1]
1000f392:	021b      	lsls	r3, r3, #8
1000f394:	4323      	orrs	r3, r4
1000f396:	804b      	strh	r3, [r1, #2]
1000f398:	7903      	ldrb	r3, [r0, #4]
1000f39a:	78c0      	ldrb	r0, [r0, #3]
1000f39c:	021b      	lsls	r3, r3, #8
1000f39e:	4303      	orrs	r3, r0
1000f3a0:	808b      	strh	r3, [r1, #4]
1000f3a2:	2a00      	cmp	r2, #0
1000f3a4:	d103      	bne.n	1000f3ae <l2cc_data_send_rsp_handler+0x26>
1000f3a6:	4a02      	ldr	r2, [pc, #8]	; (1000f3b0 <l2cc_data_send_rsp_handler+0x28>)
1000f3a8:	7813      	ldrb	r3, [r2, #0]
1000f3aa:	3301      	adds	r3, #1
1000f3ac:	7013      	strb	r3, [r2, #0]
1000f3ae:	bd10      	pop	{r4, pc}
1000f3b0:	100175bd 	.word	0x100175bd

1000f3b4 <l2cc_data_received_handler>:
1000f3b4:	b508      	push	{r3, lr}
1000f3b6:	1c03      	adds	r3, r0, #0
1000f3b8:	7842      	ldrb	r2, [r0, #1]
1000f3ba:	7800      	ldrb	r0, [r0, #0]
1000f3bc:	0212      	lsls	r2, r2, #8
1000f3be:	4302      	orrs	r2, r0
1000f3c0:	800a      	strh	r2, [r1, #0]
1000f3c2:	78da      	ldrb	r2, [r3, #3]
1000f3c4:	7898      	ldrb	r0, [r3, #2]
1000f3c6:	0212      	lsls	r2, r2, #8
1000f3c8:	4302      	orrs	r2, r0
1000f3ca:	804a      	strh	r2, [r1, #2]
1000f3cc:	795a      	ldrb	r2, [r3, #5]
1000f3ce:	7918      	ldrb	r0, [r3, #4]
1000f3d0:	0212      	lsls	r2, r2, #8
1000f3d2:	4302      	orrs	r2, r0
1000f3d4:	808a      	strh	r2, [r1, #4]
1000f3d6:	1d88      	adds	r0, r1, #6
1000f3d8:	1d99      	adds	r1, r3, #6
1000f3da:	4b01      	ldr	r3, [pc, #4]	; (1000f3e0 <l2cc_data_received_handler+0x2c>)
1000f3dc:	4798      	blx	r3
1000f3de:	bd08      	pop	{r3, pc}
1000f3e0:	1001443b 	.word	0x1001443b

1000f3e4 <at_ble_authenticate>:
1000f3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3e6:	1c0c      	adds	r4, r1, #0
1000f3e8:	211f      	movs	r1, #31
1000f3ea:	b08b      	sub	sp, #44	; 0x2c
1000f3ec:	9307      	str	r3, [sp, #28]
1000f3ee:	ab02      	add	r3, sp, #8
1000f3f0:	18c9      	adds	r1, r1, r3
1000f3f2:	230f      	movs	r3, #15
1000f3f4:	700b      	strb	r3, [r1, #0]
1000f3f6:	4b40      	ldr	r3, [pc, #256]	; (1000f4f8 <at_ble_authenticate+0x114>)
1000f3f8:	1c05      	adds	r5, r0, #0
1000f3fa:	1c16      	adds	r6, r2, #0
1000f3fc:	4798      	blx	r3
1000f3fe:	1c07      	adds	r7, r0, #0
1000f400:	2001      	movs	r0, #1
1000f402:	2f07      	cmp	r7, #7
1000f404:	d875      	bhi.n	1000f4f2 <at_ble_authenticate+0x10e>
1000f406:	2c00      	cmp	r4, #0
1000f408:	d113      	bne.n	1000f432 <at_ble_authenticate+0x4e>
1000f40a:	2312      	movs	r3, #18
1000f40c:	435f      	muls	r7, r3
1000f40e:	4b3b      	ldr	r3, [pc, #236]	; (1000f4fc <at_ble_authenticate+0x118>)
1000f410:	5cfb      	ldrb	r3, [r7, r3]
1000f412:	4283      	cmp	r3, r0
1000f414:	d001      	beq.n	1000f41a <at_ble_authenticate+0x36>
1000f416:	20cf      	movs	r0, #207	; 0xcf
1000f418:	e06b      	b.n	1000f4f2 <at_ble_authenticate+0x10e>
1000f41a:	9504      	str	r5, [sp, #16]
1000f41c:	9400      	str	r4, [sp, #0]
1000f41e:	9401      	str	r4, [sp, #4]
1000f420:	9402      	str	r4, [sp, #8]
1000f422:	9403      	str	r4, [sp, #12]
1000f424:	1c20      	adds	r0, r4, #0
1000f426:	1c21      	adds	r1, r4, #0
1000f428:	1c22      	adds	r2, r4, #0
1000f42a:	1c23      	adds	r3, r4, #0
1000f42c:	4d34      	ldr	r5, [pc, #208]	; (1000f500 <at_ble_authenticate+0x11c>)
1000f42e:	47a8      	blx	r5
1000f430:	e05e      	b.n	1000f4f0 <at_ble_authenticate+0x10c>
1000f432:	7922      	ldrb	r2, [r4, #4]
1000f434:	2a06      	cmp	r2, #6
1000f436:	d9ee      	bls.n	1000f416 <at_ble_authenticate+0x32>
1000f438:	7963      	ldrb	r3, [r4, #5]
1000f43a:	2b10      	cmp	r3, #16
1000f43c:	d8eb      	bhi.n	1000f416 <at_ble_authenticate+0x32>
1000f43e:	429a      	cmp	r2, r3
1000f440:	d8e9      	bhi.n	1000f416 <at_ble_authenticate+0x32>
1000f442:	7a23      	ldrb	r3, [r4, #8]
1000f444:	2b04      	cmp	r3, #4
1000f446:	d8e6      	bhi.n	1000f416 <at_ble_authenticate+0x32>
1000f448:	79a3      	ldrb	r3, [r4, #6]
1000f44a:	2b07      	cmp	r3, #7
1000f44c:	d8e3      	bhi.n	1000f416 <at_ble_authenticate+0x32>
1000f44e:	79e3      	ldrb	r3, [r4, #7]
1000f450:	2b07      	cmp	r3, #7
1000f452:	d8e0      	bhi.n	1000f416 <at_ble_authenticate+0x32>
1000f454:	78a3      	ldrb	r3, [r4, #2]
1000f456:	2b00      	cmp	r3, #0
1000f458:	d006      	beq.n	1000f468 <at_ble_authenticate+0x84>
1000f45a:	2e00      	cmp	r6, #0
1000f45c:	d0db      	beq.n	1000f416 <at_ble_authenticate+0x32>
1000f45e:	4829      	ldr	r0, [pc, #164]	; (1000f504 <at_ble_authenticate+0x120>)
1000f460:	1c31      	adds	r1, r6, #0
1000f462:	221c      	movs	r2, #28
1000f464:	4b28      	ldr	r3, [pc, #160]	; (1000f508 <at_ble_authenticate+0x124>)
1000f466:	4798      	blx	r3
1000f468:	9b07      	ldr	r3, [sp, #28]
1000f46a:	2b00      	cmp	r3, #0
1000f46c:	d005      	beq.n	1000f47a <at_ble_authenticate+0x96>
1000f46e:	4827      	ldr	r0, [pc, #156]	; (1000f50c <at_ble_authenticate+0x128>)
1000f470:	1c19      	adds	r1, r3, #0
1000f472:	309a      	adds	r0, #154	; 0x9a
1000f474:	2210      	movs	r2, #16
1000f476:	4b24      	ldr	r3, [pc, #144]	; (1000f508 <at_ble_authenticate+0x124>)
1000f478:	4798      	blx	r3
1000f47a:	7863      	ldrb	r3, [r4, #1]
1000f47c:	78a2      	ldrb	r2, [r4, #2]
1000f47e:	009b      	lsls	r3, r3, #2
1000f480:	4313      	orrs	r3, r2
1000f482:	2212      	movs	r2, #18
1000f484:	4357      	muls	r7, r2
1000f486:	4a1d      	ldr	r2, [pc, #116]	; (1000f4fc <at_ble_authenticate+0x118>)
1000f488:	b2db      	uxtb	r3, r3
1000f48a:	5cba      	ldrb	r2, [r7, r2]
1000f48c:	2a00      	cmp	r2, #0
1000f48e:	d116      	bne.n	1000f4be <at_ble_authenticate+0xda>
1000f490:	79a0      	ldrb	r0, [r4, #6]
1000f492:	0742      	lsls	r2, r0, #29
1000f494:	d502      	bpl.n	1000f49c <at_ble_authenticate+0xb8>
1000f496:	9a07      	ldr	r2, [sp, #28]
1000f498:	2a00      	cmp	r2, #0
1000f49a:	d0bc      	beq.n	1000f416 <at_ble_authenticate+0x32>
1000f49c:	07c2      	lsls	r2, r0, #31
1000f49e:	d501      	bpl.n	1000f4a4 <at_ble_authenticate+0xc0>
1000f4a0:	2e00      	cmp	r6, #0
1000f4a2:	d0b8      	beq.n	1000f416 <at_ble_authenticate+0x32>
1000f4a4:	7966      	ldrb	r6, [r4, #5]
1000f4a6:	7821      	ldrb	r1, [r4, #0]
1000f4a8:	78e2      	ldrb	r2, [r4, #3]
1000f4aa:	9600      	str	r6, [sp, #0]
1000f4ac:	9001      	str	r0, [sp, #4]
1000f4ae:	79e0      	ldrb	r0, [r4, #7]
1000f4b0:	9002      	str	r0, [sp, #8]
1000f4b2:	7a20      	ldrb	r0, [r4, #8]
1000f4b4:	4c16      	ldr	r4, [pc, #88]	; (1000f510 <at_ble_authenticate+0x12c>)
1000f4b6:	9003      	str	r0, [sp, #12]
1000f4b8:	1c28      	adds	r0, r5, #0
1000f4ba:	47a0      	blx	r4
1000f4bc:	e018      	b.n	1000f4f0 <at_ble_authenticate+0x10c>
1000f4be:	2a01      	cmp	r2, #1
1000f4c0:	d1a9      	bne.n	1000f416 <at_ble_authenticate+0x32>
1000f4c2:	79e0      	ldrb	r0, [r4, #7]
1000f4c4:	0742      	lsls	r2, r0, #29
1000f4c6:	d502      	bpl.n	1000f4ce <at_ble_authenticate+0xea>
1000f4c8:	9a07      	ldr	r2, [sp, #28]
1000f4ca:	2a00      	cmp	r2, #0
1000f4cc:	d0a3      	beq.n	1000f416 <at_ble_authenticate+0x32>
1000f4ce:	07c2      	lsls	r2, r0, #31
1000f4d0:	d501      	bpl.n	1000f4d6 <at_ble_authenticate+0xf2>
1000f4d2:	2e00      	cmp	r6, #0
1000f4d4:	d09f      	beq.n	1000f416 <at_ble_authenticate+0x32>
1000f4d6:	7966      	ldrb	r6, [r4, #5]
1000f4d8:	7821      	ldrb	r1, [r4, #0]
1000f4da:	78e2      	ldrb	r2, [r4, #3]
1000f4dc:	9600      	str	r6, [sp, #0]
1000f4de:	79a6      	ldrb	r6, [r4, #6]
1000f4e0:	9002      	str	r0, [sp, #8]
1000f4e2:	9601      	str	r6, [sp, #4]
1000f4e4:	7a20      	ldrb	r0, [r4, #8]
1000f4e6:	9504      	str	r5, [sp, #16]
1000f4e8:	9003      	str	r0, [sp, #12]
1000f4ea:	4c05      	ldr	r4, [pc, #20]	; (1000f500 <at_ble_authenticate+0x11c>)
1000f4ec:	2001      	movs	r0, #1
1000f4ee:	47a0      	blx	r4
1000f4f0:	2000      	movs	r0, #0
1000f4f2:	b00b      	add	sp, #44	; 0x2c
1000f4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f4f6:	46c0      	nop			; (mov r8, r8)
1000f4f8:	1000f8e5 	.word	0x1000f8e5
1000f4fc:	10019d2a 	.word	0x10019d2a
1000f500:	1000fe55 	.word	0x1000fe55
1000f504:	10019e38 	.word	0x10019e38
1000f508:	1001443b 	.word	0x1001443b
1000f50c:	10019dba 	.word	0x10019dba
1000f510:	1000fc35 	.word	0x1000fc35

1000f514 <at_ble_pair_key_reply>:
1000f514:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f516:	b085      	sub	sp, #20
1000f518:	1c05      	adds	r5, r0, #0
1000f51a:	1c0c      	adds	r4, r1, #0
1000f51c:	1c16      	adds	r6, r2, #0
1000f51e:	2100      	movs	r1, #0
1000f520:	4668      	mov	r0, sp
1000f522:	2210      	movs	r2, #16
1000f524:	4b18      	ldr	r3, [pc, #96]	; (1000f588 <at_ble_pair_key_reply+0x74>)
1000f526:	4798      	blx	r3
1000f528:	2101      	movs	r1, #1
1000f52a:	2e00      	cmp	r6, #0
1000f52c:	d101      	bne.n	1000f532 <at_ble_pair_key_reply+0x1e>
1000f52e:	1c31      	adds	r1, r6, #0
1000f530:	466e      	mov	r6, sp
1000f532:	2c00      	cmp	r4, #0
1000f534:	d116      	bne.n	1000f564 <at_ble_pair_key_reply+0x50>
1000f536:	2701      	movs	r7, #1
1000f538:	1c23      	adds	r3, r4, #0
1000f53a:	1d70      	adds	r0, r6, #5
1000f53c:	3e01      	subs	r6, #1
1000f53e:	7802      	ldrb	r2, [r0, #0]
1000f540:	3801      	subs	r0, #1
1000f542:	3a30      	subs	r2, #48	; 0x30
1000f544:	437a      	muls	r2, r7
1000f546:	189b      	adds	r3, r3, r2
1000f548:	220a      	movs	r2, #10
1000f54a:	4357      	muls	r7, r2
1000f54c:	42b0      	cmp	r0, r6
1000f54e:	d1f6      	bne.n	1000f53e <at_ble_pair_key_reply+0x2a>
1000f550:	466a      	mov	r2, sp
1000f552:	4668      	mov	r0, sp
1000f554:	7013      	strb	r3, [r2, #0]
1000f556:	0a1a      	lsrs	r2, r3, #8
1000f558:	7042      	strb	r2, [r0, #1]
1000f55a:	0c1a      	lsrs	r2, r3, #16
1000f55c:	0e1b      	lsrs	r3, r3, #24
1000f55e:	7082      	strb	r2, [r0, #2]
1000f560:	70c3      	strb	r3, [r0, #3]
1000f562:	e009      	b.n	1000f578 <at_ble_pair_key_reply+0x64>
1000f564:	20cf      	movs	r0, #207	; 0xcf
1000f566:	2c01      	cmp	r4, #1
1000f568:	d10c      	bne.n	1000f584 <at_ble_pair_key_reply+0x70>
1000f56a:	2300      	movs	r3, #0
1000f56c:	4668      	mov	r0, sp
1000f56e:	5cf2      	ldrb	r2, [r6, r3]
1000f570:	54c2      	strb	r2, [r0, r3]
1000f572:	3301      	adds	r3, #1
1000f574:	2b10      	cmp	r3, #16
1000f576:	d1f9      	bne.n	1000f56c <at_ble_pair_key_reply+0x58>
1000f578:	2004      	movs	r0, #4
1000f57a:	466a      	mov	r2, sp
1000f57c:	1c2b      	adds	r3, r5, #0
1000f57e:	4c03      	ldr	r4, [pc, #12]	; (1000f58c <at_ble_pair_key_reply+0x78>)
1000f580:	47a0      	blx	r4
1000f582:	2000      	movs	r0, #0
1000f584:	b005      	add	sp, #20
1000f586:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f588:	10014477 	.word	0x10014477
1000f58c:	1000fed1 	.word	0x1000fed1

1000f590 <at_ble_send_slave_sec_request>:
1000f590:	b570      	push	{r4, r5, r6, lr}
1000f592:	4b0c      	ldr	r3, [pc, #48]	; (1000f5c4 <at_ble_send_slave_sec_request+0x34>)
1000f594:	1c0e      	adds	r6, r1, #0
1000f596:	2100      	movs	r1, #0
1000f598:	1c05      	adds	r5, r0, #0
1000f59a:	1c14      	adds	r4, r2, #0
1000f59c:	4798      	blx	r3
1000f59e:	2301      	movs	r3, #1
1000f5a0:	2807      	cmp	r0, #7
1000f5a2:	d80d      	bhi.n	1000f5c0 <at_ble_send_slave_sec_request+0x30>
1000f5a4:	3311      	adds	r3, #17
1000f5a6:	4358      	muls	r0, r3
1000f5a8:	4b07      	ldr	r3, [pc, #28]	; (1000f5c8 <at_ble_send_slave_sec_request+0x38>)
1000f5aa:	5cc2      	ldrb	r2, [r0, r3]
1000f5ac:	23e0      	movs	r3, #224	; 0xe0
1000f5ae:	2a01      	cmp	r2, #1
1000f5b0:	d106      	bne.n	1000f5c0 <at_ble_send_slave_sec_request+0x30>
1000f5b2:	00b1      	lsls	r1, r6, #2
1000f5b4:	430c      	orrs	r4, r1
1000f5b6:	4b05      	ldr	r3, [pc, #20]	; (1000f5cc <at_ble_send_slave_sec_request+0x3c>)
1000f5b8:	b2e1      	uxtb	r1, r4
1000f5ba:	1c28      	adds	r0, r5, #0
1000f5bc:	4798      	blx	r3
1000f5be:	2300      	movs	r3, #0
1000f5c0:	1c18      	adds	r0, r3, #0
1000f5c2:	bd70      	pop	{r4, r5, r6, pc}
1000f5c4:	1000f8e5 	.word	0x1000f8e5
1000f5c8:	10019d2a 	.word	0x10019d2a
1000f5cc:	1000ff21 	.word	0x1000ff21

1000f5d0 <at_ble_encryption_start>:
1000f5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5d2:	23cf      	movs	r3, #207	; 0xcf
1000f5d4:	2900      	cmp	r1, #0
1000f5d6:	d02b      	beq.n	1000f630 <at_ble_encryption_start+0x60>
1000f5d8:	2a05      	cmp	r2, #5
1000f5da:	d829      	bhi.n	1000f630 <at_ble_encryption_start+0x60>
1000f5dc:	2701      	movs	r7, #1
1000f5de:	1c3d      	adds	r5, r7, #0
1000f5e0:	2433      	movs	r4, #51	; 0x33
1000f5e2:	4095      	lsls	r5, r2
1000f5e4:	4225      	tst	r5, r4
1000f5e6:	d023      	beq.n	1000f630 <at_ble_encryption_start+0x60>
1000f5e8:	7e8c      	ldrb	r4, [r1, #26]
1000f5ea:	3c07      	subs	r4, #7
1000f5ec:	2c09      	cmp	r4, #9
1000f5ee:	d81f      	bhi.n	1000f630 <at_ble_encryption_start+0x60>
1000f5f0:	4b10      	ldr	r3, [pc, #64]	; (1000f634 <at_ble_encryption_start+0x64>)
1000f5f2:	1c0c      	adds	r4, r1, #0
1000f5f4:	2100      	movs	r1, #0
1000f5f6:	1c15      	adds	r5, r2, #0
1000f5f8:	1c06      	adds	r6, r0, #0
1000f5fa:	4798      	blx	r3
1000f5fc:	1c3b      	adds	r3, r7, #0
1000f5fe:	2807      	cmp	r0, #7
1000f600:	d816      	bhi.n	1000f630 <at_ble_encryption_start+0x60>
1000f602:	2312      	movs	r3, #18
1000f604:	4358      	muls	r0, r3
1000f606:	4b0c      	ldr	r3, [pc, #48]	; (1000f638 <at_ble_encryption_start+0x68>)
1000f608:	5cc7      	ldrb	r7, [r0, r3]
1000f60a:	23e0      	movs	r3, #224	; 0xe0
1000f60c:	2f00      	cmp	r7, #0
1000f60e:	d10f      	bne.n	1000f630 <at_ble_encryption_start+0x60>
1000f610:	1c21      	adds	r1, r4, #0
1000f612:	221c      	movs	r2, #28
1000f614:	4b09      	ldr	r3, [pc, #36]	; (1000f63c <at_ble_encryption_start+0x6c>)
1000f616:	480a      	ldr	r0, [pc, #40]	; (1000f640 <at_ble_encryption_start+0x70>)
1000f618:	4798      	blx	r3
1000f61a:	1c23      	adds	r3, r4, #0
1000f61c:	7ea1      	ldrb	r1, [r4, #26]
1000f61e:	8a22      	ldrh	r2, [r4, #16]
1000f620:	3312      	adds	r3, #18
1000f622:	9100      	str	r1, [sp, #0]
1000f624:	9501      	str	r5, [sp, #4]
1000f626:	1c21      	adds	r1, r4, #0
1000f628:	1c30      	adds	r0, r6, #0
1000f62a:	4c06      	ldr	r4, [pc, #24]	; (1000f644 <at_ble_encryption_start+0x74>)
1000f62c:	47a0      	blx	r4
1000f62e:	1c3b      	adds	r3, r7, #0
1000f630:	1c18      	adds	r0, r3, #0
1000f632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f634:	1000f8e5 	.word	0x1000f8e5
1000f638:	10019d2a 	.word	0x10019d2a
1000f63c:	1001443b 	.word	0x1001443b
1000f640:	10019e38 	.word	0x10019e38
1000f644:	1000ff61 	.word	0x1000ff61

1000f648 <at_ble_encryption_request_reply>:
1000f648:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f64a:	24cf      	movs	r4, #207	; 0xcf
1000f64c:	2b00      	cmp	r3, #0
1000f64e:	d011      	beq.n	1000f674 <at_ble_encryption_request_reply+0x2c>
1000f650:	2a00      	cmp	r2, #0
1000f652:	d00a      	beq.n	1000f66a <at_ble_encryption_request_reply+0x22>
1000f654:	2905      	cmp	r1, #5
1000f656:	d80d      	bhi.n	1000f674 <at_ble_encryption_request_reply+0x2c>
1000f658:	2501      	movs	r5, #1
1000f65a:	2633      	movs	r6, #51	; 0x33
1000f65c:	408d      	lsls	r5, r1
1000f65e:	4235      	tst	r5, r6
1000f660:	d008      	beq.n	1000f674 <at_ble_encryption_request_reply+0x2c>
1000f662:	7e9d      	ldrb	r5, [r3, #26]
1000f664:	3d07      	subs	r5, #7
1000f666:	2d09      	cmp	r5, #9
1000f668:	d804      	bhi.n	1000f674 <at_ble_encryption_request_reply+0x2c>
1000f66a:	7e9c      	ldrb	r4, [r3, #26]
1000f66c:	9400      	str	r4, [sp, #0]
1000f66e:	4c02      	ldr	r4, [pc, #8]	; (1000f678 <at_ble_encryption_request_reply+0x30>)
1000f670:	47a0      	blx	r4
1000f672:	2400      	movs	r4, #0
1000f674:	1c20      	adds	r0, r4, #0
1000f676:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f678:	1001001d 	.word	0x1001001d

1000f67c <rx_callback>:
1000f67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f67e:	8883      	ldrh	r3, [r0, #4]
1000f680:	1c01      	adds	r1, r0, #0
1000f682:	9301      	str	r3, [sp, #4]
1000f684:	88c5      	ldrh	r5, [r0, #6]
1000f686:	8806      	ldrh	r6, [r0, #0]
1000f688:	2d00      	cmp	r5, #0
1000f68a:	d10f      	bne.n	1000f6ac <rx_callback+0x30>
1000f68c:	1c19      	adds	r1, r3, #0
1000f68e:	1c30      	adds	r0, r6, #0
1000f690:	4b19      	ldr	r3, [pc, #100]	; (1000f6f8 <rx_callback+0x7c>)
1000f692:	1c2a      	adds	r2, r5, #0
1000f694:	4798      	blx	r3
1000f696:	1e03      	subs	r3, r0, #0
1000f698:	d105      	bne.n	1000f6a6 <rx_callback+0x2a>
1000f69a:	1c30      	adds	r0, r6, #0
1000f69c:	9901      	ldr	r1, [sp, #4]
1000f69e:	1c1a      	adds	r2, r3, #0
1000f6a0:	4c16      	ldr	r4, [pc, #88]	; (1000f6fc <rx_callback+0x80>)
1000f6a2:	47a0      	blx	r4
1000f6a4:	e027      	b.n	1000f6f6 <rx_callback+0x7a>
1000f6a6:	4b16      	ldr	r3, [pc, #88]	; (1000f700 <rx_callback+0x84>)
1000f6a8:	4798      	blx	r3
1000f6aa:	e024      	b.n	1000f6f6 <rx_callback+0x7a>
1000f6ac:	4c15      	ldr	r4, [pc, #84]	; (1000f704 <rx_callback+0x88>)
1000f6ae:	4a16      	ldr	r2, [pc, #88]	; (1000f708 <rx_callback+0x8c>)
1000f6b0:	6823      	ldr	r3, [r4, #0]
1000f6b2:	6812      	ldr	r2, [r2, #0]
1000f6b4:	18eb      	adds	r3, r5, r3
1000f6b6:	4293      	cmp	r3, r2
1000f6b8:	d901      	bls.n	1000f6be <rx_callback+0x42>
1000f6ba:	2300      	movs	r3, #0
1000f6bc:	6023      	str	r3, [r4, #0]
1000f6be:	4f13      	ldr	r7, [pc, #76]	; (1000f70c <rx_callback+0x90>)
1000f6c0:	6822      	ldr	r2, [r4, #0]
1000f6c2:	683b      	ldr	r3, [r7, #0]
1000f6c4:	3108      	adds	r1, #8
1000f6c6:	1898      	adds	r0, r3, r2
1000f6c8:	1c2a      	adds	r2, r5, #0
1000f6ca:	4b11      	ldr	r3, [pc, #68]	; (1000f710 <rx_callback+0x94>)
1000f6cc:	4798      	blx	r3
1000f6ce:	683b      	ldr	r3, [r7, #0]
1000f6d0:	6822      	ldr	r2, [r4, #0]
1000f6d2:	1c30      	adds	r0, r6, #0
1000f6d4:	189a      	adds	r2, r3, r2
1000f6d6:	9901      	ldr	r1, [sp, #4]
1000f6d8:	4b07      	ldr	r3, [pc, #28]	; (1000f6f8 <rx_callback+0x7c>)
1000f6da:	4798      	blx	r3
1000f6dc:	2800      	cmp	r0, #0
1000f6de:	d1e2      	bne.n	1000f6a6 <rx_callback+0x2a>
1000f6e0:	6823      	ldr	r3, [r4, #0]
1000f6e2:	683a      	ldr	r2, [r7, #0]
1000f6e4:	1c30      	adds	r0, r6, #0
1000f6e6:	18d2      	adds	r2, r2, r3
1000f6e8:	9901      	ldr	r1, [sp, #4]
1000f6ea:	1c2b      	adds	r3, r5, #0
1000f6ec:	4e03      	ldr	r6, [pc, #12]	; (1000f6fc <rx_callback+0x80>)
1000f6ee:	47b0      	blx	r6
1000f6f0:	6823      	ldr	r3, [r4, #0]
1000f6f2:	18ed      	adds	r5, r5, r3
1000f6f4:	6025      	str	r5, [r4, #0]
1000f6f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f6f8:	1000e569 	.word	0x1000e569
1000f6fc:	1000e4e1 	.word	0x1000e4e1
1000f700:	1000cbb1 	.word	0x1000cbb1
1000f704:	10019e94 	.word	0x10019e94
1000f708:	10018f48 	.word	0x10018f48
1000f70c:	10018f44 	.word	0x10018f44
1000f710:	1001443b 	.word	0x1001443b

1000f714 <interface_send>:
1000f714:	b508      	push	{r3, lr}
1000f716:	4b02      	ldr	r3, [pc, #8]	; (1000f720 <interface_send+0xc>)
1000f718:	4798      	blx	r3
1000f71a:	2000      	movs	r0, #0
1000f71c:	bd08      	pop	{r3, pc}
1000f71e:	46c0      	nop			; (mov r8, r8)
1000f720:	1000c895 	.word	0x1000c895

1000f724 <interface_init>:
1000f724:	2280      	movs	r2, #128	; 0x80
1000f726:	b510      	push	{r4, lr}
1000f728:	2100      	movs	r1, #0
1000f72a:	1c04      	adds	r4, r0, #0
1000f72c:	0092      	lsls	r2, r2, #2
1000f72e:	4b08      	ldr	r3, [pc, #32]	; (1000f750 <interface_init+0x2c>)
1000f730:	4808      	ldr	r0, [pc, #32]	; (1000f754 <interface_init+0x30>)
1000f732:	4798      	blx	r3
1000f734:	2200      	movs	r2, #0
1000f736:	4b08      	ldr	r3, [pc, #32]	; (1000f758 <interface_init+0x34>)
1000f738:	601a      	str	r2, [r3, #0]
1000f73a:	4a08      	ldr	r2, [pc, #32]	; (1000f75c <interface_init+0x38>)
1000f73c:	4b08      	ldr	r3, [pc, #32]	; (1000f760 <interface_init+0x3c>)
1000f73e:	601a      	str	r2, [r3, #0]
1000f740:	4b08      	ldr	r3, [pc, #32]	; (1000f764 <interface_init+0x40>)
1000f742:	6922      	ldr	r2, [r4, #16]
1000f744:	601a      	str	r2, [r3, #0]
1000f746:	6962      	ldr	r2, [r4, #20]
1000f748:	4b07      	ldr	r3, [pc, #28]	; (1000f768 <interface_init+0x44>)
1000f74a:	601a      	str	r2, [r3, #0]
1000f74c:	bd10      	pop	{r4, pc}
1000f74e:	46c0      	nop			; (mov r8, r8)
1000f750:	10014477 	.word	0x10014477
1000f754:	1001a098 	.word	0x1001a098
1000f758:	10019e94 	.word	0x10019e94
1000f75c:	10019e98 	.word	0x10019e98
1000f760:	100175c0 	.word	0x100175c0
1000f764:	10018f44 	.word	0x10018f44
1000f768:	10018f48 	.word	0x10018f48

1000f76c <platform_cmd_cmpl_signal>:
1000f76c:	2201      	movs	r2, #1
1000f76e:	4b01      	ldr	r3, [pc, #4]	; (1000f774 <platform_cmd_cmpl_signal+0x8>)
1000f770:	601a      	str	r2, [r3, #0]
1000f772:	4770      	bx	lr
1000f774:	10018f4c 	.word	0x10018f4c

1000f778 <platform_cmd_cmpl_wait>:
1000f778:	b510      	push	{r4, lr}
1000f77a:	1c04      	adds	r4, r0, #0
1000f77c:	4b07      	ldr	r3, [pc, #28]	; (1000f79c <platform_cmd_cmpl_wait+0x24>)
1000f77e:	681a      	ldr	r2, [r3, #0]
1000f780:	2a01      	cmp	r2, #1
1000f782:	d003      	beq.n	1000f78c <platform_cmd_cmpl_wait+0x14>
1000f784:	4b06      	ldr	r3, [pc, #24]	; (1000f7a0 <platform_cmd_cmpl_wait+0x28>)
1000f786:	2000      	movs	r0, #0
1000f788:	4798      	blx	r3
1000f78a:	e7f7      	b.n	1000f77c <platform_cmd_cmpl_wait+0x4>
1000f78c:	6819      	ldr	r1, [r3, #0]
1000f78e:	2901      	cmp	r1, #1
1000f790:	d102      	bne.n	1000f798 <platform_cmd_cmpl_wait+0x20>
1000f792:	2200      	movs	r2, #0
1000f794:	601a      	str	r2, [r3, #0]
1000f796:	e000      	b.n	1000f79a <platform_cmd_cmpl_wait+0x22>
1000f798:	7022      	strb	r2, [r4, #0]
1000f79a:	bd10      	pop	{r4, pc}
1000f79c:	10018f4c 	.word	0x10018f4c
1000f7a0:	1000c921 	.word	0x1000c921

1000f7a4 <start_timer>:
1000f7a4:	4770      	bx	lr

1000f7a6 <stop_timer>:
1000f7a6:	4770      	bx	lr

1000f7a8 <dbg_le_set_bd_addr_req_handler>:
1000f7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f7aa:	466b      	mov	r3, sp
1000f7ac:	1dde      	adds	r6, r3, #7
1000f7ae:	2300      	movs	r3, #0
1000f7b0:	7033      	strb	r3, [r6, #0]
1000f7b2:	230f      	movs	r3, #15
1000f7b4:	4c13      	ldr	r4, [pc, #76]	; (1000f804 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f7b6:	2703      	movs	r7, #3
1000f7b8:	7023      	strb	r3, [r4, #0]
1000f7ba:	2300      	movs	r3, #0
1000f7bc:	70e3      	strb	r3, [r4, #3]
1000f7be:	4b12      	ldr	r3, [pc, #72]	; (1000f808 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f7c0:	1c01      	adds	r1, r0, #0
1000f7c2:	881a      	ldrh	r2, [r3, #0]
1000f7c4:	881b      	ldrh	r3, [r3, #0]
1000f7c6:	7122      	strb	r2, [r4, #4]
1000f7c8:	0a1b      	lsrs	r3, r3, #8
1000f7ca:	2206      	movs	r2, #6
1000f7cc:	7163      	strb	r3, [r4, #5]
1000f7ce:	480f      	ldr	r0, [pc, #60]	; (1000f80c <dbg_le_set_bd_addr_req_handler+0x64>)
1000f7d0:	4b0f      	ldr	r3, [pc, #60]	; (1000f810 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f7d2:	7067      	strb	r7, [r4, #1]
1000f7d4:	70a7      	strb	r7, [r4, #2]
1000f7d6:	4798      	blx	r3
1000f7d8:	4d0e      	ldr	r5, [pc, #56]	; (1000f814 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f7da:	4b0f      	ldr	r3, [pc, #60]	; (1000f818 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f7dc:	210e      	movs	r1, #14
1000f7de:	802b      	strh	r3, [r5, #0]
1000f7e0:	2306      	movs	r3, #6
1000f7e2:	71a3      	strb	r3, [r4, #6]
1000f7e4:	2300      	movs	r3, #0
1000f7e6:	1c20      	adds	r0, r4, #0
1000f7e8:	71e3      	strb	r3, [r4, #7]
1000f7ea:	4b0c      	ldr	r3, [pc, #48]	; (1000f81c <dbg_le_set_bd_addr_req_handler+0x74>)
1000f7ec:	80af      	strh	r7, [r5, #4]
1000f7ee:	4798      	blx	r3
1000f7f0:	1c30      	adds	r0, r6, #0
1000f7f2:	4b0b      	ldr	r3, [pc, #44]	; (1000f820 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f7f4:	4798      	blx	r3
1000f7f6:	7833      	ldrb	r3, [r6, #0]
1000f7f8:	20e2      	movs	r0, #226	; 0xe2
1000f7fa:	2b00      	cmp	r3, #0
1000f7fc:	d101      	bne.n	1000f802 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f7fe:	68ab      	ldr	r3, [r5, #8]
1000f800:	7818      	ldrb	r0, [r3, #0]
1000f802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f804:	1001a098 	.word	0x1001a098
1000f808:	10019d28 	.word	0x10019d28
1000f80c:	1001a0a0 	.word	0x1001a0a0
1000f810:	1001443b 	.word	0x1001443b
1000f814:	10019d1c 	.word	0x10019d1c
1000f818:	00000329 	.word	0x00000329
1000f81c:	1000f715 	.word	0x1000f715
1000f820:	1000f779 	.word	0x1000f779

1000f824 <gapc_get_dev_info_cfm.constprop.1>:
1000f824:	b538      	push	{r3, r4, r5, lr}
1000f826:	230b      	movs	r3, #11
1000f828:	4c27      	ldr	r4, [pc, #156]	; (1000f8c8 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f82a:	7023      	strb	r3, [r4, #0]
1000f82c:	3303      	adds	r3, #3
1000f82e:	7063      	strb	r3, [r4, #1]
1000f830:	3329      	adds	r3, #41	; 0x29
1000f832:	70a3      	strb	r3, [r4, #2]
1000f834:	4b25      	ldr	r3, [pc, #148]	; (1000f8cc <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f836:	70e1      	strb	r1, [r4, #3]
1000f838:	881a      	ldrh	r2, [r3, #0]
1000f83a:	881b      	ldrh	r3, [r3, #0]
1000f83c:	7122      	strb	r2, [r4, #4]
1000f83e:	0a1b      	lsrs	r3, r3, #8
1000f840:	7163      	strb	r3, [r4, #5]
1000f842:	2300      	movs	r3, #0
1000f844:	7220      	strb	r0, [r4, #8]
1000f846:	7263      	strb	r3, [r4, #9]
1000f848:	2801      	cmp	r0, #1
1000f84a:	d02b      	beq.n	1000f8a4 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f84c:	4298      	cmp	r0, r3
1000f84e:	d01b      	beq.n	1000f888 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f850:	2802      	cmp	r0, #2
1000f852:	d12f      	bne.n	1000f8b4 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f854:	4b1e      	ldr	r3, [pc, #120]	; (1000f8d0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f856:	2112      	movs	r1, #18
1000f858:	1c1a      	adds	r2, r3, #0
1000f85a:	32ce      	adds	r2, #206	; 0xce
1000f85c:	8812      	ldrh	r2, [r2, #0]
1000f85e:	72a2      	strb	r2, [r4, #10]
1000f860:	0a12      	lsrs	r2, r2, #8
1000f862:	72e2      	strb	r2, [r4, #11]
1000f864:	1c1a      	adds	r2, r3, #0
1000f866:	32d0      	adds	r2, #208	; 0xd0
1000f868:	8812      	ldrh	r2, [r2, #0]
1000f86a:	7322      	strb	r2, [r4, #12]
1000f86c:	0a12      	lsrs	r2, r2, #8
1000f86e:	7362      	strb	r2, [r4, #13]
1000f870:	1c1a      	adds	r2, r3, #0
1000f872:	32d2      	adds	r2, #210	; 0xd2
1000f874:	8812      	ldrh	r2, [r2, #0]
1000f876:	33d4      	adds	r3, #212	; 0xd4
1000f878:	73a2      	strb	r2, [r4, #14]
1000f87a:	0a12      	lsrs	r2, r2, #8
1000f87c:	73e2      	strb	r2, [r4, #15]
1000f87e:	881b      	ldrh	r3, [r3, #0]
1000f880:	7423      	strb	r3, [r4, #16]
1000f882:	0a1b      	lsrs	r3, r3, #8
1000f884:	7463      	strb	r3, [r4, #17]
1000f886:	e016      	b.n	1000f8b6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f888:	4b11      	ldr	r3, [pc, #68]	; (1000f8d0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f88a:	4912      	ldr	r1, [pc, #72]	; (1000f8d4 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f88c:	33aa      	adds	r3, #170	; 0xaa
1000f88e:	881d      	ldrh	r5, [r3, #0]
1000f890:	4811      	ldr	r0, [pc, #68]	; (1000f8d8 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f892:	0a2b      	lsrs	r3, r5, #8
1000f894:	72a5      	strb	r5, [r4, #10]
1000f896:	72e3      	strb	r3, [r4, #11]
1000f898:	1c2a      	adds	r2, r5, #0
1000f89a:	4b10      	ldr	r3, [pc, #64]	; (1000f8dc <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f89c:	350c      	adds	r5, #12
1000f89e:	4798      	blx	r3
1000f8a0:	b2a9      	uxth	r1, r5
1000f8a2:	e008      	b.n	1000f8b6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f8a4:	4b0a      	ldr	r3, [pc, #40]	; (1000f8d0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f8a6:	210c      	movs	r1, #12
1000f8a8:	33cc      	adds	r3, #204	; 0xcc
1000f8aa:	881b      	ldrh	r3, [r3, #0]
1000f8ac:	72a3      	strb	r3, [r4, #10]
1000f8ae:	0a1b      	lsrs	r3, r3, #8
1000f8b0:	72e3      	strb	r3, [r4, #11]
1000f8b2:	e000      	b.n	1000f8b6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f8b4:	210a      	movs	r1, #10
1000f8b6:	1c0b      	adds	r3, r1, #0
1000f8b8:	3b08      	subs	r3, #8
1000f8ba:	71a3      	strb	r3, [r4, #6]
1000f8bc:	121b      	asrs	r3, r3, #8
1000f8be:	71e3      	strb	r3, [r4, #7]
1000f8c0:	1c20      	adds	r0, r4, #0
1000f8c2:	4b07      	ldr	r3, [pc, #28]	; (1000f8e0 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f8c4:	4798      	blx	r3
1000f8c6:	bd38      	pop	{r3, r4, r5, pc}
1000f8c8:	1001a098 	.word	0x1001a098
1000f8cc:	10019d28 	.word	0x10019d28
1000f8d0:	10019dba 	.word	0x10019dba
1000f8d4:	10019e66 	.word	0x10019e66
1000f8d8:	1001a0a4 	.word	0x1001a0a4
1000f8dc:	1001443b 	.word	0x1001443b
1000f8e0:	1000f715 	.word	0x1000f715

1000f8e4 <check_ConnData_idx_role>:
1000f8e4:	4b0c      	ldr	r3, [pc, #48]	; (1000f918 <check_ConnData_idx_role+0x34>)
1000f8e6:	b570      	push	{r4, r5, r6, lr}
1000f8e8:	1c04      	adds	r4, r0, #0
1000f8ea:	2008      	movs	r0, #8
1000f8ec:	429c      	cmp	r4, r3
1000f8ee:	d011      	beq.n	1000f914 <check_ConnData_idx_role+0x30>
1000f8f0:	2300      	movs	r3, #0
1000f8f2:	2212      	movs	r2, #18
1000f8f4:	435a      	muls	r2, r3
1000f8f6:	4d09      	ldr	r5, [pc, #36]	; (1000f91c <check_ConnData_idx_role+0x38>)
1000f8f8:	b2d8      	uxtb	r0, r3
1000f8fa:	1956      	adds	r6, r2, r5
1000f8fc:	8976      	ldrh	r6, [r6, #10]
1000f8fe:	42a6      	cmp	r6, r4
1000f900:	d104      	bne.n	1000f90c <check_ConnData_idx_role+0x28>
1000f902:	2900      	cmp	r1, #0
1000f904:	d006      	beq.n	1000f914 <check_ConnData_idx_role+0x30>
1000f906:	5d53      	ldrb	r3, [r2, r5]
1000f908:	700b      	strb	r3, [r1, #0]
1000f90a:	e003      	b.n	1000f914 <check_ConnData_idx_role+0x30>
1000f90c:	3301      	adds	r3, #1
1000f90e:	2b08      	cmp	r3, #8
1000f910:	d1ef      	bne.n	1000f8f2 <check_ConnData_idx_role+0xe>
1000f912:	1c18      	adds	r0, r3, #0
1000f914:	bd70      	pop	{r4, r5, r6, pc}
1000f916:	46c0      	nop			; (mov r8, r8)
1000f918:	0000ffff 	.word	0x0000ffff
1000f91c:	10019d2a 	.word	0x10019d2a

1000f920 <check_ConnData_emptyEntry>:
1000f920:	2300      	movs	r3, #0
1000f922:	2212      	movs	r2, #18
1000f924:	435a      	muls	r2, r3
1000f926:	4906      	ldr	r1, [pc, #24]	; (1000f940 <check_ConnData_emptyEntry+0x20>)
1000f928:	b2d8      	uxtb	r0, r3
1000f92a:	1852      	adds	r2, r2, r1
1000f92c:	8951      	ldrh	r1, [r2, #10]
1000f92e:	4a05      	ldr	r2, [pc, #20]	; (1000f944 <check_ConnData_emptyEntry+0x24>)
1000f930:	4291      	cmp	r1, r2
1000f932:	d003      	beq.n	1000f93c <check_ConnData_emptyEntry+0x1c>
1000f934:	3301      	adds	r3, #1
1000f936:	2b08      	cmp	r3, #8
1000f938:	d1f3      	bne.n	1000f922 <check_ConnData_emptyEntry+0x2>
1000f93a:	1c18      	adds	r0, r3, #0
1000f93c:	4770      	bx	lr
1000f93e:	46c0      	nop			; (mov r8, r8)
1000f940:	10019d2a 	.word	0x10019d2a
1000f944:	0000ffff 	.word	0x0000ffff

1000f948 <gapc_cmp_evt>:
1000f948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f94a:	780b      	ldrb	r3, [r1, #0]
1000f94c:	1c05      	adds	r5, r0, #0
1000f94e:	1e58      	subs	r0, r3, #1
1000f950:	784e      	ldrb	r6, [r1, #1]
1000f952:	280f      	cmp	r0, #15
1000f954:	d85a      	bhi.n	1000fa0c <gapc_cmp_evt+0xc4>
1000f956:	1c14      	adds	r4, r2, #0
1000f958:	f001 ffae 	bl	100118b8 <__gnu_thumb1_case_uqi>
1000f95c:	5858440a 	.word	0x5858440a
1000f960:	4b584444 	.word	0x4b584444
1000f964:	0825122d 	.word	0x0825122d
1000f968:	3e395858 	.word	0x3e395858
1000f96c:	203b      	movs	r0, #59	; 0x3b
1000f96e:	e04e      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f970:	203b      	movs	r0, #59	; 0x3b
1000f972:	2e00      	cmp	r6, #0
1000f974:	d04b      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f976:	0a2d      	lsrs	r5, r5, #8
1000f978:	8015      	strh	r5, [r2, #0]
1000f97a:	7096      	strb	r6, [r2, #2]
1000f97c:	3835      	subs	r0, #53	; 0x35
1000f97e:	e046      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f980:	466b      	mov	r3, sp
1000f982:	1ddf      	adds	r7, r3, #7
1000f984:	2301      	movs	r3, #1
1000f986:	0a2d      	lsrs	r5, r5, #8
1000f988:	703b      	strb	r3, [r7, #0]
1000f98a:	1c28      	adds	r0, r5, #0
1000f98c:	1c39      	adds	r1, r7, #0
1000f98e:	4b20      	ldr	r3, [pc, #128]	; (1000fa10 <gapc_cmp_evt+0xc8>)
1000f990:	4798      	blx	r3
1000f992:	2807      	cmp	r0, #7
1000f994:	d803      	bhi.n	1000f99e <gapc_cmp_evt+0x56>
1000f996:	783b      	ldrb	r3, [r7, #0]
1000f998:	203b      	movs	r0, #59	; 0x3b
1000f99a:	2b00      	cmp	r3, #0
1000f99c:	d037      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f99e:	8065      	strh	r5, [r4, #2]
1000f9a0:	7126      	strb	r6, [r4, #4]
1000f9a2:	2009      	movs	r0, #9
1000f9a4:	e033      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9a6:	203b      	movs	r0, #59	; 0x3b
1000f9a8:	2e00      	cmp	r6, #0
1000f9aa:	d030      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9ac:	0a2d      	lsrs	r5, r5, #8
1000f9ae:	8015      	strh	r5, [r2, #0]
1000f9b0:	7096      	strb	r6, [r2, #2]
1000f9b2:	382d      	subs	r0, #45	; 0x2d
1000f9b4:	e02b      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9b6:	203b      	movs	r0, #59	; 0x3b
1000f9b8:	2e00      	cmp	r6, #0
1000f9ba:	d028      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9bc:	2300      	movs	r3, #0
1000f9be:	0a2d      	lsrs	r5, r5, #8
1000f9c0:	8015      	strh	r5, [r2, #0]
1000f9c2:	7096      	strb	r6, [r2, #2]
1000f9c4:	8093      	strh	r3, [r2, #4]
1000f9c6:	80d3      	strh	r3, [r2, #6]
1000f9c8:	8113      	strh	r3, [r2, #8]
1000f9ca:	3834      	subs	r0, #52	; 0x34
1000f9cc:	e01f      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9ce:	203b      	movs	r0, #59	; 0x3b
1000f9d0:	2e00      	cmp	r6, #0
1000f9d2:	d01c      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9d4:	7216      	strb	r6, [r2, #8]
1000f9d6:	e003      	b.n	1000f9e0 <gapc_cmp_evt+0x98>
1000f9d8:	203b      	movs	r0, #59	; 0x3b
1000f9da:	2e00      	cmp	r6, #0
1000f9dc:	d017      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9de:	7116      	strb	r6, [r2, #4]
1000f9e0:	3812      	subs	r0, #18
1000f9e2:	e014      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9e4:	203b      	movs	r0, #59	; 0x3b
1000f9e6:	2e00      	cmp	r6, #0
1000f9e8:	d011      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9ea:	7093      	strb	r3, [r2, #2]
1000f9ec:	70d6      	strb	r6, [r2, #3]
1000f9ee:	382a      	subs	r0, #42	; 0x2a
1000f9f0:	e00d      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9f2:	203b      	movs	r0, #59	; 0x3b
1000f9f4:	2e00      	cmp	r6, #0
1000f9f6:	d00a      	beq.n	1000fa0e <gapc_cmp_evt+0xc6>
1000f9f8:	0a2d      	lsrs	r5, r5, #8
1000f9fa:	7016      	strb	r6, [r2, #0]
1000f9fc:	8055      	strh	r5, [r2, #2]
1000f9fe:	1d10      	adds	r0, r2, #4
1000fa00:	2100      	movs	r1, #0
1000fa02:	2205      	movs	r2, #5
1000fa04:	4b03      	ldr	r3, [pc, #12]	; (1000fa14 <gapc_cmp_evt+0xcc>)
1000fa06:	4798      	blx	r3
1000fa08:	2012      	movs	r0, #18
1000fa0a:	e000      	b.n	1000fa0e <gapc_cmp_evt+0xc6>
1000fa0c:	2000      	movs	r0, #0
1000fa0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fa10:	1000f8e5 	.word	0x1000f8e5
1000fa14:	10014477 	.word	0x10014477

1000fa18 <gapc_connection_cfm_handler>:
1000fa18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa1a:	b085      	sub	sp, #20
1000fa1c:	1c1d      	adds	r5, r3, #0
1000fa1e:	ab0a      	add	r3, sp, #40	; 0x28
1000fa20:	781b      	ldrb	r3, [r3, #0]
1000fa22:	9201      	str	r2, [sp, #4]
1000fa24:	9302      	str	r3, [sp, #8]
1000fa26:	ab0b      	add	r3, sp, #44	; 0x2c
1000fa28:	781b      	ldrb	r3, [r3, #0]
1000fa2a:	1c07      	adds	r7, r0, #0
1000fa2c:	9303      	str	r3, [sp, #12]
1000fa2e:	ab0c      	add	r3, sp, #48	; 0x30
1000fa30:	881a      	ldrh	r2, [r3, #0]
1000fa32:	2302      	movs	r3, #2
1000fa34:	1c0e      	adds	r6, r1, #0
1000fa36:	4c23      	ldr	r4, [pc, #140]	; (1000fac4 <gapc_connection_cfm_handler+0xac>)
1000fa38:	1c39      	adds	r1, r7, #0
1000fa3a:	7023      	strb	r3, [r4, #0]
1000fa3c:	330c      	adds	r3, #12
1000fa3e:	7063      	strb	r3, [r4, #1]
1000fa40:	70a3      	strb	r3, [r4, #2]
1000fa42:	4b21      	ldr	r3, [pc, #132]	; (1000fac8 <gapc_connection_cfm_handler+0xb0>)
1000fa44:	70e2      	strb	r2, [r4, #3]
1000fa46:	881a      	ldrh	r2, [r3, #0]
1000fa48:	881b      	ldrh	r3, [r3, #0]
1000fa4a:	7122      	strb	r2, [r4, #4]
1000fa4c:	0a1b      	lsrs	r3, r3, #8
1000fa4e:	4f1f      	ldr	r7, [pc, #124]	; (1000facc <gapc_connection_cfm_handler+0xb4>)
1000fa50:	2210      	movs	r2, #16
1000fa52:	481f      	ldr	r0, [pc, #124]	; (1000fad0 <gapc_connection_cfm_handler+0xb8>)
1000fa54:	7163      	strb	r3, [r4, #5]
1000fa56:	47b8      	blx	r7
1000fa58:	0a33      	lsrs	r3, r6, #8
1000fa5a:	7626      	strb	r6, [r4, #24]
1000fa5c:	7663      	strb	r3, [r4, #25]
1000fa5e:	9901      	ldr	r1, [sp, #4]
1000fa60:	0c33      	lsrs	r3, r6, #16
1000fa62:	2210      	movs	r2, #16
1000fa64:	0e36      	lsrs	r6, r6, #24
1000fa66:	481b      	ldr	r0, [pc, #108]	; (1000fad4 <gapc_connection_cfm_handler+0xbc>)
1000fa68:	76a3      	strb	r3, [r4, #26]
1000fa6a:	76e6      	strb	r6, [r4, #27]
1000fa6c:	47b8      	blx	r7
1000fa6e:	1c23      	adds	r3, r4, #0
1000fa70:	332c      	adds	r3, #44	; 0x2c
1000fa72:	701d      	strb	r5, [r3, #0]
1000fa74:	1c23      	adds	r3, r4, #0
1000fa76:	0a2a      	lsrs	r2, r5, #8
1000fa78:	332d      	adds	r3, #45	; 0x2d
1000fa7a:	701a      	strb	r2, [r3, #0]
1000fa7c:	1c23      	adds	r3, r4, #0
1000fa7e:	0c2a      	lsrs	r2, r5, #16
1000fa80:	332e      	adds	r3, #46	; 0x2e
1000fa82:	701a      	strb	r2, [r3, #0]
1000fa84:	1c23      	adds	r3, r4, #0
1000fa86:	0e2d      	lsrs	r5, r5, #24
1000fa88:	332f      	adds	r3, #47	; 0x2f
1000fa8a:	466a      	mov	r2, sp
1000fa8c:	701d      	strb	r5, [r3, #0]
1000fa8e:	1c23      	adds	r3, r4, #0
1000fa90:	7a12      	ldrb	r2, [r2, #8]
1000fa92:	3330      	adds	r3, #48	; 0x30
1000fa94:	701a      	strb	r2, [r3, #0]
1000fa96:	1c23      	adds	r3, r4, #0
1000fa98:	2500      	movs	r5, #0
1000fa9a:	3331      	adds	r3, #49	; 0x31
1000fa9c:	466a      	mov	r2, sp
1000fa9e:	701d      	strb	r5, [r3, #0]
1000faa0:	1c23      	adds	r3, r4, #0
1000faa2:	7b12      	ldrb	r2, [r2, #12]
1000faa4:	3332      	adds	r3, #50	; 0x32
1000faa6:	701a      	strb	r2, [r3, #0]
1000faa8:	1c23      	adds	r3, r4, #0
1000faaa:	3333      	adds	r3, #51	; 0x33
1000faac:	701d      	strb	r5, [r3, #0]
1000faae:	232c      	movs	r3, #44	; 0x2c
1000fab0:	1c20      	adds	r0, r4, #0
1000fab2:	71a3      	strb	r3, [r4, #6]
1000fab4:	2134      	movs	r1, #52	; 0x34
1000fab6:	4b08      	ldr	r3, [pc, #32]	; (1000fad8 <gapc_connection_cfm_handler+0xc0>)
1000fab8:	71e5      	strb	r5, [r4, #7]
1000faba:	4798      	blx	r3
1000fabc:	1c28      	adds	r0, r5, #0
1000fabe:	b005      	add	sp, #20
1000fac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fac2:	46c0      	nop			; (mov r8, r8)
1000fac4:	1001a098 	.word	0x1001a098
1000fac8:	10019d28 	.word	0x10019d28
1000facc:	1001443b 	.word	0x1001443b
1000fad0:	1001a0a0 	.word	0x1001a0a0
1000fad4:	1001a0b4 	.word	0x1001a0b4
1000fad8:	1000f715 	.word	0x1000f715

1000fadc <gapc_con_req_ind>:
1000fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fade:	7845      	ldrb	r5, [r0, #1]
1000fae0:	7803      	ldrb	r3, [r0, #0]
1000fae2:	4c30      	ldr	r4, [pc, #192]	; (1000fba4 <gapc_con_req_ind+0xc8>)
1000fae4:	022d      	lsls	r5, r5, #8
1000fae6:	431d      	orrs	r5, r3
1000fae8:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000faea:	78c3      	ldrb	r3, [r0, #3]
1000faec:	7882      	ldrb	r2, [r0, #2]
1000faee:	b08b      	sub	sp, #44	; 0x2c
1000faf0:	021b      	lsls	r3, r3, #8
1000faf2:	431a      	orrs	r2, r3
1000faf4:	466b      	mov	r3, sp
1000faf6:	9205      	str	r2, [sp, #20]
1000faf8:	8a9b      	ldrh	r3, [r3, #20]
1000fafa:	2120      	movs	r1, #32
1000fafc:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000fafe:	7943      	ldrb	r3, [r0, #5]
1000fb00:	7902      	ldrb	r2, [r0, #4]
1000fb02:	021b      	lsls	r3, r3, #8
1000fb04:	431a      	orrs	r2, r3
1000fb06:	466b      	mov	r3, sp
1000fb08:	9206      	str	r2, [sp, #24]
1000fb0a:	8b1b      	ldrh	r3, [r3, #24]
1000fb0c:	1c06      	adds	r6, r0, #0
1000fb0e:	8623      	strh	r3, [r4, #48]	; 0x30
1000fb10:	79c3      	ldrb	r3, [r0, #7]
1000fb12:	7982      	ldrb	r2, [r0, #6]
1000fb14:	021b      	lsls	r3, r3, #8
1000fb16:	431a      	orrs	r2, r3
1000fb18:	466b      	mov	r3, sp
1000fb1a:	9207      	str	r2, [sp, #28]
1000fb1c:	466a      	mov	r2, sp
1000fb1e:	8b9b      	ldrh	r3, [r3, #28]
1000fb20:	1852      	adds	r2, r2, r1
1000fb22:	8663      	strh	r3, [r4, #50]	; 0x32
1000fb24:	7a43      	ldrb	r3, [r0, #9]
1000fb26:	1c01      	adds	r1, r0, #0
1000fb28:	9308      	str	r3, [sp, #32]
1000fb2a:	1c23      	adds	r3, r4, #0
1000fb2c:	7812      	ldrb	r2, [r2, #0]
1000fb2e:	3377      	adds	r3, #119	; 0x77
1000fb30:	3478      	adds	r4, #120	; 0x78
1000fb32:	701a      	strb	r2, [r3, #0]
1000fb34:	310a      	adds	r1, #10
1000fb36:	2206      	movs	r2, #6
1000fb38:	4b1b      	ldr	r3, [pc, #108]	; (1000fba8 <gapc_con_req_ind+0xcc>)
1000fb3a:	1c20      	adds	r0, r4, #0
1000fb3c:	4798      	blx	r3
1000fb3e:	7c33      	ldrb	r3, [r6, #16]
1000fb40:	9309      	str	r3, [sp, #36]	; 0x24
1000fb42:	4b1a      	ldr	r3, [pc, #104]	; (1000fbac <gapc_con_req_ind+0xd0>)
1000fb44:	4798      	blx	r3
1000fb46:	4e1a      	ldr	r6, [pc, #104]	; (1000fbb0 <gapc_con_req_ind+0xd4>)
1000fb48:	1e07      	subs	r7, r0, #0
1000fb4a:	2f07      	cmp	r7, #7
1000fb4c:	d81b      	bhi.n	1000fb86 <gapc_con_req_ind+0xaa>
1000fb4e:	2312      	movs	r3, #18
1000fb50:	4343      	muls	r3, r0
1000fb52:	18f0      	adds	r0, r6, r3
1000fb54:	8145      	strh	r5, [r0, #10]
1000fb56:	4669      	mov	r1, sp
1000fb58:	2524      	movs	r5, #36	; 0x24
1000fb5a:	1949      	adds	r1, r1, r5
1000fb5c:	7809      	ldrb	r1, [r1, #0]
1000fb5e:	2206      	movs	r2, #6
1000fb60:	54f1      	strb	r1, [r6, r3]
1000fb62:	2120      	movs	r1, #32
1000fb64:	466b      	mov	r3, sp
1000fb66:	185b      	adds	r3, r3, r1
1000fb68:	781b      	ldrb	r3, [r3, #0]
1000fb6a:	1c21      	adds	r1, r4, #0
1000fb6c:	7043      	strb	r3, [r0, #1]
1000fb6e:	466b      	mov	r3, sp
1000fb70:	8a9b      	ldrh	r3, [r3, #20]
1000fb72:	3002      	adds	r0, #2
1000fb74:	8143      	strh	r3, [r0, #10]
1000fb76:	466b      	mov	r3, sp
1000fb78:	8b1b      	ldrh	r3, [r3, #24]
1000fb7a:	8183      	strh	r3, [r0, #12]
1000fb7c:	466b      	mov	r3, sp
1000fb7e:	8b9b      	ldrh	r3, [r3, #28]
1000fb80:	81c3      	strh	r3, [r0, #14]
1000fb82:	4b09      	ldr	r3, [pc, #36]	; (1000fba8 <gapc_con_req_ind+0xcc>)
1000fb84:	4798      	blx	r3
1000fb86:	2112      	movs	r1, #18
1000fb88:	2300      	movs	r3, #0
1000fb8a:	434f      	muls	r7, r1
1000fb8c:	9300      	str	r3, [sp, #0]
1000fb8e:	9301      	str	r3, [sp, #4]
1000fb90:	19f6      	adds	r6, r6, r7
1000fb92:	8971      	ldrh	r1, [r6, #10]
1000fb94:	4a07      	ldr	r2, [pc, #28]	; (1000fbb4 <gapc_con_req_ind+0xd8>)
1000fb96:	9102      	str	r1, [sp, #8]
1000fb98:	1c10      	adds	r0, r2, #0
1000fb9a:	1c19      	adds	r1, r3, #0
1000fb9c:	4c06      	ldr	r4, [pc, #24]	; (1000fbb8 <gapc_con_req_ind+0xdc>)
1000fb9e:	47a0      	blx	r4
1000fba0:	b00b      	add	sp, #44	; 0x2c
1000fba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fba4:	10019dba 	.word	0x10019dba
1000fba8:	1001443b 	.word	0x1001443b
1000fbac:	1000f921 	.word	0x1000f921
1000fbb0:	10019d2a 	.word	0x10019d2a
1000fbb4:	10018f50 	.word	0x10018f50
1000fbb8:	1000fa19 	.word	0x1000fa19

1000fbbc <gapc_disconnect_cmd_handler>:
1000fbbc:	2204      	movs	r2, #4
1000fbbe:	b510      	push	{r4, lr}
1000fbc0:	4b0c      	ldr	r3, [pc, #48]	; (1000fbf4 <gapc_disconnect_cmd_handler+0x38>)
1000fbc2:	2400      	movs	r4, #0
1000fbc4:	701a      	strb	r2, [r3, #0]
1000fbc6:	320a      	adds	r2, #10
1000fbc8:	705a      	strb	r2, [r3, #1]
1000fbca:	709a      	strb	r2, [r3, #2]
1000fbcc:	4a0a      	ldr	r2, [pc, #40]	; (1000fbf8 <gapc_disconnect_cmd_handler+0x3c>)
1000fbce:	70d9      	strb	r1, [r3, #3]
1000fbd0:	8811      	ldrh	r1, [r2, #0]
1000fbd2:	8812      	ldrh	r2, [r2, #0]
1000fbd4:	7119      	strb	r1, [r3, #4]
1000fbd6:	0a12      	lsrs	r2, r2, #8
1000fbd8:	715a      	strb	r2, [r3, #5]
1000fbda:	2201      	movs	r2, #1
1000fbdc:	721a      	strb	r2, [r3, #8]
1000fbde:	1892      	adds	r2, r2, r2
1000fbe0:	7258      	strb	r0, [r3, #9]
1000fbe2:	719a      	strb	r2, [r3, #6]
1000fbe4:	71dc      	strb	r4, [r3, #7]
1000fbe6:	1c18      	adds	r0, r3, #0
1000fbe8:	210a      	movs	r1, #10
1000fbea:	4b04      	ldr	r3, [pc, #16]	; (1000fbfc <gapc_disconnect_cmd_handler+0x40>)
1000fbec:	4798      	blx	r3
1000fbee:	1c20      	adds	r0, r4, #0
1000fbf0:	bd10      	pop	{r4, pc}
1000fbf2:	46c0      	nop			; (mov r8, r8)
1000fbf4:	1001a098 	.word	0x1001a098
1000fbf8:	10019d28 	.word	0x10019d28
1000fbfc:	1000f715 	.word	0x1000f715

1000fc00 <gapc_disconnect_ind>:
1000fc00:	1c02      	adds	r2, r0, #0
1000fc02:	b508      	push	{r3, lr}
1000fc04:	7843      	ldrb	r3, [r0, #1]
1000fc06:	7800      	ldrb	r0, [r0, #0]
1000fc08:	021b      	lsls	r3, r3, #8
1000fc0a:	4318      	orrs	r0, r3
1000fc0c:	8008      	strh	r0, [r1, #0]
1000fc0e:	7893      	ldrb	r3, [r2, #2]
1000fc10:	708b      	strb	r3, [r1, #2]
1000fc12:	2100      	movs	r1, #0
1000fc14:	4b05      	ldr	r3, [pc, #20]	; (1000fc2c <gapc_disconnect_ind+0x2c>)
1000fc16:	4798      	blx	r3
1000fc18:	2807      	cmp	r0, #7
1000fc1a:	d806      	bhi.n	1000fc2a <gapc_disconnect_ind+0x2a>
1000fc1c:	2312      	movs	r3, #18
1000fc1e:	4358      	muls	r0, r3
1000fc20:	4b03      	ldr	r3, [pc, #12]	; (1000fc30 <gapc_disconnect_ind+0x30>)
1000fc22:	1818      	adds	r0, r3, r0
1000fc24:	2301      	movs	r3, #1
1000fc26:	425b      	negs	r3, r3
1000fc28:	8143      	strh	r3, [r0, #10]
1000fc2a:	bd08      	pop	{r3, pc}
1000fc2c:	1000f8e5 	.word	0x1000f8e5
1000fc30:	10019d2a 	.word	0x10019d2a

1000fc34 <gapc_bond_cmd_handler>:
1000fc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fc36:	9300      	str	r3, [sp, #0]
1000fc38:	2312      	movs	r3, #18
1000fc3a:	1c04      	adds	r4, r0, #0
1000fc3c:	a808      	add	r0, sp, #32
1000fc3e:	7807      	ldrb	r7, [r0, #0]
1000fc40:	a809      	add	r0, sp, #36	; 0x24
1000fc42:	7806      	ldrb	r6, [r0, #0]
1000fc44:	a80a      	add	r0, sp, #40	; 0x28
1000fc46:	7805      	ldrb	r5, [r0, #0]
1000fc48:	a80b      	add	r0, sp, #44	; 0x2c
1000fc4a:	7800      	ldrb	r0, [r0, #0]
1000fc4c:	9001      	str	r0, [sp, #4]
1000fc4e:	4810      	ldr	r0, [pc, #64]	; (1000fc90 <gapc_bond_cmd_handler+0x5c>)
1000fc50:	7003      	strb	r3, [r0, #0]
1000fc52:	230e      	movs	r3, #14
1000fc54:	70c4      	strb	r4, [r0, #3]
1000fc56:	4c0f      	ldr	r4, [pc, #60]	; (1000fc94 <gapc_bond_cmd_handler+0x60>)
1000fc58:	7043      	strb	r3, [r0, #1]
1000fc5a:	7083      	strb	r3, [r0, #2]
1000fc5c:	8823      	ldrh	r3, [r4, #0]
1000fc5e:	8824      	ldrh	r4, [r4, #0]
1000fc60:	7103      	strb	r3, [r0, #4]
1000fc62:	466b      	mov	r3, sp
1000fc64:	781b      	ldrb	r3, [r3, #0]
1000fc66:	0a24      	lsrs	r4, r4, #8
1000fc68:	72c3      	strb	r3, [r0, #11]
1000fc6a:	466b      	mov	r3, sp
1000fc6c:	791b      	ldrb	r3, [r3, #4]
1000fc6e:	7144      	strb	r4, [r0, #5]
1000fc70:	73c3      	strb	r3, [r0, #15]
1000fc72:	2308      	movs	r3, #8
1000fc74:	7183      	strb	r3, [r0, #6]
1000fc76:	2300      	movs	r3, #0
1000fc78:	240a      	movs	r4, #10
1000fc7a:	7241      	strb	r1, [r0, #9]
1000fc7c:	71c3      	strb	r3, [r0, #7]
1000fc7e:	2110      	movs	r1, #16
1000fc80:	4b05      	ldr	r3, [pc, #20]	; (1000fc98 <gapc_bond_cmd_handler+0x64>)
1000fc82:	7307      	strb	r7, [r0, #12]
1000fc84:	7346      	strb	r6, [r0, #13]
1000fc86:	7385      	strb	r5, [r0, #14]
1000fc88:	7204      	strb	r4, [r0, #8]
1000fc8a:	7282      	strb	r2, [r0, #10]
1000fc8c:	4798      	blx	r3
1000fc8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fc90:	1001a098 	.word	0x1001a098
1000fc94:	10019d28 	.word	0x10019d28
1000fc98:	1000f715 	.word	0x1000f715

1000fc9c <gapc_bond_ind>:
1000fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fc9e:	780e      	ldrb	r6, [r1, #0]
1000fca0:	1c03      	adds	r3, r0, #0
1000fca2:	1eb0      	subs	r0, r6, #2
1000fca4:	2805      	cmp	r0, #5
1000fca6:	d85d      	bhi.n	1000fd64 <gapc_bond_ind+0xc8>
1000fca8:	1c15      	adds	r5, r2, #0
1000fcaa:	1c0c      	adds	r4, r1, #0
1000fcac:	f001 fe04 	bl	100118b8 <__gnu_thumb1_case_uqi>
1000fcb0:	2f5a030d 	.word	0x2f5a030d
1000fcb4:	4740      	.short	0x4740
1000fcb6:	2009      	movs	r0, #9
1000fcb8:	2a00      	cmp	r2, #0
1000fcba:	d054      	beq.n	1000fd66 <gapc_bond_ind+0xca>
1000fcbc:	0a1b      	lsrs	r3, r3, #8
1000fcbe:	8053      	strh	r3, [r2, #2]
1000fcc0:	788b      	ldrb	r3, [r1, #2]
1000fcc2:	4829      	ldr	r0, [pc, #164]	; (1000fd68 <gapc_bond_ind+0xcc>)
1000fcc4:	7113      	strb	r3, [r2, #4]
1000fcc6:	2100      	movs	r1, #0
1000fcc8:	e01c      	b.n	1000fd04 <gapc_bond_ind+0x68>
1000fcca:	2009      	movs	r0, #9
1000fccc:	2a00      	cmp	r2, #0
1000fcce:	d04a      	beq.n	1000fd66 <gapc_bond_ind+0xca>
1000fcd0:	4c25      	ldr	r4, [pc, #148]	; (1000fd68 <gapc_bond_ind+0xcc>)
1000fcd2:	0a1b      	lsrs	r3, r3, #8
1000fcd4:	8053      	strh	r3, [r2, #2]
1000fcd6:	788b      	ldrb	r3, [r1, #2]
1000fcd8:	2700      	movs	r7, #0
1000fcda:	1c10      	adds	r0, r2, #0
1000fcdc:	1c21      	adds	r1, r4, #0
1000fcde:	7013      	strb	r3, [r2, #0]
1000fce0:	4e22      	ldr	r6, [pc, #136]	; (1000fd6c <gapc_bond_ind+0xd0>)
1000fce2:	7117      	strb	r7, [r2, #4]
1000fce4:	312e      	adds	r1, #46	; 0x2e
1000fce6:	2217      	movs	r2, #23
1000fce8:	3032      	adds	r0, #50	; 0x32
1000fcea:	47b0      	blx	r6
1000fcec:	1c28      	adds	r0, r5, #0
1000fcee:	1c21      	adds	r1, r4, #0
1000fcf0:	2210      	movs	r2, #16
1000fcf2:	311e      	adds	r1, #30
1000fcf4:	3022      	adds	r0, #34	; 0x22
1000fcf6:	47b0      	blx	r6
1000fcf8:	1ca1      	adds	r1, r4, #2
1000fcfa:	1da8      	adds	r0, r5, #6
1000fcfc:	221c      	movs	r2, #28
1000fcfe:	47b0      	blx	r6
1000fd00:	1c20      	adds	r0, r4, #0
1000fd02:	1c39      	adds	r1, r7, #0
1000fd04:	2246      	movs	r2, #70	; 0x46
1000fd06:	4b1a      	ldr	r3, [pc, #104]	; (1000fd70 <gapc_bond_ind+0xd4>)
1000fd08:	4798      	blx	r3
1000fd0a:	2009      	movs	r0, #9
1000fd0c:	e02b      	b.n	1000fd66 <gapc_bond_ind+0xca>
1000fd0e:	4d16      	ldr	r5, [pc, #88]	; (1000fd68 <gapc_bond_ind+0xcc>)
1000fd10:	3102      	adds	r1, #2
1000fd12:	1c28      	adds	r0, r5, #0
1000fd14:	2210      	movs	r2, #16
1000fd16:	4e15      	ldr	r6, [pc, #84]	; (1000fd6c <gapc_bond_ind+0xd0>)
1000fd18:	302e      	adds	r0, #46	; 0x2e
1000fd1a:	47b0      	blx	r6
1000fd1c:	1c28      	adds	r0, r5, #0
1000fd1e:	1c21      	adds	r1, r4, #0
1000fd20:	303f      	adds	r0, #63	; 0x3f
1000fd22:	3112      	adds	r1, #18
1000fd24:	2206      	movs	r2, #6
1000fd26:	47b0      	blx	r6
1000fd28:	7e23      	ldrb	r3, [r4, #24]
1000fd2a:	353e      	adds	r5, #62	; 0x3e
1000fd2c:	702b      	strb	r3, [r5, #0]
1000fd2e:	e019      	b.n	1000fd64 <gapc_bond_ind+0xc8>
1000fd30:	480d      	ldr	r0, [pc, #52]	; (1000fd68 <gapc_bond_ind+0xcc>)
1000fd32:	3102      	adds	r1, #2
1000fd34:	2210      	movs	r2, #16
1000fd36:	4b0d      	ldr	r3, [pc, #52]	; (1000fd6c <gapc_bond_ind+0xd0>)
1000fd38:	301e      	adds	r0, #30
1000fd3a:	4798      	blx	r3
1000fd3c:	e012      	b.n	1000fd64 <gapc_bond_ind+0xc8>
1000fd3e:	4d0a      	ldr	r5, [pc, #40]	; (1000fd68 <gapc_bond_ind+0xcc>)
1000fd40:	3102      	adds	r1, #2
1000fd42:	2210      	movs	r2, #16
1000fd44:	4e09      	ldr	r6, [pc, #36]	; (1000fd6c <gapc_bond_ind+0xd0>)
1000fd46:	1ca8      	adds	r0, r5, #2
1000fd48:	47b0      	blx	r6
1000fd4a:	1c28      	adds	r0, r5, #0
1000fd4c:	1c21      	adds	r1, r4, #0
1000fd4e:	7ce3      	ldrb	r3, [r4, #19]
1000fd50:	7ca2      	ldrb	r2, [r4, #18]
1000fd52:	021b      	lsls	r3, r3, #8
1000fd54:	4313      	orrs	r3, r2
1000fd56:	3014      	adds	r0, #20
1000fd58:	3114      	adds	r1, #20
1000fd5a:	2208      	movs	r2, #8
1000fd5c:	826b      	strh	r3, [r5, #18]
1000fd5e:	47b0      	blx	r6
1000fd60:	7f23      	ldrb	r3, [r4, #28]
1000fd62:	772b      	strb	r3, [r5, #28]
1000fd64:	2000      	movs	r0, #0
1000fd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fd68:	10018f80 	.word	0x10018f80
1000fd6c:	1001443b 	.word	0x1001443b
1000fd70:	10014477 	.word	0x10014477

1000fd74 <gapc_bond_req_ind>:
1000fd74:	b570      	push	{r4, r5, r6, lr}
1000fd76:	780c      	ldrb	r4, [r1, #0]
1000fd78:	1c03      	adds	r3, r0, #0
1000fd7a:	7849      	ldrb	r1, [r1, #1]
1000fd7c:	2c07      	cmp	r4, #7
1000fd7e:	d85c      	bhi.n	1000fe3a <gapc_bond_req_ind+0xc6>
1000fd80:	1c20      	adds	r0, r4, #0
1000fd82:	f001 fd99 	bl	100118b8 <__gnu_thumb1_case_uqi>
1000fd86:	5a04      	.short	0x5a04
1000fd88:	5a0b5a5a 	.word	0x5a0b5a5a
1000fd8c:	1f1f      	.short	0x1f1f
1000fd8e:	200a      	movs	r0, #10
1000fd90:	2a00      	cmp	r2, #0
1000fd92:	d053      	beq.n	1000fe3c <gapc_bond_req_ind+0xc8>
1000fd94:	0a1b      	lsrs	r3, r3, #8
1000fd96:	8013      	strh	r3, [r2, #0]
1000fd98:	7091      	strb	r1, [r2, #2]
1000fd9a:	e04f      	b.n	1000fe3c <gapc_bond_req_ind+0xc8>
1000fd9c:	2a00      	cmp	r2, #0
1000fd9e:	d00b      	beq.n	1000fdb8 <gapc_bond_req_ind+0x44>
1000fda0:	0a1b      	lsrs	r3, r3, #8
1000fda2:	8013      	strh	r3, [r2, #0]
1000fda4:	2900      	cmp	r1, #0
1000fda6:	d102      	bne.n	1000fdae <gapc_bond_req_ind+0x3a>
1000fda8:	2301      	movs	r3, #1
1000fdaa:	7093      	strb	r3, [r2, #2]
1000fdac:	e004      	b.n	1000fdb8 <gapc_bond_req_ind+0x44>
1000fdae:	2300      	movs	r3, #0
1000fdb0:	7093      	strb	r3, [r2, #2]
1000fdb2:	2902      	cmp	r1, #2
1000fdb4:	d102      	bne.n	1000fdbc <gapc_bond_req_ind+0x48>
1000fdb6:	70d3      	strb	r3, [r2, #3]
1000fdb8:	200c      	movs	r0, #12
1000fdba:	e03f      	b.n	1000fe3c <gapc_bond_req_ind+0xc8>
1000fdbc:	2901      	cmp	r1, #1
1000fdbe:	d1fb      	bne.n	1000fdb8 <gapc_bond_req_ind+0x44>
1000fdc0:	70d1      	strb	r1, [r2, #3]
1000fdc2:	e7f9      	b.n	1000fdb8 <gapc_bond_req_ind+0x44>
1000fdc4:	2214      	movs	r2, #20
1000fdc6:	481e      	ldr	r0, [pc, #120]	; (1000fe40 <gapc_bond_req_ind+0xcc>)
1000fdc8:	0a1b      	lsrs	r3, r3, #8
1000fdca:	70c3      	strb	r3, [r0, #3]
1000fdcc:	4b1d      	ldr	r3, [pc, #116]	; (1000fe44 <gapc_bond_req_ind+0xd0>)
1000fdce:	7002      	strb	r2, [r0, #0]
1000fdd0:	3a06      	subs	r2, #6
1000fdd2:	7042      	strb	r2, [r0, #1]
1000fdd4:	7082      	strb	r2, [r0, #2]
1000fdd6:	881a      	ldrh	r2, [r3, #0]
1000fdd8:	881b      	ldrh	r3, [r3, #0]
1000fdda:	4e1b      	ldr	r6, [pc, #108]	; (1000fe48 <gapc_bond_req_ind+0xd4>)
1000fddc:	0a1b      	lsrs	r3, r3, #8
1000fdde:	7143      	strb	r3, [r0, #5]
1000fde0:	2301      	movs	r3, #1
1000fde2:	7102      	strb	r2, [r0, #4]
1000fde4:	7204      	strb	r4, [r0, #8]
1000fde6:	7243      	strb	r3, [r0, #9]
1000fde8:	1c05      	adds	r5, r0, #0
1000fdea:	1c31      	adds	r1, r6, #0
1000fdec:	300a      	adds	r0, #10
1000fdee:	2c07      	cmp	r4, #7
1000fdf0:	d116      	bne.n	1000fe20 <gapc_bond_req_ind+0xac>
1000fdf2:	317e      	adds	r1, #126	; 0x7e
1000fdf4:	2210      	movs	r2, #16
1000fdf6:	4c15      	ldr	r4, [pc, #84]	; (1000fe4c <gapc_bond_req_ind+0xd8>)
1000fdf8:	47a0      	blx	r4
1000fdfa:	1c33      	adds	r3, r6, #0
1000fdfc:	1c31      	adds	r1, r6, #0
1000fdfe:	1c28      	adds	r0, r5, #0
1000fe00:	338e      	adds	r3, #142	; 0x8e
1000fe02:	881b      	ldrh	r3, [r3, #0]
1000fe04:	3190      	adds	r1, #144	; 0x90
1000fe06:	76ab      	strb	r3, [r5, #26]
1000fe08:	2208      	movs	r2, #8
1000fe0a:	0a1b      	lsrs	r3, r3, #8
1000fe0c:	301c      	adds	r0, #28
1000fe0e:	76eb      	strb	r3, [r5, #27]
1000fe10:	47a0      	blx	r4
1000fe12:	1c31      	adds	r1, r6, #0
1000fe14:	3198      	adds	r1, #152	; 0x98
1000fe16:	780a      	ldrb	r2, [r1, #0]
1000fe18:	1d6b      	adds	r3, r5, #5
1000fe1a:	77da      	strb	r2, [r3, #31]
1000fe1c:	2125      	movs	r1, #37	; 0x25
1000fe1e:	e004      	b.n	1000fe2a <gapc_bond_req_ind+0xb6>
1000fe20:	319a      	adds	r1, #154	; 0x9a
1000fe22:	2210      	movs	r2, #16
1000fe24:	4b09      	ldr	r3, [pc, #36]	; (1000fe4c <gapc_bond_req_ind+0xd8>)
1000fe26:	4798      	blx	r3
1000fe28:	211a      	movs	r1, #26
1000fe2a:	1c0b      	adds	r3, r1, #0
1000fe2c:	2400      	movs	r4, #0
1000fe2e:	3b08      	subs	r3, #8
1000fe30:	71ab      	strb	r3, [r5, #6]
1000fe32:	1c28      	adds	r0, r5, #0
1000fe34:	4b06      	ldr	r3, [pc, #24]	; (1000fe50 <gapc_bond_req_ind+0xdc>)
1000fe36:	71ec      	strb	r4, [r5, #7]
1000fe38:	4798      	blx	r3
1000fe3a:	2000      	movs	r0, #0
1000fe3c:	bd70      	pop	{r4, r5, r6, pc}
1000fe3e:	46c0      	nop			; (mov r8, r8)
1000fe40:	1001a098 	.word	0x1001a098
1000fe44:	10019d28 	.word	0x10019d28
1000fe48:	10019dba 	.word	0x10019dba
1000fe4c:	1001443b 	.word	0x1001443b
1000fe50:	1000f715 	.word	0x1000f715

1000fe54 <gapc_bond_cfm_handler_pair_resp>:
1000fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe56:	b085      	sub	sp, #20
1000fe58:	1c07      	adds	r7, r0, #0
1000fe5a:	a80a      	add	r0, sp, #40	; 0x28
1000fe5c:	7806      	ldrb	r6, [r0, #0]
1000fe5e:	a80b      	add	r0, sp, #44	; 0x2c
1000fe60:	7805      	ldrb	r5, [r0, #0]
1000fe62:	a80c      	add	r0, sp, #48	; 0x30
1000fe64:	7800      	ldrb	r0, [r0, #0]
1000fe66:	2414      	movs	r4, #20
1000fe68:	9002      	str	r0, [sp, #8]
1000fe6a:	a80d      	add	r0, sp, #52	; 0x34
1000fe6c:	7800      	ldrb	r0, [r0, #0]
1000fe6e:	9301      	str	r3, [sp, #4]
1000fe70:	9003      	str	r0, [sp, #12]
1000fe72:	a80e      	add	r0, sp, #56	; 0x38
1000fe74:	8800      	ldrh	r0, [r0, #0]
1000fe76:	4684      	mov	ip, r0
1000fe78:	4812      	ldr	r0, [pc, #72]	; (1000fec4 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000fe7a:	7004      	strb	r4, [r0, #0]
1000fe7c:	3c06      	subs	r4, #6
1000fe7e:	7044      	strb	r4, [r0, #1]
1000fe80:	7084      	strb	r4, [r0, #2]
1000fe82:	4664      	mov	r4, ip
1000fe84:	70c4      	strb	r4, [r0, #3]
1000fe86:	4c10      	ldr	r4, [pc, #64]	; (1000fec8 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000fe88:	7247      	strb	r7, [r0, #9]
1000fe8a:	8823      	ldrh	r3, [r4, #0]
1000fe8c:	8824      	ldrh	r4, [r4, #0]
1000fe8e:	7103      	strb	r3, [r0, #4]
1000fe90:	466b      	mov	r3, sp
1000fe92:	791b      	ldrb	r3, [r3, #4]
1000fe94:	0a24      	lsrs	r4, r4, #8
1000fe96:	7303      	strb	r3, [r0, #12]
1000fe98:	466b      	mov	r3, sp
1000fe9a:	7a1b      	ldrb	r3, [r3, #8]
1000fe9c:	7144      	strb	r4, [r0, #5]
1000fe9e:	73c3      	strb	r3, [r0, #15]
1000fea0:	466b      	mov	r3, sp
1000fea2:	7b1b      	ldrb	r3, [r3, #12]
1000fea4:	2401      	movs	r4, #1
1000fea6:	7403      	strb	r3, [r0, #16]
1000fea8:	2309      	movs	r3, #9
1000feaa:	7183      	strb	r3, [r0, #6]
1000feac:	2300      	movs	r3, #0
1000feae:	7204      	strb	r4, [r0, #8]
1000feb0:	7281      	strb	r1, [r0, #10]
1000feb2:	72c2      	strb	r2, [r0, #11]
1000feb4:	7346      	strb	r6, [r0, #13]
1000feb6:	7385      	strb	r5, [r0, #14]
1000feb8:	71c3      	strb	r3, [r0, #7]
1000feba:	2111      	movs	r1, #17
1000febc:	4b03      	ldr	r3, [pc, #12]	; (1000fecc <gapc_bond_cfm_handler_pair_resp+0x78>)
1000febe:	4798      	blx	r3
1000fec0:	b005      	add	sp, #20
1000fec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fec4:	1001a098 	.word	0x1001a098
1000fec8:	10019d28 	.word	0x10019d28
1000fecc:	1000f715 	.word	0x1000f715

1000fed0 <gapc_bond_cfm_handler_key_exch>:
1000fed0:	b538      	push	{r3, r4, r5, lr}
1000fed2:	2514      	movs	r5, #20
1000fed4:	4c0d      	ldr	r4, [pc, #52]	; (1000ff0c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000fed6:	70e3      	strb	r3, [r4, #3]
1000fed8:	4b0d      	ldr	r3, [pc, #52]	; (1000ff10 <gapc_bond_cfm_handler_key_exch+0x40>)
1000feda:	7025      	strb	r5, [r4, #0]
1000fedc:	3d06      	subs	r5, #6
1000fede:	7065      	strb	r5, [r4, #1]
1000fee0:	70a5      	strb	r5, [r4, #2]
1000fee2:	881d      	ldrh	r5, [r3, #0]
1000fee4:	881b      	ldrh	r3, [r3, #0]
1000fee6:	7220      	strb	r0, [r4, #8]
1000fee8:	0a1b      	lsrs	r3, r3, #8
1000feea:	7163      	strb	r3, [r4, #5]
1000feec:	7261      	strb	r1, [r4, #9]
1000feee:	4b09      	ldr	r3, [pc, #36]	; (1000ff14 <gapc_bond_cfm_handler_key_exch+0x44>)
1000fef0:	1c11      	adds	r1, r2, #0
1000fef2:	4809      	ldr	r0, [pc, #36]	; (1000ff18 <gapc_bond_cfm_handler_key_exch+0x48>)
1000fef4:	2210      	movs	r2, #16
1000fef6:	7125      	strb	r5, [r4, #4]
1000fef8:	4798      	blx	r3
1000fefa:	2312      	movs	r3, #18
1000fefc:	71a3      	strb	r3, [r4, #6]
1000fefe:	2300      	movs	r3, #0
1000ff00:	1c20      	adds	r0, r4, #0
1000ff02:	71e3      	strb	r3, [r4, #7]
1000ff04:	211a      	movs	r1, #26
1000ff06:	4b05      	ldr	r3, [pc, #20]	; (1000ff1c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ff08:	4798      	blx	r3
1000ff0a:	bd38      	pop	{r3, r4, r5, pc}
1000ff0c:	1001a098 	.word	0x1001a098
1000ff10:	10019d28 	.word	0x10019d28
1000ff14:	1001443b 	.word	0x1001443b
1000ff18:	1001a0a2 	.word	0x1001a0a2
1000ff1c:	1000f715 	.word	0x1000f715

1000ff20 <gapc_security_cmd_handler>:
1000ff20:	221a      	movs	r2, #26
1000ff22:	b508      	push	{r3, lr}
1000ff24:	4b0b      	ldr	r3, [pc, #44]	; (1000ff54 <gapc_security_cmd_handler+0x34>)
1000ff26:	701a      	strb	r2, [r3, #0]
1000ff28:	3a0c      	subs	r2, #12
1000ff2a:	705a      	strb	r2, [r3, #1]
1000ff2c:	709a      	strb	r2, [r3, #2]
1000ff2e:	4a0a      	ldr	r2, [pc, #40]	; (1000ff58 <gapc_security_cmd_handler+0x38>)
1000ff30:	70d8      	strb	r0, [r3, #3]
1000ff32:	8810      	ldrh	r0, [r2, #0]
1000ff34:	8812      	ldrh	r2, [r2, #0]
1000ff36:	7118      	strb	r0, [r3, #4]
1000ff38:	0a12      	lsrs	r2, r2, #8
1000ff3a:	715a      	strb	r2, [r3, #5]
1000ff3c:	220c      	movs	r2, #12
1000ff3e:	721a      	strb	r2, [r3, #8]
1000ff40:	3a0a      	subs	r2, #10
1000ff42:	719a      	strb	r2, [r3, #6]
1000ff44:	2200      	movs	r2, #0
1000ff46:	7259      	strb	r1, [r3, #9]
1000ff48:	71da      	strb	r2, [r3, #7]
1000ff4a:	1c18      	adds	r0, r3, #0
1000ff4c:	210a      	movs	r1, #10
1000ff4e:	4b03      	ldr	r3, [pc, #12]	; (1000ff5c <gapc_security_cmd_handler+0x3c>)
1000ff50:	4798      	blx	r3
1000ff52:	bd08      	pop	{r3, pc}
1000ff54:	1001a098 	.word	0x1001a098
1000ff58:	10019d28 	.word	0x10019d28
1000ff5c:	1000f715 	.word	0x1000f715

1000ff60 <gapc_encrypt_cmd_handler>:
1000ff60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff62:	2500      	movs	r5, #0
1000ff64:	b089      	sub	sp, #36	; 0x24
1000ff66:	9306      	str	r3, [sp, #24]
1000ff68:	ab0e      	add	r3, sp, #56	; 0x38
1000ff6a:	781b      	ldrb	r3, [r3, #0]
1000ff6c:	1c17      	adds	r7, r2, #0
1000ff6e:	9307      	str	r3, [sp, #28]
1000ff70:	ab0f      	add	r3, sp, #60	; 0x3c
1000ff72:	781b      	ldrb	r3, [r3, #0]
1000ff74:	4a19      	ldr	r2, [pc, #100]	; (1000ffdc <gapc_encrypt_cmd_handler+0x7c>)
1000ff76:	1c06      	adds	r6, r0, #0
1000ff78:	9105      	str	r1, [sp, #20]
1000ff7a:	9300      	str	r3, [sp, #0]
1000ff7c:	9002      	str	r0, [sp, #8]
1000ff7e:	1c29      	adds	r1, r5, #0
1000ff80:	1c2b      	adds	r3, r5, #0
1000ff82:	9501      	str	r5, [sp, #4]
1000ff84:	1c10      	adds	r0, r2, #0
1000ff86:	4c16      	ldr	r4, [pc, #88]	; (1000ffe0 <gapc_encrypt_cmd_handler+0x80>)
1000ff88:	47a0      	blx	r4
1000ff8a:	2316      	movs	r3, #22
1000ff8c:	4c15      	ldr	r4, [pc, #84]	; (1000ffe4 <gapc_encrypt_cmd_handler+0x84>)
1000ff8e:	9905      	ldr	r1, [sp, #20]
1000ff90:	7023      	strb	r3, [r4, #0]
1000ff92:	3b08      	subs	r3, #8
1000ff94:	7063      	strb	r3, [r4, #1]
1000ff96:	70a3      	strb	r3, [r4, #2]
1000ff98:	4b13      	ldr	r3, [pc, #76]	; (1000ffe8 <gapc_encrypt_cmd_handler+0x88>)
1000ff9a:	70e6      	strb	r6, [r4, #3]
1000ff9c:	881a      	ldrh	r2, [r3, #0]
1000ff9e:	881b      	ldrh	r3, [r3, #0]
1000ffa0:	7122      	strb	r2, [r4, #4]
1000ffa2:	0a1b      	lsrs	r3, r3, #8
1000ffa4:	7163      	strb	r3, [r4, #5]
1000ffa6:	230b      	movs	r3, #11
1000ffa8:	4e10      	ldr	r6, [pc, #64]	; (1000ffec <gapc_encrypt_cmd_handler+0x8c>)
1000ffaa:	2210      	movs	r2, #16
1000ffac:	4810      	ldr	r0, [pc, #64]	; (1000fff0 <gapc_encrypt_cmd_handler+0x90>)
1000ffae:	7223      	strb	r3, [r4, #8]
1000ffb0:	7265      	strb	r5, [r4, #9]
1000ffb2:	47b0      	blx	r6
1000ffb4:	0a3b      	lsrs	r3, r7, #8
1000ffb6:	9906      	ldr	r1, [sp, #24]
1000ffb8:	2208      	movs	r2, #8
1000ffba:	480e      	ldr	r0, [pc, #56]	; (1000fff4 <gapc_encrypt_cmd_handler+0x94>)
1000ffbc:	76e3      	strb	r3, [r4, #27]
1000ffbe:	76a7      	strb	r7, [r4, #26]
1000ffc0:	47b0      	blx	r6
1000ffc2:	466a      	mov	r2, sp
1000ffc4:	7f12      	ldrb	r2, [r2, #28]
1000ffc6:	1d63      	adds	r3, r4, #5
1000ffc8:	77da      	strb	r2, [r3, #31]
1000ffca:	231d      	movs	r3, #29
1000ffcc:	1c20      	adds	r0, r4, #0
1000ffce:	71a3      	strb	r3, [r4, #6]
1000ffd0:	2125      	movs	r1, #37	; 0x25
1000ffd2:	4b09      	ldr	r3, [pc, #36]	; (1000fff8 <gapc_encrypt_cmd_handler+0x98>)
1000ffd4:	71e5      	strb	r5, [r4, #7]
1000ffd6:	4798      	blx	r3
1000ffd8:	b009      	add	sp, #36	; 0x24
1000ffda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ffdc:	10018f60 	.word	0x10018f60
1000ffe0:	1000fa19 	.word	0x1000fa19
1000ffe4:	1001a098 	.word	0x1001a098
1000ffe8:	10019d28 	.word	0x10019d28
1000ffec:	1001443b 	.word	0x1001443b
1000fff0:	1001a0a2 	.word	0x1001a0a2
1000fff4:	1001a0b4 	.word	0x1001a0b4
1000fff8:	1000f715 	.word	0x1000f715

1000fffc <gapc_encrypt_req_ind>:
1000fffc:	b508      	push	{r3, lr}
1000fffe:	0a00      	lsrs	r0, r0, #8
10010000:	8010      	strh	r0, [r2, #0]
10010002:	784b      	ldrb	r3, [r1, #1]
10010004:	7808      	ldrb	r0, [r1, #0]
10010006:	021b      	lsls	r3, r3, #8
10010008:	4303      	orrs	r3, r0
1001000a:	8053      	strh	r3, [r2, #2]
1001000c:	1d10      	adds	r0, r2, #4
1001000e:	3102      	adds	r1, #2
10010010:	2208      	movs	r2, #8
10010012:	4b01      	ldr	r3, [pc, #4]	; (10010018 <gapc_encrypt_req_ind+0x1c>)
10010014:	4798      	blx	r3
10010016:	bd08      	pop	{r3, pc}
10010018:	1001443b 	.word	0x1001443b

1001001c <gapc_encrypt_cfm_handler>:
1001001c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001001e:	2500      	movs	r5, #0
10010020:	b087      	sub	sp, #28
10010022:	9304      	str	r3, [sp, #16]
10010024:	ab0c      	add	r3, sp, #48	; 0x30
10010026:	781b      	ldrb	r3, [r3, #0]
10010028:	1c17      	adds	r7, r2, #0
1001002a:	4a15      	ldr	r2, [pc, #84]	; (10010080 <gapc_encrypt_cfm_handler+0x64>)
1001002c:	1c06      	adds	r6, r0, #0
1001002e:	9305      	str	r3, [sp, #20]
10010030:	9100      	str	r1, [sp, #0]
10010032:	9002      	str	r0, [sp, #8]
10010034:	1c29      	adds	r1, r5, #0
10010036:	1c2b      	adds	r3, r5, #0
10010038:	9501      	str	r5, [sp, #4]
1001003a:	1c10      	adds	r0, r2, #0
1001003c:	4c11      	ldr	r4, [pc, #68]	; (10010084 <gapc_encrypt_cfm_handler+0x68>)
1001003e:	47a0      	blx	r4
10010040:	2318      	movs	r3, #24
10010042:	4c11      	ldr	r4, [pc, #68]	; (10010088 <gapc_encrypt_cfm_handler+0x6c>)
10010044:	9904      	ldr	r1, [sp, #16]
10010046:	7023      	strb	r3, [r4, #0]
10010048:	3b0a      	subs	r3, #10
1001004a:	7063      	strb	r3, [r4, #1]
1001004c:	70a3      	strb	r3, [r4, #2]
1001004e:	4b0f      	ldr	r3, [pc, #60]	; (1001008c <gapc_encrypt_cfm_handler+0x70>)
10010050:	480f      	ldr	r0, [pc, #60]	; (10010090 <gapc_encrypt_cfm_handler+0x74>)
10010052:	881a      	ldrh	r2, [r3, #0]
10010054:	881b      	ldrh	r3, [r3, #0]
10010056:	7122      	strb	r2, [r4, #4]
10010058:	0a1b      	lsrs	r3, r3, #8
1001005a:	7163      	strb	r3, [r4, #5]
1001005c:	2210      	movs	r2, #16
1001005e:	4b0d      	ldr	r3, [pc, #52]	; (10010094 <gapc_encrypt_cfm_handler+0x78>)
10010060:	70e6      	strb	r6, [r4, #3]
10010062:	7227      	strb	r7, [r4, #8]
10010064:	4798      	blx	r3
10010066:	466b      	mov	r3, sp
10010068:	7d1b      	ldrb	r3, [r3, #20]
1001006a:	1c20      	adds	r0, r4, #0
1001006c:	7663      	strb	r3, [r4, #25]
1001006e:	2312      	movs	r3, #18
10010070:	211a      	movs	r1, #26
10010072:	71a3      	strb	r3, [r4, #6]
10010074:	4b08      	ldr	r3, [pc, #32]	; (10010098 <gapc_encrypt_cfm_handler+0x7c>)
10010076:	71e5      	strb	r5, [r4, #7]
10010078:	4798      	blx	r3
1001007a:	b007      	add	sp, #28
1001007c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001007e:	46c0      	nop			; (mov r8, r8)
10010080:	10018f70 	.word	0x10018f70
10010084:	1000fa19 	.word	0x1000fa19
10010088:	1001a098 	.word	0x1001a098
1001008c:	10019d28 	.word	0x10019d28
10010090:	1001a0a1 	.word	0x1001a0a1
10010094:	1001443b 	.word	0x1001443b
10010098:	1000f715 	.word	0x1000f715

1001009c <gapc_encrypt_ind>:
1001009c:	780b      	ldrb	r3, [r1, #0]
1001009e:	0a00      	lsrs	r0, r0, #8
100100a0:	70d3      	strb	r3, [r2, #3]
100100a2:	2300      	movs	r3, #0
100100a4:	8010      	strh	r0, [r2, #0]
100100a6:	7093      	strb	r3, [r2, #2]
100100a8:	4770      	bx	lr
	...

100100ac <gapc_param_update_cfm_handler>:
100100ac:	b538      	push	{r3, r4, r5, lr}
100100ae:	2410      	movs	r4, #16
100100b0:	1c05      	adds	r5, r0, #0
100100b2:	480e      	ldr	r0, [pc, #56]	; (100100ec <gapc_param_update_cfm_handler+0x40>)
100100b4:	7004      	strb	r4, [r0, #0]
100100b6:	3c02      	subs	r4, #2
100100b8:	7044      	strb	r4, [r0, #1]
100100ba:	7084      	strb	r4, [r0, #2]
100100bc:	4c0c      	ldr	r4, [pc, #48]	; (100100f0 <gapc_param_update_cfm_handler+0x44>)
100100be:	70c5      	strb	r5, [r0, #3]
100100c0:	8825      	ldrh	r5, [r4, #0]
100100c2:	8824      	ldrh	r4, [r4, #0]
100100c4:	72c3      	strb	r3, [r0, #11]
100100c6:	0a1b      	lsrs	r3, r3, #8
100100c8:	0a24      	lsrs	r4, r4, #8
100100ca:	7303      	strb	r3, [r0, #12]
100100cc:	2305      	movs	r3, #5
100100ce:	7144      	strb	r4, [r0, #5]
100100d0:	2400      	movs	r4, #0
100100d2:	7201      	strb	r1, [r0, #8]
100100d4:	7242      	strb	r2, [r0, #9]
100100d6:	7183      	strb	r3, [r0, #6]
100100d8:	0a12      	lsrs	r2, r2, #8
100100da:	210d      	movs	r1, #13
100100dc:	4b05      	ldr	r3, [pc, #20]	; (100100f4 <gapc_param_update_cfm_handler+0x48>)
100100de:	7105      	strb	r5, [r0, #4]
100100e0:	7282      	strb	r2, [r0, #10]
100100e2:	71c4      	strb	r4, [r0, #7]
100100e4:	4798      	blx	r3
100100e6:	1c20      	adds	r0, r4, #0
100100e8:	bd38      	pop	{r3, r4, r5, pc}
100100ea:	46c0      	nop			; (mov r8, r8)
100100ec:	1001a098 	.word	0x1001a098
100100f0:	10019d28 	.word	0x10019d28
100100f4:	1000f715 	.word	0x1000f715

100100f8 <gapc_param_updated_ind>:
100100f8:	2300      	movs	r3, #0
100100fa:	0a00      	lsrs	r0, r0, #8
100100fc:	8010      	strh	r0, [r2, #0]
100100fe:	7093      	strb	r3, [r2, #2]
10010100:	784b      	ldrb	r3, [r1, #1]
10010102:	7808      	ldrb	r0, [r1, #0]
10010104:	021b      	lsls	r3, r3, #8
10010106:	4303      	orrs	r3, r0
10010108:	8093      	strh	r3, [r2, #4]
1001010a:	78cb      	ldrb	r3, [r1, #3]
1001010c:	7888      	ldrb	r0, [r1, #2]
1001010e:	021b      	lsls	r3, r3, #8
10010110:	4303      	orrs	r3, r0
10010112:	80d3      	strh	r3, [r2, #6]
10010114:	794b      	ldrb	r3, [r1, #5]
10010116:	7909      	ldrb	r1, [r1, #4]
10010118:	021b      	lsls	r3, r3, #8
1001011a:	430b      	orrs	r3, r1
1001011c:	2007      	movs	r0, #7
1001011e:	8113      	strh	r3, [r2, #8]
10010120:	4770      	bx	lr

10010122 <gapc_param_updated_req_ind>:
10010122:	0a00      	lsrs	r0, r0, #8
10010124:	8010      	strh	r0, [r2, #0]
10010126:	784b      	ldrb	r3, [r1, #1]
10010128:	7808      	ldrb	r0, [r1, #0]
1001012a:	021b      	lsls	r3, r3, #8
1001012c:	4303      	orrs	r3, r0
1001012e:	8053      	strh	r3, [r2, #2]
10010130:	78cb      	ldrb	r3, [r1, #3]
10010132:	7888      	ldrb	r0, [r1, #2]
10010134:	021b      	lsls	r3, r3, #8
10010136:	4303      	orrs	r3, r0
10010138:	8093      	strh	r3, [r2, #4]
1001013a:	794b      	ldrb	r3, [r1, #5]
1001013c:	7908      	ldrb	r0, [r1, #4]
1001013e:	021b      	lsls	r3, r3, #8
10010140:	4303      	orrs	r3, r0
10010142:	80d3      	strh	r3, [r2, #6]
10010144:	79cb      	ldrb	r3, [r1, #7]
10010146:	7989      	ldrb	r1, [r1, #6]
10010148:	021b      	lsls	r3, r3, #8
1001014a:	430b      	orrs	r3, r1
1001014c:	2008      	movs	r0, #8
1001014e:	8113      	strh	r3, [r2, #8]
10010150:	4770      	bx	lr
	...

10010154 <gapc_dev_info_req_ind_handler>:
10010154:	b508      	push	{r3, lr}
10010156:	1c0b      	adds	r3, r1, #0
10010158:	0a01      	lsrs	r1, r0, #8
1001015a:	8011      	strh	r1, [r2, #0]
1001015c:	7818      	ldrb	r0, [r3, #0]
1001015e:	7090      	strb	r0, [r2, #2]
10010160:	2800      	cmp	r0, #0
10010162:	d104      	bne.n	1001016e <gapc_dev_info_req_ind_handler+0x1a>
10010164:	4b03      	ldr	r3, [pc, #12]	; (10010174 <gapc_dev_info_req_ind_handler+0x20>)
10010166:	33aa      	adds	r3, #170	; 0xaa
10010168:	881b      	ldrh	r3, [r3, #0]
1001016a:	2b00      	cmp	r3, #0
1001016c:	d001      	beq.n	10010172 <gapc_dev_info_req_ind_handler+0x1e>
1001016e:	4b02      	ldr	r3, [pc, #8]	; (10010178 <gapc_dev_info_req_ind_handler+0x24>)
10010170:	4798      	blx	r3
10010172:	bd08      	pop	{r3, pc}
10010174:	10019dba 	.word	0x10019dba
10010178:	1000f825 	.word	0x1000f825

1001017c <gapc_sec_req_ind>:
1001017c:	0a00      	lsrs	r0, r0, #8
1001017e:	8010      	strh	r0, [r2, #0]
10010180:	7809      	ldrb	r1, [r1, #0]
10010182:	2301      	movs	r3, #1
10010184:	1c08      	adds	r0, r1, #0
10010186:	0889      	lsrs	r1, r1, #2
10010188:	4018      	ands	r0, r3
1001018a:	400b      	ands	r3, r1
1001018c:	70d0      	strb	r0, [r2, #3]
1001018e:	7113      	strb	r3, [r2, #4]
10010190:	4770      	bx	lr

10010192 <gapc_sign_counter_ind_handler>:
10010192:	0a00      	lsrs	r0, r0, #8
10010194:	8010      	strh	r0, [r2, #0]
10010196:	784b      	ldrb	r3, [r1, #1]
10010198:	0218      	lsls	r0, r3, #8
1001019a:	788b      	ldrb	r3, [r1, #2]
1001019c:	041b      	lsls	r3, r3, #16
1001019e:	4303      	orrs	r3, r0
100101a0:	7808      	ldrb	r0, [r1, #0]
100101a2:	4303      	orrs	r3, r0
100101a4:	78c8      	ldrb	r0, [r1, #3]
100101a6:	0600      	lsls	r0, r0, #24
100101a8:	4303      	orrs	r3, r0
100101aa:	6053      	str	r3, [r2, #4]
100101ac:	794b      	ldrb	r3, [r1, #5]
100101ae:	0218      	lsls	r0, r3, #8
100101b0:	798b      	ldrb	r3, [r1, #6]
100101b2:	041b      	lsls	r3, r3, #16
100101b4:	4303      	orrs	r3, r0
100101b6:	7908      	ldrb	r0, [r1, #4]
100101b8:	79c9      	ldrb	r1, [r1, #7]
100101ba:	4303      	orrs	r3, r0
100101bc:	0609      	lsls	r1, r1, #24
100101be:	430b      	orrs	r3, r1
100101c0:	2000      	movs	r0, #0
100101c2:	6093      	str	r3, [r2, #8]
100101c4:	4770      	bx	lr
	...

100101c8 <gapc_peer_att_info_ind_handler>:
100101c8:	b510      	push	{r4, lr}
100101ca:	0a00      	lsrs	r0, r0, #8
100101cc:	8010      	strh	r0, [r2, #0]
100101ce:	7808      	ldrb	r0, [r1, #0]
100101d0:	7090      	strb	r0, [r2, #2]
100101d2:	788b      	ldrb	r3, [r1, #2]
100101d4:	784c      	ldrb	r4, [r1, #1]
100101d6:	021b      	lsls	r3, r3, #8
100101d8:	4323      	orrs	r3, r4
100101da:	8093      	strh	r3, [r2, #4]
100101dc:	2801      	cmp	r0, #1
100101de:	d027      	beq.n	10010230 <gapc_peer_att_info_ind_handler+0x68>
100101e0:	2800      	cmp	r0, #0
100101e2:	d017      	beq.n	10010214 <gapc_peer_att_info_ind_handler+0x4c>
100101e4:	2802      	cmp	r0, #2
100101e6:	d12a      	bne.n	1001023e <gapc_peer_att_info_ind_handler+0x76>
100101e8:	790b      	ldrb	r3, [r1, #4]
100101ea:	78c8      	ldrb	r0, [r1, #3]
100101ec:	021b      	lsls	r3, r3, #8
100101ee:	4303      	orrs	r3, r0
100101f0:	8113      	strh	r3, [r2, #8]
100101f2:	798b      	ldrb	r3, [r1, #6]
100101f4:	7948      	ldrb	r0, [r1, #5]
100101f6:	021b      	lsls	r3, r3, #8
100101f8:	4303      	orrs	r3, r0
100101fa:	80d3      	strh	r3, [r2, #6]
100101fc:	7a0b      	ldrb	r3, [r1, #8]
100101fe:	79c8      	ldrb	r0, [r1, #7]
10010200:	021b      	lsls	r3, r3, #8
10010202:	4303      	orrs	r3, r0
10010204:	8193      	strh	r3, [r2, #12]
10010206:	7a8b      	ldrb	r3, [r1, #10]
10010208:	7a49      	ldrb	r1, [r1, #9]
1001020a:	021b      	lsls	r3, r3, #8
1001020c:	430b      	orrs	r3, r1
1001020e:	8153      	strh	r3, [r2, #10]
10010210:	2306      	movs	r3, #6
10010212:	e013      	b.n	1001023c <gapc_peer_att_info_ind_handler+0x74>
10010214:	1c14      	adds	r4, r2, #0
10010216:	1c20      	adds	r0, r4, #0
10010218:	790a      	ldrb	r2, [r1, #4]
1001021a:	78cb      	ldrb	r3, [r1, #3]
1001021c:	0212      	lsls	r2, r2, #8
1001021e:	431a      	orrs	r2, r3
10010220:	80e2      	strh	r2, [r4, #6]
10010222:	4b07      	ldr	r3, [pc, #28]	; (10010240 <gapc_peer_att_info_ind_handler+0x78>)
10010224:	3008      	adds	r0, #8
10010226:	3105      	adds	r1, #5
10010228:	4798      	blx	r3
1001022a:	2302      	movs	r3, #2
1001022c:	70a3      	strb	r3, [r4, #2]
1001022e:	e006      	b.n	1001023e <gapc_peer_att_info_ind_handler+0x76>
10010230:	790b      	ldrb	r3, [r1, #4]
10010232:	78c9      	ldrb	r1, [r1, #3]
10010234:	021b      	lsls	r3, r3, #8
10010236:	430b      	orrs	r3, r1
10010238:	80d3      	strh	r3, [r2, #6]
1001023a:	2305      	movs	r3, #5
1001023c:	7093      	strb	r3, [r2, #2]
1001023e:	bd10      	pop	{r4, pc}
10010240:	1001443b 	.word	0x1001443b

10010244 <gapc_con_channel_map_ind_handler>:
10010244:	b508      	push	{r3, lr}
10010246:	2300      	movs	r3, #0
10010248:	0a00      	lsrs	r0, r0, #8
1001024a:	7013      	strb	r3, [r2, #0]
1001024c:	8050      	strh	r0, [r2, #2]
1001024e:	4b02      	ldr	r3, [pc, #8]	; (10010258 <gapc_con_channel_map_ind_handler+0x14>)
10010250:	1d10      	adds	r0, r2, #4
10010252:	2205      	movs	r2, #5
10010254:	4798      	blx	r3
10010256:	bd08      	pop	{r3, pc}
10010258:	1001443b 	.word	0x1001443b

1001025c <gapc_lecb_connected>:
1001025c:	7843      	ldrb	r3, [r0, #1]
1001025e:	7802      	ldrb	r2, [r0, #0]
10010260:	021b      	lsls	r3, r3, #8
10010262:	4313      	orrs	r3, r2
10010264:	800b      	strh	r3, [r1, #0]
10010266:	78c3      	ldrb	r3, [r0, #3]
10010268:	7882      	ldrb	r2, [r0, #2]
1001026a:	021b      	lsls	r3, r3, #8
1001026c:	4313      	orrs	r3, r2
1001026e:	804b      	strh	r3, [r1, #2]
10010270:	7943      	ldrb	r3, [r0, #5]
10010272:	7902      	ldrb	r2, [r0, #4]
10010274:	021b      	lsls	r3, r3, #8
10010276:	4313      	orrs	r3, r2
10010278:	808b      	strh	r3, [r1, #4]
1001027a:	79c3      	ldrb	r3, [r0, #7]
1001027c:	7982      	ldrb	r2, [r0, #6]
1001027e:	021b      	lsls	r3, r3, #8
10010280:	4313      	orrs	r3, r2
10010282:	80cb      	strh	r3, [r1, #6]
10010284:	2300      	movs	r3, #0
10010286:	720b      	strb	r3, [r1, #8]
10010288:	4770      	bx	lr

1001028a <gapc_lecb_disconnected>:
1001028a:	7843      	ldrb	r3, [r0, #1]
1001028c:	7802      	ldrb	r2, [r0, #0]
1001028e:	021b      	lsls	r3, r3, #8
10010290:	4313      	orrs	r3, r2
10010292:	800b      	strh	r3, [r1, #0]
10010294:	78c3      	ldrb	r3, [r0, #3]
10010296:	7882      	ldrb	r2, [r0, #2]
10010298:	021b      	lsls	r3, r3, #8
1001029a:	4313      	orrs	r3, r2
1001029c:	804b      	strh	r3, [r1, #2]
1001029e:	4770      	bx	lr

100102a0 <gapc_lecb_connect_req_ind>:
100102a0:	7843      	ldrb	r3, [r0, #1]
100102a2:	7802      	ldrb	r2, [r0, #0]
100102a4:	021b      	lsls	r3, r3, #8
100102a6:	4313      	orrs	r3, r2
100102a8:	800b      	strh	r3, [r1, #0]
100102aa:	78c3      	ldrb	r3, [r0, #3]
100102ac:	7882      	ldrb	r2, [r0, #2]
100102ae:	021b      	lsls	r3, r3, #8
100102b0:	4313      	orrs	r3, r2
100102b2:	804b      	strh	r3, [r1, #2]
100102b4:	7943      	ldrb	r3, [r0, #5]
100102b6:	7902      	ldrb	r2, [r0, #4]
100102b8:	021b      	lsls	r3, r3, #8
100102ba:	4313      	orrs	r3, r2
100102bc:	808b      	strh	r3, [r1, #4]
100102be:	79c3      	ldrb	r3, [r0, #7]
100102c0:	7982      	ldrb	r2, [r0, #6]
100102c2:	021b      	lsls	r3, r3, #8
100102c4:	4313      	orrs	r3, r2
100102c6:	80cb      	strh	r3, [r1, #6]
100102c8:	4770      	bx	lr

100102ca <gapc_lecb_add_credit_resp_handler>:
100102ca:	7843      	ldrb	r3, [r0, #1]
100102cc:	7802      	ldrb	r2, [r0, #0]
100102ce:	021b      	lsls	r3, r3, #8
100102d0:	4313      	orrs	r3, r2
100102d2:	800b      	strh	r3, [r1, #0]
100102d4:	78c3      	ldrb	r3, [r0, #3]
100102d6:	7882      	ldrb	r2, [r0, #2]
100102d8:	021b      	lsls	r3, r3, #8
100102da:	4313      	orrs	r3, r2
100102dc:	804b      	strh	r3, [r1, #2]
100102de:	7943      	ldrb	r3, [r0, #5]
100102e0:	7902      	ldrb	r2, [r0, #4]
100102e2:	021b      	lsls	r3, r3, #8
100102e4:	4313      	orrs	r3, r2
100102e6:	808b      	strh	r3, [r1, #4]
100102e8:	4770      	bx	lr
	...

100102ec <gapm_reset_req_handler>:
100102ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
100102ee:	466b      	mov	r3, sp
100102f0:	4915      	ldr	r1, [pc, #84]	; (10010348 <gapm_reset_req_handler+0x5c>)
100102f2:	4816      	ldr	r0, [pc, #88]	; (1001034c <gapm_reset_req_handler+0x60>)
100102f4:	880c      	ldrh	r4, [r1, #0]
100102f6:	8809      	ldrh	r1, [r1, #0]
100102f8:	1ddd      	adds	r5, r3, #7
100102fa:	0a09      	lsrs	r1, r1, #8
100102fc:	2300      	movs	r3, #0
100102fe:	2202      	movs	r2, #2
10010300:	7141      	strb	r1, [r0, #5]
10010302:	26d0      	movs	r6, #208	; 0xd0
10010304:	2101      	movs	r1, #1
10010306:	7104      	strb	r4, [r0, #4]
10010308:	4c11      	ldr	r4, [pc, #68]	; (10010350 <gapm_reset_req_handler+0x64>)
1001030a:	702b      	strb	r3, [r5, #0]
1001030c:	7002      	strb	r2, [r0, #0]
1001030e:	70c3      	strb	r3, [r0, #3]
10010310:	320b      	adds	r2, #11
10010312:	7201      	strb	r1, [r0, #8]
10010314:	7181      	strb	r1, [r0, #6]
10010316:	71c3      	strb	r3, [r0, #7]
10010318:	3108      	adds	r1, #8
1001031a:	4b0e      	ldr	r3, [pc, #56]	; (10010354 <gapm_reset_req_handler+0x68>)
1001031c:	0136      	lsls	r6, r6, #4
1001031e:	7042      	strb	r2, [r0, #1]
10010320:	7082      	strb	r2, [r0, #2]
10010322:	80a2      	strh	r2, [r4, #4]
10010324:	8026      	strh	r6, [r4, #0]
10010326:	4798      	blx	r3
10010328:	1c28      	adds	r0, r5, #0
1001032a:	4b0b      	ldr	r3, [pc, #44]	; (10010358 <gapm_reset_req_handler+0x6c>)
1001032c:	4798      	blx	r3
1001032e:	782b      	ldrb	r3, [r5, #0]
10010330:	20e2      	movs	r0, #226	; 0xe2
10010332:	2b00      	cmp	r3, #0
10010334:	d106      	bne.n	10010344 <gapm_reset_req_handler+0x58>
10010336:	68a3      	ldr	r3, [r4, #8]
10010338:	20e2      	movs	r0, #226	; 0xe2
1001033a:	781a      	ldrb	r2, [r3, #0]
1001033c:	785b      	ldrb	r3, [r3, #1]
1001033e:	2a01      	cmp	r2, #1
10010340:	d100      	bne.n	10010344 <gapm_reset_req_handler+0x58>
10010342:	1c18      	adds	r0, r3, #0
10010344:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010346:	46c0      	nop			; (mov r8, r8)
10010348:	10019d28 	.word	0x10019d28
1001034c:	1001a098 	.word	0x1001a098
10010350:	10019d1c 	.word	0x10019d1c
10010354:	1000f715 	.word	0x1000f715
10010358:	1000f779 	.word	0x1000f779

1001035c <gapm_set_dev_config_cmd_handler>:
1001035c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001035e:	b089      	sub	sp, #36	; 0x24
10010360:	9303      	str	r3, [sp, #12]
10010362:	ab0e      	add	r3, sp, #56	; 0x38
10010364:	781b      	ldrb	r3, [r3, #0]
10010366:	4c37      	ldr	r4, [pc, #220]	; (10010444 <gapm_set_dev_config_cmd_handler+0xe8>)
10010368:	9304      	str	r3, [sp, #16]
1001036a:	ab0f      	add	r3, sp, #60	; 0x3c
1001036c:	781b      	ldrb	r3, [r3, #0]
1001036e:	270d      	movs	r7, #13
10010370:	9305      	str	r3, [sp, #20]
10010372:	ab10      	add	r3, sp, #64	; 0x40
10010374:	881b      	ldrh	r3, [r3, #0]
10010376:	72a1      	strb	r1, [r4, #10]
10010378:	9300      	str	r3, [sp, #0]
1001037a:	ab11      	add	r3, sp, #68	; 0x44
1001037c:	881b      	ldrh	r3, [r3, #0]
1001037e:	0a09      	lsrs	r1, r1, #8
10010380:	9301      	str	r3, [sp, #4]
10010382:	ab12      	add	r3, sp, #72	; 0x48
10010384:	881b      	ldrh	r3, [r3, #0]
10010386:	7260      	strb	r0, [r4, #9]
10010388:	9302      	str	r3, [sp, #8]
1001038a:	ab06      	add	r3, sp, #24
1001038c:	1dde      	adds	r6, r3, #7
1001038e:	2300      	movs	r3, #0
10010390:	7033      	strb	r3, [r6, #0]
10010392:	2304      	movs	r3, #4
10010394:	7023      	strb	r3, [r4, #0]
10010396:	2300      	movs	r3, #0
10010398:	70e3      	strb	r3, [r4, #3]
1001039a:	4b2b      	ldr	r3, [pc, #172]	; (10010448 <gapm_set_dev_config_cmd_handler+0xec>)
1001039c:	72e1      	strb	r1, [r4, #11]
1001039e:	881d      	ldrh	r5, [r3, #0]
100103a0:	881b      	ldrh	r3, [r3, #0]
100103a2:	1c11      	adds	r1, r2, #0
100103a4:	0a1b      	lsrs	r3, r3, #8
100103a6:	7163      	strb	r3, [r4, #5]
100103a8:	2303      	movs	r3, #3
100103aa:	7125      	strb	r5, [r4, #4]
100103ac:	2206      	movs	r2, #6
100103ae:	4d27      	ldr	r5, [pc, #156]	; (1001044c <gapm_set_dev_config_cmd_handler+0xf0>)
100103b0:	4827      	ldr	r0, [pc, #156]	; (10010450 <gapm_set_dev_config_cmd_handler+0xf4>)
100103b2:	7223      	strb	r3, [r4, #8]
100103b4:	7067      	strb	r7, [r4, #1]
100103b6:	70a7      	strb	r7, [r4, #2]
100103b8:	47a8      	blx	r5
100103ba:	9903      	ldr	r1, [sp, #12]
100103bc:	2210      	movs	r2, #16
100103be:	4825      	ldr	r0, [pc, #148]	; (10010454 <gapm_set_dev_config_cmd_handler+0xf8>)
100103c0:	47a8      	blx	r5
100103c2:	466a      	mov	r2, sp
100103c4:	7c12      	ldrb	r2, [r2, #16]
100103c6:	1ce3      	adds	r3, r4, #3
100103c8:	77da      	strb	r2, [r3, #31]
100103ca:	466a      	mov	r2, sp
100103cc:	7d12      	ldrb	r2, [r2, #20]
100103ce:	1d23      	adds	r3, r4, #4
100103d0:	77da      	strb	r2, [r3, #31]
100103d2:	466a      	mov	r2, sp
100103d4:	7812      	ldrb	r2, [r2, #0]
100103d6:	1d63      	adds	r3, r4, #5
100103d8:	77da      	strb	r2, [r3, #31]
100103da:	9b00      	ldr	r3, [sp, #0]
100103dc:	1da2      	adds	r2, r4, #6
100103de:	0a1b      	lsrs	r3, r3, #8
100103e0:	77d3      	strb	r3, [r2, #31]
100103e2:	466a      	mov	r2, sp
100103e4:	7912      	ldrb	r2, [r2, #4]
100103e6:	1de3      	adds	r3, r4, #7
100103e8:	77da      	strb	r2, [r3, #31]
100103ea:	1c22      	adds	r2, r4, #0
100103ec:	9b01      	ldr	r3, [sp, #4]
100103ee:	3208      	adds	r2, #8
100103f0:	0a1b      	lsrs	r3, r3, #8
100103f2:	77d3      	strb	r3, [r2, #31]
100103f4:	466a      	mov	r2, sp
100103f6:	1c23      	adds	r3, r4, #0
100103f8:	7a12      	ldrb	r2, [r2, #8]
100103fa:	3328      	adds	r3, #40	; 0x28
100103fc:	701a      	strb	r2, [r3, #0]
100103fe:	1c22      	adds	r2, r4, #0
10010400:	9b02      	ldr	r3, [sp, #8]
10010402:	3229      	adds	r2, #41	; 0x29
10010404:	0a1b      	lsrs	r3, r3, #8
10010406:	7013      	strb	r3, [r2, #0]
10010408:	23d0      	movs	r3, #208	; 0xd0
1001040a:	4d13      	ldr	r5, [pc, #76]	; (10010458 <gapm_set_dev_config_cmd_handler+0xfc>)
1001040c:	011b      	lsls	r3, r3, #4
1001040e:	802b      	strh	r3, [r5, #0]
10010410:	2322      	movs	r3, #34	; 0x22
10010412:	71a3      	strb	r3, [r4, #6]
10010414:	2300      	movs	r3, #0
10010416:	212a      	movs	r1, #42	; 0x2a
10010418:	71e3      	strb	r3, [r4, #7]
1001041a:	1c20      	adds	r0, r4, #0
1001041c:	4b0f      	ldr	r3, [pc, #60]	; (1001045c <gapm_set_dev_config_cmd_handler+0x100>)
1001041e:	80af      	strh	r7, [r5, #4]
10010420:	4798      	blx	r3
10010422:	1c30      	adds	r0, r6, #0
10010424:	4b0e      	ldr	r3, [pc, #56]	; (10010460 <gapm_set_dev_config_cmd_handler+0x104>)
10010426:	4798      	blx	r3
10010428:	7833      	ldrb	r3, [r6, #0]
1001042a:	20e2      	movs	r0, #226	; 0xe2
1001042c:	2b00      	cmp	r3, #0
1001042e:	d106      	bne.n	1001043e <gapm_set_dev_config_cmd_handler+0xe2>
10010430:	68ab      	ldr	r3, [r5, #8]
10010432:	20e2      	movs	r0, #226	; 0xe2
10010434:	781a      	ldrb	r2, [r3, #0]
10010436:	785b      	ldrb	r3, [r3, #1]
10010438:	2a03      	cmp	r2, #3
1001043a:	d100      	bne.n	1001043e <gapm_set_dev_config_cmd_handler+0xe2>
1001043c:	1c18      	adds	r0, r3, #0
1001043e:	b009      	add	sp, #36	; 0x24
10010440:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010442:	46c0      	nop			; (mov r8, r8)
10010444:	1001a098 	.word	0x1001a098
10010448:	10019d28 	.word	0x10019d28
1001044c:	1001443b 	.word	0x1001443b
10010450:	1001a0a4 	.word	0x1001a0a4
10010454:	1001a0aa 	.word	0x1001a0aa
10010458:	10019d1c 	.word	0x10019d1c
1001045c:	1000f715 	.word	0x1000f715
10010460:	1000f779 	.word	0x1000f779

10010464 <gapm_get_dev_config_cmd_handler>:
10010464:	4684      	mov	ip, r0
10010466:	4663      	mov	r3, ip
10010468:	b5f0      	push	{r4, r5, r6, r7, lr}
1001046a:	b085      	sub	sp, #20
1001046c:	9100      	str	r1, [sp, #0]
1001046e:	20cf      	movs	r0, #207	; 0xcf
10010470:	2b01      	cmp	r3, #1
10010472:	d854      	bhi.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
10010474:	2900      	cmp	r1, #0
10010476:	d052      	beq.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
10010478:	2200      	movs	r2, #0
1001047a:	492a      	ldr	r1, [pc, #168]	; (10010524 <gapm_get_dev_config_cmd_handler+0xc0>)
1001047c:	ab02      	add	r3, sp, #8
1001047e:	880c      	ldrh	r4, [r1, #0]
10010480:	8809      	ldrh	r1, [r1, #0]
10010482:	1d9f      	adds	r7, r3, #6
10010484:	719a      	strb	r2, [r3, #6]
10010486:	4b28      	ldr	r3, [pc, #160]	; (10010528 <gapm_get_dev_config_cmd_handler+0xc4>)
10010488:	0a09      	lsrs	r1, r1, #8
1001048a:	250d      	movs	r5, #13
1001048c:	2606      	movs	r6, #6
1001048e:	7159      	strb	r1, [r3, #5]
10010490:	4661      	mov	r1, ip
10010492:	701e      	strb	r6, [r3, #0]
10010494:	705d      	strb	r5, [r3, #1]
10010496:	709d      	strb	r5, [r3, #2]
10010498:	70da      	strb	r2, [r3, #3]
1001049a:	711c      	strb	r4, [r3, #4]
1001049c:	2901      	cmp	r1, #1
1001049e:	d13e      	bne.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
100104a0:	21d0      	movs	r1, #208	; 0xd0
100104a2:	4c22      	ldr	r4, [pc, #136]	; (1001052c <gapm_get_dev_config_cmd_handler+0xc8>)
100104a4:	0109      	lsls	r1, r1, #4
100104a6:	8061      	strh	r1, [r4, #2]
100104a8:	4921      	ldr	r1, [pc, #132]	; (10010530 <gapm_get_dev_config_cmd_handler+0xcc>)
100104aa:	71da      	strb	r2, [r3, #7]
100104ac:	8021      	strh	r1, [r4, #0]
100104ae:	4661      	mov	r1, ip
100104b0:	721e      	strb	r6, [r3, #8]
100104b2:	7199      	strb	r1, [r3, #6]
100104b4:	1c18      	adds	r0, r3, #0
100104b6:	2109      	movs	r1, #9
100104b8:	4b1e      	ldr	r3, [pc, #120]	; (10010534 <gapm_get_dev_config_cmd_handler+0xd0>)
100104ba:	80a5      	strh	r5, [r4, #4]
100104bc:	4798      	blx	r3
100104be:	1c38      	adds	r0, r7, #0
100104c0:	4b1d      	ldr	r3, [pc, #116]	; (10010538 <gapm_get_dev_config_cmd_handler+0xd4>)
100104c2:	4798      	blx	r3
100104c4:	783b      	ldrb	r3, [r7, #0]
100104c6:	20e2      	movs	r0, #226	; 0xe2
100104c8:	9301      	str	r3, [sp, #4]
100104ca:	2b00      	cmp	r3, #0
100104cc:	d127      	bne.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
100104ce:	8821      	ldrh	r1, [r4, #0]
100104d0:	4a1a      	ldr	r2, [pc, #104]	; (1001053c <gapm_get_dev_config_cmd_handler+0xd8>)
100104d2:	68a7      	ldr	r7, [r4, #8]
100104d4:	3b01      	subs	r3, #1
100104d6:	4291      	cmp	r1, r2
100104d8:	d001      	beq.n	100104de <gapm_get_dev_config_cmd_handler+0x7a>
100104da:	8023      	strh	r3, [r4, #0]
100104dc:	e01a      	b.n	10010514 <gapm_get_dev_config_cmd_handler+0xb0>
100104de:	8063      	strh	r3, [r4, #2]
100104e0:	9b00      	ldr	r3, [sp, #0]
100104e2:	1c39      	adds	r1, r7, #0
100104e4:	1c58      	adds	r0, r3, #1
100104e6:	1c32      	adds	r2, r6, #0
100104e8:	4b15      	ldr	r3, [pc, #84]	; (10010540 <gapm_get_dev_config_cmd_handler+0xdc>)
100104ea:	4798      	blx	r3
100104ec:	79bb      	ldrb	r3, [r7, #6]
100104ee:	9a00      	ldr	r2, [sp, #0]
100104f0:	7013      	strb	r3, [r2, #0]
100104f2:	23d0      	movs	r3, #208	; 0xd0
100104f4:	011b      	lsls	r3, r3, #4
100104f6:	8023      	strh	r3, [r4, #0]
100104f8:	ab02      	add	r3, sp, #8
100104fa:	80a5      	strh	r5, [r4, #4]
100104fc:	1ddd      	adds	r5, r3, #7
100104fe:	466b      	mov	r3, sp
10010500:	791b      	ldrb	r3, [r3, #4]
10010502:	1c28      	adds	r0, r5, #0
10010504:	702b      	strb	r3, [r5, #0]
10010506:	4b0c      	ldr	r3, [pc, #48]	; (10010538 <gapm_get_dev_config_cmd_handler+0xd4>)
10010508:	4798      	blx	r3
1001050a:	782b      	ldrb	r3, [r5, #0]
1001050c:	20d0      	movs	r0, #208	; 0xd0
1001050e:	2b00      	cmp	r3, #0
10010510:	d105      	bne.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
10010512:	68a7      	ldr	r7, [r4, #8]
10010514:	783b      	ldrb	r3, [r7, #0]
10010516:	7878      	ldrb	r0, [r7, #1]
10010518:	2b06      	cmp	r3, #6
1001051a:	d000      	beq.n	1001051e <gapm_get_dev_config_cmd_handler+0xba>
1001051c:	20e2      	movs	r0, #226	; 0xe2
1001051e:	b005      	add	sp, #20
10010520:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010522:	46c0      	nop			; (mov r8, r8)
10010524:	10019d28 	.word	0x10019d28
10010528:	1001a098 	.word	0x1001a098
1001052c:	10019d1c 	.word	0x10019d1c
10010530:	00000d08 	.word	0x00000d08
10010534:	1000f715 	.word	0x1000f715
10010538:	1000f779 	.word	0x1000f779
1001053c:	0000ffff 	.word	0x0000ffff
10010540:	1001443b 	.word	0x1001443b

10010544 <gapm_cancel_cmd_handler>:
10010544:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010546:	4916      	ldr	r1, [pc, #88]	; (100105a0 <gapm_cancel_cmd_handler+0x5c>)
10010548:	4816      	ldr	r0, [pc, #88]	; (100105a4 <gapm_cancel_cmd_handler+0x60>)
1001054a:	880c      	ldrh	r4, [r1, #0]
1001054c:	8809      	ldrh	r1, [r1, #0]
1001054e:	466b      	mov	r3, sp
10010550:	0a09      	lsrs	r1, r1, #8
10010552:	7141      	strb	r1, [r0, #5]
10010554:	2102      	movs	r1, #2
10010556:	2203      	movs	r2, #3
10010558:	7201      	strb	r1, [r0, #8]
1001055a:	21d0      	movs	r1, #208	; 0xd0
1001055c:	1ddd      	adds	r5, r3, #7
1001055e:	2300      	movs	r3, #0
10010560:	7104      	strb	r4, [r0, #4]
10010562:	4c11      	ldr	r4, [pc, #68]	; (100105a8 <gapm_cancel_cmd_handler+0x64>)
10010564:	7002      	strb	r2, [r0, #0]
10010566:	0109      	lsls	r1, r1, #4
10010568:	320a      	adds	r2, #10
1001056a:	702b      	strb	r3, [r5, #0]
1001056c:	7042      	strb	r2, [r0, #1]
1001056e:	7082      	strb	r2, [r0, #2]
10010570:	70c3      	strb	r3, [r0, #3]
10010572:	8021      	strh	r1, [r4, #0]
10010574:	80a2      	strh	r2, [r4, #4]
10010576:	71c3      	strb	r3, [r0, #7]
10010578:	3a0c      	subs	r2, #12
1001057a:	2109      	movs	r1, #9
1001057c:	4b0b      	ldr	r3, [pc, #44]	; (100105ac <gapm_cancel_cmd_handler+0x68>)
1001057e:	7182      	strb	r2, [r0, #6]
10010580:	4798      	blx	r3
10010582:	1c28      	adds	r0, r5, #0
10010584:	4b0a      	ldr	r3, [pc, #40]	; (100105b0 <gapm_cancel_cmd_handler+0x6c>)
10010586:	4798      	blx	r3
10010588:	7828      	ldrb	r0, [r5, #0]
1001058a:	2800      	cmp	r0, #0
1001058c:	d001      	beq.n	10010592 <gapm_cancel_cmd_handler+0x4e>
1001058e:	20e2      	movs	r0, #226	; 0xe2
10010590:	e004      	b.n	1001059c <gapm_cancel_cmd_handler+0x58>
10010592:	68a3      	ldr	r3, [r4, #8]
10010594:	785b      	ldrb	r3, [r3, #1]
10010596:	2b44      	cmp	r3, #68	; 0x44
10010598:	d000      	beq.n	1001059c <gapm_cancel_cmd_handler+0x58>
1001059a:	1c18      	adds	r0, r3, #0
1001059c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001059e:	46c0      	nop			; (mov r8, r8)
100105a0:	10019d28 	.word	0x10019d28
100105a4:	1001a098 	.word	0x1001a098
100105a8:	10019d1c 	.word	0x10019d1c
100105ac:	1000f715 	.word	0x1000f715
100105b0:	1000f779 	.word	0x1000f779

100105b4 <gapm_dev_bdaddr_ind_handler>:
100105b4:	b538      	push	{r3, r4, r5, lr}
100105b6:	1c05      	adds	r5, r0, #0
100105b8:	1c0c      	adds	r4, r1, #0
100105ba:	1c48      	adds	r0, r1, #1
100105bc:	2206      	movs	r2, #6
100105be:	1c29      	adds	r1, r5, #0
100105c0:	4b02      	ldr	r3, [pc, #8]	; (100105cc <gapm_dev_bdaddr_ind_handler+0x18>)
100105c2:	4798      	blx	r3
100105c4:	79ab      	ldrb	r3, [r5, #6]
100105c6:	2000      	movs	r0, #0
100105c8:	7023      	strb	r3, [r4, #0]
100105ca:	bd38      	pop	{r3, r4, r5, pc}
100105cc:	1001443b 	.word	0x1001443b

100105d0 <gapm_cmp_evt>:
100105d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100105d2:	7803      	ldrb	r3, [r0, #0]
100105d4:	7845      	ldrb	r5, [r0, #1]
100105d6:	3b0c      	subs	r3, #12
100105d8:	1e18      	subs	r0, r3, #0
100105da:	280b      	cmp	r0, #11
100105dc:	d900      	bls.n	100105e0 <gapm_cmp_evt+0x10>
100105de:	e08d      	b.n	100106fc <gapm_cmp_evt+0x12c>
100105e0:	1c0c      	adds	r4, r1, #0
100105e2:	f001 f969 	bl	100118b8 <__gnu_thumb1_case_uqi>
100105e6:	1952      	.short	0x1952
100105e8:	068b1919 	.word	0x068b1919
100105ec:	8b595906 	.word	0x8b595906
100105f0:	0d8b      	.short	0x0d8b
100105f2:	2300      	movs	r3, #0
100105f4:	2d45      	cmp	r5, #69	; 0x45
100105f6:	d000      	beq.n	100105fa <gapm_cmp_evt+0x2a>
100105f8:	1c2b      	adds	r3, r5, #0
100105fa:	7023      	strb	r3, [r4, #0]
100105fc:	2002      	movs	r0, #2
100105fe:	e07e      	b.n	100106fe <gapm_cmp_evt+0x12e>
10010600:	203b      	movs	r0, #59	; 0x3b
10010602:	2d00      	cmp	r5, #0
10010604:	d100      	bne.n	10010608 <gapm_cmp_evt+0x38>
10010606:	e07a      	b.n	100106fe <gapm_cmp_evt+0x12e>
10010608:	700d      	strb	r5, [r1, #0]
1001060a:	1c48      	adds	r0, r1, #1
1001060c:	2210      	movs	r2, #16
1001060e:	2100      	movs	r1, #0
10010610:	4b3b      	ldr	r3, [pc, #236]	; (10010700 <gapm_cmp_evt+0x130>)
10010612:	4798      	blx	r3
10010614:	200f      	movs	r0, #15
10010616:	e072      	b.n	100106fe <gapm_cmp_evt+0x12e>
10010618:	2d00      	cmp	r5, #0
1001061a:	d134      	bne.n	10010686 <gapm_cmp_evt+0xb6>
1001061c:	4b39      	ldr	r3, [pc, #228]	; (10010704 <gapm_cmp_evt+0x134>)
1001061e:	4798      	blx	r3
10010620:	1e43      	subs	r3, r0, #1
10010622:	b2db      	uxtb	r3, r3
10010624:	1c28      	adds	r0, r5, #0
10010626:	2b06      	cmp	r3, #6
10010628:	d869      	bhi.n	100106fe <gapm_cmp_evt+0x12e>
1001062a:	466b      	mov	r3, sp
1001062c:	4e36      	ldr	r6, [pc, #216]	; (10010708 <gapm_cmp_evt+0x138>)
1001062e:	1dd9      	adds	r1, r3, #7
10010630:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010632:	4b36      	ldr	r3, [pc, #216]	; (1001070c <gapm_cmp_evt+0x13c>)
10010634:	4798      	blx	r3
10010636:	2312      	movs	r3, #18
10010638:	4358      	muls	r0, r3
1001063a:	4935      	ldr	r1, [pc, #212]	; (10010710 <gapm_cmp_evt+0x140>)
1001063c:	1809      	adds	r1, r1, r0
1001063e:	1c0b      	adds	r3, r1, #0
10010640:	894a      	ldrh	r2, [r1, #10]
10010642:	3308      	adds	r3, #8
10010644:	8122      	strh	r2, [r4, #8]
10010646:	784f      	ldrb	r7, [r1, #1]
10010648:	72a5      	strb	r5, [r4, #10]
1001064a:	7027      	strb	r7, [r4, #0]
1001064c:	898a      	ldrh	r2, [r1, #12]
1001064e:	1c60      	adds	r0, r4, #1
10010650:	81a2      	strh	r2, [r4, #12]
10010652:	88db      	ldrh	r3, [r3, #6]
10010654:	3102      	adds	r1, #2
10010656:	81e3      	strh	r3, [r4, #14]
10010658:	89cb      	ldrh	r3, [r1, #14]
1001065a:	2206      	movs	r2, #6
1001065c:	8223      	strh	r3, [r4, #16]
1001065e:	4b2d      	ldr	r3, [pc, #180]	; (10010714 <gapm_cmp_evt+0x144>)
10010660:	4798      	blx	r3
10010662:	2f00      	cmp	r7, #0
10010664:	d00a      	beq.n	1001067c <gapm_cmp_evt+0xac>
10010666:	79a3      	ldrb	r3, [r4, #6]
10010668:	223f      	movs	r2, #63	; 0x3f
1001066a:	1c19      	adds	r1, r3, #0
1001066c:	3501      	adds	r5, #1
1001066e:	4391      	bics	r1, r2
10010670:	29c0      	cmp	r1, #192	; 0xc0
10010672:	d003      	beq.n	1001067c <gapm_cmp_evt+0xac>
10010674:	065b      	lsls	r3, r3, #25
10010676:	0fdb      	lsrs	r3, r3, #31
10010678:	3502      	adds	r5, #2
1001067a:	1aed      	subs	r5, r5, r3
1001067c:	2301      	movs	r3, #1
1001067e:	425b      	negs	r3, r3
10010680:	7025      	strb	r5, [r4, #0]
10010682:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010684:	e038      	b.n	100106f8 <gapm_cmp_evt+0x128>
10010686:	700d      	strb	r5, [r1, #0]
10010688:	e004      	b.n	10010694 <gapm_cmp_evt+0xc4>
1001068a:	2300      	movs	r3, #0
1001068c:	2d45      	cmp	r5, #69	; 0x45
1001068e:	d000      	beq.n	10010692 <gapm_cmp_evt+0xc2>
10010690:	1c2b      	adds	r3, r5, #0
10010692:	7023      	strb	r3, [r4, #0]
10010694:	2003      	movs	r0, #3
10010696:	e032      	b.n	100106fe <gapm_cmp_evt+0x12e>
10010698:	4e1b      	ldr	r6, [pc, #108]	; (10010708 <gapm_cmp_evt+0x138>)
1001069a:	2100      	movs	r1, #0
1001069c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001069e:	4b1b      	ldr	r3, [pc, #108]	; (1001070c <gapm_cmp_evt+0x13c>)
100106a0:	4798      	blx	r3
100106a2:	2807      	cmp	r0, #7
100106a4:	d818      	bhi.n	100106d8 <gapm_cmp_evt+0x108>
100106a6:	2301      	movs	r3, #1
100106a8:	425b      	negs	r3, r3
100106aa:	85b3      	strh	r3, [r6, #44]	; 0x2c
100106ac:	3313      	adds	r3, #19
100106ae:	4358      	muls	r0, r3
100106b0:	4917      	ldr	r1, [pc, #92]	; (10010710 <gapm_cmp_evt+0x140>)
100106b2:	1809      	adds	r1, r1, r0
100106b4:	1c0b      	adds	r3, r1, #0
100106b6:	894a      	ldrh	r2, [r1, #10]
100106b8:	3308      	adds	r3, #8
100106ba:	8122      	strh	r2, [r4, #8]
100106bc:	784a      	ldrb	r2, [r1, #1]
100106be:	72a5      	strb	r5, [r4, #10]
100106c0:	7022      	strb	r2, [r4, #0]
100106c2:	898a      	ldrh	r2, [r1, #12]
100106c4:	1c60      	adds	r0, r4, #1
100106c6:	81a2      	strh	r2, [r4, #12]
100106c8:	88db      	ldrh	r3, [r3, #6]
100106ca:	3102      	adds	r1, #2
100106cc:	81e3      	strh	r3, [r4, #14]
100106ce:	89cb      	ldrh	r3, [r1, #14]
100106d0:	2206      	movs	r2, #6
100106d2:	8223      	strh	r3, [r4, #16]
100106d4:	4b0f      	ldr	r3, [pc, #60]	; (10010714 <gapm_cmp_evt+0x144>)
100106d6:	4798      	blx	r3
100106d8:	2200      	movs	r2, #0
100106da:	7823      	ldrb	r3, [r4, #0]
100106dc:	4293      	cmp	r3, r2
100106de:	d00a      	beq.n	100106f6 <gapm_cmp_evt+0x126>
100106e0:	79a3      	ldrb	r3, [r4, #6]
100106e2:	323f      	adds	r2, #63	; 0x3f
100106e4:	1c19      	adds	r1, r3, #0
100106e6:	4391      	bics	r1, r2
100106e8:	3a3e      	subs	r2, #62	; 0x3e
100106ea:	29c0      	cmp	r1, #192	; 0xc0
100106ec:	d003      	beq.n	100106f6 <gapm_cmp_evt+0x126>
100106ee:	065b      	lsls	r3, r3, #25
100106f0:	0fdb      	lsrs	r3, r3, #31
100106f2:	3202      	adds	r2, #2
100106f4:	1ad2      	subs	r2, r2, r3
100106f6:	7022      	strb	r2, [r4, #0]
100106f8:	2005      	movs	r0, #5
100106fa:	e000      	b.n	100106fe <gapm_cmp_evt+0x12e>
100106fc:	2000      	movs	r0, #0
100106fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010700:	10014477 	.word	0x10014477
10010704:	1000f921 	.word	0x1000f921
10010708:	10019dba 	.word	0x10019dba
1001070c:	1000f8e5 	.word	0x1000f8e5
10010710:	10019d2a 	.word	0x10019d2a
10010714:	1001443b 	.word	0x1001443b

10010718 <gapm_adv_report_evt_handler>:
10010718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001071a:	7843      	ldrb	r3, [r0, #1]
1001071c:	1c05      	adds	r5, r0, #0
1001071e:	9301      	str	r3, [sp, #4]
10010720:	466b      	mov	r3, sp
10010722:	1c0c      	adds	r4, r1, #0
10010724:	791b      	ldrb	r3, [r3, #4]
10010726:	7806      	ldrb	r6, [r0, #0]
10010728:	2206      	movs	r2, #6
1001072a:	704b      	strb	r3, [r1, #1]
1001072c:	1c88      	adds	r0, r1, #2
1001072e:	4f1b      	ldr	r7, [pc, #108]	; (1001079c <gapm_adv_report_evt_handler+0x84>)
10010730:	1ca9      	adds	r1, r5, #2
10010732:	47b8      	blx	r7
10010734:	1c20      	adds	r0, r4, #0
10010736:	1c29      	adds	r1, r5, #0
10010738:	7a2a      	ldrb	r2, [r5, #8]
1001073a:	3008      	adds	r0, #8
1001073c:	77c2      	strb	r2, [r0, #31]
1001073e:	3109      	adds	r1, #9
10010740:	3528      	adds	r5, #40	; 0x28
10010742:	47b8      	blx	r7
10010744:	782b      	ldrb	r3, [r5, #0]
10010746:	b25a      	sxtb	r2, r3
10010748:	2a00      	cmp	r2, #0
1001074a:	da01      	bge.n	10010750 <gapm_adv_report_evt_handler+0x38>
1001074c:	3301      	adds	r3, #1
1001074e:	b2db      	uxtb	r3, r3
10010750:	1c22      	adds	r2, r4, #0
10010752:	3228      	adds	r2, #40	; 0x28
10010754:	7013      	strb	r3, [r2, #0]
10010756:	2200      	movs	r2, #0
10010758:	9b01      	ldr	r3, [sp, #4]
1001075a:	4293      	cmp	r3, r2
1001075c:	d00a      	beq.n	10010774 <gapm_adv_report_evt_handler+0x5c>
1001075e:	79e3      	ldrb	r3, [r4, #7]
10010760:	323f      	adds	r2, #63	; 0x3f
10010762:	1c19      	adds	r1, r3, #0
10010764:	4391      	bics	r1, r2
10010766:	3a3e      	subs	r2, #62	; 0x3e
10010768:	29c0      	cmp	r1, #192	; 0xc0
1001076a:	d003      	beq.n	10010774 <gapm_adv_report_evt_handler+0x5c>
1001076c:	065b      	lsls	r3, r3, #25
1001076e:	0fdb      	lsrs	r3, r3, #31
10010770:	3202      	adds	r2, #2
10010772:	1ad2      	subs	r2, r2, r3
10010774:	7062      	strb	r2, [r4, #1]
10010776:	2e04      	cmp	r6, #4
10010778:	d80f      	bhi.n	1001079a <gapm_adv_report_evt_handler+0x82>
1001077a:	1c30      	adds	r0, r6, #0
1001077c:	f001 f89c 	bl	100118b8 <__gnu_thumb1_case_uqi>
10010780:	09070503 	.word	0x09070503
10010784:	0b          	.byte	0x0b
10010785:	00          	.byte	0x00
10010786:	2300      	movs	r3, #0
10010788:	e006      	b.n	10010798 <gapm_adv_report_evt_handler+0x80>
1001078a:	2301      	movs	r3, #1
1001078c:	e004      	b.n	10010798 <gapm_adv_report_evt_handler+0x80>
1001078e:	2302      	movs	r3, #2
10010790:	e002      	b.n	10010798 <gapm_adv_report_evt_handler+0x80>
10010792:	2303      	movs	r3, #3
10010794:	e000      	b.n	10010798 <gapm_adv_report_evt_handler+0x80>
10010796:	2305      	movs	r3, #5
10010798:	7023      	strb	r3, [r4, #0]
1001079a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001079c:	1001443b 	.word	0x1001443b

100107a0 <gapm_resolv_addr_cmd_handler>:
100107a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100107a2:	2314      	movs	r3, #20
100107a4:	4c12      	ldr	r4, [pc, #72]	; (100107f0 <gapm_resolv_addr_cmd_handler+0x50>)
100107a6:	1c17      	adds	r7, r2, #0
100107a8:	7023      	strb	r3, [r4, #0]
100107aa:	3b07      	subs	r3, #7
100107ac:	7063      	strb	r3, [r4, #1]
100107ae:	70a3      	strb	r3, [r4, #2]
100107b0:	2300      	movs	r3, #0
100107b2:	70e3      	strb	r3, [r4, #3]
100107b4:	4b0f      	ldr	r3, [pc, #60]	; (100107f4 <gapm_resolv_addr_cmd_handler+0x54>)
100107b6:	1c05      	adds	r5, r0, #0
100107b8:	881a      	ldrh	r2, [r3, #0]
100107ba:	881b      	ldrh	r3, [r3, #0]
100107bc:	4e0e      	ldr	r6, [pc, #56]	; (100107f8 <gapm_resolv_addr_cmd_handler+0x58>)
100107be:	0a1b      	lsrs	r3, r3, #8
100107c0:	7163      	strb	r3, [r4, #5]
100107c2:	2317      	movs	r3, #23
100107c4:	012d      	lsls	r5, r5, #4
100107c6:	7122      	strb	r2, [r4, #4]
100107c8:	7260      	strb	r0, [r4, #9]
100107ca:	2206      	movs	r2, #6
100107cc:	480b      	ldr	r0, [pc, #44]	; (100107fc <gapm_resolv_addr_cmd_handler+0x5c>)
100107ce:	7223      	strb	r3, [r4, #8]
100107d0:	47b0      	blx	r6
100107d2:	1c39      	adds	r1, r7, #0
100107d4:	1c2a      	adds	r2, r5, #0
100107d6:	480a      	ldr	r0, [pc, #40]	; (10010800 <gapm_resolv_addr_cmd_handler+0x60>)
100107d8:	47b0      	blx	r6
100107da:	1c29      	adds	r1, r5, #0
100107dc:	3110      	adds	r1, #16
100107de:	1c0b      	adds	r3, r1, #0
100107e0:	3b08      	subs	r3, #8
100107e2:	71a3      	strb	r3, [r4, #6]
100107e4:	121b      	asrs	r3, r3, #8
100107e6:	71e3      	strb	r3, [r4, #7]
100107e8:	1c20      	adds	r0, r4, #0
100107ea:	4b06      	ldr	r3, [pc, #24]	; (10010804 <gapm_resolv_addr_cmd_handler+0x64>)
100107ec:	4798      	blx	r3
100107ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100107f0:	1001a098 	.word	0x1001a098
100107f4:	10019d28 	.word	0x10019d28
100107f8:	1001443b 	.word	0x1001443b
100107fc:	1001a0a2 	.word	0x1001a0a2
10010800:	1001a0a8 	.word	0x1001a0a8
10010804:	1000f715 	.word	0x1000f715

10010808 <gapm_addr_solved_ind_handler>:
10010808:	b570      	push	{r4, r5, r6, lr}
1001080a:	1c04      	adds	r4, r0, #0
1001080c:	1c08      	adds	r0, r1, #0
1001080e:	1c0d      	adds	r5, r1, #0
10010810:	4e05      	ldr	r6, [pc, #20]	; (10010828 <gapm_addr_solved_ind_handler+0x20>)
10010812:	1c21      	adds	r1, r4, #0
10010814:	2206      	movs	r2, #6
10010816:	3011      	adds	r0, #17
10010818:	47b0      	blx	r6
1001081a:	1c68      	adds	r0, r5, #1
1001081c:	1da1      	adds	r1, r4, #6
1001081e:	2210      	movs	r2, #16
10010820:	47b0      	blx	r6
10010822:	2300      	movs	r3, #0
10010824:	702b      	strb	r3, [r5, #0]
10010826:	bd70      	pop	{r4, r5, r6, pc}
10010828:	1001443b 	.word	0x1001443b

1001082c <gapm_profile_added_ind_handler>:
1001082c:	b510      	push	{r4, lr}
1001082e:	7843      	ldrb	r3, [r0, #1]
10010830:	7902      	ldrb	r2, [r0, #4]
10010832:	7944      	ldrb	r4, [r0, #5]
10010834:	7800      	ldrb	r0, [r0, #0]
10010836:	021b      	lsls	r3, r3, #8
10010838:	4303      	orrs	r3, r0
1001083a:	2b1b      	cmp	r3, #27
1001083c:	d104      	bne.n	10010848 <gapm_profile_added_ind_handler+0x1c>
1001083e:	2300      	movs	r3, #0
10010840:	700b      	strb	r3, [r1, #0]
10010842:	0223      	lsls	r3, r4, #8
10010844:	4313      	orrs	r3, r2
10010846:	804b      	strh	r3, [r1, #2]
10010848:	203b      	movs	r0, #59	; 0x3b
1001084a:	bd10      	pop	{r4, pc}

1001084c <gattc_read_req_ind_parser>:
1001084c:	7843      	ldrb	r3, [r0, #1]
1001084e:	7802      	ldrb	r2, [r0, #0]
10010850:	021b      	lsls	r3, r3, #8
10010852:	4313      	orrs	r3, r2
10010854:	804b      	strh	r3, [r1, #2]
10010856:	4770      	bx	lr

10010858 <gattc_write_req_ind_parser>:
10010858:	b508      	push	{r3, lr}
1001085a:	1c13      	adds	r3, r2, #0
1001085c:	0a00      	lsrs	r0, r0, #8
1001085e:	8010      	strh	r0, [r2, #0]
10010860:	784a      	ldrb	r2, [r1, #1]
10010862:	7808      	ldrb	r0, [r1, #0]
10010864:	0212      	lsls	r2, r2, #8
10010866:	4302      	orrs	r2, r0
10010868:	805a      	strh	r2, [r3, #2]
1001086a:	78ca      	ldrb	r2, [r1, #3]
1001086c:	7888      	ldrb	r0, [r1, #2]
1001086e:	0212      	lsls	r2, r2, #8
10010870:	4302      	orrs	r2, r0
10010872:	809a      	strh	r2, [r3, #4]
10010874:	794a      	ldrb	r2, [r1, #5]
10010876:	7908      	ldrb	r0, [r1, #4]
10010878:	0212      	lsls	r2, r2, #8
1001087a:	4302      	orrs	r2, r0
1001087c:	80da      	strh	r2, [r3, #6]
1001087e:	3308      	adds	r3, #8
10010880:	1c18      	adds	r0, r3, #0
10010882:	3106      	adds	r1, #6
10010884:	4b01      	ldr	r3, [pc, #4]	; (1001088c <gattc_write_req_ind_parser+0x34>)
10010886:	4798      	blx	r3
10010888:	bd08      	pop	{r3, pc}
1001088a:	46c0      	nop			; (mov r8, r8)
1001088c:	1001443b 	.word	0x1001443b

10010890 <gattc_att_info_req_parser>:
10010890:	7843      	ldrb	r3, [r0, #1]
10010892:	7802      	ldrb	r2, [r0, #0]
10010894:	021b      	lsls	r3, r3, #8
10010896:	4313      	orrs	r3, r2
10010898:	800b      	strh	r3, [r1, #0]
1001089a:	4770      	bx	lr

1001089c <gattc_read_cfm>:
1001089c:	b538      	push	{r3, r4, r5, lr}
1001089e:	2514      	movs	r5, #20
100108a0:	1c1c      	adds	r4, r3, #0
100108a2:	4b14      	ldr	r3, [pc, #80]	; (100108f4 <gattc_read_cfm+0x58>)
100108a4:	70d9      	strb	r1, [r3, #3]
100108a6:	4914      	ldr	r1, [pc, #80]	; (100108f8 <gattc_read_cfm+0x5c>)
100108a8:	701d      	strb	r5, [r3, #0]
100108aa:	3d08      	subs	r5, #8
100108ac:	705d      	strb	r5, [r3, #1]
100108ae:	709d      	strb	r5, [r3, #2]
100108b0:	880d      	ldrh	r5, [r1, #0]
100108b2:	8809      	ldrh	r1, [r1, #0]
100108b4:	7218      	strb	r0, [r3, #8]
100108b6:	0a09      	lsrs	r1, r1, #8
100108b8:	7159      	strb	r1, [r3, #5]
100108ba:	0a00      	lsrs	r0, r0, #8
100108bc:	0a21      	lsrs	r1, r4, #8
100108be:	711d      	strb	r5, [r3, #4]
100108c0:	7258      	strb	r0, [r3, #9]
100108c2:	729c      	strb	r4, [r3, #10]
100108c4:	72d9      	strb	r1, [r3, #11]
100108c6:	731a      	strb	r2, [r3, #12]
100108c8:	1c1d      	adds	r5, r3, #0
100108ca:	2c00      	cmp	r4, #0
100108cc:	d007      	beq.n	100108de <gattc_read_cfm+0x42>
100108ce:	9904      	ldr	r1, [sp, #16]
100108d0:	1c22      	adds	r2, r4, #0
100108d2:	480a      	ldr	r0, [pc, #40]	; (100108fc <gattc_read_cfm+0x60>)
100108d4:	4b0a      	ldr	r3, [pc, #40]	; (10010900 <gattc_read_cfm+0x64>)
100108d6:	340d      	adds	r4, #13
100108d8:	4798      	blx	r3
100108da:	b2a1      	uxth	r1, r4
100108dc:	e001      	b.n	100108e2 <gattc_read_cfm+0x46>
100108de:	210e      	movs	r1, #14
100108e0:	735c      	strb	r4, [r3, #13]
100108e2:	1c0b      	adds	r3, r1, #0
100108e4:	3b08      	subs	r3, #8
100108e6:	71ab      	strb	r3, [r5, #6]
100108e8:	121b      	asrs	r3, r3, #8
100108ea:	71eb      	strb	r3, [r5, #7]
100108ec:	1c28      	adds	r0, r5, #0
100108ee:	4b05      	ldr	r3, [pc, #20]	; (10010904 <gattc_read_cfm+0x68>)
100108f0:	4798      	blx	r3
100108f2:	bd38      	pop	{r3, r4, r5, pc}
100108f4:	1001a098 	.word	0x1001a098
100108f8:	10019d28 	.word	0x10019d28
100108fc:	1001a0a5 	.word	0x1001a0a5
10010900:	1001443b 	.word	0x1001443b
10010904:	1000f715 	.word	0x1000f715

10010908 <gattc_write_cfm>:
10010908:	4b0d      	ldr	r3, [pc, #52]	; (10010940 <gattc_write_cfm+0x38>)
1001090a:	b510      	push	{r4, lr}
1001090c:	729a      	strb	r2, [r3, #10]
1001090e:	2203      	movs	r2, #3
10010910:	2416      	movs	r4, #22
10010912:	719a      	strb	r2, [r3, #6]
10010914:	2200      	movs	r2, #0
10010916:	70d9      	strb	r1, [r3, #3]
10010918:	490a      	ldr	r1, [pc, #40]	; (10010944 <gattc_write_cfm+0x3c>)
1001091a:	701c      	strb	r4, [r3, #0]
1001091c:	3c0a      	subs	r4, #10
1001091e:	705c      	strb	r4, [r3, #1]
10010920:	709c      	strb	r4, [r3, #2]
10010922:	880c      	ldrh	r4, [r1, #0]
10010924:	8809      	ldrh	r1, [r1, #0]
10010926:	7218      	strb	r0, [r3, #8]
10010928:	0a09      	lsrs	r1, r1, #8
1001092a:	0a00      	lsrs	r0, r0, #8
1001092c:	711c      	strb	r4, [r3, #4]
1001092e:	7159      	strb	r1, [r3, #5]
10010930:	7258      	strb	r0, [r3, #9]
10010932:	71da      	strb	r2, [r3, #7]
10010934:	1c18      	adds	r0, r3, #0
10010936:	210b      	movs	r1, #11
10010938:	4b03      	ldr	r3, [pc, #12]	; (10010948 <gattc_write_cfm+0x40>)
1001093a:	4798      	blx	r3
1001093c:	bd10      	pop	{r4, pc}
1001093e:	46c0      	nop			; (mov r8, r8)
10010940:	1001a098 	.word	0x1001a098
10010944:	10019d28 	.word	0x10019d28
10010948:	1000f715 	.word	0x1000f715

1001094c <gattc_att_info_cfm>:
1001094c:	b538      	push	{r3, r4, r5, lr}
1001094e:	4c0e      	ldr	r4, [pc, #56]	; (10010988 <gattc_att_info_cfm+0x3c>)
10010950:	2518      	movs	r5, #24
10010952:	7323      	strb	r3, [r4, #12]
10010954:	2305      	movs	r3, #5
10010956:	71a3      	strb	r3, [r4, #6]
10010958:	2300      	movs	r3, #0
1001095a:	70e1      	strb	r1, [r4, #3]
1001095c:	490b      	ldr	r1, [pc, #44]	; (1001098c <gattc_att_info_cfm+0x40>)
1001095e:	7025      	strb	r5, [r4, #0]
10010960:	3d0c      	subs	r5, #12
10010962:	7065      	strb	r5, [r4, #1]
10010964:	70a5      	strb	r5, [r4, #2]
10010966:	880d      	ldrh	r5, [r1, #0]
10010968:	8809      	ldrh	r1, [r1, #0]
1001096a:	7220      	strb	r0, [r4, #8]
1001096c:	0a09      	lsrs	r1, r1, #8
1001096e:	0a00      	lsrs	r0, r0, #8
10010970:	7161      	strb	r1, [r4, #5]
10010972:	7260      	strb	r0, [r4, #9]
10010974:	72a2      	strb	r2, [r4, #10]
10010976:	71e3      	strb	r3, [r4, #7]
10010978:	0a12      	lsrs	r2, r2, #8
1001097a:	1c20      	adds	r0, r4, #0
1001097c:	210d      	movs	r1, #13
1001097e:	4b04      	ldr	r3, [pc, #16]	; (10010990 <gattc_att_info_cfm+0x44>)
10010980:	7125      	strb	r5, [r4, #4]
10010982:	72e2      	strb	r2, [r4, #11]
10010984:	4798      	blx	r3
10010986:	bd38      	pop	{r3, r4, r5, pc}
10010988:	1001a098 	.word	0x1001a098
1001098c:	10019d28 	.word	0x10019d28
10010990:	1000f715 	.word	0x1000f715

10010994 <gattc_event_cfm_handler>:
10010994:	220e      	movs	r2, #14
10010996:	b508      	push	{r3, lr}
10010998:	4b0b      	ldr	r3, [pc, #44]	; (100109c8 <gattc_event_cfm_handler+0x34>)
1001099a:	701a      	strb	r2, [r3, #0]
1001099c:	3a02      	subs	r2, #2
1001099e:	705a      	strb	r2, [r3, #1]
100109a0:	709a      	strb	r2, [r3, #2]
100109a2:	4a0a      	ldr	r2, [pc, #40]	; (100109cc <gattc_event_cfm_handler+0x38>)
100109a4:	70d8      	strb	r0, [r3, #3]
100109a6:	8810      	ldrh	r0, [r2, #0]
100109a8:	8812      	ldrh	r2, [r2, #0]
100109aa:	7219      	strb	r1, [r3, #8]
100109ac:	0a12      	lsrs	r2, r2, #8
100109ae:	715a      	strb	r2, [r3, #5]
100109b0:	2202      	movs	r2, #2
100109b2:	719a      	strb	r2, [r3, #6]
100109b4:	2200      	movs	r2, #0
100109b6:	0a09      	lsrs	r1, r1, #8
100109b8:	7118      	strb	r0, [r3, #4]
100109ba:	7259      	strb	r1, [r3, #9]
100109bc:	71da      	strb	r2, [r3, #7]
100109be:	1c18      	adds	r0, r3, #0
100109c0:	210a      	movs	r1, #10
100109c2:	4b03      	ldr	r3, [pc, #12]	; (100109d0 <gattc_event_cfm_handler+0x3c>)
100109c4:	4798      	blx	r3
100109c6:	bd08      	pop	{r3, pc}
100109c8:	1001a098 	.word	0x1001a098
100109cc:	10019d28 	.word	0x10019d28
100109d0:	1000f715 	.word	0x1000f715

100109d4 <gattc_disc_svc_ind_parser>:
100109d4:	b570      	push	{r4, r5, r6, lr}
100109d6:	1c15      	adds	r5, r2, #0
100109d8:	0a00      	lsrs	r0, r0, #8
100109da:	8010      	strh	r0, [r2, #0]
100109dc:	784b      	ldrb	r3, [r1, #1]
100109de:	780a      	ldrb	r2, [r1, #0]
100109e0:	021b      	lsls	r3, r3, #8
100109e2:	4313      	orrs	r3, r2
100109e4:	806b      	strh	r3, [r5, #2]
100109e6:	78cb      	ldrb	r3, [r1, #3]
100109e8:	788a      	ldrb	r2, [r1, #2]
100109ea:	021b      	lsls	r3, r3, #8
100109ec:	4313      	orrs	r3, r2
100109ee:	80ab      	strh	r3, [r5, #4]
100109f0:	790e      	ldrb	r6, [r1, #4]
100109f2:	4b05      	ldr	r3, [pc, #20]	; (10010a08 <gattc_disc_svc_ind_parser+0x34>)
100109f4:	1c30      	adds	r0, r6, #0
100109f6:	1c0c      	adds	r4, r1, #0
100109f8:	4798      	blx	r3
100109fa:	1c32      	adds	r2, r6, #0
100109fc:	71a8      	strb	r0, [r5, #6]
100109fe:	1d61      	adds	r1, r4, #5
10010a00:	1de8      	adds	r0, r5, #7
10010a02:	4b02      	ldr	r3, [pc, #8]	; (10010a0c <gattc_disc_svc_ind_parser+0x38>)
10010a04:	4798      	blx	r3
10010a06:	bd70      	pop	{r4, r5, r6, pc}
10010a08:	1000f0cd 	.word	0x1000f0cd
10010a0c:	1001443b 	.word	0x1001443b

10010a10 <gattc_disc_svc_incl_ind_parser>:
10010a10:	b570      	push	{r4, r5, r6, lr}
10010a12:	1c15      	adds	r5, r2, #0
10010a14:	0a00      	lsrs	r0, r0, #8
10010a16:	8010      	strh	r0, [r2, #0]
10010a18:	784b      	ldrb	r3, [r1, #1]
10010a1a:	780a      	ldrb	r2, [r1, #0]
10010a1c:	021b      	lsls	r3, r3, #8
10010a1e:	4313      	orrs	r3, r2
10010a20:	806b      	strh	r3, [r5, #2]
10010a22:	78cb      	ldrb	r3, [r1, #3]
10010a24:	788a      	ldrb	r2, [r1, #2]
10010a26:	021b      	lsls	r3, r3, #8
10010a28:	4313      	orrs	r3, r2
10010a2a:	80ab      	strh	r3, [r5, #4]
10010a2c:	794b      	ldrb	r3, [r1, #5]
10010a2e:	790a      	ldrb	r2, [r1, #4]
10010a30:	021b      	lsls	r3, r3, #8
10010a32:	4313      	orrs	r3, r2
10010a34:	80eb      	strh	r3, [r5, #6]
10010a36:	798e      	ldrb	r6, [r1, #6]
10010a38:	4b05      	ldr	r3, [pc, #20]	; (10010a50 <gattc_disc_svc_incl_ind_parser+0x40>)
10010a3a:	1c30      	adds	r0, r6, #0
10010a3c:	1c0c      	adds	r4, r1, #0
10010a3e:	4798      	blx	r3
10010a40:	7228      	strb	r0, [r5, #8]
10010a42:	1c28      	adds	r0, r5, #0
10010a44:	1c32      	adds	r2, r6, #0
10010a46:	1de1      	adds	r1, r4, #7
10010a48:	4b02      	ldr	r3, [pc, #8]	; (10010a54 <gattc_disc_svc_incl_ind_parser+0x44>)
10010a4a:	3009      	adds	r0, #9
10010a4c:	4798      	blx	r3
10010a4e:	bd70      	pop	{r4, r5, r6, pc}
10010a50:	1000f0cd 	.word	0x1000f0cd
10010a54:	1001443b 	.word	0x1001443b

10010a58 <gattc_disc_char_ind_parser>:
10010a58:	b570      	push	{r4, r5, r6, lr}
10010a5a:	1c15      	adds	r5, r2, #0
10010a5c:	0a00      	lsrs	r0, r0, #8
10010a5e:	8010      	strh	r0, [r2, #0]
10010a60:	784b      	ldrb	r3, [r1, #1]
10010a62:	780a      	ldrb	r2, [r1, #0]
10010a64:	021b      	lsls	r3, r3, #8
10010a66:	4313      	orrs	r3, r2
10010a68:	806b      	strh	r3, [r5, #2]
10010a6a:	78cb      	ldrb	r3, [r1, #3]
10010a6c:	788a      	ldrb	r2, [r1, #2]
10010a6e:	021b      	lsls	r3, r3, #8
10010a70:	4313      	orrs	r3, r2
10010a72:	80ab      	strh	r3, [r5, #4]
10010a74:	790b      	ldrb	r3, [r1, #4]
10010a76:	1c0c      	adds	r4, r1, #0
10010a78:	71ab      	strb	r3, [r5, #6]
10010a7a:	794e      	ldrb	r6, [r1, #5]
10010a7c:	4b05      	ldr	r3, [pc, #20]	; (10010a94 <gattc_disc_char_ind_parser+0x3c>)
10010a7e:	1c30      	adds	r0, r6, #0
10010a80:	4798      	blx	r3
10010a82:	71e8      	strb	r0, [r5, #7]
10010a84:	1c28      	adds	r0, r5, #0
10010a86:	1c32      	adds	r2, r6, #0
10010a88:	1da1      	adds	r1, r4, #6
10010a8a:	4b03      	ldr	r3, [pc, #12]	; (10010a98 <gattc_disc_char_ind_parser+0x40>)
10010a8c:	3008      	adds	r0, #8
10010a8e:	4798      	blx	r3
10010a90:	bd70      	pop	{r4, r5, r6, pc}
10010a92:	46c0      	nop			; (mov r8, r8)
10010a94:	1000f0cd 	.word	0x1000f0cd
10010a98:	1001443b 	.word	0x1001443b

10010a9c <gattc_disc_char_desc_ind_parser>:
10010a9c:	b570      	push	{r4, r5, r6, lr}
10010a9e:	1c15      	adds	r5, r2, #0
10010aa0:	0a00      	lsrs	r0, r0, #8
10010aa2:	8010      	strh	r0, [r2, #0]
10010aa4:	784b      	ldrb	r3, [r1, #1]
10010aa6:	780a      	ldrb	r2, [r1, #0]
10010aa8:	021b      	lsls	r3, r3, #8
10010aaa:	4313      	orrs	r3, r2
10010aac:	806b      	strh	r3, [r5, #2]
10010aae:	788e      	ldrb	r6, [r1, #2]
10010ab0:	4b05      	ldr	r3, [pc, #20]	; (10010ac8 <gattc_disc_char_desc_ind_parser+0x2c>)
10010ab2:	1c30      	adds	r0, r6, #0
10010ab4:	1c0c      	adds	r4, r1, #0
10010ab6:	4798      	blx	r3
10010ab8:	1c32      	adds	r2, r6, #0
10010aba:	7128      	strb	r0, [r5, #4]
10010abc:	1ce1      	adds	r1, r4, #3
10010abe:	1d68      	adds	r0, r5, #5
10010ac0:	4b02      	ldr	r3, [pc, #8]	; (10010acc <gattc_disc_char_desc_ind_parser+0x30>)
10010ac2:	4798      	blx	r3
10010ac4:	bd70      	pop	{r4, r5, r6, pc}
10010ac6:	46c0      	nop			; (mov r8, r8)
10010ac8:	1000f0cd 	.word	0x1000f0cd
10010acc:	1001443b 	.word	0x1001443b

10010ad0 <gattc_event_ind_and_notification_parser>:
10010ad0:	b510      	push	{r4, lr}
10010ad2:	780c      	ldrb	r4, [r1, #0]
10010ad4:	1c13      	adds	r3, r2, #0
10010ad6:	2c12      	cmp	r4, #18
10010ad8:	d10e      	bne.n	10010af8 <gattc_event_ind_and_notification_parser+0x28>
10010ada:	0a00      	lsrs	r0, r0, #8
10010adc:	8010      	strh	r0, [r2, #0]
10010ade:	788a      	ldrb	r2, [r1, #2]
10010ae0:	709a      	strb	r2, [r3, #2]
10010ae2:	7948      	ldrb	r0, [r1, #5]
10010ae4:	790c      	ldrb	r4, [r1, #4]
10010ae6:	0200      	lsls	r0, r0, #8
10010ae8:	4320      	orrs	r0, r4
10010aea:	8098      	strh	r0, [r3, #4]
10010aec:	3106      	adds	r1, #6
10010aee:	1d98      	adds	r0, r3, #6
10010af0:	4b0b      	ldr	r3, [pc, #44]	; (10010b20 <gattc_event_ind_and_notification_parser+0x50>)
10010af2:	4798      	blx	r3
10010af4:	221b      	movs	r2, #27
10010af6:	e010      	b.n	10010b1a <gattc_event_ind_and_notification_parser+0x4a>
10010af8:	2200      	movs	r2, #0
10010afa:	2c13      	cmp	r4, #19
10010afc:	d10d      	bne.n	10010b1a <gattc_event_ind_and_notification_parser+0x4a>
10010afe:	0a00      	lsrs	r0, r0, #8
10010b00:	8018      	strh	r0, [r3, #0]
10010b02:	788a      	ldrb	r2, [r1, #2]
10010b04:	709a      	strb	r2, [r3, #2]
10010b06:	7908      	ldrb	r0, [r1, #4]
10010b08:	78cc      	ldrb	r4, [r1, #3]
10010b0a:	0200      	lsls	r0, r0, #8
10010b0c:	4320      	orrs	r0, r4
10010b0e:	8098      	strh	r0, [r3, #4]
10010b10:	3106      	adds	r1, #6
10010b12:	1d98      	adds	r0, r3, #6
10010b14:	4b02      	ldr	r3, [pc, #8]	; (10010b20 <gattc_event_ind_and_notification_parser+0x50>)
10010b16:	4798      	blx	r3
10010b18:	221c      	movs	r2, #28
10010b1a:	1c10      	adds	r0, r2, #0
10010b1c:	bd10      	pop	{r4, pc}
10010b1e:	46c0      	nop			; (mov r8, r8)
10010b20:	1001443b 	.word	0x1001443b

10010b24 <gattc_complete_evt_handler>:
10010b24:	b500      	push	{lr}
10010b26:	0a00      	lsrs	r0, r0, #8
10010b28:	8010      	strh	r0, [r2, #0]
10010b2a:	7808      	ldrb	r0, [r1, #0]
10010b2c:	7090      	strb	r0, [r2, #2]
10010b2e:	784b      	ldrb	r3, [r1, #1]
10010b30:	3801      	subs	r0, #1
10010b32:	70d3      	strb	r3, [r2, #3]
10010b34:	2813      	cmp	r0, #19
10010b36:	d82c      	bhi.n	10010b92 <gattc_complete_evt_handler+0x6e>
10010b38:	f000 febe 	bl	100118b8 <__gnu_thumb1_case_uqi>
10010b3c:	0a0a0a0c 	.word	0x0a0a0a0c
10010b40:	210a0a0a 	.word	0x210a0a0a
10010b44:	111f2121 	.word	0x111f2121
10010b48:	2b111111 	.word	0x2b111111
10010b4c:	2919132b 	.word	0x2919132b
10010b50:	2017      	movs	r0, #23
10010b52:	e01f      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b54:	2024      	movs	r0, #36	; 0x24
10010b56:	2b00      	cmp	r3, #0
10010b58:	d11c      	bne.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b5a:	3017      	adds	r0, #23
10010b5c:	e01a      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b5e:	2025      	movs	r0, #37	; 0x25
10010b60:	e018      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b62:	4a0d      	ldr	r2, [pc, #52]	; (10010b98 <gattc_complete_evt_handler+0x74>)
10010b64:	201d      	movs	r0, #29
10010b66:	6813      	ldr	r3, [r2, #0]
10010b68:	3b01      	subs	r3, #1
10010b6a:	6013      	str	r3, [r2, #0]
10010b6c:	e012      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b6e:	4a0a      	ldr	r2, [pc, #40]	; (10010b98 <gattc_complete_evt_handler+0x74>)
10010b70:	201e      	movs	r0, #30
10010b72:	6813      	ldr	r3, [r2, #0]
10010b74:	3b01      	subs	r3, #1
10010b76:	6013      	str	r3, [r2, #0]
10010b78:	e00c      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b7a:	2019      	movs	r0, #25
10010b7c:	e00a      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b7e:	203b      	movs	r0, #59	; 0x3b
10010b80:	2b00      	cmp	r3, #0
10010b82:	d007      	beq.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b84:	2182      	movs	r1, #130	; 0x82
10010b86:	0089      	lsls	r1, r1, #2
10010b88:	5453      	strb	r3, [r2, r1]
10010b8a:	3823      	subs	r0, #35	; 0x23
10010b8c:	e002      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b8e:	2021      	movs	r0, #33	; 0x21
10010b90:	e000      	b.n	10010b94 <gattc_complete_evt_handler+0x70>
10010b92:	2000      	movs	r0, #0
10010b94:	bd00      	pop	{pc}
10010b96:	46c0      	nop			; (mov r8, r8)
10010b98:	10018fcc 	.word	0x10018fcc

10010b9c <gattc_event_mtu_changed_ind_parser>:
10010b9c:	0a00      	lsrs	r0, r0, #8
10010b9e:	8010      	strh	r0, [r2, #0]
10010ba0:	784b      	ldrb	r3, [r1, #1]
10010ba2:	7809      	ldrb	r1, [r1, #0]
10010ba4:	021b      	lsls	r3, r3, #8
10010ba6:	430b      	orrs	r3, r1
10010ba8:	8053      	strh	r3, [r2, #2]
10010baa:	4770      	bx	lr

10010bac <gattc_read_ind_parser>:
10010bac:	0a00      	lsrs	r0, r0, #8
10010bae:	b508      	push	{r3, lr}
10010bb0:	8010      	strh	r0, [r2, #0]
10010bb2:	1c13      	adds	r3, r2, #0
10010bb4:	2282      	movs	r2, #130	; 0x82
10010bb6:	2000      	movs	r0, #0
10010bb8:	0092      	lsls	r2, r2, #2
10010bba:	5498      	strb	r0, [r3, r2]
10010bbc:	784a      	ldrb	r2, [r1, #1]
10010bbe:	7808      	ldrb	r0, [r1, #0]
10010bc0:	0212      	lsls	r2, r2, #8
10010bc2:	4302      	orrs	r2, r0
10010bc4:	805a      	strh	r2, [r3, #2]
10010bc6:	78ca      	ldrb	r2, [r1, #3]
10010bc8:	7888      	ldrb	r0, [r1, #2]
10010bca:	0212      	lsls	r2, r2, #8
10010bcc:	4302      	orrs	r2, r0
10010bce:	80da      	strh	r2, [r3, #6]
10010bd0:	794a      	ldrb	r2, [r1, #5]
10010bd2:	7908      	ldrb	r0, [r1, #4]
10010bd4:	0212      	lsls	r2, r2, #8
10010bd6:	4302      	orrs	r2, r0
10010bd8:	809a      	strh	r2, [r3, #4]
10010bda:	3308      	adds	r3, #8
10010bdc:	1c18      	adds	r0, r3, #0
10010bde:	3106      	adds	r1, #6
10010be0:	4b01      	ldr	r3, [pc, #4]	; (10010be8 <gattc_read_ind_parser+0x3c>)
10010be2:	4798      	blx	r3
10010be4:	bd08      	pop	{r3, pc}
10010be6:	46c0      	nop			; (mov r8, r8)
10010be8:	1001443b 	.word	0x1001443b

10010bec <gattc_svc_changed_cfg_ind_parser>:
10010bec:	0a00      	lsrs	r0, r0, #8
10010bee:	8010      	strh	r0, [r2, #0]
10010bf0:	784b      	ldrb	r3, [r1, #1]
10010bf2:	7809      	ldrb	r1, [r1, #0]
10010bf4:	021b      	lsls	r3, r3, #8
10010bf6:	430b      	orrs	r3, r1
10010bf8:	8053      	strh	r3, [r2, #2]
10010bfa:	4770      	bx	lr

10010bfc <init_gattc_task_module>:
10010bfc:	2300      	movs	r3, #0
10010bfe:	4a02      	ldr	r2, [pc, #8]	; (10010c08 <init_gattc_task_module+0xc>)
10010c00:	8013      	strh	r3, [r2, #0]
10010c02:	4a02      	ldr	r2, [pc, #8]	; (10010c0c <init_gattc_task_module+0x10>)
10010c04:	8013      	strh	r3, [r2, #0]
10010c06:	4770      	bx	lr
10010c08:	10018fc6 	.word	0x10018fc6
10010c0c:	10018fc8 	.word	0x10018fc8

10010c10 <gattm_att_set_value_req_handler>:
10010c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c12:	466b      	mov	r3, sp
10010c14:	1dde      	adds	r6, r3, #7
10010c16:	2300      	movs	r3, #0
10010c18:	1c0d      	adds	r5, r1, #0
10010c1a:	210c      	movs	r1, #12
10010c1c:	270b      	movs	r7, #11
10010c1e:	4c17      	ldr	r4, [pc, #92]	; (10010c7c <gattm_att_set_value_req_handler+0x6c>)
10010c20:	7033      	strb	r3, [r6, #0]
10010c22:	70e3      	strb	r3, [r4, #3]
10010c24:	4b16      	ldr	r3, [pc, #88]	; (10010c80 <gattm_att_set_value_req_handler+0x70>)
10010c26:	7021      	strb	r1, [r4, #0]
10010c28:	8819      	ldrh	r1, [r3, #0]
10010c2a:	881b      	ldrh	r3, [r3, #0]
10010c2c:	7220      	strb	r0, [r4, #8]
10010c2e:	0a1b      	lsrs	r3, r3, #8
10010c30:	7163      	strb	r3, [r4, #5]
10010c32:	0a00      	lsrs	r0, r0, #8
10010c34:	0a2b      	lsrs	r3, r5, #8
10010c36:	7121      	strb	r1, [r4, #4]
10010c38:	7260      	strb	r0, [r4, #9]
10010c3a:	1c11      	adds	r1, r2, #0
10010c3c:	72a5      	strb	r5, [r4, #10]
10010c3e:	1c2a      	adds	r2, r5, #0
10010c40:	72e3      	strb	r3, [r4, #11]
10010c42:	350c      	adds	r5, #12
10010c44:	4b0f      	ldr	r3, [pc, #60]	; (10010c84 <gattm_att_set_value_req_handler+0x74>)
10010c46:	4810      	ldr	r0, [pc, #64]	; (10010c88 <gattm_att_set_value_req_handler+0x78>)
10010c48:	7067      	strb	r7, [r4, #1]
10010c4a:	70a7      	strb	r7, [r4, #2]
10010c4c:	4798      	blx	r3
10010c4e:	b2a9      	uxth	r1, r5
10010c50:	4b0e      	ldr	r3, [pc, #56]	; (10010c8c <gattm_att_set_value_req_handler+0x7c>)
10010c52:	4d0f      	ldr	r5, [pc, #60]	; (10010c90 <gattm_att_set_value_req_handler+0x80>)
10010c54:	1c20      	adds	r0, r4, #0
10010c56:	802b      	strh	r3, [r5, #0]
10010c58:	1c0b      	adds	r3, r1, #0
10010c5a:	3b08      	subs	r3, #8
10010c5c:	71a3      	strb	r3, [r4, #6]
10010c5e:	121b      	asrs	r3, r3, #8
10010c60:	71e3      	strb	r3, [r4, #7]
10010c62:	4b0c      	ldr	r3, [pc, #48]	; (10010c94 <gattm_att_set_value_req_handler+0x84>)
10010c64:	80af      	strh	r7, [r5, #4]
10010c66:	4798      	blx	r3
10010c68:	1c30      	adds	r0, r6, #0
10010c6a:	4b0b      	ldr	r3, [pc, #44]	; (10010c98 <gattm_att_set_value_req_handler+0x88>)
10010c6c:	4798      	blx	r3
10010c6e:	7833      	ldrb	r3, [r6, #0]
10010c70:	20e2      	movs	r0, #226	; 0xe2
10010c72:	2b00      	cmp	r3, #0
10010c74:	d101      	bne.n	10010c7a <gattm_att_set_value_req_handler+0x6a>
10010c76:	68ab      	ldr	r3, [r5, #8]
10010c78:	7898      	ldrb	r0, [r3, #2]
10010c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010c7c:	1001a098 	.word	0x1001a098
10010c80:	10019d28 	.word	0x10019d28
10010c84:	1001443b 	.word	0x1001443b
10010c88:	1001a0a4 	.word	0x1001a0a4
10010c8c:	00000b0d 	.word	0x00000b0d
10010c90:	10019d1c 	.word	0x10019d1c
10010c94:	1000f715 	.word	0x1000f715
10010c98:	1000f779 	.word	0x1000f779

10010c9c <gattm_att_get_value_req_handler>:
10010c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c9e:	b085      	sub	sp, #20
10010ca0:	9201      	str	r2, [sp, #4]
10010ca2:	220a      	movs	r2, #10
10010ca4:	1c04      	adds	r4, r0, #0
10010ca6:	481d      	ldr	r0, [pc, #116]	; (10010d1c <gattm_att_get_value_req_handler+0x80>)
10010ca8:	ab02      	add	r3, sp, #8
10010caa:	1dde      	adds	r6, r3, #7
10010cac:	7002      	strb	r2, [r0, #0]
10010cae:	2300      	movs	r3, #0
10010cb0:	220b      	movs	r2, #11
10010cb2:	4d1b      	ldr	r5, [pc, #108]	; (10010d20 <gattm_att_get_value_req_handler+0x84>)
10010cb4:	1c0f      	adds	r7, r1, #0
10010cb6:	8829      	ldrh	r1, [r5, #0]
10010cb8:	882d      	ldrh	r5, [r5, #0]
10010cba:	7101      	strb	r1, [r0, #4]
10010cbc:	0a2d      	lsrs	r5, r5, #8
10010cbe:	7145      	strb	r5, [r0, #5]
10010cc0:	0a25      	lsrs	r5, r4, #8
10010cc2:	7245      	strb	r5, [r0, #9]
10010cc4:	4917      	ldr	r1, [pc, #92]	; (10010d24 <gattm_att_get_value_req_handler+0x88>)
10010cc6:	4d18      	ldr	r5, [pc, #96]	; (10010d28 <gattm_att_get_value_req_handler+0x8c>)
10010cc8:	7033      	strb	r3, [r6, #0]
10010cca:	7042      	strb	r2, [r0, #1]
10010ccc:	7082      	strb	r2, [r0, #2]
10010cce:	70c3      	strb	r3, [r0, #3]
10010cd0:	8029      	strh	r1, [r5, #0]
10010cd2:	80aa      	strh	r2, [r5, #4]
10010cd4:	71c3      	strb	r3, [r0, #7]
10010cd6:	3a09      	subs	r2, #9
10010cd8:	210a      	movs	r1, #10
10010cda:	4b14      	ldr	r3, [pc, #80]	; (10010d2c <gattm_att_get_value_req_handler+0x90>)
10010cdc:	7182      	strb	r2, [r0, #6]
10010cde:	7204      	strb	r4, [r0, #8]
10010ce0:	4798      	blx	r3
10010ce2:	1c30      	adds	r0, r6, #0
10010ce4:	4b12      	ldr	r3, [pc, #72]	; (10010d30 <gattm_att_get_value_req_handler+0x94>)
10010ce6:	4798      	blx	r3
10010ce8:	7833      	ldrb	r3, [r6, #0]
10010cea:	20e2      	movs	r0, #226	; 0xe2
10010cec:	2b00      	cmp	r3, #0
10010cee:	d112      	bne.n	10010d16 <gattm_att_get_value_req_handler+0x7a>
10010cf0:	68a9      	ldr	r1, [r5, #8]
10010cf2:	9801      	ldr	r0, [sp, #4]
10010cf4:	784d      	ldrb	r5, [r1, #1]
10010cf6:	780b      	ldrb	r3, [r1, #0]
10010cf8:	78ca      	ldrb	r2, [r1, #3]
10010cfa:	022d      	lsls	r5, r5, #8
10010cfc:	431d      	orrs	r5, r3
10010cfe:	788b      	ldrb	r3, [r1, #2]
10010d00:	0212      	lsls	r2, r2, #8
10010d02:	431a      	orrs	r2, r3
10010d04:	803a      	strh	r2, [r7, #0]
10010d06:	790e      	ldrb	r6, [r1, #4]
10010d08:	4b0a      	ldr	r3, [pc, #40]	; (10010d34 <gattm_att_get_value_req_handler+0x98>)
10010d0a:	3105      	adds	r1, #5
10010d0c:	4798      	blx	r3
10010d0e:	20e2      	movs	r0, #226	; 0xe2
10010d10:	42ac      	cmp	r4, r5
10010d12:	d100      	bne.n	10010d16 <gattm_att_get_value_req_handler+0x7a>
10010d14:	1c30      	adds	r0, r6, #0
10010d16:	b005      	add	sp, #20
10010d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d1a:	46c0      	nop			; (mov r8, r8)
10010d1c:	1001a098 	.word	0x1001a098
10010d20:	10019d28 	.word	0x10019d28
10010d24:	00000b0b 	.word	0x00000b0b
10010d28:	10019d1c 	.word	0x10019d1c
10010d2c:	1000f715 	.word	0x1000f715
10010d30:	1000f779 	.word	0x1000f779
10010d34:	1001443b 	.word	0x1001443b

10010d38 <htpt_enable_rsp_handler>:
10010d38:	780b      	ldrb	r3, [r1, #0]
10010d3a:	7013      	strb	r3, [r2, #0]
10010d3c:	784b      	ldrb	r3, [r1, #1]
10010d3e:	7053      	strb	r3, [r2, #1]
10010d40:	4770      	bx	lr

10010d42 <htpt_temp_send_rsp_handler>:
10010d42:	780b      	ldrb	r3, [r1, #0]
10010d44:	7013      	strb	r3, [r2, #0]
10010d46:	4770      	bx	lr

10010d48 <htpt_meas_intv_upd_rsp_handler>:
10010d48:	780b      	ldrb	r3, [r1, #0]
10010d4a:	7013      	strb	r3, [r2, #0]
10010d4c:	4770      	bx	lr

10010d4e <htpt_meas_intv_chg_req_ind_handler>:
10010d4e:	78cb      	ldrb	r3, [r1, #3]
10010d50:	7889      	ldrb	r1, [r1, #2]
10010d52:	021b      	lsls	r3, r3, #8
10010d54:	430b      	orrs	r3, r1
10010d56:	8013      	strh	r3, [r2, #0]
10010d58:	4770      	bx	lr

10010d5a <htpt_cfg_indntf_ind_handler>:
10010d5a:	780b      	ldrb	r3, [r1, #0]
10010d5c:	7013      	strb	r3, [r2, #0]
10010d5e:	784b      	ldrb	r3, [r1, #1]
10010d60:	7053      	strb	r3, [r2, #1]
10010d62:	4770      	bx	lr

10010d64 <sqrtf>:
10010d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d66:	2600      	movs	r6, #0
10010d68:	b08d      	sub	sp, #52	; 0x34
10010d6a:	1c04      	adds	r4, r0, #0
10010d6c:	f000 f84c 	bl	10010e08 <__ieee754_sqrtf>
10010d70:	4b23      	ldr	r3, [pc, #140]	; (10010e00 <sqrtf+0x9c>)
10010d72:	1c05      	adds	r5, r0, #0
10010d74:	579e      	ldrsb	r6, [r3, r6]
10010d76:	1c73      	adds	r3, r6, #1
10010d78:	d00b      	beq.n	10010d92 <sqrtf+0x2e>
10010d7a:	1c21      	adds	r1, r4, #0
10010d7c:	1c20      	adds	r0, r4, #0
10010d7e:	f001 fe0f 	bl	100129a0 <__aeabi_fcmpun>
10010d82:	1e07      	subs	r7, r0, #0
10010d84:	d105      	bne.n	10010d92 <sqrtf+0x2e>
10010d86:	2100      	movs	r1, #0
10010d88:	1c20      	adds	r0, r4, #0
10010d8a:	f000 ff65 	bl	10011c58 <__aeabi_fcmplt>
10010d8e:	2800      	cmp	r0, #0
10010d90:	d102      	bne.n	10010d98 <sqrtf+0x34>
10010d92:	1c28      	adds	r0, r5, #0
10010d94:	b00d      	add	sp, #52	; 0x34
10010d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d98:	2301      	movs	r3, #1
10010d9a:	9302      	str	r3, [sp, #8]
10010d9c:	4b19      	ldr	r3, [pc, #100]	; (10010e04 <sqrtf+0xa0>)
10010d9e:	1c20      	adds	r0, r4, #0
10010da0:	9303      	str	r3, [sp, #12]
10010da2:	970a      	str	r7, [sp, #40]	; 0x28
10010da4:	f003 f91c 	bl	10013fe0 <__aeabi_f2d>
10010da8:	2200      	movs	r2, #0
10010daa:	9006      	str	r0, [sp, #24]
10010dac:	9107      	str	r1, [sp, #28]
10010dae:	9004      	str	r0, [sp, #16]
10010db0:	9105      	str	r1, [sp, #20]
10010db2:	2300      	movs	r3, #0
10010db4:	2e00      	cmp	r6, #0
10010db6:	d014      	beq.n	10010de2 <sqrtf+0x7e>
10010db8:	0010      	movs	r0, r2
10010dba:	0019      	movs	r1, r3
10010dbc:	f001 feb0 	bl	10012b20 <__aeabi_ddiv>
10010dc0:	9008      	str	r0, [sp, #32]
10010dc2:	9109      	str	r1, [sp, #36]	; 0x24
10010dc4:	2e02      	cmp	r6, #2
10010dc6:	d10e      	bne.n	10010de6 <sqrtf+0x82>
10010dc8:	f003 faf2 	bl	100143b0 <__errno>
10010dcc:	2321      	movs	r3, #33	; 0x21
10010dce:	6003      	str	r3, [r0, #0]
10010dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010dd2:	9301      	str	r3, [sp, #4]
10010dd4:	2b00      	cmp	r3, #0
10010dd6:	d10c      	bne.n	10010df2 <sqrtf+0x8e>
10010dd8:	9808      	ldr	r0, [sp, #32]
10010dda:	9909      	ldr	r1, [sp, #36]	; 0x24
10010ddc:	f003 f954 	bl	10014088 <__aeabi_d2f>
10010de0:	e7d8      	b.n	10010d94 <sqrtf+0x30>
10010de2:	9208      	str	r2, [sp, #32]
10010de4:	9309      	str	r3, [sp, #36]	; 0x24
10010de6:	a802      	add	r0, sp, #8
10010de8:	f000 f86a 	bl	10010ec0 <matherr>
10010dec:	2800      	cmp	r0, #0
10010dee:	d1ef      	bne.n	10010dd0 <sqrtf+0x6c>
10010df0:	e7ea      	b.n	10010dc8 <sqrtf+0x64>
10010df2:	f003 fadd 	bl	100143b0 <__errno>
10010df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010df8:	9301      	str	r3, [sp, #4]
10010dfa:	6003      	str	r3, [r0, #0]
10010dfc:	e7ec      	b.n	10010dd8 <sqrtf+0x74>
10010dfe:	46c0      	nop			; (mov r8, r8)
10010e00:	100175c4 	.word	0x100175c4
10010e04:	10017368 	.word	0x10017368

10010e08 <__ieee754_sqrtf>:
10010e08:	492b      	ldr	r1, [pc, #172]	; (10010eb8 <__ieee754_sqrtf+0xb0>)
10010e0a:	0042      	lsls	r2, r0, #1
10010e0c:	b570      	push	{r4, r5, r6, lr}
10010e0e:	0003      	movs	r3, r0
10010e10:	1c04      	adds	r4, r0, #0
10010e12:	0852      	lsrs	r2, r2, #1
10010e14:	428a      	cmp	r2, r1
10010e16:	d83a      	bhi.n	10010e8e <__ieee754_sqrtf+0x86>
10010e18:	2a00      	cmp	r2, #0
10010e1a:	d037      	beq.n	10010e8c <__ieee754_sqrtf+0x84>
10010e1c:	2800      	cmp	r0, #0
10010e1e:	db3f      	blt.n	10010ea0 <__ieee754_sqrtf+0x98>
10010e20:	4926      	ldr	r1, [pc, #152]	; (10010ebc <__ieee754_sqrtf+0xb4>)
10010e22:	15c0      	asrs	r0, r0, #23
10010e24:	428a      	cmp	r2, r1
10010e26:	d80b      	bhi.n	10010e40 <__ieee754_sqrtf+0x38>
10010e28:	3101      	adds	r1, #1
10010e2a:	4221      	tst	r1, r4
10010e2c:	d13f      	bne.n	10010eae <__ieee754_sqrtf+0xa6>
10010e2e:	2200      	movs	r2, #0
10010e30:	000c      	movs	r4, r1
10010e32:	e000      	b.n	10010e36 <__ieee754_sqrtf+0x2e>
10010e34:	000a      	movs	r2, r1
10010e36:	005b      	lsls	r3, r3, #1
10010e38:	1c51      	adds	r1, r2, #1
10010e3a:	4223      	tst	r3, r4
10010e3c:	d0fa      	beq.n	10010e34 <__ieee754_sqrtf+0x2c>
10010e3e:	1a80      	subs	r0, r0, r2
10010e40:	2280      	movs	r2, #128	; 0x80
10010e42:	025b      	lsls	r3, r3, #9
10010e44:	0a5b      	lsrs	r3, r3, #9
10010e46:	0412      	lsls	r2, r2, #16
10010e48:	387f      	subs	r0, #127	; 0x7f
10010e4a:	4313      	orrs	r3, r2
10010e4c:	07c2      	lsls	r2, r0, #31
10010e4e:	d425      	bmi.n	10010e9c <__ieee754_sqrtf+0x94>
10010e50:	2280      	movs	r2, #128	; 0x80
10010e52:	2119      	movs	r1, #25
10010e54:	2500      	movs	r5, #0
10010e56:	2600      	movs	r6, #0
10010e58:	1040      	asrs	r0, r0, #1
10010e5a:	005b      	lsls	r3, r3, #1
10010e5c:	0452      	lsls	r2, r2, #17
10010e5e:	18b4      	adds	r4, r6, r2
10010e60:	429c      	cmp	r4, r3
10010e62:	dc02      	bgt.n	10010e6a <__ieee754_sqrtf+0x62>
10010e64:	18a6      	adds	r6, r4, r2
10010e66:	1b1b      	subs	r3, r3, r4
10010e68:	18ad      	adds	r5, r5, r2
10010e6a:	3901      	subs	r1, #1
10010e6c:	005b      	lsls	r3, r3, #1
10010e6e:	0852      	lsrs	r2, r2, #1
10010e70:	2900      	cmp	r1, #0
10010e72:	d1f4      	bne.n	10010e5e <__ieee754_sqrtf+0x56>
10010e74:	2b00      	cmp	r3, #0
10010e76:	d002      	beq.n	10010e7e <__ieee754_sqrtf+0x76>
10010e78:	2301      	movs	r3, #1
10010e7a:	402b      	ands	r3, r5
10010e7c:	18ed      	adds	r5, r5, r3
10010e7e:	23fc      	movs	r3, #252	; 0xfc
10010e80:	059b      	lsls	r3, r3, #22
10010e82:	469c      	mov	ip, r3
10010e84:	106d      	asrs	r5, r5, #1
10010e86:	4465      	add	r5, ip
10010e88:	05c0      	lsls	r0, r0, #23
10010e8a:	1940      	adds	r0, r0, r5
10010e8c:	bd70      	pop	{r4, r5, r6, pc}
10010e8e:	1c01      	adds	r1, r0, #0
10010e90:	f001 faec 	bl	1001246c <__aeabi_fmul>
10010e94:	1c21      	adds	r1, r4, #0
10010e96:	f000 ffa9 	bl	10011dec <__aeabi_fadd>
10010e9a:	e7f7      	b.n	10010e8c <__ieee754_sqrtf+0x84>
10010e9c:	005b      	lsls	r3, r3, #1
10010e9e:	e7d7      	b.n	10010e50 <__ieee754_sqrtf+0x48>
10010ea0:	1c01      	adds	r1, r0, #0
10010ea2:	f001 fbf7 	bl	10012694 <__aeabi_fsub>
10010ea6:	1c01      	adds	r1, r0, #0
10010ea8:	f001 f916 	bl	100120d8 <__aeabi_fdiv>
10010eac:	e7ee      	b.n	10010e8c <__ieee754_sqrtf+0x84>
10010eae:	2201      	movs	r2, #1
10010eb0:	4252      	negs	r2, r2
10010eb2:	1a80      	subs	r0, r0, r2
10010eb4:	e7c4      	b.n	10010e40 <__ieee754_sqrtf+0x38>
10010eb6:	46c0      	nop			; (mov r8, r8)
10010eb8:	7f7fffff 	.word	0x7f7fffff
10010ebc:	007fffff 	.word	0x007fffff

10010ec0 <matherr>:
10010ec0:	2000      	movs	r0, #0
10010ec2:	4770      	bx	lr

10010ec4 <nan>:
10010ec4:	2000      	movs	r0, #0
10010ec6:	4901      	ldr	r1, [pc, #4]	; (10010ecc <nan+0x8>)
10010ec8:	4770      	bx	lr
10010eca:	46c0      	nop			; (mov r8, r8)
10010ecc:	7ff80000 	.word	0x7ff80000

10010ed0 <fabsf>:
10010ed0:	0040      	lsls	r0, r0, #1
10010ed2:	0840      	lsrs	r0, r0, #1
10010ed4:	4770      	bx	lr
10010ed6:	46c0      	nop			; (mov r8, r8)

10010ed8 <inv_start_magnetic_disturbance>:
10010ed8:	2196      	movs	r1, #150	; 0x96
10010eda:	b508      	push	{r3, lr}
10010edc:	4802      	ldr	r0, [pc, #8]	; (10010ee8 <inv_start_magnetic_disturbance+0x10>)
10010ede:	0049      	lsls	r1, r1, #1
10010ee0:	2204      	movs	r2, #4
10010ee2:	f7f9 fed7 	bl	1000ac94 <inv_register_data_cb>
10010ee6:	bd08      	pop	{r3, pc}
10010ee8:	10011505 	.word	0x10011505

10010eec <inv_set_magnetic_disturbance>:
10010eec:	2800      	cmp	r0, #0
10010eee:	dd05      	ble.n	10010efc <inv_set_magnetic_disturbance+0x10>
10010ef0:	2284      	movs	r2, #132	; 0x84
10010ef2:	2101      	movs	r1, #1
10010ef4:	4b02      	ldr	r3, [pc, #8]	; (10010f00 <inv_set_magnetic_disturbance+0x14>)
10010ef6:	5099      	str	r1, [r3, r2]
10010ef8:	3a04      	subs	r2, #4
10010efa:	5098      	str	r0, [r3, r2]
10010efc:	2000      	movs	r0, #0
10010efe:	4770      	bx	lr
10010f00:	10018fd0 	.word	0x10018fd0

10010f04 <inv_init_magnetic_disturbance>:
10010f04:	b510      	push	{r4, lr}
10010f06:	4c0c      	ldr	r4, [pc, #48]	; (10010f38 <inv_init_magnetic_disturbance+0x34>)
10010f08:	2100      	movs	r1, #0
10010f0a:	1c20      	adds	r0, r4, #0
10010f0c:	22b8      	movs	r2, #184	; 0xb8
10010f0e:	f003 fab2 	bl	10014476 <memset>
10010f12:	4b0a      	ldr	r3, [pc, #40]	; (10010f3c <inv_init_magnetic_disturbance+0x38>)
10010f14:	4a0a      	ldr	r2, [pc, #40]	; (10010f40 <inv_init_magnetic_disturbance+0x3c>)
10010f16:	60e3      	str	r3, [r4, #12]
10010f18:	4b0a      	ldr	r3, [pc, #40]	; (10010f44 <inv_init_magnetic_disturbance+0x40>)
10010f1a:	2000      	movs	r0, #0
10010f1c:	60a3      	str	r3, [r4, #8]
10010f1e:	4b0a      	ldr	r3, [pc, #40]	; (10010f48 <inv_init_magnetic_disturbance+0x44>)
10010f20:	6023      	str	r3, [r4, #0]
10010f22:	4b0a      	ldr	r3, [pc, #40]	; (10010f4c <inv_init_magnetic_disturbance+0x48>)
10010f24:	6063      	str	r3, [r4, #4]
10010f26:	2380      	movs	r3, #128	; 0x80
10010f28:	05db      	lsls	r3, r3, #23
10010f2a:	6663      	str	r3, [r4, #100]	; 0x64
10010f2c:	23fa      	movs	r3, #250	; 0xfa
10010f2e:	00db      	lsls	r3, r3, #3
10010f30:	67e3      	str	r3, [r4, #124]	; 0x7c
10010f32:	239c      	movs	r3, #156	; 0x9c
10010f34:	50e2      	str	r2, [r4, r3]
10010f36:	bd10      	pop	{r4, pc}
10010f38:	10018fd0 	.word	0x10018fd0
10010f3c:	42b40000 	.word	0x42b40000
10010f40:	3e2e147b 	.word	0x3e2e147b
10010f44:	c2b40000 	.word	0xc2b40000
10010f48:	42700000 	.word	0x42700000
10010f4c:	41f00000 	.word	0x41f00000

10010f50 <inv_stop_magnetic_disturbance>:
10010f50:	b508      	push	{r3, lr}
10010f52:	4802      	ldr	r0, [pc, #8]	; (10010f5c <inv_stop_magnetic_disturbance+0xc>)
10010f54:	f7f9 ff1c 	bl	1000ad90 <inv_unregister_data_cb>
10010f58:	bd08      	pop	{r3, pc}
10010f5a:	46c0      	nop			; (mov r8, r8)
10010f5c:	10011505 	.word	0x10011505

10010f60 <inv_enable_magnetic_disturbance>:
10010f60:	b508      	push	{r3, lr}
10010f62:	f7ff ffcf 	bl	10010f04 <inv_init_magnetic_disturbance>
10010f66:	2800      	cmp	r0, #0
10010f68:	d108      	bne.n	10010f7c <inv_enable_magnetic_disturbance+0x1c>
10010f6a:	228c      	movs	r2, #140	; 0x8c
10010f6c:	2101      	movs	r1, #1
10010f6e:	4b04      	ldr	r3, [pc, #16]	; (10010f80 <inv_enable_magnetic_disturbance+0x20>)
10010f70:	5098      	str	r0, [r3, r2]
10010f72:	3a04      	subs	r2, #4
10010f74:	4803      	ldr	r0, [pc, #12]	; (10010f84 <inv_enable_magnetic_disturbance+0x24>)
10010f76:	5099      	str	r1, [r3, r2]
10010f78:	f7fa f9b4 	bl	1000b2e4 <inv_register_mpl_start_notification>
10010f7c:	bd08      	pop	{r3, pc}
10010f7e:	46c0      	nop			; (mov r8, r8)
10010f80:	10018fd0 	.word	0x10018fd0
10010f84:	10010ed9 	.word	0x10010ed9

10010f88 <inv_disable_magnetic_disturbance>:
10010f88:	b510      	push	{r4, lr}
10010f8a:	4c04      	ldr	r4, [pc, #16]	; (10010f9c <inv_disable_magnetic_disturbance+0x14>)
10010f8c:	1c20      	adds	r0, r4, #0
10010f8e:	f7f9 feff 	bl	1000ad90 <inv_unregister_data_cb>
10010f92:	1c20      	adds	r0, r4, #0
10010f94:	f7f9 fefc 	bl	1000ad90 <inv_unregister_data_cb>
10010f98:	bd10      	pop	{r4, pc}
10010f9a:	46c0      	nop			; (mov r8, r8)
10010f9c:	10011505 	.word	0x10011505

10010fa0 <inv_disable_dip_tracking>:
10010fa0:	2100      	movs	r1, #0
10010fa2:	238c      	movs	r3, #140	; 0x8c
10010fa4:	4a01      	ldr	r2, [pc, #4]	; (10010fac <inv_disable_dip_tracking+0xc>)
10010fa6:	2000      	movs	r0, #0
10010fa8:	50d1      	str	r1, [r2, r3]
10010faa:	4770      	bx	lr
10010fac:	10018fd0 	.word	0x10018fd0

10010fb0 <inv_enable_dip_tracking>:
10010fb0:	2101      	movs	r1, #1
10010fb2:	238c      	movs	r3, #140	; 0x8c
10010fb4:	4a01      	ldr	r2, [pc, #4]	; (10010fbc <inv_enable_dip_tracking+0xc>)
10010fb6:	2000      	movs	r0, #0
10010fb8:	50d1      	str	r1, [r2, r3]
10010fba:	4770      	bx	lr
10010fbc:	10018fd0 	.word	0x10018fd0

10010fc0 <inv_track_dip_angle>:
10010fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010fc2:	2800      	cmp	r0, #0
10010fc4:	d00b      	beq.n	10010fde <inv_track_dip_angle+0x1e>
10010fc6:	2801      	cmp	r0, #1
10010fc8:	d019      	beq.n	10010ffe <inv_track_dip_angle+0x3e>
10010fca:	2101      	movs	r1, #1
10010fcc:	2298      	movs	r2, #152	; 0x98
10010fce:	4b20      	ldr	r3, [pc, #128]	; (10011050 <inv_track_dip_angle+0x90>)
10010fd0:	5099      	str	r1, [r3, r2]
10010fd2:	2200      	movs	r2, #0
10010fd4:	318b      	adds	r1, #139	; 0x8b
10010fd6:	505a      	str	r2, [r3, r1]
10010fd8:	3104      	adds	r1, #4
10010fda:	505a      	str	r2, [r3, r1]
10010fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010fde:	22a0      	movs	r2, #160	; 0xa0
10010fe0:	4b1b      	ldr	r3, [pc, #108]	; (10011050 <inv_track_dip_angle+0x90>)
10010fe2:	5099      	str	r1, [r3, r2]
10010fe4:	3204      	adds	r2, #4
10010fe6:	5099      	str	r1, [r3, r2]
10010fe8:	2100      	movs	r1, #0
10010fea:	3204      	adds	r2, #4
10010fec:	5099      	str	r1, [r3, r2]
10010fee:	2101      	movs	r1, #1
10010ff0:	3a14      	subs	r2, #20
10010ff2:	5098      	str	r0, [r3, r2]
10010ff4:	3a04      	subs	r2, #4
10010ff6:	5099      	str	r1, [r3, r2]
10010ff8:	3208      	adds	r2, #8
10010ffa:	5098      	str	r0, [r3, r2]
10010ffc:	e7ee      	b.n	10010fdc <inv_track_dip_angle+0x1c>
10010ffe:	23a0      	movs	r3, #160	; 0xa0
10011000:	4d13      	ldr	r5, [pc, #76]	; (10011050 <inv_track_dip_angle+0x90>)
10011002:	1c08      	adds	r0, r1, #0
10011004:	1c0c      	adds	r4, r1, #0
10011006:	58e9      	ldr	r1, [r5, r3]
10011008:	f001 fb44 	bl	10012694 <__aeabi_fsub>
1001100c:	239c      	movs	r3, #156	; 0x9c
1001100e:	0040      	lsls	r0, r0, #1
10011010:	0840      	lsrs	r0, r0, #1
10011012:	58e9      	ldr	r1, [r5, r3]
10011014:	f000 fe20 	bl	10011c58 <__aeabi_fcmplt>
10011018:	2800      	cmp	r0, #0
1001101a:	d014      	beq.n	10011046 <inv_track_dip_angle+0x86>
1001101c:	2394      	movs	r3, #148	; 0x94
1001101e:	27a4      	movs	r7, #164	; 0xa4
10011020:	58ea      	ldr	r2, [r5, r3]
10011022:	59e9      	ldr	r1, [r5, r7]
10011024:	1c56      	adds	r6, r2, #1
10011026:	50ee      	str	r6, [r5, r3]
10011028:	1c20      	adds	r0, r4, #0
1001102a:	f000 fedf 	bl	10011dec <__aeabi_fadd>
1001102e:	51e8      	str	r0, [r5, r7]
10011030:	2e31      	cmp	r6, #49	; 0x31
10011032:	ddd3      	ble.n	10010fdc <inv_track_dip_angle+0x1c>
10011034:	2390      	movs	r3, #144	; 0x90
10011036:	2202      	movs	r2, #2
10011038:	4906      	ldr	r1, [pc, #24]	; (10011054 <inv_track_dip_angle+0x94>)
1001103a:	50ea      	str	r2, [r5, r3]
1001103c:	f001 f84c 	bl	100120d8 <__aeabi_fdiv>
10011040:	23a8      	movs	r3, #168	; 0xa8
10011042:	50e8      	str	r0, [r5, r3]
10011044:	e7ca      	b.n	10010fdc <inv_track_dip_angle+0x1c>
10011046:	2390      	movs	r3, #144	; 0x90
10011048:	50e8      	str	r0, [r5, r3]
1001104a:	3304      	adds	r3, #4
1001104c:	50e8      	str	r0, [r5, r3]
1001104e:	e7c5      	b.n	10010fdc <inv_track_dip_angle+0x1c>
10011050:	10018fd0 	.word	0x10018fd0
10011054:	42480000 	.word	0x42480000

10011058 <ComputeAngleVelocity>:
10011058:	b5f0      	push	{r4, r5, r6, r7, lr}
1001105a:	464f      	mov	r7, r9
1001105c:	4646      	mov	r6, r8
1001105e:	1c04      	adds	r4, r0, #0
10011060:	1c0d      	adds	r5, r1, #0
10011062:	b4c0      	push	{r6, r7}
10011064:	b08f      	sub	sp, #60	; 0x3c
10011066:	a905      	add	r1, sp, #20
10011068:	4691      	mov	r9, r2
1001106a:	f7f9 ffd7 	bl	1000b01c <inv_quaternion_to_rotation>
1001106e:	1c28      	adds	r0, r5, #0
10011070:	1c21      	adds	r1, r4, #0
10011072:	aa01      	add	r2, sp, #4
10011074:	f7f9 fefe 	bl	1000ae74 <inv_q_mult>
10011078:	1c20      	adds	r0, r4, #0
1001107a:	1c29      	adds	r1, r5, #0
1001107c:	f7f9 ffc2 	bl	1000b004 <inv_q_invert>
10011080:	2300      	movs	r3, #0
10011082:	4698      	mov	r8, r3
10011084:	4643      	mov	r3, r8
10011086:	005d      	lsls	r5, r3, #1
10011088:	ab05      	add	r3, sp, #20
1001108a:	469c      	mov	ip, r3
1001108c:	2400      	movs	r4, #0
1001108e:	2600      	movs	r6, #0
10011090:	2700      	movs	r7, #0
10011092:	4445      	add	r5, r8
10011094:	4465      	add	r5, ip
10011096:	592b      	ldr	r3, [r5, r4]
10011098:	5928      	ldr	r0, [r5, r4]
1001109a:	17d9      	asrs	r1, r3, #31
1001109c:	ab01      	add	r3, sp, #4
1001109e:	191b      	adds	r3, r3, r4
100110a0:	685a      	ldr	r2, [r3, #4]
100110a2:	3404      	adds	r4, #4
100110a4:	17d3      	asrs	r3, r2, #31
100110a6:	f000 fe23 	bl	10011cf0 <__aeabi_lmul>
100110aa:	1836      	adds	r6, r6, r0
100110ac:	414f      	adcs	r7, r1
100110ae:	2c0c      	cmp	r4, #12
100110b0:	d1f1      	bne.n	10011096 <ComputeAngleVelocity+0x3e>
100110b2:	00bb      	lsls	r3, r7, #2
100110b4:	0fb6      	lsrs	r6, r6, #30
100110b6:	431e      	orrs	r6, r3
100110b8:	4642      	mov	r2, r8
100110ba:	464b      	mov	r3, r9
100110bc:	509e      	str	r6, [r3, r2]
100110be:	2304      	movs	r3, #4
100110c0:	469c      	mov	ip, r3
100110c2:	44e0      	add	r8, ip
100110c4:	4643      	mov	r3, r8
100110c6:	2b0c      	cmp	r3, #12
100110c8:	d1dc      	bne.n	10011084 <ComputeAngleVelocity+0x2c>
100110ca:	b00f      	add	sp, #60	; 0x3c
100110cc:	bc0c      	pop	{r2, r3}
100110ce:	4690      	mov	r8, r2
100110d0:	4699      	mov	r9, r3
100110d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100110d4 <Mag3ofNormalizedLong>:
100110d4:	b570      	push	{r4, r5, r6, lr}
100110d6:	1c04      	adds	r4, r0, #0
100110d8:	6800      	ldr	r0, [r0, #0]
100110da:	f001 fc9b 	bl	10012a14 <__aeabi_i2f>
100110de:	1c06      	adds	r6, r0, #0
100110e0:	6860      	ldr	r0, [r4, #4]
100110e2:	f001 fc97 	bl	10012a14 <__aeabi_i2f>
100110e6:	1c05      	adds	r5, r0, #0
100110e8:	68a0      	ldr	r0, [r4, #8]
100110ea:	f001 fc93 	bl	10012a14 <__aeabi_i2f>
100110ee:	1c31      	adds	r1, r6, #0
100110f0:	1c04      	adds	r4, r0, #0
100110f2:	1c30      	adds	r0, r6, #0
100110f4:	f001 f9ba 	bl	1001246c <__aeabi_fmul>
100110f8:	1c29      	adds	r1, r5, #0
100110fa:	1c06      	adds	r6, r0, #0
100110fc:	1c28      	adds	r0, r5, #0
100110fe:	f001 f9b5 	bl	1001246c <__aeabi_fmul>
10011102:	1c01      	adds	r1, r0, #0
10011104:	1c30      	adds	r0, r6, #0
10011106:	f000 fe71 	bl	10011dec <__aeabi_fadd>
1001110a:	1c21      	adds	r1, r4, #0
1001110c:	1c05      	adds	r5, r0, #0
1001110e:	1c20      	adds	r0, r4, #0
10011110:	f001 f9ac 	bl	1001246c <__aeabi_fmul>
10011114:	1c01      	adds	r1, r0, #0
10011116:	1c28      	adds	r0, r5, #0
10011118:	f000 fe68 	bl	10011dec <__aeabi_fadd>
1001111c:	f7ff fe22 	bl	10010d64 <sqrtf>
10011120:	21de      	movs	r1, #222	; 0xde
10011122:	0589      	lsls	r1, r1, #22
10011124:	f001 f9a2 	bl	1001246c <__aeabi_fmul>
10011128:	bd70      	pop	{r4, r5, r6, pc}
1001112a:	46c0      	nop			; (mov r8, r8)

1001112c <MagDisturbSetDisturbance>:
1001112c:	b570      	push	{r4, r5, r6, lr}
1001112e:	4c1d      	ldr	r4, [pc, #116]	; (100111a4 <MagDisturbSetDisturbance+0x78>)
10011130:	1c05      	adds	r5, r0, #0
10011132:	1c0e      	adds	r6, r1, #0
10011134:	6820      	ldr	r0, [r4, #0]
10011136:	1c29      	adds	r1, r5, #0
10011138:	f000 fd8e 	bl	10011c58 <__aeabi_fcmplt>
1001113c:	2800      	cmp	r0, #0
1001113e:	d105      	bne.n	1001114c <MagDisturbSetDisturbance+0x20>
10011140:	1c28      	adds	r0, r5, #0
10011142:	6861      	ldr	r1, [r4, #4]
10011144:	f000 fd88 	bl	10011c58 <__aeabi_fcmplt>
10011148:	2800      	cmp	r0, #0
1001114a:	d00f      	beq.n	1001116c <MagDisturbSetDisturbance+0x40>
1001114c:	6f63      	ldr	r3, [r4, #116]	; 0x74
1001114e:	2b00      	cmp	r3, #0
10011150:	d011      	beq.n	10011176 <MagDisturbSetDisturbance+0x4a>
10011152:	2301      	movs	r3, #1
10011154:	6763      	str	r3, [r4, #116]	; 0x74
10011156:	2300      	movs	r3, #0
10011158:	67a3      	str	r3, [r4, #120]	; 0x78
1001115a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
1001115c:	429a      	cmp	r2, r3
1001115e:	dc04      	bgt.n	1001116a <MagDisturbSetDisturbance+0x3e>
10011160:	6f63      	ldr	r3, [r4, #116]	; 0x74
10011162:	2b01      	cmp	r3, #1
10011164:	d00d      	beq.n	10011182 <MagDisturbSetDisturbance+0x56>
10011166:	2300      	movs	r3, #0
10011168:	6763      	str	r3, [r4, #116]	; 0x74
1001116a:	bd70      	pop	{r4, r5, r6, pc}
1001116c:	6923      	ldr	r3, [r4, #16]
1001116e:	2b01      	cmp	r3, #1
10011170:	d00a      	beq.n	10011188 <MagDisturbSetDisturbance+0x5c>
10011172:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10011174:	e7f1      	b.n	1001115a <MagDisturbSetDisturbance+0x2e>
10011176:	1c20      	adds	r0, r4, #0
10011178:	6da1      	ldr	r1, [r4, #88]	; 0x58
1001117a:	3018      	adds	r0, #24
1001117c:	f7fa f840 	bl	1000b200 <inv_set_compass_correction>
10011180:	e7e7      	b.n	10011152 <MagDisturbSetDisturbance+0x26>
10011182:	2300      	movs	r3, #0
10011184:	65e3      	str	r3, [r4, #92]	; 0x5c
10011186:	e7ee      	b.n	10011166 <MagDisturbSetDisturbance+0x3a>
10011188:	68e0      	ldr	r0, [r4, #12]
1001118a:	1c31      	adds	r1, r6, #0
1001118c:	f000 fd64 	bl	10011c58 <__aeabi_fcmplt>
10011190:	2800      	cmp	r0, #0
10011192:	d1db      	bne.n	1001114c <MagDisturbSetDisturbance+0x20>
10011194:	1c30      	adds	r0, r6, #0
10011196:	68a1      	ldr	r1, [r4, #8]
10011198:	f000 fd5e 	bl	10011c58 <__aeabi_fcmplt>
1001119c:	2800      	cmp	r0, #0
1001119e:	d1d5      	bne.n	1001114c <MagDisturbSetDisturbance+0x20>
100111a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
100111a2:	e7da      	b.n	1001115a <MagDisturbSetDisturbance+0x2e>
100111a4:	10018fd0 	.word	0x10018fd0

100111a8 <MagDisturbCheckSettling>:
100111a8:	b538      	push	{r3, r4, r5, lr}
100111aa:	1c05      	adds	r5, r0, #0
100111ac:	1c0c      	adds	r4, r1, #0
100111ae:	f7fa f84b 	bl	1000b248 <inv_get_acc_state>
100111b2:	2800      	cmp	r0, #0
100111b4:	d105      	bne.n	100111c2 <MagDisturbCheckSettling+0x1a>
100111b6:	1c28      	adds	r0, r5, #0
100111b8:	490d      	ldr	r1, [pc, #52]	; (100111f0 <MagDisturbCheckSettling+0x48>)
100111ba:	f000 fd61 	bl	10011c80 <__aeabi_fcmpgt>
100111be:	2800      	cmp	r0, #0
100111c0:	d010      	beq.n	100111e4 <MagDisturbCheckSettling+0x3c>
100111c2:	2200      	movs	r2, #0
100111c4:	4b0b      	ldr	r3, [pc, #44]	; (100111f4 <MagDisturbCheckSettling+0x4c>)
100111c6:	611a      	str	r2, [r3, #16]
100111c8:	615a      	str	r2, [r3, #20]
100111ca:	695a      	ldr	r2, [r3, #20]
100111cc:	18a1      	adds	r1, r4, r2
100111ce:	22fa      	movs	r2, #250	; 0xfa
100111d0:	6159      	str	r1, [r3, #20]
100111d2:	0052      	lsls	r2, r2, #1
100111d4:	4291      	cmp	r1, r2
100111d6:	dd04      	ble.n	100111e2 <MagDisturbCheckSettling+0x3a>
100111d8:	3af4      	subs	r2, #244	; 0xf4
100111da:	3aff      	subs	r2, #255	; 0xff
100111dc:	611a      	str	r2, [r3, #16]
100111de:	2200      	movs	r2, #0
100111e0:	615a      	str	r2, [r3, #20]
100111e2:	bd38      	pop	{r3, r4, r5, pc}
100111e4:	4b03      	ldr	r3, [pc, #12]	; (100111f4 <MagDisturbCheckSettling+0x4c>)
100111e6:	691a      	ldr	r2, [r3, #16]
100111e8:	2a00      	cmp	r2, #0
100111ea:	d1fa      	bne.n	100111e2 <MagDisturbCheckSettling+0x3a>
100111ec:	e7ed      	b.n	100111ca <MagDisturbCheckSettling+0x22>
100111ee:	46c0      	nop			; (mov r8, r8)
100111f0:	461c4000 	.word	0x461c4000
100111f4:	10018fd0 	.word	0x10018fd0

100111f8 <inv_check_magnetic_disturbance>:
100111f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100111fa:	465f      	mov	r7, fp
100111fc:	4644      	mov	r4, r8
100111fe:	4656      	mov	r6, sl
10011200:	464d      	mov	r5, r9
10011202:	b4f0      	push	{r4, r5, r6, r7}
10011204:	2400      	movs	r4, #0
10011206:	2788      	movs	r7, #136	; 0x88
10011208:	b08d      	sub	sp, #52	; 0x34
1001120a:	9406      	str	r4, [sp, #24]
1001120c:	9407      	str	r4, [sp, #28]
1001120e:	9408      	str	r4, [sp, #32]
10011210:	4cb5      	ldr	r4, [pc, #724]	; (100114e8 <inv_check_magnetic_disturbance+0x2f0>)
10011212:	59e7      	ldr	r7, [r4, r7]
10011214:	2f00      	cmp	r7, #0
10011216:	d107      	bne.n	10011228 <inv_check_magnetic_disturbance+0x30>
10011218:	2000      	movs	r0, #0
1001121a:	b00d      	add	sp, #52	; 0x34
1001121c:	bc3c      	pop	{r2, r3, r4, r5}
1001121e:	4690      	mov	r8, r2
10011220:	4699      	mov	r9, r3
10011222:	46a2      	mov	sl, r4
10011224:	46ab      	mov	fp, r5
10011226:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011228:	4699      	mov	r9, r3
1001122a:	4690      	mov	r8, r2
1001122c:	9101      	str	r1, [sp, #4]
1001122e:	1c05      	adds	r5, r0, #0
10011230:	f7f9 fd20 	bl	1000ac74 <inv_get_gyro_on>
10011234:	2800      	cmp	r0, #0
10011236:	d000      	beq.n	1001123a <inv_check_magnetic_disturbance+0x42>
10011238:	e120      	b.n	1001147c <inv_check_magnetic_disturbance+0x284>
1001123a:	2780      	movs	r7, #128	; 0x80
1001123c:	59e3      	ldr	r3, [r4, r7]
1001123e:	2b00      	cmp	r3, #0
10011240:	dd0f      	ble.n	10011262 <inv_check_magnetic_disturbance+0x6a>
10011242:	2201      	movs	r2, #1
10011244:	2384      	movs	r3, #132	; 0x84
10011246:	50e2      	str	r2, [r4, r3]
10011248:	f7f9 fd14 	bl	1000ac74 <inv_get_gyro_on>
1001124c:	2800      	cmp	r0, #0
1001124e:	d000      	beq.n	10011252 <inv_check_magnetic_disturbance+0x5a>
10011250:	e0a9      	b.n	100113a6 <inv_check_magnetic_disturbance+0x1ae>
10011252:	59e3      	ldr	r3, [r4, r7]
10011254:	1b5b      	subs	r3, r3, r5
10011256:	51e3      	str	r3, [r4, r7]
10011258:	2b00      	cmp	r3, #0
1001125a:	dc02      	bgt.n	10011262 <inv_check_magnetic_disturbance+0x6a>
1001125c:	2200      	movs	r2, #0
1001125e:	2384      	movs	r3, #132	; 0x84
10011260:	50e2      	str	r2, [r4, r3]
10011262:	f7fa f839 	bl	1000b2d8 <inv_got_compass_bias>
10011266:	2800      	cmp	r0, #0
10011268:	d0d6      	beq.n	10011218 <inv_check_magnetic_disturbance+0x20>
1001126a:	2600      	movs	r6, #0
1001126c:	2700      	movs	r7, #0
1001126e:	4643      	mov	r3, r8
10011270:	59d8      	ldr	r0, [r3, r7]
10011272:	f001 fbcf 	bl	10012a14 <__aeabi_i2f>
10011276:	21de      	movs	r1, #222	; 0xde
10011278:	0589      	lsls	r1, r1, #22
1001127a:	f001 f8f7 	bl	1001246c <__aeabi_fmul>
1001127e:	464b      	mov	r3, r9
10011280:	4683      	mov	fp, r0
10011282:	59d8      	ldr	r0, [r3, r7]
10011284:	f001 fbc6 	bl	10012a14 <__aeabi_i2f>
10011288:	1c01      	adds	r1, r0, #0
1001128a:	4658      	mov	r0, fp
1001128c:	f001 f8ee 	bl	1001246c <__aeabi_fmul>
10011290:	21de      	movs	r1, #222	; 0xde
10011292:	0589      	lsls	r1, r1, #22
10011294:	f001 f8ea 	bl	1001246c <__aeabi_fmul>
10011298:	1c01      	adds	r1, r0, #0
1001129a:	1c30      	adds	r0, r6, #0
1001129c:	f000 fda6 	bl	10011dec <__aeabi_fadd>
100112a0:	3704      	adds	r7, #4
100112a2:	1c06      	adds	r6, r0, #0
100112a4:	2f0c      	cmp	r7, #12
100112a6:	d1e2      	bne.n	1001126e <inv_check_magnetic_disturbance+0x76>
100112a8:	4640      	mov	r0, r8
100112aa:	f7ff ff13 	bl	100110d4 <Mag3ofNormalizedLong>
100112ae:	9000      	str	r0, [sp, #0]
100112b0:	9900      	ldr	r1, [sp, #0]
100112b2:	1c30      	adds	r0, r6, #0
100112b4:	f000 ff10 	bl	100120d8 <__aeabi_fdiv>
100112b8:	21fe      	movs	r1, #254	; 0xfe
100112ba:	0589      	lsls	r1, r1, #22
100112bc:	1c06      	adds	r6, r0, #0
100112be:	f000 fcdf 	bl	10011c80 <__aeabi_fcmpgt>
100112c2:	2800      	cmp	r0, #0
100112c4:	d067      	beq.n	10011396 <inv_check_magnetic_disturbance+0x19e>
100112c6:	26fe      	movs	r6, #254	; 0xfe
100112c8:	05b6      	lsls	r6, r6, #22
100112ca:	1c30      	adds	r0, r6, #0
100112cc:	f000 f93c 	bl	10011548 <acosf>
100112d0:	238c      	movs	r3, #140	; 0x8c
100112d2:	58e3      	ldr	r3, [r4, r3]
100112d4:	4680      	mov	r8, r0
100112d6:	2b00      	cmp	r3, #0
100112d8:	d00c      	beq.n	100112f4 <inv_check_magnetic_disturbance+0xfc>
100112da:	9800      	ldr	r0, [sp, #0]
100112dc:	6821      	ldr	r1, [r4, #0]
100112de:	f000 fcbb 	bl	10011c58 <__aeabi_fcmplt>
100112e2:	2800      	cmp	r0, #0
100112e4:	d006      	beq.n	100112f4 <inv_check_magnetic_disturbance+0xfc>
100112e6:	9800      	ldr	r0, [sp, #0]
100112e8:	6861      	ldr	r1, [r4, #4]
100112ea:	f000 fcc9 	bl	10011c80 <__aeabi_fcmpgt>
100112ee:	2800      	cmp	r0, #0
100112f0:	d000      	beq.n	100112f4 <inv_check_magnetic_disturbance+0xfc>
100112f2:	e0c7      	b.n	10011484 <inv_check_magnetic_disturbance+0x28c>
100112f4:	ae09      	add	r6, sp, #36	; 0x24
100112f6:	1c30      	adds	r0, r6, #0
100112f8:	f7f9 ffac 	bl	1000b254 <inv_get_local_field>
100112fc:	1c21      	adds	r1, r4, #0
100112fe:	1c30      	adds	r0, r6, #0
10011300:	31ac      	adds	r1, #172	; 0xac
10011302:	220c      	movs	r2, #12
10011304:	f003 f88a 	bl	1001441c <memcmp>
10011308:	2800      	cmp	r0, #0
1001130a:	d157      	bne.n	100113bc <inv_check_magnetic_disturbance+0x1c4>
1001130c:	2398      	movs	r3, #152	; 0x98
1001130e:	58e3      	ldr	r3, [r4, r3]
10011310:	2b01      	cmp	r3, #1
10011312:	d053      	beq.n	100113bc <inv_check_magnetic_disturbance+0x1c4>
10011314:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10011316:	2b00      	cmp	r3, #0
10011318:	d10e      	bne.n	10011338 <inv_check_magnetic_disturbance+0x140>
1001131a:	2301      	movs	r3, #1
1001131c:	65e3      	str	r3, [r4, #92]	; 0x5c
1001131e:	3357      	adds	r3, #87	; 0x57
10011320:	469a      	mov	sl, r3
10011322:	2600      	movs	r6, #0
10011324:	44a2      	add	sl, r4
10011326:	1c30      	adds	r0, r6, #0
10011328:	3018      	adds	r0, #24
1001132a:	1820      	adds	r0, r4, r0
1001132c:	4651      	mov	r1, sl
1001132e:	3610      	adds	r6, #16
10011330:	f7f9 ff7a 	bl	1000b228 <inv_get_compass_correction>
10011334:	2e40      	cmp	r6, #64	; 0x40
10011336:	d1f6      	bne.n	10011326 <inv_check_magnetic_disturbance+0x12e>
10011338:	1c26      	adds	r6, r4, #0
1001133a:	9f01      	ldr	r7, [sp, #4]
1001133c:	3664      	adds	r6, #100	; 0x64
1001133e:	aa03      	add	r2, sp, #12
10011340:	1c38      	adds	r0, r7, #0
10011342:	1c31      	adds	r1, r6, #0
10011344:	f7ff fe88 	bl	10011058 <ComputeAngleVelocity>
10011348:	1c31      	adds	r1, r6, #0
1001134a:	1c38      	adds	r0, r7, #0
1001134c:	f7f9 fe5a 	bl	1000b004 <inv_q_invert>
10011350:	a806      	add	r0, sp, #24
10011352:	f7f9 fd77 	bl	1000ae44 <inv_get_gyro_sum_of_sqr>
10011356:	f001 fba5 	bl	10012aa4 <__aeabi_ui2f>
1001135a:	21f2      	movs	r1, #242	; 0xf2
1001135c:	0589      	lsls	r1, r1, #22
1001135e:	f001 f885 	bl	1001246c <__aeabi_fmul>
10011362:	1c29      	adds	r1, r5, #0
10011364:	f7ff ff20 	bl	100111a8 <MagDisturbCheckSettling>
10011368:	9800      	ldr	r0, [sp, #0]
1001136a:	4641      	mov	r1, r8
1001136c:	f7ff fede 	bl	1001112c <MagDisturbSetDisturbance>
10011370:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10011372:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10011374:	4293      	cmp	r3, r2
10011376:	da01      	bge.n	1001137c <inv_check_magnetic_disturbance+0x184>
10011378:	18eb      	adds	r3, r5, r3
1001137a:	67a3      	str	r3, [r4, #120]	; 0x78
1001137c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1001137e:	2800      	cmp	r0, #0
10011380:	d000      	beq.n	10011384 <inv_check_magnetic_disturbance+0x18c>
10011382:	e74a      	b.n	1001121a <inv_check_magnetic_disturbance+0x22>
10011384:	6e23      	ldr	r3, [r4, #96]	; 0x60
10011386:	469c      	mov	ip, r3
10011388:	23fa      	movs	r3, #250	; 0xfa
1001138a:	4465      	add	r5, ip
1001138c:	009b      	lsls	r3, r3, #2
1001138e:	429d      	cmp	r5, r3
10011390:	dc7e      	bgt.n	10011490 <inv_check_magnetic_disturbance+0x298>
10011392:	6625      	str	r5, [r4, #96]	; 0x60
10011394:	e741      	b.n	1001121a <inv_check_magnetic_disturbance+0x22>
10011396:	1c30      	adds	r0, r6, #0
10011398:	4954      	ldr	r1, [pc, #336]	; (100114ec <inv_check_magnetic_disturbance+0x2f4>)
1001139a:	f000 fc5d 	bl	10011c58 <__aeabi_fcmplt>
1001139e:	2800      	cmp	r0, #0
100113a0:	d093      	beq.n	100112ca <inv_check_magnetic_disturbance+0xd2>
100113a2:	4e52      	ldr	r6, [pc, #328]	; (100114ec <inv_check_magnetic_disturbance+0x2f4>)
100113a4:	e791      	b.n	100112ca <inv_check_magnetic_disturbance+0xd2>
100113a6:	a806      	add	r0, sp, #24
100113a8:	f7f9 fd4c 	bl	1000ae44 <inv_get_gyro_sum_of_sqr>
100113ac:	2390      	movs	r3, #144	; 0x90
100113ae:	33ff      	adds	r3, #255	; 0xff
100113b0:	0980      	lsrs	r0, r0, #6
100113b2:	4298      	cmp	r0, r3
100113b4:	d900      	bls.n	100113b8 <inv_check_magnetic_disturbance+0x1c0>
100113b6:	e74c      	b.n	10011252 <inv_check_magnetic_disturbance+0x5a>
100113b8:	59e3      	ldr	r3, [r4, r7]
100113ba:	e74d      	b.n	10011258 <inv_check_magnetic_disturbance+0x60>
100113bc:	1c23      	adds	r3, r4, #0
100113be:	1c32      	adds	r2, r6, #0
100113c0:	33ac      	adds	r3, #172	; 0xac
100113c2:	ca83      	ldmia	r2!, {r0, r1, r7}
100113c4:	c383      	stmia	r3!, {r0, r1, r7}
100113c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100113c8:	2b00      	cmp	r3, #0
100113ca:	d113      	bne.n	100113f4 <inv_check_magnetic_disturbance+0x1fc>
100113cc:	6873      	ldr	r3, [r6, #4]
100113ce:	2b00      	cmp	r3, #0
100113d0:	d110      	bne.n	100113f4 <inv_check_magnetic_disturbance+0x1fc>
100113d2:	68b3      	ldr	r3, [r6, #8]
100113d4:	4699      	mov	r9, r3
100113d6:	2b00      	cmp	r3, #0
100113d8:	d10c      	bne.n	100113f4 <inv_check_magnetic_disturbance+0x1fc>
100113da:	2698      	movs	r6, #152	; 0x98
100113dc:	4b44      	ldr	r3, [pc, #272]	; (100114f0 <inv_check_magnetic_disturbance+0x2f8>)
100113de:	6023      	str	r3, [r4, #0]
100113e0:	4b44      	ldr	r3, [pc, #272]	; (100114f4 <inv_check_magnetic_disturbance+0x2fc>)
100113e2:	6063      	str	r3, [r4, #4]
100113e4:	59a3      	ldr	r3, [r4, r6]
100113e6:	2b01      	cmp	r3, #1
100113e8:	d06b      	beq.n	100114c2 <inv_check_magnetic_disturbance+0x2ca>
100113ea:	4b43      	ldr	r3, [pc, #268]	; (100114f8 <inv_check_magnetic_disturbance+0x300>)
100113ec:	60a3      	str	r3, [r4, #8]
100113ee:	4b43      	ldr	r3, [pc, #268]	; (100114fc <inv_check_magnetic_disturbance+0x304>)
100113f0:	60e3      	str	r3, [r4, #12]
100113f2:	e78f      	b.n	10011314 <inv_check_magnetic_disturbance+0x11c>
100113f4:	1c30      	adds	r0, r6, #0
100113f6:	f7ff fe6d 	bl	100110d4 <Mag3ofNormalizedLong>
100113fa:	2100      	movs	r1, #0
100113fc:	4681      	mov	r9, r0
100113fe:	f000 fc25 	bl	10011c4c <__aeabi_fcmpeq>
10011402:	2800      	cmp	r0, #0
10011404:	d186      	bne.n	10011314 <inv_check_magnetic_disturbance+0x11c>
10011406:	4648      	mov	r0, r9
10011408:	493d      	ldr	r1, [pc, #244]	; (10011500 <inv_check_magnetic_disturbance+0x308>)
1001140a:	f001 f943 	bl	10012694 <__aeabi_fsub>
1001140e:	1c01      	adds	r1, r0, #0
10011410:	f001 f82c 	bl	1001246c <__aeabi_fmul>
10011414:	f7ff fca6 	bl	10010d64 <sqrtf>
10011418:	4939      	ldr	r1, [pc, #228]	; (10011500 <inv_check_magnetic_disturbance+0x308>)
1001141a:	6060      	str	r0, [r4, #4]
1001141c:	4648      	mov	r0, r9
1001141e:	f000 fce5 	bl	10011dec <__aeabi_fadd>
10011422:	1c01      	adds	r1, r0, #0
10011424:	f001 f822 	bl	1001246c <__aeabi_fmul>
10011428:	f7ff fc9c 	bl	10010d64 <sqrtf>
1001142c:	6020      	str	r0, [r4, #0]
1001142e:	68b0      	ldr	r0, [r6, #8]
10011430:	f001 faf0 	bl	10012a14 <__aeabi_i2f>
10011434:	21de      	movs	r1, #222	; 0xde
10011436:	0589      	lsls	r1, r1, #22
10011438:	f001 f818 	bl	1001246c <__aeabi_fmul>
1001143c:	4649      	mov	r1, r9
1001143e:	f000 fe4b 	bl	100120d8 <__aeabi_fdiv>
10011442:	21fe      	movs	r1, #254	; 0xfe
10011444:	0589      	lsls	r1, r1, #22
10011446:	4681      	mov	r9, r0
10011448:	f000 fc1a 	bl	10011c80 <__aeabi_fcmpgt>
1001144c:	2800      	cmp	r0, #0
1001144e:	d02f      	beq.n	100114b0 <inv_check_magnetic_disturbance+0x2b8>
10011450:	23fe      	movs	r3, #254	; 0xfe
10011452:	059b      	lsls	r3, r3, #22
10011454:	4699      	mov	r9, r3
10011456:	269c      	movs	r6, #156	; 0x9c
10011458:	4648      	mov	r0, r9
1001145a:	f000 f875 	bl	10011548 <acosf>
1001145e:	59a1      	ldr	r1, [r4, r6]
10011460:	f001 f918 	bl	10012694 <__aeabi_fsub>
10011464:	60a0      	str	r0, [r4, #8]
10011466:	4648      	mov	r0, r9
10011468:	f000 f86e 	bl	10011548 <acosf>
1001146c:	59a1      	ldr	r1, [r4, r6]
1001146e:	f000 fcbd 	bl	10011dec <__aeabi_fadd>
10011472:	2200      	movs	r2, #0
10011474:	238c      	movs	r3, #140	; 0x8c
10011476:	60e0      	str	r0, [r4, #12]
10011478:	50e2      	str	r2, [r4, r3]
1001147a:	e74b      	b.n	10011314 <inv_check_magnetic_disturbance+0x11c>
1001147c:	a806      	add	r0, sp, #24
1001147e:	f7f9 fcb9 	bl	1000adf4 <inv_get_gyro>
10011482:	e6da      	b.n	1001123a <inv_check_magnetic_disturbance+0x42>
10011484:	2390      	movs	r3, #144	; 0x90
10011486:	4641      	mov	r1, r8
10011488:	58e0      	ldr	r0, [r4, r3]
1001148a:	f7ff fd99 	bl	10010fc0 <inv_track_dip_angle>
1001148e:	e731      	b.n	100112f4 <inv_check_magnetic_disturbance+0xfc>
10011490:	6620      	str	r0, [r4, #96]	; 0x60
10011492:	1c21      	adds	r1, r4, #0
10011494:	1c20      	adds	r0, r4, #0
10011496:	3128      	adds	r1, #40	; 0x28
10011498:	2230      	movs	r2, #48	; 0x30
1001149a:	3018      	adds	r0, #24
1001149c:	f002 ffd6 	bl	1001444c <memmove>
100114a0:	1c20      	adds	r0, r4, #0
100114a2:	1c21      	adds	r1, r4, #0
100114a4:	3048      	adds	r0, #72	; 0x48
100114a6:	3158      	adds	r1, #88	; 0x58
100114a8:	f7f9 febe 	bl	1000b228 <inv_get_compass_correction>
100114ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
100114ae:	e6b4      	b.n	1001121a <inv_check_magnetic_disturbance+0x22>
100114b0:	4648      	mov	r0, r9
100114b2:	490e      	ldr	r1, [pc, #56]	; (100114ec <inv_check_magnetic_disturbance+0x2f4>)
100114b4:	f000 fbd0 	bl	10011c58 <__aeabi_fcmplt>
100114b8:	2800      	cmp	r0, #0
100114ba:	d0cc      	beq.n	10011456 <inv_check_magnetic_disturbance+0x25e>
100114bc:	4b0b      	ldr	r3, [pc, #44]	; (100114ec <inv_check_magnetic_disturbance+0x2f4>)
100114be:	4699      	mov	r9, r3
100114c0:	e7c9      	b.n	10011456 <inv_check_magnetic_disturbance+0x25e>
100114c2:	33a7      	adds	r3, #167	; 0xa7
100114c4:	58e3      	ldr	r3, [r4, r3]
100114c6:	469b      	mov	fp, r3
100114c8:	239c      	movs	r3, #156	; 0x9c
100114ca:	58e3      	ldr	r3, [r4, r3]
100114cc:	4658      	mov	r0, fp
100114ce:	1c19      	adds	r1, r3, #0
100114d0:	469a      	mov	sl, r3
100114d2:	f001 f8df 	bl	10012694 <__aeabi_fsub>
100114d6:	4651      	mov	r1, sl
100114d8:	60a0      	str	r0, [r4, #8]
100114da:	4658      	mov	r0, fp
100114dc:	f000 fc86 	bl	10011dec <__aeabi_fadd>
100114e0:	464b      	mov	r3, r9
100114e2:	60e0      	str	r0, [r4, #12]
100114e4:	51a3      	str	r3, [r4, r6]
100114e6:	e715      	b.n	10011314 <inv_check_magnetic_disturbance+0x11c>
100114e8:	10018fd0 	.word	0x10018fd0
100114ec:	bf800000 	.word	0xbf800000
100114f0:	42700000 	.word	0x42700000
100114f4:	41f00000 	.word	0x41f00000
100114f8:	c2b40000 	.word	0xc2b40000
100114fc:	42b40000 	.word	0x42b40000
10011500:	41200000 	.word	0x41200000

10011504 <inv_magnetic_disturbance_process>:
10011504:	b570      	push	{r4, r5, r6, lr}
10011506:	b088      	sub	sp, #32
10011508:	1c04      	adds	r4, r0, #0
1001150a:	a801      	add	r0, sp, #4
1001150c:	f7f9 feae 	bl	1000b26c <inv_get_gravity>
10011510:	22c4      	movs	r2, #196	; 0xc4
10011512:	23c0      	movs	r3, #192	; 0xc0
10011514:	58a5      	ldr	r5, [r4, r2]
10011516:	58e3      	ldr	r3, [r4, r3]
10011518:	a804      	add	r0, sp, #16
1001151a:	1b5d      	subs	r5, r3, r5
1001151c:	f7f9 fed0 	bl	1000b2c0 <inv_get_6axis_quaternion>
10011520:	1c22      	adds	r2, r4, #0
10011522:	1c06      	adds	r6, r0, #0
10011524:	32a0      	adds	r2, #160	; 0xa0
10011526:	a904      	add	r1, sp, #16
10011528:	ab01      	add	r3, sp, #4
1001152a:	1c28      	adds	r0, r5, #0
1001152c:	f7ff fe64 	bl	100111f8 <inv_check_magnetic_disturbance>
10011530:	f7f9 fba8 	bl	1000ac84 <inv_set_compass_disturbance>
10011534:	1c30      	adds	r0, r6, #0
10011536:	b008      	add	sp, #32
10011538:	bd70      	pop	{r4, r5, r6, pc}
1001153a:	46c0      	nop			; (mov r8, r8)

1001153c <inv_get_magnetic_disturbance_state>:
1001153c:	4b01      	ldr	r3, [pc, #4]	; (10011544 <inv_get_magnetic_disturbance_state+0x8>)
1001153e:	6f58      	ldr	r0, [r3, #116]	; 0x74
10011540:	4770      	bx	lr
10011542:	46c0      	nop			; (mov r8, r8)
10011544:	10018fd0 	.word	0x10018fd0

10011548 <acosf>:
10011548:	b5f0      	push	{r4, r5, r6, r7, lr}
1001154a:	b08d      	sub	sp, #52	; 0x34
1001154c:	1c04      	adds	r4, r0, #0
1001154e:	f000 f84f 	bl	100115f0 <__ieee754_acosf>
10011552:	2300      	movs	r3, #0
10011554:	4e23      	ldr	r6, [pc, #140]	; (100115e4 <acosf+0x9c>)
10011556:	1c05      	adds	r5, r0, #0
10011558:	56f3      	ldrsb	r3, [r6, r3]
1001155a:	3301      	adds	r3, #1
1001155c:	d031      	beq.n	100115c2 <acosf+0x7a>
1001155e:	1c21      	adds	r1, r4, #0
10011560:	1c20      	adds	r0, r4, #0
10011562:	f001 fa1d 	bl	100129a0 <__aeabi_fcmpun>
10011566:	1e07      	subs	r7, r0, #0
10011568:	d12b      	bne.n	100115c2 <acosf+0x7a>
1001156a:	1c20      	adds	r0, r4, #0
1001156c:	f7ff fcb0 	bl	10010ed0 <fabsf>
10011570:	21fe      	movs	r1, #254	; 0xfe
10011572:	0589      	lsls	r1, r1, #22
10011574:	f000 fb84 	bl	10011c80 <__aeabi_fcmpgt>
10011578:	2800      	cmp	r0, #0
1001157a:	d022      	beq.n	100115c2 <acosf+0x7a>
1001157c:	2301      	movs	r3, #1
1001157e:	9302      	str	r3, [sp, #8]
10011580:	4b19      	ldr	r3, [pc, #100]	; (100115e8 <acosf+0xa0>)
10011582:	1c20      	adds	r0, r4, #0
10011584:	9303      	str	r3, [sp, #12]
10011586:	970a      	str	r7, [sp, #40]	; 0x28
10011588:	f002 fd2a 	bl	10013fe0 <__aeabi_f2d>
1001158c:	9006      	str	r0, [sp, #24]
1001158e:	9107      	str	r1, [sp, #28]
10011590:	9004      	str	r0, [sp, #16]
10011592:	9105      	str	r1, [sp, #20]
10011594:	4815      	ldr	r0, [pc, #84]	; (100115ec <acosf+0xa4>)
10011596:	f7ff fc95 	bl	10010ec4 <nan>
1001159a:	2300      	movs	r3, #0
1001159c:	56f3      	ldrsb	r3, [r6, r3]
1001159e:	9008      	str	r0, [sp, #32]
100115a0:	9109      	str	r1, [sp, #36]	; 0x24
100115a2:	2b02      	cmp	r3, #2
100115a4:	d010      	beq.n	100115c8 <acosf+0x80>
100115a6:	a802      	add	r0, sp, #8
100115a8:	f7ff fc8a 	bl	10010ec0 <matherr>
100115ac:	2800      	cmp	r0, #0
100115ae:	d00b      	beq.n	100115c8 <acosf+0x80>
100115b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100115b2:	9301      	str	r3, [sp, #4]
100115b4:	2b00      	cmp	r3, #0
100115b6:	d10f      	bne.n	100115d8 <acosf+0x90>
100115b8:	9808      	ldr	r0, [sp, #32]
100115ba:	9909      	ldr	r1, [sp, #36]	; 0x24
100115bc:	f002 fd64 	bl	10014088 <__aeabi_d2f>
100115c0:	e000      	b.n	100115c4 <acosf+0x7c>
100115c2:	1c28      	adds	r0, r5, #0
100115c4:	b00d      	add	sp, #52	; 0x34
100115c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115c8:	f002 fef2 	bl	100143b0 <__errno>
100115cc:	2321      	movs	r3, #33	; 0x21
100115ce:	6003      	str	r3, [r0, #0]
100115d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100115d2:	9301      	str	r3, [sp, #4]
100115d4:	2b00      	cmp	r3, #0
100115d6:	d0ef      	beq.n	100115b8 <acosf+0x70>
100115d8:	f002 feea 	bl	100143b0 <__errno>
100115dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100115de:	9301      	str	r3, [sp, #4]
100115e0:	6003      	str	r3, [r0, #0]
100115e2:	e7e9      	b.n	100115b8 <acosf+0x70>
100115e4:	100175c4 	.word	0x100175c4
100115e8:	10017370 	.word	0x10017370
100115ec:	100159ec 	.word	0x100159ec

100115f0 <__ieee754_acosf>:
100115f0:	22fe      	movs	r2, #254	; 0xfe
100115f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100115f4:	0043      	lsls	r3, r0, #1
100115f6:	1c04      	adds	r4, r0, #0
100115f8:	085b      	lsrs	r3, r3, #1
100115fa:	0592      	lsls	r2, r2, #22
100115fc:	4293      	cmp	r3, r2
100115fe:	d011      	beq.n	10011624 <__ieee754_acosf+0x34>
10011600:	dc09      	bgt.n	10011616 <__ieee754_acosf+0x26>
10011602:	4a9d      	ldr	r2, [pc, #628]	; (10011878 <__ieee754_acosf+0x288>)
10011604:	4293      	cmp	r3, r2
10011606:	dc12      	bgt.n	1001162e <__ieee754_acosf+0x3e>
10011608:	228c      	movs	r2, #140	; 0x8c
1001160a:	0592      	lsls	r2, r2, #22
1001160c:	4293      	cmp	r3, r2
1001160e:	dd00      	ble.n	10011612 <__ieee754_acosf+0x22>
10011610:	e080      	b.n	10011714 <__ieee754_acosf+0x124>
10011612:	489a      	ldr	r0, [pc, #616]	; (1001187c <__ieee754_acosf+0x28c>)
10011614:	e005      	b.n	10011622 <__ieee754_acosf+0x32>
10011616:	1c01      	adds	r1, r0, #0
10011618:	f001 f83c 	bl	10012694 <__aeabi_fsub>
1001161c:	1c01      	adds	r1, r0, #0
1001161e:	f000 fd5b 	bl	100120d8 <__aeabi_fdiv>
10011622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011624:	2000      	movs	r0, #0
10011626:	2c00      	cmp	r4, #0
10011628:	dcfb      	bgt.n	10011622 <__ieee754_acosf+0x32>
1001162a:	4895      	ldr	r0, [pc, #596]	; (10011880 <__ieee754_acosf+0x290>)
1001162c:	e7f9      	b.n	10011622 <__ieee754_acosf+0x32>
1001162e:	2800      	cmp	r0, #0
10011630:	da00      	bge.n	10011634 <__ieee754_acosf+0x44>
10011632:	e0c3      	b.n	100117bc <__ieee754_acosf+0x1cc>
10011634:	1c01      	adds	r1, r0, #0
10011636:	20fe      	movs	r0, #254	; 0xfe
10011638:	0580      	lsls	r0, r0, #22
1001163a:	f001 f82b 	bl	10012694 <__aeabi_fsub>
1001163e:	21fc      	movs	r1, #252	; 0xfc
10011640:	0589      	lsls	r1, r1, #22
10011642:	f000 ff13 	bl	1001246c <__aeabi_fmul>
10011646:	1c04      	adds	r4, r0, #0
10011648:	f7ff fbde 	bl	10010e08 <__ieee754_sqrtf>
1001164c:	498d      	ldr	r1, [pc, #564]	; (10011884 <__ieee754_acosf+0x294>)
1001164e:	1c06      	adds	r6, r0, #0
10011650:	0b05      	lsrs	r5, r0, #12
10011652:	1c20      	adds	r0, r4, #0
10011654:	f000 ff0a 	bl	1001246c <__aeabi_fmul>
10011658:	498b      	ldr	r1, [pc, #556]	; (10011888 <__ieee754_acosf+0x298>)
1001165a:	f000 fbc7 	bl	10011dec <__aeabi_fadd>
1001165e:	1c21      	adds	r1, r4, #0
10011660:	f000 ff04 	bl	1001246c <__aeabi_fmul>
10011664:	4989      	ldr	r1, [pc, #548]	; (1001188c <__ieee754_acosf+0x29c>)
10011666:	f001 f815 	bl	10012694 <__aeabi_fsub>
1001166a:	1c21      	adds	r1, r4, #0
1001166c:	f000 fefe 	bl	1001246c <__aeabi_fmul>
10011670:	4987      	ldr	r1, [pc, #540]	; (10011890 <__ieee754_acosf+0x2a0>)
10011672:	f000 fbbb 	bl	10011dec <__aeabi_fadd>
10011676:	1c21      	adds	r1, r4, #0
10011678:	f000 fef8 	bl	1001246c <__aeabi_fmul>
1001167c:	4985      	ldr	r1, [pc, #532]	; (10011894 <__ieee754_acosf+0x2a4>)
1001167e:	f001 f809 	bl	10012694 <__aeabi_fsub>
10011682:	1c21      	adds	r1, r4, #0
10011684:	f000 fef2 	bl	1001246c <__aeabi_fmul>
10011688:	4983      	ldr	r1, [pc, #524]	; (10011898 <__ieee754_acosf+0x2a8>)
1001168a:	f000 fbaf 	bl	10011dec <__aeabi_fadd>
1001168e:	1c21      	adds	r1, r4, #0
10011690:	f000 feec 	bl	1001246c <__aeabi_fmul>
10011694:	4981      	ldr	r1, [pc, #516]	; (1001189c <__ieee754_acosf+0x2ac>)
10011696:	1c07      	adds	r7, r0, #0
10011698:	1c20      	adds	r0, r4, #0
1001169a:	f000 fee7 	bl	1001246c <__aeabi_fmul>
1001169e:	4980      	ldr	r1, [pc, #512]	; (100118a0 <__ieee754_acosf+0x2b0>)
100116a0:	f000 fff8 	bl	10012694 <__aeabi_fsub>
100116a4:	1c21      	adds	r1, r4, #0
100116a6:	f000 fee1 	bl	1001246c <__aeabi_fmul>
100116aa:	497e      	ldr	r1, [pc, #504]	; (100118a4 <__ieee754_acosf+0x2b4>)
100116ac:	f000 fb9e 	bl	10011dec <__aeabi_fadd>
100116b0:	1c21      	adds	r1, r4, #0
100116b2:	f000 fedb 	bl	1001246c <__aeabi_fmul>
100116b6:	497c      	ldr	r1, [pc, #496]	; (100118a8 <__ieee754_acosf+0x2b8>)
100116b8:	f000 ffec 	bl	10012694 <__aeabi_fsub>
100116bc:	1c21      	adds	r1, r4, #0
100116be:	f000 fed5 	bl	1001246c <__aeabi_fmul>
100116c2:	21fe      	movs	r1, #254	; 0xfe
100116c4:	0589      	lsls	r1, r1, #22
100116c6:	f000 fb91 	bl	10011dec <__aeabi_fadd>
100116ca:	1c01      	adds	r1, r0, #0
100116cc:	1c38      	adds	r0, r7, #0
100116ce:	f000 fd03 	bl	100120d8 <__aeabi_fdiv>
100116d2:	1c31      	adds	r1, r6, #0
100116d4:	f000 feca 	bl	1001246c <__aeabi_fmul>
100116d8:	032d      	lsls	r5, r5, #12
100116da:	1c07      	adds	r7, r0, #0
100116dc:	1c29      	adds	r1, r5, #0
100116de:	1c28      	adds	r0, r5, #0
100116e0:	f000 fec4 	bl	1001246c <__aeabi_fmul>
100116e4:	1c01      	adds	r1, r0, #0
100116e6:	1c20      	adds	r0, r4, #0
100116e8:	f000 ffd4 	bl	10012694 <__aeabi_fsub>
100116ec:	1c29      	adds	r1, r5, #0
100116ee:	1c04      	adds	r4, r0, #0
100116f0:	1c30      	adds	r0, r6, #0
100116f2:	f000 fb7b 	bl	10011dec <__aeabi_fadd>
100116f6:	1c01      	adds	r1, r0, #0
100116f8:	1c20      	adds	r0, r4, #0
100116fa:	f000 fced 	bl	100120d8 <__aeabi_fdiv>
100116fe:	1c01      	adds	r1, r0, #0
10011700:	1c38      	adds	r0, r7, #0
10011702:	f000 fb73 	bl	10011dec <__aeabi_fadd>
10011706:	1c29      	adds	r1, r5, #0
10011708:	f000 fb70 	bl	10011dec <__aeabi_fadd>
1001170c:	1c01      	adds	r1, r0, #0
1001170e:	f000 fb6d 	bl	10011dec <__aeabi_fadd>
10011712:	e786      	b.n	10011622 <__ieee754_acosf+0x32>
10011714:	1c01      	adds	r1, r0, #0
10011716:	f000 fea9 	bl	1001246c <__aeabi_fmul>
1001171a:	495a      	ldr	r1, [pc, #360]	; (10011884 <__ieee754_acosf+0x294>)
1001171c:	1c05      	adds	r5, r0, #0
1001171e:	f000 fea5 	bl	1001246c <__aeabi_fmul>
10011722:	4959      	ldr	r1, [pc, #356]	; (10011888 <__ieee754_acosf+0x298>)
10011724:	f000 fb62 	bl	10011dec <__aeabi_fadd>
10011728:	1c29      	adds	r1, r5, #0
1001172a:	f000 fe9f 	bl	1001246c <__aeabi_fmul>
1001172e:	4957      	ldr	r1, [pc, #348]	; (1001188c <__ieee754_acosf+0x29c>)
10011730:	f000 ffb0 	bl	10012694 <__aeabi_fsub>
10011734:	1c29      	adds	r1, r5, #0
10011736:	f000 fe99 	bl	1001246c <__aeabi_fmul>
1001173a:	4955      	ldr	r1, [pc, #340]	; (10011890 <__ieee754_acosf+0x2a0>)
1001173c:	f000 fb56 	bl	10011dec <__aeabi_fadd>
10011740:	1c29      	adds	r1, r5, #0
10011742:	f000 fe93 	bl	1001246c <__aeabi_fmul>
10011746:	4953      	ldr	r1, [pc, #332]	; (10011894 <__ieee754_acosf+0x2a4>)
10011748:	f000 ffa4 	bl	10012694 <__aeabi_fsub>
1001174c:	1c29      	adds	r1, r5, #0
1001174e:	f000 fe8d 	bl	1001246c <__aeabi_fmul>
10011752:	4951      	ldr	r1, [pc, #324]	; (10011898 <__ieee754_acosf+0x2a8>)
10011754:	f000 fb4a 	bl	10011dec <__aeabi_fadd>
10011758:	1c29      	adds	r1, r5, #0
1001175a:	f000 fe87 	bl	1001246c <__aeabi_fmul>
1001175e:	494f      	ldr	r1, [pc, #316]	; (1001189c <__ieee754_acosf+0x2ac>)
10011760:	1c06      	adds	r6, r0, #0
10011762:	1c28      	adds	r0, r5, #0
10011764:	f000 fe82 	bl	1001246c <__aeabi_fmul>
10011768:	494d      	ldr	r1, [pc, #308]	; (100118a0 <__ieee754_acosf+0x2b0>)
1001176a:	f000 ff93 	bl	10012694 <__aeabi_fsub>
1001176e:	1c29      	adds	r1, r5, #0
10011770:	f000 fe7c 	bl	1001246c <__aeabi_fmul>
10011774:	494b      	ldr	r1, [pc, #300]	; (100118a4 <__ieee754_acosf+0x2b4>)
10011776:	f000 fb39 	bl	10011dec <__aeabi_fadd>
1001177a:	1c29      	adds	r1, r5, #0
1001177c:	f000 fe76 	bl	1001246c <__aeabi_fmul>
10011780:	4949      	ldr	r1, [pc, #292]	; (100118a8 <__ieee754_acosf+0x2b8>)
10011782:	f000 ff87 	bl	10012694 <__aeabi_fsub>
10011786:	1c29      	adds	r1, r5, #0
10011788:	f000 fe70 	bl	1001246c <__aeabi_fmul>
1001178c:	21fe      	movs	r1, #254	; 0xfe
1001178e:	0589      	lsls	r1, r1, #22
10011790:	f000 fb2c 	bl	10011dec <__aeabi_fadd>
10011794:	1c01      	adds	r1, r0, #0
10011796:	1c30      	adds	r0, r6, #0
10011798:	f000 fc9e 	bl	100120d8 <__aeabi_fdiv>
1001179c:	1c21      	adds	r1, r4, #0
1001179e:	f000 fe65 	bl	1001246c <__aeabi_fmul>
100117a2:	1c01      	adds	r1, r0, #0
100117a4:	4841      	ldr	r0, [pc, #260]	; (100118ac <__ieee754_acosf+0x2bc>)
100117a6:	f000 ff75 	bl	10012694 <__aeabi_fsub>
100117aa:	1c01      	adds	r1, r0, #0
100117ac:	1c20      	adds	r0, r4, #0
100117ae:	f000 ff71 	bl	10012694 <__aeabi_fsub>
100117b2:	1c01      	adds	r1, r0, #0
100117b4:	483e      	ldr	r0, [pc, #248]	; (100118b0 <__ieee754_acosf+0x2c0>)
100117b6:	f000 ff6d 	bl	10012694 <__aeabi_fsub>
100117ba:	e732      	b.n	10011622 <__ieee754_acosf+0x32>
100117bc:	21fe      	movs	r1, #254	; 0xfe
100117be:	0589      	lsls	r1, r1, #22
100117c0:	f000 fb14 	bl	10011dec <__aeabi_fadd>
100117c4:	21fc      	movs	r1, #252	; 0xfc
100117c6:	0589      	lsls	r1, r1, #22
100117c8:	f000 fe50 	bl	1001246c <__aeabi_fmul>
100117cc:	492d      	ldr	r1, [pc, #180]	; (10011884 <__ieee754_acosf+0x294>)
100117ce:	1c04      	adds	r4, r0, #0
100117d0:	f000 fe4c 	bl	1001246c <__aeabi_fmul>
100117d4:	492c      	ldr	r1, [pc, #176]	; (10011888 <__ieee754_acosf+0x298>)
100117d6:	f000 fb09 	bl	10011dec <__aeabi_fadd>
100117da:	1c21      	adds	r1, r4, #0
100117dc:	f000 fe46 	bl	1001246c <__aeabi_fmul>
100117e0:	492a      	ldr	r1, [pc, #168]	; (1001188c <__ieee754_acosf+0x29c>)
100117e2:	f000 ff57 	bl	10012694 <__aeabi_fsub>
100117e6:	1c21      	adds	r1, r4, #0
100117e8:	f000 fe40 	bl	1001246c <__aeabi_fmul>
100117ec:	4928      	ldr	r1, [pc, #160]	; (10011890 <__ieee754_acosf+0x2a0>)
100117ee:	f000 fafd 	bl	10011dec <__aeabi_fadd>
100117f2:	1c21      	adds	r1, r4, #0
100117f4:	f000 fe3a 	bl	1001246c <__aeabi_fmul>
100117f8:	4926      	ldr	r1, [pc, #152]	; (10011894 <__ieee754_acosf+0x2a4>)
100117fa:	f000 ff4b 	bl	10012694 <__aeabi_fsub>
100117fe:	1c21      	adds	r1, r4, #0
10011800:	f000 fe34 	bl	1001246c <__aeabi_fmul>
10011804:	4924      	ldr	r1, [pc, #144]	; (10011898 <__ieee754_acosf+0x2a8>)
10011806:	f000 faf1 	bl	10011dec <__aeabi_fadd>
1001180a:	1c21      	adds	r1, r4, #0
1001180c:	f000 fe2e 	bl	1001246c <__aeabi_fmul>
10011810:	1c06      	adds	r6, r0, #0
10011812:	1c20      	adds	r0, r4, #0
10011814:	f7ff faf8 	bl	10010e08 <__ieee754_sqrtf>
10011818:	4920      	ldr	r1, [pc, #128]	; (1001189c <__ieee754_acosf+0x2ac>)
1001181a:	1c05      	adds	r5, r0, #0
1001181c:	1c20      	adds	r0, r4, #0
1001181e:	f000 fe25 	bl	1001246c <__aeabi_fmul>
10011822:	491f      	ldr	r1, [pc, #124]	; (100118a0 <__ieee754_acosf+0x2b0>)
10011824:	f000 ff36 	bl	10012694 <__aeabi_fsub>
10011828:	1c21      	adds	r1, r4, #0
1001182a:	f000 fe1f 	bl	1001246c <__aeabi_fmul>
1001182e:	491d      	ldr	r1, [pc, #116]	; (100118a4 <__ieee754_acosf+0x2b4>)
10011830:	f000 fadc 	bl	10011dec <__aeabi_fadd>
10011834:	1c21      	adds	r1, r4, #0
10011836:	f000 fe19 	bl	1001246c <__aeabi_fmul>
1001183a:	491b      	ldr	r1, [pc, #108]	; (100118a8 <__ieee754_acosf+0x2b8>)
1001183c:	f000 ff2a 	bl	10012694 <__aeabi_fsub>
10011840:	1c21      	adds	r1, r4, #0
10011842:	f000 fe13 	bl	1001246c <__aeabi_fmul>
10011846:	21fe      	movs	r1, #254	; 0xfe
10011848:	0589      	lsls	r1, r1, #22
1001184a:	f000 facf 	bl	10011dec <__aeabi_fadd>
1001184e:	1c01      	adds	r1, r0, #0
10011850:	1c30      	adds	r0, r6, #0
10011852:	f000 fc41 	bl	100120d8 <__aeabi_fdiv>
10011856:	1c29      	adds	r1, r5, #0
10011858:	f000 fe08 	bl	1001246c <__aeabi_fmul>
1001185c:	4913      	ldr	r1, [pc, #76]	; (100118ac <__ieee754_acosf+0x2bc>)
1001185e:	f000 ff19 	bl	10012694 <__aeabi_fsub>
10011862:	1c29      	adds	r1, r5, #0
10011864:	f000 fac2 	bl	10011dec <__aeabi_fadd>
10011868:	1c01      	adds	r1, r0, #0
1001186a:	f000 fabf 	bl	10011dec <__aeabi_fadd>
1001186e:	1c01      	adds	r1, r0, #0
10011870:	4810      	ldr	r0, [pc, #64]	; (100118b4 <__ieee754_acosf+0x2c4>)
10011872:	f000 ff0f 	bl	10012694 <__aeabi_fsub>
10011876:	e6d4      	b.n	10011622 <__ieee754_acosf+0x32>
10011878:	3effffff 	.word	0x3effffff
1001187c:	3fc90fdb 	.word	0x3fc90fdb
10011880:	40490fdb 	.word	0x40490fdb
10011884:	3811ef08 	.word	0x3811ef08
10011888:	3a4f7f04 	.word	0x3a4f7f04
1001188c:	3d241146 	.word	0x3d241146
10011890:	3e4e0aa8 	.word	0x3e4e0aa8
10011894:	3ea6b090 	.word	0x3ea6b090
10011898:	3e2aaaab 	.word	0x3e2aaaab
1001189c:	3d9dc62e 	.word	0x3d9dc62e
100118a0:	3f303361 	.word	0x3f303361
100118a4:	4001572d 	.word	0x4001572d
100118a8:	4019d139 	.word	0x4019d139
100118ac:	33a22168 	.word	0x33a22168
100118b0:	3fc90fda 	.word	0x3fc90fda
100118b4:	40490fda 	.word	0x40490fda

100118b8 <__gnu_thumb1_case_uqi>:
100118b8:	b402      	push	{r1}
100118ba:	4671      	mov	r1, lr
100118bc:	0849      	lsrs	r1, r1, #1
100118be:	0049      	lsls	r1, r1, #1
100118c0:	5c09      	ldrb	r1, [r1, r0]
100118c2:	0049      	lsls	r1, r1, #1
100118c4:	448e      	add	lr, r1
100118c6:	bc02      	pop	{r1}
100118c8:	4770      	bx	lr
100118ca:	46c0      	nop			; (mov r8, r8)

100118cc <__aeabi_uidiv>:
100118cc:	2200      	movs	r2, #0
100118ce:	0843      	lsrs	r3, r0, #1
100118d0:	428b      	cmp	r3, r1
100118d2:	d374      	bcc.n	100119be <__aeabi_uidiv+0xf2>
100118d4:	0903      	lsrs	r3, r0, #4
100118d6:	428b      	cmp	r3, r1
100118d8:	d35f      	bcc.n	1001199a <__aeabi_uidiv+0xce>
100118da:	0a03      	lsrs	r3, r0, #8
100118dc:	428b      	cmp	r3, r1
100118de:	d344      	bcc.n	1001196a <__aeabi_uidiv+0x9e>
100118e0:	0b03      	lsrs	r3, r0, #12
100118e2:	428b      	cmp	r3, r1
100118e4:	d328      	bcc.n	10011938 <__aeabi_uidiv+0x6c>
100118e6:	0c03      	lsrs	r3, r0, #16
100118e8:	428b      	cmp	r3, r1
100118ea:	d30d      	bcc.n	10011908 <__aeabi_uidiv+0x3c>
100118ec:	22ff      	movs	r2, #255	; 0xff
100118ee:	0209      	lsls	r1, r1, #8
100118f0:	ba12      	rev	r2, r2
100118f2:	0c03      	lsrs	r3, r0, #16
100118f4:	428b      	cmp	r3, r1
100118f6:	d302      	bcc.n	100118fe <__aeabi_uidiv+0x32>
100118f8:	1212      	asrs	r2, r2, #8
100118fa:	0209      	lsls	r1, r1, #8
100118fc:	d065      	beq.n	100119ca <__aeabi_uidiv+0xfe>
100118fe:	0b03      	lsrs	r3, r0, #12
10011900:	428b      	cmp	r3, r1
10011902:	d319      	bcc.n	10011938 <__aeabi_uidiv+0x6c>
10011904:	e000      	b.n	10011908 <__aeabi_uidiv+0x3c>
10011906:	0a09      	lsrs	r1, r1, #8
10011908:	0bc3      	lsrs	r3, r0, #15
1001190a:	428b      	cmp	r3, r1
1001190c:	d301      	bcc.n	10011912 <__aeabi_uidiv+0x46>
1001190e:	03cb      	lsls	r3, r1, #15
10011910:	1ac0      	subs	r0, r0, r3
10011912:	4152      	adcs	r2, r2
10011914:	0b83      	lsrs	r3, r0, #14
10011916:	428b      	cmp	r3, r1
10011918:	d301      	bcc.n	1001191e <__aeabi_uidiv+0x52>
1001191a:	038b      	lsls	r3, r1, #14
1001191c:	1ac0      	subs	r0, r0, r3
1001191e:	4152      	adcs	r2, r2
10011920:	0b43      	lsrs	r3, r0, #13
10011922:	428b      	cmp	r3, r1
10011924:	d301      	bcc.n	1001192a <__aeabi_uidiv+0x5e>
10011926:	034b      	lsls	r3, r1, #13
10011928:	1ac0      	subs	r0, r0, r3
1001192a:	4152      	adcs	r2, r2
1001192c:	0b03      	lsrs	r3, r0, #12
1001192e:	428b      	cmp	r3, r1
10011930:	d301      	bcc.n	10011936 <__aeabi_uidiv+0x6a>
10011932:	030b      	lsls	r3, r1, #12
10011934:	1ac0      	subs	r0, r0, r3
10011936:	4152      	adcs	r2, r2
10011938:	0ac3      	lsrs	r3, r0, #11
1001193a:	428b      	cmp	r3, r1
1001193c:	d301      	bcc.n	10011942 <__aeabi_uidiv+0x76>
1001193e:	02cb      	lsls	r3, r1, #11
10011940:	1ac0      	subs	r0, r0, r3
10011942:	4152      	adcs	r2, r2
10011944:	0a83      	lsrs	r3, r0, #10
10011946:	428b      	cmp	r3, r1
10011948:	d301      	bcc.n	1001194e <__aeabi_uidiv+0x82>
1001194a:	028b      	lsls	r3, r1, #10
1001194c:	1ac0      	subs	r0, r0, r3
1001194e:	4152      	adcs	r2, r2
10011950:	0a43      	lsrs	r3, r0, #9
10011952:	428b      	cmp	r3, r1
10011954:	d301      	bcc.n	1001195a <__aeabi_uidiv+0x8e>
10011956:	024b      	lsls	r3, r1, #9
10011958:	1ac0      	subs	r0, r0, r3
1001195a:	4152      	adcs	r2, r2
1001195c:	0a03      	lsrs	r3, r0, #8
1001195e:	428b      	cmp	r3, r1
10011960:	d301      	bcc.n	10011966 <__aeabi_uidiv+0x9a>
10011962:	020b      	lsls	r3, r1, #8
10011964:	1ac0      	subs	r0, r0, r3
10011966:	4152      	adcs	r2, r2
10011968:	d2cd      	bcs.n	10011906 <__aeabi_uidiv+0x3a>
1001196a:	09c3      	lsrs	r3, r0, #7
1001196c:	428b      	cmp	r3, r1
1001196e:	d301      	bcc.n	10011974 <__aeabi_uidiv+0xa8>
10011970:	01cb      	lsls	r3, r1, #7
10011972:	1ac0      	subs	r0, r0, r3
10011974:	4152      	adcs	r2, r2
10011976:	0983      	lsrs	r3, r0, #6
10011978:	428b      	cmp	r3, r1
1001197a:	d301      	bcc.n	10011980 <__aeabi_uidiv+0xb4>
1001197c:	018b      	lsls	r3, r1, #6
1001197e:	1ac0      	subs	r0, r0, r3
10011980:	4152      	adcs	r2, r2
10011982:	0943      	lsrs	r3, r0, #5
10011984:	428b      	cmp	r3, r1
10011986:	d301      	bcc.n	1001198c <__aeabi_uidiv+0xc0>
10011988:	014b      	lsls	r3, r1, #5
1001198a:	1ac0      	subs	r0, r0, r3
1001198c:	4152      	adcs	r2, r2
1001198e:	0903      	lsrs	r3, r0, #4
10011990:	428b      	cmp	r3, r1
10011992:	d301      	bcc.n	10011998 <__aeabi_uidiv+0xcc>
10011994:	010b      	lsls	r3, r1, #4
10011996:	1ac0      	subs	r0, r0, r3
10011998:	4152      	adcs	r2, r2
1001199a:	08c3      	lsrs	r3, r0, #3
1001199c:	428b      	cmp	r3, r1
1001199e:	d301      	bcc.n	100119a4 <__aeabi_uidiv+0xd8>
100119a0:	00cb      	lsls	r3, r1, #3
100119a2:	1ac0      	subs	r0, r0, r3
100119a4:	4152      	adcs	r2, r2
100119a6:	0883      	lsrs	r3, r0, #2
100119a8:	428b      	cmp	r3, r1
100119aa:	d301      	bcc.n	100119b0 <__aeabi_uidiv+0xe4>
100119ac:	008b      	lsls	r3, r1, #2
100119ae:	1ac0      	subs	r0, r0, r3
100119b0:	4152      	adcs	r2, r2
100119b2:	0843      	lsrs	r3, r0, #1
100119b4:	428b      	cmp	r3, r1
100119b6:	d301      	bcc.n	100119bc <__aeabi_uidiv+0xf0>
100119b8:	004b      	lsls	r3, r1, #1
100119ba:	1ac0      	subs	r0, r0, r3
100119bc:	4152      	adcs	r2, r2
100119be:	1a41      	subs	r1, r0, r1
100119c0:	d200      	bcs.n	100119c4 <__aeabi_uidiv+0xf8>
100119c2:	4601      	mov	r1, r0
100119c4:	4152      	adcs	r2, r2
100119c6:	4610      	mov	r0, r2
100119c8:	4770      	bx	lr
100119ca:	e7ff      	b.n	100119cc <__aeabi_uidiv+0x100>
100119cc:	b501      	push	{r0, lr}
100119ce:	2000      	movs	r0, #0
100119d0:	f000 f8f0 	bl	10011bb4 <__aeabi_idiv0>
100119d4:	bd02      	pop	{r1, pc}
100119d6:	46c0      	nop			; (mov r8, r8)

100119d8 <__aeabi_uidivmod>:
100119d8:	2900      	cmp	r1, #0
100119da:	d0f7      	beq.n	100119cc <__aeabi_uidiv+0x100>
100119dc:	e776      	b.n	100118cc <__aeabi_uidiv>
100119de:	4770      	bx	lr

100119e0 <__aeabi_idiv>:
100119e0:	4603      	mov	r3, r0
100119e2:	430b      	orrs	r3, r1
100119e4:	d47f      	bmi.n	10011ae6 <__aeabi_idiv+0x106>
100119e6:	2200      	movs	r2, #0
100119e8:	0843      	lsrs	r3, r0, #1
100119ea:	428b      	cmp	r3, r1
100119ec:	d374      	bcc.n	10011ad8 <__aeabi_idiv+0xf8>
100119ee:	0903      	lsrs	r3, r0, #4
100119f0:	428b      	cmp	r3, r1
100119f2:	d35f      	bcc.n	10011ab4 <__aeabi_idiv+0xd4>
100119f4:	0a03      	lsrs	r3, r0, #8
100119f6:	428b      	cmp	r3, r1
100119f8:	d344      	bcc.n	10011a84 <__aeabi_idiv+0xa4>
100119fa:	0b03      	lsrs	r3, r0, #12
100119fc:	428b      	cmp	r3, r1
100119fe:	d328      	bcc.n	10011a52 <__aeabi_idiv+0x72>
10011a00:	0c03      	lsrs	r3, r0, #16
10011a02:	428b      	cmp	r3, r1
10011a04:	d30d      	bcc.n	10011a22 <__aeabi_idiv+0x42>
10011a06:	22ff      	movs	r2, #255	; 0xff
10011a08:	0209      	lsls	r1, r1, #8
10011a0a:	ba12      	rev	r2, r2
10011a0c:	0c03      	lsrs	r3, r0, #16
10011a0e:	428b      	cmp	r3, r1
10011a10:	d302      	bcc.n	10011a18 <__aeabi_idiv+0x38>
10011a12:	1212      	asrs	r2, r2, #8
10011a14:	0209      	lsls	r1, r1, #8
10011a16:	d065      	beq.n	10011ae4 <__aeabi_idiv+0x104>
10011a18:	0b03      	lsrs	r3, r0, #12
10011a1a:	428b      	cmp	r3, r1
10011a1c:	d319      	bcc.n	10011a52 <__aeabi_idiv+0x72>
10011a1e:	e000      	b.n	10011a22 <__aeabi_idiv+0x42>
10011a20:	0a09      	lsrs	r1, r1, #8
10011a22:	0bc3      	lsrs	r3, r0, #15
10011a24:	428b      	cmp	r3, r1
10011a26:	d301      	bcc.n	10011a2c <__aeabi_idiv+0x4c>
10011a28:	03cb      	lsls	r3, r1, #15
10011a2a:	1ac0      	subs	r0, r0, r3
10011a2c:	4152      	adcs	r2, r2
10011a2e:	0b83      	lsrs	r3, r0, #14
10011a30:	428b      	cmp	r3, r1
10011a32:	d301      	bcc.n	10011a38 <__aeabi_idiv+0x58>
10011a34:	038b      	lsls	r3, r1, #14
10011a36:	1ac0      	subs	r0, r0, r3
10011a38:	4152      	adcs	r2, r2
10011a3a:	0b43      	lsrs	r3, r0, #13
10011a3c:	428b      	cmp	r3, r1
10011a3e:	d301      	bcc.n	10011a44 <__aeabi_idiv+0x64>
10011a40:	034b      	lsls	r3, r1, #13
10011a42:	1ac0      	subs	r0, r0, r3
10011a44:	4152      	adcs	r2, r2
10011a46:	0b03      	lsrs	r3, r0, #12
10011a48:	428b      	cmp	r3, r1
10011a4a:	d301      	bcc.n	10011a50 <__aeabi_idiv+0x70>
10011a4c:	030b      	lsls	r3, r1, #12
10011a4e:	1ac0      	subs	r0, r0, r3
10011a50:	4152      	adcs	r2, r2
10011a52:	0ac3      	lsrs	r3, r0, #11
10011a54:	428b      	cmp	r3, r1
10011a56:	d301      	bcc.n	10011a5c <__aeabi_idiv+0x7c>
10011a58:	02cb      	lsls	r3, r1, #11
10011a5a:	1ac0      	subs	r0, r0, r3
10011a5c:	4152      	adcs	r2, r2
10011a5e:	0a83      	lsrs	r3, r0, #10
10011a60:	428b      	cmp	r3, r1
10011a62:	d301      	bcc.n	10011a68 <__aeabi_idiv+0x88>
10011a64:	028b      	lsls	r3, r1, #10
10011a66:	1ac0      	subs	r0, r0, r3
10011a68:	4152      	adcs	r2, r2
10011a6a:	0a43      	lsrs	r3, r0, #9
10011a6c:	428b      	cmp	r3, r1
10011a6e:	d301      	bcc.n	10011a74 <__aeabi_idiv+0x94>
10011a70:	024b      	lsls	r3, r1, #9
10011a72:	1ac0      	subs	r0, r0, r3
10011a74:	4152      	adcs	r2, r2
10011a76:	0a03      	lsrs	r3, r0, #8
10011a78:	428b      	cmp	r3, r1
10011a7a:	d301      	bcc.n	10011a80 <__aeabi_idiv+0xa0>
10011a7c:	020b      	lsls	r3, r1, #8
10011a7e:	1ac0      	subs	r0, r0, r3
10011a80:	4152      	adcs	r2, r2
10011a82:	d2cd      	bcs.n	10011a20 <__aeabi_idiv+0x40>
10011a84:	09c3      	lsrs	r3, r0, #7
10011a86:	428b      	cmp	r3, r1
10011a88:	d301      	bcc.n	10011a8e <__aeabi_idiv+0xae>
10011a8a:	01cb      	lsls	r3, r1, #7
10011a8c:	1ac0      	subs	r0, r0, r3
10011a8e:	4152      	adcs	r2, r2
10011a90:	0983      	lsrs	r3, r0, #6
10011a92:	428b      	cmp	r3, r1
10011a94:	d301      	bcc.n	10011a9a <__aeabi_idiv+0xba>
10011a96:	018b      	lsls	r3, r1, #6
10011a98:	1ac0      	subs	r0, r0, r3
10011a9a:	4152      	adcs	r2, r2
10011a9c:	0943      	lsrs	r3, r0, #5
10011a9e:	428b      	cmp	r3, r1
10011aa0:	d301      	bcc.n	10011aa6 <__aeabi_idiv+0xc6>
10011aa2:	014b      	lsls	r3, r1, #5
10011aa4:	1ac0      	subs	r0, r0, r3
10011aa6:	4152      	adcs	r2, r2
10011aa8:	0903      	lsrs	r3, r0, #4
10011aaa:	428b      	cmp	r3, r1
10011aac:	d301      	bcc.n	10011ab2 <__aeabi_idiv+0xd2>
10011aae:	010b      	lsls	r3, r1, #4
10011ab0:	1ac0      	subs	r0, r0, r3
10011ab2:	4152      	adcs	r2, r2
10011ab4:	08c3      	lsrs	r3, r0, #3
10011ab6:	428b      	cmp	r3, r1
10011ab8:	d301      	bcc.n	10011abe <__aeabi_idiv+0xde>
10011aba:	00cb      	lsls	r3, r1, #3
10011abc:	1ac0      	subs	r0, r0, r3
10011abe:	4152      	adcs	r2, r2
10011ac0:	0883      	lsrs	r3, r0, #2
10011ac2:	428b      	cmp	r3, r1
10011ac4:	d301      	bcc.n	10011aca <__aeabi_idiv+0xea>
10011ac6:	008b      	lsls	r3, r1, #2
10011ac8:	1ac0      	subs	r0, r0, r3
10011aca:	4152      	adcs	r2, r2
10011acc:	0843      	lsrs	r3, r0, #1
10011ace:	428b      	cmp	r3, r1
10011ad0:	d301      	bcc.n	10011ad6 <__aeabi_idiv+0xf6>
10011ad2:	004b      	lsls	r3, r1, #1
10011ad4:	1ac0      	subs	r0, r0, r3
10011ad6:	4152      	adcs	r2, r2
10011ad8:	1a41      	subs	r1, r0, r1
10011ada:	d200      	bcs.n	10011ade <__aeabi_idiv+0xfe>
10011adc:	4601      	mov	r1, r0
10011ade:	4152      	adcs	r2, r2
10011ae0:	4610      	mov	r0, r2
10011ae2:	4770      	bx	lr
10011ae4:	e05d      	b.n	10011ba2 <__aeabi_idiv+0x1c2>
10011ae6:	0fca      	lsrs	r2, r1, #31
10011ae8:	d000      	beq.n	10011aec <__aeabi_idiv+0x10c>
10011aea:	4249      	negs	r1, r1
10011aec:	1003      	asrs	r3, r0, #32
10011aee:	d300      	bcc.n	10011af2 <__aeabi_idiv+0x112>
10011af0:	4240      	negs	r0, r0
10011af2:	4053      	eors	r3, r2
10011af4:	2200      	movs	r2, #0
10011af6:	469c      	mov	ip, r3
10011af8:	0903      	lsrs	r3, r0, #4
10011afa:	428b      	cmp	r3, r1
10011afc:	d32d      	bcc.n	10011b5a <__aeabi_idiv+0x17a>
10011afe:	0a03      	lsrs	r3, r0, #8
10011b00:	428b      	cmp	r3, r1
10011b02:	d312      	bcc.n	10011b2a <__aeabi_idiv+0x14a>
10011b04:	22fc      	movs	r2, #252	; 0xfc
10011b06:	0189      	lsls	r1, r1, #6
10011b08:	ba12      	rev	r2, r2
10011b0a:	0a03      	lsrs	r3, r0, #8
10011b0c:	428b      	cmp	r3, r1
10011b0e:	d30c      	bcc.n	10011b2a <__aeabi_idiv+0x14a>
10011b10:	0189      	lsls	r1, r1, #6
10011b12:	1192      	asrs	r2, r2, #6
10011b14:	428b      	cmp	r3, r1
10011b16:	d308      	bcc.n	10011b2a <__aeabi_idiv+0x14a>
10011b18:	0189      	lsls	r1, r1, #6
10011b1a:	1192      	asrs	r2, r2, #6
10011b1c:	428b      	cmp	r3, r1
10011b1e:	d304      	bcc.n	10011b2a <__aeabi_idiv+0x14a>
10011b20:	0189      	lsls	r1, r1, #6
10011b22:	d03a      	beq.n	10011b9a <__aeabi_idiv+0x1ba>
10011b24:	1192      	asrs	r2, r2, #6
10011b26:	e000      	b.n	10011b2a <__aeabi_idiv+0x14a>
10011b28:	0989      	lsrs	r1, r1, #6
10011b2a:	09c3      	lsrs	r3, r0, #7
10011b2c:	428b      	cmp	r3, r1
10011b2e:	d301      	bcc.n	10011b34 <__aeabi_idiv+0x154>
10011b30:	01cb      	lsls	r3, r1, #7
10011b32:	1ac0      	subs	r0, r0, r3
10011b34:	4152      	adcs	r2, r2
10011b36:	0983      	lsrs	r3, r0, #6
10011b38:	428b      	cmp	r3, r1
10011b3a:	d301      	bcc.n	10011b40 <__aeabi_idiv+0x160>
10011b3c:	018b      	lsls	r3, r1, #6
10011b3e:	1ac0      	subs	r0, r0, r3
10011b40:	4152      	adcs	r2, r2
10011b42:	0943      	lsrs	r3, r0, #5
10011b44:	428b      	cmp	r3, r1
10011b46:	d301      	bcc.n	10011b4c <__aeabi_idiv+0x16c>
10011b48:	014b      	lsls	r3, r1, #5
10011b4a:	1ac0      	subs	r0, r0, r3
10011b4c:	4152      	adcs	r2, r2
10011b4e:	0903      	lsrs	r3, r0, #4
10011b50:	428b      	cmp	r3, r1
10011b52:	d301      	bcc.n	10011b58 <__aeabi_idiv+0x178>
10011b54:	010b      	lsls	r3, r1, #4
10011b56:	1ac0      	subs	r0, r0, r3
10011b58:	4152      	adcs	r2, r2
10011b5a:	08c3      	lsrs	r3, r0, #3
10011b5c:	428b      	cmp	r3, r1
10011b5e:	d301      	bcc.n	10011b64 <__aeabi_idiv+0x184>
10011b60:	00cb      	lsls	r3, r1, #3
10011b62:	1ac0      	subs	r0, r0, r3
10011b64:	4152      	adcs	r2, r2
10011b66:	0883      	lsrs	r3, r0, #2
10011b68:	428b      	cmp	r3, r1
10011b6a:	d301      	bcc.n	10011b70 <__aeabi_idiv+0x190>
10011b6c:	008b      	lsls	r3, r1, #2
10011b6e:	1ac0      	subs	r0, r0, r3
10011b70:	4152      	adcs	r2, r2
10011b72:	d2d9      	bcs.n	10011b28 <__aeabi_idiv+0x148>
10011b74:	0843      	lsrs	r3, r0, #1
10011b76:	428b      	cmp	r3, r1
10011b78:	d301      	bcc.n	10011b7e <__aeabi_idiv+0x19e>
10011b7a:	004b      	lsls	r3, r1, #1
10011b7c:	1ac0      	subs	r0, r0, r3
10011b7e:	4152      	adcs	r2, r2
10011b80:	1a41      	subs	r1, r0, r1
10011b82:	d200      	bcs.n	10011b86 <__aeabi_idiv+0x1a6>
10011b84:	4601      	mov	r1, r0
10011b86:	4663      	mov	r3, ip
10011b88:	4152      	adcs	r2, r2
10011b8a:	105b      	asrs	r3, r3, #1
10011b8c:	4610      	mov	r0, r2
10011b8e:	d301      	bcc.n	10011b94 <__aeabi_idiv+0x1b4>
10011b90:	4240      	negs	r0, r0
10011b92:	2b00      	cmp	r3, #0
10011b94:	d500      	bpl.n	10011b98 <__aeabi_idiv+0x1b8>
10011b96:	4249      	negs	r1, r1
10011b98:	4770      	bx	lr
10011b9a:	4663      	mov	r3, ip
10011b9c:	105b      	asrs	r3, r3, #1
10011b9e:	d300      	bcc.n	10011ba2 <__aeabi_idiv+0x1c2>
10011ba0:	4240      	negs	r0, r0
10011ba2:	b501      	push	{r0, lr}
10011ba4:	2000      	movs	r0, #0
10011ba6:	f000 f805 	bl	10011bb4 <__aeabi_idiv0>
10011baa:	bd02      	pop	{r1, pc}

10011bac <__aeabi_idivmod>:
10011bac:	2900      	cmp	r1, #0
10011bae:	d0f8      	beq.n	10011ba2 <__aeabi_idiv+0x1c2>
10011bb0:	e716      	b.n	100119e0 <__aeabi_idiv>
10011bb2:	4770      	bx	lr

10011bb4 <__aeabi_idiv0>:
10011bb4:	4770      	bx	lr
10011bb6:	46c0      	nop			; (mov r8, r8)

10011bb8 <__aeabi_cdrcmple>:
10011bb8:	4684      	mov	ip, r0
10011bba:	1c10      	adds	r0, r2, #0
10011bbc:	4662      	mov	r2, ip
10011bbe:	468c      	mov	ip, r1
10011bc0:	1c19      	adds	r1, r3, #0
10011bc2:	4663      	mov	r3, ip
10011bc4:	e000      	b.n	10011bc8 <__aeabi_cdcmpeq>
10011bc6:	46c0      	nop			; (mov r8, r8)

10011bc8 <__aeabi_cdcmpeq>:
10011bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011bca:	f001 fb63 	bl	10013294 <__ledf2>
10011bce:	2800      	cmp	r0, #0
10011bd0:	d401      	bmi.n	10011bd6 <__aeabi_cdcmpeq+0xe>
10011bd2:	2100      	movs	r1, #0
10011bd4:	42c8      	cmn	r0, r1
10011bd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011bd8 <__aeabi_dcmpeq>:
10011bd8:	b510      	push	{r4, lr}
10011bda:	f001 fab7 	bl	1001314c <__eqdf2>
10011bde:	4240      	negs	r0, r0
10011be0:	3001      	adds	r0, #1
10011be2:	bd10      	pop	{r4, pc}

10011be4 <__aeabi_dcmplt>:
10011be4:	b510      	push	{r4, lr}
10011be6:	f001 fb55 	bl	10013294 <__ledf2>
10011bea:	2800      	cmp	r0, #0
10011bec:	db01      	blt.n	10011bf2 <__aeabi_dcmplt+0xe>
10011bee:	2000      	movs	r0, #0
10011bf0:	bd10      	pop	{r4, pc}
10011bf2:	2001      	movs	r0, #1
10011bf4:	bd10      	pop	{r4, pc}
10011bf6:	46c0      	nop			; (mov r8, r8)

10011bf8 <__aeabi_dcmple>:
10011bf8:	b510      	push	{r4, lr}
10011bfa:	f001 fb4b 	bl	10013294 <__ledf2>
10011bfe:	2800      	cmp	r0, #0
10011c00:	dd01      	ble.n	10011c06 <__aeabi_dcmple+0xe>
10011c02:	2000      	movs	r0, #0
10011c04:	bd10      	pop	{r4, pc}
10011c06:	2001      	movs	r0, #1
10011c08:	bd10      	pop	{r4, pc}
10011c0a:	46c0      	nop			; (mov r8, r8)

10011c0c <__aeabi_dcmpgt>:
10011c0c:	b510      	push	{r4, lr}
10011c0e:	f001 fadd 	bl	100131cc <__gedf2>
10011c12:	2800      	cmp	r0, #0
10011c14:	dc01      	bgt.n	10011c1a <__aeabi_dcmpgt+0xe>
10011c16:	2000      	movs	r0, #0
10011c18:	bd10      	pop	{r4, pc}
10011c1a:	2001      	movs	r0, #1
10011c1c:	bd10      	pop	{r4, pc}
10011c1e:	46c0      	nop			; (mov r8, r8)

10011c20 <__aeabi_dcmpge>:
10011c20:	b510      	push	{r4, lr}
10011c22:	f001 fad3 	bl	100131cc <__gedf2>
10011c26:	2800      	cmp	r0, #0
10011c28:	da01      	bge.n	10011c2e <__aeabi_dcmpge+0xe>
10011c2a:	2000      	movs	r0, #0
10011c2c:	bd10      	pop	{r4, pc}
10011c2e:	2001      	movs	r0, #1
10011c30:	bd10      	pop	{r4, pc}
10011c32:	46c0      	nop			; (mov r8, r8)

10011c34 <__aeabi_cfrcmple>:
10011c34:	4684      	mov	ip, r0
10011c36:	1c08      	adds	r0, r1, #0
10011c38:	4661      	mov	r1, ip
10011c3a:	e7ff      	b.n	10011c3c <__aeabi_cfcmpeq>

10011c3c <__aeabi_cfcmpeq>:
10011c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011c3e:	f000 fbd1 	bl	100123e4 <__lesf2>
10011c42:	2800      	cmp	r0, #0
10011c44:	d401      	bmi.n	10011c4a <__aeabi_cfcmpeq+0xe>
10011c46:	2100      	movs	r1, #0
10011c48:	42c8      	cmn	r0, r1
10011c4a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011c4c <__aeabi_fcmpeq>:
10011c4c:	b510      	push	{r4, lr}
10011c4e:	f000 fb5d 	bl	1001230c <__eqsf2>
10011c52:	4240      	negs	r0, r0
10011c54:	3001      	adds	r0, #1
10011c56:	bd10      	pop	{r4, pc}

10011c58 <__aeabi_fcmplt>:
10011c58:	b510      	push	{r4, lr}
10011c5a:	f000 fbc3 	bl	100123e4 <__lesf2>
10011c5e:	2800      	cmp	r0, #0
10011c60:	db01      	blt.n	10011c66 <__aeabi_fcmplt+0xe>
10011c62:	2000      	movs	r0, #0
10011c64:	bd10      	pop	{r4, pc}
10011c66:	2001      	movs	r0, #1
10011c68:	bd10      	pop	{r4, pc}
10011c6a:	46c0      	nop			; (mov r8, r8)

10011c6c <__aeabi_fcmple>:
10011c6c:	b510      	push	{r4, lr}
10011c6e:	f000 fbb9 	bl	100123e4 <__lesf2>
10011c72:	2800      	cmp	r0, #0
10011c74:	dd01      	ble.n	10011c7a <__aeabi_fcmple+0xe>
10011c76:	2000      	movs	r0, #0
10011c78:	bd10      	pop	{r4, pc}
10011c7a:	2001      	movs	r0, #1
10011c7c:	bd10      	pop	{r4, pc}
10011c7e:	46c0      	nop			; (mov r8, r8)

10011c80 <__aeabi_fcmpgt>:
10011c80:	b510      	push	{r4, lr}
10011c82:	f000 fb6b 	bl	1001235c <__gesf2>
10011c86:	2800      	cmp	r0, #0
10011c88:	dc01      	bgt.n	10011c8e <__aeabi_fcmpgt+0xe>
10011c8a:	2000      	movs	r0, #0
10011c8c:	bd10      	pop	{r4, pc}
10011c8e:	2001      	movs	r0, #1
10011c90:	bd10      	pop	{r4, pc}
10011c92:	46c0      	nop			; (mov r8, r8)

10011c94 <__aeabi_fcmpge>:
10011c94:	b510      	push	{r4, lr}
10011c96:	f000 fb61 	bl	1001235c <__gesf2>
10011c9a:	2800      	cmp	r0, #0
10011c9c:	da01      	bge.n	10011ca2 <__aeabi_fcmpge+0xe>
10011c9e:	2000      	movs	r0, #0
10011ca0:	bd10      	pop	{r4, pc}
10011ca2:	2001      	movs	r0, #1
10011ca4:	bd10      	pop	{r4, pc}
10011ca6:	46c0      	nop			; (mov r8, r8)

10011ca8 <__aeabi_ldivmod>:
10011ca8:	2b00      	cmp	r3, #0
10011caa:	d115      	bne.n	10011cd8 <__aeabi_ldivmod+0x30>
10011cac:	2a00      	cmp	r2, #0
10011cae:	d113      	bne.n	10011cd8 <__aeabi_ldivmod+0x30>
10011cb0:	2900      	cmp	r1, #0
10011cb2:	db06      	blt.n	10011cc2 <__aeabi_ldivmod+0x1a>
10011cb4:	dc01      	bgt.n	10011cba <__aeabi_ldivmod+0x12>
10011cb6:	2800      	cmp	r0, #0
10011cb8:	d006      	beq.n	10011cc8 <__aeabi_ldivmod+0x20>
10011cba:	2000      	movs	r0, #0
10011cbc:	43c0      	mvns	r0, r0
10011cbe:	0841      	lsrs	r1, r0, #1
10011cc0:	e002      	b.n	10011cc8 <__aeabi_ldivmod+0x20>
10011cc2:	2180      	movs	r1, #128	; 0x80
10011cc4:	0609      	lsls	r1, r1, #24
10011cc6:	2000      	movs	r0, #0
10011cc8:	b407      	push	{r0, r1, r2}
10011cca:	4802      	ldr	r0, [pc, #8]	; (10011cd4 <__aeabi_ldivmod+0x2c>)
10011ccc:	a101      	add	r1, pc, #4	; (adr r1, 10011cd4 <__aeabi_ldivmod+0x2c>)
10011cce:	1840      	adds	r0, r0, r1
10011cd0:	9002      	str	r0, [sp, #8]
10011cd2:	bd03      	pop	{r0, r1, pc}
10011cd4:	fffffee1 	.word	0xfffffee1
10011cd8:	b403      	push	{r0, r1}
10011cda:	4668      	mov	r0, sp
10011cdc:	b501      	push	{r0, lr}
10011cde:	9802      	ldr	r0, [sp, #8]
10011ce0:	f000 f868 	bl	10011db4 <__gnu_ldivmod_helper>
10011ce4:	9b01      	ldr	r3, [sp, #4]
10011ce6:	469e      	mov	lr, r3
10011ce8:	b002      	add	sp, #8
10011cea:	bc0c      	pop	{r2, r3}
10011cec:	4770      	bx	lr
10011cee:	46c0      	nop			; (mov r8, r8)

10011cf0 <__aeabi_lmul>:
10011cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011cf2:	464f      	mov	r7, r9
10011cf4:	4646      	mov	r6, r8
10011cf6:	b4c0      	push	{r6, r7}
10011cf8:	0416      	lsls	r6, r2, #16
10011cfa:	0c36      	lsrs	r6, r6, #16
10011cfc:	4699      	mov	r9, r3
10011cfe:	0033      	movs	r3, r6
10011d00:	0405      	lsls	r5, r0, #16
10011d02:	0c2c      	lsrs	r4, r5, #16
10011d04:	0c07      	lsrs	r7, r0, #16
10011d06:	0c15      	lsrs	r5, r2, #16
10011d08:	4363      	muls	r3, r4
10011d0a:	437e      	muls	r6, r7
10011d0c:	436f      	muls	r7, r5
10011d0e:	4365      	muls	r5, r4
10011d10:	0c1c      	lsrs	r4, r3, #16
10011d12:	19ad      	adds	r5, r5, r6
10011d14:	1964      	adds	r4, r4, r5
10011d16:	469c      	mov	ip, r3
10011d18:	42a6      	cmp	r6, r4
10011d1a:	d903      	bls.n	10011d24 <__aeabi_lmul+0x34>
10011d1c:	2380      	movs	r3, #128	; 0x80
10011d1e:	025b      	lsls	r3, r3, #9
10011d20:	4698      	mov	r8, r3
10011d22:	4447      	add	r7, r8
10011d24:	4663      	mov	r3, ip
10011d26:	0c25      	lsrs	r5, r4, #16
10011d28:	19ef      	adds	r7, r5, r7
10011d2a:	041d      	lsls	r5, r3, #16
10011d2c:	464b      	mov	r3, r9
10011d2e:	434a      	muls	r2, r1
10011d30:	4343      	muls	r3, r0
10011d32:	0c2d      	lsrs	r5, r5, #16
10011d34:	0424      	lsls	r4, r4, #16
10011d36:	1964      	adds	r4, r4, r5
10011d38:	1899      	adds	r1, r3, r2
10011d3a:	19c9      	adds	r1, r1, r7
10011d3c:	0020      	movs	r0, r4
10011d3e:	bc0c      	pop	{r2, r3}
10011d40:	4690      	mov	r8, r2
10011d42:	4699      	mov	r9, r3
10011d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d46:	46c0      	nop			; (mov r8, r8)

10011d48 <__aeabi_f2uiz>:
10011d48:	219e      	movs	r1, #158	; 0x9e
10011d4a:	b510      	push	{r4, lr}
10011d4c:	05c9      	lsls	r1, r1, #23
10011d4e:	1c04      	adds	r4, r0, #0
10011d50:	f7ff ffa0 	bl	10011c94 <__aeabi_fcmpge>
10011d54:	2800      	cmp	r0, #0
10011d56:	d103      	bne.n	10011d60 <__aeabi_f2uiz+0x18>
10011d58:	1c20      	adds	r0, r4, #0
10011d5a:	f000 fe39 	bl	100129d0 <__aeabi_f2iz>
10011d5e:	bd10      	pop	{r4, pc}
10011d60:	219e      	movs	r1, #158	; 0x9e
10011d62:	1c20      	adds	r0, r4, #0
10011d64:	05c9      	lsls	r1, r1, #23
10011d66:	f000 fc95 	bl	10012694 <__aeabi_fsub>
10011d6a:	f000 fe31 	bl	100129d0 <__aeabi_f2iz>
10011d6e:	2380      	movs	r3, #128	; 0x80
10011d70:	061b      	lsls	r3, r3, #24
10011d72:	469c      	mov	ip, r3
10011d74:	4460      	add	r0, ip
10011d76:	e7f2      	b.n	10011d5e <__aeabi_f2uiz+0x16>

10011d78 <__aeabi_d2uiz>:
10011d78:	b570      	push	{r4, r5, r6, lr}
10011d7a:	2200      	movs	r2, #0
10011d7c:	4b0c      	ldr	r3, [pc, #48]	; (10011db0 <__aeabi_d2uiz+0x38>)
10011d7e:	0004      	movs	r4, r0
10011d80:	000d      	movs	r5, r1
10011d82:	f7ff ff4d 	bl	10011c20 <__aeabi_dcmpge>
10011d86:	2800      	cmp	r0, #0
10011d88:	d104      	bne.n	10011d94 <__aeabi_d2uiz+0x1c>
10011d8a:	0020      	movs	r0, r4
10011d8c:	0029      	movs	r1, r5
10011d8e:	f002 f8b9 	bl	10013f04 <__aeabi_d2iz>
10011d92:	bd70      	pop	{r4, r5, r6, pc}
10011d94:	4b06      	ldr	r3, [pc, #24]	; (10011db0 <__aeabi_d2uiz+0x38>)
10011d96:	2200      	movs	r2, #0
10011d98:	0020      	movs	r0, r4
10011d9a:	0029      	movs	r1, r5
10011d9c:	f001 fd5e 	bl	1001385c <__aeabi_dsub>
10011da0:	f002 f8b0 	bl	10013f04 <__aeabi_d2iz>
10011da4:	2380      	movs	r3, #128	; 0x80
10011da6:	061b      	lsls	r3, r3, #24
10011da8:	469c      	mov	ip, r3
10011daa:	4460      	add	r0, ip
10011dac:	e7f1      	b.n	10011d92 <__aeabi_d2uiz+0x1a>
10011dae:	46c0      	nop			; (mov r8, r8)
10011db0:	41e00000 	.word	0x41e00000

10011db4 <__gnu_ldivmod_helper>:
10011db4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011db6:	b083      	sub	sp, #12
10011db8:	0016      	movs	r6, r2
10011dba:	001f      	movs	r7, r3
10011dbc:	9000      	str	r0, [sp, #0]
10011dbe:	9101      	str	r1, [sp, #4]
10011dc0:	f002 fa0c 	bl	100141dc <__divdi3>
10011dc4:	0004      	movs	r4, r0
10011dc6:	000d      	movs	r5, r1
10011dc8:	0002      	movs	r2, r0
10011dca:	000b      	movs	r3, r1
10011dcc:	0030      	movs	r0, r6
10011dce:	0039      	movs	r1, r7
10011dd0:	f7ff ff8e 	bl	10011cf0 <__aeabi_lmul>
10011dd4:	9a00      	ldr	r2, [sp, #0]
10011dd6:	9b01      	ldr	r3, [sp, #4]
10011dd8:	1a12      	subs	r2, r2, r0
10011dda:	418b      	sbcs	r3, r1
10011ddc:	9908      	ldr	r1, [sp, #32]
10011dde:	0020      	movs	r0, r4
10011de0:	600a      	str	r2, [r1, #0]
10011de2:	604b      	str	r3, [r1, #4]
10011de4:	0029      	movs	r1, r5
10011de6:	b003      	add	sp, #12
10011de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011dea:	46c0      	nop			; (mov r8, r8)

10011dec <__aeabi_fadd>:
10011dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011dee:	024a      	lsls	r2, r1, #9
10011df0:	0243      	lsls	r3, r0, #9
10011df2:	0044      	lsls	r4, r0, #1
10011df4:	004e      	lsls	r6, r1, #1
10011df6:	0fc5      	lsrs	r5, r0, #31
10011df8:	0e24      	lsrs	r4, r4, #24
10011dfa:	0028      	movs	r0, r5
10011dfc:	099b      	lsrs	r3, r3, #6
10011dfe:	0e36      	lsrs	r6, r6, #24
10011e00:	0fc9      	lsrs	r1, r1, #31
10011e02:	0992      	lsrs	r2, r2, #6
10011e04:	428d      	cmp	r5, r1
10011e06:	d059      	beq.n	10011ebc <__aeabi_fadd+0xd0>
10011e08:	1ba0      	subs	r0, r4, r6
10011e0a:	2800      	cmp	r0, #0
10011e0c:	dc00      	bgt.n	10011e10 <__aeabi_fadd+0x24>
10011e0e:	e08d      	b.n	10011f2c <__aeabi_fadd+0x140>
10011e10:	2e00      	cmp	r6, #0
10011e12:	d11a      	bne.n	10011e4a <__aeabi_fadd+0x5e>
10011e14:	2a00      	cmp	r2, #0
10011e16:	d000      	beq.n	10011e1a <__aeabi_fadd+0x2e>
10011e18:	e079      	b.n	10011f0e <__aeabi_fadd+0x122>
10011e1a:	075a      	lsls	r2, r3, #29
10011e1c:	d004      	beq.n	10011e28 <__aeabi_fadd+0x3c>
10011e1e:	220f      	movs	r2, #15
10011e20:	401a      	ands	r2, r3
10011e22:	2a04      	cmp	r2, #4
10011e24:	d000      	beq.n	10011e28 <__aeabi_fadd+0x3c>
10011e26:	3304      	adds	r3, #4
10011e28:	015a      	lsls	r2, r3, #5
10011e2a:	d538      	bpl.n	10011e9e <__aeabi_fadd+0xb2>
10011e2c:	3401      	adds	r4, #1
10011e2e:	2cff      	cmp	r4, #255	; 0xff
10011e30:	d100      	bne.n	10011e34 <__aeabi_fadd+0x48>
10011e32:	e089      	b.n	10011f48 <__aeabi_fadd+0x15c>
10011e34:	0028      	movs	r0, r5
10011e36:	019b      	lsls	r3, r3, #6
10011e38:	0a5b      	lsrs	r3, r3, #9
10011e3a:	b2e4      	uxtb	r4, r4
10011e3c:	025b      	lsls	r3, r3, #9
10011e3e:	05e4      	lsls	r4, r4, #23
10011e40:	0a5b      	lsrs	r3, r3, #9
10011e42:	4323      	orrs	r3, r4
10011e44:	07c0      	lsls	r0, r0, #31
10011e46:	4318      	orrs	r0, r3
10011e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011e4a:	2cff      	cmp	r4, #255	; 0xff
10011e4c:	d0e5      	beq.n	10011e1a <__aeabi_fadd+0x2e>
10011e4e:	2180      	movs	r1, #128	; 0x80
10011e50:	04c9      	lsls	r1, r1, #19
10011e52:	430a      	orrs	r2, r1
10011e54:	281b      	cmp	r0, #27
10011e56:	dd00      	ble.n	10011e5a <__aeabi_fadd+0x6e>
10011e58:	e089      	b.n	10011f6e <__aeabi_fadd+0x182>
10011e5a:	0016      	movs	r6, r2
10011e5c:	2120      	movs	r1, #32
10011e5e:	40c6      	lsrs	r6, r0
10011e60:	1a08      	subs	r0, r1, r0
10011e62:	4082      	lsls	r2, r0
10011e64:	1e51      	subs	r1, r2, #1
10011e66:	418a      	sbcs	r2, r1
10011e68:	4332      	orrs	r2, r6
10011e6a:	1a9b      	subs	r3, r3, r2
10011e6c:	015a      	lsls	r2, r3, #5
10011e6e:	d514      	bpl.n	10011e9a <__aeabi_fadd+0xae>
10011e70:	019b      	lsls	r3, r3, #6
10011e72:	099e      	lsrs	r6, r3, #6
10011e74:	0030      	movs	r0, r6
10011e76:	f002 f993 	bl	100141a0 <__clzsi2>
10011e7a:	3805      	subs	r0, #5
10011e7c:	4086      	lsls	r6, r0
10011e7e:	4284      	cmp	r4, r0
10011e80:	dc65      	bgt.n	10011f4e <__aeabi_fadd+0x162>
10011e82:	1b04      	subs	r4, r0, r4
10011e84:	0033      	movs	r3, r6
10011e86:	2020      	movs	r0, #32
10011e88:	3401      	adds	r4, #1
10011e8a:	40e3      	lsrs	r3, r4
10011e8c:	1b04      	subs	r4, r0, r4
10011e8e:	40a6      	lsls	r6, r4
10011e90:	1e72      	subs	r2, r6, #1
10011e92:	4196      	sbcs	r6, r2
10011e94:	2400      	movs	r4, #0
10011e96:	4333      	orrs	r3, r6
10011e98:	e7bf      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011e9a:	075a      	lsls	r2, r3, #29
10011e9c:	d1bf      	bne.n	10011e1e <__aeabi_fadd+0x32>
10011e9e:	08df      	lsrs	r7, r3, #3
10011ea0:	0028      	movs	r0, r5
10011ea2:	2cff      	cmp	r4, #255	; 0xff
10011ea4:	d12f      	bne.n	10011f06 <__aeabi_fadd+0x11a>
10011ea6:	2f00      	cmp	r7, #0
10011ea8:	d100      	bne.n	10011eac <__aeabi_fadd+0xc0>
10011eaa:	e087      	b.n	10011fbc <__aeabi_fadd+0x1d0>
10011eac:	2280      	movs	r2, #128	; 0x80
10011eae:	03d2      	lsls	r2, r2, #15
10011eb0:	0013      	movs	r3, r2
10011eb2:	433b      	orrs	r3, r7
10011eb4:	025b      	lsls	r3, r3, #9
10011eb6:	0a5b      	lsrs	r3, r3, #9
10011eb8:	24ff      	movs	r4, #255	; 0xff
10011eba:	e7bf      	b.n	10011e3c <__aeabi_fadd+0x50>
10011ebc:	1ba1      	subs	r1, r4, r6
10011ebe:	2900      	cmp	r1, #0
10011ec0:	dd49      	ble.n	10011f56 <__aeabi_fadd+0x16a>
10011ec2:	2e00      	cmp	r6, #0
10011ec4:	d029      	beq.n	10011f1a <__aeabi_fadd+0x12e>
10011ec6:	2cff      	cmp	r4, #255	; 0xff
10011ec8:	d0a7      	beq.n	10011e1a <__aeabi_fadd+0x2e>
10011eca:	2680      	movs	r6, #128	; 0x80
10011ecc:	04f6      	lsls	r6, r6, #19
10011ece:	4332      	orrs	r2, r6
10011ed0:	291b      	cmp	r1, #27
10011ed2:	dd00      	ble.n	10011ed6 <__aeabi_fadd+0xea>
10011ed4:	e08d      	b.n	10011ff2 <__aeabi_fadd+0x206>
10011ed6:	0017      	movs	r7, r2
10011ed8:	2620      	movs	r6, #32
10011eda:	40cf      	lsrs	r7, r1
10011edc:	1a71      	subs	r1, r6, r1
10011ede:	408a      	lsls	r2, r1
10011ee0:	1e51      	subs	r1, r2, #1
10011ee2:	418a      	sbcs	r2, r1
10011ee4:	433a      	orrs	r2, r7
10011ee6:	189b      	adds	r3, r3, r2
10011ee8:	015a      	lsls	r2, r3, #5
10011eea:	d5d6      	bpl.n	10011e9a <__aeabi_fadd+0xae>
10011eec:	3401      	adds	r4, #1
10011eee:	2cff      	cmp	r4, #255	; 0xff
10011ef0:	d064      	beq.n	10011fbc <__aeabi_fadd+0x1d0>
10011ef2:	2201      	movs	r2, #1
10011ef4:	4976      	ldr	r1, [pc, #472]	; (100120d0 <__aeabi_fadd+0x2e4>)
10011ef6:	401a      	ands	r2, r3
10011ef8:	085b      	lsrs	r3, r3, #1
10011efa:	400b      	ands	r3, r1
10011efc:	4313      	orrs	r3, r2
10011efe:	e78c      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f00:	1e03      	subs	r3, r0, #0
10011f02:	d1ca      	bne.n	10011e9a <__aeabi_fadd+0xae>
10011f04:	2000      	movs	r0, #0
10011f06:	027b      	lsls	r3, r7, #9
10011f08:	0a5b      	lsrs	r3, r3, #9
10011f0a:	b2e4      	uxtb	r4, r4
10011f0c:	e796      	b.n	10011e3c <__aeabi_fadd+0x50>
10011f0e:	3801      	subs	r0, #1
10011f10:	2800      	cmp	r0, #0
10011f12:	d0aa      	beq.n	10011e6a <__aeabi_fadd+0x7e>
10011f14:	2cff      	cmp	r4, #255	; 0xff
10011f16:	d19d      	bne.n	10011e54 <__aeabi_fadd+0x68>
10011f18:	e77f      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f1a:	2a00      	cmp	r2, #0
10011f1c:	d100      	bne.n	10011f20 <__aeabi_fadd+0x134>
10011f1e:	e77c      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f20:	3901      	subs	r1, #1
10011f22:	2900      	cmp	r1, #0
10011f24:	d0df      	beq.n	10011ee6 <__aeabi_fadd+0xfa>
10011f26:	2cff      	cmp	r4, #255	; 0xff
10011f28:	d1d2      	bne.n	10011ed0 <__aeabi_fadd+0xe4>
10011f2a:	e776      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f2c:	2800      	cmp	r0, #0
10011f2e:	d120      	bne.n	10011f72 <__aeabi_fadd+0x186>
10011f30:	1c60      	adds	r0, r4, #1
10011f32:	b2c0      	uxtb	r0, r0
10011f34:	2801      	cmp	r0, #1
10011f36:	dd53      	ble.n	10011fe0 <__aeabi_fadd+0x1f4>
10011f38:	2780      	movs	r7, #128	; 0x80
10011f3a:	1a9e      	subs	r6, r3, r2
10011f3c:	04ff      	lsls	r7, r7, #19
10011f3e:	4037      	ands	r7, r6
10011f40:	d02f      	beq.n	10011fa2 <__aeabi_fadd+0x1b6>
10011f42:	1ad6      	subs	r6, r2, r3
10011f44:	000d      	movs	r5, r1
10011f46:	e795      	b.n	10011e74 <__aeabi_fadd+0x88>
10011f48:	0028      	movs	r0, r5
10011f4a:	2300      	movs	r3, #0
10011f4c:	e776      	b.n	10011e3c <__aeabi_fadd+0x50>
10011f4e:	4b61      	ldr	r3, [pc, #388]	; (100120d4 <__aeabi_fadd+0x2e8>)
10011f50:	1a24      	subs	r4, r4, r0
10011f52:	4033      	ands	r3, r6
10011f54:	e761      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f56:	2900      	cmp	r1, #0
10011f58:	d14d      	bne.n	10011ff6 <__aeabi_fadd+0x20a>
10011f5a:	1c61      	adds	r1, r4, #1
10011f5c:	b2ce      	uxtb	r6, r1
10011f5e:	2e01      	cmp	r6, #1
10011f60:	dd2f      	ble.n	10011fc2 <__aeabi_fadd+0x1d6>
10011f62:	29ff      	cmp	r1, #255	; 0xff
10011f64:	d02a      	beq.n	10011fbc <__aeabi_fadd+0x1d0>
10011f66:	189b      	adds	r3, r3, r2
10011f68:	085b      	lsrs	r3, r3, #1
10011f6a:	000c      	movs	r4, r1
10011f6c:	e755      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011f6e:	2201      	movs	r2, #1
10011f70:	e77b      	b.n	10011e6a <__aeabi_fadd+0x7e>
10011f72:	2c00      	cmp	r4, #0
10011f74:	d11b      	bne.n	10011fae <__aeabi_fadd+0x1c2>
10011f76:	2b00      	cmp	r3, #0
10011f78:	d05b      	beq.n	10012032 <__aeabi_fadd+0x246>
10011f7a:	43c0      	mvns	r0, r0
10011f7c:	2800      	cmp	r0, #0
10011f7e:	d00c      	beq.n	10011f9a <__aeabi_fadd+0x1ae>
10011f80:	2eff      	cmp	r6, #255	; 0xff
10011f82:	d07e      	beq.n	10012082 <__aeabi_fadd+0x296>
10011f84:	281b      	cmp	r0, #27
10011f86:	dd00      	ble.n	10011f8a <__aeabi_fadd+0x19e>
10011f88:	e092      	b.n	100120b0 <__aeabi_fadd+0x2c4>
10011f8a:	001d      	movs	r5, r3
10011f8c:	2420      	movs	r4, #32
10011f8e:	40c5      	lsrs	r5, r0
10011f90:	1a20      	subs	r0, r4, r0
10011f92:	4083      	lsls	r3, r0
10011f94:	1e58      	subs	r0, r3, #1
10011f96:	4183      	sbcs	r3, r0
10011f98:	432b      	orrs	r3, r5
10011f9a:	1ad3      	subs	r3, r2, r3
10011f9c:	0034      	movs	r4, r6
10011f9e:	000d      	movs	r5, r1
10011fa0:	e764      	b.n	10011e6c <__aeabi_fadd+0x80>
10011fa2:	2e00      	cmp	r6, #0
10011fa4:	d000      	beq.n	10011fa8 <__aeabi_fadd+0x1bc>
10011fa6:	e765      	b.n	10011e74 <__aeabi_fadd+0x88>
10011fa8:	2000      	movs	r0, #0
10011faa:	2400      	movs	r4, #0
10011fac:	e7ab      	b.n	10011f06 <__aeabi_fadd+0x11a>
10011fae:	2eff      	cmp	r6, #255	; 0xff
10011fb0:	d067      	beq.n	10012082 <__aeabi_fadd+0x296>
10011fb2:	2480      	movs	r4, #128	; 0x80
10011fb4:	04e4      	lsls	r4, r4, #19
10011fb6:	4240      	negs	r0, r0
10011fb8:	4323      	orrs	r3, r4
10011fba:	e7e3      	b.n	10011f84 <__aeabi_fadd+0x198>
10011fbc:	24ff      	movs	r4, #255	; 0xff
10011fbe:	2300      	movs	r3, #0
10011fc0:	e73c      	b.n	10011e3c <__aeabi_fadd+0x50>
10011fc2:	2c00      	cmp	r4, #0
10011fc4:	d161      	bne.n	1001208a <__aeabi_fadd+0x29e>
10011fc6:	2b00      	cmp	r3, #0
10011fc8:	d07e      	beq.n	100120c8 <__aeabi_fadd+0x2dc>
10011fca:	2a00      	cmp	r2, #0
10011fcc:	d100      	bne.n	10011fd0 <__aeabi_fadd+0x1e4>
10011fce:	e724      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011fd0:	189b      	adds	r3, r3, r2
10011fd2:	015a      	lsls	r2, r3, #5
10011fd4:	d400      	bmi.n	10011fd8 <__aeabi_fadd+0x1ec>
10011fd6:	e760      	b.n	10011e9a <__aeabi_fadd+0xae>
10011fd8:	4a3e      	ldr	r2, [pc, #248]	; (100120d4 <__aeabi_fadd+0x2e8>)
10011fda:	000c      	movs	r4, r1
10011fdc:	4013      	ands	r3, r2
10011fde:	e71c      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011fe0:	2c00      	cmp	r4, #0
10011fe2:	d11e      	bne.n	10012022 <__aeabi_fadd+0x236>
10011fe4:	2b00      	cmp	r3, #0
10011fe6:	d12f      	bne.n	10012048 <__aeabi_fadd+0x25c>
10011fe8:	2a00      	cmp	r2, #0
10011fea:	d066      	beq.n	100120ba <__aeabi_fadd+0x2ce>
10011fec:	0013      	movs	r3, r2
10011fee:	000d      	movs	r5, r1
10011ff0:	e713      	b.n	10011e1a <__aeabi_fadd+0x2e>
10011ff2:	2201      	movs	r2, #1
10011ff4:	e777      	b.n	10011ee6 <__aeabi_fadd+0xfa>
10011ff6:	2c00      	cmp	r4, #0
10011ff8:	d11f      	bne.n	1001203a <__aeabi_fadd+0x24e>
10011ffa:	2b00      	cmp	r3, #0
10011ffc:	d05a      	beq.n	100120b4 <__aeabi_fadd+0x2c8>
10011ffe:	43c9      	mvns	r1, r1
10012000:	2900      	cmp	r1, #0
10012002:	d00b      	beq.n	1001201c <__aeabi_fadd+0x230>
10012004:	2eff      	cmp	r6, #255	; 0xff
10012006:	d050      	beq.n	100120aa <__aeabi_fadd+0x2be>
10012008:	291b      	cmp	r1, #27
1001200a:	dc5f      	bgt.n	100120cc <__aeabi_fadd+0x2e0>
1001200c:	001f      	movs	r7, r3
1001200e:	2420      	movs	r4, #32
10012010:	40cf      	lsrs	r7, r1
10012012:	1a61      	subs	r1, r4, r1
10012014:	408b      	lsls	r3, r1
10012016:	1e59      	subs	r1, r3, #1
10012018:	418b      	sbcs	r3, r1
1001201a:	433b      	orrs	r3, r7
1001201c:	189b      	adds	r3, r3, r2
1001201e:	0034      	movs	r4, r6
10012020:	e762      	b.n	10011ee8 <__aeabi_fadd+0xfc>
10012022:	2b00      	cmp	r3, #0
10012024:	d11c      	bne.n	10012060 <__aeabi_fadd+0x274>
10012026:	2a00      	cmp	r2, #0
10012028:	d04a      	beq.n	100120c0 <__aeabi_fadd+0x2d4>
1001202a:	0013      	movs	r3, r2
1001202c:	000d      	movs	r5, r1
1001202e:	24ff      	movs	r4, #255	; 0xff
10012030:	e6f3      	b.n	10011e1a <__aeabi_fadd+0x2e>
10012032:	0013      	movs	r3, r2
10012034:	0034      	movs	r4, r6
10012036:	000d      	movs	r5, r1
10012038:	e6ef      	b.n	10011e1a <__aeabi_fadd+0x2e>
1001203a:	2eff      	cmp	r6, #255	; 0xff
1001203c:	d035      	beq.n	100120aa <__aeabi_fadd+0x2be>
1001203e:	2480      	movs	r4, #128	; 0x80
10012040:	04e4      	lsls	r4, r4, #19
10012042:	4249      	negs	r1, r1
10012044:	4323      	orrs	r3, r4
10012046:	e7df      	b.n	10012008 <__aeabi_fadd+0x21c>
10012048:	2a00      	cmp	r2, #0
1001204a:	d100      	bne.n	1001204e <__aeabi_fadd+0x262>
1001204c:	e6e5      	b.n	10011e1a <__aeabi_fadd+0x2e>
1001204e:	2780      	movs	r7, #128	; 0x80
10012050:	1a98      	subs	r0, r3, r2
10012052:	04ff      	lsls	r7, r7, #19
10012054:	4007      	ands	r7, r0
10012056:	d100      	bne.n	1001205a <__aeabi_fadd+0x26e>
10012058:	e752      	b.n	10011f00 <__aeabi_fadd+0x114>
1001205a:	1ad3      	subs	r3, r2, r3
1001205c:	000d      	movs	r5, r1
1001205e:	e6dc      	b.n	10011e1a <__aeabi_fadd+0x2e>
10012060:	24ff      	movs	r4, #255	; 0xff
10012062:	2a00      	cmp	r2, #0
10012064:	d100      	bne.n	10012068 <__aeabi_fadd+0x27c>
10012066:	e6d8      	b.n	10011e1a <__aeabi_fadd+0x2e>
10012068:	2080      	movs	r0, #128	; 0x80
1001206a:	08db      	lsrs	r3, r3, #3
1001206c:	03c0      	lsls	r0, r0, #15
1001206e:	4203      	tst	r3, r0
10012070:	d004      	beq.n	1001207c <__aeabi_fadd+0x290>
10012072:	08d2      	lsrs	r2, r2, #3
10012074:	4202      	tst	r2, r0
10012076:	d101      	bne.n	1001207c <__aeabi_fadd+0x290>
10012078:	0013      	movs	r3, r2
1001207a:	000d      	movs	r5, r1
1001207c:	00db      	lsls	r3, r3, #3
1001207e:	24ff      	movs	r4, #255	; 0xff
10012080:	e6cb      	b.n	10011e1a <__aeabi_fadd+0x2e>
10012082:	0013      	movs	r3, r2
10012084:	24ff      	movs	r4, #255	; 0xff
10012086:	000d      	movs	r5, r1
10012088:	e6c7      	b.n	10011e1a <__aeabi_fadd+0x2e>
1001208a:	2b00      	cmp	r3, #0
1001208c:	d00d      	beq.n	100120aa <__aeabi_fadd+0x2be>
1001208e:	24ff      	movs	r4, #255	; 0xff
10012090:	2a00      	cmp	r2, #0
10012092:	d100      	bne.n	10012096 <__aeabi_fadd+0x2aa>
10012094:	e6c1      	b.n	10011e1a <__aeabi_fadd+0x2e>
10012096:	2180      	movs	r1, #128	; 0x80
10012098:	08db      	lsrs	r3, r3, #3
1001209a:	03c9      	lsls	r1, r1, #15
1001209c:	420b      	tst	r3, r1
1001209e:	d0ed      	beq.n	1001207c <__aeabi_fadd+0x290>
100120a0:	08d2      	lsrs	r2, r2, #3
100120a2:	420a      	tst	r2, r1
100120a4:	d1ea      	bne.n	1001207c <__aeabi_fadd+0x290>
100120a6:	0013      	movs	r3, r2
100120a8:	e7e8      	b.n	1001207c <__aeabi_fadd+0x290>
100120aa:	0013      	movs	r3, r2
100120ac:	24ff      	movs	r4, #255	; 0xff
100120ae:	e6b4      	b.n	10011e1a <__aeabi_fadd+0x2e>
100120b0:	2301      	movs	r3, #1
100120b2:	e772      	b.n	10011f9a <__aeabi_fadd+0x1ae>
100120b4:	0013      	movs	r3, r2
100120b6:	0034      	movs	r4, r6
100120b8:	e6af      	b.n	10011e1a <__aeabi_fadd+0x2e>
100120ba:	2700      	movs	r7, #0
100120bc:	2000      	movs	r0, #0
100120be:	e722      	b.n	10011f06 <__aeabi_fadd+0x11a>
100120c0:	2780      	movs	r7, #128	; 0x80
100120c2:	2000      	movs	r0, #0
100120c4:	03ff      	lsls	r7, r7, #15
100120c6:	e6f1      	b.n	10011eac <__aeabi_fadd+0xc0>
100120c8:	0013      	movs	r3, r2
100120ca:	e6a6      	b.n	10011e1a <__aeabi_fadd+0x2e>
100120cc:	2301      	movs	r3, #1
100120ce:	e7a5      	b.n	1001201c <__aeabi_fadd+0x230>
100120d0:	7dffffff 	.word	0x7dffffff
100120d4:	fbffffff 	.word	0xfbffffff

100120d8 <__aeabi_fdiv>:
100120d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100120da:	4656      	mov	r6, sl
100120dc:	4644      	mov	r4, r8
100120de:	465f      	mov	r7, fp
100120e0:	464d      	mov	r5, r9
100120e2:	b4f0      	push	{r4, r5, r6, r7}
100120e4:	0244      	lsls	r4, r0, #9
100120e6:	0046      	lsls	r6, r0, #1
100120e8:	0fc7      	lsrs	r7, r0, #31
100120ea:	b083      	sub	sp, #12
100120ec:	4688      	mov	r8, r1
100120ee:	0a65      	lsrs	r5, r4, #9
100120f0:	0e36      	lsrs	r6, r6, #24
100120f2:	46ba      	mov	sl, r7
100120f4:	d03d      	beq.n	10012172 <__aeabi_fdiv+0x9a>
100120f6:	2eff      	cmp	r6, #255	; 0xff
100120f8:	d022      	beq.n	10012140 <__aeabi_fdiv+0x68>
100120fa:	2300      	movs	r3, #0
100120fc:	00ec      	lsls	r4, r5, #3
100120fe:	2580      	movs	r5, #128	; 0x80
10012100:	4699      	mov	r9, r3
10012102:	469b      	mov	fp, r3
10012104:	04ed      	lsls	r5, r5, #19
10012106:	4325      	orrs	r5, r4
10012108:	3e7f      	subs	r6, #127	; 0x7f
1001210a:	4643      	mov	r3, r8
1001210c:	025c      	lsls	r4, r3, #9
1001210e:	0058      	lsls	r0, r3, #1
10012110:	0fdb      	lsrs	r3, r3, #31
10012112:	0a64      	lsrs	r4, r4, #9
10012114:	0e00      	lsrs	r0, r0, #24
10012116:	4698      	mov	r8, r3
10012118:	d036      	beq.n	10012188 <__aeabi_fdiv+0xb0>
1001211a:	28ff      	cmp	r0, #255	; 0xff
1001211c:	d030      	beq.n	10012180 <__aeabi_fdiv+0xa8>
1001211e:	2380      	movs	r3, #128	; 0x80
10012120:	2100      	movs	r1, #0
10012122:	00e4      	lsls	r4, r4, #3
10012124:	04db      	lsls	r3, r3, #19
10012126:	431c      	orrs	r4, r3
10012128:	387f      	subs	r0, #127	; 0x7f
1001212a:	1a30      	subs	r0, r6, r0
1001212c:	9001      	str	r0, [sp, #4]
1001212e:	4648      	mov	r0, r9
10012130:	4642      	mov	r2, r8
10012132:	4308      	orrs	r0, r1
10012134:	4e72      	ldr	r6, [pc, #456]	; (10012300 <__aeabi_fdiv+0x228>)
10012136:	0080      	lsls	r0, r0, #2
10012138:	5830      	ldr	r0, [r6, r0]
1001213a:	407a      	eors	r2, r7
1001213c:	0013      	movs	r3, r2
1001213e:	4687      	mov	pc, r0
10012140:	2d00      	cmp	r5, #0
10012142:	d144      	bne.n	100121ce <__aeabi_fdiv+0xf6>
10012144:	2308      	movs	r3, #8
10012146:	4699      	mov	r9, r3
10012148:	3b06      	subs	r3, #6
1001214a:	469b      	mov	fp, r3
1001214c:	e7dd      	b.n	1001210a <__aeabi_fdiv+0x32>
1001214e:	2201      	movs	r2, #1
10012150:	20ff      	movs	r0, #255	; 0xff
10012152:	2400      	movs	r4, #0
10012154:	401a      	ands	r2, r3
10012156:	0264      	lsls	r4, r4, #9
10012158:	05c3      	lsls	r3, r0, #23
1001215a:	0a64      	lsrs	r4, r4, #9
1001215c:	07d2      	lsls	r2, r2, #31
1001215e:	431c      	orrs	r4, r3
10012160:	4314      	orrs	r4, r2
10012162:	0020      	movs	r0, r4
10012164:	b003      	add	sp, #12
10012166:	bc3c      	pop	{r2, r3, r4, r5}
10012168:	4690      	mov	r8, r2
1001216a:	4699      	mov	r9, r3
1001216c:	46a2      	mov	sl, r4
1001216e:	46ab      	mov	fp, r5
10012170:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012172:	2d00      	cmp	r5, #0
10012174:	d120      	bne.n	100121b8 <__aeabi_fdiv+0xe0>
10012176:	2304      	movs	r3, #4
10012178:	4699      	mov	r9, r3
1001217a:	3b03      	subs	r3, #3
1001217c:	469b      	mov	fp, r3
1001217e:	e7c4      	b.n	1001210a <__aeabi_fdiv+0x32>
10012180:	2c00      	cmp	r4, #0
10012182:	d117      	bne.n	100121b4 <__aeabi_fdiv+0xdc>
10012184:	2102      	movs	r1, #2
10012186:	e002      	b.n	1001218e <__aeabi_fdiv+0xb6>
10012188:	2c00      	cmp	r4, #0
1001218a:	d10a      	bne.n	100121a2 <__aeabi_fdiv+0xca>
1001218c:	2101      	movs	r1, #1
1001218e:	1a32      	subs	r2, r6, r0
10012190:	9201      	str	r2, [sp, #4]
10012192:	464a      	mov	r2, r9
10012194:	4643      	mov	r3, r8
10012196:	430a      	orrs	r2, r1
10012198:	485a      	ldr	r0, [pc, #360]	; (10012304 <__aeabi_fdiv+0x22c>)
1001219a:	0092      	lsls	r2, r2, #2
1001219c:	5882      	ldr	r2, [r0, r2]
1001219e:	407b      	eors	r3, r7
100121a0:	4697      	mov	pc, r2
100121a2:	0020      	movs	r0, r4
100121a4:	f001 fffc 	bl	100141a0 <__clzsi2>
100121a8:	1f43      	subs	r3, r0, #5
100121aa:	3076      	adds	r0, #118	; 0x76
100121ac:	409c      	lsls	r4, r3
100121ae:	4240      	negs	r0, r0
100121b0:	2100      	movs	r1, #0
100121b2:	e7ba      	b.n	1001212a <__aeabi_fdiv+0x52>
100121b4:	2103      	movs	r1, #3
100121b6:	e7b8      	b.n	1001212a <__aeabi_fdiv+0x52>
100121b8:	0028      	movs	r0, r5
100121ba:	f001 fff1 	bl	100141a0 <__clzsi2>
100121be:	1f43      	subs	r3, r0, #5
100121c0:	409d      	lsls	r5, r3
100121c2:	2300      	movs	r3, #0
100121c4:	3076      	adds	r0, #118	; 0x76
100121c6:	4246      	negs	r6, r0
100121c8:	4699      	mov	r9, r3
100121ca:	469b      	mov	fp, r3
100121cc:	e79d      	b.n	1001210a <__aeabi_fdiv+0x32>
100121ce:	230c      	movs	r3, #12
100121d0:	4699      	mov	r9, r3
100121d2:	3b09      	subs	r3, #9
100121d4:	469b      	mov	fp, r3
100121d6:	e798      	b.n	1001210a <__aeabi_fdiv+0x32>
100121d8:	2480      	movs	r4, #128	; 0x80
100121da:	2200      	movs	r2, #0
100121dc:	03e4      	lsls	r4, r4, #15
100121de:	20ff      	movs	r0, #255	; 0xff
100121e0:	e7b9      	b.n	10012156 <__aeabi_fdiv+0x7e>
100121e2:	2400      	movs	r4, #0
100121e4:	46c2      	mov	sl, r8
100121e6:	468b      	mov	fp, r1
100121e8:	465a      	mov	r2, fp
100121ea:	4653      	mov	r3, sl
100121ec:	2a02      	cmp	r2, #2
100121ee:	d0ae      	beq.n	1001214e <__aeabi_fdiv+0x76>
100121f0:	2a03      	cmp	r2, #3
100121f2:	d07d      	beq.n	100122f0 <__aeabi_fdiv+0x218>
100121f4:	2a01      	cmp	r2, #1
100121f6:	d131      	bne.n	1001225c <__aeabi_fdiv+0x184>
100121f8:	2201      	movs	r2, #1
100121fa:	2000      	movs	r0, #0
100121fc:	401a      	ands	r2, r3
100121fe:	2400      	movs	r4, #0
10012200:	e7a9      	b.n	10012156 <__aeabi_fdiv+0x7e>
10012202:	2201      	movs	r2, #1
10012204:	1a10      	subs	r0, r2, r0
10012206:	281b      	cmp	r0, #27
10012208:	dd56      	ble.n	100122b8 <__aeabi_fdiv+0x1e0>
1001220a:	401a      	ands	r2, r3
1001220c:	2000      	movs	r0, #0
1001220e:	2400      	movs	r4, #0
10012210:	e7a1      	b.n	10012156 <__aeabi_fdiv+0x7e>
10012212:	2380      	movs	r3, #128	; 0x80
10012214:	03db      	lsls	r3, r3, #15
10012216:	421d      	tst	r5, r3
10012218:	d14b      	bne.n	100122b2 <__aeabi_fdiv+0x1da>
1001221a:	2380      	movs	r3, #128	; 0x80
1001221c:	03db      	lsls	r3, r3, #15
1001221e:	432b      	orrs	r3, r5
10012220:	025c      	lsls	r4, r3, #9
10012222:	0a64      	lsrs	r4, r4, #9
10012224:	003a      	movs	r2, r7
10012226:	20ff      	movs	r0, #255	; 0xff
10012228:	e795      	b.n	10012156 <__aeabi_fdiv+0x7e>
1001222a:	016d      	lsls	r5, r5, #5
1001222c:	0160      	lsls	r0, r4, #5
1001222e:	4285      	cmp	r5, r0
10012230:	d230      	bcs.n	10012294 <__aeabi_fdiv+0x1bc>
10012232:	9a01      	ldr	r2, [sp, #4]
10012234:	2400      	movs	r4, #0
10012236:	3a01      	subs	r2, #1
10012238:	9201      	str	r2, [sp, #4]
1001223a:	221b      	movs	r2, #27
1001223c:	2701      	movs	r7, #1
1001223e:	0029      	movs	r1, r5
10012240:	0064      	lsls	r4, r4, #1
10012242:	006d      	lsls	r5, r5, #1
10012244:	2900      	cmp	r1, #0
10012246:	db01      	blt.n	1001224c <__aeabi_fdiv+0x174>
10012248:	42a8      	cmp	r0, r5
1001224a:	d801      	bhi.n	10012250 <__aeabi_fdiv+0x178>
1001224c:	1a2d      	subs	r5, r5, r0
1001224e:	433c      	orrs	r4, r7
10012250:	3a01      	subs	r2, #1
10012252:	2a00      	cmp	r2, #0
10012254:	d1f3      	bne.n	1001223e <__aeabi_fdiv+0x166>
10012256:	1e6a      	subs	r2, r5, #1
10012258:	4195      	sbcs	r5, r2
1001225a:	432c      	orrs	r4, r5
1001225c:	9801      	ldr	r0, [sp, #4]
1001225e:	307f      	adds	r0, #127	; 0x7f
10012260:	2800      	cmp	r0, #0
10012262:	ddce      	ble.n	10012202 <__aeabi_fdiv+0x12a>
10012264:	0762      	lsls	r2, r4, #29
10012266:	d004      	beq.n	10012272 <__aeabi_fdiv+0x19a>
10012268:	220f      	movs	r2, #15
1001226a:	4022      	ands	r2, r4
1001226c:	2a04      	cmp	r2, #4
1001226e:	d000      	beq.n	10012272 <__aeabi_fdiv+0x19a>
10012270:	3404      	adds	r4, #4
10012272:	0122      	lsls	r2, r4, #4
10012274:	d503      	bpl.n	1001227e <__aeabi_fdiv+0x1a6>
10012276:	4a24      	ldr	r2, [pc, #144]	; (10012308 <__aeabi_fdiv+0x230>)
10012278:	9801      	ldr	r0, [sp, #4]
1001227a:	4014      	ands	r4, r2
1001227c:	3080      	adds	r0, #128	; 0x80
1001227e:	28fe      	cmp	r0, #254	; 0xfe
10012280:	dd00      	ble.n	10012284 <__aeabi_fdiv+0x1ac>
10012282:	e764      	b.n	1001214e <__aeabi_fdiv+0x76>
10012284:	2201      	movs	r2, #1
10012286:	01a4      	lsls	r4, r4, #6
10012288:	0a64      	lsrs	r4, r4, #9
1001228a:	b2c0      	uxtb	r0, r0
1001228c:	401a      	ands	r2, r3
1001228e:	e762      	b.n	10012156 <__aeabi_fdiv+0x7e>
10012290:	002c      	movs	r4, r5
10012292:	e7a9      	b.n	100121e8 <__aeabi_fdiv+0x110>
10012294:	1a2d      	subs	r5, r5, r0
10012296:	221a      	movs	r2, #26
10012298:	2401      	movs	r4, #1
1001229a:	e7cf      	b.n	1001223c <__aeabi_fdiv+0x164>
1001229c:	026b      	lsls	r3, r5, #9
1001229e:	d5bc      	bpl.n	1001221a <__aeabi_fdiv+0x142>
100122a0:	2400      	movs	r4, #0
100122a2:	2380      	movs	r3, #128	; 0x80
100122a4:	03db      	lsls	r3, r3, #15
100122a6:	431c      	orrs	r4, r3
100122a8:	0264      	lsls	r4, r4, #9
100122aa:	0a64      	lsrs	r4, r4, #9
100122ac:	4642      	mov	r2, r8
100122ae:	20ff      	movs	r0, #255	; 0xff
100122b0:	e751      	b.n	10012156 <__aeabi_fdiv+0x7e>
100122b2:	421c      	tst	r4, r3
100122b4:	d1b3      	bne.n	1001221e <__aeabi_fdiv+0x146>
100122b6:	e7f4      	b.n	100122a2 <__aeabi_fdiv+0x1ca>
100122b8:	0021      	movs	r1, r4
100122ba:	2220      	movs	r2, #32
100122bc:	40c1      	lsrs	r1, r0
100122be:	1a10      	subs	r0, r2, r0
100122c0:	4084      	lsls	r4, r0
100122c2:	1e62      	subs	r2, r4, #1
100122c4:	4194      	sbcs	r4, r2
100122c6:	430c      	orrs	r4, r1
100122c8:	0762      	lsls	r2, r4, #29
100122ca:	d004      	beq.n	100122d6 <__aeabi_fdiv+0x1fe>
100122cc:	220f      	movs	r2, #15
100122ce:	4022      	ands	r2, r4
100122d0:	2a04      	cmp	r2, #4
100122d2:	d000      	beq.n	100122d6 <__aeabi_fdiv+0x1fe>
100122d4:	3404      	adds	r4, #4
100122d6:	0162      	lsls	r2, r4, #5
100122d8:	d504      	bpl.n	100122e4 <__aeabi_fdiv+0x20c>
100122da:	2201      	movs	r2, #1
100122dc:	2001      	movs	r0, #1
100122de:	401a      	ands	r2, r3
100122e0:	2400      	movs	r4, #0
100122e2:	e738      	b.n	10012156 <__aeabi_fdiv+0x7e>
100122e4:	2201      	movs	r2, #1
100122e6:	01a4      	lsls	r4, r4, #6
100122e8:	0a64      	lsrs	r4, r4, #9
100122ea:	401a      	ands	r2, r3
100122ec:	2000      	movs	r0, #0
100122ee:	e732      	b.n	10012156 <__aeabi_fdiv+0x7e>
100122f0:	2380      	movs	r3, #128	; 0x80
100122f2:	03db      	lsls	r3, r3, #15
100122f4:	431c      	orrs	r4, r3
100122f6:	0264      	lsls	r4, r4, #9
100122f8:	0a64      	lsrs	r4, r4, #9
100122fa:	4652      	mov	r2, sl
100122fc:	20ff      	movs	r0, #255	; 0xff
100122fe:	e72a      	b.n	10012156 <__aeabi_fdiv+0x7e>
10012300:	10017378 	.word	0x10017378
10012304:	100173b8 	.word	0x100173b8
10012308:	f7ffffff 	.word	0xf7ffffff

1001230c <__eqsf2>:
1001230c:	0243      	lsls	r3, r0, #9
1001230e:	b570      	push	{r4, r5, r6, lr}
10012310:	0042      	lsls	r2, r0, #1
10012312:	004c      	lsls	r4, r1, #1
10012314:	0a5d      	lsrs	r5, r3, #9
10012316:	0fc3      	lsrs	r3, r0, #31
10012318:	0248      	lsls	r0, r1, #9
1001231a:	0e12      	lsrs	r2, r2, #24
1001231c:	0a46      	lsrs	r6, r0, #9
1001231e:	0e24      	lsrs	r4, r4, #24
10012320:	0fc9      	lsrs	r1, r1, #31
10012322:	2aff      	cmp	r2, #255	; 0xff
10012324:	d00f      	beq.n	10012346 <__eqsf2+0x3a>
10012326:	2cff      	cmp	r4, #255	; 0xff
10012328:	d011      	beq.n	1001234e <__eqsf2+0x42>
1001232a:	2001      	movs	r0, #1
1001232c:	42a2      	cmp	r2, r4
1001232e:	d000      	beq.n	10012332 <__eqsf2+0x26>
10012330:	bd70      	pop	{r4, r5, r6, pc}
10012332:	42b5      	cmp	r5, r6
10012334:	d1fc      	bne.n	10012330 <__eqsf2+0x24>
10012336:	428b      	cmp	r3, r1
10012338:	d00d      	beq.n	10012356 <__eqsf2+0x4a>
1001233a:	2a00      	cmp	r2, #0
1001233c:	d1f8      	bne.n	10012330 <__eqsf2+0x24>
1001233e:	0028      	movs	r0, r5
10012340:	1e43      	subs	r3, r0, #1
10012342:	4198      	sbcs	r0, r3
10012344:	e7f4      	b.n	10012330 <__eqsf2+0x24>
10012346:	2001      	movs	r0, #1
10012348:	2d00      	cmp	r5, #0
1001234a:	d1f1      	bne.n	10012330 <__eqsf2+0x24>
1001234c:	e7eb      	b.n	10012326 <__eqsf2+0x1a>
1001234e:	2001      	movs	r0, #1
10012350:	2e00      	cmp	r6, #0
10012352:	d1ed      	bne.n	10012330 <__eqsf2+0x24>
10012354:	e7e9      	b.n	1001232a <__eqsf2+0x1e>
10012356:	2000      	movs	r0, #0
10012358:	e7ea      	b.n	10012330 <__eqsf2+0x24>
1001235a:	46c0      	nop			; (mov r8, r8)

1001235c <__gesf2>:
1001235c:	0243      	lsls	r3, r0, #9
1001235e:	b5f0      	push	{r4, r5, r6, r7, lr}
10012360:	0042      	lsls	r2, r0, #1
10012362:	0a5d      	lsrs	r5, r3, #9
10012364:	0fc3      	lsrs	r3, r0, #31
10012366:	0248      	lsls	r0, r1, #9
10012368:	0a44      	lsrs	r4, r0, #9
1001236a:	0048      	lsls	r0, r1, #1
1001236c:	0e12      	lsrs	r2, r2, #24
1001236e:	0e00      	lsrs	r0, r0, #24
10012370:	0fc9      	lsrs	r1, r1, #31
10012372:	2aff      	cmp	r2, #255	; 0xff
10012374:	d01f      	beq.n	100123b6 <__gesf2+0x5a>
10012376:	28ff      	cmp	r0, #255	; 0xff
10012378:	d022      	beq.n	100123c0 <__gesf2+0x64>
1001237a:	2a00      	cmp	r2, #0
1001237c:	d109      	bne.n	10012392 <__gesf2+0x36>
1001237e:	426e      	negs	r6, r5
10012380:	416e      	adcs	r6, r5
10012382:	2800      	cmp	r0, #0
10012384:	d10f      	bne.n	100123a6 <__gesf2+0x4a>
10012386:	2c00      	cmp	r4, #0
10012388:	d10d      	bne.n	100123a6 <__gesf2+0x4a>
1001238a:	2000      	movs	r0, #0
1001238c:	2d00      	cmp	r5, #0
1001238e:	d009      	beq.n	100123a4 <__gesf2+0x48>
10012390:	e005      	b.n	1001239e <__gesf2+0x42>
10012392:	2800      	cmp	r0, #0
10012394:	d101      	bne.n	1001239a <__gesf2+0x3e>
10012396:	2c00      	cmp	r4, #0
10012398:	d001      	beq.n	1001239e <__gesf2+0x42>
1001239a:	428b      	cmp	r3, r1
1001239c:	d013      	beq.n	100123c6 <__gesf2+0x6a>
1001239e:	4258      	negs	r0, r3
100123a0:	2301      	movs	r3, #1
100123a2:	4318      	orrs	r0, r3
100123a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100123a6:	2e00      	cmp	r6, #0
100123a8:	d0f7      	beq.n	1001239a <__gesf2+0x3e>
100123aa:	4248      	negs	r0, r1
100123ac:	4141      	adcs	r1, r0
100123ae:	2001      	movs	r0, #1
100123b0:	4249      	negs	r1, r1
100123b2:	4308      	orrs	r0, r1
100123b4:	e7f6      	b.n	100123a4 <__gesf2+0x48>
100123b6:	2d00      	cmp	r5, #0
100123b8:	d0dd      	beq.n	10012376 <__gesf2+0x1a>
100123ba:	2002      	movs	r0, #2
100123bc:	4240      	negs	r0, r0
100123be:	e7f1      	b.n	100123a4 <__gesf2+0x48>
100123c0:	2c00      	cmp	r4, #0
100123c2:	d0da      	beq.n	1001237a <__gesf2+0x1e>
100123c4:	e7f9      	b.n	100123ba <__gesf2+0x5e>
100123c6:	4282      	cmp	r2, r0
100123c8:	dce9      	bgt.n	1001239e <__gesf2+0x42>
100123ca:	db04      	blt.n	100123d6 <__gesf2+0x7a>
100123cc:	42a5      	cmp	r5, r4
100123ce:	d8e6      	bhi.n	1001239e <__gesf2+0x42>
100123d0:	2000      	movs	r0, #0
100123d2:	42a5      	cmp	r5, r4
100123d4:	d2e6      	bcs.n	100123a4 <__gesf2+0x48>
100123d6:	4258      	negs	r0, r3
100123d8:	4143      	adcs	r3, r0
100123da:	2001      	movs	r0, #1
100123dc:	425b      	negs	r3, r3
100123de:	4318      	orrs	r0, r3
100123e0:	e7e0      	b.n	100123a4 <__gesf2+0x48>
100123e2:	46c0      	nop			; (mov r8, r8)

100123e4 <__lesf2>:
100123e4:	0243      	lsls	r3, r0, #9
100123e6:	b5f0      	push	{r4, r5, r6, r7, lr}
100123e8:	0042      	lsls	r2, r0, #1
100123ea:	004c      	lsls	r4, r1, #1
100123ec:	0a5e      	lsrs	r6, r3, #9
100123ee:	0fc3      	lsrs	r3, r0, #31
100123f0:	0248      	lsls	r0, r1, #9
100123f2:	0e12      	lsrs	r2, r2, #24
100123f4:	0a45      	lsrs	r5, r0, #9
100123f6:	0e24      	lsrs	r4, r4, #24
100123f8:	0fc9      	lsrs	r1, r1, #31
100123fa:	2aff      	cmp	r2, #255	; 0xff
100123fc:	d017      	beq.n	1001242e <__lesf2+0x4a>
100123fe:	2cff      	cmp	r4, #255	; 0xff
10012400:	d019      	beq.n	10012436 <__lesf2+0x52>
10012402:	2a00      	cmp	r2, #0
10012404:	d10b      	bne.n	1001241e <__lesf2+0x3a>
10012406:	4270      	negs	r0, r6
10012408:	4170      	adcs	r0, r6
1001240a:	2c00      	cmp	r4, #0
1001240c:	d017      	beq.n	1001243e <__lesf2+0x5a>
1001240e:	2800      	cmp	r0, #0
10012410:	d007      	beq.n	10012422 <__lesf2+0x3e>
10012412:	4248      	negs	r0, r1
10012414:	4141      	adcs	r1, r0
10012416:	2001      	movs	r0, #1
10012418:	4249      	negs	r1, r1
1001241a:	4308      	orrs	r0, r1
1001241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001241e:	2c00      	cmp	r4, #0
10012420:	d013      	beq.n	1001244a <__lesf2+0x66>
10012422:	428b      	cmp	r3, r1
10012424:	d014      	beq.n	10012450 <__lesf2+0x6c>
10012426:	4258      	negs	r0, r3
10012428:	2301      	movs	r3, #1
1001242a:	4318      	orrs	r0, r3
1001242c:	e7f6      	b.n	1001241c <__lesf2+0x38>
1001242e:	2002      	movs	r0, #2
10012430:	2e00      	cmp	r6, #0
10012432:	d1f3      	bne.n	1001241c <__lesf2+0x38>
10012434:	e7e3      	b.n	100123fe <__lesf2+0x1a>
10012436:	2002      	movs	r0, #2
10012438:	2d00      	cmp	r5, #0
1001243a:	d1ef      	bne.n	1001241c <__lesf2+0x38>
1001243c:	e7e1      	b.n	10012402 <__lesf2+0x1e>
1001243e:	2d00      	cmp	r5, #0
10012440:	d1e5      	bne.n	1001240e <__lesf2+0x2a>
10012442:	2000      	movs	r0, #0
10012444:	2e00      	cmp	r6, #0
10012446:	d0e9      	beq.n	1001241c <__lesf2+0x38>
10012448:	e7ed      	b.n	10012426 <__lesf2+0x42>
1001244a:	2d00      	cmp	r5, #0
1001244c:	d1e9      	bne.n	10012422 <__lesf2+0x3e>
1001244e:	e7ea      	b.n	10012426 <__lesf2+0x42>
10012450:	42a2      	cmp	r2, r4
10012452:	dce8      	bgt.n	10012426 <__lesf2+0x42>
10012454:	db04      	blt.n	10012460 <__lesf2+0x7c>
10012456:	42ae      	cmp	r6, r5
10012458:	d8e5      	bhi.n	10012426 <__lesf2+0x42>
1001245a:	2000      	movs	r0, #0
1001245c:	42ae      	cmp	r6, r5
1001245e:	d2dd      	bcs.n	1001241c <__lesf2+0x38>
10012460:	4258      	negs	r0, r3
10012462:	4143      	adcs	r3, r0
10012464:	2001      	movs	r0, #1
10012466:	425b      	negs	r3, r3
10012468:	4318      	orrs	r0, r3
1001246a:	e7d7      	b.n	1001241c <__lesf2+0x38>

1001246c <__aeabi_fmul>:
1001246c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001246e:	4657      	mov	r7, sl
10012470:	464e      	mov	r6, r9
10012472:	4645      	mov	r5, r8
10012474:	0043      	lsls	r3, r0, #1
10012476:	b4e0      	push	{r5, r6, r7}
10012478:	0246      	lsls	r6, r0, #9
1001247a:	4688      	mov	r8, r1
1001247c:	0a76      	lsrs	r6, r6, #9
1001247e:	0e1f      	lsrs	r7, r3, #24
10012480:	0fc4      	lsrs	r4, r0, #31
10012482:	2f00      	cmp	r7, #0
10012484:	d047      	beq.n	10012516 <__aeabi_fmul+0xaa>
10012486:	2fff      	cmp	r7, #255	; 0xff
10012488:	d025      	beq.n	100124d6 <__aeabi_fmul+0x6a>
1001248a:	2300      	movs	r3, #0
1001248c:	2580      	movs	r5, #128	; 0x80
1001248e:	469a      	mov	sl, r3
10012490:	4699      	mov	r9, r3
10012492:	00f6      	lsls	r6, r6, #3
10012494:	04ed      	lsls	r5, r5, #19
10012496:	432e      	orrs	r6, r5
10012498:	3f7f      	subs	r7, #127	; 0x7f
1001249a:	4643      	mov	r3, r8
1001249c:	4642      	mov	r2, r8
1001249e:	025d      	lsls	r5, r3, #9
100124a0:	0fd2      	lsrs	r2, r2, #31
100124a2:	005b      	lsls	r3, r3, #1
100124a4:	0a6d      	lsrs	r5, r5, #9
100124a6:	0e1b      	lsrs	r3, r3, #24
100124a8:	4690      	mov	r8, r2
100124aa:	d040      	beq.n	1001252e <__aeabi_fmul+0xc2>
100124ac:	2bff      	cmp	r3, #255	; 0xff
100124ae:	d039      	beq.n	10012524 <__aeabi_fmul+0xb8>
100124b0:	2280      	movs	r2, #128	; 0x80
100124b2:	2000      	movs	r0, #0
100124b4:	00ed      	lsls	r5, r5, #3
100124b6:	04d2      	lsls	r2, r2, #19
100124b8:	4315      	orrs	r5, r2
100124ba:	3b7f      	subs	r3, #127	; 0x7f
100124bc:	18fb      	adds	r3, r7, r3
100124be:	4642      	mov	r2, r8
100124c0:	4657      	mov	r7, sl
100124c2:	1c59      	adds	r1, r3, #1
100124c4:	4062      	eors	r2, r4
100124c6:	468c      	mov	ip, r1
100124c8:	4307      	orrs	r7, r0
100124ca:	2f0f      	cmp	r7, #15
100124cc:	d85c      	bhi.n	10012588 <__aeabi_fmul+0x11c>
100124ce:	496f      	ldr	r1, [pc, #444]	; (1001268c <__aeabi_fmul+0x220>)
100124d0:	00bf      	lsls	r7, r7, #2
100124d2:	59c9      	ldr	r1, [r1, r7]
100124d4:	468f      	mov	pc, r1
100124d6:	2e00      	cmp	r6, #0
100124d8:	d145      	bne.n	10012566 <__aeabi_fmul+0xfa>
100124da:	2308      	movs	r3, #8
100124dc:	469a      	mov	sl, r3
100124de:	3b06      	subs	r3, #6
100124e0:	4699      	mov	r9, r3
100124e2:	e7da      	b.n	1001249a <__aeabi_fmul+0x2e>
100124e4:	4642      	mov	r2, r8
100124e6:	2802      	cmp	r0, #2
100124e8:	d02d      	beq.n	10012546 <__aeabi_fmul+0xda>
100124ea:	2803      	cmp	r0, #3
100124ec:	d100      	bne.n	100124f0 <__aeabi_fmul+0x84>
100124ee:	e0c3      	b.n	10012678 <__aeabi_fmul+0x20c>
100124f0:	2801      	cmp	r0, #1
100124f2:	d000      	beq.n	100124f6 <__aeabi_fmul+0x8a>
100124f4:	e0a2      	b.n	1001263c <__aeabi_fmul+0x1d0>
100124f6:	2500      	movs	r5, #0
100124f8:	2600      	movs	r6, #0
100124fa:	4002      	ands	r2, r0
100124fc:	b2d4      	uxtb	r4, r2
100124fe:	0276      	lsls	r6, r6, #9
10012500:	05ed      	lsls	r5, r5, #23
10012502:	0a76      	lsrs	r6, r6, #9
10012504:	432e      	orrs	r6, r5
10012506:	07e4      	lsls	r4, r4, #31
10012508:	4326      	orrs	r6, r4
1001250a:	0030      	movs	r0, r6
1001250c:	bc1c      	pop	{r2, r3, r4}
1001250e:	4690      	mov	r8, r2
10012510:	4699      	mov	r9, r3
10012512:	46a2      	mov	sl, r4
10012514:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012516:	2e00      	cmp	r6, #0
10012518:	d11a      	bne.n	10012550 <__aeabi_fmul+0xe4>
1001251a:	2304      	movs	r3, #4
1001251c:	469a      	mov	sl, r3
1001251e:	3b03      	subs	r3, #3
10012520:	4699      	mov	r9, r3
10012522:	e7ba      	b.n	1001249a <__aeabi_fmul+0x2e>
10012524:	002a      	movs	r2, r5
10012526:	1e51      	subs	r1, r2, #1
10012528:	418a      	sbcs	r2, r1
1001252a:	1c90      	adds	r0, r2, #2
1001252c:	e7c6      	b.n	100124bc <__aeabi_fmul+0x50>
1001252e:	2001      	movs	r0, #1
10012530:	2d00      	cmp	r5, #0
10012532:	d0c3      	beq.n	100124bc <__aeabi_fmul+0x50>
10012534:	0028      	movs	r0, r5
10012536:	f001 fe33 	bl	100141a0 <__clzsi2>
1001253a:	1f43      	subs	r3, r0, #5
1001253c:	3076      	adds	r0, #118	; 0x76
1001253e:	409d      	lsls	r5, r3
10012540:	4243      	negs	r3, r0
10012542:	2000      	movs	r0, #0
10012544:	e7ba      	b.n	100124bc <__aeabi_fmul+0x50>
10012546:	2401      	movs	r4, #1
10012548:	25ff      	movs	r5, #255	; 0xff
1001254a:	4014      	ands	r4, r2
1001254c:	2600      	movs	r6, #0
1001254e:	e7d6      	b.n	100124fe <__aeabi_fmul+0x92>
10012550:	0030      	movs	r0, r6
10012552:	f001 fe25 	bl	100141a0 <__clzsi2>
10012556:	1f43      	subs	r3, r0, #5
10012558:	409e      	lsls	r6, r3
1001255a:	2300      	movs	r3, #0
1001255c:	3076      	adds	r0, #118	; 0x76
1001255e:	4247      	negs	r7, r0
10012560:	469a      	mov	sl, r3
10012562:	4699      	mov	r9, r3
10012564:	e799      	b.n	1001249a <__aeabi_fmul+0x2e>
10012566:	230c      	movs	r3, #12
10012568:	469a      	mov	sl, r3
1001256a:	3b09      	subs	r3, #9
1001256c:	4699      	mov	r9, r3
1001256e:	e794      	b.n	1001249a <__aeabi_fmul+0x2e>
10012570:	2680      	movs	r6, #128	; 0x80
10012572:	2400      	movs	r4, #0
10012574:	03f6      	lsls	r6, r6, #15
10012576:	25ff      	movs	r5, #255	; 0xff
10012578:	e7c1      	b.n	100124fe <__aeabi_fmul+0x92>
1001257a:	0035      	movs	r5, r6
1001257c:	4648      	mov	r0, r9
1001257e:	e7b2      	b.n	100124e6 <__aeabi_fmul+0x7a>
10012580:	0035      	movs	r5, r6
10012582:	0022      	movs	r2, r4
10012584:	4648      	mov	r0, r9
10012586:	e7ae      	b.n	100124e6 <__aeabi_fmul+0x7a>
10012588:	0429      	lsls	r1, r5, #16
1001258a:	0c09      	lsrs	r1, r1, #16
1001258c:	0008      	movs	r0, r1
1001258e:	0c37      	lsrs	r7, r6, #16
10012590:	0436      	lsls	r6, r6, #16
10012592:	0c36      	lsrs	r6, r6, #16
10012594:	0c2c      	lsrs	r4, r5, #16
10012596:	4379      	muls	r1, r7
10012598:	4370      	muls	r0, r6
1001259a:	4367      	muls	r7, r4
1001259c:	4374      	muls	r4, r6
1001259e:	0c06      	lsrs	r6, r0, #16
100125a0:	1864      	adds	r4, r4, r1
100125a2:	1936      	adds	r6, r6, r4
100125a4:	42b1      	cmp	r1, r6
100125a6:	d903      	bls.n	100125b0 <__aeabi_fmul+0x144>
100125a8:	2180      	movs	r1, #128	; 0x80
100125aa:	0249      	lsls	r1, r1, #9
100125ac:	4688      	mov	r8, r1
100125ae:	4447      	add	r7, r8
100125b0:	0400      	lsls	r0, r0, #16
100125b2:	0c00      	lsrs	r0, r0, #16
100125b4:	0431      	lsls	r1, r6, #16
100125b6:	1809      	adds	r1, r1, r0
100125b8:	018d      	lsls	r5, r1, #6
100125ba:	1e68      	subs	r0, r5, #1
100125bc:	4185      	sbcs	r5, r0
100125be:	0e89      	lsrs	r1, r1, #26
100125c0:	4329      	orrs	r1, r5
100125c2:	0c35      	lsrs	r5, r6, #16
100125c4:	19ed      	adds	r5, r5, r7
100125c6:	01ad      	lsls	r5, r5, #6
100125c8:	430d      	orrs	r5, r1
100125ca:	0129      	lsls	r1, r5, #4
100125cc:	d504      	bpl.n	100125d8 <__aeabi_fmul+0x16c>
100125ce:	2301      	movs	r3, #1
100125d0:	0869      	lsrs	r1, r5, #1
100125d2:	401d      	ands	r5, r3
100125d4:	4663      	mov	r3, ip
100125d6:	430d      	orrs	r5, r1
100125d8:	0019      	movs	r1, r3
100125da:	317f      	adds	r1, #127	; 0x7f
100125dc:	2900      	cmp	r1, #0
100125de:	dd25      	ble.n	1001262c <__aeabi_fmul+0x1c0>
100125e0:	0768      	lsls	r0, r5, #29
100125e2:	d004      	beq.n	100125ee <__aeabi_fmul+0x182>
100125e4:	200f      	movs	r0, #15
100125e6:	4028      	ands	r0, r5
100125e8:	2804      	cmp	r0, #4
100125ea:	d000      	beq.n	100125ee <__aeabi_fmul+0x182>
100125ec:	3504      	adds	r5, #4
100125ee:	0128      	lsls	r0, r5, #4
100125f0:	d503      	bpl.n	100125fa <__aeabi_fmul+0x18e>
100125f2:	4927      	ldr	r1, [pc, #156]	; (10012690 <__aeabi_fmul+0x224>)
100125f4:	3380      	adds	r3, #128	; 0x80
100125f6:	400d      	ands	r5, r1
100125f8:	0019      	movs	r1, r3
100125fa:	29fe      	cmp	r1, #254	; 0xfe
100125fc:	dca3      	bgt.n	10012546 <__aeabi_fmul+0xda>
100125fe:	2401      	movs	r4, #1
10012600:	01ad      	lsls	r5, r5, #6
10012602:	0a6e      	lsrs	r6, r5, #9
10012604:	4014      	ands	r4, r2
10012606:	b2cd      	uxtb	r5, r1
10012608:	e779      	b.n	100124fe <__aeabi_fmul+0x92>
1001260a:	2080      	movs	r0, #128	; 0x80
1001260c:	03c0      	lsls	r0, r0, #15
1001260e:	4206      	tst	r6, r0
10012610:	d007      	beq.n	10012622 <__aeabi_fmul+0x1b6>
10012612:	4205      	tst	r5, r0
10012614:	d105      	bne.n	10012622 <__aeabi_fmul+0x1b6>
10012616:	4328      	orrs	r0, r5
10012618:	0246      	lsls	r6, r0, #9
1001261a:	0a76      	lsrs	r6, r6, #9
1001261c:	4644      	mov	r4, r8
1001261e:	25ff      	movs	r5, #255	; 0xff
10012620:	e76d      	b.n	100124fe <__aeabi_fmul+0x92>
10012622:	4306      	orrs	r6, r0
10012624:	0276      	lsls	r6, r6, #9
10012626:	0a76      	lsrs	r6, r6, #9
10012628:	25ff      	movs	r5, #255	; 0xff
1001262a:	e768      	b.n	100124fe <__aeabi_fmul+0x92>
1001262c:	2401      	movs	r4, #1
1001262e:	1a61      	subs	r1, r4, r1
10012630:	291b      	cmp	r1, #27
10012632:	dd05      	ble.n	10012640 <__aeabi_fmul+0x1d4>
10012634:	4014      	ands	r4, r2
10012636:	2500      	movs	r5, #0
10012638:	2600      	movs	r6, #0
1001263a:	e760      	b.n	100124fe <__aeabi_fmul+0x92>
1001263c:	4663      	mov	r3, ip
1001263e:	e7cb      	b.n	100125d8 <__aeabi_fmul+0x16c>
10012640:	002e      	movs	r6, r5
10012642:	2320      	movs	r3, #32
10012644:	40ce      	lsrs	r6, r1
10012646:	1a59      	subs	r1, r3, r1
10012648:	408d      	lsls	r5, r1
1001264a:	1e6b      	subs	r3, r5, #1
1001264c:	419d      	sbcs	r5, r3
1001264e:	432e      	orrs	r6, r5
10012650:	0773      	lsls	r3, r6, #29
10012652:	d004      	beq.n	1001265e <__aeabi_fmul+0x1f2>
10012654:	230f      	movs	r3, #15
10012656:	4033      	ands	r3, r6
10012658:	2b04      	cmp	r3, #4
1001265a:	d000      	beq.n	1001265e <__aeabi_fmul+0x1f2>
1001265c:	3604      	adds	r6, #4
1001265e:	0173      	lsls	r3, r6, #5
10012660:	d504      	bpl.n	1001266c <__aeabi_fmul+0x200>
10012662:	2401      	movs	r4, #1
10012664:	2501      	movs	r5, #1
10012666:	4014      	ands	r4, r2
10012668:	2600      	movs	r6, #0
1001266a:	e748      	b.n	100124fe <__aeabi_fmul+0x92>
1001266c:	2401      	movs	r4, #1
1001266e:	01b6      	lsls	r6, r6, #6
10012670:	0a76      	lsrs	r6, r6, #9
10012672:	4014      	ands	r4, r2
10012674:	2500      	movs	r5, #0
10012676:	e742      	b.n	100124fe <__aeabi_fmul+0x92>
10012678:	2680      	movs	r6, #128	; 0x80
1001267a:	2401      	movs	r4, #1
1001267c:	03f6      	lsls	r6, r6, #15
1001267e:	432e      	orrs	r6, r5
10012680:	0276      	lsls	r6, r6, #9
10012682:	0a76      	lsrs	r6, r6, #9
10012684:	4014      	ands	r4, r2
10012686:	25ff      	movs	r5, #255	; 0xff
10012688:	e739      	b.n	100124fe <__aeabi_fmul+0x92>
1001268a:	46c0      	nop			; (mov r8, r8)
1001268c:	100173f8 	.word	0x100173f8
10012690:	f7ffffff 	.word	0xf7ffffff

10012694 <__aeabi_fsub>:
10012694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012696:	024a      	lsls	r2, r1, #9
10012698:	004e      	lsls	r6, r1, #1
1001269a:	0243      	lsls	r3, r0, #9
1001269c:	0044      	lsls	r4, r0, #1
1001269e:	0e24      	lsrs	r4, r4, #24
100126a0:	0fc5      	lsrs	r5, r0, #31
100126a2:	099b      	lsrs	r3, r3, #6
100126a4:	0e36      	lsrs	r6, r6, #24
100126a6:	0fc9      	lsrs	r1, r1, #31
100126a8:	0992      	lsrs	r2, r2, #6
100126aa:	2eff      	cmp	r6, #255	; 0xff
100126ac:	d100      	bne.n	100126b0 <__aeabi_fsub+0x1c>
100126ae:	e083      	b.n	100127b8 <__aeabi_fsub+0x124>
100126b0:	2001      	movs	r0, #1
100126b2:	4041      	eors	r1, r0
100126b4:	1ba0      	subs	r0, r4, r6
100126b6:	42a9      	cmp	r1, r5
100126b8:	d05c      	beq.n	10012774 <__aeabi_fsub+0xe0>
100126ba:	2800      	cmp	r0, #0
100126bc:	dc00      	bgt.n	100126c0 <__aeabi_fsub+0x2c>
100126be:	e095      	b.n	100127ec <__aeabi_fsub+0x158>
100126c0:	2e00      	cmp	r6, #0
100126c2:	d11c      	bne.n	100126fe <__aeabi_fsub+0x6a>
100126c4:	2a00      	cmp	r2, #0
100126c6:	d000      	beq.n	100126ca <__aeabi_fsub+0x36>
100126c8:	e081      	b.n	100127ce <__aeabi_fsub+0x13a>
100126ca:	075a      	lsls	r2, r3, #29
100126cc:	d004      	beq.n	100126d8 <__aeabi_fsub+0x44>
100126ce:	220f      	movs	r2, #15
100126d0:	401a      	ands	r2, r3
100126d2:	2a04      	cmp	r2, #4
100126d4:	d000      	beq.n	100126d8 <__aeabi_fsub+0x44>
100126d6:	3304      	adds	r3, #4
100126d8:	015a      	lsls	r2, r3, #5
100126da:	d53b      	bpl.n	10012754 <__aeabi_fsub+0xc0>
100126dc:	3401      	adds	r4, #1
100126de:	2cff      	cmp	r4, #255	; 0xff
100126e0:	d100      	bne.n	100126e4 <__aeabi_fsub+0x50>
100126e2:	e091      	b.n	10012808 <__aeabi_fsub+0x174>
100126e4:	2001      	movs	r0, #1
100126e6:	019b      	lsls	r3, r3, #6
100126e8:	0a5b      	lsrs	r3, r3, #9
100126ea:	b2e4      	uxtb	r4, r4
100126ec:	4005      	ands	r5, r0
100126ee:	025b      	lsls	r3, r3, #9
100126f0:	05e4      	lsls	r4, r4, #23
100126f2:	0a5b      	lsrs	r3, r3, #9
100126f4:	07ed      	lsls	r5, r5, #31
100126f6:	4323      	orrs	r3, r4
100126f8:	432b      	orrs	r3, r5
100126fa:	0018      	movs	r0, r3
100126fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100126fe:	2cff      	cmp	r4, #255	; 0xff
10012700:	d0e3      	beq.n	100126ca <__aeabi_fsub+0x36>
10012702:	2180      	movs	r1, #128	; 0x80
10012704:	04c9      	lsls	r1, r1, #19
10012706:	430a      	orrs	r2, r1
10012708:	281b      	cmp	r0, #27
1001270a:	dd00      	ble.n	1001270e <__aeabi_fsub+0x7a>
1001270c:	e090      	b.n	10012830 <__aeabi_fsub+0x19c>
1001270e:	0016      	movs	r6, r2
10012710:	2120      	movs	r1, #32
10012712:	40c6      	lsrs	r6, r0
10012714:	1a08      	subs	r0, r1, r0
10012716:	4082      	lsls	r2, r0
10012718:	1e51      	subs	r1, r2, #1
1001271a:	418a      	sbcs	r2, r1
1001271c:	4332      	orrs	r2, r6
1001271e:	1a9b      	subs	r3, r3, r2
10012720:	015a      	lsls	r2, r3, #5
10012722:	d515      	bpl.n	10012750 <__aeabi_fsub+0xbc>
10012724:	019b      	lsls	r3, r3, #6
10012726:	099e      	lsrs	r6, r3, #6
10012728:	0030      	movs	r0, r6
1001272a:	f001 fd39 	bl	100141a0 <__clzsi2>
1001272e:	3805      	subs	r0, #5
10012730:	4086      	lsls	r6, r0
10012732:	4284      	cmp	r4, r0
10012734:	dc6c      	bgt.n	10012810 <__aeabi_fsub+0x17c>
10012736:	1b04      	subs	r4, r0, r4
10012738:	0033      	movs	r3, r6
1001273a:	2020      	movs	r0, #32
1001273c:	3401      	adds	r4, #1
1001273e:	40e3      	lsrs	r3, r4
10012740:	1b04      	subs	r4, r0, r4
10012742:	40a6      	lsls	r6, r4
10012744:	1e72      	subs	r2, r6, #1
10012746:	4196      	sbcs	r6, r2
10012748:	2400      	movs	r4, #0
1001274a:	4333      	orrs	r3, r6
1001274c:	e7bd      	b.n	100126ca <__aeabi_fsub+0x36>
1001274e:	000d      	movs	r5, r1
10012750:	075a      	lsls	r2, r3, #29
10012752:	d1bc      	bne.n	100126ce <__aeabi_fsub+0x3a>
10012754:	08df      	lsrs	r7, r3, #3
10012756:	2301      	movs	r3, #1
10012758:	401d      	ands	r5, r3
1001275a:	2cff      	cmp	r4, #255	; 0xff
1001275c:	d133      	bne.n	100127c6 <__aeabi_fsub+0x132>
1001275e:	2f00      	cmp	r7, #0
10012760:	d100      	bne.n	10012764 <__aeabi_fsub+0xd0>
10012762:	e090      	b.n	10012886 <__aeabi_fsub+0x1f2>
10012764:	2280      	movs	r2, #128	; 0x80
10012766:	03d2      	lsls	r2, r2, #15
10012768:	0013      	movs	r3, r2
1001276a:	433b      	orrs	r3, r7
1001276c:	025b      	lsls	r3, r3, #9
1001276e:	0a5b      	lsrs	r3, r3, #9
10012770:	24ff      	movs	r4, #255	; 0xff
10012772:	e7bc      	b.n	100126ee <__aeabi_fsub+0x5a>
10012774:	2800      	cmp	r0, #0
10012776:	dd4f      	ble.n	10012818 <__aeabi_fsub+0x184>
10012778:	2e00      	cmp	r6, #0
1001277a:	d02e      	beq.n	100127da <__aeabi_fsub+0x146>
1001277c:	2cff      	cmp	r4, #255	; 0xff
1001277e:	d0a4      	beq.n	100126ca <__aeabi_fsub+0x36>
10012780:	2580      	movs	r5, #128	; 0x80
10012782:	04ed      	lsls	r5, r5, #19
10012784:	432a      	orrs	r2, r5
10012786:	281b      	cmp	r0, #27
10012788:	dd00      	ble.n	1001278c <__aeabi_fsub+0xf8>
1001278a:	e097      	b.n	100128bc <__aeabi_fsub+0x228>
1001278c:	0016      	movs	r6, r2
1001278e:	2520      	movs	r5, #32
10012790:	40c6      	lsrs	r6, r0
10012792:	1a28      	subs	r0, r5, r0
10012794:	4082      	lsls	r2, r0
10012796:	1e50      	subs	r0, r2, #1
10012798:	4182      	sbcs	r2, r0
1001279a:	4332      	orrs	r2, r6
1001279c:	189b      	adds	r3, r3, r2
1001279e:	015a      	lsls	r2, r3, #5
100127a0:	d5d5      	bpl.n	1001274e <__aeabi_fsub+0xba>
100127a2:	3401      	adds	r4, #1
100127a4:	2cff      	cmp	r4, #255	; 0xff
100127a6:	d06d      	beq.n	10012884 <__aeabi_fsub+0x1f0>
100127a8:	2201      	movs	r2, #1
100127aa:	487b      	ldr	r0, [pc, #492]	; (10012998 <__aeabi_fsub+0x304>)
100127ac:	401a      	ands	r2, r3
100127ae:	085b      	lsrs	r3, r3, #1
100127b0:	4003      	ands	r3, r0
100127b2:	4313      	orrs	r3, r2
100127b4:	000d      	movs	r5, r1
100127b6:	e788      	b.n	100126ca <__aeabi_fsub+0x36>
100127b8:	2a00      	cmp	r2, #0
100127ba:	d000      	beq.n	100127be <__aeabi_fsub+0x12a>
100127bc:	e77a      	b.n	100126b4 <__aeabi_fsub+0x20>
100127be:	e777      	b.n	100126b0 <__aeabi_fsub+0x1c>
100127c0:	1e03      	subs	r3, r0, #0
100127c2:	d1c5      	bne.n	10012750 <__aeabi_fsub+0xbc>
100127c4:	2500      	movs	r5, #0
100127c6:	027b      	lsls	r3, r7, #9
100127c8:	0a5b      	lsrs	r3, r3, #9
100127ca:	b2e4      	uxtb	r4, r4
100127cc:	e78f      	b.n	100126ee <__aeabi_fsub+0x5a>
100127ce:	3801      	subs	r0, #1
100127d0:	2800      	cmp	r0, #0
100127d2:	d0a4      	beq.n	1001271e <__aeabi_fsub+0x8a>
100127d4:	2cff      	cmp	r4, #255	; 0xff
100127d6:	d197      	bne.n	10012708 <__aeabi_fsub+0x74>
100127d8:	e777      	b.n	100126ca <__aeabi_fsub+0x36>
100127da:	2a00      	cmp	r2, #0
100127dc:	d100      	bne.n	100127e0 <__aeabi_fsub+0x14c>
100127de:	e774      	b.n	100126ca <__aeabi_fsub+0x36>
100127e0:	3801      	subs	r0, #1
100127e2:	2800      	cmp	r0, #0
100127e4:	d0da      	beq.n	1001279c <__aeabi_fsub+0x108>
100127e6:	2cff      	cmp	r4, #255	; 0xff
100127e8:	d1cd      	bne.n	10012786 <__aeabi_fsub+0xf2>
100127ea:	e76e      	b.n	100126ca <__aeabi_fsub+0x36>
100127ec:	2800      	cmp	r0, #0
100127ee:	d121      	bne.n	10012834 <__aeabi_fsub+0x1a0>
100127f0:	1c60      	adds	r0, r4, #1
100127f2:	b2c0      	uxtb	r0, r0
100127f4:	2801      	cmp	r0, #1
100127f6:	dd58      	ble.n	100128aa <__aeabi_fsub+0x216>
100127f8:	2780      	movs	r7, #128	; 0x80
100127fa:	1a9e      	subs	r6, r3, r2
100127fc:	04ff      	lsls	r7, r7, #19
100127fe:	4037      	ands	r7, r6
10012800:	d02f      	beq.n	10012862 <__aeabi_fsub+0x1ce>
10012802:	1ad6      	subs	r6, r2, r3
10012804:	000d      	movs	r5, r1
10012806:	e78f      	b.n	10012728 <__aeabi_fsub+0x94>
10012808:	2301      	movs	r3, #1
1001280a:	401d      	ands	r5, r3
1001280c:	2300      	movs	r3, #0
1001280e:	e76e      	b.n	100126ee <__aeabi_fsub+0x5a>
10012810:	4b62      	ldr	r3, [pc, #392]	; (1001299c <__aeabi_fsub+0x308>)
10012812:	1a24      	subs	r4, r4, r0
10012814:	4033      	ands	r3, r6
10012816:	e758      	b.n	100126ca <__aeabi_fsub+0x36>
10012818:	2800      	cmp	r0, #0
1001281a:	d151      	bne.n	100128c0 <__aeabi_fsub+0x22c>
1001281c:	1c60      	adds	r0, r4, #1
1001281e:	b2c6      	uxtb	r6, r0
10012820:	2e01      	cmp	r6, #1
10012822:	dd33      	ble.n	1001288c <__aeabi_fsub+0x1f8>
10012824:	28ff      	cmp	r0, #255	; 0xff
10012826:	d02d      	beq.n	10012884 <__aeabi_fsub+0x1f0>
10012828:	189b      	adds	r3, r3, r2
1001282a:	085b      	lsrs	r3, r3, #1
1001282c:	0004      	movs	r4, r0
1001282e:	e74c      	b.n	100126ca <__aeabi_fsub+0x36>
10012830:	2201      	movs	r2, #1
10012832:	e774      	b.n	1001271e <__aeabi_fsub+0x8a>
10012834:	2c00      	cmp	r4, #0
10012836:	d01a      	beq.n	1001286e <__aeabi_fsub+0x1da>
10012838:	2eff      	cmp	r6, #255	; 0xff
1001283a:	d01f      	beq.n	1001287c <__aeabi_fsub+0x1e8>
1001283c:	2480      	movs	r4, #128	; 0x80
1001283e:	04e4      	lsls	r4, r4, #19
10012840:	4240      	negs	r0, r0
10012842:	4323      	orrs	r3, r4
10012844:	281b      	cmp	r0, #27
10012846:	dd00      	ble.n	1001284a <__aeabi_fsub+0x1b6>
10012848:	e096      	b.n	10012978 <__aeabi_fsub+0x2e4>
1001284a:	001d      	movs	r5, r3
1001284c:	2420      	movs	r4, #32
1001284e:	40c5      	lsrs	r5, r0
10012850:	1a20      	subs	r0, r4, r0
10012852:	4083      	lsls	r3, r0
10012854:	1e58      	subs	r0, r3, #1
10012856:	4183      	sbcs	r3, r0
10012858:	432b      	orrs	r3, r5
1001285a:	1ad3      	subs	r3, r2, r3
1001285c:	0034      	movs	r4, r6
1001285e:	000d      	movs	r5, r1
10012860:	e75e      	b.n	10012720 <__aeabi_fsub+0x8c>
10012862:	2e00      	cmp	r6, #0
10012864:	d000      	beq.n	10012868 <__aeabi_fsub+0x1d4>
10012866:	e75f      	b.n	10012728 <__aeabi_fsub+0x94>
10012868:	2500      	movs	r5, #0
1001286a:	2400      	movs	r4, #0
1001286c:	e7ab      	b.n	100127c6 <__aeabi_fsub+0x132>
1001286e:	2b00      	cmp	r3, #0
10012870:	d044      	beq.n	100128fc <__aeabi_fsub+0x268>
10012872:	43c0      	mvns	r0, r0
10012874:	2800      	cmp	r0, #0
10012876:	d0f0      	beq.n	1001285a <__aeabi_fsub+0x1c6>
10012878:	2eff      	cmp	r6, #255	; 0xff
1001287a:	d1e3      	bne.n	10012844 <__aeabi_fsub+0x1b0>
1001287c:	0013      	movs	r3, r2
1001287e:	24ff      	movs	r4, #255	; 0xff
10012880:	000d      	movs	r5, r1
10012882:	e722      	b.n	100126ca <__aeabi_fsub+0x36>
10012884:	000d      	movs	r5, r1
10012886:	24ff      	movs	r4, #255	; 0xff
10012888:	2300      	movs	r3, #0
1001288a:	e730      	b.n	100126ee <__aeabi_fsub+0x5a>
1001288c:	2c00      	cmp	r4, #0
1001288e:	d15d      	bne.n	1001294c <__aeabi_fsub+0x2b8>
10012890:	2b00      	cmp	r3, #0
10012892:	d07d      	beq.n	10012990 <__aeabi_fsub+0x2fc>
10012894:	2a00      	cmp	r2, #0
10012896:	d100      	bne.n	1001289a <__aeabi_fsub+0x206>
10012898:	e717      	b.n	100126ca <__aeabi_fsub+0x36>
1001289a:	189b      	adds	r3, r3, r2
1001289c:	015a      	lsls	r2, r3, #5
1001289e:	d400      	bmi.n	100128a2 <__aeabi_fsub+0x20e>
100128a0:	e756      	b.n	10012750 <__aeabi_fsub+0xbc>
100128a2:	4a3e      	ldr	r2, [pc, #248]	; (1001299c <__aeabi_fsub+0x308>)
100128a4:	0004      	movs	r4, r0
100128a6:	4013      	ands	r3, r2
100128a8:	e70f      	b.n	100126ca <__aeabi_fsub+0x36>
100128aa:	2c00      	cmp	r4, #0
100128ac:	d11e      	bne.n	100128ec <__aeabi_fsub+0x258>
100128ae:	2b00      	cmp	r3, #0
100128b0:	d12f      	bne.n	10012912 <__aeabi_fsub+0x27e>
100128b2:	2a00      	cmp	r2, #0
100128b4:	d065      	beq.n	10012982 <__aeabi_fsub+0x2ee>
100128b6:	0013      	movs	r3, r2
100128b8:	000d      	movs	r5, r1
100128ba:	e706      	b.n	100126ca <__aeabi_fsub+0x36>
100128bc:	2201      	movs	r2, #1
100128be:	e76d      	b.n	1001279c <__aeabi_fsub+0x108>
100128c0:	2c00      	cmp	r4, #0
100128c2:	d11f      	bne.n	10012904 <__aeabi_fsub+0x270>
100128c4:	2b00      	cmp	r3, #0
100128c6:	d059      	beq.n	1001297c <__aeabi_fsub+0x2e8>
100128c8:	43c0      	mvns	r0, r0
100128ca:	2800      	cmp	r0, #0
100128cc:	d00b      	beq.n	100128e6 <__aeabi_fsub+0x252>
100128ce:	2eff      	cmp	r6, #255	; 0xff
100128d0:	d04f      	beq.n	10012972 <__aeabi_fsub+0x2de>
100128d2:	281b      	cmp	r0, #27
100128d4:	dc5e      	bgt.n	10012994 <__aeabi_fsub+0x300>
100128d6:	001d      	movs	r5, r3
100128d8:	2420      	movs	r4, #32
100128da:	40c5      	lsrs	r5, r0
100128dc:	1a20      	subs	r0, r4, r0
100128de:	4083      	lsls	r3, r0
100128e0:	1e58      	subs	r0, r3, #1
100128e2:	4183      	sbcs	r3, r0
100128e4:	432b      	orrs	r3, r5
100128e6:	189b      	adds	r3, r3, r2
100128e8:	0034      	movs	r4, r6
100128ea:	e758      	b.n	1001279e <__aeabi_fsub+0x10a>
100128ec:	2b00      	cmp	r3, #0
100128ee:	d11c      	bne.n	1001292a <__aeabi_fsub+0x296>
100128f0:	2a00      	cmp	r2, #0
100128f2:	d049      	beq.n	10012988 <__aeabi_fsub+0x2f4>
100128f4:	0013      	movs	r3, r2
100128f6:	000d      	movs	r5, r1
100128f8:	24ff      	movs	r4, #255	; 0xff
100128fa:	e6e6      	b.n	100126ca <__aeabi_fsub+0x36>
100128fc:	0013      	movs	r3, r2
100128fe:	0034      	movs	r4, r6
10012900:	000d      	movs	r5, r1
10012902:	e6e2      	b.n	100126ca <__aeabi_fsub+0x36>
10012904:	2eff      	cmp	r6, #255	; 0xff
10012906:	d034      	beq.n	10012972 <__aeabi_fsub+0x2de>
10012908:	2480      	movs	r4, #128	; 0x80
1001290a:	04e4      	lsls	r4, r4, #19
1001290c:	4240      	negs	r0, r0
1001290e:	4323      	orrs	r3, r4
10012910:	e7df      	b.n	100128d2 <__aeabi_fsub+0x23e>
10012912:	2a00      	cmp	r2, #0
10012914:	d100      	bne.n	10012918 <__aeabi_fsub+0x284>
10012916:	e6d8      	b.n	100126ca <__aeabi_fsub+0x36>
10012918:	2780      	movs	r7, #128	; 0x80
1001291a:	1a98      	subs	r0, r3, r2
1001291c:	04ff      	lsls	r7, r7, #19
1001291e:	4007      	ands	r7, r0
10012920:	d100      	bne.n	10012924 <__aeabi_fsub+0x290>
10012922:	e74d      	b.n	100127c0 <__aeabi_fsub+0x12c>
10012924:	1ad3      	subs	r3, r2, r3
10012926:	000d      	movs	r5, r1
10012928:	e6cf      	b.n	100126ca <__aeabi_fsub+0x36>
1001292a:	24ff      	movs	r4, #255	; 0xff
1001292c:	2a00      	cmp	r2, #0
1001292e:	d100      	bne.n	10012932 <__aeabi_fsub+0x29e>
10012930:	e6cb      	b.n	100126ca <__aeabi_fsub+0x36>
10012932:	2080      	movs	r0, #128	; 0x80
10012934:	08db      	lsrs	r3, r3, #3
10012936:	03c0      	lsls	r0, r0, #15
10012938:	4203      	tst	r3, r0
1001293a:	d004      	beq.n	10012946 <__aeabi_fsub+0x2b2>
1001293c:	08d2      	lsrs	r2, r2, #3
1001293e:	4202      	tst	r2, r0
10012940:	d101      	bne.n	10012946 <__aeabi_fsub+0x2b2>
10012942:	0013      	movs	r3, r2
10012944:	000d      	movs	r5, r1
10012946:	00db      	lsls	r3, r3, #3
10012948:	24ff      	movs	r4, #255	; 0xff
1001294a:	e6be      	b.n	100126ca <__aeabi_fsub+0x36>
1001294c:	2b00      	cmp	r3, #0
1001294e:	d010      	beq.n	10012972 <__aeabi_fsub+0x2de>
10012950:	24ff      	movs	r4, #255	; 0xff
10012952:	2a00      	cmp	r2, #0
10012954:	d100      	bne.n	10012958 <__aeabi_fsub+0x2c4>
10012956:	e6b8      	b.n	100126ca <__aeabi_fsub+0x36>
10012958:	2080      	movs	r0, #128	; 0x80
1001295a:	08db      	lsrs	r3, r3, #3
1001295c:	03c0      	lsls	r0, r0, #15
1001295e:	4203      	tst	r3, r0
10012960:	d003      	beq.n	1001296a <__aeabi_fsub+0x2d6>
10012962:	08d2      	lsrs	r2, r2, #3
10012964:	4202      	tst	r2, r0
10012966:	d100      	bne.n	1001296a <__aeabi_fsub+0x2d6>
10012968:	0013      	movs	r3, r2
1001296a:	00db      	lsls	r3, r3, #3
1001296c:	000d      	movs	r5, r1
1001296e:	24ff      	movs	r4, #255	; 0xff
10012970:	e6ab      	b.n	100126ca <__aeabi_fsub+0x36>
10012972:	0013      	movs	r3, r2
10012974:	24ff      	movs	r4, #255	; 0xff
10012976:	e6a8      	b.n	100126ca <__aeabi_fsub+0x36>
10012978:	2301      	movs	r3, #1
1001297a:	e76e      	b.n	1001285a <__aeabi_fsub+0x1c6>
1001297c:	0013      	movs	r3, r2
1001297e:	0034      	movs	r4, r6
10012980:	e6a3      	b.n	100126ca <__aeabi_fsub+0x36>
10012982:	2700      	movs	r7, #0
10012984:	2500      	movs	r5, #0
10012986:	e71e      	b.n	100127c6 <__aeabi_fsub+0x132>
10012988:	2780      	movs	r7, #128	; 0x80
1001298a:	2500      	movs	r5, #0
1001298c:	03ff      	lsls	r7, r7, #15
1001298e:	e6e9      	b.n	10012764 <__aeabi_fsub+0xd0>
10012990:	0013      	movs	r3, r2
10012992:	e69a      	b.n	100126ca <__aeabi_fsub+0x36>
10012994:	2301      	movs	r3, #1
10012996:	e7a6      	b.n	100128e6 <__aeabi_fsub+0x252>
10012998:	7dffffff 	.word	0x7dffffff
1001299c:	fbffffff 	.word	0xfbffffff

100129a0 <__aeabi_fcmpun>:
100129a0:	0243      	lsls	r3, r0, #9
100129a2:	0a5a      	lsrs	r2, r3, #9
100129a4:	0040      	lsls	r0, r0, #1
100129a6:	024b      	lsls	r3, r1, #9
100129a8:	0049      	lsls	r1, r1, #1
100129aa:	0e00      	lsrs	r0, r0, #24
100129ac:	0a5b      	lsrs	r3, r3, #9
100129ae:	0e09      	lsrs	r1, r1, #24
100129b0:	28ff      	cmp	r0, #255	; 0xff
100129b2:	d003      	beq.n	100129bc <__aeabi_fcmpun+0x1c>
100129b4:	2000      	movs	r0, #0
100129b6:	29ff      	cmp	r1, #255	; 0xff
100129b8:	d006      	beq.n	100129c8 <__aeabi_fcmpun+0x28>
100129ba:	4770      	bx	lr
100129bc:	38fe      	subs	r0, #254	; 0xfe
100129be:	2a00      	cmp	r2, #0
100129c0:	d1fb      	bne.n	100129ba <__aeabi_fcmpun+0x1a>
100129c2:	2000      	movs	r0, #0
100129c4:	29ff      	cmp	r1, #255	; 0xff
100129c6:	d1f8      	bne.n	100129ba <__aeabi_fcmpun+0x1a>
100129c8:	0018      	movs	r0, r3
100129ca:	1e43      	subs	r3, r0, #1
100129cc:	4198      	sbcs	r0, r3
100129ce:	e7f4      	b.n	100129ba <__aeabi_fcmpun+0x1a>

100129d0 <__aeabi_f2iz>:
100129d0:	0243      	lsls	r3, r0, #9
100129d2:	0a59      	lsrs	r1, r3, #9
100129d4:	0043      	lsls	r3, r0, #1
100129d6:	0fc2      	lsrs	r2, r0, #31
100129d8:	0e1b      	lsrs	r3, r3, #24
100129da:	2000      	movs	r0, #0
100129dc:	2b7e      	cmp	r3, #126	; 0x7e
100129de:	dd0e      	ble.n	100129fe <__aeabi_f2iz+0x2e>
100129e0:	2b9d      	cmp	r3, #157	; 0x9d
100129e2:	dc0d      	bgt.n	10012a00 <__aeabi_f2iz+0x30>
100129e4:	2080      	movs	r0, #128	; 0x80
100129e6:	0400      	lsls	r0, r0, #16
100129e8:	4301      	orrs	r1, r0
100129ea:	2b95      	cmp	r3, #149	; 0x95
100129ec:	dc0b      	bgt.n	10012a06 <__aeabi_f2iz+0x36>
100129ee:	2096      	movs	r0, #150	; 0x96
100129f0:	1ac3      	subs	r3, r0, r3
100129f2:	40d9      	lsrs	r1, r3
100129f4:	000b      	movs	r3, r1
100129f6:	4258      	negs	r0, r3
100129f8:	2a00      	cmp	r2, #0
100129fa:	d100      	bne.n	100129fe <__aeabi_f2iz+0x2e>
100129fc:	0018      	movs	r0, r3
100129fe:	4770      	bx	lr
10012a00:	4b03      	ldr	r3, [pc, #12]	; (10012a10 <__aeabi_f2iz+0x40>)
10012a02:	18d0      	adds	r0, r2, r3
10012a04:	e7fb      	b.n	100129fe <__aeabi_f2iz+0x2e>
10012a06:	3b96      	subs	r3, #150	; 0x96
10012a08:	4099      	lsls	r1, r3
10012a0a:	000b      	movs	r3, r1
10012a0c:	e7f3      	b.n	100129f6 <__aeabi_f2iz+0x26>
10012a0e:	46c0      	nop			; (mov r8, r8)
10012a10:	7fffffff 	.word	0x7fffffff

10012a14 <__aeabi_i2f>:
10012a14:	b570      	push	{r4, r5, r6, lr}
10012a16:	2800      	cmp	r0, #0
10012a18:	d030      	beq.n	10012a7c <__aeabi_i2f+0x68>
10012a1a:	17c3      	asrs	r3, r0, #31
10012a1c:	18c5      	adds	r5, r0, r3
10012a1e:	405d      	eors	r5, r3
10012a20:	0fc4      	lsrs	r4, r0, #31
10012a22:	0028      	movs	r0, r5
10012a24:	f001 fbbc 	bl	100141a0 <__clzsi2>
10012a28:	239e      	movs	r3, #158	; 0x9e
10012a2a:	1a1b      	subs	r3, r3, r0
10012a2c:	2b96      	cmp	r3, #150	; 0x96
10012a2e:	dc0d      	bgt.n	10012a4c <__aeabi_i2f+0x38>
10012a30:	2296      	movs	r2, #150	; 0x96
10012a32:	1ad2      	subs	r2, r2, r3
10012a34:	4095      	lsls	r5, r2
10012a36:	026a      	lsls	r2, r5, #9
10012a38:	0a52      	lsrs	r2, r2, #9
10012a3a:	b2d8      	uxtb	r0, r3
10012a3c:	0252      	lsls	r2, r2, #9
10012a3e:	05c0      	lsls	r0, r0, #23
10012a40:	0a52      	lsrs	r2, r2, #9
10012a42:	07e4      	lsls	r4, r4, #31
10012a44:	4302      	orrs	r2, r0
10012a46:	4322      	orrs	r2, r4
10012a48:	0010      	movs	r0, r2
10012a4a:	bd70      	pop	{r4, r5, r6, pc}
10012a4c:	2b99      	cmp	r3, #153	; 0x99
10012a4e:	dc19      	bgt.n	10012a84 <__aeabi_i2f+0x70>
10012a50:	2299      	movs	r2, #153	; 0x99
10012a52:	1ad2      	subs	r2, r2, r3
10012a54:	4095      	lsls	r5, r2
10012a56:	4a12      	ldr	r2, [pc, #72]	; (10012aa0 <__aeabi_i2f+0x8c>)
10012a58:	402a      	ands	r2, r5
10012a5a:	0769      	lsls	r1, r5, #29
10012a5c:	d004      	beq.n	10012a68 <__aeabi_i2f+0x54>
10012a5e:	210f      	movs	r1, #15
10012a60:	400d      	ands	r5, r1
10012a62:	2d04      	cmp	r5, #4
10012a64:	d000      	beq.n	10012a68 <__aeabi_i2f+0x54>
10012a66:	3204      	adds	r2, #4
10012a68:	0151      	lsls	r1, r2, #5
10012a6a:	d503      	bpl.n	10012a74 <__aeabi_i2f+0x60>
10012a6c:	4b0c      	ldr	r3, [pc, #48]	; (10012aa0 <__aeabi_i2f+0x8c>)
10012a6e:	401a      	ands	r2, r3
10012a70:	239f      	movs	r3, #159	; 0x9f
10012a72:	1a1b      	subs	r3, r3, r0
10012a74:	0192      	lsls	r2, r2, #6
10012a76:	0a52      	lsrs	r2, r2, #9
10012a78:	b2d8      	uxtb	r0, r3
10012a7a:	e7df      	b.n	10012a3c <__aeabi_i2f+0x28>
10012a7c:	2400      	movs	r4, #0
10012a7e:	2000      	movs	r0, #0
10012a80:	2200      	movs	r2, #0
10012a82:	e7db      	b.n	10012a3c <__aeabi_i2f+0x28>
10012a84:	2205      	movs	r2, #5
10012a86:	002e      	movs	r6, r5
10012a88:	1a12      	subs	r2, r2, r0
10012a8a:	21b9      	movs	r1, #185	; 0xb9
10012a8c:	40d6      	lsrs	r6, r2
10012a8e:	002a      	movs	r2, r5
10012a90:	1ac9      	subs	r1, r1, r3
10012a92:	408a      	lsls	r2, r1
10012a94:	1e55      	subs	r5, r2, #1
10012a96:	41aa      	sbcs	r2, r5
10012a98:	0035      	movs	r5, r6
10012a9a:	4315      	orrs	r5, r2
10012a9c:	e7db      	b.n	10012a56 <__aeabi_i2f+0x42>
10012a9e:	46c0      	nop			; (mov r8, r8)
10012aa0:	fbffffff 	.word	0xfbffffff

10012aa4 <__aeabi_ui2f>:
10012aa4:	b570      	push	{r4, r5, r6, lr}
10012aa6:	1e04      	subs	r4, r0, #0
10012aa8:	d028      	beq.n	10012afc <__aeabi_ui2f+0x58>
10012aaa:	f001 fb79 	bl	100141a0 <__clzsi2>
10012aae:	239e      	movs	r3, #158	; 0x9e
10012ab0:	1a1b      	subs	r3, r3, r0
10012ab2:	2b96      	cmp	r3, #150	; 0x96
10012ab4:	dc0a      	bgt.n	10012acc <__aeabi_ui2f+0x28>
10012ab6:	2296      	movs	r2, #150	; 0x96
10012ab8:	1ad2      	subs	r2, r2, r3
10012aba:	4094      	lsls	r4, r2
10012abc:	0262      	lsls	r2, r4, #9
10012abe:	0a52      	lsrs	r2, r2, #9
10012ac0:	b2d8      	uxtb	r0, r3
10012ac2:	0252      	lsls	r2, r2, #9
10012ac4:	0a52      	lsrs	r2, r2, #9
10012ac6:	05c0      	lsls	r0, r0, #23
10012ac8:	4310      	orrs	r0, r2
10012aca:	bd70      	pop	{r4, r5, r6, pc}
10012acc:	2b99      	cmp	r3, #153	; 0x99
10012ace:	dc18      	bgt.n	10012b02 <__aeabi_ui2f+0x5e>
10012ad0:	2299      	movs	r2, #153	; 0x99
10012ad2:	1ad2      	subs	r2, r2, r3
10012ad4:	4094      	lsls	r4, r2
10012ad6:	4a11      	ldr	r2, [pc, #68]	; (10012b1c <__aeabi_ui2f+0x78>)
10012ad8:	4022      	ands	r2, r4
10012ada:	0761      	lsls	r1, r4, #29
10012adc:	d004      	beq.n	10012ae8 <__aeabi_ui2f+0x44>
10012ade:	210f      	movs	r1, #15
10012ae0:	400c      	ands	r4, r1
10012ae2:	2c04      	cmp	r4, #4
10012ae4:	d000      	beq.n	10012ae8 <__aeabi_ui2f+0x44>
10012ae6:	3204      	adds	r2, #4
10012ae8:	0151      	lsls	r1, r2, #5
10012aea:	d503      	bpl.n	10012af4 <__aeabi_ui2f+0x50>
10012aec:	4b0b      	ldr	r3, [pc, #44]	; (10012b1c <__aeabi_ui2f+0x78>)
10012aee:	401a      	ands	r2, r3
10012af0:	239f      	movs	r3, #159	; 0x9f
10012af2:	1a1b      	subs	r3, r3, r0
10012af4:	0192      	lsls	r2, r2, #6
10012af6:	0a52      	lsrs	r2, r2, #9
10012af8:	b2d8      	uxtb	r0, r3
10012afa:	e7e2      	b.n	10012ac2 <__aeabi_ui2f+0x1e>
10012afc:	2000      	movs	r0, #0
10012afe:	2200      	movs	r2, #0
10012b00:	e7df      	b.n	10012ac2 <__aeabi_ui2f+0x1e>
10012b02:	2205      	movs	r2, #5
10012b04:	0025      	movs	r5, r4
10012b06:	1a12      	subs	r2, r2, r0
10012b08:	21b9      	movs	r1, #185	; 0xb9
10012b0a:	40d5      	lsrs	r5, r2
10012b0c:	0022      	movs	r2, r4
10012b0e:	1ac9      	subs	r1, r1, r3
10012b10:	408a      	lsls	r2, r1
10012b12:	1e54      	subs	r4, r2, #1
10012b14:	41a2      	sbcs	r2, r4
10012b16:	002c      	movs	r4, r5
10012b18:	4314      	orrs	r4, r2
10012b1a:	e7dc      	b.n	10012ad6 <__aeabi_ui2f+0x32>
10012b1c:	fbffffff 	.word	0xfbffffff

10012b20 <__aeabi_ddiv>:
10012b20:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b22:	4656      	mov	r6, sl
10012b24:	464d      	mov	r5, r9
10012b26:	4644      	mov	r4, r8
10012b28:	465f      	mov	r7, fp
10012b2a:	b4f0      	push	{r4, r5, r6, r7}
10012b2c:	001d      	movs	r5, r3
10012b2e:	030e      	lsls	r6, r1, #12
10012b30:	004c      	lsls	r4, r1, #1
10012b32:	0fcb      	lsrs	r3, r1, #31
10012b34:	b087      	sub	sp, #28
10012b36:	0007      	movs	r7, r0
10012b38:	4692      	mov	sl, r2
10012b3a:	4681      	mov	r9, r0
10012b3c:	0b36      	lsrs	r6, r6, #12
10012b3e:	0d64      	lsrs	r4, r4, #21
10012b40:	4698      	mov	r8, r3
10012b42:	d06a      	beq.n	10012c1a <__aeabi_ddiv+0xfa>
10012b44:	4b6d      	ldr	r3, [pc, #436]	; (10012cfc <__aeabi_ddiv+0x1dc>)
10012b46:	429c      	cmp	r4, r3
10012b48:	d035      	beq.n	10012bb6 <__aeabi_ddiv+0x96>
10012b4a:	2280      	movs	r2, #128	; 0x80
10012b4c:	0f43      	lsrs	r3, r0, #29
10012b4e:	0412      	lsls	r2, r2, #16
10012b50:	4313      	orrs	r3, r2
10012b52:	00f6      	lsls	r6, r6, #3
10012b54:	431e      	orrs	r6, r3
10012b56:	00c3      	lsls	r3, r0, #3
10012b58:	4699      	mov	r9, r3
10012b5a:	4b69      	ldr	r3, [pc, #420]	; (10012d00 <__aeabi_ddiv+0x1e0>)
10012b5c:	2700      	movs	r7, #0
10012b5e:	469c      	mov	ip, r3
10012b60:	2300      	movs	r3, #0
10012b62:	4464      	add	r4, ip
10012b64:	9302      	str	r3, [sp, #8]
10012b66:	032b      	lsls	r3, r5, #12
10012b68:	0068      	lsls	r0, r5, #1
10012b6a:	0b1b      	lsrs	r3, r3, #12
10012b6c:	0fed      	lsrs	r5, r5, #31
10012b6e:	4651      	mov	r1, sl
10012b70:	469b      	mov	fp, r3
10012b72:	0d40      	lsrs	r0, r0, #21
10012b74:	9500      	str	r5, [sp, #0]
10012b76:	d100      	bne.n	10012b7a <__aeabi_ddiv+0x5a>
10012b78:	e078      	b.n	10012c6c <__aeabi_ddiv+0x14c>
10012b7a:	4b60      	ldr	r3, [pc, #384]	; (10012cfc <__aeabi_ddiv+0x1dc>)
10012b7c:	4298      	cmp	r0, r3
10012b7e:	d06c      	beq.n	10012c5a <__aeabi_ddiv+0x13a>
10012b80:	465b      	mov	r3, fp
10012b82:	00da      	lsls	r2, r3, #3
10012b84:	0f4b      	lsrs	r3, r1, #29
10012b86:	2180      	movs	r1, #128	; 0x80
10012b88:	0409      	lsls	r1, r1, #16
10012b8a:	430b      	orrs	r3, r1
10012b8c:	4313      	orrs	r3, r2
10012b8e:	469b      	mov	fp, r3
10012b90:	4653      	mov	r3, sl
10012b92:	00d9      	lsls	r1, r3, #3
10012b94:	4b5a      	ldr	r3, [pc, #360]	; (10012d00 <__aeabi_ddiv+0x1e0>)
10012b96:	469c      	mov	ip, r3
10012b98:	2300      	movs	r3, #0
10012b9a:	4460      	add	r0, ip
10012b9c:	4642      	mov	r2, r8
10012b9e:	1a20      	subs	r0, r4, r0
10012ba0:	406a      	eors	r2, r5
10012ba2:	4692      	mov	sl, r2
10012ba4:	9001      	str	r0, [sp, #4]
10012ba6:	431f      	orrs	r7, r3
10012ba8:	2f0f      	cmp	r7, #15
10012baa:	d900      	bls.n	10012bae <__aeabi_ddiv+0x8e>
10012bac:	e0b0      	b.n	10012d10 <__aeabi_ddiv+0x1f0>
10012bae:	4855      	ldr	r0, [pc, #340]	; (10012d04 <__aeabi_ddiv+0x1e4>)
10012bb0:	00bf      	lsls	r7, r7, #2
10012bb2:	59c0      	ldr	r0, [r0, r7]
10012bb4:	4687      	mov	pc, r0
10012bb6:	4337      	orrs	r7, r6
10012bb8:	d000      	beq.n	10012bbc <__aeabi_ddiv+0x9c>
10012bba:	e088      	b.n	10012cce <__aeabi_ddiv+0x1ae>
10012bbc:	2300      	movs	r3, #0
10012bbe:	4699      	mov	r9, r3
10012bc0:	3302      	adds	r3, #2
10012bc2:	2708      	movs	r7, #8
10012bc4:	2600      	movs	r6, #0
10012bc6:	9302      	str	r3, [sp, #8]
10012bc8:	e7cd      	b.n	10012b66 <__aeabi_ddiv+0x46>
10012bca:	4643      	mov	r3, r8
10012bcc:	46b3      	mov	fp, r6
10012bce:	4649      	mov	r1, r9
10012bd0:	9300      	str	r3, [sp, #0]
10012bd2:	9b02      	ldr	r3, [sp, #8]
10012bd4:	9a00      	ldr	r2, [sp, #0]
10012bd6:	4692      	mov	sl, r2
10012bd8:	2b02      	cmp	r3, #2
10012bda:	d000      	beq.n	10012bde <__aeabi_ddiv+0xbe>
10012bdc:	e1bf      	b.n	10012f5e <__aeabi_ddiv+0x43e>
10012bde:	2100      	movs	r1, #0
10012be0:	4653      	mov	r3, sl
10012be2:	2201      	movs	r2, #1
10012be4:	2600      	movs	r6, #0
10012be6:	4689      	mov	r9, r1
10012be8:	401a      	ands	r2, r3
10012bea:	4b44      	ldr	r3, [pc, #272]	; (10012cfc <__aeabi_ddiv+0x1dc>)
10012bec:	2100      	movs	r1, #0
10012bee:	0336      	lsls	r6, r6, #12
10012bf0:	0d0c      	lsrs	r4, r1, #20
10012bf2:	0524      	lsls	r4, r4, #20
10012bf4:	0b36      	lsrs	r6, r6, #12
10012bf6:	4326      	orrs	r6, r4
10012bf8:	4c43      	ldr	r4, [pc, #268]	; (10012d08 <__aeabi_ddiv+0x1e8>)
10012bfa:	051b      	lsls	r3, r3, #20
10012bfc:	4026      	ands	r6, r4
10012bfe:	431e      	orrs	r6, r3
10012c00:	0076      	lsls	r6, r6, #1
10012c02:	07d2      	lsls	r2, r2, #31
10012c04:	0876      	lsrs	r6, r6, #1
10012c06:	4316      	orrs	r6, r2
10012c08:	4648      	mov	r0, r9
10012c0a:	0031      	movs	r1, r6
10012c0c:	b007      	add	sp, #28
10012c0e:	bc3c      	pop	{r2, r3, r4, r5}
10012c10:	4690      	mov	r8, r2
10012c12:	4699      	mov	r9, r3
10012c14:	46a2      	mov	sl, r4
10012c16:	46ab      	mov	fp, r5
10012c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c1a:	0033      	movs	r3, r6
10012c1c:	4303      	orrs	r3, r0
10012c1e:	d04f      	beq.n	10012cc0 <__aeabi_ddiv+0x1a0>
10012c20:	2e00      	cmp	r6, #0
10012c22:	d100      	bne.n	10012c26 <__aeabi_ddiv+0x106>
10012c24:	e1bc      	b.n	10012fa0 <__aeabi_ddiv+0x480>
10012c26:	0030      	movs	r0, r6
10012c28:	f001 faba 	bl	100141a0 <__clzsi2>
10012c2c:	0003      	movs	r3, r0
10012c2e:	3b0b      	subs	r3, #11
10012c30:	2b1c      	cmp	r3, #28
10012c32:	dd00      	ble.n	10012c36 <__aeabi_ddiv+0x116>
10012c34:	e1ad      	b.n	10012f92 <__aeabi_ddiv+0x472>
10012c36:	221d      	movs	r2, #29
10012c38:	0001      	movs	r1, r0
10012c3a:	1ad3      	subs	r3, r2, r3
10012c3c:	3908      	subs	r1, #8
10012c3e:	003a      	movs	r2, r7
10012c40:	408f      	lsls	r7, r1
10012c42:	408e      	lsls	r6, r1
10012c44:	40da      	lsrs	r2, r3
10012c46:	46b9      	mov	r9, r7
10012c48:	4316      	orrs	r6, r2
10012c4a:	4b30      	ldr	r3, [pc, #192]	; (10012d0c <__aeabi_ddiv+0x1ec>)
10012c4c:	2700      	movs	r7, #0
10012c4e:	469c      	mov	ip, r3
10012c50:	2300      	movs	r3, #0
10012c52:	4460      	add	r0, ip
10012c54:	4244      	negs	r4, r0
10012c56:	9302      	str	r3, [sp, #8]
10012c58:	e785      	b.n	10012b66 <__aeabi_ddiv+0x46>
10012c5a:	4653      	mov	r3, sl
10012c5c:	465a      	mov	r2, fp
10012c5e:	4313      	orrs	r3, r2
10012c60:	d12c      	bne.n	10012cbc <__aeabi_ddiv+0x19c>
10012c62:	2300      	movs	r3, #0
10012c64:	2100      	movs	r1, #0
10012c66:	469b      	mov	fp, r3
10012c68:	3302      	adds	r3, #2
10012c6a:	e797      	b.n	10012b9c <__aeabi_ddiv+0x7c>
10012c6c:	430b      	orrs	r3, r1
10012c6e:	d020      	beq.n	10012cb2 <__aeabi_ddiv+0x192>
10012c70:	465b      	mov	r3, fp
10012c72:	2b00      	cmp	r3, #0
10012c74:	d100      	bne.n	10012c78 <__aeabi_ddiv+0x158>
10012c76:	e19e      	b.n	10012fb6 <__aeabi_ddiv+0x496>
10012c78:	4658      	mov	r0, fp
10012c7a:	f001 fa91 	bl	100141a0 <__clzsi2>
10012c7e:	0003      	movs	r3, r0
10012c80:	3b0b      	subs	r3, #11
10012c82:	2b1c      	cmp	r3, #28
10012c84:	dd00      	ble.n	10012c88 <__aeabi_ddiv+0x168>
10012c86:	e18f      	b.n	10012fa8 <__aeabi_ddiv+0x488>
10012c88:	0002      	movs	r2, r0
10012c8a:	4659      	mov	r1, fp
10012c8c:	3a08      	subs	r2, #8
10012c8e:	4091      	lsls	r1, r2
10012c90:	468b      	mov	fp, r1
10012c92:	211d      	movs	r1, #29
10012c94:	1acb      	subs	r3, r1, r3
10012c96:	4651      	mov	r1, sl
10012c98:	40d9      	lsrs	r1, r3
10012c9a:	000b      	movs	r3, r1
10012c9c:	4659      	mov	r1, fp
10012c9e:	430b      	orrs	r3, r1
10012ca0:	4651      	mov	r1, sl
10012ca2:	469b      	mov	fp, r3
10012ca4:	4091      	lsls	r1, r2
10012ca6:	4b19      	ldr	r3, [pc, #100]	; (10012d0c <__aeabi_ddiv+0x1ec>)
10012ca8:	469c      	mov	ip, r3
10012caa:	4460      	add	r0, ip
10012cac:	4240      	negs	r0, r0
10012cae:	2300      	movs	r3, #0
10012cb0:	e774      	b.n	10012b9c <__aeabi_ddiv+0x7c>
10012cb2:	2300      	movs	r3, #0
10012cb4:	2100      	movs	r1, #0
10012cb6:	469b      	mov	fp, r3
10012cb8:	3301      	adds	r3, #1
10012cba:	e76f      	b.n	10012b9c <__aeabi_ddiv+0x7c>
10012cbc:	2303      	movs	r3, #3
10012cbe:	e76d      	b.n	10012b9c <__aeabi_ddiv+0x7c>
10012cc0:	2300      	movs	r3, #0
10012cc2:	4699      	mov	r9, r3
10012cc4:	3301      	adds	r3, #1
10012cc6:	2704      	movs	r7, #4
10012cc8:	2600      	movs	r6, #0
10012cca:	9302      	str	r3, [sp, #8]
10012ccc:	e74b      	b.n	10012b66 <__aeabi_ddiv+0x46>
10012cce:	2303      	movs	r3, #3
10012cd0:	270c      	movs	r7, #12
10012cd2:	9302      	str	r3, [sp, #8]
10012cd4:	e747      	b.n	10012b66 <__aeabi_ddiv+0x46>
10012cd6:	2201      	movs	r2, #1
10012cd8:	1ad5      	subs	r5, r2, r3
10012cda:	2d38      	cmp	r5, #56	; 0x38
10012cdc:	dc00      	bgt.n	10012ce0 <__aeabi_ddiv+0x1c0>
10012cde:	e1b0      	b.n	10013042 <__aeabi_ddiv+0x522>
10012ce0:	4653      	mov	r3, sl
10012ce2:	401a      	ands	r2, r3
10012ce4:	2100      	movs	r1, #0
10012ce6:	2300      	movs	r3, #0
10012ce8:	2600      	movs	r6, #0
10012cea:	4689      	mov	r9, r1
10012cec:	e77e      	b.n	10012bec <__aeabi_ddiv+0xcc>
10012cee:	2300      	movs	r3, #0
10012cf0:	2680      	movs	r6, #128	; 0x80
10012cf2:	4699      	mov	r9, r3
10012cf4:	2200      	movs	r2, #0
10012cf6:	0336      	lsls	r6, r6, #12
10012cf8:	4b00      	ldr	r3, [pc, #0]	; (10012cfc <__aeabi_ddiv+0x1dc>)
10012cfa:	e777      	b.n	10012bec <__aeabi_ddiv+0xcc>
10012cfc:	000007ff 	.word	0x000007ff
10012d00:	fffffc01 	.word	0xfffffc01
10012d04:	10017438 	.word	0x10017438
10012d08:	800fffff 	.word	0x800fffff
10012d0c:	000003f3 	.word	0x000003f3
10012d10:	455e      	cmp	r6, fp
10012d12:	d900      	bls.n	10012d16 <__aeabi_ddiv+0x1f6>
10012d14:	e172      	b.n	10012ffc <__aeabi_ddiv+0x4dc>
10012d16:	d100      	bne.n	10012d1a <__aeabi_ddiv+0x1fa>
10012d18:	e16d      	b.n	10012ff6 <__aeabi_ddiv+0x4d6>
10012d1a:	9b01      	ldr	r3, [sp, #4]
10012d1c:	464d      	mov	r5, r9
10012d1e:	3b01      	subs	r3, #1
10012d20:	9301      	str	r3, [sp, #4]
10012d22:	2300      	movs	r3, #0
10012d24:	0034      	movs	r4, r6
10012d26:	9302      	str	r3, [sp, #8]
10012d28:	465b      	mov	r3, fp
10012d2a:	021e      	lsls	r6, r3, #8
10012d2c:	0e0b      	lsrs	r3, r1, #24
10012d2e:	431e      	orrs	r6, r3
10012d30:	020b      	lsls	r3, r1, #8
10012d32:	9303      	str	r3, [sp, #12]
10012d34:	0c33      	lsrs	r3, r6, #16
10012d36:	4699      	mov	r9, r3
10012d38:	0433      	lsls	r3, r6, #16
10012d3a:	0c1b      	lsrs	r3, r3, #16
10012d3c:	4649      	mov	r1, r9
10012d3e:	0020      	movs	r0, r4
10012d40:	9300      	str	r3, [sp, #0]
10012d42:	f7fe fdc3 	bl	100118cc <__aeabi_uidiv>
10012d46:	9b00      	ldr	r3, [sp, #0]
10012d48:	0037      	movs	r7, r6
10012d4a:	4343      	muls	r3, r0
10012d4c:	0006      	movs	r6, r0
10012d4e:	4649      	mov	r1, r9
10012d50:	0020      	movs	r0, r4
10012d52:	4698      	mov	r8, r3
10012d54:	f7fe fe40 	bl	100119d8 <__aeabi_uidivmod>
10012d58:	0c2c      	lsrs	r4, r5, #16
10012d5a:	0409      	lsls	r1, r1, #16
10012d5c:	430c      	orrs	r4, r1
10012d5e:	45a0      	cmp	r8, r4
10012d60:	d909      	bls.n	10012d76 <__aeabi_ddiv+0x256>
10012d62:	19e4      	adds	r4, r4, r7
10012d64:	1e73      	subs	r3, r6, #1
10012d66:	42a7      	cmp	r7, r4
10012d68:	d900      	bls.n	10012d6c <__aeabi_ddiv+0x24c>
10012d6a:	e15c      	b.n	10013026 <__aeabi_ddiv+0x506>
10012d6c:	45a0      	cmp	r8, r4
10012d6e:	d800      	bhi.n	10012d72 <__aeabi_ddiv+0x252>
10012d70:	e159      	b.n	10013026 <__aeabi_ddiv+0x506>
10012d72:	3e02      	subs	r6, #2
10012d74:	19e4      	adds	r4, r4, r7
10012d76:	4643      	mov	r3, r8
10012d78:	1ae4      	subs	r4, r4, r3
10012d7a:	4649      	mov	r1, r9
10012d7c:	0020      	movs	r0, r4
10012d7e:	f7fe fda5 	bl	100118cc <__aeabi_uidiv>
10012d82:	0003      	movs	r3, r0
10012d84:	9a00      	ldr	r2, [sp, #0]
10012d86:	4680      	mov	r8, r0
10012d88:	4353      	muls	r3, r2
10012d8a:	4649      	mov	r1, r9
10012d8c:	0020      	movs	r0, r4
10012d8e:	469b      	mov	fp, r3
10012d90:	f7fe fe22 	bl	100119d8 <__aeabi_uidivmod>
10012d94:	042a      	lsls	r2, r5, #16
10012d96:	0409      	lsls	r1, r1, #16
10012d98:	0c12      	lsrs	r2, r2, #16
10012d9a:	430a      	orrs	r2, r1
10012d9c:	4593      	cmp	fp, r2
10012d9e:	d90d      	bls.n	10012dbc <__aeabi_ddiv+0x29c>
10012da0:	4643      	mov	r3, r8
10012da2:	19d2      	adds	r2, r2, r7
10012da4:	3b01      	subs	r3, #1
10012da6:	4297      	cmp	r7, r2
10012da8:	d900      	bls.n	10012dac <__aeabi_ddiv+0x28c>
10012daa:	e13a      	b.n	10013022 <__aeabi_ddiv+0x502>
10012dac:	4593      	cmp	fp, r2
10012dae:	d800      	bhi.n	10012db2 <__aeabi_ddiv+0x292>
10012db0:	e137      	b.n	10013022 <__aeabi_ddiv+0x502>
10012db2:	2302      	movs	r3, #2
10012db4:	425b      	negs	r3, r3
10012db6:	469c      	mov	ip, r3
10012db8:	19d2      	adds	r2, r2, r7
10012dba:	44e0      	add	r8, ip
10012dbc:	465b      	mov	r3, fp
10012dbe:	1ad2      	subs	r2, r2, r3
10012dc0:	4643      	mov	r3, r8
10012dc2:	0436      	lsls	r6, r6, #16
10012dc4:	4333      	orrs	r3, r6
10012dc6:	469b      	mov	fp, r3
10012dc8:	9903      	ldr	r1, [sp, #12]
10012dca:	0c18      	lsrs	r0, r3, #16
10012dcc:	0c0b      	lsrs	r3, r1, #16
10012dce:	001d      	movs	r5, r3
10012dd0:	9305      	str	r3, [sp, #20]
10012dd2:	0409      	lsls	r1, r1, #16
10012dd4:	465b      	mov	r3, fp
10012dd6:	0c09      	lsrs	r1, r1, #16
10012dd8:	000c      	movs	r4, r1
10012dda:	041b      	lsls	r3, r3, #16
10012ddc:	0c1b      	lsrs	r3, r3, #16
10012dde:	4344      	muls	r4, r0
10012de0:	9104      	str	r1, [sp, #16]
10012de2:	4359      	muls	r1, r3
10012de4:	436b      	muls	r3, r5
10012de6:	4368      	muls	r0, r5
10012de8:	191b      	adds	r3, r3, r4
10012dea:	0c0d      	lsrs	r5, r1, #16
10012dec:	18eb      	adds	r3, r5, r3
10012dee:	429c      	cmp	r4, r3
10012df0:	d903      	bls.n	10012dfa <__aeabi_ddiv+0x2da>
10012df2:	2480      	movs	r4, #128	; 0x80
10012df4:	0264      	lsls	r4, r4, #9
10012df6:	46a4      	mov	ip, r4
10012df8:	4460      	add	r0, ip
10012dfa:	0c1c      	lsrs	r4, r3, #16
10012dfc:	0409      	lsls	r1, r1, #16
10012dfe:	041b      	lsls	r3, r3, #16
10012e00:	0c09      	lsrs	r1, r1, #16
10012e02:	1820      	adds	r0, r4, r0
10012e04:	185d      	adds	r5, r3, r1
10012e06:	4282      	cmp	r2, r0
10012e08:	d200      	bcs.n	10012e0c <__aeabi_ddiv+0x2ec>
10012e0a:	e0de      	b.n	10012fca <__aeabi_ddiv+0x4aa>
10012e0c:	d100      	bne.n	10012e10 <__aeabi_ddiv+0x2f0>
10012e0e:	e0d7      	b.n	10012fc0 <__aeabi_ddiv+0x4a0>
10012e10:	1a16      	subs	r6, r2, r0
10012e12:	9b02      	ldr	r3, [sp, #8]
10012e14:	469c      	mov	ip, r3
10012e16:	1b5d      	subs	r5, r3, r5
10012e18:	45ac      	cmp	ip, r5
10012e1a:	419b      	sbcs	r3, r3
10012e1c:	425b      	negs	r3, r3
10012e1e:	1af6      	subs	r6, r6, r3
10012e20:	42b7      	cmp	r7, r6
10012e22:	d100      	bne.n	10012e26 <__aeabi_ddiv+0x306>
10012e24:	e106      	b.n	10013034 <__aeabi_ddiv+0x514>
10012e26:	4649      	mov	r1, r9
10012e28:	0030      	movs	r0, r6
10012e2a:	f7fe fd4f 	bl	100118cc <__aeabi_uidiv>
10012e2e:	9b00      	ldr	r3, [sp, #0]
10012e30:	0004      	movs	r4, r0
10012e32:	4343      	muls	r3, r0
10012e34:	4649      	mov	r1, r9
10012e36:	0030      	movs	r0, r6
10012e38:	4698      	mov	r8, r3
10012e3a:	f7fe fdcd 	bl	100119d8 <__aeabi_uidivmod>
10012e3e:	0c2e      	lsrs	r6, r5, #16
10012e40:	0409      	lsls	r1, r1, #16
10012e42:	430e      	orrs	r6, r1
10012e44:	45b0      	cmp	r8, r6
10012e46:	d909      	bls.n	10012e5c <__aeabi_ddiv+0x33c>
10012e48:	19f6      	adds	r6, r6, r7
10012e4a:	1e63      	subs	r3, r4, #1
10012e4c:	42b7      	cmp	r7, r6
10012e4e:	d900      	bls.n	10012e52 <__aeabi_ddiv+0x332>
10012e50:	e0f3      	b.n	1001303a <__aeabi_ddiv+0x51a>
10012e52:	45b0      	cmp	r8, r6
10012e54:	d800      	bhi.n	10012e58 <__aeabi_ddiv+0x338>
10012e56:	e0f0      	b.n	1001303a <__aeabi_ddiv+0x51a>
10012e58:	3c02      	subs	r4, #2
10012e5a:	19f6      	adds	r6, r6, r7
10012e5c:	4643      	mov	r3, r8
10012e5e:	1af3      	subs	r3, r6, r3
10012e60:	4649      	mov	r1, r9
10012e62:	0018      	movs	r0, r3
10012e64:	9302      	str	r3, [sp, #8]
10012e66:	f7fe fd31 	bl	100118cc <__aeabi_uidiv>
10012e6a:	9b00      	ldr	r3, [sp, #0]
10012e6c:	0006      	movs	r6, r0
10012e6e:	4343      	muls	r3, r0
10012e70:	4649      	mov	r1, r9
10012e72:	9802      	ldr	r0, [sp, #8]
10012e74:	4698      	mov	r8, r3
10012e76:	f7fe fdaf 	bl	100119d8 <__aeabi_uidivmod>
10012e7a:	042d      	lsls	r5, r5, #16
10012e7c:	0409      	lsls	r1, r1, #16
10012e7e:	0c2d      	lsrs	r5, r5, #16
10012e80:	430d      	orrs	r5, r1
10012e82:	45a8      	cmp	r8, r5
10012e84:	d909      	bls.n	10012e9a <__aeabi_ddiv+0x37a>
10012e86:	19ed      	adds	r5, r5, r7
10012e88:	1e73      	subs	r3, r6, #1
10012e8a:	42af      	cmp	r7, r5
10012e8c:	d900      	bls.n	10012e90 <__aeabi_ddiv+0x370>
10012e8e:	e0d6      	b.n	1001303e <__aeabi_ddiv+0x51e>
10012e90:	45a8      	cmp	r8, r5
10012e92:	d800      	bhi.n	10012e96 <__aeabi_ddiv+0x376>
10012e94:	e0d3      	b.n	1001303e <__aeabi_ddiv+0x51e>
10012e96:	3e02      	subs	r6, #2
10012e98:	19ed      	adds	r5, r5, r7
10012e9a:	0424      	lsls	r4, r4, #16
10012e9c:	0021      	movs	r1, r4
10012e9e:	4643      	mov	r3, r8
10012ea0:	4331      	orrs	r1, r6
10012ea2:	9e04      	ldr	r6, [sp, #16]
10012ea4:	9a05      	ldr	r2, [sp, #20]
10012ea6:	0030      	movs	r0, r6
10012ea8:	1aed      	subs	r5, r5, r3
10012eaa:	040b      	lsls	r3, r1, #16
10012eac:	0c0c      	lsrs	r4, r1, #16
10012eae:	0c1b      	lsrs	r3, r3, #16
10012eb0:	4358      	muls	r0, r3
10012eb2:	4366      	muls	r6, r4
10012eb4:	4353      	muls	r3, r2
10012eb6:	4354      	muls	r4, r2
10012eb8:	199a      	adds	r2, r3, r6
10012eba:	0c03      	lsrs	r3, r0, #16
10012ebc:	189b      	adds	r3, r3, r2
10012ebe:	429e      	cmp	r6, r3
10012ec0:	d903      	bls.n	10012eca <__aeabi_ddiv+0x3aa>
10012ec2:	2280      	movs	r2, #128	; 0x80
10012ec4:	0252      	lsls	r2, r2, #9
10012ec6:	4694      	mov	ip, r2
10012ec8:	4464      	add	r4, ip
10012eca:	0c1a      	lsrs	r2, r3, #16
10012ecc:	0400      	lsls	r0, r0, #16
10012ece:	041b      	lsls	r3, r3, #16
10012ed0:	0c00      	lsrs	r0, r0, #16
10012ed2:	1914      	adds	r4, r2, r4
10012ed4:	181b      	adds	r3, r3, r0
10012ed6:	42a5      	cmp	r5, r4
10012ed8:	d350      	bcc.n	10012f7c <__aeabi_ddiv+0x45c>
10012eda:	d04d      	beq.n	10012f78 <__aeabi_ddiv+0x458>
10012edc:	2301      	movs	r3, #1
10012ede:	4319      	orrs	r1, r3
10012ee0:	4a96      	ldr	r2, [pc, #600]	; (1001313c <__aeabi_ddiv+0x61c>)
10012ee2:	9b01      	ldr	r3, [sp, #4]
10012ee4:	4694      	mov	ip, r2
10012ee6:	4463      	add	r3, ip
10012ee8:	2b00      	cmp	r3, #0
10012eea:	dc00      	bgt.n	10012eee <__aeabi_ddiv+0x3ce>
10012eec:	e6f3      	b.n	10012cd6 <__aeabi_ddiv+0x1b6>
10012eee:	074a      	lsls	r2, r1, #29
10012ef0:	d009      	beq.n	10012f06 <__aeabi_ddiv+0x3e6>
10012ef2:	220f      	movs	r2, #15
10012ef4:	400a      	ands	r2, r1
10012ef6:	2a04      	cmp	r2, #4
10012ef8:	d005      	beq.n	10012f06 <__aeabi_ddiv+0x3e6>
10012efa:	1d0a      	adds	r2, r1, #4
10012efc:	428a      	cmp	r2, r1
10012efe:	4189      	sbcs	r1, r1
10012f00:	4249      	negs	r1, r1
10012f02:	448b      	add	fp, r1
10012f04:	0011      	movs	r1, r2
10012f06:	465a      	mov	r2, fp
10012f08:	01d2      	lsls	r2, r2, #7
10012f0a:	d508      	bpl.n	10012f1e <__aeabi_ddiv+0x3fe>
10012f0c:	465a      	mov	r2, fp
10012f0e:	4b8c      	ldr	r3, [pc, #560]	; (10013140 <__aeabi_ddiv+0x620>)
10012f10:	401a      	ands	r2, r3
10012f12:	4693      	mov	fp, r2
10012f14:	2280      	movs	r2, #128	; 0x80
10012f16:	00d2      	lsls	r2, r2, #3
10012f18:	4694      	mov	ip, r2
10012f1a:	9b01      	ldr	r3, [sp, #4]
10012f1c:	4463      	add	r3, ip
10012f1e:	4a89      	ldr	r2, [pc, #548]	; (10013144 <__aeabi_ddiv+0x624>)
10012f20:	4293      	cmp	r3, r2
10012f22:	dd00      	ble.n	10012f26 <__aeabi_ddiv+0x406>
10012f24:	e65b      	b.n	10012bde <__aeabi_ddiv+0xbe>
10012f26:	465a      	mov	r2, fp
10012f28:	08c9      	lsrs	r1, r1, #3
10012f2a:	0750      	lsls	r0, r2, #29
10012f2c:	4308      	orrs	r0, r1
10012f2e:	0256      	lsls	r6, r2, #9
10012f30:	4651      	mov	r1, sl
10012f32:	2201      	movs	r2, #1
10012f34:	055b      	lsls	r3, r3, #21
10012f36:	4681      	mov	r9, r0
10012f38:	0b36      	lsrs	r6, r6, #12
10012f3a:	0d5b      	lsrs	r3, r3, #21
10012f3c:	400a      	ands	r2, r1
10012f3e:	e655      	b.n	10012bec <__aeabi_ddiv+0xcc>
10012f40:	2380      	movs	r3, #128	; 0x80
10012f42:	031b      	lsls	r3, r3, #12
10012f44:	421e      	tst	r6, r3
10012f46:	d011      	beq.n	10012f6c <__aeabi_ddiv+0x44c>
10012f48:	465a      	mov	r2, fp
10012f4a:	421a      	tst	r2, r3
10012f4c:	d10e      	bne.n	10012f6c <__aeabi_ddiv+0x44c>
10012f4e:	465e      	mov	r6, fp
10012f50:	431e      	orrs	r6, r3
10012f52:	0336      	lsls	r6, r6, #12
10012f54:	0b36      	lsrs	r6, r6, #12
10012f56:	002a      	movs	r2, r5
10012f58:	4689      	mov	r9, r1
10012f5a:	4b7b      	ldr	r3, [pc, #492]	; (10013148 <__aeabi_ddiv+0x628>)
10012f5c:	e646      	b.n	10012bec <__aeabi_ddiv+0xcc>
10012f5e:	2b03      	cmp	r3, #3
10012f60:	d100      	bne.n	10012f64 <__aeabi_ddiv+0x444>
10012f62:	e0e1      	b.n	10013128 <__aeabi_ddiv+0x608>
10012f64:	2b01      	cmp	r3, #1
10012f66:	d1bb      	bne.n	10012ee0 <__aeabi_ddiv+0x3c0>
10012f68:	401a      	ands	r2, r3
10012f6a:	e6bb      	b.n	10012ce4 <__aeabi_ddiv+0x1c4>
10012f6c:	431e      	orrs	r6, r3
10012f6e:	0336      	lsls	r6, r6, #12
10012f70:	0b36      	lsrs	r6, r6, #12
10012f72:	4642      	mov	r2, r8
10012f74:	4b74      	ldr	r3, [pc, #464]	; (10013148 <__aeabi_ddiv+0x628>)
10012f76:	e639      	b.n	10012bec <__aeabi_ddiv+0xcc>
10012f78:	2b00      	cmp	r3, #0
10012f7a:	d0b1      	beq.n	10012ee0 <__aeabi_ddiv+0x3c0>
10012f7c:	197d      	adds	r5, r7, r5
10012f7e:	1e4a      	subs	r2, r1, #1
10012f80:	42af      	cmp	r7, r5
10012f82:	d952      	bls.n	1001302a <__aeabi_ddiv+0x50a>
10012f84:	0011      	movs	r1, r2
10012f86:	42a5      	cmp	r5, r4
10012f88:	d1a8      	bne.n	10012edc <__aeabi_ddiv+0x3bc>
10012f8a:	9a03      	ldr	r2, [sp, #12]
10012f8c:	429a      	cmp	r2, r3
10012f8e:	d1a5      	bne.n	10012edc <__aeabi_ddiv+0x3bc>
10012f90:	e7a6      	b.n	10012ee0 <__aeabi_ddiv+0x3c0>
10012f92:	0003      	movs	r3, r0
10012f94:	003e      	movs	r6, r7
10012f96:	3b28      	subs	r3, #40	; 0x28
10012f98:	409e      	lsls	r6, r3
10012f9a:	2300      	movs	r3, #0
10012f9c:	4699      	mov	r9, r3
10012f9e:	e654      	b.n	10012c4a <__aeabi_ddiv+0x12a>
10012fa0:	f001 f8fe 	bl	100141a0 <__clzsi2>
10012fa4:	3020      	adds	r0, #32
10012fa6:	e641      	b.n	10012c2c <__aeabi_ddiv+0x10c>
10012fa8:	0003      	movs	r3, r0
10012faa:	4652      	mov	r2, sl
10012fac:	3b28      	subs	r3, #40	; 0x28
10012fae:	409a      	lsls	r2, r3
10012fb0:	2100      	movs	r1, #0
10012fb2:	4693      	mov	fp, r2
10012fb4:	e677      	b.n	10012ca6 <__aeabi_ddiv+0x186>
10012fb6:	4650      	mov	r0, sl
10012fb8:	f001 f8f2 	bl	100141a0 <__clzsi2>
10012fbc:	3020      	adds	r0, #32
10012fbe:	e65e      	b.n	10012c7e <__aeabi_ddiv+0x15e>
10012fc0:	9b02      	ldr	r3, [sp, #8]
10012fc2:	2600      	movs	r6, #0
10012fc4:	42ab      	cmp	r3, r5
10012fc6:	d300      	bcc.n	10012fca <__aeabi_ddiv+0x4aa>
10012fc8:	e723      	b.n	10012e12 <__aeabi_ddiv+0x2f2>
10012fca:	9e03      	ldr	r6, [sp, #12]
10012fcc:	9902      	ldr	r1, [sp, #8]
10012fce:	46b4      	mov	ip, r6
10012fd0:	4461      	add	r1, ip
10012fd2:	4688      	mov	r8, r1
10012fd4:	45b0      	cmp	r8, r6
10012fd6:	41b6      	sbcs	r6, r6
10012fd8:	465b      	mov	r3, fp
10012fda:	4276      	negs	r6, r6
10012fdc:	19f6      	adds	r6, r6, r7
10012fde:	18b2      	adds	r2, r6, r2
10012fe0:	3b01      	subs	r3, #1
10012fe2:	9102      	str	r1, [sp, #8]
10012fe4:	4297      	cmp	r7, r2
10012fe6:	d213      	bcs.n	10013010 <__aeabi_ddiv+0x4f0>
10012fe8:	4290      	cmp	r0, r2
10012fea:	d84f      	bhi.n	1001308c <__aeabi_ddiv+0x56c>
10012fec:	d100      	bne.n	10012ff0 <__aeabi_ddiv+0x4d0>
10012fee:	e08e      	b.n	1001310e <__aeabi_ddiv+0x5ee>
10012ff0:	1a16      	subs	r6, r2, r0
10012ff2:	469b      	mov	fp, r3
10012ff4:	e70d      	b.n	10012e12 <__aeabi_ddiv+0x2f2>
10012ff6:	4589      	cmp	r9, r1
10012ff8:	d200      	bcs.n	10012ffc <__aeabi_ddiv+0x4dc>
10012ffa:	e68e      	b.n	10012d1a <__aeabi_ddiv+0x1fa>
10012ffc:	0874      	lsrs	r4, r6, #1
10012ffe:	464b      	mov	r3, r9
10013000:	07f6      	lsls	r6, r6, #31
10013002:	0035      	movs	r5, r6
10013004:	085b      	lsrs	r3, r3, #1
10013006:	431d      	orrs	r5, r3
10013008:	464b      	mov	r3, r9
1001300a:	07db      	lsls	r3, r3, #31
1001300c:	9302      	str	r3, [sp, #8]
1001300e:	e68b      	b.n	10012d28 <__aeabi_ddiv+0x208>
10013010:	4297      	cmp	r7, r2
10013012:	d1ed      	bne.n	10012ff0 <__aeabi_ddiv+0x4d0>
10013014:	9903      	ldr	r1, [sp, #12]
10013016:	9c02      	ldr	r4, [sp, #8]
10013018:	42a1      	cmp	r1, r4
1001301a:	d9e5      	bls.n	10012fe8 <__aeabi_ddiv+0x4c8>
1001301c:	1a3e      	subs	r6, r7, r0
1001301e:	469b      	mov	fp, r3
10013020:	e6f7      	b.n	10012e12 <__aeabi_ddiv+0x2f2>
10013022:	4698      	mov	r8, r3
10013024:	e6ca      	b.n	10012dbc <__aeabi_ddiv+0x29c>
10013026:	001e      	movs	r6, r3
10013028:	e6a5      	b.n	10012d76 <__aeabi_ddiv+0x256>
1001302a:	42ac      	cmp	r4, r5
1001302c:	d83e      	bhi.n	100130ac <__aeabi_ddiv+0x58c>
1001302e:	d074      	beq.n	1001311a <__aeabi_ddiv+0x5fa>
10013030:	0011      	movs	r1, r2
10013032:	e753      	b.n	10012edc <__aeabi_ddiv+0x3bc>
10013034:	2101      	movs	r1, #1
10013036:	4249      	negs	r1, r1
10013038:	e752      	b.n	10012ee0 <__aeabi_ddiv+0x3c0>
1001303a:	001c      	movs	r4, r3
1001303c:	e70e      	b.n	10012e5c <__aeabi_ddiv+0x33c>
1001303e:	001e      	movs	r6, r3
10013040:	e72b      	b.n	10012e9a <__aeabi_ddiv+0x37a>
10013042:	2d1f      	cmp	r5, #31
10013044:	dc3c      	bgt.n	100130c0 <__aeabi_ddiv+0x5a0>
10013046:	2320      	movs	r3, #32
10013048:	000a      	movs	r2, r1
1001304a:	4658      	mov	r0, fp
1001304c:	1b5b      	subs	r3, r3, r5
1001304e:	4098      	lsls	r0, r3
10013050:	40ea      	lsrs	r2, r5
10013052:	4099      	lsls	r1, r3
10013054:	4302      	orrs	r2, r0
10013056:	1e48      	subs	r0, r1, #1
10013058:	4181      	sbcs	r1, r0
1001305a:	465e      	mov	r6, fp
1001305c:	4311      	orrs	r1, r2
1001305e:	40ee      	lsrs	r6, r5
10013060:	074b      	lsls	r3, r1, #29
10013062:	d009      	beq.n	10013078 <__aeabi_ddiv+0x558>
10013064:	230f      	movs	r3, #15
10013066:	400b      	ands	r3, r1
10013068:	2b04      	cmp	r3, #4
1001306a:	d005      	beq.n	10013078 <__aeabi_ddiv+0x558>
1001306c:	000b      	movs	r3, r1
1001306e:	1d19      	adds	r1, r3, #4
10013070:	4299      	cmp	r1, r3
10013072:	419b      	sbcs	r3, r3
10013074:	425b      	negs	r3, r3
10013076:	18f6      	adds	r6, r6, r3
10013078:	0233      	lsls	r3, r6, #8
1001307a:	d53c      	bpl.n	100130f6 <__aeabi_ddiv+0x5d6>
1001307c:	4653      	mov	r3, sl
1001307e:	2201      	movs	r2, #1
10013080:	2100      	movs	r1, #0
10013082:	401a      	ands	r2, r3
10013084:	2600      	movs	r6, #0
10013086:	2301      	movs	r3, #1
10013088:	4689      	mov	r9, r1
1001308a:	e5af      	b.n	10012bec <__aeabi_ddiv+0xcc>
1001308c:	2302      	movs	r3, #2
1001308e:	425b      	negs	r3, r3
10013090:	469c      	mov	ip, r3
10013092:	9c03      	ldr	r4, [sp, #12]
10013094:	44e3      	add	fp, ip
10013096:	46a4      	mov	ip, r4
10013098:	9b02      	ldr	r3, [sp, #8]
1001309a:	4463      	add	r3, ip
1001309c:	4698      	mov	r8, r3
1001309e:	45a0      	cmp	r8, r4
100130a0:	41b6      	sbcs	r6, r6
100130a2:	4276      	negs	r6, r6
100130a4:	19f6      	adds	r6, r6, r7
100130a6:	9302      	str	r3, [sp, #8]
100130a8:	18b2      	adds	r2, r6, r2
100130aa:	e6b1      	b.n	10012e10 <__aeabi_ddiv+0x2f0>
100130ac:	9803      	ldr	r0, [sp, #12]
100130ae:	1e8a      	subs	r2, r1, #2
100130b0:	0041      	lsls	r1, r0, #1
100130b2:	4281      	cmp	r1, r0
100130b4:	41b6      	sbcs	r6, r6
100130b6:	4276      	negs	r6, r6
100130b8:	19f6      	adds	r6, r6, r7
100130ba:	19ad      	adds	r5, r5, r6
100130bc:	9103      	str	r1, [sp, #12]
100130be:	e761      	b.n	10012f84 <__aeabi_ddiv+0x464>
100130c0:	221f      	movs	r2, #31
100130c2:	4252      	negs	r2, r2
100130c4:	1ad3      	subs	r3, r2, r3
100130c6:	465a      	mov	r2, fp
100130c8:	40da      	lsrs	r2, r3
100130ca:	0013      	movs	r3, r2
100130cc:	2d20      	cmp	r5, #32
100130ce:	d029      	beq.n	10013124 <__aeabi_ddiv+0x604>
100130d0:	2240      	movs	r2, #64	; 0x40
100130d2:	4658      	mov	r0, fp
100130d4:	1b55      	subs	r5, r2, r5
100130d6:	40a8      	lsls	r0, r5
100130d8:	4301      	orrs	r1, r0
100130da:	1e48      	subs	r0, r1, #1
100130dc:	4181      	sbcs	r1, r0
100130de:	2007      	movs	r0, #7
100130e0:	430b      	orrs	r3, r1
100130e2:	4018      	ands	r0, r3
100130e4:	2600      	movs	r6, #0
100130e6:	2800      	cmp	r0, #0
100130e8:	d009      	beq.n	100130fe <__aeabi_ddiv+0x5de>
100130ea:	220f      	movs	r2, #15
100130ec:	2600      	movs	r6, #0
100130ee:	401a      	ands	r2, r3
100130f0:	0019      	movs	r1, r3
100130f2:	2a04      	cmp	r2, #4
100130f4:	d1bb      	bne.n	1001306e <__aeabi_ddiv+0x54e>
100130f6:	000b      	movs	r3, r1
100130f8:	0770      	lsls	r0, r6, #29
100130fa:	0276      	lsls	r6, r6, #9
100130fc:	0b36      	lsrs	r6, r6, #12
100130fe:	08db      	lsrs	r3, r3, #3
10013100:	4303      	orrs	r3, r0
10013102:	4699      	mov	r9, r3
10013104:	2201      	movs	r2, #1
10013106:	4653      	mov	r3, sl
10013108:	401a      	ands	r2, r3
1001310a:	2300      	movs	r3, #0
1001310c:	e56e      	b.n	10012bec <__aeabi_ddiv+0xcc>
1001310e:	9902      	ldr	r1, [sp, #8]
10013110:	428d      	cmp	r5, r1
10013112:	d8bb      	bhi.n	1001308c <__aeabi_ddiv+0x56c>
10013114:	469b      	mov	fp, r3
10013116:	2600      	movs	r6, #0
10013118:	e67b      	b.n	10012e12 <__aeabi_ddiv+0x2f2>
1001311a:	9803      	ldr	r0, [sp, #12]
1001311c:	4298      	cmp	r0, r3
1001311e:	d3c5      	bcc.n	100130ac <__aeabi_ddiv+0x58c>
10013120:	0011      	movs	r1, r2
10013122:	e732      	b.n	10012f8a <__aeabi_ddiv+0x46a>
10013124:	2000      	movs	r0, #0
10013126:	e7d7      	b.n	100130d8 <__aeabi_ddiv+0x5b8>
10013128:	2680      	movs	r6, #128	; 0x80
1001312a:	465b      	mov	r3, fp
1001312c:	0336      	lsls	r6, r6, #12
1001312e:	431e      	orrs	r6, r3
10013130:	0336      	lsls	r6, r6, #12
10013132:	0b36      	lsrs	r6, r6, #12
10013134:	9a00      	ldr	r2, [sp, #0]
10013136:	4689      	mov	r9, r1
10013138:	4b03      	ldr	r3, [pc, #12]	; (10013148 <__aeabi_ddiv+0x628>)
1001313a:	e557      	b.n	10012bec <__aeabi_ddiv+0xcc>
1001313c:	000003ff 	.word	0x000003ff
10013140:	feffffff 	.word	0xfeffffff
10013144:	000007fe 	.word	0x000007fe
10013148:	000007ff 	.word	0x000007ff

1001314c <__eqdf2>:
1001314c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001314e:	465f      	mov	r7, fp
10013150:	4656      	mov	r6, sl
10013152:	464d      	mov	r5, r9
10013154:	4644      	mov	r4, r8
10013156:	b4f0      	push	{r4, r5, r6, r7}
10013158:	031f      	lsls	r7, r3, #12
1001315a:	005c      	lsls	r4, r3, #1
1001315c:	0fdb      	lsrs	r3, r3, #31
1001315e:	469a      	mov	sl, r3
10013160:	4b19      	ldr	r3, [pc, #100]	; (100131c8 <__eqdf2+0x7c>)
10013162:	030e      	lsls	r6, r1, #12
10013164:	004d      	lsls	r5, r1, #1
10013166:	0fc9      	lsrs	r1, r1, #31
10013168:	4680      	mov	r8, r0
1001316a:	0b36      	lsrs	r6, r6, #12
1001316c:	0d6d      	lsrs	r5, r5, #21
1001316e:	468b      	mov	fp, r1
10013170:	4691      	mov	r9, r2
10013172:	0b3f      	lsrs	r7, r7, #12
10013174:	0d64      	lsrs	r4, r4, #21
10013176:	429d      	cmp	r5, r3
10013178:	d019      	beq.n	100131ae <__eqdf2+0x62>
1001317a:	4b13      	ldr	r3, [pc, #76]	; (100131c8 <__eqdf2+0x7c>)
1001317c:	429c      	cmp	r4, r3
1001317e:	d01b      	beq.n	100131b8 <__eqdf2+0x6c>
10013180:	2301      	movs	r3, #1
10013182:	42a5      	cmp	r5, r4
10013184:	d006      	beq.n	10013194 <__eqdf2+0x48>
10013186:	0018      	movs	r0, r3
10013188:	bc3c      	pop	{r2, r3, r4, r5}
1001318a:	4690      	mov	r8, r2
1001318c:	4699      	mov	r9, r3
1001318e:	46a2      	mov	sl, r4
10013190:	46ab      	mov	fp, r5
10013192:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013194:	42be      	cmp	r6, r7
10013196:	d1f6      	bne.n	10013186 <__eqdf2+0x3a>
10013198:	45c8      	cmp	r8, r9
1001319a:	d1f4      	bne.n	10013186 <__eqdf2+0x3a>
1001319c:	45d3      	cmp	fp, sl
1001319e:	d010      	beq.n	100131c2 <__eqdf2+0x76>
100131a0:	2d00      	cmp	r5, #0
100131a2:	d1f0      	bne.n	10013186 <__eqdf2+0x3a>
100131a4:	4330      	orrs	r0, r6
100131a6:	0003      	movs	r3, r0
100131a8:	1e5a      	subs	r2, r3, #1
100131aa:	4193      	sbcs	r3, r2
100131ac:	e7eb      	b.n	10013186 <__eqdf2+0x3a>
100131ae:	0031      	movs	r1, r6
100131b0:	2301      	movs	r3, #1
100131b2:	4301      	orrs	r1, r0
100131b4:	d1e7      	bne.n	10013186 <__eqdf2+0x3a>
100131b6:	e7e0      	b.n	1001317a <__eqdf2+0x2e>
100131b8:	433a      	orrs	r2, r7
100131ba:	2301      	movs	r3, #1
100131bc:	2a00      	cmp	r2, #0
100131be:	d1e2      	bne.n	10013186 <__eqdf2+0x3a>
100131c0:	e7de      	b.n	10013180 <__eqdf2+0x34>
100131c2:	2300      	movs	r3, #0
100131c4:	e7df      	b.n	10013186 <__eqdf2+0x3a>
100131c6:	46c0      	nop			; (mov r8, r8)
100131c8:	000007ff 	.word	0x000007ff

100131cc <__gedf2>:
100131cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100131ce:	465f      	mov	r7, fp
100131d0:	4644      	mov	r4, r8
100131d2:	4656      	mov	r6, sl
100131d4:	464d      	mov	r5, r9
100131d6:	b4f0      	push	{r4, r5, r6, r7}
100131d8:	031f      	lsls	r7, r3, #12
100131da:	0b3c      	lsrs	r4, r7, #12
100131dc:	4f2c      	ldr	r7, [pc, #176]	; (10013290 <__gedf2+0xc4>)
100131de:	030e      	lsls	r6, r1, #12
100131e0:	004d      	lsls	r5, r1, #1
100131e2:	46a3      	mov	fp, r4
100131e4:	005c      	lsls	r4, r3, #1
100131e6:	4684      	mov	ip, r0
100131e8:	0b36      	lsrs	r6, r6, #12
100131ea:	0d6d      	lsrs	r5, r5, #21
100131ec:	0fc9      	lsrs	r1, r1, #31
100131ee:	4690      	mov	r8, r2
100131f0:	0d64      	lsrs	r4, r4, #21
100131f2:	0fdb      	lsrs	r3, r3, #31
100131f4:	42bd      	cmp	r5, r7
100131f6:	d02b      	beq.n	10013250 <__gedf2+0x84>
100131f8:	4f25      	ldr	r7, [pc, #148]	; (10013290 <__gedf2+0xc4>)
100131fa:	42bc      	cmp	r4, r7
100131fc:	d02e      	beq.n	1001325c <__gedf2+0x90>
100131fe:	2d00      	cmp	r5, #0
10013200:	d10e      	bne.n	10013220 <__gedf2+0x54>
10013202:	4330      	orrs	r0, r6
10013204:	0007      	movs	r7, r0
10013206:	4681      	mov	r9, r0
10013208:	4278      	negs	r0, r7
1001320a:	4178      	adcs	r0, r7
1001320c:	2c00      	cmp	r4, #0
1001320e:	d117      	bne.n	10013240 <__gedf2+0x74>
10013210:	465f      	mov	r7, fp
10013212:	433a      	orrs	r2, r7
10013214:	d114      	bne.n	10013240 <__gedf2+0x74>
10013216:	464b      	mov	r3, r9
10013218:	2000      	movs	r0, #0
1001321a:	2b00      	cmp	r3, #0
1001321c:	d00a      	beq.n	10013234 <__gedf2+0x68>
1001321e:	e006      	b.n	1001322e <__gedf2+0x62>
10013220:	2c00      	cmp	r4, #0
10013222:	d102      	bne.n	1001322a <__gedf2+0x5e>
10013224:	4658      	mov	r0, fp
10013226:	4302      	orrs	r2, r0
10013228:	d001      	beq.n	1001322e <__gedf2+0x62>
1001322a:	4299      	cmp	r1, r3
1001322c:	d01a      	beq.n	10013264 <__gedf2+0x98>
1001322e:	2301      	movs	r3, #1
10013230:	4248      	negs	r0, r1
10013232:	4318      	orrs	r0, r3
10013234:	bc3c      	pop	{r2, r3, r4, r5}
10013236:	4690      	mov	r8, r2
10013238:	4699      	mov	r9, r3
1001323a:	46a2      	mov	sl, r4
1001323c:	46ab      	mov	fp, r5
1001323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013240:	2800      	cmp	r0, #0
10013242:	d0f2      	beq.n	1001322a <__gedf2+0x5e>
10013244:	4258      	negs	r0, r3
10013246:	4158      	adcs	r0, r3
10013248:	2201      	movs	r2, #1
1001324a:	4240      	negs	r0, r0
1001324c:	4310      	orrs	r0, r2
1001324e:	e7f1      	b.n	10013234 <__gedf2+0x68>
10013250:	0037      	movs	r7, r6
10013252:	4307      	orrs	r7, r0
10013254:	d0d0      	beq.n	100131f8 <__gedf2+0x2c>
10013256:	2002      	movs	r0, #2
10013258:	4240      	negs	r0, r0
1001325a:	e7eb      	b.n	10013234 <__gedf2+0x68>
1001325c:	465f      	mov	r7, fp
1001325e:	4317      	orrs	r7, r2
10013260:	d0cd      	beq.n	100131fe <__gedf2+0x32>
10013262:	e7f8      	b.n	10013256 <__gedf2+0x8a>
10013264:	42a5      	cmp	r5, r4
10013266:	dce2      	bgt.n	1001322e <__gedf2+0x62>
10013268:	db05      	blt.n	10013276 <__gedf2+0xaa>
1001326a:	455e      	cmp	r6, fp
1001326c:	d8df      	bhi.n	1001322e <__gedf2+0x62>
1001326e:	d008      	beq.n	10013282 <__gedf2+0xb6>
10013270:	2000      	movs	r0, #0
10013272:	455e      	cmp	r6, fp
10013274:	d2de      	bcs.n	10013234 <__gedf2+0x68>
10013276:	4248      	negs	r0, r1
10013278:	4148      	adcs	r0, r1
1001327a:	2301      	movs	r3, #1
1001327c:	4240      	negs	r0, r0
1001327e:	4318      	orrs	r0, r3
10013280:	e7d8      	b.n	10013234 <__gedf2+0x68>
10013282:	45c4      	cmp	ip, r8
10013284:	d8d3      	bhi.n	1001322e <__gedf2+0x62>
10013286:	2000      	movs	r0, #0
10013288:	45c4      	cmp	ip, r8
1001328a:	d3f4      	bcc.n	10013276 <__gedf2+0xaa>
1001328c:	e7d2      	b.n	10013234 <__gedf2+0x68>
1001328e:	46c0      	nop			; (mov r8, r8)
10013290:	000007ff 	.word	0x000007ff

10013294 <__ledf2>:
10013294:	b5f0      	push	{r4, r5, r6, r7, lr}
10013296:	465f      	mov	r7, fp
10013298:	464d      	mov	r5, r9
1001329a:	4644      	mov	r4, r8
1001329c:	4656      	mov	r6, sl
1001329e:	b4f0      	push	{r4, r5, r6, r7}
100132a0:	031c      	lsls	r4, r3, #12
100132a2:	0b24      	lsrs	r4, r4, #12
100132a4:	46a4      	mov	ip, r4
100132a6:	4c2f      	ldr	r4, [pc, #188]	; (10013364 <__ledf2+0xd0>)
100132a8:	030f      	lsls	r7, r1, #12
100132aa:	004d      	lsls	r5, r1, #1
100132ac:	005e      	lsls	r6, r3, #1
100132ae:	0fc9      	lsrs	r1, r1, #31
100132b0:	4680      	mov	r8, r0
100132b2:	0b3f      	lsrs	r7, r7, #12
100132b4:	0d6d      	lsrs	r5, r5, #21
100132b6:	468b      	mov	fp, r1
100132b8:	4691      	mov	r9, r2
100132ba:	0d76      	lsrs	r6, r6, #21
100132bc:	0fdb      	lsrs	r3, r3, #31
100132be:	42a5      	cmp	r5, r4
100132c0:	d020      	beq.n	10013304 <__ledf2+0x70>
100132c2:	4c28      	ldr	r4, [pc, #160]	; (10013364 <__ledf2+0xd0>)
100132c4:	42a6      	cmp	r6, r4
100132c6:	d022      	beq.n	1001330e <__ledf2+0x7a>
100132c8:	2d00      	cmp	r5, #0
100132ca:	d112      	bne.n	100132f2 <__ledf2+0x5e>
100132cc:	4338      	orrs	r0, r7
100132ce:	4244      	negs	r4, r0
100132d0:	4144      	adcs	r4, r0
100132d2:	2e00      	cmp	r6, #0
100132d4:	d020      	beq.n	10013318 <__ledf2+0x84>
100132d6:	2c00      	cmp	r4, #0
100132d8:	d00d      	beq.n	100132f6 <__ledf2+0x62>
100132da:	425c      	negs	r4, r3
100132dc:	4163      	adcs	r3, r4
100132de:	2401      	movs	r4, #1
100132e0:	425b      	negs	r3, r3
100132e2:	431c      	orrs	r4, r3
100132e4:	0020      	movs	r0, r4
100132e6:	bc3c      	pop	{r2, r3, r4, r5}
100132e8:	4690      	mov	r8, r2
100132ea:	4699      	mov	r9, r3
100132ec:	46a2      	mov	sl, r4
100132ee:	46ab      	mov	fp, r5
100132f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100132f2:	2e00      	cmp	r6, #0
100132f4:	d017      	beq.n	10013326 <__ledf2+0x92>
100132f6:	455b      	cmp	r3, fp
100132f8:	d019      	beq.n	1001332e <__ledf2+0x9a>
100132fa:	465b      	mov	r3, fp
100132fc:	425c      	negs	r4, r3
100132fe:	2301      	movs	r3, #1
10013300:	431c      	orrs	r4, r3
10013302:	e7ef      	b.n	100132e4 <__ledf2+0x50>
10013304:	0039      	movs	r1, r7
10013306:	2402      	movs	r4, #2
10013308:	4301      	orrs	r1, r0
1001330a:	d1eb      	bne.n	100132e4 <__ledf2+0x50>
1001330c:	e7d9      	b.n	100132c2 <__ledf2+0x2e>
1001330e:	4661      	mov	r1, ip
10013310:	2402      	movs	r4, #2
10013312:	4311      	orrs	r1, r2
10013314:	d1e6      	bne.n	100132e4 <__ledf2+0x50>
10013316:	e7d7      	b.n	100132c8 <__ledf2+0x34>
10013318:	4661      	mov	r1, ip
1001331a:	430a      	orrs	r2, r1
1001331c:	d1db      	bne.n	100132d6 <__ledf2+0x42>
1001331e:	2400      	movs	r4, #0
10013320:	2800      	cmp	r0, #0
10013322:	d0df      	beq.n	100132e4 <__ledf2+0x50>
10013324:	e7e9      	b.n	100132fa <__ledf2+0x66>
10013326:	4661      	mov	r1, ip
10013328:	430a      	orrs	r2, r1
1001332a:	d1e4      	bne.n	100132f6 <__ledf2+0x62>
1001332c:	e7e5      	b.n	100132fa <__ledf2+0x66>
1001332e:	42b5      	cmp	r5, r6
10013330:	dd03      	ble.n	1001333a <__ledf2+0xa6>
10013332:	2201      	movs	r2, #1
10013334:	425c      	negs	r4, r3
10013336:	4314      	orrs	r4, r2
10013338:	e7d4      	b.n	100132e4 <__ledf2+0x50>
1001333a:	42b5      	cmp	r5, r6
1001333c:	dbcd      	blt.n	100132da <__ledf2+0x46>
1001333e:	4567      	cmp	r7, ip
10013340:	d8db      	bhi.n	100132fa <__ledf2+0x66>
10013342:	d009      	beq.n	10013358 <__ledf2+0xc4>
10013344:	2400      	movs	r4, #0
10013346:	4567      	cmp	r7, ip
10013348:	d2cc      	bcs.n	100132e4 <__ledf2+0x50>
1001334a:	4659      	mov	r1, fp
1001334c:	424c      	negs	r4, r1
1001334e:	4161      	adcs	r1, r4
10013350:	2401      	movs	r4, #1
10013352:	4249      	negs	r1, r1
10013354:	430c      	orrs	r4, r1
10013356:	e7c5      	b.n	100132e4 <__ledf2+0x50>
10013358:	45c8      	cmp	r8, r9
1001335a:	d8ce      	bhi.n	100132fa <__ledf2+0x66>
1001335c:	2400      	movs	r4, #0
1001335e:	45c8      	cmp	r8, r9
10013360:	d3f3      	bcc.n	1001334a <__ledf2+0xb6>
10013362:	e7bf      	b.n	100132e4 <__ledf2+0x50>
10013364:	000007ff 	.word	0x000007ff

10013368 <__aeabi_dmul>:
10013368:	b5f0      	push	{r4, r5, r6, r7, lr}
1001336a:	465f      	mov	r7, fp
1001336c:	4656      	mov	r6, sl
1001336e:	464d      	mov	r5, r9
10013370:	4644      	mov	r4, r8
10013372:	b4f0      	push	{r4, r5, r6, r7}
10013374:	030d      	lsls	r5, r1, #12
10013376:	4699      	mov	r9, r3
10013378:	004e      	lsls	r6, r1, #1
1001337a:	0b2b      	lsrs	r3, r5, #12
1001337c:	b087      	sub	sp, #28
1001337e:	0007      	movs	r7, r0
10013380:	4692      	mov	sl, r2
10013382:	4680      	mov	r8, r0
10013384:	469b      	mov	fp, r3
10013386:	0d76      	lsrs	r6, r6, #21
10013388:	0fcc      	lsrs	r4, r1, #31
1001338a:	2e00      	cmp	r6, #0
1001338c:	d069      	beq.n	10013462 <__aeabi_dmul+0xfa>
1001338e:	4b6d      	ldr	r3, [pc, #436]	; (10013544 <__aeabi_dmul+0x1dc>)
10013390:	429e      	cmp	r6, r3
10013392:	d035      	beq.n	10013400 <__aeabi_dmul+0x98>
10013394:	465b      	mov	r3, fp
10013396:	2280      	movs	r2, #128	; 0x80
10013398:	00dd      	lsls	r5, r3, #3
1001339a:	0412      	lsls	r2, r2, #16
1001339c:	0f43      	lsrs	r3, r0, #29
1001339e:	4313      	orrs	r3, r2
100133a0:	432b      	orrs	r3, r5
100133a2:	469b      	mov	fp, r3
100133a4:	00c3      	lsls	r3, r0, #3
100133a6:	4698      	mov	r8, r3
100133a8:	4b67      	ldr	r3, [pc, #412]	; (10013548 <__aeabi_dmul+0x1e0>)
100133aa:	2700      	movs	r7, #0
100133ac:	469c      	mov	ip, r3
100133ae:	2300      	movs	r3, #0
100133b0:	4466      	add	r6, ip
100133b2:	9301      	str	r3, [sp, #4]
100133b4:	464a      	mov	r2, r9
100133b6:	0315      	lsls	r5, r2, #12
100133b8:	0050      	lsls	r0, r2, #1
100133ba:	0fd2      	lsrs	r2, r2, #31
100133bc:	4653      	mov	r3, sl
100133be:	0b2d      	lsrs	r5, r5, #12
100133c0:	0d40      	lsrs	r0, r0, #21
100133c2:	4691      	mov	r9, r2
100133c4:	d100      	bne.n	100133c8 <__aeabi_dmul+0x60>
100133c6:	e076      	b.n	100134b6 <__aeabi_dmul+0x14e>
100133c8:	4a5e      	ldr	r2, [pc, #376]	; (10013544 <__aeabi_dmul+0x1dc>)
100133ca:	4290      	cmp	r0, r2
100133cc:	d06c      	beq.n	100134a8 <__aeabi_dmul+0x140>
100133ce:	2280      	movs	r2, #128	; 0x80
100133d0:	0f5b      	lsrs	r3, r3, #29
100133d2:	0412      	lsls	r2, r2, #16
100133d4:	4313      	orrs	r3, r2
100133d6:	4a5c      	ldr	r2, [pc, #368]	; (10013548 <__aeabi_dmul+0x1e0>)
100133d8:	00ed      	lsls	r5, r5, #3
100133da:	4694      	mov	ip, r2
100133dc:	431d      	orrs	r5, r3
100133de:	4653      	mov	r3, sl
100133e0:	2200      	movs	r2, #0
100133e2:	00db      	lsls	r3, r3, #3
100133e4:	4460      	add	r0, ip
100133e6:	4649      	mov	r1, r9
100133e8:	1836      	adds	r6, r6, r0
100133ea:	1c70      	adds	r0, r6, #1
100133ec:	4061      	eors	r1, r4
100133ee:	9002      	str	r0, [sp, #8]
100133f0:	4317      	orrs	r7, r2
100133f2:	2f0f      	cmp	r7, #15
100133f4:	d900      	bls.n	100133f8 <__aeabi_dmul+0x90>
100133f6:	e0af      	b.n	10013558 <__aeabi_dmul+0x1f0>
100133f8:	4854      	ldr	r0, [pc, #336]	; (1001354c <__aeabi_dmul+0x1e4>)
100133fa:	00bf      	lsls	r7, r7, #2
100133fc:	59c7      	ldr	r7, [r0, r7]
100133fe:	46bf      	mov	pc, r7
10013400:	465b      	mov	r3, fp
10013402:	431f      	orrs	r7, r3
10013404:	d000      	beq.n	10013408 <__aeabi_dmul+0xa0>
10013406:	e088      	b.n	1001351a <__aeabi_dmul+0x1b2>
10013408:	2300      	movs	r3, #0
1001340a:	469b      	mov	fp, r3
1001340c:	4698      	mov	r8, r3
1001340e:	3302      	adds	r3, #2
10013410:	2708      	movs	r7, #8
10013412:	9301      	str	r3, [sp, #4]
10013414:	e7ce      	b.n	100133b4 <__aeabi_dmul+0x4c>
10013416:	4649      	mov	r1, r9
10013418:	2a02      	cmp	r2, #2
1001341a:	d06a      	beq.n	100134f2 <__aeabi_dmul+0x18a>
1001341c:	2a03      	cmp	r2, #3
1001341e:	d100      	bne.n	10013422 <__aeabi_dmul+0xba>
10013420:	e209      	b.n	10013836 <__aeabi_dmul+0x4ce>
10013422:	2a01      	cmp	r2, #1
10013424:	d000      	beq.n	10013428 <__aeabi_dmul+0xc0>
10013426:	e1bb      	b.n	100137a0 <__aeabi_dmul+0x438>
10013428:	4011      	ands	r1, r2
1001342a:	2200      	movs	r2, #0
1001342c:	2300      	movs	r3, #0
1001342e:	2500      	movs	r5, #0
10013430:	4690      	mov	r8, r2
10013432:	b2cc      	uxtb	r4, r1
10013434:	2100      	movs	r1, #0
10013436:	032d      	lsls	r5, r5, #12
10013438:	0d0a      	lsrs	r2, r1, #20
1001343a:	0512      	lsls	r2, r2, #20
1001343c:	0b2d      	lsrs	r5, r5, #12
1001343e:	4315      	orrs	r5, r2
10013440:	4a43      	ldr	r2, [pc, #268]	; (10013550 <__aeabi_dmul+0x1e8>)
10013442:	051b      	lsls	r3, r3, #20
10013444:	4015      	ands	r5, r2
10013446:	431d      	orrs	r5, r3
10013448:	006d      	lsls	r5, r5, #1
1001344a:	07e4      	lsls	r4, r4, #31
1001344c:	086d      	lsrs	r5, r5, #1
1001344e:	4325      	orrs	r5, r4
10013450:	4640      	mov	r0, r8
10013452:	0029      	movs	r1, r5
10013454:	b007      	add	sp, #28
10013456:	bc3c      	pop	{r2, r3, r4, r5}
10013458:	4690      	mov	r8, r2
1001345a:	4699      	mov	r9, r3
1001345c:	46a2      	mov	sl, r4
1001345e:	46ab      	mov	fp, r5
10013460:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013462:	4303      	orrs	r3, r0
10013464:	d052      	beq.n	1001350c <__aeabi_dmul+0x1a4>
10013466:	465b      	mov	r3, fp
10013468:	2b00      	cmp	r3, #0
1001346a:	d100      	bne.n	1001346e <__aeabi_dmul+0x106>
1001346c:	e18a      	b.n	10013784 <__aeabi_dmul+0x41c>
1001346e:	4658      	mov	r0, fp
10013470:	f000 fe96 	bl	100141a0 <__clzsi2>
10013474:	0003      	movs	r3, r0
10013476:	3b0b      	subs	r3, #11
10013478:	2b1c      	cmp	r3, #28
1001347a:	dd00      	ble.n	1001347e <__aeabi_dmul+0x116>
1001347c:	e17b      	b.n	10013776 <__aeabi_dmul+0x40e>
1001347e:	221d      	movs	r2, #29
10013480:	1ad3      	subs	r3, r2, r3
10013482:	003a      	movs	r2, r7
10013484:	0001      	movs	r1, r0
10013486:	465d      	mov	r5, fp
10013488:	40da      	lsrs	r2, r3
1001348a:	3908      	subs	r1, #8
1001348c:	408d      	lsls	r5, r1
1001348e:	0013      	movs	r3, r2
10013490:	408f      	lsls	r7, r1
10013492:	432b      	orrs	r3, r5
10013494:	469b      	mov	fp, r3
10013496:	46b8      	mov	r8, r7
10013498:	4b2e      	ldr	r3, [pc, #184]	; (10013554 <__aeabi_dmul+0x1ec>)
1001349a:	2700      	movs	r7, #0
1001349c:	469c      	mov	ip, r3
1001349e:	2300      	movs	r3, #0
100134a0:	4460      	add	r0, ip
100134a2:	4246      	negs	r6, r0
100134a4:	9301      	str	r3, [sp, #4]
100134a6:	e785      	b.n	100133b4 <__aeabi_dmul+0x4c>
100134a8:	4652      	mov	r2, sl
100134aa:	432a      	orrs	r2, r5
100134ac:	d12c      	bne.n	10013508 <__aeabi_dmul+0x1a0>
100134ae:	2500      	movs	r5, #0
100134b0:	2300      	movs	r3, #0
100134b2:	2202      	movs	r2, #2
100134b4:	e797      	b.n	100133e6 <__aeabi_dmul+0x7e>
100134b6:	4652      	mov	r2, sl
100134b8:	432a      	orrs	r2, r5
100134ba:	d021      	beq.n	10013500 <__aeabi_dmul+0x198>
100134bc:	2d00      	cmp	r5, #0
100134be:	d100      	bne.n	100134c2 <__aeabi_dmul+0x15a>
100134c0:	e154      	b.n	1001376c <__aeabi_dmul+0x404>
100134c2:	0028      	movs	r0, r5
100134c4:	f000 fe6c 	bl	100141a0 <__clzsi2>
100134c8:	0003      	movs	r3, r0
100134ca:	3b0b      	subs	r3, #11
100134cc:	2b1c      	cmp	r3, #28
100134ce:	dd00      	ble.n	100134d2 <__aeabi_dmul+0x16a>
100134d0:	e146      	b.n	10013760 <__aeabi_dmul+0x3f8>
100134d2:	211d      	movs	r1, #29
100134d4:	1acb      	subs	r3, r1, r3
100134d6:	4651      	mov	r1, sl
100134d8:	0002      	movs	r2, r0
100134da:	40d9      	lsrs	r1, r3
100134dc:	4653      	mov	r3, sl
100134de:	3a08      	subs	r2, #8
100134e0:	4095      	lsls	r5, r2
100134e2:	4093      	lsls	r3, r2
100134e4:	430d      	orrs	r5, r1
100134e6:	4a1b      	ldr	r2, [pc, #108]	; (10013554 <__aeabi_dmul+0x1ec>)
100134e8:	4694      	mov	ip, r2
100134ea:	4460      	add	r0, ip
100134ec:	4240      	negs	r0, r0
100134ee:	2200      	movs	r2, #0
100134f0:	e779      	b.n	100133e6 <__aeabi_dmul+0x7e>
100134f2:	2401      	movs	r4, #1
100134f4:	2200      	movs	r2, #0
100134f6:	400c      	ands	r4, r1
100134f8:	4b12      	ldr	r3, [pc, #72]	; (10013544 <__aeabi_dmul+0x1dc>)
100134fa:	2500      	movs	r5, #0
100134fc:	4690      	mov	r8, r2
100134fe:	e799      	b.n	10013434 <__aeabi_dmul+0xcc>
10013500:	2500      	movs	r5, #0
10013502:	2300      	movs	r3, #0
10013504:	2201      	movs	r2, #1
10013506:	e76e      	b.n	100133e6 <__aeabi_dmul+0x7e>
10013508:	2203      	movs	r2, #3
1001350a:	e76c      	b.n	100133e6 <__aeabi_dmul+0x7e>
1001350c:	2300      	movs	r3, #0
1001350e:	469b      	mov	fp, r3
10013510:	4698      	mov	r8, r3
10013512:	3301      	adds	r3, #1
10013514:	2704      	movs	r7, #4
10013516:	9301      	str	r3, [sp, #4]
10013518:	e74c      	b.n	100133b4 <__aeabi_dmul+0x4c>
1001351a:	2303      	movs	r3, #3
1001351c:	270c      	movs	r7, #12
1001351e:	9301      	str	r3, [sp, #4]
10013520:	e748      	b.n	100133b4 <__aeabi_dmul+0x4c>
10013522:	2300      	movs	r3, #0
10013524:	2580      	movs	r5, #128	; 0x80
10013526:	4698      	mov	r8, r3
10013528:	2400      	movs	r4, #0
1001352a:	032d      	lsls	r5, r5, #12
1001352c:	4b05      	ldr	r3, [pc, #20]	; (10013544 <__aeabi_dmul+0x1dc>)
1001352e:	e781      	b.n	10013434 <__aeabi_dmul+0xcc>
10013530:	465d      	mov	r5, fp
10013532:	4643      	mov	r3, r8
10013534:	9a01      	ldr	r2, [sp, #4]
10013536:	e76f      	b.n	10013418 <__aeabi_dmul+0xb0>
10013538:	465d      	mov	r5, fp
1001353a:	4643      	mov	r3, r8
1001353c:	0021      	movs	r1, r4
1001353e:	9a01      	ldr	r2, [sp, #4]
10013540:	e76a      	b.n	10013418 <__aeabi_dmul+0xb0>
10013542:	46c0      	nop			; (mov r8, r8)
10013544:	000007ff 	.word	0x000007ff
10013548:	fffffc01 	.word	0xfffffc01
1001354c:	10017478 	.word	0x10017478
10013550:	800fffff 	.word	0x800fffff
10013554:	000003f3 	.word	0x000003f3
10013558:	4642      	mov	r2, r8
1001355a:	0c12      	lsrs	r2, r2, #16
1001355c:	4691      	mov	r9, r2
1001355e:	0c1a      	lsrs	r2, r3, #16
10013560:	4694      	mov	ip, r2
10013562:	4642      	mov	r2, r8
10013564:	0417      	lsls	r7, r2, #16
10013566:	464a      	mov	r2, r9
10013568:	041b      	lsls	r3, r3, #16
1001356a:	0c1b      	lsrs	r3, r3, #16
1001356c:	435a      	muls	r2, r3
1001356e:	4660      	mov	r0, ip
10013570:	4690      	mov	r8, r2
10013572:	464a      	mov	r2, r9
10013574:	4342      	muls	r2, r0
10013576:	0010      	movs	r0, r2
10013578:	9203      	str	r2, [sp, #12]
1001357a:	4662      	mov	r2, ip
1001357c:	001c      	movs	r4, r3
1001357e:	0c3f      	lsrs	r7, r7, #16
10013580:	437a      	muls	r2, r7
10013582:	437c      	muls	r4, r7
10013584:	4442      	add	r2, r8
10013586:	9201      	str	r2, [sp, #4]
10013588:	0c22      	lsrs	r2, r4, #16
1001358a:	4692      	mov	sl, r2
1001358c:	9a01      	ldr	r2, [sp, #4]
1001358e:	4452      	add	r2, sl
10013590:	4590      	cmp	r8, r2
10013592:	d906      	bls.n	100135a2 <__aeabi_dmul+0x23a>
10013594:	4682      	mov	sl, r0
10013596:	2080      	movs	r0, #128	; 0x80
10013598:	0240      	lsls	r0, r0, #9
1001359a:	4680      	mov	r8, r0
1001359c:	44c2      	add	sl, r8
1001359e:	4650      	mov	r0, sl
100135a0:	9003      	str	r0, [sp, #12]
100135a2:	0c10      	lsrs	r0, r2, #16
100135a4:	9004      	str	r0, [sp, #16]
100135a6:	4648      	mov	r0, r9
100135a8:	0424      	lsls	r4, r4, #16
100135aa:	0c24      	lsrs	r4, r4, #16
100135ac:	0412      	lsls	r2, r2, #16
100135ae:	1912      	adds	r2, r2, r4
100135b0:	9205      	str	r2, [sp, #20]
100135b2:	0c2a      	lsrs	r2, r5, #16
100135b4:	042d      	lsls	r5, r5, #16
100135b6:	0c2d      	lsrs	r5, r5, #16
100135b8:	4368      	muls	r0, r5
100135ba:	002c      	movs	r4, r5
100135bc:	4682      	mov	sl, r0
100135be:	4648      	mov	r0, r9
100135c0:	437c      	muls	r4, r7
100135c2:	4350      	muls	r0, r2
100135c4:	4681      	mov	r9, r0
100135c6:	0c20      	lsrs	r0, r4, #16
100135c8:	4680      	mov	r8, r0
100135ca:	4357      	muls	r7, r2
100135cc:	4457      	add	r7, sl
100135ce:	4447      	add	r7, r8
100135d0:	45ba      	cmp	sl, r7
100135d2:	d903      	bls.n	100135dc <__aeabi_dmul+0x274>
100135d4:	2080      	movs	r0, #128	; 0x80
100135d6:	0240      	lsls	r0, r0, #9
100135d8:	4680      	mov	r8, r0
100135da:	44c1      	add	r9, r8
100135dc:	0c38      	lsrs	r0, r7, #16
100135de:	043f      	lsls	r7, r7, #16
100135e0:	46b8      	mov	r8, r7
100135e2:	4448      	add	r0, r9
100135e4:	0424      	lsls	r4, r4, #16
100135e6:	0c24      	lsrs	r4, r4, #16
100135e8:	9001      	str	r0, [sp, #4]
100135ea:	9804      	ldr	r0, [sp, #16]
100135ec:	44a0      	add	r8, r4
100135ee:	4440      	add	r0, r8
100135f0:	9004      	str	r0, [sp, #16]
100135f2:	4658      	mov	r0, fp
100135f4:	0c00      	lsrs	r0, r0, #16
100135f6:	4681      	mov	r9, r0
100135f8:	4658      	mov	r0, fp
100135fa:	0404      	lsls	r4, r0, #16
100135fc:	0c20      	lsrs	r0, r4, #16
100135fe:	4682      	mov	sl, r0
10013600:	0007      	movs	r7, r0
10013602:	4648      	mov	r0, r9
10013604:	435f      	muls	r7, r3
10013606:	464c      	mov	r4, r9
10013608:	4343      	muls	r3, r0
1001360a:	4660      	mov	r0, ip
1001360c:	4360      	muls	r0, r4
1001360e:	4664      	mov	r4, ip
10013610:	4683      	mov	fp, r0
10013612:	4650      	mov	r0, sl
10013614:	4344      	muls	r4, r0
10013616:	0c38      	lsrs	r0, r7, #16
10013618:	4684      	mov	ip, r0
1001361a:	18e4      	adds	r4, r4, r3
1001361c:	4464      	add	r4, ip
1001361e:	42a3      	cmp	r3, r4
10013620:	d903      	bls.n	1001362a <__aeabi_dmul+0x2c2>
10013622:	2380      	movs	r3, #128	; 0x80
10013624:	025b      	lsls	r3, r3, #9
10013626:	469c      	mov	ip, r3
10013628:	44e3      	add	fp, ip
1001362a:	4648      	mov	r0, r9
1001362c:	043f      	lsls	r7, r7, #16
1001362e:	0c23      	lsrs	r3, r4, #16
10013630:	0c3f      	lsrs	r7, r7, #16
10013632:	0424      	lsls	r4, r4, #16
10013634:	19e4      	adds	r4, r4, r7
10013636:	4657      	mov	r7, sl
10013638:	4368      	muls	r0, r5
1001363a:	436f      	muls	r7, r5
1001363c:	4684      	mov	ip, r0
1001363e:	464d      	mov	r5, r9
10013640:	4650      	mov	r0, sl
10013642:	4355      	muls	r5, r2
10013644:	4342      	muls	r2, r0
10013646:	0c38      	lsrs	r0, r7, #16
10013648:	4681      	mov	r9, r0
1001364a:	4462      	add	r2, ip
1001364c:	444a      	add	r2, r9
1001364e:	445b      	add	r3, fp
10013650:	4594      	cmp	ip, r2
10013652:	d903      	bls.n	1001365c <__aeabi_dmul+0x2f4>
10013654:	2080      	movs	r0, #128	; 0x80
10013656:	0240      	lsls	r0, r0, #9
10013658:	4684      	mov	ip, r0
1001365a:	4465      	add	r5, ip
1001365c:	9803      	ldr	r0, [sp, #12]
1001365e:	043f      	lsls	r7, r7, #16
10013660:	4683      	mov	fp, r0
10013662:	9804      	ldr	r0, [sp, #16]
10013664:	0c3f      	lsrs	r7, r7, #16
10013666:	4684      	mov	ip, r0
10013668:	44e3      	add	fp, ip
1001366a:	45c3      	cmp	fp, r8
1001366c:	4180      	sbcs	r0, r0
1001366e:	4240      	negs	r0, r0
10013670:	4682      	mov	sl, r0
10013672:	0410      	lsls	r0, r2, #16
10013674:	4684      	mov	ip, r0
10013676:	9801      	ldr	r0, [sp, #4]
10013678:	4467      	add	r7, ip
1001367a:	4684      	mov	ip, r0
1001367c:	4467      	add	r7, ip
1001367e:	44a3      	add	fp, r4
10013680:	46bc      	mov	ip, r7
10013682:	45a3      	cmp	fp, r4
10013684:	41a4      	sbcs	r4, r4
10013686:	4699      	mov	r9, r3
10013688:	44d4      	add	ip, sl
1001368a:	4264      	negs	r4, r4
1001368c:	4287      	cmp	r7, r0
1001368e:	41bf      	sbcs	r7, r7
10013690:	45d4      	cmp	ip, sl
10013692:	4180      	sbcs	r0, r0
10013694:	44e1      	add	r9, ip
10013696:	46a0      	mov	r8, r4
10013698:	4599      	cmp	r9, r3
1001369a:	419b      	sbcs	r3, r3
1001369c:	427f      	negs	r7, r7
1001369e:	4240      	negs	r0, r0
100136a0:	44c8      	add	r8, r9
100136a2:	4307      	orrs	r7, r0
100136a4:	0c12      	lsrs	r2, r2, #16
100136a6:	18ba      	adds	r2, r7, r2
100136a8:	45a0      	cmp	r8, r4
100136aa:	41a4      	sbcs	r4, r4
100136ac:	425f      	negs	r7, r3
100136ae:	003b      	movs	r3, r7
100136b0:	4264      	negs	r4, r4
100136b2:	4323      	orrs	r3, r4
100136b4:	18d7      	adds	r7, r2, r3
100136b6:	4643      	mov	r3, r8
100136b8:	197d      	adds	r5, r7, r5
100136ba:	0ddb      	lsrs	r3, r3, #23
100136bc:	026d      	lsls	r5, r5, #9
100136be:	431d      	orrs	r5, r3
100136c0:	465b      	mov	r3, fp
100136c2:	025a      	lsls	r2, r3, #9
100136c4:	9b05      	ldr	r3, [sp, #20]
100136c6:	431a      	orrs	r2, r3
100136c8:	1e53      	subs	r3, r2, #1
100136ca:	419a      	sbcs	r2, r3
100136cc:	465b      	mov	r3, fp
100136ce:	0ddb      	lsrs	r3, r3, #23
100136d0:	431a      	orrs	r2, r3
100136d2:	4643      	mov	r3, r8
100136d4:	025b      	lsls	r3, r3, #9
100136d6:	4313      	orrs	r3, r2
100136d8:	01ea      	lsls	r2, r5, #7
100136da:	d507      	bpl.n	100136ec <__aeabi_dmul+0x384>
100136dc:	2201      	movs	r2, #1
100136de:	085c      	lsrs	r4, r3, #1
100136e0:	4013      	ands	r3, r2
100136e2:	4323      	orrs	r3, r4
100136e4:	07ea      	lsls	r2, r5, #31
100136e6:	9e02      	ldr	r6, [sp, #8]
100136e8:	4313      	orrs	r3, r2
100136ea:	086d      	lsrs	r5, r5, #1
100136ec:	4a57      	ldr	r2, [pc, #348]	; (1001384c <__aeabi_dmul+0x4e4>)
100136ee:	18b2      	adds	r2, r6, r2
100136f0:	2a00      	cmp	r2, #0
100136f2:	dd4b      	ble.n	1001378c <__aeabi_dmul+0x424>
100136f4:	0758      	lsls	r0, r3, #29
100136f6:	d009      	beq.n	1001370c <__aeabi_dmul+0x3a4>
100136f8:	200f      	movs	r0, #15
100136fa:	4018      	ands	r0, r3
100136fc:	2804      	cmp	r0, #4
100136fe:	d005      	beq.n	1001370c <__aeabi_dmul+0x3a4>
10013700:	1d18      	adds	r0, r3, #4
10013702:	4298      	cmp	r0, r3
10013704:	419b      	sbcs	r3, r3
10013706:	425b      	negs	r3, r3
10013708:	18ed      	adds	r5, r5, r3
1001370a:	0003      	movs	r3, r0
1001370c:	01e8      	lsls	r0, r5, #7
1001370e:	d504      	bpl.n	1001371a <__aeabi_dmul+0x3b2>
10013710:	4a4f      	ldr	r2, [pc, #316]	; (10013850 <__aeabi_dmul+0x4e8>)
10013712:	4015      	ands	r5, r2
10013714:	2280      	movs	r2, #128	; 0x80
10013716:	00d2      	lsls	r2, r2, #3
10013718:	18b2      	adds	r2, r6, r2
1001371a:	484e      	ldr	r0, [pc, #312]	; (10013854 <__aeabi_dmul+0x4ec>)
1001371c:	4282      	cmp	r2, r0
1001371e:	dd00      	ble.n	10013722 <__aeabi_dmul+0x3ba>
10013720:	e6e7      	b.n	100134f2 <__aeabi_dmul+0x18a>
10013722:	2401      	movs	r4, #1
10013724:	08db      	lsrs	r3, r3, #3
10013726:	0768      	lsls	r0, r5, #29
10013728:	4318      	orrs	r0, r3
1001372a:	026d      	lsls	r5, r5, #9
1001372c:	0553      	lsls	r3, r2, #21
1001372e:	4680      	mov	r8, r0
10013730:	0b2d      	lsrs	r5, r5, #12
10013732:	0d5b      	lsrs	r3, r3, #21
10013734:	400c      	ands	r4, r1
10013736:	e67d      	b.n	10013434 <__aeabi_dmul+0xcc>
10013738:	2280      	movs	r2, #128	; 0x80
1001373a:	4659      	mov	r1, fp
1001373c:	0312      	lsls	r2, r2, #12
1001373e:	4211      	tst	r1, r2
10013740:	d008      	beq.n	10013754 <__aeabi_dmul+0x3ec>
10013742:	4215      	tst	r5, r2
10013744:	d106      	bne.n	10013754 <__aeabi_dmul+0x3ec>
10013746:	4315      	orrs	r5, r2
10013748:	032d      	lsls	r5, r5, #12
1001374a:	4698      	mov	r8, r3
1001374c:	0b2d      	lsrs	r5, r5, #12
1001374e:	464c      	mov	r4, r9
10013750:	4b41      	ldr	r3, [pc, #260]	; (10013858 <__aeabi_dmul+0x4f0>)
10013752:	e66f      	b.n	10013434 <__aeabi_dmul+0xcc>
10013754:	465d      	mov	r5, fp
10013756:	4315      	orrs	r5, r2
10013758:	032d      	lsls	r5, r5, #12
1001375a:	0b2d      	lsrs	r5, r5, #12
1001375c:	4b3e      	ldr	r3, [pc, #248]	; (10013858 <__aeabi_dmul+0x4f0>)
1001375e:	e669      	b.n	10013434 <__aeabi_dmul+0xcc>
10013760:	0003      	movs	r3, r0
10013762:	4655      	mov	r5, sl
10013764:	3b28      	subs	r3, #40	; 0x28
10013766:	409d      	lsls	r5, r3
10013768:	2300      	movs	r3, #0
1001376a:	e6bc      	b.n	100134e6 <__aeabi_dmul+0x17e>
1001376c:	4650      	mov	r0, sl
1001376e:	f000 fd17 	bl	100141a0 <__clzsi2>
10013772:	3020      	adds	r0, #32
10013774:	e6a8      	b.n	100134c8 <__aeabi_dmul+0x160>
10013776:	0003      	movs	r3, r0
10013778:	3b28      	subs	r3, #40	; 0x28
1001377a:	409f      	lsls	r7, r3
1001377c:	2300      	movs	r3, #0
1001377e:	46bb      	mov	fp, r7
10013780:	4698      	mov	r8, r3
10013782:	e689      	b.n	10013498 <__aeabi_dmul+0x130>
10013784:	f000 fd0c 	bl	100141a0 <__clzsi2>
10013788:	3020      	adds	r0, #32
1001378a:	e673      	b.n	10013474 <__aeabi_dmul+0x10c>
1001378c:	2401      	movs	r4, #1
1001378e:	1aa6      	subs	r6, r4, r2
10013790:	2e38      	cmp	r6, #56	; 0x38
10013792:	dd07      	ble.n	100137a4 <__aeabi_dmul+0x43c>
10013794:	2200      	movs	r2, #0
10013796:	400c      	ands	r4, r1
10013798:	2300      	movs	r3, #0
1001379a:	2500      	movs	r5, #0
1001379c:	4690      	mov	r8, r2
1001379e:	e649      	b.n	10013434 <__aeabi_dmul+0xcc>
100137a0:	9e02      	ldr	r6, [sp, #8]
100137a2:	e7a3      	b.n	100136ec <__aeabi_dmul+0x384>
100137a4:	2e1f      	cmp	r6, #31
100137a6:	dc20      	bgt.n	100137ea <__aeabi_dmul+0x482>
100137a8:	2220      	movs	r2, #32
100137aa:	002c      	movs	r4, r5
100137ac:	0018      	movs	r0, r3
100137ae:	1b92      	subs	r2, r2, r6
100137b0:	40f0      	lsrs	r0, r6
100137b2:	4094      	lsls	r4, r2
100137b4:	4093      	lsls	r3, r2
100137b6:	4304      	orrs	r4, r0
100137b8:	1e58      	subs	r0, r3, #1
100137ba:	4183      	sbcs	r3, r0
100137bc:	431c      	orrs	r4, r3
100137be:	40f5      	lsrs	r5, r6
100137c0:	0763      	lsls	r3, r4, #29
100137c2:	d009      	beq.n	100137d8 <__aeabi_dmul+0x470>
100137c4:	230f      	movs	r3, #15
100137c6:	4023      	ands	r3, r4
100137c8:	2b04      	cmp	r3, #4
100137ca:	d005      	beq.n	100137d8 <__aeabi_dmul+0x470>
100137cc:	0023      	movs	r3, r4
100137ce:	1d1c      	adds	r4, r3, #4
100137d0:	429c      	cmp	r4, r3
100137d2:	4192      	sbcs	r2, r2
100137d4:	4252      	negs	r2, r2
100137d6:	18ad      	adds	r5, r5, r2
100137d8:	022b      	lsls	r3, r5, #8
100137da:	d51f      	bpl.n	1001381c <__aeabi_dmul+0x4b4>
100137dc:	2401      	movs	r4, #1
100137de:	2200      	movs	r2, #0
100137e0:	400c      	ands	r4, r1
100137e2:	2301      	movs	r3, #1
100137e4:	2500      	movs	r5, #0
100137e6:	4690      	mov	r8, r2
100137e8:	e624      	b.n	10013434 <__aeabi_dmul+0xcc>
100137ea:	201f      	movs	r0, #31
100137ec:	002c      	movs	r4, r5
100137ee:	4240      	negs	r0, r0
100137f0:	1a82      	subs	r2, r0, r2
100137f2:	40d4      	lsrs	r4, r2
100137f4:	2e20      	cmp	r6, #32
100137f6:	d01c      	beq.n	10013832 <__aeabi_dmul+0x4ca>
100137f8:	2240      	movs	r2, #64	; 0x40
100137fa:	1b96      	subs	r6, r2, r6
100137fc:	40b5      	lsls	r5, r6
100137fe:	432b      	orrs	r3, r5
10013800:	1e58      	subs	r0, r3, #1
10013802:	4183      	sbcs	r3, r0
10013804:	2007      	movs	r0, #7
10013806:	4323      	orrs	r3, r4
10013808:	4018      	ands	r0, r3
1001380a:	2500      	movs	r5, #0
1001380c:	2800      	cmp	r0, #0
1001380e:	d009      	beq.n	10013824 <__aeabi_dmul+0x4bc>
10013810:	220f      	movs	r2, #15
10013812:	2500      	movs	r5, #0
10013814:	401a      	ands	r2, r3
10013816:	001c      	movs	r4, r3
10013818:	2a04      	cmp	r2, #4
1001381a:	d1d8      	bne.n	100137ce <__aeabi_dmul+0x466>
1001381c:	0023      	movs	r3, r4
1001381e:	0768      	lsls	r0, r5, #29
10013820:	026d      	lsls	r5, r5, #9
10013822:	0b2d      	lsrs	r5, r5, #12
10013824:	2401      	movs	r4, #1
10013826:	08db      	lsrs	r3, r3, #3
10013828:	4303      	orrs	r3, r0
1001382a:	4698      	mov	r8, r3
1001382c:	400c      	ands	r4, r1
1001382e:	2300      	movs	r3, #0
10013830:	e600      	b.n	10013434 <__aeabi_dmul+0xcc>
10013832:	2500      	movs	r5, #0
10013834:	e7e3      	b.n	100137fe <__aeabi_dmul+0x496>
10013836:	2280      	movs	r2, #128	; 0x80
10013838:	2401      	movs	r4, #1
1001383a:	0312      	lsls	r2, r2, #12
1001383c:	4315      	orrs	r5, r2
1001383e:	032d      	lsls	r5, r5, #12
10013840:	4698      	mov	r8, r3
10013842:	0b2d      	lsrs	r5, r5, #12
10013844:	400c      	ands	r4, r1
10013846:	4b04      	ldr	r3, [pc, #16]	; (10013858 <__aeabi_dmul+0x4f0>)
10013848:	e5f4      	b.n	10013434 <__aeabi_dmul+0xcc>
1001384a:	46c0      	nop			; (mov r8, r8)
1001384c:	000003ff 	.word	0x000003ff
10013850:	feffffff 	.word	0xfeffffff
10013854:	000007fe 	.word	0x000007fe
10013858:	000007ff 	.word	0x000007ff

1001385c <__aeabi_dsub>:
1001385c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001385e:	4657      	mov	r7, sl
10013860:	464e      	mov	r6, r9
10013862:	4645      	mov	r5, r8
10013864:	b4e0      	push	{r5, r6, r7}
10013866:	000e      	movs	r6, r1
10013868:	0011      	movs	r1, r2
1001386a:	0ff2      	lsrs	r2, r6, #31
1001386c:	4692      	mov	sl, r2
1001386e:	00c5      	lsls	r5, r0, #3
10013870:	0f42      	lsrs	r2, r0, #29
10013872:	0318      	lsls	r0, r3, #12
10013874:	0337      	lsls	r7, r6, #12
10013876:	0074      	lsls	r4, r6, #1
10013878:	0a40      	lsrs	r0, r0, #9
1001387a:	0f4e      	lsrs	r6, r1, #29
1001387c:	0a7f      	lsrs	r7, r7, #9
1001387e:	4330      	orrs	r0, r6
10013880:	4ecf      	ldr	r6, [pc, #828]	; (10013bc0 <__aeabi_dsub+0x364>)
10013882:	4317      	orrs	r7, r2
10013884:	005a      	lsls	r2, r3, #1
10013886:	0d64      	lsrs	r4, r4, #21
10013888:	0d52      	lsrs	r2, r2, #21
1001388a:	0fdb      	lsrs	r3, r3, #31
1001388c:	00c9      	lsls	r1, r1, #3
1001388e:	42b2      	cmp	r2, r6
10013890:	d100      	bne.n	10013894 <__aeabi_dsub+0x38>
10013892:	e0e5      	b.n	10013a60 <__aeabi_dsub+0x204>
10013894:	2601      	movs	r6, #1
10013896:	4073      	eors	r3, r6
10013898:	1aa6      	subs	r6, r4, r2
1001389a:	46b4      	mov	ip, r6
1001389c:	4553      	cmp	r3, sl
1001389e:	d100      	bne.n	100138a2 <__aeabi_dsub+0x46>
100138a0:	e0af      	b.n	10013a02 <__aeabi_dsub+0x1a6>
100138a2:	2e00      	cmp	r6, #0
100138a4:	dc00      	bgt.n	100138a8 <__aeabi_dsub+0x4c>
100138a6:	e10d      	b.n	10013ac4 <__aeabi_dsub+0x268>
100138a8:	2a00      	cmp	r2, #0
100138aa:	d13a      	bne.n	10013922 <__aeabi_dsub+0xc6>
100138ac:	0003      	movs	r3, r0
100138ae:	430b      	orrs	r3, r1
100138b0:	d000      	beq.n	100138b4 <__aeabi_dsub+0x58>
100138b2:	e0e4      	b.n	10013a7e <__aeabi_dsub+0x222>
100138b4:	076b      	lsls	r3, r5, #29
100138b6:	d009      	beq.n	100138cc <__aeabi_dsub+0x70>
100138b8:	230f      	movs	r3, #15
100138ba:	402b      	ands	r3, r5
100138bc:	2b04      	cmp	r3, #4
100138be:	d005      	beq.n	100138cc <__aeabi_dsub+0x70>
100138c0:	1d2b      	adds	r3, r5, #4
100138c2:	42ab      	cmp	r3, r5
100138c4:	41ad      	sbcs	r5, r5
100138c6:	426d      	negs	r5, r5
100138c8:	197f      	adds	r7, r7, r5
100138ca:	001d      	movs	r5, r3
100138cc:	023b      	lsls	r3, r7, #8
100138ce:	d400      	bmi.n	100138d2 <__aeabi_dsub+0x76>
100138d0:	e088      	b.n	100139e4 <__aeabi_dsub+0x188>
100138d2:	4bbb      	ldr	r3, [pc, #748]	; (10013bc0 <__aeabi_dsub+0x364>)
100138d4:	3401      	adds	r4, #1
100138d6:	429c      	cmp	r4, r3
100138d8:	d100      	bne.n	100138dc <__aeabi_dsub+0x80>
100138da:	e110      	b.n	10013afe <__aeabi_dsub+0x2a2>
100138dc:	003a      	movs	r2, r7
100138de:	4bb9      	ldr	r3, [pc, #740]	; (10013bc4 <__aeabi_dsub+0x368>)
100138e0:	4651      	mov	r1, sl
100138e2:	401a      	ands	r2, r3
100138e4:	2301      	movs	r3, #1
100138e6:	0750      	lsls	r0, r2, #29
100138e8:	08ed      	lsrs	r5, r5, #3
100138ea:	0252      	lsls	r2, r2, #9
100138ec:	0564      	lsls	r4, r4, #21
100138ee:	4305      	orrs	r5, r0
100138f0:	0b12      	lsrs	r2, r2, #12
100138f2:	0d64      	lsrs	r4, r4, #21
100138f4:	400b      	ands	r3, r1
100138f6:	2100      	movs	r1, #0
100138f8:	0028      	movs	r0, r5
100138fa:	0312      	lsls	r2, r2, #12
100138fc:	0d0d      	lsrs	r5, r1, #20
100138fe:	0b12      	lsrs	r2, r2, #12
10013900:	0564      	lsls	r4, r4, #21
10013902:	052d      	lsls	r5, r5, #20
10013904:	4315      	orrs	r5, r2
10013906:	0862      	lsrs	r2, r4, #1
10013908:	4caf      	ldr	r4, [pc, #700]	; (10013bc8 <__aeabi_dsub+0x36c>)
1001390a:	07db      	lsls	r3, r3, #31
1001390c:	402c      	ands	r4, r5
1001390e:	4314      	orrs	r4, r2
10013910:	0064      	lsls	r4, r4, #1
10013912:	0864      	lsrs	r4, r4, #1
10013914:	431c      	orrs	r4, r3
10013916:	0021      	movs	r1, r4
10013918:	bc1c      	pop	{r2, r3, r4}
1001391a:	4690      	mov	r8, r2
1001391c:	4699      	mov	r9, r3
1001391e:	46a2      	mov	sl, r4
10013920:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013922:	4ba7      	ldr	r3, [pc, #668]	; (10013bc0 <__aeabi_dsub+0x364>)
10013924:	429c      	cmp	r4, r3
10013926:	d0c5      	beq.n	100138b4 <__aeabi_dsub+0x58>
10013928:	2380      	movs	r3, #128	; 0x80
1001392a:	041b      	lsls	r3, r3, #16
1001392c:	4318      	orrs	r0, r3
1001392e:	4663      	mov	r3, ip
10013930:	2b38      	cmp	r3, #56	; 0x38
10013932:	dd00      	ble.n	10013936 <__aeabi_dsub+0xda>
10013934:	e0fd      	b.n	10013b32 <__aeabi_dsub+0x2d6>
10013936:	2b1f      	cmp	r3, #31
10013938:	dd00      	ble.n	1001393c <__aeabi_dsub+0xe0>
1001393a:	e130      	b.n	10013b9e <__aeabi_dsub+0x342>
1001393c:	4662      	mov	r2, ip
1001393e:	2320      	movs	r3, #32
10013940:	1a9b      	subs	r3, r3, r2
10013942:	0002      	movs	r2, r0
10013944:	409a      	lsls	r2, r3
10013946:	4666      	mov	r6, ip
10013948:	4690      	mov	r8, r2
1001394a:	000a      	movs	r2, r1
1001394c:	4099      	lsls	r1, r3
1001394e:	40f2      	lsrs	r2, r6
10013950:	4646      	mov	r6, r8
10013952:	1e4b      	subs	r3, r1, #1
10013954:	4199      	sbcs	r1, r3
10013956:	4332      	orrs	r2, r6
10013958:	4311      	orrs	r1, r2
1001395a:	4663      	mov	r3, ip
1001395c:	0002      	movs	r2, r0
1001395e:	40da      	lsrs	r2, r3
10013960:	1a69      	subs	r1, r5, r1
10013962:	428d      	cmp	r5, r1
10013964:	419b      	sbcs	r3, r3
10013966:	000d      	movs	r5, r1
10013968:	1aba      	subs	r2, r7, r2
1001396a:	425b      	negs	r3, r3
1001396c:	1ad7      	subs	r7, r2, r3
1001396e:	023b      	lsls	r3, r7, #8
10013970:	d535      	bpl.n	100139de <__aeabi_dsub+0x182>
10013972:	027a      	lsls	r2, r7, #9
10013974:	0a53      	lsrs	r3, r2, #9
10013976:	4698      	mov	r8, r3
10013978:	4643      	mov	r3, r8
1001397a:	2b00      	cmp	r3, #0
1001397c:	d100      	bne.n	10013980 <__aeabi_dsub+0x124>
1001397e:	e0c4      	b.n	10013b0a <__aeabi_dsub+0x2ae>
10013980:	4640      	mov	r0, r8
10013982:	f000 fc0d 	bl	100141a0 <__clzsi2>
10013986:	0003      	movs	r3, r0
10013988:	3b08      	subs	r3, #8
1001398a:	2b1f      	cmp	r3, #31
1001398c:	dd00      	ble.n	10013990 <__aeabi_dsub+0x134>
1001398e:	e0c5      	b.n	10013b1c <__aeabi_dsub+0x2c0>
10013990:	2220      	movs	r2, #32
10013992:	0029      	movs	r1, r5
10013994:	1ad2      	subs	r2, r2, r3
10013996:	4647      	mov	r7, r8
10013998:	40d1      	lsrs	r1, r2
1001399a:	409f      	lsls	r7, r3
1001399c:	000a      	movs	r2, r1
1001399e:	409d      	lsls	r5, r3
100139a0:	433a      	orrs	r2, r7
100139a2:	429c      	cmp	r4, r3
100139a4:	dd00      	ble.n	100139a8 <__aeabi_dsub+0x14c>
100139a6:	e0c0      	b.n	10013b2a <__aeabi_dsub+0x2ce>
100139a8:	1b1c      	subs	r4, r3, r4
100139aa:	1c63      	adds	r3, r4, #1
100139ac:	2b1f      	cmp	r3, #31
100139ae:	dd00      	ble.n	100139b2 <__aeabi_dsub+0x156>
100139b0:	e0e4      	b.n	10013b7c <__aeabi_dsub+0x320>
100139b2:	2120      	movs	r1, #32
100139b4:	0014      	movs	r4, r2
100139b6:	0028      	movs	r0, r5
100139b8:	1ac9      	subs	r1, r1, r3
100139ba:	40d8      	lsrs	r0, r3
100139bc:	408c      	lsls	r4, r1
100139be:	408d      	lsls	r5, r1
100139c0:	4304      	orrs	r4, r0
100139c2:	40da      	lsrs	r2, r3
100139c4:	1e68      	subs	r0, r5, #1
100139c6:	4185      	sbcs	r5, r0
100139c8:	0017      	movs	r7, r2
100139ca:	4325      	orrs	r5, r4
100139cc:	2400      	movs	r4, #0
100139ce:	e771      	b.n	100138b4 <__aeabi_dsub+0x58>
100139d0:	4642      	mov	r2, r8
100139d2:	4663      	mov	r3, ip
100139d4:	431a      	orrs	r2, r3
100139d6:	d100      	bne.n	100139da <__aeabi_dsub+0x17e>
100139d8:	e24c      	b.n	10013e74 <__aeabi_dsub+0x618>
100139da:	4667      	mov	r7, ip
100139dc:	4645      	mov	r5, r8
100139de:	076b      	lsls	r3, r5, #29
100139e0:	d000      	beq.n	100139e4 <__aeabi_dsub+0x188>
100139e2:	e769      	b.n	100138b8 <__aeabi_dsub+0x5c>
100139e4:	2301      	movs	r3, #1
100139e6:	4651      	mov	r1, sl
100139e8:	0778      	lsls	r0, r7, #29
100139ea:	08ed      	lsrs	r5, r5, #3
100139ec:	08fa      	lsrs	r2, r7, #3
100139ee:	400b      	ands	r3, r1
100139f0:	4305      	orrs	r5, r0
100139f2:	4973      	ldr	r1, [pc, #460]	; (10013bc0 <__aeabi_dsub+0x364>)
100139f4:	428c      	cmp	r4, r1
100139f6:	d038      	beq.n	10013a6a <__aeabi_dsub+0x20e>
100139f8:	0312      	lsls	r2, r2, #12
100139fa:	0564      	lsls	r4, r4, #21
100139fc:	0b12      	lsrs	r2, r2, #12
100139fe:	0d64      	lsrs	r4, r4, #21
10013a00:	e779      	b.n	100138f6 <__aeabi_dsub+0x9a>
10013a02:	2e00      	cmp	r6, #0
10013a04:	dc00      	bgt.n	10013a08 <__aeabi_dsub+0x1ac>
10013a06:	e09a      	b.n	10013b3e <__aeabi_dsub+0x2e2>
10013a08:	2a00      	cmp	r2, #0
10013a0a:	d047      	beq.n	10013a9c <__aeabi_dsub+0x240>
10013a0c:	4a6c      	ldr	r2, [pc, #432]	; (10013bc0 <__aeabi_dsub+0x364>)
10013a0e:	4294      	cmp	r4, r2
10013a10:	d100      	bne.n	10013a14 <__aeabi_dsub+0x1b8>
10013a12:	e74f      	b.n	100138b4 <__aeabi_dsub+0x58>
10013a14:	2280      	movs	r2, #128	; 0x80
10013a16:	0412      	lsls	r2, r2, #16
10013a18:	4310      	orrs	r0, r2
10013a1a:	4662      	mov	r2, ip
10013a1c:	2a38      	cmp	r2, #56	; 0x38
10013a1e:	dc00      	bgt.n	10013a22 <__aeabi_dsub+0x1c6>
10013a20:	e108      	b.n	10013c34 <__aeabi_dsub+0x3d8>
10013a22:	4301      	orrs	r1, r0
10013a24:	1e48      	subs	r0, r1, #1
10013a26:	4181      	sbcs	r1, r0
10013a28:	2200      	movs	r2, #0
10013a2a:	b2c9      	uxtb	r1, r1
10013a2c:	1949      	adds	r1, r1, r5
10013a2e:	19d2      	adds	r2, r2, r7
10013a30:	42a9      	cmp	r1, r5
10013a32:	41bf      	sbcs	r7, r7
10013a34:	000d      	movs	r5, r1
10013a36:	427f      	negs	r7, r7
10013a38:	18bf      	adds	r7, r7, r2
10013a3a:	023a      	lsls	r2, r7, #8
10013a3c:	d400      	bmi.n	10013a40 <__aeabi_dsub+0x1e4>
10013a3e:	e142      	b.n	10013cc6 <__aeabi_dsub+0x46a>
10013a40:	4a5f      	ldr	r2, [pc, #380]	; (10013bc0 <__aeabi_dsub+0x364>)
10013a42:	3401      	adds	r4, #1
10013a44:	4294      	cmp	r4, r2
10013a46:	d100      	bne.n	10013a4a <__aeabi_dsub+0x1ee>
10013a48:	e14e      	b.n	10013ce8 <__aeabi_dsub+0x48c>
10013a4a:	2001      	movs	r0, #1
10013a4c:	4a5d      	ldr	r2, [pc, #372]	; (10013bc4 <__aeabi_dsub+0x368>)
10013a4e:	0869      	lsrs	r1, r5, #1
10013a50:	403a      	ands	r2, r7
10013a52:	4028      	ands	r0, r5
10013a54:	4308      	orrs	r0, r1
10013a56:	07d5      	lsls	r5, r2, #31
10013a58:	4305      	orrs	r5, r0
10013a5a:	0857      	lsrs	r7, r2, #1
10013a5c:	469a      	mov	sl, r3
10013a5e:	e729      	b.n	100138b4 <__aeabi_dsub+0x58>
10013a60:	0006      	movs	r6, r0
10013a62:	430e      	orrs	r6, r1
10013a64:	d000      	beq.n	10013a68 <__aeabi_dsub+0x20c>
10013a66:	e717      	b.n	10013898 <__aeabi_dsub+0x3c>
10013a68:	e714      	b.n	10013894 <__aeabi_dsub+0x38>
10013a6a:	0029      	movs	r1, r5
10013a6c:	4311      	orrs	r1, r2
10013a6e:	d100      	bne.n	10013a72 <__aeabi_dsub+0x216>
10013a70:	e1f9      	b.n	10013e66 <__aeabi_dsub+0x60a>
10013a72:	2180      	movs	r1, #128	; 0x80
10013a74:	0309      	lsls	r1, r1, #12
10013a76:	430a      	orrs	r2, r1
10013a78:	0312      	lsls	r2, r2, #12
10013a7a:	0b12      	lsrs	r2, r2, #12
10013a7c:	e73b      	b.n	100138f6 <__aeabi_dsub+0x9a>
10013a7e:	2301      	movs	r3, #1
10013a80:	425b      	negs	r3, r3
10013a82:	4698      	mov	r8, r3
10013a84:	44c4      	add	ip, r8
10013a86:	4663      	mov	r3, ip
10013a88:	2b00      	cmp	r3, #0
10013a8a:	d172      	bne.n	10013b72 <__aeabi_dsub+0x316>
10013a8c:	1a69      	subs	r1, r5, r1
10013a8e:	428d      	cmp	r5, r1
10013a90:	419b      	sbcs	r3, r3
10013a92:	1a3f      	subs	r7, r7, r0
10013a94:	425b      	negs	r3, r3
10013a96:	1aff      	subs	r7, r7, r3
10013a98:	000d      	movs	r5, r1
10013a9a:	e768      	b.n	1001396e <__aeabi_dsub+0x112>
10013a9c:	0002      	movs	r2, r0
10013a9e:	430a      	orrs	r2, r1
10013aa0:	d100      	bne.n	10013aa4 <__aeabi_dsub+0x248>
10013aa2:	e707      	b.n	100138b4 <__aeabi_dsub+0x58>
10013aa4:	2201      	movs	r2, #1
10013aa6:	4252      	negs	r2, r2
10013aa8:	4690      	mov	r8, r2
10013aaa:	44c4      	add	ip, r8
10013aac:	4662      	mov	r2, ip
10013aae:	2a00      	cmp	r2, #0
10013ab0:	d000      	beq.n	10013ab4 <__aeabi_dsub+0x258>
10013ab2:	e0e6      	b.n	10013c82 <__aeabi_dsub+0x426>
10013ab4:	1869      	adds	r1, r5, r1
10013ab6:	42a9      	cmp	r1, r5
10013ab8:	41b6      	sbcs	r6, r6
10013aba:	183f      	adds	r7, r7, r0
10013abc:	4276      	negs	r6, r6
10013abe:	19f7      	adds	r7, r6, r7
10013ac0:	000d      	movs	r5, r1
10013ac2:	e7ba      	b.n	10013a3a <__aeabi_dsub+0x1de>
10013ac4:	2e00      	cmp	r6, #0
10013ac6:	d000      	beq.n	10013aca <__aeabi_dsub+0x26e>
10013ac8:	e080      	b.n	10013bcc <__aeabi_dsub+0x370>
10013aca:	1c62      	adds	r2, r4, #1
10013acc:	0552      	lsls	r2, r2, #21
10013ace:	0d52      	lsrs	r2, r2, #21
10013ad0:	2a01      	cmp	r2, #1
10013ad2:	dc00      	bgt.n	10013ad6 <__aeabi_dsub+0x27a>
10013ad4:	e0f9      	b.n	10013cca <__aeabi_dsub+0x46e>
10013ad6:	1a6a      	subs	r2, r5, r1
10013ad8:	4691      	mov	r9, r2
10013ada:	454d      	cmp	r5, r9
10013adc:	41b6      	sbcs	r6, r6
10013ade:	1a3a      	subs	r2, r7, r0
10013ae0:	4276      	negs	r6, r6
10013ae2:	1b92      	subs	r2, r2, r6
10013ae4:	4690      	mov	r8, r2
10013ae6:	0212      	lsls	r2, r2, #8
10013ae8:	d400      	bmi.n	10013aec <__aeabi_dsub+0x290>
10013aea:	e099      	b.n	10013c20 <__aeabi_dsub+0x3c4>
10013aec:	1b4d      	subs	r5, r1, r5
10013aee:	42a9      	cmp	r1, r5
10013af0:	4189      	sbcs	r1, r1
10013af2:	1bc7      	subs	r7, r0, r7
10013af4:	4249      	negs	r1, r1
10013af6:	1a7a      	subs	r2, r7, r1
10013af8:	4690      	mov	r8, r2
10013afa:	469a      	mov	sl, r3
10013afc:	e73c      	b.n	10013978 <__aeabi_dsub+0x11c>
10013afe:	4652      	mov	r2, sl
10013b00:	2301      	movs	r3, #1
10013b02:	2500      	movs	r5, #0
10013b04:	4013      	ands	r3, r2
10013b06:	2200      	movs	r2, #0
10013b08:	e6f5      	b.n	100138f6 <__aeabi_dsub+0x9a>
10013b0a:	0028      	movs	r0, r5
10013b0c:	f000 fb48 	bl	100141a0 <__clzsi2>
10013b10:	3020      	adds	r0, #32
10013b12:	0003      	movs	r3, r0
10013b14:	3b08      	subs	r3, #8
10013b16:	2b1f      	cmp	r3, #31
10013b18:	dc00      	bgt.n	10013b1c <__aeabi_dsub+0x2c0>
10013b1a:	e739      	b.n	10013990 <__aeabi_dsub+0x134>
10013b1c:	002a      	movs	r2, r5
10013b1e:	3828      	subs	r0, #40	; 0x28
10013b20:	4082      	lsls	r2, r0
10013b22:	2500      	movs	r5, #0
10013b24:	429c      	cmp	r4, r3
10013b26:	dc00      	bgt.n	10013b2a <__aeabi_dsub+0x2ce>
10013b28:	e73e      	b.n	100139a8 <__aeabi_dsub+0x14c>
10013b2a:	4f26      	ldr	r7, [pc, #152]	; (10013bc4 <__aeabi_dsub+0x368>)
10013b2c:	1ae4      	subs	r4, r4, r3
10013b2e:	4017      	ands	r7, r2
10013b30:	e6c0      	b.n	100138b4 <__aeabi_dsub+0x58>
10013b32:	4301      	orrs	r1, r0
10013b34:	1e48      	subs	r0, r1, #1
10013b36:	4181      	sbcs	r1, r0
10013b38:	2200      	movs	r2, #0
10013b3a:	b2c9      	uxtb	r1, r1
10013b3c:	e710      	b.n	10013960 <__aeabi_dsub+0x104>
10013b3e:	2e00      	cmp	r6, #0
10013b40:	d000      	beq.n	10013b44 <__aeabi_dsub+0x2e8>
10013b42:	e0f1      	b.n	10013d28 <__aeabi_dsub+0x4cc>
10013b44:	1c62      	adds	r2, r4, #1
10013b46:	4694      	mov	ip, r2
10013b48:	0552      	lsls	r2, r2, #21
10013b4a:	0d52      	lsrs	r2, r2, #21
10013b4c:	2a01      	cmp	r2, #1
10013b4e:	dc00      	bgt.n	10013b52 <__aeabi_dsub+0x2f6>
10013b50:	e0a0      	b.n	10013c94 <__aeabi_dsub+0x438>
10013b52:	4a1b      	ldr	r2, [pc, #108]	; (10013bc0 <__aeabi_dsub+0x364>)
10013b54:	4594      	cmp	ip, r2
10013b56:	d100      	bne.n	10013b5a <__aeabi_dsub+0x2fe>
10013b58:	e0c5      	b.n	10013ce6 <__aeabi_dsub+0x48a>
10013b5a:	1869      	adds	r1, r5, r1
10013b5c:	42a9      	cmp	r1, r5
10013b5e:	4192      	sbcs	r2, r2
10013b60:	183f      	adds	r7, r7, r0
10013b62:	4252      	negs	r2, r2
10013b64:	19d2      	adds	r2, r2, r7
10013b66:	0849      	lsrs	r1, r1, #1
10013b68:	07d5      	lsls	r5, r2, #31
10013b6a:	430d      	orrs	r5, r1
10013b6c:	0857      	lsrs	r7, r2, #1
10013b6e:	4664      	mov	r4, ip
10013b70:	e6a0      	b.n	100138b4 <__aeabi_dsub+0x58>
10013b72:	4b13      	ldr	r3, [pc, #76]	; (10013bc0 <__aeabi_dsub+0x364>)
10013b74:	429c      	cmp	r4, r3
10013b76:	d000      	beq.n	10013b7a <__aeabi_dsub+0x31e>
10013b78:	e6d9      	b.n	1001392e <__aeabi_dsub+0xd2>
10013b7a:	e69b      	b.n	100138b4 <__aeabi_dsub+0x58>
10013b7c:	0011      	movs	r1, r2
10013b7e:	3c1f      	subs	r4, #31
10013b80:	40e1      	lsrs	r1, r4
10013b82:	000c      	movs	r4, r1
10013b84:	2b20      	cmp	r3, #32
10013b86:	d100      	bne.n	10013b8a <__aeabi_dsub+0x32e>
10013b88:	e080      	b.n	10013c8c <__aeabi_dsub+0x430>
10013b8a:	2140      	movs	r1, #64	; 0x40
10013b8c:	1acb      	subs	r3, r1, r3
10013b8e:	409a      	lsls	r2, r3
10013b90:	4315      	orrs	r5, r2
10013b92:	1e6a      	subs	r2, r5, #1
10013b94:	4195      	sbcs	r5, r2
10013b96:	2700      	movs	r7, #0
10013b98:	4325      	orrs	r5, r4
10013b9a:	2400      	movs	r4, #0
10013b9c:	e71f      	b.n	100139de <__aeabi_dsub+0x182>
10013b9e:	4663      	mov	r3, ip
10013ba0:	0002      	movs	r2, r0
10013ba2:	3b20      	subs	r3, #32
10013ba4:	40da      	lsrs	r2, r3
10013ba6:	4663      	mov	r3, ip
10013ba8:	2b20      	cmp	r3, #32
10013baa:	d071      	beq.n	10013c90 <__aeabi_dsub+0x434>
10013bac:	2340      	movs	r3, #64	; 0x40
10013bae:	4666      	mov	r6, ip
10013bb0:	1b9b      	subs	r3, r3, r6
10013bb2:	4098      	lsls	r0, r3
10013bb4:	4301      	orrs	r1, r0
10013bb6:	1e48      	subs	r0, r1, #1
10013bb8:	4181      	sbcs	r1, r0
10013bba:	4311      	orrs	r1, r2
10013bbc:	2200      	movs	r2, #0
10013bbe:	e6cf      	b.n	10013960 <__aeabi_dsub+0x104>
10013bc0:	000007ff 	.word	0x000007ff
10013bc4:	ff7fffff 	.word	0xff7fffff
10013bc8:	800fffff 	.word	0x800fffff
10013bcc:	2c00      	cmp	r4, #0
10013bce:	d048      	beq.n	10013c62 <__aeabi_dsub+0x406>
10013bd0:	4cca      	ldr	r4, [pc, #808]	; (10013efc <__aeabi_dsub+0x6a0>)
10013bd2:	42a2      	cmp	r2, r4
10013bd4:	d100      	bne.n	10013bd8 <__aeabi_dsub+0x37c>
10013bd6:	e0a2      	b.n	10013d1e <__aeabi_dsub+0x4c2>
10013bd8:	4274      	negs	r4, r6
10013bda:	46a1      	mov	r9, r4
10013bdc:	2480      	movs	r4, #128	; 0x80
10013bde:	0424      	lsls	r4, r4, #16
10013be0:	4327      	orrs	r7, r4
10013be2:	464c      	mov	r4, r9
10013be4:	2c38      	cmp	r4, #56	; 0x38
10013be6:	dd00      	ble.n	10013bea <__aeabi_dsub+0x38e>
10013be8:	e0db      	b.n	10013da2 <__aeabi_dsub+0x546>
10013bea:	2c1f      	cmp	r4, #31
10013bec:	dd00      	ble.n	10013bf0 <__aeabi_dsub+0x394>
10013bee:	e144      	b.n	10013e7a <__aeabi_dsub+0x61e>
10013bf0:	464e      	mov	r6, r9
10013bf2:	2420      	movs	r4, #32
10013bf4:	1ba4      	subs	r4, r4, r6
10013bf6:	003e      	movs	r6, r7
10013bf8:	40a6      	lsls	r6, r4
10013bfa:	46a2      	mov	sl, r4
10013bfc:	46b0      	mov	r8, r6
10013bfe:	464c      	mov	r4, r9
10013c00:	002e      	movs	r6, r5
10013c02:	40e6      	lsrs	r6, r4
10013c04:	46b4      	mov	ip, r6
10013c06:	4646      	mov	r6, r8
10013c08:	4664      	mov	r4, ip
10013c0a:	4326      	orrs	r6, r4
10013c0c:	4654      	mov	r4, sl
10013c0e:	40a5      	lsls	r5, r4
10013c10:	1e6c      	subs	r4, r5, #1
10013c12:	41a5      	sbcs	r5, r4
10013c14:	0034      	movs	r4, r6
10013c16:	432c      	orrs	r4, r5
10013c18:	464d      	mov	r5, r9
10013c1a:	40ef      	lsrs	r7, r5
10013c1c:	1b0d      	subs	r5, r1, r4
10013c1e:	e028      	b.n	10013c72 <__aeabi_dsub+0x416>
10013c20:	464a      	mov	r2, r9
10013c22:	4643      	mov	r3, r8
10013c24:	464d      	mov	r5, r9
10013c26:	431a      	orrs	r2, r3
10013c28:	d000      	beq.n	10013c2c <__aeabi_dsub+0x3d0>
10013c2a:	e6a5      	b.n	10013978 <__aeabi_dsub+0x11c>
10013c2c:	2300      	movs	r3, #0
10013c2e:	2400      	movs	r4, #0
10013c30:	2500      	movs	r5, #0
10013c32:	e6de      	b.n	100139f2 <__aeabi_dsub+0x196>
10013c34:	2a1f      	cmp	r2, #31
10013c36:	dc5a      	bgt.n	10013cee <__aeabi_dsub+0x492>
10013c38:	4666      	mov	r6, ip
10013c3a:	2220      	movs	r2, #32
10013c3c:	1b92      	subs	r2, r2, r6
10013c3e:	0006      	movs	r6, r0
10013c40:	4096      	lsls	r6, r2
10013c42:	4691      	mov	r9, r2
10013c44:	46b0      	mov	r8, r6
10013c46:	4662      	mov	r2, ip
10013c48:	000e      	movs	r6, r1
10013c4a:	40d6      	lsrs	r6, r2
10013c4c:	4642      	mov	r2, r8
10013c4e:	4316      	orrs	r6, r2
10013c50:	464a      	mov	r2, r9
10013c52:	4091      	lsls	r1, r2
10013c54:	1e4a      	subs	r2, r1, #1
10013c56:	4191      	sbcs	r1, r2
10013c58:	0002      	movs	r2, r0
10013c5a:	4660      	mov	r0, ip
10013c5c:	4331      	orrs	r1, r6
10013c5e:	40c2      	lsrs	r2, r0
10013c60:	e6e4      	b.n	10013a2c <__aeabi_dsub+0x1d0>
10013c62:	003c      	movs	r4, r7
10013c64:	432c      	orrs	r4, r5
10013c66:	d05a      	beq.n	10013d1e <__aeabi_dsub+0x4c2>
10013c68:	43f4      	mvns	r4, r6
10013c6a:	46a1      	mov	r9, r4
10013c6c:	2c00      	cmp	r4, #0
10013c6e:	d152      	bne.n	10013d16 <__aeabi_dsub+0x4ba>
10013c70:	1b4d      	subs	r5, r1, r5
10013c72:	42a9      	cmp	r1, r5
10013c74:	4189      	sbcs	r1, r1
10013c76:	1bc7      	subs	r7, r0, r7
10013c78:	4249      	negs	r1, r1
10013c7a:	1a7f      	subs	r7, r7, r1
10013c7c:	0014      	movs	r4, r2
10013c7e:	469a      	mov	sl, r3
10013c80:	e675      	b.n	1001396e <__aeabi_dsub+0x112>
10013c82:	4a9e      	ldr	r2, [pc, #632]	; (10013efc <__aeabi_dsub+0x6a0>)
10013c84:	4294      	cmp	r4, r2
10013c86:	d000      	beq.n	10013c8a <__aeabi_dsub+0x42e>
10013c88:	e6c7      	b.n	10013a1a <__aeabi_dsub+0x1be>
10013c8a:	e613      	b.n	100138b4 <__aeabi_dsub+0x58>
10013c8c:	2200      	movs	r2, #0
10013c8e:	e77f      	b.n	10013b90 <__aeabi_dsub+0x334>
10013c90:	2000      	movs	r0, #0
10013c92:	e78f      	b.n	10013bb4 <__aeabi_dsub+0x358>
10013c94:	2c00      	cmp	r4, #0
10013c96:	d000      	beq.n	10013c9a <__aeabi_dsub+0x43e>
10013c98:	e0c8      	b.n	10013e2c <__aeabi_dsub+0x5d0>
10013c9a:	003b      	movs	r3, r7
10013c9c:	432b      	orrs	r3, r5
10013c9e:	d100      	bne.n	10013ca2 <__aeabi_dsub+0x446>
10013ca0:	e10f      	b.n	10013ec2 <__aeabi_dsub+0x666>
10013ca2:	0003      	movs	r3, r0
10013ca4:	430b      	orrs	r3, r1
10013ca6:	d100      	bne.n	10013caa <__aeabi_dsub+0x44e>
10013ca8:	e604      	b.n	100138b4 <__aeabi_dsub+0x58>
10013caa:	1869      	adds	r1, r5, r1
10013cac:	42a9      	cmp	r1, r5
10013cae:	419b      	sbcs	r3, r3
10013cb0:	183f      	adds	r7, r7, r0
10013cb2:	425b      	negs	r3, r3
10013cb4:	19df      	adds	r7, r3, r7
10013cb6:	023b      	lsls	r3, r7, #8
10013cb8:	d400      	bmi.n	10013cbc <__aeabi_dsub+0x460>
10013cba:	e11a      	b.n	10013ef2 <__aeabi_dsub+0x696>
10013cbc:	4b90      	ldr	r3, [pc, #576]	; (10013f00 <__aeabi_dsub+0x6a4>)
10013cbe:	000d      	movs	r5, r1
10013cc0:	401f      	ands	r7, r3
10013cc2:	4664      	mov	r4, ip
10013cc4:	e5f6      	b.n	100138b4 <__aeabi_dsub+0x58>
10013cc6:	469a      	mov	sl, r3
10013cc8:	e689      	b.n	100139de <__aeabi_dsub+0x182>
10013cca:	003a      	movs	r2, r7
10013ccc:	432a      	orrs	r2, r5
10013cce:	2c00      	cmp	r4, #0
10013cd0:	d15c      	bne.n	10013d8c <__aeabi_dsub+0x530>
10013cd2:	2a00      	cmp	r2, #0
10013cd4:	d175      	bne.n	10013dc2 <__aeabi_dsub+0x566>
10013cd6:	0002      	movs	r2, r0
10013cd8:	430a      	orrs	r2, r1
10013cda:	d100      	bne.n	10013cde <__aeabi_dsub+0x482>
10013cdc:	e0ca      	b.n	10013e74 <__aeabi_dsub+0x618>
10013cde:	0007      	movs	r7, r0
10013ce0:	000d      	movs	r5, r1
10013ce2:	469a      	mov	sl, r3
10013ce4:	e5e6      	b.n	100138b4 <__aeabi_dsub+0x58>
10013ce6:	4664      	mov	r4, ip
10013ce8:	2200      	movs	r2, #0
10013cea:	2500      	movs	r5, #0
10013cec:	e681      	b.n	100139f2 <__aeabi_dsub+0x196>
10013cee:	4662      	mov	r2, ip
10013cf0:	0006      	movs	r6, r0
10013cf2:	3a20      	subs	r2, #32
10013cf4:	40d6      	lsrs	r6, r2
10013cf6:	4662      	mov	r2, ip
10013cf8:	46b0      	mov	r8, r6
10013cfa:	2a20      	cmp	r2, #32
10013cfc:	d100      	bne.n	10013d00 <__aeabi_dsub+0x4a4>
10013cfe:	e0b7      	b.n	10013e70 <__aeabi_dsub+0x614>
10013d00:	2240      	movs	r2, #64	; 0x40
10013d02:	4666      	mov	r6, ip
10013d04:	1b92      	subs	r2, r2, r6
10013d06:	4090      	lsls	r0, r2
10013d08:	4301      	orrs	r1, r0
10013d0a:	4642      	mov	r2, r8
10013d0c:	1e48      	subs	r0, r1, #1
10013d0e:	4181      	sbcs	r1, r0
10013d10:	4311      	orrs	r1, r2
10013d12:	2200      	movs	r2, #0
10013d14:	e68a      	b.n	10013a2c <__aeabi_dsub+0x1d0>
10013d16:	4c79      	ldr	r4, [pc, #484]	; (10013efc <__aeabi_dsub+0x6a0>)
10013d18:	42a2      	cmp	r2, r4
10013d1a:	d000      	beq.n	10013d1e <__aeabi_dsub+0x4c2>
10013d1c:	e761      	b.n	10013be2 <__aeabi_dsub+0x386>
10013d1e:	0007      	movs	r7, r0
10013d20:	000d      	movs	r5, r1
10013d22:	0014      	movs	r4, r2
10013d24:	469a      	mov	sl, r3
10013d26:	e5c5      	b.n	100138b4 <__aeabi_dsub+0x58>
10013d28:	2c00      	cmp	r4, #0
10013d2a:	d141      	bne.n	10013db0 <__aeabi_dsub+0x554>
10013d2c:	003c      	movs	r4, r7
10013d2e:	432c      	orrs	r4, r5
10013d30:	d078      	beq.n	10013e24 <__aeabi_dsub+0x5c8>
10013d32:	43f4      	mvns	r4, r6
10013d34:	46a1      	mov	r9, r4
10013d36:	2c00      	cmp	r4, #0
10013d38:	d020      	beq.n	10013d7c <__aeabi_dsub+0x520>
10013d3a:	4c70      	ldr	r4, [pc, #448]	; (10013efc <__aeabi_dsub+0x6a0>)
10013d3c:	42a2      	cmp	r2, r4
10013d3e:	d071      	beq.n	10013e24 <__aeabi_dsub+0x5c8>
10013d40:	464c      	mov	r4, r9
10013d42:	2c38      	cmp	r4, #56	; 0x38
10013d44:	dd00      	ble.n	10013d48 <__aeabi_dsub+0x4ec>
10013d46:	e0b2      	b.n	10013eae <__aeabi_dsub+0x652>
10013d48:	2c1f      	cmp	r4, #31
10013d4a:	dd00      	ble.n	10013d4e <__aeabi_dsub+0x4f2>
10013d4c:	e0bc      	b.n	10013ec8 <__aeabi_dsub+0x66c>
10013d4e:	2620      	movs	r6, #32
10013d50:	1b34      	subs	r4, r6, r4
10013d52:	46a2      	mov	sl, r4
10013d54:	003c      	movs	r4, r7
10013d56:	4656      	mov	r6, sl
10013d58:	40b4      	lsls	r4, r6
10013d5a:	464e      	mov	r6, r9
10013d5c:	46a0      	mov	r8, r4
10013d5e:	002c      	movs	r4, r5
10013d60:	40f4      	lsrs	r4, r6
10013d62:	46a4      	mov	ip, r4
10013d64:	4644      	mov	r4, r8
10013d66:	4666      	mov	r6, ip
10013d68:	4334      	orrs	r4, r6
10013d6a:	46a4      	mov	ip, r4
10013d6c:	4654      	mov	r4, sl
10013d6e:	40a5      	lsls	r5, r4
10013d70:	4664      	mov	r4, ip
10013d72:	1e6e      	subs	r6, r5, #1
10013d74:	41b5      	sbcs	r5, r6
10013d76:	4325      	orrs	r5, r4
10013d78:	464c      	mov	r4, r9
10013d7a:	40e7      	lsrs	r7, r4
10013d7c:	186d      	adds	r5, r5, r1
10013d7e:	428d      	cmp	r5, r1
10013d80:	4189      	sbcs	r1, r1
10013d82:	183f      	adds	r7, r7, r0
10013d84:	4249      	negs	r1, r1
10013d86:	19cf      	adds	r7, r1, r7
10013d88:	0014      	movs	r4, r2
10013d8a:	e656      	b.n	10013a3a <__aeabi_dsub+0x1de>
10013d8c:	2a00      	cmp	r2, #0
10013d8e:	d12f      	bne.n	10013df0 <__aeabi_dsub+0x594>
10013d90:	0002      	movs	r2, r0
10013d92:	430a      	orrs	r2, r1
10013d94:	d100      	bne.n	10013d98 <__aeabi_dsub+0x53c>
10013d96:	e084      	b.n	10013ea2 <__aeabi_dsub+0x646>
10013d98:	0007      	movs	r7, r0
10013d9a:	000d      	movs	r5, r1
10013d9c:	469a      	mov	sl, r3
10013d9e:	4c57      	ldr	r4, [pc, #348]	; (10013efc <__aeabi_dsub+0x6a0>)
10013da0:	e588      	b.n	100138b4 <__aeabi_dsub+0x58>
10013da2:	433d      	orrs	r5, r7
10013da4:	1e6f      	subs	r7, r5, #1
10013da6:	41bd      	sbcs	r5, r7
10013da8:	b2ec      	uxtb	r4, r5
10013daa:	2700      	movs	r7, #0
10013dac:	1b0d      	subs	r5, r1, r4
10013dae:	e760      	b.n	10013c72 <__aeabi_dsub+0x416>
10013db0:	4c52      	ldr	r4, [pc, #328]	; (10013efc <__aeabi_dsub+0x6a0>)
10013db2:	42a2      	cmp	r2, r4
10013db4:	d036      	beq.n	10013e24 <__aeabi_dsub+0x5c8>
10013db6:	4274      	negs	r4, r6
10013db8:	2680      	movs	r6, #128	; 0x80
10013dba:	0436      	lsls	r6, r6, #16
10013dbc:	46a1      	mov	r9, r4
10013dbe:	4337      	orrs	r7, r6
10013dc0:	e7be      	b.n	10013d40 <__aeabi_dsub+0x4e4>
10013dc2:	0002      	movs	r2, r0
10013dc4:	430a      	orrs	r2, r1
10013dc6:	d100      	bne.n	10013dca <__aeabi_dsub+0x56e>
10013dc8:	e574      	b.n	100138b4 <__aeabi_dsub+0x58>
10013dca:	1a6a      	subs	r2, r5, r1
10013dcc:	4690      	mov	r8, r2
10013dce:	4545      	cmp	r5, r8
10013dd0:	41b6      	sbcs	r6, r6
10013dd2:	1a3a      	subs	r2, r7, r0
10013dd4:	4276      	negs	r6, r6
10013dd6:	1b92      	subs	r2, r2, r6
10013dd8:	4694      	mov	ip, r2
10013dda:	0212      	lsls	r2, r2, #8
10013ddc:	d400      	bmi.n	10013de0 <__aeabi_dsub+0x584>
10013dde:	e5f7      	b.n	100139d0 <__aeabi_dsub+0x174>
10013de0:	1b4d      	subs	r5, r1, r5
10013de2:	42a9      	cmp	r1, r5
10013de4:	4189      	sbcs	r1, r1
10013de6:	1bc7      	subs	r7, r0, r7
10013de8:	4249      	negs	r1, r1
10013dea:	1a7f      	subs	r7, r7, r1
10013dec:	469a      	mov	sl, r3
10013dee:	e561      	b.n	100138b4 <__aeabi_dsub+0x58>
10013df0:	0002      	movs	r2, r0
10013df2:	430a      	orrs	r2, r1
10013df4:	d03a      	beq.n	10013e6c <__aeabi_dsub+0x610>
10013df6:	08ed      	lsrs	r5, r5, #3
10013df8:	077c      	lsls	r4, r7, #29
10013dfa:	432c      	orrs	r4, r5
10013dfc:	2580      	movs	r5, #128	; 0x80
10013dfe:	08fa      	lsrs	r2, r7, #3
10013e00:	032d      	lsls	r5, r5, #12
10013e02:	422a      	tst	r2, r5
10013e04:	d008      	beq.n	10013e18 <__aeabi_dsub+0x5bc>
10013e06:	08c7      	lsrs	r7, r0, #3
10013e08:	422f      	tst	r7, r5
10013e0a:	d105      	bne.n	10013e18 <__aeabi_dsub+0x5bc>
10013e0c:	0745      	lsls	r5, r0, #29
10013e0e:	002c      	movs	r4, r5
10013e10:	003a      	movs	r2, r7
10013e12:	469a      	mov	sl, r3
10013e14:	08c9      	lsrs	r1, r1, #3
10013e16:	430c      	orrs	r4, r1
10013e18:	0f67      	lsrs	r7, r4, #29
10013e1a:	00d2      	lsls	r2, r2, #3
10013e1c:	00e5      	lsls	r5, r4, #3
10013e1e:	4317      	orrs	r7, r2
10013e20:	4c36      	ldr	r4, [pc, #216]	; (10013efc <__aeabi_dsub+0x6a0>)
10013e22:	e547      	b.n	100138b4 <__aeabi_dsub+0x58>
10013e24:	0007      	movs	r7, r0
10013e26:	000d      	movs	r5, r1
10013e28:	0014      	movs	r4, r2
10013e2a:	e543      	b.n	100138b4 <__aeabi_dsub+0x58>
10013e2c:	003a      	movs	r2, r7
10013e2e:	432a      	orrs	r2, r5
10013e30:	d043      	beq.n	10013eba <__aeabi_dsub+0x65e>
10013e32:	0002      	movs	r2, r0
10013e34:	430a      	orrs	r2, r1
10013e36:	d019      	beq.n	10013e6c <__aeabi_dsub+0x610>
10013e38:	08ed      	lsrs	r5, r5, #3
10013e3a:	077c      	lsls	r4, r7, #29
10013e3c:	432c      	orrs	r4, r5
10013e3e:	2580      	movs	r5, #128	; 0x80
10013e40:	08fa      	lsrs	r2, r7, #3
10013e42:	032d      	lsls	r5, r5, #12
10013e44:	422a      	tst	r2, r5
10013e46:	d007      	beq.n	10013e58 <__aeabi_dsub+0x5fc>
10013e48:	08c6      	lsrs	r6, r0, #3
10013e4a:	422e      	tst	r6, r5
10013e4c:	d104      	bne.n	10013e58 <__aeabi_dsub+0x5fc>
10013e4e:	0747      	lsls	r7, r0, #29
10013e50:	003c      	movs	r4, r7
10013e52:	0032      	movs	r2, r6
10013e54:	08c9      	lsrs	r1, r1, #3
10013e56:	430c      	orrs	r4, r1
10013e58:	00d7      	lsls	r7, r2, #3
10013e5a:	0f62      	lsrs	r2, r4, #29
10013e5c:	00e5      	lsls	r5, r4, #3
10013e5e:	4317      	orrs	r7, r2
10013e60:	469a      	mov	sl, r3
10013e62:	4c26      	ldr	r4, [pc, #152]	; (10013efc <__aeabi_dsub+0x6a0>)
10013e64:	e526      	b.n	100138b4 <__aeabi_dsub+0x58>
10013e66:	2200      	movs	r2, #0
10013e68:	2500      	movs	r5, #0
10013e6a:	e544      	b.n	100138f6 <__aeabi_dsub+0x9a>
10013e6c:	4c23      	ldr	r4, [pc, #140]	; (10013efc <__aeabi_dsub+0x6a0>)
10013e6e:	e521      	b.n	100138b4 <__aeabi_dsub+0x58>
10013e70:	2000      	movs	r0, #0
10013e72:	e749      	b.n	10013d08 <__aeabi_dsub+0x4ac>
10013e74:	2300      	movs	r3, #0
10013e76:	2500      	movs	r5, #0
10013e78:	e5bb      	b.n	100139f2 <__aeabi_dsub+0x196>
10013e7a:	464c      	mov	r4, r9
10013e7c:	003e      	movs	r6, r7
10013e7e:	3c20      	subs	r4, #32
10013e80:	40e6      	lsrs	r6, r4
10013e82:	464c      	mov	r4, r9
10013e84:	46b4      	mov	ip, r6
10013e86:	2c20      	cmp	r4, #32
10013e88:	d031      	beq.n	10013eee <__aeabi_dsub+0x692>
10013e8a:	2440      	movs	r4, #64	; 0x40
10013e8c:	464e      	mov	r6, r9
10013e8e:	1ba6      	subs	r6, r4, r6
10013e90:	40b7      	lsls	r7, r6
10013e92:	433d      	orrs	r5, r7
10013e94:	1e6c      	subs	r4, r5, #1
10013e96:	41a5      	sbcs	r5, r4
10013e98:	4664      	mov	r4, ip
10013e9a:	432c      	orrs	r4, r5
10013e9c:	2700      	movs	r7, #0
10013e9e:	1b0d      	subs	r5, r1, r4
10013ea0:	e6e7      	b.n	10013c72 <__aeabi_dsub+0x416>
10013ea2:	2280      	movs	r2, #128	; 0x80
10013ea4:	2300      	movs	r3, #0
10013ea6:	0312      	lsls	r2, r2, #12
10013ea8:	4c14      	ldr	r4, [pc, #80]	; (10013efc <__aeabi_dsub+0x6a0>)
10013eaa:	2500      	movs	r5, #0
10013eac:	e5a1      	b.n	100139f2 <__aeabi_dsub+0x196>
10013eae:	433d      	orrs	r5, r7
10013eb0:	1e6f      	subs	r7, r5, #1
10013eb2:	41bd      	sbcs	r5, r7
10013eb4:	2700      	movs	r7, #0
10013eb6:	b2ed      	uxtb	r5, r5
10013eb8:	e760      	b.n	10013d7c <__aeabi_dsub+0x520>
10013eba:	0007      	movs	r7, r0
10013ebc:	000d      	movs	r5, r1
10013ebe:	4c0f      	ldr	r4, [pc, #60]	; (10013efc <__aeabi_dsub+0x6a0>)
10013ec0:	e4f8      	b.n	100138b4 <__aeabi_dsub+0x58>
10013ec2:	0007      	movs	r7, r0
10013ec4:	000d      	movs	r5, r1
10013ec6:	e4f5      	b.n	100138b4 <__aeabi_dsub+0x58>
10013ec8:	464e      	mov	r6, r9
10013eca:	003c      	movs	r4, r7
10013ecc:	3e20      	subs	r6, #32
10013ece:	40f4      	lsrs	r4, r6
10013ed0:	46a0      	mov	r8, r4
10013ed2:	464c      	mov	r4, r9
10013ed4:	2c20      	cmp	r4, #32
10013ed6:	d00e      	beq.n	10013ef6 <__aeabi_dsub+0x69a>
10013ed8:	2440      	movs	r4, #64	; 0x40
10013eda:	464e      	mov	r6, r9
10013edc:	1ba4      	subs	r4, r4, r6
10013ede:	40a7      	lsls	r7, r4
10013ee0:	433d      	orrs	r5, r7
10013ee2:	1e6f      	subs	r7, r5, #1
10013ee4:	41bd      	sbcs	r5, r7
10013ee6:	4644      	mov	r4, r8
10013ee8:	2700      	movs	r7, #0
10013eea:	4325      	orrs	r5, r4
10013eec:	e746      	b.n	10013d7c <__aeabi_dsub+0x520>
10013eee:	2700      	movs	r7, #0
10013ef0:	e7cf      	b.n	10013e92 <__aeabi_dsub+0x636>
10013ef2:	000d      	movs	r5, r1
10013ef4:	e573      	b.n	100139de <__aeabi_dsub+0x182>
10013ef6:	2700      	movs	r7, #0
10013ef8:	e7f2      	b.n	10013ee0 <__aeabi_dsub+0x684>
10013efa:	46c0      	nop			; (mov r8, r8)
10013efc:	000007ff 	.word	0x000007ff
10013f00:	ff7fffff 	.word	0xff7fffff

10013f04 <__aeabi_d2iz>:
10013f04:	030b      	lsls	r3, r1, #12
10013f06:	b530      	push	{r4, r5, lr}
10013f08:	4d13      	ldr	r5, [pc, #76]	; (10013f58 <__aeabi_d2iz+0x54>)
10013f0a:	0b1a      	lsrs	r2, r3, #12
10013f0c:	004b      	lsls	r3, r1, #1
10013f0e:	0d5b      	lsrs	r3, r3, #21
10013f10:	0fc9      	lsrs	r1, r1, #31
10013f12:	2400      	movs	r4, #0
10013f14:	42ab      	cmp	r3, r5
10013f16:	dd11      	ble.n	10013f3c <__aeabi_d2iz+0x38>
10013f18:	4c10      	ldr	r4, [pc, #64]	; (10013f5c <__aeabi_d2iz+0x58>)
10013f1a:	42a3      	cmp	r3, r4
10013f1c:	dc10      	bgt.n	10013f40 <__aeabi_d2iz+0x3c>
10013f1e:	2480      	movs	r4, #128	; 0x80
10013f20:	0364      	lsls	r4, r4, #13
10013f22:	4322      	orrs	r2, r4
10013f24:	4c0e      	ldr	r4, [pc, #56]	; (10013f60 <__aeabi_d2iz+0x5c>)
10013f26:	1ae4      	subs	r4, r4, r3
10013f28:	2c1f      	cmp	r4, #31
10013f2a:	dd0c      	ble.n	10013f46 <__aeabi_d2iz+0x42>
10013f2c:	480d      	ldr	r0, [pc, #52]	; (10013f64 <__aeabi_d2iz+0x60>)
10013f2e:	1ac3      	subs	r3, r0, r3
10013f30:	40da      	lsrs	r2, r3
10013f32:	0013      	movs	r3, r2
10013f34:	425c      	negs	r4, r3
10013f36:	2900      	cmp	r1, #0
10013f38:	d100      	bne.n	10013f3c <__aeabi_d2iz+0x38>
10013f3a:	001c      	movs	r4, r3
10013f3c:	0020      	movs	r0, r4
10013f3e:	bd30      	pop	{r4, r5, pc}
10013f40:	4b09      	ldr	r3, [pc, #36]	; (10013f68 <__aeabi_d2iz+0x64>)
10013f42:	18cc      	adds	r4, r1, r3
10013f44:	e7fa      	b.n	10013f3c <__aeabi_d2iz+0x38>
10013f46:	40e0      	lsrs	r0, r4
10013f48:	4c08      	ldr	r4, [pc, #32]	; (10013f6c <__aeabi_d2iz+0x68>)
10013f4a:	46a4      	mov	ip, r4
10013f4c:	4463      	add	r3, ip
10013f4e:	409a      	lsls	r2, r3
10013f50:	0013      	movs	r3, r2
10013f52:	4303      	orrs	r3, r0
10013f54:	e7ee      	b.n	10013f34 <__aeabi_d2iz+0x30>
10013f56:	46c0      	nop			; (mov r8, r8)
10013f58:	000003fe 	.word	0x000003fe
10013f5c:	0000041d 	.word	0x0000041d
10013f60:	00000433 	.word	0x00000433
10013f64:	00000413 	.word	0x00000413
10013f68:	7fffffff 	.word	0x7fffffff
10013f6c:	fffffbed 	.word	0xfffffbed

10013f70 <__aeabi_ui2d>:
10013f70:	b570      	push	{r4, r5, r6, lr}
10013f72:	1e05      	subs	r5, r0, #0
10013f74:	d028      	beq.n	10013fc8 <__aeabi_ui2d+0x58>
10013f76:	f000 f913 	bl	100141a0 <__clzsi2>
10013f7a:	4b15      	ldr	r3, [pc, #84]	; (10013fd0 <__aeabi_ui2d+0x60>)
10013f7c:	4a15      	ldr	r2, [pc, #84]	; (10013fd4 <__aeabi_ui2d+0x64>)
10013f7e:	1a1b      	subs	r3, r3, r0
10013f80:	1ad2      	subs	r2, r2, r3
10013f82:	2a1f      	cmp	r2, #31
10013f84:	dd16      	ble.n	10013fb4 <__aeabi_ui2d+0x44>
10013f86:	002c      	movs	r4, r5
10013f88:	4a13      	ldr	r2, [pc, #76]	; (10013fd8 <__aeabi_ui2d+0x68>)
10013f8a:	2500      	movs	r5, #0
10013f8c:	1ad2      	subs	r2, r2, r3
10013f8e:	4094      	lsls	r4, r2
10013f90:	055a      	lsls	r2, r3, #21
10013f92:	0324      	lsls	r4, r4, #12
10013f94:	0b24      	lsrs	r4, r4, #12
10013f96:	0d52      	lsrs	r2, r2, #21
10013f98:	2100      	movs	r1, #0
10013f9a:	0324      	lsls	r4, r4, #12
10013f9c:	0d0b      	lsrs	r3, r1, #20
10013f9e:	0b24      	lsrs	r4, r4, #12
10013fa0:	051b      	lsls	r3, r3, #20
10013fa2:	4323      	orrs	r3, r4
10013fa4:	4c0d      	ldr	r4, [pc, #52]	; (10013fdc <__aeabi_ui2d+0x6c>)
10013fa6:	0512      	lsls	r2, r2, #20
10013fa8:	4023      	ands	r3, r4
10013faa:	4313      	orrs	r3, r2
10013fac:	005b      	lsls	r3, r3, #1
10013fae:	0028      	movs	r0, r5
10013fb0:	0859      	lsrs	r1, r3, #1
10013fb2:	bd70      	pop	{r4, r5, r6, pc}
10013fb4:	210b      	movs	r1, #11
10013fb6:	002c      	movs	r4, r5
10013fb8:	1a08      	subs	r0, r1, r0
10013fba:	40c4      	lsrs	r4, r0
10013fbc:	4095      	lsls	r5, r2
10013fbe:	0324      	lsls	r4, r4, #12
10013fc0:	055a      	lsls	r2, r3, #21
10013fc2:	0b24      	lsrs	r4, r4, #12
10013fc4:	0d52      	lsrs	r2, r2, #21
10013fc6:	e7e7      	b.n	10013f98 <__aeabi_ui2d+0x28>
10013fc8:	2200      	movs	r2, #0
10013fca:	2400      	movs	r4, #0
10013fcc:	e7e4      	b.n	10013f98 <__aeabi_ui2d+0x28>
10013fce:	46c0      	nop			; (mov r8, r8)
10013fd0:	0000041e 	.word	0x0000041e
10013fd4:	00000433 	.word	0x00000433
10013fd8:	00000413 	.word	0x00000413
10013fdc:	800fffff 	.word	0x800fffff

10013fe0 <__aeabi_f2d>:
10013fe0:	0042      	lsls	r2, r0, #1
10013fe2:	0e12      	lsrs	r2, r2, #24
10013fe4:	1c51      	adds	r1, r2, #1
10013fe6:	0243      	lsls	r3, r0, #9
10013fe8:	b2c9      	uxtb	r1, r1
10013fea:	b570      	push	{r4, r5, r6, lr}
10013fec:	0a5d      	lsrs	r5, r3, #9
10013fee:	0fc4      	lsrs	r4, r0, #31
10013ff0:	2901      	cmp	r1, #1
10013ff2:	dd15      	ble.n	10014020 <__aeabi_f2d+0x40>
10013ff4:	21e0      	movs	r1, #224	; 0xe0
10013ff6:	0089      	lsls	r1, r1, #2
10013ff8:	468c      	mov	ip, r1
10013ffa:	076d      	lsls	r5, r5, #29
10013ffc:	0b1b      	lsrs	r3, r3, #12
10013ffe:	4462      	add	r2, ip
10014000:	2100      	movs	r1, #0
10014002:	0028      	movs	r0, r5
10014004:	0d0d      	lsrs	r5, r1, #20
10014006:	052d      	lsls	r5, r5, #20
10014008:	432b      	orrs	r3, r5
1001400a:	4d1c      	ldr	r5, [pc, #112]	; (1001407c <__aeabi_f2d+0x9c>)
1001400c:	0552      	lsls	r2, r2, #21
1001400e:	402b      	ands	r3, r5
10014010:	0852      	lsrs	r2, r2, #1
10014012:	4313      	orrs	r3, r2
10014014:	005b      	lsls	r3, r3, #1
10014016:	07e4      	lsls	r4, r4, #31
10014018:	085b      	lsrs	r3, r3, #1
1001401a:	4323      	orrs	r3, r4
1001401c:	0019      	movs	r1, r3
1001401e:	bd70      	pop	{r4, r5, r6, pc}
10014020:	2a00      	cmp	r2, #0
10014022:	d115      	bne.n	10014050 <__aeabi_f2d+0x70>
10014024:	2d00      	cmp	r5, #0
10014026:	d01f      	beq.n	10014068 <__aeabi_f2d+0x88>
10014028:	0028      	movs	r0, r5
1001402a:	f000 f8b9 	bl	100141a0 <__clzsi2>
1001402e:	280a      	cmp	r0, #10
10014030:	dc1d      	bgt.n	1001406e <__aeabi_f2d+0x8e>
10014032:	230b      	movs	r3, #11
10014034:	002a      	movs	r2, r5
10014036:	1a1b      	subs	r3, r3, r0
10014038:	40da      	lsrs	r2, r3
1001403a:	0013      	movs	r3, r2
1001403c:	0002      	movs	r2, r0
1001403e:	3215      	adds	r2, #21
10014040:	4095      	lsls	r5, r2
10014042:	4a0f      	ldr	r2, [pc, #60]	; (10014080 <__aeabi_f2d+0xa0>)
10014044:	031b      	lsls	r3, r3, #12
10014046:	1a12      	subs	r2, r2, r0
10014048:	0552      	lsls	r2, r2, #21
1001404a:	0b1b      	lsrs	r3, r3, #12
1001404c:	0d52      	lsrs	r2, r2, #21
1001404e:	e7d7      	b.n	10014000 <__aeabi_f2d+0x20>
10014050:	2d00      	cmp	r5, #0
10014052:	d006      	beq.n	10014062 <__aeabi_f2d+0x82>
10014054:	2280      	movs	r2, #128	; 0x80
10014056:	0b1b      	lsrs	r3, r3, #12
10014058:	0312      	lsls	r2, r2, #12
1001405a:	4313      	orrs	r3, r2
1001405c:	076d      	lsls	r5, r5, #29
1001405e:	4a09      	ldr	r2, [pc, #36]	; (10014084 <__aeabi_f2d+0xa4>)
10014060:	e7ce      	b.n	10014000 <__aeabi_f2d+0x20>
10014062:	4a08      	ldr	r2, [pc, #32]	; (10014084 <__aeabi_f2d+0xa4>)
10014064:	2300      	movs	r3, #0
10014066:	e7cb      	b.n	10014000 <__aeabi_f2d+0x20>
10014068:	2200      	movs	r2, #0
1001406a:	2300      	movs	r3, #0
1001406c:	e7c8      	b.n	10014000 <__aeabi_f2d+0x20>
1001406e:	0003      	movs	r3, r0
10014070:	3b0b      	subs	r3, #11
10014072:	409d      	lsls	r5, r3
10014074:	002b      	movs	r3, r5
10014076:	2500      	movs	r5, #0
10014078:	e7e3      	b.n	10014042 <__aeabi_f2d+0x62>
1001407a:	46c0      	nop			; (mov r8, r8)
1001407c:	800fffff 	.word	0x800fffff
10014080:	00000389 	.word	0x00000389
10014084:	000007ff 	.word	0x000007ff

10014088 <__aeabi_d2f>:
10014088:	004b      	lsls	r3, r1, #1
1001408a:	b570      	push	{r4, r5, r6, lr}
1001408c:	0d5e      	lsrs	r6, r3, #21
1001408e:	030c      	lsls	r4, r1, #12
10014090:	1c75      	adds	r5, r6, #1
10014092:	0a64      	lsrs	r4, r4, #9
10014094:	0f42      	lsrs	r2, r0, #29
10014096:	056d      	lsls	r5, r5, #21
10014098:	4322      	orrs	r2, r4
1001409a:	0fc9      	lsrs	r1, r1, #31
1001409c:	00c4      	lsls	r4, r0, #3
1001409e:	0d6d      	lsrs	r5, r5, #21
100140a0:	2d01      	cmp	r5, #1
100140a2:	dd2a      	ble.n	100140fa <__aeabi_d2f+0x72>
100140a4:	4b3b      	ldr	r3, [pc, #236]	; (10014194 <__aeabi_d2f+0x10c>)
100140a6:	18f3      	adds	r3, r6, r3
100140a8:	2bfe      	cmp	r3, #254	; 0xfe
100140aa:	dc1a      	bgt.n	100140e2 <__aeabi_d2f+0x5a>
100140ac:	2b00      	cmp	r3, #0
100140ae:	dd42      	ble.n	10014136 <__aeabi_d2f+0xae>
100140b0:	0180      	lsls	r0, r0, #6
100140b2:	1e45      	subs	r5, r0, #1
100140b4:	41a8      	sbcs	r0, r5
100140b6:	00d2      	lsls	r2, r2, #3
100140b8:	4310      	orrs	r0, r2
100140ba:	0f62      	lsrs	r2, r4, #29
100140bc:	4302      	orrs	r2, r0
100140be:	0750      	lsls	r0, r2, #29
100140c0:	d004      	beq.n	100140cc <__aeabi_d2f+0x44>
100140c2:	200f      	movs	r0, #15
100140c4:	4010      	ands	r0, r2
100140c6:	2804      	cmp	r0, #4
100140c8:	d000      	beq.n	100140cc <__aeabi_d2f+0x44>
100140ca:	3204      	adds	r2, #4
100140cc:	2080      	movs	r0, #128	; 0x80
100140ce:	04c0      	lsls	r0, r0, #19
100140d0:	4010      	ands	r0, r2
100140d2:	d021      	beq.n	10014118 <__aeabi_d2f+0x90>
100140d4:	3301      	adds	r3, #1
100140d6:	2bff      	cmp	r3, #255	; 0xff
100140d8:	d003      	beq.n	100140e2 <__aeabi_d2f+0x5a>
100140da:	0192      	lsls	r2, r2, #6
100140dc:	0a52      	lsrs	r2, r2, #9
100140de:	b2db      	uxtb	r3, r3
100140e0:	e001      	b.n	100140e6 <__aeabi_d2f+0x5e>
100140e2:	23ff      	movs	r3, #255	; 0xff
100140e4:	2200      	movs	r2, #0
100140e6:	0252      	lsls	r2, r2, #9
100140e8:	0a52      	lsrs	r2, r2, #9
100140ea:	05db      	lsls	r3, r3, #23
100140ec:	4313      	orrs	r3, r2
100140ee:	005b      	lsls	r3, r3, #1
100140f0:	07c9      	lsls	r1, r1, #31
100140f2:	085b      	lsrs	r3, r3, #1
100140f4:	430b      	orrs	r3, r1
100140f6:	0018      	movs	r0, r3
100140f8:	bd70      	pop	{r4, r5, r6, pc}
100140fa:	2e00      	cmp	r6, #0
100140fc:	d007      	beq.n	1001410e <__aeabi_d2f+0x86>
100140fe:	4314      	orrs	r4, r2
10014100:	d0ef      	beq.n	100140e2 <__aeabi_d2f+0x5a>
10014102:	2080      	movs	r0, #128	; 0x80
10014104:	00d2      	lsls	r2, r2, #3
10014106:	0480      	lsls	r0, r0, #18
10014108:	4302      	orrs	r2, r0
1001410a:	23ff      	movs	r3, #255	; 0xff
1001410c:	e7d7      	b.n	100140be <__aeabi_d2f+0x36>
1001410e:	4322      	orrs	r2, r4
10014110:	2300      	movs	r3, #0
10014112:	2a00      	cmp	r2, #0
10014114:	d003      	beq.n	1001411e <__aeabi_d2f+0x96>
10014116:	2205      	movs	r2, #5
10014118:	08d2      	lsrs	r2, r2, #3
1001411a:	2bff      	cmp	r3, #255	; 0xff
1001411c:	d003      	beq.n	10014126 <__aeabi_d2f+0x9e>
1001411e:	0252      	lsls	r2, r2, #9
10014120:	0a52      	lsrs	r2, r2, #9
10014122:	b2db      	uxtb	r3, r3
10014124:	e7df      	b.n	100140e6 <__aeabi_d2f+0x5e>
10014126:	2a00      	cmp	r2, #0
10014128:	d032      	beq.n	10014190 <__aeabi_d2f+0x108>
1001412a:	2080      	movs	r0, #128	; 0x80
1001412c:	03c0      	lsls	r0, r0, #15
1001412e:	4302      	orrs	r2, r0
10014130:	0252      	lsls	r2, r2, #9
10014132:	0a52      	lsrs	r2, r2, #9
10014134:	e7d7      	b.n	100140e6 <__aeabi_d2f+0x5e>
10014136:	0018      	movs	r0, r3
10014138:	3017      	adds	r0, #23
1001413a:	db14      	blt.n	10014166 <__aeabi_d2f+0xde>
1001413c:	2080      	movs	r0, #128	; 0x80
1001413e:	0400      	lsls	r0, r0, #16
10014140:	4302      	orrs	r2, r0
10014142:	201e      	movs	r0, #30
10014144:	1ac0      	subs	r0, r0, r3
10014146:	281f      	cmp	r0, #31
10014148:	dc0f      	bgt.n	1001416a <__aeabi_d2f+0xe2>
1001414a:	0025      	movs	r5, r4
1001414c:	4b12      	ldr	r3, [pc, #72]	; (10014198 <__aeabi_d2f+0x110>)
1001414e:	18f3      	adds	r3, r6, r3
10014150:	409d      	lsls	r5, r3
10014152:	1e6e      	subs	r6, r5, #1
10014154:	41b5      	sbcs	r5, r6
10014156:	409a      	lsls	r2, r3
10014158:	002b      	movs	r3, r5
1001415a:	4313      	orrs	r3, r2
1001415c:	0022      	movs	r2, r4
1001415e:	40c2      	lsrs	r2, r0
10014160:	431a      	orrs	r2, r3
10014162:	2300      	movs	r3, #0
10014164:	e7ab      	b.n	100140be <__aeabi_d2f+0x36>
10014166:	2300      	movs	r3, #0
10014168:	e7d5      	b.n	10014116 <__aeabi_d2f+0x8e>
1001416a:	2502      	movs	r5, #2
1001416c:	426d      	negs	r5, r5
1001416e:	1aeb      	subs	r3, r5, r3
10014170:	0015      	movs	r5, r2
10014172:	40dd      	lsrs	r5, r3
10014174:	2820      	cmp	r0, #32
10014176:	d009      	beq.n	1001418c <__aeabi_d2f+0x104>
10014178:	4b08      	ldr	r3, [pc, #32]	; (1001419c <__aeabi_d2f+0x114>)
1001417a:	18f3      	adds	r3, r6, r3
1001417c:	409a      	lsls	r2, r3
1001417e:	4314      	orrs	r4, r2
10014180:	1e62      	subs	r2, r4, #1
10014182:	4194      	sbcs	r4, r2
10014184:	0022      	movs	r2, r4
10014186:	2300      	movs	r3, #0
10014188:	432a      	orrs	r2, r5
1001418a:	e798      	b.n	100140be <__aeabi_d2f+0x36>
1001418c:	2200      	movs	r2, #0
1001418e:	e7f6      	b.n	1001417e <__aeabi_d2f+0xf6>
10014190:	2200      	movs	r2, #0
10014192:	e7a8      	b.n	100140e6 <__aeabi_d2f+0x5e>
10014194:	fffffc80 	.word	0xfffffc80
10014198:	fffffc82 	.word	0xfffffc82
1001419c:	fffffca2 	.word	0xfffffca2

100141a0 <__clzsi2>:
100141a0:	211c      	movs	r1, #28
100141a2:	2301      	movs	r3, #1
100141a4:	041b      	lsls	r3, r3, #16
100141a6:	4298      	cmp	r0, r3
100141a8:	d301      	bcc.n	100141ae <__clzsi2+0xe>
100141aa:	0c00      	lsrs	r0, r0, #16
100141ac:	3910      	subs	r1, #16
100141ae:	0a1b      	lsrs	r3, r3, #8
100141b0:	4298      	cmp	r0, r3
100141b2:	d301      	bcc.n	100141b8 <__clzsi2+0x18>
100141b4:	0a00      	lsrs	r0, r0, #8
100141b6:	3908      	subs	r1, #8
100141b8:	091b      	lsrs	r3, r3, #4
100141ba:	4298      	cmp	r0, r3
100141bc:	d301      	bcc.n	100141c2 <__clzsi2+0x22>
100141be:	0900      	lsrs	r0, r0, #4
100141c0:	3904      	subs	r1, #4
100141c2:	a202      	add	r2, pc, #8	; (adr r2, 100141cc <__clzsi2+0x2c>)
100141c4:	5c10      	ldrb	r0, [r2, r0]
100141c6:	1840      	adds	r0, r0, r1
100141c8:	4770      	bx	lr
100141ca:	46c0      	nop			; (mov r8, r8)
100141cc:	02020304 	.word	0x02020304
100141d0:	01010101 	.word	0x01010101
	...

100141dc <__divdi3>:
100141dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100141de:	4644      	mov	r4, r8
100141e0:	465f      	mov	r7, fp
100141e2:	4656      	mov	r6, sl
100141e4:	464d      	mov	r5, r9
100141e6:	b4f0      	push	{r4, r5, r6, r7}
100141e8:	001c      	movs	r4, r3
100141ea:	b083      	sub	sp, #12
100141ec:	2900      	cmp	r1, #0
100141ee:	da00      	bge.n	100141f2 <__divdi3+0x16>
100141f0:	e092      	b.n	10014318 <__divdi3+0x13c>
100141f2:	000f      	movs	r7, r1
100141f4:	2100      	movs	r1, #0
100141f6:	0006      	movs	r6, r0
100141f8:	468a      	mov	sl, r1
100141fa:	0010      	movs	r0, r2
100141fc:	0019      	movs	r1, r3
100141fe:	2c00      	cmp	r4, #0
10014200:	da00      	bge.n	10014204 <__divdi3+0x28>
10014202:	e080      	b.n	10014306 <__divdi3+0x12a>
10014204:	0034      	movs	r4, r6
10014206:	003d      	movs	r5, r7
10014208:	4681      	mov	r9, r0
1001420a:	4688      	mov	r8, r1
1001420c:	42b9      	cmp	r1, r7
1001420e:	d869      	bhi.n	100142e4 <__divdi3+0x108>
10014210:	d066      	beq.n	100142e0 <__divdi3+0x104>
10014212:	4641      	mov	r1, r8
10014214:	4648      	mov	r0, r9
10014216:	f000 f8bf 	bl	10014398 <__clzdi2>
1001421a:	4683      	mov	fp, r0
1001421c:	0039      	movs	r1, r7
1001421e:	0030      	movs	r0, r6
10014220:	f000 f8ba 	bl	10014398 <__clzdi2>
10014224:	465b      	mov	r3, fp
10014226:	1a1b      	subs	r3, r3, r0
10014228:	469c      	mov	ip, r3
1001422a:	3b20      	subs	r3, #32
1001422c:	469b      	mov	fp, r3
1001422e:	d500      	bpl.n	10014232 <__divdi3+0x56>
10014230:	e086      	b.n	10014340 <__divdi3+0x164>
10014232:	4649      	mov	r1, r9
10014234:	4658      	mov	r0, fp
10014236:	4081      	lsls	r1, r0
10014238:	000b      	movs	r3, r1
1001423a:	4649      	mov	r1, r9
1001423c:	4660      	mov	r0, ip
1001423e:	4081      	lsls	r1, r0
10014240:	000a      	movs	r2, r1
10014242:	42bb      	cmp	r3, r7
10014244:	d900      	bls.n	10014248 <__divdi3+0x6c>
10014246:	e071      	b.n	1001432c <__divdi3+0x150>
10014248:	d06d      	beq.n	10014326 <__divdi3+0x14a>
1001424a:	0034      	movs	r4, r6
1001424c:	003d      	movs	r5, r7
1001424e:	4659      	mov	r1, fp
10014250:	1aa4      	subs	r4, r4, r2
10014252:	419d      	sbcs	r5, r3
10014254:	2900      	cmp	r1, #0
10014256:	da00      	bge.n	1001425a <__divdi3+0x7e>
10014258:	e089      	b.n	1001436e <__divdi3+0x192>
1001425a:	2100      	movs	r1, #0
1001425c:	2000      	movs	r0, #0
1001425e:	2601      	movs	r6, #1
10014260:	9000      	str	r0, [sp, #0]
10014262:	9101      	str	r1, [sp, #4]
10014264:	4659      	mov	r1, fp
10014266:	408e      	lsls	r6, r1
10014268:	9601      	str	r6, [sp, #4]
1001426a:	4661      	mov	r1, ip
1001426c:	2601      	movs	r6, #1
1001426e:	408e      	lsls	r6, r1
10014270:	4661      	mov	r1, ip
10014272:	9600      	str	r6, [sp, #0]
10014274:	2900      	cmp	r1, #0
10014276:	d060      	beq.n	1001433a <__divdi3+0x15e>
10014278:	07d9      	lsls	r1, r3, #31
1001427a:	0856      	lsrs	r6, r2, #1
1001427c:	430e      	orrs	r6, r1
1001427e:	085f      	lsrs	r7, r3, #1
10014280:	4661      	mov	r1, ip
10014282:	2201      	movs	r2, #1
10014284:	2300      	movs	r3, #0
10014286:	e00c      	b.n	100142a2 <__divdi3+0xc6>
10014288:	42af      	cmp	r7, r5
1001428a:	d101      	bne.n	10014290 <__divdi3+0xb4>
1001428c:	42a6      	cmp	r6, r4
1001428e:	d80a      	bhi.n	100142a6 <__divdi3+0xca>
10014290:	1ba4      	subs	r4, r4, r6
10014292:	41bd      	sbcs	r5, r7
10014294:	1924      	adds	r4, r4, r4
10014296:	416d      	adcs	r5, r5
10014298:	3901      	subs	r1, #1
1001429a:	18a4      	adds	r4, r4, r2
1001429c:	415d      	adcs	r5, r3
1001429e:	2900      	cmp	r1, #0
100142a0:	d006      	beq.n	100142b0 <__divdi3+0xd4>
100142a2:	42af      	cmp	r7, r5
100142a4:	d9f0      	bls.n	10014288 <__divdi3+0xac>
100142a6:	3901      	subs	r1, #1
100142a8:	1924      	adds	r4, r4, r4
100142aa:	416d      	adcs	r5, r5
100142ac:	2900      	cmp	r1, #0
100142ae:	d1f8      	bne.n	100142a2 <__divdi3+0xc6>
100142b0:	465b      	mov	r3, fp
100142b2:	9800      	ldr	r0, [sp, #0]
100142b4:	9901      	ldr	r1, [sp, #4]
100142b6:	1900      	adds	r0, r0, r4
100142b8:	4169      	adcs	r1, r5
100142ba:	2b00      	cmp	r3, #0
100142bc:	db4c      	blt.n	10014358 <__divdi3+0x17c>
100142be:	002e      	movs	r6, r5
100142c0:	40de      	lsrs	r6, r3
100142c2:	4663      	mov	r3, ip
100142c4:	002c      	movs	r4, r5
100142c6:	40dc      	lsrs	r4, r3
100142c8:	465b      	mov	r3, fp
100142ca:	2b00      	cmp	r3, #0
100142cc:	db5a      	blt.n	10014384 <__divdi3+0x1a8>
100142ce:	0034      	movs	r4, r6
100142d0:	409c      	lsls	r4, r3
100142d2:	0023      	movs	r3, r4
100142d4:	4664      	mov	r4, ip
100142d6:	40a6      	lsls	r6, r4
100142d8:	0032      	movs	r2, r6
100142da:	1a80      	subs	r0, r0, r2
100142dc:	4199      	sbcs	r1, r3
100142de:	e003      	b.n	100142e8 <__divdi3+0x10c>
100142e0:	42b0      	cmp	r0, r6
100142e2:	d996      	bls.n	10014212 <__divdi3+0x36>
100142e4:	2000      	movs	r0, #0
100142e6:	2100      	movs	r1, #0
100142e8:	4653      	mov	r3, sl
100142ea:	2b00      	cmp	r3, #0
100142ec:	d004      	beq.n	100142f8 <__divdi3+0x11c>
100142ee:	0003      	movs	r3, r0
100142f0:	000c      	movs	r4, r1
100142f2:	2100      	movs	r1, #0
100142f4:	4258      	negs	r0, r3
100142f6:	41a1      	sbcs	r1, r4
100142f8:	b003      	add	sp, #12
100142fa:	bc3c      	pop	{r2, r3, r4, r5}
100142fc:	4690      	mov	r8, r2
100142fe:	4699      	mov	r9, r3
10014300:	46a2      	mov	sl, r4
10014302:	46ab      	mov	fp, r5
10014304:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014306:	4653      	mov	r3, sl
10014308:	43db      	mvns	r3, r3
1001430a:	000c      	movs	r4, r1
1001430c:	469a      	mov	sl, r3
1001430e:	0013      	movs	r3, r2
10014310:	2100      	movs	r1, #0
10014312:	4258      	negs	r0, r3
10014314:	41a1      	sbcs	r1, r4
10014316:	e775      	b.n	10014204 <__divdi3+0x28>
10014318:	2700      	movs	r7, #0
1001431a:	4246      	negs	r6, r0
1001431c:	418f      	sbcs	r7, r1
1001431e:	2101      	movs	r1, #1
10014320:	4249      	negs	r1, r1
10014322:	468a      	mov	sl, r1
10014324:	e769      	b.n	100141fa <__divdi3+0x1e>
10014326:	42b1      	cmp	r1, r6
10014328:	d800      	bhi.n	1001432c <__divdi3+0x150>
1001432a:	e78e      	b.n	1001424a <__divdi3+0x6e>
1001432c:	2100      	movs	r1, #0
1001432e:	2000      	movs	r0, #0
10014330:	9000      	str	r0, [sp, #0]
10014332:	9101      	str	r1, [sp, #4]
10014334:	4661      	mov	r1, ip
10014336:	2900      	cmp	r1, #0
10014338:	d19e      	bne.n	10014278 <__divdi3+0x9c>
1001433a:	9800      	ldr	r0, [sp, #0]
1001433c:	9901      	ldr	r1, [sp, #4]
1001433e:	e7d3      	b.n	100142e8 <__divdi3+0x10c>
10014340:	4662      	mov	r2, ip
10014342:	4640      	mov	r0, r8
10014344:	2320      	movs	r3, #32
10014346:	4649      	mov	r1, r9
10014348:	4090      	lsls	r0, r2
1001434a:	1a9b      	subs	r3, r3, r2
1001434c:	40d9      	lsrs	r1, r3
1001434e:	0003      	movs	r3, r0
10014350:	9100      	str	r1, [sp, #0]
10014352:	9900      	ldr	r1, [sp, #0]
10014354:	430b      	orrs	r3, r1
10014356:	e770      	b.n	1001423a <__divdi3+0x5e>
10014358:	4662      	mov	r2, ip
1001435a:	2320      	movs	r3, #32
1001435c:	1a9b      	subs	r3, r3, r2
1001435e:	002a      	movs	r2, r5
10014360:	409a      	lsls	r2, r3
10014362:	0026      	movs	r6, r4
10014364:	0013      	movs	r3, r2
10014366:	4662      	mov	r2, ip
10014368:	40d6      	lsrs	r6, r2
1001436a:	431e      	orrs	r6, r3
1001436c:	e7a9      	b.n	100142c2 <__divdi3+0xe6>
1001436e:	4661      	mov	r1, ip
10014370:	2620      	movs	r6, #32
10014372:	2701      	movs	r7, #1
10014374:	1a76      	subs	r6, r6, r1
10014376:	2000      	movs	r0, #0
10014378:	2100      	movs	r1, #0
1001437a:	40f7      	lsrs	r7, r6
1001437c:	9000      	str	r0, [sp, #0]
1001437e:	9101      	str	r1, [sp, #4]
10014380:	9701      	str	r7, [sp, #4]
10014382:	e772      	b.n	1001426a <__divdi3+0x8e>
10014384:	4662      	mov	r2, ip
10014386:	2320      	movs	r3, #32
10014388:	0035      	movs	r5, r6
1001438a:	4094      	lsls	r4, r2
1001438c:	1a9b      	subs	r3, r3, r2
1001438e:	40dd      	lsrs	r5, r3
10014390:	0023      	movs	r3, r4
10014392:	432b      	orrs	r3, r5
10014394:	e79e      	b.n	100142d4 <__divdi3+0xf8>
10014396:	46c0      	nop			; (mov r8, r8)

10014398 <__clzdi2>:
10014398:	b510      	push	{r4, lr}
1001439a:	2900      	cmp	r1, #0
1001439c:	d103      	bne.n	100143a6 <__clzdi2+0xe>
1001439e:	f7ff feff 	bl	100141a0 <__clzsi2>
100143a2:	3020      	adds	r0, #32
100143a4:	e002      	b.n	100143ac <__clzdi2+0x14>
100143a6:	1c08      	adds	r0, r1, #0
100143a8:	f7ff fefa 	bl	100141a0 <__clzsi2>
100143ac:	bd10      	pop	{r4, pc}
100143ae:	46c0      	nop			; (mov r8, r8)

100143b0 <__errno>:
100143b0:	4b01      	ldr	r3, [pc, #4]	; (100143b8 <__errno+0x8>)
100143b2:	6818      	ldr	r0, [r3, #0]
100143b4:	4770      	bx	lr
100143b6:	46c0      	nop			; (mov r8, r8)
100143b8:	10017628 	.word	0x10017628

100143bc <__libc_init_array>:
100143bc:	4b0e      	ldr	r3, [pc, #56]	; (100143f8 <__libc_init_array+0x3c>)
100143be:	b570      	push	{r4, r5, r6, lr}
100143c0:	2500      	movs	r5, #0
100143c2:	001e      	movs	r6, r3
100143c4:	4c0d      	ldr	r4, [pc, #52]	; (100143fc <__libc_init_array+0x40>)
100143c6:	1ae4      	subs	r4, r4, r3
100143c8:	10a4      	asrs	r4, r4, #2
100143ca:	42a5      	cmp	r5, r4
100143cc:	d004      	beq.n	100143d8 <__libc_init_array+0x1c>
100143ce:	00ab      	lsls	r3, r5, #2
100143d0:	58f3      	ldr	r3, [r6, r3]
100143d2:	4798      	blx	r3
100143d4:	3501      	adds	r5, #1
100143d6:	e7f8      	b.n	100143ca <__libc_init_array+0xe>
100143d8:	f003 f8bc 	bl	10017554 <_init>
100143dc:	4b08      	ldr	r3, [pc, #32]	; (10014400 <__libc_init_array+0x44>)
100143de:	2500      	movs	r5, #0
100143e0:	001e      	movs	r6, r3
100143e2:	4c08      	ldr	r4, [pc, #32]	; (10014404 <__libc_init_array+0x48>)
100143e4:	1ae4      	subs	r4, r4, r3
100143e6:	10a4      	asrs	r4, r4, #2
100143e8:	42a5      	cmp	r5, r4
100143ea:	d004      	beq.n	100143f6 <__libc_init_array+0x3a>
100143ec:	00ab      	lsls	r3, r5, #2
100143ee:	58f3      	ldr	r3, [r6, r3]
100143f0:	4798      	blx	r3
100143f2:	3501      	adds	r5, #1
100143f4:	e7f8      	b.n	100143e8 <__libc_init_array+0x2c>
100143f6:	bd70      	pop	{r4, r5, r6, pc}
100143f8:	10017560 	.word	0x10017560
100143fc:	10017560 	.word	0x10017560
10014400:	10017560 	.word	0x10017560
10014404:	10017564 	.word	0x10017564

10014408 <malloc>:
10014408:	b510      	push	{r4, lr}
1001440a:	4b03      	ldr	r3, [pc, #12]	; (10014418 <malloc+0x10>)
1001440c:	0001      	movs	r1, r0
1001440e:	6818      	ldr	r0, [r3, #0]
10014410:	f000 f880 	bl	10014514 <_malloc_r>
10014414:	bd10      	pop	{r4, pc}
10014416:	46c0      	nop			; (mov r8, r8)
10014418:	10017628 	.word	0x10017628

1001441c <memcmp>:
1001441c:	b530      	push	{r4, r5, lr}
1001441e:	2400      	movs	r4, #0
10014420:	42a2      	cmp	r2, r4
10014422:	d008      	beq.n	10014436 <memcmp+0x1a>
10014424:	5d03      	ldrb	r3, [r0, r4]
10014426:	1c65      	adds	r5, r4, #1
10014428:	5d0c      	ldrb	r4, [r1, r4]
1001442a:	42a3      	cmp	r3, r4
1001442c:	d001      	beq.n	10014432 <memcmp+0x16>
1001442e:	1b18      	subs	r0, r3, r4
10014430:	e002      	b.n	10014438 <memcmp+0x1c>
10014432:	002c      	movs	r4, r5
10014434:	e7f4      	b.n	10014420 <memcmp+0x4>
10014436:	2000      	movs	r0, #0
10014438:	bd30      	pop	{r4, r5, pc}

1001443a <memcpy>:
1001443a:	2300      	movs	r3, #0
1001443c:	b510      	push	{r4, lr}
1001443e:	429a      	cmp	r2, r3
10014440:	d003      	beq.n	1001444a <memcpy+0x10>
10014442:	5ccc      	ldrb	r4, [r1, r3]
10014444:	54c4      	strb	r4, [r0, r3]
10014446:	3301      	adds	r3, #1
10014448:	e7f9      	b.n	1001443e <memcpy+0x4>
1001444a:	bd10      	pop	{r4, pc}

1001444c <memmove>:
1001444c:	b510      	push	{r4, lr}
1001444e:	4288      	cmp	r0, r1
10014450:	d902      	bls.n	10014458 <memmove+0xc>
10014452:	188b      	adds	r3, r1, r2
10014454:	4298      	cmp	r0, r3
10014456:	d301      	bcc.n	1001445c <memmove+0x10>
10014458:	2300      	movs	r3, #0
1001445a:	e005      	b.n	10014468 <memmove+0x1c>
1001445c:	1a9b      	subs	r3, r3, r2
1001445e:	3a01      	subs	r2, #1
10014460:	d308      	bcc.n	10014474 <memmove+0x28>
10014462:	5c99      	ldrb	r1, [r3, r2]
10014464:	5481      	strb	r1, [r0, r2]
10014466:	e7fa      	b.n	1001445e <memmove+0x12>
10014468:	4293      	cmp	r3, r2
1001446a:	d003      	beq.n	10014474 <memmove+0x28>
1001446c:	5ccc      	ldrb	r4, [r1, r3]
1001446e:	54c4      	strb	r4, [r0, r3]
10014470:	3301      	adds	r3, #1
10014472:	e7f9      	b.n	10014468 <memmove+0x1c>
10014474:	bd10      	pop	{r4, pc}

10014476 <memset>:
10014476:	0003      	movs	r3, r0
10014478:	1882      	adds	r2, r0, r2
1001447a:	4293      	cmp	r3, r2
1001447c:	d002      	beq.n	10014484 <memset+0xe>
1001447e:	7019      	strb	r1, [r3, #0]
10014480:	3301      	adds	r3, #1
10014482:	e7fa      	b.n	1001447a <memset+0x4>
10014484:	4770      	bx	lr
	...

10014488 <_free_r>:
10014488:	b530      	push	{r4, r5, lr}
1001448a:	2900      	cmp	r1, #0
1001448c:	d03e      	beq.n	1001450c <_free_r+0x84>
1001448e:	3904      	subs	r1, #4
10014490:	680b      	ldr	r3, [r1, #0]
10014492:	2b00      	cmp	r3, #0
10014494:	da00      	bge.n	10014498 <_free_r+0x10>
10014496:	18c9      	adds	r1, r1, r3
10014498:	4a1d      	ldr	r2, [pc, #116]	; (10014510 <_free_r+0x88>)
1001449a:	6813      	ldr	r3, [r2, #0]
1001449c:	0014      	movs	r4, r2
1001449e:	2b00      	cmp	r3, #0
100144a0:	d102      	bne.n	100144a8 <_free_r+0x20>
100144a2:	604b      	str	r3, [r1, #4]
100144a4:	6011      	str	r1, [r2, #0]
100144a6:	e031      	b.n	1001450c <_free_r+0x84>
100144a8:	428b      	cmp	r3, r1
100144aa:	d90d      	bls.n	100144c8 <_free_r+0x40>
100144ac:	680a      	ldr	r2, [r1, #0]
100144ae:	1888      	adds	r0, r1, r2
100144b0:	4283      	cmp	r3, r0
100144b2:	d103      	bne.n	100144bc <_free_r+0x34>
100144b4:	6818      	ldr	r0, [r3, #0]
100144b6:	685b      	ldr	r3, [r3, #4]
100144b8:	1882      	adds	r2, r0, r2
100144ba:	600a      	str	r2, [r1, #0]
100144bc:	604b      	str	r3, [r1, #4]
100144be:	6021      	str	r1, [r4, #0]
100144c0:	e024      	b.n	1001450c <_free_r+0x84>
100144c2:	428a      	cmp	r2, r1
100144c4:	d803      	bhi.n	100144ce <_free_r+0x46>
100144c6:	0013      	movs	r3, r2
100144c8:	685a      	ldr	r2, [r3, #4]
100144ca:	2a00      	cmp	r2, #0
100144cc:	d1f9      	bne.n	100144c2 <_free_r+0x3a>
100144ce:	681d      	ldr	r5, [r3, #0]
100144d0:	195c      	adds	r4, r3, r5
100144d2:	428c      	cmp	r4, r1
100144d4:	d10b      	bne.n	100144ee <_free_r+0x66>
100144d6:	6809      	ldr	r1, [r1, #0]
100144d8:	1869      	adds	r1, r5, r1
100144da:	1858      	adds	r0, r3, r1
100144dc:	6019      	str	r1, [r3, #0]
100144de:	4282      	cmp	r2, r0
100144e0:	d114      	bne.n	1001450c <_free_r+0x84>
100144e2:	6810      	ldr	r0, [r2, #0]
100144e4:	6852      	ldr	r2, [r2, #4]
100144e6:	1841      	adds	r1, r0, r1
100144e8:	6019      	str	r1, [r3, #0]
100144ea:	605a      	str	r2, [r3, #4]
100144ec:	e00e      	b.n	1001450c <_free_r+0x84>
100144ee:	428c      	cmp	r4, r1
100144f0:	d902      	bls.n	100144f8 <_free_r+0x70>
100144f2:	230c      	movs	r3, #12
100144f4:	6003      	str	r3, [r0, #0]
100144f6:	e009      	b.n	1001450c <_free_r+0x84>
100144f8:	6808      	ldr	r0, [r1, #0]
100144fa:	180c      	adds	r4, r1, r0
100144fc:	42a2      	cmp	r2, r4
100144fe:	d103      	bne.n	10014508 <_free_r+0x80>
10014500:	6814      	ldr	r4, [r2, #0]
10014502:	6852      	ldr	r2, [r2, #4]
10014504:	1820      	adds	r0, r4, r0
10014506:	6008      	str	r0, [r1, #0]
10014508:	604a      	str	r2, [r1, #4]
1001450a:	6059      	str	r1, [r3, #4]
1001450c:	bd30      	pop	{r4, r5, pc}
1001450e:	46c0      	nop			; (mov r8, r8)
10014510:	1001908c 	.word	0x1001908c

10014514 <_malloc_r>:
10014514:	2303      	movs	r3, #3
10014516:	b570      	push	{r4, r5, r6, lr}
10014518:	1ccd      	adds	r5, r1, #3
1001451a:	439d      	bics	r5, r3
1001451c:	3508      	adds	r5, #8
1001451e:	0006      	movs	r6, r0
10014520:	2d0c      	cmp	r5, #12
10014522:	d201      	bcs.n	10014528 <_malloc_r+0x14>
10014524:	250c      	movs	r5, #12
10014526:	e005      	b.n	10014534 <_malloc_r+0x20>
10014528:	2d00      	cmp	r5, #0
1001452a:	da03      	bge.n	10014534 <_malloc_r+0x20>
1001452c:	230c      	movs	r3, #12
1001452e:	2000      	movs	r0, #0
10014530:	6033      	str	r3, [r6, #0]
10014532:	e040      	b.n	100145b6 <_malloc_r+0xa2>
10014534:	42a9      	cmp	r1, r5
10014536:	d8f9      	bhi.n	1001452c <_malloc_r+0x18>
10014538:	4b1f      	ldr	r3, [pc, #124]	; (100145b8 <_malloc_r+0xa4>)
1001453a:	681c      	ldr	r4, [r3, #0]
1001453c:	001a      	movs	r2, r3
1001453e:	0021      	movs	r1, r4
10014540:	2900      	cmp	r1, #0
10014542:	d013      	beq.n	1001456c <_malloc_r+0x58>
10014544:	680b      	ldr	r3, [r1, #0]
10014546:	1b5b      	subs	r3, r3, r5
10014548:	d40d      	bmi.n	10014566 <_malloc_r+0x52>
1001454a:	2b0b      	cmp	r3, #11
1001454c:	d902      	bls.n	10014554 <_malloc_r+0x40>
1001454e:	600b      	str	r3, [r1, #0]
10014550:	18cc      	adds	r4, r1, r3
10014552:	e01e      	b.n	10014592 <_malloc_r+0x7e>
10014554:	428c      	cmp	r4, r1
10014556:	d102      	bne.n	1001455e <_malloc_r+0x4a>
10014558:	6863      	ldr	r3, [r4, #4]
1001455a:	6013      	str	r3, [r2, #0]
1001455c:	e01a      	b.n	10014594 <_malloc_r+0x80>
1001455e:	684b      	ldr	r3, [r1, #4]
10014560:	6063      	str	r3, [r4, #4]
10014562:	000c      	movs	r4, r1
10014564:	e016      	b.n	10014594 <_malloc_r+0x80>
10014566:	000c      	movs	r4, r1
10014568:	6849      	ldr	r1, [r1, #4]
1001456a:	e7e9      	b.n	10014540 <_malloc_r+0x2c>
1001456c:	4c13      	ldr	r4, [pc, #76]	; (100145bc <_malloc_r+0xa8>)
1001456e:	6823      	ldr	r3, [r4, #0]
10014570:	2b00      	cmp	r3, #0
10014572:	d103      	bne.n	1001457c <_malloc_r+0x68>
10014574:	0030      	movs	r0, r6
10014576:	f000 f8f9 	bl	1001476c <_sbrk_r>
1001457a:	6020      	str	r0, [r4, #0]
1001457c:	0029      	movs	r1, r5
1001457e:	0030      	movs	r0, r6
10014580:	f000 f8f4 	bl	1001476c <_sbrk_r>
10014584:	1c43      	adds	r3, r0, #1
10014586:	d0d1      	beq.n	1001452c <_malloc_r+0x18>
10014588:	2303      	movs	r3, #3
1001458a:	1cc4      	adds	r4, r0, #3
1001458c:	439c      	bics	r4, r3
1001458e:	42a0      	cmp	r0, r4
10014590:	d10a      	bne.n	100145a8 <_malloc_r+0x94>
10014592:	6025      	str	r5, [r4, #0]
10014594:	0020      	movs	r0, r4
10014596:	2207      	movs	r2, #7
10014598:	300b      	adds	r0, #11
1001459a:	1d23      	adds	r3, r4, #4
1001459c:	4390      	bics	r0, r2
1001459e:	1ac3      	subs	r3, r0, r3
100145a0:	d009      	beq.n	100145b6 <_malloc_r+0xa2>
100145a2:	425a      	negs	r2, r3
100145a4:	50e2      	str	r2, [r4, r3]
100145a6:	e006      	b.n	100145b6 <_malloc_r+0xa2>
100145a8:	1a21      	subs	r1, r4, r0
100145aa:	0030      	movs	r0, r6
100145ac:	f000 f8de 	bl	1001476c <_sbrk_r>
100145b0:	1c43      	adds	r3, r0, #1
100145b2:	d1ee      	bne.n	10014592 <_malloc_r+0x7e>
100145b4:	e7ba      	b.n	1001452c <_malloc_r+0x18>
100145b6:	bd70      	pop	{r4, r5, r6, pc}
100145b8:	1001908c 	.word	0x1001908c
100145bc:	10019088 	.word	0x10019088

100145c0 <iprintf>:
100145c0:	b40f      	push	{r0, r1, r2, r3}
100145c2:	4b0b      	ldr	r3, [pc, #44]	; (100145f0 <iprintf+0x30>)
100145c4:	b513      	push	{r0, r1, r4, lr}
100145c6:	681c      	ldr	r4, [r3, #0]
100145c8:	2c00      	cmp	r4, #0
100145ca:	d005      	beq.n	100145d8 <iprintf+0x18>
100145cc:	69a3      	ldr	r3, [r4, #24]
100145ce:	2b00      	cmp	r3, #0
100145d0:	d102      	bne.n	100145d8 <iprintf+0x18>
100145d2:	0020      	movs	r0, r4
100145d4:	f000 fb58 	bl	10014c88 <__sinit>
100145d8:	ab05      	add	r3, sp, #20
100145da:	9a04      	ldr	r2, [sp, #16]
100145dc:	68a1      	ldr	r1, [r4, #8]
100145de:	0020      	movs	r0, r4
100145e0:	9301      	str	r3, [sp, #4]
100145e2:	f000 fc71 	bl	10014ec8 <_vfiprintf_r>
100145e6:	bc16      	pop	{r1, r2, r4}
100145e8:	bc08      	pop	{r3}
100145ea:	b004      	add	sp, #16
100145ec:	4718      	bx	r3
100145ee:	46c0      	nop			; (mov r8, r8)
100145f0:	10017628 	.word	0x10017628

100145f4 <putchar>:
100145f4:	4b08      	ldr	r3, [pc, #32]	; (10014618 <putchar+0x24>)
100145f6:	b570      	push	{r4, r5, r6, lr}
100145f8:	681c      	ldr	r4, [r3, #0]
100145fa:	0005      	movs	r5, r0
100145fc:	2c00      	cmp	r4, #0
100145fe:	d005      	beq.n	1001460c <putchar+0x18>
10014600:	69a3      	ldr	r3, [r4, #24]
10014602:	2b00      	cmp	r3, #0
10014604:	d102      	bne.n	1001460c <putchar+0x18>
10014606:	0020      	movs	r0, r4
10014608:	f000 fb3e 	bl	10014c88 <__sinit>
1001460c:	0029      	movs	r1, r5
1001460e:	68a2      	ldr	r2, [r4, #8]
10014610:	0020      	movs	r0, r4
10014612:	f000 ff05 	bl	10015420 <_putc_r>
10014616:	bd70      	pop	{r4, r5, r6, pc}
10014618:	10017628 	.word	0x10017628

1001461c <_puts_r>:
1001461c:	b570      	push	{r4, r5, r6, lr}
1001461e:	0005      	movs	r5, r0
10014620:	000e      	movs	r6, r1
10014622:	2800      	cmp	r0, #0
10014624:	d004      	beq.n	10014630 <_puts_r+0x14>
10014626:	6983      	ldr	r3, [r0, #24]
10014628:	2b00      	cmp	r3, #0
1001462a:	d101      	bne.n	10014630 <_puts_r+0x14>
1001462c:	f000 fb2c 	bl	10014c88 <__sinit>
10014630:	69ab      	ldr	r3, [r5, #24]
10014632:	68ac      	ldr	r4, [r5, #8]
10014634:	2b00      	cmp	r3, #0
10014636:	d102      	bne.n	1001463e <_puts_r+0x22>
10014638:	0028      	movs	r0, r5
1001463a:	f000 fb25 	bl	10014c88 <__sinit>
1001463e:	4b25      	ldr	r3, [pc, #148]	; (100146d4 <_puts_r+0xb8>)
10014640:	429c      	cmp	r4, r3
10014642:	d101      	bne.n	10014648 <_puts_r+0x2c>
10014644:	686c      	ldr	r4, [r5, #4]
10014646:	e008      	b.n	1001465a <_puts_r+0x3e>
10014648:	4b23      	ldr	r3, [pc, #140]	; (100146d8 <_puts_r+0xbc>)
1001464a:	429c      	cmp	r4, r3
1001464c:	d101      	bne.n	10014652 <_puts_r+0x36>
1001464e:	68ac      	ldr	r4, [r5, #8]
10014650:	e003      	b.n	1001465a <_puts_r+0x3e>
10014652:	4b22      	ldr	r3, [pc, #136]	; (100146dc <_puts_r+0xc0>)
10014654:	429c      	cmp	r4, r3
10014656:	d100      	bne.n	1001465a <_puts_r+0x3e>
10014658:	68ec      	ldr	r4, [r5, #12]
1001465a:	89a3      	ldrh	r3, [r4, #12]
1001465c:	071b      	lsls	r3, r3, #28
1001465e:	d502      	bpl.n	10014666 <_puts_r+0x4a>
10014660:	6923      	ldr	r3, [r4, #16]
10014662:	2b00      	cmp	r3, #0
10014664:	d111      	bne.n	1001468a <_puts_r+0x6e>
10014666:	0021      	movs	r1, r4
10014668:	0028      	movs	r0, r5
1001466a:	f000 f9a3 	bl	100149b4 <__swsetup_r>
1001466e:	2800      	cmp	r0, #0
10014670:	d00b      	beq.n	1001468a <_puts_r+0x6e>
10014672:	2001      	movs	r0, #1
10014674:	4240      	negs	r0, r0
10014676:	e02b      	b.n	100146d0 <_puts_r+0xb4>
10014678:	3b01      	subs	r3, #1
1001467a:	3601      	adds	r6, #1
1001467c:	60a3      	str	r3, [r4, #8]
1001467e:	2b00      	cmp	r3, #0
10014680:	db08      	blt.n	10014694 <_puts_r+0x78>
10014682:	6823      	ldr	r3, [r4, #0]
10014684:	1c5a      	adds	r2, r3, #1
10014686:	6022      	str	r2, [r4, #0]
10014688:	7019      	strb	r1, [r3, #0]
1001468a:	7831      	ldrb	r1, [r6, #0]
1001468c:	68a3      	ldr	r3, [r4, #8]
1001468e:	2900      	cmp	r1, #0
10014690:	d1f2      	bne.n	10014678 <_puts_r+0x5c>
10014692:	e00b      	b.n	100146ac <_puts_r+0x90>
10014694:	69a2      	ldr	r2, [r4, #24]
10014696:	4293      	cmp	r3, r2
10014698:	db01      	blt.n	1001469e <_puts_r+0x82>
1001469a:	290a      	cmp	r1, #10
1001469c:	d1f1      	bne.n	10014682 <_puts_r+0x66>
1001469e:	0022      	movs	r2, r4
100146a0:	0028      	movs	r0, r5
100146a2:	f000 f92f 	bl	10014904 <__swbuf_r>
100146a6:	1c43      	adds	r3, r0, #1
100146a8:	d1ef      	bne.n	1001468a <_puts_r+0x6e>
100146aa:	e7e2      	b.n	10014672 <_puts_r+0x56>
100146ac:	3b01      	subs	r3, #1
100146ae:	60a3      	str	r3, [r4, #8]
100146b0:	2b00      	cmp	r3, #0
100146b2:	da08      	bge.n	100146c6 <_puts_r+0xaa>
100146b4:	0022      	movs	r2, r4
100146b6:	310a      	adds	r1, #10
100146b8:	0028      	movs	r0, r5
100146ba:	f000 f923 	bl	10014904 <__swbuf_r>
100146be:	1c43      	adds	r3, r0, #1
100146c0:	d0d7      	beq.n	10014672 <_puts_r+0x56>
100146c2:	200a      	movs	r0, #10
100146c4:	e004      	b.n	100146d0 <_puts_r+0xb4>
100146c6:	200a      	movs	r0, #10
100146c8:	6823      	ldr	r3, [r4, #0]
100146ca:	1c5a      	adds	r2, r3, #1
100146cc:	6022      	str	r2, [r4, #0]
100146ce:	7018      	strb	r0, [r3, #0]
100146d0:	bd70      	pop	{r4, r5, r6, pc}
100146d2:	46c0      	nop			; (mov r8, r8)
100146d4:	100174c0 	.word	0x100174c0
100146d8:	100174e0 	.word	0x100174e0
100146dc:	10017500 	.word	0x10017500

100146e0 <puts>:
100146e0:	b510      	push	{r4, lr}
100146e2:	4b03      	ldr	r3, [pc, #12]	; (100146f0 <puts+0x10>)
100146e4:	0001      	movs	r1, r0
100146e6:	6818      	ldr	r0, [r3, #0]
100146e8:	f7ff ff98 	bl	1001461c <_puts_r>
100146ec:	bd10      	pop	{r4, pc}
100146ee:	46c0      	nop			; (mov r8, r8)
100146f0:	10017628 	.word	0x10017628

100146f4 <rand>:
100146f4:	4b15      	ldr	r3, [pc, #84]	; (1001474c <rand+0x58>)
100146f6:	b510      	push	{r4, lr}
100146f8:	681c      	ldr	r4, [r3, #0]
100146fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100146fc:	2b00      	cmp	r3, #0
100146fe:	d115      	bne.n	1001472c <rand+0x38>
10014700:	2018      	movs	r0, #24
10014702:	f7ff fe81 	bl	10014408 <malloc>
10014706:	4b12      	ldr	r3, [pc, #72]	; (10014750 <rand+0x5c>)
10014708:	63a0      	str	r0, [r4, #56]	; 0x38
1001470a:	8003      	strh	r3, [r0, #0]
1001470c:	4b11      	ldr	r3, [pc, #68]	; (10014754 <rand+0x60>)
1001470e:	2201      	movs	r2, #1
10014710:	8043      	strh	r3, [r0, #2]
10014712:	4b11      	ldr	r3, [pc, #68]	; (10014758 <rand+0x64>)
10014714:	8083      	strh	r3, [r0, #4]
10014716:	4b11      	ldr	r3, [pc, #68]	; (1001475c <rand+0x68>)
10014718:	80c3      	strh	r3, [r0, #6]
1001471a:	4b11      	ldr	r3, [pc, #68]	; (10014760 <rand+0x6c>)
1001471c:	8103      	strh	r3, [r0, #8]
1001471e:	2305      	movs	r3, #5
10014720:	8143      	strh	r3, [r0, #10]
10014722:	3306      	adds	r3, #6
10014724:	8183      	strh	r3, [r0, #12]
10014726:	2300      	movs	r3, #0
10014728:	6102      	str	r2, [r0, #16]
1001472a:	6143      	str	r3, [r0, #20]
1001472c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001472e:	4a0d      	ldr	r2, [pc, #52]	; (10014764 <rand+0x70>)
10014730:	6920      	ldr	r0, [r4, #16]
10014732:	6961      	ldr	r1, [r4, #20]
10014734:	4b0c      	ldr	r3, [pc, #48]	; (10014768 <rand+0x74>)
10014736:	f7fd fadb 	bl	10011cf0 <__aeabi_lmul>
1001473a:	2201      	movs	r2, #1
1001473c:	2300      	movs	r3, #0
1001473e:	1880      	adds	r0, r0, r2
10014740:	4159      	adcs	r1, r3
10014742:	6120      	str	r0, [r4, #16]
10014744:	6161      	str	r1, [r4, #20]
10014746:	0048      	lsls	r0, r1, #1
10014748:	0840      	lsrs	r0, r0, #1
1001474a:	bd10      	pop	{r4, pc}
1001474c:	10017628 	.word	0x10017628
10014750:	0000330e 	.word	0x0000330e
10014754:	ffffabcd 	.word	0xffffabcd
10014758:	00001234 	.word	0x00001234
1001475c:	ffffe66d 	.word	0xffffe66d
10014760:	ffffdeec 	.word	0xffffdeec
10014764:	4c957f2d 	.word	0x4c957f2d
10014768:	5851f42d 	.word	0x5851f42d

1001476c <_sbrk_r>:
1001476c:	2300      	movs	r3, #0
1001476e:	b570      	push	{r4, r5, r6, lr}
10014770:	4c06      	ldr	r4, [pc, #24]	; (1001478c <_sbrk_r+0x20>)
10014772:	0005      	movs	r5, r0
10014774:	0008      	movs	r0, r1
10014776:	6023      	str	r3, [r4, #0]
10014778:	f7f9 fd12 	bl	1000e1a0 <_sbrk>
1001477c:	1c43      	adds	r3, r0, #1
1001477e:	d103      	bne.n	10014788 <_sbrk_r+0x1c>
10014780:	6823      	ldr	r3, [r4, #0]
10014782:	2b00      	cmp	r3, #0
10014784:	d000      	beq.n	10014788 <_sbrk_r+0x1c>
10014786:	602b      	str	r3, [r5, #0]
10014788:	bd70      	pop	{r4, r5, r6, pc}
1001478a:	46c0      	nop			; (mov r8, r8)
1001478c:	1001a298 	.word	0x1001a298

10014790 <setbuf>:
10014790:	424a      	negs	r2, r1
10014792:	414a      	adcs	r2, r1
10014794:	2380      	movs	r3, #128	; 0x80
10014796:	b510      	push	{r4, lr}
10014798:	0052      	lsls	r2, r2, #1
1001479a:	00db      	lsls	r3, r3, #3
1001479c:	f000 f802 	bl	100147a4 <setvbuf>
100147a0:	bd10      	pop	{r4, pc}
	...

100147a4 <setvbuf>:
100147a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100147a6:	001d      	movs	r5, r3
100147a8:	4b51      	ldr	r3, [pc, #324]	; (100148f0 <setvbuf+0x14c>)
100147aa:	b085      	sub	sp, #20
100147ac:	681e      	ldr	r6, [r3, #0]
100147ae:	0004      	movs	r4, r0
100147b0:	000f      	movs	r7, r1
100147b2:	9200      	str	r2, [sp, #0]
100147b4:	2e00      	cmp	r6, #0
100147b6:	d005      	beq.n	100147c4 <setvbuf+0x20>
100147b8:	69b3      	ldr	r3, [r6, #24]
100147ba:	2b00      	cmp	r3, #0
100147bc:	d102      	bne.n	100147c4 <setvbuf+0x20>
100147be:	0030      	movs	r0, r6
100147c0:	f000 fa62 	bl	10014c88 <__sinit>
100147c4:	4b4b      	ldr	r3, [pc, #300]	; (100148f4 <setvbuf+0x150>)
100147c6:	429c      	cmp	r4, r3
100147c8:	d101      	bne.n	100147ce <setvbuf+0x2a>
100147ca:	6874      	ldr	r4, [r6, #4]
100147cc:	e008      	b.n	100147e0 <setvbuf+0x3c>
100147ce:	4b4a      	ldr	r3, [pc, #296]	; (100148f8 <setvbuf+0x154>)
100147d0:	429c      	cmp	r4, r3
100147d2:	d101      	bne.n	100147d8 <setvbuf+0x34>
100147d4:	68b4      	ldr	r4, [r6, #8]
100147d6:	e003      	b.n	100147e0 <setvbuf+0x3c>
100147d8:	4b48      	ldr	r3, [pc, #288]	; (100148fc <setvbuf+0x158>)
100147da:	429c      	cmp	r4, r3
100147dc:	d100      	bne.n	100147e0 <setvbuf+0x3c>
100147de:	68f4      	ldr	r4, [r6, #12]
100147e0:	9b00      	ldr	r3, [sp, #0]
100147e2:	2b02      	cmp	r3, #2
100147e4:	d005      	beq.n	100147f2 <setvbuf+0x4e>
100147e6:	2b01      	cmp	r3, #1
100147e8:	d900      	bls.n	100147ec <setvbuf+0x48>
100147ea:	e07c      	b.n	100148e6 <setvbuf+0x142>
100147ec:	2d00      	cmp	r5, #0
100147ee:	da00      	bge.n	100147f2 <setvbuf+0x4e>
100147f0:	e079      	b.n	100148e6 <setvbuf+0x142>
100147f2:	0021      	movs	r1, r4
100147f4:	0030      	movs	r0, r6
100147f6:	f000 f9d9 	bl	10014bac <_fflush_r>
100147fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
100147fc:	2900      	cmp	r1, #0
100147fe:	d008      	beq.n	10014812 <setvbuf+0x6e>
10014800:	0023      	movs	r3, r4
10014802:	3344      	adds	r3, #68	; 0x44
10014804:	4299      	cmp	r1, r3
10014806:	d002      	beq.n	1001480e <setvbuf+0x6a>
10014808:	0030      	movs	r0, r6
1001480a:	f7ff fe3d 	bl	10014488 <_free_r>
1001480e:	2300      	movs	r3, #0
10014810:	6363      	str	r3, [r4, #52]	; 0x34
10014812:	2300      	movs	r3, #0
10014814:	61a3      	str	r3, [r4, #24]
10014816:	6063      	str	r3, [r4, #4]
10014818:	89a3      	ldrh	r3, [r4, #12]
1001481a:	061b      	lsls	r3, r3, #24
1001481c:	d503      	bpl.n	10014826 <setvbuf+0x82>
1001481e:	6921      	ldr	r1, [r4, #16]
10014820:	0030      	movs	r0, r6
10014822:	f7ff fe31 	bl	10014488 <_free_r>
10014826:	89a2      	ldrh	r2, [r4, #12]
10014828:	4b35      	ldr	r3, [pc, #212]	; (10014900 <setvbuf+0x15c>)
1001482a:	4013      	ands	r3, r2
1001482c:	81a3      	strh	r3, [r4, #12]
1001482e:	9b00      	ldr	r3, [sp, #0]
10014830:	2b02      	cmp	r3, #2
10014832:	d021      	beq.n	10014878 <setvbuf+0xd4>
10014834:	ab03      	add	r3, sp, #12
10014836:	aa02      	add	r2, sp, #8
10014838:	0021      	movs	r1, r4
1001483a:	0030      	movs	r0, r6
1001483c:	f000 fab8 	bl	10014db0 <__swhatbuf_r>
10014840:	89a3      	ldrh	r3, [r4, #12]
10014842:	4318      	orrs	r0, r3
10014844:	81a0      	strh	r0, [r4, #12]
10014846:	2d00      	cmp	r5, #0
10014848:	d101      	bne.n	1001484e <setvbuf+0xaa>
1001484a:	9d02      	ldr	r5, [sp, #8]
1001484c:	e001      	b.n	10014852 <setvbuf+0xae>
1001484e:	2f00      	cmp	r7, #0
10014850:	d125      	bne.n	1001489e <setvbuf+0xfa>
10014852:	0028      	movs	r0, r5
10014854:	f7ff fdd8 	bl	10014408 <malloc>
10014858:	9501      	str	r5, [sp, #4]
1001485a:	1e07      	subs	r7, r0, #0
1001485c:	d11a      	bne.n	10014894 <setvbuf+0xf0>
1001485e:	9b02      	ldr	r3, [sp, #8]
10014860:	9301      	str	r3, [sp, #4]
10014862:	42ab      	cmp	r3, r5
10014864:	d102      	bne.n	1001486c <setvbuf+0xc8>
10014866:	2001      	movs	r0, #1
10014868:	4240      	negs	r0, r0
1001486a:	e006      	b.n	1001487a <setvbuf+0xd6>
1001486c:	9801      	ldr	r0, [sp, #4]
1001486e:	f7ff fdcb 	bl	10014408 <malloc>
10014872:	1e07      	subs	r7, r0, #0
10014874:	d10e      	bne.n	10014894 <setvbuf+0xf0>
10014876:	e7f6      	b.n	10014866 <setvbuf+0xc2>
10014878:	2000      	movs	r0, #0
1001487a:	2202      	movs	r2, #2
1001487c:	89a3      	ldrh	r3, [r4, #12]
1001487e:	4313      	orrs	r3, r2
10014880:	81a3      	strh	r3, [r4, #12]
10014882:	2300      	movs	r3, #0
10014884:	60a3      	str	r3, [r4, #8]
10014886:	0023      	movs	r3, r4
10014888:	3347      	adds	r3, #71	; 0x47
1001488a:	6023      	str	r3, [r4, #0]
1001488c:	6123      	str	r3, [r4, #16]
1001488e:	2301      	movs	r3, #1
10014890:	6163      	str	r3, [r4, #20]
10014892:	e02a      	b.n	100148ea <setvbuf+0x146>
10014894:	2280      	movs	r2, #128	; 0x80
10014896:	89a3      	ldrh	r3, [r4, #12]
10014898:	9d01      	ldr	r5, [sp, #4]
1001489a:	4313      	orrs	r3, r2
1001489c:	81a3      	strh	r3, [r4, #12]
1001489e:	69b3      	ldr	r3, [r6, #24]
100148a0:	2b00      	cmp	r3, #0
100148a2:	d102      	bne.n	100148aa <setvbuf+0x106>
100148a4:	0030      	movs	r0, r6
100148a6:	f000 f9ef 	bl	10014c88 <__sinit>
100148aa:	9b00      	ldr	r3, [sp, #0]
100148ac:	2b01      	cmp	r3, #1
100148ae:	d103      	bne.n	100148b8 <setvbuf+0x114>
100148b0:	89a3      	ldrh	r3, [r4, #12]
100148b2:	9a00      	ldr	r2, [sp, #0]
100148b4:	431a      	orrs	r2, r3
100148b6:	81a2      	strh	r2, [r4, #12]
100148b8:	2308      	movs	r3, #8
100148ba:	89a2      	ldrh	r2, [r4, #12]
100148bc:	6027      	str	r7, [r4, #0]
100148be:	4013      	ands	r3, r2
100148c0:	6127      	str	r7, [r4, #16]
100148c2:	6165      	str	r5, [r4, #20]
100148c4:	1e18      	subs	r0, r3, #0
100148c6:	d00c      	beq.n	100148e2 <setvbuf+0x13e>
100148c8:	2301      	movs	r3, #1
100148ca:	401a      	ands	r2, r3
100148cc:	2300      	movs	r3, #0
100148ce:	1e10      	subs	r0, r2, #0
100148d0:	4298      	cmp	r0, r3
100148d2:	d004      	beq.n	100148de <setvbuf+0x13a>
100148d4:	426d      	negs	r5, r5
100148d6:	60a3      	str	r3, [r4, #8]
100148d8:	61a5      	str	r5, [r4, #24]
100148da:	0018      	movs	r0, r3
100148dc:	e005      	b.n	100148ea <setvbuf+0x146>
100148de:	60a5      	str	r5, [r4, #8]
100148e0:	e003      	b.n	100148ea <setvbuf+0x146>
100148e2:	60a3      	str	r3, [r4, #8]
100148e4:	e001      	b.n	100148ea <setvbuf+0x146>
100148e6:	2001      	movs	r0, #1
100148e8:	4240      	negs	r0, r0
100148ea:	b005      	add	sp, #20
100148ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100148ee:	46c0      	nop			; (mov r8, r8)
100148f0:	10017628 	.word	0x10017628
100148f4:	100174c0 	.word	0x100174c0
100148f8:	100174e0 	.word	0x100174e0
100148fc:	10017500 	.word	0x10017500
10014900:	fffff35c 	.word	0xfffff35c

10014904 <__swbuf_r>:
10014904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014906:	0005      	movs	r5, r0
10014908:	000f      	movs	r7, r1
1001490a:	0014      	movs	r4, r2
1001490c:	2800      	cmp	r0, #0
1001490e:	d004      	beq.n	1001491a <__swbuf_r+0x16>
10014910:	6983      	ldr	r3, [r0, #24]
10014912:	2b00      	cmp	r3, #0
10014914:	d101      	bne.n	1001491a <__swbuf_r+0x16>
10014916:	f000 f9b7 	bl	10014c88 <__sinit>
1001491a:	4b23      	ldr	r3, [pc, #140]	; (100149a8 <__swbuf_r+0xa4>)
1001491c:	429c      	cmp	r4, r3
1001491e:	d101      	bne.n	10014924 <__swbuf_r+0x20>
10014920:	686c      	ldr	r4, [r5, #4]
10014922:	e008      	b.n	10014936 <__swbuf_r+0x32>
10014924:	4b21      	ldr	r3, [pc, #132]	; (100149ac <__swbuf_r+0xa8>)
10014926:	429c      	cmp	r4, r3
10014928:	d101      	bne.n	1001492e <__swbuf_r+0x2a>
1001492a:	68ac      	ldr	r4, [r5, #8]
1001492c:	e003      	b.n	10014936 <__swbuf_r+0x32>
1001492e:	4b20      	ldr	r3, [pc, #128]	; (100149b0 <__swbuf_r+0xac>)
10014930:	429c      	cmp	r4, r3
10014932:	d100      	bne.n	10014936 <__swbuf_r+0x32>
10014934:	68ec      	ldr	r4, [r5, #12]
10014936:	69a3      	ldr	r3, [r4, #24]
10014938:	60a3      	str	r3, [r4, #8]
1001493a:	89a3      	ldrh	r3, [r4, #12]
1001493c:	071b      	lsls	r3, r3, #28
1001493e:	d50a      	bpl.n	10014956 <__swbuf_r+0x52>
10014940:	6923      	ldr	r3, [r4, #16]
10014942:	2b00      	cmp	r3, #0
10014944:	d007      	beq.n	10014956 <__swbuf_r+0x52>
10014946:	6823      	ldr	r3, [r4, #0]
10014948:	6922      	ldr	r2, [r4, #16]
1001494a:	b2fe      	uxtb	r6, r7
1001494c:	1a98      	subs	r0, r3, r2
1001494e:	6963      	ldr	r3, [r4, #20]
10014950:	4298      	cmp	r0, r3
10014952:	db0f      	blt.n	10014974 <__swbuf_r+0x70>
10014954:	e008      	b.n	10014968 <__swbuf_r+0x64>
10014956:	0021      	movs	r1, r4
10014958:	0028      	movs	r0, r5
1001495a:	f000 f82b 	bl	100149b4 <__swsetup_r>
1001495e:	2800      	cmp	r0, #0
10014960:	d0f1      	beq.n	10014946 <__swbuf_r+0x42>
10014962:	2001      	movs	r0, #1
10014964:	4240      	negs	r0, r0
10014966:	e01d      	b.n	100149a4 <__swbuf_r+0xa0>
10014968:	0021      	movs	r1, r4
1001496a:	0028      	movs	r0, r5
1001496c:	f000 f91e 	bl	10014bac <_fflush_r>
10014970:	2800      	cmp	r0, #0
10014972:	d1f6      	bne.n	10014962 <__swbuf_r+0x5e>
10014974:	68a3      	ldr	r3, [r4, #8]
10014976:	3001      	adds	r0, #1
10014978:	3b01      	subs	r3, #1
1001497a:	60a3      	str	r3, [r4, #8]
1001497c:	6823      	ldr	r3, [r4, #0]
1001497e:	1c5a      	adds	r2, r3, #1
10014980:	6022      	str	r2, [r4, #0]
10014982:	701f      	strb	r7, [r3, #0]
10014984:	6963      	ldr	r3, [r4, #20]
10014986:	4298      	cmp	r0, r3
10014988:	d005      	beq.n	10014996 <__swbuf_r+0x92>
1001498a:	89a3      	ldrh	r3, [r4, #12]
1001498c:	0030      	movs	r0, r6
1001498e:	07db      	lsls	r3, r3, #31
10014990:	d508      	bpl.n	100149a4 <__swbuf_r+0xa0>
10014992:	2e0a      	cmp	r6, #10
10014994:	d106      	bne.n	100149a4 <__swbuf_r+0xa0>
10014996:	0021      	movs	r1, r4
10014998:	0028      	movs	r0, r5
1001499a:	f000 f907 	bl	10014bac <_fflush_r>
1001499e:	2800      	cmp	r0, #0
100149a0:	d1df      	bne.n	10014962 <__swbuf_r+0x5e>
100149a2:	0030      	movs	r0, r6
100149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100149a6:	46c0      	nop			; (mov r8, r8)
100149a8:	100174c0 	.word	0x100174c0
100149ac:	100174e0 	.word	0x100174e0
100149b0:	10017500 	.word	0x10017500

100149b4 <__swsetup_r>:
100149b4:	4b36      	ldr	r3, [pc, #216]	; (10014a90 <__swsetup_r+0xdc>)
100149b6:	b570      	push	{r4, r5, r6, lr}
100149b8:	681d      	ldr	r5, [r3, #0]
100149ba:	0006      	movs	r6, r0
100149bc:	000c      	movs	r4, r1
100149be:	2d00      	cmp	r5, #0
100149c0:	d005      	beq.n	100149ce <__swsetup_r+0x1a>
100149c2:	69ab      	ldr	r3, [r5, #24]
100149c4:	2b00      	cmp	r3, #0
100149c6:	d102      	bne.n	100149ce <__swsetup_r+0x1a>
100149c8:	0028      	movs	r0, r5
100149ca:	f000 f95d 	bl	10014c88 <__sinit>
100149ce:	4b31      	ldr	r3, [pc, #196]	; (10014a94 <__swsetup_r+0xe0>)
100149d0:	429c      	cmp	r4, r3
100149d2:	d101      	bne.n	100149d8 <__swsetup_r+0x24>
100149d4:	686c      	ldr	r4, [r5, #4]
100149d6:	e008      	b.n	100149ea <__swsetup_r+0x36>
100149d8:	4b2f      	ldr	r3, [pc, #188]	; (10014a98 <__swsetup_r+0xe4>)
100149da:	429c      	cmp	r4, r3
100149dc:	d101      	bne.n	100149e2 <__swsetup_r+0x2e>
100149de:	68ac      	ldr	r4, [r5, #8]
100149e0:	e003      	b.n	100149ea <__swsetup_r+0x36>
100149e2:	4b2e      	ldr	r3, [pc, #184]	; (10014a9c <__swsetup_r+0xe8>)
100149e4:	429c      	cmp	r4, r3
100149e6:	d100      	bne.n	100149ea <__swsetup_r+0x36>
100149e8:	68ec      	ldr	r4, [r5, #12]
100149ea:	220c      	movs	r2, #12
100149ec:	5ea3      	ldrsh	r3, [r4, r2]
100149ee:	b29a      	uxth	r2, r3
100149f0:	0711      	lsls	r1, r2, #28
100149f2:	d423      	bmi.n	10014a3c <__swsetup_r+0x88>
100149f4:	06d1      	lsls	r1, r2, #27
100149f6:	d407      	bmi.n	10014a08 <__swsetup_r+0x54>
100149f8:	2209      	movs	r2, #9
100149fa:	2001      	movs	r0, #1
100149fc:	6032      	str	r2, [r6, #0]
100149fe:	3237      	adds	r2, #55	; 0x37
10014a00:	4313      	orrs	r3, r2
10014a02:	81a3      	strh	r3, [r4, #12]
10014a04:	4240      	negs	r0, r0
10014a06:	e042      	b.n	10014a8e <__swsetup_r+0xda>
10014a08:	0753      	lsls	r3, r2, #29
10014a0a:	d513      	bpl.n	10014a34 <__swsetup_r+0x80>
10014a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014a0e:	2900      	cmp	r1, #0
10014a10:	d008      	beq.n	10014a24 <__swsetup_r+0x70>
10014a12:	0023      	movs	r3, r4
10014a14:	3344      	adds	r3, #68	; 0x44
10014a16:	4299      	cmp	r1, r3
10014a18:	d002      	beq.n	10014a20 <__swsetup_r+0x6c>
10014a1a:	0030      	movs	r0, r6
10014a1c:	f7ff fd34 	bl	10014488 <_free_r>
10014a20:	2300      	movs	r3, #0
10014a22:	6363      	str	r3, [r4, #52]	; 0x34
10014a24:	2224      	movs	r2, #36	; 0x24
10014a26:	89a3      	ldrh	r3, [r4, #12]
10014a28:	4393      	bics	r3, r2
10014a2a:	81a3      	strh	r3, [r4, #12]
10014a2c:	2300      	movs	r3, #0
10014a2e:	6063      	str	r3, [r4, #4]
10014a30:	6923      	ldr	r3, [r4, #16]
10014a32:	6023      	str	r3, [r4, #0]
10014a34:	2208      	movs	r2, #8
10014a36:	89a3      	ldrh	r3, [r4, #12]
10014a38:	4313      	orrs	r3, r2
10014a3a:	81a3      	strh	r3, [r4, #12]
10014a3c:	6923      	ldr	r3, [r4, #16]
10014a3e:	2b00      	cmp	r3, #0
10014a40:	d10b      	bne.n	10014a5a <__swsetup_r+0xa6>
10014a42:	23a0      	movs	r3, #160	; 0xa0
10014a44:	89a2      	ldrh	r2, [r4, #12]
10014a46:	009b      	lsls	r3, r3, #2
10014a48:	4013      	ands	r3, r2
10014a4a:	2280      	movs	r2, #128	; 0x80
10014a4c:	0092      	lsls	r2, r2, #2
10014a4e:	4293      	cmp	r3, r2
10014a50:	d003      	beq.n	10014a5a <__swsetup_r+0xa6>
10014a52:	0021      	movs	r1, r4
10014a54:	0030      	movs	r0, r6
10014a56:	f000 f9d1 	bl	10014dfc <__smakebuf_r>
10014a5a:	2301      	movs	r3, #1
10014a5c:	89a2      	ldrh	r2, [r4, #12]
10014a5e:	4013      	ands	r3, r2
10014a60:	d005      	beq.n	10014a6e <__swsetup_r+0xba>
10014a62:	2300      	movs	r3, #0
10014a64:	60a3      	str	r3, [r4, #8]
10014a66:	6963      	ldr	r3, [r4, #20]
10014a68:	425b      	negs	r3, r3
10014a6a:	61a3      	str	r3, [r4, #24]
10014a6c:	e003      	b.n	10014a76 <__swsetup_r+0xc2>
10014a6e:	0792      	lsls	r2, r2, #30
10014a70:	d400      	bmi.n	10014a74 <__swsetup_r+0xc0>
10014a72:	6963      	ldr	r3, [r4, #20]
10014a74:	60a3      	str	r3, [r4, #8]
10014a76:	2000      	movs	r0, #0
10014a78:	6923      	ldr	r3, [r4, #16]
10014a7a:	4283      	cmp	r3, r0
10014a7c:	d107      	bne.n	10014a8e <__swsetup_r+0xda>
10014a7e:	220c      	movs	r2, #12
10014a80:	5ea3      	ldrsh	r3, [r4, r2]
10014a82:	061a      	lsls	r2, r3, #24
10014a84:	d503      	bpl.n	10014a8e <__swsetup_r+0xda>
10014a86:	2240      	movs	r2, #64	; 0x40
10014a88:	4313      	orrs	r3, r2
10014a8a:	81a3      	strh	r3, [r4, #12]
10014a8c:	3801      	subs	r0, #1
10014a8e:	bd70      	pop	{r4, r5, r6, pc}
10014a90:	10017628 	.word	0x10017628
10014a94:	100174c0 	.word	0x100174c0
10014a98:	100174e0 	.word	0x100174e0
10014a9c:	10017500 	.word	0x10017500

10014aa0 <__sflush_r>:
10014aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014aa2:	898a      	ldrh	r2, [r1, #12]
10014aa4:	0005      	movs	r5, r0
10014aa6:	000c      	movs	r4, r1
10014aa8:	0713      	lsls	r3, r2, #28
10014aaa:	d45a      	bmi.n	10014b62 <__sflush_r+0xc2>
10014aac:	684b      	ldr	r3, [r1, #4]
10014aae:	2b00      	cmp	r3, #0
10014ab0:	dc02      	bgt.n	10014ab8 <__sflush_r+0x18>
10014ab2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10014ab4:	2b00      	cmp	r3, #0
10014ab6:	dd19      	ble.n	10014aec <__sflush_r+0x4c>
10014ab8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014aba:	2f00      	cmp	r7, #0
10014abc:	d016      	beq.n	10014aec <__sflush_r+0x4c>
10014abe:	2300      	movs	r3, #0
10014ac0:	682e      	ldr	r6, [r5, #0]
10014ac2:	602b      	str	r3, [r5, #0]
10014ac4:	2380      	movs	r3, #128	; 0x80
10014ac6:	015b      	lsls	r3, r3, #5
10014ac8:	401a      	ands	r2, r3
10014aca:	d001      	beq.n	10014ad0 <__sflush_r+0x30>
10014acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
10014ace:	e014      	b.n	10014afa <__sflush_r+0x5a>
10014ad0:	2301      	movs	r3, #1
10014ad2:	6a21      	ldr	r1, [r4, #32]
10014ad4:	0028      	movs	r0, r5
10014ad6:	47b8      	blx	r7
10014ad8:	1c43      	adds	r3, r0, #1
10014ada:	d10e      	bne.n	10014afa <__sflush_r+0x5a>
10014adc:	682b      	ldr	r3, [r5, #0]
10014ade:	2b00      	cmp	r3, #0
10014ae0:	d00b      	beq.n	10014afa <__sflush_r+0x5a>
10014ae2:	2b1d      	cmp	r3, #29
10014ae4:	d001      	beq.n	10014aea <__sflush_r+0x4a>
10014ae6:	2b16      	cmp	r3, #22
10014ae8:	d102      	bne.n	10014af0 <__sflush_r+0x50>
10014aea:	602e      	str	r6, [r5, #0]
10014aec:	2000      	movs	r0, #0
10014aee:	e05a      	b.n	10014ba6 <__sflush_r+0x106>
10014af0:	2240      	movs	r2, #64	; 0x40
10014af2:	89a3      	ldrh	r3, [r4, #12]
10014af4:	4313      	orrs	r3, r2
10014af6:	81a3      	strh	r3, [r4, #12]
10014af8:	e055      	b.n	10014ba6 <__sflush_r+0x106>
10014afa:	89a3      	ldrh	r3, [r4, #12]
10014afc:	075b      	lsls	r3, r3, #29
10014afe:	d506      	bpl.n	10014b0e <__sflush_r+0x6e>
10014b00:	6863      	ldr	r3, [r4, #4]
10014b02:	1ac0      	subs	r0, r0, r3
10014b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
10014b06:	2b00      	cmp	r3, #0
10014b08:	d001      	beq.n	10014b0e <__sflush_r+0x6e>
10014b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10014b0c:	1ac0      	subs	r0, r0, r3
10014b0e:	2300      	movs	r3, #0
10014b10:	0002      	movs	r2, r0
10014b12:	6a21      	ldr	r1, [r4, #32]
10014b14:	0028      	movs	r0, r5
10014b16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014b18:	47b8      	blx	r7
10014b1a:	89a3      	ldrh	r3, [r4, #12]
10014b1c:	1c42      	adds	r2, r0, #1
10014b1e:	d106      	bne.n	10014b2e <__sflush_r+0x8e>
10014b20:	6829      	ldr	r1, [r5, #0]
10014b22:	291d      	cmp	r1, #29
10014b24:	d83a      	bhi.n	10014b9c <__sflush_r+0xfc>
10014b26:	4a20      	ldr	r2, [pc, #128]	; (10014ba8 <__sflush_r+0x108>)
10014b28:	40ca      	lsrs	r2, r1
10014b2a:	07d2      	lsls	r2, r2, #31
10014b2c:	d536      	bpl.n	10014b9c <__sflush_r+0xfc>
10014b2e:	2200      	movs	r2, #0
10014b30:	6062      	str	r2, [r4, #4]
10014b32:	6922      	ldr	r2, [r4, #16]
10014b34:	6022      	str	r2, [r4, #0]
10014b36:	04db      	lsls	r3, r3, #19
10014b38:	d505      	bpl.n	10014b46 <__sflush_r+0xa6>
10014b3a:	1c43      	adds	r3, r0, #1
10014b3c:	d102      	bne.n	10014b44 <__sflush_r+0xa4>
10014b3e:	682b      	ldr	r3, [r5, #0]
10014b40:	2b00      	cmp	r3, #0
10014b42:	d100      	bne.n	10014b46 <__sflush_r+0xa6>
10014b44:	6560      	str	r0, [r4, #84]	; 0x54
10014b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014b48:	602e      	str	r6, [r5, #0]
10014b4a:	2900      	cmp	r1, #0
10014b4c:	d0ce      	beq.n	10014aec <__sflush_r+0x4c>
10014b4e:	0023      	movs	r3, r4
10014b50:	3344      	adds	r3, #68	; 0x44
10014b52:	4299      	cmp	r1, r3
10014b54:	d002      	beq.n	10014b5c <__sflush_r+0xbc>
10014b56:	0028      	movs	r0, r5
10014b58:	f7ff fc96 	bl	10014488 <_free_r>
10014b5c:	2000      	movs	r0, #0
10014b5e:	6360      	str	r0, [r4, #52]	; 0x34
10014b60:	e021      	b.n	10014ba6 <__sflush_r+0x106>
10014b62:	690f      	ldr	r7, [r1, #16]
10014b64:	2f00      	cmp	r7, #0
10014b66:	d0c1      	beq.n	10014aec <__sflush_r+0x4c>
10014b68:	680b      	ldr	r3, [r1, #0]
10014b6a:	600f      	str	r7, [r1, #0]
10014b6c:	1bdb      	subs	r3, r3, r7
10014b6e:	9301      	str	r3, [sp, #4]
10014b70:	2300      	movs	r3, #0
10014b72:	0792      	lsls	r2, r2, #30
10014b74:	d100      	bne.n	10014b78 <__sflush_r+0xd8>
10014b76:	694b      	ldr	r3, [r1, #20]
10014b78:	60a3      	str	r3, [r4, #8]
10014b7a:	e003      	b.n	10014b84 <__sflush_r+0xe4>
10014b7c:	9b01      	ldr	r3, [sp, #4]
10014b7e:	183f      	adds	r7, r7, r0
10014b80:	1a1b      	subs	r3, r3, r0
10014b82:	9301      	str	r3, [sp, #4]
10014b84:	9b01      	ldr	r3, [sp, #4]
10014b86:	2b00      	cmp	r3, #0
10014b88:	ddb0      	ble.n	10014aec <__sflush_r+0x4c>
10014b8a:	9b01      	ldr	r3, [sp, #4]
10014b8c:	003a      	movs	r2, r7
10014b8e:	6a21      	ldr	r1, [r4, #32]
10014b90:	0028      	movs	r0, r5
10014b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10014b94:	47b0      	blx	r6
10014b96:	2800      	cmp	r0, #0
10014b98:	dcf0      	bgt.n	10014b7c <__sflush_r+0xdc>
10014b9a:	89a3      	ldrh	r3, [r4, #12]
10014b9c:	2240      	movs	r2, #64	; 0x40
10014b9e:	2001      	movs	r0, #1
10014ba0:	4313      	orrs	r3, r2
10014ba2:	81a3      	strh	r3, [r4, #12]
10014ba4:	4240      	negs	r0, r0
10014ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014ba8:	20400001 	.word	0x20400001

10014bac <_fflush_r>:
10014bac:	690b      	ldr	r3, [r1, #16]
10014bae:	b570      	push	{r4, r5, r6, lr}
10014bb0:	0005      	movs	r5, r0
10014bb2:	000c      	movs	r4, r1
10014bb4:	2b00      	cmp	r3, #0
10014bb6:	d101      	bne.n	10014bbc <_fflush_r+0x10>
10014bb8:	2000      	movs	r0, #0
10014bba:	e01c      	b.n	10014bf6 <_fflush_r+0x4a>
10014bbc:	2800      	cmp	r0, #0
10014bbe:	d004      	beq.n	10014bca <_fflush_r+0x1e>
10014bc0:	6983      	ldr	r3, [r0, #24]
10014bc2:	2b00      	cmp	r3, #0
10014bc4:	d101      	bne.n	10014bca <_fflush_r+0x1e>
10014bc6:	f000 f85f 	bl	10014c88 <__sinit>
10014bca:	4b0b      	ldr	r3, [pc, #44]	; (10014bf8 <_fflush_r+0x4c>)
10014bcc:	429c      	cmp	r4, r3
10014bce:	d101      	bne.n	10014bd4 <_fflush_r+0x28>
10014bd0:	686c      	ldr	r4, [r5, #4]
10014bd2:	e008      	b.n	10014be6 <_fflush_r+0x3a>
10014bd4:	4b09      	ldr	r3, [pc, #36]	; (10014bfc <_fflush_r+0x50>)
10014bd6:	429c      	cmp	r4, r3
10014bd8:	d101      	bne.n	10014bde <_fflush_r+0x32>
10014bda:	68ac      	ldr	r4, [r5, #8]
10014bdc:	e003      	b.n	10014be6 <_fflush_r+0x3a>
10014bde:	4b08      	ldr	r3, [pc, #32]	; (10014c00 <_fflush_r+0x54>)
10014be0:	429c      	cmp	r4, r3
10014be2:	d100      	bne.n	10014be6 <_fflush_r+0x3a>
10014be4:	68ec      	ldr	r4, [r5, #12]
10014be6:	220c      	movs	r2, #12
10014be8:	5ea3      	ldrsh	r3, [r4, r2]
10014bea:	2b00      	cmp	r3, #0
10014bec:	d0e4      	beq.n	10014bb8 <_fflush_r+0xc>
10014bee:	0021      	movs	r1, r4
10014bf0:	0028      	movs	r0, r5
10014bf2:	f7ff ff55 	bl	10014aa0 <__sflush_r>
10014bf6:	bd70      	pop	{r4, r5, r6, pc}
10014bf8:	100174c0 	.word	0x100174c0
10014bfc:	100174e0 	.word	0x100174e0
10014c00:	10017500 	.word	0x10017500

10014c04 <_cleanup_r>:
10014c04:	b510      	push	{r4, lr}
10014c06:	4902      	ldr	r1, [pc, #8]	; (10014c10 <_cleanup_r+0xc>)
10014c08:	f000 f8b0 	bl	10014d6c <_fwalk_reent>
10014c0c:	bd10      	pop	{r4, pc}
10014c0e:	46c0      	nop			; (mov r8, r8)
10014c10:	10014bad 	.word	0x10014bad

10014c14 <std.isra.0>:
10014c14:	2300      	movs	r3, #0
10014c16:	b510      	push	{r4, lr}
10014c18:	0004      	movs	r4, r0
10014c1a:	6003      	str	r3, [r0, #0]
10014c1c:	6043      	str	r3, [r0, #4]
10014c1e:	6083      	str	r3, [r0, #8]
10014c20:	8181      	strh	r1, [r0, #12]
10014c22:	6643      	str	r3, [r0, #100]	; 0x64
10014c24:	81c2      	strh	r2, [r0, #14]
10014c26:	6103      	str	r3, [r0, #16]
10014c28:	6143      	str	r3, [r0, #20]
10014c2a:	6183      	str	r3, [r0, #24]
10014c2c:	0019      	movs	r1, r3
10014c2e:	2208      	movs	r2, #8
10014c30:	305c      	adds	r0, #92	; 0x5c
10014c32:	f7ff fc20 	bl	10014476 <memset>
10014c36:	4b05      	ldr	r3, [pc, #20]	; (10014c4c <std.isra.0+0x38>)
10014c38:	6224      	str	r4, [r4, #32]
10014c3a:	6263      	str	r3, [r4, #36]	; 0x24
10014c3c:	4b04      	ldr	r3, [pc, #16]	; (10014c50 <std.isra.0+0x3c>)
10014c3e:	62a3      	str	r3, [r4, #40]	; 0x28
10014c40:	4b04      	ldr	r3, [pc, #16]	; (10014c54 <std.isra.0+0x40>)
10014c42:	62e3      	str	r3, [r4, #44]	; 0x2c
10014c44:	4b04      	ldr	r3, [pc, #16]	; (10014c58 <std.isra.0+0x44>)
10014c46:	6323      	str	r3, [r4, #48]	; 0x30
10014c48:	bd10      	pop	{r4, pc}
10014c4a:	46c0      	nop			; (mov r8, r8)
10014c4c:	1001548d 	.word	0x1001548d
10014c50:	100154b5 	.word	0x100154b5
10014c54:	100154ed 	.word	0x100154ed
10014c58:	10015519 	.word	0x10015519

10014c5c <__sfmoreglue>:
10014c5c:	b570      	push	{r4, r5, r6, lr}
10014c5e:	2568      	movs	r5, #104	; 0x68
10014c60:	1e4b      	subs	r3, r1, #1
10014c62:	435d      	muls	r5, r3
10014c64:	000e      	movs	r6, r1
10014c66:	0029      	movs	r1, r5
10014c68:	3174      	adds	r1, #116	; 0x74
10014c6a:	f7ff fc53 	bl	10014514 <_malloc_r>
10014c6e:	1e04      	subs	r4, r0, #0
10014c70:	d008      	beq.n	10014c84 <__sfmoreglue+0x28>
10014c72:	2100      	movs	r1, #0
10014c74:	002a      	movs	r2, r5
10014c76:	6001      	str	r1, [r0, #0]
10014c78:	6046      	str	r6, [r0, #4]
10014c7a:	300c      	adds	r0, #12
10014c7c:	60a0      	str	r0, [r4, #8]
10014c7e:	3268      	adds	r2, #104	; 0x68
10014c80:	f7ff fbf9 	bl	10014476 <memset>
10014c84:	0020      	movs	r0, r4
10014c86:	bd70      	pop	{r4, r5, r6, pc}

10014c88 <__sinit>:
10014c88:	6983      	ldr	r3, [r0, #24]
10014c8a:	b513      	push	{r0, r1, r4, lr}
10014c8c:	0004      	movs	r4, r0
10014c8e:	2b00      	cmp	r3, #0
10014c90:	d128      	bne.n	10014ce4 <__sinit+0x5c>
10014c92:	6483      	str	r3, [r0, #72]	; 0x48
10014c94:	64c3      	str	r3, [r0, #76]	; 0x4c
10014c96:	6503      	str	r3, [r0, #80]	; 0x50
10014c98:	4b13      	ldr	r3, [pc, #76]	; (10014ce8 <__sinit+0x60>)
10014c9a:	4a14      	ldr	r2, [pc, #80]	; (10014cec <__sinit+0x64>)
10014c9c:	681b      	ldr	r3, [r3, #0]
10014c9e:	6282      	str	r2, [r0, #40]	; 0x28
10014ca0:	9301      	str	r3, [sp, #4]
10014ca2:	4298      	cmp	r0, r3
10014ca4:	d101      	bne.n	10014caa <__sinit+0x22>
10014ca6:	2301      	movs	r3, #1
10014ca8:	6183      	str	r3, [r0, #24]
10014caa:	0020      	movs	r0, r4
10014cac:	f000 f820 	bl	10014cf0 <__sfp>
10014cb0:	6060      	str	r0, [r4, #4]
10014cb2:	0020      	movs	r0, r4
10014cb4:	f000 f81c 	bl	10014cf0 <__sfp>
10014cb8:	60a0      	str	r0, [r4, #8]
10014cba:	0020      	movs	r0, r4
10014cbc:	f000 f818 	bl	10014cf0 <__sfp>
10014cc0:	2200      	movs	r2, #0
10014cc2:	60e0      	str	r0, [r4, #12]
10014cc4:	2104      	movs	r1, #4
10014cc6:	6860      	ldr	r0, [r4, #4]
10014cc8:	f7ff ffa4 	bl	10014c14 <std.isra.0>
10014ccc:	2201      	movs	r2, #1
10014cce:	2109      	movs	r1, #9
10014cd0:	68a0      	ldr	r0, [r4, #8]
10014cd2:	f7ff ff9f 	bl	10014c14 <std.isra.0>
10014cd6:	2202      	movs	r2, #2
10014cd8:	2112      	movs	r1, #18
10014cda:	68e0      	ldr	r0, [r4, #12]
10014cdc:	f7ff ff9a 	bl	10014c14 <std.isra.0>
10014ce0:	2301      	movs	r3, #1
10014ce2:	61a3      	str	r3, [r4, #24]
10014ce4:	bd13      	pop	{r0, r1, r4, pc}
10014ce6:	46c0      	nop			; (mov r8, r8)
10014ce8:	100174bc 	.word	0x100174bc
10014cec:	10014c05 	.word	0x10014c05

10014cf0 <__sfp>:
10014cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014cf2:	4b1d      	ldr	r3, [pc, #116]	; (10014d68 <__sfp+0x78>)
10014cf4:	0006      	movs	r6, r0
10014cf6:	681d      	ldr	r5, [r3, #0]
10014cf8:	69ab      	ldr	r3, [r5, #24]
10014cfa:	2b00      	cmp	r3, #0
10014cfc:	d102      	bne.n	10014d04 <__sfp+0x14>
10014cfe:	0028      	movs	r0, r5
10014d00:	f7ff ffc2 	bl	10014c88 <__sinit>
10014d04:	3548      	adds	r5, #72	; 0x48
10014d06:	68ac      	ldr	r4, [r5, #8]
10014d08:	686b      	ldr	r3, [r5, #4]
10014d0a:	3b01      	subs	r3, #1
10014d0c:	d405      	bmi.n	10014d1a <__sfp+0x2a>
10014d0e:	220c      	movs	r2, #12
10014d10:	5ea7      	ldrsh	r7, [r4, r2]
10014d12:	2f00      	cmp	r7, #0
10014d14:	d010      	beq.n	10014d38 <__sfp+0x48>
10014d16:	3468      	adds	r4, #104	; 0x68
10014d18:	e7f7      	b.n	10014d0a <__sfp+0x1a>
10014d1a:	682b      	ldr	r3, [r5, #0]
10014d1c:	2b00      	cmp	r3, #0
10014d1e:	d001      	beq.n	10014d24 <__sfp+0x34>
10014d20:	682d      	ldr	r5, [r5, #0]
10014d22:	e7f0      	b.n	10014d06 <__sfp+0x16>
10014d24:	2104      	movs	r1, #4
10014d26:	0030      	movs	r0, r6
10014d28:	f7ff ff98 	bl	10014c5c <__sfmoreglue>
10014d2c:	6028      	str	r0, [r5, #0]
10014d2e:	2800      	cmp	r0, #0
10014d30:	d1f6      	bne.n	10014d20 <__sfp+0x30>
10014d32:	230c      	movs	r3, #12
10014d34:	6033      	str	r3, [r6, #0]
10014d36:	e016      	b.n	10014d66 <__sfp+0x76>
10014d38:	2301      	movs	r3, #1
10014d3a:	0020      	movs	r0, r4
10014d3c:	425b      	negs	r3, r3
10014d3e:	81e3      	strh	r3, [r4, #14]
10014d40:	3302      	adds	r3, #2
10014d42:	81a3      	strh	r3, [r4, #12]
10014d44:	6667      	str	r7, [r4, #100]	; 0x64
10014d46:	6027      	str	r7, [r4, #0]
10014d48:	60a7      	str	r7, [r4, #8]
10014d4a:	6067      	str	r7, [r4, #4]
10014d4c:	6127      	str	r7, [r4, #16]
10014d4e:	6167      	str	r7, [r4, #20]
10014d50:	61a7      	str	r7, [r4, #24]
10014d52:	305c      	adds	r0, #92	; 0x5c
10014d54:	2208      	movs	r2, #8
10014d56:	0039      	movs	r1, r7
10014d58:	f7ff fb8d 	bl	10014476 <memset>
10014d5c:	0020      	movs	r0, r4
10014d5e:	6367      	str	r7, [r4, #52]	; 0x34
10014d60:	63a7      	str	r7, [r4, #56]	; 0x38
10014d62:	64a7      	str	r7, [r4, #72]	; 0x48
10014d64:	64e7      	str	r7, [r4, #76]	; 0x4c
10014d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014d68:	100174bc 	.word	0x100174bc

10014d6c <_fwalk_reent>:
10014d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014d6e:	0004      	movs	r4, r0
10014d70:	0007      	movs	r7, r0
10014d72:	2600      	movs	r6, #0
10014d74:	9101      	str	r1, [sp, #4]
10014d76:	3448      	adds	r4, #72	; 0x48
10014d78:	2c00      	cmp	r4, #0
10014d7a:	d016      	beq.n	10014daa <_fwalk_reent+0x3e>
10014d7c:	6863      	ldr	r3, [r4, #4]
10014d7e:	68a5      	ldr	r5, [r4, #8]
10014d80:	9300      	str	r3, [sp, #0]
10014d82:	9b00      	ldr	r3, [sp, #0]
10014d84:	3b01      	subs	r3, #1
10014d86:	9300      	str	r3, [sp, #0]
10014d88:	d40d      	bmi.n	10014da6 <_fwalk_reent+0x3a>
10014d8a:	89ab      	ldrh	r3, [r5, #12]
10014d8c:	2b01      	cmp	r3, #1
10014d8e:	d908      	bls.n	10014da2 <_fwalk_reent+0x36>
10014d90:	220e      	movs	r2, #14
10014d92:	5eab      	ldrsh	r3, [r5, r2]
10014d94:	3301      	adds	r3, #1
10014d96:	d004      	beq.n	10014da2 <_fwalk_reent+0x36>
10014d98:	0029      	movs	r1, r5
10014d9a:	0038      	movs	r0, r7
10014d9c:	9b01      	ldr	r3, [sp, #4]
10014d9e:	4798      	blx	r3
10014da0:	4306      	orrs	r6, r0
10014da2:	3568      	adds	r5, #104	; 0x68
10014da4:	e7ed      	b.n	10014d82 <_fwalk_reent+0x16>
10014da6:	6824      	ldr	r4, [r4, #0]
10014da8:	e7e6      	b.n	10014d78 <_fwalk_reent+0xc>
10014daa:	0030      	movs	r0, r6
10014dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10014db0 <__swhatbuf_r>:
10014db0:	b570      	push	{r4, r5, r6, lr}
10014db2:	000e      	movs	r6, r1
10014db4:	001d      	movs	r5, r3
10014db6:	230e      	movs	r3, #14
10014db8:	5ec9      	ldrsh	r1, [r1, r3]
10014dba:	b090      	sub	sp, #64	; 0x40
10014dbc:	0014      	movs	r4, r2
10014dbe:	2900      	cmp	r1, #0
10014dc0:	da06      	bge.n	10014dd0 <__swhatbuf_r+0x20>
10014dc2:	2300      	movs	r3, #0
10014dc4:	602b      	str	r3, [r5, #0]
10014dc6:	89b3      	ldrh	r3, [r6, #12]
10014dc8:	061b      	lsls	r3, r3, #24
10014dca:	d50f      	bpl.n	10014dec <__swhatbuf_r+0x3c>
10014dcc:	2340      	movs	r3, #64	; 0x40
10014dce:	e00f      	b.n	10014df0 <__swhatbuf_r+0x40>
10014dd0:	aa01      	add	r2, sp, #4
10014dd2:	f000 fbcd 	bl	10015570 <_fstat_r>
10014dd6:	2800      	cmp	r0, #0
10014dd8:	dbf3      	blt.n	10014dc2 <__swhatbuf_r+0x12>
10014dda:	23f0      	movs	r3, #240	; 0xf0
10014ddc:	9a02      	ldr	r2, [sp, #8]
10014dde:	021b      	lsls	r3, r3, #8
10014de0:	4013      	ands	r3, r2
10014de2:	4a05      	ldr	r2, [pc, #20]	; (10014df8 <__swhatbuf_r+0x48>)
10014de4:	189b      	adds	r3, r3, r2
10014de6:	425a      	negs	r2, r3
10014de8:	4153      	adcs	r3, r2
10014dea:	602b      	str	r3, [r5, #0]
10014dec:	2380      	movs	r3, #128	; 0x80
10014dee:	00db      	lsls	r3, r3, #3
10014df0:	2000      	movs	r0, #0
10014df2:	6023      	str	r3, [r4, #0]
10014df4:	b010      	add	sp, #64	; 0x40
10014df6:	bd70      	pop	{r4, r5, r6, pc}
10014df8:	ffffe000 	.word	0xffffe000

10014dfc <__smakebuf_r>:
10014dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014dfe:	2602      	movs	r6, #2
10014e00:	898b      	ldrh	r3, [r1, #12]
10014e02:	0005      	movs	r5, r0
10014e04:	000c      	movs	r4, r1
10014e06:	4233      	tst	r3, r6
10014e08:	d110      	bne.n	10014e2c <__smakebuf_r+0x30>
10014e0a:	ab01      	add	r3, sp, #4
10014e0c:	466a      	mov	r2, sp
10014e0e:	f7ff ffcf 	bl	10014db0 <__swhatbuf_r>
10014e12:	9900      	ldr	r1, [sp, #0]
10014e14:	0007      	movs	r7, r0
10014e16:	0028      	movs	r0, r5
10014e18:	f7ff fb7c 	bl	10014514 <_malloc_r>
10014e1c:	2800      	cmp	r0, #0
10014e1e:	d10c      	bne.n	10014e3a <__smakebuf_r+0x3e>
10014e20:	220c      	movs	r2, #12
10014e22:	5ea3      	ldrsh	r3, [r4, r2]
10014e24:	059a      	lsls	r2, r3, #22
10014e26:	d423      	bmi.n	10014e70 <__smakebuf_r+0x74>
10014e28:	4333      	orrs	r3, r6
10014e2a:	81a3      	strh	r3, [r4, #12]
10014e2c:	0023      	movs	r3, r4
10014e2e:	3347      	adds	r3, #71	; 0x47
10014e30:	6023      	str	r3, [r4, #0]
10014e32:	6123      	str	r3, [r4, #16]
10014e34:	2301      	movs	r3, #1
10014e36:	6163      	str	r3, [r4, #20]
10014e38:	e01a      	b.n	10014e70 <__smakebuf_r+0x74>
10014e3a:	2280      	movs	r2, #128	; 0x80
10014e3c:	4b0d      	ldr	r3, [pc, #52]	; (10014e74 <__smakebuf_r+0x78>)
10014e3e:	62ab      	str	r3, [r5, #40]	; 0x28
10014e40:	89a3      	ldrh	r3, [r4, #12]
10014e42:	6020      	str	r0, [r4, #0]
10014e44:	4313      	orrs	r3, r2
10014e46:	81a3      	strh	r3, [r4, #12]
10014e48:	9b00      	ldr	r3, [sp, #0]
10014e4a:	6120      	str	r0, [r4, #16]
10014e4c:	6163      	str	r3, [r4, #20]
10014e4e:	9b01      	ldr	r3, [sp, #4]
10014e50:	2b00      	cmp	r3, #0
10014e52:	d00a      	beq.n	10014e6a <__smakebuf_r+0x6e>
10014e54:	230e      	movs	r3, #14
10014e56:	5ee1      	ldrsh	r1, [r4, r3]
10014e58:	0028      	movs	r0, r5
10014e5a:	f000 fb9b 	bl	10015594 <_isatty_r>
10014e5e:	2800      	cmp	r0, #0
10014e60:	d003      	beq.n	10014e6a <__smakebuf_r+0x6e>
10014e62:	2201      	movs	r2, #1
10014e64:	89a3      	ldrh	r3, [r4, #12]
10014e66:	4313      	orrs	r3, r2
10014e68:	81a3      	strh	r3, [r4, #12]
10014e6a:	89a3      	ldrh	r3, [r4, #12]
10014e6c:	431f      	orrs	r7, r3
10014e6e:	81a7      	strh	r7, [r4, #12]
10014e70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10014e72:	46c0      	nop			; (mov r8, r8)
10014e74:	10014c05 	.word	0x10014c05

10014e78 <__sfputc_r>:
10014e78:	6893      	ldr	r3, [r2, #8]
10014e7a:	b510      	push	{r4, lr}
10014e7c:	3b01      	subs	r3, #1
10014e7e:	6093      	str	r3, [r2, #8]
10014e80:	2b00      	cmp	r3, #0
10014e82:	da05      	bge.n	10014e90 <__sfputc_r+0x18>
10014e84:	6994      	ldr	r4, [r2, #24]
10014e86:	42a3      	cmp	r3, r4
10014e88:	db08      	blt.n	10014e9c <__sfputc_r+0x24>
10014e8a:	b2cb      	uxtb	r3, r1
10014e8c:	2b0a      	cmp	r3, #10
10014e8e:	d005      	beq.n	10014e9c <__sfputc_r+0x24>
10014e90:	6813      	ldr	r3, [r2, #0]
10014e92:	1c58      	adds	r0, r3, #1
10014e94:	6010      	str	r0, [r2, #0]
10014e96:	7019      	strb	r1, [r3, #0]
10014e98:	b2c8      	uxtb	r0, r1
10014e9a:	e001      	b.n	10014ea0 <__sfputc_r+0x28>
10014e9c:	f7ff fd32 	bl	10014904 <__swbuf_r>
10014ea0:	bd10      	pop	{r4, pc}

10014ea2 <__sfputs_r>:
10014ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014ea4:	0006      	movs	r6, r0
10014ea6:	000f      	movs	r7, r1
10014ea8:	0014      	movs	r4, r2
10014eaa:	18d5      	adds	r5, r2, r3
10014eac:	42ac      	cmp	r4, r5
10014eae:	d008      	beq.n	10014ec2 <__sfputs_r+0x20>
10014eb0:	7821      	ldrb	r1, [r4, #0]
10014eb2:	003a      	movs	r2, r7
10014eb4:	0030      	movs	r0, r6
10014eb6:	f7ff ffdf 	bl	10014e78 <__sfputc_r>
10014eba:	3401      	adds	r4, #1
10014ebc:	1c43      	adds	r3, r0, #1
10014ebe:	d1f5      	bne.n	10014eac <__sfputs_r+0xa>
10014ec0:	e000      	b.n	10014ec4 <__sfputs_r+0x22>
10014ec2:	2000      	movs	r0, #0
10014ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10014ec8 <_vfiprintf_r>:
10014ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
10014eca:	b09f      	sub	sp, #124	; 0x7c
10014ecc:	0006      	movs	r6, r0
10014ece:	000f      	movs	r7, r1
10014ed0:	9202      	str	r2, [sp, #8]
10014ed2:	9305      	str	r3, [sp, #20]
10014ed4:	2800      	cmp	r0, #0
10014ed6:	d004      	beq.n	10014ee2 <_vfiprintf_r+0x1a>
10014ed8:	6983      	ldr	r3, [r0, #24]
10014eda:	2b00      	cmp	r3, #0
10014edc:	d101      	bne.n	10014ee2 <_vfiprintf_r+0x1a>
10014ede:	f7ff fed3 	bl	10014c88 <__sinit>
10014ee2:	4b7f      	ldr	r3, [pc, #508]	; (100150e0 <_vfiprintf_r+0x218>)
10014ee4:	429f      	cmp	r7, r3
10014ee6:	d101      	bne.n	10014eec <_vfiprintf_r+0x24>
10014ee8:	6877      	ldr	r7, [r6, #4]
10014eea:	e008      	b.n	10014efe <_vfiprintf_r+0x36>
10014eec:	4b7d      	ldr	r3, [pc, #500]	; (100150e4 <_vfiprintf_r+0x21c>)
10014eee:	429f      	cmp	r7, r3
10014ef0:	d101      	bne.n	10014ef6 <_vfiprintf_r+0x2e>
10014ef2:	68b7      	ldr	r7, [r6, #8]
10014ef4:	e003      	b.n	10014efe <_vfiprintf_r+0x36>
10014ef6:	4b7c      	ldr	r3, [pc, #496]	; (100150e8 <_vfiprintf_r+0x220>)
10014ef8:	429f      	cmp	r7, r3
10014efa:	d100      	bne.n	10014efe <_vfiprintf_r+0x36>
10014efc:	68f7      	ldr	r7, [r6, #12]
10014efe:	89bb      	ldrh	r3, [r7, #12]
10014f00:	071b      	lsls	r3, r3, #28
10014f02:	d50a      	bpl.n	10014f1a <_vfiprintf_r+0x52>
10014f04:	693b      	ldr	r3, [r7, #16]
10014f06:	2b00      	cmp	r3, #0
10014f08:	d007      	beq.n	10014f1a <_vfiprintf_r+0x52>
10014f0a:	2300      	movs	r3, #0
10014f0c:	ad06      	add	r5, sp, #24
10014f0e:	616b      	str	r3, [r5, #20]
10014f10:	3320      	adds	r3, #32
10014f12:	766b      	strb	r3, [r5, #25]
10014f14:	3310      	adds	r3, #16
10014f16:	76ab      	strb	r3, [r5, #26]
10014f18:	e03d      	b.n	10014f96 <_vfiprintf_r+0xce>
10014f1a:	0039      	movs	r1, r7
10014f1c:	0030      	movs	r0, r6
10014f1e:	f7ff fd49 	bl	100149b4 <__swsetup_r>
10014f22:	2800      	cmp	r0, #0
10014f24:	d0f1      	beq.n	10014f0a <_vfiprintf_r+0x42>
10014f26:	2001      	movs	r0, #1
10014f28:	4240      	negs	r0, r0
10014f2a:	e0d6      	b.n	100150da <_vfiprintf_r+0x212>
10014f2c:	9a05      	ldr	r2, [sp, #20]
10014f2e:	1d11      	adds	r1, r2, #4
10014f30:	6812      	ldr	r2, [r2, #0]
10014f32:	9105      	str	r1, [sp, #20]
10014f34:	2a00      	cmp	r2, #0
10014f36:	da00      	bge.n	10014f3a <_vfiprintf_r+0x72>
10014f38:	e07f      	b.n	1001503a <_vfiprintf_r+0x172>
10014f3a:	9209      	str	r2, [sp, #36]	; 0x24
10014f3c:	3401      	adds	r4, #1
10014f3e:	7823      	ldrb	r3, [r4, #0]
10014f40:	2b2e      	cmp	r3, #46	; 0x2e
10014f42:	d100      	bne.n	10014f46 <_vfiprintf_r+0x7e>
10014f44:	e08d      	b.n	10015062 <_vfiprintf_r+0x19a>
10014f46:	7821      	ldrb	r1, [r4, #0]
10014f48:	2203      	movs	r2, #3
10014f4a:	4868      	ldr	r0, [pc, #416]	; (100150ec <_vfiprintf_r+0x224>)
10014f4c:	f000 fb48 	bl	100155e0 <memchr>
10014f50:	2800      	cmp	r0, #0
10014f52:	d007      	beq.n	10014f64 <_vfiprintf_r+0x9c>
10014f54:	4b65      	ldr	r3, [pc, #404]	; (100150ec <_vfiprintf_r+0x224>)
10014f56:	682a      	ldr	r2, [r5, #0]
10014f58:	1ac0      	subs	r0, r0, r3
10014f5a:	2340      	movs	r3, #64	; 0x40
10014f5c:	4083      	lsls	r3, r0
10014f5e:	4313      	orrs	r3, r2
10014f60:	602b      	str	r3, [r5, #0]
10014f62:	3401      	adds	r4, #1
10014f64:	7821      	ldrb	r1, [r4, #0]
10014f66:	1c63      	adds	r3, r4, #1
10014f68:	2206      	movs	r2, #6
10014f6a:	4861      	ldr	r0, [pc, #388]	; (100150f0 <_vfiprintf_r+0x228>)
10014f6c:	9302      	str	r3, [sp, #8]
10014f6e:	7629      	strb	r1, [r5, #24]
10014f70:	f000 fb36 	bl	100155e0 <memchr>
10014f74:	2800      	cmp	r0, #0
10014f76:	d100      	bne.n	10014f7a <_vfiprintf_r+0xb2>
10014f78:	e09d      	b.n	100150b6 <_vfiprintf_r+0x1ee>
10014f7a:	4b5e      	ldr	r3, [pc, #376]	; (100150f4 <_vfiprintf_r+0x22c>)
10014f7c:	2b00      	cmp	r3, #0
10014f7e:	d000      	beq.n	10014f82 <_vfiprintf_r+0xba>
10014f80:	e090      	b.n	100150a4 <_vfiprintf_r+0x1dc>
10014f82:	2207      	movs	r2, #7
10014f84:	9b05      	ldr	r3, [sp, #20]
10014f86:	3307      	adds	r3, #7
10014f88:	4393      	bics	r3, r2
10014f8a:	3308      	adds	r3, #8
10014f8c:	9305      	str	r3, [sp, #20]
10014f8e:	696b      	ldr	r3, [r5, #20]
10014f90:	9a03      	ldr	r2, [sp, #12]
10014f92:	189b      	adds	r3, r3, r2
10014f94:	616b      	str	r3, [r5, #20]
10014f96:	9c02      	ldr	r4, [sp, #8]
10014f98:	7823      	ldrb	r3, [r4, #0]
10014f9a:	2b00      	cmp	r3, #0
10014f9c:	d104      	bne.n	10014fa8 <_vfiprintf_r+0xe0>
10014f9e:	9b02      	ldr	r3, [sp, #8]
10014fa0:	1ae3      	subs	r3, r4, r3
10014fa2:	9304      	str	r3, [sp, #16]
10014fa4:	d012      	beq.n	10014fcc <_vfiprintf_r+0x104>
10014fa6:	e003      	b.n	10014fb0 <_vfiprintf_r+0xe8>
10014fa8:	2b25      	cmp	r3, #37	; 0x25
10014faa:	d0f8      	beq.n	10014f9e <_vfiprintf_r+0xd6>
10014fac:	3401      	adds	r4, #1
10014fae:	e7f3      	b.n	10014f98 <_vfiprintf_r+0xd0>
10014fb0:	9b04      	ldr	r3, [sp, #16]
10014fb2:	9a02      	ldr	r2, [sp, #8]
10014fb4:	0039      	movs	r1, r7
10014fb6:	0030      	movs	r0, r6
10014fb8:	f7ff ff73 	bl	10014ea2 <__sfputs_r>
10014fbc:	1c43      	adds	r3, r0, #1
10014fbe:	d100      	bne.n	10014fc2 <_vfiprintf_r+0xfa>
10014fc0:	e086      	b.n	100150d0 <_vfiprintf_r+0x208>
10014fc2:	696a      	ldr	r2, [r5, #20]
10014fc4:	9b04      	ldr	r3, [sp, #16]
10014fc6:	4694      	mov	ip, r2
10014fc8:	4463      	add	r3, ip
10014fca:	616b      	str	r3, [r5, #20]
10014fcc:	7823      	ldrb	r3, [r4, #0]
10014fce:	2b00      	cmp	r3, #0
10014fd0:	d07e      	beq.n	100150d0 <_vfiprintf_r+0x208>
10014fd2:	2201      	movs	r2, #1
10014fd4:	2300      	movs	r3, #0
10014fd6:	4252      	negs	r2, r2
10014fd8:	606a      	str	r2, [r5, #4]
10014fda:	a902      	add	r1, sp, #8
10014fdc:	3254      	adds	r2, #84	; 0x54
10014fde:	1852      	adds	r2, r2, r1
10014fe0:	3401      	adds	r4, #1
10014fe2:	602b      	str	r3, [r5, #0]
10014fe4:	60eb      	str	r3, [r5, #12]
10014fe6:	60ab      	str	r3, [r5, #8]
10014fe8:	7013      	strb	r3, [r2, #0]
10014fea:	65ab      	str	r3, [r5, #88]	; 0x58
10014fec:	7821      	ldrb	r1, [r4, #0]
10014fee:	2205      	movs	r2, #5
10014ff0:	4841      	ldr	r0, [pc, #260]	; (100150f8 <_vfiprintf_r+0x230>)
10014ff2:	f000 faf5 	bl	100155e0 <memchr>
10014ff6:	2800      	cmp	r0, #0
10014ff8:	d008      	beq.n	1001500c <_vfiprintf_r+0x144>
10014ffa:	4b3f      	ldr	r3, [pc, #252]	; (100150f8 <_vfiprintf_r+0x230>)
10014ffc:	682a      	ldr	r2, [r5, #0]
10014ffe:	1ac0      	subs	r0, r0, r3
10015000:	2301      	movs	r3, #1
10015002:	4083      	lsls	r3, r0
10015004:	4313      	orrs	r3, r2
10015006:	602b      	str	r3, [r5, #0]
10015008:	3401      	adds	r4, #1
1001500a:	e7ef      	b.n	10014fec <_vfiprintf_r+0x124>
1001500c:	682b      	ldr	r3, [r5, #0]
1001500e:	06da      	lsls	r2, r3, #27
10015010:	d504      	bpl.n	1001501c <_vfiprintf_r+0x154>
10015012:	2253      	movs	r2, #83	; 0x53
10015014:	2120      	movs	r1, #32
10015016:	a802      	add	r0, sp, #8
10015018:	1812      	adds	r2, r2, r0
1001501a:	7011      	strb	r1, [r2, #0]
1001501c:	071a      	lsls	r2, r3, #28
1001501e:	d504      	bpl.n	1001502a <_vfiprintf_r+0x162>
10015020:	2253      	movs	r2, #83	; 0x53
10015022:	212b      	movs	r1, #43	; 0x2b
10015024:	a802      	add	r0, sp, #8
10015026:	1812      	adds	r2, r2, r0
10015028:	7011      	strb	r1, [r2, #0]
1001502a:	7822      	ldrb	r2, [r4, #0]
1001502c:	2a2a      	cmp	r2, #42	; 0x2a
1001502e:	d100      	bne.n	10015032 <_vfiprintf_r+0x16a>
10015030:	e77c      	b.n	10014f2c <_vfiprintf_r+0x64>
10015032:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015034:	2000      	movs	r0, #0
10015036:	210a      	movs	r1, #10
10015038:	e005      	b.n	10015046 <_vfiprintf_r+0x17e>
1001503a:	4252      	negs	r2, r2
1001503c:	60ea      	str	r2, [r5, #12]
1001503e:	2202      	movs	r2, #2
10015040:	4313      	orrs	r3, r2
10015042:	602b      	str	r3, [r5, #0]
10015044:	e77a      	b.n	10014f3c <_vfiprintf_r+0x74>
10015046:	7822      	ldrb	r2, [r4, #0]
10015048:	3a30      	subs	r2, #48	; 0x30
1001504a:	2a09      	cmp	r2, #9
1001504c:	d804      	bhi.n	10015058 <_vfiprintf_r+0x190>
1001504e:	434b      	muls	r3, r1
10015050:	3401      	adds	r4, #1
10015052:	189b      	adds	r3, r3, r2
10015054:	2001      	movs	r0, #1
10015056:	e7f6      	b.n	10015046 <_vfiprintf_r+0x17e>
10015058:	2800      	cmp	r0, #0
1001505a:	d100      	bne.n	1001505e <_vfiprintf_r+0x196>
1001505c:	e76f      	b.n	10014f3e <_vfiprintf_r+0x76>
1001505e:	9309      	str	r3, [sp, #36]	; 0x24
10015060:	e76d      	b.n	10014f3e <_vfiprintf_r+0x76>
10015062:	7863      	ldrb	r3, [r4, #1]
10015064:	2b2a      	cmp	r3, #42	; 0x2a
10015066:	d10a      	bne.n	1001507e <_vfiprintf_r+0x1b6>
10015068:	9b05      	ldr	r3, [sp, #20]
1001506a:	3402      	adds	r4, #2
1001506c:	1d1a      	adds	r2, r3, #4
1001506e:	681b      	ldr	r3, [r3, #0]
10015070:	9205      	str	r2, [sp, #20]
10015072:	2b00      	cmp	r3, #0
10015074:	da01      	bge.n	1001507a <_vfiprintf_r+0x1b2>
10015076:	2301      	movs	r3, #1
10015078:	425b      	negs	r3, r3
1001507a:	9307      	str	r3, [sp, #28]
1001507c:	e763      	b.n	10014f46 <_vfiprintf_r+0x7e>
1001507e:	2300      	movs	r3, #0
10015080:	200a      	movs	r0, #10
10015082:	001a      	movs	r2, r3
10015084:	3401      	adds	r4, #1
10015086:	606b      	str	r3, [r5, #4]
10015088:	7821      	ldrb	r1, [r4, #0]
1001508a:	3930      	subs	r1, #48	; 0x30
1001508c:	2909      	cmp	r1, #9
1001508e:	d804      	bhi.n	1001509a <_vfiprintf_r+0x1d2>
10015090:	4342      	muls	r2, r0
10015092:	3401      	adds	r4, #1
10015094:	1852      	adds	r2, r2, r1
10015096:	2301      	movs	r3, #1
10015098:	e7f6      	b.n	10015088 <_vfiprintf_r+0x1c0>
1001509a:	2b00      	cmp	r3, #0
1001509c:	d100      	bne.n	100150a0 <_vfiprintf_r+0x1d8>
1001509e:	e752      	b.n	10014f46 <_vfiprintf_r+0x7e>
100150a0:	9207      	str	r2, [sp, #28]
100150a2:	e750      	b.n	10014f46 <_vfiprintf_r+0x7e>
100150a4:	ab05      	add	r3, sp, #20
100150a6:	9300      	str	r3, [sp, #0]
100150a8:	003a      	movs	r2, r7
100150aa:	4b14      	ldr	r3, [pc, #80]	; (100150fc <_vfiprintf_r+0x234>)
100150ac:	0029      	movs	r1, r5
100150ae:	0030      	movs	r0, r6
100150b0:	e000      	b.n	100150b4 <_vfiprintf_r+0x1ec>
100150b2:	bf00      	nop
100150b4:	e007      	b.n	100150c6 <_vfiprintf_r+0x1fe>
100150b6:	ab05      	add	r3, sp, #20
100150b8:	9300      	str	r3, [sp, #0]
100150ba:	003a      	movs	r2, r7
100150bc:	4b0f      	ldr	r3, [pc, #60]	; (100150fc <_vfiprintf_r+0x234>)
100150be:	0029      	movs	r1, r5
100150c0:	0030      	movs	r0, r6
100150c2:	f000 f88b 	bl	100151dc <_printf_i>
100150c6:	9003      	str	r0, [sp, #12]
100150c8:	9b03      	ldr	r3, [sp, #12]
100150ca:	3301      	adds	r3, #1
100150cc:	d000      	beq.n	100150d0 <_vfiprintf_r+0x208>
100150ce:	e75e      	b.n	10014f8e <_vfiprintf_r+0xc6>
100150d0:	89bb      	ldrh	r3, [r7, #12]
100150d2:	065b      	lsls	r3, r3, #25
100150d4:	d500      	bpl.n	100150d8 <_vfiprintf_r+0x210>
100150d6:	e726      	b.n	10014f26 <_vfiprintf_r+0x5e>
100150d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100150da:	b01f      	add	sp, #124	; 0x7c
100150dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100150de:	46c0      	nop			; (mov r8, r8)
100150e0:	100174c0 	.word	0x100174c0
100150e4:	100174e0 	.word	0x100174e0
100150e8:	10017500 	.word	0x10017500
100150ec:	10017526 	.word	0x10017526
100150f0:	1001752a 	.word	0x1001752a
100150f4:	00000000 	.word	0x00000000
100150f8:	10017520 	.word	0x10017520
100150fc:	10014ea3 	.word	0x10014ea3

10015100 <_printf_common>:
10015100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015102:	0017      	movs	r7, r2
10015104:	9301      	str	r3, [sp, #4]
10015106:	688a      	ldr	r2, [r1, #8]
10015108:	690b      	ldr	r3, [r1, #16]
1001510a:	9000      	str	r0, [sp, #0]
1001510c:	000c      	movs	r4, r1
1001510e:	4293      	cmp	r3, r2
10015110:	da00      	bge.n	10015114 <_printf_common+0x14>
10015112:	0013      	movs	r3, r2
10015114:	0022      	movs	r2, r4
10015116:	603b      	str	r3, [r7, #0]
10015118:	3243      	adds	r2, #67	; 0x43
1001511a:	7812      	ldrb	r2, [r2, #0]
1001511c:	2a00      	cmp	r2, #0
1001511e:	d001      	beq.n	10015124 <_printf_common+0x24>
10015120:	3301      	adds	r3, #1
10015122:	603b      	str	r3, [r7, #0]
10015124:	6823      	ldr	r3, [r4, #0]
10015126:	069b      	lsls	r3, r3, #26
10015128:	d502      	bpl.n	10015130 <_printf_common+0x30>
1001512a:	683b      	ldr	r3, [r7, #0]
1001512c:	3302      	adds	r3, #2
1001512e:	603b      	str	r3, [r7, #0]
10015130:	2506      	movs	r5, #6
10015132:	6823      	ldr	r3, [r4, #0]
10015134:	401d      	ands	r5, r3
10015136:	d01e      	beq.n	10015176 <_printf_common+0x76>
10015138:	0023      	movs	r3, r4
1001513a:	3343      	adds	r3, #67	; 0x43
1001513c:	781b      	ldrb	r3, [r3, #0]
1001513e:	1e5a      	subs	r2, r3, #1
10015140:	4193      	sbcs	r3, r2
10015142:	6822      	ldr	r2, [r4, #0]
10015144:	0692      	lsls	r2, r2, #26
10015146:	d51c      	bpl.n	10015182 <_printf_common+0x82>
10015148:	2030      	movs	r0, #48	; 0x30
1001514a:	18e1      	adds	r1, r4, r3
1001514c:	3143      	adds	r1, #67	; 0x43
1001514e:	7008      	strb	r0, [r1, #0]
10015150:	0021      	movs	r1, r4
10015152:	1c5a      	adds	r2, r3, #1
10015154:	3145      	adds	r1, #69	; 0x45
10015156:	7809      	ldrb	r1, [r1, #0]
10015158:	18a2      	adds	r2, r4, r2
1001515a:	3243      	adds	r2, #67	; 0x43
1001515c:	3302      	adds	r3, #2
1001515e:	7011      	strb	r1, [r2, #0]
10015160:	e00f      	b.n	10015182 <_printf_common+0x82>
10015162:	0022      	movs	r2, r4
10015164:	2301      	movs	r3, #1
10015166:	3219      	adds	r2, #25
10015168:	9901      	ldr	r1, [sp, #4]
1001516a:	9800      	ldr	r0, [sp, #0]
1001516c:	9e08      	ldr	r6, [sp, #32]
1001516e:	47b0      	blx	r6
10015170:	1c43      	adds	r3, r0, #1
10015172:	d00e      	beq.n	10015192 <_printf_common+0x92>
10015174:	3501      	adds	r5, #1
10015176:	68e3      	ldr	r3, [r4, #12]
10015178:	683a      	ldr	r2, [r7, #0]
1001517a:	1a9b      	subs	r3, r3, r2
1001517c:	429d      	cmp	r5, r3
1001517e:	dbf0      	blt.n	10015162 <_printf_common+0x62>
10015180:	e7da      	b.n	10015138 <_printf_common+0x38>
10015182:	0022      	movs	r2, r4
10015184:	9901      	ldr	r1, [sp, #4]
10015186:	3243      	adds	r2, #67	; 0x43
10015188:	9800      	ldr	r0, [sp, #0]
1001518a:	9d08      	ldr	r5, [sp, #32]
1001518c:	47a8      	blx	r5
1001518e:	1c43      	adds	r3, r0, #1
10015190:	d102      	bne.n	10015198 <_printf_common+0x98>
10015192:	2001      	movs	r0, #1
10015194:	4240      	negs	r0, r0
10015196:	e020      	b.n	100151da <_printf_common+0xda>
10015198:	2306      	movs	r3, #6
1001519a:	6820      	ldr	r0, [r4, #0]
1001519c:	68e1      	ldr	r1, [r4, #12]
1001519e:	683a      	ldr	r2, [r7, #0]
100151a0:	4003      	ands	r3, r0
100151a2:	2500      	movs	r5, #0
100151a4:	2b04      	cmp	r3, #4
100151a6:	d103      	bne.n	100151b0 <_printf_common+0xb0>
100151a8:	1a8d      	subs	r5, r1, r2
100151aa:	43eb      	mvns	r3, r5
100151ac:	17db      	asrs	r3, r3, #31
100151ae:	401d      	ands	r5, r3
100151b0:	68a3      	ldr	r3, [r4, #8]
100151b2:	6922      	ldr	r2, [r4, #16]
100151b4:	4293      	cmp	r3, r2
100151b6:	dd01      	ble.n	100151bc <_printf_common+0xbc>
100151b8:	1a9b      	subs	r3, r3, r2
100151ba:	18ed      	adds	r5, r5, r3
100151bc:	2700      	movs	r7, #0
100151be:	42bd      	cmp	r5, r7
100151c0:	d00a      	beq.n	100151d8 <_printf_common+0xd8>
100151c2:	0022      	movs	r2, r4
100151c4:	2301      	movs	r3, #1
100151c6:	321a      	adds	r2, #26
100151c8:	9901      	ldr	r1, [sp, #4]
100151ca:	9800      	ldr	r0, [sp, #0]
100151cc:	9e08      	ldr	r6, [sp, #32]
100151ce:	47b0      	blx	r6
100151d0:	1c43      	adds	r3, r0, #1
100151d2:	d0de      	beq.n	10015192 <_printf_common+0x92>
100151d4:	3701      	adds	r7, #1
100151d6:	e7f2      	b.n	100151be <_printf_common+0xbe>
100151d8:	2000      	movs	r0, #0
100151da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100151dc <_printf_i>:
100151dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100151de:	b08b      	sub	sp, #44	; 0x2c
100151e0:	9206      	str	r2, [sp, #24]
100151e2:	000a      	movs	r2, r1
100151e4:	3243      	adds	r2, #67	; 0x43
100151e6:	9307      	str	r3, [sp, #28]
100151e8:	9005      	str	r0, [sp, #20]
100151ea:	9204      	str	r2, [sp, #16]
100151ec:	7e0a      	ldrb	r2, [r1, #24]
100151ee:	000c      	movs	r4, r1
100151f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100151f2:	2a6e      	cmp	r2, #110	; 0x6e
100151f4:	d100      	bne.n	100151f8 <_printf_i+0x1c>
100151f6:	e0ab      	b.n	10015350 <_printf_i+0x174>
100151f8:	d811      	bhi.n	1001521e <_printf_i+0x42>
100151fa:	2a63      	cmp	r2, #99	; 0x63
100151fc:	d022      	beq.n	10015244 <_printf_i+0x68>
100151fe:	d809      	bhi.n	10015214 <_printf_i+0x38>
10015200:	2a00      	cmp	r2, #0
10015202:	d100      	bne.n	10015206 <_printf_i+0x2a>
10015204:	e0b5      	b.n	10015372 <_printf_i+0x196>
10015206:	2a58      	cmp	r2, #88	; 0x58
10015208:	d000      	beq.n	1001520c <_printf_i+0x30>
1001520a:	e0c5      	b.n	10015398 <_printf_i+0x1bc>
1001520c:	3145      	adds	r1, #69	; 0x45
1001520e:	700a      	strb	r2, [r1, #0]
10015210:	4a81      	ldr	r2, [pc, #516]	; (10015418 <_printf_i+0x23c>)
10015212:	e04f      	b.n	100152b4 <_printf_i+0xd8>
10015214:	2a64      	cmp	r2, #100	; 0x64
10015216:	d01d      	beq.n	10015254 <_printf_i+0x78>
10015218:	2a69      	cmp	r2, #105	; 0x69
1001521a:	d01b      	beq.n	10015254 <_printf_i+0x78>
1001521c:	e0bc      	b.n	10015398 <_printf_i+0x1bc>
1001521e:	2a73      	cmp	r2, #115	; 0x73
10015220:	d100      	bne.n	10015224 <_printf_i+0x48>
10015222:	e0aa      	b.n	1001537a <_printf_i+0x19e>
10015224:	d809      	bhi.n	1001523a <_printf_i+0x5e>
10015226:	2a6f      	cmp	r2, #111	; 0x6f
10015228:	d029      	beq.n	1001527e <_printf_i+0xa2>
1001522a:	2a70      	cmp	r2, #112	; 0x70
1001522c:	d000      	beq.n	10015230 <_printf_i+0x54>
1001522e:	e0b3      	b.n	10015398 <_printf_i+0x1bc>
10015230:	2220      	movs	r2, #32
10015232:	6809      	ldr	r1, [r1, #0]
10015234:	430a      	orrs	r2, r1
10015236:	6022      	str	r2, [r4, #0]
10015238:	e037      	b.n	100152aa <_printf_i+0xce>
1001523a:	2a75      	cmp	r2, #117	; 0x75
1001523c:	d01f      	beq.n	1001527e <_printf_i+0xa2>
1001523e:	2a78      	cmp	r2, #120	; 0x78
10015240:	d033      	beq.n	100152aa <_printf_i+0xce>
10015242:	e0a9      	b.n	10015398 <_printf_i+0x1bc>
10015244:	000e      	movs	r6, r1
10015246:	681a      	ldr	r2, [r3, #0]
10015248:	3642      	adds	r6, #66	; 0x42
1001524a:	1d11      	adds	r1, r2, #4
1001524c:	6019      	str	r1, [r3, #0]
1001524e:	6813      	ldr	r3, [r2, #0]
10015250:	7033      	strb	r3, [r6, #0]
10015252:	e0a4      	b.n	1001539e <_printf_i+0x1c2>
10015254:	6821      	ldr	r1, [r4, #0]
10015256:	681a      	ldr	r2, [r3, #0]
10015258:	0608      	lsls	r0, r1, #24
1001525a:	d406      	bmi.n	1001526a <_printf_i+0x8e>
1001525c:	0649      	lsls	r1, r1, #25
1001525e:	d504      	bpl.n	1001526a <_printf_i+0x8e>
10015260:	1d11      	adds	r1, r2, #4
10015262:	6019      	str	r1, [r3, #0]
10015264:	2300      	movs	r3, #0
10015266:	5ed5      	ldrsh	r5, [r2, r3]
10015268:	e002      	b.n	10015270 <_printf_i+0x94>
1001526a:	1d11      	adds	r1, r2, #4
1001526c:	6019      	str	r1, [r3, #0]
1001526e:	6815      	ldr	r5, [r2, #0]
10015270:	2d00      	cmp	r5, #0
10015272:	da3b      	bge.n	100152ec <_printf_i+0x110>
10015274:	232d      	movs	r3, #45	; 0x2d
10015276:	9a04      	ldr	r2, [sp, #16]
10015278:	426d      	negs	r5, r5
1001527a:	7013      	strb	r3, [r2, #0]
1001527c:	e036      	b.n	100152ec <_printf_i+0x110>
1001527e:	6821      	ldr	r1, [r4, #0]
10015280:	681a      	ldr	r2, [r3, #0]
10015282:	0608      	lsls	r0, r1, #24
10015284:	d406      	bmi.n	10015294 <_printf_i+0xb8>
10015286:	0649      	lsls	r1, r1, #25
10015288:	d504      	bpl.n	10015294 <_printf_i+0xb8>
1001528a:	6815      	ldr	r5, [r2, #0]
1001528c:	1d11      	adds	r1, r2, #4
1001528e:	6019      	str	r1, [r3, #0]
10015290:	b2ad      	uxth	r5, r5
10015292:	e002      	b.n	1001529a <_printf_i+0xbe>
10015294:	1d11      	adds	r1, r2, #4
10015296:	6019      	str	r1, [r3, #0]
10015298:	6815      	ldr	r5, [r2, #0]
1001529a:	4b5f      	ldr	r3, [pc, #380]	; (10015418 <_printf_i+0x23c>)
1001529c:	7e22      	ldrb	r2, [r4, #24]
1001529e:	9303      	str	r3, [sp, #12]
100152a0:	2708      	movs	r7, #8
100152a2:	2a6f      	cmp	r2, #111	; 0x6f
100152a4:	d01d      	beq.n	100152e2 <_printf_i+0x106>
100152a6:	270a      	movs	r7, #10
100152a8:	e01b      	b.n	100152e2 <_printf_i+0x106>
100152aa:	0022      	movs	r2, r4
100152ac:	2178      	movs	r1, #120	; 0x78
100152ae:	3245      	adds	r2, #69	; 0x45
100152b0:	7011      	strb	r1, [r2, #0]
100152b2:	4a5a      	ldr	r2, [pc, #360]	; (1001541c <_printf_i+0x240>)
100152b4:	6819      	ldr	r1, [r3, #0]
100152b6:	9203      	str	r2, [sp, #12]
100152b8:	1d08      	adds	r0, r1, #4
100152ba:	6822      	ldr	r2, [r4, #0]
100152bc:	6018      	str	r0, [r3, #0]
100152be:	680d      	ldr	r5, [r1, #0]
100152c0:	0610      	lsls	r0, r2, #24
100152c2:	d402      	bmi.n	100152ca <_printf_i+0xee>
100152c4:	0650      	lsls	r0, r2, #25
100152c6:	d500      	bpl.n	100152ca <_printf_i+0xee>
100152c8:	b2ad      	uxth	r5, r5
100152ca:	07d3      	lsls	r3, r2, #31
100152cc:	d502      	bpl.n	100152d4 <_printf_i+0xf8>
100152ce:	2320      	movs	r3, #32
100152d0:	431a      	orrs	r2, r3
100152d2:	6022      	str	r2, [r4, #0]
100152d4:	2710      	movs	r7, #16
100152d6:	2d00      	cmp	r5, #0
100152d8:	d103      	bne.n	100152e2 <_printf_i+0x106>
100152da:	2320      	movs	r3, #32
100152dc:	6822      	ldr	r2, [r4, #0]
100152de:	439a      	bics	r2, r3
100152e0:	6022      	str	r2, [r4, #0]
100152e2:	0023      	movs	r3, r4
100152e4:	2200      	movs	r2, #0
100152e6:	3343      	adds	r3, #67	; 0x43
100152e8:	701a      	strb	r2, [r3, #0]
100152ea:	e002      	b.n	100152f2 <_printf_i+0x116>
100152ec:	270a      	movs	r7, #10
100152ee:	4b4a      	ldr	r3, [pc, #296]	; (10015418 <_printf_i+0x23c>)
100152f0:	9303      	str	r3, [sp, #12]
100152f2:	6863      	ldr	r3, [r4, #4]
100152f4:	60a3      	str	r3, [r4, #8]
100152f6:	2b00      	cmp	r3, #0
100152f8:	db09      	blt.n	1001530e <_printf_i+0x132>
100152fa:	2204      	movs	r2, #4
100152fc:	6821      	ldr	r1, [r4, #0]
100152fe:	4391      	bics	r1, r2
10015300:	6021      	str	r1, [r4, #0]
10015302:	2d00      	cmp	r5, #0
10015304:	d105      	bne.n	10015312 <_printf_i+0x136>
10015306:	9e04      	ldr	r6, [sp, #16]
10015308:	2b00      	cmp	r3, #0
1001530a:	d011      	beq.n	10015330 <_printf_i+0x154>
1001530c:	e07b      	b.n	10015406 <_printf_i+0x22a>
1001530e:	2d00      	cmp	r5, #0
10015310:	d079      	beq.n	10015406 <_printf_i+0x22a>
10015312:	9e04      	ldr	r6, [sp, #16]
10015314:	0028      	movs	r0, r5
10015316:	0039      	movs	r1, r7
10015318:	f7fc fb5e 	bl	100119d8 <__aeabi_uidivmod>
1001531c:	9b03      	ldr	r3, [sp, #12]
1001531e:	3e01      	subs	r6, #1
10015320:	5c5b      	ldrb	r3, [r3, r1]
10015322:	0028      	movs	r0, r5
10015324:	7033      	strb	r3, [r6, #0]
10015326:	0039      	movs	r1, r7
10015328:	f7fc fad0 	bl	100118cc <__aeabi_uidiv>
1001532c:	1e05      	subs	r5, r0, #0
1001532e:	d1f1      	bne.n	10015314 <_printf_i+0x138>
10015330:	2f08      	cmp	r7, #8
10015332:	d109      	bne.n	10015348 <_printf_i+0x16c>
10015334:	6823      	ldr	r3, [r4, #0]
10015336:	07db      	lsls	r3, r3, #31
10015338:	d506      	bpl.n	10015348 <_printf_i+0x16c>
1001533a:	6863      	ldr	r3, [r4, #4]
1001533c:	6922      	ldr	r2, [r4, #16]
1001533e:	4293      	cmp	r3, r2
10015340:	dc02      	bgt.n	10015348 <_printf_i+0x16c>
10015342:	2330      	movs	r3, #48	; 0x30
10015344:	3e01      	subs	r6, #1
10015346:	7033      	strb	r3, [r6, #0]
10015348:	9b04      	ldr	r3, [sp, #16]
1001534a:	1b9b      	subs	r3, r3, r6
1001534c:	6123      	str	r3, [r4, #16]
1001534e:	e02b      	b.n	100153a8 <_printf_i+0x1cc>
10015350:	6809      	ldr	r1, [r1, #0]
10015352:	681a      	ldr	r2, [r3, #0]
10015354:	0608      	lsls	r0, r1, #24
10015356:	d407      	bmi.n	10015368 <_printf_i+0x18c>
10015358:	0649      	lsls	r1, r1, #25
1001535a:	d505      	bpl.n	10015368 <_printf_i+0x18c>
1001535c:	1d11      	adds	r1, r2, #4
1001535e:	6019      	str	r1, [r3, #0]
10015360:	6813      	ldr	r3, [r2, #0]
10015362:	8aa2      	ldrh	r2, [r4, #20]
10015364:	801a      	strh	r2, [r3, #0]
10015366:	e004      	b.n	10015372 <_printf_i+0x196>
10015368:	1d11      	adds	r1, r2, #4
1001536a:	6019      	str	r1, [r3, #0]
1001536c:	6813      	ldr	r3, [r2, #0]
1001536e:	6962      	ldr	r2, [r4, #20]
10015370:	601a      	str	r2, [r3, #0]
10015372:	2300      	movs	r3, #0
10015374:	9e04      	ldr	r6, [sp, #16]
10015376:	6123      	str	r3, [r4, #16]
10015378:	e016      	b.n	100153a8 <_printf_i+0x1cc>
1001537a:	681a      	ldr	r2, [r3, #0]
1001537c:	1d11      	adds	r1, r2, #4
1001537e:	6019      	str	r1, [r3, #0]
10015380:	6816      	ldr	r6, [r2, #0]
10015382:	2100      	movs	r1, #0
10015384:	6862      	ldr	r2, [r4, #4]
10015386:	0030      	movs	r0, r6
10015388:	f000 f92a 	bl	100155e0 <memchr>
1001538c:	2800      	cmp	r0, #0
1001538e:	d001      	beq.n	10015394 <_printf_i+0x1b8>
10015390:	1b80      	subs	r0, r0, r6
10015392:	6060      	str	r0, [r4, #4]
10015394:	6863      	ldr	r3, [r4, #4]
10015396:	e003      	b.n	100153a0 <_printf_i+0x1c4>
10015398:	0026      	movs	r6, r4
1001539a:	3642      	adds	r6, #66	; 0x42
1001539c:	7032      	strb	r2, [r6, #0]
1001539e:	2301      	movs	r3, #1
100153a0:	6123      	str	r3, [r4, #16]
100153a2:	2300      	movs	r3, #0
100153a4:	9a04      	ldr	r2, [sp, #16]
100153a6:	7013      	strb	r3, [r2, #0]
100153a8:	9b07      	ldr	r3, [sp, #28]
100153aa:	aa09      	add	r2, sp, #36	; 0x24
100153ac:	9300      	str	r3, [sp, #0]
100153ae:	0021      	movs	r1, r4
100153b0:	9b06      	ldr	r3, [sp, #24]
100153b2:	9805      	ldr	r0, [sp, #20]
100153b4:	f7ff fea4 	bl	10015100 <_printf_common>
100153b8:	1c43      	adds	r3, r0, #1
100153ba:	d102      	bne.n	100153c2 <_printf_i+0x1e6>
100153bc:	2001      	movs	r0, #1
100153be:	4240      	negs	r0, r0
100153c0:	e027      	b.n	10015412 <_printf_i+0x236>
100153c2:	6923      	ldr	r3, [r4, #16]
100153c4:	0032      	movs	r2, r6
100153c6:	9906      	ldr	r1, [sp, #24]
100153c8:	9805      	ldr	r0, [sp, #20]
100153ca:	9d07      	ldr	r5, [sp, #28]
100153cc:	47a8      	blx	r5
100153ce:	1c43      	adds	r3, r0, #1
100153d0:	d0f4      	beq.n	100153bc <_printf_i+0x1e0>
100153d2:	6823      	ldr	r3, [r4, #0]
100153d4:	2500      	movs	r5, #0
100153d6:	079b      	lsls	r3, r3, #30
100153d8:	d40f      	bmi.n	100153fa <_printf_i+0x21e>
100153da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100153dc:	68e0      	ldr	r0, [r4, #12]
100153de:	4298      	cmp	r0, r3
100153e0:	da17      	bge.n	10015412 <_printf_i+0x236>
100153e2:	0018      	movs	r0, r3
100153e4:	e015      	b.n	10015412 <_printf_i+0x236>
100153e6:	0022      	movs	r2, r4
100153e8:	2301      	movs	r3, #1
100153ea:	3219      	adds	r2, #25
100153ec:	9906      	ldr	r1, [sp, #24]
100153ee:	9805      	ldr	r0, [sp, #20]
100153f0:	9e07      	ldr	r6, [sp, #28]
100153f2:	47b0      	blx	r6
100153f4:	1c43      	adds	r3, r0, #1
100153f6:	d0e1      	beq.n	100153bc <_printf_i+0x1e0>
100153f8:	3501      	adds	r5, #1
100153fa:	68e3      	ldr	r3, [r4, #12]
100153fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
100153fe:	1a9b      	subs	r3, r3, r2
10015400:	429d      	cmp	r5, r3
10015402:	dbf0      	blt.n	100153e6 <_printf_i+0x20a>
10015404:	e7e9      	b.n	100153da <_printf_i+0x1fe>
10015406:	0026      	movs	r6, r4
10015408:	9b03      	ldr	r3, [sp, #12]
1001540a:	3642      	adds	r6, #66	; 0x42
1001540c:	781b      	ldrb	r3, [r3, #0]
1001540e:	7033      	strb	r3, [r6, #0]
10015410:	e78e      	b.n	10015330 <_printf_i+0x154>
10015412:	b00b      	add	sp, #44	; 0x2c
10015414:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015416:	46c0      	nop			; (mov r8, r8)
10015418:	10017531 	.word	0x10017531
1001541c:	10017542 	.word	0x10017542

10015420 <_putc_r>:
10015420:	b570      	push	{r4, r5, r6, lr}
10015422:	0006      	movs	r6, r0
10015424:	000d      	movs	r5, r1
10015426:	0014      	movs	r4, r2
10015428:	2800      	cmp	r0, #0
1001542a:	d004      	beq.n	10015436 <_putc_r+0x16>
1001542c:	6983      	ldr	r3, [r0, #24]
1001542e:	2b00      	cmp	r3, #0
10015430:	d101      	bne.n	10015436 <_putc_r+0x16>
10015432:	f7ff fc29 	bl	10014c88 <__sinit>
10015436:	4b12      	ldr	r3, [pc, #72]	; (10015480 <_putc_r+0x60>)
10015438:	429c      	cmp	r4, r3
1001543a:	d101      	bne.n	10015440 <_putc_r+0x20>
1001543c:	6874      	ldr	r4, [r6, #4]
1001543e:	e008      	b.n	10015452 <_putc_r+0x32>
10015440:	4b10      	ldr	r3, [pc, #64]	; (10015484 <_putc_r+0x64>)
10015442:	429c      	cmp	r4, r3
10015444:	d101      	bne.n	1001544a <_putc_r+0x2a>
10015446:	68b4      	ldr	r4, [r6, #8]
10015448:	e003      	b.n	10015452 <_putc_r+0x32>
1001544a:	4b0f      	ldr	r3, [pc, #60]	; (10015488 <_putc_r+0x68>)
1001544c:	429c      	cmp	r4, r3
1001544e:	d100      	bne.n	10015452 <_putc_r+0x32>
10015450:	68f4      	ldr	r4, [r6, #12]
10015452:	68a3      	ldr	r3, [r4, #8]
10015454:	3b01      	subs	r3, #1
10015456:	60a3      	str	r3, [r4, #8]
10015458:	2b00      	cmp	r3, #0
1001545a:	da05      	bge.n	10015468 <_putc_r+0x48>
1001545c:	69a2      	ldr	r2, [r4, #24]
1001545e:	4293      	cmp	r3, r2
10015460:	db08      	blt.n	10015474 <_putc_r+0x54>
10015462:	b2eb      	uxtb	r3, r5
10015464:	2b0a      	cmp	r3, #10
10015466:	d005      	beq.n	10015474 <_putc_r+0x54>
10015468:	6823      	ldr	r3, [r4, #0]
1001546a:	b2e8      	uxtb	r0, r5
1001546c:	1c5a      	adds	r2, r3, #1
1001546e:	6022      	str	r2, [r4, #0]
10015470:	701d      	strb	r5, [r3, #0]
10015472:	e004      	b.n	1001547e <_putc_r+0x5e>
10015474:	0022      	movs	r2, r4
10015476:	0029      	movs	r1, r5
10015478:	0030      	movs	r0, r6
1001547a:	f7ff fa43 	bl	10014904 <__swbuf_r>
1001547e:	bd70      	pop	{r4, r5, r6, pc}
10015480:	100174c0 	.word	0x100174c0
10015484:	100174e0 	.word	0x100174e0
10015488:	10017500 	.word	0x10017500

1001548c <__sread>:
1001548c:	b570      	push	{r4, r5, r6, lr}
1001548e:	000c      	movs	r4, r1
10015490:	250e      	movs	r5, #14
10015492:	5f49      	ldrsh	r1, [r1, r5]
10015494:	f000 f8b0 	bl	100155f8 <_read_r>
10015498:	2800      	cmp	r0, #0
1001549a:	db03      	blt.n	100154a4 <__sread+0x18>
1001549c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001549e:	181b      	adds	r3, r3, r0
100154a0:	6563      	str	r3, [r4, #84]	; 0x54
100154a2:	e003      	b.n	100154ac <__sread+0x20>
100154a4:	89a2      	ldrh	r2, [r4, #12]
100154a6:	4b02      	ldr	r3, [pc, #8]	; (100154b0 <__sread+0x24>)
100154a8:	4013      	ands	r3, r2
100154aa:	81a3      	strh	r3, [r4, #12]
100154ac:	bd70      	pop	{r4, r5, r6, pc}
100154ae:	46c0      	nop			; (mov r8, r8)
100154b0:	ffffefff 	.word	0xffffefff

100154b4 <__swrite>:
100154b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100154b6:	001f      	movs	r7, r3
100154b8:	898b      	ldrh	r3, [r1, #12]
100154ba:	0005      	movs	r5, r0
100154bc:	000c      	movs	r4, r1
100154be:	0016      	movs	r6, r2
100154c0:	05db      	lsls	r3, r3, #23
100154c2:	d505      	bpl.n	100154d0 <__swrite+0x1c>
100154c4:	230e      	movs	r3, #14
100154c6:	5ec9      	ldrsh	r1, [r1, r3]
100154c8:	2200      	movs	r2, #0
100154ca:	2302      	movs	r3, #2
100154cc:	f000 f874 	bl	100155b8 <_lseek_r>
100154d0:	89a2      	ldrh	r2, [r4, #12]
100154d2:	4b05      	ldr	r3, [pc, #20]	; (100154e8 <__swrite+0x34>)
100154d4:	0028      	movs	r0, r5
100154d6:	4013      	ands	r3, r2
100154d8:	81a3      	strh	r3, [r4, #12]
100154da:	0032      	movs	r2, r6
100154dc:	230e      	movs	r3, #14
100154de:	5ee1      	ldrsh	r1, [r4, r3]
100154e0:	003b      	movs	r3, r7
100154e2:	f000 f81f 	bl	10015524 <_write_r>
100154e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100154e8:	ffffefff 	.word	0xffffefff

100154ec <__sseek>:
100154ec:	b570      	push	{r4, r5, r6, lr}
100154ee:	000c      	movs	r4, r1
100154f0:	250e      	movs	r5, #14
100154f2:	5f49      	ldrsh	r1, [r1, r5]
100154f4:	f000 f860 	bl	100155b8 <_lseek_r>
100154f8:	89a3      	ldrh	r3, [r4, #12]
100154fa:	1c42      	adds	r2, r0, #1
100154fc:	d103      	bne.n	10015506 <__sseek+0x1a>
100154fe:	4a05      	ldr	r2, [pc, #20]	; (10015514 <__sseek+0x28>)
10015500:	4013      	ands	r3, r2
10015502:	81a3      	strh	r3, [r4, #12]
10015504:	e004      	b.n	10015510 <__sseek+0x24>
10015506:	2280      	movs	r2, #128	; 0x80
10015508:	0152      	lsls	r2, r2, #5
1001550a:	4313      	orrs	r3, r2
1001550c:	81a3      	strh	r3, [r4, #12]
1001550e:	6560      	str	r0, [r4, #84]	; 0x54
10015510:	bd70      	pop	{r4, r5, r6, pc}
10015512:	46c0      	nop			; (mov r8, r8)
10015514:	ffffefff 	.word	0xffffefff

10015518 <__sclose>:
10015518:	b510      	push	{r4, lr}
1001551a:	230e      	movs	r3, #14
1001551c:	5ec9      	ldrsh	r1, [r1, r3]
1001551e:	f000 f815 	bl	1001554c <_close_r>
10015522:	bd10      	pop	{r4, pc}

10015524 <_write_r>:
10015524:	b570      	push	{r4, r5, r6, lr}
10015526:	0005      	movs	r5, r0
10015528:	0008      	movs	r0, r1
1001552a:	0011      	movs	r1, r2
1001552c:	2200      	movs	r2, #0
1001552e:	4c06      	ldr	r4, [pc, #24]	; (10015548 <_write_r+0x24>)
10015530:	6022      	str	r2, [r4, #0]
10015532:	001a      	movs	r2, r3
10015534:	f7f7 fc36 	bl	1000cda4 <_write>
10015538:	1c43      	adds	r3, r0, #1
1001553a:	d103      	bne.n	10015544 <_write_r+0x20>
1001553c:	6823      	ldr	r3, [r4, #0]
1001553e:	2b00      	cmp	r3, #0
10015540:	d000      	beq.n	10015544 <_write_r+0x20>
10015542:	602b      	str	r3, [r5, #0]
10015544:	bd70      	pop	{r4, r5, r6, pc}
10015546:	46c0      	nop			; (mov r8, r8)
10015548:	1001a298 	.word	0x1001a298

1001554c <_close_r>:
1001554c:	2300      	movs	r3, #0
1001554e:	b570      	push	{r4, r5, r6, lr}
10015550:	4c06      	ldr	r4, [pc, #24]	; (1001556c <_close_r+0x20>)
10015552:	0005      	movs	r5, r0
10015554:	0008      	movs	r0, r1
10015556:	6023      	str	r3, [r4, #0]
10015558:	f7f8 fe30 	bl	1000e1bc <_close>
1001555c:	1c43      	adds	r3, r0, #1
1001555e:	d103      	bne.n	10015568 <_close_r+0x1c>
10015560:	6823      	ldr	r3, [r4, #0]
10015562:	2b00      	cmp	r3, #0
10015564:	d000      	beq.n	10015568 <_close_r+0x1c>
10015566:	602b      	str	r3, [r5, #0]
10015568:	bd70      	pop	{r4, r5, r6, pc}
1001556a:	46c0      	nop			; (mov r8, r8)
1001556c:	1001a298 	.word	0x1001a298

10015570 <_fstat_r>:
10015570:	2300      	movs	r3, #0
10015572:	b570      	push	{r4, r5, r6, lr}
10015574:	4c06      	ldr	r4, [pc, #24]	; (10015590 <_fstat_r+0x20>)
10015576:	0005      	movs	r5, r0
10015578:	0008      	movs	r0, r1
1001557a:	0011      	movs	r1, r2
1001557c:	6023      	str	r3, [r4, #0]
1001557e:	f7f8 fe21 	bl	1000e1c4 <_fstat>
10015582:	1c43      	adds	r3, r0, #1
10015584:	d103      	bne.n	1001558e <_fstat_r+0x1e>
10015586:	6823      	ldr	r3, [r4, #0]
10015588:	2b00      	cmp	r3, #0
1001558a:	d000      	beq.n	1001558e <_fstat_r+0x1e>
1001558c:	602b      	str	r3, [r5, #0]
1001558e:	bd70      	pop	{r4, r5, r6, pc}
10015590:	1001a298 	.word	0x1001a298

10015594 <_isatty_r>:
10015594:	2300      	movs	r3, #0
10015596:	b570      	push	{r4, r5, r6, lr}
10015598:	4c06      	ldr	r4, [pc, #24]	; (100155b4 <_isatty_r+0x20>)
1001559a:	0005      	movs	r5, r0
1001559c:	0008      	movs	r0, r1
1001559e:	6023      	str	r3, [r4, #0]
100155a0:	f7f8 fe16 	bl	1000e1d0 <_isatty>
100155a4:	1c43      	adds	r3, r0, #1
100155a6:	d103      	bne.n	100155b0 <_isatty_r+0x1c>
100155a8:	6823      	ldr	r3, [r4, #0]
100155aa:	2b00      	cmp	r3, #0
100155ac:	d000      	beq.n	100155b0 <_isatty_r+0x1c>
100155ae:	602b      	str	r3, [r5, #0]
100155b0:	bd70      	pop	{r4, r5, r6, pc}
100155b2:	46c0      	nop			; (mov r8, r8)
100155b4:	1001a298 	.word	0x1001a298

100155b8 <_lseek_r>:
100155b8:	b570      	push	{r4, r5, r6, lr}
100155ba:	0005      	movs	r5, r0
100155bc:	0008      	movs	r0, r1
100155be:	0011      	movs	r1, r2
100155c0:	2200      	movs	r2, #0
100155c2:	4c06      	ldr	r4, [pc, #24]	; (100155dc <_lseek_r+0x24>)
100155c4:	6022      	str	r2, [r4, #0]
100155c6:	001a      	movs	r2, r3
100155c8:	f7f8 fe04 	bl	1000e1d4 <_lseek>
100155cc:	1c43      	adds	r3, r0, #1
100155ce:	d103      	bne.n	100155d8 <_lseek_r+0x20>
100155d0:	6823      	ldr	r3, [r4, #0]
100155d2:	2b00      	cmp	r3, #0
100155d4:	d000      	beq.n	100155d8 <_lseek_r+0x20>
100155d6:	602b      	str	r3, [r5, #0]
100155d8:	bd70      	pop	{r4, r5, r6, pc}
100155da:	46c0      	nop			; (mov r8, r8)
100155dc:	1001a298 	.word	0x1001a298

100155e0 <memchr>:
100155e0:	b2c9      	uxtb	r1, r1
100155e2:	1882      	adds	r2, r0, r2
100155e4:	4290      	cmp	r0, r2
100155e6:	d004      	beq.n	100155f2 <memchr+0x12>
100155e8:	7803      	ldrb	r3, [r0, #0]
100155ea:	428b      	cmp	r3, r1
100155ec:	d002      	beq.n	100155f4 <memchr+0x14>
100155ee:	3001      	adds	r0, #1
100155f0:	e7f8      	b.n	100155e4 <memchr+0x4>
100155f2:	2000      	movs	r0, #0
100155f4:	4770      	bx	lr
	...

100155f8 <_read_r>:
100155f8:	b570      	push	{r4, r5, r6, lr}
100155fa:	0005      	movs	r5, r0
100155fc:	0008      	movs	r0, r1
100155fe:	0011      	movs	r1, r2
10015600:	2200      	movs	r2, #0
10015602:	4c06      	ldr	r4, [pc, #24]	; (1001561c <_read_r+0x24>)
10015604:	6022      	str	r2, [r4, #0]
10015606:	001a      	movs	r2, r3
10015608:	f7f7 fbac 	bl	1000cd64 <_read>
1001560c:	1c43      	adds	r3, r0, #1
1001560e:	d103      	bne.n	10015618 <_read_r+0x20>
10015610:	6823      	ldr	r3, [r4, #0]
10015612:	2b00      	cmp	r3, #0
10015614:	d000      	beq.n	10015618 <_read_r+0x20>
10015616:	602b      	str	r3, [r5, #0]
10015618:	bd70      	pop	{r4, r5, r6, pc}
1001561a:	46c0      	nop			; (mov r8, r8)
1001561c:	1001a298 	.word	0x1001a298
10015620:	10008c72 	.word	0x10008c72
10015624:	10008c54 	.word	0x10008c54
10015628:	10008c5a 	.word	0x10008c5a
1001562c:	10008c60 	.word	0x10008c60
10015630:	10008c66 	.word	0x10008c66
10015634:	10008c6c 	.word	0x10008c6c
10015638:	10008c4c 	.word	0x10008c4c

1001563c <test>:
1001563c:	00000083 00004000 00000200 00c800c8     .....@..........
1001564c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001565c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001566c:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
1001567c:	5220706f 73646165 00000000 706d6153     op Reads....Samp
1001568c:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
1001569c:	666f206c 74657366 74616420 57482061     l offset data HW
100156ac:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100156bc:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100156cc:	6f727947 66666f20 20746573 61746164     Gyro offset data
100156dc:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100156ec:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100156fc:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
1001570c:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
1001571c:	6e756f66 00002e64 72617453 676e6974     found...Starting
1001572c:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
1001573c:	72746552 69766569 4220676e 65736169     Retrieving Biase
1001574c:	00000d73 72746552 69766569 4220676e     s...Retrieving B
1001575c:	65736169 72452073 20726f72 6f70202d     iases Error - po
1001576c:	62697373 4920656c 65204332 726f7272     ssible I2C error
1001577c:	00000000 72746552 69766569 5320676e     ....Retrieving S
1001578c:	69422054 73657361 00000000 72746552     T Biases....Retr
1001579c:	69766569 5320676e 69422054 73657361     ieving ST Biases
100157ac:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100157bc:	32492065 72652043 00726f72 64616552     e I2C error.Read
100157cc:	20676e69 2050544f 69676552 72657473     ing OTP Register
100157dc:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100157ec:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
100157fc:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
1001580c:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
1001581c:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
1001582c:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
1001583c:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
1001584c:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
1001585c:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
1001586c:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
1001587c:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
1001588c:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
1001589c:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100158ac:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100158bc:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
100158cc:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100158dc:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
100158ec:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
100158fc:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
1001590c:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
1001591c:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
1001592c:	6c207361 20737365 6e616874 2e372520     as less than %7.
1001593c:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
1001594c:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
1001595c:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
1001596c:	6553206c 5420666c 20747365 75736552     l Self Test Resu
1001597c:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
1001598c:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
1001599c:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100159ac:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100159bc:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
100159cc:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100159dc:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
100159ec:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
100159fc:	253a7369 72672064 65746165 68742072     is:%d greater th
10015a0c:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10015a1c:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10015a2c:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10015a3c:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10015a4c:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10015a5c:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10015a6c:	65542066 52207473 6c757365 203a7374     f Test Results: 
10015a7c:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10015a8c:	73655420 65522074 746c7573 25203a73      Test Results: %
10015a9c:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10015aac:	00000000                                ....

10015ab0 <hw>:
10015ab0:	04000069 01410080 01000000 00001333     i.....A.....3...

10015ac0 <mpu_6500_st_tb>:
10015ac0:	0a560a3c 0a8b0a70 0ac10aa6 0af80add     <.V.p...........
10015ad0:	0b310b15 0b6b0b4e 0ba50b88 0be10bc3     ..1.N.k.........
10015ae0:	0c1e0c00 0c5d0c3d 0c9c0c7c 0cdd0cbd     ....=.].|.......
10015af0:	0d1f0cfe 0d630d41 0da80d85 0dee0dcb     ....A.c.........
10015b00:	0e360e12 0e7f0e5a 0eca0ea4 0f160eef     ..6.Z...........
10015b10:	0f630f3c 0fb30f8b 10030fdb 1056102c     <.c.........,.V.
10015b20:	10aa1080 110010d4 1157112b 11b01183     ........+.W.....
10015b30:	120b11de 12681239 12c71297 132712f7     ....9.h.......'.
10015b40:	138a1359 13ef13bc 14551422 14be1489     Y.......".U.....
10015b50:	152914f3 1595155f 160415cd 1676163d     ..)._.......=.v.
10015b60:	16e916af 175f1724 17d8179b 18521815     ....$._.......R.
10015b70:	18cf1891 194f190f 19d11990 1a561a13     ......O.......V.
10015b80:	1ade1a9a 1b681b22 1bf51bae 1c851c3d     ....".h.....=...
10015b90:	1d181cce 1dad1d62 1e461df9 1ee21e94     ....b.....F.....
10015ba0:	1f811f31 20231fd1 20c82075 2171211c     1.....# u . .!q!
10015bb0:	221d21c7 22cd2274 23802326 243623da     .!."t"."&#.#.#6$
10015bc0:	24f12493 25af254f 2671260f 273626d3     .$.$O%.%.&q&.&6'
10015bd0:	2800279b 28ce2867 29a02936 2a762a0b     .'.(g(.(6).).*v*
10015be0:	2b512ae3 2c302bc0 2d132ca1 2dfb2d86     .*Q+.+0,.,.-.-.-
10015bf0:	2ee82e71 2fd92f60 30cf3053 31ca314c     q...`/./S0.0L1.1
10015c00:	32ca324a 33d0334c 34da3454 35ea3562     J2.2L3.3T4.4b5.5
10015c10:	37003674 381b378d 393c38aa 3a6239ce     t6.7.7.8.8<9.9b:
10015c20:	3b8f3af8 3cc13c27 3dfa3d5d 3f383e98     .:.;'<.<]=.=.>8?
10015c30:	407e3fda 41ca4123 431c4272 447643c8     .?~@#A.ArB.C.CvD
10015c40:	45d64525 473d4689 48ac47f4 4a224966     %E.E.F=G.G.HfI"J
10015c50:	4b9f4adf 4d244c61 4eb14dea 50464f7b     .J.KaL$M.M.N{OFP
10015c60:	51e35114 538952b5 5536545e 56ed5611     .Q.Q.R.S^T6U.V.V
10015c70:	58ac57cb 5a74598f 5c465b5c 5e215d32     .W.X.YtZ\[F\2]!^
10015c80:	60055f12 61f360fb 63eb62ee 65ed64eb     ._.`.`.a.b.c.d.e
10015c90:	67fa66f2 6a116904 6c336b20 6e5f6d48     .f.g.i.j k3lHm_n
10015ca0:	70976f7a 72db71b8 752a7401 77857656     zo.p.q.r.t*uVv.w
10015cb0:	79ec78b7 7c5f7b24 7edf7d9d 816c8024     .x.y${_|.}.~$.l.

10015cc0 <reg>:
10015cc0:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10015cd0:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10015ce0:	2a292827 67646334 00000049              '()*4cdgI...

10015cec <CSWTCH.122>:
10015cec:	01f400fa 07d003e8 8db3aab8 350d98b4     ...............5
10015cfc:	0000005d 006ccd4c 002cc90c 00765636     ]...L.l...,.6Vv.
10015d0c:	00664626 c4abf2fe dfdff1aa dfdfafbb     &Ff.............
10015d1c:	aaaaaab8 c5c388b0 000000c7 f3b9b1d8     ................
10015d2c:	b691a38b 00d9b409 f3b9b1da b691a38b     ................
10015d3c:	00dab4da                                ....

10015d40 <dmp_memory>:
10015d40:	00700000 24000000 02000000 00000300     ..p....$........
10015d50:	54006500 0000efff 0b0080fa 01008212     .e.T............
10015d60:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
10015d70:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
10015d80:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
10015d90:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
10015da0:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
10015db0:	00000020 00000000 00000040 00000060      .......@...`...
10015dc0:	00000c00 6e180c00 92060000 dfc0160a     .......n........
10015dd0:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
10015de0:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
10015df0:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
10015e00:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
10015e10:	00000000 b5421900 a2390000 65b30000     ......B...9....e
10015e20:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
10015e30:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
10015e40:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
10015e50:	00000100 00003200 000046ff 0000d463     .....2...F..c...
10015e60:	00000010 0000d604 0000cc04 0000cc04     ................
10015e70:	72100000 40000000 00000000 00000000     ...r...@........
10015e80:	02000600 07000500 00000000 00006400     .............d..
10015e90:	00000000 05000000 64000500 00002000     ...........d. ..
	...
10015ea8:	00400000 00030000 32000000 000098f8     ..@........2....
10015eb8:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
10015eec:	00100000 00000040 06000000 6ab20000     ....@..........j
10015efc:	00000200 83fb0100 00006800 00fcd900     .........h......
10015f0c:	83fff17c 00000000 00006500 e8036400     |........e...d..
10015f1c:	28006400 25000000 00000000 0000a016     .d.(...%........
10015f2c:	00100000 00100000 00002f00 f4010000     ........./......
10015f3c:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
10015f54:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
10015f64:	00000000 00060000 14000000 4d250000     ..............%M
10015f74:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
10015f90:	00001b00 00000000 00000000 00000000     ................
10015fa0:	00006400 00000800 00000000 00000000     .d..............
	...
10016000:	00001b00 00000000 00000000 0e000e00     ................
10016010:	c70a0000 00000400 32000000 9cffffff     ...........2....
10016020:	2b0b0000 02000000 01000000 64000000     ...+...........d
10016030:	0000e5ff 00000000 00000000 00000000     ................
10016040:	01000000 00000000 00000100 00000000     ................
10016050:	00800100 00800100 00800100 d3262400     .............$&.
	...
10016068:	10000600 3c009600 00000000 00000000     .......<........
	...
10016080:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
100160a8:	0084d717 00000003 00000000 00000000     ................
100160b8:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
100160d8:	85180302 00400000 03000000 03000000     ......@.........
	...
100160f0:	00000040 00000000 00000000 00000000     @...............
	...
10016124:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
10016140:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
10016150:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
10016160:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
10016170:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
10016180:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
10016190:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
100161a0:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
100161b0:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
100161c0:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
100161d0:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
100161e0:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
100161f0:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
10016200:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
10016210:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
10016220:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
10016230:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
10016240:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
10016250:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
10016260:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
10016270:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
10016280:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
10016290:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
100162a0:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
100162b0:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
100162c0:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
100162d0:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
100162e0:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
100162f0:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
10016300:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
10016310:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
10016320:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
10016330:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
10016340:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
10016350:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
10016360:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
10016370:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
10016380:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
10016390:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
100163a0:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
100163b0:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
100163c0:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
100163d0:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
100163e0:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
100163f0:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
10016400:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
10016410:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
10016420:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
10016430:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
10016440:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
10016450:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
10016460:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
10016470:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
10016480:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
10016490:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
100164a0:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
100164b0:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
100164c0:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
100164d0:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
100164e0:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
100164f0:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
10016500:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
10016510:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
10016520:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
10016530:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
10016540:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
10016550:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
10016560:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
10016570:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
10016580:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
10016590:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
100165a0:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
100165b0:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
100165c0:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
100165d0:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
100165e0:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
100165f0:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
10016600:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
10016610:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
10016620:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
10016630:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
10016640:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
10016650:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
10016660:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
10016670:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
10016680:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
10016690:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
100166a0:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
100166b0:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
100166c0:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
100166d0:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
100166e0:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
100166f0:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
10016700:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
10016710:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
10016720:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
10016730:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
10016740:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
10016750:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
10016760:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
10016770:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
10016780:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
10016790:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
100167a0:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
100167b0:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
100167c0:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
100167d0:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
100167e0:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
100167f0:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
10016800:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
10016810:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
10016820:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
10016830:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
10016840:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
10016850:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
10016860:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
10016870:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
10016880:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
10016890:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
100168a0:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
100168b0:	a890d8ff a899890d 21988010 89d82eda     ...........!....
100168c0:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
100168d0:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
100168e0:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
100168f0:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
10016900:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
10016910:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
10016920:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
10016930:	d800d9a6 0000fff1 1000c176 1000c176     ........v...v...
10016940:	1000c176 1000c176 1000c176 1000c176     v...v...v...v...
10016950:	1000c176 1000c176 1000c176 1000c176     v...v...v...v...
10016960:	1000c176 1000c176 1000c176 1000c176     v...v...v...v...
10016970:	1000c176 1000c176 1000c176 1000c176     v...v...v...v...
10016980:	1000c176 1000c192 1000c192 1000c192     v...............
10016990:	1000c192 1000c192 1000c192 1000c192     ................
100169a0:	1000c192 1000c192 1000c192 1000c1b4     ................
100169b0:	1000c1b4 1000c1b4 1000c1b4 1000c1b4     ................
100169c0:	1000c1b4 1000c1b4 1000c1b4 1000c1b4     ................
100169d0:	1000c1b4 1000c1d6 1000c1d6 1000c1d6     ................
100169e0:	1000c1d6 1000c1d6 1000c1d6 1000c1e4     ................
100169f0:	1000c1e4 1000c1e4 1000c1e4 1000c1e4     ................
10016a00:	1000c1e4 1000c1e4 1000c1e4 1000c1e4     ................
10016a10:	1000c1f2 1000c1f2 1000c150 1000c150     ........P...P...
10016a20:	1000c16a 1000c150 34333231 00003635     j...P...123456..
10016a30:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10016a40:	00000000                                ....

10016a44 <ble_mgr_gatt_server_handle>:
	...
10016a5c:	1000bb89 1000ba29 1000b305 00000000     ....)...........
10016a6c:	69766544 64206563 6f637369 63656e6e     Device disconnec
10016a7c:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10016a8c:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10016a9c:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10016aac:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10016abc:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10016acc:	46207473 656c6961 00000064 72696150     st Failed...Pair
10016adc:	20676e69 636f7270 72756465 6f632065     ing procedure co
10016aec:	656c706d 20646574 63637573 66737365     mpleted successf
10016afc:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10016b0c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10016b1c:	726f7473 68742065 61702065 6e697269     store the pairin
10016b2c:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10016b3c:	4e206e6f 7320746f 74726174 00006465     on Not started..
10016b4c:	76616c53 65532065 69727563 52207974     Slave Security R
10016b5c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10016b6c:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10016b7c:	71655220 74736575 41202d20 65687475      Request - Authe
10016b8c:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10016b9c:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10016bac:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10016bbc:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10016bcc:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10016bdc:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10016bec:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10016bfc:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10016c0c:	206e6f28 6568746f 65442072 65636976     (on other Device
10016c1c:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10016c2c:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10016c3c:	74616546 20657275 20746f4e 70707573     Feature Not supp
10016c4c:	6574726f 00000064 65746e45 20646572     orted...Entered 
10016c5c:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10016c6c:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10016c7c:	7020666f 20726565 69766564 69206563     of peer device i
10016c8c:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10016c9c:	00000000 61656c50 75206573 6961706e     ....Please unpai
10016cac:	68742072 65642065 65636976 6f726620     r the device fro
10016cbc:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10016ccc:	656c6962 65732029 6e697474 6d207367     bile) settings m
10016cdc:	20756e65 20646e61 72617473 61702074     enu and start pa
10016cec:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10016cfc:	69747079 52206e6f 65757165 52207473     yption Request R
10016d0c:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
10016d1c:	676e696e 61662020 64656c69 00000000     ning  failed....
10016d2c:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
10016d3c:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10016d4c:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10016d5c:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
10016d6c:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
10016d7c:	69747079 63206e6f 6c706d6f 64657465     yption completed
10016d8c:	63757320 73736563 6c6c7566 00000079      successfully...
10016d9c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10016dac:	646e756f 636e6520 74707972 206e6f69     ound encryption 
10016dbc:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
10016dcc:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
10016ddc:	69766564 72206563 68636165 2e2e6465     device reached..
10016dec:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
10016dfc:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10016e0c:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
10016e1c:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10016e2c:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10016e3c:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10016e4c:	63206573 6b636568 65687420 776f7020     se check the pow
10016e5c:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10016e6c:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10016e7c:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
10016e8c:	00000045 69766544 6e206563 20656d61     E...Device name 
10016e9c:	20746573 6c696166 00006465 61204442     set failed..BD a
10016eac:	65726464 67207373 66207465 656c6961     ddress get faile
10016ebc:	00000064 41204442 65726464 303a7373     d...BD Address:0
10016ecc:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10016edc:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10016eec:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10016efc:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10016f0c:	61727567 6e6f6974 69616620 0064656c     guration failed.
10016f1c:	20746553 20454c42 69766544 41206563     Set BLE Device A
10016f2c:	65726464 66207373 656c6961 00000064     ddress failed...
10016f3c:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10016f4c:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10016f5c:	65732065 69727563 72207974 65757165     e security reque
10016f6c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10016f7c:	65746365 6f742064 65657020 65642072     ected to peer de
10016f8c:	65636976 74697720 64612068 73657264     vice with addres
10016f9c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10016fac:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10016fbc:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10016fcc:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10016fdc:	61522067 6d6f646e 64646120 73736572     g Random address
10016fec:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10016ffc:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001700c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001701c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001702c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001703c:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001704c:	53202d20 75746174 25203a73 00000064      - Status: %d...
1001705c:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001706c:	61642074 73206174 66207465 656c6961     t data set faile
1001707c:	00000064                                d...

10017080 <ble_mgr_gap_handle>:
10017080:	1000bb8d 1000bb0d 1000ba01 00000000     ................
10017090:	00000000 1000be85 1000b315 1000b311     ................
100170a0:	1000b4b1 1000b3b1 1000b695 1000b4c9     ................
100170b0:	1000b7d1 1000b92d 1000ba59 1000c091     ....-...Y.......
	...
100170cc:	1000dd3c 1000dd30 1000dd24 1000dd18     <...0...$.......
100170dc:	1000dd0c 1000dd00 1000dcf2 1000dce4     ................
100170ec:	1000dcd6 1000dcc8 1000dcba 1000dcac     ................
100170fc:	1000dc9e 1000dc90 1000dc82 1000dc74     ............t...
1001710c:	1000dc66 1000dc58 1000dc4a 1000dc3c     f...X...J...<...
1001711c:	1000dc2e 1000dc20 1000dc12 1000dc04     .... ...........
1001712c:	1000dbf6 1000dbe8 1000dbda 1000dbce     ................
1001713c:	1000dbc2 1000dbb6 1000dbaa 1000db9e     ................
1001714c:	1000db92 1000db86 1000db7a 1000db6c     ........z...l...
1001715c:	1000db5e 1000db50 1000db42 1000db34     ^...P...B...4...
1001716c:	1000db26 1000db18 1000db0a 1000dafc     &...............
1001717c:	1000daee 1000dae0 1000dad2 1000dac4     ................
1001718c:	1000dab6 1000daa8 1000da9a 1000da8e     ................
1001719c:	1000da82 1000dd48 1000e17a 1000e172     ....H...z...r...
100171ac:	1000e16a 1000e152 1000e13c 1000e0be     j...R...<.......
100171bc:	1000e0a6 1000e08e 1000e076 1000e05e     ........v...^...
100171cc:	1000e046 1000e02e 1000e016 1000dffe     F...............
100171dc:	1000e182 1000e182 1000e182 1000e182     ................
100171ec:	1000e182 1000e182 1000e182 1000e182     ................
100171fc:	1000dfe6 1000dfce 1000dfb6 1000dfa0     ................
1001720c:	1000df88 1000e182 1000e182 1000e182     ................
1001721c:	1000e182 1000e182 1000e182 1000df70     ............p...
1001722c:	1000df58 1000df40 1000df28 1000e182     X...@...(.......
1001723c:	1000df10 1000def8 1000e182 1000e182     ................
1001724c:	1000dee2 1000decc 1000deb6 1000dea0     ................
1001725c:	1000e182 1000e182 1000e182 1000e182     ................
1001726c:	1000e182 1000e182 1000e182 1000e182     ................
1001727c:	1000de98 1000de90 1000de88 1000de74     ............t...
1001728c:	1000de5c 1000de44 1000de2c 1000de14     \...D...,.......
1001729c:	1000ddfc 1000dde4 1000ddce 1000ddb8     ................
100172ac:	1000dda0 1000dd88 4f464946 6425203a     ........FIFO: %d
100172bc:	20642520 202c6425 25206425 64252064      %d %d, %d %d %d
100172cc:	6c25202c 6c252064 6c252064 6c252064     , %ld %ld %ld %l
100172dc:	00000064 6e75725b 6c65735f 65745f66     d...[run_self_te
100172ec:	095d7473 79470909 66206f72 656c6961     st]...Gyro faile
100172fc:	00002164 6e75725b 6c65735f 65745f66     d!..[run_self_te
1001730c:	095d7473 63410909 206c6563 6c696166     st]...Accel fail
1001731c:	00216465 6e75725b 6c65735f 65745f66     ed!.[run_self_te
1001732c:	095d7473 6f430909 7361706d 61662073     st]...Compass fa
1001733c:	64656c69 00000021 4c504d65 312e3520     iled!...eMPL 5.1
1001734c:	6d744100 43206c65 2e70726f              .Atmel Corp.

10017358 <CSWTCH.47>:
10017358:	03010300 03030303 03030303 00020303     ................
10017368:	74727173 00000066 736f6361 00000066     sqrtf...acosf...
10017378:	1001222a 1001214e 1001220c 100121e4     *"..N!..."...!..
10017388:	1001220c 100121d8 1001220c 100121e4     ."...!..."...!..
10017398:	1001214e 1001214e 100121d8 100121e4     N!..N!...!...!..
100173a8:	10012290 10012290 10012290 10012212     ."..."..."..."..
100173b8:	1001214e 1001214e 100121f8 100121e2     N!..N!...!...!..
100173c8:	100121f8 100121d8 100121f8 100121e2     .!...!...!...!..
100173d8:	1001214e 1001214e 100121d8 100121e2     N!..N!...!...!..
100173e8:	10012290 10012290 10012290 1001229c     ."..."..."..."..
100173f8:	10012588 100124e6 100124e6 100124e4     .%...$...$...$..
10017408:	1001257a 1001257a 10012570 100124e4     z%..z%..p%...$..
10017418:	1001257a 10012570 1001257a 100124e4     z%..p%..z%...$..
10017428:	10012580 10012580 10012580 1001260a     .%...%...%...&..
10017438:	10012d10 10012bde 10012ce4 10012bd4     .-...+...,...+..
10017448:	10012ce4 10012cee 10012ce4 10012bd4     .,...,...,...+..
10017458:	10012bde 10012bde 10012cee 10012bd4     .+...+...,...+..
10017468:	10012bca 10012bca 10012bca 10012f40     .+...+...+..@/..
10017478:	10013558 10013418 10013418 10013416     X5...4...4...4..
10017488:	10013530 10013530 10013522 10013416     05..05.."5...4..
10017498:	10013530 10013522 10013530 10013416     05.."5..05...4..
100174a8:	10013538 10013538 10013538 10013738     85..85..85..87..
100174b8:	00000043                                C...

100174bc <_global_impure_ptr>:
100174bc:	100175c8                                .u..

100174c0 <__sf_fake_stdin>:
	...

100174e0 <__sf_fake_stdout>:
	...

10017500 <__sf_fake_stderr>:
	...
10017520:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10017530:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10017540:	31300046 35343332 39383736 64636261     F.0123456789abcd
10017550:	00006665                                ef..

10017554 <_init>:
10017554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017556:	46c0      	nop			; (mov r8, r8)
10017558:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001755a:	bc08      	pop	{r3}
1001755c:	469e      	mov	lr, r3
1001755e:	4770      	bx	lr

10017560 <__init_array_start>:
10017560:	10008095 	.word	0x10008095

10017564 <_fini>:
10017564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017566:	46c0      	nop			; (mov r8, r8)
10017568:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001756a:	bc08      	pop	{r3}
1001756c:	469e      	mov	lr, r3
1001756e:	4770      	bx	lr

10017570 <__fini_array_start>:
10017570:	1000806d 	.word	0x1000806d
