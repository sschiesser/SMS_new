
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b818  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10013818  10013818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002800  100138c4  100138c4  000138c4  2**2
                  ALLOC
  3 .stack        00000804  100160c4  100160c4  000138c4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000138c4  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000138ec  2**0
                  CONTENTS, READONLY
  6 .debug_info   000292b8  00000000  00000000  000139a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031f1  00000000  00000000  0003cc58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009374  00000000  00000000  0003fe49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000970  00000000  00000000  000491bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a98  00000000  00000000  00049b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023a66  00000000  00000000  0004a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3a5  00000000  00000000  0006e02b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00143cb7  00000000  00000000  0007b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000258c  00000000  00000000  001bf088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10013818 	.word	0x10013818
10008068:	10013818 	.word	0x10013818
1000806c:	100138c4 	.word	0x100138c4
10008070:	100160c4 	.word	0x100160c4
10008074:	100138c4 	.word	0x100138c4
10008078:	1001381c 	.word	0x1001381c
1000807c:	100138c8 	.word	0x100138c8
10008080:	1001151d 	.word	0x1001151d
10008084:	1000ce61 	.word	0x1000ce61

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100138c4 	.word	0x100138c4
100080a8:	00000000 	.word	0x00000000
100080ac:	10013818 	.word	0x10013818

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100138c8 	.word	0x100138c8
100080dc:	10013818 	.word	0x10013818
100080e0:	10013818 	.word	0x10013818
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c54d 	.word	0x1000c54d
10008114:	1000f825 	.word	0x1000f825
10008118:	1001381c 	.word	0x1001381c
1000811c:	000f4240 	.word	0x000f4240
10008120:	10013818 	.word	0x10013818
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	1001381c 	.word	0x1001381c
10008150:	e000e010 	.word	0xe000e010

10008154 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008154:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008156:	4b0d      	ldr	r3, [pc, #52]	; (1000818c <dualtimer_isr_handler+0x38>)
10008158:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000815a:	2b00      	cmp	r3, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000815e:	2201      	movs	r2, #1
10008160:	4b0a      	ldr	r3, [pc, #40]	; (1000818c <dualtimer_isr_handler+0x38>)
10008162:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008164:	4b0a      	ldr	r3, [pc, #40]	; (10008190 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000816c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000816e:	2334      	movs	r3, #52	; 0x34
10008170:	4a06      	ldr	r2, [pc, #24]	; (1000818c <dualtimer_isr_handler+0x38>)
10008172:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008174:	2b00      	cmp	r3, #0
10008176:	d007      	beq.n	10008188 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008178:	2101      	movs	r1, #1
1000817a:	232c      	movs	r3, #44	; 0x2c
1000817c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000817e:	4b05      	ldr	r3, [pc, #20]	; (10008194 <dualtimer_isr_handler+0x40>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d000      	beq.n	10008188 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008186:	4798      	blx	r3
	}
}
10008188:	bd10      	pop	{r4, pc}
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40001000 	.word	0x40001000
10008190:	100138e0 	.word	0x100138e0
10008194:	100138e4 	.word	0x100138e4

10008198 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008198:	2301      	movs	r3, #1
1000819a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000819c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000819e:	2202      	movs	r2, #2
100081a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100081a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081a8:	2200      	movs	r2, #0
100081aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100081ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100081b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100081b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100081b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100081b6:	7602      	strb	r2, [r0, #24]
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)

100081bc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081bc:	2800      	cmp	r0, #0
100081be:	d105      	bne.n	100081cc <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c0:	4a06      	ldr	r2, [pc, #24]	; (100081dc <dualtimer_enable+0x20>)
100081c2:	7a11      	ldrb	r1, [r2, #8]
100081c4:	2380      	movs	r3, #128	; 0x80
100081c6:	430b      	orrs	r3, r1
100081c8:	7213      	strb	r3, [r2, #8]
100081ca:	e005      	b.n	100081d8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081cc:	4903      	ldr	r1, [pc, #12]	; (100081dc <dualtimer_enable+0x20>)
100081ce:	2228      	movs	r2, #40	; 0x28
100081d0:	5c88      	ldrb	r0, [r1, r2]
100081d2:	2380      	movs	r3, #128	; 0x80
100081d4:	4303      	orrs	r3, r0
100081d6:	548b      	strb	r3, [r1, r2]
	}
}
100081d8:	4770      	bx	lr
100081da:	46c0      	nop			; (mov r8, r8)
100081dc:	40001000 	.word	0x40001000

100081e0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081e0:	b570      	push	{r4, r5, r6, lr}
100081e2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081e4:	2004      	movs	r0, #4
100081e6:	4b39      	ldr	r3, [pc, #228]	; (100082cc <dualtimer_init+0xec>)
100081e8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ea:	7823      	ldrb	r3, [r4, #0]
100081ec:	2b00      	cmp	r3, #0
100081ee:	d102      	bne.n	100081f6 <dualtimer_init+0x16>
100081f0:	7b23      	ldrb	r3, [r4, #12]
100081f2:	2b00      	cmp	r3, #0
100081f4:	d065      	beq.n	100082c2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081f6:	4936      	ldr	r1, [pc, #216]	; (100082d0 <dualtimer_init+0xf0>)
100081f8:	68ca      	ldr	r2, [r1, #12]
100081fa:	2320      	movs	r3, #32
100081fc:	4313      	orrs	r3, r2
100081fe:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008200:	7e22      	ldrb	r2, [r4, #24]
10008202:	698b      	ldr	r3, [r1, #24]
10008204:	2003      	movs	r0, #3
10008206:	4002      	ands	r2, r0
10008208:	0112      	lsls	r2, r2, #4
1000820a:	302d      	adds	r0, #45	; 0x2d
1000820c:	4383      	bics	r3, r0
1000820e:	4313      	orrs	r3, r2
10008210:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008212:	7823      	ldrb	r3, [r4, #0]
10008214:	2b00      	cmp	r3, #0
10008216:	d026      	beq.n	10008266 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008218:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000821a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000821c:	2b00      	cmp	r3, #0
1000821e:	d003      	beq.n	10008228 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008220:	3b02      	subs	r3, #2
10008222:	425d      	negs	r5, r3
10008224:	415d      	adcs	r5, r3
10008226:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008228:	78a2      	ldrb	r2, [r4, #2]
1000822a:	0052      	lsls	r2, r2, #1
1000822c:	2502      	movs	r5, #2
1000822e:	402a      	ands	r2, r5
10008230:	78e3      	ldrb	r3, [r4, #3]
10008232:	009b      	lsls	r3, r3, #2
10008234:	350a      	adds	r5, #10
10008236:	402b      	ands	r3, r5
10008238:	431a      	orrs	r2, r3
1000823a:	0015      	movs	r5, r2
1000823c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000823e:	7923      	ldrb	r3, [r4, #4]
10008240:	2b00      	cmp	r3, #0
10008242:	d001      	beq.n	10008248 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008244:	2320      	movs	r3, #32
10008246:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008248:	4b22      	ldr	r3, [pc, #136]	; (100082d4 <dualtimer_init+0xf4>)
1000824a:	68a2      	ldr	r2, [r4, #8]
1000824c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000824e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008250:	491f      	ldr	r1, [pc, #124]	; (100082d0 <dualtimer_init+0xf0>)
10008252:	22c4      	movs	r2, #196	; 0xc4
10008254:	0052      	lsls	r2, r2, #1
10008256:	5c88      	ldrb	r0, [r1, r2]
10008258:	2301      	movs	r3, #1
1000825a:	4303      	orrs	r3, r0
1000825c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000825e:	2000      	movs	r0, #0
10008260:	4b1d      	ldr	r3, [pc, #116]	; (100082d8 <dualtimer_init+0xf8>)
10008262:	4798      	blx	r3
10008264:	e000      	b.n	10008268 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008266:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008268:	7b23      	ldrb	r3, [r4, #12]
1000826a:	2b00      	cmp	r3, #0
1000826c:	d029      	beq.n	100082c2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000826e:	7b63      	ldrb	r3, [r4, #13]
10008270:	2b00      	cmp	r3, #0
10008272:	d005      	beq.n	10008280 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008274:	2b01      	cmp	r3, #1
10008276:	d005      	beq.n	10008284 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008278:	2b02      	cmp	r3, #2
1000827a:	d104      	bne.n	10008286 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000827c:	2540      	movs	r5, #64	; 0x40
1000827e:	e002      	b.n	10008286 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008280:	2501      	movs	r5, #1
10008282:	e000      	b.n	10008286 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008284:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008286:	7ba3      	ldrb	r3, [r4, #14]
10008288:	005b      	lsls	r3, r3, #1
1000828a:	2102      	movs	r1, #2
1000828c:	4019      	ands	r1, r3
1000828e:	7be2      	ldrb	r2, [r4, #15]
10008290:	0092      	lsls	r2, r2, #2
10008292:	230c      	movs	r3, #12
10008294:	4013      	ands	r3, r2
10008296:	430b      	orrs	r3, r1
10008298:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000829a:	7c23      	ldrb	r3, [r4, #16]
1000829c:	2b00      	cmp	r3, #0
1000829e:	d001      	beq.n	100082a4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100082a0:	2320      	movs	r3, #32
100082a2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a4:	6962      	ldr	r2, [r4, #20]
100082a6:	4b0b      	ldr	r3, [pc, #44]	; (100082d4 <dualtimer_init+0xf4>)
100082a8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2228      	movs	r2, #40	; 0x28
100082ac:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	4908      	ldr	r1, [pc, #32]	; (100082d0 <dualtimer_init+0xf0>)
100082b0:	3261      	adds	r2, #97	; 0x61
100082b2:	32ff      	adds	r2, #255	; 0xff
100082b4:	5c88      	ldrb	r0, [r1, r2]
100082b6:	2302      	movs	r3, #2
100082b8:	4303      	orrs	r3, r0
100082ba:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100082bc:	2001      	movs	r0, #1
100082be:	4b06      	ldr	r3, [pc, #24]	; (100082d8 <dualtimer_init+0xf8>)
100082c0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	4906      	ldr	r1, [pc, #24]	; (100082dc <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b06      	ldr	r3, [pc, #24]	; (100082e0 <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}
100082cc:	1000c8b5 	.word	0x1000c8b5
100082d0:	4000b000 	.word	0x4000b000
100082d4:	40001000 	.word	0x40001000
100082d8:	100081bd 	.word	0x100081bd
100082dc:	10008155 	.word	0x10008155
100082e0:	1000cd1d 	.word	0x1000cd1d

100082e4 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082e6:	4647      	mov	r7, r8
100082e8:	b480      	push	{r7}
100082ea:	b082      	sub	sp, #8
100082ec:	0017      	movs	r7, r2
100082ee:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082f0:	b280      	uxth	r0, r0
100082f2:	4b27      	ldr	r3, [pc, #156]	; (10008390 <i2c_read+0xac>)
100082f4:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100082f6:	2201      	movs	r2, #1
100082f8:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082fa:	685b      	ldr	r3, [r3, #4]
100082fc:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100082fe:	4b25      	ldr	r3, [pc, #148]	; (10008394 <i2c_read+0xb0>)
10008300:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008302:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
10008304:	2200      	movs	r2, #0
10008306:	466b      	mov	r3, sp
10008308:	80da      	strh	r2, [r3, #6]
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000830a:	4d21      	ldr	r5, [pc, #132]	; (10008390 <i2c_read+0xac>)
1000830c:	4c22      	ldr	r4, [pc, #136]	; (10008398 <i2c_read+0xb4>)
1000830e:	4e23      	ldr	r6, [pc, #140]	; (1000839c <i2c_read+0xb8>)
10008310:	e009      	b.n	10008326 <i2c_read+0x42>
        if(timeout++ >= I2C_TIMEOUT) {
10008312:	466b      	mov	r3, sp
10008314:	1d9a      	adds	r2, r3, #6
10008316:	88db      	ldrh	r3, [r3, #6]
10008318:	b29b      	uxth	r3, r3
1000831a:	1c59      	adds	r1, r3, #1
1000831c:	b289      	uxth	r1, r1
1000831e:	8011      	strh	r1, [r2, #0]
10008320:	4a1f      	ldr	r2, [pc, #124]	; (100083a0 <i2c_read+0xbc>)
10008322:	4293      	cmp	r3, r2
10008324:	d828      	bhi.n	10008378 <i2c_read+0x94>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008326:	0029      	movs	r1, r5
10008328:	0020      	movs	r0, r4
1000832a:	47b0      	blx	r6
1000832c:	2800      	cmp	r0, #0
1000832e:	d1f0      	bne.n	10008312 <i2c_read+0x2e>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    
    timeout = 0;
10008330:	2200      	movs	r2, #0
10008332:	466b      	mov	r3, sp
10008334:	80da      	strh	r2, [r3, #6]
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008336:	4d17      	ldr	r5, [pc, #92]	; (10008394 <i2c_read+0xb0>)
10008338:	4c17      	ldr	r4, [pc, #92]	; (10008398 <i2c_read+0xb4>)
1000833a:	4e1a      	ldr	r6, [pc, #104]	; (100083a4 <i2c_read+0xc0>)
1000833c:	e009      	b.n	10008352 <i2c_read+0x6e>
        if(timeout++ >= I2C_TIMEOUT) {
1000833e:	466b      	mov	r3, sp
10008340:	1d9a      	adds	r2, r3, #6
10008342:	88db      	ldrh	r3, [r3, #6]
10008344:	b29b      	uxth	r3, r3
10008346:	1c59      	adds	r1, r3, #1
10008348:	b289      	uxth	r1, r1
1000834a:	8011      	strh	r1, [r2, #0]
1000834c:	4a14      	ldr	r2, [pc, #80]	; (100083a0 <i2c_read+0xbc>)
1000834e:	4293      	cmp	r3, r2
10008350:	d815      	bhi.n	1000837e <i2c_read+0x9a>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008352:	0029      	movs	r1, r5
10008354:	0020      	movs	r0, r4
10008356:	47b0      	blx	r6
10008358:	2800      	cmp	r0, #0
1000835a:	d1f0      	bne.n	1000833e <i2c_read+0x5a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000835c:	2f00      	cmp	r7, #0
1000835e:	d011      	beq.n	10008384 <i2c_read+0xa0>
10008360:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008362:	490c      	ldr	r1, [pc, #48]	; (10008394 <i2c_read+0xb0>)
10008364:	684a      	ldr	r2, [r1, #4]
10008366:	5cd2      	ldrb	r2, [r2, r3]
10008368:	4640      	mov	r0, r8
1000836a:	54c2      	strb	r2, [r0, r3]
1000836c:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000836e:	b2da      	uxtb	r2, r3
10008370:	42ba      	cmp	r2, r7
10008372:	d3f7      	bcc.n	10008364 <i2c_read+0x80>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008374:	2000      	movs	r0, #0
10008376:	e006      	b.n	10008386 <i2c_read+0xa2>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008378:	2001      	movs	r0, #1
1000837a:	4240      	negs	r0, r0
1000837c:	e003      	b.n	10008386 <i2c_read+0xa2>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000837e:	2001      	movs	r0, #1
10008380:	4240      	negs	r0, r0
10008382:	e000      	b.n	10008386 <i2c_read+0xa2>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008384:	2000      	movs	r0, #0
}
10008386:	b002      	add	sp, #8
10008388:	bc04      	pop	{r2}
1000838a:	4690      	mov	r8, r2
1000838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000838e:	46c0      	nop			; (mov r8, r8)
10008390:	10014ec0 	.word	0x10014ec0
10008394:	10014eb8 	.word	0x10014eb8
10008398:	10015b3c 	.word	0x10015b3c
1000839c:	1000c4a5 	.word	0x1000c4a5
100083a0:	000003e7 	.word	0x000003e7
100083a4:	1000c44d 	.word	0x1000c44d

100083a8 <i2c_write>:
* labs(long x)
* fabsf(float x)
* min(int a, int b)
*/
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100083a8:	b570      	push	{r4, r5, r6, lr}
100083aa:	b082      	sub	sp, #8
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
100083ac:	2500      	movs	r5, #0
100083ae:	466c      	mov	r4, sp
100083b0:	80e5      	strh	r5, [r4, #6]
    i2c_wpacket.address = (uint8_t)slave_addr;
100083b2:	4c15      	ldr	r4, [pc, #84]	; (10008408 <i2c_write+0x60>)
100083b4:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
100083b6:	1c50      	adds	r0, r2, #1
100083b8:	b2c0      	uxtb	r0, r0
100083ba:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100083bc:	6860      	ldr	r0, [r4, #4]
100083be:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100083c0:	2a00      	cmp	r2, #0
100083c2:	d008      	beq.n	100083d6 <i2c_write+0x2e>
100083c4:	2000      	movs	r0, #0
100083c6:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100083c8:	5c18      	ldrb	r0, [r3, r0]
100083ca:	6865      	ldr	r5, [r4, #4]
100083cc:	5468      	strb	r0, [r5, r1]
100083ce:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083d0:	b2c9      	uxtb	r1, r1
100083d2:	428a      	cmp	r2, r1
100083d4:	d8f7      	bhi.n	100083c6 <i2c_write+0x1e>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083d6:	4d0c      	ldr	r5, [pc, #48]	; (10008408 <i2c_write+0x60>)
100083d8:	4c0c      	ldr	r4, [pc, #48]	; (1000840c <i2c_write+0x64>)
100083da:	4e0d      	ldr	r6, [pc, #52]	; (10008410 <i2c_write+0x68>)
100083dc:	e009      	b.n	100083f2 <i2c_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100083de:	466b      	mov	r3, sp
100083e0:	1d99      	adds	r1, r3, #6
100083e2:	88db      	ldrh	r3, [r3, #6]
100083e4:	b29b      	uxth	r3, r3
100083e6:	1c5a      	adds	r2, r3, #1
100083e8:	b292      	uxth	r2, r2
100083ea:	800a      	strh	r2, [r1, #0]
100083ec:	4a09      	ldr	r2, [pc, #36]	; (10008414 <i2c_write+0x6c>)
100083ee:	4293      	cmp	r3, r2
100083f0:	d805      	bhi.n	100083fe <i2c_write+0x56>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083f2:	0029      	movs	r1, r5
100083f4:	0020      	movs	r0, r4
100083f6:	47b0      	blx	r6
100083f8:	2800      	cmp	r0, #0
100083fa:	d1f0      	bne.n	100083de <i2c_write+0x36>
100083fc:	e001      	b.n	10008402 <i2c_write+0x5a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100083fe:	2001      	movs	r0, #1
10008400:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008402:	b002      	add	sp, #8
10008404:	bd70      	pop	{r4, r5, r6, pc}
10008406:	46c0      	nop			; (mov r8, r8)
10008408:	10014ec0 	.word	0x10014ec0
1000840c:	10015b3c 	.word	0x10015b3c
10008410:	1000c471 	.word	0x1000c471
10008414:	000003e7 	.word	0x000003e7

10008418 <set_int_enable>:
*  interrupt is used.
*  @param[in]  enable      1 to enable interrupt.
*  @return     0 if successful.
*/
static int set_int_enable(unsigned char enable)
{
10008418:	b510      	push	{r4, lr}
1000841a:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
1000841c:	2324      	movs	r3, #36	; 0x24
1000841e:	4a25      	ldr	r2, [pc, #148]	; (100084b4 <set_int_enable+0x9c>)
10008420:	5cd3      	ldrb	r3, [r2, r3]
10008422:	2b00      	cmp	r3, #0
10008424:	d019      	beq.n	1000845a <set_int_enable+0x42>
        if (enable) tmp = BIT_DMP_INT_EN; 
10008426:	2800      	cmp	r0, #0
10008428:	d003      	beq.n	10008432 <set_int_enable+0x1a>
1000842a:	2202      	movs	r2, #2
1000842c:	466b      	mov	r3, sp
1000842e:	71da      	strb	r2, [r3, #7]
10008430:	e002      	b.n	10008438 <set_int_enable+0x20>
        else tmp = 0x00;        
10008432:	2200      	movs	r2, #0
10008434:	466b      	mov	r3, sp
10008436:	71da      	strb	r2, [r3, #7]
        
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp)) return -1;
10008438:	4b1e      	ldr	r3, [pc, #120]	; (100084b4 <set_int_enable+0x9c>)
1000843a:	681a      	ldr	r2, [r3, #0]
1000843c:	7c51      	ldrb	r1, [r2, #17]
1000843e:	685b      	ldr	r3, [r3, #4]
10008440:	7818      	ldrb	r0, [r3, #0]
10008442:	466b      	mov	r3, sp
10008444:	3307      	adds	r3, #7
10008446:	2201      	movs	r2, #1
10008448:	4c1b      	ldr	r4, [pc, #108]	; (100084b8 <set_int_enable+0xa0>)
1000844a:	47a0      	blx	r4
1000844c:	2800      	cmp	r0, #0
1000844e:	d127      	bne.n	100084a0 <set_int_enable+0x88>
        
        st.chip_cfg.int_enable = tmp;
10008450:	466b      	mov	r3, sp
10008452:	79da      	ldrb	r2, [r3, #7]
10008454:	4b17      	ldr	r3, [pc, #92]	; (100084b4 <set_int_enable+0x9c>)
10008456:	745a      	strb	r2, [r3, #17]
10008458:	e02a      	b.n	100084b0 <set_int_enable+0x98>
    }
    else {
        if (!st.chip_cfg.sensors) return -1;
1000845a:	4b16      	ldr	r3, [pc, #88]	; (100084b4 <set_int_enable+0x9c>)
1000845c:	7a9b      	ldrb	r3, [r3, #10]
1000845e:	2b00      	cmp	r3, #0
10008460:	d021      	beq.n	100084a6 <set_int_enable+0x8e>
        
        if (enable && st.chip_cfg.int_enable) return 0;
10008462:	2800      	cmp	r0, #0
10008464:	d008      	beq.n	10008478 <set_int_enable+0x60>
10008466:	4b13      	ldr	r3, [pc, #76]	; (100084b4 <set_int_enable+0x9c>)
10008468:	7c5b      	ldrb	r3, [r3, #17]
1000846a:	2000      	movs	r0, #0
1000846c:	2b00      	cmp	r3, #0
1000846e:	d11f      	bne.n	100084b0 <set_int_enable+0x98>
        
        if (enable) tmp = BIT_DATA_RDY_EN;
10008470:	2201      	movs	r2, #1
10008472:	466b      	mov	r3, sp
10008474:	71da      	strb	r2, [r3, #7]
10008476:	e002      	b.n	1000847e <set_int_enable+0x66>
        else tmp = 0x00;
10008478:	2200      	movs	r2, #0
1000847a:	466b      	mov	r3, sp
1000847c:	71da      	strb	r2, [r3, #7]
        
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp)) return -1;
1000847e:	4b0d      	ldr	r3, [pc, #52]	; (100084b4 <set_int_enable+0x9c>)
10008480:	681a      	ldr	r2, [r3, #0]
10008482:	7c51      	ldrb	r1, [r2, #17]
10008484:	685b      	ldr	r3, [r3, #4]
10008486:	7818      	ldrb	r0, [r3, #0]
10008488:	466b      	mov	r3, sp
1000848a:	3307      	adds	r3, #7
1000848c:	2201      	movs	r2, #1
1000848e:	4c0a      	ldr	r4, [pc, #40]	; (100084b8 <set_int_enable+0xa0>)
10008490:	47a0      	blx	r4
10008492:	2800      	cmp	r0, #0
10008494:	d10a      	bne.n	100084ac <set_int_enable+0x94>
        
        st.chip_cfg.int_enable = tmp;
10008496:	466b      	mov	r3, sp
10008498:	79da      	ldrb	r2, [r3, #7]
1000849a:	4b06      	ldr	r3, [pc, #24]	; (100084b4 <set_int_enable+0x9c>)
1000849c:	745a      	strb	r2, [r3, #17]
1000849e:	e007      	b.n	100084b0 <set_int_enable+0x98>

    if (st.chip_cfg.dmp_on) {
        if (enable) tmp = BIT_DMP_INT_EN; 
        else tmp = 0x00;        
        
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp)) return -1;
100084a0:	2001      	movs	r0, #1
100084a2:	4240      	negs	r0, r0
100084a4:	e004      	b.n	100084b0 <set_int_enable+0x98>
        
        st.chip_cfg.int_enable = tmp;
    }
    else {
        if (!st.chip_cfg.sensors) return -1;
100084a6:	2001      	movs	r0, #1
100084a8:	4240      	negs	r0, r0
100084aa:	e001      	b.n	100084b0 <set_int_enable+0x98>
        if (enable && st.chip_cfg.int_enable) return 0;
        
        if (enable) tmp = BIT_DATA_RDY_EN;
        else tmp = 0x00;
        
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp)) return -1;
100084ac:	2001      	movs	r0, #1
100084ae:	4240      	negs	r0, r0
        
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084b0:	b002      	add	sp, #8
100084b2:	bd10      	pop	{r4, pc}
100084b4:	10013820 	.word	0x10013820
100084b8:	100083a9 	.word	0x100083a9

100084bc <mpu_reset_fifo>:
/**
*  @brief  Reset FIFO read/write pointers.
*  @return 0 if successful.
*/
int mpu_reset_fifo(void)
{
100084bc:	b510      	push	{r4, lr}
100084be:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100084c0:	4b79      	ldr	r3, [pc, #484]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084c2:	7a9b      	ldrb	r3, [r3, #10]
100084c4:	2b00      	cmp	r3, #0
100084c6:	d100      	bne.n	100084ca <mpu_reset_fifo+0xe>
100084c8:	e0ce      	b.n	10008668 <mpu_reset_fifo+0x1ac>
    return -1;

    data = 0;
100084ca:	466b      	mov	r3, sp
100084cc:	3307      	adds	r3, #7
100084ce:	2200      	movs	r2, #0
100084d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100084d2:	4a75      	ldr	r2, [pc, #468]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084d4:	6811      	ldr	r1, [r2, #0]
100084d6:	7c49      	ldrb	r1, [r1, #17]
100084d8:	6852      	ldr	r2, [r2, #4]
100084da:	7810      	ldrb	r0, [r2, #0]
100084dc:	2201      	movs	r2, #1
100084de:	4c73      	ldr	r4, [pc, #460]	; (100086ac <mpu_reset_fifo+0x1f0>)
100084e0:	47a0      	blx	r4
100084e2:	2800      	cmp	r0, #0
100084e4:	d000      	beq.n	100084e8 <mpu_reset_fifo+0x2c>
100084e6:	e0c2      	b.n	1000866e <mpu_reset_fifo+0x1b2>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084e8:	4b6f      	ldr	r3, [pc, #444]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084ea:	681a      	ldr	r2, [r3, #0]
100084ec:	7951      	ldrb	r1, [r2, #5]
100084ee:	685b      	ldr	r3, [r3, #4]
100084f0:	7818      	ldrb	r0, [r3, #0]
100084f2:	466b      	mov	r3, sp
100084f4:	3307      	adds	r3, #7
100084f6:	2201      	movs	r2, #1
100084f8:	4c6c      	ldr	r4, [pc, #432]	; (100086ac <mpu_reset_fifo+0x1f0>)
100084fa:	47a0      	blx	r4
100084fc:	2800      	cmp	r0, #0
100084fe:	d000      	beq.n	10008502 <mpu_reset_fifo+0x46>
10008500:	e0b8      	b.n	10008674 <mpu_reset_fifo+0x1b8>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008502:	4b69      	ldr	r3, [pc, #420]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008504:	681a      	ldr	r2, [r3, #0]
10008506:	7911      	ldrb	r1, [r2, #4]
10008508:	685b      	ldr	r3, [r3, #4]
1000850a:	7818      	ldrb	r0, [r3, #0]
1000850c:	466b      	mov	r3, sp
1000850e:	3307      	adds	r3, #7
10008510:	2201      	movs	r2, #1
10008512:	4c66      	ldr	r4, [pc, #408]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008514:	47a0      	blx	r4
10008516:	2800      	cmp	r0, #0
10008518:	d000      	beq.n	1000851c <mpu_reset_fifo+0x60>
1000851a:	e0ae      	b.n	1000867a <mpu_reset_fifo+0x1be>
    return -1;

    if (st.chip_cfg.dmp_on) {
1000851c:	2324      	movs	r3, #36	; 0x24
1000851e:	4a62      	ldr	r2, [pc, #392]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008520:	5cd3      	ldrb	r3, [r2, r3]
10008522:	2b00      	cmp	r3, #0
10008524:	d04f      	beq.n	100085c6 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008526:	466b      	mov	r3, sp
10008528:	3307      	adds	r3, #7
1000852a:	220c      	movs	r2, #12
1000852c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000852e:	4a5e      	ldr	r2, [pc, #376]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008530:	6811      	ldr	r1, [r2, #0]
10008532:	7909      	ldrb	r1, [r1, #4]
10008534:	6852      	ldr	r2, [r2, #4]
10008536:	7810      	ldrb	r0, [r2, #0]
10008538:	2201      	movs	r2, #1
1000853a:	4c5c      	ldr	r4, [pc, #368]	; (100086ac <mpu_reset_fifo+0x1f0>)
1000853c:	47a0      	blx	r4
1000853e:	2800      	cmp	r0, #0
10008540:	d000      	beq.n	10008544 <mpu_reset_fifo+0x88>
10008542:	e09d      	b.n	10008680 <mpu_reset_fifo+0x1c4>
        return -1;
        delay_ms(50);
10008544:	3032      	adds	r0, #50	; 0x32
10008546:	4b5a      	ldr	r3, [pc, #360]	; (100086b0 <mpu_reset_fifo+0x1f4>)
10008548:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000854a:	22c0      	movs	r2, #192	; 0xc0
1000854c:	466b      	mov	r3, sp
1000854e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008550:	4b55      	ldr	r3, [pc, #340]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008552:	7a9b      	ldrb	r3, [r3, #10]
10008554:	07db      	lsls	r3, r3, #31
10008556:	d502      	bpl.n	1000855e <mpu_reset_fifo+0xa2>
        data |= BIT_AUX_IF_EN;
10008558:	3220      	adds	r2, #32
1000855a:	466b      	mov	r3, sp
1000855c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000855e:	4b52      	ldr	r3, [pc, #328]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008560:	681a      	ldr	r2, [r3, #0]
10008562:	7911      	ldrb	r1, [r2, #4]
10008564:	685b      	ldr	r3, [r3, #4]
10008566:	7818      	ldrb	r0, [r3, #0]
10008568:	466b      	mov	r3, sp
1000856a:	3307      	adds	r3, #7
1000856c:	2201      	movs	r2, #1
1000856e:	4c4f      	ldr	r4, [pc, #316]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008570:	47a0      	blx	r4
10008572:	2800      	cmp	r0, #0
10008574:	d000      	beq.n	10008578 <mpu_reset_fifo+0xbc>
10008576:	e086      	b.n	10008686 <mpu_reset_fifo+0x1ca>
        return -1;
        if (st.chip_cfg.int_enable)
10008578:	4b4b      	ldr	r3, [pc, #300]	; (100086a8 <mpu_reset_fifo+0x1ec>)
1000857a:	7c5b      	ldrb	r3, [r3, #17]
1000857c:	2b00      	cmp	r3, #0
1000857e:	d003      	beq.n	10008588 <mpu_reset_fifo+0xcc>
        data = BIT_DMP_INT_EN;
10008580:	2202      	movs	r2, #2
10008582:	466b      	mov	r3, sp
10008584:	71da      	strb	r2, [r3, #7]
10008586:	e002      	b.n	1000858e <mpu_reset_fifo+0xd2>
        else
        data = 0;
10008588:	2200      	movs	r2, #0
1000858a:	466b      	mov	r3, sp
1000858c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000858e:	4b46      	ldr	r3, [pc, #280]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008590:	681a      	ldr	r2, [r3, #0]
10008592:	7c51      	ldrb	r1, [r2, #17]
10008594:	685b      	ldr	r3, [r3, #4]
10008596:	7818      	ldrb	r0, [r3, #0]
10008598:	466b      	mov	r3, sp
1000859a:	3307      	adds	r3, #7
1000859c:	2201      	movs	r2, #1
1000859e:	4c43      	ldr	r4, [pc, #268]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085a0:	47a0      	blx	r4
100085a2:	2800      	cmp	r0, #0
100085a4:	d172      	bne.n	1000868c <mpu_reset_fifo+0x1d0>
        return -1;
        data = 0;
100085a6:	466b      	mov	r3, sp
100085a8:	3307      	adds	r3, #7
100085aa:	2200      	movs	r2, #0
100085ac:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085ae:	4a3e      	ldr	r2, [pc, #248]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085b0:	6811      	ldr	r1, [r2, #0]
100085b2:	7949      	ldrb	r1, [r1, #5]
100085b4:	6852      	ldr	r2, [r2, #4]
100085b6:	7810      	ldrb	r0, [r2, #0]
100085b8:	2201      	movs	r2, #1
100085ba:	4c3c      	ldr	r4, [pc, #240]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085bc:	47a0      	blx	r4
100085be:	1e43      	subs	r3, r0, #1
100085c0:	4198      	sbcs	r0, r3
100085c2:	4240      	negs	r0, r0
100085c4:	e06d      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        return -1;
        } else {
        data = BIT_FIFO_RST;
100085c6:	466b      	mov	r3, sp
100085c8:	3307      	adds	r3, #7
100085ca:	2204      	movs	r2, #4
100085cc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ce:	4a36      	ldr	r2, [pc, #216]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085d0:	6811      	ldr	r1, [r2, #0]
100085d2:	7909      	ldrb	r1, [r1, #4]
100085d4:	6852      	ldr	r2, [r2, #4]
100085d6:	7810      	ldrb	r0, [r2, #0]
100085d8:	2201      	movs	r2, #1
100085da:	4c34      	ldr	r4, [pc, #208]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085dc:	47a0      	blx	r4
100085de:	2800      	cmp	r0, #0
100085e0:	d157      	bne.n	10008692 <mpu_reset_fifo+0x1d6>
        return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085e2:	4b31      	ldr	r3, [pc, #196]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085e4:	7c9b      	ldrb	r3, [r3, #18]
100085e6:	2b00      	cmp	r3, #0
100085e8:	d103      	bne.n	100085f2 <mpu_reset_fifo+0x136>
100085ea:	4b2f      	ldr	r3, [pc, #188]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085ec:	7a9b      	ldrb	r3, [r3, #10]
100085ee:	07db      	lsls	r3, r3, #31
100085f0:	d403      	bmi.n	100085fa <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_EN;
100085f2:	2240      	movs	r2, #64	; 0x40
100085f4:	466b      	mov	r3, sp
100085f6:	71da      	strb	r2, [r3, #7]
100085f8:	e002      	b.n	10008600 <mpu_reset_fifo+0x144>
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100085fa:	2260      	movs	r2, #96	; 0x60
100085fc:	466b      	mov	r3, sp
100085fe:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008600:	4b29      	ldr	r3, [pc, #164]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008602:	681a      	ldr	r2, [r3, #0]
10008604:	7911      	ldrb	r1, [r2, #4]
10008606:	685b      	ldr	r3, [r3, #4]
10008608:	7818      	ldrb	r0, [r3, #0]
1000860a:	466b      	mov	r3, sp
1000860c:	3307      	adds	r3, #7
1000860e:	2201      	movs	r2, #1
10008610:	4c26      	ldr	r4, [pc, #152]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008612:	47a0      	blx	r4
10008614:	2800      	cmp	r0, #0
10008616:	d13f      	bne.n	10008698 <mpu_reset_fifo+0x1dc>
        return -1;
        delay_ms(50);
10008618:	3032      	adds	r0, #50	; 0x32
1000861a:	4b25      	ldr	r3, [pc, #148]	; (100086b0 <mpu_reset_fifo+0x1f4>)
1000861c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000861e:	4b22      	ldr	r3, [pc, #136]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008620:	7c5b      	ldrb	r3, [r3, #17]
10008622:	2b00      	cmp	r3, #0
10008624:	d003      	beq.n	1000862e <mpu_reset_fifo+0x172>
        data = BIT_DATA_RDY_EN;
10008626:	2201      	movs	r2, #1
10008628:	466b      	mov	r3, sp
1000862a:	71da      	strb	r2, [r3, #7]
1000862c:	e002      	b.n	10008634 <mpu_reset_fifo+0x178>
        else
        data = 0;
1000862e:	2200      	movs	r2, #0
10008630:	466b      	mov	r3, sp
10008632:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008634:	4b1c      	ldr	r3, [pc, #112]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008636:	681a      	ldr	r2, [r3, #0]
10008638:	7c51      	ldrb	r1, [r2, #17]
1000863a:	685b      	ldr	r3, [r3, #4]
1000863c:	7818      	ldrb	r0, [r3, #0]
1000863e:	466b      	mov	r3, sp
10008640:	3307      	adds	r3, #7
10008642:	2201      	movs	r2, #1
10008644:	4c19      	ldr	r4, [pc, #100]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008646:	47a0      	blx	r4
10008648:	2800      	cmp	r0, #0
1000864a:	d128      	bne.n	1000869e <mpu_reset_fifo+0x1e2>
        return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000864c:	4a16      	ldr	r2, [pc, #88]	; (100086a8 <mpu_reset_fifo+0x1ec>)
1000864e:	0013      	movs	r3, r2
10008650:	3310      	adds	r3, #16
10008652:	6811      	ldr	r1, [r2, #0]
10008654:	7949      	ldrb	r1, [r1, #5]
10008656:	6852      	ldr	r2, [r2, #4]
10008658:	7810      	ldrb	r0, [r2, #0]
1000865a:	2201      	movs	r2, #1
1000865c:	4c13      	ldr	r4, [pc, #76]	; (100086ac <mpu_reset_fifo+0x1f0>)
1000865e:	47a0      	blx	r4
10008660:	1e43      	subs	r3, r0, #1
10008662:	4198      	sbcs	r0, r3
10008664:	4240      	negs	r0, r0
10008666:	e01c      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008668:	2001      	movs	r0, #1
1000866a:	4240      	negs	r0, r0
1000866c:	e019      	b.n	100086a2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    return -1;
1000866e:	2001      	movs	r0, #1
10008670:	4240      	negs	r0, r0
10008672:	e016      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    return -1;
10008674:	2001      	movs	r0, #1
10008676:	4240      	negs	r0, r0
10008678:	e013      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    return -1;
1000867a:	2001      	movs	r0, #1
1000867c:	4240      	negs	r0, r0
1000867e:	e010      	b.n	100086a2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008680:	2001      	movs	r0, #1
10008682:	4240      	negs	r0, r0
10008684:	e00d      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008686:	2001      	movs	r0, #1
10008688:	4240      	negs	r0, r0
1000868a:	e00a      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DMP_INT_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000868c:	2001      	movs	r0, #1
1000868e:	4240      	negs	r0, r0
10008690:	e007      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
        } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008692:	2001      	movs	r0, #1
10008694:	4240      	negs	r0, r0
10008696:	e004      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        data = BIT_FIFO_EN;
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008698:	2001      	movs	r0, #1
1000869a:	4240      	negs	r0, r0
1000869c:	e001      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DATA_RDY_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000869e:	2001      	movs	r0, #1
100086a0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
        return -1;
    }
    return 0;
}
100086a2:	b002      	add	sp, #8
100086a4:	bd10      	pop	{r4, pc}
100086a6:	46c0      	nop			; (mov r8, r8)
100086a8:	10013820 	.word	0x10013820
100086ac:	100083a9 	.word	0x100083a9
100086b0:	10008129 	.word	0x10008129

100086b4 <mpu_get_gyro_fsr>:
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
100086b4:	4b0e      	ldr	r3, [pc, #56]	; (100086f0 <mpu_get_gyro_fsr+0x3c>)
100086b6:	7a1b      	ldrb	r3, [r3, #8]
100086b8:	2b01      	cmp	r3, #1
100086ba:	d009      	beq.n	100086d0 <mpu_get_gyro_fsr+0x1c>
100086bc:	2b00      	cmp	r3, #0
100086be:	d004      	beq.n	100086ca <mpu_get_gyro_fsr+0x16>
100086c0:	2b02      	cmp	r3, #2
100086c2:	d009      	beq.n	100086d8 <mpu_get_gyro_fsr+0x24>
100086c4:	2b03      	cmp	r3, #3
100086c6:	d00b      	beq.n	100086e0 <mpu_get_gyro_fsr+0x2c>
100086c8:	e00e      	b.n	100086e8 <mpu_get_gyro_fsr+0x34>
        case INV_FSR_250DPS:
        fsr[0] = 250;
100086ca:	23fa      	movs	r3, #250	; 0xfa
100086cc:	8003      	strh	r3, [r0, #0]
        break;
100086ce:	e00d      	b.n	100086ec <mpu_get_gyro_fsr+0x38>
        case INV_FSR_500DPS:
        fsr[0] = 500;
100086d0:	23fa      	movs	r3, #250	; 0xfa
100086d2:	005b      	lsls	r3, r3, #1
100086d4:	8003      	strh	r3, [r0, #0]
        break;
100086d6:	e009      	b.n	100086ec <mpu_get_gyro_fsr+0x38>
        case INV_FSR_1000DPS:
        fsr[0] = 1000;
100086d8:	23fa      	movs	r3, #250	; 0xfa
100086da:	009b      	lsls	r3, r3, #2
100086dc:	8003      	strh	r3, [r0, #0]
        break;
100086de:	e005      	b.n	100086ec <mpu_get_gyro_fsr+0x38>
        case INV_FSR_2000DPS:
        fsr[0] = 2000;
100086e0:	23fa      	movs	r3, #250	; 0xfa
100086e2:	00db      	lsls	r3, r3, #3
100086e4:	8003      	strh	r3, [r0, #0]
        break;
100086e6:	e001      	b.n	100086ec <mpu_get_gyro_fsr+0x38>
        default:
        fsr[0] = 0;
100086e8:	2300      	movs	r3, #0
100086ea:	8003      	strh	r3, [r0, #0]
        break;
    }
    return 0;
}
100086ec:	2000      	movs	r0, #0
100086ee:	4770      	bx	lr
100086f0:	10013820 	.word	0x10013820

100086f4 <mpu_set_gyro_fsr>:
*  @brief      Set the gyro full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086f4:	b510      	push	{r4, lr}
100086f6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086f8:	4b24      	ldr	r3, [pc, #144]	; (1000878c <mpu_set_gyro_fsr+0x98>)
100086fa:	7a9b      	ldrb	r3, [r3, #10]
100086fc:	2b00      	cmp	r3, #0
100086fe:	d03b      	beq.n	10008778 <mpu_set_gyro_fsr+0x84>
    return -1;

    switch (fsr) {
10008700:	23fa      	movs	r3, #250	; 0xfa
10008702:	005b      	lsls	r3, r3, #1
10008704:	4298      	cmp	r0, r3
10008706:	d010      	beq.n	1000872a <mpu_set_gyro_fsr+0x36>
10008708:	d802      	bhi.n	10008710 <mpu_set_gyro_fsr+0x1c>
1000870a:	28fa      	cmp	r0, #250	; 0xfa
1000870c:	d009      	beq.n	10008722 <mpu_set_gyro_fsr+0x2e>
1000870e:	e036      	b.n	1000877e <mpu_set_gyro_fsr+0x8a>
10008710:	23fa      	movs	r3, #250	; 0xfa
10008712:	009b      	lsls	r3, r3, #2
10008714:	4298      	cmp	r0, r3
10008716:	d00c      	beq.n	10008732 <mpu_set_gyro_fsr+0x3e>
10008718:	23fa      	movs	r3, #250	; 0xfa
1000871a:	00db      	lsls	r3, r3, #3
1000871c:	4298      	cmp	r0, r3
1000871e:	d00c      	beq.n	1000873a <mpu_set_gyro_fsr+0x46>
10008720:	e02d      	b.n	1000877e <mpu_set_gyro_fsr+0x8a>
        case 250:
        data = INV_FSR_250DPS << 3;
10008722:	2200      	movs	r2, #0
10008724:	466b      	mov	r3, sp
10008726:	71da      	strb	r2, [r3, #7]
        break;
10008728:	e00a      	b.n	10008740 <mpu_set_gyro_fsr+0x4c>
        case 500:
        data = INV_FSR_500DPS << 3;
1000872a:	2208      	movs	r2, #8
1000872c:	466b      	mov	r3, sp
1000872e:	71da      	strb	r2, [r3, #7]
        break;
10008730:	e006      	b.n	10008740 <mpu_set_gyro_fsr+0x4c>
        case 1000:
        data = INV_FSR_1000DPS << 3;
10008732:	2210      	movs	r2, #16
10008734:	466b      	mov	r3, sp
10008736:	71da      	strb	r2, [r3, #7]
        break;
10008738:	e002      	b.n	10008740 <mpu_set_gyro_fsr+0x4c>
        case 2000:
        data = INV_FSR_2000DPS << 3;
1000873a:	2218      	movs	r2, #24
1000873c:	466b      	mov	r3, sp
1000873e:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008740:	466b      	mov	r3, sp
10008742:	3307      	adds	r3, #7
10008744:	781b      	ldrb	r3, [r3, #0]
10008746:	4a11      	ldr	r2, [pc, #68]	; (1000878c <mpu_set_gyro_fsr+0x98>)
10008748:	7a12      	ldrb	r2, [r2, #8]
1000874a:	08db      	lsrs	r3, r3, #3
    return 0;
1000874c:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000874e:	429a      	cmp	r2, r3
10008750:	d01a      	beq.n	10008788 <mpu_set_gyro_fsr+0x94>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008752:	4b0e      	ldr	r3, [pc, #56]	; (1000878c <mpu_set_gyro_fsr+0x98>)
10008754:	681a      	ldr	r2, [r3, #0]
10008756:	7991      	ldrb	r1, [r2, #6]
10008758:	685b      	ldr	r3, [r3, #4]
1000875a:	7818      	ldrb	r0, [r3, #0]
1000875c:	466b      	mov	r3, sp
1000875e:	3307      	adds	r3, #7
10008760:	2201      	movs	r2, #1
10008762:	4c0b      	ldr	r4, [pc, #44]	; (10008790 <mpu_set_gyro_fsr+0x9c>)
10008764:	47a0      	blx	r4
10008766:	2800      	cmp	r0, #0
10008768:	d10c      	bne.n	10008784 <mpu_set_gyro_fsr+0x90>
    return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000876a:	466b      	mov	r3, sp
1000876c:	3307      	adds	r3, #7
1000876e:	781b      	ldrb	r3, [r3, #0]
10008770:	08db      	lsrs	r3, r3, #3
10008772:	4a06      	ldr	r2, [pc, #24]	; (1000878c <mpu_set_gyro_fsr+0x98>)
10008774:	7213      	strb	r3, [r2, #8]
    return 0;
10008776:	e007      	b.n	10008788 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008778:	2001      	movs	r0, #1
1000877a:	4240      	negs	r0, r0
1000877c:	e004      	b.n	10008788 <mpu_set_gyro_fsr+0x94>
        break;
        case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
        default:
        return -1;
1000877e:	2001      	movs	r0, #1
10008780:	4240      	negs	r0, r0
10008782:	e001      	b.n	10008788 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
    return -1;
10008784:	2001      	movs	r0, #1
10008786:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008788:	b002      	add	sp, #8
1000878a:	bd10      	pop	{r4, pc}
1000878c:	10013820 	.word	0x10013820
10008790:	100083a9 	.word	0x100083a9

10008794 <mpu_get_accel_fsr>:
*  @param[out] fsr Current full-scale range.
*  @return     0 if successful.
*/
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008794:	4b11      	ldr	r3, [pc, #68]	; (100087dc <mpu_get_accel_fsr+0x48>)
10008796:	7a5b      	ldrb	r3, [r3, #9]
10008798:	2b01      	cmp	r3, #1
1000879a:	d009      	beq.n	100087b0 <mpu_get_accel_fsr+0x1c>
1000879c:	2b00      	cmp	r3, #0
1000879e:	d004      	beq.n	100087aa <mpu_get_accel_fsr+0x16>
100087a0:	2b02      	cmp	r3, #2
100087a2:	d008      	beq.n	100087b6 <mpu_get_accel_fsr+0x22>
100087a4:	2b03      	cmp	r3, #3
100087a6:	d009      	beq.n	100087bc <mpu_get_accel_fsr+0x28>
100087a8:	e014      	b.n	100087d4 <mpu_get_accel_fsr+0x40>
        case INV_FSR_2G:
        fsr[0] = 2;
100087aa:	2302      	movs	r3, #2
100087ac:	7003      	strb	r3, [r0, #0]
        break;
100087ae:	e007      	b.n	100087c0 <mpu_get_accel_fsr+0x2c>
        case INV_FSR_4G:
        fsr[0] = 4;
100087b0:	2304      	movs	r3, #4
100087b2:	7003      	strb	r3, [r0, #0]
        break;
100087b4:	e004      	b.n	100087c0 <mpu_get_accel_fsr+0x2c>
        case INV_FSR_8G:
        fsr[0] = 8;
100087b6:	2308      	movs	r3, #8
100087b8:	7003      	strb	r3, [r0, #0]
        break;
100087ba:	e001      	b.n	100087c0 <mpu_get_accel_fsr+0x2c>
        case INV_FSR_16G:
        fsr[0] = 16;
100087bc:	2310      	movs	r3, #16
100087be:	7003      	strb	r3, [r0, #0]
        break;
        default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087c0:	4b06      	ldr	r3, [pc, #24]	; (100087dc <mpu_get_accel_fsr+0x48>)
100087c2:	7cda      	ldrb	r2, [r3, #19]
    fsr[0] <<= 1;
    return 0;
100087c4:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
        default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087c6:	2a00      	cmp	r2, #0
100087c8:	d006      	beq.n	100087d8 <mpu_get_accel_fsr+0x44>
    fsr[0] <<= 1;
100087ca:	7803      	ldrb	r3, [r0, #0]
100087cc:	005b      	lsls	r3, r3, #1
100087ce:	7003      	strb	r3, [r0, #0]
    return 0;
100087d0:	2300      	movs	r3, #0
100087d2:	e001      	b.n	100087d8 <mpu_get_accel_fsr+0x44>
        break;
        case INV_FSR_16G:
        fsr[0] = 16;
        break;
        default:
        return -1;
100087d4:	2301      	movs	r3, #1
100087d6:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
    fsr[0] <<= 1;
    return 0;
}
100087d8:	0018      	movs	r0, r3
100087da:	4770      	bx	lr
100087dc:	10013820 	.word	0x10013820

100087e0 <mpu_set_accel_fsr>:
*  @brief      Set the accel full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_accel_fsr(unsigned char fsr)
{
100087e0:	b510      	push	{r4, lr}
100087e2:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087e4:	4b21      	ldr	r3, [pc, #132]	; (1000886c <mpu_set_accel_fsr+0x8c>)
100087e6:	7a9b      	ldrb	r3, [r3, #10]
100087e8:	2b00      	cmp	r3, #0
100087ea:	d035      	beq.n	10008858 <mpu_set_accel_fsr+0x78>
    return -1;

    switch (fsr) {
100087ec:	2804      	cmp	r0, #4
100087ee:	d00c      	beq.n	1000880a <mpu_set_accel_fsr+0x2a>
100087f0:	d802      	bhi.n	100087f8 <mpu_set_accel_fsr+0x18>
100087f2:	2802      	cmp	r0, #2
100087f4:	d005      	beq.n	10008802 <mpu_set_accel_fsr+0x22>
100087f6:	e032      	b.n	1000885e <mpu_set_accel_fsr+0x7e>
100087f8:	2808      	cmp	r0, #8
100087fa:	d00a      	beq.n	10008812 <mpu_set_accel_fsr+0x32>
100087fc:	2810      	cmp	r0, #16
100087fe:	d00c      	beq.n	1000881a <mpu_set_accel_fsr+0x3a>
10008800:	e02d      	b.n	1000885e <mpu_set_accel_fsr+0x7e>
        case 2:
        data = INV_FSR_2G << 3;
10008802:	2200      	movs	r2, #0
10008804:	466b      	mov	r3, sp
10008806:	71da      	strb	r2, [r3, #7]
        break;
10008808:	e00a      	b.n	10008820 <mpu_set_accel_fsr+0x40>
        case 4:
        data = INV_FSR_4G << 3;
1000880a:	2208      	movs	r2, #8
1000880c:	466b      	mov	r3, sp
1000880e:	71da      	strb	r2, [r3, #7]
        break;
10008810:	e006      	b.n	10008820 <mpu_set_accel_fsr+0x40>
        case 8:
        data = INV_FSR_8G << 3;
10008812:	2210      	movs	r2, #16
10008814:	466b      	mov	r3, sp
10008816:	71da      	strb	r2, [r3, #7]
        break;
10008818:	e002      	b.n	10008820 <mpu_set_accel_fsr+0x40>
        case 16:
        data = INV_FSR_16G << 3;
1000881a:	2218      	movs	r2, #24
1000881c:	466b      	mov	r3, sp
1000881e:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008820:	466b      	mov	r3, sp
10008822:	3307      	adds	r3, #7
10008824:	781b      	ldrb	r3, [r3, #0]
10008826:	4a11      	ldr	r2, [pc, #68]	; (1000886c <mpu_set_accel_fsr+0x8c>)
10008828:	7a52      	ldrb	r2, [r2, #9]
1000882a:	08db      	lsrs	r3, r3, #3
    return 0;
1000882c:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000882e:	429a      	cmp	r2, r3
10008830:	d01a      	beq.n	10008868 <mpu_set_accel_fsr+0x88>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008832:	4b0e      	ldr	r3, [pc, #56]	; (1000886c <mpu_set_accel_fsr+0x8c>)
10008834:	681a      	ldr	r2, [r3, #0]
10008836:	79d1      	ldrb	r1, [r2, #7]
10008838:	685b      	ldr	r3, [r3, #4]
1000883a:	7818      	ldrb	r0, [r3, #0]
1000883c:	466b      	mov	r3, sp
1000883e:	3307      	adds	r3, #7
10008840:	2201      	movs	r2, #1
10008842:	4c0b      	ldr	r4, [pc, #44]	; (10008870 <mpu_set_accel_fsr+0x90>)
10008844:	47a0      	blx	r4
10008846:	2800      	cmp	r0, #0
10008848:	d10c      	bne.n	10008864 <mpu_set_accel_fsr+0x84>
    return -1;
    st.chip_cfg.accel_fsr = data >> 3;
1000884a:	466b      	mov	r3, sp
1000884c:	3307      	adds	r3, #7
1000884e:	781b      	ldrb	r3, [r3, #0]
10008850:	08db      	lsrs	r3, r3, #3
10008852:	4a06      	ldr	r2, [pc, #24]	; (1000886c <mpu_set_accel_fsr+0x8c>)
10008854:	7253      	strb	r3, [r2, #9]
    return 0;
10008856:	e007      	b.n	10008868 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008858:	2001      	movs	r0, #1
1000885a:	4240      	negs	r0, r0
1000885c:	e004      	b.n	10008868 <mpu_set_accel_fsr+0x88>
        break;
        case 16:
        data = INV_FSR_16G << 3;
        break;
        default:
        return -1;
1000885e:	2001      	movs	r0, #1
10008860:	4240      	negs	r0, r0
10008862:	e001      	b.n	10008868 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
    return -1;
10008864:	2001      	movs	r0, #1
10008866:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008868:	b002      	add	sp, #8
1000886a:	bd10      	pop	{r4, pc}
1000886c:	10013820 	.word	0x10013820
10008870:	100083a9 	.word	0x100083a9

10008874 <mpu_set_lpf>:
*  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
*  @param[in]  lpf Desired LPF setting.
*  @return     0 if successful.
*/
int mpu_set_lpf(unsigned short lpf)
{
10008874:	b510      	push	{r4, lr}
10008876:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008878:	4b22      	ldr	r3, [pc, #136]	; (10008904 <mpu_set_lpf+0x90>)
1000887a:	7a9b      	ldrb	r3, [r3, #10]
1000887c:	2b00      	cmp	r3, #0
1000887e:	d039      	beq.n	100088f4 <mpu_set_lpf+0x80>
    return -1;

    if (lpf >= 188)
10008880:	28bb      	cmp	r0, #187	; 0xbb
10008882:	d903      	bls.n	1000888c <mpu_set_lpf+0x18>
    data = INV_FILTER_188HZ;
10008884:	2201      	movs	r2, #1
10008886:	466b      	mov	r3, sp
10008888:	71da      	strb	r2, [r3, #7]
1000888a:	e01a      	b.n	100088c2 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
1000888c:	2861      	cmp	r0, #97	; 0x61
1000888e:	d903      	bls.n	10008898 <mpu_set_lpf+0x24>
    data = INV_FILTER_98HZ;
10008890:	2202      	movs	r2, #2
10008892:	466b      	mov	r3, sp
10008894:	71da      	strb	r2, [r3, #7]
10008896:	e014      	b.n	100088c2 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008898:	2829      	cmp	r0, #41	; 0x29
1000889a:	d903      	bls.n	100088a4 <mpu_set_lpf+0x30>
    data = INV_FILTER_42HZ;
1000889c:	2203      	movs	r2, #3
1000889e:	466b      	mov	r3, sp
100088a0:	71da      	strb	r2, [r3, #7]
100088a2:	e00e      	b.n	100088c2 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100088a4:	2813      	cmp	r0, #19
100088a6:	d903      	bls.n	100088b0 <mpu_set_lpf+0x3c>
    data = INV_FILTER_20HZ;
100088a8:	2204      	movs	r2, #4
100088aa:	466b      	mov	r3, sp
100088ac:	71da      	strb	r2, [r3, #7]
100088ae:	e008      	b.n	100088c2 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100088b0:	2809      	cmp	r0, #9
100088b2:	d903      	bls.n	100088bc <mpu_set_lpf+0x48>
    data = INV_FILTER_10HZ;
100088b4:	2205      	movs	r2, #5
100088b6:	466b      	mov	r3, sp
100088b8:	71da      	strb	r2, [r3, #7]
100088ba:	e002      	b.n	100088c2 <mpu_set_lpf+0x4e>
    else
    data = INV_FILTER_5HZ;
100088bc:	2206      	movs	r2, #6
100088be:	466b      	mov	r3, sp
100088c0:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100088c2:	4b10      	ldr	r3, [pc, #64]	; (10008904 <mpu_set_lpf+0x90>)
100088c4:	7ada      	ldrb	r2, [r3, #11]
100088c6:	466b      	mov	r3, sp
100088c8:	3307      	adds	r3, #7
100088ca:	781b      	ldrb	r3, [r3, #0]
    return 0;
100088cc:	2000      	movs	r0, #0
    else if (lpf >= 10)
    data = INV_FILTER_10HZ;
    else
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100088ce:	429a      	cmp	r2, r3
100088d0:	d015      	beq.n	100088fe <mpu_set_lpf+0x8a>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100088d2:	4b0c      	ldr	r3, [pc, #48]	; (10008904 <mpu_set_lpf+0x90>)
100088d4:	681a      	ldr	r2, [r3, #0]
100088d6:	7891      	ldrb	r1, [r2, #2]
100088d8:	685b      	ldr	r3, [r3, #4]
100088da:	7818      	ldrb	r0, [r3, #0]
100088dc:	466b      	mov	r3, sp
100088de:	3307      	adds	r3, #7
100088e0:	2201      	movs	r2, #1
100088e2:	4c09      	ldr	r4, [pc, #36]	; (10008908 <mpu_set_lpf+0x94>)
100088e4:	47a0      	blx	r4
100088e6:	2800      	cmp	r0, #0
100088e8:	d107      	bne.n	100088fa <mpu_set_lpf+0x86>
    return -1;
    st.chip_cfg.lpf = data;
100088ea:	466b      	mov	r3, sp
100088ec:	79da      	ldrb	r2, [r3, #7]
100088ee:	4b05      	ldr	r3, [pc, #20]	; (10008904 <mpu_set_lpf+0x90>)
100088f0:	72da      	strb	r2, [r3, #11]
    return 0;
100088f2:	e004      	b.n	100088fe <mpu_set_lpf+0x8a>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
100088f4:	2001      	movs	r0, #1
100088f6:	4240      	negs	r0, r0
100088f8:	e001      	b.n	100088fe <mpu_set_lpf+0x8a>
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
    return -1;
100088fa:	2001      	movs	r0, #1
100088fc:	4240      	negs	r0, r0
    st.chip_cfg.lpf = data;
    return 0;
}
100088fe:	b002      	add	sp, #8
10008900:	bd10      	pop	{r4, pc}
10008902:	46c0      	nop			; (mov r8, r8)
10008904:	10013820 	.word	0x10013820
10008908:	100083a9 	.word	0x100083a9

1000890c <mpu_get_sample_rate>:
*  @param[out] rate    Current sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
1000890c:	2324      	movs	r3, #36	; 0x24
1000890e:	4a05      	ldr	r2, [pc, #20]	; (10008924 <mpu_get_sample_rate+0x18>)
10008910:	5cd3      	ldrb	r3, [r2, r3]
10008912:	2b00      	cmp	r3, #0
10008914:	d103      	bne.n	1000891e <mpu_get_sample_rate+0x12>
    return -1;
    else
    rate[0] = st.chip_cfg.sample_rate;
10008916:	89d3      	ldrh	r3, [r2, #14]
10008918:	8003      	strh	r3, [r0, #0]
    return 0;
1000891a:	2000      	movs	r0, #0
1000891c:	e001      	b.n	10008922 <mpu_get_sample_rate+0x16>
*  @return     0 if successful.
*/
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
    return -1;
1000891e:	2001      	movs	r0, #1
10008920:	4240      	negs	r0, r0
    else
    rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
10008922:	4770      	bx	lr
10008924:	10013820 	.word	0x10013820

10008928 <mpu_set_compass_sample_rate>:
*  mpu_get_compass_sample_rate to check the actual setting.
*  @param[in]  rate    Desired compass sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008928:	b530      	push	{r4, r5, lr}
1000892a:	b083      	sub	sp, #12
1000892c:	1e01      	subs	r1, r0, #0
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000892e:	d020      	beq.n	10008972 <mpu_set_compass_sample_rate+0x4a>
10008930:	4b17      	ldr	r3, [pc, #92]	; (10008990 <mpu_set_compass_sample_rate+0x68>)
10008932:	89d8      	ldrh	r0, [r3, #14]
10008934:	4281      	cmp	r1, r0
10008936:	d81f      	bhi.n	10008978 <mpu_set_compass_sample_rate+0x50>
10008938:	2964      	cmp	r1, #100	; 0x64
1000893a:	d820      	bhi.n	1000897e <mpu_set_compass_sample_rate+0x56>
    return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
1000893c:	466b      	mov	r3, sp
1000893e:	1ddc      	adds	r4, r3, #7
10008940:	4b14      	ldr	r3, [pc, #80]	; (10008994 <mpu_set_compass_sample_rate+0x6c>)
10008942:	4798      	blx	r3
10008944:	3801      	subs	r0, #1
10008946:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008948:	4b11      	ldr	r3, [pc, #68]	; (10008990 <mpu_set_compass_sample_rate+0x68>)
1000894a:	2224      	movs	r2, #36	; 0x24
1000894c:	6819      	ldr	r1, [r3, #0]
1000894e:	5c89      	ldrb	r1, [r1, r2]
10008950:	685b      	ldr	r3, [r3, #4]
10008952:	7818      	ldrb	r0, [r3, #0]
10008954:	0023      	movs	r3, r4
10008956:	3a23      	subs	r2, #35	; 0x23
10008958:	4c0f      	ldr	r4, [pc, #60]	; (10008998 <mpu_set_compass_sample_rate+0x70>)
1000895a:	47a0      	blx	r4
1000895c:	1e04      	subs	r4, r0, #0
1000895e:	d111      	bne.n	10008984 <mpu_set_compass_sample_rate+0x5c>
    return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008960:	4d0b      	ldr	r5, [pc, #44]	; (10008990 <mpu_set_compass_sample_rate+0x68>)
10008962:	89e8      	ldrh	r0, [r5, #14]
10008964:	466b      	mov	r3, sp
10008966:	79d9      	ldrb	r1, [r3, #7]
10008968:	3101      	adds	r1, #1
1000896a:	4b0c      	ldr	r3, [pc, #48]	; (1000899c <mpu_set_compass_sample_rate+0x74>)
1000896c:	4798      	blx	r3
1000896e:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008970:	e00a      	b.n	10008988 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
    return -1;
10008972:	2401      	movs	r4, #1
10008974:	4264      	negs	r4, r4
10008976:	e007      	b.n	10008988 <mpu_set_compass_sample_rate+0x60>
10008978:	2401      	movs	r4, #1
1000897a:	4264      	negs	r4, r4
1000897c:	e004      	b.n	10008988 <mpu_set_compass_sample_rate+0x60>
1000897e:	2401      	movs	r4, #1
10008980:	4264      	negs	r4, r4
10008982:	e001      	b.n	10008988 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
    return -1;
10008984:	2401      	movs	r4, #1
10008986:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
    #else
    return -1;
    #endif
}
10008988:	0020      	movs	r0, r4
1000898a:	b003      	add	sp, #12
1000898c:	bd30      	pop	{r4, r5, pc}
1000898e:	46c0      	nop			; (mov r8, r8)
10008990:	10013820 	.word	0x10013820
10008994:	1000f825 	.word	0x1000f825
10008998:	100083a9 	.word	0x100083a9
1000899c:	1000f939 	.word	0x1000f939

100089a0 <mpu_configure_fifo>:
*  \n INV_XYZ_ACCEL
*  @param[in]  sensors Mask of sensors to push to FIFO.
*  @return     0 if successful.
*/
int mpu_configure_fifo(unsigned char sensors)
{
100089a0:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089a2:	2324      	movs	r3, #36	; 0x24
100089a4:	4a16      	ldr	r2, [pc, #88]	; (10008a00 <mpu_configure_fifo+0x60>)
100089a6:	5cd3      	ldrb	r3, [r2, r3]
    return 0;
100089a8:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089aa:	2b00      	cmp	r3, #0
100089ac:	d126      	bne.n	100089fc <mpu_configure_fifo+0x5c>
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
100089ae:	7a94      	ldrb	r4, [r2, #10]
100089b0:	2c00      	cmp	r4, #0
100089b2:	d015      	beq.n	100089e0 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
100089b4:	2301      	movs	r3, #1
100089b6:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
        prev = st.chip_cfg.fifo_enable;
100089b8:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
100089ba:	4004      	ands	r4, r0
100089bc:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
100089be:	1b04      	subs	r4, r0, r4
100089c0:	1e63      	subs	r3, r4, #1
100089c2:	419c      	sbcs	r4, r3
100089c4:	4264      	negs	r4, r4
        * asleep.
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
100089c6:	2800      	cmp	r0, #0
100089c8:	d10d      	bne.n	100089e6 <mpu_configure_fifo+0x46>
100089ca:	7d13      	ldrb	r3, [r2, #20]
100089cc:	2b00      	cmp	r3, #0
100089ce:	d112      	bne.n	100089f6 <mpu_configure_fifo+0x56>
        set_int_enable(1);
        else
        set_int_enable(0);
100089d0:	4b0c      	ldr	r3, [pc, #48]	; (10008a04 <mpu_configure_fifo+0x64>)
100089d2:	4798      	blx	r3
100089d4:	e012      	b.n	100089fc <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
100089d6:	4b0a      	ldr	r3, [pc, #40]	; (10008a00 <mpu_configure_fifo+0x60>)
100089d8:	741d      	strb	r5, [r3, #16]
                return -1;
100089da:	2401      	movs	r4, #1
100089dc:	4264      	negs	r4, r4
100089de:	e00d      	b.n	100089fc <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
100089e0:	2401      	movs	r4, #1
100089e2:	4264      	negs	r4, r4
100089e4:	e00a      	b.n	100089fc <mpu_configure_fifo+0x5c>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
100089e6:	2001      	movs	r0, #1
100089e8:	4b06      	ldr	r3, [pc, #24]	; (10008a04 <mpu_configure_fifo+0x64>)
100089ea:	4798      	blx	r3
        else
        set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
100089ec:	4b06      	ldr	r3, [pc, #24]	; (10008a08 <mpu_configure_fifo+0x68>)
100089ee:	4798      	blx	r3
100089f0:	2800      	cmp	r0, #0
100089f2:	d003      	beq.n	100089fc <mpu_configure_fifo+0x5c>
100089f4:	e7ef      	b.n	100089d6 <mpu_configure_fifo+0x36>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
100089f6:	2001      	movs	r0, #1
100089f8:	4b02      	ldr	r3, [pc, #8]	; (10008a04 <mpu_configure_fifo+0x64>)
100089fa:	4798      	blx	r3
            }
        }
    }

    return result;
}
100089fc:	0020      	movs	r0, r4
100089fe:	bd70      	pop	{r4, r5, r6, pc}
10008a00:	10013820 	.word	0x10013820
10008a04:	10008419 	.word	0x10008419
10008a08:	100084bd 	.word	0x100084bd

10008a0c <mpu_read_fifo_stream>:
*  @param[in]  data    FIFO packet.
*  @param[in]  more    Number of remaining packets.
*/
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
unsigned char *more)
{
10008a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a0e:	b085      	sub	sp, #20
10008a10:	0005      	movs	r5, r0
10008a12:	9101      	str	r1, [sp, #4]
10008a14:	0017      	movs	r7, r2
    //DBG_LOG_DEV("[mpu_read_fifo_stream] IN");
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on) {
10008a16:	2324      	movs	r3, #36	; 0x24
10008a18:	4a30      	ldr	r2, [pc, #192]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008a1a:	5cd3      	ldrb	r3, [r2, r3]
10008a1c:	2b00      	cmp	r3, #0
10008a1e:	d105      	bne.n	10008a2c <mpu_read_fifo_stream+0x20>
        printf("DMP_ON!\n\r");
10008a20:	482f      	ldr	r0, [pc, #188]	; (10008ae0 <mpu_read_fifo_stream+0xd4>)
10008a22:	4b30      	ldr	r3, [pc, #192]	; (10008ae4 <mpu_read_fifo_stream+0xd8>)
10008a24:	4798      	blx	r3
        return -1;
10008a26:	2601      	movs	r6, #1
10008a28:	4276      	negs	r6, r6
10008a2a:	e053      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
    }
    if (!st.chip_cfg.sensors) {
10008a2c:	4b2b      	ldr	r3, [pc, #172]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008a2e:	7a9b      	ldrb	r3, [r3, #10]
10008a30:	2b00      	cmp	r3, #0
10008a32:	d105      	bne.n	10008a40 <mpu_read_fifo_stream+0x34>
        printf("SENSORS!\n\r");
10008a34:	482c      	ldr	r0, [pc, #176]	; (10008ae8 <mpu_read_fifo_stream+0xdc>)
10008a36:	4b2b      	ldr	r3, [pc, #172]	; (10008ae4 <mpu_read_fifo_stream+0xd8>)
10008a38:	4798      	blx	r3
        return -1;
10008a3a:	2601      	movs	r6, #1
10008a3c:	4276      	negs	r6, r6
10008a3e:	e049      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp)) return -1;
10008a40:	4b26      	ldr	r3, [pc, #152]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008a42:	681a      	ldr	r2, [r3, #0]
10008a44:	7b11      	ldrb	r1, [r2, #12]
10008a46:	685b      	ldr	r3, [r3, #4]
10008a48:	7818      	ldrb	r0, [r3, #0]
10008a4a:	ab03      	add	r3, sp, #12
10008a4c:	2202      	movs	r2, #2
10008a4e:	4c27      	ldr	r4, [pc, #156]	; (10008aec <mpu_read_fifo_stream+0xe0>)
10008a50:	47a0      	blx	r4
10008a52:	2800      	cmp	r0, #0
10008a54:	d136      	bne.n	10008ac4 <mpu_read_fifo_stream+0xb8>
    fifo_count = (tmp[0] << 8) | tmp[1];
10008a56:	ab03      	add	r3, sp, #12
10008a58:	781c      	ldrb	r4, [r3, #0]
10008a5a:	0224      	lsls	r4, r4, #8
10008a5c:	785b      	ldrb	r3, [r3, #1]
10008a5e:	431c      	orrs	r4, r3
    //DBG_LOG_DEV("[mpu_read_fifo_stream]\n\r  length: %d, fifo count: %d", length, fifo_count);
    if (fifo_count < length) {
10008a60:	42ac      	cmp	r4, r5
10008a62:	d204      	bcs.n	10008a6e <mpu_read_fifo_stream+0x62>
        more[0] = 0;
10008a64:	2300      	movs	r3, #0
10008a66:	703b      	strb	r3, [r7, #0]
        return -1;
10008a68:	2601      	movs	r6, #1
10008a6a:	4276      	negs	r6, r6
10008a6c:	e032      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008a6e:	4b1b      	ldr	r3, [pc, #108]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008a70:	685a      	ldr	r2, [r3, #4]
10008a72:	8853      	ldrh	r3, [r2, #2]
10008a74:	085b      	lsrs	r3, r3, #1
10008a76:	429c      	cmp	r4, r3
10008a78:	d912      	bls.n	10008aa0 <mpu_read_fifo_stream+0x94>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp)) return -1;
10008a7a:	4b18      	ldr	r3, [pc, #96]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008a7c:	681b      	ldr	r3, [r3, #0]
10008a7e:	7cd9      	ldrb	r1, [r3, #19]
10008a80:	7810      	ldrb	r0, [r2, #0]
10008a82:	ab03      	add	r3, sp, #12
10008a84:	2201      	movs	r2, #1
10008a86:	4e19      	ldr	r6, [pc, #100]	; (10008aec <mpu_read_fifo_stream+0xe0>)
10008a88:	47b0      	blx	r6
10008a8a:	2800      	cmp	r0, #0
10008a8c:	d11d      	bne.n	10008aca <mpu_read_fifo_stream+0xbe>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
10008a8e:	ab03      	add	r3, sp, #12
10008a90:	781b      	ldrb	r3, [r3, #0]
10008a92:	06db      	lsls	r3, r3, #27
10008a94:	d504      	bpl.n	10008aa0 <mpu_read_fifo_stream+0x94>
            mpu_reset_fifo();
10008a96:	4b16      	ldr	r3, [pc, #88]	; (10008af0 <mpu_read_fifo_stream+0xe4>)
10008a98:	4798      	blx	r3
            return -2;
10008a9a:	2602      	movs	r6, #2
10008a9c:	4276      	negs	r6, r6
10008a9e:	e019      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data)) return -1;
10008aa0:	b2ea      	uxtb	r2, r5
10008aa2:	4b0e      	ldr	r3, [pc, #56]	; (10008adc <mpu_read_fifo_stream+0xd0>)
10008aa4:	6819      	ldr	r1, [r3, #0]
10008aa6:	7b49      	ldrb	r1, [r1, #13]
10008aa8:	685b      	ldr	r3, [r3, #4]
10008aaa:	7818      	ldrb	r0, [r3, #0]
10008aac:	9b01      	ldr	r3, [sp, #4]
10008aae:	4e0f      	ldr	r6, [pc, #60]	; (10008aec <mpu_read_fifo_stream+0xe0>)
10008ab0:	47b0      	blx	r6
10008ab2:	1e06      	subs	r6, r0, #0
10008ab4:	d10c      	bne.n	10008ad0 <mpu_read_fifo_stream+0xc4>
    more[0] = fifo_count / length - 1;
10008ab6:	0029      	movs	r1, r5
10008ab8:	0020      	movs	r0, r4
10008aba:	4b0e      	ldr	r3, [pc, #56]	; (10008af4 <mpu_read_fifo_stream+0xe8>)
10008abc:	4798      	blx	r3
10008abe:	3801      	subs	r0, #1
10008ac0:	7038      	strb	r0, [r7, #0]
    //DBG_LOG_DEV("[mpu_read_fifo_stream] OUT");
    return 0;
10008ac2:	e007      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
    if (!st.chip_cfg.sensors) {
        printf("SENSORS!\n\r");
        return -1;
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp)) return -1;
10008ac4:	2601      	movs	r6, #1
10008ac6:	4276      	negs	r6, r6
10008ac8:	e004      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp)) return -1;
10008aca:	2601      	movs	r6, #1
10008acc:	4276      	negs	r6, r6
10008ace:	e001      	b.n	10008ad4 <mpu_read_fifo_stream+0xc8>
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data)) return -1;
10008ad0:	2601      	movs	r6, #1
10008ad2:	4276      	negs	r6, r6
    more[0] = fifo_count / length - 1;
    //DBG_LOG_DEV("[mpu_read_fifo_stream] OUT");
    return 0;
}
10008ad4:	0030      	movs	r0, r6
10008ad6:	b005      	add	sp, #20
10008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ada:	46c0      	nop			; (mov r8, r8)
10008adc:	10013820 	.word	0x10013820
10008ae0:	1001282c 	.word	0x1001282c
10008ae4:	100116f5 	.word	0x100116f5
10008ae8:	10012838 	.word	0x10012838
10008aec:	100082e5 	.word	0x100082e5
10008af0:	100084bd 	.word	0x100084bd
10008af4:	1000f825 	.word	0x1000f825

10008af8 <mpu_set_bypass>:
*  @brief      Set device to bypass mode.
*  @param[in]  bypass_on   1 to enable bypass mode.
*  @return     0 if successful.
*/
int mpu_set_bypass(unsigned char bypass_on)
{
10008af8:	b530      	push	{r4, r5, lr}
10008afa:	b083      	sub	sp, #12
10008afc:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008afe:	4b59      	ldr	r3, [pc, #356]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b00:	7c9b      	ldrb	r3, [r3, #18]
10008b02:	4283      	cmp	r3, r0
10008b04:	d100      	bne.n	10008b08 <mpu_set_bypass+0x10>
10008b06:	e097      	b.n	10008c38 <mpu_set_bypass+0x140>
    return 0;

    if (bypass_on) {
10008b08:	2800      	cmp	r0, #0
10008b0a:	d042      	beq.n	10008b92 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp)) return -1;
10008b0c:	4b55      	ldr	r3, [pc, #340]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b0e:	681a      	ldr	r2, [r3, #0]
10008b10:	7911      	ldrb	r1, [r2, #4]
10008b12:	685b      	ldr	r3, [r3, #4]
10008b14:	7818      	ldrb	r0, [r3, #0]
10008b16:	466b      	mov	r3, sp
10008b18:	3307      	adds	r3, #7
10008b1a:	2201      	movs	r2, #1
10008b1c:	4d52      	ldr	r5, [pc, #328]	; (10008c68 <mpu_set_bypass+0x170>)
10008b1e:	47a8      	blx	r5
10008b20:	2800      	cmp	r0, #0
10008b22:	d000      	beq.n	10008b26 <mpu_set_bypass+0x2e>
10008b24:	e08a      	b.n	10008c3c <mpu_set_bypass+0x144>
        tmp &= ~BIT_AUX_IF_EN;
10008b26:	466b      	mov	r3, sp
10008b28:	3307      	adds	r3, #7
10008b2a:	781a      	ldrb	r2, [r3, #0]
10008b2c:	2120      	movs	r1, #32
10008b2e:	438a      	bics	r2, r1
10008b30:	701a      	strb	r2, [r3, #0]
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp)) return -1;
10008b32:	4a4c      	ldr	r2, [pc, #304]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b34:	6811      	ldr	r1, [r2, #0]
10008b36:	7909      	ldrb	r1, [r1, #4]
10008b38:	6852      	ldr	r2, [r2, #4]
10008b3a:	7810      	ldrb	r0, [r2, #0]
10008b3c:	2201      	movs	r2, #1
10008b3e:	4d4b      	ldr	r5, [pc, #300]	; (10008c6c <mpu_set_bypass+0x174>)
10008b40:	47a8      	blx	r5
10008b42:	2800      	cmp	r0, #0
10008b44:	d17d      	bne.n	10008c42 <mpu_set_bypass+0x14a>
        delay_ms(3);
10008b46:	3003      	adds	r0, #3
10008b48:	4b49      	ldr	r3, [pc, #292]	; (10008c70 <mpu_set_bypass+0x178>)
10008b4a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008b4c:	2202      	movs	r2, #2
10008b4e:	466b      	mov	r3, sp
10008b50:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int) (tmp |= BIT_ACTL);
10008b52:	2322      	movs	r3, #34	; 0x22
10008b54:	4a43      	ldr	r2, [pc, #268]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b56:	5cd3      	ldrb	r3, [r2, r3]
10008b58:	2b00      	cmp	r3, #0
10008b5a:	d002      	beq.n	10008b62 <mpu_set_bypass+0x6a>
10008b5c:	2282      	movs	r2, #130	; 0x82
10008b5e:	466b      	mov	r3, sp
10008b60:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int) (tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR);
10008b62:	2323      	movs	r3, #35	; 0x23
10008b64:	4a3f      	ldr	r2, [pc, #252]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b66:	5cd3      	ldrb	r3, [r2, r3]
10008b68:	2b00      	cmp	r3, #0
10008b6a:	d005      	beq.n	10008b78 <mpu_set_bypass+0x80>
10008b6c:	466b      	mov	r3, sp
10008b6e:	1dda      	adds	r2, r3, #7
10008b70:	79d9      	ldrb	r1, [r3, #7]
10008b72:	2330      	movs	r3, #48	; 0x30
10008b74:	430b      	orrs	r3, r1
10008b76:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp)) return -1;
10008b78:	4b3a      	ldr	r3, [pc, #232]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b7a:	681a      	ldr	r2, [r3, #0]
10008b7c:	7dd1      	ldrb	r1, [r2, #23]
10008b7e:	685b      	ldr	r3, [r3, #4]
10008b80:	7818      	ldrb	r0, [r3, #0]
10008b82:	466b      	mov	r3, sp
10008b84:	3307      	adds	r3, #7
10008b86:	2201      	movs	r2, #1
10008b88:	4d38      	ldr	r5, [pc, #224]	; (10008c6c <mpu_set_bypass+0x174>)
10008b8a:	47a8      	blx	r5
10008b8c:	2800      	cmp	r0, #0
10008b8e:	d04f      	beq.n	10008c30 <mpu_set_bypass+0x138>
10008b90:	e05a      	b.n	10008c48 <mpu_set_bypass+0x150>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b92:	4b34      	ldr	r3, [pc, #208]	; (10008c64 <mpu_set_bypass+0x16c>)
10008b94:	681a      	ldr	r2, [r3, #0]
10008b96:	7911      	ldrb	r1, [r2, #4]
10008b98:	685b      	ldr	r3, [r3, #4]
10008b9a:	7818      	ldrb	r0, [r3, #0]
10008b9c:	466b      	mov	r3, sp
10008b9e:	3307      	adds	r3, #7
10008ba0:	2201      	movs	r2, #1
10008ba2:	4d31      	ldr	r5, [pc, #196]	; (10008c68 <mpu_set_bypass+0x170>)
10008ba4:	47a8      	blx	r5
10008ba6:	2800      	cmp	r0, #0
10008ba8:	d151      	bne.n	10008c4e <mpu_set_bypass+0x156>
        return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008baa:	4b2e      	ldr	r3, [pc, #184]	; (10008c64 <mpu_set_bypass+0x16c>)
10008bac:	7a9b      	ldrb	r3, [r3, #10]
10008bae:	07db      	lsls	r3, r3, #31
10008bb0:	d506      	bpl.n	10008bc0 <mpu_set_bypass+0xc8>
        tmp |= BIT_AUX_IF_EN;
10008bb2:	466b      	mov	r3, sp
10008bb4:	1dda      	adds	r2, r3, #7
10008bb6:	79d9      	ldrb	r1, [r3, #7]
10008bb8:	2320      	movs	r3, #32
10008bba:	430b      	orrs	r3, r1
10008bbc:	7013      	strb	r3, [r2, #0]
10008bbe:	e005      	b.n	10008bcc <mpu_set_bypass+0xd4>
        else
        tmp &= ~BIT_AUX_IF_EN;
10008bc0:	466b      	mov	r3, sp
10008bc2:	1dda      	adds	r2, r3, #7
10008bc4:	79db      	ldrb	r3, [r3, #7]
10008bc6:	2120      	movs	r1, #32
10008bc8:	438b      	bics	r3, r1
10008bca:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bcc:	4b25      	ldr	r3, [pc, #148]	; (10008c64 <mpu_set_bypass+0x16c>)
10008bce:	681a      	ldr	r2, [r3, #0]
10008bd0:	7911      	ldrb	r1, [r2, #4]
10008bd2:	685b      	ldr	r3, [r3, #4]
10008bd4:	7818      	ldrb	r0, [r3, #0]
10008bd6:	466b      	mov	r3, sp
10008bd8:	3307      	adds	r3, #7
10008bda:	2201      	movs	r2, #1
10008bdc:	4d23      	ldr	r5, [pc, #140]	; (10008c6c <mpu_set_bypass+0x174>)
10008bde:	47a8      	blx	r5
10008be0:	2800      	cmp	r0, #0
10008be2:	d137      	bne.n	10008c54 <mpu_set_bypass+0x15c>
        return -1;
        delay_ms(3);
10008be4:	3003      	adds	r0, #3
10008be6:	4b22      	ldr	r3, [pc, #136]	; (10008c70 <mpu_set_bypass+0x178>)
10008be8:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008bea:	2322      	movs	r3, #34	; 0x22
10008bec:	4a1d      	ldr	r2, [pc, #116]	; (10008c64 <mpu_set_bypass+0x16c>)
10008bee:	5cd3      	ldrb	r3, [r2, r3]
10008bf0:	2b00      	cmp	r3, #0
10008bf2:	d003      	beq.n	10008bfc <mpu_set_bypass+0x104>
        tmp = BIT_ACTL;
10008bf4:	2280      	movs	r2, #128	; 0x80
10008bf6:	466b      	mov	r3, sp
10008bf8:	71da      	strb	r2, [r3, #7]
10008bfa:	e002      	b.n	10008c02 <mpu_set_bypass+0x10a>
        else
        tmp = 0;
10008bfc:	2200      	movs	r2, #0
10008bfe:	466b      	mov	r3, sp
10008c00:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008c02:	2323      	movs	r3, #35	; 0x23
10008c04:	4a17      	ldr	r2, [pc, #92]	; (10008c64 <mpu_set_bypass+0x16c>)
10008c06:	5cd3      	ldrb	r3, [r2, r3]
10008c08:	2b00      	cmp	r3, #0
10008c0a:	d005      	beq.n	10008c18 <mpu_set_bypass+0x120>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c0c:	466b      	mov	r3, sp
10008c0e:	1dda      	adds	r2, r3, #7
10008c10:	79d9      	ldrb	r1, [r3, #7]
10008c12:	2330      	movs	r3, #48	; 0x30
10008c14:	430b      	orrs	r3, r1
10008c16:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c18:	4b12      	ldr	r3, [pc, #72]	; (10008c64 <mpu_set_bypass+0x16c>)
10008c1a:	681a      	ldr	r2, [r3, #0]
10008c1c:	7dd1      	ldrb	r1, [r2, #23]
10008c1e:	685b      	ldr	r3, [r3, #4]
10008c20:	7818      	ldrb	r0, [r3, #0]
10008c22:	466b      	mov	r3, sp
10008c24:	3307      	adds	r3, #7
10008c26:	2201      	movs	r2, #1
10008c28:	4d10      	ldr	r5, [pc, #64]	; (10008c6c <mpu_set_bypass+0x174>)
10008c2a:	47a8      	blx	r5
10008c2c:	2800      	cmp	r0, #0
10008c2e:	d114      	bne.n	10008c5a <mpu_set_bypass+0x162>
        return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008c30:	4b0c      	ldr	r3, [pc, #48]	; (10008c64 <mpu_set_bypass+0x16c>)
10008c32:	749c      	strb	r4, [r3, #18]
    return 0;
10008c34:	2000      	movs	r0, #0
10008c36:	e012      	b.n	10008c5e <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
    return 0;
10008c38:	2000      	movs	r0, #0
10008c3a:	e010      	b.n	10008c5e <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp)) return -1;
10008c3c:	2001      	movs	r0, #1
10008c3e:	4240      	negs	r0, r0
10008c40:	e00d      	b.n	10008c5e <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp)) return -1;
10008c42:	2001      	movs	r0, #1
10008c44:	4240      	negs	r0, r0
10008c46:	e00a      	b.n	10008c5e <mpu_set_bypass+0x166>
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int) (tmp |= BIT_ACTL);
        if (st.chip_cfg.latched_int) (tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR);
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp)) return -1;
10008c48:	2001      	movs	r0, #1
10008c4a:	4240      	negs	r0, r0
10008c4c:	e007      	b.n	10008c5e <mpu_set_bypass+0x166>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008c4e:	2001      	movs	r0, #1
10008c50:	4240      	negs	r0, r0
10008c52:	e004      	b.n	10008c5e <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        tmp |= BIT_AUX_IF_EN;
        else
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008c54:	2001      	movs	r0, #1
10008c56:	4240      	negs	r0, r0
10008c58:	e001      	b.n	10008c5e <mpu_set_bypass+0x166>
        else
        tmp = 0;
        if (st.chip_cfg.latched_int)
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008c5a:	2001      	movs	r0, #1
10008c5c:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008c5e:	b003      	add	sp, #12
10008c60:	bd30      	pop	{r4, r5, pc}
10008c62:	46c0      	nop			; (mov r8, r8)
10008c64:	10013820 	.word	0x10013820
10008c68:	100082e5 	.word	0x100082e5
10008c6c:	100083a9 	.word	0x100083a9
10008c70:	10008129 	.word	0x10008129

10008c74 <mpu_set_int_latched>:
*  Any MPU register will clear the interrupt.
*  @param[in]  enable  1 to enable, 0 to disable.
*  @return     0 if successful.
*/
int mpu_set_int_latched(unsigned char enable)
{
10008c74:	b530      	push	{r4, r5, lr}
10008c76:	b083      	sub	sp, #12
10008c78:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c7a:	2323      	movs	r3, #35	; 0x23
10008c7c:	4a1c      	ldr	r2, [pc, #112]	; (10008cf0 <mpu_set_int_latched+0x7c>)
10008c7e:	5cd3      	ldrb	r3, [r2, r3]
10008c80:	4283      	cmp	r3, r0
10008c82:	d02e      	beq.n	10008ce2 <mpu_set_int_latched+0x6e>
    return 0;

    if (enable)
10008c84:	2800      	cmp	r0, #0
10008c86:	d003      	beq.n	10008c90 <mpu_set_int_latched+0x1c>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c88:	2230      	movs	r2, #48	; 0x30
10008c8a:	466b      	mov	r3, sp
10008c8c:	71da      	strb	r2, [r3, #7]
10008c8e:	e002      	b.n	10008c96 <mpu_set_int_latched+0x22>
    else
    tmp = 0;
10008c90:	2200      	movs	r2, #0
10008c92:	466b      	mov	r3, sp
10008c94:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008c96:	4b16      	ldr	r3, [pc, #88]	; (10008cf0 <mpu_set_int_latched+0x7c>)
10008c98:	7c9b      	ldrb	r3, [r3, #18]
10008c9a:	2b00      	cmp	r3, #0
10008c9c:	d005      	beq.n	10008caa <mpu_set_int_latched+0x36>
    tmp |= BIT_BYPASS_EN;
10008c9e:	466b      	mov	r3, sp
10008ca0:	1dda      	adds	r2, r3, #7
10008ca2:	79d9      	ldrb	r1, [r3, #7]
10008ca4:	2302      	movs	r3, #2
10008ca6:	430b      	orrs	r3, r1
10008ca8:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008caa:	2322      	movs	r3, #34	; 0x22
10008cac:	4a10      	ldr	r2, [pc, #64]	; (10008cf0 <mpu_set_int_latched+0x7c>)
10008cae:	5cd3      	ldrb	r3, [r2, r3]
10008cb0:	2b00      	cmp	r3, #0
10008cb2:	d006      	beq.n	10008cc2 <mpu_set_int_latched+0x4e>
    tmp |= BIT_ACTL;
10008cb4:	466b      	mov	r3, sp
10008cb6:	1dda      	adds	r2, r3, #7
10008cb8:	79db      	ldrb	r3, [r3, #7]
10008cba:	2180      	movs	r1, #128	; 0x80
10008cbc:	4249      	negs	r1, r1
10008cbe:	430b      	orrs	r3, r1
10008cc0:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008cc2:	4b0b      	ldr	r3, [pc, #44]	; (10008cf0 <mpu_set_int_latched+0x7c>)
10008cc4:	681a      	ldr	r2, [r3, #0]
10008cc6:	7dd1      	ldrb	r1, [r2, #23]
10008cc8:	685b      	ldr	r3, [r3, #4]
10008cca:	7818      	ldrb	r0, [r3, #0]
10008ccc:	466b      	mov	r3, sp
10008cce:	3307      	adds	r3, #7
10008cd0:	2201      	movs	r2, #1
10008cd2:	4d08      	ldr	r5, [pc, #32]	; (10008cf4 <mpu_set_int_latched+0x80>)
10008cd4:	47a8      	blx	r5
10008cd6:	2800      	cmp	r0, #0
10008cd8:	d105      	bne.n	10008ce6 <mpu_set_int_latched+0x72>
    return -1;
    st.chip_cfg.latched_int = enable;
10008cda:	2323      	movs	r3, #35	; 0x23
10008cdc:	4a04      	ldr	r2, [pc, #16]	; (10008cf0 <mpu_set_int_latched+0x7c>)
10008cde:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ce0:	e003      	b.n	10008cea <mpu_set_int_latched+0x76>
*/
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
    return 0;
10008ce2:	2000      	movs	r0, #0
10008ce4:	e001      	b.n	10008cea <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
    tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
    tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    return -1;
10008ce6:	2001      	movs	r0, #1
10008ce8:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008cea:	b003      	add	sp, #12
10008cec:	bd30      	pop	{r4, r5, pc}
10008cee:	46c0      	nop			; (mov r8, r8)
10008cf0:	10013820 	.word	0x10013820
10008cf4:	100083a9 	.word	0x100083a9

10008cf8 <mpu_lp_accel_mode>:
*  @param[in]  rate        Minimum sampling rate, or zero to disable LP
*                          accel mode.
*  @return     0 if successful.
*/
int mpu_lp_accel_mode(unsigned short rate)
{
10008cf8:	b510      	push	{r4, lr}
10008cfa:	b082      	sub	sp, #8
    unsigned char tmp[2];

    if (rate > 40)
10008cfc:	2828      	cmp	r0, #40	; 0x28
10008cfe:	d825      	bhi.n	10008d4c <mpu_lp_accel_mode+0x54>
    return -1;

    if (!rate) {
10008d00:	2800      	cmp	r0, #0
10008d02:	d114      	bne.n	10008d2e <mpu_lp_accel_mode+0x36>
        mpu_set_int_latched(0);
10008d04:	4b15      	ldr	r3, [pc, #84]	; (10008d5c <mpu_lp_accel_mode+0x64>)
10008d06:	4798      	blx	r3
        tmp[0] = 0;
10008d08:	ab01      	add	r3, sp, #4
10008d0a:	2200      	movs	r2, #0
10008d0c:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008d0e:	3207      	adds	r2, #7
10008d10:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008d12:	4a13      	ldr	r2, [pc, #76]	; (10008d60 <mpu_lp_accel_mode+0x68>)
10008d14:	6811      	ldr	r1, [r2, #0]
10008d16:	7d49      	ldrb	r1, [r1, #21]
10008d18:	6852      	ldr	r2, [r2, #4]
10008d1a:	7810      	ldrb	r0, [r2, #0]
10008d1c:	2202      	movs	r2, #2
10008d1e:	4c11      	ldr	r4, [pc, #68]	; (10008d64 <mpu_lp_accel_mode+0x6c>)
10008d20:	47a0      	blx	r4
10008d22:	2800      	cmp	r0, #0
10008d24:	d115      	bne.n	10008d52 <mpu_lp_accel_mode+0x5a>
        return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008d26:	2200      	movs	r2, #0
10008d28:	4b0d      	ldr	r3, [pc, #52]	; (10008d60 <mpu_lp_accel_mode+0x68>)
10008d2a:	751a      	strb	r2, [r3, #20]
        return 0;
10008d2c:	e013      	b.n	10008d56 <mpu_lp_accel_mode+0x5e>
    * it gets a chance to deassert the interrupt pin; therefore, we shift this
    * responsibility over to the MCU.
    *
    * Any register read will clear the interrupt.
    */
    mpu_set_int_latched(1);
10008d2e:	2001      	movs	r0, #1
10008d30:	4b0a      	ldr	r3, [pc, #40]	; (10008d5c <mpu_lp_accel_mode+0x64>)
10008d32:	4798      	blx	r3
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d34:	4b0a      	ldr	r3, [pc, #40]	; (10008d60 <mpu_lp_accel_mode+0x68>)
10008d36:	2208      	movs	r2, #8
10008d38:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008d3a:	2200      	movs	r2, #0
10008d3c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d3e:	3201      	adds	r2, #1
10008d40:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008d42:	2000      	movs	r0, #0
10008d44:	4b08      	ldr	r3, [pc, #32]	; (10008d68 <mpu_lp_accel_mode+0x70>)
10008d46:	4798      	blx	r3

    return 0;
10008d48:	2000      	movs	r0, #0
10008d4a:	e004      	b.n	10008d56 <mpu_lp_accel_mode+0x5e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
    return -1;
10008d4c:	2001      	movs	r0, #1
10008d4e:	4240      	negs	r0, r0
10008d50:	e001      	b.n	10008d56 <mpu_lp_accel_mode+0x5e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
10008d52:	2001      	movs	r0, #1
10008d54:	4240      	negs	r0, r0
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008d56:	b002      	add	sp, #8
10008d58:	bd10      	pop	{r4, pc}
10008d5a:	46c0      	nop			; (mov r8, r8)
10008d5c:	10008c75 	.word	0x10008c75
10008d60:	10013820 	.word	0x10013820
10008d64:	100083a9 	.word	0x100083a9
10008d68:	100089a1 	.word	0x100089a1

10008d6c <mpu_set_sample_rate>:
*  Sampling rate must be between 4Hz and 1kHz.
*  @param[in]  rate    Desired sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_sample_rate(unsigned short rate)
{
10008d6c:	b530      	push	{r4, r5, lr}
10008d6e:	b083      	sub	sp, #12
10008d70:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d72:	4b2f      	ldr	r3, [pc, #188]	; (10008e30 <mpu_set_sample_rate+0xc4>)
10008d74:	7a9b      	ldrb	r3, [r3, #10]
10008d76:	2b00      	cmp	r3, #0
10008d78:	d051      	beq.n	10008e1e <mpu_set_sample_rate+0xb2>
    return -1;

    if (st.chip_cfg.dmp_on) {
10008d7a:	2324      	movs	r3, #36	; 0x24
10008d7c:	4a2c      	ldr	r2, [pc, #176]	; (10008e30 <mpu_set_sample_rate+0xc4>)
10008d7e:	5cd3      	ldrb	r3, [r2, r3]
10008d80:	2b00      	cmp	r3, #0
10008d82:	d14f      	bne.n	10008e24 <mpu_set_sample_rate+0xb8>
        return -1;
    }        
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d84:	7d13      	ldrb	r3, [r2, #20]
10008d86:	2b00      	cmp	r3, #0
10008d88:	d00a      	beq.n	10008da0 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008d8a:	1e43      	subs	r3, r0, #1
10008d8c:	b29b      	uxth	r3, r3
10008d8e:	2b27      	cmp	r3, #39	; 0x27
10008d90:	d803      	bhi.n	10008d9a <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d92:	4b28      	ldr	r3, [pc, #160]	; (10008e34 <mpu_set_sample_rate+0xc8>)
10008d94:	4798      	blx	r3
                return 0;
10008d96:	2400      	movs	r4, #0
10008d98:	e046      	b.n	10008e28 <mpu_set_sample_rate+0xbc>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
10008d9a:	2000      	movs	r0, #0
10008d9c:	4b25      	ldr	r3, [pc, #148]	; (10008e34 <mpu_set_sample_rate+0xc8>)
10008d9e:	4798      	blx	r3
        }
        if (rate < 4)
        rate = 4;
10008da0:	2104      	movs	r1, #4
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008da2:	2c03      	cmp	r4, #3
10008da4:	d907      	bls.n	10008db6 <mpu_set_sample_rate+0x4a>
10008da6:	1c21      	adds	r1, r4, #0
10008da8:	23fa      	movs	r3, #250	; 0xfa
10008daa:	009b      	lsls	r3, r3, #2
10008dac:	429c      	cmp	r4, r3
10008dae:	d901      	bls.n	10008db4 <mpu_set_sample_rate+0x48>
10008db0:	4b21      	ldr	r3, [pc, #132]	; (10008e38 <mpu_set_sample_rate+0xcc>)
10008db2:	8819      	ldrh	r1, [r3, #0]
10008db4:	b289      	uxth	r1, r1
        rate = 4;
        else if (rate > 1000)
        rate = 1000;

        data = 1000 / rate - 1;
10008db6:	466b      	mov	r3, sp
10008db8:	1ddc      	adds	r4, r3, #7
10008dba:	20fa      	movs	r0, #250	; 0xfa
10008dbc:	0080      	lsls	r0, r0, #2
10008dbe:	4b1f      	ldr	r3, [pc, #124]	; (10008e3c <mpu_set_sample_rate+0xd0>)
10008dc0:	4798      	blx	r3
10008dc2:	3801      	subs	r0, #1
10008dc4:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data)) {
10008dc6:	4b1a      	ldr	r3, [pc, #104]	; (10008e30 <mpu_set_sample_rate+0xc4>)
10008dc8:	681a      	ldr	r2, [r3, #0]
10008dca:	7851      	ldrb	r1, [r2, #1]
10008dcc:	685b      	ldr	r3, [r3, #4]
10008dce:	7818      	ldrb	r0, [r3, #0]
10008dd0:	0023      	movs	r3, r4
10008dd2:	2201      	movs	r2, #1
10008dd4:	4c1a      	ldr	r4, [pc, #104]	; (10008e40 <mpu_set_sample_rate+0xd4>)
10008dd6:	47a0      	blx	r4
10008dd8:	1e04      	subs	r4, r0, #0
10008dda:	d008      	beq.n	10008dee <mpu_set_sample_rate+0x82>
            DBG_LOG("-1...");
10008ddc:	4819      	ldr	r0, [pc, #100]	; (10008e44 <mpu_set_sample_rate+0xd8>)
10008dde:	4b1a      	ldr	r3, [pc, #104]	; (10008e48 <mpu_set_sample_rate+0xdc>)
10008de0:	4798      	blx	r3
10008de2:	481a      	ldr	r0, [pc, #104]	; (10008e4c <mpu_set_sample_rate+0xe0>)
10008de4:	4b1a      	ldr	r3, [pc, #104]	; (10008e50 <mpu_set_sample_rate+0xe4>)
10008de6:	4798      	blx	r3
            return -1;
10008de8:	2401      	movs	r4, #1
10008dea:	4264      	negs	r4, r4
10008dec:	e01c      	b.n	10008e28 <mpu_set_sample_rate+0xbc>
        }            

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008dee:	4d10      	ldr	r5, [pc, #64]	; (10008e30 <mpu_set_sample_rate+0xc4>)
10008df0:	466b      	mov	r3, sp
10008df2:	79d9      	ldrb	r1, [r3, #7]
10008df4:	3101      	adds	r1, #1
10008df6:	20fa      	movs	r0, #250	; 0xfa
10008df8:	0080      	lsls	r0, r0, #2
10008dfa:	4b10      	ldr	r3, [pc, #64]	; (10008e3c <mpu_set_sample_rate+0xd0>)
10008dfc:	4798      	blx	r3
10008dfe:	81e8      	strh	r0, [r5, #14]

        #ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e00:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008e02:	1c18      	adds	r0, r3, #0
10008e04:	b29b      	uxth	r3, r3
10008e06:	2b64      	cmp	r3, #100	; 0x64
10008e08:	d900      	bls.n	10008e0c <mpu_set_sample_rate+0xa0>
10008e0a:	2064      	movs	r0, #100	; 0x64
10008e0c:	b280      	uxth	r0, r0
10008e0e:	4b11      	ldr	r3, [pc, #68]	; (10008e54 <mpu_set_sample_rate+0xe8>)
10008e10:	4798      	blx	r3
        #endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e12:	4b07      	ldr	r3, [pc, #28]	; (10008e30 <mpu_set_sample_rate+0xc4>)
10008e14:	89d8      	ldrh	r0, [r3, #14]
10008e16:	0840      	lsrs	r0, r0, #1
10008e18:	4b0f      	ldr	r3, [pc, #60]	; (10008e58 <mpu_set_sample_rate+0xec>)
10008e1a:	4798      	blx	r3
        return 0;
10008e1c:	e004      	b.n	10008e28 <mpu_set_sample_rate+0xbc>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008e1e:	2401      	movs	r4, #1
10008e20:	4264      	negs	r4, r4
10008e22:	e001      	b.n	10008e28 <mpu_set_sample_rate+0xbc>

    if (st.chip_cfg.dmp_on) {
        return -1;
10008e24:	2401      	movs	r4, #1
10008e26:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008e28:	0020      	movs	r0, r4
10008e2a:	b003      	add	sp, #12
10008e2c:	bd30      	pop	{r4, r5, pc}
10008e2e:	46c0      	nop			; (mov r8, r8)
10008e30:	10013820 	.word	0x10013820
10008e34:	10008cf9 	.word	0x10008cf9
10008e38:	10012754 	.word	0x10012754
10008e3c:	1000f939 	.word	0x1000f939
10008e40:	100083a9 	.word	0x100083a9
10008e44:	10012834 	.word	0x10012834
10008e48:	10011815 	.word	0x10011815
10008e4c:	10012844 	.word	0x10012844
10008e50:	100116f5 	.word	0x100116f5
10008e54:	10008929 	.word	0x10008929
10008e58:	10008875 	.word	0x10008875

10008e5c <mpu_set_sensors>:
*  \n INV_XYZ_COMPASS
*  @param[in]  sensors    Mask of sensors to wake.
*  @return     0 if successful.
*/
int mpu_set_sensors(unsigned char sensors)
{
10008e5c:	b530      	push	{r4, r5, lr}
10008e5e:	b083      	sub	sp, #12
10008e60:	0004      	movs	r4, r0
    unsigned char data;
    #ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
    #endif

    if (sensors & INV_XYZ_GYRO)
10008e62:	2370      	movs	r3, #112	; 0x70
10008e64:	4203      	tst	r3, r0
10008e66:	d003      	beq.n	10008e70 <mpu_set_sensors+0x14>
    data = INV_CLK_PLL;
10008e68:	2201      	movs	r2, #1
10008e6a:	466b      	mov	r3, sp
10008e6c:	71da      	strb	r2, [r3, #7]
10008e6e:	e015      	b.n	10008e9c <mpu_set_sensors+0x40>
    else if (sensors)
10008e70:	2800      	cmp	r0, #0
10008e72:	d003      	beq.n	10008e7c <mpu_set_sensors+0x20>
    data = 0;
10008e74:	2200      	movs	r2, #0
10008e76:	466b      	mov	r3, sp
10008e78:	71da      	strb	r2, [r3, #7]
10008e7a:	e00f      	b.n	10008e9c <mpu_set_sensors+0x40>
    else
    data = BIT_SLEEP;
10008e7c:	466b      	mov	r3, sp
10008e7e:	3307      	adds	r3, #7
10008e80:	2240      	movs	r2, #64	; 0x40
10008e82:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) { // w 6b xx
10008e84:	4a6a      	ldr	r2, [pc, #424]	; (10009030 <mpu_set_sensors+0x1d4>)
10008e86:	6811      	ldr	r1, [r2, #0]
10008e88:	7d49      	ldrb	r1, [r1, #21]
10008e8a:	6852      	ldr	r2, [r2, #4]
10008e8c:	7810      	ldrb	r0, [r2, #0]
10008e8e:	2201      	movs	r2, #1
10008e90:	4d68      	ldr	r5, [pc, #416]	; (10009034 <mpu_set_sensors+0x1d8>)
10008e92:	47a8      	blx	r5
10008e94:	2800      	cmp	r0, #0
10008e96:	d100      	bne.n	10008e9a <mpu_set_sensors+0x3e>
10008e98:	e0b2      	b.n	10009000 <mpu_set_sensors+0x1a4>
10008e9a:	e00b      	b.n	10008eb4 <mpu_set_sensors+0x58>
10008e9c:	4b64      	ldr	r3, [pc, #400]	; (10009030 <mpu_set_sensors+0x1d4>)
10008e9e:	681a      	ldr	r2, [r3, #0]
10008ea0:	7d51      	ldrb	r1, [r2, #21]
10008ea2:	685b      	ldr	r3, [r3, #4]
10008ea4:	7818      	ldrb	r0, [r3, #0]
10008ea6:	466b      	mov	r3, sp
10008ea8:	3307      	adds	r3, #7
10008eaa:	2201      	movs	r2, #1
10008eac:	4d61      	ldr	r5, [pc, #388]	; (10009034 <mpu_set_sensors+0x1d8>)
10008eae:	47a8      	blx	r5
10008eb0:	2800      	cmp	r0, #0
10008eb2:	d005      	beq.n	10008ec0 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008eb4:	2200      	movs	r2, #0
10008eb6:	4b5e      	ldr	r3, [pc, #376]	; (10009030 <mpu_set_sensors+0x1d4>)
10008eb8:	729a      	strb	r2, [r3, #10]
        return -1;
10008eba:	2501      	movs	r5, #1
10008ebc:	426d      	negs	r5, r5
10008ebe:	e0b4      	b.n	1000902a <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008ec0:	466b      	mov	r3, sp
10008ec2:	1dda      	adds	r2, r3, #7
10008ec4:	79db      	ldrb	r3, [r3, #7]
10008ec6:	2140      	movs	r1, #64	; 0x40
10008ec8:	438b      	bics	r3, r1
10008eca:	4959      	ldr	r1, [pc, #356]	; (10009030 <mpu_set_sensors+0x1d4>)
10008ecc:	730b      	strb	r3, [r1, #12]

    data = 0;
10008ece:	2300      	movs	r3, #0
10008ed0:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008ed2:	0663      	lsls	r3, r4, #25
10008ed4:	d402      	bmi.n	10008edc <mpu_set_sensors+0x80>
    data |= BIT_STBY_XG;
10008ed6:	2204      	movs	r2, #4
10008ed8:	466b      	mov	r3, sp
10008eda:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008edc:	06a3      	lsls	r3, r4, #26
10008ede:	d405      	bmi.n	10008eec <mpu_set_sensors+0x90>
    data |= BIT_STBY_YG;
10008ee0:	466b      	mov	r3, sp
10008ee2:	1dda      	adds	r2, r3, #7
10008ee4:	79d9      	ldrb	r1, [r3, #7]
10008ee6:	2302      	movs	r3, #2
10008ee8:	430b      	orrs	r3, r1
10008eea:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008eec:	06e3      	lsls	r3, r4, #27
10008eee:	d405      	bmi.n	10008efc <mpu_set_sensors+0xa0>
    data |= BIT_STBY_ZG;
10008ef0:	466b      	mov	r3, sp
10008ef2:	1dda      	adds	r2, r3, #7
10008ef4:	79d9      	ldrb	r1, [r3, #7]
10008ef6:	2301      	movs	r3, #1
10008ef8:	430b      	orrs	r3, r1
10008efa:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008efc:	0723      	lsls	r3, r4, #28
10008efe:	d405      	bmi.n	10008f0c <mpu_set_sensors+0xb0>
    data |= BIT_STBY_XYZA;
10008f00:	466b      	mov	r3, sp
10008f02:	1dda      	adds	r2, r3, #7
10008f04:	79d9      	ldrb	r1, [r3, #7]
10008f06:	2338      	movs	r3, #56	; 0x38
10008f08:	430b      	orrs	r3, r1
10008f0a:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) { // w 6c xx
10008f0c:	4b48      	ldr	r3, [pc, #288]	; (10009030 <mpu_set_sensors+0x1d4>)
10008f0e:	681a      	ldr	r2, [r3, #0]
10008f10:	7d91      	ldrb	r1, [r2, #22]
10008f12:	685b      	ldr	r3, [r3, #4]
10008f14:	7818      	ldrb	r0, [r3, #0]
10008f16:	466b      	mov	r3, sp
10008f18:	3307      	adds	r3, #7
10008f1a:	2201      	movs	r2, #1
10008f1c:	4d45      	ldr	r5, [pc, #276]	; (10009034 <mpu_set_sensors+0x1d8>)
10008f1e:	47a8      	blx	r5
10008f20:	2800      	cmp	r0, #0
10008f22:	d005      	beq.n	10008f30 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008f24:	2200      	movs	r2, #0
10008f26:	4b42      	ldr	r3, [pc, #264]	; (10009030 <mpu_set_sensors+0x1d4>)
10008f28:	729a      	strb	r2, [r3, #10]
        return -1;
10008f2a:	2501      	movs	r5, #1
10008f2c:	426d      	negs	r5, r5
10008f2e:	e07c      	b.n	1000902a <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008f30:	2308      	movs	r3, #8
10008f32:	0022      	movs	r2, r4
10008f34:	439a      	bics	r2, r3
10008f36:	d06b      	beq.n	10009010 <mpu_set_sensors+0x1b4>
    /* Latched interrupts only used in LP accel mode. */
    mpu_set_int_latched(0);
10008f38:	2000      	movs	r0, #0
10008f3a:	4b3f      	ldr	r3, [pc, #252]	; (10009038 <mpu_set_sensors+0x1dc>)
10008f3c:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a r xx (xx)
10008f3e:	4b3c      	ldr	r3, [pc, #240]	; (10009030 <mpu_set_sensors+0x1d4>)
10008f40:	681a      	ldr	r2, [r3, #0]
10008f42:	7911      	ldrb	r1, [r2, #4]
10008f44:	685b      	ldr	r3, [r3, #4]
10008f46:	7818      	ldrb	r0, [r3, #0]
10008f48:	466b      	mov	r3, sp
10008f4a:	3306      	adds	r3, #6
10008f4c:	2201      	movs	r2, #1
10008f4e:	4d3b      	ldr	r5, [pc, #236]	; (1000903c <mpu_set_sensors+0x1e0>)
10008f50:	47a8      	blx	r5
10008f52:	2800      	cmp	r0, #0
10008f54:	d148      	bne.n	10008fe8 <mpu_set_sensors+0x18c>
    return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f56:	07e3      	lsls	r3, r4, #31
10008f58:	d509      	bpl.n	10008f6e <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008f5a:	2211      	movs	r2, #17
10008f5c:	466b      	mov	r3, sp
10008f5e:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008f60:	466b      	mov	r3, sp
10008f62:	1d9a      	adds	r2, r3, #6
10008f64:	7999      	ldrb	r1, [r3, #6]
10008f66:	2320      	movs	r3, #32
10008f68:	430b      	orrs	r3, r1
10008f6a:	7013      	strb	r3, [r2, #0]
10008f6c:	e008      	b.n	10008f80 <mpu_set_sensors+0x124>
        } else {
        data = AKM_POWER_DOWN;
10008f6e:	2210      	movs	r2, #16
10008f70:	466b      	mov	r3, sp
10008f72:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f74:	466b      	mov	r3, sp
10008f76:	1d9a      	adds	r2, r3, #6
10008f78:	799b      	ldrb	r3, [r3, #6]
10008f7a:	2120      	movs	r1, #32
10008f7c:	438b      	bics	r3, r1
10008f7e:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f80:	2324      	movs	r3, #36	; 0x24
10008f82:	4a2b      	ldr	r2, [pc, #172]	; (10009030 <mpu_set_sensors+0x1d4>)
10008f84:	5cd3      	ldrb	r3, [r2, r3]
10008f86:	2b00      	cmp	r3, #0
10008f88:	d007      	beq.n	10008f9a <mpu_set_sensors+0x13e>
    user_ctrl |= BIT_DMP_EN;
10008f8a:	466b      	mov	r3, sp
10008f8c:	1d9a      	adds	r2, r3, #6
10008f8e:	799b      	ldrb	r3, [r3, #6]
10008f90:	2180      	movs	r1, #128	; 0x80
10008f92:	4249      	negs	r1, r1
10008f94:	430b      	orrs	r3, r1
10008f96:	7013      	strb	r3, [r2, #0]
10008f98:	e005      	b.n	10008fa6 <mpu_set_sensors+0x14a>
    else
    user_ctrl &= ~BIT_DMP_EN;
10008f9a:	466b      	mov	r3, sp
10008f9c:	1d9a      	adds	r2, r3, #6
10008f9e:	799b      	ldrb	r3, [r3, #6]
10008fa0:	217f      	movs	r1, #127	; 0x7f
10008fa2:	400b      	ands	r3, r1
10008fa4:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data)) // w 64 xx
10008fa6:	4b22      	ldr	r3, [pc, #136]	; (10009030 <mpu_set_sensors+0x1d4>)
10008fa8:	2226      	movs	r2, #38	; 0x26
10008faa:	6819      	ldr	r1, [r3, #0]
10008fac:	5c89      	ldrb	r1, [r1, r2]
10008fae:	685b      	ldr	r3, [r3, #4]
10008fb0:	7818      	ldrb	r0, [r3, #0]
10008fb2:	466b      	mov	r3, sp
10008fb4:	3307      	adds	r3, #7
10008fb6:	3a25      	subs	r2, #37	; 0x25
10008fb8:	4d1e      	ldr	r5, [pc, #120]	; (10009034 <mpu_set_sensors+0x1d8>)
10008fba:	47a8      	blx	r5
10008fbc:	2800      	cmp	r0, #0
10008fbe:	d116      	bne.n	10008fee <mpu_set_sensors+0x192>
    return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a xx
10008fc0:	4b1b      	ldr	r3, [pc, #108]	; (10009030 <mpu_set_sensors+0x1d4>)
10008fc2:	681a      	ldr	r2, [r3, #0]
10008fc4:	7911      	ldrb	r1, [r2, #4]
10008fc6:	685b      	ldr	r3, [r3, #4]
10008fc8:	7818      	ldrb	r0, [r3, #0]
10008fca:	466b      	mov	r3, sp
10008fcc:	3306      	adds	r3, #6
10008fce:	2201      	movs	r2, #1
10008fd0:	4d18      	ldr	r5, [pc, #96]	; (10009034 <mpu_set_sensors+0x1d8>)
10008fd2:	47a8      	blx	r5
10008fd4:	1e05      	subs	r5, r0, #0
10008fd6:	d10d      	bne.n	10008ff4 <mpu_set_sensors+0x198>
    return -1;
    #endif
    #endif

    st.chip_cfg.sensors = sensors;
10008fd8:	4b15      	ldr	r3, [pc, #84]	; (10009030 <mpu_set_sensors+0x1d4>)
10008fda:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008fdc:	2200      	movs	r2, #0
10008fde:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008fe0:	2032      	movs	r0, #50	; 0x32
10008fe2:	4b17      	ldr	r3, [pc, #92]	; (10009040 <mpu_set_sensors+0x1e4>)
10008fe4:	4798      	blx	r3
    return 0;
10008fe6:	e020      	b.n	1000902a <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a r xx (xx)
    return -1;
10008fe8:	2501      	movs	r5, #1
10008fea:	426d      	negs	r5, r5
10008fec:	e01d      	b.n	1000902a <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
    user_ctrl |= BIT_DMP_EN;
    else
    user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data)) // w 64 xx
    return -1;
10008fee:	2501      	movs	r5, #1
10008ff0:	426d      	negs	r5, r5
10008ff2:	e01a      	b.n	1000902a <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a xx
    return -1;
10008ff4:	2501      	movs	r5, #1
10008ff6:	426d      	negs	r5, r5
10008ff8:	e017      	b.n	1000902a <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a r xx (xx)
    return -1;
10008ffa:	2501      	movs	r5, #1
10008ffc:	426d      	negs	r5, r5
10008ffe:	e014      	b.n	1000902a <mpu_set_sensors+0x1ce>
    data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) { // w 6b xx
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009000:	466b      	mov	r3, sp
10009002:	3307      	adds	r3, #7
10009004:	781b      	ldrb	r3, [r3, #0]
10009006:	2240      	movs	r2, #64	; 0x40
10009008:	4393      	bics	r3, r2
1000900a:	4a09      	ldr	r2, [pc, #36]	; (10009030 <mpu_set_sensors+0x1d4>)
1000900c:	7313      	strb	r3, [r2, #12]
1000900e:	e762      	b.n	10008ed6 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl)) // w 6a r xx (xx)
10009010:	4b07      	ldr	r3, [pc, #28]	; (10009030 <mpu_set_sensors+0x1d4>)
10009012:	681a      	ldr	r2, [r3, #0]
10009014:	7911      	ldrb	r1, [r2, #4]
10009016:	685b      	ldr	r3, [r3, #4]
10009018:	7818      	ldrb	r0, [r3, #0]
1000901a:	466b      	mov	r3, sp
1000901c:	3306      	adds	r3, #6
1000901e:	2201      	movs	r2, #1
10009020:	4d06      	ldr	r5, [pc, #24]	; (1000903c <mpu_set_sensors+0x1e0>)
10009022:	47a8      	blx	r5
10009024:	2800      	cmp	r0, #0
10009026:	d0a2      	beq.n	10008f6e <mpu_set_sensors+0x112>
10009028:	e7e7      	b.n	10008ffa <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
1000902a:	0028      	movs	r0, r5
1000902c:	b003      	add	sp, #12
1000902e:	bd30      	pop	{r4, r5, pc}
10009030:	10013820 	.word	0x10013820
10009034:	100083a9 	.word	0x100083a9
10009038:	10008c75 	.word	0x10008c75
1000903c:	100082e5 	.word	0x100082e5
10009040:	10008129 	.word	0x10008129

10009044 <mpu_init>:
*  Data ready interrupt: Disabled, active HIGH, unlatched.
*  @param[in]  int_param   Platform-specific parameters to interrupt API.
*  @return     0 if successful.
*/
int mpu_init(struct int_param_s *int_param)
{
10009044:	b570      	push	{r4, r5, r6, lr}
10009046:	b084      	sub	sp, #16
10009048:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1000904a:	ab02      	add	r3, sp, #8
1000904c:	2280      	movs	r2, #128	; 0x80
1000904e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data)) // w 6b 80
10009050:	4abb      	ldr	r2, [pc, #748]	; (10009340 <mpu_init+0x2fc>)
10009052:	6811      	ldr	r1, [r2, #0]
10009054:	7d49      	ldrb	r1, [r1, #21]
10009056:	6852      	ldr	r2, [r2, #4]
10009058:	7810      	ldrb	r0, [r2, #0]
1000905a:	2201      	movs	r2, #1
1000905c:	4cb9      	ldr	r4, [pc, #740]	; (10009344 <mpu_init+0x300>)
1000905e:	47a0      	blx	r4
10009060:	2800      	cmp	r0, #0
10009062:	d000      	beq.n	10009066 <mpu_init+0x22>
10009064:	e14f      	b.n	10009306 <mpu_init+0x2c2>
    return -1;
    delay_ms(100);
10009066:	3064      	adds	r0, #100	; 0x64
10009068:	4bb7      	ldr	r3, [pc, #732]	; (10009348 <mpu_init+0x304>)
1000906a:	4798      	blx	r3

    /* Wake up chip (w 6B 00). */
    data[0] = 0x00;
1000906c:	ab02      	add	r3, sp, #8
1000906e:	2200      	movs	r2, #0
10009070:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data)) // w 6b 00
10009072:	4ab3      	ldr	r2, [pc, #716]	; (10009340 <mpu_init+0x2fc>)
10009074:	6811      	ldr	r1, [r2, #0]
10009076:	7d49      	ldrb	r1, [r1, #21]
10009078:	6852      	ldr	r2, [r2, #4]
1000907a:	7810      	ldrb	r0, [r2, #0]
1000907c:	2201      	movs	r2, #1
1000907e:	4cb1      	ldr	r4, [pc, #708]	; (10009344 <mpu_init+0x300>)
10009080:	47a0      	blx	r4
10009082:	2800      	cmp	r0, #0
10009084:	d000      	beq.n	10009088 <mpu_init+0x44>
10009086:	e141      	b.n	1000930c <mpu_init+0x2c8>
    return -1;

    st.chip_cfg.accel_half = 0;
10009088:	4aad      	ldr	r2, [pc, #692]	; (10009340 <mpu_init+0x2fc>)
1000908a:	2300      	movs	r3, #0
1000908c:	74d3      	strb	r3, [r2, #19]

    #ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
1000908e:	ab02      	add	r3, sp, #8
10009090:	2148      	movs	r1, #72	; 0x48
10009092:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data)) // w 1d 48
10009094:	6811      	ldr	r1, [r2, #0]
10009096:	7a09      	ldrb	r1, [r1, #8]
10009098:	6852      	ldr	r2, [r2, #4]
1000909a:	7810      	ldrb	r0, [r2, #0]
1000909c:	2201      	movs	r2, #1
1000909e:	4ca9      	ldr	r4, [pc, #676]	; (10009344 <mpu_init+0x300>)
100090a0:	47a0      	blx	r4
100090a2:	2800      	cmp	r0, #0
100090a4:	d000      	beq.n	100090a8 <mpu_init+0x64>
100090a6:	e134      	b.n	10009312 <mpu_init+0x2ce>
    return -1;
    #endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
100090a8:	4ca5      	ldr	r4, [pc, #660]	; (10009340 <mpu_init+0x2fc>)
100090aa:	23ff      	movs	r3, #255	; 0xff
100090ac:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
100090ae:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
100090b0:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
100090b2:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
100090b4:	2201      	movs	r2, #1
100090b6:	4252      	negs	r2, r2
100090b8:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090ba:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
100090bc:	74a3      	strb	r3, [r4, #18]
    #ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090be:	8522      	strh	r2, [r4, #40]	; 0x28
    #endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
100090c0:	3bfe      	subs	r3, #254	; 0xfe
100090c2:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0;
100090c4:	2500      	movs	r5, #0
100090c6:	3321      	adds	r3, #33	; 0x21
100090c8:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
100090ca:	3301      	adds	r3, #1
100090cc:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090ce:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090d0:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090d2:	0020      	movs	r0, r4
100090d4:	3016      	adds	r0, #22
100090d6:	320d      	adds	r2, #13
100090d8:	2100      	movs	r1, #0
100090da:	4b9c      	ldr	r3, [pc, #624]	; (1000934c <mpu_init+0x308>)
100090dc:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090de:	2324      	movs	r3, #36	; 0x24
100090e0:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090e2:	3301      	adds	r3, #1
100090e4:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
100090e6:	84e5      	strh	r5, [r4, #38]	; 0x26
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // w 1b 00
100090e8:	20fa      	movs	r0, #250	; 0xfa
100090ea:	4b99      	ldr	r3, [pc, #612]	; (10009350 <mpu_init+0x30c>)
100090ec:	4798      	blx	r3
100090ee:	2800      	cmp	r0, #0
100090f0:	d000      	beq.n	100090f4 <mpu_init+0xb0>
100090f2:	e111      	b.n	10009318 <mpu_init+0x2d4>
    if (mpu_set_accel_fsr(4)) return -1; // w 1c 08
100090f4:	3004      	adds	r0, #4
100090f6:	4b97      	ldr	r3, [pc, #604]	; (10009354 <mpu_init+0x310>)
100090f8:	4798      	blx	r3
100090fa:	2800      	cmp	r0, #0
100090fc:	d000      	beq.n	10009100 <mpu_init+0xbc>
100090fe:	e10e      	b.n	1000931e <mpu_init+0x2da>
    if (mpu_set_lpf(42)) return -1; // w 1a 03
10009100:	302a      	adds	r0, #42	; 0x2a
10009102:	4b95      	ldr	r3, [pc, #596]	; (10009358 <mpu_init+0x314>)
10009104:	4798      	blx	r3
10009106:	2800      	cmp	r0, #0
10009108:	d000      	beq.n	1000910c <mpu_init+0xc8>
1000910a:	e10b      	b.n	10009324 <mpu_init+0x2e0>
    if (mpu_set_sample_rate(50)) return -1; // w 19 13 - w 1a 04
1000910c:	3032      	adds	r0, #50	; 0x32
1000910e:	4b93      	ldr	r3, [pc, #588]	; (1000935c <mpu_init+0x318>)
10009110:	4798      	blx	r3
10009112:	2800      	cmp	r0, #0
10009114:	d000      	beq.n	10009118 <mpu_init+0xd4>
10009116:	e108      	b.n	1000932a <mpu_init+0x2e6>
    if (mpu_configure_fifo(0)) return -1; // w 38 00
10009118:	4b91      	ldr	r3, [pc, #580]	; (10009360 <mpu_init+0x31c>)
1000911a:	4798      	blx	r3
1000911c:	2800      	cmp	r0, #0
1000911e:	d000      	beq.n	10009122 <mpu_init+0xde>
10009120:	e106      	b.n	10009330 <mpu_init+0x2ec>

    if (int_param)
10009122:	2e00      	cmp	r6, #0
10009124:	d004      	beq.n	10009130 <mpu_init+0xec>
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
10009126:	2202      	movs	r2, #2
10009128:	498e      	ldr	r1, [pc, #568]	; (10009364 <mpu_init+0x320>)
1000912a:	301d      	adds	r0, #29
1000912c:	4b8e      	ldr	r3, [pc, #568]	; (10009368 <mpu_init+0x324>)
1000912e:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1); // w 6a r x x - w 6a 20 - 3ms - w 37 02
10009130:	2001      	movs	r0, #1
10009132:	4b8e      	ldr	r3, [pc, #568]	; (1000936c <mpu_init+0x328>)
10009134:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009136:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data); // w_ 00 r 48 9a
10009138:	4d8d      	ldr	r5, [pc, #564]	; (10009370 <mpu_init+0x32c>)
1000913a:	ab01      	add	r3, sp, #4
1000913c:	2201      	movs	r2, #1
1000913e:	2100      	movs	r1, #0
10009140:	0020      	movs	r0, r4
10009142:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
10009144:	2800      	cmp	r0, #0
10009146:	d103      	bne.n	10009150 <mpu_init+0x10c>
10009148:	466b      	mov	r3, sp
1000914a:	791b      	ldrb	r3, [r3, #4]
1000914c:	2b48      	cmp	r3, #72	; 0x48
1000914e:	d004      	beq.n	1000915a <mpu_init+0x116>
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1); // w 6a r x x - w 6a 20 - 3ms - w 37 02

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009150:	3401      	adds	r4, #1
10009152:	b2e4      	uxtb	r4, r4
10009154:	2c10      	cmp	r4, #16
10009156:	d1f0      	bne.n	1000913a <mpu_init+0xf6>
10009158:	e001      	b.n	1000915e <mpu_init+0x11a>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data); // w_ 00 r 48 9a
        if (!result && (data[0] == AKM_WHOAMI))
        break;
    }

    if (akm_addr > 0x0F) {
1000915a:	2c0f      	cmp	r4, #15
1000915c:	d905      	bls.n	1000916a <mpu_init+0x126>
        /* TODO: Handle this case in all compass-related functions. */
        DBG_LOG("Compass not found.\n");
1000915e:	4885      	ldr	r0, [pc, #532]	; (10009374 <mpu_init+0x330>)
10009160:	4c85      	ldr	r4, [pc, #532]	; (10009378 <mpu_init+0x334>)
10009162:	47a0      	blx	r4
10009164:	4885      	ldr	r0, [pc, #532]	; (1000937c <mpu_init+0x338>)
10009166:	47a0      	blx	r4
10009168:	e0c4      	b.n	100092f4 <mpu_init+0x2b0>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
1000916a:	232a      	movs	r3, #42	; 0x2a
1000916c:	4a74      	ldr	r2, [pc, #464]	; (10009340 <mpu_init+0x2fc>)
1000916e:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009170:	ab01      	add	r3, sp, #4
10009172:	2210      	movs	r2, #16
10009174:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data)) // w_ 0a 10
10009176:	3a0f      	subs	r2, #15
10009178:	210a      	movs	r1, #10
1000917a:	0020      	movs	r0, r4
1000917c:	4c71      	ldr	r4, [pc, #452]	; (10009344 <mpu_init+0x300>)
1000917e:	47a0      	blx	r4
10009180:	2800      	cmp	r0, #0
10009182:	d000      	beq.n	10009186 <mpu_init+0x142>
10009184:	e0b6      	b.n	100092f4 <mpu_init+0x2b0>
    return -1;
    delay_ms(1);
10009186:	3001      	adds	r0, #1
10009188:	4b6f      	ldr	r3, [pc, #444]	; (10009348 <mpu_init+0x304>)
1000918a:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000918c:	ab01      	add	r3, sp, #4
1000918e:	221f      	movs	r2, #31
10009190:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data)) // w_ 0a 1f
10009192:	320b      	adds	r2, #11
10009194:	496a      	ldr	r1, [pc, #424]	; (10009340 <mpu_init+0x2fc>)
10009196:	5c88      	ldrb	r0, [r1, r2]
10009198:	3a29      	subs	r2, #41	; 0x29
1000919a:	210a      	movs	r1, #10
1000919c:	4c69      	ldr	r4, [pc, #420]	; (10009344 <mpu_init+0x300>)
1000919e:	47a0      	blx	r4
100091a0:	2800      	cmp	r0, #0
100091a2:	d000      	beq.n	100091a6 <mpu_init+0x162>
100091a4:	e0a6      	b.n	100092f4 <mpu_init+0x2b0>
    return -1;
    delay_ms(1);
100091a6:	3001      	adds	r0, #1
100091a8:	4b67      	ldr	r3, [pc, #412]	; (10009348 <mpu_init+0x304>)
100091aa:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data)) // w_ 10 r ad ad a3
100091ac:	232a      	movs	r3, #42	; 0x2a
100091ae:	4a64      	ldr	r2, [pc, #400]	; (10009340 <mpu_init+0x2fc>)
100091b0:	5cd0      	ldrb	r0, [r2, r3]
100091b2:	ab01      	add	r3, sp, #4
100091b4:	2203      	movs	r2, #3
100091b6:	2110      	movs	r1, #16
100091b8:	4c6d      	ldr	r4, [pc, #436]	; (10009370 <mpu_init+0x32c>)
100091ba:	47a0      	blx	r4
100091bc:	2800      	cmp	r0, #0
100091be:	d000      	beq.n	100091c2 <mpu_init+0x17e>
100091c0:	e098      	b.n	100092f4 <mpu_init+0x2b0>
    return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091c2:	4a5f      	ldr	r2, [pc, #380]	; (10009340 <mpu_init+0x2fc>)
100091c4:	ab01      	add	r3, sp, #4
100091c6:	7819      	ldrb	r1, [r3, #0]
100091c8:	3180      	adds	r1, #128	; 0x80
100091ca:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091cc:	7859      	ldrb	r1, [r3, #1]
100091ce:	3180      	adds	r1, #128	; 0x80
100091d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091d2:	7899      	ldrb	r1, [r3, #2]
100091d4:	3180      	adds	r1, #128	; 0x80
100091d6:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091d8:	2110      	movs	r1, #16
100091da:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data)) // w_ 0a 10
100091dc:	311a      	adds	r1, #26
100091de:	5c50      	ldrb	r0, [r2, r1]
100091e0:	2201      	movs	r2, #1
100091e2:	3920      	subs	r1, #32
100091e4:	4c57      	ldr	r4, [pc, #348]	; (10009344 <mpu_init+0x300>)
100091e6:	47a0      	blx	r4
100091e8:	2800      	cmp	r0, #0
100091ea:	d000      	beq.n	100091ee <mpu_init+0x1aa>
100091ec:	e082      	b.n	100092f4 <mpu_init+0x2b0>
    return -1;
    delay_ms(1);
100091ee:	3001      	adds	r0, #1
100091f0:	4b55      	ldr	r3, [pc, #340]	; (10009348 <mpu_init+0x304>)
100091f2:	4798      	blx	r3

    mpu_set_bypass(0); // w 6a r x x - w a4 20 - 3ms - w 37 00
100091f4:	2000      	movs	r0, #0
100091f6:	4b5d      	ldr	r3, [pc, #372]	; (1000936c <mpu_init+0x328>)
100091f8:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091fa:	ab01      	add	r3, sp, #4
100091fc:	2240      	movs	r2, #64	; 0x40
100091fe:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data)) // w 24 40
10009200:	4a4f      	ldr	r2, [pc, #316]	; (10009340 <mpu_init+0x2fc>)
10009202:	6811      	ldr	r1, [r2, #0]
10009204:	7e89      	ldrb	r1, [r1, #26]
10009206:	6852      	ldr	r2, [r2, #4]
10009208:	7810      	ldrb	r0, [r2, #0]
1000920a:	2201      	movs	r2, #1
1000920c:	4c4d      	ldr	r4, [pc, #308]	; (10009344 <mpu_init+0x300>)
1000920e:	47a0      	blx	r4
10009210:	2800      	cmp	r0, #0
10009212:	d16f      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009214:	ab01      	add	r3, sp, #4
10009216:	4a4a      	ldr	r2, [pc, #296]	; (10009340 <mpu_init+0x2fc>)
10009218:	212a      	movs	r1, #42	; 0x2a
1000921a:	5c51      	ldrb	r1, [r2, r1]
1000921c:	3880      	subs	r0, #128	; 0x80
1000921e:	4301      	orrs	r1, r0
10009220:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data)) // w 25 8c
10009222:	6811      	ldr	r1, [r2, #0]
10009224:	7f89      	ldrb	r1, [r1, #30]
10009226:	6852      	ldr	r2, [r2, #4]
10009228:	7810      	ldrb	r0, [r2, #0]
1000922a:	2201      	movs	r2, #1
1000922c:	4c45      	ldr	r4, [pc, #276]	; (10009344 <mpu_init+0x300>)
1000922e:	47a0      	blx	r4
10009230:	2800      	cmp	r0, #0
10009232:	d15f      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009234:	ab01      	add	r3, sp, #4
10009236:	2202      	movs	r2, #2
10009238:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data)) // w 26 02
1000923a:	4a41      	ldr	r2, [pc, #260]	; (10009340 <mpu_init+0x2fc>)
1000923c:	6811      	ldr	r1, [r2, #0]
1000923e:	7fc9      	ldrb	r1, [r1, #31]
10009240:	6852      	ldr	r2, [r2, #4]
10009242:	7810      	ldrb	r0, [r2, #0]
10009244:	2201      	movs	r2, #1
10009246:	4c3f      	ldr	r4, [pc, #252]	; (10009344 <mpu_init+0x300>)
10009248:	47a0      	blx	r4
1000924a:	2800      	cmp	r0, #0
1000924c:	d152      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000924e:	ab01      	add	r3, sp, #4
10009250:	2288      	movs	r2, #136	; 0x88
10009252:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data)) // w 27 88
10009254:	4a3a      	ldr	r2, [pc, #232]	; (10009340 <mpu_init+0x2fc>)
10009256:	2120      	movs	r1, #32
10009258:	6810      	ldr	r0, [r2, #0]
1000925a:	5c41      	ldrb	r1, [r0, r1]
1000925c:	6852      	ldr	r2, [r2, #4]
1000925e:	7810      	ldrb	r0, [r2, #0]
10009260:	2201      	movs	r2, #1
10009262:	4c38      	ldr	r4, [pc, #224]	; (10009344 <mpu_init+0x300>)
10009264:	47a0      	blx	r4
10009266:	2800      	cmp	r0, #0
10009268:	d144      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000926a:	ab01      	add	r3, sp, #4
1000926c:	4a34      	ldr	r2, [pc, #208]	; (10009340 <mpu_init+0x2fc>)
1000926e:	212a      	movs	r1, #42	; 0x2a
10009270:	5c51      	ldrb	r1, [r2, r1]
10009272:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data)) // w 28 0c
10009274:	2121      	movs	r1, #33	; 0x21
10009276:	6810      	ldr	r0, [r2, #0]
10009278:	5c41      	ldrb	r1, [r0, r1]
1000927a:	6852      	ldr	r2, [r2, #4]
1000927c:	7810      	ldrb	r0, [r2, #0]
1000927e:	2201      	movs	r2, #1
10009280:	4c30      	ldr	r4, [pc, #192]	; (10009344 <mpu_init+0x300>)
10009282:	47a0      	blx	r4
10009284:	2800      	cmp	r0, #0
10009286:	d135      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009288:	ab01      	add	r3, sp, #4
1000928a:	220a      	movs	r2, #10
1000928c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data)) // w 29 0a
1000928e:	4a2c      	ldr	r2, [pc, #176]	; (10009340 <mpu_init+0x2fc>)
10009290:	2122      	movs	r1, #34	; 0x22
10009292:	6810      	ldr	r0, [r2, #0]
10009294:	5c41      	ldrb	r1, [r0, r1]
10009296:	6852      	ldr	r2, [r2, #4]
10009298:	7810      	ldrb	r0, [r2, #0]
1000929a:	2201      	movs	r2, #1
1000929c:	4c29      	ldr	r4, [pc, #164]	; (10009344 <mpu_init+0x300>)
1000929e:	47a0      	blx	r4
100092a0:	2800      	cmp	r0, #0
100092a2:	d127      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
100092a4:	ab01      	add	r3, sp, #4
100092a6:	2281      	movs	r2, #129	; 0x81
100092a8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data)) // w 2a 81
100092aa:	4a25      	ldr	r2, [pc, #148]	; (10009340 <mpu_init+0x2fc>)
100092ac:	2123      	movs	r1, #35	; 0x23
100092ae:	6810      	ldr	r0, [r2, #0]
100092b0:	5c41      	ldrb	r1, [r0, r1]
100092b2:	6852      	ldr	r2, [r2, #4]
100092b4:	7810      	ldrb	r0, [r2, #0]
100092b6:	2201      	movs	r2, #1
100092b8:	4c22      	ldr	r4, [pc, #136]	; (10009344 <mpu_init+0x300>)
100092ba:	47a0      	blx	r4
100092bc:	2800      	cmp	r0, #0
100092be:	d119      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100092c0:	ab01      	add	r3, sp, #4
100092c2:	2211      	movs	r2, #17
100092c4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data)) // w 64 11
100092c6:	4a1e      	ldr	r2, [pc, #120]	; (10009340 <mpu_init+0x2fc>)
100092c8:	2126      	movs	r1, #38	; 0x26
100092ca:	6810      	ldr	r0, [r2, #0]
100092cc:	5c41      	ldrb	r1, [r0, r1]
100092ce:	6852      	ldr	r2, [r2, #4]
100092d0:	7810      	ldrb	r0, [r2, #0]
100092d2:	2201      	movs	r2, #1
100092d4:	4c1b      	ldr	r4, [pc, #108]	; (10009344 <mpu_init+0x300>)
100092d6:	47a0      	blx	r4
100092d8:	2800      	cmp	r0, #0
100092da:	d10b      	bne.n	100092f4 <mpu_init+0x2b0>
    return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092dc:	ab01      	add	r3, sp, #4
100092de:	2203      	movs	r2, #3
100092e0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data)) // w 67 03
100092e2:	4a17      	ldr	r2, [pc, #92]	; (10009340 <mpu_init+0x2fc>)
100092e4:	2127      	movs	r1, #39	; 0x27
100092e6:	6810      	ldr	r0, [r2, #0]
100092e8:	5c41      	ldrb	r1, [r0, r1]
100092ea:	6852      	ldr	r2, [r2, #4]
100092ec:	7810      	ldrb	r0, [r2, #0]
100092ee:	2201      	movs	r2, #1
100092f0:	4c14      	ldr	r4, [pc, #80]	; (10009344 <mpu_init+0x300>)
100092f2:	47a0      	blx	r4

    if (int_param)
    reg_int_cb(int_param);

    setup_compass(); // set_bypass - set_akm - set_bypass - set_compass
    if (mpu_set_compass_sample_rate(10)) return -1; // w 34 04
100092f4:	200a      	movs	r0, #10
100092f6:	4b22      	ldr	r3, [pc, #136]	; (10009380 <mpu_init+0x33c>)
100092f8:	4798      	blx	r3
100092fa:	1e04      	subs	r4, r0, #0
100092fc:	d11b      	bne.n	10009336 <mpu_init+0x2f2>

    mpu_set_sensors(0);
100092fe:	2000      	movs	r0, #0
10009300:	4b20      	ldr	r3, [pc, #128]	; (10009384 <mpu_init+0x340>)
10009302:	4798      	blx	r3
    
    return 0;
10009304:	e019      	b.n	1000933a <mpu_init+0x2f6>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data)) // w 6b 80
    return -1;
10009306:	2401      	movs	r4, #1
10009308:	4264      	negs	r4, r4
1000930a:	e016      	b.n	1000933a <mpu_init+0x2f6>
    delay_ms(100);

    /* Wake up chip (w 6B 00). */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data)) // w 6b 00
    return -1;
1000930c:	2401      	movs	r4, #1
1000930e:	4264      	negs	r4, r4
10009310:	e013      	b.n	1000933a <mpu_init+0x2f6>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data)) // w 1d 48
    return -1;
10009312:	2401      	movs	r4, #1
10009314:	4264      	negs	r4, r4
10009316:	e010      	b.n	1000933a <mpu_init+0x2f6>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // w 1b 00
10009318:	2401      	movs	r4, #1
1000931a:	4264      	negs	r4, r4
1000931c:	e00d      	b.n	1000933a <mpu_init+0x2f6>
    if (mpu_set_accel_fsr(4)) return -1; // w 1c 08
1000931e:	2401      	movs	r4, #1
10009320:	4264      	negs	r4, r4
10009322:	e00a      	b.n	1000933a <mpu_init+0x2f6>
    if (mpu_set_lpf(42)) return -1; // w 1a 03
10009324:	2401      	movs	r4, #1
10009326:	4264      	negs	r4, r4
10009328:	e007      	b.n	1000933a <mpu_init+0x2f6>
    if (mpu_set_sample_rate(50)) return -1; // w 19 13 - w 1a 04
1000932a:	2401      	movs	r4, #1
1000932c:	4264      	negs	r4, r4
1000932e:	e004      	b.n	1000933a <mpu_init+0x2f6>
    if (mpu_configure_fifo(0)) return -1; // w 38 00
10009330:	2401      	movs	r4, #1
10009332:	4264      	negs	r4, r4
10009334:	e001      	b.n	1000933a <mpu_init+0x2f6>

    if (int_param)
    reg_int_cb(int_param);

    setup_compass(); // set_bypass - set_akm - set_bypass - set_compass
    if (mpu_set_compass_sample_rate(10)) return -1; // w 34 04
10009336:	2401      	movs	r4, #1
10009338:	4264      	negs	r4, r4

    mpu_set_sensors(0);
    
    return 0;
}
1000933a:	0020      	movs	r0, r4
1000933c:	b004      	add	sp, #16
1000933e:	bd70      	pop	{r4, r5, r6, pc}
10009340:	10013820 	.word	0x10013820
10009344:	100083a9 	.word	0x100083a9
10009348:	10008129 	.word	0x10008129
1000934c:	100115ad 	.word	0x100115ad
10009350:	100086f5 	.word	0x100086f5
10009354:	100087e1 	.word	0x100087e1
10009358:	10008875 	.word	0x10008875
1000935c:	10008d6d 	.word	0x10008d6d
10009360:	100089a1 	.word	0x100089a1
10009364:	1000cd6d 	.word	0x1000cd6d
10009368:	1000c14d 	.word	0x1000c14d
1000936c:	10008af9 	.word	0x10008af9
10009370:	100082e5 	.word	0x100082e5
10009374:	10012834 	.word	0x10012834
10009378:	10011815 	.word	0x10011815
1000937c:	1001284c 	.word	0x1001284c
10009380:	10008929 	.word	0x10008929
10009384:	10008e5d 	.word	0x10008e5d

10009388 <mpu_write_mem>:
*  @param[in]  length      Number of bytes to write.
*  @param[in]  data        Bytes to write to memory.
*  @return     0 if successful.
*/
int mpu_write_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
10009388:	b570      	push	{r4, r5, r6, lr}
1000938a:	b082      	sub	sp, #8
1000938c:	000c      	movs	r4, r1
1000938e:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009390:	d025      	beq.n	100093de <mpu_write_mem+0x56>
    return -1;
    if (!st.chip_cfg.sensors)
10009392:	4b19      	ldr	r3, [pc, #100]	; (100093f8 <mpu_write_mem+0x70>)
10009394:	7a9b      	ldrb	r3, [r3, #10]
10009396:	2b00      	cmp	r3, #0
10009398:	d024      	beq.n	100093e4 <mpu_write_mem+0x5c>
    return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000939a:	ab01      	add	r3, sp, #4
1000939c:	0a02      	lsrs	r2, r0, #8
1000939e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100093a0:	b2c0      	uxtb	r0, r0
100093a2:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100093a4:	4b14      	ldr	r3, [pc, #80]	; (100093f8 <mpu_write_mem+0x70>)
100093a6:	685b      	ldr	r3, [r3, #4]
100093a8:	1840      	adds	r0, r0, r1
100093aa:	895a      	ldrh	r2, [r3, #10]
100093ac:	4290      	cmp	r0, r2
100093ae:	dc1c      	bgt.n	100093ea <mpu_write_mem+0x62>
    return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100093b0:	4a11      	ldr	r2, [pc, #68]	; (100093f8 <mpu_write_mem+0x70>)
100093b2:	6812      	ldr	r2, [r2, #0]
100093b4:	7ed1      	ldrb	r1, [r2, #27]
100093b6:	7818      	ldrb	r0, [r3, #0]
100093b8:	ab01      	add	r3, sp, #4
100093ba:	2202      	movs	r2, #2
100093bc:	4e0f      	ldr	r6, [pc, #60]	; (100093fc <mpu_write_mem+0x74>)
100093be:	47b0      	blx	r6
100093c0:	2800      	cmp	r0, #0
100093c2:	d115      	bne.n	100093f0 <mpu_write_mem+0x68>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
100093c4:	b2e2      	uxtb	r2, r4
100093c6:	4b0c      	ldr	r3, [pc, #48]	; (100093f8 <mpu_write_mem+0x70>)
100093c8:	6819      	ldr	r1, [r3, #0]
100093ca:	7e09      	ldrb	r1, [r1, #24]
100093cc:	685b      	ldr	r3, [r3, #4]
100093ce:	7818      	ldrb	r0, [r3, #0]
100093d0:	002b      	movs	r3, r5
100093d2:	4c0a      	ldr	r4, [pc, #40]	; (100093fc <mpu_write_mem+0x74>)
100093d4:	47a0      	blx	r4
100093d6:	1e43      	subs	r3, r0, #1
100093d8:	4198      	sbcs	r0, r3
100093da:	4240      	negs	r0, r0
100093dc:	e00a      	b.n	100093f4 <mpu_write_mem+0x6c>
int mpu_write_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
    return -1;
100093de:	2001      	movs	r0, #1
100093e0:	4240      	negs	r0, r0
100093e2:	e007      	b.n	100093f4 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
    return -1;
100093e4:	2001      	movs	r0, #1
100093e6:	4240      	negs	r0, r0
100093e8:	e004      	b.n	100093f4 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
    return -1;
100093ea:	2001      	movs	r0, #1
100093ec:	4240      	negs	r0, r0
100093ee:	e001      	b.n	100093f4 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
    return -1;
100093f0:	2001      	movs	r0, #1
100093f2:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
    return -1;
    return 0;
}
100093f4:	b002      	add	sp, #8
100093f6:	bd70      	pop	{r4, r5, r6, pc}
100093f8:	10013820 	.word	0x10013820
100093fc:	100083a9 	.word	0x100083a9

10009400 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009400:	b5f0      	push	{r4, r5, r6, r7, lr}
10009402:	4647      	mov	r7, r8
10009404:	b480      	push	{r7}
10009406:	b082      	sub	sp, #8
10009408:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000940a:	0743      	lsls	r3, r0, #29
1000940c:	d100      	bne.n	10009410 <dmp_set_tap_thresh+0x10>
1000940e:	e09c      	b.n	1000954a <dmp_set_tap_thresh+0x14a>
10009410:	23c8      	movs	r3, #200	; 0xc8
10009412:	00db      	lsls	r3, r3, #3
10009414:	4299      	cmp	r1, r3
10009416:	d900      	bls.n	1000941a <dmp_set_tap_thresh+0x1a>
10009418:	e09a      	b.n	10009550 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000941a:	0008      	movs	r0, r1
1000941c:	4b58      	ldr	r3, [pc, #352]	; (10009580 <dmp_set_tap_thresh+0x180>)
1000941e:	4798      	blx	r3
10009420:	4958      	ldr	r1, [pc, #352]	; (10009584 <dmp_set_tap_thresh+0x184>)
10009422:	4b59      	ldr	r3, [pc, #356]	; (10009588 <dmp_set_tap_thresh+0x188>)
10009424:	4798      	blx	r3
10009426:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
10009428:	466b      	mov	r3, sp
1000942a:	1cdd      	adds	r5, r3, #3
1000942c:	0028      	movs	r0, r5
1000942e:	4b57      	ldr	r3, [pc, #348]	; (1000958c <dmp_set_tap_thresh+0x18c>)
10009430:	4798      	blx	r3
    switch (accel_fsr) {
10009432:	782b      	ldrb	r3, [r5, #0]
10009434:	2b04      	cmp	r3, #4
10009436:	d019      	beq.n	1000946c <dmp_set_tap_thresh+0x6c>
10009438:	b2da      	uxtb	r2, r3
1000943a:	2a04      	cmp	r2, #4
1000943c:	d802      	bhi.n	10009444 <dmp_set_tap_thresh+0x44>
1000943e:	2b02      	cmp	r3, #2
10009440:	d005      	beq.n	1000944e <dmp_set_tap_thresh+0x4e>
10009442:	e088      	b.n	10009556 <dmp_set_tap_thresh+0x156>
10009444:	2b08      	cmp	r3, #8
10009446:	d020      	beq.n	1000948a <dmp_set_tap_thresh+0x8a>
10009448:	2b10      	cmp	r3, #16
1000944a:	d02d      	beq.n	100094a8 <dmp_set_tap_thresh+0xa8>
1000944c:	e083      	b.n	10009556 <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000944e:	4b50      	ldr	r3, [pc, #320]	; (10009590 <dmp_set_tap_thresh+0x190>)
10009450:	4698      	mov	r8, r3
10009452:	218d      	movs	r1, #141	; 0x8d
10009454:	05c9      	lsls	r1, r1, #23
10009456:	1c30      	adds	r0, r6, #0
10009458:	4798      	blx	r3
1000945a:	4f4e      	ldr	r7, [pc, #312]	; (10009594 <dmp_set_tap_thresh+0x194>)
1000945c:	47b8      	blx	r7
1000945e:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009460:	494d      	ldr	r1, [pc, #308]	; (10009598 <dmp_set_tap_thresh+0x198>)
10009462:	1c30      	adds	r0, r6, #0
10009464:	47c0      	blx	r8
10009466:	47b8      	blx	r7
10009468:	b280      	uxth	r0, r0
        break;
1000946a:	e02b      	b.n	100094c4 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000946c:	4b48      	ldr	r3, [pc, #288]	; (10009590 <dmp_set_tap_thresh+0x190>)
1000946e:	4698      	mov	r8, r3
10009470:	218c      	movs	r1, #140	; 0x8c
10009472:	05c9      	lsls	r1, r1, #23
10009474:	1c30      	adds	r0, r6, #0
10009476:	4798      	blx	r3
10009478:	4f46      	ldr	r7, [pc, #280]	; (10009594 <dmp_set_tap_thresh+0x194>)
1000947a:	47b8      	blx	r7
1000947c:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000947e:	4947      	ldr	r1, [pc, #284]	; (1000959c <dmp_set_tap_thresh+0x19c>)
10009480:	1c30      	adds	r0, r6, #0
10009482:	47c0      	blx	r8
10009484:	47b8      	blx	r7
10009486:	b280      	uxth	r0, r0
        break;
10009488:	e01c      	b.n	100094c4 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000948a:	4b41      	ldr	r3, [pc, #260]	; (10009590 <dmp_set_tap_thresh+0x190>)
1000948c:	4698      	mov	r8, r3
1000948e:	218b      	movs	r1, #139	; 0x8b
10009490:	05c9      	lsls	r1, r1, #23
10009492:	1c30      	adds	r0, r6, #0
10009494:	4798      	blx	r3
10009496:	4f3f      	ldr	r7, [pc, #252]	; (10009594 <dmp_set_tap_thresh+0x194>)
10009498:	47b8      	blx	r7
1000949a:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000949c:	4940      	ldr	r1, [pc, #256]	; (100095a0 <dmp_set_tap_thresh+0x1a0>)
1000949e:	1c30      	adds	r0, r6, #0
100094a0:	47c0      	blx	r8
100094a2:	47b8      	blx	r7
100094a4:	b280      	uxth	r0, r0
        break;
100094a6:	e00d      	b.n	100094c4 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100094a8:	4b39      	ldr	r3, [pc, #228]	; (10009590 <dmp_set_tap_thresh+0x190>)
100094aa:	4698      	mov	r8, r3
100094ac:	218a      	movs	r1, #138	; 0x8a
100094ae:	05c9      	lsls	r1, r1, #23
100094b0:	1c30      	adds	r0, r6, #0
100094b2:	4798      	blx	r3
100094b4:	4f37      	ldr	r7, [pc, #220]	; (10009594 <dmp_set_tap_thresh+0x194>)
100094b6:	47b8      	blx	r7
100094b8:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100094ba:	493a      	ldr	r1, [pc, #232]	; (100095a4 <dmp_set_tap_thresh+0x1a4>)
100094bc:	1c30      	adds	r0, r6, #0
100094be:	47c0      	blx	r8
100094c0:	47b8      	blx	r7
100094c2:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100094c4:	ab01      	add	r3, sp, #4
100094c6:	0a2a      	lsrs	r2, r5, #8
100094c8:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
100094ca:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100094cc:	0a02      	lsrs	r2, r0, #8
100094ce:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100094d0:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
100094d2:	07e3      	lsls	r3, r4, #31
100094d4:	d510      	bpl.n	100094f8 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100094d6:	aa01      	add	r2, sp, #4
100094d8:	2102      	movs	r1, #2
100094da:	20ea      	movs	r0, #234	; 0xea
100094dc:	0040      	lsls	r0, r0, #1
100094de:	4b32      	ldr	r3, [pc, #200]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
100094e0:	4798      	blx	r3
100094e2:	2800      	cmp	r0, #0
100094e4:	d13a      	bne.n	1000955c <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
100094e6:	466b      	mov	r3, sp
100094e8:	1d9a      	adds	r2, r3, #6
100094ea:	2102      	movs	r1, #2
100094ec:	3025      	adds	r0, #37	; 0x25
100094ee:	30ff      	adds	r0, #255	; 0xff
100094f0:	4b2d      	ldr	r3, [pc, #180]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
100094f2:	4798      	blx	r3
100094f4:	2800      	cmp	r0, #0
100094f6:	d134      	bne.n	10009562 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
100094f8:	07a3      	lsls	r3, r4, #30
100094fa:	d510      	bpl.n	1000951e <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100094fc:	aa01      	add	r2, sp, #4
100094fe:	2102      	movs	r1, #2
10009500:	20ec      	movs	r0, #236	; 0xec
10009502:	0040      	lsls	r0, r0, #1
10009504:	4b28      	ldr	r3, [pc, #160]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
10009506:	4798      	blx	r3
10009508:	2800      	cmp	r0, #0
1000950a:	d12d      	bne.n	10009568 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1000950c:	466b      	mov	r3, sp
1000950e:	1d9a      	adds	r2, r3, #6
10009510:	2102      	movs	r1, #2
10009512:	3029      	adds	r0, #41	; 0x29
10009514:	30ff      	adds	r0, #255	; 0xff
10009516:	4b24      	ldr	r3, [pc, #144]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
10009518:	4798      	blx	r3
1000951a:	2800      	cmp	r0, #0
1000951c:	d127      	bne.n	1000956e <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
1000951e:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009520:	0763      	lsls	r3, r4, #29
10009522:	d529      	bpl.n	10009578 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009524:	aa01      	add	r2, sp, #4
10009526:	2102      	movs	r1, #2
10009528:	30dd      	adds	r0, #221	; 0xdd
1000952a:	30ff      	adds	r0, #255	; 0xff
1000952c:	4b1e      	ldr	r3, [pc, #120]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
1000952e:	4798      	blx	r3
10009530:	2800      	cmp	r0, #0
10009532:	d11f      	bne.n	10009574 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009534:	466b      	mov	r3, sp
10009536:	1d9a      	adds	r2, r3, #6
10009538:	2102      	movs	r1, #2
1000953a:	302d      	adds	r0, #45	; 0x2d
1000953c:	30ff      	adds	r0, #255	; 0xff
1000953e:	4b1a      	ldr	r3, [pc, #104]	; (100095a8 <dmp_set_tap_thresh+0x1a8>)
10009540:	4798      	blx	r3
10009542:	1e43      	subs	r3, r0, #1
10009544:	4198      	sbcs	r0, r3
10009546:	4240      	negs	r0, r0
10009548:	e016      	b.n	10009578 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000954a:	2001      	movs	r0, #1
1000954c:	4240      	negs	r0, r0
1000954e:	e013      	b.n	10009578 <dmp_set_tap_thresh+0x178>
10009550:	2001      	movs	r0, #1
10009552:	4240      	negs	r0, r0
10009554:	e010      	b.n	10009578 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
10009556:	2001      	movs	r0, #1
10009558:	4240      	negs	r0, r0
1000955a:	e00d      	b.n	10009578 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
1000955c:	2001      	movs	r0, #1
1000955e:	4240      	negs	r0, r0
10009560:	e00a      	b.n	10009578 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
10009562:	2001      	movs	r0, #1
10009564:	4240      	negs	r0, r0
10009566:	e007      	b.n	10009578 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
10009568:	2001      	movs	r0, #1
1000956a:	4240      	negs	r0, r0
1000956c:	e004      	b.n	10009578 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
1000956e:	2001      	movs	r0, #1
10009570:	4240      	negs	r0, r0
10009572:	e001      	b.n	10009578 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
10009574:	2001      	movs	r0, #1
10009576:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009578:	b002      	add	sp, #8
1000957a:	bc04      	pop	{r2}
1000957c:	4690      	mov	r8, r2
1000957e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009580:	100105d1 	.word	0x100105d1
10009584:	43480000 	.word	0x43480000
10009588:	1000fcc5 	.word	0x1000fcc5
1000958c:	10008795 	.word	0x10008795
10009590:	10010059 	.word	0x10010059
10009594:	1000fc59 	.word	0x1000fc59
10009598:	46400000 	.word	0x46400000
1000959c:	45c00000 	.word	0x45c00000
100095a0:	45400000 	.word	0x45400000
100095a4:	44c00000 	.word	0x44c00000
100095a8:	10009389 	.word	0x10009389

100095ac <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100095ac:	b500      	push	{lr}
100095ae:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095b0:	07c3      	lsls	r3, r0, #31
100095b2:	d403      	bmi.n	100095bc <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100095b4:	2200      	movs	r2, #0
100095b6:	466b      	mov	r3, sp
100095b8:	71da      	strb	r2, [r3, #7]
100095ba:	e002      	b.n	100095c2 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
100095bc:	2230      	movs	r2, #48	; 0x30
100095be:	466b      	mov	r3, sp
100095c0:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
100095c2:	0783      	lsls	r3, r0, #30
100095c4:	d505      	bpl.n	100095d2 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
100095c6:	466b      	mov	r3, sp
100095c8:	1dda      	adds	r2, r3, #7
100095ca:	79d9      	ldrb	r1, [r3, #7]
100095cc:	230c      	movs	r3, #12
100095ce:	430b      	orrs	r3, r1
100095d0:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100095d2:	0743      	lsls	r3, r0, #29
100095d4:	d505      	bpl.n	100095e2 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
100095d6:	466b      	mov	r3, sp
100095d8:	1dda      	adds	r2, r3, #7
100095da:	79d9      	ldrb	r1, [r3, #7]
100095dc:	2303      	movs	r3, #3
100095de:	430b      	orrs	r3, r1
100095e0:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100095e2:	466b      	mov	r3, sp
100095e4:	1dda      	adds	r2, r3, #7
100095e6:	2101      	movs	r1, #1
100095e8:	20a4      	movs	r0, #164	; 0xa4
100095ea:	0040      	lsls	r0, r0, #1
100095ec:	4b01      	ldr	r3, [pc, #4]	; (100095f4 <dmp_set_tap_axes+0x48>)
100095ee:	4798      	blx	r3
}
100095f0:	b003      	add	sp, #12
100095f2:	bd00      	pop	{pc}
100095f4:	10009389 	.word	0x10009389

100095f8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
100095f8:	b500      	push	{lr}
100095fa:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
100095fc:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
100095fe:	2800      	cmp	r0, #0
10009600:	d004      	beq.n	1000960c <dmp_set_tap_count+0x14>
10009602:	1c03      	adds	r3, r0, #0
10009604:	2804      	cmp	r0, #4
10009606:	d900      	bls.n	1000960a <dmp_set_tap_count+0x12>
10009608:	2304      	movs	r3, #4
1000960a:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000960c:	466a      	mov	r2, sp
1000960e:	3207      	adds	r2, #7
10009610:	3b01      	subs	r3, #1
10009612:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009614:	2101      	movs	r1, #1
10009616:	2050      	movs	r0, #80	; 0x50
10009618:	30ff      	adds	r0, #255	; 0xff
1000961a:	4b02      	ldr	r3, [pc, #8]	; (10009624 <dmp_set_tap_count+0x2c>)
1000961c:	4798      	blx	r3
}
1000961e:	b003      	add	sp, #12
10009620:	bd00      	pop	{pc}
10009622:	46c0      	nop			; (mov r8, r8)
10009624:	10009389 	.word	0x10009389

10009628 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
10009628:	b500      	push	{lr}
1000962a:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
1000962c:	2105      	movs	r1, #5
1000962e:	4b07      	ldr	r3, [pc, #28]	; (1000964c <dmp_set_tap_time+0x24>)
10009630:	4798      	blx	r3
10009632:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009634:	aa01      	add	r2, sp, #4
10009636:	0a03      	lsrs	r3, r0, #8
10009638:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000963a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000963c:	2102      	movs	r1, #2
1000963e:	20ef      	movs	r0, #239	; 0xef
10009640:	0040      	lsls	r0, r0, #1
10009642:	4b03      	ldr	r3, [pc, #12]	; (10009650 <dmp_set_tap_time+0x28>)
10009644:	4798      	blx	r3
}
10009646:	b003      	add	sp, #12
10009648:	bd00      	pop	{pc}
1000964a:	46c0      	nop			; (mov r8, r8)
1000964c:	1000f825 	.word	0x1000f825
10009650:	10009389 	.word	0x10009389

10009654 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009654:	b500      	push	{lr}
10009656:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009658:	2105      	movs	r1, #5
1000965a:	4b07      	ldr	r3, [pc, #28]	; (10009678 <dmp_set_tap_time_multi+0x24>)
1000965c:	4798      	blx	r3
1000965e:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009660:	aa01      	add	r2, sp, #4
10009662:	0a03      	lsrs	r3, r0, #8
10009664:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009666:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009668:	2102      	movs	r1, #2
1000966a:	20ed      	movs	r0, #237	; 0xed
1000966c:	0040      	lsls	r0, r0, #1
1000966e:	4b03      	ldr	r3, [pc, #12]	; (1000967c <dmp_set_tap_time_multi+0x28>)
10009670:	4798      	blx	r3
}
10009672:	b003      	add	sp, #12
10009674:	bd00      	pop	{pc}
10009676:	46c0      	nop			; (mov r8, r8)
10009678:	1000f825 	.word	0x1000f825
1000967c:	10009389 	.word	0x10009389

10009680 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009680:	b510      	push	{r4, lr}
10009682:	b082      	sub	sp, #8
10009684:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009686:	21fa      	movs	r1, #250	; 0xfa
10009688:	0089      	lsls	r1, r1, #2
1000968a:	4b09      	ldr	r3, [pc, #36]	; (100096b0 <dmp_set_shake_reject_thresh+0x30>)
1000968c:	4798      	blx	r3
1000968e:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009690:	aa01      	add	r2, sp, #4
10009692:	1603      	asrs	r3, r0, #24
10009694:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009696:	1403      	asrs	r3, r0, #16
10009698:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1000969a:	1203      	asrs	r3, r0, #8
1000969c:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1000969e:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100096a0:	2104      	movs	r1, #4
100096a2:	20ae      	movs	r0, #174	; 0xae
100096a4:	0040      	lsls	r0, r0, #1
100096a6:	4b03      	ldr	r3, [pc, #12]	; (100096b4 <dmp_set_shake_reject_thresh+0x34>)
100096a8:	4798      	blx	r3
}
100096aa:	b002      	add	sp, #8
100096ac:	bd10      	pop	{r4, pc}
100096ae:	46c0      	nop			; (mov r8, r8)
100096b0:	1000f939 	.word	0x1000f939
100096b4:	10009389 	.word	0x10009389

100096b8 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
100096b8:	b500      	push	{lr}
100096ba:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100096bc:	2105      	movs	r1, #5
100096be:	4b07      	ldr	r3, [pc, #28]	; (100096dc <dmp_set_shake_reject_time+0x24>)
100096c0:	4798      	blx	r3
100096c2:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100096c4:	aa01      	add	r2, sp, #4
100096c6:	0a03      	lsrs	r3, r0, #8
100096c8:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
100096ca:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
100096cc:	2102      	movs	r1, #2
100096ce:	20ad      	movs	r0, #173	; 0xad
100096d0:	0040      	lsls	r0, r0, #1
100096d2:	4b03      	ldr	r3, [pc, #12]	; (100096e0 <dmp_set_shake_reject_time+0x28>)
100096d4:	4798      	blx	r3
}
100096d6:	b003      	add	sp, #12
100096d8:	bd00      	pop	{pc}
100096da:	46c0      	nop			; (mov r8, r8)
100096dc:	1000f825 	.word	0x1000f825
100096e0:	10009389 	.word	0x10009389

100096e4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
100096e4:	b500      	push	{lr}
100096e6:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100096e8:	2105      	movs	r1, #5
100096ea:	4b07      	ldr	r3, [pc, #28]	; (10009708 <dmp_set_shake_reject_timeout+0x24>)
100096ec:	4798      	blx	r3
100096ee:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100096f0:	aa01      	add	r2, sp, #4
100096f2:	0a03      	lsrs	r3, r0, #8
100096f4:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
100096f6:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
100096f8:	2102      	movs	r1, #2
100096fa:	20ac      	movs	r0, #172	; 0xac
100096fc:	0040      	lsls	r0, r0, #1
100096fe:	4b03      	ldr	r3, [pc, #12]	; (1000970c <dmp_set_shake_reject_timeout+0x28>)
10009700:	4798      	blx	r3
}
10009702:	b003      	add	sp, #12
10009704:	bd00      	pop	{pc}
10009706:	46c0      	nop			; (mov r8, r8)
10009708:	1000f825 	.word	0x1000f825
1000970c:	10009389 	.word	0x10009389

10009710 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009710:	b500      	push	{lr}
10009712:	b085      	sub	sp, #20
    if (enable) {
10009714:	2800      	cmp	r0, #0
10009716:	d00c      	beq.n	10009732 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009718:	2209      	movs	r2, #9
1000971a:	490d      	ldr	r1, [pc, #52]	; (10009750 <dmp_enable_gyro_cal+0x40>)
1000971c:	311c      	adds	r1, #28
1000971e:	a801      	add	r0, sp, #4
10009720:	4b0c      	ldr	r3, [pc, #48]	; (10009754 <dmp_enable_gyro_cal+0x44>)
10009722:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009724:	aa01      	add	r2, sp, #4
10009726:	2109      	movs	r1, #9
10009728:	2097      	movs	r0, #151	; 0x97
1000972a:	00c0      	lsls	r0, r0, #3
1000972c:	4b0a      	ldr	r3, [pc, #40]	; (10009758 <dmp_enable_gyro_cal+0x48>)
1000972e:	4798      	blx	r3
10009730:	e00b      	b.n	1000974a <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009732:	2209      	movs	r2, #9
10009734:	4906      	ldr	r1, [pc, #24]	; (10009750 <dmp_enable_gyro_cal+0x40>)
10009736:	3128      	adds	r1, #40	; 0x28
10009738:	a801      	add	r0, sp, #4
1000973a:	4b06      	ldr	r3, [pc, #24]	; (10009754 <dmp_enable_gyro_cal+0x44>)
1000973c:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000973e:	aa01      	add	r2, sp, #4
10009740:	2109      	movs	r1, #9
10009742:	2097      	movs	r0, #151	; 0x97
10009744:	00c0      	lsls	r0, r0, #3
10009746:	4b04      	ldr	r3, [pc, #16]	; (10009758 <dmp_enable_gyro_cal+0x48>)
10009748:	4798      	blx	r3
    }
}
1000974a:	b005      	add	sp, #20
1000974c:	bd00      	pop	{pc}
1000974e:	46c0      	nop			; (mov r8, r8)
10009750:	10012c28 	.word	0x10012c28
10009754:	1001159b 	.word	0x1001159b
10009758:	10009389 	.word	0x10009389

1000975c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000975c:	b500      	push	{lr}
1000975e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009760:	2800      	cmp	r0, #0
10009762:	d009      	beq.n	10009778 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009764:	ab01      	add	r3, sp, #4
10009766:	22c0      	movs	r2, #192	; 0xc0
10009768:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
1000976a:	3202      	adds	r2, #2
1000976c:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
1000976e:	3202      	adds	r2, #2
10009770:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009772:	3202      	adds	r2, #2
10009774:	70da      	strb	r2, [r3, #3]
10009776:	e001      	b.n	1000977c <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009778:	4b05      	ldr	r3, [pc, #20]	; (10009790 <dmp_enable_lp_quat+0x34>)
1000977a:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
1000977c:	aa01      	add	r2, sp, #4
1000977e:	2104      	movs	r1, #4
10009780:	4804      	ldr	r0, [pc, #16]	; (10009794 <dmp_enable_lp_quat+0x38>)
10009782:	4b05      	ldr	r3, [pc, #20]	; (10009798 <dmp_enable_lp_quat+0x3c>)
10009784:	4798      	blx	r3

    return mpu_reset_fifo();
10009786:	4b05      	ldr	r3, [pc, #20]	; (1000979c <dmp_enable_lp_quat+0x40>)
10009788:	4798      	blx	r3
}
1000978a:	b003      	add	sp, #12
1000978c:	bd00      	pop	{pc}
1000978e:	46c0      	nop			; (mov r8, r8)
10009790:	8b8b8b8b 	.word	0x8b8b8b8b
10009794:	00000a98 	.word	0x00000a98
10009798:	10009389 	.word	0x10009389
1000979c:	100084bd 	.word	0x100084bd

100097a0 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
100097a0:	b500      	push	{lr}
100097a2:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100097a4:	2800      	cmp	r0, #0
100097a6:	d009      	beq.n	100097bc <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
100097a8:	ab01      	add	r3, sp, #4
100097aa:	2220      	movs	r2, #32
100097ac:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
100097ae:	3208      	adds	r2, #8
100097b0:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
100097b2:	3208      	adds	r2, #8
100097b4:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
100097b6:	3208      	adds	r2, #8
100097b8:	70da      	strb	r2, [r3, #3]
100097ba:	e001      	b.n	100097c0 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
100097bc:	4b05      	ldr	r3, [pc, #20]	; (100097d4 <dmp_enable_6x_lp_quat+0x34>)
100097be:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
100097c0:	aa01      	add	r2, sp, #4
100097c2:	2104      	movs	r1, #4
100097c4:	4804      	ldr	r0, [pc, #16]	; (100097d8 <dmp_enable_6x_lp_quat+0x38>)
100097c6:	4b05      	ldr	r3, [pc, #20]	; (100097dc <dmp_enable_6x_lp_quat+0x3c>)
100097c8:	4798      	blx	r3

    return mpu_reset_fifo();
100097ca:	4b05      	ldr	r3, [pc, #20]	; (100097e0 <dmp_enable_6x_lp_quat+0x40>)
100097cc:	4798      	blx	r3
}
100097ce:	b003      	add	sp, #12
100097d0:	bd00      	pop	{pc}
100097d2:	46c0      	nop			; (mov r8, r8)
100097d4:	a3a3a3a3 	.word	0xa3a3a3a3
100097d8:	00000a9e 	.word	0x00000a9e
100097dc:	10009389 	.word	0x10009389
100097e0:	100084bd 	.word	0x100084bd

100097e4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100097e6:	b085      	sub	sp, #20
100097e8:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100097ea:	ad01      	add	r5, sp, #4
100097ec:	2302      	movs	r3, #2
100097ee:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100097f0:	33c8      	adds	r3, #200	; 0xc8
100097f2:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100097f4:	3319      	adds	r3, #25
100097f6:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100097f8:	3bda      	subs	r3, #218	; 0xda
100097fa:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
100097fc:	002a      	movs	r2, r5
100097fe:	2104      	movs	r1, #4
10009800:	2068      	movs	r0, #104	; 0x68
10009802:	4b6a      	ldr	r3, [pc, #424]	; (100099ac <dmp_enable_feature+0x1c8>)
10009804:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009806:	23a3      	movs	r3, #163	; 0xa3
10009808:	702b      	strb	r3, [r5, #0]
1000980a:	2740      	movs	r7, #64	; 0x40
1000980c:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
1000980e:	d007      	beq.n	10009820 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009810:	ab01      	add	r3, sp, #4
10009812:	22c0      	movs	r2, #192	; 0xc0
10009814:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009816:	3208      	adds	r2, #8
10009818:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
1000981a:	3a06      	subs	r2, #6
1000981c:	70da      	strb	r2, [r3, #3]
1000981e:	e004      	b.n	1000982a <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009820:	ab01      	add	r3, sp, #4
10009822:	22a3      	movs	r2, #163	; 0xa3
10009824:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009826:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009828:	70da      	strb	r2, [r3, #3]
1000982a:	25c0      	movs	r5, #192	; 0xc0
1000982c:	006d      	lsls	r5, r5, #1
1000982e:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009830:	d007      	beq.n	10009842 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009832:	ab01      	add	r3, sp, #4
10009834:	22c4      	movs	r2, #196	; 0xc4
10009836:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009838:	3208      	adds	r2, #8
1000983a:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
1000983c:	3a06      	subs	r2, #6
1000983e:	719a      	strb	r2, [r3, #6]
10009840:	e004      	b.n	1000984c <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009842:	ab01      	add	r3, sp, #4
10009844:	22a3      	movs	r2, #163	; 0xa3
10009846:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009848:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
1000984a:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
1000984c:	aa01      	add	r2, sp, #4
1000984e:	23a3      	movs	r3, #163	; 0xa3
10009850:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009852:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009854:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009856:	210a      	movs	r1, #10
10009858:	4855      	ldr	r0, [pc, #340]	; (100099b0 <dmp_enable_feature+0x1cc>)
1000985a:	4b54      	ldr	r3, [pc, #336]	; (100099ac <dmp_enable_feature+0x1c8>)
1000985c:	4798      	blx	r3
1000985e:	2603      	movs	r6, #3
10009860:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009862:	d003      	beq.n	1000986c <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009864:	2220      	movs	r2, #32
10009866:	ab01      	add	r3, sp, #4
10009868:	701a      	strb	r2, [r3, #0]
1000986a:	e002      	b.n	10009872 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
1000986c:	22d8      	movs	r2, #216	; 0xd8
1000986e:	ab01      	add	r3, sp, #4
10009870:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009872:	aa01      	add	r2, sp, #4
10009874:	2101      	movs	r1, #1
10009876:	484f      	ldr	r0, [pc, #316]	; (100099b4 <dmp_enable_feature+0x1d0>)
10009878:	4b4c      	ldr	r3, [pc, #304]	; (100099ac <dmp_enable_feature+0x1c8>)
1000987a:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
1000987c:	06a3      	lsls	r3, r4, #26
1000987e:	d503      	bpl.n	10009888 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009880:	2001      	movs	r0, #1
10009882:	4b4d      	ldr	r3, [pc, #308]	; (100099b8 <dmp_enable_feature+0x1d4>)
10009884:	4798      	blx	r3
10009886:	e002      	b.n	1000988e <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009888:	2000      	movs	r0, #0
1000988a:	4b4b      	ldr	r3, [pc, #300]	; (100099b8 <dmp_enable_feature+0x1d4>)
1000988c:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000988e:	2d00      	cmp	r5, #0
10009890:	d019      	beq.n	100098c6 <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009892:	05e3      	lsls	r3, r4, #23
10009894:	d509      	bpl.n	100098aa <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009896:	ab01      	add	r3, sp, #4
10009898:	22b2      	movs	r2, #178	; 0xb2
1000989a:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
1000989c:	3a27      	subs	r2, #39	; 0x27
1000989e:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
100098a0:	322b      	adds	r2, #43	; 0x2b
100098a2:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
100098a4:	3a1b      	subs	r2, #27
100098a6:	70da      	strb	r2, [r3, #3]
100098a8:	e008      	b.n	100098bc <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
100098aa:	ab01      	add	r3, sp, #4
100098ac:	22b0      	movs	r2, #176	; 0xb0
100098ae:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
100098b0:	3a30      	subs	r2, #48	; 0x30
100098b2:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
100098b4:	3234      	adds	r2, #52	; 0x34
100098b6:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
100098b8:	3a24      	subs	r2, #36	; 0x24
100098ba:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
100098bc:	aa01      	add	r2, sp, #4
100098be:	2104      	movs	r1, #4
100098c0:	483e      	ldr	r0, [pc, #248]	; (100099bc <dmp_enable_feature+0x1d8>)
100098c2:	4b3a      	ldr	r3, [pc, #232]	; (100099ac <dmp_enable_feature+0x1c8>)
100098c4:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
100098c6:	07e3      	lsls	r3, r4, #31
100098c8:	d523      	bpl.n	10009912 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
100098ca:	aa01      	add	r2, sp, #4
100098cc:	23f8      	movs	r3, #248	; 0xf8
100098ce:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100098d0:	2101      	movs	r1, #1
100098d2:	208b      	movs	r0, #139	; 0x8b
100098d4:	0100      	lsls	r0, r0, #4
100098d6:	4b35      	ldr	r3, [pc, #212]	; (100099ac <dmp_enable_feature+0x1c8>)
100098d8:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
100098da:	21fa      	movs	r1, #250	; 0xfa
100098dc:	2007      	movs	r0, #7
100098de:	4b38      	ldr	r3, [pc, #224]	; (100099c0 <dmp_enable_feature+0x1dc>)
100098e0:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
100098e2:	2007      	movs	r0, #7
100098e4:	4b37      	ldr	r3, [pc, #220]	; (100099c4 <dmp_enable_feature+0x1e0>)
100098e6:	4798      	blx	r3
        dmp_set_tap_count(1);
100098e8:	2001      	movs	r0, #1
100098ea:	4b37      	ldr	r3, [pc, #220]	; (100099c8 <dmp_enable_feature+0x1e4>)
100098ec:	4798      	blx	r3
        dmp_set_tap_time(100);
100098ee:	2064      	movs	r0, #100	; 0x64
100098f0:	4b36      	ldr	r3, [pc, #216]	; (100099cc <dmp_enable_feature+0x1e8>)
100098f2:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
100098f4:	20fa      	movs	r0, #250	; 0xfa
100098f6:	0040      	lsls	r0, r0, #1
100098f8:	4b35      	ldr	r3, [pc, #212]	; (100099d0 <dmp_enable_feature+0x1ec>)
100098fa:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
100098fc:	21c8      	movs	r1, #200	; 0xc8
100098fe:	4835      	ldr	r0, [pc, #212]	; (100099d4 <dmp_enable_feature+0x1f0>)
10009900:	4b35      	ldr	r3, [pc, #212]	; (100099d8 <dmp_enable_feature+0x1f4>)
10009902:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009904:	2028      	movs	r0, #40	; 0x28
10009906:	4b35      	ldr	r3, [pc, #212]	; (100099dc <dmp_enable_feature+0x1f8>)
10009908:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
1000990a:	200a      	movs	r0, #10
1000990c:	4b34      	ldr	r3, [pc, #208]	; (100099e0 <dmp_enable_feature+0x1fc>)
1000990e:	4798      	blx	r3
10009910:	e007      	b.n	10009922 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009912:	aa01      	add	r2, sp, #4
10009914:	23d8      	movs	r3, #216	; 0xd8
10009916:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009918:	2101      	movs	r1, #1
1000991a:	208b      	movs	r0, #139	; 0x8b
1000991c:	0100      	lsls	r0, r0, #4
1000991e:	4b23      	ldr	r3, [pc, #140]	; (100099ac <dmp_enable_feature+0x1c8>)
10009920:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009922:	07a3      	lsls	r3, r4, #30
10009924:	d503      	bpl.n	1000992e <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009926:	22d9      	movs	r2, #217	; 0xd9
10009928:	ab01      	add	r3, sp, #4
1000992a:	701a      	strb	r2, [r3, #0]
1000992c:	e002      	b.n	10009934 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
1000992e:	22d8      	movs	r2, #216	; 0xd8
10009930:	ab01      	add	r3, sp, #4
10009932:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009934:	aa01      	add	r2, sp, #4
10009936:	2101      	movs	r1, #1
10009938:	482a      	ldr	r0, [pc, #168]	; (100099e4 <dmp_enable_feature+0x200>)
1000993a:	4b1c      	ldr	r3, [pc, #112]	; (100099ac <dmp_enable_feature+0x1c8>)
1000993c:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
1000993e:	0763      	lsls	r3, r4, #29
10009940:	d503      	bpl.n	1000994a <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009942:	2001      	movs	r0, #1
10009944:	4b28      	ldr	r3, [pc, #160]	; (100099e8 <dmp_enable_feature+0x204>)
10009946:	4798      	blx	r3
10009948:	e002      	b.n	10009950 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
1000994a:	2000      	movs	r0, #0
1000994c:	4b26      	ldr	r3, [pc, #152]	; (100099e8 <dmp_enable_feature+0x204>)
1000994e:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009950:	06e3      	lsls	r3, r4, #27
10009952:	d503      	bpl.n	1000995c <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009954:	2001      	movs	r0, #1
10009956:	4b25      	ldr	r3, [pc, #148]	; (100099ec <dmp_enable_feature+0x208>)
10009958:	4798      	blx	r3
1000995a:	e002      	b.n	10009962 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
1000995c:	2000      	movs	r0, #0
1000995e:	4b23      	ldr	r3, [pc, #140]	; (100099ec <dmp_enable_feature+0x208>)
10009960:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009962:	2308      	movs	r3, #8
10009964:	4323      	orrs	r3, r4
10009966:	4a22      	ldr	r2, [pc, #136]	; (100099f0 <dmp_enable_feature+0x20c>)
10009968:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
1000996a:	4b22      	ldr	r3, [pc, #136]	; (100099f4 <dmp_enable_feature+0x210>)
1000996c:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
1000996e:	2f00      	cmp	r7, #0
10009970:	d103      	bne.n	1000997a <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009972:	2200      	movs	r2, #0
10009974:	4b1e      	ldr	r3, [pc, #120]	; (100099f0 <dmp_enable_feature+0x20c>)
10009976:	739a      	strb	r2, [r3, #14]
10009978:	e002      	b.n	10009980 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
1000997a:	2206      	movs	r2, #6
1000997c:	4b1c      	ldr	r3, [pc, #112]	; (100099f0 <dmp_enable_feature+0x20c>)
1000997e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009980:	2d00      	cmp	r5, #0
10009982:	d003      	beq.n	1000998c <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009984:	4a1a      	ldr	r2, [pc, #104]	; (100099f0 <dmp_enable_feature+0x20c>)
10009986:	7b93      	ldrb	r3, [r2, #14]
10009988:	3306      	adds	r3, #6
1000998a:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
1000998c:	2314      	movs	r3, #20
1000998e:	4223      	tst	r3, r4
10009990:	d003      	beq.n	1000999a <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009992:	4a17      	ldr	r2, [pc, #92]	; (100099f0 <dmp_enable_feature+0x20c>)
10009994:	7b93      	ldrb	r3, [r2, #14]
10009996:	3310      	adds	r3, #16
10009998:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000999a:	2e00      	cmp	r6, #0
1000999c:	d003      	beq.n	100099a6 <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
1000999e:	4a14      	ldr	r2, [pc, #80]	; (100099f0 <dmp_enable_feature+0x20c>)
100099a0:	7b93      	ldrb	r3, [r2, #14]
100099a2:	3304      	adds	r3, #4
100099a4:	7393      	strb	r3, [r2, #14]

    return 0;
}
100099a6:	2000      	movs	r0, #0
100099a8:	b005      	add	sp, #20
100099aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099ac:	10009389 	.word	0x10009389
100099b0:	00000aa7 	.word	0x00000aa7
100099b4:	00000ab6 	.word	0x00000ab6
100099b8:	10009711 	.word	0x10009711
100099bc:	00000aa2 	.word	0x00000aa2
100099c0:	10009401 	.word	0x10009401
100099c4:	100095ad 	.word	0x100095ad
100099c8:	100095f9 	.word	0x100095f9
100099cc:	10009629 	.word	0x10009629
100099d0:	10009655 	.word	0x10009655
100099d4:	02cae309 	.word	0x02cae309
100099d8:	10009681 	.word	0x10009681
100099dc:	100096b9 	.word	0x100096b9
100099e0:	100096e5 	.word	0x100096e5
100099e4:	0000073d 	.word	0x0000073d
100099e8:	1000975d 	.word	0x1000975d
100099ec:	100097a1 	.word	0x100097a1
100099f0:	100138e8 	.word	0x100138e8
100099f4:	100084bd 	.word	0x100084bd

100099f8 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
100099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100099fa:	4647      	mov	r7, r8
100099fc:	b480      	push	{r7}
100099fe:	b088      	sub	sp, #32
10009a00:	0005      	movs	r5, r0
10009a02:	000e      	movs	r6, r1
10009a04:	0017      	movs	r7, r2
10009a06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
10009a08:	2300      	movs	r3, #0
10009a0a:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    int res;
    if ((res = mpu_read_fifo_stream(dmp.packet_length, fifo_data, more)) != 0) {
10009a0c:	4b66      	ldr	r3, [pc, #408]	; (10009ba8 <dmp_read_fifo+0x1b0>)
10009a0e:	7b98      	ldrb	r0, [r3, #14]
10009a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009a12:	4669      	mov	r1, sp
10009a14:	4b65      	ldr	r3, [pc, #404]	; (10009bac <dmp_read_fifo+0x1b4>)
10009a16:	4798      	blx	r3
10009a18:	2800      	cmp	r0, #0
10009a1a:	d000      	beq.n	10009a1e <dmp_read_fifo+0x26>
10009a1c:	e0bf      	b.n	10009b9e <dmp_read_fifo+0x1a6>
        return res;
    }        

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
10009a1e:	4b62      	ldr	r3, [pc, #392]	; (10009ba8 <dmp_read_fifo+0x1b0>)
10009a20:	8959      	ldrh	r1, [r3, #10]
10009a22:	2314      	movs	r3, #20
10009a24:	420b      	tst	r3, r1
10009a26:	d062      	beq.n	10009aee <dmp_read_fifo+0xf6>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
10009a28:	466b      	mov	r3, sp
10009a2a:	781b      	ldrb	r3, [r3, #0]
10009a2c:	061a      	lsls	r2, r3, #24
10009a2e:	466b      	mov	r3, sp
10009a30:	785b      	ldrb	r3, [r3, #1]
10009a32:	041b      	lsls	r3, r3, #16
10009a34:	4313      	orrs	r3, r2
10009a36:	466a      	mov	r2, sp
10009a38:	78d2      	ldrb	r2, [r2, #3]
10009a3a:	4313      	orrs	r3, r2
10009a3c:	466a      	mov	r2, sp
10009a3e:	7890      	ldrb	r0, [r2, #2]
10009a40:	0200      	lsls	r0, r0, #8
10009a42:	4303      	orrs	r3, r0
10009a44:	4698      	mov	r8, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
10009a46:	603b      	str	r3, [r7, #0]
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
10009a48:	7913      	ldrb	r3, [r2, #4]
10009a4a:	061a      	lsls	r2, r3, #24
10009a4c:	466b      	mov	r3, sp
10009a4e:	795b      	ldrb	r3, [r3, #5]
10009a50:	041b      	lsls	r3, r3, #16
10009a52:	4313      	orrs	r3, r2
10009a54:	466a      	mov	r2, sp
10009a56:	79d2      	ldrb	r2, [r2, #7]
10009a58:	4313      	orrs	r3, r2
10009a5a:	466a      	mov	r2, sp
10009a5c:	7990      	ldrb	r0, [r2, #6]
10009a5e:	0200      	lsls	r0, r0, #8
10009a60:	4303      	orrs	r3, r0
10009a62:	469c      	mov	ip, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
10009a64:	607b      	str	r3, [r7, #4]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
10009a66:	466b      	mov	r3, sp
10009a68:	7a12      	ldrb	r2, [r2, #8]
10009a6a:	0612      	lsls	r2, r2, #24
10009a6c:	7a5b      	ldrb	r3, [r3, #9]
10009a6e:	041b      	lsls	r3, r3, #16
10009a70:	431a      	orrs	r2, r3
10009a72:	466b      	mov	r3, sp
10009a74:	7ad8      	ldrb	r0, [r3, #11]
10009a76:	4302      	orrs	r2, r0
10009a78:	7a9b      	ldrb	r3, [r3, #10]
10009a7a:	021b      	lsls	r3, r3, #8
10009a7c:	431a      	orrs	r2, r3
10009a7e:	0010      	movs	r0, r2
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
10009a80:	60ba      	str	r2, [r7, #8]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
            ((long)fifo_data[14] << 8) | fifo_data[15];
10009a82:	466b      	mov	r3, sp
10009a84:	7b1b      	ldrb	r3, [r3, #12]
10009a86:	061a      	lsls	r2, r3, #24
10009a88:	466b      	mov	r3, sp
10009a8a:	7b5b      	ldrb	r3, [r3, #13]
10009a8c:	041b      	lsls	r3, r3, #16
10009a8e:	4313      	orrs	r3, r2
10009a90:	466a      	mov	r2, sp
10009a92:	7bd2      	ldrb	r2, [r2, #15]
10009a94:	4313      	orrs	r3, r2
10009a96:	466a      	mov	r2, sp
10009a98:	7b92      	ldrb	r2, [r2, #14]
10009a9a:	0212      	lsls	r2, r2, #8
10009a9c:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
10009a9e:	60fb      	str	r3, [r7, #12]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
10009aa0:	4642      	mov	r2, r8
10009aa2:	1412      	asrs	r2, r2, #16
10009aa4:	4690      	mov	r8, r2
        quat_q14[1] = quat[1] >> 16;
10009aa6:	4662      	mov	r2, ip
10009aa8:	1417      	asrs	r7, r2, #16
        quat_q14[2] = quat[2] >> 16;
10009aaa:	1402      	asrs	r2, r0, #16
        quat_q14[3] = quat[3] >> 16;
10009aac:	141b      	asrs	r3, r3, #16
10009aae:	469c      	mov	ip, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
10009ab0:	4640      	mov	r0, r8
10009ab2:	4340      	muls	r0, r0
10009ab4:	437f      	muls	r7, r7
10009ab6:	19c7      	adds	r7, r0, r7
10009ab8:	4352      	muls	r2, r2
10009aba:	18ba      	adds	r2, r7, r2
10009abc:	4663      	mov	r3, ip
10009abe:	435b      	muls	r3, r3
10009ac0:	18d3      	adds	r3, r2, r3
10009ac2:	22f1      	movs	r2, #241	; 0xf1
10009ac4:	0612      	lsls	r2, r2, #24
10009ac6:	4694      	mov	ip, r2
10009ac8:	4463      	add	r3, ip
10009aca:	2280      	movs	r2, #128	; 0x80
10009acc:	0492      	lsls	r2, r2, #18
10009ace:	4293      	cmp	r3, r2
10009ad0:	d906      	bls.n	10009ae0 <dmp_read_fifo+0xe8>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
10009ad2:	4b37      	ldr	r3, [pc, #220]	; (10009bb0 <dmp_read_fifo+0x1b8>)
10009ad4:	4798      	blx	r3
            sensors[0] = 0;
10009ad6:	2300      	movs	r3, #0
10009ad8:	8023      	strh	r3, [r4, #0]
            return -1;
10009ada:	2001      	movs	r0, #1
10009adc:	4240      	negs	r0, r0
10009ade:	e05e      	b.n	10009b9e <dmp_read_fifo+0x1a6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
10009ae0:	8823      	ldrh	r3, [r4, #0]
10009ae2:	2280      	movs	r2, #128	; 0x80
10009ae4:	0052      	lsls	r2, r2, #1
10009ae6:	4313      	orrs	r3, r2
10009ae8:	8023      	strh	r3, [r4, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
10009aea:	2310      	movs	r3, #16
10009aec:	e000      	b.n	10009af0 <dmp_read_fifo+0xf8>
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
10009aee:	2300      	movs	r3, #0
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009af0:	064a      	lsls	r2, r1, #25
10009af2:	d517      	bpl.n	10009b24 <dmp_read_fifo+0x12c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
10009af4:	466a      	mov	r2, sp
10009af6:	5cd0      	ldrb	r0, [r2, r3]
10009af8:	0200      	lsls	r0, r0, #8
10009afa:	001a      	movs	r2, r3
10009afc:	446a      	add	r2, sp
10009afe:	7857      	ldrb	r7, [r2, #1]
10009b00:	4338      	orrs	r0, r7
10009b02:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
10009b04:	7890      	ldrb	r0, [r2, #2]
10009b06:	0200      	lsls	r0, r0, #8
10009b08:	78d7      	ldrb	r7, [r2, #3]
10009b0a:	4338      	orrs	r0, r7
10009b0c:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
10009b0e:	7910      	ldrb	r0, [r2, #4]
10009b10:	0200      	lsls	r0, r0, #8
10009b12:	7952      	ldrb	r2, [r2, #5]
10009b14:	4302      	orrs	r2, r0
10009b16:	80b2      	strh	r2, [r6, #4]
        ii += 6;
10009b18:	3306      	adds	r3, #6
10009b1a:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
10009b1c:	8820      	ldrh	r0, [r4, #0]
10009b1e:	2208      	movs	r2, #8
10009b20:	4302      	orrs	r2, r0
10009b22:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009b24:	22c0      	movs	r2, #192	; 0xc0
10009b26:	0052      	lsls	r2, r2, #1
10009b28:	4211      	tst	r1, r2
10009b2a:	d017      	beq.n	10009b5c <dmp_read_fifo+0x164>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
10009b2c:	466a      	mov	r2, sp
10009b2e:	5cd0      	ldrb	r0, [r2, r3]
10009b30:	0200      	lsls	r0, r0, #8
10009b32:	001a      	movs	r2, r3
10009b34:	446a      	add	r2, sp
10009b36:	7856      	ldrb	r6, [r2, #1]
10009b38:	4330      	orrs	r0, r6
10009b3a:	8028      	strh	r0, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
10009b3c:	7890      	ldrb	r0, [r2, #2]
10009b3e:	0200      	lsls	r0, r0, #8
10009b40:	78d6      	ldrb	r6, [r2, #3]
10009b42:	4330      	orrs	r0, r6
10009b44:	8068      	strh	r0, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
10009b46:	7910      	ldrb	r0, [r2, #4]
10009b48:	0200      	lsls	r0, r0, #8
10009b4a:	7952      	ldrb	r2, [r2, #5]
10009b4c:	4302      	orrs	r2, r0
10009b4e:	80aa      	strh	r2, [r5, #4]
        ii += 6;
10009b50:	3306      	adds	r3, #6
10009b52:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_GYRO;
10009b54:	8820      	ldrh	r0, [r4, #0]
10009b56:	2270      	movs	r2, #112	; 0x70
10009b58:	4302      	orrs	r2, r0
10009b5a:	8022      	strh	r2, [r4, #0]
        decode_gesture(fifo_data + ii);
    
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms IN");
    //get_ms(timestamp);
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms OUT");
    return 0;
10009b5c:	2000      	movs	r0, #0
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009b5e:	078a      	lsls	r2, r1, #30
10009b60:	d01d      	beq.n	10009b9e <dmp_read_fifo+0x1a6>
        decode_gesture(fifo_data + ii);
10009b62:	446b      	add	r3, sp
10009b64:	001c      	movs	r4, r3
 */
static int decode_gesture(unsigned char *gesture)
{
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
10009b66:	78dd      	ldrb	r5, [r3, #3]
    tap = 0x3F & gesture[3];

    if (gesture[1] & INT_SRC_TAP) {
10009b68:	785b      	ldrb	r3, [r3, #1]
10009b6a:	07db      	lsls	r3, r3, #31
10009b6c:	d50a      	bpl.n	10009b84 <dmp_read_fifo+0x18c>
        unsigned char direction, count;
        direction = tap >> 3;
        count = (tap % 8) + 1;
        if (dmp.tap_cb)
10009b6e:	4b0e      	ldr	r3, [pc, #56]	; (10009ba8 <dmp_read_fifo+0x1b0>)
10009b70:	681a      	ldr	r2, [r3, #0]
10009b72:	2a00      	cmp	r2, #0
10009b74:	d006      	beq.n	10009b84 <dmp_read_fifo+0x18c>
            dmp.tap_cb(direction, count);
10009b76:	3007      	adds	r0, #7
10009b78:	0001      	movs	r1, r0
10009b7a:	4029      	ands	r1, r5
10009b7c:	3101      	adds	r1, #1
10009b7e:	08eb      	lsrs	r3, r5, #3
10009b80:	4018      	ands	r0, r3
10009b82:	4790      	blx	r2
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
10009b84:	7863      	ldrb	r3, [r4, #1]
        decode_gesture(fifo_data + ii);
    
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms IN");
    //get_ms(timestamp);
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms OUT");
    return 0;
10009b86:	2000      	movs	r0, #0
        count = (tap % 8) + 1;
        if (dmp.tap_cb)
            dmp.tap_cb(direction, count);
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
10009b88:	071b      	lsls	r3, r3, #28
10009b8a:	d508      	bpl.n	10009b9e <dmp_read_fifo+0x1a6>
        if (dmp.android_orient_cb)
10009b8c:	4b06      	ldr	r3, [pc, #24]	; (10009ba8 <dmp_read_fifo+0x1b0>)
10009b8e:	685b      	ldr	r3, [r3, #4]
10009b90:	2b00      	cmp	r3, #0
10009b92:	d003      	beq.n	10009b9c <dmp_read_fifo+0x1a4>
            dmp.android_orient_cb(android_orient >> 6);
10009b94:	09a8      	lsrs	r0, r5, #6
10009b96:	4798      	blx	r3
        decode_gesture(fifo_data + ii);
    
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms IN");
    //get_ms(timestamp);
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms OUT");
    return 0;
10009b98:	2000      	movs	r0, #0
10009b9a:	e000      	b.n	10009b9e <dmp_read_fifo+0x1a6>
10009b9c:	2000      	movs	r0, #0
}
10009b9e:	b008      	add	sp, #32
10009ba0:	bc04      	pop	{r2}
10009ba2:	4690      	mov	r8, r2
10009ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ba6:	46c0      	nop			; (mov r8, r8)
10009ba8:	100138e8 	.word	0x100138e8
10009bac:	10008a0d 	.word	0x10008a0d
10009bb0:	100084bd 	.word	0x100084bd

10009bb4 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009bb4:	2000      	movs	r0, #0
10009bb6:	4770      	bx	lr

10009bb8 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009bb8:	2000      	movs	r0, #0
10009bba:	4770      	bx	lr

10009bbc <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009bbc:	78c0      	ldrb	r0, [r0, #3]
10009bbe:	2800      	cmp	r0, #0
10009bc0:	d000      	beq.n	10009bc4 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009bc2:	20e2      	movs	r0, #226	; 0xe2
}
10009bc4:	4770      	bx	lr
10009bc6:	46c0      	nop			; (mov r8, r8)

10009bc8 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009bc8:	2000      	movs	r0, #0
10009bca:	4770      	bx	lr

10009bcc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009bcc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009bce:	7800      	ldrb	r0, [r0, #0]
10009bd0:	2800      	cmp	r0, #0
10009bd2:	d006      	beq.n	10009be2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009bd4:	4803      	ldr	r0, [pc, #12]	; (10009be4 <ble_scan_report_handler+0x18>)
10009bd6:	4b04      	ldr	r3, [pc, #16]	; (10009be8 <ble_scan_report_handler+0x1c>)
10009bd8:	4798      	blx	r3
10009bda:	4804      	ldr	r0, [pc, #16]	; (10009bec <ble_scan_report_handler+0x20>)
10009bdc:	4b04      	ldr	r3, [pc, #16]	; (10009bf0 <ble_scan_report_handler+0x24>)
10009bde:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009be0:	20e2      	movs	r0, #226	; 0xe2
}
10009be2:	bd10      	pop	{r4, pc}
10009be4:	10012834 	.word	0x10012834
10009be8:	10011815 	.word	0x10011815
10009bec:	10012de4 	.word	0x10012de4
10009bf0:	100116f5 	.word	0x100116f5

10009bf4 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009bf4:	b510      	push	{r4, lr}
10009bf6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009bf8:	78c0      	ldrb	r0, [r0, #3]
10009bfa:	2800      	cmp	r0, #0
10009bfc:	d008      	beq.n	10009c10 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009bfe:	4805      	ldr	r0, [pc, #20]	; (10009c14 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009c00:	4b05      	ldr	r3, [pc, #20]	; (10009c18 <ble_mtu_changed_cmd_complete_handler+0x24>)
10009c02:	4798      	blx	r3
10009c04:	78a2      	ldrb	r2, [r4, #2]
10009c06:	8821      	ldrh	r1, [r4, #0]
10009c08:	4804      	ldr	r0, [pc, #16]	; (10009c1c <ble_mtu_changed_cmd_complete_handler+0x28>)
10009c0a:	4b05      	ldr	r3, [pc, #20]	; (10009c20 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009c0c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009c0e:	20e2      	movs	r0, #226	; 0xe2
}
10009c10:	bd10      	pop	{r4, pc}
10009c12:	46c0      	nop			; (mov r8, r8)
10009c14:	10012834 	.word	0x10012834
10009c18:	10011815 	.word	0x10011815
10009c1c:	10012df8 	.word	0x10012df8
10009c20:	100116f5 	.word	0x100116f5

10009c24 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c26:	0004      	movs	r4, r0
10009c28:	4b19      	ldr	r3, [pc, #100]	; (10009c90 <ble_disconnected_state_handler+0x6c>)
10009c2a:	229b      	movs	r2, #155	; 0x9b
10009c2c:	0092      	lsls	r2, r2, #2
10009c2e:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c30:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c32:	2600      	movs	r6, #0
10009c34:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c36:	001a      	movs	r2, r3
10009c38:	3a56      	subs	r2, #86	; 0x56
10009c3a:	8811      	ldrh	r1, [r2, #0]
10009c3c:	8822      	ldrh	r2, [r4, #0]
10009c3e:	4291      	cmp	r1, r2
10009c40:	d119      	bne.n	10009c76 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c42:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c44:	2a05      	cmp	r2, #5
10009c46:	d001      	beq.n	10009c4c <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c48:	2a08      	cmp	r2, #8
10009c4a:	d101      	bne.n	10009c50 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c4c:	7007      	strb	r7, [r0, #0]
10009c4e:	e012      	b.n	10009c76 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009c50:	2a07      	cmp	r2, #7
10009c52:	d80f      	bhi.n	10009c74 <ble_disconnected_state_handler+0x50>
10009c54:	0092      	lsls	r2, r2, #2
10009c56:	490f      	ldr	r1, [pc, #60]	; (10009c94 <ble_disconnected_state_handler+0x70>)
10009c58:	588a      	ldr	r2, [r1, r2]
10009c5a:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c5c:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009c5e:	4a0e      	ldr	r2, [pc, #56]	; (10009c98 <ble_disconnected_state_handler+0x74>)
10009c60:	7812      	ldrb	r2, [r2, #0]
10009c62:	2a00      	cmp	r2, #0
10009c64:	d007      	beq.n	10009c76 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009c66:	4a0c      	ldr	r2, [pc, #48]	; (10009c98 <ble_disconnected_state_handler+0x74>)
10009c68:	7812      	ldrb	r2, [r2, #0]
10009c6a:	3a01      	subs	r2, #1
10009c6c:	b2d2      	uxtb	r2, r2
10009c6e:	490a      	ldr	r1, [pc, #40]	; (10009c98 <ble_disconnected_state_handler+0x74>)
10009c70:	700a      	strb	r2, [r1, #0]
10009c72:	e000      	b.n	10009c76 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c74:	7006      	strb	r6, [r0, #0]
10009c76:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009c78:	42ab      	cmp	r3, r5
10009c7a:	d1db      	bne.n	10009c34 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009c7c:	4807      	ldr	r0, [pc, #28]	; (10009c9c <ble_disconnected_state_handler+0x78>)
10009c7e:	4b08      	ldr	r3, [pc, #32]	; (10009ca0 <ble_disconnected_state_handler+0x7c>)
10009c80:	4798      	blx	r3
10009c82:	8822      	ldrh	r2, [r4, #0]
10009c84:	78a1      	ldrb	r1, [r4, #2]
10009c86:	4807      	ldr	r0, [pc, #28]	; (10009ca4 <ble_disconnected_state_handler+0x80>)
10009c88:	4b07      	ldr	r3, [pc, #28]	; (10009ca8 <ble_disconnected_state_handler+0x84>)
10009c8a:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009c8c:	2000      	movs	r0, #0
10009c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c90:	10014f3e 	.word	0x10014f3e
10009c94:	10012c74 	.word	0x10012c74
10009c98:	1001514c 	.word	0x1001514c
10009c9c:	10012834 	.word	0x10012834
10009ca0:	10011815 	.word	0x10011815
10009ca4:	10012e30 	.word	0x10012e30
10009ca8:	100116f5 	.word	0x100116f5

10009cac <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009cae:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009cb0:	8801      	ldrh	r1, [r0, #0]
10009cb2:	4b28      	ldr	r3, [pc, #160]	; (10009d54 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cb4:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009cb6:	891a      	ldrh	r2, [r3, #8]
10009cb8:	428a      	cmp	r2, r1
10009cba:	d104      	bne.n	10009cc6 <ble_encryption_status_change_handler+0x1a>
10009cbc:	001a      	movs	r2, r3
10009cbe:	325e      	adds	r2, #94	; 0x5e
10009cc0:	7812      	ldrb	r2, [r2, #0]
10009cc2:	2a06      	cmp	r2, #6
10009cc4:	d02e      	beq.n	10009d24 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cc6:	3401      	adds	r4, #1
10009cc8:	b2e4      	uxtb	r4, r4
10009cca:	337c      	adds	r3, #124	; 0x7c
10009ccc:	2c05      	cmp	r4, #5
10009cce:	d1f2      	bne.n	10009cb6 <ble_encryption_status_change_handler+0xa>
10009cd0:	e039      	b.n	10009d46 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009cd2:	4920      	ldr	r1, [pc, #128]	; (10009d54 <ble_encryption_status_change_handler+0xa8>)
10009cd4:	0163      	lsls	r3, r4, #5
10009cd6:	1b1a      	subs	r2, r3, r4
10009cd8:	0092      	lsls	r2, r2, #2
10009cda:	188a      	adds	r2, r1, r2
10009cdc:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009cde:	0014      	movs	r4, r2
10009ce0:	345e      	adds	r4, #94	; 0x5e
10009ce2:	2307      	movs	r3, #7
10009ce4:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009ce6:	481c      	ldr	r0, [pc, #112]	; (10009d58 <ble_encryption_status_change_handler+0xac>)
10009ce8:	4b1c      	ldr	r3, [pc, #112]	; (10009d5c <ble_encryption_status_change_handler+0xb0>)
10009cea:	4798      	blx	r3
10009cec:	481c      	ldr	r0, [pc, #112]	; (10009d60 <ble_encryption_status_change_handler+0xb4>)
10009cee:	4b1d      	ldr	r3, [pc, #116]	; (10009d64 <ble_encryption_status_change_handler+0xb8>)
10009cf0:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009cf2:	25e2      	movs	r5, #226	; 0xe2
10009cf4:	e02b      	b.n	10009d4e <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009cf6:	4818      	ldr	r0, [pc, #96]	; (10009d58 <ble_encryption_status_change_handler+0xac>)
10009cf8:	4b18      	ldr	r3, [pc, #96]	; (10009d5c <ble_encryption_status_change_handler+0xb0>)
10009cfa:	4798      	blx	r3
10009cfc:	481a      	ldr	r0, [pc, #104]	; (10009d68 <ble_encryption_status_change_handler+0xbc>)
10009cfe:	4b19      	ldr	r3, [pc, #100]	; (10009d64 <ble_encryption_status_change_handler+0xb8>)
10009d00:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009d02:	4914      	ldr	r1, [pc, #80]	; (10009d54 <ble_encryption_status_change_handler+0xa8>)
10009d04:	0163      	lsls	r3, r4, #5
10009d06:	1b1a      	subs	r2, r3, r4
10009d08:	0092      	lsls	r2, r2, #2
10009d0a:	188a      	adds	r2, r1, r2
10009d0c:	0010      	movs	r0, r2
10009d0e:	305e      	adds	r0, #94	; 0x5e
10009d10:	2708      	movs	r7, #8
10009d12:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009d14:	78f0      	ldrb	r0, [r6, #3]
10009d16:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009d18:	78b2      	ldrb	r2, [r6, #2]
10009d1a:	1b1c      	subs	r4, r3, r4
10009d1c:	00a4      	lsls	r4, r4, #2
10009d1e:	190c      	adds	r4, r1, r4
10009d20:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009d22:	e014      	b.n	10009d4e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d24:	78b5      	ldrb	r5, [r6, #2]
10009d26:	2d00      	cmp	r5, #0
10009d28:	d0e5      	beq.n	10009cf6 <ble_encryption_status_change_handler+0x4a>
10009d2a:	e7d2      	b.n	10009cd2 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009d2c:	4e0a      	ldr	r6, [pc, #40]	; (10009d58 <ble_encryption_status_change_handler+0xac>)
10009d2e:	0030      	movs	r0, r6
10009d30:	4d0a      	ldr	r5, [pc, #40]	; (10009d5c <ble_encryption_status_change_handler+0xb0>)
10009d32:	47a8      	blx	r5
10009d34:	480c      	ldr	r0, [pc, #48]	; (10009d68 <ble_encryption_status_change_handler+0xbc>)
10009d36:	4c0b      	ldr	r4, [pc, #44]	; (10009d64 <ble_encryption_status_change_handler+0xb8>)
10009d38:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009d3a:	0030      	movs	r0, r6
10009d3c:	47a8      	blx	r5
10009d3e:	480b      	ldr	r0, [pc, #44]	; (10009d6c <ble_encryption_status_change_handler+0xc0>)
10009d40:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009d42:	25e2      	movs	r5, #226	; 0xe2
10009d44:	e003      	b.n	10009d4e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d46:	78b5      	ldrb	r5, [r6, #2]
10009d48:	2d00      	cmp	r5, #0
10009d4a:	d1c2      	bne.n	10009cd2 <ble_encryption_status_change_handler+0x26>
10009d4c:	e7ee      	b.n	10009d2c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009d4e:	0028      	movs	r0, r5
10009d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d52:	46c0      	nop			; (mov r8, r8)
10009d54:	10014ee0 	.word	0x10014ee0
10009d58:	10012834 	.word	0x10012834
10009d5c:	10011815 	.word	0x10011815
10009d60:	10012e60 	.word	0x10012e60
10009d64:	100116f5 	.word	0x100116f5
10009d68:	10012e74 	.word	0x10012e74
10009d6c:	10012e98 	.word	0x10012e98

10009d70 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009d70:	b510      	push	{r4, lr}
10009d72:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009d74:	4b15      	ldr	r3, [pc, #84]	; (10009dcc <ble_scan_info_handler+0x5c>)
10009d76:	781b      	ldrb	r3, [r3, #0]
10009d78:	b2db      	uxtb	r3, r3
10009d7a:	2b13      	cmp	r3, #19
10009d7c:	d812      	bhi.n	10009da4 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009d7e:	4c13      	ldr	r4, [pc, #76]	; (10009dcc <ble_scan_info_handler+0x5c>)
10009d80:	7823      	ldrb	r3, [r4, #0]
10009d82:	b2db      	uxtb	r3, r3
10009d84:	0098      	lsls	r0, r3, #2
10009d86:	18c0      	adds	r0, r0, r3
10009d88:	00c0      	lsls	r0, r0, #3
10009d8a:	18c3      	adds	r3, r0, r3
10009d8c:	4810      	ldr	r0, [pc, #64]	; (10009dd0 <ble_scan_info_handler+0x60>)
10009d8e:	1818      	adds	r0, r3, r0
10009d90:	2229      	movs	r2, #41	; 0x29
10009d92:	4b10      	ldr	r3, [pc, #64]	; (10009dd4 <ble_scan_info_handler+0x64>)
10009d94:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009d96:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009d98:	7823      	ldrb	r3, [r4, #0]
10009d9a:	3301      	adds	r3, #1
10009d9c:	b2db      	uxtb	r3, r3
10009d9e:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009da0:	2300      	movs	r3, #0
10009da2:	e011      	b.n	10009dc8 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009da4:	480c      	ldr	r0, [pc, #48]	; (10009dd8 <ble_scan_info_handler+0x68>)
10009da6:	4b0d      	ldr	r3, [pc, #52]	; (10009ddc <ble_scan_info_handler+0x6c>)
10009da8:	4798      	blx	r3
10009daa:	480d      	ldr	r0, [pc, #52]	; (10009de0 <ble_scan_info_handler+0x70>)
10009dac:	4b0d      	ldr	r3, [pc, #52]	; (10009de4 <ble_scan_info_handler+0x74>)
10009dae:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009db0:	4b0d      	ldr	r3, [pc, #52]	; (10009de8 <ble_scan_info_handler+0x78>)
10009db2:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009db4:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009db6:	2800      	cmp	r0, #0
10009db8:	d006      	beq.n	10009dc8 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009dba:	4807      	ldr	r0, [pc, #28]	; (10009dd8 <ble_scan_info_handler+0x68>)
10009dbc:	4b07      	ldr	r3, [pc, #28]	; (10009ddc <ble_scan_info_handler+0x6c>)
10009dbe:	4798      	blx	r3
10009dc0:	480a      	ldr	r0, [pc, #40]	; (10009dec <ble_scan_info_handler+0x7c>)
10009dc2:	4b08      	ldr	r3, [pc, #32]	; (10009de4 <ble_scan_info_handler+0x74>)
10009dc4:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009dc6:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009dc8:	0018      	movs	r0, r3
10009dca:	bd10      	pop	{r4, pc}
10009dcc:	10014cfc 	.word	0x10014cfc
10009dd0:	100151c4 	.word	0x100151c4
10009dd4:	1001159b 	.word	0x1001159b
10009dd8:	10012834 	.word	0x10012834
10009ddc:	10011815 	.word	0x10011815
10009de0:	10012ec0 	.word	0x10012ec0
10009de4:	100116f5 	.word	0x100116f5
10009de8:	1000db05 	.word	0x1000db05
10009dec:	10012ef8 	.word	0x10012ef8

10009df0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009df2:	464f      	mov	r7, r9
10009df4:	4646      	mov	r6, r8
10009df6:	b4c0      	push	{r6, r7}
10009df8:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009dfa:	8841      	ldrh	r1, [r0, #2]
10009dfc:	4b3a      	ldr	r3, [pc, #232]	; (10009ee8 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009dfe:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e00:	891a      	ldrh	r2, [r3, #8]
10009e02:	428a      	cmp	r2, r1
10009e04:	d104      	bne.n	10009e10 <ble_pair_done_handler+0x20>
10009e06:	001a      	movs	r2, r3
10009e08:	325e      	adds	r2, #94	; 0x5e
10009e0a:	7812      	ldrb	r2, [r2, #0]
10009e0c:	2a03      	cmp	r2, #3
10009e0e:	d062      	beq.n	10009ed6 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e10:	3401      	adds	r4, #1
10009e12:	b2e4      	uxtb	r4, r4
10009e14:	337c      	adds	r3, #124	; 0x7c
10009e16:	2c05      	cmp	r4, #5
10009e18:	d1f2      	bne.n	10009e00 <ble_pair_done_handler+0x10>
10009e1a:	e02b      	b.n	10009e74 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009e1c:	0163      	lsls	r3, r4, #5
10009e1e:	1b1c      	subs	r4, r3, r4
10009e20:	00a4      	lsls	r4, r4, #2
10009e22:	4b31      	ldr	r3, [pc, #196]	; (10009ee8 <ble_pair_done_handler+0xf8>)
10009e24:	191c      	adds	r4, r3, r4
10009e26:	345e      	adds	r4, #94	; 0x5e
10009e28:	7823      	ldrb	r3, [r4, #0]
10009e2a:	2b01      	cmp	r3, #1
10009e2c:	d913      	bls.n	10009e56 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009e2e:	482f      	ldr	r0, [pc, #188]	; (10009eec <ble_pair_done_handler+0xfc>)
10009e30:	4b2f      	ldr	r3, [pc, #188]	; (10009ef0 <ble_pair_done_handler+0x100>)
10009e32:	4798      	blx	r3
10009e34:	482f      	ldr	r0, [pc, #188]	; (10009ef4 <ble_pair_done_handler+0x104>)
10009e36:	4b30      	ldr	r3, [pc, #192]	; (10009ef8 <ble_pair_done_handler+0x108>)
10009e38:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009e3a:	8868      	ldrh	r0, [r5, #2]
10009e3c:	2113      	movs	r1, #19
10009e3e:	4b2f      	ldr	r3, [pc, #188]	; (10009efc <ble_pair_done_handler+0x10c>)
10009e40:	4798      	blx	r3
10009e42:	1e06      	subs	r6, r0, #0
10009e44:	d04b      	beq.n	10009ede <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009e46:	4829      	ldr	r0, [pc, #164]	; (10009eec <ble_pair_done_handler+0xfc>)
10009e48:	4b29      	ldr	r3, [pc, #164]	; (10009ef0 <ble_pair_done_handler+0x100>)
10009e4a:	4798      	blx	r3
10009e4c:	482c      	ldr	r0, [pc, #176]	; (10009f00 <ble_pair_done_handler+0x110>)
10009e4e:	4b2a      	ldr	r3, [pc, #168]	; (10009ef8 <ble_pair_done_handler+0x108>)
10009e50:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e52:	26e2      	movs	r6, #226	; 0xe2
10009e54:	e043      	b.n	10009ede <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009e56:	2600      	movs	r6, #0
10009e58:	e041      	b.n	10009ede <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009e5a:	4e24      	ldr	r6, [pc, #144]	; (10009eec <ble_pair_done_handler+0xfc>)
10009e5c:	0030      	movs	r0, r6
10009e5e:	4d24      	ldr	r5, [pc, #144]	; (10009ef0 <ble_pair_done_handler+0x100>)
10009e60:	47a8      	blx	r5
10009e62:	4828      	ldr	r0, [pc, #160]	; (10009f04 <ble_pair_done_handler+0x114>)
10009e64:	4c24      	ldr	r4, [pc, #144]	; (10009ef8 <ble_pair_done_handler+0x108>)
10009e66:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009e68:	0030      	movs	r0, r6
10009e6a:	47a8      	blx	r5
10009e6c:	4826      	ldr	r0, [pc, #152]	; (10009f08 <ble_pair_done_handler+0x118>)
10009e6e:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009e70:	26e2      	movs	r6, #226	; 0xe2
10009e72:	e034      	b.n	10009ede <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009e74:	792b      	ldrb	r3, [r5, #4]
10009e76:	2b00      	cmp	r3, #0
10009e78:	d1d0      	bne.n	10009e1c <ble_pair_done_handler+0x2c>
10009e7a:	e7ee      	b.n	10009e5a <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009e7c:	481b      	ldr	r0, [pc, #108]	; (10009eec <ble_pair_done_handler+0xfc>)
10009e7e:	4b1c      	ldr	r3, [pc, #112]	; (10009ef0 <ble_pair_done_handler+0x100>)
10009e80:	4798      	blx	r3
10009e82:	4820      	ldr	r0, [pc, #128]	; (10009f04 <ble_pair_done_handler+0x114>)
10009e84:	4b1c      	ldr	r3, [pc, #112]	; (10009ef8 <ble_pair_done_handler+0x108>)
10009e86:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009e88:	782a      	ldrb	r2, [r5, #0]
10009e8a:	4b17      	ldr	r3, [pc, #92]	; (10009ee8 <ble_pair_done_handler+0xf8>)
10009e8c:	4699      	mov	r9, r3
10009e8e:	0167      	lsls	r7, r4, #5
10009e90:	1b3b      	subs	r3, r7, r4
10009e92:	009b      	lsls	r3, r3, #2
10009e94:	444b      	add	r3, r9
10009e96:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009e98:	792a      	ldrb	r2, [r5, #4]
10009e9a:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009e9c:	335e      	adds	r3, #94	; 0x5e
10009e9e:	2205      	movs	r2, #5
10009ea0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009ea2:	1b38      	subs	r0, r7, r4
10009ea4:	0080      	lsls	r0, r0, #2
10009ea6:	4448      	add	r0, r9
10009ea8:	3036      	adds	r0, #54	; 0x36
10009eaa:	0029      	movs	r1, r5
10009eac:	3122      	adds	r1, #34	; 0x22
10009eae:	320b      	adds	r2, #11
10009eb0:	4b16      	ldr	r3, [pc, #88]	; (10009f0c <ble_pair_done_handler+0x11c>)
10009eb2:	4698      	mov	r8, r3
10009eb4:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009eb6:	1b38      	subs	r0, r7, r4
10009eb8:	0080      	lsls	r0, r0, #2
10009eba:	4448      	add	r0, r9
10009ebc:	3046      	adds	r0, #70	; 0x46
10009ebe:	0029      	movs	r1, r5
10009ec0:	3132      	adds	r1, #50	; 0x32
10009ec2:	2217      	movs	r2, #23
10009ec4:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009ec6:	1b38      	subs	r0, r7, r4
10009ec8:	0080      	lsls	r0, r0, #2
10009eca:	4448      	add	r0, r9
10009ecc:	301a      	adds	r0, #26
10009ece:	1da9      	adds	r1, r5, #6
10009ed0:	221c      	movs	r2, #28
10009ed2:	47c0      	blx	r8
10009ed4:	e003      	b.n	10009ede <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009ed6:	792e      	ldrb	r6, [r5, #4]
10009ed8:	2e00      	cmp	r6, #0
10009eda:	d0cf      	beq.n	10009e7c <ble_pair_done_handler+0x8c>
10009edc:	e79e      	b.n	10009e1c <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009ede:	0030      	movs	r0, r6
10009ee0:	bc0c      	pop	{r2, r3}
10009ee2:	4690      	mov	r8, r2
10009ee4:	4699      	mov	r9, r3
10009ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009ee8:	10014ee0 	.word	0x10014ee0
10009eec:	10012834 	.word	0x10012834
10009ef0:	10011815 	.word	0x10011815
10009ef4:	10012f10 	.word	0x10012f10
10009ef8:	100116f5 	.word	0x100116f5
10009efc:	1000db25 	.word	0x1000db25
10009f00:	10012f30 	.word	0x10012f30
10009f04:	10012f4c 	.word	0x10012f4c
10009f08:	10012f78 	.word	0x10012f78
10009f0c:	1001159b 	.word	0x1001159b

10009f10 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009f10:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009f12:	8800      	ldrh	r0, [r0, #0]
10009f14:	2378      	movs	r3, #120	; 0x78
10009f16:	2201      	movs	r2, #1
10009f18:	2101      	movs	r1, #1
10009f1a:	4c02      	ldr	r4, [pc, #8]	; (10009f24 <ble_conn_param_update_req+0x14>)
10009f1c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009f1e:	2000      	movs	r0, #0
10009f20:	bd10      	pop	{r4, pc}
10009f22:	46c0      	nop			; (mov r8, r8)
10009f24:	1000db45 	.word	0x1000db45

10009f28 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009f28:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f2a:	4657      	mov	r7, sl
10009f2c:	464e      	mov	r6, r9
10009f2e:	4645      	mov	r5, r8
10009f30:	b4e0      	push	{r5, r6, r7}
10009f32:	b084      	sub	sp, #16
10009f34:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009f36:	2209      	movs	r2, #9
10009f38:	2100      	movs	r1, #0
10009f3a:	a801      	add	r0, sp, #4
10009f3c:	4b6b      	ldr	r3, [pc, #428]	; (1000a0ec <ble_slave_security_request_handler+0x1c4>)
10009f3e:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f40:	8825      	ldrh	r5, [r4, #0]
10009f42:	496b      	ldr	r1, [pc, #428]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
10009f44:	000a      	movs	r2, r1
10009f46:	2300      	movs	r3, #0
10009f48:	8910      	ldrh	r0, [r2, #8]
10009f4a:	42a8      	cmp	r0, r5
10009f4c:	d116      	bne.n	10009f7c <ble_slave_security_request_handler+0x54>
10009f4e:	0010      	movs	r0, r2
10009f50:	305e      	adds	r0, #94	; 0x5e
10009f52:	7800      	ldrb	r0, [r0, #0]
10009f54:	2802      	cmp	r0, #2
10009f56:	d111      	bne.n	10009f7c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009f58:	4865      	ldr	r0, [pc, #404]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
10009f5a:	015a      	lsls	r2, r3, #5
10009f5c:	1ad6      	subs	r6, r2, r3
10009f5e:	00b6      	lsls	r6, r6, #2
10009f60:	1986      	adds	r6, r0, r6
10009f62:	365e      	adds	r6, #94	; 0x5e
10009f64:	2206      	movs	r2, #6
10009f66:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009f68:	32f9      	adds	r2, #249	; 0xf9
10009f6a:	4013      	ands	r3, r2
10009f6c:	015a      	lsls	r2, r3, #5
10009f6e:	1ad2      	subs	r2, r2, r3
10009f70:	0092      	lsls	r2, r2, #2
10009f72:	1882      	adds	r2, r0, r2
10009f74:	7d12      	ldrb	r2, [r2, #20]
10009f76:	07d0      	lsls	r0, r2, #31
10009f78:	d405      	bmi.n	10009f86 <ble_slave_security_request_handler+0x5e>
10009f7a:	e01b      	b.n	10009fb4 <ble_slave_security_request_handler+0x8c>
10009f7c:	3301      	adds	r3, #1
10009f7e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f80:	2b05      	cmp	r3, #5
10009f82:	d1e1      	bne.n	10009f48 <ble_slave_security_request_handler+0x20>
10009f84:	e01e      	b.n	10009fc4 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009f86:	78e0      	ldrb	r0, [r4, #3]
10009f88:	2800      	cmp	r0, #0
10009f8a:	d013      	beq.n	10009fb4 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009f8c:	0159      	lsls	r1, r3, #5
10009f8e:	1ac9      	subs	r1, r1, r3
10009f90:	008b      	lsls	r3, r1, #2
10009f92:	4957      	ldr	r1, [pc, #348]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
10009f94:	18c9      	adds	r1, r1, r3
10009f96:	311a      	adds	r1, #26
10009f98:	8820      	ldrh	r0, [r4, #0]
10009f9a:	4b56      	ldr	r3, [pc, #344]	; (1000a0f4 <ble_slave_security_request_handler+0x1cc>)
10009f9c:	4798      	blx	r3
10009f9e:	2800      	cmp	r0, #0
10009fa0:	d100      	bne.n	10009fa4 <ble_slave_security_request_handler+0x7c>
10009fa2:	e09d      	b.n	1000a0e0 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009fa4:	4854      	ldr	r0, [pc, #336]	; (1000a0f8 <ble_slave_security_request_handler+0x1d0>)
10009fa6:	4b55      	ldr	r3, [pc, #340]	; (1000a0fc <ble_slave_security_request_handler+0x1d4>)
10009fa8:	4798      	blx	r3
10009faa:	4855      	ldr	r0, [pc, #340]	; (1000a100 <ble_slave_security_request_handler+0x1d8>)
10009fac:	4b55      	ldr	r3, [pc, #340]	; (1000a104 <ble_slave_security_request_handler+0x1dc>)
10009fae:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009fb0:	20e2      	movs	r0, #226	; 0xe2
10009fb2:	e095      	b.n	1000a0e0 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009fb4:	015a      	lsls	r2, r3, #5
10009fb6:	1ad3      	subs	r3, r2, r3
10009fb8:	009b      	lsls	r3, r3, #2
10009fba:	4a4d      	ldr	r2, [pc, #308]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
10009fbc:	18d3      	adds	r3, r2, r3
10009fbe:	335e      	adds	r3, #94	; 0x5e
10009fc0:	2202      	movs	r2, #2
10009fc2:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fc4:	8825      	ldrh	r5, [r4, #0]
10009fc6:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fc8:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009fca:	0016      	movs	r6, r2
10009fcc:	8908      	ldrh	r0, [r1, #8]
10009fce:	42a8      	cmp	r0, r5
10009fd0:	d10d      	bne.n	10009fee <ble_slave_security_request_handler+0xc6>
10009fd2:	0008      	movs	r0, r1
10009fd4:	305e      	adds	r0, #94	; 0x5e
10009fd6:	7800      	ldrb	r0, [r0, #0]
10009fd8:	2802      	cmp	r0, #2
10009fda:	d108      	bne.n	10009fee <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009fdc:	0152      	lsls	r2, r2, #5
10009fde:	1b92      	subs	r2, r2, r6
10009fe0:	0096      	lsls	r6, r2, #2
10009fe2:	4a43      	ldr	r2, [pc, #268]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
10009fe4:	1992      	adds	r2, r2, r6
10009fe6:	325e      	adds	r2, #94	; 0x5e
10009fe8:	2103      	movs	r1, #3
10009fea:	7011      	strb	r1, [r2, #0]
			break;
10009fec:	e005      	b.n	10009ffa <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fee:	3301      	adds	r3, #1
10009ff0:	b2db      	uxtb	r3, r3
10009ff2:	3201      	adds	r2, #1
10009ff4:	317c      	adds	r1, #124	; 0x7c
10009ff6:	2b05      	cmp	r3, #5
10009ff8:	d1e7      	bne.n	10009fca <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009ffa:	aa01      	add	r2, sp, #4
10009ffc:	2102      	movs	r1, #2
10009ffe:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a000:	78e1      	ldrb	r1, [r4, #3]
1000a002:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a004:	2101      	movs	r1, #1
1000a006:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a008:	3103      	adds	r1, #3
1000a00a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a00c:	001f      	movs	r7, r3
1000a00e:	015a      	lsls	r2, r3, #5
1000a010:	1ad2      	subs	r2, r2, r3
1000a012:	0092      	lsls	r2, r2, #2
1000a014:	4936      	ldr	r1, [pc, #216]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
1000a016:	5c52      	ldrb	r2, [r2, r1]
1000a018:	2a02      	cmp	r2, #2
1000a01a:	d104      	bne.n	1000a026 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a01c:	aa01      	add	r2, sp, #4
1000a01e:	2103      	movs	r1, #3
1000a020:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a022:	71d1      	strb	r1, [r2, #7]
1000a024:	e003      	b.n	1000a02e <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a026:	aa01      	add	r2, sp, #4
1000a028:	2101      	movs	r1, #1
1000a02a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a02c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a02e:	aa01      	add	r2, sp, #4
1000a030:	2110      	movs	r1, #16
1000a032:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a034:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a036:	017a      	lsls	r2, r7, #5
1000a038:	1bd2      	subs	r2, r2, r7
1000a03a:	0092      	lsls	r2, r2, #2
1000a03c:	492c      	ldr	r1, [pc, #176]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
1000a03e:	188a      	adds	r2, r1, r2
1000a040:	7e12      	ldrb	r2, [r2, #24]
1000a042:	2a40      	cmp	r2, #64	; 0x40
1000a044:	d134      	bne.n	1000a0b0 <ble_slave_security_request_handler+0x188>
1000a046:	015a      	lsls	r2, r3, #5
1000a048:	1ad3      	subs	r3, r2, r3
1000a04a:	009b      	lsls	r3, r3, #2
1000a04c:	469a      	mov	sl, r3
1000a04e:	001e      	movs	r6, r3
1000a050:	3660      	adds	r6, #96	; 0x60
1000a052:	1876      	adds	r6, r6, r1
1000a054:	4655      	mov	r5, sl
1000a056:	3568      	adds	r5, #104	; 0x68
1000a058:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a05a:	4b2b      	ldr	r3, [pc, #172]	; (1000a108 <ble_slave_security_request_handler+0x1e0>)
1000a05c:	4699      	mov	r9, r3
1000a05e:	230f      	movs	r3, #15
1000a060:	4698      	mov	r8, r3
1000a062:	47c8      	blx	r9
1000a064:	4643      	mov	r3, r8
1000a066:	4018      	ands	r0, r3
1000a068:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a06a:	47c8      	blx	r9
1000a06c:	4643      	mov	r3, r8
1000a06e:	4018      	ands	r0, r3
1000a070:	74b0      	strb	r0, [r6, #18]
1000a072:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a074:	42ae      	cmp	r6, r5
1000a076:	d1f4      	bne.n	1000a062 <ble_slave_security_request_handler+0x13a>
1000a078:	4656      	mov	r6, sl
1000a07a:	3670      	adds	r6, #112	; 0x70
1000a07c:	4a1c      	ldr	r2, [pc, #112]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
1000a07e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a080:	4b21      	ldr	r3, [pc, #132]	; (1000a108 <ble_slave_security_request_handler+0x1e0>)
1000a082:	4699      	mov	r9, r3
1000a084:	230f      	movs	r3, #15
1000a086:	4698      	mov	r8, r3
1000a088:	47c8      	blx	r9
1000a08a:	4643      	mov	r3, r8
1000a08c:	4018      	ands	r0, r3
1000a08e:	7028      	strb	r0, [r5, #0]
1000a090:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a092:	42b5      	cmp	r5, r6
1000a094:	d1f8      	bne.n	1000a088 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a096:	4b1c      	ldr	r3, [pc, #112]	; (1000a108 <ble_slave_security_request_handler+0x1e0>)
1000a098:	4798      	blx	r3
1000a09a:	017b      	lsls	r3, r7, #5
1000a09c:	1bdb      	subs	r3, r3, r7
1000a09e:	009b      	lsls	r3, r3, #2
1000a0a0:	4a13      	ldr	r2, [pc, #76]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
1000a0a2:	18d3      	adds	r3, r2, r3
1000a0a4:	001a      	movs	r2, r3
1000a0a6:	3270      	adds	r2, #112	; 0x70
1000a0a8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a0aa:	337a      	adds	r3, #122	; 0x7a
1000a0ac:	2210      	movs	r2, #16
1000a0ae:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a0b0:	017a      	lsls	r2, r7, #5
1000a0b2:	1bd7      	subs	r7, r2, r7
1000a0b4:	00bf      	lsls	r7, r7, #2
1000a0b6:	3760      	adds	r7, #96	; 0x60
1000a0b8:	4a0d      	ldr	r2, [pc, #52]	; (1000a0f0 <ble_slave_security_request_handler+0x1c8>)
1000a0ba:	18ba      	adds	r2, r7, r2
1000a0bc:	8820      	ldrh	r0, [r4, #0]
1000a0be:	2300      	movs	r3, #0
1000a0c0:	a901      	add	r1, sp, #4
1000a0c2:	4c12      	ldr	r4, [pc, #72]	; (1000a10c <ble_slave_security_request_handler+0x1e4>)
1000a0c4:	47a0      	blx	r4
1000a0c6:	2800      	cmp	r0, #0
1000a0c8:	d00a      	beq.n	1000a0e0 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a0ca:	ab01      	add	r3, sp, #4
1000a0cc:	2200      	movs	r2, #0
1000a0ce:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a0d0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a0d2:	4809      	ldr	r0, [pc, #36]	; (1000a0f8 <ble_slave_security_request_handler+0x1d0>)
1000a0d4:	4b09      	ldr	r3, [pc, #36]	; (1000a0fc <ble_slave_security_request_handler+0x1d4>)
1000a0d6:	4798      	blx	r3
1000a0d8:	480d      	ldr	r0, [pc, #52]	; (1000a110 <ble_slave_security_request_handler+0x1e8>)
1000a0da:	4b0a      	ldr	r3, [pc, #40]	; (1000a104 <ble_slave_security_request_handler+0x1dc>)
1000a0dc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0de:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a0e0:	b004      	add	sp, #16
1000a0e2:	bc1c      	pop	{r2, r3, r4}
1000a0e4:	4690      	mov	r8, r2
1000a0e6:	4699      	mov	r9, r3
1000a0e8:	46a2      	mov	sl, r4
1000a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a0ec:	100115ad 	.word	0x100115ad
1000a0f0:	10014ee0 	.word	0x10014ee0
1000a0f4:	1000e07d 	.word	0x1000e07d
1000a0f8:	10012834 	.word	0x10012834
1000a0fc:	10011815 	.word	0x10011815
1000a100:	10012fa8 	.word	0x10012fa8
1000a104:	100116f5 	.word	0x100116f5
1000a108:	10011829 	.word	0x10011829
1000a10c:	1000de91 	.word	0x1000de91
1000a110:	10012fc0 	.word	0x10012fc0

1000a114 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a114:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a116:	465f      	mov	r7, fp
1000a118:	4656      	mov	r6, sl
1000a11a:	464d      	mov	r5, r9
1000a11c:	4644      	mov	r4, r8
1000a11e:	b4f0      	push	{r4, r5, r6, r7}
1000a120:	b085      	sub	sp, #20
1000a122:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a124:	8804      	ldrh	r4, [r0, #0]
1000a126:	4a49      	ldr	r2, [pc, #292]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a128:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a12a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a12c:	8910      	ldrh	r0, [r2, #8]
1000a12e:	42a0      	cmp	r0, r4
1000a130:	d10d      	bne.n	1000a14e <ble_pair_request_handler+0x3a>
1000a132:	0010      	movs	r0, r2
1000a134:	305e      	adds	r0, #94	; 0x5e
1000a136:	7800      	ldrb	r0, [r0, #0]
1000a138:	2802      	cmp	r0, #2
1000a13a:	d108      	bne.n	1000a14e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a13c:	014a      	lsls	r2, r1, #5
1000a13e:	1a52      	subs	r2, r2, r1
1000a140:	0095      	lsls	r5, r2, #2
1000a142:	4a42      	ldr	r2, [pc, #264]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a144:	1952      	adds	r2, r2, r5
1000a146:	325e      	adds	r2, #94	; 0x5e
1000a148:	2103      	movs	r1, #3
1000a14a:	7011      	strb	r1, [r2, #0]
			break;
1000a14c:	e005      	b.n	1000a15a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a14e:	3301      	adds	r3, #1
1000a150:	b2db      	uxtb	r3, r3
1000a152:	3101      	adds	r1, #1
1000a154:	327c      	adds	r2, #124	; 0x7c
1000a156:	2b05      	cmp	r3, #5
1000a158:	d1e8      	bne.n	1000a12c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a15a:	aa01      	add	r2, sp, #4
1000a15c:	2102      	movs	r1, #2
1000a15e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a160:	3901      	subs	r1, #1
1000a162:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a164:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a166:	2100      	movs	r1, #0
1000a168:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a16a:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a16c:	001f      	movs	r7, r3
1000a16e:	015a      	lsls	r2, r3, #5
1000a170:	1ad2      	subs	r2, r2, r3
1000a172:	0092      	lsls	r2, r2, #2
1000a174:	4935      	ldr	r1, [pc, #212]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a176:	5c52      	ldrb	r2, [r2, r1]
1000a178:	2a02      	cmp	r2, #2
1000a17a:	d104      	bne.n	1000a186 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a17c:	aa01      	add	r2, sp, #4
1000a17e:	2103      	movs	r1, #3
1000a180:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a182:	71d1      	strb	r1, [r2, #7]
1000a184:	e003      	b.n	1000a18e <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a186:	aa01      	add	r2, sp, #4
1000a188:	2101      	movs	r1, #1
1000a18a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a18c:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a18e:	aa01      	add	r2, sp, #4
1000a190:	2110      	movs	r1, #16
1000a192:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a194:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a196:	017a      	lsls	r2, r7, #5
1000a198:	1bd2      	subs	r2, r2, r7
1000a19a:	0092      	lsls	r2, r2, #2
1000a19c:	492b      	ldr	r1, [pc, #172]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a19e:	188a      	adds	r2, r1, r2
1000a1a0:	7e12      	ldrb	r2, [r2, #24]
1000a1a2:	2a40      	cmp	r2, #64	; 0x40
1000a1a4:	d131      	bne.n	1000a20a <ble_pair_request_handler+0xf6>
1000a1a6:	015a      	lsls	r2, r3, #5
1000a1a8:	1ad3      	subs	r3, r2, r3
1000a1aa:	009b      	lsls	r3, r3, #2
1000a1ac:	469a      	mov	sl, r3
1000a1ae:	001d      	movs	r5, r3
1000a1b0:	3560      	adds	r5, #96	; 0x60
1000a1b2:	186d      	adds	r5, r5, r1
1000a1b4:	4654      	mov	r4, sl
1000a1b6:	3468      	adds	r4, #104	; 0x68
1000a1b8:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a1ba:	4b25      	ldr	r3, [pc, #148]	; (1000a250 <ble_pair_request_handler+0x13c>)
1000a1bc:	4699      	mov	r9, r3
1000a1be:	260f      	movs	r6, #15
1000a1c0:	47c8      	blx	r9
1000a1c2:	4030      	ands	r0, r6
1000a1c4:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a1c6:	47c8      	blx	r9
1000a1c8:	4030      	ands	r0, r6
1000a1ca:	74a8      	strb	r0, [r5, #18]
1000a1cc:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a1ce:	42a5      	cmp	r5, r4
1000a1d0:	d1f6      	bne.n	1000a1c0 <ble_pair_request_handler+0xac>
1000a1d2:	4655      	mov	r5, sl
1000a1d4:	3570      	adds	r5, #112	; 0x70
1000a1d6:	4a1d      	ldr	r2, [pc, #116]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a1d8:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a1da:	4b1d      	ldr	r3, [pc, #116]	; (1000a250 <ble_pair_request_handler+0x13c>)
1000a1dc:	4699      	mov	r9, r3
1000a1de:	230f      	movs	r3, #15
1000a1e0:	4698      	mov	r8, r3
1000a1e2:	47c8      	blx	r9
1000a1e4:	4643      	mov	r3, r8
1000a1e6:	4018      	ands	r0, r3
1000a1e8:	7020      	strb	r0, [r4, #0]
1000a1ea:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a1ec:	42ac      	cmp	r4, r5
1000a1ee:	d1f8      	bne.n	1000a1e2 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a1f0:	4b17      	ldr	r3, [pc, #92]	; (1000a250 <ble_pair_request_handler+0x13c>)
1000a1f2:	4798      	blx	r3
1000a1f4:	017b      	lsls	r3, r7, #5
1000a1f6:	1bdb      	subs	r3, r3, r7
1000a1f8:	009b      	lsls	r3, r3, #2
1000a1fa:	4a14      	ldr	r2, [pc, #80]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a1fc:	18d3      	adds	r3, r2, r3
1000a1fe:	001a      	movs	r2, r3
1000a200:	3270      	adds	r2, #112	; 0x70
1000a202:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a204:	337a      	adds	r3, #122	; 0x7a
1000a206:	2210      	movs	r2, #16
1000a208:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a20a:	017a      	lsls	r2, r7, #5
1000a20c:	1bd7      	subs	r7, r2, r7
1000a20e:	00bf      	lsls	r7, r7, #2
1000a210:	3760      	adds	r7, #96	; 0x60
1000a212:	4a0e      	ldr	r2, [pc, #56]	; (1000a24c <ble_pair_request_handler+0x138>)
1000a214:	18ba      	adds	r2, r7, r2
1000a216:	465b      	mov	r3, fp
1000a218:	8818      	ldrh	r0, [r3, #0]
1000a21a:	2300      	movs	r3, #0
1000a21c:	a901      	add	r1, sp, #4
1000a21e:	4c0d      	ldr	r4, [pc, #52]	; (1000a254 <ble_pair_request_handler+0x140>)
1000a220:	47a0      	blx	r4
1000a222:	2800      	cmp	r0, #0
1000a224:	d00a      	beq.n	1000a23c <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a226:	ab01      	add	r3, sp, #4
1000a228:	2200      	movs	r2, #0
1000a22a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a22c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a22e:	480a      	ldr	r0, [pc, #40]	; (1000a258 <ble_pair_request_handler+0x144>)
1000a230:	4b0a      	ldr	r3, [pc, #40]	; (1000a25c <ble_pair_request_handler+0x148>)
1000a232:	4798      	blx	r3
1000a234:	480a      	ldr	r0, [pc, #40]	; (1000a260 <ble_pair_request_handler+0x14c>)
1000a236:	4b0b      	ldr	r3, [pc, #44]	; (1000a264 <ble_pair_request_handler+0x150>)
1000a238:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a23a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a23c:	b005      	add	sp, #20
1000a23e:	bc3c      	pop	{r2, r3, r4, r5}
1000a240:	4690      	mov	r8, r2
1000a242:	4699      	mov	r9, r3
1000a244:	46a2      	mov	sl, r4
1000a246:	46ab      	mov	fp, r5
1000a248:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a24a:	46c0      	nop			; (mov r8, r8)
1000a24c:	10014ee0 	.word	0x10014ee0
1000a250:	10011829 	.word	0x10011829
1000a254:	1000de91 	.word	0x1000de91
1000a258:	10012834 	.word	0x10012834
1000a25c:	10011815 	.word	0x10011815
1000a260:	10012fec 	.word	0x10012fec
1000a264:	100116f5 	.word	0x100116f5

1000a268 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a268:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a26a:	b085      	sub	sp, #20
1000a26c:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a26e:	2206      	movs	r2, #6
1000a270:	493d      	ldr	r1, [pc, #244]	; (1000a368 <ble_pair_key_request_handler+0x100>)
1000a272:	a802      	add	r0, sp, #8
1000a274:	4e3d      	ldr	r6, [pc, #244]	; (1000a36c <ble_pair_key_request_handler+0x104>)
1000a276:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a278:	ac01      	add	r4, sp, #4
1000a27a:	2204      	movs	r2, #4
1000a27c:	0029      	movs	r1, r5
1000a27e:	0020      	movs	r0, r4
1000a280:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a282:	78e3      	ldrb	r3, [r4, #3]
1000a284:	2b00      	cmp	r3, #0
1000a286:	d162      	bne.n	1000a34e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a288:	4839      	ldr	r0, [pc, #228]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a28a:	4b3a      	ldr	r3, [pc, #232]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a28c:	4798      	blx	r3
1000a28e:	483a      	ldr	r0, [pc, #232]	; (1000a378 <ble_pair_key_request_handler+0x110>)
1000a290:	4b3a      	ldr	r3, [pc, #232]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a292:	4798      	blx	r3
1000a294:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a296:	4c3a      	ldr	r4, [pc, #232]	; (1000a380 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a298:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a29a:	201e      	movs	r0, #30
1000a29c:	47a0      	blx	r4
1000a29e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a2a0:	2b00      	cmp	r3, #0
1000a2a2:	d11a      	bne.n	1000a2da <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a2a4:	4f32      	ldr	r7, [pc, #200]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a2a6:	0038      	movs	r0, r7
1000a2a8:	4e32      	ldr	r6, [pc, #200]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a2aa:	47b0      	blx	r6
1000a2ac:	4835      	ldr	r0, [pc, #212]	; (1000a384 <ble_pair_key_request_handler+0x11c>)
1000a2ae:	4c33      	ldr	r4, [pc, #204]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a2b0:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a2b2:	0038      	movs	r0, r7
1000a2b4:	47b0      	blx	r6
1000a2b6:	4834      	ldr	r0, [pc, #208]	; (1000a388 <ble_pair_key_request_handler+0x120>)
1000a2b8:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a2ba:	8828      	ldrh	r0, [r5, #0]
1000a2bc:	2113      	movs	r1, #19
1000a2be:	4b33      	ldr	r3, [pc, #204]	; (1000a38c <ble_pair_key_request_handler+0x124>)
1000a2c0:	4798      	blx	r3
1000a2c2:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a2c4:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a2c6:	2b00      	cmp	r3, #0
1000a2c8:	d04c      	beq.n	1000a364 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a2ca:	4829      	ldr	r0, [pc, #164]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a2cc:	4b29      	ldr	r3, [pc, #164]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a2ce:	4798      	blx	r3
1000a2d0:	482f      	ldr	r0, [pc, #188]	; (1000a390 <ble_pair_key_request_handler+0x128>)
1000a2d2:	4b2a      	ldr	r3, [pc, #168]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a2d4:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a2d6:	20e2      	movs	r0, #226	; 0xe2
1000a2d8:	e044      	b.n	1000a364 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a2da:	001a      	movs	r2, r3
1000a2dc:	3a30      	subs	r2, #48	; 0x30
1000a2de:	2a09      	cmp	r2, #9
1000a2e0:	d8db      	bhi.n	1000a29a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a2e2:	aa02      	add	r2, sp, #8
1000a2e4:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a2e6:	4038      	ands	r0, r7
1000a2e8:	4b2a      	ldr	r3, [pc, #168]	; (1000a394 <ble_pair_key_request_handler+0x12c>)
1000a2ea:	4798      	blx	r3
1000a2ec:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a2ee:	2e06      	cmp	r6, #6
1000a2f0:	d026      	beq.n	1000a340 <ble_pair_key_request_handler+0xd8>
1000a2f2:	e7d2      	b.n	1000a29a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a2f4:	481e      	ldr	r0, [pc, #120]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a2f6:	4b1f      	ldr	r3, [pc, #124]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a2f8:	4798      	blx	r3
1000a2fa:	4827      	ldr	r0, [pc, #156]	; (1000a398 <ble_pair_key_request_handler+0x130>)
1000a2fc:	4b1f      	ldr	r3, [pc, #124]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a2fe:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a300:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a302:	4e24      	ldr	r6, [pc, #144]	; (1000a394 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a304:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a306:	5ce0      	ldrb	r0, [r4, r3]
1000a308:	47b0      	blx	r6
1000a30a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a30c:	2c06      	cmp	r4, #6
1000a30e:	d1f9      	bne.n	1000a304 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000a310:	ab01      	add	r3, sp, #4
1000a312:	7899      	ldrb	r1, [r3, #2]
1000a314:	8828      	ldrh	r0, [r5, #0]
1000a316:	aa02      	add	r2, sp, #8
1000a318:	4b20      	ldr	r3, [pc, #128]	; (1000a39c <ble_pair_key_request_handler+0x134>)
1000a31a:	4798      	blx	r3
1000a31c:	2800      	cmp	r0, #0
1000a31e:	d021      	beq.n	1000a364 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a320:	4813      	ldr	r0, [pc, #76]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a322:	4b14      	ldr	r3, [pc, #80]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a324:	4798      	blx	r3
1000a326:	481e      	ldr	r0, [pc, #120]	; (1000a3a0 <ble_pair_key_request_handler+0x138>)
1000a328:	4b14      	ldr	r3, [pc, #80]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a32a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a32c:	2000      	movs	r0, #0
1000a32e:	e019      	b.n	1000a364 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a330:	480f      	ldr	r0, [pc, #60]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a332:	4b10      	ldr	r3, [pc, #64]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a334:	4798      	blx	r3
1000a336:	481b      	ldr	r0, [pc, #108]	; (1000a3a4 <ble_pair_key_request_handler+0x13c>)
1000a338:	4b10      	ldr	r3, [pc, #64]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a33a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a33c:	2000      	movs	r0, #0
1000a33e:	e011      	b.n	1000a364 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a340:	480b      	ldr	r0, [pc, #44]	; (1000a370 <ble_pair_key_request_handler+0x108>)
1000a342:	4b0c      	ldr	r3, [pc, #48]	; (1000a374 <ble_pair_key_request_handler+0x10c>)
1000a344:	4798      	blx	r3
1000a346:	4818      	ldr	r0, [pc, #96]	; (1000a3a8 <ble_pair_key_request_handler+0x140>)
1000a348:	4b0c      	ldr	r3, [pc, #48]	; (1000a37c <ble_pair_key_request_handler+0x114>)
1000a34a:	4798      	blx	r3
1000a34c:	e7d8      	b.n	1000a300 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a34e:	ab01      	add	r3, sp, #4
1000a350:	885a      	ldrh	r2, [r3, #2]
1000a352:	2380      	movs	r3, #128	; 0x80
1000a354:	005b      	lsls	r3, r3, #1
1000a356:	429a      	cmp	r2, r3
1000a358:	d0cc      	beq.n	1000a2f4 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a35a:	ab01      	add	r3, sp, #4
1000a35c:	789b      	ldrb	r3, [r3, #2]
1000a35e:	2b01      	cmp	r3, #1
1000a360:	d0e6      	beq.n	1000a330 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a362:	2000      	movs	r0, #0
}
1000a364:	b005      	add	sp, #20
1000a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a368:	10012da0 	.word	0x10012da0
1000a36c:	1001159b 	.word	0x1001159b
1000a370:	10012834 	.word	0x10012834
1000a374:	10011815 	.word	0x10011815
1000a378:	10013014 	.word	0x10013014
1000a37c:	100116f5 	.word	0x100116f5
1000a380:	1000ae81 	.word	0x1000ae81
1000a384:	1001303c 	.word	0x1001303c
1000a388:	10013048 	.word	0x10013048
1000a38c:	1000db25 	.word	0x1000db25
1000a390:	10012f30 	.word	0x10012f30
1000a394:	10011729 	.word	0x10011729
1000a398:	1001305c 	.word	0x1001305c
1000a39c:	1000dfc1 	.word	0x1000dfc1
1000a3a0:	10013094 	.word	0x10013094
1000a3a4:	100130ac 	.word	0x100130ac
1000a3a8:	100130c8 	.word	0x100130c8

1000a3ac <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3ae:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3b0:	8805      	ldrh	r5, [r0, #0]
1000a3b2:	4b2f      	ldr	r3, [pc, #188]	; (1000a470 <ble_encryption_request_handler+0xc4>)
1000a3b4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3b6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3b8:	0010      	movs	r0, r2
1000a3ba:	8919      	ldrh	r1, [r3, #8]
1000a3bc:	42a9      	cmp	r1, r5
1000a3be:	d116      	bne.n	1000a3ee <ble_encryption_request_handler+0x42>
1000a3c0:	0019      	movs	r1, r3
1000a3c2:	315e      	adds	r1, #94	; 0x5e
1000a3c4:	7809      	ldrb	r1, [r1, #0]
1000a3c6:	2901      	cmp	r1, #1
1000a3c8:	d911      	bls.n	1000a3ee <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a3ca:	4929      	ldr	r1, [pc, #164]	; (1000a470 <ble_encryption_request_handler+0xc4>)
1000a3cc:	0152      	lsls	r2, r2, #5
1000a3ce:	1a10      	subs	r0, r2, r0
1000a3d0:	0080      	lsls	r0, r0, #2
1000a3d2:	1808      	adds	r0, r1, r0
1000a3d4:	305e      	adds	r0, #94	; 0x5e
1000a3d6:	2306      	movs	r3, #6
1000a3d8:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a3da:	0162      	lsls	r2, r4, #5
1000a3dc:	1b13      	subs	r3, r2, r4
1000a3de:	009b      	lsls	r3, r3, #2
1000a3e0:	18cb      	adds	r3, r1, r3
1000a3e2:	3370      	adds	r3, #112	; 0x70
1000a3e4:	881a      	ldrh	r2, [r3, #0]
1000a3e6:	8873      	ldrh	r3, [r6, #2]
1000a3e8:	429a      	cmp	r2, r3
1000a3ea:	d113      	bne.n	1000a414 <ble_encryption_request_handler+0x68>
1000a3ec:	e006      	b.n	1000a3fc <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3ee:	3401      	adds	r4, #1
1000a3f0:	b2e4      	uxtb	r4, r4
1000a3f2:	3201      	adds	r2, #1
1000a3f4:	337c      	adds	r3, #124	; 0x7c
1000a3f6:	2c05      	cmp	r4, #5
1000a3f8:	d1de      	bne.n	1000a3b8 <ble_encryption_request_handler+0xc>
1000a3fa:	e00b      	b.n	1000a414 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a3fc:	0161      	lsls	r1, r4, #5
1000a3fe:	1b09      	subs	r1, r1, r4
1000a400:	0089      	lsls	r1, r1, #2
1000a402:	4b1b      	ldr	r3, [pc, #108]	; (1000a470 <ble_encryption_request_handler+0xc4>)
1000a404:	1859      	adds	r1, r3, r1
1000a406:	3172      	adds	r1, #114	; 0x72
1000a408:	1d30      	adds	r0, r6, #4
1000a40a:	2208      	movs	r2, #8
1000a40c:	4b19      	ldr	r3, [pc, #100]	; (1000a474 <ble_encryption_request_handler+0xc8>)
1000a40e:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a410:	2800      	cmp	r0, #0
1000a412:	d015      	beq.n	1000a440 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a414:	4f18      	ldr	r7, [pc, #96]	; (1000a478 <ble_encryption_request_handler+0xcc>)
1000a416:	0038      	movs	r0, r7
1000a418:	4e18      	ldr	r6, [pc, #96]	; (1000a47c <ble_encryption_request_handler+0xd0>)
1000a41a:	47b0      	blx	r6
1000a41c:	4818      	ldr	r0, [pc, #96]	; (1000a480 <ble_encryption_request_handler+0xd4>)
1000a41e:	4d19      	ldr	r5, [pc, #100]	; (1000a484 <ble_encryption_request_handler+0xd8>)
1000a420:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a422:	0038      	movs	r0, r7
1000a424:	47b0      	blx	r6
1000a426:	4818      	ldr	r0, [pc, #96]	; (1000a488 <ble_encryption_request_handler+0xdc>)
1000a428:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a42a:	0163      	lsls	r3, r4, #5
1000a42c:	1b1c      	subs	r4, r3, r4
1000a42e:	00a4      	lsls	r4, r4, #2
1000a430:	4b0f      	ldr	r3, [pc, #60]	; (1000a470 <ble_encryption_request_handler+0xc4>)
1000a432:	191c      	adds	r4, r3, r4
1000a434:	8920      	ldrh	r0, [r4, #8]
1000a436:	2105      	movs	r1, #5
1000a438:	4b14      	ldr	r3, [pc, #80]	; (1000a48c <ble_encryption_request_handler+0xe0>)
1000a43a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a43c:	20e2      	movs	r0, #226	; 0xe2
1000a43e:	e016      	b.n	1000a46e <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a440:	0162      	lsls	r2, r4, #5
1000a442:	1b13      	subs	r3, r2, r4
1000a444:	009b      	lsls	r3, r3, #2
1000a446:	3360      	adds	r3, #96	; 0x60
1000a448:	4909      	ldr	r1, [pc, #36]	; (1000a470 <ble_encryption_request_handler+0xc4>)
1000a44a:	185b      	adds	r3, r3, r1
1000a44c:	1b14      	subs	r4, r2, r4
1000a44e:	00a4      	lsls	r4, r4, #2
1000a450:	190c      	adds	r4, r1, r4
1000a452:	7d21      	ldrb	r1, [r4, #20]
1000a454:	8830      	ldrh	r0, [r6, #0]
1000a456:	2201      	movs	r2, #1
1000a458:	4c0d      	ldr	r4, [pc, #52]	; (1000a490 <ble_encryption_request_handler+0xe4>)
1000a45a:	47a0      	blx	r4
1000a45c:	2800      	cmp	r0, #0
1000a45e:	d006      	beq.n	1000a46e <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a460:	4805      	ldr	r0, [pc, #20]	; (1000a478 <ble_encryption_request_handler+0xcc>)
1000a462:	4b06      	ldr	r3, [pc, #24]	; (1000a47c <ble_encryption_request_handler+0xd0>)
1000a464:	4798      	blx	r3
1000a466:	480b      	ldr	r0, [pc, #44]	; (1000a494 <ble_encryption_request_handler+0xe8>)
1000a468:	4b06      	ldr	r3, [pc, #24]	; (1000a484 <ble_encryption_request_handler+0xd8>)
1000a46a:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a46c:	2000      	movs	r0, #0
}
1000a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a470:	10014ee0 	.word	0x10014ee0
1000a474:	1001157d 	.word	0x1001157d
1000a478:	10012834 	.word	0x10012834
1000a47c:	10011815 	.word	0x10011815
1000a480:	100130dc 	.word	0x100130dc
1000a484:	100116f5 	.word	0x100116f5
1000a488:	10013114 	.word	0x10013114
1000a48c:	1000db25 	.word	0x1000db25
1000a490:	1000e0f5 	.word	0x1000e0f5
1000a494:	1001316c 	.word	0x1001316c

1000a498 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a498:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a49a:	2a00      	cmp	r2, #0
1000a49c:	d047      	beq.n	1000a52e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a49e:	2906      	cmp	r1, #6
1000a4a0:	d847      	bhi.n	1000a532 <ble_mgr_events_callback_handler+0x9a>
1000a4a2:	0089      	lsls	r1, r1, #2
1000a4a4:	4b28      	ldr	r3, [pc, #160]	; (1000a548 <ble_mgr_events_callback_handler+0xb0>)
1000a4a6:	585b      	ldr	r3, [r3, r1]
1000a4a8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a4aa:	4b28      	ldr	r3, [pc, #160]	; (1000a54c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a4ac:	2405      	movs	r4, #5
1000a4ae:	e00a      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a4b0:	4b27      	ldr	r3, [pc, #156]	; (1000a550 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a4b2:	2401      	movs	r4, #1
			}
			break;
1000a4b4:	e007      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a4b6:	4b27      	ldr	r3, [pc, #156]	; (1000a554 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a4b8:	2405      	movs	r4, #5
			}
			break;
1000a4ba:	e004      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a4bc:	4b26      	ldr	r3, [pc, #152]	; (1000a558 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a4be:	2401      	movs	r4, #1
			}
			break;
1000a4c0:	e001      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a4c2:	4b26      	ldr	r3, [pc, #152]	; (1000a55c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a4c4:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a4c6:	2800      	cmp	r0, #0
1000a4c8:	d116      	bne.n	1000a4f8 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a4ca:	6819      	ldr	r1, [r3, #0]
1000a4cc:	2900      	cmp	r1, #0
1000a4ce:	d10b      	bne.n	1000a4e8 <ble_mgr_events_callback_handler+0x50>
1000a4d0:	e006      	b.n	1000a4e0 <ble_mgr_events_callback_handler+0x48>
1000a4d2:	001d      	movs	r5, r3
1000a4d4:	3304      	adds	r3, #4
1000a4d6:	1f18      	subs	r0, r3, #4
1000a4d8:	6800      	ldr	r0, [r0, #0]
1000a4da:	2800      	cmp	r0, #0
1000a4dc:	d106      	bne.n	1000a4ec <ble_mgr_events_callback_handler+0x54>
1000a4de:	e000      	b.n	1000a4e2 <ble_mgr_events_callback_handler+0x4a>
1000a4e0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a4e2:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a4e4:	2101      	movs	r1, #1
						break;
1000a4e6:	e02c      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
1000a4e8:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a4ea:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a4ec:	3101      	adds	r1, #1
1000a4ee:	b2c9      	uxtb	r1, r1
1000a4f0:	42a1      	cmp	r1, r4
1000a4f2:	d3ee      	bcc.n	1000a4d2 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a4f4:	2100      	movs	r1, #0
1000a4f6:	e024      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
1000a4f8:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a4fa:	2801      	cmp	r0, #1
1000a4fc:	d121      	bne.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a4fe:	6819      	ldr	r1, [r3, #0]
1000a500:	428a      	cmp	r2, r1
1000a502:	d10c      	bne.n	1000a51e <ble_mgr_events_callback_handler+0x86>
1000a504:	e006      	b.n	1000a514 <ble_mgr_events_callback_handler+0x7c>
1000a506:	001d      	movs	r5, r3
1000a508:	3304      	adds	r3, #4
1000a50a:	1f18      	subs	r0, r3, #4
1000a50c:	6800      	ldr	r0, [r0, #0]
1000a50e:	4282      	cmp	r2, r0
1000a510:	d107      	bne.n	1000a522 <ble_mgr_events_callback_handler+0x8a>
1000a512:	e000      	b.n	1000a516 <ble_mgr_events_callback_handler+0x7e>
1000a514:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a516:	2300      	movs	r3, #0
1000a518:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a51a:	2101      	movs	r1, #1
						break;
1000a51c:	e011      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
1000a51e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a520:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a522:	3101      	adds	r1, #1
1000a524:	b2c9      	uxtb	r1, r1
1000a526:	42a1      	cmp	r1, r4
1000a528:	d3ed      	bcc.n	1000a506 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a52a:	2100      	movs	r1, #0
1000a52c:	e009      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a52e:	2100      	movs	r1, #0
1000a530:	e007      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a532:	2100      	movs	r1, #0
1000a534:	e005      	b.n	1000a542 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a536:	4b0a      	ldr	r3, [pc, #40]	; (1000a560 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a538:	2405      	movs	r4, #5
1000a53a:	e7c4      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a53c:	4b09      	ldr	r3, [pc, #36]	; (1000a564 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a53e:	2401      	movs	r4, #1
1000a540:	e7c1      	b.n	1000a4c6 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a542:	0008      	movs	r0, r1
1000a544:	bd30      	pop	{r4, r5, pc}
1000a546:	46c0      	nop			; (mov r8, r8)
1000a548:	10012c94 	.word	0x10012c94
1000a54c:	10014ecc 	.word	0x10014ecc
1000a550:	10014ec8 	.word	0x10014ec8
1000a554:	10015150 	.word	0x10015150
1000a558:	10015704 	.word	0x10015704
1000a55c:	10015164 	.word	0x10015164
1000a560:	10015178 	.word	0x10015178
1000a564:	100151c0 	.word	0x100151c0

1000a568 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a56a:	465f      	mov	r7, fp
1000a56c:	4656      	mov	r6, sl
1000a56e:	464d      	mov	r5, r9
1000a570:	4644      	mov	r4, r8
1000a572:	b4f0      	push	{r4, r5, r6, r7}
1000a574:	b091      	sub	sp, #68	; 0x44
1000a576:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a578:	2400      	movs	r4, #0
1000a57a:	4b7a      	ldr	r3, [pc, #488]	; (1000a764 <ble_device_init+0x1fc>)
1000a57c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a57e:	2207      	movs	r2, #7
1000a580:	2100      	movs	r1, #0
1000a582:	4879      	ldr	r0, [pc, #484]	; (1000a768 <ble_device_init+0x200>)
1000a584:	4e79      	ldr	r6, [pc, #484]	; (1000a76c <ble_device_init+0x204>)
1000a586:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a588:	2212      	movs	r2, #18
1000a58a:	2100      	movs	r1, #0
1000a58c:	4878      	ldr	r0, [pc, #480]	; (1000a770 <ble_device_init+0x208>)
1000a58e:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a590:	4b78      	ldr	r3, [pc, #480]	; (1000a774 <ble_device_init+0x20c>)
1000a592:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a594:	22cd      	movs	r2, #205	; 0xcd
1000a596:	0092      	lsls	r2, r2, #2
1000a598:	2100      	movs	r1, #0
1000a59a:	4877      	ldr	r0, [pc, #476]	; (1000a778 <ble_device_init+0x210>)
1000a59c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a59e:	4b77      	ldr	r3, [pc, #476]	; (1000a77c <ble_device_init+0x214>)
1000a5a0:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a5a2:	2283      	movs	r2, #131	; 0x83
1000a5a4:	0092      	lsls	r2, r2, #2
1000a5a6:	2100      	movs	r1, #0
1000a5a8:	4875      	ldr	r0, [pc, #468]	; (1000a780 <ble_device_init+0x218>)
1000a5aa:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a5ac:	4b75      	ldr	r3, [pc, #468]	; (1000a784 <ble_device_init+0x21c>)
1000a5ae:	469b      	mov	fp, r3
1000a5b0:	2380      	movs	r3, #128	; 0x80
1000a5b2:	00db      	lsls	r3, r3, #3
1000a5b4:	469a      	mov	sl, r3
1000a5b6:	001a      	movs	r2, r3
1000a5b8:	2100      	movs	r1, #0
1000a5ba:	4658      	mov	r0, fp
1000a5bc:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a5be:	4b72      	ldr	r3, [pc, #456]	; (1000a788 <ble_device_init+0x220>)
1000a5c0:	4699      	mov	r9, r3
1000a5c2:	2380      	movs	r3, #128	; 0x80
1000a5c4:	015b      	lsls	r3, r3, #5
1000a5c6:	4698      	mov	r8, r3
1000a5c8:	001a      	movs	r2, r3
1000a5ca:	2100      	movs	r1, #0
1000a5cc:	4648      	mov	r0, r9
1000a5ce:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a5d0:	4f6e      	ldr	r7, [pc, #440]	; (1000a78c <ble_device_init+0x224>)
1000a5d2:	221c      	movs	r2, #28
1000a5d4:	2100      	movs	r1, #0
1000a5d6:	0038      	movs	r0, r7
1000a5d8:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a5da:	465b      	mov	r3, fp
1000a5dc:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a5de:	4653      	mov	r3, sl
1000a5e0:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a5e2:	464b      	mov	r3, r9
1000a5e4:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a5e6:	4643      	mov	r3, r8
1000a5e8:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a5ea:	4b69      	ldr	r3, [pc, #420]	; (1000a790 <ble_device_init+0x228>)
1000a5ec:	601c      	str	r4, [r3, #0]
1000a5ee:	605c      	str	r4, [r3, #4]
1000a5f0:	609c      	str	r4, [r3, #8]
1000a5f2:	60dc      	str	r4, [r3, #12]
1000a5f4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a5f6:	4b67      	ldr	r3, [pc, #412]	; (1000a794 <ble_device_init+0x22c>)
1000a5f8:	601c      	str	r4, [r3, #0]
1000a5fa:	605c      	str	r4, [r3, #4]
1000a5fc:	609c      	str	r4, [r3, #8]
1000a5fe:	60dc      	str	r4, [r3, #12]
1000a600:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a602:	4b65      	ldr	r3, [pc, #404]	; (1000a798 <ble_device_init+0x230>)
1000a604:	601c      	str	r4, [r3, #0]
1000a606:	605c      	str	r4, [r3, #4]
1000a608:	609c      	str	r4, [r3, #8]
1000a60a:	60dc      	str	r4, [r3, #12]
1000a60c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a60e:	4b63      	ldr	r3, [pc, #396]	; (1000a79c <ble_device_init+0x234>)
1000a610:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a612:	4b63      	ldr	r3, [pc, #396]	; (1000a7a0 <ble_device_init+0x238>)
1000a614:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a616:	4b63      	ldr	r3, [pc, #396]	; (1000a7a4 <ble_device_init+0x23c>)
1000a618:	601c      	str	r4, [r3, #0]
1000a61a:	605c      	str	r4, [r3, #4]
1000a61c:	609c      	str	r4, [r3, #8]
1000a61e:	60dc      	str	r4, [r3, #12]
1000a620:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a622:	4b61      	ldr	r3, [pc, #388]	; (1000a7a8 <ble_device_init+0x240>)
1000a624:	601c      	str	r4, [r3, #0]
1000a626:	4c61      	ldr	r4, [pc, #388]	; (1000a7ac <ble_device_init+0x244>)
1000a628:	239b      	movs	r3, #155	; 0x9b
1000a62a:	009b      	lsls	r3, r3, #2
1000a62c:	4698      	mov	r8, r3
1000a62e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a630:	4f4e      	ldr	r7, [pc, #312]	; (1000a76c <ble_device_init+0x204>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a632:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a634:	227c      	movs	r2, #124	; 0x7c
1000a636:	2100      	movs	r1, #0
1000a638:	0020      	movs	r0, r4
1000a63a:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a63c:	0023      	movs	r3, r4
1000a63e:	335e      	adds	r3, #94	; 0x5e
1000a640:	2200      	movs	r2, #0
1000a642:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a644:	7626      	strb	r6, [r4, #24]
1000a646:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a648:	45a0      	cmp	r8, r4
1000a64a:	d1f3      	bne.n	1000a634 <ble_device_init+0xcc>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a64c:	4b58      	ldr	r3, [pc, #352]	; (1000a7b0 <ble_device_init+0x248>)
1000a64e:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a650:	4858      	ldr	r0, [pc, #352]	; (1000a7b4 <ble_device_init+0x24c>)
1000a652:	4b59      	ldr	r3, [pc, #356]	; (1000a7b8 <ble_device_init+0x250>)
1000a654:	4798      	blx	r3
1000a656:	4859      	ldr	r0, [pc, #356]	; (1000a7bc <ble_device_init+0x254>)
1000a658:	4b59      	ldr	r3, [pc, #356]	; (1000a7c0 <ble_device_init+0x258>)
1000a65a:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a65c:	484b      	ldr	r0, [pc, #300]	; (1000a78c <ble_device_init+0x224>)
1000a65e:	4b59      	ldr	r3, [pc, #356]	; (1000a7c4 <ble_device_init+0x25c>)
1000a660:	4798      	blx	r3
1000a662:	2800      	cmp	r0, #0
1000a664:	d00b      	beq.n	1000a67e <ble_device_init+0x116>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a666:	4e53      	ldr	r6, [pc, #332]	; (1000a7b4 <ble_device_init+0x24c>)
1000a668:	0030      	movs	r0, r6
1000a66a:	4d53      	ldr	r5, [pc, #332]	; (1000a7b8 <ble_device_init+0x250>)
1000a66c:	47a8      	blx	r5
1000a66e:	4856      	ldr	r0, [pc, #344]	; (1000a7c8 <ble_device_init+0x260>)
1000a670:	4c53      	ldr	r4, [pc, #332]	; (1000a7c0 <ble_device_init+0x258>)
1000a672:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a674:	0030      	movs	r0, r6
1000a676:	47a8      	blx	r5
1000a678:	4854      	ldr	r0, [pc, #336]	; (1000a7cc <ble_device_init+0x264>)
1000a67a:	47a0      	blx	r4
1000a67c:	e7fe      	b.n	1000a67c <ble_device_init+0x114>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a67e:	4a54      	ldr	r2, [pc, #336]	; (1000a7d0 <ble_device_init+0x268>)
1000a680:	2100      	movs	r1, #0
1000a682:	2000      	movs	r0, #0
1000a684:	4c53      	ldr	r4, [pc, #332]	; (1000a7d4 <ble_device_init+0x26c>)
1000a686:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a688:	4a53      	ldr	r2, [pc, #332]	; (1000a7d8 <ble_device_init+0x270>)
1000a68a:	2102      	movs	r1, #2
1000a68c:	2000      	movs	r0, #0
1000a68e:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a690:	2109      	movs	r1, #9
1000a692:	4852      	ldr	r0, [pc, #328]	; (1000a7dc <ble_device_init+0x274>)
1000a694:	4b52      	ldr	r3, [pc, #328]	; (1000a7e0 <ble_device_init+0x278>)
1000a696:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a698:	2800      	cmp	r0, #0
1000a69a:	d005      	beq.n	1000a6a8 <ble_device_init+0x140>
	{
		DBG_LOG("Device name set failed");
1000a69c:	4845      	ldr	r0, [pc, #276]	; (1000a7b4 <ble_device_init+0x24c>)
1000a69e:	4b46      	ldr	r3, [pc, #280]	; (1000a7b8 <ble_device_init+0x250>)
1000a6a0:	4798      	blx	r3
1000a6a2:	4850      	ldr	r0, [pc, #320]	; (1000a7e4 <ble_device_init+0x27c>)
1000a6a4:	4b46      	ldr	r3, [pc, #280]	; (1000a7c0 <ble_device_init+0x258>)
1000a6a6:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a6a8:	2207      	movs	r2, #7
1000a6aa:	494f      	ldr	r1, [pc, #316]	; (1000a7e8 <ble_device_init+0x280>)
1000a6ac:	3108      	adds	r1, #8
1000a6ae:	a804      	add	r0, sp, #16
1000a6b0:	4b4e      	ldr	r3, [pc, #312]	; (1000a7ec <ble_device_init+0x284>)
1000a6b2:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a6b4:	2226      	movs	r2, #38	; 0x26
1000a6b6:	2100      	movs	r1, #0
1000a6b8:	a806      	add	r0, sp, #24
1000a6ba:	4b2c      	ldr	r3, [pc, #176]	; (1000a76c <ble_device_init+0x204>)
1000a6bc:	4798      	blx	r3
	
	if (addr == NULL)
1000a6be:	2d00      	cmp	r5, #0
1000a6c0:	d10c      	bne.n	1000a6dc <ble_device_init+0x174>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a6c2:	a804      	add	r0, sp, #16
1000a6c4:	4b4a      	ldr	r3, [pc, #296]	; (1000a7f0 <ble_device_init+0x288>)
1000a6c6:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a6c8:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a6ca:	2800      	cmp	r0, #0
1000a6cc:	d006      	beq.n	1000a6dc <ble_device_init+0x174>
		{
			DBG_LOG("BD address get failed");
1000a6ce:	4839      	ldr	r0, [pc, #228]	; (1000a7b4 <ble_device_init+0x24c>)
1000a6d0:	4b39      	ldr	r3, [pc, #228]	; (1000a7b8 <ble_device_init+0x250>)
1000a6d2:	4798      	blx	r3
1000a6d4:	4847      	ldr	r0, [pc, #284]	; (1000a7f4 <ble_device_init+0x28c>)
1000a6d6:	4b3a      	ldr	r3, [pc, #232]	; (1000a7c0 <ble_device_init+0x258>)
1000a6d8:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a6da:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a6dc:	4835      	ldr	r0, [pc, #212]	; (1000a7b4 <ble_device_init+0x24c>)
1000a6de:	4b36      	ldr	r3, [pc, #216]	; (1000a7b8 <ble_device_init+0x250>)
1000a6e0:	4798      	blx	r3
1000a6e2:	792b      	ldrb	r3, [r5, #4]
1000a6e4:	796a      	ldrb	r2, [r5, #5]
1000a6e6:	79a9      	ldrb	r1, [r5, #6]
1000a6e8:	7828      	ldrb	r0, [r5, #0]
1000a6ea:	9003      	str	r0, [sp, #12]
1000a6ec:	7868      	ldrb	r0, [r5, #1]
1000a6ee:	9002      	str	r0, [sp, #8]
1000a6f0:	78a8      	ldrb	r0, [r5, #2]
1000a6f2:	9001      	str	r0, [sp, #4]
1000a6f4:	78e8      	ldrb	r0, [r5, #3]
1000a6f6:	9000      	str	r0, [sp, #0]
1000a6f8:	483f      	ldr	r0, [pc, #252]	; (1000a7f8 <ble_device_init+0x290>)
1000a6fa:	4c31      	ldr	r4, [pc, #196]	; (1000a7c0 <ble_device_init+0x258>)
1000a6fc:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a6fe:	ac06      	add	r4, sp, #24
1000a700:	230a      	movs	r3, #10
1000a702:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a704:	4b3d      	ldr	r3, [pc, #244]	; (1000a7fc <ble_device_init+0x294>)
1000a706:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a708:	2207      	movs	r2, #7
1000a70a:	0029      	movs	r1, r5
1000a70c:	a807      	add	r0, sp, #28
1000a70e:	4b37      	ldr	r3, [pc, #220]	; (1000a7ec <ble_device_init+0x284>)
1000a710:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a712:	2300      	movs	r3, #0
1000a714:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a716:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a718:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a71a:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a71c:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a71e:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a720:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a722:	2380      	movs	r3, #128	; 0x80
1000a724:	009b      	lsls	r3, r3, #2
1000a726:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a728:	0020      	movs	r0, r4
1000a72a:	4b35      	ldr	r3, [pc, #212]	; (1000a800 <ble_device_init+0x298>)
1000a72c:	4798      	blx	r3
1000a72e:	2800      	cmp	r0, #0
1000a730:	d005      	beq.n	1000a73e <ble_device_init+0x1d6>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a732:	4820      	ldr	r0, [pc, #128]	; (1000a7b4 <ble_device_init+0x24c>)
1000a734:	4b20      	ldr	r3, [pc, #128]	; (1000a7b8 <ble_device_init+0x250>)
1000a736:	4798      	blx	r3
1000a738:	4832      	ldr	r0, [pc, #200]	; (1000a804 <ble_device_init+0x29c>)
1000a73a:	4b21      	ldr	r3, [pc, #132]	; (1000a7c0 <ble_device_init+0x258>)
1000a73c:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a73e:	0028      	movs	r0, r5
1000a740:	4b31      	ldr	r3, [pc, #196]	; (1000a808 <ble_device_init+0x2a0>)
1000a742:	4798      	blx	r3
1000a744:	2800      	cmp	r0, #0
1000a746:	d005      	beq.n	1000a754 <ble_device_init+0x1ec>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a748:	481a      	ldr	r0, [pc, #104]	; (1000a7b4 <ble_device_init+0x24c>)
1000a74a:	4b1b      	ldr	r3, [pc, #108]	; (1000a7b8 <ble_device_init+0x250>)
1000a74c:	4798      	blx	r3
1000a74e:	482f      	ldr	r0, [pc, #188]	; (1000a80c <ble_device_init+0x2a4>)
1000a750:	4b1b      	ldr	r3, [pc, #108]	; (1000a7c0 <ble_device_init+0x258>)
1000a752:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a754:	b011      	add	sp, #68	; 0x44
1000a756:	bc3c      	pop	{r2, r3, r4, r5}
1000a758:	4690      	mov	r8, r2
1000a75a:	4699      	mov	r9, r3
1000a75c:	46a2      	mov	sl, r4
1000a75e:	46ab      	mov	fp, r5
1000a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a762:	46c0      	nop			; (mov r8, r8)
1000a764:	10014cf8 	.word	0x10014cf8
1000a768:	10014d00 	.word	0x10014d00
1000a76c:	100115ad 	.word	0x100115ad
1000a770:	1001518c 	.word	0x1001518c
1000a774:	10014cfc 	.word	0x10014cfc
1000a778:	100151c4 	.word	0x100151c4
1000a77c:	100151bc 	.word	0x100151bc
1000a780:	100154f8 	.word	0x100154f8
1000a784:	100138f8 	.word	0x100138f8
1000a788:	10013cf8 	.word	0x10013cf8
1000a78c:	100151a0 	.word	0x100151a0
1000a790:	10015164 	.word	0x10015164
1000a794:	10015178 	.word	0x10015178
1000a798:	10014ecc 	.word	0x10014ecc
1000a79c:	100151c0 	.word	0x100151c0
1000a7a0:	10014ec8 	.word	0x10014ec8
1000a7a4:	10015150 	.word	0x10015150
1000a7a8:	10015704 	.word	0x10015704
1000a7ac:	10014ee0 	.word	0x10014ee0
1000a7b0:	1001514c 	.word	0x1001514c
1000a7b4:	10012834 	.word	0x10012834
1000a7b8:	10011815 	.word	0x10011815
1000a7bc:	1001318c 	.word	0x1001318c
1000a7c0:	100116f5 	.word	0x100116f5
1000a7c4:	1000d8fd 	.word	0x1000d8fd
1000a7c8:	100131a0 	.word	0x100131a0
1000a7cc:	100131c0 	.word	0x100131c0
1000a7d0:	100133f8 	.word	0x100133f8
1000a7d4:	1000a499 	.word	0x1000a499
1000a7d8:	10012dbc 	.word	0x10012dbc
1000a7dc:	100131fc 	.word	0x100131fc
1000a7e0:	1000d815 	.word	0x1000d815
1000a7e4:	10013208 	.word	0x10013208
1000a7e8:	10012da0 	.word	0x10012da0
1000a7ec:	1001159b 	.word	0x1001159b
1000a7f0:	1000d849 	.word	0x1000d849
1000a7f4:	10013220 	.word	0x10013220
1000a7f8:	10013238 	.word	0x10013238
1000a7fc:	00003a98 	.word	0x00003a98
1000a800:	1000d86d 	.word	0x1000d86d
1000a804:	10013270 	.word	0x10013270
1000a808:	1000dab1 	.word	0x1000dab1
1000a80c:	10013294 	.word	0x10013294

1000a810 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a810:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a812:	2201      	movs	r2, #1
1000a814:	2101      	movs	r1, #1
1000a816:	4b06      	ldr	r3, [pc, #24]	; (1000a830 <ble_send_slave_sec_request+0x20>)
1000a818:	4798      	blx	r3
1000a81a:	2800      	cmp	r0, #0
1000a81c:	d006      	beq.n	1000a82c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a81e:	4805      	ldr	r0, [pc, #20]	; (1000a834 <ble_send_slave_sec_request+0x24>)
1000a820:	4b05      	ldr	r3, [pc, #20]	; (1000a838 <ble_send_slave_sec_request+0x28>)
1000a822:	4798      	blx	r3
1000a824:	4805      	ldr	r0, [pc, #20]	; (1000a83c <ble_send_slave_sec_request+0x2c>)
1000a826:	4b06      	ldr	r3, [pc, #24]	; (1000a840 <ble_send_slave_sec_request+0x30>)
1000a828:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a82a:	20e2      	movs	r0, #226	; 0xe2
}
1000a82c:	bd10      	pop	{r4, pc}
1000a82e:	46c0      	nop			; (mov r8, r8)
1000a830:	1000e03d 	.word	0x1000e03d
1000a834:	10012834 	.word	0x10012834
1000a838:	10011815 	.word	0x10011815
1000a83c:	100132d0 	.word	0x100132d0
1000a840:	100116f5 	.word	0x100116f5

1000a844 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a844:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a846:	465f      	mov	r7, fp
1000a848:	464e      	mov	r6, r9
1000a84a:	4645      	mov	r5, r8
1000a84c:	b4e0      	push	{r5, r6, r7}
1000a84e:	b09a      	sub	sp, #104	; 0x68
1000a850:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a852:	7a86      	ldrb	r6, [r0, #10]
1000a854:	2e00      	cmp	r6, #0
1000a856:	d000      	beq.n	1000a85a <ble_connected_state_handler+0x16>
1000a858:	e0c6      	b.n	1000a9e8 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a85a:	4875      	ldr	r0, [pc, #468]	; (1000aa30 <ble_connected_state_handler+0x1ec>)
1000a85c:	4f75      	ldr	r7, [pc, #468]	; (1000aa34 <ble_connected_state_handler+0x1f0>)
1000a85e:	47b8      	blx	r7
1000a860:	792b      	ldrb	r3, [r5, #4]
1000a862:	796a      	ldrb	r2, [r5, #5]
1000a864:	79a9      	ldrb	r1, [r5, #6]
1000a866:	7868      	ldrb	r0, [r5, #1]
1000a868:	9002      	str	r0, [sp, #8]
1000a86a:	78a8      	ldrb	r0, [r5, #2]
1000a86c:	9001      	str	r0, [sp, #4]
1000a86e:	78e8      	ldrb	r0, [r5, #3]
1000a870:	9000      	str	r0, [sp, #0]
1000a872:	4871      	ldr	r0, [pc, #452]	; (1000aa38 <ble_connected_state_handler+0x1f4>)
1000a874:	4c71      	ldr	r4, [pc, #452]	; (1000aa3c <ble_connected_state_handler+0x1f8>)
1000a876:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a878:	486d      	ldr	r0, [pc, #436]	; (1000aa30 <ble_connected_state_handler+0x1ec>)
1000a87a:	47b8      	blx	r7
1000a87c:	8929      	ldrh	r1, [r5, #8]
1000a87e:	4870      	ldr	r0, [pc, #448]	; (1000aa40 <ble_connected_state_handler+0x1fc>)
1000a880:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a882:	2212      	movs	r2, #18
1000a884:	0029      	movs	r1, r5
1000a886:	486f      	ldr	r0, [pc, #444]	; (1000aa44 <ble_connected_state_handler+0x200>)
1000a888:	4b6f      	ldr	r3, [pc, #444]	; (1000aa48 <ble_connected_state_handler+0x204>)
1000a88a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a88c:	9504      	str	r5, [sp, #16]
1000a88e:	2207      	movs	r2, #7
1000a890:	0029      	movs	r1, r5
1000a892:	486e      	ldr	r0, [pc, #440]	; (1000aa4c <ble_connected_state_handler+0x208>)
1000a894:	4b6e      	ldr	r3, [pc, #440]	; (1000aa50 <ble_connected_state_handler+0x20c>)
1000a896:	4798      	blx	r3
1000a898:	2800      	cmp	r0, #0
1000a89a:	d100      	bne.n	1000a89e <ble_connected_state_handler+0x5a>
1000a89c:	e0ad      	b.n	1000a9fa <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a89e:	782b      	ldrb	r3, [r5, #0]
1000a8a0:	2b02      	cmp	r3, #2
1000a8a2:	d000      	beq.n	1000a8a6 <ble_connected_state_handler+0x62>
1000a8a4:	e0a9      	b.n	1000a9fa <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a8a6:	2250      	movs	r2, #80	; 0x50
1000a8a8:	2100      	movs	r1, #0
1000a8aa:	a806      	add	r0, sp, #24
1000a8ac:	4b69      	ldr	r3, [pc, #420]	; (1000aa54 <ble_connected_state_handler+0x210>)
1000a8ae:	4798      	blx	r3
1000a8b0:	4f69      	ldr	r7, [pc, #420]	; (1000aa58 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a8b2:	2300      	movs	r3, #0
1000a8b4:	e00b      	b.n	1000a8ce <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a8b6:	1c59      	adds	r1, r3, #1
1000a8b8:	7814      	ldrb	r4, [r2, #0]
1000a8ba:	a806      	add	r0, sp, #24
1000a8bc:	54c4      	strb	r4, [r0, r3]
1000a8be:	3201      	adds	r2, #1
1000a8c0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a8c2:	42b3      	cmp	r3, r6
1000a8c4:	d1f7      	bne.n	1000a8b6 <ble_connected_state_handler+0x72>
1000a8c6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a8c8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a8ca:	2b50      	cmp	r3, #80	; 0x50
1000a8cc:	d004      	beq.n	1000a8d8 <ble_connected_state_handler+0x94>
1000a8ce:	001e      	movs	r6, r3
1000a8d0:	3610      	adds	r6, #16
1000a8d2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a8d4:	003a      	movs	r2, r7
1000a8d6:	e7ee      	b.n	1000a8b6 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a8d8:	aa06      	add	r2, sp, #24
1000a8da:	0029      	movs	r1, r5
1000a8dc:	2005      	movs	r0, #5
1000a8de:	4b5f      	ldr	r3, [pc, #380]	; (1000aa5c <ble_connected_state_handler+0x218>)
1000a8e0:	4798      	blx	r3
1000a8e2:	1e06      	subs	r6, r0, #0
1000a8e4:	d100      	bne.n	1000a8e8 <ble_connected_state_handler+0xa4>
1000a8e6:	e09c      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a8e8:	4851      	ldr	r0, [pc, #324]	; (1000aa30 <ble_connected_state_handler+0x1ec>)
1000a8ea:	4b52      	ldr	r3, [pc, #328]	; (1000aa34 <ble_connected_state_handler+0x1f0>)
1000a8ec:	4798      	blx	r3
1000a8ee:	485c      	ldr	r0, [pc, #368]	; (1000aa60 <ble_connected_state_handler+0x21c>)
1000a8f0:	4b52      	ldr	r3, [pc, #328]	; (1000aa3c <ble_connected_state_handler+0x1f8>)
1000a8f2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a8f4:	26e2      	movs	r6, #226	; 0xe2
1000a8f6:	e094      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
1000a8f8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a8fa:	9405      	str	r4, [sp, #20]
1000a8fc:	2207      	movs	r2, #7
1000a8fe:	9904      	ldr	r1, [sp, #16]
1000a900:	4648      	mov	r0, r9
1000a902:	47d8      	blx	fp
1000a904:	2800      	cmp	r0, #0
1000a906:	d109      	bne.n	1000a91c <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a908:	9a05      	ldr	r2, [sp, #20]
1000a90a:	0153      	lsls	r3, r2, #5
1000a90c:	1a9b      	subs	r3, r3, r2
1000a90e:	009a      	lsls	r2, r3, #2
1000a910:	4b54      	ldr	r3, [pc, #336]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000a912:	189b      	adds	r3, r3, r2
1000a914:	335e      	adds	r3, #94	; 0x5e
1000a916:	2202      	movs	r2, #2
1000a918:	701a      	strb	r2, [r3, #0]
1000a91a:	e02b      	b.n	1000a974 <ble_connected_state_handler+0x130>
1000a91c:	3401      	adds	r4, #1
1000a91e:	237c      	movs	r3, #124	; 0x7c
1000a920:	469c      	mov	ip, r3
1000a922:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a924:	2c05      	cmp	r4, #5
1000a926:	d1e7      	bne.n	1000a8f8 <ble_connected_state_handler+0xb4>
1000a928:	e072      	b.n	1000aa10 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a92a:	001c      	movs	r4, r3
1000a92c:	7811      	ldrb	r1, [r2, #0]
1000a92e:	2900      	cmp	r1, #0
1000a930:	d11a      	bne.n	1000a968 <ble_connected_state_handler+0x124>
1000a932:	e001      	b.n	1000a938 <ble_connected_state_handler+0xf4>
1000a934:	2400      	movs	r4, #0
1000a936:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a938:	0163      	lsls	r3, r4, #5
1000a93a:	4699      	mov	r9, r3
1000a93c:	1b18      	subs	r0, r3, r4
1000a93e:	0080      	lsls	r0, r0, #2
1000a940:	4b48      	ldr	r3, [pc, #288]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000a942:	4698      	mov	r8, r3
1000a944:	4440      	add	r0, r8
1000a946:	2212      	movs	r2, #18
1000a948:	0029      	movs	r1, r5
1000a94a:	4b3f      	ldr	r3, [pc, #252]	; (1000aa48 <ble_connected_state_handler+0x204>)
1000a94c:	4798      	blx	r3
						ble_device_count++;
1000a94e:	4a46      	ldr	r2, [pc, #280]	; (1000aa68 <ble_connected_state_handler+0x224>)
1000a950:	7813      	ldrb	r3, [r2, #0]
1000a952:	3301      	adds	r3, #1
1000a954:	b2db      	uxtb	r3, r3
1000a956:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a958:	464b      	mov	r3, r9
1000a95a:	1b1b      	subs	r3, r3, r4
1000a95c:	009b      	lsls	r3, r3, #2
1000a95e:	4443      	add	r3, r8
1000a960:	335e      	adds	r3, #94	; 0x5e
1000a962:	2202      	movs	r2, #2
1000a964:	701a      	strb	r2, [r3, #0]
						break;
1000a966:	e005      	b.n	1000a974 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a968:	1c79      	adds	r1, r7, #1
1000a96a:	b2cf      	uxtb	r7, r1
1000a96c:	3301      	adds	r3, #1
1000a96e:	327c      	adds	r2, #124	; 0x7c
1000a970:	2f05      	cmp	r7, #5
1000a972:	d1da      	bne.n	1000a92a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a974:	2207      	movs	r2, #7
1000a976:	0029      	movs	r1, r5
1000a978:	4834      	ldr	r0, [pc, #208]	; (1000aa4c <ble_connected_state_handler+0x208>)
1000a97a:	4b35      	ldr	r3, [pc, #212]	; (1000aa50 <ble_connected_state_handler+0x20c>)
1000a97c:	4798      	blx	r3
1000a97e:	2800      	cmp	r0, #0
1000a980:	d10c      	bne.n	1000a99c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a982:	017b      	lsls	r3, r7, #5
1000a984:	1bdb      	subs	r3, r3, r7
1000a986:	009b      	lsls	r3, r3, #2
1000a988:	4a36      	ldr	r2, [pc, #216]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000a98a:	18d3      	adds	r3, r2, r3
1000a98c:	2205      	movs	r2, #5
1000a98e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a990:	3202      	adds	r2, #2
1000a992:	2100      	movs	r1, #0
1000a994:	482d      	ldr	r0, [pc, #180]	; (1000aa4c <ble_connected_state_handler+0x208>)
1000a996:	4b2f      	ldr	r3, [pc, #188]	; (1000aa54 <ble_connected_state_handler+0x210>)
1000a998:	4798      	blx	r3
1000a99a:	e042      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a99c:	4b31      	ldr	r3, [pc, #196]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000a99e:	4698      	mov	r8, r3
1000a9a0:	017c      	lsls	r4, r7, #5
1000a9a2:	1be3      	subs	r3, r4, r7
1000a9a4:	009b      	lsls	r3, r3, #2
1000a9a6:	4443      	add	r3, r8
1000a9a8:	220a      	movs	r2, #10
1000a9aa:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a9ac:	3a03      	subs	r2, #3
1000a9ae:	2100      	movs	r1, #0
1000a9b0:	4826      	ldr	r0, [pc, #152]	; (1000aa4c <ble_connected_state_handler+0x208>)
1000a9b2:	4b28      	ldr	r3, [pc, #160]	; (1000aa54 <ble_connected_state_handler+0x210>)
1000a9b4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a9b6:	1be4      	subs	r4, r4, r7
1000a9b8:	00a4      	lsls	r4, r4, #2
1000a9ba:	4444      	add	r4, r8
1000a9bc:	7ca3      	ldrb	r3, [r4, #18]
1000a9be:	2b0a      	cmp	r3, #10
1000a9c0:	d12f      	bne.n	1000aa22 <ble_connected_state_handler+0x1de>
1000a9c2:	e00d      	b.n	1000a9e0 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a9c4:	481a      	ldr	r0, [pc, #104]	; (1000aa30 <ble_connected_state_handler+0x1ec>)
1000a9c6:	4b1b      	ldr	r3, [pc, #108]	; (1000aa34 <ble_connected_state_handler+0x1f0>)
1000a9c8:	4798      	blx	r3
1000a9ca:	4b27      	ldr	r3, [pc, #156]	; (1000aa68 <ble_connected_state_handler+0x224>)
1000a9cc:	7819      	ldrb	r1, [r3, #0]
1000a9ce:	b2c9      	uxtb	r1, r1
1000a9d0:	4826      	ldr	r0, [pc, #152]	; (1000aa6c <ble_connected_state_handler+0x228>)
1000a9d2:	4b1a      	ldr	r3, [pc, #104]	; (1000aa3c <ble_connected_state_handler+0x1f8>)
1000a9d4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a9d6:	8928      	ldrh	r0, [r5, #8]
1000a9d8:	2113      	movs	r1, #19
1000a9da:	4b25      	ldr	r3, [pc, #148]	; (1000aa70 <ble_connected_state_handler+0x22c>)
1000a9dc:	4798      	blx	r3
1000a9de:	e020      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a9e0:	8928      	ldrh	r0, [r5, #8]
1000a9e2:	4b24      	ldr	r3, [pc, #144]	; (1000aa74 <ble_connected_state_handler+0x230>)
1000a9e4:	4798      	blx	r3
1000a9e6:	e01c      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a9e8:	4811      	ldr	r0, [pc, #68]	; (1000aa30 <ble_connected_state_handler+0x1ec>)
1000a9ea:	4b12      	ldr	r3, [pc, #72]	; (1000aa34 <ble_connected_state_handler+0x1f0>)
1000a9ec:	4798      	blx	r3
1000a9ee:	7aa9      	ldrb	r1, [r5, #10]
1000a9f0:	4821      	ldr	r0, [pc, #132]	; (1000aa78 <ble_connected_state_handler+0x234>)
1000a9f2:	4b12      	ldr	r3, [pc, #72]	; (1000aa3c <ble_connected_state_handler+0x1f8>)
1000a9f4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a9f6:	2600      	movs	r6, #0
1000a9f8:	e013      	b.n	1000aa22 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a9fa:	4b1b      	ldr	r3, [pc, #108]	; (1000aa68 <ble_connected_state_handler+0x224>)
1000a9fc:	781b      	ldrb	r3, [r3, #0]
1000a9fe:	b2db      	uxtb	r3, r3
1000aa00:	2b04      	cmp	r3, #4
1000aa02:	d8df      	bhi.n	1000a9c4 <ble_connected_state_handler+0x180>
1000aa04:	4b17      	ldr	r3, [pc, #92]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000aa06:	4699      	mov	r9, r3
1000aa08:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aa0a:	4b11      	ldr	r3, [pc, #68]	; (1000aa50 <ble_connected_state_handler+0x20c>)
1000aa0c:	469b      	mov	fp, r3
1000aa0e:	e773      	b.n	1000a8f8 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aa10:	235e      	movs	r3, #94	; 0x5e
1000aa12:	4a14      	ldr	r2, [pc, #80]	; (1000aa64 <ble_connected_state_handler+0x220>)
1000aa14:	5cd3      	ldrb	r3, [r2, r3]
1000aa16:	2b00      	cmp	r3, #0
1000aa18:	d08c      	beq.n	1000a934 <ble_connected_state_handler+0xf0>
1000aa1a:	4a18      	ldr	r2, [pc, #96]	; (1000aa7c <ble_connected_state_handler+0x238>)
1000aa1c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aa1e:	2701      	movs	r7, #1
1000aa20:	e783      	b.n	1000a92a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000aa22:	0030      	movs	r0, r6
1000aa24:	b01a      	add	sp, #104	; 0x68
1000aa26:	bc1c      	pop	{r2, r3, r4}
1000aa28:	4690      	mov	r8, r2
1000aa2a:	4699      	mov	r9, r3
1000aa2c:	46a3      	mov	fp, r4
1000aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa30:	10012834 	.word	0x10012834
1000aa34:	10011815 	.word	0x10011815
1000aa38:	100132f0 	.word	0x100132f0
1000aa3c:	100116f5 	.word	0x100116f5
1000aa40:	10013334 	.word	0x10013334
1000aa44:	1001518c 	.word	0x1001518c
1000aa48:	1001159b 	.word	0x1001159b
1000aa4c:	10014d00 	.word	0x10014d00
1000aa50:	1001157d 	.word	0x1001157d
1000aa54:	100115ad 	.word	0x100115ad
1000aa58:	10014f26 	.word	0x10014f26
1000aa5c:	1000db51 	.word	0x1000db51
1000aa60:	1001334c 	.word	0x1001334c
1000aa64:	10014ee0 	.word	0x10014ee0
1000aa68:	1001514c 	.word	0x1001514c
1000aa6c:	10013370 	.word	0x10013370
1000aa70:	1000db25 	.word	0x1000db25
1000aa74:	1000a811 	.word	0x1000a811
1000aa78:	100133ac 	.word	0x100133ac
1000aa7c:	10014fba 	.word	0x10014fba

1000aa80 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa82:	4647      	mov	r7, r8
1000aa84:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000aa86:	7803      	ldrb	r3, [r0, #0]
1000aa88:	2b00      	cmp	r3, #0
1000aa8a:	d141      	bne.n	1000ab10 <ble_resolv_rand_addr_handler+0x90>
1000aa8c:	4d2f      	ldr	r5, [pc, #188]	; (1000ab4c <ble_resolv_rand_addr_handler+0xcc>)
1000aa8e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000aa90:	1c46      	adds	r6, r0, #1
1000aa92:	4f2f      	ldr	r7, [pc, #188]	; (1000ab50 <ble_resolv_rand_addr_handler+0xd0>)
1000aa94:	2210      	movs	r2, #16
1000aa96:	0029      	movs	r1, r5
1000aa98:	0030      	movs	r0, r6
1000aa9a:	47b8      	blx	r7
1000aa9c:	2800      	cmp	r0, #0
1000aa9e:	d03f      	beq.n	1000ab20 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aaa0:	3401      	adds	r4, #1
1000aaa2:	b2e4      	uxtb	r4, r4
1000aaa4:	357c      	adds	r5, #124	; 0x7c
1000aaa6:	2c05      	cmp	r4, #5
1000aaa8:	d1f4      	bne.n	1000aa94 <ble_resolv_rand_addr_handler+0x14>
1000aaaa:	e031      	b.n	1000ab10 <ble_resolv_rand_addr_handler+0x90>
1000aaac:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aaae:	001c      	movs	r4, r3
1000aab0:	7811      	ldrb	r1, [r2, #0]
1000aab2:	2900      	cmp	r1, #0
1000aab4:	d122      	bne.n	1000aafc <ble_resolv_rand_addr_handler+0x7c>
1000aab6:	e001      	b.n	1000aabc <ble_resolv_rand_addr_handler+0x3c>
1000aab8:	2400      	movs	r4, #0
1000aaba:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000aabc:	4b25      	ldr	r3, [pc, #148]	; (1000ab54 <ble_resolv_rand_addr_handler+0xd4>)
1000aabe:	4698      	mov	r8, r3
1000aac0:	0166      	lsls	r6, r4, #5
1000aac2:	1b37      	subs	r7, r6, r4
1000aac4:	00bf      	lsls	r7, r7, #2
1000aac6:	4447      	add	r7, r8
1000aac8:	2212      	movs	r2, #18
1000aaca:	4923      	ldr	r1, [pc, #140]	; (1000ab58 <ble_resolv_rand_addr_handler+0xd8>)
1000aacc:	0038      	movs	r0, r7
1000aace:	4b23      	ldr	r3, [pc, #140]	; (1000ab5c <ble_resolv_rand_addr_handler+0xdc>)
1000aad0:	4798      	blx	r3
				ble_device_count++;
1000aad2:	4a23      	ldr	r2, [pc, #140]	; (1000ab60 <ble_resolv_rand_addr_handler+0xe0>)
1000aad4:	7813      	ldrb	r3, [r2, #0]
1000aad6:	3301      	adds	r3, #1
1000aad8:	b2db      	uxtb	r3, r3
1000aada:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000aadc:	375e      	adds	r7, #94	; 0x5e
1000aade:	2302      	movs	r3, #2
1000aae0:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000aae2:	1b34      	subs	r4, r6, r4
1000aae4:	00a4      	lsls	r4, r4, #2
1000aae6:	4444      	add	r4, r8
1000aae8:	3308      	adds	r3, #8
1000aaea:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000aaec:	016b      	lsls	r3, r5, #5
1000aaee:	1b5d      	subs	r5, r3, r5
1000aaf0:	00ad      	lsls	r5, r5, #2
1000aaf2:	4445      	add	r5, r8
1000aaf4:	7cab      	ldrb	r3, [r5, #18]
1000aaf6:	2b0a      	cmp	r3, #10
1000aaf8:	d123      	bne.n	1000ab42 <ble_resolv_rand_addr_handler+0xc2>
1000aafa:	e004      	b.n	1000ab06 <ble_resolv_rand_addr_handler+0x86>
1000aafc:	3301      	adds	r3, #1
1000aafe:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab00:	2b05      	cmp	r3, #5
1000ab02:	d1d3      	bne.n	1000aaac <ble_resolv_rand_addr_handler+0x2c>
1000ab04:	e01d      	b.n	1000ab42 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ab06:	4b14      	ldr	r3, [pc, #80]	; (1000ab58 <ble_resolv_rand_addr_handler+0xd8>)
1000ab08:	8918      	ldrh	r0, [r3, #8]
1000ab0a:	4b16      	ldr	r3, [pc, #88]	; (1000ab64 <ble_resolv_rand_addr_handler+0xe4>)
1000ab0c:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000ab0e:	e018      	b.n	1000ab42 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ab10:	235e      	movs	r3, #94	; 0x5e
1000ab12:	4a10      	ldr	r2, [pc, #64]	; (1000ab54 <ble_resolv_rand_addr_handler+0xd4>)
1000ab14:	5cd3      	ldrb	r3, [r2, r3]
1000ab16:	2b00      	cmp	r3, #0
1000ab18:	d0ce      	beq.n	1000aab8 <ble_resolv_rand_addr_handler+0x38>
1000ab1a:	4a13      	ldr	r2, [pc, #76]	; (1000ab68 <ble_resolv_rand_addr_handler+0xe8>)
1000ab1c:	2301      	movs	r3, #1
1000ab1e:	e7c5      	b.n	1000aaac <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab20:	480c      	ldr	r0, [pc, #48]	; (1000ab54 <ble_resolv_rand_addr_handler+0xd4>)
1000ab22:	0163      	lsls	r3, r4, #5
1000ab24:	1b1a      	subs	r2, r3, r4
1000ab26:	0092      	lsls	r2, r2, #2
1000ab28:	1882      	adds	r2, r0, r2
1000ab2a:	0011      	movs	r1, r2
1000ab2c:	315e      	adds	r1, #94	; 0x5e
1000ab2e:	2502      	movs	r5, #2
1000ab30:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab32:	210a      	movs	r1, #10
1000ab34:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ab36:	0010      	movs	r0, r2
1000ab38:	2212      	movs	r2, #18
1000ab3a:	4907      	ldr	r1, [pc, #28]	; (1000ab58 <ble_resolv_rand_addr_handler+0xd8>)
1000ab3c:	4b07      	ldr	r3, [pc, #28]	; (1000ab5c <ble_resolv_rand_addr_handler+0xdc>)
1000ab3e:	4798      	blx	r3
1000ab40:	e7e1      	b.n	1000ab06 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ab42:	2000      	movs	r0, #0
1000ab44:	bc04      	pop	{r2}
1000ab46:	4690      	mov	r8, r2
1000ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab4a:	46c0      	nop			; (mov r8, r8)
1000ab4c:	10014f26 	.word	0x10014f26
1000ab50:	1001157d 	.word	0x1001157d
1000ab54:	10014ee0 	.word	0x10014ee0
1000ab58:	1001518c 	.word	0x1001518c
1000ab5c:	1001159b 	.word	0x1001159b
1000ab60:	1001514c 	.word	0x1001514c
1000ab64:	1000a811 	.word	0x1000a811
1000ab68:	10014fba 	.word	0x10014fba

1000ab6c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab6e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000ab70:	283b      	cmp	r0, #59	; 0x3b
1000ab72:	d872      	bhi.n	1000ac5a <ble_event_manager+0xee>
1000ab74:	0083      	lsls	r3, r0, #2
1000ab76:	4a3c      	ldr	r2, [pc, #240]	; (1000ac68 <ble_event_manager+0xfc>)
1000ab78:	58d3      	ldr	r3, [r2, r3]
1000ab7a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ab7c:	0084      	lsls	r4, r0, #2
1000ab7e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ab80:	4f3a      	ldr	r7, [pc, #232]	; (1000ac6c <ble_event_manager+0x100>)
1000ab82:	59bb      	ldr	r3, [r7, r6]
1000ab84:	2b00      	cmp	r3, #0
1000ab86:	d004      	beq.n	1000ab92 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ab88:	591b      	ldr	r3, [r3, r4]
1000ab8a:	2b00      	cmp	r3, #0
1000ab8c:	d001      	beq.n	1000ab92 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000ab8e:	0028      	movs	r0, r5
1000ab90:	4798      	blx	r3
1000ab92:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ab94:	2e14      	cmp	r6, #20
1000ab96:	d1f4      	bne.n	1000ab82 <ble_event_manager+0x16>
1000ab98:	e065      	b.n	1000ac66 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ab9a:	3813      	subs	r0, #19
1000ab9c:	b2c4      	uxtb	r4, r0
1000ab9e:	00a4      	lsls	r4, r4, #2
1000aba0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000aba2:	4f33      	ldr	r7, [pc, #204]	; (1000ac70 <ble_event_manager+0x104>)
1000aba4:	59bb      	ldr	r3, [r7, r6]
1000aba6:	2b00      	cmp	r3, #0
1000aba8:	d004      	beq.n	1000abb4 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abaa:	591b      	ldr	r3, [r3, r4]
1000abac:	2b00      	cmp	r3, #0
1000abae:	d001      	beq.n	1000abb4 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000abb0:	0028      	movs	r0, r5
1000abb2:	4798      	blx	r3
1000abb4:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000abb6:	2e14      	cmp	r6, #20
1000abb8:	d1f4      	bne.n	1000aba4 <ble_event_manager+0x38>
1000abba:	e054      	b.n	1000ac66 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abbc:	381d      	subs	r0, #29
1000abbe:	b2c4      	uxtb	r4, r0
1000abc0:	00a4      	lsls	r4, r4, #2
1000abc2:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000abc4:	4f2b      	ldr	r7, [pc, #172]	; (1000ac74 <ble_event_manager+0x108>)
1000abc6:	59bb      	ldr	r3, [r7, r6]
1000abc8:	2b00      	cmp	r3, #0
1000abca:	d004      	beq.n	1000abd6 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abcc:	591b      	ldr	r3, [r3, r4]
1000abce:	2b00      	cmp	r3, #0
1000abd0:	d001      	beq.n	1000abd6 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000abd2:	0028      	movs	r0, r5
1000abd4:	4798      	blx	r3
1000abd6:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000abd8:	2e14      	cmp	r6, #20
1000abda:	d1f4      	bne.n	1000abc6 <ble_event_manager+0x5a>
1000abdc:	e043      	b.n	1000ac66 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000abde:	3827      	subs	r0, #39	; 0x27
1000abe0:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000abe2:	4b25      	ldr	r3, [pc, #148]	; (1000ac78 <ble_event_manager+0x10c>)
1000abe4:	681b      	ldr	r3, [r3, #0]
1000abe6:	2b00      	cmp	r3, #0
1000abe8:	d03d      	beq.n	1000ac66 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abea:	0080      	lsls	r0, r0, #2
1000abec:	58c3      	ldr	r3, [r0, r3]
1000abee:	2b00      	cmp	r3, #0
1000abf0:	d039      	beq.n	1000ac66 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000abf2:	0008      	movs	r0, r1
1000abf4:	4798      	blx	r3
1000abf6:	e036      	b.n	1000ac66 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000abf8:	382d      	subs	r0, #45	; 0x2d
1000abfa:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000abfc:	4b1f      	ldr	r3, [pc, #124]	; (1000ac7c <ble_event_manager+0x110>)
1000abfe:	681b      	ldr	r3, [r3, #0]
1000ac00:	2b00      	cmp	r3, #0
1000ac02:	d030      	beq.n	1000ac66 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac04:	0080      	lsls	r0, r0, #2
1000ac06:	58c3      	ldr	r3, [r0, r3]
1000ac08:	2b00      	cmp	r3, #0
1000ac0a:	d02c      	beq.n	1000ac66 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac0c:	0008      	movs	r0, r1
1000ac0e:	4798      	blx	r3
1000ac10:	e029      	b.n	1000ac66 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac12:	3836      	subs	r0, #54	; 0x36
1000ac14:	b2c4      	uxtb	r4, r0
1000ac16:	00a4      	lsls	r4, r4, #2
1000ac18:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ac1a:	4f19      	ldr	r7, [pc, #100]	; (1000ac80 <ble_event_manager+0x114>)
1000ac1c:	59bb      	ldr	r3, [r7, r6]
1000ac1e:	2b00      	cmp	r3, #0
1000ac20:	d004      	beq.n	1000ac2c <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac22:	591b      	ldr	r3, [r3, r4]
1000ac24:	2b00      	cmp	r3, #0
1000ac26:	d001      	beq.n	1000ac2c <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000ac28:	0028      	movs	r0, r5
1000ac2a:	4798      	blx	r3
1000ac2c:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ac2e:	2e14      	cmp	r6, #20
1000ac30:	d1f4      	bne.n	1000ac1c <ble_event_manager+0xb0>
1000ac32:	e018      	b.n	1000ac66 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ac34:	3838      	subs	r0, #56	; 0x38
1000ac36:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ac38:	4b12      	ldr	r3, [pc, #72]	; (1000ac84 <ble_event_manager+0x118>)
1000ac3a:	681b      	ldr	r3, [r3, #0]
1000ac3c:	2b00      	cmp	r3, #0
1000ac3e:	d012      	beq.n	1000ac66 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac40:	0080      	lsls	r0, r0, #2
1000ac42:	58c3      	ldr	r3, [r0, r3]
1000ac44:	2b00      	cmp	r3, #0
1000ac46:	d00e      	beq.n	1000ac66 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac48:	0008      	movs	r0, r1
1000ac4a:	4798      	blx	r3
1000ac4c:	e00b      	b.n	1000ac66 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ac4e:	4b0e      	ldr	r3, [pc, #56]	; (1000ac88 <ble_event_manager+0x11c>)
1000ac50:	681b      	ldr	r3, [r3, #0]
1000ac52:	2b00      	cmp	r3, #0
1000ac54:	d007      	beq.n	1000ac66 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000ac56:	4798      	blx	r3
1000ac58:	e005      	b.n	1000ac66 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000ac5a:	4d0c      	ldr	r5, [pc, #48]	; (1000ac8c <ble_event_manager+0x120>)
1000ac5c:	0028      	movs	r0, r5
1000ac5e:	4c0c      	ldr	r4, [pc, #48]	; (1000ac90 <ble_event_manager+0x124>)
1000ac60:	47a0      	blx	r4
1000ac62:	0028      	movs	r0, r5
1000ac64:	47a0      	blx	r4
	}
	break;		
	}
}
1000ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ac68:	10012cb0 	.word	0x10012cb0
1000ac6c:	10015164 	.word	0x10015164
1000ac70:	10015178 	.word	0x10015178
1000ac74:	10014ecc 	.word	0x10014ecc
1000ac78:	100151c0 	.word	0x100151c0
1000ac7c:	10014ec8 	.word	0x10014ec8
1000ac80:	10015150 	.word	0x10015150
1000ac84:	10015704 	.word	0x10015704
1000ac88:	10014cf8 	.word	0x10014cf8
1000ac8c:	10012834 	.word	0x10012834
1000ac90:	10011815 	.word	0x10011815

1000ac94 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ac94:	b570      	push	{r4, r5, r6, lr}
1000ac96:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000ac98:	4b0d      	ldr	r3, [pc, #52]	; (1000acd0 <ble_event_task+0x3c>)
1000ac9a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000ac9c:	2b01      	cmp	r3, #1
1000ac9e:	d101      	bne.n	1000aca4 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000aca0:	4b0c      	ldr	r3, [pc, #48]	; (1000acd4 <ble_event_task+0x40>)
1000aca2:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000aca4:	0022      	movs	r2, r4
1000aca6:	490c      	ldr	r1, [pc, #48]	; (1000acd8 <ble_event_task+0x44>)
1000aca8:	480c      	ldr	r0, [pc, #48]	; (1000acdc <ble_event_task+0x48>)
1000acaa:	4b0d      	ldr	r3, [pc, #52]	; (1000ace0 <ble_event_task+0x4c>)
1000acac:	4798      	blx	r3
1000acae:	0004      	movs	r4, r0
1000acb0:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000acb2:	4b07      	ldr	r3, [pc, #28]	; (1000acd0 <ble_event_task+0x3c>)
1000acb4:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000acb6:	2b01      	cmp	r3, #1
1000acb8:	d101      	bne.n	1000acbe <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000acba:	4b0a      	ldr	r3, [pc, #40]	; (1000ace4 <ble_event_task+0x50>)
1000acbc:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000acbe:	2d00      	cmp	r5, #0
1000acc0:	d104      	bne.n	1000accc <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000acc2:	4b06      	ldr	r3, [pc, #24]	; (1000acdc <ble_event_task+0x48>)
1000acc4:	7818      	ldrb	r0, [r3, #0]
1000acc6:	4904      	ldr	r1, [pc, #16]	; (1000acd8 <ble_event_task+0x44>)
1000acc8:	4b07      	ldr	r3, [pc, #28]	; (1000ace8 <ble_event_task+0x54>)
1000acca:	4798      	blx	r3
    }
    
    return status;
}
1000accc:	0020      	movs	r0, r4
1000acce:	bd70      	pop	{r4, r5, r6, pc}
1000acd0:	10014d07 	.word	0x10014d07
1000acd4:	1000b5f9 	.word	0x1000b5f9
1000acd8:	100154f8 	.word	0x100154f8
1000acdc:	100151bc 	.word	0x100151bc
1000ace0:	1000d0a5 	.word	0x1000d0a5
1000ace4:	1000b5d1 	.word	0x1000b5d1
1000ace8:	1000ab6d 	.word	0x1000ab6d

1000acec <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000acec:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000acee:	4b0e      	ldr	r3, [pc, #56]	; (1000ad28 <uart_read_complete_callback+0x3c>)
1000acf0:	781b      	ldrb	r3, [r3, #0]
1000acf2:	2b01      	cmp	r3, #1
1000acf4:	d10b      	bne.n	1000ad0e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000acf6:	2202      	movs	r2, #2
1000acf8:	4b0b      	ldr	r3, [pc, #44]	; (1000ad28 <uart_read_complete_callback+0x3c>)
1000acfa:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000acfc:	4b0b      	ldr	r3, [pc, #44]	; (1000ad2c <uart_read_complete_callback+0x40>)
1000acfe:	681b      	ldr	r3, [r3, #0]
1000ad00:	2b00      	cmp	r3, #0
1000ad02:	d110      	bne.n	1000ad26 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ad04:	2102      	movs	r1, #2
1000ad06:	480a      	ldr	r0, [pc, #40]	; (1000ad30 <uart_read_complete_callback+0x44>)
1000ad08:	4b0a      	ldr	r3, [pc, #40]	; (1000ad34 <uart_read_complete_callback+0x48>)
1000ad0a:	4798      	blx	r3
1000ad0c:	e00b      	b.n	1000ad26 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ad0e:	4b07      	ldr	r3, [pc, #28]	; (1000ad2c <uart_read_complete_callback+0x40>)
1000ad10:	681b      	ldr	r3, [r3, #0]
1000ad12:	2b00      	cmp	r3, #0
1000ad14:	d007      	beq.n	1000ad26 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ad16:	4c08      	ldr	r4, [pc, #32]	; (1000ad38 <uart_read_complete_callback+0x4c>)
1000ad18:	7820      	ldrb	r0, [r4, #0]
1000ad1a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ad1c:	2201      	movs	r2, #1
1000ad1e:	0021      	movs	r1, r4
1000ad20:	4803      	ldr	r0, [pc, #12]	; (1000ad30 <uart_read_complete_callback+0x44>)
1000ad22:	4b06      	ldr	r3, [pc, #24]	; (1000ad3c <uart_read_complete_callback+0x50>)
1000ad24:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ad26:	bd10      	pop	{r4, pc}
1000ad28:	10014d0c 	.word	0x10014d0c
1000ad2c:	10014d14 	.word	0x10014d14
1000ad30:	10015708 	.word	0x10015708
1000ad34:	1000bcc9 	.word	0x1000bcc9
1000ad38:	10014d10 	.word	0x10014d10
1000ad3c:	1000bc6d 	.word	0x1000bc6d

1000ad40 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ad40:	b570      	push	{r4, r5, r6, lr}
1000ad42:	0006      	movs	r6, r0
1000ad44:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ad46:	4c03      	ldr	r4, [pc, #12]	; (1000ad54 <usart_serial_getchar+0x14>)
1000ad48:	0029      	movs	r1, r5
1000ad4a:	0030      	movs	r0, r6
1000ad4c:	47a0      	blx	r4
1000ad4e:	2800      	cmp	r0, #0
1000ad50:	d1fa      	bne.n	1000ad48 <usart_serial_getchar+0x8>
}
1000ad52:	bd70      	pop	{r4, r5, r6, pc}
1000ad54:	1000bc59 	.word	0x1000bc59

1000ad58 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ad58:	b570      	push	{r4, r5, r6, lr}
1000ad5a:	0006      	movs	r6, r0
1000ad5c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ad5e:	4c03      	ldr	r4, [pc, #12]	; (1000ad6c <usart_serial_putchar+0x14>)
1000ad60:	0029      	movs	r1, r5
1000ad62:	0030      	movs	r0, r6
1000ad64:	47a0      	blx	r4
1000ad66:	2800      	cmp	r0, #0
1000ad68:	d1fa      	bne.n	1000ad60 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ad6a:	bd70      	pop	{r4, r5, r6, pc}
1000ad6c:	1000bc49 	.word	0x1000bc49

1000ad70 <serial_console_init>:

void serial_console_init(void)
{
1000ad70:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ad72:	2100      	movs	r1, #0
1000ad74:	2000      	movs	r0, #0
1000ad76:	4b19      	ldr	r3, [pc, #100]	; (1000addc <serial_console_init+0x6c>)
1000ad78:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ad7a:	4c19      	ldr	r4, [pc, #100]	; (1000ade0 <serial_console_init+0x70>)
1000ad7c:	0020      	movs	r0, r4
1000ad7e:	4b19      	ldr	r3, [pc, #100]	; (1000ade4 <serial_console_init+0x74>)
1000ad80:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ad82:	23e1      	movs	r3, #225	; 0xe1
1000ad84:	025b      	lsls	r3, r3, #9
1000ad86:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000ad88:	2302      	movs	r3, #2
1000ad8a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000ad8c:	2203      	movs	r2, #3
1000ad8e:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000ad90:	3201      	adds	r2, #1
1000ad92:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ad94:	3201      	adds	r2, #1
1000ad96:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ad98:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ad9a:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ad9c:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ad9e:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ada0:	4d11      	ldr	r5, [pc, #68]	; (1000ade8 <serial_console_init+0x78>)
1000ada2:	4b12      	ldr	r3, [pc, #72]	; (1000adec <serial_console_init+0x7c>)
1000ada4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000ada6:	4a12      	ldr	r2, [pc, #72]	; (1000adf0 <serial_console_init+0x80>)
1000ada8:	4b12      	ldr	r3, [pc, #72]	; (1000adf4 <serial_console_init+0x84>)
1000adaa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000adac:	4a12      	ldr	r2, [pc, #72]	; (1000adf8 <serial_console_init+0x88>)
1000adae:	4b13      	ldr	r3, [pc, #76]	; (1000adfc <serial_console_init+0x8c>)
1000adb0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000adb2:	0022      	movs	r2, r4
1000adb4:	4912      	ldr	r1, [pc, #72]	; (1000ae00 <serial_console_init+0x90>)
1000adb6:	0028      	movs	r0, r5
1000adb8:	4b12      	ldr	r3, [pc, #72]	; (1000ae04 <serial_console_init+0x94>)
1000adba:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000adbc:	4e12      	ldr	r6, [pc, #72]	; (1000ae08 <serial_console_init+0x98>)
1000adbe:	6833      	ldr	r3, [r6, #0]
1000adc0:	6898      	ldr	r0, [r3, #8]
1000adc2:	2100      	movs	r1, #0
1000adc4:	4c11      	ldr	r4, [pc, #68]	; (1000ae0c <serial_console_init+0x9c>)
1000adc6:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000adc8:	6833      	ldr	r3, [r6, #0]
1000adca:	6858      	ldr	r0, [r3, #4]
1000adcc:	2100      	movs	r1, #0
1000adce:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000add0:	2202      	movs	r2, #2
1000add2:	490f      	ldr	r1, [pc, #60]	; (1000ae10 <serial_console_init+0xa0>)
1000add4:	0028      	movs	r0, r5
1000add6:	4b0f      	ldr	r3, [pc, #60]	; (1000ae14 <serial_console_init+0xa4>)
1000add8:	4798      	blx	r3
}
1000adda:	bd70      	pop	{r4, r5, r6, pc}
1000addc:	1000c4c9 	.word	0x1000c4c9
1000ade0:	1001572c 	.word	0x1001572c
1000ade4:	1000ba61 	.word	0x1000ba61
1000ade8:	10015708 	.word	0x10015708
1000adec:	10015a54 	.word	0x10015a54
1000adf0:	1000ad59 	.word	0x1000ad59
1000adf4:	10015a50 	.word	0x10015a50
1000adf8:	1000ad41 	.word	0x1000ad41
1000adfc:	10015a4c 	.word	0x10015a4c
1000ae00:	40004000 	.word	0x40004000
1000ae04:	1000ba8d 	.word	0x1000ba8d
1000ae08:	100138c0 	.word	0x100138c0
1000ae0c:	100118c5 	.word	0x100118c5
1000ae10:	1000aced 	.word	0x1000aced
1000ae14:	1000bc95 	.word	0x1000bc95

1000ae18 <_time_start>:

void _time_start(unsigned int sec)
{
1000ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae1a:	b083      	sub	sp, #12
1000ae1c:	0005      	movs	r5, r0
	system_clock_get_value();
1000ae1e:	4c0d      	ldr	r4, [pc, #52]	; (1000ae54 <_time_start+0x3c>)
1000ae20:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ae22:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ae24:	4f0c      	ldr	r7, [pc, #48]	; (1000ae58 <_time_start+0x40>)
1000ae26:	47b8      	blx	r7
1000ae28:	4e0c      	ldr	r6, [pc, #48]	; (1000ae5c <_time_start+0x44>)
1000ae2a:	4a0d      	ldr	r2, [pc, #52]	; (1000ae60 <_time_start+0x48>)
1000ae2c:	4b0d      	ldr	r3, [pc, #52]	; (1000ae64 <_time_start+0x4c>)
1000ae2e:	47b0      	blx	r6
1000ae30:	9000      	str	r0, [sp, #0]
1000ae32:	9101      	str	r1, [sp, #4]
1000ae34:	20fa      	movs	r0, #250	; 0xfa
1000ae36:	0080      	lsls	r0, r0, #2
1000ae38:	4368      	muls	r0, r5
1000ae3a:	47b8      	blx	r7
1000ae3c:	0002      	movs	r2, r0
1000ae3e:	000b      	movs	r3, r1
1000ae40:	9800      	ldr	r0, [sp, #0]
1000ae42:	9901      	ldr	r1, [sp, #4]
1000ae44:	47b0      	blx	r6
1000ae46:	4b08      	ldr	r3, [pc, #32]	; (1000ae68 <_time_start+0x50>)
1000ae48:	4798      	blx	r3
1000ae4a:	4b08      	ldr	r3, [pc, #32]	; (1000ae6c <_time_start+0x54>)
1000ae4c:	6018      	str	r0, [r3, #0]
}
1000ae4e:	b003      	add	sp, #12
1000ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae52:	46c0      	nop			; (mov r8, r8)
1000ae54:	1000c54d 	.word	0x1000c54d
1000ae58:	10011471 	.word	0x10011471
1000ae5c:	10010869 	.word	0x10010869
1000ae60:	19feaec7 	.word	0x19feaec7
1000ae64:	3f09d8ef 	.word	0x3f09d8ef
1000ae68:	1000fc89 	.word	0x1000fc89
1000ae6c:	10014d08 	.word	0x10014d08

1000ae70 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ae70:	4b02      	ldr	r3, [pc, #8]	; (1000ae7c <_time_done+0xc>)
1000ae72:	681a      	ldr	r2, [r3, #0]
1000ae74:	1e50      	subs	r0, r2, #1
1000ae76:	6018      	str	r0, [r3, #0]
}
1000ae78:	4770      	bx	lr
1000ae7a:	46c0      	nop			; (mov r8, r8)
1000ae7c:	10014d08 	.word	0x10014d08

1000ae80 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ae80:	b570      	push	{r4, r5, r6, lr}
1000ae82:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ae84:	2201      	movs	r2, #1
1000ae86:	4b11      	ldr	r3, [pc, #68]	; (1000aecc <getchar_b11_timeout+0x4c>)
1000ae88:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ae8a:	4b11      	ldr	r3, [pc, #68]	; (1000aed0 <getchar_b11_timeout+0x50>)
1000ae8c:	681b      	ldr	r3, [r3, #0]
1000ae8e:	2b00      	cmp	r3, #0
1000ae90:	d103      	bne.n	1000ae9a <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ae92:	2102      	movs	r1, #2
1000ae94:	480f      	ldr	r0, [pc, #60]	; (1000aed4 <getchar_b11_timeout+0x54>)
1000ae96:	4b10      	ldr	r3, [pc, #64]	; (1000aed8 <getchar_b11_timeout+0x58>)
1000ae98:	4798      	blx	r3

	_time_start(sec);
1000ae9a:	0020      	movs	r0, r4
1000ae9c:	4b0f      	ldr	r3, [pc, #60]	; (1000aedc <getchar_b11_timeout+0x5c>)
1000ae9e:	4798      	blx	r3
	
	string_input[0] = 0;
1000aea0:	490f      	ldr	r1, [pc, #60]	; (1000aee0 <getchar_b11_timeout+0x60>)
1000aea2:	2300      	movs	r3, #0
1000aea4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aea6:	2201      	movs	r2, #1
1000aea8:	480a      	ldr	r0, [pc, #40]	; (1000aed4 <getchar_b11_timeout+0x54>)
1000aeaa:	4b0e      	ldr	r3, [pc, #56]	; (1000aee4 <getchar_b11_timeout+0x64>)
1000aeac:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000aeae:	4c07      	ldr	r4, [pc, #28]	; (1000aecc <getchar_b11_timeout+0x4c>)
1000aeb0:	4d0d      	ldr	r5, [pc, #52]	; (1000aee8 <getchar_b11_timeout+0x68>)
1000aeb2:	7823      	ldrb	r3, [r4, #0]
1000aeb4:	2b02      	cmp	r3, #2
1000aeb6:	d002      	beq.n	1000aebe <getchar_b11_timeout+0x3e>
1000aeb8:	47a8      	blx	r5
1000aeba:	2800      	cmp	r0, #0
1000aebc:	d1f9      	bne.n	1000aeb2 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000aebe:	2200      	movs	r2, #0
1000aec0:	4b02      	ldr	r3, [pc, #8]	; (1000aecc <getchar_b11_timeout+0x4c>)
1000aec2:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000aec4:	4b06      	ldr	r3, [pc, #24]	; (1000aee0 <getchar_b11_timeout+0x60>)
1000aec6:	7818      	ldrb	r0, [r3, #0]
}
1000aec8:	bd70      	pop	{r4, r5, r6, pc}
1000aeca:	46c0      	nop			; (mov r8, r8)
1000aecc:	10014d0c 	.word	0x10014d0c
1000aed0:	10014d14 	.word	0x10014d14
1000aed4:	10015708 	.word	0x10015708
1000aed8:	1000bca9 	.word	0x1000bca9
1000aedc:	1000ae19 	.word	0x1000ae19
1000aee0:	10014d10 	.word	0x10014d10
1000aee4:	1000bc6d 	.word	0x1000bc6d
1000aee8:	1000ae71 	.word	0x1000ae71

1000aeec <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000aeec:	4b02      	ldr	r3, [pc, #8]	; (1000aef8 <platform_event_free+0xc>)
1000aeee:	681a      	ldr	r2, [r3, #0]
1000aef0:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000aef2:	6018      	str	r0, [r3, #0]
}
1000aef4:	4770      	bx	lr
1000aef6:	46c0      	nop			; (mov r8, r8)
1000aef8:	10014d1c 	.word	0x10014d1c

1000aefc <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000aefc:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000aefe:	4b0b      	ldr	r3, [pc, #44]	; (1000af2c <platform_event_post+0x30>)
1000af00:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000af02:	2c00      	cmp	r4, #0
1000af04:	d011      	beq.n	1000af2a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000af06:	6825      	ldr	r5, [r4, #0]
1000af08:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000af0a:	2300      	movs	r3, #0
1000af0c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000af0e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000af10:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000af12:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000af14:	4b06      	ldr	r3, [pc, #24]	; (1000af30 <platform_event_post+0x34>)
1000af16:	681a      	ldr	r2, [r3, #0]
1000af18:	2a00      	cmp	r2, #0
1000af1a:	d102      	bne.n	1000af22 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000af1c:	601c      	str	r4, [r3, #0]
1000af1e:	e004      	b.n	1000af2a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000af20:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000af22:	6813      	ldr	r3, [r2, #0]
1000af24:	2b00      	cmp	r3, #0
1000af26:	d1fb      	bne.n	1000af20 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000af28:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000af2a:	bd30      	pop	{r4, r5, pc}
1000af2c:	10014d1c 	.word	0x10014d1c
1000af30:	10014d18 	.word	0x10014d18

1000af34 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000af34:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000af36:	2300      	movs	r3, #0
1000af38:	4a06      	ldr	r2, [pc, #24]	; (1000af54 <platform_event_init+0x20>)
1000af3a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000af3c:	4a06      	ldr	r2, [pc, #24]	; (1000af58 <platform_event_init+0x24>)
1000af3e:	6013      	str	r3, [r2, #0]
1000af40:	4c06      	ldr	r4, [pc, #24]	; (1000af5c <platform_event_init+0x28>)
1000af42:	0026      	movs	r6, r4
1000af44:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000af46:	4d06      	ldr	r5, [pc, #24]	; (1000af60 <platform_event_init+0x2c>)
1000af48:	0020      	movs	r0, r4
1000af4a:	47a8      	blx	r5
1000af4c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000af4e:	42b4      	cmp	r4, r6
1000af50:	d1fa      	bne.n	1000af48 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000af52:	bd70      	pop	{r4, r5, r6, pc}
1000af54:	10014d1c 	.word	0x10014d1c
1000af58:	10014d18 	.word	0x10014d18
1000af5c:	10014d20 	.word	0x10014d20
1000af60:	1000aeed 	.word	0x1000aeed

1000af64 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000af64:	b570      	push	{r4, r5, r6, lr}
1000af66:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000af68:	4b13      	ldr	r3, [pc, #76]	; (1000afb8 <at_ke_msg_send+0x54>)
1000af6a:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000af6c:	4b13      	ldr	r3, [pc, #76]	; (1000afbc <at_ke_msg_send+0x58>)
1000af6e:	681b      	ldr	r3, [r3, #0]
1000af70:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000af72:	2c0c      	cmp	r4, #12
1000af74:	d01f      	beq.n	1000afb6 <at_ke_msg_send+0x52>
1000af76:	3c0c      	subs	r4, #12
1000af78:	88e3      	ldrh	r3, [r4, #6]
1000af7a:	2b05      	cmp	r3, #5
1000af7c:	d01b      	beq.n	1000afb6 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000af7e:	07eb      	lsls	r3, r5, #31
1000af80:	d414      	bmi.n	1000afac <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000af82:	4b0f      	ldr	r3, [pc, #60]	; (1000afc0 <at_ke_msg_send+0x5c>)
1000af84:	681b      	ldr	r3, [r3, #0]
1000af86:	2002      	movs	r0, #2
1000af88:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000af8a:	4b0e      	ldr	r3, [pc, #56]	; (1000afc4 <at_ke_msg_send+0x60>)
1000af8c:	681b      	ldr	r3, [r3, #0]
1000af8e:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000af90:	4c0d      	ldr	r4, [pc, #52]	; (1000afc8 <at_ke_msg_send+0x64>)
1000af92:	2003      	movs	r0, #3
1000af94:	6823      	ldr	r3, [r4, #0]
1000af96:	4798      	blx	r3
1000af98:	2800      	cmp	r0, #0
1000af9a:	d1fa      	bne.n	1000af92 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000af9c:	4b0b      	ldr	r3, [pc, #44]	; (1000afcc <at_ke_msg_send+0x68>)
1000af9e:	681b      	ldr	r3, [r3, #0]
1000afa0:	3002      	adds	r0, #2
1000afa2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000afa4:	2201      	movs	r2, #1
1000afa6:	4b0a      	ldr	r3, [pc, #40]	; (1000afd0 <at_ke_msg_send+0x6c>)
1000afa8:	601a      	str	r2, [r3, #0]
1000afaa:	e004      	b.n	1000afb6 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000afac:	4b09      	ldr	r3, [pc, #36]	; (1000afd4 <at_ke_msg_send+0x70>)
1000afae:	6818      	ldr	r0, [r3, #0]
1000afb0:	4b09      	ldr	r3, [pc, #36]	; (1000afd8 <at_ke_msg_send+0x74>)
1000afb2:	681b      	ldr	r3, [r3, #0]
1000afb4:	4798      	blx	r3
		}
	}
}
1000afb6:	bd70      	pop	{r4, r5, r6, pc}
1000afb8:	4000b1ec 	.word	0x4000b1ec
1000afbc:	10014dc8 	.word	0x10014dc8
1000afc0:	10014dc0 	.word	0x10014dc0
1000afc4:	10014dd0 	.word	0x10014dd0
1000afc8:	10014dac 	.word	0x10014dac
1000afcc:	10014db4 	.word	0x10014db4
1000afd0:	4000b020 	.word	0x4000b020
1000afd4:	10014db8 	.word	0x10014db8
1000afd8:	10014da8 	.word	0x10014da8

1000afdc <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000afdc:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000afde:	4b06      	ldr	r3, [pc, #24]	; (1000aff8 <samb11_plf_resume_callback+0x1c>)
1000afe0:	4a06      	ldr	r2, [pc, #24]	; (1000affc <samb11_plf_resume_callback+0x20>)
1000afe2:	6819      	ldr	r1, [r3, #0]
1000afe4:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000afe6:	685a      	ldr	r2, [r3, #4]
1000afe8:	4b05      	ldr	r3, [pc, #20]	; (1000b000 <samb11_plf_resume_callback+0x24>)
1000afea:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000afec:	4b05      	ldr	r3, [pc, #20]	; (1000b004 <samb11_plf_resume_callback+0x28>)
1000afee:	681b      	ldr	r3, [r3, #0]
1000aff0:	2b00      	cmp	r3, #0
1000aff2:	d000      	beq.n	1000aff6 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000aff4:	4798      	blx	r3
	}
}
1000aff6:	bd10      	pop	{r4, pc}
1000aff8:	10015754 	.word	0x10015754
1000affc:	4000b00c 	.word	0x4000b00c
1000b000:	4000b010 	.word	0x4000b010
1000b004:	10015a30 	.word	0x10015a30

1000b008 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b008:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b00a:	2232      	movs	r2, #50	; 0x32
1000b00c:	2100      	movs	r1, #0
1000b00e:	480d      	ldr	r0, [pc, #52]	; (1000b044 <init_port_list+0x3c>)
1000b010:	4b0d      	ldr	r3, [pc, #52]	; (1000b048 <init_port_list+0x40>)
1000b012:	4798      	blx	r3
1000b014:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b016:	480b      	ldr	r0, [pc, #44]	; (1000b044 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b018:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b01a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b01c:	004a      	lsls	r2, r1, #1
1000b01e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b020:	1882      	adds	r2, r0, r2
1000b022:	7853      	ldrb	r3, [r2, #1]
1000b024:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b026:	b2db      	uxtb	r3, r3
1000b028:	43a3      	bics	r3, r4
1000b02a:	7053      	strb	r3, [r2, #1]
1000b02c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b02e:	2919      	cmp	r1, #25
1000b030:	d1f4      	bne.n	1000b01c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b032:	4b04      	ldr	r3, [pc, #16]	; (1000b044 <init_port_list+0x3c>)
1000b034:	785a      	ldrb	r2, [r3, #1]
1000b036:	3918      	subs	r1, #24
1000b038:	438a      	bics	r2, r1
1000b03a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b03c:	78da      	ldrb	r2, [r3, #3]
1000b03e:	438a      	bics	r2, r1
1000b040:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b042:	bd70      	pop	{r4, r5, r6, pc}
1000b044:	10015770 	.word	0x10015770
1000b048:	100115ad 	.word	0x100115ad

1000b04c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b04c:	4a06      	ldr	r2, [pc, #24]	; (1000b068 <init_clock+0x1c>)
1000b04e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b050:	4b06      	ldr	r3, [pc, #24]	; (1000b06c <init_clock+0x20>)
1000b052:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b054:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b056:	4a06      	ldr	r2, [pc, #24]	; (1000b070 <init_clock+0x24>)
1000b058:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b05a:	4906      	ldr	r1, [pc, #24]	; (1000b074 <init_clock+0x28>)
1000b05c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b05e:	4b06      	ldr	r3, [pc, #24]	; (1000b078 <init_clock+0x2c>)
1000b060:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b062:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b064:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b066:	4770      	bx	lr
1000b068:	4000b00c 	.word	0x4000b00c
1000b06c:	fffe0fd3 	.word	0xfffe0fd3
1000b070:	10015754 	.word	0x10015754
1000b074:	4000b010 	.word	0x4000b010
1000b078:	ffffe7c0 	.word	0xffffe7c0

1000b07c <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b07e:	4657      	mov	r7, sl
1000b080:	464e      	mov	r6, r9
1000b082:	4645      	mov	r5, r8
1000b084:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b086:	4b4f      	ldr	r3, [pc, #316]	; (1000b1c4 <platform_driver_init+0x148>)
1000b088:	781b      	ldrb	r3, [r3, #0]
1000b08a:	2b00      	cmp	r3, #0
1000b08c:	d004      	beq.n	1000b098 <platform_driver_init+0x1c>
1000b08e:	4b4d      	ldr	r3, [pc, #308]	; (1000b1c4 <platform_driver_init+0x148>)
1000b090:	781b      	ldrb	r3, [r3, #0]
1000b092:	2b01      	cmp	r3, #1
1000b094:	d100      	bne.n	1000b098 <platform_driver_init+0x1c>
1000b096:	e08c      	b.n	1000b1b2 <platform_driver_init+0x136>
		init_port_list();
1000b098:	4b4b      	ldr	r3, [pc, #300]	; (1000b1c8 <platform_driver_init+0x14c>)
1000b09a:	4798      	blx	r3
		init_clock();
1000b09c:	4b4b      	ldr	r3, [pc, #300]	; (1000b1cc <platform_driver_init+0x150>)
1000b09e:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b0a0:	2300      	movs	r3, #0
1000b0a2:	4698      	mov	r8, r3
1000b0a4:	4b4a      	ldr	r3, [pc, #296]	; (1000b1d0 <platform_driver_init+0x154>)
1000b0a6:	4642      	mov	r2, r8
1000b0a8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b0aa:	4c4a      	ldr	r4, [pc, #296]	; (1000b1d4 <platform_driver_init+0x158>)
1000b0ac:	2380      	movs	r3, #128	; 0x80
1000b0ae:	2280      	movs	r2, #128	; 0x80
1000b0b0:	0412      	lsls	r2, r2, #16
1000b0b2:	4692      	mov	sl, r2
1000b0b4:	50e2      	str	r2, [r4, r3]
1000b0b6:	2280      	movs	r2, #128	; 0x80
1000b0b8:	0452      	lsls	r2, r2, #17
1000b0ba:	4691      	mov	r9, r2
1000b0bc:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b0be:	4d46      	ldr	r5, [pc, #280]	; (1000b1d8 <platform_driver_init+0x15c>)
1000b0c0:	4b46      	ldr	r3, [pc, #280]	; (1000b1dc <platform_driver_init+0x160>)
1000b0c2:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b0c4:	4b46      	ldr	r3, [pc, #280]	; (1000b1e0 <platform_driver_init+0x164>)
1000b0c6:	4a47      	ldr	r2, [pc, #284]	; (1000b1e4 <platform_driver_init+0x168>)
1000b0c8:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b0ca:	4947      	ldr	r1, [pc, #284]	; (1000b1e8 <platform_driver_init+0x16c>)
1000b0cc:	4a47      	ldr	r2, [pc, #284]	; (1000b1ec <platform_driver_init+0x170>)
1000b0ce:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b0d0:	4a47      	ldr	r2, [pc, #284]	; (1000b1f0 <platform_driver_init+0x174>)
1000b0d2:	6811      	ldr	r1, [r2, #0]
1000b0d4:	4a47      	ldr	r2, [pc, #284]	; (1000b1f4 <platform_driver_init+0x178>)
1000b0d6:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b0d8:	4a47      	ldr	r2, [pc, #284]	; (1000b1f8 <platform_driver_init+0x17c>)
1000b0da:	6811      	ldr	r1, [r2, #0]
1000b0dc:	4a47      	ldr	r2, [pc, #284]	; (1000b1fc <platform_driver_init+0x180>)
1000b0de:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b0e0:	4947      	ldr	r1, [pc, #284]	; (1000b200 <platform_driver_init+0x184>)
1000b0e2:	4a48      	ldr	r2, [pc, #288]	; (1000b204 <platform_driver_init+0x188>)
1000b0e4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b0e6:	4948      	ldr	r1, [pc, #288]	; (1000b208 <platform_driver_init+0x18c>)
1000b0e8:	4a48      	ldr	r2, [pc, #288]	; (1000b20c <platform_driver_init+0x190>)
1000b0ea:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b0ec:	4f48      	ldr	r7, [pc, #288]	; (1000b210 <platform_driver_init+0x194>)
1000b0ee:	4a49      	ldr	r2, [pc, #292]	; (1000b214 <platform_driver_init+0x198>)
1000b0f0:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b0f2:	4949      	ldr	r1, [pc, #292]	; (1000b218 <platform_driver_init+0x19c>)
1000b0f4:	4a49      	ldr	r2, [pc, #292]	; (1000b21c <platform_driver_init+0x1a0>)
1000b0f6:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b0f8:	4949      	ldr	r1, [pc, #292]	; (1000b220 <platform_driver_init+0x1a4>)
1000b0fa:	4a4a      	ldr	r2, [pc, #296]	; (1000b224 <platform_driver_init+0x1a8>)
1000b0fc:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b0fe:	4e4a      	ldr	r6, [pc, #296]	; (1000b228 <platform_driver_init+0x1ac>)
1000b100:	4a4a      	ldr	r2, [pc, #296]	; (1000b22c <platform_driver_init+0x1b0>)
1000b102:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b104:	494a      	ldr	r1, [pc, #296]	; (1000b230 <platform_driver_init+0x1b4>)
1000b106:	4a4b      	ldr	r2, [pc, #300]	; (1000b234 <platform_driver_init+0x1b8>)
1000b108:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b10a:	494b      	ldr	r1, [pc, #300]	; (1000b238 <platform_driver_init+0x1bc>)
1000b10c:	4a4b      	ldr	r2, [pc, #300]	; (1000b23c <platform_driver_init+0x1c0>)
1000b10e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b110:	494b      	ldr	r1, [pc, #300]	; (1000b240 <platform_driver_init+0x1c4>)
1000b112:	4a4c      	ldr	r2, [pc, #304]	; (1000b244 <platform_driver_init+0x1c8>)
1000b114:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b116:	494c      	ldr	r1, [pc, #304]	; (1000b248 <platform_driver_init+0x1cc>)
1000b118:	4a4c      	ldr	r2, [pc, #304]	; (1000b24c <platform_driver_init+0x1d0>)
1000b11a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b11c:	494c      	ldr	r1, [pc, #304]	; (1000b250 <platform_driver_init+0x1d4>)
1000b11e:	4a4d      	ldr	r2, [pc, #308]	; (1000b254 <platform_driver_init+0x1d8>)
1000b120:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b122:	2028      	movs	r0, #40	; 0x28
1000b124:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b126:	494c      	ldr	r1, [pc, #304]	; (1000b258 <platform_driver_init+0x1dc>)
1000b128:	2028      	movs	r0, #40	; 0x28
1000b12a:	682b      	ldr	r3, [r5, #0]
1000b12c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b12e:	682b      	ldr	r3, [r5, #0]
1000b130:	494a      	ldr	r1, [pc, #296]	; (1000b25c <platform_driver_init+0x1e0>)
1000b132:	2027      	movs	r0, #39	; 0x27
1000b134:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b136:	4b4a      	ldr	r3, [pc, #296]	; (1000b260 <platform_driver_init+0x1e4>)
1000b138:	681a      	ldr	r2, [r3, #0]
1000b13a:	4b4a      	ldr	r3, [pc, #296]	; (1000b264 <platform_driver_init+0x1e8>)
1000b13c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b13e:	4a4a      	ldr	r2, [pc, #296]	; (1000b268 <platform_driver_init+0x1ec>)
1000b140:	4b4a      	ldr	r3, [pc, #296]	; (1000b26c <platform_driver_init+0x1f0>)
1000b142:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b144:	4a4a      	ldr	r2, [pc, #296]	; (1000b270 <platform_driver_init+0x1f4>)
1000b146:	4b4b      	ldr	r3, [pc, #300]	; (1000b274 <platform_driver_init+0x1f8>)
1000b148:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b14a:	4a4b      	ldr	r2, [pc, #300]	; (1000b278 <platform_driver_init+0x1fc>)
1000b14c:	4b4b      	ldr	r3, [pc, #300]	; (1000b27c <platform_driver_init+0x200>)
1000b14e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b150:	4a4b      	ldr	r2, [pc, #300]	; (1000b280 <platform_driver_init+0x204>)
1000b152:	4b4c      	ldr	r3, [pc, #304]	; (1000b284 <platform_driver_init+0x208>)
1000b154:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b156:	4a4c      	ldr	r2, [pc, #304]	; (1000b288 <platform_driver_init+0x20c>)
1000b158:	4b4c      	ldr	r3, [pc, #304]	; (1000b28c <platform_driver_init+0x210>)
1000b15a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b15c:	4a4c      	ldr	r2, [pc, #304]	; (1000b290 <platform_driver_init+0x214>)
1000b15e:	4b4d      	ldr	r3, [pc, #308]	; (1000b294 <platform_driver_init+0x218>)
1000b160:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b162:	4a4d      	ldr	r2, [pc, #308]	; (1000b298 <platform_driver_init+0x21c>)
1000b164:	4b4d      	ldr	r3, [pc, #308]	; (1000b29c <platform_driver_init+0x220>)
1000b166:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b168:	22a0      	movs	r2, #160	; 0xa0
1000b16a:	0092      	lsls	r2, r2, #2
1000b16c:	2100      	movs	r1, #0
1000b16e:	484c      	ldr	r0, [pc, #304]	; (1000b2a0 <platform_driver_init+0x224>)
1000b170:	4b4c      	ldr	r3, [pc, #304]	; (1000b2a4 <platform_driver_init+0x228>)
1000b172:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b174:	2280      	movs	r2, #128	; 0x80
1000b176:	0092      	lsls	r2, r2, #2
1000b178:	4b4b      	ldr	r3, [pc, #300]	; (1000b2a8 <platform_driver_init+0x22c>)
1000b17a:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b17c:	4b4b      	ldr	r3, [pc, #300]	; (1000b2ac <platform_driver_init+0x230>)
1000b17e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b180:	4653      	mov	r3, sl
1000b182:	6023      	str	r3, [r4, #0]
1000b184:	464b      	mov	r3, r9
1000b186:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b188:	4b49      	ldr	r3, [pc, #292]	; (1000b2b0 <platform_driver_init+0x234>)
1000b18a:	4642      	mov	r2, r8
1000b18c:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b18e:	683b      	ldr	r3, [r7, #0]
1000b190:	4a48      	ldr	r2, [pc, #288]	; (1000b2b4 <platform_driver_init+0x238>)
1000b192:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b194:	6833      	ldr	r3, [r6, #0]
1000b196:	4a48      	ldr	r2, [pc, #288]	; (1000b2b8 <platform_driver_init+0x23c>)
1000b198:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b19a:	2000      	movs	r0, #0
1000b19c:	4c47      	ldr	r4, [pc, #284]	; (1000b2bc <platform_driver_init+0x240>)
1000b19e:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b1a0:	2001      	movs	r0, #1
1000b1a2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b1a4:	2002      	movs	r0, #2
1000b1a6:	47a0      	blx	r4
		platform_initialized = 1;
1000b1a8:	2201      	movs	r2, #1
1000b1aa:	4b06      	ldr	r3, [pc, #24]	; (1000b1c4 <platform_driver_init+0x148>)
1000b1ac:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b1ae:	2000      	movs	r0, #0
1000b1b0:	e003      	b.n	1000b1ba <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b1b2:	2201      	movs	r2, #1
1000b1b4:	4b03      	ldr	r3, [pc, #12]	; (1000b1c4 <platform_driver_init+0x148>)
1000b1b6:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b1b8:	2001      	movs	r0, #1
	}
	return status;
}
1000b1ba:	bc1c      	pop	{r2, r3, r4}
1000b1bc:	4690      	mov	r8, r2
1000b1be:	4699      	mov	r9, r3
1000b1c0:	46a2      	mov	sl, r4
1000b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1c4:	10014db0 	.word	0x10014db0
1000b1c8:	1000b009 	.word	0x1000b009
1000b1cc:	1000b04d 	.word	0x1000b04d
1000b1d0:	10014dcc 	.word	0x10014dcc
1000b1d4:	e000e100 	.word	0xe000e100
1000b1d8:	10015a24 	.word	0x10015a24
1000b1dc:	000007d7 	.word	0x000007d7
1000b1e0:	000007bd 	.word	0x000007bd
1000b1e4:	10015760 	.word	0x10015760
1000b1e8:	0001bc51 	.word	0x0001bc51
1000b1ec:	10015a28 	.word	0x10015a28
1000b1f0:	100400bc 	.word	0x100400bc
1000b1f4:	10014da4 	.word	0x10014da4
1000b1f8:	100400b8 	.word	0x100400b8
1000b1fc:	10014da0 	.word	0x10014da0
1000b200:	0001b99f 	.word	0x0001b99f
1000b204:	1001575c 	.word	0x1001575c
1000b208:	0001b9db 	.word	0x0001b9db
1000b20c:	10015768 	.word	0x10015768
1000b210:	10015a38 	.word	0x10015a38
1000b214:	1004003c 	.word	0x1004003c
1000b218:	10041fc0 	.word	0x10041fc0
1000b21c:	1001576c 	.word	0x1001576c
1000b220:	10041fc4 	.word	0x10041fc4
1000b224:	10015a34 	.word	0x10015a34
1000b228:	10015a2c 	.word	0x10015a2c
1000b22c:	10041fd4 	.word	0x10041fd4
1000b230:	10041fd8 	.word	0x10041fd8
1000b234:	10015764 	.word	0x10015764
1000b238:	0001cbe9 	.word	0x0001cbe9
1000b23c:	10014dc0 	.word	0x10014dc0
1000b240:	0001cd8f 	.word	0x0001cd8f
1000b244:	10014db4 	.word	0x10014db4
1000b248:	0001cea3 	.word	0x0001cea3
1000b24c:	10014dd0 	.word	0x10014dd0
1000b250:	0001cbcf 	.word	0x0001cbcf
1000b254:	10014dac 	.word	0x10014dac
1000b258:	1000b6f1 	.word	0x1000b6f1
1000b25c:	1000b685 	.word	0x1000b685
1000b260:	100400e4 	.word	0x100400e4
1000b264:	10014dc8 	.word	0x10014dc8
1000b268:	00019fe9 	.word	0x00019fe9
1000b26c:	10014dd8 	.word	0x10014dd8
1000b270:	0001dbdd 	.word	0x0001dbdd
1000b274:	10014da8 	.word	0x10014da8
1000b278:	0001dc5b 	.word	0x0001dc5b
1000b27c:	10014dbc 	.word	0x10014dbc
1000b280:	100405ec 	.word	0x100405ec
1000b284:	10014db8 	.word	0x10014db8
1000b288:	0001d5e3 	.word	0x0001d5e3
1000b28c:	10014dc4 	.word	0x10014dc4
1000b290:	10040c20 	.word	0x10040c20
1000b294:	10014ddc 	.word	0x10014ddc
1000b298:	00019f09 	.word	0x00019f09
1000b29c:	10014d9c 	.word	0x10014d9c
1000b2a0:	100157a4 	.word	0x100157a4
1000b2a4:	100115ad 	.word	0x100115ad
1000b2a8:	10015a3c 	.word	0x10015a3c
1000b2ac:	1000af35 	.word	0x1000af35
1000b2b0:	10015a30 	.word	0x10015a30
1000b2b4:	1000afdd 	.word	0x1000afdd
1000b2b8:	1000b74d 	.word	0x1000b74d
1000b2bc:	1000b735 	.word	0x1000b735

1000b2c0 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b2c0:	4b04      	ldr	r3, [pc, #16]	; (1000b2d4 <platform_register_ble_msg_handler+0x14>)
1000b2c2:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b2c4:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b2c6:	2a01      	cmp	r2, #1
1000b2c8:	d102      	bne.n	1000b2d0 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b2ca:	4b03      	ldr	r3, [pc, #12]	; (1000b2d8 <platform_register_ble_msg_handler+0x18>)
1000b2cc:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b2ce:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b2d0:	0018      	movs	r0, r3
1000b2d2:	4770      	bx	lr
1000b2d4:	10014db0 	.word	0x10014db0
1000b2d8:	10014dcc 	.word	0x10014dcc

1000b2dc <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b2dc:	b570      	push	{r4, r5, r6, lr}
1000b2de:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b2e0:	4b0e      	ldr	r3, [pc, #56]	; (1000b31c <platform_interface_send+0x40>)
1000b2e2:	681b      	ldr	r3, [r3, #0]
1000b2e4:	2b00      	cmp	r3, #0
1000b2e6:	d002      	beq.n	1000b2ee <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b2e8:	8840      	ldrh	r0, [r0, #2]
1000b2ea:	4798      	blx	r3
1000b2ec:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b2ee:	88e3      	ldrh	r3, [r4, #6]
1000b2f0:	88a2      	ldrh	r2, [r4, #4]
1000b2f2:	8861      	ldrh	r1, [r4, #2]
1000b2f4:	8820      	ldrh	r0, [r4, #0]
1000b2f6:	4d0a      	ldr	r5, [pc, #40]	; (1000b320 <platform_interface_send+0x44>)
1000b2f8:	682d      	ldr	r5, [r5, #0]
1000b2fa:	47a8      	blx	r5
1000b2fc:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b2fe:	88e2      	ldrh	r2, [r4, #6]
1000b300:	2a00      	cmp	r2, #0
1000b302:	d102      	bne.n	1000b30a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b304:	4b07      	ldr	r3, [pc, #28]	; (1000b324 <platform_interface_send+0x48>)
1000b306:	4798      	blx	r3
1000b308:	e006      	b.n	1000b318 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b30a:	0021      	movs	r1, r4
1000b30c:	3108      	adds	r1, #8
1000b30e:	4b06      	ldr	r3, [pc, #24]	; (1000b328 <platform_interface_send+0x4c>)
1000b310:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b312:	0028      	movs	r0, r5
1000b314:	4b03      	ldr	r3, [pc, #12]	; (1000b324 <platform_interface_send+0x48>)
1000b316:	4798      	blx	r3
	}
}
1000b318:	bd70      	pop	{r4, r5, r6, pc}
1000b31a:	46c0      	nop			; (mov r8, r8)
1000b31c:	10014da4 	.word	0x10014da4
1000b320:	10014dd8 	.word	0x10014dd8
1000b324:	1000af65 	.word	0x1000af65
1000b328:	1001159b 	.word	0x1001159b

1000b32c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b32c:	b570      	push	{r4, r5, r6, lr}
1000b32e:	0015      	movs	r5, r2
1000b330:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b332:	020a      	lsls	r2, r1, #8
1000b334:	4302      	orrs	r2, r0
1000b336:	4b0a      	ldr	r3, [pc, #40]	; (1000b360 <send_plf_int_msg_ind+0x34>)
1000b338:	681e      	ldr	r6, [r3, #0]
1000b33a:	0023      	movs	r3, r4
1000b33c:	2105      	movs	r1, #5
1000b33e:	20a0      	movs	r0, #160	; 0xa0
1000b340:	00c0      	lsls	r0, r0, #3
1000b342:	47b0      	blx	r6
1000b344:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000b346:	d00a      	beq.n	1000b35e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b348:	2c00      	cmp	r4, #0
1000b34a:	d005      	beq.n	1000b358 <send_plf_int_msg_ind+0x2c>
1000b34c:	2d00      	cmp	r5, #0
1000b34e:	d003      	beq.n	1000b358 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b350:	0022      	movs	r2, r4
1000b352:	0029      	movs	r1, r5
1000b354:	4b03      	ldr	r3, [pc, #12]	; (1000b364 <send_plf_int_msg_ind+0x38>)
1000b356:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b358:	0030      	movs	r0, r6
1000b35a:	4b03      	ldr	r3, [pc, #12]	; (1000b368 <send_plf_int_msg_ind+0x3c>)
1000b35c:	4798      	blx	r3
	}
}
1000b35e:	bd70      	pop	{r4, r5, r6, pc}
1000b360:	10014dd8 	.word	0x10014dd8
1000b364:	1001159b 	.word	0x1001159b
1000b368:	1000af65 	.word	0x1000af65

1000b36c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b36e:	465f      	mov	r7, fp
1000b370:	4656      	mov	r6, sl
1000b372:	464d      	mov	r5, r9
1000b374:	4644      	mov	r4, r8
1000b376:	b4f0      	push	{r4, r5, r6, r7}
1000b378:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b37a:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b37c:	2300      	movs	r3, #0
1000b37e:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b380:	1ce3      	adds	r3, r4, #3
1000b382:	d81c      	bhi.n	1000b3be <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b384:	220d      	movs	r2, #13
1000b386:	2100      	movs	r1, #0
1000b388:	a802      	add	r0, sp, #8
1000b38a:	4b82      	ldr	r3, [pc, #520]	; (1000b594 <platform_event_wait+0x228>)
1000b38c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b38e:	2333      	movs	r3, #51	; 0x33
1000b390:	aa02      	add	r2, sp, #8
1000b392:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b394:	3b30      	subs	r3, #48	; 0x30
1000b396:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b398:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b39a:	3302      	adds	r3, #2
1000b39c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b39e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b3a0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b3a2:	0a23      	lsrs	r3, r4, #8
1000b3a4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b3a6:	0c23      	lsrs	r3, r4, #16
1000b3a8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b3aa:	0e24      	lsrs	r4, r4, #24
1000b3ac:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b3ae:	2301      	movs	r3, #1
1000b3b0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b3b2:	210d      	movs	r1, #13
1000b3b4:	0010      	movs	r0, r2
1000b3b6:	4b78      	ldr	r3, [pc, #480]	; (1000b598 <platform_event_wait+0x22c>)
1000b3b8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b3ba:	2301      	movs	r3, #1
1000b3bc:	4699      	mov	r9, r3
1000b3be:	2400      	movs	r4, #0
1000b3c0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b3c2:	4f76      	ldr	r7, [pc, #472]	; (1000b59c <platform_event_wait+0x230>)
1000b3c4:	4e76      	ldr	r6, [pc, #472]	; (1000b5a0 <platform_event_wait+0x234>)
1000b3c6:	4977      	ldr	r1, [pc, #476]	; (1000b5a4 <platform_event_wait+0x238>)
1000b3c8:	6838      	ldr	r0, [r7, #0]
1000b3ca:	6833      	ldr	r3, [r6, #0]
1000b3cc:	4798      	blx	r3
1000b3ce:	2800      	cmp	r0, #0
1000b3d0:	d000      	beq.n	1000b3d4 <platform_event_wait+0x68>
1000b3d2:	e088      	b.n	1000b4e6 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b3d4:	4b73      	ldr	r3, [pc, #460]	; (1000b5a4 <platform_event_wait+0x238>)
1000b3d6:	681c      	ldr	r4, [r3, #0]
1000b3d8:	88a3      	ldrh	r3, [r4, #4]
1000b3da:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b3dc:	23cd      	movs	r3, #205	; 0xcd
1000b3de:	009b      	lsls	r3, r3, #2
1000b3e0:	459a      	cmp	sl, r3
1000b3e2:	d100      	bne.n	1000b3e6 <platform_event_wait+0x7a>
1000b3e4:	e0c7      	b.n	1000b576 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b3e6:	8923      	ldrh	r3, [r4, #8]
1000b3e8:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b3ea:	8963      	ldrh	r3, [r4, #10]
1000b3ec:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b3ee:	464b      	mov	r3, r9
1000b3f0:	2b00      	cmp	r3, #0
1000b3f2:	d011      	beq.n	1000b418 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b3f4:	220d      	movs	r2, #13
1000b3f6:	2100      	movs	r1, #0
1000b3f8:	a802      	add	r0, sp, #8
1000b3fa:	4b66      	ldr	r3, [pc, #408]	; (1000b594 <platform_event_wait+0x228>)
1000b3fc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b3fe:	2333      	movs	r3, #51	; 0x33
1000b400:	aa02      	add	r2, sp, #8
1000b402:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b404:	3b30      	subs	r3, #48	; 0x30
1000b406:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b408:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b40a:	3302      	adds	r3, #2
1000b40c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b40e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b410:	210d      	movs	r1, #13
1000b412:	0010      	movs	r0, r2
1000b414:	4b60      	ldr	r3, [pc, #384]	; (1000b598 <platform_event_wait+0x22c>)
1000b416:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b418:	23a0      	movs	r3, #160	; 0xa0
1000b41a:	00db      	lsls	r3, r3, #3
1000b41c:	459a      	cmp	sl, r3
1000b41e:	d121      	bne.n	1000b464 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b420:	4b61      	ldr	r3, [pc, #388]	; (1000b5a8 <platform_event_wait+0x23c>)
1000b422:	881b      	ldrh	r3, [r3, #0]
1000b424:	4443      	add	r3, r8
1000b426:	22a0      	movs	r2, #160	; 0xa0
1000b428:	0092      	lsls	r2, r2, #2
1000b42a:	4293      	cmp	r3, r2
1000b42c:	dd02      	ble.n	1000b434 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b42e:	3a80      	subs	r2, #128	; 0x80
1000b430:	4b5d      	ldr	r3, [pc, #372]	; (1000b5a8 <platform_event_wait+0x23c>)
1000b432:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b434:	4b5c      	ldr	r3, [pc, #368]	; (1000b5a8 <platform_event_wait+0x23c>)
1000b436:	469a      	mov	sl, r3
1000b438:	881d      	ldrh	r5, [r3, #0]
1000b43a:	4b5c      	ldr	r3, [pc, #368]	; (1000b5ac <platform_event_wait+0x240>)
1000b43c:	18ed      	adds	r5, r5, r3
1000b43e:	0021      	movs	r1, r4
1000b440:	310c      	adds	r1, #12
1000b442:	4642      	mov	r2, r8
1000b444:	0028      	movs	r0, r5
1000b446:	4b5a      	ldr	r3, [pc, #360]	; (1000b5b0 <platform_event_wait+0x244>)
1000b448:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b44a:	4642      	mov	r2, r8
1000b44c:	0029      	movs	r1, r5
1000b44e:	4658      	mov	r0, fp
1000b450:	4b58      	ldr	r3, [pc, #352]	; (1000b5b4 <platform_event_wait+0x248>)
1000b452:	4798      	blx	r3
				plf_event_buff_index += len;
1000b454:	4653      	mov	r3, sl
1000b456:	881b      	ldrh	r3, [r3, #0]
1000b458:	4443      	add	r3, r8
1000b45a:	4652      	mov	r2, sl
1000b45c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b45e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b460:	2502      	movs	r5, #2
1000b462:	e03a      	b.n	1000b4da <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b464:	4b54      	ldr	r3, [pc, #336]	; (1000b5b8 <platform_event_wait+0x24c>)
1000b466:	681b      	ldr	r3, [r3, #0]
1000b468:	2b00      	cmp	r3, #0
1000b46a:	d032      	beq.n	1000b4d2 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b46c:	4b4d      	ldr	r3, [pc, #308]	; (1000b5a4 <platform_event_wait+0x238>)
1000b46e:	681a      	ldr	r2, [r3, #0]
1000b470:	8893      	ldrh	r3, [r2, #4]
1000b472:	21cd      	movs	r1, #205	; 0xcd
1000b474:	0089      	lsls	r1, r1, #2
1000b476:	428b      	cmp	r3, r1
1000b478:	d104      	bne.n	1000b484 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b47a:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b47c:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b47e:	2b00      	cmp	r3, #0
1000b480:	d02b      	beq.n	1000b4da <platform_event_wait+0x16e>
1000b482:	e028      	b.n	1000b4d6 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b484:	4c4d      	ldr	r4, [pc, #308]	; (1000b5bc <platform_event_wait+0x250>)
1000b486:	4d49      	ldr	r5, [pc, #292]	; (1000b5ac <platform_event_wait+0x240>)
1000b488:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b48a:	702b      	strb	r3, [r5, #0]
1000b48c:	0a1b      	lsrs	r3, r3, #8
1000b48e:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b490:	8910      	ldrh	r0, [r2, #8]
1000b492:	4b4b      	ldr	r3, [pc, #300]	; (1000b5c0 <platform_event_wait+0x254>)
1000b494:	681b      	ldr	r3, [r3, #0]
1000b496:	4798      	blx	r3
1000b498:	7128      	strb	r0, [r5, #4]
1000b49a:	0a00      	lsrs	r0, r0, #8
1000b49c:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b49e:	6820      	ldr	r0, [r4, #0]
1000b4a0:	4b40      	ldr	r3, [pc, #256]	; (1000b5a4 <platform_event_wait+0x238>)
1000b4a2:	681a      	ldr	r2, [r3, #0]
1000b4a4:	88d2      	ldrh	r2, [r2, #6]
1000b4a6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b4a8:	681d      	ldr	r5, [r3, #0]
1000b4aa:	896b      	ldrh	r3, [r5, #10]
1000b4ac:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b4ae:	3008      	adds	r0, #8
1000b4b0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b4b2:	896a      	ldrh	r2, [r5, #10]
1000b4b4:	2a00      	cmp	r2, #0
1000b4b6:	d003      	beq.n	1000b4c0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b4b8:	0029      	movs	r1, r5
1000b4ba:	310c      	adds	r1, #12
1000b4bc:	4b3c      	ldr	r3, [pc, #240]	; (1000b5b0 <platform_event_wait+0x244>)
1000b4be:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b4c0:	8969      	ldrh	r1, [r5, #10]
1000b4c2:	3108      	adds	r1, #8
1000b4c4:	4b3c      	ldr	r3, [pc, #240]	; (1000b5b8 <platform_event_wait+0x24c>)
1000b4c6:	681b      	ldr	r3, [r3, #0]
1000b4c8:	4838      	ldr	r0, [pc, #224]	; (1000b5ac <platform_event_wait+0x240>)
1000b4ca:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b4cc:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b4ce:	2503      	movs	r5, #3
1000b4d0:	e003      	b.n	1000b4da <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b4d2:	2400      	movs	r4, #0
1000b4d4:	e001      	b.n	1000b4da <platform_event_wait+0x16e>
1000b4d6:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b4d8:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b4da:	4b32      	ldr	r3, [pc, #200]	; (1000b5a4 <platform_event_wait+0x238>)
1000b4dc:	6818      	ldr	r0, [r3, #0]
1000b4de:	4b39      	ldr	r3, [pc, #228]	; (1000b5c4 <platform_event_wait+0x258>)
1000b4e0:	681b      	ldr	r3, [r3, #0]
1000b4e2:	4798      	blx	r3
1000b4e4:	e000      	b.n	1000b4e8 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b4e6:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b4e8:	2c00      	cmp	r4, #0
1000b4ea:	d000      	beq.n	1000b4ee <platform_event_wait+0x182>
1000b4ec:	e76b      	b.n	1000b3c6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b4ee:	464b      	mov	r3, r9
1000b4f0:	2b00      	cmp	r3, #0
1000b4f2:	d046      	beq.n	1000b582 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b4f4:	4b29      	ldr	r3, [pc, #164]	; (1000b59c <platform_event_wait+0x230>)
1000b4f6:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b4f8:	2e00      	cmp	r6, #0
1000b4fa:	d104      	bne.n	1000b506 <platform_event_wait+0x19a>
1000b4fc:	2300      	movs	r3, #0
1000b4fe:	6a1c      	ldr	r4, [r3, #32]
1000b500:	2c00      	cmp	r4, #0
1000b502:	d131      	bne.n	1000b568 <platform_event_wait+0x1fc>
1000b504:	e03d      	b.n	1000b582 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b506:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b508:	2314      	movs	r3, #20
1000b50a:	469c      	mov	ip, r3
1000b50c:	44b4      	add	ip, r6
1000b50e:	4663      	mov	r3, ip
1000b510:	4660      	mov	r0, ip
1000b512:	9300      	str	r3, [sp, #0]
1000b514:	4b2c      	ldr	r3, [pc, #176]	; (1000b5c8 <platform_event_wait+0x25c>)
1000b516:	681b      	ldr	r3, [r3, #0]
1000b518:	4798      	blx	r3
	while(NULL != current)
1000b51a:	2c00      	cmp	r4, #0
1000b51c:	d01f      	beq.n	1000b55e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b51e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b520:	23cd      	movs	r3, #205	; 0xcd
1000b522:	009b      	lsls	r3, r3, #2
1000b524:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b526:	4b27      	ldr	r3, [pc, #156]	; (1000b5c4 <platform_event_wait+0x258>)
1000b528:	469a      	mov	sl, r3
1000b52a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b52c:	6803      	ldr	r3, [r0, #0]
1000b52e:	889b      	ldrh	r3, [r3, #4]
1000b530:	4543      	cmp	r3, r8
1000b532:	d110      	bne.n	1000b556 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b534:	2f00      	cmp	r7, #0
1000b536:	d006      	beq.n	1000b546 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b538:	6883      	ldr	r3, [r0, #8]
1000b53a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b53c:	4653      	mov	r3, sl
1000b53e:	681b      	ldr	r3, [r3, #0]
1000b540:	4798      	blx	r3
				current = prev->pstrNext;
1000b542:	68b8      	ldr	r0, [r7, #8]
1000b544:	e009      	b.n	1000b55a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b546:	6883      	ldr	r3, [r0, #8]
1000b548:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b54a:	4b1e      	ldr	r3, [pc, #120]	; (1000b5c4 <platform_event_wait+0x258>)
1000b54c:	681b      	ldr	r3, [r3, #0]
1000b54e:	9301      	str	r3, [sp, #4]
1000b550:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b552:	6a30      	ldr	r0, [r6, #32]
1000b554:	e001      	b.n	1000b55a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b556:	0007      	movs	r7, r0
1000b558:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b55a:	2800      	cmp	r0, #0
1000b55c:	d1e6      	bne.n	1000b52c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b55e:	4b1b      	ldr	r3, [pc, #108]	; (1000b5cc <platform_event_wait+0x260>)
1000b560:	681b      	ldr	r3, [r3, #0]
1000b562:	9800      	ldr	r0, [sp, #0]
1000b564:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b566:	e00c      	b.n	1000b582 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b568:	2314      	movs	r3, #20
1000b56a:	9300      	str	r3, [sp, #0]
1000b56c:	4b16      	ldr	r3, [pc, #88]	; (1000b5c8 <platform_event_wait+0x25c>)
1000b56e:	681b      	ldr	r3, [r3, #0]
1000b570:	2014      	movs	r0, #20
1000b572:	4798      	blx	r3
1000b574:	e7d3      	b.n	1000b51e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b576:	4b10      	ldr	r3, [pc, #64]	; (1000b5b8 <platform_event_wait+0x24c>)
1000b578:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b57a:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b57c:	2b00      	cmp	r3, #0
1000b57e:	d0ac      	beq.n	1000b4da <platform_event_wait+0x16e>
1000b580:	e77b      	b.n	1000b47a <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b582:	0028      	movs	r0, r5
1000b584:	b007      	add	sp, #28
1000b586:	bc3c      	pop	{r2, r3, r4, r5}
1000b588:	4690      	mov	r8, r2
1000b58a:	4699      	mov	r9, r3
1000b58c:	46a2      	mov	sl, r4
1000b58e:	46ab      	mov	fp, r5
1000b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b592:	46c0      	nop			; (mov r8, r8)
1000b594:	100115ad 	.word	0x100115ad
1000b598:	1000b2dd 	.word	0x1000b2dd
1000b59c:	10014ddc 	.word	0x10014ddc
1000b5a0:	10014dc4 	.word	0x10014dc4
1000b5a4:	10014d98 	.word	0x10014d98
1000b5a8:	10015a3c 	.word	0x10015a3c
1000b5ac:	100157a4 	.word	0x100157a4
1000b5b0:	1001159b 	.word	0x1001159b
1000b5b4:	1000aefd 	.word	0x1000aefd
1000b5b8:	10014dcc 	.word	0x10014dcc
1000b5bc:	10014dd4 	.word	0x10014dd4
1000b5c0:	10014da0 	.word	0x10014da0
1000b5c4:	10014d9c 	.word	0x10014d9c
1000b5c8:	10014dbc 	.word	0x10014dbc
1000b5cc:	10014da8 	.word	0x10014da8

1000b5d0 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b5d0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b5d2:	4b03      	ldr	r3, [pc, #12]	; (1000b5e0 <acquire_sleep_lock+0x10>)
1000b5d4:	681b      	ldr	r3, [r3, #0]
1000b5d6:	2080      	movs	r0, #128	; 0x80
1000b5d8:	0200      	lsls	r0, r0, #8
1000b5da:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b5dc:	2008      	movs	r0, #8
1000b5de:	bd10      	pop	{r4, pc}
1000b5e0:	1001575c 	.word	0x1001575c

1000b5e4 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b5e4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b5e6:	4b03      	ldr	r3, [pc, #12]	; (1000b5f4 <release_message_lock+0x10>)
1000b5e8:	681b      	ldr	r3, [r3, #0]
1000b5ea:	2080      	movs	r0, #128	; 0x80
1000b5ec:	01c0      	lsls	r0, r0, #7
1000b5ee:	4798      	blx	r3
	return status;
}
1000b5f0:	2000      	movs	r0, #0
1000b5f2:	bd10      	pop	{r4, pc}
1000b5f4:	10015768 	.word	0x10015768

1000b5f8 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000b5f8:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b5fa:	4c05      	ldr	r4, [pc, #20]	; (1000b610 <release_sleep_lock+0x18>)
1000b5fc:	2080      	movs	r0, #128	; 0x80
1000b5fe:	01c0      	lsls	r0, r0, #7
1000b600:	6823      	ldr	r3, [r4, #0]
1000b602:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000b604:	6823      	ldr	r3, [r4, #0]
1000b606:	2080      	movs	r0, #128	; 0x80
1000b608:	0200      	lsls	r0, r0, #8
1000b60a:	4798      	blx	r3
	return status;
}
1000b60c:	2000      	movs	r0, #0
1000b60e:	bd10      	pop	{r4, pc}
1000b610:	10015768 	.word	0x10015768

1000b614 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b614:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b616:	4a18      	ldr	r2, [pc, #96]	; (1000b678 <gpio1_combined_isr_handler+0x64>)
1000b618:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b61a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b61c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b61e:	2180      	movs	r1, #128	; 0x80
1000b620:	0209      	lsls	r1, r1, #8
1000b622:	4301      	orrs	r1, r0
1000b624:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b626:	0010      	movs	r0, r2
1000b628:	4d14      	ldr	r5, [pc, #80]	; (1000b67c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b62a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b62c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b62e:	05db      	lsls	r3, r3, #23
1000b630:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b632:	d011      	beq.n	1000b658 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b634:	b2db      	uxtb	r3, r3
1000b636:	4259      	negs	r1, r3
1000b638:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b63a:	2b01      	cmp	r3, #1
1000b63c:	d006      	beq.n	1000b64c <gpio1_combined_isr_handler+0x38>
1000b63e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b640:	085b      	lsrs	r3, r3, #1
				index++;
1000b642:	3101      	adds	r1, #1
1000b644:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b646:	2b01      	cmp	r3, #1
1000b648:	d1fa      	bne.n	1000b640 <gpio1_combined_isr_handler+0x2c>
1000b64a:	e000      	b.n	1000b64e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b64c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b64e:	0023      	movs	r3, r4
1000b650:	408b      	lsls	r3, r1
1000b652:	b29b      	uxth	r3, r3
1000b654:	8703      	strh	r3, [r0, #56]	; 0x38
1000b656:	e003      	b.n	1000b660 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b658:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b65a:	432b      	orrs	r3, r5
1000b65c:	b29b      	uxth	r3, r3
1000b65e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b660:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b662:	05db      	lsls	r3, r3, #23
1000b664:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b666:	d1e2      	bne.n	1000b62e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b668:	2180      	movs	r1, #128	; 0x80
1000b66a:	0049      	lsls	r1, r1, #1
1000b66c:	3381      	adds	r3, #129	; 0x81
1000b66e:	33ff      	adds	r3, #255	; 0xff
1000b670:	4a03      	ldr	r2, [pc, #12]	; (1000b680 <gpio1_combined_isr_handler+0x6c>)
1000b672:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b674:	bd30      	pop	{r4, r5, pc}
1000b676:	46c0      	nop			; (mov r8, r8)
1000b678:	40011000 	.word	0x40011000
1000b67c:	ffff8000 	.word	0xffff8000
1000b680:	e000e100 	.word	0xe000e100

1000b684 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b684:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b686:	4a17      	ldr	r2, [pc, #92]	; (1000b6e4 <gpio0_combined_isr_handler+0x60>)
1000b688:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b68a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b68c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b68e:	2180      	movs	r1, #128	; 0x80
1000b690:	0209      	lsls	r1, r1, #8
1000b692:	4301      	orrs	r1, r0
1000b694:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b696:	0010      	movs	r0, r2
1000b698:	4d13      	ldr	r5, [pc, #76]	; (1000b6e8 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b69a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b69c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b69e:	05db      	lsls	r3, r3, #23
1000b6a0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b6a2:	d011      	beq.n	1000b6c8 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b6a4:	b2db      	uxtb	r3, r3
1000b6a6:	4259      	negs	r1, r3
1000b6a8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b6aa:	2b01      	cmp	r3, #1
1000b6ac:	d006      	beq.n	1000b6bc <gpio0_combined_isr_handler+0x38>
1000b6ae:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b6b0:	085b      	lsrs	r3, r3, #1
				index++;
1000b6b2:	3101      	adds	r1, #1
1000b6b4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b6b6:	2b01      	cmp	r3, #1
1000b6b8:	d1fa      	bne.n	1000b6b0 <gpio0_combined_isr_handler+0x2c>
1000b6ba:	e000      	b.n	1000b6be <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b6bc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b6be:	0023      	movs	r3, r4
1000b6c0:	408b      	lsls	r3, r1
1000b6c2:	b29b      	uxth	r3, r3
1000b6c4:	8703      	strh	r3, [r0, #56]	; 0x38
1000b6c6:	e003      	b.n	1000b6d0 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b6c8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b6ca:	432b      	orrs	r3, r5
1000b6cc:	b29b      	uxth	r3, r3
1000b6ce:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b6d0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b6d2:	05db      	lsls	r3, r3, #23
1000b6d4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b6d6:	d1e2      	bne.n	1000b69e <gpio0_combined_isr_handler+0x1a>
1000b6d8:	2180      	movs	r1, #128	; 0x80
1000b6da:	3381      	adds	r3, #129	; 0x81
1000b6dc:	33ff      	adds	r3, #255	; 0xff
1000b6de:	4a03      	ldr	r2, [pc, #12]	; (1000b6ec <gpio0_combined_isr_handler+0x68>)
1000b6e0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b6e2:	bd30      	pop	{r4, r5, pc}
1000b6e4:	40010000 	.word	0x40010000
1000b6e8:	ffff8000 	.word	0xffff8000
1000b6ec:	e000e100 	.word	0xe000e100

1000b6f0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b6f0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b6f2:	4b0c      	ldr	r3, [pc, #48]	; (1000b724 <PORT1_COMB_Handler+0x34>)
1000b6f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b6f6:	0b5b      	lsrs	r3, r3, #13
1000b6f8:	d010      	beq.n	1000b71c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b6fa:	4b0b      	ldr	r3, [pc, #44]	; (1000b728 <PORT1_COMB_Handler+0x38>)
1000b6fc:	681b      	ldr	r3, [r3, #0]
1000b6fe:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b700:	4a08      	ldr	r2, [pc, #32]	; (1000b724 <PORT1_COMB_Handler+0x34>)
1000b702:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b704:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b706:	0b5b      	lsrs	r3, r3, #13
1000b708:	035b      	lsls	r3, r3, #13
1000b70a:	430b      	orrs	r3, r1
1000b70c:	8713      	strh	r3, [r2, #56]	; 0x38
1000b70e:	2180      	movs	r1, #128	; 0x80
1000b710:	0049      	lsls	r1, r1, #1
1000b712:	23c0      	movs	r3, #192	; 0xc0
1000b714:	005b      	lsls	r3, r3, #1
1000b716:	4a05      	ldr	r2, [pc, #20]	; (1000b72c <PORT1_COMB_Handler+0x3c>)
1000b718:	50d1      	str	r1, [r2, r3]
1000b71a:	e001      	b.n	1000b720 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b71c:	4b04      	ldr	r3, [pc, #16]	; (1000b730 <PORT1_COMB_Handler+0x40>)
1000b71e:	4798      	blx	r3
	}
}
1000b720:	bd10      	pop	{r4, pc}
1000b722:	46c0      	nop			; (mov r8, r8)
1000b724:	40011000 	.word	0x40011000
1000b728:	10015a28 	.word	0x10015a28
1000b72c:	e000e100 	.word	0xe000e100
1000b730:	1000b615 	.word	0x1000b615

1000b734 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b734:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b736:	2802      	cmp	r0, #2
1000b738:	d804      	bhi.n	1000b744 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b73a:	0080      	lsls	r0, r0, #2
1000b73c:	2200      	movs	r2, #0
1000b73e:	4b02      	ldr	r3, [pc, #8]	; (1000b748 <wakeup_int_unregister_callback+0x14>)
1000b740:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b742:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b744:	0018      	movs	r0, r3
1000b746:	4770      	bx	lr
1000b748:	10015a40 	.word	0x10015a40

1000b74c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b74c:	b510      	push	{r4, lr}
1000b74e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b750:	7803      	ldrb	r3, [r0, #0]
1000b752:	2b01      	cmp	r3, #1
1000b754:	d108      	bne.n	1000b768 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b756:	4b11      	ldr	r3, [pc, #68]	; (1000b79c <wakeup_active_event_callback+0x50>)
1000b758:	681b      	ldr	r3, [r3, #0]
1000b75a:	2b00      	cmp	r3, #0
1000b75c:	d000      	beq.n	1000b760 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b75e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b760:	23ff      	movs	r3, #255	; 0xff
1000b762:	6822      	ldr	r2, [r4, #0]
1000b764:	439a      	bics	r2, r3
1000b766:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b768:	7863      	ldrb	r3, [r4, #1]
1000b76a:	2b01      	cmp	r3, #1
1000b76c:	d108      	bne.n	1000b780 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b76e:	4b0b      	ldr	r3, [pc, #44]	; (1000b79c <wakeup_active_event_callback+0x50>)
1000b770:	685b      	ldr	r3, [r3, #4]
1000b772:	2b00      	cmp	r3, #0
1000b774:	d000      	beq.n	1000b778 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b776:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b778:	4b09      	ldr	r3, [pc, #36]	; (1000b7a0 <wakeup_active_event_callback+0x54>)
1000b77a:	6822      	ldr	r2, [r4, #0]
1000b77c:	4013      	ands	r3, r2
1000b77e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b780:	78a3      	ldrb	r3, [r4, #2]
1000b782:	2b01      	cmp	r3, #1
1000b784:	d108      	bne.n	1000b798 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b786:	4b05      	ldr	r3, [pc, #20]	; (1000b79c <wakeup_active_event_callback+0x50>)
1000b788:	689b      	ldr	r3, [r3, #8]
1000b78a:	2b00      	cmp	r3, #0
1000b78c:	d000      	beq.n	1000b790 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b78e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b790:	4b04      	ldr	r3, [pc, #16]	; (1000b7a4 <wakeup_active_event_callback+0x58>)
1000b792:	6822      	ldr	r2, [r4, #0]
1000b794:	4013      	ands	r3, r2
1000b796:	6023      	str	r3, [r4, #0]
	}
}
1000b798:	bd10      	pop	{r4, pc}
1000b79a:	46c0      	nop			; (mov r8, r8)
1000b79c:	10015a40 	.word	0x10015a40
1000b7a0:	ffff00ff 	.word	0xffff00ff
1000b7a4:	ff00ffff 	.word	0xff00ffff

1000b7a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7aa:	4647      	mov	r7, r8
1000b7ac:	b480      	push	{r7}
1000b7ae:	000c      	movs	r4, r1
1000b7b0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b7b2:	2800      	cmp	r0, #0
1000b7b4:	d10d      	bne.n	1000b7d2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b7b6:	2a00      	cmp	r2, #0
1000b7b8:	dd0e      	ble.n	1000b7d8 <_read+0x30>
1000b7ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b7bc:	4e08      	ldr	r6, [pc, #32]	; (1000b7e0 <_read+0x38>)
1000b7be:	4d09      	ldr	r5, [pc, #36]	; (1000b7e4 <_read+0x3c>)
1000b7c0:	6830      	ldr	r0, [r6, #0]
1000b7c2:	0021      	movs	r1, r4
1000b7c4:	682b      	ldr	r3, [r5, #0]
1000b7c6:	4798      	blx	r3
		ptr++;
1000b7c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b7ca:	42a7      	cmp	r7, r4
1000b7cc:	d1f8      	bne.n	1000b7c0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b7ce:	4640      	mov	r0, r8
1000b7d0:	e003      	b.n	1000b7da <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b7d2:	2001      	movs	r0, #1
1000b7d4:	4240      	negs	r0, r0
1000b7d6:	e000      	b.n	1000b7da <_read+0x32>
	}

	for (; len > 0; --len) {
1000b7d8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b7da:	bc04      	pop	{r2}
1000b7dc:	4690      	mov	r8, r2
1000b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b7e0:	10015a54 	.word	0x10015a54
1000b7e4:	10015a4c 	.word	0x10015a4c

1000b7e8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7ea:	4647      	mov	r7, r8
1000b7ec:	b480      	push	{r7}
1000b7ee:	000e      	movs	r6, r1
1000b7f0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b7f2:	3801      	subs	r0, #1
1000b7f4:	2802      	cmp	r0, #2
1000b7f6:	d811      	bhi.n	1000b81c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b7f8:	2a00      	cmp	r2, #0
1000b7fa:	d012      	beq.n	1000b822 <_write+0x3a>
1000b7fc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b7fe:	4b0c      	ldr	r3, [pc, #48]	; (1000b830 <_write+0x48>)
1000b800:	4698      	mov	r8, r3
1000b802:	4f0c      	ldr	r7, [pc, #48]	; (1000b834 <_write+0x4c>)
1000b804:	4643      	mov	r3, r8
1000b806:	6818      	ldr	r0, [r3, #0]
1000b808:	5d31      	ldrb	r1, [r6, r4]
1000b80a:	683b      	ldr	r3, [r7, #0]
1000b80c:	4798      	blx	r3
1000b80e:	2800      	cmp	r0, #0
1000b810:	db09      	blt.n	1000b826 <_write+0x3e>
			return -1;
		}
		++nChars;
1000b812:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b814:	42a5      	cmp	r5, r4
1000b816:	d1f5      	bne.n	1000b804 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b818:	0020      	movs	r0, r4
1000b81a:	e006      	b.n	1000b82a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b81c:	2001      	movs	r0, #1
1000b81e:	4240      	negs	r0, r0
1000b820:	e003      	b.n	1000b82a <_write+0x42>
	}

	for (; len != 0; --len) {
1000b822:	2000      	movs	r0, #0
1000b824:	e001      	b.n	1000b82a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000b826:	2001      	movs	r0, #1
1000b828:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000b82a:	bc04      	pop	{r2}
1000b82c:	4690      	mov	r8, r2
1000b82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b830:	10015a54 	.word	0x10015a54
1000b834:	10015a50 	.word	0x10015a50

1000b838 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b838:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b83a:	4b20      	ldr	r3, [pc, #128]	; (1000b8bc <uart_rx0_isr_handler+0x84>)
1000b83c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b83e:	6823      	ldr	r3, [r4, #0]
1000b840:	7d1d      	ldrb	r5, [r3, #20]
1000b842:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b844:	066a      	lsls	r2, r5, #25
1000b846:	d513      	bpl.n	1000b870 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b848:	211e      	movs	r1, #30
1000b84a:	2222      	movs	r2, #34	; 0x22
1000b84c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b84e:	7e1a      	ldrb	r2, [r3, #24]
1000b850:	3123      	adds	r1, #35	; 0x23
1000b852:	438a      	bics	r2, r1
1000b854:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b856:	2321      	movs	r3, #33	; 0x21
1000b858:	5ce3      	ldrb	r3, [r4, r3]
1000b85a:	071b      	lsls	r3, r3, #28
1000b85c:	d506      	bpl.n	1000b86c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b85e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b860:	5ce3      	ldrb	r3, [r4, r3]
1000b862:	071b      	lsls	r3, r3, #28
1000b864:	d502      	bpl.n	1000b86c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b866:	0020      	movs	r0, r4
1000b868:	6923      	ldr	r3, [r4, #16]
1000b86a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b86c:	6823      	ldr	r3, [r4, #0]
1000b86e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b870:	07eb      	lsls	r3, r5, #31
1000b872:	d522      	bpl.n	1000b8ba <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b874:	6823      	ldr	r3, [r4, #0]
1000b876:	7c1b      	ldrb	r3, [r3, #16]
1000b878:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b87a:	6962      	ldr	r2, [r4, #20]
1000b87c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b87e:	6963      	ldr	r3, [r4, #20]
1000b880:	3301      	adds	r3, #1
1000b882:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b884:	8ba3      	ldrh	r3, [r4, #28]
1000b886:	3b01      	subs	r3, #1
1000b888:	b29b      	uxth	r3, r3
1000b88a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b88c:	8ba3      	ldrh	r3, [r4, #28]
1000b88e:	b29b      	uxth	r3, r3
1000b890:	2b00      	cmp	r3, #0
1000b892:	d112      	bne.n	1000b8ba <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b894:	3321      	adds	r3, #33	; 0x21
1000b896:	5ce3      	ldrb	r3, [r4, r3]
1000b898:	075b      	lsls	r3, r3, #29
1000b89a:	d50e      	bpl.n	1000b8ba <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b89c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b89e:	5ce3      	ldrb	r3, [r4, r3]
1000b8a0:	075b      	lsls	r3, r3, #29
1000b8a2:	d50a      	bpl.n	1000b8ba <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b8a4:	2200      	movs	r2, #0
1000b8a6:	2322      	movs	r3, #34	; 0x22
1000b8a8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b8aa:	6822      	ldr	r2, [r4, #0]
1000b8ac:	7e13      	ldrb	r3, [r2, #24]
1000b8ae:	2101      	movs	r1, #1
1000b8b0:	438b      	bics	r3, r1
1000b8b2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b8b4:	68e3      	ldr	r3, [r4, #12]
1000b8b6:	0020      	movs	r0, r4
1000b8b8:	4798      	blx	r3
			}
		}
	}
}
1000b8ba:	bd70      	pop	{r4, r5, r6, pc}
1000b8bc:	10015a58 	.word	0x10015a58

1000b8c0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b8c0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b8c2:	4b21      	ldr	r3, [pc, #132]	; (1000b948 <uart_tx0_isr_handler+0x88>)
1000b8c4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b8c6:	6823      	ldr	r3, [r4, #0]
1000b8c8:	791d      	ldrb	r5, [r3, #4]
1000b8ca:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b8cc:	07ea      	lsls	r2, r5, #31
1000b8ce:	d517      	bpl.n	1000b900 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b8d0:	69a2      	ldr	r2, [r4, #24]
1000b8d2:	7811      	ldrb	r1, [r2, #0]
1000b8d4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b8d6:	3201      	adds	r2, #1
1000b8d8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b8da:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b8dc:	8be3      	ldrh	r3, [r4, #30]
1000b8de:	3b01      	subs	r3, #1
1000b8e0:	b29b      	uxth	r3, r3
1000b8e2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b8e4:	8be3      	ldrh	r3, [r4, #30]
1000b8e6:	b29b      	uxth	r3, r3
1000b8e8:	2b00      	cmp	r3, #0
1000b8ea:	d109      	bne.n	1000b900 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b8ec:	6822      	ldr	r2, [r4, #0]
1000b8ee:	7a13      	ldrb	r3, [r2, #8]
1000b8f0:	2101      	movs	r1, #1
1000b8f2:	438b      	bics	r3, r1
1000b8f4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b8f6:	6822      	ldr	r2, [r4, #0]
1000b8f8:	7a11      	ldrb	r1, [r2, #8]
1000b8fa:	2310      	movs	r3, #16
1000b8fc:	430b      	orrs	r3, r1
1000b8fe:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b900:	06eb      	lsls	r3, r5, #27
1000b902:	d512      	bpl.n	1000b92a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b904:	2321      	movs	r3, #33	; 0x21
1000b906:	5ce3      	ldrb	r3, [r4, r3]
1000b908:	07db      	lsls	r3, r3, #31
1000b90a:	d50e      	bpl.n	1000b92a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b90c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b90e:	5ce3      	ldrb	r3, [r4, r3]
1000b910:	07db      	lsls	r3, r3, #31
1000b912:	d50a      	bpl.n	1000b92a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b914:	2200      	movs	r2, #0
1000b916:	2322      	movs	r3, #34	; 0x22
1000b918:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b91a:	6822      	ldr	r2, [r4, #0]
1000b91c:	7a13      	ldrb	r3, [r2, #8]
1000b91e:	2110      	movs	r1, #16
1000b920:	438b      	bics	r3, r1
1000b922:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b924:	0020      	movs	r0, r4
1000b926:	6863      	ldr	r3, [r4, #4]
1000b928:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b92a:	06ab      	lsls	r3, r5, #26
1000b92c:	d50a      	bpl.n	1000b944 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b92e:	2321      	movs	r3, #33	; 0x21
1000b930:	5ce3      	ldrb	r3, [r4, r3]
1000b932:	079b      	lsls	r3, r3, #30
1000b934:	d506      	bpl.n	1000b944 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b936:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b938:	5ce3      	ldrb	r3, [r4, r3]
1000b93a:	079b      	lsls	r3, r3, #30
1000b93c:	d502      	bpl.n	1000b944 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b93e:	68a3      	ldr	r3, [r4, #8]
1000b940:	0020      	movs	r0, r4
1000b942:	4798      	blx	r3
		}

	}
}
1000b944:	bd70      	pop	{r4, r5, r6, pc}
1000b946:	46c0      	nop			; (mov r8, r8)
1000b948:	10015a58 	.word	0x10015a58

1000b94c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b94c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b94e:	4b20      	ldr	r3, [pc, #128]	; (1000b9d0 <uart_rx1_isr_handler+0x84>)
1000b950:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b952:	6823      	ldr	r3, [r4, #0]
1000b954:	7d1d      	ldrb	r5, [r3, #20]
1000b956:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b958:	066a      	lsls	r2, r5, #25
1000b95a:	d513      	bpl.n	1000b984 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b95c:	211e      	movs	r1, #30
1000b95e:	2222      	movs	r2, #34	; 0x22
1000b960:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b962:	7e1a      	ldrb	r2, [r3, #24]
1000b964:	3123      	adds	r1, #35	; 0x23
1000b966:	438a      	bics	r2, r1
1000b968:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b96a:	2321      	movs	r3, #33	; 0x21
1000b96c:	5ce3      	ldrb	r3, [r4, r3]
1000b96e:	071b      	lsls	r3, r3, #28
1000b970:	d506      	bpl.n	1000b980 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b972:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b974:	5ce3      	ldrb	r3, [r4, r3]
1000b976:	071b      	lsls	r3, r3, #28
1000b978:	d502      	bpl.n	1000b980 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b97a:	0020      	movs	r0, r4
1000b97c:	6923      	ldr	r3, [r4, #16]
1000b97e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b980:	6823      	ldr	r3, [r4, #0]
1000b982:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b984:	07eb      	lsls	r3, r5, #31
1000b986:	d522      	bpl.n	1000b9ce <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b988:	6823      	ldr	r3, [r4, #0]
1000b98a:	7c1b      	ldrb	r3, [r3, #16]
1000b98c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b98e:	6962      	ldr	r2, [r4, #20]
1000b990:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b992:	6963      	ldr	r3, [r4, #20]
1000b994:	3301      	adds	r3, #1
1000b996:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b998:	8ba3      	ldrh	r3, [r4, #28]
1000b99a:	3b01      	subs	r3, #1
1000b99c:	b29b      	uxth	r3, r3
1000b99e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b9a0:	8ba3      	ldrh	r3, [r4, #28]
1000b9a2:	b29b      	uxth	r3, r3
1000b9a4:	2b00      	cmp	r3, #0
1000b9a6:	d112      	bne.n	1000b9ce <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b9a8:	3321      	adds	r3, #33	; 0x21
1000b9aa:	5ce3      	ldrb	r3, [r4, r3]
1000b9ac:	075b      	lsls	r3, r3, #29
1000b9ae:	d50e      	bpl.n	1000b9ce <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b9b0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b9b2:	5ce3      	ldrb	r3, [r4, r3]
1000b9b4:	075b      	lsls	r3, r3, #29
1000b9b6:	d50a      	bpl.n	1000b9ce <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b9b8:	2200      	movs	r2, #0
1000b9ba:	2322      	movs	r3, #34	; 0x22
1000b9bc:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b9be:	6822      	ldr	r2, [r4, #0]
1000b9c0:	7e13      	ldrb	r3, [r2, #24]
1000b9c2:	2101      	movs	r1, #1
1000b9c4:	438b      	bics	r3, r1
1000b9c6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b9c8:	68e3      	ldr	r3, [r4, #12]
1000b9ca:	0020      	movs	r0, r4
1000b9cc:	4798      	blx	r3
			}
		}
	}
}
1000b9ce:	bd70      	pop	{r4, r5, r6, pc}
1000b9d0:	10015a58 	.word	0x10015a58

1000b9d4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b9d4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b9d6:	4b21      	ldr	r3, [pc, #132]	; (1000ba5c <uart_tx1_isr_handler+0x88>)
1000b9d8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b9da:	6823      	ldr	r3, [r4, #0]
1000b9dc:	791d      	ldrb	r5, [r3, #4]
1000b9de:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b9e0:	07ea      	lsls	r2, r5, #31
1000b9e2:	d517      	bpl.n	1000ba14 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b9e4:	69a2      	ldr	r2, [r4, #24]
1000b9e6:	7811      	ldrb	r1, [r2, #0]
1000b9e8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b9ea:	3201      	adds	r2, #1
1000b9ec:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b9ee:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b9f0:	8be3      	ldrh	r3, [r4, #30]
1000b9f2:	3b01      	subs	r3, #1
1000b9f4:	b29b      	uxth	r3, r3
1000b9f6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b9f8:	8be3      	ldrh	r3, [r4, #30]
1000b9fa:	b29b      	uxth	r3, r3
1000b9fc:	2b00      	cmp	r3, #0
1000b9fe:	d109      	bne.n	1000ba14 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ba00:	6822      	ldr	r2, [r4, #0]
1000ba02:	7a13      	ldrb	r3, [r2, #8]
1000ba04:	2101      	movs	r1, #1
1000ba06:	438b      	bics	r3, r1
1000ba08:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ba0a:	6822      	ldr	r2, [r4, #0]
1000ba0c:	7a11      	ldrb	r1, [r2, #8]
1000ba0e:	2310      	movs	r3, #16
1000ba10:	430b      	orrs	r3, r1
1000ba12:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ba14:	06eb      	lsls	r3, r5, #27
1000ba16:	d512      	bpl.n	1000ba3e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ba18:	2321      	movs	r3, #33	; 0x21
1000ba1a:	5ce3      	ldrb	r3, [r4, r3]
1000ba1c:	07db      	lsls	r3, r3, #31
1000ba1e:	d50e      	bpl.n	1000ba3e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ba20:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ba22:	5ce3      	ldrb	r3, [r4, r3]
1000ba24:	07db      	lsls	r3, r3, #31
1000ba26:	d50a      	bpl.n	1000ba3e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ba28:	2200      	movs	r2, #0
1000ba2a:	2322      	movs	r3, #34	; 0x22
1000ba2c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ba2e:	6822      	ldr	r2, [r4, #0]
1000ba30:	7a13      	ldrb	r3, [r2, #8]
1000ba32:	2110      	movs	r1, #16
1000ba34:	438b      	bics	r3, r1
1000ba36:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ba38:	0020      	movs	r0, r4
1000ba3a:	6863      	ldr	r3, [r4, #4]
1000ba3c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ba3e:	06ab      	lsls	r3, r5, #26
1000ba40:	d50a      	bpl.n	1000ba58 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ba42:	2321      	movs	r3, #33	; 0x21
1000ba44:	5ce3      	ldrb	r3, [r4, r3]
1000ba46:	079b      	lsls	r3, r3, #30
1000ba48:	d506      	bpl.n	1000ba58 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ba4a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ba4c:	5ce3      	ldrb	r3, [r4, r3]
1000ba4e:	079b      	lsls	r3, r3, #30
1000ba50:	d502      	bpl.n	1000ba58 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ba52:	68a3      	ldr	r3, [r4, #8]
1000ba54:	0020      	movs	r0, r4
1000ba56:	4798      	blx	r3
		}

	}
}
1000ba58:	bd70      	pop	{r4, r5, r6, pc}
1000ba5a:	46c0      	nop			; (mov r8, r8)
1000ba5c:	10015a58 	.word	0x10015a58

1000ba60 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000ba60:	23e1      	movs	r3, #225	; 0xe1
1000ba62:	025b      	lsls	r3, r3, #9
1000ba64:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000ba66:	2300      	movs	r3, #0
1000ba68:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000ba6a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000ba6c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000ba6e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000ba70:	3302      	adds	r3, #2
1000ba72:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000ba74:	2203      	movs	r2, #3
1000ba76:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000ba78:	3201      	adds	r2, #1
1000ba7a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000ba7c:	3201      	adds	r2, #1
1000ba7e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000ba80:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000ba82:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000ba84:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000ba86:	6243      	str	r3, [r0, #36]	; 0x24
}
1000ba88:	4770      	bx	lr
1000ba8a:	46c0      	nop			; (mov r8, r8)

1000ba8c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba8e:	464f      	mov	r7, r9
1000ba90:	4646      	mov	r6, r8
1000ba92:	b4c0      	push	{r6, r7}
1000ba94:	0005      	movs	r5, r0
1000ba96:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000ba98:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000ba9a:	2300      	movs	r3, #0
1000ba9c:	6043      	str	r3, [r0, #4]
1000ba9e:	6083      	str	r3, [r0, #8]
1000baa0:	60c3      	str	r3, [r0, #12]
1000baa2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000baa4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000baa6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000baa8:	2200      	movs	r2, #0
1000baaa:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000baac:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000baae:	3320      	adds	r3, #32
1000bab0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000bab2:	3301      	adds	r3, #1
1000bab4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000bab6:	3301      	adds	r3, #1
1000bab8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000baba:	4b55      	ldr	r3, [pc, #340]	; (1000bc10 <uart_init+0x184>)
1000babc:	4299      	cmp	r1, r3
1000babe:	d118      	bne.n	1000baf2 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000bac0:	2009      	movs	r0, #9
1000bac2:	4c54      	ldr	r4, [pc, #336]	; (1000bc14 <uart_init+0x188>)
1000bac4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000bac6:	200a      	movs	r0, #10
1000bac8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000baca:	2009      	movs	r0, #9
1000bacc:	4c52      	ldr	r4, [pc, #328]	; (1000bc18 <uart_init+0x18c>)
1000bace:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000bad0:	200a      	movs	r0, #10
1000bad2:	47a0      	blx	r4
		_uart_instances[0] = module;
1000bad4:	4b51      	ldr	r3, [pc, #324]	; (1000bc1c <uart_init+0x190>)
1000bad6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000bad8:	4951      	ldr	r1, [pc, #324]	; (1000bc20 <uart_init+0x194>)
1000bada:	2010      	movs	r0, #16
1000badc:	4c51      	ldr	r4, [pc, #324]	; (1000bc24 <uart_init+0x198>)
1000bade:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000bae0:	4951      	ldr	r1, [pc, #324]	; (1000bc28 <uart_init+0x19c>)
1000bae2:	2011      	movs	r0, #17
1000bae4:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bae6:	4b51      	ldr	r3, [pc, #324]	; (1000bc2c <uart_init+0x1a0>)
1000bae8:	2201      	movs	r2, #1
1000baea:	601a      	str	r2, [r3, #0]
1000baec:	3201      	adds	r2, #1
1000baee:	601a      	str	r2, [r3, #0]
1000baf0:	e01a      	b.n	1000bb28 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000baf2:	4b4f      	ldr	r3, [pc, #316]	; (1000bc30 <uart_init+0x1a4>)
1000baf4:	4299      	cmp	r1, r3
1000baf6:	d117      	bne.n	1000bb28 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000baf8:	200b      	movs	r0, #11
1000bafa:	4c46      	ldr	r4, [pc, #280]	; (1000bc14 <uart_init+0x188>)
1000bafc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000bafe:	200c      	movs	r0, #12
1000bb00:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000bb02:	200b      	movs	r0, #11
1000bb04:	4c44      	ldr	r4, [pc, #272]	; (1000bc18 <uart_init+0x18c>)
1000bb06:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000bb08:	200c      	movs	r0, #12
1000bb0a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000bb0c:	4b43      	ldr	r3, [pc, #268]	; (1000bc1c <uart_init+0x190>)
1000bb0e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000bb10:	4948      	ldr	r1, [pc, #288]	; (1000bc34 <uart_init+0x1a8>)
1000bb12:	2012      	movs	r0, #18
1000bb14:	4c43      	ldr	r4, [pc, #268]	; (1000bc24 <uart_init+0x198>)
1000bb16:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000bb18:	4947      	ldr	r1, [pc, #284]	; (1000bc38 <uart_init+0x1ac>)
1000bb1a:	2013      	movs	r0, #19
1000bb1c:	47a0      	blx	r4
1000bb1e:	4b43      	ldr	r3, [pc, #268]	; (1000bc2c <uart_init+0x1a0>)
1000bb20:	2204      	movs	r2, #4
1000bb22:	601a      	str	r2, [r3, #0]
1000bb24:	3204      	adds	r2, #4
1000bb26:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bb28:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000bb2a:	2204      	movs	r2, #4
1000bb2c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bb2e:	2b00      	cmp	r3, #0
1000bb30:	d152      	bne.n	1000bbd8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000bb32:	3302      	adds	r3, #2
1000bb34:	4698      	mov	r8, r3
1000bb36:	e04f      	b.n	1000bbd8 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bb38:	8a31      	ldrh	r1, [r6, #16]
1000bb3a:	ce01      	ldmia	r6!, {r0}
1000bb3c:	b2c0      	uxtb	r0, r0
1000bb3e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000bb40:	3401      	adds	r4, #1
1000bb42:	b2e4      	uxtb	r4, r4
1000bb44:	4544      	cmp	r4, r8
1000bb46:	d3f7      	bcc.n	1000bb38 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bb48:	682b      	ldr	r3, [r5, #0]
1000bb4a:	7d1a      	ldrb	r2, [r3, #20]
1000bb4c:	07d2      	lsls	r2, r2, #31
1000bb4e:	d504      	bpl.n	1000bb5a <uart_init+0xce>
1000bb50:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000bb52:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bb54:	7d1a      	ldrb	r2, [r3, #20]
1000bb56:	420a      	tst	r2, r1
1000bb58:	d1fb      	bne.n	1000bb52 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000bb5a:	2100      	movs	r1, #0
1000bb5c:	2220      	movs	r2, #32
1000bb5e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000bb60:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000bb62:	1e59      	subs	r1, r3, #1
1000bb64:	418b      	sbcs	r3, r1
1000bb66:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000bb68:	793b      	ldrb	r3, [r7, #4]
1000bb6a:	797a      	ldrb	r2, [r7, #5]
1000bb6c:	4313      	orrs	r3, r2
1000bb6e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bb70:	79ba      	ldrb	r2, [r7, #6]
1000bb72:	2a02      	cmp	r2, #2
1000bb74:	d00d      	beq.n	1000bb92 <uart_init+0x106>
1000bb76:	b2d1      	uxtb	r1, r2
1000bb78:	2902      	cmp	r1, #2
1000bb7a:	d802      	bhi.n	1000bb82 <uart_init+0xf6>
1000bb7c:	2a01      	cmp	r2, #1
1000bb7e:	d005      	beq.n	1000bb8c <uart_init+0x100>
1000bb80:	e00f      	b.n	1000bba2 <uart_init+0x116>
1000bb82:	2a03      	cmp	r2, #3
1000bb84:	d008      	beq.n	1000bb98 <uart_init+0x10c>
1000bb86:	2a04      	cmp	r2, #4
1000bb88:	d009      	beq.n	1000bb9e <uart_init+0x112>
1000bb8a:	e00a      	b.n	1000bba2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bb8c:	2202      	movs	r2, #2
1000bb8e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000bb90:	e007      	b.n	1000bba2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000bb92:	2206      	movs	r2, #6
1000bb94:	4313      	orrs	r3, r2
			break;
1000bb96:	e004      	b.n	1000bba2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bb98:	220a      	movs	r2, #10
1000bb9a:	4313      	orrs	r3, r2
			break;
1000bb9c:	e001      	b.n	1000bba2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bb9e:	220e      	movs	r2, #14
1000bba0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000bba2:	2220      	movs	r2, #32
1000bba4:	6829      	ldr	r1, [r5, #0]
1000bba6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000bba8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000bbaa:	4b24      	ldr	r3, [pc, #144]	; (1000bc3c <uart_init+0x1b0>)
1000bbac:	4798      	blx	r3
1000bbae:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000bbb0:	0031      	movs	r1, r6
1000bbb2:	4b23      	ldr	r3, [pc, #140]	; (1000bc40 <uart_init+0x1b4>)
1000bbb4:	4798      	blx	r3
1000bbb6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000bbb8:	0400      	lsls	r0, r0, #16
1000bbba:	0c00      	lsrs	r0, r0, #16
1000bbbc:	4370      	muls	r0, r6
1000bbbe:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bbc0:	0931      	lsrs	r1, r6, #4
1000bbc2:	4288      	cmp	r0, r1
1000bbc4:	d906      	bls.n	1000bbd4 <uart_init+0x148>
1000bbc6:	2300      	movs	r3, #0
		i++;
1000bbc8:	3301      	adds	r3, #1
1000bbca:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000bbcc:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bbce:	4288      	cmp	r0, r1
1000bbd0:	d8fa      	bhi.n	1000bbc8 <uart_init+0x13c>
1000bbd2:	e007      	b.n	1000bbe4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000bbd4:	2300      	movs	r3, #0
1000bbd6:	e005      	b.n	1000bbe4 <uart_init+0x158>
1000bbd8:	003e      	movs	r6, r7
1000bbda:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bbdc:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bbde:	4b19      	ldr	r3, [pc, #100]	; (1000bc44 <uart_init+0x1b8>)
1000bbe0:	4699      	mov	r9, r3
1000bbe2:	e7a9      	b.n	1000bb38 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000bbe4:	2100      	movs	r1, #0
1000bbe6:	2028      	movs	r0, #40	; 0x28
1000bbe8:	682c      	ldr	r4, [r5, #0]
1000bbea:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000bbec:	3301      	adds	r3, #1
1000bbee:	071b      	lsls	r3, r3, #28
1000bbf0:	0f5b      	lsrs	r3, r3, #29
1000bbf2:	00d2      	lsls	r2, r2, #3
1000bbf4:	4313      	orrs	r3, r2
1000bbf6:	b29b      	uxth	r3, r3
1000bbf8:	682a      	ldr	r2, [r5, #0]
1000bbfa:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bbfc:	682b      	ldr	r3, [r5, #0]
1000bbfe:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bc00:	682b      	ldr	r3, [r5, #0]
1000bc02:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000bc04:	2000      	movs	r0, #0
1000bc06:	bc0c      	pop	{r2, r3}
1000bc08:	4690      	mov	r8, r2
1000bc0a:	4699      	mov	r9, r3
1000bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bc0e:	46c0      	nop			; (mov r8, r8)
1000bc10:	40004000 	.word	0x40004000
1000bc14:	1000c8b5 	.word	0x1000c8b5
1000bc18:	1000c559 	.word	0x1000c559
1000bc1c:	10015a58 	.word	0x10015a58
1000bc20:	1000b839 	.word	0x1000b839
1000bc24:	1000cd1d 	.word	0x1000cd1d
1000bc28:	1000b8c1 	.word	0x1000b8c1
1000bc2c:	e000e100 	.word	0xe000e100
1000bc30:	40005000 	.word	0x40005000
1000bc34:	1000b94d 	.word	0x1000b94d
1000bc38:	1000b9d5 	.word	0x1000b9d5
1000bc3c:	1000c54d 	.word	0x1000c54d
1000bc40:	1000f825 	.word	0x1000f825
1000bc44:	1000c001 	.word	0x1000c001

1000bc48 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bc48:	6802      	ldr	r2, [r0, #0]
1000bc4a:	2001      	movs	r0, #1
1000bc4c:	7913      	ldrb	r3, [r2, #4]
1000bc4e:	4203      	tst	r3, r0
1000bc50:	d0fc      	beq.n	1000bc4c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000bc52:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000bc54:	2000      	movs	r0, #0
1000bc56:	4770      	bx	lr

1000bc58 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000bc58:	6802      	ldr	r2, [r0, #0]
1000bc5a:	2001      	movs	r0, #1
1000bc5c:	7d13      	ldrb	r3, [r2, #20]
1000bc5e:	4203      	tst	r3, r0
1000bc60:	d0fc      	beq.n	1000bc5c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bc62:	7c13      	ldrb	r3, [r2, #16]
1000bc64:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bc66:	2000      	movs	r0, #0
1000bc68:	4770      	bx	lr
1000bc6a:	46c0      	nop			; (mov r8, r8)

1000bc6c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bc6c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bc6e:	2a00      	cmp	r2, #0
1000bc70:	d00d      	beq.n	1000bc8e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bc72:	330b      	adds	r3, #11
1000bc74:	5cc3      	ldrb	r3, [r0, r3]
1000bc76:	b2db      	uxtb	r3, r3
1000bc78:	2b05      	cmp	r3, #5
1000bc7a:	d008      	beq.n	1000bc8e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bc7c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bc7e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bc80:	2205      	movs	r2, #5
1000bc82:	2322      	movs	r3, #34	; 0x22
1000bc84:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bc86:	6803      	ldr	r3, [r0, #0]
1000bc88:	3a04      	subs	r2, #4
1000bc8a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000bc8c:	2300      	movs	r3, #0
}
1000bc8e:	0018      	movs	r0, r3
1000bc90:	4770      	bx	lr
1000bc92:	46c0      	nop			; (mov r8, r8)

1000bc94 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000bc94:	0093      	lsls	r3, r2, #2
1000bc96:	18c3      	adds	r3, r0, r3
1000bc98:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000bc9a:	2120      	movs	r1, #32
1000bc9c:	2301      	movs	r3, #1
1000bc9e:	4093      	lsls	r3, r2
1000bca0:	5c42      	ldrb	r2, [r0, r1]
1000bca2:	4313      	orrs	r3, r2
1000bca4:	5443      	strb	r3, [r0, r1]
}
1000bca6:	4770      	bx	lr

1000bca8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bca8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000bcaa:	2221      	movs	r2, #33	; 0x21
1000bcac:	2301      	movs	r3, #1
1000bcae:	408b      	lsls	r3, r1
1000bcb0:	5c84      	ldrb	r4, [r0, r2]
1000bcb2:	4323      	orrs	r3, r4
1000bcb4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000bcb6:	2901      	cmp	r1, #1
1000bcb8:	d104      	bne.n	1000bcc4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bcba:	6802      	ldr	r2, [r0, #0]
1000bcbc:	7a11      	ldrb	r1, [r2, #8]
1000bcbe:	2320      	movs	r3, #32
1000bcc0:	430b      	orrs	r3, r1
1000bcc2:	7213      	strb	r3, [r2, #8]
	}
}
1000bcc4:	bd10      	pop	{r4, pc}
1000bcc6:	46c0      	nop			; (mov r8, r8)

1000bcc8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bcc8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bcca:	2201      	movs	r2, #1
1000bccc:	408a      	lsls	r2, r1
1000bcce:	2421      	movs	r4, #33	; 0x21
1000bcd0:	5d03      	ldrb	r3, [r0, r4]
1000bcd2:	4393      	bics	r3, r2
1000bcd4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000bcd6:	2901      	cmp	r1, #1
1000bcd8:	d104      	bne.n	1000bce4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bcda:	6802      	ldr	r2, [r0, #0]
1000bcdc:	7a13      	ldrb	r3, [r2, #8]
1000bcde:	311f      	adds	r1, #31
1000bce0:	438b      	bics	r3, r1
1000bce2:	7213      	strb	r3, [r2, #8]
	}

}
1000bce4:	bd10      	pop	{r4, pc}
1000bce6:	46c0      	nop			; (mov r8, r8)

1000bce8 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bce8:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bcea:	4b16      	ldr	r3, [pc, #88]	; (1000bd44 <gpio_port0_isr_handler+0x5c>)
1000bcec:	681d      	ldr	r5, [r3, #0]
1000bcee:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bcf0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bcf2:	07cb      	lsls	r3, r1, #31
1000bcf4:	d407      	bmi.n	1000bd06 <gpio_port0_isr_handler+0x1e>
1000bcf6:	2301      	movs	r3, #1
1000bcf8:	2401      	movs	r4, #1
1000bcfa:	0018      	movs	r0, r3
1000bcfc:	0022      	movs	r2, r4
1000bcfe:	409a      	lsls	r2, r3
1000bd00:	4211      	tst	r1, r2
1000bd02:	d014      	beq.n	1000bd2e <gpio_port0_isr_handler+0x46>
1000bd04:	e001      	b.n	1000bd0a <gpio_port0_isr_handler+0x22>
1000bd06:	2201      	movs	r2, #1
1000bd08:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd0a:	b292      	uxth	r2, r2
1000bd0c:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bd0e:	2346      	movs	r3, #70	; 0x46
1000bd10:	4a0c      	ldr	r2, [pc, #48]	; (1000bd44 <gpio_port0_isr_handler+0x5c>)
1000bd12:	5ad3      	ldrh	r3, [r2, r3]
1000bd14:	4103      	asrs	r3, r0
1000bd16:	07db      	lsls	r3, r3, #31
1000bd18:	d50c      	bpl.n	1000bd34 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bd1a:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bd1c:	5ad3      	ldrh	r3, [r2, r3]
1000bd1e:	4103      	asrs	r3, r0
1000bd20:	07db      	lsls	r3, r3, #31
1000bd22:	d507      	bpl.n	1000bd34 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bd24:	0080      	lsls	r0, r0, #2
1000bd26:	1810      	adds	r0, r2, r0
1000bd28:	6843      	ldr	r3, [r0, #4]
1000bd2a:	4798      	blx	r3
1000bd2c:	e002      	b.n	1000bd34 <gpio_port0_isr_handler+0x4c>
1000bd2e:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bd30:	2b10      	cmp	r3, #16
1000bd32:	d1e2      	bne.n	1000bcfa <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bd34:	2180      	movs	r1, #128	; 0x80
1000bd36:	0409      	lsls	r1, r1, #16
1000bd38:	23c0      	movs	r3, #192	; 0xc0
1000bd3a:	005b      	lsls	r3, r3, #1
1000bd3c:	4a02      	ldr	r2, [pc, #8]	; (1000bd48 <gpio_port0_isr_handler+0x60>)
1000bd3e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bd40:	bd70      	pop	{r4, r5, r6, pc}
1000bd42:	46c0      	nop			; (mov r8, r8)
1000bd44:	10015a60 	.word	0x10015a60
1000bd48:	e000e100 	.word	0xe000e100

1000bd4c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bd4e:	4b18      	ldr	r3, [pc, #96]	; (1000bdb0 <gpio_port1_isr_handler+0x64>)
1000bd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bd52:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bd54:	b2b6      	uxth	r6, r6
1000bd56:	0037      	movs	r7, r6
1000bd58:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bd5a:	0b76      	lsrs	r6, r6, #13
1000bd5c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd5e:	4d14      	ldr	r5, [pc, #80]	; (1000bdb0 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bd60:	2e00      	cmp	r6, #0
1000bd62:	d001      	beq.n	1000bd68 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bd64:	4b13      	ldr	r3, [pc, #76]	; (1000bdb4 <gpio_port1_isr_handler+0x68>)
1000bd66:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bd68:	0022      	movs	r2, r4
1000bd6a:	2301      	movs	r3, #1
1000bd6c:	40a3      	lsls	r3, r4
1000bd6e:	421f      	tst	r7, r3
1000bd70:	d013      	beq.n	1000bd9a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd72:	b29b      	uxth	r3, r3
1000bd74:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bd76:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bd78:	238e      	movs	r3, #142	; 0x8e
1000bd7a:	5aeb      	ldrh	r3, [r5, r3]
1000bd7c:	4123      	asrs	r3, r4
1000bd7e:	07db      	lsls	r3, r3, #31
1000bd80:	d50b      	bpl.n	1000bd9a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bd82:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bd84:	490a      	ldr	r1, [pc, #40]	; (1000bdb0 <gpio_port1_isr_handler+0x64>)
1000bd86:	5acb      	ldrh	r3, [r1, r3]
1000bd88:	4123      	asrs	r3, r4
1000bd8a:	07db      	lsls	r3, r3, #31
1000bd8c:	d505      	bpl.n	1000bd9a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bd8e:	3212      	adds	r2, #18
1000bd90:	0092      	lsls	r2, r2, #2
1000bd92:	188a      	adds	r2, r1, r2
1000bd94:	6853      	ldr	r3, [r2, #4]
1000bd96:	4798      	blx	r3
				break;
1000bd98:	e002      	b.n	1000bda0 <gpio_port1_isr_handler+0x54>
1000bd9a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bd9c:	2c10      	cmp	r4, #16
1000bd9e:	d1df      	bne.n	1000bd60 <gpio_port1_isr_handler+0x14>
1000bda0:	2180      	movs	r1, #128	; 0x80
1000bda2:	0449      	lsls	r1, r1, #17
1000bda4:	23c0      	movs	r3, #192	; 0xc0
1000bda6:	005b      	lsls	r3, r3, #1
1000bda8:	4a03      	ldr	r2, [pc, #12]	; (1000bdb8 <gpio_port1_isr_handler+0x6c>)
1000bdaa:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bdae:	46c0      	nop			; (mov r8, r8)
1000bdb0:	10015a60 	.word	0x10015a60
1000bdb4:	0001bc51 	.word	0x0001bc51
1000bdb8:	e000e100 	.word	0xe000e100

1000bdbc <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bdbc:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bdbe:	2390      	movs	r3, #144	; 0x90
1000bdc0:	4a1b      	ldr	r2, [pc, #108]	; (1000be30 <gpio_port2_isr_handler+0x74>)
1000bdc2:	58d2      	ldr	r2, [r2, r3]
1000bdc4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bdc6:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bdc8:	04d9      	lsls	r1, r3, #19
1000bdca:	d414      	bmi.n	1000bdf6 <gpio_port2_isr_handler+0x3a>
1000bdcc:	0499      	lsls	r1, r3, #18
1000bdce:	d40a      	bmi.n	1000bde6 <gpio_port2_isr_handler+0x2a>
1000bdd0:	0459      	lsls	r1, r3, #17
1000bdd2:	d40c      	bmi.n	1000bdee <gpio_port2_isr_handler+0x32>
1000bdd4:	0bdb      	lsrs	r3, r3, #15
1000bdd6:	03db      	lsls	r3, r3, #15
1000bdd8:	b29b      	uxth	r3, r3
1000bdda:	2b00      	cmp	r3, #0
1000bddc:	d020      	beq.n	1000be20 <gpio_port2_isr_handler+0x64>
1000bdde:	2380      	movs	r3, #128	; 0x80
1000bde0:	021b      	lsls	r3, r3, #8
1000bde2:	210f      	movs	r1, #15
1000bde4:	e00a      	b.n	1000bdfc <gpio_port2_isr_handler+0x40>
1000bde6:	2380      	movs	r3, #128	; 0x80
1000bde8:	019b      	lsls	r3, r3, #6
1000bdea:	210d      	movs	r1, #13
1000bdec:	e006      	b.n	1000bdfc <gpio_port2_isr_handler+0x40>
1000bdee:	2380      	movs	r3, #128	; 0x80
1000bdf0:	01db      	lsls	r3, r3, #7
1000bdf2:	210e      	movs	r1, #14
1000bdf4:	e002      	b.n	1000bdfc <gpio_port2_isr_handler+0x40>
1000bdf6:	2380      	movs	r3, #128	; 0x80
1000bdf8:	015b      	lsls	r3, r3, #5
1000bdfa:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bdfc:	b29b      	uxth	r3, r3
1000bdfe:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000be00:	23d6      	movs	r3, #214	; 0xd6
1000be02:	4a0b      	ldr	r2, [pc, #44]	; (1000be30 <gpio_port2_isr_handler+0x74>)
1000be04:	5ad3      	ldrh	r3, [r2, r3]
1000be06:	410b      	asrs	r3, r1
1000be08:	07db      	lsls	r3, r3, #31
1000be0a:	d509      	bpl.n	1000be20 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000be0c:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000be0e:	5ad3      	ldrh	r3, [r2, r3]
1000be10:	410b      	asrs	r3, r1
1000be12:	07db      	lsls	r3, r3, #31
1000be14:	d504      	bpl.n	1000be20 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000be16:	3124      	adds	r1, #36	; 0x24
1000be18:	0089      	lsls	r1, r1, #2
1000be1a:	1851      	adds	r1, r2, r1
1000be1c:	684b      	ldr	r3, [r1, #4]
1000be1e:	4798      	blx	r3
1000be20:	2180      	movs	r1, #128	; 0x80
1000be22:	0489      	lsls	r1, r1, #18
1000be24:	23c0      	movs	r3, #192	; 0xc0
1000be26:	005b      	lsls	r3, r3, #1
1000be28:	4a02      	ldr	r2, [pc, #8]	; (1000be34 <gpio_port2_isr_handler+0x78>)
1000be2a:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000be2c:	bd10      	pop	{r4, pc}
1000be2e:	46c0      	nop			; (mov r8, r8)
1000be30:	10015a60 	.word	0x10015a60
1000be34:	e000e100 	.word	0xe000e100

1000be38 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000be38:	2300      	movs	r3, #0
1000be3a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000be3c:	2201      	movs	r2, #1
1000be3e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000be40:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000be42:	70c3      	strb	r3, [r0, #3]
}
1000be44:	4770      	bx	lr
1000be46:	46c0      	nop			; (mov r8, r8)

1000be48 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000be48:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000be4a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000be4c:	2801      	cmp	r0, #1
1000be4e:	d800      	bhi.n	1000be52 <gpio_pin_set_config+0xa>
1000be50:	e0c8      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000be52:	2807      	cmp	r0, #7
1000be54:	d809      	bhi.n	1000be6a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be56:	4d64      	ldr	r5, [pc, #400]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000be58:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000be5a:	3b10      	subs	r3, #16
1000be5c:	4003      	ands	r3, r0
1000be5e:	009b      	lsls	r3, r3, #2
1000be60:	2407      	movs	r4, #7
1000be62:	409c      	lsls	r4, r3
1000be64:	43a2      	bics	r2, r4
1000be66:	646a      	str	r2, [r5, #68]	; 0x44
1000be68:	e029      	b.n	1000bebe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000be6a:	280f      	cmp	r0, #15
1000be6c:	d809      	bhi.n	1000be82 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be6e:	4d5e      	ldr	r5, [pc, #376]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000be70:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000be72:	2307      	movs	r3, #7
1000be74:	4003      	ands	r3, r0
1000be76:	009b      	lsls	r3, r3, #2
1000be78:	2407      	movs	r4, #7
1000be7a:	409c      	lsls	r4, r3
1000be7c:	43a2      	bics	r2, r4
1000be7e:	64aa      	str	r2, [r5, #72]	; 0x48
1000be80:	e01d      	b.n	1000bebe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000be82:	2817      	cmp	r0, #23
1000be84:	d809      	bhi.n	1000be9a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be86:	4d58      	ldr	r5, [pc, #352]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000be88:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000be8a:	2307      	movs	r3, #7
1000be8c:	4003      	ands	r3, r0
1000be8e:	009b      	lsls	r3, r3, #2
1000be90:	2407      	movs	r4, #7
1000be92:	409c      	lsls	r4, r3
1000be94:	43a2      	bics	r2, r4
1000be96:	64ea      	str	r2, [r5, #76]	; 0x4c
1000be98:	e011      	b.n	1000bebe <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000be9a:	0003      	movs	r3, r0
1000be9c:	3b2c      	subs	r3, #44	; 0x2c
1000be9e:	2b03      	cmp	r3, #3
1000bea0:	d80d      	bhi.n	1000bebe <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bea2:	4d52      	ldr	r5, [pc, #328]	; (1000bfec <gpio_pin_set_config+0x1a4>)
1000bea4:	2482      	movs	r4, #130	; 0x82
1000bea6:	00e4      	lsls	r4, r4, #3
1000bea8:	5d2a      	ldrb	r2, [r5, r4]
1000beaa:	0712      	lsls	r2, r2, #28
1000beac:	2601      	movs	r6, #1
1000beae:	409e      	lsls	r6, r3
1000beb0:	0f12      	lsrs	r2, r2, #28
1000beb2:	5d2b      	ldrb	r3, [r5, r4]
1000beb4:	43b2      	bics	r2, r6
1000beb6:	260f      	movs	r6, #15
1000beb8:	43b3      	bics	r3, r6
1000beba:	4313      	orrs	r3, r2
1000bebc:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000bebe:	0003      	movs	r3, r0
1000bec0:	3b1d      	subs	r3, #29
1000bec2:	2b02      	cmp	r3, #2
1000bec4:	d829      	bhi.n	1000bf1a <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000bec6:	784b      	ldrb	r3, [r1, #1]
1000bec8:	2b01      	cmp	r3, #1
1000beca:	d108      	bne.n	1000bede <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000becc:	4d47      	ldr	r5, [pc, #284]	; (1000bfec <gpio_pin_set_config+0x1a4>)
1000bece:	7d2b      	ldrb	r3, [r5, #20]
1000bed0:	241f      	movs	r4, #31
1000bed2:	1a24      	subs	r4, r4, r0
1000bed4:	2201      	movs	r2, #1
1000bed6:	40a2      	lsls	r2, r4
1000bed8:	4393      	bics	r3, r2
1000beda:	752b      	strb	r3, [r5, #20]
1000bedc:	e008      	b.n	1000bef0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000bede:	4c43      	ldr	r4, [pc, #268]	; (1000bfec <gpio_pin_set_config+0x1a4>)
1000bee0:	7d25      	ldrb	r5, [r4, #20]
1000bee2:	221f      	movs	r2, #31
1000bee4:	1a12      	subs	r2, r2, r0
1000bee6:	2301      	movs	r3, #1
1000bee8:	4093      	lsls	r3, r2
1000beea:	432b      	orrs	r3, r5
1000beec:	b2db      	uxtb	r3, r3
1000beee:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000bef0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bef2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000bef4:	2a00      	cmp	r2, #0
1000bef6:	d075      	beq.n	1000bfe4 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000bef8:	493c      	ldr	r1, [pc, #240]	; (1000bfec <gpio_pin_set_config+0x1a4>)
1000befa:	880c      	ldrh	r4, [r1, #0]
1000befc:	221f      	movs	r2, #31
1000befe:	1a10      	subs	r0, r2, r0
1000bf00:	0080      	lsls	r0, r0, #2
1000bf02:	3301      	adds	r3, #1
1000bf04:	4083      	lsls	r3, r0
1000bf06:	4323      	orrs	r3, r4
1000bf08:	b29b      	uxth	r3, r3
1000bf0a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bf0c:	4a38      	ldr	r2, [pc, #224]	; (1000bff0 <gpio_pin_set_config+0x1a8>)
1000bf0e:	7811      	ldrb	r1, [r2, #0]
1000bf10:	2302      	movs	r3, #2
1000bf12:	430b      	orrs	r3, r1
1000bf14:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf16:	2300      	movs	r3, #0
1000bf18:	e064      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bf1a:	780a      	ldrb	r2, [r1, #0]
1000bf1c:	2a00      	cmp	r2, #0
1000bf1e:	d140      	bne.n	1000bfa2 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bf20:	280f      	cmp	r0, #15
1000bf22:	d808      	bhi.n	1000bf36 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bf24:	2301      	movs	r3, #1
1000bf26:	4083      	lsls	r3, r0
1000bf28:	b29b      	uxth	r3, r3
1000bf2a:	4a32      	ldr	r2, [pc, #200]	; (1000bff4 <gpio_pin_set_config+0x1ac>)
1000bf2c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf2e:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000bf30:	281f      	cmp	r0, #31
1000bf32:	d857      	bhi.n	1000bfe4 <gpio_pin_set_config+0x19c>
1000bf34:	e012      	b.n	1000bf5c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bf36:	281f      	cmp	r0, #31
1000bf38:	d807      	bhi.n	1000bf4a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bf3a:	220f      	movs	r2, #15
1000bf3c:	4002      	ands	r2, r0
1000bf3e:	2301      	movs	r3, #1
1000bf40:	4093      	lsls	r3, r2
1000bf42:	b29b      	uxth	r3, r3
1000bf44:	4a2c      	ldr	r2, [pc, #176]	; (1000bff8 <gpio_pin_set_config+0x1b0>)
1000bf46:	8293      	strh	r3, [r2, #20]
1000bf48:	e008      	b.n	1000bf5c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bf4a:	230f      	movs	r3, #15
1000bf4c:	4018      	ands	r0, r3
1000bf4e:	3b0e      	subs	r3, #14
1000bf50:	4083      	lsls	r3, r0
1000bf52:	b29b      	uxth	r3, r3
1000bf54:	4a29      	ldr	r2, [pc, #164]	; (1000bffc <gpio_pin_set_config+0x1b4>)
1000bf56:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf58:	2300      	movs	r3, #0
1000bf5a:	e043      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bf5c:	784b      	ldrb	r3, [r1, #1]
1000bf5e:	2b01      	cmp	r3, #1
1000bf60:	d00c      	beq.n	1000bf7c <gpio_pin_set_config+0x134>
1000bf62:	2b00      	cmp	r3, #0
1000bf64:	d002      	beq.n	1000bf6c <gpio_pin_set_config+0x124>
1000bf66:	2b02      	cmp	r3, #2
1000bf68:	d010      	beq.n	1000bf8c <gpio_pin_set_config+0x144>
1000bf6a:	e03a      	b.n	1000bfe2 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bf6c:	491e      	ldr	r1, [pc, #120]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000bf6e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bf70:	2301      	movs	r3, #1
1000bf72:	4083      	lsls	r3, r0
1000bf74:	4313      	orrs	r3, r2
1000bf76:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf78:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bf7a:	e033      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf7c:	491a      	ldr	r1, [pc, #104]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000bf7e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bf80:	2201      	movs	r2, #1
1000bf82:	4082      	lsls	r2, r0
1000bf84:	4393      	bics	r3, r2
1000bf86:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf88:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bf8a:	e02b      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bf8c:	4b16      	ldr	r3, [pc, #88]	; (1000bfe8 <gpio_pin_set_config+0x1a0>)
1000bf8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bf90:	2201      	movs	r2, #1
1000bf92:	4082      	lsls	r2, r0
1000bf94:	4311      	orrs	r1, r2
1000bf96:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf98:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bf9a:	4391      	bics	r1, r2
1000bf9c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf9e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bfa0:	e020      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bfa2:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bfa4:	2a01      	cmp	r2, #1
1000bfa6:	d11d      	bne.n	1000bfe4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bfa8:	280f      	cmp	r0, #15
1000bfaa:	d806      	bhi.n	1000bfba <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bfac:	3301      	adds	r3, #1
1000bfae:	4083      	lsls	r3, r0
1000bfb0:	b29b      	uxth	r3, r3
1000bfb2:	4a10      	ldr	r2, [pc, #64]	; (1000bff4 <gpio_pin_set_config+0x1ac>)
1000bfb4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bfb6:	2300      	movs	r3, #0
1000bfb8:	e014      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bfba:	281f      	cmp	r0, #31
1000bfbc:	d808      	bhi.n	1000bfd0 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bfbe:	230f      	movs	r3, #15
1000bfc0:	4018      	ands	r0, r3
1000bfc2:	3b0e      	subs	r3, #14
1000bfc4:	4083      	lsls	r3, r0
1000bfc6:	b29b      	uxth	r3, r3
1000bfc8:	4a0b      	ldr	r2, [pc, #44]	; (1000bff8 <gpio_pin_set_config+0x1b0>)
1000bfca:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bfcc:	2300      	movs	r3, #0
1000bfce:	e009      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bfd0:	230f      	movs	r3, #15
1000bfd2:	4018      	ands	r0, r3
1000bfd4:	3b0e      	subs	r3, #14
1000bfd6:	4083      	lsls	r3, r0
1000bfd8:	b29b      	uxth	r3, r3
1000bfda:	4a08      	ldr	r2, [pc, #32]	; (1000bffc <gpio_pin_set_config+0x1b4>)
1000bfdc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bfde:	2300      	movs	r3, #0
1000bfe0:	e000      	b.n	1000bfe4 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bfe2:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bfe4:	0018      	movs	r0, r3
1000bfe6:	bd70      	pop	{r4, r5, r6, pc}
1000bfe8:	4000b000 	.word	0x4000b000
1000bfec:	4000f000 	.word	0x4000f000
1000bff0:	4000e000 	.word	0x4000e000
1000bff4:	40010000 	.word	0x40010000
1000bff8:	40011000 	.word	0x40011000
1000bffc:	40013000 	.word	0x40013000

1000c000 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c000:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c002:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c004:	23ff      	movs	r3, #255	; 0xff
1000c006:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c008:	2807      	cmp	r0, #7
1000c00a:	d833      	bhi.n	1000c074 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c00c:	4a4e      	ldr	r2, [pc, #312]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c00e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c010:	3bf8      	subs	r3, #248	; 0xf8
1000c012:	4003      	ands	r3, r0
1000c014:	009b      	lsls	r3, r3, #2
1000c016:	2607      	movs	r6, #7
1000c018:	409e      	lsls	r6, r3
1000c01a:	43b4      	bics	r4, r6
1000c01c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c01e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c020:	000e      	movs	r6, r1
1000c022:	409e      	lsls	r6, r3
1000c024:	0033      	movs	r3, r6
1000c026:	4323      	orrs	r3, r4
1000c028:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c02a:	2901      	cmp	r1, #1
1000c02c:	d000      	beq.n	1000c030 <gpio_pinmux_cofiguration+0x30>
1000c02e:	e08a      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c030:	2803      	cmp	r0, #3
1000c032:	d80f      	bhi.n	1000c054 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c034:	0011      	movs	r1, r2
1000c036:	22d0      	movs	r2, #208	; 0xd0
1000c038:	0052      	lsls	r2, r2, #1
1000c03a:	588c      	ldr	r4, [r1, r2]
1000c03c:	2303      	movs	r3, #3
1000c03e:	4018      	ands	r0, r3
1000c040:	00c0      	lsls	r0, r0, #3
1000c042:	333c      	adds	r3, #60	; 0x3c
1000c044:	4083      	lsls	r3, r0
1000c046:	439c      	bics	r4, r3
1000c048:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c04a:	588b      	ldr	r3, [r1, r2]
1000c04c:	4085      	lsls	r5, r0
1000c04e:	431d      	orrs	r5, r3
1000c050:	508d      	str	r5, [r1, r2]
1000c052:	e078      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c054:	493c      	ldr	r1, [pc, #240]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c056:	22d2      	movs	r2, #210	; 0xd2
1000c058:	0052      	lsls	r2, r2, #1
1000c05a:	588c      	ldr	r4, [r1, r2]
1000c05c:	2303      	movs	r3, #3
1000c05e:	4018      	ands	r0, r3
1000c060:	00c0      	lsls	r0, r0, #3
1000c062:	333c      	adds	r3, #60	; 0x3c
1000c064:	4083      	lsls	r3, r0
1000c066:	439c      	bics	r4, r3
1000c068:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c06a:	588b      	ldr	r3, [r1, r2]
1000c06c:	4085      	lsls	r5, r0
1000c06e:	431d      	orrs	r5, r3
1000c070:	508d      	str	r5, [r1, r2]
1000c072:	e068      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c074:	280f      	cmp	r0, #15
1000c076:	d832      	bhi.n	1000c0de <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c078:	4a33      	ldr	r2, [pc, #204]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c07a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c07c:	2307      	movs	r3, #7
1000c07e:	4003      	ands	r3, r0
1000c080:	009b      	lsls	r3, r3, #2
1000c082:	2607      	movs	r6, #7
1000c084:	409e      	lsls	r6, r3
1000c086:	43b4      	bics	r4, r6
1000c088:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c08a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c08c:	000e      	movs	r6, r1
1000c08e:	409e      	lsls	r6, r3
1000c090:	0033      	movs	r3, r6
1000c092:	4323      	orrs	r3, r4
1000c094:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c096:	2901      	cmp	r1, #1
1000c098:	d155      	bne.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c09a:	280b      	cmp	r0, #11
1000c09c:	d80f      	bhi.n	1000c0be <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c09e:	0011      	movs	r1, r2
1000c0a0:	22d4      	movs	r2, #212	; 0xd4
1000c0a2:	0052      	lsls	r2, r2, #1
1000c0a4:	588c      	ldr	r4, [r1, r2]
1000c0a6:	2303      	movs	r3, #3
1000c0a8:	4018      	ands	r0, r3
1000c0aa:	00c0      	lsls	r0, r0, #3
1000c0ac:	333c      	adds	r3, #60	; 0x3c
1000c0ae:	4083      	lsls	r3, r0
1000c0b0:	439c      	bics	r4, r3
1000c0b2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0b4:	588b      	ldr	r3, [r1, r2]
1000c0b6:	4085      	lsls	r5, r0
1000c0b8:	431d      	orrs	r5, r3
1000c0ba:	508d      	str	r5, [r1, r2]
1000c0bc:	e043      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c0be:	4922      	ldr	r1, [pc, #136]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c0c0:	22d6      	movs	r2, #214	; 0xd6
1000c0c2:	0052      	lsls	r2, r2, #1
1000c0c4:	588c      	ldr	r4, [r1, r2]
1000c0c6:	2303      	movs	r3, #3
1000c0c8:	4018      	ands	r0, r3
1000c0ca:	00c0      	lsls	r0, r0, #3
1000c0cc:	333c      	adds	r3, #60	; 0x3c
1000c0ce:	4083      	lsls	r3, r0
1000c0d0:	439c      	bics	r4, r3
1000c0d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c0d4:	588b      	ldr	r3, [r1, r2]
1000c0d6:	4085      	lsls	r5, r0
1000c0d8:	431d      	orrs	r5, r3
1000c0da:	508d      	str	r5, [r1, r2]
1000c0dc:	e033      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c0de:	2817      	cmp	r0, #23
1000c0e0:	d831      	bhi.n	1000c146 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0e2:	4a19      	ldr	r2, [pc, #100]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c0e4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c0e6:	2307      	movs	r3, #7
1000c0e8:	4003      	ands	r3, r0
1000c0ea:	009b      	lsls	r3, r3, #2
1000c0ec:	2607      	movs	r6, #7
1000c0ee:	409e      	lsls	r6, r3
1000c0f0:	43b4      	bics	r4, r6
1000c0f2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c0f4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c0f6:	000e      	movs	r6, r1
1000c0f8:	409e      	lsls	r6, r3
1000c0fa:	0033      	movs	r3, r6
1000c0fc:	4323      	orrs	r3, r4
1000c0fe:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c100:	2901      	cmp	r1, #1
1000c102:	d120      	bne.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c104:	2813      	cmp	r0, #19
1000c106:	d80f      	bhi.n	1000c128 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c108:	0011      	movs	r1, r2
1000c10a:	22d8      	movs	r2, #216	; 0xd8
1000c10c:	0052      	lsls	r2, r2, #1
1000c10e:	588c      	ldr	r4, [r1, r2]
1000c110:	2303      	movs	r3, #3
1000c112:	4018      	ands	r0, r3
1000c114:	00c0      	lsls	r0, r0, #3
1000c116:	333c      	adds	r3, #60	; 0x3c
1000c118:	4083      	lsls	r3, r0
1000c11a:	439c      	bics	r4, r3
1000c11c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c11e:	588b      	ldr	r3, [r1, r2]
1000c120:	4085      	lsls	r5, r0
1000c122:	431d      	orrs	r5, r3
1000c124:	508d      	str	r5, [r1, r2]
1000c126:	e00e      	b.n	1000c146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c128:	4a07      	ldr	r2, [pc, #28]	; (1000c148 <gpio_pinmux_cofiguration+0x148>)
1000c12a:	23da      	movs	r3, #218	; 0xda
1000c12c:	005b      	lsls	r3, r3, #1
1000c12e:	58d1      	ldr	r1, [r2, r3]
1000c130:	2403      	movs	r4, #3
1000c132:	4020      	ands	r0, r4
1000c134:	00c0      	lsls	r0, r0, #3
1000c136:	343c      	adds	r4, #60	; 0x3c
1000c138:	4084      	lsls	r4, r0
1000c13a:	43a1      	bics	r1, r4
1000c13c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c13e:	58d1      	ldr	r1, [r2, r3]
1000c140:	4085      	lsls	r5, r0
1000c142:	430d      	orrs	r5, r1
1000c144:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c146:	bd70      	pop	{r4, r5, r6, pc}
1000c148:	4000b000 	.word	0x4000b000

1000c14c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c14c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c14e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c150:	280f      	cmp	r0, #15
1000c152:	d904      	bls.n	1000c15e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c154:	241f      	movs	r4, #31
1000c156:	4284      	cmp	r4, r0
1000c158:	415b      	adcs	r3, r3
1000c15a:	3c1d      	subs	r4, #29
1000c15c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c15e:	2a01      	cmp	r2, #1
1000c160:	d016      	beq.n	1000c190 <gpio_register_callback+0x44>
1000c162:	2a00      	cmp	r2, #0
1000c164:	d004      	beq.n	1000c170 <gpio_register_callback+0x24>
1000c166:	2a02      	cmp	r2, #2
1000c168:	d022      	beq.n	1000c1b0 <gpio_register_callback+0x64>
1000c16a:	2a03      	cmp	r2, #3
1000c16c:	d030      	beq.n	1000c1d0 <gpio_register_callback+0x84>
1000c16e:	e03e      	b.n	1000c1ee <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c170:	4e29      	ldr	r6, [pc, #164]	; (1000c218 <gpio_register_callback+0xcc>)
1000c172:	00dc      	lsls	r4, r3, #3
1000c174:	18e2      	adds	r2, r4, r3
1000c176:	00d2      	lsls	r2, r2, #3
1000c178:	5997      	ldr	r7, [r2, r6]
1000c17a:	250f      	movs	r5, #15
1000c17c:	4005      	ands	r5, r0
1000c17e:	2201      	movs	r2, #1
1000c180:	40aa      	lsls	r2, r5
1000c182:	b292      	uxth	r2, r2
1000c184:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c186:	18e4      	adds	r4, r4, r3
1000c188:	00e4      	lsls	r4, r4, #3
1000c18a:	59a4      	ldr	r4, [r4, r6]
1000c18c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c18e:	e02e      	b.n	1000c1ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c190:	4e21      	ldr	r6, [pc, #132]	; (1000c218 <gpio_register_callback+0xcc>)
1000c192:	00dc      	lsls	r4, r3, #3
1000c194:	18e2      	adds	r2, r4, r3
1000c196:	00d2      	lsls	r2, r2, #3
1000c198:	5997      	ldr	r7, [r2, r6]
1000c19a:	250f      	movs	r5, #15
1000c19c:	4005      	ands	r5, r0
1000c19e:	2201      	movs	r2, #1
1000c1a0:	40aa      	lsls	r2, r5
1000c1a2:	b292      	uxth	r2, r2
1000c1a4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c1a6:	18e4      	adds	r4, r4, r3
1000c1a8:	00e4      	lsls	r4, r4, #3
1000c1aa:	59a4      	ldr	r4, [r4, r6]
1000c1ac:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c1ae:	e01e      	b.n	1000c1ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c1b0:	4e19      	ldr	r6, [pc, #100]	; (1000c218 <gpio_register_callback+0xcc>)
1000c1b2:	00dc      	lsls	r4, r3, #3
1000c1b4:	18e2      	adds	r2, r4, r3
1000c1b6:	00d2      	lsls	r2, r2, #3
1000c1b8:	5997      	ldr	r7, [r2, r6]
1000c1ba:	250f      	movs	r5, #15
1000c1bc:	4005      	ands	r5, r0
1000c1be:	2201      	movs	r2, #1
1000c1c0:	40aa      	lsls	r2, r5
1000c1c2:	b292      	uxth	r2, r2
1000c1c4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c1c6:	18e4      	adds	r4, r4, r3
1000c1c8:	00e4      	lsls	r4, r4, #3
1000c1ca:	59a4      	ldr	r4, [r4, r6]
1000c1cc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c1ce:	e00e      	b.n	1000c1ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c1d0:	4e11      	ldr	r6, [pc, #68]	; (1000c218 <gpio_register_callback+0xcc>)
1000c1d2:	00dc      	lsls	r4, r3, #3
1000c1d4:	18e2      	adds	r2, r4, r3
1000c1d6:	00d2      	lsls	r2, r2, #3
1000c1d8:	5997      	ldr	r7, [r2, r6]
1000c1da:	250f      	movs	r5, #15
1000c1dc:	4005      	ands	r5, r0
1000c1de:	2201      	movs	r2, #1
1000c1e0:	40aa      	lsls	r2, r5
1000c1e2:	b292      	uxth	r2, r2
1000c1e4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c1e6:	18e4      	adds	r4, r4, r3
1000c1e8:	00e4      	lsls	r4, r4, #3
1000c1ea:	59a4      	ldr	r4, [r4, r6]
1000c1ec:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c1ee:	220f      	movs	r2, #15
1000c1f0:	4010      	ands	r0, r2
1000c1f2:	4c09      	ldr	r4, [pc, #36]	; (1000c218 <gpio_register_callback+0xcc>)
1000c1f4:	00dd      	lsls	r5, r3, #3
1000c1f6:	18ea      	adds	r2, r5, r3
1000c1f8:	0052      	lsls	r2, r2, #1
1000c1fa:	1812      	adds	r2, r2, r0
1000c1fc:	0092      	lsls	r2, r2, #2
1000c1fe:	18a2      	adds	r2, r4, r2
1000c200:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c202:	18ea      	adds	r2, r5, r3
1000c204:	00d2      	lsls	r2, r2, #3
1000c206:	18a2      	adds	r2, r4, r2
1000c208:	3244      	adds	r2, #68	; 0x44
1000c20a:	2101      	movs	r1, #1
1000c20c:	4081      	lsls	r1, r0
1000c20e:	8813      	ldrh	r3, [r2, #0]
1000c210:	430b      	orrs	r3, r1
1000c212:	8013      	strh	r3, [r2, #0]
}
1000c214:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c216:	46c0      	nop			; (mov r8, r8)
1000c218:	10015a60 	.word	0x10015a60

1000c21c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c21c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c21e:	280f      	cmp	r0, #15
1000c220:	d805      	bhi.n	1000c22e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c222:	2280      	movs	r2, #128	; 0x80
1000c224:	0412      	lsls	r2, r2, #16
1000c226:	4b12      	ldr	r3, [pc, #72]	; (1000c270 <gpio_enable_callback+0x54>)
1000c228:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c22a:	2200      	movs	r2, #0
1000c22c:	e00c      	b.n	1000c248 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c22e:	281f      	cmp	r0, #31
1000c230:	d805      	bhi.n	1000c23e <gpio_enable_callback+0x22>
1000c232:	2280      	movs	r2, #128	; 0x80
1000c234:	0452      	lsls	r2, r2, #17
1000c236:	4b0e      	ldr	r3, [pc, #56]	; (1000c270 <gpio_enable_callback+0x54>)
1000c238:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c23a:	2201      	movs	r2, #1
1000c23c:	e004      	b.n	1000c248 <gpio_enable_callback+0x2c>
1000c23e:	2280      	movs	r2, #128	; 0x80
1000c240:	0492      	lsls	r2, r2, #18
1000c242:	4b0b      	ldr	r3, [pc, #44]	; (1000c270 <gpio_enable_callback+0x54>)
1000c244:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c246:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c248:	230f      	movs	r3, #15
1000c24a:	4018      	ands	r0, r3
1000c24c:	2101      	movs	r1, #1
1000c24e:	4081      	lsls	r1, r0
1000c250:	4c08      	ldr	r4, [pc, #32]	; (1000c274 <gpio_enable_callback+0x58>)
1000c252:	00d5      	lsls	r5, r2, #3
1000c254:	18ab      	adds	r3, r5, r2
1000c256:	00db      	lsls	r3, r3, #3
1000c258:	18e3      	adds	r3, r4, r3
1000c25a:	3346      	adds	r3, #70	; 0x46
1000c25c:	8818      	ldrh	r0, [r3, #0]
1000c25e:	4308      	orrs	r0, r1
1000c260:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c262:	18aa      	adds	r2, r5, r2
1000c264:	00d2      	lsls	r2, r2, #3
1000c266:	5913      	ldr	r3, [r2, r4]
1000c268:	b289      	uxth	r1, r1
1000c26a:	8419      	strh	r1, [r3, #32]
}
1000c26c:	bd30      	pop	{r4, r5, pc}
1000c26e:	46c0      	nop			; (mov r8, r8)
1000c270:	e000e100 	.word	0xe000e100
1000c274:	10015a60 	.word	0x10015a60

1000c278 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c278:	b510      	push	{r4, lr}
1000c27a:	4a11      	ldr	r2, [pc, #68]	; (1000c2c0 <gpio_init+0x48>)
1000c27c:	0010      	movs	r0, r2
1000c27e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c280:	2100      	movs	r1, #0
1000c282:	e007      	b.n	1000c294 <gpio_init+0x1c>
1000c284:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c286:	4293      	cmp	r3, r2
1000c288:	d1fc      	bne.n	1000c284 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c28a:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c28c:	8011      	strh	r1, [r2, #0]
1000c28e:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c290:	4282      	cmp	r2, r0
1000c292:	d002      	beq.n	1000c29a <gpio_init+0x22>
1000c294:	0013      	movs	r3, r2
1000c296:	3b40      	subs	r3, #64	; 0x40
1000c298:	e7f4      	b.n	1000c284 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c29a:	4b0a      	ldr	r3, [pc, #40]	; (1000c2c4 <gpio_init+0x4c>)
1000c29c:	4a0a      	ldr	r2, [pc, #40]	; (1000c2c8 <gpio_init+0x50>)
1000c29e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c2a0:	4a0a      	ldr	r2, [pc, #40]	; (1000c2cc <gpio_init+0x54>)
1000c2a2:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c2a4:	490a      	ldr	r1, [pc, #40]	; (1000c2d0 <gpio_init+0x58>)
1000c2a6:	2290      	movs	r2, #144	; 0x90
1000c2a8:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c2aa:	490a      	ldr	r1, [pc, #40]	; (1000c2d4 <gpio_init+0x5c>)
1000c2ac:	2027      	movs	r0, #39	; 0x27
1000c2ae:	4c0a      	ldr	r4, [pc, #40]	; (1000c2d8 <gpio_init+0x60>)
1000c2b0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c2b2:	490a      	ldr	r1, [pc, #40]	; (1000c2dc <gpio_init+0x64>)
1000c2b4:	2028      	movs	r0, #40	; 0x28
1000c2b6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c2b8:	4909      	ldr	r1, [pc, #36]	; (1000c2e0 <gpio_init+0x68>)
1000c2ba:	2029      	movs	r0, #41	; 0x29
1000c2bc:	47a0      	blx	r4
}
1000c2be:	bd10      	pop	{r4, pc}
1000c2c0:	10015aa4 	.word	0x10015aa4
1000c2c4:	10015a60 	.word	0x10015a60
1000c2c8:	40010000 	.word	0x40010000
1000c2cc:	40011000 	.word	0x40011000
1000c2d0:	40013000 	.word	0x40013000
1000c2d4:	1000bce9 	.word	0x1000bce9
1000c2d8:	1000cd1d 	.word	0x1000cd1d
1000c2dc:	1000bd4d 	.word	0x1000bd4d
1000c2e0:	1000bdbd 	.word	0x1000bdbd

1000c2e4 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c2e6:	464f      	mov	r7, r9
1000c2e8:	4646      	mov	r6, r8
1000c2ea:	b4c0      	push	{r6, r7}
1000c2ec:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000c2ee:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c2f0:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000c2f2:	2d00      	cmp	r5, #0
1000c2f4:	d02f      	beq.n	1000c356 <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000c2f6:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c2f8:	2428      	movs	r4, #40	; 0x28
1000c2fa:	5d13      	ldrb	r3, [r2, r4]
1000c2fc:	07db      	lsls	r3, r3, #31
1000c2fe:	d4fc      	bmi.n	1000c2fa <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000c300:	2301      	movs	r3, #1
1000c302:	2434      	movs	r4, #52	; 0x34
1000c304:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000c306:	3c14      	subs	r4, #20
1000c308:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000c30a:	880b      	ldrh	r3, [r1, #0]
1000c30c:	005b      	lsls	r3, r3, #1
1000c30e:	2402      	movs	r4, #2
1000c310:	34ff      	adds	r4, #255	; 0xff
1000c312:	4323      	orrs	r3, r4
1000c314:	b29b      	uxth	r3, r3
1000c316:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000c318:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000c31a:	2301      	movs	r3, #1
1000c31c:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000c31e:	7b13      	ldrb	r3, [r2, #12]
1000c320:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000c322:	4640      	mov	r0, r8
1000c324:	4218      	tst	r0, r3
1000c326:	d006      	beq.n	1000c336 <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000c328:	1c67      	adds	r7, r4, #1
1000c32a:	7910      	ldrb	r0, [r2, #4]
1000c32c:	4684      	mov	ip, r0
1000c32e:	6848      	ldr	r0, [r1, #4]
1000c330:	4666      	mov	r6, ip
1000c332:	5506      	strb	r6, [r0, r4]
1000c334:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000c336:	42ac      	cmp	r4, r5
1000c338:	d3f1      	bcc.n	1000c31e <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c33a:	06db      	lsls	r3, r3, #27
1000c33c:	d403      	bmi.n	1000c346 <_i2c_master_read_packet+0x62>
1000c33e:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000c340:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c342:	420b      	tst	r3, r1
1000c344:	d0fc      	beq.n	1000c340 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000c346:	464b      	mov	r3, r9
1000c348:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000c34a:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000c34c:	2900      	cmp	r1, #0
1000c34e:	d102      	bne.n	1000c356 <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000c350:	3320      	adds	r3, #32
1000c352:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000c354:	2300      	movs	r3, #0
}
1000c356:	0018      	movs	r0, r3
1000c358:	bc0c      	pop	{r2, r3}
1000c35a:	4690      	mov	r8, r2
1000c35c:	4699      	mov	r9, r3
1000c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c360 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c360:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c362:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000c364:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000c366:	884e      	ldrh	r6, [r1, #2]
1000c368:	2428      	movs	r4, #40	; 0x28
1000c36a:	5d13      	ldrb	r3, [r2, r4]
1000c36c:	07db      	lsls	r3, r3, #31
1000c36e:	d4fc      	bmi.n	1000c36a <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000c370:	2301      	movs	r3, #1
1000c372:	2434      	movs	r4, #52	; 0x34
1000c374:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000c376:	3c14      	subs	r4, #20
1000c378:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000c37a:	880b      	ldrh	r3, [r1, #0]
1000c37c:	005b      	lsls	r3, r3, #1
1000c37e:	34e0      	adds	r4, #224	; 0xe0
1000c380:	4323      	orrs	r3, r4
1000c382:	b29b      	uxth	r3, r3
1000c384:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000c386:	2400      	movs	r4, #0
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000c388:	2501      	movs	r5, #1
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000c38a:	7a13      	ldrb	r3, [r2, #8]
1000c38c:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000c38e:	421d      	tst	r5, r3
1000c390:	d004      	beq.n	1000c39c <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000c392:	1c67      	adds	r7, r4, #1
1000c394:	6848      	ldr	r0, [r1, #4]
1000c396:	5d04      	ldrb	r4, [r0, r4]
1000c398:	8014      	strh	r4, [r2, #0]
1000c39a:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000c39c:	42b4      	cmp	r4, r6
1000c39e:	d3f4      	bcc.n	1000c38a <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c3a0:	06db      	lsls	r3, r3, #27
1000c3a2:	d403      	bmi.n	1000c3ac <_i2c_master_write_packet+0x4c>
1000c3a4:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000c3a6:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000c3a8:	420b      	tst	r3, r1
1000c3aa:	d0fc      	beq.n	1000c3a6 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000c3ac:	4663      	mov	r3, ip
1000c3ae:	795b      	ldrb	r3, [r3, #5]
1000c3b0:	2b00      	cmp	r3, #0
1000c3b2:	d102      	bne.n	1000c3ba <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000c3b4:	2100      	movs	r1, #0
1000c3b6:	3320      	adds	r3, #32
1000c3b8:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
1000c3ba:	2000      	movs	r0, #0
1000c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c3be:	46c0      	nop			; (mov r8, r8)

1000c3c0 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000c3c0:	2303      	movs	r3, #3
1000c3c2:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000c3c4:	330d      	adds	r3, #13
1000c3c6:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000c3c8:	3b08      	subs	r3, #8
1000c3ca:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000c3cc:	3301      	adds	r3, #1
1000c3ce:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c3d0:	3b07      	subs	r3, #7
1000c3d2:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c3d4:	6103      	str	r3, [r0, #16]
}
1000c3d6:	4770      	bx	lr

1000c3d8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000c3d8:	b570      	push	{r4, r5, r6, lr}
1000c3da:	0004      	movs	r4, r0
1000c3dc:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000c3de:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000c3e0:	2800      	cmp	r0, #0
1000c3e2:	d026      	beq.n	1000c432 <i2c_master_init+0x5a>
1000c3e4:	2a00      	cmp	r2, #0
1000c3e6:	d026      	beq.n	1000c436 <i2c_master_init+0x5e>
1000c3e8:	2228      	movs	r2, #40	; 0x28
1000c3ea:	5c8b      	ldrb	r3, [r1, r2]
1000c3ec:	07db      	lsls	r3, r3, #31
1000c3ee:	d4fc      	bmi.n	1000c3ea <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000c3f0:	2300      	movs	r3, #0
1000c3f2:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000c3f4:	6823      	ldr	r3, [r4, #0]
1000c3f6:	4a11      	ldr	r2, [pc, #68]	; (1000c43c <i2c_master_init+0x64>)
1000c3f8:	4293      	cmp	r3, r2
1000c3fa:	d103      	bne.n	1000c404 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000c3fc:	2003      	movs	r0, #3
1000c3fe:	4b10      	ldr	r3, [pc, #64]	; (1000c440 <i2c_master_init+0x68>)
1000c400:	4798      	blx	r3
1000c402:	e006      	b.n	1000c412 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
1000c404:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000c406:	4a0f      	ldr	r2, [pc, #60]	; (1000c444 <i2c_master_init+0x6c>)
1000c408:	4293      	cmp	r3, r2
1000c40a:	d115      	bne.n	1000c438 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000c40c:	3002      	adds	r0, #2
1000c40e:	4b0c      	ldr	r3, [pc, #48]	; (1000c440 <i2c_master_init+0x68>)
1000c410:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000c412:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000c414:	8929      	ldrh	r1, [r5, #8]
1000c416:	7928      	ldrb	r0, [r5, #4]
1000c418:	4e0b      	ldr	r6, [pc, #44]	; (1000c448 <i2c_master_init+0x70>)
1000c41a:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000c41c:	8a29      	ldrh	r1, [r5, #16]
1000c41e:	7b28      	ldrb	r0, [r5, #12]
1000c420:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000c422:	782b      	ldrb	r3, [r5, #0]
1000c424:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000c426:	886b      	ldrh	r3, [r5, #2]
1000c428:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000c42a:	2301      	movs	r3, #1
1000c42c:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000c42e:	2000      	movs	r0, #0
1000c430:	e002      	b.n	1000c438 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c432:	2017      	movs	r0, #23
1000c434:	e000      	b.n	1000c438 <i2c_master_init+0x60>
1000c436:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000c438:	bd70      	pop	{r4, r5, r6, pc}
1000c43a:	46c0      	nop			; (mov r8, r8)
1000c43c:	40003000 	.word	0x40003000
1000c440:	1000c8b5 	.word	0x1000c8b5
1000c444:	40003400 	.word	0x40003400
1000c448:	1000c001 	.word	0x1000c001

1000c44c <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c44c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000c44e:	2800      	cmp	r0, #0
1000c450:	d008      	beq.n	1000c464 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000c452:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000c454:	2900      	cmp	r1, #0
1000c456:	d006      	beq.n	1000c466 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c458:	2300      	movs	r3, #0
1000c45a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000c45c:	4b03      	ldr	r3, [pc, #12]	; (1000c46c <i2c_master_read_packet_wait+0x20>)
1000c45e:	4798      	blx	r3
1000c460:	0003      	movs	r3, r0
1000c462:	e000      	b.n	1000c466 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000c464:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000c466:	0018      	movs	r0, r3
1000c468:	bd10      	pop	{r4, pc}
1000c46a:	46c0      	nop			; (mov r8, r8)
1000c46c:	1000c2e5 	.word	0x1000c2e5

1000c470 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c470:	b570      	push	{r4, r5, r6, lr}
1000c472:	0004      	movs	r4, r0
1000c474:	000d      	movs	r5, r1
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000c476:	2800      	cmp	r0, #0
1000c478:	d00c      	beq.n	1000c494 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
1000c47a:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000c47c:	2900      	cmp	r1, #0
1000c47e:	d00a      	beq.n	1000c496 <i2c_master_write_packet_wait+0x26>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000c480:	2300      	movs	r3, #0
1000c482:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000c484:	4804      	ldr	r0, [pc, #16]	; (1000c498 <i2c_master_write_packet_wait+0x28>)
1000c486:	4b05      	ldr	r3, [pc, #20]	; (1000c49c <i2c_master_write_packet_wait+0x2c>)
1000c488:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000c48a:	0029      	movs	r1, r5
1000c48c:	0020      	movs	r0, r4
1000c48e:	4b04      	ldr	r3, [pc, #16]	; (1000c4a0 <i2c_master_write_packet_wait+0x30>)
1000c490:	4798      	blx	r3
1000c492:	e000      	b.n	1000c496 <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c494:	2017      	movs	r0, #23

	module->no_stop = false;

    printf("!!");
	return _i2c_master_write_packet(module, packet);
}
1000c496:	bd70      	pop	{r4, r5, r6, pc}
1000c498:	10013444 	.word	0x10013444
1000c49c:	100116f5 	.word	0x100116f5
1000c4a0:	1000c361 	.word	0x1000c361

1000c4a4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000c4a4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000c4a6:	2800      	cmp	r0, #0
1000c4a8:	d008      	beq.n	1000c4bc <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
1000c4aa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000c4ac:	2900      	cmp	r1, #0
1000c4ae:	d006      	beq.n	1000c4be <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000c4b0:	3b16      	subs	r3, #22
1000c4b2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000c4b4:	4b03      	ldr	r3, [pc, #12]	; (1000c4c4 <i2c_master_write_packet_wait_no_stop+0x20>)
1000c4b6:	4798      	blx	r3
1000c4b8:	0003      	movs	r3, r0
1000c4ba:	e000      	b.n	1000c4be <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000c4bc:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000c4be:	0018      	movs	r0, r3
1000c4c0:	bd10      	pop	{r4, pc}
1000c4c2:	46c0      	nop			; (mov r8, r8)
1000c4c4:	1000c361 	.word	0x1000c361

1000c4c8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c4c8:	2801      	cmp	r0, #1
1000c4ca:	d00d      	beq.n	1000c4e8 <system_clock_config+0x20>
1000c4cc:	2800      	cmp	r0, #0
1000c4ce:	d002      	beq.n	1000c4d6 <system_clock_config+0xe>
1000c4d0:	2802      	cmp	r0, #2
1000c4d2:	d01c      	beq.n	1000c50e <system_clock_config+0x46>
1000c4d4:	e02e      	b.n	1000c534 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c4d6:	4a18      	ldr	r2, [pc, #96]	; (1000c538 <system_clock_config+0x70>)
1000c4d8:	6990      	ldr	r0, [r2, #24]
1000c4da:	230c      	movs	r3, #12
1000c4dc:	4303      	orrs	r3, r0
1000c4de:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c4e0:	4a16      	ldr	r2, [pc, #88]	; (1000c53c <system_clock_config+0x74>)
1000c4e2:	4b17      	ldr	r3, [pc, #92]	; (1000c540 <system_clock_config+0x78>)
1000c4e4:	601a      	str	r2, [r3, #0]
			break;
1000c4e6:	e01a      	b.n	1000c51e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c4e8:	4b13      	ldr	r3, [pc, #76]	; (1000c538 <system_clock_config+0x70>)
1000c4ea:	6998      	ldr	r0, [r3, #24]
1000c4ec:	2208      	movs	r2, #8
1000c4ee:	4302      	orrs	r2, r0
1000c4f0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c4f2:	699a      	ldr	r2, [r3, #24]
1000c4f4:	2004      	movs	r0, #4
1000c4f6:	4382      	bics	r2, r0
1000c4f8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c4fa:	4a12      	ldr	r2, [pc, #72]	; (1000c544 <system_clock_config+0x7c>)
1000c4fc:	6853      	ldr	r3, [r2, #4]
1000c4fe:	2080      	movs	r0, #128	; 0x80
1000c500:	0300      	lsls	r0, r0, #12
1000c502:	4303      	orrs	r3, r0
1000c504:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c506:	4a10      	ldr	r2, [pc, #64]	; (1000c548 <system_clock_config+0x80>)
1000c508:	4b0d      	ldr	r3, [pc, #52]	; (1000c540 <system_clock_config+0x78>)
1000c50a:	601a      	str	r2, [r3, #0]
			break;
1000c50c:	e007      	b.n	1000c51e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c50e:	4a0a      	ldr	r2, [pc, #40]	; (1000c538 <system_clock_config+0x70>)
1000c510:	6993      	ldr	r3, [r2, #24]
1000c512:	200c      	movs	r0, #12
1000c514:	4383      	bics	r3, r0
1000c516:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c518:	4a08      	ldr	r2, [pc, #32]	; (1000c53c <system_clock_config+0x74>)
1000c51a:	4b09      	ldr	r3, [pc, #36]	; (1000c540 <system_clock_config+0x78>)
1000c51c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c51e:	4b06      	ldr	r3, [pc, #24]	; (1000c538 <system_clock_config+0x70>)
1000c520:	699a      	ldr	r2, [r3, #24]
1000c522:	2003      	movs	r0, #3
1000c524:	4382      	bics	r2, r0
1000c526:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c528:	699a      	ldr	r2, [r3, #24]
1000c52a:	4001      	ands	r1, r0
1000c52c:	4311      	orrs	r1, r2
1000c52e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c530:	2000      	movs	r0, #0
1000c532:	e000      	b.n	1000c536 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c534:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c536:	4770      	bx	lr
1000c538:	4000b000 	.word	0x4000b000
1000c53c:	018cba80 	.word	0x018cba80
1000c540:	10015b38 	.word	0x10015b38
1000c544:	4000f000 	.word	0x4000f000
1000c548:	001e8480 	.word	0x001e8480

1000c54c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c54c:	4b01      	ldr	r3, [pc, #4]	; (1000c554 <system_clock_get_value+0x8>)
1000c54e:	6818      	ldr	r0, [r3, #0]
}
1000c550:	4770      	bx	lr
1000c552:	46c0      	nop			; (mov r8, r8)
1000c554:	10015b38 	.word	0x10015b38

1000c558 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c558:	b500      	push	{lr}
	switch (peripheral) {
1000c55a:	2835      	cmp	r0, #53	; 0x35
1000c55c:	d900      	bls.n	1000c560 <system_clock_peripheral_enable+0x8>
1000c55e:	e1a2      	b.n	1000c8a6 <system_clock_peripheral_enable+0x34e>
1000c560:	0080      	lsls	r0, r0, #2
1000c562:	4bd2      	ldr	r3, [pc, #840]	; (1000c8ac <system_clock_peripheral_enable+0x354>)
1000c564:	581b      	ldr	r3, [r3, r0]
1000c566:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c568:	4ad1      	ldr	r2, [pc, #836]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c56a:	68d1      	ldr	r1, [r2, #12]
1000c56c:	2302      	movs	r3, #2
1000c56e:	430b      	orrs	r3, r1
1000c570:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c572:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c574:	e198      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c576:	4ace      	ldr	r2, [pc, #824]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c578:	68d1      	ldr	r1, [r2, #12]
1000c57a:	2304      	movs	r3, #4
1000c57c:	430b      	orrs	r3, r1
1000c57e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c582:	e191      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c584:	4aca      	ldr	r2, [pc, #808]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c586:	68d1      	ldr	r1, [r2, #12]
1000c588:	2308      	movs	r3, #8
1000c58a:	430b      	orrs	r3, r1
1000c58c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c58e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c590:	e18a      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c592:	4ac7      	ldr	r2, [pc, #796]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c594:	68d1      	ldr	r1, [r2, #12]
1000c596:	2310      	movs	r3, #16
1000c598:	430b      	orrs	r3, r1
1000c59a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c59c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c59e:	e183      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5a0:	4ac3      	ldr	r2, [pc, #780]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5a2:	68d1      	ldr	r1, [r2, #12]
1000c5a4:	2320      	movs	r3, #32
1000c5a6:	430b      	orrs	r3, r1
1000c5a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c5ac:	e17c      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5ae:	4ac0      	ldr	r2, [pc, #768]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5b0:	68d1      	ldr	r1, [r2, #12]
1000c5b2:	2380      	movs	r3, #128	; 0x80
1000c5b4:	430b      	orrs	r3, r1
1000c5b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c5ba:	e175      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5bc:	4abc      	ldr	r2, [pc, #752]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5be:	68d3      	ldr	r3, [r2, #12]
1000c5c0:	2180      	movs	r1, #128	; 0x80
1000c5c2:	0049      	lsls	r1, r1, #1
1000c5c4:	430b      	orrs	r3, r1
1000c5c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c5ca:	e16d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5cc:	4ab8      	ldr	r2, [pc, #736]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5ce:	68d3      	ldr	r3, [r2, #12]
1000c5d0:	2180      	movs	r1, #128	; 0x80
1000c5d2:	0109      	lsls	r1, r1, #4
1000c5d4:	430b      	orrs	r3, r1
1000c5d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c5da:	e165      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5dc:	4ab4      	ldr	r2, [pc, #720]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5de:	68d3      	ldr	r3, [r2, #12]
1000c5e0:	2180      	movs	r1, #128	; 0x80
1000c5e2:	0149      	lsls	r1, r1, #5
1000c5e4:	430b      	orrs	r3, r1
1000c5e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c5ea:	e15d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5ec:	4ab0      	ldr	r2, [pc, #704]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5ee:	68d3      	ldr	r3, [r2, #12]
1000c5f0:	2180      	movs	r1, #128	; 0x80
1000c5f2:	0189      	lsls	r1, r1, #6
1000c5f4:	430b      	orrs	r3, r1
1000c5f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c5fa:	e155      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5fc:	4aac      	ldr	r2, [pc, #688]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c5fe:	68d3      	ldr	r3, [r2, #12]
1000c600:	2180      	movs	r1, #128	; 0x80
1000c602:	01c9      	lsls	r1, r1, #7
1000c604:	430b      	orrs	r3, r1
1000c606:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c608:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c60a:	e14d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c60c:	4aa8      	ldr	r2, [pc, #672]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c60e:	68d3      	ldr	r3, [r2, #12]
1000c610:	2180      	movs	r1, #128	; 0x80
1000c612:	0209      	lsls	r1, r1, #8
1000c614:	430b      	orrs	r3, r1
1000c616:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c618:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c61a:	e145      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c61c:	4aa4      	ldr	r2, [pc, #656]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c61e:	68d3      	ldr	r3, [r2, #12]
1000c620:	2180      	movs	r1, #128	; 0x80
1000c622:	0249      	lsls	r1, r1, #9
1000c624:	430b      	orrs	r3, r1
1000c626:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c62a:	e13d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c62c:	4aa0      	ldr	r2, [pc, #640]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c62e:	68d3      	ldr	r3, [r2, #12]
1000c630:	2180      	movs	r1, #128	; 0x80
1000c632:	0289      	lsls	r1, r1, #10
1000c634:	430b      	orrs	r3, r1
1000c636:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c638:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c63a:	e135      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c63c:	4a9c      	ldr	r2, [pc, #624]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c63e:	68d3      	ldr	r3, [r2, #12]
1000c640:	2180      	movs	r1, #128	; 0x80
1000c642:	02c9      	lsls	r1, r1, #11
1000c644:	430b      	orrs	r3, r1
1000c646:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c64a:	e12d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c64c:	4a98      	ldr	r2, [pc, #608]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c64e:	68d3      	ldr	r3, [r2, #12]
1000c650:	2180      	movs	r1, #128	; 0x80
1000c652:	0309      	lsls	r1, r1, #12
1000c654:	430b      	orrs	r3, r1
1000c656:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c658:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c65a:	e125      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c65c:	4a94      	ldr	r2, [pc, #592]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c65e:	68d3      	ldr	r3, [r2, #12]
1000c660:	2180      	movs	r1, #128	; 0x80
1000c662:	0349      	lsls	r1, r1, #13
1000c664:	430b      	orrs	r3, r1
1000c666:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c66a:	e11d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c66c:	4a90      	ldr	r2, [pc, #576]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c66e:	68d3      	ldr	r3, [r2, #12]
1000c670:	2180      	movs	r1, #128	; 0x80
1000c672:	0389      	lsls	r1, r1, #14
1000c674:	430b      	orrs	r3, r1
1000c676:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c678:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c67a:	e115      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c67c:	4a8c      	ldr	r2, [pc, #560]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c67e:	68d3      	ldr	r3, [r2, #12]
1000c680:	2180      	movs	r1, #128	; 0x80
1000c682:	03c9      	lsls	r1, r1, #15
1000c684:	430b      	orrs	r3, r1
1000c686:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c688:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c68a:	e10d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c68c:	4a88      	ldr	r2, [pc, #544]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c68e:	68d3      	ldr	r3, [r2, #12]
1000c690:	2180      	movs	r1, #128	; 0x80
1000c692:	0409      	lsls	r1, r1, #16
1000c694:	430b      	orrs	r3, r1
1000c696:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c698:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c69a:	e105      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c69c:	4a84      	ldr	r2, [pc, #528]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c69e:	68d3      	ldr	r3, [r2, #12]
1000c6a0:	2180      	movs	r1, #128	; 0x80
1000c6a2:	0449      	lsls	r1, r1, #17
1000c6a4:	430b      	orrs	r3, r1
1000c6a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c6aa:	e0fd      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6ac:	4a80      	ldr	r2, [pc, #512]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6ae:	68d3      	ldr	r3, [r2, #12]
1000c6b0:	2180      	movs	r1, #128	; 0x80
1000c6b2:	0489      	lsls	r1, r1, #18
1000c6b4:	430b      	orrs	r3, r1
1000c6b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c6ba:	e0f5      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6bc:	4a7c      	ldr	r2, [pc, #496]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6be:	68d3      	ldr	r3, [r2, #12]
1000c6c0:	2180      	movs	r1, #128	; 0x80
1000c6c2:	04c9      	lsls	r1, r1, #19
1000c6c4:	430b      	orrs	r3, r1
1000c6c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c6ca:	e0ed      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6cc:	4a78      	ldr	r2, [pc, #480]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6ce:	68d3      	ldr	r3, [r2, #12]
1000c6d0:	2180      	movs	r1, #128	; 0x80
1000c6d2:	0509      	lsls	r1, r1, #20
1000c6d4:	430b      	orrs	r3, r1
1000c6d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c6da:	e0e5      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6dc:	4a74      	ldr	r2, [pc, #464]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6de:	68d3      	ldr	r3, [r2, #12]
1000c6e0:	2180      	movs	r1, #128	; 0x80
1000c6e2:	0549      	lsls	r1, r1, #21
1000c6e4:	430b      	orrs	r3, r1
1000c6e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c6ea:	e0dd      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6ec:	4a70      	ldr	r2, [pc, #448]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6ee:	68d3      	ldr	r3, [r2, #12]
1000c6f0:	2180      	movs	r1, #128	; 0x80
1000c6f2:	0589      	lsls	r1, r1, #22
1000c6f4:	430b      	orrs	r3, r1
1000c6f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c6fa:	e0d5      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c6fc:	4a6c      	ldr	r2, [pc, #432]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c6fe:	68d3      	ldr	r3, [r2, #12]
1000c700:	2180      	movs	r1, #128	; 0x80
1000c702:	05c9      	lsls	r1, r1, #23
1000c704:	430b      	orrs	r3, r1
1000c706:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c70a:	e0cd      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c70c:	4a68      	ldr	r2, [pc, #416]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c70e:	6911      	ldr	r1, [r2, #16]
1000c710:	2301      	movs	r3, #1
1000c712:	430b      	orrs	r3, r1
1000c714:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c716:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c718:	e0c6      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c71a:	4a65      	ldr	r2, [pc, #404]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c71c:	6911      	ldr	r1, [r2, #16]
1000c71e:	2302      	movs	r3, #2
1000c720:	430b      	orrs	r3, r1
1000c722:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c726:	e0bf      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c728:	4a61      	ldr	r2, [pc, #388]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c72a:	6911      	ldr	r1, [r2, #16]
1000c72c:	2304      	movs	r3, #4
1000c72e:	430b      	orrs	r3, r1
1000c730:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c732:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c734:	e0b8      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c736:	4a5e      	ldr	r2, [pc, #376]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c738:	6911      	ldr	r1, [r2, #16]
1000c73a:	2308      	movs	r3, #8
1000c73c:	430b      	orrs	r3, r1
1000c73e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c740:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c742:	e0b1      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c744:	4a5a      	ldr	r2, [pc, #360]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c746:	6911      	ldr	r1, [r2, #16]
1000c748:	2310      	movs	r3, #16
1000c74a:	430b      	orrs	r3, r1
1000c74c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c74e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c750:	e0aa      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c752:	4a57      	ldr	r2, [pc, #348]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c754:	6911      	ldr	r1, [r2, #16]
1000c756:	2320      	movs	r3, #32
1000c758:	430b      	orrs	r3, r1
1000c75a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c75c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c75e:	e0a3      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c760:	4a53      	ldr	r2, [pc, #332]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c762:	6911      	ldr	r1, [r2, #16]
1000c764:	2340      	movs	r3, #64	; 0x40
1000c766:	430b      	orrs	r3, r1
1000c768:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c76a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c76c:	e09c      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c76e:	4a50      	ldr	r2, [pc, #320]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c770:	6911      	ldr	r1, [r2, #16]
1000c772:	2380      	movs	r3, #128	; 0x80
1000c774:	430b      	orrs	r3, r1
1000c776:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c77a:	e095      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c77c:	4a4c      	ldr	r2, [pc, #304]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c77e:	6913      	ldr	r3, [r2, #16]
1000c780:	2180      	movs	r1, #128	; 0x80
1000c782:	0049      	lsls	r1, r1, #1
1000c784:	430b      	orrs	r3, r1
1000c786:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c78a:	e08d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c78c:	4a48      	ldr	r2, [pc, #288]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c78e:	6913      	ldr	r3, [r2, #16]
1000c790:	2180      	movs	r1, #128	; 0x80
1000c792:	0089      	lsls	r1, r1, #2
1000c794:	430b      	orrs	r3, r1
1000c796:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c79a:	e085      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c79c:	4a44      	ldr	r2, [pc, #272]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c79e:	6913      	ldr	r3, [r2, #16]
1000c7a0:	2180      	movs	r1, #128	; 0x80
1000c7a2:	00c9      	lsls	r1, r1, #3
1000c7a4:	430b      	orrs	r3, r1
1000c7a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c7aa:	e07d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7ac:	4a40      	ldr	r2, [pc, #256]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7ae:	6913      	ldr	r3, [r2, #16]
1000c7b0:	2180      	movs	r1, #128	; 0x80
1000c7b2:	0109      	lsls	r1, r1, #4
1000c7b4:	430b      	orrs	r3, r1
1000c7b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c7ba:	e075      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7bc:	4a3c      	ldr	r2, [pc, #240]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7be:	6913      	ldr	r3, [r2, #16]
1000c7c0:	2180      	movs	r1, #128	; 0x80
1000c7c2:	0149      	lsls	r1, r1, #5
1000c7c4:	430b      	orrs	r3, r1
1000c7c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c7ca:	e06d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7cc:	4a38      	ldr	r2, [pc, #224]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7ce:	6913      	ldr	r3, [r2, #16]
1000c7d0:	2180      	movs	r1, #128	; 0x80
1000c7d2:	0189      	lsls	r1, r1, #6
1000c7d4:	430b      	orrs	r3, r1
1000c7d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c7da:	e065      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7dc:	4a34      	ldr	r2, [pc, #208]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7de:	6913      	ldr	r3, [r2, #16]
1000c7e0:	2180      	movs	r1, #128	; 0x80
1000c7e2:	01c9      	lsls	r1, r1, #7
1000c7e4:	430b      	orrs	r3, r1
1000c7e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c7ea:	e05d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7ec:	4a30      	ldr	r2, [pc, #192]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7ee:	6913      	ldr	r3, [r2, #16]
1000c7f0:	2180      	movs	r1, #128	; 0x80
1000c7f2:	0209      	lsls	r1, r1, #8
1000c7f4:	430b      	orrs	r3, r1
1000c7f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c7fa:	e055      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7fc:	4a2c      	ldr	r2, [pc, #176]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c7fe:	6913      	ldr	r3, [r2, #16]
1000c800:	2180      	movs	r1, #128	; 0x80
1000c802:	0249      	lsls	r1, r1, #9
1000c804:	430b      	orrs	r3, r1
1000c806:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c80a:	e04d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c80c:	4a28      	ldr	r2, [pc, #160]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c80e:	6913      	ldr	r3, [r2, #16]
1000c810:	2180      	movs	r1, #128	; 0x80
1000c812:	0289      	lsls	r1, r1, #10
1000c814:	430b      	orrs	r3, r1
1000c816:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c81a:	e045      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c81c:	4a24      	ldr	r2, [pc, #144]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c81e:	6913      	ldr	r3, [r2, #16]
1000c820:	2180      	movs	r1, #128	; 0x80
1000c822:	02c9      	lsls	r1, r1, #11
1000c824:	430b      	orrs	r3, r1
1000c826:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c82a:	e03d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c82c:	4a20      	ldr	r2, [pc, #128]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c82e:	6913      	ldr	r3, [r2, #16]
1000c830:	2180      	movs	r1, #128	; 0x80
1000c832:	0309      	lsls	r1, r1, #12
1000c834:	430b      	orrs	r3, r1
1000c836:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c83a:	e035      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c83c:	4a1c      	ldr	r2, [pc, #112]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c83e:	6913      	ldr	r3, [r2, #16]
1000c840:	2180      	movs	r1, #128	; 0x80
1000c842:	0349      	lsls	r1, r1, #13
1000c844:	430b      	orrs	r3, r1
1000c846:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c84a:	e02d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c84c:	4a18      	ldr	r2, [pc, #96]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c84e:	6913      	ldr	r3, [r2, #16]
1000c850:	2180      	movs	r1, #128	; 0x80
1000c852:	0389      	lsls	r1, r1, #14
1000c854:	430b      	orrs	r3, r1
1000c856:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c85a:	e025      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c85c:	4a14      	ldr	r2, [pc, #80]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c85e:	6913      	ldr	r3, [r2, #16]
1000c860:	2180      	movs	r1, #128	; 0x80
1000c862:	03c9      	lsls	r1, r1, #15
1000c864:	430b      	orrs	r3, r1
1000c866:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c86a:	e01d      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c86c:	4a10      	ldr	r2, [pc, #64]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c86e:	6913      	ldr	r3, [r2, #16]
1000c870:	2180      	movs	r1, #128	; 0x80
1000c872:	0409      	lsls	r1, r1, #16
1000c874:	430b      	orrs	r3, r1
1000c876:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c87a:	e015      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c87c:	4a0c      	ldr	r2, [pc, #48]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c87e:	7d11      	ldrb	r1, [r2, #20]
1000c880:	2301      	movs	r3, #1
1000c882:	430b      	orrs	r3, r1
1000c884:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c886:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c888:	e00e      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c88a:	4a09      	ldr	r2, [pc, #36]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c88c:	7d11      	ldrb	r1, [r2, #20]
1000c88e:	2302      	movs	r3, #2
1000c890:	430b      	orrs	r3, r1
1000c892:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c894:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c896:	e007      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c898:	4a05      	ldr	r2, [pc, #20]	; (1000c8b0 <system_clock_peripheral_enable+0x358>)
1000c89a:	7d11      	ldrb	r1, [r2, #20]
1000c89c:	2304      	movs	r3, #4
1000c89e:	430b      	orrs	r3, r1
1000c8a0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c8a4:	e000      	b.n	1000c8a8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c8a6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c8a8:	bd00      	pop	{pc}
1000c8aa:	46c0      	nop			; (mov r8, r8)
1000c8ac:	10013448 	.word	0x10013448
1000c8b0:	4000b000 	.word	0x4000b000

1000c8b4 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c8b4:	b500      	push	{lr}
	switch (peripheral) {
1000c8b6:	2843      	cmp	r0, #67	; 0x43
1000c8b8:	d900      	bls.n	1000c8bc <system_peripheral_reset+0x8>
1000c8ba:	e223      	b.n	1000cd04 <system_peripheral_reset+0x450>
1000c8bc:	0080      	lsls	r0, r0, #2
1000c8be:	4be0      	ldr	r3, [pc, #896]	; (1000cc40 <system_peripheral_reset+0x38c>)
1000c8c0:	581b      	ldr	r3, [r3, r0]
1000c8c2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8c4:	4bdf      	ldr	r3, [pc, #892]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c8c6:	6859      	ldr	r1, [r3, #4]
1000c8c8:	2202      	movs	r2, #2
1000c8ca:	4391      	bics	r1, r2
1000c8cc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8ce:	6859      	ldr	r1, [r3, #4]
1000c8d0:	430a      	orrs	r2, r1
1000c8d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c8d6:	e216      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8d8:	4bda      	ldr	r3, [pc, #872]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c8da:	6859      	ldr	r1, [r3, #4]
1000c8dc:	2204      	movs	r2, #4
1000c8de:	4391      	bics	r1, r2
1000c8e0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8e2:	6859      	ldr	r1, [r3, #4]
1000c8e4:	430a      	orrs	r2, r1
1000c8e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c8ea:	e20c      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8ec:	4bd5      	ldr	r3, [pc, #852]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c8ee:	6859      	ldr	r1, [r3, #4]
1000c8f0:	2208      	movs	r2, #8
1000c8f2:	4391      	bics	r1, r2
1000c8f4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8f6:	6859      	ldr	r1, [r3, #4]
1000c8f8:	430a      	orrs	r2, r1
1000c8fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c8fe:	e202      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c900:	4bd0      	ldr	r3, [pc, #832]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c902:	6859      	ldr	r1, [r3, #4]
1000c904:	2210      	movs	r2, #16
1000c906:	4391      	bics	r1, r2
1000c908:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c90a:	6859      	ldr	r1, [r3, #4]
1000c90c:	430a      	orrs	r2, r1
1000c90e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c910:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c912:	e1f8      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c914:	4bcb      	ldr	r3, [pc, #812]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c916:	6859      	ldr	r1, [r3, #4]
1000c918:	2220      	movs	r2, #32
1000c91a:	4391      	bics	r1, r2
1000c91c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c91e:	6859      	ldr	r1, [r3, #4]
1000c920:	430a      	orrs	r2, r1
1000c922:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c924:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c926:	e1ee      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c928:	4bc6      	ldr	r3, [pc, #792]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c92a:	6859      	ldr	r1, [r3, #4]
1000c92c:	2240      	movs	r2, #64	; 0x40
1000c92e:	4391      	bics	r1, r2
1000c930:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c932:	6859      	ldr	r1, [r3, #4]
1000c934:	430a      	orrs	r2, r1
1000c936:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c938:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c93a:	e1e4      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c93c:	4bc1      	ldr	r3, [pc, #772]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c93e:	6859      	ldr	r1, [r3, #4]
1000c940:	2280      	movs	r2, #128	; 0x80
1000c942:	4391      	bics	r1, r2
1000c944:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c946:	6859      	ldr	r1, [r3, #4]
1000c948:	430a      	orrs	r2, r1
1000c94a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c94c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c94e:	e1da      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c950:	4bbc      	ldr	r3, [pc, #752]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c952:	6859      	ldr	r1, [r3, #4]
1000c954:	4abc      	ldr	r2, [pc, #752]	; (1000cc48 <system_peripheral_reset+0x394>)
1000c956:	400a      	ands	r2, r1
1000c958:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c95a:	685a      	ldr	r2, [r3, #4]
1000c95c:	2180      	movs	r1, #128	; 0x80
1000c95e:	0049      	lsls	r1, r1, #1
1000c960:	430a      	orrs	r2, r1
1000c962:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c964:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c966:	e1ce      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c968:	4bb6      	ldr	r3, [pc, #728]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c96a:	6859      	ldr	r1, [r3, #4]
1000c96c:	4ab7      	ldr	r2, [pc, #732]	; (1000cc4c <system_peripheral_reset+0x398>)
1000c96e:	400a      	ands	r2, r1
1000c970:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c972:	685a      	ldr	r2, [r3, #4]
1000c974:	2180      	movs	r1, #128	; 0x80
1000c976:	0089      	lsls	r1, r1, #2
1000c978:	430a      	orrs	r2, r1
1000c97a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c97c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c97e:	e1c2      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c980:	4bb0      	ldr	r3, [pc, #704]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c982:	6859      	ldr	r1, [r3, #4]
1000c984:	4ab2      	ldr	r2, [pc, #712]	; (1000cc50 <system_peripheral_reset+0x39c>)
1000c986:	400a      	ands	r2, r1
1000c988:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c98a:	685a      	ldr	r2, [r3, #4]
1000c98c:	2180      	movs	r1, #128	; 0x80
1000c98e:	00c9      	lsls	r1, r1, #3
1000c990:	430a      	orrs	r2, r1
1000c992:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c994:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c996:	e1b6      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c998:	4baa      	ldr	r3, [pc, #680]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c99a:	6859      	ldr	r1, [r3, #4]
1000c99c:	4aad      	ldr	r2, [pc, #692]	; (1000cc54 <system_peripheral_reset+0x3a0>)
1000c99e:	400a      	ands	r2, r1
1000c9a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9a2:	685a      	ldr	r2, [r3, #4]
1000c9a4:	2180      	movs	r1, #128	; 0x80
1000c9a6:	0109      	lsls	r1, r1, #4
1000c9a8:	430a      	orrs	r2, r1
1000c9aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ac:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c9ae:	e1aa      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9b0:	4ba4      	ldr	r3, [pc, #656]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c9b2:	6859      	ldr	r1, [r3, #4]
1000c9b4:	4aa8      	ldr	r2, [pc, #672]	; (1000cc58 <system_peripheral_reset+0x3a4>)
1000c9b6:	400a      	ands	r2, r1
1000c9b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9ba:	685a      	ldr	r2, [r3, #4]
1000c9bc:	2180      	movs	r1, #128	; 0x80
1000c9be:	0149      	lsls	r1, r1, #5
1000c9c0:	430a      	orrs	r2, r1
1000c9c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c9c6:	e19e      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9c8:	4b9e      	ldr	r3, [pc, #632]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c9ca:	6859      	ldr	r1, [r3, #4]
1000c9cc:	4aa3      	ldr	r2, [pc, #652]	; (1000cc5c <system_peripheral_reset+0x3a8>)
1000c9ce:	400a      	ands	r2, r1
1000c9d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9d2:	685a      	ldr	r2, [r3, #4]
1000c9d4:	2180      	movs	r1, #128	; 0x80
1000c9d6:	0189      	lsls	r1, r1, #6
1000c9d8:	430a      	orrs	r2, r1
1000c9da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9dc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c9de:	e192      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9e0:	4b98      	ldr	r3, [pc, #608]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c9e2:	6859      	ldr	r1, [r3, #4]
1000c9e4:	4a9e      	ldr	r2, [pc, #632]	; (1000cc60 <system_peripheral_reset+0x3ac>)
1000c9e6:	400a      	ands	r2, r1
1000c9e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c9ea:	685a      	ldr	r2, [r3, #4]
1000c9ec:	2180      	movs	r1, #128	; 0x80
1000c9ee:	01c9      	lsls	r1, r1, #7
1000c9f0:	430a      	orrs	r2, r1
1000c9f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c9f6:	e186      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c9f8:	4b92      	ldr	r3, [pc, #584]	; (1000cc44 <system_peripheral_reset+0x390>)
1000c9fa:	6859      	ldr	r1, [r3, #4]
1000c9fc:	4a99      	ldr	r2, [pc, #612]	; (1000cc64 <system_peripheral_reset+0x3b0>)
1000c9fe:	400a      	ands	r2, r1
1000ca00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca02:	685a      	ldr	r2, [r3, #4]
1000ca04:	2180      	movs	r1, #128	; 0x80
1000ca06:	0209      	lsls	r1, r1, #8
1000ca08:	430a      	orrs	r2, r1
1000ca0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca0c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000ca0e:	e17a      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca10:	4b8c      	ldr	r3, [pc, #560]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca12:	6859      	ldr	r1, [r3, #4]
1000ca14:	4a94      	ldr	r2, [pc, #592]	; (1000cc68 <system_peripheral_reset+0x3b4>)
1000ca16:	400a      	ands	r2, r1
1000ca18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca1a:	685a      	ldr	r2, [r3, #4]
1000ca1c:	2180      	movs	r1, #128	; 0x80
1000ca1e:	0249      	lsls	r1, r1, #9
1000ca20:	430a      	orrs	r2, r1
1000ca22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca24:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000ca26:	e16e      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca28:	4b86      	ldr	r3, [pc, #536]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca2a:	6859      	ldr	r1, [r3, #4]
1000ca2c:	4a8f      	ldr	r2, [pc, #572]	; (1000cc6c <system_peripheral_reset+0x3b8>)
1000ca2e:	400a      	ands	r2, r1
1000ca30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca32:	685a      	ldr	r2, [r3, #4]
1000ca34:	2180      	movs	r1, #128	; 0x80
1000ca36:	0289      	lsls	r1, r1, #10
1000ca38:	430a      	orrs	r2, r1
1000ca3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca3c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ca3e:	e162      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca40:	4b80      	ldr	r3, [pc, #512]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca42:	6859      	ldr	r1, [r3, #4]
1000ca44:	4a8a      	ldr	r2, [pc, #552]	; (1000cc70 <system_peripheral_reset+0x3bc>)
1000ca46:	400a      	ands	r2, r1
1000ca48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca4a:	685a      	ldr	r2, [r3, #4]
1000ca4c:	2180      	movs	r1, #128	; 0x80
1000ca4e:	02c9      	lsls	r1, r1, #11
1000ca50:	430a      	orrs	r2, r1
1000ca52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca54:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000ca56:	e156      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca58:	4b7a      	ldr	r3, [pc, #488]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca5a:	6859      	ldr	r1, [r3, #4]
1000ca5c:	4a85      	ldr	r2, [pc, #532]	; (1000cc74 <system_peripheral_reset+0x3c0>)
1000ca5e:	400a      	ands	r2, r1
1000ca60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca62:	685a      	ldr	r2, [r3, #4]
1000ca64:	2180      	movs	r1, #128	; 0x80
1000ca66:	0309      	lsls	r1, r1, #12
1000ca68:	430a      	orrs	r2, r1
1000ca6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca6c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000ca6e:	e14a      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca70:	4b74      	ldr	r3, [pc, #464]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca72:	6859      	ldr	r1, [r3, #4]
1000ca74:	4a80      	ldr	r2, [pc, #512]	; (1000cc78 <system_peripheral_reset+0x3c4>)
1000ca76:	400a      	ands	r2, r1
1000ca78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca7a:	685a      	ldr	r2, [r3, #4]
1000ca7c:	2180      	movs	r1, #128	; 0x80
1000ca7e:	0349      	lsls	r1, r1, #13
1000ca80:	430a      	orrs	r2, r1
1000ca82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca84:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000ca86:	e13e      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ca88:	4b6e      	ldr	r3, [pc, #440]	; (1000cc44 <system_peripheral_reset+0x390>)
1000ca8a:	6859      	ldr	r1, [r3, #4]
1000ca8c:	4a7b      	ldr	r2, [pc, #492]	; (1000cc7c <system_peripheral_reset+0x3c8>)
1000ca8e:	400a      	ands	r2, r1
1000ca90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ca92:	685a      	ldr	r2, [r3, #4]
1000ca94:	2180      	movs	r1, #128	; 0x80
1000ca96:	0389      	lsls	r1, r1, #14
1000ca98:	430a      	orrs	r2, r1
1000ca9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca9c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000ca9e:	e132      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000caa0:	4b68      	ldr	r3, [pc, #416]	; (1000cc44 <system_peripheral_reset+0x390>)
1000caa2:	6859      	ldr	r1, [r3, #4]
1000caa4:	4a76      	ldr	r2, [pc, #472]	; (1000cc80 <system_peripheral_reset+0x3cc>)
1000caa6:	400a      	ands	r2, r1
1000caa8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caaa:	685a      	ldr	r2, [r3, #4]
1000caac:	2180      	movs	r1, #128	; 0x80
1000caae:	03c9      	lsls	r1, r1, #15
1000cab0:	430a      	orrs	r2, r1
1000cab2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cab4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cab6:	e126      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cab8:	4b62      	ldr	r3, [pc, #392]	; (1000cc44 <system_peripheral_reset+0x390>)
1000caba:	6859      	ldr	r1, [r3, #4]
1000cabc:	4a71      	ldr	r2, [pc, #452]	; (1000cc84 <system_peripheral_reset+0x3d0>)
1000cabe:	400a      	ands	r2, r1
1000cac0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cac2:	685a      	ldr	r2, [r3, #4]
1000cac4:	2180      	movs	r1, #128	; 0x80
1000cac6:	0409      	lsls	r1, r1, #16
1000cac8:	430a      	orrs	r2, r1
1000caca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cacc:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cace:	e11a      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cad0:	4b5c      	ldr	r3, [pc, #368]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cad2:	6859      	ldr	r1, [r3, #4]
1000cad4:	4a6c      	ldr	r2, [pc, #432]	; (1000cc88 <system_peripheral_reset+0x3d4>)
1000cad6:	400a      	ands	r2, r1
1000cad8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cada:	685a      	ldr	r2, [r3, #4]
1000cadc:	2180      	movs	r1, #128	; 0x80
1000cade:	0449      	lsls	r1, r1, #17
1000cae0:	430a      	orrs	r2, r1
1000cae2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cae6:	e10e      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cae8:	4b56      	ldr	r3, [pc, #344]	; (1000cc44 <system_peripheral_reset+0x390>)
1000caea:	6859      	ldr	r1, [r3, #4]
1000caec:	4a67      	ldr	r2, [pc, #412]	; (1000cc8c <system_peripheral_reset+0x3d8>)
1000caee:	400a      	ands	r2, r1
1000caf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000caf2:	685a      	ldr	r2, [r3, #4]
1000caf4:	2180      	movs	r1, #128	; 0x80
1000caf6:	0489      	lsls	r1, r1, #18
1000caf8:	430a      	orrs	r2, r1
1000cafa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cafc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cafe:	e102      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb00:	4b50      	ldr	r3, [pc, #320]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb02:	6859      	ldr	r1, [r3, #4]
1000cb04:	4a62      	ldr	r2, [pc, #392]	; (1000cc90 <system_peripheral_reset+0x3dc>)
1000cb06:	400a      	ands	r2, r1
1000cb08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb0a:	685a      	ldr	r2, [r3, #4]
1000cb0c:	2180      	movs	r1, #128	; 0x80
1000cb0e:	04c9      	lsls	r1, r1, #19
1000cb10:	430a      	orrs	r2, r1
1000cb12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb14:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cb16:	e0f6      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb18:	4b4a      	ldr	r3, [pc, #296]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb1a:	6859      	ldr	r1, [r3, #4]
1000cb1c:	4a5d      	ldr	r2, [pc, #372]	; (1000cc94 <system_peripheral_reset+0x3e0>)
1000cb1e:	400a      	ands	r2, r1
1000cb20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb22:	685a      	ldr	r2, [r3, #4]
1000cb24:	2180      	movs	r1, #128	; 0x80
1000cb26:	0509      	lsls	r1, r1, #20
1000cb28:	430a      	orrs	r2, r1
1000cb2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb2c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cb2e:	e0ea      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb30:	4b44      	ldr	r3, [pc, #272]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb32:	6859      	ldr	r1, [r3, #4]
1000cb34:	4a58      	ldr	r2, [pc, #352]	; (1000cc98 <system_peripheral_reset+0x3e4>)
1000cb36:	400a      	ands	r2, r1
1000cb38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb3a:	685a      	ldr	r2, [r3, #4]
1000cb3c:	2180      	movs	r1, #128	; 0x80
1000cb3e:	0549      	lsls	r1, r1, #21
1000cb40:	430a      	orrs	r2, r1
1000cb42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb44:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000cb46:	e0de      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb48:	4b3e      	ldr	r3, [pc, #248]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb4a:	6859      	ldr	r1, [r3, #4]
1000cb4c:	4a53      	ldr	r2, [pc, #332]	; (1000cc9c <system_peripheral_reset+0x3e8>)
1000cb4e:	400a      	ands	r2, r1
1000cb50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb52:	685a      	ldr	r2, [r3, #4]
1000cb54:	2180      	movs	r1, #128	; 0x80
1000cb56:	0589      	lsls	r1, r1, #22
1000cb58:	430a      	orrs	r2, r1
1000cb5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb5c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000cb5e:	e0d2      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb60:	4b38      	ldr	r3, [pc, #224]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb62:	6859      	ldr	r1, [r3, #4]
1000cb64:	4a4e      	ldr	r2, [pc, #312]	; (1000cca0 <system_peripheral_reset+0x3ec>)
1000cb66:	400a      	ands	r2, r1
1000cb68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb6a:	685a      	ldr	r2, [r3, #4]
1000cb6c:	2180      	movs	r1, #128	; 0x80
1000cb6e:	05c9      	lsls	r1, r1, #23
1000cb70:	430a      	orrs	r2, r1
1000cb72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb74:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000cb76:	e0c6      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb78:	4a32      	ldr	r2, [pc, #200]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb7a:	6853      	ldr	r3, [r2, #4]
1000cb7c:	005b      	lsls	r3, r3, #1
1000cb7e:	085b      	lsrs	r3, r3, #1
1000cb80:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb82:	6853      	ldr	r3, [r2, #4]
1000cb84:	2180      	movs	r1, #128	; 0x80
1000cb86:	0609      	lsls	r1, r1, #24
1000cb88:	430b      	orrs	r3, r1
1000cb8a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb8c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000cb8e:	e0ba      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb90:	4b2c      	ldr	r3, [pc, #176]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cb92:	891a      	ldrh	r2, [r3, #8]
1000cb94:	2101      	movs	r1, #1
1000cb96:	438a      	bics	r2, r1
1000cb98:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb9a:	8919      	ldrh	r1, [r3, #8]
1000cb9c:	2201      	movs	r2, #1
1000cb9e:	430a      	orrs	r2, r1
1000cba0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba2:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000cba4:	e0af      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cba6:	4b27      	ldr	r3, [pc, #156]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cba8:	891a      	ldrh	r2, [r3, #8]
1000cbaa:	2102      	movs	r1, #2
1000cbac:	438a      	bics	r2, r1
1000cbae:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cbb0:	8919      	ldrh	r1, [r3, #8]
1000cbb2:	2202      	movs	r2, #2
1000cbb4:	430a      	orrs	r2, r1
1000cbb6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbb8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000cbba:	e0a4      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cbbc:	4b21      	ldr	r3, [pc, #132]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cbbe:	891a      	ldrh	r2, [r3, #8]
1000cbc0:	2104      	movs	r1, #4
1000cbc2:	438a      	bics	r2, r1
1000cbc4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cbc6:	8919      	ldrh	r1, [r3, #8]
1000cbc8:	2204      	movs	r2, #4
1000cbca:	430a      	orrs	r2, r1
1000cbcc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbce:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000cbd0:	e099      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cbd2:	4b1c      	ldr	r3, [pc, #112]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cbd4:	891a      	ldrh	r2, [r3, #8]
1000cbd6:	2108      	movs	r1, #8
1000cbd8:	438a      	bics	r2, r1
1000cbda:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cbdc:	8919      	ldrh	r1, [r3, #8]
1000cbde:	2208      	movs	r2, #8
1000cbe0:	430a      	orrs	r2, r1
1000cbe2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe4:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000cbe6:	e08e      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cbe8:	4b16      	ldr	r3, [pc, #88]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cbea:	891a      	ldrh	r2, [r3, #8]
1000cbec:	2110      	movs	r1, #16
1000cbee:	438a      	bics	r2, r1
1000cbf0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cbf2:	8919      	ldrh	r1, [r3, #8]
1000cbf4:	2210      	movs	r2, #16
1000cbf6:	430a      	orrs	r2, r1
1000cbf8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbfa:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000cbfc:	e083      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cbfe:	4b11      	ldr	r3, [pc, #68]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cc00:	891a      	ldrh	r2, [r3, #8]
1000cc02:	2120      	movs	r1, #32
1000cc04:	438a      	bics	r2, r1
1000cc06:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc08:	8919      	ldrh	r1, [r3, #8]
1000cc0a:	2220      	movs	r2, #32
1000cc0c:	430a      	orrs	r2, r1
1000cc0e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc10:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cc12:	e078      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc14:	4b0b      	ldr	r3, [pc, #44]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cc16:	891a      	ldrh	r2, [r3, #8]
1000cc18:	2140      	movs	r1, #64	; 0x40
1000cc1a:	438a      	bics	r2, r1
1000cc1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc1e:	8919      	ldrh	r1, [r3, #8]
1000cc20:	2240      	movs	r2, #64	; 0x40
1000cc22:	430a      	orrs	r2, r1
1000cc24:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc26:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000cc28:	e06d      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cc2a:	4b06      	ldr	r3, [pc, #24]	; (1000cc44 <system_peripheral_reset+0x390>)
1000cc2c:	891a      	ldrh	r2, [r3, #8]
1000cc2e:	2180      	movs	r1, #128	; 0x80
1000cc30:	438a      	bics	r2, r1
1000cc32:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cc34:	8919      	ldrh	r1, [r3, #8]
1000cc36:	2280      	movs	r2, #128	; 0x80
1000cc38:	430a      	orrs	r2, r1
1000cc3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cc3e:	e062      	b.n	1000cd06 <system_peripheral_reset+0x452>
1000cc40:	10013520 	.word	0x10013520
1000cc44:	4000b000 	.word	0x4000b000
1000cc48:	fffffeff 	.word	0xfffffeff
1000cc4c:	fffffdff 	.word	0xfffffdff
1000cc50:	fffffbff 	.word	0xfffffbff
1000cc54:	fffff7ff 	.word	0xfffff7ff
1000cc58:	ffffefff 	.word	0xffffefff
1000cc5c:	ffffdfff 	.word	0xffffdfff
1000cc60:	ffffbfff 	.word	0xffffbfff
1000cc64:	ffff7fff 	.word	0xffff7fff
1000cc68:	fffeffff 	.word	0xfffeffff
1000cc6c:	fffdffff 	.word	0xfffdffff
1000cc70:	fffbffff 	.word	0xfffbffff
1000cc74:	fff7ffff 	.word	0xfff7ffff
1000cc78:	ffefffff 	.word	0xffefffff
1000cc7c:	ffdfffff 	.word	0xffdfffff
1000cc80:	ffbfffff 	.word	0xffbfffff
1000cc84:	ff7fffff 	.word	0xff7fffff
1000cc88:	feffffff 	.word	0xfeffffff
1000cc8c:	fdffffff 	.word	0xfdffffff
1000cc90:	fbffffff 	.word	0xfbffffff
1000cc94:	f7ffffff 	.word	0xf7ffffff
1000cc98:	efffffff 	.word	0xefffffff
1000cc9c:	dfffffff 	.word	0xdfffffff
1000cca0:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cca4:	4b18      	ldr	r3, [pc, #96]	; (1000cd08 <system_peripheral_reset+0x454>)
1000cca6:	8919      	ldrh	r1, [r3, #8]
1000cca8:	4a18      	ldr	r2, [pc, #96]	; (1000cd0c <system_peripheral_reset+0x458>)
1000ccaa:	400a      	ands	r2, r1
1000ccac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccae:	8919      	ldrh	r1, [r3, #8]
1000ccb0:	2280      	movs	r2, #128	; 0x80
1000ccb2:	0052      	lsls	r2, r2, #1
1000ccb4:	430a      	orrs	r2, r1
1000ccb6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000ccba:	e024      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccbc:	4b12      	ldr	r3, [pc, #72]	; (1000cd08 <system_peripheral_reset+0x454>)
1000ccbe:	8919      	ldrh	r1, [r3, #8]
1000ccc0:	4a13      	ldr	r2, [pc, #76]	; (1000cd10 <system_peripheral_reset+0x45c>)
1000ccc2:	400a      	ands	r2, r1
1000ccc4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccc6:	8919      	ldrh	r1, [r3, #8]
1000ccc8:	2280      	movs	r2, #128	; 0x80
1000ccca:	0092      	lsls	r2, r2, #2
1000cccc:	430a      	orrs	r2, r1
1000ccce:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccd0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ccd2:	e018      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccd4:	4b0c      	ldr	r3, [pc, #48]	; (1000cd08 <system_peripheral_reset+0x454>)
1000ccd6:	8919      	ldrh	r1, [r3, #8]
1000ccd8:	4a0e      	ldr	r2, [pc, #56]	; (1000cd14 <system_peripheral_reset+0x460>)
1000ccda:	400a      	ands	r2, r1
1000ccdc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccde:	8919      	ldrh	r1, [r3, #8]
1000cce0:	2280      	movs	r2, #128	; 0x80
1000cce2:	00d2      	lsls	r2, r2, #3
1000cce4:	430a      	orrs	r2, r1
1000cce6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000ccea:	e00c      	b.n	1000cd06 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ccec:	4b06      	ldr	r3, [pc, #24]	; (1000cd08 <system_peripheral_reset+0x454>)
1000ccee:	8919      	ldrh	r1, [r3, #8]
1000ccf0:	4a09      	ldr	r2, [pc, #36]	; (1000cd18 <system_peripheral_reset+0x464>)
1000ccf2:	400a      	ands	r2, r1
1000ccf4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ccf6:	8919      	ldrh	r1, [r3, #8]
1000ccf8:	2280      	movs	r2, #128	; 0x80
1000ccfa:	0112      	lsls	r2, r2, #4
1000ccfc:	430a      	orrs	r2, r1
1000ccfe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd00:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cd02:	e000      	b.n	1000cd06 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cd04:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cd06:	bd00      	pop	{pc}
1000cd08:	4000b000 	.word	0x4000b000
1000cd0c:	fffffeff 	.word	0xfffffeff
1000cd10:	fffffdff 	.word	0xfffffdff
1000cd14:	fffffbff 	.word	0xfffffbff
1000cd18:	fffff7ff 	.word	0xfffff7ff

1000cd1c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000cd1c:	2380      	movs	r3, #128	; 0x80
1000cd1e:	04db      	lsls	r3, r3, #19
1000cd20:	469c      	mov	ip, r3
1000cd22:	4460      	add	r0, ip
1000cd24:	0080      	lsls	r0, r0, #2
1000cd26:	6001      	str	r1, [r0, #0]
}
1000cd28:	4770      	bx	lr
1000cd2a:	46c0      	nop			; (mov r8, r8)

1000cd2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000cd2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000cd2e:	4a06      	ldr	r2, [pc, #24]	; (1000cd48 <_sbrk+0x1c>)
1000cd30:	6812      	ldr	r2, [r2, #0]
1000cd32:	2a00      	cmp	r2, #0
1000cd34:	d102      	bne.n	1000cd3c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000cd36:	4905      	ldr	r1, [pc, #20]	; (1000cd4c <_sbrk+0x20>)
1000cd38:	4a03      	ldr	r2, [pc, #12]	; (1000cd48 <_sbrk+0x1c>)
1000cd3a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000cd3c:	4a02      	ldr	r2, [pc, #8]	; (1000cd48 <_sbrk+0x1c>)
1000cd3e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000cd40:	18c3      	adds	r3, r0, r3
1000cd42:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000cd44:	4770      	bx	lr
1000cd46:	46c0      	nop			; (mov r8, r8)
1000cd48:	10014de0 	.word	0x10014de0
1000cd4c:	100168c8 	.word	0x100168c8

1000cd50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000cd50:	2001      	movs	r0, #1
1000cd52:	4240      	negs	r0, r0
1000cd54:	4770      	bx	lr
1000cd56:	46c0      	nop			; (mov r8, r8)

1000cd58 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000cd58:	2380      	movs	r3, #128	; 0x80
1000cd5a:	019b      	lsls	r3, r3, #6
1000cd5c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000cd5e:	2000      	movs	r0, #0
1000cd60:	4770      	bx	lr
1000cd62:	46c0      	nop			; (mov r8, r8)

1000cd64 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000cd64:	2001      	movs	r0, #1
1000cd66:	4770      	bx	lr

1000cd68 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000cd68:	2000      	movs	r0, #0
1000cd6a:	4770      	bx	lr

1000cd6c <interrupt_cb>:
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000cd6c:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000cd6e:	2201      	movs	r2, #1
1000cd70:	4b04      	ldr	r3, [pc, #16]	; (1000cd84 <interrupt_cb+0x18>)
1000cd72:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000cd74:	2300      	movs	r3, #0
1000cd76:	2200      	movs	r2, #0
1000cd78:	2102      	movs	r1, #2
1000cd7a:	201d      	movs	r0, #29
1000cd7c:	4c02      	ldr	r4, [pc, #8]	; (1000cd88 <interrupt_cb+0x1c>)
1000cd7e:	47a0      	blx	r4
}
1000cd80:	bd10      	pop	{r4, pc}
1000cd82:	46c0      	nop			; (mov r8, r8)
1000cd84:	10014de4 	.word	0x10014de4
1000cd88:	1000b32d 	.word	0x1000b32d

1000cd8c <configure_i2c_master>:
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000cd8c:	b530      	push	{r4, r5, lr}
1000cd8e:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000cd90:	2010      	movs	r0, #16
1000cd92:	4c14      	ldr	r4, [pc, #80]	; (1000cde4 <configure_i2c_master+0x58>)
1000cd94:	47a0      	blx	r4
1000cd96:	4b14      	ldr	r3, [pc, #80]	; (1000cde8 <configure_i2c_master+0x5c>)
1000cd98:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000cd9a:	2010      	movs	r0, #16
1000cd9c:	47a0      	blx	r4
1000cd9e:	4b13      	ldr	r3, [pc, #76]	; (1000cdec <configure_i2c_master+0x60>)
1000cda0:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000cda2:	ac01      	add	r4, sp, #4
1000cda4:	0020      	movs	r0, r4
1000cda6:	4b12      	ldr	r3, [pc, #72]	; (1000cdf0 <configure_i2c_master+0x64>)
1000cda8:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000cdaa:	2300      	movs	r3, #0
1000cdac:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000cdae:	3341      	adds	r3, #65	; 0x41
1000cdb0:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000cdb2:	3b39      	subs	r3, #57	; 0x39
1000cdb4:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000cdb6:	3301      	adds	r3, #1
1000cdb8:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000cdba:	3b07      	subs	r3, #7
1000cdbc:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000cdbe:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000cdc0:	4d0c      	ldr	r5, [pc, #48]	; (1000cdf4 <configure_i2c_master+0x68>)
1000cdc2:	4c0d      	ldr	r4, [pc, #52]	; (1000cdf8 <configure_i2c_master+0x6c>)
1000cdc4:	aa01      	add	r2, sp, #4
1000cdc6:	490d      	ldr	r1, [pc, #52]	; (1000cdfc <configure_i2c_master+0x70>)
1000cdc8:	0028      	movs	r0, r5
1000cdca:	47a0      	blx	r4
1000cdcc:	2800      	cmp	r0, #0
1000cdce:	d1f9      	bne.n	1000cdc4 <configure_i2c_master+0x38>
	
	i2c_enable(i2c_master_instance.hw);
1000cdd0:	4b08      	ldr	r3, [pc, #32]	; (1000cdf4 <configure_i2c_master+0x68>)
1000cdd2:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000cdd4:	2128      	movs	r1, #40	; 0x28
1000cdd6:	5c53      	ldrb	r3, [r2, r1]
1000cdd8:	07db      	lsls	r3, r3, #31
1000cdda:	d4fc      	bmi.n	1000cdd6 <configure_i2c_master+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000cddc:	2301      	movs	r3, #1
1000cdde:	7513      	strb	r3, [r2, #20]
}
1000cde0:	b007      	add	sp, #28
1000cde2:	bd30      	pop	{r4, r5, pc}
1000cde4:	10011569 	.word	0x10011569
1000cde8:	10014ec0 	.word	0x10014ec0
1000cdec:	10014eb8 	.word	0x10014eb8
1000cdf0:	1000c3c1 	.word	0x1000c3c1
1000cdf4:	10015b3c 	.word	0x10015b3c
1000cdf8:	1000c3d9 	.word	0x1000c3d9
1000cdfc:	40003000 	.word	0x40003000

1000ce00 <init_dualtimer>:

void init_dualtimer(void)
{
1000ce00:	b510      	push	{r4, lr}
1000ce02:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000ce04:	ac01      	add	r4, sp, #4
1000ce06:	0020      	movs	r0, r4
1000ce08:	4b06      	ldr	r3, [pc, #24]	; (1000ce24 <init_dualtimer+0x24>)
1000ce0a:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000ce0c:	4b06      	ldr	r3, [pc, #24]	; (1000ce28 <init_dualtimer+0x28>)
1000ce0e:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000ce10:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000ce12:	2300      	movs	r3, #0
1000ce14:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000ce16:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000ce18:	0020      	movs	r0, r4
1000ce1a:	4b04      	ldr	r3, [pc, #16]	; (1000ce2c <init_dualtimer+0x2c>)
1000ce1c:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000ce1e:	b008      	add	sp, #32
1000ce20:	bd10      	pop	{r4, pc}
1000ce22:	46c0      	nop			; (mov r8, r8)
1000ce24:	10008199 	.word	0x10008199
1000ce28:	00006590 	.word	0x00006590
1000ce2c:	100081e1 	.word	0x100081e1

1000ce30 <imu_poll_data>:
    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
    dmp_enable_feature(hal.dmp_features);
}

void imu_poll_data(void)
{
1000ce30:	b510      	push	{r4, lr}
1000ce32:	b08c      	sub	sp, #48	; 0x30
    st.chip_cfg.dmp_on = 1;
1000ce34:	2101      	movs	r1, #1
1000ce36:	2324      	movs	r3, #36	; 0x24
1000ce38:	4a07      	ldr	r2, [pc, #28]	; (1000ce58 <imu_poll_data+0x28>)
1000ce3a:	54d1      	strb	r1, [r2, r3]
    short gyro[3], accel_short[3], sensors;
    unsigned char more;
    long accel[3], quaternion[4];
    unsigned long *timestamp;
    int res;
    res = dmp_read_fifo(gyro, accel_short, quaternion, &timestamp, &sensors, &more);
1000ce3c:	3b07      	subs	r3, #7
1000ce3e:	446b      	add	r3, sp
1000ce40:	9301      	str	r3, [sp, #4]
1000ce42:	231e      	movs	r3, #30
1000ce44:	446b      	add	r3, sp
1000ce46:	9300      	str	r3, [sp, #0]
1000ce48:	ab02      	add	r3, sp, #8
1000ce4a:	aa03      	add	r2, sp, #12
1000ce4c:	a908      	add	r1, sp, #32
1000ce4e:	a80a      	add	r0, sp, #40	; 0x28
1000ce50:	4c02      	ldr	r4, [pc, #8]	; (1000ce5c <imu_poll_data+0x2c>)
1000ce52:	47a0      	blx	r4
}
1000ce54:	b00c      	add	sp, #48	; 0x30
1000ce56:	bd10      	pop	{r4, pc}
1000ce58:	10013820 	.word	0x10013820
1000ce5c:	100099f9 	.word	0x100099f9

1000ce60 <main>:

int main(void)
{
1000ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce62:	b085      	sub	sp, #20
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000ce64:	4b2d      	ldr	r3, [pc, #180]	; (1000cf1c <main+0xbc>)
1000ce66:	4798      	blx	r3
    gpio_init();
1000ce68:	4b2d      	ldr	r3, [pc, #180]	; (1000cf20 <main+0xc0>)
1000ce6a:	4798      	blx	r3
    acquire_sleep_lock();
1000ce6c:	4b2d      	ldr	r3, [pc, #180]	; (1000cf24 <main+0xc4>)
1000ce6e:	4798      	blx	r3
    serial_console_init();
1000ce70:	4b2d      	ldr	r3, [pc, #180]	; (1000cf28 <main+0xc8>)
1000ce72:	4798      	blx	r3
    ble_device_init(NULL);
1000ce74:	2000      	movs	r0, #0
1000ce76:	4b2d      	ldr	r3, [pc, #180]	; (1000cf2c <main+0xcc>)
1000ce78:	4798      	blx	r3

    init_dualtimer();
1000ce7a:	4b2d      	ldr	r3, [pc, #180]	; (1000cf30 <main+0xd0>)
1000ce7c:	4798      	blx	r3
    delay_init();
1000ce7e:	4b2d      	ldr	r3, [pc, #180]	; (1000cf34 <main+0xd4>)
1000ce80:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000ce82:	ac02      	add	r4, sp, #8
1000ce84:	0020      	movs	r0, r4
1000ce86:	4b2c      	ldr	r3, [pc, #176]	; (1000cf38 <main+0xd8>)
1000ce88:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000ce8a:	2300      	movs	r3, #0
1000ce8c:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000ce8e:	3302      	adds	r3, #2
1000ce90:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000ce92:	3b01      	subs	r3, #1
1000ce94:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000ce96:	0021      	movs	r1, r4
1000ce98:	201d      	movs	r0, #29
1000ce9a:	4b28      	ldr	r3, [pc, #160]	; (1000cf3c <main+0xdc>)
1000ce9c:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000ce9e:	4b28      	ldr	r3, [pc, #160]	; (1000cf40 <main+0xe0>)
1000cea0:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000cea2:	4d28      	ldr	r5, [pc, #160]	; (1000cf44 <main+0xe4>)
1000cea4:	9502      	str	r5, [sp, #8]
    int_param.pin = PIN_AO_GPIO_2;
1000cea6:	231d      	movs	r3, #29
1000cea8:	6063      	str	r3, [r4, #4]
    mpu_init(&int_param);
1000ceaa:	0020      	movs	r0, r4
1000ceac:	4b26      	ldr	r3, [pc, #152]	; (1000cf48 <main+0xe8>)
1000ceae:	4798      	blx	r3
}
static void configure_imu(void)
{
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ceb0:	2078      	movs	r0, #120	; 0x78
1000ceb2:	4b26      	ldr	r3, [pc, #152]	; (1000cf4c <main+0xec>)
1000ceb4:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ceb6:	2078      	movs	r0, #120	; 0x78
1000ceb8:	4b25      	ldr	r3, [pc, #148]	; (1000cf50 <main+0xf0>)
1000ceba:	4798      	blx	r3
    mpu_set_sample_rate(10);
1000cebc:	200a      	movs	r0, #10
1000cebe:	4b25      	ldr	r3, [pc, #148]	; (1000cf54 <main+0xf4>)
1000cec0:	4798      	blx	r3
    
    uint16_t gyro_rate, gyro_fsr;
    uint8_t accel_fsr;
    mpu_get_sample_rate(&gyro_rate);
1000cec2:	466b      	mov	r3, sp
1000cec4:	1d98      	adds	r0, r3, #6
1000cec6:	4b24      	ldr	r3, [pc, #144]	; (1000cf58 <main+0xf8>)
1000cec8:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000ceca:	0020      	movs	r0, r4
1000cecc:	4b23      	ldr	r3, [pc, #140]	; (1000cf5c <main+0xfc>)
1000cece:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000ced0:	466b      	mov	r3, sp
1000ced2:	1d58      	adds	r0, r3, #5
1000ced4:	4b22      	ldr	r3, [pc, #136]	; (1000cf60 <main+0x100>)
1000ced6:	4798      	blx	r3
    
    hal.dmp_features = (DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
    dmp_enable_feature(hal.dmp_features);
1000ced8:	20c0      	movs	r0, #192	; 0xc0
1000ceda:	4b22      	ldr	r3, [pc, #136]	; (1000cf64 <main+0x104>)
1000cedc:	4798      	blx	r3
	configure_i2c_master();
	//! [config]
    
    init_imu();
    configure_imu();
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000cede:	2202      	movs	r2, #2
1000cee0:	0029      	movs	r1, r5
1000cee2:	201d      	movs	r0, #29
1000cee4:	4b20      	ldr	r3, [pc, #128]	; (1000cf68 <main+0x108>)
1000cee6:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_2);
1000cee8:	201d      	movs	r0, #29
1000ceea:	4b20      	ldr	r3, [pc, #128]	; (1000cf6c <main+0x10c>)
1000ceec:	4798      	blx	r3
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000ceee:	4f20      	ldr	r7, [pc, #128]	; (1000cf70 <main+0x110>)
        if(imu_interrupt) {
1000cef0:	4d20      	ldr	r5, [pc, #128]	; (1000cf74 <main+0x114>)
            DBG_LOG("IMU INTERRUPT!");
1000cef2:	4e21      	ldr	r6, [pc, #132]	; (1000cf78 <main+0x118>)
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000cef4:	2401      	movs	r4, #1
1000cef6:	4264      	negs	r4, r4
1000cef8:	0020      	movs	r0, r4
1000cefa:	47b8      	blx	r7
        if(imu_interrupt) {
1000cefc:	782b      	ldrb	r3, [r5, #0]
1000cefe:	2b00      	cmp	r3, #0
1000cf00:	d0fa      	beq.n	1000cef8 <main+0x98>
            DBG_LOG("IMU INTERRUPT!");
1000cf02:	0030      	movs	r0, r6
1000cf04:	4b1d      	ldr	r3, [pc, #116]	; (1000cf7c <main+0x11c>)
1000cf06:	4798      	blx	r3
1000cf08:	481d      	ldr	r0, [pc, #116]	; (1000cf80 <main+0x120>)
1000cf0a:	4b1e      	ldr	r3, [pc, #120]	; (1000cf84 <main+0x124>)
1000cf0c:	4798      	blx	r3
            imu_poll_data();
1000cf0e:	4b1e      	ldr	r3, [pc, #120]	; (1000cf88 <main+0x128>)
1000cf10:	4798      	blx	r3
            imu_interrupt = false;
1000cf12:	2200      	movs	r2, #0
1000cf14:	4b17      	ldr	r3, [pc, #92]	; (1000cf74 <main+0x114>)
1000cf16:	701a      	strb	r2, [r3, #0]
1000cf18:	e7ec      	b.n	1000cef4 <main+0x94>
1000cf1a:	46c0      	nop			; (mov r8, r8)
1000cf1c:	1000b07d 	.word	0x1000b07d
1000cf20:	1000c279 	.word	0x1000c279
1000cf24:	1000b5d1 	.word	0x1000b5d1
1000cf28:	1000ad71 	.word	0x1000ad71
1000cf2c:	1000a569 	.word	0x1000a569
1000cf30:	1000ce01 	.word	0x1000ce01
1000cf34:	100080e9 	.word	0x100080e9
1000cf38:	1000be39 	.word	0x1000be39
1000cf3c:	1000be49 	.word	0x1000be49
1000cf40:	1000cd8d 	.word	0x1000cd8d
1000cf44:	1000cd6d 	.word	0x1000cd6d
1000cf48:	10009045 	.word	0x10009045
1000cf4c:	10008e5d 	.word	0x10008e5d
1000cf50:	100089a1 	.word	0x100089a1
1000cf54:	10008d6d 	.word	0x10008d6d
1000cf58:	1000890d 	.word	0x1000890d
1000cf5c:	100086b5 	.word	0x100086b5
1000cf60:	10008795 	.word	0x10008795
1000cf64:	100097e5 	.word	0x100097e5
1000cf68:	1000c14d 	.word	0x1000c14d
1000cf6c:	1000c21d 	.word	0x1000c21d
1000cf70:	1000ac95 	.word	0x1000ac95
1000cf74:	10014de4 	.word	0x10014de4
1000cf78:	10012834 	.word	0x10012834
1000cf7c:	10011815 	.word	0x10011815
1000cf80:	10013630 	.word	0x10013630
1000cf84:	100116f5 	.word	0x100116f5
1000cf88:	1000ce31 	.word	0x1000ce31

1000cf8c <internal_event_post>:
1000cf8c:	b570      	push	{r4, r5, r6, lr}
1000cf8e:	4d12      	ldr	r5, [pc, #72]	; (1000cfd8 <internal_event_post+0x4c>)
1000cf90:	682c      	ldr	r4, [r5, #0]
1000cf92:	2c00      	cmp	r4, #0
1000cf94:	d014      	beq.n	1000cfc0 <internal_event_post+0x34>
1000cf96:	6826      	ldr	r6, [r4, #0]
1000cf98:	60e2      	str	r2, [r4, #12]
1000cf9a:	602e      	str	r6, [r5, #0]
1000cf9c:	2500      	movs	r5, #0
1000cf9e:	4a0f      	ldr	r2, [pc, #60]	; (1000cfdc <internal_event_post+0x50>)
1000cfa0:	8123      	strh	r3, [r4, #8]
1000cfa2:	6813      	ldr	r3, [r2, #0]
1000cfa4:	6025      	str	r5, [r4, #0]
1000cfa6:	80a0      	strh	r0, [r4, #4]
1000cfa8:	80e1      	strh	r1, [r4, #6]
1000cfaa:	42ab      	cmp	r3, r5
1000cfac:	d101      	bne.n	1000cfb2 <internal_event_post+0x26>
1000cfae:	6014      	str	r4, [r2, #0]
1000cfb0:	e011      	b.n	1000cfd6 <internal_event_post+0x4a>
1000cfb2:	681a      	ldr	r2, [r3, #0]
1000cfb4:	2a00      	cmp	r2, #0
1000cfb6:	d001      	beq.n	1000cfbc <internal_event_post+0x30>
1000cfb8:	1c13      	adds	r3, r2, #0
1000cfba:	e7fa      	b.n	1000cfb2 <internal_event_post+0x26>
1000cfbc:	601c      	str	r4, [r3, #0]
1000cfbe:	e00a      	b.n	1000cfd6 <internal_event_post+0x4a>
1000cfc0:	b2c4      	uxtb	r4, r0
1000cfc2:	2c00      	cmp	r4, #0
1000cfc4:	d107      	bne.n	1000cfd6 <internal_event_post+0x4a>
1000cfc6:	4c06      	ldr	r4, [pc, #24]	; (1000cfe0 <internal_event_post+0x54>)
1000cfc8:	60e2      	str	r2, [r4, #12]
1000cfca:	2201      	movs	r2, #1
1000cfcc:	8123      	strh	r3, [r4, #8]
1000cfce:	4b05      	ldr	r3, [pc, #20]	; (1000cfe4 <internal_event_post+0x58>)
1000cfd0:	80a0      	strh	r0, [r4, #4]
1000cfd2:	80e1      	strh	r1, [r4, #6]
1000cfd4:	701a      	strb	r2, [r3, #0]
1000cfd6:	bd70      	pop	{r4, r5, r6, pc}
1000cfd8:	10014e00 	.word	0x10014e00
1000cfdc:	10014dfc 	.word	0x10014dfc
1000cfe0:	10014de8 	.word	0x10014de8
1000cfe4:	10014df8 	.word	0x10014df8

1000cfe8 <internal_event_init>:
1000cfe8:	b510      	push	{r4, lr}
1000cfea:	4b08      	ldr	r3, [pc, #32]	; (1000d00c <internal_event_init+0x24>)
1000cfec:	0900      	lsrs	r0, r0, #4
1000cfee:	0100      	lsls	r0, r0, #4
1000cff0:	681a      	ldr	r2, [r3, #0]
1000cff2:	1808      	adds	r0, r1, r0
1000cff4:	4281      	cmp	r1, r0
1000cff6:	d003      	beq.n	1000d000 <internal_event_init+0x18>
1000cff8:	600a      	str	r2, [r1, #0]
1000cffa:	1c0a      	adds	r2, r1, #0
1000cffc:	3110      	adds	r1, #16
1000cffe:	e7f9      	b.n	1000cff4 <internal_event_init+0xc>
1000d000:	601a      	str	r2, [r3, #0]
1000d002:	2200      	movs	r2, #0
1000d004:	4b02      	ldr	r3, [pc, #8]	; (1000d010 <internal_event_init+0x28>)
1000d006:	601a      	str	r2, [r3, #0]
1000d008:	bd10      	pop	{r4, pc}
1000d00a:	46c0      	nop			; (mov r8, r8)
1000d00c:	10014e00 	.word	0x10014e00
1000d010:	10014dfc 	.word	0x10014dfc

1000d014 <special_events_handler>:
1000d014:	b538      	push	{r3, r4, r5, lr}
1000d016:	4c1b      	ldr	r4, [pc, #108]	; (1000d084 <special_events_handler+0x70>)
1000d018:	1c03      	adds	r3, r0, #0
1000d01a:	8825      	ldrh	r5, [r4, #0]
1000d01c:	1c08      	adds	r0, r1, #0
1000d01e:	1c21      	adds	r1, r4, #0
1000d020:	429d      	cmp	r5, r3
1000d022:	d107      	bne.n	1000d034 <special_events_handler+0x20>
1000d024:	88a5      	ldrh	r5, [r4, #4]
1000d026:	4285      	cmp	r5, r0
1000d028:	d104      	bne.n	1000d034 <special_events_handler+0x20>
1000d02a:	2301      	movs	r3, #1
1000d02c:	425b      	negs	r3, r3
1000d02e:	8023      	strh	r3, [r4, #0]
1000d030:	60a2      	str	r2, [r4, #8]
1000d032:	e009      	b.n	1000d048 <special_events_handler+0x34>
1000d034:	884c      	ldrh	r4, [r1, #2]
1000d036:	429c      	cmp	r4, r3
1000d038:	d10a      	bne.n	1000d050 <special_events_handler+0x3c>
1000d03a:	888c      	ldrh	r4, [r1, #4]
1000d03c:	4284      	cmp	r4, r0
1000d03e:	d107      	bne.n	1000d050 <special_events_handler+0x3c>
1000d040:	2301      	movs	r3, #1
1000d042:	425b      	negs	r3, r3
1000d044:	804b      	strh	r3, [r1, #2]
1000d046:	608a      	str	r2, [r1, #8]
1000d048:	4b0f      	ldr	r3, [pc, #60]	; (1000d088 <special_events_handler+0x74>)
1000d04a:	4798      	blx	r3
1000d04c:	2001      	movs	r0, #1
1000d04e:	e017      	b.n	1000d080 <special_events_handler+0x6c>
1000d050:	490e      	ldr	r1, [pc, #56]	; (1000d08c <special_events_handler+0x78>)
1000d052:	428b      	cmp	r3, r1
1000d054:	d00e      	beq.n	1000d074 <special_events_handler+0x60>
1000d056:	490e      	ldr	r1, [pc, #56]	; (1000d090 <special_events_handler+0x7c>)
1000d058:	428b      	cmp	r3, r1
1000d05a:	d007      	beq.n	1000d06c <special_events_handler+0x58>
1000d05c:	490d      	ldr	r1, [pc, #52]	; (1000d094 <special_events_handler+0x80>)
1000d05e:	2000      	movs	r0, #0
1000d060:	428b      	cmp	r3, r1
1000d062:	d10d      	bne.n	1000d080 <special_events_handler+0x6c>
1000d064:	1c10      	adds	r0, r2, #0
1000d066:	4b0c      	ldr	r3, [pc, #48]	; (1000d098 <special_events_handler+0x84>)
1000d068:	4798      	blx	r3
1000d06a:	e7ef      	b.n	1000d04c <special_events_handler+0x38>
1000d06c:	1c11      	adds	r1, r2, #0
1000d06e:	4b0b      	ldr	r3, [pc, #44]	; (1000d09c <special_events_handler+0x88>)
1000d070:	2200      	movs	r2, #0
1000d072:	e002      	b.n	1000d07a <special_events_handler+0x66>
1000d074:	1c11      	adds	r1, r2, #0
1000d076:	2200      	movs	r2, #0
1000d078:	4b09      	ldr	r3, [pc, #36]	; (1000d0a0 <special_events_handler+0x8c>)
1000d07a:	4798      	blx	r3
1000d07c:	4243      	negs	r3, r0
1000d07e:	4158      	adcs	r0, r3
1000d080:	bd38      	pop	{r3, r4, r5, pc}
1000d082:	46c0      	nop			; (mov r8, r8)
1000d084:	10015b44 	.word	0x10015b44
1000d088:	1000e219 	.word	0x1000e219
1000d08c:	00000e13 	.word	0x00000e13
1000d090:	00000e15 	.word	0x00000e15
1000d094:	00000e01 	.word	0x00000e01
1000d098:	1000e589 	.word	0x1000e589
1000d09c:	1000e749 	.word	0x1000e749
1000d0a0:	1000e821 	.word	0x1000e821

1000d0a4 <at_ble_event_get>:
1000d0a4:	2300      	movs	r3, #0
1000d0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0a8:	b087      	sub	sp, #28
1000d0aa:	9204      	str	r2, [sp, #16]
1000d0ac:	7003      	strb	r3, [r0, #0]
1000d0ae:	9b04      	ldr	r3, [sp, #16]
1000d0b0:	9003      	str	r0, [sp, #12]
1000d0b2:	3b01      	subs	r3, #1
1000d0b4:	1c0d      	adds	r5, r1, #0
1000d0b6:	9305      	str	r3, [sp, #20]
1000d0b8:	3303      	adds	r3, #3
1000d0ba:	d802      	bhi.n	1000d0c2 <at_ble_event_get+0x1e>
1000d0bc:	9804      	ldr	r0, [sp, #16]
1000d0be:	4bae      	ldr	r3, [pc, #696]	; (1000d378 <at_ble_event_get+0x2d4>)
1000d0c0:	4798      	blx	r3
1000d0c2:	9b05      	ldr	r3, [sp, #20]
1000d0c4:	4cad      	ldr	r4, [pc, #692]	; (1000d37c <at_ble_event_get+0x2d8>)
1000d0c6:	3303      	adds	r3, #3
1000d0c8:	d902      	bls.n	1000d0d0 <at_ble_event_get+0x2c>
1000d0ca:	2300      	movs	r3, #0
1000d0cc:	9302      	str	r3, [sp, #8]
1000d0ce:	e015      	b.n	1000d0fc <at_ble_event_get+0x58>
1000d0d0:	2300      	movs	r3, #0
1000d0d2:	9302      	str	r3, [sp, #8]
1000d0d4:	6823      	ldr	r3, [r4, #0]
1000d0d6:	2b00      	cmp	r3, #0
1000d0d8:	d113      	bne.n	1000d102 <at_ble_event_get+0x5e>
1000d0da:	9b02      	ldr	r3, [sp, #8]
1000d0dc:	2bd0      	cmp	r3, #208	; 0xd0
1000d0de:	d100      	bne.n	1000d0e2 <at_ble_event_get+0x3e>
1000d0e0:	e2da      	b.n	1000d698 <at_ble_event_get+0x5f4>
1000d0e2:	9804      	ldr	r0, [sp, #16]
1000d0e4:	4ba6      	ldr	r3, [pc, #664]	; (1000d380 <at_ble_event_get+0x2dc>)
1000d0e6:	4798      	blx	r3
1000d0e8:	9002      	str	r0, [sp, #8]
1000d0ea:	2802      	cmp	r0, #2
1000d0ec:	d1f2      	bne.n	1000d0d4 <at_ble_event_get+0x30>
1000d0ee:	e03f      	b.n	1000d170 <at_ble_event_get+0xcc>
1000d0f0:	9804      	ldr	r0, [sp, #16]
1000d0f2:	4ba3      	ldr	r3, [pc, #652]	; (1000d380 <at_ble_event_get+0x2dc>)
1000d0f4:	4798      	blx	r3
1000d0f6:	9002      	str	r0, [sp, #8]
1000d0f8:	2802      	cmp	r0, #2
1000d0fa:	d039      	beq.n	1000d170 <at_ble_event_get+0xcc>
1000d0fc:	6823      	ldr	r3, [r4, #0]
1000d0fe:	2b00      	cmp	r3, #0
1000d100:	d0f6      	beq.n	1000d0f0 <at_ble_event_get+0x4c>
1000d102:	9b02      	ldr	r3, [sp, #8]
1000d104:	2bd0      	cmp	r3, #208	; 0xd0
1000d106:	d100      	bne.n	1000d10a <at_ble_event_get+0x66>
1000d108:	e2c6      	b.n	1000d698 <at_ble_event_get+0x5f4>
1000d10a:	9b02      	ldr	r3, [sp, #8]
1000d10c:	3b03      	subs	r3, #3
1000d10e:	1e5a      	subs	r2, r3, #1
1000d110:	4193      	sbcs	r3, r2
1000d112:	9a02      	ldr	r2, [sp, #8]
1000d114:	425b      	negs	r3, r3
1000d116:	401a      	ands	r2, r3
1000d118:	6823      	ldr	r3, [r4, #0]
1000d11a:	9202      	str	r2, [sp, #8]
1000d11c:	2b00      	cmp	r3, #0
1000d11e:	d100      	bne.n	1000d122 <at_ble_event_get+0x7e>
1000d120:	e2c2      	b.n	1000d6a8 <at_ble_event_get+0x604>
1000d122:	681a      	ldr	r2, [r3, #0]
1000d124:	68de      	ldr	r6, [r3, #12]
1000d126:	6022      	str	r2, [r4, #0]
1000d128:	88da      	ldrh	r2, [r3, #6]
1000d12a:	9201      	str	r2, [sp, #4]
1000d12c:	4a95      	ldr	r2, [pc, #596]	; (1000d384 <at_ble_event_get+0x2e0>)
1000d12e:	889c      	ldrh	r4, [r3, #4]
1000d130:	6811      	ldr	r1, [r2, #0]
1000d132:	6013      	str	r3, [r2, #0]
1000d134:	6019      	str	r1, [r3, #0]
1000d136:	4b94      	ldr	r3, [pc, #592]	; (1000d388 <at_ble_event_get+0x2e4>)
1000d138:	781b      	ldrb	r3, [r3, #0]
1000d13a:	2b01      	cmp	r3, #1
1000d13c:	d10f      	bne.n	1000d15e <at_ble_event_get+0xba>
1000d13e:	4b93      	ldr	r3, [pc, #588]	; (1000d38c <at_ble_event_get+0x2e8>)
1000d140:	4a92      	ldr	r2, [pc, #584]	; (1000d38c <at_ble_event_get+0x2e8>)
1000d142:	8898      	ldrh	r0, [r3, #4]
1000d144:	88d9      	ldrh	r1, [r3, #6]
1000d146:	68d2      	ldr	r2, [r2, #12]
1000d148:	891b      	ldrh	r3, [r3, #8]
1000d14a:	4f91      	ldr	r7, [pc, #580]	; (1000d390 <at_ble_event_get+0x2ec>)
1000d14c:	47b8      	blx	r7
1000d14e:	2210      	movs	r2, #16
1000d150:	4b90      	ldr	r3, [pc, #576]	; (1000d394 <at_ble_event_get+0x2f0>)
1000d152:	488e      	ldr	r0, [pc, #568]	; (1000d38c <at_ble_event_get+0x2e8>)
1000d154:	2100      	movs	r1, #0
1000d156:	4798      	blx	r3
1000d158:	2300      	movs	r3, #0
1000d15a:	4a8b      	ldr	r2, [pc, #556]	; (1000d388 <at_ble_event_get+0x2e4>)
1000d15c:	7013      	strb	r3, [r2, #0]
1000d15e:	9b02      	ldr	r3, [sp, #8]
1000d160:	2b00      	cmp	r3, #0
1000d162:	d114      	bne.n	1000d18e <at_ble_event_get+0xea>
1000d164:	4b8c      	ldr	r3, [pc, #560]	; (1000d398 <at_ble_event_get+0x2f4>)
1000d166:	429c      	cmp	r4, r3
1000d168:	d009      	beq.n	1000d17e <at_ble_event_get+0xda>
1000d16a:	4b8c      	ldr	r3, [pc, #560]	; (1000d39c <at_ble_event_get+0x2f8>)
1000d16c:	429c      	cmp	r4, r3
1000d16e:	d127      	bne.n	1000d1c0 <at_ble_event_get+0x11c>
1000d170:	233a      	movs	r3, #58	; 0x3a
1000d172:	9a03      	ldr	r2, [sp, #12]
1000d174:	7013      	strb	r3, [r2, #0]
1000d176:	2300      	movs	r3, #0
1000d178:	9302      	str	r3, [sp, #8]
1000d17a:	1c1d      	adds	r5, r3, #0
1000d17c:	e007      	b.n	1000d18e <at_ble_event_get+0xea>
1000d17e:	9b01      	ldr	r3, [sp, #4]
1000d180:	42a3      	cmp	r3, r4
1000d182:	d000      	beq.n	1000d186 <at_ble_event_get+0xe2>
1000d184:	e28a      	b.n	1000d69c <at_ble_event_get+0x5f8>
1000d186:	2338      	movs	r3, #56	; 0x38
1000d188:	9a03      	ldr	r2, [sp, #12]
1000d18a:	7013      	strb	r3, [r2, #0]
1000d18c:	602e      	str	r6, [r5, #0]
1000d18e:	9b03      	ldr	r3, [sp, #12]
1000d190:	781b      	ldrb	r3, [r3, #0]
1000d192:	2b3b      	cmp	r3, #59	; 0x3b
1000d194:	d101      	bne.n	1000d19a <at_ble_event_get+0xf6>
1000d196:	4b82      	ldr	r3, [pc, #520]	; (1000d3a0 <at_ble_event_get+0x2fc>)
1000d198:	4798      	blx	r3
1000d19a:	9b03      	ldr	r3, [sp, #12]
1000d19c:	781b      	ldrb	r3, [r3, #0]
1000d19e:	2b3b      	cmp	r3, #59	; 0x3b
1000d1a0:	d003      	beq.n	1000d1aa <at_ble_event_get+0x106>
1000d1a2:	9b05      	ldr	r3, [sp, #20]
1000d1a4:	3303      	adds	r3, #3
1000d1a6:	d904      	bls.n	1000d1b2 <at_ble_event_get+0x10e>
1000d1a8:	e283      	b.n	1000d6b2 <at_ble_event_get+0x60e>
1000d1aa:	9b02      	ldr	r3, [sp, #8]
1000d1ac:	2b00      	cmp	r3, #0
1000d1ae:	d088      	beq.n	1000d0c2 <at_ble_event_get+0x1e>
1000d1b0:	e7f7      	b.n	1000d1a2 <at_ble_event_get+0xfe>
1000d1b2:	9b02      	ldr	r3, [sp, #8]
1000d1b4:	2bd0      	cmp	r3, #208	; 0xd0
1000d1b6:	d100      	bne.n	1000d1ba <at_ble_event_get+0x116>
1000d1b8:	e27b      	b.n	1000d6b2 <at_ble_event_get+0x60e>
1000d1ba:	4b7a      	ldr	r3, [pc, #488]	; (1000d3a4 <at_ble_event_get+0x300>)
1000d1bc:	4798      	blx	r3
1000d1be:	e278      	b.n	1000d6b2 <at_ble_event_get+0x60e>
1000d1c0:	9b01      	ldr	r3, [sp, #4]
1000d1c2:	2bbb      	cmp	r3, #187	; 0xbb
1000d1c4:	d125      	bne.n	1000d212 <at_ble_event_get+0x16e>
1000d1c6:	2cbb      	cmp	r4, #187	; 0xbb
1000d1c8:	d123      	bne.n	1000d212 <at_ble_event_get+0x16e>
1000d1ca:	466b      	mov	r3, sp
1000d1cc:	891b      	ldrh	r3, [r3, #8]
1000d1ce:	80ab      	strh	r3, [r5, #4]
1000d1d0:	78b3      	ldrb	r3, [r6, #2]
1000d1d2:	7872      	ldrb	r2, [r6, #1]
1000d1d4:	78f0      	ldrb	r0, [r6, #3]
1000d1d6:	021b      	lsls	r3, r3, #8
1000d1d8:	4313      	orrs	r3, r2
1000d1da:	7971      	ldrb	r1, [r6, #5]
1000d1dc:	7932      	ldrb	r2, [r6, #4]
1000d1de:	70a8      	strb	r0, [r5, #2]
1000d1e0:	4871      	ldr	r0, [pc, #452]	; (1000d3a8 <at_ble_event_get+0x304>)
1000d1e2:	802b      	strh	r3, [r5, #0]
1000d1e4:	4283      	cmp	r3, r0
1000d1e6:	d806      	bhi.n	1000d1f6 <at_ble_event_get+0x152>
1000d1e8:	4a70      	ldr	r2, [pc, #448]	; (1000d3ac <at_ble_event_get+0x308>)
1000d1ea:	4293      	cmp	r3, r2
1000d1ec:	d20b      	bcs.n	1000d206 <at_ble_event_get+0x162>
1000d1ee:	4a70      	ldr	r2, [pc, #448]	; (1000d3b0 <at_ble_event_get+0x30c>)
1000d1f0:	4293      	cmp	r3, r2
1000d1f2:	d008      	beq.n	1000d206 <at_ble_event_get+0x162>
1000d1f4:	e009      	b.n	1000d20a <at_ble_event_get+0x166>
1000d1f6:	486f      	ldr	r0, [pc, #444]	; (1000d3b4 <at_ble_event_get+0x310>)
1000d1f8:	4283      	cmp	r3, r0
1000d1fa:	d106      	bne.n	1000d20a <at_ble_event_get+0x166>
1000d1fc:	020b      	lsls	r3, r1, #8
1000d1fe:	4313      	orrs	r3, r2
1000d200:	80ab      	strh	r3, [r5, #4]
1000d202:	2337      	movs	r3, #55	; 0x37
1000d204:	e002      	b.n	1000d20c <at_ble_event_get+0x168>
1000d206:	2336      	movs	r3, #54	; 0x36
1000d208:	e000      	b.n	1000d20c <at_ble_event_get+0x168>
1000d20a:	2300      	movs	r3, #0
1000d20c:	9a03      	ldr	r2, [sp, #12]
1000d20e:	7013      	strb	r3, [r2, #0]
1000d210:	e7bd      	b.n	1000d18e <at_ble_event_get+0xea>
1000d212:	4b69      	ldr	r3, [pc, #420]	; (1000d3b8 <at_ble_event_get+0x314>)
1000d214:	429c      	cmp	r4, r3
1000d216:	d100      	bne.n	1000d21a <at_ble_event_get+0x176>
1000d218:	e144      	b.n	1000d4a4 <at_ble_event_get+0x400>
1000d21a:	d865      	bhi.n	1000d2e8 <at_ble_event_get+0x244>
1000d21c:	4b67      	ldr	r3, [pc, #412]	; (1000d3bc <at_ble_event_get+0x318>)
1000d21e:	429c      	cmp	r4, r3
1000d220:	d100      	bne.n	1000d224 <at_ble_event_get+0x180>
1000d222:	e1d5      	b.n	1000d5d0 <at_ble_event_get+0x52c>
1000d224:	d82f      	bhi.n	1000d286 <at_ble_event_get+0x1e2>
1000d226:	4b66      	ldr	r3, [pc, #408]	; (1000d3c0 <at_ble_event_get+0x31c>)
1000d228:	429c      	cmp	r4, r3
1000d22a:	d100      	bne.n	1000d22e <at_ble_event_get+0x18a>
1000d22c:	e1e0      	b.n	1000d5f0 <at_ble_event_get+0x54c>
1000d22e:	d813      	bhi.n	1000d258 <at_ble_event_get+0x1b4>
1000d230:	4b64      	ldr	r3, [pc, #400]	; (1000d3c4 <at_ble_event_get+0x320>)
1000d232:	429c      	cmp	r4, r3
1000d234:	d100      	bne.n	1000d238 <at_ble_event_get+0x194>
1000d236:	e1a3      	b.n	1000d580 <at_ble_event_get+0x4dc>
1000d238:	d804      	bhi.n	1000d244 <at_ble_event_get+0x1a0>
1000d23a:	2638      	movs	r6, #56	; 0x38
1000d23c:	42b4      	cmp	r4, r6
1000d23e:	d100      	bne.n	1000d242 <at_ble_event_get+0x19e>
1000d240:	e225      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d242:	e117      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d244:	4b60      	ldr	r3, [pc, #384]	; (1000d3c8 <at_ble_event_get+0x324>)
1000d246:	429c      	cmp	r4, r3
1000d248:	d100      	bne.n	1000d24c <at_ble_event_get+0x1a8>
1000d24a:	e19f      	b.n	1000d58c <at_ble_event_get+0x4e8>
1000d24c:	33fe      	adds	r3, #254	; 0xfe
1000d24e:	33ff      	adds	r3, #255	; 0xff
1000d250:	429c      	cmp	r4, r3
1000d252:	d100      	bne.n	1000d256 <at_ble_event_get+0x1b2>
1000d254:	e1d3      	b.n	1000d5fe <at_ble_event_get+0x55a>
1000d256:	e10d      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d258:	4b5c      	ldr	r3, [pc, #368]	; (1000d3cc <at_ble_event_get+0x328>)
1000d25a:	429c      	cmp	r4, r3
1000d25c:	d100      	bne.n	1000d260 <at_ble_event_get+0x1bc>
1000d25e:	e1a9      	b.n	1000d5b4 <at_ble_event_get+0x510>
1000d260:	d808      	bhi.n	1000d274 <at_ble_event_get+0x1d0>
1000d262:	4b5b      	ldr	r3, [pc, #364]	; (1000d3d0 <at_ble_event_get+0x32c>)
1000d264:	429c      	cmp	r4, r3
1000d266:	d100      	bne.n	1000d26a <at_ble_event_get+0x1c6>
1000d268:	e196      	b.n	1000d598 <at_ble_event_get+0x4f4>
1000d26a:	4b5a      	ldr	r3, [pc, #360]	; (1000d3d4 <at_ble_event_get+0x330>)
1000d26c:	429c      	cmp	r4, r3
1000d26e:	d100      	bne.n	1000d272 <at_ble_event_get+0x1ce>
1000d270:	e199      	b.n	1000d5a6 <at_ble_event_get+0x502>
1000d272:	e0ff      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d274:	4b58      	ldr	r3, [pc, #352]	; (1000d3d8 <at_ble_event_get+0x334>)
1000d276:	429c      	cmp	r4, r3
1000d278:	d100      	bne.n	1000d27c <at_ble_event_get+0x1d8>
1000d27a:	e1a2      	b.n	1000d5c2 <at_ble_event_get+0x51e>
1000d27c:	4b57      	ldr	r3, [pc, #348]	; (1000d3dc <at_ble_event_get+0x338>)
1000d27e:	429c      	cmp	r4, r3
1000d280:	d100      	bne.n	1000d284 <at_ble_event_get+0x1e0>
1000d282:	e1d4      	b.n	1000d62e <at_ble_event_get+0x58a>
1000d284:	e0f6      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d286:	4b56      	ldr	r3, [pc, #344]	; (1000d3e0 <at_ble_event_get+0x33c>)
1000d288:	429c      	cmp	r4, r3
1000d28a:	d100      	bne.n	1000d28e <at_ble_event_get+0x1ea>
1000d28c:	e1c8      	b.n	1000d620 <at_ble_event_get+0x57c>
1000d28e:	d812      	bhi.n	1000d2b6 <at_ble_event_get+0x212>
1000d290:	4b54      	ldr	r3, [pc, #336]	; (1000d3e4 <at_ble_event_get+0x340>)
1000d292:	429c      	cmp	r4, r3
1000d294:	d100      	bne.n	1000d298 <at_ble_event_get+0x1f4>
1000d296:	e1d1      	b.n	1000d63c <at_ble_event_get+0x598>
1000d298:	d804      	bhi.n	1000d2a4 <at_ble_event_get+0x200>
1000d29a:	4b53      	ldr	r3, [pc, #332]	; (1000d3e8 <at_ble_event_get+0x344>)
1000d29c:	429c      	cmp	r4, r3
1000d29e:	d100      	bne.n	1000d2a2 <at_ble_event_get+0x1fe>
1000d2a0:	e19b      	b.n	1000d5da <at_ble_event_get+0x536>
1000d2a2:	e0e7      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d2a4:	4b51      	ldr	r3, [pc, #324]	; (1000d3ec <at_ble_event_get+0x348>)
1000d2a6:	429c      	cmp	r4, r3
1000d2a8:	d100      	bne.n	1000d2ac <at_ble_event_get+0x208>
1000d2aa:	e1ad      	b.n	1000d608 <at_ble_event_get+0x564>
1000d2ac:	4b50      	ldr	r3, [pc, #320]	; (1000d3f0 <at_ble_event_get+0x34c>)
1000d2ae:	429c      	cmp	r4, r3
1000d2b0:	d100      	bne.n	1000d2b4 <at_ble_event_get+0x210>
1000d2b2:	e1b0      	b.n	1000d616 <at_ble_event_get+0x572>
1000d2b4:	e0de      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d2b6:	4b4f      	ldr	r3, [pc, #316]	; (1000d3f4 <at_ble_event_get+0x350>)
1000d2b8:	429c      	cmp	r4, r3
1000d2ba:	d100      	bne.n	1000d2be <at_ble_event_get+0x21a>
1000d2bc:	e0e0      	b.n	1000d480 <at_ble_event_get+0x3dc>
1000d2be:	d809      	bhi.n	1000d2d4 <at_ble_event_get+0x230>
1000d2c0:	3b08      	subs	r3, #8
1000d2c2:	429c      	cmp	r4, r3
1000d2c4:	d100      	bne.n	1000d2c8 <at_ble_event_get+0x224>
1000d2c6:	e0d7      	b.n	1000d478 <at_ble_event_get+0x3d4>
1000d2c8:	4b4b      	ldr	r3, [pc, #300]	; (1000d3f8 <at_ble_event_get+0x354>)
1000d2ca:	2639      	movs	r6, #57	; 0x39
1000d2cc:	429c      	cmp	r4, r3
1000d2ce:	d100      	bne.n	1000d2d2 <at_ble_event_get+0x22e>
1000d2d0:	e1dd      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d2d2:	e0cf      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d2d4:	23d1      	movs	r3, #209	; 0xd1
1000d2d6:	011b      	lsls	r3, r3, #4
1000d2d8:	429c      	cmp	r4, r3
1000d2da:	d100      	bne.n	1000d2de <at_ble_event_get+0x23a>
1000d2dc:	e0d6      	b.n	1000d48c <at_ble_event_get+0x3e8>
1000d2de:	4b47      	ldr	r3, [pc, #284]	; (1000d3fc <at_ble_event_get+0x358>)
1000d2e0:	429c      	cmp	r4, r3
1000d2e2:	d100      	bne.n	1000d2e6 <at_ble_event_get+0x242>
1000d2e4:	e0d8      	b.n	1000d498 <at_ble_event_get+0x3f4>
1000d2e6:	e0c5      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d2e8:	4b45      	ldr	r3, [pc, #276]	; (1000d400 <at_ble_event_get+0x35c>)
1000d2ea:	429c      	cmp	r4, r3
1000d2ec:	d100      	bne.n	1000d2f0 <at_ble_event_get+0x24c>
1000d2ee:	e117      	b.n	1000d520 <at_ble_event_get+0x47c>
1000d2f0:	d82e      	bhi.n	1000d350 <at_ble_event_get+0x2ac>
1000d2f2:	4b44      	ldr	r3, [pc, #272]	; (1000d404 <at_ble_event_get+0x360>)
1000d2f4:	429c      	cmp	r4, r3
1000d2f6:	d100      	bne.n	1000d2fa <at_ble_event_get+0x256>
1000d2f8:	e13d      	b.n	1000d576 <at_ble_event_get+0x4d2>
1000d2fa:	d812      	bhi.n	1000d322 <at_ble_event_get+0x27e>
1000d2fc:	4b42      	ldr	r3, [pc, #264]	; (1000d408 <at_ble_event_get+0x364>)
1000d2fe:	429c      	cmp	r4, r3
1000d300:	d100      	bne.n	1000d304 <at_ble_event_get+0x260>
1000d302:	e0e8      	b.n	1000d4d6 <at_ble_event_get+0x432>
1000d304:	d804      	bhi.n	1000d310 <at_ble_event_get+0x26c>
1000d306:	3b03      	subs	r3, #3
1000d308:	429c      	cmp	r4, r3
1000d30a:	d100      	bne.n	1000d30e <at_ble_event_get+0x26a>
1000d30c:	e0d0      	b.n	1000d4b0 <at_ble_event_get+0x40c>
1000d30e:	e0b1      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d310:	4b3e      	ldr	r3, [pc, #248]	; (1000d40c <at_ble_event_get+0x368>)
1000d312:	429c      	cmp	r4, r3
1000d314:	d100      	bne.n	1000d318 <at_ble_event_get+0x274>
1000d316:	e0d0      	b.n	1000d4ba <at_ble_event_get+0x416>
1000d318:	4b3d      	ldr	r3, [pc, #244]	; (1000d410 <at_ble_event_get+0x36c>)
1000d31a:	429c      	cmp	r4, r3
1000d31c:	d100      	bne.n	1000d320 <at_ble_event_get+0x27c>
1000d31e:	e0f9      	b.n	1000d514 <at_ble_event_get+0x470>
1000d320:	e0a8      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d322:	4b3c      	ldr	r3, [pc, #240]	; (1000d414 <at_ble_event_get+0x370>)
1000d324:	429c      	cmp	r4, r3
1000d326:	d100      	bne.n	1000d32a <at_ble_event_get+0x286>
1000d328:	e0db      	b.n	1000d4e2 <at_ble_event_get+0x43e>
1000d32a:	d808      	bhi.n	1000d33e <at_ble_event_get+0x29a>
1000d32c:	4b3a      	ldr	r3, [pc, #232]	; (1000d418 <at_ble_event_get+0x374>)
1000d32e:	429c      	cmp	r4, r3
1000d330:	d100      	bne.n	1000d334 <at_ble_event_get+0x290>
1000d332:	e11b      	b.n	1000d56c <at_ble_event_get+0x4c8>
1000d334:	4b39      	ldr	r3, [pc, #228]	; (1000d41c <at_ble_event_get+0x378>)
1000d336:	429c      	cmp	r4, r3
1000d338:	d100      	bne.n	1000d33c <at_ble_event_get+0x298>
1000d33a:	e0d8      	b.n	1000d4ee <at_ble_event_get+0x44a>
1000d33c:	e09a      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d33e:	4b38      	ldr	r3, [pc, #224]	; (1000d420 <at_ble_event_get+0x37c>)
1000d340:	429c      	cmp	r4, r3
1000d342:	d100      	bne.n	1000d346 <at_ble_event_get+0x2a2>
1000d344:	e0d8      	b.n	1000d4f8 <at_ble_event_get+0x454>
1000d346:	4b37      	ldr	r3, [pc, #220]	; (1000d424 <at_ble_event_get+0x380>)
1000d348:	429c      	cmp	r4, r3
1000d34a:	d100      	bne.n	1000d34e <at_ble_event_get+0x2aa>
1000d34c:	e0db      	b.n	1000d506 <at_ble_event_get+0x462>
1000d34e:	e091      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d350:	4b35      	ldr	r3, [pc, #212]	; (1000d428 <at_ble_event_get+0x384>)
1000d352:	429c      	cmp	r4, r3
1000d354:	d100      	bne.n	1000d358 <at_ble_event_get+0x2b4>
1000d356:	e0f7      	b.n	1000d548 <at_ble_event_get+0x4a4>
1000d358:	d876      	bhi.n	1000d448 <at_ble_event_get+0x3a4>
1000d35a:	4b34      	ldr	r3, [pc, #208]	; (1000d42c <at_ble_event_get+0x388>)
1000d35c:	429c      	cmp	r4, r3
1000d35e:	d100      	bne.n	1000d362 <at_ble_event_get+0x2be>
1000d360:	e0f8      	b.n	1000d554 <at_ble_event_get+0x4b0>
1000d362:	d869      	bhi.n	1000d438 <at_ble_event_get+0x394>
1000d364:	4b32      	ldr	r3, [pc, #200]	; (1000d430 <at_ble_event_get+0x38c>)
1000d366:	429c      	cmp	r4, r3
1000d368:	d100      	bne.n	1000d36c <at_ble_event_get+0x2c8>
1000d36a:	e0e0      	b.n	1000d52e <at_ble_event_get+0x48a>
1000d36c:	4b31      	ldr	r3, [pc, #196]	; (1000d434 <at_ble_event_get+0x390>)
1000d36e:	429c      	cmp	r4, r3
1000d370:	d100      	bne.n	1000d374 <at_ble_event_get+0x2d0>
1000d372:	e0a9      	b.n	1000d4c8 <at_ble_event_get+0x424>
1000d374:	e07e      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d376:	46c0      	nop			; (mov r8, r8)
1000d378:	1000e251 	.word	0x1000e251
1000d37c:	10014dfc 	.word	0x10014dfc
1000d380:	1000b36d 	.word	0x1000b36d
1000d384:	10014e00 	.word	0x10014e00
1000d388:	10014df8 	.word	0x10014df8
1000d38c:	10014de8 	.word	0x10014de8
1000d390:	1000cf8d 	.word	0x1000cf8d
1000d394:	100115ad 	.word	0x100115ad
1000d398:	0000ffff 	.word	0x0000ffff
1000d39c:	0000fffe 	.word	0x0000fffe
1000d3a0:	1000b5e5 	.word	0x1000b5e5
1000d3a4:	1000e253 	.word	0x1000e253
1000d3a8:	0000201e 	.word	0x0000201e
1000d3ac:	0000201d 	.word	0x0000201d
1000d3b0:	00000c03 	.word	0x00000c03
1000d3b4:	0000201f 	.word	0x0000201f
1000d3b8:	00000d1c 	.word	0x00000d1c
1000d3bc:	00000c0c 	.word	0x00000c0c
1000d3c0:	00000c02 	.word	0x00000c02
1000d3c4:	00000a02 	.word	0x00000a02
1000d3c8:	00000a03 	.word	0x00000a03
1000d3cc:	00000c06 	.word	0x00000c06
1000d3d0:	00000c04 	.word	0x00000c04
1000d3d4:	00000c05 	.word	0x00000c05
1000d3d8:	00000c07 	.word	0x00000c07
1000d3dc:	00000c09 	.word	0x00000c09
1000d3e0:	00000c17 	.word	0x00000c17
1000d3e4:	00000c12 	.word	0x00000c12
1000d3e8:	00000c0d 	.word	0x00000c0d
1000d3ec:	00000c13 	.word	0x00000c13
1000d3f0:	00000c15 	.word	0x00000c15
1000d3f4:	00000d08 	.word	0x00000d08
1000d3f8:	00000d01 	.word	0x00000d01
1000d3fc:	00000d15 	.word	0x00000d15
1000d400:	00000e1b 	.word	0x00000e1b
1000d404:	00000e0f 	.word	0x00000e0f
1000d408:	00000e03 	.word	0x00000e03
1000d40c:	00000e06 	.word	0x00000e06
1000d410:	00000e0a 	.word	0x00000e0a
1000d414:	00000e15 	.word	0x00000e15
1000d418:	00000e11 	.word	0x00000e11
1000d41c:	00000e13 	.word	0x00000e13
1000d420:	00000e17 	.word	0x00000e17
1000d424:	00000e19 	.word	0x00000e19
1000d428:	00000e27 	.word	0x00000e27
1000d42c:	00000e21 	.word	0x00000e21
1000d430:	00000e1c 	.word	0x00000e1c
1000d434:	00000e1d 	.word	0x00000e1d
1000d438:	4b9f      	ldr	r3, [pc, #636]	; (1000d6b8 <at_ble_event_get+0x614>)
1000d43a:	429c      	cmp	r4, r3
1000d43c:	d07e      	beq.n	1000d53c <at_ble_event_get+0x498>
1000d43e:	4b9f      	ldr	r3, [pc, #636]	; (1000d6bc <at_ble_event_get+0x618>)
1000d440:	429c      	cmp	r4, r3
1000d442:	d100      	bne.n	1000d446 <at_ble_event_get+0x3a2>
1000d444:	e08c      	b.n	1000d560 <at_ble_event_get+0x4bc>
1000d446:	e015      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d448:	4b9d      	ldr	r3, [pc, #628]	; (1000d6c0 <at_ble_event_get+0x61c>)
1000d44a:	429c      	cmp	r4, r3
1000d44c:	d100      	bne.n	1000d450 <at_ble_event_get+0x3ac>
1000d44e:	e10a      	b.n	1000d666 <at_ble_event_get+0x5c2>
1000d450:	d808      	bhi.n	1000d464 <at_ble_event_get+0x3c0>
1000d452:	4b9c      	ldr	r3, [pc, #624]	; (1000d6c4 <at_ble_event_get+0x620>)
1000d454:	429c      	cmp	r4, r3
1000d456:	d100      	bne.n	1000d45a <at_ble_event_get+0x3b6>
1000d458:	e0f7      	b.n	1000d64a <at_ble_event_get+0x5a6>
1000d45a:	4b9b      	ldr	r3, [pc, #620]	; (1000d6c8 <at_ble_event_get+0x624>)
1000d45c:	429c      	cmp	r4, r3
1000d45e:	d100      	bne.n	1000d462 <at_ble_event_get+0x3be>
1000d460:	e0fa      	b.n	1000d658 <at_ble_event_get+0x5b4>
1000d462:	e007      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d464:	4b99      	ldr	r3, [pc, #612]	; (1000d6cc <at_ble_event_get+0x628>)
1000d466:	429c      	cmp	r4, r3
1000d468:	d100      	bne.n	1000d46c <at_ble_event_get+0x3c8>
1000d46a:	e103      	b.n	1000d674 <at_ble_event_get+0x5d0>
1000d46c:	4b98      	ldr	r3, [pc, #608]	; (1000d6d0 <at_ble_event_get+0x62c>)
1000d46e:	429c      	cmp	r4, r3
1000d470:	d100      	bne.n	1000d474 <at_ble_event_get+0x3d0>
1000d472:	e106      	b.n	1000d682 <at_ble_event_get+0x5de>
1000d474:	2600      	movs	r6, #0
1000d476:	e10a      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d478:	1c30      	adds	r0, r6, #0
1000d47a:	1c29      	adds	r1, r5, #0
1000d47c:	4b95      	ldr	r3, [pc, #596]	; (1000d6d4 <at_ble_event_get+0x630>)
1000d47e:	e014      	b.n	1000d4aa <at_ble_event_get+0x406>
1000d480:	1c30      	adds	r0, r6, #0
1000d482:	1c29      	adds	r1, r5, #0
1000d484:	4b94      	ldr	r3, [pc, #592]	; (1000d6d8 <at_ble_event_get+0x634>)
1000d486:	4798      	blx	r3
1000d488:	2604      	movs	r6, #4
1000d48a:	e100      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d48c:	1c30      	adds	r0, r6, #0
1000d48e:	1c29      	adds	r1, r5, #0
1000d490:	4b92      	ldr	r3, [pc, #584]	; (1000d6dc <at_ble_event_get+0x638>)
1000d492:	4798      	blx	r3
1000d494:	2601      	movs	r6, #1
1000d496:	e0fa      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d498:	1c30      	adds	r0, r6, #0
1000d49a:	1c29      	adds	r1, r5, #0
1000d49c:	4b90      	ldr	r3, [pc, #576]	; (1000d6e0 <at_ble_event_get+0x63c>)
1000d49e:	4798      	blx	r3
1000d4a0:	260f      	movs	r6, #15
1000d4a2:	e0f4      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d4a4:	1c30      	adds	r0, r6, #0
1000d4a6:	1c29      	adds	r1, r5, #0
1000d4a8:	4b8e      	ldr	r3, [pc, #568]	; (1000d6e4 <at_ble_event_get+0x640>)
1000d4aa:	4798      	blx	r3
1000d4ac:	1c06      	adds	r6, r0, #0
1000d4ae:	e0ee      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d4b0:	9801      	ldr	r0, [sp, #4]
1000d4b2:	1c31      	adds	r1, r6, #0
1000d4b4:	1c2a      	adds	r2, r5, #0
1000d4b6:	4b8c      	ldr	r3, [pc, #560]	; (1000d6e8 <at_ble_event_get+0x644>)
1000d4b8:	e017      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d4ba:	1c31      	adds	r1, r6, #0
1000d4bc:	9801      	ldr	r0, [sp, #4]
1000d4be:	1c2a      	adds	r2, r5, #0
1000d4c0:	4b8a      	ldr	r3, [pc, #552]	; (1000d6ec <at_ble_event_get+0x648>)
1000d4c2:	4798      	blx	r3
1000d4c4:	2611      	movs	r6, #17
1000d4c6:	e0e2      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d4c8:	1c31      	adds	r1, r6, #0
1000d4ca:	9801      	ldr	r0, [sp, #4]
1000d4cc:	1c2a      	adds	r2, r5, #0
1000d4ce:	4b88      	ldr	r3, [pc, #544]	; (1000d6f0 <at_ble_event_get+0x64c>)
1000d4d0:	4798      	blx	r3
1000d4d2:	2612      	movs	r6, #18
1000d4d4:	e0db      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d4d6:	1c30      	adds	r0, r6, #0
1000d4d8:	1c29      	adds	r1, r5, #0
1000d4da:	4b86      	ldr	r3, [pc, #536]	; (1000d6f4 <at_ble_event_get+0x650>)
1000d4dc:	4798      	blx	r3
1000d4de:	2606      	movs	r6, #6
1000d4e0:	e0d5      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d4e2:	1c31      	adds	r1, r6, #0
1000d4e4:	1c2a      	adds	r2, r5, #0
1000d4e6:	9801      	ldr	r0, [sp, #4]
1000d4e8:	4b83      	ldr	r3, [pc, #524]	; (1000d6f8 <at_ble_event_get+0x654>)
1000d4ea:	4798      	blx	r3
1000d4ec:	e7de      	b.n	1000d4ac <at_ble_event_get+0x408>
1000d4ee:	9801      	ldr	r0, [sp, #4]
1000d4f0:	1c31      	adds	r1, r6, #0
1000d4f2:	1c2a      	adds	r2, r5, #0
1000d4f4:	4b81      	ldr	r3, [pc, #516]	; (1000d6fc <at_ble_event_get+0x658>)
1000d4f6:	e7f8      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d4f8:	1c31      	adds	r1, r6, #0
1000d4fa:	9801      	ldr	r0, [sp, #4]
1000d4fc:	1c2a      	adds	r2, r5, #0
1000d4fe:	4b80      	ldr	r3, [pc, #512]	; (1000d700 <at_ble_event_get+0x65c>)
1000d500:	4798      	blx	r3
1000d502:	260d      	movs	r6, #13
1000d504:	e0c3      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d506:	1c31      	adds	r1, r6, #0
1000d508:	9801      	ldr	r0, [sp, #4]
1000d50a:	1c2a      	adds	r2, r5, #0
1000d50c:	4b7d      	ldr	r3, [pc, #500]	; (1000d704 <at_ble_event_get+0x660>)
1000d50e:	4798      	blx	r3
1000d510:	260e      	movs	r6, #14
1000d512:	e0bc      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d514:	9801      	ldr	r0, [sp, #4]
1000d516:	1c31      	adds	r1, r6, #0
1000d518:	1c2a      	adds	r2, r5, #0
1000d51a:	4b7b      	ldr	r3, [pc, #492]	; (1000d708 <at_ble_event_get+0x664>)
1000d51c:	4798      	blx	r3
1000d51e:	e084      	b.n	1000d62a <at_ble_event_get+0x586>
1000d520:	1c31      	adds	r1, r6, #0
1000d522:	9801      	ldr	r0, [sp, #4]
1000d524:	1c2a      	adds	r2, r5, #0
1000d526:	4b79      	ldr	r3, [pc, #484]	; (1000d70c <at_ble_event_get+0x668>)
1000d528:	4798      	blx	r3
1000d52a:	260b      	movs	r6, #11
1000d52c:	e0af      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d52e:	1c31      	adds	r1, r6, #0
1000d530:	9801      	ldr	r0, [sp, #4]
1000d532:	1c2a      	adds	r2, r5, #0
1000d534:	4b76      	ldr	r3, [pc, #472]	; (1000d710 <at_ble_event_get+0x66c>)
1000d536:	4798      	blx	r3
1000d538:	2610      	movs	r6, #16
1000d53a:	e0a8      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d53c:	1c30      	adds	r0, r6, #0
1000d53e:	1c29      	adds	r1, r5, #0
1000d540:	4b74      	ldr	r3, [pc, #464]	; (1000d714 <at_ble_event_get+0x670>)
1000d542:	4798      	blx	r3
1000d544:	2628      	movs	r6, #40	; 0x28
1000d546:	e0a2      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d548:	1c30      	adds	r0, r6, #0
1000d54a:	1c29      	adds	r1, r5, #0
1000d54c:	4b72      	ldr	r3, [pc, #456]	; (1000d718 <at_ble_event_get+0x674>)
1000d54e:	4798      	blx	r3
1000d550:	2629      	movs	r6, #41	; 0x29
1000d552:	e09c      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d554:	1c30      	adds	r0, r6, #0
1000d556:	1c29      	adds	r1, r5, #0
1000d558:	4b70      	ldr	r3, [pc, #448]	; (1000d71c <at_ble_event_get+0x678>)
1000d55a:	4798      	blx	r3
1000d55c:	2627      	movs	r6, #39	; 0x27
1000d55e:	e096      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d560:	1c30      	adds	r0, r6, #0
1000d562:	1c29      	adds	r1, r5, #0
1000d564:	4b6e      	ldr	r3, [pc, #440]	; (1000d720 <at_ble_event_get+0x67c>)
1000d566:	4798      	blx	r3
1000d568:	262a      	movs	r6, #42	; 0x2a
1000d56a:	e090      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d56c:	9801      	ldr	r0, [sp, #4]
1000d56e:	1c31      	adds	r1, r6, #0
1000d570:	1c2a      	adds	r2, r5, #0
1000d572:	4b6c      	ldr	r3, [pc, #432]	; (1000d724 <at_ble_event_get+0x680>)
1000d574:	e7b9      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d576:	9801      	ldr	r0, [sp, #4]
1000d578:	1c31      	adds	r1, r6, #0
1000d57a:	1c2a      	adds	r2, r5, #0
1000d57c:	4b6a      	ldr	r3, [pc, #424]	; (1000d728 <at_ble_event_get+0x684>)
1000d57e:	e7b4      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d580:	1c30      	adds	r0, r6, #0
1000d582:	1c29      	adds	r1, r5, #0
1000d584:	4b69      	ldr	r3, [pc, #420]	; (1000d72c <at_ble_event_get+0x688>)
1000d586:	4798      	blx	r3
1000d588:	262b      	movs	r6, #43	; 0x2b
1000d58a:	e080      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d58c:	1c30      	adds	r0, r6, #0
1000d58e:	1c29      	adds	r1, r5, #0
1000d590:	4b67      	ldr	r3, [pc, #412]	; (1000d730 <at_ble_event_get+0x68c>)
1000d592:	4798      	blx	r3
1000d594:	262c      	movs	r6, #44	; 0x2c
1000d596:	e07a      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d598:	1c31      	adds	r1, r6, #0
1000d59a:	9801      	ldr	r0, [sp, #4]
1000d59c:	1c2a      	adds	r2, r5, #0
1000d59e:	4b65      	ldr	r3, [pc, #404]	; (1000d734 <at_ble_event_get+0x690>)
1000d5a0:	4798      	blx	r3
1000d5a2:	2613      	movs	r6, #19
1000d5a4:	e073      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5a6:	1c31      	adds	r1, r6, #0
1000d5a8:	9801      	ldr	r0, [sp, #4]
1000d5aa:	1c2a      	adds	r2, r5, #0
1000d5ac:	4b62      	ldr	r3, [pc, #392]	; (1000d738 <at_ble_event_get+0x694>)
1000d5ae:	4798      	blx	r3
1000d5b0:	2614      	movs	r6, #20
1000d5b2:	e06c      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5b4:	1c31      	adds	r1, r6, #0
1000d5b6:	9801      	ldr	r0, [sp, #4]
1000d5b8:	1c2a      	adds	r2, r5, #0
1000d5ba:	4b60      	ldr	r3, [pc, #384]	; (1000d73c <at_ble_event_get+0x698>)
1000d5bc:	4798      	blx	r3
1000d5be:	2615      	movs	r6, #21
1000d5c0:	e065      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5c2:	1c31      	adds	r1, r6, #0
1000d5c4:	9801      	ldr	r0, [sp, #4]
1000d5c6:	1c2a      	adds	r2, r5, #0
1000d5c8:	4b5d      	ldr	r3, [pc, #372]	; (1000d740 <at_ble_event_get+0x69c>)
1000d5ca:	4798      	blx	r3
1000d5cc:	2616      	movs	r6, #22
1000d5ce:	e05e      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5d0:	9801      	ldr	r0, [sp, #4]
1000d5d2:	1c31      	adds	r1, r6, #0
1000d5d4:	1c2a      	adds	r2, r5, #0
1000d5d6:	4b5b      	ldr	r3, [pc, #364]	; (1000d744 <at_ble_event_get+0x6a0>)
1000d5d8:	e787      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d5da:	1c31      	adds	r1, r6, #0
1000d5dc:	9801      	ldr	r0, [sp, #4]
1000d5de:	1c2a      	adds	r2, r5, #0
1000d5e0:	4b58      	ldr	r3, [pc, #352]	; (1000d744 <at_ble_event_get+0x6a0>)
1000d5e2:	4798      	blx	r3
1000d5e4:	88a9      	ldrh	r1, [r5, #4]
1000d5e6:	1c06      	adds	r6, r0, #0
1000d5e8:	4b57      	ldr	r3, [pc, #348]	; (1000d748 <at_ble_event_get+0x6a4>)
1000d5ea:	8828      	ldrh	r0, [r5, #0]
1000d5ec:	4798      	blx	r3
1000d5ee:	e04e      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5f0:	1c31      	adds	r1, r6, #0
1000d5f2:	9801      	ldr	r0, [sp, #4]
1000d5f4:	1c2a      	adds	r2, r5, #0
1000d5f6:	4b55      	ldr	r3, [pc, #340]	; (1000d74c <at_ble_event_get+0x6a8>)
1000d5f8:	4798      	blx	r3
1000d5fa:	2623      	movs	r6, #35	; 0x23
1000d5fc:	e047      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d5fe:	9801      	ldr	r0, [sp, #4]
1000d600:	1c31      	adds	r1, r6, #0
1000d602:	1c2a      	adds	r2, r5, #0
1000d604:	4b52      	ldr	r3, [pc, #328]	; (1000d750 <at_ble_event_get+0x6ac>)
1000d606:	e770      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d608:	9b01      	ldr	r3, [sp, #4]
1000d60a:	1c30      	adds	r0, r6, #0
1000d60c:	0a1f      	lsrs	r7, r3, #8
1000d60e:	802f      	strh	r7, [r5, #0]
1000d610:	1c29      	adds	r1, r5, #0
1000d612:	4b50      	ldr	r3, [pc, #320]	; (1000d754 <at_ble_event_get+0x6b0>)
1000d614:	e749      	b.n	1000d4aa <at_ble_event_get+0x406>
1000d616:	9801      	ldr	r0, [sp, #4]
1000d618:	1c31      	adds	r1, r6, #0
1000d61a:	1c2a      	adds	r2, r5, #0
1000d61c:	4b4e      	ldr	r3, [pc, #312]	; (1000d758 <at_ble_event_get+0x6b4>)
1000d61e:	e764      	b.n	1000d4ea <at_ble_event_get+0x446>
1000d620:	1c30      	adds	r0, r6, #0
1000d622:	1c29      	adds	r1, r5, #0
1000d624:	9a01      	ldr	r2, [sp, #4]
1000d626:	4b4d      	ldr	r3, [pc, #308]	; (1000d75c <at_ble_event_get+0x6b8>)
1000d628:	4798      	blx	r3
1000d62a:	263b      	movs	r6, #59	; 0x3b
1000d62c:	e02f      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d62e:	1c31      	adds	r1, r6, #0
1000d630:	9801      	ldr	r0, [sp, #4]
1000d632:	1c2a      	adds	r2, r5, #0
1000d634:	4b4a      	ldr	r3, [pc, #296]	; (1000d760 <at_ble_event_get+0x6bc>)
1000d636:	4798      	blx	r3
1000d638:	2618      	movs	r6, #24
1000d63a:	e028      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d63c:	1c31      	adds	r1, r6, #0
1000d63e:	9801      	ldr	r0, [sp, #4]
1000d640:	1c2a      	adds	r2, r5, #0
1000d642:	4b48      	ldr	r3, [pc, #288]	; (1000d764 <at_ble_event_get+0x6c0>)
1000d644:	4798      	blx	r3
1000d646:	2620      	movs	r6, #32
1000d648:	e021      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d64a:	1c31      	adds	r1, r6, #0
1000d64c:	9801      	ldr	r0, [sp, #4]
1000d64e:	1c2a      	adds	r2, r5, #0
1000d650:	4b45      	ldr	r3, [pc, #276]	; (1000d768 <at_ble_event_get+0x6c4>)
1000d652:	4798      	blx	r3
1000d654:	2633      	movs	r6, #51	; 0x33
1000d656:	e01a      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d658:	1c31      	adds	r1, r6, #0
1000d65a:	9801      	ldr	r0, [sp, #4]
1000d65c:	1c2a      	adds	r2, r5, #0
1000d65e:	4b43      	ldr	r3, [pc, #268]	; (1000d76c <at_ble_event_get+0x6c8>)
1000d660:	4798      	blx	r3
1000d662:	2630      	movs	r6, #48	; 0x30
1000d664:	e013      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d666:	1c31      	adds	r1, r6, #0
1000d668:	9801      	ldr	r0, [sp, #4]
1000d66a:	1c2a      	adds	r2, r5, #0
1000d66c:	4b40      	ldr	r3, [pc, #256]	; (1000d770 <at_ble_event_get+0x6cc>)
1000d66e:	4798      	blx	r3
1000d670:	2634      	movs	r6, #52	; 0x34
1000d672:	e00c      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d674:	1c31      	adds	r1, r6, #0
1000d676:	9801      	ldr	r0, [sp, #4]
1000d678:	1c2a      	adds	r2, r5, #0
1000d67a:	4b3e      	ldr	r3, [pc, #248]	; (1000d774 <at_ble_event_get+0x6d0>)
1000d67c:	4798      	blx	r3
1000d67e:	2635      	movs	r6, #53	; 0x35
1000d680:	e005      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d682:	1c31      	adds	r1, r6, #0
1000d684:	9801      	ldr	r0, [sp, #4]
1000d686:	1c2a      	adds	r2, r5, #0
1000d688:	4b3b      	ldr	r3, [pc, #236]	; (1000d778 <at_ble_event_get+0x6d4>)
1000d68a:	4798      	blx	r3
1000d68c:	2632      	movs	r6, #50	; 0x32
1000d68e:	9b03      	ldr	r3, [sp, #12]
1000d690:	701e      	strb	r6, [r3, #0]
1000d692:	2300      	movs	r3, #0
1000d694:	9302      	str	r3, [sp, #8]
1000d696:	e57a      	b.n	1000d18e <at_ble_event_get+0xea>
1000d698:	23d0      	movs	r3, #208	; 0xd0
1000d69a:	e7fb      	b.n	1000d694 <at_ble_event_get+0x5f0>
1000d69c:	9b01      	ldr	r3, [sp, #4]
1000d69e:	9e02      	ldr	r6, [sp, #8]
1000d6a0:	2bbb      	cmp	r3, #187	; 0xbb
1000d6a2:	d000      	beq.n	1000d6a6 <at_ble_event_get+0x602>
1000d6a4:	e6e6      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d6a6:	e7f2      	b.n	1000d68e <at_ble_event_get+0x5ea>
1000d6a8:	9b02      	ldr	r3, [sp, #8]
1000d6aa:	2b00      	cmp	r3, #0
1000d6ac:	d000      	beq.n	1000d6b0 <at_ble_event_get+0x60c>
1000d6ae:	e56e      	b.n	1000d18e <at_ble_event_get+0xea>
1000d6b0:	e6e0      	b.n	1000d474 <at_ble_event_get+0x3d0>
1000d6b2:	9802      	ldr	r0, [sp, #8]
1000d6b4:	b007      	add	sp, #28
1000d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6b8:	00000e22 	.word	0x00000e22
1000d6bc:	00000e25 	.word	0x00000e25
1000d6c0:	00001b05 	.word	0x00001b05
1000d6c4:	00001b01 	.word	0x00001b01
1000d6c8:	00001b03 	.word	0x00001b03
1000d6cc:	00001b06 	.word	0x00001b06
1000d6d0:	00001b08 	.word	0x00001b08
1000d6d4:	1000f07d 	.word	0x1000f07d
1000d6d8:	1000f061 	.word	0x1000f061
1000d6dc:	1000f1c5 	.word	0x1000f1c5
1000d6e0:	1000f2b5 	.word	0x1000f2b5
1000d6e4:	1000f2d9 	.word	0x1000f2d9
1000d6e8:	1000e3f5 	.word	0x1000e3f5
1000d6ec:	1000ec75 	.word	0x1000ec75
1000d6f0:	1000ecf1 	.word	0x1000ecf1
1000d6f4:	1000e6ad 	.word	0x1000e6ad
1000d6f8:	1000e749 	.word	0x1000e749
1000d6fc:	1000e821 	.word	0x1000e821
1000d700:	1000eaa9 	.word	0x1000eaa9
1000d704:	1000eb49 	.word	0x1000eb49
1000d708:	1000ec01 	.word	0x1000ec01
1000d70c:	1000ec29 	.word	0x1000ec29
1000d710:	1000ec3f 	.word	0x1000ec3f
1000d714:	1000ed09 	.word	0x1000ed09
1000d718:	1000ed37 	.word	0x1000ed37
1000d71c:	1000ed4d 	.word	0x1000ed4d
1000d720:	1000ed77 	.word	0x1000ed77
1000d724:	1000eba5 	.word	0x1000eba5
1000d728:	1000ebcf 	.word	0x1000ebcf
1000d72c:	1000de35 	.word	0x1000de35
1000d730:	1000de61 	.word	0x1000de61
1000d734:	1000f481 	.word	0x1000f481
1000d738:	1000f4bd 	.word	0x1000f4bd
1000d73c:	1000f505 	.word	0x1000f505
1000d740:	1000f549 	.word	0x1000f549
1000d744:	1000f57d 	.word	0x1000f57d
1000d748:	1000f441 	.word	0x1000f441
1000d74c:	1000f649 	.word	0x1000f649
1000d750:	1000f5d1 	.word	0x1000f5d1
1000d754:	1000dd8d 	.word	0x1000dd8d
1000d758:	1000ddf9 	.word	0x1000ddf9
1000d75c:	1000ddbd 	.word	0x1000ddbd
1000d760:	1000f659 	.word	0x1000f659
1000d764:	1000f699 	.word	0x1000f699
1000d768:	1000f7e5 	.word	0x1000f7e5
1000d76c:	1000f7ef 	.word	0x1000f7ef
1000d770:	1000f7f5 	.word	0x1000f7f5
1000d774:	1000f7fb 	.word	0x1000f7fb
1000d778:	1000f807 	.word	0x1000f807

1000d77c <internal_event_flush>:
1000d77c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d77e:	490e      	ldr	r1, [pc, #56]	; (1000d7b8 <internal_event_flush+0x3c>)
1000d780:	2400      	movs	r4, #0
1000d782:	680b      	ldr	r3, [r1, #0]
1000d784:	1c0f      	adds	r7, r1, #0
1000d786:	1c1e      	adds	r6, r3, #0
1000d788:	4a0c      	ldr	r2, [pc, #48]	; (1000d7bc <internal_event_flush+0x40>)
1000d78a:	6815      	ldr	r5, [r2, #0]
1000d78c:	9201      	str	r2, [sp, #4]
1000d78e:	2b00      	cmp	r3, #0
1000d790:	d00e      	beq.n	1000d7b0 <internal_event_flush+0x34>
1000d792:	889a      	ldrh	r2, [r3, #4]
1000d794:	6819      	ldr	r1, [r3, #0]
1000d796:	4282      	cmp	r2, r0
1000d798:	d107      	bne.n	1000d7aa <internal_event_flush+0x2e>
1000d79a:	2c00      	cmp	r4, #0
1000d79c:	d001      	beq.n	1000d7a2 <internal_event_flush+0x26>
1000d79e:	6021      	str	r1, [r4, #0]
1000d7a0:	e000      	b.n	1000d7a4 <internal_event_flush+0x28>
1000d7a2:	1c0e      	adds	r6, r1, #0
1000d7a4:	601d      	str	r5, [r3, #0]
1000d7a6:	1c1d      	adds	r5, r3, #0
1000d7a8:	1c23      	adds	r3, r4, #0
1000d7aa:	1c1c      	adds	r4, r3, #0
1000d7ac:	1c0b      	adds	r3, r1, #0
1000d7ae:	e7ee      	b.n	1000d78e <internal_event_flush+0x12>
1000d7b0:	9b01      	ldr	r3, [sp, #4]
1000d7b2:	603e      	str	r6, [r7, #0]
1000d7b4:	601d      	str	r5, [r3, #0]
1000d7b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d7b8:	10014dfc 	.word	0x10014dfc
1000d7bc:	10014e00 	.word	0x10014e00

1000d7c0 <internal_conn_flush>:
1000d7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d7c2:	4a12      	ldr	r2, [pc, #72]	; (1000d80c <internal_conn_flush+0x4c>)
1000d7c4:	9000      	str	r0, [sp, #0]
1000d7c6:	6813      	ldr	r3, [r2, #0]
1000d7c8:	4811      	ldr	r0, [pc, #68]	; (1000d810 <internal_conn_flush+0x50>)
1000d7ca:	1c1f      	adds	r7, r3, #0
1000d7cc:	2100      	movs	r1, #0
1000d7ce:	4684      	mov	ip, r0
1000d7d0:	6804      	ldr	r4, [r0, #0]
1000d7d2:	9201      	str	r2, [sp, #4]
1000d7d4:	2b00      	cmp	r3, #0
1000d7d6:	d014      	beq.n	1000d802 <internal_conn_flush+0x42>
1000d7d8:	88d8      	ldrh	r0, [r3, #6]
1000d7da:	9a00      	ldr	r2, [sp, #0]
1000d7dc:	681d      	ldr	r5, [r3, #0]
1000d7de:	0a06      	lsrs	r6, r0, #8
1000d7e0:	4296      	cmp	r6, r2
1000d7e2:	d10b      	bne.n	1000d7fc <internal_conn_flush+0x3c>
1000d7e4:	26fd      	movs	r6, #253	; 0xfd
1000d7e6:	4006      	ands	r6, r0
1000d7e8:	2e0c      	cmp	r6, #12
1000d7ea:	d107      	bne.n	1000d7fc <internal_conn_flush+0x3c>
1000d7ec:	2900      	cmp	r1, #0
1000d7ee:	d001      	beq.n	1000d7f4 <internal_conn_flush+0x34>
1000d7f0:	600d      	str	r5, [r1, #0]
1000d7f2:	e000      	b.n	1000d7f6 <internal_conn_flush+0x36>
1000d7f4:	1c2f      	adds	r7, r5, #0
1000d7f6:	601c      	str	r4, [r3, #0]
1000d7f8:	1c1c      	adds	r4, r3, #0
1000d7fa:	1c0b      	adds	r3, r1, #0
1000d7fc:	1c19      	adds	r1, r3, #0
1000d7fe:	1c2b      	adds	r3, r5, #0
1000d800:	e7e8      	b.n	1000d7d4 <internal_conn_flush+0x14>
1000d802:	9b01      	ldr	r3, [sp, #4]
1000d804:	601f      	str	r7, [r3, #0]
1000d806:	4663      	mov	r3, ip
1000d808:	601c      	str	r4, [r3, #0]
1000d80a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d80c:	10014dfc 	.word	0x10014dfc
1000d810:	10014e00 	.word	0x10014e00

1000d814 <at_ble_device_name_set>:
1000d814:	b530      	push	{r4, r5, lr}
1000d816:	23cf      	movs	r3, #207	; 0xcf
1000d818:	2800      	cmp	r0, #0
1000d81a:	d010      	beq.n	1000d83e <at_ble_device_name_set+0x2a>
1000d81c:	1e4a      	subs	r2, r1, #1
1000d81e:	2a1f      	cmp	r2, #31
1000d820:	d80d      	bhi.n	1000d83e <at_ble_device_name_set+0x2a>
1000d822:	4a08      	ldr	r2, [pc, #32]	; (1000d844 <at_ble_device_name_set+0x30>)
1000d824:	1c13      	adds	r3, r2, #0
1000d826:	33aa      	adds	r3, #170	; 0xaa
1000d828:	8019      	strh	r1, [r3, #0]
1000d82a:	2300      	movs	r3, #0
1000d82c:	1c1c      	adds	r4, r3, #0
1000d82e:	5cc5      	ldrb	r5, [r0, r3]
1000d830:	34ac      	adds	r4, #172	; 0xac
1000d832:	3301      	adds	r3, #1
1000d834:	5515      	strb	r5, [r2, r4]
1000d836:	b2dc      	uxtb	r4, r3
1000d838:	428c      	cmp	r4, r1
1000d83a:	d3f7      	bcc.n	1000d82c <at_ble_device_name_set+0x18>
1000d83c:	2300      	movs	r3, #0
1000d83e:	1c18      	adds	r0, r3, #0
1000d840:	bd30      	pop	{r4, r5, pc}
1000d842:	46c0      	nop			; (mov r8, r8)
1000d844:	10015be2 	.word	0x10015be2

1000d848 <at_ble_addr_get>:
1000d848:	b510      	push	{r4, lr}
1000d84a:	1c04      	adds	r4, r0, #0
1000d84c:	20cf      	movs	r0, #207	; 0xcf
1000d84e:	2c00      	cmp	r4, #0
1000d850:	d006      	beq.n	1000d860 <at_ble_addr_get+0x18>
1000d852:	4b04      	ldr	r3, [pc, #16]	; (1000d864 <at_ble_addr_get+0x1c>)
1000d854:	38ce      	subs	r0, #206	; 0xce
1000d856:	1c21      	adds	r1, r4, #0
1000d858:	4798      	blx	r3
1000d85a:	4b03      	ldr	r3, [pc, #12]	; (1000d868 <at_ble_addr_get+0x20>)
1000d85c:	791b      	ldrb	r3, [r3, #4]
1000d85e:	7023      	strb	r3, [r4, #0]
1000d860:	bd10      	pop	{r4, pc}
1000d862:	46c0      	nop			; (mov r8, r8)
1000d864:	1000ef11 	.word	0x1000ef11
1000d868:	10015be2 	.word	0x10015be2

1000d86c <at_ble_set_dev_config>:
1000d86c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d86e:	7906      	ldrb	r6, [r0, #4]
1000d870:	b089      	sub	sp, #36	; 0x24
1000d872:	25cf      	movs	r5, #207	; 0xcf
1000d874:	2e03      	cmp	r6, #3
1000d876:	d838      	bhi.n	1000d8ea <at_ble_set_dev_config+0x7e>
1000d878:	7803      	ldrb	r3, [r0, #0]
1000d87a:	3511      	adds	r5, #17
1000d87c:	2b0f      	cmp	r3, #15
1000d87e:	d834      	bhi.n	1000d8ea <at_ble_set_dev_config+0x7e>
1000d880:	2380      	movs	r3, #128	; 0x80
1000d882:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d884:	3d11      	subs	r5, #17
1000d886:	009b      	lsls	r3, r3, #2
1000d888:	429f      	cmp	r7, r3
1000d88a:	d82e      	bhi.n	1000d8ea <at_ble_set_dev_config+0x7e>
1000d88c:	7fc5      	ldrb	r5, [r0, #31]
1000d88e:	7f83      	ldrb	r3, [r0, #30]
1000d890:	01ad      	lsls	r5, r5, #6
1000d892:	015b      	lsls	r3, r3, #5
1000d894:	431d      	orrs	r5, r3
1000d896:	7ec3      	ldrb	r3, [r0, #27]
1000d898:	431d      	orrs	r5, r3
1000d89a:	7f43      	ldrb	r3, [r0, #29]
1000d89c:	011b      	lsls	r3, r3, #4
1000d89e:	431d      	orrs	r5, r3
1000d8a0:	7f03      	ldrb	r3, [r0, #28]
1000d8a2:	009b      	lsls	r3, r3, #2
1000d8a4:	431d      	orrs	r5, r3
1000d8a6:	4b12      	ldr	r3, [pc, #72]	; (1000d8f0 <at_ble_set_dev_config+0x84>)
1000d8a8:	b2ed      	uxtb	r5, r5
1000d8aa:	711e      	strb	r6, [r3, #4]
1000d8ac:	7903      	ldrb	r3, [r0, #4]
1000d8ae:	3b02      	subs	r3, #2
1000d8b0:	2b01      	cmp	r3, #1
1000d8b2:	d801      	bhi.n	1000d8b8 <at_ble_set_dev_config+0x4c>
1000d8b4:	2302      	movs	r3, #2
1000d8b6:	7103      	strb	r3, [r0, #4]
1000d8b8:	1c04      	adds	r4, r0, #0
1000d8ba:	1c23      	adds	r3, r4, #0
1000d8bc:	330b      	adds	r3, #11
1000d8be:	8861      	ldrh	r1, [r4, #2]
1000d8c0:	9307      	str	r3, [sp, #28]
1000d8c2:	7923      	ldrb	r3, [r4, #4]
1000d8c4:	7800      	ldrb	r0, [r0, #0]
1000d8c6:	9300      	str	r3, [sp, #0]
1000d8c8:	9501      	str	r5, [sp, #4]
1000d8ca:	8c25      	ldrh	r5, [r4, #32]
1000d8cc:	1d62      	adds	r2, r4, #5
1000d8ce:	9502      	str	r5, [sp, #8]
1000d8d0:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d8d2:	9b07      	ldr	r3, [sp, #28]
1000d8d4:	9503      	str	r5, [sp, #12]
1000d8d6:	9704      	str	r7, [sp, #16]
1000d8d8:	4d06      	ldr	r5, [pc, #24]	; (1000d8f4 <at_ble_set_dev_config+0x88>)
1000d8da:	47a8      	blx	r5
1000d8dc:	7126      	strb	r6, [r4, #4]
1000d8de:	1c05      	adds	r5, r0, #0
1000d8e0:	1c21      	adds	r1, r4, #0
1000d8e2:	4803      	ldr	r0, [pc, #12]	; (1000d8f0 <at_ble_set_dev_config+0x84>)
1000d8e4:	2226      	movs	r2, #38	; 0x26
1000d8e6:	4b04      	ldr	r3, [pc, #16]	; (1000d8f8 <at_ble_set_dev_config+0x8c>)
1000d8e8:	4798      	blx	r3
1000d8ea:	1c28      	adds	r0, r5, #0
1000d8ec:	b009      	add	sp, #36	; 0x24
1000d8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8f0:	10015be2 	.word	0x10015be2
1000d8f4:	1000ee09 	.word	0x1000ee09
1000d8f8:	1001159b 	.word	0x1001159b

1000d8fc <at_ble_init>:
1000d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8fe:	b087      	sub	sp, #28
1000d900:	af03      	add	r7, sp, #12
1000d902:	4954      	ldr	r1, [pc, #336]	; (1000da54 <at_ble_init+0x158>)
1000d904:	220b      	movs	r2, #11
1000d906:	4b54      	ldr	r3, [pc, #336]	; (1000da58 <at_ble_init+0x15c>)
1000d908:	1c04      	adds	r4, r0, #0
1000d90a:	1c38      	adds	r0, r7, #0
1000d90c:	4798      	blx	r3
1000d90e:	2205      	movs	r2, #5
1000d910:	4b52      	ldr	r3, [pc, #328]	; (1000da5c <at_ble_init+0x160>)
1000d912:	2640      	movs	r6, #64	; 0x40
1000d914:	801a      	strh	r2, [r3, #0]
1000d916:	2300      	movs	r3, #0
1000d918:	4a51      	ldr	r2, [pc, #324]	; (1000da60 <at_ble_init+0x164>)
1000d91a:	6013      	str	r3, [r2, #0]
1000d91c:	4a51      	ldr	r2, [pc, #324]	; (1000da64 <at_ble_init+0x168>)
1000d91e:	7013      	strb	r3, [r2, #0]
1000d920:	4a51      	ldr	r2, [pc, #324]	; (1000da68 <at_ble_init+0x16c>)
1000d922:	7013      	strb	r3, [r2, #0]
1000d924:	4b51      	ldr	r3, [pc, #324]	; (1000da6c <at_ble_init+0x170>)
1000d926:	4798      	blx	r3
1000d928:	4b51      	ldr	r3, [pc, #324]	; (1000da70 <at_ble_init+0x174>)
1000d92a:	4798      	blx	r3
1000d92c:	4b51      	ldr	r3, [pc, #324]	; (1000da74 <at_ble_init+0x178>)
1000d92e:	4798      	blx	r3
1000d930:	4b51      	ldr	r3, [pc, #324]	; (1000da78 <at_ble_init+0x17c>)
1000d932:	4798      	blx	r3
1000d934:	2c00      	cmp	r4, #0
1000d936:	d100      	bne.n	1000d93a <at_ble_init+0x3e>
1000d938:	e089      	b.n	1000da4e <at_ble_init+0x152>
1000d93a:	68a3      	ldr	r3, [r4, #8]
1000d93c:	2b00      	cmp	r3, #0
1000d93e:	d100      	bne.n	1000d942 <at_ble_init+0x46>
1000d940:	e085      	b.n	1000da4e <at_ble_init+0x152>
1000d942:	6923      	ldr	r3, [r4, #16]
1000d944:	2b00      	cmp	r3, #0
1000d946:	d100      	bne.n	1000d94a <at_ble_init+0x4e>
1000d948:	e081      	b.n	1000da4e <at_ble_init+0x152>
1000d94a:	6820      	ldr	r0, [r4, #0]
1000d94c:	2800      	cmp	r0, #0
1000d94e:	d102      	bne.n	1000d956 <at_ble_init+0x5a>
1000d950:	6863      	ldr	r3, [r4, #4]
1000d952:	2b00      	cmp	r3, #0
1000d954:	d17b      	bne.n	1000da4e <at_ble_init+0x152>
1000d956:	4b49      	ldr	r3, [pc, #292]	; (1000da7c <at_ble_init+0x180>)
1000d958:	6861      	ldr	r1, [r4, #4]
1000d95a:	4798      	blx	r3
1000d95c:	4b48      	ldr	r3, [pc, #288]	; (1000da80 <at_ble_init+0x184>)
1000d95e:	4798      	blx	r3
1000d960:	2801      	cmp	r0, #1
1000d962:	d901      	bls.n	1000d968 <at_ble_init+0x6c>
1000d964:	26e2      	movs	r6, #226	; 0xe2
1000d966:	e072      	b.n	1000da4e <at_ble_init+0x152>
1000d968:	4846      	ldr	r0, [pc, #280]	; (1000da84 <at_ble_init+0x188>)
1000d96a:	4b47      	ldr	r3, [pc, #284]	; (1000da88 <at_ble_init+0x18c>)
1000d96c:	4798      	blx	r3
1000d96e:	2800      	cmp	r0, #0
1000d970:	d1f8      	bne.n	1000d964 <at_ble_init+0x68>
1000d972:	1c20      	adds	r0, r4, #0
1000d974:	4b45      	ldr	r3, [pc, #276]	; (1000da8c <at_ble_init+0x190>)
1000d976:	4798      	blx	r3
1000d978:	68e0      	ldr	r0, [r4, #12]
1000d97a:	68a1      	ldr	r1, [r4, #8]
1000d97c:	4b44      	ldr	r3, [pc, #272]	; (1000da90 <at_ble_init+0x194>)
1000d97e:	4798      	blx	r3
1000d980:	466b      	mov	r3, sp
1000d982:	2201      	movs	r2, #1
1000d984:	1cdc      	adds	r4, r3, #3
1000d986:	1c20      	adds	r0, r4, #0
1000d988:	a901      	add	r1, sp, #4
1000d98a:	4252      	negs	r2, r2
1000d98c:	4b41      	ldr	r3, [pc, #260]	; (1000da94 <at_ble_init+0x198>)
1000d98e:	4798      	blx	r3
1000d990:	2800      	cmp	r0, #0
1000d992:	d102      	bne.n	1000d99a <at_ble_init+0x9e>
1000d994:	7823      	ldrb	r3, [r4, #0]
1000d996:	2b39      	cmp	r3, #57	; 0x39
1000d998:	d1f2      	bne.n	1000d980 <at_ble_init+0x84>
1000d99a:	4b3f      	ldr	r3, [pc, #252]	; (1000da98 <at_ble_init+0x19c>)
1000d99c:	4798      	blx	r3
1000d99e:	1e06      	subs	r6, r0, #0
1000d9a0:	d155      	bne.n	1000da4e <at_ble_init+0x152>
1000d9a2:	1c03      	adds	r3, r0, #0
1000d9a4:	2101      	movs	r1, #1
1000d9a6:	4a3d      	ldr	r2, [pc, #244]	; (1000da9c <at_ble_init+0x1a0>)
1000d9a8:	4249      	negs	r1, r1
1000d9aa:	189a      	adds	r2, r3, r2
1000d9ac:	3312      	adds	r3, #18
1000d9ae:	8151      	strh	r1, [r2, #10]
1000d9b0:	2b90      	cmp	r3, #144	; 0x90
1000d9b2:	d1f7      	bne.n	1000d9a4 <at_ble_init+0xa8>
1000d9b4:	4c3a      	ldr	r4, [pc, #232]	; (1000daa0 <at_ble_init+0x1a4>)
1000d9b6:	3b81      	subs	r3, #129	; 0x81
1000d9b8:	7023      	strb	r3, [r4, #0]
1000d9ba:	4b3a      	ldr	r3, [pc, #232]	; (1000daa4 <at_ble_init+0x1a8>)
1000d9bc:	4a3a      	ldr	r2, [pc, #232]	; (1000daa8 <at_ble_init+0x1ac>)
1000d9be:	8063      	strh	r3, [r4, #2]
1000d9c0:	2300      	movs	r3, #0
1000d9c2:	7123      	strb	r3, [r4, #4]
1000d9c4:	3301      	adds	r3, #1
1000d9c6:	1e58      	subs	r0, r3, #1
1000d9c8:	0119      	lsls	r1, r3, #4
1000d9ca:	4301      	orrs	r1, r0
1000d9cc:	3302      	adds	r3, #2
1000d9ce:	7011      	strb	r1, [r2, #0]
1000d9d0:	3201      	adds	r2, #1
1000d9d2:	2b21      	cmp	r3, #33	; 0x21
1000d9d4:	d1f7      	bne.n	1000d9c6 <at_ble_init+0xca>
1000d9d6:	33e0      	adds	r3, #224	; 0xe0
1000d9d8:	33ff      	adds	r3, #255	; 0xff
1000d9da:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d9dc:	1c23      	adds	r3, r4, #0
1000d9de:	2500      	movs	r5, #0
1000d9e0:	3373      	adds	r3, #115	; 0x73
1000d9e2:	701d      	strb	r5, [r3, #0]
1000d9e4:	1c23      	adds	r3, r4, #0
1000d9e6:	3372      	adds	r3, #114	; 0x72
1000d9e8:	701d      	strb	r5, [r3, #0]
1000d9ea:	1c23      	adds	r3, r4, #0
1000d9ec:	3376      	adds	r3, #118	; 0x76
1000d9ee:	701d      	strb	r5, [r3, #0]
1000d9f0:	1c23      	adds	r3, r4, #0
1000d9f2:	33cc      	adds	r3, #204	; 0xcc
1000d9f4:	801d      	strh	r5, [r3, #0]
1000d9f6:	1c22      	adds	r2, r4, #0
1000d9f8:	23a0      	movs	r3, #160	; 0xa0
1000d9fa:	32d0      	adds	r2, #208	; 0xd0
1000d9fc:	005b      	lsls	r3, r3, #1
1000d9fe:	8013      	strh	r3, [r2, #0]
1000da00:	1c22      	adds	r2, r4, #0
1000da02:	32ce      	adds	r2, #206	; 0xce
1000da04:	8013      	strh	r3, [r2, #0]
1000da06:	1c23      	adds	r3, r4, #0
1000da08:	33d2      	adds	r3, #210	; 0xd2
1000da0a:	801d      	strh	r5, [r3, #0]
1000da0c:	22fa      	movs	r2, #250	; 0xfa
1000da0e:	1c23      	adds	r3, r4, #0
1000da10:	0052      	lsls	r2, r2, #1
1000da12:	33d4      	adds	r3, #212	; 0xd4
1000da14:	801a      	strh	r2, [r3, #0]
1000da16:	1c23      	adds	r3, r4, #0
1000da18:	33d6      	adds	r3, #214	; 0xd6
1000da1a:	701d      	strb	r5, [r3, #0]
1000da1c:	1c20      	adds	r0, r4, #0
1000da1e:	4b23      	ldr	r3, [pc, #140]	; (1000daac <at_ble_init+0x1b0>)
1000da20:	76e5      	strb	r5, [r4, #27]
1000da22:	7725      	strb	r5, [r4, #28]
1000da24:	7765      	strb	r5, [r4, #29]
1000da26:	77a5      	strb	r5, [r4, #30]
1000da28:	77e5      	strb	r5, [r4, #31]
1000da2a:	8425      	strh	r5, [r4, #32]
1000da2c:	8465      	strh	r5, [r4, #34]	; 0x22
1000da2e:	4798      	blx	r3
1000da30:	1c23      	adds	r3, r4, #0
1000da32:	2207      	movs	r2, #7
1000da34:	3374      	adds	r3, #116	; 0x74
1000da36:	701a      	strb	r2, [r3, #0]
1000da38:	1c23      	adds	r3, r4, #0
1000da3a:	3204      	adds	r2, #4
1000da3c:	33aa      	adds	r3, #170	; 0xaa
1000da3e:	801a      	strh	r2, [r3, #0]
1000da40:	1c2b      	adds	r3, r5, #0
1000da42:	5d7a      	ldrb	r2, [r7, r5]
1000da44:	33ac      	adds	r3, #172	; 0xac
1000da46:	3501      	adds	r5, #1
1000da48:	54e2      	strb	r2, [r4, r3]
1000da4a:	2d0b      	cmp	r5, #11
1000da4c:	d1f8      	bne.n	1000da40 <at_ble_init+0x144>
1000da4e:	1c30      	adds	r0, r6, #0
1000da50:	b007      	add	sp, #28
1000da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da54:	10013640 	.word	0x10013640
1000da58:	1001159b 	.word	0x1001159b
1000da5c:	10015b50 	.word	0x10015b50
1000da60:	10014eac 	.word	0x10014eac
1000da64:	10014e0c 	.word	0x10014e0c
1000da68:	10013858 	.word	0x10013858
1000da6c:	1000f6a9 	.word	0x1000f6a9
1000da70:	1000db8d 	.word	0x1000db8d
1000da74:	1000dc09 	.word	0x1000dc09
1000da78:	1000de29 	.word	0x1000de29
1000da7c:	1000dc45 	.word	0x1000dc45
1000da80:	1000b07d 	.word	0x1000b07d
1000da84:	1000e129 	.word	0x1000e129
1000da88:	1000b2c1 	.word	0x1000b2c1
1000da8c:	1000e1d1 	.word	0x1000e1d1
1000da90:	1000cfe9 	.word	0x1000cfe9
1000da94:	1000d0a5 	.word	0x1000d0a5
1000da98:	1000ed99 	.word	0x1000ed99
1000da9c:	10015b52 	.word	0x10015b52
1000daa0:	10015be2 	.word	0x10015be2
1000daa4:	00003a98 	.word	0x00003a98
1000daa8:	10015bed 	.word	0x10015bed
1000daac:	1000d86d 	.word	0x1000d86d

1000dab0 <at_ble_addr_set>:
1000dab0:	b538      	push	{r3, r4, r5, lr}
1000dab2:	1c45      	adds	r5, r0, #1
1000dab4:	1c03      	adds	r3, r0, #0
1000dab6:	20cf      	movs	r0, #207	; 0xcf
1000dab8:	2d00      	cmp	r5, #0
1000daba:	d018      	beq.n	1000daee <at_ble_addr_set+0x3e>
1000dabc:	781a      	ldrb	r2, [r3, #0]
1000dabe:	2a03      	cmp	r2, #3
1000dac0:	d815      	bhi.n	1000daee <at_ble_addr_set+0x3e>
1000dac2:	2a01      	cmp	r2, #1
1000dac4:	d102      	bne.n	1000dacc <at_ble_addr_set+0x1c>
1000dac6:	785a      	ldrb	r2, [r3, #1]
1000dac8:	2a00      	cmp	r2, #0
1000daca:	d010      	beq.n	1000daee <at_ble_addr_set+0x3e>
1000dacc:	1c1c      	adds	r4, r3, #0
1000dace:	1c29      	adds	r1, r5, #0
1000dad0:	2206      	movs	r2, #6
1000dad2:	4b07      	ldr	r3, [pc, #28]	; (1000daf0 <at_ble_addr_set+0x40>)
1000dad4:	4807      	ldr	r0, [pc, #28]	; (1000daf4 <at_ble_addr_set+0x44>)
1000dad6:	4798      	blx	r3
1000dad8:	7823      	ldrb	r3, [r4, #0]
1000dada:	4807      	ldr	r0, [pc, #28]	; (1000daf8 <at_ble_addr_set+0x48>)
1000dadc:	7103      	strb	r3, [r0, #4]
1000dade:	4b07      	ldr	r3, [pc, #28]	; (1000dafc <at_ble_addr_set+0x4c>)
1000dae0:	4798      	blx	r3
1000dae2:	7823      	ldrb	r3, [r4, #0]
1000dae4:	2b00      	cmp	r3, #0
1000dae6:	d102      	bne.n	1000daee <at_ble_addr_set+0x3e>
1000dae8:	1c28      	adds	r0, r5, #0
1000daea:	4b05      	ldr	r3, [pc, #20]	; (1000db00 <at_ble_addr_set+0x50>)
1000daec:	4798      	blx	r3
1000daee:	bd38      	pop	{r3, r4, r5, pc}
1000daf0:	1001159b 	.word	0x1001159b
1000daf4:	10015be7 	.word	0x10015be7
1000daf8:	10015be2 	.word	0x10015be2
1000dafc:	1000d86d 	.word	0x1000d86d
1000db00:	1000e255 	.word	0x1000e255

1000db04 <at_ble_scan_stop>:
1000db04:	b510      	push	{r4, lr}
1000db06:	4b05      	ldr	r3, [pc, #20]	; (1000db1c <at_ble_scan_stop+0x18>)
1000db08:	4798      	blx	r3
1000db0a:	1e04      	subs	r4, r0, #0
1000db0c:	d103      	bne.n	1000db16 <at_ble_scan_stop+0x12>
1000db0e:	20d1      	movs	r0, #209	; 0xd1
1000db10:	4b03      	ldr	r3, [pc, #12]	; (1000db20 <at_ble_scan_stop+0x1c>)
1000db12:	0100      	lsls	r0, r0, #4
1000db14:	4798      	blx	r3
1000db16:	1c20      	adds	r0, r4, #0
1000db18:	bd10      	pop	{r4, pc}
1000db1a:	46c0      	nop			; (mov r8, r8)
1000db1c:	1000eff1 	.word	0x1000eff1
1000db20:	1000d77d 	.word	0x1000d77d

1000db24 <at_ble_disconnect>:
1000db24:	b538      	push	{r3, r4, r5, lr}
1000db26:	1c04      	adds	r4, r0, #0
1000db28:	4b04      	ldr	r3, [pc, #16]	; (1000db3c <at_ble_disconnect+0x18>)
1000db2a:	1c08      	adds	r0, r1, #0
1000db2c:	1c21      	adds	r1, r4, #0
1000db2e:	4798      	blx	r3
1000db30:	1c05      	adds	r5, r0, #0
1000db32:	4b03      	ldr	r3, [pc, #12]	; (1000db40 <at_ble_disconnect+0x1c>)
1000db34:	1c20      	adds	r0, r4, #0
1000db36:	4798      	blx	r3
1000db38:	1c28      	adds	r0, r5, #0
1000db3a:	bd38      	pop	{r3, r4, r5, pc}
1000db3c:	1000e669 	.word	0x1000e669
1000db40:	1000d7c1 	.word	0x1000d7c1

1000db44 <at_ble_conn_update_reply>:
1000db44:	b510      	push	{r4, lr}
1000db46:	4c01      	ldr	r4, [pc, #4]	; (1000db4c <at_ble_conn_update_reply+0x8>)
1000db48:	47a0      	blx	r4
1000db4a:	bd10      	pop	{r4, pc}
1000db4c:	1000eb59 	.word	0x1000eb59

1000db50 <at_ble_random_address_resolve>:
1000db50:	b510      	push	{r4, lr}
1000db52:	23cf      	movs	r3, #207	; 0xcf
1000db54:	2800      	cmp	r0, #0
1000db56:	d00a      	beq.n	1000db6e <at_ble_random_address_resolve+0x1e>
1000db58:	2900      	cmp	r1, #0
1000db5a:	d008      	beq.n	1000db6e <at_ble_random_address_resolve+0x1e>
1000db5c:	2a00      	cmp	r2, #0
1000db5e:	d006      	beq.n	1000db6e <at_ble_random_address_resolve+0x1e>
1000db60:	780c      	ldrb	r4, [r1, #0]
1000db62:	2c02      	cmp	r4, #2
1000db64:	d103      	bne.n	1000db6e <at_ble_random_address_resolve+0x1e>
1000db66:	4b03      	ldr	r3, [pc, #12]	; (1000db74 <at_ble_random_address_resolve+0x24>)
1000db68:	3101      	adds	r1, #1
1000db6a:	4798      	blx	r3
1000db6c:	2300      	movs	r3, #0
1000db6e:	1c18      	adds	r0, r3, #0
1000db70:	bd10      	pop	{r4, pc}
1000db72:	46c0      	nop			; (mov r8, r8)
1000db74:	1000f24d 	.word	0x1000f24d

1000db78 <at_ble_uuid_len2type>:
1000db78:	1e83      	subs	r3, r0, #2
1000db7a:	b2db      	uxtb	r3, r3
1000db7c:	2003      	movs	r0, #3
1000db7e:	2b0e      	cmp	r3, #14
1000db80:	d801      	bhi.n	1000db86 <at_ble_uuid_len2type+0xe>
1000db82:	4a01      	ldr	r2, [pc, #4]	; (1000db88 <at_ble_uuid_len2type+0x10>)
1000db84:	5cd0      	ldrb	r0, [r2, r3]
1000db86:	4770      	bx	lr
1000db88:	1001364b 	.word	0x1001364b

1000db8c <init_gatt_client_module>:
1000db8c:	2200      	movs	r2, #0
1000db8e:	4b01      	ldr	r3, [pc, #4]	; (1000db94 <init_gatt_client_module+0x8>)
1000db90:	801a      	strh	r2, [r3, #0]
1000db92:	4770      	bx	lr
1000db94:	10014e04 	.word	0x10014e04

1000db98 <db_searchATT>:
1000db98:	b570      	push	{r4, r5, r6, lr}
1000db9a:	1c05      	adds	r5, r0, #0
1000db9c:	2400      	movs	r4, #0
1000db9e:	4b0c      	ldr	r3, [pc, #48]	; (1000dbd0 <db_searchATT+0x38>)
1000dba0:	6819      	ldr	r1, [r3, #0]
1000dba2:	4b0c      	ldr	r3, [pc, #48]	; (1000dbd4 <db_searchATT+0x3c>)
1000dba4:	681e      	ldr	r6, [r3, #0]
1000dba6:	428c      	cmp	r4, r1
1000dba8:	dc10      	bgt.n	1000dbcc <db_searchATT+0x34>
1000dbaa:	200c      	movs	r0, #12
1000dbac:	1863      	adds	r3, r4, r1
1000dbae:	0fda      	lsrs	r2, r3, #31
1000dbb0:	18d3      	adds	r3, r2, r3
1000dbb2:	1c02      	adds	r2, r0, #0
1000dbb4:	105b      	asrs	r3, r3, #1
1000dbb6:	435a      	muls	r2, r3
1000dbb8:	18b0      	adds	r0, r6, r2
1000dbba:	8802      	ldrh	r2, [r0, #0]
1000dbbc:	42aa      	cmp	r2, r5
1000dbbe:	d201      	bcs.n	1000dbc4 <db_searchATT+0x2c>
1000dbc0:	1e59      	subs	r1, r3, #1
1000dbc2:	e7f0      	b.n	1000dba6 <db_searchATT+0xe>
1000dbc4:	42aa      	cmp	r2, r5
1000dbc6:	d902      	bls.n	1000dbce <db_searchATT+0x36>
1000dbc8:	1c5c      	adds	r4, r3, #1
1000dbca:	e7ec      	b.n	1000dba6 <db_searchATT+0xe>
1000dbcc:	2000      	movs	r0, #0
1000dbce:	bd70      	pop	{r4, r5, r6, pc}
1000dbd0:	10014e18 	.word	0x10014e18
1000dbd4:	10014e10 	.word	0x10014e10

1000dbd8 <at_ble_read_authorize_reply.part.1>:
1000dbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000dbda:	4b09      	ldr	r3, [pc, #36]	; (1000dc00 <at_ble_read_authorize_reply.part.1+0x28>)
1000dbdc:	1c05      	adds	r5, r0, #0
1000dbde:	1c08      	adds	r0, r1, #0
1000dbe0:	1c0c      	adds	r4, r1, #0
1000dbe2:	4798      	blx	r3
1000dbe4:	2800      	cmp	r0, #0
1000dbe6:	d009      	beq.n	1000dbfc <at_ble_read_authorize_reply.part.1+0x24>
1000dbe8:	6882      	ldr	r2, [r0, #8]
1000dbea:	2a00      	cmp	r2, #0
1000dbec:	d006      	beq.n	1000dbfc <at_ble_read_authorize_reply.part.1+0x24>
1000dbee:	8883      	ldrh	r3, [r0, #4]
1000dbf0:	1c29      	adds	r1, r5, #0
1000dbf2:	9200      	str	r2, [sp, #0]
1000dbf4:	1c20      	adds	r0, r4, #0
1000dbf6:	2200      	movs	r2, #0
1000dbf8:	4c02      	ldr	r4, [pc, #8]	; (1000dc04 <at_ble_read_authorize_reply.part.1+0x2c>)
1000dbfa:	47a0      	blx	r4
1000dbfc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000dbfe:	46c0      	nop			; (mov r8, r8)
1000dc00:	1000db99 	.word	0x1000db99
1000dc04:	1000f349 	.word	0x1000f349

1000dc08 <initi_gatt_server_module>:
1000dc08:	2300      	movs	r3, #0
1000dc0a:	4a07      	ldr	r2, [pc, #28]	; (1000dc28 <initi_gatt_server_module+0x20>)
1000dc0c:	7013      	strb	r3, [r2, #0]
1000dc0e:	4a07      	ldr	r2, [pc, #28]	; (1000dc2c <initi_gatt_server_module+0x24>)
1000dc10:	6013      	str	r3, [r2, #0]
1000dc12:	4a07      	ldr	r2, [pc, #28]	; (1000dc30 <initi_gatt_server_module+0x28>)
1000dc14:	6013      	str	r3, [r2, #0]
1000dc16:	4a07      	ldr	r2, [pc, #28]	; (1000dc34 <initi_gatt_server_module+0x2c>)
1000dc18:	6013      	str	r3, [r2, #0]
1000dc1a:	4a07      	ldr	r2, [pc, #28]	; (1000dc38 <initi_gatt_server_module+0x30>)
1000dc1c:	6013      	str	r3, [r2, #0]
1000dc1e:	4a07      	ldr	r2, [pc, #28]	; (1000dc3c <initi_gatt_server_module+0x34>)
1000dc20:	6013      	str	r3, [r2, #0]
1000dc22:	4a07      	ldr	r2, [pc, #28]	; (1000dc40 <initi_gatt_server_module+0x38>)
1000dc24:	6013      	str	r3, [r2, #0]
1000dc26:	4770      	bx	lr
1000dc28:	10014e0c 	.word	0x10014e0c
1000dc2c:	10014e1c 	.word	0x10014e1c
1000dc30:	10014e18 	.word	0x10014e18
1000dc34:	10014e08 	.word	0x10014e08
1000dc38:	10014e14 	.word	0x10014e14
1000dc3c:	10014e10 	.word	0x10014e10
1000dc40:	10014e20 	.word	0x10014e20

1000dc44 <db_init>:
1000dc44:	4b0a      	ldr	r3, [pc, #40]	; (1000dc70 <db_init+0x2c>)
1000dc46:	4a0b      	ldr	r2, [pc, #44]	; (1000dc74 <db_init+0x30>)
1000dc48:	6018      	str	r0, [r3, #0]
1000dc4a:	084b      	lsrs	r3, r1, #1
1000dc4c:	6013      	str	r3, [r2, #0]
1000dc4e:	4a0a      	ldr	r2, [pc, #40]	; (1000dc78 <db_init+0x34>)
1000dc50:	18c3      	adds	r3, r0, r3
1000dc52:	6013      	str	r3, [r2, #0]
1000dc54:	4a09      	ldr	r2, [pc, #36]	; (1000dc7c <db_init+0x38>)
1000dc56:	1841      	adds	r1, r0, r1
1000dc58:	6013      	str	r3, [r2, #0]
1000dc5a:	2303      	movs	r3, #3
1000dc5c:	2200      	movs	r2, #0
1000dc5e:	3103      	adds	r1, #3
1000dc60:	4399      	bics	r1, r3
1000dc62:	4b07      	ldr	r3, [pc, #28]	; (1000dc80 <db_init+0x3c>)
1000dc64:	3904      	subs	r1, #4
1000dc66:	6019      	str	r1, [r3, #0]
1000dc68:	4b06      	ldr	r3, [pc, #24]	; (1000dc84 <db_init+0x40>)
1000dc6a:	601a      	str	r2, [r3, #0]
1000dc6c:	4770      	bx	lr
1000dc6e:	46c0      	nop			; (mov r8, r8)
1000dc70:	10014e20 	.word	0x10014e20
1000dc74:	10014e1c 	.word	0x10014e1c
1000dc78:	10014e08 	.word	0x10014e08
1000dc7c:	10014e14 	.word	0x10014e14
1000dc80:	10014e10 	.word	0x10014e10
1000dc84:	10014e18 	.word	0x10014e18

1000dc88 <at_ble_characteristic_value_set>:
1000dc88:	b570      	push	{r4, r5, r6, lr}
1000dc8a:	4b0b      	ldr	r3, [pc, #44]	; (1000dcb8 <at_ble_characteristic_value_set+0x30>)
1000dc8c:	1c06      	adds	r6, r0, #0
1000dc8e:	1c0c      	adds	r4, r1, #0
1000dc90:	1c15      	adds	r5, r2, #0
1000dc92:	4798      	blx	r3
1000dc94:	2800      	cmp	r0, #0
1000dc96:	d008      	beq.n	1000dcaa <at_ble_characteristic_value_set+0x22>
1000dc98:	6880      	ldr	r0, [r0, #8]
1000dc9a:	2800      	cmp	r0, #0
1000dc9c:	d005      	beq.n	1000dcaa <at_ble_characteristic_value_set+0x22>
1000dc9e:	1c21      	adds	r1, r4, #0
1000dca0:	1c2a      	adds	r2, r5, #0
1000dca2:	4b06      	ldr	r3, [pc, #24]	; (1000dcbc <at_ble_characteristic_value_set+0x34>)
1000dca4:	4798      	blx	r3
1000dca6:	2000      	movs	r0, #0
1000dca8:	e004      	b.n	1000dcb4 <at_ble_characteristic_value_set+0x2c>
1000dcaa:	1c30      	adds	r0, r6, #0
1000dcac:	1c29      	adds	r1, r5, #0
1000dcae:	1c22      	adds	r2, r4, #0
1000dcb0:	4b03      	ldr	r3, [pc, #12]	; (1000dcc0 <at_ble_characteristic_value_set+0x38>)
1000dcb2:	4798      	blx	r3
1000dcb4:	bd70      	pop	{r4, r5, r6, pc}
1000dcb6:	46c0      	nop			; (mov r8, r8)
1000dcb8:	1000db99 	.word	0x1000db99
1000dcbc:	1001159b 	.word	0x1001159b
1000dcc0:	1000f6bd 	.word	0x1000f6bd

1000dcc4 <at_ble_characteristic_value_get>:
1000dcc4:	b570      	push	{r4, r5, r6, lr}
1000dcc6:	4b0c      	ldr	r3, [pc, #48]	; (1000dcf8 <at_ble_characteristic_value_get+0x34>)
1000dcc8:	1c06      	adds	r6, r0, #0
1000dcca:	1c0c      	adds	r4, r1, #0
1000dccc:	1c15      	adds	r5, r2, #0
1000dcce:	4798      	blx	r3
1000dcd0:	2800      	cmp	r0, #0
1000dcd2:	d00b      	beq.n	1000dcec <at_ble_characteristic_value_get+0x28>
1000dcd4:	6883      	ldr	r3, [r0, #8]
1000dcd6:	2b00      	cmp	r3, #0
1000dcd8:	d008      	beq.n	1000dcec <at_ble_characteristic_value_get+0x28>
1000dcda:	8883      	ldrh	r3, [r0, #4]
1000dcdc:	802b      	strh	r3, [r5, #0]
1000dcde:	8882      	ldrh	r2, [r0, #4]
1000dce0:	6881      	ldr	r1, [r0, #8]
1000dce2:	4b06      	ldr	r3, [pc, #24]	; (1000dcfc <at_ble_characteristic_value_get+0x38>)
1000dce4:	1c20      	adds	r0, r4, #0
1000dce6:	4798      	blx	r3
1000dce8:	2000      	movs	r0, #0
1000dcea:	e004      	b.n	1000dcf6 <at_ble_characteristic_value_get+0x32>
1000dcec:	1c30      	adds	r0, r6, #0
1000dcee:	1c29      	adds	r1, r5, #0
1000dcf0:	1c22      	adds	r2, r4, #0
1000dcf2:	4b03      	ldr	r3, [pc, #12]	; (1000dd00 <at_ble_characteristic_value_get+0x3c>)
1000dcf4:	4798      	blx	r3
1000dcf6:	bd70      	pop	{r4, r5, r6, pc}
1000dcf8:	1000db99 	.word	0x1000db99
1000dcfc:	1001159b 	.word	0x1001159b
1000dd00:	1000f749 	.word	0x1000f749

1000dd04 <at_ble_write_authorize_reply>:
1000dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd06:	b085      	sub	sp, #20
1000dd08:	1c04      	adds	r4, r0, #0
1000dd0a:	9101      	str	r1, [sp, #4]
1000dd0c:	2900      	cmp	r1, #0
1000dd0e:	d128      	bne.n	1000dd62 <at_ble_write_authorize_reply+0x5e>
1000dd10:	8843      	ldrh	r3, [r0, #2]
1000dd12:	1c27      	adds	r7, r4, #0
1000dd14:	9300      	str	r3, [sp, #0]
1000dd16:	1c18      	adds	r0, r3, #0
1000dd18:	4b16      	ldr	r3, [pc, #88]	; (1000dd74 <at_ble_write_authorize_reply+0x70>)
1000dd1a:	4798      	blx	r3
1000dd1c:	3708      	adds	r7, #8
1000dd1e:	2800      	cmp	r0, #0
1000dd20:	d009      	beq.n	1000dd36 <at_ble_write_authorize_reply+0x32>
1000dd22:	6880      	ldr	r0, [r0, #8]
1000dd24:	2800      	cmp	r0, #0
1000dd26:	d006      	beq.n	1000dd36 <at_ble_write_authorize_reply+0x32>
1000dd28:	88a3      	ldrh	r3, [r4, #4]
1000dd2a:	88e2      	ldrh	r2, [r4, #6]
1000dd2c:	18c0      	adds	r0, r0, r3
1000dd2e:	1c39      	adds	r1, r7, #0
1000dd30:	4b11      	ldr	r3, [pc, #68]	; (1000dd78 <at_ble_write_authorize_reply+0x74>)
1000dd32:	4798      	blx	r3
1000dd34:	e015      	b.n	1000dd62 <at_ble_write_authorize_reply+0x5e>
1000dd36:	ab02      	add	r3, sp, #8
1000dd38:	1d9e      	adds	r6, r3, #6
1000dd3a:	2300      	movs	r3, #0
1000dd3c:	4d0f      	ldr	r5, [pc, #60]	; (1000dd7c <at_ble_write_authorize_reply+0x78>)
1000dd3e:	8033      	strh	r3, [r6, #0]
1000dd40:	6829      	ldr	r1, [r5, #0]
1000dd42:	1c32      	adds	r2, r6, #0
1000dd44:	4b0e      	ldr	r3, [pc, #56]	; (1000dd80 <at_ble_write_authorize_reply+0x7c>)
1000dd46:	9800      	ldr	r0, [sp, #0]
1000dd48:	4798      	blx	r3
1000dd4a:	682b      	ldr	r3, [r5, #0]
1000dd4c:	88a0      	ldrh	r0, [r4, #4]
1000dd4e:	88e2      	ldrh	r2, [r4, #6]
1000dd50:	1818      	adds	r0, r3, r0
1000dd52:	1c39      	adds	r1, r7, #0
1000dd54:	4b08      	ldr	r3, [pc, #32]	; (1000dd78 <at_ble_write_authorize_reply+0x74>)
1000dd56:	4798      	blx	r3
1000dd58:	8860      	ldrh	r0, [r4, #2]
1000dd5a:	8832      	ldrh	r2, [r6, #0]
1000dd5c:	6829      	ldr	r1, [r5, #0]
1000dd5e:	4b09      	ldr	r3, [pc, #36]	; (1000dd84 <at_ble_write_authorize_reply+0x80>)
1000dd60:	4798      	blx	r3
1000dd62:	8860      	ldrh	r0, [r4, #2]
1000dd64:	8821      	ldrh	r1, [r4, #0]
1000dd66:	9a01      	ldr	r2, [sp, #4]
1000dd68:	4b07      	ldr	r3, [pc, #28]	; (1000dd88 <at_ble_write_authorize_reply+0x84>)
1000dd6a:	4798      	blx	r3
1000dd6c:	2000      	movs	r0, #0
1000dd6e:	b005      	add	sp, #20
1000dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd72:	46c0      	nop			; (mov r8, r8)
1000dd74:	1000db99 	.word	0x1000db99
1000dd78:	1001159b 	.word	0x1001159b
1000dd7c:	1001385c 	.word	0x1001385c
1000dd80:	1000dcc5 	.word	0x1000dcc5
1000dd84:	1000dc89 	.word	0x1000dc89
1000dd88:	1000f3b5 	.word	0x1000f3b5

1000dd8c <gatts_handle_read_req>:
1000dd8c:	b538      	push	{r3, r4, r5, lr}
1000dd8e:	1c0c      	adds	r4, r1, #0
1000dd90:	4b07      	ldr	r3, [pc, #28]	; (1000ddb0 <gatts_handle_read_req+0x24>)
1000dd92:	4798      	blx	r3
1000dd94:	8865      	ldrh	r5, [r4, #2]
1000dd96:	4b07      	ldr	r3, [pc, #28]	; (1000ddb4 <gatts_handle_read_req+0x28>)
1000dd98:	1c28      	adds	r0, r5, #0
1000dd9a:	4798      	blx	r3
1000dd9c:	7883      	ldrb	r3, [r0, #2]
1000dd9e:	2026      	movs	r0, #38	; 0x26
1000dda0:	07db      	lsls	r3, r3, #31
1000dda2:	d404      	bmi.n	1000ddae <gatts_handle_read_req+0x22>
1000dda4:	8820      	ldrh	r0, [r4, #0]
1000dda6:	1c29      	adds	r1, r5, #0
1000dda8:	4b03      	ldr	r3, [pc, #12]	; (1000ddb8 <gatts_handle_read_req+0x2c>)
1000ddaa:	4798      	blx	r3
1000ddac:	203b      	movs	r0, #59	; 0x3b
1000ddae:	bd38      	pop	{r3, r4, r5, pc}
1000ddb0:	1000f2f9 	.word	0x1000f2f9
1000ddb4:	1000db99 	.word	0x1000db99
1000ddb8:	1000dbd9 	.word	0x1000dbd9

1000ddbc <gatts_handle_att_info_req>:
1000ddbc:	b538      	push	{r3, r4, r5, lr}
1000ddbe:	1c0d      	adds	r5, r1, #0
1000ddc0:	4b0a      	ldr	r3, [pc, #40]	; (1000ddec <gatts_handle_att_info_req+0x30>)
1000ddc2:	1c14      	adds	r4, r2, #0
1000ddc4:	4798      	blx	r3
1000ddc6:	882d      	ldrh	r5, [r5, #0]
1000ddc8:	4b09      	ldr	r3, [pc, #36]	; (1000ddf0 <gatts_handle_att_info_req+0x34>)
1000ddca:	1c28      	adds	r0, r5, #0
1000ddcc:	4798      	blx	r3
1000ddce:	0a22      	lsrs	r2, r4, #8
1000ddd0:	1c03      	adds	r3, r0, #0
1000ddd2:	4c08      	ldr	r4, [pc, #32]	; (1000ddf4 <gatts_handle_att_info_req+0x38>)
1000ddd4:	b291      	uxth	r1, r2
1000ddd6:	2800      	cmp	r0, #0
1000ddd8:	d003      	beq.n	1000dde2 <gatts_handle_att_info_req+0x26>
1000ddda:	8882      	ldrh	r2, [r0, #4]
1000dddc:	2300      	movs	r3, #0
1000ddde:	1c28      	adds	r0, r5, #0
1000dde0:	e001      	b.n	1000dde6 <gatts_handle_att_info_req+0x2a>
1000dde2:	1c28      	adds	r0, r5, #0
1000dde4:	2201      	movs	r2, #1
1000dde6:	47a0      	blx	r4
1000dde8:	203b      	movs	r0, #59	; 0x3b
1000ddea:	bd38      	pop	{r3, r4, r5, pc}
1000ddec:	1000f33d 	.word	0x1000f33d
1000ddf0:	1000db99 	.word	0x1000db99
1000ddf4:	1000f3f9 	.word	0x1000f3f9

1000ddf8 <gatts_handle_write_req>:
1000ddf8:	b510      	push	{r4, lr}
1000ddfa:	1c14      	adds	r4, r2, #0
1000ddfc:	4b07      	ldr	r3, [pc, #28]	; (1000de1c <gatts_handle_write_req+0x24>)
1000ddfe:	4798      	blx	r3
1000de00:	4b07      	ldr	r3, [pc, #28]	; (1000de20 <gatts_handle_write_req+0x28>)
1000de02:	8860      	ldrh	r0, [r4, #2]
1000de04:	4798      	blx	r3
1000de06:	2302      	movs	r3, #2
1000de08:	7881      	ldrb	r1, [r0, #2]
1000de0a:	2022      	movs	r0, #34	; 0x22
1000de0c:	4019      	ands	r1, r3
1000de0e:	d103      	bne.n	1000de18 <gatts_handle_write_req+0x20>
1000de10:	1c20      	adds	r0, r4, #0
1000de12:	4b04      	ldr	r3, [pc, #16]	; (1000de24 <gatts_handle_write_req+0x2c>)
1000de14:	4798      	blx	r3
1000de16:	201f      	movs	r0, #31
1000de18:	bd10      	pop	{r4, pc}
1000de1a:	46c0      	nop			; (mov r8, r8)
1000de1c:	1000f305 	.word	0x1000f305
1000de20:	1000db99 	.word	0x1000db99
1000de24:	1000dd05 	.word	0x1000dd05

1000de28 <init_l2cc_task_module>:
1000de28:	220a      	movs	r2, #10
1000de2a:	4b01      	ldr	r3, [pc, #4]	; (1000de30 <init_l2cc_task_module+0x8>)
1000de2c:	701a      	strb	r2, [r3, #0]
1000de2e:	4770      	bx	lr
1000de30:	10013858 	.word	0x10013858

1000de34 <l2cc_data_send_rsp_handler>:
1000de34:	b510      	push	{r4, lr}
1000de36:	7802      	ldrb	r2, [r0, #0]
1000de38:	700a      	strb	r2, [r1, #0]
1000de3a:	7883      	ldrb	r3, [r0, #2]
1000de3c:	7844      	ldrb	r4, [r0, #1]
1000de3e:	021b      	lsls	r3, r3, #8
1000de40:	4323      	orrs	r3, r4
1000de42:	804b      	strh	r3, [r1, #2]
1000de44:	7903      	ldrb	r3, [r0, #4]
1000de46:	78c0      	ldrb	r0, [r0, #3]
1000de48:	021b      	lsls	r3, r3, #8
1000de4a:	4303      	orrs	r3, r0
1000de4c:	808b      	strh	r3, [r1, #4]
1000de4e:	2a00      	cmp	r2, #0
1000de50:	d103      	bne.n	1000de5a <l2cc_data_send_rsp_handler+0x26>
1000de52:	4a02      	ldr	r2, [pc, #8]	; (1000de5c <l2cc_data_send_rsp_handler+0x28>)
1000de54:	7813      	ldrb	r3, [r2, #0]
1000de56:	3301      	adds	r3, #1
1000de58:	7013      	strb	r3, [r2, #0]
1000de5a:	bd10      	pop	{r4, pc}
1000de5c:	10013858 	.word	0x10013858

1000de60 <l2cc_data_received_handler>:
1000de60:	b508      	push	{r3, lr}
1000de62:	1c03      	adds	r3, r0, #0
1000de64:	7842      	ldrb	r2, [r0, #1]
1000de66:	7800      	ldrb	r0, [r0, #0]
1000de68:	0212      	lsls	r2, r2, #8
1000de6a:	4302      	orrs	r2, r0
1000de6c:	800a      	strh	r2, [r1, #0]
1000de6e:	78da      	ldrb	r2, [r3, #3]
1000de70:	7898      	ldrb	r0, [r3, #2]
1000de72:	0212      	lsls	r2, r2, #8
1000de74:	4302      	orrs	r2, r0
1000de76:	804a      	strh	r2, [r1, #2]
1000de78:	795a      	ldrb	r2, [r3, #5]
1000de7a:	7918      	ldrb	r0, [r3, #4]
1000de7c:	0212      	lsls	r2, r2, #8
1000de7e:	4302      	orrs	r2, r0
1000de80:	808a      	strh	r2, [r1, #4]
1000de82:	1d88      	adds	r0, r1, #6
1000de84:	1d99      	adds	r1, r3, #6
1000de86:	4b01      	ldr	r3, [pc, #4]	; (1000de8c <l2cc_data_received_handler+0x2c>)
1000de88:	4798      	blx	r3
1000de8a:	bd08      	pop	{r3, pc}
1000de8c:	1001159b 	.word	0x1001159b

1000de90 <at_ble_authenticate>:
1000de90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de92:	1c0c      	adds	r4, r1, #0
1000de94:	211f      	movs	r1, #31
1000de96:	b08b      	sub	sp, #44	; 0x2c
1000de98:	9307      	str	r3, [sp, #28]
1000de9a:	ab02      	add	r3, sp, #8
1000de9c:	18c9      	adds	r1, r1, r3
1000de9e:	230f      	movs	r3, #15
1000dea0:	700b      	strb	r3, [r1, #0]
1000dea2:	4b40      	ldr	r3, [pc, #256]	; (1000dfa4 <at_ble_authenticate+0x114>)
1000dea4:	1c05      	adds	r5, r0, #0
1000dea6:	1c16      	adds	r6, r2, #0
1000dea8:	4798      	blx	r3
1000deaa:	1c07      	adds	r7, r0, #0
1000deac:	2001      	movs	r0, #1
1000deae:	2f07      	cmp	r7, #7
1000deb0:	d875      	bhi.n	1000df9e <at_ble_authenticate+0x10e>
1000deb2:	2c00      	cmp	r4, #0
1000deb4:	d113      	bne.n	1000dede <at_ble_authenticate+0x4e>
1000deb6:	2312      	movs	r3, #18
1000deb8:	435f      	muls	r7, r3
1000deba:	4b3b      	ldr	r3, [pc, #236]	; (1000dfa8 <at_ble_authenticate+0x118>)
1000debc:	5cfb      	ldrb	r3, [r7, r3]
1000debe:	4283      	cmp	r3, r0
1000dec0:	d001      	beq.n	1000dec6 <at_ble_authenticate+0x36>
1000dec2:	20cf      	movs	r0, #207	; 0xcf
1000dec4:	e06b      	b.n	1000df9e <at_ble_authenticate+0x10e>
1000dec6:	9504      	str	r5, [sp, #16]
1000dec8:	9400      	str	r4, [sp, #0]
1000deca:	9401      	str	r4, [sp, #4]
1000decc:	9402      	str	r4, [sp, #8]
1000dece:	9403      	str	r4, [sp, #12]
1000ded0:	1c20      	adds	r0, r4, #0
1000ded2:	1c21      	adds	r1, r4, #0
1000ded4:	1c22      	adds	r2, r4, #0
1000ded6:	1c23      	adds	r3, r4, #0
1000ded8:	4d34      	ldr	r5, [pc, #208]	; (1000dfac <at_ble_authenticate+0x11c>)
1000deda:	47a8      	blx	r5
1000dedc:	e05e      	b.n	1000df9c <at_ble_authenticate+0x10c>
1000dede:	7922      	ldrb	r2, [r4, #4]
1000dee0:	2a06      	cmp	r2, #6
1000dee2:	d9ee      	bls.n	1000dec2 <at_ble_authenticate+0x32>
1000dee4:	7963      	ldrb	r3, [r4, #5]
1000dee6:	2b10      	cmp	r3, #16
1000dee8:	d8eb      	bhi.n	1000dec2 <at_ble_authenticate+0x32>
1000deea:	429a      	cmp	r2, r3
1000deec:	d8e9      	bhi.n	1000dec2 <at_ble_authenticate+0x32>
1000deee:	7a23      	ldrb	r3, [r4, #8]
1000def0:	2b04      	cmp	r3, #4
1000def2:	d8e6      	bhi.n	1000dec2 <at_ble_authenticate+0x32>
1000def4:	79a3      	ldrb	r3, [r4, #6]
1000def6:	2b07      	cmp	r3, #7
1000def8:	d8e3      	bhi.n	1000dec2 <at_ble_authenticate+0x32>
1000defa:	79e3      	ldrb	r3, [r4, #7]
1000defc:	2b07      	cmp	r3, #7
1000defe:	d8e0      	bhi.n	1000dec2 <at_ble_authenticate+0x32>
1000df00:	78a3      	ldrb	r3, [r4, #2]
1000df02:	2b00      	cmp	r3, #0
1000df04:	d006      	beq.n	1000df14 <at_ble_authenticate+0x84>
1000df06:	2e00      	cmp	r6, #0
1000df08:	d0db      	beq.n	1000dec2 <at_ble_authenticate+0x32>
1000df0a:	4829      	ldr	r0, [pc, #164]	; (1000dfb0 <at_ble_authenticate+0x120>)
1000df0c:	1c31      	adds	r1, r6, #0
1000df0e:	221c      	movs	r2, #28
1000df10:	4b28      	ldr	r3, [pc, #160]	; (1000dfb4 <at_ble_authenticate+0x124>)
1000df12:	4798      	blx	r3
1000df14:	9b07      	ldr	r3, [sp, #28]
1000df16:	2b00      	cmp	r3, #0
1000df18:	d005      	beq.n	1000df26 <at_ble_authenticate+0x96>
1000df1a:	4827      	ldr	r0, [pc, #156]	; (1000dfb8 <at_ble_authenticate+0x128>)
1000df1c:	1c19      	adds	r1, r3, #0
1000df1e:	309a      	adds	r0, #154	; 0x9a
1000df20:	2210      	movs	r2, #16
1000df22:	4b24      	ldr	r3, [pc, #144]	; (1000dfb4 <at_ble_authenticate+0x124>)
1000df24:	4798      	blx	r3
1000df26:	7863      	ldrb	r3, [r4, #1]
1000df28:	78a2      	ldrb	r2, [r4, #2]
1000df2a:	009b      	lsls	r3, r3, #2
1000df2c:	4313      	orrs	r3, r2
1000df2e:	2212      	movs	r2, #18
1000df30:	4357      	muls	r7, r2
1000df32:	4a1d      	ldr	r2, [pc, #116]	; (1000dfa8 <at_ble_authenticate+0x118>)
1000df34:	b2db      	uxtb	r3, r3
1000df36:	5cba      	ldrb	r2, [r7, r2]
1000df38:	2a00      	cmp	r2, #0
1000df3a:	d116      	bne.n	1000df6a <at_ble_authenticate+0xda>
1000df3c:	79a0      	ldrb	r0, [r4, #6]
1000df3e:	0742      	lsls	r2, r0, #29
1000df40:	d502      	bpl.n	1000df48 <at_ble_authenticate+0xb8>
1000df42:	9a07      	ldr	r2, [sp, #28]
1000df44:	2a00      	cmp	r2, #0
1000df46:	d0bc      	beq.n	1000dec2 <at_ble_authenticate+0x32>
1000df48:	07c2      	lsls	r2, r0, #31
1000df4a:	d501      	bpl.n	1000df50 <at_ble_authenticate+0xc0>
1000df4c:	2e00      	cmp	r6, #0
1000df4e:	d0b8      	beq.n	1000dec2 <at_ble_authenticate+0x32>
1000df50:	7966      	ldrb	r6, [r4, #5]
1000df52:	7821      	ldrb	r1, [r4, #0]
1000df54:	78e2      	ldrb	r2, [r4, #3]
1000df56:	9600      	str	r6, [sp, #0]
1000df58:	9001      	str	r0, [sp, #4]
1000df5a:	79e0      	ldrb	r0, [r4, #7]
1000df5c:	9002      	str	r0, [sp, #8]
1000df5e:	7a20      	ldrb	r0, [r4, #8]
1000df60:	4c16      	ldr	r4, [pc, #88]	; (1000dfbc <at_ble_authenticate+0x12c>)
1000df62:	9003      	str	r0, [sp, #12]
1000df64:	1c28      	adds	r0, r5, #0
1000df66:	47a0      	blx	r4
1000df68:	e018      	b.n	1000df9c <at_ble_authenticate+0x10c>
1000df6a:	2a01      	cmp	r2, #1
1000df6c:	d1a9      	bne.n	1000dec2 <at_ble_authenticate+0x32>
1000df6e:	79e0      	ldrb	r0, [r4, #7]
1000df70:	0742      	lsls	r2, r0, #29
1000df72:	d502      	bpl.n	1000df7a <at_ble_authenticate+0xea>
1000df74:	9a07      	ldr	r2, [sp, #28]
1000df76:	2a00      	cmp	r2, #0
1000df78:	d0a3      	beq.n	1000dec2 <at_ble_authenticate+0x32>
1000df7a:	07c2      	lsls	r2, r0, #31
1000df7c:	d501      	bpl.n	1000df82 <at_ble_authenticate+0xf2>
1000df7e:	2e00      	cmp	r6, #0
1000df80:	d09f      	beq.n	1000dec2 <at_ble_authenticate+0x32>
1000df82:	7966      	ldrb	r6, [r4, #5]
1000df84:	7821      	ldrb	r1, [r4, #0]
1000df86:	78e2      	ldrb	r2, [r4, #3]
1000df88:	9600      	str	r6, [sp, #0]
1000df8a:	79a6      	ldrb	r6, [r4, #6]
1000df8c:	9002      	str	r0, [sp, #8]
1000df8e:	9601      	str	r6, [sp, #4]
1000df90:	7a20      	ldrb	r0, [r4, #8]
1000df92:	9504      	str	r5, [sp, #16]
1000df94:	9003      	str	r0, [sp, #12]
1000df96:	4c05      	ldr	r4, [pc, #20]	; (1000dfac <at_ble_authenticate+0x11c>)
1000df98:	2001      	movs	r0, #1
1000df9a:	47a0      	blx	r4
1000df9c:	2000      	movs	r0, #0
1000df9e:	b00b      	add	sp, #44	; 0x2c
1000dfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dfa2:	46c0      	nop			; (mov r8, r8)
1000dfa4:	1000e391 	.word	0x1000e391
1000dfa8:	10015b52 	.word	0x10015b52
1000dfac:	1000e901 	.word	0x1000e901
1000dfb0:	10015c60 	.word	0x10015c60
1000dfb4:	1001159b 	.word	0x1001159b
1000dfb8:	10015be2 	.word	0x10015be2
1000dfbc:	1000e6e1 	.word	0x1000e6e1

1000dfc0 <at_ble_pair_key_reply>:
1000dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfc2:	b085      	sub	sp, #20
1000dfc4:	1c05      	adds	r5, r0, #0
1000dfc6:	1c0c      	adds	r4, r1, #0
1000dfc8:	1c16      	adds	r6, r2, #0
1000dfca:	2100      	movs	r1, #0
1000dfcc:	4668      	mov	r0, sp
1000dfce:	2210      	movs	r2, #16
1000dfd0:	4b18      	ldr	r3, [pc, #96]	; (1000e034 <at_ble_pair_key_reply+0x74>)
1000dfd2:	4798      	blx	r3
1000dfd4:	2101      	movs	r1, #1
1000dfd6:	2e00      	cmp	r6, #0
1000dfd8:	d101      	bne.n	1000dfde <at_ble_pair_key_reply+0x1e>
1000dfda:	1c31      	adds	r1, r6, #0
1000dfdc:	466e      	mov	r6, sp
1000dfde:	2c00      	cmp	r4, #0
1000dfe0:	d116      	bne.n	1000e010 <at_ble_pair_key_reply+0x50>
1000dfe2:	2701      	movs	r7, #1
1000dfe4:	1c23      	adds	r3, r4, #0
1000dfe6:	1d70      	adds	r0, r6, #5
1000dfe8:	3e01      	subs	r6, #1
1000dfea:	7802      	ldrb	r2, [r0, #0]
1000dfec:	3801      	subs	r0, #1
1000dfee:	3a30      	subs	r2, #48	; 0x30
1000dff0:	437a      	muls	r2, r7
1000dff2:	189b      	adds	r3, r3, r2
1000dff4:	220a      	movs	r2, #10
1000dff6:	4357      	muls	r7, r2
1000dff8:	42b0      	cmp	r0, r6
1000dffa:	d1f6      	bne.n	1000dfea <at_ble_pair_key_reply+0x2a>
1000dffc:	466a      	mov	r2, sp
1000dffe:	4668      	mov	r0, sp
1000e000:	7013      	strb	r3, [r2, #0]
1000e002:	0a1a      	lsrs	r2, r3, #8
1000e004:	7042      	strb	r2, [r0, #1]
1000e006:	0c1a      	lsrs	r2, r3, #16
1000e008:	0e1b      	lsrs	r3, r3, #24
1000e00a:	7082      	strb	r2, [r0, #2]
1000e00c:	70c3      	strb	r3, [r0, #3]
1000e00e:	e009      	b.n	1000e024 <at_ble_pair_key_reply+0x64>
1000e010:	20cf      	movs	r0, #207	; 0xcf
1000e012:	2c01      	cmp	r4, #1
1000e014:	d10c      	bne.n	1000e030 <at_ble_pair_key_reply+0x70>
1000e016:	2300      	movs	r3, #0
1000e018:	4668      	mov	r0, sp
1000e01a:	5cf2      	ldrb	r2, [r6, r3]
1000e01c:	54c2      	strb	r2, [r0, r3]
1000e01e:	3301      	adds	r3, #1
1000e020:	2b10      	cmp	r3, #16
1000e022:	d1f9      	bne.n	1000e018 <at_ble_pair_key_reply+0x58>
1000e024:	2004      	movs	r0, #4
1000e026:	466a      	mov	r2, sp
1000e028:	1c2b      	adds	r3, r5, #0
1000e02a:	4c03      	ldr	r4, [pc, #12]	; (1000e038 <at_ble_pair_key_reply+0x78>)
1000e02c:	47a0      	blx	r4
1000e02e:	2000      	movs	r0, #0
1000e030:	b005      	add	sp, #20
1000e032:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e034:	100115ad 	.word	0x100115ad
1000e038:	1000e97d 	.word	0x1000e97d

1000e03c <at_ble_send_slave_sec_request>:
1000e03c:	b570      	push	{r4, r5, r6, lr}
1000e03e:	4b0c      	ldr	r3, [pc, #48]	; (1000e070 <at_ble_send_slave_sec_request+0x34>)
1000e040:	1c0e      	adds	r6, r1, #0
1000e042:	2100      	movs	r1, #0
1000e044:	1c05      	adds	r5, r0, #0
1000e046:	1c14      	adds	r4, r2, #0
1000e048:	4798      	blx	r3
1000e04a:	2301      	movs	r3, #1
1000e04c:	2807      	cmp	r0, #7
1000e04e:	d80d      	bhi.n	1000e06c <at_ble_send_slave_sec_request+0x30>
1000e050:	3311      	adds	r3, #17
1000e052:	4358      	muls	r0, r3
1000e054:	4b07      	ldr	r3, [pc, #28]	; (1000e074 <at_ble_send_slave_sec_request+0x38>)
1000e056:	5cc2      	ldrb	r2, [r0, r3]
1000e058:	23e0      	movs	r3, #224	; 0xe0
1000e05a:	2a01      	cmp	r2, #1
1000e05c:	d106      	bne.n	1000e06c <at_ble_send_slave_sec_request+0x30>
1000e05e:	00b1      	lsls	r1, r6, #2
1000e060:	430c      	orrs	r4, r1
1000e062:	4b05      	ldr	r3, [pc, #20]	; (1000e078 <at_ble_send_slave_sec_request+0x3c>)
1000e064:	b2e1      	uxtb	r1, r4
1000e066:	1c28      	adds	r0, r5, #0
1000e068:	4798      	blx	r3
1000e06a:	2300      	movs	r3, #0
1000e06c:	1c18      	adds	r0, r3, #0
1000e06e:	bd70      	pop	{r4, r5, r6, pc}
1000e070:	1000e391 	.word	0x1000e391
1000e074:	10015b52 	.word	0x10015b52
1000e078:	1000e9cd 	.word	0x1000e9cd

1000e07c <at_ble_encryption_start>:
1000e07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e07e:	23cf      	movs	r3, #207	; 0xcf
1000e080:	2900      	cmp	r1, #0
1000e082:	d02b      	beq.n	1000e0dc <at_ble_encryption_start+0x60>
1000e084:	2a05      	cmp	r2, #5
1000e086:	d829      	bhi.n	1000e0dc <at_ble_encryption_start+0x60>
1000e088:	2701      	movs	r7, #1
1000e08a:	1c3d      	adds	r5, r7, #0
1000e08c:	2433      	movs	r4, #51	; 0x33
1000e08e:	4095      	lsls	r5, r2
1000e090:	4225      	tst	r5, r4
1000e092:	d023      	beq.n	1000e0dc <at_ble_encryption_start+0x60>
1000e094:	7e8c      	ldrb	r4, [r1, #26]
1000e096:	3c07      	subs	r4, #7
1000e098:	2c09      	cmp	r4, #9
1000e09a:	d81f      	bhi.n	1000e0dc <at_ble_encryption_start+0x60>
1000e09c:	4b10      	ldr	r3, [pc, #64]	; (1000e0e0 <at_ble_encryption_start+0x64>)
1000e09e:	1c0c      	adds	r4, r1, #0
1000e0a0:	2100      	movs	r1, #0
1000e0a2:	1c15      	adds	r5, r2, #0
1000e0a4:	1c06      	adds	r6, r0, #0
1000e0a6:	4798      	blx	r3
1000e0a8:	1c3b      	adds	r3, r7, #0
1000e0aa:	2807      	cmp	r0, #7
1000e0ac:	d816      	bhi.n	1000e0dc <at_ble_encryption_start+0x60>
1000e0ae:	2312      	movs	r3, #18
1000e0b0:	4358      	muls	r0, r3
1000e0b2:	4b0c      	ldr	r3, [pc, #48]	; (1000e0e4 <at_ble_encryption_start+0x68>)
1000e0b4:	5cc7      	ldrb	r7, [r0, r3]
1000e0b6:	23e0      	movs	r3, #224	; 0xe0
1000e0b8:	2f00      	cmp	r7, #0
1000e0ba:	d10f      	bne.n	1000e0dc <at_ble_encryption_start+0x60>
1000e0bc:	1c21      	adds	r1, r4, #0
1000e0be:	221c      	movs	r2, #28
1000e0c0:	4b09      	ldr	r3, [pc, #36]	; (1000e0e8 <at_ble_encryption_start+0x6c>)
1000e0c2:	480a      	ldr	r0, [pc, #40]	; (1000e0ec <at_ble_encryption_start+0x70>)
1000e0c4:	4798      	blx	r3
1000e0c6:	1c23      	adds	r3, r4, #0
1000e0c8:	7ea1      	ldrb	r1, [r4, #26]
1000e0ca:	8a22      	ldrh	r2, [r4, #16]
1000e0cc:	3312      	adds	r3, #18
1000e0ce:	9100      	str	r1, [sp, #0]
1000e0d0:	9501      	str	r5, [sp, #4]
1000e0d2:	1c21      	adds	r1, r4, #0
1000e0d4:	1c30      	adds	r0, r6, #0
1000e0d6:	4c06      	ldr	r4, [pc, #24]	; (1000e0f0 <at_ble_encryption_start+0x74>)
1000e0d8:	47a0      	blx	r4
1000e0da:	1c3b      	adds	r3, r7, #0
1000e0dc:	1c18      	adds	r0, r3, #0
1000e0de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e0e0:	1000e391 	.word	0x1000e391
1000e0e4:	10015b52 	.word	0x10015b52
1000e0e8:	1001159b 	.word	0x1001159b
1000e0ec:	10015c60 	.word	0x10015c60
1000e0f0:	1000ea0d 	.word	0x1000ea0d

1000e0f4 <at_ble_encryption_request_reply>:
1000e0f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e0f6:	24cf      	movs	r4, #207	; 0xcf
1000e0f8:	2b00      	cmp	r3, #0
1000e0fa:	d011      	beq.n	1000e120 <at_ble_encryption_request_reply+0x2c>
1000e0fc:	2a00      	cmp	r2, #0
1000e0fe:	d00a      	beq.n	1000e116 <at_ble_encryption_request_reply+0x22>
1000e100:	2905      	cmp	r1, #5
1000e102:	d80d      	bhi.n	1000e120 <at_ble_encryption_request_reply+0x2c>
1000e104:	2501      	movs	r5, #1
1000e106:	2633      	movs	r6, #51	; 0x33
1000e108:	408d      	lsls	r5, r1
1000e10a:	4235      	tst	r5, r6
1000e10c:	d008      	beq.n	1000e120 <at_ble_encryption_request_reply+0x2c>
1000e10e:	7e9d      	ldrb	r5, [r3, #26]
1000e110:	3d07      	subs	r5, #7
1000e112:	2d09      	cmp	r5, #9
1000e114:	d804      	bhi.n	1000e120 <at_ble_encryption_request_reply+0x2c>
1000e116:	7e9c      	ldrb	r4, [r3, #26]
1000e118:	9400      	str	r4, [sp, #0]
1000e11a:	4c02      	ldr	r4, [pc, #8]	; (1000e124 <at_ble_encryption_request_reply+0x30>)
1000e11c:	47a0      	blx	r4
1000e11e:	2400      	movs	r4, #0
1000e120:	1c20      	adds	r0, r4, #0
1000e122:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e124:	1000eac9 	.word	0x1000eac9

1000e128 <rx_callback>:
1000e128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e12a:	8883      	ldrh	r3, [r0, #4]
1000e12c:	1c01      	adds	r1, r0, #0
1000e12e:	9301      	str	r3, [sp, #4]
1000e130:	88c5      	ldrh	r5, [r0, #6]
1000e132:	8806      	ldrh	r6, [r0, #0]
1000e134:	2d00      	cmp	r5, #0
1000e136:	d10f      	bne.n	1000e158 <rx_callback+0x30>
1000e138:	1c19      	adds	r1, r3, #0
1000e13a:	1c30      	adds	r0, r6, #0
1000e13c:	4b19      	ldr	r3, [pc, #100]	; (1000e1a4 <rx_callback+0x7c>)
1000e13e:	1c2a      	adds	r2, r5, #0
1000e140:	4798      	blx	r3
1000e142:	1e03      	subs	r3, r0, #0
1000e144:	d105      	bne.n	1000e152 <rx_callback+0x2a>
1000e146:	1c30      	adds	r0, r6, #0
1000e148:	9901      	ldr	r1, [sp, #4]
1000e14a:	1c1a      	adds	r2, r3, #0
1000e14c:	4c16      	ldr	r4, [pc, #88]	; (1000e1a8 <rx_callback+0x80>)
1000e14e:	47a0      	blx	r4
1000e150:	e027      	b.n	1000e1a2 <rx_callback+0x7a>
1000e152:	4b16      	ldr	r3, [pc, #88]	; (1000e1ac <rx_callback+0x84>)
1000e154:	4798      	blx	r3
1000e156:	e024      	b.n	1000e1a2 <rx_callback+0x7a>
1000e158:	4c15      	ldr	r4, [pc, #84]	; (1000e1b0 <rx_callback+0x88>)
1000e15a:	4a16      	ldr	r2, [pc, #88]	; (1000e1b4 <rx_callback+0x8c>)
1000e15c:	6823      	ldr	r3, [r4, #0]
1000e15e:	6812      	ldr	r2, [r2, #0]
1000e160:	18eb      	adds	r3, r5, r3
1000e162:	4293      	cmp	r3, r2
1000e164:	d901      	bls.n	1000e16a <rx_callback+0x42>
1000e166:	2300      	movs	r3, #0
1000e168:	6023      	str	r3, [r4, #0]
1000e16a:	4f13      	ldr	r7, [pc, #76]	; (1000e1b8 <rx_callback+0x90>)
1000e16c:	6822      	ldr	r2, [r4, #0]
1000e16e:	683b      	ldr	r3, [r7, #0]
1000e170:	3108      	adds	r1, #8
1000e172:	1898      	adds	r0, r3, r2
1000e174:	1c2a      	adds	r2, r5, #0
1000e176:	4b11      	ldr	r3, [pc, #68]	; (1000e1bc <rx_callback+0x94>)
1000e178:	4798      	blx	r3
1000e17a:	683b      	ldr	r3, [r7, #0]
1000e17c:	6822      	ldr	r2, [r4, #0]
1000e17e:	1c30      	adds	r0, r6, #0
1000e180:	189a      	adds	r2, r3, r2
1000e182:	9901      	ldr	r1, [sp, #4]
1000e184:	4b07      	ldr	r3, [pc, #28]	; (1000e1a4 <rx_callback+0x7c>)
1000e186:	4798      	blx	r3
1000e188:	2800      	cmp	r0, #0
1000e18a:	d1e2      	bne.n	1000e152 <rx_callback+0x2a>
1000e18c:	6823      	ldr	r3, [r4, #0]
1000e18e:	683a      	ldr	r2, [r7, #0]
1000e190:	1c30      	adds	r0, r6, #0
1000e192:	18d2      	adds	r2, r2, r3
1000e194:	9901      	ldr	r1, [sp, #4]
1000e196:	1c2b      	adds	r3, r5, #0
1000e198:	4e03      	ldr	r6, [pc, #12]	; (1000e1a8 <rx_callback+0x80>)
1000e19a:	47b0      	blx	r6
1000e19c:	6823      	ldr	r3, [r4, #0]
1000e19e:	18ed      	adds	r5, r5, r3
1000e1a0:	6025      	str	r5, [r4, #0]
1000e1a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e1a4:	1000d015 	.word	0x1000d015
1000e1a8:	1000cf8d 	.word	0x1000cf8d
1000e1ac:	1000b5e5 	.word	0x1000b5e5
1000e1b0:	10015cbc 	.word	0x10015cbc
1000e1b4:	10014e28 	.word	0x10014e28
1000e1b8:	10014e24 	.word	0x10014e24
1000e1bc:	1001159b 	.word	0x1001159b

1000e1c0 <interface_send>:
1000e1c0:	b508      	push	{r3, lr}
1000e1c2:	4b02      	ldr	r3, [pc, #8]	; (1000e1cc <interface_send+0xc>)
1000e1c4:	4798      	blx	r3
1000e1c6:	2000      	movs	r0, #0
1000e1c8:	bd08      	pop	{r3, pc}
1000e1ca:	46c0      	nop			; (mov r8, r8)
1000e1cc:	1000b2dd 	.word	0x1000b2dd

1000e1d0 <interface_init>:
1000e1d0:	2280      	movs	r2, #128	; 0x80
1000e1d2:	b510      	push	{r4, lr}
1000e1d4:	2100      	movs	r1, #0
1000e1d6:	1c04      	adds	r4, r0, #0
1000e1d8:	0092      	lsls	r2, r2, #2
1000e1da:	4b08      	ldr	r3, [pc, #32]	; (1000e1fc <interface_init+0x2c>)
1000e1dc:	4808      	ldr	r0, [pc, #32]	; (1000e200 <interface_init+0x30>)
1000e1de:	4798      	blx	r3
1000e1e0:	2200      	movs	r2, #0
1000e1e2:	4b08      	ldr	r3, [pc, #32]	; (1000e204 <interface_init+0x34>)
1000e1e4:	601a      	str	r2, [r3, #0]
1000e1e6:	4a08      	ldr	r2, [pc, #32]	; (1000e208 <interface_init+0x38>)
1000e1e8:	4b08      	ldr	r3, [pc, #32]	; (1000e20c <interface_init+0x3c>)
1000e1ea:	601a      	str	r2, [r3, #0]
1000e1ec:	4b08      	ldr	r3, [pc, #32]	; (1000e210 <interface_init+0x40>)
1000e1ee:	6922      	ldr	r2, [r4, #16]
1000e1f0:	601a      	str	r2, [r3, #0]
1000e1f2:	6962      	ldr	r2, [r4, #20]
1000e1f4:	4b07      	ldr	r3, [pc, #28]	; (1000e214 <interface_init+0x44>)
1000e1f6:	601a      	str	r2, [r3, #0]
1000e1f8:	bd10      	pop	{r4, pc}
1000e1fa:	46c0      	nop			; (mov r8, r8)
1000e1fc:	100115ad 	.word	0x100115ad
1000e200:	10015ec0 	.word	0x10015ec0
1000e204:	10015cbc 	.word	0x10015cbc
1000e208:	10015cc0 	.word	0x10015cc0
1000e20c:	1001385c 	.word	0x1001385c
1000e210:	10014e24 	.word	0x10014e24
1000e214:	10014e28 	.word	0x10014e28

1000e218 <platform_cmd_cmpl_signal>:
1000e218:	2201      	movs	r2, #1
1000e21a:	4b01      	ldr	r3, [pc, #4]	; (1000e220 <platform_cmd_cmpl_signal+0x8>)
1000e21c:	601a      	str	r2, [r3, #0]
1000e21e:	4770      	bx	lr
1000e220:	10014e2c 	.word	0x10014e2c

1000e224 <platform_cmd_cmpl_wait>:
1000e224:	b510      	push	{r4, lr}
1000e226:	1c04      	adds	r4, r0, #0
1000e228:	4b07      	ldr	r3, [pc, #28]	; (1000e248 <platform_cmd_cmpl_wait+0x24>)
1000e22a:	681a      	ldr	r2, [r3, #0]
1000e22c:	2a01      	cmp	r2, #1
1000e22e:	d003      	beq.n	1000e238 <platform_cmd_cmpl_wait+0x14>
1000e230:	4b06      	ldr	r3, [pc, #24]	; (1000e24c <platform_cmd_cmpl_wait+0x28>)
1000e232:	2000      	movs	r0, #0
1000e234:	4798      	blx	r3
1000e236:	e7f7      	b.n	1000e228 <platform_cmd_cmpl_wait+0x4>
1000e238:	6819      	ldr	r1, [r3, #0]
1000e23a:	2901      	cmp	r1, #1
1000e23c:	d102      	bne.n	1000e244 <platform_cmd_cmpl_wait+0x20>
1000e23e:	2200      	movs	r2, #0
1000e240:	601a      	str	r2, [r3, #0]
1000e242:	e000      	b.n	1000e246 <platform_cmd_cmpl_wait+0x22>
1000e244:	7022      	strb	r2, [r4, #0]
1000e246:	bd10      	pop	{r4, pc}
1000e248:	10014e2c 	.word	0x10014e2c
1000e24c:	1000b36d 	.word	0x1000b36d

1000e250 <start_timer>:
1000e250:	4770      	bx	lr

1000e252 <stop_timer>:
1000e252:	4770      	bx	lr

1000e254 <dbg_le_set_bd_addr_req_handler>:
1000e254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e256:	466b      	mov	r3, sp
1000e258:	1dde      	adds	r6, r3, #7
1000e25a:	2300      	movs	r3, #0
1000e25c:	7033      	strb	r3, [r6, #0]
1000e25e:	230f      	movs	r3, #15
1000e260:	4c13      	ldr	r4, [pc, #76]	; (1000e2b0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e262:	2703      	movs	r7, #3
1000e264:	7023      	strb	r3, [r4, #0]
1000e266:	2300      	movs	r3, #0
1000e268:	70e3      	strb	r3, [r4, #3]
1000e26a:	4b12      	ldr	r3, [pc, #72]	; (1000e2b4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000e26c:	1c01      	adds	r1, r0, #0
1000e26e:	881a      	ldrh	r2, [r3, #0]
1000e270:	881b      	ldrh	r3, [r3, #0]
1000e272:	7122      	strb	r2, [r4, #4]
1000e274:	0a1b      	lsrs	r3, r3, #8
1000e276:	2206      	movs	r2, #6
1000e278:	7163      	strb	r3, [r4, #5]
1000e27a:	480f      	ldr	r0, [pc, #60]	; (1000e2b8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000e27c:	4b0f      	ldr	r3, [pc, #60]	; (1000e2bc <dbg_le_set_bd_addr_req_handler+0x68>)
1000e27e:	7067      	strb	r7, [r4, #1]
1000e280:	70a7      	strb	r7, [r4, #2]
1000e282:	4798      	blx	r3
1000e284:	4d0e      	ldr	r5, [pc, #56]	; (1000e2c0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e286:	4b0f      	ldr	r3, [pc, #60]	; (1000e2c4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000e288:	210e      	movs	r1, #14
1000e28a:	802b      	strh	r3, [r5, #0]
1000e28c:	2306      	movs	r3, #6
1000e28e:	71a3      	strb	r3, [r4, #6]
1000e290:	2300      	movs	r3, #0
1000e292:	1c20      	adds	r0, r4, #0
1000e294:	71e3      	strb	r3, [r4, #7]
1000e296:	4b0c      	ldr	r3, [pc, #48]	; (1000e2c8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000e298:	80af      	strh	r7, [r5, #4]
1000e29a:	4798      	blx	r3
1000e29c:	1c30      	adds	r0, r6, #0
1000e29e:	4b0b      	ldr	r3, [pc, #44]	; (1000e2cc <dbg_le_set_bd_addr_req_handler+0x78>)
1000e2a0:	4798      	blx	r3
1000e2a2:	7833      	ldrb	r3, [r6, #0]
1000e2a4:	20e2      	movs	r0, #226	; 0xe2
1000e2a6:	2b00      	cmp	r3, #0
1000e2a8:	d101      	bne.n	1000e2ae <dbg_le_set_bd_addr_req_handler+0x5a>
1000e2aa:	68ab      	ldr	r3, [r5, #8]
1000e2ac:	7818      	ldrb	r0, [r3, #0]
1000e2ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e2b0:	10015ec0 	.word	0x10015ec0
1000e2b4:	10015b50 	.word	0x10015b50
1000e2b8:	10015ec8 	.word	0x10015ec8
1000e2bc:	1001159b 	.word	0x1001159b
1000e2c0:	10015b44 	.word	0x10015b44
1000e2c4:	00000329 	.word	0x00000329
1000e2c8:	1000e1c1 	.word	0x1000e1c1
1000e2cc:	1000e225 	.word	0x1000e225

1000e2d0 <gapc_get_dev_info_cfm.constprop.1>:
1000e2d0:	b538      	push	{r3, r4, r5, lr}
1000e2d2:	230b      	movs	r3, #11
1000e2d4:	4c27      	ldr	r4, [pc, #156]	; (1000e374 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e2d6:	7023      	strb	r3, [r4, #0]
1000e2d8:	3303      	adds	r3, #3
1000e2da:	7063      	strb	r3, [r4, #1]
1000e2dc:	3329      	adds	r3, #41	; 0x29
1000e2de:	70a3      	strb	r3, [r4, #2]
1000e2e0:	4b25      	ldr	r3, [pc, #148]	; (1000e378 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e2e2:	70e1      	strb	r1, [r4, #3]
1000e2e4:	881a      	ldrh	r2, [r3, #0]
1000e2e6:	881b      	ldrh	r3, [r3, #0]
1000e2e8:	7122      	strb	r2, [r4, #4]
1000e2ea:	0a1b      	lsrs	r3, r3, #8
1000e2ec:	7163      	strb	r3, [r4, #5]
1000e2ee:	2300      	movs	r3, #0
1000e2f0:	7220      	strb	r0, [r4, #8]
1000e2f2:	7263      	strb	r3, [r4, #9]
1000e2f4:	2801      	cmp	r0, #1
1000e2f6:	d02b      	beq.n	1000e350 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e2f8:	4298      	cmp	r0, r3
1000e2fa:	d01b      	beq.n	1000e334 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e2fc:	2802      	cmp	r0, #2
1000e2fe:	d12f      	bne.n	1000e360 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e300:	4b1e      	ldr	r3, [pc, #120]	; (1000e37c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e302:	2112      	movs	r1, #18
1000e304:	1c1a      	adds	r2, r3, #0
1000e306:	32ce      	adds	r2, #206	; 0xce
1000e308:	8812      	ldrh	r2, [r2, #0]
1000e30a:	72a2      	strb	r2, [r4, #10]
1000e30c:	0a12      	lsrs	r2, r2, #8
1000e30e:	72e2      	strb	r2, [r4, #11]
1000e310:	1c1a      	adds	r2, r3, #0
1000e312:	32d0      	adds	r2, #208	; 0xd0
1000e314:	8812      	ldrh	r2, [r2, #0]
1000e316:	7322      	strb	r2, [r4, #12]
1000e318:	0a12      	lsrs	r2, r2, #8
1000e31a:	7362      	strb	r2, [r4, #13]
1000e31c:	1c1a      	adds	r2, r3, #0
1000e31e:	32d2      	adds	r2, #210	; 0xd2
1000e320:	8812      	ldrh	r2, [r2, #0]
1000e322:	33d4      	adds	r3, #212	; 0xd4
1000e324:	73a2      	strb	r2, [r4, #14]
1000e326:	0a12      	lsrs	r2, r2, #8
1000e328:	73e2      	strb	r2, [r4, #15]
1000e32a:	881b      	ldrh	r3, [r3, #0]
1000e32c:	7423      	strb	r3, [r4, #16]
1000e32e:	0a1b      	lsrs	r3, r3, #8
1000e330:	7463      	strb	r3, [r4, #17]
1000e332:	e016      	b.n	1000e362 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e334:	4b11      	ldr	r3, [pc, #68]	; (1000e37c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e336:	4912      	ldr	r1, [pc, #72]	; (1000e380 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e338:	33aa      	adds	r3, #170	; 0xaa
1000e33a:	881d      	ldrh	r5, [r3, #0]
1000e33c:	4811      	ldr	r0, [pc, #68]	; (1000e384 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e33e:	0a2b      	lsrs	r3, r5, #8
1000e340:	72a5      	strb	r5, [r4, #10]
1000e342:	72e3      	strb	r3, [r4, #11]
1000e344:	1c2a      	adds	r2, r5, #0
1000e346:	4b10      	ldr	r3, [pc, #64]	; (1000e388 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e348:	350c      	adds	r5, #12
1000e34a:	4798      	blx	r3
1000e34c:	b2a9      	uxth	r1, r5
1000e34e:	e008      	b.n	1000e362 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e350:	4b0a      	ldr	r3, [pc, #40]	; (1000e37c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e352:	210c      	movs	r1, #12
1000e354:	33cc      	adds	r3, #204	; 0xcc
1000e356:	881b      	ldrh	r3, [r3, #0]
1000e358:	72a3      	strb	r3, [r4, #10]
1000e35a:	0a1b      	lsrs	r3, r3, #8
1000e35c:	72e3      	strb	r3, [r4, #11]
1000e35e:	e000      	b.n	1000e362 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e360:	210a      	movs	r1, #10
1000e362:	1c0b      	adds	r3, r1, #0
1000e364:	3b08      	subs	r3, #8
1000e366:	71a3      	strb	r3, [r4, #6]
1000e368:	121b      	asrs	r3, r3, #8
1000e36a:	71e3      	strb	r3, [r4, #7]
1000e36c:	1c20      	adds	r0, r4, #0
1000e36e:	4b07      	ldr	r3, [pc, #28]	; (1000e38c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e370:	4798      	blx	r3
1000e372:	bd38      	pop	{r3, r4, r5, pc}
1000e374:	10015ec0 	.word	0x10015ec0
1000e378:	10015b50 	.word	0x10015b50
1000e37c:	10015be2 	.word	0x10015be2
1000e380:	10015c8e 	.word	0x10015c8e
1000e384:	10015ecc 	.word	0x10015ecc
1000e388:	1001159b 	.word	0x1001159b
1000e38c:	1000e1c1 	.word	0x1000e1c1

1000e390 <check_ConnData_idx_role>:
1000e390:	4b0c      	ldr	r3, [pc, #48]	; (1000e3c4 <check_ConnData_idx_role+0x34>)
1000e392:	b570      	push	{r4, r5, r6, lr}
1000e394:	1c04      	adds	r4, r0, #0
1000e396:	2008      	movs	r0, #8
1000e398:	429c      	cmp	r4, r3
1000e39a:	d011      	beq.n	1000e3c0 <check_ConnData_idx_role+0x30>
1000e39c:	2300      	movs	r3, #0
1000e39e:	2212      	movs	r2, #18
1000e3a0:	435a      	muls	r2, r3
1000e3a2:	4d09      	ldr	r5, [pc, #36]	; (1000e3c8 <check_ConnData_idx_role+0x38>)
1000e3a4:	b2d8      	uxtb	r0, r3
1000e3a6:	1956      	adds	r6, r2, r5
1000e3a8:	8976      	ldrh	r6, [r6, #10]
1000e3aa:	42a6      	cmp	r6, r4
1000e3ac:	d104      	bne.n	1000e3b8 <check_ConnData_idx_role+0x28>
1000e3ae:	2900      	cmp	r1, #0
1000e3b0:	d006      	beq.n	1000e3c0 <check_ConnData_idx_role+0x30>
1000e3b2:	5d53      	ldrb	r3, [r2, r5]
1000e3b4:	700b      	strb	r3, [r1, #0]
1000e3b6:	e003      	b.n	1000e3c0 <check_ConnData_idx_role+0x30>
1000e3b8:	3301      	adds	r3, #1
1000e3ba:	2b08      	cmp	r3, #8
1000e3bc:	d1ef      	bne.n	1000e39e <check_ConnData_idx_role+0xe>
1000e3be:	1c18      	adds	r0, r3, #0
1000e3c0:	bd70      	pop	{r4, r5, r6, pc}
1000e3c2:	46c0      	nop			; (mov r8, r8)
1000e3c4:	0000ffff 	.word	0x0000ffff
1000e3c8:	10015b52 	.word	0x10015b52

1000e3cc <check_ConnData_emptyEntry>:
1000e3cc:	2300      	movs	r3, #0
1000e3ce:	2212      	movs	r2, #18
1000e3d0:	435a      	muls	r2, r3
1000e3d2:	4906      	ldr	r1, [pc, #24]	; (1000e3ec <check_ConnData_emptyEntry+0x20>)
1000e3d4:	b2d8      	uxtb	r0, r3
1000e3d6:	1852      	adds	r2, r2, r1
1000e3d8:	8951      	ldrh	r1, [r2, #10]
1000e3da:	4a05      	ldr	r2, [pc, #20]	; (1000e3f0 <check_ConnData_emptyEntry+0x24>)
1000e3dc:	4291      	cmp	r1, r2
1000e3de:	d003      	beq.n	1000e3e8 <check_ConnData_emptyEntry+0x1c>
1000e3e0:	3301      	adds	r3, #1
1000e3e2:	2b08      	cmp	r3, #8
1000e3e4:	d1f3      	bne.n	1000e3ce <check_ConnData_emptyEntry+0x2>
1000e3e6:	1c18      	adds	r0, r3, #0
1000e3e8:	4770      	bx	lr
1000e3ea:	46c0      	nop			; (mov r8, r8)
1000e3ec:	10015b52 	.word	0x10015b52
1000e3f0:	0000ffff 	.word	0x0000ffff

1000e3f4 <gapc_cmp_evt>:
1000e3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e3f6:	780b      	ldrb	r3, [r1, #0]
1000e3f8:	1c05      	adds	r5, r0, #0
1000e3fa:	1e58      	subs	r0, r3, #1
1000e3fc:	784e      	ldrb	r6, [r1, #1]
1000e3fe:	280f      	cmp	r0, #15
1000e400:	d85a      	bhi.n	1000e4b8 <gapc_cmp_evt+0xc4>
1000e402:	1c14      	adds	r4, r2, #0
1000e404:	f001 fa04 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000e408:	5858440a 	.word	0x5858440a
1000e40c:	4b584444 	.word	0x4b584444
1000e410:	0825122d 	.word	0x0825122d
1000e414:	3e395858 	.word	0x3e395858
1000e418:	203b      	movs	r0, #59	; 0x3b
1000e41a:	e04e      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e41c:	203b      	movs	r0, #59	; 0x3b
1000e41e:	2e00      	cmp	r6, #0
1000e420:	d04b      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e422:	0a2d      	lsrs	r5, r5, #8
1000e424:	8015      	strh	r5, [r2, #0]
1000e426:	7096      	strb	r6, [r2, #2]
1000e428:	3835      	subs	r0, #53	; 0x35
1000e42a:	e046      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e42c:	466b      	mov	r3, sp
1000e42e:	1ddf      	adds	r7, r3, #7
1000e430:	2301      	movs	r3, #1
1000e432:	0a2d      	lsrs	r5, r5, #8
1000e434:	703b      	strb	r3, [r7, #0]
1000e436:	1c28      	adds	r0, r5, #0
1000e438:	1c39      	adds	r1, r7, #0
1000e43a:	4b20      	ldr	r3, [pc, #128]	; (1000e4bc <gapc_cmp_evt+0xc8>)
1000e43c:	4798      	blx	r3
1000e43e:	2807      	cmp	r0, #7
1000e440:	d803      	bhi.n	1000e44a <gapc_cmp_evt+0x56>
1000e442:	783b      	ldrb	r3, [r7, #0]
1000e444:	203b      	movs	r0, #59	; 0x3b
1000e446:	2b00      	cmp	r3, #0
1000e448:	d037      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e44a:	8065      	strh	r5, [r4, #2]
1000e44c:	7126      	strb	r6, [r4, #4]
1000e44e:	2009      	movs	r0, #9
1000e450:	e033      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e452:	203b      	movs	r0, #59	; 0x3b
1000e454:	2e00      	cmp	r6, #0
1000e456:	d030      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e458:	0a2d      	lsrs	r5, r5, #8
1000e45a:	8015      	strh	r5, [r2, #0]
1000e45c:	7096      	strb	r6, [r2, #2]
1000e45e:	382d      	subs	r0, #45	; 0x2d
1000e460:	e02b      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e462:	203b      	movs	r0, #59	; 0x3b
1000e464:	2e00      	cmp	r6, #0
1000e466:	d028      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e468:	2300      	movs	r3, #0
1000e46a:	0a2d      	lsrs	r5, r5, #8
1000e46c:	8015      	strh	r5, [r2, #0]
1000e46e:	7096      	strb	r6, [r2, #2]
1000e470:	8093      	strh	r3, [r2, #4]
1000e472:	80d3      	strh	r3, [r2, #6]
1000e474:	8113      	strh	r3, [r2, #8]
1000e476:	3834      	subs	r0, #52	; 0x34
1000e478:	e01f      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e47a:	203b      	movs	r0, #59	; 0x3b
1000e47c:	2e00      	cmp	r6, #0
1000e47e:	d01c      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e480:	7216      	strb	r6, [r2, #8]
1000e482:	e003      	b.n	1000e48c <gapc_cmp_evt+0x98>
1000e484:	203b      	movs	r0, #59	; 0x3b
1000e486:	2e00      	cmp	r6, #0
1000e488:	d017      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e48a:	7116      	strb	r6, [r2, #4]
1000e48c:	3812      	subs	r0, #18
1000e48e:	e014      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e490:	203b      	movs	r0, #59	; 0x3b
1000e492:	2e00      	cmp	r6, #0
1000e494:	d011      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e496:	7093      	strb	r3, [r2, #2]
1000e498:	70d6      	strb	r6, [r2, #3]
1000e49a:	382a      	subs	r0, #42	; 0x2a
1000e49c:	e00d      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e49e:	203b      	movs	r0, #59	; 0x3b
1000e4a0:	2e00      	cmp	r6, #0
1000e4a2:	d00a      	beq.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e4a4:	0a2d      	lsrs	r5, r5, #8
1000e4a6:	7016      	strb	r6, [r2, #0]
1000e4a8:	8055      	strh	r5, [r2, #2]
1000e4aa:	1d10      	adds	r0, r2, #4
1000e4ac:	2100      	movs	r1, #0
1000e4ae:	2205      	movs	r2, #5
1000e4b0:	4b03      	ldr	r3, [pc, #12]	; (1000e4c0 <gapc_cmp_evt+0xcc>)
1000e4b2:	4798      	blx	r3
1000e4b4:	2012      	movs	r0, #18
1000e4b6:	e000      	b.n	1000e4ba <gapc_cmp_evt+0xc6>
1000e4b8:	2000      	movs	r0, #0
1000e4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e4bc:	1000e391 	.word	0x1000e391
1000e4c0:	100115ad 	.word	0x100115ad

1000e4c4 <gapc_connection_cfm_handler>:
1000e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4c6:	b085      	sub	sp, #20
1000e4c8:	1c1d      	adds	r5, r3, #0
1000e4ca:	ab0a      	add	r3, sp, #40	; 0x28
1000e4cc:	781b      	ldrb	r3, [r3, #0]
1000e4ce:	9201      	str	r2, [sp, #4]
1000e4d0:	9302      	str	r3, [sp, #8]
1000e4d2:	ab0b      	add	r3, sp, #44	; 0x2c
1000e4d4:	781b      	ldrb	r3, [r3, #0]
1000e4d6:	1c07      	adds	r7, r0, #0
1000e4d8:	9303      	str	r3, [sp, #12]
1000e4da:	ab0c      	add	r3, sp, #48	; 0x30
1000e4dc:	881a      	ldrh	r2, [r3, #0]
1000e4de:	2302      	movs	r3, #2
1000e4e0:	1c0e      	adds	r6, r1, #0
1000e4e2:	4c23      	ldr	r4, [pc, #140]	; (1000e570 <gapc_connection_cfm_handler+0xac>)
1000e4e4:	1c39      	adds	r1, r7, #0
1000e4e6:	7023      	strb	r3, [r4, #0]
1000e4e8:	330c      	adds	r3, #12
1000e4ea:	7063      	strb	r3, [r4, #1]
1000e4ec:	70a3      	strb	r3, [r4, #2]
1000e4ee:	4b21      	ldr	r3, [pc, #132]	; (1000e574 <gapc_connection_cfm_handler+0xb0>)
1000e4f0:	70e2      	strb	r2, [r4, #3]
1000e4f2:	881a      	ldrh	r2, [r3, #0]
1000e4f4:	881b      	ldrh	r3, [r3, #0]
1000e4f6:	7122      	strb	r2, [r4, #4]
1000e4f8:	0a1b      	lsrs	r3, r3, #8
1000e4fa:	4f1f      	ldr	r7, [pc, #124]	; (1000e578 <gapc_connection_cfm_handler+0xb4>)
1000e4fc:	2210      	movs	r2, #16
1000e4fe:	481f      	ldr	r0, [pc, #124]	; (1000e57c <gapc_connection_cfm_handler+0xb8>)
1000e500:	7163      	strb	r3, [r4, #5]
1000e502:	47b8      	blx	r7
1000e504:	0a33      	lsrs	r3, r6, #8
1000e506:	7626      	strb	r6, [r4, #24]
1000e508:	7663      	strb	r3, [r4, #25]
1000e50a:	9901      	ldr	r1, [sp, #4]
1000e50c:	0c33      	lsrs	r3, r6, #16
1000e50e:	2210      	movs	r2, #16
1000e510:	0e36      	lsrs	r6, r6, #24
1000e512:	481b      	ldr	r0, [pc, #108]	; (1000e580 <gapc_connection_cfm_handler+0xbc>)
1000e514:	76a3      	strb	r3, [r4, #26]
1000e516:	76e6      	strb	r6, [r4, #27]
1000e518:	47b8      	blx	r7
1000e51a:	1c23      	adds	r3, r4, #0
1000e51c:	332c      	adds	r3, #44	; 0x2c
1000e51e:	701d      	strb	r5, [r3, #0]
1000e520:	1c23      	adds	r3, r4, #0
1000e522:	0a2a      	lsrs	r2, r5, #8
1000e524:	332d      	adds	r3, #45	; 0x2d
1000e526:	701a      	strb	r2, [r3, #0]
1000e528:	1c23      	adds	r3, r4, #0
1000e52a:	0c2a      	lsrs	r2, r5, #16
1000e52c:	332e      	adds	r3, #46	; 0x2e
1000e52e:	701a      	strb	r2, [r3, #0]
1000e530:	1c23      	adds	r3, r4, #0
1000e532:	0e2d      	lsrs	r5, r5, #24
1000e534:	332f      	adds	r3, #47	; 0x2f
1000e536:	466a      	mov	r2, sp
1000e538:	701d      	strb	r5, [r3, #0]
1000e53a:	1c23      	adds	r3, r4, #0
1000e53c:	7a12      	ldrb	r2, [r2, #8]
1000e53e:	3330      	adds	r3, #48	; 0x30
1000e540:	701a      	strb	r2, [r3, #0]
1000e542:	1c23      	adds	r3, r4, #0
1000e544:	2500      	movs	r5, #0
1000e546:	3331      	adds	r3, #49	; 0x31
1000e548:	466a      	mov	r2, sp
1000e54a:	701d      	strb	r5, [r3, #0]
1000e54c:	1c23      	adds	r3, r4, #0
1000e54e:	7b12      	ldrb	r2, [r2, #12]
1000e550:	3332      	adds	r3, #50	; 0x32
1000e552:	701a      	strb	r2, [r3, #0]
1000e554:	1c23      	adds	r3, r4, #0
1000e556:	3333      	adds	r3, #51	; 0x33
1000e558:	701d      	strb	r5, [r3, #0]
1000e55a:	232c      	movs	r3, #44	; 0x2c
1000e55c:	1c20      	adds	r0, r4, #0
1000e55e:	71a3      	strb	r3, [r4, #6]
1000e560:	2134      	movs	r1, #52	; 0x34
1000e562:	4b08      	ldr	r3, [pc, #32]	; (1000e584 <gapc_connection_cfm_handler+0xc0>)
1000e564:	71e5      	strb	r5, [r4, #7]
1000e566:	4798      	blx	r3
1000e568:	1c28      	adds	r0, r5, #0
1000e56a:	b005      	add	sp, #20
1000e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e56e:	46c0      	nop			; (mov r8, r8)
1000e570:	10015ec0 	.word	0x10015ec0
1000e574:	10015b50 	.word	0x10015b50
1000e578:	1001159b 	.word	0x1001159b
1000e57c:	10015ec8 	.word	0x10015ec8
1000e580:	10015edc 	.word	0x10015edc
1000e584:	1000e1c1 	.word	0x1000e1c1

1000e588 <gapc_con_req_ind>:
1000e588:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e58a:	7845      	ldrb	r5, [r0, #1]
1000e58c:	7803      	ldrb	r3, [r0, #0]
1000e58e:	4c30      	ldr	r4, [pc, #192]	; (1000e650 <gapc_con_req_ind+0xc8>)
1000e590:	022d      	lsls	r5, r5, #8
1000e592:	431d      	orrs	r5, r3
1000e594:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e596:	78c3      	ldrb	r3, [r0, #3]
1000e598:	7882      	ldrb	r2, [r0, #2]
1000e59a:	b08b      	sub	sp, #44	; 0x2c
1000e59c:	021b      	lsls	r3, r3, #8
1000e59e:	431a      	orrs	r2, r3
1000e5a0:	466b      	mov	r3, sp
1000e5a2:	9205      	str	r2, [sp, #20]
1000e5a4:	8a9b      	ldrh	r3, [r3, #20]
1000e5a6:	2120      	movs	r1, #32
1000e5a8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e5aa:	7943      	ldrb	r3, [r0, #5]
1000e5ac:	7902      	ldrb	r2, [r0, #4]
1000e5ae:	021b      	lsls	r3, r3, #8
1000e5b0:	431a      	orrs	r2, r3
1000e5b2:	466b      	mov	r3, sp
1000e5b4:	9206      	str	r2, [sp, #24]
1000e5b6:	8b1b      	ldrh	r3, [r3, #24]
1000e5b8:	1c06      	adds	r6, r0, #0
1000e5ba:	8623      	strh	r3, [r4, #48]	; 0x30
1000e5bc:	79c3      	ldrb	r3, [r0, #7]
1000e5be:	7982      	ldrb	r2, [r0, #6]
1000e5c0:	021b      	lsls	r3, r3, #8
1000e5c2:	431a      	orrs	r2, r3
1000e5c4:	466b      	mov	r3, sp
1000e5c6:	9207      	str	r2, [sp, #28]
1000e5c8:	466a      	mov	r2, sp
1000e5ca:	8b9b      	ldrh	r3, [r3, #28]
1000e5cc:	1852      	adds	r2, r2, r1
1000e5ce:	8663      	strh	r3, [r4, #50]	; 0x32
1000e5d0:	7a43      	ldrb	r3, [r0, #9]
1000e5d2:	1c01      	adds	r1, r0, #0
1000e5d4:	9308      	str	r3, [sp, #32]
1000e5d6:	1c23      	adds	r3, r4, #0
1000e5d8:	7812      	ldrb	r2, [r2, #0]
1000e5da:	3377      	adds	r3, #119	; 0x77
1000e5dc:	3478      	adds	r4, #120	; 0x78
1000e5de:	701a      	strb	r2, [r3, #0]
1000e5e0:	310a      	adds	r1, #10
1000e5e2:	2206      	movs	r2, #6
1000e5e4:	4b1b      	ldr	r3, [pc, #108]	; (1000e654 <gapc_con_req_ind+0xcc>)
1000e5e6:	1c20      	adds	r0, r4, #0
1000e5e8:	4798      	blx	r3
1000e5ea:	7c33      	ldrb	r3, [r6, #16]
1000e5ec:	9309      	str	r3, [sp, #36]	; 0x24
1000e5ee:	4b1a      	ldr	r3, [pc, #104]	; (1000e658 <gapc_con_req_ind+0xd0>)
1000e5f0:	4798      	blx	r3
1000e5f2:	4e1a      	ldr	r6, [pc, #104]	; (1000e65c <gapc_con_req_ind+0xd4>)
1000e5f4:	1e07      	subs	r7, r0, #0
1000e5f6:	2f07      	cmp	r7, #7
1000e5f8:	d81b      	bhi.n	1000e632 <gapc_con_req_ind+0xaa>
1000e5fa:	2312      	movs	r3, #18
1000e5fc:	4343      	muls	r3, r0
1000e5fe:	18f0      	adds	r0, r6, r3
1000e600:	8145      	strh	r5, [r0, #10]
1000e602:	4669      	mov	r1, sp
1000e604:	2524      	movs	r5, #36	; 0x24
1000e606:	1949      	adds	r1, r1, r5
1000e608:	7809      	ldrb	r1, [r1, #0]
1000e60a:	2206      	movs	r2, #6
1000e60c:	54f1      	strb	r1, [r6, r3]
1000e60e:	2120      	movs	r1, #32
1000e610:	466b      	mov	r3, sp
1000e612:	185b      	adds	r3, r3, r1
1000e614:	781b      	ldrb	r3, [r3, #0]
1000e616:	1c21      	adds	r1, r4, #0
1000e618:	7043      	strb	r3, [r0, #1]
1000e61a:	466b      	mov	r3, sp
1000e61c:	8a9b      	ldrh	r3, [r3, #20]
1000e61e:	3002      	adds	r0, #2
1000e620:	8143      	strh	r3, [r0, #10]
1000e622:	466b      	mov	r3, sp
1000e624:	8b1b      	ldrh	r3, [r3, #24]
1000e626:	8183      	strh	r3, [r0, #12]
1000e628:	466b      	mov	r3, sp
1000e62a:	8b9b      	ldrh	r3, [r3, #28]
1000e62c:	81c3      	strh	r3, [r0, #14]
1000e62e:	4b09      	ldr	r3, [pc, #36]	; (1000e654 <gapc_con_req_ind+0xcc>)
1000e630:	4798      	blx	r3
1000e632:	2112      	movs	r1, #18
1000e634:	2300      	movs	r3, #0
1000e636:	434f      	muls	r7, r1
1000e638:	9300      	str	r3, [sp, #0]
1000e63a:	9301      	str	r3, [sp, #4]
1000e63c:	19f6      	adds	r6, r6, r7
1000e63e:	8971      	ldrh	r1, [r6, #10]
1000e640:	4a07      	ldr	r2, [pc, #28]	; (1000e660 <gapc_con_req_ind+0xd8>)
1000e642:	9102      	str	r1, [sp, #8]
1000e644:	1c10      	adds	r0, r2, #0
1000e646:	1c19      	adds	r1, r3, #0
1000e648:	4c06      	ldr	r4, [pc, #24]	; (1000e664 <gapc_con_req_ind+0xdc>)
1000e64a:	47a0      	blx	r4
1000e64c:	b00b      	add	sp, #44	; 0x2c
1000e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e650:	10015be2 	.word	0x10015be2
1000e654:	1001159b 	.word	0x1001159b
1000e658:	1000e3cd 	.word	0x1000e3cd
1000e65c:	10015b52 	.word	0x10015b52
1000e660:	10014e30 	.word	0x10014e30
1000e664:	1000e4c5 	.word	0x1000e4c5

1000e668 <gapc_disconnect_cmd_handler>:
1000e668:	2204      	movs	r2, #4
1000e66a:	b510      	push	{r4, lr}
1000e66c:	4b0c      	ldr	r3, [pc, #48]	; (1000e6a0 <gapc_disconnect_cmd_handler+0x38>)
1000e66e:	2400      	movs	r4, #0
1000e670:	701a      	strb	r2, [r3, #0]
1000e672:	320a      	adds	r2, #10
1000e674:	705a      	strb	r2, [r3, #1]
1000e676:	709a      	strb	r2, [r3, #2]
1000e678:	4a0a      	ldr	r2, [pc, #40]	; (1000e6a4 <gapc_disconnect_cmd_handler+0x3c>)
1000e67a:	70d9      	strb	r1, [r3, #3]
1000e67c:	8811      	ldrh	r1, [r2, #0]
1000e67e:	8812      	ldrh	r2, [r2, #0]
1000e680:	7119      	strb	r1, [r3, #4]
1000e682:	0a12      	lsrs	r2, r2, #8
1000e684:	715a      	strb	r2, [r3, #5]
1000e686:	2201      	movs	r2, #1
1000e688:	721a      	strb	r2, [r3, #8]
1000e68a:	1892      	adds	r2, r2, r2
1000e68c:	7258      	strb	r0, [r3, #9]
1000e68e:	719a      	strb	r2, [r3, #6]
1000e690:	71dc      	strb	r4, [r3, #7]
1000e692:	1c18      	adds	r0, r3, #0
1000e694:	210a      	movs	r1, #10
1000e696:	4b04      	ldr	r3, [pc, #16]	; (1000e6a8 <gapc_disconnect_cmd_handler+0x40>)
1000e698:	4798      	blx	r3
1000e69a:	1c20      	adds	r0, r4, #0
1000e69c:	bd10      	pop	{r4, pc}
1000e69e:	46c0      	nop			; (mov r8, r8)
1000e6a0:	10015ec0 	.word	0x10015ec0
1000e6a4:	10015b50 	.word	0x10015b50
1000e6a8:	1000e1c1 	.word	0x1000e1c1

1000e6ac <gapc_disconnect_ind>:
1000e6ac:	1c02      	adds	r2, r0, #0
1000e6ae:	b508      	push	{r3, lr}
1000e6b0:	7843      	ldrb	r3, [r0, #1]
1000e6b2:	7800      	ldrb	r0, [r0, #0]
1000e6b4:	021b      	lsls	r3, r3, #8
1000e6b6:	4318      	orrs	r0, r3
1000e6b8:	8008      	strh	r0, [r1, #0]
1000e6ba:	7893      	ldrb	r3, [r2, #2]
1000e6bc:	708b      	strb	r3, [r1, #2]
1000e6be:	2100      	movs	r1, #0
1000e6c0:	4b05      	ldr	r3, [pc, #20]	; (1000e6d8 <gapc_disconnect_ind+0x2c>)
1000e6c2:	4798      	blx	r3
1000e6c4:	2807      	cmp	r0, #7
1000e6c6:	d806      	bhi.n	1000e6d6 <gapc_disconnect_ind+0x2a>
1000e6c8:	2312      	movs	r3, #18
1000e6ca:	4358      	muls	r0, r3
1000e6cc:	4b03      	ldr	r3, [pc, #12]	; (1000e6dc <gapc_disconnect_ind+0x30>)
1000e6ce:	1818      	adds	r0, r3, r0
1000e6d0:	2301      	movs	r3, #1
1000e6d2:	425b      	negs	r3, r3
1000e6d4:	8143      	strh	r3, [r0, #10]
1000e6d6:	bd08      	pop	{r3, pc}
1000e6d8:	1000e391 	.word	0x1000e391
1000e6dc:	10015b52 	.word	0x10015b52

1000e6e0 <gapc_bond_cmd_handler>:
1000e6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e6e2:	9300      	str	r3, [sp, #0]
1000e6e4:	2312      	movs	r3, #18
1000e6e6:	1c04      	adds	r4, r0, #0
1000e6e8:	a808      	add	r0, sp, #32
1000e6ea:	7807      	ldrb	r7, [r0, #0]
1000e6ec:	a809      	add	r0, sp, #36	; 0x24
1000e6ee:	7806      	ldrb	r6, [r0, #0]
1000e6f0:	a80a      	add	r0, sp, #40	; 0x28
1000e6f2:	7805      	ldrb	r5, [r0, #0]
1000e6f4:	a80b      	add	r0, sp, #44	; 0x2c
1000e6f6:	7800      	ldrb	r0, [r0, #0]
1000e6f8:	9001      	str	r0, [sp, #4]
1000e6fa:	4810      	ldr	r0, [pc, #64]	; (1000e73c <gapc_bond_cmd_handler+0x5c>)
1000e6fc:	7003      	strb	r3, [r0, #0]
1000e6fe:	230e      	movs	r3, #14
1000e700:	70c4      	strb	r4, [r0, #3]
1000e702:	4c0f      	ldr	r4, [pc, #60]	; (1000e740 <gapc_bond_cmd_handler+0x60>)
1000e704:	7043      	strb	r3, [r0, #1]
1000e706:	7083      	strb	r3, [r0, #2]
1000e708:	8823      	ldrh	r3, [r4, #0]
1000e70a:	8824      	ldrh	r4, [r4, #0]
1000e70c:	7103      	strb	r3, [r0, #4]
1000e70e:	466b      	mov	r3, sp
1000e710:	781b      	ldrb	r3, [r3, #0]
1000e712:	0a24      	lsrs	r4, r4, #8
1000e714:	72c3      	strb	r3, [r0, #11]
1000e716:	466b      	mov	r3, sp
1000e718:	791b      	ldrb	r3, [r3, #4]
1000e71a:	7144      	strb	r4, [r0, #5]
1000e71c:	73c3      	strb	r3, [r0, #15]
1000e71e:	2308      	movs	r3, #8
1000e720:	7183      	strb	r3, [r0, #6]
1000e722:	2300      	movs	r3, #0
1000e724:	240a      	movs	r4, #10
1000e726:	7241      	strb	r1, [r0, #9]
1000e728:	71c3      	strb	r3, [r0, #7]
1000e72a:	2110      	movs	r1, #16
1000e72c:	4b05      	ldr	r3, [pc, #20]	; (1000e744 <gapc_bond_cmd_handler+0x64>)
1000e72e:	7307      	strb	r7, [r0, #12]
1000e730:	7346      	strb	r6, [r0, #13]
1000e732:	7385      	strb	r5, [r0, #14]
1000e734:	7204      	strb	r4, [r0, #8]
1000e736:	7282      	strb	r2, [r0, #10]
1000e738:	4798      	blx	r3
1000e73a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e73c:	10015ec0 	.word	0x10015ec0
1000e740:	10015b50 	.word	0x10015b50
1000e744:	1000e1c1 	.word	0x1000e1c1

1000e748 <gapc_bond_ind>:
1000e748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e74a:	780e      	ldrb	r6, [r1, #0]
1000e74c:	1c03      	adds	r3, r0, #0
1000e74e:	1eb0      	subs	r0, r6, #2
1000e750:	2805      	cmp	r0, #5
1000e752:	d85d      	bhi.n	1000e810 <gapc_bond_ind+0xc8>
1000e754:	1c15      	adds	r5, r2, #0
1000e756:	1c0c      	adds	r4, r1, #0
1000e758:	f001 f85a 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000e75c:	2f5a030d 	.word	0x2f5a030d
1000e760:	4740      	.short	0x4740
1000e762:	2009      	movs	r0, #9
1000e764:	2a00      	cmp	r2, #0
1000e766:	d054      	beq.n	1000e812 <gapc_bond_ind+0xca>
1000e768:	0a1b      	lsrs	r3, r3, #8
1000e76a:	8053      	strh	r3, [r2, #2]
1000e76c:	788b      	ldrb	r3, [r1, #2]
1000e76e:	4829      	ldr	r0, [pc, #164]	; (1000e814 <gapc_bond_ind+0xcc>)
1000e770:	7113      	strb	r3, [r2, #4]
1000e772:	2100      	movs	r1, #0
1000e774:	e01c      	b.n	1000e7b0 <gapc_bond_ind+0x68>
1000e776:	2009      	movs	r0, #9
1000e778:	2a00      	cmp	r2, #0
1000e77a:	d04a      	beq.n	1000e812 <gapc_bond_ind+0xca>
1000e77c:	4c25      	ldr	r4, [pc, #148]	; (1000e814 <gapc_bond_ind+0xcc>)
1000e77e:	0a1b      	lsrs	r3, r3, #8
1000e780:	8053      	strh	r3, [r2, #2]
1000e782:	788b      	ldrb	r3, [r1, #2]
1000e784:	2700      	movs	r7, #0
1000e786:	1c10      	adds	r0, r2, #0
1000e788:	1c21      	adds	r1, r4, #0
1000e78a:	7013      	strb	r3, [r2, #0]
1000e78c:	4e22      	ldr	r6, [pc, #136]	; (1000e818 <gapc_bond_ind+0xd0>)
1000e78e:	7117      	strb	r7, [r2, #4]
1000e790:	312e      	adds	r1, #46	; 0x2e
1000e792:	2217      	movs	r2, #23
1000e794:	3032      	adds	r0, #50	; 0x32
1000e796:	47b0      	blx	r6
1000e798:	1c28      	adds	r0, r5, #0
1000e79a:	1c21      	adds	r1, r4, #0
1000e79c:	2210      	movs	r2, #16
1000e79e:	311e      	adds	r1, #30
1000e7a0:	3022      	adds	r0, #34	; 0x22
1000e7a2:	47b0      	blx	r6
1000e7a4:	1ca1      	adds	r1, r4, #2
1000e7a6:	1da8      	adds	r0, r5, #6
1000e7a8:	221c      	movs	r2, #28
1000e7aa:	47b0      	blx	r6
1000e7ac:	1c20      	adds	r0, r4, #0
1000e7ae:	1c39      	adds	r1, r7, #0
1000e7b0:	2246      	movs	r2, #70	; 0x46
1000e7b2:	4b1a      	ldr	r3, [pc, #104]	; (1000e81c <gapc_bond_ind+0xd4>)
1000e7b4:	4798      	blx	r3
1000e7b6:	2009      	movs	r0, #9
1000e7b8:	e02b      	b.n	1000e812 <gapc_bond_ind+0xca>
1000e7ba:	4d16      	ldr	r5, [pc, #88]	; (1000e814 <gapc_bond_ind+0xcc>)
1000e7bc:	3102      	adds	r1, #2
1000e7be:	1c28      	adds	r0, r5, #0
1000e7c0:	2210      	movs	r2, #16
1000e7c2:	4e15      	ldr	r6, [pc, #84]	; (1000e818 <gapc_bond_ind+0xd0>)
1000e7c4:	302e      	adds	r0, #46	; 0x2e
1000e7c6:	47b0      	blx	r6
1000e7c8:	1c28      	adds	r0, r5, #0
1000e7ca:	1c21      	adds	r1, r4, #0
1000e7cc:	303f      	adds	r0, #63	; 0x3f
1000e7ce:	3112      	adds	r1, #18
1000e7d0:	2206      	movs	r2, #6
1000e7d2:	47b0      	blx	r6
1000e7d4:	7e23      	ldrb	r3, [r4, #24]
1000e7d6:	353e      	adds	r5, #62	; 0x3e
1000e7d8:	702b      	strb	r3, [r5, #0]
1000e7da:	e019      	b.n	1000e810 <gapc_bond_ind+0xc8>
1000e7dc:	480d      	ldr	r0, [pc, #52]	; (1000e814 <gapc_bond_ind+0xcc>)
1000e7de:	3102      	adds	r1, #2
1000e7e0:	2210      	movs	r2, #16
1000e7e2:	4b0d      	ldr	r3, [pc, #52]	; (1000e818 <gapc_bond_ind+0xd0>)
1000e7e4:	301e      	adds	r0, #30
1000e7e6:	4798      	blx	r3
1000e7e8:	e012      	b.n	1000e810 <gapc_bond_ind+0xc8>
1000e7ea:	4d0a      	ldr	r5, [pc, #40]	; (1000e814 <gapc_bond_ind+0xcc>)
1000e7ec:	3102      	adds	r1, #2
1000e7ee:	2210      	movs	r2, #16
1000e7f0:	4e09      	ldr	r6, [pc, #36]	; (1000e818 <gapc_bond_ind+0xd0>)
1000e7f2:	1ca8      	adds	r0, r5, #2
1000e7f4:	47b0      	blx	r6
1000e7f6:	1c28      	adds	r0, r5, #0
1000e7f8:	1c21      	adds	r1, r4, #0
1000e7fa:	7ce3      	ldrb	r3, [r4, #19]
1000e7fc:	7ca2      	ldrb	r2, [r4, #18]
1000e7fe:	021b      	lsls	r3, r3, #8
1000e800:	4313      	orrs	r3, r2
1000e802:	3014      	adds	r0, #20
1000e804:	3114      	adds	r1, #20
1000e806:	2208      	movs	r2, #8
1000e808:	826b      	strh	r3, [r5, #18]
1000e80a:	47b0      	blx	r6
1000e80c:	7f23      	ldrb	r3, [r4, #28]
1000e80e:	772b      	strb	r3, [r5, #28]
1000e810:	2000      	movs	r0, #0
1000e812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e814:	10014e60 	.word	0x10014e60
1000e818:	1001159b 	.word	0x1001159b
1000e81c:	100115ad 	.word	0x100115ad

1000e820 <gapc_bond_req_ind>:
1000e820:	b570      	push	{r4, r5, r6, lr}
1000e822:	780c      	ldrb	r4, [r1, #0]
1000e824:	1c03      	adds	r3, r0, #0
1000e826:	7849      	ldrb	r1, [r1, #1]
1000e828:	2c07      	cmp	r4, #7
1000e82a:	d85c      	bhi.n	1000e8e6 <gapc_bond_req_ind+0xc6>
1000e82c:	1c20      	adds	r0, r4, #0
1000e82e:	f000 ffef 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000e832:	5a04      	.short	0x5a04
1000e834:	5a0b5a5a 	.word	0x5a0b5a5a
1000e838:	1f1f      	.short	0x1f1f
1000e83a:	200a      	movs	r0, #10
1000e83c:	2a00      	cmp	r2, #0
1000e83e:	d053      	beq.n	1000e8e8 <gapc_bond_req_ind+0xc8>
1000e840:	0a1b      	lsrs	r3, r3, #8
1000e842:	8013      	strh	r3, [r2, #0]
1000e844:	7091      	strb	r1, [r2, #2]
1000e846:	e04f      	b.n	1000e8e8 <gapc_bond_req_ind+0xc8>
1000e848:	2a00      	cmp	r2, #0
1000e84a:	d00b      	beq.n	1000e864 <gapc_bond_req_ind+0x44>
1000e84c:	0a1b      	lsrs	r3, r3, #8
1000e84e:	8013      	strh	r3, [r2, #0]
1000e850:	2900      	cmp	r1, #0
1000e852:	d102      	bne.n	1000e85a <gapc_bond_req_ind+0x3a>
1000e854:	2301      	movs	r3, #1
1000e856:	7093      	strb	r3, [r2, #2]
1000e858:	e004      	b.n	1000e864 <gapc_bond_req_ind+0x44>
1000e85a:	2300      	movs	r3, #0
1000e85c:	7093      	strb	r3, [r2, #2]
1000e85e:	2902      	cmp	r1, #2
1000e860:	d102      	bne.n	1000e868 <gapc_bond_req_ind+0x48>
1000e862:	70d3      	strb	r3, [r2, #3]
1000e864:	200c      	movs	r0, #12
1000e866:	e03f      	b.n	1000e8e8 <gapc_bond_req_ind+0xc8>
1000e868:	2901      	cmp	r1, #1
1000e86a:	d1fb      	bne.n	1000e864 <gapc_bond_req_ind+0x44>
1000e86c:	70d1      	strb	r1, [r2, #3]
1000e86e:	e7f9      	b.n	1000e864 <gapc_bond_req_ind+0x44>
1000e870:	2214      	movs	r2, #20
1000e872:	481e      	ldr	r0, [pc, #120]	; (1000e8ec <gapc_bond_req_ind+0xcc>)
1000e874:	0a1b      	lsrs	r3, r3, #8
1000e876:	70c3      	strb	r3, [r0, #3]
1000e878:	4b1d      	ldr	r3, [pc, #116]	; (1000e8f0 <gapc_bond_req_ind+0xd0>)
1000e87a:	7002      	strb	r2, [r0, #0]
1000e87c:	3a06      	subs	r2, #6
1000e87e:	7042      	strb	r2, [r0, #1]
1000e880:	7082      	strb	r2, [r0, #2]
1000e882:	881a      	ldrh	r2, [r3, #0]
1000e884:	881b      	ldrh	r3, [r3, #0]
1000e886:	4e1b      	ldr	r6, [pc, #108]	; (1000e8f4 <gapc_bond_req_ind+0xd4>)
1000e888:	0a1b      	lsrs	r3, r3, #8
1000e88a:	7143      	strb	r3, [r0, #5]
1000e88c:	2301      	movs	r3, #1
1000e88e:	7102      	strb	r2, [r0, #4]
1000e890:	7204      	strb	r4, [r0, #8]
1000e892:	7243      	strb	r3, [r0, #9]
1000e894:	1c05      	adds	r5, r0, #0
1000e896:	1c31      	adds	r1, r6, #0
1000e898:	300a      	adds	r0, #10
1000e89a:	2c07      	cmp	r4, #7
1000e89c:	d116      	bne.n	1000e8cc <gapc_bond_req_ind+0xac>
1000e89e:	317e      	adds	r1, #126	; 0x7e
1000e8a0:	2210      	movs	r2, #16
1000e8a2:	4c15      	ldr	r4, [pc, #84]	; (1000e8f8 <gapc_bond_req_ind+0xd8>)
1000e8a4:	47a0      	blx	r4
1000e8a6:	1c33      	adds	r3, r6, #0
1000e8a8:	1c31      	adds	r1, r6, #0
1000e8aa:	1c28      	adds	r0, r5, #0
1000e8ac:	338e      	adds	r3, #142	; 0x8e
1000e8ae:	881b      	ldrh	r3, [r3, #0]
1000e8b0:	3190      	adds	r1, #144	; 0x90
1000e8b2:	76ab      	strb	r3, [r5, #26]
1000e8b4:	2208      	movs	r2, #8
1000e8b6:	0a1b      	lsrs	r3, r3, #8
1000e8b8:	301c      	adds	r0, #28
1000e8ba:	76eb      	strb	r3, [r5, #27]
1000e8bc:	47a0      	blx	r4
1000e8be:	1c31      	adds	r1, r6, #0
1000e8c0:	3198      	adds	r1, #152	; 0x98
1000e8c2:	780a      	ldrb	r2, [r1, #0]
1000e8c4:	1d6b      	adds	r3, r5, #5
1000e8c6:	77da      	strb	r2, [r3, #31]
1000e8c8:	2125      	movs	r1, #37	; 0x25
1000e8ca:	e004      	b.n	1000e8d6 <gapc_bond_req_ind+0xb6>
1000e8cc:	319a      	adds	r1, #154	; 0x9a
1000e8ce:	2210      	movs	r2, #16
1000e8d0:	4b09      	ldr	r3, [pc, #36]	; (1000e8f8 <gapc_bond_req_ind+0xd8>)
1000e8d2:	4798      	blx	r3
1000e8d4:	211a      	movs	r1, #26
1000e8d6:	1c0b      	adds	r3, r1, #0
1000e8d8:	2400      	movs	r4, #0
1000e8da:	3b08      	subs	r3, #8
1000e8dc:	71ab      	strb	r3, [r5, #6]
1000e8de:	1c28      	adds	r0, r5, #0
1000e8e0:	4b06      	ldr	r3, [pc, #24]	; (1000e8fc <gapc_bond_req_ind+0xdc>)
1000e8e2:	71ec      	strb	r4, [r5, #7]
1000e8e4:	4798      	blx	r3
1000e8e6:	2000      	movs	r0, #0
1000e8e8:	bd70      	pop	{r4, r5, r6, pc}
1000e8ea:	46c0      	nop			; (mov r8, r8)
1000e8ec:	10015ec0 	.word	0x10015ec0
1000e8f0:	10015b50 	.word	0x10015b50
1000e8f4:	10015be2 	.word	0x10015be2
1000e8f8:	1001159b 	.word	0x1001159b
1000e8fc:	1000e1c1 	.word	0x1000e1c1

1000e900 <gapc_bond_cfm_handler_pair_resp>:
1000e900:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e902:	b085      	sub	sp, #20
1000e904:	1c07      	adds	r7, r0, #0
1000e906:	a80a      	add	r0, sp, #40	; 0x28
1000e908:	7806      	ldrb	r6, [r0, #0]
1000e90a:	a80b      	add	r0, sp, #44	; 0x2c
1000e90c:	7805      	ldrb	r5, [r0, #0]
1000e90e:	a80c      	add	r0, sp, #48	; 0x30
1000e910:	7800      	ldrb	r0, [r0, #0]
1000e912:	2414      	movs	r4, #20
1000e914:	9002      	str	r0, [sp, #8]
1000e916:	a80d      	add	r0, sp, #52	; 0x34
1000e918:	7800      	ldrb	r0, [r0, #0]
1000e91a:	9301      	str	r3, [sp, #4]
1000e91c:	9003      	str	r0, [sp, #12]
1000e91e:	a80e      	add	r0, sp, #56	; 0x38
1000e920:	8800      	ldrh	r0, [r0, #0]
1000e922:	4684      	mov	ip, r0
1000e924:	4812      	ldr	r0, [pc, #72]	; (1000e970 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e926:	7004      	strb	r4, [r0, #0]
1000e928:	3c06      	subs	r4, #6
1000e92a:	7044      	strb	r4, [r0, #1]
1000e92c:	7084      	strb	r4, [r0, #2]
1000e92e:	4664      	mov	r4, ip
1000e930:	70c4      	strb	r4, [r0, #3]
1000e932:	4c10      	ldr	r4, [pc, #64]	; (1000e974 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e934:	7247      	strb	r7, [r0, #9]
1000e936:	8823      	ldrh	r3, [r4, #0]
1000e938:	8824      	ldrh	r4, [r4, #0]
1000e93a:	7103      	strb	r3, [r0, #4]
1000e93c:	466b      	mov	r3, sp
1000e93e:	791b      	ldrb	r3, [r3, #4]
1000e940:	0a24      	lsrs	r4, r4, #8
1000e942:	7303      	strb	r3, [r0, #12]
1000e944:	466b      	mov	r3, sp
1000e946:	7a1b      	ldrb	r3, [r3, #8]
1000e948:	7144      	strb	r4, [r0, #5]
1000e94a:	73c3      	strb	r3, [r0, #15]
1000e94c:	466b      	mov	r3, sp
1000e94e:	7b1b      	ldrb	r3, [r3, #12]
1000e950:	2401      	movs	r4, #1
1000e952:	7403      	strb	r3, [r0, #16]
1000e954:	2309      	movs	r3, #9
1000e956:	7183      	strb	r3, [r0, #6]
1000e958:	2300      	movs	r3, #0
1000e95a:	7204      	strb	r4, [r0, #8]
1000e95c:	7281      	strb	r1, [r0, #10]
1000e95e:	72c2      	strb	r2, [r0, #11]
1000e960:	7346      	strb	r6, [r0, #13]
1000e962:	7385      	strb	r5, [r0, #14]
1000e964:	71c3      	strb	r3, [r0, #7]
1000e966:	2111      	movs	r1, #17
1000e968:	4b03      	ldr	r3, [pc, #12]	; (1000e978 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e96a:	4798      	blx	r3
1000e96c:	b005      	add	sp, #20
1000e96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e970:	10015ec0 	.word	0x10015ec0
1000e974:	10015b50 	.word	0x10015b50
1000e978:	1000e1c1 	.word	0x1000e1c1

1000e97c <gapc_bond_cfm_handler_key_exch>:
1000e97c:	b538      	push	{r3, r4, r5, lr}
1000e97e:	2514      	movs	r5, #20
1000e980:	4c0d      	ldr	r4, [pc, #52]	; (1000e9b8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e982:	70e3      	strb	r3, [r4, #3]
1000e984:	4b0d      	ldr	r3, [pc, #52]	; (1000e9bc <gapc_bond_cfm_handler_key_exch+0x40>)
1000e986:	7025      	strb	r5, [r4, #0]
1000e988:	3d06      	subs	r5, #6
1000e98a:	7065      	strb	r5, [r4, #1]
1000e98c:	70a5      	strb	r5, [r4, #2]
1000e98e:	881d      	ldrh	r5, [r3, #0]
1000e990:	881b      	ldrh	r3, [r3, #0]
1000e992:	7220      	strb	r0, [r4, #8]
1000e994:	0a1b      	lsrs	r3, r3, #8
1000e996:	7163      	strb	r3, [r4, #5]
1000e998:	7261      	strb	r1, [r4, #9]
1000e99a:	4b09      	ldr	r3, [pc, #36]	; (1000e9c0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e99c:	1c11      	adds	r1, r2, #0
1000e99e:	4809      	ldr	r0, [pc, #36]	; (1000e9c4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e9a0:	2210      	movs	r2, #16
1000e9a2:	7125      	strb	r5, [r4, #4]
1000e9a4:	4798      	blx	r3
1000e9a6:	2312      	movs	r3, #18
1000e9a8:	71a3      	strb	r3, [r4, #6]
1000e9aa:	2300      	movs	r3, #0
1000e9ac:	1c20      	adds	r0, r4, #0
1000e9ae:	71e3      	strb	r3, [r4, #7]
1000e9b0:	211a      	movs	r1, #26
1000e9b2:	4b05      	ldr	r3, [pc, #20]	; (1000e9c8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e9b4:	4798      	blx	r3
1000e9b6:	bd38      	pop	{r3, r4, r5, pc}
1000e9b8:	10015ec0 	.word	0x10015ec0
1000e9bc:	10015b50 	.word	0x10015b50
1000e9c0:	1001159b 	.word	0x1001159b
1000e9c4:	10015eca 	.word	0x10015eca
1000e9c8:	1000e1c1 	.word	0x1000e1c1

1000e9cc <gapc_security_cmd_handler>:
1000e9cc:	221a      	movs	r2, #26
1000e9ce:	b508      	push	{r3, lr}
1000e9d0:	4b0b      	ldr	r3, [pc, #44]	; (1000ea00 <gapc_security_cmd_handler+0x34>)
1000e9d2:	701a      	strb	r2, [r3, #0]
1000e9d4:	3a0c      	subs	r2, #12
1000e9d6:	705a      	strb	r2, [r3, #1]
1000e9d8:	709a      	strb	r2, [r3, #2]
1000e9da:	4a0a      	ldr	r2, [pc, #40]	; (1000ea04 <gapc_security_cmd_handler+0x38>)
1000e9dc:	70d8      	strb	r0, [r3, #3]
1000e9de:	8810      	ldrh	r0, [r2, #0]
1000e9e0:	8812      	ldrh	r2, [r2, #0]
1000e9e2:	7118      	strb	r0, [r3, #4]
1000e9e4:	0a12      	lsrs	r2, r2, #8
1000e9e6:	715a      	strb	r2, [r3, #5]
1000e9e8:	220c      	movs	r2, #12
1000e9ea:	721a      	strb	r2, [r3, #8]
1000e9ec:	3a0a      	subs	r2, #10
1000e9ee:	719a      	strb	r2, [r3, #6]
1000e9f0:	2200      	movs	r2, #0
1000e9f2:	7259      	strb	r1, [r3, #9]
1000e9f4:	71da      	strb	r2, [r3, #7]
1000e9f6:	1c18      	adds	r0, r3, #0
1000e9f8:	210a      	movs	r1, #10
1000e9fa:	4b03      	ldr	r3, [pc, #12]	; (1000ea08 <gapc_security_cmd_handler+0x3c>)
1000e9fc:	4798      	blx	r3
1000e9fe:	bd08      	pop	{r3, pc}
1000ea00:	10015ec0 	.word	0x10015ec0
1000ea04:	10015b50 	.word	0x10015b50
1000ea08:	1000e1c1 	.word	0x1000e1c1

1000ea0c <gapc_encrypt_cmd_handler>:
1000ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea0e:	2500      	movs	r5, #0
1000ea10:	b089      	sub	sp, #36	; 0x24
1000ea12:	9306      	str	r3, [sp, #24]
1000ea14:	ab0e      	add	r3, sp, #56	; 0x38
1000ea16:	781b      	ldrb	r3, [r3, #0]
1000ea18:	1c17      	adds	r7, r2, #0
1000ea1a:	9307      	str	r3, [sp, #28]
1000ea1c:	ab0f      	add	r3, sp, #60	; 0x3c
1000ea1e:	781b      	ldrb	r3, [r3, #0]
1000ea20:	4a19      	ldr	r2, [pc, #100]	; (1000ea88 <gapc_encrypt_cmd_handler+0x7c>)
1000ea22:	1c06      	adds	r6, r0, #0
1000ea24:	9105      	str	r1, [sp, #20]
1000ea26:	9300      	str	r3, [sp, #0]
1000ea28:	9002      	str	r0, [sp, #8]
1000ea2a:	1c29      	adds	r1, r5, #0
1000ea2c:	1c2b      	adds	r3, r5, #0
1000ea2e:	9501      	str	r5, [sp, #4]
1000ea30:	1c10      	adds	r0, r2, #0
1000ea32:	4c16      	ldr	r4, [pc, #88]	; (1000ea8c <gapc_encrypt_cmd_handler+0x80>)
1000ea34:	47a0      	blx	r4
1000ea36:	2316      	movs	r3, #22
1000ea38:	4c15      	ldr	r4, [pc, #84]	; (1000ea90 <gapc_encrypt_cmd_handler+0x84>)
1000ea3a:	9905      	ldr	r1, [sp, #20]
1000ea3c:	7023      	strb	r3, [r4, #0]
1000ea3e:	3b08      	subs	r3, #8
1000ea40:	7063      	strb	r3, [r4, #1]
1000ea42:	70a3      	strb	r3, [r4, #2]
1000ea44:	4b13      	ldr	r3, [pc, #76]	; (1000ea94 <gapc_encrypt_cmd_handler+0x88>)
1000ea46:	70e6      	strb	r6, [r4, #3]
1000ea48:	881a      	ldrh	r2, [r3, #0]
1000ea4a:	881b      	ldrh	r3, [r3, #0]
1000ea4c:	7122      	strb	r2, [r4, #4]
1000ea4e:	0a1b      	lsrs	r3, r3, #8
1000ea50:	7163      	strb	r3, [r4, #5]
1000ea52:	230b      	movs	r3, #11
1000ea54:	4e10      	ldr	r6, [pc, #64]	; (1000ea98 <gapc_encrypt_cmd_handler+0x8c>)
1000ea56:	2210      	movs	r2, #16
1000ea58:	4810      	ldr	r0, [pc, #64]	; (1000ea9c <gapc_encrypt_cmd_handler+0x90>)
1000ea5a:	7223      	strb	r3, [r4, #8]
1000ea5c:	7265      	strb	r5, [r4, #9]
1000ea5e:	47b0      	blx	r6
1000ea60:	0a3b      	lsrs	r3, r7, #8
1000ea62:	9906      	ldr	r1, [sp, #24]
1000ea64:	2208      	movs	r2, #8
1000ea66:	480e      	ldr	r0, [pc, #56]	; (1000eaa0 <gapc_encrypt_cmd_handler+0x94>)
1000ea68:	76e3      	strb	r3, [r4, #27]
1000ea6a:	76a7      	strb	r7, [r4, #26]
1000ea6c:	47b0      	blx	r6
1000ea6e:	466a      	mov	r2, sp
1000ea70:	7f12      	ldrb	r2, [r2, #28]
1000ea72:	1d63      	adds	r3, r4, #5
1000ea74:	77da      	strb	r2, [r3, #31]
1000ea76:	231d      	movs	r3, #29
1000ea78:	1c20      	adds	r0, r4, #0
1000ea7a:	71a3      	strb	r3, [r4, #6]
1000ea7c:	2125      	movs	r1, #37	; 0x25
1000ea7e:	4b09      	ldr	r3, [pc, #36]	; (1000eaa4 <gapc_encrypt_cmd_handler+0x98>)
1000ea80:	71e5      	strb	r5, [r4, #7]
1000ea82:	4798      	blx	r3
1000ea84:	b009      	add	sp, #36	; 0x24
1000ea86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea88:	10014e40 	.word	0x10014e40
1000ea8c:	1000e4c5 	.word	0x1000e4c5
1000ea90:	10015ec0 	.word	0x10015ec0
1000ea94:	10015b50 	.word	0x10015b50
1000ea98:	1001159b 	.word	0x1001159b
1000ea9c:	10015eca 	.word	0x10015eca
1000eaa0:	10015edc 	.word	0x10015edc
1000eaa4:	1000e1c1 	.word	0x1000e1c1

1000eaa8 <gapc_encrypt_req_ind>:
1000eaa8:	b508      	push	{r3, lr}
1000eaaa:	0a00      	lsrs	r0, r0, #8
1000eaac:	8010      	strh	r0, [r2, #0]
1000eaae:	784b      	ldrb	r3, [r1, #1]
1000eab0:	7808      	ldrb	r0, [r1, #0]
1000eab2:	021b      	lsls	r3, r3, #8
1000eab4:	4303      	orrs	r3, r0
1000eab6:	8053      	strh	r3, [r2, #2]
1000eab8:	1d10      	adds	r0, r2, #4
1000eaba:	3102      	adds	r1, #2
1000eabc:	2208      	movs	r2, #8
1000eabe:	4b01      	ldr	r3, [pc, #4]	; (1000eac4 <gapc_encrypt_req_ind+0x1c>)
1000eac0:	4798      	blx	r3
1000eac2:	bd08      	pop	{r3, pc}
1000eac4:	1001159b 	.word	0x1001159b

1000eac8 <gapc_encrypt_cfm_handler>:
1000eac8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eaca:	2500      	movs	r5, #0
1000eacc:	b087      	sub	sp, #28
1000eace:	9304      	str	r3, [sp, #16]
1000ead0:	ab0c      	add	r3, sp, #48	; 0x30
1000ead2:	781b      	ldrb	r3, [r3, #0]
1000ead4:	1c17      	adds	r7, r2, #0
1000ead6:	4a15      	ldr	r2, [pc, #84]	; (1000eb2c <gapc_encrypt_cfm_handler+0x64>)
1000ead8:	1c06      	adds	r6, r0, #0
1000eada:	9305      	str	r3, [sp, #20]
1000eadc:	9100      	str	r1, [sp, #0]
1000eade:	9002      	str	r0, [sp, #8]
1000eae0:	1c29      	adds	r1, r5, #0
1000eae2:	1c2b      	adds	r3, r5, #0
1000eae4:	9501      	str	r5, [sp, #4]
1000eae6:	1c10      	adds	r0, r2, #0
1000eae8:	4c11      	ldr	r4, [pc, #68]	; (1000eb30 <gapc_encrypt_cfm_handler+0x68>)
1000eaea:	47a0      	blx	r4
1000eaec:	2318      	movs	r3, #24
1000eaee:	4c11      	ldr	r4, [pc, #68]	; (1000eb34 <gapc_encrypt_cfm_handler+0x6c>)
1000eaf0:	9904      	ldr	r1, [sp, #16]
1000eaf2:	7023      	strb	r3, [r4, #0]
1000eaf4:	3b0a      	subs	r3, #10
1000eaf6:	7063      	strb	r3, [r4, #1]
1000eaf8:	70a3      	strb	r3, [r4, #2]
1000eafa:	4b0f      	ldr	r3, [pc, #60]	; (1000eb38 <gapc_encrypt_cfm_handler+0x70>)
1000eafc:	480f      	ldr	r0, [pc, #60]	; (1000eb3c <gapc_encrypt_cfm_handler+0x74>)
1000eafe:	881a      	ldrh	r2, [r3, #0]
1000eb00:	881b      	ldrh	r3, [r3, #0]
1000eb02:	7122      	strb	r2, [r4, #4]
1000eb04:	0a1b      	lsrs	r3, r3, #8
1000eb06:	7163      	strb	r3, [r4, #5]
1000eb08:	2210      	movs	r2, #16
1000eb0a:	4b0d      	ldr	r3, [pc, #52]	; (1000eb40 <gapc_encrypt_cfm_handler+0x78>)
1000eb0c:	70e6      	strb	r6, [r4, #3]
1000eb0e:	7227      	strb	r7, [r4, #8]
1000eb10:	4798      	blx	r3
1000eb12:	466b      	mov	r3, sp
1000eb14:	7d1b      	ldrb	r3, [r3, #20]
1000eb16:	1c20      	adds	r0, r4, #0
1000eb18:	7663      	strb	r3, [r4, #25]
1000eb1a:	2312      	movs	r3, #18
1000eb1c:	211a      	movs	r1, #26
1000eb1e:	71a3      	strb	r3, [r4, #6]
1000eb20:	4b08      	ldr	r3, [pc, #32]	; (1000eb44 <gapc_encrypt_cfm_handler+0x7c>)
1000eb22:	71e5      	strb	r5, [r4, #7]
1000eb24:	4798      	blx	r3
1000eb26:	b007      	add	sp, #28
1000eb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb2a:	46c0      	nop			; (mov r8, r8)
1000eb2c:	10014e50 	.word	0x10014e50
1000eb30:	1000e4c5 	.word	0x1000e4c5
1000eb34:	10015ec0 	.word	0x10015ec0
1000eb38:	10015b50 	.word	0x10015b50
1000eb3c:	10015ec9 	.word	0x10015ec9
1000eb40:	1001159b 	.word	0x1001159b
1000eb44:	1000e1c1 	.word	0x1000e1c1

1000eb48 <gapc_encrypt_ind>:
1000eb48:	780b      	ldrb	r3, [r1, #0]
1000eb4a:	0a00      	lsrs	r0, r0, #8
1000eb4c:	70d3      	strb	r3, [r2, #3]
1000eb4e:	2300      	movs	r3, #0
1000eb50:	8010      	strh	r0, [r2, #0]
1000eb52:	7093      	strb	r3, [r2, #2]
1000eb54:	4770      	bx	lr
	...

1000eb58 <gapc_param_update_cfm_handler>:
1000eb58:	b538      	push	{r3, r4, r5, lr}
1000eb5a:	2410      	movs	r4, #16
1000eb5c:	1c05      	adds	r5, r0, #0
1000eb5e:	480e      	ldr	r0, [pc, #56]	; (1000eb98 <gapc_param_update_cfm_handler+0x40>)
1000eb60:	7004      	strb	r4, [r0, #0]
1000eb62:	3c02      	subs	r4, #2
1000eb64:	7044      	strb	r4, [r0, #1]
1000eb66:	7084      	strb	r4, [r0, #2]
1000eb68:	4c0c      	ldr	r4, [pc, #48]	; (1000eb9c <gapc_param_update_cfm_handler+0x44>)
1000eb6a:	70c5      	strb	r5, [r0, #3]
1000eb6c:	8825      	ldrh	r5, [r4, #0]
1000eb6e:	8824      	ldrh	r4, [r4, #0]
1000eb70:	72c3      	strb	r3, [r0, #11]
1000eb72:	0a1b      	lsrs	r3, r3, #8
1000eb74:	0a24      	lsrs	r4, r4, #8
1000eb76:	7303      	strb	r3, [r0, #12]
1000eb78:	2305      	movs	r3, #5
1000eb7a:	7144      	strb	r4, [r0, #5]
1000eb7c:	2400      	movs	r4, #0
1000eb7e:	7201      	strb	r1, [r0, #8]
1000eb80:	7242      	strb	r2, [r0, #9]
1000eb82:	7183      	strb	r3, [r0, #6]
1000eb84:	0a12      	lsrs	r2, r2, #8
1000eb86:	210d      	movs	r1, #13
1000eb88:	4b05      	ldr	r3, [pc, #20]	; (1000eba0 <gapc_param_update_cfm_handler+0x48>)
1000eb8a:	7105      	strb	r5, [r0, #4]
1000eb8c:	7282      	strb	r2, [r0, #10]
1000eb8e:	71c4      	strb	r4, [r0, #7]
1000eb90:	4798      	blx	r3
1000eb92:	1c20      	adds	r0, r4, #0
1000eb94:	bd38      	pop	{r3, r4, r5, pc}
1000eb96:	46c0      	nop			; (mov r8, r8)
1000eb98:	10015ec0 	.word	0x10015ec0
1000eb9c:	10015b50 	.word	0x10015b50
1000eba0:	1000e1c1 	.word	0x1000e1c1

1000eba4 <gapc_param_updated_ind>:
1000eba4:	2300      	movs	r3, #0
1000eba6:	0a00      	lsrs	r0, r0, #8
1000eba8:	8010      	strh	r0, [r2, #0]
1000ebaa:	7093      	strb	r3, [r2, #2]
1000ebac:	784b      	ldrb	r3, [r1, #1]
1000ebae:	7808      	ldrb	r0, [r1, #0]
1000ebb0:	021b      	lsls	r3, r3, #8
1000ebb2:	4303      	orrs	r3, r0
1000ebb4:	8093      	strh	r3, [r2, #4]
1000ebb6:	78cb      	ldrb	r3, [r1, #3]
1000ebb8:	7888      	ldrb	r0, [r1, #2]
1000ebba:	021b      	lsls	r3, r3, #8
1000ebbc:	4303      	orrs	r3, r0
1000ebbe:	80d3      	strh	r3, [r2, #6]
1000ebc0:	794b      	ldrb	r3, [r1, #5]
1000ebc2:	7909      	ldrb	r1, [r1, #4]
1000ebc4:	021b      	lsls	r3, r3, #8
1000ebc6:	430b      	orrs	r3, r1
1000ebc8:	2007      	movs	r0, #7
1000ebca:	8113      	strh	r3, [r2, #8]
1000ebcc:	4770      	bx	lr

1000ebce <gapc_param_updated_req_ind>:
1000ebce:	0a00      	lsrs	r0, r0, #8
1000ebd0:	8010      	strh	r0, [r2, #0]
1000ebd2:	784b      	ldrb	r3, [r1, #1]
1000ebd4:	7808      	ldrb	r0, [r1, #0]
1000ebd6:	021b      	lsls	r3, r3, #8
1000ebd8:	4303      	orrs	r3, r0
1000ebda:	8053      	strh	r3, [r2, #2]
1000ebdc:	78cb      	ldrb	r3, [r1, #3]
1000ebde:	7888      	ldrb	r0, [r1, #2]
1000ebe0:	021b      	lsls	r3, r3, #8
1000ebe2:	4303      	orrs	r3, r0
1000ebe4:	8093      	strh	r3, [r2, #4]
1000ebe6:	794b      	ldrb	r3, [r1, #5]
1000ebe8:	7908      	ldrb	r0, [r1, #4]
1000ebea:	021b      	lsls	r3, r3, #8
1000ebec:	4303      	orrs	r3, r0
1000ebee:	80d3      	strh	r3, [r2, #6]
1000ebf0:	79cb      	ldrb	r3, [r1, #7]
1000ebf2:	7989      	ldrb	r1, [r1, #6]
1000ebf4:	021b      	lsls	r3, r3, #8
1000ebf6:	430b      	orrs	r3, r1
1000ebf8:	2008      	movs	r0, #8
1000ebfa:	8113      	strh	r3, [r2, #8]
1000ebfc:	4770      	bx	lr
	...

1000ec00 <gapc_dev_info_req_ind_handler>:
1000ec00:	b508      	push	{r3, lr}
1000ec02:	1c0b      	adds	r3, r1, #0
1000ec04:	0a01      	lsrs	r1, r0, #8
1000ec06:	8011      	strh	r1, [r2, #0]
1000ec08:	7818      	ldrb	r0, [r3, #0]
1000ec0a:	7090      	strb	r0, [r2, #2]
1000ec0c:	2800      	cmp	r0, #0
1000ec0e:	d104      	bne.n	1000ec1a <gapc_dev_info_req_ind_handler+0x1a>
1000ec10:	4b03      	ldr	r3, [pc, #12]	; (1000ec20 <gapc_dev_info_req_ind_handler+0x20>)
1000ec12:	33aa      	adds	r3, #170	; 0xaa
1000ec14:	881b      	ldrh	r3, [r3, #0]
1000ec16:	2b00      	cmp	r3, #0
1000ec18:	d001      	beq.n	1000ec1e <gapc_dev_info_req_ind_handler+0x1e>
1000ec1a:	4b02      	ldr	r3, [pc, #8]	; (1000ec24 <gapc_dev_info_req_ind_handler+0x24>)
1000ec1c:	4798      	blx	r3
1000ec1e:	bd08      	pop	{r3, pc}
1000ec20:	10015be2 	.word	0x10015be2
1000ec24:	1000e2d1 	.word	0x1000e2d1

1000ec28 <gapc_sec_req_ind>:
1000ec28:	0a00      	lsrs	r0, r0, #8
1000ec2a:	8010      	strh	r0, [r2, #0]
1000ec2c:	7809      	ldrb	r1, [r1, #0]
1000ec2e:	2301      	movs	r3, #1
1000ec30:	1c08      	adds	r0, r1, #0
1000ec32:	0889      	lsrs	r1, r1, #2
1000ec34:	4018      	ands	r0, r3
1000ec36:	400b      	ands	r3, r1
1000ec38:	70d0      	strb	r0, [r2, #3]
1000ec3a:	7113      	strb	r3, [r2, #4]
1000ec3c:	4770      	bx	lr

1000ec3e <gapc_sign_counter_ind_handler>:
1000ec3e:	0a00      	lsrs	r0, r0, #8
1000ec40:	8010      	strh	r0, [r2, #0]
1000ec42:	784b      	ldrb	r3, [r1, #1]
1000ec44:	0218      	lsls	r0, r3, #8
1000ec46:	788b      	ldrb	r3, [r1, #2]
1000ec48:	041b      	lsls	r3, r3, #16
1000ec4a:	4303      	orrs	r3, r0
1000ec4c:	7808      	ldrb	r0, [r1, #0]
1000ec4e:	4303      	orrs	r3, r0
1000ec50:	78c8      	ldrb	r0, [r1, #3]
1000ec52:	0600      	lsls	r0, r0, #24
1000ec54:	4303      	orrs	r3, r0
1000ec56:	6053      	str	r3, [r2, #4]
1000ec58:	794b      	ldrb	r3, [r1, #5]
1000ec5a:	0218      	lsls	r0, r3, #8
1000ec5c:	798b      	ldrb	r3, [r1, #6]
1000ec5e:	041b      	lsls	r3, r3, #16
1000ec60:	4303      	orrs	r3, r0
1000ec62:	7908      	ldrb	r0, [r1, #4]
1000ec64:	79c9      	ldrb	r1, [r1, #7]
1000ec66:	4303      	orrs	r3, r0
1000ec68:	0609      	lsls	r1, r1, #24
1000ec6a:	430b      	orrs	r3, r1
1000ec6c:	2000      	movs	r0, #0
1000ec6e:	6093      	str	r3, [r2, #8]
1000ec70:	4770      	bx	lr
	...

1000ec74 <gapc_peer_att_info_ind_handler>:
1000ec74:	b510      	push	{r4, lr}
1000ec76:	0a00      	lsrs	r0, r0, #8
1000ec78:	8010      	strh	r0, [r2, #0]
1000ec7a:	7808      	ldrb	r0, [r1, #0]
1000ec7c:	7090      	strb	r0, [r2, #2]
1000ec7e:	788b      	ldrb	r3, [r1, #2]
1000ec80:	784c      	ldrb	r4, [r1, #1]
1000ec82:	021b      	lsls	r3, r3, #8
1000ec84:	4323      	orrs	r3, r4
1000ec86:	8093      	strh	r3, [r2, #4]
1000ec88:	2801      	cmp	r0, #1
1000ec8a:	d027      	beq.n	1000ecdc <gapc_peer_att_info_ind_handler+0x68>
1000ec8c:	2800      	cmp	r0, #0
1000ec8e:	d017      	beq.n	1000ecc0 <gapc_peer_att_info_ind_handler+0x4c>
1000ec90:	2802      	cmp	r0, #2
1000ec92:	d12a      	bne.n	1000ecea <gapc_peer_att_info_ind_handler+0x76>
1000ec94:	790b      	ldrb	r3, [r1, #4]
1000ec96:	78c8      	ldrb	r0, [r1, #3]
1000ec98:	021b      	lsls	r3, r3, #8
1000ec9a:	4303      	orrs	r3, r0
1000ec9c:	8113      	strh	r3, [r2, #8]
1000ec9e:	798b      	ldrb	r3, [r1, #6]
1000eca0:	7948      	ldrb	r0, [r1, #5]
1000eca2:	021b      	lsls	r3, r3, #8
1000eca4:	4303      	orrs	r3, r0
1000eca6:	80d3      	strh	r3, [r2, #6]
1000eca8:	7a0b      	ldrb	r3, [r1, #8]
1000ecaa:	79c8      	ldrb	r0, [r1, #7]
1000ecac:	021b      	lsls	r3, r3, #8
1000ecae:	4303      	orrs	r3, r0
1000ecb0:	8193      	strh	r3, [r2, #12]
1000ecb2:	7a8b      	ldrb	r3, [r1, #10]
1000ecb4:	7a49      	ldrb	r1, [r1, #9]
1000ecb6:	021b      	lsls	r3, r3, #8
1000ecb8:	430b      	orrs	r3, r1
1000ecba:	8153      	strh	r3, [r2, #10]
1000ecbc:	2306      	movs	r3, #6
1000ecbe:	e013      	b.n	1000ece8 <gapc_peer_att_info_ind_handler+0x74>
1000ecc0:	1c14      	adds	r4, r2, #0
1000ecc2:	1c20      	adds	r0, r4, #0
1000ecc4:	790a      	ldrb	r2, [r1, #4]
1000ecc6:	78cb      	ldrb	r3, [r1, #3]
1000ecc8:	0212      	lsls	r2, r2, #8
1000ecca:	431a      	orrs	r2, r3
1000eccc:	80e2      	strh	r2, [r4, #6]
1000ecce:	4b07      	ldr	r3, [pc, #28]	; (1000ecec <gapc_peer_att_info_ind_handler+0x78>)
1000ecd0:	3008      	adds	r0, #8
1000ecd2:	3105      	adds	r1, #5
1000ecd4:	4798      	blx	r3
1000ecd6:	2302      	movs	r3, #2
1000ecd8:	70a3      	strb	r3, [r4, #2]
1000ecda:	e006      	b.n	1000ecea <gapc_peer_att_info_ind_handler+0x76>
1000ecdc:	790b      	ldrb	r3, [r1, #4]
1000ecde:	78c9      	ldrb	r1, [r1, #3]
1000ece0:	021b      	lsls	r3, r3, #8
1000ece2:	430b      	orrs	r3, r1
1000ece4:	80d3      	strh	r3, [r2, #6]
1000ece6:	2305      	movs	r3, #5
1000ece8:	7093      	strb	r3, [r2, #2]
1000ecea:	bd10      	pop	{r4, pc}
1000ecec:	1001159b 	.word	0x1001159b

1000ecf0 <gapc_con_channel_map_ind_handler>:
1000ecf0:	b508      	push	{r3, lr}
1000ecf2:	2300      	movs	r3, #0
1000ecf4:	0a00      	lsrs	r0, r0, #8
1000ecf6:	7013      	strb	r3, [r2, #0]
1000ecf8:	8050      	strh	r0, [r2, #2]
1000ecfa:	4b02      	ldr	r3, [pc, #8]	; (1000ed04 <gapc_con_channel_map_ind_handler+0x14>)
1000ecfc:	1d10      	adds	r0, r2, #4
1000ecfe:	2205      	movs	r2, #5
1000ed00:	4798      	blx	r3
1000ed02:	bd08      	pop	{r3, pc}
1000ed04:	1001159b 	.word	0x1001159b

1000ed08 <gapc_lecb_connected>:
1000ed08:	7843      	ldrb	r3, [r0, #1]
1000ed0a:	7802      	ldrb	r2, [r0, #0]
1000ed0c:	021b      	lsls	r3, r3, #8
1000ed0e:	4313      	orrs	r3, r2
1000ed10:	800b      	strh	r3, [r1, #0]
1000ed12:	78c3      	ldrb	r3, [r0, #3]
1000ed14:	7882      	ldrb	r2, [r0, #2]
1000ed16:	021b      	lsls	r3, r3, #8
1000ed18:	4313      	orrs	r3, r2
1000ed1a:	804b      	strh	r3, [r1, #2]
1000ed1c:	7943      	ldrb	r3, [r0, #5]
1000ed1e:	7902      	ldrb	r2, [r0, #4]
1000ed20:	021b      	lsls	r3, r3, #8
1000ed22:	4313      	orrs	r3, r2
1000ed24:	808b      	strh	r3, [r1, #4]
1000ed26:	79c3      	ldrb	r3, [r0, #7]
1000ed28:	7982      	ldrb	r2, [r0, #6]
1000ed2a:	021b      	lsls	r3, r3, #8
1000ed2c:	4313      	orrs	r3, r2
1000ed2e:	80cb      	strh	r3, [r1, #6]
1000ed30:	2300      	movs	r3, #0
1000ed32:	720b      	strb	r3, [r1, #8]
1000ed34:	4770      	bx	lr

1000ed36 <gapc_lecb_disconnected>:
1000ed36:	7843      	ldrb	r3, [r0, #1]
1000ed38:	7802      	ldrb	r2, [r0, #0]
1000ed3a:	021b      	lsls	r3, r3, #8
1000ed3c:	4313      	orrs	r3, r2
1000ed3e:	800b      	strh	r3, [r1, #0]
1000ed40:	78c3      	ldrb	r3, [r0, #3]
1000ed42:	7882      	ldrb	r2, [r0, #2]
1000ed44:	021b      	lsls	r3, r3, #8
1000ed46:	4313      	orrs	r3, r2
1000ed48:	804b      	strh	r3, [r1, #2]
1000ed4a:	4770      	bx	lr

1000ed4c <gapc_lecb_connect_req_ind>:
1000ed4c:	7843      	ldrb	r3, [r0, #1]
1000ed4e:	7802      	ldrb	r2, [r0, #0]
1000ed50:	021b      	lsls	r3, r3, #8
1000ed52:	4313      	orrs	r3, r2
1000ed54:	800b      	strh	r3, [r1, #0]
1000ed56:	78c3      	ldrb	r3, [r0, #3]
1000ed58:	7882      	ldrb	r2, [r0, #2]
1000ed5a:	021b      	lsls	r3, r3, #8
1000ed5c:	4313      	orrs	r3, r2
1000ed5e:	804b      	strh	r3, [r1, #2]
1000ed60:	7943      	ldrb	r3, [r0, #5]
1000ed62:	7902      	ldrb	r2, [r0, #4]
1000ed64:	021b      	lsls	r3, r3, #8
1000ed66:	4313      	orrs	r3, r2
1000ed68:	808b      	strh	r3, [r1, #4]
1000ed6a:	79c3      	ldrb	r3, [r0, #7]
1000ed6c:	7982      	ldrb	r2, [r0, #6]
1000ed6e:	021b      	lsls	r3, r3, #8
1000ed70:	4313      	orrs	r3, r2
1000ed72:	80cb      	strh	r3, [r1, #6]
1000ed74:	4770      	bx	lr

1000ed76 <gapc_lecb_add_credit_resp_handler>:
1000ed76:	7843      	ldrb	r3, [r0, #1]
1000ed78:	7802      	ldrb	r2, [r0, #0]
1000ed7a:	021b      	lsls	r3, r3, #8
1000ed7c:	4313      	orrs	r3, r2
1000ed7e:	800b      	strh	r3, [r1, #0]
1000ed80:	78c3      	ldrb	r3, [r0, #3]
1000ed82:	7882      	ldrb	r2, [r0, #2]
1000ed84:	021b      	lsls	r3, r3, #8
1000ed86:	4313      	orrs	r3, r2
1000ed88:	804b      	strh	r3, [r1, #2]
1000ed8a:	7943      	ldrb	r3, [r0, #5]
1000ed8c:	7902      	ldrb	r2, [r0, #4]
1000ed8e:	021b      	lsls	r3, r3, #8
1000ed90:	4313      	orrs	r3, r2
1000ed92:	808b      	strh	r3, [r1, #4]
1000ed94:	4770      	bx	lr
	...

1000ed98 <gapm_reset_req_handler>:
1000ed98:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ed9a:	466b      	mov	r3, sp
1000ed9c:	4915      	ldr	r1, [pc, #84]	; (1000edf4 <gapm_reset_req_handler+0x5c>)
1000ed9e:	4816      	ldr	r0, [pc, #88]	; (1000edf8 <gapm_reset_req_handler+0x60>)
1000eda0:	880c      	ldrh	r4, [r1, #0]
1000eda2:	8809      	ldrh	r1, [r1, #0]
1000eda4:	1ddd      	adds	r5, r3, #7
1000eda6:	0a09      	lsrs	r1, r1, #8
1000eda8:	2300      	movs	r3, #0
1000edaa:	2202      	movs	r2, #2
1000edac:	7141      	strb	r1, [r0, #5]
1000edae:	26d0      	movs	r6, #208	; 0xd0
1000edb0:	2101      	movs	r1, #1
1000edb2:	7104      	strb	r4, [r0, #4]
1000edb4:	4c11      	ldr	r4, [pc, #68]	; (1000edfc <gapm_reset_req_handler+0x64>)
1000edb6:	702b      	strb	r3, [r5, #0]
1000edb8:	7002      	strb	r2, [r0, #0]
1000edba:	70c3      	strb	r3, [r0, #3]
1000edbc:	320b      	adds	r2, #11
1000edbe:	7201      	strb	r1, [r0, #8]
1000edc0:	7181      	strb	r1, [r0, #6]
1000edc2:	71c3      	strb	r3, [r0, #7]
1000edc4:	3108      	adds	r1, #8
1000edc6:	4b0e      	ldr	r3, [pc, #56]	; (1000ee00 <gapm_reset_req_handler+0x68>)
1000edc8:	0136      	lsls	r6, r6, #4
1000edca:	7042      	strb	r2, [r0, #1]
1000edcc:	7082      	strb	r2, [r0, #2]
1000edce:	80a2      	strh	r2, [r4, #4]
1000edd0:	8026      	strh	r6, [r4, #0]
1000edd2:	4798      	blx	r3
1000edd4:	1c28      	adds	r0, r5, #0
1000edd6:	4b0b      	ldr	r3, [pc, #44]	; (1000ee04 <gapm_reset_req_handler+0x6c>)
1000edd8:	4798      	blx	r3
1000edda:	782b      	ldrb	r3, [r5, #0]
1000eddc:	20e2      	movs	r0, #226	; 0xe2
1000edde:	2b00      	cmp	r3, #0
1000ede0:	d106      	bne.n	1000edf0 <gapm_reset_req_handler+0x58>
1000ede2:	68a3      	ldr	r3, [r4, #8]
1000ede4:	20e2      	movs	r0, #226	; 0xe2
1000ede6:	781a      	ldrb	r2, [r3, #0]
1000ede8:	785b      	ldrb	r3, [r3, #1]
1000edea:	2a01      	cmp	r2, #1
1000edec:	d100      	bne.n	1000edf0 <gapm_reset_req_handler+0x58>
1000edee:	1c18      	adds	r0, r3, #0
1000edf0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000edf2:	46c0      	nop			; (mov r8, r8)
1000edf4:	10015b50 	.word	0x10015b50
1000edf8:	10015ec0 	.word	0x10015ec0
1000edfc:	10015b44 	.word	0x10015b44
1000ee00:	1000e1c1 	.word	0x1000e1c1
1000ee04:	1000e225 	.word	0x1000e225

1000ee08 <gapm_set_dev_config_cmd_handler>:
1000ee08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee0a:	b089      	sub	sp, #36	; 0x24
1000ee0c:	9303      	str	r3, [sp, #12]
1000ee0e:	ab0e      	add	r3, sp, #56	; 0x38
1000ee10:	781b      	ldrb	r3, [r3, #0]
1000ee12:	4c37      	ldr	r4, [pc, #220]	; (1000eef0 <gapm_set_dev_config_cmd_handler+0xe8>)
1000ee14:	9304      	str	r3, [sp, #16]
1000ee16:	ab0f      	add	r3, sp, #60	; 0x3c
1000ee18:	781b      	ldrb	r3, [r3, #0]
1000ee1a:	270d      	movs	r7, #13
1000ee1c:	9305      	str	r3, [sp, #20]
1000ee1e:	ab10      	add	r3, sp, #64	; 0x40
1000ee20:	881b      	ldrh	r3, [r3, #0]
1000ee22:	72a1      	strb	r1, [r4, #10]
1000ee24:	9300      	str	r3, [sp, #0]
1000ee26:	ab11      	add	r3, sp, #68	; 0x44
1000ee28:	881b      	ldrh	r3, [r3, #0]
1000ee2a:	0a09      	lsrs	r1, r1, #8
1000ee2c:	9301      	str	r3, [sp, #4]
1000ee2e:	ab12      	add	r3, sp, #72	; 0x48
1000ee30:	881b      	ldrh	r3, [r3, #0]
1000ee32:	7260      	strb	r0, [r4, #9]
1000ee34:	9302      	str	r3, [sp, #8]
1000ee36:	ab06      	add	r3, sp, #24
1000ee38:	1dde      	adds	r6, r3, #7
1000ee3a:	2300      	movs	r3, #0
1000ee3c:	7033      	strb	r3, [r6, #0]
1000ee3e:	2304      	movs	r3, #4
1000ee40:	7023      	strb	r3, [r4, #0]
1000ee42:	2300      	movs	r3, #0
1000ee44:	70e3      	strb	r3, [r4, #3]
1000ee46:	4b2b      	ldr	r3, [pc, #172]	; (1000eef4 <gapm_set_dev_config_cmd_handler+0xec>)
1000ee48:	72e1      	strb	r1, [r4, #11]
1000ee4a:	881d      	ldrh	r5, [r3, #0]
1000ee4c:	881b      	ldrh	r3, [r3, #0]
1000ee4e:	1c11      	adds	r1, r2, #0
1000ee50:	0a1b      	lsrs	r3, r3, #8
1000ee52:	7163      	strb	r3, [r4, #5]
1000ee54:	2303      	movs	r3, #3
1000ee56:	7125      	strb	r5, [r4, #4]
1000ee58:	2206      	movs	r2, #6
1000ee5a:	4d27      	ldr	r5, [pc, #156]	; (1000eef8 <gapm_set_dev_config_cmd_handler+0xf0>)
1000ee5c:	4827      	ldr	r0, [pc, #156]	; (1000eefc <gapm_set_dev_config_cmd_handler+0xf4>)
1000ee5e:	7223      	strb	r3, [r4, #8]
1000ee60:	7067      	strb	r7, [r4, #1]
1000ee62:	70a7      	strb	r7, [r4, #2]
1000ee64:	47a8      	blx	r5
1000ee66:	9903      	ldr	r1, [sp, #12]
1000ee68:	2210      	movs	r2, #16
1000ee6a:	4825      	ldr	r0, [pc, #148]	; (1000ef00 <gapm_set_dev_config_cmd_handler+0xf8>)
1000ee6c:	47a8      	blx	r5
1000ee6e:	466a      	mov	r2, sp
1000ee70:	7c12      	ldrb	r2, [r2, #16]
1000ee72:	1ce3      	adds	r3, r4, #3
1000ee74:	77da      	strb	r2, [r3, #31]
1000ee76:	466a      	mov	r2, sp
1000ee78:	7d12      	ldrb	r2, [r2, #20]
1000ee7a:	1d23      	adds	r3, r4, #4
1000ee7c:	77da      	strb	r2, [r3, #31]
1000ee7e:	466a      	mov	r2, sp
1000ee80:	7812      	ldrb	r2, [r2, #0]
1000ee82:	1d63      	adds	r3, r4, #5
1000ee84:	77da      	strb	r2, [r3, #31]
1000ee86:	9b00      	ldr	r3, [sp, #0]
1000ee88:	1da2      	adds	r2, r4, #6
1000ee8a:	0a1b      	lsrs	r3, r3, #8
1000ee8c:	77d3      	strb	r3, [r2, #31]
1000ee8e:	466a      	mov	r2, sp
1000ee90:	7912      	ldrb	r2, [r2, #4]
1000ee92:	1de3      	adds	r3, r4, #7
1000ee94:	77da      	strb	r2, [r3, #31]
1000ee96:	1c22      	adds	r2, r4, #0
1000ee98:	9b01      	ldr	r3, [sp, #4]
1000ee9a:	3208      	adds	r2, #8
1000ee9c:	0a1b      	lsrs	r3, r3, #8
1000ee9e:	77d3      	strb	r3, [r2, #31]
1000eea0:	466a      	mov	r2, sp
1000eea2:	1c23      	adds	r3, r4, #0
1000eea4:	7a12      	ldrb	r2, [r2, #8]
1000eea6:	3328      	adds	r3, #40	; 0x28
1000eea8:	701a      	strb	r2, [r3, #0]
1000eeaa:	1c22      	adds	r2, r4, #0
1000eeac:	9b02      	ldr	r3, [sp, #8]
1000eeae:	3229      	adds	r2, #41	; 0x29
1000eeb0:	0a1b      	lsrs	r3, r3, #8
1000eeb2:	7013      	strb	r3, [r2, #0]
1000eeb4:	23d0      	movs	r3, #208	; 0xd0
1000eeb6:	4d13      	ldr	r5, [pc, #76]	; (1000ef04 <gapm_set_dev_config_cmd_handler+0xfc>)
1000eeb8:	011b      	lsls	r3, r3, #4
1000eeba:	802b      	strh	r3, [r5, #0]
1000eebc:	2322      	movs	r3, #34	; 0x22
1000eebe:	71a3      	strb	r3, [r4, #6]
1000eec0:	2300      	movs	r3, #0
1000eec2:	212a      	movs	r1, #42	; 0x2a
1000eec4:	71e3      	strb	r3, [r4, #7]
1000eec6:	1c20      	adds	r0, r4, #0
1000eec8:	4b0f      	ldr	r3, [pc, #60]	; (1000ef08 <gapm_set_dev_config_cmd_handler+0x100>)
1000eeca:	80af      	strh	r7, [r5, #4]
1000eecc:	4798      	blx	r3
1000eece:	1c30      	adds	r0, r6, #0
1000eed0:	4b0e      	ldr	r3, [pc, #56]	; (1000ef0c <gapm_set_dev_config_cmd_handler+0x104>)
1000eed2:	4798      	blx	r3
1000eed4:	7833      	ldrb	r3, [r6, #0]
1000eed6:	20e2      	movs	r0, #226	; 0xe2
1000eed8:	2b00      	cmp	r3, #0
1000eeda:	d106      	bne.n	1000eeea <gapm_set_dev_config_cmd_handler+0xe2>
1000eedc:	68ab      	ldr	r3, [r5, #8]
1000eede:	20e2      	movs	r0, #226	; 0xe2
1000eee0:	781a      	ldrb	r2, [r3, #0]
1000eee2:	785b      	ldrb	r3, [r3, #1]
1000eee4:	2a03      	cmp	r2, #3
1000eee6:	d100      	bne.n	1000eeea <gapm_set_dev_config_cmd_handler+0xe2>
1000eee8:	1c18      	adds	r0, r3, #0
1000eeea:	b009      	add	sp, #36	; 0x24
1000eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eeee:	46c0      	nop			; (mov r8, r8)
1000eef0:	10015ec0 	.word	0x10015ec0
1000eef4:	10015b50 	.word	0x10015b50
1000eef8:	1001159b 	.word	0x1001159b
1000eefc:	10015ecc 	.word	0x10015ecc
1000ef00:	10015ed2 	.word	0x10015ed2
1000ef04:	10015b44 	.word	0x10015b44
1000ef08:	1000e1c1 	.word	0x1000e1c1
1000ef0c:	1000e225 	.word	0x1000e225

1000ef10 <gapm_get_dev_config_cmd_handler>:
1000ef10:	4684      	mov	ip, r0
1000ef12:	4663      	mov	r3, ip
1000ef14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef16:	b085      	sub	sp, #20
1000ef18:	9100      	str	r1, [sp, #0]
1000ef1a:	20cf      	movs	r0, #207	; 0xcf
1000ef1c:	2b01      	cmp	r3, #1
1000ef1e:	d854      	bhi.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000ef20:	2900      	cmp	r1, #0
1000ef22:	d052      	beq.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000ef24:	2200      	movs	r2, #0
1000ef26:	492a      	ldr	r1, [pc, #168]	; (1000efd0 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ef28:	ab02      	add	r3, sp, #8
1000ef2a:	880c      	ldrh	r4, [r1, #0]
1000ef2c:	8809      	ldrh	r1, [r1, #0]
1000ef2e:	1d9f      	adds	r7, r3, #6
1000ef30:	719a      	strb	r2, [r3, #6]
1000ef32:	4b28      	ldr	r3, [pc, #160]	; (1000efd4 <gapm_get_dev_config_cmd_handler+0xc4>)
1000ef34:	0a09      	lsrs	r1, r1, #8
1000ef36:	250d      	movs	r5, #13
1000ef38:	2606      	movs	r6, #6
1000ef3a:	7159      	strb	r1, [r3, #5]
1000ef3c:	4661      	mov	r1, ip
1000ef3e:	701e      	strb	r6, [r3, #0]
1000ef40:	705d      	strb	r5, [r3, #1]
1000ef42:	709d      	strb	r5, [r3, #2]
1000ef44:	70da      	strb	r2, [r3, #3]
1000ef46:	711c      	strb	r4, [r3, #4]
1000ef48:	2901      	cmp	r1, #1
1000ef4a:	d13e      	bne.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000ef4c:	21d0      	movs	r1, #208	; 0xd0
1000ef4e:	4c22      	ldr	r4, [pc, #136]	; (1000efd8 <gapm_get_dev_config_cmd_handler+0xc8>)
1000ef50:	0109      	lsls	r1, r1, #4
1000ef52:	8061      	strh	r1, [r4, #2]
1000ef54:	4921      	ldr	r1, [pc, #132]	; (1000efdc <gapm_get_dev_config_cmd_handler+0xcc>)
1000ef56:	71da      	strb	r2, [r3, #7]
1000ef58:	8021      	strh	r1, [r4, #0]
1000ef5a:	4661      	mov	r1, ip
1000ef5c:	721e      	strb	r6, [r3, #8]
1000ef5e:	7199      	strb	r1, [r3, #6]
1000ef60:	1c18      	adds	r0, r3, #0
1000ef62:	2109      	movs	r1, #9
1000ef64:	4b1e      	ldr	r3, [pc, #120]	; (1000efe0 <gapm_get_dev_config_cmd_handler+0xd0>)
1000ef66:	80a5      	strh	r5, [r4, #4]
1000ef68:	4798      	blx	r3
1000ef6a:	1c38      	adds	r0, r7, #0
1000ef6c:	4b1d      	ldr	r3, [pc, #116]	; (1000efe4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000ef6e:	4798      	blx	r3
1000ef70:	783b      	ldrb	r3, [r7, #0]
1000ef72:	20e2      	movs	r0, #226	; 0xe2
1000ef74:	9301      	str	r3, [sp, #4]
1000ef76:	2b00      	cmp	r3, #0
1000ef78:	d127      	bne.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000ef7a:	8821      	ldrh	r1, [r4, #0]
1000ef7c:	4a1a      	ldr	r2, [pc, #104]	; (1000efe8 <gapm_get_dev_config_cmd_handler+0xd8>)
1000ef7e:	68a7      	ldr	r7, [r4, #8]
1000ef80:	3b01      	subs	r3, #1
1000ef82:	4291      	cmp	r1, r2
1000ef84:	d001      	beq.n	1000ef8a <gapm_get_dev_config_cmd_handler+0x7a>
1000ef86:	8023      	strh	r3, [r4, #0]
1000ef88:	e01a      	b.n	1000efc0 <gapm_get_dev_config_cmd_handler+0xb0>
1000ef8a:	8063      	strh	r3, [r4, #2]
1000ef8c:	9b00      	ldr	r3, [sp, #0]
1000ef8e:	1c39      	adds	r1, r7, #0
1000ef90:	1c58      	adds	r0, r3, #1
1000ef92:	1c32      	adds	r2, r6, #0
1000ef94:	4b15      	ldr	r3, [pc, #84]	; (1000efec <gapm_get_dev_config_cmd_handler+0xdc>)
1000ef96:	4798      	blx	r3
1000ef98:	79bb      	ldrb	r3, [r7, #6]
1000ef9a:	9a00      	ldr	r2, [sp, #0]
1000ef9c:	7013      	strb	r3, [r2, #0]
1000ef9e:	23d0      	movs	r3, #208	; 0xd0
1000efa0:	011b      	lsls	r3, r3, #4
1000efa2:	8023      	strh	r3, [r4, #0]
1000efa4:	ab02      	add	r3, sp, #8
1000efa6:	80a5      	strh	r5, [r4, #4]
1000efa8:	1ddd      	adds	r5, r3, #7
1000efaa:	466b      	mov	r3, sp
1000efac:	791b      	ldrb	r3, [r3, #4]
1000efae:	1c28      	adds	r0, r5, #0
1000efb0:	702b      	strb	r3, [r5, #0]
1000efb2:	4b0c      	ldr	r3, [pc, #48]	; (1000efe4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000efb4:	4798      	blx	r3
1000efb6:	782b      	ldrb	r3, [r5, #0]
1000efb8:	20d0      	movs	r0, #208	; 0xd0
1000efba:	2b00      	cmp	r3, #0
1000efbc:	d105      	bne.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000efbe:	68a7      	ldr	r7, [r4, #8]
1000efc0:	783b      	ldrb	r3, [r7, #0]
1000efc2:	7878      	ldrb	r0, [r7, #1]
1000efc4:	2b06      	cmp	r3, #6
1000efc6:	d000      	beq.n	1000efca <gapm_get_dev_config_cmd_handler+0xba>
1000efc8:	20e2      	movs	r0, #226	; 0xe2
1000efca:	b005      	add	sp, #20
1000efcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000efce:	46c0      	nop			; (mov r8, r8)
1000efd0:	10015b50 	.word	0x10015b50
1000efd4:	10015ec0 	.word	0x10015ec0
1000efd8:	10015b44 	.word	0x10015b44
1000efdc:	00000d08 	.word	0x00000d08
1000efe0:	1000e1c1 	.word	0x1000e1c1
1000efe4:	1000e225 	.word	0x1000e225
1000efe8:	0000ffff 	.word	0x0000ffff
1000efec:	1001159b 	.word	0x1001159b

1000eff0 <gapm_cancel_cmd_handler>:
1000eff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000eff2:	4916      	ldr	r1, [pc, #88]	; (1000f04c <gapm_cancel_cmd_handler+0x5c>)
1000eff4:	4816      	ldr	r0, [pc, #88]	; (1000f050 <gapm_cancel_cmd_handler+0x60>)
1000eff6:	880c      	ldrh	r4, [r1, #0]
1000eff8:	8809      	ldrh	r1, [r1, #0]
1000effa:	466b      	mov	r3, sp
1000effc:	0a09      	lsrs	r1, r1, #8
1000effe:	7141      	strb	r1, [r0, #5]
1000f000:	2102      	movs	r1, #2
1000f002:	2203      	movs	r2, #3
1000f004:	7201      	strb	r1, [r0, #8]
1000f006:	21d0      	movs	r1, #208	; 0xd0
1000f008:	1ddd      	adds	r5, r3, #7
1000f00a:	2300      	movs	r3, #0
1000f00c:	7104      	strb	r4, [r0, #4]
1000f00e:	4c11      	ldr	r4, [pc, #68]	; (1000f054 <gapm_cancel_cmd_handler+0x64>)
1000f010:	7002      	strb	r2, [r0, #0]
1000f012:	0109      	lsls	r1, r1, #4
1000f014:	320a      	adds	r2, #10
1000f016:	702b      	strb	r3, [r5, #0]
1000f018:	7042      	strb	r2, [r0, #1]
1000f01a:	7082      	strb	r2, [r0, #2]
1000f01c:	70c3      	strb	r3, [r0, #3]
1000f01e:	8021      	strh	r1, [r4, #0]
1000f020:	80a2      	strh	r2, [r4, #4]
1000f022:	71c3      	strb	r3, [r0, #7]
1000f024:	3a0c      	subs	r2, #12
1000f026:	2109      	movs	r1, #9
1000f028:	4b0b      	ldr	r3, [pc, #44]	; (1000f058 <gapm_cancel_cmd_handler+0x68>)
1000f02a:	7182      	strb	r2, [r0, #6]
1000f02c:	4798      	blx	r3
1000f02e:	1c28      	adds	r0, r5, #0
1000f030:	4b0a      	ldr	r3, [pc, #40]	; (1000f05c <gapm_cancel_cmd_handler+0x6c>)
1000f032:	4798      	blx	r3
1000f034:	7828      	ldrb	r0, [r5, #0]
1000f036:	2800      	cmp	r0, #0
1000f038:	d001      	beq.n	1000f03e <gapm_cancel_cmd_handler+0x4e>
1000f03a:	20e2      	movs	r0, #226	; 0xe2
1000f03c:	e004      	b.n	1000f048 <gapm_cancel_cmd_handler+0x58>
1000f03e:	68a3      	ldr	r3, [r4, #8]
1000f040:	785b      	ldrb	r3, [r3, #1]
1000f042:	2b44      	cmp	r3, #68	; 0x44
1000f044:	d000      	beq.n	1000f048 <gapm_cancel_cmd_handler+0x58>
1000f046:	1c18      	adds	r0, r3, #0
1000f048:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f04a:	46c0      	nop			; (mov r8, r8)
1000f04c:	10015b50 	.word	0x10015b50
1000f050:	10015ec0 	.word	0x10015ec0
1000f054:	10015b44 	.word	0x10015b44
1000f058:	1000e1c1 	.word	0x1000e1c1
1000f05c:	1000e225 	.word	0x1000e225

1000f060 <gapm_dev_bdaddr_ind_handler>:
1000f060:	b538      	push	{r3, r4, r5, lr}
1000f062:	1c05      	adds	r5, r0, #0
1000f064:	1c0c      	adds	r4, r1, #0
1000f066:	1c48      	adds	r0, r1, #1
1000f068:	2206      	movs	r2, #6
1000f06a:	1c29      	adds	r1, r5, #0
1000f06c:	4b02      	ldr	r3, [pc, #8]	; (1000f078 <gapm_dev_bdaddr_ind_handler+0x18>)
1000f06e:	4798      	blx	r3
1000f070:	79ab      	ldrb	r3, [r5, #6]
1000f072:	2000      	movs	r0, #0
1000f074:	7023      	strb	r3, [r4, #0]
1000f076:	bd38      	pop	{r3, r4, r5, pc}
1000f078:	1001159b 	.word	0x1001159b

1000f07c <gapm_cmp_evt>:
1000f07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f07e:	7803      	ldrb	r3, [r0, #0]
1000f080:	7845      	ldrb	r5, [r0, #1]
1000f082:	3b0c      	subs	r3, #12
1000f084:	1e18      	subs	r0, r3, #0
1000f086:	280b      	cmp	r0, #11
1000f088:	d900      	bls.n	1000f08c <gapm_cmp_evt+0x10>
1000f08a:	e08d      	b.n	1000f1a8 <gapm_cmp_evt+0x12c>
1000f08c:	1c0c      	adds	r4, r1, #0
1000f08e:	f000 fbbf 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000f092:	1952      	.short	0x1952
1000f094:	068b1919 	.word	0x068b1919
1000f098:	8b595906 	.word	0x8b595906
1000f09c:	0d8b      	.short	0x0d8b
1000f09e:	2300      	movs	r3, #0
1000f0a0:	2d45      	cmp	r5, #69	; 0x45
1000f0a2:	d000      	beq.n	1000f0a6 <gapm_cmp_evt+0x2a>
1000f0a4:	1c2b      	adds	r3, r5, #0
1000f0a6:	7023      	strb	r3, [r4, #0]
1000f0a8:	2002      	movs	r0, #2
1000f0aa:	e07e      	b.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f0ac:	203b      	movs	r0, #59	; 0x3b
1000f0ae:	2d00      	cmp	r5, #0
1000f0b0:	d100      	bne.n	1000f0b4 <gapm_cmp_evt+0x38>
1000f0b2:	e07a      	b.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f0b4:	700d      	strb	r5, [r1, #0]
1000f0b6:	1c48      	adds	r0, r1, #1
1000f0b8:	2210      	movs	r2, #16
1000f0ba:	2100      	movs	r1, #0
1000f0bc:	4b3b      	ldr	r3, [pc, #236]	; (1000f1ac <gapm_cmp_evt+0x130>)
1000f0be:	4798      	blx	r3
1000f0c0:	200f      	movs	r0, #15
1000f0c2:	e072      	b.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f0c4:	2d00      	cmp	r5, #0
1000f0c6:	d134      	bne.n	1000f132 <gapm_cmp_evt+0xb6>
1000f0c8:	4b39      	ldr	r3, [pc, #228]	; (1000f1b0 <gapm_cmp_evt+0x134>)
1000f0ca:	4798      	blx	r3
1000f0cc:	1e43      	subs	r3, r0, #1
1000f0ce:	b2db      	uxtb	r3, r3
1000f0d0:	1c28      	adds	r0, r5, #0
1000f0d2:	2b06      	cmp	r3, #6
1000f0d4:	d869      	bhi.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f0d6:	466b      	mov	r3, sp
1000f0d8:	4e36      	ldr	r6, [pc, #216]	; (1000f1b4 <gapm_cmp_evt+0x138>)
1000f0da:	1dd9      	adds	r1, r3, #7
1000f0dc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f0de:	4b36      	ldr	r3, [pc, #216]	; (1000f1b8 <gapm_cmp_evt+0x13c>)
1000f0e0:	4798      	blx	r3
1000f0e2:	2312      	movs	r3, #18
1000f0e4:	4358      	muls	r0, r3
1000f0e6:	4935      	ldr	r1, [pc, #212]	; (1000f1bc <gapm_cmp_evt+0x140>)
1000f0e8:	1809      	adds	r1, r1, r0
1000f0ea:	1c0b      	adds	r3, r1, #0
1000f0ec:	894a      	ldrh	r2, [r1, #10]
1000f0ee:	3308      	adds	r3, #8
1000f0f0:	8122      	strh	r2, [r4, #8]
1000f0f2:	784f      	ldrb	r7, [r1, #1]
1000f0f4:	72a5      	strb	r5, [r4, #10]
1000f0f6:	7027      	strb	r7, [r4, #0]
1000f0f8:	898a      	ldrh	r2, [r1, #12]
1000f0fa:	1c60      	adds	r0, r4, #1
1000f0fc:	81a2      	strh	r2, [r4, #12]
1000f0fe:	88db      	ldrh	r3, [r3, #6]
1000f100:	3102      	adds	r1, #2
1000f102:	81e3      	strh	r3, [r4, #14]
1000f104:	89cb      	ldrh	r3, [r1, #14]
1000f106:	2206      	movs	r2, #6
1000f108:	8223      	strh	r3, [r4, #16]
1000f10a:	4b2d      	ldr	r3, [pc, #180]	; (1000f1c0 <gapm_cmp_evt+0x144>)
1000f10c:	4798      	blx	r3
1000f10e:	2f00      	cmp	r7, #0
1000f110:	d00a      	beq.n	1000f128 <gapm_cmp_evt+0xac>
1000f112:	79a3      	ldrb	r3, [r4, #6]
1000f114:	223f      	movs	r2, #63	; 0x3f
1000f116:	1c19      	adds	r1, r3, #0
1000f118:	3501      	adds	r5, #1
1000f11a:	4391      	bics	r1, r2
1000f11c:	29c0      	cmp	r1, #192	; 0xc0
1000f11e:	d003      	beq.n	1000f128 <gapm_cmp_evt+0xac>
1000f120:	065b      	lsls	r3, r3, #25
1000f122:	0fdb      	lsrs	r3, r3, #31
1000f124:	3502      	adds	r5, #2
1000f126:	1aed      	subs	r5, r5, r3
1000f128:	2301      	movs	r3, #1
1000f12a:	425b      	negs	r3, r3
1000f12c:	7025      	strb	r5, [r4, #0]
1000f12e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f130:	e038      	b.n	1000f1a4 <gapm_cmp_evt+0x128>
1000f132:	700d      	strb	r5, [r1, #0]
1000f134:	e004      	b.n	1000f140 <gapm_cmp_evt+0xc4>
1000f136:	2300      	movs	r3, #0
1000f138:	2d45      	cmp	r5, #69	; 0x45
1000f13a:	d000      	beq.n	1000f13e <gapm_cmp_evt+0xc2>
1000f13c:	1c2b      	adds	r3, r5, #0
1000f13e:	7023      	strb	r3, [r4, #0]
1000f140:	2003      	movs	r0, #3
1000f142:	e032      	b.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f144:	4e1b      	ldr	r6, [pc, #108]	; (1000f1b4 <gapm_cmp_evt+0x138>)
1000f146:	2100      	movs	r1, #0
1000f148:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f14a:	4b1b      	ldr	r3, [pc, #108]	; (1000f1b8 <gapm_cmp_evt+0x13c>)
1000f14c:	4798      	blx	r3
1000f14e:	2807      	cmp	r0, #7
1000f150:	d818      	bhi.n	1000f184 <gapm_cmp_evt+0x108>
1000f152:	2301      	movs	r3, #1
1000f154:	425b      	negs	r3, r3
1000f156:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f158:	3313      	adds	r3, #19
1000f15a:	4358      	muls	r0, r3
1000f15c:	4917      	ldr	r1, [pc, #92]	; (1000f1bc <gapm_cmp_evt+0x140>)
1000f15e:	1809      	adds	r1, r1, r0
1000f160:	1c0b      	adds	r3, r1, #0
1000f162:	894a      	ldrh	r2, [r1, #10]
1000f164:	3308      	adds	r3, #8
1000f166:	8122      	strh	r2, [r4, #8]
1000f168:	784a      	ldrb	r2, [r1, #1]
1000f16a:	72a5      	strb	r5, [r4, #10]
1000f16c:	7022      	strb	r2, [r4, #0]
1000f16e:	898a      	ldrh	r2, [r1, #12]
1000f170:	1c60      	adds	r0, r4, #1
1000f172:	81a2      	strh	r2, [r4, #12]
1000f174:	88db      	ldrh	r3, [r3, #6]
1000f176:	3102      	adds	r1, #2
1000f178:	81e3      	strh	r3, [r4, #14]
1000f17a:	89cb      	ldrh	r3, [r1, #14]
1000f17c:	2206      	movs	r2, #6
1000f17e:	8223      	strh	r3, [r4, #16]
1000f180:	4b0f      	ldr	r3, [pc, #60]	; (1000f1c0 <gapm_cmp_evt+0x144>)
1000f182:	4798      	blx	r3
1000f184:	2200      	movs	r2, #0
1000f186:	7823      	ldrb	r3, [r4, #0]
1000f188:	4293      	cmp	r3, r2
1000f18a:	d00a      	beq.n	1000f1a2 <gapm_cmp_evt+0x126>
1000f18c:	79a3      	ldrb	r3, [r4, #6]
1000f18e:	323f      	adds	r2, #63	; 0x3f
1000f190:	1c19      	adds	r1, r3, #0
1000f192:	4391      	bics	r1, r2
1000f194:	3a3e      	subs	r2, #62	; 0x3e
1000f196:	29c0      	cmp	r1, #192	; 0xc0
1000f198:	d003      	beq.n	1000f1a2 <gapm_cmp_evt+0x126>
1000f19a:	065b      	lsls	r3, r3, #25
1000f19c:	0fdb      	lsrs	r3, r3, #31
1000f19e:	3202      	adds	r2, #2
1000f1a0:	1ad2      	subs	r2, r2, r3
1000f1a2:	7022      	strb	r2, [r4, #0]
1000f1a4:	2005      	movs	r0, #5
1000f1a6:	e000      	b.n	1000f1aa <gapm_cmp_evt+0x12e>
1000f1a8:	2000      	movs	r0, #0
1000f1aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f1ac:	100115ad 	.word	0x100115ad
1000f1b0:	1000e3cd 	.word	0x1000e3cd
1000f1b4:	10015be2 	.word	0x10015be2
1000f1b8:	1000e391 	.word	0x1000e391
1000f1bc:	10015b52 	.word	0x10015b52
1000f1c0:	1001159b 	.word	0x1001159b

1000f1c4 <gapm_adv_report_evt_handler>:
1000f1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f1c6:	7843      	ldrb	r3, [r0, #1]
1000f1c8:	1c05      	adds	r5, r0, #0
1000f1ca:	9301      	str	r3, [sp, #4]
1000f1cc:	466b      	mov	r3, sp
1000f1ce:	1c0c      	adds	r4, r1, #0
1000f1d0:	791b      	ldrb	r3, [r3, #4]
1000f1d2:	7806      	ldrb	r6, [r0, #0]
1000f1d4:	2206      	movs	r2, #6
1000f1d6:	704b      	strb	r3, [r1, #1]
1000f1d8:	1c88      	adds	r0, r1, #2
1000f1da:	4f1b      	ldr	r7, [pc, #108]	; (1000f248 <gapm_adv_report_evt_handler+0x84>)
1000f1dc:	1ca9      	adds	r1, r5, #2
1000f1de:	47b8      	blx	r7
1000f1e0:	1c20      	adds	r0, r4, #0
1000f1e2:	1c29      	adds	r1, r5, #0
1000f1e4:	7a2a      	ldrb	r2, [r5, #8]
1000f1e6:	3008      	adds	r0, #8
1000f1e8:	77c2      	strb	r2, [r0, #31]
1000f1ea:	3109      	adds	r1, #9
1000f1ec:	3528      	adds	r5, #40	; 0x28
1000f1ee:	47b8      	blx	r7
1000f1f0:	782b      	ldrb	r3, [r5, #0]
1000f1f2:	b25a      	sxtb	r2, r3
1000f1f4:	2a00      	cmp	r2, #0
1000f1f6:	da01      	bge.n	1000f1fc <gapm_adv_report_evt_handler+0x38>
1000f1f8:	3301      	adds	r3, #1
1000f1fa:	b2db      	uxtb	r3, r3
1000f1fc:	1c22      	adds	r2, r4, #0
1000f1fe:	3228      	adds	r2, #40	; 0x28
1000f200:	7013      	strb	r3, [r2, #0]
1000f202:	2200      	movs	r2, #0
1000f204:	9b01      	ldr	r3, [sp, #4]
1000f206:	4293      	cmp	r3, r2
1000f208:	d00a      	beq.n	1000f220 <gapm_adv_report_evt_handler+0x5c>
1000f20a:	79e3      	ldrb	r3, [r4, #7]
1000f20c:	323f      	adds	r2, #63	; 0x3f
1000f20e:	1c19      	adds	r1, r3, #0
1000f210:	4391      	bics	r1, r2
1000f212:	3a3e      	subs	r2, #62	; 0x3e
1000f214:	29c0      	cmp	r1, #192	; 0xc0
1000f216:	d003      	beq.n	1000f220 <gapm_adv_report_evt_handler+0x5c>
1000f218:	065b      	lsls	r3, r3, #25
1000f21a:	0fdb      	lsrs	r3, r3, #31
1000f21c:	3202      	adds	r2, #2
1000f21e:	1ad2      	subs	r2, r2, r3
1000f220:	7062      	strb	r2, [r4, #1]
1000f222:	2e04      	cmp	r6, #4
1000f224:	d80f      	bhi.n	1000f246 <gapm_adv_report_evt_handler+0x82>
1000f226:	1c30      	adds	r0, r6, #0
1000f228:	f000 faf2 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000f22c:	09070503 	.word	0x09070503
1000f230:	0b          	.byte	0x0b
1000f231:	00          	.byte	0x00
1000f232:	2300      	movs	r3, #0
1000f234:	e006      	b.n	1000f244 <gapm_adv_report_evt_handler+0x80>
1000f236:	2301      	movs	r3, #1
1000f238:	e004      	b.n	1000f244 <gapm_adv_report_evt_handler+0x80>
1000f23a:	2302      	movs	r3, #2
1000f23c:	e002      	b.n	1000f244 <gapm_adv_report_evt_handler+0x80>
1000f23e:	2303      	movs	r3, #3
1000f240:	e000      	b.n	1000f244 <gapm_adv_report_evt_handler+0x80>
1000f242:	2305      	movs	r3, #5
1000f244:	7023      	strb	r3, [r4, #0]
1000f246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f248:	1001159b 	.word	0x1001159b

1000f24c <gapm_resolv_addr_cmd_handler>:
1000f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f24e:	2314      	movs	r3, #20
1000f250:	4c12      	ldr	r4, [pc, #72]	; (1000f29c <gapm_resolv_addr_cmd_handler+0x50>)
1000f252:	1c17      	adds	r7, r2, #0
1000f254:	7023      	strb	r3, [r4, #0]
1000f256:	3b07      	subs	r3, #7
1000f258:	7063      	strb	r3, [r4, #1]
1000f25a:	70a3      	strb	r3, [r4, #2]
1000f25c:	2300      	movs	r3, #0
1000f25e:	70e3      	strb	r3, [r4, #3]
1000f260:	4b0f      	ldr	r3, [pc, #60]	; (1000f2a0 <gapm_resolv_addr_cmd_handler+0x54>)
1000f262:	1c05      	adds	r5, r0, #0
1000f264:	881a      	ldrh	r2, [r3, #0]
1000f266:	881b      	ldrh	r3, [r3, #0]
1000f268:	4e0e      	ldr	r6, [pc, #56]	; (1000f2a4 <gapm_resolv_addr_cmd_handler+0x58>)
1000f26a:	0a1b      	lsrs	r3, r3, #8
1000f26c:	7163      	strb	r3, [r4, #5]
1000f26e:	2317      	movs	r3, #23
1000f270:	012d      	lsls	r5, r5, #4
1000f272:	7122      	strb	r2, [r4, #4]
1000f274:	7260      	strb	r0, [r4, #9]
1000f276:	2206      	movs	r2, #6
1000f278:	480b      	ldr	r0, [pc, #44]	; (1000f2a8 <gapm_resolv_addr_cmd_handler+0x5c>)
1000f27a:	7223      	strb	r3, [r4, #8]
1000f27c:	47b0      	blx	r6
1000f27e:	1c39      	adds	r1, r7, #0
1000f280:	1c2a      	adds	r2, r5, #0
1000f282:	480a      	ldr	r0, [pc, #40]	; (1000f2ac <gapm_resolv_addr_cmd_handler+0x60>)
1000f284:	47b0      	blx	r6
1000f286:	1c29      	adds	r1, r5, #0
1000f288:	3110      	adds	r1, #16
1000f28a:	1c0b      	adds	r3, r1, #0
1000f28c:	3b08      	subs	r3, #8
1000f28e:	71a3      	strb	r3, [r4, #6]
1000f290:	121b      	asrs	r3, r3, #8
1000f292:	71e3      	strb	r3, [r4, #7]
1000f294:	1c20      	adds	r0, r4, #0
1000f296:	4b06      	ldr	r3, [pc, #24]	; (1000f2b0 <gapm_resolv_addr_cmd_handler+0x64>)
1000f298:	4798      	blx	r3
1000f29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f29c:	10015ec0 	.word	0x10015ec0
1000f2a0:	10015b50 	.word	0x10015b50
1000f2a4:	1001159b 	.word	0x1001159b
1000f2a8:	10015eca 	.word	0x10015eca
1000f2ac:	10015ed0 	.word	0x10015ed0
1000f2b0:	1000e1c1 	.word	0x1000e1c1

1000f2b4 <gapm_addr_solved_ind_handler>:
1000f2b4:	b570      	push	{r4, r5, r6, lr}
1000f2b6:	1c04      	adds	r4, r0, #0
1000f2b8:	1c08      	adds	r0, r1, #0
1000f2ba:	1c0d      	adds	r5, r1, #0
1000f2bc:	4e05      	ldr	r6, [pc, #20]	; (1000f2d4 <gapm_addr_solved_ind_handler+0x20>)
1000f2be:	1c21      	adds	r1, r4, #0
1000f2c0:	2206      	movs	r2, #6
1000f2c2:	3011      	adds	r0, #17
1000f2c4:	47b0      	blx	r6
1000f2c6:	1c68      	adds	r0, r5, #1
1000f2c8:	1da1      	adds	r1, r4, #6
1000f2ca:	2210      	movs	r2, #16
1000f2cc:	47b0      	blx	r6
1000f2ce:	2300      	movs	r3, #0
1000f2d0:	702b      	strb	r3, [r5, #0]
1000f2d2:	bd70      	pop	{r4, r5, r6, pc}
1000f2d4:	1001159b 	.word	0x1001159b

1000f2d8 <gapm_profile_added_ind_handler>:
1000f2d8:	b510      	push	{r4, lr}
1000f2da:	7843      	ldrb	r3, [r0, #1]
1000f2dc:	7902      	ldrb	r2, [r0, #4]
1000f2de:	7944      	ldrb	r4, [r0, #5]
1000f2e0:	7800      	ldrb	r0, [r0, #0]
1000f2e2:	021b      	lsls	r3, r3, #8
1000f2e4:	4303      	orrs	r3, r0
1000f2e6:	2b1b      	cmp	r3, #27
1000f2e8:	d104      	bne.n	1000f2f4 <gapm_profile_added_ind_handler+0x1c>
1000f2ea:	2300      	movs	r3, #0
1000f2ec:	700b      	strb	r3, [r1, #0]
1000f2ee:	0223      	lsls	r3, r4, #8
1000f2f0:	4313      	orrs	r3, r2
1000f2f2:	804b      	strh	r3, [r1, #2]
1000f2f4:	203b      	movs	r0, #59	; 0x3b
1000f2f6:	bd10      	pop	{r4, pc}

1000f2f8 <gattc_read_req_ind_parser>:
1000f2f8:	7843      	ldrb	r3, [r0, #1]
1000f2fa:	7802      	ldrb	r2, [r0, #0]
1000f2fc:	021b      	lsls	r3, r3, #8
1000f2fe:	4313      	orrs	r3, r2
1000f300:	804b      	strh	r3, [r1, #2]
1000f302:	4770      	bx	lr

1000f304 <gattc_write_req_ind_parser>:
1000f304:	b508      	push	{r3, lr}
1000f306:	1c13      	adds	r3, r2, #0
1000f308:	0a00      	lsrs	r0, r0, #8
1000f30a:	8010      	strh	r0, [r2, #0]
1000f30c:	784a      	ldrb	r2, [r1, #1]
1000f30e:	7808      	ldrb	r0, [r1, #0]
1000f310:	0212      	lsls	r2, r2, #8
1000f312:	4302      	orrs	r2, r0
1000f314:	805a      	strh	r2, [r3, #2]
1000f316:	78ca      	ldrb	r2, [r1, #3]
1000f318:	7888      	ldrb	r0, [r1, #2]
1000f31a:	0212      	lsls	r2, r2, #8
1000f31c:	4302      	orrs	r2, r0
1000f31e:	809a      	strh	r2, [r3, #4]
1000f320:	794a      	ldrb	r2, [r1, #5]
1000f322:	7908      	ldrb	r0, [r1, #4]
1000f324:	0212      	lsls	r2, r2, #8
1000f326:	4302      	orrs	r2, r0
1000f328:	80da      	strh	r2, [r3, #6]
1000f32a:	3308      	adds	r3, #8
1000f32c:	1c18      	adds	r0, r3, #0
1000f32e:	3106      	adds	r1, #6
1000f330:	4b01      	ldr	r3, [pc, #4]	; (1000f338 <gattc_write_req_ind_parser+0x34>)
1000f332:	4798      	blx	r3
1000f334:	bd08      	pop	{r3, pc}
1000f336:	46c0      	nop			; (mov r8, r8)
1000f338:	1001159b 	.word	0x1001159b

1000f33c <gattc_att_info_req_parser>:
1000f33c:	7843      	ldrb	r3, [r0, #1]
1000f33e:	7802      	ldrb	r2, [r0, #0]
1000f340:	021b      	lsls	r3, r3, #8
1000f342:	4313      	orrs	r3, r2
1000f344:	800b      	strh	r3, [r1, #0]
1000f346:	4770      	bx	lr

1000f348 <gattc_read_cfm>:
1000f348:	b538      	push	{r3, r4, r5, lr}
1000f34a:	2514      	movs	r5, #20
1000f34c:	1c1c      	adds	r4, r3, #0
1000f34e:	4b14      	ldr	r3, [pc, #80]	; (1000f3a0 <gattc_read_cfm+0x58>)
1000f350:	70d9      	strb	r1, [r3, #3]
1000f352:	4914      	ldr	r1, [pc, #80]	; (1000f3a4 <gattc_read_cfm+0x5c>)
1000f354:	701d      	strb	r5, [r3, #0]
1000f356:	3d08      	subs	r5, #8
1000f358:	705d      	strb	r5, [r3, #1]
1000f35a:	709d      	strb	r5, [r3, #2]
1000f35c:	880d      	ldrh	r5, [r1, #0]
1000f35e:	8809      	ldrh	r1, [r1, #0]
1000f360:	7218      	strb	r0, [r3, #8]
1000f362:	0a09      	lsrs	r1, r1, #8
1000f364:	7159      	strb	r1, [r3, #5]
1000f366:	0a00      	lsrs	r0, r0, #8
1000f368:	0a21      	lsrs	r1, r4, #8
1000f36a:	711d      	strb	r5, [r3, #4]
1000f36c:	7258      	strb	r0, [r3, #9]
1000f36e:	729c      	strb	r4, [r3, #10]
1000f370:	72d9      	strb	r1, [r3, #11]
1000f372:	731a      	strb	r2, [r3, #12]
1000f374:	1c1d      	adds	r5, r3, #0
1000f376:	2c00      	cmp	r4, #0
1000f378:	d007      	beq.n	1000f38a <gattc_read_cfm+0x42>
1000f37a:	9904      	ldr	r1, [sp, #16]
1000f37c:	1c22      	adds	r2, r4, #0
1000f37e:	480a      	ldr	r0, [pc, #40]	; (1000f3a8 <gattc_read_cfm+0x60>)
1000f380:	4b0a      	ldr	r3, [pc, #40]	; (1000f3ac <gattc_read_cfm+0x64>)
1000f382:	340d      	adds	r4, #13
1000f384:	4798      	blx	r3
1000f386:	b2a1      	uxth	r1, r4
1000f388:	e001      	b.n	1000f38e <gattc_read_cfm+0x46>
1000f38a:	210e      	movs	r1, #14
1000f38c:	735c      	strb	r4, [r3, #13]
1000f38e:	1c0b      	adds	r3, r1, #0
1000f390:	3b08      	subs	r3, #8
1000f392:	71ab      	strb	r3, [r5, #6]
1000f394:	121b      	asrs	r3, r3, #8
1000f396:	71eb      	strb	r3, [r5, #7]
1000f398:	1c28      	adds	r0, r5, #0
1000f39a:	4b05      	ldr	r3, [pc, #20]	; (1000f3b0 <gattc_read_cfm+0x68>)
1000f39c:	4798      	blx	r3
1000f39e:	bd38      	pop	{r3, r4, r5, pc}
1000f3a0:	10015ec0 	.word	0x10015ec0
1000f3a4:	10015b50 	.word	0x10015b50
1000f3a8:	10015ecd 	.word	0x10015ecd
1000f3ac:	1001159b 	.word	0x1001159b
1000f3b0:	1000e1c1 	.word	0x1000e1c1

1000f3b4 <gattc_write_cfm>:
1000f3b4:	4b0d      	ldr	r3, [pc, #52]	; (1000f3ec <gattc_write_cfm+0x38>)
1000f3b6:	b510      	push	{r4, lr}
1000f3b8:	729a      	strb	r2, [r3, #10]
1000f3ba:	2203      	movs	r2, #3
1000f3bc:	2416      	movs	r4, #22
1000f3be:	719a      	strb	r2, [r3, #6]
1000f3c0:	2200      	movs	r2, #0
1000f3c2:	70d9      	strb	r1, [r3, #3]
1000f3c4:	490a      	ldr	r1, [pc, #40]	; (1000f3f0 <gattc_write_cfm+0x3c>)
1000f3c6:	701c      	strb	r4, [r3, #0]
1000f3c8:	3c0a      	subs	r4, #10
1000f3ca:	705c      	strb	r4, [r3, #1]
1000f3cc:	709c      	strb	r4, [r3, #2]
1000f3ce:	880c      	ldrh	r4, [r1, #0]
1000f3d0:	8809      	ldrh	r1, [r1, #0]
1000f3d2:	7218      	strb	r0, [r3, #8]
1000f3d4:	0a09      	lsrs	r1, r1, #8
1000f3d6:	0a00      	lsrs	r0, r0, #8
1000f3d8:	711c      	strb	r4, [r3, #4]
1000f3da:	7159      	strb	r1, [r3, #5]
1000f3dc:	7258      	strb	r0, [r3, #9]
1000f3de:	71da      	strb	r2, [r3, #7]
1000f3e0:	1c18      	adds	r0, r3, #0
1000f3e2:	210b      	movs	r1, #11
1000f3e4:	4b03      	ldr	r3, [pc, #12]	; (1000f3f4 <gattc_write_cfm+0x40>)
1000f3e6:	4798      	blx	r3
1000f3e8:	bd10      	pop	{r4, pc}
1000f3ea:	46c0      	nop			; (mov r8, r8)
1000f3ec:	10015ec0 	.word	0x10015ec0
1000f3f0:	10015b50 	.word	0x10015b50
1000f3f4:	1000e1c1 	.word	0x1000e1c1

1000f3f8 <gattc_att_info_cfm>:
1000f3f8:	b538      	push	{r3, r4, r5, lr}
1000f3fa:	4c0e      	ldr	r4, [pc, #56]	; (1000f434 <gattc_att_info_cfm+0x3c>)
1000f3fc:	2518      	movs	r5, #24
1000f3fe:	7323      	strb	r3, [r4, #12]
1000f400:	2305      	movs	r3, #5
1000f402:	71a3      	strb	r3, [r4, #6]
1000f404:	2300      	movs	r3, #0
1000f406:	70e1      	strb	r1, [r4, #3]
1000f408:	490b      	ldr	r1, [pc, #44]	; (1000f438 <gattc_att_info_cfm+0x40>)
1000f40a:	7025      	strb	r5, [r4, #0]
1000f40c:	3d0c      	subs	r5, #12
1000f40e:	7065      	strb	r5, [r4, #1]
1000f410:	70a5      	strb	r5, [r4, #2]
1000f412:	880d      	ldrh	r5, [r1, #0]
1000f414:	8809      	ldrh	r1, [r1, #0]
1000f416:	7220      	strb	r0, [r4, #8]
1000f418:	0a09      	lsrs	r1, r1, #8
1000f41a:	0a00      	lsrs	r0, r0, #8
1000f41c:	7161      	strb	r1, [r4, #5]
1000f41e:	7260      	strb	r0, [r4, #9]
1000f420:	72a2      	strb	r2, [r4, #10]
1000f422:	71e3      	strb	r3, [r4, #7]
1000f424:	0a12      	lsrs	r2, r2, #8
1000f426:	1c20      	adds	r0, r4, #0
1000f428:	210d      	movs	r1, #13
1000f42a:	4b04      	ldr	r3, [pc, #16]	; (1000f43c <gattc_att_info_cfm+0x44>)
1000f42c:	7125      	strb	r5, [r4, #4]
1000f42e:	72e2      	strb	r2, [r4, #11]
1000f430:	4798      	blx	r3
1000f432:	bd38      	pop	{r3, r4, r5, pc}
1000f434:	10015ec0 	.word	0x10015ec0
1000f438:	10015b50 	.word	0x10015b50
1000f43c:	1000e1c1 	.word	0x1000e1c1

1000f440 <gattc_event_cfm_handler>:
1000f440:	220e      	movs	r2, #14
1000f442:	b508      	push	{r3, lr}
1000f444:	4b0b      	ldr	r3, [pc, #44]	; (1000f474 <gattc_event_cfm_handler+0x34>)
1000f446:	701a      	strb	r2, [r3, #0]
1000f448:	3a02      	subs	r2, #2
1000f44a:	705a      	strb	r2, [r3, #1]
1000f44c:	709a      	strb	r2, [r3, #2]
1000f44e:	4a0a      	ldr	r2, [pc, #40]	; (1000f478 <gattc_event_cfm_handler+0x38>)
1000f450:	70d8      	strb	r0, [r3, #3]
1000f452:	8810      	ldrh	r0, [r2, #0]
1000f454:	8812      	ldrh	r2, [r2, #0]
1000f456:	7219      	strb	r1, [r3, #8]
1000f458:	0a12      	lsrs	r2, r2, #8
1000f45a:	715a      	strb	r2, [r3, #5]
1000f45c:	2202      	movs	r2, #2
1000f45e:	719a      	strb	r2, [r3, #6]
1000f460:	2200      	movs	r2, #0
1000f462:	0a09      	lsrs	r1, r1, #8
1000f464:	7118      	strb	r0, [r3, #4]
1000f466:	7259      	strb	r1, [r3, #9]
1000f468:	71da      	strb	r2, [r3, #7]
1000f46a:	1c18      	adds	r0, r3, #0
1000f46c:	210a      	movs	r1, #10
1000f46e:	4b03      	ldr	r3, [pc, #12]	; (1000f47c <gattc_event_cfm_handler+0x3c>)
1000f470:	4798      	blx	r3
1000f472:	bd08      	pop	{r3, pc}
1000f474:	10015ec0 	.word	0x10015ec0
1000f478:	10015b50 	.word	0x10015b50
1000f47c:	1000e1c1 	.word	0x1000e1c1

1000f480 <gattc_disc_svc_ind_parser>:
1000f480:	b570      	push	{r4, r5, r6, lr}
1000f482:	1c15      	adds	r5, r2, #0
1000f484:	0a00      	lsrs	r0, r0, #8
1000f486:	8010      	strh	r0, [r2, #0]
1000f488:	784b      	ldrb	r3, [r1, #1]
1000f48a:	780a      	ldrb	r2, [r1, #0]
1000f48c:	021b      	lsls	r3, r3, #8
1000f48e:	4313      	orrs	r3, r2
1000f490:	806b      	strh	r3, [r5, #2]
1000f492:	78cb      	ldrb	r3, [r1, #3]
1000f494:	788a      	ldrb	r2, [r1, #2]
1000f496:	021b      	lsls	r3, r3, #8
1000f498:	4313      	orrs	r3, r2
1000f49a:	80ab      	strh	r3, [r5, #4]
1000f49c:	790e      	ldrb	r6, [r1, #4]
1000f49e:	4b05      	ldr	r3, [pc, #20]	; (1000f4b4 <gattc_disc_svc_ind_parser+0x34>)
1000f4a0:	1c30      	adds	r0, r6, #0
1000f4a2:	1c0c      	adds	r4, r1, #0
1000f4a4:	4798      	blx	r3
1000f4a6:	1c32      	adds	r2, r6, #0
1000f4a8:	71a8      	strb	r0, [r5, #6]
1000f4aa:	1d61      	adds	r1, r4, #5
1000f4ac:	1de8      	adds	r0, r5, #7
1000f4ae:	4b02      	ldr	r3, [pc, #8]	; (1000f4b8 <gattc_disc_svc_ind_parser+0x38>)
1000f4b0:	4798      	blx	r3
1000f4b2:	bd70      	pop	{r4, r5, r6, pc}
1000f4b4:	1000db79 	.word	0x1000db79
1000f4b8:	1001159b 	.word	0x1001159b

1000f4bc <gattc_disc_svc_incl_ind_parser>:
1000f4bc:	b570      	push	{r4, r5, r6, lr}
1000f4be:	1c15      	adds	r5, r2, #0
1000f4c0:	0a00      	lsrs	r0, r0, #8
1000f4c2:	8010      	strh	r0, [r2, #0]
1000f4c4:	784b      	ldrb	r3, [r1, #1]
1000f4c6:	780a      	ldrb	r2, [r1, #0]
1000f4c8:	021b      	lsls	r3, r3, #8
1000f4ca:	4313      	orrs	r3, r2
1000f4cc:	806b      	strh	r3, [r5, #2]
1000f4ce:	78cb      	ldrb	r3, [r1, #3]
1000f4d0:	788a      	ldrb	r2, [r1, #2]
1000f4d2:	021b      	lsls	r3, r3, #8
1000f4d4:	4313      	orrs	r3, r2
1000f4d6:	80ab      	strh	r3, [r5, #4]
1000f4d8:	794b      	ldrb	r3, [r1, #5]
1000f4da:	790a      	ldrb	r2, [r1, #4]
1000f4dc:	021b      	lsls	r3, r3, #8
1000f4de:	4313      	orrs	r3, r2
1000f4e0:	80eb      	strh	r3, [r5, #6]
1000f4e2:	798e      	ldrb	r6, [r1, #6]
1000f4e4:	4b05      	ldr	r3, [pc, #20]	; (1000f4fc <gattc_disc_svc_incl_ind_parser+0x40>)
1000f4e6:	1c30      	adds	r0, r6, #0
1000f4e8:	1c0c      	adds	r4, r1, #0
1000f4ea:	4798      	blx	r3
1000f4ec:	7228      	strb	r0, [r5, #8]
1000f4ee:	1c28      	adds	r0, r5, #0
1000f4f0:	1c32      	adds	r2, r6, #0
1000f4f2:	1de1      	adds	r1, r4, #7
1000f4f4:	4b02      	ldr	r3, [pc, #8]	; (1000f500 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f4f6:	3009      	adds	r0, #9
1000f4f8:	4798      	blx	r3
1000f4fa:	bd70      	pop	{r4, r5, r6, pc}
1000f4fc:	1000db79 	.word	0x1000db79
1000f500:	1001159b 	.word	0x1001159b

1000f504 <gattc_disc_char_ind_parser>:
1000f504:	b570      	push	{r4, r5, r6, lr}
1000f506:	1c15      	adds	r5, r2, #0
1000f508:	0a00      	lsrs	r0, r0, #8
1000f50a:	8010      	strh	r0, [r2, #0]
1000f50c:	784b      	ldrb	r3, [r1, #1]
1000f50e:	780a      	ldrb	r2, [r1, #0]
1000f510:	021b      	lsls	r3, r3, #8
1000f512:	4313      	orrs	r3, r2
1000f514:	806b      	strh	r3, [r5, #2]
1000f516:	78cb      	ldrb	r3, [r1, #3]
1000f518:	788a      	ldrb	r2, [r1, #2]
1000f51a:	021b      	lsls	r3, r3, #8
1000f51c:	4313      	orrs	r3, r2
1000f51e:	80ab      	strh	r3, [r5, #4]
1000f520:	790b      	ldrb	r3, [r1, #4]
1000f522:	1c0c      	adds	r4, r1, #0
1000f524:	71ab      	strb	r3, [r5, #6]
1000f526:	794e      	ldrb	r6, [r1, #5]
1000f528:	4b05      	ldr	r3, [pc, #20]	; (1000f540 <gattc_disc_char_ind_parser+0x3c>)
1000f52a:	1c30      	adds	r0, r6, #0
1000f52c:	4798      	blx	r3
1000f52e:	71e8      	strb	r0, [r5, #7]
1000f530:	1c28      	adds	r0, r5, #0
1000f532:	1c32      	adds	r2, r6, #0
1000f534:	1da1      	adds	r1, r4, #6
1000f536:	4b03      	ldr	r3, [pc, #12]	; (1000f544 <gattc_disc_char_ind_parser+0x40>)
1000f538:	3008      	adds	r0, #8
1000f53a:	4798      	blx	r3
1000f53c:	bd70      	pop	{r4, r5, r6, pc}
1000f53e:	46c0      	nop			; (mov r8, r8)
1000f540:	1000db79 	.word	0x1000db79
1000f544:	1001159b 	.word	0x1001159b

1000f548 <gattc_disc_char_desc_ind_parser>:
1000f548:	b570      	push	{r4, r5, r6, lr}
1000f54a:	1c15      	adds	r5, r2, #0
1000f54c:	0a00      	lsrs	r0, r0, #8
1000f54e:	8010      	strh	r0, [r2, #0]
1000f550:	784b      	ldrb	r3, [r1, #1]
1000f552:	780a      	ldrb	r2, [r1, #0]
1000f554:	021b      	lsls	r3, r3, #8
1000f556:	4313      	orrs	r3, r2
1000f558:	806b      	strh	r3, [r5, #2]
1000f55a:	788e      	ldrb	r6, [r1, #2]
1000f55c:	4b05      	ldr	r3, [pc, #20]	; (1000f574 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f55e:	1c30      	adds	r0, r6, #0
1000f560:	1c0c      	adds	r4, r1, #0
1000f562:	4798      	blx	r3
1000f564:	1c32      	adds	r2, r6, #0
1000f566:	7128      	strb	r0, [r5, #4]
1000f568:	1ce1      	adds	r1, r4, #3
1000f56a:	1d68      	adds	r0, r5, #5
1000f56c:	4b02      	ldr	r3, [pc, #8]	; (1000f578 <gattc_disc_char_desc_ind_parser+0x30>)
1000f56e:	4798      	blx	r3
1000f570:	bd70      	pop	{r4, r5, r6, pc}
1000f572:	46c0      	nop			; (mov r8, r8)
1000f574:	1000db79 	.word	0x1000db79
1000f578:	1001159b 	.word	0x1001159b

1000f57c <gattc_event_ind_and_notification_parser>:
1000f57c:	b510      	push	{r4, lr}
1000f57e:	780c      	ldrb	r4, [r1, #0]
1000f580:	1c13      	adds	r3, r2, #0
1000f582:	2c12      	cmp	r4, #18
1000f584:	d10e      	bne.n	1000f5a4 <gattc_event_ind_and_notification_parser+0x28>
1000f586:	0a00      	lsrs	r0, r0, #8
1000f588:	8010      	strh	r0, [r2, #0]
1000f58a:	788a      	ldrb	r2, [r1, #2]
1000f58c:	709a      	strb	r2, [r3, #2]
1000f58e:	7948      	ldrb	r0, [r1, #5]
1000f590:	790c      	ldrb	r4, [r1, #4]
1000f592:	0200      	lsls	r0, r0, #8
1000f594:	4320      	orrs	r0, r4
1000f596:	8098      	strh	r0, [r3, #4]
1000f598:	3106      	adds	r1, #6
1000f59a:	1d98      	adds	r0, r3, #6
1000f59c:	4b0b      	ldr	r3, [pc, #44]	; (1000f5cc <gattc_event_ind_and_notification_parser+0x50>)
1000f59e:	4798      	blx	r3
1000f5a0:	221b      	movs	r2, #27
1000f5a2:	e010      	b.n	1000f5c6 <gattc_event_ind_and_notification_parser+0x4a>
1000f5a4:	2200      	movs	r2, #0
1000f5a6:	2c13      	cmp	r4, #19
1000f5a8:	d10d      	bne.n	1000f5c6 <gattc_event_ind_and_notification_parser+0x4a>
1000f5aa:	0a00      	lsrs	r0, r0, #8
1000f5ac:	8018      	strh	r0, [r3, #0]
1000f5ae:	788a      	ldrb	r2, [r1, #2]
1000f5b0:	709a      	strb	r2, [r3, #2]
1000f5b2:	7908      	ldrb	r0, [r1, #4]
1000f5b4:	78cc      	ldrb	r4, [r1, #3]
1000f5b6:	0200      	lsls	r0, r0, #8
1000f5b8:	4320      	orrs	r0, r4
1000f5ba:	8098      	strh	r0, [r3, #4]
1000f5bc:	3106      	adds	r1, #6
1000f5be:	1d98      	adds	r0, r3, #6
1000f5c0:	4b02      	ldr	r3, [pc, #8]	; (1000f5cc <gattc_event_ind_and_notification_parser+0x50>)
1000f5c2:	4798      	blx	r3
1000f5c4:	221c      	movs	r2, #28
1000f5c6:	1c10      	adds	r0, r2, #0
1000f5c8:	bd10      	pop	{r4, pc}
1000f5ca:	46c0      	nop			; (mov r8, r8)
1000f5cc:	1001159b 	.word	0x1001159b

1000f5d0 <gattc_complete_evt_handler>:
1000f5d0:	b500      	push	{lr}
1000f5d2:	0a00      	lsrs	r0, r0, #8
1000f5d4:	8010      	strh	r0, [r2, #0]
1000f5d6:	7808      	ldrb	r0, [r1, #0]
1000f5d8:	7090      	strb	r0, [r2, #2]
1000f5da:	784b      	ldrb	r3, [r1, #1]
1000f5dc:	3801      	subs	r0, #1
1000f5de:	70d3      	strb	r3, [r2, #3]
1000f5e0:	2813      	cmp	r0, #19
1000f5e2:	d82c      	bhi.n	1000f63e <gattc_complete_evt_handler+0x6e>
1000f5e4:	f000 f914 	bl	1000f810 <__gnu_thumb1_case_uqi>
1000f5e8:	0a0a0a0c 	.word	0x0a0a0a0c
1000f5ec:	210a0a0a 	.word	0x210a0a0a
1000f5f0:	111f2121 	.word	0x111f2121
1000f5f4:	2b111111 	.word	0x2b111111
1000f5f8:	2919132b 	.word	0x2919132b
1000f5fc:	2017      	movs	r0, #23
1000f5fe:	e01f      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f600:	2024      	movs	r0, #36	; 0x24
1000f602:	2b00      	cmp	r3, #0
1000f604:	d11c      	bne.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f606:	3017      	adds	r0, #23
1000f608:	e01a      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f60a:	2025      	movs	r0, #37	; 0x25
1000f60c:	e018      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f60e:	4a0d      	ldr	r2, [pc, #52]	; (1000f644 <gattc_complete_evt_handler+0x74>)
1000f610:	201d      	movs	r0, #29
1000f612:	6813      	ldr	r3, [r2, #0]
1000f614:	3b01      	subs	r3, #1
1000f616:	6013      	str	r3, [r2, #0]
1000f618:	e012      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f61a:	4a0a      	ldr	r2, [pc, #40]	; (1000f644 <gattc_complete_evt_handler+0x74>)
1000f61c:	201e      	movs	r0, #30
1000f61e:	6813      	ldr	r3, [r2, #0]
1000f620:	3b01      	subs	r3, #1
1000f622:	6013      	str	r3, [r2, #0]
1000f624:	e00c      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f626:	2019      	movs	r0, #25
1000f628:	e00a      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f62a:	203b      	movs	r0, #59	; 0x3b
1000f62c:	2b00      	cmp	r3, #0
1000f62e:	d007      	beq.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f630:	2182      	movs	r1, #130	; 0x82
1000f632:	0089      	lsls	r1, r1, #2
1000f634:	5453      	strb	r3, [r2, r1]
1000f636:	3823      	subs	r0, #35	; 0x23
1000f638:	e002      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f63a:	2021      	movs	r0, #33	; 0x21
1000f63c:	e000      	b.n	1000f640 <gattc_complete_evt_handler+0x70>
1000f63e:	2000      	movs	r0, #0
1000f640:	bd00      	pop	{pc}
1000f642:	46c0      	nop			; (mov r8, r8)
1000f644:	10014eac 	.word	0x10014eac

1000f648 <gattc_event_mtu_changed_ind_parser>:
1000f648:	0a00      	lsrs	r0, r0, #8
1000f64a:	8010      	strh	r0, [r2, #0]
1000f64c:	784b      	ldrb	r3, [r1, #1]
1000f64e:	7809      	ldrb	r1, [r1, #0]
1000f650:	021b      	lsls	r3, r3, #8
1000f652:	430b      	orrs	r3, r1
1000f654:	8053      	strh	r3, [r2, #2]
1000f656:	4770      	bx	lr

1000f658 <gattc_read_ind_parser>:
1000f658:	0a00      	lsrs	r0, r0, #8
1000f65a:	b508      	push	{r3, lr}
1000f65c:	8010      	strh	r0, [r2, #0]
1000f65e:	1c13      	adds	r3, r2, #0
1000f660:	2282      	movs	r2, #130	; 0x82
1000f662:	2000      	movs	r0, #0
1000f664:	0092      	lsls	r2, r2, #2
1000f666:	5498      	strb	r0, [r3, r2]
1000f668:	784a      	ldrb	r2, [r1, #1]
1000f66a:	7808      	ldrb	r0, [r1, #0]
1000f66c:	0212      	lsls	r2, r2, #8
1000f66e:	4302      	orrs	r2, r0
1000f670:	805a      	strh	r2, [r3, #2]
1000f672:	78ca      	ldrb	r2, [r1, #3]
1000f674:	7888      	ldrb	r0, [r1, #2]
1000f676:	0212      	lsls	r2, r2, #8
1000f678:	4302      	orrs	r2, r0
1000f67a:	80da      	strh	r2, [r3, #6]
1000f67c:	794a      	ldrb	r2, [r1, #5]
1000f67e:	7908      	ldrb	r0, [r1, #4]
1000f680:	0212      	lsls	r2, r2, #8
1000f682:	4302      	orrs	r2, r0
1000f684:	809a      	strh	r2, [r3, #4]
1000f686:	3308      	adds	r3, #8
1000f688:	1c18      	adds	r0, r3, #0
1000f68a:	3106      	adds	r1, #6
1000f68c:	4b01      	ldr	r3, [pc, #4]	; (1000f694 <gattc_read_ind_parser+0x3c>)
1000f68e:	4798      	blx	r3
1000f690:	bd08      	pop	{r3, pc}
1000f692:	46c0      	nop			; (mov r8, r8)
1000f694:	1001159b 	.word	0x1001159b

1000f698 <gattc_svc_changed_cfg_ind_parser>:
1000f698:	0a00      	lsrs	r0, r0, #8
1000f69a:	8010      	strh	r0, [r2, #0]
1000f69c:	784b      	ldrb	r3, [r1, #1]
1000f69e:	7809      	ldrb	r1, [r1, #0]
1000f6a0:	021b      	lsls	r3, r3, #8
1000f6a2:	430b      	orrs	r3, r1
1000f6a4:	8053      	strh	r3, [r2, #2]
1000f6a6:	4770      	bx	lr

1000f6a8 <init_gattc_task_module>:
1000f6a8:	2300      	movs	r3, #0
1000f6aa:	4a02      	ldr	r2, [pc, #8]	; (1000f6b4 <init_gattc_task_module+0xc>)
1000f6ac:	8013      	strh	r3, [r2, #0]
1000f6ae:	4a02      	ldr	r2, [pc, #8]	; (1000f6b8 <init_gattc_task_module+0x10>)
1000f6b0:	8013      	strh	r3, [r2, #0]
1000f6b2:	4770      	bx	lr
1000f6b4:	10014ea6 	.word	0x10014ea6
1000f6b8:	10014ea8 	.word	0x10014ea8

1000f6bc <gattm_att_set_value_req_handler>:
1000f6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6be:	466b      	mov	r3, sp
1000f6c0:	1dde      	adds	r6, r3, #7
1000f6c2:	2300      	movs	r3, #0
1000f6c4:	1c0d      	adds	r5, r1, #0
1000f6c6:	210c      	movs	r1, #12
1000f6c8:	270b      	movs	r7, #11
1000f6ca:	4c17      	ldr	r4, [pc, #92]	; (1000f728 <gattm_att_set_value_req_handler+0x6c>)
1000f6cc:	7033      	strb	r3, [r6, #0]
1000f6ce:	70e3      	strb	r3, [r4, #3]
1000f6d0:	4b16      	ldr	r3, [pc, #88]	; (1000f72c <gattm_att_set_value_req_handler+0x70>)
1000f6d2:	7021      	strb	r1, [r4, #0]
1000f6d4:	8819      	ldrh	r1, [r3, #0]
1000f6d6:	881b      	ldrh	r3, [r3, #0]
1000f6d8:	7220      	strb	r0, [r4, #8]
1000f6da:	0a1b      	lsrs	r3, r3, #8
1000f6dc:	7163      	strb	r3, [r4, #5]
1000f6de:	0a00      	lsrs	r0, r0, #8
1000f6e0:	0a2b      	lsrs	r3, r5, #8
1000f6e2:	7121      	strb	r1, [r4, #4]
1000f6e4:	7260      	strb	r0, [r4, #9]
1000f6e6:	1c11      	adds	r1, r2, #0
1000f6e8:	72a5      	strb	r5, [r4, #10]
1000f6ea:	1c2a      	adds	r2, r5, #0
1000f6ec:	72e3      	strb	r3, [r4, #11]
1000f6ee:	350c      	adds	r5, #12
1000f6f0:	4b0f      	ldr	r3, [pc, #60]	; (1000f730 <gattm_att_set_value_req_handler+0x74>)
1000f6f2:	4810      	ldr	r0, [pc, #64]	; (1000f734 <gattm_att_set_value_req_handler+0x78>)
1000f6f4:	7067      	strb	r7, [r4, #1]
1000f6f6:	70a7      	strb	r7, [r4, #2]
1000f6f8:	4798      	blx	r3
1000f6fa:	b2a9      	uxth	r1, r5
1000f6fc:	4b0e      	ldr	r3, [pc, #56]	; (1000f738 <gattm_att_set_value_req_handler+0x7c>)
1000f6fe:	4d0f      	ldr	r5, [pc, #60]	; (1000f73c <gattm_att_set_value_req_handler+0x80>)
1000f700:	1c20      	adds	r0, r4, #0
1000f702:	802b      	strh	r3, [r5, #0]
1000f704:	1c0b      	adds	r3, r1, #0
1000f706:	3b08      	subs	r3, #8
1000f708:	71a3      	strb	r3, [r4, #6]
1000f70a:	121b      	asrs	r3, r3, #8
1000f70c:	71e3      	strb	r3, [r4, #7]
1000f70e:	4b0c      	ldr	r3, [pc, #48]	; (1000f740 <gattm_att_set_value_req_handler+0x84>)
1000f710:	80af      	strh	r7, [r5, #4]
1000f712:	4798      	blx	r3
1000f714:	1c30      	adds	r0, r6, #0
1000f716:	4b0b      	ldr	r3, [pc, #44]	; (1000f744 <gattm_att_set_value_req_handler+0x88>)
1000f718:	4798      	blx	r3
1000f71a:	7833      	ldrb	r3, [r6, #0]
1000f71c:	20e2      	movs	r0, #226	; 0xe2
1000f71e:	2b00      	cmp	r3, #0
1000f720:	d101      	bne.n	1000f726 <gattm_att_set_value_req_handler+0x6a>
1000f722:	68ab      	ldr	r3, [r5, #8]
1000f724:	7898      	ldrb	r0, [r3, #2]
1000f726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f728:	10015ec0 	.word	0x10015ec0
1000f72c:	10015b50 	.word	0x10015b50
1000f730:	1001159b 	.word	0x1001159b
1000f734:	10015ecc 	.word	0x10015ecc
1000f738:	00000b0d 	.word	0x00000b0d
1000f73c:	10015b44 	.word	0x10015b44
1000f740:	1000e1c1 	.word	0x1000e1c1
1000f744:	1000e225 	.word	0x1000e225

1000f748 <gattm_att_get_value_req_handler>:
1000f748:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f74a:	b085      	sub	sp, #20
1000f74c:	9201      	str	r2, [sp, #4]
1000f74e:	220a      	movs	r2, #10
1000f750:	1c04      	adds	r4, r0, #0
1000f752:	481d      	ldr	r0, [pc, #116]	; (1000f7c8 <gattm_att_get_value_req_handler+0x80>)
1000f754:	ab02      	add	r3, sp, #8
1000f756:	1dde      	adds	r6, r3, #7
1000f758:	7002      	strb	r2, [r0, #0]
1000f75a:	2300      	movs	r3, #0
1000f75c:	220b      	movs	r2, #11
1000f75e:	4d1b      	ldr	r5, [pc, #108]	; (1000f7cc <gattm_att_get_value_req_handler+0x84>)
1000f760:	1c0f      	adds	r7, r1, #0
1000f762:	8829      	ldrh	r1, [r5, #0]
1000f764:	882d      	ldrh	r5, [r5, #0]
1000f766:	7101      	strb	r1, [r0, #4]
1000f768:	0a2d      	lsrs	r5, r5, #8
1000f76a:	7145      	strb	r5, [r0, #5]
1000f76c:	0a25      	lsrs	r5, r4, #8
1000f76e:	7245      	strb	r5, [r0, #9]
1000f770:	4917      	ldr	r1, [pc, #92]	; (1000f7d0 <gattm_att_get_value_req_handler+0x88>)
1000f772:	4d18      	ldr	r5, [pc, #96]	; (1000f7d4 <gattm_att_get_value_req_handler+0x8c>)
1000f774:	7033      	strb	r3, [r6, #0]
1000f776:	7042      	strb	r2, [r0, #1]
1000f778:	7082      	strb	r2, [r0, #2]
1000f77a:	70c3      	strb	r3, [r0, #3]
1000f77c:	8029      	strh	r1, [r5, #0]
1000f77e:	80aa      	strh	r2, [r5, #4]
1000f780:	71c3      	strb	r3, [r0, #7]
1000f782:	3a09      	subs	r2, #9
1000f784:	210a      	movs	r1, #10
1000f786:	4b14      	ldr	r3, [pc, #80]	; (1000f7d8 <gattm_att_get_value_req_handler+0x90>)
1000f788:	7182      	strb	r2, [r0, #6]
1000f78a:	7204      	strb	r4, [r0, #8]
1000f78c:	4798      	blx	r3
1000f78e:	1c30      	adds	r0, r6, #0
1000f790:	4b12      	ldr	r3, [pc, #72]	; (1000f7dc <gattm_att_get_value_req_handler+0x94>)
1000f792:	4798      	blx	r3
1000f794:	7833      	ldrb	r3, [r6, #0]
1000f796:	20e2      	movs	r0, #226	; 0xe2
1000f798:	2b00      	cmp	r3, #0
1000f79a:	d112      	bne.n	1000f7c2 <gattm_att_get_value_req_handler+0x7a>
1000f79c:	68a9      	ldr	r1, [r5, #8]
1000f79e:	9801      	ldr	r0, [sp, #4]
1000f7a0:	784d      	ldrb	r5, [r1, #1]
1000f7a2:	780b      	ldrb	r3, [r1, #0]
1000f7a4:	78ca      	ldrb	r2, [r1, #3]
1000f7a6:	022d      	lsls	r5, r5, #8
1000f7a8:	431d      	orrs	r5, r3
1000f7aa:	788b      	ldrb	r3, [r1, #2]
1000f7ac:	0212      	lsls	r2, r2, #8
1000f7ae:	431a      	orrs	r2, r3
1000f7b0:	803a      	strh	r2, [r7, #0]
1000f7b2:	790e      	ldrb	r6, [r1, #4]
1000f7b4:	4b0a      	ldr	r3, [pc, #40]	; (1000f7e0 <gattm_att_get_value_req_handler+0x98>)
1000f7b6:	3105      	adds	r1, #5
1000f7b8:	4798      	blx	r3
1000f7ba:	20e2      	movs	r0, #226	; 0xe2
1000f7bc:	42ac      	cmp	r4, r5
1000f7be:	d100      	bne.n	1000f7c2 <gattm_att_get_value_req_handler+0x7a>
1000f7c0:	1c30      	adds	r0, r6, #0
1000f7c2:	b005      	add	sp, #20
1000f7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7c6:	46c0      	nop			; (mov r8, r8)
1000f7c8:	10015ec0 	.word	0x10015ec0
1000f7cc:	10015b50 	.word	0x10015b50
1000f7d0:	00000b0b 	.word	0x00000b0b
1000f7d4:	10015b44 	.word	0x10015b44
1000f7d8:	1000e1c1 	.word	0x1000e1c1
1000f7dc:	1000e225 	.word	0x1000e225
1000f7e0:	1001159b 	.word	0x1001159b

1000f7e4 <htpt_enable_rsp_handler>:
1000f7e4:	780b      	ldrb	r3, [r1, #0]
1000f7e6:	7013      	strb	r3, [r2, #0]
1000f7e8:	784b      	ldrb	r3, [r1, #1]
1000f7ea:	7053      	strb	r3, [r2, #1]
1000f7ec:	4770      	bx	lr

1000f7ee <htpt_temp_send_rsp_handler>:
1000f7ee:	780b      	ldrb	r3, [r1, #0]
1000f7f0:	7013      	strb	r3, [r2, #0]
1000f7f2:	4770      	bx	lr

1000f7f4 <htpt_meas_intv_upd_rsp_handler>:
1000f7f4:	780b      	ldrb	r3, [r1, #0]
1000f7f6:	7013      	strb	r3, [r2, #0]
1000f7f8:	4770      	bx	lr

1000f7fa <htpt_meas_intv_chg_req_ind_handler>:
1000f7fa:	78cb      	ldrb	r3, [r1, #3]
1000f7fc:	7889      	ldrb	r1, [r1, #2]
1000f7fe:	021b      	lsls	r3, r3, #8
1000f800:	430b      	orrs	r3, r1
1000f802:	8013      	strh	r3, [r2, #0]
1000f804:	4770      	bx	lr

1000f806 <htpt_cfg_indntf_ind_handler>:
1000f806:	780b      	ldrb	r3, [r1, #0]
1000f808:	7013      	strb	r3, [r2, #0]
1000f80a:	784b      	ldrb	r3, [r1, #1]
1000f80c:	7053      	strb	r3, [r2, #1]
1000f80e:	4770      	bx	lr

1000f810 <__gnu_thumb1_case_uqi>:
1000f810:	b402      	push	{r1}
1000f812:	4671      	mov	r1, lr
1000f814:	0849      	lsrs	r1, r1, #1
1000f816:	0049      	lsls	r1, r1, #1
1000f818:	5c09      	ldrb	r1, [r1, r0]
1000f81a:	0049      	lsls	r1, r1, #1
1000f81c:	448e      	add	lr, r1
1000f81e:	bc02      	pop	{r1}
1000f820:	4770      	bx	lr
1000f822:	46c0      	nop			; (mov r8, r8)

1000f824 <__aeabi_uidiv>:
1000f824:	2200      	movs	r2, #0
1000f826:	0843      	lsrs	r3, r0, #1
1000f828:	428b      	cmp	r3, r1
1000f82a:	d374      	bcc.n	1000f916 <__aeabi_uidiv+0xf2>
1000f82c:	0903      	lsrs	r3, r0, #4
1000f82e:	428b      	cmp	r3, r1
1000f830:	d35f      	bcc.n	1000f8f2 <__aeabi_uidiv+0xce>
1000f832:	0a03      	lsrs	r3, r0, #8
1000f834:	428b      	cmp	r3, r1
1000f836:	d344      	bcc.n	1000f8c2 <__aeabi_uidiv+0x9e>
1000f838:	0b03      	lsrs	r3, r0, #12
1000f83a:	428b      	cmp	r3, r1
1000f83c:	d328      	bcc.n	1000f890 <__aeabi_uidiv+0x6c>
1000f83e:	0c03      	lsrs	r3, r0, #16
1000f840:	428b      	cmp	r3, r1
1000f842:	d30d      	bcc.n	1000f860 <__aeabi_uidiv+0x3c>
1000f844:	22ff      	movs	r2, #255	; 0xff
1000f846:	0209      	lsls	r1, r1, #8
1000f848:	ba12      	rev	r2, r2
1000f84a:	0c03      	lsrs	r3, r0, #16
1000f84c:	428b      	cmp	r3, r1
1000f84e:	d302      	bcc.n	1000f856 <__aeabi_uidiv+0x32>
1000f850:	1212      	asrs	r2, r2, #8
1000f852:	0209      	lsls	r1, r1, #8
1000f854:	d065      	beq.n	1000f922 <__aeabi_uidiv+0xfe>
1000f856:	0b03      	lsrs	r3, r0, #12
1000f858:	428b      	cmp	r3, r1
1000f85a:	d319      	bcc.n	1000f890 <__aeabi_uidiv+0x6c>
1000f85c:	e000      	b.n	1000f860 <__aeabi_uidiv+0x3c>
1000f85e:	0a09      	lsrs	r1, r1, #8
1000f860:	0bc3      	lsrs	r3, r0, #15
1000f862:	428b      	cmp	r3, r1
1000f864:	d301      	bcc.n	1000f86a <__aeabi_uidiv+0x46>
1000f866:	03cb      	lsls	r3, r1, #15
1000f868:	1ac0      	subs	r0, r0, r3
1000f86a:	4152      	adcs	r2, r2
1000f86c:	0b83      	lsrs	r3, r0, #14
1000f86e:	428b      	cmp	r3, r1
1000f870:	d301      	bcc.n	1000f876 <__aeabi_uidiv+0x52>
1000f872:	038b      	lsls	r3, r1, #14
1000f874:	1ac0      	subs	r0, r0, r3
1000f876:	4152      	adcs	r2, r2
1000f878:	0b43      	lsrs	r3, r0, #13
1000f87a:	428b      	cmp	r3, r1
1000f87c:	d301      	bcc.n	1000f882 <__aeabi_uidiv+0x5e>
1000f87e:	034b      	lsls	r3, r1, #13
1000f880:	1ac0      	subs	r0, r0, r3
1000f882:	4152      	adcs	r2, r2
1000f884:	0b03      	lsrs	r3, r0, #12
1000f886:	428b      	cmp	r3, r1
1000f888:	d301      	bcc.n	1000f88e <__aeabi_uidiv+0x6a>
1000f88a:	030b      	lsls	r3, r1, #12
1000f88c:	1ac0      	subs	r0, r0, r3
1000f88e:	4152      	adcs	r2, r2
1000f890:	0ac3      	lsrs	r3, r0, #11
1000f892:	428b      	cmp	r3, r1
1000f894:	d301      	bcc.n	1000f89a <__aeabi_uidiv+0x76>
1000f896:	02cb      	lsls	r3, r1, #11
1000f898:	1ac0      	subs	r0, r0, r3
1000f89a:	4152      	adcs	r2, r2
1000f89c:	0a83      	lsrs	r3, r0, #10
1000f89e:	428b      	cmp	r3, r1
1000f8a0:	d301      	bcc.n	1000f8a6 <__aeabi_uidiv+0x82>
1000f8a2:	028b      	lsls	r3, r1, #10
1000f8a4:	1ac0      	subs	r0, r0, r3
1000f8a6:	4152      	adcs	r2, r2
1000f8a8:	0a43      	lsrs	r3, r0, #9
1000f8aa:	428b      	cmp	r3, r1
1000f8ac:	d301      	bcc.n	1000f8b2 <__aeabi_uidiv+0x8e>
1000f8ae:	024b      	lsls	r3, r1, #9
1000f8b0:	1ac0      	subs	r0, r0, r3
1000f8b2:	4152      	adcs	r2, r2
1000f8b4:	0a03      	lsrs	r3, r0, #8
1000f8b6:	428b      	cmp	r3, r1
1000f8b8:	d301      	bcc.n	1000f8be <__aeabi_uidiv+0x9a>
1000f8ba:	020b      	lsls	r3, r1, #8
1000f8bc:	1ac0      	subs	r0, r0, r3
1000f8be:	4152      	adcs	r2, r2
1000f8c0:	d2cd      	bcs.n	1000f85e <__aeabi_uidiv+0x3a>
1000f8c2:	09c3      	lsrs	r3, r0, #7
1000f8c4:	428b      	cmp	r3, r1
1000f8c6:	d301      	bcc.n	1000f8cc <__aeabi_uidiv+0xa8>
1000f8c8:	01cb      	lsls	r3, r1, #7
1000f8ca:	1ac0      	subs	r0, r0, r3
1000f8cc:	4152      	adcs	r2, r2
1000f8ce:	0983      	lsrs	r3, r0, #6
1000f8d0:	428b      	cmp	r3, r1
1000f8d2:	d301      	bcc.n	1000f8d8 <__aeabi_uidiv+0xb4>
1000f8d4:	018b      	lsls	r3, r1, #6
1000f8d6:	1ac0      	subs	r0, r0, r3
1000f8d8:	4152      	adcs	r2, r2
1000f8da:	0943      	lsrs	r3, r0, #5
1000f8dc:	428b      	cmp	r3, r1
1000f8de:	d301      	bcc.n	1000f8e4 <__aeabi_uidiv+0xc0>
1000f8e0:	014b      	lsls	r3, r1, #5
1000f8e2:	1ac0      	subs	r0, r0, r3
1000f8e4:	4152      	adcs	r2, r2
1000f8e6:	0903      	lsrs	r3, r0, #4
1000f8e8:	428b      	cmp	r3, r1
1000f8ea:	d301      	bcc.n	1000f8f0 <__aeabi_uidiv+0xcc>
1000f8ec:	010b      	lsls	r3, r1, #4
1000f8ee:	1ac0      	subs	r0, r0, r3
1000f8f0:	4152      	adcs	r2, r2
1000f8f2:	08c3      	lsrs	r3, r0, #3
1000f8f4:	428b      	cmp	r3, r1
1000f8f6:	d301      	bcc.n	1000f8fc <__aeabi_uidiv+0xd8>
1000f8f8:	00cb      	lsls	r3, r1, #3
1000f8fa:	1ac0      	subs	r0, r0, r3
1000f8fc:	4152      	adcs	r2, r2
1000f8fe:	0883      	lsrs	r3, r0, #2
1000f900:	428b      	cmp	r3, r1
1000f902:	d301      	bcc.n	1000f908 <__aeabi_uidiv+0xe4>
1000f904:	008b      	lsls	r3, r1, #2
1000f906:	1ac0      	subs	r0, r0, r3
1000f908:	4152      	adcs	r2, r2
1000f90a:	0843      	lsrs	r3, r0, #1
1000f90c:	428b      	cmp	r3, r1
1000f90e:	d301      	bcc.n	1000f914 <__aeabi_uidiv+0xf0>
1000f910:	004b      	lsls	r3, r1, #1
1000f912:	1ac0      	subs	r0, r0, r3
1000f914:	4152      	adcs	r2, r2
1000f916:	1a41      	subs	r1, r0, r1
1000f918:	d200      	bcs.n	1000f91c <__aeabi_uidiv+0xf8>
1000f91a:	4601      	mov	r1, r0
1000f91c:	4152      	adcs	r2, r2
1000f91e:	4610      	mov	r0, r2
1000f920:	4770      	bx	lr
1000f922:	e7ff      	b.n	1000f924 <__aeabi_uidiv+0x100>
1000f924:	b501      	push	{r0, lr}
1000f926:	2000      	movs	r0, #0
1000f928:	f000 f8f0 	bl	1000fb0c <__aeabi_idiv0>
1000f92c:	bd02      	pop	{r1, pc}
1000f92e:	46c0      	nop			; (mov r8, r8)

1000f930 <__aeabi_uidivmod>:
1000f930:	2900      	cmp	r1, #0
1000f932:	d0f7      	beq.n	1000f924 <__aeabi_uidiv+0x100>
1000f934:	e776      	b.n	1000f824 <__aeabi_uidiv>
1000f936:	4770      	bx	lr

1000f938 <__aeabi_idiv>:
1000f938:	4603      	mov	r3, r0
1000f93a:	430b      	orrs	r3, r1
1000f93c:	d47f      	bmi.n	1000fa3e <__aeabi_idiv+0x106>
1000f93e:	2200      	movs	r2, #0
1000f940:	0843      	lsrs	r3, r0, #1
1000f942:	428b      	cmp	r3, r1
1000f944:	d374      	bcc.n	1000fa30 <__aeabi_idiv+0xf8>
1000f946:	0903      	lsrs	r3, r0, #4
1000f948:	428b      	cmp	r3, r1
1000f94a:	d35f      	bcc.n	1000fa0c <__aeabi_idiv+0xd4>
1000f94c:	0a03      	lsrs	r3, r0, #8
1000f94e:	428b      	cmp	r3, r1
1000f950:	d344      	bcc.n	1000f9dc <__aeabi_idiv+0xa4>
1000f952:	0b03      	lsrs	r3, r0, #12
1000f954:	428b      	cmp	r3, r1
1000f956:	d328      	bcc.n	1000f9aa <__aeabi_idiv+0x72>
1000f958:	0c03      	lsrs	r3, r0, #16
1000f95a:	428b      	cmp	r3, r1
1000f95c:	d30d      	bcc.n	1000f97a <__aeabi_idiv+0x42>
1000f95e:	22ff      	movs	r2, #255	; 0xff
1000f960:	0209      	lsls	r1, r1, #8
1000f962:	ba12      	rev	r2, r2
1000f964:	0c03      	lsrs	r3, r0, #16
1000f966:	428b      	cmp	r3, r1
1000f968:	d302      	bcc.n	1000f970 <__aeabi_idiv+0x38>
1000f96a:	1212      	asrs	r2, r2, #8
1000f96c:	0209      	lsls	r1, r1, #8
1000f96e:	d065      	beq.n	1000fa3c <__aeabi_idiv+0x104>
1000f970:	0b03      	lsrs	r3, r0, #12
1000f972:	428b      	cmp	r3, r1
1000f974:	d319      	bcc.n	1000f9aa <__aeabi_idiv+0x72>
1000f976:	e000      	b.n	1000f97a <__aeabi_idiv+0x42>
1000f978:	0a09      	lsrs	r1, r1, #8
1000f97a:	0bc3      	lsrs	r3, r0, #15
1000f97c:	428b      	cmp	r3, r1
1000f97e:	d301      	bcc.n	1000f984 <__aeabi_idiv+0x4c>
1000f980:	03cb      	lsls	r3, r1, #15
1000f982:	1ac0      	subs	r0, r0, r3
1000f984:	4152      	adcs	r2, r2
1000f986:	0b83      	lsrs	r3, r0, #14
1000f988:	428b      	cmp	r3, r1
1000f98a:	d301      	bcc.n	1000f990 <__aeabi_idiv+0x58>
1000f98c:	038b      	lsls	r3, r1, #14
1000f98e:	1ac0      	subs	r0, r0, r3
1000f990:	4152      	adcs	r2, r2
1000f992:	0b43      	lsrs	r3, r0, #13
1000f994:	428b      	cmp	r3, r1
1000f996:	d301      	bcc.n	1000f99c <__aeabi_idiv+0x64>
1000f998:	034b      	lsls	r3, r1, #13
1000f99a:	1ac0      	subs	r0, r0, r3
1000f99c:	4152      	adcs	r2, r2
1000f99e:	0b03      	lsrs	r3, r0, #12
1000f9a0:	428b      	cmp	r3, r1
1000f9a2:	d301      	bcc.n	1000f9a8 <__aeabi_idiv+0x70>
1000f9a4:	030b      	lsls	r3, r1, #12
1000f9a6:	1ac0      	subs	r0, r0, r3
1000f9a8:	4152      	adcs	r2, r2
1000f9aa:	0ac3      	lsrs	r3, r0, #11
1000f9ac:	428b      	cmp	r3, r1
1000f9ae:	d301      	bcc.n	1000f9b4 <__aeabi_idiv+0x7c>
1000f9b0:	02cb      	lsls	r3, r1, #11
1000f9b2:	1ac0      	subs	r0, r0, r3
1000f9b4:	4152      	adcs	r2, r2
1000f9b6:	0a83      	lsrs	r3, r0, #10
1000f9b8:	428b      	cmp	r3, r1
1000f9ba:	d301      	bcc.n	1000f9c0 <__aeabi_idiv+0x88>
1000f9bc:	028b      	lsls	r3, r1, #10
1000f9be:	1ac0      	subs	r0, r0, r3
1000f9c0:	4152      	adcs	r2, r2
1000f9c2:	0a43      	lsrs	r3, r0, #9
1000f9c4:	428b      	cmp	r3, r1
1000f9c6:	d301      	bcc.n	1000f9cc <__aeabi_idiv+0x94>
1000f9c8:	024b      	lsls	r3, r1, #9
1000f9ca:	1ac0      	subs	r0, r0, r3
1000f9cc:	4152      	adcs	r2, r2
1000f9ce:	0a03      	lsrs	r3, r0, #8
1000f9d0:	428b      	cmp	r3, r1
1000f9d2:	d301      	bcc.n	1000f9d8 <__aeabi_idiv+0xa0>
1000f9d4:	020b      	lsls	r3, r1, #8
1000f9d6:	1ac0      	subs	r0, r0, r3
1000f9d8:	4152      	adcs	r2, r2
1000f9da:	d2cd      	bcs.n	1000f978 <__aeabi_idiv+0x40>
1000f9dc:	09c3      	lsrs	r3, r0, #7
1000f9de:	428b      	cmp	r3, r1
1000f9e0:	d301      	bcc.n	1000f9e6 <__aeabi_idiv+0xae>
1000f9e2:	01cb      	lsls	r3, r1, #7
1000f9e4:	1ac0      	subs	r0, r0, r3
1000f9e6:	4152      	adcs	r2, r2
1000f9e8:	0983      	lsrs	r3, r0, #6
1000f9ea:	428b      	cmp	r3, r1
1000f9ec:	d301      	bcc.n	1000f9f2 <__aeabi_idiv+0xba>
1000f9ee:	018b      	lsls	r3, r1, #6
1000f9f0:	1ac0      	subs	r0, r0, r3
1000f9f2:	4152      	adcs	r2, r2
1000f9f4:	0943      	lsrs	r3, r0, #5
1000f9f6:	428b      	cmp	r3, r1
1000f9f8:	d301      	bcc.n	1000f9fe <__aeabi_idiv+0xc6>
1000f9fa:	014b      	lsls	r3, r1, #5
1000f9fc:	1ac0      	subs	r0, r0, r3
1000f9fe:	4152      	adcs	r2, r2
1000fa00:	0903      	lsrs	r3, r0, #4
1000fa02:	428b      	cmp	r3, r1
1000fa04:	d301      	bcc.n	1000fa0a <__aeabi_idiv+0xd2>
1000fa06:	010b      	lsls	r3, r1, #4
1000fa08:	1ac0      	subs	r0, r0, r3
1000fa0a:	4152      	adcs	r2, r2
1000fa0c:	08c3      	lsrs	r3, r0, #3
1000fa0e:	428b      	cmp	r3, r1
1000fa10:	d301      	bcc.n	1000fa16 <__aeabi_idiv+0xde>
1000fa12:	00cb      	lsls	r3, r1, #3
1000fa14:	1ac0      	subs	r0, r0, r3
1000fa16:	4152      	adcs	r2, r2
1000fa18:	0883      	lsrs	r3, r0, #2
1000fa1a:	428b      	cmp	r3, r1
1000fa1c:	d301      	bcc.n	1000fa22 <__aeabi_idiv+0xea>
1000fa1e:	008b      	lsls	r3, r1, #2
1000fa20:	1ac0      	subs	r0, r0, r3
1000fa22:	4152      	adcs	r2, r2
1000fa24:	0843      	lsrs	r3, r0, #1
1000fa26:	428b      	cmp	r3, r1
1000fa28:	d301      	bcc.n	1000fa2e <__aeabi_idiv+0xf6>
1000fa2a:	004b      	lsls	r3, r1, #1
1000fa2c:	1ac0      	subs	r0, r0, r3
1000fa2e:	4152      	adcs	r2, r2
1000fa30:	1a41      	subs	r1, r0, r1
1000fa32:	d200      	bcs.n	1000fa36 <__aeabi_idiv+0xfe>
1000fa34:	4601      	mov	r1, r0
1000fa36:	4152      	adcs	r2, r2
1000fa38:	4610      	mov	r0, r2
1000fa3a:	4770      	bx	lr
1000fa3c:	e05d      	b.n	1000fafa <__aeabi_idiv+0x1c2>
1000fa3e:	0fca      	lsrs	r2, r1, #31
1000fa40:	d000      	beq.n	1000fa44 <__aeabi_idiv+0x10c>
1000fa42:	4249      	negs	r1, r1
1000fa44:	1003      	asrs	r3, r0, #32
1000fa46:	d300      	bcc.n	1000fa4a <__aeabi_idiv+0x112>
1000fa48:	4240      	negs	r0, r0
1000fa4a:	4053      	eors	r3, r2
1000fa4c:	2200      	movs	r2, #0
1000fa4e:	469c      	mov	ip, r3
1000fa50:	0903      	lsrs	r3, r0, #4
1000fa52:	428b      	cmp	r3, r1
1000fa54:	d32d      	bcc.n	1000fab2 <__aeabi_idiv+0x17a>
1000fa56:	0a03      	lsrs	r3, r0, #8
1000fa58:	428b      	cmp	r3, r1
1000fa5a:	d312      	bcc.n	1000fa82 <__aeabi_idiv+0x14a>
1000fa5c:	22fc      	movs	r2, #252	; 0xfc
1000fa5e:	0189      	lsls	r1, r1, #6
1000fa60:	ba12      	rev	r2, r2
1000fa62:	0a03      	lsrs	r3, r0, #8
1000fa64:	428b      	cmp	r3, r1
1000fa66:	d30c      	bcc.n	1000fa82 <__aeabi_idiv+0x14a>
1000fa68:	0189      	lsls	r1, r1, #6
1000fa6a:	1192      	asrs	r2, r2, #6
1000fa6c:	428b      	cmp	r3, r1
1000fa6e:	d308      	bcc.n	1000fa82 <__aeabi_idiv+0x14a>
1000fa70:	0189      	lsls	r1, r1, #6
1000fa72:	1192      	asrs	r2, r2, #6
1000fa74:	428b      	cmp	r3, r1
1000fa76:	d304      	bcc.n	1000fa82 <__aeabi_idiv+0x14a>
1000fa78:	0189      	lsls	r1, r1, #6
1000fa7a:	d03a      	beq.n	1000faf2 <__aeabi_idiv+0x1ba>
1000fa7c:	1192      	asrs	r2, r2, #6
1000fa7e:	e000      	b.n	1000fa82 <__aeabi_idiv+0x14a>
1000fa80:	0989      	lsrs	r1, r1, #6
1000fa82:	09c3      	lsrs	r3, r0, #7
1000fa84:	428b      	cmp	r3, r1
1000fa86:	d301      	bcc.n	1000fa8c <__aeabi_idiv+0x154>
1000fa88:	01cb      	lsls	r3, r1, #7
1000fa8a:	1ac0      	subs	r0, r0, r3
1000fa8c:	4152      	adcs	r2, r2
1000fa8e:	0983      	lsrs	r3, r0, #6
1000fa90:	428b      	cmp	r3, r1
1000fa92:	d301      	bcc.n	1000fa98 <__aeabi_idiv+0x160>
1000fa94:	018b      	lsls	r3, r1, #6
1000fa96:	1ac0      	subs	r0, r0, r3
1000fa98:	4152      	adcs	r2, r2
1000fa9a:	0943      	lsrs	r3, r0, #5
1000fa9c:	428b      	cmp	r3, r1
1000fa9e:	d301      	bcc.n	1000faa4 <__aeabi_idiv+0x16c>
1000faa0:	014b      	lsls	r3, r1, #5
1000faa2:	1ac0      	subs	r0, r0, r3
1000faa4:	4152      	adcs	r2, r2
1000faa6:	0903      	lsrs	r3, r0, #4
1000faa8:	428b      	cmp	r3, r1
1000faaa:	d301      	bcc.n	1000fab0 <__aeabi_idiv+0x178>
1000faac:	010b      	lsls	r3, r1, #4
1000faae:	1ac0      	subs	r0, r0, r3
1000fab0:	4152      	adcs	r2, r2
1000fab2:	08c3      	lsrs	r3, r0, #3
1000fab4:	428b      	cmp	r3, r1
1000fab6:	d301      	bcc.n	1000fabc <__aeabi_idiv+0x184>
1000fab8:	00cb      	lsls	r3, r1, #3
1000faba:	1ac0      	subs	r0, r0, r3
1000fabc:	4152      	adcs	r2, r2
1000fabe:	0883      	lsrs	r3, r0, #2
1000fac0:	428b      	cmp	r3, r1
1000fac2:	d301      	bcc.n	1000fac8 <__aeabi_idiv+0x190>
1000fac4:	008b      	lsls	r3, r1, #2
1000fac6:	1ac0      	subs	r0, r0, r3
1000fac8:	4152      	adcs	r2, r2
1000faca:	d2d9      	bcs.n	1000fa80 <__aeabi_idiv+0x148>
1000facc:	0843      	lsrs	r3, r0, #1
1000face:	428b      	cmp	r3, r1
1000fad0:	d301      	bcc.n	1000fad6 <__aeabi_idiv+0x19e>
1000fad2:	004b      	lsls	r3, r1, #1
1000fad4:	1ac0      	subs	r0, r0, r3
1000fad6:	4152      	adcs	r2, r2
1000fad8:	1a41      	subs	r1, r0, r1
1000fada:	d200      	bcs.n	1000fade <__aeabi_idiv+0x1a6>
1000fadc:	4601      	mov	r1, r0
1000fade:	4663      	mov	r3, ip
1000fae0:	4152      	adcs	r2, r2
1000fae2:	105b      	asrs	r3, r3, #1
1000fae4:	4610      	mov	r0, r2
1000fae6:	d301      	bcc.n	1000faec <__aeabi_idiv+0x1b4>
1000fae8:	4240      	negs	r0, r0
1000faea:	2b00      	cmp	r3, #0
1000faec:	d500      	bpl.n	1000faf0 <__aeabi_idiv+0x1b8>
1000faee:	4249      	negs	r1, r1
1000faf0:	4770      	bx	lr
1000faf2:	4663      	mov	r3, ip
1000faf4:	105b      	asrs	r3, r3, #1
1000faf6:	d300      	bcc.n	1000fafa <__aeabi_idiv+0x1c2>
1000faf8:	4240      	negs	r0, r0
1000fafa:	b501      	push	{r0, lr}
1000fafc:	2000      	movs	r0, #0
1000fafe:	f000 f805 	bl	1000fb0c <__aeabi_idiv0>
1000fb02:	bd02      	pop	{r1, pc}

1000fb04 <__aeabi_idivmod>:
1000fb04:	2900      	cmp	r1, #0
1000fb06:	d0f8      	beq.n	1000fafa <__aeabi_idiv+0x1c2>
1000fb08:	e716      	b.n	1000f938 <__aeabi_idiv>
1000fb0a:	4770      	bx	lr

1000fb0c <__aeabi_idiv0>:
1000fb0c:	4770      	bx	lr
1000fb0e:	46c0      	nop			; (mov r8, r8)

1000fb10 <__aeabi_cdrcmple>:
1000fb10:	4684      	mov	ip, r0
1000fb12:	1c10      	adds	r0, r2, #0
1000fb14:	4662      	mov	r2, ip
1000fb16:	468c      	mov	ip, r1
1000fb18:	1c19      	adds	r1, r3, #0
1000fb1a:	4663      	mov	r3, ip
1000fb1c:	e000      	b.n	1000fb20 <__aeabi_cdcmpeq>
1000fb1e:	46c0      	nop			; (mov r8, r8)

1000fb20 <__aeabi_cdcmpeq>:
1000fb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000fb22:	f000 fe37 	bl	10010794 <__ledf2>
1000fb26:	2800      	cmp	r0, #0
1000fb28:	d401      	bmi.n	1000fb2e <__aeabi_cdcmpeq+0xe>
1000fb2a:	2100      	movs	r1, #0
1000fb2c:	42c8      	cmn	r0, r1
1000fb2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000fb30 <__aeabi_dcmpeq>:
1000fb30:	b510      	push	{r4, lr}
1000fb32:	f000 fd8b 	bl	1001064c <__eqdf2>
1000fb36:	4240      	negs	r0, r0
1000fb38:	3001      	adds	r0, #1
1000fb3a:	bd10      	pop	{r4, pc}

1000fb3c <__aeabi_dcmplt>:
1000fb3c:	b510      	push	{r4, lr}
1000fb3e:	f000 fe29 	bl	10010794 <__ledf2>
1000fb42:	2800      	cmp	r0, #0
1000fb44:	db01      	blt.n	1000fb4a <__aeabi_dcmplt+0xe>
1000fb46:	2000      	movs	r0, #0
1000fb48:	bd10      	pop	{r4, pc}
1000fb4a:	2001      	movs	r0, #1
1000fb4c:	bd10      	pop	{r4, pc}
1000fb4e:	46c0      	nop			; (mov r8, r8)

1000fb50 <__aeabi_dcmple>:
1000fb50:	b510      	push	{r4, lr}
1000fb52:	f000 fe1f 	bl	10010794 <__ledf2>
1000fb56:	2800      	cmp	r0, #0
1000fb58:	dd01      	ble.n	1000fb5e <__aeabi_dcmple+0xe>
1000fb5a:	2000      	movs	r0, #0
1000fb5c:	bd10      	pop	{r4, pc}
1000fb5e:	2001      	movs	r0, #1
1000fb60:	bd10      	pop	{r4, pc}
1000fb62:	46c0      	nop			; (mov r8, r8)

1000fb64 <__aeabi_dcmpgt>:
1000fb64:	b510      	push	{r4, lr}
1000fb66:	f000 fdb1 	bl	100106cc <__gedf2>
1000fb6a:	2800      	cmp	r0, #0
1000fb6c:	dc01      	bgt.n	1000fb72 <__aeabi_dcmpgt+0xe>
1000fb6e:	2000      	movs	r0, #0
1000fb70:	bd10      	pop	{r4, pc}
1000fb72:	2001      	movs	r0, #1
1000fb74:	bd10      	pop	{r4, pc}
1000fb76:	46c0      	nop			; (mov r8, r8)

1000fb78 <__aeabi_dcmpge>:
1000fb78:	b510      	push	{r4, lr}
1000fb7a:	f000 fda7 	bl	100106cc <__gedf2>
1000fb7e:	2800      	cmp	r0, #0
1000fb80:	da01      	bge.n	1000fb86 <__aeabi_dcmpge+0xe>
1000fb82:	2000      	movs	r0, #0
1000fb84:	bd10      	pop	{r4, pc}
1000fb86:	2001      	movs	r0, #1
1000fb88:	bd10      	pop	{r4, pc}
1000fb8a:	46c0      	nop			; (mov r8, r8)

1000fb8c <__aeabi_cfrcmple>:
1000fb8c:	4684      	mov	ip, r0
1000fb8e:	1c08      	adds	r0, r1, #0
1000fb90:	4661      	mov	r1, ip
1000fb92:	e7ff      	b.n	1000fb94 <__aeabi_cfcmpeq>

1000fb94 <__aeabi_cfcmpeq>:
1000fb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000fb96:	f000 fa1b 	bl	1000ffd0 <__lesf2>
1000fb9a:	2800      	cmp	r0, #0
1000fb9c:	d401      	bmi.n	1000fba2 <__aeabi_cfcmpeq+0xe>
1000fb9e:	2100      	movs	r1, #0
1000fba0:	42c8      	cmn	r0, r1
1000fba2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000fba4 <__aeabi_fcmpeq>:
1000fba4:	b510      	push	{r4, lr}
1000fba6:	f000 f9a7 	bl	1000fef8 <__eqsf2>
1000fbaa:	4240      	negs	r0, r0
1000fbac:	3001      	adds	r0, #1
1000fbae:	bd10      	pop	{r4, pc}

1000fbb0 <__aeabi_fcmplt>:
1000fbb0:	b510      	push	{r4, lr}
1000fbb2:	f000 fa0d 	bl	1000ffd0 <__lesf2>
1000fbb6:	2800      	cmp	r0, #0
1000fbb8:	db01      	blt.n	1000fbbe <__aeabi_fcmplt+0xe>
1000fbba:	2000      	movs	r0, #0
1000fbbc:	bd10      	pop	{r4, pc}
1000fbbe:	2001      	movs	r0, #1
1000fbc0:	bd10      	pop	{r4, pc}
1000fbc2:	46c0      	nop			; (mov r8, r8)

1000fbc4 <__aeabi_fcmple>:
1000fbc4:	b510      	push	{r4, lr}
1000fbc6:	f000 fa03 	bl	1000ffd0 <__lesf2>
1000fbca:	2800      	cmp	r0, #0
1000fbcc:	dd01      	ble.n	1000fbd2 <__aeabi_fcmple+0xe>
1000fbce:	2000      	movs	r0, #0
1000fbd0:	bd10      	pop	{r4, pc}
1000fbd2:	2001      	movs	r0, #1
1000fbd4:	bd10      	pop	{r4, pc}
1000fbd6:	46c0      	nop			; (mov r8, r8)

1000fbd8 <__aeabi_fcmpgt>:
1000fbd8:	b510      	push	{r4, lr}
1000fbda:	f000 f9b5 	bl	1000ff48 <__gesf2>
1000fbde:	2800      	cmp	r0, #0
1000fbe0:	dc01      	bgt.n	1000fbe6 <__aeabi_fcmpgt+0xe>
1000fbe2:	2000      	movs	r0, #0
1000fbe4:	bd10      	pop	{r4, pc}
1000fbe6:	2001      	movs	r0, #1
1000fbe8:	bd10      	pop	{r4, pc}
1000fbea:	46c0      	nop			; (mov r8, r8)

1000fbec <__aeabi_fcmpge>:
1000fbec:	b510      	push	{r4, lr}
1000fbee:	f000 f9ab 	bl	1000ff48 <__gesf2>
1000fbf2:	2800      	cmp	r0, #0
1000fbf4:	da01      	bge.n	1000fbfa <__aeabi_fcmpge+0xe>
1000fbf6:	2000      	movs	r0, #0
1000fbf8:	bd10      	pop	{r4, pc}
1000fbfa:	2001      	movs	r0, #1
1000fbfc:	bd10      	pop	{r4, pc}
1000fbfe:	46c0      	nop			; (mov r8, r8)

1000fc00 <__aeabi_lmul>:
1000fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc02:	464f      	mov	r7, r9
1000fc04:	4646      	mov	r6, r8
1000fc06:	b4c0      	push	{r6, r7}
1000fc08:	0416      	lsls	r6, r2, #16
1000fc0a:	0c36      	lsrs	r6, r6, #16
1000fc0c:	4699      	mov	r9, r3
1000fc0e:	0033      	movs	r3, r6
1000fc10:	0405      	lsls	r5, r0, #16
1000fc12:	0c2c      	lsrs	r4, r5, #16
1000fc14:	0c07      	lsrs	r7, r0, #16
1000fc16:	0c15      	lsrs	r5, r2, #16
1000fc18:	4363      	muls	r3, r4
1000fc1a:	437e      	muls	r6, r7
1000fc1c:	436f      	muls	r7, r5
1000fc1e:	4365      	muls	r5, r4
1000fc20:	0c1c      	lsrs	r4, r3, #16
1000fc22:	19ad      	adds	r5, r5, r6
1000fc24:	1964      	adds	r4, r4, r5
1000fc26:	469c      	mov	ip, r3
1000fc28:	42a6      	cmp	r6, r4
1000fc2a:	d903      	bls.n	1000fc34 <__aeabi_lmul+0x34>
1000fc2c:	2380      	movs	r3, #128	; 0x80
1000fc2e:	025b      	lsls	r3, r3, #9
1000fc30:	4698      	mov	r8, r3
1000fc32:	4447      	add	r7, r8
1000fc34:	4663      	mov	r3, ip
1000fc36:	0c25      	lsrs	r5, r4, #16
1000fc38:	19ef      	adds	r7, r5, r7
1000fc3a:	041d      	lsls	r5, r3, #16
1000fc3c:	464b      	mov	r3, r9
1000fc3e:	434a      	muls	r2, r1
1000fc40:	4343      	muls	r3, r0
1000fc42:	0c2d      	lsrs	r5, r5, #16
1000fc44:	0424      	lsls	r4, r4, #16
1000fc46:	1964      	adds	r4, r4, r5
1000fc48:	1899      	adds	r1, r3, r2
1000fc4a:	19c9      	adds	r1, r1, r7
1000fc4c:	0020      	movs	r0, r4
1000fc4e:	bc0c      	pop	{r2, r3}
1000fc50:	4690      	mov	r8, r2
1000fc52:	4699      	mov	r9, r3
1000fc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc56:	46c0      	nop			; (mov r8, r8)

1000fc58 <__aeabi_f2uiz>:
1000fc58:	219e      	movs	r1, #158	; 0x9e
1000fc5a:	b510      	push	{r4, lr}
1000fc5c:	05c9      	lsls	r1, r1, #23
1000fc5e:	1c04      	adds	r4, r0, #0
1000fc60:	f7ff ffc4 	bl	1000fbec <__aeabi_fcmpge>
1000fc64:	2800      	cmp	r0, #0
1000fc66:	d103      	bne.n	1000fc70 <__aeabi_f2uiz+0x18>
1000fc68:	1c20      	adds	r0, r4, #0
1000fc6a:	f000 fc8f 	bl	1001058c <__aeabi_f2iz>
1000fc6e:	bd10      	pop	{r4, pc}
1000fc70:	219e      	movs	r1, #158	; 0x9e
1000fc72:	1c20      	adds	r0, r4, #0
1000fc74:	05c9      	lsls	r1, r1, #23
1000fc76:	f000 fb03 	bl	10010280 <__aeabi_fsub>
1000fc7a:	f000 fc87 	bl	1001058c <__aeabi_f2iz>
1000fc7e:	2380      	movs	r3, #128	; 0x80
1000fc80:	061b      	lsls	r3, r3, #24
1000fc82:	469c      	mov	ip, r3
1000fc84:	4460      	add	r0, ip
1000fc86:	e7f2      	b.n	1000fc6e <__aeabi_f2uiz+0x16>

1000fc88 <__aeabi_d2uiz>:
1000fc88:	b570      	push	{r4, r5, r6, lr}
1000fc8a:	2200      	movs	r2, #0
1000fc8c:	4b0c      	ldr	r3, [pc, #48]	; (1000fcc0 <__aeabi_d2uiz+0x38>)
1000fc8e:	0004      	movs	r4, r0
1000fc90:	000d      	movs	r5, r1
1000fc92:	f7ff ff71 	bl	1000fb78 <__aeabi_dcmpge>
1000fc96:	2800      	cmp	r0, #0
1000fc98:	d104      	bne.n	1000fca4 <__aeabi_d2uiz+0x1c>
1000fc9a:	0020      	movs	r0, r4
1000fc9c:	0029      	movs	r1, r5
1000fc9e:	f001 fbb1 	bl	10011404 <__aeabi_d2iz>
1000fca2:	bd70      	pop	{r4, r5, r6, pc}
1000fca4:	4b06      	ldr	r3, [pc, #24]	; (1000fcc0 <__aeabi_d2uiz+0x38>)
1000fca6:	2200      	movs	r2, #0
1000fca8:	0020      	movs	r0, r4
1000fcaa:	0029      	movs	r1, r5
1000fcac:	f001 f856 	bl	10010d5c <__aeabi_dsub>
1000fcb0:	f001 fba8 	bl	10011404 <__aeabi_d2iz>
1000fcb4:	2380      	movs	r3, #128	; 0x80
1000fcb6:	061b      	lsls	r3, r3, #24
1000fcb8:	469c      	mov	ip, r3
1000fcba:	4460      	add	r0, ip
1000fcbc:	e7f1      	b.n	1000fca2 <__aeabi_d2uiz+0x1a>
1000fcbe:	46c0      	nop			; (mov r8, r8)
1000fcc0:	41e00000 	.word	0x41e00000

1000fcc4 <__aeabi_fdiv>:
1000fcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcc6:	4656      	mov	r6, sl
1000fcc8:	4644      	mov	r4, r8
1000fcca:	465f      	mov	r7, fp
1000fccc:	464d      	mov	r5, r9
1000fcce:	b4f0      	push	{r4, r5, r6, r7}
1000fcd0:	0244      	lsls	r4, r0, #9
1000fcd2:	0046      	lsls	r6, r0, #1
1000fcd4:	0fc7      	lsrs	r7, r0, #31
1000fcd6:	b083      	sub	sp, #12
1000fcd8:	4688      	mov	r8, r1
1000fcda:	0a65      	lsrs	r5, r4, #9
1000fcdc:	0e36      	lsrs	r6, r6, #24
1000fcde:	46ba      	mov	sl, r7
1000fce0:	d03d      	beq.n	1000fd5e <__aeabi_fdiv+0x9a>
1000fce2:	2eff      	cmp	r6, #255	; 0xff
1000fce4:	d022      	beq.n	1000fd2c <__aeabi_fdiv+0x68>
1000fce6:	2300      	movs	r3, #0
1000fce8:	00ec      	lsls	r4, r5, #3
1000fcea:	2580      	movs	r5, #128	; 0x80
1000fcec:	4699      	mov	r9, r3
1000fcee:	469b      	mov	fp, r3
1000fcf0:	04ed      	lsls	r5, r5, #19
1000fcf2:	4325      	orrs	r5, r4
1000fcf4:	3e7f      	subs	r6, #127	; 0x7f
1000fcf6:	4643      	mov	r3, r8
1000fcf8:	025c      	lsls	r4, r3, #9
1000fcfa:	0058      	lsls	r0, r3, #1
1000fcfc:	0fdb      	lsrs	r3, r3, #31
1000fcfe:	0a64      	lsrs	r4, r4, #9
1000fd00:	0e00      	lsrs	r0, r0, #24
1000fd02:	4698      	mov	r8, r3
1000fd04:	d036      	beq.n	1000fd74 <__aeabi_fdiv+0xb0>
1000fd06:	28ff      	cmp	r0, #255	; 0xff
1000fd08:	d030      	beq.n	1000fd6c <__aeabi_fdiv+0xa8>
1000fd0a:	2380      	movs	r3, #128	; 0x80
1000fd0c:	2100      	movs	r1, #0
1000fd0e:	00e4      	lsls	r4, r4, #3
1000fd10:	04db      	lsls	r3, r3, #19
1000fd12:	431c      	orrs	r4, r3
1000fd14:	387f      	subs	r0, #127	; 0x7f
1000fd16:	1a30      	subs	r0, r6, r0
1000fd18:	9001      	str	r0, [sp, #4]
1000fd1a:	4648      	mov	r0, r9
1000fd1c:	4642      	mov	r2, r8
1000fd1e:	4308      	orrs	r0, r1
1000fd20:	4e72      	ldr	r6, [pc, #456]	; (1000feec <__aeabi_fdiv+0x228>)
1000fd22:	0080      	lsls	r0, r0, #2
1000fd24:	5830      	ldr	r0, [r6, r0]
1000fd26:	407a      	eors	r2, r7
1000fd28:	0013      	movs	r3, r2
1000fd2a:	4687      	mov	pc, r0
1000fd2c:	2d00      	cmp	r5, #0
1000fd2e:	d144      	bne.n	1000fdba <__aeabi_fdiv+0xf6>
1000fd30:	2308      	movs	r3, #8
1000fd32:	4699      	mov	r9, r3
1000fd34:	3b06      	subs	r3, #6
1000fd36:	469b      	mov	fp, r3
1000fd38:	e7dd      	b.n	1000fcf6 <__aeabi_fdiv+0x32>
1000fd3a:	2201      	movs	r2, #1
1000fd3c:	20ff      	movs	r0, #255	; 0xff
1000fd3e:	2400      	movs	r4, #0
1000fd40:	401a      	ands	r2, r3
1000fd42:	0264      	lsls	r4, r4, #9
1000fd44:	05c3      	lsls	r3, r0, #23
1000fd46:	0a64      	lsrs	r4, r4, #9
1000fd48:	07d2      	lsls	r2, r2, #31
1000fd4a:	431c      	orrs	r4, r3
1000fd4c:	4314      	orrs	r4, r2
1000fd4e:	0020      	movs	r0, r4
1000fd50:	b003      	add	sp, #12
1000fd52:	bc3c      	pop	{r2, r3, r4, r5}
1000fd54:	4690      	mov	r8, r2
1000fd56:	4699      	mov	r9, r3
1000fd58:	46a2      	mov	sl, r4
1000fd5a:	46ab      	mov	fp, r5
1000fd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd5e:	2d00      	cmp	r5, #0
1000fd60:	d120      	bne.n	1000fda4 <__aeabi_fdiv+0xe0>
1000fd62:	2304      	movs	r3, #4
1000fd64:	4699      	mov	r9, r3
1000fd66:	3b03      	subs	r3, #3
1000fd68:	469b      	mov	fp, r3
1000fd6a:	e7c4      	b.n	1000fcf6 <__aeabi_fdiv+0x32>
1000fd6c:	2c00      	cmp	r4, #0
1000fd6e:	d117      	bne.n	1000fda0 <__aeabi_fdiv+0xdc>
1000fd70:	2102      	movs	r1, #2
1000fd72:	e002      	b.n	1000fd7a <__aeabi_fdiv+0xb6>
1000fd74:	2c00      	cmp	r4, #0
1000fd76:	d10a      	bne.n	1000fd8e <__aeabi_fdiv+0xca>
1000fd78:	2101      	movs	r1, #1
1000fd7a:	1a32      	subs	r2, r6, r0
1000fd7c:	9201      	str	r2, [sp, #4]
1000fd7e:	464a      	mov	r2, r9
1000fd80:	4643      	mov	r3, r8
1000fd82:	430a      	orrs	r2, r1
1000fd84:	485a      	ldr	r0, [pc, #360]	; (1000fef0 <__aeabi_fdiv+0x22c>)
1000fd86:	0092      	lsls	r2, r2, #2
1000fd88:	5882      	ldr	r2, [r0, r2]
1000fd8a:	407b      	eors	r3, r7
1000fd8c:	4697      	mov	pc, r2
1000fd8e:	0020      	movs	r0, r4
1000fd90:	f001 fba6 	bl	100114e0 <__clzsi2>
1000fd94:	1f43      	subs	r3, r0, #5
1000fd96:	3076      	adds	r0, #118	; 0x76
1000fd98:	409c      	lsls	r4, r3
1000fd9a:	4240      	negs	r0, r0
1000fd9c:	2100      	movs	r1, #0
1000fd9e:	e7ba      	b.n	1000fd16 <__aeabi_fdiv+0x52>
1000fda0:	2103      	movs	r1, #3
1000fda2:	e7b8      	b.n	1000fd16 <__aeabi_fdiv+0x52>
1000fda4:	0028      	movs	r0, r5
1000fda6:	f001 fb9b 	bl	100114e0 <__clzsi2>
1000fdaa:	1f43      	subs	r3, r0, #5
1000fdac:	409d      	lsls	r5, r3
1000fdae:	2300      	movs	r3, #0
1000fdb0:	3076      	adds	r0, #118	; 0x76
1000fdb2:	4246      	negs	r6, r0
1000fdb4:	4699      	mov	r9, r3
1000fdb6:	469b      	mov	fp, r3
1000fdb8:	e79d      	b.n	1000fcf6 <__aeabi_fdiv+0x32>
1000fdba:	230c      	movs	r3, #12
1000fdbc:	4699      	mov	r9, r3
1000fdbe:	3b09      	subs	r3, #9
1000fdc0:	469b      	mov	fp, r3
1000fdc2:	e798      	b.n	1000fcf6 <__aeabi_fdiv+0x32>
1000fdc4:	2480      	movs	r4, #128	; 0x80
1000fdc6:	2200      	movs	r2, #0
1000fdc8:	03e4      	lsls	r4, r4, #15
1000fdca:	20ff      	movs	r0, #255	; 0xff
1000fdcc:	e7b9      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fdce:	2400      	movs	r4, #0
1000fdd0:	46c2      	mov	sl, r8
1000fdd2:	468b      	mov	fp, r1
1000fdd4:	465a      	mov	r2, fp
1000fdd6:	4653      	mov	r3, sl
1000fdd8:	2a02      	cmp	r2, #2
1000fdda:	d0ae      	beq.n	1000fd3a <__aeabi_fdiv+0x76>
1000fddc:	2a03      	cmp	r2, #3
1000fdde:	d07d      	beq.n	1000fedc <__aeabi_fdiv+0x218>
1000fde0:	2a01      	cmp	r2, #1
1000fde2:	d131      	bne.n	1000fe48 <__aeabi_fdiv+0x184>
1000fde4:	2201      	movs	r2, #1
1000fde6:	2000      	movs	r0, #0
1000fde8:	401a      	ands	r2, r3
1000fdea:	2400      	movs	r4, #0
1000fdec:	e7a9      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fdee:	2201      	movs	r2, #1
1000fdf0:	1a10      	subs	r0, r2, r0
1000fdf2:	281b      	cmp	r0, #27
1000fdf4:	dd56      	ble.n	1000fea4 <__aeabi_fdiv+0x1e0>
1000fdf6:	401a      	ands	r2, r3
1000fdf8:	2000      	movs	r0, #0
1000fdfa:	2400      	movs	r4, #0
1000fdfc:	e7a1      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fdfe:	2380      	movs	r3, #128	; 0x80
1000fe00:	03db      	lsls	r3, r3, #15
1000fe02:	421d      	tst	r5, r3
1000fe04:	d14b      	bne.n	1000fe9e <__aeabi_fdiv+0x1da>
1000fe06:	2380      	movs	r3, #128	; 0x80
1000fe08:	03db      	lsls	r3, r3, #15
1000fe0a:	432b      	orrs	r3, r5
1000fe0c:	025c      	lsls	r4, r3, #9
1000fe0e:	0a64      	lsrs	r4, r4, #9
1000fe10:	003a      	movs	r2, r7
1000fe12:	20ff      	movs	r0, #255	; 0xff
1000fe14:	e795      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fe16:	016d      	lsls	r5, r5, #5
1000fe18:	0160      	lsls	r0, r4, #5
1000fe1a:	4285      	cmp	r5, r0
1000fe1c:	d230      	bcs.n	1000fe80 <__aeabi_fdiv+0x1bc>
1000fe1e:	9a01      	ldr	r2, [sp, #4]
1000fe20:	2400      	movs	r4, #0
1000fe22:	3a01      	subs	r2, #1
1000fe24:	9201      	str	r2, [sp, #4]
1000fe26:	221b      	movs	r2, #27
1000fe28:	2701      	movs	r7, #1
1000fe2a:	0029      	movs	r1, r5
1000fe2c:	0064      	lsls	r4, r4, #1
1000fe2e:	006d      	lsls	r5, r5, #1
1000fe30:	2900      	cmp	r1, #0
1000fe32:	db01      	blt.n	1000fe38 <__aeabi_fdiv+0x174>
1000fe34:	42a8      	cmp	r0, r5
1000fe36:	d801      	bhi.n	1000fe3c <__aeabi_fdiv+0x178>
1000fe38:	1a2d      	subs	r5, r5, r0
1000fe3a:	433c      	orrs	r4, r7
1000fe3c:	3a01      	subs	r2, #1
1000fe3e:	2a00      	cmp	r2, #0
1000fe40:	d1f3      	bne.n	1000fe2a <__aeabi_fdiv+0x166>
1000fe42:	1e6a      	subs	r2, r5, #1
1000fe44:	4195      	sbcs	r5, r2
1000fe46:	432c      	orrs	r4, r5
1000fe48:	9801      	ldr	r0, [sp, #4]
1000fe4a:	307f      	adds	r0, #127	; 0x7f
1000fe4c:	2800      	cmp	r0, #0
1000fe4e:	ddce      	ble.n	1000fdee <__aeabi_fdiv+0x12a>
1000fe50:	0762      	lsls	r2, r4, #29
1000fe52:	d004      	beq.n	1000fe5e <__aeabi_fdiv+0x19a>
1000fe54:	220f      	movs	r2, #15
1000fe56:	4022      	ands	r2, r4
1000fe58:	2a04      	cmp	r2, #4
1000fe5a:	d000      	beq.n	1000fe5e <__aeabi_fdiv+0x19a>
1000fe5c:	3404      	adds	r4, #4
1000fe5e:	0122      	lsls	r2, r4, #4
1000fe60:	d503      	bpl.n	1000fe6a <__aeabi_fdiv+0x1a6>
1000fe62:	4a24      	ldr	r2, [pc, #144]	; (1000fef4 <__aeabi_fdiv+0x230>)
1000fe64:	9801      	ldr	r0, [sp, #4]
1000fe66:	4014      	ands	r4, r2
1000fe68:	3080      	adds	r0, #128	; 0x80
1000fe6a:	28fe      	cmp	r0, #254	; 0xfe
1000fe6c:	dd00      	ble.n	1000fe70 <__aeabi_fdiv+0x1ac>
1000fe6e:	e764      	b.n	1000fd3a <__aeabi_fdiv+0x76>
1000fe70:	2201      	movs	r2, #1
1000fe72:	01a4      	lsls	r4, r4, #6
1000fe74:	0a64      	lsrs	r4, r4, #9
1000fe76:	b2c0      	uxtb	r0, r0
1000fe78:	401a      	ands	r2, r3
1000fe7a:	e762      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fe7c:	002c      	movs	r4, r5
1000fe7e:	e7a9      	b.n	1000fdd4 <__aeabi_fdiv+0x110>
1000fe80:	1a2d      	subs	r5, r5, r0
1000fe82:	221a      	movs	r2, #26
1000fe84:	2401      	movs	r4, #1
1000fe86:	e7cf      	b.n	1000fe28 <__aeabi_fdiv+0x164>
1000fe88:	026b      	lsls	r3, r5, #9
1000fe8a:	d5bc      	bpl.n	1000fe06 <__aeabi_fdiv+0x142>
1000fe8c:	2400      	movs	r4, #0
1000fe8e:	2380      	movs	r3, #128	; 0x80
1000fe90:	03db      	lsls	r3, r3, #15
1000fe92:	431c      	orrs	r4, r3
1000fe94:	0264      	lsls	r4, r4, #9
1000fe96:	0a64      	lsrs	r4, r4, #9
1000fe98:	4642      	mov	r2, r8
1000fe9a:	20ff      	movs	r0, #255	; 0xff
1000fe9c:	e751      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fe9e:	421c      	tst	r4, r3
1000fea0:	d1b3      	bne.n	1000fe0a <__aeabi_fdiv+0x146>
1000fea2:	e7f4      	b.n	1000fe8e <__aeabi_fdiv+0x1ca>
1000fea4:	0021      	movs	r1, r4
1000fea6:	2220      	movs	r2, #32
1000fea8:	40c1      	lsrs	r1, r0
1000feaa:	1a10      	subs	r0, r2, r0
1000feac:	4084      	lsls	r4, r0
1000feae:	1e62      	subs	r2, r4, #1
1000feb0:	4194      	sbcs	r4, r2
1000feb2:	430c      	orrs	r4, r1
1000feb4:	0762      	lsls	r2, r4, #29
1000feb6:	d004      	beq.n	1000fec2 <__aeabi_fdiv+0x1fe>
1000feb8:	220f      	movs	r2, #15
1000feba:	4022      	ands	r2, r4
1000febc:	2a04      	cmp	r2, #4
1000febe:	d000      	beq.n	1000fec2 <__aeabi_fdiv+0x1fe>
1000fec0:	3404      	adds	r4, #4
1000fec2:	0162      	lsls	r2, r4, #5
1000fec4:	d504      	bpl.n	1000fed0 <__aeabi_fdiv+0x20c>
1000fec6:	2201      	movs	r2, #1
1000fec8:	2001      	movs	r0, #1
1000feca:	401a      	ands	r2, r3
1000fecc:	2400      	movs	r4, #0
1000fece:	e738      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fed0:	2201      	movs	r2, #1
1000fed2:	01a4      	lsls	r4, r4, #6
1000fed4:	0a64      	lsrs	r4, r4, #9
1000fed6:	401a      	ands	r2, r3
1000fed8:	2000      	movs	r0, #0
1000feda:	e732      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000fedc:	2380      	movs	r3, #128	; 0x80
1000fede:	03db      	lsls	r3, r3, #15
1000fee0:	431c      	orrs	r4, r3
1000fee2:	0264      	lsls	r4, r4, #9
1000fee4:	0a64      	lsrs	r4, r4, #9
1000fee6:	4652      	mov	r2, sl
1000fee8:	20ff      	movs	r0, #255	; 0xff
1000feea:	e72a      	b.n	1000fd42 <__aeabi_fdiv+0x7e>
1000feec:	1001365c 	.word	0x1001365c
1000fef0:	1001369c 	.word	0x1001369c
1000fef4:	f7ffffff 	.word	0xf7ffffff

1000fef8 <__eqsf2>:
1000fef8:	0243      	lsls	r3, r0, #9
1000fefa:	b570      	push	{r4, r5, r6, lr}
1000fefc:	0042      	lsls	r2, r0, #1
1000fefe:	004c      	lsls	r4, r1, #1
1000ff00:	0a5d      	lsrs	r5, r3, #9
1000ff02:	0fc3      	lsrs	r3, r0, #31
1000ff04:	0248      	lsls	r0, r1, #9
1000ff06:	0e12      	lsrs	r2, r2, #24
1000ff08:	0a46      	lsrs	r6, r0, #9
1000ff0a:	0e24      	lsrs	r4, r4, #24
1000ff0c:	0fc9      	lsrs	r1, r1, #31
1000ff0e:	2aff      	cmp	r2, #255	; 0xff
1000ff10:	d00f      	beq.n	1000ff32 <__eqsf2+0x3a>
1000ff12:	2cff      	cmp	r4, #255	; 0xff
1000ff14:	d011      	beq.n	1000ff3a <__eqsf2+0x42>
1000ff16:	2001      	movs	r0, #1
1000ff18:	42a2      	cmp	r2, r4
1000ff1a:	d000      	beq.n	1000ff1e <__eqsf2+0x26>
1000ff1c:	bd70      	pop	{r4, r5, r6, pc}
1000ff1e:	42b5      	cmp	r5, r6
1000ff20:	d1fc      	bne.n	1000ff1c <__eqsf2+0x24>
1000ff22:	428b      	cmp	r3, r1
1000ff24:	d00d      	beq.n	1000ff42 <__eqsf2+0x4a>
1000ff26:	2a00      	cmp	r2, #0
1000ff28:	d1f8      	bne.n	1000ff1c <__eqsf2+0x24>
1000ff2a:	0028      	movs	r0, r5
1000ff2c:	1e43      	subs	r3, r0, #1
1000ff2e:	4198      	sbcs	r0, r3
1000ff30:	e7f4      	b.n	1000ff1c <__eqsf2+0x24>
1000ff32:	2001      	movs	r0, #1
1000ff34:	2d00      	cmp	r5, #0
1000ff36:	d1f1      	bne.n	1000ff1c <__eqsf2+0x24>
1000ff38:	e7eb      	b.n	1000ff12 <__eqsf2+0x1a>
1000ff3a:	2001      	movs	r0, #1
1000ff3c:	2e00      	cmp	r6, #0
1000ff3e:	d1ed      	bne.n	1000ff1c <__eqsf2+0x24>
1000ff40:	e7e9      	b.n	1000ff16 <__eqsf2+0x1e>
1000ff42:	2000      	movs	r0, #0
1000ff44:	e7ea      	b.n	1000ff1c <__eqsf2+0x24>
1000ff46:	46c0      	nop			; (mov r8, r8)

1000ff48 <__gesf2>:
1000ff48:	0243      	lsls	r3, r0, #9
1000ff4a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff4c:	0042      	lsls	r2, r0, #1
1000ff4e:	0a5d      	lsrs	r5, r3, #9
1000ff50:	0fc3      	lsrs	r3, r0, #31
1000ff52:	0248      	lsls	r0, r1, #9
1000ff54:	0a44      	lsrs	r4, r0, #9
1000ff56:	0048      	lsls	r0, r1, #1
1000ff58:	0e12      	lsrs	r2, r2, #24
1000ff5a:	0e00      	lsrs	r0, r0, #24
1000ff5c:	0fc9      	lsrs	r1, r1, #31
1000ff5e:	2aff      	cmp	r2, #255	; 0xff
1000ff60:	d01f      	beq.n	1000ffa2 <__gesf2+0x5a>
1000ff62:	28ff      	cmp	r0, #255	; 0xff
1000ff64:	d022      	beq.n	1000ffac <__gesf2+0x64>
1000ff66:	2a00      	cmp	r2, #0
1000ff68:	d109      	bne.n	1000ff7e <__gesf2+0x36>
1000ff6a:	426e      	negs	r6, r5
1000ff6c:	416e      	adcs	r6, r5
1000ff6e:	2800      	cmp	r0, #0
1000ff70:	d10f      	bne.n	1000ff92 <__gesf2+0x4a>
1000ff72:	2c00      	cmp	r4, #0
1000ff74:	d10d      	bne.n	1000ff92 <__gesf2+0x4a>
1000ff76:	2000      	movs	r0, #0
1000ff78:	2d00      	cmp	r5, #0
1000ff7a:	d009      	beq.n	1000ff90 <__gesf2+0x48>
1000ff7c:	e005      	b.n	1000ff8a <__gesf2+0x42>
1000ff7e:	2800      	cmp	r0, #0
1000ff80:	d101      	bne.n	1000ff86 <__gesf2+0x3e>
1000ff82:	2c00      	cmp	r4, #0
1000ff84:	d001      	beq.n	1000ff8a <__gesf2+0x42>
1000ff86:	428b      	cmp	r3, r1
1000ff88:	d013      	beq.n	1000ffb2 <__gesf2+0x6a>
1000ff8a:	4258      	negs	r0, r3
1000ff8c:	2301      	movs	r3, #1
1000ff8e:	4318      	orrs	r0, r3
1000ff90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff92:	2e00      	cmp	r6, #0
1000ff94:	d0f7      	beq.n	1000ff86 <__gesf2+0x3e>
1000ff96:	4248      	negs	r0, r1
1000ff98:	4141      	adcs	r1, r0
1000ff9a:	2001      	movs	r0, #1
1000ff9c:	4249      	negs	r1, r1
1000ff9e:	4308      	orrs	r0, r1
1000ffa0:	e7f6      	b.n	1000ff90 <__gesf2+0x48>
1000ffa2:	2d00      	cmp	r5, #0
1000ffa4:	d0dd      	beq.n	1000ff62 <__gesf2+0x1a>
1000ffa6:	2002      	movs	r0, #2
1000ffa8:	4240      	negs	r0, r0
1000ffaa:	e7f1      	b.n	1000ff90 <__gesf2+0x48>
1000ffac:	2c00      	cmp	r4, #0
1000ffae:	d0da      	beq.n	1000ff66 <__gesf2+0x1e>
1000ffb0:	e7f9      	b.n	1000ffa6 <__gesf2+0x5e>
1000ffb2:	4282      	cmp	r2, r0
1000ffb4:	dce9      	bgt.n	1000ff8a <__gesf2+0x42>
1000ffb6:	db04      	blt.n	1000ffc2 <__gesf2+0x7a>
1000ffb8:	42a5      	cmp	r5, r4
1000ffba:	d8e6      	bhi.n	1000ff8a <__gesf2+0x42>
1000ffbc:	2000      	movs	r0, #0
1000ffbe:	42a5      	cmp	r5, r4
1000ffc0:	d2e6      	bcs.n	1000ff90 <__gesf2+0x48>
1000ffc2:	4258      	negs	r0, r3
1000ffc4:	4143      	adcs	r3, r0
1000ffc6:	2001      	movs	r0, #1
1000ffc8:	425b      	negs	r3, r3
1000ffca:	4318      	orrs	r0, r3
1000ffcc:	e7e0      	b.n	1000ff90 <__gesf2+0x48>
1000ffce:	46c0      	nop			; (mov r8, r8)

1000ffd0 <__lesf2>:
1000ffd0:	0243      	lsls	r3, r0, #9
1000ffd2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffd4:	0042      	lsls	r2, r0, #1
1000ffd6:	004c      	lsls	r4, r1, #1
1000ffd8:	0a5e      	lsrs	r6, r3, #9
1000ffda:	0fc3      	lsrs	r3, r0, #31
1000ffdc:	0248      	lsls	r0, r1, #9
1000ffde:	0e12      	lsrs	r2, r2, #24
1000ffe0:	0a45      	lsrs	r5, r0, #9
1000ffe2:	0e24      	lsrs	r4, r4, #24
1000ffe4:	0fc9      	lsrs	r1, r1, #31
1000ffe6:	2aff      	cmp	r2, #255	; 0xff
1000ffe8:	d017      	beq.n	1001001a <__lesf2+0x4a>
1000ffea:	2cff      	cmp	r4, #255	; 0xff
1000ffec:	d019      	beq.n	10010022 <__lesf2+0x52>
1000ffee:	2a00      	cmp	r2, #0
1000fff0:	d10b      	bne.n	1001000a <__lesf2+0x3a>
1000fff2:	4270      	negs	r0, r6
1000fff4:	4170      	adcs	r0, r6
1000fff6:	2c00      	cmp	r4, #0
1000fff8:	d017      	beq.n	1001002a <__lesf2+0x5a>
1000fffa:	2800      	cmp	r0, #0
1000fffc:	d007      	beq.n	1001000e <__lesf2+0x3e>
1000fffe:	4248      	negs	r0, r1
10010000:	4141      	adcs	r1, r0
10010002:	2001      	movs	r0, #1
10010004:	4249      	negs	r1, r1
10010006:	4308      	orrs	r0, r1
10010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001000a:	2c00      	cmp	r4, #0
1001000c:	d013      	beq.n	10010036 <__lesf2+0x66>
1001000e:	428b      	cmp	r3, r1
10010010:	d014      	beq.n	1001003c <__lesf2+0x6c>
10010012:	4258      	negs	r0, r3
10010014:	2301      	movs	r3, #1
10010016:	4318      	orrs	r0, r3
10010018:	e7f6      	b.n	10010008 <__lesf2+0x38>
1001001a:	2002      	movs	r0, #2
1001001c:	2e00      	cmp	r6, #0
1001001e:	d1f3      	bne.n	10010008 <__lesf2+0x38>
10010020:	e7e3      	b.n	1000ffea <__lesf2+0x1a>
10010022:	2002      	movs	r0, #2
10010024:	2d00      	cmp	r5, #0
10010026:	d1ef      	bne.n	10010008 <__lesf2+0x38>
10010028:	e7e1      	b.n	1000ffee <__lesf2+0x1e>
1001002a:	2d00      	cmp	r5, #0
1001002c:	d1e5      	bne.n	1000fffa <__lesf2+0x2a>
1001002e:	2000      	movs	r0, #0
10010030:	2e00      	cmp	r6, #0
10010032:	d0e9      	beq.n	10010008 <__lesf2+0x38>
10010034:	e7ed      	b.n	10010012 <__lesf2+0x42>
10010036:	2d00      	cmp	r5, #0
10010038:	d1e9      	bne.n	1001000e <__lesf2+0x3e>
1001003a:	e7ea      	b.n	10010012 <__lesf2+0x42>
1001003c:	42a2      	cmp	r2, r4
1001003e:	dce8      	bgt.n	10010012 <__lesf2+0x42>
10010040:	db04      	blt.n	1001004c <__lesf2+0x7c>
10010042:	42ae      	cmp	r6, r5
10010044:	d8e5      	bhi.n	10010012 <__lesf2+0x42>
10010046:	2000      	movs	r0, #0
10010048:	42ae      	cmp	r6, r5
1001004a:	d2dd      	bcs.n	10010008 <__lesf2+0x38>
1001004c:	4258      	negs	r0, r3
1001004e:	4143      	adcs	r3, r0
10010050:	2001      	movs	r0, #1
10010052:	425b      	negs	r3, r3
10010054:	4318      	orrs	r0, r3
10010056:	e7d7      	b.n	10010008 <__lesf2+0x38>

10010058 <__aeabi_fmul>:
10010058:	b5f0      	push	{r4, r5, r6, r7, lr}
1001005a:	4657      	mov	r7, sl
1001005c:	464e      	mov	r6, r9
1001005e:	4645      	mov	r5, r8
10010060:	0043      	lsls	r3, r0, #1
10010062:	b4e0      	push	{r5, r6, r7}
10010064:	0246      	lsls	r6, r0, #9
10010066:	4688      	mov	r8, r1
10010068:	0a76      	lsrs	r6, r6, #9
1001006a:	0e1f      	lsrs	r7, r3, #24
1001006c:	0fc4      	lsrs	r4, r0, #31
1001006e:	2f00      	cmp	r7, #0
10010070:	d047      	beq.n	10010102 <__aeabi_fmul+0xaa>
10010072:	2fff      	cmp	r7, #255	; 0xff
10010074:	d025      	beq.n	100100c2 <__aeabi_fmul+0x6a>
10010076:	2300      	movs	r3, #0
10010078:	2580      	movs	r5, #128	; 0x80
1001007a:	469a      	mov	sl, r3
1001007c:	4699      	mov	r9, r3
1001007e:	00f6      	lsls	r6, r6, #3
10010080:	04ed      	lsls	r5, r5, #19
10010082:	432e      	orrs	r6, r5
10010084:	3f7f      	subs	r7, #127	; 0x7f
10010086:	4643      	mov	r3, r8
10010088:	4642      	mov	r2, r8
1001008a:	025d      	lsls	r5, r3, #9
1001008c:	0fd2      	lsrs	r2, r2, #31
1001008e:	005b      	lsls	r3, r3, #1
10010090:	0a6d      	lsrs	r5, r5, #9
10010092:	0e1b      	lsrs	r3, r3, #24
10010094:	4690      	mov	r8, r2
10010096:	d040      	beq.n	1001011a <__aeabi_fmul+0xc2>
10010098:	2bff      	cmp	r3, #255	; 0xff
1001009a:	d039      	beq.n	10010110 <__aeabi_fmul+0xb8>
1001009c:	2280      	movs	r2, #128	; 0x80
1001009e:	2000      	movs	r0, #0
100100a0:	00ed      	lsls	r5, r5, #3
100100a2:	04d2      	lsls	r2, r2, #19
100100a4:	4315      	orrs	r5, r2
100100a6:	3b7f      	subs	r3, #127	; 0x7f
100100a8:	18fb      	adds	r3, r7, r3
100100aa:	4642      	mov	r2, r8
100100ac:	4657      	mov	r7, sl
100100ae:	1c59      	adds	r1, r3, #1
100100b0:	4062      	eors	r2, r4
100100b2:	468c      	mov	ip, r1
100100b4:	4307      	orrs	r7, r0
100100b6:	2f0f      	cmp	r7, #15
100100b8:	d85c      	bhi.n	10010174 <__aeabi_fmul+0x11c>
100100ba:	496f      	ldr	r1, [pc, #444]	; (10010278 <__aeabi_fmul+0x220>)
100100bc:	00bf      	lsls	r7, r7, #2
100100be:	59c9      	ldr	r1, [r1, r7]
100100c0:	468f      	mov	pc, r1
100100c2:	2e00      	cmp	r6, #0
100100c4:	d145      	bne.n	10010152 <__aeabi_fmul+0xfa>
100100c6:	2308      	movs	r3, #8
100100c8:	469a      	mov	sl, r3
100100ca:	3b06      	subs	r3, #6
100100cc:	4699      	mov	r9, r3
100100ce:	e7da      	b.n	10010086 <__aeabi_fmul+0x2e>
100100d0:	4642      	mov	r2, r8
100100d2:	2802      	cmp	r0, #2
100100d4:	d02d      	beq.n	10010132 <__aeabi_fmul+0xda>
100100d6:	2803      	cmp	r0, #3
100100d8:	d100      	bne.n	100100dc <__aeabi_fmul+0x84>
100100da:	e0c3      	b.n	10010264 <__aeabi_fmul+0x20c>
100100dc:	2801      	cmp	r0, #1
100100de:	d000      	beq.n	100100e2 <__aeabi_fmul+0x8a>
100100e0:	e0a2      	b.n	10010228 <__aeabi_fmul+0x1d0>
100100e2:	2500      	movs	r5, #0
100100e4:	2600      	movs	r6, #0
100100e6:	4002      	ands	r2, r0
100100e8:	b2d4      	uxtb	r4, r2
100100ea:	0276      	lsls	r6, r6, #9
100100ec:	05ed      	lsls	r5, r5, #23
100100ee:	0a76      	lsrs	r6, r6, #9
100100f0:	432e      	orrs	r6, r5
100100f2:	07e4      	lsls	r4, r4, #31
100100f4:	4326      	orrs	r6, r4
100100f6:	0030      	movs	r0, r6
100100f8:	bc1c      	pop	{r2, r3, r4}
100100fa:	4690      	mov	r8, r2
100100fc:	4699      	mov	r9, r3
100100fe:	46a2      	mov	sl, r4
10010100:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010102:	2e00      	cmp	r6, #0
10010104:	d11a      	bne.n	1001013c <__aeabi_fmul+0xe4>
10010106:	2304      	movs	r3, #4
10010108:	469a      	mov	sl, r3
1001010a:	3b03      	subs	r3, #3
1001010c:	4699      	mov	r9, r3
1001010e:	e7ba      	b.n	10010086 <__aeabi_fmul+0x2e>
10010110:	002a      	movs	r2, r5
10010112:	1e51      	subs	r1, r2, #1
10010114:	418a      	sbcs	r2, r1
10010116:	1c90      	adds	r0, r2, #2
10010118:	e7c6      	b.n	100100a8 <__aeabi_fmul+0x50>
1001011a:	2001      	movs	r0, #1
1001011c:	2d00      	cmp	r5, #0
1001011e:	d0c3      	beq.n	100100a8 <__aeabi_fmul+0x50>
10010120:	0028      	movs	r0, r5
10010122:	f001 f9dd 	bl	100114e0 <__clzsi2>
10010126:	1f43      	subs	r3, r0, #5
10010128:	3076      	adds	r0, #118	; 0x76
1001012a:	409d      	lsls	r5, r3
1001012c:	4243      	negs	r3, r0
1001012e:	2000      	movs	r0, #0
10010130:	e7ba      	b.n	100100a8 <__aeabi_fmul+0x50>
10010132:	2401      	movs	r4, #1
10010134:	25ff      	movs	r5, #255	; 0xff
10010136:	4014      	ands	r4, r2
10010138:	2600      	movs	r6, #0
1001013a:	e7d6      	b.n	100100ea <__aeabi_fmul+0x92>
1001013c:	0030      	movs	r0, r6
1001013e:	f001 f9cf 	bl	100114e0 <__clzsi2>
10010142:	1f43      	subs	r3, r0, #5
10010144:	409e      	lsls	r6, r3
10010146:	2300      	movs	r3, #0
10010148:	3076      	adds	r0, #118	; 0x76
1001014a:	4247      	negs	r7, r0
1001014c:	469a      	mov	sl, r3
1001014e:	4699      	mov	r9, r3
10010150:	e799      	b.n	10010086 <__aeabi_fmul+0x2e>
10010152:	230c      	movs	r3, #12
10010154:	469a      	mov	sl, r3
10010156:	3b09      	subs	r3, #9
10010158:	4699      	mov	r9, r3
1001015a:	e794      	b.n	10010086 <__aeabi_fmul+0x2e>
1001015c:	2680      	movs	r6, #128	; 0x80
1001015e:	2400      	movs	r4, #0
10010160:	03f6      	lsls	r6, r6, #15
10010162:	25ff      	movs	r5, #255	; 0xff
10010164:	e7c1      	b.n	100100ea <__aeabi_fmul+0x92>
10010166:	0035      	movs	r5, r6
10010168:	4648      	mov	r0, r9
1001016a:	e7b2      	b.n	100100d2 <__aeabi_fmul+0x7a>
1001016c:	0035      	movs	r5, r6
1001016e:	0022      	movs	r2, r4
10010170:	4648      	mov	r0, r9
10010172:	e7ae      	b.n	100100d2 <__aeabi_fmul+0x7a>
10010174:	0429      	lsls	r1, r5, #16
10010176:	0c09      	lsrs	r1, r1, #16
10010178:	0008      	movs	r0, r1
1001017a:	0c37      	lsrs	r7, r6, #16
1001017c:	0436      	lsls	r6, r6, #16
1001017e:	0c36      	lsrs	r6, r6, #16
10010180:	0c2c      	lsrs	r4, r5, #16
10010182:	4379      	muls	r1, r7
10010184:	4370      	muls	r0, r6
10010186:	4367      	muls	r7, r4
10010188:	4374      	muls	r4, r6
1001018a:	0c06      	lsrs	r6, r0, #16
1001018c:	1864      	adds	r4, r4, r1
1001018e:	1936      	adds	r6, r6, r4
10010190:	42b1      	cmp	r1, r6
10010192:	d903      	bls.n	1001019c <__aeabi_fmul+0x144>
10010194:	2180      	movs	r1, #128	; 0x80
10010196:	0249      	lsls	r1, r1, #9
10010198:	4688      	mov	r8, r1
1001019a:	4447      	add	r7, r8
1001019c:	0400      	lsls	r0, r0, #16
1001019e:	0c00      	lsrs	r0, r0, #16
100101a0:	0431      	lsls	r1, r6, #16
100101a2:	1809      	adds	r1, r1, r0
100101a4:	018d      	lsls	r5, r1, #6
100101a6:	1e68      	subs	r0, r5, #1
100101a8:	4185      	sbcs	r5, r0
100101aa:	0e89      	lsrs	r1, r1, #26
100101ac:	4329      	orrs	r1, r5
100101ae:	0c35      	lsrs	r5, r6, #16
100101b0:	19ed      	adds	r5, r5, r7
100101b2:	01ad      	lsls	r5, r5, #6
100101b4:	430d      	orrs	r5, r1
100101b6:	0129      	lsls	r1, r5, #4
100101b8:	d504      	bpl.n	100101c4 <__aeabi_fmul+0x16c>
100101ba:	2301      	movs	r3, #1
100101bc:	0869      	lsrs	r1, r5, #1
100101be:	401d      	ands	r5, r3
100101c0:	4663      	mov	r3, ip
100101c2:	430d      	orrs	r5, r1
100101c4:	0019      	movs	r1, r3
100101c6:	317f      	adds	r1, #127	; 0x7f
100101c8:	2900      	cmp	r1, #0
100101ca:	dd25      	ble.n	10010218 <__aeabi_fmul+0x1c0>
100101cc:	0768      	lsls	r0, r5, #29
100101ce:	d004      	beq.n	100101da <__aeabi_fmul+0x182>
100101d0:	200f      	movs	r0, #15
100101d2:	4028      	ands	r0, r5
100101d4:	2804      	cmp	r0, #4
100101d6:	d000      	beq.n	100101da <__aeabi_fmul+0x182>
100101d8:	3504      	adds	r5, #4
100101da:	0128      	lsls	r0, r5, #4
100101dc:	d503      	bpl.n	100101e6 <__aeabi_fmul+0x18e>
100101de:	4927      	ldr	r1, [pc, #156]	; (1001027c <__aeabi_fmul+0x224>)
100101e0:	3380      	adds	r3, #128	; 0x80
100101e2:	400d      	ands	r5, r1
100101e4:	0019      	movs	r1, r3
100101e6:	29fe      	cmp	r1, #254	; 0xfe
100101e8:	dca3      	bgt.n	10010132 <__aeabi_fmul+0xda>
100101ea:	2401      	movs	r4, #1
100101ec:	01ad      	lsls	r5, r5, #6
100101ee:	0a6e      	lsrs	r6, r5, #9
100101f0:	4014      	ands	r4, r2
100101f2:	b2cd      	uxtb	r5, r1
100101f4:	e779      	b.n	100100ea <__aeabi_fmul+0x92>
100101f6:	2080      	movs	r0, #128	; 0x80
100101f8:	03c0      	lsls	r0, r0, #15
100101fa:	4206      	tst	r6, r0
100101fc:	d007      	beq.n	1001020e <__aeabi_fmul+0x1b6>
100101fe:	4205      	tst	r5, r0
10010200:	d105      	bne.n	1001020e <__aeabi_fmul+0x1b6>
10010202:	4328      	orrs	r0, r5
10010204:	0246      	lsls	r6, r0, #9
10010206:	0a76      	lsrs	r6, r6, #9
10010208:	4644      	mov	r4, r8
1001020a:	25ff      	movs	r5, #255	; 0xff
1001020c:	e76d      	b.n	100100ea <__aeabi_fmul+0x92>
1001020e:	4306      	orrs	r6, r0
10010210:	0276      	lsls	r6, r6, #9
10010212:	0a76      	lsrs	r6, r6, #9
10010214:	25ff      	movs	r5, #255	; 0xff
10010216:	e768      	b.n	100100ea <__aeabi_fmul+0x92>
10010218:	2401      	movs	r4, #1
1001021a:	1a61      	subs	r1, r4, r1
1001021c:	291b      	cmp	r1, #27
1001021e:	dd05      	ble.n	1001022c <__aeabi_fmul+0x1d4>
10010220:	4014      	ands	r4, r2
10010222:	2500      	movs	r5, #0
10010224:	2600      	movs	r6, #0
10010226:	e760      	b.n	100100ea <__aeabi_fmul+0x92>
10010228:	4663      	mov	r3, ip
1001022a:	e7cb      	b.n	100101c4 <__aeabi_fmul+0x16c>
1001022c:	002e      	movs	r6, r5
1001022e:	2320      	movs	r3, #32
10010230:	40ce      	lsrs	r6, r1
10010232:	1a59      	subs	r1, r3, r1
10010234:	408d      	lsls	r5, r1
10010236:	1e6b      	subs	r3, r5, #1
10010238:	419d      	sbcs	r5, r3
1001023a:	432e      	orrs	r6, r5
1001023c:	0773      	lsls	r3, r6, #29
1001023e:	d004      	beq.n	1001024a <__aeabi_fmul+0x1f2>
10010240:	230f      	movs	r3, #15
10010242:	4033      	ands	r3, r6
10010244:	2b04      	cmp	r3, #4
10010246:	d000      	beq.n	1001024a <__aeabi_fmul+0x1f2>
10010248:	3604      	adds	r6, #4
1001024a:	0173      	lsls	r3, r6, #5
1001024c:	d504      	bpl.n	10010258 <__aeabi_fmul+0x200>
1001024e:	2401      	movs	r4, #1
10010250:	2501      	movs	r5, #1
10010252:	4014      	ands	r4, r2
10010254:	2600      	movs	r6, #0
10010256:	e748      	b.n	100100ea <__aeabi_fmul+0x92>
10010258:	2401      	movs	r4, #1
1001025a:	01b6      	lsls	r6, r6, #6
1001025c:	0a76      	lsrs	r6, r6, #9
1001025e:	4014      	ands	r4, r2
10010260:	2500      	movs	r5, #0
10010262:	e742      	b.n	100100ea <__aeabi_fmul+0x92>
10010264:	2680      	movs	r6, #128	; 0x80
10010266:	2401      	movs	r4, #1
10010268:	03f6      	lsls	r6, r6, #15
1001026a:	432e      	orrs	r6, r5
1001026c:	0276      	lsls	r6, r6, #9
1001026e:	0a76      	lsrs	r6, r6, #9
10010270:	4014      	ands	r4, r2
10010272:	25ff      	movs	r5, #255	; 0xff
10010274:	e739      	b.n	100100ea <__aeabi_fmul+0x92>
10010276:	46c0      	nop			; (mov r8, r8)
10010278:	100136dc 	.word	0x100136dc
1001027c:	f7ffffff 	.word	0xf7ffffff

10010280 <__aeabi_fsub>:
10010280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010282:	024a      	lsls	r2, r1, #9
10010284:	004e      	lsls	r6, r1, #1
10010286:	0243      	lsls	r3, r0, #9
10010288:	0044      	lsls	r4, r0, #1
1001028a:	0e24      	lsrs	r4, r4, #24
1001028c:	0fc5      	lsrs	r5, r0, #31
1001028e:	099b      	lsrs	r3, r3, #6
10010290:	0e36      	lsrs	r6, r6, #24
10010292:	0fc9      	lsrs	r1, r1, #31
10010294:	0992      	lsrs	r2, r2, #6
10010296:	2eff      	cmp	r6, #255	; 0xff
10010298:	d100      	bne.n	1001029c <__aeabi_fsub+0x1c>
1001029a:	e083      	b.n	100103a4 <__aeabi_fsub+0x124>
1001029c:	2001      	movs	r0, #1
1001029e:	4041      	eors	r1, r0
100102a0:	1ba0      	subs	r0, r4, r6
100102a2:	42a9      	cmp	r1, r5
100102a4:	d05c      	beq.n	10010360 <__aeabi_fsub+0xe0>
100102a6:	2800      	cmp	r0, #0
100102a8:	dc00      	bgt.n	100102ac <__aeabi_fsub+0x2c>
100102aa:	e095      	b.n	100103d8 <__aeabi_fsub+0x158>
100102ac:	2e00      	cmp	r6, #0
100102ae:	d11c      	bne.n	100102ea <__aeabi_fsub+0x6a>
100102b0:	2a00      	cmp	r2, #0
100102b2:	d000      	beq.n	100102b6 <__aeabi_fsub+0x36>
100102b4:	e081      	b.n	100103ba <__aeabi_fsub+0x13a>
100102b6:	075a      	lsls	r2, r3, #29
100102b8:	d004      	beq.n	100102c4 <__aeabi_fsub+0x44>
100102ba:	220f      	movs	r2, #15
100102bc:	401a      	ands	r2, r3
100102be:	2a04      	cmp	r2, #4
100102c0:	d000      	beq.n	100102c4 <__aeabi_fsub+0x44>
100102c2:	3304      	adds	r3, #4
100102c4:	015a      	lsls	r2, r3, #5
100102c6:	d53b      	bpl.n	10010340 <__aeabi_fsub+0xc0>
100102c8:	3401      	adds	r4, #1
100102ca:	2cff      	cmp	r4, #255	; 0xff
100102cc:	d100      	bne.n	100102d0 <__aeabi_fsub+0x50>
100102ce:	e091      	b.n	100103f4 <__aeabi_fsub+0x174>
100102d0:	2001      	movs	r0, #1
100102d2:	019b      	lsls	r3, r3, #6
100102d4:	0a5b      	lsrs	r3, r3, #9
100102d6:	b2e4      	uxtb	r4, r4
100102d8:	4005      	ands	r5, r0
100102da:	025b      	lsls	r3, r3, #9
100102dc:	05e4      	lsls	r4, r4, #23
100102de:	0a5b      	lsrs	r3, r3, #9
100102e0:	07ed      	lsls	r5, r5, #31
100102e2:	4323      	orrs	r3, r4
100102e4:	432b      	orrs	r3, r5
100102e6:	0018      	movs	r0, r3
100102e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100102ea:	2cff      	cmp	r4, #255	; 0xff
100102ec:	d0e3      	beq.n	100102b6 <__aeabi_fsub+0x36>
100102ee:	2180      	movs	r1, #128	; 0x80
100102f0:	04c9      	lsls	r1, r1, #19
100102f2:	430a      	orrs	r2, r1
100102f4:	281b      	cmp	r0, #27
100102f6:	dd00      	ble.n	100102fa <__aeabi_fsub+0x7a>
100102f8:	e090      	b.n	1001041c <__aeabi_fsub+0x19c>
100102fa:	0016      	movs	r6, r2
100102fc:	2120      	movs	r1, #32
100102fe:	40c6      	lsrs	r6, r0
10010300:	1a08      	subs	r0, r1, r0
10010302:	4082      	lsls	r2, r0
10010304:	1e51      	subs	r1, r2, #1
10010306:	418a      	sbcs	r2, r1
10010308:	4332      	orrs	r2, r6
1001030a:	1a9b      	subs	r3, r3, r2
1001030c:	015a      	lsls	r2, r3, #5
1001030e:	d515      	bpl.n	1001033c <__aeabi_fsub+0xbc>
10010310:	019b      	lsls	r3, r3, #6
10010312:	099e      	lsrs	r6, r3, #6
10010314:	0030      	movs	r0, r6
10010316:	f001 f8e3 	bl	100114e0 <__clzsi2>
1001031a:	3805      	subs	r0, #5
1001031c:	4086      	lsls	r6, r0
1001031e:	4284      	cmp	r4, r0
10010320:	dc6c      	bgt.n	100103fc <__aeabi_fsub+0x17c>
10010322:	1b04      	subs	r4, r0, r4
10010324:	0033      	movs	r3, r6
10010326:	2020      	movs	r0, #32
10010328:	3401      	adds	r4, #1
1001032a:	40e3      	lsrs	r3, r4
1001032c:	1b04      	subs	r4, r0, r4
1001032e:	40a6      	lsls	r6, r4
10010330:	1e72      	subs	r2, r6, #1
10010332:	4196      	sbcs	r6, r2
10010334:	2400      	movs	r4, #0
10010336:	4333      	orrs	r3, r6
10010338:	e7bd      	b.n	100102b6 <__aeabi_fsub+0x36>
1001033a:	000d      	movs	r5, r1
1001033c:	075a      	lsls	r2, r3, #29
1001033e:	d1bc      	bne.n	100102ba <__aeabi_fsub+0x3a>
10010340:	08df      	lsrs	r7, r3, #3
10010342:	2301      	movs	r3, #1
10010344:	401d      	ands	r5, r3
10010346:	2cff      	cmp	r4, #255	; 0xff
10010348:	d133      	bne.n	100103b2 <__aeabi_fsub+0x132>
1001034a:	2f00      	cmp	r7, #0
1001034c:	d100      	bne.n	10010350 <__aeabi_fsub+0xd0>
1001034e:	e090      	b.n	10010472 <__aeabi_fsub+0x1f2>
10010350:	2280      	movs	r2, #128	; 0x80
10010352:	03d2      	lsls	r2, r2, #15
10010354:	0013      	movs	r3, r2
10010356:	433b      	orrs	r3, r7
10010358:	025b      	lsls	r3, r3, #9
1001035a:	0a5b      	lsrs	r3, r3, #9
1001035c:	24ff      	movs	r4, #255	; 0xff
1001035e:	e7bc      	b.n	100102da <__aeabi_fsub+0x5a>
10010360:	2800      	cmp	r0, #0
10010362:	dd4f      	ble.n	10010404 <__aeabi_fsub+0x184>
10010364:	2e00      	cmp	r6, #0
10010366:	d02e      	beq.n	100103c6 <__aeabi_fsub+0x146>
10010368:	2cff      	cmp	r4, #255	; 0xff
1001036a:	d0a4      	beq.n	100102b6 <__aeabi_fsub+0x36>
1001036c:	2580      	movs	r5, #128	; 0x80
1001036e:	04ed      	lsls	r5, r5, #19
10010370:	432a      	orrs	r2, r5
10010372:	281b      	cmp	r0, #27
10010374:	dd00      	ble.n	10010378 <__aeabi_fsub+0xf8>
10010376:	e097      	b.n	100104a8 <__aeabi_fsub+0x228>
10010378:	0016      	movs	r6, r2
1001037a:	2520      	movs	r5, #32
1001037c:	40c6      	lsrs	r6, r0
1001037e:	1a28      	subs	r0, r5, r0
10010380:	4082      	lsls	r2, r0
10010382:	1e50      	subs	r0, r2, #1
10010384:	4182      	sbcs	r2, r0
10010386:	4332      	orrs	r2, r6
10010388:	189b      	adds	r3, r3, r2
1001038a:	015a      	lsls	r2, r3, #5
1001038c:	d5d5      	bpl.n	1001033a <__aeabi_fsub+0xba>
1001038e:	3401      	adds	r4, #1
10010390:	2cff      	cmp	r4, #255	; 0xff
10010392:	d06d      	beq.n	10010470 <__aeabi_fsub+0x1f0>
10010394:	2201      	movs	r2, #1
10010396:	487b      	ldr	r0, [pc, #492]	; (10010584 <__aeabi_fsub+0x304>)
10010398:	401a      	ands	r2, r3
1001039a:	085b      	lsrs	r3, r3, #1
1001039c:	4003      	ands	r3, r0
1001039e:	4313      	orrs	r3, r2
100103a0:	000d      	movs	r5, r1
100103a2:	e788      	b.n	100102b6 <__aeabi_fsub+0x36>
100103a4:	2a00      	cmp	r2, #0
100103a6:	d000      	beq.n	100103aa <__aeabi_fsub+0x12a>
100103a8:	e77a      	b.n	100102a0 <__aeabi_fsub+0x20>
100103aa:	e777      	b.n	1001029c <__aeabi_fsub+0x1c>
100103ac:	1e03      	subs	r3, r0, #0
100103ae:	d1c5      	bne.n	1001033c <__aeabi_fsub+0xbc>
100103b0:	2500      	movs	r5, #0
100103b2:	027b      	lsls	r3, r7, #9
100103b4:	0a5b      	lsrs	r3, r3, #9
100103b6:	b2e4      	uxtb	r4, r4
100103b8:	e78f      	b.n	100102da <__aeabi_fsub+0x5a>
100103ba:	3801      	subs	r0, #1
100103bc:	2800      	cmp	r0, #0
100103be:	d0a4      	beq.n	1001030a <__aeabi_fsub+0x8a>
100103c0:	2cff      	cmp	r4, #255	; 0xff
100103c2:	d197      	bne.n	100102f4 <__aeabi_fsub+0x74>
100103c4:	e777      	b.n	100102b6 <__aeabi_fsub+0x36>
100103c6:	2a00      	cmp	r2, #0
100103c8:	d100      	bne.n	100103cc <__aeabi_fsub+0x14c>
100103ca:	e774      	b.n	100102b6 <__aeabi_fsub+0x36>
100103cc:	3801      	subs	r0, #1
100103ce:	2800      	cmp	r0, #0
100103d0:	d0da      	beq.n	10010388 <__aeabi_fsub+0x108>
100103d2:	2cff      	cmp	r4, #255	; 0xff
100103d4:	d1cd      	bne.n	10010372 <__aeabi_fsub+0xf2>
100103d6:	e76e      	b.n	100102b6 <__aeabi_fsub+0x36>
100103d8:	2800      	cmp	r0, #0
100103da:	d121      	bne.n	10010420 <__aeabi_fsub+0x1a0>
100103dc:	1c60      	adds	r0, r4, #1
100103de:	b2c0      	uxtb	r0, r0
100103e0:	2801      	cmp	r0, #1
100103e2:	dd58      	ble.n	10010496 <__aeabi_fsub+0x216>
100103e4:	2780      	movs	r7, #128	; 0x80
100103e6:	1a9e      	subs	r6, r3, r2
100103e8:	04ff      	lsls	r7, r7, #19
100103ea:	4037      	ands	r7, r6
100103ec:	d02f      	beq.n	1001044e <__aeabi_fsub+0x1ce>
100103ee:	1ad6      	subs	r6, r2, r3
100103f0:	000d      	movs	r5, r1
100103f2:	e78f      	b.n	10010314 <__aeabi_fsub+0x94>
100103f4:	2301      	movs	r3, #1
100103f6:	401d      	ands	r5, r3
100103f8:	2300      	movs	r3, #0
100103fa:	e76e      	b.n	100102da <__aeabi_fsub+0x5a>
100103fc:	4b62      	ldr	r3, [pc, #392]	; (10010588 <__aeabi_fsub+0x308>)
100103fe:	1a24      	subs	r4, r4, r0
10010400:	4033      	ands	r3, r6
10010402:	e758      	b.n	100102b6 <__aeabi_fsub+0x36>
10010404:	2800      	cmp	r0, #0
10010406:	d151      	bne.n	100104ac <__aeabi_fsub+0x22c>
10010408:	1c60      	adds	r0, r4, #1
1001040a:	b2c6      	uxtb	r6, r0
1001040c:	2e01      	cmp	r6, #1
1001040e:	dd33      	ble.n	10010478 <__aeabi_fsub+0x1f8>
10010410:	28ff      	cmp	r0, #255	; 0xff
10010412:	d02d      	beq.n	10010470 <__aeabi_fsub+0x1f0>
10010414:	189b      	adds	r3, r3, r2
10010416:	085b      	lsrs	r3, r3, #1
10010418:	0004      	movs	r4, r0
1001041a:	e74c      	b.n	100102b6 <__aeabi_fsub+0x36>
1001041c:	2201      	movs	r2, #1
1001041e:	e774      	b.n	1001030a <__aeabi_fsub+0x8a>
10010420:	2c00      	cmp	r4, #0
10010422:	d01a      	beq.n	1001045a <__aeabi_fsub+0x1da>
10010424:	2eff      	cmp	r6, #255	; 0xff
10010426:	d01f      	beq.n	10010468 <__aeabi_fsub+0x1e8>
10010428:	2480      	movs	r4, #128	; 0x80
1001042a:	04e4      	lsls	r4, r4, #19
1001042c:	4240      	negs	r0, r0
1001042e:	4323      	orrs	r3, r4
10010430:	281b      	cmp	r0, #27
10010432:	dd00      	ble.n	10010436 <__aeabi_fsub+0x1b6>
10010434:	e096      	b.n	10010564 <__aeabi_fsub+0x2e4>
10010436:	001d      	movs	r5, r3
10010438:	2420      	movs	r4, #32
1001043a:	40c5      	lsrs	r5, r0
1001043c:	1a20      	subs	r0, r4, r0
1001043e:	4083      	lsls	r3, r0
10010440:	1e58      	subs	r0, r3, #1
10010442:	4183      	sbcs	r3, r0
10010444:	432b      	orrs	r3, r5
10010446:	1ad3      	subs	r3, r2, r3
10010448:	0034      	movs	r4, r6
1001044a:	000d      	movs	r5, r1
1001044c:	e75e      	b.n	1001030c <__aeabi_fsub+0x8c>
1001044e:	2e00      	cmp	r6, #0
10010450:	d000      	beq.n	10010454 <__aeabi_fsub+0x1d4>
10010452:	e75f      	b.n	10010314 <__aeabi_fsub+0x94>
10010454:	2500      	movs	r5, #0
10010456:	2400      	movs	r4, #0
10010458:	e7ab      	b.n	100103b2 <__aeabi_fsub+0x132>
1001045a:	2b00      	cmp	r3, #0
1001045c:	d044      	beq.n	100104e8 <__aeabi_fsub+0x268>
1001045e:	43c0      	mvns	r0, r0
10010460:	2800      	cmp	r0, #0
10010462:	d0f0      	beq.n	10010446 <__aeabi_fsub+0x1c6>
10010464:	2eff      	cmp	r6, #255	; 0xff
10010466:	d1e3      	bne.n	10010430 <__aeabi_fsub+0x1b0>
10010468:	0013      	movs	r3, r2
1001046a:	24ff      	movs	r4, #255	; 0xff
1001046c:	000d      	movs	r5, r1
1001046e:	e722      	b.n	100102b6 <__aeabi_fsub+0x36>
10010470:	000d      	movs	r5, r1
10010472:	24ff      	movs	r4, #255	; 0xff
10010474:	2300      	movs	r3, #0
10010476:	e730      	b.n	100102da <__aeabi_fsub+0x5a>
10010478:	2c00      	cmp	r4, #0
1001047a:	d15d      	bne.n	10010538 <__aeabi_fsub+0x2b8>
1001047c:	2b00      	cmp	r3, #0
1001047e:	d07d      	beq.n	1001057c <__aeabi_fsub+0x2fc>
10010480:	2a00      	cmp	r2, #0
10010482:	d100      	bne.n	10010486 <__aeabi_fsub+0x206>
10010484:	e717      	b.n	100102b6 <__aeabi_fsub+0x36>
10010486:	189b      	adds	r3, r3, r2
10010488:	015a      	lsls	r2, r3, #5
1001048a:	d400      	bmi.n	1001048e <__aeabi_fsub+0x20e>
1001048c:	e756      	b.n	1001033c <__aeabi_fsub+0xbc>
1001048e:	4a3e      	ldr	r2, [pc, #248]	; (10010588 <__aeabi_fsub+0x308>)
10010490:	0004      	movs	r4, r0
10010492:	4013      	ands	r3, r2
10010494:	e70f      	b.n	100102b6 <__aeabi_fsub+0x36>
10010496:	2c00      	cmp	r4, #0
10010498:	d11e      	bne.n	100104d8 <__aeabi_fsub+0x258>
1001049a:	2b00      	cmp	r3, #0
1001049c:	d12f      	bne.n	100104fe <__aeabi_fsub+0x27e>
1001049e:	2a00      	cmp	r2, #0
100104a0:	d065      	beq.n	1001056e <__aeabi_fsub+0x2ee>
100104a2:	0013      	movs	r3, r2
100104a4:	000d      	movs	r5, r1
100104a6:	e706      	b.n	100102b6 <__aeabi_fsub+0x36>
100104a8:	2201      	movs	r2, #1
100104aa:	e76d      	b.n	10010388 <__aeabi_fsub+0x108>
100104ac:	2c00      	cmp	r4, #0
100104ae:	d11f      	bne.n	100104f0 <__aeabi_fsub+0x270>
100104b0:	2b00      	cmp	r3, #0
100104b2:	d059      	beq.n	10010568 <__aeabi_fsub+0x2e8>
100104b4:	43c0      	mvns	r0, r0
100104b6:	2800      	cmp	r0, #0
100104b8:	d00b      	beq.n	100104d2 <__aeabi_fsub+0x252>
100104ba:	2eff      	cmp	r6, #255	; 0xff
100104bc:	d04f      	beq.n	1001055e <__aeabi_fsub+0x2de>
100104be:	281b      	cmp	r0, #27
100104c0:	dc5e      	bgt.n	10010580 <__aeabi_fsub+0x300>
100104c2:	001d      	movs	r5, r3
100104c4:	2420      	movs	r4, #32
100104c6:	40c5      	lsrs	r5, r0
100104c8:	1a20      	subs	r0, r4, r0
100104ca:	4083      	lsls	r3, r0
100104cc:	1e58      	subs	r0, r3, #1
100104ce:	4183      	sbcs	r3, r0
100104d0:	432b      	orrs	r3, r5
100104d2:	189b      	adds	r3, r3, r2
100104d4:	0034      	movs	r4, r6
100104d6:	e758      	b.n	1001038a <__aeabi_fsub+0x10a>
100104d8:	2b00      	cmp	r3, #0
100104da:	d11c      	bne.n	10010516 <__aeabi_fsub+0x296>
100104dc:	2a00      	cmp	r2, #0
100104de:	d049      	beq.n	10010574 <__aeabi_fsub+0x2f4>
100104e0:	0013      	movs	r3, r2
100104e2:	000d      	movs	r5, r1
100104e4:	24ff      	movs	r4, #255	; 0xff
100104e6:	e6e6      	b.n	100102b6 <__aeabi_fsub+0x36>
100104e8:	0013      	movs	r3, r2
100104ea:	0034      	movs	r4, r6
100104ec:	000d      	movs	r5, r1
100104ee:	e6e2      	b.n	100102b6 <__aeabi_fsub+0x36>
100104f0:	2eff      	cmp	r6, #255	; 0xff
100104f2:	d034      	beq.n	1001055e <__aeabi_fsub+0x2de>
100104f4:	2480      	movs	r4, #128	; 0x80
100104f6:	04e4      	lsls	r4, r4, #19
100104f8:	4240      	negs	r0, r0
100104fa:	4323      	orrs	r3, r4
100104fc:	e7df      	b.n	100104be <__aeabi_fsub+0x23e>
100104fe:	2a00      	cmp	r2, #0
10010500:	d100      	bne.n	10010504 <__aeabi_fsub+0x284>
10010502:	e6d8      	b.n	100102b6 <__aeabi_fsub+0x36>
10010504:	2780      	movs	r7, #128	; 0x80
10010506:	1a98      	subs	r0, r3, r2
10010508:	04ff      	lsls	r7, r7, #19
1001050a:	4007      	ands	r7, r0
1001050c:	d100      	bne.n	10010510 <__aeabi_fsub+0x290>
1001050e:	e74d      	b.n	100103ac <__aeabi_fsub+0x12c>
10010510:	1ad3      	subs	r3, r2, r3
10010512:	000d      	movs	r5, r1
10010514:	e6cf      	b.n	100102b6 <__aeabi_fsub+0x36>
10010516:	24ff      	movs	r4, #255	; 0xff
10010518:	2a00      	cmp	r2, #0
1001051a:	d100      	bne.n	1001051e <__aeabi_fsub+0x29e>
1001051c:	e6cb      	b.n	100102b6 <__aeabi_fsub+0x36>
1001051e:	2080      	movs	r0, #128	; 0x80
10010520:	08db      	lsrs	r3, r3, #3
10010522:	03c0      	lsls	r0, r0, #15
10010524:	4203      	tst	r3, r0
10010526:	d004      	beq.n	10010532 <__aeabi_fsub+0x2b2>
10010528:	08d2      	lsrs	r2, r2, #3
1001052a:	4202      	tst	r2, r0
1001052c:	d101      	bne.n	10010532 <__aeabi_fsub+0x2b2>
1001052e:	0013      	movs	r3, r2
10010530:	000d      	movs	r5, r1
10010532:	00db      	lsls	r3, r3, #3
10010534:	24ff      	movs	r4, #255	; 0xff
10010536:	e6be      	b.n	100102b6 <__aeabi_fsub+0x36>
10010538:	2b00      	cmp	r3, #0
1001053a:	d010      	beq.n	1001055e <__aeabi_fsub+0x2de>
1001053c:	24ff      	movs	r4, #255	; 0xff
1001053e:	2a00      	cmp	r2, #0
10010540:	d100      	bne.n	10010544 <__aeabi_fsub+0x2c4>
10010542:	e6b8      	b.n	100102b6 <__aeabi_fsub+0x36>
10010544:	2080      	movs	r0, #128	; 0x80
10010546:	08db      	lsrs	r3, r3, #3
10010548:	03c0      	lsls	r0, r0, #15
1001054a:	4203      	tst	r3, r0
1001054c:	d003      	beq.n	10010556 <__aeabi_fsub+0x2d6>
1001054e:	08d2      	lsrs	r2, r2, #3
10010550:	4202      	tst	r2, r0
10010552:	d100      	bne.n	10010556 <__aeabi_fsub+0x2d6>
10010554:	0013      	movs	r3, r2
10010556:	00db      	lsls	r3, r3, #3
10010558:	000d      	movs	r5, r1
1001055a:	24ff      	movs	r4, #255	; 0xff
1001055c:	e6ab      	b.n	100102b6 <__aeabi_fsub+0x36>
1001055e:	0013      	movs	r3, r2
10010560:	24ff      	movs	r4, #255	; 0xff
10010562:	e6a8      	b.n	100102b6 <__aeabi_fsub+0x36>
10010564:	2301      	movs	r3, #1
10010566:	e76e      	b.n	10010446 <__aeabi_fsub+0x1c6>
10010568:	0013      	movs	r3, r2
1001056a:	0034      	movs	r4, r6
1001056c:	e6a3      	b.n	100102b6 <__aeabi_fsub+0x36>
1001056e:	2700      	movs	r7, #0
10010570:	2500      	movs	r5, #0
10010572:	e71e      	b.n	100103b2 <__aeabi_fsub+0x132>
10010574:	2780      	movs	r7, #128	; 0x80
10010576:	2500      	movs	r5, #0
10010578:	03ff      	lsls	r7, r7, #15
1001057a:	e6e9      	b.n	10010350 <__aeabi_fsub+0xd0>
1001057c:	0013      	movs	r3, r2
1001057e:	e69a      	b.n	100102b6 <__aeabi_fsub+0x36>
10010580:	2301      	movs	r3, #1
10010582:	e7a6      	b.n	100104d2 <__aeabi_fsub+0x252>
10010584:	7dffffff 	.word	0x7dffffff
10010588:	fbffffff 	.word	0xfbffffff

1001058c <__aeabi_f2iz>:
1001058c:	0243      	lsls	r3, r0, #9
1001058e:	0a59      	lsrs	r1, r3, #9
10010590:	0043      	lsls	r3, r0, #1
10010592:	0fc2      	lsrs	r2, r0, #31
10010594:	0e1b      	lsrs	r3, r3, #24
10010596:	2000      	movs	r0, #0
10010598:	2b7e      	cmp	r3, #126	; 0x7e
1001059a:	dd0e      	ble.n	100105ba <__aeabi_f2iz+0x2e>
1001059c:	2b9d      	cmp	r3, #157	; 0x9d
1001059e:	dc0d      	bgt.n	100105bc <__aeabi_f2iz+0x30>
100105a0:	2080      	movs	r0, #128	; 0x80
100105a2:	0400      	lsls	r0, r0, #16
100105a4:	4301      	orrs	r1, r0
100105a6:	2b95      	cmp	r3, #149	; 0x95
100105a8:	dc0b      	bgt.n	100105c2 <__aeabi_f2iz+0x36>
100105aa:	2096      	movs	r0, #150	; 0x96
100105ac:	1ac3      	subs	r3, r0, r3
100105ae:	40d9      	lsrs	r1, r3
100105b0:	000b      	movs	r3, r1
100105b2:	4258      	negs	r0, r3
100105b4:	2a00      	cmp	r2, #0
100105b6:	d100      	bne.n	100105ba <__aeabi_f2iz+0x2e>
100105b8:	0018      	movs	r0, r3
100105ba:	4770      	bx	lr
100105bc:	4b03      	ldr	r3, [pc, #12]	; (100105cc <__aeabi_f2iz+0x40>)
100105be:	18d0      	adds	r0, r2, r3
100105c0:	e7fb      	b.n	100105ba <__aeabi_f2iz+0x2e>
100105c2:	3b96      	subs	r3, #150	; 0x96
100105c4:	4099      	lsls	r1, r3
100105c6:	000b      	movs	r3, r1
100105c8:	e7f3      	b.n	100105b2 <__aeabi_f2iz+0x26>
100105ca:	46c0      	nop			; (mov r8, r8)
100105cc:	7fffffff 	.word	0x7fffffff

100105d0 <__aeabi_ui2f>:
100105d0:	b570      	push	{r4, r5, r6, lr}
100105d2:	1e04      	subs	r4, r0, #0
100105d4:	d028      	beq.n	10010628 <__aeabi_ui2f+0x58>
100105d6:	f000 ff83 	bl	100114e0 <__clzsi2>
100105da:	239e      	movs	r3, #158	; 0x9e
100105dc:	1a1b      	subs	r3, r3, r0
100105de:	2b96      	cmp	r3, #150	; 0x96
100105e0:	dc0a      	bgt.n	100105f8 <__aeabi_ui2f+0x28>
100105e2:	2296      	movs	r2, #150	; 0x96
100105e4:	1ad2      	subs	r2, r2, r3
100105e6:	4094      	lsls	r4, r2
100105e8:	0262      	lsls	r2, r4, #9
100105ea:	0a52      	lsrs	r2, r2, #9
100105ec:	b2d8      	uxtb	r0, r3
100105ee:	0252      	lsls	r2, r2, #9
100105f0:	0a52      	lsrs	r2, r2, #9
100105f2:	05c0      	lsls	r0, r0, #23
100105f4:	4310      	orrs	r0, r2
100105f6:	bd70      	pop	{r4, r5, r6, pc}
100105f8:	2b99      	cmp	r3, #153	; 0x99
100105fa:	dc18      	bgt.n	1001062e <__aeabi_ui2f+0x5e>
100105fc:	2299      	movs	r2, #153	; 0x99
100105fe:	1ad2      	subs	r2, r2, r3
10010600:	4094      	lsls	r4, r2
10010602:	4a11      	ldr	r2, [pc, #68]	; (10010648 <__aeabi_ui2f+0x78>)
10010604:	4022      	ands	r2, r4
10010606:	0761      	lsls	r1, r4, #29
10010608:	d004      	beq.n	10010614 <__aeabi_ui2f+0x44>
1001060a:	210f      	movs	r1, #15
1001060c:	400c      	ands	r4, r1
1001060e:	2c04      	cmp	r4, #4
10010610:	d000      	beq.n	10010614 <__aeabi_ui2f+0x44>
10010612:	3204      	adds	r2, #4
10010614:	0151      	lsls	r1, r2, #5
10010616:	d503      	bpl.n	10010620 <__aeabi_ui2f+0x50>
10010618:	4b0b      	ldr	r3, [pc, #44]	; (10010648 <__aeabi_ui2f+0x78>)
1001061a:	401a      	ands	r2, r3
1001061c:	239f      	movs	r3, #159	; 0x9f
1001061e:	1a1b      	subs	r3, r3, r0
10010620:	0192      	lsls	r2, r2, #6
10010622:	0a52      	lsrs	r2, r2, #9
10010624:	b2d8      	uxtb	r0, r3
10010626:	e7e2      	b.n	100105ee <__aeabi_ui2f+0x1e>
10010628:	2000      	movs	r0, #0
1001062a:	2200      	movs	r2, #0
1001062c:	e7df      	b.n	100105ee <__aeabi_ui2f+0x1e>
1001062e:	2205      	movs	r2, #5
10010630:	0025      	movs	r5, r4
10010632:	1a12      	subs	r2, r2, r0
10010634:	21b9      	movs	r1, #185	; 0xb9
10010636:	40d5      	lsrs	r5, r2
10010638:	0022      	movs	r2, r4
1001063a:	1ac9      	subs	r1, r1, r3
1001063c:	408a      	lsls	r2, r1
1001063e:	1e54      	subs	r4, r2, #1
10010640:	41a2      	sbcs	r2, r4
10010642:	002c      	movs	r4, r5
10010644:	4314      	orrs	r4, r2
10010646:	e7dc      	b.n	10010602 <__aeabi_ui2f+0x32>
10010648:	fbffffff 	.word	0xfbffffff

1001064c <__eqdf2>:
1001064c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001064e:	465f      	mov	r7, fp
10010650:	4656      	mov	r6, sl
10010652:	464d      	mov	r5, r9
10010654:	4644      	mov	r4, r8
10010656:	b4f0      	push	{r4, r5, r6, r7}
10010658:	031f      	lsls	r7, r3, #12
1001065a:	005c      	lsls	r4, r3, #1
1001065c:	0fdb      	lsrs	r3, r3, #31
1001065e:	469a      	mov	sl, r3
10010660:	4b19      	ldr	r3, [pc, #100]	; (100106c8 <__eqdf2+0x7c>)
10010662:	030e      	lsls	r6, r1, #12
10010664:	004d      	lsls	r5, r1, #1
10010666:	0fc9      	lsrs	r1, r1, #31
10010668:	4680      	mov	r8, r0
1001066a:	0b36      	lsrs	r6, r6, #12
1001066c:	0d6d      	lsrs	r5, r5, #21
1001066e:	468b      	mov	fp, r1
10010670:	4691      	mov	r9, r2
10010672:	0b3f      	lsrs	r7, r7, #12
10010674:	0d64      	lsrs	r4, r4, #21
10010676:	429d      	cmp	r5, r3
10010678:	d019      	beq.n	100106ae <__eqdf2+0x62>
1001067a:	4b13      	ldr	r3, [pc, #76]	; (100106c8 <__eqdf2+0x7c>)
1001067c:	429c      	cmp	r4, r3
1001067e:	d01b      	beq.n	100106b8 <__eqdf2+0x6c>
10010680:	2301      	movs	r3, #1
10010682:	42a5      	cmp	r5, r4
10010684:	d006      	beq.n	10010694 <__eqdf2+0x48>
10010686:	0018      	movs	r0, r3
10010688:	bc3c      	pop	{r2, r3, r4, r5}
1001068a:	4690      	mov	r8, r2
1001068c:	4699      	mov	r9, r3
1001068e:	46a2      	mov	sl, r4
10010690:	46ab      	mov	fp, r5
10010692:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010694:	42be      	cmp	r6, r7
10010696:	d1f6      	bne.n	10010686 <__eqdf2+0x3a>
10010698:	45c8      	cmp	r8, r9
1001069a:	d1f4      	bne.n	10010686 <__eqdf2+0x3a>
1001069c:	45d3      	cmp	fp, sl
1001069e:	d010      	beq.n	100106c2 <__eqdf2+0x76>
100106a0:	2d00      	cmp	r5, #0
100106a2:	d1f0      	bne.n	10010686 <__eqdf2+0x3a>
100106a4:	4330      	orrs	r0, r6
100106a6:	0003      	movs	r3, r0
100106a8:	1e5a      	subs	r2, r3, #1
100106aa:	4193      	sbcs	r3, r2
100106ac:	e7eb      	b.n	10010686 <__eqdf2+0x3a>
100106ae:	0031      	movs	r1, r6
100106b0:	2301      	movs	r3, #1
100106b2:	4301      	orrs	r1, r0
100106b4:	d1e7      	bne.n	10010686 <__eqdf2+0x3a>
100106b6:	e7e0      	b.n	1001067a <__eqdf2+0x2e>
100106b8:	433a      	orrs	r2, r7
100106ba:	2301      	movs	r3, #1
100106bc:	2a00      	cmp	r2, #0
100106be:	d1e2      	bne.n	10010686 <__eqdf2+0x3a>
100106c0:	e7de      	b.n	10010680 <__eqdf2+0x34>
100106c2:	2300      	movs	r3, #0
100106c4:	e7df      	b.n	10010686 <__eqdf2+0x3a>
100106c6:	46c0      	nop			; (mov r8, r8)
100106c8:	000007ff 	.word	0x000007ff

100106cc <__gedf2>:
100106cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100106ce:	465f      	mov	r7, fp
100106d0:	4644      	mov	r4, r8
100106d2:	4656      	mov	r6, sl
100106d4:	464d      	mov	r5, r9
100106d6:	b4f0      	push	{r4, r5, r6, r7}
100106d8:	031f      	lsls	r7, r3, #12
100106da:	0b3c      	lsrs	r4, r7, #12
100106dc:	4f2c      	ldr	r7, [pc, #176]	; (10010790 <__gedf2+0xc4>)
100106de:	030e      	lsls	r6, r1, #12
100106e0:	004d      	lsls	r5, r1, #1
100106e2:	46a3      	mov	fp, r4
100106e4:	005c      	lsls	r4, r3, #1
100106e6:	4684      	mov	ip, r0
100106e8:	0b36      	lsrs	r6, r6, #12
100106ea:	0d6d      	lsrs	r5, r5, #21
100106ec:	0fc9      	lsrs	r1, r1, #31
100106ee:	4690      	mov	r8, r2
100106f0:	0d64      	lsrs	r4, r4, #21
100106f2:	0fdb      	lsrs	r3, r3, #31
100106f4:	42bd      	cmp	r5, r7
100106f6:	d02b      	beq.n	10010750 <__gedf2+0x84>
100106f8:	4f25      	ldr	r7, [pc, #148]	; (10010790 <__gedf2+0xc4>)
100106fa:	42bc      	cmp	r4, r7
100106fc:	d02e      	beq.n	1001075c <__gedf2+0x90>
100106fe:	2d00      	cmp	r5, #0
10010700:	d10e      	bne.n	10010720 <__gedf2+0x54>
10010702:	4330      	orrs	r0, r6
10010704:	0007      	movs	r7, r0
10010706:	4681      	mov	r9, r0
10010708:	4278      	negs	r0, r7
1001070a:	4178      	adcs	r0, r7
1001070c:	2c00      	cmp	r4, #0
1001070e:	d117      	bne.n	10010740 <__gedf2+0x74>
10010710:	465f      	mov	r7, fp
10010712:	433a      	orrs	r2, r7
10010714:	d114      	bne.n	10010740 <__gedf2+0x74>
10010716:	464b      	mov	r3, r9
10010718:	2000      	movs	r0, #0
1001071a:	2b00      	cmp	r3, #0
1001071c:	d00a      	beq.n	10010734 <__gedf2+0x68>
1001071e:	e006      	b.n	1001072e <__gedf2+0x62>
10010720:	2c00      	cmp	r4, #0
10010722:	d102      	bne.n	1001072a <__gedf2+0x5e>
10010724:	4658      	mov	r0, fp
10010726:	4302      	orrs	r2, r0
10010728:	d001      	beq.n	1001072e <__gedf2+0x62>
1001072a:	4299      	cmp	r1, r3
1001072c:	d01a      	beq.n	10010764 <__gedf2+0x98>
1001072e:	2301      	movs	r3, #1
10010730:	4248      	negs	r0, r1
10010732:	4318      	orrs	r0, r3
10010734:	bc3c      	pop	{r2, r3, r4, r5}
10010736:	4690      	mov	r8, r2
10010738:	4699      	mov	r9, r3
1001073a:	46a2      	mov	sl, r4
1001073c:	46ab      	mov	fp, r5
1001073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010740:	2800      	cmp	r0, #0
10010742:	d0f2      	beq.n	1001072a <__gedf2+0x5e>
10010744:	4258      	negs	r0, r3
10010746:	4158      	adcs	r0, r3
10010748:	2201      	movs	r2, #1
1001074a:	4240      	negs	r0, r0
1001074c:	4310      	orrs	r0, r2
1001074e:	e7f1      	b.n	10010734 <__gedf2+0x68>
10010750:	0037      	movs	r7, r6
10010752:	4307      	orrs	r7, r0
10010754:	d0d0      	beq.n	100106f8 <__gedf2+0x2c>
10010756:	2002      	movs	r0, #2
10010758:	4240      	negs	r0, r0
1001075a:	e7eb      	b.n	10010734 <__gedf2+0x68>
1001075c:	465f      	mov	r7, fp
1001075e:	4317      	orrs	r7, r2
10010760:	d0cd      	beq.n	100106fe <__gedf2+0x32>
10010762:	e7f8      	b.n	10010756 <__gedf2+0x8a>
10010764:	42a5      	cmp	r5, r4
10010766:	dce2      	bgt.n	1001072e <__gedf2+0x62>
10010768:	db05      	blt.n	10010776 <__gedf2+0xaa>
1001076a:	455e      	cmp	r6, fp
1001076c:	d8df      	bhi.n	1001072e <__gedf2+0x62>
1001076e:	d008      	beq.n	10010782 <__gedf2+0xb6>
10010770:	2000      	movs	r0, #0
10010772:	455e      	cmp	r6, fp
10010774:	d2de      	bcs.n	10010734 <__gedf2+0x68>
10010776:	4248      	negs	r0, r1
10010778:	4148      	adcs	r0, r1
1001077a:	2301      	movs	r3, #1
1001077c:	4240      	negs	r0, r0
1001077e:	4318      	orrs	r0, r3
10010780:	e7d8      	b.n	10010734 <__gedf2+0x68>
10010782:	45c4      	cmp	ip, r8
10010784:	d8d3      	bhi.n	1001072e <__gedf2+0x62>
10010786:	2000      	movs	r0, #0
10010788:	45c4      	cmp	ip, r8
1001078a:	d3f4      	bcc.n	10010776 <__gedf2+0xaa>
1001078c:	e7d2      	b.n	10010734 <__gedf2+0x68>
1001078e:	46c0      	nop			; (mov r8, r8)
10010790:	000007ff 	.word	0x000007ff

10010794 <__ledf2>:
10010794:	b5f0      	push	{r4, r5, r6, r7, lr}
10010796:	465f      	mov	r7, fp
10010798:	464d      	mov	r5, r9
1001079a:	4644      	mov	r4, r8
1001079c:	4656      	mov	r6, sl
1001079e:	b4f0      	push	{r4, r5, r6, r7}
100107a0:	031c      	lsls	r4, r3, #12
100107a2:	0b24      	lsrs	r4, r4, #12
100107a4:	46a4      	mov	ip, r4
100107a6:	4c2f      	ldr	r4, [pc, #188]	; (10010864 <__ledf2+0xd0>)
100107a8:	030f      	lsls	r7, r1, #12
100107aa:	004d      	lsls	r5, r1, #1
100107ac:	005e      	lsls	r6, r3, #1
100107ae:	0fc9      	lsrs	r1, r1, #31
100107b0:	4680      	mov	r8, r0
100107b2:	0b3f      	lsrs	r7, r7, #12
100107b4:	0d6d      	lsrs	r5, r5, #21
100107b6:	468b      	mov	fp, r1
100107b8:	4691      	mov	r9, r2
100107ba:	0d76      	lsrs	r6, r6, #21
100107bc:	0fdb      	lsrs	r3, r3, #31
100107be:	42a5      	cmp	r5, r4
100107c0:	d020      	beq.n	10010804 <__ledf2+0x70>
100107c2:	4c28      	ldr	r4, [pc, #160]	; (10010864 <__ledf2+0xd0>)
100107c4:	42a6      	cmp	r6, r4
100107c6:	d022      	beq.n	1001080e <__ledf2+0x7a>
100107c8:	2d00      	cmp	r5, #0
100107ca:	d112      	bne.n	100107f2 <__ledf2+0x5e>
100107cc:	4338      	orrs	r0, r7
100107ce:	4244      	negs	r4, r0
100107d0:	4144      	adcs	r4, r0
100107d2:	2e00      	cmp	r6, #0
100107d4:	d020      	beq.n	10010818 <__ledf2+0x84>
100107d6:	2c00      	cmp	r4, #0
100107d8:	d00d      	beq.n	100107f6 <__ledf2+0x62>
100107da:	425c      	negs	r4, r3
100107dc:	4163      	adcs	r3, r4
100107de:	2401      	movs	r4, #1
100107e0:	425b      	negs	r3, r3
100107e2:	431c      	orrs	r4, r3
100107e4:	0020      	movs	r0, r4
100107e6:	bc3c      	pop	{r2, r3, r4, r5}
100107e8:	4690      	mov	r8, r2
100107ea:	4699      	mov	r9, r3
100107ec:	46a2      	mov	sl, r4
100107ee:	46ab      	mov	fp, r5
100107f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107f2:	2e00      	cmp	r6, #0
100107f4:	d017      	beq.n	10010826 <__ledf2+0x92>
100107f6:	455b      	cmp	r3, fp
100107f8:	d019      	beq.n	1001082e <__ledf2+0x9a>
100107fa:	465b      	mov	r3, fp
100107fc:	425c      	negs	r4, r3
100107fe:	2301      	movs	r3, #1
10010800:	431c      	orrs	r4, r3
10010802:	e7ef      	b.n	100107e4 <__ledf2+0x50>
10010804:	0039      	movs	r1, r7
10010806:	2402      	movs	r4, #2
10010808:	4301      	orrs	r1, r0
1001080a:	d1eb      	bne.n	100107e4 <__ledf2+0x50>
1001080c:	e7d9      	b.n	100107c2 <__ledf2+0x2e>
1001080e:	4661      	mov	r1, ip
10010810:	2402      	movs	r4, #2
10010812:	4311      	orrs	r1, r2
10010814:	d1e6      	bne.n	100107e4 <__ledf2+0x50>
10010816:	e7d7      	b.n	100107c8 <__ledf2+0x34>
10010818:	4661      	mov	r1, ip
1001081a:	430a      	orrs	r2, r1
1001081c:	d1db      	bne.n	100107d6 <__ledf2+0x42>
1001081e:	2400      	movs	r4, #0
10010820:	2800      	cmp	r0, #0
10010822:	d0df      	beq.n	100107e4 <__ledf2+0x50>
10010824:	e7e9      	b.n	100107fa <__ledf2+0x66>
10010826:	4661      	mov	r1, ip
10010828:	430a      	orrs	r2, r1
1001082a:	d1e4      	bne.n	100107f6 <__ledf2+0x62>
1001082c:	e7e5      	b.n	100107fa <__ledf2+0x66>
1001082e:	42b5      	cmp	r5, r6
10010830:	dd03      	ble.n	1001083a <__ledf2+0xa6>
10010832:	2201      	movs	r2, #1
10010834:	425c      	negs	r4, r3
10010836:	4314      	orrs	r4, r2
10010838:	e7d4      	b.n	100107e4 <__ledf2+0x50>
1001083a:	42b5      	cmp	r5, r6
1001083c:	dbcd      	blt.n	100107da <__ledf2+0x46>
1001083e:	4567      	cmp	r7, ip
10010840:	d8db      	bhi.n	100107fa <__ledf2+0x66>
10010842:	d009      	beq.n	10010858 <__ledf2+0xc4>
10010844:	2400      	movs	r4, #0
10010846:	4567      	cmp	r7, ip
10010848:	d2cc      	bcs.n	100107e4 <__ledf2+0x50>
1001084a:	4659      	mov	r1, fp
1001084c:	424c      	negs	r4, r1
1001084e:	4161      	adcs	r1, r4
10010850:	2401      	movs	r4, #1
10010852:	4249      	negs	r1, r1
10010854:	430c      	orrs	r4, r1
10010856:	e7c5      	b.n	100107e4 <__ledf2+0x50>
10010858:	45c8      	cmp	r8, r9
1001085a:	d8ce      	bhi.n	100107fa <__ledf2+0x66>
1001085c:	2400      	movs	r4, #0
1001085e:	45c8      	cmp	r8, r9
10010860:	d3f3      	bcc.n	1001084a <__ledf2+0xb6>
10010862:	e7bf      	b.n	100107e4 <__ledf2+0x50>
10010864:	000007ff 	.word	0x000007ff

10010868 <__aeabi_dmul>:
10010868:	b5f0      	push	{r4, r5, r6, r7, lr}
1001086a:	465f      	mov	r7, fp
1001086c:	4656      	mov	r6, sl
1001086e:	464d      	mov	r5, r9
10010870:	4644      	mov	r4, r8
10010872:	b4f0      	push	{r4, r5, r6, r7}
10010874:	030d      	lsls	r5, r1, #12
10010876:	4699      	mov	r9, r3
10010878:	004e      	lsls	r6, r1, #1
1001087a:	0b2b      	lsrs	r3, r5, #12
1001087c:	b087      	sub	sp, #28
1001087e:	0007      	movs	r7, r0
10010880:	4692      	mov	sl, r2
10010882:	4680      	mov	r8, r0
10010884:	469b      	mov	fp, r3
10010886:	0d76      	lsrs	r6, r6, #21
10010888:	0fcc      	lsrs	r4, r1, #31
1001088a:	2e00      	cmp	r6, #0
1001088c:	d069      	beq.n	10010962 <__aeabi_dmul+0xfa>
1001088e:	4b6d      	ldr	r3, [pc, #436]	; (10010a44 <__aeabi_dmul+0x1dc>)
10010890:	429e      	cmp	r6, r3
10010892:	d035      	beq.n	10010900 <__aeabi_dmul+0x98>
10010894:	465b      	mov	r3, fp
10010896:	2280      	movs	r2, #128	; 0x80
10010898:	00dd      	lsls	r5, r3, #3
1001089a:	0412      	lsls	r2, r2, #16
1001089c:	0f43      	lsrs	r3, r0, #29
1001089e:	4313      	orrs	r3, r2
100108a0:	432b      	orrs	r3, r5
100108a2:	469b      	mov	fp, r3
100108a4:	00c3      	lsls	r3, r0, #3
100108a6:	4698      	mov	r8, r3
100108a8:	4b67      	ldr	r3, [pc, #412]	; (10010a48 <__aeabi_dmul+0x1e0>)
100108aa:	2700      	movs	r7, #0
100108ac:	469c      	mov	ip, r3
100108ae:	2300      	movs	r3, #0
100108b0:	4466      	add	r6, ip
100108b2:	9301      	str	r3, [sp, #4]
100108b4:	464a      	mov	r2, r9
100108b6:	0315      	lsls	r5, r2, #12
100108b8:	0050      	lsls	r0, r2, #1
100108ba:	0fd2      	lsrs	r2, r2, #31
100108bc:	4653      	mov	r3, sl
100108be:	0b2d      	lsrs	r5, r5, #12
100108c0:	0d40      	lsrs	r0, r0, #21
100108c2:	4691      	mov	r9, r2
100108c4:	d100      	bne.n	100108c8 <__aeabi_dmul+0x60>
100108c6:	e076      	b.n	100109b6 <__aeabi_dmul+0x14e>
100108c8:	4a5e      	ldr	r2, [pc, #376]	; (10010a44 <__aeabi_dmul+0x1dc>)
100108ca:	4290      	cmp	r0, r2
100108cc:	d06c      	beq.n	100109a8 <__aeabi_dmul+0x140>
100108ce:	2280      	movs	r2, #128	; 0x80
100108d0:	0f5b      	lsrs	r3, r3, #29
100108d2:	0412      	lsls	r2, r2, #16
100108d4:	4313      	orrs	r3, r2
100108d6:	4a5c      	ldr	r2, [pc, #368]	; (10010a48 <__aeabi_dmul+0x1e0>)
100108d8:	00ed      	lsls	r5, r5, #3
100108da:	4694      	mov	ip, r2
100108dc:	431d      	orrs	r5, r3
100108de:	4653      	mov	r3, sl
100108e0:	2200      	movs	r2, #0
100108e2:	00db      	lsls	r3, r3, #3
100108e4:	4460      	add	r0, ip
100108e6:	4649      	mov	r1, r9
100108e8:	1836      	adds	r6, r6, r0
100108ea:	1c70      	adds	r0, r6, #1
100108ec:	4061      	eors	r1, r4
100108ee:	9002      	str	r0, [sp, #8]
100108f0:	4317      	orrs	r7, r2
100108f2:	2f0f      	cmp	r7, #15
100108f4:	d900      	bls.n	100108f8 <__aeabi_dmul+0x90>
100108f6:	e0af      	b.n	10010a58 <__aeabi_dmul+0x1f0>
100108f8:	4854      	ldr	r0, [pc, #336]	; (10010a4c <__aeabi_dmul+0x1e4>)
100108fa:	00bf      	lsls	r7, r7, #2
100108fc:	59c7      	ldr	r7, [r0, r7]
100108fe:	46bf      	mov	pc, r7
10010900:	465b      	mov	r3, fp
10010902:	431f      	orrs	r7, r3
10010904:	d000      	beq.n	10010908 <__aeabi_dmul+0xa0>
10010906:	e088      	b.n	10010a1a <__aeabi_dmul+0x1b2>
10010908:	2300      	movs	r3, #0
1001090a:	469b      	mov	fp, r3
1001090c:	4698      	mov	r8, r3
1001090e:	3302      	adds	r3, #2
10010910:	2708      	movs	r7, #8
10010912:	9301      	str	r3, [sp, #4]
10010914:	e7ce      	b.n	100108b4 <__aeabi_dmul+0x4c>
10010916:	4649      	mov	r1, r9
10010918:	2a02      	cmp	r2, #2
1001091a:	d06a      	beq.n	100109f2 <__aeabi_dmul+0x18a>
1001091c:	2a03      	cmp	r2, #3
1001091e:	d100      	bne.n	10010922 <__aeabi_dmul+0xba>
10010920:	e209      	b.n	10010d36 <__aeabi_dmul+0x4ce>
10010922:	2a01      	cmp	r2, #1
10010924:	d000      	beq.n	10010928 <__aeabi_dmul+0xc0>
10010926:	e1bb      	b.n	10010ca0 <__aeabi_dmul+0x438>
10010928:	4011      	ands	r1, r2
1001092a:	2200      	movs	r2, #0
1001092c:	2300      	movs	r3, #0
1001092e:	2500      	movs	r5, #0
10010930:	4690      	mov	r8, r2
10010932:	b2cc      	uxtb	r4, r1
10010934:	2100      	movs	r1, #0
10010936:	032d      	lsls	r5, r5, #12
10010938:	0d0a      	lsrs	r2, r1, #20
1001093a:	0512      	lsls	r2, r2, #20
1001093c:	0b2d      	lsrs	r5, r5, #12
1001093e:	4315      	orrs	r5, r2
10010940:	4a43      	ldr	r2, [pc, #268]	; (10010a50 <__aeabi_dmul+0x1e8>)
10010942:	051b      	lsls	r3, r3, #20
10010944:	4015      	ands	r5, r2
10010946:	431d      	orrs	r5, r3
10010948:	006d      	lsls	r5, r5, #1
1001094a:	07e4      	lsls	r4, r4, #31
1001094c:	086d      	lsrs	r5, r5, #1
1001094e:	4325      	orrs	r5, r4
10010950:	4640      	mov	r0, r8
10010952:	0029      	movs	r1, r5
10010954:	b007      	add	sp, #28
10010956:	bc3c      	pop	{r2, r3, r4, r5}
10010958:	4690      	mov	r8, r2
1001095a:	4699      	mov	r9, r3
1001095c:	46a2      	mov	sl, r4
1001095e:	46ab      	mov	fp, r5
10010960:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010962:	4303      	orrs	r3, r0
10010964:	d052      	beq.n	10010a0c <__aeabi_dmul+0x1a4>
10010966:	465b      	mov	r3, fp
10010968:	2b00      	cmp	r3, #0
1001096a:	d100      	bne.n	1001096e <__aeabi_dmul+0x106>
1001096c:	e18a      	b.n	10010c84 <__aeabi_dmul+0x41c>
1001096e:	4658      	mov	r0, fp
10010970:	f000 fdb6 	bl	100114e0 <__clzsi2>
10010974:	0003      	movs	r3, r0
10010976:	3b0b      	subs	r3, #11
10010978:	2b1c      	cmp	r3, #28
1001097a:	dd00      	ble.n	1001097e <__aeabi_dmul+0x116>
1001097c:	e17b      	b.n	10010c76 <__aeabi_dmul+0x40e>
1001097e:	221d      	movs	r2, #29
10010980:	1ad3      	subs	r3, r2, r3
10010982:	003a      	movs	r2, r7
10010984:	0001      	movs	r1, r0
10010986:	465d      	mov	r5, fp
10010988:	40da      	lsrs	r2, r3
1001098a:	3908      	subs	r1, #8
1001098c:	408d      	lsls	r5, r1
1001098e:	0013      	movs	r3, r2
10010990:	408f      	lsls	r7, r1
10010992:	432b      	orrs	r3, r5
10010994:	469b      	mov	fp, r3
10010996:	46b8      	mov	r8, r7
10010998:	4b2e      	ldr	r3, [pc, #184]	; (10010a54 <__aeabi_dmul+0x1ec>)
1001099a:	2700      	movs	r7, #0
1001099c:	469c      	mov	ip, r3
1001099e:	2300      	movs	r3, #0
100109a0:	4460      	add	r0, ip
100109a2:	4246      	negs	r6, r0
100109a4:	9301      	str	r3, [sp, #4]
100109a6:	e785      	b.n	100108b4 <__aeabi_dmul+0x4c>
100109a8:	4652      	mov	r2, sl
100109aa:	432a      	orrs	r2, r5
100109ac:	d12c      	bne.n	10010a08 <__aeabi_dmul+0x1a0>
100109ae:	2500      	movs	r5, #0
100109b0:	2300      	movs	r3, #0
100109b2:	2202      	movs	r2, #2
100109b4:	e797      	b.n	100108e6 <__aeabi_dmul+0x7e>
100109b6:	4652      	mov	r2, sl
100109b8:	432a      	orrs	r2, r5
100109ba:	d021      	beq.n	10010a00 <__aeabi_dmul+0x198>
100109bc:	2d00      	cmp	r5, #0
100109be:	d100      	bne.n	100109c2 <__aeabi_dmul+0x15a>
100109c0:	e154      	b.n	10010c6c <__aeabi_dmul+0x404>
100109c2:	0028      	movs	r0, r5
100109c4:	f000 fd8c 	bl	100114e0 <__clzsi2>
100109c8:	0003      	movs	r3, r0
100109ca:	3b0b      	subs	r3, #11
100109cc:	2b1c      	cmp	r3, #28
100109ce:	dd00      	ble.n	100109d2 <__aeabi_dmul+0x16a>
100109d0:	e146      	b.n	10010c60 <__aeabi_dmul+0x3f8>
100109d2:	211d      	movs	r1, #29
100109d4:	1acb      	subs	r3, r1, r3
100109d6:	4651      	mov	r1, sl
100109d8:	0002      	movs	r2, r0
100109da:	40d9      	lsrs	r1, r3
100109dc:	4653      	mov	r3, sl
100109de:	3a08      	subs	r2, #8
100109e0:	4095      	lsls	r5, r2
100109e2:	4093      	lsls	r3, r2
100109e4:	430d      	orrs	r5, r1
100109e6:	4a1b      	ldr	r2, [pc, #108]	; (10010a54 <__aeabi_dmul+0x1ec>)
100109e8:	4694      	mov	ip, r2
100109ea:	4460      	add	r0, ip
100109ec:	4240      	negs	r0, r0
100109ee:	2200      	movs	r2, #0
100109f0:	e779      	b.n	100108e6 <__aeabi_dmul+0x7e>
100109f2:	2401      	movs	r4, #1
100109f4:	2200      	movs	r2, #0
100109f6:	400c      	ands	r4, r1
100109f8:	4b12      	ldr	r3, [pc, #72]	; (10010a44 <__aeabi_dmul+0x1dc>)
100109fa:	2500      	movs	r5, #0
100109fc:	4690      	mov	r8, r2
100109fe:	e799      	b.n	10010934 <__aeabi_dmul+0xcc>
10010a00:	2500      	movs	r5, #0
10010a02:	2300      	movs	r3, #0
10010a04:	2201      	movs	r2, #1
10010a06:	e76e      	b.n	100108e6 <__aeabi_dmul+0x7e>
10010a08:	2203      	movs	r2, #3
10010a0a:	e76c      	b.n	100108e6 <__aeabi_dmul+0x7e>
10010a0c:	2300      	movs	r3, #0
10010a0e:	469b      	mov	fp, r3
10010a10:	4698      	mov	r8, r3
10010a12:	3301      	adds	r3, #1
10010a14:	2704      	movs	r7, #4
10010a16:	9301      	str	r3, [sp, #4]
10010a18:	e74c      	b.n	100108b4 <__aeabi_dmul+0x4c>
10010a1a:	2303      	movs	r3, #3
10010a1c:	270c      	movs	r7, #12
10010a1e:	9301      	str	r3, [sp, #4]
10010a20:	e748      	b.n	100108b4 <__aeabi_dmul+0x4c>
10010a22:	2300      	movs	r3, #0
10010a24:	2580      	movs	r5, #128	; 0x80
10010a26:	4698      	mov	r8, r3
10010a28:	2400      	movs	r4, #0
10010a2a:	032d      	lsls	r5, r5, #12
10010a2c:	4b05      	ldr	r3, [pc, #20]	; (10010a44 <__aeabi_dmul+0x1dc>)
10010a2e:	e781      	b.n	10010934 <__aeabi_dmul+0xcc>
10010a30:	465d      	mov	r5, fp
10010a32:	4643      	mov	r3, r8
10010a34:	9a01      	ldr	r2, [sp, #4]
10010a36:	e76f      	b.n	10010918 <__aeabi_dmul+0xb0>
10010a38:	465d      	mov	r5, fp
10010a3a:	4643      	mov	r3, r8
10010a3c:	0021      	movs	r1, r4
10010a3e:	9a01      	ldr	r2, [sp, #4]
10010a40:	e76a      	b.n	10010918 <__aeabi_dmul+0xb0>
10010a42:	46c0      	nop			; (mov r8, r8)
10010a44:	000007ff 	.word	0x000007ff
10010a48:	fffffc01 	.word	0xfffffc01
10010a4c:	1001371c 	.word	0x1001371c
10010a50:	800fffff 	.word	0x800fffff
10010a54:	000003f3 	.word	0x000003f3
10010a58:	4642      	mov	r2, r8
10010a5a:	0c12      	lsrs	r2, r2, #16
10010a5c:	4691      	mov	r9, r2
10010a5e:	0c1a      	lsrs	r2, r3, #16
10010a60:	4694      	mov	ip, r2
10010a62:	4642      	mov	r2, r8
10010a64:	0417      	lsls	r7, r2, #16
10010a66:	464a      	mov	r2, r9
10010a68:	041b      	lsls	r3, r3, #16
10010a6a:	0c1b      	lsrs	r3, r3, #16
10010a6c:	435a      	muls	r2, r3
10010a6e:	4660      	mov	r0, ip
10010a70:	4690      	mov	r8, r2
10010a72:	464a      	mov	r2, r9
10010a74:	4342      	muls	r2, r0
10010a76:	0010      	movs	r0, r2
10010a78:	9203      	str	r2, [sp, #12]
10010a7a:	4662      	mov	r2, ip
10010a7c:	001c      	movs	r4, r3
10010a7e:	0c3f      	lsrs	r7, r7, #16
10010a80:	437a      	muls	r2, r7
10010a82:	437c      	muls	r4, r7
10010a84:	4442      	add	r2, r8
10010a86:	9201      	str	r2, [sp, #4]
10010a88:	0c22      	lsrs	r2, r4, #16
10010a8a:	4692      	mov	sl, r2
10010a8c:	9a01      	ldr	r2, [sp, #4]
10010a8e:	4452      	add	r2, sl
10010a90:	4590      	cmp	r8, r2
10010a92:	d906      	bls.n	10010aa2 <__aeabi_dmul+0x23a>
10010a94:	4682      	mov	sl, r0
10010a96:	2080      	movs	r0, #128	; 0x80
10010a98:	0240      	lsls	r0, r0, #9
10010a9a:	4680      	mov	r8, r0
10010a9c:	44c2      	add	sl, r8
10010a9e:	4650      	mov	r0, sl
10010aa0:	9003      	str	r0, [sp, #12]
10010aa2:	0c10      	lsrs	r0, r2, #16
10010aa4:	9004      	str	r0, [sp, #16]
10010aa6:	4648      	mov	r0, r9
10010aa8:	0424      	lsls	r4, r4, #16
10010aaa:	0c24      	lsrs	r4, r4, #16
10010aac:	0412      	lsls	r2, r2, #16
10010aae:	1912      	adds	r2, r2, r4
10010ab0:	9205      	str	r2, [sp, #20]
10010ab2:	0c2a      	lsrs	r2, r5, #16
10010ab4:	042d      	lsls	r5, r5, #16
10010ab6:	0c2d      	lsrs	r5, r5, #16
10010ab8:	4368      	muls	r0, r5
10010aba:	002c      	movs	r4, r5
10010abc:	4682      	mov	sl, r0
10010abe:	4648      	mov	r0, r9
10010ac0:	437c      	muls	r4, r7
10010ac2:	4350      	muls	r0, r2
10010ac4:	4681      	mov	r9, r0
10010ac6:	0c20      	lsrs	r0, r4, #16
10010ac8:	4680      	mov	r8, r0
10010aca:	4357      	muls	r7, r2
10010acc:	4457      	add	r7, sl
10010ace:	4447      	add	r7, r8
10010ad0:	45ba      	cmp	sl, r7
10010ad2:	d903      	bls.n	10010adc <__aeabi_dmul+0x274>
10010ad4:	2080      	movs	r0, #128	; 0x80
10010ad6:	0240      	lsls	r0, r0, #9
10010ad8:	4680      	mov	r8, r0
10010ada:	44c1      	add	r9, r8
10010adc:	0c38      	lsrs	r0, r7, #16
10010ade:	043f      	lsls	r7, r7, #16
10010ae0:	46b8      	mov	r8, r7
10010ae2:	4448      	add	r0, r9
10010ae4:	0424      	lsls	r4, r4, #16
10010ae6:	0c24      	lsrs	r4, r4, #16
10010ae8:	9001      	str	r0, [sp, #4]
10010aea:	9804      	ldr	r0, [sp, #16]
10010aec:	44a0      	add	r8, r4
10010aee:	4440      	add	r0, r8
10010af0:	9004      	str	r0, [sp, #16]
10010af2:	4658      	mov	r0, fp
10010af4:	0c00      	lsrs	r0, r0, #16
10010af6:	4681      	mov	r9, r0
10010af8:	4658      	mov	r0, fp
10010afa:	0404      	lsls	r4, r0, #16
10010afc:	0c20      	lsrs	r0, r4, #16
10010afe:	4682      	mov	sl, r0
10010b00:	0007      	movs	r7, r0
10010b02:	4648      	mov	r0, r9
10010b04:	435f      	muls	r7, r3
10010b06:	464c      	mov	r4, r9
10010b08:	4343      	muls	r3, r0
10010b0a:	4660      	mov	r0, ip
10010b0c:	4360      	muls	r0, r4
10010b0e:	4664      	mov	r4, ip
10010b10:	4683      	mov	fp, r0
10010b12:	4650      	mov	r0, sl
10010b14:	4344      	muls	r4, r0
10010b16:	0c38      	lsrs	r0, r7, #16
10010b18:	4684      	mov	ip, r0
10010b1a:	18e4      	adds	r4, r4, r3
10010b1c:	4464      	add	r4, ip
10010b1e:	42a3      	cmp	r3, r4
10010b20:	d903      	bls.n	10010b2a <__aeabi_dmul+0x2c2>
10010b22:	2380      	movs	r3, #128	; 0x80
10010b24:	025b      	lsls	r3, r3, #9
10010b26:	469c      	mov	ip, r3
10010b28:	44e3      	add	fp, ip
10010b2a:	4648      	mov	r0, r9
10010b2c:	043f      	lsls	r7, r7, #16
10010b2e:	0c23      	lsrs	r3, r4, #16
10010b30:	0c3f      	lsrs	r7, r7, #16
10010b32:	0424      	lsls	r4, r4, #16
10010b34:	19e4      	adds	r4, r4, r7
10010b36:	4657      	mov	r7, sl
10010b38:	4368      	muls	r0, r5
10010b3a:	436f      	muls	r7, r5
10010b3c:	4684      	mov	ip, r0
10010b3e:	464d      	mov	r5, r9
10010b40:	4650      	mov	r0, sl
10010b42:	4355      	muls	r5, r2
10010b44:	4342      	muls	r2, r0
10010b46:	0c38      	lsrs	r0, r7, #16
10010b48:	4681      	mov	r9, r0
10010b4a:	4462      	add	r2, ip
10010b4c:	444a      	add	r2, r9
10010b4e:	445b      	add	r3, fp
10010b50:	4594      	cmp	ip, r2
10010b52:	d903      	bls.n	10010b5c <__aeabi_dmul+0x2f4>
10010b54:	2080      	movs	r0, #128	; 0x80
10010b56:	0240      	lsls	r0, r0, #9
10010b58:	4684      	mov	ip, r0
10010b5a:	4465      	add	r5, ip
10010b5c:	9803      	ldr	r0, [sp, #12]
10010b5e:	043f      	lsls	r7, r7, #16
10010b60:	4683      	mov	fp, r0
10010b62:	9804      	ldr	r0, [sp, #16]
10010b64:	0c3f      	lsrs	r7, r7, #16
10010b66:	4684      	mov	ip, r0
10010b68:	44e3      	add	fp, ip
10010b6a:	45c3      	cmp	fp, r8
10010b6c:	4180      	sbcs	r0, r0
10010b6e:	4240      	negs	r0, r0
10010b70:	4682      	mov	sl, r0
10010b72:	0410      	lsls	r0, r2, #16
10010b74:	4684      	mov	ip, r0
10010b76:	9801      	ldr	r0, [sp, #4]
10010b78:	4467      	add	r7, ip
10010b7a:	4684      	mov	ip, r0
10010b7c:	4467      	add	r7, ip
10010b7e:	44a3      	add	fp, r4
10010b80:	46bc      	mov	ip, r7
10010b82:	45a3      	cmp	fp, r4
10010b84:	41a4      	sbcs	r4, r4
10010b86:	4699      	mov	r9, r3
10010b88:	44d4      	add	ip, sl
10010b8a:	4264      	negs	r4, r4
10010b8c:	4287      	cmp	r7, r0
10010b8e:	41bf      	sbcs	r7, r7
10010b90:	45d4      	cmp	ip, sl
10010b92:	4180      	sbcs	r0, r0
10010b94:	44e1      	add	r9, ip
10010b96:	46a0      	mov	r8, r4
10010b98:	4599      	cmp	r9, r3
10010b9a:	419b      	sbcs	r3, r3
10010b9c:	427f      	negs	r7, r7
10010b9e:	4240      	negs	r0, r0
10010ba0:	44c8      	add	r8, r9
10010ba2:	4307      	orrs	r7, r0
10010ba4:	0c12      	lsrs	r2, r2, #16
10010ba6:	18ba      	adds	r2, r7, r2
10010ba8:	45a0      	cmp	r8, r4
10010baa:	41a4      	sbcs	r4, r4
10010bac:	425f      	negs	r7, r3
10010bae:	003b      	movs	r3, r7
10010bb0:	4264      	negs	r4, r4
10010bb2:	4323      	orrs	r3, r4
10010bb4:	18d7      	adds	r7, r2, r3
10010bb6:	4643      	mov	r3, r8
10010bb8:	197d      	adds	r5, r7, r5
10010bba:	0ddb      	lsrs	r3, r3, #23
10010bbc:	026d      	lsls	r5, r5, #9
10010bbe:	431d      	orrs	r5, r3
10010bc0:	465b      	mov	r3, fp
10010bc2:	025a      	lsls	r2, r3, #9
10010bc4:	9b05      	ldr	r3, [sp, #20]
10010bc6:	431a      	orrs	r2, r3
10010bc8:	1e53      	subs	r3, r2, #1
10010bca:	419a      	sbcs	r2, r3
10010bcc:	465b      	mov	r3, fp
10010bce:	0ddb      	lsrs	r3, r3, #23
10010bd0:	431a      	orrs	r2, r3
10010bd2:	4643      	mov	r3, r8
10010bd4:	025b      	lsls	r3, r3, #9
10010bd6:	4313      	orrs	r3, r2
10010bd8:	01ea      	lsls	r2, r5, #7
10010bda:	d507      	bpl.n	10010bec <__aeabi_dmul+0x384>
10010bdc:	2201      	movs	r2, #1
10010bde:	085c      	lsrs	r4, r3, #1
10010be0:	4013      	ands	r3, r2
10010be2:	4323      	orrs	r3, r4
10010be4:	07ea      	lsls	r2, r5, #31
10010be6:	9e02      	ldr	r6, [sp, #8]
10010be8:	4313      	orrs	r3, r2
10010bea:	086d      	lsrs	r5, r5, #1
10010bec:	4a57      	ldr	r2, [pc, #348]	; (10010d4c <__aeabi_dmul+0x4e4>)
10010bee:	18b2      	adds	r2, r6, r2
10010bf0:	2a00      	cmp	r2, #0
10010bf2:	dd4b      	ble.n	10010c8c <__aeabi_dmul+0x424>
10010bf4:	0758      	lsls	r0, r3, #29
10010bf6:	d009      	beq.n	10010c0c <__aeabi_dmul+0x3a4>
10010bf8:	200f      	movs	r0, #15
10010bfa:	4018      	ands	r0, r3
10010bfc:	2804      	cmp	r0, #4
10010bfe:	d005      	beq.n	10010c0c <__aeabi_dmul+0x3a4>
10010c00:	1d18      	adds	r0, r3, #4
10010c02:	4298      	cmp	r0, r3
10010c04:	419b      	sbcs	r3, r3
10010c06:	425b      	negs	r3, r3
10010c08:	18ed      	adds	r5, r5, r3
10010c0a:	0003      	movs	r3, r0
10010c0c:	01e8      	lsls	r0, r5, #7
10010c0e:	d504      	bpl.n	10010c1a <__aeabi_dmul+0x3b2>
10010c10:	4a4f      	ldr	r2, [pc, #316]	; (10010d50 <__aeabi_dmul+0x4e8>)
10010c12:	4015      	ands	r5, r2
10010c14:	2280      	movs	r2, #128	; 0x80
10010c16:	00d2      	lsls	r2, r2, #3
10010c18:	18b2      	adds	r2, r6, r2
10010c1a:	484e      	ldr	r0, [pc, #312]	; (10010d54 <__aeabi_dmul+0x4ec>)
10010c1c:	4282      	cmp	r2, r0
10010c1e:	dd00      	ble.n	10010c22 <__aeabi_dmul+0x3ba>
10010c20:	e6e7      	b.n	100109f2 <__aeabi_dmul+0x18a>
10010c22:	2401      	movs	r4, #1
10010c24:	08db      	lsrs	r3, r3, #3
10010c26:	0768      	lsls	r0, r5, #29
10010c28:	4318      	orrs	r0, r3
10010c2a:	026d      	lsls	r5, r5, #9
10010c2c:	0553      	lsls	r3, r2, #21
10010c2e:	4680      	mov	r8, r0
10010c30:	0b2d      	lsrs	r5, r5, #12
10010c32:	0d5b      	lsrs	r3, r3, #21
10010c34:	400c      	ands	r4, r1
10010c36:	e67d      	b.n	10010934 <__aeabi_dmul+0xcc>
10010c38:	2280      	movs	r2, #128	; 0x80
10010c3a:	4659      	mov	r1, fp
10010c3c:	0312      	lsls	r2, r2, #12
10010c3e:	4211      	tst	r1, r2
10010c40:	d008      	beq.n	10010c54 <__aeabi_dmul+0x3ec>
10010c42:	4215      	tst	r5, r2
10010c44:	d106      	bne.n	10010c54 <__aeabi_dmul+0x3ec>
10010c46:	4315      	orrs	r5, r2
10010c48:	032d      	lsls	r5, r5, #12
10010c4a:	4698      	mov	r8, r3
10010c4c:	0b2d      	lsrs	r5, r5, #12
10010c4e:	464c      	mov	r4, r9
10010c50:	4b41      	ldr	r3, [pc, #260]	; (10010d58 <__aeabi_dmul+0x4f0>)
10010c52:	e66f      	b.n	10010934 <__aeabi_dmul+0xcc>
10010c54:	465d      	mov	r5, fp
10010c56:	4315      	orrs	r5, r2
10010c58:	032d      	lsls	r5, r5, #12
10010c5a:	0b2d      	lsrs	r5, r5, #12
10010c5c:	4b3e      	ldr	r3, [pc, #248]	; (10010d58 <__aeabi_dmul+0x4f0>)
10010c5e:	e669      	b.n	10010934 <__aeabi_dmul+0xcc>
10010c60:	0003      	movs	r3, r0
10010c62:	4655      	mov	r5, sl
10010c64:	3b28      	subs	r3, #40	; 0x28
10010c66:	409d      	lsls	r5, r3
10010c68:	2300      	movs	r3, #0
10010c6a:	e6bc      	b.n	100109e6 <__aeabi_dmul+0x17e>
10010c6c:	4650      	mov	r0, sl
10010c6e:	f000 fc37 	bl	100114e0 <__clzsi2>
10010c72:	3020      	adds	r0, #32
10010c74:	e6a8      	b.n	100109c8 <__aeabi_dmul+0x160>
10010c76:	0003      	movs	r3, r0
10010c78:	3b28      	subs	r3, #40	; 0x28
10010c7a:	409f      	lsls	r7, r3
10010c7c:	2300      	movs	r3, #0
10010c7e:	46bb      	mov	fp, r7
10010c80:	4698      	mov	r8, r3
10010c82:	e689      	b.n	10010998 <__aeabi_dmul+0x130>
10010c84:	f000 fc2c 	bl	100114e0 <__clzsi2>
10010c88:	3020      	adds	r0, #32
10010c8a:	e673      	b.n	10010974 <__aeabi_dmul+0x10c>
10010c8c:	2401      	movs	r4, #1
10010c8e:	1aa6      	subs	r6, r4, r2
10010c90:	2e38      	cmp	r6, #56	; 0x38
10010c92:	dd07      	ble.n	10010ca4 <__aeabi_dmul+0x43c>
10010c94:	2200      	movs	r2, #0
10010c96:	400c      	ands	r4, r1
10010c98:	2300      	movs	r3, #0
10010c9a:	2500      	movs	r5, #0
10010c9c:	4690      	mov	r8, r2
10010c9e:	e649      	b.n	10010934 <__aeabi_dmul+0xcc>
10010ca0:	9e02      	ldr	r6, [sp, #8]
10010ca2:	e7a3      	b.n	10010bec <__aeabi_dmul+0x384>
10010ca4:	2e1f      	cmp	r6, #31
10010ca6:	dc20      	bgt.n	10010cea <__aeabi_dmul+0x482>
10010ca8:	2220      	movs	r2, #32
10010caa:	002c      	movs	r4, r5
10010cac:	0018      	movs	r0, r3
10010cae:	1b92      	subs	r2, r2, r6
10010cb0:	40f0      	lsrs	r0, r6
10010cb2:	4094      	lsls	r4, r2
10010cb4:	4093      	lsls	r3, r2
10010cb6:	4304      	orrs	r4, r0
10010cb8:	1e58      	subs	r0, r3, #1
10010cba:	4183      	sbcs	r3, r0
10010cbc:	431c      	orrs	r4, r3
10010cbe:	40f5      	lsrs	r5, r6
10010cc0:	0763      	lsls	r3, r4, #29
10010cc2:	d009      	beq.n	10010cd8 <__aeabi_dmul+0x470>
10010cc4:	230f      	movs	r3, #15
10010cc6:	4023      	ands	r3, r4
10010cc8:	2b04      	cmp	r3, #4
10010cca:	d005      	beq.n	10010cd8 <__aeabi_dmul+0x470>
10010ccc:	0023      	movs	r3, r4
10010cce:	1d1c      	adds	r4, r3, #4
10010cd0:	429c      	cmp	r4, r3
10010cd2:	4192      	sbcs	r2, r2
10010cd4:	4252      	negs	r2, r2
10010cd6:	18ad      	adds	r5, r5, r2
10010cd8:	022b      	lsls	r3, r5, #8
10010cda:	d51f      	bpl.n	10010d1c <__aeabi_dmul+0x4b4>
10010cdc:	2401      	movs	r4, #1
10010cde:	2200      	movs	r2, #0
10010ce0:	400c      	ands	r4, r1
10010ce2:	2301      	movs	r3, #1
10010ce4:	2500      	movs	r5, #0
10010ce6:	4690      	mov	r8, r2
10010ce8:	e624      	b.n	10010934 <__aeabi_dmul+0xcc>
10010cea:	201f      	movs	r0, #31
10010cec:	002c      	movs	r4, r5
10010cee:	4240      	negs	r0, r0
10010cf0:	1a82      	subs	r2, r0, r2
10010cf2:	40d4      	lsrs	r4, r2
10010cf4:	2e20      	cmp	r6, #32
10010cf6:	d01c      	beq.n	10010d32 <__aeabi_dmul+0x4ca>
10010cf8:	2240      	movs	r2, #64	; 0x40
10010cfa:	1b96      	subs	r6, r2, r6
10010cfc:	40b5      	lsls	r5, r6
10010cfe:	432b      	orrs	r3, r5
10010d00:	1e58      	subs	r0, r3, #1
10010d02:	4183      	sbcs	r3, r0
10010d04:	2007      	movs	r0, #7
10010d06:	4323      	orrs	r3, r4
10010d08:	4018      	ands	r0, r3
10010d0a:	2500      	movs	r5, #0
10010d0c:	2800      	cmp	r0, #0
10010d0e:	d009      	beq.n	10010d24 <__aeabi_dmul+0x4bc>
10010d10:	220f      	movs	r2, #15
10010d12:	2500      	movs	r5, #0
10010d14:	401a      	ands	r2, r3
10010d16:	001c      	movs	r4, r3
10010d18:	2a04      	cmp	r2, #4
10010d1a:	d1d8      	bne.n	10010cce <__aeabi_dmul+0x466>
10010d1c:	0023      	movs	r3, r4
10010d1e:	0768      	lsls	r0, r5, #29
10010d20:	026d      	lsls	r5, r5, #9
10010d22:	0b2d      	lsrs	r5, r5, #12
10010d24:	2401      	movs	r4, #1
10010d26:	08db      	lsrs	r3, r3, #3
10010d28:	4303      	orrs	r3, r0
10010d2a:	4698      	mov	r8, r3
10010d2c:	400c      	ands	r4, r1
10010d2e:	2300      	movs	r3, #0
10010d30:	e600      	b.n	10010934 <__aeabi_dmul+0xcc>
10010d32:	2500      	movs	r5, #0
10010d34:	e7e3      	b.n	10010cfe <__aeabi_dmul+0x496>
10010d36:	2280      	movs	r2, #128	; 0x80
10010d38:	2401      	movs	r4, #1
10010d3a:	0312      	lsls	r2, r2, #12
10010d3c:	4315      	orrs	r5, r2
10010d3e:	032d      	lsls	r5, r5, #12
10010d40:	4698      	mov	r8, r3
10010d42:	0b2d      	lsrs	r5, r5, #12
10010d44:	400c      	ands	r4, r1
10010d46:	4b04      	ldr	r3, [pc, #16]	; (10010d58 <__aeabi_dmul+0x4f0>)
10010d48:	e5f4      	b.n	10010934 <__aeabi_dmul+0xcc>
10010d4a:	46c0      	nop			; (mov r8, r8)
10010d4c:	000003ff 	.word	0x000003ff
10010d50:	feffffff 	.word	0xfeffffff
10010d54:	000007fe 	.word	0x000007fe
10010d58:	000007ff 	.word	0x000007ff

10010d5c <__aeabi_dsub>:
10010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d5e:	4657      	mov	r7, sl
10010d60:	464e      	mov	r6, r9
10010d62:	4645      	mov	r5, r8
10010d64:	b4e0      	push	{r5, r6, r7}
10010d66:	000e      	movs	r6, r1
10010d68:	0011      	movs	r1, r2
10010d6a:	0ff2      	lsrs	r2, r6, #31
10010d6c:	4692      	mov	sl, r2
10010d6e:	00c5      	lsls	r5, r0, #3
10010d70:	0f42      	lsrs	r2, r0, #29
10010d72:	0318      	lsls	r0, r3, #12
10010d74:	0337      	lsls	r7, r6, #12
10010d76:	0074      	lsls	r4, r6, #1
10010d78:	0a40      	lsrs	r0, r0, #9
10010d7a:	0f4e      	lsrs	r6, r1, #29
10010d7c:	0a7f      	lsrs	r7, r7, #9
10010d7e:	4330      	orrs	r0, r6
10010d80:	4ecf      	ldr	r6, [pc, #828]	; (100110c0 <__aeabi_dsub+0x364>)
10010d82:	4317      	orrs	r7, r2
10010d84:	005a      	lsls	r2, r3, #1
10010d86:	0d64      	lsrs	r4, r4, #21
10010d88:	0d52      	lsrs	r2, r2, #21
10010d8a:	0fdb      	lsrs	r3, r3, #31
10010d8c:	00c9      	lsls	r1, r1, #3
10010d8e:	42b2      	cmp	r2, r6
10010d90:	d100      	bne.n	10010d94 <__aeabi_dsub+0x38>
10010d92:	e0e5      	b.n	10010f60 <__aeabi_dsub+0x204>
10010d94:	2601      	movs	r6, #1
10010d96:	4073      	eors	r3, r6
10010d98:	1aa6      	subs	r6, r4, r2
10010d9a:	46b4      	mov	ip, r6
10010d9c:	4553      	cmp	r3, sl
10010d9e:	d100      	bne.n	10010da2 <__aeabi_dsub+0x46>
10010da0:	e0af      	b.n	10010f02 <__aeabi_dsub+0x1a6>
10010da2:	2e00      	cmp	r6, #0
10010da4:	dc00      	bgt.n	10010da8 <__aeabi_dsub+0x4c>
10010da6:	e10d      	b.n	10010fc4 <__aeabi_dsub+0x268>
10010da8:	2a00      	cmp	r2, #0
10010daa:	d13a      	bne.n	10010e22 <__aeabi_dsub+0xc6>
10010dac:	0003      	movs	r3, r0
10010dae:	430b      	orrs	r3, r1
10010db0:	d000      	beq.n	10010db4 <__aeabi_dsub+0x58>
10010db2:	e0e4      	b.n	10010f7e <__aeabi_dsub+0x222>
10010db4:	076b      	lsls	r3, r5, #29
10010db6:	d009      	beq.n	10010dcc <__aeabi_dsub+0x70>
10010db8:	230f      	movs	r3, #15
10010dba:	402b      	ands	r3, r5
10010dbc:	2b04      	cmp	r3, #4
10010dbe:	d005      	beq.n	10010dcc <__aeabi_dsub+0x70>
10010dc0:	1d2b      	adds	r3, r5, #4
10010dc2:	42ab      	cmp	r3, r5
10010dc4:	41ad      	sbcs	r5, r5
10010dc6:	426d      	negs	r5, r5
10010dc8:	197f      	adds	r7, r7, r5
10010dca:	001d      	movs	r5, r3
10010dcc:	023b      	lsls	r3, r7, #8
10010dce:	d400      	bmi.n	10010dd2 <__aeabi_dsub+0x76>
10010dd0:	e088      	b.n	10010ee4 <__aeabi_dsub+0x188>
10010dd2:	4bbb      	ldr	r3, [pc, #748]	; (100110c0 <__aeabi_dsub+0x364>)
10010dd4:	3401      	adds	r4, #1
10010dd6:	429c      	cmp	r4, r3
10010dd8:	d100      	bne.n	10010ddc <__aeabi_dsub+0x80>
10010dda:	e110      	b.n	10010ffe <__aeabi_dsub+0x2a2>
10010ddc:	003a      	movs	r2, r7
10010dde:	4bb9      	ldr	r3, [pc, #740]	; (100110c4 <__aeabi_dsub+0x368>)
10010de0:	4651      	mov	r1, sl
10010de2:	401a      	ands	r2, r3
10010de4:	2301      	movs	r3, #1
10010de6:	0750      	lsls	r0, r2, #29
10010de8:	08ed      	lsrs	r5, r5, #3
10010dea:	0252      	lsls	r2, r2, #9
10010dec:	0564      	lsls	r4, r4, #21
10010dee:	4305      	orrs	r5, r0
10010df0:	0b12      	lsrs	r2, r2, #12
10010df2:	0d64      	lsrs	r4, r4, #21
10010df4:	400b      	ands	r3, r1
10010df6:	2100      	movs	r1, #0
10010df8:	0028      	movs	r0, r5
10010dfa:	0312      	lsls	r2, r2, #12
10010dfc:	0d0d      	lsrs	r5, r1, #20
10010dfe:	0b12      	lsrs	r2, r2, #12
10010e00:	0564      	lsls	r4, r4, #21
10010e02:	052d      	lsls	r5, r5, #20
10010e04:	4315      	orrs	r5, r2
10010e06:	0862      	lsrs	r2, r4, #1
10010e08:	4caf      	ldr	r4, [pc, #700]	; (100110c8 <__aeabi_dsub+0x36c>)
10010e0a:	07db      	lsls	r3, r3, #31
10010e0c:	402c      	ands	r4, r5
10010e0e:	4314      	orrs	r4, r2
10010e10:	0064      	lsls	r4, r4, #1
10010e12:	0864      	lsrs	r4, r4, #1
10010e14:	431c      	orrs	r4, r3
10010e16:	0021      	movs	r1, r4
10010e18:	bc1c      	pop	{r2, r3, r4}
10010e1a:	4690      	mov	r8, r2
10010e1c:	4699      	mov	r9, r3
10010e1e:	46a2      	mov	sl, r4
10010e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e22:	4ba7      	ldr	r3, [pc, #668]	; (100110c0 <__aeabi_dsub+0x364>)
10010e24:	429c      	cmp	r4, r3
10010e26:	d0c5      	beq.n	10010db4 <__aeabi_dsub+0x58>
10010e28:	2380      	movs	r3, #128	; 0x80
10010e2a:	041b      	lsls	r3, r3, #16
10010e2c:	4318      	orrs	r0, r3
10010e2e:	4663      	mov	r3, ip
10010e30:	2b38      	cmp	r3, #56	; 0x38
10010e32:	dd00      	ble.n	10010e36 <__aeabi_dsub+0xda>
10010e34:	e0fd      	b.n	10011032 <__aeabi_dsub+0x2d6>
10010e36:	2b1f      	cmp	r3, #31
10010e38:	dd00      	ble.n	10010e3c <__aeabi_dsub+0xe0>
10010e3a:	e130      	b.n	1001109e <__aeabi_dsub+0x342>
10010e3c:	4662      	mov	r2, ip
10010e3e:	2320      	movs	r3, #32
10010e40:	1a9b      	subs	r3, r3, r2
10010e42:	0002      	movs	r2, r0
10010e44:	409a      	lsls	r2, r3
10010e46:	4666      	mov	r6, ip
10010e48:	4690      	mov	r8, r2
10010e4a:	000a      	movs	r2, r1
10010e4c:	4099      	lsls	r1, r3
10010e4e:	40f2      	lsrs	r2, r6
10010e50:	4646      	mov	r6, r8
10010e52:	1e4b      	subs	r3, r1, #1
10010e54:	4199      	sbcs	r1, r3
10010e56:	4332      	orrs	r2, r6
10010e58:	4311      	orrs	r1, r2
10010e5a:	4663      	mov	r3, ip
10010e5c:	0002      	movs	r2, r0
10010e5e:	40da      	lsrs	r2, r3
10010e60:	1a69      	subs	r1, r5, r1
10010e62:	428d      	cmp	r5, r1
10010e64:	419b      	sbcs	r3, r3
10010e66:	000d      	movs	r5, r1
10010e68:	1aba      	subs	r2, r7, r2
10010e6a:	425b      	negs	r3, r3
10010e6c:	1ad7      	subs	r7, r2, r3
10010e6e:	023b      	lsls	r3, r7, #8
10010e70:	d535      	bpl.n	10010ede <__aeabi_dsub+0x182>
10010e72:	027a      	lsls	r2, r7, #9
10010e74:	0a53      	lsrs	r3, r2, #9
10010e76:	4698      	mov	r8, r3
10010e78:	4643      	mov	r3, r8
10010e7a:	2b00      	cmp	r3, #0
10010e7c:	d100      	bne.n	10010e80 <__aeabi_dsub+0x124>
10010e7e:	e0c4      	b.n	1001100a <__aeabi_dsub+0x2ae>
10010e80:	4640      	mov	r0, r8
10010e82:	f000 fb2d 	bl	100114e0 <__clzsi2>
10010e86:	0003      	movs	r3, r0
10010e88:	3b08      	subs	r3, #8
10010e8a:	2b1f      	cmp	r3, #31
10010e8c:	dd00      	ble.n	10010e90 <__aeabi_dsub+0x134>
10010e8e:	e0c5      	b.n	1001101c <__aeabi_dsub+0x2c0>
10010e90:	2220      	movs	r2, #32
10010e92:	0029      	movs	r1, r5
10010e94:	1ad2      	subs	r2, r2, r3
10010e96:	4647      	mov	r7, r8
10010e98:	40d1      	lsrs	r1, r2
10010e9a:	409f      	lsls	r7, r3
10010e9c:	000a      	movs	r2, r1
10010e9e:	409d      	lsls	r5, r3
10010ea0:	433a      	orrs	r2, r7
10010ea2:	429c      	cmp	r4, r3
10010ea4:	dd00      	ble.n	10010ea8 <__aeabi_dsub+0x14c>
10010ea6:	e0c0      	b.n	1001102a <__aeabi_dsub+0x2ce>
10010ea8:	1b1c      	subs	r4, r3, r4
10010eaa:	1c63      	adds	r3, r4, #1
10010eac:	2b1f      	cmp	r3, #31
10010eae:	dd00      	ble.n	10010eb2 <__aeabi_dsub+0x156>
10010eb0:	e0e4      	b.n	1001107c <__aeabi_dsub+0x320>
10010eb2:	2120      	movs	r1, #32
10010eb4:	0014      	movs	r4, r2
10010eb6:	0028      	movs	r0, r5
10010eb8:	1ac9      	subs	r1, r1, r3
10010eba:	40d8      	lsrs	r0, r3
10010ebc:	408c      	lsls	r4, r1
10010ebe:	408d      	lsls	r5, r1
10010ec0:	4304      	orrs	r4, r0
10010ec2:	40da      	lsrs	r2, r3
10010ec4:	1e68      	subs	r0, r5, #1
10010ec6:	4185      	sbcs	r5, r0
10010ec8:	0017      	movs	r7, r2
10010eca:	4325      	orrs	r5, r4
10010ecc:	2400      	movs	r4, #0
10010ece:	e771      	b.n	10010db4 <__aeabi_dsub+0x58>
10010ed0:	4642      	mov	r2, r8
10010ed2:	4663      	mov	r3, ip
10010ed4:	431a      	orrs	r2, r3
10010ed6:	d100      	bne.n	10010eda <__aeabi_dsub+0x17e>
10010ed8:	e24c      	b.n	10011374 <__aeabi_dsub+0x618>
10010eda:	4667      	mov	r7, ip
10010edc:	4645      	mov	r5, r8
10010ede:	076b      	lsls	r3, r5, #29
10010ee0:	d000      	beq.n	10010ee4 <__aeabi_dsub+0x188>
10010ee2:	e769      	b.n	10010db8 <__aeabi_dsub+0x5c>
10010ee4:	2301      	movs	r3, #1
10010ee6:	4651      	mov	r1, sl
10010ee8:	0778      	lsls	r0, r7, #29
10010eea:	08ed      	lsrs	r5, r5, #3
10010eec:	08fa      	lsrs	r2, r7, #3
10010eee:	400b      	ands	r3, r1
10010ef0:	4305      	orrs	r5, r0
10010ef2:	4973      	ldr	r1, [pc, #460]	; (100110c0 <__aeabi_dsub+0x364>)
10010ef4:	428c      	cmp	r4, r1
10010ef6:	d038      	beq.n	10010f6a <__aeabi_dsub+0x20e>
10010ef8:	0312      	lsls	r2, r2, #12
10010efa:	0564      	lsls	r4, r4, #21
10010efc:	0b12      	lsrs	r2, r2, #12
10010efe:	0d64      	lsrs	r4, r4, #21
10010f00:	e779      	b.n	10010df6 <__aeabi_dsub+0x9a>
10010f02:	2e00      	cmp	r6, #0
10010f04:	dc00      	bgt.n	10010f08 <__aeabi_dsub+0x1ac>
10010f06:	e09a      	b.n	1001103e <__aeabi_dsub+0x2e2>
10010f08:	2a00      	cmp	r2, #0
10010f0a:	d047      	beq.n	10010f9c <__aeabi_dsub+0x240>
10010f0c:	4a6c      	ldr	r2, [pc, #432]	; (100110c0 <__aeabi_dsub+0x364>)
10010f0e:	4294      	cmp	r4, r2
10010f10:	d100      	bne.n	10010f14 <__aeabi_dsub+0x1b8>
10010f12:	e74f      	b.n	10010db4 <__aeabi_dsub+0x58>
10010f14:	2280      	movs	r2, #128	; 0x80
10010f16:	0412      	lsls	r2, r2, #16
10010f18:	4310      	orrs	r0, r2
10010f1a:	4662      	mov	r2, ip
10010f1c:	2a38      	cmp	r2, #56	; 0x38
10010f1e:	dc00      	bgt.n	10010f22 <__aeabi_dsub+0x1c6>
10010f20:	e108      	b.n	10011134 <__aeabi_dsub+0x3d8>
10010f22:	4301      	orrs	r1, r0
10010f24:	1e48      	subs	r0, r1, #1
10010f26:	4181      	sbcs	r1, r0
10010f28:	2200      	movs	r2, #0
10010f2a:	b2c9      	uxtb	r1, r1
10010f2c:	1949      	adds	r1, r1, r5
10010f2e:	19d2      	adds	r2, r2, r7
10010f30:	42a9      	cmp	r1, r5
10010f32:	41bf      	sbcs	r7, r7
10010f34:	000d      	movs	r5, r1
10010f36:	427f      	negs	r7, r7
10010f38:	18bf      	adds	r7, r7, r2
10010f3a:	023a      	lsls	r2, r7, #8
10010f3c:	d400      	bmi.n	10010f40 <__aeabi_dsub+0x1e4>
10010f3e:	e142      	b.n	100111c6 <__aeabi_dsub+0x46a>
10010f40:	4a5f      	ldr	r2, [pc, #380]	; (100110c0 <__aeabi_dsub+0x364>)
10010f42:	3401      	adds	r4, #1
10010f44:	4294      	cmp	r4, r2
10010f46:	d100      	bne.n	10010f4a <__aeabi_dsub+0x1ee>
10010f48:	e14e      	b.n	100111e8 <__aeabi_dsub+0x48c>
10010f4a:	2001      	movs	r0, #1
10010f4c:	4a5d      	ldr	r2, [pc, #372]	; (100110c4 <__aeabi_dsub+0x368>)
10010f4e:	0869      	lsrs	r1, r5, #1
10010f50:	403a      	ands	r2, r7
10010f52:	4028      	ands	r0, r5
10010f54:	4308      	orrs	r0, r1
10010f56:	07d5      	lsls	r5, r2, #31
10010f58:	4305      	orrs	r5, r0
10010f5a:	0857      	lsrs	r7, r2, #1
10010f5c:	469a      	mov	sl, r3
10010f5e:	e729      	b.n	10010db4 <__aeabi_dsub+0x58>
10010f60:	0006      	movs	r6, r0
10010f62:	430e      	orrs	r6, r1
10010f64:	d000      	beq.n	10010f68 <__aeabi_dsub+0x20c>
10010f66:	e717      	b.n	10010d98 <__aeabi_dsub+0x3c>
10010f68:	e714      	b.n	10010d94 <__aeabi_dsub+0x38>
10010f6a:	0029      	movs	r1, r5
10010f6c:	4311      	orrs	r1, r2
10010f6e:	d100      	bne.n	10010f72 <__aeabi_dsub+0x216>
10010f70:	e1f9      	b.n	10011366 <__aeabi_dsub+0x60a>
10010f72:	2180      	movs	r1, #128	; 0x80
10010f74:	0309      	lsls	r1, r1, #12
10010f76:	430a      	orrs	r2, r1
10010f78:	0312      	lsls	r2, r2, #12
10010f7a:	0b12      	lsrs	r2, r2, #12
10010f7c:	e73b      	b.n	10010df6 <__aeabi_dsub+0x9a>
10010f7e:	2301      	movs	r3, #1
10010f80:	425b      	negs	r3, r3
10010f82:	4698      	mov	r8, r3
10010f84:	44c4      	add	ip, r8
10010f86:	4663      	mov	r3, ip
10010f88:	2b00      	cmp	r3, #0
10010f8a:	d172      	bne.n	10011072 <__aeabi_dsub+0x316>
10010f8c:	1a69      	subs	r1, r5, r1
10010f8e:	428d      	cmp	r5, r1
10010f90:	419b      	sbcs	r3, r3
10010f92:	1a3f      	subs	r7, r7, r0
10010f94:	425b      	negs	r3, r3
10010f96:	1aff      	subs	r7, r7, r3
10010f98:	000d      	movs	r5, r1
10010f9a:	e768      	b.n	10010e6e <__aeabi_dsub+0x112>
10010f9c:	0002      	movs	r2, r0
10010f9e:	430a      	orrs	r2, r1
10010fa0:	d100      	bne.n	10010fa4 <__aeabi_dsub+0x248>
10010fa2:	e707      	b.n	10010db4 <__aeabi_dsub+0x58>
10010fa4:	2201      	movs	r2, #1
10010fa6:	4252      	negs	r2, r2
10010fa8:	4690      	mov	r8, r2
10010faa:	44c4      	add	ip, r8
10010fac:	4662      	mov	r2, ip
10010fae:	2a00      	cmp	r2, #0
10010fb0:	d000      	beq.n	10010fb4 <__aeabi_dsub+0x258>
10010fb2:	e0e6      	b.n	10011182 <__aeabi_dsub+0x426>
10010fb4:	1869      	adds	r1, r5, r1
10010fb6:	42a9      	cmp	r1, r5
10010fb8:	41b6      	sbcs	r6, r6
10010fba:	183f      	adds	r7, r7, r0
10010fbc:	4276      	negs	r6, r6
10010fbe:	19f7      	adds	r7, r6, r7
10010fc0:	000d      	movs	r5, r1
10010fc2:	e7ba      	b.n	10010f3a <__aeabi_dsub+0x1de>
10010fc4:	2e00      	cmp	r6, #0
10010fc6:	d000      	beq.n	10010fca <__aeabi_dsub+0x26e>
10010fc8:	e080      	b.n	100110cc <__aeabi_dsub+0x370>
10010fca:	1c62      	adds	r2, r4, #1
10010fcc:	0552      	lsls	r2, r2, #21
10010fce:	0d52      	lsrs	r2, r2, #21
10010fd0:	2a01      	cmp	r2, #1
10010fd2:	dc00      	bgt.n	10010fd6 <__aeabi_dsub+0x27a>
10010fd4:	e0f9      	b.n	100111ca <__aeabi_dsub+0x46e>
10010fd6:	1a6a      	subs	r2, r5, r1
10010fd8:	4691      	mov	r9, r2
10010fda:	454d      	cmp	r5, r9
10010fdc:	41b6      	sbcs	r6, r6
10010fde:	1a3a      	subs	r2, r7, r0
10010fe0:	4276      	negs	r6, r6
10010fe2:	1b92      	subs	r2, r2, r6
10010fe4:	4690      	mov	r8, r2
10010fe6:	0212      	lsls	r2, r2, #8
10010fe8:	d400      	bmi.n	10010fec <__aeabi_dsub+0x290>
10010fea:	e099      	b.n	10011120 <__aeabi_dsub+0x3c4>
10010fec:	1b4d      	subs	r5, r1, r5
10010fee:	42a9      	cmp	r1, r5
10010ff0:	4189      	sbcs	r1, r1
10010ff2:	1bc7      	subs	r7, r0, r7
10010ff4:	4249      	negs	r1, r1
10010ff6:	1a7a      	subs	r2, r7, r1
10010ff8:	4690      	mov	r8, r2
10010ffa:	469a      	mov	sl, r3
10010ffc:	e73c      	b.n	10010e78 <__aeabi_dsub+0x11c>
10010ffe:	4652      	mov	r2, sl
10011000:	2301      	movs	r3, #1
10011002:	2500      	movs	r5, #0
10011004:	4013      	ands	r3, r2
10011006:	2200      	movs	r2, #0
10011008:	e6f5      	b.n	10010df6 <__aeabi_dsub+0x9a>
1001100a:	0028      	movs	r0, r5
1001100c:	f000 fa68 	bl	100114e0 <__clzsi2>
10011010:	3020      	adds	r0, #32
10011012:	0003      	movs	r3, r0
10011014:	3b08      	subs	r3, #8
10011016:	2b1f      	cmp	r3, #31
10011018:	dc00      	bgt.n	1001101c <__aeabi_dsub+0x2c0>
1001101a:	e739      	b.n	10010e90 <__aeabi_dsub+0x134>
1001101c:	002a      	movs	r2, r5
1001101e:	3828      	subs	r0, #40	; 0x28
10011020:	4082      	lsls	r2, r0
10011022:	2500      	movs	r5, #0
10011024:	429c      	cmp	r4, r3
10011026:	dc00      	bgt.n	1001102a <__aeabi_dsub+0x2ce>
10011028:	e73e      	b.n	10010ea8 <__aeabi_dsub+0x14c>
1001102a:	4f26      	ldr	r7, [pc, #152]	; (100110c4 <__aeabi_dsub+0x368>)
1001102c:	1ae4      	subs	r4, r4, r3
1001102e:	4017      	ands	r7, r2
10011030:	e6c0      	b.n	10010db4 <__aeabi_dsub+0x58>
10011032:	4301      	orrs	r1, r0
10011034:	1e48      	subs	r0, r1, #1
10011036:	4181      	sbcs	r1, r0
10011038:	2200      	movs	r2, #0
1001103a:	b2c9      	uxtb	r1, r1
1001103c:	e710      	b.n	10010e60 <__aeabi_dsub+0x104>
1001103e:	2e00      	cmp	r6, #0
10011040:	d000      	beq.n	10011044 <__aeabi_dsub+0x2e8>
10011042:	e0f1      	b.n	10011228 <__aeabi_dsub+0x4cc>
10011044:	1c62      	adds	r2, r4, #1
10011046:	4694      	mov	ip, r2
10011048:	0552      	lsls	r2, r2, #21
1001104a:	0d52      	lsrs	r2, r2, #21
1001104c:	2a01      	cmp	r2, #1
1001104e:	dc00      	bgt.n	10011052 <__aeabi_dsub+0x2f6>
10011050:	e0a0      	b.n	10011194 <__aeabi_dsub+0x438>
10011052:	4a1b      	ldr	r2, [pc, #108]	; (100110c0 <__aeabi_dsub+0x364>)
10011054:	4594      	cmp	ip, r2
10011056:	d100      	bne.n	1001105a <__aeabi_dsub+0x2fe>
10011058:	e0c5      	b.n	100111e6 <__aeabi_dsub+0x48a>
1001105a:	1869      	adds	r1, r5, r1
1001105c:	42a9      	cmp	r1, r5
1001105e:	4192      	sbcs	r2, r2
10011060:	183f      	adds	r7, r7, r0
10011062:	4252      	negs	r2, r2
10011064:	19d2      	adds	r2, r2, r7
10011066:	0849      	lsrs	r1, r1, #1
10011068:	07d5      	lsls	r5, r2, #31
1001106a:	430d      	orrs	r5, r1
1001106c:	0857      	lsrs	r7, r2, #1
1001106e:	4664      	mov	r4, ip
10011070:	e6a0      	b.n	10010db4 <__aeabi_dsub+0x58>
10011072:	4b13      	ldr	r3, [pc, #76]	; (100110c0 <__aeabi_dsub+0x364>)
10011074:	429c      	cmp	r4, r3
10011076:	d000      	beq.n	1001107a <__aeabi_dsub+0x31e>
10011078:	e6d9      	b.n	10010e2e <__aeabi_dsub+0xd2>
1001107a:	e69b      	b.n	10010db4 <__aeabi_dsub+0x58>
1001107c:	0011      	movs	r1, r2
1001107e:	3c1f      	subs	r4, #31
10011080:	40e1      	lsrs	r1, r4
10011082:	000c      	movs	r4, r1
10011084:	2b20      	cmp	r3, #32
10011086:	d100      	bne.n	1001108a <__aeabi_dsub+0x32e>
10011088:	e080      	b.n	1001118c <__aeabi_dsub+0x430>
1001108a:	2140      	movs	r1, #64	; 0x40
1001108c:	1acb      	subs	r3, r1, r3
1001108e:	409a      	lsls	r2, r3
10011090:	4315      	orrs	r5, r2
10011092:	1e6a      	subs	r2, r5, #1
10011094:	4195      	sbcs	r5, r2
10011096:	2700      	movs	r7, #0
10011098:	4325      	orrs	r5, r4
1001109a:	2400      	movs	r4, #0
1001109c:	e71f      	b.n	10010ede <__aeabi_dsub+0x182>
1001109e:	4663      	mov	r3, ip
100110a0:	0002      	movs	r2, r0
100110a2:	3b20      	subs	r3, #32
100110a4:	40da      	lsrs	r2, r3
100110a6:	4663      	mov	r3, ip
100110a8:	2b20      	cmp	r3, #32
100110aa:	d071      	beq.n	10011190 <__aeabi_dsub+0x434>
100110ac:	2340      	movs	r3, #64	; 0x40
100110ae:	4666      	mov	r6, ip
100110b0:	1b9b      	subs	r3, r3, r6
100110b2:	4098      	lsls	r0, r3
100110b4:	4301      	orrs	r1, r0
100110b6:	1e48      	subs	r0, r1, #1
100110b8:	4181      	sbcs	r1, r0
100110ba:	4311      	orrs	r1, r2
100110bc:	2200      	movs	r2, #0
100110be:	e6cf      	b.n	10010e60 <__aeabi_dsub+0x104>
100110c0:	000007ff 	.word	0x000007ff
100110c4:	ff7fffff 	.word	0xff7fffff
100110c8:	800fffff 	.word	0x800fffff
100110cc:	2c00      	cmp	r4, #0
100110ce:	d048      	beq.n	10011162 <__aeabi_dsub+0x406>
100110d0:	4cca      	ldr	r4, [pc, #808]	; (100113fc <__aeabi_dsub+0x6a0>)
100110d2:	42a2      	cmp	r2, r4
100110d4:	d100      	bne.n	100110d8 <__aeabi_dsub+0x37c>
100110d6:	e0a2      	b.n	1001121e <__aeabi_dsub+0x4c2>
100110d8:	4274      	negs	r4, r6
100110da:	46a1      	mov	r9, r4
100110dc:	2480      	movs	r4, #128	; 0x80
100110de:	0424      	lsls	r4, r4, #16
100110e0:	4327      	orrs	r7, r4
100110e2:	464c      	mov	r4, r9
100110e4:	2c38      	cmp	r4, #56	; 0x38
100110e6:	dd00      	ble.n	100110ea <__aeabi_dsub+0x38e>
100110e8:	e0db      	b.n	100112a2 <__aeabi_dsub+0x546>
100110ea:	2c1f      	cmp	r4, #31
100110ec:	dd00      	ble.n	100110f0 <__aeabi_dsub+0x394>
100110ee:	e144      	b.n	1001137a <__aeabi_dsub+0x61e>
100110f0:	464e      	mov	r6, r9
100110f2:	2420      	movs	r4, #32
100110f4:	1ba4      	subs	r4, r4, r6
100110f6:	003e      	movs	r6, r7
100110f8:	40a6      	lsls	r6, r4
100110fa:	46a2      	mov	sl, r4
100110fc:	46b0      	mov	r8, r6
100110fe:	464c      	mov	r4, r9
10011100:	002e      	movs	r6, r5
10011102:	40e6      	lsrs	r6, r4
10011104:	46b4      	mov	ip, r6
10011106:	4646      	mov	r6, r8
10011108:	4664      	mov	r4, ip
1001110a:	4326      	orrs	r6, r4
1001110c:	4654      	mov	r4, sl
1001110e:	40a5      	lsls	r5, r4
10011110:	1e6c      	subs	r4, r5, #1
10011112:	41a5      	sbcs	r5, r4
10011114:	0034      	movs	r4, r6
10011116:	432c      	orrs	r4, r5
10011118:	464d      	mov	r5, r9
1001111a:	40ef      	lsrs	r7, r5
1001111c:	1b0d      	subs	r5, r1, r4
1001111e:	e028      	b.n	10011172 <__aeabi_dsub+0x416>
10011120:	464a      	mov	r2, r9
10011122:	4643      	mov	r3, r8
10011124:	464d      	mov	r5, r9
10011126:	431a      	orrs	r2, r3
10011128:	d000      	beq.n	1001112c <__aeabi_dsub+0x3d0>
1001112a:	e6a5      	b.n	10010e78 <__aeabi_dsub+0x11c>
1001112c:	2300      	movs	r3, #0
1001112e:	2400      	movs	r4, #0
10011130:	2500      	movs	r5, #0
10011132:	e6de      	b.n	10010ef2 <__aeabi_dsub+0x196>
10011134:	2a1f      	cmp	r2, #31
10011136:	dc5a      	bgt.n	100111ee <__aeabi_dsub+0x492>
10011138:	4666      	mov	r6, ip
1001113a:	2220      	movs	r2, #32
1001113c:	1b92      	subs	r2, r2, r6
1001113e:	0006      	movs	r6, r0
10011140:	4096      	lsls	r6, r2
10011142:	4691      	mov	r9, r2
10011144:	46b0      	mov	r8, r6
10011146:	4662      	mov	r2, ip
10011148:	000e      	movs	r6, r1
1001114a:	40d6      	lsrs	r6, r2
1001114c:	4642      	mov	r2, r8
1001114e:	4316      	orrs	r6, r2
10011150:	464a      	mov	r2, r9
10011152:	4091      	lsls	r1, r2
10011154:	1e4a      	subs	r2, r1, #1
10011156:	4191      	sbcs	r1, r2
10011158:	0002      	movs	r2, r0
1001115a:	4660      	mov	r0, ip
1001115c:	4331      	orrs	r1, r6
1001115e:	40c2      	lsrs	r2, r0
10011160:	e6e4      	b.n	10010f2c <__aeabi_dsub+0x1d0>
10011162:	003c      	movs	r4, r7
10011164:	432c      	orrs	r4, r5
10011166:	d05a      	beq.n	1001121e <__aeabi_dsub+0x4c2>
10011168:	43f4      	mvns	r4, r6
1001116a:	46a1      	mov	r9, r4
1001116c:	2c00      	cmp	r4, #0
1001116e:	d152      	bne.n	10011216 <__aeabi_dsub+0x4ba>
10011170:	1b4d      	subs	r5, r1, r5
10011172:	42a9      	cmp	r1, r5
10011174:	4189      	sbcs	r1, r1
10011176:	1bc7      	subs	r7, r0, r7
10011178:	4249      	negs	r1, r1
1001117a:	1a7f      	subs	r7, r7, r1
1001117c:	0014      	movs	r4, r2
1001117e:	469a      	mov	sl, r3
10011180:	e675      	b.n	10010e6e <__aeabi_dsub+0x112>
10011182:	4a9e      	ldr	r2, [pc, #632]	; (100113fc <__aeabi_dsub+0x6a0>)
10011184:	4294      	cmp	r4, r2
10011186:	d000      	beq.n	1001118a <__aeabi_dsub+0x42e>
10011188:	e6c7      	b.n	10010f1a <__aeabi_dsub+0x1be>
1001118a:	e613      	b.n	10010db4 <__aeabi_dsub+0x58>
1001118c:	2200      	movs	r2, #0
1001118e:	e77f      	b.n	10011090 <__aeabi_dsub+0x334>
10011190:	2000      	movs	r0, #0
10011192:	e78f      	b.n	100110b4 <__aeabi_dsub+0x358>
10011194:	2c00      	cmp	r4, #0
10011196:	d000      	beq.n	1001119a <__aeabi_dsub+0x43e>
10011198:	e0c8      	b.n	1001132c <__aeabi_dsub+0x5d0>
1001119a:	003b      	movs	r3, r7
1001119c:	432b      	orrs	r3, r5
1001119e:	d100      	bne.n	100111a2 <__aeabi_dsub+0x446>
100111a0:	e10f      	b.n	100113c2 <__aeabi_dsub+0x666>
100111a2:	0003      	movs	r3, r0
100111a4:	430b      	orrs	r3, r1
100111a6:	d100      	bne.n	100111aa <__aeabi_dsub+0x44e>
100111a8:	e604      	b.n	10010db4 <__aeabi_dsub+0x58>
100111aa:	1869      	adds	r1, r5, r1
100111ac:	42a9      	cmp	r1, r5
100111ae:	419b      	sbcs	r3, r3
100111b0:	183f      	adds	r7, r7, r0
100111b2:	425b      	negs	r3, r3
100111b4:	19df      	adds	r7, r3, r7
100111b6:	023b      	lsls	r3, r7, #8
100111b8:	d400      	bmi.n	100111bc <__aeabi_dsub+0x460>
100111ba:	e11a      	b.n	100113f2 <__aeabi_dsub+0x696>
100111bc:	4b90      	ldr	r3, [pc, #576]	; (10011400 <__aeabi_dsub+0x6a4>)
100111be:	000d      	movs	r5, r1
100111c0:	401f      	ands	r7, r3
100111c2:	4664      	mov	r4, ip
100111c4:	e5f6      	b.n	10010db4 <__aeabi_dsub+0x58>
100111c6:	469a      	mov	sl, r3
100111c8:	e689      	b.n	10010ede <__aeabi_dsub+0x182>
100111ca:	003a      	movs	r2, r7
100111cc:	432a      	orrs	r2, r5
100111ce:	2c00      	cmp	r4, #0
100111d0:	d15c      	bne.n	1001128c <__aeabi_dsub+0x530>
100111d2:	2a00      	cmp	r2, #0
100111d4:	d175      	bne.n	100112c2 <__aeabi_dsub+0x566>
100111d6:	0002      	movs	r2, r0
100111d8:	430a      	orrs	r2, r1
100111da:	d100      	bne.n	100111de <__aeabi_dsub+0x482>
100111dc:	e0ca      	b.n	10011374 <__aeabi_dsub+0x618>
100111de:	0007      	movs	r7, r0
100111e0:	000d      	movs	r5, r1
100111e2:	469a      	mov	sl, r3
100111e4:	e5e6      	b.n	10010db4 <__aeabi_dsub+0x58>
100111e6:	4664      	mov	r4, ip
100111e8:	2200      	movs	r2, #0
100111ea:	2500      	movs	r5, #0
100111ec:	e681      	b.n	10010ef2 <__aeabi_dsub+0x196>
100111ee:	4662      	mov	r2, ip
100111f0:	0006      	movs	r6, r0
100111f2:	3a20      	subs	r2, #32
100111f4:	40d6      	lsrs	r6, r2
100111f6:	4662      	mov	r2, ip
100111f8:	46b0      	mov	r8, r6
100111fa:	2a20      	cmp	r2, #32
100111fc:	d100      	bne.n	10011200 <__aeabi_dsub+0x4a4>
100111fe:	e0b7      	b.n	10011370 <__aeabi_dsub+0x614>
10011200:	2240      	movs	r2, #64	; 0x40
10011202:	4666      	mov	r6, ip
10011204:	1b92      	subs	r2, r2, r6
10011206:	4090      	lsls	r0, r2
10011208:	4301      	orrs	r1, r0
1001120a:	4642      	mov	r2, r8
1001120c:	1e48      	subs	r0, r1, #1
1001120e:	4181      	sbcs	r1, r0
10011210:	4311      	orrs	r1, r2
10011212:	2200      	movs	r2, #0
10011214:	e68a      	b.n	10010f2c <__aeabi_dsub+0x1d0>
10011216:	4c79      	ldr	r4, [pc, #484]	; (100113fc <__aeabi_dsub+0x6a0>)
10011218:	42a2      	cmp	r2, r4
1001121a:	d000      	beq.n	1001121e <__aeabi_dsub+0x4c2>
1001121c:	e761      	b.n	100110e2 <__aeabi_dsub+0x386>
1001121e:	0007      	movs	r7, r0
10011220:	000d      	movs	r5, r1
10011222:	0014      	movs	r4, r2
10011224:	469a      	mov	sl, r3
10011226:	e5c5      	b.n	10010db4 <__aeabi_dsub+0x58>
10011228:	2c00      	cmp	r4, #0
1001122a:	d141      	bne.n	100112b0 <__aeabi_dsub+0x554>
1001122c:	003c      	movs	r4, r7
1001122e:	432c      	orrs	r4, r5
10011230:	d078      	beq.n	10011324 <__aeabi_dsub+0x5c8>
10011232:	43f4      	mvns	r4, r6
10011234:	46a1      	mov	r9, r4
10011236:	2c00      	cmp	r4, #0
10011238:	d020      	beq.n	1001127c <__aeabi_dsub+0x520>
1001123a:	4c70      	ldr	r4, [pc, #448]	; (100113fc <__aeabi_dsub+0x6a0>)
1001123c:	42a2      	cmp	r2, r4
1001123e:	d071      	beq.n	10011324 <__aeabi_dsub+0x5c8>
10011240:	464c      	mov	r4, r9
10011242:	2c38      	cmp	r4, #56	; 0x38
10011244:	dd00      	ble.n	10011248 <__aeabi_dsub+0x4ec>
10011246:	e0b2      	b.n	100113ae <__aeabi_dsub+0x652>
10011248:	2c1f      	cmp	r4, #31
1001124a:	dd00      	ble.n	1001124e <__aeabi_dsub+0x4f2>
1001124c:	e0bc      	b.n	100113c8 <__aeabi_dsub+0x66c>
1001124e:	2620      	movs	r6, #32
10011250:	1b34      	subs	r4, r6, r4
10011252:	46a2      	mov	sl, r4
10011254:	003c      	movs	r4, r7
10011256:	4656      	mov	r6, sl
10011258:	40b4      	lsls	r4, r6
1001125a:	464e      	mov	r6, r9
1001125c:	46a0      	mov	r8, r4
1001125e:	002c      	movs	r4, r5
10011260:	40f4      	lsrs	r4, r6
10011262:	46a4      	mov	ip, r4
10011264:	4644      	mov	r4, r8
10011266:	4666      	mov	r6, ip
10011268:	4334      	orrs	r4, r6
1001126a:	46a4      	mov	ip, r4
1001126c:	4654      	mov	r4, sl
1001126e:	40a5      	lsls	r5, r4
10011270:	4664      	mov	r4, ip
10011272:	1e6e      	subs	r6, r5, #1
10011274:	41b5      	sbcs	r5, r6
10011276:	4325      	orrs	r5, r4
10011278:	464c      	mov	r4, r9
1001127a:	40e7      	lsrs	r7, r4
1001127c:	186d      	adds	r5, r5, r1
1001127e:	428d      	cmp	r5, r1
10011280:	4189      	sbcs	r1, r1
10011282:	183f      	adds	r7, r7, r0
10011284:	4249      	negs	r1, r1
10011286:	19cf      	adds	r7, r1, r7
10011288:	0014      	movs	r4, r2
1001128a:	e656      	b.n	10010f3a <__aeabi_dsub+0x1de>
1001128c:	2a00      	cmp	r2, #0
1001128e:	d12f      	bne.n	100112f0 <__aeabi_dsub+0x594>
10011290:	0002      	movs	r2, r0
10011292:	430a      	orrs	r2, r1
10011294:	d100      	bne.n	10011298 <__aeabi_dsub+0x53c>
10011296:	e084      	b.n	100113a2 <__aeabi_dsub+0x646>
10011298:	0007      	movs	r7, r0
1001129a:	000d      	movs	r5, r1
1001129c:	469a      	mov	sl, r3
1001129e:	4c57      	ldr	r4, [pc, #348]	; (100113fc <__aeabi_dsub+0x6a0>)
100112a0:	e588      	b.n	10010db4 <__aeabi_dsub+0x58>
100112a2:	433d      	orrs	r5, r7
100112a4:	1e6f      	subs	r7, r5, #1
100112a6:	41bd      	sbcs	r5, r7
100112a8:	b2ec      	uxtb	r4, r5
100112aa:	2700      	movs	r7, #0
100112ac:	1b0d      	subs	r5, r1, r4
100112ae:	e760      	b.n	10011172 <__aeabi_dsub+0x416>
100112b0:	4c52      	ldr	r4, [pc, #328]	; (100113fc <__aeabi_dsub+0x6a0>)
100112b2:	42a2      	cmp	r2, r4
100112b4:	d036      	beq.n	10011324 <__aeabi_dsub+0x5c8>
100112b6:	4274      	negs	r4, r6
100112b8:	2680      	movs	r6, #128	; 0x80
100112ba:	0436      	lsls	r6, r6, #16
100112bc:	46a1      	mov	r9, r4
100112be:	4337      	orrs	r7, r6
100112c0:	e7be      	b.n	10011240 <__aeabi_dsub+0x4e4>
100112c2:	0002      	movs	r2, r0
100112c4:	430a      	orrs	r2, r1
100112c6:	d100      	bne.n	100112ca <__aeabi_dsub+0x56e>
100112c8:	e574      	b.n	10010db4 <__aeabi_dsub+0x58>
100112ca:	1a6a      	subs	r2, r5, r1
100112cc:	4690      	mov	r8, r2
100112ce:	4545      	cmp	r5, r8
100112d0:	41b6      	sbcs	r6, r6
100112d2:	1a3a      	subs	r2, r7, r0
100112d4:	4276      	negs	r6, r6
100112d6:	1b92      	subs	r2, r2, r6
100112d8:	4694      	mov	ip, r2
100112da:	0212      	lsls	r2, r2, #8
100112dc:	d400      	bmi.n	100112e0 <__aeabi_dsub+0x584>
100112de:	e5f7      	b.n	10010ed0 <__aeabi_dsub+0x174>
100112e0:	1b4d      	subs	r5, r1, r5
100112e2:	42a9      	cmp	r1, r5
100112e4:	4189      	sbcs	r1, r1
100112e6:	1bc7      	subs	r7, r0, r7
100112e8:	4249      	negs	r1, r1
100112ea:	1a7f      	subs	r7, r7, r1
100112ec:	469a      	mov	sl, r3
100112ee:	e561      	b.n	10010db4 <__aeabi_dsub+0x58>
100112f0:	0002      	movs	r2, r0
100112f2:	430a      	orrs	r2, r1
100112f4:	d03a      	beq.n	1001136c <__aeabi_dsub+0x610>
100112f6:	08ed      	lsrs	r5, r5, #3
100112f8:	077c      	lsls	r4, r7, #29
100112fa:	432c      	orrs	r4, r5
100112fc:	2580      	movs	r5, #128	; 0x80
100112fe:	08fa      	lsrs	r2, r7, #3
10011300:	032d      	lsls	r5, r5, #12
10011302:	422a      	tst	r2, r5
10011304:	d008      	beq.n	10011318 <__aeabi_dsub+0x5bc>
10011306:	08c7      	lsrs	r7, r0, #3
10011308:	422f      	tst	r7, r5
1001130a:	d105      	bne.n	10011318 <__aeabi_dsub+0x5bc>
1001130c:	0745      	lsls	r5, r0, #29
1001130e:	002c      	movs	r4, r5
10011310:	003a      	movs	r2, r7
10011312:	469a      	mov	sl, r3
10011314:	08c9      	lsrs	r1, r1, #3
10011316:	430c      	orrs	r4, r1
10011318:	0f67      	lsrs	r7, r4, #29
1001131a:	00d2      	lsls	r2, r2, #3
1001131c:	00e5      	lsls	r5, r4, #3
1001131e:	4317      	orrs	r7, r2
10011320:	4c36      	ldr	r4, [pc, #216]	; (100113fc <__aeabi_dsub+0x6a0>)
10011322:	e547      	b.n	10010db4 <__aeabi_dsub+0x58>
10011324:	0007      	movs	r7, r0
10011326:	000d      	movs	r5, r1
10011328:	0014      	movs	r4, r2
1001132a:	e543      	b.n	10010db4 <__aeabi_dsub+0x58>
1001132c:	003a      	movs	r2, r7
1001132e:	432a      	orrs	r2, r5
10011330:	d043      	beq.n	100113ba <__aeabi_dsub+0x65e>
10011332:	0002      	movs	r2, r0
10011334:	430a      	orrs	r2, r1
10011336:	d019      	beq.n	1001136c <__aeabi_dsub+0x610>
10011338:	08ed      	lsrs	r5, r5, #3
1001133a:	077c      	lsls	r4, r7, #29
1001133c:	432c      	orrs	r4, r5
1001133e:	2580      	movs	r5, #128	; 0x80
10011340:	08fa      	lsrs	r2, r7, #3
10011342:	032d      	lsls	r5, r5, #12
10011344:	422a      	tst	r2, r5
10011346:	d007      	beq.n	10011358 <__aeabi_dsub+0x5fc>
10011348:	08c6      	lsrs	r6, r0, #3
1001134a:	422e      	tst	r6, r5
1001134c:	d104      	bne.n	10011358 <__aeabi_dsub+0x5fc>
1001134e:	0747      	lsls	r7, r0, #29
10011350:	003c      	movs	r4, r7
10011352:	0032      	movs	r2, r6
10011354:	08c9      	lsrs	r1, r1, #3
10011356:	430c      	orrs	r4, r1
10011358:	00d7      	lsls	r7, r2, #3
1001135a:	0f62      	lsrs	r2, r4, #29
1001135c:	00e5      	lsls	r5, r4, #3
1001135e:	4317      	orrs	r7, r2
10011360:	469a      	mov	sl, r3
10011362:	4c26      	ldr	r4, [pc, #152]	; (100113fc <__aeabi_dsub+0x6a0>)
10011364:	e526      	b.n	10010db4 <__aeabi_dsub+0x58>
10011366:	2200      	movs	r2, #0
10011368:	2500      	movs	r5, #0
1001136a:	e544      	b.n	10010df6 <__aeabi_dsub+0x9a>
1001136c:	4c23      	ldr	r4, [pc, #140]	; (100113fc <__aeabi_dsub+0x6a0>)
1001136e:	e521      	b.n	10010db4 <__aeabi_dsub+0x58>
10011370:	2000      	movs	r0, #0
10011372:	e749      	b.n	10011208 <__aeabi_dsub+0x4ac>
10011374:	2300      	movs	r3, #0
10011376:	2500      	movs	r5, #0
10011378:	e5bb      	b.n	10010ef2 <__aeabi_dsub+0x196>
1001137a:	464c      	mov	r4, r9
1001137c:	003e      	movs	r6, r7
1001137e:	3c20      	subs	r4, #32
10011380:	40e6      	lsrs	r6, r4
10011382:	464c      	mov	r4, r9
10011384:	46b4      	mov	ip, r6
10011386:	2c20      	cmp	r4, #32
10011388:	d031      	beq.n	100113ee <__aeabi_dsub+0x692>
1001138a:	2440      	movs	r4, #64	; 0x40
1001138c:	464e      	mov	r6, r9
1001138e:	1ba6      	subs	r6, r4, r6
10011390:	40b7      	lsls	r7, r6
10011392:	433d      	orrs	r5, r7
10011394:	1e6c      	subs	r4, r5, #1
10011396:	41a5      	sbcs	r5, r4
10011398:	4664      	mov	r4, ip
1001139a:	432c      	orrs	r4, r5
1001139c:	2700      	movs	r7, #0
1001139e:	1b0d      	subs	r5, r1, r4
100113a0:	e6e7      	b.n	10011172 <__aeabi_dsub+0x416>
100113a2:	2280      	movs	r2, #128	; 0x80
100113a4:	2300      	movs	r3, #0
100113a6:	0312      	lsls	r2, r2, #12
100113a8:	4c14      	ldr	r4, [pc, #80]	; (100113fc <__aeabi_dsub+0x6a0>)
100113aa:	2500      	movs	r5, #0
100113ac:	e5a1      	b.n	10010ef2 <__aeabi_dsub+0x196>
100113ae:	433d      	orrs	r5, r7
100113b0:	1e6f      	subs	r7, r5, #1
100113b2:	41bd      	sbcs	r5, r7
100113b4:	2700      	movs	r7, #0
100113b6:	b2ed      	uxtb	r5, r5
100113b8:	e760      	b.n	1001127c <__aeabi_dsub+0x520>
100113ba:	0007      	movs	r7, r0
100113bc:	000d      	movs	r5, r1
100113be:	4c0f      	ldr	r4, [pc, #60]	; (100113fc <__aeabi_dsub+0x6a0>)
100113c0:	e4f8      	b.n	10010db4 <__aeabi_dsub+0x58>
100113c2:	0007      	movs	r7, r0
100113c4:	000d      	movs	r5, r1
100113c6:	e4f5      	b.n	10010db4 <__aeabi_dsub+0x58>
100113c8:	464e      	mov	r6, r9
100113ca:	003c      	movs	r4, r7
100113cc:	3e20      	subs	r6, #32
100113ce:	40f4      	lsrs	r4, r6
100113d0:	46a0      	mov	r8, r4
100113d2:	464c      	mov	r4, r9
100113d4:	2c20      	cmp	r4, #32
100113d6:	d00e      	beq.n	100113f6 <__aeabi_dsub+0x69a>
100113d8:	2440      	movs	r4, #64	; 0x40
100113da:	464e      	mov	r6, r9
100113dc:	1ba4      	subs	r4, r4, r6
100113de:	40a7      	lsls	r7, r4
100113e0:	433d      	orrs	r5, r7
100113e2:	1e6f      	subs	r7, r5, #1
100113e4:	41bd      	sbcs	r5, r7
100113e6:	4644      	mov	r4, r8
100113e8:	2700      	movs	r7, #0
100113ea:	4325      	orrs	r5, r4
100113ec:	e746      	b.n	1001127c <__aeabi_dsub+0x520>
100113ee:	2700      	movs	r7, #0
100113f0:	e7cf      	b.n	10011392 <__aeabi_dsub+0x636>
100113f2:	000d      	movs	r5, r1
100113f4:	e573      	b.n	10010ede <__aeabi_dsub+0x182>
100113f6:	2700      	movs	r7, #0
100113f8:	e7f2      	b.n	100113e0 <__aeabi_dsub+0x684>
100113fa:	46c0      	nop			; (mov r8, r8)
100113fc:	000007ff 	.word	0x000007ff
10011400:	ff7fffff 	.word	0xff7fffff

10011404 <__aeabi_d2iz>:
10011404:	030b      	lsls	r3, r1, #12
10011406:	b530      	push	{r4, r5, lr}
10011408:	4d13      	ldr	r5, [pc, #76]	; (10011458 <__aeabi_d2iz+0x54>)
1001140a:	0b1a      	lsrs	r2, r3, #12
1001140c:	004b      	lsls	r3, r1, #1
1001140e:	0d5b      	lsrs	r3, r3, #21
10011410:	0fc9      	lsrs	r1, r1, #31
10011412:	2400      	movs	r4, #0
10011414:	42ab      	cmp	r3, r5
10011416:	dd11      	ble.n	1001143c <__aeabi_d2iz+0x38>
10011418:	4c10      	ldr	r4, [pc, #64]	; (1001145c <__aeabi_d2iz+0x58>)
1001141a:	42a3      	cmp	r3, r4
1001141c:	dc10      	bgt.n	10011440 <__aeabi_d2iz+0x3c>
1001141e:	2480      	movs	r4, #128	; 0x80
10011420:	0364      	lsls	r4, r4, #13
10011422:	4322      	orrs	r2, r4
10011424:	4c0e      	ldr	r4, [pc, #56]	; (10011460 <__aeabi_d2iz+0x5c>)
10011426:	1ae4      	subs	r4, r4, r3
10011428:	2c1f      	cmp	r4, #31
1001142a:	dd0c      	ble.n	10011446 <__aeabi_d2iz+0x42>
1001142c:	480d      	ldr	r0, [pc, #52]	; (10011464 <__aeabi_d2iz+0x60>)
1001142e:	1ac3      	subs	r3, r0, r3
10011430:	40da      	lsrs	r2, r3
10011432:	0013      	movs	r3, r2
10011434:	425c      	negs	r4, r3
10011436:	2900      	cmp	r1, #0
10011438:	d100      	bne.n	1001143c <__aeabi_d2iz+0x38>
1001143a:	001c      	movs	r4, r3
1001143c:	0020      	movs	r0, r4
1001143e:	bd30      	pop	{r4, r5, pc}
10011440:	4b09      	ldr	r3, [pc, #36]	; (10011468 <__aeabi_d2iz+0x64>)
10011442:	18cc      	adds	r4, r1, r3
10011444:	e7fa      	b.n	1001143c <__aeabi_d2iz+0x38>
10011446:	40e0      	lsrs	r0, r4
10011448:	4c08      	ldr	r4, [pc, #32]	; (1001146c <__aeabi_d2iz+0x68>)
1001144a:	46a4      	mov	ip, r4
1001144c:	4463      	add	r3, ip
1001144e:	409a      	lsls	r2, r3
10011450:	0013      	movs	r3, r2
10011452:	4303      	orrs	r3, r0
10011454:	e7ee      	b.n	10011434 <__aeabi_d2iz+0x30>
10011456:	46c0      	nop			; (mov r8, r8)
10011458:	000003fe 	.word	0x000003fe
1001145c:	0000041d 	.word	0x0000041d
10011460:	00000433 	.word	0x00000433
10011464:	00000413 	.word	0x00000413
10011468:	7fffffff 	.word	0x7fffffff
1001146c:	fffffbed 	.word	0xfffffbed

10011470 <__aeabi_ui2d>:
10011470:	b570      	push	{r4, r5, r6, lr}
10011472:	1e05      	subs	r5, r0, #0
10011474:	d028      	beq.n	100114c8 <__aeabi_ui2d+0x58>
10011476:	f000 f833 	bl	100114e0 <__clzsi2>
1001147a:	4b15      	ldr	r3, [pc, #84]	; (100114d0 <__aeabi_ui2d+0x60>)
1001147c:	4a15      	ldr	r2, [pc, #84]	; (100114d4 <__aeabi_ui2d+0x64>)
1001147e:	1a1b      	subs	r3, r3, r0
10011480:	1ad2      	subs	r2, r2, r3
10011482:	2a1f      	cmp	r2, #31
10011484:	dd16      	ble.n	100114b4 <__aeabi_ui2d+0x44>
10011486:	002c      	movs	r4, r5
10011488:	4a13      	ldr	r2, [pc, #76]	; (100114d8 <__aeabi_ui2d+0x68>)
1001148a:	2500      	movs	r5, #0
1001148c:	1ad2      	subs	r2, r2, r3
1001148e:	4094      	lsls	r4, r2
10011490:	055a      	lsls	r2, r3, #21
10011492:	0324      	lsls	r4, r4, #12
10011494:	0b24      	lsrs	r4, r4, #12
10011496:	0d52      	lsrs	r2, r2, #21
10011498:	2100      	movs	r1, #0
1001149a:	0324      	lsls	r4, r4, #12
1001149c:	0d0b      	lsrs	r3, r1, #20
1001149e:	0b24      	lsrs	r4, r4, #12
100114a0:	051b      	lsls	r3, r3, #20
100114a2:	4323      	orrs	r3, r4
100114a4:	4c0d      	ldr	r4, [pc, #52]	; (100114dc <__aeabi_ui2d+0x6c>)
100114a6:	0512      	lsls	r2, r2, #20
100114a8:	4023      	ands	r3, r4
100114aa:	4313      	orrs	r3, r2
100114ac:	005b      	lsls	r3, r3, #1
100114ae:	0028      	movs	r0, r5
100114b0:	0859      	lsrs	r1, r3, #1
100114b2:	bd70      	pop	{r4, r5, r6, pc}
100114b4:	210b      	movs	r1, #11
100114b6:	002c      	movs	r4, r5
100114b8:	1a08      	subs	r0, r1, r0
100114ba:	40c4      	lsrs	r4, r0
100114bc:	4095      	lsls	r5, r2
100114be:	0324      	lsls	r4, r4, #12
100114c0:	055a      	lsls	r2, r3, #21
100114c2:	0b24      	lsrs	r4, r4, #12
100114c4:	0d52      	lsrs	r2, r2, #21
100114c6:	e7e7      	b.n	10011498 <__aeabi_ui2d+0x28>
100114c8:	2200      	movs	r2, #0
100114ca:	2400      	movs	r4, #0
100114cc:	e7e4      	b.n	10011498 <__aeabi_ui2d+0x28>
100114ce:	46c0      	nop			; (mov r8, r8)
100114d0:	0000041e 	.word	0x0000041e
100114d4:	00000433 	.word	0x00000433
100114d8:	00000413 	.word	0x00000413
100114dc:	800fffff 	.word	0x800fffff

100114e0 <__clzsi2>:
100114e0:	211c      	movs	r1, #28
100114e2:	2301      	movs	r3, #1
100114e4:	041b      	lsls	r3, r3, #16
100114e6:	4298      	cmp	r0, r3
100114e8:	d301      	bcc.n	100114ee <__clzsi2+0xe>
100114ea:	0c00      	lsrs	r0, r0, #16
100114ec:	3910      	subs	r1, #16
100114ee:	0a1b      	lsrs	r3, r3, #8
100114f0:	4298      	cmp	r0, r3
100114f2:	d301      	bcc.n	100114f8 <__clzsi2+0x18>
100114f4:	0a00      	lsrs	r0, r0, #8
100114f6:	3908      	subs	r1, #8
100114f8:	091b      	lsrs	r3, r3, #4
100114fa:	4298      	cmp	r0, r3
100114fc:	d301      	bcc.n	10011502 <__clzsi2+0x22>
100114fe:	0900      	lsrs	r0, r0, #4
10011500:	3904      	subs	r1, #4
10011502:	a202      	add	r2, pc, #8	; (adr r2, 1001150c <__clzsi2+0x2c>)
10011504:	5c10      	ldrb	r0, [r2, r0]
10011506:	1840      	adds	r0, r0, r1
10011508:	4770      	bx	lr
1001150a:	46c0      	nop			; (mov r8, r8)
1001150c:	02020304 	.word	0x02020304
10011510:	01010101 	.word	0x01010101
	...

1001151c <__libc_init_array>:
1001151c:	4b0e      	ldr	r3, [pc, #56]	; (10011558 <__libc_init_array+0x3c>)
1001151e:	b570      	push	{r4, r5, r6, lr}
10011520:	2500      	movs	r5, #0
10011522:	001e      	movs	r6, r3
10011524:	4c0d      	ldr	r4, [pc, #52]	; (1001155c <__libc_init_array+0x40>)
10011526:	1ae4      	subs	r4, r4, r3
10011528:	10a4      	asrs	r4, r4, #2
1001152a:	42a5      	cmp	r5, r4
1001152c:	d004      	beq.n	10011538 <__libc_init_array+0x1c>
1001152e:	00ab      	lsls	r3, r5, #2
10011530:	58f3      	ldr	r3, [r6, r3]
10011532:	4798      	blx	r3
10011534:	3501      	adds	r5, #1
10011536:	e7f8      	b.n	1001152a <__libc_init_array+0xe>
10011538:	f002 f95e 	bl	100137f8 <_init>
1001153c:	4b08      	ldr	r3, [pc, #32]	; (10011560 <__libc_init_array+0x44>)
1001153e:	2500      	movs	r5, #0
10011540:	001e      	movs	r6, r3
10011542:	4c08      	ldr	r4, [pc, #32]	; (10011564 <__libc_init_array+0x48>)
10011544:	1ae4      	subs	r4, r4, r3
10011546:	10a4      	asrs	r4, r4, #2
10011548:	42a5      	cmp	r5, r4
1001154a:	d004      	beq.n	10011556 <__libc_init_array+0x3a>
1001154c:	00ab      	lsls	r3, r5, #2
1001154e:	58f3      	ldr	r3, [r6, r3]
10011550:	4798      	blx	r3
10011552:	3501      	adds	r5, #1
10011554:	e7f8      	b.n	10011548 <__libc_init_array+0x2c>
10011556:	bd70      	pop	{r4, r5, r6, pc}
10011558:	10013804 	.word	0x10013804
1001155c:	10013804 	.word	0x10013804
10011560:	10013804 	.word	0x10013804
10011564:	10013808 	.word	0x10013808

10011568 <malloc>:
10011568:	b510      	push	{r4, lr}
1001156a:	4b03      	ldr	r3, [pc, #12]	; (10011578 <malloc+0x10>)
1001156c:	0001      	movs	r1, r0
1001156e:	6818      	ldr	r0, [r3, #0]
10011570:	f000 f86a 	bl	10011648 <_malloc_r>
10011574:	bd10      	pop	{r4, pc}
10011576:	46c0      	nop			; (mov r8, r8)
10011578:	100138c0 	.word	0x100138c0

1001157c <memcmp>:
1001157c:	b530      	push	{r4, r5, lr}
1001157e:	2400      	movs	r4, #0
10011580:	42a2      	cmp	r2, r4
10011582:	d008      	beq.n	10011596 <memcmp+0x1a>
10011584:	5d03      	ldrb	r3, [r0, r4]
10011586:	1c65      	adds	r5, r4, #1
10011588:	5d0c      	ldrb	r4, [r1, r4]
1001158a:	42a3      	cmp	r3, r4
1001158c:	d001      	beq.n	10011592 <memcmp+0x16>
1001158e:	1b18      	subs	r0, r3, r4
10011590:	e002      	b.n	10011598 <memcmp+0x1c>
10011592:	002c      	movs	r4, r5
10011594:	e7f4      	b.n	10011580 <memcmp+0x4>
10011596:	2000      	movs	r0, #0
10011598:	bd30      	pop	{r4, r5, pc}

1001159a <memcpy>:
1001159a:	2300      	movs	r3, #0
1001159c:	b510      	push	{r4, lr}
1001159e:	429a      	cmp	r2, r3
100115a0:	d003      	beq.n	100115aa <memcpy+0x10>
100115a2:	5ccc      	ldrb	r4, [r1, r3]
100115a4:	54c4      	strb	r4, [r0, r3]
100115a6:	3301      	adds	r3, #1
100115a8:	e7f9      	b.n	1001159e <memcpy+0x4>
100115aa:	bd10      	pop	{r4, pc}

100115ac <memset>:
100115ac:	0003      	movs	r3, r0
100115ae:	1882      	adds	r2, r0, r2
100115b0:	4293      	cmp	r3, r2
100115b2:	d002      	beq.n	100115ba <memset+0xe>
100115b4:	7019      	strb	r1, [r3, #0]
100115b6:	3301      	adds	r3, #1
100115b8:	e7fa      	b.n	100115b0 <memset+0x4>
100115ba:	4770      	bx	lr

100115bc <_free_r>:
100115bc:	b530      	push	{r4, r5, lr}
100115be:	2900      	cmp	r1, #0
100115c0:	d03e      	beq.n	10011640 <_free_r+0x84>
100115c2:	3904      	subs	r1, #4
100115c4:	680b      	ldr	r3, [r1, #0]
100115c6:	2b00      	cmp	r3, #0
100115c8:	da00      	bge.n	100115cc <_free_r+0x10>
100115ca:	18c9      	adds	r1, r1, r3
100115cc:	4a1d      	ldr	r2, [pc, #116]	; (10011644 <_free_r+0x88>)
100115ce:	6813      	ldr	r3, [r2, #0]
100115d0:	0014      	movs	r4, r2
100115d2:	2b00      	cmp	r3, #0
100115d4:	d102      	bne.n	100115dc <_free_r+0x20>
100115d6:	604b      	str	r3, [r1, #4]
100115d8:	6011      	str	r1, [r2, #0]
100115da:	e031      	b.n	10011640 <_free_r+0x84>
100115dc:	428b      	cmp	r3, r1
100115de:	d90d      	bls.n	100115fc <_free_r+0x40>
100115e0:	680a      	ldr	r2, [r1, #0]
100115e2:	1888      	adds	r0, r1, r2
100115e4:	4283      	cmp	r3, r0
100115e6:	d103      	bne.n	100115f0 <_free_r+0x34>
100115e8:	6818      	ldr	r0, [r3, #0]
100115ea:	685b      	ldr	r3, [r3, #4]
100115ec:	1882      	adds	r2, r0, r2
100115ee:	600a      	str	r2, [r1, #0]
100115f0:	604b      	str	r3, [r1, #4]
100115f2:	6021      	str	r1, [r4, #0]
100115f4:	e024      	b.n	10011640 <_free_r+0x84>
100115f6:	428a      	cmp	r2, r1
100115f8:	d803      	bhi.n	10011602 <_free_r+0x46>
100115fa:	0013      	movs	r3, r2
100115fc:	685a      	ldr	r2, [r3, #4]
100115fe:	2a00      	cmp	r2, #0
10011600:	d1f9      	bne.n	100115f6 <_free_r+0x3a>
10011602:	681d      	ldr	r5, [r3, #0]
10011604:	195c      	adds	r4, r3, r5
10011606:	428c      	cmp	r4, r1
10011608:	d10b      	bne.n	10011622 <_free_r+0x66>
1001160a:	6809      	ldr	r1, [r1, #0]
1001160c:	1869      	adds	r1, r5, r1
1001160e:	1858      	adds	r0, r3, r1
10011610:	6019      	str	r1, [r3, #0]
10011612:	4282      	cmp	r2, r0
10011614:	d114      	bne.n	10011640 <_free_r+0x84>
10011616:	6810      	ldr	r0, [r2, #0]
10011618:	6852      	ldr	r2, [r2, #4]
1001161a:	1841      	adds	r1, r0, r1
1001161c:	6019      	str	r1, [r3, #0]
1001161e:	605a      	str	r2, [r3, #4]
10011620:	e00e      	b.n	10011640 <_free_r+0x84>
10011622:	428c      	cmp	r4, r1
10011624:	d902      	bls.n	1001162c <_free_r+0x70>
10011626:	230c      	movs	r3, #12
10011628:	6003      	str	r3, [r0, #0]
1001162a:	e009      	b.n	10011640 <_free_r+0x84>
1001162c:	6808      	ldr	r0, [r1, #0]
1001162e:	180c      	adds	r4, r1, r0
10011630:	42a2      	cmp	r2, r4
10011632:	d103      	bne.n	1001163c <_free_r+0x80>
10011634:	6814      	ldr	r4, [r2, #0]
10011636:	6852      	ldr	r2, [r2, #4]
10011638:	1820      	adds	r0, r4, r0
1001163a:	6008      	str	r0, [r1, #0]
1001163c:	604a      	str	r2, [r1, #4]
1001163e:	6059      	str	r1, [r3, #4]
10011640:	bd30      	pop	{r4, r5, pc}
10011642:	46c0      	nop			; (mov r8, r8)
10011644:	10014eb4 	.word	0x10014eb4

10011648 <_malloc_r>:
10011648:	2303      	movs	r3, #3
1001164a:	b570      	push	{r4, r5, r6, lr}
1001164c:	1ccd      	adds	r5, r1, #3
1001164e:	439d      	bics	r5, r3
10011650:	3508      	adds	r5, #8
10011652:	0006      	movs	r6, r0
10011654:	2d0c      	cmp	r5, #12
10011656:	d201      	bcs.n	1001165c <_malloc_r+0x14>
10011658:	250c      	movs	r5, #12
1001165a:	e005      	b.n	10011668 <_malloc_r+0x20>
1001165c:	2d00      	cmp	r5, #0
1001165e:	da03      	bge.n	10011668 <_malloc_r+0x20>
10011660:	230c      	movs	r3, #12
10011662:	2000      	movs	r0, #0
10011664:	6033      	str	r3, [r6, #0]
10011666:	e040      	b.n	100116ea <_malloc_r+0xa2>
10011668:	42a9      	cmp	r1, r5
1001166a:	d8f9      	bhi.n	10011660 <_malloc_r+0x18>
1001166c:	4b1f      	ldr	r3, [pc, #124]	; (100116ec <_malloc_r+0xa4>)
1001166e:	681c      	ldr	r4, [r3, #0]
10011670:	001a      	movs	r2, r3
10011672:	0021      	movs	r1, r4
10011674:	2900      	cmp	r1, #0
10011676:	d013      	beq.n	100116a0 <_malloc_r+0x58>
10011678:	680b      	ldr	r3, [r1, #0]
1001167a:	1b5b      	subs	r3, r3, r5
1001167c:	d40d      	bmi.n	1001169a <_malloc_r+0x52>
1001167e:	2b0b      	cmp	r3, #11
10011680:	d902      	bls.n	10011688 <_malloc_r+0x40>
10011682:	600b      	str	r3, [r1, #0]
10011684:	18cc      	adds	r4, r1, r3
10011686:	e01e      	b.n	100116c6 <_malloc_r+0x7e>
10011688:	428c      	cmp	r4, r1
1001168a:	d102      	bne.n	10011692 <_malloc_r+0x4a>
1001168c:	6863      	ldr	r3, [r4, #4]
1001168e:	6013      	str	r3, [r2, #0]
10011690:	e01a      	b.n	100116c8 <_malloc_r+0x80>
10011692:	684b      	ldr	r3, [r1, #4]
10011694:	6063      	str	r3, [r4, #4]
10011696:	000c      	movs	r4, r1
10011698:	e016      	b.n	100116c8 <_malloc_r+0x80>
1001169a:	000c      	movs	r4, r1
1001169c:	6849      	ldr	r1, [r1, #4]
1001169e:	e7e9      	b.n	10011674 <_malloc_r+0x2c>
100116a0:	4c13      	ldr	r4, [pc, #76]	; (100116f0 <_malloc_r+0xa8>)
100116a2:	6823      	ldr	r3, [r4, #0]
100116a4:	2b00      	cmp	r3, #0
100116a6:	d103      	bne.n	100116b0 <_malloc_r+0x68>
100116a8:	0030      	movs	r0, r6
100116aa:	f000 f8f9 	bl	100118a0 <_sbrk_r>
100116ae:	6020      	str	r0, [r4, #0]
100116b0:	0029      	movs	r1, r5
100116b2:	0030      	movs	r0, r6
100116b4:	f000 f8f4 	bl	100118a0 <_sbrk_r>
100116b8:	1c43      	adds	r3, r0, #1
100116ba:	d0d1      	beq.n	10011660 <_malloc_r+0x18>
100116bc:	2303      	movs	r3, #3
100116be:	1cc4      	adds	r4, r0, #3
100116c0:	439c      	bics	r4, r3
100116c2:	42a0      	cmp	r0, r4
100116c4:	d10a      	bne.n	100116dc <_malloc_r+0x94>
100116c6:	6025      	str	r5, [r4, #0]
100116c8:	0020      	movs	r0, r4
100116ca:	2207      	movs	r2, #7
100116cc:	300b      	adds	r0, #11
100116ce:	1d23      	adds	r3, r4, #4
100116d0:	4390      	bics	r0, r2
100116d2:	1ac3      	subs	r3, r0, r3
100116d4:	d009      	beq.n	100116ea <_malloc_r+0xa2>
100116d6:	425a      	negs	r2, r3
100116d8:	50e2      	str	r2, [r4, r3]
100116da:	e006      	b.n	100116ea <_malloc_r+0xa2>
100116dc:	1a21      	subs	r1, r4, r0
100116de:	0030      	movs	r0, r6
100116e0:	f000 f8de 	bl	100118a0 <_sbrk_r>
100116e4:	1c43      	adds	r3, r0, #1
100116e6:	d1ee      	bne.n	100116c6 <_malloc_r+0x7e>
100116e8:	e7ba      	b.n	10011660 <_malloc_r+0x18>
100116ea:	bd70      	pop	{r4, r5, r6, pc}
100116ec:	10014eb4 	.word	0x10014eb4
100116f0:	10014eb0 	.word	0x10014eb0

100116f4 <iprintf>:
100116f4:	b40f      	push	{r0, r1, r2, r3}
100116f6:	4b0b      	ldr	r3, [pc, #44]	; (10011724 <iprintf+0x30>)
100116f8:	b513      	push	{r0, r1, r4, lr}
100116fa:	681c      	ldr	r4, [r3, #0]
100116fc:	2c00      	cmp	r4, #0
100116fe:	d005      	beq.n	1001170c <iprintf+0x18>
10011700:	69a3      	ldr	r3, [r4, #24]
10011702:	2b00      	cmp	r3, #0
10011704:	d102      	bne.n	1001170c <iprintf+0x18>
10011706:	0020      	movs	r0, r4
10011708:	f000 fb58 	bl	10011dbc <__sinit>
1001170c:	ab05      	add	r3, sp, #20
1001170e:	9a04      	ldr	r2, [sp, #16]
10011710:	68a1      	ldr	r1, [r4, #8]
10011712:	0020      	movs	r0, r4
10011714:	9301      	str	r3, [sp, #4]
10011716:	f000 fc71 	bl	10011ffc <_vfiprintf_r>
1001171a:	bc16      	pop	{r1, r2, r4}
1001171c:	bc08      	pop	{r3}
1001171e:	b004      	add	sp, #16
10011720:	4718      	bx	r3
10011722:	46c0      	nop			; (mov r8, r8)
10011724:	100138c0 	.word	0x100138c0

10011728 <putchar>:
10011728:	4b08      	ldr	r3, [pc, #32]	; (1001174c <putchar+0x24>)
1001172a:	b570      	push	{r4, r5, r6, lr}
1001172c:	681c      	ldr	r4, [r3, #0]
1001172e:	0005      	movs	r5, r0
10011730:	2c00      	cmp	r4, #0
10011732:	d005      	beq.n	10011740 <putchar+0x18>
10011734:	69a3      	ldr	r3, [r4, #24]
10011736:	2b00      	cmp	r3, #0
10011738:	d102      	bne.n	10011740 <putchar+0x18>
1001173a:	0020      	movs	r0, r4
1001173c:	f000 fb3e 	bl	10011dbc <__sinit>
10011740:	0029      	movs	r1, r5
10011742:	68a2      	ldr	r2, [r4, #8]
10011744:	0020      	movs	r0, r4
10011746:	f000 ff05 	bl	10012554 <_putc_r>
1001174a:	bd70      	pop	{r4, r5, r6, pc}
1001174c:	100138c0 	.word	0x100138c0

10011750 <_puts_r>:
10011750:	b570      	push	{r4, r5, r6, lr}
10011752:	0005      	movs	r5, r0
10011754:	000e      	movs	r6, r1
10011756:	2800      	cmp	r0, #0
10011758:	d004      	beq.n	10011764 <_puts_r+0x14>
1001175a:	6983      	ldr	r3, [r0, #24]
1001175c:	2b00      	cmp	r3, #0
1001175e:	d101      	bne.n	10011764 <_puts_r+0x14>
10011760:	f000 fb2c 	bl	10011dbc <__sinit>
10011764:	69ab      	ldr	r3, [r5, #24]
10011766:	68ac      	ldr	r4, [r5, #8]
10011768:	2b00      	cmp	r3, #0
1001176a:	d102      	bne.n	10011772 <_puts_r+0x22>
1001176c:	0028      	movs	r0, r5
1001176e:	f000 fb25 	bl	10011dbc <__sinit>
10011772:	4b25      	ldr	r3, [pc, #148]	; (10011808 <_puts_r+0xb8>)
10011774:	429c      	cmp	r4, r3
10011776:	d101      	bne.n	1001177c <_puts_r+0x2c>
10011778:	686c      	ldr	r4, [r5, #4]
1001177a:	e008      	b.n	1001178e <_puts_r+0x3e>
1001177c:	4b23      	ldr	r3, [pc, #140]	; (1001180c <_puts_r+0xbc>)
1001177e:	429c      	cmp	r4, r3
10011780:	d101      	bne.n	10011786 <_puts_r+0x36>
10011782:	68ac      	ldr	r4, [r5, #8]
10011784:	e003      	b.n	1001178e <_puts_r+0x3e>
10011786:	4b22      	ldr	r3, [pc, #136]	; (10011810 <_puts_r+0xc0>)
10011788:	429c      	cmp	r4, r3
1001178a:	d100      	bne.n	1001178e <_puts_r+0x3e>
1001178c:	68ec      	ldr	r4, [r5, #12]
1001178e:	89a3      	ldrh	r3, [r4, #12]
10011790:	071b      	lsls	r3, r3, #28
10011792:	d502      	bpl.n	1001179a <_puts_r+0x4a>
10011794:	6923      	ldr	r3, [r4, #16]
10011796:	2b00      	cmp	r3, #0
10011798:	d111      	bne.n	100117be <_puts_r+0x6e>
1001179a:	0021      	movs	r1, r4
1001179c:	0028      	movs	r0, r5
1001179e:	f000 f9a3 	bl	10011ae8 <__swsetup_r>
100117a2:	2800      	cmp	r0, #0
100117a4:	d00b      	beq.n	100117be <_puts_r+0x6e>
100117a6:	2001      	movs	r0, #1
100117a8:	4240      	negs	r0, r0
100117aa:	e02b      	b.n	10011804 <_puts_r+0xb4>
100117ac:	3b01      	subs	r3, #1
100117ae:	3601      	adds	r6, #1
100117b0:	60a3      	str	r3, [r4, #8]
100117b2:	2b00      	cmp	r3, #0
100117b4:	db08      	blt.n	100117c8 <_puts_r+0x78>
100117b6:	6823      	ldr	r3, [r4, #0]
100117b8:	1c5a      	adds	r2, r3, #1
100117ba:	6022      	str	r2, [r4, #0]
100117bc:	7019      	strb	r1, [r3, #0]
100117be:	7831      	ldrb	r1, [r6, #0]
100117c0:	68a3      	ldr	r3, [r4, #8]
100117c2:	2900      	cmp	r1, #0
100117c4:	d1f2      	bne.n	100117ac <_puts_r+0x5c>
100117c6:	e00b      	b.n	100117e0 <_puts_r+0x90>
100117c8:	69a2      	ldr	r2, [r4, #24]
100117ca:	4293      	cmp	r3, r2
100117cc:	db01      	blt.n	100117d2 <_puts_r+0x82>
100117ce:	290a      	cmp	r1, #10
100117d0:	d1f1      	bne.n	100117b6 <_puts_r+0x66>
100117d2:	0022      	movs	r2, r4
100117d4:	0028      	movs	r0, r5
100117d6:	f000 f92f 	bl	10011a38 <__swbuf_r>
100117da:	1c43      	adds	r3, r0, #1
100117dc:	d1ef      	bne.n	100117be <_puts_r+0x6e>
100117de:	e7e2      	b.n	100117a6 <_puts_r+0x56>
100117e0:	3b01      	subs	r3, #1
100117e2:	60a3      	str	r3, [r4, #8]
100117e4:	2b00      	cmp	r3, #0
100117e6:	da08      	bge.n	100117fa <_puts_r+0xaa>
100117e8:	0022      	movs	r2, r4
100117ea:	310a      	adds	r1, #10
100117ec:	0028      	movs	r0, r5
100117ee:	f000 f923 	bl	10011a38 <__swbuf_r>
100117f2:	1c43      	adds	r3, r0, #1
100117f4:	d0d7      	beq.n	100117a6 <_puts_r+0x56>
100117f6:	200a      	movs	r0, #10
100117f8:	e004      	b.n	10011804 <_puts_r+0xb4>
100117fa:	200a      	movs	r0, #10
100117fc:	6823      	ldr	r3, [r4, #0]
100117fe:	1c5a      	adds	r2, r3, #1
10011800:	6022      	str	r2, [r4, #0]
10011802:	7018      	strb	r0, [r3, #0]
10011804:	bd70      	pop	{r4, r5, r6, pc}
10011806:	46c0      	nop			; (mov r8, r8)
10011808:	10013764 	.word	0x10013764
1001180c:	10013784 	.word	0x10013784
10011810:	100137a4 	.word	0x100137a4

10011814 <puts>:
10011814:	b510      	push	{r4, lr}
10011816:	4b03      	ldr	r3, [pc, #12]	; (10011824 <puts+0x10>)
10011818:	0001      	movs	r1, r0
1001181a:	6818      	ldr	r0, [r3, #0]
1001181c:	f7ff ff98 	bl	10011750 <_puts_r>
10011820:	bd10      	pop	{r4, pc}
10011822:	46c0      	nop			; (mov r8, r8)
10011824:	100138c0 	.word	0x100138c0

10011828 <rand>:
10011828:	4b15      	ldr	r3, [pc, #84]	; (10011880 <rand+0x58>)
1001182a:	b510      	push	{r4, lr}
1001182c:	681c      	ldr	r4, [r3, #0]
1001182e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011830:	2b00      	cmp	r3, #0
10011832:	d115      	bne.n	10011860 <rand+0x38>
10011834:	2018      	movs	r0, #24
10011836:	f7ff fe97 	bl	10011568 <malloc>
1001183a:	4b12      	ldr	r3, [pc, #72]	; (10011884 <rand+0x5c>)
1001183c:	63a0      	str	r0, [r4, #56]	; 0x38
1001183e:	8003      	strh	r3, [r0, #0]
10011840:	4b11      	ldr	r3, [pc, #68]	; (10011888 <rand+0x60>)
10011842:	2201      	movs	r2, #1
10011844:	8043      	strh	r3, [r0, #2]
10011846:	4b11      	ldr	r3, [pc, #68]	; (1001188c <rand+0x64>)
10011848:	8083      	strh	r3, [r0, #4]
1001184a:	4b11      	ldr	r3, [pc, #68]	; (10011890 <rand+0x68>)
1001184c:	80c3      	strh	r3, [r0, #6]
1001184e:	4b11      	ldr	r3, [pc, #68]	; (10011894 <rand+0x6c>)
10011850:	8103      	strh	r3, [r0, #8]
10011852:	2305      	movs	r3, #5
10011854:	8143      	strh	r3, [r0, #10]
10011856:	3306      	adds	r3, #6
10011858:	8183      	strh	r3, [r0, #12]
1001185a:	2300      	movs	r3, #0
1001185c:	6102      	str	r2, [r0, #16]
1001185e:	6143      	str	r3, [r0, #20]
10011860:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011862:	4a0d      	ldr	r2, [pc, #52]	; (10011898 <rand+0x70>)
10011864:	6920      	ldr	r0, [r4, #16]
10011866:	6961      	ldr	r1, [r4, #20]
10011868:	4b0c      	ldr	r3, [pc, #48]	; (1001189c <rand+0x74>)
1001186a:	f7fe f9c9 	bl	1000fc00 <__aeabi_lmul>
1001186e:	2201      	movs	r2, #1
10011870:	2300      	movs	r3, #0
10011872:	1880      	adds	r0, r0, r2
10011874:	4159      	adcs	r1, r3
10011876:	6120      	str	r0, [r4, #16]
10011878:	6161      	str	r1, [r4, #20]
1001187a:	0048      	lsls	r0, r1, #1
1001187c:	0840      	lsrs	r0, r0, #1
1001187e:	bd10      	pop	{r4, pc}
10011880:	100138c0 	.word	0x100138c0
10011884:	0000330e 	.word	0x0000330e
10011888:	ffffabcd 	.word	0xffffabcd
1001188c:	00001234 	.word	0x00001234
10011890:	ffffe66d 	.word	0xffffe66d
10011894:	ffffdeec 	.word	0xffffdeec
10011898:	4c957f2d 	.word	0x4c957f2d
1001189c:	5851f42d 	.word	0x5851f42d

100118a0 <_sbrk_r>:
100118a0:	2300      	movs	r3, #0
100118a2:	b570      	push	{r4, r5, r6, lr}
100118a4:	4c06      	ldr	r4, [pc, #24]	; (100118c0 <_sbrk_r+0x20>)
100118a6:	0005      	movs	r5, r0
100118a8:	0008      	movs	r0, r1
100118aa:	6023      	str	r3, [r4, #0]
100118ac:	f7fb fa3e 	bl	1000cd2c <_sbrk>
100118b0:	1c43      	adds	r3, r0, #1
100118b2:	d103      	bne.n	100118bc <_sbrk_r+0x1c>
100118b4:	6823      	ldr	r3, [r4, #0]
100118b6:	2b00      	cmp	r3, #0
100118b8:	d000      	beq.n	100118bc <_sbrk_r+0x1c>
100118ba:	602b      	str	r3, [r5, #0]
100118bc:	bd70      	pop	{r4, r5, r6, pc}
100118be:	46c0      	nop			; (mov r8, r8)
100118c0:	100160c0 	.word	0x100160c0

100118c4 <setbuf>:
100118c4:	424a      	negs	r2, r1
100118c6:	414a      	adcs	r2, r1
100118c8:	2380      	movs	r3, #128	; 0x80
100118ca:	b510      	push	{r4, lr}
100118cc:	0052      	lsls	r2, r2, #1
100118ce:	00db      	lsls	r3, r3, #3
100118d0:	f000 f802 	bl	100118d8 <setvbuf>
100118d4:	bd10      	pop	{r4, pc}
	...

100118d8 <setvbuf>:
100118d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100118da:	001d      	movs	r5, r3
100118dc:	4b51      	ldr	r3, [pc, #324]	; (10011a24 <setvbuf+0x14c>)
100118de:	b085      	sub	sp, #20
100118e0:	681e      	ldr	r6, [r3, #0]
100118e2:	0004      	movs	r4, r0
100118e4:	000f      	movs	r7, r1
100118e6:	9200      	str	r2, [sp, #0]
100118e8:	2e00      	cmp	r6, #0
100118ea:	d005      	beq.n	100118f8 <setvbuf+0x20>
100118ec:	69b3      	ldr	r3, [r6, #24]
100118ee:	2b00      	cmp	r3, #0
100118f0:	d102      	bne.n	100118f8 <setvbuf+0x20>
100118f2:	0030      	movs	r0, r6
100118f4:	f000 fa62 	bl	10011dbc <__sinit>
100118f8:	4b4b      	ldr	r3, [pc, #300]	; (10011a28 <setvbuf+0x150>)
100118fa:	429c      	cmp	r4, r3
100118fc:	d101      	bne.n	10011902 <setvbuf+0x2a>
100118fe:	6874      	ldr	r4, [r6, #4]
10011900:	e008      	b.n	10011914 <setvbuf+0x3c>
10011902:	4b4a      	ldr	r3, [pc, #296]	; (10011a2c <setvbuf+0x154>)
10011904:	429c      	cmp	r4, r3
10011906:	d101      	bne.n	1001190c <setvbuf+0x34>
10011908:	68b4      	ldr	r4, [r6, #8]
1001190a:	e003      	b.n	10011914 <setvbuf+0x3c>
1001190c:	4b48      	ldr	r3, [pc, #288]	; (10011a30 <setvbuf+0x158>)
1001190e:	429c      	cmp	r4, r3
10011910:	d100      	bne.n	10011914 <setvbuf+0x3c>
10011912:	68f4      	ldr	r4, [r6, #12]
10011914:	9b00      	ldr	r3, [sp, #0]
10011916:	2b02      	cmp	r3, #2
10011918:	d005      	beq.n	10011926 <setvbuf+0x4e>
1001191a:	2b01      	cmp	r3, #1
1001191c:	d900      	bls.n	10011920 <setvbuf+0x48>
1001191e:	e07c      	b.n	10011a1a <setvbuf+0x142>
10011920:	2d00      	cmp	r5, #0
10011922:	da00      	bge.n	10011926 <setvbuf+0x4e>
10011924:	e079      	b.n	10011a1a <setvbuf+0x142>
10011926:	0021      	movs	r1, r4
10011928:	0030      	movs	r0, r6
1001192a:	f000 f9d9 	bl	10011ce0 <_fflush_r>
1001192e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011930:	2900      	cmp	r1, #0
10011932:	d008      	beq.n	10011946 <setvbuf+0x6e>
10011934:	0023      	movs	r3, r4
10011936:	3344      	adds	r3, #68	; 0x44
10011938:	4299      	cmp	r1, r3
1001193a:	d002      	beq.n	10011942 <setvbuf+0x6a>
1001193c:	0030      	movs	r0, r6
1001193e:	f7ff fe3d 	bl	100115bc <_free_r>
10011942:	2300      	movs	r3, #0
10011944:	6363      	str	r3, [r4, #52]	; 0x34
10011946:	2300      	movs	r3, #0
10011948:	61a3      	str	r3, [r4, #24]
1001194a:	6063      	str	r3, [r4, #4]
1001194c:	89a3      	ldrh	r3, [r4, #12]
1001194e:	061b      	lsls	r3, r3, #24
10011950:	d503      	bpl.n	1001195a <setvbuf+0x82>
10011952:	6921      	ldr	r1, [r4, #16]
10011954:	0030      	movs	r0, r6
10011956:	f7ff fe31 	bl	100115bc <_free_r>
1001195a:	89a2      	ldrh	r2, [r4, #12]
1001195c:	4b35      	ldr	r3, [pc, #212]	; (10011a34 <setvbuf+0x15c>)
1001195e:	4013      	ands	r3, r2
10011960:	81a3      	strh	r3, [r4, #12]
10011962:	9b00      	ldr	r3, [sp, #0]
10011964:	2b02      	cmp	r3, #2
10011966:	d021      	beq.n	100119ac <setvbuf+0xd4>
10011968:	ab03      	add	r3, sp, #12
1001196a:	aa02      	add	r2, sp, #8
1001196c:	0021      	movs	r1, r4
1001196e:	0030      	movs	r0, r6
10011970:	f000 fab8 	bl	10011ee4 <__swhatbuf_r>
10011974:	89a3      	ldrh	r3, [r4, #12]
10011976:	4318      	orrs	r0, r3
10011978:	81a0      	strh	r0, [r4, #12]
1001197a:	2d00      	cmp	r5, #0
1001197c:	d101      	bne.n	10011982 <setvbuf+0xaa>
1001197e:	9d02      	ldr	r5, [sp, #8]
10011980:	e001      	b.n	10011986 <setvbuf+0xae>
10011982:	2f00      	cmp	r7, #0
10011984:	d125      	bne.n	100119d2 <setvbuf+0xfa>
10011986:	0028      	movs	r0, r5
10011988:	f7ff fdee 	bl	10011568 <malloc>
1001198c:	9501      	str	r5, [sp, #4]
1001198e:	1e07      	subs	r7, r0, #0
10011990:	d11a      	bne.n	100119c8 <setvbuf+0xf0>
10011992:	9b02      	ldr	r3, [sp, #8]
10011994:	9301      	str	r3, [sp, #4]
10011996:	42ab      	cmp	r3, r5
10011998:	d102      	bne.n	100119a0 <setvbuf+0xc8>
1001199a:	2001      	movs	r0, #1
1001199c:	4240      	negs	r0, r0
1001199e:	e006      	b.n	100119ae <setvbuf+0xd6>
100119a0:	9801      	ldr	r0, [sp, #4]
100119a2:	f7ff fde1 	bl	10011568 <malloc>
100119a6:	1e07      	subs	r7, r0, #0
100119a8:	d10e      	bne.n	100119c8 <setvbuf+0xf0>
100119aa:	e7f6      	b.n	1001199a <setvbuf+0xc2>
100119ac:	2000      	movs	r0, #0
100119ae:	2202      	movs	r2, #2
100119b0:	89a3      	ldrh	r3, [r4, #12]
100119b2:	4313      	orrs	r3, r2
100119b4:	81a3      	strh	r3, [r4, #12]
100119b6:	2300      	movs	r3, #0
100119b8:	60a3      	str	r3, [r4, #8]
100119ba:	0023      	movs	r3, r4
100119bc:	3347      	adds	r3, #71	; 0x47
100119be:	6023      	str	r3, [r4, #0]
100119c0:	6123      	str	r3, [r4, #16]
100119c2:	2301      	movs	r3, #1
100119c4:	6163      	str	r3, [r4, #20]
100119c6:	e02a      	b.n	10011a1e <setvbuf+0x146>
100119c8:	2280      	movs	r2, #128	; 0x80
100119ca:	89a3      	ldrh	r3, [r4, #12]
100119cc:	9d01      	ldr	r5, [sp, #4]
100119ce:	4313      	orrs	r3, r2
100119d0:	81a3      	strh	r3, [r4, #12]
100119d2:	69b3      	ldr	r3, [r6, #24]
100119d4:	2b00      	cmp	r3, #0
100119d6:	d102      	bne.n	100119de <setvbuf+0x106>
100119d8:	0030      	movs	r0, r6
100119da:	f000 f9ef 	bl	10011dbc <__sinit>
100119de:	9b00      	ldr	r3, [sp, #0]
100119e0:	2b01      	cmp	r3, #1
100119e2:	d103      	bne.n	100119ec <setvbuf+0x114>
100119e4:	89a3      	ldrh	r3, [r4, #12]
100119e6:	9a00      	ldr	r2, [sp, #0]
100119e8:	431a      	orrs	r2, r3
100119ea:	81a2      	strh	r2, [r4, #12]
100119ec:	2308      	movs	r3, #8
100119ee:	89a2      	ldrh	r2, [r4, #12]
100119f0:	6027      	str	r7, [r4, #0]
100119f2:	4013      	ands	r3, r2
100119f4:	6127      	str	r7, [r4, #16]
100119f6:	6165      	str	r5, [r4, #20]
100119f8:	1e18      	subs	r0, r3, #0
100119fa:	d00c      	beq.n	10011a16 <setvbuf+0x13e>
100119fc:	2301      	movs	r3, #1
100119fe:	401a      	ands	r2, r3
10011a00:	2300      	movs	r3, #0
10011a02:	1e10      	subs	r0, r2, #0
10011a04:	4298      	cmp	r0, r3
10011a06:	d004      	beq.n	10011a12 <setvbuf+0x13a>
10011a08:	426d      	negs	r5, r5
10011a0a:	60a3      	str	r3, [r4, #8]
10011a0c:	61a5      	str	r5, [r4, #24]
10011a0e:	0018      	movs	r0, r3
10011a10:	e005      	b.n	10011a1e <setvbuf+0x146>
10011a12:	60a5      	str	r5, [r4, #8]
10011a14:	e003      	b.n	10011a1e <setvbuf+0x146>
10011a16:	60a3      	str	r3, [r4, #8]
10011a18:	e001      	b.n	10011a1e <setvbuf+0x146>
10011a1a:	2001      	movs	r0, #1
10011a1c:	4240      	negs	r0, r0
10011a1e:	b005      	add	sp, #20
10011a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a22:	46c0      	nop			; (mov r8, r8)
10011a24:	100138c0 	.word	0x100138c0
10011a28:	10013764 	.word	0x10013764
10011a2c:	10013784 	.word	0x10013784
10011a30:	100137a4 	.word	0x100137a4
10011a34:	fffff35c 	.word	0xfffff35c

10011a38 <__swbuf_r>:
10011a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a3a:	0005      	movs	r5, r0
10011a3c:	000f      	movs	r7, r1
10011a3e:	0014      	movs	r4, r2
10011a40:	2800      	cmp	r0, #0
10011a42:	d004      	beq.n	10011a4e <__swbuf_r+0x16>
10011a44:	6983      	ldr	r3, [r0, #24]
10011a46:	2b00      	cmp	r3, #0
10011a48:	d101      	bne.n	10011a4e <__swbuf_r+0x16>
10011a4a:	f000 f9b7 	bl	10011dbc <__sinit>
10011a4e:	4b23      	ldr	r3, [pc, #140]	; (10011adc <__swbuf_r+0xa4>)
10011a50:	429c      	cmp	r4, r3
10011a52:	d101      	bne.n	10011a58 <__swbuf_r+0x20>
10011a54:	686c      	ldr	r4, [r5, #4]
10011a56:	e008      	b.n	10011a6a <__swbuf_r+0x32>
10011a58:	4b21      	ldr	r3, [pc, #132]	; (10011ae0 <__swbuf_r+0xa8>)
10011a5a:	429c      	cmp	r4, r3
10011a5c:	d101      	bne.n	10011a62 <__swbuf_r+0x2a>
10011a5e:	68ac      	ldr	r4, [r5, #8]
10011a60:	e003      	b.n	10011a6a <__swbuf_r+0x32>
10011a62:	4b20      	ldr	r3, [pc, #128]	; (10011ae4 <__swbuf_r+0xac>)
10011a64:	429c      	cmp	r4, r3
10011a66:	d100      	bne.n	10011a6a <__swbuf_r+0x32>
10011a68:	68ec      	ldr	r4, [r5, #12]
10011a6a:	69a3      	ldr	r3, [r4, #24]
10011a6c:	60a3      	str	r3, [r4, #8]
10011a6e:	89a3      	ldrh	r3, [r4, #12]
10011a70:	071b      	lsls	r3, r3, #28
10011a72:	d50a      	bpl.n	10011a8a <__swbuf_r+0x52>
10011a74:	6923      	ldr	r3, [r4, #16]
10011a76:	2b00      	cmp	r3, #0
10011a78:	d007      	beq.n	10011a8a <__swbuf_r+0x52>
10011a7a:	6823      	ldr	r3, [r4, #0]
10011a7c:	6922      	ldr	r2, [r4, #16]
10011a7e:	b2fe      	uxtb	r6, r7
10011a80:	1a98      	subs	r0, r3, r2
10011a82:	6963      	ldr	r3, [r4, #20]
10011a84:	4298      	cmp	r0, r3
10011a86:	db0f      	blt.n	10011aa8 <__swbuf_r+0x70>
10011a88:	e008      	b.n	10011a9c <__swbuf_r+0x64>
10011a8a:	0021      	movs	r1, r4
10011a8c:	0028      	movs	r0, r5
10011a8e:	f000 f82b 	bl	10011ae8 <__swsetup_r>
10011a92:	2800      	cmp	r0, #0
10011a94:	d0f1      	beq.n	10011a7a <__swbuf_r+0x42>
10011a96:	2001      	movs	r0, #1
10011a98:	4240      	negs	r0, r0
10011a9a:	e01d      	b.n	10011ad8 <__swbuf_r+0xa0>
10011a9c:	0021      	movs	r1, r4
10011a9e:	0028      	movs	r0, r5
10011aa0:	f000 f91e 	bl	10011ce0 <_fflush_r>
10011aa4:	2800      	cmp	r0, #0
10011aa6:	d1f6      	bne.n	10011a96 <__swbuf_r+0x5e>
10011aa8:	68a3      	ldr	r3, [r4, #8]
10011aaa:	3001      	adds	r0, #1
10011aac:	3b01      	subs	r3, #1
10011aae:	60a3      	str	r3, [r4, #8]
10011ab0:	6823      	ldr	r3, [r4, #0]
10011ab2:	1c5a      	adds	r2, r3, #1
10011ab4:	6022      	str	r2, [r4, #0]
10011ab6:	701f      	strb	r7, [r3, #0]
10011ab8:	6963      	ldr	r3, [r4, #20]
10011aba:	4298      	cmp	r0, r3
10011abc:	d005      	beq.n	10011aca <__swbuf_r+0x92>
10011abe:	89a3      	ldrh	r3, [r4, #12]
10011ac0:	0030      	movs	r0, r6
10011ac2:	07db      	lsls	r3, r3, #31
10011ac4:	d508      	bpl.n	10011ad8 <__swbuf_r+0xa0>
10011ac6:	2e0a      	cmp	r6, #10
10011ac8:	d106      	bne.n	10011ad8 <__swbuf_r+0xa0>
10011aca:	0021      	movs	r1, r4
10011acc:	0028      	movs	r0, r5
10011ace:	f000 f907 	bl	10011ce0 <_fflush_r>
10011ad2:	2800      	cmp	r0, #0
10011ad4:	d1df      	bne.n	10011a96 <__swbuf_r+0x5e>
10011ad6:	0030      	movs	r0, r6
10011ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011ada:	46c0      	nop			; (mov r8, r8)
10011adc:	10013764 	.word	0x10013764
10011ae0:	10013784 	.word	0x10013784
10011ae4:	100137a4 	.word	0x100137a4

10011ae8 <__swsetup_r>:
10011ae8:	4b36      	ldr	r3, [pc, #216]	; (10011bc4 <__swsetup_r+0xdc>)
10011aea:	b570      	push	{r4, r5, r6, lr}
10011aec:	681d      	ldr	r5, [r3, #0]
10011aee:	0006      	movs	r6, r0
10011af0:	000c      	movs	r4, r1
10011af2:	2d00      	cmp	r5, #0
10011af4:	d005      	beq.n	10011b02 <__swsetup_r+0x1a>
10011af6:	69ab      	ldr	r3, [r5, #24]
10011af8:	2b00      	cmp	r3, #0
10011afa:	d102      	bne.n	10011b02 <__swsetup_r+0x1a>
10011afc:	0028      	movs	r0, r5
10011afe:	f000 f95d 	bl	10011dbc <__sinit>
10011b02:	4b31      	ldr	r3, [pc, #196]	; (10011bc8 <__swsetup_r+0xe0>)
10011b04:	429c      	cmp	r4, r3
10011b06:	d101      	bne.n	10011b0c <__swsetup_r+0x24>
10011b08:	686c      	ldr	r4, [r5, #4]
10011b0a:	e008      	b.n	10011b1e <__swsetup_r+0x36>
10011b0c:	4b2f      	ldr	r3, [pc, #188]	; (10011bcc <__swsetup_r+0xe4>)
10011b0e:	429c      	cmp	r4, r3
10011b10:	d101      	bne.n	10011b16 <__swsetup_r+0x2e>
10011b12:	68ac      	ldr	r4, [r5, #8]
10011b14:	e003      	b.n	10011b1e <__swsetup_r+0x36>
10011b16:	4b2e      	ldr	r3, [pc, #184]	; (10011bd0 <__swsetup_r+0xe8>)
10011b18:	429c      	cmp	r4, r3
10011b1a:	d100      	bne.n	10011b1e <__swsetup_r+0x36>
10011b1c:	68ec      	ldr	r4, [r5, #12]
10011b1e:	220c      	movs	r2, #12
10011b20:	5ea3      	ldrsh	r3, [r4, r2]
10011b22:	b29a      	uxth	r2, r3
10011b24:	0711      	lsls	r1, r2, #28
10011b26:	d423      	bmi.n	10011b70 <__swsetup_r+0x88>
10011b28:	06d1      	lsls	r1, r2, #27
10011b2a:	d407      	bmi.n	10011b3c <__swsetup_r+0x54>
10011b2c:	2209      	movs	r2, #9
10011b2e:	2001      	movs	r0, #1
10011b30:	6032      	str	r2, [r6, #0]
10011b32:	3237      	adds	r2, #55	; 0x37
10011b34:	4313      	orrs	r3, r2
10011b36:	81a3      	strh	r3, [r4, #12]
10011b38:	4240      	negs	r0, r0
10011b3a:	e042      	b.n	10011bc2 <__swsetup_r+0xda>
10011b3c:	0753      	lsls	r3, r2, #29
10011b3e:	d513      	bpl.n	10011b68 <__swsetup_r+0x80>
10011b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011b42:	2900      	cmp	r1, #0
10011b44:	d008      	beq.n	10011b58 <__swsetup_r+0x70>
10011b46:	0023      	movs	r3, r4
10011b48:	3344      	adds	r3, #68	; 0x44
10011b4a:	4299      	cmp	r1, r3
10011b4c:	d002      	beq.n	10011b54 <__swsetup_r+0x6c>
10011b4e:	0030      	movs	r0, r6
10011b50:	f7ff fd34 	bl	100115bc <_free_r>
10011b54:	2300      	movs	r3, #0
10011b56:	6363      	str	r3, [r4, #52]	; 0x34
10011b58:	2224      	movs	r2, #36	; 0x24
10011b5a:	89a3      	ldrh	r3, [r4, #12]
10011b5c:	4393      	bics	r3, r2
10011b5e:	81a3      	strh	r3, [r4, #12]
10011b60:	2300      	movs	r3, #0
10011b62:	6063      	str	r3, [r4, #4]
10011b64:	6923      	ldr	r3, [r4, #16]
10011b66:	6023      	str	r3, [r4, #0]
10011b68:	2208      	movs	r2, #8
10011b6a:	89a3      	ldrh	r3, [r4, #12]
10011b6c:	4313      	orrs	r3, r2
10011b6e:	81a3      	strh	r3, [r4, #12]
10011b70:	6923      	ldr	r3, [r4, #16]
10011b72:	2b00      	cmp	r3, #0
10011b74:	d10b      	bne.n	10011b8e <__swsetup_r+0xa6>
10011b76:	23a0      	movs	r3, #160	; 0xa0
10011b78:	89a2      	ldrh	r2, [r4, #12]
10011b7a:	009b      	lsls	r3, r3, #2
10011b7c:	4013      	ands	r3, r2
10011b7e:	2280      	movs	r2, #128	; 0x80
10011b80:	0092      	lsls	r2, r2, #2
10011b82:	4293      	cmp	r3, r2
10011b84:	d003      	beq.n	10011b8e <__swsetup_r+0xa6>
10011b86:	0021      	movs	r1, r4
10011b88:	0030      	movs	r0, r6
10011b8a:	f000 f9d1 	bl	10011f30 <__smakebuf_r>
10011b8e:	2301      	movs	r3, #1
10011b90:	89a2      	ldrh	r2, [r4, #12]
10011b92:	4013      	ands	r3, r2
10011b94:	d005      	beq.n	10011ba2 <__swsetup_r+0xba>
10011b96:	2300      	movs	r3, #0
10011b98:	60a3      	str	r3, [r4, #8]
10011b9a:	6963      	ldr	r3, [r4, #20]
10011b9c:	425b      	negs	r3, r3
10011b9e:	61a3      	str	r3, [r4, #24]
10011ba0:	e003      	b.n	10011baa <__swsetup_r+0xc2>
10011ba2:	0792      	lsls	r2, r2, #30
10011ba4:	d400      	bmi.n	10011ba8 <__swsetup_r+0xc0>
10011ba6:	6963      	ldr	r3, [r4, #20]
10011ba8:	60a3      	str	r3, [r4, #8]
10011baa:	2000      	movs	r0, #0
10011bac:	6923      	ldr	r3, [r4, #16]
10011bae:	4283      	cmp	r3, r0
10011bb0:	d107      	bne.n	10011bc2 <__swsetup_r+0xda>
10011bb2:	220c      	movs	r2, #12
10011bb4:	5ea3      	ldrsh	r3, [r4, r2]
10011bb6:	061a      	lsls	r2, r3, #24
10011bb8:	d503      	bpl.n	10011bc2 <__swsetup_r+0xda>
10011bba:	2240      	movs	r2, #64	; 0x40
10011bbc:	4313      	orrs	r3, r2
10011bbe:	81a3      	strh	r3, [r4, #12]
10011bc0:	3801      	subs	r0, #1
10011bc2:	bd70      	pop	{r4, r5, r6, pc}
10011bc4:	100138c0 	.word	0x100138c0
10011bc8:	10013764 	.word	0x10013764
10011bcc:	10013784 	.word	0x10013784
10011bd0:	100137a4 	.word	0x100137a4

10011bd4 <__sflush_r>:
10011bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011bd6:	898a      	ldrh	r2, [r1, #12]
10011bd8:	0005      	movs	r5, r0
10011bda:	000c      	movs	r4, r1
10011bdc:	0713      	lsls	r3, r2, #28
10011bde:	d45a      	bmi.n	10011c96 <__sflush_r+0xc2>
10011be0:	684b      	ldr	r3, [r1, #4]
10011be2:	2b00      	cmp	r3, #0
10011be4:	dc02      	bgt.n	10011bec <__sflush_r+0x18>
10011be6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011be8:	2b00      	cmp	r3, #0
10011bea:	dd19      	ble.n	10011c20 <__sflush_r+0x4c>
10011bec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011bee:	2f00      	cmp	r7, #0
10011bf0:	d016      	beq.n	10011c20 <__sflush_r+0x4c>
10011bf2:	2300      	movs	r3, #0
10011bf4:	682e      	ldr	r6, [r5, #0]
10011bf6:	602b      	str	r3, [r5, #0]
10011bf8:	2380      	movs	r3, #128	; 0x80
10011bfa:	015b      	lsls	r3, r3, #5
10011bfc:	401a      	ands	r2, r3
10011bfe:	d001      	beq.n	10011c04 <__sflush_r+0x30>
10011c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011c02:	e014      	b.n	10011c2e <__sflush_r+0x5a>
10011c04:	2301      	movs	r3, #1
10011c06:	6a21      	ldr	r1, [r4, #32]
10011c08:	0028      	movs	r0, r5
10011c0a:	47b8      	blx	r7
10011c0c:	1c43      	adds	r3, r0, #1
10011c0e:	d10e      	bne.n	10011c2e <__sflush_r+0x5a>
10011c10:	682b      	ldr	r3, [r5, #0]
10011c12:	2b00      	cmp	r3, #0
10011c14:	d00b      	beq.n	10011c2e <__sflush_r+0x5a>
10011c16:	2b1d      	cmp	r3, #29
10011c18:	d001      	beq.n	10011c1e <__sflush_r+0x4a>
10011c1a:	2b16      	cmp	r3, #22
10011c1c:	d102      	bne.n	10011c24 <__sflush_r+0x50>
10011c1e:	602e      	str	r6, [r5, #0]
10011c20:	2000      	movs	r0, #0
10011c22:	e05a      	b.n	10011cda <__sflush_r+0x106>
10011c24:	2240      	movs	r2, #64	; 0x40
10011c26:	89a3      	ldrh	r3, [r4, #12]
10011c28:	4313      	orrs	r3, r2
10011c2a:	81a3      	strh	r3, [r4, #12]
10011c2c:	e055      	b.n	10011cda <__sflush_r+0x106>
10011c2e:	89a3      	ldrh	r3, [r4, #12]
10011c30:	075b      	lsls	r3, r3, #29
10011c32:	d506      	bpl.n	10011c42 <__sflush_r+0x6e>
10011c34:	6863      	ldr	r3, [r4, #4]
10011c36:	1ac0      	subs	r0, r0, r3
10011c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011c3a:	2b00      	cmp	r3, #0
10011c3c:	d001      	beq.n	10011c42 <__sflush_r+0x6e>
10011c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011c40:	1ac0      	subs	r0, r0, r3
10011c42:	2300      	movs	r3, #0
10011c44:	0002      	movs	r2, r0
10011c46:	6a21      	ldr	r1, [r4, #32]
10011c48:	0028      	movs	r0, r5
10011c4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011c4c:	47b8      	blx	r7
10011c4e:	89a3      	ldrh	r3, [r4, #12]
10011c50:	1c42      	adds	r2, r0, #1
10011c52:	d106      	bne.n	10011c62 <__sflush_r+0x8e>
10011c54:	6829      	ldr	r1, [r5, #0]
10011c56:	291d      	cmp	r1, #29
10011c58:	d83a      	bhi.n	10011cd0 <__sflush_r+0xfc>
10011c5a:	4a20      	ldr	r2, [pc, #128]	; (10011cdc <__sflush_r+0x108>)
10011c5c:	40ca      	lsrs	r2, r1
10011c5e:	07d2      	lsls	r2, r2, #31
10011c60:	d536      	bpl.n	10011cd0 <__sflush_r+0xfc>
10011c62:	2200      	movs	r2, #0
10011c64:	6062      	str	r2, [r4, #4]
10011c66:	6922      	ldr	r2, [r4, #16]
10011c68:	6022      	str	r2, [r4, #0]
10011c6a:	04db      	lsls	r3, r3, #19
10011c6c:	d505      	bpl.n	10011c7a <__sflush_r+0xa6>
10011c6e:	1c43      	adds	r3, r0, #1
10011c70:	d102      	bne.n	10011c78 <__sflush_r+0xa4>
10011c72:	682b      	ldr	r3, [r5, #0]
10011c74:	2b00      	cmp	r3, #0
10011c76:	d100      	bne.n	10011c7a <__sflush_r+0xa6>
10011c78:	6560      	str	r0, [r4, #84]	; 0x54
10011c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011c7c:	602e      	str	r6, [r5, #0]
10011c7e:	2900      	cmp	r1, #0
10011c80:	d0ce      	beq.n	10011c20 <__sflush_r+0x4c>
10011c82:	0023      	movs	r3, r4
10011c84:	3344      	adds	r3, #68	; 0x44
10011c86:	4299      	cmp	r1, r3
10011c88:	d002      	beq.n	10011c90 <__sflush_r+0xbc>
10011c8a:	0028      	movs	r0, r5
10011c8c:	f7ff fc96 	bl	100115bc <_free_r>
10011c90:	2000      	movs	r0, #0
10011c92:	6360      	str	r0, [r4, #52]	; 0x34
10011c94:	e021      	b.n	10011cda <__sflush_r+0x106>
10011c96:	690f      	ldr	r7, [r1, #16]
10011c98:	2f00      	cmp	r7, #0
10011c9a:	d0c1      	beq.n	10011c20 <__sflush_r+0x4c>
10011c9c:	680b      	ldr	r3, [r1, #0]
10011c9e:	600f      	str	r7, [r1, #0]
10011ca0:	1bdb      	subs	r3, r3, r7
10011ca2:	9301      	str	r3, [sp, #4]
10011ca4:	2300      	movs	r3, #0
10011ca6:	0792      	lsls	r2, r2, #30
10011ca8:	d100      	bne.n	10011cac <__sflush_r+0xd8>
10011caa:	694b      	ldr	r3, [r1, #20]
10011cac:	60a3      	str	r3, [r4, #8]
10011cae:	e003      	b.n	10011cb8 <__sflush_r+0xe4>
10011cb0:	9b01      	ldr	r3, [sp, #4]
10011cb2:	183f      	adds	r7, r7, r0
10011cb4:	1a1b      	subs	r3, r3, r0
10011cb6:	9301      	str	r3, [sp, #4]
10011cb8:	9b01      	ldr	r3, [sp, #4]
10011cba:	2b00      	cmp	r3, #0
10011cbc:	ddb0      	ble.n	10011c20 <__sflush_r+0x4c>
10011cbe:	9b01      	ldr	r3, [sp, #4]
10011cc0:	003a      	movs	r2, r7
10011cc2:	6a21      	ldr	r1, [r4, #32]
10011cc4:	0028      	movs	r0, r5
10011cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011cc8:	47b0      	blx	r6
10011cca:	2800      	cmp	r0, #0
10011ccc:	dcf0      	bgt.n	10011cb0 <__sflush_r+0xdc>
10011cce:	89a3      	ldrh	r3, [r4, #12]
10011cd0:	2240      	movs	r2, #64	; 0x40
10011cd2:	2001      	movs	r0, #1
10011cd4:	4313      	orrs	r3, r2
10011cd6:	81a3      	strh	r3, [r4, #12]
10011cd8:	4240      	negs	r0, r0
10011cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011cdc:	20400001 	.word	0x20400001

10011ce0 <_fflush_r>:
10011ce0:	690b      	ldr	r3, [r1, #16]
10011ce2:	b570      	push	{r4, r5, r6, lr}
10011ce4:	0005      	movs	r5, r0
10011ce6:	000c      	movs	r4, r1
10011ce8:	2b00      	cmp	r3, #0
10011cea:	d101      	bne.n	10011cf0 <_fflush_r+0x10>
10011cec:	2000      	movs	r0, #0
10011cee:	e01c      	b.n	10011d2a <_fflush_r+0x4a>
10011cf0:	2800      	cmp	r0, #0
10011cf2:	d004      	beq.n	10011cfe <_fflush_r+0x1e>
10011cf4:	6983      	ldr	r3, [r0, #24]
10011cf6:	2b00      	cmp	r3, #0
10011cf8:	d101      	bne.n	10011cfe <_fflush_r+0x1e>
10011cfa:	f000 f85f 	bl	10011dbc <__sinit>
10011cfe:	4b0b      	ldr	r3, [pc, #44]	; (10011d2c <_fflush_r+0x4c>)
10011d00:	429c      	cmp	r4, r3
10011d02:	d101      	bne.n	10011d08 <_fflush_r+0x28>
10011d04:	686c      	ldr	r4, [r5, #4]
10011d06:	e008      	b.n	10011d1a <_fflush_r+0x3a>
10011d08:	4b09      	ldr	r3, [pc, #36]	; (10011d30 <_fflush_r+0x50>)
10011d0a:	429c      	cmp	r4, r3
10011d0c:	d101      	bne.n	10011d12 <_fflush_r+0x32>
10011d0e:	68ac      	ldr	r4, [r5, #8]
10011d10:	e003      	b.n	10011d1a <_fflush_r+0x3a>
10011d12:	4b08      	ldr	r3, [pc, #32]	; (10011d34 <_fflush_r+0x54>)
10011d14:	429c      	cmp	r4, r3
10011d16:	d100      	bne.n	10011d1a <_fflush_r+0x3a>
10011d18:	68ec      	ldr	r4, [r5, #12]
10011d1a:	220c      	movs	r2, #12
10011d1c:	5ea3      	ldrsh	r3, [r4, r2]
10011d1e:	2b00      	cmp	r3, #0
10011d20:	d0e4      	beq.n	10011cec <_fflush_r+0xc>
10011d22:	0021      	movs	r1, r4
10011d24:	0028      	movs	r0, r5
10011d26:	f7ff ff55 	bl	10011bd4 <__sflush_r>
10011d2a:	bd70      	pop	{r4, r5, r6, pc}
10011d2c:	10013764 	.word	0x10013764
10011d30:	10013784 	.word	0x10013784
10011d34:	100137a4 	.word	0x100137a4

10011d38 <_cleanup_r>:
10011d38:	b510      	push	{r4, lr}
10011d3a:	4902      	ldr	r1, [pc, #8]	; (10011d44 <_cleanup_r+0xc>)
10011d3c:	f000 f8b0 	bl	10011ea0 <_fwalk_reent>
10011d40:	bd10      	pop	{r4, pc}
10011d42:	46c0      	nop			; (mov r8, r8)
10011d44:	10011ce1 	.word	0x10011ce1

10011d48 <std.isra.0>:
10011d48:	2300      	movs	r3, #0
10011d4a:	b510      	push	{r4, lr}
10011d4c:	0004      	movs	r4, r0
10011d4e:	6003      	str	r3, [r0, #0]
10011d50:	6043      	str	r3, [r0, #4]
10011d52:	6083      	str	r3, [r0, #8]
10011d54:	8181      	strh	r1, [r0, #12]
10011d56:	6643      	str	r3, [r0, #100]	; 0x64
10011d58:	81c2      	strh	r2, [r0, #14]
10011d5a:	6103      	str	r3, [r0, #16]
10011d5c:	6143      	str	r3, [r0, #20]
10011d5e:	6183      	str	r3, [r0, #24]
10011d60:	0019      	movs	r1, r3
10011d62:	2208      	movs	r2, #8
10011d64:	305c      	adds	r0, #92	; 0x5c
10011d66:	f7ff fc21 	bl	100115ac <memset>
10011d6a:	4b05      	ldr	r3, [pc, #20]	; (10011d80 <std.isra.0+0x38>)
10011d6c:	6224      	str	r4, [r4, #32]
10011d6e:	6263      	str	r3, [r4, #36]	; 0x24
10011d70:	4b04      	ldr	r3, [pc, #16]	; (10011d84 <std.isra.0+0x3c>)
10011d72:	62a3      	str	r3, [r4, #40]	; 0x28
10011d74:	4b04      	ldr	r3, [pc, #16]	; (10011d88 <std.isra.0+0x40>)
10011d76:	62e3      	str	r3, [r4, #44]	; 0x2c
10011d78:	4b04      	ldr	r3, [pc, #16]	; (10011d8c <std.isra.0+0x44>)
10011d7a:	6323      	str	r3, [r4, #48]	; 0x30
10011d7c:	bd10      	pop	{r4, pc}
10011d7e:	46c0      	nop			; (mov r8, r8)
10011d80:	100125c1 	.word	0x100125c1
10011d84:	100125e9 	.word	0x100125e9
10011d88:	10012621 	.word	0x10012621
10011d8c:	1001264d 	.word	0x1001264d

10011d90 <__sfmoreglue>:
10011d90:	b570      	push	{r4, r5, r6, lr}
10011d92:	2568      	movs	r5, #104	; 0x68
10011d94:	1e4b      	subs	r3, r1, #1
10011d96:	435d      	muls	r5, r3
10011d98:	000e      	movs	r6, r1
10011d9a:	0029      	movs	r1, r5
10011d9c:	3174      	adds	r1, #116	; 0x74
10011d9e:	f7ff fc53 	bl	10011648 <_malloc_r>
10011da2:	1e04      	subs	r4, r0, #0
10011da4:	d008      	beq.n	10011db8 <__sfmoreglue+0x28>
10011da6:	2100      	movs	r1, #0
10011da8:	002a      	movs	r2, r5
10011daa:	6001      	str	r1, [r0, #0]
10011dac:	6046      	str	r6, [r0, #4]
10011dae:	300c      	adds	r0, #12
10011db0:	60a0      	str	r0, [r4, #8]
10011db2:	3268      	adds	r2, #104	; 0x68
10011db4:	f7ff fbfa 	bl	100115ac <memset>
10011db8:	0020      	movs	r0, r4
10011dba:	bd70      	pop	{r4, r5, r6, pc}

10011dbc <__sinit>:
10011dbc:	6983      	ldr	r3, [r0, #24]
10011dbe:	b513      	push	{r0, r1, r4, lr}
10011dc0:	0004      	movs	r4, r0
10011dc2:	2b00      	cmp	r3, #0
10011dc4:	d128      	bne.n	10011e18 <__sinit+0x5c>
10011dc6:	6483      	str	r3, [r0, #72]	; 0x48
10011dc8:	64c3      	str	r3, [r0, #76]	; 0x4c
10011dca:	6503      	str	r3, [r0, #80]	; 0x50
10011dcc:	4b13      	ldr	r3, [pc, #76]	; (10011e1c <__sinit+0x60>)
10011dce:	4a14      	ldr	r2, [pc, #80]	; (10011e20 <__sinit+0x64>)
10011dd0:	681b      	ldr	r3, [r3, #0]
10011dd2:	6282      	str	r2, [r0, #40]	; 0x28
10011dd4:	9301      	str	r3, [sp, #4]
10011dd6:	4298      	cmp	r0, r3
10011dd8:	d101      	bne.n	10011dde <__sinit+0x22>
10011dda:	2301      	movs	r3, #1
10011ddc:	6183      	str	r3, [r0, #24]
10011dde:	0020      	movs	r0, r4
10011de0:	f000 f820 	bl	10011e24 <__sfp>
10011de4:	6060      	str	r0, [r4, #4]
10011de6:	0020      	movs	r0, r4
10011de8:	f000 f81c 	bl	10011e24 <__sfp>
10011dec:	60a0      	str	r0, [r4, #8]
10011dee:	0020      	movs	r0, r4
10011df0:	f000 f818 	bl	10011e24 <__sfp>
10011df4:	2200      	movs	r2, #0
10011df6:	60e0      	str	r0, [r4, #12]
10011df8:	2104      	movs	r1, #4
10011dfa:	6860      	ldr	r0, [r4, #4]
10011dfc:	f7ff ffa4 	bl	10011d48 <std.isra.0>
10011e00:	2201      	movs	r2, #1
10011e02:	2109      	movs	r1, #9
10011e04:	68a0      	ldr	r0, [r4, #8]
10011e06:	f7ff ff9f 	bl	10011d48 <std.isra.0>
10011e0a:	2202      	movs	r2, #2
10011e0c:	2112      	movs	r1, #18
10011e0e:	68e0      	ldr	r0, [r4, #12]
10011e10:	f7ff ff9a 	bl	10011d48 <std.isra.0>
10011e14:	2301      	movs	r3, #1
10011e16:	61a3      	str	r3, [r4, #24]
10011e18:	bd13      	pop	{r0, r1, r4, pc}
10011e1a:	46c0      	nop			; (mov r8, r8)
10011e1c:	10013760 	.word	0x10013760
10011e20:	10011d39 	.word	0x10011d39

10011e24 <__sfp>:
10011e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011e26:	4b1d      	ldr	r3, [pc, #116]	; (10011e9c <__sfp+0x78>)
10011e28:	0006      	movs	r6, r0
10011e2a:	681d      	ldr	r5, [r3, #0]
10011e2c:	69ab      	ldr	r3, [r5, #24]
10011e2e:	2b00      	cmp	r3, #0
10011e30:	d102      	bne.n	10011e38 <__sfp+0x14>
10011e32:	0028      	movs	r0, r5
10011e34:	f7ff ffc2 	bl	10011dbc <__sinit>
10011e38:	3548      	adds	r5, #72	; 0x48
10011e3a:	68ac      	ldr	r4, [r5, #8]
10011e3c:	686b      	ldr	r3, [r5, #4]
10011e3e:	3b01      	subs	r3, #1
10011e40:	d405      	bmi.n	10011e4e <__sfp+0x2a>
10011e42:	220c      	movs	r2, #12
10011e44:	5ea7      	ldrsh	r7, [r4, r2]
10011e46:	2f00      	cmp	r7, #0
10011e48:	d010      	beq.n	10011e6c <__sfp+0x48>
10011e4a:	3468      	adds	r4, #104	; 0x68
10011e4c:	e7f7      	b.n	10011e3e <__sfp+0x1a>
10011e4e:	682b      	ldr	r3, [r5, #0]
10011e50:	2b00      	cmp	r3, #0
10011e52:	d001      	beq.n	10011e58 <__sfp+0x34>
10011e54:	682d      	ldr	r5, [r5, #0]
10011e56:	e7f0      	b.n	10011e3a <__sfp+0x16>
10011e58:	2104      	movs	r1, #4
10011e5a:	0030      	movs	r0, r6
10011e5c:	f7ff ff98 	bl	10011d90 <__sfmoreglue>
10011e60:	6028      	str	r0, [r5, #0]
10011e62:	2800      	cmp	r0, #0
10011e64:	d1f6      	bne.n	10011e54 <__sfp+0x30>
10011e66:	230c      	movs	r3, #12
10011e68:	6033      	str	r3, [r6, #0]
10011e6a:	e016      	b.n	10011e9a <__sfp+0x76>
10011e6c:	2301      	movs	r3, #1
10011e6e:	0020      	movs	r0, r4
10011e70:	425b      	negs	r3, r3
10011e72:	81e3      	strh	r3, [r4, #14]
10011e74:	3302      	adds	r3, #2
10011e76:	81a3      	strh	r3, [r4, #12]
10011e78:	6667      	str	r7, [r4, #100]	; 0x64
10011e7a:	6027      	str	r7, [r4, #0]
10011e7c:	60a7      	str	r7, [r4, #8]
10011e7e:	6067      	str	r7, [r4, #4]
10011e80:	6127      	str	r7, [r4, #16]
10011e82:	6167      	str	r7, [r4, #20]
10011e84:	61a7      	str	r7, [r4, #24]
10011e86:	305c      	adds	r0, #92	; 0x5c
10011e88:	2208      	movs	r2, #8
10011e8a:	0039      	movs	r1, r7
10011e8c:	f7ff fb8e 	bl	100115ac <memset>
10011e90:	0020      	movs	r0, r4
10011e92:	6367      	str	r7, [r4, #52]	; 0x34
10011e94:	63a7      	str	r7, [r4, #56]	; 0x38
10011e96:	64a7      	str	r7, [r4, #72]	; 0x48
10011e98:	64e7      	str	r7, [r4, #76]	; 0x4c
10011e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011e9c:	10013760 	.word	0x10013760

10011ea0 <_fwalk_reent>:
10011ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ea2:	0004      	movs	r4, r0
10011ea4:	0007      	movs	r7, r0
10011ea6:	2600      	movs	r6, #0
10011ea8:	9101      	str	r1, [sp, #4]
10011eaa:	3448      	adds	r4, #72	; 0x48
10011eac:	2c00      	cmp	r4, #0
10011eae:	d016      	beq.n	10011ede <_fwalk_reent+0x3e>
10011eb0:	6863      	ldr	r3, [r4, #4]
10011eb2:	68a5      	ldr	r5, [r4, #8]
10011eb4:	9300      	str	r3, [sp, #0]
10011eb6:	9b00      	ldr	r3, [sp, #0]
10011eb8:	3b01      	subs	r3, #1
10011eba:	9300      	str	r3, [sp, #0]
10011ebc:	d40d      	bmi.n	10011eda <_fwalk_reent+0x3a>
10011ebe:	89ab      	ldrh	r3, [r5, #12]
10011ec0:	2b01      	cmp	r3, #1
10011ec2:	d908      	bls.n	10011ed6 <_fwalk_reent+0x36>
10011ec4:	220e      	movs	r2, #14
10011ec6:	5eab      	ldrsh	r3, [r5, r2]
10011ec8:	3301      	adds	r3, #1
10011eca:	d004      	beq.n	10011ed6 <_fwalk_reent+0x36>
10011ecc:	0029      	movs	r1, r5
10011ece:	0038      	movs	r0, r7
10011ed0:	9b01      	ldr	r3, [sp, #4]
10011ed2:	4798      	blx	r3
10011ed4:	4306      	orrs	r6, r0
10011ed6:	3568      	adds	r5, #104	; 0x68
10011ed8:	e7ed      	b.n	10011eb6 <_fwalk_reent+0x16>
10011eda:	6824      	ldr	r4, [r4, #0]
10011edc:	e7e6      	b.n	10011eac <_fwalk_reent+0xc>
10011ede:	0030      	movs	r0, r6
10011ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011ee4 <__swhatbuf_r>:
10011ee4:	b570      	push	{r4, r5, r6, lr}
10011ee6:	000e      	movs	r6, r1
10011ee8:	001d      	movs	r5, r3
10011eea:	230e      	movs	r3, #14
10011eec:	5ec9      	ldrsh	r1, [r1, r3]
10011eee:	b090      	sub	sp, #64	; 0x40
10011ef0:	0014      	movs	r4, r2
10011ef2:	2900      	cmp	r1, #0
10011ef4:	da06      	bge.n	10011f04 <__swhatbuf_r+0x20>
10011ef6:	2300      	movs	r3, #0
10011ef8:	602b      	str	r3, [r5, #0]
10011efa:	89b3      	ldrh	r3, [r6, #12]
10011efc:	061b      	lsls	r3, r3, #24
10011efe:	d50f      	bpl.n	10011f20 <__swhatbuf_r+0x3c>
10011f00:	2340      	movs	r3, #64	; 0x40
10011f02:	e00f      	b.n	10011f24 <__swhatbuf_r+0x40>
10011f04:	aa01      	add	r2, sp, #4
10011f06:	f000 fbcd 	bl	100126a4 <_fstat_r>
10011f0a:	2800      	cmp	r0, #0
10011f0c:	dbf3      	blt.n	10011ef6 <__swhatbuf_r+0x12>
10011f0e:	23f0      	movs	r3, #240	; 0xf0
10011f10:	9a02      	ldr	r2, [sp, #8]
10011f12:	021b      	lsls	r3, r3, #8
10011f14:	4013      	ands	r3, r2
10011f16:	4a05      	ldr	r2, [pc, #20]	; (10011f2c <__swhatbuf_r+0x48>)
10011f18:	189b      	adds	r3, r3, r2
10011f1a:	425a      	negs	r2, r3
10011f1c:	4153      	adcs	r3, r2
10011f1e:	602b      	str	r3, [r5, #0]
10011f20:	2380      	movs	r3, #128	; 0x80
10011f22:	00db      	lsls	r3, r3, #3
10011f24:	2000      	movs	r0, #0
10011f26:	6023      	str	r3, [r4, #0]
10011f28:	b010      	add	sp, #64	; 0x40
10011f2a:	bd70      	pop	{r4, r5, r6, pc}
10011f2c:	ffffe000 	.word	0xffffe000

10011f30 <__smakebuf_r>:
10011f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011f32:	2602      	movs	r6, #2
10011f34:	898b      	ldrh	r3, [r1, #12]
10011f36:	0005      	movs	r5, r0
10011f38:	000c      	movs	r4, r1
10011f3a:	4233      	tst	r3, r6
10011f3c:	d110      	bne.n	10011f60 <__smakebuf_r+0x30>
10011f3e:	ab01      	add	r3, sp, #4
10011f40:	466a      	mov	r2, sp
10011f42:	f7ff ffcf 	bl	10011ee4 <__swhatbuf_r>
10011f46:	9900      	ldr	r1, [sp, #0]
10011f48:	0007      	movs	r7, r0
10011f4a:	0028      	movs	r0, r5
10011f4c:	f7ff fb7c 	bl	10011648 <_malloc_r>
10011f50:	2800      	cmp	r0, #0
10011f52:	d10c      	bne.n	10011f6e <__smakebuf_r+0x3e>
10011f54:	220c      	movs	r2, #12
10011f56:	5ea3      	ldrsh	r3, [r4, r2]
10011f58:	059a      	lsls	r2, r3, #22
10011f5a:	d423      	bmi.n	10011fa4 <__smakebuf_r+0x74>
10011f5c:	4333      	orrs	r3, r6
10011f5e:	81a3      	strh	r3, [r4, #12]
10011f60:	0023      	movs	r3, r4
10011f62:	3347      	adds	r3, #71	; 0x47
10011f64:	6023      	str	r3, [r4, #0]
10011f66:	6123      	str	r3, [r4, #16]
10011f68:	2301      	movs	r3, #1
10011f6a:	6163      	str	r3, [r4, #20]
10011f6c:	e01a      	b.n	10011fa4 <__smakebuf_r+0x74>
10011f6e:	2280      	movs	r2, #128	; 0x80
10011f70:	4b0d      	ldr	r3, [pc, #52]	; (10011fa8 <__smakebuf_r+0x78>)
10011f72:	62ab      	str	r3, [r5, #40]	; 0x28
10011f74:	89a3      	ldrh	r3, [r4, #12]
10011f76:	6020      	str	r0, [r4, #0]
10011f78:	4313      	orrs	r3, r2
10011f7a:	81a3      	strh	r3, [r4, #12]
10011f7c:	9b00      	ldr	r3, [sp, #0]
10011f7e:	6120      	str	r0, [r4, #16]
10011f80:	6163      	str	r3, [r4, #20]
10011f82:	9b01      	ldr	r3, [sp, #4]
10011f84:	2b00      	cmp	r3, #0
10011f86:	d00a      	beq.n	10011f9e <__smakebuf_r+0x6e>
10011f88:	230e      	movs	r3, #14
10011f8a:	5ee1      	ldrsh	r1, [r4, r3]
10011f8c:	0028      	movs	r0, r5
10011f8e:	f000 fb9b 	bl	100126c8 <_isatty_r>
10011f92:	2800      	cmp	r0, #0
10011f94:	d003      	beq.n	10011f9e <__smakebuf_r+0x6e>
10011f96:	2201      	movs	r2, #1
10011f98:	89a3      	ldrh	r3, [r4, #12]
10011f9a:	4313      	orrs	r3, r2
10011f9c:	81a3      	strh	r3, [r4, #12]
10011f9e:	89a3      	ldrh	r3, [r4, #12]
10011fa0:	431f      	orrs	r7, r3
10011fa2:	81a7      	strh	r7, [r4, #12]
10011fa4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011fa6:	46c0      	nop			; (mov r8, r8)
10011fa8:	10011d39 	.word	0x10011d39

10011fac <__sfputc_r>:
10011fac:	6893      	ldr	r3, [r2, #8]
10011fae:	b510      	push	{r4, lr}
10011fb0:	3b01      	subs	r3, #1
10011fb2:	6093      	str	r3, [r2, #8]
10011fb4:	2b00      	cmp	r3, #0
10011fb6:	da05      	bge.n	10011fc4 <__sfputc_r+0x18>
10011fb8:	6994      	ldr	r4, [r2, #24]
10011fba:	42a3      	cmp	r3, r4
10011fbc:	db08      	blt.n	10011fd0 <__sfputc_r+0x24>
10011fbe:	b2cb      	uxtb	r3, r1
10011fc0:	2b0a      	cmp	r3, #10
10011fc2:	d005      	beq.n	10011fd0 <__sfputc_r+0x24>
10011fc4:	6813      	ldr	r3, [r2, #0]
10011fc6:	1c58      	adds	r0, r3, #1
10011fc8:	6010      	str	r0, [r2, #0]
10011fca:	7019      	strb	r1, [r3, #0]
10011fcc:	b2c8      	uxtb	r0, r1
10011fce:	e001      	b.n	10011fd4 <__sfputc_r+0x28>
10011fd0:	f7ff fd32 	bl	10011a38 <__swbuf_r>
10011fd4:	bd10      	pop	{r4, pc}

10011fd6 <__sfputs_r>:
10011fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011fd8:	0006      	movs	r6, r0
10011fda:	000f      	movs	r7, r1
10011fdc:	0014      	movs	r4, r2
10011fde:	18d5      	adds	r5, r2, r3
10011fe0:	42ac      	cmp	r4, r5
10011fe2:	d008      	beq.n	10011ff6 <__sfputs_r+0x20>
10011fe4:	7821      	ldrb	r1, [r4, #0]
10011fe6:	003a      	movs	r2, r7
10011fe8:	0030      	movs	r0, r6
10011fea:	f7ff ffdf 	bl	10011fac <__sfputc_r>
10011fee:	3401      	adds	r4, #1
10011ff0:	1c43      	adds	r3, r0, #1
10011ff2:	d1f5      	bne.n	10011fe0 <__sfputs_r+0xa>
10011ff4:	e000      	b.n	10011ff8 <__sfputs_r+0x22>
10011ff6:	2000      	movs	r0, #0
10011ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011ffc <_vfiprintf_r>:
10011ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ffe:	b09f      	sub	sp, #124	; 0x7c
10012000:	0006      	movs	r6, r0
10012002:	000f      	movs	r7, r1
10012004:	9202      	str	r2, [sp, #8]
10012006:	9305      	str	r3, [sp, #20]
10012008:	2800      	cmp	r0, #0
1001200a:	d004      	beq.n	10012016 <_vfiprintf_r+0x1a>
1001200c:	6983      	ldr	r3, [r0, #24]
1001200e:	2b00      	cmp	r3, #0
10012010:	d101      	bne.n	10012016 <_vfiprintf_r+0x1a>
10012012:	f7ff fed3 	bl	10011dbc <__sinit>
10012016:	4b7f      	ldr	r3, [pc, #508]	; (10012214 <_vfiprintf_r+0x218>)
10012018:	429f      	cmp	r7, r3
1001201a:	d101      	bne.n	10012020 <_vfiprintf_r+0x24>
1001201c:	6877      	ldr	r7, [r6, #4]
1001201e:	e008      	b.n	10012032 <_vfiprintf_r+0x36>
10012020:	4b7d      	ldr	r3, [pc, #500]	; (10012218 <_vfiprintf_r+0x21c>)
10012022:	429f      	cmp	r7, r3
10012024:	d101      	bne.n	1001202a <_vfiprintf_r+0x2e>
10012026:	68b7      	ldr	r7, [r6, #8]
10012028:	e003      	b.n	10012032 <_vfiprintf_r+0x36>
1001202a:	4b7c      	ldr	r3, [pc, #496]	; (1001221c <_vfiprintf_r+0x220>)
1001202c:	429f      	cmp	r7, r3
1001202e:	d100      	bne.n	10012032 <_vfiprintf_r+0x36>
10012030:	68f7      	ldr	r7, [r6, #12]
10012032:	89bb      	ldrh	r3, [r7, #12]
10012034:	071b      	lsls	r3, r3, #28
10012036:	d50a      	bpl.n	1001204e <_vfiprintf_r+0x52>
10012038:	693b      	ldr	r3, [r7, #16]
1001203a:	2b00      	cmp	r3, #0
1001203c:	d007      	beq.n	1001204e <_vfiprintf_r+0x52>
1001203e:	2300      	movs	r3, #0
10012040:	ad06      	add	r5, sp, #24
10012042:	616b      	str	r3, [r5, #20]
10012044:	3320      	adds	r3, #32
10012046:	766b      	strb	r3, [r5, #25]
10012048:	3310      	adds	r3, #16
1001204a:	76ab      	strb	r3, [r5, #26]
1001204c:	e03d      	b.n	100120ca <_vfiprintf_r+0xce>
1001204e:	0039      	movs	r1, r7
10012050:	0030      	movs	r0, r6
10012052:	f7ff fd49 	bl	10011ae8 <__swsetup_r>
10012056:	2800      	cmp	r0, #0
10012058:	d0f1      	beq.n	1001203e <_vfiprintf_r+0x42>
1001205a:	2001      	movs	r0, #1
1001205c:	4240      	negs	r0, r0
1001205e:	e0d6      	b.n	1001220e <_vfiprintf_r+0x212>
10012060:	9a05      	ldr	r2, [sp, #20]
10012062:	1d11      	adds	r1, r2, #4
10012064:	6812      	ldr	r2, [r2, #0]
10012066:	9105      	str	r1, [sp, #20]
10012068:	2a00      	cmp	r2, #0
1001206a:	da00      	bge.n	1001206e <_vfiprintf_r+0x72>
1001206c:	e07f      	b.n	1001216e <_vfiprintf_r+0x172>
1001206e:	9209      	str	r2, [sp, #36]	; 0x24
10012070:	3401      	adds	r4, #1
10012072:	7823      	ldrb	r3, [r4, #0]
10012074:	2b2e      	cmp	r3, #46	; 0x2e
10012076:	d100      	bne.n	1001207a <_vfiprintf_r+0x7e>
10012078:	e08d      	b.n	10012196 <_vfiprintf_r+0x19a>
1001207a:	7821      	ldrb	r1, [r4, #0]
1001207c:	2203      	movs	r2, #3
1001207e:	4868      	ldr	r0, [pc, #416]	; (10012220 <_vfiprintf_r+0x224>)
10012080:	f000 fb48 	bl	10012714 <memchr>
10012084:	2800      	cmp	r0, #0
10012086:	d007      	beq.n	10012098 <_vfiprintf_r+0x9c>
10012088:	4b65      	ldr	r3, [pc, #404]	; (10012220 <_vfiprintf_r+0x224>)
1001208a:	682a      	ldr	r2, [r5, #0]
1001208c:	1ac0      	subs	r0, r0, r3
1001208e:	2340      	movs	r3, #64	; 0x40
10012090:	4083      	lsls	r3, r0
10012092:	4313      	orrs	r3, r2
10012094:	602b      	str	r3, [r5, #0]
10012096:	3401      	adds	r4, #1
10012098:	7821      	ldrb	r1, [r4, #0]
1001209a:	1c63      	adds	r3, r4, #1
1001209c:	2206      	movs	r2, #6
1001209e:	4861      	ldr	r0, [pc, #388]	; (10012224 <_vfiprintf_r+0x228>)
100120a0:	9302      	str	r3, [sp, #8]
100120a2:	7629      	strb	r1, [r5, #24]
100120a4:	f000 fb36 	bl	10012714 <memchr>
100120a8:	2800      	cmp	r0, #0
100120aa:	d100      	bne.n	100120ae <_vfiprintf_r+0xb2>
100120ac:	e09d      	b.n	100121ea <_vfiprintf_r+0x1ee>
100120ae:	4b5e      	ldr	r3, [pc, #376]	; (10012228 <_vfiprintf_r+0x22c>)
100120b0:	2b00      	cmp	r3, #0
100120b2:	d000      	beq.n	100120b6 <_vfiprintf_r+0xba>
100120b4:	e090      	b.n	100121d8 <_vfiprintf_r+0x1dc>
100120b6:	2207      	movs	r2, #7
100120b8:	9b05      	ldr	r3, [sp, #20]
100120ba:	3307      	adds	r3, #7
100120bc:	4393      	bics	r3, r2
100120be:	3308      	adds	r3, #8
100120c0:	9305      	str	r3, [sp, #20]
100120c2:	696b      	ldr	r3, [r5, #20]
100120c4:	9a03      	ldr	r2, [sp, #12]
100120c6:	189b      	adds	r3, r3, r2
100120c8:	616b      	str	r3, [r5, #20]
100120ca:	9c02      	ldr	r4, [sp, #8]
100120cc:	7823      	ldrb	r3, [r4, #0]
100120ce:	2b00      	cmp	r3, #0
100120d0:	d104      	bne.n	100120dc <_vfiprintf_r+0xe0>
100120d2:	9b02      	ldr	r3, [sp, #8]
100120d4:	1ae3      	subs	r3, r4, r3
100120d6:	9304      	str	r3, [sp, #16]
100120d8:	d012      	beq.n	10012100 <_vfiprintf_r+0x104>
100120da:	e003      	b.n	100120e4 <_vfiprintf_r+0xe8>
100120dc:	2b25      	cmp	r3, #37	; 0x25
100120de:	d0f8      	beq.n	100120d2 <_vfiprintf_r+0xd6>
100120e0:	3401      	adds	r4, #1
100120e2:	e7f3      	b.n	100120cc <_vfiprintf_r+0xd0>
100120e4:	9b04      	ldr	r3, [sp, #16]
100120e6:	9a02      	ldr	r2, [sp, #8]
100120e8:	0039      	movs	r1, r7
100120ea:	0030      	movs	r0, r6
100120ec:	f7ff ff73 	bl	10011fd6 <__sfputs_r>
100120f0:	1c43      	adds	r3, r0, #1
100120f2:	d100      	bne.n	100120f6 <_vfiprintf_r+0xfa>
100120f4:	e086      	b.n	10012204 <_vfiprintf_r+0x208>
100120f6:	696a      	ldr	r2, [r5, #20]
100120f8:	9b04      	ldr	r3, [sp, #16]
100120fa:	4694      	mov	ip, r2
100120fc:	4463      	add	r3, ip
100120fe:	616b      	str	r3, [r5, #20]
10012100:	7823      	ldrb	r3, [r4, #0]
10012102:	2b00      	cmp	r3, #0
10012104:	d07e      	beq.n	10012204 <_vfiprintf_r+0x208>
10012106:	2201      	movs	r2, #1
10012108:	2300      	movs	r3, #0
1001210a:	4252      	negs	r2, r2
1001210c:	606a      	str	r2, [r5, #4]
1001210e:	a902      	add	r1, sp, #8
10012110:	3254      	adds	r2, #84	; 0x54
10012112:	1852      	adds	r2, r2, r1
10012114:	3401      	adds	r4, #1
10012116:	602b      	str	r3, [r5, #0]
10012118:	60eb      	str	r3, [r5, #12]
1001211a:	60ab      	str	r3, [r5, #8]
1001211c:	7013      	strb	r3, [r2, #0]
1001211e:	65ab      	str	r3, [r5, #88]	; 0x58
10012120:	7821      	ldrb	r1, [r4, #0]
10012122:	2205      	movs	r2, #5
10012124:	4841      	ldr	r0, [pc, #260]	; (1001222c <_vfiprintf_r+0x230>)
10012126:	f000 faf5 	bl	10012714 <memchr>
1001212a:	2800      	cmp	r0, #0
1001212c:	d008      	beq.n	10012140 <_vfiprintf_r+0x144>
1001212e:	4b3f      	ldr	r3, [pc, #252]	; (1001222c <_vfiprintf_r+0x230>)
10012130:	682a      	ldr	r2, [r5, #0]
10012132:	1ac0      	subs	r0, r0, r3
10012134:	2301      	movs	r3, #1
10012136:	4083      	lsls	r3, r0
10012138:	4313      	orrs	r3, r2
1001213a:	602b      	str	r3, [r5, #0]
1001213c:	3401      	adds	r4, #1
1001213e:	e7ef      	b.n	10012120 <_vfiprintf_r+0x124>
10012140:	682b      	ldr	r3, [r5, #0]
10012142:	06da      	lsls	r2, r3, #27
10012144:	d504      	bpl.n	10012150 <_vfiprintf_r+0x154>
10012146:	2253      	movs	r2, #83	; 0x53
10012148:	2120      	movs	r1, #32
1001214a:	a802      	add	r0, sp, #8
1001214c:	1812      	adds	r2, r2, r0
1001214e:	7011      	strb	r1, [r2, #0]
10012150:	071a      	lsls	r2, r3, #28
10012152:	d504      	bpl.n	1001215e <_vfiprintf_r+0x162>
10012154:	2253      	movs	r2, #83	; 0x53
10012156:	212b      	movs	r1, #43	; 0x2b
10012158:	a802      	add	r0, sp, #8
1001215a:	1812      	adds	r2, r2, r0
1001215c:	7011      	strb	r1, [r2, #0]
1001215e:	7822      	ldrb	r2, [r4, #0]
10012160:	2a2a      	cmp	r2, #42	; 0x2a
10012162:	d100      	bne.n	10012166 <_vfiprintf_r+0x16a>
10012164:	e77c      	b.n	10012060 <_vfiprintf_r+0x64>
10012166:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012168:	2000      	movs	r0, #0
1001216a:	210a      	movs	r1, #10
1001216c:	e005      	b.n	1001217a <_vfiprintf_r+0x17e>
1001216e:	4252      	negs	r2, r2
10012170:	60ea      	str	r2, [r5, #12]
10012172:	2202      	movs	r2, #2
10012174:	4313      	orrs	r3, r2
10012176:	602b      	str	r3, [r5, #0]
10012178:	e77a      	b.n	10012070 <_vfiprintf_r+0x74>
1001217a:	7822      	ldrb	r2, [r4, #0]
1001217c:	3a30      	subs	r2, #48	; 0x30
1001217e:	2a09      	cmp	r2, #9
10012180:	d804      	bhi.n	1001218c <_vfiprintf_r+0x190>
10012182:	434b      	muls	r3, r1
10012184:	3401      	adds	r4, #1
10012186:	189b      	adds	r3, r3, r2
10012188:	2001      	movs	r0, #1
1001218a:	e7f6      	b.n	1001217a <_vfiprintf_r+0x17e>
1001218c:	2800      	cmp	r0, #0
1001218e:	d100      	bne.n	10012192 <_vfiprintf_r+0x196>
10012190:	e76f      	b.n	10012072 <_vfiprintf_r+0x76>
10012192:	9309      	str	r3, [sp, #36]	; 0x24
10012194:	e76d      	b.n	10012072 <_vfiprintf_r+0x76>
10012196:	7863      	ldrb	r3, [r4, #1]
10012198:	2b2a      	cmp	r3, #42	; 0x2a
1001219a:	d10a      	bne.n	100121b2 <_vfiprintf_r+0x1b6>
1001219c:	9b05      	ldr	r3, [sp, #20]
1001219e:	3402      	adds	r4, #2
100121a0:	1d1a      	adds	r2, r3, #4
100121a2:	681b      	ldr	r3, [r3, #0]
100121a4:	9205      	str	r2, [sp, #20]
100121a6:	2b00      	cmp	r3, #0
100121a8:	da01      	bge.n	100121ae <_vfiprintf_r+0x1b2>
100121aa:	2301      	movs	r3, #1
100121ac:	425b      	negs	r3, r3
100121ae:	9307      	str	r3, [sp, #28]
100121b0:	e763      	b.n	1001207a <_vfiprintf_r+0x7e>
100121b2:	2300      	movs	r3, #0
100121b4:	200a      	movs	r0, #10
100121b6:	001a      	movs	r2, r3
100121b8:	3401      	adds	r4, #1
100121ba:	606b      	str	r3, [r5, #4]
100121bc:	7821      	ldrb	r1, [r4, #0]
100121be:	3930      	subs	r1, #48	; 0x30
100121c0:	2909      	cmp	r1, #9
100121c2:	d804      	bhi.n	100121ce <_vfiprintf_r+0x1d2>
100121c4:	4342      	muls	r2, r0
100121c6:	3401      	adds	r4, #1
100121c8:	1852      	adds	r2, r2, r1
100121ca:	2301      	movs	r3, #1
100121cc:	e7f6      	b.n	100121bc <_vfiprintf_r+0x1c0>
100121ce:	2b00      	cmp	r3, #0
100121d0:	d100      	bne.n	100121d4 <_vfiprintf_r+0x1d8>
100121d2:	e752      	b.n	1001207a <_vfiprintf_r+0x7e>
100121d4:	9207      	str	r2, [sp, #28]
100121d6:	e750      	b.n	1001207a <_vfiprintf_r+0x7e>
100121d8:	ab05      	add	r3, sp, #20
100121da:	9300      	str	r3, [sp, #0]
100121dc:	003a      	movs	r2, r7
100121de:	4b14      	ldr	r3, [pc, #80]	; (10012230 <_vfiprintf_r+0x234>)
100121e0:	0029      	movs	r1, r5
100121e2:	0030      	movs	r0, r6
100121e4:	e000      	b.n	100121e8 <_vfiprintf_r+0x1ec>
100121e6:	bf00      	nop
100121e8:	e007      	b.n	100121fa <_vfiprintf_r+0x1fe>
100121ea:	ab05      	add	r3, sp, #20
100121ec:	9300      	str	r3, [sp, #0]
100121ee:	003a      	movs	r2, r7
100121f0:	4b0f      	ldr	r3, [pc, #60]	; (10012230 <_vfiprintf_r+0x234>)
100121f2:	0029      	movs	r1, r5
100121f4:	0030      	movs	r0, r6
100121f6:	f000 f88b 	bl	10012310 <_printf_i>
100121fa:	9003      	str	r0, [sp, #12]
100121fc:	9b03      	ldr	r3, [sp, #12]
100121fe:	3301      	adds	r3, #1
10012200:	d000      	beq.n	10012204 <_vfiprintf_r+0x208>
10012202:	e75e      	b.n	100120c2 <_vfiprintf_r+0xc6>
10012204:	89bb      	ldrh	r3, [r7, #12]
10012206:	065b      	lsls	r3, r3, #25
10012208:	d500      	bpl.n	1001220c <_vfiprintf_r+0x210>
1001220a:	e726      	b.n	1001205a <_vfiprintf_r+0x5e>
1001220c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001220e:	b01f      	add	sp, #124	; 0x7c
10012210:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012212:	46c0      	nop			; (mov r8, r8)
10012214:	10013764 	.word	0x10013764
10012218:	10013784 	.word	0x10013784
1001221c:	100137a4 	.word	0x100137a4
10012220:	100137ca 	.word	0x100137ca
10012224:	100137ce 	.word	0x100137ce
10012228:	00000000 	.word	0x00000000
1001222c:	100137c4 	.word	0x100137c4
10012230:	10011fd7 	.word	0x10011fd7

10012234 <_printf_common>:
10012234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012236:	0017      	movs	r7, r2
10012238:	9301      	str	r3, [sp, #4]
1001223a:	688a      	ldr	r2, [r1, #8]
1001223c:	690b      	ldr	r3, [r1, #16]
1001223e:	9000      	str	r0, [sp, #0]
10012240:	000c      	movs	r4, r1
10012242:	4293      	cmp	r3, r2
10012244:	da00      	bge.n	10012248 <_printf_common+0x14>
10012246:	0013      	movs	r3, r2
10012248:	0022      	movs	r2, r4
1001224a:	603b      	str	r3, [r7, #0]
1001224c:	3243      	adds	r2, #67	; 0x43
1001224e:	7812      	ldrb	r2, [r2, #0]
10012250:	2a00      	cmp	r2, #0
10012252:	d001      	beq.n	10012258 <_printf_common+0x24>
10012254:	3301      	adds	r3, #1
10012256:	603b      	str	r3, [r7, #0]
10012258:	6823      	ldr	r3, [r4, #0]
1001225a:	069b      	lsls	r3, r3, #26
1001225c:	d502      	bpl.n	10012264 <_printf_common+0x30>
1001225e:	683b      	ldr	r3, [r7, #0]
10012260:	3302      	adds	r3, #2
10012262:	603b      	str	r3, [r7, #0]
10012264:	2506      	movs	r5, #6
10012266:	6823      	ldr	r3, [r4, #0]
10012268:	401d      	ands	r5, r3
1001226a:	d01e      	beq.n	100122aa <_printf_common+0x76>
1001226c:	0023      	movs	r3, r4
1001226e:	3343      	adds	r3, #67	; 0x43
10012270:	781b      	ldrb	r3, [r3, #0]
10012272:	1e5a      	subs	r2, r3, #1
10012274:	4193      	sbcs	r3, r2
10012276:	6822      	ldr	r2, [r4, #0]
10012278:	0692      	lsls	r2, r2, #26
1001227a:	d51c      	bpl.n	100122b6 <_printf_common+0x82>
1001227c:	2030      	movs	r0, #48	; 0x30
1001227e:	18e1      	adds	r1, r4, r3
10012280:	3143      	adds	r1, #67	; 0x43
10012282:	7008      	strb	r0, [r1, #0]
10012284:	0021      	movs	r1, r4
10012286:	1c5a      	adds	r2, r3, #1
10012288:	3145      	adds	r1, #69	; 0x45
1001228a:	7809      	ldrb	r1, [r1, #0]
1001228c:	18a2      	adds	r2, r4, r2
1001228e:	3243      	adds	r2, #67	; 0x43
10012290:	3302      	adds	r3, #2
10012292:	7011      	strb	r1, [r2, #0]
10012294:	e00f      	b.n	100122b6 <_printf_common+0x82>
10012296:	0022      	movs	r2, r4
10012298:	2301      	movs	r3, #1
1001229a:	3219      	adds	r2, #25
1001229c:	9901      	ldr	r1, [sp, #4]
1001229e:	9800      	ldr	r0, [sp, #0]
100122a0:	9e08      	ldr	r6, [sp, #32]
100122a2:	47b0      	blx	r6
100122a4:	1c43      	adds	r3, r0, #1
100122a6:	d00e      	beq.n	100122c6 <_printf_common+0x92>
100122a8:	3501      	adds	r5, #1
100122aa:	68e3      	ldr	r3, [r4, #12]
100122ac:	683a      	ldr	r2, [r7, #0]
100122ae:	1a9b      	subs	r3, r3, r2
100122b0:	429d      	cmp	r5, r3
100122b2:	dbf0      	blt.n	10012296 <_printf_common+0x62>
100122b4:	e7da      	b.n	1001226c <_printf_common+0x38>
100122b6:	0022      	movs	r2, r4
100122b8:	9901      	ldr	r1, [sp, #4]
100122ba:	3243      	adds	r2, #67	; 0x43
100122bc:	9800      	ldr	r0, [sp, #0]
100122be:	9d08      	ldr	r5, [sp, #32]
100122c0:	47a8      	blx	r5
100122c2:	1c43      	adds	r3, r0, #1
100122c4:	d102      	bne.n	100122cc <_printf_common+0x98>
100122c6:	2001      	movs	r0, #1
100122c8:	4240      	negs	r0, r0
100122ca:	e020      	b.n	1001230e <_printf_common+0xda>
100122cc:	2306      	movs	r3, #6
100122ce:	6820      	ldr	r0, [r4, #0]
100122d0:	68e1      	ldr	r1, [r4, #12]
100122d2:	683a      	ldr	r2, [r7, #0]
100122d4:	4003      	ands	r3, r0
100122d6:	2500      	movs	r5, #0
100122d8:	2b04      	cmp	r3, #4
100122da:	d103      	bne.n	100122e4 <_printf_common+0xb0>
100122dc:	1a8d      	subs	r5, r1, r2
100122de:	43eb      	mvns	r3, r5
100122e0:	17db      	asrs	r3, r3, #31
100122e2:	401d      	ands	r5, r3
100122e4:	68a3      	ldr	r3, [r4, #8]
100122e6:	6922      	ldr	r2, [r4, #16]
100122e8:	4293      	cmp	r3, r2
100122ea:	dd01      	ble.n	100122f0 <_printf_common+0xbc>
100122ec:	1a9b      	subs	r3, r3, r2
100122ee:	18ed      	adds	r5, r5, r3
100122f0:	2700      	movs	r7, #0
100122f2:	42bd      	cmp	r5, r7
100122f4:	d00a      	beq.n	1001230c <_printf_common+0xd8>
100122f6:	0022      	movs	r2, r4
100122f8:	2301      	movs	r3, #1
100122fa:	321a      	adds	r2, #26
100122fc:	9901      	ldr	r1, [sp, #4]
100122fe:	9800      	ldr	r0, [sp, #0]
10012300:	9e08      	ldr	r6, [sp, #32]
10012302:	47b0      	blx	r6
10012304:	1c43      	adds	r3, r0, #1
10012306:	d0de      	beq.n	100122c6 <_printf_common+0x92>
10012308:	3701      	adds	r7, #1
1001230a:	e7f2      	b.n	100122f2 <_printf_common+0xbe>
1001230c:	2000      	movs	r0, #0
1001230e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012310 <_printf_i>:
10012310:	b5f0      	push	{r4, r5, r6, r7, lr}
10012312:	b08b      	sub	sp, #44	; 0x2c
10012314:	9206      	str	r2, [sp, #24]
10012316:	000a      	movs	r2, r1
10012318:	3243      	adds	r2, #67	; 0x43
1001231a:	9307      	str	r3, [sp, #28]
1001231c:	9005      	str	r0, [sp, #20]
1001231e:	9204      	str	r2, [sp, #16]
10012320:	7e0a      	ldrb	r2, [r1, #24]
10012322:	000c      	movs	r4, r1
10012324:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012326:	2a6e      	cmp	r2, #110	; 0x6e
10012328:	d100      	bne.n	1001232c <_printf_i+0x1c>
1001232a:	e0ab      	b.n	10012484 <_printf_i+0x174>
1001232c:	d811      	bhi.n	10012352 <_printf_i+0x42>
1001232e:	2a63      	cmp	r2, #99	; 0x63
10012330:	d022      	beq.n	10012378 <_printf_i+0x68>
10012332:	d809      	bhi.n	10012348 <_printf_i+0x38>
10012334:	2a00      	cmp	r2, #0
10012336:	d100      	bne.n	1001233a <_printf_i+0x2a>
10012338:	e0b5      	b.n	100124a6 <_printf_i+0x196>
1001233a:	2a58      	cmp	r2, #88	; 0x58
1001233c:	d000      	beq.n	10012340 <_printf_i+0x30>
1001233e:	e0c5      	b.n	100124cc <_printf_i+0x1bc>
10012340:	3145      	adds	r1, #69	; 0x45
10012342:	700a      	strb	r2, [r1, #0]
10012344:	4a81      	ldr	r2, [pc, #516]	; (1001254c <_printf_i+0x23c>)
10012346:	e04f      	b.n	100123e8 <_printf_i+0xd8>
10012348:	2a64      	cmp	r2, #100	; 0x64
1001234a:	d01d      	beq.n	10012388 <_printf_i+0x78>
1001234c:	2a69      	cmp	r2, #105	; 0x69
1001234e:	d01b      	beq.n	10012388 <_printf_i+0x78>
10012350:	e0bc      	b.n	100124cc <_printf_i+0x1bc>
10012352:	2a73      	cmp	r2, #115	; 0x73
10012354:	d100      	bne.n	10012358 <_printf_i+0x48>
10012356:	e0aa      	b.n	100124ae <_printf_i+0x19e>
10012358:	d809      	bhi.n	1001236e <_printf_i+0x5e>
1001235a:	2a6f      	cmp	r2, #111	; 0x6f
1001235c:	d029      	beq.n	100123b2 <_printf_i+0xa2>
1001235e:	2a70      	cmp	r2, #112	; 0x70
10012360:	d000      	beq.n	10012364 <_printf_i+0x54>
10012362:	e0b3      	b.n	100124cc <_printf_i+0x1bc>
10012364:	2220      	movs	r2, #32
10012366:	6809      	ldr	r1, [r1, #0]
10012368:	430a      	orrs	r2, r1
1001236a:	6022      	str	r2, [r4, #0]
1001236c:	e037      	b.n	100123de <_printf_i+0xce>
1001236e:	2a75      	cmp	r2, #117	; 0x75
10012370:	d01f      	beq.n	100123b2 <_printf_i+0xa2>
10012372:	2a78      	cmp	r2, #120	; 0x78
10012374:	d033      	beq.n	100123de <_printf_i+0xce>
10012376:	e0a9      	b.n	100124cc <_printf_i+0x1bc>
10012378:	000e      	movs	r6, r1
1001237a:	681a      	ldr	r2, [r3, #0]
1001237c:	3642      	adds	r6, #66	; 0x42
1001237e:	1d11      	adds	r1, r2, #4
10012380:	6019      	str	r1, [r3, #0]
10012382:	6813      	ldr	r3, [r2, #0]
10012384:	7033      	strb	r3, [r6, #0]
10012386:	e0a4      	b.n	100124d2 <_printf_i+0x1c2>
10012388:	6821      	ldr	r1, [r4, #0]
1001238a:	681a      	ldr	r2, [r3, #0]
1001238c:	0608      	lsls	r0, r1, #24
1001238e:	d406      	bmi.n	1001239e <_printf_i+0x8e>
10012390:	0649      	lsls	r1, r1, #25
10012392:	d504      	bpl.n	1001239e <_printf_i+0x8e>
10012394:	1d11      	adds	r1, r2, #4
10012396:	6019      	str	r1, [r3, #0]
10012398:	2300      	movs	r3, #0
1001239a:	5ed5      	ldrsh	r5, [r2, r3]
1001239c:	e002      	b.n	100123a4 <_printf_i+0x94>
1001239e:	1d11      	adds	r1, r2, #4
100123a0:	6019      	str	r1, [r3, #0]
100123a2:	6815      	ldr	r5, [r2, #0]
100123a4:	2d00      	cmp	r5, #0
100123a6:	da3b      	bge.n	10012420 <_printf_i+0x110>
100123a8:	232d      	movs	r3, #45	; 0x2d
100123aa:	9a04      	ldr	r2, [sp, #16]
100123ac:	426d      	negs	r5, r5
100123ae:	7013      	strb	r3, [r2, #0]
100123b0:	e036      	b.n	10012420 <_printf_i+0x110>
100123b2:	6821      	ldr	r1, [r4, #0]
100123b4:	681a      	ldr	r2, [r3, #0]
100123b6:	0608      	lsls	r0, r1, #24
100123b8:	d406      	bmi.n	100123c8 <_printf_i+0xb8>
100123ba:	0649      	lsls	r1, r1, #25
100123bc:	d504      	bpl.n	100123c8 <_printf_i+0xb8>
100123be:	6815      	ldr	r5, [r2, #0]
100123c0:	1d11      	adds	r1, r2, #4
100123c2:	6019      	str	r1, [r3, #0]
100123c4:	b2ad      	uxth	r5, r5
100123c6:	e002      	b.n	100123ce <_printf_i+0xbe>
100123c8:	1d11      	adds	r1, r2, #4
100123ca:	6019      	str	r1, [r3, #0]
100123cc:	6815      	ldr	r5, [r2, #0]
100123ce:	4b5f      	ldr	r3, [pc, #380]	; (1001254c <_printf_i+0x23c>)
100123d0:	7e22      	ldrb	r2, [r4, #24]
100123d2:	9303      	str	r3, [sp, #12]
100123d4:	2708      	movs	r7, #8
100123d6:	2a6f      	cmp	r2, #111	; 0x6f
100123d8:	d01d      	beq.n	10012416 <_printf_i+0x106>
100123da:	270a      	movs	r7, #10
100123dc:	e01b      	b.n	10012416 <_printf_i+0x106>
100123de:	0022      	movs	r2, r4
100123e0:	2178      	movs	r1, #120	; 0x78
100123e2:	3245      	adds	r2, #69	; 0x45
100123e4:	7011      	strb	r1, [r2, #0]
100123e6:	4a5a      	ldr	r2, [pc, #360]	; (10012550 <_printf_i+0x240>)
100123e8:	6819      	ldr	r1, [r3, #0]
100123ea:	9203      	str	r2, [sp, #12]
100123ec:	1d08      	adds	r0, r1, #4
100123ee:	6822      	ldr	r2, [r4, #0]
100123f0:	6018      	str	r0, [r3, #0]
100123f2:	680d      	ldr	r5, [r1, #0]
100123f4:	0610      	lsls	r0, r2, #24
100123f6:	d402      	bmi.n	100123fe <_printf_i+0xee>
100123f8:	0650      	lsls	r0, r2, #25
100123fa:	d500      	bpl.n	100123fe <_printf_i+0xee>
100123fc:	b2ad      	uxth	r5, r5
100123fe:	07d3      	lsls	r3, r2, #31
10012400:	d502      	bpl.n	10012408 <_printf_i+0xf8>
10012402:	2320      	movs	r3, #32
10012404:	431a      	orrs	r2, r3
10012406:	6022      	str	r2, [r4, #0]
10012408:	2710      	movs	r7, #16
1001240a:	2d00      	cmp	r5, #0
1001240c:	d103      	bne.n	10012416 <_printf_i+0x106>
1001240e:	2320      	movs	r3, #32
10012410:	6822      	ldr	r2, [r4, #0]
10012412:	439a      	bics	r2, r3
10012414:	6022      	str	r2, [r4, #0]
10012416:	0023      	movs	r3, r4
10012418:	2200      	movs	r2, #0
1001241a:	3343      	adds	r3, #67	; 0x43
1001241c:	701a      	strb	r2, [r3, #0]
1001241e:	e002      	b.n	10012426 <_printf_i+0x116>
10012420:	270a      	movs	r7, #10
10012422:	4b4a      	ldr	r3, [pc, #296]	; (1001254c <_printf_i+0x23c>)
10012424:	9303      	str	r3, [sp, #12]
10012426:	6863      	ldr	r3, [r4, #4]
10012428:	60a3      	str	r3, [r4, #8]
1001242a:	2b00      	cmp	r3, #0
1001242c:	db09      	blt.n	10012442 <_printf_i+0x132>
1001242e:	2204      	movs	r2, #4
10012430:	6821      	ldr	r1, [r4, #0]
10012432:	4391      	bics	r1, r2
10012434:	6021      	str	r1, [r4, #0]
10012436:	2d00      	cmp	r5, #0
10012438:	d105      	bne.n	10012446 <_printf_i+0x136>
1001243a:	9e04      	ldr	r6, [sp, #16]
1001243c:	2b00      	cmp	r3, #0
1001243e:	d011      	beq.n	10012464 <_printf_i+0x154>
10012440:	e07b      	b.n	1001253a <_printf_i+0x22a>
10012442:	2d00      	cmp	r5, #0
10012444:	d079      	beq.n	1001253a <_printf_i+0x22a>
10012446:	9e04      	ldr	r6, [sp, #16]
10012448:	0028      	movs	r0, r5
1001244a:	0039      	movs	r1, r7
1001244c:	f7fd fa70 	bl	1000f930 <__aeabi_uidivmod>
10012450:	9b03      	ldr	r3, [sp, #12]
10012452:	3e01      	subs	r6, #1
10012454:	5c5b      	ldrb	r3, [r3, r1]
10012456:	0028      	movs	r0, r5
10012458:	7033      	strb	r3, [r6, #0]
1001245a:	0039      	movs	r1, r7
1001245c:	f7fd f9e2 	bl	1000f824 <__aeabi_uidiv>
10012460:	1e05      	subs	r5, r0, #0
10012462:	d1f1      	bne.n	10012448 <_printf_i+0x138>
10012464:	2f08      	cmp	r7, #8
10012466:	d109      	bne.n	1001247c <_printf_i+0x16c>
10012468:	6823      	ldr	r3, [r4, #0]
1001246a:	07db      	lsls	r3, r3, #31
1001246c:	d506      	bpl.n	1001247c <_printf_i+0x16c>
1001246e:	6863      	ldr	r3, [r4, #4]
10012470:	6922      	ldr	r2, [r4, #16]
10012472:	4293      	cmp	r3, r2
10012474:	dc02      	bgt.n	1001247c <_printf_i+0x16c>
10012476:	2330      	movs	r3, #48	; 0x30
10012478:	3e01      	subs	r6, #1
1001247a:	7033      	strb	r3, [r6, #0]
1001247c:	9b04      	ldr	r3, [sp, #16]
1001247e:	1b9b      	subs	r3, r3, r6
10012480:	6123      	str	r3, [r4, #16]
10012482:	e02b      	b.n	100124dc <_printf_i+0x1cc>
10012484:	6809      	ldr	r1, [r1, #0]
10012486:	681a      	ldr	r2, [r3, #0]
10012488:	0608      	lsls	r0, r1, #24
1001248a:	d407      	bmi.n	1001249c <_printf_i+0x18c>
1001248c:	0649      	lsls	r1, r1, #25
1001248e:	d505      	bpl.n	1001249c <_printf_i+0x18c>
10012490:	1d11      	adds	r1, r2, #4
10012492:	6019      	str	r1, [r3, #0]
10012494:	6813      	ldr	r3, [r2, #0]
10012496:	8aa2      	ldrh	r2, [r4, #20]
10012498:	801a      	strh	r2, [r3, #0]
1001249a:	e004      	b.n	100124a6 <_printf_i+0x196>
1001249c:	1d11      	adds	r1, r2, #4
1001249e:	6019      	str	r1, [r3, #0]
100124a0:	6813      	ldr	r3, [r2, #0]
100124a2:	6962      	ldr	r2, [r4, #20]
100124a4:	601a      	str	r2, [r3, #0]
100124a6:	2300      	movs	r3, #0
100124a8:	9e04      	ldr	r6, [sp, #16]
100124aa:	6123      	str	r3, [r4, #16]
100124ac:	e016      	b.n	100124dc <_printf_i+0x1cc>
100124ae:	681a      	ldr	r2, [r3, #0]
100124b0:	1d11      	adds	r1, r2, #4
100124b2:	6019      	str	r1, [r3, #0]
100124b4:	6816      	ldr	r6, [r2, #0]
100124b6:	2100      	movs	r1, #0
100124b8:	6862      	ldr	r2, [r4, #4]
100124ba:	0030      	movs	r0, r6
100124bc:	f000 f92a 	bl	10012714 <memchr>
100124c0:	2800      	cmp	r0, #0
100124c2:	d001      	beq.n	100124c8 <_printf_i+0x1b8>
100124c4:	1b80      	subs	r0, r0, r6
100124c6:	6060      	str	r0, [r4, #4]
100124c8:	6863      	ldr	r3, [r4, #4]
100124ca:	e003      	b.n	100124d4 <_printf_i+0x1c4>
100124cc:	0026      	movs	r6, r4
100124ce:	3642      	adds	r6, #66	; 0x42
100124d0:	7032      	strb	r2, [r6, #0]
100124d2:	2301      	movs	r3, #1
100124d4:	6123      	str	r3, [r4, #16]
100124d6:	2300      	movs	r3, #0
100124d8:	9a04      	ldr	r2, [sp, #16]
100124da:	7013      	strb	r3, [r2, #0]
100124dc:	9b07      	ldr	r3, [sp, #28]
100124de:	aa09      	add	r2, sp, #36	; 0x24
100124e0:	9300      	str	r3, [sp, #0]
100124e2:	0021      	movs	r1, r4
100124e4:	9b06      	ldr	r3, [sp, #24]
100124e6:	9805      	ldr	r0, [sp, #20]
100124e8:	f7ff fea4 	bl	10012234 <_printf_common>
100124ec:	1c43      	adds	r3, r0, #1
100124ee:	d102      	bne.n	100124f6 <_printf_i+0x1e6>
100124f0:	2001      	movs	r0, #1
100124f2:	4240      	negs	r0, r0
100124f4:	e027      	b.n	10012546 <_printf_i+0x236>
100124f6:	6923      	ldr	r3, [r4, #16]
100124f8:	0032      	movs	r2, r6
100124fa:	9906      	ldr	r1, [sp, #24]
100124fc:	9805      	ldr	r0, [sp, #20]
100124fe:	9d07      	ldr	r5, [sp, #28]
10012500:	47a8      	blx	r5
10012502:	1c43      	adds	r3, r0, #1
10012504:	d0f4      	beq.n	100124f0 <_printf_i+0x1e0>
10012506:	6823      	ldr	r3, [r4, #0]
10012508:	2500      	movs	r5, #0
1001250a:	079b      	lsls	r3, r3, #30
1001250c:	d40f      	bmi.n	1001252e <_printf_i+0x21e>
1001250e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012510:	68e0      	ldr	r0, [r4, #12]
10012512:	4298      	cmp	r0, r3
10012514:	da17      	bge.n	10012546 <_printf_i+0x236>
10012516:	0018      	movs	r0, r3
10012518:	e015      	b.n	10012546 <_printf_i+0x236>
1001251a:	0022      	movs	r2, r4
1001251c:	2301      	movs	r3, #1
1001251e:	3219      	adds	r2, #25
10012520:	9906      	ldr	r1, [sp, #24]
10012522:	9805      	ldr	r0, [sp, #20]
10012524:	9e07      	ldr	r6, [sp, #28]
10012526:	47b0      	blx	r6
10012528:	1c43      	adds	r3, r0, #1
1001252a:	d0e1      	beq.n	100124f0 <_printf_i+0x1e0>
1001252c:	3501      	adds	r5, #1
1001252e:	68e3      	ldr	r3, [r4, #12]
10012530:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012532:	1a9b      	subs	r3, r3, r2
10012534:	429d      	cmp	r5, r3
10012536:	dbf0      	blt.n	1001251a <_printf_i+0x20a>
10012538:	e7e9      	b.n	1001250e <_printf_i+0x1fe>
1001253a:	0026      	movs	r6, r4
1001253c:	9b03      	ldr	r3, [sp, #12]
1001253e:	3642      	adds	r6, #66	; 0x42
10012540:	781b      	ldrb	r3, [r3, #0]
10012542:	7033      	strb	r3, [r6, #0]
10012544:	e78e      	b.n	10012464 <_printf_i+0x154>
10012546:	b00b      	add	sp, #44	; 0x2c
10012548:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001254a:	46c0      	nop			; (mov r8, r8)
1001254c:	100137d5 	.word	0x100137d5
10012550:	100137e6 	.word	0x100137e6

10012554 <_putc_r>:
10012554:	b570      	push	{r4, r5, r6, lr}
10012556:	0006      	movs	r6, r0
10012558:	000d      	movs	r5, r1
1001255a:	0014      	movs	r4, r2
1001255c:	2800      	cmp	r0, #0
1001255e:	d004      	beq.n	1001256a <_putc_r+0x16>
10012560:	6983      	ldr	r3, [r0, #24]
10012562:	2b00      	cmp	r3, #0
10012564:	d101      	bne.n	1001256a <_putc_r+0x16>
10012566:	f7ff fc29 	bl	10011dbc <__sinit>
1001256a:	4b12      	ldr	r3, [pc, #72]	; (100125b4 <_putc_r+0x60>)
1001256c:	429c      	cmp	r4, r3
1001256e:	d101      	bne.n	10012574 <_putc_r+0x20>
10012570:	6874      	ldr	r4, [r6, #4]
10012572:	e008      	b.n	10012586 <_putc_r+0x32>
10012574:	4b10      	ldr	r3, [pc, #64]	; (100125b8 <_putc_r+0x64>)
10012576:	429c      	cmp	r4, r3
10012578:	d101      	bne.n	1001257e <_putc_r+0x2a>
1001257a:	68b4      	ldr	r4, [r6, #8]
1001257c:	e003      	b.n	10012586 <_putc_r+0x32>
1001257e:	4b0f      	ldr	r3, [pc, #60]	; (100125bc <_putc_r+0x68>)
10012580:	429c      	cmp	r4, r3
10012582:	d100      	bne.n	10012586 <_putc_r+0x32>
10012584:	68f4      	ldr	r4, [r6, #12]
10012586:	68a3      	ldr	r3, [r4, #8]
10012588:	3b01      	subs	r3, #1
1001258a:	60a3      	str	r3, [r4, #8]
1001258c:	2b00      	cmp	r3, #0
1001258e:	da05      	bge.n	1001259c <_putc_r+0x48>
10012590:	69a2      	ldr	r2, [r4, #24]
10012592:	4293      	cmp	r3, r2
10012594:	db08      	blt.n	100125a8 <_putc_r+0x54>
10012596:	b2eb      	uxtb	r3, r5
10012598:	2b0a      	cmp	r3, #10
1001259a:	d005      	beq.n	100125a8 <_putc_r+0x54>
1001259c:	6823      	ldr	r3, [r4, #0]
1001259e:	b2e8      	uxtb	r0, r5
100125a0:	1c5a      	adds	r2, r3, #1
100125a2:	6022      	str	r2, [r4, #0]
100125a4:	701d      	strb	r5, [r3, #0]
100125a6:	e004      	b.n	100125b2 <_putc_r+0x5e>
100125a8:	0022      	movs	r2, r4
100125aa:	0029      	movs	r1, r5
100125ac:	0030      	movs	r0, r6
100125ae:	f7ff fa43 	bl	10011a38 <__swbuf_r>
100125b2:	bd70      	pop	{r4, r5, r6, pc}
100125b4:	10013764 	.word	0x10013764
100125b8:	10013784 	.word	0x10013784
100125bc:	100137a4 	.word	0x100137a4

100125c0 <__sread>:
100125c0:	b570      	push	{r4, r5, r6, lr}
100125c2:	000c      	movs	r4, r1
100125c4:	250e      	movs	r5, #14
100125c6:	5f49      	ldrsh	r1, [r1, r5]
100125c8:	f000 f8b0 	bl	1001272c <_read_r>
100125cc:	2800      	cmp	r0, #0
100125ce:	db03      	blt.n	100125d8 <__sread+0x18>
100125d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100125d2:	181b      	adds	r3, r3, r0
100125d4:	6563      	str	r3, [r4, #84]	; 0x54
100125d6:	e003      	b.n	100125e0 <__sread+0x20>
100125d8:	89a2      	ldrh	r2, [r4, #12]
100125da:	4b02      	ldr	r3, [pc, #8]	; (100125e4 <__sread+0x24>)
100125dc:	4013      	ands	r3, r2
100125de:	81a3      	strh	r3, [r4, #12]
100125e0:	bd70      	pop	{r4, r5, r6, pc}
100125e2:	46c0      	nop			; (mov r8, r8)
100125e4:	ffffefff 	.word	0xffffefff

100125e8 <__swrite>:
100125e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100125ea:	001f      	movs	r7, r3
100125ec:	898b      	ldrh	r3, [r1, #12]
100125ee:	0005      	movs	r5, r0
100125f0:	000c      	movs	r4, r1
100125f2:	0016      	movs	r6, r2
100125f4:	05db      	lsls	r3, r3, #23
100125f6:	d505      	bpl.n	10012604 <__swrite+0x1c>
100125f8:	230e      	movs	r3, #14
100125fa:	5ec9      	ldrsh	r1, [r1, r3]
100125fc:	2200      	movs	r2, #0
100125fe:	2302      	movs	r3, #2
10012600:	f000 f874 	bl	100126ec <_lseek_r>
10012604:	89a2      	ldrh	r2, [r4, #12]
10012606:	4b05      	ldr	r3, [pc, #20]	; (1001261c <__swrite+0x34>)
10012608:	0028      	movs	r0, r5
1001260a:	4013      	ands	r3, r2
1001260c:	81a3      	strh	r3, [r4, #12]
1001260e:	0032      	movs	r2, r6
10012610:	230e      	movs	r3, #14
10012612:	5ee1      	ldrsh	r1, [r4, r3]
10012614:	003b      	movs	r3, r7
10012616:	f000 f81f 	bl	10012658 <_write_r>
1001261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001261c:	ffffefff 	.word	0xffffefff

10012620 <__sseek>:
10012620:	b570      	push	{r4, r5, r6, lr}
10012622:	000c      	movs	r4, r1
10012624:	250e      	movs	r5, #14
10012626:	5f49      	ldrsh	r1, [r1, r5]
10012628:	f000 f860 	bl	100126ec <_lseek_r>
1001262c:	89a3      	ldrh	r3, [r4, #12]
1001262e:	1c42      	adds	r2, r0, #1
10012630:	d103      	bne.n	1001263a <__sseek+0x1a>
10012632:	4a05      	ldr	r2, [pc, #20]	; (10012648 <__sseek+0x28>)
10012634:	4013      	ands	r3, r2
10012636:	81a3      	strh	r3, [r4, #12]
10012638:	e004      	b.n	10012644 <__sseek+0x24>
1001263a:	2280      	movs	r2, #128	; 0x80
1001263c:	0152      	lsls	r2, r2, #5
1001263e:	4313      	orrs	r3, r2
10012640:	81a3      	strh	r3, [r4, #12]
10012642:	6560      	str	r0, [r4, #84]	; 0x54
10012644:	bd70      	pop	{r4, r5, r6, pc}
10012646:	46c0      	nop			; (mov r8, r8)
10012648:	ffffefff 	.word	0xffffefff

1001264c <__sclose>:
1001264c:	b510      	push	{r4, lr}
1001264e:	230e      	movs	r3, #14
10012650:	5ec9      	ldrsh	r1, [r1, r3]
10012652:	f000 f815 	bl	10012680 <_close_r>
10012656:	bd10      	pop	{r4, pc}

10012658 <_write_r>:
10012658:	b570      	push	{r4, r5, r6, lr}
1001265a:	0005      	movs	r5, r0
1001265c:	0008      	movs	r0, r1
1001265e:	0011      	movs	r1, r2
10012660:	2200      	movs	r2, #0
10012662:	4c06      	ldr	r4, [pc, #24]	; (1001267c <_write_r+0x24>)
10012664:	6022      	str	r2, [r4, #0]
10012666:	001a      	movs	r2, r3
10012668:	f7f9 f8be 	bl	1000b7e8 <_write>
1001266c:	1c43      	adds	r3, r0, #1
1001266e:	d103      	bne.n	10012678 <_write_r+0x20>
10012670:	6823      	ldr	r3, [r4, #0]
10012672:	2b00      	cmp	r3, #0
10012674:	d000      	beq.n	10012678 <_write_r+0x20>
10012676:	602b      	str	r3, [r5, #0]
10012678:	bd70      	pop	{r4, r5, r6, pc}
1001267a:	46c0      	nop			; (mov r8, r8)
1001267c:	100160c0 	.word	0x100160c0

10012680 <_close_r>:
10012680:	2300      	movs	r3, #0
10012682:	b570      	push	{r4, r5, r6, lr}
10012684:	4c06      	ldr	r4, [pc, #24]	; (100126a0 <_close_r+0x20>)
10012686:	0005      	movs	r5, r0
10012688:	0008      	movs	r0, r1
1001268a:	6023      	str	r3, [r4, #0]
1001268c:	f7fa fb60 	bl	1000cd50 <_close>
10012690:	1c43      	adds	r3, r0, #1
10012692:	d103      	bne.n	1001269c <_close_r+0x1c>
10012694:	6823      	ldr	r3, [r4, #0]
10012696:	2b00      	cmp	r3, #0
10012698:	d000      	beq.n	1001269c <_close_r+0x1c>
1001269a:	602b      	str	r3, [r5, #0]
1001269c:	bd70      	pop	{r4, r5, r6, pc}
1001269e:	46c0      	nop			; (mov r8, r8)
100126a0:	100160c0 	.word	0x100160c0

100126a4 <_fstat_r>:
100126a4:	2300      	movs	r3, #0
100126a6:	b570      	push	{r4, r5, r6, lr}
100126a8:	4c06      	ldr	r4, [pc, #24]	; (100126c4 <_fstat_r+0x20>)
100126aa:	0005      	movs	r5, r0
100126ac:	0008      	movs	r0, r1
100126ae:	0011      	movs	r1, r2
100126b0:	6023      	str	r3, [r4, #0]
100126b2:	f7fa fb51 	bl	1000cd58 <_fstat>
100126b6:	1c43      	adds	r3, r0, #1
100126b8:	d103      	bne.n	100126c2 <_fstat_r+0x1e>
100126ba:	6823      	ldr	r3, [r4, #0]
100126bc:	2b00      	cmp	r3, #0
100126be:	d000      	beq.n	100126c2 <_fstat_r+0x1e>
100126c0:	602b      	str	r3, [r5, #0]
100126c2:	bd70      	pop	{r4, r5, r6, pc}
100126c4:	100160c0 	.word	0x100160c0

100126c8 <_isatty_r>:
100126c8:	2300      	movs	r3, #0
100126ca:	b570      	push	{r4, r5, r6, lr}
100126cc:	4c06      	ldr	r4, [pc, #24]	; (100126e8 <_isatty_r+0x20>)
100126ce:	0005      	movs	r5, r0
100126d0:	0008      	movs	r0, r1
100126d2:	6023      	str	r3, [r4, #0]
100126d4:	f7fa fb46 	bl	1000cd64 <_isatty>
100126d8:	1c43      	adds	r3, r0, #1
100126da:	d103      	bne.n	100126e4 <_isatty_r+0x1c>
100126dc:	6823      	ldr	r3, [r4, #0]
100126de:	2b00      	cmp	r3, #0
100126e0:	d000      	beq.n	100126e4 <_isatty_r+0x1c>
100126e2:	602b      	str	r3, [r5, #0]
100126e4:	bd70      	pop	{r4, r5, r6, pc}
100126e6:	46c0      	nop			; (mov r8, r8)
100126e8:	100160c0 	.word	0x100160c0

100126ec <_lseek_r>:
100126ec:	b570      	push	{r4, r5, r6, lr}
100126ee:	0005      	movs	r5, r0
100126f0:	0008      	movs	r0, r1
100126f2:	0011      	movs	r1, r2
100126f4:	2200      	movs	r2, #0
100126f6:	4c06      	ldr	r4, [pc, #24]	; (10012710 <_lseek_r+0x24>)
100126f8:	6022      	str	r2, [r4, #0]
100126fa:	001a      	movs	r2, r3
100126fc:	f7fa fb34 	bl	1000cd68 <_lseek>
10012700:	1c43      	adds	r3, r0, #1
10012702:	d103      	bne.n	1001270c <_lseek_r+0x20>
10012704:	6823      	ldr	r3, [r4, #0]
10012706:	2b00      	cmp	r3, #0
10012708:	d000      	beq.n	1001270c <_lseek_r+0x20>
1001270a:	602b      	str	r3, [r5, #0]
1001270c:	bd70      	pop	{r4, r5, r6, pc}
1001270e:	46c0      	nop			; (mov r8, r8)
10012710:	100160c0 	.word	0x100160c0

10012714 <memchr>:
10012714:	b2c9      	uxtb	r1, r1
10012716:	1882      	adds	r2, r0, r2
10012718:	4290      	cmp	r0, r2
1001271a:	d004      	beq.n	10012726 <memchr+0x12>
1001271c:	7803      	ldrb	r3, [r0, #0]
1001271e:	428b      	cmp	r3, r1
10012720:	d002      	beq.n	10012728 <memchr+0x14>
10012722:	3001      	adds	r0, #1
10012724:	e7f8      	b.n	10012718 <memchr+0x4>
10012726:	2000      	movs	r0, #0
10012728:	4770      	bx	lr
	...

1001272c <_read_r>:
1001272c:	b570      	push	{r4, r5, r6, lr}
1001272e:	0005      	movs	r5, r0
10012730:	0008      	movs	r0, r1
10012732:	0011      	movs	r1, r2
10012734:	2200      	movs	r2, #0
10012736:	4c06      	ldr	r4, [pc, #24]	; (10012750 <_read_r+0x24>)
10012738:	6022      	str	r2, [r4, #0]
1001273a:	001a      	movs	r2, r3
1001273c:	f7f9 f834 	bl	1000b7a8 <_read>
10012740:	1c43      	adds	r3, r0, #1
10012742:	d103      	bne.n	1001274c <_read_r+0x20>
10012744:	6823      	ldr	r3, [r4, #0]
10012746:	2b00      	cmp	r3, #0
10012748:	d000      	beq.n	1001274c <_read_r+0x20>
1001274a:	602b      	str	r3, [r5, #0]
1001274c:	bd70      	pop	{r4, r5, r6, pc}
1001274e:	46c0      	nop			; (mov r8, r8)
10012750:	100160c0 	.word	0x100160c0
10012754:	000003e8 	.word	0x000003e8

10012758 <test>:
10012758:	00000083 00004000 00000200 00c800c8     .....@..........
10012768:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10012778:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10012788:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10012798:	5220706f 73646165 00000000 706d6153     op Reads....Samp
100127a8:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100127b8:	666f206c 74657366 74616420 57482061     l offset data HW
100127c8:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100127d8:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100127e8:	6f727947 66666f20 20746573 61746164     Gyro offset data
100127f8:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10012808:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10012818:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10012828:	00000000 5f504d44 0a214e4f 0000000d     ....DMP_ON!.....
10012838:	534e4553 2153524f 00000d0a 2e2e312d     SENSORS!....-1..
10012848:	0000002e 706d6f43 20737361 20746f6e     ....Compass not 
10012858:	6e756f66 00002e64 72617453 676e6974     found...Starting
10012868:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10012878:	72746552 69766569 4220676e 65736169     Retrieving Biase
10012888:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10012898:	65736169 72452073 20726f72 6f70202d     iases Error - po
100128a8:	62697373 4920656c 65204332 726f7272     ssible I2C error
100128b8:	00000000 72746552 69766569 5320676e     ....Retrieving S
100128c8:	69422054 73657361 00000000 72746552     T Biases....Retr
100128d8:	69766569 5320676e 69422054 73657361     ieving ST Biases
100128e8:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100128f8:	32492065 72652043 00726f72 64616552     e I2C error.Read
10012908:	20676e69 2050544f 69676552 72657473     ing OTP Register
10012918:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10012928:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10012938:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10012948:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10012958:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10012968:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10012978:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10012988:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10012998:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100129a8:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100129b8:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100129c8:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100129d8:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100129e8:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100129f8:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10012a08:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10012a18:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10012a28:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10012a38:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10012a48:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10012a58:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10012a68:	6c207361 20737365 6e616874 2e372520     as less than %7.
10012a78:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10012a88:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10012a98:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10012aa8:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10012ab8:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10012ac8:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10012ad8:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10012ae8:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10012af8:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10012b08:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10012b18:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10012b28:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10012b38:	253a7369 72672064 65746165 68742072     is:%d greater th
10012b48:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10012b58:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10012b68:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10012b78:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10012b88:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10012b98:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10012ba8:	65542066 52207473 6c757365 203a7374     f Test Results: 
10012bb8:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10012bc8:	73655420 65522074 746c7573 25203a73      Test Results: %
10012bd8:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10012be8:	00000000                                ....

10012bec <hw>:
10012bec:	04000069 01410080 01000000 00001333     i.....A.....3...

10012bfc <reg>:
10012bfc:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10012c0c:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10012c1c:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
10012c2c:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10012c3c:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
10012c4c:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
10012c5c:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10012c6c:	b691a38b 00dab4da 10009c74 10009c76     ........t...v...
10012c7c:	10009c5c 10009c5c 10009c5c 10009c74     \...\...\...t...
10012c8c:	10009c5c 10009c5c 1000a4c2 1000a536     \...\.......6...
10012c9c:	1000a4aa 1000a53c 1000a4b0 1000a4b6     ....<...........
10012cac:	1000a4bc 1000ab7c 1000ab7c 1000ab7c     ....|...|...|...
10012cbc:	1000ab7c 1000ab7c 1000ab7c 1000ab7c     |...|...|...|...
10012ccc:	1000ab7c 1000ab7c 1000ab7c 1000ab7c     |...|...|...|...
10012cdc:	1000ab7c 1000ab7c 1000ab7c 1000ab7c     |...|...|...|...
10012cec:	1000ab7c 1000ab7c 1000ab7c 1000ab7c     |...|...|...|...
10012cfc:	1000ab9a 1000ab9a 1000ab9a 1000ab9a     ................
10012d0c:	1000ab9a 1000ab9a 1000ab9a 1000ab9a     ................
10012d1c:	1000ab9a 1000ab9a 1000abbc 1000abbc     ................
10012d2c:	1000abbc 1000abbc 1000abbc 1000abbc     ................
10012d3c:	1000abbc 1000abbc 1000abbc 1000abbc     ................
10012d4c:	1000abde 1000abde 1000abde 1000abde     ................
10012d5c:	1000abde 1000abde 1000abf8 1000abf8     ................
10012d6c:	1000abf8 1000abf8 1000abf8 1000abf8     ................
10012d7c:	1000abf8 1000abf8 1000abf8 1000ac12     ................
10012d8c:	1000ac12 1000ac34 1000ac34 1000ac4e     ....4...4...N...
10012d9c:	1000ac34 34333231 00003635 efcdab00     4...123456......
10012dac:	00efcdab b2d60600 f8f005f0 00000000     ................

10012dbc <ble_mgr_gatt_server_handle>:
	...
10012dd4:	10009bb9 10009bf5 10009bbd 00000000     ................
10012de4:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10012df4:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10012e04:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012e14:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012e24:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10012e34:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10012e44:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10012e54:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
10012e64:	69747079 66206e6f 656c6961 00000064     yption failed...
10012e74:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10012e84:	64657465 63757320 73736563 6c6c7566     eted successfull
10012e94:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10012ea4:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10012eb4:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10012ec4:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012ed4:	206e6163 69766564 72206563 68636165     can device reach
10012ee4:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012ef4:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012f04:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10012f14:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10012f24:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10012f34:	656e6e6f 52207463 65757165 46207473     onnect Request F
10012f44:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10012f54:	636f7270 72756465 6f632065 656c706d     procedure comple
10012f64:	20646574 63637573 66737365 796c6c75     ted successfully
10012f74:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10012f84:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10012f94:	68742065 61702065 6e697269 6e692067     e the pairing in
10012fa4:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10012fb4:	7320746f 74726174 00006465 76616c53     ot started..Slav
10012fc4:	65532065 69727563 52207974 2d207165     e Security Req -
10012fd4:	74754120 746e6568 74616369 206e6f69      Authentication 
10012fe4:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10012ff4:	74736575 41202d20 65687475 6369746e     uest - Authentic
10013004:	6f697461 6146206e 64656c69 00000000     ation Failed....
10013014:	65746e45 68742072 61502065 656b7373     Enter the Passke
10013024:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10013034:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10013044:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10013054:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10013064:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10013074:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10013084:	6568746f 65442072 65636976 00003a29     other Device):..
10013094:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
100130a4:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
100130b4:	20657275 20746f4e 70707573 6574726f     ure Not supporte
100130c4:	00000064 65746e45 20646572 73736150     d...Entered Pass
100130d4:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
100130e4:	6f666e69 74616d72 206e6f69 7020666f     information of p
100130f4:	20726565 69766564 69206563 6f6e2073     eer device is no
10013104:	76612074 616c6961 2e656c62 00000000     t available.....
10013114:	61656c50 75206573 6961706e 68742072     Please unpair th
10013124:	65642065 65636976 6f726620 6570206d     e device from pe
10013134:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10013144:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10013154:	20646e61 72617473 61702074 6e697269     and start pairin
10013164:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10013174:	52206e6f 65757165 52207473 796c7065     on Request Reply
10013184:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10013194:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
100131a4:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
100131b4:	6166206e 64656c69 00000000 61656c50     n failed....Plea
100131c4:	63206573 6b636568 65687420 776f7020     se check the pow
100131d4:	61207265 6320646e 656e6e6f 6f697463     er and connectio
100131e4:	202f206e 64726168 65726177 6e6f6320     n / hardware con
100131f4:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
10013204:	00000045 69766544 6e206563 20656d61     E...Device name 
10013214:	20746573 6c696166 00006465 61204442     set failed..BD a
10013224:	65726464 67207373 66207465 656c6961     ddress get faile
10013234:	00000064 41204442 65726464 303a7373     d...BD Address:0
10013244:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10013254:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10013264:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10013274:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10013284:	61727567 6e6f6974 69616620 0064656c     guration failed.
10013294:	20746553 20454c42 69766544 41206563     Set BLE Device A
100132a4:	65726464 66207373 656c6961 00000064     ddress failed...
100132b4:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
100132c4:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
100132d4:	65732065 69727563 72207974 65757165     e security reque
100132e4:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
100132f4:	65746365 6f742064 65657020 65642072     ected to peer de
10013304:	65636976 74697720 64612068 73657264     vice with addres
10013314:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10013324:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10013334:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10013344:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10013354:	61522067 6d6f646e 64646120 73736572     g Random address
10013364:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013374:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013384:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013394:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
100133a4:	2e2e676e 0000002e 69766544 43206563     ng......Device C
100133b4:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
100133c4:	53202d20 75746174 25203a73 00000064      - Status: %d...
100133d4:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
100133e4:	61642074 73206174 66207465 656c6961     t data set faile
100133f4:	00000064                                d...

100133f8 <ble_mgr_gap_handle>:
100133f8:	10009bb5 10009d71 10009bcd 00000000     ....q...........
10013408:	00000000 1000a845 10009c25 10009bc9     ....E...%.......
10013418:	10009f11 10009df1 1000a115 10009f29     ............)...
10013428:	1000a269 1000a3ad 10009cad 1000aa81     i...............
	...
10013444:	00002121 1000c568 1000c576 1000c584     !!..h...v.......
10013454:	1000c592 1000c5a0 1000c5ae 1000c5bc     ................
10013464:	1000c5cc 1000c5dc 1000c5ec 1000c5fc     ................
10013474:	1000c60c 1000c61c 1000c62c 1000c63c     ........,...<...
10013484:	1000c64c 1000c65c 1000c66c 1000c67c     L...\...l...|...
10013494:	1000c68c 1000c69c 1000c6ac 1000c6bc     ................
100134a4:	1000c6cc 1000c6dc 1000c6ec 1000c6fc     ................
100134b4:	1000c70c 1000c71a 1000c728 1000c736     ........(...6...
100134c4:	1000c744 1000c752 1000c760 1000c76e     D...R...`...n...
100134d4:	1000c77c 1000c78c 1000c79c 1000c7ac     |...............
100134e4:	1000c7bc 1000c7cc 1000c7dc 1000c7ec     ................
100134f4:	1000c7fc 1000c80c 1000c81c 1000c82c     ............,...
10013504:	1000c83c 1000c84c 1000c85c 1000c86c     <...L...\...l...
10013514:	1000c87c 1000c88a 1000c898 1000c8d8     |...............
10013524:	1000c900 1000c928 1000c950 1000cb90     ....(...P.......
10013534:	1000c980 1000c998 1000ca10 1000ca28     ............(...
10013544:	1000c9b0 1000c9c8 1000c9e0 1000c9f8     ................
10013554:	1000ca40 1000cd04 1000cd04 1000cd04     @...............
10013564:	1000cd04 1000cd04 1000cd04 1000cd04     ................
10013574:	1000cd04 1000cae8 1000cb00 1000cb18     ................
10013584:	1000cba6 1000ca70 1000cd04 1000cd04     ....p...........
10013594:	1000cd04 1000cd04 1000cd04 1000cd04     ................
100135a4:	1000cb30 1000cb48 1000cb60 1000cb78     0...H...`...x...
100135b4:	1000cd04 1000ccbc 1000ccd4 1000cd04     ................
100135c4:	1000cd04 1000cbd2 1000cbe8 1000cbfe     ................
100135d4:	1000cc14 1000cd04 1000cd04 1000cd04     ................
100135e4:	1000cd04 1000cd04 1000cd04 1000cd04     ................
100135f4:	1000cd04 1000c8c4 1000c8ec 1000c914     ................
10013604:	1000c93c 1000c968 1000ca58 1000ca88     <...h...X.......
10013614:	1000caa0 1000cab8 1000cad0 1000cbbc     ................
10013624:	1000cc2a 1000cca4 1000ccec 20554d49     *...........IMU 
10013634:	45544e49 50555252 00002154 656d7441     INTERRUPT!..Atme
10013644:	6f43206c 002e7072                                l Corp.

1001364b <CSWTCH.47>:
1001364b:	03010300 03030303 03030303 00020303     ................
1001365b:	00fe1600 00fd3a10 00fdf810 00fdd010     .....:..........
1001366b:	00fdf810 00fdc410 00fdf810 00fdd010     ................
1001367b:	00fd3a10 00fd3a10 00fdc410 00fdd010     .:...:..........
1001368b:	00fe7c10 00fe7c10 00fe7c10 00fdfe10     .|...|...|......
1001369b:	00fd3a10 00fd3a10 00fde410 00fdce10     .:...:..........
100136ab:	00fde410 00fdc410 00fde410 00fdce10     ................
100136bb:	00fd3a10 00fd3a10 00fdc410 00fdce10     .:...:..........
100136cb:	00fe7c10 00fe7c10 00fe7c10 00fe8810     .|...|...|......
100136db:	01017410 0100d210 0100d210 0100d010     .t..............
100136eb:	01016610 01016610 01015c10 0100d010     .f...f...\......
100136fb:	01016610 01015c10 01016610 0100d010     .f...\...f......
1001370b:	01016c10 01016c10 01016c10 0101f610     .l...l...l......
1001371b:	010a5810 01091810 01091810 01091610     .X..............
1001372b:	010a3010 010a3010 010a2210 01091610     .0...0..."......
1001373b:	010a3010 010a2210 010a3010 01091610     .0..."...0......
1001374b:	010a3810 010a3810 010a3810 010c3810     .8...8...8...8..
1001375b:	00004310 01386000                                .C...

10013760 <_global_impure_ptr>:
10013760:	10013860                                `8..

10013764 <__sf_fake_stdin>:
	...

10013784 <__sf_fake_stdout>:
	...

100137a4 <__sf_fake_stderr>:
	...
100137c4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100137d4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100137e4:	31300046 35343332 39383736 64636261     F.0123456789abcd
100137f4:	00006665                                ef..

100137f8 <_init>:
100137f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100137fa:	46c0      	nop			; (mov r8, r8)
100137fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
100137fe:	bc08      	pop	{r3}
10013800:	469e      	mov	lr, r3
10013802:	4770      	bx	lr

10013804 <__init_array_start>:
10013804:	100080b1 	.word	0x100080b1

10013808 <_fini>:
10013808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001380a:	46c0      	nop			; (mov r8, r8)
1001380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001380e:	bc08      	pop	{r3}
10013810:	469e      	mov	lr, r3
10013812:	4770      	bx	lr

10013814 <__fini_array_start>:
10013814:	10008089 	.word	0x10008089
