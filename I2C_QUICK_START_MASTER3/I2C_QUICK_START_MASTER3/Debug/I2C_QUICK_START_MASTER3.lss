
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000133a0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c8  1001b3a0  1001b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003414  1001b468  1001b468  0001b468  2**3
                  ALLOC
  3 .stack        00000804  1001e87c  1001e87c  0001b468  2**0
                  ALLOC
  4 .ARM.exidx    00000008  1001f080  1001f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  0001f088  2**0
                  CONTENTS, READONLY
  6 .comment      00000124  00000000  00000000  0001f0b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033e4a  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000057cd  00000000  00000000  0005301e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011b5b  00000000  00000000  000587eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  0006a346  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ab0  00000000  00000000  0006b33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002550b  00000000  00000000  0006cdee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012acf  00000000  00000000  000922f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001487b6  00000000  00000000  000a4dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004750  00000000  00000000  001ed580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	1001b3a0 	.word	0x1001b3a0
10008054:	1001b3a0 	.word	0x1001b3a0
10008058:	1001b468 	.word	0x1001b468
1000805c:	1001b468 	.word	0x1001b468
10008060:	1001e87c 	.word	0x1001e87c
10008064:	10018051 	.word	0x10018051
10008068:	1000ddd1 	.word	0x1000ddd1

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	1001b468 	.word	0x1001b468
1000808c:	00000000 	.word	0x00000000
10008090:	1001f088 	.word	0x1001f088

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	1001b46c 	.word	0x1001b46c
100080c0:	1001f088 	.word	0x1001f088
100080c4:	1001f088 	.word	0x1001f088
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000d51d 	.word	0x1000d51d
100080f8:	10014db5 	.word	0x10014db5
100080fc:	1001b3a4 	.word	0x1001b3a4
10008100:	000f4240 	.word	0x000f4240
10008104:	1001b3a0 	.word	0x1001b3a0
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	1001b3a4 	.word	0x1001b3a4
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	1001b484 	.word	0x1001b484
10008178:	1001b488 	.word	0x1001b488

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081b4:	b570      	push	{r4, r5, r6, lr}
100081b6:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081b8:	4b3a      	ldr	r3, [pc, #232]	; (100082a4 <dualtimer_init+0xf0>)
100081ba:	2004      	movs	r0, #4
100081bc:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081be:	7823      	ldrb	r3, [r4, #0]
100081c0:	2b00      	cmp	r3, #0
100081c2:	d102      	bne.n	100081ca <dualtimer_init+0x16>
100081c4:	7b23      	ldrb	r3, [r4, #12]
100081c6:	2b00      	cmp	r3, #0
100081c8:	d057      	beq.n	1000827a <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081ca:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081cc:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081ce:	4936      	ldr	r1, [pc, #216]	; (100082a8 <dualtimer_init+0xf4>)
100081d0:	68ca      	ldr	r2, [r1, #12]
100081d2:	4313      	orrs	r3, r2
100081d4:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081d6:	7e22      	ldrb	r2, [r4, #24]
100081d8:	698b      	ldr	r3, [r1, #24]
100081da:	4002      	ands	r2, r0
100081dc:	302d      	adds	r0, #45	; 0x2d
100081de:	0112      	lsls	r2, r2, #4
100081e0:	4383      	bics	r3, r0
100081e2:	4313      	orrs	r3, r2
100081e4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081e6:	7823      	ldrb	r3, [r4, #0]
100081e8:	2b00      	cmp	r3, #0
100081ea:	d020      	beq.n	1000822e <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081ec:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081ee:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081f0:	2a00      	cmp	r2, #0
100081f2:	d150      	bne.n	10008296 <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
100081f4:	2302      	movs	r3, #2
100081f6:	78a1      	ldrb	r1, [r4, #2]
100081f8:	78e2      	ldrb	r2, [r4, #3]
100081fa:	0049      	lsls	r1, r1, #1
100081fc:	4019      	ands	r1, r3
100081fe:	0092      	lsls	r2, r2, #2
10008200:	330a      	adds	r3, #10
10008202:	401a      	ands	r2, r3
10008204:	000b      	movs	r3, r1
10008206:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008208:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000820a:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000820c:	2a00      	cmp	r2, #0
1000820e:	d13f      	bne.n	10008290 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008210:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008212:	68a1      	ldr	r1, [r4, #8]
10008214:	4a25      	ldr	r2, [pc, #148]	; (100082ac <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008216:	4d24      	ldr	r5, [pc, #144]	; (100082a8 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008218:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000821a:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000821c:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000821e:	0040      	lsls	r0, r0, #1
10008220:	5c2e      	ldrb	r6, [r5, r0]
10008222:	4331      	orrs	r1, r6
10008224:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008226:	2180      	movs	r1, #128	; 0x80
10008228:	7a10      	ldrb	r0, [r2, #8]
1000822a:	4301      	orrs	r1, r0
1000822c:	7211      	strb	r1, [r2, #8]
1000822e:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008230:	2a00      	cmp	r2, #0
10008232:	d022      	beq.n	1000827a <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7b62      	ldrb	r2, [r4, #13]
10008236:	2a00      	cmp	r2, #0
10008238:	d124      	bne.n	10008284 <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000823a:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000823c:	2002      	movs	r0, #2
1000823e:	7ba2      	ldrb	r2, [r4, #14]
10008240:	7be1      	ldrb	r1, [r4, #15]
10008242:	0052      	lsls	r2, r2, #1
10008244:	4010      	ands	r0, r2
10008246:	220c      	movs	r2, #12
10008248:	0089      	lsls	r1, r1, #2
1000824a:	400a      	ands	r2, r1
1000824c:	4302      	orrs	r2, r0
1000824e:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008250:	7c22      	ldrb	r2, [r4, #16]
10008252:	2a00      	cmp	r2, #0
10008254:	d001      	beq.n	1000825a <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008256:	2220      	movs	r2, #32
10008258:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000825a:	6961      	ldr	r1, [r4, #20]
1000825c:	4a13      	ldr	r2, [pc, #76]	; (100082ac <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000825e:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008260:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008262:	2128      	movs	r1, #40	; 0x28
10008264:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10008266:	2302      	movs	r3, #2
10008268:	4c0f      	ldr	r4, [pc, #60]	; (100082a8 <dualtimer_init+0xf4>)
1000826a:	0040      	lsls	r0, r0, #1
1000826c:	5c25      	ldrb	r5, [r4, r0]
1000826e:	432b      	orrs	r3, r5
10008270:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008272:	2380      	movs	r3, #128	; 0x80
10008274:	5c50      	ldrb	r0, [r2, r1]
10008276:	4303      	orrs	r3, r0
10008278:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000827a:	490d      	ldr	r1, [pc, #52]	; (100082b0 <dualtimer_init+0xfc>)
1000827c:	201e      	movs	r0, #30
1000827e:	4b0d      	ldr	r3, [pc, #52]	; (100082b4 <dualtimer_init+0x100>)
10008280:	4798      	blx	r3
}
10008282:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008284:	2a01      	cmp	r2, #1
10008286:	d00b      	beq.n	100082a0 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008288:	2a02      	cmp	r2, #2
1000828a:	d1d7      	bne.n	1000823c <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000828c:	2340      	movs	r3, #64	; 0x40
1000828e:	e7d5      	b.n	1000823c <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008290:	2220      	movs	r2, #32
10008292:	4313      	orrs	r3, r2
10008294:	e7bc      	b.n	10008210 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008296:	3a02      	subs	r2, #2
10008298:	4253      	negs	r3, r2
1000829a:	4153      	adcs	r3, r2
1000829c:	0198      	lsls	r0, r3, #6
1000829e:	e7a9      	b.n	100081f4 <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082a0:	2300      	movs	r3, #0
100082a2:	e7cb      	b.n	1000823c <dualtimer_init+0x88>
100082a4:	1000d831 	.word	0x1000d831
100082a8:	4000b000 	.word	0x4000b000
100082ac:	40001000 	.word	0x40001000
100082b0:	1000813d 	.word	0x1000813d
100082b4:	1000dc49 	.word	0x1000dc49

100082b8 <i2c_write>:

#elif defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082ba:	4d11      	ldr	r5, [pc, #68]	; (10008300 <i2c_write+0x48>)
100082bc:	8028      	strh	r0, [r5, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
100082be:	1c50      	adds	r0, r2, #1
100082c0:	b2c0      	uxtb	r0, r0
100082c2:	8068      	strh	r0, [r5, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082c4:	6868      	ldr	r0, [r5, #4]
100082c6:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100082c8:	2a00      	cmp	r2, #0
100082ca:	d008      	beq.n	100082de <i2c_write+0x26>
100082cc:	2100      	movs	r1, #0
100082ce:	1c48      	adds	r0, r1, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100082d0:	686c      	ldr	r4, [r5, #4]
100082d2:	5c59      	ldrb	r1, [r3, r1]
100082d4:	5421      	strb	r1, [r4, r0]
100082d6:	0001      	movs	r1, r0
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100082d8:	b2c0      	uxtb	r0, r0
100082da:	4290      	cmp	r0, r2
100082dc:	d3f7      	bcc.n	100082ce <i2c_write+0x16>
100082de:	4c09      	ldr	r4, [pc, #36]	; (10008304 <i2c_write+0x4c>)
100082e0:	4f09      	ldr	r7, [pc, #36]	; (10008308 <i2c_write+0x50>)
100082e2:	4e0a      	ldr	r6, [pc, #40]	; (1000830c <i2c_write+0x54>)
100082e4:	e003      	b.n	100082ee <i2c_write+0x36>
100082e6:	3c01      	subs	r4, #1
100082e8:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100082ea:	2c00      	cmp	r4, #0
100082ec:	d005      	beq.n	100082fa <i2c_write+0x42>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100082ee:	0029      	movs	r1, r5
100082f0:	0038      	movs	r0, r7
100082f2:	47b0      	blx	r6
100082f4:	2800      	cmp	r0, #0
100082f6:	d1f6      	bne.n	100082e6 <i2c_write+0x2e>
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    return 0;
}
100082f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100082fa:	2001      	movs	r0, #1
100082fc:	4240      	negs	r0, r0
100082fe:	e7fb      	b.n	100082f8 <i2c_write+0x40>
10008300:	1001d2e8 	.word	0x1001d2e8
10008304:	000003e9 	.word	0x000003e9
10008308:	1001d2e0 	.word	0x1001d2e0
1000830c:	1000d449 	.word	0x1000d449

10008310 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008310:	b5f0      	push	{r4, r5, r6, r7, lr}
10008312:	4645      	mov	r5, r8
10008314:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008316:	4b20      	ldr	r3, [pc, #128]	; (10008398 <i2c_read+0x88>)
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008318:	4657      	mov	r7, sl
1000831a:	464e      	mov	r6, r9
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000831c:	4699      	mov	r9, r3
1000831e:	b280      	uxth	r0, r0
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008320:	b4e0      	push	{r5, r6, r7}
10008322:	4692      	mov	sl, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008324:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008326:	464a      	mov	r2, r9
10008328:	2301      	movs	r3, #1
1000832a:	8053      	strh	r3, [r2, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000832c:	6853      	ldr	r3, [r2, #4]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000832e:	4e1b      	ldr	r6, [pc, #108]	; (1000839c <i2c_read+0x8c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008330:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
10008332:	4653      	mov	r3, sl
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
10008334:	8030      	strh	r0, [r6, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008336:	8073      	strh	r3, [r6, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008338:	4c19      	ldr	r4, [pc, #100]	; (100083a0 <i2c_read+0x90>)
1000833a:	4d1a      	ldr	r5, [pc, #104]	; (100083a4 <i2c_read+0x94>)
1000833c:	4f1a      	ldr	r7, [pc, #104]	; (100083a8 <i2c_read+0x98>)
1000833e:	e003      	b.n	10008348 <i2c_read+0x38>
10008340:	3c01      	subs	r4, #1
10008342:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
10008344:	2c00      	cmp	r4, #0
10008346:	d023      	beq.n	10008390 <i2c_read+0x80>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008348:	4649      	mov	r1, r9
1000834a:	0028      	movs	r0, r5
1000834c:	47b8      	blx	r7
1000834e:	2800      	cmp	r0, #0
10008350:	d1f6      	bne.n	10008340 <i2c_read+0x30>
10008352:	4b16      	ldr	r3, [pc, #88]	; (100083ac <i2c_read+0x9c>)
10008354:	4c12      	ldr	r4, [pc, #72]	; (100083a0 <i2c_read+0x90>)
10008356:	4699      	mov	r9, r3
10008358:	e003      	b.n	10008362 <i2c_read+0x52>
1000835a:	3c01      	subs	r4, #1
1000835c:	b2a4      	uxth	r4, r4
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
1000835e:	2c00      	cmp	r4, #0
10008360:	d016      	beq.n	10008390 <i2c_read+0x80>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008362:	0031      	movs	r1, r6
10008364:	0028      	movs	r0, r5
10008366:	47c8      	blx	r9
10008368:	2800      	cmp	r0, #0
1000836a:	d1f6      	bne.n	1000835a <i2c_read+0x4a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000836c:	4652      	mov	r2, sl
1000836e:	2300      	movs	r3, #0
10008370:	2a00      	cmp	r2, #0
10008372:	d007      	beq.n	10008384 <i2c_read+0x74>
        data[i] = i2c_rpacket.data[i];
10008374:	4641      	mov	r1, r8
10008376:	6872      	ldr	r2, [r6, #4]
10008378:	5cd2      	ldrb	r2, [r2, r3]
1000837a:	54ca      	strb	r2, [r1, r3]
1000837c:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000837e:	b2da      	uxtb	r2, r3
10008380:	4592      	cmp	sl, r2
10008382:	d8f7      	bhi.n	10008374 <i2c_read+0x64>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008384:	2000      	movs	r0, #0
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
}
10008386:	bc1c      	pop	{r2, r3, r4}
10008388:	4690      	mov	r8, r2
1000838a:	4699      	mov	r9, r3
1000838c:	46a2      	mov	sl, r4
1000838e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008390:	2001      	movs	r0, #1
10008392:	4240      	negs	r0, r0
10008394:	e7f7      	b.n	10008386 <i2c_read+0x76>
10008396:	46c0      	nop			; (mov r8, r8)
10008398:	1001d2e8 	.word	0x1001d2e8
1000839c:	1001d2d8 	.word	0x1001d2d8
100083a0:	000003e9 	.word	0x000003e9
100083a4:	1001d2e0 	.word	0x1001d2e0
100083a8:	1000d479 	.word	0x1000d479
100083ac:	1000d429 	.word	0x1000d429

100083b0 <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083b0:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083b2:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083b4:	4c17      	ldr	r4, [pc, #92]	; (10008414 <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083b6:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083b8:	5ce3      	ldrb	r3, [r4, r3]
100083ba:	2b00      	cmp	r3, #0
100083bc:	d012      	beq.n	100083e4 <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
100083be:	466b      	mov	r3, sp
100083c0:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
100083c2:	2800      	cmp	r0, #0
100083c4:	d117      	bne.n	100083f6 <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
100083c6:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100083c8:	6823      	ldr	r3, [r4, #0]
100083ca:	2201      	movs	r2, #1
100083cc:	7c59      	ldrb	r1, [r3, #17]
100083ce:	6863      	ldr	r3, [r4, #4]
100083d0:	4e11      	ldr	r6, [pc, #68]	; (10008418 <set_int_enable+0x68>)
100083d2:	7818      	ldrb	r0, [r3, #0]
100083d4:	002b      	movs	r3, r5
100083d6:	47b0      	blx	r6
100083d8:	2800      	cmp	r0, #0
100083da:	d118      	bne.n	1000840e <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
100083dc:	782b      	ldrb	r3, [r5, #0]
100083de:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
100083e0:	b002      	add	sp, #8
100083e2:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
100083e4:	7aa3      	ldrb	r3, [r4, #10]
100083e6:	2b00      	cmp	r3, #0
100083e8:	d011      	beq.n	1000840e <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100083ea:	2800      	cmp	r0, #0
100083ec:	d106      	bne.n	100083fc <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
100083ee:	466b      	mov	r3, sp
100083f0:	1ddd      	adds	r5, r3, #7
100083f2:	71d8      	strb	r0, [r3, #7]
100083f4:	e7e8      	b.n	100083c8 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
100083f6:	2302      	movs	r3, #2
100083f8:	702b      	strb	r3, [r5, #0]
100083fa:	e7e5      	b.n	100083c8 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100083fc:	7c63      	ldrb	r3, [r4, #17]
            return 0;
100083fe:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008400:	2b00      	cmp	r3, #0
10008402:	d1ed      	bne.n	100083e0 <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
10008404:	466b      	mov	r3, sp
10008406:	1ddd      	adds	r5, r3, #7
10008408:	2301      	movs	r3, #1
1000840a:	702b      	strb	r3, [r5, #0]
1000840c:	e7dc      	b.n	100083c8 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
1000840e:	2001      	movs	r0, #1
10008410:	4240      	negs	r0, r0
10008412:	e7e5      	b.n	100083e0 <set_int_enable+0x30>
10008414:	1001b3a8 	.word	0x1001b3a8
10008418:	100082b9 	.word	0x100082b9

1000841c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
1000841c:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000841e:	4c54      	ldr	r4, [pc, #336]	; (10008570 <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008420:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008422:	7aa3      	ldrb	r3, [r4, #10]
10008424:	2b00      	cmp	r3, #0
10008426:	d100      	bne.n	1000842a <mpu_reset_fifo+0xe>
10008428:	e08f      	b.n	1000854a <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
1000842a:	466b      	mov	r3, sp
1000842c:	1ddd      	adds	r5, r3, #7
1000842e:	2300      	movs	r3, #0
10008430:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008432:	6823      	ldr	r3, [r4, #0]
10008434:	2201      	movs	r2, #1
10008436:	7c59      	ldrb	r1, [r3, #17]
10008438:	6863      	ldr	r3, [r4, #4]
1000843a:	4e4e      	ldr	r6, [pc, #312]	; (10008574 <mpu_reset_fifo+0x158>)
1000843c:	7818      	ldrb	r0, [r3, #0]
1000843e:	002b      	movs	r3, r5
10008440:	47b0      	blx	r6
10008442:	2800      	cmp	r0, #0
10008444:	d000      	beq.n	10008448 <mpu_reset_fifo+0x2c>
10008446:	e080      	b.n	1000854a <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008448:	6823      	ldr	r3, [r4, #0]
1000844a:	2201      	movs	r2, #1
1000844c:	7959      	ldrb	r1, [r3, #5]
1000844e:	6863      	ldr	r3, [r4, #4]
10008450:	7818      	ldrb	r0, [r3, #0]
10008452:	002b      	movs	r3, r5
10008454:	47b0      	blx	r6
10008456:	2800      	cmp	r0, #0
10008458:	d177      	bne.n	1000854a <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000845a:	6823      	ldr	r3, [r4, #0]
1000845c:	2201      	movs	r2, #1
1000845e:	7919      	ldrb	r1, [r3, #4]
10008460:	6863      	ldr	r3, [r4, #4]
10008462:	7818      	ldrb	r0, [r3, #0]
10008464:	002b      	movs	r3, r5
10008466:	47b0      	blx	r6
10008468:	2800      	cmp	r0, #0
1000846a:	d16e      	bne.n	1000854a <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
1000846c:	2324      	movs	r3, #36	; 0x24
1000846e:	5ce3      	ldrb	r3, [r4, r3]
10008470:	2b00      	cmp	r3, #0
10008472:	d034      	beq.n	100084de <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008474:	230c      	movs	r3, #12
10008476:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008478:	6823      	ldr	r3, [r4, #0]
1000847a:	2201      	movs	r2, #1
1000847c:	7919      	ldrb	r1, [r3, #4]
1000847e:	6863      	ldr	r3, [r4, #4]
10008480:	7818      	ldrb	r0, [r3, #0]
10008482:	002b      	movs	r3, r5
10008484:	47b0      	blx	r6
10008486:	2800      	cmp	r0, #0
10008488:	d15f      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
1000848a:	4b3b      	ldr	r3, [pc, #236]	; (10008578 <mpu_reset_fifo+0x15c>)
1000848c:	3032      	adds	r0, #50	; 0x32
1000848e:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008490:	23c0      	movs	r3, #192	; 0xc0
10008492:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008494:	7aa3      	ldrb	r3, [r4, #10]
10008496:	07db      	lsls	r3, r3, #31
10008498:	d461      	bmi.n	1000855e <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000849a:	6823      	ldr	r3, [r4, #0]
1000849c:	2201      	movs	r2, #1
1000849e:	7919      	ldrb	r1, [r3, #4]
100084a0:	6863      	ldr	r3, [r4, #4]
100084a2:	7818      	ldrb	r0, [r3, #0]
100084a4:	002b      	movs	r3, r5
100084a6:	47b0      	blx	r6
100084a8:	2800      	cmp	r0, #0
100084aa:	d14e      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100084ac:	7c63      	ldrb	r3, [r4, #17]
100084ae:	2b00      	cmp	r3, #0
100084b0:	d158      	bne.n	10008564 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100084b2:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100084b4:	6823      	ldr	r3, [r4, #0]
100084b6:	2201      	movs	r2, #1
100084b8:	7c59      	ldrb	r1, [r3, #17]
100084ba:	6863      	ldr	r3, [r4, #4]
100084bc:	7818      	ldrb	r0, [r3, #0]
100084be:	002b      	movs	r3, r5
100084c0:	47b0      	blx	r6
100084c2:	2800      	cmp	r0, #0
100084c4:	d141      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084c6:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
100084c8:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084ca:	7959      	ldrb	r1, [r3, #5]
100084cc:	6863      	ldr	r3, [r4, #4]
100084ce:	2201      	movs	r2, #1
100084d0:	7818      	ldrb	r0, [r3, #0]
100084d2:	002b      	movs	r3, r5
100084d4:	47b0      	blx	r6
100084d6:	1e43      	subs	r3, r0, #1
100084d8:	4198      	sbcs	r0, r3
100084da:	4240      	negs	r0, r0
100084dc:	e037      	b.n	1000854e <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100084de:	2304      	movs	r3, #4
100084e0:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084e2:	6823      	ldr	r3, [r4, #0]
100084e4:	2201      	movs	r2, #1
100084e6:	7919      	ldrb	r1, [r3, #4]
100084e8:	6863      	ldr	r3, [r4, #4]
100084ea:	7818      	ldrb	r0, [r3, #0]
100084ec:	002b      	movs	r3, r5
100084ee:	47b0      	blx	r6
100084f0:	2800      	cmp	r0, #0
100084f2:	d12a      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100084f4:	7ca3      	ldrb	r3, [r4, #18]
100084f6:	2b00      	cmp	r3, #0
100084f8:	d02b      	beq.n	10008552 <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
100084fa:	2340      	movs	r3, #64	; 0x40
100084fc:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084fe:	6823      	ldr	r3, [r4, #0]
10008500:	2201      	movs	r2, #1
10008502:	7919      	ldrb	r1, [r3, #4]
10008504:	6863      	ldr	r3, [r4, #4]
10008506:	7818      	ldrb	r0, [r3, #0]
10008508:	002b      	movs	r3, r5
1000850a:	47b0      	blx	r6
1000850c:	2800      	cmp	r0, #0
1000850e:	d11c      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008510:	4b19      	ldr	r3, [pc, #100]	; (10008578 <mpu_reset_fifo+0x15c>)
10008512:	3032      	adds	r0, #50	; 0x32
10008514:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008516:	7c63      	ldrb	r3, [r4, #17]
10008518:	2b00      	cmp	r3, #0
1000851a:	d026      	beq.n	1000856a <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
1000851c:	2301      	movs	r3, #1
1000851e:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008520:	6823      	ldr	r3, [r4, #0]
10008522:	2201      	movs	r2, #1
10008524:	7c59      	ldrb	r1, [r3, #17]
10008526:	6863      	ldr	r3, [r4, #4]
10008528:	7818      	ldrb	r0, [r3, #0]
1000852a:	002b      	movs	r3, r5
1000852c:	47b0      	blx	r6
1000852e:	2800      	cmp	r0, #0
10008530:	d10b      	bne.n	1000854a <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008532:	0023      	movs	r3, r4
10008534:	6822      	ldr	r2, [r4, #0]
10008536:	3310      	adds	r3, #16
10008538:	7951      	ldrb	r1, [r2, #5]
1000853a:	6862      	ldr	r2, [r4, #4]
1000853c:	7810      	ldrb	r0, [r2, #0]
1000853e:	2201      	movs	r2, #1
10008540:	47b0      	blx	r6
10008542:	1e43      	subs	r3, r0, #1
10008544:	4198      	sbcs	r0, r3
10008546:	4240      	negs	r0, r0
10008548:	e001      	b.n	1000854e <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000854a:	2001      	movs	r0, #1
1000854c:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
1000854e:	b002      	add	sp, #8
10008550:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10008552:	7aa3      	ldrb	r3, [r4, #10]
10008554:	07db      	lsls	r3, r3, #31
10008556:	d5d0      	bpl.n	100084fa <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008558:	2360      	movs	r3, #96	; 0x60
1000855a:	702b      	strb	r3, [r5, #0]
1000855c:	e7cf      	b.n	100084fe <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
1000855e:	23e0      	movs	r3, #224	; 0xe0
10008560:	702b      	strb	r3, [r5, #0]
10008562:	e79a      	b.n	1000849a <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
10008564:	2302      	movs	r3, #2
10008566:	702b      	strb	r3, [r5, #0]
10008568:	e7a4      	b.n	100084b4 <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
1000856a:	702b      	strb	r3, [r5, #0]
1000856c:	e7d8      	b.n	10008520 <mpu_reset_fifo+0x104>
1000856e:	46c0      	nop			; (mov r8, r8)
10008570:	1001b3a8 	.word	0x1001b3a8
10008574:	100082b9 	.word	0x100082b9
10008578:	1000810d 	.word	0x1000810d

1000857c <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
1000857c:	4b0e      	ldr	r3, [pc, #56]	; (100085b8 <mpu_get_gyro_fsr+0x3c>)
1000857e:	7a1b      	ldrb	r3, [r3, #8]
10008580:	2b01      	cmp	r3, #1
10008582:	d014      	beq.n	100085ae <mpu_get_gyro_fsr+0x32>
10008584:	2b00      	cmp	r3, #0
10008586:	d00f      	beq.n	100085a8 <mpu_get_gyro_fsr+0x2c>
10008588:	2b02      	cmp	r3, #2
1000858a:	d006      	beq.n	1000859a <mpu_get_gyro_fsr+0x1e>
1000858c:	2b03      	cmp	r3, #3
1000858e:	d108      	bne.n	100085a2 <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008590:	23fa      	movs	r3, #250	; 0xfa
10008592:	00db      	lsls	r3, r3, #3
10008594:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
10008596:	2000      	movs	r0, #0
10008598:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
1000859a:	23fa      	movs	r3, #250	; 0xfa
1000859c:	009b      	lsls	r3, r3, #2
1000859e:	8003      	strh	r3, [r0, #0]
        break;
100085a0:	e7f9      	b.n	10008596 <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
100085a2:	2300      	movs	r3, #0
100085a4:	8003      	strh	r3, [r0, #0]
        break;
100085a6:	e7f6      	b.n	10008596 <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
100085a8:	23fa      	movs	r3, #250	; 0xfa
100085aa:	8003      	strh	r3, [r0, #0]
        break;
100085ac:	e7f3      	b.n	10008596 <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100085ae:	23fa      	movs	r3, #250	; 0xfa
100085b0:	005b      	lsls	r3, r3, #1
100085b2:	8003      	strh	r3, [r0, #0]
        break;
100085b4:	e7ef      	b.n	10008596 <mpu_get_gyro_fsr+0x1a>
100085b6:	46c0      	nop			; (mov r8, r8)
100085b8:	1001b3a8 	.word	0x1001b3a8

100085bc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100085bc:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085be:	4c20      	ldr	r4, [pc, #128]	; (10008640 <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100085c0:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100085c2:	7aa3      	ldrb	r3, [r4, #10]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d02a      	beq.n	1000861e <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
100085c8:	23fa      	movs	r3, #250	; 0xfa
100085ca:	005b      	lsls	r3, r3, #1
100085cc:	4298      	cmp	r0, r3
100085ce:	d030      	beq.n	10008632 <mpu_set_gyro_fsr+0x76>
100085d0:	d90d      	bls.n	100085ee <mpu_set_gyro_fsr+0x32>
100085d2:	23fa      	movs	r3, #250	; 0xfa
100085d4:	009b      	lsls	r3, r3, #2
100085d6:	4298      	cmp	r0, r3
100085d8:	d025      	beq.n	10008626 <mpu_set_gyro_fsr+0x6a>
100085da:	23fa      	movs	r3, #250	; 0xfa
100085dc:	00db      	lsls	r3, r3, #3
100085de:	4298      	cmp	r0, r3
100085e0:	d11d      	bne.n	1000861e <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
100085e2:	466b      	mov	r3, sp
100085e4:	1ddd      	adds	r5, r3, #7
100085e6:	2318      	movs	r3, #24
100085e8:	702b      	strb	r3, [r5, #0]
        break;
100085ea:	3b15      	subs	r3, #21
100085ec:	e005      	b.n	100085fa <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100085ee:	28fa      	cmp	r0, #250	; 0xfa
100085f0:	d115      	bne.n	1000861e <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
100085f2:	466b      	mov	r3, sp
100085f4:	1ddd      	adds	r5, r3, #7
100085f6:	2300      	movs	r3, #0
100085f8:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
100085fa:	7a22      	ldrb	r2, [r4, #8]
        return 0;
100085fc:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
100085fe:	429a      	cmp	r2, r3
10008600:	d00f      	beq.n	10008622 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008602:	6823      	ldr	r3, [r4, #0]
10008604:	2201      	movs	r2, #1
10008606:	7999      	ldrb	r1, [r3, #6]
10008608:	6863      	ldr	r3, [r4, #4]
1000860a:	4e0e      	ldr	r6, [pc, #56]	; (10008644 <mpu_set_gyro_fsr+0x88>)
1000860c:	7818      	ldrb	r0, [r3, #0]
1000860e:	002b      	movs	r3, r5
10008610:	47b0      	blx	r6
10008612:	2800      	cmp	r0, #0
10008614:	d103      	bne.n	1000861e <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008616:	782b      	ldrb	r3, [r5, #0]
10008618:	08db      	lsrs	r3, r3, #3
1000861a:	7223      	strb	r3, [r4, #8]
    return 0;
1000861c:	e001      	b.n	10008622 <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
1000861e:	2001      	movs	r0, #1
10008620:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008622:	b002      	add	sp, #8
10008624:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
10008626:	466b      	mov	r3, sp
10008628:	1ddd      	adds	r5, r3, #7
1000862a:	2310      	movs	r3, #16
1000862c:	702b      	strb	r3, [r5, #0]
        break;
1000862e:	3b0e      	subs	r3, #14
10008630:	e7e3      	b.n	100085fa <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
10008632:	466b      	mov	r3, sp
10008634:	1ddd      	adds	r5, r3, #7
10008636:	2308      	movs	r3, #8
10008638:	702b      	strb	r3, [r5, #0]
        break;
1000863a:	3b07      	subs	r3, #7
1000863c:	e7dd      	b.n	100085fa <mpu_set_gyro_fsr+0x3e>
1000863e:	46c0      	nop			; (mov r8, r8)
10008640:	1001b3a8 	.word	0x1001b3a8
10008644:	100082b9 	.word	0x100082b9

10008648 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008648:	4a10      	ldr	r2, [pc, #64]	; (1000868c <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
1000864a:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
1000864c:	7a53      	ldrb	r3, [r2, #9]
1000864e:	2b01      	cmp	r3, #1
10008650:	d018      	beq.n	10008684 <mpu_get_accel_fsr+0x3c>
10008652:	2b00      	cmp	r3, #0
10008654:	d013      	beq.n	1000867e <mpu_get_accel_fsr+0x36>
10008656:	2b02      	cmp	r3, #2
10008658:	d00b      	beq.n	10008672 <mpu_get_accel_fsr+0x2a>
1000865a:	2b03      	cmp	r3, #3
1000865c:	d10c      	bne.n	10008678 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
1000865e:	2310      	movs	r3, #16
10008660:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008662:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
10008664:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
10008666:	2b00      	cmp	r3, #0
10008668:	d002      	beq.n	10008670 <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
1000866a:	780b      	ldrb	r3, [r1, #0]
1000866c:	005b      	lsls	r3, r3, #1
1000866e:	700b      	strb	r3, [r1, #0]
    return 0;
}
10008670:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
10008672:	2308      	movs	r3, #8
10008674:	7003      	strb	r3, [r0, #0]
        break;
10008676:	e7f4      	b.n	10008662 <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008678:	2001      	movs	r0, #1
1000867a:	4240      	negs	r0, r0
1000867c:	e7f8      	b.n	10008670 <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
1000867e:	2302      	movs	r3, #2
10008680:	7003      	strb	r3, [r0, #0]
        break;
10008682:	e7ee      	b.n	10008662 <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
10008684:	2304      	movs	r3, #4
10008686:	7003      	strb	r3, [r0, #0]
        break;
10008688:	e7eb      	b.n	10008662 <mpu_get_accel_fsr+0x1a>
1000868a:	46c0      	nop			; (mov r8, r8)
1000868c:	1001b3a8 	.word	0x1001b3a8

10008690 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008690:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008692:	4c1d      	ldr	r4, [pc, #116]	; (10008708 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008694:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008696:	7aa3      	ldrb	r3, [r4, #10]
10008698:	2b00      	cmp	r3, #0
1000869a:	d024      	beq.n	100086e6 <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
1000869c:	2804      	cmp	r0, #4
1000869e:	d02c      	beq.n	100086fa <mpu_set_accel_fsr+0x6a>
100086a0:	d909      	bls.n	100086b6 <mpu_set_accel_fsr+0x26>
100086a2:	2808      	cmp	r0, #8
100086a4:	d023      	beq.n	100086ee <mpu_set_accel_fsr+0x5e>
100086a6:	2810      	cmp	r0, #16
100086a8:	d11d      	bne.n	100086e6 <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
100086aa:	466b      	mov	r3, sp
100086ac:	1ddd      	adds	r5, r3, #7
100086ae:	2318      	movs	r3, #24
100086b0:	702b      	strb	r3, [r5, #0]
        break;
100086b2:	3b15      	subs	r3, #21
100086b4:	e005      	b.n	100086c2 <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100086b6:	2802      	cmp	r0, #2
100086b8:	d115      	bne.n	100086e6 <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
100086ba:	466b      	mov	r3, sp
100086bc:	1ddd      	adds	r5, r3, #7
100086be:	2300      	movs	r3, #0
100086c0:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100086c2:	7a62      	ldrb	r2, [r4, #9]
        return 0;
100086c4:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100086c6:	429a      	cmp	r2, r3
100086c8:	d00f      	beq.n	100086ea <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100086ca:	6823      	ldr	r3, [r4, #0]
100086cc:	2201      	movs	r2, #1
100086ce:	79d9      	ldrb	r1, [r3, #7]
100086d0:	6863      	ldr	r3, [r4, #4]
100086d2:	4e0e      	ldr	r6, [pc, #56]	; (1000870c <mpu_set_accel_fsr+0x7c>)
100086d4:	7818      	ldrb	r0, [r3, #0]
100086d6:	002b      	movs	r3, r5
100086d8:	47b0      	blx	r6
100086da:	2800      	cmp	r0, #0
100086dc:	d103      	bne.n	100086e6 <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100086de:	782b      	ldrb	r3, [r5, #0]
100086e0:	08db      	lsrs	r3, r3, #3
100086e2:	7263      	strb	r3, [r4, #9]
    return 0;
100086e4:	e001      	b.n	100086ea <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100086e6:	2001      	movs	r0, #1
100086e8:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100086ea:	b002      	add	sp, #8
100086ec:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
100086ee:	466b      	mov	r3, sp
100086f0:	1ddd      	adds	r5, r3, #7
100086f2:	2310      	movs	r3, #16
100086f4:	702b      	strb	r3, [r5, #0]
        break;
100086f6:	3b0e      	subs	r3, #14
100086f8:	e7e3      	b.n	100086c2 <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
100086fa:	466b      	mov	r3, sp
100086fc:	1ddd      	adds	r5, r3, #7
100086fe:	2308      	movs	r3, #8
10008700:	702b      	strb	r3, [r5, #0]
        break;
10008702:	3b07      	subs	r3, #7
10008704:	e7dd      	b.n	100086c2 <mpu_set_accel_fsr+0x32>
10008706:	46c0      	nop			; (mov r8, r8)
10008708:	1001b3a8 	.word	0x1001b3a8
1000870c:	100082b9 	.word	0x100082b9

10008710 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008710:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008712:	4c22      	ldr	r4, [pc, #136]	; (1000879c <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008714:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008716:	7aa3      	ldrb	r3, [r4, #10]
10008718:	2b00      	cmp	r3, #0
1000871a:	d033      	beq.n	10008784 <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
1000871c:	466b      	mov	r3, sp
1000871e:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008720:	28bb      	cmp	r0, #187	; 0xbb
10008722:	d822      	bhi.n	1000876a <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
10008724:	2861      	cmp	r0, #97	; 0x61
10008726:	d923      	bls.n	10008770 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008728:	2302      	movs	r3, #2
1000872a:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000872c:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
1000872e:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008730:	429a      	cmp	r2, r3
10008732:	d018      	beq.n	10008766 <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008734:	6823      	ldr	r3, [r4, #0]
10008736:	2201      	movs	r2, #1
10008738:	7899      	ldrb	r1, [r3, #2]
1000873a:	6863      	ldr	r3, [r4, #4]
1000873c:	4e18      	ldr	r6, [pc, #96]	; (100087a0 <mpu_set_lpf+0x90>)
1000873e:	7818      	ldrb	r0, [r3, #0]
10008740:	002b      	movs	r3, r5
10008742:	47b0      	blx	r6
10008744:	2800      	cmp	r0, #0
10008746:	d11d      	bne.n	10008784 <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008748:	2340      	movs	r3, #64	; 0x40
1000874a:	782a      	ldrb	r2, [r5, #0]
1000874c:	4313      	orrs	r3, r2
1000874e:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008750:	6823      	ldr	r3, [r4, #0]
10008752:	2201      	movs	r2, #1
10008754:	7a19      	ldrb	r1, [r3, #8]
10008756:	6863      	ldr	r3, [r4, #4]
10008758:	7818      	ldrb	r0, [r3, #0]
1000875a:	002b      	movs	r3, r5
1000875c:	47b0      	blx	r6
1000875e:	2800      	cmp	r0, #0
10008760:	d110      	bne.n	10008784 <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008762:	782b      	ldrb	r3, [r5, #0]
10008764:	72e3      	strb	r3, [r4, #11]
    return 0;
}
10008766:	b002      	add	sp, #8
10008768:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
1000876a:	2301      	movs	r3, #1
1000876c:	702b      	strb	r3, [r5, #0]
1000876e:	e7dd      	b.n	1000872c <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
10008770:	2829      	cmp	r0, #41	; 0x29
10008772:	d804      	bhi.n	1000877e <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
10008774:	2813      	cmp	r0, #19
10008776:	d908      	bls.n	1000878a <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
10008778:	2304      	movs	r3, #4
1000877a:	702b      	strb	r3, [r5, #0]
1000877c:	e7d6      	b.n	1000872c <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
1000877e:	2303      	movs	r3, #3
10008780:	702b      	strb	r3, [r5, #0]
10008782:	e7d3      	b.n	1000872c <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008784:	2001      	movs	r0, #1
10008786:	4240      	negs	r0, r0
10008788:	e7ed      	b.n	10008766 <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
1000878a:	2809      	cmp	r0, #9
1000878c:	d902      	bls.n	10008794 <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
1000878e:	2305      	movs	r3, #5
10008790:	702b      	strb	r3, [r5, #0]
10008792:	e7cb      	b.n	1000872c <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
10008794:	2306      	movs	r3, #6
10008796:	702b      	strb	r3, [r5, #0]
10008798:	e7c8      	b.n	1000872c <mpu_set_lpf+0x1c>
1000879a:	46c0      	nop			; (mov r8, r8)
1000879c:	1001b3a8 	.word	0x1001b3a8
100087a0:	100082b9 	.word	0x100082b9

100087a4 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100087a4:	2224      	movs	r2, #36	; 0x24
100087a6:	4b05      	ldr	r3, [pc, #20]	; (100087bc <mpu_get_sample_rate+0x18>)
100087a8:	5c9a      	ldrb	r2, [r3, r2]
100087aa:	2a00      	cmp	r2, #0
100087ac:	d103      	bne.n	100087b6 <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100087ae:	89db      	ldrh	r3, [r3, #14]
100087b0:	8003      	strh	r3, [r0, #0]
    return 0;
100087b2:	2000      	movs	r0, #0
}
100087b4:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100087b6:	2001      	movs	r0, #1
100087b8:	4240      	negs	r0, r0
100087ba:	e7fb      	b.n	100087b4 <mpu_get_sample_rate+0x10>
100087bc:	1001b3a8 	.word	0x1001b3a8

100087c0 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100087c0:	b530      	push	{r4, r5, lr}
100087c2:	0001      	movs	r1, r0
100087c4:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100087c6:	2800      	cmp	r0, #0
100087c8:	d020      	beq.n	1000880c <mpu_set_compass_sample_rate+0x4c>
100087ca:	4c12      	ldr	r4, [pc, #72]	; (10008814 <mpu_set_compass_sample_rate+0x54>)
100087cc:	89e0      	ldrh	r0, [r4, #14]
100087ce:	4281      	cmp	r1, r0
100087d0:	d81c      	bhi.n	1000880c <mpu_set_compass_sample_rate+0x4c>
100087d2:	2964      	cmp	r1, #100	; 0x64
100087d4:	d81a      	bhi.n	1000880c <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100087d6:	4b10      	ldr	r3, [pc, #64]	; (10008818 <mpu_set_compass_sample_rate+0x58>)
100087d8:	4798      	blx	r3
100087da:	466b      	mov	r3, sp
100087dc:	3801      	subs	r0, #1
100087de:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100087e0:	2324      	movs	r3, #36	; 0x24
100087e2:	6822      	ldr	r2, [r4, #0]
100087e4:	4d0d      	ldr	r5, [pc, #52]	; (1000881c <mpu_set_compass_sample_rate+0x5c>)
100087e6:	5cd1      	ldrb	r1, [r2, r3]
100087e8:	6863      	ldr	r3, [r4, #4]
100087ea:	2201      	movs	r2, #1
100087ec:	7818      	ldrb	r0, [r3, #0]
100087ee:	466b      	mov	r3, sp
100087f0:	3307      	adds	r3, #7
100087f2:	47a8      	blx	r5
100087f4:	1e05      	subs	r5, r0, #0
100087f6:	d109      	bne.n	1000880c <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
100087f8:	466b      	mov	r3, sp
100087fa:	79d9      	ldrb	r1, [r3, #7]
100087fc:	89e0      	ldrh	r0, [r4, #14]
100087fe:	3101      	adds	r1, #1
10008800:	4b07      	ldr	r3, [pc, #28]	; (10008820 <mpu_set_compass_sample_rate+0x60>)
10008802:	4798      	blx	r3
10008804:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
10008806:	0028      	movs	r0, r5
10008808:	b003      	add	sp, #12
1000880a:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
1000880c:	2501      	movs	r5, #1
1000880e:	426d      	negs	r5, r5
10008810:	e7f9      	b.n	10008806 <mpu_set_compass_sample_rate+0x46>
10008812:	46c0      	nop			; (mov r8, r8)
10008814:	1001b3a8 	.word	0x1001b3a8
10008818:	10014db5 	.word	0x10014db5
1000881c:	100082b9 	.word	0x100082b9
10008820:	10014ec9 	.word	0x10014ec9

10008824 <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008824:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008826:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008828:	4d14      	ldr	r5, [pc, #80]	; (1000887c <mpu_configure_fifo+0x58>)
        return 0;
1000882a:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000882c:	5ceb      	ldrb	r3, [r5, r3]
1000882e:	2b00      	cmp	r3, #0
10008830:	d113      	bne.n	1000885a <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008832:	7aac      	ldrb	r4, [r5, #10]
10008834:	2c00      	cmp	r4, #0
10008836:	d01d      	beq.n	10008874 <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008838:	3301      	adds	r3, #1
1000883a:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
1000883c:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
1000883e:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008840:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008842:	1b04      	subs	r4, r0, r4
10008844:	1e63      	subs	r3, r4, #1
10008846:	419c      	sbcs	r4, r3
10008848:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
1000884a:	2800      	cmp	r0, #0
1000884c:	d107      	bne.n	1000885e <mpu_configure_fifo+0x3a>
1000884e:	7d2b      	ldrb	r3, [r5, #20]
10008850:	2b00      	cmp	r3, #0
10008852:	d000      	beq.n	10008856 <mpu_configure_fifo+0x32>
            set_int_enable(1);
10008854:	2001      	movs	r0, #1
10008856:	4b0a      	ldr	r3, [pc, #40]	; (10008880 <mpu_configure_fifo+0x5c>)
10008858:	4798      	blx	r3
            }
        }
    }

    return result;
}
1000885a:	0020      	movs	r0, r4
1000885c:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
1000885e:	4b08      	ldr	r3, [pc, #32]	; (10008880 <mpu_configure_fifo+0x5c>)
10008860:	2001      	movs	r0, #1
10008862:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008864:	4b07      	ldr	r3, [pc, #28]	; (10008884 <mpu_configure_fifo+0x60>)
10008866:	4798      	blx	r3
10008868:	2800      	cmp	r0, #0
1000886a:	d0f6      	beq.n	1000885a <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
1000886c:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
1000886e:	742e      	strb	r6, [r5, #16]
                return -1;
10008870:	4264      	negs	r4, r4
10008872:	e7f2      	b.n	1000885a <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008874:	2401      	movs	r4, #1
10008876:	4264      	negs	r4, r4
10008878:	e7ef      	b.n	1000885a <mpu_configure_fifo+0x36>
1000887a:	46c0      	nop			; (mov r8, r8)
1000887c:	1001b3a8 	.word	0x1001b3a8
10008880:	100083b1 	.word	0x100083b1
10008884:	1000841d 	.word	0x1000841d

10008888 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008888:	b5f0      	push	{r4, r5, r6, r7, lr}
1000888a:	4657      	mov	r7, sl
1000888c:	464e      	mov	r6, r9
1000888e:	4645      	mov	r5, r8
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008890:	2324      	movs	r3, #36	; 0x24
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008892:	b4e0      	push	{r5, r6, r7}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008894:	4c26      	ldr	r4, [pc, #152]	; (10008930 <mpu_read_fifo_stream+0xa8>)
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
10008896:	b082      	sub	sp, #8
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
10008898:	5ce3      	ldrb	r3, [r4, r3]
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
1000889a:	0007      	movs	r7, r0
1000889c:	468a      	mov	sl, r1
1000889e:	4691      	mov	r9, r2
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
100088a0:	2b00      	cmp	r3, #0
100088a2:	d03d      	beq.n	10008920 <mpu_read_fifo_stream+0x98>
        return -1;
    if (!st.chip_cfg.sensors)
100088a4:	7aa3      	ldrb	r3, [r4, #10]
100088a6:	2b00      	cmp	r3, #0
100088a8:	d03a      	beq.n	10008920 <mpu_read_fifo_stream+0x98>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
100088aa:	6823      	ldr	r3, [r4, #0]
100088ac:	ae01      	add	r6, sp, #4
100088ae:	7b19      	ldrb	r1, [r3, #12]
100088b0:	6863      	ldr	r3, [r4, #4]
100088b2:	4d20      	ldr	r5, [pc, #128]	; (10008934 <mpu_read_fifo_stream+0xac>)
100088b4:	7818      	ldrb	r0, [r3, #0]
100088b6:	2202      	movs	r2, #2
100088b8:	0033      	movs	r3, r6
100088ba:	46a8      	mov	r8, r5
100088bc:	47a8      	blx	r5
100088be:	2800      	cmp	r0, #0
100088c0:	d12e      	bne.n	10008920 <mpu_read_fifo_stream+0x98>
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
100088c2:	7835      	ldrb	r5, [r6, #0]
100088c4:	7873      	ldrb	r3, [r6, #1]
100088c6:	022d      	lsls	r5, r5, #8
100088c8:	431d      	orrs	r5, r3
    if (fifo_count < length) {
100088ca:	42bd      	cmp	r5, r7
100088cc:	d326      	bcc.n	1000891c <mpu_read_fifo_stream+0x94>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
100088ce:	6860      	ldr	r0, [r4, #4]
100088d0:	8843      	ldrh	r3, [r0, #2]
100088d2:	085b      	lsrs	r3, r3, #1
100088d4:	429d      	cmp	r5, r3
100088d6:	d90b      	bls.n	100088f0 <mpu_read_fifo_stream+0x68>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
100088d8:	6823      	ldr	r3, [r4, #0]
100088da:	7800      	ldrb	r0, [r0, #0]
100088dc:	7cd9      	ldrb	r1, [r3, #19]
100088de:	2201      	movs	r2, #1
100088e0:	0033      	movs	r3, r6
100088e2:	47c0      	blx	r8
100088e4:	2800      	cmp	r0, #0
100088e6:	d11b      	bne.n	10008920 <mpu_read_fifo_stream+0x98>
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
100088e8:	7833      	ldrb	r3, [r6, #0]
100088ea:	06db      	lsls	r3, r3, #27
100088ec:	d41b      	bmi.n	10008926 <mpu_read_fifo_stream+0x9e>
100088ee:	6860      	ldr	r0, [r4, #4]
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
100088f0:	6823      	ldr	r3, [r4, #0]
100088f2:	b2fa      	uxtb	r2, r7
100088f4:	7b59      	ldrb	r1, [r3, #13]
100088f6:	7800      	ldrb	r0, [r0, #0]
100088f8:	4653      	mov	r3, sl
100088fa:	47c0      	blx	r8
100088fc:	1e04      	subs	r4, r0, #0
100088fe:	d10f      	bne.n	10008920 <mpu_read_fifo_stream+0x98>
        return -1;
    more[0] = fifo_count / length - 1;
10008900:	4b0d      	ldr	r3, [pc, #52]	; (10008938 <mpu_read_fifo_stream+0xb0>)
10008902:	0039      	movs	r1, r7
10008904:	0028      	movs	r0, r5
10008906:	4798      	blx	r3
10008908:	464b      	mov	r3, r9
1000890a:	3801      	subs	r0, #1
1000890c:	7018      	strb	r0, [r3, #0]
    return 0;
}
1000890e:	0020      	movs	r0, r4
10008910:	b002      	add	sp, #8
10008912:	bc1c      	pop	{r2, r3, r4}
10008914:	4690      	mov	r8, r2
10008916:	4699      	mov	r9, r3
10008918:	46a2      	mov	sl, r4
1000891a:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
1000891c:	464b      	mov	r3, r9
1000891e:	7018      	strb	r0, [r3, #0]
        return -1;
10008920:	2401      	movs	r4, #1
10008922:	4264      	negs	r4, r4
10008924:	e7f3      	b.n	1000890e <mpu_read_fifo_stream+0x86>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
            return -2;
10008926:	2402      	movs	r4, #2
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
10008928:	4b04      	ldr	r3, [pc, #16]	; (1000893c <mpu_read_fifo_stream+0xb4>)
1000892a:	4798      	blx	r3
            return -2;
1000892c:	4264      	negs	r4, r4
1000892e:	e7ee      	b.n	1000890e <mpu_read_fifo_stream+0x86>
10008930:	1001b3a8 	.word	0x1001b3a8
10008934:	10008311 	.word	0x10008311
10008938:	10014db5 	.word	0x10014db5
1000893c:	1000841d 	.word	0x1000841d

10008940 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008940:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008942:	4c36      	ldr	r4, [pc, #216]	; (10008a1c <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008944:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008946:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008948:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
1000894a:	4283      	cmp	r3, r0
1000894c:	d05f      	beq.n	10008a0e <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1000894e:	466b      	mov	r3, sp
10008950:	1ddd      	adds	r5, r3, #7
10008952:	6823      	ldr	r3, [r4, #0]
10008954:	2201      	movs	r2, #1
10008956:	7919      	ldrb	r1, [r3, #4]
10008958:	6863      	ldr	r3, [r4, #4]
1000895a:	4f31      	ldr	r7, [pc, #196]	; (10008a20 <mpu_set_bypass+0xe0>)
1000895c:	7818      	ldrb	r0, [r3, #0]
1000895e:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
10008960:	2e00      	cmp	r6, #0
10008962:	d02e      	beq.n	100089c2 <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008964:	47b8      	blx	r7
10008966:	2800      	cmp	r0, #0
10008968:	d155      	bne.n	10008a16 <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
1000896a:	2220      	movs	r2, #32
1000896c:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
1000896e:	4f2d      	ldr	r7, [pc, #180]	; (10008a24 <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008970:	4393      	bics	r3, r2
10008972:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008974:	6823      	ldr	r3, [r4, #0]
10008976:	3a1f      	subs	r2, #31
10008978:	7919      	ldrb	r1, [r3, #4]
1000897a:	6863      	ldr	r3, [r4, #4]
1000897c:	7818      	ldrb	r0, [r3, #0]
1000897e:	002b      	movs	r3, r5
10008980:	47b8      	blx	r7
10008982:	2800      	cmp	r0, #0
10008984:	d147      	bne.n	10008a16 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008986:	4b28      	ldr	r3, [pc, #160]	; (10008a28 <mpu_set_bypass+0xe8>)
10008988:	3003      	adds	r0, #3
1000898a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
1000898c:	2302      	movs	r3, #2
1000898e:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008990:	3320      	adds	r3, #32
10008992:	5ce3      	ldrb	r3, [r4, r3]
10008994:	2b00      	cmp	r3, #0
10008996:	d137      	bne.n	10008a08 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008998:	2323      	movs	r3, #35	; 0x23
1000899a:	5ce3      	ldrb	r3, [r4, r3]
1000899c:	2b00      	cmp	r3, #0
1000899e:	d003      	beq.n	100089a8 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
100089a0:	2330      	movs	r3, #48	; 0x30
100089a2:	782a      	ldrb	r2, [r5, #0]
100089a4:	4313      	orrs	r3, r2
100089a6:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
100089a8:	6823      	ldr	r3, [r4, #0]
100089aa:	2201      	movs	r2, #1
100089ac:	7dd9      	ldrb	r1, [r3, #23]
100089ae:	6863      	ldr	r3, [r4, #4]
100089b0:	7818      	ldrb	r0, [r3, #0]
100089b2:	002b      	movs	r3, r5
100089b4:	47b8      	blx	r7
100089b6:	2800      	cmp	r0, #0
100089b8:	d12d      	bne.n	10008a16 <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
100089ba:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
100089bc:	74a6      	strb	r6, [r4, #18]
    return 0;
}
100089be:	b003      	add	sp, #12
100089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100089c2:	47b8      	blx	r7
100089c4:	2800      	cmp	r0, #0
100089c6:	d126      	bne.n	10008a16 <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100089c8:	7aa3      	ldrb	r3, [r4, #10]
100089ca:	07db      	lsls	r3, r3, #31
100089cc:	d417      	bmi.n	100089fe <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
100089ce:	2220      	movs	r2, #32
100089d0:	782b      	ldrb	r3, [r5, #0]
100089d2:	4393      	bics	r3, r2
100089d4:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100089d6:	6823      	ldr	r3, [r4, #0]
100089d8:	2201      	movs	r2, #1
100089da:	7919      	ldrb	r1, [r3, #4]
100089dc:	6863      	ldr	r3, [r4, #4]
100089de:	4f11      	ldr	r7, [pc, #68]	; (10008a24 <mpu_set_bypass+0xe4>)
100089e0:	7818      	ldrb	r0, [r3, #0]
100089e2:	002b      	movs	r3, r5
100089e4:	47b8      	blx	r7
100089e6:	2800      	cmp	r0, #0
100089e8:	d115      	bne.n	10008a16 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
100089ea:	4b0f      	ldr	r3, [pc, #60]	; (10008a28 <mpu_set_bypass+0xe8>)
100089ec:	3003      	adds	r0, #3
100089ee:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
100089f0:	2322      	movs	r3, #34	; 0x22
100089f2:	5ce3      	ldrb	r3, [r4, r3]
100089f4:	2b00      	cmp	r3, #0
100089f6:	d00c      	beq.n	10008a12 <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
100089f8:	2380      	movs	r3, #128	; 0x80
100089fa:	702b      	strb	r3, [r5, #0]
100089fc:	e7cc      	b.n	10008998 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
100089fe:	2320      	movs	r3, #32
10008a00:	782a      	ldrb	r2, [r5, #0]
10008a02:	4313      	orrs	r3, r2
10008a04:	702b      	strb	r3, [r5, #0]
10008a06:	e7e6      	b.n	100089d6 <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008a08:	2382      	movs	r3, #130	; 0x82
10008a0a:	702b      	strb	r3, [r5, #0]
10008a0c:	e7c4      	b.n	10008998 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008a0e:	2000      	movs	r0, #0
10008a10:	e7d5      	b.n	100089be <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
10008a12:	702b      	strb	r3, [r5, #0]
10008a14:	e7c0      	b.n	10008998 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008a16:	2001      	movs	r0, #1
10008a18:	4240      	negs	r0, r0
10008a1a:	e7d0      	b.n	100089be <mpu_set_bypass+0x7e>
10008a1c:	1001b3a8 	.word	0x1001b3a8
10008a20:	10008311 	.word	0x10008311
10008a24:	100082b9 	.word	0x100082b9
10008a28:	1000810d 	.word	0x1000810d

10008a2c <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008a2c:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008a2e:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008a30:	4c17      	ldr	r4, [pc, #92]	; (10008a90 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008a32:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008a34:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008a36:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008a38:	4283      	cmp	r3, r0
10008a3a:	d024      	beq.n	10008a86 <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a3c:	466b      	mov	r3, sp
10008a3e:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
10008a40:	2800      	cmp	r0, #0
10008a42:	d11d      	bne.n	10008a80 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
10008a44:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10008a46:	7ca2      	ldrb	r2, [r4, #18]
10008a48:	2a00      	cmp	r2, #0
10008a4a:	d003      	beq.n	10008a54 <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
10008a4c:	2202      	movs	r2, #2
10008a4e:	7819      	ldrb	r1, [r3, #0]
10008a50:	430a      	orrs	r2, r1
10008a52:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
10008a54:	2222      	movs	r2, #34	; 0x22
10008a56:	5ca2      	ldrb	r2, [r4, r2]
10008a58:	2a00      	cmp	r2, #0
10008a5a:	d004      	beq.n	10008a66 <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
10008a5c:	2180      	movs	r1, #128	; 0x80
10008a5e:	781a      	ldrb	r2, [r3, #0]
10008a60:	4249      	negs	r1, r1
10008a62:	430a      	orrs	r2, r1
10008a64:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008a66:	6822      	ldr	r2, [r4, #0]
10008a68:	4e0a      	ldr	r6, [pc, #40]	; (10008a94 <mpu_set_int_latched+0x68>)
10008a6a:	7dd1      	ldrb	r1, [r2, #23]
10008a6c:	6862      	ldr	r2, [r4, #4]
10008a6e:	7810      	ldrb	r0, [r2, #0]
10008a70:	2201      	movs	r2, #1
10008a72:	47b0      	blx	r6
10008a74:	2800      	cmp	r0, #0
10008a76:	d108      	bne.n	10008a8a <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008a78:	2323      	movs	r3, #35	; 0x23
10008a7a:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008a7c:	b002      	add	sp, #8
10008a7e:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a80:	2230      	movs	r2, #48	; 0x30
10008a82:	701a      	strb	r2, [r3, #0]
10008a84:	e7df      	b.n	10008a46 <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008a86:	2000      	movs	r0, #0
10008a88:	e7f8      	b.n	10008a7c <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008a8a:	2001      	movs	r0, #1
10008a8c:	4240      	negs	r0, r0
10008a8e:	e7f5      	b.n	10008a7c <mpu_set_int_latched+0x50>
10008a90:	1001b3a8 	.word	0x1001b3a8
10008a94:	100082b9 	.word	0x100082b9

10008a98 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008a98:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a9a:	0004      	movs	r4, r0
10008a9c:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
10008a9e:	2828      	cmp	r0, #40	; 0x28
10008aa0:	d85a      	bhi.n	10008b58 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10008aa2:	2800      	cmp	r0, #0
10008aa4:	d114      	bne.n	10008ad0 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10008aa6:	4b36      	ldr	r3, [pc, #216]	; (10008b80 <mpu_lp_accel_mode+0xe8>)
10008aa8:	2000      	movs	r0, #0
10008aaa:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008aac:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
10008aae:	ab01      	add	r3, sp, #4
10008ab0:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008ab2:	4c34      	ldr	r4, [pc, #208]	; (10008b84 <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008ab4:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008ab6:	6822      	ldr	r2, [r4, #0]
10008ab8:	4d33      	ldr	r5, [pc, #204]	; (10008b88 <mpu_lp_accel_mode+0xf0>)
10008aba:	7d51      	ldrb	r1, [r2, #21]
10008abc:	6862      	ldr	r2, [r4, #4]
10008abe:	7810      	ldrb	r0, [r2, #0]
10008ac0:	2202      	movs	r2, #2
10008ac2:	47a8      	blx	r5
10008ac4:	1e05      	subs	r5, r0, #0
10008ac6:	d147      	bne.n	10008b58 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008ac8:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008aca:	0028      	movs	r0, r5
10008acc:	b003      	add	sp, #12
10008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ad0:	2001      	movs	r0, #1
10008ad2:	4b2b      	ldr	r3, [pc, #172]	; (10008b80 <mpu_lp_accel_mode+0xe8>)
10008ad4:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008ad6:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008ad8:	2c01      	cmp	r4, #1
10008ada:	d043      	beq.n	10008b64 <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
10008adc:	2c02      	cmp	r4, #2
10008ade:	d044      	beq.n	10008b6a <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10008ae0:	2c05      	cmp	r4, #5
10008ae2:	d93c      	bls.n	10008b5e <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10008ae4:	2c0a      	cmp	r4, #10
10008ae6:	d843      	bhi.n	10008b70 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10008ae8:	2305      	movs	r3, #5
10008aea:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008aec:	4c25      	ldr	r4, [pc, #148]	; (10008b84 <mpu_lp_accel_mode+0xec>)
10008aee:	2201      	movs	r2, #1
10008af0:	6823      	ldr	r3, [r4, #0]
10008af2:	4e25      	ldr	r6, [pc, #148]	; (10008b88 <mpu_lp_accel_mode+0xf0>)
10008af4:	7a59      	ldrb	r1, [r3, #9]
10008af6:	6863      	ldr	r3, [r4, #4]
10008af8:	7818      	ldrb	r0, [r3, #0]
10008afa:	002b      	movs	r3, r5
10008afc:	47b0      	blx	r6
10008afe:	2800      	cmp	r0, #0
10008b00:	d12a      	bne.n	10008b58 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008b02:	6823      	ldr	r3, [r4, #0]
10008b04:	2201      	movs	r2, #1
10008b06:	7a19      	ldrb	r1, [r3, #8]
10008b08:	6863      	ldr	r3, [r4, #4]
10008b0a:	4f20      	ldr	r7, [pc, #128]	; (10008b8c <mpu_lp_accel_mode+0xf4>)
10008b0c:	7818      	ldrb	r0, [r3, #0]
10008b0e:	002b      	movs	r3, r5
10008b10:	47b8      	blx	r7
10008b12:	2800      	cmp	r0, #0
10008b14:	d120      	bne.n	10008b58 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008b16:	2308      	movs	r3, #8
10008b18:	782a      	ldrb	r2, [r5, #0]
10008b1a:	4313      	orrs	r3, r2
10008b1c:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008b1e:	6823      	ldr	r3, [r4, #0]
10008b20:	2201      	movs	r2, #1
10008b22:	7a19      	ldrb	r1, [r3, #8]
10008b24:	6863      	ldr	r3, [r4, #4]
10008b26:	7818      	ldrb	r0, [r3, #0]
10008b28:	002b      	movs	r3, r5
10008b2a:	47b0      	blx	r6
10008b2c:	2800      	cmp	r0, #0
10008b2e:	d113      	bne.n	10008b58 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008b30:	2320      	movs	r3, #32
10008b32:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008b34:	6823      	ldr	r3, [r4, #0]
10008b36:	2201      	movs	r2, #1
10008b38:	7d59      	ldrb	r1, [r3, #21]
10008b3a:	6863      	ldr	r3, [r4, #4]
10008b3c:	7818      	ldrb	r0, [r3, #0]
10008b3e:	002b      	movs	r3, r5
10008b40:	47b0      	blx	r6
10008b42:	1e05      	subs	r5, r0, #0
10008b44:	d108      	bne.n	10008b58 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008b46:	2308      	movs	r3, #8
10008b48:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
10008b4a:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
10008b4c:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008b4e:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
10008b50:	2000      	movs	r0, #0
10008b52:	4b0f      	ldr	r3, [pc, #60]	; (10008b90 <mpu_lp_accel_mode+0xf8>)
10008b54:	4798      	blx	r3
10008b56:	e7b8      	b.n	10008aca <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008b58:	2501      	movs	r5, #1
10008b5a:	426d      	negs	r5, r5
10008b5c:	e7b5      	b.n	10008aca <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
10008b5e:	2304      	movs	r3, #4
10008b60:	702b      	strb	r3, [r5, #0]
10008b62:	e7c3      	b.n	10008aec <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008b64:	2302      	movs	r3, #2
10008b66:	702b      	strb	r3, [r5, #0]
10008b68:	e7c0      	b.n	10008aec <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
10008b6a:	2303      	movs	r3, #3
10008b6c:	702b      	strb	r3, [r5, #0]
10008b6e:	e7bd      	b.n	10008aec <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
10008b70:	2c14      	cmp	r4, #20
10008b72:	d802      	bhi.n	10008b7a <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
10008b74:	2306      	movs	r3, #6
10008b76:	702b      	strb	r3, [r5, #0]
10008b78:	e7b8      	b.n	10008aec <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008b7a:	2307      	movs	r3, #7
10008b7c:	702b      	strb	r3, [r5, #0]
10008b7e:	e7b5      	b.n	10008aec <mpu_lp_accel_mode+0x54>
10008b80:	10008a2d 	.word	0x10008a2d
10008b84:	1001b3a8 	.word	0x1001b3a8
10008b88:	100082b9 	.word	0x100082b9
10008b8c:	10008311 	.word	0x10008311
10008b90:	10008825 	.word	0x10008825

10008b94 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b94:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b96:	4c2c      	ldr	r4, [pc, #176]	; (10008c48 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b98:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b9a:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b9c:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b9e:	2b00      	cmp	r3, #0
10008ba0:	d04e      	beq.n	10008c40 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10008ba2:	2324      	movs	r3, #36	; 0x24
10008ba4:	5ce3      	ldrb	r3, [r4, r3]
10008ba6:	2b00      	cmp	r3, #0
10008ba8:	d14a      	bne.n	10008c40 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008baa:	7d23      	ldrb	r3, [r4, #20]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d005      	beq.n	10008bbc <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10008bb0:	1e43      	subs	r3, r0, #1
10008bb2:	2b27      	cmp	r3, #39	; 0x27
10008bb4:	d940      	bls.n	10008c38 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008bb6:	2000      	movs	r0, #0
10008bb8:	4b24      	ldr	r3, [pc, #144]	; (10008c4c <mpu_set_sample_rate+0xb8>)
10008bba:	4798      	blx	r3
10008bbc:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
10008bbe:	2d03      	cmp	r5, #3
10008bc0:	d822      	bhi.n	10008c08 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008bc2:	466b      	mov	r3, sp
10008bc4:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008bc6:	6823      	ldr	r3, [r4, #0]
10008bc8:	4d21      	ldr	r5, [pc, #132]	; (10008c50 <mpu_set_sample_rate+0xbc>)
10008bca:	7859      	ldrb	r1, [r3, #1]
10008bcc:	6863      	ldr	r3, [r4, #4]
10008bce:	2201      	movs	r2, #1
10008bd0:	7818      	ldrb	r0, [r3, #0]
10008bd2:	466b      	mov	r3, sp
10008bd4:	3307      	adds	r3, #7
10008bd6:	47a8      	blx	r5
10008bd8:	1e05      	subs	r5, r0, #0
10008bda:	d131      	bne.n	10008c40 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008bdc:	466b      	mov	r3, sp
10008bde:	20fa      	movs	r0, #250	; 0xfa
10008be0:	79d9      	ldrb	r1, [r3, #7]
10008be2:	0080      	lsls	r0, r0, #2
10008be4:	4b1b      	ldr	r3, [pc, #108]	; (10008c54 <mpu_set_sample_rate+0xc0>)
10008be6:	3101      	adds	r1, #1
10008be8:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008bea:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008bec:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008bee:	1c18      	adds	r0, r3, #0
10008bf0:	2b64      	cmp	r3, #100	; 0x64
10008bf2:	d816      	bhi.n	10008c22 <mpu_set_sample_rate+0x8e>
10008bf4:	4b18      	ldr	r3, [pc, #96]	; (10008c58 <mpu_set_sample_rate+0xc4>)
10008bf6:	b280      	uxth	r0, r0
10008bf8:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008bfa:	89e0      	ldrh	r0, [r4, #14]
10008bfc:	4b17      	ldr	r3, [pc, #92]	; (10008c5c <mpu_set_sample_rate+0xc8>)
10008bfe:	0840      	lsrs	r0, r0, #1
10008c00:	4798      	blx	r3
        return 0;
    }
}
10008c02:	0028      	movs	r0, r5
10008c04:	b003      	add	sp, #12
10008c06:	bd30      	pop	{r4, r5, pc}
10008c08:	23fa      	movs	r3, #250	; 0xfa
10008c0a:	1c29      	adds	r1, r5, #0
10008c0c:	009b      	lsls	r3, r3, #2
10008c0e:	429d      	cmp	r5, r3
10008c10:	d809      	bhi.n	10008c26 <mpu_set_sample_rate+0x92>
10008c12:	20fa      	movs	r0, #250	; 0xfa
10008c14:	b289      	uxth	r1, r1
10008c16:	0080      	lsls	r0, r0, #2
10008c18:	4b0e      	ldr	r3, [pc, #56]	; (10008c54 <mpu_set_sample_rate+0xc0>)
10008c1a:	4798      	blx	r3
10008c1c:	3801      	subs	r0, #1
10008c1e:	b2c0      	uxtb	r0, r0
10008c20:	e7cf      	b.n	10008bc2 <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008c22:	2064      	movs	r0, #100	; 0x64
10008c24:	e7e6      	b.n	10008bf4 <mpu_set_sample_rate+0x60>
10008c26:	20fa      	movs	r0, #250	; 0xfa
10008c28:	1c19      	adds	r1, r3, #0
10008c2a:	b289      	uxth	r1, r1
10008c2c:	0080      	lsls	r0, r0, #2
10008c2e:	4b09      	ldr	r3, [pc, #36]	; (10008c54 <mpu_set_sample_rate+0xc0>)
10008c30:	4798      	blx	r3
10008c32:	3801      	subs	r0, #1
10008c34:	b2c0      	uxtb	r0, r0
10008c36:	e7c4      	b.n	10008bc2 <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008c38:	4b04      	ldr	r3, [pc, #16]	; (10008c4c <mpu_set_sample_rate+0xb8>)
10008c3a:	4798      	blx	r3
                return 0;
10008c3c:	2500      	movs	r5, #0
10008c3e:	e7e0      	b.n	10008c02 <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008c40:	2501      	movs	r5, #1
10008c42:	426d      	negs	r5, r5
10008c44:	e7dd      	b.n	10008c02 <mpu_set_sample_rate+0x6e>
10008c46:	46c0      	nop			; (mov r8, r8)
10008c48:	1001b3a8 	.word	0x1001b3a8
10008c4c:	10008a99 	.word	0x10008a99
10008c50:	100082b9 	.word	0x100082b9
10008c54:	10014ec9 	.word	0x10014ec9
10008c58:	100087c1 	.word	0x100087c1
10008c5c:	10008711 	.word	0x10008711

10008c60 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c62:	464e      	mov	r6, r9
10008c64:	4657      	mov	r7, sl
10008c66:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008c68:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008c6a:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008c6c:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008c6e:	b082      	sub	sp, #8
10008c70:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008c72:	2b00      	cmp	r3, #0
10008c74:	d100      	bne.n	10008c78 <mpu_set_sensors+0x18>
10008c76:	e095      	b.n	10008da4 <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
10008c78:	466b      	mov	r3, sp
10008c7a:	1d9d      	adds	r5, r3, #6
10008c7c:	2301      	movs	r3, #1
10008c7e:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008c80:	4c5f      	ldr	r4, [pc, #380]	; (10008e00 <mpu_set_sensors+0x1a0>)
10008c82:	4f60      	ldr	r7, [pc, #384]	; (10008e04 <mpu_set_sensors+0x1a4>)
10008c84:	6823      	ldr	r3, [r4, #0]
10008c86:	2201      	movs	r2, #1
10008c88:	7d59      	ldrb	r1, [r3, #21]
10008c8a:	6863      	ldr	r3, [r4, #4]
10008c8c:	46b8      	mov	r8, r7
10008c8e:	7818      	ldrb	r0, [r3, #0]
10008c90:	002b      	movs	r3, r5
10008c92:	47b8      	blx	r7
10008c94:	2800      	cmp	r0, #0
10008c96:	d000      	beq.n	10008c9a <mpu_set_sensors+0x3a>
10008c98:	e0ad      	b.n	10008df6 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008c9a:	2240      	movs	r2, #64	; 0x40
10008c9c:	782b      	ldrb	r3, [r5, #0]

    data = 0;
10008c9e:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008ca0:	4393      	bics	r3, r2
10008ca2:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10008ca4:	4232      	tst	r2, r6
10008ca6:	d100      	bne.n	10008caa <mpu_set_sensors+0x4a>
10008ca8:	e093      	b.n	10008dd2 <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
10008caa:	06b3      	lsls	r3, r6, #26
10008cac:	d403      	bmi.n	10008cb6 <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
10008cae:	2302      	movs	r3, #2
10008cb0:	782a      	ldrb	r2, [r5, #0]
10008cb2:	4313      	orrs	r3, r2
10008cb4:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10008cb6:	06f3      	lsls	r3, r6, #27
10008cb8:	d403      	bmi.n	10008cc2 <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
10008cba:	2301      	movs	r3, #1
10008cbc:	782a      	ldrb	r2, [r5, #0]
10008cbe:	4313      	orrs	r3, r2
10008cc0:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008cc2:	0733      	lsls	r3, r6, #28
10008cc4:	d400      	bmi.n	10008cc8 <mpu_set_sensors+0x68>
10008cc6:	e08a      	b.n	10008dde <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008cc8:	6823      	ldr	r3, [r4, #0]
10008cca:	2201      	movs	r2, #1
10008ccc:	7d99      	ldrb	r1, [r3, #22]
10008cce:	6863      	ldr	r3, [r4, #4]
10008cd0:	7818      	ldrb	r0, [r3, #0]
10008cd2:	002b      	movs	r3, r5
10008cd4:	47c0      	blx	r8
10008cd6:	2800      	cmp	r0, #0
10008cd8:	d000      	beq.n	10008cdc <mpu_set_sensors+0x7c>
10008cda:	e08c      	b.n	10008df6 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008cdc:	2308      	movs	r3, #8
10008cde:	0032      	movs	r2, r6
10008ce0:	439a      	bics	r2, r3
10008ce2:	d041      	beq.n	10008d68 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008ce4:	4b48      	ldr	r3, [pc, #288]	; (10008e08 <mpu_set_sensors+0x1a8>)
10008ce6:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ce8:	466b      	mov	r3, sp
10008cea:	3307      	adds	r3, #7
10008cec:	469a      	mov	sl, r3
10008cee:	6823      	ldr	r3, [r4, #0]
10008cf0:	2201      	movs	r2, #1
10008cf2:	7919      	ldrb	r1, [r3, #4]
10008cf4:	6863      	ldr	r3, [r4, #4]
10008cf6:	4f45      	ldr	r7, [pc, #276]	; (10008e0c <mpu_set_sensors+0x1ac>)
10008cf8:	7818      	ldrb	r0, [r3, #0]
10008cfa:	4653      	mov	r3, sl
10008cfc:	47b8      	blx	r7
10008cfe:	2800      	cmp	r0, #0
10008d00:	d000      	beq.n	10008d04 <mpu_set_sensors+0xa4>
10008d02:	e075      	b.n	10008df0 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008d04:	07f3      	lsls	r3, r6, #31
10008d06:	d53c      	bpl.n	10008d82 <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10008d08:	2311      	movs	r3, #17
10008d0a:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
10008d0c:	4653      	mov	r3, sl
10008d0e:	781a      	ldrb	r2, [r3, #0]
10008d10:	2320      	movs	r3, #32
10008d12:	4313      	orrs	r3, r2
10008d14:	4652      	mov	r2, sl
10008d16:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10008d18:	2224      	movs	r2, #36	; 0x24
10008d1a:	5ca2      	ldrb	r2, [r4, r2]
10008d1c:	2a00      	cmp	r2, #0
10008d1e:	d03c      	beq.n	10008d9a <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10008d20:	2280      	movs	r2, #128	; 0x80
10008d22:	4252      	negs	r2, r2
10008d24:	4313      	orrs	r3, r2
10008d26:	4652      	mov	r2, sl
10008d28:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008d2a:	2326      	movs	r3, #38	; 0x26
10008d2c:	6822      	ldr	r2, [r4, #0]
10008d2e:	5cd1      	ldrb	r1, [r2, r3]
10008d30:	6863      	ldr	r3, [r4, #4]
10008d32:	2201      	movs	r2, #1
10008d34:	7818      	ldrb	r0, [r3, #0]
10008d36:	002b      	movs	r3, r5
10008d38:	47c0      	blx	r8
10008d3a:	2800      	cmp	r0, #0
10008d3c:	d158      	bne.n	10008df0 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008d3e:	6823      	ldr	r3, [r4, #0]
10008d40:	2201      	movs	r2, #1
10008d42:	7919      	ldrb	r1, [r3, #4]
10008d44:	6863      	ldr	r3, [r4, #4]
10008d46:	7818      	ldrb	r0, [r3, #0]
10008d48:	4653      	mov	r3, sl
10008d4a:	47c0      	blx	r8
10008d4c:	1e05      	subs	r5, r0, #0
10008d4e:	d14f      	bne.n	10008df0 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
10008d50:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
10008d52:	4b2f      	ldr	r3, [pc, #188]	; (10008e10 <mpu_set_sensors+0x1b0>)
10008d54:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008d56:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
10008d58:	4798      	blx	r3
    return 0;
}
10008d5a:	0028      	movs	r0, r5
10008d5c:	b002      	add	sp, #8
10008d5e:	bc1c      	pop	{r2, r3, r4}
10008d60:	4690      	mov	r8, r2
10008d62:	4699      	mov	r9, r3
10008d64:	46a2      	mov	sl, r4
10008d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008d68:	466b      	mov	r3, sp
10008d6a:	3307      	adds	r3, #7
10008d6c:	469a      	mov	sl, r3
10008d6e:	6823      	ldr	r3, [r4, #0]
10008d70:	2201      	movs	r2, #1
10008d72:	7919      	ldrb	r1, [r3, #4]
10008d74:	6863      	ldr	r3, [r4, #4]
10008d76:	4f25      	ldr	r7, [pc, #148]	; (10008e0c <mpu_set_sensors+0x1ac>)
10008d78:	7818      	ldrb	r0, [r3, #0]
10008d7a:	4653      	mov	r3, sl
10008d7c:	47b8      	blx	r7
10008d7e:	2800      	cmp	r0, #0
10008d80:	d136      	bne.n	10008df0 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
10008d82:	2310      	movs	r3, #16
10008d84:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008d86:	4653      	mov	r3, sl
10008d88:	2220      	movs	r2, #32
10008d8a:	781b      	ldrb	r3, [r3, #0]
10008d8c:	4393      	bics	r3, r2
10008d8e:	4652      	mov	r2, sl
10008d90:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008d92:	2224      	movs	r2, #36	; 0x24
10008d94:	5ca2      	ldrb	r2, [r4, r2]
10008d96:	2a00      	cmp	r2, #0
10008d98:	d1c2      	bne.n	10008d20 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
10008d9a:	227f      	movs	r2, #127	; 0x7f
10008d9c:	4013      	ands	r3, r2
10008d9e:	4652      	mov	r2, sl
10008da0:	7013      	strb	r3, [r2, #0]
10008da2:	e7c2      	b.n	10008d2a <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10008da4:	2800      	cmp	r0, #0
10008da6:	d11f      	bne.n	10008de8 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10008da8:	466b      	mov	r3, sp
10008daa:	1d9d      	adds	r5, r3, #6
10008dac:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008dae:	4c14      	ldr	r4, [pc, #80]	; (10008e00 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10008db0:	702b      	strb	r3, [r5, #0]
10008db2:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008db4:	6823      	ldr	r3, [r4, #0]
10008db6:	4f13      	ldr	r7, [pc, #76]	; (10008e04 <mpu_set_sensors+0x1a4>)
10008db8:	7d59      	ldrb	r1, [r3, #21]
10008dba:	6863      	ldr	r3, [r4, #4]
10008dbc:	2201      	movs	r2, #1
10008dbe:	7818      	ldrb	r0, [r3, #0]
10008dc0:	002b      	movs	r3, r5
10008dc2:	46b8      	mov	r8, r7
10008dc4:	47b8      	blx	r7
10008dc6:	2800      	cmp	r0, #0
10008dc8:	d115      	bne.n	10008df6 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008dca:	464a      	mov	r2, r9
10008dcc:	782b      	ldrb	r3, [r5, #0]
10008dce:	4393      	bics	r3, r2
10008dd0:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10008dd2:	2304      	movs	r3, #4
10008dd4:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10008dd6:	06b3      	lsls	r3, r6, #26
10008dd8:	d500      	bpl.n	10008ddc <mpu_set_sensors+0x17c>
10008dda:	e76c      	b.n	10008cb6 <mpu_set_sensors+0x56>
10008ddc:	e767      	b.n	10008cae <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
10008dde:	2338      	movs	r3, #56	; 0x38
10008de0:	782a      	ldrb	r2, [r5, #0]
10008de2:	4313      	orrs	r3, r2
10008de4:	702b      	strb	r3, [r5, #0]
10008de6:	e76f      	b.n	10008cc8 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10008de8:	466a      	mov	r2, sp
10008dea:	1d95      	adds	r5, r2, #6
10008dec:	702b      	strb	r3, [r5, #0]
10008dee:	e747      	b.n	10008c80 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008df0:	2501      	movs	r5, #1
10008df2:	426d      	negs	r5, r5
10008df4:	e7b1      	b.n	10008d5a <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10008df6:	2300      	movs	r3, #0
        return -1;
10008df8:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10008dfa:	72a3      	strb	r3, [r4, #10]
        return -1;
10008dfc:	426d      	negs	r5, r5
10008dfe:	e7ac      	b.n	10008d5a <mpu_set_sensors+0xfa>
10008e00:	1001b3a8 	.word	0x1001b3a8
10008e04:	100082b9 	.word	0x100082b9
10008e08:	10008a2d 	.word	0x10008a2d
10008e0c:	10008311 	.word	0x10008311
10008e10:	1000810d 	.word	0x1000810d

10008e14 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008e14:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e16:	464d      	mov	r5, r9
10008e18:	465f      	mov	r7, fp
10008e1a:	4656      	mov	r6, sl
10008e1c:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008e1e:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008e20:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008e22:	4ca1      	ldr	r4, [pc, #644]	; (100090a8 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008e24:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008e26:	ad02      	add	r5, sp, #8
10008e28:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008e2a:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008e2c:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008e2e:	7d59      	ldrb	r1, [r3, #21]
10008e30:	6863      	ldr	r3, [r4, #4]
10008e32:	2201      	movs	r2, #1
10008e34:	7818      	ldrb	r0, [r3, #0]
10008e36:	4f9d      	ldr	r7, [pc, #628]	; (100090ac <mpu_init+0x298>)
10008e38:	002b      	movs	r3, r5
10008e3a:	47b8      	blx	r7
10008e3c:	4681      	mov	r9, r0
10008e3e:	2800      	cmp	r0, #0
10008e40:	d17c      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
    delay_ms(100);
10008e42:	4b9b      	ldr	r3, [pc, #620]	; (100090b0 <mpu_init+0x29c>)
10008e44:	2064      	movs	r0, #100	; 0x64
10008e46:	4698      	mov	r8, r3
10008e48:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10008e4a:	464b      	mov	r3, r9
10008e4c:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008e4e:	6823      	ldr	r3, [r4, #0]
10008e50:	2201      	movs	r2, #1
10008e52:	7d59      	ldrb	r1, [r3, #21]
10008e54:	6863      	ldr	r3, [r4, #4]
10008e56:	7818      	ldrb	r0, [r3, #0]
10008e58:	002b      	movs	r3, r5
10008e5a:	47b8      	blx	r7
10008e5c:	2800      	cmp	r0, #0
10008e5e:	d16d      	bne.n	10008f3c <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10008e60:	2340      	movs	r3, #64	; 0x40
10008e62:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10008e64:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
10008e66:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10008e68:	7a19      	ldrb	r1, [r3, #8]
10008e6a:	6863      	ldr	r3, [r4, #4]
10008e6c:	2201      	movs	r2, #1
10008e6e:	7818      	ldrb	r0, [r3, #0]
10008e70:	002b      	movs	r3, r5
10008e72:	47b8      	blx	r7
10008e74:	1e05      	subs	r5, r0, #0
10008e76:	d161      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10008e78:	23ff      	movs	r3, #255	; 0xff
10008e7a:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10008e7c:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10008e7e:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10008e80:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
10008e82:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10008e84:	3bfe      	subs	r3, #254	; 0xfe
10008e86:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10008e88:	3321      	adds	r3, #33	; 0x21
10008e8a:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
10008e8c:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
10008e8e:	3301      	adds	r3, #1
10008e90:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10008e92:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10008e94:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008e96:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
10008e98:	4252      	negs	r2, r2
10008e9a:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10008e9c:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10008e9e:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008ea0:	4b84      	ldr	r3, [pc, #528]	; (100090b4 <mpu_init+0x2a0>)
10008ea2:	3016      	adds	r0, #22
10008ea4:	320d      	adds	r2, #13
10008ea6:	2100      	movs	r1, #0
10008ea8:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10008eaa:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
10008eac:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
10008eae:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10008eb0:	3301      	adds	r3, #1
10008eb2:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
10008eb4:	00c0      	lsls	r0, r0, #3
10008eb6:	4b80      	ldr	r3, [pc, #512]	; (100090b8 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
10008eb8:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10008eba:	4798      	blx	r3
10008ebc:	2800      	cmp	r0, #0
10008ebe:	d13d      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
10008ec0:	3002      	adds	r0, #2
10008ec2:	4b7e      	ldr	r3, [pc, #504]	; (100090bc <mpu_init+0x2a8>)
10008ec4:	4798      	blx	r3
10008ec6:	2800      	cmp	r0, #0
10008ec8:	d138      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
10008eca:	302a      	adds	r0, #42	; 0x2a
10008ecc:	4b7c      	ldr	r3, [pc, #496]	; (100090c0 <mpu_init+0x2ac>)
10008ece:	4798      	blx	r3
10008ed0:	2800      	cmp	r0, #0
10008ed2:	d133      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
10008ed4:	3032      	adds	r0, #50	; 0x32
10008ed6:	4b7b      	ldr	r3, [pc, #492]	; (100090c4 <mpu_init+0x2b0>)
10008ed8:	4798      	blx	r3
10008eda:	2800      	cmp	r0, #0
10008edc:	d12e      	bne.n	10008f3c <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
10008ede:	4b7a      	ldr	r3, [pc, #488]	; (100090c8 <mpu_init+0x2b4>)
10008ee0:	4798      	blx	r3
10008ee2:	2800      	cmp	r0, #0
10008ee4:	d12a      	bne.n	10008f3c <mpu_init+0x128>
        return -1;

    if (int_param)
10008ee6:	2e00      	cmp	r6, #0
10008ee8:	d004      	beq.n	10008ef4 <mpu_init+0xe0>
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
10008eea:	6871      	ldr	r1, [r6, #4]
10008eec:	7830      	ldrb	r0, [r6, #0]
10008eee:	2202      	movs	r2, #2
10008ef0:	4b76      	ldr	r3, [pc, #472]	; (100090cc <mpu_init+0x2b8>)
10008ef2:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
10008ef4:	4b76      	ldr	r3, [pc, #472]	; (100090d0 <mpu_init+0x2bc>)
10008ef6:	2001      	movs	r0, #1
10008ef8:	469b      	mov	fp, r3
10008efa:	4798      	blx	r3
10008efc:	4b75      	ldr	r3, [pc, #468]	; (100090d4 <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10008efe:	250c      	movs	r5, #12
10008f00:	4699      	mov	r9, r3
10008f02:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10008f04:	0033      	movs	r3, r6
10008f06:	2201      	movs	r2, #1
10008f08:	2100      	movs	r1, #0
10008f0a:	0028      	movs	r0, r5
10008f0c:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
10008f0e:	2800      	cmp	r0, #0
10008f10:	d102      	bne.n	10008f18 <mpu_init+0x104>
10008f12:	7833      	ldrb	r3, [r6, #0]
10008f14:	2b48      	cmp	r3, #72	; 0x48
10008f16:	d01b      	beq.n	10008f50 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10008f18:	3501      	adds	r5, #1
10008f1a:	b2ed      	uxtb	r5, r5
10008f1c:	2d10      	cmp	r5, #16
10008f1e:	d1f1      	bne.n	10008f04 <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10008f20:	486d      	ldr	r0, [pc, #436]	; (100090d8 <mpu_init+0x2c4>)
10008f22:	4c6e      	ldr	r4, [pc, #440]	; (100090dc <mpu_init+0x2c8>)
10008f24:	47a0      	blx	r4
10008f26:	486e      	ldr	r0, [pc, #440]	; (100090e0 <mpu_init+0x2cc>)
10008f28:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10008f2a:	200a      	movs	r0, #10
10008f2c:	4b6d      	ldr	r3, [pc, #436]	; (100090e4 <mpu_init+0x2d0>)
10008f2e:	4798      	blx	r3
10008f30:	1e04      	subs	r4, r0, #0
10008f32:	d103      	bne.n	10008f3c <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10008f34:	4b6c      	ldr	r3, [pc, #432]	; (100090e8 <mpu_init+0x2d4>)
10008f36:	2000      	movs	r0, #0
10008f38:	4798      	blx	r3
    return 0;
10008f3a:	e001      	b.n	10008f40 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10008f3c:	2401      	movs	r4, #1
10008f3e:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10008f40:	0020      	movs	r0, r4
10008f42:	b005      	add	sp, #20
10008f44:	bc3c      	pop	{r2, r3, r4, r5}
10008f46:	4690      	mov	r8, r2
10008f48:	4699      	mov	r9, r3
10008f4a:	46a2      	mov	sl, r4
10008f4c:	46ab      	mov	fp, r5
10008f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10008f50:	232a      	movs	r3, #42	; 0x2a
10008f52:	469a      	mov	sl, r3
10008f54:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
10008f56:	3b1a      	subs	r3, #26
10008f58:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f5a:	2201      	movs	r2, #1
10008f5c:	0033      	movs	r3, r6
10008f5e:	210a      	movs	r1, #10
10008f60:	0028      	movs	r0, r5
10008f62:	47b8      	blx	r7
10008f64:	2800      	cmp	r0, #0
10008f66:	d1e0      	bne.n	10008f2a <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008f68:	2001      	movs	r0, #1
10008f6a:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
10008f6c:	231f      	movs	r3, #31
10008f6e:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f70:	4653      	mov	r3, sl
10008f72:	2201      	movs	r2, #1
10008f74:	5ce0      	ldrb	r0, [r4, r3]
10008f76:	210a      	movs	r1, #10
10008f78:	0033      	movs	r3, r6
10008f7a:	47b8      	blx	r7
10008f7c:	2800      	cmp	r0, #0
10008f7e:	d1d4      	bne.n	10008f2a <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008f80:	3001      	adds	r0, #1
10008f82:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10008f84:	4653      	mov	r3, sl
10008f86:	2203      	movs	r2, #3
10008f88:	5ce0      	ldrb	r0, [r4, r3]
10008f8a:	2110      	movs	r1, #16
10008f8c:	0033      	movs	r3, r6
10008f8e:	47c8      	blx	r9
10008f90:	2800      	cmp	r0, #0
10008f92:	d1ca      	bne.n	10008f2a <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10008f94:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f96:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10008f98:	3380      	adds	r3, #128	; 0x80
10008f9a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10008f9c:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f9e:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10008fa0:	3380      	adds	r3, #128	; 0x80
10008fa2:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10008fa4:	78b3      	ldrb	r3, [r6, #2]
10008fa6:	3380      	adds	r3, #128	; 0x80
10008fa8:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10008faa:	2310      	movs	r3, #16
10008fac:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008fae:	4653      	mov	r3, sl
10008fb0:	5ce0      	ldrb	r0, [r4, r3]
10008fb2:	0033      	movs	r3, r6
10008fb4:	47b8      	blx	r7
10008fb6:	2800      	cmp	r0, #0
10008fb8:	d1b7      	bne.n	10008f2a <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008fba:	3001      	adds	r0, #1
10008fbc:	47c0      	blx	r8

    mpu_set_bypass(0);
10008fbe:	2000      	movs	r0, #0
10008fc0:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10008fc2:	2340      	movs	r3, #64	; 0x40
10008fc4:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10008fc6:	6823      	ldr	r3, [r4, #0]
10008fc8:	2201      	movs	r2, #1
10008fca:	7e99      	ldrb	r1, [r3, #26]
10008fcc:	6863      	ldr	r3, [r4, #4]
10008fce:	7818      	ldrb	r0, [r3, #0]
10008fd0:	0033      	movs	r3, r6
10008fd2:	47b8      	blx	r7
10008fd4:	2800      	cmp	r0, #0
10008fd6:	d1a8      	bne.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10008fd8:	4653      	mov	r3, sl
10008fda:	2280      	movs	r2, #128	; 0x80
10008fdc:	5ce3      	ldrb	r3, [r4, r3]
10008fde:	4252      	negs	r2, r2
10008fe0:	4313      	orrs	r3, r2
10008fe2:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10008fe4:	6823      	ldr	r3, [r4, #0]
10008fe6:	3281      	adds	r2, #129	; 0x81
10008fe8:	7f99      	ldrb	r1, [r3, #30]
10008fea:	6863      	ldr	r3, [r4, #4]
10008fec:	7818      	ldrb	r0, [r3, #0]
10008fee:	0033      	movs	r3, r6
10008ff0:	47b8      	blx	r7
10008ff2:	2800      	cmp	r0, #0
10008ff4:	d199      	bne.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10008ff6:	2302      	movs	r3, #2
10008ff8:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10008ffa:	6823      	ldr	r3, [r4, #0]
10008ffc:	2201      	movs	r2, #1
10008ffe:	7fd9      	ldrb	r1, [r3, #31]
10009000:	6863      	ldr	r3, [r4, #4]
10009002:	7818      	ldrb	r0, [r3, #0]
10009004:	0033      	movs	r3, r6
10009006:	47b8      	blx	r7
10009008:	2800      	cmp	r0, #0
1000900a:	d000      	beq.n	1000900e <mpu_init+0x1fa>
1000900c:	e78d      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000900e:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009010:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009012:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009014:	3b68      	subs	r3, #104	; 0x68
10009016:	5cd1      	ldrb	r1, [r2, r3]
10009018:	6863      	ldr	r3, [r4, #4]
1000901a:	2201      	movs	r2, #1
1000901c:	7818      	ldrb	r0, [r3, #0]
1000901e:	0033      	movs	r3, r6
10009020:	47b8      	blx	r7
10009022:	2800      	cmp	r0, #0
10009024:	d000      	beq.n	10009028 <mpu_init+0x214>
10009026:	e780      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009028:	232a      	movs	r3, #42	; 0x2a
1000902a:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000902c:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000902e:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009030:	2321      	movs	r3, #33	; 0x21
10009032:	5cd1      	ldrb	r1, [r2, r3]
10009034:	6863      	ldr	r3, [r4, #4]
10009036:	2201      	movs	r2, #1
10009038:	7818      	ldrb	r0, [r3, #0]
1000903a:	0033      	movs	r3, r6
1000903c:	47b8      	blx	r7
1000903e:	2800      	cmp	r0, #0
10009040:	d000      	beq.n	10009044 <mpu_init+0x230>
10009042:	e772      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009044:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009046:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009048:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000904a:	3318      	adds	r3, #24
1000904c:	5cd1      	ldrb	r1, [r2, r3]
1000904e:	6863      	ldr	r3, [r4, #4]
10009050:	2201      	movs	r2, #1
10009052:	7818      	ldrb	r0, [r3, #0]
10009054:	0033      	movs	r3, r6
10009056:	47b8      	blx	r7
10009058:	2800      	cmp	r0, #0
1000905a:	d000      	beq.n	1000905e <mpu_init+0x24a>
1000905c:	e765      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000905e:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009060:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009062:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009064:	3b5e      	subs	r3, #94	; 0x5e
10009066:	5cd1      	ldrb	r1, [r2, r3]
10009068:	6863      	ldr	r3, [r4, #4]
1000906a:	2201      	movs	r2, #1
1000906c:	7818      	ldrb	r0, [r3, #0]
1000906e:	0033      	movs	r3, r6
10009070:	47b8      	blx	r7
10009072:	2800      	cmp	r0, #0
10009074:	d000      	beq.n	10009078 <mpu_init+0x264>
10009076:	e758      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009078:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000907a:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000907c:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000907e:	3315      	adds	r3, #21
10009080:	5cd1      	ldrb	r1, [r2, r3]
10009082:	6863      	ldr	r3, [r4, #4]
10009084:	2201      	movs	r2, #1
10009086:	7818      	ldrb	r0, [r3, #0]
10009088:	0033      	movs	r3, r6
1000908a:	47b8      	blx	r7
1000908c:	2800      	cmp	r0, #0
1000908e:	d000      	beq.n	10009092 <mpu_init+0x27e>
10009090:	e74b      	b.n	10008f2a <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009092:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009094:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009096:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009098:	3324      	adds	r3, #36	; 0x24
1000909a:	5cd1      	ldrb	r1, [r2, r3]
1000909c:	6863      	ldr	r3, [r4, #4]
1000909e:	2201      	movs	r2, #1
100090a0:	7818      	ldrb	r0, [r3, #0]
100090a2:	0033      	movs	r3, r6
100090a4:	47b8      	blx	r7
100090a6:	e740      	b.n	10008f2a <mpu_init+0x116>
100090a8:	1001b3a8 	.word	0x1001b3a8
100090ac:	100082b9 	.word	0x100082b9
100090b0:	1000810d 	.word	0x1000810d
100090b4:	1001810b 	.word	0x1001810b
100090b8:	100085bd 	.word	0x100085bd
100090bc:	10008691 	.word	0x10008691
100090c0:	10008711 	.word	0x10008711
100090c4:	10008b95 	.word	0x10008b95
100090c8:	10008825 	.word	0x10008825
100090cc:	1000d14d 	.word	0x1000d14d
100090d0:	10008941 	.word	0x10008941
100090d4:	10008311 	.word	0x10008311
100090d8:	10019518 	.word	0x10019518
100090dc:	10018375 	.word	0x10018375
100090e0:	10019388 	.word	0x10019388
100090e4:	100087c1 	.word	0x100087c1
100090e8:	10008c61 	.word	0x10008c61

100090ec <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100090ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100090ee:	000d      	movs	r5, r1
100090f0:	b083      	sub	sp, #12
100090f2:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
100090f4:	d021      	beq.n	1000913a <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
100090f6:	4c12      	ldr	r4, [pc, #72]	; (10009140 <mpu_write_mem+0x54>)
100090f8:	7aa3      	ldrb	r3, [r4, #10]
100090fa:	2b00      	cmp	r3, #0
100090fc:	d01d      	beq.n	1000913a <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100090fe:	0a02      	lsrs	r2, r0, #8
10009100:	ab01      	add	r3, sp, #4
10009102:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009104:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009106:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009108:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000910a:	1840      	adds	r0, r0, r1
1000910c:	8951      	ldrh	r1, [r2, #10]
1000910e:	4288      	cmp	r0, r1
10009110:	dc13      	bgt.n	1000913a <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009112:	6821      	ldr	r1, [r4, #0]
10009114:	7810      	ldrb	r0, [r2, #0]
10009116:	7ec9      	ldrb	r1, [r1, #27]
10009118:	2202      	movs	r2, #2
1000911a:	4f0a      	ldr	r7, [pc, #40]	; (10009144 <mpu_write_mem+0x58>)
1000911c:	47b8      	blx	r7
1000911e:	2800      	cmp	r0, #0
10009120:	d10b      	bne.n	1000913a <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009122:	6823      	ldr	r3, [r4, #0]
10009124:	b2ea      	uxtb	r2, r5
10009126:	7e19      	ldrb	r1, [r3, #24]
10009128:	6863      	ldr	r3, [r4, #4]
1000912a:	7818      	ldrb	r0, [r3, #0]
1000912c:	0033      	movs	r3, r6
1000912e:	47b8      	blx	r7
10009130:	1e43      	subs	r3, r0, #1
10009132:	4198      	sbcs	r0, r3
10009134:	4240      	negs	r0, r0
        return -1;
    return 0;
}
10009136:	b003      	add	sp, #12
10009138:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000913a:	2001      	movs	r0, #1
1000913c:	4240      	negs	r0, r0
1000913e:	e7fa      	b.n	10009136 <mpu_write_mem+0x4a>
10009140:	1001b3a8 	.word	0x1001b3a8
10009144:	100082b9 	.word	0x100082b9

10009148 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000914a:	000d      	movs	r5, r1
1000914c:	b083      	sub	sp, #12
1000914e:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
10009150:	d022      	beq.n	10009198 <mpu_read_mem+0x50>
        return -1;
    if (!st.chip_cfg.sensors)
10009152:	4c13      	ldr	r4, [pc, #76]	; (100091a0 <mpu_read_mem+0x58>)
10009154:	7aa3      	ldrb	r3, [r4, #10]
10009156:	2b00      	cmp	r3, #0
10009158:	d01e      	beq.n	10009198 <mpu_read_mem+0x50>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000915a:	0a02      	lsrs	r2, r0, #8
1000915c:	ab01      	add	r3, sp, #4
1000915e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009160:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009162:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009164:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009166:	1840      	adds	r0, r0, r1
10009168:	8951      	ldrh	r1, [r2, #10]
1000916a:	4288      	cmp	r0, r1
1000916c:	dc14      	bgt.n	10009198 <mpu_read_mem+0x50>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000916e:	6821      	ldr	r1, [r4, #0]
10009170:	7810      	ldrb	r0, [r2, #0]
10009172:	7ec9      	ldrb	r1, [r1, #27]
10009174:	2202      	movs	r2, #2
10009176:	4f0b      	ldr	r7, [pc, #44]	; (100091a4 <mpu_read_mem+0x5c>)
10009178:	47b8      	blx	r7
1000917a:	2800      	cmp	r0, #0
1000917c:	d10c      	bne.n	10009198 <mpu_read_mem+0x50>
        return -1;
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
1000917e:	6823      	ldr	r3, [r4, #0]
10009180:	b2ea      	uxtb	r2, r5
10009182:	7e19      	ldrb	r1, [r3, #24]
10009184:	6863      	ldr	r3, [r4, #4]
10009186:	4c08      	ldr	r4, [pc, #32]	; (100091a8 <mpu_read_mem+0x60>)
10009188:	7818      	ldrb	r0, [r3, #0]
1000918a:	0033      	movs	r3, r6
1000918c:	47a0      	blx	r4
1000918e:	1e43      	subs	r3, r0, #1
10009190:	4198      	sbcs	r0, r3
10009192:	4240      	negs	r0, r0
        return -1;
    return 0;
}
10009194:	b003      	add	sp, #12
10009196:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009198:	2001      	movs	r0, #1
1000919a:	4240      	negs	r0, r0
1000919c:	e7fa      	b.n	10009194 <mpu_read_mem+0x4c>
1000919e:	46c0      	nop			; (mov r8, r8)
100091a0:	1001b3a8 	.word	0x1001b3a8
100091a4:	100082b9 	.word	0x100082b9
100091a8:	10008311 	.word	0x10008311

100091ac <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
100091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100091ae:	464d      	mov	r5, r9
100091b0:	4644      	mov	r4, r8
100091b2:	465f      	mov	r7, fp
100091b4:	4656      	mov	r6, sl
100091b6:	b4f0      	push	{r4, r5, r6, r7}
100091b8:	b089      	sub	sp, #36	; 0x24
100091ba:	9301      	str	r3, [sp, #4]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
100091bc:	2325      	movs	r3, #37	; 0x25
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
100091be:	9200      	str	r2, [sp, #0]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
100091c0:	4a2a      	ldr	r2, [pc, #168]	; (1000926c <mpu_load_firmware+0xc0>)
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
100091c2:	4680      	mov	r8, r0
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
100091c4:	5cd3      	ldrb	r3, [r2, r3]
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
100091c6:	4689      	mov	r9, r1
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
100091c8:	2b00      	cmp	r3, #0
100091ca:	d129      	bne.n	10009220 <mpu_load_firmware+0x74>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
100091cc:	2900      	cmp	r1, #0
100091ce:	d027      	beq.n	10009220 <mpu_load_firmware+0x74>
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
100091d0:	2800      	cmp	r0, #0
100091d2:	d02e      	beq.n	10009232 <mpu_load_firmware+0x86>
100091d4:	4b26      	ldr	r3, [pc, #152]	; (10009270 <mpu_load_firmware+0xc4>)
100091d6:	2400      	movs	r4, #0
100091d8:	469a      	mov	sl, r3
        this_write = min(LOAD_CHUNK, length - ii);
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
100091da:	4b26      	ldr	r3, [pc, #152]	; (10009274 <mpu_load_firmware+0xc8>)
100091dc:	469b      	mov	fp, r3
100091de:	e011      	b.n	10009204 <mpu_load_firmware+0x58>
100091e0:	aa04      	add	r2, sp, #16
100091e2:	0031      	movs	r1, r6
100091e4:	0020      	movs	r0, r4
100091e6:	47d8      	blx	fp
100091e8:	2800      	cmp	r0, #0
100091ea:	d119      	bne.n	10009220 <mpu_load_firmware+0x74>
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
100091ec:	042a      	lsls	r2, r5, #16
100091ee:	0c12      	lsrs	r2, r2, #16
100091f0:	a904      	add	r1, sp, #16
100091f2:	0038      	movs	r0, r7
100091f4:	4b20      	ldr	r3, [pc, #128]	; (10009278 <mpu_load_firmware+0xcc>)
100091f6:	4798      	blx	r3
100091f8:	2800      	cmp	r0, #0
100091fa:	d134      	bne.n	10009266 <mpu_load_firmware+0xba>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
100091fc:	1934      	adds	r4, r6, r4
100091fe:	b2a4      	uxth	r4, r4
10009200:	45a0      	cmp	r8, r4
10009202:	d916      	bls.n	10009232 <mpu_load_firmware+0x86>
        this_write = min(LOAD_CHUNK, length - ii);
10009204:	4643      	mov	r3, r8
10009206:	1b1d      	subs	r5, r3, r4
10009208:	2d10      	cmp	r5, #16
1000920a:	dd00      	ble.n	1000920e <mpu_load_firmware+0x62>
1000920c:	2510      	movs	r5, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1000920e:	464b      	mov	r3, r9
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
        this_write = min(LOAD_CHUNK, length - ii);
10009210:	b2ae      	uxth	r6, r5
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
10009212:	191f      	adds	r7, r3, r4
10009214:	003a      	movs	r2, r7
10009216:	0031      	movs	r1, r6
10009218:	0020      	movs	r0, r4
1000921a:	47d0      	blx	sl
1000921c:	2800      	cmp	r0, #0
1000921e:	d0df      	beq.n	100091e0 <mpu_load_firmware+0x34>
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
        /* DMP should only be loaded once. */
        return -1;
10009220:	2001      	movs	r0, #1
10009222:	4240      	negs	r0, r0
        return -1;

    st.chip_cfg.dmp_loaded = 1;
    st.chip_cfg.dmp_sample_rate = sample_rate;
    return 0;
}
10009224:	b009      	add	sp, #36	; 0x24
10009226:	bc3c      	pop	{r2, r3, r4, r5}
10009228:	4690      	mov	r8, r2
1000922a:	4699      	mov	r9, r3
1000922c:	46a2      	mov	sl, r4
1000922e:	46ab      	mov	fp, r5
10009230:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
10009232:	9900      	ldr	r1, [sp, #0]
10009234:	ab03      	add	r3, sp, #12
10009236:	0a0a      	lsrs	r2, r1, #8
10009238:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
1000923a:	4a0c      	ldr	r2, [pc, #48]	; (1000926c <mpu_load_firmware+0xc0>)
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
    tmp[1] = start_addr & 0xFF;
1000923c:	7059      	strb	r1, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
1000923e:	6812      	ldr	r2, [r2, #0]
10009240:	4c0e      	ldr	r4, [pc, #56]	; (1000927c <mpu_load_firmware+0xd0>)
10009242:	9200      	str	r2, [sp, #0]
10009244:	7f51      	ldrb	r1, [r2, #29]
10009246:	4a09      	ldr	r2, [pc, #36]	; (1000926c <mpu_load_firmware+0xc0>)
10009248:	6852      	ldr	r2, [r2, #4]
1000924a:	9200      	str	r2, [sp, #0]
1000924c:	7810      	ldrb	r0, [r2, #0]
1000924e:	2202      	movs	r2, #2
10009250:	47a0      	blx	r4
10009252:	2800      	cmp	r0, #0
10009254:	d1e4      	bne.n	10009220 <mpu_load_firmware+0x74>
        return -1;

    st.chip_cfg.dmp_loaded = 1;
10009256:	2201      	movs	r2, #1
10009258:	2325      	movs	r3, #37	; 0x25
1000925a:	4904      	ldr	r1, [pc, #16]	; (1000926c <mpu_load_firmware+0xc0>)
1000925c:	54ca      	strb	r2, [r1, r3]
    st.chip_cfg.dmp_sample_rate = sample_rate;
1000925e:	466a      	mov	r2, sp
10009260:	8892      	ldrh	r2, [r2, #4]
10009262:	84ca      	strh	r2, [r1, #38]	; 0x26
    return 0;
10009264:	e7de      	b.n	10009224 <mpu_load_firmware+0x78>
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
10009266:	2002      	movs	r0, #2
10009268:	4240      	negs	r0, r0
1000926a:	e7db      	b.n	10009224 <mpu_load_firmware+0x78>
1000926c:	1001b3a8 	.word	0x1001b3a8
10009270:	100090ed 	.word	0x100090ed
10009274:	10009149 	.word	0x10009149
10009278:	100180b1 	.word	0x100180b1
1000927c:	100082b9 	.word	0x100082b9

10009280 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009280:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009282:	2624      	movs	r6, #36	; 0x24
10009284:	4c1f      	ldr	r4, [pc, #124]	; (10009304 <mpu_set_dmp_state+0x84>)
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009286:	b083      	sub	sp, #12
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009288:	5da3      	ldrb	r3, [r4, r6]
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1000928a:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000928c:	4283      	cmp	r3, r0
1000928e:	d033      	beq.n	100092f8 <mpu_set_dmp_state+0x78>
        return 0;

    if (enable) {
10009290:	2800      	cmp	r0, #0
10009292:	d01f      	beq.n	100092d4 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
10009294:	2325      	movs	r3, #37	; 0x25
10009296:	5ce3      	ldrb	r3, [r4, r3]
10009298:	2b00      	cmp	r3, #0
1000929a:	d02f      	beq.n	100092fc <mpu_set_dmp_state+0x7c>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
1000929c:	4d1a      	ldr	r5, [pc, #104]	; (10009308 <mpu_set_dmp_state+0x88>)
1000929e:	2000      	movs	r0, #0
100092a0:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100092a2:	4b1a      	ldr	r3, [pc, #104]	; (1000930c <mpu_set_dmp_state+0x8c>)
100092a4:	2000      	movs	r0, #0
100092a6:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100092a8:	4b19      	ldr	r3, [pc, #100]	; (10009310 <mpu_set_dmp_state+0x90>)
100092aa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100092ac:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100092ae:	466b      	mov	r3, sp
100092b0:	2200      	movs	r2, #0
100092b2:	3307      	adds	r3, #7
100092b4:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100092b6:	6862      	ldr	r2, [r4, #4]
100092b8:	2123      	movs	r1, #35	; 0x23
100092ba:	7810      	ldrb	r0, [r2, #0]
100092bc:	4f15      	ldr	r7, [pc, #84]	; (10009314 <mpu_set_dmp_state+0x94>)
100092be:	2201      	movs	r2, #1
100092c0:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 1;
100092c2:	2301      	movs	r3, #1
        /* Enable DMP interrupt. */
        set_int_enable(1);
100092c4:	2001      	movs	r0, #1
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
        /* Remove FIFO elements. */
        tmp = 0;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 1;
100092c6:	55a3      	strb	r3, [r4, r6]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100092c8:	47a8      	blx	r5
        mpu_reset_fifo();
100092ca:	4b13      	ldr	r3, [pc, #76]	; (10009318 <mpu_set_dmp_state+0x98>)
100092cc:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100092ce:	2000      	movs	r0, #0
}
100092d0:	b003      	add	sp, #12
100092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100092d4:	4b0c      	ldr	r3, [pc, #48]	; (10009308 <mpu_set_dmp_state+0x88>)
100092d6:	2000      	movs	r0, #0
100092d8:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100092da:	466b      	mov	r3, sp
100092dc:	7c22      	ldrb	r2, [r4, #16]
100092de:	3307      	adds	r3, #7
100092e0:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100092e2:	6862      	ldr	r2, [r4, #4]
100092e4:	2123      	movs	r1, #35	; 0x23
100092e6:	7810      	ldrb	r0, [r2, #0]
100092e8:	4f0a      	ldr	r7, [pc, #40]	; (10009314 <mpu_set_dmp_state+0x94>)
100092ea:	2201      	movs	r2, #1
100092ec:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
100092ee:	4b0a      	ldr	r3, [pc, #40]	; (10009318 <mpu_set_dmp_state+0x98>)
        /* Disable DMP interrupt. */
        set_int_enable(0);
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
100092f0:	55a5      	strb	r5, [r4, r6]
        mpu_reset_fifo();
100092f2:	4798      	blx	r3
100092f4:	2000      	movs	r0, #0
100092f6:	e7eb      	b.n	100092d0 <mpu_set_dmp_state+0x50>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
100092f8:	2000      	movs	r0, #0
100092fa:	e7e9      	b.n	100092d0 <mpu_set_dmp_state+0x50>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
100092fc:	2001      	movs	r0, #1
100092fe:	4240      	negs	r0, r0
10009300:	e7e6      	b.n	100092d0 <mpu_set_dmp_state+0x50>
10009302:	46c0      	nop			; (mov r8, r8)
10009304:	1001b3a8 	.word	0x1001b3a8
10009308:	100083b1 	.word	0x100083b1
1000930c:	10008941 	.word	0x10008941
10009310:	10008b95 	.word	0x10008b95
10009314:	100082b9 	.word	0x100082b9
10009318:	1000841d 	.word	0x1000841d

1000931c <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
1000931c:	4b02      	ldr	r3, [pc, #8]	; (10009328 <mpu_get_compass_fsr+0xc>)
1000931e:	685b      	ldr	r3, [r3, #4]
10009320:	899b      	ldrh	r3, [r3, #12]
10009322:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009324:	2000      	movs	r0, #0
10009326:	4770      	bx	lr
10009328:	1001b3a8 	.word	0x1001b3a8

1000932c <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
1000932c:	b500      	push	{lr}
1000932e:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009330:	2209      	movs	r2, #9
10009332:	4906      	ldr	r1, [pc, #24]	; (1000934c <dmp_enable_gyro_cal.part.1+0x20>)
10009334:	a801      	add	r0, sp, #4
10009336:	4b06      	ldr	r3, [pc, #24]	; (10009350 <dmp_enable_gyro_cal.part.1+0x24>)
10009338:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000933a:	2097      	movs	r0, #151	; 0x97
1000933c:	aa01      	add	r2, sp, #4
1000933e:	2109      	movs	r1, #9
10009340:	4b04      	ldr	r3, [pc, #16]	; (10009354 <dmp_enable_gyro_cal.part.1+0x28>)
10009342:	00c0      	lsls	r0, r0, #3
10009344:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
10009346:	b005      	add	sp, #20
10009348:	bd00      	pop	{pc}
1000934a:	46c0      	nop			; (mov r8, r8)
1000934c:	10019764 	.word	0x10019764
10009350:	100180cf 	.word	0x100180cf
10009354:	100090ed 	.word	0x100090ed

10009358 <dmp_load_motion_driver_firmware>:
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
10009358:	2280      	movs	r2, #128	; 0x80
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
1000935a:	b510      	push	{r4, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1000935c:	23c8      	movs	r3, #200	; 0xc8
1000935e:	00d2      	lsls	r2, r2, #3
10009360:	4902      	ldr	r1, [pc, #8]	; (1000936c <dmp_load_motion_driver_firmware+0x14>)
10009362:	4c03      	ldr	r4, [pc, #12]	; (10009370 <dmp_load_motion_driver_firmware+0x18>)
10009364:	4803      	ldr	r0, [pc, #12]	; (10009374 <dmp_load_motion_driver_firmware+0x1c>)
10009366:	47a0      	blx	r4
        DMP_SAMPLE_RATE);
}
10009368:	bd10      	pop	{r4, pc}
1000936a:	46c0      	nop			; (mov r8, r8)
1000936c:	100197b0 	.word	0x100197b0
10009370:	100091ad 	.word	0x100091ad
10009374:	00000bf6 	.word	0x00000bf6

10009378 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
10009378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000937a:	4647      	mov	r7, r8
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000937c:	4c3a      	ldr	r4, [pc, #232]	; (10009468 <dmp_set_orientation+0xf0>)
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
1000937e:	b480      	push	{r7}
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
10009380:	0021      	movs	r1, r4
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
10009382:	b086      	sub	sp, #24
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
10009384:	4b39      	ldr	r3, [pc, #228]	; (1000946c <dmp_set_orientation+0xf4>)
10009386:	af02      	add	r7, sp, #8
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
10009388:	0005      	movs	r5, r0
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
1000938a:	310c      	adds	r1, #12
1000938c:	2203      	movs	r2, #3
1000938e:	0038      	movs	r0, r7
10009390:	4698      	mov	r8, r3
10009392:	4798      	blx	r3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
10009394:	0021      	movs	r1, r4
10009396:	ae03      	add	r6, sp, #12
10009398:	3110      	adds	r1, #16
1000939a:	2203      	movs	r2, #3
1000939c:	0030      	movs	r0, r6
1000939e:	47c0      	blx	r8
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
100093a0:	0021      	movs	r1, r4
100093a2:	2203      	movs	r2, #3
100093a4:	3114      	adds	r1, #20
100093a6:	a804      	add	r0, sp, #16
100093a8:	47c0      	blx	r8
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
100093aa:	0021      	movs	r1, r4
100093ac:	2203      	movs	r2, #3
100093ae:	3118      	adds	r1, #24
100093b0:	a805      	add	r0, sp, #20
100093b2:	47c0      	blx	r8

    gyro_regs[0] = gyro_axes[orient & 3];
100093b4:	2103      	movs	r1, #3
100093b6:	0008      	movs	r0, r1
100093b8:	466a      	mov	r2, sp
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
100093ba:	466c      	mov	r4, sp
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
100093bc:	4028      	ands	r0, r5
100093be:	5c3b      	ldrb	r3, [r7, r0]
100093c0:	7013      	strb	r3, [r2, #0]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
100093c2:	08ea      	lsrs	r2, r5, #3
100093c4:	400a      	ands	r2, r1
100093c6:	5cbb      	ldrb	r3, [r7, r2]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
100093c8:	5cb2      	ldrb	r2, [r6, r2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
100093ca:	7063      	strb	r3, [r4, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
100093cc:	09ab      	lsrs	r3, r5, #6
100093ce:	400b      	ands	r3, r1
100093d0:	5cf9      	ldrb	r1, [r7, r3]
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
100093d2:	5cf3      	ldrb	r3, [r6, r3]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
100093d4:	70a1      	strb	r1, [r4, #2]
    accel_regs[0] = accel_axes[orient & 3];
100093d6:	5c31      	ldrb	r1, [r6, r0]
100093d8:	ac01      	add	r4, sp, #4
100093da:	7021      	strb	r1, [r4, #0]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
100093dc:	7062      	strb	r2, [r4, #1]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
100093de:	2103      	movs	r1, #3
100093e0:	466a      	mov	r2, sp
100093e2:	4823      	ldr	r0, [pc, #140]	; (10009470 <dmp_set_orientation+0xf8>)
100093e4:	4e23      	ldr	r6, [pc, #140]	; (10009474 <dmp_set_orientation+0xfc>)
    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
100093e6:	70a3      	strb	r3, [r4, #2]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
100093e8:	47b0      	blx	r6
100093ea:	2800      	cmp	r0, #0
100093ec:	d138      	bne.n	10009460 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
100093ee:	0022      	movs	r2, r4
100093f0:	2103      	movs	r1, #3
100093f2:	4821      	ldr	r0, [pc, #132]	; (10009478 <dmp_set_orientation+0x100>)
100093f4:	47b0      	blx	r6
100093f6:	2800      	cmp	r0, #0
100093f8:	d132      	bne.n	10009460 <dmp_set_orientation+0xe8>
        return -1;

    memcpy(gyro_regs, gyro_sign, 3);
100093fa:	2203      	movs	r2, #3
100093fc:	a904      	add	r1, sp, #16
100093fe:	4668      	mov	r0, sp
10009400:	47c0      	blx	r8
    memcpy(accel_regs, accel_sign, 3);
10009402:	466b      	mov	r3, sp
10009404:	8a9b      	ldrh	r3, [r3, #20]
10009406:	8023      	strh	r3, [r4, #0]
10009408:	466b      	mov	r3, sp
1000940a:	7d9b      	ldrb	r3, [r3, #22]
1000940c:	70a3      	strb	r3, [r4, #2]
    if (orient & 4) {
1000940e:	076b      	lsls	r3, r5, #29
10009410:	d504      	bpl.n	1000941c <dmp_set_orientation+0xa4>
        gyro_regs[0] |= 1;
10009412:	2337      	movs	r3, #55	; 0x37
10009414:	466a      	mov	r2, sp
10009416:	7013      	strb	r3, [r2, #0]
        accel_regs[0] |= 1;
10009418:	3b10      	subs	r3, #16
1000941a:	7023      	strb	r3, [r4, #0]
    }
    if (orient & 0x20) {
1000941c:	06ab      	lsls	r3, r5, #26
1000941e:	d504      	bpl.n	1000942a <dmp_set_orientation+0xb2>
        gyro_regs[1] |= 1;
10009420:	2357      	movs	r3, #87	; 0x57
10009422:	466a      	mov	r2, sp
10009424:	7053      	strb	r3, [r2, #1]
        accel_regs[1] |= 1;
10009426:	3b10      	subs	r3, #16
10009428:	7063      	strb	r3, [r4, #1]
    }
    if (orient & 0x100) {
1000942a:	05eb      	lsls	r3, r5, #23
1000942c:	d412      	bmi.n	10009454 <dmp_set_orientation+0xdc>
        gyro_regs[2] |= 1;
        accel_regs[2] |= 1;
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
1000942e:	2088      	movs	r0, #136	; 0x88
10009430:	466a      	mov	r2, sp
10009432:	2103      	movs	r1, #3
10009434:	00c0      	lsls	r0, r0, #3
10009436:	47b0      	blx	r6
10009438:	2800      	cmp	r0, #0
1000943a:	d111      	bne.n	10009460 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
1000943c:	0022      	movs	r2, r4
1000943e:	2103      	movs	r1, #3
10009440:	480e      	ldr	r0, [pc, #56]	; (1000947c <dmp_set_orientation+0x104>)
10009442:	47b0      	blx	r6
10009444:	2800      	cmp	r0, #0
10009446:	d10b      	bne.n	10009460 <dmp_set_orientation+0xe8>
        return -1;
    dmp.orient = orient;
10009448:	4b0d      	ldr	r3, [pc, #52]	; (10009480 <dmp_set_orientation+0x108>)
1000944a:	811d      	strh	r5, [r3, #8]
    return 0;
}
1000944c:	b006      	add	sp, #24
1000944e:	bc04      	pop	{r2}
10009450:	4690      	mov	r8, r2
10009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (orient & 0x20) {
        gyro_regs[1] |= 1;
        accel_regs[1] |= 1;
    }
    if (orient & 0x100) {
        gyro_regs[2] |= 1;
10009454:	2377      	movs	r3, #119	; 0x77
10009456:	466a      	mov	r2, sp
10009458:	7093      	strb	r3, [r2, #2]
        accel_regs[2] |= 1;
1000945a:	3b10      	subs	r3, #16
1000945c:	70a3      	strb	r3, [r4, #2]
1000945e:	e7e6      	b.n	1000942e <dmp_set_orientation+0xb6>
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        return -1;
10009460:	2001      	movs	r0, #1
10009462:	4240      	negs	r0, r0
10009464:	e7f2      	b.n	1000944c <dmp_set_orientation+0xd4>
10009466:	46c0      	nop			; (mov r8, r8)
10009468:	10019764 	.word	0x10019764
1000946c:	100180cf 	.word	0x100180cf
10009470:	00000426 	.word	0x00000426
10009474:	100090ed 	.word	0x100090ed
10009478:	0000042a 	.word	0x0000042a
1000947c:	00000431 	.word	0x00000431
10009480:	1001b48c 	.word	0x1001b48c

10009484 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
10009484:	b530      	push	{r4, r5, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
10009486:	4913      	ldr	r1, [pc, #76]	; (100094d4 <dmp_set_fifo_rate+0x50>)
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
10009488:	b087      	sub	sp, #28
1000948a:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000948c:	220c      	movs	r2, #12
1000948e:	311c      	adds	r1, #28
10009490:	a803      	add	r0, sp, #12
10009492:	4b11      	ldr	r3, [pc, #68]	; (100094d8 <dmp_set_fifo_rate+0x54>)
10009494:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
10009496:	2cc8      	cmp	r4, #200	; 0xc8
10009498:	d819      	bhi.n	100094ce <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
1000949a:	0021      	movs	r1, r4
1000949c:	4b0f      	ldr	r3, [pc, #60]	; (100094dc <dmp_set_fifo_rate+0x58>)
1000949e:	20c8      	movs	r0, #200	; 0xc8
100094a0:	4798      	blx	r3
100094a2:	3801      	subs	r0, #1
100094a4:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094a6:	aa01      	add	r2, sp, #4
100094a8:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(div & 0xFF);
100094aa:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100094ac:	2102      	movs	r1, #2
100094ae:	480c      	ldr	r0, [pc, #48]	; (100094e0 <dmp_set_fifo_rate+0x5c>)
100094b0:	4d0c      	ldr	r5, [pc, #48]	; (100094e4 <dmp_set_fifo_rate+0x60>)
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094b2:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
100094b4:	47a8      	blx	r5
100094b6:	2800      	cmp	r0, #0
100094b8:	d109      	bne.n	100094ce <dmp_set_fifo_rate+0x4a>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100094ba:	aa03      	add	r2, sp, #12
100094bc:	210c      	movs	r1, #12
100094be:	480a      	ldr	r0, [pc, #40]	; (100094e8 <dmp_set_fifo_rate+0x64>)
100094c0:	47a8      	blx	r5
100094c2:	2800      	cmp	r0, #0
100094c4:	d103      	bne.n	100094ce <dmp_set_fifo_rate+0x4a>
        return -1;

    dmp.fifo_rate = rate;
100094c6:	4b09      	ldr	r3, [pc, #36]	; (100094ec <dmp_set_fifo_rate+0x68>)
100094c8:	819c      	strh	r4, [r3, #12]
    return 0;
}
100094ca:	b007      	add	sp, #28
100094cc:	bd30      	pop	{r4, r5, pc}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
100094ce:	2001      	movs	r0, #1
100094d0:	4240      	negs	r0, r0
100094d2:	e7fa      	b.n	100094ca <dmp_set_fifo_rate+0x46>
100094d4:	10019764 	.word	0x10019764
100094d8:	100180cf 	.word	0x100180cf
100094dc:	10014ec9 	.word	0x10014ec9
100094e0:	00000216 	.word	0x00000216
100094e4:	100090ed 	.word	0x100090ed
100094e8:	00000ac1 	.word	0x00000ac1
100094ec:	1001b48c 	.word	0x1001b48c

100094f0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
100094f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100094f2:	4647      	mov	r7, r8
100094f4:	b480      	push	{r7}
100094f6:	0005      	movs	r5, r0
100094f8:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
100094fa:	0743      	lsls	r3, r0, #29
100094fc:	d067      	beq.n	100095ce <dmp_set_tap_thresh+0xde>
100094fe:	23c8      	movs	r3, #200	; 0xc8
10009500:	00db      	lsls	r3, r3, #3
10009502:	4299      	cmp	r1, r3
10009504:	d863      	bhi.n	100095ce <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009506:	4b4c      	ldr	r3, [pc, #304]	; (10009638 <dmp_set_tap_thresh+0x148>)
10009508:	0008      	movs	r0, r1
1000950a:	4798      	blx	r3
1000950c:	4b4b      	ldr	r3, [pc, #300]	; (1000963c <dmp_set_tap_thresh+0x14c>)
1000950e:	494c      	ldr	r1, [pc, #304]	; (10009640 <dmp_set_tap_thresh+0x150>)
10009510:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
10009512:	466b      	mov	r3, sp
10009514:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
10009516:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
10009518:	4b4a      	ldr	r3, [pc, #296]	; (10009644 <dmp_set_tap_thresh+0x154>)
1000951a:	0020      	movs	r0, r4
1000951c:	4798      	blx	r3
    switch (accel_fsr) {
1000951e:	7823      	ldrb	r3, [r4, #0]
10009520:	2b04      	cmp	r3, #4
10009522:	d100      	bne.n	10009526 <dmp_set_tap_thresh+0x36>
10009524:	e079      	b.n	1000961a <dmp_set_tap_thresh+0x12a>
10009526:	d931      	bls.n	1000958c <dmp_set_tap_thresh+0x9c>
10009528:	2b08      	cmp	r3, #8
1000952a:	d067      	beq.n	100095fc <dmp_set_tap_thresh+0x10c>
1000952c:	2b10      	cmp	r3, #16
1000952e:	d14e      	bne.n	100095ce <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009530:	218a      	movs	r1, #138	; 0x8a
10009532:	4b45      	ldr	r3, [pc, #276]	; (10009648 <dmp_set_tap_thresh+0x158>)
10009534:	05c9      	lsls	r1, r1, #23
10009536:	1c38      	adds	r0, r7, #0
10009538:	4698      	mov	r8, r3
1000953a:	4798      	blx	r3
1000953c:	4c43      	ldr	r4, [pc, #268]	; (1000964c <dmp_set_tap_thresh+0x15c>)
1000953e:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009540:	4943      	ldr	r1, [pc, #268]	; (10009650 <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009542:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009544:	1c38      	adds	r0, r7, #0
10009546:	47c0      	blx	r8
10009548:	47a0      	blx	r4
1000954a:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
1000954c:	ac01      	add	r4, sp, #4
1000954e:	0a33      	lsrs	r3, r6, #8
10009550:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009552:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009554:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009556:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
10009558:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
1000955a:	07eb      	lsls	r3, r5, #31
1000955c:	d427      	bmi.n	100095ae <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
1000955e:	07ab      	lsls	r3, r5, #30
10009560:	d43b      	bmi.n	100095da <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
10009562:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
10009564:	076b      	lsls	r3, r5, #29
10009566:	d534      	bpl.n	100095d2 <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
10009568:	20ee      	movs	r0, #238	; 0xee
1000956a:	0022      	movs	r2, r4
1000956c:	2102      	movs	r1, #2
1000956e:	0040      	lsls	r0, r0, #1
10009570:	4c38      	ldr	r4, [pc, #224]	; (10009654 <dmp_set_tap_thresh+0x164>)
10009572:	47a0      	blx	r4
10009574:	2800      	cmp	r0, #0
10009576:	d12a      	bne.n	100095ce <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009578:	466b      	mov	r3, sp
1000957a:	302d      	adds	r0, #45	; 0x2d
1000957c:	1d9a      	adds	r2, r3, #6
1000957e:	2102      	movs	r1, #2
10009580:	30ff      	adds	r0, #255	; 0xff
10009582:	47a0      	blx	r4
10009584:	1e43      	subs	r3, r0, #1
10009586:	4198      	sbcs	r0, r3
10009588:	4240      	negs	r0, r0
1000958a:	e022      	b.n	100095d2 <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
1000958c:	2b02      	cmp	r3, #2
1000958e:	d11e      	bne.n	100095ce <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009590:	218d      	movs	r1, #141	; 0x8d
10009592:	4b2d      	ldr	r3, [pc, #180]	; (10009648 <dmp_set_tap_thresh+0x158>)
10009594:	05c9      	lsls	r1, r1, #23
10009596:	1c38      	adds	r0, r7, #0
10009598:	4698      	mov	r8, r3
1000959a:	4798      	blx	r3
1000959c:	4c2b      	ldr	r4, [pc, #172]	; (1000964c <dmp_set_tap_thresh+0x15c>)
1000959e:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095a0:	492d      	ldr	r1, [pc, #180]	; (10009658 <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095a2:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095a4:	1c38      	adds	r0, r7, #0
100095a6:	47c0      	blx	r8
100095a8:	47a0      	blx	r4
100095aa:	b280      	uxth	r0, r0
        break;
100095ac:	e7ce      	b.n	1000954c <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100095ae:	20ea      	movs	r0, #234	; 0xea
100095b0:	0022      	movs	r2, r4
100095b2:	2102      	movs	r1, #2
100095b4:	0040      	lsls	r0, r0, #1
100095b6:	4e27      	ldr	r6, [pc, #156]	; (10009654 <dmp_set_tap_thresh+0x164>)
100095b8:	47b0      	blx	r6
100095ba:	2800      	cmp	r0, #0
100095bc:	d107      	bne.n	100095ce <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
100095be:	466b      	mov	r3, sp
100095c0:	3025      	adds	r0, #37	; 0x25
100095c2:	1d9a      	adds	r2, r3, #6
100095c4:	2102      	movs	r1, #2
100095c6:	30ff      	adds	r0, #255	; 0xff
100095c8:	47b0      	blx	r6
100095ca:	2800      	cmp	r0, #0
100095cc:	d0c7      	beq.n	1000955e <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
100095ce:	2001      	movs	r0, #1
100095d0:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
100095d2:	b002      	add	sp, #8
100095d4:	bc04      	pop	{r2}
100095d6:	4690      	mov	r8, r2
100095d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100095da:	20ec      	movs	r0, #236	; 0xec
100095dc:	0022      	movs	r2, r4
100095de:	2102      	movs	r1, #2
100095e0:	0040      	lsls	r0, r0, #1
100095e2:	4e1c      	ldr	r6, [pc, #112]	; (10009654 <dmp_set_tap_thresh+0x164>)
100095e4:	47b0      	blx	r6
100095e6:	2800      	cmp	r0, #0
100095e8:	d1f1      	bne.n	100095ce <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
100095ea:	466b      	mov	r3, sp
100095ec:	3029      	adds	r0, #41	; 0x29
100095ee:	1d9a      	adds	r2, r3, #6
100095f0:	2102      	movs	r1, #2
100095f2:	30ff      	adds	r0, #255	; 0xff
100095f4:	47b0      	blx	r6
100095f6:	2800      	cmp	r0, #0
100095f8:	d0b3      	beq.n	10009562 <dmp_set_tap_thresh+0x72>
100095fa:	e7e8      	b.n	100095ce <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
100095fc:	218b      	movs	r1, #139	; 0x8b
100095fe:	4b12      	ldr	r3, [pc, #72]	; (10009648 <dmp_set_tap_thresh+0x158>)
10009600:	05c9      	lsls	r1, r1, #23
10009602:	1c38      	adds	r0, r7, #0
10009604:	4698      	mov	r8, r3
10009606:	4798      	blx	r3
10009608:	4c10      	ldr	r4, [pc, #64]	; (1000964c <dmp_set_tap_thresh+0x15c>)
1000960a:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000960c:	4913      	ldr	r1, [pc, #76]	; (1000965c <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000960e:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009610:	1c38      	adds	r0, r7, #0
10009612:	47c0      	blx	r8
10009614:	47a0      	blx	r4
10009616:	b280      	uxth	r0, r0
        break;
10009618:	e798      	b.n	1000954c <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000961a:	218c      	movs	r1, #140	; 0x8c
1000961c:	4b0a      	ldr	r3, [pc, #40]	; (10009648 <dmp_set_tap_thresh+0x158>)
1000961e:	05c9      	lsls	r1, r1, #23
10009620:	1c38      	adds	r0, r7, #0
10009622:	4698      	mov	r8, r3
10009624:	4798      	blx	r3
10009626:	4c09      	ldr	r4, [pc, #36]	; (1000964c <dmp_set_tap_thresh+0x15c>)
10009628:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000962a:	490d      	ldr	r1, [pc, #52]	; (10009660 <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000962c:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000962e:	1c38      	adds	r0, r7, #0
10009630:	47c0      	blx	r8
10009632:	47a0      	blx	r4
10009634:	b280      	uxth	r0, r0
        break;
10009636:	e789      	b.n	1000954c <dmp_set_tap_thresh+0x5c>
10009638:	1001605d 	.word	0x1001605d
1000963c:	10015691 	.word	0x10015691
10009640:	43480000 	.word	0x43480000
10009644:	10008649 	.word	0x10008649
10009648:	10015a25 	.word	0x10015a25
1000964c:	10015231 	.word	0x10015231
10009650:	44c00000 	.word	0x44c00000
10009654:	100090ed 	.word	0x100090ed
10009658:	46400000 	.word	0x46400000
1000965c:	45400000 	.word	0x45400000
10009660:	45c00000 	.word	0x45c00000

10009664 <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009664:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
10009666:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009668:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1000966a:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
1000966c:	2b00      	cmp	r3, #0
1000966e:	d115      	bne.n	1000969c <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009670:	466a      	mov	r2, sp
10009672:	3207      	adds	r2, #7
10009674:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
10009676:	0783      	lsls	r3, r0, #30
10009678:	d503      	bpl.n	10009682 <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
1000967a:	230c      	movs	r3, #12
1000967c:	7811      	ldrb	r1, [r2, #0]
1000967e:	430b      	orrs	r3, r1
10009680:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
10009682:	0743      	lsls	r3, r0, #29
10009684:	d503      	bpl.n	1000968e <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
10009686:	2303      	movs	r3, #3
10009688:	7811      	ldrb	r1, [r2, #0]
1000968a:	430b      	orrs	r3, r1
1000968c:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
1000968e:	20a4      	movs	r0, #164	; 0xa4
10009690:	2101      	movs	r1, #1
10009692:	4b05      	ldr	r3, [pc, #20]	; (100096a8 <dmp_set_tap_axes+0x44>)
10009694:	0040      	lsls	r0, r0, #1
10009696:	4798      	blx	r3
}
10009698:	b003      	add	sp, #12
1000969a:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
1000969c:	466b      	mov	r3, sp
1000969e:	1dda      	adds	r2, r3, #7
100096a0:	2330      	movs	r3, #48	; 0x30
100096a2:	7013      	strb	r3, [r2, #0]
100096a4:	e7e7      	b.n	10009676 <dmp_set_tap_axes+0x12>
100096a6:	46c0      	nop			; (mov r8, r8)
100096a8:	100090ed 	.word	0x100090ed

100096ac <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
100096ac:	b500      	push	{lr}
100096ae:	b085      	sub	sp, #20
    if (enable) {
100096b0:	2800      	cmp	r0, #0
100096b2:	d10d      	bne.n	100096d0 <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
100096b4:	4908      	ldr	r1, [pc, #32]	; (100096d8 <dmp_enable_gyro_cal+0x2c>)
100096b6:	2209      	movs	r2, #9
100096b8:	3128      	adds	r1, #40	; 0x28
100096ba:	4b08      	ldr	r3, [pc, #32]	; (100096dc <dmp_enable_gyro_cal+0x30>)
100096bc:	a801      	add	r0, sp, #4
100096be:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100096c0:	2097      	movs	r0, #151	; 0x97
100096c2:	aa01      	add	r2, sp, #4
100096c4:	2109      	movs	r1, #9
100096c6:	00c0      	lsls	r0, r0, #3
100096c8:	4b05      	ldr	r3, [pc, #20]	; (100096e0 <dmp_enable_gyro_cal+0x34>)
100096ca:	4798      	blx	r3
    }
}
100096cc:	b005      	add	sp, #20
100096ce:	bd00      	pop	{pc}
100096d0:	4b04      	ldr	r3, [pc, #16]	; (100096e4 <dmp_enable_gyro_cal+0x38>)
100096d2:	4798      	blx	r3
100096d4:	e7fa      	b.n	100096cc <dmp_enable_gyro_cal+0x20>
100096d6:	46c0      	nop			; (mov r8, r8)
100096d8:	10019764 	.word	0x10019764
100096dc:	100180cf 	.word	0x100180cf
100096e0:	100090ed 	.word	0x100090ed
100096e4:	1000932d 	.word	0x1000932d

100096e8 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
100096e8:	b500      	push	{lr}
100096ea:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
100096ec:	2800      	cmp	r0, #0
100096ee:	d010      	beq.n	10009712 <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
100096f0:	23c0      	movs	r3, #192	; 0xc0
100096f2:	aa01      	add	r2, sp, #4
100096f4:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
100096f6:	3302      	adds	r3, #2
100096f8:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
100096fa:	3302      	adds	r3, #2
100096fc:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
100096fe:	3302      	adds	r3, #2
10009700:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009702:	2104      	movs	r1, #4
10009704:	4b05      	ldr	r3, [pc, #20]	; (1000971c <dmp_enable_lp_quat+0x34>)
10009706:	4806      	ldr	r0, [pc, #24]	; (10009720 <dmp_enable_lp_quat+0x38>)
10009708:	4798      	blx	r3

    return mpu_reset_fifo();
1000970a:	4b06      	ldr	r3, [pc, #24]	; (10009724 <dmp_enable_lp_quat+0x3c>)
1000970c:	4798      	blx	r3
}
1000970e:	b003      	add	sp, #12
10009710:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
10009712:	4b05      	ldr	r3, [pc, #20]	; (10009728 <dmp_enable_lp_quat+0x40>)
10009714:	aa01      	add	r2, sp, #4
10009716:	9301      	str	r3, [sp, #4]
10009718:	e7f3      	b.n	10009702 <dmp_enable_lp_quat+0x1a>
1000971a:	46c0      	nop			; (mov r8, r8)
1000971c:	100090ed 	.word	0x100090ed
10009720:	00000a98 	.word	0x00000a98
10009724:	1000841d 	.word	0x1000841d
10009728:	8b8b8b8b 	.word	0x8b8b8b8b

1000972c <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
1000972c:	b500      	push	{lr}
1000972e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009730:	2800      	cmp	r0, #0
10009732:	d010      	beq.n	10009756 <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
10009734:	2320      	movs	r3, #32
10009736:	aa01      	add	r2, sp, #4
10009738:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
1000973a:	3308      	adds	r3, #8
1000973c:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
1000973e:	3308      	adds	r3, #8
10009740:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
10009742:	3308      	adds	r3, #8
10009744:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
10009746:	2104      	movs	r1, #4
10009748:	4b05      	ldr	r3, [pc, #20]	; (10009760 <dmp_enable_6x_lp_quat+0x34>)
1000974a:	4806      	ldr	r0, [pc, #24]	; (10009764 <dmp_enable_6x_lp_quat+0x38>)
1000974c:	4798      	blx	r3

    return mpu_reset_fifo();
1000974e:	4b06      	ldr	r3, [pc, #24]	; (10009768 <dmp_enable_6x_lp_quat+0x3c>)
10009750:	4798      	blx	r3
}
10009752:	b003      	add	sp, #12
10009754:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
10009756:	4b05      	ldr	r3, [pc, #20]	; (1000976c <dmp_enable_6x_lp_quat+0x40>)
10009758:	aa01      	add	r2, sp, #4
1000975a:	9301      	str	r3, [sp, #4]
1000975c:	e7f3      	b.n	10009746 <dmp_enable_6x_lp_quat+0x1a>
1000975e:	46c0      	nop			; (mov r8, r8)
10009760:	100090ed 	.word	0x100090ed
10009764:	00000a9e 	.word	0x00000a9e
10009768:	1000841d 	.word	0x1000841d
1000976c:	a3a3a3a3 	.word	0xa3a3a3a3

10009770 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009770:	b5f0      	push	{r4, r5, r6, r7, lr}
10009772:	4645      	mov	r5, r8
10009774:	464e      	mov	r6, r9
10009776:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009778:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
1000977a:	b4e0      	push	{r5, r6, r7}
1000977c:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
1000977e:	ac01      	add	r4, sp, #4
10009780:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009782:	33c8      	adds	r3, #200	; 0xc8
10009784:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009786:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009788:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
1000978a:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
1000978c:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
1000978e:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
10009790:	2104      	movs	r1, #4
10009792:	2068      	movs	r0, #104	; 0x68
10009794:	4e7c      	ldr	r6, [pc, #496]	; (10009988 <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009796:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009798:	47b0      	blx	r6
1000979a:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
1000979c:	23a3      	movs	r3, #163	; 0xa3
1000979e:	402a      	ands	r2, r5
100097a0:	7023      	strb	r3, [r4, #0]
100097a2:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
100097a4:	d100      	bne.n	100097a8 <dmp_enable_feature+0x38>
100097a6:	e0e1      	b.n	1000996c <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
100097a8:	331d      	adds	r3, #29
100097aa:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
100097ac:	3308      	adds	r3, #8
100097ae:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
100097b0:	3b06      	subs	r3, #6
100097b2:	70e3      	strb	r3, [r4, #3]
100097b4:	27c0      	movs	r7, #192	; 0xc0
100097b6:	007f      	lsls	r7, r7, #1
100097b8:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100097ba:	d100      	bne.n	100097be <dmp_enable_feature+0x4e>
100097bc:	e0d1      	b.n	10009962 <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
100097be:	23c4      	movs	r3, #196	; 0xc4
100097c0:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
100097c2:	3308      	adds	r3, #8
100097c4:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
100097c6:	3b06      	subs	r3, #6
100097c8:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
100097ca:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
100097cc:	0022      	movs	r2, r4
100097ce:	210a      	movs	r1, #10
100097d0:	486e      	ldr	r0, [pc, #440]	; (1000998c <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
100097d2:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
100097d4:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
100097d6:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
100097d8:	47b0      	blx	r6
100097da:	2303      	movs	r3, #3
100097dc:	402b      	ands	r3, r5
100097de:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
100097e0:	d100      	bne.n	100097e4 <dmp_enable_feature+0x74>
100097e2:	e0bb      	b.n	1000995c <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
100097e4:	2320      	movs	r3, #32
100097e6:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
100097e8:	0022      	movs	r2, r4
100097ea:	2101      	movs	r1, #1
100097ec:	4868      	ldr	r0, [pc, #416]	; (10009990 <dmp_enable_feature+0x220>)
100097ee:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
100097f0:	06ab      	lsls	r3, r5, #26
100097f2:	d400      	bmi.n	100097f6 <dmp_enable_feature+0x86>
100097f4:	e0ae      	b.n	10009954 <dmp_enable_feature+0x1e4>
100097f6:	4b67      	ldr	r3, [pc, #412]	; (10009994 <dmp_enable_feature+0x224>)
100097f8:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100097fa:	2f00      	cmp	r7, #0
100097fc:	d00e      	beq.n	1000981c <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
100097fe:	05eb      	lsls	r3, r5, #23
10009800:	d500      	bpl.n	10009804 <dmp_enable_feature+0x94>
10009802:	e0b7      	b.n	10009974 <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
10009804:	23b0      	movs	r3, #176	; 0xb0
10009806:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
10009808:	3b30      	subs	r3, #48	; 0x30
1000980a:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
1000980c:	3334      	adds	r3, #52	; 0x34
1000980e:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
10009810:	3b24      	subs	r3, #36	; 0x24
10009812:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009814:	0022      	movs	r2, r4
10009816:	2104      	movs	r1, #4
10009818:	485f      	ldr	r0, [pc, #380]	; (10009998 <dmp_enable_feature+0x228>)
1000981a:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
1000981c:	07eb      	lsls	r3, r5, #31
1000981e:	d400      	bmi.n	10009822 <dmp_enable_feature+0xb2>
10009820:	e090      	b.n	10009944 <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
10009822:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009824:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
10009826:	0022      	movs	r2, r4
10009828:	2101      	movs	r1, #1
1000982a:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
1000982c:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
1000982e:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009830:	21fa      	movs	r1, #250	; 0xfa
10009832:	4b5a      	ldr	r3, [pc, #360]	; (1000999c <dmp_enable_feature+0x22c>)
10009834:	2007      	movs	r0, #7
10009836:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009838:	4b59      	ldr	r3, [pc, #356]	; (100099a0 <dmp_enable_feature+0x230>)
1000983a:	2007      	movs	r0, #7
1000983c:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000983e:	2300      	movs	r3, #0
10009840:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
10009842:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009844:	466b      	mov	r3, sp
10009846:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
10009848:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000984a:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
1000984c:	30ff      	adds	r0, #255	; 0xff
1000984e:	466a      	mov	r2, sp
10009850:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009852:	466b      	mov	r3, sp
10009854:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009856:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009858:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000985a:	2314      	movs	r3, #20
1000985c:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000985e:	2102      	movs	r1, #2
10009860:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009862:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
10009864:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009866:	466b      	mov	r3, sp
10009868:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
1000986a:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000986c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000986e:	2364      	movs	r3, #100	; 0x64
10009870:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
10009872:	2102      	movs	r1, #2
10009874:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009876:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009878:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
1000987a:	466b      	mov	r3, sp
1000987c:	4652      	mov	r2, sl
1000987e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009880:	466a      	mov	r2, sp
10009882:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
10009884:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009886:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
10009888:	336b      	adds	r3, #107	; 0x6b
1000988a:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
1000988c:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1000988e:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
10009890:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
10009892:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009894:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009896:	466b      	mov	r3, sp
10009898:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
1000989a:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000989c:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
1000989e:	2308      	movs	r3, #8
100098a0:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
100098a2:	2102      	movs	r1, #2
100098a4:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
100098a6:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
100098a8:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098aa:	466b      	mov	r3, sp
100098ac:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
100098ae:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098b0:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
100098b2:	2302      	movs	r3, #2
100098b4:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
100098b6:	2102      	movs	r1, #2
100098b8:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
100098ba:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
100098bc:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
100098be:	07ab      	lsls	r3, r5, #30
100098c0:	d53d      	bpl.n	1000993e <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
100098c2:	23d9      	movs	r3, #217	; 0xd9
100098c4:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
100098c6:	0022      	movs	r2, r4
100098c8:	2101      	movs	r1, #1
100098ca:	4836      	ldr	r0, [pc, #216]	; (100099a4 <dmp_enable_feature+0x234>)
100098cc:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
100098ce:	076b      	lsls	r3, r5, #29
100098d0:	d531      	bpl.n	10009936 <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
100098d2:	2001      	movs	r0, #1
100098d4:	4b34      	ldr	r3, [pc, #208]	; (100099a8 <dmp_enable_feature+0x238>)
100098d6:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
100098d8:	06eb      	lsls	r3, r5, #27
100098da:	d528      	bpl.n	1000992e <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
100098dc:	2001      	movs	r0, #1
100098de:	4b33      	ldr	r3, [pc, #204]	; (100099ac <dmp_enable_feature+0x23c>)
100098e0:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
100098e2:	2308      	movs	r3, #8
100098e4:	4c32      	ldr	r4, [pc, #200]	; (100099b0 <dmp_enable_feature+0x240>)
100098e6:	432b      	orrs	r3, r5
100098e8:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
100098ea:	4b32      	ldr	r3, [pc, #200]	; (100099b4 <dmp_enable_feature+0x244>)
100098ec:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
100098ee:	4643      	mov	r3, r8
100098f0:	2b00      	cmp	r3, #0
100098f2:	d119      	bne.n	10009928 <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
100098f4:	4643      	mov	r3, r8
100098f6:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
100098f8:	2f00      	cmp	r7, #0
100098fa:	d002      	beq.n	10009902 <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
100098fc:	7ba3      	ldrb	r3, [r4, #14]
100098fe:	3306      	adds	r3, #6
10009900:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009902:	2314      	movs	r3, #20
10009904:	422b      	tst	r3, r5
10009906:	d002      	beq.n	1000990e <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
10009908:	7ba3      	ldrb	r3, [r4, #14]
1000990a:	3310      	adds	r3, #16
1000990c:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
1000990e:	464b      	mov	r3, r9
10009910:	2b00      	cmp	r3, #0
10009912:	d002      	beq.n	1000991a <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
10009914:	7ba3      	ldrb	r3, [r4, #14]
10009916:	3304      	adds	r3, #4
10009918:	73a3      	strb	r3, [r4, #14]

    return 0;
}
1000991a:	2000      	movs	r0, #0
1000991c:	b004      	add	sp, #16
1000991e:	bc1c      	pop	{r2, r3, r4}
10009920:	4690      	mov	r8, r2
10009922:	4699      	mov	r9, r3
10009924:	46a2      	mov	sl, r4
10009926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009928:	2306      	movs	r3, #6
1000992a:	73a3      	strb	r3, [r4, #14]
1000992c:	e7e4      	b.n	100098f8 <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
1000992e:	4b1f      	ldr	r3, [pc, #124]	; (100099ac <dmp_enable_feature+0x23c>)
10009930:	2000      	movs	r0, #0
10009932:	4798      	blx	r3
10009934:	e7d5      	b.n	100098e2 <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
10009936:	4b1c      	ldr	r3, [pc, #112]	; (100099a8 <dmp_enable_feature+0x238>)
10009938:	2000      	movs	r0, #0
1000993a:	4798      	blx	r3
1000993c:	e7cc      	b.n	100098d8 <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
1000993e:	23d8      	movs	r3, #216	; 0xd8
10009940:	7023      	strb	r3, [r4, #0]
10009942:	e7c0      	b.n	100098c6 <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
10009944:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
10009946:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
10009948:	0022      	movs	r2, r4
1000994a:	2101      	movs	r1, #1
1000994c:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
1000994e:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009950:	47b0      	blx	r6
10009952:	e7b4      	b.n	100098be <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
10009954:	4b18      	ldr	r3, [pc, #96]	; (100099b8 <dmp_enable_feature+0x248>)
10009956:	2000      	movs	r0, #0
10009958:	4798      	blx	r3
1000995a:	e74e      	b.n	100097fa <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
1000995c:	23d8      	movs	r3, #216	; 0xd8
1000995e:	7023      	strb	r3, [r4, #0]
10009960:	e742      	b.n	100097e8 <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
10009962:	23a3      	movs	r3, #163	; 0xa3
10009964:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
10009966:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
10009968:	71a3      	strb	r3, [r4, #6]
1000996a:	e72e      	b.n	100097ca <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
1000996c:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
1000996e:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
10009970:	70e3      	strb	r3, [r4, #3]
10009972:	e71f      	b.n	100097b4 <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
10009974:	23b2      	movs	r3, #178	; 0xb2
10009976:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
10009978:	3b27      	subs	r3, #39	; 0x27
1000997a:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
1000997c:	332b      	adds	r3, #43	; 0x2b
1000997e:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
10009980:	3b1b      	subs	r3, #27
10009982:	70e3      	strb	r3, [r4, #3]
10009984:	e746      	b.n	10009814 <dmp_enable_feature+0xa4>
10009986:	46c0      	nop			; (mov r8, r8)
10009988:	100090ed 	.word	0x100090ed
1000998c:	00000aa7 	.word	0x00000aa7
10009990:	00000ab6 	.word	0x00000ab6
10009994:	1000932d 	.word	0x1000932d
10009998:	00000aa2 	.word	0x00000aa2
1000999c:	100094f1 	.word	0x100094f1
100099a0:	10009665 	.word	0x10009665
100099a4:	0000073d 	.word	0x0000073d
100099a8:	100096e9 	.word	0x100096e9
100099ac:	1000972d 	.word	0x1000972d
100099b0:	1001b48c 	.word	0x1001b48c
100099b4:	1000841d 	.word	0x1000841d
100099b8:	100096ad 	.word	0x100096ad

100099bc <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
100099bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100099be:	465f      	mov	r7, fp
100099c0:	4644      	mov	r4, r8
100099c2:	4656      	mov	r6, sl
100099c4:	464d      	mov	r5, r9
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
100099c6:	2300      	movs	r3, #0
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
100099c8:	b4f0      	push	{r4, r5, r6, r7}
100099ca:	b089      	sub	sp, #36	; 0x24
100099cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
100099ce:	0007      	movs	r7, r0
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
100099d0:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
100099d2:	4b56      	ldr	r3, [pc, #344]	; (10009b2c <dmp_read_fifo+0x170>)
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
100099d4:	4688      	mov	r8, r1
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
100099d6:	7b98      	ldrb	r0, [r3, #14]
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
100099d8:	4691      	mov	r9, r2
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
100099da:	469b      	mov	fp, r3
100099dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100099de:	4669      	mov	r1, sp
100099e0:	4b53      	ldr	r3, [pc, #332]	; (10009b30 <dmp_read_fifo+0x174>)
100099e2:	4798      	blx	r3
100099e4:	1e06      	subs	r6, r0, #0
100099e6:	d000      	beq.n	100099ea <dmp_read_fifo+0x2e>
100099e8:	e097      	b.n	10009b1a <dmp_read_fifo+0x15e>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
100099ea:	465b      	mov	r3, fp
100099ec:	8958      	ldrh	r0, [r3, #10]
100099ee:	2314      	movs	r3, #20
100099f0:	4203      	tst	r3, r0
100099f2:	d145      	bne.n	10009a80 <dmp_read_fifo+0xc4>
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
100099f4:	2300      	movs	r3, #0
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
100099f6:	0642      	lsls	r2, r0, #25
100099f8:	d519      	bpl.n	10009a2e <dmp_read_fifo+0x72>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
100099fa:	0019      	movs	r1, r3
100099fc:	466a      	mov	r2, sp
100099fe:	4469      	add	r1, sp
10009a00:	5cd2      	ldrb	r2, [r2, r3]
10009a02:	784d      	ldrb	r5, [r1, #1]
10009a04:	0212      	lsls	r2, r2, #8
10009a06:	432a      	orrs	r2, r5
10009a08:	4645      	mov	r5, r8
10009a0a:	802a      	strh	r2, [r5, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
10009a0c:	788a      	ldrb	r2, [r1, #2]
10009a0e:	78cd      	ldrb	r5, [r1, #3]
10009a10:	0212      	lsls	r2, r2, #8
10009a12:	432a      	orrs	r2, r5
10009a14:	4645      	mov	r5, r8
10009a16:	806a      	strh	r2, [r5, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
10009a18:	790a      	ldrb	r2, [r1, #4]
10009a1a:	7949      	ldrb	r1, [r1, #5]
10009a1c:	0212      	lsls	r2, r2, #8
10009a1e:	430a      	orrs	r2, r1
10009a20:	80aa      	strh	r2, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
10009a22:	2208      	movs	r2, #8
10009a24:	8821      	ldrh	r1, [r4, #0]

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
10009a26:	3306      	adds	r3, #6
        sensors[0] |= INV_XYZ_ACCEL;
10009a28:	430a      	orrs	r2, r1

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
10009a2a:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
10009a2c:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009a2e:	22c0      	movs	r2, #192	; 0xc0
10009a30:	0052      	lsls	r2, r2, #1
10009a32:	4210      	tst	r0, r2
10009a34:	d017      	beq.n	10009a66 <dmp_read_fifo+0xaa>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
10009a36:	0019      	movs	r1, r3
10009a38:	466a      	mov	r2, sp
10009a3a:	4469      	add	r1, sp
10009a3c:	5cd2      	ldrb	r2, [r2, r3]
10009a3e:	784d      	ldrb	r5, [r1, #1]
10009a40:	0212      	lsls	r2, r2, #8
10009a42:	432a      	orrs	r2, r5
10009a44:	803a      	strh	r2, [r7, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
10009a46:	788a      	ldrb	r2, [r1, #2]
10009a48:	78cd      	ldrb	r5, [r1, #3]
10009a4a:	0212      	lsls	r2, r2, #8
10009a4c:	432a      	orrs	r2, r5
10009a4e:	807a      	strh	r2, [r7, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
10009a50:	790a      	ldrb	r2, [r1, #4]
10009a52:	7949      	ldrb	r1, [r1, #5]
10009a54:	0212      	lsls	r2, r2, #8
10009a56:	430a      	orrs	r2, r1
10009a58:	80ba      	strh	r2, [r7, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
10009a5a:	2270      	movs	r2, #112	; 0x70
10009a5c:	8821      	ldrh	r1, [r4, #0]

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
10009a5e:	3306      	adds	r3, #6
        sensors[0] |= INV_XYZ_GYRO;
10009a60:	430a      	orrs	r2, r1

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
10009a62:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_GYRO;
10009a64:	8022      	strh	r2, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009a66:	0782      	lsls	r2, r0, #30
10009a68:	d13c      	bne.n	10009ae4 <dmp_read_fifo+0x128>

#elif defined EMPL_TARGET_SAMB11
#include "include.h"
static inline void get_ms(uint32_t *count)
{
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
10009a6a:	2001      	movs	r0, #1
10009a6c:	4b31      	ldr	r3, [pc, #196]	; (10009b34 <dmp_read_fifo+0x178>)
10009a6e:	4798      	blx	r3
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        decode_gesture(fifo_data + ii);

    get_ms(timestamp);
    return 0;
}
10009a70:	0030      	movs	r0, r6
10009a72:	b009      	add	sp, #36	; 0x24
10009a74:	bc3c      	pop	{r2, r3, r4, r5}
10009a76:	4690      	mov	r8, r2
10009a78:	4699      	mov	r9, r3
10009a7a:	46a2      	mov	sl, r4
10009a7c:	46ab      	mov	fp, r5
10009a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a80:	9b00      	ldr	r3, [sp, #0]
10009a82:	ba1a      	rev	r2, r3
    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
10009a84:	464b      	mov	r3, r9
10009a86:	601a      	str	r2, [r3, #0]
10009a88:	9b01      	ldr	r3, [sp, #4]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
10009a8a:	1412      	asrs	r2, r2, #16
10009a8c:	ba19      	rev	r1, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
10009a8e:	464b      	mov	r3, r9
10009a90:	6059      	str	r1, [r3, #4]
10009a92:	9b02      	ldr	r3, [sp, #8]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
10009a94:	4694      	mov	ip, r2
10009a96:	ba1b      	rev	r3, r3
10009a98:	469a      	mov	sl, r3
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
10009a9a:	464b      	mov	r3, r9
10009a9c:	4655      	mov	r5, sl
10009a9e:	609d      	str	r5, [r3, #8]
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
10009aa0:	464d      	mov	r5, r9
10009aa2:	9b03      	ldr	r3, [sp, #12]
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
10009aa4:	4652      	mov	r2, sl
10009aa6:	ba1b      	rev	r3, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
10009aa8:	60eb      	str	r3, [r5, #12]
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
10009aaa:	4665      	mov	r5, ip
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
10009aac:	141b      	asrs	r3, r3, #16
10009aae:	4699      	mov	r9, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
10009ab0:	436d      	muls	r5, r5
10009ab2:	464b      	mov	r3, r9
10009ab4:	46ac      	mov	ip, r5
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
10009ab6:	1409      	asrs	r1, r1, #16
        quat_q14[2] = quat[2] >> 16;
10009ab8:	1412      	asrs	r2, r2, #16
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
10009aba:	4349      	muls	r1, r1
10009abc:	4352      	muls	r2, r2
10009abe:	435b      	muls	r3, r3
10009ac0:	4461      	add	r1, ip
10009ac2:	1889      	adds	r1, r1, r2
10009ac4:	18c9      	adds	r1, r1, r3
10009ac6:	23f1      	movs	r3, #241	; 0xf1
10009ac8:	061b      	lsls	r3, r3, #24
10009aca:	469c      	mov	ip, r3
10009acc:	2380      	movs	r3, #128	; 0x80
10009ace:	4461      	add	r1, ip
10009ad0:	049b      	lsls	r3, r3, #18
10009ad2:	4299      	cmp	r1, r3
10009ad4:	d824      	bhi.n	10009b20 <dmp_read_fifo+0x164>
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
            sensors[0] = 0;
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
10009ad6:	2280      	movs	r2, #128	; 0x80
10009ad8:	8823      	ldrh	r3, [r4, #0]
10009ada:	0052      	lsls	r2, r2, #1
10009adc:	4313      	orrs	r3, r2
10009ade:	8023      	strh	r3, [r4, #0]
            ((long)fifo_data[6] << 8) | fifo_data[7];
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
            ((long)fifo_data[10] << 8) | fifo_data[11];
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
            ((long)fifo_data[14] << 8) | fifo_data[15];
        ii += 16;
10009ae0:	2310      	movs	r3, #16
10009ae2:	e788      	b.n	100099f6 <dmp_read_fifo+0x3a>

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        decode_gesture(fifo_data + ii);
10009ae4:	446b      	add	r3, sp
10009ae6:	001c      	movs	r4, r3
 */
static int decode_gesture(unsigned char *gesture)
{
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
10009ae8:	78df      	ldrb	r7, [r3, #3]
    tap = 0x3F & gesture[3];

    if (gesture[1] & INT_SRC_TAP) {
10009aea:	785b      	ldrb	r3, [r3, #1]
10009aec:	07da      	lsls	r2, r3, #31
10009aee:	d50b      	bpl.n	10009b08 <dmp_read_fifo+0x14c>
        unsigned char direction, count;
        direction = tap >> 3;
        count = (tap % 8) + 1;
        if (dmp.tap_cb)
10009af0:	465a      	mov	r2, fp
10009af2:	6812      	ldr	r2, [r2, #0]
10009af4:	2a00      	cmp	r2, #0
10009af6:	d007      	beq.n	10009b08 <dmp_read_fifo+0x14c>
            dmp.tap_cb(direction, count);
10009af8:	2007      	movs	r0, #7
10009afa:	0001      	movs	r1, r0
10009afc:	08fb      	lsrs	r3, r7, #3
10009afe:	4039      	ands	r1, r7
10009b00:	4018      	ands	r0, r3
10009b02:	3101      	adds	r1, #1
10009b04:	4790      	blx	r2
10009b06:	7863      	ldrb	r3, [r4, #1]
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
10009b08:	071b      	lsls	r3, r3, #28
10009b0a:	d5ae      	bpl.n	10009a6a <dmp_read_fifo+0xae>
        if (dmp.android_orient_cb)
10009b0c:	465b      	mov	r3, fp
10009b0e:	685b      	ldr	r3, [r3, #4]
10009b10:	2b00      	cmp	r3, #0
10009b12:	d0aa      	beq.n	10009a6a <dmp_read_fifo+0xae>
            dmp.android_orient_cb(android_orient >> 6);
10009b14:	09b8      	lsrs	r0, r7, #6
10009b16:	4798      	blx	r3
10009b18:	e7a7      	b.n	10009a6a <dmp_read_fifo+0xae>
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
        return -1;
10009b1a:	2601      	movs	r6, #1
10009b1c:	4276      	negs	r6, r6
10009b1e:	e7a7      	b.n	10009a70 <dmp_read_fifo+0xb4>
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
10009b20:	4b05      	ldr	r3, [pc, #20]	; (10009b38 <dmp_read_fifo+0x17c>)
10009b22:	4798      	blx	r3
            sensors[0] = 0;
10009b24:	8026      	strh	r6, [r4, #0]
            return -1;
10009b26:	3e01      	subs	r6, #1
10009b28:	e7a2      	b.n	10009a70 <dmp_read_fifo+0xb4>
10009b2a:	46c0      	nop			; (mov r8, r8)
10009b2c:	1001b48c 	.word	0x1001b48c
10009b30:	10008889 	.word	0x10008889
10009b34:	100081a1 	.word	0x100081a1
10009b38:	1000841d 	.word	0x1000841d

10009b3c <inv_db_save_func>:
    return INV_SUCCESS;
}

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
10009b3c:	b510      	push	{r4, lr}
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
10009b3e:	4903      	ldr	r1, [pc, #12]	; (10009b4c <inv_db_save_func+0x10>)
10009b40:	2248      	movs	r2, #72	; 0x48
10009b42:	31f4      	adds	r1, #244	; 0xf4
10009b44:	4b02      	ldr	r3, [pc, #8]	; (10009b50 <inv_db_save_func+0x14>)
10009b46:	4798      	blx	r3
    return INV_SUCCESS;
}
10009b48:	2000      	movs	r0, #0
10009b4a:	bd10      	pop	{r4, pc}
10009b4c:	1001b49c 	.word	0x1001b49c
10009b50:	100180cf 	.word	0x100180cf

10009b54 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009b54:	b510      	push	{r4, lr}
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
10009b56:	4c0e      	ldr	r4, [pc, #56]	; (10009b90 <inv_db_load_func+0x3c>)
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009b58:	0001      	movs	r1, r0
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
10009b5a:	0020      	movs	r0, r4
10009b5c:	2248      	movs	r2, #72	; 0x48
10009b5e:	4b0d      	ldr	r3, [pc, #52]	; (10009b94 <inv_db_load_func+0x40>)
10009b60:	30f4      	adds	r0, #244	; 0xf4
10009b62:	4798      	blx	r3
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009b64:	2298      	movs	r2, #152	; 0x98
10009b66:	0052      	lsls	r2, r2, #1
10009b68:	4b0b      	ldr	r3, [pc, #44]	; (10009b98 <inv_db_load_func+0x44>)
10009b6a:	58a2      	ldr	r2, [r4, r2]
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009b6c:	21bc      	movs	r1, #188	; 0xbc
/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009b6e:	635a      	str	r2, [r3, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
10009b70:	229a      	movs	r2, #154	; 0x9a
10009b72:	0052      	lsls	r2, r2, #1
10009b74:	58a2      	ldr	r2, [r4, r2]
10009b76:	679a      	str	r2, [r3, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009b78:	229c      	movs	r2, #156	; 0x9c
10009b7a:	0052      	lsls	r2, r2, #1
10009b7c:	58a2      	ldr	r2, [r4, r2]
10009b7e:	505a      	str	r2, [r3, r1]
    // TODO
    if (sensors.compass.accuracy == 3) {
10009b80:	2a03      	cmp	r2, #3
10009b82:	d001      	beq.n	10009b88 <inv_db_load_func+0x34>
        inv_set_compass_bias_found(1);
    }
    return INV_SUCCESS;
}
10009b84:	2000      	movs	r0, #0
10009b86:	bd10      	pop	{r4, pc}
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
    // TODO
    if (sensors.compass.accuracy == 3) {
        inv_set_compass_bias_found(1);
10009b88:	2001      	movs	r0, #1
10009b8a:	4b04      	ldr	r3, [pc, #16]	; (10009b9c <inv_db_load_func+0x48>)
10009b8c:	4798      	blx	r3
10009b8e:	e7f9      	b.n	10009b84 <inv_db_load_func+0x30>
10009b90:	1001b49c 	.word	0x1001b49c
10009b94:	100180cf 	.word	0x100180cf
10009b98:	1001b5dc 	.word	0x1001b5dc
10009b9c:	1000ac45 	.word	0x1000ac45

10009ba0 <inv_set_gyro_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009ba0:	4b01      	ldr	r3, [pc, #4]	; (10009ba8 <inv_set_gyro_orientation_and_scale+0x8>)
10009ba2:	6259      	str	r1, [r3, #36]	; 0x24
    sensor->orientation = orientation;
10009ba4:	6018      	str	r0, [r3, #0]
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
                                     sensitivity);
}
10009ba6:	4770      	bx	lr
10009ba8:	1001b5dc 	.word	0x1001b5dc

10009bac <inv_set_gyro_sample_rate>:
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009bac:	21fa      	movs	r1, #250	; 0xfa

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
10009bae:	b570      	push	{r4, r5, r6, lr}
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
10009bb0:	4c07      	ldr	r4, [pc, #28]	; (10009bd0 <inv_set_gyro_sample_rate+0x24>)
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009bb2:	4e08      	ldr	r6, [pc, #32]	; (10009bd4 <inv_set_gyro_sample_rate+0x28>)
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
10009bb4:	62a0      	str	r0, [r4, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009bb6:	0089      	lsls	r1, r1, #2

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
10009bb8:	0005      	movs	r5, r0
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009bba:	47b0      	blx	r6
    if (sensors.gyro.bandwidth == 0) {
10009bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009bbe:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
10009bc0:	2b00      	cmp	r3, #0
10009bc2:	d103      	bne.n	10009bcc <inv_set_gyro_sample_rate+0x20>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
10009bc4:	0029      	movs	r1, r5
10009bc6:	4804      	ldr	r0, [pc, #16]	; (10009bd8 <inv_set_gyro_sample_rate+0x2c>)
10009bc8:	47b0      	blx	r6
10009bca:	6420      	str	r0, [r4, #64]	; 0x40
    }
}
10009bcc:	bd70      	pop	{r4, r5, r6, pc}
10009bce:	46c0      	nop			; (mov r8, r8)
10009bd0:	1001b5dc 	.word	0x1001b5dc
10009bd4:	10014ec9 	.word	0x10014ec9
10009bd8:	000f4240 	.word	0x000f4240

10009bdc <inv_set_accel_sample_rate>:
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009bdc:	21fa      	movs	r1, #250	; 0xfa

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
10009bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
10009be0:	4c07      	ldr	r4, [pc, #28]	; (10009c00 <inv_set_accel_sample_rate+0x24>)
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
    if (sensors.accel.bandwidth == 0) {
10009be2:	2684      	movs	r6, #132	; 0x84
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
10009be4:	66e0      	str	r0, [r4, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009be6:	4f07      	ldr	r7, [pc, #28]	; (10009c04 <inv_set_accel_sample_rate+0x28>)
10009be8:	0089      	lsls	r1, r1, #2

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
10009bea:	0005      	movs	r5, r0
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009bec:	47b8      	blx	r7
    if (sensors.accel.bandwidth == 0) {
10009bee:	59a3      	ldr	r3, [r4, r6]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009bf0:	6720      	str	r0, [r4, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
10009bf2:	2b00      	cmp	r3, #0
10009bf4:	d103      	bne.n	10009bfe <inv_set_accel_sample_rate+0x22>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
10009bf6:	0029      	movs	r1, r5
10009bf8:	4803      	ldr	r0, [pc, #12]	; (10009c08 <inv_set_accel_sample_rate+0x2c>)
10009bfa:	47b8      	blx	r7
10009bfc:	51a0      	str	r0, [r4, r6]
    }
}
10009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c00:	1001b5dc 	.word	0x1001b5dc
10009c04:	10014ec9 	.word	0x10014ec9
10009c08:	000f4240 	.word	0x000f4240

10009c0c <inv_set_compass_sample_rate>:

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
10009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009c0e:	21fa      	movs	r1, #250	; 0xfa
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
10009c10:	23b0      	movs	r3, #176	; 0xb0
10009c12:	4c08      	ldr	r4, [pc, #32]	; (10009c34 <inv_set_compass_sample_rate+0x28>)
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009c14:	4f08      	ldr	r7, [pc, #32]	; (10009c38 <inv_set_compass_sample_rate+0x2c>)
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
10009c16:	50e0      	str	r0, [r4, r3]
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009c18:	0089      	lsls	r1, r1, #2

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
10009c1a:	0005      	movs	r5, r0
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
    if (sensors.compass.bandwidth == 0) {
10009c1c:	26c8      	movs	r6, #200	; 0xc8
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009c1e:	47b8      	blx	r7
10009c20:	23b4      	movs	r3, #180	; 0xb4
10009c22:	50e0      	str	r0, [r4, r3]
    if (sensors.compass.bandwidth == 0) {
10009c24:	59a3      	ldr	r3, [r4, r6]
10009c26:	2b00      	cmp	r3, #0
10009c28:	d103      	bne.n	10009c32 <inv_set_compass_sample_rate+0x26>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
10009c2a:	0029      	movs	r1, r5
10009c2c:	4803      	ldr	r0, [pc, #12]	; (10009c3c <inv_set_compass_sample_rate+0x30>)
10009c2e:	47b8      	blx	r7
10009c30:	51a0      	str	r0, [r4, r6]
    }
}
10009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c34:	1001b5dc 	.word	0x1001b5dc
10009c38:	10014ec9 	.word	0x10014ec9
10009c3c:	000f4240 	.word	0x000f4240

10009c40 <inv_set_quat_sample_rate>:
        int type = PLAYBACK_DBG_TYPE_Q_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.quat.sample_rate_us = sample_rate_us;
10009c40:	2394      	movs	r3, #148	; 0x94
    sensors.quat.sample_rate_ms = sample_rate_us / 1000;
10009c42:	21fa      	movs	r1, #250	; 0xfa

/** Set Quat Sample rate in micro seconds.
* @param[in] sample_rate_us Set Quat Sample rate in us
*/
void inv_set_quat_sample_rate(long sample_rate_us)
{
10009c44:	b510      	push	{r4, lr}
        int type = PLAYBACK_DBG_TYPE_Q_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.quat.sample_rate_us = sample_rate_us;
10009c46:	4c05      	ldr	r4, [pc, #20]	; (10009c5c <inv_set_quat_sample_rate+0x1c>)
10009c48:	005b      	lsls	r3, r3, #1
10009c4a:	50e0      	str	r0, [r4, r3]
    sensors.quat.sample_rate_ms = sample_rate_us / 1000;
10009c4c:	0089      	lsls	r1, r1, #2
10009c4e:	4b04      	ldr	r3, [pc, #16]	; (10009c60 <inv_set_quat_sample_rate+0x20>)
10009c50:	4798      	blx	r3
10009c52:	2396      	movs	r3, #150	; 0x96
10009c54:	005b      	lsls	r3, r3, #1
10009c56:	50e0      	str	r0, [r4, r3]
}
10009c58:	bd10      	pop	{r4, pc}
10009c5a:	46c0      	nop			; (mov r8, r8)
10009c5c:	1001b5dc 	.word	0x1001b5dc
10009c60:	10014ec9 	.word	0x10014ec9

10009c64 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
10009c64:	4b02      	ldr	r3, [pc, #8]	; (10009c70 <inv_get_gyro_on+0xc>)
10009c66:	6b18      	ldr	r0, [r3, #48]	; 0x30
10009c68:	05c0      	lsls	r0, r0, #23
10009c6a:	0fc0      	lsrs	r0, r0, #31
}
10009c6c:	4770      	bx	lr
10009c6e:	46c0      	nop			; (mov r8, r8)
10009c70:	1001b5dc 	.word	0x1001b5dc

10009c74 <inv_set_accel_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009c74:	4b01      	ldr	r3, [pc, #4]	; (10009c7c <inv_set_accel_orientation_and_scale+0x8>)
10009c76:	6699      	str	r1, [r3, #104]	; 0x68
    sensor->orientation = orientation;
10009c78:	6458      	str	r0, [r3, #68]	; 0x44
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
                                     sensitivity);
}
10009c7a:	4770      	bx	lr
10009c7c:	1001b5dc 	.word	0x1001b5dc

10009c80 <inv_set_compass_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009c80:	22ac      	movs	r2, #172	; 0xac
10009c82:	4b02      	ldr	r3, [pc, #8]	; (10009c8c <inv_set_compass_orientation_and_scale+0xc>)
10009c84:	5099      	str	r1, [r3, r2]
    sensor->orientation = orientation;
10009c86:	3a24      	subs	r2, #36	; 0x24
10009c88:	5098      	str	r0, [r3, r2]
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
}
10009c8a:	4770      	bx	lr
10009c8c:	1001b5dc 	.word	0x1001b5dc

10009c90 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009c90:	b570      	push	{r4, r5, r6, lr}
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009c92:	2204      	movs	r2, #4
10009c94:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009c96:	b086      	sub	sp, #24
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009c98:	03db      	lsls	r3, r3, #15
10009c9a:	9303      	str	r3, [sp, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
10009c9c:	2206      	movs	r2, #6
10009c9e:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009ca0:	000d      	movs	r5, r1
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
10009ca2:	03db      	lsls	r3, r3, #15
10009ca4:	9304      	str	r3, [sp, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
10009ca6:	2208      	movs	r2, #8
10009ca8:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009caa:	0004      	movs	r4, r0
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
    raw32[2] = (long)sensor->raw[2] << 15;
10009cac:	03db      	lsls	r3, r3, #15
10009cae:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
10009cb0:	0003      	movs	r3, r0
10009cb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
10009cb4:	4e11      	ldr	r6, [pc, #68]	; (10009cfc <inv_apply_calibration+0x6c>)
10009cb6:	0051      	lsls	r1, r2, #1
10009cb8:	330c      	adds	r3, #12
10009cba:	aa03      	add	r2, sp, #12
10009cbc:	8800      	ldrh	r0, [r0, #0]
10009cbe:	47b0      	blx	r6

    raw32[0] -= bias[0] >> 1;
10009cc0:	682b      	ldr	r3, [r5, #0]
10009cc2:	9a03      	ldr	r2, [sp, #12]
10009cc4:	105b      	asrs	r3, r3, #1
10009cc6:	1ad3      	subs	r3, r2, r3
10009cc8:	9303      	str	r3, [sp, #12]
    raw32[1] -= bias[1] >> 1;
10009cca:	686b      	ldr	r3, [r5, #4]
10009ccc:	9a04      	ldr	r2, [sp, #16]
10009cce:	105b      	asrs	r3, r3, #1
10009cd0:	1ad3      	subs	r3, r2, r3
10009cd2:	9304      	str	r3, [sp, #16]
    raw32[2] -= bias[2] >> 1;
10009cd4:	68ab      	ldr	r3, [r5, #8]
10009cd6:	9a05      	ldr	r2, [sp, #20]
10009cd8:	105b      	asrs	r3, r3, #1
10009cda:	1ad3      	subs	r3, r2, r3
10009cdc:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
10009cde:	0023      	movs	r3, r4

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);

    raw32[0] -= bias[0] >> 1;
    raw32[1] -= bias[1] >> 1;
    raw32[2] -= bias[2] >> 1;
10009ce0:	9201      	str	r2, [sp, #4]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
10009ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
10009ce4:	3318      	adds	r3, #24
10009ce6:	0051      	lsls	r1, r2, #1
10009ce8:	8820      	ldrh	r0, [r4, #0]
10009cea:	aa03      	add	r2, sp, #12
10009cec:	47b0      	blx	r6

    sensor->status |= INV_CALIBRATED;
10009cee:	2320      	movs	r3, #32
10009cf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
10009cf2:	4313      	orrs	r3, r2
10009cf4:	6323      	str	r3, [r4, #48]	; 0x30
}
10009cf6:	b006      	add	sp, #24
10009cf8:	bd70      	pop	{r4, r5, r6, pc}
10009cfa:	46c0      	nop			; (mov r8, r8)
10009cfc:	1000a945 	.word	0x1000a945

10009d00 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
10009d00:	239e      	movs	r3, #158	; 0x9e
10009d02:	4a02      	ldr	r2, [pc, #8]	; (10009d0c <inv_set_compass_disturbance+0xc>)
10009d04:	005b      	lsls	r3, r3, #1
10009d06:	50d0      	str	r0, [r2, r3]
}
10009d08:	4770      	bx	lr
10009d0a:	46c0      	nop			; (mov r8, r8)
10009d0c:	1001b49c 	.word	0x1001b49c

10009d10 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
10009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009d12:	0005      	movs	r5, r0
10009d14:	000e      	movs	r6, r1
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009d16:	4c1d      	ldr	r4, [pc, #116]	; (10009d8c <inv_set_gyro_bias+0x7c>)
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
10009d18:	2800      	cmp	r0, #0
10009d1a:	d008      	beq.n	10009d2e <inv_set_gyro_bias+0x1e>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009d1c:	1c67      	adds	r7, r4, #1
10009d1e:	37ff      	adds	r7, #255	; 0xff
10009d20:	0001      	movs	r1, r0
10009d22:	220c      	movs	r2, #12
10009d24:	0038      	movs	r0, r7
10009d26:	4b1a      	ldr	r3, [pc, #104]	; (10009d90 <inv_set_gyro_bias+0x80>)
10009d28:	4798      	blx	r3
10009d2a:	2800      	cmp	r0, #0
10009d2c:	d117      	bne.n	10009d5e <inv_set_gyro_bias+0x4e>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009d2e:	2398      	movs	r3, #152	; 0x98
10009d30:	4d18      	ldr	r5, [pc, #96]	; (10009d94 <inv_set_gyro_bias+0x84>)
10009d32:	005b      	lsls	r3, r3, #1
10009d34:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009d36:	3b4c      	subs	r3, #76	; 0x4c
10009d38:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009d3a:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009d3c:	2b00      	cmp	r3, #0
10009d3e:	d120      	bne.n	10009d82 <inv_set_gyro_bias+0x72>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
10009d40:	22d8      	movs	r2, #216	; 0xd8
10009d42:	2386      	movs	r3, #134	; 0x86
10009d44:	0352      	lsls	r2, r2, #13
10009d46:	005b      	lsls	r3, r3, #1
10009d48:	50e2      	str	r2, [r4, r3]
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
10009d4a:	2200      	movs	r2, #0
10009d4c:	2104      	movs	r1, #4
10009d4e:	2004      	movs	r0, #4
10009d50:	4b11      	ldr	r3, [pc, #68]	; (10009d98 <inv_set_gyro_bias+0x88>)
10009d52:	4798      	blx	r3

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
10009d54:	2388      	movs	r3, #136	; 0x88
10009d56:	2201      	movs	r2, #1
10009d58:	005b      	lsls	r3, r3, #1
10009d5a:	50e2      	str	r2, [r4, r3]
}
10009d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
10009d5e:	0029      	movs	r1, r5
10009d60:	220c      	movs	r2, #12
10009d62:	4b0e      	ldr	r3, [pc, #56]	; (10009d9c <inv_set_gyro_bias+0x8c>)
10009d64:	0038      	movs	r0, r7
10009d66:	4798      	blx	r3
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
10009d68:	4d0a      	ldr	r5, [pc, #40]	; (10009d94 <inv_set_gyro_bias+0x84>)
10009d6a:	4b0d      	ldr	r3, [pc, #52]	; (10009da0 <inv_set_gyro_bias+0x90>)
10009d6c:	0039      	movs	r1, r7
10009d6e:	0028      	movs	r0, r5
10009d70:	4798      	blx	r3
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009d72:	2398      	movs	r3, #152	; 0x98
10009d74:	005b      	lsls	r3, r3, #1
10009d76:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009d78:	3b4c      	subs	r3, #76	; 0x4c
10009d7a:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009d7c:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009d7e:	2b00      	cmp	r3, #0
10009d80:	d0de      	beq.n	10009d40 <inv_set_gyro_bias+0x30>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
10009d82:	2286      	movs	r2, #134	; 0x86
10009d84:	0052      	lsls	r2, r2, #1
10009d86:	50a3      	str	r3, [r4, r2]
10009d88:	e7df      	b.n	10009d4a <inv_set_gyro_bias+0x3a>
10009d8a:	46c0      	nop			; (mov r8, r8)
10009d8c:	1001b49c 	.word	0x1001b49c
10009d90:	100180b1 	.word	0x100180b1
10009d94:	1001b5dc 	.word	0x1001b5dc
10009d98:	1000a045 	.word	0x1000a045
10009d9c:	100180cf 	.word	0x100180cf
10009da0:	10009c91 	.word	0x10009c91

10009da4 <inv_get_gyro_bias_tc_set>:
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009da4:	2388      	movs	r3, #136	; 0x88
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
10009da6:	b510      	push	{r4, lr}
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009da8:	4a04      	ldr	r2, [pc, #16]	; (10009dbc <inv_get_gyro_bias_tc_set+0x18>)
10009daa:	005b      	lsls	r3, r3, #1
10009dac:	58d1      	ldr	r1, [r2, r3]
10009dae:	1e48      	subs	r0, r1, #1
10009db0:	4244      	negs	r4, r0
10009db2:	4144      	adcs	r4, r0
    inv_data_builder.save.gyro_bias_tc_set = false;
10009db4:	2100      	movs	r1, #0
    return flag;
}
10009db6:	0020      	movs	r0, r4
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
    inv_data_builder.save.gyro_bias_tc_set = false;
10009db8:	50d1      	str	r1, [r2, r3]
    return flag;
}
10009dba:	bd10      	pop	{r4, pc}
10009dbc:	1001b49c 	.word	0x1001b49c

10009dc0 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
10009dc0:	b510      	push	{r4, lr}
10009dc2:	000c      	movs	r4, r1
    if (bias != NULL)
10009dc4:	2800      	cmp	r0, #0
10009dc6:	d005      	beq.n	10009dd4 <inv_get_gyro_bias+0x14>
        memcpy(bias, inv_data_builder.save.gyro_bias,
10009dc8:	4906      	ldr	r1, [pc, #24]	; (10009de4 <inv_get_gyro_bias+0x24>)
10009dca:	220c      	movs	r2, #12
10009dcc:	3101      	adds	r1, #1
10009dce:	31ff      	adds	r1, #255	; 0xff
10009dd0:	4b05      	ldr	r3, [pc, #20]	; (10009de8 <inv_get_gyro_bias+0x28>)
10009dd2:	4798      	blx	r3
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
10009dd4:	2c00      	cmp	r4, #0
10009dd6:	d004      	beq.n	10009de2 <inv_get_gyro_bias+0x22>
        temp[0] = inv_data_builder.save.gyro_temp;
10009dd8:	2386      	movs	r3, #134	; 0x86
10009dda:	4a02      	ldr	r2, [pc, #8]	; (10009de4 <inv_get_gyro_bias+0x24>)
10009ddc:	005b      	lsls	r3, r3, #1
10009dde:	58d3      	ldr	r3, [r2, r3]
10009de0:	6023      	str	r3, [r4, #0]
}
10009de2:	bd10      	pop	{r4, pc}
10009de4:	1001b49c 	.word	0x1001b49c
10009de8:	100180cf 	.word	0x100180cf

10009dec <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009dec:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dee:	4656      	mov	r6, sl
10009df0:	464d      	mov	r5, r9
10009df2:	465f      	mov	r7, fp
10009df4:	4644      	mov	r4, r8
10009df6:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009df8:	4b3a      	ldr	r3, [pc, #232]	; (10009ee4 <inv_register_data_cb+0xf8>)
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009dfa:	b083      	sub	sp, #12
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009dfc:	681e      	ldr	r6, [r3, #0]
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009dfe:	9200      	str	r2, [sp, #0]
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009e00:	4699      	mov	r9, r3
10009e02:	2e00      	cmp	r6, #0
10009e04:	dd22      	ble.n	10009e4c <inv_register_data_cb+0x60>
        if ((inv_data_builder.process[kk].func == func) ||
10009e06:	685b      	ldr	r3, [r3, #4]
10009e08:	4298      	cmp	r0, r3
10009e0a:	d017      	beq.n	10009e3c <inv_register_data_cb+0x50>
10009e0c:	464b      	mov	r3, r9
10009e0e:	689b      	ldr	r3, [r3, #8]
10009e10:	4299      	cmp	r1, r3
10009e12:	d013      	beq.n	10009e3c <inv_register_data_cb+0x50>
10009e14:	464b      	mov	r3, r9
10009e16:	2400      	movs	r4, #0
10009e18:	3310      	adds	r3, #16
10009e1a:	e008      	b.n	10009e2e <inv_register_data_cb+0x42>
10009e1c:	681d      	ldr	r5, [r3, #0]
10009e1e:	4285      	cmp	r5, r0
10009e20:	d00c      	beq.n	10009e3c <inv_register_data_cb+0x50>
10009e22:	330c      	adds	r3, #12
                (inv_data_builder.process[kk].priority == priority)) {
10009e24:	001d      	movs	r5, r3
10009e26:	3d08      	subs	r5, #8
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
10009e28:	682d      	ldr	r5, [r5, #0]
10009e2a:	428d      	cmp	r5, r1
10009e2c:	d006      	beq.n	10009e3c <inv_register_data_cb+0x50>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009e2e:	3401      	adds	r4, #1
10009e30:	42b4      	cmp	r4, r6
10009e32:	d1f3      	bne.n	10009e1c <inv_register_data_cb+0x30>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
10009e34:	2c13      	cmp	r4, #19
10009e36:	dd1d      	ble.n	10009e74 <inv_register_data_cb+0x88>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
10009e38:	200c      	movs	r0, #12
10009e3a:	e000      	b.n	10009e3e <inv_register_data_cb+0x52>
    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
10009e3c:	2016      	movs	r0, #22
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
10009e3e:	b003      	add	sp, #12
10009e40:	bc3c      	pop	{r2, r3, r4, r5}
10009e42:	4690      	mov	r8, r2
10009e44:	4699      	mov	r9, r3
10009e46:	46a2      	mov	sl, r4
10009e48:	46ab      	mov	fp, r5
10009e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e4c:	2300      	movs	r3, #0
10009e4e:	469b      	mov	fp, r3
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
10009e50:	2e00      	cmp	r6, #0
10009e52:	d126      	bne.n	10009ea2 <inv_register_data_cb+0xb6>
10009e54:	9301      	str	r3, [sp, #4]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009e56:	9b01      	ldr	r3, [sp, #4]
10009e58:	465d      	mov	r5, fp
10009e5a:	469c      	mov	ip, r3
10009e5c:	4465      	add	r5, ip
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009e5e:	9b00      	ldr	r3, [sp, #0]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009e60:	00ad      	lsls	r5, r5, #2
10009e62:	444d      	add	r5, r9
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009e64:	60eb      	str	r3, [r5, #12]
        inv_data_builder.num_cb++;
10009e66:	464b      	mov	r3, r9
10009e68:	3601      	adds	r6, #1
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009e6a:	6068      	str	r0, [r5, #4]
        inv_data_builder.process[kk].priority = priority;
10009e6c:	60a9      	str	r1, [r5, #8]
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
10009e6e:	601e      	str	r6, [r3, #0]
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
    inv_error_t result = INV_SUCCESS;
10009e70:	2000      	movs	r0, #0
10009e72:	e7e4      	b.n	10009e3e <inv_register_data_cb+0x52>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009e74:	464b      	mov	r3, r9
10009e76:	689b      	ldr	r3, [r3, #8]
10009e78:	4299      	cmp	r1, r3
10009e7a:	dd2f      	ble.n	10009edc <inv_register_data_cb+0xf0>
10009e7c:	464b      	mov	r3, r9
10009e7e:	2200      	movs	r2, #0
10009e80:	3314      	adds	r3, #20
10009e82:	4693      	mov	fp, r2
10009e84:	e005      	b.n	10009e92 <inv_register_data_cb+0xa6>
10009e86:	330c      	adds	r3, #12
                    (inv_data_builder.process[kk].priority < priority)) {
10009e88:	001c      	movs	r4, r3
10009e8a:	3c0c      	subs	r4, #12
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009e8c:	6824      	ldr	r4, [r4, #0]
10009e8e:	42a1      	cmp	r1, r4
10009e90:	dd07      	ble.n	10009ea2 <inv_register_data_cb+0xb6>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
10009e92:	2201      	movs	r2, #1
10009e94:	4694      	mov	ip, r2
10009e96:	44e3      	add	fp, ip
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009e98:	45b3      	cmp	fp, r6
10009e9a:	d1f4      	bne.n	10009e86 <inv_register_data_cb+0x9a>
10009e9c:	465b      	mov	r3, fp
10009e9e:	005b      	lsls	r3, r3, #1
10009ea0:	e7d8      	b.n	10009e54 <inv_register_data_cb+0x68>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009ea2:	45b3      	cmp	fp, r6
10009ea4:	dafa      	bge.n	10009e9c <inv_register_data_cb+0xb0>
10009ea6:	0073      	lsls	r3, r6, #1
10009ea8:	199b      	adds	r3, r3, r6
10009eaa:	009b      	lsls	r3, r3, #2
10009eac:	3b08      	subs	r3, #8
10009eae:	444b      	add	r3, r9
10009eb0:	469a      	mov	sl, r3
10009eb2:	465b      	mov	r3, fp
10009eb4:	005b      	lsls	r3, r3, #1
10009eb6:	001c      	movs	r4, r3
10009eb8:	445c      	add	r4, fp
10009eba:	00a4      	lsls	r4, r4, #2
10009ebc:	3c08      	subs	r4, #8
10009ebe:	46a4      	mov	ip, r4
10009ec0:	9301      	str	r3, [sp, #4]
10009ec2:	44cc      	add	ip, r9
                    inv_data_builder.process[nn] =
10009ec4:	4654      	mov	r4, sl
10009ec6:	4652      	mov	r2, sl
10009ec8:	340c      	adds	r4, #12
10009eca:	caa8      	ldmia	r2!, {r3, r5, r7}
10009ecc:	c4a8      	stmia	r4!, {r3, r5, r7}
10009ece:	230c      	movs	r3, #12
10009ed0:	425b      	negs	r3, r3
10009ed2:	4698      	mov	r8, r3
10009ed4:	44c2      	add	sl, r8
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009ed6:	45d4      	cmp	ip, sl
10009ed8:	d1f4      	bne.n	10009ec4 <inv_register_data_cb+0xd8>
10009eda:	e7bc      	b.n	10009e56 <inv_register_data_cb+0x6a>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009edc:	2300      	movs	r3, #0
10009ede:	469b      	mov	fp, r3
10009ee0:	e7e1      	b.n	10009ea6 <inv_register_data_cb+0xba>
10009ee2:	46c0      	nop			; (mov r8, r8)
10009ee4:	1001b49c 	.word	0x1001b49c

10009ee8 <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
10009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009eea:	4e17      	ldr	r6, [pc, #92]	; (10009f48 <inv_unregister_data_cb+0x60>)
10009eec:	6835      	ldr	r5, [r6, #0]
10009eee:	2d00      	cmp	r5, #0
10009ef0:	dd10      	ble.n	10009f14 <inv_unregister_data_cb+0x2c>
        if (inv_data_builder.process[kk].func == func) {
10009ef2:	6873      	ldr	r3, [r6, #4]
10009ef4:	4298      	cmp	r0, r3
10009ef6:	d025      	beq.n	10009f44 <inv_unregister_data_cb+0x5c>
10009ef8:	0032      	movs	r2, r6
10009efa:	2300      	movs	r3, #0
10009efc:	3210      	adds	r2, #16
10009efe:	e006      	b.n	10009f0e <inv_unregister_data_cb+0x26>
10009f00:	320c      	adds	r2, #12
10009f02:	0014      	movs	r4, r2
10009f04:	3c0c      	subs	r4, #12
10009f06:	6824      	ldr	r4, [r4, #0]
10009f08:	4284      	cmp	r4, r0
10009f0a:	d005      	beq.n	10009f18 <inv_unregister_data_cb+0x30>
10009f0c:	000b      	movs	r3, r1
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009f0e:	1c59      	adds	r1, r3, #1
10009f10:	42a9      	cmp	r1, r5
10009f12:	d1f5      	bne.n	10009f00 <inv_unregister_data_cb+0x18>
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
10009f14:	2000      	movs	r0, #0
10009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f18:	3302      	adds	r3, #2
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009f1a:	42ab      	cmp	r3, r5
10009f1c:	da0f      	bge.n	10009f3e <inv_unregister_data_cb+0x56>
10009f1e:	005a      	lsls	r2, r3, #1
10009f20:	0069      	lsls	r1, r5, #1
10009f22:	18d3      	adds	r3, r2, r3
10009f24:	1949      	adds	r1, r1, r5
10009f26:	009b      	lsls	r3, r3, #2
10009f28:	0089      	lsls	r1, r1, #2
10009f2a:	3b08      	subs	r3, #8
10009f2c:	3908      	subs	r1, #8
10009f2e:	18f3      	adds	r3, r6, r3
10009f30:	1871      	adds	r1, r6, r1
                inv_data_builder.process[nn - 1] =
10009f32:	001a      	movs	r2, r3
10009f34:	320c      	adds	r2, #12
10009f36:	ca91      	ldmia	r2!, {r0, r4, r7}
10009f38:	c391      	stmia	r3!, {r0, r4, r7}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009f3a:	428b      	cmp	r3, r1
10009f3c:	d1f9      	bne.n	10009f32 <inv_unregister_data_cb+0x4a>
                inv_data_builder.process[nn - 1] =
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
10009f3e:	3d01      	subs	r5, #1
10009f40:	6035      	str	r5, [r6, #0]
            return INV_SUCCESS;
10009f42:	e7e7      	b.n	10009f14 <inv_unregister_data_cb+0x2c>
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
10009f44:	2301      	movs	r3, #1
10009f46:	e7e8      	b.n	10009f1a <inv_unregister_data_cb+0x32>
10009f48:	1001b49c 	.word	0x1001b49c

10009f4c <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
10009f4c:	b570      	push	{r4, r5, r6, lr}
10009f4e:	000c      	movs	r4, r1
10009f50:	0015      	movs	r5, r2
    if (data != NULL) {
10009f52:	2800      	cmp	r0, #0
10009f54:	d004      	beq.n	10009f60 <inv_get_accel_set+0x14>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
10009f56:	4908      	ldr	r1, [pc, #32]	; (10009f78 <inv_get_accel_set+0x2c>)
10009f58:	220c      	movs	r2, #12
10009f5a:	315c      	adds	r1, #92	; 0x5c
10009f5c:	4b07      	ldr	r3, [pc, #28]	; (10009f7c <inv_get_accel_set+0x30>)
10009f5e:	4798      	blx	r3
    }
    if (timestamp != NULL) {
10009f60:	2d00      	cmp	r5, #0
10009f62:	d002      	beq.n	10009f6a <inv_get_accel_set+0x1e>
        *timestamp = sensors.accel.timestamp;
10009f64:	4b04      	ldr	r3, [pc, #16]	; (10009f78 <inv_get_accel_set+0x2c>)
10009f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10009f68:	602b      	str	r3, [r5, #0]
    }
    if (accuracy != NULL) {
10009f6a:	2c00      	cmp	r4, #0
10009f6c:	d002      	beq.n	10009f74 <inv_get_accel_set+0x28>
        *accuracy = sensors.accel.accuracy;
10009f6e:	4b02      	ldr	r3, [pc, #8]	; (10009f78 <inv_get_accel_set+0x2c>)
10009f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10009f72:	7023      	strb	r3, [r4, #0]
    }
}
10009f74:	bd70      	pop	{r4, r5, r6, pc}
10009f76:	46c0      	nop			; (mov r8, r8)
10009f78:	1001b5dc 	.word	0x1001b5dc
10009f7c:	100180cf 	.word	0x100180cf

10009f80 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
10009f80:	b510      	push	{r4, lr}
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
10009f82:	4903      	ldr	r1, [pc, #12]	; (10009f90 <inv_get_gyro+0x10>)
10009f84:	220c      	movs	r2, #12
10009f86:	3118      	adds	r1, #24
10009f88:	4b02      	ldr	r3, [pc, #8]	; (10009f94 <inv_get_gyro+0x14>)
10009f8a:	4798      	blx	r3
}
10009f8c:	bd10      	pop	{r4, pc}
10009f8e:	46c0      	nop			; (mov r8, r8)
10009f90:	1001b5dc 	.word	0x1001b5dc
10009f94:	100180cf 	.word	0x100180cf

10009f98 <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
10009f98:	b510      	push	{r4, lr}
10009f9a:	4c15      	ldr	r4, [pc, #84]	; (10009ff0 <inv_reset_compass_soft_iron_matrix+0x58>)
    int i;
    for (i=0; i<9; i++) {
        sensors.soft_iron.matrix_f[i] = 0.0f;
10009f9c:	2200      	movs	r2, #0
10009f9e:	0023      	movs	r3, r4
10009fa0:	0021      	movs	r1, r4
10009fa2:	336d      	adds	r3, #109	; 0x6d
10009fa4:	3191      	adds	r1, #145	; 0x91
10009fa6:	33ff      	adds	r3, #255	; 0xff
10009fa8:	31ff      	adds	r1, #255	; 0xff
10009faa:	c304      	stmia	r3!, {r2}
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
10009fac:	428b      	cmp	r3, r1
10009fae:	d1fc      	bne.n	10009faa <inv_reset_compass_soft_iron_matrix+0x12>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
10009fb0:	0020      	movs	r0, r4
10009fb2:	3049      	adds	r0, #73	; 0x49
10009fb4:	2224      	movs	r2, #36	; 0x24
10009fb6:	2100      	movs	r1, #0
10009fb8:	4b0e      	ldr	r3, [pc, #56]	; (10009ff4 <inv_reset_compass_soft_iron_matrix+0x5c>)
10009fba:	30ff      	adds	r0, #255	; 0xff
10009fbc:	4798      	blx	r3

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009fbe:	22fe      	movs	r2, #254	; 0xfe
10009fc0:	23b6      	movs	r3, #182	; 0xb6
10009fc2:	0592      	lsls	r2, r2, #22
10009fc4:	005b      	lsls	r3, r3, #1
10009fc6:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009fc8:	21a4      	movs	r1, #164	; 0xa4
10009fca:	2380      	movs	r3, #128	; 0x80
10009fcc:	0049      	lsls	r1, r1, #1
10009fce:	05db      	lsls	r3, r3, #23
10009fd0:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009fd2:	3134      	adds	r1, #52	; 0x34
10009fd4:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009fd6:	3924      	subs	r1, #36	; 0x24
10009fd8:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009fda:	3134      	adds	r1, #52	; 0x34
10009fdc:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009fde:	22b4      	movs	r2, #180	; 0xb4
10009fe0:	0052      	lsls	r2, r2, #1
10009fe2:	50a3      	str	r3, [r4, r2]
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
    sensors.soft_iron.enable = 0;
10009fe4:	23c8      	movs	r3, #200	; 0xc8
10009fe6:	2200      	movs	r2, #0
10009fe8:	005b      	lsls	r3, r3, #1
10009fea:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
}
10009fec:	bd10      	pop	{r4, pc}
10009fee:	46c0      	nop			; (mov r8, r8)
10009ff0:	1001b5dc 	.word	0x1001b5dc
10009ff4:	1001810b 	.word	0x1001810b

10009ff8 <inv_init_data_builder>:
/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
10009ff8:	22a0      	movs	r2, #160	; 0xa0
}

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
10009ffa:	b510      	push	{r4, lr}
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
10009ffc:	0052      	lsls	r2, r2, #1
10009ffe:	4c09      	ldr	r4, [pc, #36]	; (1000a024 <inv_init_data_builder+0x2c>)
1000a000:	2100      	movs	r1, #0
1000a002:	4809      	ldr	r0, [pc, #36]	; (1000a028 <inv_init_data_builder+0x30>)
1000a004:	47a0      	blx	r4
    memset(&sensors, 0, sizeof(sensors));
1000a006:	22cc      	movs	r2, #204	; 0xcc
1000a008:	2100      	movs	r1, #0
1000a00a:	0052      	lsls	r2, r2, #1
1000a00c:	4807      	ldr	r0, [pc, #28]	; (1000a02c <inv_init_data_builder+0x34>)
1000a00e:	47a0      	blx	r4

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
1000a010:	4b07      	ldr	r3, [pc, #28]	; (1000a030 <inv_init_data_builder+0x38>)
1000a012:	4798      	blx	r3

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
1000a014:	4b07      	ldr	r3, [pc, #28]	; (1000a034 <inv_init_data_builder+0x3c>)
1000a016:	2248      	movs	r2, #72	; 0x48
1000a018:	4907      	ldr	r1, [pc, #28]	; (1000a038 <inv_init_data_builder+0x40>)
1000a01a:	4c08      	ldr	r4, [pc, #32]	; (1000a03c <inv_init_data_builder+0x44>)
1000a01c:	4808      	ldr	r0, [pc, #32]	; (1000a040 <inv_init_data_builder+0x48>)
1000a01e:	47a0      	blx	r4
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
1000a020:	bd10      	pop	{r4, pc}
1000a022:	46c0      	nop			; (mov r8, r8)
1000a024:	1001810b 	.word	0x1001810b
1000a028:	1001b49c 	.word	0x1001b49c
1000a02c:	1001b5dc 	.word	0x1001b5dc
1000a030:	10009f99 	.word	0x10009f99
1000a034:	0000d093 	.word	0x0000d093
1000a038:	10009b3d 	.word	0x10009b3d
1000a03c:	1000ad55 	.word	0x1000ad55
1000a040:	10009b55 	.word	0x10009b55

1000a044 <inv_set_message>:
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
    if (level == 0) {
1000a044:	2a00      	cmp	r2, #0
1000a046:	d104      	bne.n	1000a052 <inv_set_message+0xe>
        mh.message &= ~clear;
        mh.message |= set;
1000a048:	4a02      	ldr	r2, [pc, #8]	; (1000a054 <inv_set_message+0x10>)
1000a04a:	6813      	ldr	r3, [r2, #0]
1000a04c:	438b      	bics	r3, r1
1000a04e:	4318      	orrs	r0, r3
1000a050:	6010      	str	r0, [r2, #0]
    }
}
1000a052:	4770      	bx	lr
1000a054:	1001b774 	.word	0x1001b774

1000a058 <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a058:	2200      	movs	r2, #0
1000a05a:	5682      	ldrsb	r2, [r0, r2]
        b = 0;
1000a05c:	2300      	movs	r3, #0

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a05e:	2a00      	cmp	r2, #0
1000a060:	dd01      	ble.n	1000a066 <inv_row_2_scale+0xe>
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
    return b;
}
1000a062:	0018      	movs	r0, r3
1000a064:	4770      	bx	lr
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
1000a066:	3304      	adds	r3, #4
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
1000a068:	2a00      	cmp	r2, #0
1000a06a:	d1fa      	bne.n	1000a062 <inv_row_2_scale+0xa>
        b = 4;
    else if (row[1] > 0)
1000a06c:	2201      	movs	r2, #1
1000a06e:	5682      	ldrsb	r2, [r0, r2]
        b = 1;
1000a070:	3b03      	subs	r3, #3

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
1000a072:	2a00      	cmp	r2, #0
1000a074:	dcf5      	bgt.n	1000a062 <inv_row_2_scale+0xa>
        b = 1;
    else if (row[1] < 0)
        b = 5;
1000a076:	3304      	adds	r3, #4
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
1000a078:	2a00      	cmp	r2, #0
1000a07a:	d1f2      	bne.n	1000a062 <inv_row_2_scale+0xa>
        b = 5;
    else if (row[2] > 0)
1000a07c:	7880      	ldrb	r0, [r0, #2]
        b = 2;
1000a07e:	3b03      	subs	r3, #3
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
1000a080:	b240      	sxtb	r0, r0
1000a082:	2800      	cmp	r0, #0
1000a084:	dced      	bgt.n	1000a062 <inv_row_2_scale+0xa>
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
1000a086:	1e43      	subs	r3, r0, #1
1000a088:	4198      	sbcs	r0, r3
1000a08a:	2307      	movs	r3, #7
1000a08c:	1a1b      	subs	r3, r3, r0
1000a08e:	e7e8      	b.n	1000a062 <inv_row_2_scale+0xa>

1000a090 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1000a090:	0001      	movs	r1, r0
1000a092:	0002      	movs	r2, r0
    unsigned long gmag = 0;
1000a094:	2000      	movs	r0, #0
1000a096:	310c      	adds	r1, #12
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1000a098:	ca08      	ldmia	r2!, {r3}
1000a09a:	135b      	asrs	r3, r3, #13
        gmag += temp * temp;
1000a09c:	435b      	muls	r3, r3
1000a09e:	18c0      	adds	r0, r0, r3
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1000a0a0:	4291      	cmp	r1, r2
1000a0a2:	d1f9      	bne.n	1000a098 <inv_get_gyro_sum_of_sqr+0x8>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
}
1000a0a4:	4770      	bx	lr
1000a0a6:	46c0      	nop			; (mov r8, r8)

1000a0a8 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1000a0a8:	000a      	movs	r2, r1
1000a0aa:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 29);
    return result;
1000a0ac:	17d3      	asrs	r3, r2, #31
1000a0ae:	4c03      	ldr	r4, [pc, #12]	; (1000a0bc <inv_q29_mult+0x14>)
1000a0b0:	17c1      	asrs	r1, r0, #31
1000a0b2:	47a0      	blx	r4
1000a0b4:	00c9      	lsls	r1, r1, #3
1000a0b6:	0f40      	lsrs	r0, r0, #29
1000a0b8:	4308      	orrs	r0, r1
#endif
}
1000a0ba:	bd10      	pop	{r4, pc}
1000a0bc:	100151d9 	.word	0x100151d9

1000a0c0 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
1000a0c0:	000a      	movs	r2, r1
1000a0c2:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 30);
    return result;
1000a0c4:	17d3      	asrs	r3, r2, #31
1000a0c6:	4c03      	ldr	r4, [pc, #12]	; (1000a0d4 <inv_q30_mult+0x14>)
1000a0c8:	17c1      	asrs	r1, r0, #31
1000a0ca:	47a0      	blx	r4
1000a0cc:	0089      	lsls	r1, r1, #2
1000a0ce:	0f80      	lsrs	r0, r0, #30
1000a0d0:	4308      	orrs	r0, r1
#endif
}
1000a0d2:	bd10      	pop	{r4, pc}
1000a0d4:	100151d9 	.word	0x100151d9

1000a0d8 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0da:	4647      	mov	r7, r8
1000a0dc:	000e      	movs	r6, r1
1000a0de:	b480      	push	{r7}
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a0e0:	6803      	ldr	r3, [r0, #0]
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a0e2:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a0e4:	17d9      	asrs	r1, r3, #31
1000a0e6:	6833      	ldr	r3, [r6, #0]
1000a0e8:	4c5e      	ldr	r4, [pc, #376]	; (1000a264 <inv_q_mult+0x18c>)
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a0ea:	0017      	movs	r7, r2
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a0ec:	6800      	ldr	r0, [r0, #0]
1000a0ee:	6832      	ldr	r2, [r6, #0]
1000a0f0:	17db      	asrs	r3, r3, #31
1000a0f2:	47a0      	blx	r4
1000a0f4:	0089      	lsls	r1, r1, #2
1000a0f6:	0f83      	lsrs	r3, r0, #30
1000a0f8:	430b      	orrs	r3, r1
1000a0fa:	4698      	mov	r8, r3
1000a0fc:	686b      	ldr	r3, [r5, #4]
1000a0fe:	6872      	ldr	r2, [r6, #4]
1000a100:	17d9      	asrs	r1, r3, #31
1000a102:	6873      	ldr	r3, [r6, #4]
1000a104:	6868      	ldr	r0, [r5, #4]
1000a106:	17db      	asrs	r3, r3, #31
1000a108:	47a0      	blx	r4
1000a10a:	4643      	mov	r3, r8
1000a10c:	0089      	lsls	r1, r1, #2
1000a10e:	0f80      	lsrs	r0, r0, #30
1000a110:	4308      	orrs	r0, r1
1000a112:	1a1b      	subs	r3, r3, r0
1000a114:	4698      	mov	r8, r3
1000a116:	68ab      	ldr	r3, [r5, #8]
1000a118:	68b2      	ldr	r2, [r6, #8]
1000a11a:	17d9      	asrs	r1, r3, #31
1000a11c:	68b3      	ldr	r3, [r6, #8]
1000a11e:	68a8      	ldr	r0, [r5, #8]
1000a120:	17db      	asrs	r3, r3, #31
1000a122:	47a0      	blx	r4
1000a124:	4643      	mov	r3, r8
1000a126:	0089      	lsls	r1, r1, #2
1000a128:	0f80      	lsrs	r0, r0, #30
1000a12a:	4308      	orrs	r0, r1
1000a12c:	1a1b      	subs	r3, r3, r0
1000a12e:	4698      	mov	r8, r3
1000a130:	68eb      	ldr	r3, [r5, #12]
1000a132:	68f2      	ldr	r2, [r6, #12]
1000a134:	17d9      	asrs	r1, r3, #31
1000a136:	68f3      	ldr	r3, [r6, #12]
1000a138:	68e8      	ldr	r0, [r5, #12]
1000a13a:	17db      	asrs	r3, r3, #31
1000a13c:	47a0      	blx	r4
1000a13e:	4643      	mov	r3, r8
1000a140:	0089      	lsls	r1, r1, #2
1000a142:	0f80      	lsrs	r0, r0, #30
1000a144:	4308      	orrs	r0, r1
1000a146:	1a18      	subs	r0, r3, r0
1000a148:	6038      	str	r0, [r7, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1000a14a:	686b      	ldr	r3, [r5, #4]
1000a14c:	6832      	ldr	r2, [r6, #0]
1000a14e:	17d9      	asrs	r1, r3, #31
1000a150:	6833      	ldr	r3, [r6, #0]
1000a152:	6868      	ldr	r0, [r5, #4]
1000a154:	17db      	asrs	r3, r3, #31
1000a156:	47a0      	blx	r4
1000a158:	0089      	lsls	r1, r1, #2
1000a15a:	0f83      	lsrs	r3, r0, #30
1000a15c:	430b      	orrs	r3, r1
1000a15e:	4698      	mov	r8, r3
1000a160:	682b      	ldr	r3, [r5, #0]
1000a162:	6872      	ldr	r2, [r6, #4]
1000a164:	17d9      	asrs	r1, r3, #31
1000a166:	6873      	ldr	r3, [r6, #4]
1000a168:	6828      	ldr	r0, [r5, #0]
1000a16a:	17db      	asrs	r3, r3, #31
1000a16c:	47a0      	blx	r4
1000a16e:	68ab      	ldr	r3, [r5, #8]
1000a170:	0089      	lsls	r1, r1, #2
1000a172:	0f80      	lsrs	r0, r0, #30
1000a174:	4308      	orrs	r0, r1
1000a176:	17d9      	asrs	r1, r3, #31
1000a178:	68f3      	ldr	r3, [r6, #12]
1000a17a:	4480      	add	r8, r0
1000a17c:	68f2      	ldr	r2, [r6, #12]
1000a17e:	68a8      	ldr	r0, [r5, #8]
1000a180:	17db      	asrs	r3, r3, #31
1000a182:	47a0      	blx	r4
1000a184:	68eb      	ldr	r3, [r5, #12]
1000a186:	0089      	lsls	r1, r1, #2
1000a188:	0f80      	lsrs	r0, r0, #30
1000a18a:	4308      	orrs	r0, r1
1000a18c:	17d9      	asrs	r1, r3, #31
1000a18e:	68b3      	ldr	r3, [r6, #8]
1000a190:	68b2      	ldr	r2, [r6, #8]
1000a192:	4480      	add	r8, r0
1000a194:	17db      	asrs	r3, r3, #31
1000a196:	68e8      	ldr	r0, [r5, #12]
1000a198:	47a0      	blx	r4
1000a19a:	4643      	mov	r3, r8
1000a19c:	0089      	lsls	r1, r1, #2
1000a19e:	0f80      	lsrs	r0, r0, #30
1000a1a0:	4308      	orrs	r0, r1
1000a1a2:	1a18      	subs	r0, r3, r0
1000a1a4:	6078      	str	r0, [r7, #4]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1000a1a6:	682b      	ldr	r3, [r5, #0]
1000a1a8:	68b2      	ldr	r2, [r6, #8]
1000a1aa:	17d9      	asrs	r1, r3, #31
1000a1ac:	68b3      	ldr	r3, [r6, #8]
1000a1ae:	6828      	ldr	r0, [r5, #0]
1000a1b0:	17db      	asrs	r3, r3, #31
1000a1b2:	47a0      	blx	r4
1000a1b4:	0089      	lsls	r1, r1, #2
1000a1b6:	0f83      	lsrs	r3, r0, #30
1000a1b8:	430b      	orrs	r3, r1
1000a1ba:	4698      	mov	r8, r3
1000a1bc:	686b      	ldr	r3, [r5, #4]
1000a1be:	68f2      	ldr	r2, [r6, #12]
1000a1c0:	17d9      	asrs	r1, r3, #31
1000a1c2:	68f3      	ldr	r3, [r6, #12]
1000a1c4:	6868      	ldr	r0, [r5, #4]
1000a1c6:	17db      	asrs	r3, r3, #31
1000a1c8:	47a0      	blx	r4
1000a1ca:	4643      	mov	r3, r8
1000a1cc:	0089      	lsls	r1, r1, #2
1000a1ce:	0f80      	lsrs	r0, r0, #30
1000a1d0:	4308      	orrs	r0, r1
1000a1d2:	1a1b      	subs	r3, r3, r0
1000a1d4:	4698      	mov	r8, r3
1000a1d6:	68ab      	ldr	r3, [r5, #8]
1000a1d8:	6832      	ldr	r2, [r6, #0]
1000a1da:	17d9      	asrs	r1, r3, #31
1000a1dc:	6833      	ldr	r3, [r6, #0]
1000a1de:	68a8      	ldr	r0, [r5, #8]
1000a1e0:	17db      	asrs	r3, r3, #31
1000a1e2:	47a0      	blx	r4
1000a1e4:	68eb      	ldr	r3, [r5, #12]
1000a1e6:	0089      	lsls	r1, r1, #2
1000a1e8:	0f80      	lsrs	r0, r0, #30
1000a1ea:	4308      	orrs	r0, r1
1000a1ec:	17d9      	asrs	r1, r3, #31
1000a1ee:	6873      	ldr	r3, [r6, #4]
1000a1f0:	6872      	ldr	r2, [r6, #4]
1000a1f2:	4480      	add	r8, r0
1000a1f4:	17db      	asrs	r3, r3, #31
1000a1f6:	68e8      	ldr	r0, [r5, #12]
1000a1f8:	47a0      	blx	r4
1000a1fa:	0089      	lsls	r1, r1, #2
1000a1fc:	0f80      	lsrs	r0, r0, #30
1000a1fe:	4308      	orrs	r0, r1
1000a200:	4440      	add	r0, r8
1000a202:	60b8      	str	r0, [r7, #8]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1000a204:	68b3      	ldr	r3, [r6, #8]
1000a206:	17d9      	asrs	r1, r3, #31
1000a208:	686b      	ldr	r3, [r5, #4]
1000a20a:	686a      	ldr	r2, [r5, #4]
1000a20c:	17db      	asrs	r3, r3, #31
1000a20e:	68b0      	ldr	r0, [r6, #8]
1000a210:	47a0      	blx	r4
1000a212:	0089      	lsls	r1, r1, #2
1000a214:	0f83      	lsrs	r3, r0, #30
1000a216:	430b      	orrs	r3, r1
1000a218:	4698      	mov	r8, r3
1000a21a:	682b      	ldr	r3, [r5, #0]
1000a21c:	68f2      	ldr	r2, [r6, #12]
1000a21e:	17d9      	asrs	r1, r3, #31
1000a220:	68f3      	ldr	r3, [r6, #12]
1000a222:	6828      	ldr	r0, [r5, #0]
1000a224:	17db      	asrs	r3, r3, #31
1000a226:	47a0      	blx	r4
1000a228:	6873      	ldr	r3, [r6, #4]
1000a22a:	0089      	lsls	r1, r1, #2
1000a22c:	0f80      	lsrs	r0, r0, #30
1000a22e:	4308      	orrs	r0, r1
1000a230:	17d9      	asrs	r1, r3, #31
1000a232:	68ab      	ldr	r3, [r5, #8]
1000a234:	68aa      	ldr	r2, [r5, #8]
1000a236:	4480      	add	r8, r0
1000a238:	17db      	asrs	r3, r3, #31
1000a23a:	6870      	ldr	r0, [r6, #4]
1000a23c:	47a0      	blx	r4
1000a23e:	4643      	mov	r3, r8
1000a240:	0089      	lsls	r1, r1, #2
1000a242:	0f80      	lsrs	r0, r0, #30
1000a244:	4308      	orrs	r0, r1
1000a246:	68ea      	ldr	r2, [r5, #12]
1000a248:	1a1b      	subs	r3, r3, r0
1000a24a:	6830      	ldr	r0, [r6, #0]
1000a24c:	4698      	mov	r8, r3
1000a24e:	17c1      	asrs	r1, r0, #31
1000a250:	17d3      	asrs	r3, r2, #31
1000a252:	47a0      	blx	r4
1000a254:	0089      	lsls	r1, r1, #2
1000a256:	0f80      	lsrs	r0, r0, #30
1000a258:	4308      	orrs	r0, r1
1000a25a:	4440      	add	r0, r8
1000a25c:	60f8      	str	r0, [r7, #12]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1000a25e:	bc04      	pop	{r2}
1000a260:	4690      	mov	r8, r2
1000a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a264:	100151d9 	.word	0x100151d9

1000a268 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a268:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a26a:	465f      	mov	r7, fp
1000a26c:	4656      	mov	r6, sl
1000a26e:	464d      	mov	r5, r9
1000a270:	4644      	mov	r4, r8
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1000a272:	2300      	movs	r3, #0
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a274:	4689      	mov	r9, r1
1000a276:	b4f0      	push	{r4, r5, r6, r7}
1000a278:	b097      	sub	sp, #92	; 0x5c
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1000a27a:	9306      	str	r3, [sp, #24]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a27c:	6843      	ldr	r3, [r0, #4]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a27e:	0007      	movs	r7, r0
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a280:	469a      	mov	sl, r3
1000a282:	17db      	asrs	r3, r3, #31
1000a284:	0019      	movs	r1, r3
1000a286:	464b      	mov	r3, r9
1000a288:	464c      	mov	r4, r9
1000a28a:	689b      	ldr	r3, [r3, #8]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a28c:	0015      	movs	r5, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a28e:	17da      	asrs	r2, r3, #31
1000a290:	0010      	movs	r0, r2
1000a292:	6864      	ldr	r4, [r4, #4]
1000a294:	68ba      	ldr	r2, [r7, #8]
1000a296:	46a3      	mov	fp, r4
1000a298:	4690      	mov	r8, r2
1000a29a:	17e4      	asrs	r4, r4, #31
1000a29c:	17d2      	asrs	r2, r2, #31
1000a29e:	9200      	str	r2, [sp, #0]
1000a2a0:	9401      	str	r4, [sp, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
1000a2a2:	001a      	movs	r2, r3
1000a2a4:	4c3b      	ldr	r4, [pc, #236]	; (1000a394 <inv_compass_angle+0x12c>)
1000a2a6:	9303      	str	r3, [sp, #12]
1000a2a8:	9004      	str	r0, [sp, #16]
1000a2aa:	0003      	movs	r3, r0
1000a2ac:	9102      	str	r1, [sp, #8]
1000a2ae:	4650      	mov	r0, sl
1000a2b0:	47a0      	blx	r4
1000a2b2:	0089      	lsls	r1, r1, #2
1000a2b4:	0f86      	lsrs	r6, r0, #30
1000a2b6:	9b01      	ldr	r3, [sp, #4]
1000a2b8:	430e      	orrs	r6, r1
1000a2ba:	465a      	mov	r2, fp
1000a2bc:	4640      	mov	r0, r8
1000a2be:	9900      	ldr	r1, [sp, #0]
1000a2c0:	47a0      	blx	r4
1000a2c2:	0089      	lsls	r1, r1, #2
1000a2c4:	0f80      	lsrs	r0, r0, #30
1000a2c6:	4308      	orrs	r0, r1
1000a2c8:	1a36      	subs	r6, r6, r0
1000a2ca:	9607      	str	r6, [sp, #28]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a2cc:	464e      	mov	r6, r9
1000a2ce:	6836      	ldr	r6, [r6, #0]
1000a2d0:	683f      	ldr	r7, [r7, #0]
1000a2d2:	17f1      	asrs	r1, r6, #31
1000a2d4:	4689      	mov	r9, r1
1000a2d6:	17f9      	asrs	r1, r7, #31
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a2d8:	4642      	mov	r2, r8
1000a2da:	9b00      	ldr	r3, [sp, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a2dc:	9105      	str	r1, [sp, #20]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a2de:	0030      	movs	r0, r6
1000a2e0:	4649      	mov	r1, r9
1000a2e2:	47a0      	blx	r4
1000a2e4:	0f82      	lsrs	r2, r0, #30
1000a2e6:	0010      	movs	r0, r2
1000a2e8:	0089      	lsls	r1, r1, #2
1000a2ea:	4308      	orrs	r0, r1
1000a2ec:	4680      	mov	r8, r0
1000a2ee:	9a03      	ldr	r2, [sp, #12]
1000a2f0:	9b04      	ldr	r3, [sp, #16]
1000a2f2:	0038      	movs	r0, r7
1000a2f4:	17f9      	asrs	r1, r7, #31
1000a2f6:	47a0      	blx	r4
1000a2f8:	4642      	mov	r2, r8
1000a2fa:	0089      	lsls	r1, r1, #2
1000a2fc:	0f80      	lsrs	r0, r0, #30
1000a2fe:	4308      	orrs	r0, r1
1000a300:	1a10      	subs	r0, r2, r0
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a302:	9b01      	ldr	r3, [sp, #4]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a304:	9008      	str	r0, [sp, #32]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a306:	465a      	mov	r2, fp
1000a308:	0038      	movs	r0, r7
1000a30a:	9905      	ldr	r1, [sp, #20]
1000a30c:	47a0      	blx	r4
1000a30e:	0089      	lsls	r1, r1, #2
1000a310:	0f87      	lsrs	r7, r0, #30
1000a312:	9b02      	ldr	r3, [sp, #8]
1000a314:	430f      	orrs	r7, r1
1000a316:	4652      	mov	r2, sl
1000a318:	0030      	movs	r0, r6
1000a31a:	4649      	mov	r1, r9
1000a31c:	47a0      	blx	r4
1000a31e:	0089      	lsls	r1, r1, #2
1000a320:	0f80      	lsrs	r0, r0, #30
1000a322:	4308      	orrs	r0, r1

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a324:	4c1c      	ldr	r4, [pc, #112]	; (1000a398 <inv_compass_angle+0x130>)

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a326:	1a3f      	subs	r7, r7, r0

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a328:	aa0a      	add	r2, sp, #40	; 0x28
1000a32a:	a906      	add	r1, sp, #24
1000a32c:	0028      	movs	r0, r5

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a32e:	9709      	str	r7, [sp, #36]	; 0x24

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a330:	47a0      	blx	r4
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a332:	682b      	ldr	r3, [r5, #0]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a334:	a80a      	add	r0, sp, #40	; 0x28
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a336:	9312      	str	r3, [sp, #72]	; 0x48
    qInverted[1] = -q[1];
1000a338:	686b      	ldr	r3, [r5, #4]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a33a:	aa0e      	add	r2, sp, #56	; 0x38

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a33c:	425b      	negs	r3, r3
1000a33e:	9313      	str	r3, [sp, #76]	; 0x4c
    qInverted[2] = -q[2];
1000a340:	68ab      	ldr	r3, [r5, #8]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a342:	a912      	add	r1, sp, #72	; 0x48
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a344:	425b      	negs	r3, r3
1000a346:	9314      	str	r3, [sp, #80]	; 0x50
    qInverted[3] = -q[3];
1000a348:	68eb      	ldr	r3, [r5, #12]
1000a34a:	425b      	negs	r3, r3
1000a34c:	9315      	str	r3, [sp, #84]	; 0x54
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a34e:	47a0      	blx	r4

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1000a350:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000a352:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a354:	2c00      	cmp	r4, #0
1000a356:	d101      	bne.n	1000a35c <inv_compass_angle+0xf4>
1000a358:	2800      	cmp	r0, #0
1000a35a:	d019      	beq.n	1000a390 <inv_compass_angle+0x128>
        return 0.f;

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1000a35c:	4e0f      	ldr	r6, [pc, #60]	; (1000a39c <inv_compass_angle+0x134>)
1000a35e:	47b0      	blx	r6
1000a360:	21c2      	movs	r1, #194	; 0xc2
1000a362:	4d0f      	ldr	r5, [pc, #60]	; (1000a3a0 <inv_compass_angle+0x138>)
1000a364:	0589      	lsls	r1, r1, #22
1000a366:	47a8      	blx	r5
1000a368:	1c07      	adds	r7, r0, #0
1000a36a:	0020      	movs	r0, r4
1000a36c:	47b0      	blx	r6
1000a36e:	21c2      	movs	r1, #194	; 0xc2
1000a370:	0589      	lsls	r1, r1, #22
1000a372:	47a8      	blx	r5
1000a374:	4b0b      	ldr	r3, [pc, #44]	; (1000a3a4 <inv_compass_angle+0x13c>)
1000a376:	1c39      	adds	r1, r7, #0
1000a378:	4798      	blx	r3
1000a37a:	2380      	movs	r3, #128	; 0x80
1000a37c:	061b      	lsls	r3, r3, #24
1000a37e:	469c      	mov	ip, r3
1000a380:	4460      	add	r0, ip
    return angW;
}
1000a382:	b017      	add	sp, #92	; 0x5c
1000a384:	bc3c      	pop	{r2, r3, r4, r5}
1000a386:	4690      	mov	r8, r2
1000a388:	4699      	mov	r9, r3
1000a38a:	46a2      	mov	sl, r4
1000a38c:	46ab      	mov	fp, r5
1000a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
        return 0.f;
1000a390:	2000      	movs	r0, #0
1000a392:	e7f6      	b.n	1000a382 <inv_compass_angle+0x11a>
1000a394:	100151d9 	.word	0x100151d9
1000a398:	1000a0d9 	.word	0x1000a0d9
1000a39c:	10015fcd 	.word	0x10015fcd
1000a3a0:	10015a25 	.word	0x10015a25
1000a3a4:	100108c5 	.word	0x100108c5

1000a3a8 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1000a3a8:	b510      	push	{r4, lr}
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a3aa:	6803      	ldr	r3, [r0, #0]
1000a3ac:	001c      	movs	r4, r3
1000a3ae:	680b      	ldr	r3, [r1, #0]
1000a3b0:	469c      	mov	ip, r3
1000a3b2:	4464      	add	r4, ip
1000a3b4:	6014      	str	r4, [r2, #0]
    qSum[1] = q1[1] + q2[1];
1000a3b6:	6843      	ldr	r3, [r0, #4]
1000a3b8:	001c      	movs	r4, r3
1000a3ba:	684b      	ldr	r3, [r1, #4]
1000a3bc:	469c      	mov	ip, r3
1000a3be:	4464      	add	r4, ip
1000a3c0:	6054      	str	r4, [r2, #4]
    qSum[2] = q1[2] + q2[2];
1000a3c2:	6883      	ldr	r3, [r0, #8]
1000a3c4:	001c      	movs	r4, r3
1000a3c6:	688b      	ldr	r3, [r1, #8]
1000a3c8:	469c      	mov	ip, r3
1000a3ca:	4464      	add	r4, ip
1000a3cc:	6094      	str	r4, [r2, #8]
    qSum[3] = q1[3] + q2[3];
1000a3ce:	68c0      	ldr	r0, [r0, #12]
1000a3d0:	68cb      	ldr	r3, [r1, #12]
1000a3d2:	18c3      	adds	r3, r0, r3
1000a3d4:	60d3      	str	r3, [r2, #12]
}
1000a3d6:	bd10      	pop	{r4, pc}

1000a3d8 <inv_q_invert>:
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a3d8:	6803      	ldr	r3, [r0, #0]
1000a3da:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a3dc:	6843      	ldr	r3, [r0, #4]
1000a3de:	425b      	negs	r3, r3
1000a3e0:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a3e2:	6883      	ldr	r3, [r0, #8]
1000a3e4:	425b      	negs	r3, r3
1000a3e6:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a3e8:	68c3      	ldr	r3, [r0, #12]
1000a3ea:	425b      	negs	r3, r3
1000a3ec:	60cb      	str	r3, [r1, #12]
}
1000a3ee:	4770      	bx	lr

1000a3f0 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a3f2:	2300      	movs	r3, #0
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a3f4:	0004      	movs	r4, r0
1000a3f6:	0017      	movs	r7, r2
1000a3f8:	b091      	sub	sp, #68	; 0x44
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a3fa:	4d0f      	ldr	r5, [pc, #60]	; (1000a438 <inv_q_rotate+0x48>)
1000a3fc:	220c      	movs	r2, #12
1000a3fe:	a809      	add	r0, sp, #36	; 0x24
{
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a400:	9308      	str	r3, [sp, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a402:	47a8      	blx	r5
    inv_q_mult(q, in4, q_temp1);
1000a404:	466a      	mov	r2, sp
1000a406:	a908      	add	r1, sp, #32
1000a408:	0020      	movs	r0, r4
1000a40a:	4e0c      	ldr	r6, [pc, #48]	; (1000a43c <inv_q_rotate+0x4c>)
1000a40c:	47b0      	blx	r6
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a40e:	6823      	ldr	r3, [r4, #0]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a410:	aa0c      	add	r2, sp, #48	; 0x30
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a412:	9304      	str	r3, [sp, #16]
    qInverted[1] = -q[1];
1000a414:	6863      	ldr	r3, [r4, #4]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a416:	a904      	add	r1, sp, #16

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a418:	425b      	negs	r3, r3
1000a41a:	9305      	str	r3, [sp, #20]
    qInverted[2] = -q[2];
1000a41c:	68a3      	ldr	r3, [r4, #8]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a41e:	4668      	mov	r0, sp
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a420:	425b      	negs	r3, r3
1000a422:	9306      	str	r3, [sp, #24]
    qInverted[3] = -q[3];
1000a424:	68e3      	ldr	r3, [r4, #12]
1000a426:	425b      	negs	r3, r3
1000a428:	9307      	str	r3, [sp, #28]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a42a:	47b0      	blx	r6
    memcpy(out, &out4[1], 3 * sizeof(long));
1000a42c:	220c      	movs	r2, #12
1000a42e:	a90d      	add	r1, sp, #52	; 0x34
1000a430:	0038      	movs	r0, r7
1000a432:	47a8      	blx	r5
}
1000a434:	b011      	add	sp, #68	; 0x44
1000a436:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a438:	100180cf 	.word	0x100180cf
1000a43c:	1000a0d9 	.word	0x1000a0d9

1000a440 <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a440:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a442:	4657      	mov	r7, sl
1000a444:	464e      	mov	r6, r9
1000a446:	4645      	mov	r5, r8
1000a448:	b4e0      	push	{r5, r6, r7}
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a44a:	4c3a      	ldr	r4, [pc, #232]	; (1000a534 <inv_q_multf+0xf4>)
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a44c:	0005      	movs	r5, r0
1000a44e:	000e      	movs	r6, r1
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a450:	6800      	ldr	r0, [r0, #0]
1000a452:	6809      	ldr	r1, [r1, #0]
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a454:	4691      	mov	r9, r2
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a456:	47a0      	blx	r4
1000a458:	6871      	ldr	r1, [r6, #4]
1000a45a:	1c07      	adds	r7, r0, #0
1000a45c:	6868      	ldr	r0, [r5, #4]
1000a45e:	47a0      	blx	r4
1000a460:	4b35      	ldr	r3, [pc, #212]	; (1000a538 <inv_q_multf+0xf8>)
1000a462:	1c01      	adds	r1, r0, #0
1000a464:	1c38      	adds	r0, r7, #0
1000a466:	4698      	mov	r8, r3
1000a468:	4798      	blx	r3
1000a46a:	68b1      	ldr	r1, [r6, #8]
1000a46c:	1c07      	adds	r7, r0, #0
1000a46e:	68a8      	ldr	r0, [r5, #8]
1000a470:	47a0      	blx	r4
1000a472:	1c01      	adds	r1, r0, #0
1000a474:	1c38      	adds	r0, r7, #0
1000a476:	47c0      	blx	r8
1000a478:	68f1      	ldr	r1, [r6, #12]
1000a47a:	1c07      	adds	r7, r0, #0
1000a47c:	68e8      	ldr	r0, [r5, #12]
1000a47e:	47a0      	blx	r4
1000a480:	1c01      	adds	r1, r0, #0
1000a482:	1c38      	adds	r0, r7, #0
1000a484:	47c0      	blx	r8
1000a486:	464b      	mov	r3, r9
1000a488:	6018      	str	r0, [r3, #0]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1000a48a:	6871      	ldr	r1, [r6, #4]
1000a48c:	6828      	ldr	r0, [r5, #0]
1000a48e:	47a0      	blx	r4
1000a490:	6831      	ldr	r1, [r6, #0]
1000a492:	4682      	mov	sl, r0
1000a494:	6868      	ldr	r0, [r5, #4]
1000a496:	47a0      	blx	r4
1000a498:	4f28      	ldr	r7, [pc, #160]	; (1000a53c <inv_q_multf+0xfc>)
1000a49a:	1c01      	adds	r1, r0, #0
1000a49c:	4650      	mov	r0, sl
1000a49e:	47b8      	blx	r7
1000a4a0:	68f1      	ldr	r1, [r6, #12]
1000a4a2:	4682      	mov	sl, r0
1000a4a4:	68a8      	ldr	r0, [r5, #8]
1000a4a6:	47a0      	blx	r4
1000a4a8:	1c01      	adds	r1, r0, #0
1000a4aa:	4650      	mov	r0, sl
1000a4ac:	47b8      	blx	r7
1000a4ae:	68b1      	ldr	r1, [r6, #8]
1000a4b0:	4682      	mov	sl, r0
1000a4b2:	68e8      	ldr	r0, [r5, #12]
1000a4b4:	47a0      	blx	r4
1000a4b6:	1c01      	adds	r1, r0, #0
1000a4b8:	4650      	mov	r0, sl
1000a4ba:	47c0      	blx	r8
1000a4bc:	464b      	mov	r3, r9
1000a4be:	6058      	str	r0, [r3, #4]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1000a4c0:	68b1      	ldr	r1, [r6, #8]
1000a4c2:	6828      	ldr	r0, [r5, #0]
1000a4c4:	47a0      	blx	r4
1000a4c6:	68f1      	ldr	r1, [r6, #12]
1000a4c8:	4682      	mov	sl, r0
1000a4ca:	6868      	ldr	r0, [r5, #4]
1000a4cc:	47a0      	blx	r4
1000a4ce:	1c01      	adds	r1, r0, #0
1000a4d0:	4650      	mov	r0, sl
1000a4d2:	47c0      	blx	r8
1000a4d4:	6831      	ldr	r1, [r6, #0]
1000a4d6:	4682      	mov	sl, r0
1000a4d8:	68a8      	ldr	r0, [r5, #8]
1000a4da:	47a0      	blx	r4
1000a4dc:	1c01      	adds	r1, r0, #0
1000a4de:	4650      	mov	r0, sl
1000a4e0:	47b8      	blx	r7
1000a4e2:	6871      	ldr	r1, [r6, #4]
1000a4e4:	4682      	mov	sl, r0
1000a4e6:	68e8      	ldr	r0, [r5, #12]
1000a4e8:	47a0      	blx	r4
1000a4ea:	1c01      	adds	r1, r0, #0
1000a4ec:	4650      	mov	r0, sl
1000a4ee:	47b8      	blx	r7
1000a4f0:	464b      	mov	r3, r9
1000a4f2:	6098      	str	r0, [r3, #8]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1000a4f4:	68f1      	ldr	r1, [r6, #12]
1000a4f6:	6828      	ldr	r0, [r5, #0]
1000a4f8:	47a0      	blx	r4
1000a4fa:	68b1      	ldr	r1, [r6, #8]
1000a4fc:	4682      	mov	sl, r0
1000a4fe:	6868      	ldr	r0, [r5, #4]
1000a500:	47a0      	blx	r4
1000a502:	1c01      	adds	r1, r0, #0
1000a504:	4650      	mov	r0, sl
1000a506:	47b8      	blx	r7
1000a508:	6871      	ldr	r1, [r6, #4]
1000a50a:	4682      	mov	sl, r0
1000a50c:	68a8      	ldr	r0, [r5, #8]
1000a50e:	47a0      	blx	r4
1000a510:	1c01      	adds	r1, r0, #0
1000a512:	4650      	mov	r0, sl
1000a514:	47c0      	blx	r8
1000a516:	6831      	ldr	r1, [r6, #0]
1000a518:	4680      	mov	r8, r0
1000a51a:	68e8      	ldr	r0, [r5, #12]
1000a51c:	47a0      	blx	r4
1000a51e:	1c01      	adds	r1, r0, #0
1000a520:	4640      	mov	r0, r8
1000a522:	47b8      	blx	r7
1000a524:	464b      	mov	r3, r9
1000a526:	60d8      	str	r0, [r3, #12]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1000a528:	bc1c      	pop	{r2, r3, r4}
1000a52a:	4690      	mov	r8, r2
1000a52c:	4699      	mov	r9, r3
1000a52e:	46a2      	mov	sl, r4
1000a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a532:	46c0      	nop			; (mov r8, r8)
1000a534:	10015a25 	.word	0x10015a25
1000a538:	10015c4d 	.word	0x10015c4d
1000a53c:	100153a5 	.word	0x100153a5

1000a540 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a542:	0006      	movs	r6, r0
1000a544:	000f      	movs	r7, r1
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a546:	4d09      	ldr	r5, [pc, #36]	; (1000a56c <inv_q_addf+0x2c>)
1000a548:	6809      	ldr	r1, [r1, #0]
1000a54a:	6800      	ldr	r0, [r0, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a54c:	0014      	movs	r4, r2
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a54e:	47a8      	blx	r5
1000a550:	6020      	str	r0, [r4, #0]
    qSum[1] = q1[1] + q2[1];
1000a552:	6879      	ldr	r1, [r7, #4]
1000a554:	6870      	ldr	r0, [r6, #4]
1000a556:	47a8      	blx	r5
1000a558:	6060      	str	r0, [r4, #4]
    qSum[2] = q1[2] + q2[2];
1000a55a:	68b9      	ldr	r1, [r7, #8]
1000a55c:	68b0      	ldr	r0, [r6, #8]
1000a55e:	47a8      	blx	r5
1000a560:	60a0      	str	r0, [r4, #8]
    qSum[3] = q1[3] + q2[3];
1000a562:	68f9      	ldr	r1, [r7, #12]
1000a564:	68f0      	ldr	r0, [r6, #12]
1000a566:	47a8      	blx	r5
1000a568:	60e0      	str	r0, [r4, #12]
}
1000a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a56c:	100153a5 	.word	0x100153a5

1000a570 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1000a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a572:	465f      	mov	r7, fp
1000a574:	4656      	mov	r6, sl
1000a576:	464d      	mov	r5, r9
1000a578:	4644      	mov	r4, r8
1000a57a:	b4f0      	push	{r4, r5, r6, r7}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a57c:	6803      	ldr	r3, [r0, #0]
1000a57e:	4c41      	ldr	r4, [pc, #260]	; (1000a684 <inv_q_normalizef+0x114>)
1000a580:	469a      	mov	sl, r3
1000a582:	6843      	ldr	r3, [r0, #4]
1000a584:	68c7      	ldr	r7, [r0, #12]
1000a586:	4699      	mov	r9, r3
1000a588:	6883      	ldr	r3, [r0, #8]
1000a58a:	4651      	mov	r1, sl
    qSum[2] = q1[2] + q2[2];
    qSum[3] = q1[3] + q2[3];
}

void inv_q_normalizef(float *q)
{
1000a58c:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a58e:	4650      	mov	r0, sl
1000a590:	4698      	mov	r8, r3
1000a592:	47a0      	blx	r4
1000a594:	4649      	mov	r1, r9
1000a596:	4683      	mov	fp, r0
1000a598:	4648      	mov	r0, r9
1000a59a:	47a0      	blx	r4
1000a59c:	4e3a      	ldr	r6, [pc, #232]	; (1000a688 <inv_q_normalizef+0x118>)
1000a59e:	1c01      	adds	r1, r0, #0
1000a5a0:	4658      	mov	r0, fp
1000a5a2:	47b0      	blx	r6
1000a5a4:	4641      	mov	r1, r8
1000a5a6:	4683      	mov	fp, r0
1000a5a8:	4640      	mov	r0, r8
1000a5aa:	47a0      	blx	r4
1000a5ac:	1c01      	adds	r1, r0, #0
1000a5ae:	4658      	mov	r0, fp
1000a5b0:	47b0      	blx	r6
1000a5b2:	1c39      	adds	r1, r7, #0
1000a5b4:	4683      	mov	fp, r0
1000a5b6:	1c38      	adds	r0, r7, #0
1000a5b8:	47a0      	blx	r4
1000a5ba:	1c01      	adds	r1, r0, #0
1000a5bc:	4658      	mov	r0, fp
1000a5be:	47b0      	blx	r6
    if (normSF < 2) {
1000a5c0:	2180      	movs	r1, #128	; 0x80
1000a5c2:	4b32      	ldr	r3, [pc, #200]	; (1000a68c <inv_q_normalizef+0x11c>)
1000a5c4:	05c9      	lsls	r1, r1, #23
void inv_q_normalizef(float *q)
{
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a5c6:	1c06      	adds	r6, r0, #0
    if (normSF < 2) {
1000a5c8:	4798      	blx	r3
1000a5ca:	2800      	cmp	r0, #0
1000a5cc:	d10c      	bne.n	1000a5e8 <inv_q_normalizef+0x78>
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
        q[3] *= normSF;
    } else {
        q[0] = 1.0;
1000a5ce:	23fe      	movs	r3, #254	; 0xfe
1000a5d0:	059b      	lsls	r3, r3, #22
1000a5d2:	602b      	str	r3, [r5, #0]
        q[1] = 0.0;
1000a5d4:	2300      	movs	r3, #0
1000a5d6:	606b      	str	r3, [r5, #4]
        q[2] = 0.0;
1000a5d8:	60ab      	str	r3, [r5, #8]
        q[3] = 0.0;
1000a5da:	60eb      	str	r3, [r5, #12]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
}
1000a5dc:	bc3c      	pop	{r2, r3, r4, r5}
1000a5de:	4690      	mov	r8, r2
1000a5e0:	4699      	mov	r9, r3
1000a5e2:	46a2      	mov	sl, r4
1000a5e4:	46ab      	mov	fp, r5
1000a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (normSF < 2) {
        xHalf = 0.5f * normSF;
1000a5e8:	21fc      	movs	r1, #252	; 0xfc
1000a5ea:	1c30      	adds	r0, r6, #0
1000a5ec:	0589      	lsls	r1, r1, #22
1000a5ee:	47a0      	blx	r4
1000a5f0:	4683      	mov	fp, r0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a5f2:	1c01      	adds	r1, r0, #0
1000a5f4:	1c30      	adds	r0, r6, #0
1000a5f6:	47a0      	blx	r4
1000a5f8:	1c31      	adds	r1, r6, #0
1000a5fa:	47a0      	blx	r4
1000a5fc:	1c01      	adds	r1, r0, #0
1000a5fe:	20ff      	movs	r0, #255	; 0xff
1000a600:	4b23      	ldr	r3, [pc, #140]	; (1000a690 <inv_q_normalizef+0x120>)
1000a602:	0580      	lsls	r0, r0, #22
1000a604:	4798      	blx	r3
1000a606:	1c01      	adds	r1, r0, #0
1000a608:	1c30      	adds	r0, r6, #0
1000a60a:	47a0      	blx	r4
1000a60c:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a60e:	1c01      	adds	r1, r0, #0
1000a610:	4658      	mov	r0, fp
1000a612:	47a0      	blx	r4
1000a614:	1c31      	adds	r1, r6, #0
1000a616:	47a0      	blx	r4
1000a618:	1c01      	adds	r1, r0, #0
1000a61a:	20ff      	movs	r0, #255	; 0xff
1000a61c:	4b1c      	ldr	r3, [pc, #112]	; (1000a690 <inv_q_normalizef+0x120>)
1000a61e:	0580      	lsls	r0, r0, #22
1000a620:	4798      	blx	r3
1000a622:	1c01      	adds	r1, r0, #0
1000a624:	1c30      	adds	r0, r6, #0
1000a626:	47a0      	blx	r4
1000a628:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a62a:	1c01      	adds	r1, r0, #0
1000a62c:	4658      	mov	r0, fp
1000a62e:	47a0      	blx	r4
1000a630:	1c31      	adds	r1, r6, #0
1000a632:	47a0      	blx	r4
1000a634:	1c01      	adds	r1, r0, #0
1000a636:	20ff      	movs	r0, #255	; 0xff
1000a638:	4b15      	ldr	r3, [pc, #84]	; (1000a690 <inv_q_normalizef+0x120>)
1000a63a:	0580      	lsls	r0, r0, #22
1000a63c:	4798      	blx	r3
1000a63e:	1c01      	adds	r1, r0, #0
1000a640:	1c30      	adds	r0, r6, #0
1000a642:	47a0      	blx	r4
1000a644:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a646:	1c01      	adds	r1, r0, #0
1000a648:	4658      	mov	r0, fp
1000a64a:	47a0      	blx	r4
1000a64c:	1c31      	adds	r1, r6, #0
1000a64e:	47a0      	blx	r4
1000a650:	1c01      	adds	r1, r0, #0
1000a652:	20ff      	movs	r0, #255	; 0xff
1000a654:	4b0e      	ldr	r3, [pc, #56]	; (1000a690 <inv_q_normalizef+0x120>)
1000a656:	0580      	lsls	r0, r0, #22
1000a658:	4798      	blx	r3
1000a65a:	1c01      	adds	r1, r0, #0
1000a65c:	1c30      	adds	r0, r6, #0
1000a65e:	47a0      	blx	r4
1000a660:	1c06      	adds	r6, r0, #0
        q[0] *= normSF;
1000a662:	1c01      	adds	r1, r0, #0
1000a664:	4650      	mov	r0, sl
1000a666:	47a0      	blx	r4
        q[1] *= normSF;
1000a668:	1c31      	adds	r1, r6, #0
        xHalf = 0.5f * normSF;
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
1000a66a:	6028      	str	r0, [r5, #0]
        q[1] *= normSF;
1000a66c:	4648      	mov	r0, r9
1000a66e:	47a0      	blx	r4
        q[2] *= normSF;
1000a670:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
1000a672:	6068      	str	r0, [r5, #4]
        q[2] *= normSF;
1000a674:	4640      	mov	r0, r8
1000a676:	47a0      	blx	r4
        q[3] *= normSF;
1000a678:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
1000a67a:	60a8      	str	r0, [r5, #8]
        q[3] *= normSF;
1000a67c:	1c38      	adds	r0, r7, #0
1000a67e:	47a0      	blx	r4
1000a680:	60e8      	str	r0, [r5, #12]
1000a682:	e7ab      	b.n	1000a5dc <inv_q_normalizef+0x6c>
1000a684:	10015a25 	.word	0x10015a25
1000a688:	100153a5 	.word	0x100153a5
1000a68c:	10015141 	.word	0x10015141
1000a690:	10015c4d 	.word	0x10015c4d

1000a694 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a696:	4657      	mov	r7, sl
1000a698:	464e      	mov	r6, r9
1000a69a:	4645      	mov	r5, r8
1000a69c:	b4e0      	push	{r5, r6, r7}
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a69e:	6843      	ldr	r3, [r0, #4]
1000a6a0:	6801      	ldr	r1, [r0, #0]
1000a6a2:	4699      	mov	r9, r3
1000a6a4:	6883      	ldr	r3, [r0, #8]
1000a6a6:	4d21      	ldr	r5, [pc, #132]	; (1000a72c <inv_q_norm4+0x98>)
1000a6a8:	68c7      	ldr	r7, [r0, #12]

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a6aa:	0004      	movs	r4, r0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a6ac:	1c08      	adds	r0, r1, #0
1000a6ae:	4698      	mov	r8, r3
1000a6b0:	47a8      	blx	r5
1000a6b2:	4649      	mov	r1, r9
1000a6b4:	4682      	mov	sl, r0
1000a6b6:	4648      	mov	r0, r9
1000a6b8:	47a8      	blx	r5
1000a6ba:	4e1d      	ldr	r6, [pc, #116]	; (1000a730 <inv_q_norm4+0x9c>)
1000a6bc:	1c01      	adds	r1, r0, #0
1000a6be:	4650      	mov	r0, sl
1000a6c0:	47b0      	blx	r6
1000a6c2:	4641      	mov	r1, r8
1000a6c4:	4681      	mov	r9, r0
1000a6c6:	4640      	mov	r0, r8
1000a6c8:	47a8      	blx	r5
1000a6ca:	1c01      	adds	r1, r0, #0
1000a6cc:	4648      	mov	r0, r9
1000a6ce:	47b0      	blx	r6
1000a6d0:	1c39      	adds	r1, r7, #0
1000a6d2:	4680      	mov	r8, r0
1000a6d4:	1c38      	adds	r0, r7, #0
1000a6d6:	47a8      	blx	r5
1000a6d8:	1c01      	adds	r1, r0, #0
1000a6da:	4640      	mov	r0, r8
1000a6dc:	47b0      	blx	r6
    if (mag) {
1000a6de:	2500      	movs	r5, #0
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a6e0:	4b14      	ldr	r3, [pc, #80]	; (1000a734 <inv_q_norm4+0xa0>)
1000a6e2:	4798      	blx	r3
    if (mag) {
1000a6e4:	1c29      	adds	r1, r5, #0
1000a6e6:	4b14      	ldr	r3, [pc, #80]	; (1000a738 <inv_q_norm4+0xa4>)
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a6e8:	1c06      	adds	r6, r0, #0
    if (mag) {
1000a6ea:	4798      	blx	r3
1000a6ec:	2800      	cmp	r0, #0
1000a6ee:	d00a      	beq.n	1000a706 <inv_q_norm4+0x72>
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
        q[3] /= mag;
    } else {
        q[0] = 1.f;
1000a6f0:	23fe      	movs	r3, #254	; 0xfe
1000a6f2:	059b      	lsls	r3, r3, #22
1000a6f4:	6023      	str	r3, [r4, #0]
        q[1] = 0.f;
1000a6f6:	6065      	str	r5, [r4, #4]
        q[2] = 0.f;
1000a6f8:	60a5      	str	r5, [r4, #8]
        q[3] = 0.f;
1000a6fa:	60e5      	str	r5, [r4, #12]
    }
}
1000a6fc:	bc1c      	pop	{r2, r3, r4}
1000a6fe:	4690      	mov	r8, r2
1000a700:	4699      	mov	r9, r3
1000a702:	46a2      	mov	sl, r4
1000a704:	bdf0      	pop	{r4, r5, r6, r7, pc}
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a706:	4d0d      	ldr	r5, [pc, #52]	; (1000a73c <inv_q_norm4+0xa8>)
1000a708:	1c31      	adds	r1, r6, #0
1000a70a:	6820      	ldr	r0, [r4, #0]
1000a70c:	47a8      	blx	r5
        q[1] /= mag;
1000a70e:	1c31      	adds	r1, r6, #0
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a710:	6020      	str	r0, [r4, #0]
        q[1] /= mag;
1000a712:	6860      	ldr	r0, [r4, #4]
1000a714:	47a8      	blx	r5
        q[2] /= mag;
1000a716:	1c31      	adds	r1, r6, #0
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
1000a718:	6060      	str	r0, [r4, #4]
        q[2] /= mag;
1000a71a:	68a0      	ldr	r0, [r4, #8]
1000a71c:	47a8      	blx	r5
        q[3] /= mag;
1000a71e:	1c31      	adds	r1, r6, #0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
1000a720:	60a0      	str	r0, [r4, #8]
        q[3] /= mag;
1000a722:	68e0      	ldr	r0, [r4, #12]
1000a724:	47a8      	blx	r5
1000a726:	60e0      	str	r0, [r4, #12]
1000a728:	e7e8      	b.n	1000a6fc <inv_q_norm4+0x68>
1000a72a:	46c0      	nop			; (mov r8, r8)
1000a72c:	10015a25 	.word	0x10015a25
1000a730:	100153a5 	.word	0x100153a5
1000a734:	100108cd 	.word	0x100108cd
1000a738:	10015135 	.word	0x10015135
1000a73c:	10015691 	.word	0x10015691

1000a740 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a740:	2280      	movs	r2, #128	; 0x80
1000a742:	0612      	lsls	r2, r2, #24
1000a744:	4694      	mov	ip, r2
}

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a746:	6803      	ldr	r3, [r0, #0]
1000a748:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a74a:	6843      	ldr	r3, [r0, #4]
1000a74c:	4463      	add	r3, ip
1000a74e:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a750:	6883      	ldr	r3, [r0, #8]
1000a752:	4463      	add	r3, ip
1000a754:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a756:	68c3      	ldr	r3, [r0, #12]
1000a758:	4463      	add	r3, ip
1000a75a:	60cb      	str	r3, [r1, #12]
}
1000a75c:	4770      	bx	lr
1000a75e:	46c0      	nop			; (mov r8, r8)

1000a760 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a762:	464f      	mov	r7, r9
1000a764:	4646      	mov	r6, r8
1000a766:	b4c0      	push	{r6, r7}
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a768:	6843      	ldr	r3, [r0, #4]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a76a:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a76c:	4698      	mov	r8, r3
1000a76e:	17db      	asrs	r3, r3, #31
1000a770:	4699      	mov	r9, r3
1000a772:	6803      	ldr	r3, [r0, #0]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a774:	0004      	movs	r4, r0
    rot[0] =
1000a776:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a778:	17d9      	asrs	r1, r3, #31
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1000a77a:	4d68      	ldr	r5, [pc, #416]	; (1000a91c <inv_quaternion_to_rotation+0x1bc>)
1000a77c:	000b      	movs	r3, r1
1000a77e:	0010      	movs	r0, r2
1000a780:	47a8      	blx	r5
1000a782:	00c9      	lsls	r1, r1, #3
1000a784:	0f47      	lsrs	r7, r0, #29
1000a786:	430f      	orrs	r7, r1
1000a788:	4642      	mov	r2, r8
1000a78a:	464b      	mov	r3, r9
1000a78c:	4640      	mov	r0, r8
1000a78e:	4649      	mov	r1, r9
1000a790:	47a8      	blx	r5
1000a792:	23c0      	movs	r3, #192	; 0xc0
1000a794:	061b      	lsls	r3, r3, #24
1000a796:	469c      	mov	ip, r3
1000a798:	00c9      	lsls	r1, r1, #3
1000a79a:	0f40      	lsrs	r0, r0, #29
1000a79c:	4308      	orrs	r0, r1
1000a79e:	1838      	adds	r0, r7, r0
1000a7a0:	4460      	add	r0, ip
1000a7a2:	6030      	str	r0, [r6, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1000a7a4:	6863      	ldr	r3, [r4, #4]
1000a7a6:	68a2      	ldr	r2, [r4, #8]
1000a7a8:	17d9      	asrs	r1, r3, #31
1000a7aa:	68a3      	ldr	r3, [r4, #8]
1000a7ac:	6860      	ldr	r0, [r4, #4]
1000a7ae:	17db      	asrs	r3, r3, #31
1000a7b0:	47a8      	blx	r5
1000a7b2:	68e3      	ldr	r3, [r4, #12]
1000a7b4:	00c9      	lsls	r1, r1, #3
1000a7b6:	0f47      	lsrs	r7, r0, #29
1000a7b8:	430f      	orrs	r7, r1
1000a7ba:	17d9      	asrs	r1, r3, #31
1000a7bc:	6823      	ldr	r3, [r4, #0]
1000a7be:	6822      	ldr	r2, [r4, #0]
1000a7c0:	68e0      	ldr	r0, [r4, #12]
1000a7c2:	17db      	asrs	r3, r3, #31
1000a7c4:	47a8      	blx	r5
1000a7c6:	00c9      	lsls	r1, r1, #3
1000a7c8:	0f40      	lsrs	r0, r0, #29
1000a7ca:	4308      	orrs	r0, r1
1000a7cc:	1a3f      	subs	r7, r7, r0
1000a7ce:	6077      	str	r7, [r6, #4]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1000a7d0:	68a3      	ldr	r3, [r4, #8]
1000a7d2:	6822      	ldr	r2, [r4, #0]
1000a7d4:	17d9      	asrs	r1, r3, #31
1000a7d6:	6823      	ldr	r3, [r4, #0]
1000a7d8:	68a0      	ldr	r0, [r4, #8]
1000a7da:	17db      	asrs	r3, r3, #31
1000a7dc:	47a8      	blx	r5
1000a7de:	6863      	ldr	r3, [r4, #4]
1000a7e0:	00c9      	lsls	r1, r1, #3
1000a7e2:	0f47      	lsrs	r7, r0, #29
1000a7e4:	430f      	orrs	r7, r1
1000a7e6:	17d9      	asrs	r1, r3, #31
1000a7e8:	68e3      	ldr	r3, [r4, #12]
1000a7ea:	68e2      	ldr	r2, [r4, #12]
1000a7ec:	6860      	ldr	r0, [r4, #4]
1000a7ee:	17db      	asrs	r3, r3, #31
1000a7f0:	47a8      	blx	r5
1000a7f2:	00c9      	lsls	r1, r1, #3
1000a7f4:	0f40      	lsrs	r0, r0, #29
1000a7f6:	4308      	orrs	r0, r1
1000a7f8:	1838      	adds	r0, r7, r0
1000a7fa:	60b0      	str	r0, [r6, #8]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1000a7fc:	68e3      	ldr	r3, [r4, #12]
1000a7fe:	6822      	ldr	r2, [r4, #0]
1000a800:	17d9      	asrs	r1, r3, #31
1000a802:	6823      	ldr	r3, [r4, #0]
1000a804:	68e0      	ldr	r0, [r4, #12]
1000a806:	17db      	asrs	r3, r3, #31
1000a808:	47a8      	blx	r5
1000a80a:	6863      	ldr	r3, [r4, #4]
1000a80c:	00c9      	lsls	r1, r1, #3
1000a80e:	0f47      	lsrs	r7, r0, #29
1000a810:	430f      	orrs	r7, r1
1000a812:	17d9      	asrs	r1, r3, #31
1000a814:	68a3      	ldr	r3, [r4, #8]
1000a816:	68a2      	ldr	r2, [r4, #8]
1000a818:	17db      	asrs	r3, r3, #31
1000a81a:	6860      	ldr	r0, [r4, #4]
1000a81c:	47a8      	blx	r5
1000a81e:	00c9      	lsls	r1, r1, #3
1000a820:	0f40      	lsrs	r0, r0, #29
1000a822:	4308      	orrs	r0, r1
1000a824:	1838      	adds	r0, r7, r0
1000a826:	60f0      	str	r0, [r6, #12]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a828:	68a3      	ldr	r3, [r4, #8]
1000a82a:	4698      	mov	r8, r3
1000a82c:	17db      	asrs	r3, r3, #31
1000a82e:	4699      	mov	r9, r3
1000a830:	6823      	ldr	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a832:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a834:	17d9      	asrs	r1, r3, #31
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a836:	000b      	movs	r3, r1
1000a838:	0010      	movs	r0, r2
1000a83a:	47a8      	blx	r5
1000a83c:	00c9      	lsls	r1, r1, #3
1000a83e:	0f47      	lsrs	r7, r0, #29
1000a840:	464b      	mov	r3, r9
1000a842:	430f      	orrs	r7, r1
1000a844:	4642      	mov	r2, r8
1000a846:	4649      	mov	r1, r9
1000a848:	4640      	mov	r0, r8
1000a84a:	47a8      	blx	r5
1000a84c:	23c0      	movs	r3, #192	; 0xc0
1000a84e:	061b      	lsls	r3, r3, #24
1000a850:	469c      	mov	ip, r3
1000a852:	00c9      	lsls	r1, r1, #3
1000a854:	0f40      	lsrs	r0, r0, #29
1000a856:	4308      	orrs	r0, r1
1000a858:	1838      	adds	r0, r7, r0
1000a85a:	4460      	add	r0, ip
1000a85c:	6130      	str	r0, [r6, #16]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1000a85e:	68a3      	ldr	r3, [r4, #8]
1000a860:	68e2      	ldr	r2, [r4, #12]
1000a862:	17d9      	asrs	r1, r3, #31
1000a864:	68e3      	ldr	r3, [r4, #12]
1000a866:	68a0      	ldr	r0, [r4, #8]
1000a868:	17db      	asrs	r3, r3, #31
1000a86a:	47a8      	blx	r5
1000a86c:	6863      	ldr	r3, [r4, #4]
1000a86e:	00c9      	lsls	r1, r1, #3
1000a870:	0f47      	lsrs	r7, r0, #29
1000a872:	430f      	orrs	r7, r1
1000a874:	17d9      	asrs	r1, r3, #31
1000a876:	6823      	ldr	r3, [r4, #0]
1000a878:	6822      	ldr	r2, [r4, #0]
1000a87a:	6860      	ldr	r0, [r4, #4]
1000a87c:	17db      	asrs	r3, r3, #31
1000a87e:	47a8      	blx	r5
1000a880:	00c9      	lsls	r1, r1, #3
1000a882:	0f40      	lsrs	r0, r0, #29
1000a884:	4308      	orrs	r0, r1
1000a886:	1a3f      	subs	r7, r7, r0
1000a888:	6177      	str	r7, [r6, #20]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1000a88a:	6863      	ldr	r3, [r4, #4]
1000a88c:	68e2      	ldr	r2, [r4, #12]
1000a88e:	17d9      	asrs	r1, r3, #31
1000a890:	68e3      	ldr	r3, [r4, #12]
1000a892:	6860      	ldr	r0, [r4, #4]
1000a894:	17db      	asrs	r3, r3, #31
1000a896:	47a8      	blx	r5
1000a898:	68a3      	ldr	r3, [r4, #8]
1000a89a:	00c9      	lsls	r1, r1, #3
1000a89c:	0f47      	lsrs	r7, r0, #29
1000a89e:	430f      	orrs	r7, r1
1000a8a0:	17d9      	asrs	r1, r3, #31
1000a8a2:	6823      	ldr	r3, [r4, #0]
1000a8a4:	6822      	ldr	r2, [r4, #0]
1000a8a6:	68a0      	ldr	r0, [r4, #8]
1000a8a8:	17db      	asrs	r3, r3, #31
1000a8aa:	47a8      	blx	r5
1000a8ac:	00c9      	lsls	r1, r1, #3
1000a8ae:	0f40      	lsrs	r0, r0, #29
1000a8b0:	4308      	orrs	r0, r1
1000a8b2:	1a3f      	subs	r7, r7, r0
1000a8b4:	61b7      	str	r7, [r6, #24]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1000a8b6:	6823      	ldr	r3, [r4, #0]
1000a8b8:	6862      	ldr	r2, [r4, #4]
1000a8ba:	17d9      	asrs	r1, r3, #31
1000a8bc:	6863      	ldr	r3, [r4, #4]
1000a8be:	6820      	ldr	r0, [r4, #0]
1000a8c0:	17db      	asrs	r3, r3, #31
1000a8c2:	47a8      	blx	r5
1000a8c4:	68e3      	ldr	r3, [r4, #12]
1000a8c6:	00c9      	lsls	r1, r1, #3
1000a8c8:	0f47      	lsrs	r7, r0, #29
1000a8ca:	430f      	orrs	r7, r1
1000a8cc:	17d9      	asrs	r1, r3, #31
1000a8ce:	68a3      	ldr	r3, [r4, #8]
1000a8d0:	68a2      	ldr	r2, [r4, #8]
1000a8d2:	68e0      	ldr	r0, [r4, #12]
1000a8d4:	17db      	asrs	r3, r3, #31
1000a8d6:	47a8      	blx	r5
1000a8d8:	00c9      	lsls	r1, r1, #3
1000a8da:	0f40      	lsrs	r0, r0, #29
1000a8dc:	4308      	orrs	r0, r1
1000a8de:	1838      	adds	r0, r7, r0
1000a8e0:	61f0      	str	r0, [r6, #28]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a8e2:	6827      	ldr	r7, [r4, #0]
1000a8e4:	68e0      	ldr	r0, [r4, #12]
1000a8e6:	17fb      	asrs	r3, r7, #31
1000a8e8:	17c1      	asrs	r1, r0, #31
1000a8ea:	4698      	mov	r8, r3
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1000a8ec:	0002      	movs	r2, r0
1000a8ee:	000b      	movs	r3, r1
1000a8f0:	47a8      	blx	r5
1000a8f2:	00c9      	lsls	r1, r1, #3
1000a8f4:	0f44      	lsrs	r4, r0, #29
1000a8f6:	4643      	mov	r3, r8
1000a8f8:	430c      	orrs	r4, r1
1000a8fa:	003a      	movs	r2, r7
1000a8fc:	0038      	movs	r0, r7
1000a8fe:	4641      	mov	r1, r8
1000a900:	47a8      	blx	r5
1000a902:	23c0      	movs	r3, #192	; 0xc0
1000a904:	061b      	lsls	r3, r3, #24
1000a906:	469c      	mov	ip, r3
1000a908:	00c9      	lsls	r1, r1, #3
1000a90a:	0f40      	lsrs	r0, r0, #29
1000a90c:	4308      	orrs	r0, r1
1000a90e:	1820      	adds	r0, r4, r0
1000a910:	4460      	add	r0, ip
1000a912:	6230      	str	r0, [r6, #32]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1000a914:	bc0c      	pop	{r2, r3}
1000a916:	4690      	mov	r8, r2
1000a918:	4699      	mov	r9, r3
1000a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a91c:	100151d9 	.word	0x100151d9

1000a920 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000a922:	4f07      	ldr	r7, [pc, #28]	; (1000a940 <inv_orientation_matrix_to_scalar+0x20>)
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000a924:	0005      	movs	r5, r0
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000a926:	47b8      	blx	r7
1000a928:	0004      	movs	r4, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1000a92a:	1ce8      	adds	r0, r5, #3
1000a92c:	47b8      	blx	r7
1000a92e:	0006      	movs	r6, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1000a930:	1da8      	adds	r0, r5, #6
1000a932:	47b8      	blx	r7
1000a934:	00f6      	lsls	r6, r6, #3
1000a936:	0180      	lsls	r0, r0, #6
1000a938:	4330      	orrs	r0, r6
1000a93a:	4304      	orrs	r4, r0


    return scalar;
1000a93c:	b2a0      	uxth	r0, r4
}
1000a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a940:	1000a059 	.word	0x1000a059

1000a944 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a946:	465f      	mov	r7, fp
1000a948:	4656      	mov	r6, sl
1000a94a:	464d      	mov	r5, r9
1000a94c:	4644      	mov	r4, r8
1000a94e:	b4f0      	push	{r4, r5, r6, r7}
1000a950:	001f      	movs	r7, r3
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a952:	2303      	movs	r3, #3
1000a954:	2501      	movs	r5, #1
1000a956:	469b      	mov	fp, r3
1000a958:	4003      	ands	r3, r0
1000a95a:	009b      	lsls	r3, r3, #2
1000a95c:	589b      	ldr	r3, [r3, r2]
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a95e:	4692      	mov	sl, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a960:	17ca      	asrs	r2, r1, #31
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a962:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a964:	4691      	mov	r9, r2
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a966:	0004      	movs	r4, r0
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a968:	0740      	lsls	r0, r0, #29
1000a96a:	17c0      	asrs	r0, r0, #31
1000a96c:	4328      	orrs	r0, r5
1000a96e:	4358      	muls	r0, r3
1000a970:	4b19      	ldr	r3, [pc, #100]	; (1000a9d8 <inv_convert_to_body_with_scale+0x94>)
1000a972:	0032      	movs	r2, r6
1000a974:	4698      	mov	r8, r3
1000a976:	17c1      	asrs	r1, r0, #31
1000a978:	464b      	mov	r3, r9
1000a97a:	47c0      	blx	r8
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a97c:	465a      	mov	r2, fp
1000a97e:	08e3      	lsrs	r3, r4, #3
1000a980:	4013      	ands	r3, r2
1000a982:	4652      	mov	r2, sl
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a984:	0089      	lsls	r1, r1, #2
1000a986:	0f80      	lsrs	r0, r0, #30
1000a988:	4308      	orrs	r0, r1
1000a98a:	6038      	str	r0, [r7, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a98c:	009b      	lsls	r3, r3, #2
1000a98e:	06a0      	lsls	r0, r4, #26
1000a990:	589b      	ldr	r3, [r3, r2]
1000a992:	17c0      	asrs	r0, r0, #31
1000a994:	4328      	orrs	r0, r5
1000a996:	4358      	muls	r0, r3
1000a998:	0032      	movs	r2, r6
1000a99a:	464b      	mov	r3, r9
1000a99c:	17c1      	asrs	r1, r0, #31
1000a99e:	47c0      	blx	r8
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000a9a0:	465a      	mov	r2, fp
1000a9a2:	09a3      	lsrs	r3, r4, #6
1000a9a4:	4013      	ands	r3, r2
1000a9a6:	4652      	mov	r2, sl
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a9a8:	0089      	lsls	r1, r1, #2
1000a9aa:	0f80      	lsrs	r0, r0, #30
1000a9ac:	4308      	orrs	r0, r1
1000a9ae:	6078      	str	r0, [r7, #4]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000a9b0:	009b      	lsls	r3, r3, #2
1000a9b2:	05e4      	lsls	r4, r4, #23
1000a9b4:	5898      	ldr	r0, [r3, r2]
1000a9b6:	17e4      	asrs	r4, r4, #31
1000a9b8:	432c      	orrs	r4, r5
1000a9ba:	4360      	muls	r0, r4
1000a9bc:	0032      	movs	r2, r6
1000a9be:	464b      	mov	r3, r9
1000a9c0:	17c1      	asrs	r1, r0, #31
1000a9c2:	47c0      	blx	r8
1000a9c4:	0089      	lsls	r1, r1, #2
1000a9c6:	0f80      	lsrs	r0, r0, #30
1000a9c8:	4308      	orrs	r0, r1
1000a9ca:	60b8      	str	r0, [r7, #8]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1000a9cc:	bc3c      	pop	{r2, r3, r4, r5}
1000a9ce:	4690      	mov	r8, r2
1000a9d0:	4699      	mov	r9, r3
1000a9d2:	46a2      	mov	sl, r4
1000a9d4:	46ab      	mov	fp, r5
1000a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a9d8:	100151d9 	.word	0x100151d9

1000a9dc <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1000a9dc:	b510      	push	{r4, lr}
    inv_init_storage_manager();
1000a9de:	4b08      	ldr	r3, [pc, #32]	; (1000aa00 <inv_init_mpl+0x24>)
1000a9e0:	4798      	blx	r3

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1000a9e2:	4c08      	ldr	r4, [pc, #32]	; (1000aa04 <inv_init_mpl+0x28>)
1000a9e4:	47a0      	blx	r4
1000a9e6:	2800      	cmp	r0, #0
1000a9e8:	d107      	bne.n	1000a9fa <inv_init_mpl+0x1e>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1000a9ea:	4c07      	ldr	r4, [pc, #28]	; (1000aa08 <inv_init_mpl+0x2c>)
1000a9ec:	47a0      	blx	r4
1000a9ee:	2800      	cmp	r0, #0
1000a9f0:	d103      	bne.n	1000a9fa <inv_init_mpl+0x1e>

    INV_ERROR_CHECK(inv_enable_results_holder());
1000a9f2:	4c06      	ldr	r4, [pc, #24]	; (1000aa0c <inv_init_mpl+0x30>)
1000a9f4:	47a0      	blx	r4
1000a9f6:	2800      	cmp	r0, #0
1000a9f8:	d001      	beq.n	1000a9fe <inv_init_mpl+0x22>
1000a9fa:	47a0      	blx	r4
1000a9fc:	47a0      	blx	r4

    return INV_SUCCESS;
}
1000a9fe:	bd10      	pop	{r4, pc}
1000aa00:	1000ad35 	.word	0x1000ad35
1000aa04:	1000ac69 	.word	0x1000ac69
1000aa08:	10009ff9 	.word	0x10009ff9
1000aa0c:	1000ac19 	.word	0x1000ac19

1000aa10 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1000aa10:	b510      	push	{r4, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1000aa12:	4c03      	ldr	r4, [pc, #12]	; (1000aa20 <inv_start_mpl+0x10>)
1000aa14:	47a0      	blx	r4
1000aa16:	2800      	cmp	r0, #0
1000aa18:	d001      	beq.n	1000aa1e <inv_start_mpl+0xe>
1000aa1a:	47a0      	blx	r4
1000aa1c:	47a0      	blx	r4
    return INV_SUCCESS;
}
1000aa1e:	bd10      	pop	{r4, pc}
1000aa20:	1000ad01 	.word	0x1000ad01

1000aa24 <inv_generate_results>:
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
    rh.sensor = sensor_cal;
1000aa24:	2380      	movs	r3, #128	; 0x80
1000aa26:	4a02      	ldr	r2, [pc, #8]	; (1000aa30 <inv_generate_results+0xc>)
1000aa28:	50d0      	str	r0, [r2, r3]
    return INV_SUCCESS;
}
1000aa2a:	2000      	movs	r0, #0
1000aa2c:	4770      	bx	lr
1000aa2e:	46c0      	nop			; (mov r8, r8)
1000aa30:	1001b778 	.word	0x1001b778

1000aa34 <inv_start_results_holder>:
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000aa34:	21c8      	movs	r1, #200	; 0xc8
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1000aa36:	b510      	push	{r4, lr}
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000aa38:	2207      	movs	r2, #7
1000aa3a:	0089      	lsls	r1, r1, #2
1000aa3c:	4802      	ldr	r0, [pc, #8]	; (1000aa48 <inv_start_results_holder+0x14>)
1000aa3e:	4b03      	ldr	r3, [pc, #12]	; (1000aa4c <inv_start_results_holder+0x18>)
1000aa40:	4798      	blx	r3
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
}
1000aa42:	2000      	movs	r0, #0
1000aa44:	bd10      	pop	{r4, pc}
1000aa46:	46c0      	nop			; (mov r8, r8)
1000aa48:	1000aa25 	.word	0x1000aa25
1000aa4c:	10009ded 	.word	0x10009ded

1000aa50 <inv_store_gaming_quaternion>:
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000aa50:	2302      	movs	r3, #2
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000aa52:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_6_AXIS_QUAT_SET;
1000aa54:	4c06      	ldr	r4, [pc, #24]	; (1000aa70 <inv_store_gaming_quaternion+0x20>)
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000aa56:	000d      	movs	r5, r1
    rh.status |= INV_6_AXIS_QUAT_SET;
1000aa58:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000aa5a:	0001      	movs	r1, r0
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000aa5c:	4313      	orrs	r3, r2
1000aa5e:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000aa60:	0023      	movs	r3, r4
1000aa62:	3310      	adds	r3, #16
1000aa64:	2210      	movs	r2, #16
1000aa66:	0018      	movs	r0, r3
1000aa68:	4b02      	ldr	r3, [pc, #8]	; (1000aa74 <inv_store_gaming_quaternion+0x24>)
1000aa6a:	4798      	blx	r3
    rh.gam_timestamp = timestamp;
1000aa6c:	6265      	str	r5, [r4, #36]	; 0x24
}
1000aa6e:	bd70      	pop	{r4, r5, r6, pc}
1000aa70:	1001b778 	.word	0x1001b778
1000aa74:	100180cf 	.word	0x100180cf

1000aa78 <inv_set_compass_correction>:
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000aa78:	2301      	movs	r3, #1
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000aa7a:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000aa7c:	4c06      	ldr	r4, [pc, #24]	; (1000aa98 <inv_set_compass_correction+0x20>)
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000aa7e:	000d      	movs	r5, r1
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000aa80:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000aa82:	0001      	movs	r1, r0
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000aa84:	4313      	orrs	r3, r2
1000aa86:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000aa88:	0023      	movs	r3, r4
1000aa8a:	3340      	adds	r3, #64	; 0x40
1000aa8c:	2210      	movs	r2, #16
1000aa8e:	0018      	movs	r0, r3
1000aa90:	4b02      	ldr	r3, [pc, #8]	; (1000aa9c <inv_set_compass_correction+0x24>)
1000aa92:	4798      	blx	r3
    rh.nav_timestamp = timestamp;
1000aa94:	6225      	str	r5, [r4, #32]
}
1000aa96:	bd70      	pop	{r4, r5, r6, pc}
1000aa98:	1001b778 	.word	0x1001b778
1000aa9c:	100180cf 	.word	0x100180cf

1000aaa0 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000aaa0:	b570      	push	{r4, r5, r6, lr}
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000aaa2:	4c05      	ldr	r4, [pc, #20]	; (1000aab8 <inv_get_compass_correction+0x18>)
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000aaa4:	000d      	movs	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000aaa6:	0021      	movs	r1, r4
1000aaa8:	2210      	movs	r2, #16
1000aaaa:	3140      	adds	r1, #64	; 0x40
1000aaac:	4b03      	ldr	r3, [pc, #12]	; (1000aabc <inv_get_compass_correction+0x1c>)
1000aaae:	4798      	blx	r3
    *timestamp = rh.nav_timestamp;
1000aab0:	6a23      	ldr	r3, [r4, #32]
1000aab2:	602b      	str	r3, [r5, #0]
}
1000aab4:	bd70      	pop	{r4, r5, r6, pc}
1000aab6:	46c0      	nop			; (mov r8, r8)
1000aab8:	1001b778 	.word	0x1001b778
1000aabc:	100180cf 	.word	0x100180cf

1000aac0 <inv_get_acc_state>:
/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
    return rh.acc_state;
1000aac0:	4b01      	ldr	r3, [pc, #4]	; (1000aac8 <inv_get_acc_state+0x8>)
1000aac2:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
1000aac4:	4770      	bx	lr
1000aac6:	46c0      	nop			; (mov r8, r8)
1000aac8:	1001b778 	.word	0x1001b778

1000aacc <inv_get_motion_state>:
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
    *cntr = rh.motion_state_counter;
1000aacc:	4b02      	ldr	r3, [pc, #8]	; (1000aad8 <inv_get_motion_state+0xc>)
1000aace:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000aad0:	6002      	str	r2, [r0, #0]
    return rh.motion_state;
1000aad2:	2264      	movs	r2, #100	; 0x64
1000aad4:	5c98      	ldrb	r0, [r3, r2]
}
1000aad6:	4770      	bx	lr
1000aad8:	1001b778 	.word	0x1001b778

1000aadc <inv_set_motion_state>:
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
1000aadc:	2264      	movs	r2, #100	; 0x64
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1000aade:	b510      	push	{r4, lr}
    long set;
    if (state == rh.motion_state) {
1000aae0:	4b0c      	ldr	r3, [pc, #48]	; (1000ab14 <inv_set_motion_state+0x38>)
1000aae2:	5c99      	ldrb	r1, [r3, r2]
1000aae4:	4281      	cmp	r1, r0
1000aae6:	d00c      	beq.n	1000ab02 <inv_set_motion_state+0x26>
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000aae8:	2100      	movs	r1, #0
    rh.motion_state = state;
1000aaea:	5498      	strb	r0, [r3, r2]
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000aaec:	3801      	subs	r0, #1
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000aaee:	6699      	str	r1, [r3, #104]	; 0x68
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000aaf0:	4243      	negs	r3, r0
1000aaf2:	4143      	adcs	r3, r0
1000aaf4:	2002      	movs	r0, #2
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000aaf6:	2200      	movs	r2, #0
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000aaf8:	1ac0      	subs	r0, r0, r3
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000aafa:	3103      	adds	r1, #3
1000aafc:	4b06      	ldr	r3, [pc, #24]	; (1000ab18 <inv_set_motion_state+0x3c>)
1000aafe:	4798      	blx	r3
}
1000ab00:	bd10      	pop	{r4, pc}
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
1000ab02:	2902      	cmp	r1, #2
1000ab04:	d002      	beq.n	1000ab0c <inv_set_motion_state+0x30>
            rh.motion_state_counter++;
        } else {
            rh.motion_state_counter = 0;
1000ab06:	2200      	movs	r2, #0
1000ab08:	669a      	str	r2, [r3, #104]	; 0x68
1000ab0a:	e7f9      	b.n	1000ab00 <inv_set_motion_state+0x24>
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
            rh.motion_state_counter++;
1000ab0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000ab0e:	3201      	adds	r2, #1
1000ab10:	669a      	str	r2, [r3, #104]	; 0x68
1000ab12:	e7f5      	b.n	1000ab00 <inv_set_motion_state+0x24>
1000ab14:	1001b778 	.word	0x1001b778
1000ab18:	1000a045 	.word	0x1000a045

1000ab1c <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1000ab1c:	b510      	push	{r4, lr}
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1000ab1e:	4903      	ldr	r1, [pc, #12]	; (1000ab2c <inv_get_local_field+0x10>)
1000ab20:	220c      	movs	r2, #12
1000ab22:	3128      	adds	r1, #40	; 0x28
1000ab24:	4b02      	ldr	r3, [pc, #8]	; (1000ab30 <inv_get_local_field+0x14>)
1000ab26:	4798      	blx	r3
}
1000ab28:	bd10      	pop	{r4, pc}
1000ab2a:	46c0      	nop			; (mov r8, r8)
1000ab2c:	1001b778 	.word	0x1001b778
1000ab30:	100180cf 	.word	0x100180cf

1000ab34 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000ab36:	4c12      	ldr	r4, [pc, #72]	; (1000ab80 <inv_get_gravity+0x4c>)
1000ab38:	4d12      	ldr	r5, [pc, #72]	; (1000ab84 <inv_get_gravity+0x50>)
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000ab3a:	0006      	movs	r6, r0
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000ab3c:	68e1      	ldr	r1, [r4, #12]
1000ab3e:	6860      	ldr	r0, [r4, #4]
1000ab40:	47a8      	blx	r5
1000ab42:	6821      	ldr	r1, [r4, #0]
1000ab44:	0007      	movs	r7, r0
1000ab46:	68a0      	ldr	r0, [r4, #8]
1000ab48:	47a8      	blx	r5
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1000ab4a:	1a3f      	subs	r7, r7, r0
1000ab4c:	6037      	str	r7, [r6, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1000ab4e:	68e1      	ldr	r1, [r4, #12]
1000ab50:	68a0      	ldr	r0, [r4, #8]
1000ab52:	47a8      	blx	r5
1000ab54:	6821      	ldr	r1, [r4, #0]
1000ab56:	0007      	movs	r7, r0
1000ab58:	6860      	ldr	r0, [r4, #4]
1000ab5a:	47a8      	blx	r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1000ab5c:	1838      	adds	r0, r7, r0
1000ab5e:	6070      	str	r0, [r6, #4]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1000ab60:	68e1      	ldr	r1, [r4, #12]
1000ab62:	0008      	movs	r0, r1
1000ab64:	47a8      	blx	r5
1000ab66:	0007      	movs	r7, r0
1000ab68:	6820      	ldr	r0, [r4, #0]
1000ab6a:	0001      	movs	r1, r0
1000ab6c:	47a8      	blx	r5
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1000ab6e:	23c0      	movs	r3, #192	; 0xc0
1000ab70:	061b      	lsls	r3, r3, #24
1000ab72:	469c      	mov	ip, r3
1000ab74:	1838      	adds	r0, r7, r0
1000ab76:	4460      	add	r0, ip
1000ab78:	60b0      	str	r0, [r6, #8]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
}
1000ab7a:	2000      	movs	r0, #0
1000ab7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ab7e:	46c0      	nop			; (mov r8, r8)
1000ab80:	1001b778 	.word	0x1001b778
1000ab84:	1000a0a9 	.word	0x1000a0a9

1000ab88 <inv_get_linear_accel.part.0>:
 *  @param[out] data    3-element vector of accelerometer data in body frame
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
1000ab88:	b510      	push	{r4, lr}
1000ab8a:	0004      	movs	r4, r0
1000ab8c:	b086      	sub	sp, #24
{
    long gravity[3];

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
1000ab8e:	2200      	movs	r2, #0
1000ab90:	2100      	movs	r1, #0
1000ab92:	4b0c      	ldr	r3, [pc, #48]	; (1000abc4 <inv_get_linear_accel.part.0+0x3c>)
1000ab94:	4798      	blx	r3
        inv_get_gravity(gravity);
1000ab96:	a803      	add	r0, sp, #12
1000ab98:	4b0b      	ldr	r3, [pc, #44]	; (1000abc8 <inv_get_linear_accel.part.0+0x40>)
1000ab9a:	4798      	blx	r3
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000ab9c:	2000      	movs	r0, #0

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
        inv_get_gravity(gravity);
        data[0] -= gravity[0] >> 14;
1000ab9e:	9b03      	ldr	r3, [sp, #12]
1000aba0:	6822      	ldr	r2, [r4, #0]
1000aba2:	139b      	asrs	r3, r3, #14
1000aba4:	1ad3      	subs	r3, r2, r3
1000aba6:	6023      	str	r3, [r4, #0]
        data[1] -= gravity[1] >> 14;
1000aba8:	9b04      	ldr	r3, [sp, #16]
1000abaa:	6862      	ldr	r2, [r4, #4]
1000abac:	9301      	str	r3, [sp, #4]
1000abae:	139b      	asrs	r3, r3, #14
1000abb0:	1ad3      	subs	r3, r2, r3
1000abb2:	6063      	str	r3, [r4, #4]
        data[2] -= gravity[2] >> 14;
1000abb4:	9b05      	ldr	r3, [sp, #20]
1000abb6:	68a2      	ldr	r2, [r4, #8]
1000abb8:	139b      	asrs	r3, r3, #14
1000abba:	1ad3      	subs	r3, r2, r3
1000abbc:	60a3      	str	r3, [r4, #8]
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000abbe:	b006      	add	sp, #24
1000abc0:	bd10      	pop	{r4, pc}
1000abc2:	46c0      	nop			; (mov r8, r8)
1000abc4:	10009f4d 	.word	0x10009f4d
1000abc8:	1000ab35 	.word	0x1000ab35

1000abcc <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1000abcc:	b510      	push	{r4, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1000abce:	4903      	ldr	r1, [pc, #12]	; (1000abdc <inv_get_6axis_quaternion+0x10>)
1000abd0:	2210      	movs	r2, #16
1000abd2:	3110      	adds	r1, #16
1000abd4:	4b02      	ldr	r3, [pc, #8]	; (1000abe0 <inv_get_6axis_quaternion+0x14>)
1000abd6:	4798      	blx	r3
    return INV_SUCCESS;
}
1000abd8:	2000      	movs	r0, #0
1000abda:	bd10      	pop	{r4, pc}
1000abdc:	1001b778 	.word	0x1001b778
1000abe0:	100180cf 	.word	0x100180cf

1000abe4 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1000abe4:	b510      	push	{r4, lr}
    memset(&rh, 0, sizeof(rh));
1000abe6:	4c09      	ldr	r4, [pc, #36]	; (1000ac0c <inv_init_results_holder+0x28>)
1000abe8:	2288      	movs	r2, #136	; 0x88
1000abea:	2100      	movs	r1, #0
1000abec:	0020      	movs	r0, r4
1000abee:	4b08      	ldr	r3, [pc, #32]	; (1000ac10 <inv_init_results_holder+0x2c>)
1000abf0:	4798      	blx	r3
    rh.mag_scale[0] = 1L<<30;
1000abf2:	2380      	movs	r3, #128	; 0x80
1000abf4:	05db      	lsls	r3, r3, #23
1000abf6:	6363      	str	r3, [r4, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1000abf8:	63a3      	str	r3, [r4, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1000abfa:	63e3      	str	r3, [r4, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1000abfc:	6423      	str	r3, [r4, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1000abfe:	6123      	str	r3, [r4, #16]
    rh.nav_quat[0] = 1L<<30;
1000ac00:	6023      	str	r3, [r4, #0]
    rh.quat_confidence_interval = (float)M_PI;
1000ac02:	2384      	movs	r3, #132	; 0x84
1000ac04:	4a03      	ldr	r2, [pc, #12]	; (1000ac14 <inv_init_results_holder+0x30>)
    return INV_SUCCESS;
}
1000ac06:	2000      	movs	r0, #0
    rh.mag_scale[1] = 1L<<30;
    rh.mag_scale[2] = 1L<<30;
    rh.compass_correction[0] = 1L<<30;
    rh.gam_quat[0] = 1L<<30;
    rh.nav_quat[0] = 1L<<30;
    rh.quat_confidence_interval = (float)M_PI;
1000ac08:	50e2      	str	r2, [r4, r3]
    return INV_SUCCESS;
}
1000ac0a:	bd10      	pop	{r4, pc}
1000ac0c:	1001b778 	.word	0x1001b778
1000ac10:	1001810b 	.word	0x1001810b
1000ac14:	40490fdb 	.word	0x40490fdb

1000ac18 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1000ac18:	b510      	push	{r4, lr}
    inv_error_t result;
    result = inv_init_results_holder();
1000ac1a:	4b04      	ldr	r3, [pc, #16]	; (1000ac2c <inv_enable_results_holder+0x14>)
1000ac1c:	4798      	blx	r3
    if ( result ) {
1000ac1e:	2800      	cmp	r0, #0
1000ac20:	d102      	bne.n	1000ac28 <inv_enable_results_holder+0x10>
        return result;
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1000ac22:	4803      	ldr	r0, [pc, #12]	; (1000ac30 <inv_enable_results_holder+0x18>)
1000ac24:	4b03      	ldr	r3, [pc, #12]	; (1000ac34 <inv_enable_results_holder+0x1c>)
1000ac26:	4798      	blx	r3
    return result;
}
1000ac28:	bd10      	pop	{r4, pc}
1000ac2a:	46c0      	nop			; (mov r8, r8)
1000ac2c:	1000abe5 	.word	0x1000abe5
1000ac30:	1000aa35 	.word	0x1000aa35
1000ac34:	1000ace1 	.word	0x1000ace1

1000ac38 <inv_got_compass_bias>:
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
    return rh.got_compass_bias;
1000ac38:	4b01      	ldr	r3, [pc, #4]	; (1000ac40 <inv_got_compass_bias+0x8>)
1000ac3a:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000ac3c:	4770      	bx	lr
1000ac3e:	46c0      	nop			; (mov r8, r8)
1000ac40:	1001b778 	.word	0x1001b778

1000ac44 <inv_set_compass_bias_found>:
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
    rh.got_compass_bias = state;
1000ac44:	4b01      	ldr	r3, [pc, #4]	; (1000ac4c <inv_set_compass_bias_found+0x8>)
1000ac46:	6718      	str	r0, [r3, #112]	; 0x70
}
1000ac48:	4770      	bx	lr
1000ac4a:	46c0      	nop			; (mov r8, r8)
1000ac4c:	1001b778 	.word	0x1001b778

1000ac50 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1000ac50:	b510      	push	{r4, lr}
        data[1] -= gravity[1] >> 14;
        data[2] -= gravity[2] >> 14;
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1000ac52:	2316      	movs	r3, #22
 */
inv_error_t inv_get_linear_accel(long *data)
{
    long gravity[3];

    if (data != NULL)
1000ac54:	2800      	cmp	r0, #0
1000ac56:	d002      	beq.n	1000ac5e <inv_get_linear_accel+0xe>
1000ac58:	4b02      	ldr	r3, [pc, #8]	; (1000ac64 <inv_get_linear_accel+0x14>)
1000ac5a:	4798      	blx	r3
1000ac5c:	0003      	movs	r3, r0
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000ac5e:	0018      	movs	r0, r3
1000ac60:	bd10      	pop	{r4, pc}
1000ac62:	46c0      	nop			; (mov r8, r8)
1000ac64:	1000ab89 	.word	0x1000ab89

1000ac68 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1000ac68:	b510      	push	{r4, lr}
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1000ac6a:	2254      	movs	r2, #84	; 0x54
1000ac6c:	2100      	movs	r1, #0
1000ac6e:	4802      	ldr	r0, [pc, #8]	; (1000ac78 <inv_init_start_manager+0x10>)
1000ac70:	4b02      	ldr	r3, [pc, #8]	; (1000ac7c <inv_init_start_manager+0x14>)
1000ac72:	4798      	blx	r3
    return INV_SUCCESS;
}
1000ac74:	2000      	movs	r0, #0
1000ac76:	bd10      	pop	{r4, pc}
1000ac78:	1001b800 	.word	0x1001b800
1000ac7c:	1001810b 	.word	0x1001810b

1000ac80 <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1000ac80:	b570      	push	{r4, r5, r6, lr}
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000ac82:	4d15      	ldr	r5, [pc, #84]	; (1000acd8 <inv_unregister_mpl_start_notification+0x58>)
1000ac84:	682c      	ldr	r4, [r5, #0]
1000ac86:	2c00      	cmp	r4, #0
1000ac88:	dd0e      	ble.n	1000aca8 <inv_unregister_mpl_start_notification+0x28>
        if (inv_start_cb.start_cb[kk] == start_cb) {
1000ac8a:	686b      	ldr	r3, [r5, #4]
1000ac8c:	4298      	cmp	r0, r3
1000ac8e:	d00d      	beq.n	1000acac <inv_unregister_mpl_start_notification+0x2c>
1000ac90:	002a      	movs	r2, r5
1000ac92:	2300      	movs	r3, #0
1000ac94:	3208      	adds	r2, #8
1000ac96:	e004      	b.n	1000aca2 <inv_unregister_mpl_start_notification+0x22>
1000ac98:	3204      	adds	r2, #4
1000ac9a:	1f11      	subs	r1, r2, #4
1000ac9c:	6809      	ldr	r1, [r1, #0]
1000ac9e:	4281      	cmp	r1, r0
1000aca0:	d005      	beq.n	1000acae <inv_unregister_mpl_start_notification+0x2e>
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000aca2:	3301      	adds	r3, #1
1000aca4:	42a3      	cmp	r3, r4
1000aca6:	d1f7      	bne.n	1000ac98 <inv_unregister_mpl_start_notification+0x18>
            }
            inv_start_cb.num_cb--;
            return INV_SUCCESS;
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
1000aca8:	2016      	movs	r0, #22
}
1000acaa:	bd70      	pop	{r4, r5, r6, pc}
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000acac:	2300      	movs	r3, #0
        if (inv_start_cb.start_cb[kk] == start_cb) {
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
1000acae:	1e62      	subs	r2, r4, #1
1000acb0:	429a      	cmp	r2, r3
1000acb2:	d00d      	beq.n	1000acd0 <inv_unregister_mpl_start_notification+0x50>
                memmove(&inv_start_cb.start_cb[kk],
1000acb4:	1c59      	adds	r1, r3, #1
1000acb6:	1ae2      	subs	r2, r4, r3
1000acb8:	0089      	lsls	r1, r1, #2
1000acba:	009b      	lsls	r3, r3, #2
1000acbc:	18eb      	adds	r3, r5, r3
1000acbe:	3a01      	subs	r2, #1
1000acc0:	1869      	adds	r1, r5, r1
1000acc2:	0092      	lsls	r2, r2, #2
1000acc4:	1d18      	adds	r0, r3, #4
1000acc6:	3104      	adds	r1, #4
1000acc8:	4b04      	ldr	r3, [pc, #16]	; (1000acdc <inv_unregister_mpl_start_notification+0x5c>)
1000acca:	4798      	blx	r3
1000accc:	682b      	ldr	r3, [r5, #0]
1000acce:	1e5a      	subs	r2, r3, #1
                    &inv_start_cb.start_cb[kk+1],
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
            }
            inv_start_cb.num_cb--;
1000acd0:	602a      	str	r2, [r5, #0]
            return INV_SUCCESS;
1000acd2:	2000      	movs	r0, #0
1000acd4:	e7e9      	b.n	1000acaa <inv_unregister_mpl_start_notification+0x2a>
1000acd6:	46c0      	nop			; (mov r8, r8)
1000acd8:	1001b800 	.word	0x1001b800
1000acdc:	100180e1 	.word	0x100180e1

1000ace0 <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000ace0:	4a06      	ldr	r2, [pc, #24]	; (1000acfc <inv_register_mpl_start_notification+0x1c>)
        return INV_ERROR_INVALID_PARAMETER;
1000ace2:	2116      	movs	r1, #22
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000ace4:	6813      	ldr	r3, [r2, #0]
1000ace6:	2b13      	cmp	r3, #19
1000ace8:	dd01      	ble.n	1000acee <inv_register_mpl_start_notification+0xe>
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
    inv_start_cb.num_cb++;
    return INV_SUCCESS;
}
1000acea:	0008      	movs	r0, r1
1000acec:	4770      	bx	lr
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000acee:	0099      	lsls	r1, r3, #2
1000acf0:	1851      	adds	r1, r2, r1
    inv_start_cb.num_cb++;
1000acf2:	3301      	adds	r3, #1
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000acf4:	6048      	str	r0, [r1, #4]
    inv_start_cb.num_cb++;
1000acf6:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1000acf8:	2100      	movs	r1, #0
1000acfa:	e7f6      	b.n	1000acea <inv_register_mpl_start_notification+0xa>
1000acfc:	1001b800 	.word	0x1001b800

1000ad00 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1000ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000ad02:	4e0b      	ldr	r6, [pc, #44]	; (1000ad30 <inv_execute_mpl_start_notification+0x30>)
1000ad04:	6833      	ldr	r3, [r6, #0]
1000ad06:	2b00      	cmp	r3, #0
1000ad08:	dd10      	ble.n	1000ad2c <inv_execute_mpl_start_notification+0x2c>
1000ad0a:	2400      	movs	r4, #0
1000ad0c:	2700      	movs	r7, #0
1000ad0e:	1d35      	adds	r5, r6, #4
        result = inv_start_cb.start_cb[kk]();
1000ad10:	682b      	ldr	r3, [r5, #0]
1000ad12:	4798      	blx	r3
        if (result && (first_error == INV_SUCCESS)) {
1000ad14:	2800      	cmp	r0, #0
1000ad16:	d002      	beq.n	1000ad1e <inv_execute_mpl_start_notification+0x1e>
1000ad18:	2f00      	cmp	r7, #0
1000ad1a:	d100      	bne.n	1000ad1e <inv_execute_mpl_start_notification+0x1e>
1000ad1c:	0007      	movs	r7, r0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000ad1e:	6833      	ldr	r3, [r6, #0]
1000ad20:	3401      	adds	r4, #1
1000ad22:	3504      	adds	r5, #4
1000ad24:	42a3      	cmp	r3, r4
1000ad26:	dcf3      	bgt.n	1000ad10 <inv_execute_mpl_start_notification+0x10>
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
}
1000ad28:	0038      	movs	r0, r7
1000ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inv_error_t inv_execute_mpl_start_notification(void)
{
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1000ad2c:	2700      	movs	r7, #0
1000ad2e:	e7fb      	b.n	1000ad28 <inv_execute_mpl_start_notification+0x28>
1000ad30:	1001b800 	.word	0x1001b800

1000ad34 <inv_init_storage_manager>:

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
    memset(&ds, 0, sizeof(ds));
1000ad34:	22cc      	movs	r2, #204	; 0xcc
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1000ad36:	b510      	push	{r4, lr}
    memset(&ds, 0, sizeof(ds));
1000ad38:	4c04      	ldr	r4, [pc, #16]	; (1000ad4c <inv_init_storage_manager+0x18>)
1000ad3a:	0052      	lsls	r2, r2, #1
1000ad3c:	2100      	movs	r1, #0
1000ad3e:	0020      	movs	r0, r4
1000ad40:	4b03      	ldr	r3, [pc, #12]	; (1000ad50 <inv_init_storage_manager+0x1c>)
1000ad42:	4798      	blx	r3
    ds.total_size = sizeof(struct data_header_t);
1000ad44:	230c      	movs	r3, #12
1000ad46:	6063      	str	r3, [r4, #4]
}
1000ad48:	bd10      	pop	{r4, pc}
1000ad4a:	46c0      	nop			; (mov r8, r8)
1000ad4c:	1001b854 	.word	0x1001b854
1000ad50:	1001810b 	.word	0x1001810b

1000ad54 <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad56:	4647      	mov	r7, r8
1000ad58:	b480      	push	{r7}
1000ad5a:	4688      	mov	r8, r1
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000ad5c:	491b      	ldr	r1, [pc, #108]	; (1000adcc <inv_register_load_store+0x78>)
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000ad5e:	4684      	mov	ip, r0
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000ad60:	680f      	ldr	r7, [r1, #0]
1000ad62:	2f00      	cmp	r7, #0
1000ad64:	dd18      	ble.n	1000ad98 <inv_register_load_store+0x44>
        if (key == ds.hd[kk].key) {
1000ad66:	20b0      	movs	r0, #176	; 0xb0
1000ad68:	580c      	ldr	r4, [r1, r0]
1000ad6a:	42a3      	cmp	r3, r4
1000ad6c:	d012      	beq.n	1000ad94 <inv_register_load_store+0x40>
1000ad6e:	000d      	movs	r5, r1
1000ad70:	2400      	movs	r4, #0
1000ad72:	35bc      	adds	r5, #188	; 0xbc
1000ad74:	e005      	b.n	1000ad82 <inv_register_load_store+0x2e>
1000ad76:	350c      	adds	r5, #12
1000ad78:	002e      	movs	r6, r5
1000ad7a:	3e0c      	subs	r6, #12
1000ad7c:	6836      	ldr	r6, [r6, #0]
1000ad7e:	429e      	cmp	r6, r3
1000ad80:	d008      	beq.n	1000ad94 <inv_register_load_store+0x40>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000ad82:	3401      	adds	r4, #1
1000ad84:	42bc      	cmp	r4, r7
1000ad86:	d1f6      	bne.n	1000ad76 <inv_register_load_store+0x22>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000ad88:	2016      	movs	r0, #22
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1000ad8a:	2f13      	cmp	r7, #19
1000ad8c:	dd04      	ble.n	1000ad98 <inv_register_load_store+0x44>
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
    ds.num++;

    return INV_SUCCESS;
}
1000ad8e:	bc04      	pop	{r2}
1000ad90:	4690      	mov	r8, r2
1000ad92:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000ad94:	2016      	movs	r0, #22
1000ad96:	e7fa      	b.n	1000ad8e <inv_register_load_store+0x3a>
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000ad98:	0078      	lsls	r0, r7, #1
1000ad9a:	19c0      	adds	r0, r0, r7
1000ad9c:	0080      	lsls	r0, r0, #2
1000ad9e:	1808      	adds	r0, r1, r0
1000ada0:	0004      	movs	r4, r0
    ds.hd[ds.num].size = size;
1000ada2:	30a8      	adds	r0, #168	; 0xa8
1000ada4:	6002      	str	r2, [r0, #0]
    ds.load[ds.num] = load_func;
1000ada6:	4660      	mov	r0, ip
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000ada8:	34b0      	adds	r4, #176	; 0xb0
1000adaa:	6023      	str	r3, [r4, #0]
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
1000adac:	1cbb      	adds	r3, r7, #2
1000adae:	009b      	lsls	r3, r3, #2
1000adb0:	50c8      	str	r0, [r1, r3]
    ds.save[ds.num] = save_func;
1000adb2:	003b      	movs	r3, r7
1000adb4:	4640      	mov	r0, r8
1000adb6:	3316      	adds	r3, #22
1000adb8:	009b      	lsls	r3, r3, #2
1000adba:	50c8      	str	r0, [r1, r3]
    ds.total_size += size + sizeof(struct data_header_t);
1000adbc:	684b      	ldr	r3, [r1, #4]
    ds.num++;
1000adbe:	3701      	adds	r7, #1
    // Add to list
    ds.hd[ds.num].key = key;
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
1000adc0:	330c      	adds	r3, #12
1000adc2:	189a      	adds	r2, r3, r2
1000adc4:	604a      	str	r2, [r1, #4]
    ds.num++;
1000adc6:	600f      	str	r7, [r1, #0]

    return INV_SUCCESS;
1000adc8:	2000      	movs	r0, #0
1000adca:	e7e0      	b.n	1000ad8e <inv_register_load_store+0x3a>
1000adcc:	1001b854 	.word	0x1001b854

1000add0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000add0:	78c0      	ldrb	r0, [r0, #3]
1000add2:	2800      	cmp	r0, #0
1000add4:	d000      	beq.n	1000add8 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000add6:	20e2      	movs	r0, #226	; 0xe2
}
1000add8:	4770      	bx	lr
1000adda:	46c0      	nop			; (mov r8, r8)

1000addc <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000addc:	2000      	movs	r0, #0
1000adde:	4770      	bx	lr

1000ade0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000ade0:	229b      	movs	r2, #155	; 0x9b
1000ade2:	4b20      	ldr	r3, [pc, #128]	; (1000ae64 <ble_disconnected_state_handler+0x84>)
1000ade4:	0092      	lsls	r2, r2, #2
1000ade6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ade8:	0004      	movs	r4, r0
1000adea:	1898      	adds	r0, r3, r2
1000adec:	3a91      	subs	r2, #145	; 0x91
1000adee:	4647      	mov	r7, r8
1000adf0:	3aff      	subs	r2, #255	; 0xff
1000adf2:	4694      	mov	ip, r2
1000adf4:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000adf6:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000adf8:	2600      	movs	r6, #0
1000adfa:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000adfc:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
1000adfe:	4f1a      	ldr	r7, [pc, #104]	; (1000ae68 <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ae00:	001a      	movs	r2, r3
1000ae02:	3a56      	subs	r2, #86	; 0x56
1000ae04:	8811      	ldrh	r1, [r2, #0]
1000ae06:	8822      	ldrh	r2, [r4, #0]
1000ae08:	4291      	cmp	r1, r2
1000ae0a:	d00e      	beq.n	1000ae2a <ble_disconnected_state_handler+0x4a>
1000ae0c:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ae0e:	4283      	cmp	r3, r0
1000ae10:	d1f6      	bne.n	1000ae00 <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ae12:	4b16      	ldr	r3, [pc, #88]	; (1000ae6c <ble_disconnected_state_handler+0x8c>)
1000ae14:	4816      	ldr	r0, [pc, #88]	; (1000ae70 <ble_disconnected_state_handler+0x90>)
1000ae16:	4798      	blx	r3
1000ae18:	8822      	ldrh	r2, [r4, #0]
1000ae1a:	78a1      	ldrb	r1, [r4, #2]
1000ae1c:	4b15      	ldr	r3, [pc, #84]	; (1000ae74 <ble_disconnected_state_handler+0x94>)
1000ae1e:	4816      	ldr	r0, [pc, #88]	; (1000ae78 <ble_disconnected_state_handler+0x98>)
1000ae20:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000ae22:	2000      	movs	r0, #0
1000ae24:	bc04      	pop	{r2}
1000ae26:	4690      	mov	r8, r2
1000ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ae2a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ae2c:	2a05      	cmp	r2, #5
1000ae2e:	d00e      	beq.n	1000ae4e <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ae30:	2a08      	cmp	r2, #8
1000ae32:	d00c      	beq.n	1000ae4e <ble_disconnected_state_handler+0x6e>
1000ae34:	2a07      	cmp	r2, #7
1000ae36:	d808      	bhi.n	1000ae4a <ble_disconnected_state_handler+0x6a>
1000ae38:	0029      	movs	r1, r5
1000ae3a:	4091      	lsls	r1, r2
1000ae3c:	000a      	movs	r2, r1
1000ae3e:	4661      	mov	r1, ip
1000ae40:	4211      	tst	r1, r2
1000ae42:	d106      	bne.n	1000ae52 <ble_disconnected_state_handler+0x72>
1000ae44:	4641      	mov	r1, r8
1000ae46:	4211      	tst	r1, r2
1000ae48:	d1e0      	bne.n	1000ae0c <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ae4a:	701e      	strb	r6, [r3, #0]
				break;				
1000ae4c:	e7de      	b.n	1000ae0c <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ae4e:	701d      	strb	r5, [r3, #0]
1000ae50:	e7dc      	b.n	1000ae0c <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ae52:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000ae54:	783a      	ldrb	r2, [r7, #0]
1000ae56:	2a00      	cmp	r2, #0
1000ae58:	d0d8      	beq.n	1000ae0c <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
1000ae5a:	783a      	ldrb	r2, [r7, #0]
1000ae5c:	3a01      	subs	r2, #1
1000ae5e:	b2d2      	uxtb	r2, r2
1000ae60:	703a      	strb	r2, [r7, #0]
1000ae62:	e7d3      	b.n	1000ae0c <ble_disconnected_state_handler+0x2c>
1000ae64:	1001d366 	.word	0x1001d366
1000ae68:	1001d574 	.word	0x1001d574
1000ae6c:	10018375 	.word	0x10018375
1000ae70:	10019518 	.word	0x10019518
1000ae74:	10018255 	.word	0x10018255
1000ae78:	1001a4dc 	.word	0x1001a4dc

1000ae7c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae7e:	4647      	mov	r7, r8
1000ae80:	b480      	push	{r7}
1000ae82:	4f33      	ldr	r7, [pc, #204]	; (1000af50 <ble_pair_done_handler+0xd4>)
1000ae84:	0006      	movs	r6, r0
1000ae86:	003b      	movs	r3, r7
1000ae88:	2400      	movs	r4, #0
1000ae8a:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000ae8c:	891a      	ldrh	r2, [r3, #8]
1000ae8e:	42aa      	cmp	r2, r5
1000ae90:	d022      	beq.n	1000aed8 <ble_pair_done_handler+0x5c>
1000ae92:	3401      	adds	r4, #1
1000ae94:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ae96:	2c05      	cmp	r4, #5
1000ae98:	d1f8      	bne.n	1000ae8c <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000ae9a:	7933      	ldrb	r3, [r6, #4]
1000ae9c:	2b00      	cmp	r3, #0
1000ae9e:	d049      	beq.n	1000af34 <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000aea0:	4b2c      	ldr	r3, [pc, #176]	; (1000af54 <ble_pair_done_handler+0xd8>)
1000aea2:	5cfb      	ldrb	r3, [r7, r3]
1000aea4:	2b01      	cmp	r3, #1
1000aea6:	d912      	bls.n	1000aece <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
1000aea8:	4f2b      	ldr	r7, [pc, #172]	; (1000af58 <ble_pair_done_handler+0xdc>)
1000aeaa:	4d2c      	ldr	r5, [pc, #176]	; (1000af5c <ble_pair_done_handler+0xe0>)
1000aeac:	0038      	movs	r0, r7
1000aeae:	47a8      	blx	r5
1000aeb0:	482b      	ldr	r0, [pc, #172]	; (1000af60 <ble_pair_done_handler+0xe4>)
1000aeb2:	4c2c      	ldr	r4, [pc, #176]	; (1000af64 <ble_pair_done_handler+0xe8>)
1000aeb4:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000aeb6:	8870      	ldrh	r0, [r6, #2]
1000aeb8:	2113      	movs	r1, #19
1000aeba:	4b2b      	ldr	r3, [pc, #172]	; (1000af68 <ble_pair_done_handler+0xec>)
1000aebc:	4798      	blx	r3
1000aebe:	2800      	cmp	r0, #0
1000aec0:	d005      	beq.n	1000aece <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
1000aec2:	0038      	movs	r0, r7
1000aec4:	47a8      	blx	r5
1000aec6:	4829      	ldr	r0, [pc, #164]	; (1000af6c <ble_pair_done_handler+0xf0>)
1000aec8:	47a0      	blx	r4
				return AT_BLE_FAILURE;
1000aeca:	25e2      	movs	r5, #226	; 0xe2
1000aecc:	e000      	b.n	1000aed0 <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000aece:	2500      	movs	r5, #0
}
1000aed0:	0028      	movs	r0, r5
1000aed2:	bc04      	pop	{r2}
1000aed4:	4690      	mov	r8, r2
1000aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000aed8:	001a      	movs	r2, r3
1000aeda:	325e      	adds	r2, #94	; 0x5e
1000aedc:	7812      	ldrb	r2, [r2, #0]
1000aede:	2a03      	cmp	r2, #3
1000aee0:	d1d7      	bne.n	1000ae92 <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000aee2:	7935      	ldrb	r5, [r6, #4]
1000aee4:	2d00      	cmp	r5, #0
1000aee6:	d1df      	bne.n	1000aea8 <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000aee8:	4b1c      	ldr	r3, [pc, #112]	; (1000af5c <ble_pair_done_handler+0xe0>)
1000aeea:	481b      	ldr	r0, [pc, #108]	; (1000af58 <ble_pair_done_handler+0xdc>)
1000aeec:	4798      	blx	r3
1000aeee:	4b1d      	ldr	r3, [pc, #116]	; (1000af64 <ble_pair_done_handler+0xe8>)
1000aef0:	481f      	ldr	r0, [pc, #124]	; (1000af70 <ble_pair_done_handler+0xf4>)
1000aef2:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000aef4:	0163      	lsls	r3, r4, #5
1000aef6:	1b1c      	subs	r4, r3, r4
1000aef8:	7832      	ldrb	r2, [r6, #0]
1000aefa:	00a4      	lsls	r4, r4, #2
1000aefc:	193b      	adds	r3, r7, r4
1000aefe:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000af00:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000af02:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000af04:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000af06:	2205      	movs	r2, #5
1000af08:	335e      	adds	r3, #94	; 0x5e
1000af0a:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000af0c:	1938      	adds	r0, r7, r4
1000af0e:	4b19      	ldr	r3, [pc, #100]	; (1000af74 <ble_pair_done_handler+0xf8>)
1000af10:	3122      	adds	r1, #34	; 0x22
1000af12:	320b      	adds	r2, #11
1000af14:	3036      	adds	r0, #54	; 0x36
1000af16:	4698      	mov	r8, r3
1000af18:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000af1a:	0031      	movs	r1, r6
1000af1c:	1938      	adds	r0, r7, r4
1000af1e:	3132      	adds	r1, #50	; 0x32
1000af20:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000af22:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000af24:	3046      	adds	r0, #70	; 0x46
1000af26:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000af28:	0020      	movs	r0, r4
1000af2a:	1db1      	adds	r1, r6, #6
1000af2c:	221c      	movs	r2, #28
1000af2e:	301a      	adds	r0, #26
1000af30:	47c0      	blx	r8
1000af32:	e7cd      	b.n	1000aed0 <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000af34:	4e08      	ldr	r6, [pc, #32]	; (1000af58 <ble_pair_done_handler+0xdc>)
1000af36:	4d09      	ldr	r5, [pc, #36]	; (1000af5c <ble_pair_done_handler+0xe0>)
1000af38:	0030      	movs	r0, r6
1000af3a:	47a8      	blx	r5
1000af3c:	4c09      	ldr	r4, [pc, #36]	; (1000af64 <ble_pair_done_handler+0xe8>)
1000af3e:	480c      	ldr	r0, [pc, #48]	; (1000af70 <ble_pair_done_handler+0xf4>)
1000af40:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000af42:	0030      	movs	r0, r6
1000af44:	47a8      	blx	r5
1000af46:	480c      	ldr	r0, [pc, #48]	; (1000af78 <ble_pair_done_handler+0xfc>)
1000af48:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000af4a:	25e2      	movs	r5, #226	; 0xe2
1000af4c:	e7c0      	b.n	1000aed0 <ble_pair_done_handler+0x54>
1000af4e:	46c0      	nop			; (mov r8, r8)
1000af50:	1001d308 	.word	0x1001d308
1000af54:	000002ca 	.word	0x000002ca
1000af58:	10019518 	.word	0x10019518
1000af5c:	10018375 	.word	0x10018375
1000af60:	1001a50c 	.word	0x1001a50c
1000af64:	10018255 	.word	0x10018255
1000af68:	1000ebd9 	.word	0x1000ebd9
1000af6c:	1001a52c 	.word	0x1001a52c
1000af70:	1001a548 	.word	0x1001a548
1000af74:	100180cf 	.word	0x100180cf
1000af78:	1001a574 	.word	0x1001a574

1000af7c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000af7c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000af7e:	2378      	movs	r3, #120	; 0x78
1000af80:	2201      	movs	r2, #1
1000af82:	2101      	movs	r1, #1
1000af84:	4c02      	ldr	r4, [pc, #8]	; (1000af90 <ble_conn_param_update_req+0x14>)
1000af86:	8800      	ldrh	r0, [r0, #0]
1000af88:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000af8a:	2000      	movs	r0, #0
1000af8c:	bd10      	pop	{r4, pc}
1000af8e:	46c0      	nop			; (mov r8, r8)
1000af90:	1000ebf9 	.word	0x1000ebf9

1000af94 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000af94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af96:	4644      	mov	r4, r8
1000af98:	4656      	mov	r6, sl
1000af9a:	465f      	mov	r7, fp
1000af9c:	464d      	mov	r5, r9
1000af9e:	4682      	mov	sl, r0
1000afa0:	b4f0      	push	{r4, r5, r6, r7}
1000afa2:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000afa4:	ac03      	add	r4, sp, #12
1000afa6:	2209      	movs	r2, #9
1000afa8:	2100      	movs	r1, #0
1000afaa:	4b63      	ldr	r3, [pc, #396]	; (1000b138 <ble_slave_security_request_handler+0x1a4>)
1000afac:	0020      	movs	r0, r4
1000afae:	4798      	blx	r3
1000afb0:	4653      	mov	r3, sl
1000afb2:	8819      	ldrh	r1, [r3, #0]
1000afb4:	4b61      	ldr	r3, [pc, #388]	; (1000b13c <ble_slave_security_request_handler+0x1a8>)
1000afb6:	4698      	mov	r8, r3
1000afb8:	0018      	movs	r0, r3
1000afba:	001a      	movs	r2, r3
1000afbc:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000afbe:	8915      	ldrh	r5, [r2, #8]
1000afc0:	428d      	cmp	r5, r1
1000afc2:	d041      	beq.n	1000b048 <ble_slave_security_request_handler+0xb4>
1000afc4:	3301      	adds	r3, #1
1000afc6:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afc8:	2b05      	cmp	r3, #5
1000afca:	d1f8      	bne.n	1000afbe <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000afcc:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000afce:	8902      	ldrh	r2, [r0, #8]
1000afd0:	001f      	movs	r7, r3
1000afd2:	428a      	cmp	r2, r1
1000afd4:	d056      	beq.n	1000b084 <ble_slave_security_request_handler+0xf0>
1000afd6:	3301      	adds	r3, #1
1000afd8:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afda:	2b05      	cmp	r3, #5
1000afdc:	d1f7      	bne.n	1000afce <ble_slave_security_request_handler+0x3a>
1000afde:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000afe0:	2302      	movs	r3, #2
1000afe2:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
1000afe4:	4653      	mov	r3, sl
1000afe6:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000afe8:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000afea:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000afec:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000afee:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000aff0:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000aff2:	017b      	lsls	r3, r7, #5
1000aff4:	9300      	str	r3, [sp, #0]
1000aff6:	1bdb      	subs	r3, r3, r7
1000aff8:	009b      	lsls	r3, r3, #2
1000affa:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000affc:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000affe:	2b02      	cmp	r3, #2
1000b000:	d100      	bne.n	1000b004 <ble_slave_security_request_handler+0x70>
1000b002:	e084      	b.n	1000b10e <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b004:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b006:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
1000b008:	2310      	movs	r3, #16
1000b00a:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
1000b00c:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b00e:	9b00      	ldr	r3, [sp, #0]
1000b010:	1bde      	subs	r6, r3, r7
1000b012:	4643      	mov	r3, r8
1000b014:	00b6      	lsls	r6, r6, #2
1000b016:	199b      	adds	r3, r3, r6
1000b018:	7e1b      	ldrb	r3, [r3, #24]
1000b01a:	2b40      	cmp	r3, #64	; 0x40
1000b01c:	d04a      	beq.n	1000b0b4 <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b01e:	9b00      	ldr	r3, [sp, #0]
1000b020:	0021      	movs	r1, r4
1000b022:	1bda      	subs	r2, r3, r7
1000b024:	4653      	mov	r3, sl
1000b026:	0092      	lsls	r2, r2, #2
1000b028:	3260      	adds	r2, #96	; 0x60
1000b02a:	8818      	ldrh	r0, [r3, #0]
1000b02c:	4442      	add	r2, r8
1000b02e:	2300      	movs	r3, #0
1000b030:	4d43      	ldr	r5, [pc, #268]	; (1000b140 <ble_slave_security_request_handler+0x1ac>)
1000b032:	47a8      	blx	r5
1000b034:	2800      	cmp	r0, #0
1000b036:	d132      	bne.n	1000b09e <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
1000b038:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b03a:	b007      	add	sp, #28
1000b03c:	bc3c      	pop	{r2, r3, r4, r5}
1000b03e:	4690      	mov	r8, r2
1000b040:	4699      	mov	r9, r3
1000b042:	46a2      	mov	sl, r4
1000b044:	46ab      	mov	fp, r5
1000b046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b048:	0015      	movs	r5, r2
1000b04a:	355e      	adds	r5, #94	; 0x5e
1000b04c:	782d      	ldrb	r5, [r5, #0]
1000b04e:	2d02      	cmp	r5, #2
1000b050:	d1b8      	bne.n	1000afc4 <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b052:	4642      	mov	r2, r8
1000b054:	015d      	lsls	r5, r3, #5
1000b056:	1ae9      	subs	r1, r5, r3
1000b058:	0089      	lsls	r1, r1, #2
1000b05a:	1852      	adds	r2, r2, r1
1000b05c:	0016      	movs	r6, r2
1000b05e:	2706      	movs	r7, #6
1000b060:	365e      	adds	r6, #94	; 0x5e
1000b062:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b064:	7d12      	ldrb	r2, [r2, #20]
1000b066:	07d6      	lsls	r6, r2, #31
1000b068:	d503      	bpl.n	1000b072 <ble_slave_security_request_handler+0xde>
1000b06a:	4656      	mov	r6, sl
1000b06c:	78f6      	ldrb	r6, [r6, #3]
1000b06e:	2e00      	cmp	r6, #0
1000b070:	d151      	bne.n	1000b116 <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b072:	2202      	movs	r2, #2
1000b074:	1aeb      	subs	r3, r5, r3
1000b076:	009b      	lsls	r3, r3, #2
1000b078:	4443      	add	r3, r8
1000b07a:	335e      	adds	r3, #94	; 0x5e
1000b07c:	701a      	strb	r2, [r3, #0]
1000b07e:	4653      	mov	r3, sl
1000b080:	8819      	ldrh	r1, [r3, #0]
1000b082:	e7a3      	b.n	1000afcc <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b084:	0002      	movs	r2, r0
1000b086:	325e      	adds	r2, #94	; 0x5e
1000b088:	7812      	ldrb	r2, [r2, #0]
1000b08a:	2a02      	cmp	r2, #2
1000b08c:	d1a3      	bne.n	1000afd6 <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b08e:	015b      	lsls	r3, r3, #5
1000b090:	1bdb      	subs	r3, r3, r7
1000b092:	009b      	lsls	r3, r3, #2
1000b094:	4443      	add	r3, r8
1000b096:	335e      	adds	r3, #94	; 0x5e
1000b098:	3201      	adds	r2, #1
1000b09a:	701a      	strb	r2, [r3, #0]
			break;
1000b09c:	e7a0      	b.n	1000afe0 <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b09e:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b0a0:	4828      	ldr	r0, [pc, #160]	; (1000b144 <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b0a2:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
1000b0a4:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b0a6:	4b28      	ldr	r3, [pc, #160]	; (1000b148 <ble_slave_security_request_handler+0x1b4>)
1000b0a8:	4798      	blx	r3
1000b0aa:	4828      	ldr	r0, [pc, #160]	; (1000b14c <ble_slave_security_request_handler+0x1b8>)
1000b0ac:	4b28      	ldr	r3, [pc, #160]	; (1000b150 <ble_slave_security_request_handler+0x1bc>)
1000b0ae:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b0b0:	20e2      	movs	r0, #226	; 0xe2
1000b0b2:	e7c2      	b.n	1000b03a <ble_slave_security_request_handler+0xa6>
1000b0b4:	4b27      	ldr	r3, [pc, #156]	; (1000b154 <ble_slave_security_request_handler+0x1c0>)
1000b0b6:	0035      	movs	r5, r6
1000b0b8:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b0ba:	230f      	movs	r3, #15
1000b0bc:	469b      	mov	fp, r3
1000b0be:	9601      	str	r6, [sp, #4]
1000b0c0:	3568      	adds	r5, #104	; 0x68
1000b0c2:	3660      	adds	r6, #96	; 0x60
1000b0c4:	4446      	add	r6, r8
1000b0c6:	4445      	add	r5, r8
1000b0c8:	47c8      	blx	r9
1000b0ca:	465b      	mov	r3, fp
1000b0cc:	4018      	ands	r0, r3
1000b0ce:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b0d0:	47c8      	blx	r9
1000b0d2:	465b      	mov	r3, fp
1000b0d4:	4018      	ands	r0, r3
1000b0d6:	74b0      	strb	r0, [r6, #18]
1000b0d8:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b0da:	42ae      	cmp	r6, r5
1000b0dc:	d1f4      	bne.n	1000b0c8 <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b0de:	230f      	movs	r3, #15
1000b0e0:	469b      	mov	fp, r3
1000b0e2:	9e01      	ldr	r6, [sp, #4]
1000b0e4:	3670      	adds	r6, #112	; 0x70
1000b0e6:	4446      	add	r6, r8
1000b0e8:	47c8      	blx	r9
1000b0ea:	465b      	mov	r3, fp
1000b0ec:	4018      	ands	r0, r3
1000b0ee:	7028      	strb	r0, [r5, #0]
1000b0f0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b0f2:	42b5      	cmp	r5, r6
1000b0f4:	d1f8      	bne.n	1000b0e8 <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b0f6:	47c8      	blx	r9
1000b0f8:	9b00      	ldr	r3, [sp, #0]
1000b0fa:	1bdb      	subs	r3, r3, r7
1000b0fc:	009b      	lsls	r3, r3, #2
1000b0fe:	4443      	add	r3, r8
1000b100:	001a      	movs	r2, r3
1000b102:	3270      	adds	r2, #112	; 0x70
1000b104:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b106:	2210      	movs	r2, #16
1000b108:	337a      	adds	r3, #122	; 0x7a
1000b10a:	701a      	strb	r2, [r3, #0]
1000b10c:	e787      	b.n	1000b01e <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b10e:	3301      	adds	r3, #1
1000b110:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b112:	71e3      	strb	r3, [r4, #7]
1000b114:	e778      	b.n	1000b008 <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b116:	4653      	mov	r3, sl
1000b118:	4441      	add	r1, r8
1000b11a:	8818      	ldrh	r0, [r3, #0]
1000b11c:	311a      	adds	r1, #26
1000b11e:	4b0e      	ldr	r3, [pc, #56]	; (1000b158 <ble_slave_security_request_handler+0x1c4>)
1000b120:	4798      	blx	r3
1000b122:	2800      	cmp	r0, #0
1000b124:	d100      	bne.n	1000b128 <ble_slave_security_request_handler+0x194>
1000b126:	e787      	b.n	1000b038 <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b128:	4b07      	ldr	r3, [pc, #28]	; (1000b148 <ble_slave_security_request_handler+0x1b4>)
1000b12a:	4806      	ldr	r0, [pc, #24]	; (1000b144 <ble_slave_security_request_handler+0x1b0>)
1000b12c:	4798      	blx	r3
1000b12e:	480b      	ldr	r0, [pc, #44]	; (1000b15c <ble_slave_security_request_handler+0x1c8>)
1000b130:	4b07      	ldr	r3, [pc, #28]	; (1000b150 <ble_slave_security_request_handler+0x1bc>)
1000b132:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b134:	20e2      	movs	r0, #226	; 0xe2
1000b136:	e780      	b.n	1000b03a <ble_slave_security_request_handler+0xa6>
1000b138:	1001810b 	.word	0x1001810b
1000b13c:	1001d308 	.word	0x1001d308
1000b140:	1000ef45 	.word	0x1000ef45
1000b144:	10019518 	.word	0x10019518
1000b148:	10018375 	.word	0x10018375
1000b14c:	1001a5bc 	.word	0x1001a5bc
1000b150:	10018255 	.word	0x10018255
1000b154:	10018389 	.word	0x10018389
1000b158:	1000f131 	.word	0x1000f131
1000b15c:	1001a5a4 	.word	0x1001a5a4

1000b160 <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b160:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b162:	4656      	mov	r6, sl
1000b164:	465f      	mov	r7, fp
1000b166:	464d      	mov	r5, r9
1000b168:	4644      	mov	r4, r8
1000b16a:	4b45      	ldr	r3, [pc, #276]	; (1000b280 <ble_pair_request_handler+0x120>)
1000b16c:	b4f0      	push	{r4, r5, r6, r7}
1000b16e:	469a      	mov	sl, r3
1000b170:	001a      	movs	r2, r3
1000b172:	2300      	movs	r3, #0
1000b174:	b087      	sub	sp, #28
1000b176:	9000      	str	r0, [sp, #0]
1000b178:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b17a:	8911      	ldrh	r1, [r2, #8]
1000b17c:	001c      	movs	r4, r3
1000b17e:	4281      	cmp	r1, r0
1000b180:	d040      	beq.n	1000b204 <ble_pair_request_handler+0xa4>
1000b182:	3301      	adds	r3, #1
1000b184:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b186:	2b05      	cmp	r3, #5
1000b188:	d1f7      	bne.n	1000b17a <ble_pair_request_handler+0x1a>
1000b18a:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b18c:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b18e:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b190:	2302      	movs	r3, #2
1000b192:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b194:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b196:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b198:	0162      	lsls	r2, r4, #5
1000b19a:	4690      	mov	r8, r2
1000b19c:	1b12      	subs	r2, r2, r4
1000b19e:	0092      	lsls	r2, r2, #2
1000b1a0:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b1a2:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
1000b1a4:	3b01      	subs	r3, #1
1000b1a6:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b1a8:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b1aa:	2a02      	cmp	r2, #2
1000b1ac:	d064      	beq.n	1000b278 <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b1ae:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b1b0:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
1000b1b2:	2310      	movs	r3, #16
1000b1b4:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
1000b1b6:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b1b8:	4643      	mov	r3, r8
1000b1ba:	1b1e      	subs	r6, r3, r4
1000b1bc:	4653      	mov	r3, sl
1000b1be:	00b6      	lsls	r6, r6, #2
1000b1c0:	199b      	adds	r3, r3, r6
1000b1c2:	7e1b      	ldrb	r3, [r3, #24]
1000b1c4:	2b40      	cmp	r3, #64	; 0x40
1000b1c6:	d02a      	beq.n	1000b21e <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b1c8:	4643      	mov	r3, r8
1000b1ca:	1b1a      	subs	r2, r3, r4
1000b1cc:	0092      	lsls	r2, r2, #2
1000b1ce:	9b00      	ldr	r3, [sp, #0]
1000b1d0:	3260      	adds	r2, #96	; 0x60
1000b1d2:	8818      	ldrh	r0, [r3, #0]
1000b1d4:	4452      	add	r2, sl
1000b1d6:	2300      	movs	r3, #0
1000b1d8:	0039      	movs	r1, r7
1000b1da:	4c2a      	ldr	r4, [pc, #168]	; (1000b284 <ble_pair_request_handler+0x124>)
1000b1dc:	47a0      	blx	r4
1000b1de:	2800      	cmp	r0, #0
1000b1e0:	d009      	beq.n	1000b1f6 <ble_pair_request_handler+0x96>
	{
		features.bond = false;
1000b1e2:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
1000b1e4:	4828      	ldr	r0, [pc, #160]	; (1000b288 <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b1e6:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
1000b1e8:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b1ea:	4b28      	ldr	r3, [pc, #160]	; (1000b28c <ble_pair_request_handler+0x12c>)
1000b1ec:	4798      	blx	r3
1000b1ee:	4828      	ldr	r0, [pc, #160]	; (1000b290 <ble_pair_request_handler+0x130>)
1000b1f0:	4b28      	ldr	r3, [pc, #160]	; (1000b294 <ble_pair_request_handler+0x134>)
1000b1f2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b1f4:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b1f6:	b007      	add	sp, #28
1000b1f8:	bc3c      	pop	{r2, r3, r4, r5}
1000b1fa:	4690      	mov	r8, r2
1000b1fc:	4699      	mov	r9, r3
1000b1fe:	46a2      	mov	sl, r4
1000b200:	46ab      	mov	fp, r5
1000b202:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b204:	0011      	movs	r1, r2
1000b206:	315e      	adds	r1, #94	; 0x5e
1000b208:	7809      	ldrb	r1, [r1, #0]
1000b20a:	2902      	cmp	r1, #2
1000b20c:	d1b9      	bne.n	1000b182 <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b20e:	2203      	movs	r2, #3
1000b210:	015b      	lsls	r3, r3, #5
1000b212:	1b1b      	subs	r3, r3, r4
1000b214:	009b      	lsls	r3, r3, #2
1000b216:	4453      	add	r3, sl
1000b218:	335e      	adds	r3, #94	; 0x5e
1000b21a:	701a      	strb	r2, [r3, #0]
			break;
1000b21c:	e7b6      	b.n	1000b18c <ble_pair_request_handler+0x2c>
1000b21e:	4b1e      	ldr	r3, [pc, #120]	; (1000b298 <ble_pair_request_handler+0x138>)
1000b220:	0035      	movs	r5, r6
1000b222:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b224:	230f      	movs	r3, #15
1000b226:	469b      	mov	fp, r3
1000b228:	9601      	str	r6, [sp, #4]
1000b22a:	3568      	adds	r5, #104	; 0x68
1000b22c:	3660      	adds	r6, #96	; 0x60
1000b22e:	4456      	add	r6, sl
1000b230:	4455      	add	r5, sl
1000b232:	47c8      	blx	r9
1000b234:	465b      	mov	r3, fp
1000b236:	4018      	ands	r0, r3
1000b238:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b23a:	47c8      	blx	r9
1000b23c:	465b      	mov	r3, fp
1000b23e:	4018      	ands	r0, r3
1000b240:	74b0      	strb	r0, [r6, #18]
1000b242:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b244:	42ae      	cmp	r6, r5
1000b246:	d1f4      	bne.n	1000b232 <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b248:	230f      	movs	r3, #15
1000b24a:	469b      	mov	fp, r3
1000b24c:	9e01      	ldr	r6, [sp, #4]
1000b24e:	3670      	adds	r6, #112	; 0x70
1000b250:	4456      	add	r6, sl
1000b252:	47c8      	blx	r9
1000b254:	465b      	mov	r3, fp
1000b256:	4018      	ands	r0, r3
1000b258:	7028      	strb	r0, [r5, #0]
1000b25a:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b25c:	42b5      	cmp	r5, r6
1000b25e:	d1f8      	bne.n	1000b252 <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b260:	47c8      	blx	r9
1000b262:	4643      	mov	r3, r8
1000b264:	1b1b      	subs	r3, r3, r4
1000b266:	009b      	lsls	r3, r3, #2
1000b268:	4453      	add	r3, sl
1000b26a:	001a      	movs	r2, r3
1000b26c:	3270      	adds	r2, #112	; 0x70
1000b26e:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b270:	2210      	movs	r2, #16
1000b272:	337a      	adds	r3, #122	; 0x7a
1000b274:	701a      	strb	r2, [r3, #0]
1000b276:	e7a7      	b.n	1000b1c8 <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b278:	3302      	adds	r3, #2
1000b27a:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b27c:	71fb      	strb	r3, [r7, #7]
1000b27e:	e798      	b.n	1000b1b2 <ble_pair_request_handler+0x52>
1000b280:	1001d308 	.word	0x1001d308
1000b284:	1000ef45 	.word	0x1000ef45
1000b288:	10019518 	.word	0x10019518
1000b28c:	10018375 	.word	0x10018375
1000b290:	1001a5e8 	.word	0x1001a5e8
1000b294:	10018255 	.word	0x10018255
1000b298:	10018389 	.word	0x10018389

1000b29c <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b29c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b29e:	465f      	mov	r7, fp
1000b2a0:	4656      	mov	r6, sl
1000b2a2:	464d      	mov	r5, r9
1000b2a4:	4644      	mov	r4, r8
1000b2a6:	b4f0      	push	{r4, r5, r6, r7}
1000b2a8:	0007      	movs	r7, r0
1000b2aa:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b2ac:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b2ae:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b2b0:	2206      	movs	r2, #6
1000b2b2:	4940      	ldr	r1, [pc, #256]	; (1000b3b4 <ble_pair_key_request_handler+0x118>)
1000b2b4:	4e40      	ldr	r6, [pc, #256]	; (1000b3b8 <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b2b6:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b2b8:	0020      	movs	r0, r4
1000b2ba:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b2bc:	2204      	movs	r2, #4
1000b2be:	0039      	movs	r1, r7
1000b2c0:	0028      	movs	r0, r5
1000b2c2:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b2c4:	78eb      	ldrb	r3, [r5, #3]
1000b2c6:	2b00      	cmp	r3, #0
1000b2c8:	d02e      	beq.n	1000b328 <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b2ca:	2380      	movs	r3, #128	; 0x80
1000b2cc:	886a      	ldrh	r2, [r5, #2]
1000b2ce:	005b      	lsls	r3, r3, #1
1000b2d0:	429a      	cmp	r2, r3
1000b2d2:	d00b      	beq.n	1000b2ec <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b2d4:	78ab      	ldrb	r3, [r5, #2]
1000b2d6:	2b01      	cmp	r3, #1
1000b2d8:	d052      	beq.n	1000b380 <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b2da:	2400      	movs	r4, #0
}
1000b2dc:	0020      	movs	r0, r4
1000b2de:	b007      	add	sp, #28
1000b2e0:	bc3c      	pop	{r2, r3, r4, r5}
1000b2e2:	4690      	mov	r8, r2
1000b2e4:	4699      	mov	r9, r3
1000b2e6:	46a2      	mov	sl, r4
1000b2e8:	46ab      	mov	fp, r5
1000b2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b2ec:	4b33      	ldr	r3, [pc, #204]	; (1000b3bc <ble_pair_key_request_handler+0x120>)
1000b2ee:	0018      	movs	r0, r3
1000b2f0:	469a      	mov	sl, r3
1000b2f2:	4b33      	ldr	r3, [pc, #204]	; (1000b3c0 <ble_pair_key_request_handler+0x124>)
1000b2f4:	4699      	mov	r9, r3
1000b2f6:	4798      	blx	r3
1000b2f8:	4b32      	ldr	r3, [pc, #200]	; (1000b3c4 <ble_pair_key_request_handler+0x128>)
1000b2fa:	4833      	ldr	r0, [pc, #204]	; (1000b3c8 <ble_pair_key_request_handler+0x12c>)
1000b2fc:	4698      	mov	r8, r3
1000b2fe:	4798      	blx	r3
1000b300:	4e32      	ldr	r6, [pc, #200]	; (1000b3cc <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b302:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b304:	5de0      	ldrb	r0, [r4, r7]
1000b306:	3701      	adds	r7, #1
1000b308:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b30a:	2f06      	cmp	r7, #6
1000b30c:	d1fa      	bne.n	1000b304 <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b30e:	9b01      	ldr	r3, [sp, #4]
1000b310:	78a9      	ldrb	r1, [r5, #2]
1000b312:	8818      	ldrh	r0, [r3, #0]
1000b314:	0022      	movs	r2, r4
1000b316:	4b2e      	ldr	r3, [pc, #184]	; (1000b3d0 <ble_pair_key_request_handler+0x134>)
1000b318:	4798      	blx	r3
1000b31a:	2800      	cmp	r0, #0
1000b31c:	d0dd      	beq.n	1000b2da <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
1000b31e:	4650      	mov	r0, sl
1000b320:	47c8      	blx	r9
1000b322:	482c      	ldr	r0, [pc, #176]	; (1000b3d4 <ble_pair_key_request_handler+0x138>)
1000b324:	47c0      	blx	r8
1000b326:	e7d8      	b.n	1000b2da <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b328:	4b24      	ldr	r3, [pc, #144]	; (1000b3bc <ble_pair_key_request_handler+0x120>)
1000b32a:	0018      	movs	r0, r3
1000b32c:	469a      	mov	sl, r3
1000b32e:	4b24      	ldr	r3, [pc, #144]	; (1000b3c0 <ble_pair_key_request_handler+0x124>)
1000b330:	4699      	mov	r9, r3
1000b332:	4798      	blx	r3
1000b334:	4b23      	ldr	r3, [pc, #140]	; (1000b3c4 <ble_pair_key_request_handler+0x128>)
1000b336:	4828      	ldr	r0, [pc, #160]	; (1000b3d8 <ble_pair_key_request_handler+0x13c>)
1000b338:	4698      	mov	r8, r3
1000b33a:	4798      	blx	r3
1000b33c:	2300      	movs	r3, #0
1000b33e:	4f27      	ldr	r7, [pc, #156]	; (1000b3dc <ble_pair_key_request_handler+0x140>)
1000b340:	469b      	mov	fp, r3
1000b342:	e003      	b.n	1000b34c <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b344:	001a      	movs	r2, r3
1000b346:	3a30      	subs	r2, #48	; 0x30
1000b348:	2a09      	cmp	r2, #9
1000b34a:	d921      	bls.n	1000b390 <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b34c:	201e      	movs	r0, #30
1000b34e:	47b8      	blx	r7
1000b350:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b352:	2b00      	cmp	r3, #0
1000b354:	d1f6      	bne.n	1000b344 <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
1000b356:	4650      	mov	r0, sl
1000b358:	47c8      	blx	r9
1000b35a:	4821      	ldr	r0, [pc, #132]	; (1000b3e0 <ble_pair_key_request_handler+0x144>)
1000b35c:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
1000b35e:	4650      	mov	r0, sl
1000b360:	47c8      	blx	r9
1000b362:	4820      	ldr	r0, [pc, #128]	; (1000b3e4 <ble_pair_key_request_handler+0x148>)
1000b364:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
1000b366:	9b01      	ldr	r3, [sp, #4]
1000b368:	2113      	movs	r1, #19
1000b36a:	8818      	ldrh	r0, [r3, #0]
1000b36c:	4b1e      	ldr	r3, [pc, #120]	; (1000b3e8 <ble_pair_key_request_handler+0x14c>)
1000b36e:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b370:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b372:	2800      	cmp	r0, #0
1000b374:	d0b2      	beq.n	1000b2dc <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b376:	4650      	mov	r0, sl
1000b378:	47c8      	blx	r9
1000b37a:	481c      	ldr	r0, [pc, #112]	; (1000b3ec <ble_pair_key_request_handler+0x150>)
1000b37c:	47c0      	blx	r8
1000b37e:	e7ad      	b.n	1000b2dc <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b380:	4b0f      	ldr	r3, [pc, #60]	; (1000b3c0 <ble_pair_key_request_handler+0x124>)
1000b382:	480e      	ldr	r0, [pc, #56]	; (1000b3bc <ble_pair_key_request_handler+0x120>)
1000b384:	4798      	blx	r3
1000b386:	481a      	ldr	r0, [pc, #104]	; (1000b3f0 <ble_pair_key_request_handler+0x154>)
1000b388:	4b0e      	ldr	r3, [pc, #56]	; (1000b3c4 <ble_pair_key_request_handler+0x128>)
1000b38a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b38c:	2400      	movs	r4, #0
1000b38e:	e7a5      	b.n	1000b2dc <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
1000b390:	465a      	mov	r2, fp
1000b392:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
1000b394:	23ff      	movs	r3, #255	; 0xff
1000b396:	4e0d      	ldr	r6, [pc, #52]	; (1000b3cc <ble_pair_key_request_handler+0x130>)
1000b398:	4018      	ands	r0, r3
1000b39a:	47b0      	blx	r6
1000b39c:	2301      	movs	r3, #1
1000b39e:	469c      	mov	ip, r3
1000b3a0:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b3a2:	465b      	mov	r3, fp
1000b3a4:	2b06      	cmp	r3, #6
1000b3a6:	d1d1      	bne.n	1000b34c <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b3a8:	4650      	mov	r0, sl
1000b3aa:	47c8      	blx	r9
1000b3ac:	4811      	ldr	r0, [pc, #68]	; (1000b3f4 <ble_pair_key_request_handler+0x158>)
1000b3ae:	47c0      	blx	r8
1000b3b0:	e7a7      	b.n	1000b302 <ble_pair_key_request_handler+0x66>
1000b3b2:	46c0      	nop			; (mov r8, r8)
1000b3b4:	1001a498 	.word	0x1001a498
1000b3b8:	100180cf 	.word	0x100180cf
1000b3bc:	10019518 	.word	0x10019518
1000b3c0:	10018375 	.word	0x10018375
1000b3c4:	10018255 	.word	0x10018255
1000b3c8:	1001a658 	.word	0x1001a658
1000b3cc:	10018289 	.word	0x10018289
1000b3d0:	1000f075 	.word	0x1000f075
1000b3d4:	1001a690 	.word	0x1001a690
1000b3d8:	1001a610 	.word	0x1001a610
1000b3dc:	1000bf01 	.word	0x1000bf01
1000b3e0:	1001a638 	.word	0x1001a638
1000b3e4:	1001a644 	.word	0x1001a644
1000b3e8:	1000ebd9 	.word	0x1000ebd9
1000b3ec:	1001a52c 	.word	0x1001a52c
1000b3f0:	1001a6a8 	.word	0x1001a6a8
1000b3f4:	1001a6c4 	.word	0x1001a6c4

1000b3f8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3fa:	4647      	mov	r7, r8
1000b3fc:	4e29      	ldr	r6, [pc, #164]	; (1000b4a4 <ble_encryption_request_handler+0xac>)
1000b3fe:	b480      	push	{r7}
1000b400:	0031      	movs	r1, r6
1000b402:	0007      	movs	r7, r0
1000b404:	2200      	movs	r2, #0
1000b406:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b408:	8908      	ldrh	r0, [r1, #8]
1000b40a:	0014      	movs	r4, r2
1000b40c:	42a8      	cmp	r0, r5
1000b40e:	d01c      	beq.n	1000b44a <ble_encryption_request_handler+0x52>
1000b410:	3201      	adds	r2, #1
1000b412:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b414:	2a05      	cmp	r2, #5
1000b416:	d1f7      	bne.n	1000b408 <ble_encryption_request_handler+0x10>
1000b418:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b41a:	4b23      	ldr	r3, [pc, #140]	; (1000b4a8 <ble_encryption_request_handler+0xb0>)
1000b41c:	4f23      	ldr	r7, [pc, #140]	; (1000b4ac <ble_encryption_request_handler+0xb4>)
1000b41e:	4698      	mov	r8, r3
1000b420:	0018      	movs	r0, r3
1000b422:	47b8      	blx	r7
1000b424:	4d22      	ldr	r5, [pc, #136]	; (1000b4b0 <ble_encryption_request_handler+0xb8>)
1000b426:	4823      	ldr	r0, [pc, #140]	; (1000b4b4 <ble_encryption_request_handler+0xbc>)
1000b428:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b42a:	4640      	mov	r0, r8
1000b42c:	47b8      	blx	r7
1000b42e:	4822      	ldr	r0, [pc, #136]	; (1000b4b8 <ble_encryption_request_handler+0xc0>)
1000b430:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b432:	0163      	lsls	r3, r4, #5
1000b434:	1b1b      	subs	r3, r3, r4
1000b436:	009b      	lsls	r3, r3, #2
1000b438:	18f3      	adds	r3, r6, r3
1000b43a:	8918      	ldrh	r0, [r3, #8]
1000b43c:	2105      	movs	r1, #5
1000b43e:	4b1f      	ldr	r3, [pc, #124]	; (1000b4bc <ble_encryption_request_handler+0xc4>)
1000b440:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b442:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
1000b444:	bc04      	pop	{r2}
1000b446:	4690      	mov	r8, r2
1000b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b44a:	000b      	movs	r3, r1
1000b44c:	335e      	adds	r3, #94	; 0x5e
1000b44e:	781b      	ldrb	r3, [r3, #0]
1000b450:	2b01      	cmp	r3, #1
1000b452:	d9dd      	bls.n	1000b410 <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b454:	0155      	lsls	r5, r2, #5
1000b456:	1aad      	subs	r5, r5, r2
1000b458:	2206      	movs	r2, #6
1000b45a:	00ad      	lsls	r5, r5, #2
1000b45c:	1973      	adds	r3, r6, r5
1000b45e:	4698      	mov	r8, r3
1000b460:	335e      	adds	r3, #94	; 0x5e
1000b462:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b464:	8a5a      	ldrh	r2, [r3, #18]
1000b466:	887b      	ldrh	r3, [r7, #2]
1000b468:	429a      	cmp	r2, r3
1000b46a:	d1d6      	bne.n	1000b41a <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b46c:	1971      	adds	r1, r6, r5
1000b46e:	3172      	adds	r1, #114	; 0x72
1000b470:	1d38      	adds	r0, r7, #4
1000b472:	2208      	movs	r2, #8
1000b474:	4b12      	ldr	r3, [pc, #72]	; (1000b4c0 <ble_encryption_request_handler+0xc8>)
1000b476:	4798      	blx	r3
1000b478:	2800      	cmp	r0, #0
1000b47a:	d1ce      	bne.n	1000b41a <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b47c:	002b      	movs	r3, r5
1000b47e:	4642      	mov	r2, r8
1000b480:	3360      	adds	r3, #96	; 0x60
1000b482:	7d11      	ldrb	r1, [r2, #20]
1000b484:	199b      	adds	r3, r3, r6
1000b486:	8838      	ldrh	r0, [r7, #0]
1000b488:	2201      	movs	r2, #1
1000b48a:	4c0e      	ldr	r4, [pc, #56]	; (1000b4c4 <ble_encryption_request_handler+0xcc>)
1000b48c:	47a0      	blx	r4
1000b48e:	2800      	cmp	r0, #0
1000b490:	d0d8      	beq.n	1000b444 <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b492:	4b06      	ldr	r3, [pc, #24]	; (1000b4ac <ble_encryption_request_handler+0xb4>)
1000b494:	4804      	ldr	r0, [pc, #16]	; (1000b4a8 <ble_encryption_request_handler+0xb0>)
1000b496:	4798      	blx	r3
1000b498:	480b      	ldr	r0, [pc, #44]	; (1000b4c8 <ble_encryption_request_handler+0xd0>)
1000b49a:	4b05      	ldr	r3, [pc, #20]	; (1000b4b0 <ble_encryption_request_handler+0xb8>)
1000b49c:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b49e:	2000      	movs	r0, #0
1000b4a0:	e7d0      	b.n	1000b444 <ble_encryption_request_handler+0x4c>
1000b4a2:	46c0      	nop			; (mov r8, r8)
1000b4a4:	1001d308 	.word	0x1001d308
1000b4a8:	10019518 	.word	0x10019518
1000b4ac:	10018375 	.word	0x10018375
1000b4b0:	10018255 	.word	0x10018255
1000b4b4:	1001a6d8 	.word	0x1001a6d8
1000b4b8:	1001a710 	.word	0x1001a710
1000b4bc:	1000ebd9 	.word	0x1000ebd9
1000b4c0:	100180b1 	.word	0x100180b1
1000b4c4:	1000f1a9 	.word	0x1000f1a9
1000b4c8:	1001a768 	.word	0x1001a768

1000b4cc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b4cc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b4ce:	7800      	ldrb	r0, [r0, #0]
1000b4d0:	2800      	cmp	r0, #0
1000b4d2:	d006      	beq.n	1000b4e2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b4d4:	4b03      	ldr	r3, [pc, #12]	; (1000b4e4 <ble_scan_report_handler+0x18>)
1000b4d6:	4804      	ldr	r0, [pc, #16]	; (1000b4e8 <ble_scan_report_handler+0x1c>)
1000b4d8:	4798      	blx	r3
1000b4da:	4804      	ldr	r0, [pc, #16]	; (1000b4ec <ble_scan_report_handler+0x20>)
1000b4dc:	4b04      	ldr	r3, [pc, #16]	; (1000b4f0 <ble_scan_report_handler+0x24>)
1000b4de:	4798      	blx	r3
1000b4e0:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000b4e2:	bd10      	pop	{r4, pc}
1000b4e4:	10018375 	.word	0x10018375
1000b4e8:	10019518 	.word	0x10019518
1000b4ec:	1001a788 	.word	0x1001a788
1000b4f0:	10018255 	.word	0x10018255

1000b4f4 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b4f4:	b510      	push	{r4, lr}
1000b4f6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b4f8:	78c0      	ldrb	r0, [r0, #3]
1000b4fa:	2800      	cmp	r0, #0
1000b4fc:	d008      	beq.n	1000b510 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b4fe:	4b05      	ldr	r3, [pc, #20]	; (1000b514 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000b500:	4805      	ldr	r0, [pc, #20]	; (1000b518 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000b502:	4798      	blx	r3
1000b504:	78a2      	ldrb	r2, [r4, #2]
1000b506:	8821      	ldrh	r1, [r4, #0]
1000b508:	4804      	ldr	r0, [pc, #16]	; (1000b51c <ble_mtu_changed_cmd_complete_handler+0x28>)
1000b50a:	4b05      	ldr	r3, [pc, #20]	; (1000b520 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000b50c:	4798      	blx	r3
1000b50e:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000b510:	bd10      	pop	{r4, pc}
1000b512:	46c0      	nop			; (mov r8, r8)
1000b514:	10018375 	.word	0x10018375
1000b518:	10019518 	.word	0x10019518
1000b51c:	1001a79c 	.word	0x1001a79c
1000b520:	10018255 	.word	0x10018255

1000b524 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b526:	4d25      	ldr	r5, [pc, #148]	; (1000b5bc <ble_encryption_status_change_handler+0x98>)
1000b528:	2400      	movs	r4, #0
1000b52a:	002b      	movs	r3, r5
1000b52c:	0007      	movs	r7, r0
1000b52e:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b530:	891a      	ldrh	r2, [r3, #8]
1000b532:	0021      	movs	r1, r4
1000b534:	4282      	cmp	r2, r0
1000b536:	d018      	beq.n	1000b56a <ble_encryption_status_change_handler+0x46>
1000b538:	3401      	adds	r4, #1
1000b53a:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b53c:	2c05      	cmp	r4, #5
1000b53e:	d1f7      	bne.n	1000b530 <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b540:	78be      	ldrb	r6, [r7, #2]
1000b542:	2e00      	cmp	r6, #0
1000b544:	d02c      	beq.n	1000b5a0 <ble_encryption_status_change_handler+0x7c>
1000b546:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b548:	014b      	lsls	r3, r1, #5
1000b54a:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b54c:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b54e:	00a4      	lsls	r4, r4, #2
1000b550:	192c      	adds	r4, r5, r4
1000b552:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b554:	345e      	adds	r4, #94	; 0x5e
1000b556:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b558:	4819      	ldr	r0, [pc, #100]	; (1000b5c0 <ble_encryption_status_change_handler+0x9c>)
1000b55a:	4b1a      	ldr	r3, [pc, #104]	; (1000b5c4 <ble_encryption_status_change_handler+0xa0>)
1000b55c:	4798      	blx	r3
1000b55e:	481a      	ldr	r0, [pc, #104]	; (1000b5c8 <ble_encryption_status_change_handler+0xa4>)
1000b560:	4b1a      	ldr	r3, [pc, #104]	; (1000b5cc <ble_encryption_status_change_handler+0xa8>)
1000b562:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b564:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b566:	0030      	movs	r0, r6
1000b568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b56a:	001a      	movs	r2, r3
1000b56c:	325e      	adds	r2, #94	; 0x5e
1000b56e:	7812      	ldrb	r2, [r2, #0]
1000b570:	2a06      	cmp	r2, #6
1000b572:	d1e1      	bne.n	1000b538 <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b574:	78be      	ldrb	r6, [r7, #2]
1000b576:	2e00      	cmp	r6, #0
1000b578:	d1e6      	bne.n	1000b548 <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000b57a:	4b12      	ldr	r3, [pc, #72]	; (1000b5c4 <ble_encryption_status_change_handler+0xa0>)
1000b57c:	4810      	ldr	r0, [pc, #64]	; (1000b5c0 <ble_encryption_status_change_handler+0x9c>)
1000b57e:	4798      	blx	r3
1000b580:	4b12      	ldr	r3, [pc, #72]	; (1000b5cc <ble_encryption_status_change_handler+0xa8>)
1000b582:	4813      	ldr	r0, [pc, #76]	; (1000b5d0 <ble_encryption_status_change_handler+0xac>)
1000b584:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b586:	0163      	lsls	r3, r4, #5
1000b588:	1b1c      	subs	r4, r3, r4
1000b58a:	00a4      	lsls	r4, r4, #2
1000b58c:	192c      	adds	r4, r5, r4
1000b58e:	0023      	movs	r3, r4
1000b590:	2208      	movs	r2, #8
1000b592:	335e      	adds	r3, #94	; 0x5e
1000b594:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b596:	78fb      	ldrb	r3, [r7, #3]
1000b598:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b59a:	78bb      	ldrb	r3, [r7, #2]
1000b59c:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b59e:	e7e2      	b.n	1000b566 <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b5a0:	4e07      	ldr	r6, [pc, #28]	; (1000b5c0 <ble_encryption_status_change_handler+0x9c>)
1000b5a2:	4d08      	ldr	r5, [pc, #32]	; (1000b5c4 <ble_encryption_status_change_handler+0xa0>)
1000b5a4:	0030      	movs	r0, r6
1000b5a6:	47a8      	blx	r5
1000b5a8:	4c08      	ldr	r4, [pc, #32]	; (1000b5cc <ble_encryption_status_change_handler+0xa8>)
1000b5aa:	4809      	ldr	r0, [pc, #36]	; (1000b5d0 <ble_encryption_status_change_handler+0xac>)
1000b5ac:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b5ae:	0030      	movs	r0, r6
1000b5b0:	47a8      	blx	r5
1000b5b2:	4808      	ldr	r0, [pc, #32]	; (1000b5d4 <ble_encryption_status_change_handler+0xb0>)
1000b5b4:	47a0      	blx	r4
1000b5b6:	26e2      	movs	r6, #226	; 0xe2
1000b5b8:	e7d5      	b.n	1000b566 <ble_encryption_status_change_handler+0x42>
1000b5ba:	46c0      	nop			; (mov r8, r8)
1000b5bc:	1001d308 	.word	0x1001d308
1000b5c0:	10019518 	.word	0x10019518
1000b5c4:	10018375 	.word	0x10018375
1000b5c8:	1001a7d4 	.word	0x1001a7d4
1000b5cc:	10018255 	.word	0x10018255
1000b5d0:	1001a7e8 	.word	0x1001a7e8
1000b5d4:	1001a80c 	.word	0x1001a80c

1000b5d8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b5da:	4c15      	ldr	r4, [pc, #84]	; (1000b630 <ble_scan_info_handler+0x58>)
1000b5dc:	7823      	ldrb	r3, [r4, #0]
1000b5de:	2b13      	cmp	r3, #19
1000b5e0:	d90d      	bls.n	1000b5fe <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b5e2:	4f14      	ldr	r7, [pc, #80]	; (1000b634 <ble_scan_info_handler+0x5c>)
1000b5e4:	4e14      	ldr	r6, [pc, #80]	; (1000b638 <ble_scan_info_handler+0x60>)
1000b5e6:	0038      	movs	r0, r7
1000b5e8:	47b0      	blx	r6
1000b5ea:	4814      	ldr	r0, [pc, #80]	; (1000b63c <ble_scan_info_handler+0x64>)
1000b5ec:	4d14      	ldr	r5, [pc, #80]	; (1000b640 <ble_scan_info_handler+0x68>)
1000b5ee:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b5f0:	4b14      	ldr	r3, [pc, #80]	; (1000b644 <ble_scan_info_handler+0x6c>)
1000b5f2:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b5f4:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b5f6:	2800      	cmp	r0, #0
1000b5f8:	d115      	bne.n	1000b626 <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000b5fa:	0020      	movs	r0, r4
1000b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b5fe:	7823      	ldrb	r3, [r4, #0]
1000b600:	0001      	movs	r1, r0
1000b602:	b2db      	uxtb	r3, r3
1000b604:	009a      	lsls	r2, r3, #2
1000b606:	18d2      	adds	r2, r2, r3
1000b608:	00d2      	lsls	r2, r2, #3
1000b60a:	18d3      	adds	r3, r2, r3
1000b60c:	4a0e      	ldr	r2, [pc, #56]	; (1000b648 <ble_scan_info_handler+0x70>)
1000b60e:	189b      	adds	r3, r3, r2
1000b610:	0018      	movs	r0, r3
1000b612:	2229      	movs	r2, #41	; 0x29
1000b614:	4b0d      	ldr	r3, [pc, #52]	; (1000b64c <ble_scan_info_handler+0x74>)
1000b616:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b618:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b61a:	7823      	ldrb	r3, [r4, #0]
1000b61c:	3301      	adds	r3, #1
1000b61e:	b2db      	uxtb	r3, r3
1000b620:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000b622:	2400      	movs	r4, #0
1000b624:	e7e9      	b.n	1000b5fa <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000b626:	0038      	movs	r0, r7
1000b628:	47b0      	blx	r6
1000b62a:	4809      	ldr	r0, [pc, #36]	; (1000b650 <ble_scan_info_handler+0x78>)
1000b62c:	47a8      	blx	r5
1000b62e:	e7e4      	b.n	1000b5fa <ble_scan_info_handler+0x22>
1000b630:	1001cdf0 	.word	0x1001cdf0
1000b634:	10019518 	.word	0x10019518
1000b638:	10018375 	.word	0x10018375
1000b63c:	1001a834 	.word	0x1001a834
1000b640:	10018255 	.word	0x10018255
1000b644:	1000ebb9 	.word	0x1000ebb9
1000b648:	1001d5ec 	.word	0x1001d5ec
1000b64c:	100180cf 	.word	0x100180cf
1000b650:	1001a86c 	.word	0x1001a86c

1000b654 <ble_mtu_changed_indication_handler>:
1000b654:	2000      	movs	r0, #0
1000b656:	4770      	bx	lr

1000b658 <ble_undefined_event_handler>:
1000b658:	2000      	movs	r0, #0
1000b65a:	4770      	bx	lr

1000b65c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b65e:	465f      	mov	r7, fp
1000b660:	4656      	mov	r6, sl
1000b662:	464d      	mov	r5, r9
1000b664:	4644      	mov	r4, r8
1000b666:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b668:	2700      	movs	r7, #0
1000b66a:	4b82      	ldr	r3, [pc, #520]	; (1000b874 <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b66c:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b66e:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b670:	2207      	movs	r2, #7
1000b672:	2100      	movs	r1, #0
1000b674:	4b80      	ldr	r3, [pc, #512]	; (1000b878 <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b676:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b678:	4880      	ldr	r0, [pc, #512]	; (1000b87c <ble_device_init+0x220>)
1000b67a:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b67c:	2212      	movs	r2, #18
1000b67e:	2100      	movs	r1, #0
1000b680:	4b7d      	ldr	r3, [pc, #500]	; (1000b878 <ble_device_init+0x21c>)
1000b682:	487f      	ldr	r0, [pc, #508]	; (1000b880 <ble_device_init+0x224>)
1000b684:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000b686:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b688:	4b7e      	ldr	r3, [pc, #504]	; (1000b884 <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000b68a:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b68c:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b68e:	2100      	movs	r1, #0
1000b690:	4b79      	ldr	r3, [pc, #484]	; (1000b878 <ble_device_init+0x21c>)
1000b692:	487d      	ldr	r0, [pc, #500]	; (1000b888 <ble_device_init+0x22c>)
1000b694:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b696:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b698:	4b7c      	ldr	r3, [pc, #496]	; (1000b88c <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b69a:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b69c:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b69e:	2100      	movs	r1, #0
1000b6a0:	4b75      	ldr	r3, [pc, #468]	; (1000b878 <ble_device_init+0x21c>)
1000b6a2:	487b      	ldr	r0, [pc, #492]	; (1000b890 <ble_device_init+0x234>)
1000b6a4:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b6a6:	4b7b      	ldr	r3, [pc, #492]	; (1000b894 <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b6a8:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b6aa:	469a      	mov	sl, r3
1000b6ac:	2380      	movs	r3, #128	; 0x80
1000b6ae:	00db      	lsls	r3, r3, #3
1000b6b0:	4699      	mov	r9, r3
1000b6b2:	001a      	movs	r2, r3
1000b6b4:	2100      	movs	r1, #0
1000b6b6:	4650      	mov	r0, sl
1000b6b8:	4b6f      	ldr	r3, [pc, #444]	; (1000b878 <ble_device_init+0x21c>)
1000b6ba:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b6bc:	4d76      	ldr	r5, [pc, #472]	; (1000b898 <ble_device_init+0x23c>)
1000b6be:	0164      	lsls	r4, r4, #5
1000b6c0:	0022      	movs	r2, r4
1000b6c2:	2100      	movs	r1, #0
1000b6c4:	0028      	movs	r0, r5
1000b6c6:	4b6c      	ldr	r3, [pc, #432]	; (1000b878 <ble_device_init+0x21c>)
1000b6c8:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b6ca:	4b74      	ldr	r3, [pc, #464]	; (1000b89c <ble_device_init+0x240>)
1000b6cc:	221c      	movs	r2, #28
1000b6ce:	469b      	mov	fp, r3
1000b6d0:	0018      	movs	r0, r3
1000b6d2:	2100      	movs	r1, #0
1000b6d4:	4b68      	ldr	r3, [pc, #416]	; (1000b878 <ble_device_init+0x21c>)
1000b6d6:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000b6d8:	465b      	mov	r3, fp
1000b6da:	4652      	mov	r2, sl
1000b6dc:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b6de:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000b6e0:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b6e2:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000b6e4:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b6e6:	4b6e      	ldr	r3, [pc, #440]	; (1000b8a0 <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b6e8:	4d6e      	ldr	r5, [pc, #440]	; (1000b8a4 <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b6ea:	601f      	str	r7, [r3, #0]
1000b6ec:	605f      	str	r7, [r3, #4]
1000b6ee:	609f      	str	r7, [r3, #8]
1000b6f0:	60df      	str	r7, [r3, #12]
1000b6f2:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b6f4:	4b6c      	ldr	r3, [pc, #432]	; (1000b8a8 <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b6f6:	4c6d      	ldr	r4, [pc, #436]	; (1000b8ac <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b6f8:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b6fa:	4b6d      	ldr	r3, [pc, #436]	; (1000b8b0 <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b6fc:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b6fe:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b700:	4b6c      	ldr	r3, [pc, #432]	; (1000b8b4 <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b702:	606f      	str	r7, [r5, #4]
1000b704:	60af      	str	r7, [r5, #8]
1000b706:	60ef      	str	r7, [r5, #12]
1000b708:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b70a:	6027      	str	r7, [r4, #0]
1000b70c:	6067      	str	r7, [r4, #4]
1000b70e:	60a7      	str	r7, [r4, #8]
1000b710:	60e7      	str	r7, [r4, #12]
1000b712:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b714:	601f      	str	r7, [r3, #0]
1000b716:	605f      	str	r7, [r3, #4]
1000b718:	609f      	str	r7, [r3, #8]
1000b71a:	60df      	str	r7, [r3, #12]
1000b71c:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b71e:	4b66      	ldr	r3, [pc, #408]	; (1000b8b8 <ble_device_init+0x25c>)
1000b720:	601f      	str	r7, [r3, #0]
1000b722:	4b66      	ldr	r3, [pc, #408]	; (1000b8bc <ble_device_init+0x260>)
1000b724:	4698      	mov	r8, r3
1000b726:	239b      	movs	r3, #155	; 0x9b
1000b728:	009b      	lsls	r3, r3, #2
1000b72a:	4443      	add	r3, r8
1000b72c:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b72e:	2340      	movs	r3, #64	; 0x40
1000b730:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b732:	227c      	movs	r2, #124	; 0x7c
1000b734:	2100      	movs	r1, #0
1000b736:	4640      	mov	r0, r8
1000b738:	4b4f      	ldr	r3, [pc, #316]	; (1000b878 <ble_device_init+0x21c>)
1000b73a:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b73c:	4642      	mov	r2, r8
1000b73e:	2300      	movs	r3, #0
1000b740:	325e      	adds	r2, #94	; 0x5e
1000b742:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b744:	4649      	mov	r1, r9
1000b746:	4642      	mov	r2, r8
1000b748:	7611      	strb	r1, [r2, #24]
1000b74a:	227c      	movs	r2, #124	; 0x7c
1000b74c:	4694      	mov	ip, r2
1000b74e:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b750:	45d0      	cmp	r8, sl
1000b752:	d1ee      	bne.n	1000b732 <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000b754:	4a5a      	ldr	r2, [pc, #360]	; (1000b8c0 <ble_device_init+0x264>)
1000b756:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000b758:	4b5a      	ldr	r3, [pc, #360]	; (1000b8c4 <ble_device_init+0x268>)
1000b75a:	0018      	movs	r0, r3
1000b75c:	469a      	mov	sl, r3
1000b75e:	4b5a      	ldr	r3, [pc, #360]	; (1000b8c8 <ble_device_init+0x26c>)
1000b760:	4699      	mov	r9, r3
1000b762:	4798      	blx	r3
1000b764:	4b59      	ldr	r3, [pc, #356]	; (1000b8cc <ble_device_init+0x270>)
1000b766:	485a      	ldr	r0, [pc, #360]	; (1000b8d0 <ble_device_init+0x274>)
1000b768:	4698      	mov	r8, r3
1000b76a:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000b76c:	4658      	mov	r0, fp
1000b76e:	4b59      	ldr	r3, [pc, #356]	; (1000b8d4 <ble_device_init+0x278>)
1000b770:	4798      	blx	r3
1000b772:	2800      	cmp	r0, #0
1000b774:	d15e      	bne.n	1000b834 <ble_device_init+0x1d8>
1000b776:	002b      	movs	r3, r5
1000b778:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b77a:	682a      	ldr	r2, [r5, #0]
1000b77c:	2a00      	cmp	r2, #0
1000b77e:	d062      	beq.n	1000b846 <ble_device_init+0x1ea>
1000b780:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b782:	429d      	cmp	r5, r3
1000b784:	d1f9      	bne.n	1000b77a <ble_device_init+0x11e>
1000b786:	0023      	movs	r3, r4
1000b788:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b78a:	6822      	ldr	r2, [r4, #0]
1000b78c:	2a00      	cmp	r2, #0
1000b78e:	d06d      	beq.n	1000b86c <ble_device_init+0x210>
1000b790:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b792:	42a3      	cmp	r3, r4
1000b794:	d1f9      	bne.n	1000b78a <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000b796:	2109      	movs	r1, #9
1000b798:	484f      	ldr	r0, [pc, #316]	; (1000b8d8 <ble_device_init+0x27c>)
1000b79a:	4b50      	ldr	r3, [pc, #320]	; (1000b8dc <ble_device_init+0x280>)
1000b79c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000b79e:	2800      	cmp	r0, #0
1000b7a0:	d003      	beq.n	1000b7aa <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000b7a2:	4650      	mov	r0, sl
1000b7a4:	47c8      	blx	r9
1000b7a6:	484e      	ldr	r0, [pc, #312]	; (1000b8e0 <ble_device_init+0x284>)
1000b7a8:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b7aa:	494e      	ldr	r1, [pc, #312]	; (1000b8e4 <ble_device_init+0x288>)
1000b7ac:	2207      	movs	r2, #7
1000b7ae:	3108      	adds	r1, #8
1000b7b0:	a804      	add	r0, sp, #16
1000b7b2:	4d4d      	ldr	r5, [pc, #308]	; (1000b8e8 <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b7b4:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b7b6:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b7b8:	2226      	movs	r2, #38	; 0x26
1000b7ba:	2100      	movs	r1, #0
1000b7bc:	0020      	movs	r0, r4
1000b7be:	4b2e      	ldr	r3, [pc, #184]	; (1000b878 <ble_device_init+0x21c>)
1000b7c0:	4798      	blx	r3
	
	if (addr == NULL)
1000b7c2:	2e00      	cmp	r6, #0
1000b7c4:	d047      	beq.n	1000b856 <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b7c6:	4650      	mov	r0, sl
1000b7c8:	47c8      	blx	r9
1000b7ca:	7830      	ldrb	r0, [r6, #0]
1000b7cc:	7933      	ldrb	r3, [r6, #4]
1000b7ce:	7972      	ldrb	r2, [r6, #5]
1000b7d0:	79b1      	ldrb	r1, [r6, #6]
1000b7d2:	9003      	str	r0, [sp, #12]
1000b7d4:	7870      	ldrb	r0, [r6, #1]
1000b7d6:	9002      	str	r0, [sp, #8]
1000b7d8:	78b0      	ldrb	r0, [r6, #2]
1000b7da:	9001      	str	r0, [sp, #4]
1000b7dc:	78f0      	ldrb	r0, [r6, #3]
1000b7de:	9000      	str	r0, [sp, #0]
1000b7e0:	4842      	ldr	r0, [pc, #264]	; (1000b8ec <ble_device_init+0x290>)
1000b7e2:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000b7e4:	230a      	movs	r3, #10
1000b7e6:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b7e8:	4b41      	ldr	r3, [pc, #260]	; (1000b8f0 <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b7ea:	2207      	movs	r2, #7
1000b7ec:	0031      	movs	r1, r6
1000b7ee:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b7f0:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b7f2:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000b7f4:	2300      	movs	r3, #0
1000b7f6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000b7f8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000b7fa:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000b7fc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000b7fe:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b800:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b802:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000b804:	2380      	movs	r3, #128	; 0x80
1000b806:	009b      	lsls	r3, r3, #2
1000b808:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000b80a:	0020      	movs	r0, r4
1000b80c:	4b39      	ldr	r3, [pc, #228]	; (1000b8f4 <ble_device_init+0x298>)
1000b80e:	4798      	blx	r3
1000b810:	2800      	cmp	r0, #0
1000b812:	d11b      	bne.n	1000b84c <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000b814:	0030      	movs	r0, r6
1000b816:	4b38      	ldr	r3, [pc, #224]	; (1000b8f8 <ble_device_init+0x29c>)
1000b818:	4798      	blx	r3
1000b81a:	2800      	cmp	r0, #0
1000b81c:	d003      	beq.n	1000b826 <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000b81e:	4650      	mov	r0, sl
1000b820:	47c8      	blx	r9
1000b822:	4836      	ldr	r0, [pc, #216]	; (1000b8fc <ble_device_init+0x2a0>)
1000b824:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000b826:	b011      	add	sp, #68	; 0x44
1000b828:	bc3c      	pop	{r2, r3, r4, r5}
1000b82a:	4690      	mov	r8, r2
1000b82c:	4699      	mov	r9, r3
1000b82e:	46a2      	mov	sl, r4
1000b830:	46ab      	mov	fp, r5
1000b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000b834:	4650      	mov	r0, sl
1000b836:	47c8      	blx	r9
1000b838:	4831      	ldr	r0, [pc, #196]	; (1000b900 <ble_device_init+0x2a4>)
1000b83a:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000b83c:	4650      	mov	r0, sl
1000b83e:	47c8      	blx	r9
1000b840:	4830      	ldr	r0, [pc, #192]	; (1000b904 <ble_device_init+0x2a8>)
1000b842:	47c0      	blx	r8
1000b844:	e7fe      	b.n	1000b844 <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b846:	4b30      	ldr	r3, [pc, #192]	; (1000b908 <ble_device_init+0x2ac>)
1000b848:	602b      	str	r3, [r5, #0]
1000b84a:	e79c      	b.n	1000b786 <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000b84c:	4650      	mov	r0, sl
1000b84e:	47c8      	blx	r9
1000b850:	482e      	ldr	r0, [pc, #184]	; (1000b90c <ble_device_init+0x2b0>)
1000b852:	47c0      	blx	r8
1000b854:	e7de      	b.n	1000b814 <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b856:	a804      	add	r0, sp, #16
1000b858:	4b2d      	ldr	r3, [pc, #180]	; (1000b910 <ble_device_init+0x2b4>)
1000b85a:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b85c:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b85e:	2800      	cmp	r0, #0
1000b860:	d0b1      	beq.n	1000b7c6 <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000b862:	4650      	mov	r0, sl
1000b864:	47c8      	blx	r9
1000b866:	482b      	ldr	r0, [pc, #172]	; (1000b914 <ble_device_init+0x2b8>)
1000b868:	47c0      	blx	r8
1000b86a:	e7ac      	b.n	1000b7c6 <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b86c:	4b2a      	ldr	r3, [pc, #168]	; (1000b918 <ble_device_init+0x2bc>)
1000b86e:	6023      	str	r3, [r4, #0]
1000b870:	e791      	b.n	1000b796 <ble_device_init+0x13a>
1000b872:	46c0      	nop			; (mov r8, r8)
1000b874:	1001cdec 	.word	0x1001cdec
1000b878:	1001810b 	.word	0x1001810b
1000b87c:	1001cdf4 	.word	0x1001cdf4
1000b880:	1001d5b4 	.word	0x1001d5b4
1000b884:	1001cdf0 	.word	0x1001cdf0
1000b888:	1001d5ec 	.word	0x1001d5ec
1000b88c:	1001d5e4 	.word	0x1001d5e4
1000b890:	1001d920 	.word	0x1001d920
1000b894:	1001b9ec 	.word	0x1001b9ec
1000b898:	1001bdec 	.word	0x1001bdec
1000b89c:	1001d5c8 	.word	0x1001d5c8
1000b8a0:	1001d5a0 	.word	0x1001d5a0
1000b8a4:	1001d58c 	.word	0x1001d58c
1000b8a8:	1001d5e8 	.word	0x1001d5e8
1000b8ac:	1001d2f4 	.word	0x1001d2f4
1000b8b0:	1001d2f0 	.word	0x1001d2f0
1000b8b4:	1001d578 	.word	0x1001d578
1000b8b8:	1001db2c 	.word	0x1001db2c
1000b8bc:	1001d308 	.word	0x1001d308
1000b8c0:	1001d574 	.word	0x1001d574
1000b8c4:	10019518 	.word	0x10019518
1000b8c8:	10018375 	.word	0x10018375
1000b8cc:	10018255 	.word	0x10018255
1000b8d0:	1001a884 	.word	0x1001a884
1000b8d4:	1000e9b1 	.word	0x1000e9b1
1000b8d8:	1001a8f4 	.word	0x1001a8f4
1000b8dc:	1000e8c9 	.word	0x1000e8c9
1000b8e0:	1001a900 	.word	0x1001a900
1000b8e4:	1001a498 	.word	0x1001a498
1000b8e8:	100180cf 	.word	0x100180cf
1000b8ec:	1001a930 	.word	0x1001a930
1000b8f0:	00003a98 	.word	0x00003a98
1000b8f4:	1000e921 	.word	0x1000e921
1000b8f8:	1000eb65 	.word	0x1000eb65
1000b8fc:	1001a98c 	.word	0x1001a98c
1000b900:	1001a898 	.word	0x1001a898
1000b904:	1001a8b8 	.word	0x1001a8b8
1000b908:	1001aaf0 	.word	0x1001aaf0
1000b90c:	1001a968 	.word	0x1001a968
1000b910:	1000e8fd 	.word	0x1000e8fd
1000b914:	1001a918 	.word	0x1001a918
1000b918:	1001a4b4 	.word	0x1001a4b4

1000b91c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000b91c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000b91e:	2201      	movs	r2, #1
1000b920:	2101      	movs	r1, #1
1000b922:	4b06      	ldr	r3, [pc, #24]	; (1000b93c <ble_send_slave_sec_request+0x20>)
1000b924:	4798      	blx	r3
1000b926:	2800      	cmp	r0, #0
1000b928:	d006      	beq.n	1000b938 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000b92a:	4b05      	ldr	r3, [pc, #20]	; (1000b940 <ble_send_slave_sec_request+0x24>)
1000b92c:	4805      	ldr	r0, [pc, #20]	; (1000b944 <ble_send_slave_sec_request+0x28>)
1000b92e:	4798      	blx	r3
1000b930:	4805      	ldr	r0, [pc, #20]	; (1000b948 <ble_send_slave_sec_request+0x2c>)
1000b932:	4b06      	ldr	r3, [pc, #24]	; (1000b94c <ble_send_slave_sec_request+0x30>)
1000b934:	4798      	blx	r3
1000b936:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000b938:	bd10      	pop	{r4, pc}
1000b93a:	46c0      	nop			; (mov r8, r8)
1000b93c:	1000f0f1 	.word	0x1000f0f1
1000b940:	10018375 	.word	0x10018375
1000b944:	10019518 	.word	0x10019518
1000b948:	1001a9c8 	.word	0x1001a9c8
1000b94c:	10018255 	.word	0x10018255

1000b950 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b950:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b952:	464d      	mov	r5, r9
1000b954:	4644      	mov	r4, r8
1000b956:	465f      	mov	r7, fp
1000b958:	4656      	mov	r6, sl
1000b95a:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b95c:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b95e:	b099      	sub	sp, #100	; 0x64
1000b960:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b962:	2d00      	cmp	r5, #0
1000b964:	d156      	bne.n	1000ba14 <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000b966:	4b69      	ldr	r3, [pc, #420]	; (1000bb0c <ble_connected_state_handler+0x1bc>)
1000b968:	4699      	mov	r9, r3
1000b96a:	0018      	movs	r0, r3
1000b96c:	4b68      	ldr	r3, [pc, #416]	; (1000bb10 <ble_connected_state_handler+0x1c0>)
1000b96e:	4698      	mov	r8, r3
1000b970:	4798      	blx	r3
1000b972:	7860      	ldrb	r0, [r4, #1]
1000b974:	7923      	ldrb	r3, [r4, #4]
1000b976:	7962      	ldrb	r2, [r4, #5]
1000b978:	79a1      	ldrb	r1, [r4, #6]
1000b97a:	9002      	str	r0, [sp, #8]
1000b97c:	78a0      	ldrb	r0, [r4, #2]
1000b97e:	4f65      	ldr	r7, [pc, #404]	; (1000bb14 <ble_connected_state_handler+0x1c4>)
1000b980:	9001      	str	r0, [sp, #4]
1000b982:	78e0      	ldrb	r0, [r4, #3]
1000b984:	9000      	str	r0, [sp, #0]
1000b986:	4864      	ldr	r0, [pc, #400]	; (1000bb18 <ble_connected_state_handler+0x1c8>)
1000b988:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000b98a:	4648      	mov	r0, r9
1000b98c:	47c0      	blx	r8
1000b98e:	8921      	ldrh	r1, [r4, #8]
1000b990:	4862      	ldr	r0, [pc, #392]	; (1000bb1c <ble_connected_state_handler+0x1cc>)
1000b992:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000b994:	2212      	movs	r2, #18
1000b996:	0021      	movs	r1, r4
1000b998:	4b61      	ldr	r3, [pc, #388]	; (1000bb20 <ble_connected_state_handler+0x1d0>)
1000b99a:	4862      	ldr	r0, [pc, #392]	; (1000bb24 <ble_connected_state_handler+0x1d4>)
1000b99c:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b99e:	4b62      	ldr	r3, [pc, #392]	; (1000bb28 <ble_connected_state_handler+0x1d8>)
1000b9a0:	2207      	movs	r2, #7
1000b9a2:	0018      	movs	r0, r3
1000b9a4:	469b      	mov	fp, r3
1000b9a6:	0021      	movs	r1, r4
1000b9a8:	4b60      	ldr	r3, [pc, #384]	; (1000bb2c <ble_connected_state_handler+0x1dc>)
1000b9aa:	4798      	blx	r3
1000b9ac:	4682      	mov	sl, r0
1000b9ae:	2800      	cmp	r0, #0
1000b9b0:	d140      	bne.n	1000ba34 <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000b9b2:	4b5f      	ldr	r3, [pc, #380]	; (1000bb30 <ble_connected_state_handler+0x1e0>)
1000b9b4:	781b      	ldrb	r3, [r3, #0]
1000b9b6:	2b04      	cmp	r3, #4
1000b9b8:	d900      	bls.n	1000b9bc <ble_connected_state_handler+0x6c>
1000b9ba:	e076      	b.n	1000baaa <ble_connected_state_handler+0x15a>
1000b9bc:	4b5d      	ldr	r3, [pc, #372]	; (1000bb34 <ble_connected_state_handler+0x1e4>)
1000b9be:	2600      	movs	r6, #0
1000b9c0:	46a8      	mov	r8, r5
1000b9c2:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b9c4:	2207      	movs	r2, #7
1000b9c6:	0021      	movs	r1, r4
1000b9c8:	0038      	movs	r0, r7
1000b9ca:	4b58      	ldr	r3, [pc, #352]	; (1000bb2c <ble_connected_state_handler+0x1dc>)
1000b9cc:	4798      	blx	r3
1000b9ce:	2800      	cmp	r0, #0
1000b9d0:	d100      	bne.n	1000b9d4 <ble_connected_state_handler+0x84>
1000b9d2:	e076      	b.n	1000bac2 <ble_connected_state_handler+0x172>
1000b9d4:	3601      	adds	r6, #1
1000b9d6:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b9d8:	2e05      	cmp	r6, #5
1000b9da:	d1f3      	bne.n	1000b9c4 <ble_connected_state_handler+0x74>
1000b9dc:	4645      	mov	r5, r8
1000b9de:	2700      	movs	r7, #0
1000b9e0:	4b55      	ldr	r3, [pc, #340]	; (1000bb38 <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b9e2:	781a      	ldrb	r2, [r3, #0]
1000b9e4:	2a00      	cmp	r2, #0
1000b9e6:	d100      	bne.n	1000b9ea <ble_connected_state_handler+0x9a>
1000b9e8:	e07d      	b.n	1000bae6 <ble_connected_state_handler+0x196>
1000b9ea:	3701      	adds	r7, #1
1000b9ec:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b9ee:	2f05      	cmp	r7, #5
1000b9f0:	d1f7      	bne.n	1000b9e2 <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b9f2:	4653      	mov	r3, sl
1000b9f4:	2b00      	cmp	r3, #0
1000b9f6:	d147      	bne.n	1000ba88 <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000b9f8:	017b      	lsls	r3, r7, #5
1000b9fa:	1bdf      	subs	r7, r3, r7
1000b9fc:	4b4d      	ldr	r3, [pc, #308]	; (1000bb34 <ble_connected_state_handler+0x1e4>)
1000b9fe:	00bf      	lsls	r7, r7, #2
1000ba00:	469c      	mov	ip, r3
1000ba02:	2305      	movs	r3, #5
1000ba04:	4467      	add	r7, ip
1000ba06:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ba08:	2207      	movs	r2, #7
1000ba0a:	2100      	movs	r1, #0
1000ba0c:	4658      	mov	r0, fp
1000ba0e:	4b4b      	ldr	r3, [pc, #300]	; (1000bb3c <ble_connected_state_handler+0x1ec>)
1000ba10:	4798      	blx	r3
1000ba12:	e007      	b.n	1000ba24 <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000ba14:	4b3e      	ldr	r3, [pc, #248]	; (1000bb10 <ble_connected_state_handler+0x1c0>)
1000ba16:	483d      	ldr	r0, [pc, #244]	; (1000bb0c <ble_connected_state_handler+0x1bc>)
1000ba18:	4798      	blx	r3
1000ba1a:	7aa1      	ldrb	r1, [r4, #10]
1000ba1c:	4848      	ldr	r0, [pc, #288]	; (1000bb40 <ble_connected_state_handler+0x1f0>)
1000ba1e:	4b3d      	ldr	r3, [pc, #244]	; (1000bb14 <ble_connected_state_handler+0x1c4>)
1000ba20:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000ba22:	2500      	movs	r5, #0
}
1000ba24:	0028      	movs	r0, r5
1000ba26:	b019      	add	sp, #100	; 0x64
1000ba28:	bc3c      	pop	{r2, r3, r4, r5}
1000ba2a:	4690      	mov	r8, r2
1000ba2c:	4699      	mov	r9, r3
1000ba2e:	46a2      	mov	sl, r4
1000ba30:	46ab      	mov	fp, r5
1000ba32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ba34:	7823      	ldrb	r3, [r4, #0]
1000ba36:	2b02      	cmp	r3, #2
1000ba38:	d1bb      	bne.n	1000b9b2 <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ba3a:	ad04      	add	r5, sp, #16
1000ba3c:	2250      	movs	r2, #80	; 0x50
1000ba3e:	4b3f      	ldr	r3, [pc, #252]	; (1000bb3c <ble_connected_state_handler+0x1ec>)
1000ba40:	2100      	movs	r1, #0
1000ba42:	0028      	movs	r0, r5
1000ba44:	4798      	blx	r3
1000ba46:	4b3f      	ldr	r3, [pc, #252]	; (1000bb44 <ble_connected_state_handler+0x1f4>)
1000ba48:	0022      	movs	r2, r4
1000ba4a:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ba4c:	2300      	movs	r3, #0
1000ba4e:	4664      	mov	r4, ip
1000ba50:	4694      	mov	ip, r2
1000ba52:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ba54:	0022      	movs	r2, r4
1000ba56:	3610      	adds	r6, #16
1000ba58:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ba5a:	7810      	ldrb	r0, [r2, #0]
1000ba5c:	1c59      	adds	r1, r3, #1
1000ba5e:	54e8      	strb	r0, [r5, r3]
1000ba60:	b28b      	uxth	r3, r1
1000ba62:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ba64:	42b3      	cmp	r3, r6
1000ba66:	d1f8      	bne.n	1000ba5a <ble_connected_state_handler+0x10a>
1000ba68:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ba6a:	2b50      	cmp	r3, #80	; 0x50
1000ba6c:	d1f1      	bne.n	1000ba52 <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ba6e:	002a      	movs	r2, r5
1000ba70:	4661      	mov	r1, ip
1000ba72:	2005      	movs	r0, #5
1000ba74:	4b34      	ldr	r3, [pc, #208]	; (1000bb48 <ble_connected_state_handler+0x1f8>)
1000ba76:	4798      	blx	r3
1000ba78:	1e05      	subs	r5, r0, #0
1000ba7a:	d0d3      	beq.n	1000ba24 <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ba7c:	4648      	mov	r0, r9
1000ba7e:	47c0      	blx	r8
1000ba80:	4832      	ldr	r0, [pc, #200]	; (1000bb4c <ble_connected_state_handler+0x1fc>)
1000ba82:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000ba84:	25e2      	movs	r5, #226	; 0xe2
1000ba86:	e7cd      	b.n	1000ba24 <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ba88:	017b      	lsls	r3, r7, #5
1000ba8a:	1bdf      	subs	r7, r3, r7
1000ba8c:	4b29      	ldr	r3, [pc, #164]	; (1000bb34 <ble_connected_state_handler+0x1e4>)
1000ba8e:	00bf      	lsls	r7, r7, #2
1000ba90:	469c      	mov	ip, r3
1000ba92:	230a      	movs	r3, #10
1000ba94:	4467      	add	r7, ip
1000ba96:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ba98:	2207      	movs	r2, #7
1000ba9a:	2100      	movs	r1, #0
1000ba9c:	4658      	mov	r0, fp
1000ba9e:	4b27      	ldr	r3, [pc, #156]	; (1000bb3c <ble_connected_state_handler+0x1ec>)
1000baa0:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000baa2:	8920      	ldrh	r0, [r4, #8]
1000baa4:	4b2a      	ldr	r3, [pc, #168]	; (1000bb50 <ble_connected_state_handler+0x200>)
1000baa6:	4798      	blx	r3
1000baa8:	e7bc      	b.n	1000ba24 <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000baaa:	4648      	mov	r0, r9
1000baac:	47c0      	blx	r8
1000baae:	4b20      	ldr	r3, [pc, #128]	; (1000bb30 <ble_connected_state_handler+0x1e0>)
1000bab0:	4828      	ldr	r0, [pc, #160]	; (1000bb54 <ble_connected_state_handler+0x204>)
1000bab2:	7819      	ldrb	r1, [r3, #0]
1000bab4:	b2c9      	uxtb	r1, r1
1000bab6:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000bab8:	8920      	ldrh	r0, [r4, #8]
1000baba:	2113      	movs	r1, #19
1000babc:	4b26      	ldr	r3, [pc, #152]	; (1000bb58 <ble_connected_state_handler+0x208>)
1000babe:	4798      	blx	r3
1000bac0:	e7b0      	b.n	1000ba24 <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bac2:	4a1c      	ldr	r2, [pc, #112]	; (1000bb34 <ble_connected_state_handler+0x1e4>)
1000bac4:	0037      	movs	r7, r6
1000bac6:	4694      	mov	ip, r2
1000bac8:	4645      	mov	r5, r8
1000baca:	0173      	lsls	r3, r6, #5
1000bacc:	1b9b      	subs	r3, r3, r6
1000bace:	009b      	lsls	r3, r3, #2
1000bad0:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bad2:	2202      	movs	r2, #2
1000bad4:	335e      	adds	r3, #94	; 0x5e
1000bad6:	701a      	strb	r2, [r3, #0]
1000bad8:	0021      	movs	r1, r4
1000bada:	3205      	adds	r2, #5
1000badc:	4658      	mov	r0, fp
1000bade:	4b13      	ldr	r3, [pc, #76]	; (1000bb2c <ble_connected_state_handler+0x1dc>)
1000bae0:	4798      	blx	r3
1000bae2:	4682      	mov	sl, r0
1000bae4:	e785      	b.n	1000b9f2 <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bae6:	4a13      	ldr	r2, [pc, #76]	; (1000bb34 <ble_connected_state_handler+0x1e4>)
1000bae8:	017b      	lsls	r3, r7, #5
1000baea:	4690      	mov	r8, r2
1000baec:	1bdb      	subs	r3, r3, r7
1000baee:	009b      	lsls	r3, r3, #2
1000baf0:	4498      	add	r8, r3
1000baf2:	2212      	movs	r2, #18
1000baf4:	4b0a      	ldr	r3, [pc, #40]	; (1000bb20 <ble_connected_state_handler+0x1d0>)
1000baf6:	0021      	movs	r1, r4
1000baf8:	4640      	mov	r0, r8
1000bafa:	4798      	blx	r3
						ble_device_count++;
1000bafc:	4b0c      	ldr	r3, [pc, #48]	; (1000bb30 <ble_connected_state_handler+0x1e0>)
1000bafe:	4a0c      	ldr	r2, [pc, #48]	; (1000bb30 <ble_connected_state_handler+0x1e0>)
1000bb00:	781b      	ldrb	r3, [r3, #0]
1000bb02:	3301      	adds	r3, #1
1000bb04:	b2db      	uxtb	r3, r3
1000bb06:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bb08:	4643      	mov	r3, r8
1000bb0a:	e7e2      	b.n	1000bad2 <ble_connected_state_handler+0x182>
1000bb0c:	10019518 	.word	0x10019518
1000bb10:	10018375 	.word	0x10018375
1000bb14:	10018255 	.word	0x10018255
1000bb18:	1001a9e8 	.word	0x1001a9e8
1000bb1c:	1001aa2c 	.word	0x1001aa2c
1000bb20:	100180cf 	.word	0x100180cf
1000bb24:	1001d5b4 	.word	0x1001d5b4
1000bb28:	1001cdf4 	.word	0x1001cdf4
1000bb2c:	100180b1 	.word	0x100180b1
1000bb30:	1001d574 	.word	0x1001d574
1000bb34:	1001d308 	.word	0x1001d308
1000bb38:	1001d366 	.word	0x1001d366
1000bb3c:	1001810b 	.word	0x1001810b
1000bb40:	1001aaa4 	.word	0x1001aaa4
1000bb44:	1001d34e 	.word	0x1001d34e
1000bb48:	1000ec05 	.word	0x1000ec05
1000bb4c:	1001aa44 	.word	0x1001aa44
1000bb50:	1000b91d 	.word	0x1000b91d
1000bb54:	1001aa68 	.word	0x1001aa68
1000bb58:	1000ebd9 	.word	0x1000ebd9

1000bb5c <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bb5e:	7803      	ldrb	r3, [r0, #0]
1000bb60:	2b00      	cmp	r3, #0
1000bb62:	d10d      	bne.n	1000bb80 <ble_resolv_rand_addr_handler+0x24>
1000bb64:	2400      	movs	r4, #0
1000bb66:	4d21      	ldr	r5, [pc, #132]	; (1000bbec <ble_resolv_rand_addr_handler+0x90>)
1000bb68:	4f21      	ldr	r7, [pc, #132]	; (1000bbf0 <ble_resolv_rand_addr_handler+0x94>)
1000bb6a:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000bb6c:	2210      	movs	r2, #16
1000bb6e:	0029      	movs	r1, r5
1000bb70:	0030      	movs	r0, r6
1000bb72:	47b8      	blx	r7
1000bb74:	2800      	cmp	r0, #0
1000bb76:	d00e      	beq.n	1000bb96 <ble_resolv_rand_addr_handler+0x3a>
1000bb78:	3401      	adds	r4, #1
1000bb7a:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb7c:	2c05      	cmp	r4, #5
1000bb7e:	d1f5      	bne.n	1000bb6c <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bb80:	2300      	movs	r3, #0
1000bb82:	4a1c      	ldr	r2, [pc, #112]	; (1000bbf4 <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bb84:	7811      	ldrb	r1, [r2, #0]
1000bb86:	2900      	cmp	r1, #0
1000bb88:	d019      	beq.n	1000bbbe <ble_resolv_rand_addr_handler+0x62>
1000bb8a:	3301      	adds	r3, #1
1000bb8c:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb8e:	2b05      	cmp	r3, #5
1000bb90:	d1f8      	bne.n	1000bb84 <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000bb92:	2000      	movs	r0, #0
1000bb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bb96:	0160      	lsls	r0, r4, #5
1000bb98:	1b00      	subs	r0, r0, r4
1000bb9a:	0084      	lsls	r4, r0, #2
1000bb9c:	4816      	ldr	r0, [pc, #88]	; (1000bbf8 <ble_resolv_rand_addr_handler+0x9c>)
1000bb9e:	2202      	movs	r2, #2
1000bba0:	1900      	adds	r0, r0, r4
1000bba2:	0003      	movs	r3, r0
1000bba4:	335e      	adds	r3, #94	; 0x5e
1000bba6:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bba8:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bbaa:	4c14      	ldr	r4, [pc, #80]	; (1000bbfc <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bbac:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bbae:	3210      	adds	r2, #16
1000bbb0:	0021      	movs	r1, r4
1000bbb2:	4b13      	ldr	r3, [pc, #76]	; (1000bc00 <ble_resolv_rand_addr_handler+0xa4>)
1000bbb4:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000bbb6:	8920      	ldrh	r0, [r4, #8]
1000bbb8:	4b12      	ldr	r3, [pc, #72]	; (1000bc04 <ble_resolv_rand_addr_handler+0xa8>)
1000bbba:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000bbbc:	e7e9      	b.n	1000bb92 <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bbbe:	015d      	lsls	r5, r3, #5
1000bbc0:	1aeb      	subs	r3, r5, r3
1000bbc2:	4d0d      	ldr	r5, [pc, #52]	; (1000bbf8 <ble_resolv_rand_addr_handler+0x9c>)
1000bbc4:	009b      	lsls	r3, r3, #2
1000bbc6:	4c0d      	ldr	r4, [pc, #52]	; (1000bbfc <ble_resolv_rand_addr_handler+0xa0>)
1000bbc8:	18ed      	adds	r5, r5, r3
1000bbca:	2212      	movs	r2, #18
1000bbcc:	4b0c      	ldr	r3, [pc, #48]	; (1000bc00 <ble_resolv_rand_addr_handler+0xa4>)
1000bbce:	0021      	movs	r1, r4
1000bbd0:	0028      	movs	r0, r5
1000bbd2:	4798      	blx	r3
				ble_device_count++;
1000bbd4:	4a0c      	ldr	r2, [pc, #48]	; (1000bc08 <ble_resolv_rand_addr_handler+0xac>)
1000bbd6:	7813      	ldrb	r3, [r2, #0]
1000bbd8:	3301      	adds	r3, #1
1000bbda:	b2db      	uxtb	r3, r3
1000bbdc:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bbde:	002b      	movs	r3, r5
1000bbe0:	2202      	movs	r2, #2
1000bbe2:	335e      	adds	r3, #94	; 0x5e
1000bbe4:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bbe6:	230a      	movs	r3, #10
1000bbe8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000bbea:	e7e4      	b.n	1000bbb6 <ble_resolv_rand_addr_handler+0x5a>
1000bbec:	1001d34e 	.word	0x1001d34e
1000bbf0:	100180b1 	.word	0x100180b1
1000bbf4:	1001d366 	.word	0x1001d366
1000bbf8:	1001d308 	.word	0x1001d308
1000bbfc:	1001d5b4 	.word	0x1001d5b4
1000bc00:	100180cf 	.word	0x100180cf
1000bc04:	1000b91d 	.word	0x1000b91d
1000bc08:	1001d574 	.word	0x1001d574

1000bc0c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bc0e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000bc10:	283b      	cmp	r0, #59	; 0x3b
1000bc12:	d865      	bhi.n	1000bce0 <ble_event_manager+0xd4>
1000bc14:	4b36      	ldr	r3, [pc, #216]	; (1000bcf0 <ble_event_manager+0xe4>)
1000bc16:	0086      	lsls	r6, r0, #2
1000bc18:	599b      	ldr	r3, [r3, r6]
1000bc1a:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bc1c:	4b35      	ldr	r3, [pc, #212]	; (1000bcf4 <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000bc1e:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bc20:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000bc22:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bc24:	2b00      	cmp	r3, #0
1000bc26:	d005      	beq.n	1000bc34 <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc28:	0080      	lsls	r0, r0, #2
1000bc2a:	58c3      	ldr	r3, [r0, r3]
1000bc2c:	2b00      	cmp	r3, #0
1000bc2e:	d001      	beq.n	1000bc34 <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000bc30:	0028      	movs	r0, r5
1000bc32:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000bc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000bc36:	4b30      	ldr	r3, [pc, #192]	; (1000bcf8 <ble_event_manager+0xec>)
1000bc38:	681b      	ldr	r3, [r3, #0]
1000bc3a:	2b00      	cmp	r3, #0
1000bc3c:	d0fa      	beq.n	1000bc34 <ble_event_manager+0x28>
			ble_user_event_cb();
1000bc3e:	4798      	blx	r3
1000bc40:	e7f8      	b.n	1000bc34 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc42:	2400      	movs	r4, #0
1000bc44:	4f2d      	ldr	r7, [pc, #180]	; (1000bcfc <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000bc46:	593b      	ldr	r3, [r7, r4]
1000bc48:	2b00      	cmp	r3, #0
1000bc4a:	d004      	beq.n	1000bc56 <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc4c:	599b      	ldr	r3, [r3, r6]
1000bc4e:	2b00      	cmp	r3, #0
1000bc50:	d001      	beq.n	1000bc56 <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000bc52:	0028      	movs	r0, r5
1000bc54:	4798      	blx	r3
1000bc56:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000bc58:	2c14      	cmp	r4, #20
1000bc5a:	d1f4      	bne.n	1000bc46 <ble_event_manager+0x3a>
1000bc5c:	e7ea      	b.n	1000bc34 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc5e:	2600      	movs	r6, #0
1000bc60:	3813      	subs	r0, #19
1000bc62:	b2c4      	uxtb	r4, r0
1000bc64:	4f26      	ldr	r7, [pc, #152]	; (1000bd00 <ble_event_manager+0xf4>)
1000bc66:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000bc68:	59bb      	ldr	r3, [r7, r6]
1000bc6a:	2b00      	cmp	r3, #0
1000bc6c:	d004      	beq.n	1000bc78 <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc6e:	591b      	ldr	r3, [r3, r4]
1000bc70:	2b00      	cmp	r3, #0
1000bc72:	d001      	beq.n	1000bc78 <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000bc74:	0028      	movs	r0, r5
1000bc76:	4798      	blx	r3
1000bc78:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000bc7a:	2e14      	cmp	r6, #20
1000bc7c:	d1f4      	bne.n	1000bc68 <ble_event_manager+0x5c>
1000bc7e:	e7d9      	b.n	1000bc34 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc80:	2600      	movs	r6, #0
1000bc82:	381d      	subs	r0, #29
1000bc84:	b2c4      	uxtb	r4, r0
1000bc86:	4f1f      	ldr	r7, [pc, #124]	; (1000bd04 <ble_event_manager+0xf8>)
1000bc88:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000bc8a:	59bb      	ldr	r3, [r7, r6]
1000bc8c:	2b00      	cmp	r3, #0
1000bc8e:	d004      	beq.n	1000bc9a <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bc90:	591b      	ldr	r3, [r3, r4]
1000bc92:	2b00      	cmp	r3, #0
1000bc94:	d001      	beq.n	1000bc9a <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000bc96:	0028      	movs	r0, r5
1000bc98:	4798      	blx	r3
1000bc9a:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000bc9c:	2e14      	cmp	r6, #20
1000bc9e:	d1f4      	bne.n	1000bc8a <ble_event_manager+0x7e>
1000bca0:	e7c8      	b.n	1000bc34 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000bca2:	4b19      	ldr	r3, [pc, #100]	; (1000bd08 <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000bca4:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000bca6:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000bca8:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000bcaa:	2b00      	cmp	r3, #0
1000bcac:	d1bc      	bne.n	1000bc28 <ble_event_manager+0x1c>
1000bcae:	e7c1      	b.n	1000bc34 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000bcb0:	4b16      	ldr	r3, [pc, #88]	; (1000bd0c <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000bcb2:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000bcb4:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000bcb6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000bcb8:	2b00      	cmp	r3, #0
1000bcba:	d1b5      	bne.n	1000bc28 <ble_event_manager+0x1c>
1000bcbc:	e7ba      	b.n	1000bc34 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bcbe:	2600      	movs	r6, #0
1000bcc0:	3836      	subs	r0, #54	; 0x36
1000bcc2:	b2c4      	uxtb	r4, r0
1000bcc4:	4f12      	ldr	r7, [pc, #72]	; (1000bd10 <ble_event_manager+0x104>)
1000bcc6:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000bcc8:	59bb      	ldr	r3, [r7, r6]
1000bcca:	2b00      	cmp	r3, #0
1000bccc:	d004      	beq.n	1000bcd8 <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bcce:	591b      	ldr	r3, [r3, r4]
1000bcd0:	2b00      	cmp	r3, #0
1000bcd2:	d001      	beq.n	1000bcd8 <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000bcd4:	0028      	movs	r0, r5
1000bcd6:	4798      	blx	r3
1000bcd8:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000bcda:	2e14      	cmp	r6, #20
1000bcdc:	d1f4      	bne.n	1000bcc8 <ble_event_manager+0xbc>
1000bcde:	e7a9      	b.n	1000bc34 <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000bce0:	4d0c      	ldr	r5, [pc, #48]	; (1000bd14 <ble_event_manager+0x108>)
1000bce2:	4c0d      	ldr	r4, [pc, #52]	; (1000bd18 <ble_event_manager+0x10c>)
1000bce4:	0028      	movs	r0, r5
1000bce6:	47a0      	blx	r4
1000bce8:	0028      	movs	r0, r5
1000bcea:	47a0      	blx	r4
	}
	break;		
	}
}
1000bcec:	e7a2      	b.n	1000bc34 <ble_event_manager+0x28>
1000bcee:	46c0      	nop			; (mov r8, r8)
1000bcf0:	1001a3a8 	.word	0x1001a3a8
1000bcf4:	1001db2c 	.word	0x1001db2c
1000bcf8:	1001cdec 	.word	0x1001cdec
1000bcfc:	1001d58c 	.word	0x1001d58c
1000bd00:	1001d5a0 	.word	0x1001d5a0
1000bd04:	1001d2f4 	.word	0x1001d2f4
1000bd08:	1001d5e8 	.word	0x1001d5e8
1000bd0c:	1001d2f0 	.word	0x1001d2f0
1000bd10:	1001d578 	.word	0x1001d578
1000bd14:	10019518 	.word	0x10019518
1000bd18:	10018375 	.word	0x10018375

1000bd1c <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000bd1e:	4d0f      	ldr	r5, [pc, #60]	; (1000bd5c <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000bd20:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000bd22:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000bd24:	2b01      	cmp	r3, #1
1000bd26:	d015      	beq.n	1000bd54 <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000bd28:	4e0d      	ldr	r6, [pc, #52]	; (1000bd60 <ble_event_task+0x44>)
1000bd2a:	4f0e      	ldr	r7, [pc, #56]	; (1000bd64 <ble_event_task+0x48>)
1000bd2c:	0022      	movs	r2, r4
1000bd2e:	4b0e      	ldr	r3, [pc, #56]	; (1000bd68 <ble_event_task+0x4c>)
1000bd30:	0031      	movs	r1, r6
1000bd32:	0038      	movs	r0, r7
1000bd34:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000bd36:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000bd38:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000bd3a:	2b01      	cmp	r3, #1
1000bd3c:	d007      	beq.n	1000bd4e <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000bd3e:	2c00      	cmp	r4, #0
1000bd40:	d103      	bne.n	1000bd4a <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000bd42:	7838      	ldrb	r0, [r7, #0]
1000bd44:	0031      	movs	r1, r6
1000bd46:	4b09      	ldr	r3, [pc, #36]	; (1000bd6c <ble_event_task+0x50>)
1000bd48:	4798      	blx	r3
    }
    
    return status;
}
1000bd4a:	0020      	movs	r0, r4
1000bd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000bd4e:	4b08      	ldr	r3, [pc, #32]	; (1000bd70 <ble_event_task+0x54>)
1000bd50:	4798      	blx	r3
1000bd52:	e7f4      	b.n	1000bd3e <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000bd54:	4b07      	ldr	r3, [pc, #28]	; (1000bd74 <ble_event_task+0x58>)
1000bd56:	4798      	blx	r3
1000bd58:	e7e6      	b.n	1000bd28 <ble_event_task+0xc>
1000bd5a:	46c0      	nop			; (mov r8, r8)
1000bd5c:	1001cdfb 	.word	0x1001cdfb
1000bd60:	1001d920 	.word	0x1001d920
1000bd64:	1001d5e4 	.word	0x1001d5e4
1000bd68:	1000e159 	.word	0x1000e159
1000bd6c:	1000bc0d 	.word	0x1000bc0d
1000bd70:	1000c669 	.word	0x1000c669
1000bd74:	1000c691 	.word	0x1000c691

1000bd78 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000bd78:	b570      	push	{r4, r5, r6, lr}
1000bd7a:	0006      	movs	r6, r0
1000bd7c:	000d      	movs	r5, r1
1000bd7e:	4c03      	ldr	r4, [pc, #12]	; (1000bd8c <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000bd80:	0029      	movs	r1, r5
1000bd82:	0030      	movs	r0, r6
1000bd84:	47a0      	blx	r4
1000bd86:	2800      	cmp	r0, #0
1000bd88:	d1fa      	bne.n	1000bd80 <usart_serial_getchar+0x8>
}
1000bd8a:	bd70      	pop	{r4, r5, r6, pc}
1000bd8c:	1000cce5 	.word	0x1000cce5

1000bd90 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000bd90:	b570      	push	{r4, r5, r6, lr}
1000bd92:	0006      	movs	r6, r0
1000bd94:	000d      	movs	r5, r1
1000bd96:	4c03      	ldr	r4, [pc, #12]	; (1000bda4 <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000bd98:	0029      	movs	r1, r5
1000bd9a:	0030      	movs	r0, r6
1000bd9c:	47a0      	blx	r4
1000bd9e:	2800      	cmp	r0, #0
1000bda0:	d1fa      	bne.n	1000bd98 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000bda2:	bd70      	pop	{r4, r5, r6, pc}
1000bda4:	1000ccd5 	.word	0x1000ccd5

1000bda8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000bda8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000bdaa:	4b0e      	ldr	r3, [pc, #56]	; (1000bde4 <uart_read_complete_callback+0x3c>)
1000bdac:	781a      	ldrb	r2, [r3, #0]
1000bdae:	2a01      	cmp	r2, #1
1000bdb0:	d00c      	beq.n	1000bdcc <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000bdb2:	4b0d      	ldr	r3, [pc, #52]	; (1000bde8 <uart_read_complete_callback+0x40>)
1000bdb4:	681b      	ldr	r3, [r3, #0]
1000bdb6:	2b00      	cmp	r3, #0
1000bdb8:	d007      	beq.n	1000bdca <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000bdba:	4c0c      	ldr	r4, [pc, #48]	; (1000bdec <uart_read_complete_callback+0x44>)
1000bdbc:	7820      	ldrb	r0, [r4, #0]
1000bdbe:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bdc0:	2201      	movs	r2, #1
1000bdc2:	0021      	movs	r1, r4
1000bdc4:	480a      	ldr	r0, [pc, #40]	; (1000bdf0 <uart_read_complete_callback+0x48>)
1000bdc6:	4b0b      	ldr	r3, [pc, #44]	; (1000bdf4 <uart_read_complete_callback+0x4c>)
1000bdc8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000bdca:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000bdcc:	3201      	adds	r2, #1
1000bdce:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000bdd0:	4b05      	ldr	r3, [pc, #20]	; (1000bde8 <uart_read_complete_callback+0x40>)
1000bdd2:	681b      	ldr	r3, [r3, #0]
1000bdd4:	2b00      	cmp	r3, #0
1000bdd6:	d1f8      	bne.n	1000bdca <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000bdd8:	2102      	movs	r1, #2
1000bdda:	4805      	ldr	r0, [pc, #20]	; (1000bdf0 <uart_read_complete_callback+0x48>)
1000bddc:	4b06      	ldr	r3, [pc, #24]	; (1000bdf8 <uart_read_complete_callback+0x50>)
1000bdde:	4798      	blx	r3
1000bde0:	e7f3      	b.n	1000bdca <uart_read_complete_callback+0x22>
1000bde2:	46c0      	nop			; (mov r8, r8)
1000bde4:	1001ce00 	.word	0x1001ce00
1000bde8:	1001ce08 	.word	0x1001ce08
1000bdec:	1001ce04 	.word	0x1001ce04
1000bdf0:	1001db30 	.word	0x1001db30
1000bdf4:	1000ccf9 	.word	0x1000ccf9
1000bdf8:	1000cd55 	.word	0x1000cd55

1000bdfc <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000bdfc:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000bdfe:	2100      	movs	r1, #0
1000be00:	4b19      	ldr	r3, [pc, #100]	; (1000be68 <serial_console_init+0x6c>)
1000be02:	2000      	movs	r0, #0
1000be04:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000be06:	4c19      	ldr	r4, [pc, #100]	; (1000be6c <serial_console_init+0x70>)
1000be08:	4b19      	ldr	r3, [pc, #100]	; (1000be70 <serial_console_init+0x74>)
1000be0a:	0020      	movs	r0, r4
1000be0c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000be0e:	23e1      	movs	r3, #225	; 0xe1
1000be10:	025b      	lsls	r3, r3, #9
1000be12:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000be14:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000be16:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000be18:	4d16      	ldr	r5, [pc, #88]	; (1000be74 <serial_console_init+0x78>)
1000be1a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000be1c:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000be1e:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000be20:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000be22:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000be24:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000be26:	3201      	adds	r2, #1
1000be28:	4b13      	ldr	r3, [pc, #76]	; (1000be78 <serial_console_init+0x7c>)
1000be2a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000be2c:	3201      	adds	r2, #1
1000be2e:	601d      	str	r5, [r3, #0]
1000be30:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000be32:	4b12      	ldr	r3, [pc, #72]	; (1000be7c <serial_console_init+0x80>)
1000be34:	4a12      	ldr	r2, [pc, #72]	; (1000be80 <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000be36:	0028      	movs	r0, r5
1000be38:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000be3a:	4a12      	ldr	r2, [pc, #72]	; (1000be84 <serial_console_init+0x88>)
1000be3c:	4b12      	ldr	r3, [pc, #72]	; (1000be88 <serial_console_init+0x8c>)
1000be3e:	4913      	ldr	r1, [pc, #76]	; (1000be8c <serial_console_init+0x90>)
1000be40:	601a      	str	r2, [r3, #0]
1000be42:	0022      	movs	r2, r4
1000be44:	4b12      	ldr	r3, [pc, #72]	; (1000be90 <serial_console_init+0x94>)
1000be46:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000be48:	4e12      	ldr	r6, [pc, #72]	; (1000be94 <serial_console_init+0x98>)
1000be4a:	4c13      	ldr	r4, [pc, #76]	; (1000be98 <serial_console_init+0x9c>)
1000be4c:	6833      	ldr	r3, [r6, #0]
1000be4e:	2100      	movs	r1, #0
1000be50:	6898      	ldr	r0, [r3, #8]
1000be52:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000be54:	6833      	ldr	r3, [r6, #0]
1000be56:	2100      	movs	r1, #0
1000be58:	6858      	ldr	r0, [r3, #4]
1000be5a:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000be5c:	0028      	movs	r0, r5
1000be5e:	2202      	movs	r2, #2
1000be60:	490e      	ldr	r1, [pc, #56]	; (1000be9c <serial_console_init+0xa0>)
1000be62:	4b0f      	ldr	r3, [pc, #60]	; (1000bea0 <serial_console_init+0xa4>)
1000be64:	4798      	blx	r3
}
1000be66:	bd70      	pop	{r4, r5, r6, pc}
1000be68:	1000d499 	.word	0x1000d499
1000be6c:	1001db54 	.word	0x1001db54
1000be70:	1000cafd 	.word	0x1000cafd
1000be74:	1001db30 	.word	0x1001db30
1000be78:	1001de7c 	.word	0x1001de7c
1000be7c:	1001de78 	.word	0x1001de78
1000be80:	1000bd91 	.word	0x1000bd91
1000be84:	1000bd79 	.word	0x1000bd79
1000be88:	1001de74 	.word	0x1001de74
1000be8c:	40004000 	.word	0x40004000
1000be90:	1000cb29 	.word	0x1000cb29
1000be94:	1001b464 	.word	0x1001b464
1000be98:	10018425 	.word	0x10018425
1000be9c:	1000bda9 	.word	0x1000bda9
1000bea0:	1000cd21 	.word	0x1000cd21

1000bea4 <_time_start>:

void _time_start(unsigned int sec)
{
1000bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bea6:	4647      	mov	r7, r8
	system_clock_get_value();
1000bea8:	4c0e      	ldr	r4, [pc, #56]	; (1000bee4 <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000beaa:	b480      	push	{r7}
1000beac:	4680      	mov	r8, r0
	system_clock_get_value();
1000beae:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000beb0:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000beb2:	4f0d      	ldr	r7, [pc, #52]	; (1000bee8 <_time_start+0x44>)
1000beb4:	47b8      	blx	r7
1000beb6:	4e0d      	ldr	r6, [pc, #52]	; (1000beec <_time_start+0x48>)
1000beb8:	4a0d      	ldr	r2, [pc, #52]	; (1000bef0 <_time_start+0x4c>)
1000beba:	4b0e      	ldr	r3, [pc, #56]	; (1000bef4 <_time_start+0x50>)
1000bebc:	47b0      	blx	r6
1000bebe:	0004      	movs	r4, r0
1000bec0:	20fa      	movs	r0, #250	; 0xfa
1000bec2:	4643      	mov	r3, r8
1000bec4:	0080      	lsls	r0, r0, #2
1000bec6:	4358      	muls	r0, r3
1000bec8:	000d      	movs	r5, r1
1000beca:	47b8      	blx	r7
1000becc:	0002      	movs	r2, r0
1000bece:	000b      	movs	r3, r1
1000bed0:	0020      	movs	r0, r4
1000bed2:	0029      	movs	r1, r5
1000bed4:	47b0      	blx	r6
1000bed6:	4b08      	ldr	r3, [pc, #32]	; (1000bef8 <_time_start+0x54>)
1000bed8:	4798      	blx	r3
1000beda:	4b08      	ldr	r3, [pc, #32]	; (1000befc <_time_start+0x58>)
1000bedc:	6018      	str	r0, [r3, #0]
}
1000bede:	bc04      	pop	{r2}
1000bee0:	4690      	mov	r8, r2
1000bee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bee4:	1000d51d 	.word	0x1000d51d
1000bee8:	10017c05 	.word	0x10017c05
1000beec:	10016f79 	.word	0x10016f79
1000bef0:	19feaec7 	.word	0x19feaec7
1000bef4:	3f09d8ef 	.word	0x3f09d8ef
1000bef8:	10015261 	.word	0x10015261
1000befc:	1001cdfc 	.word	0x1001cdfc

1000bf00 <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000bf00:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000bf02:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000bf04:	4c15      	ldr	r4, [pc, #84]	; (1000bf5c <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000bf06:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000bf08:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000bf0a:	4b15      	ldr	r3, [pc, #84]	; (1000bf60 <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bf0c:	4e15      	ldr	r6, [pc, #84]	; (1000bf64 <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000bf0e:	681b      	ldr	r3, [r3, #0]
1000bf10:	2b00      	cmp	r3, #0
1000bf12:	d01d      	beq.n	1000bf50 <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000bf14:	0028      	movs	r0, r5
1000bf16:	4b14      	ldr	r3, [pc, #80]	; (1000bf68 <getchar_b11_timeout+0x68>)
1000bf18:	4798      	blx	r3
	
	string_input[0] = 0;
1000bf1a:	2300      	movs	r3, #0
1000bf1c:	4d13      	ldr	r5, [pc, #76]	; (1000bf6c <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bf1e:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000bf20:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bf22:	0029      	movs	r1, r5
1000bf24:	4b12      	ldr	r3, [pc, #72]	; (1000bf70 <getchar_b11_timeout+0x70>)
1000bf26:	0030      	movs	r0, r6
1000bf28:	4798      	blx	r3
1000bf2a:	4812      	ldr	r0, [pc, #72]	; (1000bf74 <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bf2c:	2100      	movs	r1, #0
1000bf2e:	6803      	ldr	r3, [r0, #0]
1000bf30:	e003      	b.n	1000bf3a <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000bf32:	3b01      	subs	r3, #1
1000bf34:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bf36:	2b00      	cmp	r3, #0
1000bf38:	d008      	beq.n	1000bf4c <getchar_b11_timeout+0x4c>
1000bf3a:	7822      	ldrb	r2, [r4, #0]
1000bf3c:	2a02      	cmp	r2, #2
1000bf3e:	d1f8      	bne.n	1000bf32 <getchar_b11_timeout+0x32>
1000bf40:	2900      	cmp	r1, #0
1000bf42:	d103      	bne.n	1000bf4c <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000bf44:	2300      	movs	r3, #0

	return string_input[0];
1000bf46:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000bf48:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000bf4a:	bd70      	pop	{r4, r5, r6, pc}
1000bf4c:	6003      	str	r3, [r0, #0]
1000bf4e:	e7f9      	b.n	1000bf44 <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bf50:	2102      	movs	r1, #2
1000bf52:	0030      	movs	r0, r6
1000bf54:	4b08      	ldr	r3, [pc, #32]	; (1000bf78 <getchar_b11_timeout+0x78>)
1000bf56:	4798      	blx	r3
1000bf58:	e7dc      	b.n	1000bf14 <getchar_b11_timeout+0x14>
1000bf5a:	46c0      	nop			; (mov r8, r8)
1000bf5c:	1001ce00 	.word	0x1001ce00
1000bf60:	1001ce08 	.word	0x1001ce08
1000bf64:	1001db30 	.word	0x1001db30
1000bf68:	1000bea5 	.word	0x1000bea5
1000bf6c:	1001ce04 	.word	0x1001ce04
1000bf70:	1000ccf9 	.word	0x1000ccf9
1000bf74:	1001cdfc 	.word	0x1001cdfc
1000bf78:	1000cd35 	.word	0x1000cd35

1000bf7c <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000bf7c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000bf7e:	4b0c      	ldr	r3, [pc, #48]	; (1000bfb0 <platform_event_post+0x34>)
1000bf80:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000bf82:	2c00      	cmp	r4, #0
1000bf84:	d010      	beq.n	1000bfa8 <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000bf86:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000bf88:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000bf8a:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000bf8c:	2300      	movs	r3, #0
1000bf8e:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000bf90:	4b08      	ldr	r3, [pc, #32]	; (1000bfb4 <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000bf92:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000bf94:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000bf96:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000bf98:	2a00      	cmp	r2, #0
1000bf9a:	d101      	bne.n	1000bfa0 <platform_event_post+0x24>
1000bf9c:	e005      	b.n	1000bfaa <platform_event_post+0x2e>
1000bf9e:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000bfa0:	6813      	ldr	r3, [r2, #0]
1000bfa2:	2b00      	cmp	r3, #0
1000bfa4:	d1fb      	bne.n	1000bf9e <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000bfa6:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000bfa8:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000bfaa:	601c      	str	r4, [r3, #0]
1000bfac:	e7fc      	b.n	1000bfa8 <platform_event_post+0x2c>
1000bfae:	46c0      	nop			; (mov r8, r8)
1000bfb0:	1001ce10 	.word	0x1001ce10
1000bfb4:	1001ce0c 	.word	0x1001ce0c

1000bfb8 <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000bfb8:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000bfba:	b510      	push	{r4, lr}
1000bfbc:	4c07      	ldr	r4, [pc, #28]	; (1000bfdc <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000bfbe:	4b08      	ldr	r3, [pc, #32]	; (1000bfe0 <platform_event_init+0x28>)
1000bfc0:	0020      	movs	r0, r4
1000bfc2:	601a      	str	r2, [r3, #0]
1000bfc4:	0023      	movs	r3, r4
1000bfc6:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000bfc8:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000bfca:	601a      	str	r2, [r3, #0]
1000bfcc:	330c      	adds	r3, #12
1000bfce:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000bfd0:	4283      	cmp	r3, r0
1000bfd2:	d1f9      	bne.n	1000bfc8 <platform_event_init+0x10>
1000bfd4:	4b03      	ldr	r3, [pc, #12]	; (1000bfe4 <platform_event_init+0x2c>)
1000bfd6:	346c      	adds	r4, #108	; 0x6c
1000bfd8:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000bfda:	bd10      	pop	{r4, pc}
1000bfdc:	1001ce14 	.word	0x1001ce14
1000bfe0:	1001ce0c 	.word	0x1001ce0c
1000bfe4:	1001ce10 	.word	0x1001ce10

1000bfe8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000bfe8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000bfea:	4b06      	ldr	r3, [pc, #24]	; (1000c004 <samb11_plf_resume_callback+0x1c>)
1000bfec:	4a06      	ldr	r2, [pc, #24]	; (1000c008 <samb11_plf_resume_callback+0x20>)
1000bfee:	6819      	ldr	r1, [r3, #0]
1000bff0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000bff2:	685a      	ldr	r2, [r3, #4]
1000bff4:	4b05      	ldr	r3, [pc, #20]	; (1000c00c <samb11_plf_resume_callback+0x24>)
1000bff6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000bff8:	4b05      	ldr	r3, [pc, #20]	; (1000c010 <samb11_plf_resume_callback+0x28>)
1000bffa:	681b      	ldr	r3, [r3, #0]
1000bffc:	2b00      	cmp	r3, #0
1000bffe:	d000      	beq.n	1000c002 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000c000:	4798      	blx	r3
	}
}
1000c002:	bd10      	pop	{r4, pc}
1000c004:	1001db7c 	.word	0x1001db7c
1000c008:	4000b00c 	.word	0x4000b00c
1000c00c:	4000b010 	.word	0x4000b010
1000c010:	1001de58 	.word	0x1001de58

1000c014 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000c014:	b570      	push	{r4, r5, r6, lr}
1000c016:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c018:	4b13      	ldr	r3, [pc, #76]	; (1000c068 <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c01a:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c01c:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000c01e:	4b13      	ldr	r3, [pc, #76]	; (1000c06c <at_ke_msg_send+0x58>)
1000c020:	681b      	ldr	r3, [r3, #0]
1000c022:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c024:	2c00      	cmp	r4, #0
1000c026:	d018      	beq.n	1000c05a <at_ke_msg_send+0x46>
1000c028:	88e3      	ldrh	r3, [r4, #6]
1000c02a:	2b05      	cmp	r3, #5
1000c02c:	d015      	beq.n	1000c05a <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000c02e:	07eb      	lsls	r3, r5, #31
1000c030:	d414      	bmi.n	1000c05c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000c032:	4b0f      	ldr	r3, [pc, #60]	; (1000c070 <at_ke_msg_send+0x5c>)
1000c034:	2002      	movs	r0, #2
1000c036:	681b      	ldr	r3, [r3, #0]
1000c038:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000c03a:	4b0e      	ldr	r3, [pc, #56]	; (1000c074 <at_ke_msg_send+0x60>)
1000c03c:	681b      	ldr	r3, [r3, #0]
1000c03e:	4798      	blx	r3
1000c040:	4c0d      	ldr	r4, [pc, #52]	; (1000c078 <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000c042:	2003      	movs	r0, #3
1000c044:	6823      	ldr	r3, [r4, #0]
1000c046:	4798      	blx	r3
1000c048:	2800      	cmp	r0, #0
1000c04a:	d1fa      	bne.n	1000c042 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000c04c:	4b0b      	ldr	r3, [pc, #44]	; (1000c07c <at_ke_msg_send+0x68>)
1000c04e:	3002      	adds	r0, #2
1000c050:	681b      	ldr	r3, [r3, #0]
1000c052:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000c054:	2201      	movs	r2, #1
1000c056:	4b0a      	ldr	r3, [pc, #40]	; (1000c080 <at_ke_msg_send+0x6c>)
1000c058:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000c05a:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000c05c:	4b09      	ldr	r3, [pc, #36]	; (1000c084 <at_ke_msg_send+0x70>)
1000c05e:	6818      	ldr	r0, [r3, #0]
1000c060:	4b09      	ldr	r3, [pc, #36]	; (1000c088 <at_ke_msg_send+0x74>)
1000c062:	681b      	ldr	r3, [r3, #0]
1000c064:	4798      	blx	r3
		}
	}
}
1000c066:	e7f8      	b.n	1000c05a <at_ke_msg_send+0x46>
1000c068:	4000b1ec 	.word	0x4000b1ec
1000c06c:	1001cebc 	.word	0x1001cebc
1000c070:	1001ceb4 	.word	0x1001ceb4
1000c074:	1001cec4 	.word	0x1001cec4
1000c078:	1001cea0 	.word	0x1001cea0
1000c07c:	1001cea8 	.word	0x1001cea8
1000c080:	4000b020 	.word	0x4000b020
1000c084:	1001ceac 	.word	0x1001ceac
1000c088:	1001ce9c 	.word	0x1001ce9c

1000c08c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000c08c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c08e:	4c0e      	ldr	r4, [pc, #56]	; (1000c0c8 <init_port_list+0x3c>)
1000c090:	2100      	movs	r1, #0
1000c092:	2232      	movs	r2, #50	; 0x32
1000c094:	0020      	movs	r0, r4
1000c096:	4b0d      	ldr	r3, [pc, #52]	; (1000c0cc <init_port_list+0x40>)
1000c098:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c09a:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c09c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000c09e:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000c0a0:	004a      	lsls	r2, r1, #1
1000c0a2:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000c0a4:	18a2      	adds	r2, r4, r2
1000c0a6:	7853      	ldrb	r3, [r2, #1]
1000c0a8:	3101      	adds	r1, #1
1000c0aa:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000c0ac:	b2db      	uxtb	r3, r3
1000c0ae:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c0b0:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000c0b2:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000c0b4:	2919      	cmp	r1, #25
1000c0b6:	d1f3      	bne.n	1000c0a0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000c0b8:	7863      	ldrb	r3, [r4, #1]
1000c0ba:	4383      	bics	r3, r0
1000c0bc:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000c0be:	78e3      	ldrb	r3, [r4, #3]
1000c0c0:	4383      	bics	r3, r0
1000c0c2:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000c0c4:	bd70      	pop	{r4, r5, r6, pc}
1000c0c6:	46c0      	nop			; (mov r8, r8)
1000c0c8:	1001db98 	.word	0x1001db98
1000c0cc:	1001810b 	.word	0x1001810b

1000c0d0 <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c0d2:	4644      	mov	r4, r8
1000c0d4:	465f      	mov	r7, fp
1000c0d6:	4656      	mov	r6, sl
1000c0d8:	464d      	mov	r5, r9
1000c0da:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000c0dc:	4c55      	ldr	r4, [pc, #340]	; (1000c234 <platform_driver_init+0x164>)
1000c0de:	7823      	ldrb	r3, [r4, #0]
1000c0e0:	2b00      	cmp	r3, #0
1000c0e2:	d004      	beq.n	1000c0ee <platform_driver_init+0x1e>
1000c0e4:	7823      	ldrb	r3, [r4, #0]
1000c0e6:	b2db      	uxtb	r3, r3
1000c0e8:	2b01      	cmp	r3, #1
1000c0ea:	d100      	bne.n	1000c0ee <platform_driver_init+0x1e>
1000c0ec:	e09e      	b.n	1000c22c <platform_driver_init+0x15c>
		init_port_list();
1000c0ee:	4b52      	ldr	r3, [pc, #328]	; (1000c238 <platform_driver_init+0x168>)
1000c0f0:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c0f2:	4a52      	ldr	r2, [pc, #328]	; (1000c23c <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c0f4:	4b52      	ldr	r3, [pc, #328]	; (1000c240 <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c0f6:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c0f8:	4d52      	ldr	r5, [pc, #328]	; (1000c244 <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c0fa:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000c0fc:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000c0fe:	4a52      	ldr	r2, [pc, #328]	; (1000c248 <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c100:	4952      	ldr	r1, [pc, #328]	; (1000c24c <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000c102:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c104:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c106:	4b52      	ldr	r3, [pc, #328]	; (1000c250 <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c108:	4e52      	ldr	r6, [pc, #328]	; (1000c254 <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c10a:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000c10c:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000c10e:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c110:	2300      	movs	r3, #0
1000c112:	4699      	mov	r9, r3
1000c114:	464a      	mov	r2, r9
1000c116:	4b50      	ldr	r3, [pc, #320]	; (1000c258 <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c118:	4950      	ldr	r1, [pc, #320]	; (1000c25c <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c11a:	601a      	str	r2, [r3, #0]
1000c11c:	2280      	movs	r2, #128	; 0x80
1000c11e:	2380      	movs	r3, #128	; 0x80
1000c120:	0412      	lsls	r2, r2, #16
1000c122:	50ea      	str	r2, [r5, r3]
1000c124:	4693      	mov	fp, r2
1000c126:	2280      	movs	r2, #128	; 0x80
1000c128:	0452      	lsls	r2, r2, #17
1000c12a:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c12c:	4b4c      	ldr	r3, [pc, #304]	; (1000c260 <platform_driver_init+0x190>)
1000c12e:	4692      	mov	sl, r2
1000c130:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c132:	4a4c      	ldr	r2, [pc, #304]	; (1000c264 <platform_driver_init+0x194>)
1000c134:	4b4c      	ldr	r3, [pc, #304]	; (1000c268 <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c136:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c138:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c13a:	4a4c      	ldr	r2, [pc, #304]	; (1000c26c <platform_driver_init+0x19c>)
1000c13c:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000c13e:	4a4c      	ldr	r2, [pc, #304]	; (1000c270 <platform_driver_init+0x1a0>)
1000c140:	6811      	ldr	r1, [r2, #0]
1000c142:	4a4c      	ldr	r2, [pc, #304]	; (1000c274 <platform_driver_init+0x1a4>)
1000c144:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000c146:	4a4c      	ldr	r2, [pc, #304]	; (1000c278 <platform_driver_init+0x1a8>)
1000c148:	6811      	ldr	r1, [r2, #0]
1000c14a:	4a4c      	ldr	r2, [pc, #304]	; (1000c27c <platform_driver_init+0x1ac>)
1000c14c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000c14e:	4a4c      	ldr	r2, [pc, #304]	; (1000c280 <platform_driver_init+0x1b0>)
1000c150:	494c      	ldr	r1, [pc, #304]	; (1000c284 <platform_driver_init+0x1b4>)
1000c152:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000c154:	4a4c      	ldr	r2, [pc, #304]	; (1000c288 <platform_driver_init+0x1b8>)
1000c156:	494d      	ldr	r1, [pc, #308]	; (1000c28c <platform_driver_init+0x1bc>)
1000c158:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000c15a:	4a4d      	ldr	r2, [pc, #308]	; (1000c290 <platform_driver_init+0x1c0>)
1000c15c:	4690      	mov	r8, r2
1000c15e:	4641      	mov	r1, r8
1000c160:	4a4c      	ldr	r2, [pc, #304]	; (1000c294 <platform_driver_init+0x1c4>)
1000c162:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000c164:	4a4c      	ldr	r2, [pc, #304]	; (1000c298 <platform_driver_init+0x1c8>)
1000c166:	494d      	ldr	r1, [pc, #308]	; (1000c29c <platform_driver_init+0x1cc>)
1000c168:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000c16a:	494d      	ldr	r1, [pc, #308]	; (1000c2a0 <platform_driver_init+0x1d0>)
1000c16c:	4a4d      	ldr	r2, [pc, #308]	; (1000c2a4 <platform_driver_init+0x1d4>)
1000c16e:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c170:	4f4d      	ldr	r7, [pc, #308]	; (1000c2a8 <platform_driver_init+0x1d8>)
1000c172:	4a4e      	ldr	r2, [pc, #312]	; (1000c2ac <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c174:	494e      	ldr	r1, [pc, #312]	; (1000c2b0 <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c176:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c178:	4a4e      	ldr	r2, [pc, #312]	; (1000c2b4 <platform_driver_init+0x1e4>)
1000c17a:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000c17c:	4a4e      	ldr	r2, [pc, #312]	; (1000c2b8 <platform_driver_init+0x1e8>)
1000c17e:	494f      	ldr	r1, [pc, #316]	; (1000c2bc <platform_driver_init+0x1ec>)
1000c180:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000c182:	4a4f      	ldr	r2, [pc, #316]	; (1000c2c0 <platform_driver_init+0x1f0>)
1000c184:	494f      	ldr	r1, [pc, #316]	; (1000c2c4 <platform_driver_init+0x1f4>)
1000c186:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000c188:	4a4f      	ldr	r2, [pc, #316]	; (1000c2c8 <platform_driver_init+0x1f8>)
1000c18a:	4950      	ldr	r1, [pc, #320]	; (1000c2cc <platform_driver_init+0x1fc>)
1000c18c:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000c18e:	4a50      	ldr	r2, [pc, #320]	; (1000c2d0 <platform_driver_init+0x200>)
1000c190:	4950      	ldr	r1, [pc, #320]	; (1000c2d4 <platform_driver_init+0x204>)
1000c192:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c194:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000c196:	4950      	ldr	r1, [pc, #320]	; (1000c2d8 <platform_driver_init+0x208>)
1000c198:	6833      	ldr	r3, [r6, #0]
1000c19a:	2028      	movs	r0, #40	; 0x28
1000c19c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000c19e:	6833      	ldr	r3, [r6, #0]
1000c1a0:	494e      	ldr	r1, [pc, #312]	; (1000c2dc <platform_driver_init+0x20c>)
1000c1a2:	2027      	movs	r0, #39	; 0x27
1000c1a4:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c1a6:	4b4e      	ldr	r3, [pc, #312]	; (1000c2e0 <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c1a8:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c1aa:	681a      	ldr	r2, [r3, #0]
1000c1ac:	4b4d      	ldr	r3, [pc, #308]	; (1000c2e4 <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c1ae:	484e      	ldr	r0, [pc, #312]	; (1000c2e8 <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c1b0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000c1b2:	4b4e      	ldr	r3, [pc, #312]	; (1000c2ec <platform_driver_init+0x21c>)
1000c1b4:	4a4e      	ldr	r2, [pc, #312]	; (1000c2f0 <platform_driver_init+0x220>)
1000c1b6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000c1b8:	4b4e      	ldr	r3, [pc, #312]	; (1000c2f4 <platform_driver_init+0x224>)
1000c1ba:	4a4f      	ldr	r2, [pc, #316]	; (1000c2f8 <platform_driver_init+0x228>)
1000c1bc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000c1be:	4b4f      	ldr	r3, [pc, #316]	; (1000c2fc <platform_driver_init+0x22c>)
1000c1c0:	4a4f      	ldr	r2, [pc, #316]	; (1000c300 <platform_driver_init+0x230>)
1000c1c2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000c1c4:	4b4f      	ldr	r3, [pc, #316]	; (1000c304 <platform_driver_init+0x234>)
1000c1c6:	4a50      	ldr	r2, [pc, #320]	; (1000c308 <platform_driver_init+0x238>)
1000c1c8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000c1ca:	4b50      	ldr	r3, [pc, #320]	; (1000c30c <platform_driver_init+0x23c>)
1000c1cc:	4a50      	ldr	r2, [pc, #320]	; (1000c310 <platform_driver_init+0x240>)
1000c1ce:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000c1d0:	4b50      	ldr	r3, [pc, #320]	; (1000c314 <platform_driver_init+0x244>)
1000c1d2:	4a51      	ldr	r2, [pc, #324]	; (1000c318 <platform_driver_init+0x248>)
1000c1d4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000c1d6:	4b51      	ldr	r3, [pc, #324]	; (1000c31c <platform_driver_init+0x24c>)
1000c1d8:	4a51      	ldr	r2, [pc, #324]	; (1000c320 <platform_driver_init+0x250>)
1000c1da:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c1dc:	22a0      	movs	r2, #160	; 0xa0
1000c1de:	4b51      	ldr	r3, [pc, #324]	; (1000c324 <platform_driver_init+0x254>)
1000c1e0:	0092      	lsls	r2, r2, #2
1000c1e2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c1e4:	2280      	movs	r2, #128	; 0x80
1000c1e6:	4b50      	ldr	r3, [pc, #320]	; (1000c328 <platform_driver_init+0x258>)
1000c1e8:	0092      	lsls	r2, r2, #2
1000c1ea:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000c1ec:	4b4f      	ldr	r3, [pc, #316]	; (1000c32c <platform_driver_init+0x25c>)
1000c1ee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c1f0:	465b      	mov	r3, fp
1000c1f2:	602b      	str	r3, [r5, #0]
1000c1f4:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c1f6:	464a      	mov	r2, r9
1000c1f8:	602b      	str	r3, [r5, #0]
1000c1fa:	4b4d      	ldr	r3, [pc, #308]	; (1000c330 <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c1fc:	4d4d      	ldr	r5, [pc, #308]	; (1000c334 <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c1fe:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c200:	4643      	mov	r3, r8
1000c202:	4a4d      	ldr	r2, [pc, #308]	; (1000c338 <platform_driver_init+0x268>)
1000c204:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c206:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c208:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000c20a:	683b      	ldr	r3, [r7, #0]
1000c20c:	4a4b      	ldr	r2, [pc, #300]	; (1000c33c <platform_driver_init+0x26c>)
1000c20e:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000c210:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000c212:	2001      	movs	r0, #1
1000c214:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000c216:	2002      	movs	r0, #2
1000c218:	47a8      	blx	r5
		platform_initialized = 1;
1000c21a:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000c21c:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000c21e:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000c220:	bc3c      	pop	{r2, r3, r4, r5}
1000c222:	4690      	mov	r8, r2
1000c224:	4699      	mov	r9, r3
1000c226:	46a2      	mov	sl, r4
1000c228:	46ab      	mov	fp, r5
1000c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000c22c:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000c22e:	2001      	movs	r0, #1
1000c230:	e7f6      	b.n	1000c220 <platform_driver_init+0x150>
1000c232:	46c0      	nop			; (mov r8, r8)
1000c234:	1001cea4 	.word	0x1001cea4
1000c238:	1000c08d 	.word	0x1000c08d
1000c23c:	4000b00c 	.word	0x4000b00c
1000c240:	fffe0fd3 	.word	0xfffe0fd3
1000c244:	e000e100 	.word	0xe000e100
1000c248:	1001db7c 	.word	0x1001db7c
1000c24c:	4000b010 	.word	0x4000b010
1000c250:	ffffe7c0 	.word	0xffffe7c0
1000c254:	1001de4c 	.word	0x1001de4c
1000c258:	1001cec0 	.word	0x1001cec0
1000c25c:	0001bc51 	.word	0x0001bc51
1000c260:	000007d7 	.word	0x000007d7
1000c264:	1001db88 	.word	0x1001db88
1000c268:	000007bd 	.word	0x000007bd
1000c26c:	1001de50 	.word	0x1001de50
1000c270:	100400bc 	.word	0x100400bc
1000c274:	1001ce98 	.word	0x1001ce98
1000c278:	100400b8 	.word	0x100400b8
1000c27c:	1001ce94 	.word	0x1001ce94
1000c280:	1001db84 	.word	0x1001db84
1000c284:	0001b99f 	.word	0x0001b99f
1000c288:	1001db90 	.word	0x1001db90
1000c28c:	0001b9db 	.word	0x0001b9db
1000c290:	1001de60 	.word	0x1001de60
1000c294:	1004003c 	.word	0x1004003c
1000c298:	1001db94 	.word	0x1001db94
1000c29c:	10041fc0 	.word	0x10041fc0
1000c2a0:	10041fc4 	.word	0x10041fc4
1000c2a4:	1001de5c 	.word	0x1001de5c
1000c2a8:	1001de54 	.word	0x1001de54
1000c2ac:	10041fd4 	.word	0x10041fd4
1000c2b0:	10041fd8 	.word	0x10041fd8
1000c2b4:	1001db8c 	.word	0x1001db8c
1000c2b8:	1001ceb4 	.word	0x1001ceb4
1000c2bc:	0001cbe9 	.word	0x0001cbe9
1000c2c0:	1001cea8 	.word	0x1001cea8
1000c2c4:	0001cd8f 	.word	0x0001cd8f
1000c2c8:	1001cec4 	.word	0x1001cec4
1000c2cc:	0001cea3 	.word	0x0001cea3
1000c2d0:	1001cea0 	.word	0x1001cea0
1000c2d4:	0001cbcf 	.word	0x0001cbcf
1000c2d8:	1000c76d 	.word	0x1000c76d
1000c2dc:	1000c70d 	.word	0x1000c70d
1000c2e0:	100400e4 	.word	0x100400e4
1000c2e4:	1001cebc 	.word	0x1001cebc
1000c2e8:	1001dbcc 	.word	0x1001dbcc
1000c2ec:	1001cecc 	.word	0x1001cecc
1000c2f0:	00019fe9 	.word	0x00019fe9
1000c2f4:	1001ce9c 	.word	0x1001ce9c
1000c2f8:	0001dbdd 	.word	0x0001dbdd
1000c2fc:	1001ceb0 	.word	0x1001ceb0
1000c300:	0001dc5b 	.word	0x0001dc5b
1000c304:	1001ceac 	.word	0x1001ceac
1000c308:	100405ec 	.word	0x100405ec
1000c30c:	1001ceb8 	.word	0x1001ceb8
1000c310:	0001d5e3 	.word	0x0001d5e3
1000c314:	1001ced0 	.word	0x1001ced0
1000c318:	10040c20 	.word	0x10040c20
1000c31c:	1001ce90 	.word	0x1001ce90
1000c320:	00019f09 	.word	0x00019f09
1000c324:	1001810b 	.word	0x1001810b
1000c328:	1001de64 	.word	0x1001de64
1000c32c:	1000bfb9 	.word	0x1000bfb9
1000c330:	1001de58 	.word	0x1001de58
1000c334:	1000c7ad 	.word	0x1000c7ad
1000c338:	1000bfe9 	.word	0x1000bfe9
1000c33c:	1000c7c9 	.word	0x1000c7c9

1000c340 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c340:	4b05      	ldr	r3, [pc, #20]	; (1000c358 <platform_register_ble_msg_handler+0x18>)
1000c342:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000c344:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c346:	2a01      	cmp	r2, #1
1000c348:	d001      	beq.n	1000c34e <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000c34a:	0018      	movs	r0, r3
1000c34c:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000c34e:	4b03      	ldr	r3, [pc, #12]	; (1000c35c <platform_register_ble_msg_handler+0x1c>)
1000c350:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000c352:	2300      	movs	r3, #0
1000c354:	e7f9      	b.n	1000c34a <platform_register_ble_msg_handler+0xa>
1000c356:	46c0      	nop			; (mov r8, r8)
1000c358:	1001cea4 	.word	0x1001cea4
1000c35c:	1001cec0 	.word	0x1001cec0

1000c360 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c360:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c362:	4b0e      	ldr	r3, [pc, #56]	; (1000c39c <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c364:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c366:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000c368:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000c36a:	2b00      	cmp	r3, #0
1000c36c:	d014      	beq.n	1000c398 <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c36e:	4798      	blx	r3
1000c370:	0001      	movs	r1, r0
1000c372:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c374:	4d0a      	ldr	r5, [pc, #40]	; (1000c3a0 <platform_interface_send+0x40>)
1000c376:	88a2      	ldrh	r2, [r4, #4]
1000c378:	682d      	ldr	r5, [r5, #0]
1000c37a:	88e3      	ldrh	r3, [r4, #6]
1000c37c:	8820      	ldrh	r0, [r4, #0]
1000c37e:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c380:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c382:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c384:	2a00      	cmp	r2, #0
1000c386:	d003      	beq.n	1000c390 <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c388:	0021      	movs	r1, r4
1000c38a:	4b06      	ldr	r3, [pc, #24]	; (1000c3a4 <platform_interface_send+0x44>)
1000c38c:	3108      	adds	r1, #8
1000c38e:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c390:	0028      	movs	r0, r5
1000c392:	4b05      	ldr	r3, [pc, #20]	; (1000c3a8 <platform_interface_send+0x48>)
1000c394:	4798      	blx	r3
	}
}
1000c396:	bd70      	pop	{r4, r5, r6, pc}
1000c398:	0001      	movs	r1, r0
1000c39a:	e7eb      	b.n	1000c374 <platform_interface_send+0x14>
1000c39c:	1001ce98 	.word	0x1001ce98
1000c3a0:	1001cecc 	.word	0x1001cecc
1000c3a4:	100180cf 	.word	0x100180cf
1000c3a8:	1000c015 	.word	0x1000c015

1000c3ac <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c3ac:	b570      	push	{r4, r5, r6, lr}
1000c3ae:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c3b0:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c3b2:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c3b4:	4302      	orrs	r2, r0
1000c3b6:	20a0      	movs	r0, #160	; 0xa0
1000c3b8:	4b09      	ldr	r3, [pc, #36]	; (1000c3e0 <send_plf_int_msg_ind+0x34>)
1000c3ba:	2105      	movs	r1, #5
1000c3bc:	681c      	ldr	r4, [r3, #0]
1000c3be:	00c0      	lsls	r0, r0, #3
1000c3c0:	002b      	movs	r3, r5
1000c3c2:	47a0      	blx	r4
1000c3c4:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000c3c6:	d00a      	beq.n	1000c3de <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c3c8:	2d00      	cmp	r5, #0
1000c3ca:	d005      	beq.n	1000c3d8 <send_plf_int_msg_ind+0x2c>
1000c3cc:	2e00      	cmp	r6, #0
1000c3ce:	d003      	beq.n	1000c3d8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c3d0:	002a      	movs	r2, r5
1000c3d2:	0031      	movs	r1, r6
1000c3d4:	4b03      	ldr	r3, [pc, #12]	; (1000c3e4 <send_plf_int_msg_ind+0x38>)
1000c3d6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c3d8:	0020      	movs	r0, r4
1000c3da:	4b03      	ldr	r3, [pc, #12]	; (1000c3e8 <send_plf_int_msg_ind+0x3c>)
1000c3dc:	4798      	blx	r3
	}
}
1000c3de:	bd70      	pop	{r4, r5, r6, pc}
1000c3e0:	1001cecc 	.word	0x1001cecc
1000c3e4:	100180cf 	.word	0x100180cf
1000c3e8:	1000c015 	.word	0x1000c015

1000c3ec <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c3ee:	4644      	mov	r4, r8
1000c3f0:	465f      	mov	r7, fp
1000c3f2:	4656      	mov	r6, sl
1000c3f4:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c3f6:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c3f8:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c3fa:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c3fc:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c3fe:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c400:	1ce3      	adds	r3, r4, #3
1000c402:	d800      	bhi.n	1000c406 <platform_event_wait+0x1a>
1000c404:	e0ea      	b.n	1000c5dc <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c406:	2300      	movs	r3, #0
1000c408:	4699      	mov	r9, r3
1000c40a:	4b88      	ldr	r3, [pc, #544]	; (1000c62c <platform_event_wait+0x240>)
1000c40c:	2700      	movs	r7, #0
1000c40e:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c410:	4b87      	ldr	r3, [pc, #540]	; (1000c630 <platform_event_wait+0x244>)
1000c412:	4d88      	ldr	r5, [pc, #544]	; (1000c634 <platform_event_wait+0x248>)
1000c414:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c416:	4b88      	ldr	r3, [pc, #544]	; (1000c638 <platform_event_wait+0x24c>)
1000c418:	4e88      	ldr	r6, [pc, #544]	; (1000c63c <platform_event_wait+0x250>)
1000c41a:	469a      	mov	sl, r3
1000c41c:	e003      	b.n	1000c426 <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c41e:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c420:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000c422:	2b00      	cmp	r3, #0
1000c424:	d052      	beq.n	1000c4cc <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c426:	4643      	mov	r3, r8
1000c428:	0029      	movs	r1, r5
1000c42a:	6830      	ldr	r0, [r6, #0]
1000c42c:	681b      	ldr	r3, [r3, #0]
1000c42e:	4798      	blx	r3
1000c430:	2800      	cmp	r0, #0
1000c432:	d1f4      	bne.n	1000c41e <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000c434:	682c      	ldr	r4, [r5, #0]
1000c436:	88a3      	ldrh	r3, [r4, #4]
1000c438:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c43a:	23cd      	movs	r3, #205	; 0xcd
1000c43c:	009b      	lsls	r3, r3, #2
1000c43e:	4599      	cmp	r9, r3
1000c440:	d04f      	beq.n	1000c4e2 <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c442:	8923      	ldrh	r3, [r4, #8]
1000c444:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c446:	8963      	ldrh	r3, [r4, #10]
1000c448:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c44a:	9b01      	ldr	r3, [sp, #4]
1000c44c:	2b00      	cmp	r3, #0
1000c44e:	d000      	beq.n	1000c452 <platform_event_wait+0x66>
1000c450:	e07b      	b.n	1000c54a <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c452:	23a0      	movs	r3, #160	; 0xa0
1000c454:	00db      	lsls	r3, r3, #3
1000c456:	4599      	cmp	r9, r3
1000c458:	d051      	beq.n	1000c4fe <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c45a:	4653      	mov	r3, sl
1000c45c:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c45e:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c460:	2b00      	cmp	r3, #0
1000c462:	d100      	bne.n	1000c466 <platform_event_wait+0x7a>
1000c464:	e084      	b.n	1000c570 <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c466:	22cd      	movs	r2, #205	; 0xcd
1000c468:	88a3      	ldrh	r3, [r4, #4]
1000c46a:	0092      	lsls	r2, r2, #2
1000c46c:	4293      	cmp	r3, r2
1000c46e:	d03d      	beq.n	1000c4ec <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c470:	4a73      	ldr	r2, [pc, #460]	; (1000c640 <platform_event_wait+0x254>)
1000c472:	4f74      	ldr	r7, [pc, #464]	; (1000c644 <platform_event_wait+0x258>)
1000c474:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000c476:	703b      	strb	r3, [r7, #0]
1000c478:	0a1b      	lsrs	r3, r3, #8
1000c47a:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c47c:	4b72      	ldr	r3, [pc, #456]	; (1000c648 <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c47e:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c480:	8920      	ldrh	r0, [r4, #8]
1000c482:	681b      	ldr	r3, [r3, #0]
1000c484:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c486:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c488:	7138      	strb	r0, [r7, #4]
1000c48a:	0a00      	lsrs	r0, r0, #8
1000c48c:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c48e:	6818      	ldr	r0, [r3, #0]
1000c490:	682b      	ldr	r3, [r5, #0]
1000c492:	88db      	ldrh	r3, [r3, #6]
1000c494:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c496:	682c      	ldr	r4, [r5, #0]
1000c498:	8963      	ldrh	r3, [r4, #10]
1000c49a:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c49c:	464b      	mov	r3, r9
1000c49e:	3008      	adds	r0, #8
1000c4a0:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000c4a2:	8962      	ldrh	r2, [r4, #10]
1000c4a4:	2a00      	cmp	r2, #0
1000c4a6:	d000      	beq.n	1000c4aa <platform_event_wait+0xbe>
1000c4a8:	e092      	b.n	1000c5d0 <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c4aa:	4653      	mov	r3, sl
1000c4ac:	3208      	adds	r2, #8
1000c4ae:	0038      	movs	r0, r7
1000c4b0:	681b      	ldr	r3, [r3, #0]
1000c4b2:	0011      	movs	r1, r2
1000c4b4:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c4b6:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c4b8:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c4ba:	4699      	mov	r9, r3
1000c4bc:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c4be:	465b      	mov	r3, fp
1000c4c0:	0020      	movs	r0, r4
1000c4c2:	681b      	ldr	r3, [r3, #0]
1000c4c4:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c4c6:	464b      	mov	r3, r9
1000c4c8:	2b00      	cmp	r3, #0
1000c4ca:	d1ac      	bne.n	1000c426 <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000c4cc:	9b01      	ldr	r3, [sp, #4]
1000c4ce:	2b00      	cmp	r3, #0
1000c4d0:	d150      	bne.n	1000c574 <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c4d2:	0038      	movs	r0, r7
1000c4d4:	b009      	add	sp, #36	; 0x24
1000c4d6:	bc3c      	pop	{r2, r3, r4, r5}
1000c4d8:	4690      	mov	r8, r2
1000c4da:	4699      	mov	r9, r3
1000c4dc:	46a2      	mov	sl, r4
1000c4de:	46ab      	mov	fp, r5
1000c4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c4e2:	4b55      	ldr	r3, [pc, #340]	; (1000c638 <platform_event_wait+0x24c>)
1000c4e4:	681b      	ldr	r3, [r3, #0]
1000c4e6:	9302      	str	r3, [sp, #8]
1000c4e8:	2b00      	cmp	r3, #0
1000c4ea:	d041      	beq.n	1000c570 <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c4ec:	2301      	movs	r3, #1
1000c4ee:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c4f0:	9b01      	ldr	r3, [sp, #4]
1000c4f2:	2b00      	cmp	r3, #0
1000c4f4:	d0e3      	beq.n	1000c4be <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c4f6:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c4f8:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c4fa:	4699      	mov	r9, r3
1000c4fc:	e7df      	b.n	1000c4be <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c4fe:	4b53      	ldr	r3, [pc, #332]	; (1000c64c <platform_event_wait+0x260>)
1000c500:	881f      	ldrh	r7, [r3, #0]
1000c502:	4699      	mov	r9, r3
1000c504:	9b02      	ldr	r3, [sp, #8]
1000c506:	19da      	adds	r2, r3, r7
1000c508:	23a0      	movs	r3, #160	; 0xa0
1000c50a:	009b      	lsls	r3, r3, #2
1000c50c:	429a      	cmp	r2, r3
1000c50e:	dd03      	ble.n	1000c518 <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c510:	2780      	movs	r7, #128	; 0x80
1000c512:	464b      	mov	r3, r9
1000c514:	00bf      	lsls	r7, r7, #2
1000c516:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c518:	0021      	movs	r1, r4
1000c51a:	4b4a      	ldr	r3, [pc, #296]	; (1000c644 <platform_event_wait+0x258>)
1000c51c:	9c02      	ldr	r4, [sp, #8]
1000c51e:	18ff      	adds	r7, r7, r3
1000c520:	0022      	movs	r2, r4
1000c522:	310c      	adds	r1, #12
1000c524:	0038      	movs	r0, r7
1000c526:	4b4a      	ldr	r3, [pc, #296]	; (1000c650 <platform_event_wait+0x264>)
1000c528:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c52a:	0022      	movs	r2, r4
1000c52c:	0039      	movs	r1, r7
1000c52e:	4b49      	ldr	r3, [pc, #292]	; (1000c654 <platform_event_wait+0x268>)
1000c530:	9803      	ldr	r0, [sp, #12]
1000c532:	4798      	blx	r3
				plf_event_buff_index += len;
1000c534:	464b      	mov	r3, r9
1000c536:	46a4      	mov	ip, r4
1000c538:	464a      	mov	r2, r9
1000c53a:	881b      	ldrh	r3, [r3, #0]
1000c53c:	682c      	ldr	r4, [r5, #0]
1000c53e:	4463      	add	r3, ip
1000c540:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c542:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c544:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c546:	4699      	mov	r9, r3
1000c548:	e7b9      	b.n	1000c4be <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c54a:	220d      	movs	r2, #13
1000c54c:	2100      	movs	r1, #0
1000c54e:	a804      	add	r0, sp, #16
1000c550:	4b41      	ldr	r3, [pc, #260]	; (1000c658 <platform_event_wait+0x26c>)
1000c552:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c554:	2333      	movs	r3, #51	; 0x33
1000c556:	aa04      	add	r2, sp, #16
1000c558:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c55a:	3b30      	subs	r3, #48	; 0x30
1000c55c:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c55e:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c560:	3302      	adds	r3, #2
1000c562:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c564:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c566:	210d      	movs	r1, #13
1000c568:	0010      	movs	r0, r2
1000c56a:	4b3c      	ldr	r3, [pc, #240]	; (1000c65c <platform_event_wait+0x270>)
1000c56c:	4798      	blx	r3
1000c56e:	e770      	b.n	1000c452 <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c570:	4699      	mov	r9, r3
1000c572:	e7a4      	b.n	1000c4be <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c574:	6833      	ldr	r3, [r6, #0]
1000c576:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c578:	2b00      	cmp	r3, #0
1000c57a:	d053      	beq.n	1000c624 <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c57c:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c57e:	2314      	movs	r3, #20
1000c580:	4443      	add	r3, r8
1000c582:	469a      	mov	sl, r3
1000c584:	4b36      	ldr	r3, [pc, #216]	; (1000c660 <platform_event_wait+0x274>)
1000c586:	4650      	mov	r0, sl
1000c588:	681b      	ldr	r3, [r3, #0]
1000c58a:	4798      	blx	r3
	while(NULL != current)
1000c58c:	2500      	movs	r5, #0
1000c58e:	2c00      	cmp	r4, #0
1000c590:	d019      	beq.n	1000c5c6 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c592:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c594:	4b26      	ldr	r3, [pc, #152]	; (1000c630 <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c596:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c598:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c59a:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c59c:	4699      	mov	r9, r3
1000c59e:	4644      	mov	r4, r8
1000c5a0:	e003      	b.n	1000c5aa <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c5a2:	0005      	movs	r5, r0
1000c5a4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c5a6:	2800      	cmp	r0, #0
1000c5a8:	d00d      	beq.n	1000c5c6 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c5aa:	6803      	ldr	r3, [r0, #0]
1000c5ac:	889b      	ldrh	r3, [r3, #4]
1000c5ae:	42b3      	cmp	r3, r6
1000c5b0:	d1f7      	bne.n	1000c5a2 <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000c5b2:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000c5b4:	2d00      	cmp	r5, #0
1000c5b6:	d02f      	beq.n	1000c618 <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000c5b8:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000c5ba:	464b      	mov	r3, r9
1000c5bc:	681b      	ldr	r3, [r3, #0]
1000c5be:	4798      	blx	r3
				current = prev->pstrNext;
1000c5c0:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c5c2:	2800      	cmp	r0, #0
1000c5c4:	d1f1      	bne.n	1000c5aa <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c5c6:	4b27      	ldr	r3, [pc, #156]	; (1000c664 <platform_event_wait+0x278>)
1000c5c8:	4650      	mov	r0, sl
1000c5ca:	681b      	ldr	r3, [r3, #0]
1000c5cc:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c5ce:	e780      	b.n	1000c4d2 <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c5d0:	0021      	movs	r1, r4
1000c5d2:	4b1f      	ldr	r3, [pc, #124]	; (1000c650 <platform_event_wait+0x264>)
1000c5d4:	310c      	adds	r1, #12
1000c5d6:	4798      	blx	r3
1000c5d8:	8962      	ldrh	r2, [r4, #10]
1000c5da:	e766      	b.n	1000c4aa <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000c5dc:	220d      	movs	r2, #13
1000c5de:	2100      	movs	r1, #0
1000c5e0:	4b1d      	ldr	r3, [pc, #116]	; (1000c658 <platform_event_wait+0x26c>)
1000c5e2:	a804      	add	r0, sp, #16
1000c5e4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c5e6:	2333      	movs	r3, #51	; 0x33
1000c5e8:	aa04      	add	r2, sp, #16
1000c5ea:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c5ec:	3b30      	subs	r3, #48	; 0x30
1000c5ee:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c5f0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c5f2:	3302      	adds	r3, #2
1000c5f4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c5f6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000c5f8:	0a23      	lsrs	r3, r4, #8
1000c5fa:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000c5fc:	0c23      	lsrs	r3, r4, #16
1000c5fe:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c600:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000c602:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c604:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c606:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c608:	4b14      	ldr	r3, [pc, #80]	; (1000c65c <platform_event_wait+0x270>)
1000c60a:	210d      	movs	r1, #13
1000c60c:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c60e:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c610:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c612:	2301      	movs	r3, #1
1000c614:	9301      	str	r3, [sp, #4]
1000c616:	e6f6      	b.n	1000c406 <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c618:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000c61a:	465b      	mov	r3, fp
1000c61c:	681b      	ldr	r3, [r3, #0]
1000c61e:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c620:	6a20      	ldr	r0, [r4, #32]
1000c622:	e7c0      	b.n	1000c5a6 <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c624:	464b      	mov	r3, r9
1000c626:	6a1b      	ldr	r3, [r3, #32]
1000c628:	deff      	udf	#255	; 0xff
1000c62a:	46c0      	nop			; (mov r8, r8)
1000c62c:	1001ceb8 	.word	0x1001ceb8
1000c630:	1001ce90 	.word	0x1001ce90
1000c634:	1001ce8c 	.word	0x1001ce8c
1000c638:	1001cec0 	.word	0x1001cec0
1000c63c:	1001ced0 	.word	0x1001ced0
1000c640:	1001cec8 	.word	0x1001cec8
1000c644:	1001dbcc 	.word	0x1001dbcc
1000c648:	1001ce94 	.word	0x1001ce94
1000c64c:	1001de64 	.word	0x1001de64
1000c650:	100180cf 	.word	0x100180cf
1000c654:	1000bf7d 	.word	0x1000bf7d
1000c658:	1001810b 	.word	0x1001810b
1000c65c:	1000c361 	.word	0x1000c361
1000c660:	1001ceb0 	.word	0x1001ceb0
1000c664:	1001ce9c 	.word	0x1001ce9c

1000c668 <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c668:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000c66a:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c66c:	4b02      	ldr	r3, [pc, #8]	; (1000c678 <acquire_sleep_lock+0x10>)
1000c66e:	0200      	lsls	r0, r0, #8
1000c670:	681b      	ldr	r3, [r3, #0]
1000c672:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c674:	2008      	movs	r0, #8
1000c676:	bd10      	pop	{r4, pc}
1000c678:	1001db84 	.word	0x1001db84

1000c67c <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c67c:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000c67e:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c680:	4b02      	ldr	r3, [pc, #8]	; (1000c68c <release_message_lock+0x10>)
1000c682:	01c0      	lsls	r0, r0, #7
1000c684:	681b      	ldr	r3, [r3, #0]
1000c686:	4798      	blx	r3
	return status;
}
1000c688:	2000      	movs	r0, #0
1000c68a:	bd10      	pop	{r4, pc}
1000c68c:	1001db90 	.word	0x1001db90

1000c690 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c690:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000c692:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c694:	4c04      	ldr	r4, [pc, #16]	; (1000c6a8 <release_sleep_lock+0x18>)
1000c696:	01c0      	lsls	r0, r0, #7
1000c698:	6823      	ldr	r3, [r4, #0]
1000c69a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000c69c:	2080      	movs	r0, #128	; 0x80
1000c69e:	6823      	ldr	r3, [r4, #0]
1000c6a0:	0200      	lsls	r0, r0, #8
1000c6a2:	4798      	blx	r3
	return status;
}
1000c6a4:	2000      	movs	r0, #0
1000c6a6:	bd10      	pop	{r4, pc}
1000c6a8:	1001db90 	.word	0x1001db90

1000c6ac <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c6ac:	4914      	ldr	r1, [pc, #80]	; (1000c700 <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c6ae:	4815      	ldr	r0, [pc, #84]	; (1000c704 <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c6b0:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c6b2:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c6b4:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c6b6:	4302      	orrs	r2, r0
1000c6b8:	b292      	uxth	r2, r2
1000c6ba:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c6bc:	05db      	lsls	r3, r3, #23
1000c6be:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c6c0:	d018      	beq.n	1000c6f4 <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c6c2:	b2db      	uxtb	r3, r3
1000c6c4:	425a      	negs	r2, r3
1000c6c6:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000c6c8:	2b01      	cmp	r3, #1
1000c6ca:	d017      	beq.n	1000c6fc <gpio1_combined_isr_handler+0x50>
1000c6cc:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000c6ce:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000c6d0:	085b      	lsrs	r3, r3, #1
				index++;
1000c6d2:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c6d4:	2b01      	cmp	r3, #1
1000c6d6:	d1fa      	bne.n	1000c6ce <gpio1_combined_isr_handler+0x22>
1000c6d8:	4093      	lsls	r3, r2
1000c6da:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c6dc:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c6de:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c6e0:	05db      	lsls	r3, r3, #23
1000c6e2:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c6e4:	d1ea      	bne.n	1000c6bc <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c6e6:	2180      	movs	r1, #128	; 0x80
1000c6e8:	4a07      	ldr	r2, [pc, #28]	; (1000c708 <gpio1_combined_isr_handler+0x5c>)
1000c6ea:	3381      	adds	r3, #129	; 0x81
1000c6ec:	0049      	lsls	r1, r1, #1
1000c6ee:	33ff      	adds	r3, #255	; 0xff
1000c6f0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c6f2:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c6f4:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c6f6:	4303      	orrs	r3, r0
1000c6f8:	b29b      	uxth	r3, r3
1000c6fa:	e7ef      	b.n	1000c6dc <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c6fc:	2301      	movs	r3, #1
1000c6fe:	e7ed      	b.n	1000c6dc <gpio1_combined_isr_handler+0x30>
1000c700:	40011000 	.word	0x40011000
1000c704:	ffff8000 	.word	0xffff8000
1000c708:	e000e100 	.word	0xe000e100

1000c70c <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c70c:	4914      	ldr	r1, [pc, #80]	; (1000c760 <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c70e:	4815      	ldr	r0, [pc, #84]	; (1000c764 <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c710:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c712:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c714:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c716:	4302      	orrs	r2, r0
1000c718:	b292      	uxth	r2, r2
1000c71a:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c71c:	05db      	lsls	r3, r3, #23
1000c71e:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c720:	d017      	beq.n	1000c752 <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c722:	b2db      	uxtb	r3, r3
1000c724:	425a      	negs	r2, r3
1000c726:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000c728:	2b01      	cmp	r3, #1
1000c72a:	d016      	beq.n	1000c75a <gpio0_combined_isr_handler+0x4e>
1000c72c:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000c72e:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000c730:	085b      	lsrs	r3, r3, #1
				index++;
1000c732:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c734:	2b01      	cmp	r3, #1
1000c736:	d1fa      	bne.n	1000c72e <gpio0_combined_isr_handler+0x22>
1000c738:	4093      	lsls	r3, r2
1000c73a:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c73c:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c73e:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c740:	05db      	lsls	r3, r3, #23
1000c742:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c744:	d1ea      	bne.n	1000c71c <gpio0_combined_isr_handler+0x10>
1000c746:	2180      	movs	r1, #128	; 0x80
1000c748:	4a07      	ldr	r2, [pc, #28]	; (1000c768 <gpio0_combined_isr_handler+0x5c>)
1000c74a:	3381      	adds	r3, #129	; 0x81
1000c74c:	33ff      	adds	r3, #255	; 0xff
1000c74e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c750:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c752:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c754:	4303      	orrs	r3, r0
1000c756:	b29b      	uxth	r3, r3
1000c758:	e7f0      	b.n	1000c73c <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c75a:	2301      	movs	r3, #1
1000c75c:	e7ee      	b.n	1000c73c <gpio0_combined_isr_handler+0x30>
1000c75e:	46c0      	nop			; (mov r8, r8)
1000c760:	40010000 	.word	0x40010000
1000c764:	ffff8000 	.word	0xffff8000
1000c768:	e000e100 	.word	0xe000e100

1000c76c <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c76c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c76e:	4c0b      	ldr	r4, [pc, #44]	; (1000c79c <PORT1_COMB_Handler+0x30>)
1000c770:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c772:	0b5b      	lsrs	r3, r3, #13
1000c774:	d102      	bne.n	1000c77c <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c776:	4b0a      	ldr	r3, [pc, #40]	; (1000c7a0 <PORT1_COMB_Handler+0x34>)
1000c778:	4798      	blx	r3
	}
}
1000c77a:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000c77c:	4b09      	ldr	r3, [pc, #36]	; (1000c7a4 <PORT1_COMB_Handler+0x38>)
1000c77e:	681b      	ldr	r3, [r3, #0]
1000c780:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c782:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c784:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000c786:	0b5b      	lsrs	r3, r3, #13
1000c788:	035b      	lsls	r3, r3, #13
1000c78a:	4313      	orrs	r3, r2
1000c78c:	8723      	strh	r3, [r4, #56]	; 0x38
1000c78e:	2180      	movs	r1, #128	; 0x80
1000c790:	23c0      	movs	r3, #192	; 0xc0
1000c792:	4a05      	ldr	r2, [pc, #20]	; (1000c7a8 <PORT1_COMB_Handler+0x3c>)
1000c794:	0049      	lsls	r1, r1, #1
1000c796:	005b      	lsls	r3, r3, #1
1000c798:	50d1      	str	r1, [r2, r3]
1000c79a:	e7ee      	b.n	1000c77a <PORT1_COMB_Handler+0xe>
1000c79c:	40011000 	.word	0x40011000
1000c7a0:	1000c6ad 	.word	0x1000c6ad
1000c7a4:	1001de50 	.word	0x1001de50
1000c7a8:	e000e100 	.word	0xe000e100

1000c7ac <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c7ac:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c7ae:	2802      	cmp	r0, #2
1000c7b0:	d901      	bls.n	1000c7b6 <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c7b2:	0018      	movs	r0, r3
1000c7b4:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c7b6:	2200      	movs	r2, #0
1000c7b8:	4b02      	ldr	r3, [pc, #8]	; (1000c7c4 <wakeup_int_unregister_callback+0x18>)
1000c7ba:	0080      	lsls	r0, r0, #2
1000c7bc:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c7be:	2300      	movs	r3, #0
1000c7c0:	e7f7      	b.n	1000c7b2 <wakeup_int_unregister_callback+0x6>
1000c7c2:	46c0      	nop			; (mov r8, r8)
1000c7c4:	1001de68 	.word	0x1001de68

1000c7c8 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c7c8:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c7ca:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c7cc:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c7ce:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c7d0:	2a01      	cmp	r2, #1
1000c7d2:	d01c      	beq.n	1000c80e <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c7d4:	041a      	lsls	r2, r3, #16
1000c7d6:	0e12      	lsrs	r2, r2, #24
1000c7d8:	2a01      	cmp	r2, #1
1000c7da:	d00e      	beq.n	1000c7fa <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c7dc:	021a      	lsls	r2, r3, #8
1000c7de:	0e12      	lsrs	r2, r2, #24
1000c7e0:	2a01      	cmp	r2, #1
1000c7e2:	d000      	beq.n	1000c7e6 <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000c7e4:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000c7e6:	4a0f      	ldr	r2, [pc, #60]	; (1000c824 <wakeup_active_event_callback+0x5c>)
1000c7e8:	6892      	ldr	r2, [r2, #8]
1000c7ea:	2a00      	cmp	r2, #0
1000c7ec:	d001      	beq.n	1000c7f2 <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000c7ee:	4790      	blx	r2
1000c7f0:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c7f2:	4a0d      	ldr	r2, [pc, #52]	; (1000c828 <wakeup_active_event_callback+0x60>)
1000c7f4:	4013      	ands	r3, r2
1000c7f6:	6023      	str	r3, [r4, #0]
	}
}
1000c7f8:	e7f4      	b.n	1000c7e4 <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000c7fa:	4a0a      	ldr	r2, [pc, #40]	; (1000c824 <wakeup_active_event_callback+0x5c>)
1000c7fc:	6852      	ldr	r2, [r2, #4]
1000c7fe:	2a00      	cmp	r2, #0
1000c800:	d001      	beq.n	1000c806 <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000c802:	4790      	blx	r2
1000c804:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c806:	4a09      	ldr	r2, [pc, #36]	; (1000c82c <wakeup_active_event_callback+0x64>)
1000c808:	4013      	ands	r3, r2
1000c80a:	6023      	str	r3, [r4, #0]
1000c80c:	e7e6      	b.n	1000c7dc <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000c80e:	4a05      	ldr	r2, [pc, #20]	; (1000c824 <wakeup_active_event_callback+0x5c>)
1000c810:	6812      	ldr	r2, [r2, #0]
1000c812:	2a00      	cmp	r2, #0
1000c814:	d001      	beq.n	1000c81a <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000c816:	4790      	blx	r2
1000c818:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000c81a:	22ff      	movs	r2, #255	; 0xff
1000c81c:	4393      	bics	r3, r2
1000c81e:	6023      	str	r3, [r4, #0]
1000c820:	e7d8      	b.n	1000c7d4 <wakeup_active_event_callback+0xc>
1000c822:	46c0      	nop			; (mov r8, r8)
1000c824:	1001de68 	.word	0x1001de68
1000c828:	ff00ffff 	.word	0xff00ffff
1000c82c:	ffff00ff 	.word	0xffff00ff

1000c830 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c830:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c832:	4647      	mov	r7, r8
1000c834:	000c      	movs	r4, r1
1000c836:	b480      	push	{r7}
1000c838:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c83a:	2800      	cmp	r0, #0
1000c83c:	d111      	bne.n	1000c862 <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000c83e:	2a00      	cmp	r2, #0
1000c840:	dd0d      	ble.n	1000c85e <_read+0x2e>
1000c842:	4e09      	ldr	r6, [pc, #36]	; (1000c868 <_read+0x38>)
1000c844:	4d09      	ldr	r5, [pc, #36]	; (1000c86c <_read+0x3c>)
1000c846:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c848:	0021      	movs	r1, r4
1000c84a:	6830      	ldr	r0, [r6, #0]
1000c84c:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000c84e:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000c850:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c852:	42bc      	cmp	r4, r7
1000c854:	d1f8      	bne.n	1000c848 <_read+0x18>
1000c856:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c858:	bc04      	pop	{r2}
1000c85a:	4690      	mov	r8, r2
1000c85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c85e:	2000      	movs	r0, #0
1000c860:	e7fa      	b.n	1000c858 <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c862:	2001      	movs	r0, #1
1000c864:	4240      	negs	r0, r0
1000c866:	e7f7      	b.n	1000c858 <_read+0x28>
1000c868:	1001de7c 	.word	0x1001de7c
1000c86c:	1001de74 	.word	0x1001de74

1000c870 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c870:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c872:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c874:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c876:	b480      	push	{r7}
1000c878:	000e      	movs	r6, r1
1000c87a:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c87c:	2802      	cmp	r0, #2
1000c87e:	d810      	bhi.n	1000c8a2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000c880:	2a00      	cmp	r2, #0
1000c882:	d015      	beq.n	1000c8b0 <_write+0x40>
1000c884:	4b0b      	ldr	r3, [pc, #44]	; (1000c8b4 <_write+0x44>)
1000c886:	2400      	movs	r4, #0
1000c888:	4698      	mov	r8, r3
1000c88a:	4f0b      	ldr	r7, [pc, #44]	; (1000c8b8 <_write+0x48>)
1000c88c:	e002      	b.n	1000c894 <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c88e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c890:	42a5      	cmp	r5, r4
1000c892:	d00b      	beq.n	1000c8ac <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c894:	4643      	mov	r3, r8
1000c896:	5d31      	ldrb	r1, [r6, r4]
1000c898:	6818      	ldr	r0, [r3, #0]
1000c89a:	683b      	ldr	r3, [r7, #0]
1000c89c:	4798      	blx	r3
1000c89e:	2800      	cmp	r0, #0
1000c8a0:	daf5      	bge.n	1000c88e <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c8a2:	2001      	movs	r0, #1
1000c8a4:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000c8a6:	bc04      	pop	{r2}
1000c8a8:	4690      	mov	r8, r2
1000c8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c8ac:	0028      	movs	r0, r5
1000c8ae:	e7fa      	b.n	1000c8a6 <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c8b0:	2000      	movs	r0, #0
1000c8b2:	e7f8      	b.n	1000c8a6 <_write+0x36>
1000c8b4:	1001de7c 	.word	0x1001de7c
1000c8b8:	1001de78 	.word	0x1001de78

1000c8bc <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c8bc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c8be:	4b21      	ldr	r3, [pc, #132]	; (1000c944 <uart_rx0_isr_handler+0x88>)
1000c8c0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c8c2:	6823      	ldr	r3, [r4, #0]
1000c8c4:	7d1d      	ldrb	r5, [r3, #20]
1000c8c6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c8c8:	066a      	lsls	r2, r5, #25
1000c8ca:	d50d      	bpl.n	1000c8e8 <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c8cc:	211e      	movs	r1, #30
1000c8ce:	2222      	movs	r2, #34	; 0x22
1000c8d0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c8d2:	7e1a      	ldrb	r2, [r3, #24]
1000c8d4:	3123      	adds	r1, #35	; 0x23
1000c8d6:	438a      	bics	r2, r1
1000c8d8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c8da:	2321      	movs	r3, #33	; 0x21
1000c8dc:	5ce2      	ldrb	r2, [r4, r3]
1000c8de:	3b19      	subs	r3, #25
1000c8e0:	4213      	tst	r3, r2
1000c8e2:	d11d      	bne.n	1000c920 <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c8e4:	6823      	ldr	r3, [r4, #0]
1000c8e6:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c8e8:	2201      	movs	r2, #1
1000c8ea:	422a      	tst	r2, r5
1000c8ec:	d017      	beq.n	1000c91e <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c8ee:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c8f0:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c8f2:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c8f4:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c8f6:	6963      	ldr	r3, [r4, #20]
1000c8f8:	3301      	adds	r3, #1
1000c8fa:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c8fc:	8ba3      	ldrh	r3, [r4, #28]
1000c8fe:	3b01      	subs	r3, #1
1000c900:	b29b      	uxth	r3, r3
1000c902:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c904:	8ba3      	ldrh	r3, [r4, #28]
1000c906:	b29b      	uxth	r3, r3
1000c908:	2b00      	cmp	r3, #0
1000c90a:	d108      	bne.n	1000c91e <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c90c:	2121      	movs	r1, #33	; 0x21
1000c90e:	5c60      	ldrb	r0, [r4, r1]
1000c910:	391d      	subs	r1, #29
1000c912:	4201      	tst	r1, r0
1000c914:	d003      	beq.n	1000c91e <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c916:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c918:	5c20      	ldrb	r0, [r4, r0]
1000c91a:	4201      	tst	r1, r0
1000c91c:	d108      	bne.n	1000c930 <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000c91e:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c920:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c922:	5ca2      	ldrb	r2, [r4, r2]
1000c924:	4213      	tst	r3, r2
1000c926:	d0dd      	beq.n	1000c8e4 <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c928:	0020      	movs	r0, r4
1000c92a:	6923      	ldr	r3, [r4, #16]
1000c92c:	4798      	blx	r3
1000c92e:	e7d9      	b.n	1000c8e4 <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c930:	311e      	adds	r1, #30
1000c932:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c934:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c936:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c938:	7e0b      	ldrb	r3, [r1, #24]
1000c93a:	4393      	bics	r3, r2
1000c93c:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c93e:	68e3      	ldr	r3, [r4, #12]
1000c940:	4798      	blx	r3
			}
		}
	}
}
1000c942:	e7ec      	b.n	1000c91e <uart_rx0_isr_handler+0x62>
1000c944:	1001de80 	.word	0x1001de80

1000c948 <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c948:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000c94a:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c94c:	4b22      	ldr	r3, [pc, #136]	; (1000c9d8 <uart_tx0_isr_handler+0x90>)
1000c94e:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c950:	6823      	ldr	r3, [r4, #0]
1000c952:	791d      	ldrb	r5, [r3, #4]
1000c954:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c956:	4229      	tst	r1, r5
1000c958:	d00c      	beq.n	1000c974 <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c95a:	69a2      	ldr	r2, [r4, #24]
1000c95c:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c95e:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c960:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c962:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c964:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c966:	8be3      	ldrh	r3, [r4, #30]
1000c968:	3b01      	subs	r3, #1
1000c96a:	b29b      	uxth	r3, r3
1000c96c:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c96e:	8be3      	ldrh	r3, [r4, #30]
1000c970:	2b00      	cmp	r3, #0
1000c972:	d022      	beq.n	1000c9ba <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c974:	2310      	movs	r3, #16
1000c976:	422b      	tst	r3, r5
1000c978:	d004      	beq.n	1000c984 <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c97a:	2221      	movs	r2, #33	; 0x21
1000c97c:	5ca1      	ldrb	r1, [r4, r2]
1000c97e:	3a20      	subs	r2, #32
1000c980:	420a      	tst	r2, r1
1000c982:	d10b      	bne.n	1000c99c <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c984:	2320      	movs	r3, #32
1000c986:	422b      	tst	r3, r5
1000c988:	d007      	beq.n	1000c99a <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c98a:	2221      	movs	r2, #33	; 0x21
1000c98c:	5ca1      	ldrb	r1, [r4, r2]
1000c98e:	3a1f      	subs	r2, #31
1000c990:	420a      	tst	r2, r1
1000c992:	d002      	beq.n	1000c99a <uart_tx0_isr_handler+0x52>
1000c994:	5ce3      	ldrb	r3, [r4, r3]
1000c996:	421a      	tst	r2, r3
1000c998:	d119      	bne.n	1000c9ce <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000c99a:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c99c:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c99e:	5c61      	ldrb	r1, [r4, r1]
1000c9a0:	420a      	tst	r2, r1
1000c9a2:	d0ef      	beq.n	1000c984 <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c9a4:	2100      	movs	r1, #0
1000c9a6:	3221      	adds	r2, #33	; 0x21
1000c9a8:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c9aa:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c9ac:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c9ae:	7a0a      	ldrb	r2, [r1, #8]
1000c9b0:	439a      	bics	r2, r3
1000c9b2:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c9b4:	6863      	ldr	r3, [r4, #4]
1000c9b6:	4798      	blx	r3
1000c9b8:	e7e4      	b.n	1000c984 <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c9ba:	6822      	ldr	r2, [r4, #0]
1000c9bc:	7a13      	ldrb	r3, [r2, #8]
1000c9be:	438b      	bics	r3, r1
1000c9c0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c9c2:	2310      	movs	r3, #16
1000c9c4:	6822      	ldr	r2, [r4, #0]
1000c9c6:	7a11      	ldrb	r1, [r2, #8]
1000c9c8:	430b      	orrs	r3, r1
1000c9ca:	7213      	strb	r3, [r2, #8]
1000c9cc:	e7d2      	b.n	1000c974 <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c9ce:	68a3      	ldr	r3, [r4, #8]
1000c9d0:	0020      	movs	r0, r4
1000c9d2:	4798      	blx	r3
		}

	}
}
1000c9d4:	e7e1      	b.n	1000c99a <uart_tx0_isr_handler+0x52>
1000c9d6:	46c0      	nop			; (mov r8, r8)
1000c9d8:	1001de80 	.word	0x1001de80

1000c9dc <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c9dc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c9de:	4b21      	ldr	r3, [pc, #132]	; (1000ca64 <uart_rx1_isr_handler+0x88>)
1000c9e0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c9e2:	6823      	ldr	r3, [r4, #0]
1000c9e4:	7d1d      	ldrb	r5, [r3, #20]
1000c9e6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c9e8:	066a      	lsls	r2, r5, #25
1000c9ea:	d50d      	bpl.n	1000ca08 <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c9ec:	211e      	movs	r1, #30
1000c9ee:	2222      	movs	r2, #34	; 0x22
1000c9f0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c9f2:	7e1a      	ldrb	r2, [r3, #24]
1000c9f4:	3123      	adds	r1, #35	; 0x23
1000c9f6:	438a      	bics	r2, r1
1000c9f8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c9fa:	2321      	movs	r3, #33	; 0x21
1000c9fc:	5ce2      	ldrb	r2, [r4, r3]
1000c9fe:	3b19      	subs	r3, #25
1000ca00:	4213      	tst	r3, r2
1000ca02:	d11d      	bne.n	1000ca40 <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ca04:	6823      	ldr	r3, [r4, #0]
1000ca06:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ca08:	2201      	movs	r2, #1
1000ca0a:	422a      	tst	r2, r5
1000ca0c:	d017      	beq.n	1000ca3e <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ca0e:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ca10:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ca12:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ca14:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ca16:	6963      	ldr	r3, [r4, #20]
1000ca18:	3301      	adds	r3, #1
1000ca1a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ca1c:	8ba3      	ldrh	r3, [r4, #28]
1000ca1e:	3b01      	subs	r3, #1
1000ca20:	b29b      	uxth	r3, r3
1000ca22:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ca24:	8ba3      	ldrh	r3, [r4, #28]
1000ca26:	b29b      	uxth	r3, r3
1000ca28:	2b00      	cmp	r3, #0
1000ca2a:	d108      	bne.n	1000ca3e <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca2c:	2121      	movs	r1, #33	; 0x21
1000ca2e:	5c60      	ldrb	r0, [r4, r1]
1000ca30:	391d      	subs	r1, #29
1000ca32:	4201      	tst	r1, r0
1000ca34:	d003      	beq.n	1000ca3e <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ca36:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca38:	5c20      	ldrb	r0, [r4, r0]
1000ca3a:	4201      	tst	r1, r0
1000ca3c:	d108      	bne.n	1000ca50 <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000ca3e:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ca40:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ca42:	5ca2      	ldrb	r2, [r4, r2]
1000ca44:	4213      	tst	r3, r2
1000ca46:	d0dd      	beq.n	1000ca04 <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ca48:	0020      	movs	r0, r4
1000ca4a:	6923      	ldr	r3, [r4, #16]
1000ca4c:	4798      	blx	r3
1000ca4e:	e7d9      	b.n	1000ca04 <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ca50:	311e      	adds	r1, #30
1000ca52:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ca54:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ca56:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ca58:	7e0b      	ldrb	r3, [r1, #24]
1000ca5a:	4393      	bics	r3, r2
1000ca5c:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ca5e:	68e3      	ldr	r3, [r4, #12]
1000ca60:	4798      	blx	r3
			}
		}
	}
}
1000ca62:	e7ec      	b.n	1000ca3e <uart_rx1_isr_handler+0x62>
1000ca64:	1001de80 	.word	0x1001de80

1000ca68 <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ca68:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000ca6a:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ca6c:	4b22      	ldr	r3, [pc, #136]	; (1000caf8 <uart_tx1_isr_handler+0x90>)
1000ca6e:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ca70:	6823      	ldr	r3, [r4, #0]
1000ca72:	791d      	ldrb	r5, [r3, #4]
1000ca74:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ca76:	4229      	tst	r1, r5
1000ca78:	d00c      	beq.n	1000ca94 <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ca7a:	69a2      	ldr	r2, [r4, #24]
1000ca7c:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ca7e:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ca80:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ca82:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ca84:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ca86:	8be3      	ldrh	r3, [r4, #30]
1000ca88:	3b01      	subs	r3, #1
1000ca8a:	b29b      	uxth	r3, r3
1000ca8c:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ca8e:	8be3      	ldrh	r3, [r4, #30]
1000ca90:	2b00      	cmp	r3, #0
1000ca92:	d022      	beq.n	1000cada <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ca94:	2310      	movs	r3, #16
1000ca96:	422b      	tst	r3, r5
1000ca98:	d004      	beq.n	1000caa4 <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ca9a:	2221      	movs	r2, #33	; 0x21
1000ca9c:	5ca1      	ldrb	r1, [r4, r2]
1000ca9e:	3a20      	subs	r2, #32
1000caa0:	420a      	tst	r2, r1
1000caa2:	d10b      	bne.n	1000cabc <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000caa4:	2320      	movs	r3, #32
1000caa6:	422b      	tst	r3, r5
1000caa8:	d007      	beq.n	1000caba <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000caaa:	2221      	movs	r2, #33	; 0x21
1000caac:	5ca1      	ldrb	r1, [r4, r2]
1000caae:	3a1f      	subs	r2, #31
1000cab0:	420a      	tst	r2, r1
1000cab2:	d002      	beq.n	1000caba <uart_tx1_isr_handler+0x52>
1000cab4:	5ce3      	ldrb	r3, [r4, r3]
1000cab6:	421a      	tst	r2, r3
1000cab8:	d119      	bne.n	1000caee <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000caba:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cabc:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cabe:	5c61      	ldrb	r1, [r4, r1]
1000cac0:	420a      	tst	r2, r1
1000cac2:	d0ef      	beq.n	1000caa4 <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cac4:	2100      	movs	r1, #0
1000cac6:	3221      	adds	r2, #33	; 0x21
1000cac8:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000caca:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cacc:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cace:	7a0a      	ldrb	r2, [r1, #8]
1000cad0:	439a      	bics	r2, r3
1000cad2:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cad4:	6863      	ldr	r3, [r4, #4]
1000cad6:	4798      	blx	r3
1000cad8:	e7e4      	b.n	1000caa4 <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cada:	6822      	ldr	r2, [r4, #0]
1000cadc:	7a13      	ldrb	r3, [r2, #8]
1000cade:	438b      	bics	r3, r1
1000cae0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cae2:	2310      	movs	r3, #16
1000cae4:	6822      	ldr	r2, [r4, #0]
1000cae6:	7a11      	ldrb	r1, [r2, #8]
1000cae8:	430b      	orrs	r3, r1
1000caea:	7213      	strb	r3, [r2, #8]
1000caec:	e7d2      	b.n	1000ca94 <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000caee:	68a3      	ldr	r3, [r4, #8]
1000caf0:	0020      	movs	r0, r4
1000caf2:	4798      	blx	r3
		}

	}
}
1000caf4:	e7e1      	b.n	1000caba <uart_tx1_isr_handler+0x52>
1000caf6:	46c0      	nop			; (mov r8, r8)
1000caf8:	1001de80 	.word	0x1001de80

1000cafc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cafc:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cafe:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cb00:	025b      	lsls	r3, r3, #9
1000cb02:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000cb04:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cb06:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cb08:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000cb0a:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000cb0c:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000cb0e:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000cb10:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cb12:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cb14:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cb16:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cb18:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cb1a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000cb1c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000cb1e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000cb20:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000cb22:	6243      	str	r3, [r0, #36]	; 0x24
}
1000cb24:	4770      	bx	lr
1000cb26:	46c0      	nop			; (mov r8, r8)

1000cb28 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb2a:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cb2c:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cb2e:	b480      	push	{r7}
1000cb30:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000cb32:	2200      	movs	r2, #0
1000cb34:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cb36:	6043      	str	r3, [r0, #4]
1000cb38:	6083      	str	r3, [r0, #8]
1000cb3a:	60c3      	str	r3, [r0, #12]
1000cb3c:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cb3e:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cb40:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000cb42:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cb44:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cb46:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000cb48:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cb4a:	3301      	adds	r3, #1
1000cb4c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000cb4e:	3301      	adds	r3, #1
1000cb50:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000cb52:	4b52      	ldr	r3, [pc, #328]	; (1000cc9c <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cb54:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000cb56:	4299      	cmp	r1, r3
1000cb58:	d100      	bne.n	1000cb5c <uart_init+0x34>
1000cb5a:	e06c      	b.n	1000cc36 <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000cb5c:	4b50      	ldr	r3, [pc, #320]	; (1000cca0 <uart_init+0x178>)
1000cb5e:	4299      	cmp	r1, r3
1000cb60:	d100      	bne.n	1000cb64 <uart_init+0x3c>
1000cb62:	e081      	b.n	1000cc68 <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb64:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000cb66:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb68:	2a00      	cmp	r2, #0
1000cb6a:	d000      	beq.n	1000cb6e <uart_init+0x46>
		index = 4;
1000cb6c:	3302      	adds	r3, #2
1000cb6e:	3b01      	subs	r3, #1
1000cb70:	b2de      	uxtb	r6, r3
1000cb72:	4b4c      	ldr	r3, [pc, #304]	; (1000cca4 <uart_init+0x17c>)
1000cb74:	003c      	movs	r4, r7
1000cb76:	4698      	mov	r8, r3
1000cb78:	3603      	adds	r6, #3
1000cb7a:	00b6      	lsls	r6, r6, #2
1000cb7c:	3408      	adds	r4, #8
1000cb7e:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cb80:	8a21      	ldrh	r1, [r4, #16]
1000cb82:	cc01      	ldmia	r4!, {r0}
1000cb84:	b2c0      	uxtb	r0, r0
1000cb86:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cb88:	42a6      	cmp	r6, r4
1000cb8a:	d1f9      	bne.n	1000cb80 <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cb8c:	682b      	ldr	r3, [r5, #0]
1000cb8e:	7d1a      	ldrb	r2, [r3, #20]
1000cb90:	07d2      	lsls	r2, r2, #31
1000cb92:	d504      	bpl.n	1000cb9e <uart_init+0x76>
1000cb94:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000cb96:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cb98:	7d1a      	ldrb	r2, [r3, #20]
1000cb9a:	4211      	tst	r1, r2
1000cb9c:	d1fb      	bne.n	1000cb96 <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000cb9e:	2100      	movs	r1, #0
1000cba0:	2220      	movs	r2, #32
1000cba2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cba4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cba6:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000cba8:	1e59      	subs	r1, r3, #1
1000cbaa:	418b      	sbcs	r3, r1
1000cbac:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cbae:	793b      	ldrb	r3, [r7, #4]
1000cbb0:	4313      	orrs	r3, r2
	switch(config->parity) {
1000cbb2:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cbb4:	430b      	orrs	r3, r1
	switch(config->parity) {
1000cbb6:	2a02      	cmp	r2, #2
1000cbb8:	d03a      	beq.n	1000cc30 <uart_init+0x108>
1000cbba:	d934      	bls.n	1000cc26 <uart_init+0xfe>
1000cbbc:	2a03      	cmp	r2, #3
1000cbbe:	d02f      	beq.n	1000cc20 <uart_init+0xf8>
1000cbc0:	2a04      	cmp	r2, #4
1000cbc2:	d101      	bne.n	1000cbc8 <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000cbc4:	220e      	movs	r2, #14
1000cbc6:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000cbc8:	2220      	movs	r2, #32
1000cbca:	6829      	ldr	r1, [r5, #0]
1000cbcc:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cbce:	4b36      	ldr	r3, [pc, #216]	; (1000cca8 <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000cbd0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cbd2:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000cbd4:	0031      	movs	r1, r6
1000cbd6:	4b35      	ldr	r3, [pc, #212]	; (1000ccac <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cbd8:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000cbda:	4798      	blx	r3
1000cbdc:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000cbde:	0400      	lsls	r0, r0, #16
1000cbe0:	0c00      	lsrs	r0, r0, #16
1000cbe2:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cbe4:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000cbe6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cbe8:	2300      	movs	r3, #0
1000cbea:	4281      	cmp	r1, r0
1000cbec:	d207      	bcs.n	1000cbfe <uart_init+0xd6>
		i++;
1000cbee:	3301      	adds	r3, #1
1000cbf0:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000cbf2:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cbf4:	4281      	cmp	r1, r0
1000cbf6:	d3fa      	bcc.n	1000cbee <uart_init+0xc6>
1000cbf8:	3301      	adds	r3, #1
1000cbfa:	071b      	lsls	r3, r3, #28
1000cbfc:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cbfe:	2100      	movs	r1, #0
1000cc00:	2028      	movs	r0, #40	; 0x28
1000cc02:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000cc04:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cc06:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000cc08:	4313      	orrs	r3, r2
1000cc0a:	682a      	ldr	r2, [r5, #0]
1000cc0c:	b29b      	uxth	r3, r3
1000cc0e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cc10:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000cc12:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cc14:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000cc16:	682b      	ldr	r3, [r5, #0]
1000cc18:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000cc1a:	bc04      	pop	{r2}
1000cc1c:	4690      	mov	r8, r2
1000cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000cc20:	220a      	movs	r2, #10
1000cc22:	4313      	orrs	r3, r2
			break;
1000cc24:	e7d0      	b.n	1000cbc8 <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000cc26:	2a01      	cmp	r2, #1
1000cc28:	d1ce      	bne.n	1000cbc8 <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000cc2a:	2202      	movs	r2, #2
1000cc2c:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000cc2e:	e7cb      	b.n	1000cbc8 <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000cc30:	2206      	movs	r2, #6
1000cc32:	4313      	orrs	r3, r2
			break;
1000cc34:	e7c8      	b.n	1000cbc8 <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000cc36:	4c1e      	ldr	r4, [pc, #120]	; (1000ccb0 <uart_init+0x188>)
1000cc38:	2009      	movs	r0, #9
1000cc3a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000cc3c:	200a      	movs	r0, #10
1000cc3e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cc40:	4c1c      	ldr	r4, [pc, #112]	; (1000ccb4 <uart_init+0x18c>)
1000cc42:	2009      	movs	r0, #9
1000cc44:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cc46:	200a      	movs	r0, #10
1000cc48:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cc4a:	4b1b      	ldr	r3, [pc, #108]	; (1000ccb8 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cc4c:	491b      	ldr	r1, [pc, #108]	; (1000ccbc <uart_init+0x194>)
1000cc4e:	2010      	movs	r0, #16
1000cc50:	4c1b      	ldr	r4, [pc, #108]	; (1000ccc0 <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000cc52:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cc54:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cc56:	491b      	ldr	r1, [pc, #108]	; (1000ccc4 <uart_init+0x19c>)
1000cc58:	2011      	movs	r0, #17
1000cc5a:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cc5c:	2201      	movs	r2, #1
1000cc5e:	4b1a      	ldr	r3, [pc, #104]	; (1000ccc8 <uart_init+0x1a0>)
1000cc60:	601a      	str	r2, [r3, #0]
1000cc62:	3201      	adds	r2, #1
1000cc64:	601a      	str	r2, [r3, #0]
1000cc66:	e77d      	b.n	1000cb64 <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cc68:	4c11      	ldr	r4, [pc, #68]	; (1000ccb0 <uart_init+0x188>)
1000cc6a:	200b      	movs	r0, #11
1000cc6c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cc6e:	200c      	movs	r0, #12
1000cc70:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cc72:	4c10      	ldr	r4, [pc, #64]	; (1000ccb4 <uart_init+0x18c>)
1000cc74:	200b      	movs	r0, #11
1000cc76:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cc78:	200c      	movs	r0, #12
1000cc7a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cc7c:	4b0e      	ldr	r3, [pc, #56]	; (1000ccb8 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cc7e:	4913      	ldr	r1, [pc, #76]	; (1000cccc <uart_init+0x1a4>)
1000cc80:	2012      	movs	r0, #18
1000cc82:	4c0f      	ldr	r4, [pc, #60]	; (1000ccc0 <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000cc84:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cc86:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cc88:	4911      	ldr	r1, [pc, #68]	; (1000ccd0 <uart_init+0x1a8>)
1000cc8a:	2013      	movs	r0, #19
1000cc8c:	47a0      	blx	r4
1000cc8e:	2204      	movs	r2, #4
1000cc90:	4b0d      	ldr	r3, [pc, #52]	; (1000ccc8 <uart_init+0x1a0>)
1000cc92:	601a      	str	r2, [r3, #0]
1000cc94:	3204      	adds	r2, #4
1000cc96:	601a      	str	r2, [r3, #0]
1000cc98:	e764      	b.n	1000cb64 <uart_init+0x3c>
1000cc9a:	46c0      	nop			; (mov r8, r8)
1000cc9c:	40004000 	.word	0x40004000
1000cca0:	40005000 	.word	0x40005000
1000cca4:	1000d071 	.word	0x1000d071
1000cca8:	1000d51d 	.word	0x1000d51d
1000ccac:	10014db5 	.word	0x10014db5
1000ccb0:	1000d831 	.word	0x1000d831
1000ccb4:	1000d529 	.word	0x1000d529
1000ccb8:	1001de80 	.word	0x1001de80
1000ccbc:	1000c8bd 	.word	0x1000c8bd
1000ccc0:	1000dc49 	.word	0x1000dc49
1000ccc4:	1000c949 	.word	0x1000c949
1000ccc8:	e000e100 	.word	0xe000e100
1000cccc:	1000c9dd 	.word	0x1000c9dd
1000ccd0:	1000ca69 	.word	0x1000ca69

1000ccd4 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000ccd4:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ccd6:	2001      	movs	r0, #1
1000ccd8:	7913      	ldrb	r3, [r2, #4]
1000ccda:	4218      	tst	r0, r3
1000ccdc:	d0fc      	beq.n	1000ccd8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000ccde:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000cce0:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000cce2:	4770      	bx	lr

1000cce4 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000cce4:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000cce6:	2001      	movs	r0, #1
1000cce8:	7d13      	ldrb	r3, [r2, #20]
1000ccea:	4218      	tst	r0, r3
1000ccec:	d0fc      	beq.n	1000cce8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ccee:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000ccf0:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ccf2:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000ccf4:	4770      	bx	lr
1000ccf6:	46c0      	nop			; (mov r8, r8)

1000ccf8 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000ccf8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ccfa:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ccfc:	2a00      	cmp	r2, #0
1000ccfe:	d101      	bne.n	1000cd04 <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000cd00:	0018      	movs	r0, r3
1000cd02:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000cd04:	2422      	movs	r4, #34	; 0x22
1000cd06:	5d03      	ldrb	r3, [r0, r4]
1000cd08:	b2db      	uxtb	r3, r3
1000cd0a:	2b05      	cmp	r3, #5
1000cd0c:	d0f8      	beq.n	1000cd00 <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000cd0e:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000cd10:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000cd12:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000cd14:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000cd16:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000cd18:	6803      	ldr	r3, [r0, #0]
1000cd1a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000cd1c:	2300      	movs	r3, #0
1000cd1e:	e7ef      	b.n	1000cd00 <uart_read_buffer_job+0x8>

1000cd20 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000cd20:	0093      	lsls	r3, r2, #2
1000cd22:	18c3      	adds	r3, r0, r3
1000cd24:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000cd26:	2301      	movs	r3, #1
1000cd28:	2120      	movs	r1, #32
1000cd2a:	4093      	lsls	r3, r2
1000cd2c:	5c42      	ldrb	r2, [r0, r1]
1000cd2e:	4313      	orrs	r3, r2
1000cd30:	5443      	strb	r3, [r0, r1]
}
1000cd32:	4770      	bx	lr

1000cd34 <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000cd34:	2301      	movs	r3, #1
1000cd36:	2221      	movs	r2, #33	; 0x21
1000cd38:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cd3a:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000cd3c:	5c84      	ldrb	r4, [r0, r2]
1000cd3e:	4323      	orrs	r3, r4
1000cd40:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000cd42:	2901      	cmp	r1, #1
1000cd44:	d104      	bne.n	1000cd50 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cd46:	2320      	movs	r3, #32
1000cd48:	6802      	ldr	r2, [r0, #0]
1000cd4a:	7a11      	ldrb	r1, [r2, #8]
1000cd4c:	430b      	orrs	r3, r1
1000cd4e:	7213      	strb	r3, [r2, #8]
	}
}
1000cd50:	bd10      	pop	{r4, pc}
1000cd52:	46c0      	nop			; (mov r8, r8)

1000cd54 <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000cd54:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cd56:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000cd58:	2421      	movs	r4, #33	; 0x21
1000cd5a:	408a      	lsls	r2, r1
1000cd5c:	5d03      	ldrb	r3, [r0, r4]
1000cd5e:	4393      	bics	r3, r2
1000cd60:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000cd62:	2901      	cmp	r1, #1
1000cd64:	d104      	bne.n	1000cd70 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cd66:	6802      	ldr	r2, [r0, #0]
1000cd68:	311f      	adds	r1, #31
1000cd6a:	7a13      	ldrb	r3, [r2, #8]
1000cd6c:	438b      	bics	r3, r1
1000cd6e:	7213      	strb	r3, [r2, #8]
	}

}
1000cd70:	bd10      	pop	{r4, pc}
1000cd72:	46c0      	nop			; (mov r8, r8)

1000cd74 <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000cd74:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000cd76:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000cd78:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000cd7a:	4d12      	ldr	r5, [pc, #72]	; (1000cdc4 <gpio_port0_isr_handler+0x50>)
1000cd7c:	682e      	ldr	r6, [r5, #0]
1000cd7e:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000cd80:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000cd82:	0002      	movs	r2, r0
1000cd84:	409a      	lsls	r2, r3
1000cd86:	2401      	movs	r4, #1
1000cd88:	4211      	tst	r1, r2
1000cd8a:	d109      	bne.n	1000cda0 <gpio_port0_isr_handler+0x2c>
1000cd8c:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000cd8e:	2b10      	cmp	r3, #16
1000cd90:	d1f7      	bne.n	1000cd82 <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000cd92:	2180      	movs	r1, #128	; 0x80
1000cd94:	23c0      	movs	r3, #192	; 0xc0
1000cd96:	4a0c      	ldr	r2, [pc, #48]	; (1000cdc8 <gpio_port0_isr_handler+0x54>)
1000cd98:	0409      	lsls	r1, r1, #16
1000cd9a:	005b      	lsls	r3, r3, #1
1000cd9c:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000cd9e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cda0:	b292      	uxth	r2, r2
1000cda2:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000cda4:	2246      	movs	r2, #70	; 0x46
1000cda6:	5aaa      	ldrh	r2, [r5, r2]
1000cda8:	411a      	asrs	r2, r3
1000cdaa:	4214      	tst	r4, r2
1000cdac:	d0f1      	beq.n	1000cd92 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000cdae:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000cdb0:	5aaa      	ldrh	r2, [r5, r2]
1000cdb2:	411a      	asrs	r2, r3
1000cdb4:	4214      	tst	r4, r2
1000cdb6:	d0ec      	beq.n	1000cd92 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000cdb8:	009b      	lsls	r3, r3, #2
1000cdba:	18eb      	adds	r3, r5, r3
1000cdbc:	685b      	ldr	r3, [r3, #4]
1000cdbe:	4798      	blx	r3
1000cdc0:	e7e7      	b.n	1000cd92 <gpio_port0_isr_handler+0x1e>
1000cdc2:	46c0      	nop			; (mov r8, r8)
1000cdc4:	1001de88 	.word	0x1001de88
1000cdc8:	e000e100 	.word	0xe000e100

1000cdcc <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000cdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdce:	4657      	mov	r7, sl
1000cdd0:	464e      	mov	r6, r9
1000cdd2:	4645      	mov	r5, r8
1000cdd4:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000cdd6:	4e1b      	ldr	r6, [pc, #108]	; (1000ce44 <gpio_port1_isr_handler+0x78>)
1000cdd8:	2400      	movs	r4, #0
1000cdda:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000cddc:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000cdde:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000cde0:	b2bf      	uxth	r7, r7
1000cde2:	0b7b      	lsrs	r3, r7, #13
1000cde4:	035b      	lsls	r3, r3, #13
1000cde6:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000cde8:	4b17      	ldr	r3, [pc, #92]	; (1000ce48 <gpio_port1_isr_handler+0x7c>)
1000cdea:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000cdec:	238e      	movs	r3, #142	; 0x8e
1000cdee:	4699      	mov	r9, r3
1000cdf0:	e013      	b.n	1000ce1a <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000cdf2:	002b      	movs	r3, r5
1000cdf4:	40a3      	lsls	r3, r4
1000cdf6:	421f      	tst	r7, r3
1000cdf8:	d00c      	beq.n	1000ce14 <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cdfa:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000cdfc:	b29b      	uxth	r3, r3
1000cdfe:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ce00:	464b      	mov	r3, r9
1000ce02:	5af3      	ldrh	r3, [r6, r3]
1000ce04:	4123      	asrs	r3, r4
1000ce06:	421d      	tst	r5, r3
1000ce08:	d004      	beq.n	1000ce14 <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000ce0a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ce0c:	5af3      	ldrh	r3, [r6, r3]
1000ce0e:	4123      	asrs	r3, r4
1000ce10:	421d      	tst	r5, r3
1000ce12:	d107      	bne.n	1000ce24 <gpio_port1_isr_handler+0x58>
1000ce14:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000ce16:	2c10      	cmp	r4, #16
1000ce18:	d009      	beq.n	1000ce2e <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000ce1a:	4643      	mov	r3, r8
1000ce1c:	2b00      	cmp	r3, #0
1000ce1e:	d0e8      	beq.n	1000cdf2 <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000ce20:	47d0      	blx	sl
1000ce22:	e7e6      	b.n	1000cdf2 <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000ce24:	3412      	adds	r4, #18
1000ce26:	00a4      	lsls	r4, r4, #2
1000ce28:	1934      	adds	r4, r6, r4
1000ce2a:	6863      	ldr	r3, [r4, #4]
1000ce2c:	4798      	blx	r3
1000ce2e:	2180      	movs	r1, #128	; 0x80
1000ce30:	23c0      	movs	r3, #192	; 0xc0
1000ce32:	4a06      	ldr	r2, [pc, #24]	; (1000ce4c <gpio_port1_isr_handler+0x80>)
1000ce34:	0449      	lsls	r1, r1, #17
1000ce36:	005b      	lsls	r3, r3, #1
1000ce38:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000ce3a:	bc1c      	pop	{r2, r3, r4}
1000ce3c:	4690      	mov	r8, r2
1000ce3e:	4699      	mov	r9, r3
1000ce40:	46a2      	mov	sl, r4
1000ce42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce44:	1001de88 	.word	0x1001de88
1000ce48:	0001bc51 	.word	0x0001bc51
1000ce4c:	e000e100 	.word	0xe000e100

1000ce50 <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000ce50:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ce52:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000ce54:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000ce56:	491a      	ldr	r1, [pc, #104]	; (1000cec0 <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ce58:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000ce5a:	58c8      	ldr	r0, [r1, r3]
1000ce5c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ce5e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ce60:	4213      	tst	r3, r2
1000ce62:	d110      	bne.n	1000ce86 <gpio_port2_isr_handler+0x36>
1000ce64:	2280      	movs	r2, #128	; 0x80
1000ce66:	0192      	lsls	r2, r2, #6
1000ce68:	4213      	tst	r3, r2
1000ce6a:	d120      	bne.n	1000ceae <gpio_port2_isr_handler+0x5e>
1000ce6c:	2280      	movs	r2, #128	; 0x80
1000ce6e:	01d2      	lsls	r2, r2, #7
1000ce70:	4213      	tst	r3, r2
1000ce72:	d11e      	bne.n	1000ceb2 <gpio_port2_isr_handler+0x62>
1000ce74:	0bdb      	lsrs	r3, r3, #15
1000ce76:	d11e      	bne.n	1000ceb6 <gpio_port2_isr_handler+0x66>
1000ce78:	2180      	movs	r1, #128	; 0x80
1000ce7a:	23c0      	movs	r3, #192	; 0xc0
1000ce7c:	4a11      	ldr	r2, [pc, #68]	; (1000cec4 <gpio_port2_isr_handler+0x74>)
1000ce7e:	0489      	lsls	r1, r1, #18
1000ce80:	005b      	lsls	r3, r3, #1
1000ce82:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000ce84:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ce86:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ce88:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000ce8a:	b292      	uxth	r2, r2
1000ce8c:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ce8e:	5acb      	ldrh	r3, [r1, r3]
1000ce90:	2201      	movs	r2, #1
1000ce92:	4123      	asrs	r3, r4
1000ce94:	421a      	tst	r2, r3
1000ce96:	d0ef      	beq.n	1000ce78 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000ce98:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000ce9a:	5acb      	ldrh	r3, [r1, r3]
1000ce9c:	4123      	asrs	r3, r4
1000ce9e:	421a      	tst	r2, r3
1000cea0:	d0ea      	beq.n	1000ce78 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000cea2:	3424      	adds	r4, #36	; 0x24
1000cea4:	00a4      	lsls	r4, r4, #2
1000cea6:	1909      	adds	r1, r1, r4
1000cea8:	684b      	ldr	r3, [r1, #4]
1000ceaa:	4798      	blx	r3
1000ceac:	e7e4      	b.n	1000ce78 <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000ceae:	240d      	movs	r4, #13
1000ceb0:	e7ea      	b.n	1000ce88 <gpio_port2_isr_handler+0x38>
1000ceb2:	240e      	movs	r4, #14
1000ceb4:	e7e8      	b.n	1000ce88 <gpio_port2_isr_handler+0x38>
1000ceb6:	2280      	movs	r2, #128	; 0x80
1000ceb8:	240f      	movs	r4, #15
1000ceba:	0212      	lsls	r2, r2, #8
1000cebc:	e7e4      	b.n	1000ce88 <gpio_port2_isr_handler+0x38>
1000cebe:	46c0      	nop			; (mov r8, r8)
1000cec0:	1001de88 	.word	0x1001de88
1000cec4:	e000e100 	.word	0xe000e100

1000cec8 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000cec8:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000ceca:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000cecc:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000cece:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000ced0:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000ced2:	70c3      	strb	r3, [r0, #3]
}
1000ced4:	4770      	bx	lr
1000ced6:	46c0      	nop			; (mov r8, r8)

1000ced8 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000ced8:	0003      	movs	r3, r0
1000ceda:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000cedc:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000cede:	2b01      	cmp	r3, #1
1000cee0:	d92b      	bls.n	1000cf3a <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000cee2:	2b07      	cmp	r3, #7
1000cee4:	d82a      	bhi.n	1000cf3c <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cee6:	009d      	lsls	r5, r3, #2
1000cee8:	3810      	subs	r0, #16
1000ceea:	40a8      	lsls	r0, r5
1000ceec:	4c5a      	ldr	r4, [pc, #360]	; (1000d058 <gpio_pin_set_config+0x180>)
1000ceee:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000cef0:	4382      	bics	r2, r0
1000cef2:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000cef4:	001a      	movs	r2, r3
1000cef6:	3a1d      	subs	r2, #29
1000cef8:	2a02      	cmp	r2, #2
1000cefa:	d834      	bhi.n	1000cf66 <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cefc:	241f      	movs	r4, #31
1000cefe:	4d57      	ldr	r5, [pc, #348]	; (1000d05c <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000cf00:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cf02:	7d28      	ldrb	r0, [r5, #20]
1000cf04:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000cf06:	2a01      	cmp	r2, #1
1000cf08:	d063      	beq.n	1000cfd2 <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000cf0a:	2201      	movs	r2, #1
1000cf0c:	40a2      	lsls	r2, r4
1000cf0e:	4302      	orrs	r2, r0
1000cf10:	b2d2      	uxtb	r2, r2
1000cf12:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000cf14:	78ca      	ldrb	r2, [r1, #3]
1000cf16:	2a00      	cmp	r2, #0
1000cf18:	d023      	beq.n	1000cf62 <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000cf1a:	201f      	movs	r0, #31
1000cf1c:	1ac0      	subs	r0, r0, r3
1000cf1e:	2301      	movs	r3, #1
1000cf20:	0080      	lsls	r0, r0, #2
1000cf22:	4083      	lsls	r3, r0
1000cf24:	494d      	ldr	r1, [pc, #308]	; (1000d05c <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cf26:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000cf28:	880a      	ldrh	r2, [r1, #0]
1000cf2a:	4313      	orrs	r3, r2
1000cf2c:	b29b      	uxth	r3, r3
1000cf2e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000cf30:	2302      	movs	r3, #2
1000cf32:	4a4b      	ldr	r2, [pc, #300]	; (1000d060 <gpio_pin_set_config+0x188>)
1000cf34:	7811      	ldrb	r1, [r2, #0]
1000cf36:	430b      	orrs	r3, r1
1000cf38:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000cf3a:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000cf3c:	2b0f      	cmp	r3, #15
1000cf3e:	d93e      	bls.n	1000cfbe <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000cf40:	2b17      	cmp	r3, #23
1000cf42:	d84a      	bhi.n	1000cfda <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cf44:	2207      	movs	r2, #7
1000cf46:	0014      	movs	r4, r2
1000cf48:	401c      	ands	r4, r3
1000cf4a:	00a4      	lsls	r4, r4, #2
1000cf4c:	40a2      	lsls	r2, r4
1000cf4e:	4d42      	ldr	r5, [pc, #264]	; (1000d058 <gpio_pin_set_config+0x180>)
1000cf50:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000cf52:	4390      	bics	r0, r2
1000cf54:	64e8      	str	r0, [r5, #76]	; 0x4c
1000cf56:	e7cd      	b.n	1000cef4 <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cf58:	4003      	ands	r3, r0
1000cf5a:	409a      	lsls	r2, r3
1000cf5c:	4b41      	ldr	r3, [pc, #260]	; (1000d064 <gpio_pin_set_config+0x18c>)
1000cf5e:	b292      	uxth	r2, r2
1000cf60:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cf62:	2000      	movs	r0, #0
1000cf64:	e7e9      	b.n	1000cf3a <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000cf66:	780a      	ldrb	r2, [r1, #0]
1000cf68:	2a00      	cmp	r2, #0
1000cf6a:	d11a      	bne.n	1000cfa2 <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000cf6c:	2b0f      	cmp	r3, #15
1000cf6e:	d849      	bhi.n	1000d004 <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000cf70:	3201      	adds	r2, #1
1000cf72:	409a      	lsls	r2, r3
1000cf74:	483c      	ldr	r0, [pc, #240]	; (1000d068 <gpio_pin_set_config+0x190>)
1000cf76:	b292      	uxth	r2, r2
1000cf78:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000cf7a:	784a      	ldrb	r2, [r1, #1]
1000cf7c:	2a01      	cmp	r2, #1
1000cf7e:	d063      	beq.n	1000d048 <gpio_pin_set_config+0x170>
1000cf80:	2a00      	cmp	r2, #0
1000cf82:	d050      	beq.n	1000d026 <gpio_pin_set_config+0x14e>
1000cf84:	2a02      	cmp	r2, #2
1000cf86:	d15d      	bne.n	1000d044 <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000cf88:	2101      	movs	r1, #1
1000cf8a:	4099      	lsls	r1, r3
1000cf8c:	4a32      	ldr	r2, [pc, #200]	; (1000d058 <gpio_pin_set_config+0x180>)
1000cf8e:	000b      	movs	r3, r1
1000cf90:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000cf92:	0001      	movs	r1, r0
1000cf94:	4319      	orrs	r1, r3
1000cf96:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cf98:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cf9a:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cf9c:	4399      	bics	r1, r3
1000cf9e:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000cfa0:	e7cb      	b.n	1000cf3a <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000cfa2:	2a01      	cmp	r2, #1
1000cfa4:	d1dd      	bne.n	1000cf62 <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000cfa6:	2b0f      	cmp	r3, #15
1000cfa8:	d946      	bls.n	1000d038 <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cfaa:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000cfac:	2b1f      	cmp	r3, #31
1000cfae:	d9d3      	bls.n	1000cf58 <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cfb0:	4003      	ands	r3, r0
1000cfb2:	409a      	lsls	r2, r3
1000cfb4:	4b2d      	ldr	r3, [pc, #180]	; (1000d06c <gpio_pin_set_config+0x194>)
1000cfb6:	b292      	uxth	r2, r2
1000cfb8:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cfba:	2000      	movs	r0, #0
1000cfbc:	e7bd      	b.n	1000cf3a <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cfbe:	2207      	movs	r2, #7
1000cfc0:	0014      	movs	r4, r2
1000cfc2:	401c      	ands	r4, r3
1000cfc4:	00a4      	lsls	r4, r4, #2
1000cfc6:	40a2      	lsls	r2, r4
1000cfc8:	4d23      	ldr	r5, [pc, #140]	; (1000d058 <gpio_pin_set_config+0x180>)
1000cfca:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000cfcc:	4390      	bics	r0, r2
1000cfce:	64a8      	str	r0, [r5, #72]	; 0x48
1000cfd0:	e790      	b.n	1000cef4 <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cfd2:	40a2      	lsls	r2, r4
1000cfd4:	4390      	bics	r0, r2
1000cfd6:	7528      	strb	r0, [r5, #20]
1000cfd8:	e79c      	b.n	1000cf14 <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000cfda:	001a      	movs	r2, r3
1000cfdc:	3a2c      	subs	r2, #44	; 0x2c
1000cfde:	b2d0      	uxtb	r0, r2
1000cfe0:	2803      	cmp	r0, #3
1000cfe2:	d900      	bls.n	1000cfe6 <gpio_pin_set_config+0x10e>
1000cfe4:	e786      	b.n	1000cef4 <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000cfe6:	2601      	movs	r6, #1
1000cfe8:	2482      	movs	r4, #130	; 0x82
1000cfea:	4096      	lsls	r6, r2
1000cfec:	4d1b      	ldr	r5, [pc, #108]	; (1000d05c <gpio_pin_set_config+0x184>)
1000cfee:	00e4      	lsls	r4, r4, #3
1000cff0:	5d28      	ldrb	r0, [r5, r4]
1000cff2:	5d2a      	ldrb	r2, [r5, r4]
1000cff4:	0700      	lsls	r0, r0, #28
1000cff6:	0f00      	lsrs	r0, r0, #28
1000cff8:	43b0      	bics	r0, r6
1000cffa:	260f      	movs	r6, #15
1000cffc:	43b2      	bics	r2, r6
1000cffe:	4302      	orrs	r2, r0
1000d000:	552a      	strb	r2, [r5, r4]
1000d002:	e777      	b.n	1000cef4 <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d004:	200f      	movs	r0, #15
1000d006:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000d008:	2b1f      	cmp	r3, #31
1000d00a:	d805      	bhi.n	1000d018 <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d00c:	2201      	movs	r2, #1
1000d00e:	4082      	lsls	r2, r0
1000d010:	4814      	ldr	r0, [pc, #80]	; (1000d064 <gpio_pin_set_config+0x18c>)
1000d012:	b292      	uxth	r2, r2
1000d014:	8282      	strh	r2, [r0, #20]
1000d016:	e7b0      	b.n	1000cf7a <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d018:	2301      	movs	r3, #1
1000d01a:	4083      	lsls	r3, r0
1000d01c:	4a13      	ldr	r2, [pc, #76]	; (1000d06c <gpio_pin_set_config+0x194>)
1000d01e:	b29b      	uxth	r3, r3
1000d020:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d022:	2000      	movs	r0, #0
1000d024:	e789      	b.n	1000cf3a <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000d026:	2101      	movs	r1, #1
1000d028:	4099      	lsls	r1, r3
1000d02a:	000b      	movs	r3, r1
1000d02c:	480a      	ldr	r0, [pc, #40]	; (1000d058 <gpio_pin_set_config+0x180>)
1000d02e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000d030:	4313      	orrs	r3, r2
1000d032:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d034:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000d036:	e780      	b.n	1000cf3a <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000d038:	409a      	lsls	r2, r3
1000d03a:	4b0b      	ldr	r3, [pc, #44]	; (1000d068 <gpio_pin_set_config+0x190>)
1000d03c:	b292      	uxth	r2, r2
1000d03e:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d040:	2000      	movs	r0, #0
1000d042:	e77a      	b.n	1000cf3a <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000d044:	2017      	movs	r0, #23
1000d046:	e778      	b.n	1000cf3a <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d048:	4803      	ldr	r0, [pc, #12]	; (1000d058 <gpio_pin_set_config+0x180>)
1000d04a:	409a      	lsls	r2, r3
1000d04c:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000d04e:	000b      	movs	r3, r1
1000d050:	4393      	bics	r3, r2
1000d052:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d054:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000d056:	e770      	b.n	1000cf3a <gpio_pin_set_config+0x62>
1000d058:	4000b000 	.word	0x4000b000
1000d05c:	4000f000 	.word	0x4000f000
1000d060:	4000e000 	.word	0x4000e000
1000d064:	40011000 	.word	0x40011000
1000d068:	40010000 	.word	0x40010000
1000d06c:	40013000 	.word	0x40013000

1000d070 <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000d070:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000d072:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000d074:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000d076:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000d078:	2807      	cmp	r0, #7
1000d07a:	d80e      	bhi.n	1000d09a <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d07c:	2407      	movs	r4, #7
1000d07e:	0086      	lsls	r6, r0, #2
1000d080:	40b4      	lsls	r4, r6
1000d082:	4b31      	ldr	r3, [pc, #196]	; (1000d148 <gpio_pinmux_cofiguration+0xd8>)
1000d084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d086:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d088:	000c      	movs	r4, r1
1000d08a:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d08c:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d08e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d090:	4322      	orrs	r2, r4
1000d092:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000d094:	2901      	cmp	r1, #1
1000d096:	d036      	beq.n	1000d106 <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000d098:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000d09a:	280f      	cmp	r0, #15
1000d09c:	d816      	bhi.n	1000d0cc <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d09e:	2407      	movs	r4, #7
1000d0a0:	0022      	movs	r2, r4
1000d0a2:	4002      	ands	r2, r0
1000d0a4:	0092      	lsls	r2, r2, #2
1000d0a6:	4094      	lsls	r4, r2
1000d0a8:	4b27      	ldr	r3, [pc, #156]	; (1000d148 <gpio_pinmux_cofiguration+0xd8>)
1000d0aa:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000d0ac:	43a6      	bics	r6, r4
1000d0ae:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d0b0:	000e      	movs	r6, r1
1000d0b2:	4096      	lsls	r6, r2
1000d0b4:	0032      	movs	r2, r6
1000d0b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000d0b8:	4322      	orrs	r2, r4
1000d0ba:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000d0bc:	2901      	cmp	r1, #1
1000d0be:	d1eb      	bne.n	1000d098 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d0c0:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000d0c2:	280b      	cmp	r0, #11
1000d0c4:	d93e      	bls.n	1000d144 <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d0c6:	21d6      	movs	r1, #214	; 0xd6
1000d0c8:	0049      	lsls	r1, r1, #1
1000d0ca:	e020      	b.n	1000d10e <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000d0cc:	2817      	cmp	r0, #23
1000d0ce:	d8e3      	bhi.n	1000d098 <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d0d0:	2407      	movs	r4, #7
1000d0d2:	0022      	movs	r2, r4
1000d0d4:	4002      	ands	r2, r0
1000d0d6:	0092      	lsls	r2, r2, #2
1000d0d8:	4094      	lsls	r4, r2
1000d0da:	4b1b      	ldr	r3, [pc, #108]	; (1000d148 <gpio_pinmux_cofiguration+0xd8>)
1000d0dc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000d0de:	43a6      	bics	r6, r4
1000d0e0:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d0e2:	000e      	movs	r6, r1
1000d0e4:	4096      	lsls	r6, r2
1000d0e6:	0032      	movs	r2, r6
1000d0e8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000d0ea:	4322      	orrs	r2, r4
1000d0ec:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000d0ee:	2901      	cmp	r1, #1
1000d0f0:	d1d2      	bne.n	1000d098 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000d0f2:	2813      	cmp	r0, #19
1000d0f4:	d925      	bls.n	1000d142 <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d0f6:	2403      	movs	r4, #3
1000d0f8:	22da      	movs	r2, #218	; 0xda
1000d0fa:	4020      	ands	r0, r4
1000d0fc:	0052      	lsls	r2, r2, #1
1000d0fe:	5899      	ldr	r1, [r3, r2]
1000d100:	00c0      	lsls	r0, r0, #3
1000d102:	343c      	adds	r4, #60	; 0x3c
1000d104:	e015      	b.n	1000d132 <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000d106:	2803      	cmp	r0, #3
1000d108:	d90e      	bls.n	1000d128 <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d10a:	21d2      	movs	r1, #210	; 0xd2
1000d10c:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d10e:	2203      	movs	r2, #3
1000d110:	4010      	ands	r0, r2
1000d112:	00c0      	lsls	r0, r0, #3
1000d114:	323c      	adds	r2, #60	; 0x3c
1000d116:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d118:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d11a:	585c      	ldr	r4, [r3, r1]
1000d11c:	4394      	bics	r4, r2
1000d11e:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d120:	585a      	ldr	r2, [r3, r1]
1000d122:	4315      	orrs	r5, r2
1000d124:	505d      	str	r5, [r3, r1]
1000d126:	e7b7      	b.n	1000d098 <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d128:	22d0      	movs	r2, #208	; 0xd0
1000d12a:	243f      	movs	r4, #63	; 0x3f
1000d12c:	0052      	lsls	r2, r2, #1
1000d12e:	5899      	ldr	r1, [r3, r2]
1000d130:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d132:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d134:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d136:	43a1      	bics	r1, r4
1000d138:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d13a:	5899      	ldr	r1, [r3, r2]
1000d13c:	430d      	orrs	r5, r1
1000d13e:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000d140:	e7aa      	b.n	1000d098 <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d142:	31b0      	adds	r1, #176	; 0xb0
1000d144:	31ff      	adds	r1, #255	; 0xff
1000d146:	e7e2      	b.n	1000d10e <gpio_pinmux_cofiguration+0x9e>
1000d148:	4000b000 	.word	0x4000b000

1000d14c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d14e:	468c      	mov	ip, r1
1000d150:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d152:	280f      	cmp	r0, #15
1000d154:	d904      	bls.n	1000d160 <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000d156:	331f      	adds	r3, #31
1000d158:	4283      	cmp	r3, r0
1000d15a:	419b      	sbcs	r3, r3
1000d15c:	425b      	negs	r3, r3
1000d15e:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000d160:	2a01      	cmp	r2, #1
1000d162:	d043      	beq.n	1000d1ec <gpio_register_callback+0xa0>
1000d164:	2a00      	cmp	r2, #0
1000d166:	d033      	beq.n	1000d1d0 <gpio_register_callback+0x84>
1000d168:	2a02      	cmp	r2, #2
1000d16a:	d015      	beq.n	1000d198 <gpio_register_callback+0x4c>
1000d16c:	2a03      	cmp	r2, #3
1000d16e:	d021      	beq.n	1000d1b4 <gpio_register_callback+0x68>
1000d170:	220f      	movs	r2, #15
1000d172:	4010      	ands	r0, r2
1000d174:	3a0e      	subs	r2, #14
1000d176:	4082      	lsls	r2, r0
1000d178:	4c23      	ldr	r4, [pc, #140]	; (1000d208 <gpio_register_callback+0xbc>)
1000d17a:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d17c:	4661      	mov	r1, ip
1000d17e:	18eb      	adds	r3, r5, r3
1000d180:	005d      	lsls	r5, r3, #1
1000d182:	1828      	adds	r0, r5, r0
1000d184:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d186:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d188:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d18a:	18e3      	adds	r3, r4, r3
1000d18c:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d18e:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d190:	8819      	ldrh	r1, [r3, #0]
1000d192:	430a      	orrs	r2, r1
1000d194:	801a      	strh	r2, [r3, #0]
}
1000d196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d198:	220f      	movs	r2, #15
1000d19a:	4010      	ands	r0, r2
1000d19c:	3a0e      	subs	r2, #14
1000d19e:	4082      	lsls	r2, r0
1000d1a0:	00dd      	lsls	r5, r3, #3
1000d1a2:	4c19      	ldr	r4, [pc, #100]	; (1000d208 <gpio_register_callback+0xbc>)
1000d1a4:	18ee      	adds	r6, r5, r3
1000d1a6:	00f6      	lsls	r6, r6, #3
1000d1a8:	59a1      	ldr	r1, [r4, r6]
1000d1aa:	b297      	uxth	r7, r2
1000d1ac:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d1ae:	59a6      	ldr	r6, [r4, r6]
1000d1b0:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d1b2:	e7e3      	b.n	1000d17c <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d1b4:	220f      	movs	r2, #15
1000d1b6:	4010      	ands	r0, r2
1000d1b8:	3a0e      	subs	r2, #14
1000d1ba:	4082      	lsls	r2, r0
1000d1bc:	00dd      	lsls	r5, r3, #3
1000d1be:	4c12      	ldr	r4, [pc, #72]	; (1000d208 <gpio_register_callback+0xbc>)
1000d1c0:	18ee      	adds	r6, r5, r3
1000d1c2:	00f6      	lsls	r6, r6, #3
1000d1c4:	59a1      	ldr	r1, [r4, r6]
1000d1c6:	b297      	uxth	r7, r2
1000d1c8:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000d1ca:	59a6      	ldr	r6, [r4, r6]
1000d1cc:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d1ce:	e7d5      	b.n	1000d17c <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d1d0:	220f      	movs	r2, #15
1000d1d2:	4010      	ands	r0, r2
1000d1d4:	3a0e      	subs	r2, #14
1000d1d6:	4082      	lsls	r2, r0
1000d1d8:	00dd      	lsls	r5, r3, #3
1000d1da:	4c0b      	ldr	r4, [pc, #44]	; (1000d208 <gpio_register_callback+0xbc>)
1000d1dc:	18ee      	adds	r6, r5, r3
1000d1de:	00f6      	lsls	r6, r6, #3
1000d1e0:	59a1      	ldr	r1, [r4, r6]
1000d1e2:	b297      	uxth	r7, r2
1000d1e4:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000d1e6:	59a6      	ldr	r6, [r4, r6]
1000d1e8:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d1ea:	e7c7      	b.n	1000d17c <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d1ec:	270f      	movs	r7, #15
1000d1ee:	4038      	ands	r0, r7
1000d1f0:	4082      	lsls	r2, r0
1000d1f2:	00dd      	lsls	r5, r3, #3
1000d1f4:	4c04      	ldr	r4, [pc, #16]	; (1000d208 <gpio_register_callback+0xbc>)
1000d1f6:	18ee      	adds	r6, r5, r3
1000d1f8:	00f6      	lsls	r6, r6, #3
1000d1fa:	59a1      	ldr	r1, [r4, r6]
1000d1fc:	b297      	uxth	r7, r2
1000d1fe:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d200:	59a6      	ldr	r6, [r4, r6]
1000d202:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d204:	e7ba      	b.n	1000d17c <gpio_register_callback+0x30>
1000d206:	46c0      	nop			; (mov r8, r8)
1000d208:	1001de88 	.word	0x1001de88

1000d20c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000d20c:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d20e:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d210:	280f      	cmp	r0, #15
1000d212:	d91b      	bls.n	1000d24c <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000d214:	281f      	cmp	r0, #31
1000d216:	d914      	bls.n	1000d242 <gpio_enable_callback+0x36>
1000d218:	4b0f      	ldr	r3, [pc, #60]	; (1000d258 <gpio_enable_callback+0x4c>)
1000d21a:	0492      	lsls	r2, r2, #18
1000d21c:	601a      	str	r2, [r3, #0]
1000d21e:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d220:	220f      	movs	r2, #15
1000d222:	4010      	ands	r0, r2
1000d224:	3a0e      	subs	r2, #14
1000d226:	4082      	lsls	r2, r0
1000d228:	00d9      	lsls	r1, r3, #3
1000d22a:	4c0c      	ldr	r4, [pc, #48]	; (1000d25c <gpio_enable_callback+0x50>)
1000d22c:	18cb      	adds	r3, r1, r3
1000d22e:	00db      	lsls	r3, r3, #3
1000d230:	18e1      	adds	r1, r4, r3
1000d232:	3146      	adds	r1, #70	; 0x46
1000d234:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d236:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d238:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d23a:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d23c:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d23e:	841a      	strh	r2, [r3, #32]
}
1000d240:	bd10      	pop	{r4, pc}
1000d242:	4b05      	ldr	r3, [pc, #20]	; (1000d258 <gpio_enable_callback+0x4c>)
1000d244:	0452      	lsls	r2, r2, #17
1000d246:	601a      	str	r2, [r3, #0]
1000d248:	2301      	movs	r3, #1
1000d24a:	e7e9      	b.n	1000d220 <gpio_enable_callback+0x14>
1000d24c:	4b02      	ldr	r3, [pc, #8]	; (1000d258 <gpio_enable_callback+0x4c>)
1000d24e:	0412      	lsls	r2, r2, #16
1000d250:	601a      	str	r2, [r3, #0]
1000d252:	2300      	movs	r3, #0
1000d254:	e7e4      	b.n	1000d220 <gpio_enable_callback+0x14>
1000d256:	46c0      	nop			; (mov r8, r8)
1000d258:	e000e100 	.word	0xe000e100
1000d25c:	1001de88 	.word	0x1001de88

1000d260 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000d260:	4a11      	ldr	r2, [pc, #68]	; (1000d2a8 <gpio_init+0x48>)
1000d262:	b510      	push	{r4, lr}
1000d264:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000d266:	2100      	movs	r1, #0
1000d268:	2000      	movs	r0, #0
1000d26a:	34d8      	adds	r4, #216	; 0xd8
1000d26c:	0013      	movs	r3, r2
1000d26e:	3b40      	subs	r3, #64	; 0x40
1000d270:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000d272:	429a      	cmp	r2, r3
1000d274:	d1fc      	bne.n	1000d270 <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000d276:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000d278:	8010      	strh	r0, [r2, #0]
1000d27a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000d27c:	42a2      	cmp	r2, r4
1000d27e:	d1f5      	bne.n	1000d26c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d280:	4b0a      	ldr	r3, [pc, #40]	; (1000d2ac <gpio_init+0x4c>)
1000d282:	4a0b      	ldr	r2, [pc, #44]	; (1000d2b0 <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d284:	490b      	ldr	r1, [pc, #44]	; (1000d2b4 <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d286:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000d288:	4a0b      	ldr	r2, [pc, #44]	; (1000d2b8 <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d28a:	4c0c      	ldr	r4, [pc, #48]	; (1000d2bc <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000d28c:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000d28e:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d290:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d292:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d294:	490a      	ldr	r1, [pc, #40]	; (1000d2c0 <gpio_init+0x60>)
1000d296:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000d298:	490a      	ldr	r1, [pc, #40]	; (1000d2c4 <gpio_init+0x64>)
1000d29a:	2028      	movs	r0, #40	; 0x28
1000d29c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000d29e:	490a      	ldr	r1, [pc, #40]	; (1000d2c8 <gpio_init+0x68>)
1000d2a0:	2029      	movs	r0, #41	; 0x29
1000d2a2:	47a0      	blx	r4
}
1000d2a4:	bd10      	pop	{r4, pc}
1000d2a6:	46c0      	nop			; (mov r8, r8)
1000d2a8:	1001decc 	.word	0x1001decc
1000d2ac:	1001de88 	.word	0x1001de88
1000d2b0:	40010000 	.word	0x40010000
1000d2b4:	40013000 	.word	0x40013000
1000d2b8:	40011000 	.word	0x40011000
1000d2bc:	1000dc49 	.word	0x1000dc49
1000d2c0:	1000cd75 	.word	0x1000cd75
1000d2c4:	1000cdcd 	.word	0x1000cdcd
1000d2c8:	1000ce51 	.word	0x1000ce51

1000d2cc <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2ce:	464f      	mov	r7, r9
1000d2d0:	4646      	mov	r6, r8
1000d2d2:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000d2d4:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d2d6:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d2d8:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000d2da:	2d00      	cmp	r5, #0
1000d2dc:	d104      	bne.n	1000d2e8 <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000d2de:	0018      	movs	r0, r3
1000d2e0:	bc0c      	pop	{r2, r3}
1000d2e2:	4690      	mov	r8, r2
1000d2e4:	4699      	mov	r9, r3
1000d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d2e8:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000d2ea:	6802      	ldr	r2, [r0, #0]
1000d2ec:	5d13      	ldrb	r3, [r2, r4]
1000d2ee:	07db      	lsls	r3, r3, #31
1000d2f0:	d4fc      	bmi.n	1000d2ec <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d2f2:	2301      	movs	r3, #1
1000d2f4:	2434      	movs	r4, #52	; 0x34
1000d2f6:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d2f8:	3c14      	subs	r4, #20
1000d2fa:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000d2fc:	2402      	movs	r4, #2
1000d2fe:	880b      	ldrh	r3, [r1, #0]
1000d300:	34ff      	adds	r4, #255	; 0xff
1000d302:	005b      	lsls	r3, r3, #1
1000d304:	4323      	orrs	r3, r4
1000d306:	b29b      	uxth	r3, r3
1000d308:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d30a:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000d30c:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d30e:	4698      	mov	r8, r3
1000d310:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000d312:	7b13      	ldrb	r3, [r2, #12]
1000d314:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d316:	4218      	tst	r0, r3
1000d318:	d006      	beq.n	1000d328 <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000d31a:	7910      	ldrb	r0, [r2, #4]
1000d31c:	1c67      	adds	r7, r4, #1
1000d31e:	4684      	mov	ip, r0
1000d320:	4666      	mov	r6, ip
1000d322:	6848      	ldr	r0, [r1, #4]
1000d324:	5506      	strb	r6, [r0, r4]
1000d326:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000d328:	42ac      	cmp	r4, r5
1000d32a:	d3f1      	bcc.n	1000d310 <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d32c:	06db      	lsls	r3, r3, #27
1000d32e:	d403      	bmi.n	1000d338 <_i2c_master_read_packet+0x6c>
1000d330:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d332:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d334:	4219      	tst	r1, r3
1000d336:	d0fc      	beq.n	1000d332 <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d338:	464b      	mov	r3, r9
1000d33a:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000d33c:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d33e:	2900      	cmp	r1, #0
1000d340:	d1cd      	bne.n	1000d2de <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d342:	3120      	adds	r1, #32
1000d344:	5453      	strb	r3, [r2, r1]
1000d346:	e7ca      	b.n	1000d2de <_i2c_master_read_packet+0x12>

1000d348 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d348:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d34a:	4684      	mov	ip, r0
1000d34c:	2428      	movs	r4, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000d34e:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000d350:	884e      	ldrh	r6, [r1, #2]
1000d352:	5d13      	ldrb	r3, [r2, r4]
1000d354:	07db      	lsls	r3, r3, #31
1000d356:	d4fc      	bmi.n	1000d352 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d358:	2301      	movs	r3, #1
1000d35a:	2434      	movs	r4, #52	; 0x34
1000d35c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d35e:	3c14      	subs	r4, #20
1000d360:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d362:	880b      	ldrh	r3, [r1, #0]
1000d364:	34e0      	adds	r4, #224	; 0xe0
1000d366:	005b      	lsls	r3, r3, #1
1000d368:	4323      	orrs	r3, r4
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d36a:	2501      	movs	r5, #1
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000d36c:	2400      	movs	r4, #0

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d36e:	b29b      	uxth	r3, r3
1000d370:	8013      	strh	r3, [r2, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d372:	7a13      	ldrb	r3, [r2, #8]
1000d374:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d376:	421d      	tst	r5, r3
1000d378:	d004      	beq.n	1000d384 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000d37a:	6848      	ldr	r0, [r1, #4]
1000d37c:	1c67      	adds	r7, r4, #1
1000d37e:	5d04      	ldrb	r4, [r0, r4]
1000d380:	8014      	strh	r4, [r2, #0]
1000d382:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000d384:	42b4      	cmp	r4, r6
1000d386:	d3f4      	bcc.n	1000d372 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d388:	06db      	lsls	r3, r3, #27
1000d38a:	d403      	bmi.n	1000d394 <_i2c_master_write_packet+0x4c>
1000d38c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000d38e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d390:	4219      	tst	r1, r3
1000d392:	d0fc      	beq.n	1000d38e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000d394:	4663      	mov	r3, ip
1000d396:	795b      	ldrb	r3, [r3, #5]
1000d398:	2b00      	cmp	r3, #0
1000d39a:	d101      	bne.n	1000d3a0 <_i2c_master_write_packet+0x58>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d39c:	2120      	movs	r1, #32
1000d39e:	5453      	strb	r3, [r2, r1]
	}

	return STATUS_OK;
}
1000d3a0:	2000      	movs	r0, #0
1000d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d3a4 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d3a4:	2303      	movs	r3, #3
1000d3a6:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000d3a8:	330d      	adds	r3, #13
1000d3aa:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000d3ac:	3b08      	subs	r3, #8
1000d3ae:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000d3b0:	3301      	adds	r3, #1
1000d3b2:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d3b4:	3b07      	subs	r3, #7
1000d3b6:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d3b8:	6103      	str	r3, [r0, #16]
}
1000d3ba:	4770      	bx	lr

1000d3bc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000d3bc:	b570      	push	{r4, r5, r6, lr}
1000d3be:	0015      	movs	r5, r2
1000d3c0:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d3c2:	6001      	str	r1, [r0, #0]
1000d3c4:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d3c6:	2d00      	cmp	r5, #0
1000d3c8:	d00d      	beq.n	1000d3e6 <i2c_master_init+0x2a>
1000d3ca:	5c8b      	ldrb	r3, [r1, r2]
1000d3cc:	07db      	lsls	r3, r3, #31
1000d3ce:	0fdb      	lsrs	r3, r3, #31
1000d3d0:	b2db      	uxtb	r3, r3
1000d3d2:	2b00      	cmp	r3, #0
1000d3d4:	d1f9      	bne.n	1000d3ca <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d3d6:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000d3d8:	6823      	ldr	r3, [r4, #0]
1000d3da:	4a0f      	ldr	r2, [pc, #60]	; (1000d418 <i2c_master_init+0x5c>)
1000d3dc:	4293      	cmp	r3, r2
1000d3de:	d017      	beq.n	1000d410 <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000d3e0:	4a0e      	ldr	r2, [pc, #56]	; (1000d41c <i2c_master_init+0x60>)
1000d3e2:	4293      	cmp	r3, r2
1000d3e4:	d001      	beq.n	1000d3ea <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d3e6:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000d3e8:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d3ea:	2019      	movs	r0, #25
1000d3ec:	4b0c      	ldr	r3, [pc, #48]	; (1000d420 <i2c_master_init+0x64>)
1000d3ee:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d3f0:	8929      	ldrh	r1, [r5, #8]
1000d3f2:	7928      	ldrb	r0, [r5, #4]
1000d3f4:	4e0b      	ldr	r6, [pc, #44]	; (1000d424 <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000d3f6:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d3f8:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d3fa:	7b28      	ldrb	r0, [r5, #12]
1000d3fc:	8a29      	ldrh	r1, [r5, #16]
1000d3fe:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d400:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000d402:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d404:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d406:	886b      	ldrh	r3, [r5, #2]
1000d408:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d40a:	2301      	movs	r3, #1
1000d40c:	7723      	strb	r3, [r4, #28]
1000d40e:	e7eb      	b.n	1000d3e8 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d410:	4b03      	ldr	r3, [pc, #12]	; (1000d420 <i2c_master_init+0x64>)
1000d412:	2003      	movs	r0, #3
1000d414:	4798      	blx	r3
1000d416:	e7eb      	b.n	1000d3f0 <i2c_master_init+0x34>
1000d418:	40003000 	.word	0x40003000
1000d41c:	40003400 	.word	0x40003400
1000d420:	1000d831 	.word	0x1000d831
1000d424:	1000d071 	.word	0x1000d071

1000d428 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d428:	0003      	movs	r3, r0
1000d42a:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d42c:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d42e:	2b00      	cmp	r3, #0
1000d430:	d006      	beq.n	1000d440 <i2c_master_read_packet_wait+0x18>
1000d432:	2900      	cmp	r1, #0
1000d434:	d004      	beq.n	1000d440 <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d436:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000d438:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d43a:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000d43c:	4b01      	ldr	r3, [pc, #4]	; (1000d444 <i2c_master_read_packet_wait+0x1c>)
1000d43e:	4798      	blx	r3
}
1000d440:	bd10      	pop	{r4, pc}
1000d442:	46c0      	nop			; (mov r8, r8)
1000d444:	1000d2cd 	.word	0x1000d2cd

1000d448 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d448:	b570      	push	{r4, r5, r6, lr}
1000d44a:	0004      	movs	r4, r0
1000d44c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d44e:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d450:	2c00      	cmp	r4, #0
1000d452:	d00a      	beq.n	1000d46a <i2c_master_write_packet_wait+0x22>
1000d454:	2900      	cmp	r1, #0
1000d456:	d008      	beq.n	1000d46a <i2c_master_write_packet_wait+0x22>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d458:	2300      	movs	r3, #0

    printf("!!");
1000d45a:	4804      	ldr	r0, [pc, #16]	; (1000d46c <i2c_master_write_packet_wait+0x24>)
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d45c:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000d45e:	4b04      	ldr	r3, [pc, #16]	; (1000d470 <i2c_master_write_packet_wait+0x28>)
1000d460:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000d462:	0029      	movs	r1, r5
1000d464:	0020      	movs	r0, r4
1000d466:	4b03      	ldr	r3, [pc, #12]	; (1000d474 <i2c_master_write_packet_wait+0x2c>)
1000d468:	4798      	blx	r3
}
1000d46a:	bd70      	pop	{r4, r5, r6, pc}
1000d46c:	1001ab3c 	.word	0x1001ab3c
1000d470:	10018255 	.word	0x10018255
1000d474:	1000d349 	.word	0x1000d349

1000d478 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d478:	0003      	movs	r3, r0
1000d47a:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d47c:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d47e:	2b00      	cmp	r3, #0
1000d480:	d006      	beq.n	1000d490 <i2c_master_write_packet_wait_no_stop+0x18>
1000d482:	2900      	cmp	r1, #0
1000d484:	d004      	beq.n	1000d490 <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d486:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000d488:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d48a:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000d48c:	4b01      	ldr	r3, [pc, #4]	; (1000d494 <i2c_master_write_packet_wait_no_stop+0x1c>)
1000d48e:	4798      	blx	r3
}
1000d490:	bd10      	pop	{r4, pc}
1000d492:	46c0      	nop			; (mov r8, r8)
1000d494:	1000d349 	.word	0x1000d349

1000d498 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000d498:	2801      	cmp	r0, #1
1000d49a:	d021      	beq.n	1000d4e0 <system_clock_config+0x48>
1000d49c:	2800      	cmp	r0, #0
1000d49e:	d016      	beq.n	1000d4ce <system_clock_config+0x36>
1000d4a0:	2802      	cmp	r0, #2
1000d4a2:	d112      	bne.n	1000d4ca <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4a4:	200c      	movs	r0, #12
1000d4a6:	4a18      	ldr	r2, [pc, #96]	; (1000d508 <system_clock_config+0x70>)
1000d4a8:	6993      	ldr	r3, [r2, #24]
1000d4aa:	4383      	bics	r3, r0
1000d4ac:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d4ae:	4a17      	ldr	r2, [pc, #92]	; (1000d50c <system_clock_config+0x74>)
1000d4b0:	4b17      	ldr	r3, [pc, #92]	; (1000d510 <system_clock_config+0x78>)
1000d4b2:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4b4:	2003      	movs	r0, #3
1000d4b6:	4b14      	ldr	r3, [pc, #80]	; (1000d508 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4b8:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4ba:	699a      	ldr	r2, [r3, #24]
1000d4bc:	4382      	bics	r2, r0
1000d4be:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4c0:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d4c2:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4c4:	4311      	orrs	r1, r2
1000d4c6:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d4c8:	e000      	b.n	1000d4cc <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000d4ca:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000d4cc:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4ce:	230c      	movs	r3, #12
1000d4d0:	4a0d      	ldr	r2, [pc, #52]	; (1000d508 <system_clock_config+0x70>)
1000d4d2:	6990      	ldr	r0, [r2, #24]
1000d4d4:	4303      	orrs	r3, r0
1000d4d6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000d4d8:	4a0c      	ldr	r2, [pc, #48]	; (1000d50c <system_clock_config+0x74>)
1000d4da:	4b0d      	ldr	r3, [pc, #52]	; (1000d510 <system_clock_config+0x78>)
1000d4dc:	601a      	str	r2, [r3, #0]
			break;
1000d4de:	e7e9      	b.n	1000d4b4 <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4e0:	2208      	movs	r2, #8
1000d4e2:	4b09      	ldr	r3, [pc, #36]	; (1000d508 <system_clock_config+0x70>)
1000d4e4:	6998      	ldr	r0, [r3, #24]
1000d4e6:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4e8:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d4ea:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4ec:	699a      	ldr	r2, [r3, #24]
1000d4ee:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d4f0:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d4f2:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d4f4:	4a07      	ldr	r2, [pc, #28]	; (1000d514 <system_clock_config+0x7c>)
1000d4f6:	0300      	lsls	r0, r0, #12
1000d4f8:	6853      	ldr	r3, [r2, #4]
1000d4fa:	4303      	orrs	r3, r0
1000d4fc:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000d4fe:	4a06      	ldr	r2, [pc, #24]	; (1000d518 <system_clock_config+0x80>)
1000d500:	4b03      	ldr	r3, [pc, #12]	; (1000d510 <system_clock_config+0x78>)
1000d502:	601a      	str	r2, [r3, #0]
			break;
1000d504:	e7d6      	b.n	1000d4b4 <system_clock_config+0x1c>
1000d506:	46c0      	nop			; (mov r8, r8)
1000d508:	4000b000 	.word	0x4000b000
1000d50c:	018cba80 	.word	0x018cba80
1000d510:	1001df60 	.word	0x1001df60
1000d514:	4000f000 	.word	0x4000f000
1000d518:	001e8480 	.word	0x001e8480

1000d51c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000d51c:	4b01      	ldr	r3, [pc, #4]	; (1000d524 <system_clock_get_value+0x8>)
1000d51e:	6818      	ldr	r0, [r3, #0]
}
1000d520:	4770      	bx	lr
1000d522:	46c0      	nop			; (mov r8, r8)
1000d524:	1001df60 	.word	0x1001df60

1000d528 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000d528:	b500      	push	{lr}
	switch (peripheral) {
1000d52a:	2835      	cmp	r0, #53	; 0x35
1000d52c:	d900      	bls.n	1000d530 <system_clock_peripheral_enable+0x8>
1000d52e:	e16d      	b.n	1000d80c <system_clock_peripheral_enable+0x2e4>
1000d530:	4bb7      	ldr	r3, [pc, #732]	; (1000d810 <system_clock_peripheral_enable+0x2e8>)
1000d532:	0080      	lsls	r0, r0, #2
1000d534:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d536:	4ab7      	ldr	r2, [pc, #732]	; (1000d814 <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000d538:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d53a:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d53c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d53e:	7d11      	ldrb	r1, [r2, #20]
1000d540:	430b      	orrs	r3, r1
1000d542:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d544:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d546:	2301      	movs	r3, #1
1000d548:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d54a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d54c:	430b      	orrs	r3, r1
1000d54e:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000d550:	e7f8      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d552:	2180      	movs	r1, #128	; 0x80
1000d554:	6913      	ldr	r3, [r2, #16]
1000d556:	0409      	lsls	r1, r1, #16
1000d558:	430b      	orrs	r3, r1
1000d55a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d55c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000d55e:	e7f1      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d560:	2180      	movs	r1, #128	; 0x80
1000d562:	6913      	ldr	r3, [r2, #16]
1000d564:	03c9      	lsls	r1, r1, #15
1000d566:	430b      	orrs	r3, r1
1000d568:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d56a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000d56c:	e7ea      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d56e:	2180      	movs	r1, #128	; 0x80
1000d570:	6913      	ldr	r3, [r2, #16]
1000d572:	0389      	lsls	r1, r1, #14
1000d574:	430b      	orrs	r3, r1
1000d576:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d578:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000d57a:	e7e3      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d57c:	2180      	movs	r1, #128	; 0x80
1000d57e:	6913      	ldr	r3, [r2, #16]
1000d580:	0349      	lsls	r1, r1, #13
1000d582:	430b      	orrs	r3, r1
1000d584:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d586:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000d588:	e7dc      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d58a:	2180      	movs	r1, #128	; 0x80
1000d58c:	6913      	ldr	r3, [r2, #16]
1000d58e:	0309      	lsls	r1, r1, #12
1000d590:	430b      	orrs	r3, r1
1000d592:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d594:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000d596:	e7d5      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d598:	2180      	movs	r1, #128	; 0x80
1000d59a:	6913      	ldr	r3, [r2, #16]
1000d59c:	02c9      	lsls	r1, r1, #11
1000d59e:	430b      	orrs	r3, r1
1000d5a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000d5a4:	e7ce      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5a6:	2180      	movs	r1, #128	; 0x80
1000d5a8:	6913      	ldr	r3, [r2, #16]
1000d5aa:	0289      	lsls	r1, r1, #10
1000d5ac:	430b      	orrs	r3, r1
1000d5ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000d5b2:	e7c7      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5b4:	2180      	movs	r1, #128	; 0x80
1000d5b6:	6913      	ldr	r3, [r2, #16]
1000d5b8:	0249      	lsls	r1, r1, #9
1000d5ba:	430b      	orrs	r3, r1
1000d5bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000d5c0:	e7c0      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5c2:	2180      	movs	r1, #128	; 0x80
1000d5c4:	6913      	ldr	r3, [r2, #16]
1000d5c6:	0209      	lsls	r1, r1, #8
1000d5c8:	430b      	orrs	r3, r1
1000d5ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000d5ce:	e7b9      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5d0:	2180      	movs	r1, #128	; 0x80
1000d5d2:	6913      	ldr	r3, [r2, #16]
1000d5d4:	01c9      	lsls	r1, r1, #7
1000d5d6:	430b      	orrs	r3, r1
1000d5d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000d5dc:	e7b2      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5de:	2180      	movs	r1, #128	; 0x80
1000d5e0:	6913      	ldr	r3, [r2, #16]
1000d5e2:	0189      	lsls	r1, r1, #6
1000d5e4:	430b      	orrs	r3, r1
1000d5e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000d5ea:	e7ab      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5ec:	2180      	movs	r1, #128	; 0x80
1000d5ee:	6913      	ldr	r3, [r2, #16]
1000d5f0:	0149      	lsls	r1, r1, #5
1000d5f2:	430b      	orrs	r3, r1
1000d5f4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000d5f8:	e7a4      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d5fa:	2180      	movs	r1, #128	; 0x80
1000d5fc:	6913      	ldr	r3, [r2, #16]
1000d5fe:	0109      	lsls	r1, r1, #4
1000d600:	430b      	orrs	r3, r1
1000d602:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000d606:	e79d      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d608:	2180      	movs	r1, #128	; 0x80
1000d60a:	6913      	ldr	r3, [r2, #16]
1000d60c:	00c9      	lsls	r1, r1, #3
1000d60e:	430b      	orrs	r3, r1
1000d610:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d612:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000d614:	e796      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d616:	2180      	movs	r1, #128	; 0x80
1000d618:	6913      	ldr	r3, [r2, #16]
1000d61a:	0089      	lsls	r1, r1, #2
1000d61c:	430b      	orrs	r3, r1
1000d61e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d620:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000d622:	e78f      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d624:	2180      	movs	r1, #128	; 0x80
1000d626:	6913      	ldr	r3, [r2, #16]
1000d628:	0049      	lsls	r1, r1, #1
1000d62a:	430b      	orrs	r3, r1
1000d62c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d62e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000d630:	e788      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d632:	2380      	movs	r3, #128	; 0x80
1000d634:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d636:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d638:	430b      	orrs	r3, r1
1000d63a:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000d63c:	e782      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d63e:	2340      	movs	r3, #64	; 0x40
1000d640:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d642:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d644:	430b      	orrs	r3, r1
1000d646:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000d648:	e77c      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d64a:	2320      	movs	r3, #32
1000d64c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d64e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d650:	430b      	orrs	r3, r1
1000d652:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000d654:	e776      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d656:	2310      	movs	r3, #16
1000d658:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d65a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d65c:	430b      	orrs	r3, r1
1000d65e:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000d660:	e770      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d662:	2308      	movs	r3, #8
1000d664:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d666:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d668:	430b      	orrs	r3, r1
1000d66a:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000d66c:	e76a      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d66e:	2304      	movs	r3, #4
1000d670:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d672:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d674:	430b      	orrs	r3, r1
1000d676:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000d678:	e764      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d67a:	2302      	movs	r3, #2
1000d67c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d67e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d680:	430b      	orrs	r3, r1
1000d682:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000d684:	e75e      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d686:	2301      	movs	r3, #1
1000d688:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d68a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d68c:	430b      	orrs	r3, r1
1000d68e:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000d690:	e758      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d692:	2180      	movs	r1, #128	; 0x80
1000d694:	68d3      	ldr	r3, [r2, #12]
1000d696:	05c9      	lsls	r1, r1, #23
1000d698:	430b      	orrs	r3, r1
1000d69a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d69c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000d69e:	e751      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6a0:	2180      	movs	r1, #128	; 0x80
1000d6a2:	68d3      	ldr	r3, [r2, #12]
1000d6a4:	0589      	lsls	r1, r1, #22
1000d6a6:	430b      	orrs	r3, r1
1000d6a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000d6ac:	e74a      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6ae:	2180      	movs	r1, #128	; 0x80
1000d6b0:	68d3      	ldr	r3, [r2, #12]
1000d6b2:	0549      	lsls	r1, r1, #21
1000d6b4:	430b      	orrs	r3, r1
1000d6b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000d6ba:	e743      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6bc:	2180      	movs	r1, #128	; 0x80
1000d6be:	68d3      	ldr	r3, [r2, #12]
1000d6c0:	0509      	lsls	r1, r1, #20
1000d6c2:	430b      	orrs	r3, r1
1000d6c4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000d6c8:	e73c      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6ca:	2180      	movs	r1, #128	; 0x80
1000d6cc:	68d3      	ldr	r3, [r2, #12]
1000d6ce:	04c9      	lsls	r1, r1, #19
1000d6d0:	430b      	orrs	r3, r1
1000d6d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000d6d6:	e735      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6d8:	2180      	movs	r1, #128	; 0x80
1000d6da:	68d3      	ldr	r3, [r2, #12]
1000d6dc:	0489      	lsls	r1, r1, #18
1000d6de:	430b      	orrs	r3, r1
1000d6e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000d6e4:	e72e      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6e6:	2180      	movs	r1, #128	; 0x80
1000d6e8:	68d3      	ldr	r3, [r2, #12]
1000d6ea:	0449      	lsls	r1, r1, #17
1000d6ec:	430b      	orrs	r3, r1
1000d6ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000d6f2:	e727      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d6f4:	2180      	movs	r1, #128	; 0x80
1000d6f6:	68d3      	ldr	r3, [r2, #12]
1000d6f8:	0409      	lsls	r1, r1, #16
1000d6fa:	430b      	orrs	r3, r1
1000d6fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000d700:	e720      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d702:	2180      	movs	r1, #128	; 0x80
1000d704:	68d3      	ldr	r3, [r2, #12]
1000d706:	03c9      	lsls	r1, r1, #15
1000d708:	430b      	orrs	r3, r1
1000d70a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d70c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000d70e:	e719      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d710:	2180      	movs	r1, #128	; 0x80
1000d712:	68d3      	ldr	r3, [r2, #12]
1000d714:	0389      	lsls	r1, r1, #14
1000d716:	430b      	orrs	r3, r1
1000d718:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d71a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000d71c:	e712      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d71e:	2180      	movs	r1, #128	; 0x80
1000d720:	68d3      	ldr	r3, [r2, #12]
1000d722:	0349      	lsls	r1, r1, #13
1000d724:	430b      	orrs	r3, r1
1000d726:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000d72a:	e70b      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d72c:	2180      	movs	r1, #128	; 0x80
1000d72e:	68d3      	ldr	r3, [r2, #12]
1000d730:	0309      	lsls	r1, r1, #12
1000d732:	430b      	orrs	r3, r1
1000d734:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d736:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000d738:	e704      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d73a:	2180      	movs	r1, #128	; 0x80
1000d73c:	68d3      	ldr	r3, [r2, #12]
1000d73e:	02c9      	lsls	r1, r1, #11
1000d740:	430b      	orrs	r3, r1
1000d742:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000d746:	e6fd      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d748:	2180      	movs	r1, #128	; 0x80
1000d74a:	68d3      	ldr	r3, [r2, #12]
1000d74c:	0289      	lsls	r1, r1, #10
1000d74e:	430b      	orrs	r3, r1
1000d750:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d752:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000d754:	e6f6      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d756:	2180      	movs	r1, #128	; 0x80
1000d758:	68d3      	ldr	r3, [r2, #12]
1000d75a:	0249      	lsls	r1, r1, #9
1000d75c:	430b      	orrs	r3, r1
1000d75e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d760:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000d762:	e6ef      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d764:	2180      	movs	r1, #128	; 0x80
1000d766:	68d3      	ldr	r3, [r2, #12]
1000d768:	0209      	lsls	r1, r1, #8
1000d76a:	430b      	orrs	r3, r1
1000d76c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d76e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000d770:	e6e8      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d772:	2180      	movs	r1, #128	; 0x80
1000d774:	68d3      	ldr	r3, [r2, #12]
1000d776:	01c9      	lsls	r1, r1, #7
1000d778:	430b      	orrs	r3, r1
1000d77a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d77c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000d77e:	e6e1      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d780:	2180      	movs	r1, #128	; 0x80
1000d782:	68d3      	ldr	r3, [r2, #12]
1000d784:	0189      	lsls	r1, r1, #6
1000d786:	430b      	orrs	r3, r1
1000d788:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d78a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000d78c:	e6da      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d78e:	2180      	movs	r1, #128	; 0x80
1000d790:	68d3      	ldr	r3, [r2, #12]
1000d792:	0149      	lsls	r1, r1, #5
1000d794:	430b      	orrs	r3, r1
1000d796:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000d79a:	e6d3      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d79c:	2180      	movs	r1, #128	; 0x80
1000d79e:	68d3      	ldr	r3, [r2, #12]
1000d7a0:	0109      	lsls	r1, r1, #4
1000d7a2:	430b      	orrs	r3, r1
1000d7a4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000d7a8:	e6cc      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7aa:	2180      	movs	r1, #128	; 0x80
1000d7ac:	68d3      	ldr	r3, [r2, #12]
1000d7ae:	0049      	lsls	r1, r1, #1
1000d7b0:	430b      	orrs	r3, r1
1000d7b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000d7b6:	e6c5      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7b8:	2380      	movs	r3, #128	; 0x80
1000d7ba:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7bc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7be:	430b      	orrs	r3, r1
1000d7c0:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000d7c2:	e6bf      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7c4:	2320      	movs	r3, #32
1000d7c6:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7c8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7ca:	430b      	orrs	r3, r1
1000d7cc:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000d7ce:	e6b9      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7d0:	2310      	movs	r3, #16
1000d7d2:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7d4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7d6:	430b      	orrs	r3, r1
1000d7d8:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000d7da:	e6b3      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7dc:	2308      	movs	r3, #8
1000d7de:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7e0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7e2:	430b      	orrs	r3, r1
1000d7e4:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000d7e6:	e6ad      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7e8:	2304      	movs	r3, #4
1000d7ea:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7ec:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7ee:	430b      	orrs	r3, r1
1000d7f0:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000d7f2:	e6a7      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7f4:	2302      	movs	r3, #2
1000d7f6:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7f8:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7fa:	430b      	orrs	r3, r1
1000d7fc:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000d7fe:	e6a1      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d800:	2304      	movs	r3, #4
1000d802:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d804:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d806:	430b      	orrs	r3, r1
1000d808:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000d80a:	e69b      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d80c:	2017      	movs	r0, #23
1000d80e:	e699      	b.n	1000d544 <system_clock_peripheral_enable+0x1c>
1000d810:	1001ab40 	.word	0x1001ab40
1000d814:	4000b000 	.word	0x4000b000

1000d818 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d818:	2201      	movs	r2, #1
1000d81a:	4b04      	ldr	r3, [pc, #16]	; (1000d82c <system_global_reset+0x14>)
1000d81c:	6859      	ldr	r1, [r3, #4]
1000d81e:	4391      	bics	r1, r2
1000d820:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d822:	6859      	ldr	r1, [r3, #4]
1000d824:	430a      	orrs	r2, r1
1000d826:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000d828:	4770      	bx	lr
1000d82a:	46c0      	nop			; (mov r8, r8)
1000d82c:	4000b000 	.word	0x4000b000

1000d830 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000d830:	b500      	push	{lr}
	switch (peripheral) {
1000d832:	2843      	cmp	r0, #67	; 0x43
1000d834:	d900      	bls.n	1000d838 <system_peripheral_reset+0x8>
1000d836:	e200      	b.n	1000dc3a <system_peripheral_reset+0x40a>
1000d838:	4bd5      	ldr	r3, [pc, #852]	; (1000db90 <system_peripheral_reset+0x360>)
1000d83a:	0080      	lsls	r0, r0, #2
1000d83c:	581b      	ldr	r3, [r3, r0]
1000d83e:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d840:	4bd4      	ldr	r3, [pc, #848]	; (1000db94 <system_peripheral_reset+0x364>)
1000d842:	4ad5      	ldr	r2, [pc, #852]	; (1000db98 <system_peripheral_reset+0x368>)
1000d844:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d846:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d848:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d84a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d84c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d84e:	891a      	ldrh	r2, [r3, #8]
1000d850:	0109      	lsls	r1, r1, #4
1000d852:	430a      	orrs	r2, r1
1000d854:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d856:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d858:	4bce      	ldr	r3, [pc, #824]	; (1000db94 <system_peripheral_reset+0x364>)
1000d85a:	4ad0      	ldr	r2, [pc, #832]	; (1000db9c <system_peripheral_reset+0x36c>)
1000d85c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d85e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d860:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d862:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d864:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d866:	891a      	ldrh	r2, [r3, #8]
1000d868:	0049      	lsls	r1, r1, #1
1000d86a:	430a      	orrs	r2, r1
1000d86c:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d86e:	e7f2      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d870:	2180      	movs	r1, #128	; 0x80
1000d872:	4bc8      	ldr	r3, [pc, #800]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d874:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d876:	891a      	ldrh	r2, [r3, #8]
1000d878:	438a      	bics	r2, r1
1000d87a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d87c:	2280      	movs	r2, #128	; 0x80
1000d87e:	8919      	ldrh	r1, [r3, #8]
1000d880:	430a      	orrs	r2, r1
1000d882:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d884:	e7e7      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d886:	2104      	movs	r1, #4
1000d888:	4bc2      	ldr	r3, [pc, #776]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d88a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d88c:	891a      	ldrh	r2, [r3, #8]
1000d88e:	438a      	bics	r2, r1
1000d890:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d892:	2204      	movs	r2, #4
1000d894:	8919      	ldrh	r1, [r3, #8]
1000d896:	430a      	orrs	r2, r1
1000d898:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d89a:	e7dc      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d89c:	4bbd      	ldr	r3, [pc, #756]	; (1000db94 <system_peripheral_reset+0x364>)
1000d89e:	4ac0      	ldr	r2, [pc, #768]	; (1000dba0 <system_peripheral_reset+0x370>)
1000d8a0:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8a2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8a4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8a6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8aa:	685a      	ldr	r2, [r3, #4]
1000d8ac:	0449      	lsls	r1, r1, #17
1000d8ae:	430a      	orrs	r2, r1
1000d8b0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d8b2:	e7d0      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8b4:	4bb7      	ldr	r3, [pc, #732]	; (1000db94 <system_peripheral_reset+0x364>)
1000d8b6:	4abb      	ldr	r2, [pc, #748]	; (1000dba4 <system_peripheral_reset+0x374>)
1000d8b8:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8ba:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8bc:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8be:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8c2:	685a      	ldr	r2, [r3, #4]
1000d8c4:	0409      	lsls	r1, r1, #16
1000d8c6:	430a      	orrs	r2, r1
1000d8c8:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d8ca:	e7c4      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8cc:	4bb1      	ldr	r3, [pc, #708]	; (1000db94 <system_peripheral_reset+0x364>)
1000d8ce:	4ab6      	ldr	r2, [pc, #728]	; (1000dba8 <system_peripheral_reset+0x378>)
1000d8d0:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8d2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8d4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8d6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8da:	685a      	ldr	r2, [r3, #4]
1000d8dc:	03c9      	lsls	r1, r1, #15
1000d8de:	430a      	orrs	r2, r1
1000d8e0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000d8e2:	e7b8      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8e4:	4bab      	ldr	r3, [pc, #684]	; (1000db94 <system_peripheral_reset+0x364>)
1000d8e6:	4ab1      	ldr	r2, [pc, #708]	; (1000dbac <system_peripheral_reset+0x37c>)
1000d8e8:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8ea:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8ec:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8ee:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8f2:	685a      	ldr	r2, [r3, #4]
1000d8f4:	0389      	lsls	r1, r1, #14
1000d8f6:	430a      	orrs	r2, r1
1000d8f8:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000d8fa:	e7ac      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8fc:	4ba5      	ldr	r3, [pc, #660]	; (1000db94 <system_peripheral_reset+0x364>)
1000d8fe:	4aac      	ldr	r2, [pc, #688]	; (1000dbb0 <system_peripheral_reset+0x380>)
1000d900:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d902:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d904:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d906:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d908:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d90a:	685a      	ldr	r2, [r3, #4]
1000d90c:	0309      	lsls	r1, r1, #12
1000d90e:	430a      	orrs	r2, r1
1000d910:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000d912:	e7a0      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d914:	4b9f      	ldr	r3, [pc, #636]	; (1000db94 <system_peripheral_reset+0x364>)
1000d916:	4aa7      	ldr	r2, [pc, #668]	; (1000dbb4 <system_peripheral_reset+0x384>)
1000d918:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d91a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d91c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d91e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d920:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d922:	685a      	ldr	r2, [r3, #4]
1000d924:	0089      	lsls	r1, r1, #2
1000d926:	430a      	orrs	r2, r1
1000d928:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000d92a:	e794      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d92c:	2280      	movs	r2, #128	; 0x80
1000d92e:	4b99      	ldr	r3, [pc, #612]	; (1000db94 <system_peripheral_reset+0x364>)
1000d930:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d932:	4391      	bics	r1, r2
1000d934:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d936:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d93a:	430a      	orrs	r2, r1
1000d93c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000d93e:	e78a      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d940:	4b94      	ldr	r3, [pc, #592]	; (1000db94 <system_peripheral_reset+0x364>)
1000d942:	2220      	movs	r2, #32
1000d944:	6859      	ldr	r1, [r3, #4]
1000d946:	e7f4      	b.n	1000d932 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d948:	4b92      	ldr	r3, [pc, #584]	; (1000db94 <system_peripheral_reset+0x364>)
1000d94a:	2208      	movs	r2, #8
1000d94c:	6859      	ldr	r1, [r3, #4]
1000d94e:	e7f0      	b.n	1000d932 <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d950:	4b90      	ldr	r3, [pc, #576]	; (1000db94 <system_peripheral_reset+0x364>)
1000d952:	2202      	movs	r2, #2
1000d954:	6859      	ldr	r1, [r3, #4]
1000d956:	e7ec      	b.n	1000d932 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d958:	2140      	movs	r1, #64	; 0x40
1000d95a:	4b8e      	ldr	r3, [pc, #568]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d95c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d95e:	891a      	ldrh	r2, [r3, #8]
1000d960:	438a      	bics	r2, r1
1000d962:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d964:	2240      	movs	r2, #64	; 0x40
1000d966:	8919      	ldrh	r1, [r3, #8]
1000d968:	430a      	orrs	r2, r1
1000d96a:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d96c:	e773      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d96e:	2120      	movs	r1, #32
1000d970:	4b88      	ldr	r3, [pc, #544]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d972:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d974:	891a      	ldrh	r2, [r3, #8]
1000d976:	438a      	bics	r2, r1
1000d978:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d97a:	2220      	movs	r2, #32
1000d97c:	8919      	ldrh	r1, [r3, #8]
1000d97e:	430a      	orrs	r2, r1
1000d980:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d982:	e768      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d984:	2110      	movs	r1, #16
1000d986:	4b83      	ldr	r3, [pc, #524]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d988:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d98a:	891a      	ldrh	r2, [r3, #8]
1000d98c:	438a      	bics	r2, r1
1000d98e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d990:	2210      	movs	r2, #16
1000d992:	8919      	ldrh	r1, [r3, #8]
1000d994:	430a      	orrs	r2, r1
1000d996:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d998:	e75d      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d99a:	2108      	movs	r1, #8
1000d99c:	4b7d      	ldr	r3, [pc, #500]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d99e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9a0:	891a      	ldrh	r2, [r3, #8]
1000d9a2:	438a      	bics	r2, r1
1000d9a4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9a6:	2208      	movs	r2, #8
1000d9a8:	8919      	ldrh	r1, [r3, #8]
1000d9aa:	430a      	orrs	r2, r1
1000d9ac:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d9ae:	e752      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9b0:	4b78      	ldr	r3, [pc, #480]	; (1000db94 <system_peripheral_reset+0x364>)
1000d9b2:	4a81      	ldr	r2, [pc, #516]	; (1000dbb8 <system_peripheral_reset+0x388>)
1000d9b4:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9b6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9b8:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9ba:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9bc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9be:	891a      	ldrh	r2, [r3, #8]
1000d9c0:	00c9      	lsls	r1, r1, #3
1000d9c2:	430a      	orrs	r2, r1
1000d9c4:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d9c6:	e746      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9c8:	4b72      	ldr	r3, [pc, #456]	; (1000db94 <system_peripheral_reset+0x364>)
1000d9ca:	4a7a      	ldr	r2, [pc, #488]	; (1000dbb4 <system_peripheral_reset+0x384>)
1000d9cc:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9ce:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9d0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9d2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9d6:	891a      	ldrh	r2, [r3, #8]
1000d9d8:	0089      	lsls	r1, r1, #2
1000d9da:	430a      	orrs	r2, r1
1000d9dc:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d9de:	e73a      	b.n	1000d856 <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d9e0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d9e2:	4a6c      	ldr	r2, [pc, #432]	; (1000db94 <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d9e4:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d9e6:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9e8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d9ea:	005b      	lsls	r3, r3, #1
1000d9ec:	085b      	lsrs	r3, r3, #1
1000d9ee:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d9f0:	6853      	ldr	r3, [r2, #4]
1000d9f2:	430b      	orrs	r3, r1
1000d9f4:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d9f6:	e72e      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d9f8:	4b66      	ldr	r3, [pc, #408]	; (1000db94 <system_peripheral_reset+0x364>)
1000d9fa:	4a70      	ldr	r2, [pc, #448]	; (1000dbbc <system_peripheral_reset+0x38c>)
1000d9fc:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9fe:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da00:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da02:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da06:	685a      	ldr	r2, [r3, #4]
1000da08:	05c9      	lsls	r1, r1, #23
1000da0a:	430a      	orrs	r2, r1
1000da0c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000da0e:	e722      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da10:	4b60      	ldr	r3, [pc, #384]	; (1000db94 <system_peripheral_reset+0x364>)
1000da12:	4a6b      	ldr	r2, [pc, #428]	; (1000dbc0 <system_peripheral_reset+0x390>)
1000da14:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da16:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da18:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da1a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da1e:	685a      	ldr	r2, [r3, #4]
1000da20:	0589      	lsls	r1, r1, #22
1000da22:	430a      	orrs	r2, r1
1000da24:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000da26:	e716      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da28:	4b5a      	ldr	r3, [pc, #360]	; (1000db94 <system_peripheral_reset+0x364>)
1000da2a:	4a66      	ldr	r2, [pc, #408]	; (1000dbc4 <system_peripheral_reset+0x394>)
1000da2c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da2e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da30:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da32:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da36:	685a      	ldr	r2, [r3, #4]
1000da38:	0549      	lsls	r1, r1, #21
1000da3a:	430a      	orrs	r2, r1
1000da3c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000da3e:	e70a      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da40:	4b54      	ldr	r3, [pc, #336]	; (1000db94 <system_peripheral_reset+0x364>)
1000da42:	4a61      	ldr	r2, [pc, #388]	; (1000dbc8 <system_peripheral_reset+0x398>)
1000da44:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da46:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da48:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da4a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da4e:	685a      	ldr	r2, [r3, #4]
1000da50:	0349      	lsls	r1, r1, #13
1000da52:	430a      	orrs	r2, r1
1000da54:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000da56:	e6fe      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000da58:	2102      	movs	r1, #2
1000da5a:	4b4e      	ldr	r3, [pc, #312]	; (1000db94 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da5c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000da5e:	891a      	ldrh	r2, [r3, #8]
1000da60:	438a      	bics	r2, r1
1000da62:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000da64:	2202      	movs	r2, #2
1000da66:	8919      	ldrh	r1, [r3, #8]
1000da68:	430a      	orrs	r2, r1
1000da6a:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000da6c:	e6f3      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da6e:	4b49      	ldr	r3, [pc, #292]	; (1000db94 <system_peripheral_reset+0x364>)
1000da70:	4a56      	ldr	r2, [pc, #344]	; (1000dbcc <system_peripheral_reset+0x39c>)
1000da72:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da74:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da76:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da78:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da7a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da7c:	685a      	ldr	r2, [r3, #4]
1000da7e:	0509      	lsls	r1, r1, #20
1000da80:	430a      	orrs	r2, r1
1000da82:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000da84:	e6e7      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da86:	4b43      	ldr	r3, [pc, #268]	; (1000db94 <system_peripheral_reset+0x364>)
1000da88:	4a51      	ldr	r2, [pc, #324]	; (1000dbd0 <system_peripheral_reset+0x3a0>)
1000da8a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da8c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da8e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da90:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da92:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da94:	685a      	ldr	r2, [r3, #4]
1000da96:	04c9      	lsls	r1, r1, #19
1000da98:	430a      	orrs	r2, r1
1000da9a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000da9c:	e6db      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da9e:	4b3d      	ldr	r3, [pc, #244]	; (1000db94 <system_peripheral_reset+0x364>)
1000daa0:	4a4c      	ldr	r2, [pc, #304]	; (1000dbd4 <system_peripheral_reset+0x3a4>)
1000daa2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daa4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daa6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000daa8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daaa:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000daac:	685a      	ldr	r2, [r3, #4]
1000daae:	0489      	lsls	r1, r1, #18
1000dab0:	430a      	orrs	r2, r1
1000dab2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000dab4:	e6cf      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dab6:	4b37      	ldr	r3, [pc, #220]	; (1000db94 <system_peripheral_reset+0x364>)
1000dab8:	4a47      	ldr	r2, [pc, #284]	; (1000dbd8 <system_peripheral_reset+0x3a8>)
1000daba:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dabc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dabe:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dac0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dac2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dac4:	685a      	ldr	r2, [r3, #4]
1000dac6:	02c9      	lsls	r1, r1, #11
1000dac8:	430a      	orrs	r2, r1
1000daca:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000dacc:	e6c3      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dace:	4b31      	ldr	r3, [pc, #196]	; (1000db94 <system_peripheral_reset+0x364>)
1000dad0:	4a42      	ldr	r2, [pc, #264]	; (1000dbdc <system_peripheral_reset+0x3ac>)
1000dad2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dad4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dad6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dad8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dada:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dadc:	685a      	ldr	r2, [r3, #4]
1000dade:	0209      	lsls	r1, r1, #8
1000dae0:	430a      	orrs	r2, r1
1000dae2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000dae4:	e6b7      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dae6:	4b2b      	ldr	r3, [pc, #172]	; (1000db94 <system_peripheral_reset+0x364>)
1000dae8:	4a3d      	ldr	r2, [pc, #244]	; (1000dbe0 <system_peripheral_reset+0x3b0>)
1000daea:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000daec:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daee:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000daf0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daf2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000daf4:	685a      	ldr	r2, [r3, #4]
1000daf6:	01c9      	lsls	r1, r1, #7
1000daf8:	430a      	orrs	r2, r1
1000dafa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000dafc:	e6ab      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dafe:	4b25      	ldr	r3, [pc, #148]	; (1000db94 <system_peripheral_reset+0x364>)
1000db00:	4a38      	ldr	r2, [pc, #224]	; (1000dbe4 <system_peripheral_reset+0x3b4>)
1000db02:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db04:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db06:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db08:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db0a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db0c:	685a      	ldr	r2, [r3, #4]
1000db0e:	0189      	lsls	r1, r1, #6
1000db10:	430a      	orrs	r2, r1
1000db12:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000db14:	e69f      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db16:	4b1f      	ldr	r3, [pc, #124]	; (1000db94 <system_peripheral_reset+0x364>)
1000db18:	4a33      	ldr	r2, [pc, #204]	; (1000dbe8 <system_peripheral_reset+0x3b8>)
1000db1a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db1c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db1e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db20:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db22:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db24:	685a      	ldr	r2, [r3, #4]
1000db26:	0149      	lsls	r1, r1, #5
1000db28:	430a      	orrs	r2, r1
1000db2a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000db2c:	e693      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db2e:	4b19      	ldr	r3, [pc, #100]	; (1000db94 <system_peripheral_reset+0x364>)
1000db30:	4a2e      	ldr	r2, [pc, #184]	; (1000dbec <system_peripheral_reset+0x3bc>)
1000db32:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db34:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db36:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db38:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db3a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db3c:	685a      	ldr	r2, [r3, #4]
1000db3e:	0289      	lsls	r1, r1, #10
1000db40:	430a      	orrs	r2, r1
1000db42:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000db44:	e687      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db46:	4b13      	ldr	r3, [pc, #76]	; (1000db94 <system_peripheral_reset+0x364>)
1000db48:	4a29      	ldr	r2, [pc, #164]	; (1000dbf0 <system_peripheral_reset+0x3c0>)
1000db4a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db4c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db4e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db50:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db52:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db54:	685a      	ldr	r2, [r3, #4]
1000db56:	0249      	lsls	r1, r1, #9
1000db58:	430a      	orrs	r2, r1
1000db5a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000db5c:	e67b      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db5e:	4b0d      	ldr	r3, [pc, #52]	; (1000db94 <system_peripheral_reset+0x364>)
1000db60:	4a0d      	ldr	r2, [pc, #52]	; (1000db98 <system_peripheral_reset+0x368>)
1000db62:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db64:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db66:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db68:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db6a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db6c:	685a      	ldr	r2, [r3, #4]
1000db6e:	0109      	lsls	r1, r1, #4
1000db70:	430a      	orrs	r2, r1
1000db72:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000db74:	e66f      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db76:	4b07      	ldr	r3, [pc, #28]	; (1000db94 <system_peripheral_reset+0x364>)
1000db78:	4a0f      	ldr	r2, [pc, #60]	; (1000dbb8 <system_peripheral_reset+0x388>)
1000db7a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db7c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db7e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db80:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db82:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db84:	685a      	ldr	r2, [r3, #4]
1000db86:	00c9      	lsls	r1, r1, #3
1000db88:	430a      	orrs	r2, r1
1000db8a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000db8c:	e663      	b.n	1000d856 <system_peripheral_reset+0x26>
1000db8e:	46c0      	nop			; (mov r8, r8)
1000db90:	1001ac18 	.word	0x1001ac18
1000db94:	4000b000 	.word	0x4000b000
1000db98:	fffff7ff 	.word	0xfffff7ff
1000db9c:	fffffeff 	.word	0xfffffeff
1000dba0:	feffffff 	.word	0xfeffffff
1000dba4:	ff7fffff 	.word	0xff7fffff
1000dba8:	ffbfffff 	.word	0xffbfffff
1000dbac:	ffdfffff 	.word	0xffdfffff
1000dbb0:	fff7ffff 	.word	0xfff7ffff
1000dbb4:	fffffdff 	.word	0xfffffdff
1000dbb8:	fffffbff 	.word	0xfffffbff
1000dbbc:	bfffffff 	.word	0xbfffffff
1000dbc0:	dfffffff 	.word	0xdfffffff
1000dbc4:	efffffff 	.word	0xefffffff
1000dbc8:	ffefffff 	.word	0xffefffff
1000dbcc:	f7ffffff 	.word	0xf7ffffff
1000dbd0:	fbffffff 	.word	0xfbffffff
1000dbd4:	fdffffff 	.word	0xfdffffff
1000dbd8:	fffbffff 	.word	0xfffbffff
1000dbdc:	ffff7fff 	.word	0xffff7fff
1000dbe0:	ffffbfff 	.word	0xffffbfff
1000dbe4:	ffffdfff 	.word	0xffffdfff
1000dbe8:	ffffefff 	.word	0xffffefff
1000dbec:	fffdffff 	.word	0xfffdffff
1000dbf0:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dbf4:	2101      	movs	r1, #1
1000dbf6:	4b12      	ldr	r3, [pc, #72]	; (1000dc40 <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbf8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dbfa:	891a      	ldrh	r2, [r3, #8]
1000dbfc:	438a      	bics	r2, r1
1000dbfe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dc00:	2201      	movs	r2, #1
1000dc02:	8919      	ldrh	r1, [r3, #8]
1000dc04:	430a      	orrs	r2, r1
1000dc06:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000dc08:	e625      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc0a:	4b0d      	ldr	r3, [pc, #52]	; (1000dc40 <system_peripheral_reset+0x410>)
1000dc0c:	4a0d      	ldr	r2, [pc, #52]	; (1000dc44 <system_peripheral_reset+0x414>)
1000dc0e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc10:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc12:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc14:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc16:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc18:	685a      	ldr	r2, [r3, #4]
1000dc1a:	0049      	lsls	r1, r1, #1
1000dc1c:	430a      	orrs	r2, r1
1000dc1e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000dc20:	e619      	b.n	1000d856 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc22:	4b07      	ldr	r3, [pc, #28]	; (1000dc40 <system_peripheral_reset+0x410>)
1000dc24:	2240      	movs	r2, #64	; 0x40
1000dc26:	6859      	ldr	r1, [r3, #4]
1000dc28:	e683      	b.n	1000d932 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc2a:	4b05      	ldr	r3, [pc, #20]	; (1000dc40 <system_peripheral_reset+0x410>)
1000dc2c:	2210      	movs	r2, #16
1000dc2e:	6859      	ldr	r1, [r3, #4]
1000dc30:	e67f      	b.n	1000d932 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc32:	4b03      	ldr	r3, [pc, #12]	; (1000dc40 <system_peripheral_reset+0x410>)
1000dc34:	2204      	movs	r2, #4
1000dc36:	6859      	ldr	r1, [r3, #4]
1000dc38:	e67b      	b.n	1000d932 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000dc3a:	2017      	movs	r0, #23
1000dc3c:	e60b      	b.n	1000d856 <system_peripheral_reset+0x26>
1000dc3e:	46c0      	nop			; (mov r8, r8)
1000dc40:	4000b000 	.word	0x4000b000
1000dc44:	fffffeff 	.word	0xfffffeff

1000dc48 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000dc48:	2380      	movs	r3, #128	; 0x80
1000dc4a:	04db      	lsls	r3, r3, #19
1000dc4c:	469c      	mov	ip, r3
1000dc4e:	4460      	add	r0, ip
1000dc50:	0080      	lsls	r0, r0, #2
1000dc52:	6001      	str	r1, [r0, #0]
}
1000dc54:	4770      	bx	lr
1000dc56:	46c0      	nop			; (mov r8, r8)

1000dc58 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000dc58:	4a04      	ldr	r2, [pc, #16]	; (1000dc6c <_sbrk+0x14>)
1000dc5a:	6813      	ldr	r3, [r2, #0]
1000dc5c:	2b00      	cmp	r3, #0
1000dc5e:	d003      	beq.n	1000dc68 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000dc60:	1818      	adds	r0, r3, r0
1000dc62:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000dc64:	0018      	movs	r0, r3
1000dc66:	4770      	bx	lr
1000dc68:	4b01      	ldr	r3, [pc, #4]	; (1000dc70 <_sbrk+0x18>)
1000dc6a:	e7f9      	b.n	1000dc60 <_sbrk+0x8>
1000dc6c:	1001ced4 	.word	0x1001ced4
1000dc70:	1001f088 	.word	0x1001f088

1000dc74 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000dc74:	2001      	movs	r0, #1
1000dc76:	4240      	negs	r0, r0
1000dc78:	4770      	bx	lr
1000dc7a:	46c0      	nop			; (mov r8, r8)

1000dc7c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000dc7c:	2380      	movs	r3, #128	; 0x80
1000dc7e:	019b      	lsls	r3, r3, #6

	return 0;
}
1000dc80:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000dc82:	604b      	str	r3, [r1, #4]

	return 0;
}
1000dc84:	4770      	bx	lr
1000dc86:	46c0      	nop			; (mov r8, r8)

1000dc88 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000dc88:	2001      	movs	r0, #1
1000dc8a:	4770      	bx	lr

1000dc8c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000dc8c:	2000      	movs	r0, #0
1000dc8e:	4770      	bx	lr

1000dc90 <interrupt_cb>:
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000dc90:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000dc92:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000dc94:	4b04      	ldr	r3, [pc, #16]	; (1000dca8 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000dc96:	2102      	movs	r1, #2
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000dc98:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000dc9a:	201d      	movs	r0, #29
1000dc9c:	2300      	movs	r3, #0
1000dc9e:	2200      	movs	r2, #0
1000dca0:	4c02      	ldr	r4, [pc, #8]	; (1000dcac <interrupt_cb+0x1c>)
1000dca2:	47a0      	blx	r4
}
1000dca4:	bd10      	pop	{r4, pc}
1000dca6:	46c0      	nop			; (mov r8, r8)
1000dca8:	1001cedc 	.word	0x1001cedc
1000dcac:	1000c3ad 	.word	0x1000c3ad

1000dcb0 <configure_i2c_master>:
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000dcb0:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000dcb2:	2010      	movs	r0, #16
//};

//! [dev_inst]

void configure_i2c_master(void)
{
1000dcb4:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000dcb6:	4c14      	ldr	r4, [pc, #80]	; (1000dd08 <configure_i2c_master+0x58>)
1000dcb8:	47a0      	blx	r4
1000dcba:	4b14      	ldr	r3, [pc, #80]	; (1000dd0c <configure_i2c_master+0x5c>)
1000dcbc:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000dcbe:	2010      	movs	r0, #16
1000dcc0:	47a0      	blx	r4
1000dcc2:	4b13      	ldr	r3, [pc, #76]	; (1000dd10 <configure_i2c_master+0x60>)
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000dcc4:	ac01      	add	r4, sp, #4
//! [dev_inst]

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000dcc6:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000dcc8:	4b12      	ldr	r3, [pc, #72]	; (1000dd14 <configure_i2c_master+0x64>)
1000dcca:	0020      	movs	r0, r4
1000dccc:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000dcce:	2300      	movs	r3, #0
1000dcd0:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000dcd2:	3341      	adds	r3, #65	; 0x41
1000dcd4:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000dcd6:	3b39      	subs	r3, #57	; 0x39
1000dcd8:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000dcda:	3301      	adds	r3, #1
1000dcdc:	60e3      	str	r3, [r4, #12]
1000dcde:	4d0e      	ldr	r5, [pc, #56]	; (1000dd18 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000dce0:	3b07      	subs	r3, #7
1000dce2:	4e0e      	ldr	r6, [pc, #56]	; (1000dd1c <configure_i2c_master+0x6c>)
1000dce4:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000dce6:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000dce8:	0022      	movs	r2, r4
1000dcea:	490d      	ldr	r1, [pc, #52]	; (1000dd20 <configure_i2c_master+0x70>)
1000dcec:	0028      	movs	r0, r5
1000dcee:	47b0      	blx	r6
1000dcf0:	2800      	cmp	r0, #0
1000dcf2:	d1f9      	bne.n	1000dce8 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000dcf4:	2128      	movs	r1, #40	; 0x28
	
	i2c_enable(i2c_master_instance.hw);
1000dcf6:	682a      	ldr	r2, [r5, #0]
1000dcf8:	5c53      	ldrb	r3, [r2, r1]
1000dcfa:	07db      	lsls	r3, r3, #31
1000dcfc:	d4fc      	bmi.n	1000dcf8 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000dcfe:	2301      	movs	r3, #1
1000dd00:	7513      	strb	r3, [r2, #20]
}
1000dd02:	b006      	add	sp, #24
1000dd04:	bd70      	pop	{r4, r5, r6, pc}
1000dd06:	46c0      	nop			; (mov r8, r8)
1000dd08:	1001809d 	.word	0x1001809d
1000dd0c:	1001d2e8 	.word	0x1001d2e8
1000dd10:	1001d2d8 	.word	0x1001d2d8
1000dd14:	1000d3a5 	.word	0x1000d3a5
1000dd18:	1001d2e0 	.word	0x1001d2e0
1000dd1c:	1000d3bd 	.word	0x1000d3bd
1000dd20:	40003000 	.word	0x40003000

1000dd24 <init_dualtimer>:

void init_dualtimer(void)
{
1000dd24:	b510      	push	{r4, lr}
1000dd26:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000dd28:	ac01      	add	r4, sp, #4
1000dd2a:	0020      	movs	r0, r4
1000dd2c:	4b06      	ldr	r3, [pc, #24]	; (1000dd48 <init_dualtimer+0x24>)
1000dd2e:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000dd30:	4b06      	ldr	r3, [pc, #24]	; (1000dd4c <init_dualtimer+0x28>)
    config_dualtimer.timer2.load_value = 26000;
    config_dualtimer.timer1.timer_enable = false;
    config_dualtimer.timer2.timer_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000dd32:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000dd34:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000dd36:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000dd38:	2300      	movs	r3, #0
1000dd3a:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000dd3c:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000dd3e:	4b04      	ldr	r3, [pc, #16]	; (1000dd50 <init_dualtimer+0x2c>)
1000dd40:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000dd42:	b008      	add	sp, #32
1000dd44:	bd10      	pop	{r4, pc}
1000dd46:	46c0      	nop			; (mov r8, r8)
1000dd48:	1000817d 	.word	0x1000817d
1000dd4c:	00006590 	.word	0x00006590
1000dd50:	100081b5 	.word	0x100081b5

1000dd54 <imu_poll_data>:
    int_param.pin = PIN_AO_GPIO_2;
    mpu_init(&int_param);
}

void imu_poll_data(void)
{
1000dd54:	b570      	push	{r4, r5, r6, lr}
1000dd56:	b094      	sub	sp, #80	; 0x50
    static unsigned long sensor_timestamp;
    short gyro[3], accel_short[3], sensors;
    unsigned char more;
    long accel[3], quat[4], temperature;
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
1000dd58:	aa02      	add	r2, sp, #8
1000dd5a:	4694      	mov	ip, r2
1000dd5c:	2325      	movs	r3, #37	; 0x25
1000dd5e:	4463      	add	r3, ip
1000dd60:	9301      	str	r3, [sp, #4]
1000dd62:	2326      	movs	r3, #38	; 0x26
1000dd64:	ad0c      	add	r5, sp, #48	; 0x30
1000dd66:	ac0e      	add	r4, sp, #56	; 0x38
1000dd68:	4463      	add	r3, ip
1000dd6a:	0021      	movs	r1, r4
1000dd6c:	aa10      	add	r2, sp, #64	; 0x40
1000dd6e:	0028      	movs	r0, r5
1000dd70:	9300      	str	r3, [sp, #0]
1000dd72:	4e11      	ldr	r6, [pc, #68]	; (1000ddb8 <imu_poll_data+0x64>)
1000dd74:	4b11      	ldr	r3, [pc, #68]	; (1000ddbc <imu_poll_data+0x68>)
1000dd76:	47b0      	blx	r6
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
1000dd78:	4b11      	ldr	r3, [pc, #68]	; (1000ddc0 <imu_poll_data+0x6c>)
1000dd7a:	4812      	ldr	r0, [pc, #72]	; (1000ddc4 <imu_poll_data+0x70>)
1000dd7c:	4798      	blx	r3
1000dd7e:	2204      	movs	r2, #4
1000dd80:	5eab      	ldrsh	r3, [r5, r2]
1000dd82:	2102      	movs	r1, #2
1000dd84:	5e6a      	ldrsh	r2, [r5, r1]
1000dd86:	2000      	movs	r0, #0
1000dd88:	5e29      	ldrsh	r1, [r5, r0]
1000dd8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
1000dd8c:	9006      	str	r0, [sp, #24]
1000dd8e:	9812      	ldr	r0, [sp, #72]	; 0x48
1000dd90:	9005      	str	r0, [sp, #20]
1000dd92:	9009      	str	r0, [sp, #36]	; 0x24
1000dd94:	9811      	ldr	r0, [sp, #68]	; 0x44
1000dd96:	9004      	str	r0, [sp, #16]
1000dd98:	9810      	ldr	r0, [sp, #64]	; 0x40
1000dd9a:	9003      	str	r0, [sp, #12]
1000dd9c:	2504      	movs	r5, #4
1000dd9e:	5f60      	ldrsh	r0, [r4, r5]
1000dda0:	9002      	str	r0, [sp, #8]
1000dda2:	2502      	movs	r5, #2
1000dda4:	5f60      	ldrsh	r0, [r4, r5]
1000dda6:	9001      	str	r0, [sp, #4]
1000dda8:	2000      	movs	r0, #0
1000ddaa:	5e20      	ldrsh	r0, [r4, r0]
1000ddac:	4c06      	ldr	r4, [pc, #24]	; (1000ddc8 <imu_poll_data+0x74>)
1000ddae:	9000      	str	r0, [sp, #0]
1000ddb0:	4806      	ldr	r0, [pc, #24]	; (1000ddcc <imu_poll_data+0x78>)
1000ddb2:	47a0      	blx	r4
}
1000ddb4:	b014      	add	sp, #80	; 0x50
1000ddb6:	bd70      	pop	{r4, r5, r6, pc}
1000ddb8:	100099bd 	.word	0x100099bd
1000ddbc:	1001ced8 	.word	0x1001ced8
1000ddc0:	10018375 	.word	0x10018375
1000ddc4:	10019518 	.word	0x10019518
1000ddc8:	10018255 	.word	0x10018255
1000ddcc:	1001ad28 	.word	0x1001ad28

1000ddd0 <main>:

int main(void)
{
1000ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddd2:	4644      	mov	r4, r8
1000ddd4:	4656      	mov	r6, sl
1000ddd6:	465f      	mov	r7, fp
1000ddd8:	464d      	mov	r5, r9
1000ddda:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000dddc:	4b5f      	ldr	r3, [pc, #380]	; (1000df5c <main+0x18c>)
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000ddde:	b087      	sub	sp, #28
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000dde0:	4798      	blx	r3
    gpio_init();
1000dde2:	4b5f      	ldr	r3, [pc, #380]	; (1000df60 <main+0x190>)
1000dde4:	4798      	blx	r3
    acquire_sleep_lock();
1000dde6:	4b5f      	ldr	r3, [pc, #380]	; (1000df64 <main+0x194>)
1000dde8:	4798      	blx	r3
    serial_console_init();
1000ddea:	4b5f      	ldr	r3, [pc, #380]	; (1000df68 <main+0x198>)
1000ddec:	4798      	blx	r3
    ble_device_init(NULL);
1000ddee:	2000      	movs	r0, #0
1000ddf0:	4b5e      	ldr	r3, [pc, #376]	; (1000df6c <main+0x19c>)
1000ddf2:	4798      	blx	r3

    init_dualtimer();
1000ddf4:	4b5e      	ldr	r3, [pc, #376]	; (1000df70 <main+0x1a0>)
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000ddf6:	ac03      	add	r4, sp, #12
    gpio_init();
    acquire_sleep_lock();
    serial_console_init();
    ble_device_init(NULL);

    init_dualtimer();
1000ddf8:	4798      	blx	r3
    delay_init();
1000ddfa:	4b5e      	ldr	r3, [pc, #376]	; (1000df74 <main+0x1a4>)
1000ddfc:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000ddfe:	0020      	movs	r0, r4
1000de00:	4b5d      	ldr	r3, [pc, #372]	; (1000df78 <main+0x1a8>)
1000de02:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000de04:	2300      	movs	r3, #0
1000de06:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000de08:	3302      	adds	r3, #2
1000de0a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000de0c:	3b01      	subs	r3, #1
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000de0e:	0021      	movs	r1, r4
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
1000de10:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000de12:	201d      	movs	r0, #29
1000de14:	4b59      	ldr	r3, [pc, #356]	; (1000df7c <main+0x1ac>)
1000de16:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000de18:	4b59      	ldr	r3, [pc, #356]	; (1000df80 <main+0x1b0>)
1000de1a:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000de1c:	4b59      	ldr	r3, [pc, #356]	; (1000df84 <main+0x1b4>)
    int_param.pin = PIN_AO_GPIO_2;
    mpu_init(&int_param);
1000de1e:	0020      	movs	r0, r4
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000de20:	6063      	str	r3, [r4, #4]
1000de22:	4698      	mov	r8, r3
    int_param.pin = PIN_AO_GPIO_2;
1000de24:	231d      	movs	r3, #29
1000de26:	8023      	strh	r3, [r4, #0]
    mpu_init(&int_param);
1000de28:	4b57      	ldr	r3, [pc, #348]	; (1000df88 <main+0x1b8>)
1000de2a:	4798      	blx	r3
    
    /* If you're not using an MPU9150 AND you're not using DMP features, this
     * function will place all slaves on the primary bus.
     * mpu_set_bypass(1);
     */
    result = inv_init_mpl();
1000de2c:	4b57      	ldr	r3, [pc, #348]	; (1000df8c <main+0x1bc>)
1000de2e:	4798      	blx	r3
    if(result) {
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
1000de30:	4e57      	ldr	r6, [pc, #348]	; (1000df90 <main+0x1c0>)
    /* If you're not using an MPU9150 AND you're not using DMP features, this
     * function will place all slaves on the primary bus.
     * mpu_set_bypass(1);
     */
    result = inv_init_mpl();
    if(result) {
1000de32:	2800      	cmp	r0, #0
1000de34:	d000      	beq.n	1000de38 <main+0x68>
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
1000de36:	47b0      	blx	r6
    }
    
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
1000de38:	4b56      	ldr	r3, [pc, #344]	; (1000df94 <main+0x1c4>)
1000de3a:	4798      	blx	r3
    inv_enable_9x_sensor_fusion();
1000de3c:	4b56      	ldr	r3, [pc, #344]	; (1000df98 <main+0x1c8>)
1000de3e:	4798      	blx	r3
     */

    /* Update gyro biases when not in motion.
     * WARNING: These algorithms are mutually exclusive.
     */
    inv_enable_fast_nomot();
1000de40:	4b56      	ldr	r3, [pc, #344]	; (1000df9c <main+0x1cc>)
1000de42:	4798      	blx	r3
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
1000de44:	4b56      	ldr	r3, [pc, #344]	; (1000dfa0 <main+0x1d0>)
1000de46:	4798      	blx	r3
     */

    /* Allows use of the MPL APIs in read_from_mpl. */
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
1000de48:	4b56      	ldr	r3, [pc, #344]	; (1000dfa4 <main+0x1d4>)
1000de4a:	4798      	blx	r3
    if (result == INV_ERROR_NOT_AUTHORIZED) {
1000de4c:	2832      	cmp	r0, #50	; 0x32
1000de4e:	d100      	bne.n	1000de52 <main+0x82>
1000de50:	e07f      	b.n	1000df52 <main+0x182>
        while (1) {
            MPL_LOGE("Not authorized.\n");
            delay_ms(5000);
        }
    }
    if (result) {
1000de52:	2800      	cmp	r0, #0
1000de54:	d000      	beq.n	1000de58 <main+0x88>
        MPL_LOGE("Could not start the MPL.\n");
        system_global_reset();
1000de56:	47b0      	blx	r6
    }

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000de58:	4b53      	ldr	r3, [pc, #332]	; (1000dfa8 <main+0x1d8>)
1000de5a:	2079      	movs	r0, #121	; 0x79
1000de5c:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000de5e:	4b53      	ldr	r3, [pc, #332]	; (1000dfac <main+0x1dc>)
1000de60:	2078      	movs	r0, #120	; 0x78
1000de62:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000de64:	4b52      	ldr	r3, [pc, #328]	; (1000dfb0 <main+0x1e0>)
1000de66:	200a      	movs	r0, #10
1000de68:	4798      	blx	r3
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000de6a:	ad02      	add	r5, sp, #8
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000de6c:	4b51      	ldr	r3, [pc, #324]	; (1000dfb4 <main+0x1e4>)
1000de6e:	200a      	movs	r0, #10
1000de70:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000de72:	0028      	movs	r0, r5
1000de74:	4b50      	ldr	r3, [pc, #320]	; (1000dfb8 <main+0x1e8>)
1000de76:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000de78:	230a      	movs	r3, #10
1000de7a:	446b      	add	r3, sp
1000de7c:	469a      	mov	sl, r3
1000de7e:	0018      	movs	r0, r3
1000de80:	4b4e      	ldr	r3, [pc, #312]	; (1000dfbc <main+0x1ec>)
1000de82:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000de84:	2307      	movs	r3, #7
1000de86:	446b      	add	r3, sp
1000de88:	4699      	mov	r9, r3
1000de8a:	0018      	movs	r0, r3
1000de8c:	4b4c      	ldr	r3, [pc, #304]	; (1000dfc0 <main+0x1f0>)
1000de8e:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000de90:	4b4c      	ldr	r3, [pc, #304]	; (1000dfc4 <main+0x1f4>)
1000de92:	0020      	movs	r0, r4
1000de94:	4798      	blx	r3

    /* Sync driver configuration with MPL. */
    /* Sample rate expected in microseconds. */
    inv_set_gyro_sample_rate(1000000L / gyro_rate);
1000de96:	8829      	ldrh	r1, [r5, #0]
1000de98:	4f4b      	ldr	r7, [pc, #300]	; (1000dfc8 <main+0x1f8>)
1000de9a:	484c      	ldr	r0, [pc, #304]	; (1000dfcc <main+0x1fc>)
1000de9c:	47b8      	blx	r7
1000de9e:	4b4c      	ldr	r3, [pc, #304]	; (1000dfd0 <main+0x200>)
1000dea0:	4798      	blx	r3
    inv_set_accel_sample_rate(1000000L / gyro_rate);
1000dea2:	8829      	ldrh	r1, [r5, #0]
1000dea4:	4849      	ldr	r0, [pc, #292]	; (1000dfcc <main+0x1fc>)
1000dea6:	47b8      	blx	r7
1000dea8:	4b4a      	ldr	r3, [pc, #296]	; (1000dfd4 <main+0x204>)
1000deaa:	4798      	blx	r3
    /* The compass rate is independent of the gyro and accel rates. As long as
     * inv_set_compass_sample_rate is called with the correct value, the 9-axis
     * fusion algorithm's compass correction gain will work properly.
     */
    inv_set_compass_sample_rate(COMPASS_READ_MS * 1000L);
1000deac:	4b4a      	ldr	r3, [pc, #296]	; (1000dfd8 <main+0x208>)
1000deae:	484b      	ldr	r0, [pc, #300]	; (1000dfdc <main+0x20c>)
1000deb0:	4798      	blx	r3

    /* Set chip-to-body orientation matrix.
     * Set hardware units to dps/g's/degrees scaling factor.
     */
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
1000deb2:	4f4b      	ldr	r7, [pc, #300]	; (1000dfe0 <main+0x210>)
1000deb4:	4d4b      	ldr	r5, [pc, #300]	; (1000dfe4 <main+0x214>)
1000deb6:	0038      	movs	r0, r7
1000deb8:	47a8      	blx	r5
1000deba:	4653      	mov	r3, sl
1000debc:	8819      	ldrh	r1, [r3, #0]
1000debe:	4b4a      	ldr	r3, [pc, #296]	; (1000dfe8 <main+0x218>)
1000dec0:	03c9      	lsls	r1, r1, #15
1000dec2:	4798      	blx	r3
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
1000dec4:	0038      	movs	r0, r7
1000dec6:	47a8      	blx	r5
1000dec8:	464b      	mov	r3, r9
1000deca:	7819      	ldrb	r1, [r3, #0]
1000decc:	4b47      	ldr	r3, [pc, #284]	; (1000dfec <main+0x21c>)
1000dece:	03c9      	lsls	r1, r1, #15
1000ded0:	4798      	blx	r3
    inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);
1000ded2:	4847      	ldr	r0, [pc, #284]	; (1000dff0 <main+0x220>)
1000ded4:	47a8      	blx	r5
1000ded6:	8821      	ldrh	r1, [r4, #0]
1000ded8:	4b46      	ldr	r3, [pc, #280]	; (1000dff4 <main+0x224>)
1000deda:	03c9      	lsls	r1, r1, #15
1000dedc:	4798      	blx	r3
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
1000dede:	4b46      	ldr	r3, [pc, #280]	; (1000dff8 <main+0x228>)
1000dee0:	2001      	movs	r0, #1
1000dee2:	4798      	blx	r3
    timestamp = (uint32_t *)(load / 26000);
    DBG_LOG_DEV("Timestamp: %lld", timestamp);

    if (dmp_load_motion_driver_firmware()) {
1000dee4:	4b45      	ldr	r3, [pc, #276]	; (1000dffc <main+0x22c>)
1000dee6:	4798      	blx	r3
1000dee8:	2800      	cmp	r0, #0
1000deea:	d000      	beq.n	1000deee <main+0x11e>
        MPL_LOGE("Could not download DMP.\n");
        system_global_reset();
1000deec:	47b0      	blx	r6
    }
    dmp_set_orientation(
1000deee:	0038      	movs	r0, r7
1000def0:	47a8      	blx	r5
1000def2:	4b43      	ldr	r3, [pc, #268]	; (1000e000 <main+0x230>)
1000def4:	4798      	blx	r3
    inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
1000def6:	2074      	movs	r0, #116	; 0x74
1000def8:	4b42      	ldr	r3, [pc, #264]	; (1000e004 <main+0x234>)
1000defa:	30ff      	adds	r0, #255	; 0xff
1000defc:	4798      	blx	r3
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1000defe:	4b42      	ldr	r3, [pc, #264]	; (1000e008 <main+0x238>)
1000df00:	200a      	movs	r0, #10
1000df02:	4798      	blx	r3
    inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
1000df04:	4835      	ldr	r0, [pc, #212]	; (1000dfdc <main+0x20c>)
1000df06:	4b41      	ldr	r3, [pc, #260]	; (1000e00c <main+0x23c>)
1000df08:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000df0a:	4b41      	ldr	r3, [pc, #260]	; (1000e010 <main+0x240>)
1000df0c:	2001      	movs	r0, #1
1000df0e:	4798      	blx	r3
    hal.dmp_on = 1;

    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000df10:	4641      	mov	r1, r8
1000df12:	2202      	movs	r2, #2
1000df14:	201d      	movs	r0, #29
1000df16:	4b3f      	ldr	r3, [pc, #252]	; (1000e014 <main+0x244>)
1000df18:	4798      	blx	r3
    gpio_enable_callback(PIN_AO_GPIO_2);
1000df1a:	4b3f      	ldr	r3, [pc, #252]	; (1000e018 <main+0x248>)
1000df1c:	201d      	movs	r0, #29
1000df1e:	4798      	blx	r3
1000df20:	4b3e      	ldr	r3, [pc, #248]	; (1000e01c <main+0x24c>)
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
        if(imu_interrupt) {
            DBG_LOG("IMU INTERRUPT!");
            imu_poll_data();
            imu_interrupt = false;
1000df22:	2600      	movs	r6, #0
1000df24:	469b      	mov	fp, r3
1000df26:	4b3e      	ldr	r3, [pc, #248]	; (1000e020 <main+0x250>)
1000df28:	4d3e      	ldr	r5, [pc, #248]	; (1000e024 <main+0x254>)
1000df2a:	469a      	mov	sl, r3
1000df2c:	4b3e      	ldr	r3, [pc, #248]	; (1000e028 <main+0x258>)
1000df2e:	4c3f      	ldr	r4, [pc, #252]	; (1000e02c <main+0x25c>)
1000df30:	4699      	mov	r9, r3
1000df32:	4b3f      	ldr	r3, [pc, #252]	; (1000e030 <main+0x260>)
1000df34:	4f3f      	ldr	r7, [pc, #252]	; (1000e034 <main+0x264>)
1000df36:	4698      	mov	r8, r3
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000df38:	2001      	movs	r0, #1
1000df3a:	4240      	negs	r0, r0
1000df3c:	47a8      	blx	r5
        if(imu_interrupt) {
1000df3e:	7823      	ldrb	r3, [r4, #0]
1000df40:	2b00      	cmp	r3, #0
1000df42:	d0f9      	beq.n	1000df38 <main+0x168>
            DBG_LOG("IMU INTERRUPT!");
1000df44:	4658      	mov	r0, fp
1000df46:	47d0      	blx	sl
1000df48:	4648      	mov	r0, r9
1000df4a:	47c0      	blx	r8
            imu_poll_data();
1000df4c:	47b8      	blx	r7
            imu_interrupt = false;
1000df4e:	7026      	strb	r6, [r4, #0]
1000df50:	e7f2      	b.n	1000df38 <main+0x168>
1000df52:	4c39      	ldr	r4, [pc, #228]	; (1000e038 <main+0x268>)

    result = inv_start_mpl();
    if (result == INV_ERROR_NOT_AUTHORIZED) {
        while (1) {
            MPL_LOGE("Not authorized.\n");
            delay_ms(5000);
1000df54:	4839      	ldr	r0, [pc, #228]	; (1000e03c <main+0x26c>)
1000df56:	47a0      	blx	r4
1000df58:	e7fc      	b.n	1000df54 <main+0x184>
1000df5a:	46c0      	nop			; (mov r8, r8)
1000df5c:	1000c0d1 	.word	0x1000c0d1
1000df60:	1000d261 	.word	0x1000d261
1000df64:	1000c669 	.word	0x1000c669
1000df68:	1000bdfd 	.word	0x1000bdfd
1000df6c:	1000b65d 	.word	0x1000b65d
1000df70:	1000dd25 	.word	0x1000dd25
1000df74:	100080cd 	.word	0x100080cd
1000df78:	1000cec9 	.word	0x1000cec9
1000df7c:	1000ced9 	.word	0x1000ced9
1000df80:	1000dcb1 	.word	0x1000dcb1
1000df84:	1000dc91 	.word	0x1000dc91
1000df88:	10008e15 	.word	0x10008e15
1000df8c:	1000a9dd 	.word	0x1000a9dd
1000df90:	1000d819 	.word	0x1000d819
1000df94:	10013ae1 	.word	0x10013ae1
1000df98:	100122d5 	.word	0x100122d5
1000df9c:	10011b89 	.word	0x10011b89
1000dfa0:	100128c9 	.word	0x100128c9
1000dfa4:	1000aa11 	.word	0x1000aa11
1000dfa8:	10008c61 	.word	0x10008c61
1000dfac:	10008825 	.word	0x10008825
1000dfb0:	10008b95 	.word	0x10008b95
1000dfb4:	100087c1 	.word	0x100087c1
1000dfb8:	100087a5 	.word	0x100087a5
1000dfbc:	1000857d 	.word	0x1000857d
1000dfc0:	10008649 	.word	0x10008649
1000dfc4:	1000931d 	.word	0x1000931d
1000dfc8:	10014ec9 	.word	0x10014ec9
1000dfcc:	000f4240 	.word	0x000f4240
1000dfd0:	10009bad 	.word	0x10009bad
1000dfd4:	10009bdd 	.word	0x10009bdd
1000dfd8:	10009c0d 	.word	0x10009c0d
1000dfdc:	000186a0 	.word	0x000186a0
1000dfe0:	1001b3e4 	.word	0x1001b3e4
1000dfe4:	1000a921 	.word	0x1000a921
1000dfe8:	10009ba1 	.word	0x10009ba1
1000dfec:	10009c75 	.word	0x10009c75
1000dff0:	1001b3f0 	.word	0x1001b3f0
1000dff4:	10009c81 	.word	0x10009c81
1000dff8:	100081a1 	.word	0x100081a1
1000dffc:	10009359 	.word	0x10009359
1000e000:	10009379 	.word	0x10009379
1000e004:	10009771 	.word	0x10009771
1000e008:	10009485 	.word	0x10009485
1000e00c:	10009c41 	.word	0x10009c41
1000e010:	10009281 	.word	0x10009281
1000e014:	1000d14d 	.word	0x1000d14d
1000e018:	1000d20d 	.word	0x1000d20d
1000e01c:	10019518 	.word	0x10019518
1000e020:	10018375 	.word	0x10018375
1000e024:	1000bd1d 	.word	0x1000bd1d
1000e028:	1001ad54 	.word	0x1001ad54
1000e02c:	1001cedc 	.word	0x1001cedc
1000e030:	10018255 	.word	0x10018255
1000e034:	1000dd55 	.word	0x1000dd55
1000e038:	1000810d 	.word	0x1000810d
1000e03c:	00001388 	.word	0x00001388

1000e040 <internal_event_post>:
1000e040:	b570      	push	{r4, r5, r6, lr}
1000e042:	4d12      	ldr	r5, [pc, #72]	; (1000e08c <internal_event_post+0x4c>)
1000e044:	682c      	ldr	r4, [r5, #0]
1000e046:	2c00      	cmp	r4, #0
1000e048:	d014      	beq.n	1000e074 <internal_event_post+0x34>
1000e04a:	6826      	ldr	r6, [r4, #0]
1000e04c:	60e2      	str	r2, [r4, #12]
1000e04e:	602e      	str	r6, [r5, #0]
1000e050:	2500      	movs	r5, #0
1000e052:	4a0f      	ldr	r2, [pc, #60]	; (1000e090 <internal_event_post+0x50>)
1000e054:	8123      	strh	r3, [r4, #8]
1000e056:	6813      	ldr	r3, [r2, #0]
1000e058:	6025      	str	r5, [r4, #0]
1000e05a:	80a0      	strh	r0, [r4, #4]
1000e05c:	80e1      	strh	r1, [r4, #6]
1000e05e:	42ab      	cmp	r3, r5
1000e060:	d101      	bne.n	1000e066 <internal_event_post+0x26>
1000e062:	6014      	str	r4, [r2, #0]
1000e064:	e011      	b.n	1000e08a <internal_event_post+0x4a>
1000e066:	681a      	ldr	r2, [r3, #0]
1000e068:	2a00      	cmp	r2, #0
1000e06a:	d001      	beq.n	1000e070 <internal_event_post+0x30>
1000e06c:	1c13      	adds	r3, r2, #0
1000e06e:	e7fa      	b.n	1000e066 <internal_event_post+0x26>
1000e070:	601c      	str	r4, [r3, #0]
1000e072:	e00a      	b.n	1000e08a <internal_event_post+0x4a>
1000e074:	b2c4      	uxtb	r4, r0
1000e076:	2c00      	cmp	r4, #0
1000e078:	d107      	bne.n	1000e08a <internal_event_post+0x4a>
1000e07a:	4c06      	ldr	r4, [pc, #24]	; (1000e094 <internal_event_post+0x54>)
1000e07c:	60e2      	str	r2, [r4, #12]
1000e07e:	2201      	movs	r2, #1
1000e080:	8123      	strh	r3, [r4, #8]
1000e082:	4b05      	ldr	r3, [pc, #20]	; (1000e098 <internal_event_post+0x58>)
1000e084:	80a0      	strh	r0, [r4, #4]
1000e086:	80e1      	strh	r1, [r4, #6]
1000e088:	701a      	strb	r2, [r3, #0]
1000e08a:	bd70      	pop	{r4, r5, r6, pc}
1000e08c:	1001cef8 	.word	0x1001cef8
1000e090:	1001cef4 	.word	0x1001cef4
1000e094:	1001cee0 	.word	0x1001cee0
1000e098:	1001cef0 	.word	0x1001cef0

1000e09c <internal_event_init>:
1000e09c:	b510      	push	{r4, lr}
1000e09e:	4b08      	ldr	r3, [pc, #32]	; (1000e0c0 <internal_event_init+0x24>)
1000e0a0:	0900      	lsrs	r0, r0, #4
1000e0a2:	0100      	lsls	r0, r0, #4
1000e0a4:	681a      	ldr	r2, [r3, #0]
1000e0a6:	1808      	adds	r0, r1, r0
1000e0a8:	4281      	cmp	r1, r0
1000e0aa:	d003      	beq.n	1000e0b4 <internal_event_init+0x18>
1000e0ac:	600a      	str	r2, [r1, #0]
1000e0ae:	1c0a      	adds	r2, r1, #0
1000e0b0:	3110      	adds	r1, #16
1000e0b2:	e7f9      	b.n	1000e0a8 <internal_event_init+0xc>
1000e0b4:	601a      	str	r2, [r3, #0]
1000e0b6:	2200      	movs	r2, #0
1000e0b8:	4b02      	ldr	r3, [pc, #8]	; (1000e0c4 <internal_event_init+0x28>)
1000e0ba:	601a      	str	r2, [r3, #0]
1000e0bc:	bd10      	pop	{r4, pc}
1000e0be:	46c0      	nop			; (mov r8, r8)
1000e0c0:	1001cef8 	.word	0x1001cef8
1000e0c4:	1001cef4 	.word	0x1001cef4

1000e0c8 <special_events_handler>:
1000e0c8:	b538      	push	{r3, r4, r5, lr}
1000e0ca:	4c1b      	ldr	r4, [pc, #108]	; (1000e138 <special_events_handler+0x70>)
1000e0cc:	1c03      	adds	r3, r0, #0
1000e0ce:	8825      	ldrh	r5, [r4, #0]
1000e0d0:	1c08      	adds	r0, r1, #0
1000e0d2:	1c21      	adds	r1, r4, #0
1000e0d4:	429d      	cmp	r5, r3
1000e0d6:	d107      	bne.n	1000e0e8 <special_events_handler+0x20>
1000e0d8:	88a5      	ldrh	r5, [r4, #4]
1000e0da:	4285      	cmp	r5, r0
1000e0dc:	d104      	bne.n	1000e0e8 <special_events_handler+0x20>
1000e0de:	2301      	movs	r3, #1
1000e0e0:	425b      	negs	r3, r3
1000e0e2:	8023      	strh	r3, [r4, #0]
1000e0e4:	60a2      	str	r2, [r4, #8]
1000e0e6:	e009      	b.n	1000e0fc <special_events_handler+0x34>
1000e0e8:	884c      	ldrh	r4, [r1, #2]
1000e0ea:	429c      	cmp	r4, r3
1000e0ec:	d10a      	bne.n	1000e104 <special_events_handler+0x3c>
1000e0ee:	888c      	ldrh	r4, [r1, #4]
1000e0f0:	4284      	cmp	r4, r0
1000e0f2:	d107      	bne.n	1000e104 <special_events_handler+0x3c>
1000e0f4:	2301      	movs	r3, #1
1000e0f6:	425b      	negs	r3, r3
1000e0f8:	804b      	strh	r3, [r1, #2]
1000e0fa:	608a      	str	r2, [r1, #8]
1000e0fc:	4b0f      	ldr	r3, [pc, #60]	; (1000e13c <special_events_handler+0x74>)
1000e0fe:	4798      	blx	r3
1000e100:	2001      	movs	r0, #1
1000e102:	e017      	b.n	1000e134 <special_events_handler+0x6c>
1000e104:	490e      	ldr	r1, [pc, #56]	; (1000e140 <special_events_handler+0x78>)
1000e106:	428b      	cmp	r3, r1
1000e108:	d00e      	beq.n	1000e128 <special_events_handler+0x60>
1000e10a:	490e      	ldr	r1, [pc, #56]	; (1000e144 <special_events_handler+0x7c>)
1000e10c:	428b      	cmp	r3, r1
1000e10e:	d007      	beq.n	1000e120 <special_events_handler+0x58>
1000e110:	490d      	ldr	r1, [pc, #52]	; (1000e148 <special_events_handler+0x80>)
1000e112:	2000      	movs	r0, #0
1000e114:	428b      	cmp	r3, r1
1000e116:	d10d      	bne.n	1000e134 <special_events_handler+0x6c>
1000e118:	1c10      	adds	r0, r2, #0
1000e11a:	4b0c      	ldr	r3, [pc, #48]	; (1000e14c <special_events_handler+0x84>)
1000e11c:	4798      	blx	r3
1000e11e:	e7ef      	b.n	1000e100 <special_events_handler+0x38>
1000e120:	1c11      	adds	r1, r2, #0
1000e122:	4b0b      	ldr	r3, [pc, #44]	; (1000e150 <special_events_handler+0x88>)
1000e124:	2200      	movs	r2, #0
1000e126:	e002      	b.n	1000e12e <special_events_handler+0x66>
1000e128:	1c11      	adds	r1, r2, #0
1000e12a:	2200      	movs	r2, #0
1000e12c:	4b09      	ldr	r3, [pc, #36]	; (1000e154 <special_events_handler+0x8c>)
1000e12e:	4798      	blx	r3
1000e130:	4243      	negs	r3, r0
1000e132:	4158      	adcs	r0, r3
1000e134:	bd38      	pop	{r3, r4, r5, pc}
1000e136:	46c0      	nop			; (mov r8, r8)
1000e138:	1001df64 	.word	0x1001df64
1000e13c:	1000f2cd 	.word	0x1000f2cd
1000e140:	00000e13 	.word	0x00000e13
1000e144:	00000e15 	.word	0x00000e15
1000e148:	00000e01 	.word	0x00000e01
1000e14c:	1000f63d 	.word	0x1000f63d
1000e150:	1000f7fd 	.word	0x1000f7fd
1000e154:	1000f8d5 	.word	0x1000f8d5

1000e158 <at_ble_event_get>:
1000e158:	2300      	movs	r3, #0
1000e15a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e15c:	b087      	sub	sp, #28
1000e15e:	9204      	str	r2, [sp, #16]
1000e160:	7003      	strb	r3, [r0, #0]
1000e162:	9b04      	ldr	r3, [sp, #16]
1000e164:	9003      	str	r0, [sp, #12]
1000e166:	3b01      	subs	r3, #1
1000e168:	1c0d      	adds	r5, r1, #0
1000e16a:	9305      	str	r3, [sp, #20]
1000e16c:	3303      	adds	r3, #3
1000e16e:	d802      	bhi.n	1000e176 <at_ble_event_get+0x1e>
1000e170:	9804      	ldr	r0, [sp, #16]
1000e172:	4bae      	ldr	r3, [pc, #696]	; (1000e42c <at_ble_event_get+0x2d4>)
1000e174:	4798      	blx	r3
1000e176:	9b05      	ldr	r3, [sp, #20]
1000e178:	4cad      	ldr	r4, [pc, #692]	; (1000e430 <at_ble_event_get+0x2d8>)
1000e17a:	3303      	adds	r3, #3
1000e17c:	d902      	bls.n	1000e184 <at_ble_event_get+0x2c>
1000e17e:	2300      	movs	r3, #0
1000e180:	9302      	str	r3, [sp, #8]
1000e182:	e015      	b.n	1000e1b0 <at_ble_event_get+0x58>
1000e184:	2300      	movs	r3, #0
1000e186:	9302      	str	r3, [sp, #8]
1000e188:	6823      	ldr	r3, [r4, #0]
1000e18a:	2b00      	cmp	r3, #0
1000e18c:	d113      	bne.n	1000e1b6 <at_ble_event_get+0x5e>
1000e18e:	9b02      	ldr	r3, [sp, #8]
1000e190:	2bd0      	cmp	r3, #208	; 0xd0
1000e192:	d100      	bne.n	1000e196 <at_ble_event_get+0x3e>
1000e194:	e2da      	b.n	1000e74c <at_ble_event_get+0x5f4>
1000e196:	9804      	ldr	r0, [sp, #16]
1000e198:	4ba6      	ldr	r3, [pc, #664]	; (1000e434 <at_ble_event_get+0x2dc>)
1000e19a:	4798      	blx	r3
1000e19c:	9002      	str	r0, [sp, #8]
1000e19e:	2802      	cmp	r0, #2
1000e1a0:	d1f2      	bne.n	1000e188 <at_ble_event_get+0x30>
1000e1a2:	e03f      	b.n	1000e224 <at_ble_event_get+0xcc>
1000e1a4:	9804      	ldr	r0, [sp, #16]
1000e1a6:	4ba3      	ldr	r3, [pc, #652]	; (1000e434 <at_ble_event_get+0x2dc>)
1000e1a8:	4798      	blx	r3
1000e1aa:	9002      	str	r0, [sp, #8]
1000e1ac:	2802      	cmp	r0, #2
1000e1ae:	d039      	beq.n	1000e224 <at_ble_event_get+0xcc>
1000e1b0:	6823      	ldr	r3, [r4, #0]
1000e1b2:	2b00      	cmp	r3, #0
1000e1b4:	d0f6      	beq.n	1000e1a4 <at_ble_event_get+0x4c>
1000e1b6:	9b02      	ldr	r3, [sp, #8]
1000e1b8:	2bd0      	cmp	r3, #208	; 0xd0
1000e1ba:	d100      	bne.n	1000e1be <at_ble_event_get+0x66>
1000e1bc:	e2c6      	b.n	1000e74c <at_ble_event_get+0x5f4>
1000e1be:	9b02      	ldr	r3, [sp, #8]
1000e1c0:	3b03      	subs	r3, #3
1000e1c2:	1e5a      	subs	r2, r3, #1
1000e1c4:	4193      	sbcs	r3, r2
1000e1c6:	9a02      	ldr	r2, [sp, #8]
1000e1c8:	425b      	negs	r3, r3
1000e1ca:	401a      	ands	r2, r3
1000e1cc:	6823      	ldr	r3, [r4, #0]
1000e1ce:	9202      	str	r2, [sp, #8]
1000e1d0:	2b00      	cmp	r3, #0
1000e1d2:	d100      	bne.n	1000e1d6 <at_ble_event_get+0x7e>
1000e1d4:	e2c2      	b.n	1000e75c <at_ble_event_get+0x604>
1000e1d6:	681a      	ldr	r2, [r3, #0]
1000e1d8:	68de      	ldr	r6, [r3, #12]
1000e1da:	6022      	str	r2, [r4, #0]
1000e1dc:	88da      	ldrh	r2, [r3, #6]
1000e1de:	9201      	str	r2, [sp, #4]
1000e1e0:	4a95      	ldr	r2, [pc, #596]	; (1000e438 <at_ble_event_get+0x2e0>)
1000e1e2:	889c      	ldrh	r4, [r3, #4]
1000e1e4:	6811      	ldr	r1, [r2, #0]
1000e1e6:	6013      	str	r3, [r2, #0]
1000e1e8:	6019      	str	r1, [r3, #0]
1000e1ea:	4b94      	ldr	r3, [pc, #592]	; (1000e43c <at_ble_event_get+0x2e4>)
1000e1ec:	781b      	ldrb	r3, [r3, #0]
1000e1ee:	2b01      	cmp	r3, #1
1000e1f0:	d10f      	bne.n	1000e212 <at_ble_event_get+0xba>
1000e1f2:	4b93      	ldr	r3, [pc, #588]	; (1000e440 <at_ble_event_get+0x2e8>)
1000e1f4:	4a92      	ldr	r2, [pc, #584]	; (1000e440 <at_ble_event_get+0x2e8>)
1000e1f6:	8898      	ldrh	r0, [r3, #4]
1000e1f8:	88d9      	ldrh	r1, [r3, #6]
1000e1fa:	68d2      	ldr	r2, [r2, #12]
1000e1fc:	891b      	ldrh	r3, [r3, #8]
1000e1fe:	4f91      	ldr	r7, [pc, #580]	; (1000e444 <at_ble_event_get+0x2ec>)
1000e200:	47b8      	blx	r7
1000e202:	2210      	movs	r2, #16
1000e204:	4b90      	ldr	r3, [pc, #576]	; (1000e448 <at_ble_event_get+0x2f0>)
1000e206:	488e      	ldr	r0, [pc, #568]	; (1000e440 <at_ble_event_get+0x2e8>)
1000e208:	2100      	movs	r1, #0
1000e20a:	4798      	blx	r3
1000e20c:	2300      	movs	r3, #0
1000e20e:	4a8b      	ldr	r2, [pc, #556]	; (1000e43c <at_ble_event_get+0x2e4>)
1000e210:	7013      	strb	r3, [r2, #0]
1000e212:	9b02      	ldr	r3, [sp, #8]
1000e214:	2b00      	cmp	r3, #0
1000e216:	d114      	bne.n	1000e242 <at_ble_event_get+0xea>
1000e218:	4b8c      	ldr	r3, [pc, #560]	; (1000e44c <at_ble_event_get+0x2f4>)
1000e21a:	429c      	cmp	r4, r3
1000e21c:	d009      	beq.n	1000e232 <at_ble_event_get+0xda>
1000e21e:	4b8c      	ldr	r3, [pc, #560]	; (1000e450 <at_ble_event_get+0x2f8>)
1000e220:	429c      	cmp	r4, r3
1000e222:	d127      	bne.n	1000e274 <at_ble_event_get+0x11c>
1000e224:	233a      	movs	r3, #58	; 0x3a
1000e226:	9a03      	ldr	r2, [sp, #12]
1000e228:	7013      	strb	r3, [r2, #0]
1000e22a:	2300      	movs	r3, #0
1000e22c:	9302      	str	r3, [sp, #8]
1000e22e:	1c1d      	adds	r5, r3, #0
1000e230:	e007      	b.n	1000e242 <at_ble_event_get+0xea>
1000e232:	9b01      	ldr	r3, [sp, #4]
1000e234:	42a3      	cmp	r3, r4
1000e236:	d000      	beq.n	1000e23a <at_ble_event_get+0xe2>
1000e238:	e28a      	b.n	1000e750 <at_ble_event_get+0x5f8>
1000e23a:	2338      	movs	r3, #56	; 0x38
1000e23c:	9a03      	ldr	r2, [sp, #12]
1000e23e:	7013      	strb	r3, [r2, #0]
1000e240:	602e      	str	r6, [r5, #0]
1000e242:	9b03      	ldr	r3, [sp, #12]
1000e244:	781b      	ldrb	r3, [r3, #0]
1000e246:	2b3b      	cmp	r3, #59	; 0x3b
1000e248:	d101      	bne.n	1000e24e <at_ble_event_get+0xf6>
1000e24a:	4b82      	ldr	r3, [pc, #520]	; (1000e454 <at_ble_event_get+0x2fc>)
1000e24c:	4798      	blx	r3
1000e24e:	9b03      	ldr	r3, [sp, #12]
1000e250:	781b      	ldrb	r3, [r3, #0]
1000e252:	2b3b      	cmp	r3, #59	; 0x3b
1000e254:	d003      	beq.n	1000e25e <at_ble_event_get+0x106>
1000e256:	9b05      	ldr	r3, [sp, #20]
1000e258:	3303      	adds	r3, #3
1000e25a:	d904      	bls.n	1000e266 <at_ble_event_get+0x10e>
1000e25c:	e283      	b.n	1000e766 <at_ble_event_get+0x60e>
1000e25e:	9b02      	ldr	r3, [sp, #8]
1000e260:	2b00      	cmp	r3, #0
1000e262:	d088      	beq.n	1000e176 <at_ble_event_get+0x1e>
1000e264:	e7f7      	b.n	1000e256 <at_ble_event_get+0xfe>
1000e266:	9b02      	ldr	r3, [sp, #8]
1000e268:	2bd0      	cmp	r3, #208	; 0xd0
1000e26a:	d100      	bne.n	1000e26e <at_ble_event_get+0x116>
1000e26c:	e27b      	b.n	1000e766 <at_ble_event_get+0x60e>
1000e26e:	4b7a      	ldr	r3, [pc, #488]	; (1000e458 <at_ble_event_get+0x300>)
1000e270:	4798      	blx	r3
1000e272:	e278      	b.n	1000e766 <at_ble_event_get+0x60e>
1000e274:	9b01      	ldr	r3, [sp, #4]
1000e276:	2bbb      	cmp	r3, #187	; 0xbb
1000e278:	d125      	bne.n	1000e2c6 <at_ble_event_get+0x16e>
1000e27a:	2cbb      	cmp	r4, #187	; 0xbb
1000e27c:	d123      	bne.n	1000e2c6 <at_ble_event_get+0x16e>
1000e27e:	466b      	mov	r3, sp
1000e280:	891b      	ldrh	r3, [r3, #8]
1000e282:	80ab      	strh	r3, [r5, #4]
1000e284:	78b3      	ldrb	r3, [r6, #2]
1000e286:	7872      	ldrb	r2, [r6, #1]
1000e288:	78f0      	ldrb	r0, [r6, #3]
1000e28a:	021b      	lsls	r3, r3, #8
1000e28c:	4313      	orrs	r3, r2
1000e28e:	7971      	ldrb	r1, [r6, #5]
1000e290:	7932      	ldrb	r2, [r6, #4]
1000e292:	70a8      	strb	r0, [r5, #2]
1000e294:	4871      	ldr	r0, [pc, #452]	; (1000e45c <at_ble_event_get+0x304>)
1000e296:	802b      	strh	r3, [r5, #0]
1000e298:	4283      	cmp	r3, r0
1000e29a:	d806      	bhi.n	1000e2aa <at_ble_event_get+0x152>
1000e29c:	4a70      	ldr	r2, [pc, #448]	; (1000e460 <at_ble_event_get+0x308>)
1000e29e:	4293      	cmp	r3, r2
1000e2a0:	d20b      	bcs.n	1000e2ba <at_ble_event_get+0x162>
1000e2a2:	4a70      	ldr	r2, [pc, #448]	; (1000e464 <at_ble_event_get+0x30c>)
1000e2a4:	4293      	cmp	r3, r2
1000e2a6:	d008      	beq.n	1000e2ba <at_ble_event_get+0x162>
1000e2a8:	e009      	b.n	1000e2be <at_ble_event_get+0x166>
1000e2aa:	486f      	ldr	r0, [pc, #444]	; (1000e468 <at_ble_event_get+0x310>)
1000e2ac:	4283      	cmp	r3, r0
1000e2ae:	d106      	bne.n	1000e2be <at_ble_event_get+0x166>
1000e2b0:	020b      	lsls	r3, r1, #8
1000e2b2:	4313      	orrs	r3, r2
1000e2b4:	80ab      	strh	r3, [r5, #4]
1000e2b6:	2337      	movs	r3, #55	; 0x37
1000e2b8:	e002      	b.n	1000e2c0 <at_ble_event_get+0x168>
1000e2ba:	2336      	movs	r3, #54	; 0x36
1000e2bc:	e000      	b.n	1000e2c0 <at_ble_event_get+0x168>
1000e2be:	2300      	movs	r3, #0
1000e2c0:	9a03      	ldr	r2, [sp, #12]
1000e2c2:	7013      	strb	r3, [r2, #0]
1000e2c4:	e7bd      	b.n	1000e242 <at_ble_event_get+0xea>
1000e2c6:	4b69      	ldr	r3, [pc, #420]	; (1000e46c <at_ble_event_get+0x314>)
1000e2c8:	429c      	cmp	r4, r3
1000e2ca:	d100      	bne.n	1000e2ce <at_ble_event_get+0x176>
1000e2cc:	e144      	b.n	1000e558 <at_ble_event_get+0x400>
1000e2ce:	d865      	bhi.n	1000e39c <at_ble_event_get+0x244>
1000e2d0:	4b67      	ldr	r3, [pc, #412]	; (1000e470 <at_ble_event_get+0x318>)
1000e2d2:	429c      	cmp	r4, r3
1000e2d4:	d100      	bne.n	1000e2d8 <at_ble_event_get+0x180>
1000e2d6:	e1d5      	b.n	1000e684 <at_ble_event_get+0x52c>
1000e2d8:	d82f      	bhi.n	1000e33a <at_ble_event_get+0x1e2>
1000e2da:	4b66      	ldr	r3, [pc, #408]	; (1000e474 <at_ble_event_get+0x31c>)
1000e2dc:	429c      	cmp	r4, r3
1000e2de:	d100      	bne.n	1000e2e2 <at_ble_event_get+0x18a>
1000e2e0:	e1e0      	b.n	1000e6a4 <at_ble_event_get+0x54c>
1000e2e2:	d813      	bhi.n	1000e30c <at_ble_event_get+0x1b4>
1000e2e4:	4b64      	ldr	r3, [pc, #400]	; (1000e478 <at_ble_event_get+0x320>)
1000e2e6:	429c      	cmp	r4, r3
1000e2e8:	d100      	bne.n	1000e2ec <at_ble_event_get+0x194>
1000e2ea:	e1a3      	b.n	1000e634 <at_ble_event_get+0x4dc>
1000e2ec:	d804      	bhi.n	1000e2f8 <at_ble_event_get+0x1a0>
1000e2ee:	2638      	movs	r6, #56	; 0x38
1000e2f0:	42b4      	cmp	r4, r6
1000e2f2:	d100      	bne.n	1000e2f6 <at_ble_event_get+0x19e>
1000e2f4:	e225      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e2f6:	e117      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e2f8:	4b60      	ldr	r3, [pc, #384]	; (1000e47c <at_ble_event_get+0x324>)
1000e2fa:	429c      	cmp	r4, r3
1000e2fc:	d100      	bne.n	1000e300 <at_ble_event_get+0x1a8>
1000e2fe:	e19f      	b.n	1000e640 <at_ble_event_get+0x4e8>
1000e300:	33fe      	adds	r3, #254	; 0xfe
1000e302:	33ff      	adds	r3, #255	; 0xff
1000e304:	429c      	cmp	r4, r3
1000e306:	d100      	bne.n	1000e30a <at_ble_event_get+0x1b2>
1000e308:	e1d3      	b.n	1000e6b2 <at_ble_event_get+0x55a>
1000e30a:	e10d      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e30c:	4b5c      	ldr	r3, [pc, #368]	; (1000e480 <at_ble_event_get+0x328>)
1000e30e:	429c      	cmp	r4, r3
1000e310:	d100      	bne.n	1000e314 <at_ble_event_get+0x1bc>
1000e312:	e1a9      	b.n	1000e668 <at_ble_event_get+0x510>
1000e314:	d808      	bhi.n	1000e328 <at_ble_event_get+0x1d0>
1000e316:	4b5b      	ldr	r3, [pc, #364]	; (1000e484 <at_ble_event_get+0x32c>)
1000e318:	429c      	cmp	r4, r3
1000e31a:	d100      	bne.n	1000e31e <at_ble_event_get+0x1c6>
1000e31c:	e196      	b.n	1000e64c <at_ble_event_get+0x4f4>
1000e31e:	4b5a      	ldr	r3, [pc, #360]	; (1000e488 <at_ble_event_get+0x330>)
1000e320:	429c      	cmp	r4, r3
1000e322:	d100      	bne.n	1000e326 <at_ble_event_get+0x1ce>
1000e324:	e199      	b.n	1000e65a <at_ble_event_get+0x502>
1000e326:	e0ff      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e328:	4b58      	ldr	r3, [pc, #352]	; (1000e48c <at_ble_event_get+0x334>)
1000e32a:	429c      	cmp	r4, r3
1000e32c:	d100      	bne.n	1000e330 <at_ble_event_get+0x1d8>
1000e32e:	e1a2      	b.n	1000e676 <at_ble_event_get+0x51e>
1000e330:	4b57      	ldr	r3, [pc, #348]	; (1000e490 <at_ble_event_get+0x338>)
1000e332:	429c      	cmp	r4, r3
1000e334:	d100      	bne.n	1000e338 <at_ble_event_get+0x1e0>
1000e336:	e1d4      	b.n	1000e6e2 <at_ble_event_get+0x58a>
1000e338:	e0f6      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e33a:	4b56      	ldr	r3, [pc, #344]	; (1000e494 <at_ble_event_get+0x33c>)
1000e33c:	429c      	cmp	r4, r3
1000e33e:	d100      	bne.n	1000e342 <at_ble_event_get+0x1ea>
1000e340:	e1c8      	b.n	1000e6d4 <at_ble_event_get+0x57c>
1000e342:	d812      	bhi.n	1000e36a <at_ble_event_get+0x212>
1000e344:	4b54      	ldr	r3, [pc, #336]	; (1000e498 <at_ble_event_get+0x340>)
1000e346:	429c      	cmp	r4, r3
1000e348:	d100      	bne.n	1000e34c <at_ble_event_get+0x1f4>
1000e34a:	e1d1      	b.n	1000e6f0 <at_ble_event_get+0x598>
1000e34c:	d804      	bhi.n	1000e358 <at_ble_event_get+0x200>
1000e34e:	4b53      	ldr	r3, [pc, #332]	; (1000e49c <at_ble_event_get+0x344>)
1000e350:	429c      	cmp	r4, r3
1000e352:	d100      	bne.n	1000e356 <at_ble_event_get+0x1fe>
1000e354:	e19b      	b.n	1000e68e <at_ble_event_get+0x536>
1000e356:	e0e7      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e358:	4b51      	ldr	r3, [pc, #324]	; (1000e4a0 <at_ble_event_get+0x348>)
1000e35a:	429c      	cmp	r4, r3
1000e35c:	d100      	bne.n	1000e360 <at_ble_event_get+0x208>
1000e35e:	e1ad      	b.n	1000e6bc <at_ble_event_get+0x564>
1000e360:	4b50      	ldr	r3, [pc, #320]	; (1000e4a4 <at_ble_event_get+0x34c>)
1000e362:	429c      	cmp	r4, r3
1000e364:	d100      	bne.n	1000e368 <at_ble_event_get+0x210>
1000e366:	e1b0      	b.n	1000e6ca <at_ble_event_get+0x572>
1000e368:	e0de      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e36a:	4b4f      	ldr	r3, [pc, #316]	; (1000e4a8 <at_ble_event_get+0x350>)
1000e36c:	429c      	cmp	r4, r3
1000e36e:	d100      	bne.n	1000e372 <at_ble_event_get+0x21a>
1000e370:	e0e0      	b.n	1000e534 <at_ble_event_get+0x3dc>
1000e372:	d809      	bhi.n	1000e388 <at_ble_event_get+0x230>
1000e374:	3b08      	subs	r3, #8
1000e376:	429c      	cmp	r4, r3
1000e378:	d100      	bne.n	1000e37c <at_ble_event_get+0x224>
1000e37a:	e0d7      	b.n	1000e52c <at_ble_event_get+0x3d4>
1000e37c:	4b4b      	ldr	r3, [pc, #300]	; (1000e4ac <at_ble_event_get+0x354>)
1000e37e:	2639      	movs	r6, #57	; 0x39
1000e380:	429c      	cmp	r4, r3
1000e382:	d100      	bne.n	1000e386 <at_ble_event_get+0x22e>
1000e384:	e1dd      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e386:	e0cf      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e388:	23d1      	movs	r3, #209	; 0xd1
1000e38a:	011b      	lsls	r3, r3, #4
1000e38c:	429c      	cmp	r4, r3
1000e38e:	d100      	bne.n	1000e392 <at_ble_event_get+0x23a>
1000e390:	e0d6      	b.n	1000e540 <at_ble_event_get+0x3e8>
1000e392:	4b47      	ldr	r3, [pc, #284]	; (1000e4b0 <at_ble_event_get+0x358>)
1000e394:	429c      	cmp	r4, r3
1000e396:	d100      	bne.n	1000e39a <at_ble_event_get+0x242>
1000e398:	e0d8      	b.n	1000e54c <at_ble_event_get+0x3f4>
1000e39a:	e0c5      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e39c:	4b45      	ldr	r3, [pc, #276]	; (1000e4b4 <at_ble_event_get+0x35c>)
1000e39e:	429c      	cmp	r4, r3
1000e3a0:	d100      	bne.n	1000e3a4 <at_ble_event_get+0x24c>
1000e3a2:	e117      	b.n	1000e5d4 <at_ble_event_get+0x47c>
1000e3a4:	d82e      	bhi.n	1000e404 <at_ble_event_get+0x2ac>
1000e3a6:	4b44      	ldr	r3, [pc, #272]	; (1000e4b8 <at_ble_event_get+0x360>)
1000e3a8:	429c      	cmp	r4, r3
1000e3aa:	d100      	bne.n	1000e3ae <at_ble_event_get+0x256>
1000e3ac:	e13d      	b.n	1000e62a <at_ble_event_get+0x4d2>
1000e3ae:	d812      	bhi.n	1000e3d6 <at_ble_event_get+0x27e>
1000e3b0:	4b42      	ldr	r3, [pc, #264]	; (1000e4bc <at_ble_event_get+0x364>)
1000e3b2:	429c      	cmp	r4, r3
1000e3b4:	d100      	bne.n	1000e3b8 <at_ble_event_get+0x260>
1000e3b6:	e0e8      	b.n	1000e58a <at_ble_event_get+0x432>
1000e3b8:	d804      	bhi.n	1000e3c4 <at_ble_event_get+0x26c>
1000e3ba:	3b03      	subs	r3, #3
1000e3bc:	429c      	cmp	r4, r3
1000e3be:	d100      	bne.n	1000e3c2 <at_ble_event_get+0x26a>
1000e3c0:	e0d0      	b.n	1000e564 <at_ble_event_get+0x40c>
1000e3c2:	e0b1      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e3c4:	4b3e      	ldr	r3, [pc, #248]	; (1000e4c0 <at_ble_event_get+0x368>)
1000e3c6:	429c      	cmp	r4, r3
1000e3c8:	d100      	bne.n	1000e3cc <at_ble_event_get+0x274>
1000e3ca:	e0d0      	b.n	1000e56e <at_ble_event_get+0x416>
1000e3cc:	4b3d      	ldr	r3, [pc, #244]	; (1000e4c4 <at_ble_event_get+0x36c>)
1000e3ce:	429c      	cmp	r4, r3
1000e3d0:	d100      	bne.n	1000e3d4 <at_ble_event_get+0x27c>
1000e3d2:	e0f9      	b.n	1000e5c8 <at_ble_event_get+0x470>
1000e3d4:	e0a8      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e3d6:	4b3c      	ldr	r3, [pc, #240]	; (1000e4c8 <at_ble_event_get+0x370>)
1000e3d8:	429c      	cmp	r4, r3
1000e3da:	d100      	bne.n	1000e3de <at_ble_event_get+0x286>
1000e3dc:	e0db      	b.n	1000e596 <at_ble_event_get+0x43e>
1000e3de:	d808      	bhi.n	1000e3f2 <at_ble_event_get+0x29a>
1000e3e0:	4b3a      	ldr	r3, [pc, #232]	; (1000e4cc <at_ble_event_get+0x374>)
1000e3e2:	429c      	cmp	r4, r3
1000e3e4:	d100      	bne.n	1000e3e8 <at_ble_event_get+0x290>
1000e3e6:	e11b      	b.n	1000e620 <at_ble_event_get+0x4c8>
1000e3e8:	4b39      	ldr	r3, [pc, #228]	; (1000e4d0 <at_ble_event_get+0x378>)
1000e3ea:	429c      	cmp	r4, r3
1000e3ec:	d100      	bne.n	1000e3f0 <at_ble_event_get+0x298>
1000e3ee:	e0d8      	b.n	1000e5a2 <at_ble_event_get+0x44a>
1000e3f0:	e09a      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e3f2:	4b38      	ldr	r3, [pc, #224]	; (1000e4d4 <at_ble_event_get+0x37c>)
1000e3f4:	429c      	cmp	r4, r3
1000e3f6:	d100      	bne.n	1000e3fa <at_ble_event_get+0x2a2>
1000e3f8:	e0d8      	b.n	1000e5ac <at_ble_event_get+0x454>
1000e3fa:	4b37      	ldr	r3, [pc, #220]	; (1000e4d8 <at_ble_event_get+0x380>)
1000e3fc:	429c      	cmp	r4, r3
1000e3fe:	d100      	bne.n	1000e402 <at_ble_event_get+0x2aa>
1000e400:	e0db      	b.n	1000e5ba <at_ble_event_get+0x462>
1000e402:	e091      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e404:	4b35      	ldr	r3, [pc, #212]	; (1000e4dc <at_ble_event_get+0x384>)
1000e406:	429c      	cmp	r4, r3
1000e408:	d100      	bne.n	1000e40c <at_ble_event_get+0x2b4>
1000e40a:	e0f7      	b.n	1000e5fc <at_ble_event_get+0x4a4>
1000e40c:	d876      	bhi.n	1000e4fc <at_ble_event_get+0x3a4>
1000e40e:	4b34      	ldr	r3, [pc, #208]	; (1000e4e0 <at_ble_event_get+0x388>)
1000e410:	429c      	cmp	r4, r3
1000e412:	d100      	bne.n	1000e416 <at_ble_event_get+0x2be>
1000e414:	e0f8      	b.n	1000e608 <at_ble_event_get+0x4b0>
1000e416:	d869      	bhi.n	1000e4ec <at_ble_event_get+0x394>
1000e418:	4b32      	ldr	r3, [pc, #200]	; (1000e4e4 <at_ble_event_get+0x38c>)
1000e41a:	429c      	cmp	r4, r3
1000e41c:	d100      	bne.n	1000e420 <at_ble_event_get+0x2c8>
1000e41e:	e0e0      	b.n	1000e5e2 <at_ble_event_get+0x48a>
1000e420:	4b31      	ldr	r3, [pc, #196]	; (1000e4e8 <at_ble_event_get+0x390>)
1000e422:	429c      	cmp	r4, r3
1000e424:	d100      	bne.n	1000e428 <at_ble_event_get+0x2d0>
1000e426:	e0a9      	b.n	1000e57c <at_ble_event_get+0x424>
1000e428:	e07e      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e42a:	46c0      	nop			; (mov r8, r8)
1000e42c:	1000f305 	.word	0x1000f305
1000e430:	1001cef4 	.word	0x1001cef4
1000e434:	1000c3ed 	.word	0x1000c3ed
1000e438:	1001cef8 	.word	0x1001cef8
1000e43c:	1001cef0 	.word	0x1001cef0
1000e440:	1001cee0 	.word	0x1001cee0
1000e444:	1000e041 	.word	0x1000e041
1000e448:	1001810b 	.word	0x1001810b
1000e44c:	0000ffff 	.word	0x0000ffff
1000e450:	0000fffe 	.word	0x0000fffe
1000e454:	1000c67d 	.word	0x1000c67d
1000e458:	1000f307 	.word	0x1000f307
1000e45c:	0000201e 	.word	0x0000201e
1000e460:	0000201d 	.word	0x0000201d
1000e464:	00000c03 	.word	0x00000c03
1000e468:	0000201f 	.word	0x0000201f
1000e46c:	00000d1c 	.word	0x00000d1c
1000e470:	00000c0c 	.word	0x00000c0c
1000e474:	00000c02 	.word	0x00000c02
1000e478:	00000a02 	.word	0x00000a02
1000e47c:	00000a03 	.word	0x00000a03
1000e480:	00000c06 	.word	0x00000c06
1000e484:	00000c04 	.word	0x00000c04
1000e488:	00000c05 	.word	0x00000c05
1000e48c:	00000c07 	.word	0x00000c07
1000e490:	00000c09 	.word	0x00000c09
1000e494:	00000c17 	.word	0x00000c17
1000e498:	00000c12 	.word	0x00000c12
1000e49c:	00000c0d 	.word	0x00000c0d
1000e4a0:	00000c13 	.word	0x00000c13
1000e4a4:	00000c15 	.word	0x00000c15
1000e4a8:	00000d08 	.word	0x00000d08
1000e4ac:	00000d01 	.word	0x00000d01
1000e4b0:	00000d15 	.word	0x00000d15
1000e4b4:	00000e1b 	.word	0x00000e1b
1000e4b8:	00000e0f 	.word	0x00000e0f
1000e4bc:	00000e03 	.word	0x00000e03
1000e4c0:	00000e06 	.word	0x00000e06
1000e4c4:	00000e0a 	.word	0x00000e0a
1000e4c8:	00000e15 	.word	0x00000e15
1000e4cc:	00000e11 	.word	0x00000e11
1000e4d0:	00000e13 	.word	0x00000e13
1000e4d4:	00000e17 	.word	0x00000e17
1000e4d8:	00000e19 	.word	0x00000e19
1000e4dc:	00000e27 	.word	0x00000e27
1000e4e0:	00000e21 	.word	0x00000e21
1000e4e4:	00000e1c 	.word	0x00000e1c
1000e4e8:	00000e1d 	.word	0x00000e1d
1000e4ec:	4b9f      	ldr	r3, [pc, #636]	; (1000e76c <at_ble_event_get+0x614>)
1000e4ee:	429c      	cmp	r4, r3
1000e4f0:	d07e      	beq.n	1000e5f0 <at_ble_event_get+0x498>
1000e4f2:	4b9f      	ldr	r3, [pc, #636]	; (1000e770 <at_ble_event_get+0x618>)
1000e4f4:	429c      	cmp	r4, r3
1000e4f6:	d100      	bne.n	1000e4fa <at_ble_event_get+0x3a2>
1000e4f8:	e08c      	b.n	1000e614 <at_ble_event_get+0x4bc>
1000e4fa:	e015      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e4fc:	4b9d      	ldr	r3, [pc, #628]	; (1000e774 <at_ble_event_get+0x61c>)
1000e4fe:	429c      	cmp	r4, r3
1000e500:	d100      	bne.n	1000e504 <at_ble_event_get+0x3ac>
1000e502:	e10a      	b.n	1000e71a <at_ble_event_get+0x5c2>
1000e504:	d808      	bhi.n	1000e518 <at_ble_event_get+0x3c0>
1000e506:	4b9c      	ldr	r3, [pc, #624]	; (1000e778 <at_ble_event_get+0x620>)
1000e508:	429c      	cmp	r4, r3
1000e50a:	d100      	bne.n	1000e50e <at_ble_event_get+0x3b6>
1000e50c:	e0f7      	b.n	1000e6fe <at_ble_event_get+0x5a6>
1000e50e:	4b9b      	ldr	r3, [pc, #620]	; (1000e77c <at_ble_event_get+0x624>)
1000e510:	429c      	cmp	r4, r3
1000e512:	d100      	bne.n	1000e516 <at_ble_event_get+0x3be>
1000e514:	e0fa      	b.n	1000e70c <at_ble_event_get+0x5b4>
1000e516:	e007      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e518:	4b99      	ldr	r3, [pc, #612]	; (1000e780 <at_ble_event_get+0x628>)
1000e51a:	429c      	cmp	r4, r3
1000e51c:	d100      	bne.n	1000e520 <at_ble_event_get+0x3c8>
1000e51e:	e103      	b.n	1000e728 <at_ble_event_get+0x5d0>
1000e520:	4b98      	ldr	r3, [pc, #608]	; (1000e784 <at_ble_event_get+0x62c>)
1000e522:	429c      	cmp	r4, r3
1000e524:	d100      	bne.n	1000e528 <at_ble_event_get+0x3d0>
1000e526:	e106      	b.n	1000e736 <at_ble_event_get+0x5de>
1000e528:	2600      	movs	r6, #0
1000e52a:	e10a      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e52c:	1c30      	adds	r0, r6, #0
1000e52e:	1c29      	adds	r1, r5, #0
1000e530:	4b95      	ldr	r3, [pc, #596]	; (1000e788 <at_ble_event_get+0x630>)
1000e532:	e014      	b.n	1000e55e <at_ble_event_get+0x406>
1000e534:	1c30      	adds	r0, r6, #0
1000e536:	1c29      	adds	r1, r5, #0
1000e538:	4b94      	ldr	r3, [pc, #592]	; (1000e78c <at_ble_event_get+0x634>)
1000e53a:	4798      	blx	r3
1000e53c:	2604      	movs	r6, #4
1000e53e:	e100      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e540:	1c30      	adds	r0, r6, #0
1000e542:	1c29      	adds	r1, r5, #0
1000e544:	4b92      	ldr	r3, [pc, #584]	; (1000e790 <at_ble_event_get+0x638>)
1000e546:	4798      	blx	r3
1000e548:	2601      	movs	r6, #1
1000e54a:	e0fa      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e54c:	1c30      	adds	r0, r6, #0
1000e54e:	1c29      	adds	r1, r5, #0
1000e550:	4b90      	ldr	r3, [pc, #576]	; (1000e794 <at_ble_event_get+0x63c>)
1000e552:	4798      	blx	r3
1000e554:	260f      	movs	r6, #15
1000e556:	e0f4      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e558:	1c30      	adds	r0, r6, #0
1000e55a:	1c29      	adds	r1, r5, #0
1000e55c:	4b8e      	ldr	r3, [pc, #568]	; (1000e798 <at_ble_event_get+0x640>)
1000e55e:	4798      	blx	r3
1000e560:	1c06      	adds	r6, r0, #0
1000e562:	e0ee      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e564:	9801      	ldr	r0, [sp, #4]
1000e566:	1c31      	adds	r1, r6, #0
1000e568:	1c2a      	adds	r2, r5, #0
1000e56a:	4b8c      	ldr	r3, [pc, #560]	; (1000e79c <at_ble_event_get+0x644>)
1000e56c:	e017      	b.n	1000e59e <at_ble_event_get+0x446>
1000e56e:	1c31      	adds	r1, r6, #0
1000e570:	9801      	ldr	r0, [sp, #4]
1000e572:	1c2a      	adds	r2, r5, #0
1000e574:	4b8a      	ldr	r3, [pc, #552]	; (1000e7a0 <at_ble_event_get+0x648>)
1000e576:	4798      	blx	r3
1000e578:	2611      	movs	r6, #17
1000e57a:	e0e2      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e57c:	1c31      	adds	r1, r6, #0
1000e57e:	9801      	ldr	r0, [sp, #4]
1000e580:	1c2a      	adds	r2, r5, #0
1000e582:	4b88      	ldr	r3, [pc, #544]	; (1000e7a4 <at_ble_event_get+0x64c>)
1000e584:	4798      	blx	r3
1000e586:	2612      	movs	r6, #18
1000e588:	e0db      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e58a:	1c30      	adds	r0, r6, #0
1000e58c:	1c29      	adds	r1, r5, #0
1000e58e:	4b86      	ldr	r3, [pc, #536]	; (1000e7a8 <at_ble_event_get+0x650>)
1000e590:	4798      	blx	r3
1000e592:	2606      	movs	r6, #6
1000e594:	e0d5      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e596:	1c31      	adds	r1, r6, #0
1000e598:	1c2a      	adds	r2, r5, #0
1000e59a:	9801      	ldr	r0, [sp, #4]
1000e59c:	4b83      	ldr	r3, [pc, #524]	; (1000e7ac <at_ble_event_get+0x654>)
1000e59e:	4798      	blx	r3
1000e5a0:	e7de      	b.n	1000e560 <at_ble_event_get+0x408>
1000e5a2:	9801      	ldr	r0, [sp, #4]
1000e5a4:	1c31      	adds	r1, r6, #0
1000e5a6:	1c2a      	adds	r2, r5, #0
1000e5a8:	4b81      	ldr	r3, [pc, #516]	; (1000e7b0 <at_ble_event_get+0x658>)
1000e5aa:	e7f8      	b.n	1000e59e <at_ble_event_get+0x446>
1000e5ac:	1c31      	adds	r1, r6, #0
1000e5ae:	9801      	ldr	r0, [sp, #4]
1000e5b0:	1c2a      	adds	r2, r5, #0
1000e5b2:	4b80      	ldr	r3, [pc, #512]	; (1000e7b4 <at_ble_event_get+0x65c>)
1000e5b4:	4798      	blx	r3
1000e5b6:	260d      	movs	r6, #13
1000e5b8:	e0c3      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e5ba:	1c31      	adds	r1, r6, #0
1000e5bc:	9801      	ldr	r0, [sp, #4]
1000e5be:	1c2a      	adds	r2, r5, #0
1000e5c0:	4b7d      	ldr	r3, [pc, #500]	; (1000e7b8 <at_ble_event_get+0x660>)
1000e5c2:	4798      	blx	r3
1000e5c4:	260e      	movs	r6, #14
1000e5c6:	e0bc      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e5c8:	9801      	ldr	r0, [sp, #4]
1000e5ca:	1c31      	adds	r1, r6, #0
1000e5cc:	1c2a      	adds	r2, r5, #0
1000e5ce:	4b7b      	ldr	r3, [pc, #492]	; (1000e7bc <at_ble_event_get+0x664>)
1000e5d0:	4798      	blx	r3
1000e5d2:	e084      	b.n	1000e6de <at_ble_event_get+0x586>
1000e5d4:	1c31      	adds	r1, r6, #0
1000e5d6:	9801      	ldr	r0, [sp, #4]
1000e5d8:	1c2a      	adds	r2, r5, #0
1000e5da:	4b79      	ldr	r3, [pc, #484]	; (1000e7c0 <at_ble_event_get+0x668>)
1000e5dc:	4798      	blx	r3
1000e5de:	260b      	movs	r6, #11
1000e5e0:	e0af      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e5e2:	1c31      	adds	r1, r6, #0
1000e5e4:	9801      	ldr	r0, [sp, #4]
1000e5e6:	1c2a      	adds	r2, r5, #0
1000e5e8:	4b76      	ldr	r3, [pc, #472]	; (1000e7c4 <at_ble_event_get+0x66c>)
1000e5ea:	4798      	blx	r3
1000e5ec:	2610      	movs	r6, #16
1000e5ee:	e0a8      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e5f0:	1c30      	adds	r0, r6, #0
1000e5f2:	1c29      	adds	r1, r5, #0
1000e5f4:	4b74      	ldr	r3, [pc, #464]	; (1000e7c8 <at_ble_event_get+0x670>)
1000e5f6:	4798      	blx	r3
1000e5f8:	2628      	movs	r6, #40	; 0x28
1000e5fa:	e0a2      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e5fc:	1c30      	adds	r0, r6, #0
1000e5fe:	1c29      	adds	r1, r5, #0
1000e600:	4b72      	ldr	r3, [pc, #456]	; (1000e7cc <at_ble_event_get+0x674>)
1000e602:	4798      	blx	r3
1000e604:	2629      	movs	r6, #41	; 0x29
1000e606:	e09c      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e608:	1c30      	adds	r0, r6, #0
1000e60a:	1c29      	adds	r1, r5, #0
1000e60c:	4b70      	ldr	r3, [pc, #448]	; (1000e7d0 <at_ble_event_get+0x678>)
1000e60e:	4798      	blx	r3
1000e610:	2627      	movs	r6, #39	; 0x27
1000e612:	e096      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e614:	1c30      	adds	r0, r6, #0
1000e616:	1c29      	adds	r1, r5, #0
1000e618:	4b6e      	ldr	r3, [pc, #440]	; (1000e7d4 <at_ble_event_get+0x67c>)
1000e61a:	4798      	blx	r3
1000e61c:	262a      	movs	r6, #42	; 0x2a
1000e61e:	e090      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e620:	9801      	ldr	r0, [sp, #4]
1000e622:	1c31      	adds	r1, r6, #0
1000e624:	1c2a      	adds	r2, r5, #0
1000e626:	4b6c      	ldr	r3, [pc, #432]	; (1000e7d8 <at_ble_event_get+0x680>)
1000e628:	e7b9      	b.n	1000e59e <at_ble_event_get+0x446>
1000e62a:	9801      	ldr	r0, [sp, #4]
1000e62c:	1c31      	adds	r1, r6, #0
1000e62e:	1c2a      	adds	r2, r5, #0
1000e630:	4b6a      	ldr	r3, [pc, #424]	; (1000e7dc <at_ble_event_get+0x684>)
1000e632:	e7b4      	b.n	1000e59e <at_ble_event_get+0x446>
1000e634:	1c30      	adds	r0, r6, #0
1000e636:	1c29      	adds	r1, r5, #0
1000e638:	4b69      	ldr	r3, [pc, #420]	; (1000e7e0 <at_ble_event_get+0x688>)
1000e63a:	4798      	blx	r3
1000e63c:	262b      	movs	r6, #43	; 0x2b
1000e63e:	e080      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e640:	1c30      	adds	r0, r6, #0
1000e642:	1c29      	adds	r1, r5, #0
1000e644:	4b67      	ldr	r3, [pc, #412]	; (1000e7e4 <at_ble_event_get+0x68c>)
1000e646:	4798      	blx	r3
1000e648:	262c      	movs	r6, #44	; 0x2c
1000e64a:	e07a      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e64c:	1c31      	adds	r1, r6, #0
1000e64e:	9801      	ldr	r0, [sp, #4]
1000e650:	1c2a      	adds	r2, r5, #0
1000e652:	4b65      	ldr	r3, [pc, #404]	; (1000e7e8 <at_ble_event_get+0x690>)
1000e654:	4798      	blx	r3
1000e656:	2613      	movs	r6, #19
1000e658:	e073      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e65a:	1c31      	adds	r1, r6, #0
1000e65c:	9801      	ldr	r0, [sp, #4]
1000e65e:	1c2a      	adds	r2, r5, #0
1000e660:	4b62      	ldr	r3, [pc, #392]	; (1000e7ec <at_ble_event_get+0x694>)
1000e662:	4798      	blx	r3
1000e664:	2614      	movs	r6, #20
1000e666:	e06c      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e668:	1c31      	adds	r1, r6, #0
1000e66a:	9801      	ldr	r0, [sp, #4]
1000e66c:	1c2a      	adds	r2, r5, #0
1000e66e:	4b60      	ldr	r3, [pc, #384]	; (1000e7f0 <at_ble_event_get+0x698>)
1000e670:	4798      	blx	r3
1000e672:	2615      	movs	r6, #21
1000e674:	e065      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e676:	1c31      	adds	r1, r6, #0
1000e678:	9801      	ldr	r0, [sp, #4]
1000e67a:	1c2a      	adds	r2, r5, #0
1000e67c:	4b5d      	ldr	r3, [pc, #372]	; (1000e7f4 <at_ble_event_get+0x69c>)
1000e67e:	4798      	blx	r3
1000e680:	2616      	movs	r6, #22
1000e682:	e05e      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e684:	9801      	ldr	r0, [sp, #4]
1000e686:	1c31      	adds	r1, r6, #0
1000e688:	1c2a      	adds	r2, r5, #0
1000e68a:	4b5b      	ldr	r3, [pc, #364]	; (1000e7f8 <at_ble_event_get+0x6a0>)
1000e68c:	e787      	b.n	1000e59e <at_ble_event_get+0x446>
1000e68e:	1c31      	adds	r1, r6, #0
1000e690:	9801      	ldr	r0, [sp, #4]
1000e692:	1c2a      	adds	r2, r5, #0
1000e694:	4b58      	ldr	r3, [pc, #352]	; (1000e7f8 <at_ble_event_get+0x6a0>)
1000e696:	4798      	blx	r3
1000e698:	88a9      	ldrh	r1, [r5, #4]
1000e69a:	1c06      	adds	r6, r0, #0
1000e69c:	4b57      	ldr	r3, [pc, #348]	; (1000e7fc <at_ble_event_get+0x6a4>)
1000e69e:	8828      	ldrh	r0, [r5, #0]
1000e6a0:	4798      	blx	r3
1000e6a2:	e04e      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e6a4:	1c31      	adds	r1, r6, #0
1000e6a6:	9801      	ldr	r0, [sp, #4]
1000e6a8:	1c2a      	adds	r2, r5, #0
1000e6aa:	4b55      	ldr	r3, [pc, #340]	; (1000e800 <at_ble_event_get+0x6a8>)
1000e6ac:	4798      	blx	r3
1000e6ae:	2623      	movs	r6, #35	; 0x23
1000e6b0:	e047      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e6b2:	9801      	ldr	r0, [sp, #4]
1000e6b4:	1c31      	adds	r1, r6, #0
1000e6b6:	1c2a      	adds	r2, r5, #0
1000e6b8:	4b52      	ldr	r3, [pc, #328]	; (1000e804 <at_ble_event_get+0x6ac>)
1000e6ba:	e770      	b.n	1000e59e <at_ble_event_get+0x446>
1000e6bc:	9b01      	ldr	r3, [sp, #4]
1000e6be:	1c30      	adds	r0, r6, #0
1000e6c0:	0a1f      	lsrs	r7, r3, #8
1000e6c2:	802f      	strh	r7, [r5, #0]
1000e6c4:	1c29      	adds	r1, r5, #0
1000e6c6:	4b50      	ldr	r3, [pc, #320]	; (1000e808 <at_ble_event_get+0x6b0>)
1000e6c8:	e749      	b.n	1000e55e <at_ble_event_get+0x406>
1000e6ca:	9801      	ldr	r0, [sp, #4]
1000e6cc:	1c31      	adds	r1, r6, #0
1000e6ce:	1c2a      	adds	r2, r5, #0
1000e6d0:	4b4e      	ldr	r3, [pc, #312]	; (1000e80c <at_ble_event_get+0x6b4>)
1000e6d2:	e764      	b.n	1000e59e <at_ble_event_get+0x446>
1000e6d4:	1c30      	adds	r0, r6, #0
1000e6d6:	1c29      	adds	r1, r5, #0
1000e6d8:	9a01      	ldr	r2, [sp, #4]
1000e6da:	4b4d      	ldr	r3, [pc, #308]	; (1000e810 <at_ble_event_get+0x6b8>)
1000e6dc:	4798      	blx	r3
1000e6de:	263b      	movs	r6, #59	; 0x3b
1000e6e0:	e02f      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e6e2:	1c31      	adds	r1, r6, #0
1000e6e4:	9801      	ldr	r0, [sp, #4]
1000e6e6:	1c2a      	adds	r2, r5, #0
1000e6e8:	4b4a      	ldr	r3, [pc, #296]	; (1000e814 <at_ble_event_get+0x6bc>)
1000e6ea:	4798      	blx	r3
1000e6ec:	2618      	movs	r6, #24
1000e6ee:	e028      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e6f0:	1c31      	adds	r1, r6, #0
1000e6f2:	9801      	ldr	r0, [sp, #4]
1000e6f4:	1c2a      	adds	r2, r5, #0
1000e6f6:	4b48      	ldr	r3, [pc, #288]	; (1000e818 <at_ble_event_get+0x6c0>)
1000e6f8:	4798      	blx	r3
1000e6fa:	2620      	movs	r6, #32
1000e6fc:	e021      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e6fe:	1c31      	adds	r1, r6, #0
1000e700:	9801      	ldr	r0, [sp, #4]
1000e702:	1c2a      	adds	r2, r5, #0
1000e704:	4b45      	ldr	r3, [pc, #276]	; (1000e81c <at_ble_event_get+0x6c4>)
1000e706:	4798      	blx	r3
1000e708:	2633      	movs	r6, #51	; 0x33
1000e70a:	e01a      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e70c:	1c31      	adds	r1, r6, #0
1000e70e:	9801      	ldr	r0, [sp, #4]
1000e710:	1c2a      	adds	r2, r5, #0
1000e712:	4b43      	ldr	r3, [pc, #268]	; (1000e820 <at_ble_event_get+0x6c8>)
1000e714:	4798      	blx	r3
1000e716:	2630      	movs	r6, #48	; 0x30
1000e718:	e013      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e71a:	1c31      	adds	r1, r6, #0
1000e71c:	9801      	ldr	r0, [sp, #4]
1000e71e:	1c2a      	adds	r2, r5, #0
1000e720:	4b40      	ldr	r3, [pc, #256]	; (1000e824 <at_ble_event_get+0x6cc>)
1000e722:	4798      	blx	r3
1000e724:	2634      	movs	r6, #52	; 0x34
1000e726:	e00c      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e728:	1c31      	adds	r1, r6, #0
1000e72a:	9801      	ldr	r0, [sp, #4]
1000e72c:	1c2a      	adds	r2, r5, #0
1000e72e:	4b3e      	ldr	r3, [pc, #248]	; (1000e828 <at_ble_event_get+0x6d0>)
1000e730:	4798      	blx	r3
1000e732:	2635      	movs	r6, #53	; 0x35
1000e734:	e005      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e736:	1c31      	adds	r1, r6, #0
1000e738:	9801      	ldr	r0, [sp, #4]
1000e73a:	1c2a      	adds	r2, r5, #0
1000e73c:	4b3b      	ldr	r3, [pc, #236]	; (1000e82c <at_ble_event_get+0x6d4>)
1000e73e:	4798      	blx	r3
1000e740:	2632      	movs	r6, #50	; 0x32
1000e742:	9b03      	ldr	r3, [sp, #12]
1000e744:	701e      	strb	r6, [r3, #0]
1000e746:	2300      	movs	r3, #0
1000e748:	9302      	str	r3, [sp, #8]
1000e74a:	e57a      	b.n	1000e242 <at_ble_event_get+0xea>
1000e74c:	23d0      	movs	r3, #208	; 0xd0
1000e74e:	e7fb      	b.n	1000e748 <at_ble_event_get+0x5f0>
1000e750:	9b01      	ldr	r3, [sp, #4]
1000e752:	9e02      	ldr	r6, [sp, #8]
1000e754:	2bbb      	cmp	r3, #187	; 0xbb
1000e756:	d000      	beq.n	1000e75a <at_ble_event_get+0x602>
1000e758:	e6e6      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e75a:	e7f2      	b.n	1000e742 <at_ble_event_get+0x5ea>
1000e75c:	9b02      	ldr	r3, [sp, #8]
1000e75e:	2b00      	cmp	r3, #0
1000e760:	d000      	beq.n	1000e764 <at_ble_event_get+0x60c>
1000e762:	e56e      	b.n	1000e242 <at_ble_event_get+0xea>
1000e764:	e6e0      	b.n	1000e528 <at_ble_event_get+0x3d0>
1000e766:	9802      	ldr	r0, [sp, #8]
1000e768:	b007      	add	sp, #28
1000e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e76c:	00000e22 	.word	0x00000e22
1000e770:	00000e25 	.word	0x00000e25
1000e774:	00001b05 	.word	0x00001b05
1000e778:	00001b01 	.word	0x00001b01
1000e77c:	00001b03 	.word	0x00001b03
1000e780:	00001b06 	.word	0x00001b06
1000e784:	00001b08 	.word	0x00001b08
1000e788:	10010131 	.word	0x10010131
1000e78c:	10010115 	.word	0x10010115
1000e790:	10010279 	.word	0x10010279
1000e794:	10010369 	.word	0x10010369
1000e798:	1001038d 	.word	0x1001038d
1000e79c:	1000f4a9 	.word	0x1000f4a9
1000e7a0:	1000fd29 	.word	0x1000fd29
1000e7a4:	1000fda5 	.word	0x1000fda5
1000e7a8:	1000f761 	.word	0x1000f761
1000e7ac:	1000f7fd 	.word	0x1000f7fd
1000e7b0:	1000f8d5 	.word	0x1000f8d5
1000e7b4:	1000fb5d 	.word	0x1000fb5d
1000e7b8:	1000fbfd 	.word	0x1000fbfd
1000e7bc:	1000fcb5 	.word	0x1000fcb5
1000e7c0:	1000fcdd 	.word	0x1000fcdd
1000e7c4:	1000fcf3 	.word	0x1000fcf3
1000e7c8:	1000fdbd 	.word	0x1000fdbd
1000e7cc:	1000fdeb 	.word	0x1000fdeb
1000e7d0:	1000fe01 	.word	0x1000fe01
1000e7d4:	1000fe2b 	.word	0x1000fe2b
1000e7d8:	1000fc59 	.word	0x1000fc59
1000e7dc:	1000fc83 	.word	0x1000fc83
1000e7e0:	1000eee9 	.word	0x1000eee9
1000e7e4:	1000ef15 	.word	0x1000ef15
1000e7e8:	10010535 	.word	0x10010535
1000e7ec:	10010571 	.word	0x10010571
1000e7f0:	100105b9 	.word	0x100105b9
1000e7f4:	100105fd 	.word	0x100105fd
1000e7f8:	10010631 	.word	0x10010631
1000e7fc:	100104f5 	.word	0x100104f5
1000e800:	100106fd 	.word	0x100106fd
1000e804:	10010685 	.word	0x10010685
1000e808:	1000ee41 	.word	0x1000ee41
1000e80c:	1000eead 	.word	0x1000eead
1000e810:	1000ee71 	.word	0x1000ee71
1000e814:	1001070d 	.word	0x1001070d
1000e818:	1001074d 	.word	0x1001074d
1000e81c:	10010899 	.word	0x10010899
1000e820:	100108a3 	.word	0x100108a3
1000e824:	100108a9 	.word	0x100108a9
1000e828:	100108af 	.word	0x100108af
1000e82c:	100108bb 	.word	0x100108bb

1000e830 <internal_event_flush>:
1000e830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e832:	490e      	ldr	r1, [pc, #56]	; (1000e86c <internal_event_flush+0x3c>)
1000e834:	2400      	movs	r4, #0
1000e836:	680b      	ldr	r3, [r1, #0]
1000e838:	1c0f      	adds	r7, r1, #0
1000e83a:	1c1e      	adds	r6, r3, #0
1000e83c:	4a0c      	ldr	r2, [pc, #48]	; (1000e870 <internal_event_flush+0x40>)
1000e83e:	6815      	ldr	r5, [r2, #0]
1000e840:	9201      	str	r2, [sp, #4]
1000e842:	2b00      	cmp	r3, #0
1000e844:	d00e      	beq.n	1000e864 <internal_event_flush+0x34>
1000e846:	889a      	ldrh	r2, [r3, #4]
1000e848:	6819      	ldr	r1, [r3, #0]
1000e84a:	4282      	cmp	r2, r0
1000e84c:	d107      	bne.n	1000e85e <internal_event_flush+0x2e>
1000e84e:	2c00      	cmp	r4, #0
1000e850:	d001      	beq.n	1000e856 <internal_event_flush+0x26>
1000e852:	6021      	str	r1, [r4, #0]
1000e854:	e000      	b.n	1000e858 <internal_event_flush+0x28>
1000e856:	1c0e      	adds	r6, r1, #0
1000e858:	601d      	str	r5, [r3, #0]
1000e85a:	1c1d      	adds	r5, r3, #0
1000e85c:	1c23      	adds	r3, r4, #0
1000e85e:	1c1c      	adds	r4, r3, #0
1000e860:	1c0b      	adds	r3, r1, #0
1000e862:	e7ee      	b.n	1000e842 <internal_event_flush+0x12>
1000e864:	9b01      	ldr	r3, [sp, #4]
1000e866:	603e      	str	r6, [r7, #0]
1000e868:	601d      	str	r5, [r3, #0]
1000e86a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e86c:	1001cef4 	.word	0x1001cef4
1000e870:	1001cef8 	.word	0x1001cef8

1000e874 <internal_conn_flush>:
1000e874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e876:	4a12      	ldr	r2, [pc, #72]	; (1000e8c0 <internal_conn_flush+0x4c>)
1000e878:	9000      	str	r0, [sp, #0]
1000e87a:	6813      	ldr	r3, [r2, #0]
1000e87c:	4811      	ldr	r0, [pc, #68]	; (1000e8c4 <internal_conn_flush+0x50>)
1000e87e:	1c1f      	adds	r7, r3, #0
1000e880:	2100      	movs	r1, #0
1000e882:	4684      	mov	ip, r0
1000e884:	6804      	ldr	r4, [r0, #0]
1000e886:	9201      	str	r2, [sp, #4]
1000e888:	2b00      	cmp	r3, #0
1000e88a:	d014      	beq.n	1000e8b6 <internal_conn_flush+0x42>
1000e88c:	88d8      	ldrh	r0, [r3, #6]
1000e88e:	9a00      	ldr	r2, [sp, #0]
1000e890:	681d      	ldr	r5, [r3, #0]
1000e892:	0a06      	lsrs	r6, r0, #8
1000e894:	4296      	cmp	r6, r2
1000e896:	d10b      	bne.n	1000e8b0 <internal_conn_flush+0x3c>
1000e898:	26fd      	movs	r6, #253	; 0xfd
1000e89a:	4006      	ands	r6, r0
1000e89c:	2e0c      	cmp	r6, #12
1000e89e:	d107      	bne.n	1000e8b0 <internal_conn_flush+0x3c>
1000e8a0:	2900      	cmp	r1, #0
1000e8a2:	d001      	beq.n	1000e8a8 <internal_conn_flush+0x34>
1000e8a4:	600d      	str	r5, [r1, #0]
1000e8a6:	e000      	b.n	1000e8aa <internal_conn_flush+0x36>
1000e8a8:	1c2f      	adds	r7, r5, #0
1000e8aa:	601c      	str	r4, [r3, #0]
1000e8ac:	1c1c      	adds	r4, r3, #0
1000e8ae:	1c0b      	adds	r3, r1, #0
1000e8b0:	1c19      	adds	r1, r3, #0
1000e8b2:	1c2b      	adds	r3, r5, #0
1000e8b4:	e7e8      	b.n	1000e888 <internal_conn_flush+0x14>
1000e8b6:	9b01      	ldr	r3, [sp, #4]
1000e8b8:	601f      	str	r7, [r3, #0]
1000e8ba:	4663      	mov	r3, ip
1000e8bc:	601c      	str	r4, [r3, #0]
1000e8be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e8c0:	1001cef4 	.word	0x1001cef4
1000e8c4:	1001cef8 	.word	0x1001cef8

1000e8c8 <at_ble_device_name_set>:
1000e8c8:	b530      	push	{r4, r5, lr}
1000e8ca:	23cf      	movs	r3, #207	; 0xcf
1000e8cc:	2800      	cmp	r0, #0
1000e8ce:	d010      	beq.n	1000e8f2 <at_ble_device_name_set+0x2a>
1000e8d0:	1e4a      	subs	r2, r1, #1
1000e8d2:	2a1f      	cmp	r2, #31
1000e8d4:	d80d      	bhi.n	1000e8f2 <at_ble_device_name_set+0x2a>
1000e8d6:	4a08      	ldr	r2, [pc, #32]	; (1000e8f8 <at_ble_device_name_set+0x30>)
1000e8d8:	1c13      	adds	r3, r2, #0
1000e8da:	33aa      	adds	r3, #170	; 0xaa
1000e8dc:	8019      	strh	r1, [r3, #0]
1000e8de:	2300      	movs	r3, #0
1000e8e0:	1c1c      	adds	r4, r3, #0
1000e8e2:	5cc5      	ldrb	r5, [r0, r3]
1000e8e4:	34ac      	adds	r4, #172	; 0xac
1000e8e6:	3301      	adds	r3, #1
1000e8e8:	5515      	strb	r5, [r2, r4]
1000e8ea:	b2dc      	uxtb	r4, r3
1000e8ec:	428c      	cmp	r4, r1
1000e8ee:	d3f7      	bcc.n	1000e8e0 <at_ble_device_name_set+0x18>
1000e8f0:	2300      	movs	r3, #0
1000e8f2:	1c18      	adds	r0, r3, #0
1000e8f4:	bd30      	pop	{r4, r5, pc}
1000e8f6:	46c0      	nop			; (mov r8, r8)
1000e8f8:	1001e002 	.word	0x1001e002

1000e8fc <at_ble_addr_get>:
1000e8fc:	b510      	push	{r4, lr}
1000e8fe:	1c04      	adds	r4, r0, #0
1000e900:	20cf      	movs	r0, #207	; 0xcf
1000e902:	2c00      	cmp	r4, #0
1000e904:	d006      	beq.n	1000e914 <at_ble_addr_get+0x18>
1000e906:	4b04      	ldr	r3, [pc, #16]	; (1000e918 <at_ble_addr_get+0x1c>)
1000e908:	38ce      	subs	r0, #206	; 0xce
1000e90a:	1c21      	adds	r1, r4, #0
1000e90c:	4798      	blx	r3
1000e90e:	4b03      	ldr	r3, [pc, #12]	; (1000e91c <at_ble_addr_get+0x20>)
1000e910:	791b      	ldrb	r3, [r3, #4]
1000e912:	7023      	strb	r3, [r4, #0]
1000e914:	bd10      	pop	{r4, pc}
1000e916:	46c0      	nop			; (mov r8, r8)
1000e918:	1000ffc5 	.word	0x1000ffc5
1000e91c:	1001e002 	.word	0x1001e002

1000e920 <at_ble_set_dev_config>:
1000e920:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e922:	7906      	ldrb	r6, [r0, #4]
1000e924:	b089      	sub	sp, #36	; 0x24
1000e926:	25cf      	movs	r5, #207	; 0xcf
1000e928:	2e03      	cmp	r6, #3
1000e92a:	d838      	bhi.n	1000e99e <at_ble_set_dev_config+0x7e>
1000e92c:	7803      	ldrb	r3, [r0, #0]
1000e92e:	3511      	adds	r5, #17
1000e930:	2b0f      	cmp	r3, #15
1000e932:	d834      	bhi.n	1000e99e <at_ble_set_dev_config+0x7e>
1000e934:	2380      	movs	r3, #128	; 0x80
1000e936:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e938:	3d11      	subs	r5, #17
1000e93a:	009b      	lsls	r3, r3, #2
1000e93c:	429f      	cmp	r7, r3
1000e93e:	d82e      	bhi.n	1000e99e <at_ble_set_dev_config+0x7e>
1000e940:	7fc5      	ldrb	r5, [r0, #31]
1000e942:	7f83      	ldrb	r3, [r0, #30]
1000e944:	01ad      	lsls	r5, r5, #6
1000e946:	015b      	lsls	r3, r3, #5
1000e948:	431d      	orrs	r5, r3
1000e94a:	7ec3      	ldrb	r3, [r0, #27]
1000e94c:	431d      	orrs	r5, r3
1000e94e:	7f43      	ldrb	r3, [r0, #29]
1000e950:	011b      	lsls	r3, r3, #4
1000e952:	431d      	orrs	r5, r3
1000e954:	7f03      	ldrb	r3, [r0, #28]
1000e956:	009b      	lsls	r3, r3, #2
1000e958:	431d      	orrs	r5, r3
1000e95a:	4b12      	ldr	r3, [pc, #72]	; (1000e9a4 <at_ble_set_dev_config+0x84>)
1000e95c:	b2ed      	uxtb	r5, r5
1000e95e:	711e      	strb	r6, [r3, #4]
1000e960:	7903      	ldrb	r3, [r0, #4]
1000e962:	3b02      	subs	r3, #2
1000e964:	2b01      	cmp	r3, #1
1000e966:	d801      	bhi.n	1000e96c <at_ble_set_dev_config+0x4c>
1000e968:	2302      	movs	r3, #2
1000e96a:	7103      	strb	r3, [r0, #4]
1000e96c:	1c04      	adds	r4, r0, #0
1000e96e:	1c23      	adds	r3, r4, #0
1000e970:	330b      	adds	r3, #11
1000e972:	8861      	ldrh	r1, [r4, #2]
1000e974:	9307      	str	r3, [sp, #28]
1000e976:	7923      	ldrb	r3, [r4, #4]
1000e978:	7800      	ldrb	r0, [r0, #0]
1000e97a:	9300      	str	r3, [sp, #0]
1000e97c:	9501      	str	r5, [sp, #4]
1000e97e:	8c25      	ldrh	r5, [r4, #32]
1000e980:	1d62      	adds	r2, r4, #5
1000e982:	9502      	str	r5, [sp, #8]
1000e984:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e986:	9b07      	ldr	r3, [sp, #28]
1000e988:	9503      	str	r5, [sp, #12]
1000e98a:	9704      	str	r7, [sp, #16]
1000e98c:	4d06      	ldr	r5, [pc, #24]	; (1000e9a8 <at_ble_set_dev_config+0x88>)
1000e98e:	47a8      	blx	r5
1000e990:	7126      	strb	r6, [r4, #4]
1000e992:	1c05      	adds	r5, r0, #0
1000e994:	1c21      	adds	r1, r4, #0
1000e996:	4803      	ldr	r0, [pc, #12]	; (1000e9a4 <at_ble_set_dev_config+0x84>)
1000e998:	2226      	movs	r2, #38	; 0x26
1000e99a:	4b04      	ldr	r3, [pc, #16]	; (1000e9ac <at_ble_set_dev_config+0x8c>)
1000e99c:	4798      	blx	r3
1000e99e:	1c28      	adds	r0, r5, #0
1000e9a0:	b009      	add	sp, #36	; 0x24
1000e9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9a4:	1001e002 	.word	0x1001e002
1000e9a8:	1000febd 	.word	0x1000febd
1000e9ac:	100180cf 	.word	0x100180cf

1000e9b0 <at_ble_init>:
1000e9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9b2:	b087      	sub	sp, #28
1000e9b4:	af03      	add	r7, sp, #12
1000e9b6:	4954      	ldr	r1, [pc, #336]	; (1000eb08 <at_ble_init+0x158>)
1000e9b8:	220b      	movs	r2, #11
1000e9ba:	4b54      	ldr	r3, [pc, #336]	; (1000eb0c <at_ble_init+0x15c>)
1000e9bc:	1c04      	adds	r4, r0, #0
1000e9be:	1c38      	adds	r0, r7, #0
1000e9c0:	4798      	blx	r3
1000e9c2:	2205      	movs	r2, #5
1000e9c4:	4b52      	ldr	r3, [pc, #328]	; (1000eb10 <at_ble_init+0x160>)
1000e9c6:	2640      	movs	r6, #64	; 0x40
1000e9c8:	801a      	strh	r2, [r3, #0]
1000e9ca:	2300      	movs	r3, #0
1000e9cc:	4a51      	ldr	r2, [pc, #324]	; (1000eb14 <at_ble_init+0x164>)
1000e9ce:	6013      	str	r3, [r2, #0]
1000e9d0:	4a51      	ldr	r2, [pc, #324]	; (1000eb18 <at_ble_init+0x168>)
1000e9d2:	7013      	strb	r3, [r2, #0]
1000e9d4:	4a51      	ldr	r2, [pc, #324]	; (1000eb1c <at_ble_init+0x16c>)
1000e9d6:	7013      	strb	r3, [r2, #0]
1000e9d8:	4b51      	ldr	r3, [pc, #324]	; (1000eb20 <at_ble_init+0x170>)
1000e9da:	4798      	blx	r3
1000e9dc:	4b51      	ldr	r3, [pc, #324]	; (1000eb24 <at_ble_init+0x174>)
1000e9de:	4798      	blx	r3
1000e9e0:	4b51      	ldr	r3, [pc, #324]	; (1000eb28 <at_ble_init+0x178>)
1000e9e2:	4798      	blx	r3
1000e9e4:	4b51      	ldr	r3, [pc, #324]	; (1000eb2c <at_ble_init+0x17c>)
1000e9e6:	4798      	blx	r3
1000e9e8:	2c00      	cmp	r4, #0
1000e9ea:	d100      	bne.n	1000e9ee <at_ble_init+0x3e>
1000e9ec:	e089      	b.n	1000eb02 <at_ble_init+0x152>
1000e9ee:	68a3      	ldr	r3, [r4, #8]
1000e9f0:	2b00      	cmp	r3, #0
1000e9f2:	d100      	bne.n	1000e9f6 <at_ble_init+0x46>
1000e9f4:	e085      	b.n	1000eb02 <at_ble_init+0x152>
1000e9f6:	6923      	ldr	r3, [r4, #16]
1000e9f8:	2b00      	cmp	r3, #0
1000e9fa:	d100      	bne.n	1000e9fe <at_ble_init+0x4e>
1000e9fc:	e081      	b.n	1000eb02 <at_ble_init+0x152>
1000e9fe:	6820      	ldr	r0, [r4, #0]
1000ea00:	2800      	cmp	r0, #0
1000ea02:	d102      	bne.n	1000ea0a <at_ble_init+0x5a>
1000ea04:	6863      	ldr	r3, [r4, #4]
1000ea06:	2b00      	cmp	r3, #0
1000ea08:	d17b      	bne.n	1000eb02 <at_ble_init+0x152>
1000ea0a:	4b49      	ldr	r3, [pc, #292]	; (1000eb30 <at_ble_init+0x180>)
1000ea0c:	6861      	ldr	r1, [r4, #4]
1000ea0e:	4798      	blx	r3
1000ea10:	4b48      	ldr	r3, [pc, #288]	; (1000eb34 <at_ble_init+0x184>)
1000ea12:	4798      	blx	r3
1000ea14:	2801      	cmp	r0, #1
1000ea16:	d901      	bls.n	1000ea1c <at_ble_init+0x6c>
1000ea18:	26e2      	movs	r6, #226	; 0xe2
1000ea1a:	e072      	b.n	1000eb02 <at_ble_init+0x152>
1000ea1c:	4846      	ldr	r0, [pc, #280]	; (1000eb38 <at_ble_init+0x188>)
1000ea1e:	4b47      	ldr	r3, [pc, #284]	; (1000eb3c <at_ble_init+0x18c>)
1000ea20:	4798      	blx	r3
1000ea22:	2800      	cmp	r0, #0
1000ea24:	d1f8      	bne.n	1000ea18 <at_ble_init+0x68>
1000ea26:	1c20      	adds	r0, r4, #0
1000ea28:	4b45      	ldr	r3, [pc, #276]	; (1000eb40 <at_ble_init+0x190>)
1000ea2a:	4798      	blx	r3
1000ea2c:	68e0      	ldr	r0, [r4, #12]
1000ea2e:	68a1      	ldr	r1, [r4, #8]
1000ea30:	4b44      	ldr	r3, [pc, #272]	; (1000eb44 <at_ble_init+0x194>)
1000ea32:	4798      	blx	r3
1000ea34:	466b      	mov	r3, sp
1000ea36:	2201      	movs	r2, #1
1000ea38:	1cdc      	adds	r4, r3, #3
1000ea3a:	1c20      	adds	r0, r4, #0
1000ea3c:	a901      	add	r1, sp, #4
1000ea3e:	4252      	negs	r2, r2
1000ea40:	4b41      	ldr	r3, [pc, #260]	; (1000eb48 <at_ble_init+0x198>)
1000ea42:	4798      	blx	r3
1000ea44:	2800      	cmp	r0, #0
1000ea46:	d102      	bne.n	1000ea4e <at_ble_init+0x9e>
1000ea48:	7823      	ldrb	r3, [r4, #0]
1000ea4a:	2b39      	cmp	r3, #57	; 0x39
1000ea4c:	d1f2      	bne.n	1000ea34 <at_ble_init+0x84>
1000ea4e:	4b3f      	ldr	r3, [pc, #252]	; (1000eb4c <at_ble_init+0x19c>)
1000ea50:	4798      	blx	r3
1000ea52:	1e06      	subs	r6, r0, #0
1000ea54:	d155      	bne.n	1000eb02 <at_ble_init+0x152>
1000ea56:	1c03      	adds	r3, r0, #0
1000ea58:	2101      	movs	r1, #1
1000ea5a:	4a3d      	ldr	r2, [pc, #244]	; (1000eb50 <at_ble_init+0x1a0>)
1000ea5c:	4249      	negs	r1, r1
1000ea5e:	189a      	adds	r2, r3, r2
1000ea60:	3312      	adds	r3, #18
1000ea62:	8151      	strh	r1, [r2, #10]
1000ea64:	2b90      	cmp	r3, #144	; 0x90
1000ea66:	d1f7      	bne.n	1000ea58 <at_ble_init+0xa8>
1000ea68:	4c3a      	ldr	r4, [pc, #232]	; (1000eb54 <at_ble_init+0x1a4>)
1000ea6a:	3b81      	subs	r3, #129	; 0x81
1000ea6c:	7023      	strb	r3, [r4, #0]
1000ea6e:	4b3a      	ldr	r3, [pc, #232]	; (1000eb58 <at_ble_init+0x1a8>)
1000ea70:	4a3a      	ldr	r2, [pc, #232]	; (1000eb5c <at_ble_init+0x1ac>)
1000ea72:	8063      	strh	r3, [r4, #2]
1000ea74:	2300      	movs	r3, #0
1000ea76:	7123      	strb	r3, [r4, #4]
1000ea78:	3301      	adds	r3, #1
1000ea7a:	1e58      	subs	r0, r3, #1
1000ea7c:	0119      	lsls	r1, r3, #4
1000ea7e:	4301      	orrs	r1, r0
1000ea80:	3302      	adds	r3, #2
1000ea82:	7011      	strb	r1, [r2, #0]
1000ea84:	3201      	adds	r2, #1
1000ea86:	2b21      	cmp	r3, #33	; 0x21
1000ea88:	d1f7      	bne.n	1000ea7a <at_ble_init+0xca>
1000ea8a:	33e0      	adds	r3, #224	; 0xe0
1000ea8c:	33ff      	adds	r3, #255	; 0xff
1000ea8e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ea90:	1c23      	adds	r3, r4, #0
1000ea92:	2500      	movs	r5, #0
1000ea94:	3373      	adds	r3, #115	; 0x73
1000ea96:	701d      	strb	r5, [r3, #0]
1000ea98:	1c23      	adds	r3, r4, #0
1000ea9a:	3372      	adds	r3, #114	; 0x72
1000ea9c:	701d      	strb	r5, [r3, #0]
1000ea9e:	1c23      	adds	r3, r4, #0
1000eaa0:	3376      	adds	r3, #118	; 0x76
1000eaa2:	701d      	strb	r5, [r3, #0]
1000eaa4:	1c23      	adds	r3, r4, #0
1000eaa6:	33cc      	adds	r3, #204	; 0xcc
1000eaa8:	801d      	strh	r5, [r3, #0]
1000eaaa:	1c22      	adds	r2, r4, #0
1000eaac:	23a0      	movs	r3, #160	; 0xa0
1000eaae:	32d0      	adds	r2, #208	; 0xd0
1000eab0:	005b      	lsls	r3, r3, #1
1000eab2:	8013      	strh	r3, [r2, #0]
1000eab4:	1c22      	adds	r2, r4, #0
1000eab6:	32ce      	adds	r2, #206	; 0xce
1000eab8:	8013      	strh	r3, [r2, #0]
1000eaba:	1c23      	adds	r3, r4, #0
1000eabc:	33d2      	adds	r3, #210	; 0xd2
1000eabe:	801d      	strh	r5, [r3, #0]
1000eac0:	22fa      	movs	r2, #250	; 0xfa
1000eac2:	1c23      	adds	r3, r4, #0
1000eac4:	0052      	lsls	r2, r2, #1
1000eac6:	33d4      	adds	r3, #212	; 0xd4
1000eac8:	801a      	strh	r2, [r3, #0]
1000eaca:	1c23      	adds	r3, r4, #0
1000eacc:	33d6      	adds	r3, #214	; 0xd6
1000eace:	701d      	strb	r5, [r3, #0]
1000ead0:	1c20      	adds	r0, r4, #0
1000ead2:	4b23      	ldr	r3, [pc, #140]	; (1000eb60 <at_ble_init+0x1b0>)
1000ead4:	76e5      	strb	r5, [r4, #27]
1000ead6:	7725      	strb	r5, [r4, #28]
1000ead8:	7765      	strb	r5, [r4, #29]
1000eada:	77a5      	strb	r5, [r4, #30]
1000eadc:	77e5      	strb	r5, [r4, #31]
1000eade:	8425      	strh	r5, [r4, #32]
1000eae0:	8465      	strh	r5, [r4, #34]	; 0x22
1000eae2:	4798      	blx	r3
1000eae4:	1c23      	adds	r3, r4, #0
1000eae6:	2207      	movs	r2, #7
1000eae8:	3374      	adds	r3, #116	; 0x74
1000eaea:	701a      	strb	r2, [r3, #0]
1000eaec:	1c23      	adds	r3, r4, #0
1000eaee:	3204      	adds	r2, #4
1000eaf0:	33aa      	adds	r3, #170	; 0xaa
1000eaf2:	801a      	strh	r2, [r3, #0]
1000eaf4:	1c2b      	adds	r3, r5, #0
1000eaf6:	5d7a      	ldrb	r2, [r7, r5]
1000eaf8:	33ac      	adds	r3, #172	; 0xac
1000eafa:	3501      	adds	r5, #1
1000eafc:	54e2      	strb	r2, [r4, r3]
1000eafe:	2d0b      	cmp	r5, #11
1000eb00:	d1f8      	bne.n	1000eaf4 <at_ble_init+0x144>
1000eb02:	1c30      	adds	r0, r6, #0
1000eb04:	b007      	add	sp, #28
1000eb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb08:	1001ad6d 	.word	0x1001ad6d
1000eb0c:	100180cf 	.word	0x100180cf
1000eb10:	1001df70 	.word	0x1001df70
1000eb14:	1001cfa4 	.word	0x1001cfa4
1000eb18:	1001cf04 	.word	0x1001cf04
1000eb1c:	1001b3f9 	.word	0x1001b3f9
1000eb20:	1001075d 	.word	0x1001075d
1000eb24:	1000ec41 	.word	0x1000ec41
1000eb28:	1000ecbd 	.word	0x1000ecbd
1000eb2c:	1000eedd 	.word	0x1000eedd
1000eb30:	1000ecf9 	.word	0x1000ecf9
1000eb34:	1000c0d1 	.word	0x1000c0d1
1000eb38:	1000f1dd 	.word	0x1000f1dd
1000eb3c:	1000c341 	.word	0x1000c341
1000eb40:	1000f285 	.word	0x1000f285
1000eb44:	1000e09d 	.word	0x1000e09d
1000eb48:	1000e159 	.word	0x1000e159
1000eb4c:	1000fe4d 	.word	0x1000fe4d
1000eb50:	1001df72 	.word	0x1001df72
1000eb54:	1001e002 	.word	0x1001e002
1000eb58:	00003a98 	.word	0x00003a98
1000eb5c:	1001e00d 	.word	0x1001e00d
1000eb60:	1000e921 	.word	0x1000e921

1000eb64 <at_ble_addr_set>:
1000eb64:	b538      	push	{r3, r4, r5, lr}
1000eb66:	1c45      	adds	r5, r0, #1
1000eb68:	1c03      	adds	r3, r0, #0
1000eb6a:	20cf      	movs	r0, #207	; 0xcf
1000eb6c:	2d00      	cmp	r5, #0
1000eb6e:	d018      	beq.n	1000eba2 <at_ble_addr_set+0x3e>
1000eb70:	781a      	ldrb	r2, [r3, #0]
1000eb72:	2a03      	cmp	r2, #3
1000eb74:	d815      	bhi.n	1000eba2 <at_ble_addr_set+0x3e>
1000eb76:	2a01      	cmp	r2, #1
1000eb78:	d102      	bne.n	1000eb80 <at_ble_addr_set+0x1c>
1000eb7a:	785a      	ldrb	r2, [r3, #1]
1000eb7c:	2a00      	cmp	r2, #0
1000eb7e:	d010      	beq.n	1000eba2 <at_ble_addr_set+0x3e>
1000eb80:	1c1c      	adds	r4, r3, #0
1000eb82:	1c29      	adds	r1, r5, #0
1000eb84:	2206      	movs	r2, #6
1000eb86:	4b07      	ldr	r3, [pc, #28]	; (1000eba4 <at_ble_addr_set+0x40>)
1000eb88:	4807      	ldr	r0, [pc, #28]	; (1000eba8 <at_ble_addr_set+0x44>)
1000eb8a:	4798      	blx	r3
1000eb8c:	7823      	ldrb	r3, [r4, #0]
1000eb8e:	4807      	ldr	r0, [pc, #28]	; (1000ebac <at_ble_addr_set+0x48>)
1000eb90:	7103      	strb	r3, [r0, #4]
1000eb92:	4b07      	ldr	r3, [pc, #28]	; (1000ebb0 <at_ble_addr_set+0x4c>)
1000eb94:	4798      	blx	r3
1000eb96:	7823      	ldrb	r3, [r4, #0]
1000eb98:	2b00      	cmp	r3, #0
1000eb9a:	d102      	bne.n	1000eba2 <at_ble_addr_set+0x3e>
1000eb9c:	1c28      	adds	r0, r5, #0
1000eb9e:	4b05      	ldr	r3, [pc, #20]	; (1000ebb4 <at_ble_addr_set+0x50>)
1000eba0:	4798      	blx	r3
1000eba2:	bd38      	pop	{r3, r4, r5, pc}
1000eba4:	100180cf 	.word	0x100180cf
1000eba8:	1001e007 	.word	0x1001e007
1000ebac:	1001e002 	.word	0x1001e002
1000ebb0:	1000e921 	.word	0x1000e921
1000ebb4:	1000f309 	.word	0x1000f309

1000ebb8 <at_ble_scan_stop>:
1000ebb8:	b510      	push	{r4, lr}
1000ebba:	4b05      	ldr	r3, [pc, #20]	; (1000ebd0 <at_ble_scan_stop+0x18>)
1000ebbc:	4798      	blx	r3
1000ebbe:	1e04      	subs	r4, r0, #0
1000ebc0:	d103      	bne.n	1000ebca <at_ble_scan_stop+0x12>
1000ebc2:	20d1      	movs	r0, #209	; 0xd1
1000ebc4:	4b03      	ldr	r3, [pc, #12]	; (1000ebd4 <at_ble_scan_stop+0x1c>)
1000ebc6:	0100      	lsls	r0, r0, #4
1000ebc8:	4798      	blx	r3
1000ebca:	1c20      	adds	r0, r4, #0
1000ebcc:	bd10      	pop	{r4, pc}
1000ebce:	46c0      	nop			; (mov r8, r8)
1000ebd0:	100100a5 	.word	0x100100a5
1000ebd4:	1000e831 	.word	0x1000e831

1000ebd8 <at_ble_disconnect>:
1000ebd8:	b538      	push	{r3, r4, r5, lr}
1000ebda:	1c04      	adds	r4, r0, #0
1000ebdc:	4b04      	ldr	r3, [pc, #16]	; (1000ebf0 <at_ble_disconnect+0x18>)
1000ebde:	1c08      	adds	r0, r1, #0
1000ebe0:	1c21      	adds	r1, r4, #0
1000ebe2:	4798      	blx	r3
1000ebe4:	1c05      	adds	r5, r0, #0
1000ebe6:	4b03      	ldr	r3, [pc, #12]	; (1000ebf4 <at_ble_disconnect+0x1c>)
1000ebe8:	1c20      	adds	r0, r4, #0
1000ebea:	4798      	blx	r3
1000ebec:	1c28      	adds	r0, r5, #0
1000ebee:	bd38      	pop	{r3, r4, r5, pc}
1000ebf0:	1000f71d 	.word	0x1000f71d
1000ebf4:	1000e875 	.word	0x1000e875

1000ebf8 <at_ble_conn_update_reply>:
1000ebf8:	b510      	push	{r4, lr}
1000ebfa:	4c01      	ldr	r4, [pc, #4]	; (1000ec00 <at_ble_conn_update_reply+0x8>)
1000ebfc:	47a0      	blx	r4
1000ebfe:	bd10      	pop	{r4, pc}
1000ec00:	1000fc0d 	.word	0x1000fc0d

1000ec04 <at_ble_random_address_resolve>:
1000ec04:	b510      	push	{r4, lr}
1000ec06:	23cf      	movs	r3, #207	; 0xcf
1000ec08:	2800      	cmp	r0, #0
1000ec0a:	d00a      	beq.n	1000ec22 <at_ble_random_address_resolve+0x1e>
1000ec0c:	2900      	cmp	r1, #0
1000ec0e:	d008      	beq.n	1000ec22 <at_ble_random_address_resolve+0x1e>
1000ec10:	2a00      	cmp	r2, #0
1000ec12:	d006      	beq.n	1000ec22 <at_ble_random_address_resolve+0x1e>
1000ec14:	780c      	ldrb	r4, [r1, #0]
1000ec16:	2c02      	cmp	r4, #2
1000ec18:	d103      	bne.n	1000ec22 <at_ble_random_address_resolve+0x1e>
1000ec1a:	4b03      	ldr	r3, [pc, #12]	; (1000ec28 <at_ble_random_address_resolve+0x24>)
1000ec1c:	3101      	adds	r1, #1
1000ec1e:	4798      	blx	r3
1000ec20:	2300      	movs	r3, #0
1000ec22:	1c18      	adds	r0, r3, #0
1000ec24:	bd10      	pop	{r4, pc}
1000ec26:	46c0      	nop			; (mov r8, r8)
1000ec28:	10010301 	.word	0x10010301

1000ec2c <at_ble_uuid_len2type>:
1000ec2c:	1e83      	subs	r3, r0, #2
1000ec2e:	b2db      	uxtb	r3, r3
1000ec30:	2003      	movs	r0, #3
1000ec32:	2b0e      	cmp	r3, #14
1000ec34:	d801      	bhi.n	1000ec3a <at_ble_uuid_len2type+0xe>
1000ec36:	4a01      	ldr	r2, [pc, #4]	; (1000ec3c <at_ble_uuid_len2type+0x10>)
1000ec38:	5cd0      	ldrb	r0, [r2, r3]
1000ec3a:	4770      	bx	lr
1000ec3c:	1001ad78 	.word	0x1001ad78

1000ec40 <init_gatt_client_module>:
1000ec40:	2200      	movs	r2, #0
1000ec42:	4b01      	ldr	r3, [pc, #4]	; (1000ec48 <init_gatt_client_module+0x8>)
1000ec44:	801a      	strh	r2, [r3, #0]
1000ec46:	4770      	bx	lr
1000ec48:	1001cefc 	.word	0x1001cefc

1000ec4c <db_searchATT>:
1000ec4c:	b570      	push	{r4, r5, r6, lr}
1000ec4e:	1c05      	adds	r5, r0, #0
1000ec50:	2400      	movs	r4, #0
1000ec52:	4b0c      	ldr	r3, [pc, #48]	; (1000ec84 <db_searchATT+0x38>)
1000ec54:	6819      	ldr	r1, [r3, #0]
1000ec56:	4b0c      	ldr	r3, [pc, #48]	; (1000ec88 <db_searchATT+0x3c>)
1000ec58:	681e      	ldr	r6, [r3, #0]
1000ec5a:	428c      	cmp	r4, r1
1000ec5c:	dc10      	bgt.n	1000ec80 <db_searchATT+0x34>
1000ec5e:	200c      	movs	r0, #12
1000ec60:	1863      	adds	r3, r4, r1
1000ec62:	0fda      	lsrs	r2, r3, #31
1000ec64:	18d3      	adds	r3, r2, r3
1000ec66:	1c02      	adds	r2, r0, #0
1000ec68:	105b      	asrs	r3, r3, #1
1000ec6a:	435a      	muls	r2, r3
1000ec6c:	18b0      	adds	r0, r6, r2
1000ec6e:	8802      	ldrh	r2, [r0, #0]
1000ec70:	42aa      	cmp	r2, r5
1000ec72:	d201      	bcs.n	1000ec78 <db_searchATT+0x2c>
1000ec74:	1e59      	subs	r1, r3, #1
1000ec76:	e7f0      	b.n	1000ec5a <db_searchATT+0xe>
1000ec78:	42aa      	cmp	r2, r5
1000ec7a:	d902      	bls.n	1000ec82 <db_searchATT+0x36>
1000ec7c:	1c5c      	adds	r4, r3, #1
1000ec7e:	e7ec      	b.n	1000ec5a <db_searchATT+0xe>
1000ec80:	2000      	movs	r0, #0
1000ec82:	bd70      	pop	{r4, r5, r6, pc}
1000ec84:	1001cf10 	.word	0x1001cf10
1000ec88:	1001cf08 	.word	0x1001cf08

1000ec8c <at_ble_read_authorize_reply.part.1>:
1000ec8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ec8e:	4b09      	ldr	r3, [pc, #36]	; (1000ecb4 <at_ble_read_authorize_reply.part.1+0x28>)
1000ec90:	1c05      	adds	r5, r0, #0
1000ec92:	1c08      	adds	r0, r1, #0
1000ec94:	1c0c      	adds	r4, r1, #0
1000ec96:	4798      	blx	r3
1000ec98:	2800      	cmp	r0, #0
1000ec9a:	d009      	beq.n	1000ecb0 <at_ble_read_authorize_reply.part.1+0x24>
1000ec9c:	6882      	ldr	r2, [r0, #8]
1000ec9e:	2a00      	cmp	r2, #0
1000eca0:	d006      	beq.n	1000ecb0 <at_ble_read_authorize_reply.part.1+0x24>
1000eca2:	8883      	ldrh	r3, [r0, #4]
1000eca4:	1c29      	adds	r1, r5, #0
1000eca6:	9200      	str	r2, [sp, #0]
1000eca8:	1c20      	adds	r0, r4, #0
1000ecaa:	2200      	movs	r2, #0
1000ecac:	4c02      	ldr	r4, [pc, #8]	; (1000ecb8 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ecae:	47a0      	blx	r4
1000ecb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ecb2:	46c0      	nop			; (mov r8, r8)
1000ecb4:	1000ec4d 	.word	0x1000ec4d
1000ecb8:	100103fd 	.word	0x100103fd

1000ecbc <initi_gatt_server_module>:
1000ecbc:	2300      	movs	r3, #0
1000ecbe:	4a07      	ldr	r2, [pc, #28]	; (1000ecdc <initi_gatt_server_module+0x20>)
1000ecc0:	7013      	strb	r3, [r2, #0]
1000ecc2:	4a07      	ldr	r2, [pc, #28]	; (1000ece0 <initi_gatt_server_module+0x24>)
1000ecc4:	6013      	str	r3, [r2, #0]
1000ecc6:	4a07      	ldr	r2, [pc, #28]	; (1000ece4 <initi_gatt_server_module+0x28>)
1000ecc8:	6013      	str	r3, [r2, #0]
1000ecca:	4a07      	ldr	r2, [pc, #28]	; (1000ece8 <initi_gatt_server_module+0x2c>)
1000eccc:	6013      	str	r3, [r2, #0]
1000ecce:	4a07      	ldr	r2, [pc, #28]	; (1000ecec <initi_gatt_server_module+0x30>)
1000ecd0:	6013      	str	r3, [r2, #0]
1000ecd2:	4a07      	ldr	r2, [pc, #28]	; (1000ecf0 <initi_gatt_server_module+0x34>)
1000ecd4:	6013      	str	r3, [r2, #0]
1000ecd6:	4a07      	ldr	r2, [pc, #28]	; (1000ecf4 <initi_gatt_server_module+0x38>)
1000ecd8:	6013      	str	r3, [r2, #0]
1000ecda:	4770      	bx	lr
1000ecdc:	1001cf04 	.word	0x1001cf04
1000ece0:	1001cf14 	.word	0x1001cf14
1000ece4:	1001cf10 	.word	0x1001cf10
1000ece8:	1001cf00 	.word	0x1001cf00
1000ecec:	1001cf0c 	.word	0x1001cf0c
1000ecf0:	1001cf08 	.word	0x1001cf08
1000ecf4:	1001cf18 	.word	0x1001cf18

1000ecf8 <db_init>:
1000ecf8:	4b0a      	ldr	r3, [pc, #40]	; (1000ed24 <db_init+0x2c>)
1000ecfa:	4a0b      	ldr	r2, [pc, #44]	; (1000ed28 <db_init+0x30>)
1000ecfc:	6018      	str	r0, [r3, #0]
1000ecfe:	084b      	lsrs	r3, r1, #1
1000ed00:	6013      	str	r3, [r2, #0]
1000ed02:	4a0a      	ldr	r2, [pc, #40]	; (1000ed2c <db_init+0x34>)
1000ed04:	18c3      	adds	r3, r0, r3
1000ed06:	6013      	str	r3, [r2, #0]
1000ed08:	4a09      	ldr	r2, [pc, #36]	; (1000ed30 <db_init+0x38>)
1000ed0a:	1841      	adds	r1, r0, r1
1000ed0c:	6013      	str	r3, [r2, #0]
1000ed0e:	2303      	movs	r3, #3
1000ed10:	2200      	movs	r2, #0
1000ed12:	3103      	adds	r1, #3
1000ed14:	4399      	bics	r1, r3
1000ed16:	4b07      	ldr	r3, [pc, #28]	; (1000ed34 <db_init+0x3c>)
1000ed18:	3904      	subs	r1, #4
1000ed1a:	6019      	str	r1, [r3, #0]
1000ed1c:	4b06      	ldr	r3, [pc, #24]	; (1000ed38 <db_init+0x40>)
1000ed1e:	601a      	str	r2, [r3, #0]
1000ed20:	4770      	bx	lr
1000ed22:	46c0      	nop			; (mov r8, r8)
1000ed24:	1001cf18 	.word	0x1001cf18
1000ed28:	1001cf14 	.word	0x1001cf14
1000ed2c:	1001cf00 	.word	0x1001cf00
1000ed30:	1001cf0c 	.word	0x1001cf0c
1000ed34:	1001cf08 	.word	0x1001cf08
1000ed38:	1001cf10 	.word	0x1001cf10

1000ed3c <at_ble_characteristic_value_set>:
1000ed3c:	b570      	push	{r4, r5, r6, lr}
1000ed3e:	4b0b      	ldr	r3, [pc, #44]	; (1000ed6c <at_ble_characteristic_value_set+0x30>)
1000ed40:	1c06      	adds	r6, r0, #0
1000ed42:	1c0c      	adds	r4, r1, #0
1000ed44:	1c15      	adds	r5, r2, #0
1000ed46:	4798      	blx	r3
1000ed48:	2800      	cmp	r0, #0
1000ed4a:	d008      	beq.n	1000ed5e <at_ble_characteristic_value_set+0x22>
1000ed4c:	6880      	ldr	r0, [r0, #8]
1000ed4e:	2800      	cmp	r0, #0
1000ed50:	d005      	beq.n	1000ed5e <at_ble_characteristic_value_set+0x22>
1000ed52:	1c21      	adds	r1, r4, #0
1000ed54:	1c2a      	adds	r2, r5, #0
1000ed56:	4b06      	ldr	r3, [pc, #24]	; (1000ed70 <at_ble_characteristic_value_set+0x34>)
1000ed58:	4798      	blx	r3
1000ed5a:	2000      	movs	r0, #0
1000ed5c:	e004      	b.n	1000ed68 <at_ble_characteristic_value_set+0x2c>
1000ed5e:	1c30      	adds	r0, r6, #0
1000ed60:	1c29      	adds	r1, r5, #0
1000ed62:	1c22      	adds	r2, r4, #0
1000ed64:	4b03      	ldr	r3, [pc, #12]	; (1000ed74 <at_ble_characteristic_value_set+0x38>)
1000ed66:	4798      	blx	r3
1000ed68:	bd70      	pop	{r4, r5, r6, pc}
1000ed6a:	46c0      	nop			; (mov r8, r8)
1000ed6c:	1000ec4d 	.word	0x1000ec4d
1000ed70:	100180cf 	.word	0x100180cf
1000ed74:	10010771 	.word	0x10010771

1000ed78 <at_ble_characteristic_value_get>:
1000ed78:	b570      	push	{r4, r5, r6, lr}
1000ed7a:	4b0c      	ldr	r3, [pc, #48]	; (1000edac <at_ble_characteristic_value_get+0x34>)
1000ed7c:	1c06      	adds	r6, r0, #0
1000ed7e:	1c0c      	adds	r4, r1, #0
1000ed80:	1c15      	adds	r5, r2, #0
1000ed82:	4798      	blx	r3
1000ed84:	2800      	cmp	r0, #0
1000ed86:	d00b      	beq.n	1000eda0 <at_ble_characteristic_value_get+0x28>
1000ed88:	6883      	ldr	r3, [r0, #8]
1000ed8a:	2b00      	cmp	r3, #0
1000ed8c:	d008      	beq.n	1000eda0 <at_ble_characteristic_value_get+0x28>
1000ed8e:	8883      	ldrh	r3, [r0, #4]
1000ed90:	802b      	strh	r3, [r5, #0]
1000ed92:	8882      	ldrh	r2, [r0, #4]
1000ed94:	6881      	ldr	r1, [r0, #8]
1000ed96:	4b06      	ldr	r3, [pc, #24]	; (1000edb0 <at_ble_characteristic_value_get+0x38>)
1000ed98:	1c20      	adds	r0, r4, #0
1000ed9a:	4798      	blx	r3
1000ed9c:	2000      	movs	r0, #0
1000ed9e:	e004      	b.n	1000edaa <at_ble_characteristic_value_get+0x32>
1000eda0:	1c30      	adds	r0, r6, #0
1000eda2:	1c29      	adds	r1, r5, #0
1000eda4:	1c22      	adds	r2, r4, #0
1000eda6:	4b03      	ldr	r3, [pc, #12]	; (1000edb4 <at_ble_characteristic_value_get+0x3c>)
1000eda8:	4798      	blx	r3
1000edaa:	bd70      	pop	{r4, r5, r6, pc}
1000edac:	1000ec4d 	.word	0x1000ec4d
1000edb0:	100180cf 	.word	0x100180cf
1000edb4:	100107fd 	.word	0x100107fd

1000edb8 <at_ble_write_authorize_reply>:
1000edb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000edba:	b085      	sub	sp, #20
1000edbc:	1c04      	adds	r4, r0, #0
1000edbe:	9101      	str	r1, [sp, #4]
1000edc0:	2900      	cmp	r1, #0
1000edc2:	d128      	bne.n	1000ee16 <at_ble_write_authorize_reply+0x5e>
1000edc4:	8843      	ldrh	r3, [r0, #2]
1000edc6:	1c27      	adds	r7, r4, #0
1000edc8:	9300      	str	r3, [sp, #0]
1000edca:	1c18      	adds	r0, r3, #0
1000edcc:	4b16      	ldr	r3, [pc, #88]	; (1000ee28 <at_ble_write_authorize_reply+0x70>)
1000edce:	4798      	blx	r3
1000edd0:	3708      	adds	r7, #8
1000edd2:	2800      	cmp	r0, #0
1000edd4:	d009      	beq.n	1000edea <at_ble_write_authorize_reply+0x32>
1000edd6:	6880      	ldr	r0, [r0, #8]
1000edd8:	2800      	cmp	r0, #0
1000edda:	d006      	beq.n	1000edea <at_ble_write_authorize_reply+0x32>
1000eddc:	88a3      	ldrh	r3, [r4, #4]
1000edde:	88e2      	ldrh	r2, [r4, #6]
1000ede0:	18c0      	adds	r0, r0, r3
1000ede2:	1c39      	adds	r1, r7, #0
1000ede4:	4b11      	ldr	r3, [pc, #68]	; (1000ee2c <at_ble_write_authorize_reply+0x74>)
1000ede6:	4798      	blx	r3
1000ede8:	e015      	b.n	1000ee16 <at_ble_write_authorize_reply+0x5e>
1000edea:	ab02      	add	r3, sp, #8
1000edec:	1d9e      	adds	r6, r3, #6
1000edee:	2300      	movs	r3, #0
1000edf0:	4d0f      	ldr	r5, [pc, #60]	; (1000ee30 <at_ble_write_authorize_reply+0x78>)
1000edf2:	8033      	strh	r3, [r6, #0]
1000edf4:	6829      	ldr	r1, [r5, #0]
1000edf6:	1c32      	adds	r2, r6, #0
1000edf8:	4b0e      	ldr	r3, [pc, #56]	; (1000ee34 <at_ble_write_authorize_reply+0x7c>)
1000edfa:	9800      	ldr	r0, [sp, #0]
1000edfc:	4798      	blx	r3
1000edfe:	682b      	ldr	r3, [r5, #0]
1000ee00:	88a0      	ldrh	r0, [r4, #4]
1000ee02:	88e2      	ldrh	r2, [r4, #6]
1000ee04:	1818      	adds	r0, r3, r0
1000ee06:	1c39      	adds	r1, r7, #0
1000ee08:	4b08      	ldr	r3, [pc, #32]	; (1000ee2c <at_ble_write_authorize_reply+0x74>)
1000ee0a:	4798      	blx	r3
1000ee0c:	8860      	ldrh	r0, [r4, #2]
1000ee0e:	8832      	ldrh	r2, [r6, #0]
1000ee10:	6829      	ldr	r1, [r5, #0]
1000ee12:	4b09      	ldr	r3, [pc, #36]	; (1000ee38 <at_ble_write_authorize_reply+0x80>)
1000ee14:	4798      	blx	r3
1000ee16:	8860      	ldrh	r0, [r4, #2]
1000ee18:	8821      	ldrh	r1, [r4, #0]
1000ee1a:	9a01      	ldr	r2, [sp, #4]
1000ee1c:	4b07      	ldr	r3, [pc, #28]	; (1000ee3c <at_ble_write_authorize_reply+0x84>)
1000ee1e:	4798      	blx	r3
1000ee20:	2000      	movs	r0, #0
1000ee22:	b005      	add	sp, #20
1000ee24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee26:	46c0      	nop			; (mov r8, r8)
1000ee28:	1000ec4d 	.word	0x1000ec4d
1000ee2c:	100180cf 	.word	0x100180cf
1000ee30:	1001b3fc 	.word	0x1001b3fc
1000ee34:	1000ed79 	.word	0x1000ed79
1000ee38:	1000ed3d 	.word	0x1000ed3d
1000ee3c:	10010469 	.word	0x10010469

1000ee40 <gatts_handle_read_req>:
1000ee40:	b538      	push	{r3, r4, r5, lr}
1000ee42:	1c0c      	adds	r4, r1, #0
1000ee44:	4b07      	ldr	r3, [pc, #28]	; (1000ee64 <gatts_handle_read_req+0x24>)
1000ee46:	4798      	blx	r3
1000ee48:	8865      	ldrh	r5, [r4, #2]
1000ee4a:	4b07      	ldr	r3, [pc, #28]	; (1000ee68 <gatts_handle_read_req+0x28>)
1000ee4c:	1c28      	adds	r0, r5, #0
1000ee4e:	4798      	blx	r3
1000ee50:	7883      	ldrb	r3, [r0, #2]
1000ee52:	2026      	movs	r0, #38	; 0x26
1000ee54:	07db      	lsls	r3, r3, #31
1000ee56:	d404      	bmi.n	1000ee62 <gatts_handle_read_req+0x22>
1000ee58:	8820      	ldrh	r0, [r4, #0]
1000ee5a:	1c29      	adds	r1, r5, #0
1000ee5c:	4b03      	ldr	r3, [pc, #12]	; (1000ee6c <gatts_handle_read_req+0x2c>)
1000ee5e:	4798      	blx	r3
1000ee60:	203b      	movs	r0, #59	; 0x3b
1000ee62:	bd38      	pop	{r3, r4, r5, pc}
1000ee64:	100103ad 	.word	0x100103ad
1000ee68:	1000ec4d 	.word	0x1000ec4d
1000ee6c:	1000ec8d 	.word	0x1000ec8d

1000ee70 <gatts_handle_att_info_req>:
1000ee70:	b538      	push	{r3, r4, r5, lr}
1000ee72:	1c0d      	adds	r5, r1, #0
1000ee74:	4b0a      	ldr	r3, [pc, #40]	; (1000eea0 <gatts_handle_att_info_req+0x30>)
1000ee76:	1c14      	adds	r4, r2, #0
1000ee78:	4798      	blx	r3
1000ee7a:	882d      	ldrh	r5, [r5, #0]
1000ee7c:	4b09      	ldr	r3, [pc, #36]	; (1000eea4 <gatts_handle_att_info_req+0x34>)
1000ee7e:	1c28      	adds	r0, r5, #0
1000ee80:	4798      	blx	r3
1000ee82:	0a22      	lsrs	r2, r4, #8
1000ee84:	1c03      	adds	r3, r0, #0
1000ee86:	4c08      	ldr	r4, [pc, #32]	; (1000eea8 <gatts_handle_att_info_req+0x38>)
1000ee88:	b291      	uxth	r1, r2
1000ee8a:	2800      	cmp	r0, #0
1000ee8c:	d003      	beq.n	1000ee96 <gatts_handle_att_info_req+0x26>
1000ee8e:	8882      	ldrh	r2, [r0, #4]
1000ee90:	2300      	movs	r3, #0
1000ee92:	1c28      	adds	r0, r5, #0
1000ee94:	e001      	b.n	1000ee9a <gatts_handle_att_info_req+0x2a>
1000ee96:	1c28      	adds	r0, r5, #0
1000ee98:	2201      	movs	r2, #1
1000ee9a:	47a0      	blx	r4
1000ee9c:	203b      	movs	r0, #59	; 0x3b
1000ee9e:	bd38      	pop	{r3, r4, r5, pc}
1000eea0:	100103f1 	.word	0x100103f1
1000eea4:	1000ec4d 	.word	0x1000ec4d
1000eea8:	100104ad 	.word	0x100104ad

1000eeac <gatts_handle_write_req>:
1000eeac:	b510      	push	{r4, lr}
1000eeae:	1c14      	adds	r4, r2, #0
1000eeb0:	4b07      	ldr	r3, [pc, #28]	; (1000eed0 <gatts_handle_write_req+0x24>)
1000eeb2:	4798      	blx	r3
1000eeb4:	4b07      	ldr	r3, [pc, #28]	; (1000eed4 <gatts_handle_write_req+0x28>)
1000eeb6:	8860      	ldrh	r0, [r4, #2]
1000eeb8:	4798      	blx	r3
1000eeba:	2302      	movs	r3, #2
1000eebc:	7881      	ldrb	r1, [r0, #2]
1000eebe:	2022      	movs	r0, #34	; 0x22
1000eec0:	4019      	ands	r1, r3
1000eec2:	d103      	bne.n	1000eecc <gatts_handle_write_req+0x20>
1000eec4:	1c20      	adds	r0, r4, #0
1000eec6:	4b04      	ldr	r3, [pc, #16]	; (1000eed8 <gatts_handle_write_req+0x2c>)
1000eec8:	4798      	blx	r3
1000eeca:	201f      	movs	r0, #31
1000eecc:	bd10      	pop	{r4, pc}
1000eece:	46c0      	nop			; (mov r8, r8)
1000eed0:	100103b9 	.word	0x100103b9
1000eed4:	1000ec4d 	.word	0x1000ec4d
1000eed8:	1000edb9 	.word	0x1000edb9

1000eedc <init_l2cc_task_module>:
1000eedc:	220a      	movs	r2, #10
1000eede:	4b01      	ldr	r3, [pc, #4]	; (1000eee4 <init_l2cc_task_module+0x8>)
1000eee0:	701a      	strb	r2, [r3, #0]
1000eee2:	4770      	bx	lr
1000eee4:	1001b3f9 	.word	0x1001b3f9

1000eee8 <l2cc_data_send_rsp_handler>:
1000eee8:	b510      	push	{r4, lr}
1000eeea:	7802      	ldrb	r2, [r0, #0]
1000eeec:	700a      	strb	r2, [r1, #0]
1000eeee:	7883      	ldrb	r3, [r0, #2]
1000eef0:	7844      	ldrb	r4, [r0, #1]
1000eef2:	021b      	lsls	r3, r3, #8
1000eef4:	4323      	orrs	r3, r4
1000eef6:	804b      	strh	r3, [r1, #2]
1000eef8:	7903      	ldrb	r3, [r0, #4]
1000eefa:	78c0      	ldrb	r0, [r0, #3]
1000eefc:	021b      	lsls	r3, r3, #8
1000eefe:	4303      	orrs	r3, r0
1000ef00:	808b      	strh	r3, [r1, #4]
1000ef02:	2a00      	cmp	r2, #0
1000ef04:	d103      	bne.n	1000ef0e <l2cc_data_send_rsp_handler+0x26>
1000ef06:	4a02      	ldr	r2, [pc, #8]	; (1000ef10 <l2cc_data_send_rsp_handler+0x28>)
1000ef08:	7813      	ldrb	r3, [r2, #0]
1000ef0a:	3301      	adds	r3, #1
1000ef0c:	7013      	strb	r3, [r2, #0]
1000ef0e:	bd10      	pop	{r4, pc}
1000ef10:	1001b3f9 	.word	0x1001b3f9

1000ef14 <l2cc_data_received_handler>:
1000ef14:	b508      	push	{r3, lr}
1000ef16:	1c03      	adds	r3, r0, #0
1000ef18:	7842      	ldrb	r2, [r0, #1]
1000ef1a:	7800      	ldrb	r0, [r0, #0]
1000ef1c:	0212      	lsls	r2, r2, #8
1000ef1e:	4302      	orrs	r2, r0
1000ef20:	800a      	strh	r2, [r1, #0]
1000ef22:	78da      	ldrb	r2, [r3, #3]
1000ef24:	7898      	ldrb	r0, [r3, #2]
1000ef26:	0212      	lsls	r2, r2, #8
1000ef28:	4302      	orrs	r2, r0
1000ef2a:	804a      	strh	r2, [r1, #2]
1000ef2c:	795a      	ldrb	r2, [r3, #5]
1000ef2e:	7918      	ldrb	r0, [r3, #4]
1000ef30:	0212      	lsls	r2, r2, #8
1000ef32:	4302      	orrs	r2, r0
1000ef34:	808a      	strh	r2, [r1, #4]
1000ef36:	1d88      	adds	r0, r1, #6
1000ef38:	1d99      	adds	r1, r3, #6
1000ef3a:	4b01      	ldr	r3, [pc, #4]	; (1000ef40 <l2cc_data_received_handler+0x2c>)
1000ef3c:	4798      	blx	r3
1000ef3e:	bd08      	pop	{r3, pc}
1000ef40:	100180cf 	.word	0x100180cf

1000ef44 <at_ble_authenticate>:
1000ef44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef46:	1c0c      	adds	r4, r1, #0
1000ef48:	211f      	movs	r1, #31
1000ef4a:	b08b      	sub	sp, #44	; 0x2c
1000ef4c:	9307      	str	r3, [sp, #28]
1000ef4e:	ab02      	add	r3, sp, #8
1000ef50:	18c9      	adds	r1, r1, r3
1000ef52:	230f      	movs	r3, #15
1000ef54:	700b      	strb	r3, [r1, #0]
1000ef56:	4b40      	ldr	r3, [pc, #256]	; (1000f058 <at_ble_authenticate+0x114>)
1000ef58:	1c05      	adds	r5, r0, #0
1000ef5a:	1c16      	adds	r6, r2, #0
1000ef5c:	4798      	blx	r3
1000ef5e:	1c07      	adds	r7, r0, #0
1000ef60:	2001      	movs	r0, #1
1000ef62:	2f07      	cmp	r7, #7
1000ef64:	d875      	bhi.n	1000f052 <at_ble_authenticate+0x10e>
1000ef66:	2c00      	cmp	r4, #0
1000ef68:	d113      	bne.n	1000ef92 <at_ble_authenticate+0x4e>
1000ef6a:	2312      	movs	r3, #18
1000ef6c:	435f      	muls	r7, r3
1000ef6e:	4b3b      	ldr	r3, [pc, #236]	; (1000f05c <at_ble_authenticate+0x118>)
1000ef70:	5cfb      	ldrb	r3, [r7, r3]
1000ef72:	4283      	cmp	r3, r0
1000ef74:	d001      	beq.n	1000ef7a <at_ble_authenticate+0x36>
1000ef76:	20cf      	movs	r0, #207	; 0xcf
1000ef78:	e06b      	b.n	1000f052 <at_ble_authenticate+0x10e>
1000ef7a:	9504      	str	r5, [sp, #16]
1000ef7c:	9400      	str	r4, [sp, #0]
1000ef7e:	9401      	str	r4, [sp, #4]
1000ef80:	9402      	str	r4, [sp, #8]
1000ef82:	9403      	str	r4, [sp, #12]
1000ef84:	1c20      	adds	r0, r4, #0
1000ef86:	1c21      	adds	r1, r4, #0
1000ef88:	1c22      	adds	r2, r4, #0
1000ef8a:	1c23      	adds	r3, r4, #0
1000ef8c:	4d34      	ldr	r5, [pc, #208]	; (1000f060 <at_ble_authenticate+0x11c>)
1000ef8e:	47a8      	blx	r5
1000ef90:	e05e      	b.n	1000f050 <at_ble_authenticate+0x10c>
1000ef92:	7922      	ldrb	r2, [r4, #4]
1000ef94:	2a06      	cmp	r2, #6
1000ef96:	d9ee      	bls.n	1000ef76 <at_ble_authenticate+0x32>
1000ef98:	7963      	ldrb	r3, [r4, #5]
1000ef9a:	2b10      	cmp	r3, #16
1000ef9c:	d8eb      	bhi.n	1000ef76 <at_ble_authenticate+0x32>
1000ef9e:	429a      	cmp	r2, r3
1000efa0:	d8e9      	bhi.n	1000ef76 <at_ble_authenticate+0x32>
1000efa2:	7a23      	ldrb	r3, [r4, #8]
1000efa4:	2b04      	cmp	r3, #4
1000efa6:	d8e6      	bhi.n	1000ef76 <at_ble_authenticate+0x32>
1000efa8:	79a3      	ldrb	r3, [r4, #6]
1000efaa:	2b07      	cmp	r3, #7
1000efac:	d8e3      	bhi.n	1000ef76 <at_ble_authenticate+0x32>
1000efae:	79e3      	ldrb	r3, [r4, #7]
1000efb0:	2b07      	cmp	r3, #7
1000efb2:	d8e0      	bhi.n	1000ef76 <at_ble_authenticate+0x32>
1000efb4:	78a3      	ldrb	r3, [r4, #2]
1000efb6:	2b00      	cmp	r3, #0
1000efb8:	d006      	beq.n	1000efc8 <at_ble_authenticate+0x84>
1000efba:	2e00      	cmp	r6, #0
1000efbc:	d0db      	beq.n	1000ef76 <at_ble_authenticate+0x32>
1000efbe:	4829      	ldr	r0, [pc, #164]	; (1000f064 <at_ble_authenticate+0x120>)
1000efc0:	1c31      	adds	r1, r6, #0
1000efc2:	221c      	movs	r2, #28
1000efc4:	4b28      	ldr	r3, [pc, #160]	; (1000f068 <at_ble_authenticate+0x124>)
1000efc6:	4798      	blx	r3
1000efc8:	9b07      	ldr	r3, [sp, #28]
1000efca:	2b00      	cmp	r3, #0
1000efcc:	d005      	beq.n	1000efda <at_ble_authenticate+0x96>
1000efce:	4827      	ldr	r0, [pc, #156]	; (1000f06c <at_ble_authenticate+0x128>)
1000efd0:	1c19      	adds	r1, r3, #0
1000efd2:	309a      	adds	r0, #154	; 0x9a
1000efd4:	2210      	movs	r2, #16
1000efd6:	4b24      	ldr	r3, [pc, #144]	; (1000f068 <at_ble_authenticate+0x124>)
1000efd8:	4798      	blx	r3
1000efda:	7863      	ldrb	r3, [r4, #1]
1000efdc:	78a2      	ldrb	r2, [r4, #2]
1000efde:	009b      	lsls	r3, r3, #2
1000efe0:	4313      	orrs	r3, r2
1000efe2:	2212      	movs	r2, #18
1000efe4:	4357      	muls	r7, r2
1000efe6:	4a1d      	ldr	r2, [pc, #116]	; (1000f05c <at_ble_authenticate+0x118>)
1000efe8:	b2db      	uxtb	r3, r3
1000efea:	5cba      	ldrb	r2, [r7, r2]
1000efec:	2a00      	cmp	r2, #0
1000efee:	d116      	bne.n	1000f01e <at_ble_authenticate+0xda>
1000eff0:	79a0      	ldrb	r0, [r4, #6]
1000eff2:	0742      	lsls	r2, r0, #29
1000eff4:	d502      	bpl.n	1000effc <at_ble_authenticate+0xb8>
1000eff6:	9a07      	ldr	r2, [sp, #28]
1000eff8:	2a00      	cmp	r2, #0
1000effa:	d0bc      	beq.n	1000ef76 <at_ble_authenticate+0x32>
1000effc:	07c2      	lsls	r2, r0, #31
1000effe:	d501      	bpl.n	1000f004 <at_ble_authenticate+0xc0>
1000f000:	2e00      	cmp	r6, #0
1000f002:	d0b8      	beq.n	1000ef76 <at_ble_authenticate+0x32>
1000f004:	7966      	ldrb	r6, [r4, #5]
1000f006:	7821      	ldrb	r1, [r4, #0]
1000f008:	78e2      	ldrb	r2, [r4, #3]
1000f00a:	9600      	str	r6, [sp, #0]
1000f00c:	9001      	str	r0, [sp, #4]
1000f00e:	79e0      	ldrb	r0, [r4, #7]
1000f010:	9002      	str	r0, [sp, #8]
1000f012:	7a20      	ldrb	r0, [r4, #8]
1000f014:	4c16      	ldr	r4, [pc, #88]	; (1000f070 <at_ble_authenticate+0x12c>)
1000f016:	9003      	str	r0, [sp, #12]
1000f018:	1c28      	adds	r0, r5, #0
1000f01a:	47a0      	blx	r4
1000f01c:	e018      	b.n	1000f050 <at_ble_authenticate+0x10c>
1000f01e:	2a01      	cmp	r2, #1
1000f020:	d1a9      	bne.n	1000ef76 <at_ble_authenticate+0x32>
1000f022:	79e0      	ldrb	r0, [r4, #7]
1000f024:	0742      	lsls	r2, r0, #29
1000f026:	d502      	bpl.n	1000f02e <at_ble_authenticate+0xea>
1000f028:	9a07      	ldr	r2, [sp, #28]
1000f02a:	2a00      	cmp	r2, #0
1000f02c:	d0a3      	beq.n	1000ef76 <at_ble_authenticate+0x32>
1000f02e:	07c2      	lsls	r2, r0, #31
1000f030:	d501      	bpl.n	1000f036 <at_ble_authenticate+0xf2>
1000f032:	2e00      	cmp	r6, #0
1000f034:	d09f      	beq.n	1000ef76 <at_ble_authenticate+0x32>
1000f036:	7966      	ldrb	r6, [r4, #5]
1000f038:	7821      	ldrb	r1, [r4, #0]
1000f03a:	78e2      	ldrb	r2, [r4, #3]
1000f03c:	9600      	str	r6, [sp, #0]
1000f03e:	79a6      	ldrb	r6, [r4, #6]
1000f040:	9002      	str	r0, [sp, #8]
1000f042:	9601      	str	r6, [sp, #4]
1000f044:	7a20      	ldrb	r0, [r4, #8]
1000f046:	9504      	str	r5, [sp, #16]
1000f048:	9003      	str	r0, [sp, #12]
1000f04a:	4c05      	ldr	r4, [pc, #20]	; (1000f060 <at_ble_authenticate+0x11c>)
1000f04c:	2001      	movs	r0, #1
1000f04e:	47a0      	blx	r4
1000f050:	2000      	movs	r0, #0
1000f052:	b00b      	add	sp, #44	; 0x2c
1000f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f056:	46c0      	nop			; (mov r8, r8)
1000f058:	1000f445 	.word	0x1000f445
1000f05c:	1001df72 	.word	0x1001df72
1000f060:	1000f9b5 	.word	0x1000f9b5
1000f064:	1001e080 	.word	0x1001e080
1000f068:	100180cf 	.word	0x100180cf
1000f06c:	1001e002 	.word	0x1001e002
1000f070:	1000f795 	.word	0x1000f795

1000f074 <at_ble_pair_key_reply>:
1000f074:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f076:	b085      	sub	sp, #20
1000f078:	1c05      	adds	r5, r0, #0
1000f07a:	1c0c      	adds	r4, r1, #0
1000f07c:	1c16      	adds	r6, r2, #0
1000f07e:	2100      	movs	r1, #0
1000f080:	4668      	mov	r0, sp
1000f082:	2210      	movs	r2, #16
1000f084:	4b18      	ldr	r3, [pc, #96]	; (1000f0e8 <at_ble_pair_key_reply+0x74>)
1000f086:	4798      	blx	r3
1000f088:	2101      	movs	r1, #1
1000f08a:	2e00      	cmp	r6, #0
1000f08c:	d101      	bne.n	1000f092 <at_ble_pair_key_reply+0x1e>
1000f08e:	1c31      	adds	r1, r6, #0
1000f090:	466e      	mov	r6, sp
1000f092:	2c00      	cmp	r4, #0
1000f094:	d116      	bne.n	1000f0c4 <at_ble_pair_key_reply+0x50>
1000f096:	2701      	movs	r7, #1
1000f098:	1c23      	adds	r3, r4, #0
1000f09a:	1d70      	adds	r0, r6, #5
1000f09c:	3e01      	subs	r6, #1
1000f09e:	7802      	ldrb	r2, [r0, #0]
1000f0a0:	3801      	subs	r0, #1
1000f0a2:	3a30      	subs	r2, #48	; 0x30
1000f0a4:	437a      	muls	r2, r7
1000f0a6:	189b      	adds	r3, r3, r2
1000f0a8:	220a      	movs	r2, #10
1000f0aa:	4357      	muls	r7, r2
1000f0ac:	42b0      	cmp	r0, r6
1000f0ae:	d1f6      	bne.n	1000f09e <at_ble_pair_key_reply+0x2a>
1000f0b0:	466a      	mov	r2, sp
1000f0b2:	4668      	mov	r0, sp
1000f0b4:	7013      	strb	r3, [r2, #0]
1000f0b6:	0a1a      	lsrs	r2, r3, #8
1000f0b8:	7042      	strb	r2, [r0, #1]
1000f0ba:	0c1a      	lsrs	r2, r3, #16
1000f0bc:	0e1b      	lsrs	r3, r3, #24
1000f0be:	7082      	strb	r2, [r0, #2]
1000f0c0:	70c3      	strb	r3, [r0, #3]
1000f0c2:	e009      	b.n	1000f0d8 <at_ble_pair_key_reply+0x64>
1000f0c4:	20cf      	movs	r0, #207	; 0xcf
1000f0c6:	2c01      	cmp	r4, #1
1000f0c8:	d10c      	bne.n	1000f0e4 <at_ble_pair_key_reply+0x70>
1000f0ca:	2300      	movs	r3, #0
1000f0cc:	4668      	mov	r0, sp
1000f0ce:	5cf2      	ldrb	r2, [r6, r3]
1000f0d0:	54c2      	strb	r2, [r0, r3]
1000f0d2:	3301      	adds	r3, #1
1000f0d4:	2b10      	cmp	r3, #16
1000f0d6:	d1f9      	bne.n	1000f0cc <at_ble_pair_key_reply+0x58>
1000f0d8:	2004      	movs	r0, #4
1000f0da:	466a      	mov	r2, sp
1000f0dc:	1c2b      	adds	r3, r5, #0
1000f0de:	4c03      	ldr	r4, [pc, #12]	; (1000f0ec <at_ble_pair_key_reply+0x78>)
1000f0e0:	47a0      	blx	r4
1000f0e2:	2000      	movs	r0, #0
1000f0e4:	b005      	add	sp, #20
1000f0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f0e8:	1001810b 	.word	0x1001810b
1000f0ec:	1000fa31 	.word	0x1000fa31

1000f0f0 <at_ble_send_slave_sec_request>:
1000f0f0:	b570      	push	{r4, r5, r6, lr}
1000f0f2:	4b0c      	ldr	r3, [pc, #48]	; (1000f124 <at_ble_send_slave_sec_request+0x34>)
1000f0f4:	1c0e      	adds	r6, r1, #0
1000f0f6:	2100      	movs	r1, #0
1000f0f8:	1c05      	adds	r5, r0, #0
1000f0fa:	1c14      	adds	r4, r2, #0
1000f0fc:	4798      	blx	r3
1000f0fe:	2301      	movs	r3, #1
1000f100:	2807      	cmp	r0, #7
1000f102:	d80d      	bhi.n	1000f120 <at_ble_send_slave_sec_request+0x30>
1000f104:	3311      	adds	r3, #17
1000f106:	4358      	muls	r0, r3
1000f108:	4b07      	ldr	r3, [pc, #28]	; (1000f128 <at_ble_send_slave_sec_request+0x38>)
1000f10a:	5cc2      	ldrb	r2, [r0, r3]
1000f10c:	23e0      	movs	r3, #224	; 0xe0
1000f10e:	2a01      	cmp	r2, #1
1000f110:	d106      	bne.n	1000f120 <at_ble_send_slave_sec_request+0x30>
1000f112:	00b1      	lsls	r1, r6, #2
1000f114:	430c      	orrs	r4, r1
1000f116:	4b05      	ldr	r3, [pc, #20]	; (1000f12c <at_ble_send_slave_sec_request+0x3c>)
1000f118:	b2e1      	uxtb	r1, r4
1000f11a:	1c28      	adds	r0, r5, #0
1000f11c:	4798      	blx	r3
1000f11e:	2300      	movs	r3, #0
1000f120:	1c18      	adds	r0, r3, #0
1000f122:	bd70      	pop	{r4, r5, r6, pc}
1000f124:	1000f445 	.word	0x1000f445
1000f128:	1001df72 	.word	0x1001df72
1000f12c:	1000fa81 	.word	0x1000fa81

1000f130 <at_ble_encryption_start>:
1000f130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f132:	23cf      	movs	r3, #207	; 0xcf
1000f134:	2900      	cmp	r1, #0
1000f136:	d02b      	beq.n	1000f190 <at_ble_encryption_start+0x60>
1000f138:	2a05      	cmp	r2, #5
1000f13a:	d829      	bhi.n	1000f190 <at_ble_encryption_start+0x60>
1000f13c:	2701      	movs	r7, #1
1000f13e:	1c3d      	adds	r5, r7, #0
1000f140:	2433      	movs	r4, #51	; 0x33
1000f142:	4095      	lsls	r5, r2
1000f144:	4225      	tst	r5, r4
1000f146:	d023      	beq.n	1000f190 <at_ble_encryption_start+0x60>
1000f148:	7e8c      	ldrb	r4, [r1, #26]
1000f14a:	3c07      	subs	r4, #7
1000f14c:	2c09      	cmp	r4, #9
1000f14e:	d81f      	bhi.n	1000f190 <at_ble_encryption_start+0x60>
1000f150:	4b10      	ldr	r3, [pc, #64]	; (1000f194 <at_ble_encryption_start+0x64>)
1000f152:	1c0c      	adds	r4, r1, #0
1000f154:	2100      	movs	r1, #0
1000f156:	1c15      	adds	r5, r2, #0
1000f158:	1c06      	adds	r6, r0, #0
1000f15a:	4798      	blx	r3
1000f15c:	1c3b      	adds	r3, r7, #0
1000f15e:	2807      	cmp	r0, #7
1000f160:	d816      	bhi.n	1000f190 <at_ble_encryption_start+0x60>
1000f162:	2312      	movs	r3, #18
1000f164:	4358      	muls	r0, r3
1000f166:	4b0c      	ldr	r3, [pc, #48]	; (1000f198 <at_ble_encryption_start+0x68>)
1000f168:	5cc7      	ldrb	r7, [r0, r3]
1000f16a:	23e0      	movs	r3, #224	; 0xe0
1000f16c:	2f00      	cmp	r7, #0
1000f16e:	d10f      	bne.n	1000f190 <at_ble_encryption_start+0x60>
1000f170:	1c21      	adds	r1, r4, #0
1000f172:	221c      	movs	r2, #28
1000f174:	4b09      	ldr	r3, [pc, #36]	; (1000f19c <at_ble_encryption_start+0x6c>)
1000f176:	480a      	ldr	r0, [pc, #40]	; (1000f1a0 <at_ble_encryption_start+0x70>)
1000f178:	4798      	blx	r3
1000f17a:	1c23      	adds	r3, r4, #0
1000f17c:	7ea1      	ldrb	r1, [r4, #26]
1000f17e:	8a22      	ldrh	r2, [r4, #16]
1000f180:	3312      	adds	r3, #18
1000f182:	9100      	str	r1, [sp, #0]
1000f184:	9501      	str	r5, [sp, #4]
1000f186:	1c21      	adds	r1, r4, #0
1000f188:	1c30      	adds	r0, r6, #0
1000f18a:	4c06      	ldr	r4, [pc, #24]	; (1000f1a4 <at_ble_encryption_start+0x74>)
1000f18c:	47a0      	blx	r4
1000f18e:	1c3b      	adds	r3, r7, #0
1000f190:	1c18      	adds	r0, r3, #0
1000f192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f194:	1000f445 	.word	0x1000f445
1000f198:	1001df72 	.word	0x1001df72
1000f19c:	100180cf 	.word	0x100180cf
1000f1a0:	1001e080 	.word	0x1001e080
1000f1a4:	1000fac1 	.word	0x1000fac1

1000f1a8 <at_ble_encryption_request_reply>:
1000f1a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f1aa:	24cf      	movs	r4, #207	; 0xcf
1000f1ac:	2b00      	cmp	r3, #0
1000f1ae:	d011      	beq.n	1000f1d4 <at_ble_encryption_request_reply+0x2c>
1000f1b0:	2a00      	cmp	r2, #0
1000f1b2:	d00a      	beq.n	1000f1ca <at_ble_encryption_request_reply+0x22>
1000f1b4:	2905      	cmp	r1, #5
1000f1b6:	d80d      	bhi.n	1000f1d4 <at_ble_encryption_request_reply+0x2c>
1000f1b8:	2501      	movs	r5, #1
1000f1ba:	2633      	movs	r6, #51	; 0x33
1000f1bc:	408d      	lsls	r5, r1
1000f1be:	4235      	tst	r5, r6
1000f1c0:	d008      	beq.n	1000f1d4 <at_ble_encryption_request_reply+0x2c>
1000f1c2:	7e9d      	ldrb	r5, [r3, #26]
1000f1c4:	3d07      	subs	r5, #7
1000f1c6:	2d09      	cmp	r5, #9
1000f1c8:	d804      	bhi.n	1000f1d4 <at_ble_encryption_request_reply+0x2c>
1000f1ca:	7e9c      	ldrb	r4, [r3, #26]
1000f1cc:	9400      	str	r4, [sp, #0]
1000f1ce:	4c02      	ldr	r4, [pc, #8]	; (1000f1d8 <at_ble_encryption_request_reply+0x30>)
1000f1d0:	47a0      	blx	r4
1000f1d2:	2400      	movs	r4, #0
1000f1d4:	1c20      	adds	r0, r4, #0
1000f1d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f1d8:	1000fb7d 	.word	0x1000fb7d

1000f1dc <rx_callback>:
1000f1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f1de:	8883      	ldrh	r3, [r0, #4]
1000f1e0:	1c01      	adds	r1, r0, #0
1000f1e2:	9301      	str	r3, [sp, #4]
1000f1e4:	88c5      	ldrh	r5, [r0, #6]
1000f1e6:	8806      	ldrh	r6, [r0, #0]
1000f1e8:	2d00      	cmp	r5, #0
1000f1ea:	d10f      	bne.n	1000f20c <rx_callback+0x30>
1000f1ec:	1c19      	adds	r1, r3, #0
1000f1ee:	1c30      	adds	r0, r6, #0
1000f1f0:	4b19      	ldr	r3, [pc, #100]	; (1000f258 <rx_callback+0x7c>)
1000f1f2:	1c2a      	adds	r2, r5, #0
1000f1f4:	4798      	blx	r3
1000f1f6:	1e03      	subs	r3, r0, #0
1000f1f8:	d105      	bne.n	1000f206 <rx_callback+0x2a>
1000f1fa:	1c30      	adds	r0, r6, #0
1000f1fc:	9901      	ldr	r1, [sp, #4]
1000f1fe:	1c1a      	adds	r2, r3, #0
1000f200:	4c16      	ldr	r4, [pc, #88]	; (1000f25c <rx_callback+0x80>)
1000f202:	47a0      	blx	r4
1000f204:	e027      	b.n	1000f256 <rx_callback+0x7a>
1000f206:	4b16      	ldr	r3, [pc, #88]	; (1000f260 <rx_callback+0x84>)
1000f208:	4798      	blx	r3
1000f20a:	e024      	b.n	1000f256 <rx_callback+0x7a>
1000f20c:	4c15      	ldr	r4, [pc, #84]	; (1000f264 <rx_callback+0x88>)
1000f20e:	4a16      	ldr	r2, [pc, #88]	; (1000f268 <rx_callback+0x8c>)
1000f210:	6823      	ldr	r3, [r4, #0]
1000f212:	6812      	ldr	r2, [r2, #0]
1000f214:	18eb      	adds	r3, r5, r3
1000f216:	4293      	cmp	r3, r2
1000f218:	d901      	bls.n	1000f21e <rx_callback+0x42>
1000f21a:	2300      	movs	r3, #0
1000f21c:	6023      	str	r3, [r4, #0]
1000f21e:	4f13      	ldr	r7, [pc, #76]	; (1000f26c <rx_callback+0x90>)
1000f220:	6822      	ldr	r2, [r4, #0]
1000f222:	683b      	ldr	r3, [r7, #0]
1000f224:	3108      	adds	r1, #8
1000f226:	1898      	adds	r0, r3, r2
1000f228:	1c2a      	adds	r2, r5, #0
1000f22a:	4b11      	ldr	r3, [pc, #68]	; (1000f270 <rx_callback+0x94>)
1000f22c:	4798      	blx	r3
1000f22e:	683b      	ldr	r3, [r7, #0]
1000f230:	6822      	ldr	r2, [r4, #0]
1000f232:	1c30      	adds	r0, r6, #0
1000f234:	189a      	adds	r2, r3, r2
1000f236:	9901      	ldr	r1, [sp, #4]
1000f238:	4b07      	ldr	r3, [pc, #28]	; (1000f258 <rx_callback+0x7c>)
1000f23a:	4798      	blx	r3
1000f23c:	2800      	cmp	r0, #0
1000f23e:	d1e2      	bne.n	1000f206 <rx_callback+0x2a>
1000f240:	6823      	ldr	r3, [r4, #0]
1000f242:	683a      	ldr	r2, [r7, #0]
1000f244:	1c30      	adds	r0, r6, #0
1000f246:	18d2      	adds	r2, r2, r3
1000f248:	9901      	ldr	r1, [sp, #4]
1000f24a:	1c2b      	adds	r3, r5, #0
1000f24c:	4e03      	ldr	r6, [pc, #12]	; (1000f25c <rx_callback+0x80>)
1000f24e:	47b0      	blx	r6
1000f250:	6823      	ldr	r3, [r4, #0]
1000f252:	18ed      	adds	r5, r5, r3
1000f254:	6025      	str	r5, [r4, #0]
1000f256:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f258:	1000e0c9 	.word	0x1000e0c9
1000f25c:	1000e041 	.word	0x1000e041
1000f260:	1000c67d 	.word	0x1000c67d
1000f264:	1001e0dc 	.word	0x1001e0dc
1000f268:	1001cf20 	.word	0x1001cf20
1000f26c:	1001cf1c 	.word	0x1001cf1c
1000f270:	100180cf 	.word	0x100180cf

1000f274 <interface_send>:
1000f274:	b508      	push	{r3, lr}
1000f276:	4b02      	ldr	r3, [pc, #8]	; (1000f280 <interface_send+0xc>)
1000f278:	4798      	blx	r3
1000f27a:	2000      	movs	r0, #0
1000f27c:	bd08      	pop	{r3, pc}
1000f27e:	46c0      	nop			; (mov r8, r8)
1000f280:	1000c361 	.word	0x1000c361

1000f284 <interface_init>:
1000f284:	2280      	movs	r2, #128	; 0x80
1000f286:	b510      	push	{r4, lr}
1000f288:	2100      	movs	r1, #0
1000f28a:	1c04      	adds	r4, r0, #0
1000f28c:	0092      	lsls	r2, r2, #2
1000f28e:	4b08      	ldr	r3, [pc, #32]	; (1000f2b0 <interface_init+0x2c>)
1000f290:	4808      	ldr	r0, [pc, #32]	; (1000f2b4 <interface_init+0x30>)
1000f292:	4798      	blx	r3
1000f294:	2200      	movs	r2, #0
1000f296:	4b08      	ldr	r3, [pc, #32]	; (1000f2b8 <interface_init+0x34>)
1000f298:	601a      	str	r2, [r3, #0]
1000f29a:	4a08      	ldr	r2, [pc, #32]	; (1000f2bc <interface_init+0x38>)
1000f29c:	4b08      	ldr	r3, [pc, #32]	; (1000f2c0 <interface_init+0x3c>)
1000f29e:	601a      	str	r2, [r3, #0]
1000f2a0:	4b08      	ldr	r3, [pc, #32]	; (1000f2c4 <interface_init+0x40>)
1000f2a2:	6922      	ldr	r2, [r4, #16]
1000f2a4:	601a      	str	r2, [r3, #0]
1000f2a6:	6962      	ldr	r2, [r4, #20]
1000f2a8:	4b07      	ldr	r3, [pc, #28]	; (1000f2c8 <interface_init+0x44>)
1000f2aa:	601a      	str	r2, [r3, #0]
1000f2ac:	bd10      	pop	{r4, pc}
1000f2ae:	46c0      	nop			; (mov r8, r8)
1000f2b0:	1001810b 	.word	0x1001810b
1000f2b4:	1001e2e0 	.word	0x1001e2e0
1000f2b8:	1001e0dc 	.word	0x1001e0dc
1000f2bc:	1001e0e0 	.word	0x1001e0e0
1000f2c0:	1001b3fc 	.word	0x1001b3fc
1000f2c4:	1001cf1c 	.word	0x1001cf1c
1000f2c8:	1001cf20 	.word	0x1001cf20

1000f2cc <platform_cmd_cmpl_signal>:
1000f2cc:	2201      	movs	r2, #1
1000f2ce:	4b01      	ldr	r3, [pc, #4]	; (1000f2d4 <platform_cmd_cmpl_signal+0x8>)
1000f2d0:	601a      	str	r2, [r3, #0]
1000f2d2:	4770      	bx	lr
1000f2d4:	1001cf24 	.word	0x1001cf24

1000f2d8 <platform_cmd_cmpl_wait>:
1000f2d8:	b510      	push	{r4, lr}
1000f2da:	1c04      	adds	r4, r0, #0
1000f2dc:	4b07      	ldr	r3, [pc, #28]	; (1000f2fc <platform_cmd_cmpl_wait+0x24>)
1000f2de:	681a      	ldr	r2, [r3, #0]
1000f2e0:	2a01      	cmp	r2, #1
1000f2e2:	d003      	beq.n	1000f2ec <platform_cmd_cmpl_wait+0x14>
1000f2e4:	4b06      	ldr	r3, [pc, #24]	; (1000f300 <platform_cmd_cmpl_wait+0x28>)
1000f2e6:	2000      	movs	r0, #0
1000f2e8:	4798      	blx	r3
1000f2ea:	e7f7      	b.n	1000f2dc <platform_cmd_cmpl_wait+0x4>
1000f2ec:	6819      	ldr	r1, [r3, #0]
1000f2ee:	2901      	cmp	r1, #1
1000f2f0:	d102      	bne.n	1000f2f8 <platform_cmd_cmpl_wait+0x20>
1000f2f2:	2200      	movs	r2, #0
1000f2f4:	601a      	str	r2, [r3, #0]
1000f2f6:	e000      	b.n	1000f2fa <platform_cmd_cmpl_wait+0x22>
1000f2f8:	7022      	strb	r2, [r4, #0]
1000f2fa:	bd10      	pop	{r4, pc}
1000f2fc:	1001cf24 	.word	0x1001cf24
1000f300:	1000c3ed 	.word	0x1000c3ed

1000f304 <start_timer>:
1000f304:	4770      	bx	lr

1000f306 <stop_timer>:
1000f306:	4770      	bx	lr

1000f308 <dbg_le_set_bd_addr_req_handler>:
1000f308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f30a:	466b      	mov	r3, sp
1000f30c:	1dde      	adds	r6, r3, #7
1000f30e:	2300      	movs	r3, #0
1000f310:	7033      	strb	r3, [r6, #0]
1000f312:	230f      	movs	r3, #15
1000f314:	4c13      	ldr	r4, [pc, #76]	; (1000f364 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f316:	2703      	movs	r7, #3
1000f318:	7023      	strb	r3, [r4, #0]
1000f31a:	2300      	movs	r3, #0
1000f31c:	70e3      	strb	r3, [r4, #3]
1000f31e:	4b12      	ldr	r3, [pc, #72]	; (1000f368 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f320:	1c01      	adds	r1, r0, #0
1000f322:	881a      	ldrh	r2, [r3, #0]
1000f324:	881b      	ldrh	r3, [r3, #0]
1000f326:	7122      	strb	r2, [r4, #4]
1000f328:	0a1b      	lsrs	r3, r3, #8
1000f32a:	2206      	movs	r2, #6
1000f32c:	7163      	strb	r3, [r4, #5]
1000f32e:	480f      	ldr	r0, [pc, #60]	; (1000f36c <dbg_le_set_bd_addr_req_handler+0x64>)
1000f330:	4b0f      	ldr	r3, [pc, #60]	; (1000f370 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f332:	7067      	strb	r7, [r4, #1]
1000f334:	70a7      	strb	r7, [r4, #2]
1000f336:	4798      	blx	r3
1000f338:	4d0e      	ldr	r5, [pc, #56]	; (1000f374 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f33a:	4b0f      	ldr	r3, [pc, #60]	; (1000f378 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f33c:	210e      	movs	r1, #14
1000f33e:	802b      	strh	r3, [r5, #0]
1000f340:	2306      	movs	r3, #6
1000f342:	71a3      	strb	r3, [r4, #6]
1000f344:	2300      	movs	r3, #0
1000f346:	1c20      	adds	r0, r4, #0
1000f348:	71e3      	strb	r3, [r4, #7]
1000f34a:	4b0c      	ldr	r3, [pc, #48]	; (1000f37c <dbg_le_set_bd_addr_req_handler+0x74>)
1000f34c:	80af      	strh	r7, [r5, #4]
1000f34e:	4798      	blx	r3
1000f350:	1c30      	adds	r0, r6, #0
1000f352:	4b0b      	ldr	r3, [pc, #44]	; (1000f380 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f354:	4798      	blx	r3
1000f356:	7833      	ldrb	r3, [r6, #0]
1000f358:	20e2      	movs	r0, #226	; 0xe2
1000f35a:	2b00      	cmp	r3, #0
1000f35c:	d101      	bne.n	1000f362 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f35e:	68ab      	ldr	r3, [r5, #8]
1000f360:	7818      	ldrb	r0, [r3, #0]
1000f362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f364:	1001e2e0 	.word	0x1001e2e0
1000f368:	1001df70 	.word	0x1001df70
1000f36c:	1001e2e8 	.word	0x1001e2e8
1000f370:	100180cf 	.word	0x100180cf
1000f374:	1001df64 	.word	0x1001df64
1000f378:	00000329 	.word	0x00000329
1000f37c:	1000f275 	.word	0x1000f275
1000f380:	1000f2d9 	.word	0x1000f2d9

1000f384 <gapc_get_dev_info_cfm.constprop.1>:
1000f384:	b538      	push	{r3, r4, r5, lr}
1000f386:	230b      	movs	r3, #11
1000f388:	4c27      	ldr	r4, [pc, #156]	; (1000f428 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f38a:	7023      	strb	r3, [r4, #0]
1000f38c:	3303      	adds	r3, #3
1000f38e:	7063      	strb	r3, [r4, #1]
1000f390:	3329      	adds	r3, #41	; 0x29
1000f392:	70a3      	strb	r3, [r4, #2]
1000f394:	4b25      	ldr	r3, [pc, #148]	; (1000f42c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f396:	70e1      	strb	r1, [r4, #3]
1000f398:	881a      	ldrh	r2, [r3, #0]
1000f39a:	881b      	ldrh	r3, [r3, #0]
1000f39c:	7122      	strb	r2, [r4, #4]
1000f39e:	0a1b      	lsrs	r3, r3, #8
1000f3a0:	7163      	strb	r3, [r4, #5]
1000f3a2:	2300      	movs	r3, #0
1000f3a4:	7220      	strb	r0, [r4, #8]
1000f3a6:	7263      	strb	r3, [r4, #9]
1000f3a8:	2801      	cmp	r0, #1
1000f3aa:	d02b      	beq.n	1000f404 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f3ac:	4298      	cmp	r0, r3
1000f3ae:	d01b      	beq.n	1000f3e8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f3b0:	2802      	cmp	r0, #2
1000f3b2:	d12f      	bne.n	1000f414 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f3b4:	4b1e      	ldr	r3, [pc, #120]	; (1000f430 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f3b6:	2112      	movs	r1, #18
1000f3b8:	1c1a      	adds	r2, r3, #0
1000f3ba:	32ce      	adds	r2, #206	; 0xce
1000f3bc:	8812      	ldrh	r2, [r2, #0]
1000f3be:	72a2      	strb	r2, [r4, #10]
1000f3c0:	0a12      	lsrs	r2, r2, #8
1000f3c2:	72e2      	strb	r2, [r4, #11]
1000f3c4:	1c1a      	adds	r2, r3, #0
1000f3c6:	32d0      	adds	r2, #208	; 0xd0
1000f3c8:	8812      	ldrh	r2, [r2, #0]
1000f3ca:	7322      	strb	r2, [r4, #12]
1000f3cc:	0a12      	lsrs	r2, r2, #8
1000f3ce:	7362      	strb	r2, [r4, #13]
1000f3d0:	1c1a      	adds	r2, r3, #0
1000f3d2:	32d2      	adds	r2, #210	; 0xd2
1000f3d4:	8812      	ldrh	r2, [r2, #0]
1000f3d6:	33d4      	adds	r3, #212	; 0xd4
1000f3d8:	73a2      	strb	r2, [r4, #14]
1000f3da:	0a12      	lsrs	r2, r2, #8
1000f3dc:	73e2      	strb	r2, [r4, #15]
1000f3de:	881b      	ldrh	r3, [r3, #0]
1000f3e0:	7423      	strb	r3, [r4, #16]
1000f3e2:	0a1b      	lsrs	r3, r3, #8
1000f3e4:	7463      	strb	r3, [r4, #17]
1000f3e6:	e016      	b.n	1000f416 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f3e8:	4b11      	ldr	r3, [pc, #68]	; (1000f430 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f3ea:	4912      	ldr	r1, [pc, #72]	; (1000f434 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f3ec:	33aa      	adds	r3, #170	; 0xaa
1000f3ee:	881d      	ldrh	r5, [r3, #0]
1000f3f0:	4811      	ldr	r0, [pc, #68]	; (1000f438 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f3f2:	0a2b      	lsrs	r3, r5, #8
1000f3f4:	72a5      	strb	r5, [r4, #10]
1000f3f6:	72e3      	strb	r3, [r4, #11]
1000f3f8:	1c2a      	adds	r2, r5, #0
1000f3fa:	4b10      	ldr	r3, [pc, #64]	; (1000f43c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f3fc:	350c      	adds	r5, #12
1000f3fe:	4798      	blx	r3
1000f400:	b2a9      	uxth	r1, r5
1000f402:	e008      	b.n	1000f416 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f404:	4b0a      	ldr	r3, [pc, #40]	; (1000f430 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f406:	210c      	movs	r1, #12
1000f408:	33cc      	adds	r3, #204	; 0xcc
1000f40a:	881b      	ldrh	r3, [r3, #0]
1000f40c:	72a3      	strb	r3, [r4, #10]
1000f40e:	0a1b      	lsrs	r3, r3, #8
1000f410:	72e3      	strb	r3, [r4, #11]
1000f412:	e000      	b.n	1000f416 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f414:	210a      	movs	r1, #10
1000f416:	1c0b      	adds	r3, r1, #0
1000f418:	3b08      	subs	r3, #8
1000f41a:	71a3      	strb	r3, [r4, #6]
1000f41c:	121b      	asrs	r3, r3, #8
1000f41e:	71e3      	strb	r3, [r4, #7]
1000f420:	1c20      	adds	r0, r4, #0
1000f422:	4b07      	ldr	r3, [pc, #28]	; (1000f440 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f424:	4798      	blx	r3
1000f426:	bd38      	pop	{r3, r4, r5, pc}
1000f428:	1001e2e0 	.word	0x1001e2e0
1000f42c:	1001df70 	.word	0x1001df70
1000f430:	1001e002 	.word	0x1001e002
1000f434:	1001e0ae 	.word	0x1001e0ae
1000f438:	1001e2ec 	.word	0x1001e2ec
1000f43c:	100180cf 	.word	0x100180cf
1000f440:	1000f275 	.word	0x1000f275

1000f444 <check_ConnData_idx_role>:
1000f444:	4b0c      	ldr	r3, [pc, #48]	; (1000f478 <check_ConnData_idx_role+0x34>)
1000f446:	b570      	push	{r4, r5, r6, lr}
1000f448:	1c04      	adds	r4, r0, #0
1000f44a:	2008      	movs	r0, #8
1000f44c:	429c      	cmp	r4, r3
1000f44e:	d011      	beq.n	1000f474 <check_ConnData_idx_role+0x30>
1000f450:	2300      	movs	r3, #0
1000f452:	2212      	movs	r2, #18
1000f454:	435a      	muls	r2, r3
1000f456:	4d09      	ldr	r5, [pc, #36]	; (1000f47c <check_ConnData_idx_role+0x38>)
1000f458:	b2d8      	uxtb	r0, r3
1000f45a:	1956      	adds	r6, r2, r5
1000f45c:	8976      	ldrh	r6, [r6, #10]
1000f45e:	42a6      	cmp	r6, r4
1000f460:	d104      	bne.n	1000f46c <check_ConnData_idx_role+0x28>
1000f462:	2900      	cmp	r1, #0
1000f464:	d006      	beq.n	1000f474 <check_ConnData_idx_role+0x30>
1000f466:	5d53      	ldrb	r3, [r2, r5]
1000f468:	700b      	strb	r3, [r1, #0]
1000f46a:	e003      	b.n	1000f474 <check_ConnData_idx_role+0x30>
1000f46c:	3301      	adds	r3, #1
1000f46e:	2b08      	cmp	r3, #8
1000f470:	d1ef      	bne.n	1000f452 <check_ConnData_idx_role+0xe>
1000f472:	1c18      	adds	r0, r3, #0
1000f474:	bd70      	pop	{r4, r5, r6, pc}
1000f476:	46c0      	nop			; (mov r8, r8)
1000f478:	0000ffff 	.word	0x0000ffff
1000f47c:	1001df72 	.word	0x1001df72

1000f480 <check_ConnData_emptyEntry>:
1000f480:	2300      	movs	r3, #0
1000f482:	2212      	movs	r2, #18
1000f484:	435a      	muls	r2, r3
1000f486:	4906      	ldr	r1, [pc, #24]	; (1000f4a0 <check_ConnData_emptyEntry+0x20>)
1000f488:	b2d8      	uxtb	r0, r3
1000f48a:	1852      	adds	r2, r2, r1
1000f48c:	8951      	ldrh	r1, [r2, #10]
1000f48e:	4a05      	ldr	r2, [pc, #20]	; (1000f4a4 <check_ConnData_emptyEntry+0x24>)
1000f490:	4291      	cmp	r1, r2
1000f492:	d003      	beq.n	1000f49c <check_ConnData_emptyEntry+0x1c>
1000f494:	3301      	adds	r3, #1
1000f496:	2b08      	cmp	r3, #8
1000f498:	d1f3      	bne.n	1000f482 <check_ConnData_emptyEntry+0x2>
1000f49a:	1c18      	adds	r0, r3, #0
1000f49c:	4770      	bx	lr
1000f49e:	46c0      	nop			; (mov r8, r8)
1000f4a0:	1001df72 	.word	0x1001df72
1000f4a4:	0000ffff 	.word	0x0000ffff

1000f4a8 <gapc_cmp_evt>:
1000f4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f4aa:	780b      	ldrb	r3, [r1, #0]
1000f4ac:	1c05      	adds	r5, r0, #0
1000f4ae:	1e58      	subs	r0, r3, #1
1000f4b0:	784e      	ldrb	r6, [r1, #1]
1000f4b2:	280f      	cmp	r0, #15
1000f4b4:	d85a      	bhi.n	1000f56c <gapc_cmp_evt+0xc4>
1000f4b6:	1c14      	adds	r4, r2, #0
1000f4b8:	f005 fc72 	bl	10014da0 <__gnu_thumb1_case_uqi>
1000f4bc:	5858440a 	.word	0x5858440a
1000f4c0:	4b584444 	.word	0x4b584444
1000f4c4:	0825122d 	.word	0x0825122d
1000f4c8:	3e395858 	.word	0x3e395858
1000f4cc:	203b      	movs	r0, #59	; 0x3b
1000f4ce:	e04e      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f4d0:	203b      	movs	r0, #59	; 0x3b
1000f4d2:	2e00      	cmp	r6, #0
1000f4d4:	d04b      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f4d6:	0a2d      	lsrs	r5, r5, #8
1000f4d8:	8015      	strh	r5, [r2, #0]
1000f4da:	7096      	strb	r6, [r2, #2]
1000f4dc:	3835      	subs	r0, #53	; 0x35
1000f4de:	e046      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f4e0:	466b      	mov	r3, sp
1000f4e2:	1ddf      	adds	r7, r3, #7
1000f4e4:	2301      	movs	r3, #1
1000f4e6:	0a2d      	lsrs	r5, r5, #8
1000f4e8:	703b      	strb	r3, [r7, #0]
1000f4ea:	1c28      	adds	r0, r5, #0
1000f4ec:	1c39      	adds	r1, r7, #0
1000f4ee:	4b20      	ldr	r3, [pc, #128]	; (1000f570 <gapc_cmp_evt+0xc8>)
1000f4f0:	4798      	blx	r3
1000f4f2:	2807      	cmp	r0, #7
1000f4f4:	d803      	bhi.n	1000f4fe <gapc_cmp_evt+0x56>
1000f4f6:	783b      	ldrb	r3, [r7, #0]
1000f4f8:	203b      	movs	r0, #59	; 0x3b
1000f4fa:	2b00      	cmp	r3, #0
1000f4fc:	d037      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f4fe:	8065      	strh	r5, [r4, #2]
1000f500:	7126      	strb	r6, [r4, #4]
1000f502:	2009      	movs	r0, #9
1000f504:	e033      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f506:	203b      	movs	r0, #59	; 0x3b
1000f508:	2e00      	cmp	r6, #0
1000f50a:	d030      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f50c:	0a2d      	lsrs	r5, r5, #8
1000f50e:	8015      	strh	r5, [r2, #0]
1000f510:	7096      	strb	r6, [r2, #2]
1000f512:	382d      	subs	r0, #45	; 0x2d
1000f514:	e02b      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f516:	203b      	movs	r0, #59	; 0x3b
1000f518:	2e00      	cmp	r6, #0
1000f51a:	d028      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f51c:	2300      	movs	r3, #0
1000f51e:	0a2d      	lsrs	r5, r5, #8
1000f520:	8015      	strh	r5, [r2, #0]
1000f522:	7096      	strb	r6, [r2, #2]
1000f524:	8093      	strh	r3, [r2, #4]
1000f526:	80d3      	strh	r3, [r2, #6]
1000f528:	8113      	strh	r3, [r2, #8]
1000f52a:	3834      	subs	r0, #52	; 0x34
1000f52c:	e01f      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f52e:	203b      	movs	r0, #59	; 0x3b
1000f530:	2e00      	cmp	r6, #0
1000f532:	d01c      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f534:	7216      	strb	r6, [r2, #8]
1000f536:	e003      	b.n	1000f540 <gapc_cmp_evt+0x98>
1000f538:	203b      	movs	r0, #59	; 0x3b
1000f53a:	2e00      	cmp	r6, #0
1000f53c:	d017      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f53e:	7116      	strb	r6, [r2, #4]
1000f540:	3812      	subs	r0, #18
1000f542:	e014      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f544:	203b      	movs	r0, #59	; 0x3b
1000f546:	2e00      	cmp	r6, #0
1000f548:	d011      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f54a:	7093      	strb	r3, [r2, #2]
1000f54c:	70d6      	strb	r6, [r2, #3]
1000f54e:	382a      	subs	r0, #42	; 0x2a
1000f550:	e00d      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f552:	203b      	movs	r0, #59	; 0x3b
1000f554:	2e00      	cmp	r6, #0
1000f556:	d00a      	beq.n	1000f56e <gapc_cmp_evt+0xc6>
1000f558:	0a2d      	lsrs	r5, r5, #8
1000f55a:	7016      	strb	r6, [r2, #0]
1000f55c:	8055      	strh	r5, [r2, #2]
1000f55e:	1d10      	adds	r0, r2, #4
1000f560:	2100      	movs	r1, #0
1000f562:	2205      	movs	r2, #5
1000f564:	4b03      	ldr	r3, [pc, #12]	; (1000f574 <gapc_cmp_evt+0xcc>)
1000f566:	4798      	blx	r3
1000f568:	2012      	movs	r0, #18
1000f56a:	e000      	b.n	1000f56e <gapc_cmp_evt+0xc6>
1000f56c:	2000      	movs	r0, #0
1000f56e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f570:	1000f445 	.word	0x1000f445
1000f574:	1001810b 	.word	0x1001810b

1000f578 <gapc_connection_cfm_handler>:
1000f578:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f57a:	b085      	sub	sp, #20
1000f57c:	1c1d      	adds	r5, r3, #0
1000f57e:	ab0a      	add	r3, sp, #40	; 0x28
1000f580:	781b      	ldrb	r3, [r3, #0]
1000f582:	9201      	str	r2, [sp, #4]
1000f584:	9302      	str	r3, [sp, #8]
1000f586:	ab0b      	add	r3, sp, #44	; 0x2c
1000f588:	781b      	ldrb	r3, [r3, #0]
1000f58a:	1c07      	adds	r7, r0, #0
1000f58c:	9303      	str	r3, [sp, #12]
1000f58e:	ab0c      	add	r3, sp, #48	; 0x30
1000f590:	881a      	ldrh	r2, [r3, #0]
1000f592:	2302      	movs	r3, #2
1000f594:	1c0e      	adds	r6, r1, #0
1000f596:	4c23      	ldr	r4, [pc, #140]	; (1000f624 <gapc_connection_cfm_handler+0xac>)
1000f598:	1c39      	adds	r1, r7, #0
1000f59a:	7023      	strb	r3, [r4, #0]
1000f59c:	330c      	adds	r3, #12
1000f59e:	7063      	strb	r3, [r4, #1]
1000f5a0:	70a3      	strb	r3, [r4, #2]
1000f5a2:	4b21      	ldr	r3, [pc, #132]	; (1000f628 <gapc_connection_cfm_handler+0xb0>)
1000f5a4:	70e2      	strb	r2, [r4, #3]
1000f5a6:	881a      	ldrh	r2, [r3, #0]
1000f5a8:	881b      	ldrh	r3, [r3, #0]
1000f5aa:	7122      	strb	r2, [r4, #4]
1000f5ac:	0a1b      	lsrs	r3, r3, #8
1000f5ae:	4f1f      	ldr	r7, [pc, #124]	; (1000f62c <gapc_connection_cfm_handler+0xb4>)
1000f5b0:	2210      	movs	r2, #16
1000f5b2:	481f      	ldr	r0, [pc, #124]	; (1000f630 <gapc_connection_cfm_handler+0xb8>)
1000f5b4:	7163      	strb	r3, [r4, #5]
1000f5b6:	47b8      	blx	r7
1000f5b8:	0a33      	lsrs	r3, r6, #8
1000f5ba:	7626      	strb	r6, [r4, #24]
1000f5bc:	7663      	strb	r3, [r4, #25]
1000f5be:	9901      	ldr	r1, [sp, #4]
1000f5c0:	0c33      	lsrs	r3, r6, #16
1000f5c2:	2210      	movs	r2, #16
1000f5c4:	0e36      	lsrs	r6, r6, #24
1000f5c6:	481b      	ldr	r0, [pc, #108]	; (1000f634 <gapc_connection_cfm_handler+0xbc>)
1000f5c8:	76a3      	strb	r3, [r4, #26]
1000f5ca:	76e6      	strb	r6, [r4, #27]
1000f5cc:	47b8      	blx	r7
1000f5ce:	1c23      	adds	r3, r4, #0
1000f5d0:	332c      	adds	r3, #44	; 0x2c
1000f5d2:	701d      	strb	r5, [r3, #0]
1000f5d4:	1c23      	adds	r3, r4, #0
1000f5d6:	0a2a      	lsrs	r2, r5, #8
1000f5d8:	332d      	adds	r3, #45	; 0x2d
1000f5da:	701a      	strb	r2, [r3, #0]
1000f5dc:	1c23      	adds	r3, r4, #0
1000f5de:	0c2a      	lsrs	r2, r5, #16
1000f5e0:	332e      	adds	r3, #46	; 0x2e
1000f5e2:	701a      	strb	r2, [r3, #0]
1000f5e4:	1c23      	adds	r3, r4, #0
1000f5e6:	0e2d      	lsrs	r5, r5, #24
1000f5e8:	332f      	adds	r3, #47	; 0x2f
1000f5ea:	466a      	mov	r2, sp
1000f5ec:	701d      	strb	r5, [r3, #0]
1000f5ee:	1c23      	adds	r3, r4, #0
1000f5f0:	7a12      	ldrb	r2, [r2, #8]
1000f5f2:	3330      	adds	r3, #48	; 0x30
1000f5f4:	701a      	strb	r2, [r3, #0]
1000f5f6:	1c23      	adds	r3, r4, #0
1000f5f8:	2500      	movs	r5, #0
1000f5fa:	3331      	adds	r3, #49	; 0x31
1000f5fc:	466a      	mov	r2, sp
1000f5fe:	701d      	strb	r5, [r3, #0]
1000f600:	1c23      	adds	r3, r4, #0
1000f602:	7b12      	ldrb	r2, [r2, #12]
1000f604:	3332      	adds	r3, #50	; 0x32
1000f606:	701a      	strb	r2, [r3, #0]
1000f608:	1c23      	adds	r3, r4, #0
1000f60a:	3333      	adds	r3, #51	; 0x33
1000f60c:	701d      	strb	r5, [r3, #0]
1000f60e:	232c      	movs	r3, #44	; 0x2c
1000f610:	1c20      	adds	r0, r4, #0
1000f612:	71a3      	strb	r3, [r4, #6]
1000f614:	2134      	movs	r1, #52	; 0x34
1000f616:	4b08      	ldr	r3, [pc, #32]	; (1000f638 <gapc_connection_cfm_handler+0xc0>)
1000f618:	71e5      	strb	r5, [r4, #7]
1000f61a:	4798      	blx	r3
1000f61c:	1c28      	adds	r0, r5, #0
1000f61e:	b005      	add	sp, #20
1000f620:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f622:	46c0      	nop			; (mov r8, r8)
1000f624:	1001e2e0 	.word	0x1001e2e0
1000f628:	1001df70 	.word	0x1001df70
1000f62c:	100180cf 	.word	0x100180cf
1000f630:	1001e2e8 	.word	0x1001e2e8
1000f634:	1001e2fc 	.word	0x1001e2fc
1000f638:	1000f275 	.word	0x1000f275

1000f63c <gapc_con_req_ind>:
1000f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f63e:	7845      	ldrb	r5, [r0, #1]
1000f640:	7803      	ldrb	r3, [r0, #0]
1000f642:	4c30      	ldr	r4, [pc, #192]	; (1000f704 <gapc_con_req_ind+0xc8>)
1000f644:	022d      	lsls	r5, r5, #8
1000f646:	431d      	orrs	r5, r3
1000f648:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f64a:	78c3      	ldrb	r3, [r0, #3]
1000f64c:	7882      	ldrb	r2, [r0, #2]
1000f64e:	b08b      	sub	sp, #44	; 0x2c
1000f650:	021b      	lsls	r3, r3, #8
1000f652:	431a      	orrs	r2, r3
1000f654:	466b      	mov	r3, sp
1000f656:	9205      	str	r2, [sp, #20]
1000f658:	8a9b      	ldrh	r3, [r3, #20]
1000f65a:	2120      	movs	r1, #32
1000f65c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f65e:	7943      	ldrb	r3, [r0, #5]
1000f660:	7902      	ldrb	r2, [r0, #4]
1000f662:	021b      	lsls	r3, r3, #8
1000f664:	431a      	orrs	r2, r3
1000f666:	466b      	mov	r3, sp
1000f668:	9206      	str	r2, [sp, #24]
1000f66a:	8b1b      	ldrh	r3, [r3, #24]
1000f66c:	1c06      	adds	r6, r0, #0
1000f66e:	8623      	strh	r3, [r4, #48]	; 0x30
1000f670:	79c3      	ldrb	r3, [r0, #7]
1000f672:	7982      	ldrb	r2, [r0, #6]
1000f674:	021b      	lsls	r3, r3, #8
1000f676:	431a      	orrs	r2, r3
1000f678:	466b      	mov	r3, sp
1000f67a:	9207      	str	r2, [sp, #28]
1000f67c:	466a      	mov	r2, sp
1000f67e:	8b9b      	ldrh	r3, [r3, #28]
1000f680:	1852      	adds	r2, r2, r1
1000f682:	8663      	strh	r3, [r4, #50]	; 0x32
1000f684:	7a43      	ldrb	r3, [r0, #9]
1000f686:	1c01      	adds	r1, r0, #0
1000f688:	9308      	str	r3, [sp, #32]
1000f68a:	1c23      	adds	r3, r4, #0
1000f68c:	7812      	ldrb	r2, [r2, #0]
1000f68e:	3377      	adds	r3, #119	; 0x77
1000f690:	3478      	adds	r4, #120	; 0x78
1000f692:	701a      	strb	r2, [r3, #0]
1000f694:	310a      	adds	r1, #10
1000f696:	2206      	movs	r2, #6
1000f698:	4b1b      	ldr	r3, [pc, #108]	; (1000f708 <gapc_con_req_ind+0xcc>)
1000f69a:	1c20      	adds	r0, r4, #0
1000f69c:	4798      	blx	r3
1000f69e:	7c33      	ldrb	r3, [r6, #16]
1000f6a0:	9309      	str	r3, [sp, #36]	; 0x24
1000f6a2:	4b1a      	ldr	r3, [pc, #104]	; (1000f70c <gapc_con_req_ind+0xd0>)
1000f6a4:	4798      	blx	r3
1000f6a6:	4e1a      	ldr	r6, [pc, #104]	; (1000f710 <gapc_con_req_ind+0xd4>)
1000f6a8:	1e07      	subs	r7, r0, #0
1000f6aa:	2f07      	cmp	r7, #7
1000f6ac:	d81b      	bhi.n	1000f6e6 <gapc_con_req_ind+0xaa>
1000f6ae:	2312      	movs	r3, #18
1000f6b0:	4343      	muls	r3, r0
1000f6b2:	18f0      	adds	r0, r6, r3
1000f6b4:	8145      	strh	r5, [r0, #10]
1000f6b6:	4669      	mov	r1, sp
1000f6b8:	2524      	movs	r5, #36	; 0x24
1000f6ba:	1949      	adds	r1, r1, r5
1000f6bc:	7809      	ldrb	r1, [r1, #0]
1000f6be:	2206      	movs	r2, #6
1000f6c0:	54f1      	strb	r1, [r6, r3]
1000f6c2:	2120      	movs	r1, #32
1000f6c4:	466b      	mov	r3, sp
1000f6c6:	185b      	adds	r3, r3, r1
1000f6c8:	781b      	ldrb	r3, [r3, #0]
1000f6ca:	1c21      	adds	r1, r4, #0
1000f6cc:	7043      	strb	r3, [r0, #1]
1000f6ce:	466b      	mov	r3, sp
1000f6d0:	8a9b      	ldrh	r3, [r3, #20]
1000f6d2:	3002      	adds	r0, #2
1000f6d4:	8143      	strh	r3, [r0, #10]
1000f6d6:	466b      	mov	r3, sp
1000f6d8:	8b1b      	ldrh	r3, [r3, #24]
1000f6da:	8183      	strh	r3, [r0, #12]
1000f6dc:	466b      	mov	r3, sp
1000f6de:	8b9b      	ldrh	r3, [r3, #28]
1000f6e0:	81c3      	strh	r3, [r0, #14]
1000f6e2:	4b09      	ldr	r3, [pc, #36]	; (1000f708 <gapc_con_req_ind+0xcc>)
1000f6e4:	4798      	blx	r3
1000f6e6:	2112      	movs	r1, #18
1000f6e8:	2300      	movs	r3, #0
1000f6ea:	434f      	muls	r7, r1
1000f6ec:	9300      	str	r3, [sp, #0]
1000f6ee:	9301      	str	r3, [sp, #4]
1000f6f0:	19f6      	adds	r6, r6, r7
1000f6f2:	8971      	ldrh	r1, [r6, #10]
1000f6f4:	4a07      	ldr	r2, [pc, #28]	; (1000f714 <gapc_con_req_ind+0xd8>)
1000f6f6:	9102      	str	r1, [sp, #8]
1000f6f8:	1c10      	adds	r0, r2, #0
1000f6fa:	1c19      	adds	r1, r3, #0
1000f6fc:	4c06      	ldr	r4, [pc, #24]	; (1000f718 <gapc_con_req_ind+0xdc>)
1000f6fe:	47a0      	blx	r4
1000f700:	b00b      	add	sp, #44	; 0x2c
1000f702:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f704:	1001e002 	.word	0x1001e002
1000f708:	100180cf 	.word	0x100180cf
1000f70c:	1000f481 	.word	0x1000f481
1000f710:	1001df72 	.word	0x1001df72
1000f714:	1001cf28 	.word	0x1001cf28
1000f718:	1000f579 	.word	0x1000f579

1000f71c <gapc_disconnect_cmd_handler>:
1000f71c:	2204      	movs	r2, #4
1000f71e:	b510      	push	{r4, lr}
1000f720:	4b0c      	ldr	r3, [pc, #48]	; (1000f754 <gapc_disconnect_cmd_handler+0x38>)
1000f722:	2400      	movs	r4, #0
1000f724:	701a      	strb	r2, [r3, #0]
1000f726:	320a      	adds	r2, #10
1000f728:	705a      	strb	r2, [r3, #1]
1000f72a:	709a      	strb	r2, [r3, #2]
1000f72c:	4a0a      	ldr	r2, [pc, #40]	; (1000f758 <gapc_disconnect_cmd_handler+0x3c>)
1000f72e:	70d9      	strb	r1, [r3, #3]
1000f730:	8811      	ldrh	r1, [r2, #0]
1000f732:	8812      	ldrh	r2, [r2, #0]
1000f734:	7119      	strb	r1, [r3, #4]
1000f736:	0a12      	lsrs	r2, r2, #8
1000f738:	715a      	strb	r2, [r3, #5]
1000f73a:	2201      	movs	r2, #1
1000f73c:	721a      	strb	r2, [r3, #8]
1000f73e:	1892      	adds	r2, r2, r2
1000f740:	7258      	strb	r0, [r3, #9]
1000f742:	719a      	strb	r2, [r3, #6]
1000f744:	71dc      	strb	r4, [r3, #7]
1000f746:	1c18      	adds	r0, r3, #0
1000f748:	210a      	movs	r1, #10
1000f74a:	4b04      	ldr	r3, [pc, #16]	; (1000f75c <gapc_disconnect_cmd_handler+0x40>)
1000f74c:	4798      	blx	r3
1000f74e:	1c20      	adds	r0, r4, #0
1000f750:	bd10      	pop	{r4, pc}
1000f752:	46c0      	nop			; (mov r8, r8)
1000f754:	1001e2e0 	.word	0x1001e2e0
1000f758:	1001df70 	.word	0x1001df70
1000f75c:	1000f275 	.word	0x1000f275

1000f760 <gapc_disconnect_ind>:
1000f760:	1c02      	adds	r2, r0, #0
1000f762:	b508      	push	{r3, lr}
1000f764:	7843      	ldrb	r3, [r0, #1]
1000f766:	7800      	ldrb	r0, [r0, #0]
1000f768:	021b      	lsls	r3, r3, #8
1000f76a:	4318      	orrs	r0, r3
1000f76c:	8008      	strh	r0, [r1, #0]
1000f76e:	7893      	ldrb	r3, [r2, #2]
1000f770:	708b      	strb	r3, [r1, #2]
1000f772:	2100      	movs	r1, #0
1000f774:	4b05      	ldr	r3, [pc, #20]	; (1000f78c <gapc_disconnect_ind+0x2c>)
1000f776:	4798      	blx	r3
1000f778:	2807      	cmp	r0, #7
1000f77a:	d806      	bhi.n	1000f78a <gapc_disconnect_ind+0x2a>
1000f77c:	2312      	movs	r3, #18
1000f77e:	4358      	muls	r0, r3
1000f780:	4b03      	ldr	r3, [pc, #12]	; (1000f790 <gapc_disconnect_ind+0x30>)
1000f782:	1818      	adds	r0, r3, r0
1000f784:	2301      	movs	r3, #1
1000f786:	425b      	negs	r3, r3
1000f788:	8143      	strh	r3, [r0, #10]
1000f78a:	bd08      	pop	{r3, pc}
1000f78c:	1000f445 	.word	0x1000f445
1000f790:	1001df72 	.word	0x1001df72

1000f794 <gapc_bond_cmd_handler>:
1000f794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f796:	9300      	str	r3, [sp, #0]
1000f798:	2312      	movs	r3, #18
1000f79a:	1c04      	adds	r4, r0, #0
1000f79c:	a808      	add	r0, sp, #32
1000f79e:	7807      	ldrb	r7, [r0, #0]
1000f7a0:	a809      	add	r0, sp, #36	; 0x24
1000f7a2:	7806      	ldrb	r6, [r0, #0]
1000f7a4:	a80a      	add	r0, sp, #40	; 0x28
1000f7a6:	7805      	ldrb	r5, [r0, #0]
1000f7a8:	a80b      	add	r0, sp, #44	; 0x2c
1000f7aa:	7800      	ldrb	r0, [r0, #0]
1000f7ac:	9001      	str	r0, [sp, #4]
1000f7ae:	4810      	ldr	r0, [pc, #64]	; (1000f7f0 <gapc_bond_cmd_handler+0x5c>)
1000f7b0:	7003      	strb	r3, [r0, #0]
1000f7b2:	230e      	movs	r3, #14
1000f7b4:	70c4      	strb	r4, [r0, #3]
1000f7b6:	4c0f      	ldr	r4, [pc, #60]	; (1000f7f4 <gapc_bond_cmd_handler+0x60>)
1000f7b8:	7043      	strb	r3, [r0, #1]
1000f7ba:	7083      	strb	r3, [r0, #2]
1000f7bc:	8823      	ldrh	r3, [r4, #0]
1000f7be:	8824      	ldrh	r4, [r4, #0]
1000f7c0:	7103      	strb	r3, [r0, #4]
1000f7c2:	466b      	mov	r3, sp
1000f7c4:	781b      	ldrb	r3, [r3, #0]
1000f7c6:	0a24      	lsrs	r4, r4, #8
1000f7c8:	72c3      	strb	r3, [r0, #11]
1000f7ca:	466b      	mov	r3, sp
1000f7cc:	791b      	ldrb	r3, [r3, #4]
1000f7ce:	7144      	strb	r4, [r0, #5]
1000f7d0:	73c3      	strb	r3, [r0, #15]
1000f7d2:	2308      	movs	r3, #8
1000f7d4:	7183      	strb	r3, [r0, #6]
1000f7d6:	2300      	movs	r3, #0
1000f7d8:	240a      	movs	r4, #10
1000f7da:	7241      	strb	r1, [r0, #9]
1000f7dc:	71c3      	strb	r3, [r0, #7]
1000f7de:	2110      	movs	r1, #16
1000f7e0:	4b05      	ldr	r3, [pc, #20]	; (1000f7f8 <gapc_bond_cmd_handler+0x64>)
1000f7e2:	7307      	strb	r7, [r0, #12]
1000f7e4:	7346      	strb	r6, [r0, #13]
1000f7e6:	7385      	strb	r5, [r0, #14]
1000f7e8:	7204      	strb	r4, [r0, #8]
1000f7ea:	7282      	strb	r2, [r0, #10]
1000f7ec:	4798      	blx	r3
1000f7ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f7f0:	1001e2e0 	.word	0x1001e2e0
1000f7f4:	1001df70 	.word	0x1001df70
1000f7f8:	1000f275 	.word	0x1000f275

1000f7fc <gapc_bond_ind>:
1000f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f7fe:	780e      	ldrb	r6, [r1, #0]
1000f800:	1c03      	adds	r3, r0, #0
1000f802:	1eb0      	subs	r0, r6, #2
1000f804:	2805      	cmp	r0, #5
1000f806:	d85d      	bhi.n	1000f8c4 <gapc_bond_ind+0xc8>
1000f808:	1c15      	adds	r5, r2, #0
1000f80a:	1c0c      	adds	r4, r1, #0
1000f80c:	f005 fac8 	bl	10014da0 <__gnu_thumb1_case_uqi>
1000f810:	2f5a030d 	.word	0x2f5a030d
1000f814:	4740      	.short	0x4740
1000f816:	2009      	movs	r0, #9
1000f818:	2a00      	cmp	r2, #0
1000f81a:	d054      	beq.n	1000f8c6 <gapc_bond_ind+0xca>
1000f81c:	0a1b      	lsrs	r3, r3, #8
1000f81e:	8053      	strh	r3, [r2, #2]
1000f820:	788b      	ldrb	r3, [r1, #2]
1000f822:	4829      	ldr	r0, [pc, #164]	; (1000f8c8 <gapc_bond_ind+0xcc>)
1000f824:	7113      	strb	r3, [r2, #4]
1000f826:	2100      	movs	r1, #0
1000f828:	e01c      	b.n	1000f864 <gapc_bond_ind+0x68>
1000f82a:	2009      	movs	r0, #9
1000f82c:	2a00      	cmp	r2, #0
1000f82e:	d04a      	beq.n	1000f8c6 <gapc_bond_ind+0xca>
1000f830:	4c25      	ldr	r4, [pc, #148]	; (1000f8c8 <gapc_bond_ind+0xcc>)
1000f832:	0a1b      	lsrs	r3, r3, #8
1000f834:	8053      	strh	r3, [r2, #2]
1000f836:	788b      	ldrb	r3, [r1, #2]
1000f838:	2700      	movs	r7, #0
1000f83a:	1c10      	adds	r0, r2, #0
1000f83c:	1c21      	adds	r1, r4, #0
1000f83e:	7013      	strb	r3, [r2, #0]
1000f840:	4e22      	ldr	r6, [pc, #136]	; (1000f8cc <gapc_bond_ind+0xd0>)
1000f842:	7117      	strb	r7, [r2, #4]
1000f844:	312e      	adds	r1, #46	; 0x2e
1000f846:	2217      	movs	r2, #23
1000f848:	3032      	adds	r0, #50	; 0x32
1000f84a:	47b0      	blx	r6
1000f84c:	1c28      	adds	r0, r5, #0
1000f84e:	1c21      	adds	r1, r4, #0
1000f850:	2210      	movs	r2, #16
1000f852:	311e      	adds	r1, #30
1000f854:	3022      	adds	r0, #34	; 0x22
1000f856:	47b0      	blx	r6
1000f858:	1ca1      	adds	r1, r4, #2
1000f85a:	1da8      	adds	r0, r5, #6
1000f85c:	221c      	movs	r2, #28
1000f85e:	47b0      	blx	r6
1000f860:	1c20      	adds	r0, r4, #0
1000f862:	1c39      	adds	r1, r7, #0
1000f864:	2246      	movs	r2, #70	; 0x46
1000f866:	4b1a      	ldr	r3, [pc, #104]	; (1000f8d0 <gapc_bond_ind+0xd4>)
1000f868:	4798      	blx	r3
1000f86a:	2009      	movs	r0, #9
1000f86c:	e02b      	b.n	1000f8c6 <gapc_bond_ind+0xca>
1000f86e:	4d16      	ldr	r5, [pc, #88]	; (1000f8c8 <gapc_bond_ind+0xcc>)
1000f870:	3102      	adds	r1, #2
1000f872:	1c28      	adds	r0, r5, #0
1000f874:	2210      	movs	r2, #16
1000f876:	4e15      	ldr	r6, [pc, #84]	; (1000f8cc <gapc_bond_ind+0xd0>)
1000f878:	302e      	adds	r0, #46	; 0x2e
1000f87a:	47b0      	blx	r6
1000f87c:	1c28      	adds	r0, r5, #0
1000f87e:	1c21      	adds	r1, r4, #0
1000f880:	303f      	adds	r0, #63	; 0x3f
1000f882:	3112      	adds	r1, #18
1000f884:	2206      	movs	r2, #6
1000f886:	47b0      	blx	r6
1000f888:	7e23      	ldrb	r3, [r4, #24]
1000f88a:	353e      	adds	r5, #62	; 0x3e
1000f88c:	702b      	strb	r3, [r5, #0]
1000f88e:	e019      	b.n	1000f8c4 <gapc_bond_ind+0xc8>
1000f890:	480d      	ldr	r0, [pc, #52]	; (1000f8c8 <gapc_bond_ind+0xcc>)
1000f892:	3102      	adds	r1, #2
1000f894:	2210      	movs	r2, #16
1000f896:	4b0d      	ldr	r3, [pc, #52]	; (1000f8cc <gapc_bond_ind+0xd0>)
1000f898:	301e      	adds	r0, #30
1000f89a:	4798      	blx	r3
1000f89c:	e012      	b.n	1000f8c4 <gapc_bond_ind+0xc8>
1000f89e:	4d0a      	ldr	r5, [pc, #40]	; (1000f8c8 <gapc_bond_ind+0xcc>)
1000f8a0:	3102      	adds	r1, #2
1000f8a2:	2210      	movs	r2, #16
1000f8a4:	4e09      	ldr	r6, [pc, #36]	; (1000f8cc <gapc_bond_ind+0xd0>)
1000f8a6:	1ca8      	adds	r0, r5, #2
1000f8a8:	47b0      	blx	r6
1000f8aa:	1c28      	adds	r0, r5, #0
1000f8ac:	1c21      	adds	r1, r4, #0
1000f8ae:	7ce3      	ldrb	r3, [r4, #19]
1000f8b0:	7ca2      	ldrb	r2, [r4, #18]
1000f8b2:	021b      	lsls	r3, r3, #8
1000f8b4:	4313      	orrs	r3, r2
1000f8b6:	3014      	adds	r0, #20
1000f8b8:	3114      	adds	r1, #20
1000f8ba:	2208      	movs	r2, #8
1000f8bc:	826b      	strh	r3, [r5, #18]
1000f8be:	47b0      	blx	r6
1000f8c0:	7f23      	ldrb	r3, [r4, #28]
1000f8c2:	772b      	strb	r3, [r5, #28]
1000f8c4:	2000      	movs	r0, #0
1000f8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f8c8:	1001cf58 	.word	0x1001cf58
1000f8cc:	100180cf 	.word	0x100180cf
1000f8d0:	1001810b 	.word	0x1001810b

1000f8d4 <gapc_bond_req_ind>:
1000f8d4:	b570      	push	{r4, r5, r6, lr}
1000f8d6:	780c      	ldrb	r4, [r1, #0]
1000f8d8:	1c03      	adds	r3, r0, #0
1000f8da:	7849      	ldrb	r1, [r1, #1]
1000f8dc:	2c07      	cmp	r4, #7
1000f8de:	d85c      	bhi.n	1000f99a <gapc_bond_req_ind+0xc6>
1000f8e0:	1c20      	adds	r0, r4, #0
1000f8e2:	f005 fa5d 	bl	10014da0 <__gnu_thumb1_case_uqi>
1000f8e6:	5a04      	.short	0x5a04
1000f8e8:	5a0b5a5a 	.word	0x5a0b5a5a
1000f8ec:	1f1f      	.short	0x1f1f
1000f8ee:	200a      	movs	r0, #10
1000f8f0:	2a00      	cmp	r2, #0
1000f8f2:	d053      	beq.n	1000f99c <gapc_bond_req_ind+0xc8>
1000f8f4:	0a1b      	lsrs	r3, r3, #8
1000f8f6:	8013      	strh	r3, [r2, #0]
1000f8f8:	7091      	strb	r1, [r2, #2]
1000f8fa:	e04f      	b.n	1000f99c <gapc_bond_req_ind+0xc8>
1000f8fc:	2a00      	cmp	r2, #0
1000f8fe:	d00b      	beq.n	1000f918 <gapc_bond_req_ind+0x44>
1000f900:	0a1b      	lsrs	r3, r3, #8
1000f902:	8013      	strh	r3, [r2, #0]
1000f904:	2900      	cmp	r1, #0
1000f906:	d102      	bne.n	1000f90e <gapc_bond_req_ind+0x3a>
1000f908:	2301      	movs	r3, #1
1000f90a:	7093      	strb	r3, [r2, #2]
1000f90c:	e004      	b.n	1000f918 <gapc_bond_req_ind+0x44>
1000f90e:	2300      	movs	r3, #0
1000f910:	7093      	strb	r3, [r2, #2]
1000f912:	2902      	cmp	r1, #2
1000f914:	d102      	bne.n	1000f91c <gapc_bond_req_ind+0x48>
1000f916:	70d3      	strb	r3, [r2, #3]
1000f918:	200c      	movs	r0, #12
1000f91a:	e03f      	b.n	1000f99c <gapc_bond_req_ind+0xc8>
1000f91c:	2901      	cmp	r1, #1
1000f91e:	d1fb      	bne.n	1000f918 <gapc_bond_req_ind+0x44>
1000f920:	70d1      	strb	r1, [r2, #3]
1000f922:	e7f9      	b.n	1000f918 <gapc_bond_req_ind+0x44>
1000f924:	2214      	movs	r2, #20
1000f926:	481e      	ldr	r0, [pc, #120]	; (1000f9a0 <gapc_bond_req_ind+0xcc>)
1000f928:	0a1b      	lsrs	r3, r3, #8
1000f92a:	70c3      	strb	r3, [r0, #3]
1000f92c:	4b1d      	ldr	r3, [pc, #116]	; (1000f9a4 <gapc_bond_req_ind+0xd0>)
1000f92e:	7002      	strb	r2, [r0, #0]
1000f930:	3a06      	subs	r2, #6
1000f932:	7042      	strb	r2, [r0, #1]
1000f934:	7082      	strb	r2, [r0, #2]
1000f936:	881a      	ldrh	r2, [r3, #0]
1000f938:	881b      	ldrh	r3, [r3, #0]
1000f93a:	4e1b      	ldr	r6, [pc, #108]	; (1000f9a8 <gapc_bond_req_ind+0xd4>)
1000f93c:	0a1b      	lsrs	r3, r3, #8
1000f93e:	7143      	strb	r3, [r0, #5]
1000f940:	2301      	movs	r3, #1
1000f942:	7102      	strb	r2, [r0, #4]
1000f944:	7204      	strb	r4, [r0, #8]
1000f946:	7243      	strb	r3, [r0, #9]
1000f948:	1c05      	adds	r5, r0, #0
1000f94a:	1c31      	adds	r1, r6, #0
1000f94c:	300a      	adds	r0, #10
1000f94e:	2c07      	cmp	r4, #7
1000f950:	d116      	bne.n	1000f980 <gapc_bond_req_ind+0xac>
1000f952:	317e      	adds	r1, #126	; 0x7e
1000f954:	2210      	movs	r2, #16
1000f956:	4c15      	ldr	r4, [pc, #84]	; (1000f9ac <gapc_bond_req_ind+0xd8>)
1000f958:	47a0      	blx	r4
1000f95a:	1c33      	adds	r3, r6, #0
1000f95c:	1c31      	adds	r1, r6, #0
1000f95e:	1c28      	adds	r0, r5, #0
1000f960:	338e      	adds	r3, #142	; 0x8e
1000f962:	881b      	ldrh	r3, [r3, #0]
1000f964:	3190      	adds	r1, #144	; 0x90
1000f966:	76ab      	strb	r3, [r5, #26]
1000f968:	2208      	movs	r2, #8
1000f96a:	0a1b      	lsrs	r3, r3, #8
1000f96c:	301c      	adds	r0, #28
1000f96e:	76eb      	strb	r3, [r5, #27]
1000f970:	47a0      	blx	r4
1000f972:	1c31      	adds	r1, r6, #0
1000f974:	3198      	adds	r1, #152	; 0x98
1000f976:	780a      	ldrb	r2, [r1, #0]
1000f978:	1d6b      	adds	r3, r5, #5
1000f97a:	77da      	strb	r2, [r3, #31]
1000f97c:	2125      	movs	r1, #37	; 0x25
1000f97e:	e004      	b.n	1000f98a <gapc_bond_req_ind+0xb6>
1000f980:	319a      	adds	r1, #154	; 0x9a
1000f982:	2210      	movs	r2, #16
1000f984:	4b09      	ldr	r3, [pc, #36]	; (1000f9ac <gapc_bond_req_ind+0xd8>)
1000f986:	4798      	blx	r3
1000f988:	211a      	movs	r1, #26
1000f98a:	1c0b      	adds	r3, r1, #0
1000f98c:	2400      	movs	r4, #0
1000f98e:	3b08      	subs	r3, #8
1000f990:	71ab      	strb	r3, [r5, #6]
1000f992:	1c28      	adds	r0, r5, #0
1000f994:	4b06      	ldr	r3, [pc, #24]	; (1000f9b0 <gapc_bond_req_ind+0xdc>)
1000f996:	71ec      	strb	r4, [r5, #7]
1000f998:	4798      	blx	r3
1000f99a:	2000      	movs	r0, #0
1000f99c:	bd70      	pop	{r4, r5, r6, pc}
1000f99e:	46c0      	nop			; (mov r8, r8)
1000f9a0:	1001e2e0 	.word	0x1001e2e0
1000f9a4:	1001df70 	.word	0x1001df70
1000f9a8:	1001e002 	.word	0x1001e002
1000f9ac:	100180cf 	.word	0x100180cf
1000f9b0:	1000f275 	.word	0x1000f275

1000f9b4 <gapc_bond_cfm_handler_pair_resp>:
1000f9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9b6:	b085      	sub	sp, #20
1000f9b8:	1c07      	adds	r7, r0, #0
1000f9ba:	a80a      	add	r0, sp, #40	; 0x28
1000f9bc:	7806      	ldrb	r6, [r0, #0]
1000f9be:	a80b      	add	r0, sp, #44	; 0x2c
1000f9c0:	7805      	ldrb	r5, [r0, #0]
1000f9c2:	a80c      	add	r0, sp, #48	; 0x30
1000f9c4:	7800      	ldrb	r0, [r0, #0]
1000f9c6:	2414      	movs	r4, #20
1000f9c8:	9002      	str	r0, [sp, #8]
1000f9ca:	a80d      	add	r0, sp, #52	; 0x34
1000f9cc:	7800      	ldrb	r0, [r0, #0]
1000f9ce:	9301      	str	r3, [sp, #4]
1000f9d0:	9003      	str	r0, [sp, #12]
1000f9d2:	a80e      	add	r0, sp, #56	; 0x38
1000f9d4:	8800      	ldrh	r0, [r0, #0]
1000f9d6:	4684      	mov	ip, r0
1000f9d8:	4812      	ldr	r0, [pc, #72]	; (1000fa24 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000f9da:	7004      	strb	r4, [r0, #0]
1000f9dc:	3c06      	subs	r4, #6
1000f9de:	7044      	strb	r4, [r0, #1]
1000f9e0:	7084      	strb	r4, [r0, #2]
1000f9e2:	4664      	mov	r4, ip
1000f9e4:	70c4      	strb	r4, [r0, #3]
1000f9e6:	4c10      	ldr	r4, [pc, #64]	; (1000fa28 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000f9e8:	7247      	strb	r7, [r0, #9]
1000f9ea:	8823      	ldrh	r3, [r4, #0]
1000f9ec:	8824      	ldrh	r4, [r4, #0]
1000f9ee:	7103      	strb	r3, [r0, #4]
1000f9f0:	466b      	mov	r3, sp
1000f9f2:	791b      	ldrb	r3, [r3, #4]
1000f9f4:	0a24      	lsrs	r4, r4, #8
1000f9f6:	7303      	strb	r3, [r0, #12]
1000f9f8:	466b      	mov	r3, sp
1000f9fa:	7a1b      	ldrb	r3, [r3, #8]
1000f9fc:	7144      	strb	r4, [r0, #5]
1000f9fe:	73c3      	strb	r3, [r0, #15]
1000fa00:	466b      	mov	r3, sp
1000fa02:	7b1b      	ldrb	r3, [r3, #12]
1000fa04:	2401      	movs	r4, #1
1000fa06:	7403      	strb	r3, [r0, #16]
1000fa08:	2309      	movs	r3, #9
1000fa0a:	7183      	strb	r3, [r0, #6]
1000fa0c:	2300      	movs	r3, #0
1000fa0e:	7204      	strb	r4, [r0, #8]
1000fa10:	7281      	strb	r1, [r0, #10]
1000fa12:	72c2      	strb	r2, [r0, #11]
1000fa14:	7346      	strb	r6, [r0, #13]
1000fa16:	7385      	strb	r5, [r0, #14]
1000fa18:	71c3      	strb	r3, [r0, #7]
1000fa1a:	2111      	movs	r1, #17
1000fa1c:	4b03      	ldr	r3, [pc, #12]	; (1000fa2c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000fa1e:	4798      	blx	r3
1000fa20:	b005      	add	sp, #20
1000fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa24:	1001e2e0 	.word	0x1001e2e0
1000fa28:	1001df70 	.word	0x1001df70
1000fa2c:	1000f275 	.word	0x1000f275

1000fa30 <gapc_bond_cfm_handler_key_exch>:
1000fa30:	b538      	push	{r3, r4, r5, lr}
1000fa32:	2514      	movs	r5, #20
1000fa34:	4c0d      	ldr	r4, [pc, #52]	; (1000fa6c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000fa36:	70e3      	strb	r3, [r4, #3]
1000fa38:	4b0d      	ldr	r3, [pc, #52]	; (1000fa70 <gapc_bond_cfm_handler_key_exch+0x40>)
1000fa3a:	7025      	strb	r5, [r4, #0]
1000fa3c:	3d06      	subs	r5, #6
1000fa3e:	7065      	strb	r5, [r4, #1]
1000fa40:	70a5      	strb	r5, [r4, #2]
1000fa42:	881d      	ldrh	r5, [r3, #0]
1000fa44:	881b      	ldrh	r3, [r3, #0]
1000fa46:	7220      	strb	r0, [r4, #8]
1000fa48:	0a1b      	lsrs	r3, r3, #8
1000fa4a:	7163      	strb	r3, [r4, #5]
1000fa4c:	7261      	strb	r1, [r4, #9]
1000fa4e:	4b09      	ldr	r3, [pc, #36]	; (1000fa74 <gapc_bond_cfm_handler_key_exch+0x44>)
1000fa50:	1c11      	adds	r1, r2, #0
1000fa52:	4809      	ldr	r0, [pc, #36]	; (1000fa78 <gapc_bond_cfm_handler_key_exch+0x48>)
1000fa54:	2210      	movs	r2, #16
1000fa56:	7125      	strb	r5, [r4, #4]
1000fa58:	4798      	blx	r3
1000fa5a:	2312      	movs	r3, #18
1000fa5c:	71a3      	strb	r3, [r4, #6]
1000fa5e:	2300      	movs	r3, #0
1000fa60:	1c20      	adds	r0, r4, #0
1000fa62:	71e3      	strb	r3, [r4, #7]
1000fa64:	211a      	movs	r1, #26
1000fa66:	4b05      	ldr	r3, [pc, #20]	; (1000fa7c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000fa68:	4798      	blx	r3
1000fa6a:	bd38      	pop	{r3, r4, r5, pc}
1000fa6c:	1001e2e0 	.word	0x1001e2e0
1000fa70:	1001df70 	.word	0x1001df70
1000fa74:	100180cf 	.word	0x100180cf
1000fa78:	1001e2ea 	.word	0x1001e2ea
1000fa7c:	1000f275 	.word	0x1000f275

1000fa80 <gapc_security_cmd_handler>:
1000fa80:	221a      	movs	r2, #26
1000fa82:	b508      	push	{r3, lr}
1000fa84:	4b0b      	ldr	r3, [pc, #44]	; (1000fab4 <gapc_security_cmd_handler+0x34>)
1000fa86:	701a      	strb	r2, [r3, #0]
1000fa88:	3a0c      	subs	r2, #12
1000fa8a:	705a      	strb	r2, [r3, #1]
1000fa8c:	709a      	strb	r2, [r3, #2]
1000fa8e:	4a0a      	ldr	r2, [pc, #40]	; (1000fab8 <gapc_security_cmd_handler+0x38>)
1000fa90:	70d8      	strb	r0, [r3, #3]
1000fa92:	8810      	ldrh	r0, [r2, #0]
1000fa94:	8812      	ldrh	r2, [r2, #0]
1000fa96:	7118      	strb	r0, [r3, #4]
1000fa98:	0a12      	lsrs	r2, r2, #8
1000fa9a:	715a      	strb	r2, [r3, #5]
1000fa9c:	220c      	movs	r2, #12
1000fa9e:	721a      	strb	r2, [r3, #8]
1000faa0:	3a0a      	subs	r2, #10
1000faa2:	719a      	strb	r2, [r3, #6]
1000faa4:	2200      	movs	r2, #0
1000faa6:	7259      	strb	r1, [r3, #9]
1000faa8:	71da      	strb	r2, [r3, #7]
1000faaa:	1c18      	adds	r0, r3, #0
1000faac:	210a      	movs	r1, #10
1000faae:	4b03      	ldr	r3, [pc, #12]	; (1000fabc <gapc_security_cmd_handler+0x3c>)
1000fab0:	4798      	blx	r3
1000fab2:	bd08      	pop	{r3, pc}
1000fab4:	1001e2e0 	.word	0x1001e2e0
1000fab8:	1001df70 	.word	0x1001df70
1000fabc:	1000f275 	.word	0x1000f275

1000fac0 <gapc_encrypt_cmd_handler>:
1000fac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fac2:	2500      	movs	r5, #0
1000fac4:	b089      	sub	sp, #36	; 0x24
1000fac6:	9306      	str	r3, [sp, #24]
1000fac8:	ab0e      	add	r3, sp, #56	; 0x38
1000faca:	781b      	ldrb	r3, [r3, #0]
1000facc:	1c17      	adds	r7, r2, #0
1000face:	9307      	str	r3, [sp, #28]
1000fad0:	ab0f      	add	r3, sp, #60	; 0x3c
1000fad2:	781b      	ldrb	r3, [r3, #0]
1000fad4:	4a19      	ldr	r2, [pc, #100]	; (1000fb3c <gapc_encrypt_cmd_handler+0x7c>)
1000fad6:	1c06      	adds	r6, r0, #0
1000fad8:	9105      	str	r1, [sp, #20]
1000fada:	9300      	str	r3, [sp, #0]
1000fadc:	9002      	str	r0, [sp, #8]
1000fade:	1c29      	adds	r1, r5, #0
1000fae0:	1c2b      	adds	r3, r5, #0
1000fae2:	9501      	str	r5, [sp, #4]
1000fae4:	1c10      	adds	r0, r2, #0
1000fae6:	4c16      	ldr	r4, [pc, #88]	; (1000fb40 <gapc_encrypt_cmd_handler+0x80>)
1000fae8:	47a0      	blx	r4
1000faea:	2316      	movs	r3, #22
1000faec:	4c15      	ldr	r4, [pc, #84]	; (1000fb44 <gapc_encrypt_cmd_handler+0x84>)
1000faee:	9905      	ldr	r1, [sp, #20]
1000faf0:	7023      	strb	r3, [r4, #0]
1000faf2:	3b08      	subs	r3, #8
1000faf4:	7063      	strb	r3, [r4, #1]
1000faf6:	70a3      	strb	r3, [r4, #2]
1000faf8:	4b13      	ldr	r3, [pc, #76]	; (1000fb48 <gapc_encrypt_cmd_handler+0x88>)
1000fafa:	70e6      	strb	r6, [r4, #3]
1000fafc:	881a      	ldrh	r2, [r3, #0]
1000fafe:	881b      	ldrh	r3, [r3, #0]
1000fb00:	7122      	strb	r2, [r4, #4]
1000fb02:	0a1b      	lsrs	r3, r3, #8
1000fb04:	7163      	strb	r3, [r4, #5]
1000fb06:	230b      	movs	r3, #11
1000fb08:	4e10      	ldr	r6, [pc, #64]	; (1000fb4c <gapc_encrypt_cmd_handler+0x8c>)
1000fb0a:	2210      	movs	r2, #16
1000fb0c:	4810      	ldr	r0, [pc, #64]	; (1000fb50 <gapc_encrypt_cmd_handler+0x90>)
1000fb0e:	7223      	strb	r3, [r4, #8]
1000fb10:	7265      	strb	r5, [r4, #9]
1000fb12:	47b0      	blx	r6
1000fb14:	0a3b      	lsrs	r3, r7, #8
1000fb16:	9906      	ldr	r1, [sp, #24]
1000fb18:	2208      	movs	r2, #8
1000fb1a:	480e      	ldr	r0, [pc, #56]	; (1000fb54 <gapc_encrypt_cmd_handler+0x94>)
1000fb1c:	76e3      	strb	r3, [r4, #27]
1000fb1e:	76a7      	strb	r7, [r4, #26]
1000fb20:	47b0      	blx	r6
1000fb22:	466a      	mov	r2, sp
1000fb24:	7f12      	ldrb	r2, [r2, #28]
1000fb26:	1d63      	adds	r3, r4, #5
1000fb28:	77da      	strb	r2, [r3, #31]
1000fb2a:	231d      	movs	r3, #29
1000fb2c:	1c20      	adds	r0, r4, #0
1000fb2e:	71a3      	strb	r3, [r4, #6]
1000fb30:	2125      	movs	r1, #37	; 0x25
1000fb32:	4b09      	ldr	r3, [pc, #36]	; (1000fb58 <gapc_encrypt_cmd_handler+0x98>)
1000fb34:	71e5      	strb	r5, [r4, #7]
1000fb36:	4798      	blx	r3
1000fb38:	b009      	add	sp, #36	; 0x24
1000fb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb3c:	1001cf38 	.word	0x1001cf38
1000fb40:	1000f579 	.word	0x1000f579
1000fb44:	1001e2e0 	.word	0x1001e2e0
1000fb48:	1001df70 	.word	0x1001df70
1000fb4c:	100180cf 	.word	0x100180cf
1000fb50:	1001e2ea 	.word	0x1001e2ea
1000fb54:	1001e2fc 	.word	0x1001e2fc
1000fb58:	1000f275 	.word	0x1000f275

1000fb5c <gapc_encrypt_req_ind>:
1000fb5c:	b508      	push	{r3, lr}
1000fb5e:	0a00      	lsrs	r0, r0, #8
1000fb60:	8010      	strh	r0, [r2, #0]
1000fb62:	784b      	ldrb	r3, [r1, #1]
1000fb64:	7808      	ldrb	r0, [r1, #0]
1000fb66:	021b      	lsls	r3, r3, #8
1000fb68:	4303      	orrs	r3, r0
1000fb6a:	8053      	strh	r3, [r2, #2]
1000fb6c:	1d10      	adds	r0, r2, #4
1000fb6e:	3102      	adds	r1, #2
1000fb70:	2208      	movs	r2, #8
1000fb72:	4b01      	ldr	r3, [pc, #4]	; (1000fb78 <gapc_encrypt_req_ind+0x1c>)
1000fb74:	4798      	blx	r3
1000fb76:	bd08      	pop	{r3, pc}
1000fb78:	100180cf 	.word	0x100180cf

1000fb7c <gapc_encrypt_cfm_handler>:
1000fb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb7e:	2500      	movs	r5, #0
1000fb80:	b087      	sub	sp, #28
1000fb82:	9304      	str	r3, [sp, #16]
1000fb84:	ab0c      	add	r3, sp, #48	; 0x30
1000fb86:	781b      	ldrb	r3, [r3, #0]
1000fb88:	1c17      	adds	r7, r2, #0
1000fb8a:	4a15      	ldr	r2, [pc, #84]	; (1000fbe0 <gapc_encrypt_cfm_handler+0x64>)
1000fb8c:	1c06      	adds	r6, r0, #0
1000fb8e:	9305      	str	r3, [sp, #20]
1000fb90:	9100      	str	r1, [sp, #0]
1000fb92:	9002      	str	r0, [sp, #8]
1000fb94:	1c29      	adds	r1, r5, #0
1000fb96:	1c2b      	adds	r3, r5, #0
1000fb98:	9501      	str	r5, [sp, #4]
1000fb9a:	1c10      	adds	r0, r2, #0
1000fb9c:	4c11      	ldr	r4, [pc, #68]	; (1000fbe4 <gapc_encrypt_cfm_handler+0x68>)
1000fb9e:	47a0      	blx	r4
1000fba0:	2318      	movs	r3, #24
1000fba2:	4c11      	ldr	r4, [pc, #68]	; (1000fbe8 <gapc_encrypt_cfm_handler+0x6c>)
1000fba4:	9904      	ldr	r1, [sp, #16]
1000fba6:	7023      	strb	r3, [r4, #0]
1000fba8:	3b0a      	subs	r3, #10
1000fbaa:	7063      	strb	r3, [r4, #1]
1000fbac:	70a3      	strb	r3, [r4, #2]
1000fbae:	4b0f      	ldr	r3, [pc, #60]	; (1000fbec <gapc_encrypt_cfm_handler+0x70>)
1000fbb0:	480f      	ldr	r0, [pc, #60]	; (1000fbf0 <gapc_encrypt_cfm_handler+0x74>)
1000fbb2:	881a      	ldrh	r2, [r3, #0]
1000fbb4:	881b      	ldrh	r3, [r3, #0]
1000fbb6:	7122      	strb	r2, [r4, #4]
1000fbb8:	0a1b      	lsrs	r3, r3, #8
1000fbba:	7163      	strb	r3, [r4, #5]
1000fbbc:	2210      	movs	r2, #16
1000fbbe:	4b0d      	ldr	r3, [pc, #52]	; (1000fbf4 <gapc_encrypt_cfm_handler+0x78>)
1000fbc0:	70e6      	strb	r6, [r4, #3]
1000fbc2:	7227      	strb	r7, [r4, #8]
1000fbc4:	4798      	blx	r3
1000fbc6:	466b      	mov	r3, sp
1000fbc8:	7d1b      	ldrb	r3, [r3, #20]
1000fbca:	1c20      	adds	r0, r4, #0
1000fbcc:	7663      	strb	r3, [r4, #25]
1000fbce:	2312      	movs	r3, #18
1000fbd0:	211a      	movs	r1, #26
1000fbd2:	71a3      	strb	r3, [r4, #6]
1000fbd4:	4b08      	ldr	r3, [pc, #32]	; (1000fbf8 <gapc_encrypt_cfm_handler+0x7c>)
1000fbd6:	71e5      	strb	r5, [r4, #7]
1000fbd8:	4798      	blx	r3
1000fbda:	b007      	add	sp, #28
1000fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fbde:	46c0      	nop			; (mov r8, r8)
1000fbe0:	1001cf48 	.word	0x1001cf48
1000fbe4:	1000f579 	.word	0x1000f579
1000fbe8:	1001e2e0 	.word	0x1001e2e0
1000fbec:	1001df70 	.word	0x1001df70
1000fbf0:	1001e2e9 	.word	0x1001e2e9
1000fbf4:	100180cf 	.word	0x100180cf
1000fbf8:	1000f275 	.word	0x1000f275

1000fbfc <gapc_encrypt_ind>:
1000fbfc:	780b      	ldrb	r3, [r1, #0]
1000fbfe:	0a00      	lsrs	r0, r0, #8
1000fc00:	70d3      	strb	r3, [r2, #3]
1000fc02:	2300      	movs	r3, #0
1000fc04:	8010      	strh	r0, [r2, #0]
1000fc06:	7093      	strb	r3, [r2, #2]
1000fc08:	4770      	bx	lr
	...

1000fc0c <gapc_param_update_cfm_handler>:
1000fc0c:	b538      	push	{r3, r4, r5, lr}
1000fc0e:	2410      	movs	r4, #16
1000fc10:	1c05      	adds	r5, r0, #0
1000fc12:	480e      	ldr	r0, [pc, #56]	; (1000fc4c <gapc_param_update_cfm_handler+0x40>)
1000fc14:	7004      	strb	r4, [r0, #0]
1000fc16:	3c02      	subs	r4, #2
1000fc18:	7044      	strb	r4, [r0, #1]
1000fc1a:	7084      	strb	r4, [r0, #2]
1000fc1c:	4c0c      	ldr	r4, [pc, #48]	; (1000fc50 <gapc_param_update_cfm_handler+0x44>)
1000fc1e:	70c5      	strb	r5, [r0, #3]
1000fc20:	8825      	ldrh	r5, [r4, #0]
1000fc22:	8824      	ldrh	r4, [r4, #0]
1000fc24:	72c3      	strb	r3, [r0, #11]
1000fc26:	0a1b      	lsrs	r3, r3, #8
1000fc28:	0a24      	lsrs	r4, r4, #8
1000fc2a:	7303      	strb	r3, [r0, #12]
1000fc2c:	2305      	movs	r3, #5
1000fc2e:	7144      	strb	r4, [r0, #5]
1000fc30:	2400      	movs	r4, #0
1000fc32:	7201      	strb	r1, [r0, #8]
1000fc34:	7242      	strb	r2, [r0, #9]
1000fc36:	7183      	strb	r3, [r0, #6]
1000fc38:	0a12      	lsrs	r2, r2, #8
1000fc3a:	210d      	movs	r1, #13
1000fc3c:	4b05      	ldr	r3, [pc, #20]	; (1000fc54 <gapc_param_update_cfm_handler+0x48>)
1000fc3e:	7105      	strb	r5, [r0, #4]
1000fc40:	7282      	strb	r2, [r0, #10]
1000fc42:	71c4      	strb	r4, [r0, #7]
1000fc44:	4798      	blx	r3
1000fc46:	1c20      	adds	r0, r4, #0
1000fc48:	bd38      	pop	{r3, r4, r5, pc}
1000fc4a:	46c0      	nop			; (mov r8, r8)
1000fc4c:	1001e2e0 	.word	0x1001e2e0
1000fc50:	1001df70 	.word	0x1001df70
1000fc54:	1000f275 	.word	0x1000f275

1000fc58 <gapc_param_updated_ind>:
1000fc58:	2300      	movs	r3, #0
1000fc5a:	0a00      	lsrs	r0, r0, #8
1000fc5c:	8010      	strh	r0, [r2, #0]
1000fc5e:	7093      	strb	r3, [r2, #2]
1000fc60:	784b      	ldrb	r3, [r1, #1]
1000fc62:	7808      	ldrb	r0, [r1, #0]
1000fc64:	021b      	lsls	r3, r3, #8
1000fc66:	4303      	orrs	r3, r0
1000fc68:	8093      	strh	r3, [r2, #4]
1000fc6a:	78cb      	ldrb	r3, [r1, #3]
1000fc6c:	7888      	ldrb	r0, [r1, #2]
1000fc6e:	021b      	lsls	r3, r3, #8
1000fc70:	4303      	orrs	r3, r0
1000fc72:	80d3      	strh	r3, [r2, #6]
1000fc74:	794b      	ldrb	r3, [r1, #5]
1000fc76:	7909      	ldrb	r1, [r1, #4]
1000fc78:	021b      	lsls	r3, r3, #8
1000fc7a:	430b      	orrs	r3, r1
1000fc7c:	2007      	movs	r0, #7
1000fc7e:	8113      	strh	r3, [r2, #8]
1000fc80:	4770      	bx	lr

1000fc82 <gapc_param_updated_req_ind>:
1000fc82:	0a00      	lsrs	r0, r0, #8
1000fc84:	8010      	strh	r0, [r2, #0]
1000fc86:	784b      	ldrb	r3, [r1, #1]
1000fc88:	7808      	ldrb	r0, [r1, #0]
1000fc8a:	021b      	lsls	r3, r3, #8
1000fc8c:	4303      	orrs	r3, r0
1000fc8e:	8053      	strh	r3, [r2, #2]
1000fc90:	78cb      	ldrb	r3, [r1, #3]
1000fc92:	7888      	ldrb	r0, [r1, #2]
1000fc94:	021b      	lsls	r3, r3, #8
1000fc96:	4303      	orrs	r3, r0
1000fc98:	8093      	strh	r3, [r2, #4]
1000fc9a:	794b      	ldrb	r3, [r1, #5]
1000fc9c:	7908      	ldrb	r0, [r1, #4]
1000fc9e:	021b      	lsls	r3, r3, #8
1000fca0:	4303      	orrs	r3, r0
1000fca2:	80d3      	strh	r3, [r2, #6]
1000fca4:	79cb      	ldrb	r3, [r1, #7]
1000fca6:	7989      	ldrb	r1, [r1, #6]
1000fca8:	021b      	lsls	r3, r3, #8
1000fcaa:	430b      	orrs	r3, r1
1000fcac:	2008      	movs	r0, #8
1000fcae:	8113      	strh	r3, [r2, #8]
1000fcb0:	4770      	bx	lr
	...

1000fcb4 <gapc_dev_info_req_ind_handler>:
1000fcb4:	b508      	push	{r3, lr}
1000fcb6:	1c0b      	adds	r3, r1, #0
1000fcb8:	0a01      	lsrs	r1, r0, #8
1000fcba:	8011      	strh	r1, [r2, #0]
1000fcbc:	7818      	ldrb	r0, [r3, #0]
1000fcbe:	7090      	strb	r0, [r2, #2]
1000fcc0:	2800      	cmp	r0, #0
1000fcc2:	d104      	bne.n	1000fcce <gapc_dev_info_req_ind_handler+0x1a>
1000fcc4:	4b03      	ldr	r3, [pc, #12]	; (1000fcd4 <gapc_dev_info_req_ind_handler+0x20>)
1000fcc6:	33aa      	adds	r3, #170	; 0xaa
1000fcc8:	881b      	ldrh	r3, [r3, #0]
1000fcca:	2b00      	cmp	r3, #0
1000fccc:	d001      	beq.n	1000fcd2 <gapc_dev_info_req_ind_handler+0x1e>
1000fcce:	4b02      	ldr	r3, [pc, #8]	; (1000fcd8 <gapc_dev_info_req_ind_handler+0x24>)
1000fcd0:	4798      	blx	r3
1000fcd2:	bd08      	pop	{r3, pc}
1000fcd4:	1001e002 	.word	0x1001e002
1000fcd8:	1000f385 	.word	0x1000f385

1000fcdc <gapc_sec_req_ind>:
1000fcdc:	0a00      	lsrs	r0, r0, #8
1000fcde:	8010      	strh	r0, [r2, #0]
1000fce0:	7809      	ldrb	r1, [r1, #0]
1000fce2:	2301      	movs	r3, #1
1000fce4:	1c08      	adds	r0, r1, #0
1000fce6:	0889      	lsrs	r1, r1, #2
1000fce8:	4018      	ands	r0, r3
1000fcea:	400b      	ands	r3, r1
1000fcec:	70d0      	strb	r0, [r2, #3]
1000fcee:	7113      	strb	r3, [r2, #4]
1000fcf0:	4770      	bx	lr

1000fcf2 <gapc_sign_counter_ind_handler>:
1000fcf2:	0a00      	lsrs	r0, r0, #8
1000fcf4:	8010      	strh	r0, [r2, #0]
1000fcf6:	784b      	ldrb	r3, [r1, #1]
1000fcf8:	0218      	lsls	r0, r3, #8
1000fcfa:	788b      	ldrb	r3, [r1, #2]
1000fcfc:	041b      	lsls	r3, r3, #16
1000fcfe:	4303      	orrs	r3, r0
1000fd00:	7808      	ldrb	r0, [r1, #0]
1000fd02:	4303      	orrs	r3, r0
1000fd04:	78c8      	ldrb	r0, [r1, #3]
1000fd06:	0600      	lsls	r0, r0, #24
1000fd08:	4303      	orrs	r3, r0
1000fd0a:	6053      	str	r3, [r2, #4]
1000fd0c:	794b      	ldrb	r3, [r1, #5]
1000fd0e:	0218      	lsls	r0, r3, #8
1000fd10:	798b      	ldrb	r3, [r1, #6]
1000fd12:	041b      	lsls	r3, r3, #16
1000fd14:	4303      	orrs	r3, r0
1000fd16:	7908      	ldrb	r0, [r1, #4]
1000fd18:	79c9      	ldrb	r1, [r1, #7]
1000fd1a:	4303      	orrs	r3, r0
1000fd1c:	0609      	lsls	r1, r1, #24
1000fd1e:	430b      	orrs	r3, r1
1000fd20:	2000      	movs	r0, #0
1000fd22:	6093      	str	r3, [r2, #8]
1000fd24:	4770      	bx	lr
	...

1000fd28 <gapc_peer_att_info_ind_handler>:
1000fd28:	b510      	push	{r4, lr}
1000fd2a:	0a00      	lsrs	r0, r0, #8
1000fd2c:	8010      	strh	r0, [r2, #0]
1000fd2e:	7808      	ldrb	r0, [r1, #0]
1000fd30:	7090      	strb	r0, [r2, #2]
1000fd32:	788b      	ldrb	r3, [r1, #2]
1000fd34:	784c      	ldrb	r4, [r1, #1]
1000fd36:	021b      	lsls	r3, r3, #8
1000fd38:	4323      	orrs	r3, r4
1000fd3a:	8093      	strh	r3, [r2, #4]
1000fd3c:	2801      	cmp	r0, #1
1000fd3e:	d027      	beq.n	1000fd90 <gapc_peer_att_info_ind_handler+0x68>
1000fd40:	2800      	cmp	r0, #0
1000fd42:	d017      	beq.n	1000fd74 <gapc_peer_att_info_ind_handler+0x4c>
1000fd44:	2802      	cmp	r0, #2
1000fd46:	d12a      	bne.n	1000fd9e <gapc_peer_att_info_ind_handler+0x76>
1000fd48:	790b      	ldrb	r3, [r1, #4]
1000fd4a:	78c8      	ldrb	r0, [r1, #3]
1000fd4c:	021b      	lsls	r3, r3, #8
1000fd4e:	4303      	orrs	r3, r0
1000fd50:	8113      	strh	r3, [r2, #8]
1000fd52:	798b      	ldrb	r3, [r1, #6]
1000fd54:	7948      	ldrb	r0, [r1, #5]
1000fd56:	021b      	lsls	r3, r3, #8
1000fd58:	4303      	orrs	r3, r0
1000fd5a:	80d3      	strh	r3, [r2, #6]
1000fd5c:	7a0b      	ldrb	r3, [r1, #8]
1000fd5e:	79c8      	ldrb	r0, [r1, #7]
1000fd60:	021b      	lsls	r3, r3, #8
1000fd62:	4303      	orrs	r3, r0
1000fd64:	8193      	strh	r3, [r2, #12]
1000fd66:	7a8b      	ldrb	r3, [r1, #10]
1000fd68:	7a49      	ldrb	r1, [r1, #9]
1000fd6a:	021b      	lsls	r3, r3, #8
1000fd6c:	430b      	orrs	r3, r1
1000fd6e:	8153      	strh	r3, [r2, #10]
1000fd70:	2306      	movs	r3, #6
1000fd72:	e013      	b.n	1000fd9c <gapc_peer_att_info_ind_handler+0x74>
1000fd74:	1c14      	adds	r4, r2, #0
1000fd76:	1c20      	adds	r0, r4, #0
1000fd78:	790a      	ldrb	r2, [r1, #4]
1000fd7a:	78cb      	ldrb	r3, [r1, #3]
1000fd7c:	0212      	lsls	r2, r2, #8
1000fd7e:	431a      	orrs	r2, r3
1000fd80:	80e2      	strh	r2, [r4, #6]
1000fd82:	4b07      	ldr	r3, [pc, #28]	; (1000fda0 <gapc_peer_att_info_ind_handler+0x78>)
1000fd84:	3008      	adds	r0, #8
1000fd86:	3105      	adds	r1, #5
1000fd88:	4798      	blx	r3
1000fd8a:	2302      	movs	r3, #2
1000fd8c:	70a3      	strb	r3, [r4, #2]
1000fd8e:	e006      	b.n	1000fd9e <gapc_peer_att_info_ind_handler+0x76>
1000fd90:	790b      	ldrb	r3, [r1, #4]
1000fd92:	78c9      	ldrb	r1, [r1, #3]
1000fd94:	021b      	lsls	r3, r3, #8
1000fd96:	430b      	orrs	r3, r1
1000fd98:	80d3      	strh	r3, [r2, #6]
1000fd9a:	2305      	movs	r3, #5
1000fd9c:	7093      	strb	r3, [r2, #2]
1000fd9e:	bd10      	pop	{r4, pc}
1000fda0:	100180cf 	.word	0x100180cf

1000fda4 <gapc_con_channel_map_ind_handler>:
1000fda4:	b508      	push	{r3, lr}
1000fda6:	2300      	movs	r3, #0
1000fda8:	0a00      	lsrs	r0, r0, #8
1000fdaa:	7013      	strb	r3, [r2, #0]
1000fdac:	8050      	strh	r0, [r2, #2]
1000fdae:	4b02      	ldr	r3, [pc, #8]	; (1000fdb8 <gapc_con_channel_map_ind_handler+0x14>)
1000fdb0:	1d10      	adds	r0, r2, #4
1000fdb2:	2205      	movs	r2, #5
1000fdb4:	4798      	blx	r3
1000fdb6:	bd08      	pop	{r3, pc}
1000fdb8:	100180cf 	.word	0x100180cf

1000fdbc <gapc_lecb_connected>:
1000fdbc:	7843      	ldrb	r3, [r0, #1]
1000fdbe:	7802      	ldrb	r2, [r0, #0]
1000fdc0:	021b      	lsls	r3, r3, #8
1000fdc2:	4313      	orrs	r3, r2
1000fdc4:	800b      	strh	r3, [r1, #0]
1000fdc6:	78c3      	ldrb	r3, [r0, #3]
1000fdc8:	7882      	ldrb	r2, [r0, #2]
1000fdca:	021b      	lsls	r3, r3, #8
1000fdcc:	4313      	orrs	r3, r2
1000fdce:	804b      	strh	r3, [r1, #2]
1000fdd0:	7943      	ldrb	r3, [r0, #5]
1000fdd2:	7902      	ldrb	r2, [r0, #4]
1000fdd4:	021b      	lsls	r3, r3, #8
1000fdd6:	4313      	orrs	r3, r2
1000fdd8:	808b      	strh	r3, [r1, #4]
1000fdda:	79c3      	ldrb	r3, [r0, #7]
1000fddc:	7982      	ldrb	r2, [r0, #6]
1000fdde:	021b      	lsls	r3, r3, #8
1000fde0:	4313      	orrs	r3, r2
1000fde2:	80cb      	strh	r3, [r1, #6]
1000fde4:	2300      	movs	r3, #0
1000fde6:	720b      	strb	r3, [r1, #8]
1000fde8:	4770      	bx	lr

1000fdea <gapc_lecb_disconnected>:
1000fdea:	7843      	ldrb	r3, [r0, #1]
1000fdec:	7802      	ldrb	r2, [r0, #0]
1000fdee:	021b      	lsls	r3, r3, #8
1000fdf0:	4313      	orrs	r3, r2
1000fdf2:	800b      	strh	r3, [r1, #0]
1000fdf4:	78c3      	ldrb	r3, [r0, #3]
1000fdf6:	7882      	ldrb	r2, [r0, #2]
1000fdf8:	021b      	lsls	r3, r3, #8
1000fdfa:	4313      	orrs	r3, r2
1000fdfc:	804b      	strh	r3, [r1, #2]
1000fdfe:	4770      	bx	lr

1000fe00 <gapc_lecb_connect_req_ind>:
1000fe00:	7843      	ldrb	r3, [r0, #1]
1000fe02:	7802      	ldrb	r2, [r0, #0]
1000fe04:	021b      	lsls	r3, r3, #8
1000fe06:	4313      	orrs	r3, r2
1000fe08:	800b      	strh	r3, [r1, #0]
1000fe0a:	78c3      	ldrb	r3, [r0, #3]
1000fe0c:	7882      	ldrb	r2, [r0, #2]
1000fe0e:	021b      	lsls	r3, r3, #8
1000fe10:	4313      	orrs	r3, r2
1000fe12:	804b      	strh	r3, [r1, #2]
1000fe14:	7943      	ldrb	r3, [r0, #5]
1000fe16:	7902      	ldrb	r2, [r0, #4]
1000fe18:	021b      	lsls	r3, r3, #8
1000fe1a:	4313      	orrs	r3, r2
1000fe1c:	808b      	strh	r3, [r1, #4]
1000fe1e:	79c3      	ldrb	r3, [r0, #7]
1000fe20:	7982      	ldrb	r2, [r0, #6]
1000fe22:	021b      	lsls	r3, r3, #8
1000fe24:	4313      	orrs	r3, r2
1000fe26:	80cb      	strh	r3, [r1, #6]
1000fe28:	4770      	bx	lr

1000fe2a <gapc_lecb_add_credit_resp_handler>:
1000fe2a:	7843      	ldrb	r3, [r0, #1]
1000fe2c:	7802      	ldrb	r2, [r0, #0]
1000fe2e:	021b      	lsls	r3, r3, #8
1000fe30:	4313      	orrs	r3, r2
1000fe32:	800b      	strh	r3, [r1, #0]
1000fe34:	78c3      	ldrb	r3, [r0, #3]
1000fe36:	7882      	ldrb	r2, [r0, #2]
1000fe38:	021b      	lsls	r3, r3, #8
1000fe3a:	4313      	orrs	r3, r2
1000fe3c:	804b      	strh	r3, [r1, #2]
1000fe3e:	7943      	ldrb	r3, [r0, #5]
1000fe40:	7902      	ldrb	r2, [r0, #4]
1000fe42:	021b      	lsls	r3, r3, #8
1000fe44:	4313      	orrs	r3, r2
1000fe46:	808b      	strh	r3, [r1, #4]
1000fe48:	4770      	bx	lr
	...

1000fe4c <gapm_reset_req_handler>:
1000fe4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fe4e:	466b      	mov	r3, sp
1000fe50:	4915      	ldr	r1, [pc, #84]	; (1000fea8 <gapm_reset_req_handler+0x5c>)
1000fe52:	4816      	ldr	r0, [pc, #88]	; (1000feac <gapm_reset_req_handler+0x60>)
1000fe54:	880c      	ldrh	r4, [r1, #0]
1000fe56:	8809      	ldrh	r1, [r1, #0]
1000fe58:	1ddd      	adds	r5, r3, #7
1000fe5a:	0a09      	lsrs	r1, r1, #8
1000fe5c:	2300      	movs	r3, #0
1000fe5e:	2202      	movs	r2, #2
1000fe60:	7141      	strb	r1, [r0, #5]
1000fe62:	26d0      	movs	r6, #208	; 0xd0
1000fe64:	2101      	movs	r1, #1
1000fe66:	7104      	strb	r4, [r0, #4]
1000fe68:	4c11      	ldr	r4, [pc, #68]	; (1000feb0 <gapm_reset_req_handler+0x64>)
1000fe6a:	702b      	strb	r3, [r5, #0]
1000fe6c:	7002      	strb	r2, [r0, #0]
1000fe6e:	70c3      	strb	r3, [r0, #3]
1000fe70:	320b      	adds	r2, #11
1000fe72:	7201      	strb	r1, [r0, #8]
1000fe74:	7181      	strb	r1, [r0, #6]
1000fe76:	71c3      	strb	r3, [r0, #7]
1000fe78:	3108      	adds	r1, #8
1000fe7a:	4b0e      	ldr	r3, [pc, #56]	; (1000feb4 <gapm_reset_req_handler+0x68>)
1000fe7c:	0136      	lsls	r6, r6, #4
1000fe7e:	7042      	strb	r2, [r0, #1]
1000fe80:	7082      	strb	r2, [r0, #2]
1000fe82:	80a2      	strh	r2, [r4, #4]
1000fe84:	8026      	strh	r6, [r4, #0]
1000fe86:	4798      	blx	r3
1000fe88:	1c28      	adds	r0, r5, #0
1000fe8a:	4b0b      	ldr	r3, [pc, #44]	; (1000feb8 <gapm_reset_req_handler+0x6c>)
1000fe8c:	4798      	blx	r3
1000fe8e:	782b      	ldrb	r3, [r5, #0]
1000fe90:	20e2      	movs	r0, #226	; 0xe2
1000fe92:	2b00      	cmp	r3, #0
1000fe94:	d106      	bne.n	1000fea4 <gapm_reset_req_handler+0x58>
1000fe96:	68a3      	ldr	r3, [r4, #8]
1000fe98:	20e2      	movs	r0, #226	; 0xe2
1000fe9a:	781a      	ldrb	r2, [r3, #0]
1000fe9c:	785b      	ldrb	r3, [r3, #1]
1000fe9e:	2a01      	cmp	r2, #1
1000fea0:	d100      	bne.n	1000fea4 <gapm_reset_req_handler+0x58>
1000fea2:	1c18      	adds	r0, r3, #0
1000fea4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fea6:	46c0      	nop			; (mov r8, r8)
1000fea8:	1001df70 	.word	0x1001df70
1000feac:	1001e2e0 	.word	0x1001e2e0
1000feb0:	1001df64 	.word	0x1001df64
1000feb4:	1000f275 	.word	0x1000f275
1000feb8:	1000f2d9 	.word	0x1000f2d9

1000febc <gapm_set_dev_config_cmd_handler>:
1000febc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000febe:	b089      	sub	sp, #36	; 0x24
1000fec0:	9303      	str	r3, [sp, #12]
1000fec2:	ab0e      	add	r3, sp, #56	; 0x38
1000fec4:	781b      	ldrb	r3, [r3, #0]
1000fec6:	4c37      	ldr	r4, [pc, #220]	; (1000ffa4 <gapm_set_dev_config_cmd_handler+0xe8>)
1000fec8:	9304      	str	r3, [sp, #16]
1000feca:	ab0f      	add	r3, sp, #60	; 0x3c
1000fecc:	781b      	ldrb	r3, [r3, #0]
1000fece:	270d      	movs	r7, #13
1000fed0:	9305      	str	r3, [sp, #20]
1000fed2:	ab10      	add	r3, sp, #64	; 0x40
1000fed4:	881b      	ldrh	r3, [r3, #0]
1000fed6:	72a1      	strb	r1, [r4, #10]
1000fed8:	9300      	str	r3, [sp, #0]
1000feda:	ab11      	add	r3, sp, #68	; 0x44
1000fedc:	881b      	ldrh	r3, [r3, #0]
1000fede:	0a09      	lsrs	r1, r1, #8
1000fee0:	9301      	str	r3, [sp, #4]
1000fee2:	ab12      	add	r3, sp, #72	; 0x48
1000fee4:	881b      	ldrh	r3, [r3, #0]
1000fee6:	7260      	strb	r0, [r4, #9]
1000fee8:	9302      	str	r3, [sp, #8]
1000feea:	ab06      	add	r3, sp, #24
1000feec:	1dde      	adds	r6, r3, #7
1000feee:	2300      	movs	r3, #0
1000fef0:	7033      	strb	r3, [r6, #0]
1000fef2:	2304      	movs	r3, #4
1000fef4:	7023      	strb	r3, [r4, #0]
1000fef6:	2300      	movs	r3, #0
1000fef8:	70e3      	strb	r3, [r4, #3]
1000fefa:	4b2b      	ldr	r3, [pc, #172]	; (1000ffa8 <gapm_set_dev_config_cmd_handler+0xec>)
1000fefc:	72e1      	strb	r1, [r4, #11]
1000fefe:	881d      	ldrh	r5, [r3, #0]
1000ff00:	881b      	ldrh	r3, [r3, #0]
1000ff02:	1c11      	adds	r1, r2, #0
1000ff04:	0a1b      	lsrs	r3, r3, #8
1000ff06:	7163      	strb	r3, [r4, #5]
1000ff08:	2303      	movs	r3, #3
1000ff0a:	7125      	strb	r5, [r4, #4]
1000ff0c:	2206      	movs	r2, #6
1000ff0e:	4d27      	ldr	r5, [pc, #156]	; (1000ffac <gapm_set_dev_config_cmd_handler+0xf0>)
1000ff10:	4827      	ldr	r0, [pc, #156]	; (1000ffb0 <gapm_set_dev_config_cmd_handler+0xf4>)
1000ff12:	7223      	strb	r3, [r4, #8]
1000ff14:	7067      	strb	r7, [r4, #1]
1000ff16:	70a7      	strb	r7, [r4, #2]
1000ff18:	47a8      	blx	r5
1000ff1a:	9903      	ldr	r1, [sp, #12]
1000ff1c:	2210      	movs	r2, #16
1000ff1e:	4825      	ldr	r0, [pc, #148]	; (1000ffb4 <gapm_set_dev_config_cmd_handler+0xf8>)
1000ff20:	47a8      	blx	r5
1000ff22:	466a      	mov	r2, sp
1000ff24:	7c12      	ldrb	r2, [r2, #16]
1000ff26:	1ce3      	adds	r3, r4, #3
1000ff28:	77da      	strb	r2, [r3, #31]
1000ff2a:	466a      	mov	r2, sp
1000ff2c:	7d12      	ldrb	r2, [r2, #20]
1000ff2e:	1d23      	adds	r3, r4, #4
1000ff30:	77da      	strb	r2, [r3, #31]
1000ff32:	466a      	mov	r2, sp
1000ff34:	7812      	ldrb	r2, [r2, #0]
1000ff36:	1d63      	adds	r3, r4, #5
1000ff38:	77da      	strb	r2, [r3, #31]
1000ff3a:	9b00      	ldr	r3, [sp, #0]
1000ff3c:	1da2      	adds	r2, r4, #6
1000ff3e:	0a1b      	lsrs	r3, r3, #8
1000ff40:	77d3      	strb	r3, [r2, #31]
1000ff42:	466a      	mov	r2, sp
1000ff44:	7912      	ldrb	r2, [r2, #4]
1000ff46:	1de3      	adds	r3, r4, #7
1000ff48:	77da      	strb	r2, [r3, #31]
1000ff4a:	1c22      	adds	r2, r4, #0
1000ff4c:	9b01      	ldr	r3, [sp, #4]
1000ff4e:	3208      	adds	r2, #8
1000ff50:	0a1b      	lsrs	r3, r3, #8
1000ff52:	77d3      	strb	r3, [r2, #31]
1000ff54:	466a      	mov	r2, sp
1000ff56:	1c23      	adds	r3, r4, #0
1000ff58:	7a12      	ldrb	r2, [r2, #8]
1000ff5a:	3328      	adds	r3, #40	; 0x28
1000ff5c:	701a      	strb	r2, [r3, #0]
1000ff5e:	1c22      	adds	r2, r4, #0
1000ff60:	9b02      	ldr	r3, [sp, #8]
1000ff62:	3229      	adds	r2, #41	; 0x29
1000ff64:	0a1b      	lsrs	r3, r3, #8
1000ff66:	7013      	strb	r3, [r2, #0]
1000ff68:	23d0      	movs	r3, #208	; 0xd0
1000ff6a:	4d13      	ldr	r5, [pc, #76]	; (1000ffb8 <gapm_set_dev_config_cmd_handler+0xfc>)
1000ff6c:	011b      	lsls	r3, r3, #4
1000ff6e:	802b      	strh	r3, [r5, #0]
1000ff70:	2322      	movs	r3, #34	; 0x22
1000ff72:	71a3      	strb	r3, [r4, #6]
1000ff74:	2300      	movs	r3, #0
1000ff76:	212a      	movs	r1, #42	; 0x2a
1000ff78:	71e3      	strb	r3, [r4, #7]
1000ff7a:	1c20      	adds	r0, r4, #0
1000ff7c:	4b0f      	ldr	r3, [pc, #60]	; (1000ffbc <gapm_set_dev_config_cmd_handler+0x100>)
1000ff7e:	80af      	strh	r7, [r5, #4]
1000ff80:	4798      	blx	r3
1000ff82:	1c30      	adds	r0, r6, #0
1000ff84:	4b0e      	ldr	r3, [pc, #56]	; (1000ffc0 <gapm_set_dev_config_cmd_handler+0x104>)
1000ff86:	4798      	blx	r3
1000ff88:	7833      	ldrb	r3, [r6, #0]
1000ff8a:	20e2      	movs	r0, #226	; 0xe2
1000ff8c:	2b00      	cmp	r3, #0
1000ff8e:	d106      	bne.n	1000ff9e <gapm_set_dev_config_cmd_handler+0xe2>
1000ff90:	68ab      	ldr	r3, [r5, #8]
1000ff92:	20e2      	movs	r0, #226	; 0xe2
1000ff94:	781a      	ldrb	r2, [r3, #0]
1000ff96:	785b      	ldrb	r3, [r3, #1]
1000ff98:	2a03      	cmp	r2, #3
1000ff9a:	d100      	bne.n	1000ff9e <gapm_set_dev_config_cmd_handler+0xe2>
1000ff9c:	1c18      	adds	r0, r3, #0
1000ff9e:	b009      	add	sp, #36	; 0x24
1000ffa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ffa2:	46c0      	nop			; (mov r8, r8)
1000ffa4:	1001e2e0 	.word	0x1001e2e0
1000ffa8:	1001df70 	.word	0x1001df70
1000ffac:	100180cf 	.word	0x100180cf
1000ffb0:	1001e2ec 	.word	0x1001e2ec
1000ffb4:	1001e2f2 	.word	0x1001e2f2
1000ffb8:	1001df64 	.word	0x1001df64
1000ffbc:	1000f275 	.word	0x1000f275
1000ffc0:	1000f2d9 	.word	0x1000f2d9

1000ffc4 <gapm_get_dev_config_cmd_handler>:
1000ffc4:	4684      	mov	ip, r0
1000ffc6:	4663      	mov	r3, ip
1000ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffca:	b085      	sub	sp, #20
1000ffcc:	9100      	str	r1, [sp, #0]
1000ffce:	20cf      	movs	r0, #207	; 0xcf
1000ffd0:	2b01      	cmp	r3, #1
1000ffd2:	d854      	bhi.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
1000ffd4:	2900      	cmp	r1, #0
1000ffd6:	d052      	beq.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
1000ffd8:	2200      	movs	r2, #0
1000ffda:	492a      	ldr	r1, [pc, #168]	; (10010084 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ffdc:	ab02      	add	r3, sp, #8
1000ffde:	880c      	ldrh	r4, [r1, #0]
1000ffe0:	8809      	ldrh	r1, [r1, #0]
1000ffe2:	1d9f      	adds	r7, r3, #6
1000ffe4:	719a      	strb	r2, [r3, #6]
1000ffe6:	4b28      	ldr	r3, [pc, #160]	; (10010088 <gapm_get_dev_config_cmd_handler+0xc4>)
1000ffe8:	0a09      	lsrs	r1, r1, #8
1000ffea:	250d      	movs	r5, #13
1000ffec:	2606      	movs	r6, #6
1000ffee:	7159      	strb	r1, [r3, #5]
1000fff0:	4661      	mov	r1, ip
1000fff2:	701e      	strb	r6, [r3, #0]
1000fff4:	705d      	strb	r5, [r3, #1]
1000fff6:	709d      	strb	r5, [r3, #2]
1000fff8:	70da      	strb	r2, [r3, #3]
1000fffa:	711c      	strb	r4, [r3, #4]
1000fffc:	2901      	cmp	r1, #1
1000fffe:	d13e      	bne.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
10010000:	21d0      	movs	r1, #208	; 0xd0
10010002:	4c22      	ldr	r4, [pc, #136]	; (1001008c <gapm_get_dev_config_cmd_handler+0xc8>)
10010004:	0109      	lsls	r1, r1, #4
10010006:	8061      	strh	r1, [r4, #2]
10010008:	4921      	ldr	r1, [pc, #132]	; (10010090 <gapm_get_dev_config_cmd_handler+0xcc>)
1001000a:	71da      	strb	r2, [r3, #7]
1001000c:	8021      	strh	r1, [r4, #0]
1001000e:	4661      	mov	r1, ip
10010010:	721e      	strb	r6, [r3, #8]
10010012:	7199      	strb	r1, [r3, #6]
10010014:	1c18      	adds	r0, r3, #0
10010016:	2109      	movs	r1, #9
10010018:	4b1e      	ldr	r3, [pc, #120]	; (10010094 <gapm_get_dev_config_cmd_handler+0xd0>)
1001001a:	80a5      	strh	r5, [r4, #4]
1001001c:	4798      	blx	r3
1001001e:	1c38      	adds	r0, r7, #0
10010020:	4b1d      	ldr	r3, [pc, #116]	; (10010098 <gapm_get_dev_config_cmd_handler+0xd4>)
10010022:	4798      	blx	r3
10010024:	783b      	ldrb	r3, [r7, #0]
10010026:	20e2      	movs	r0, #226	; 0xe2
10010028:	9301      	str	r3, [sp, #4]
1001002a:	2b00      	cmp	r3, #0
1001002c:	d127      	bne.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
1001002e:	8821      	ldrh	r1, [r4, #0]
10010030:	4a1a      	ldr	r2, [pc, #104]	; (1001009c <gapm_get_dev_config_cmd_handler+0xd8>)
10010032:	68a7      	ldr	r7, [r4, #8]
10010034:	3b01      	subs	r3, #1
10010036:	4291      	cmp	r1, r2
10010038:	d001      	beq.n	1001003e <gapm_get_dev_config_cmd_handler+0x7a>
1001003a:	8023      	strh	r3, [r4, #0]
1001003c:	e01a      	b.n	10010074 <gapm_get_dev_config_cmd_handler+0xb0>
1001003e:	8063      	strh	r3, [r4, #2]
10010040:	9b00      	ldr	r3, [sp, #0]
10010042:	1c39      	adds	r1, r7, #0
10010044:	1c58      	adds	r0, r3, #1
10010046:	1c32      	adds	r2, r6, #0
10010048:	4b15      	ldr	r3, [pc, #84]	; (100100a0 <gapm_get_dev_config_cmd_handler+0xdc>)
1001004a:	4798      	blx	r3
1001004c:	79bb      	ldrb	r3, [r7, #6]
1001004e:	9a00      	ldr	r2, [sp, #0]
10010050:	7013      	strb	r3, [r2, #0]
10010052:	23d0      	movs	r3, #208	; 0xd0
10010054:	011b      	lsls	r3, r3, #4
10010056:	8023      	strh	r3, [r4, #0]
10010058:	ab02      	add	r3, sp, #8
1001005a:	80a5      	strh	r5, [r4, #4]
1001005c:	1ddd      	adds	r5, r3, #7
1001005e:	466b      	mov	r3, sp
10010060:	791b      	ldrb	r3, [r3, #4]
10010062:	1c28      	adds	r0, r5, #0
10010064:	702b      	strb	r3, [r5, #0]
10010066:	4b0c      	ldr	r3, [pc, #48]	; (10010098 <gapm_get_dev_config_cmd_handler+0xd4>)
10010068:	4798      	blx	r3
1001006a:	782b      	ldrb	r3, [r5, #0]
1001006c:	20d0      	movs	r0, #208	; 0xd0
1001006e:	2b00      	cmp	r3, #0
10010070:	d105      	bne.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
10010072:	68a7      	ldr	r7, [r4, #8]
10010074:	783b      	ldrb	r3, [r7, #0]
10010076:	7878      	ldrb	r0, [r7, #1]
10010078:	2b06      	cmp	r3, #6
1001007a:	d000      	beq.n	1001007e <gapm_get_dev_config_cmd_handler+0xba>
1001007c:	20e2      	movs	r0, #226	; 0xe2
1001007e:	b005      	add	sp, #20
10010080:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010082:	46c0      	nop			; (mov r8, r8)
10010084:	1001df70 	.word	0x1001df70
10010088:	1001e2e0 	.word	0x1001e2e0
1001008c:	1001df64 	.word	0x1001df64
10010090:	00000d08 	.word	0x00000d08
10010094:	1000f275 	.word	0x1000f275
10010098:	1000f2d9 	.word	0x1000f2d9
1001009c:	0000ffff 	.word	0x0000ffff
100100a0:	100180cf 	.word	0x100180cf

100100a4 <gapm_cancel_cmd_handler>:
100100a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
100100a6:	4916      	ldr	r1, [pc, #88]	; (10010100 <gapm_cancel_cmd_handler+0x5c>)
100100a8:	4816      	ldr	r0, [pc, #88]	; (10010104 <gapm_cancel_cmd_handler+0x60>)
100100aa:	880c      	ldrh	r4, [r1, #0]
100100ac:	8809      	ldrh	r1, [r1, #0]
100100ae:	466b      	mov	r3, sp
100100b0:	0a09      	lsrs	r1, r1, #8
100100b2:	7141      	strb	r1, [r0, #5]
100100b4:	2102      	movs	r1, #2
100100b6:	2203      	movs	r2, #3
100100b8:	7201      	strb	r1, [r0, #8]
100100ba:	21d0      	movs	r1, #208	; 0xd0
100100bc:	1ddd      	adds	r5, r3, #7
100100be:	2300      	movs	r3, #0
100100c0:	7104      	strb	r4, [r0, #4]
100100c2:	4c11      	ldr	r4, [pc, #68]	; (10010108 <gapm_cancel_cmd_handler+0x64>)
100100c4:	7002      	strb	r2, [r0, #0]
100100c6:	0109      	lsls	r1, r1, #4
100100c8:	320a      	adds	r2, #10
100100ca:	702b      	strb	r3, [r5, #0]
100100cc:	7042      	strb	r2, [r0, #1]
100100ce:	7082      	strb	r2, [r0, #2]
100100d0:	70c3      	strb	r3, [r0, #3]
100100d2:	8021      	strh	r1, [r4, #0]
100100d4:	80a2      	strh	r2, [r4, #4]
100100d6:	71c3      	strb	r3, [r0, #7]
100100d8:	3a0c      	subs	r2, #12
100100da:	2109      	movs	r1, #9
100100dc:	4b0b      	ldr	r3, [pc, #44]	; (1001010c <gapm_cancel_cmd_handler+0x68>)
100100de:	7182      	strb	r2, [r0, #6]
100100e0:	4798      	blx	r3
100100e2:	1c28      	adds	r0, r5, #0
100100e4:	4b0a      	ldr	r3, [pc, #40]	; (10010110 <gapm_cancel_cmd_handler+0x6c>)
100100e6:	4798      	blx	r3
100100e8:	7828      	ldrb	r0, [r5, #0]
100100ea:	2800      	cmp	r0, #0
100100ec:	d001      	beq.n	100100f2 <gapm_cancel_cmd_handler+0x4e>
100100ee:	20e2      	movs	r0, #226	; 0xe2
100100f0:	e004      	b.n	100100fc <gapm_cancel_cmd_handler+0x58>
100100f2:	68a3      	ldr	r3, [r4, #8]
100100f4:	785b      	ldrb	r3, [r3, #1]
100100f6:	2b44      	cmp	r3, #68	; 0x44
100100f8:	d000      	beq.n	100100fc <gapm_cancel_cmd_handler+0x58>
100100fa:	1c18      	adds	r0, r3, #0
100100fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100100fe:	46c0      	nop			; (mov r8, r8)
10010100:	1001df70 	.word	0x1001df70
10010104:	1001e2e0 	.word	0x1001e2e0
10010108:	1001df64 	.word	0x1001df64
1001010c:	1000f275 	.word	0x1000f275
10010110:	1000f2d9 	.word	0x1000f2d9

10010114 <gapm_dev_bdaddr_ind_handler>:
10010114:	b538      	push	{r3, r4, r5, lr}
10010116:	1c05      	adds	r5, r0, #0
10010118:	1c0c      	adds	r4, r1, #0
1001011a:	1c48      	adds	r0, r1, #1
1001011c:	2206      	movs	r2, #6
1001011e:	1c29      	adds	r1, r5, #0
10010120:	4b02      	ldr	r3, [pc, #8]	; (1001012c <gapm_dev_bdaddr_ind_handler+0x18>)
10010122:	4798      	blx	r3
10010124:	79ab      	ldrb	r3, [r5, #6]
10010126:	2000      	movs	r0, #0
10010128:	7023      	strb	r3, [r4, #0]
1001012a:	bd38      	pop	{r3, r4, r5, pc}
1001012c:	100180cf 	.word	0x100180cf

10010130 <gapm_cmp_evt>:
10010130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010132:	7803      	ldrb	r3, [r0, #0]
10010134:	7845      	ldrb	r5, [r0, #1]
10010136:	3b0c      	subs	r3, #12
10010138:	1e18      	subs	r0, r3, #0
1001013a:	280b      	cmp	r0, #11
1001013c:	d900      	bls.n	10010140 <gapm_cmp_evt+0x10>
1001013e:	e08d      	b.n	1001025c <gapm_cmp_evt+0x12c>
10010140:	1c0c      	adds	r4, r1, #0
10010142:	f004 fe2d 	bl	10014da0 <__gnu_thumb1_case_uqi>
10010146:	1952      	.short	0x1952
10010148:	068b1919 	.word	0x068b1919
1001014c:	8b595906 	.word	0x8b595906
10010150:	0d8b      	.short	0x0d8b
10010152:	2300      	movs	r3, #0
10010154:	2d45      	cmp	r5, #69	; 0x45
10010156:	d000      	beq.n	1001015a <gapm_cmp_evt+0x2a>
10010158:	1c2b      	adds	r3, r5, #0
1001015a:	7023      	strb	r3, [r4, #0]
1001015c:	2002      	movs	r0, #2
1001015e:	e07e      	b.n	1001025e <gapm_cmp_evt+0x12e>
10010160:	203b      	movs	r0, #59	; 0x3b
10010162:	2d00      	cmp	r5, #0
10010164:	d100      	bne.n	10010168 <gapm_cmp_evt+0x38>
10010166:	e07a      	b.n	1001025e <gapm_cmp_evt+0x12e>
10010168:	700d      	strb	r5, [r1, #0]
1001016a:	1c48      	adds	r0, r1, #1
1001016c:	2210      	movs	r2, #16
1001016e:	2100      	movs	r1, #0
10010170:	4b3b      	ldr	r3, [pc, #236]	; (10010260 <gapm_cmp_evt+0x130>)
10010172:	4798      	blx	r3
10010174:	200f      	movs	r0, #15
10010176:	e072      	b.n	1001025e <gapm_cmp_evt+0x12e>
10010178:	2d00      	cmp	r5, #0
1001017a:	d134      	bne.n	100101e6 <gapm_cmp_evt+0xb6>
1001017c:	4b39      	ldr	r3, [pc, #228]	; (10010264 <gapm_cmp_evt+0x134>)
1001017e:	4798      	blx	r3
10010180:	1e43      	subs	r3, r0, #1
10010182:	b2db      	uxtb	r3, r3
10010184:	1c28      	adds	r0, r5, #0
10010186:	2b06      	cmp	r3, #6
10010188:	d869      	bhi.n	1001025e <gapm_cmp_evt+0x12e>
1001018a:	466b      	mov	r3, sp
1001018c:	4e36      	ldr	r6, [pc, #216]	; (10010268 <gapm_cmp_evt+0x138>)
1001018e:	1dd9      	adds	r1, r3, #7
10010190:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010192:	4b36      	ldr	r3, [pc, #216]	; (1001026c <gapm_cmp_evt+0x13c>)
10010194:	4798      	blx	r3
10010196:	2312      	movs	r3, #18
10010198:	4358      	muls	r0, r3
1001019a:	4935      	ldr	r1, [pc, #212]	; (10010270 <gapm_cmp_evt+0x140>)
1001019c:	1809      	adds	r1, r1, r0
1001019e:	1c0b      	adds	r3, r1, #0
100101a0:	894a      	ldrh	r2, [r1, #10]
100101a2:	3308      	adds	r3, #8
100101a4:	8122      	strh	r2, [r4, #8]
100101a6:	784f      	ldrb	r7, [r1, #1]
100101a8:	72a5      	strb	r5, [r4, #10]
100101aa:	7027      	strb	r7, [r4, #0]
100101ac:	898a      	ldrh	r2, [r1, #12]
100101ae:	1c60      	adds	r0, r4, #1
100101b0:	81a2      	strh	r2, [r4, #12]
100101b2:	88db      	ldrh	r3, [r3, #6]
100101b4:	3102      	adds	r1, #2
100101b6:	81e3      	strh	r3, [r4, #14]
100101b8:	89cb      	ldrh	r3, [r1, #14]
100101ba:	2206      	movs	r2, #6
100101bc:	8223      	strh	r3, [r4, #16]
100101be:	4b2d      	ldr	r3, [pc, #180]	; (10010274 <gapm_cmp_evt+0x144>)
100101c0:	4798      	blx	r3
100101c2:	2f00      	cmp	r7, #0
100101c4:	d00a      	beq.n	100101dc <gapm_cmp_evt+0xac>
100101c6:	79a3      	ldrb	r3, [r4, #6]
100101c8:	223f      	movs	r2, #63	; 0x3f
100101ca:	1c19      	adds	r1, r3, #0
100101cc:	3501      	adds	r5, #1
100101ce:	4391      	bics	r1, r2
100101d0:	29c0      	cmp	r1, #192	; 0xc0
100101d2:	d003      	beq.n	100101dc <gapm_cmp_evt+0xac>
100101d4:	065b      	lsls	r3, r3, #25
100101d6:	0fdb      	lsrs	r3, r3, #31
100101d8:	3502      	adds	r5, #2
100101da:	1aed      	subs	r5, r5, r3
100101dc:	2301      	movs	r3, #1
100101de:	425b      	negs	r3, r3
100101e0:	7025      	strb	r5, [r4, #0]
100101e2:	85b3      	strh	r3, [r6, #44]	; 0x2c
100101e4:	e038      	b.n	10010258 <gapm_cmp_evt+0x128>
100101e6:	700d      	strb	r5, [r1, #0]
100101e8:	e004      	b.n	100101f4 <gapm_cmp_evt+0xc4>
100101ea:	2300      	movs	r3, #0
100101ec:	2d45      	cmp	r5, #69	; 0x45
100101ee:	d000      	beq.n	100101f2 <gapm_cmp_evt+0xc2>
100101f0:	1c2b      	adds	r3, r5, #0
100101f2:	7023      	strb	r3, [r4, #0]
100101f4:	2003      	movs	r0, #3
100101f6:	e032      	b.n	1001025e <gapm_cmp_evt+0x12e>
100101f8:	4e1b      	ldr	r6, [pc, #108]	; (10010268 <gapm_cmp_evt+0x138>)
100101fa:	2100      	movs	r1, #0
100101fc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100101fe:	4b1b      	ldr	r3, [pc, #108]	; (1001026c <gapm_cmp_evt+0x13c>)
10010200:	4798      	blx	r3
10010202:	2807      	cmp	r0, #7
10010204:	d818      	bhi.n	10010238 <gapm_cmp_evt+0x108>
10010206:	2301      	movs	r3, #1
10010208:	425b      	negs	r3, r3
1001020a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001020c:	3313      	adds	r3, #19
1001020e:	4358      	muls	r0, r3
10010210:	4917      	ldr	r1, [pc, #92]	; (10010270 <gapm_cmp_evt+0x140>)
10010212:	1809      	adds	r1, r1, r0
10010214:	1c0b      	adds	r3, r1, #0
10010216:	894a      	ldrh	r2, [r1, #10]
10010218:	3308      	adds	r3, #8
1001021a:	8122      	strh	r2, [r4, #8]
1001021c:	784a      	ldrb	r2, [r1, #1]
1001021e:	72a5      	strb	r5, [r4, #10]
10010220:	7022      	strb	r2, [r4, #0]
10010222:	898a      	ldrh	r2, [r1, #12]
10010224:	1c60      	adds	r0, r4, #1
10010226:	81a2      	strh	r2, [r4, #12]
10010228:	88db      	ldrh	r3, [r3, #6]
1001022a:	3102      	adds	r1, #2
1001022c:	81e3      	strh	r3, [r4, #14]
1001022e:	89cb      	ldrh	r3, [r1, #14]
10010230:	2206      	movs	r2, #6
10010232:	8223      	strh	r3, [r4, #16]
10010234:	4b0f      	ldr	r3, [pc, #60]	; (10010274 <gapm_cmp_evt+0x144>)
10010236:	4798      	blx	r3
10010238:	2200      	movs	r2, #0
1001023a:	7823      	ldrb	r3, [r4, #0]
1001023c:	4293      	cmp	r3, r2
1001023e:	d00a      	beq.n	10010256 <gapm_cmp_evt+0x126>
10010240:	79a3      	ldrb	r3, [r4, #6]
10010242:	323f      	adds	r2, #63	; 0x3f
10010244:	1c19      	adds	r1, r3, #0
10010246:	4391      	bics	r1, r2
10010248:	3a3e      	subs	r2, #62	; 0x3e
1001024a:	29c0      	cmp	r1, #192	; 0xc0
1001024c:	d003      	beq.n	10010256 <gapm_cmp_evt+0x126>
1001024e:	065b      	lsls	r3, r3, #25
10010250:	0fdb      	lsrs	r3, r3, #31
10010252:	3202      	adds	r2, #2
10010254:	1ad2      	subs	r2, r2, r3
10010256:	7022      	strb	r2, [r4, #0]
10010258:	2005      	movs	r0, #5
1001025a:	e000      	b.n	1001025e <gapm_cmp_evt+0x12e>
1001025c:	2000      	movs	r0, #0
1001025e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010260:	1001810b 	.word	0x1001810b
10010264:	1000f481 	.word	0x1000f481
10010268:	1001e002 	.word	0x1001e002
1001026c:	1000f445 	.word	0x1000f445
10010270:	1001df72 	.word	0x1001df72
10010274:	100180cf 	.word	0x100180cf

10010278 <gapm_adv_report_evt_handler>:
10010278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001027a:	7843      	ldrb	r3, [r0, #1]
1001027c:	1c05      	adds	r5, r0, #0
1001027e:	9301      	str	r3, [sp, #4]
10010280:	466b      	mov	r3, sp
10010282:	1c0c      	adds	r4, r1, #0
10010284:	791b      	ldrb	r3, [r3, #4]
10010286:	7806      	ldrb	r6, [r0, #0]
10010288:	2206      	movs	r2, #6
1001028a:	704b      	strb	r3, [r1, #1]
1001028c:	1c88      	adds	r0, r1, #2
1001028e:	4f1b      	ldr	r7, [pc, #108]	; (100102fc <gapm_adv_report_evt_handler+0x84>)
10010290:	1ca9      	adds	r1, r5, #2
10010292:	47b8      	blx	r7
10010294:	1c20      	adds	r0, r4, #0
10010296:	1c29      	adds	r1, r5, #0
10010298:	7a2a      	ldrb	r2, [r5, #8]
1001029a:	3008      	adds	r0, #8
1001029c:	77c2      	strb	r2, [r0, #31]
1001029e:	3109      	adds	r1, #9
100102a0:	3528      	adds	r5, #40	; 0x28
100102a2:	47b8      	blx	r7
100102a4:	782b      	ldrb	r3, [r5, #0]
100102a6:	b25a      	sxtb	r2, r3
100102a8:	2a00      	cmp	r2, #0
100102aa:	da01      	bge.n	100102b0 <gapm_adv_report_evt_handler+0x38>
100102ac:	3301      	adds	r3, #1
100102ae:	b2db      	uxtb	r3, r3
100102b0:	1c22      	adds	r2, r4, #0
100102b2:	3228      	adds	r2, #40	; 0x28
100102b4:	7013      	strb	r3, [r2, #0]
100102b6:	2200      	movs	r2, #0
100102b8:	9b01      	ldr	r3, [sp, #4]
100102ba:	4293      	cmp	r3, r2
100102bc:	d00a      	beq.n	100102d4 <gapm_adv_report_evt_handler+0x5c>
100102be:	79e3      	ldrb	r3, [r4, #7]
100102c0:	323f      	adds	r2, #63	; 0x3f
100102c2:	1c19      	adds	r1, r3, #0
100102c4:	4391      	bics	r1, r2
100102c6:	3a3e      	subs	r2, #62	; 0x3e
100102c8:	29c0      	cmp	r1, #192	; 0xc0
100102ca:	d003      	beq.n	100102d4 <gapm_adv_report_evt_handler+0x5c>
100102cc:	065b      	lsls	r3, r3, #25
100102ce:	0fdb      	lsrs	r3, r3, #31
100102d0:	3202      	adds	r2, #2
100102d2:	1ad2      	subs	r2, r2, r3
100102d4:	7062      	strb	r2, [r4, #1]
100102d6:	2e04      	cmp	r6, #4
100102d8:	d80f      	bhi.n	100102fa <gapm_adv_report_evt_handler+0x82>
100102da:	1c30      	adds	r0, r6, #0
100102dc:	f004 fd60 	bl	10014da0 <__gnu_thumb1_case_uqi>
100102e0:	09070503 	.word	0x09070503
100102e4:	0b          	.byte	0x0b
100102e5:	00          	.byte	0x00
100102e6:	2300      	movs	r3, #0
100102e8:	e006      	b.n	100102f8 <gapm_adv_report_evt_handler+0x80>
100102ea:	2301      	movs	r3, #1
100102ec:	e004      	b.n	100102f8 <gapm_adv_report_evt_handler+0x80>
100102ee:	2302      	movs	r3, #2
100102f0:	e002      	b.n	100102f8 <gapm_adv_report_evt_handler+0x80>
100102f2:	2303      	movs	r3, #3
100102f4:	e000      	b.n	100102f8 <gapm_adv_report_evt_handler+0x80>
100102f6:	2305      	movs	r3, #5
100102f8:	7023      	strb	r3, [r4, #0]
100102fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100102fc:	100180cf 	.word	0x100180cf

10010300 <gapm_resolv_addr_cmd_handler>:
10010300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010302:	2314      	movs	r3, #20
10010304:	4c12      	ldr	r4, [pc, #72]	; (10010350 <gapm_resolv_addr_cmd_handler+0x50>)
10010306:	1c17      	adds	r7, r2, #0
10010308:	7023      	strb	r3, [r4, #0]
1001030a:	3b07      	subs	r3, #7
1001030c:	7063      	strb	r3, [r4, #1]
1001030e:	70a3      	strb	r3, [r4, #2]
10010310:	2300      	movs	r3, #0
10010312:	70e3      	strb	r3, [r4, #3]
10010314:	4b0f      	ldr	r3, [pc, #60]	; (10010354 <gapm_resolv_addr_cmd_handler+0x54>)
10010316:	1c05      	adds	r5, r0, #0
10010318:	881a      	ldrh	r2, [r3, #0]
1001031a:	881b      	ldrh	r3, [r3, #0]
1001031c:	4e0e      	ldr	r6, [pc, #56]	; (10010358 <gapm_resolv_addr_cmd_handler+0x58>)
1001031e:	0a1b      	lsrs	r3, r3, #8
10010320:	7163      	strb	r3, [r4, #5]
10010322:	2317      	movs	r3, #23
10010324:	012d      	lsls	r5, r5, #4
10010326:	7122      	strb	r2, [r4, #4]
10010328:	7260      	strb	r0, [r4, #9]
1001032a:	2206      	movs	r2, #6
1001032c:	480b      	ldr	r0, [pc, #44]	; (1001035c <gapm_resolv_addr_cmd_handler+0x5c>)
1001032e:	7223      	strb	r3, [r4, #8]
10010330:	47b0      	blx	r6
10010332:	1c39      	adds	r1, r7, #0
10010334:	1c2a      	adds	r2, r5, #0
10010336:	480a      	ldr	r0, [pc, #40]	; (10010360 <gapm_resolv_addr_cmd_handler+0x60>)
10010338:	47b0      	blx	r6
1001033a:	1c29      	adds	r1, r5, #0
1001033c:	3110      	adds	r1, #16
1001033e:	1c0b      	adds	r3, r1, #0
10010340:	3b08      	subs	r3, #8
10010342:	71a3      	strb	r3, [r4, #6]
10010344:	121b      	asrs	r3, r3, #8
10010346:	71e3      	strb	r3, [r4, #7]
10010348:	1c20      	adds	r0, r4, #0
1001034a:	4b06      	ldr	r3, [pc, #24]	; (10010364 <gapm_resolv_addr_cmd_handler+0x64>)
1001034c:	4798      	blx	r3
1001034e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010350:	1001e2e0 	.word	0x1001e2e0
10010354:	1001df70 	.word	0x1001df70
10010358:	100180cf 	.word	0x100180cf
1001035c:	1001e2ea 	.word	0x1001e2ea
10010360:	1001e2f0 	.word	0x1001e2f0
10010364:	1000f275 	.word	0x1000f275

10010368 <gapm_addr_solved_ind_handler>:
10010368:	b570      	push	{r4, r5, r6, lr}
1001036a:	1c04      	adds	r4, r0, #0
1001036c:	1c08      	adds	r0, r1, #0
1001036e:	1c0d      	adds	r5, r1, #0
10010370:	4e05      	ldr	r6, [pc, #20]	; (10010388 <gapm_addr_solved_ind_handler+0x20>)
10010372:	1c21      	adds	r1, r4, #0
10010374:	2206      	movs	r2, #6
10010376:	3011      	adds	r0, #17
10010378:	47b0      	blx	r6
1001037a:	1c68      	adds	r0, r5, #1
1001037c:	1da1      	adds	r1, r4, #6
1001037e:	2210      	movs	r2, #16
10010380:	47b0      	blx	r6
10010382:	2300      	movs	r3, #0
10010384:	702b      	strb	r3, [r5, #0]
10010386:	bd70      	pop	{r4, r5, r6, pc}
10010388:	100180cf 	.word	0x100180cf

1001038c <gapm_profile_added_ind_handler>:
1001038c:	b510      	push	{r4, lr}
1001038e:	7843      	ldrb	r3, [r0, #1]
10010390:	7902      	ldrb	r2, [r0, #4]
10010392:	7944      	ldrb	r4, [r0, #5]
10010394:	7800      	ldrb	r0, [r0, #0]
10010396:	021b      	lsls	r3, r3, #8
10010398:	4303      	orrs	r3, r0
1001039a:	2b1b      	cmp	r3, #27
1001039c:	d104      	bne.n	100103a8 <gapm_profile_added_ind_handler+0x1c>
1001039e:	2300      	movs	r3, #0
100103a0:	700b      	strb	r3, [r1, #0]
100103a2:	0223      	lsls	r3, r4, #8
100103a4:	4313      	orrs	r3, r2
100103a6:	804b      	strh	r3, [r1, #2]
100103a8:	203b      	movs	r0, #59	; 0x3b
100103aa:	bd10      	pop	{r4, pc}

100103ac <gattc_read_req_ind_parser>:
100103ac:	7843      	ldrb	r3, [r0, #1]
100103ae:	7802      	ldrb	r2, [r0, #0]
100103b0:	021b      	lsls	r3, r3, #8
100103b2:	4313      	orrs	r3, r2
100103b4:	804b      	strh	r3, [r1, #2]
100103b6:	4770      	bx	lr

100103b8 <gattc_write_req_ind_parser>:
100103b8:	b508      	push	{r3, lr}
100103ba:	1c13      	adds	r3, r2, #0
100103bc:	0a00      	lsrs	r0, r0, #8
100103be:	8010      	strh	r0, [r2, #0]
100103c0:	784a      	ldrb	r2, [r1, #1]
100103c2:	7808      	ldrb	r0, [r1, #0]
100103c4:	0212      	lsls	r2, r2, #8
100103c6:	4302      	orrs	r2, r0
100103c8:	805a      	strh	r2, [r3, #2]
100103ca:	78ca      	ldrb	r2, [r1, #3]
100103cc:	7888      	ldrb	r0, [r1, #2]
100103ce:	0212      	lsls	r2, r2, #8
100103d0:	4302      	orrs	r2, r0
100103d2:	809a      	strh	r2, [r3, #4]
100103d4:	794a      	ldrb	r2, [r1, #5]
100103d6:	7908      	ldrb	r0, [r1, #4]
100103d8:	0212      	lsls	r2, r2, #8
100103da:	4302      	orrs	r2, r0
100103dc:	80da      	strh	r2, [r3, #6]
100103de:	3308      	adds	r3, #8
100103e0:	1c18      	adds	r0, r3, #0
100103e2:	3106      	adds	r1, #6
100103e4:	4b01      	ldr	r3, [pc, #4]	; (100103ec <gattc_write_req_ind_parser+0x34>)
100103e6:	4798      	blx	r3
100103e8:	bd08      	pop	{r3, pc}
100103ea:	46c0      	nop			; (mov r8, r8)
100103ec:	100180cf 	.word	0x100180cf

100103f0 <gattc_att_info_req_parser>:
100103f0:	7843      	ldrb	r3, [r0, #1]
100103f2:	7802      	ldrb	r2, [r0, #0]
100103f4:	021b      	lsls	r3, r3, #8
100103f6:	4313      	orrs	r3, r2
100103f8:	800b      	strh	r3, [r1, #0]
100103fa:	4770      	bx	lr

100103fc <gattc_read_cfm>:
100103fc:	b538      	push	{r3, r4, r5, lr}
100103fe:	2514      	movs	r5, #20
10010400:	1c1c      	adds	r4, r3, #0
10010402:	4b14      	ldr	r3, [pc, #80]	; (10010454 <gattc_read_cfm+0x58>)
10010404:	70d9      	strb	r1, [r3, #3]
10010406:	4914      	ldr	r1, [pc, #80]	; (10010458 <gattc_read_cfm+0x5c>)
10010408:	701d      	strb	r5, [r3, #0]
1001040a:	3d08      	subs	r5, #8
1001040c:	705d      	strb	r5, [r3, #1]
1001040e:	709d      	strb	r5, [r3, #2]
10010410:	880d      	ldrh	r5, [r1, #0]
10010412:	8809      	ldrh	r1, [r1, #0]
10010414:	7218      	strb	r0, [r3, #8]
10010416:	0a09      	lsrs	r1, r1, #8
10010418:	7159      	strb	r1, [r3, #5]
1001041a:	0a00      	lsrs	r0, r0, #8
1001041c:	0a21      	lsrs	r1, r4, #8
1001041e:	711d      	strb	r5, [r3, #4]
10010420:	7258      	strb	r0, [r3, #9]
10010422:	729c      	strb	r4, [r3, #10]
10010424:	72d9      	strb	r1, [r3, #11]
10010426:	731a      	strb	r2, [r3, #12]
10010428:	1c1d      	adds	r5, r3, #0
1001042a:	2c00      	cmp	r4, #0
1001042c:	d007      	beq.n	1001043e <gattc_read_cfm+0x42>
1001042e:	9904      	ldr	r1, [sp, #16]
10010430:	1c22      	adds	r2, r4, #0
10010432:	480a      	ldr	r0, [pc, #40]	; (1001045c <gattc_read_cfm+0x60>)
10010434:	4b0a      	ldr	r3, [pc, #40]	; (10010460 <gattc_read_cfm+0x64>)
10010436:	340d      	adds	r4, #13
10010438:	4798      	blx	r3
1001043a:	b2a1      	uxth	r1, r4
1001043c:	e001      	b.n	10010442 <gattc_read_cfm+0x46>
1001043e:	210e      	movs	r1, #14
10010440:	735c      	strb	r4, [r3, #13]
10010442:	1c0b      	adds	r3, r1, #0
10010444:	3b08      	subs	r3, #8
10010446:	71ab      	strb	r3, [r5, #6]
10010448:	121b      	asrs	r3, r3, #8
1001044a:	71eb      	strb	r3, [r5, #7]
1001044c:	1c28      	adds	r0, r5, #0
1001044e:	4b05      	ldr	r3, [pc, #20]	; (10010464 <gattc_read_cfm+0x68>)
10010450:	4798      	blx	r3
10010452:	bd38      	pop	{r3, r4, r5, pc}
10010454:	1001e2e0 	.word	0x1001e2e0
10010458:	1001df70 	.word	0x1001df70
1001045c:	1001e2ed 	.word	0x1001e2ed
10010460:	100180cf 	.word	0x100180cf
10010464:	1000f275 	.word	0x1000f275

10010468 <gattc_write_cfm>:
10010468:	4b0d      	ldr	r3, [pc, #52]	; (100104a0 <gattc_write_cfm+0x38>)
1001046a:	b510      	push	{r4, lr}
1001046c:	729a      	strb	r2, [r3, #10]
1001046e:	2203      	movs	r2, #3
10010470:	2416      	movs	r4, #22
10010472:	719a      	strb	r2, [r3, #6]
10010474:	2200      	movs	r2, #0
10010476:	70d9      	strb	r1, [r3, #3]
10010478:	490a      	ldr	r1, [pc, #40]	; (100104a4 <gattc_write_cfm+0x3c>)
1001047a:	701c      	strb	r4, [r3, #0]
1001047c:	3c0a      	subs	r4, #10
1001047e:	705c      	strb	r4, [r3, #1]
10010480:	709c      	strb	r4, [r3, #2]
10010482:	880c      	ldrh	r4, [r1, #0]
10010484:	8809      	ldrh	r1, [r1, #0]
10010486:	7218      	strb	r0, [r3, #8]
10010488:	0a09      	lsrs	r1, r1, #8
1001048a:	0a00      	lsrs	r0, r0, #8
1001048c:	711c      	strb	r4, [r3, #4]
1001048e:	7159      	strb	r1, [r3, #5]
10010490:	7258      	strb	r0, [r3, #9]
10010492:	71da      	strb	r2, [r3, #7]
10010494:	1c18      	adds	r0, r3, #0
10010496:	210b      	movs	r1, #11
10010498:	4b03      	ldr	r3, [pc, #12]	; (100104a8 <gattc_write_cfm+0x40>)
1001049a:	4798      	blx	r3
1001049c:	bd10      	pop	{r4, pc}
1001049e:	46c0      	nop			; (mov r8, r8)
100104a0:	1001e2e0 	.word	0x1001e2e0
100104a4:	1001df70 	.word	0x1001df70
100104a8:	1000f275 	.word	0x1000f275

100104ac <gattc_att_info_cfm>:
100104ac:	b538      	push	{r3, r4, r5, lr}
100104ae:	4c0e      	ldr	r4, [pc, #56]	; (100104e8 <gattc_att_info_cfm+0x3c>)
100104b0:	2518      	movs	r5, #24
100104b2:	7323      	strb	r3, [r4, #12]
100104b4:	2305      	movs	r3, #5
100104b6:	71a3      	strb	r3, [r4, #6]
100104b8:	2300      	movs	r3, #0
100104ba:	70e1      	strb	r1, [r4, #3]
100104bc:	490b      	ldr	r1, [pc, #44]	; (100104ec <gattc_att_info_cfm+0x40>)
100104be:	7025      	strb	r5, [r4, #0]
100104c0:	3d0c      	subs	r5, #12
100104c2:	7065      	strb	r5, [r4, #1]
100104c4:	70a5      	strb	r5, [r4, #2]
100104c6:	880d      	ldrh	r5, [r1, #0]
100104c8:	8809      	ldrh	r1, [r1, #0]
100104ca:	7220      	strb	r0, [r4, #8]
100104cc:	0a09      	lsrs	r1, r1, #8
100104ce:	0a00      	lsrs	r0, r0, #8
100104d0:	7161      	strb	r1, [r4, #5]
100104d2:	7260      	strb	r0, [r4, #9]
100104d4:	72a2      	strb	r2, [r4, #10]
100104d6:	71e3      	strb	r3, [r4, #7]
100104d8:	0a12      	lsrs	r2, r2, #8
100104da:	1c20      	adds	r0, r4, #0
100104dc:	210d      	movs	r1, #13
100104de:	4b04      	ldr	r3, [pc, #16]	; (100104f0 <gattc_att_info_cfm+0x44>)
100104e0:	7125      	strb	r5, [r4, #4]
100104e2:	72e2      	strb	r2, [r4, #11]
100104e4:	4798      	blx	r3
100104e6:	bd38      	pop	{r3, r4, r5, pc}
100104e8:	1001e2e0 	.word	0x1001e2e0
100104ec:	1001df70 	.word	0x1001df70
100104f0:	1000f275 	.word	0x1000f275

100104f4 <gattc_event_cfm_handler>:
100104f4:	220e      	movs	r2, #14
100104f6:	b508      	push	{r3, lr}
100104f8:	4b0b      	ldr	r3, [pc, #44]	; (10010528 <gattc_event_cfm_handler+0x34>)
100104fa:	701a      	strb	r2, [r3, #0]
100104fc:	3a02      	subs	r2, #2
100104fe:	705a      	strb	r2, [r3, #1]
10010500:	709a      	strb	r2, [r3, #2]
10010502:	4a0a      	ldr	r2, [pc, #40]	; (1001052c <gattc_event_cfm_handler+0x38>)
10010504:	70d8      	strb	r0, [r3, #3]
10010506:	8810      	ldrh	r0, [r2, #0]
10010508:	8812      	ldrh	r2, [r2, #0]
1001050a:	7219      	strb	r1, [r3, #8]
1001050c:	0a12      	lsrs	r2, r2, #8
1001050e:	715a      	strb	r2, [r3, #5]
10010510:	2202      	movs	r2, #2
10010512:	719a      	strb	r2, [r3, #6]
10010514:	2200      	movs	r2, #0
10010516:	0a09      	lsrs	r1, r1, #8
10010518:	7118      	strb	r0, [r3, #4]
1001051a:	7259      	strb	r1, [r3, #9]
1001051c:	71da      	strb	r2, [r3, #7]
1001051e:	1c18      	adds	r0, r3, #0
10010520:	210a      	movs	r1, #10
10010522:	4b03      	ldr	r3, [pc, #12]	; (10010530 <gattc_event_cfm_handler+0x3c>)
10010524:	4798      	blx	r3
10010526:	bd08      	pop	{r3, pc}
10010528:	1001e2e0 	.word	0x1001e2e0
1001052c:	1001df70 	.word	0x1001df70
10010530:	1000f275 	.word	0x1000f275

10010534 <gattc_disc_svc_ind_parser>:
10010534:	b570      	push	{r4, r5, r6, lr}
10010536:	1c15      	adds	r5, r2, #0
10010538:	0a00      	lsrs	r0, r0, #8
1001053a:	8010      	strh	r0, [r2, #0]
1001053c:	784b      	ldrb	r3, [r1, #1]
1001053e:	780a      	ldrb	r2, [r1, #0]
10010540:	021b      	lsls	r3, r3, #8
10010542:	4313      	orrs	r3, r2
10010544:	806b      	strh	r3, [r5, #2]
10010546:	78cb      	ldrb	r3, [r1, #3]
10010548:	788a      	ldrb	r2, [r1, #2]
1001054a:	021b      	lsls	r3, r3, #8
1001054c:	4313      	orrs	r3, r2
1001054e:	80ab      	strh	r3, [r5, #4]
10010550:	790e      	ldrb	r6, [r1, #4]
10010552:	4b05      	ldr	r3, [pc, #20]	; (10010568 <gattc_disc_svc_ind_parser+0x34>)
10010554:	1c30      	adds	r0, r6, #0
10010556:	1c0c      	adds	r4, r1, #0
10010558:	4798      	blx	r3
1001055a:	1c32      	adds	r2, r6, #0
1001055c:	71a8      	strb	r0, [r5, #6]
1001055e:	1d61      	adds	r1, r4, #5
10010560:	1de8      	adds	r0, r5, #7
10010562:	4b02      	ldr	r3, [pc, #8]	; (1001056c <gattc_disc_svc_ind_parser+0x38>)
10010564:	4798      	blx	r3
10010566:	bd70      	pop	{r4, r5, r6, pc}
10010568:	1000ec2d 	.word	0x1000ec2d
1001056c:	100180cf 	.word	0x100180cf

10010570 <gattc_disc_svc_incl_ind_parser>:
10010570:	b570      	push	{r4, r5, r6, lr}
10010572:	1c15      	adds	r5, r2, #0
10010574:	0a00      	lsrs	r0, r0, #8
10010576:	8010      	strh	r0, [r2, #0]
10010578:	784b      	ldrb	r3, [r1, #1]
1001057a:	780a      	ldrb	r2, [r1, #0]
1001057c:	021b      	lsls	r3, r3, #8
1001057e:	4313      	orrs	r3, r2
10010580:	806b      	strh	r3, [r5, #2]
10010582:	78cb      	ldrb	r3, [r1, #3]
10010584:	788a      	ldrb	r2, [r1, #2]
10010586:	021b      	lsls	r3, r3, #8
10010588:	4313      	orrs	r3, r2
1001058a:	80ab      	strh	r3, [r5, #4]
1001058c:	794b      	ldrb	r3, [r1, #5]
1001058e:	790a      	ldrb	r2, [r1, #4]
10010590:	021b      	lsls	r3, r3, #8
10010592:	4313      	orrs	r3, r2
10010594:	80eb      	strh	r3, [r5, #6]
10010596:	798e      	ldrb	r6, [r1, #6]
10010598:	4b05      	ldr	r3, [pc, #20]	; (100105b0 <gattc_disc_svc_incl_ind_parser+0x40>)
1001059a:	1c30      	adds	r0, r6, #0
1001059c:	1c0c      	adds	r4, r1, #0
1001059e:	4798      	blx	r3
100105a0:	7228      	strb	r0, [r5, #8]
100105a2:	1c28      	adds	r0, r5, #0
100105a4:	1c32      	adds	r2, r6, #0
100105a6:	1de1      	adds	r1, r4, #7
100105a8:	4b02      	ldr	r3, [pc, #8]	; (100105b4 <gattc_disc_svc_incl_ind_parser+0x44>)
100105aa:	3009      	adds	r0, #9
100105ac:	4798      	blx	r3
100105ae:	bd70      	pop	{r4, r5, r6, pc}
100105b0:	1000ec2d 	.word	0x1000ec2d
100105b4:	100180cf 	.word	0x100180cf

100105b8 <gattc_disc_char_ind_parser>:
100105b8:	b570      	push	{r4, r5, r6, lr}
100105ba:	1c15      	adds	r5, r2, #0
100105bc:	0a00      	lsrs	r0, r0, #8
100105be:	8010      	strh	r0, [r2, #0]
100105c0:	784b      	ldrb	r3, [r1, #1]
100105c2:	780a      	ldrb	r2, [r1, #0]
100105c4:	021b      	lsls	r3, r3, #8
100105c6:	4313      	orrs	r3, r2
100105c8:	806b      	strh	r3, [r5, #2]
100105ca:	78cb      	ldrb	r3, [r1, #3]
100105cc:	788a      	ldrb	r2, [r1, #2]
100105ce:	021b      	lsls	r3, r3, #8
100105d0:	4313      	orrs	r3, r2
100105d2:	80ab      	strh	r3, [r5, #4]
100105d4:	790b      	ldrb	r3, [r1, #4]
100105d6:	1c0c      	adds	r4, r1, #0
100105d8:	71ab      	strb	r3, [r5, #6]
100105da:	794e      	ldrb	r6, [r1, #5]
100105dc:	4b05      	ldr	r3, [pc, #20]	; (100105f4 <gattc_disc_char_ind_parser+0x3c>)
100105de:	1c30      	adds	r0, r6, #0
100105e0:	4798      	blx	r3
100105e2:	71e8      	strb	r0, [r5, #7]
100105e4:	1c28      	adds	r0, r5, #0
100105e6:	1c32      	adds	r2, r6, #0
100105e8:	1da1      	adds	r1, r4, #6
100105ea:	4b03      	ldr	r3, [pc, #12]	; (100105f8 <gattc_disc_char_ind_parser+0x40>)
100105ec:	3008      	adds	r0, #8
100105ee:	4798      	blx	r3
100105f0:	bd70      	pop	{r4, r5, r6, pc}
100105f2:	46c0      	nop			; (mov r8, r8)
100105f4:	1000ec2d 	.word	0x1000ec2d
100105f8:	100180cf 	.word	0x100180cf

100105fc <gattc_disc_char_desc_ind_parser>:
100105fc:	b570      	push	{r4, r5, r6, lr}
100105fe:	1c15      	adds	r5, r2, #0
10010600:	0a00      	lsrs	r0, r0, #8
10010602:	8010      	strh	r0, [r2, #0]
10010604:	784b      	ldrb	r3, [r1, #1]
10010606:	780a      	ldrb	r2, [r1, #0]
10010608:	021b      	lsls	r3, r3, #8
1001060a:	4313      	orrs	r3, r2
1001060c:	806b      	strh	r3, [r5, #2]
1001060e:	788e      	ldrb	r6, [r1, #2]
10010610:	4b05      	ldr	r3, [pc, #20]	; (10010628 <gattc_disc_char_desc_ind_parser+0x2c>)
10010612:	1c30      	adds	r0, r6, #0
10010614:	1c0c      	adds	r4, r1, #0
10010616:	4798      	blx	r3
10010618:	1c32      	adds	r2, r6, #0
1001061a:	7128      	strb	r0, [r5, #4]
1001061c:	1ce1      	adds	r1, r4, #3
1001061e:	1d68      	adds	r0, r5, #5
10010620:	4b02      	ldr	r3, [pc, #8]	; (1001062c <gattc_disc_char_desc_ind_parser+0x30>)
10010622:	4798      	blx	r3
10010624:	bd70      	pop	{r4, r5, r6, pc}
10010626:	46c0      	nop			; (mov r8, r8)
10010628:	1000ec2d 	.word	0x1000ec2d
1001062c:	100180cf 	.word	0x100180cf

10010630 <gattc_event_ind_and_notification_parser>:
10010630:	b510      	push	{r4, lr}
10010632:	780c      	ldrb	r4, [r1, #0]
10010634:	1c13      	adds	r3, r2, #0
10010636:	2c12      	cmp	r4, #18
10010638:	d10e      	bne.n	10010658 <gattc_event_ind_and_notification_parser+0x28>
1001063a:	0a00      	lsrs	r0, r0, #8
1001063c:	8010      	strh	r0, [r2, #0]
1001063e:	788a      	ldrb	r2, [r1, #2]
10010640:	709a      	strb	r2, [r3, #2]
10010642:	7948      	ldrb	r0, [r1, #5]
10010644:	790c      	ldrb	r4, [r1, #4]
10010646:	0200      	lsls	r0, r0, #8
10010648:	4320      	orrs	r0, r4
1001064a:	8098      	strh	r0, [r3, #4]
1001064c:	3106      	adds	r1, #6
1001064e:	1d98      	adds	r0, r3, #6
10010650:	4b0b      	ldr	r3, [pc, #44]	; (10010680 <gattc_event_ind_and_notification_parser+0x50>)
10010652:	4798      	blx	r3
10010654:	221b      	movs	r2, #27
10010656:	e010      	b.n	1001067a <gattc_event_ind_and_notification_parser+0x4a>
10010658:	2200      	movs	r2, #0
1001065a:	2c13      	cmp	r4, #19
1001065c:	d10d      	bne.n	1001067a <gattc_event_ind_and_notification_parser+0x4a>
1001065e:	0a00      	lsrs	r0, r0, #8
10010660:	8018      	strh	r0, [r3, #0]
10010662:	788a      	ldrb	r2, [r1, #2]
10010664:	709a      	strb	r2, [r3, #2]
10010666:	7908      	ldrb	r0, [r1, #4]
10010668:	78cc      	ldrb	r4, [r1, #3]
1001066a:	0200      	lsls	r0, r0, #8
1001066c:	4320      	orrs	r0, r4
1001066e:	8098      	strh	r0, [r3, #4]
10010670:	3106      	adds	r1, #6
10010672:	1d98      	adds	r0, r3, #6
10010674:	4b02      	ldr	r3, [pc, #8]	; (10010680 <gattc_event_ind_and_notification_parser+0x50>)
10010676:	4798      	blx	r3
10010678:	221c      	movs	r2, #28
1001067a:	1c10      	adds	r0, r2, #0
1001067c:	bd10      	pop	{r4, pc}
1001067e:	46c0      	nop			; (mov r8, r8)
10010680:	100180cf 	.word	0x100180cf

10010684 <gattc_complete_evt_handler>:
10010684:	b500      	push	{lr}
10010686:	0a00      	lsrs	r0, r0, #8
10010688:	8010      	strh	r0, [r2, #0]
1001068a:	7808      	ldrb	r0, [r1, #0]
1001068c:	7090      	strb	r0, [r2, #2]
1001068e:	784b      	ldrb	r3, [r1, #1]
10010690:	3801      	subs	r0, #1
10010692:	70d3      	strb	r3, [r2, #3]
10010694:	2813      	cmp	r0, #19
10010696:	d82c      	bhi.n	100106f2 <gattc_complete_evt_handler+0x6e>
10010698:	f004 fb82 	bl	10014da0 <__gnu_thumb1_case_uqi>
1001069c:	0a0a0a0c 	.word	0x0a0a0a0c
100106a0:	210a0a0a 	.word	0x210a0a0a
100106a4:	111f2121 	.word	0x111f2121
100106a8:	2b111111 	.word	0x2b111111
100106ac:	2919132b 	.word	0x2919132b
100106b0:	2017      	movs	r0, #23
100106b2:	e01f      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106b4:	2024      	movs	r0, #36	; 0x24
100106b6:	2b00      	cmp	r3, #0
100106b8:	d11c      	bne.n	100106f4 <gattc_complete_evt_handler+0x70>
100106ba:	3017      	adds	r0, #23
100106bc:	e01a      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106be:	2025      	movs	r0, #37	; 0x25
100106c0:	e018      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106c2:	4a0d      	ldr	r2, [pc, #52]	; (100106f8 <gattc_complete_evt_handler+0x74>)
100106c4:	201d      	movs	r0, #29
100106c6:	6813      	ldr	r3, [r2, #0]
100106c8:	3b01      	subs	r3, #1
100106ca:	6013      	str	r3, [r2, #0]
100106cc:	e012      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106ce:	4a0a      	ldr	r2, [pc, #40]	; (100106f8 <gattc_complete_evt_handler+0x74>)
100106d0:	201e      	movs	r0, #30
100106d2:	6813      	ldr	r3, [r2, #0]
100106d4:	3b01      	subs	r3, #1
100106d6:	6013      	str	r3, [r2, #0]
100106d8:	e00c      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106da:	2019      	movs	r0, #25
100106dc:	e00a      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106de:	203b      	movs	r0, #59	; 0x3b
100106e0:	2b00      	cmp	r3, #0
100106e2:	d007      	beq.n	100106f4 <gattc_complete_evt_handler+0x70>
100106e4:	2182      	movs	r1, #130	; 0x82
100106e6:	0089      	lsls	r1, r1, #2
100106e8:	5453      	strb	r3, [r2, r1]
100106ea:	3823      	subs	r0, #35	; 0x23
100106ec:	e002      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106ee:	2021      	movs	r0, #33	; 0x21
100106f0:	e000      	b.n	100106f4 <gattc_complete_evt_handler+0x70>
100106f2:	2000      	movs	r0, #0
100106f4:	bd00      	pop	{pc}
100106f6:	46c0      	nop			; (mov r8, r8)
100106f8:	1001cfa4 	.word	0x1001cfa4

100106fc <gattc_event_mtu_changed_ind_parser>:
100106fc:	0a00      	lsrs	r0, r0, #8
100106fe:	8010      	strh	r0, [r2, #0]
10010700:	784b      	ldrb	r3, [r1, #1]
10010702:	7809      	ldrb	r1, [r1, #0]
10010704:	021b      	lsls	r3, r3, #8
10010706:	430b      	orrs	r3, r1
10010708:	8053      	strh	r3, [r2, #2]
1001070a:	4770      	bx	lr

1001070c <gattc_read_ind_parser>:
1001070c:	0a00      	lsrs	r0, r0, #8
1001070e:	b508      	push	{r3, lr}
10010710:	8010      	strh	r0, [r2, #0]
10010712:	1c13      	adds	r3, r2, #0
10010714:	2282      	movs	r2, #130	; 0x82
10010716:	2000      	movs	r0, #0
10010718:	0092      	lsls	r2, r2, #2
1001071a:	5498      	strb	r0, [r3, r2]
1001071c:	784a      	ldrb	r2, [r1, #1]
1001071e:	7808      	ldrb	r0, [r1, #0]
10010720:	0212      	lsls	r2, r2, #8
10010722:	4302      	orrs	r2, r0
10010724:	805a      	strh	r2, [r3, #2]
10010726:	78ca      	ldrb	r2, [r1, #3]
10010728:	7888      	ldrb	r0, [r1, #2]
1001072a:	0212      	lsls	r2, r2, #8
1001072c:	4302      	orrs	r2, r0
1001072e:	80da      	strh	r2, [r3, #6]
10010730:	794a      	ldrb	r2, [r1, #5]
10010732:	7908      	ldrb	r0, [r1, #4]
10010734:	0212      	lsls	r2, r2, #8
10010736:	4302      	orrs	r2, r0
10010738:	809a      	strh	r2, [r3, #4]
1001073a:	3308      	adds	r3, #8
1001073c:	1c18      	adds	r0, r3, #0
1001073e:	3106      	adds	r1, #6
10010740:	4b01      	ldr	r3, [pc, #4]	; (10010748 <gattc_read_ind_parser+0x3c>)
10010742:	4798      	blx	r3
10010744:	bd08      	pop	{r3, pc}
10010746:	46c0      	nop			; (mov r8, r8)
10010748:	100180cf 	.word	0x100180cf

1001074c <gattc_svc_changed_cfg_ind_parser>:
1001074c:	0a00      	lsrs	r0, r0, #8
1001074e:	8010      	strh	r0, [r2, #0]
10010750:	784b      	ldrb	r3, [r1, #1]
10010752:	7809      	ldrb	r1, [r1, #0]
10010754:	021b      	lsls	r3, r3, #8
10010756:	430b      	orrs	r3, r1
10010758:	8053      	strh	r3, [r2, #2]
1001075a:	4770      	bx	lr

1001075c <init_gattc_task_module>:
1001075c:	2300      	movs	r3, #0
1001075e:	4a02      	ldr	r2, [pc, #8]	; (10010768 <init_gattc_task_module+0xc>)
10010760:	8013      	strh	r3, [r2, #0]
10010762:	4a02      	ldr	r2, [pc, #8]	; (1001076c <init_gattc_task_module+0x10>)
10010764:	8013      	strh	r3, [r2, #0]
10010766:	4770      	bx	lr
10010768:	1001cf9e 	.word	0x1001cf9e
1001076c:	1001cfa0 	.word	0x1001cfa0

10010770 <gattm_att_set_value_req_handler>:
10010770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010772:	466b      	mov	r3, sp
10010774:	1dde      	adds	r6, r3, #7
10010776:	2300      	movs	r3, #0
10010778:	1c0d      	adds	r5, r1, #0
1001077a:	210c      	movs	r1, #12
1001077c:	270b      	movs	r7, #11
1001077e:	4c17      	ldr	r4, [pc, #92]	; (100107dc <gattm_att_set_value_req_handler+0x6c>)
10010780:	7033      	strb	r3, [r6, #0]
10010782:	70e3      	strb	r3, [r4, #3]
10010784:	4b16      	ldr	r3, [pc, #88]	; (100107e0 <gattm_att_set_value_req_handler+0x70>)
10010786:	7021      	strb	r1, [r4, #0]
10010788:	8819      	ldrh	r1, [r3, #0]
1001078a:	881b      	ldrh	r3, [r3, #0]
1001078c:	7220      	strb	r0, [r4, #8]
1001078e:	0a1b      	lsrs	r3, r3, #8
10010790:	7163      	strb	r3, [r4, #5]
10010792:	0a00      	lsrs	r0, r0, #8
10010794:	0a2b      	lsrs	r3, r5, #8
10010796:	7121      	strb	r1, [r4, #4]
10010798:	7260      	strb	r0, [r4, #9]
1001079a:	1c11      	adds	r1, r2, #0
1001079c:	72a5      	strb	r5, [r4, #10]
1001079e:	1c2a      	adds	r2, r5, #0
100107a0:	72e3      	strb	r3, [r4, #11]
100107a2:	350c      	adds	r5, #12
100107a4:	4b0f      	ldr	r3, [pc, #60]	; (100107e4 <gattm_att_set_value_req_handler+0x74>)
100107a6:	4810      	ldr	r0, [pc, #64]	; (100107e8 <gattm_att_set_value_req_handler+0x78>)
100107a8:	7067      	strb	r7, [r4, #1]
100107aa:	70a7      	strb	r7, [r4, #2]
100107ac:	4798      	blx	r3
100107ae:	b2a9      	uxth	r1, r5
100107b0:	4b0e      	ldr	r3, [pc, #56]	; (100107ec <gattm_att_set_value_req_handler+0x7c>)
100107b2:	4d0f      	ldr	r5, [pc, #60]	; (100107f0 <gattm_att_set_value_req_handler+0x80>)
100107b4:	1c20      	adds	r0, r4, #0
100107b6:	802b      	strh	r3, [r5, #0]
100107b8:	1c0b      	adds	r3, r1, #0
100107ba:	3b08      	subs	r3, #8
100107bc:	71a3      	strb	r3, [r4, #6]
100107be:	121b      	asrs	r3, r3, #8
100107c0:	71e3      	strb	r3, [r4, #7]
100107c2:	4b0c      	ldr	r3, [pc, #48]	; (100107f4 <gattm_att_set_value_req_handler+0x84>)
100107c4:	80af      	strh	r7, [r5, #4]
100107c6:	4798      	blx	r3
100107c8:	1c30      	adds	r0, r6, #0
100107ca:	4b0b      	ldr	r3, [pc, #44]	; (100107f8 <gattm_att_set_value_req_handler+0x88>)
100107cc:	4798      	blx	r3
100107ce:	7833      	ldrb	r3, [r6, #0]
100107d0:	20e2      	movs	r0, #226	; 0xe2
100107d2:	2b00      	cmp	r3, #0
100107d4:	d101      	bne.n	100107da <gattm_att_set_value_req_handler+0x6a>
100107d6:	68ab      	ldr	r3, [r5, #8]
100107d8:	7898      	ldrb	r0, [r3, #2]
100107da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107dc:	1001e2e0 	.word	0x1001e2e0
100107e0:	1001df70 	.word	0x1001df70
100107e4:	100180cf 	.word	0x100180cf
100107e8:	1001e2ec 	.word	0x1001e2ec
100107ec:	00000b0d 	.word	0x00000b0d
100107f0:	1001df64 	.word	0x1001df64
100107f4:	1000f275 	.word	0x1000f275
100107f8:	1000f2d9 	.word	0x1000f2d9

100107fc <gattm_att_get_value_req_handler>:
100107fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100107fe:	b085      	sub	sp, #20
10010800:	9201      	str	r2, [sp, #4]
10010802:	220a      	movs	r2, #10
10010804:	1c04      	adds	r4, r0, #0
10010806:	481d      	ldr	r0, [pc, #116]	; (1001087c <gattm_att_get_value_req_handler+0x80>)
10010808:	ab02      	add	r3, sp, #8
1001080a:	1dde      	adds	r6, r3, #7
1001080c:	7002      	strb	r2, [r0, #0]
1001080e:	2300      	movs	r3, #0
10010810:	220b      	movs	r2, #11
10010812:	4d1b      	ldr	r5, [pc, #108]	; (10010880 <gattm_att_get_value_req_handler+0x84>)
10010814:	1c0f      	adds	r7, r1, #0
10010816:	8829      	ldrh	r1, [r5, #0]
10010818:	882d      	ldrh	r5, [r5, #0]
1001081a:	7101      	strb	r1, [r0, #4]
1001081c:	0a2d      	lsrs	r5, r5, #8
1001081e:	7145      	strb	r5, [r0, #5]
10010820:	0a25      	lsrs	r5, r4, #8
10010822:	7245      	strb	r5, [r0, #9]
10010824:	4917      	ldr	r1, [pc, #92]	; (10010884 <gattm_att_get_value_req_handler+0x88>)
10010826:	4d18      	ldr	r5, [pc, #96]	; (10010888 <gattm_att_get_value_req_handler+0x8c>)
10010828:	7033      	strb	r3, [r6, #0]
1001082a:	7042      	strb	r2, [r0, #1]
1001082c:	7082      	strb	r2, [r0, #2]
1001082e:	70c3      	strb	r3, [r0, #3]
10010830:	8029      	strh	r1, [r5, #0]
10010832:	80aa      	strh	r2, [r5, #4]
10010834:	71c3      	strb	r3, [r0, #7]
10010836:	3a09      	subs	r2, #9
10010838:	210a      	movs	r1, #10
1001083a:	4b14      	ldr	r3, [pc, #80]	; (1001088c <gattm_att_get_value_req_handler+0x90>)
1001083c:	7182      	strb	r2, [r0, #6]
1001083e:	7204      	strb	r4, [r0, #8]
10010840:	4798      	blx	r3
10010842:	1c30      	adds	r0, r6, #0
10010844:	4b12      	ldr	r3, [pc, #72]	; (10010890 <gattm_att_get_value_req_handler+0x94>)
10010846:	4798      	blx	r3
10010848:	7833      	ldrb	r3, [r6, #0]
1001084a:	20e2      	movs	r0, #226	; 0xe2
1001084c:	2b00      	cmp	r3, #0
1001084e:	d112      	bne.n	10010876 <gattm_att_get_value_req_handler+0x7a>
10010850:	68a9      	ldr	r1, [r5, #8]
10010852:	9801      	ldr	r0, [sp, #4]
10010854:	784d      	ldrb	r5, [r1, #1]
10010856:	780b      	ldrb	r3, [r1, #0]
10010858:	78ca      	ldrb	r2, [r1, #3]
1001085a:	022d      	lsls	r5, r5, #8
1001085c:	431d      	orrs	r5, r3
1001085e:	788b      	ldrb	r3, [r1, #2]
10010860:	0212      	lsls	r2, r2, #8
10010862:	431a      	orrs	r2, r3
10010864:	803a      	strh	r2, [r7, #0]
10010866:	790e      	ldrb	r6, [r1, #4]
10010868:	4b0a      	ldr	r3, [pc, #40]	; (10010894 <gattm_att_get_value_req_handler+0x98>)
1001086a:	3105      	adds	r1, #5
1001086c:	4798      	blx	r3
1001086e:	20e2      	movs	r0, #226	; 0xe2
10010870:	42ac      	cmp	r4, r5
10010872:	d100      	bne.n	10010876 <gattm_att_get_value_req_handler+0x7a>
10010874:	1c30      	adds	r0, r6, #0
10010876:	b005      	add	sp, #20
10010878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001087a:	46c0      	nop			; (mov r8, r8)
1001087c:	1001e2e0 	.word	0x1001e2e0
10010880:	1001df70 	.word	0x1001df70
10010884:	00000b0b 	.word	0x00000b0b
10010888:	1001df64 	.word	0x1001df64
1001088c:	1000f275 	.word	0x1000f275
10010890:	1000f2d9 	.word	0x1000f2d9
10010894:	100180cf 	.word	0x100180cf

10010898 <htpt_enable_rsp_handler>:
10010898:	780b      	ldrb	r3, [r1, #0]
1001089a:	7013      	strb	r3, [r2, #0]
1001089c:	784b      	ldrb	r3, [r1, #1]
1001089e:	7053      	strb	r3, [r2, #1]
100108a0:	4770      	bx	lr

100108a2 <htpt_temp_send_rsp_handler>:
100108a2:	780b      	ldrb	r3, [r1, #0]
100108a4:	7013      	strb	r3, [r2, #0]
100108a6:	4770      	bx	lr

100108a8 <htpt_meas_intv_upd_rsp_handler>:
100108a8:	780b      	ldrb	r3, [r1, #0]
100108aa:	7013      	strb	r3, [r2, #0]
100108ac:	4770      	bx	lr

100108ae <htpt_meas_intv_chg_req_ind_handler>:
100108ae:	78cb      	ldrb	r3, [r1, #3]
100108b0:	7889      	ldrb	r1, [r1, #2]
100108b2:	021b      	lsls	r3, r3, #8
100108b4:	430b      	orrs	r3, r1
100108b6:	8013      	strh	r3, [r2, #0]
100108b8:	4770      	bx	lr

100108ba <htpt_cfg_indntf_ind_handler>:
100108ba:	780b      	ldrb	r3, [r1, #0]
100108bc:	7013      	strb	r3, [r2, #0]
100108be:	784b      	ldrb	r3, [r1, #1]
100108c0:	7053      	strb	r3, [r2, #1]
100108c2:	4770      	bx	lr

100108c4 <atan2f>:
100108c4:	b510      	push	{r4, lr}
100108c6:	f000 f853 	bl	10010970 <__ieee754_atan2f>
100108ca:	bd10      	pop	{r4, pc}

100108cc <sqrtf>:
100108cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100108ce:	2600      	movs	r6, #0
100108d0:	b08d      	sub	sp, #52	; 0x34
100108d2:	1c04      	adds	r4, r0, #0
100108d4:	f000 f8de 	bl	10010a94 <__ieee754_sqrtf>
100108d8:	4b23      	ldr	r3, [pc, #140]	; (10010968 <sqrtf+0x9c>)
100108da:	1c05      	adds	r5, r0, #0
100108dc:	579e      	ldrsb	r6, [r3, r6]
100108de:	1c73      	adds	r3, r6, #1
100108e0:	d00b      	beq.n	100108fa <sqrtf+0x2e>
100108e2:	1c21      	adds	r1, r4, #0
100108e4:	1c20      	adds	r0, r4, #0
100108e6:	f005 fb37 	bl	10015f58 <__aeabi_fcmpun>
100108ea:	1e07      	subs	r7, r0, #0
100108ec:	d105      	bne.n	100108fa <sqrtf+0x2e>
100108ee:	2100      	movs	r1, #0
100108f0:	1c20      	adds	r0, r4, #0
100108f2:	f004 fc25 	bl	10015140 <__aeabi_fcmplt>
100108f6:	2800      	cmp	r0, #0
100108f8:	d102      	bne.n	10010900 <sqrtf+0x34>
100108fa:	1c28      	adds	r0, r5, #0
100108fc:	b00d      	add	sp, #52	; 0x34
100108fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010900:	2301      	movs	r3, #1
10010902:	9302      	str	r3, [sp, #8]
10010904:	4b19      	ldr	r3, [pc, #100]	; (1001096c <sqrtf+0xa0>)
10010906:	1c20      	adds	r0, r4, #0
10010908:	9303      	str	r3, [sp, #12]
1001090a:	970a      	str	r7, [sp, #40]	; 0x28
1001090c:	f007 f9b2 	bl	10017c74 <__aeabi_f2d>
10010910:	2200      	movs	r2, #0
10010912:	9006      	str	r0, [sp, #24]
10010914:	9107      	str	r1, [sp, #28]
10010916:	9004      	str	r0, [sp, #16]
10010918:	9105      	str	r1, [sp, #20]
1001091a:	2300      	movs	r3, #0
1001091c:	2e00      	cmp	r6, #0
1001091e:	d014      	beq.n	1001094a <sqrtf+0x7e>
10010920:	0010      	movs	r0, r2
10010922:	0019      	movs	r1, r3
10010924:	f005 ff04 	bl	10016730 <__aeabi_ddiv>
10010928:	9008      	str	r0, [sp, #32]
1001092a:	9109      	str	r1, [sp, #36]	; 0x24
1001092c:	2e02      	cmp	r6, #2
1001092e:	d10e      	bne.n	1001094e <sqrtf+0x82>
10010930:	f007 fb88 	bl	10018044 <__errno>
10010934:	2321      	movs	r3, #33	; 0x21
10010936:	6003      	str	r3, [r0, #0]
10010938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001093a:	9301      	str	r3, [sp, #4]
1001093c:	2b00      	cmp	r3, #0
1001093e:	d10c      	bne.n	1001095a <sqrtf+0x8e>
10010940:	9808      	ldr	r0, [sp, #32]
10010942:	9909      	ldr	r1, [sp, #36]	; 0x24
10010944:	f007 f9ea 	bl	10017d1c <__aeabi_d2f>
10010948:	e7d8      	b.n	100108fc <sqrtf+0x30>
1001094a:	9208      	str	r2, [sp, #32]
1001094c:	9309      	str	r3, [sp, #36]	; 0x24
1001094e:	a802      	add	r0, sp, #8
10010950:	f000 f8fc 	bl	10010b4c <matherr>
10010954:	2800      	cmp	r0, #0
10010956:	d1ef      	bne.n	10010938 <sqrtf+0x6c>
10010958:	e7ea      	b.n	10010930 <sqrtf+0x64>
1001095a:	f007 fb73 	bl	10018044 <__errno>
1001095e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010960:	9301      	str	r3, [sp, #4]
10010962:	6003      	str	r3, [r0, #0]
10010964:	e7ec      	b.n	10010940 <sqrtf+0x74>
10010966:	46c0      	nop			; (mov r8, r8)
10010968:	1001b400 	.word	0x1001b400
1001096c:	1001ad88 	.word	0x1001ad88

10010970 <__ieee754_atan2f>:
10010970:	b5f0      	push	{r4, r5, r6, r7, lr}
10010972:	004b      	lsls	r3, r1, #1
10010974:	4647      	mov	r7, r8
10010976:	1c0c      	adds	r4, r1, #0
10010978:	21ff      	movs	r1, #255	; 0xff
1001097a:	b480      	push	{r7}
1001097c:	085b      	lsrs	r3, r3, #1
1001097e:	05c9      	lsls	r1, r1, #23
10010980:	428b      	cmp	r3, r1
10010982:	dc15      	bgt.n	100109b0 <__ieee754_atan2f+0x40>
10010984:	0042      	lsls	r2, r0, #1
10010986:	4680      	mov	r8, r0
10010988:	0852      	lsrs	r2, r2, #1
1001098a:	428a      	cmp	r2, r1
1001098c:	dc10      	bgt.n	100109b0 <__ieee754_atan2f+0x40>
1001098e:	25fe      	movs	r5, #254	; 0xfe
10010990:	05ad      	lsls	r5, r5, #22
10010992:	42ac      	cmp	r4, r5
10010994:	d03e      	beq.n	10010a14 <__ieee754_atan2f+0xa4>
10010996:	2702      	movs	r7, #2
10010998:	17a5      	asrs	r5, r4, #30
1001099a:	403d      	ands	r5, r7
1001099c:	0fc7      	lsrs	r7, r0, #31
1001099e:	433d      	orrs	r5, r7
100109a0:	2a00      	cmp	r2, #0
100109a2:	d10c      	bne.n	100109be <__ieee754_atan2f+0x4e>
100109a4:	2d02      	cmp	r5, #2
100109a6:	d031      	beq.n	10010a0c <__ieee754_atan2f+0x9c>
100109a8:	2d03      	cmp	r5, #3
100109aa:	d105      	bne.n	100109b8 <__ieee754_atan2f+0x48>
100109ac:	4830      	ldr	r0, [pc, #192]	; (10010a70 <__ieee754_atan2f+0x100>)
100109ae:	e003      	b.n	100109b8 <__ieee754_atan2f+0x48>
100109b0:	1c01      	adds	r1, r0, #0
100109b2:	1c20      	adds	r0, r4, #0
100109b4:	f004 fcf6 	bl	100153a4 <__aeabi_fadd>
100109b8:	bc04      	pop	{r2}
100109ba:	4690      	mov	r8, r2
100109bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100109be:	2b00      	cmp	r3, #0
100109c0:	d01d      	beq.n	100109fe <__ieee754_atan2f+0x8e>
100109c2:	428b      	cmp	r3, r1
100109c4:	d029      	beq.n	10010a1a <__ieee754_atan2f+0xaa>
100109c6:	428a      	cmp	r2, r1
100109c8:	d019      	beq.n	100109fe <__ieee754_atan2f+0x8e>
100109ca:	1ad3      	subs	r3, r2, r3
100109cc:	15db      	asrs	r3, r3, #23
100109ce:	2b3c      	cmp	r3, #60	; 0x3c
100109d0:	dc1a      	bgt.n	10010a08 <__ieee754_atan2f+0x98>
100109d2:	2c00      	cmp	r4, #0
100109d4:	db3a      	blt.n	10010a4c <__ieee754_atan2f+0xdc>
100109d6:	1c21      	adds	r1, r4, #0
100109d8:	f004 fe5a 	bl	10015690 <__aeabi_fdiv>
100109dc:	f000 f9da 	bl	10010d94 <fabsf>
100109e0:	f000 f8bc 	bl	10010b5c <atanf>
100109e4:	2d01      	cmp	r5, #1
100109e6:	d02c      	beq.n	10010a42 <__ieee754_atan2f+0xd2>
100109e8:	2d02      	cmp	r5, #2
100109ea:	d022      	beq.n	10010a32 <__ieee754_atan2f+0xc2>
100109ec:	2d00      	cmp	r5, #0
100109ee:	d0e3      	beq.n	100109b8 <__ieee754_atan2f+0x48>
100109f0:	4920      	ldr	r1, [pc, #128]	; (10010a74 <__ieee754_atan2f+0x104>)
100109f2:	f004 fcd7 	bl	100153a4 <__aeabi_fadd>
100109f6:	4920      	ldr	r1, [pc, #128]	; (10010a78 <__ieee754_atan2f+0x108>)
100109f8:	f005 f928 	bl	10015c4c <__aeabi_fsub>
100109fc:	e7dc      	b.n	100109b8 <__ieee754_atan2f+0x48>
100109fe:	4643      	mov	r3, r8
10010a00:	2b00      	cmp	r3, #0
10010a02:	db05      	blt.n	10010a10 <__ieee754_atan2f+0xa0>
10010a04:	481d      	ldr	r0, [pc, #116]	; (10010a7c <__ieee754_atan2f+0x10c>)
10010a06:	e7d7      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a08:	481c      	ldr	r0, [pc, #112]	; (10010a7c <__ieee754_atan2f+0x10c>)
10010a0a:	e7eb      	b.n	100109e4 <__ieee754_atan2f+0x74>
10010a0c:	481a      	ldr	r0, [pc, #104]	; (10010a78 <__ieee754_atan2f+0x108>)
10010a0e:	e7d3      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a10:	481b      	ldr	r0, [pc, #108]	; (10010a80 <__ieee754_atan2f+0x110>)
10010a12:	e7d1      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a14:	f000 f8a2 	bl	10010b5c <atanf>
10010a18:	e7ce      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a1a:	429a      	cmp	r2, r3
10010a1c:	d01a      	beq.n	10010a54 <__ieee754_atan2f+0xe4>
10010a1e:	2d02      	cmp	r5, #2
10010a20:	d0f4      	beq.n	10010a0c <__ieee754_atan2f+0x9c>
10010a22:	2d03      	cmp	r5, #3
10010a24:	d0c2      	beq.n	100109ac <__ieee754_atan2f+0x3c>
10010a26:	2000      	movs	r0, #0
10010a28:	2d01      	cmp	r5, #1
10010a2a:	d1c5      	bne.n	100109b8 <__ieee754_atan2f+0x48>
10010a2c:	2080      	movs	r0, #128	; 0x80
10010a2e:	0600      	lsls	r0, r0, #24
10010a30:	e7c2      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a32:	4910      	ldr	r1, [pc, #64]	; (10010a74 <__ieee754_atan2f+0x104>)
10010a34:	f004 fcb6 	bl	100153a4 <__aeabi_fadd>
10010a38:	1c01      	adds	r1, r0, #0
10010a3a:	480f      	ldr	r0, [pc, #60]	; (10010a78 <__ieee754_atan2f+0x108>)
10010a3c:	f005 f906 	bl	10015c4c <__aeabi_fsub>
10010a40:	e7ba      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a42:	2380      	movs	r3, #128	; 0x80
10010a44:	061b      	lsls	r3, r3, #24
10010a46:	469c      	mov	ip, r3
10010a48:	4460      	add	r0, ip
10010a4a:	e7b5      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a4c:	333c      	adds	r3, #60	; 0x3c
10010a4e:	dac2      	bge.n	100109d6 <__ieee754_atan2f+0x66>
10010a50:	2000      	movs	r0, #0
10010a52:	e7c7      	b.n	100109e4 <__ieee754_atan2f+0x74>
10010a54:	2d02      	cmp	r5, #2
10010a56:	d005      	beq.n	10010a64 <__ieee754_atan2f+0xf4>
10010a58:	2d03      	cmp	r5, #3
10010a5a:	d007      	beq.n	10010a6c <__ieee754_atan2f+0xfc>
10010a5c:	2d01      	cmp	r5, #1
10010a5e:	d003      	beq.n	10010a68 <__ieee754_atan2f+0xf8>
10010a60:	4808      	ldr	r0, [pc, #32]	; (10010a84 <__ieee754_atan2f+0x114>)
10010a62:	e7a9      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a64:	4808      	ldr	r0, [pc, #32]	; (10010a88 <__ieee754_atan2f+0x118>)
10010a66:	e7a7      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a68:	4808      	ldr	r0, [pc, #32]	; (10010a8c <__ieee754_atan2f+0x11c>)
10010a6a:	e7a5      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a6c:	4808      	ldr	r0, [pc, #32]	; (10010a90 <__ieee754_atan2f+0x120>)
10010a6e:	e7a3      	b.n	100109b8 <__ieee754_atan2f+0x48>
10010a70:	c0490fdb 	.word	0xc0490fdb
10010a74:	33bbbd2e 	.word	0x33bbbd2e
10010a78:	40490fdb 	.word	0x40490fdb
10010a7c:	3fc90fdb 	.word	0x3fc90fdb
10010a80:	bfc90fdb 	.word	0xbfc90fdb
10010a84:	3f490fdb 	.word	0x3f490fdb
10010a88:	4016cbe4 	.word	0x4016cbe4
10010a8c:	bf490fdb 	.word	0xbf490fdb
10010a90:	c016cbe4 	.word	0xc016cbe4

10010a94 <__ieee754_sqrtf>:
10010a94:	492b      	ldr	r1, [pc, #172]	; (10010b44 <__ieee754_sqrtf+0xb0>)
10010a96:	0042      	lsls	r2, r0, #1
10010a98:	b570      	push	{r4, r5, r6, lr}
10010a9a:	0003      	movs	r3, r0
10010a9c:	1c04      	adds	r4, r0, #0
10010a9e:	0852      	lsrs	r2, r2, #1
10010aa0:	428a      	cmp	r2, r1
10010aa2:	d83a      	bhi.n	10010b1a <__ieee754_sqrtf+0x86>
10010aa4:	2a00      	cmp	r2, #0
10010aa6:	d037      	beq.n	10010b18 <__ieee754_sqrtf+0x84>
10010aa8:	2800      	cmp	r0, #0
10010aaa:	db3f      	blt.n	10010b2c <__ieee754_sqrtf+0x98>
10010aac:	4926      	ldr	r1, [pc, #152]	; (10010b48 <__ieee754_sqrtf+0xb4>)
10010aae:	15c0      	asrs	r0, r0, #23
10010ab0:	428a      	cmp	r2, r1
10010ab2:	d80b      	bhi.n	10010acc <__ieee754_sqrtf+0x38>
10010ab4:	3101      	adds	r1, #1
10010ab6:	4221      	tst	r1, r4
10010ab8:	d13f      	bne.n	10010b3a <__ieee754_sqrtf+0xa6>
10010aba:	2200      	movs	r2, #0
10010abc:	000c      	movs	r4, r1
10010abe:	e000      	b.n	10010ac2 <__ieee754_sqrtf+0x2e>
10010ac0:	000a      	movs	r2, r1
10010ac2:	005b      	lsls	r3, r3, #1
10010ac4:	1c51      	adds	r1, r2, #1
10010ac6:	4223      	tst	r3, r4
10010ac8:	d0fa      	beq.n	10010ac0 <__ieee754_sqrtf+0x2c>
10010aca:	1a80      	subs	r0, r0, r2
10010acc:	2280      	movs	r2, #128	; 0x80
10010ace:	025b      	lsls	r3, r3, #9
10010ad0:	0a5b      	lsrs	r3, r3, #9
10010ad2:	0412      	lsls	r2, r2, #16
10010ad4:	387f      	subs	r0, #127	; 0x7f
10010ad6:	4313      	orrs	r3, r2
10010ad8:	07c2      	lsls	r2, r0, #31
10010ada:	d425      	bmi.n	10010b28 <__ieee754_sqrtf+0x94>
10010adc:	2280      	movs	r2, #128	; 0x80
10010ade:	2119      	movs	r1, #25
10010ae0:	2500      	movs	r5, #0
10010ae2:	2600      	movs	r6, #0
10010ae4:	1040      	asrs	r0, r0, #1
10010ae6:	005b      	lsls	r3, r3, #1
10010ae8:	0452      	lsls	r2, r2, #17
10010aea:	18b4      	adds	r4, r6, r2
10010aec:	429c      	cmp	r4, r3
10010aee:	dc02      	bgt.n	10010af6 <__ieee754_sqrtf+0x62>
10010af0:	18a6      	adds	r6, r4, r2
10010af2:	1b1b      	subs	r3, r3, r4
10010af4:	18ad      	adds	r5, r5, r2
10010af6:	3901      	subs	r1, #1
10010af8:	005b      	lsls	r3, r3, #1
10010afa:	0852      	lsrs	r2, r2, #1
10010afc:	2900      	cmp	r1, #0
10010afe:	d1f4      	bne.n	10010aea <__ieee754_sqrtf+0x56>
10010b00:	2b00      	cmp	r3, #0
10010b02:	d002      	beq.n	10010b0a <__ieee754_sqrtf+0x76>
10010b04:	2301      	movs	r3, #1
10010b06:	402b      	ands	r3, r5
10010b08:	18ed      	adds	r5, r5, r3
10010b0a:	23fc      	movs	r3, #252	; 0xfc
10010b0c:	059b      	lsls	r3, r3, #22
10010b0e:	469c      	mov	ip, r3
10010b10:	106d      	asrs	r5, r5, #1
10010b12:	4465      	add	r5, ip
10010b14:	05c0      	lsls	r0, r0, #23
10010b16:	1940      	adds	r0, r0, r5
10010b18:	bd70      	pop	{r4, r5, r6, pc}
10010b1a:	1c01      	adds	r1, r0, #0
10010b1c:	f004 ff82 	bl	10015a24 <__aeabi_fmul>
10010b20:	1c21      	adds	r1, r4, #0
10010b22:	f004 fc3f 	bl	100153a4 <__aeabi_fadd>
10010b26:	e7f7      	b.n	10010b18 <__ieee754_sqrtf+0x84>
10010b28:	005b      	lsls	r3, r3, #1
10010b2a:	e7d7      	b.n	10010adc <__ieee754_sqrtf+0x48>
10010b2c:	1c01      	adds	r1, r0, #0
10010b2e:	f005 f88d 	bl	10015c4c <__aeabi_fsub>
10010b32:	1c01      	adds	r1, r0, #0
10010b34:	f004 fdac 	bl	10015690 <__aeabi_fdiv>
10010b38:	e7ee      	b.n	10010b18 <__ieee754_sqrtf+0x84>
10010b3a:	2201      	movs	r2, #1
10010b3c:	4252      	negs	r2, r2
10010b3e:	1a80      	subs	r0, r0, r2
10010b40:	e7c4      	b.n	10010acc <__ieee754_sqrtf+0x38>
10010b42:	46c0      	nop			; (mov r8, r8)
10010b44:	7f7fffff 	.word	0x7f7fffff
10010b48:	007fffff 	.word	0x007fffff

10010b4c <matherr>:
10010b4c:	2000      	movs	r0, #0
10010b4e:	4770      	bx	lr

10010b50 <nan>:
10010b50:	2000      	movs	r0, #0
10010b52:	4901      	ldr	r1, [pc, #4]	; (10010b58 <nan+0x8>)
10010b54:	4770      	bx	lr
10010b56:	46c0      	nop			; (mov r8, r8)
10010b58:	7ff80000 	.word	0x7ff80000

10010b5c <atanf>:
10010b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b5e:	4647      	mov	r7, r8
10010b60:	4b75      	ldr	r3, [pc, #468]	; (10010d38 <atanf+0x1dc>)
10010b62:	0044      	lsls	r4, r0, #1
10010b64:	b480      	push	{r7}
10010b66:	1c05      	adds	r5, r0, #0
10010b68:	0007      	movs	r7, r0
10010b6a:	0864      	lsrs	r4, r4, #1
10010b6c:	429c      	cmp	r4, r3
10010b6e:	dd0b      	ble.n	10010b88 <atanf+0x2c>
10010b70:	23ff      	movs	r3, #255	; 0xff
10010b72:	05db      	lsls	r3, r3, #23
10010b74:	429c      	cmp	r4, r3
10010b76:	dd00      	ble.n	10010b7a <atanf+0x1e>
10010b78:	e072      	b.n	10010c60 <atanf+0x104>
10010b7a:	2800      	cmp	r0, #0
10010b7c:	dc00      	bgt.n	10010b80 <atanf+0x24>
10010b7e:	e09d      	b.n	10010cbc <atanf+0x160>
10010b80:	486e      	ldr	r0, [pc, #440]	; (10010d3c <atanf+0x1e0>)
10010b82:	bc04      	pop	{r2}
10010b84:	4690      	mov	r8, r2
10010b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b88:	4b6d      	ldr	r3, [pc, #436]	; (10010d40 <atanf+0x1e4>)
10010b8a:	429c      	cmp	r4, r3
10010b8c:	dc79      	bgt.n	10010c82 <atanf+0x126>
10010b8e:	4b6d      	ldr	r3, [pc, #436]	; (10010d44 <atanf+0x1e8>)
10010b90:	429c      	cmp	r4, r3
10010b92:	dd69      	ble.n	10010c68 <atanf+0x10c>
10010b94:	2601      	movs	r6, #1
10010b96:	4276      	negs	r6, r6
10010b98:	1c29      	adds	r1, r5, #0
10010b9a:	1c28      	adds	r0, r5, #0
10010b9c:	f004 ff42 	bl	10015a24 <__aeabi_fmul>
10010ba0:	1c01      	adds	r1, r0, #0
10010ba2:	4680      	mov	r8, r0
10010ba4:	f004 ff3e 	bl	10015a24 <__aeabi_fmul>
10010ba8:	4967      	ldr	r1, [pc, #412]	; (10010d48 <atanf+0x1ec>)
10010baa:	1c04      	adds	r4, r0, #0
10010bac:	f004 ff3a 	bl	10015a24 <__aeabi_fmul>
10010bb0:	4966      	ldr	r1, [pc, #408]	; (10010d4c <atanf+0x1f0>)
10010bb2:	f004 fbf7 	bl	100153a4 <__aeabi_fadd>
10010bb6:	1c21      	adds	r1, r4, #0
10010bb8:	f004 ff34 	bl	10015a24 <__aeabi_fmul>
10010bbc:	4964      	ldr	r1, [pc, #400]	; (10010d50 <atanf+0x1f4>)
10010bbe:	f004 fbf1 	bl	100153a4 <__aeabi_fadd>
10010bc2:	1c21      	adds	r1, r4, #0
10010bc4:	f004 ff2e 	bl	10015a24 <__aeabi_fmul>
10010bc8:	4962      	ldr	r1, [pc, #392]	; (10010d54 <atanf+0x1f8>)
10010bca:	f004 fbeb 	bl	100153a4 <__aeabi_fadd>
10010bce:	1c21      	adds	r1, r4, #0
10010bd0:	f004 ff28 	bl	10015a24 <__aeabi_fmul>
10010bd4:	4960      	ldr	r1, [pc, #384]	; (10010d58 <atanf+0x1fc>)
10010bd6:	f004 fbe5 	bl	100153a4 <__aeabi_fadd>
10010bda:	1c21      	adds	r1, r4, #0
10010bdc:	f004 ff22 	bl	10015a24 <__aeabi_fmul>
10010be0:	495e      	ldr	r1, [pc, #376]	; (10010d5c <atanf+0x200>)
10010be2:	f004 fbdf 	bl	100153a4 <__aeabi_fadd>
10010be6:	4641      	mov	r1, r8
10010be8:	f004 ff1c 	bl	10015a24 <__aeabi_fmul>
10010bec:	495c      	ldr	r1, [pc, #368]	; (10010d60 <atanf+0x204>)
10010bee:	4680      	mov	r8, r0
10010bf0:	1c20      	adds	r0, r4, #0
10010bf2:	f004 ff17 	bl	10015a24 <__aeabi_fmul>
10010bf6:	495b      	ldr	r1, [pc, #364]	; (10010d64 <atanf+0x208>)
10010bf8:	f005 f828 	bl	10015c4c <__aeabi_fsub>
10010bfc:	1c21      	adds	r1, r4, #0
10010bfe:	f004 ff11 	bl	10015a24 <__aeabi_fmul>
10010c02:	4959      	ldr	r1, [pc, #356]	; (10010d68 <atanf+0x20c>)
10010c04:	f005 f822 	bl	10015c4c <__aeabi_fsub>
10010c08:	1c21      	adds	r1, r4, #0
10010c0a:	f004 ff0b 	bl	10015a24 <__aeabi_fmul>
10010c0e:	4957      	ldr	r1, [pc, #348]	; (10010d6c <atanf+0x210>)
10010c10:	f005 f81c 	bl	10015c4c <__aeabi_fsub>
10010c14:	1c21      	adds	r1, r4, #0
10010c16:	f004 ff05 	bl	10015a24 <__aeabi_fmul>
10010c1a:	4955      	ldr	r1, [pc, #340]	; (10010d70 <atanf+0x214>)
10010c1c:	f005 f816 	bl	10015c4c <__aeabi_fsub>
10010c20:	1c21      	adds	r1, r4, #0
10010c22:	f004 feff 	bl	10015a24 <__aeabi_fmul>
10010c26:	1c01      	adds	r1, r0, #0
10010c28:	1c73      	adds	r3, r6, #1
10010c2a:	d049      	beq.n	10010cc0 <atanf+0x164>
10010c2c:	4640      	mov	r0, r8
10010c2e:	f004 fbb9 	bl	100153a4 <__aeabi_fadd>
10010c32:	1c29      	adds	r1, r5, #0
10010c34:	f004 fef6 	bl	10015a24 <__aeabi_fmul>
10010c38:	4b4e      	ldr	r3, [pc, #312]	; (10010d74 <atanf+0x218>)
10010c3a:	00b6      	lsls	r6, r6, #2
10010c3c:	58f1      	ldr	r1, [r6, r3]
10010c3e:	f005 f805 	bl	10015c4c <__aeabi_fsub>
10010c42:	1c29      	adds	r1, r5, #0
10010c44:	f005 f802 	bl	10015c4c <__aeabi_fsub>
10010c48:	4b4b      	ldr	r3, [pc, #300]	; (10010d78 <atanf+0x21c>)
10010c4a:	1c01      	adds	r1, r0, #0
10010c4c:	58f0      	ldr	r0, [r6, r3]
10010c4e:	f004 fffd 	bl	10015c4c <__aeabi_fsub>
10010c52:	2f00      	cmp	r7, #0
10010c54:	da95      	bge.n	10010b82 <atanf+0x26>
10010c56:	2380      	movs	r3, #128	; 0x80
10010c58:	061b      	lsls	r3, r3, #24
10010c5a:	469c      	mov	ip, r3
10010c5c:	4460      	add	r0, ip
10010c5e:	e790      	b.n	10010b82 <atanf+0x26>
10010c60:	1c01      	adds	r1, r0, #0
10010c62:	f004 fb9f 	bl	100153a4 <__aeabi_fadd>
10010c66:	e78c      	b.n	10010b82 <atanf+0x26>
10010c68:	4944      	ldr	r1, [pc, #272]	; (10010d7c <atanf+0x220>)
10010c6a:	f004 fb9b 	bl	100153a4 <__aeabi_fadd>
10010c6e:	21fe      	movs	r1, #254	; 0xfe
10010c70:	0589      	lsls	r1, r1, #22
10010c72:	f004 fa79 	bl	10015168 <__aeabi_fcmpgt>
10010c76:	0003      	movs	r3, r0
10010c78:	1c28      	adds	r0, r5, #0
10010c7a:	2b00      	cmp	r3, #0
10010c7c:	d000      	beq.n	10010c80 <atanf+0x124>
10010c7e:	e780      	b.n	10010b82 <atanf+0x26>
10010c80:	e788      	b.n	10010b94 <atanf+0x38>
10010c82:	f000 f887 	bl	10010d94 <fabsf>
10010c86:	4b3e      	ldr	r3, [pc, #248]	; (10010d80 <atanf+0x224>)
10010c88:	1c05      	adds	r5, r0, #0
10010c8a:	429c      	cmp	r4, r3
10010c8c:	dc23      	bgt.n	10010cd6 <atanf+0x17a>
10010c8e:	4b3d      	ldr	r3, [pc, #244]	; (10010d84 <atanf+0x228>)
10010c90:	429c      	cmp	r4, r3
10010c92:	dc3f      	bgt.n	10010d14 <atanf+0x1b8>
10010c94:	1c01      	adds	r1, r0, #0
10010c96:	f004 fb85 	bl	100153a4 <__aeabi_fadd>
10010c9a:	21fe      	movs	r1, #254	; 0xfe
10010c9c:	0589      	lsls	r1, r1, #22
10010c9e:	f004 ffd5 	bl	10015c4c <__aeabi_fsub>
10010ca2:	2180      	movs	r1, #128	; 0x80
10010ca4:	1c04      	adds	r4, r0, #0
10010ca6:	05c9      	lsls	r1, r1, #23
10010ca8:	1c28      	adds	r0, r5, #0
10010caa:	f004 fb7b 	bl	100153a4 <__aeabi_fadd>
10010cae:	1c01      	adds	r1, r0, #0
10010cb0:	1c20      	adds	r0, r4, #0
10010cb2:	f004 fced 	bl	10015690 <__aeabi_fdiv>
10010cb6:	2600      	movs	r6, #0
10010cb8:	1c05      	adds	r5, r0, #0
10010cba:	e76d      	b.n	10010b98 <atanf+0x3c>
10010cbc:	4832      	ldr	r0, [pc, #200]	; (10010d88 <atanf+0x22c>)
10010cbe:	e760      	b.n	10010b82 <atanf+0x26>
10010cc0:	4640      	mov	r0, r8
10010cc2:	f004 fb6f 	bl	100153a4 <__aeabi_fadd>
10010cc6:	1c29      	adds	r1, r5, #0
10010cc8:	f004 feac 	bl	10015a24 <__aeabi_fmul>
10010ccc:	1c01      	adds	r1, r0, #0
10010cce:	1c28      	adds	r0, r5, #0
10010cd0:	f004 ffbc 	bl	10015c4c <__aeabi_fsub>
10010cd4:	e755      	b.n	10010b82 <atanf+0x26>
10010cd6:	4b2d      	ldr	r3, [pc, #180]	; (10010d8c <atanf+0x230>)
10010cd8:	429c      	cmp	r4, r3
10010cda:	dc14      	bgt.n	10010d06 <atanf+0x1aa>
10010cdc:	21ff      	movs	r1, #255	; 0xff
10010cde:	0589      	lsls	r1, r1, #22
10010ce0:	f004 ffb4 	bl	10015c4c <__aeabi_fsub>
10010ce4:	21ff      	movs	r1, #255	; 0xff
10010ce6:	1c04      	adds	r4, r0, #0
10010ce8:	0589      	lsls	r1, r1, #22
10010cea:	1c28      	adds	r0, r5, #0
10010cec:	f004 fe9a 	bl	10015a24 <__aeabi_fmul>
10010cf0:	21fe      	movs	r1, #254	; 0xfe
10010cf2:	0589      	lsls	r1, r1, #22
10010cf4:	f004 fb56 	bl	100153a4 <__aeabi_fadd>
10010cf8:	1c01      	adds	r1, r0, #0
10010cfa:	1c20      	adds	r0, r4, #0
10010cfc:	f004 fcc8 	bl	10015690 <__aeabi_fdiv>
10010d00:	2602      	movs	r6, #2
10010d02:	1c05      	adds	r5, r0, #0
10010d04:	e748      	b.n	10010b98 <atanf+0x3c>
10010d06:	1c01      	adds	r1, r0, #0
10010d08:	4821      	ldr	r0, [pc, #132]	; (10010d90 <atanf+0x234>)
10010d0a:	f004 fcc1 	bl	10015690 <__aeabi_fdiv>
10010d0e:	2603      	movs	r6, #3
10010d10:	1c05      	adds	r5, r0, #0
10010d12:	e741      	b.n	10010b98 <atanf+0x3c>
10010d14:	21fe      	movs	r1, #254	; 0xfe
10010d16:	0589      	lsls	r1, r1, #22
10010d18:	f004 ff98 	bl	10015c4c <__aeabi_fsub>
10010d1c:	21fe      	movs	r1, #254	; 0xfe
10010d1e:	1c04      	adds	r4, r0, #0
10010d20:	0589      	lsls	r1, r1, #22
10010d22:	1c28      	adds	r0, r5, #0
10010d24:	f004 fb3e 	bl	100153a4 <__aeabi_fadd>
10010d28:	1c01      	adds	r1, r0, #0
10010d2a:	1c20      	adds	r0, r4, #0
10010d2c:	f004 fcb0 	bl	10015690 <__aeabi_fdiv>
10010d30:	2601      	movs	r6, #1
10010d32:	1c05      	adds	r5, r0, #0
10010d34:	e730      	b.n	10010b98 <atanf+0x3c>
10010d36:	46c0      	nop			; (mov r8, r8)
10010d38:	507fffff 	.word	0x507fffff
10010d3c:	3fc90fdb 	.word	0x3fc90fdb
10010d40:	3edfffff 	.word	0x3edfffff
10010d44:	30ffffff 	.word	0x30ffffff
10010d48:	3c8569d7 	.word	0x3c8569d7
10010d4c:	3d4bda59 	.word	0x3d4bda59
10010d50:	3d886b35 	.word	0x3d886b35
10010d54:	3dba2e6e 	.word	0x3dba2e6e
10010d58:	3e124925 	.word	0x3e124925
10010d5c:	3eaaaaab 	.word	0x3eaaaaab
10010d60:	bd15a221 	.word	0xbd15a221
10010d64:	3d6ef16b 	.word	0x3d6ef16b
10010d68:	3d9d8795 	.word	0x3d9d8795
10010d6c:	3de38e38 	.word	0x3de38e38
10010d70:	3e4ccccd 	.word	0x3e4ccccd
10010d74:	1001ad90 	.word	0x1001ad90
10010d78:	1001ada0 	.word	0x1001ada0
10010d7c:	7149f2ca 	.word	0x7149f2ca
10010d80:	3f97ffff 	.word	0x3f97ffff
10010d84:	3f2fffff 	.word	0x3f2fffff
10010d88:	bfc90fdb 	.word	0xbfc90fdb
10010d8c:	401bffff 	.word	0x401bffff
10010d90:	bf800000 	.word	0xbf800000

10010d94 <fabsf>:
10010d94:	0040      	lsls	r0, r0, #1
10010d96:	0840      	lsrs	r0, r0, #1
10010d98:	4770      	bx	lr
10010d9a:	46c0      	nop			; (mov r8, r8)

10010d9c <inv_fast_nomot_parameter.part.3>:
10010d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d9e:	2318      	movs	r3, #24
10010da0:	4644      	mov	r4, r8
10010da2:	4680      	mov	r8, r0
10010da4:	4443      	add	r3, r8
10010da6:	465f      	mov	r7, fp
10010da8:	469b      	mov	fp, r3
10010daa:	2300      	movs	r3, #0
10010dac:	4656      	mov	r6, sl
10010dae:	464d      	mov	r5, r9
10010db0:	469a      	mov	sl, r3
10010db2:	4699      	mov	r9, r3
10010db4:	b4f0      	push	{r4, r5, r6, r7}
10010db6:	b08b      	sub	sp, #44	; 0x2c
10010db8:	4643      	mov	r3, r8
10010dba:	681e      	ldr	r6, [r3, #0]
10010dbc:	685f      	ldr	r7, [r3, #4]
10010dbe:	69dc      	ldr	r4, [r3, #28]
10010dc0:	699b      	ldr	r3, [r3, #24]
10010dc2:	1c32      	adds	r2, r6, #0
10010dc4:	1c25      	adds	r5, r4, #0
10010dc6:	1c30      	adds	r0, r6, #0
10010dc8:	1c1c      	adds	r4, r3, #0
10010dca:	1c39      	adds	r1, r7, #0
10010dcc:	1c3b      	adds	r3, r7, #0
10010dce:	f004 fa03 	bl	100151d8 <__aeabi_lmul>
10010dd2:	1c22      	adds	r2, r4, #0
10010dd4:	9002      	str	r0, [sp, #8]
10010dd6:	9103      	str	r1, [sp, #12]
10010dd8:	1c2b      	adds	r3, r5, #0
10010dda:	1c20      	adds	r0, r4, #0
10010ddc:	1c29      	adds	r1, r5, #0
10010dde:	9408      	str	r4, [sp, #32]
10010de0:	9509      	str	r5, [sp, #36]	; 0x24
10010de2:	f004 f9f9 	bl	100151d8 <__aeabi_lmul>
10010de6:	1c04      	adds	r4, r0, #0
10010de8:	1c0d      	adds	r5, r1, #0
10010dea:	0f83      	lsrs	r3, r0, #30
10010dec:	0089      	lsls	r1, r1, #2
10010dee:	4319      	orrs	r1, r3
10010df0:	9105      	str	r1, [sp, #20]
10010df2:	0081      	lsls	r1, r0, #2
10010df4:	9104      	str	r1, [sp, #16]
10010df6:	9904      	ldr	r1, [sp, #16]
10010df8:	9a05      	ldr	r2, [sp, #20]
10010dfa:	1a64      	subs	r4, r4, r1
10010dfc:	4195      	sbcs	r5, r2
10010dfe:	4641      	mov	r1, r8
10010e00:	6cca      	ldr	r2, [r1, #76]	; 0x4c
10010e02:	6c89      	ldr	r1, [r1, #72]	; 0x48
10010e04:	1864      	adds	r4, r4, r1
10010e06:	4155      	adcs	r5, r2
10010e08:	9802      	ldr	r0, [sp, #8]
10010e0a:	9903      	ldr	r1, [sp, #12]
10010e0c:	1c02      	adds	r2, r0, #0
10010e0e:	1c0b      	adds	r3, r1, #0
10010e10:	1812      	adds	r2, r2, r0
10010e12:	414b      	adcs	r3, r1
10010e14:	1c30      	adds	r0, r6, #0
10010e16:	1c39      	adds	r1, r7, #0
10010e18:	f004 f9de 	bl	100151d8 <__aeabi_lmul>
10010e1c:	1c02      	adds	r2, r0, #0
10010e1e:	1c0b      	adds	r3, r1, #0
10010e20:	1c30      	adds	r0, r6, #0
10010e22:	1c39      	adds	r1, r7, #0
10010e24:	f004 f9d8 	bl	100151d8 <__aeabi_lmul>
10010e28:	9a08      	ldr	r2, [sp, #32]
10010e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e2c:	1824      	adds	r4, r4, r0
10010e2e:	414d      	adcs	r5, r1
10010e30:	9802      	ldr	r0, [sp, #8]
10010e32:	9903      	ldr	r1, [sp, #12]
10010e34:	1a12      	subs	r2, r2, r0
10010e36:	418b      	sbcs	r3, r1
10010e38:	1c10      	adds	r0, r2, #0
10010e3a:	1c19      	adds	r1, r3, #0
10010e3c:	1880      	adds	r0, r0, r2
10010e3e:	4159      	adcs	r1, r3
10010e40:	1812      	adds	r2, r2, r0
10010e42:	414b      	adcs	r3, r1
10010e44:	9802      	ldr	r0, [sp, #8]
10010e46:	9903      	ldr	r1, [sp, #12]
10010e48:	1812      	adds	r2, r2, r0
10010e4a:	414b      	adcs	r3, r1
10010e4c:	1c30      	adds	r0, r6, #0
10010e4e:	1c39      	adds	r1, r7, #0
10010e50:	f004 f9c2 	bl	100151d8 <__aeabi_lmul>
10010e54:	4643      	mov	r3, r8
10010e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10010e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10010e5a:	1a80      	subs	r0, r0, r2
10010e5c:	4199      	sbcs	r1, r3
10010e5e:	2204      	movs	r2, #4
10010e60:	4252      	negs	r2, r2
10010e62:	17d3      	asrs	r3, r2, #31
10010e64:	f004 f9b8 	bl	100151d8 <__aeabi_lmul>
10010e68:	1c02      	adds	r2, r0, #0
10010e6a:	1c0b      	adds	r3, r1, #0
10010e6c:	1c30      	adds	r0, r6, #0
10010e6e:	1c39      	adds	r1, r7, #0
10010e70:	f004 f9b2 	bl	100151d8 <__aeabi_lmul>
10010e74:	1824      	adds	r4, r4, r0
10010e76:	414d      	adcs	r5, r1
10010e78:	17eb      	asrs	r3, r5, #31
10010e7a:	9306      	str	r3, [sp, #24]
10010e7c:	9307      	str	r3, [sp, #28]
10010e7e:	9906      	ldr	r1, [sp, #24]
10010e80:	9a07      	ldr	r2, [sp, #28]
10010e82:	1c0b      	adds	r3, r1, #0
10010e84:	4063      	eors	r3, r4
10010e86:	9300      	str	r3, [sp, #0]
10010e88:	1c13      	adds	r3, r2, #0
10010e8a:	406b      	eors	r3, r5
10010e8c:	9301      	str	r3, [sp, #4]
10010e8e:	9b00      	ldr	r3, [sp, #0]
10010e90:	9c01      	ldr	r4, [sp, #4]
10010e92:	1a5b      	subs	r3, r3, r1
10010e94:	4194      	sbcs	r4, r2
10010e96:	9300      	str	r3, [sp, #0]
10010e98:	9401      	str	r4, [sp, #4]
10010e9a:	454c      	cmp	r4, r9
10010e9c:	dc28      	bgt.n	10010ef0 <inv_fast_nomot_parameter.part.3+0x154>
10010e9e:	9b01      	ldr	r3, [sp, #4]
10010ea0:	454b      	cmp	r3, r9
10010ea2:	d022      	beq.n	10010eea <inv_fast_nomot_parameter.part.3+0x14e>
10010ea4:	2308      	movs	r3, #8
10010ea6:	469c      	mov	ip, r3
10010ea8:	44e0      	add	r8, ip
10010eaa:	45d8      	cmp	r8, fp
10010eac:	d000      	beq.n	10010eb0 <inv_fast_nomot_parameter.part.3+0x114>
10010eae:	e783      	b.n	10010db8 <inv_fast_nomot_parameter.part.3+0x1c>
10010eb0:	4649      	mov	r1, r9
10010eb2:	4650      	mov	r0, sl
10010eb4:	f004 fa28 	bl	10015308 <__aeabi_l2f>
10010eb8:	4b13      	ldr	r3, [pc, #76]	; (10010f08 <inv_fast_nomot_parameter.part.3+0x16c>)
10010eba:	6b99      	ldr	r1, [r3, #56]	; 0x38
10010ebc:	f004 fbe8 	bl	10015690 <__aeabi_fdiv>
10010ec0:	f004 f9ec 	bl	1001529c <__aeabi_f2lz>
10010ec4:	2383      	movs	r3, #131	; 0x83
10010ec6:	4a11      	ldr	r2, [pc, #68]	; (10010f0c <inv_fast_nomot_parameter.part.3+0x170>)
10010ec8:	009b      	lsls	r3, r3, #2
10010eca:	58d3      	ldr	r3, [r2, r3]
10010ecc:	2220      	movs	r2, #32
10010ece:	009b      	lsls	r3, r3, #2
10010ed0:	4252      	negs	r2, r2
10010ed2:	189a      	adds	r2, r3, r2
10010ed4:	d411      	bmi.n	10010efa <inv_fast_nomot_parameter.part.3+0x15e>
10010ed6:	1c08      	adds	r0, r1, #0
10010ed8:	4110      	asrs	r0, r2
10010eda:	4119      	asrs	r1, r3
10010edc:	b00b      	add	sp, #44	; 0x2c
10010ede:	bc3c      	pop	{r2, r3, r4, r5}
10010ee0:	4690      	mov	r8, r2
10010ee2:	4699      	mov	r9, r3
10010ee4:	46a2      	mov	sl, r4
10010ee6:	46ab      	mov	fp, r5
10010ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010eea:	9b00      	ldr	r3, [sp, #0]
10010eec:	4553      	cmp	r3, sl
10010eee:	d9d9      	bls.n	10010ea4 <inv_fast_nomot_parameter.part.3+0x108>
10010ef0:	9b00      	ldr	r3, [sp, #0]
10010ef2:	9c01      	ldr	r4, [sp, #4]
10010ef4:	469a      	mov	sl, r3
10010ef6:	46a1      	mov	r9, r4
10010ef8:	e7d4      	b.n	10010ea4 <inv_fast_nomot_parameter.part.3+0x108>
10010efa:	2220      	movs	r2, #32
10010efc:	1c0c      	adds	r4, r1, #0
10010efe:	1ad2      	subs	r2, r2, r3
10010f00:	4094      	lsls	r4, r2
10010f02:	40d8      	lsrs	r0, r3
10010f04:	4320      	orrs	r0, r4
10010f06:	e7e8      	b.n	10010eda <inv_fast_nomot_parameter.part.3+0x13e>
10010f08:	1001cfa8 	.word	0x1001cfa8
10010f0c:	1001e4e0 	.word	0x1001e4e0

10010f10 <inv_init_maxmin>:
10010f10:	07c3      	lsls	r3, r0, #31
10010f12:	d50a      	bpl.n	10010f2a <inv_init_maxmin+0x1a>
10010f14:	22c0      	movs	r2, #192	; 0xc0
10010f16:	4b19      	ldr	r3, [pc, #100]	; (10010f7c <inv_init_maxmin+0x6c>)
10010f18:	0612      	lsls	r2, r2, #24
10010f1a:	669a      	str	r2, [r3, #104]	; 0x68
10010f1c:	66da      	str	r2, [r3, #108]	; 0x6c
10010f1e:	671a      	str	r2, [r3, #112]	; 0x70
10010f20:	2280      	movs	r2, #128	; 0x80
10010f22:	05d2      	lsls	r2, r2, #23
10010f24:	675a      	str	r2, [r3, #116]	; 0x74
10010f26:	679a      	str	r2, [r3, #120]	; 0x78
10010f28:	67da      	str	r2, [r3, #124]	; 0x7c
10010f2a:	0783      	lsls	r3, r0, #30
10010f2c:	d511      	bpl.n	10010f52 <inv_init_maxmin+0x42>
10010f2e:	22c0      	movs	r2, #192	; 0xc0
10010f30:	2180      	movs	r1, #128	; 0x80
10010f32:	4b12      	ldr	r3, [pc, #72]	; (10010f7c <inv_init_maxmin+0x6c>)
10010f34:	0612      	lsls	r2, r2, #24
10010f36:	0049      	lsls	r1, r1, #1
10010f38:	505a      	str	r2, [r3, r1]
10010f3a:	3104      	adds	r1, #4
10010f3c:	505a      	str	r2, [r3, r1]
10010f3e:	3104      	adds	r1, #4
10010f40:	505a      	str	r2, [r3, r1]
10010f42:	2280      	movs	r2, #128	; 0x80
10010f44:	3104      	adds	r1, #4
10010f46:	05d2      	lsls	r2, r2, #23
10010f48:	505a      	str	r2, [r3, r1]
10010f4a:	3104      	adds	r1, #4
10010f4c:	505a      	str	r2, [r3, r1]
10010f4e:	3104      	adds	r1, #4
10010f50:	505a      	str	r2, [r3, r1]
10010f52:	0743      	lsls	r3, r0, #29
10010f54:	d511      	bpl.n	10010f7a <inv_init_maxmin+0x6a>
10010f56:	22c0      	movs	r2, #192	; 0xc0
10010f58:	21cc      	movs	r1, #204	; 0xcc
10010f5a:	4b08      	ldr	r3, [pc, #32]	; (10010f7c <inv_init_maxmin+0x6c>)
10010f5c:	0612      	lsls	r2, r2, #24
10010f5e:	0049      	lsls	r1, r1, #1
10010f60:	505a      	str	r2, [r3, r1]
10010f62:	3104      	adds	r1, #4
10010f64:	505a      	str	r2, [r3, r1]
10010f66:	3104      	adds	r1, #4
10010f68:	505a      	str	r2, [r3, r1]
10010f6a:	2280      	movs	r2, #128	; 0x80
10010f6c:	3104      	adds	r1, #4
10010f6e:	05d2      	lsls	r2, r2, #23
10010f70:	505a      	str	r2, [r3, r1]
10010f72:	3104      	adds	r1, #4
10010f74:	505a      	str	r2, [r3, r1]
10010f76:	3104      	adds	r1, #4
10010f78:	505a      	str	r2, [r3, r1]
10010f7a:	4770      	bx	lr
10010f7c:	1001e4e0 	.word	0x1001e4e0

10010f80 <inv_reset_packet>:
10010f80:	b510      	push	{r4, lr}
10010f82:	4c08      	ldr	r4, [pc, #32]	; (10010fa4 <inv_reset_packet+0x24>)
10010f84:	2100      	movs	r1, #0
10010f86:	1c20      	adds	r0, r4, #0
10010f88:	2298      	movs	r2, #152	; 0x98
10010f8a:	f007 f8be 	bl	1001810a <memset>
10010f8e:	1c20      	adds	r0, r4, #0
10010f90:	3031      	adds	r0, #49	; 0x31
10010f92:	2100      	movs	r1, #0
10010f94:	2298      	movs	r2, #152	; 0x98
10010f96:	30ff      	adds	r0, #255	; 0xff
10010f98:	f007 f8b7 	bl	1001810a <memset>
10010f9c:	2005      	movs	r0, #5
10010f9e:	f7ff ffb7 	bl	10010f10 <inv_init_maxmin>
10010fa2:	bd10      	pop	{r4, pc}
10010fa4:	1001e4e8 	.word	0x1001e4e8

10010fa8 <inv_start_fast_nomot>:
10010fa8:	2298      	movs	r2, #152	; 0x98
10010faa:	b510      	push	{r4, lr}
10010fac:	4c0c      	ldr	r4, [pc, #48]	; (10010fe0 <inv_start_fast_nomot+0x38>)
10010fae:	2100      	movs	r1, #0
10010fb0:	0092      	lsls	r2, r2, #2
10010fb2:	1c20      	adds	r0, r4, #0
10010fb4:	f007 f8a9 	bl	1001810a <memset>
10010fb8:	2007      	movs	r0, #7
10010fba:	f7ff ffa9 	bl	10010f10 <inv_init_maxmin>
10010fbe:	22f2      	movs	r2, #242	; 0xf2
10010fc0:	2301      	movs	r3, #1
10010fc2:	0052      	lsls	r2, r2, #1
10010fc4:	50a3      	str	r3, [r4, r2]
10010fc6:	3204      	adds	r2, #4
10010fc8:	54a3      	strb	r3, [r4, r2]
10010fca:	2001      	movs	r0, #1
10010fcc:	2103      	movs	r1, #3
10010fce:	2200      	movs	r2, #0
10010fd0:	f7f9 f838 	bl	1000a044 <inv_set_message>
10010fd4:	2164      	movs	r1, #100	; 0x64
10010fd6:	2207      	movs	r2, #7
10010fd8:	4802      	ldr	r0, [pc, #8]	; (10010fe4 <inv_start_fast_nomot+0x3c>)
10010fda:	f7f8 ff07 	bl	10009dec <inv_register_data_cb>
10010fde:	bd10      	pop	{r4, pc}
10010fe0:	1001e4e0 	.word	0x1001e4e0
10010fe4:	10011701 	.word	0x10011701

10010fe8 <inv_fast_nomot_parameter>:
10010fe8:	6f81      	ldr	r1, [r0, #120]	; 0x78
10010fea:	b508      	push	{r3, lr}
10010fec:	2200      	movs	r2, #0
10010fee:	2300      	movs	r3, #0
10010ff0:	2900      	cmp	r1, #0
10010ff2:	d003      	beq.n	10010ffc <inv_fast_nomot_parameter+0x14>
10010ff4:	f7ff fed2 	bl	10010d9c <inv_fast_nomot_parameter.part.3>
10010ff8:	1c02      	adds	r2, r0, #0
10010ffa:	1c0b      	adds	r3, r1, #0
10010ffc:	1c10      	adds	r0, r2, #0
10010ffe:	1c19      	adds	r1, r3, #0
10011000:	bd08      	pop	{r3, pc}
10011002:	46c0      	nop			; (mov r8, r8)

10011004 <inv_fast_nomot_parameter_3rd>:
10011004:	b5f0      	push	{r4, r5, r6, r7, lr}
10011006:	465f      	mov	r7, fp
10011008:	4656      	mov	r6, sl
1001100a:	464d      	mov	r5, r9
1001100c:	4644      	mov	r4, r8
1001100e:	b4f0      	push	{r4, r5, r6, r7}
10011010:	6f83      	ldr	r3, [r0, #120]	; 0x78
10011012:	b085      	sub	sp, #20
10011014:	2b00      	cmp	r3, #0
10011016:	d063      	beq.n	100110e0 <inv_fast_nomot_parameter_3rd+0xdc>
10011018:	4680      	mov	r8, r0
1001101a:	2318      	movs	r3, #24
1001101c:	4443      	add	r3, r8
1001101e:	469b      	mov	fp, r3
10011020:	2300      	movs	r3, #0
10011022:	469a      	mov	sl, r3
10011024:	4699      	mov	r9, r3
10011026:	4643      	mov	r3, r8
10011028:	681c      	ldr	r4, [r3, #0]
1001102a:	685d      	ldr	r5, [r3, #4]
1001102c:	1c22      	adds	r2, r4, #0
1001102e:	1c20      	adds	r0, r4, #0
10011030:	1c2b      	adds	r3, r5, #0
10011032:	1c29      	adds	r1, r5, #0
10011034:	f004 f8d0 	bl	100151d8 <__aeabi_lmul>
10011038:	4643      	mov	r3, r8
1001103a:	9002      	str	r0, [sp, #8]
1001103c:	9103      	str	r1, [sp, #12]
1001103e:	6998      	ldr	r0, [r3, #24]
10011040:	69d9      	ldr	r1, [r3, #28]
10011042:	9a02      	ldr	r2, [sp, #8]
10011044:	9b03      	ldr	r3, [sp, #12]
10011046:	1a80      	subs	r0, r0, r2
10011048:	4199      	sbcs	r1, r3
1001104a:	1c02      	adds	r2, r0, #0
1001104c:	1c0b      	adds	r3, r1, #0
1001104e:	1812      	adds	r2, r2, r0
10011050:	414b      	adcs	r3, r1
10011052:	1880      	adds	r0, r0, r2
10011054:	4159      	adcs	r1, r3
10011056:	9a02      	ldr	r2, [sp, #8]
10011058:	9b03      	ldr	r3, [sp, #12]
1001105a:	1880      	adds	r0, r0, r2
1001105c:	4159      	adcs	r1, r3
1001105e:	1c22      	adds	r2, r4, #0
10011060:	1c2b      	adds	r3, r5, #0
10011062:	f004 f8b9 	bl	100151d8 <__aeabi_lmul>
10011066:	4643      	mov	r3, r8
10011068:	6b5c      	ldr	r4, [r3, #52]	; 0x34
1001106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1001106c:	1ac0      	subs	r0, r0, r3
1001106e:	41a1      	sbcs	r1, r4
10011070:	17cb      	asrs	r3, r1, #31
10011072:	9300      	str	r3, [sp, #0]
10011074:	9301      	str	r3, [sp, #4]
10011076:	9b00      	ldr	r3, [sp, #0]
10011078:	9c01      	ldr	r4, [sp, #4]
1001107a:	1c1a      	adds	r2, r3, #0
1001107c:	4042      	eors	r2, r0
1001107e:	1c16      	adds	r6, r2, #0
10011080:	1c22      	adds	r2, r4, #0
10011082:	404a      	eors	r2, r1
10011084:	1c17      	adds	r7, r2, #0
10011086:	1af6      	subs	r6, r6, r3
10011088:	41a7      	sbcs	r7, r4
1001108a:	454f      	cmp	r7, r9
1001108c:	dc25      	bgt.n	100110da <inv_fast_nomot_parameter_3rd+0xd6>
1001108e:	d022      	beq.n	100110d6 <inv_fast_nomot_parameter_3rd+0xd2>
10011090:	2308      	movs	r3, #8
10011092:	469c      	mov	ip, r3
10011094:	44e0      	add	r8, ip
10011096:	45d8      	cmp	r8, fp
10011098:	d1c5      	bne.n	10011026 <inv_fast_nomot_parameter_3rd+0x22>
1001109a:	4649      	mov	r1, r9
1001109c:	4650      	mov	r0, sl
1001109e:	f004 f933 	bl	10015308 <__aeabi_l2f>
100110a2:	4b14      	ldr	r3, [pc, #80]	; (100110f4 <inv_fast_nomot_parameter_3rd+0xf0>)
100110a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
100110a6:	f004 faf3 	bl	10015690 <__aeabi_fdiv>
100110aa:	f004 f8f7 	bl	1001529c <__aeabi_f2lz>
100110ae:	2383      	movs	r3, #131	; 0x83
100110b0:	4a11      	ldr	r2, [pc, #68]	; (100110f8 <inv_fast_nomot_parameter_3rd+0xf4>)
100110b2:	009b      	lsls	r3, r3, #2
100110b4:	58d3      	ldr	r3, [r2, r3]
100110b6:	005a      	lsls	r2, r3, #1
100110b8:	18d2      	adds	r2, r2, r3
100110ba:	2320      	movs	r3, #32
100110bc:	425b      	negs	r3, r3
100110be:	18d3      	adds	r3, r2, r3
100110c0:	d411      	bmi.n	100110e6 <inv_fast_nomot_parameter_3rd+0xe2>
100110c2:	1c08      	adds	r0, r1, #0
100110c4:	4118      	asrs	r0, r3
100110c6:	4111      	asrs	r1, r2
100110c8:	b005      	add	sp, #20
100110ca:	bc3c      	pop	{r2, r3, r4, r5}
100110cc:	4690      	mov	r8, r2
100110ce:	4699      	mov	r9, r3
100110d0:	46a2      	mov	sl, r4
100110d2:	46ab      	mov	fp, r5
100110d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110d6:	4556      	cmp	r6, sl
100110d8:	d9da      	bls.n	10011090 <inv_fast_nomot_parameter_3rd+0x8c>
100110da:	46b2      	mov	sl, r6
100110dc:	46b9      	mov	r9, r7
100110de:	e7d7      	b.n	10011090 <inv_fast_nomot_parameter_3rd+0x8c>
100110e0:	2000      	movs	r0, #0
100110e2:	2100      	movs	r1, #0
100110e4:	e7f0      	b.n	100110c8 <inv_fast_nomot_parameter_3rd+0xc4>
100110e6:	2320      	movs	r3, #32
100110e8:	1c0c      	adds	r4, r1, #0
100110ea:	1a9b      	subs	r3, r3, r2
100110ec:	409c      	lsls	r4, r3
100110ee:	40d0      	lsrs	r0, r2
100110f0:	4320      	orrs	r0, r4
100110f2:	e7e8      	b.n	100110c6 <inv_fast_nomot_parameter_3rd+0xc2>
100110f4:	1001cfa8 	.word	0x1001cfa8
100110f8:	1001e4e0 	.word	0x1001e4e0

100110fc <inv_fast_nomot_set_gyro_bias>:
100110fc:	2384      	movs	r3, #132	; 0x84
100110fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10011100:	4d2e      	ldr	r5, [pc, #184]	; (100111bc <inv_fast_nomot_set_gyro_bias+0xc0>)
10011102:	1c06      	adds	r6, r0, #0
10011104:	2100      	movs	r1, #0
10011106:	1c28      	adds	r0, r5, #0
10011108:	009b      	lsls	r3, r3, #2
1001110a:	b085      	sub	sp, #20
1001110c:	58ef      	ldr	r7, [r5, r3]
1001110e:	ac01      	add	r4, sp, #4
10011110:	1c0b      	adds	r3, r1, #0
10011112:	6882      	ldr	r2, [r0, #8]
10011114:	3384      	adds	r3, #132	; 0x84
10011116:	40ba      	lsls	r2, r7
10011118:	58eb      	ldr	r3, [r5, r3]
1001111a:	3008      	adds	r0, #8
1001111c:	041b      	lsls	r3, r3, #16
1001111e:	189b      	adds	r3, r3, r2
10011120:	5063      	str	r3, [r4, r1]
10011122:	3104      	adds	r1, #4
10011124:	290c      	cmp	r1, #12
10011126:	d1f3      	bne.n	10011110 <inv_fast_nomot_set_gyro_bias+0x14>
10011128:	4f25      	ldr	r7, [pc, #148]	; (100111c0 <inv_fast_nomot_set_gyro_bias+0xc4>)
1001112a:	2298      	movs	r2, #152	; 0x98
1001112c:	1c38      	adds	r0, r7, #0
1001112e:	2100      	movs	r1, #0
10011130:	f006 ffeb 	bl	1001810a <memset>
10011134:	2001      	movs	r0, #1
10011136:	f7ff feeb 	bl	10010f10 <inv_init_maxmin>
1001113a:	23f4      	movs	r3, #244	; 0xf4
1001113c:	3f08      	subs	r7, #8
1001113e:	005b      	lsls	r3, r3, #1
10011140:	5cfa      	ldrb	r2, [r7, r3]
10011142:	2a04      	cmp	r2, #4
10011144:	d02f      	beq.n	100111a6 <inv_fast_nomot_set_gyro_bias+0xaa>
10011146:	4f1f      	ldr	r7, [pc, #124]	; (100111c4 <inv_fast_nomot_set_gyro_bias+0xc8>)
10011148:	9b01      	ldr	r3, [sp, #4]
1001114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1001114c:	1a98      	subs	r0, r3, r2
1001114e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10011150:	6863      	ldr	r3, [r4, #4]
10011152:	1a9b      	subs	r3, r3, r2
10011154:	17da      	asrs	r2, r3, #31
10011156:	189b      	adds	r3, r3, r2
10011158:	4053      	eors	r3, r2
1001115a:	17c2      	asrs	r2, r0, #31
1001115c:	1880      	adds	r0, r0, r2
1001115e:	4050      	eors	r0, r2
10011160:	4298      	cmp	r0, r3
10011162:	da00      	bge.n	10011166 <inv_fast_nomot_set_gyro_bias+0x6a>
10011164:	1c18      	adds	r0, r3, #0
10011166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10011168:	68a3      	ldr	r3, [r4, #8]
1001116a:	1a9b      	subs	r3, r3, r2
1001116c:	17da      	asrs	r2, r3, #31
1001116e:	189b      	adds	r3, r3, r2
10011170:	4053      	eors	r3, r2
10011172:	4298      	cmp	r0, r3
10011174:	da00      	bge.n	10011178 <inv_fast_nomot_set_gyro_bias+0x7c>
10011176:	1c18      	adds	r0, r3, #0
10011178:	6a71      	ldr	r1, [r6, #36]	; 0x24
1001117a:	f7f8 ffa1 	bl	1000a0c0 <inv_q30_mult>
1001117e:	2386      	movs	r3, #134	; 0x86
10011180:	009b      	lsls	r3, r3, #2
10011182:	58eb      	ldr	r3, [r5, r3]
10011184:	4298      	cmp	r0, r3
10011186:	da06      	bge.n	10011196 <inv_fast_nomot_set_gyro_bias+0x9a>
10011188:	1c20      	adds	r0, r4, #0
1001118a:	2103      	movs	r1, #3
1001118c:	f7f8 fdc0 	bl	10009d10 <inv_set_gyro_bias>
10011190:	2002      	movs	r0, #2
10011192:	f7f9 fca3 	bl	1000aadc <inv_set_motion_state>
10011196:	9b01      	ldr	r3, [sp, #4]
10011198:	627b      	str	r3, [r7, #36]	; 0x24
1001119a:	6863      	ldr	r3, [r4, #4]
1001119c:	62bb      	str	r3, [r7, #40]	; 0x28
1001119e:	68a3      	ldr	r3, [r4, #8]
100111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
100111a2:	b005      	add	sp, #20
100111a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111a6:	2286      	movs	r2, #134	; 0x86
100111a8:	0092      	lsls	r2, r2, #2
100111aa:	58b9      	ldr	r1, [r7, r2]
100111ac:	22a0      	movs	r2, #160	; 0xa0
100111ae:	0392      	lsls	r2, r2, #14
100111b0:	4291      	cmp	r1, r2
100111b2:	ddc8      	ble.n	10011146 <inv_fast_nomot_set_gyro_bias+0x4a>
100111b4:	2205      	movs	r2, #5
100111b6:	54fa      	strb	r2, [r7, r3]
100111b8:	e7c5      	b.n	10011146 <inv_fast_nomot_set_gyro_bias+0x4a>
100111ba:	46c0      	nop			; (mov r8, r8)
100111bc:	1001e4e0 	.word	0x1001e4e0
100111c0:	1001e4e8 	.word	0x1001e4e8
100111c4:	1001cfa8 	.word	0x1001cfa8

100111c8 <inv_set_fast_nomot_compass_threshold>:
100111c8:	4b01      	ldr	r3, [pc, #4]	; (100111d0 <inv_set_fast_nomot_compass_threshold+0x8>)
100111ca:	6098      	str	r0, [r3, #8]
100111cc:	60d9      	str	r1, [r3, #12]
100111ce:	4770      	bx	lr
100111d0:	1001cfa8 	.word	0x1001cfa8

100111d4 <int_set_fast_nomot_gyro_threshold>:
100111d4:	4b01      	ldr	r3, [pc, #4]	; (100111dc <int_set_fast_nomot_gyro_threshold+0x8>)
100111d6:	6198      	str	r0, [r3, #24]
100111d8:	61d9      	str	r1, [r3, #28]
100111da:	4770      	bx	lr
100111dc:	1001cfa8 	.word	0x1001cfa8

100111e0 <inv_set_fast_nomot_accel_threshold>:
100111e0:	4b01      	ldr	r3, [pc, #4]	; (100111e8 <inv_set_fast_nomot_accel_threshold+0x8>)
100111e2:	6118      	str	r0, [r3, #16]
100111e4:	6159      	str	r1, [r3, #20]
100111e6:	4770      	bx	lr
100111e8:	1001cfa8 	.word	0x1001cfa8

100111ec <inv_get_fast_nomot_compass_param>:
100111ec:	22f0      	movs	r2, #240	; 0xf0
100111ee:	4b05      	ldr	r3, [pc, #20]	; (10011204 <inv_get_fast_nomot_compass_param+0x18>)
100111f0:	0052      	lsls	r2, r2, #1
100111f2:	589a      	ldr	r2, [r3, r2]
100111f4:	33d1      	adds	r3, #209	; 0xd1
100111f6:	33ff      	adds	r3, #255	; 0xff
100111f8:	6002      	str	r2, [r0, #0]
100111fa:	681a      	ldr	r2, [r3, #0]
100111fc:	685b      	ldr	r3, [r3, #4]
100111fe:	600a      	str	r2, [r1, #0]
10011200:	604b      	str	r3, [r1, #4]
10011202:	4770      	bx	lr
10011204:	1001e4e0 	.word	0x1001e4e0

10011208 <inv_get_fast_nomot_accel_param>:
10011208:	22f0      	movs	r2, #240	; 0xf0
1001120a:	4b05      	ldr	r3, [pc, #20]	; (10011220 <inv_get_fast_nomot_accel_param+0x18>)
1001120c:	0052      	lsls	r2, r2, #1
1001120e:	589a      	ldr	r2, [r3, r2]
10011210:	33d9      	adds	r3, #217	; 0xd9
10011212:	33ff      	adds	r3, #255	; 0xff
10011214:	6002      	str	r2, [r0, #0]
10011216:	681a      	ldr	r2, [r3, #0]
10011218:	685b      	ldr	r3, [r3, #4]
1001121a:	600a      	str	r2, [r1, #0]
1001121c:	604b      	str	r3, [r1, #4]
1001121e:	4770      	bx	lr
10011220:	1001e4e0 	.word	0x1001e4e0

10011224 <inv_fast_nomot_store_data>:
10011224:	b5f0      	push	{r4, r5, r6, r7, lr}
10011226:	4656      	mov	r6, sl
10011228:	465f      	mov	r7, fp
1001122a:	464d      	mov	r5, r9
1001122c:	4644      	mov	r4, r8
1001122e:	b4f0      	push	{r4, r5, r6, r7}
10011230:	6f8b      	ldr	r3, [r1, #120]	; 0x78
10011232:	b083      	sub	sp, #12
10011234:	468b      	mov	fp, r1
10011236:	9300      	str	r3, [sp, #0]
10011238:	2360      	movs	r3, #96	; 0x60
1001123a:	445b      	add	r3, fp
1001123c:	4698      	mov	r8, r3
1001123e:	2318      	movs	r3, #24
10011240:	4682      	mov	sl, r0
10011242:	4645      	mov	r5, r8
10011244:	465e      	mov	r6, fp
10011246:	445b      	add	r3, fp
10011248:	9301      	str	r3, [sp, #4]
1001124a:	9b00      	ldr	r3, [sp, #0]
1001124c:	2b00      	cmp	r3, #0
1001124e:	d038      	beq.n	100112c2 <inv_fast_nomot_store_data+0x9e>
10011250:	4653      	mov	r3, sl
10011252:	2200      	movs	r2, #0
10011254:	5e9b      	ldrsh	r3, [r3, r2]
10011256:	69ea      	ldr	r2, [r5, #28]
10011258:	1a9b      	subs	r3, r3, r2
1001125a:	17da      	asrs	r2, r3, #31
1001125c:	4699      	mov	r9, r3
1001125e:	4690      	mov	r8, r2
10011260:	682a      	ldr	r2, [r5, #0]
10011262:	429a      	cmp	r2, r3
10011264:	da00      	bge.n	10011268 <inv_fast_nomot_store_data+0x44>
10011266:	602b      	str	r3, [r5, #0]
10011268:	68ea      	ldr	r2, [r5, #12]
1001126a:	429a      	cmp	r2, r3
1001126c:	dd00      	ble.n	10011270 <inv_fast_nomot_store_data+0x4c>
1001126e:	60eb      	str	r3, [r5, #12]
10011270:	1c37      	adds	r7, r6, #0
10011272:	1c34      	adds	r4, r6, #0
10011274:	2001      	movs	r0, #1
10011276:	2100      	movs	r1, #0
10011278:	3760      	adds	r7, #96	; 0x60
1001127a:	464a      	mov	r2, r9
1001127c:	4643      	mov	r3, r8
1001127e:	f003 ffab 	bl	100151d8 <__aeabi_lmul>
10011282:	6822      	ldr	r2, [r4, #0]
10011284:	6863      	ldr	r3, [r4, #4]
10011286:	1812      	adds	r2, r2, r0
10011288:	414b      	adcs	r3, r1
1001128a:	6022      	str	r2, [r4, #0]
1001128c:	6063      	str	r3, [r4, #4]
1001128e:	3418      	adds	r4, #24
10011290:	42a7      	cmp	r7, r4
10011292:	d1f2      	bne.n	1001127a <inv_fast_nomot_store_data+0x56>
10011294:	2302      	movs	r3, #2
10011296:	469c      	mov	ip, r3
10011298:	9b01      	ldr	r3, [sp, #4]
1001129a:	3608      	adds	r6, #8
1001129c:	3504      	adds	r5, #4
1001129e:	44e2      	add	sl, ip
100112a0:	429e      	cmp	r6, r3
100112a2:	d1d2      	bne.n	1001124a <inv_fast_nomot_store_data+0x26>
100112a4:	465a      	mov	r2, fp
100112a6:	9b00      	ldr	r3, [sp, #0]
100112a8:	4659      	mov	r1, fp
100112aa:	3301      	adds	r3, #1
100112ac:	6793      	str	r3, [r2, #120]	; 0x78
100112ae:	2201      	movs	r2, #1
100112b0:	2390      	movs	r3, #144	; 0x90
100112b2:	50ca      	str	r2, [r1, r3]
100112b4:	b003      	add	sp, #12
100112b6:	bc3c      	pop	{r2, r3, r4, r5}
100112b8:	4690      	mov	r8, r2
100112ba:	4699      	mov	r9, r3
100112bc:	46a2      	mov	sl, r4
100112be:	46ab      	mov	fp, r5
100112c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112c2:	4653      	mov	r3, sl
100112c4:	2200      	movs	r2, #0
100112c6:	5e9b      	ldrsh	r3, [r3, r2]
100112c8:	61eb      	str	r3, [r5, #28]
100112ca:	2300      	movs	r3, #0
100112cc:	4699      	mov	r9, r3
100112ce:	4698      	mov	r8, r3
100112d0:	e7c6      	b.n	10011260 <inv_fast_nomot_store_data+0x3c>
100112d2:	46c0      	nop			; (mov r8, r8)

100112d4 <inv_fast_nomot_store_data_compass>:
100112d4:	6803      	ldr	r3, [r0, #0]
100112d6:	b570      	push	{r4, r5, r6, lr}
100112d8:	66d3      	str	r3, [r2, #108]	; 0x6c
100112da:	6843      	ldr	r3, [r0, #4]
100112dc:	6f94      	ldr	r4, [r2, #120]	; 0x78
100112de:	6713      	str	r3, [r2, #112]	; 0x70
100112e0:	6883      	ldr	r3, [r0, #8]
100112e2:	6753      	str	r3, [r2, #116]	; 0x74
100112e4:	2388      	movs	r3, #136	; 0x88
100112e6:	50d1      	str	r1, [r2, r3]
100112e8:	2c00      	cmp	r4, #0
100112ea:	d011      	beq.n	10011310 <inv_fast_nomot_store_data_compass+0x3c>
100112ec:	1c11      	adds	r1, r2, #0
100112ee:	1c15      	adds	r5, r2, #0
100112f0:	3160      	adds	r1, #96	; 0x60
100112f2:	356c      	adds	r5, #108	; 0x6c
100112f4:	69ce      	ldr	r6, [r1, #28]
100112f6:	6803      	ldr	r3, [r0, #0]
100112f8:	1b9b      	subs	r3, r3, r6
100112fa:	17de      	asrs	r6, r3, #31
100112fc:	199b      	adds	r3, r3, r6
100112fe:	4073      	eors	r3, r6
10011300:	680e      	ldr	r6, [r1, #0]
10011302:	42b3      	cmp	r3, r6
10011304:	dd00      	ble.n	10011308 <inv_fast_nomot_store_data_compass+0x34>
10011306:	600b      	str	r3, [r1, #0]
10011308:	3104      	adds	r1, #4
1001130a:	3004      	adds	r0, #4
1001130c:	42a9      	cmp	r1, r5
1001130e:	d1f1      	bne.n	100112f4 <inv_fast_nomot_store_data_compass+0x20>
10011310:	2101      	movs	r1, #1
10011312:	2390      	movs	r3, #144	; 0x90
10011314:	3401      	adds	r4, #1
10011316:	6794      	str	r4, [r2, #120]	; 0x78
10011318:	50d1      	str	r1, [r2, r3]
1001131a:	bd70      	pop	{r4, r5, r6, pc}

1001131c <inv_fast_nomot_reset_data_compass>:
1001131c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
1001131e:	2280      	movs	r2, #128	; 0x80
10011320:	67c3      	str	r3, [r0, #124]	; 0x7c
10011322:	2300      	movs	r3, #0
10011324:	6f01      	ldr	r1, [r0, #112]	; 0x70
10011326:	6603      	str	r3, [r0, #96]	; 0x60
10011328:	5081      	str	r1, [r0, r2]
1001132a:	6f41      	ldr	r1, [r0, #116]	; 0x74
1001132c:	3204      	adds	r2, #4
1001132e:	6643      	str	r3, [r0, #100]	; 0x64
10011330:	5081      	str	r1, [r0, r2]
10011332:	6683      	str	r3, [r0, #104]	; 0x68
10011334:	3204      	adds	r2, #4
10011336:	5881      	ldr	r1, [r0, r2]
10011338:	3204      	adds	r2, #4
1001133a:	5081      	str	r1, [r0, r2]
1001133c:	3204      	adds	r2, #4
1001133e:	6783      	str	r3, [r0, #120]	; 0x78
10011340:	5083      	str	r3, [r0, r2]
10011342:	4770      	bx	lr

10011344 <inv_fast_nomot_get_time_elaps>:
10011344:	228c      	movs	r2, #140	; 0x8c
10011346:	2388      	movs	r3, #136	; 0x88
10011348:	58c3      	ldr	r3, [r0, r3]
1001134a:	5880      	ldr	r0, [r0, r2]
1001134c:	1a18      	subs	r0, r3, r0
1001134e:	4770      	bx	lr

10011350 <inv_fast_nomot_parameter_compass>:
10011350:	6e02      	ldr	r2, [r0, #96]	; 0x60
10011352:	6e43      	ldr	r3, [r0, #100]	; 0x64
10011354:	4293      	cmp	r3, r2
10011356:	da00      	bge.n	1001135a <inv_fast_nomot_parameter_compass+0xa>
10011358:	1c13      	adds	r3, r2, #0
1001135a:	6e82      	ldr	r2, [r0, #104]	; 0x68
1001135c:	1e18      	subs	r0, r3, #0
1001135e:	4290      	cmp	r0, r2
10011360:	da00      	bge.n	10011364 <inv_fast_nomot_parameter_compass+0x14>
10011362:	1c10      	adds	r0, r2, #0
10011364:	4770      	bx	lr
10011366:	46c0      	nop			; (mov r8, r8)

10011368 <inv_get_right_shift_by_rounding>:
10011368:	b5f0      	push	{r4, r5, r6, r7, lr}
1001136a:	4647      	mov	r7, r8
1001136c:	b480      	push	{r7}
1001136e:	2701      	movs	r7, #1
10011370:	1e53      	subs	r3, r2, #1
10011372:	409f      	lsls	r7, r3
10011374:	2320      	movs	r3, #32
10011376:	2620      	movs	r6, #32
10011378:	425b      	negs	r3, r3
1001137a:	1ab6      	subs	r6, r6, r2
1001137c:	46b8      	mov	r8, r7
1001137e:	18d3      	adds	r3, r2, r3
10011380:	d434      	bmi.n	100113ec <inv_get_right_shift_by_rounding+0x84>
10011382:	1c0f      	adds	r7, r1, #0
10011384:	411f      	asrs	r7, r3
10011386:	1c3c      	adds	r4, r7, #0
10011388:	1c0b      	adds	r3, r1, #0
1001138a:	4113      	asrs	r3, r2
1001138c:	1c1d      	adds	r5, r3, #0
1001138e:	2320      	movs	r3, #32
10011390:	425b      	negs	r3, r3
10011392:	18f2      	adds	r2, r6, r3
10011394:	d422      	bmi.n	100113dc <inv_get_right_shift_by_rounding+0x74>
10011396:	1c03      	adds	r3, r0, #0
10011398:	4093      	lsls	r3, r2
1001139a:	40b0      	lsls	r0, r6
1001139c:	2a00      	cmp	r2, #0
1001139e:	db16      	blt.n	100113ce <inv_get_right_shift_by_rounding+0x66>
100113a0:	4113      	asrs	r3, r2
100113a2:	1c19      	adds	r1, r3, #0
100113a4:	4588      	cmp	r8, r1
100113a6:	db0d      	blt.n	100113c4 <inv_get_right_shift_by_rounding+0x5c>
100113a8:	4643      	mov	r3, r8
100113aa:	425f      	negs	r7, r3
100113ac:	42b9      	cmp	r1, r7
100113ae:	da04      	bge.n	100113ba <inv_get_right_shift_by_rounding+0x52>
100113b0:	2201      	movs	r2, #1
100113b2:	4252      	negs	r2, r2
100113b4:	17d3      	asrs	r3, r2, #31
100113b6:	18a4      	adds	r4, r4, r2
100113b8:	415d      	adcs	r5, r3
100113ba:	1c29      	adds	r1, r5, #0
100113bc:	1c20      	adds	r0, r4, #0
100113be:	bc04      	pop	{r2}
100113c0:	4690      	mov	r8, r2
100113c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113c4:	2201      	movs	r2, #1
100113c6:	2300      	movs	r3, #0
100113c8:	18a4      	adds	r4, r4, r2
100113ca:	415d      	adcs	r5, r3
100113cc:	e7f5      	b.n	100113ba <inv_get_right_shift_by_rounding+0x52>
100113ce:	2120      	movs	r1, #32
100113d0:	1b89      	subs	r1, r1, r6
100113d2:	408b      	lsls	r3, r1
100113d4:	1c01      	adds	r1, r0, #0
100113d6:	40f1      	lsrs	r1, r6
100113d8:	4319      	orrs	r1, r3
100113da:	e7e3      	b.n	100113a4 <inv_get_right_shift_by_rounding+0x3c>
100113dc:	2320      	movs	r3, #32
100113de:	1c07      	adds	r7, r0, #0
100113e0:	1b9b      	subs	r3, r3, r6
100113e2:	40df      	lsrs	r7, r3
100113e4:	1c0b      	adds	r3, r1, #0
100113e6:	40b3      	lsls	r3, r6
100113e8:	433b      	orrs	r3, r7
100113ea:	e7d6      	b.n	1001139a <inv_get_right_shift_by_rounding+0x32>
100113ec:	1c03      	adds	r3, r0, #0
100113ee:	40d3      	lsrs	r3, r2
100113f0:	1c1c      	adds	r4, r3, #0
100113f2:	1c0b      	adds	r3, r1, #0
100113f4:	40b3      	lsls	r3, r6
100113f6:	431c      	orrs	r4, r3
100113f8:	e7c6      	b.n	10011388 <inv_get_right_shift_by_rounding+0x20>
100113fa:	46c0      	nop			; (mov r8, r8)

100113fc <inv_reset_min_max_gyro_accel_statistics>:
100113fc:	2300      	movs	r3, #0
100113fe:	4a09      	ldr	r2, [pc, #36]	; (10011424 <inv_reset_min_max_gyro_accel_statistics+0x28>)
10011400:	6013      	str	r3, [r2, #0]
10011402:	6053      	str	r3, [r2, #4]
10011404:	6093      	str	r3, [r2, #8]
10011406:	60d3      	str	r3, [r2, #12]
10011408:	6213      	str	r3, [r2, #32]
1001140a:	6253      	str	r3, [r2, #36]	; 0x24
1001140c:	6293      	str	r3, [r2, #40]	; 0x28
1001140e:	62d3      	str	r3, [r2, #44]	; 0x2c
10011410:	6113      	str	r3, [r2, #16]
10011412:	6153      	str	r3, [r2, #20]
10011414:	6193      	str	r3, [r2, #24]
10011416:	61d3      	str	r3, [r2, #28]
10011418:	6313      	str	r3, [r2, #48]	; 0x30
1001141a:	6353      	str	r3, [r2, #52]	; 0x34
1001141c:	6393      	str	r3, [r2, #56]	; 0x38
1001141e:	63d3      	str	r3, [r2, #60]	; 0x3c
10011420:	4770      	bx	lr
10011422:	46c0      	nop			; (mov r8, r8)
10011424:	1001e700 	.word	0x1001e700

10011428 <inv_record_max_moment_in_no_motion_gyro>:
10011428:	2392      	movs	r3, #146	; 0x92
1001142a:	4a0d      	ldr	r2, [pc, #52]	; (10011460 <inv_record_max_moment_in_no_motion_gyro+0x38>)
1001142c:	009b      	lsls	r3, r3, #2
1001142e:	58d3      	ldr	r3, [r2, r3]
10011430:	b530      	push	{r4, r5, lr}
10011432:	2b00      	cmp	r3, #0
10011434:	d005      	beq.n	10011442 <inv_record_max_moment_in_no_motion_gyro+0x1a>
10011436:	2490      	movs	r4, #144	; 0x90
10011438:	00a4      	lsls	r4, r4, #2
1001143a:	1915      	adds	r5, r2, r4
1001143c:	686c      	ldr	r4, [r5, #4]
1001143e:	428c      	cmp	r4, r1
10011440:	da08      	bge.n	10011454 <inv_record_max_moment_in_no_motion_gyro+0x2c>
10011442:	2490      	movs	r4, #144	; 0x90
10011444:	00a4      	lsls	r4, r4, #2
10011446:	1914      	adds	r4, r2, r4
10011448:	c403      	stmia	r4!, {r0, r1}
1001144a:	2192      	movs	r1, #146	; 0x92
1001144c:	3301      	adds	r3, #1
1001144e:	0089      	lsls	r1, r1, #2
10011450:	5053      	str	r3, [r2, r1]
10011452:	bd30      	pop	{r4, r5, pc}
10011454:	428c      	cmp	r4, r1
10011456:	d1f8      	bne.n	1001144a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011458:	682c      	ldr	r4, [r5, #0]
1001145a:	4284      	cmp	r4, r0
1001145c:	d3f1      	bcc.n	10011442 <inv_record_max_moment_in_no_motion_gyro+0x1a>
1001145e:	e7f4      	b.n	1001144a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011460:	1001e4e0 	.word	0x1001e4e0

10011464 <inv_record_max_moment_in_no_motion_accel>:
10011464:	2396      	movs	r3, #150	; 0x96
10011466:	4a0d      	ldr	r2, [pc, #52]	; (1001149c <inv_record_max_moment_in_no_motion_accel+0x38>)
10011468:	009b      	lsls	r3, r3, #2
1001146a:	58d3      	ldr	r3, [r2, r3]
1001146c:	b530      	push	{r4, r5, lr}
1001146e:	2b00      	cmp	r3, #0
10011470:	d005      	beq.n	1001147e <inv_record_max_moment_in_no_motion_accel+0x1a>
10011472:	2494      	movs	r4, #148	; 0x94
10011474:	00a4      	lsls	r4, r4, #2
10011476:	1915      	adds	r5, r2, r4
10011478:	686c      	ldr	r4, [r5, #4]
1001147a:	428c      	cmp	r4, r1
1001147c:	da08      	bge.n	10011490 <inv_record_max_moment_in_no_motion_accel+0x2c>
1001147e:	2494      	movs	r4, #148	; 0x94
10011480:	00a4      	lsls	r4, r4, #2
10011482:	1914      	adds	r4, r2, r4
10011484:	c403      	stmia	r4!, {r0, r1}
10011486:	2196      	movs	r1, #150	; 0x96
10011488:	3301      	adds	r3, #1
1001148a:	0089      	lsls	r1, r1, #2
1001148c:	5053      	str	r3, [r2, r1]
1001148e:	bd30      	pop	{r4, r5, pc}
10011490:	428c      	cmp	r4, r1
10011492:	d1f8      	bne.n	10011486 <inv_record_max_moment_in_no_motion_accel+0x22>
10011494:	682c      	ldr	r4, [r5, #0]
10011496:	4284      	cmp	r4, r0
10011498:	d3f1      	bcc.n	1001147e <inv_record_max_moment_in_no_motion_accel+0x1a>
1001149a:	e7f4      	b.n	10011486 <inv_record_max_moment_in_no_motion_accel+0x22>
1001149c:	1001e4e0 	.word	0x1001e4e0

100114a0 <inv_record_min_moment_in_motion_gyro>:
100114a0:	238a      	movs	r3, #138	; 0x8a
100114a2:	4a0d      	ldr	r2, [pc, #52]	; (100114d8 <inv_record_min_moment_in_motion_gyro+0x38>)
100114a4:	009b      	lsls	r3, r3, #2
100114a6:	58d3      	ldr	r3, [r2, r3]
100114a8:	b530      	push	{r4, r5, lr}
100114aa:	2b00      	cmp	r3, #0
100114ac:	d005      	beq.n	100114ba <inv_record_min_moment_in_motion_gyro+0x1a>
100114ae:	2488      	movs	r4, #136	; 0x88
100114b0:	00a4      	lsls	r4, r4, #2
100114b2:	1915      	adds	r5, r2, r4
100114b4:	686c      	ldr	r4, [r5, #4]
100114b6:	428c      	cmp	r4, r1
100114b8:	dd08      	ble.n	100114cc <inv_record_min_moment_in_motion_gyro+0x2c>
100114ba:	2488      	movs	r4, #136	; 0x88
100114bc:	00a4      	lsls	r4, r4, #2
100114be:	1914      	adds	r4, r2, r4
100114c0:	c403      	stmia	r4!, {r0, r1}
100114c2:	218a      	movs	r1, #138	; 0x8a
100114c4:	3301      	adds	r3, #1
100114c6:	0089      	lsls	r1, r1, #2
100114c8:	5053      	str	r3, [r2, r1]
100114ca:	bd30      	pop	{r4, r5, pc}
100114cc:	428c      	cmp	r4, r1
100114ce:	d1f8      	bne.n	100114c2 <inv_record_min_moment_in_motion_gyro+0x22>
100114d0:	682c      	ldr	r4, [r5, #0]
100114d2:	4284      	cmp	r4, r0
100114d4:	d8f1      	bhi.n	100114ba <inv_record_min_moment_in_motion_gyro+0x1a>
100114d6:	e7f4      	b.n	100114c2 <inv_record_min_moment_in_motion_gyro+0x22>
100114d8:	1001e4e0 	.word	0x1001e4e0

100114dc <inv_record_min_moment_in_motion_accel>:
100114dc:	238e      	movs	r3, #142	; 0x8e
100114de:	4a0d      	ldr	r2, [pc, #52]	; (10011514 <inv_record_min_moment_in_motion_accel+0x38>)
100114e0:	009b      	lsls	r3, r3, #2
100114e2:	58d3      	ldr	r3, [r2, r3]
100114e4:	b530      	push	{r4, r5, lr}
100114e6:	2b00      	cmp	r3, #0
100114e8:	d005      	beq.n	100114f6 <inv_record_min_moment_in_motion_accel+0x1a>
100114ea:	248c      	movs	r4, #140	; 0x8c
100114ec:	00a4      	lsls	r4, r4, #2
100114ee:	1915      	adds	r5, r2, r4
100114f0:	686c      	ldr	r4, [r5, #4]
100114f2:	428c      	cmp	r4, r1
100114f4:	dd08      	ble.n	10011508 <inv_record_min_moment_in_motion_accel+0x2c>
100114f6:	248c      	movs	r4, #140	; 0x8c
100114f8:	00a4      	lsls	r4, r4, #2
100114fa:	1914      	adds	r4, r2, r4
100114fc:	c403      	stmia	r4!, {r0, r1}
100114fe:	218e      	movs	r1, #142	; 0x8e
10011500:	3301      	adds	r3, #1
10011502:	0089      	lsls	r1, r1, #2
10011504:	5053      	str	r3, [r2, r1]
10011506:	bd30      	pop	{r4, r5, pc}
10011508:	428c      	cmp	r4, r1
1001150a:	d1f8      	bne.n	100114fe <inv_record_min_moment_in_motion_accel+0x22>
1001150c:	682c      	ldr	r4, [r5, #0]
1001150e:	4284      	cmp	r4, r0
10011510:	d8f1      	bhi.n	100114f6 <inv_record_min_moment_in_motion_accel+0x1a>
10011512:	e7f4      	b.n	100114fe <inv_record_min_moment_in_motion_accel+0x22>
10011514:	1001e4e0 	.word	0x1001e4e0

10011518 <inv_detect_motion_by_gyro_accel>:
10011518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001151a:	4c4f      	ldr	r4, [pc, #316]	; (10011658 <inv_detect_motion_by_gyro_accel+0x140>)
1001151c:	1c05      	adds	r5, r0, #0
1001151e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
10011520:	6f62      	ldr	r2, [r4, #116]	; 0x74
10011522:	4e4e      	ldr	r6, [pc, #312]	; (1001165c <inv_detect_motion_by_gyro_accel+0x144>)
10011524:	1a9a      	subs	r2, r3, r2
10011526:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10011528:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
1001152a:	1c31      	adds	r1, r6, #0
1001152c:	1a1b      	subs	r3, r3, r0
1001152e:	4293      	cmp	r3, r2
10011530:	da00      	bge.n	10011534 <inv_detect_motion_by_gyro_accel+0x1c>
10011532:	1c13      	adds	r3, r2, #0
10011534:	6f22      	ldr	r2, [r4, #112]	; 0x70
10011536:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
10011538:	1a12      	subs	r2, r2, r0
1001153a:	4293      	cmp	r3, r2
1001153c:	da00      	bge.n	10011540 <inv_detect_motion_by_gyro_accel+0x28>
1001153e:	1c13      	adds	r3, r2, #0
10011540:	6bca      	ldr	r2, [r1, #60]	; 0x3c
10011542:	429a      	cmp	r2, r3
10011544:	db4b      	blt.n	100115de <inv_detect_motion_by_gyro_accel+0xc6>
10011546:	2380      	movs	r3, #128	; 0x80
10011548:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1001154a:	005b      	lsls	r3, r3, #1
1001154c:	2002      	movs	r0, #2
1001154e:	421a      	tst	r2, r3
10011550:	d100      	bne.n	10011554 <inv_detect_motion_by_gyro_accel+0x3c>
10011552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011554:	2280      	movs	r2, #128	; 0x80
10011556:	6821      	ldr	r1, [r4, #0]
10011558:	58a2      	ldr	r2, [r4, r2]
1001155a:	428a      	cmp	r2, r1
1001155c:	dbf9      	blt.n	10011552 <inv_detect_motion_by_gyro_accel+0x3a>
1001155e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
10011560:	421d      	tst	r5, r3
10011562:	d040      	beq.n	100115e6 <inv_detect_motion_by_gyro_accel+0xce>
10011564:	33b0      	adds	r3, #176	; 0xb0
10011566:	58e3      	ldr	r3, [r4, r3]
10011568:	4299      	cmp	r1, r3
1001156a:	dcf2      	bgt.n	10011552 <inv_detect_motion_by_gyro_accel+0x3a>
1001156c:	2b00      	cmp	r3, #0
1001156e:	d166      	bne.n	1001163e <inv_detect_motion_by_gyro_accel+0x126>
10011570:	2000      	movs	r0, #0
10011572:	2100      	movs	r1, #0
10011574:	1c23      	adds	r3, r4, #0
10011576:	33d9      	adds	r3, #217	; 0xd9
10011578:	33ff      	adds	r3, #255	; 0xff
1001157a:	c303      	stmia	r3!, {r0, r1}
1001157c:	6973      	ldr	r3, [r6, #20]
1001157e:	428b      	cmp	r3, r1
10011580:	db03      	blt.n	1001158a <inv_detect_motion_by_gyro_accel+0x72>
10011582:	d166      	bne.n	10011652 <inv_detect_motion_by_gyro_accel+0x13a>
10011584:	6933      	ldr	r3, [r6, #16]
10011586:	4283      	cmp	r3, r0
10011588:	d263      	bcs.n	10011652 <inv_detect_motion_by_gyro_accel+0x13a>
1001158a:	238e      	movs	r3, #142	; 0x8e
1001158c:	228c      	movs	r2, #140	; 0x8c
1001158e:	009b      	lsls	r3, r3, #2
10011590:	58e3      	ldr	r3, [r4, r3]
10011592:	0092      	lsls	r2, r2, #2
10011594:	2b00      	cmp	r3, #0
10011596:	d009      	beq.n	100115ac <inv_detect_motion_by_gyro_accel+0x94>
10011598:	18a5      	adds	r5, r4, r2
1001159a:	686a      	ldr	r2, [r5, #4]
1001159c:	428a      	cmp	r2, r1
1001159e:	dc03      	bgt.n	100115a8 <inv_detect_motion_by_gyro_accel+0x90>
100115a0:	d106      	bne.n	100115b0 <inv_detect_motion_by_gyro_accel+0x98>
100115a2:	682a      	ldr	r2, [r5, #0]
100115a4:	4282      	cmp	r2, r0
100115a6:	d903      	bls.n	100115b0 <inv_detect_motion_by_gyro_accel+0x98>
100115a8:	228c      	movs	r2, #140	; 0x8c
100115aa:	0092      	lsls	r2, r2, #2
100115ac:	18a2      	adds	r2, r4, r2
100115ae:	c203      	stmia	r2!, {r0, r1}
100115b0:	228e      	movs	r2, #142	; 0x8e
100115b2:	2500      	movs	r5, #0
100115b4:	3301      	adds	r3, #1
100115b6:	0092      	lsls	r2, r2, #2
100115b8:	50a3      	str	r3, [r4, r2]
100115ba:	4f29      	ldr	r7, [pc, #164]	; (10011660 <inv_detect_motion_by_gyro_accel+0x148>)
100115bc:	2298      	movs	r2, #152	; 0x98
100115be:	1c38      	adds	r0, r7, #0
100115c0:	2100      	movs	r1, #0
100115c2:	f006 fda2 	bl	1001810a <memset>
100115c6:	2004      	movs	r0, #4
100115c8:	f7ff fca2 	bl	10010f10 <inv_init_maxmin>
100115cc:	2380      	movs	r3, #128	; 0x80
100115ce:	3f39      	subs	r7, #57	; 0x39
100115d0:	3fff      	subs	r7, #255	; 0xff
100115d2:	58fa      	ldr	r2, [r7, r3]
100115d4:	2a00      	cmp	r2, #0
100115d6:	d109      	bne.n	100115ec <inv_detect_motion_by_gyro_accel+0xd4>
100115d8:	2000      	movs	r0, #0
100115da:	2100      	movs	r1, #0
100115dc:	e009      	b.n	100115f2 <inv_detect_motion_by_gyro_accel+0xda>
100115de:	f7ff fccf 	bl	10010f80 <inv_reset_packet>
100115e2:	2000      	movs	r0, #0
100115e4:	e7b5      	b.n	10011552 <inv_detect_motion_by_gyro_accel+0x3a>
100115e6:	2501      	movs	r5, #1
100115e8:	2a00      	cmp	r2, #0
100115ea:	d0f5      	beq.n	100115d8 <inv_detect_motion_by_gyro_accel+0xc0>
100115ec:	481d      	ldr	r0, [pc, #116]	; (10011664 <inv_detect_motion_by_gyro_accel+0x14c>)
100115ee:	f7ff fbd5 	bl	10010d9c <inv_fast_nomot_parameter.part.3>
100115f2:	1c23      	adds	r3, r4, #0
100115f4:	33f1      	adds	r3, #241	; 0xf1
100115f6:	33ff      	adds	r3, #255	; 0xff
100115f8:	c303      	stmia	r3!, {r0, r1}
100115fa:	69f3      	ldr	r3, [r6, #28]
100115fc:	428b      	cmp	r3, r1
100115fe:	db05      	blt.n	1001160c <inv_detect_motion_by_gyro_accel+0xf4>
10011600:	d001      	beq.n	10011606 <inv_detect_motion_by_gyro_accel+0xee>
10011602:	1c28      	adds	r0, r5, #0
10011604:	e7a5      	b.n	10011552 <inv_detect_motion_by_gyro_accel+0x3a>
10011606:	69b3      	ldr	r3, [r6, #24]
10011608:	4283      	cmp	r3, r0
1001160a:	d2fa      	bcs.n	10011602 <inv_detect_motion_by_gyro_accel+0xea>
1001160c:	238a      	movs	r3, #138	; 0x8a
1001160e:	2288      	movs	r2, #136	; 0x88
10011610:	009b      	lsls	r3, r3, #2
10011612:	58e3      	ldr	r3, [r4, r3]
10011614:	0092      	lsls	r2, r2, #2
10011616:	2b00      	cmp	r3, #0
10011618:	d009      	beq.n	1001162e <inv_detect_motion_by_gyro_accel+0x116>
1001161a:	18a5      	adds	r5, r4, r2
1001161c:	686a      	ldr	r2, [r5, #4]
1001161e:	428a      	cmp	r2, r1
10011620:	dc03      	bgt.n	1001162a <inv_detect_motion_by_gyro_accel+0x112>
10011622:	d106      	bne.n	10011632 <inv_detect_motion_by_gyro_accel+0x11a>
10011624:	682a      	ldr	r2, [r5, #0]
10011626:	4282      	cmp	r2, r0
10011628:	d903      	bls.n	10011632 <inv_detect_motion_by_gyro_accel+0x11a>
1001162a:	2288      	movs	r2, #136	; 0x88
1001162c:	0092      	lsls	r2, r2, #2
1001162e:	18a2      	adds	r2, r4, r2
10011630:	c203      	stmia	r2!, {r0, r1}
10011632:	228a      	movs	r2, #138	; 0x8a
10011634:	3301      	adds	r3, #1
10011636:	0092      	lsls	r2, r2, #2
10011638:	50a3      	str	r3, [r4, r2]
1001163a:	2000      	movs	r0, #0
1001163c:	e789      	b.n	10011552 <inv_detect_motion_by_gyro_accel+0x3a>
1001163e:	1c20      	adds	r0, r4, #0
10011640:	3039      	adds	r0, #57	; 0x39
10011642:	30ff      	adds	r0, #255	; 0xff
10011644:	f7ff fbaa 	bl	10010d9c <inv_fast_nomot_parameter.part.3>
10011648:	030b      	lsls	r3, r1, #12
1001164a:	0d00      	lsrs	r0, r0, #20
1001164c:	4318      	orrs	r0, r3
1001164e:	1509      	asrs	r1, r1, #20
10011650:	e790      	b.n	10011574 <inv_detect_motion_by_gyro_accel+0x5c>
10011652:	2501      	movs	r5, #1
10011654:	e7b1      	b.n	100115ba <inv_detect_motion_by_gyro_accel+0xa2>
10011656:	46c0      	nop			; (mov r8, r8)
10011658:	1001e4e0 	.word	0x1001e4e0
1001165c:	1001cfa8 	.word	0x1001cfa8
10011660:	1001e618 	.word	0x1001e618
10011664:	1001e4e8 	.word	0x1001e4e8

10011668 <inv_sensor_data_preprocess>:
10011668:	23c0      	movs	r3, #192	; 0xc0
1001166a:	b510      	push	{r4, lr}
1001166c:	6b02      	ldr	r2, [r0, #48]	; 0x30
1001166e:	b084      	sub	sp, #16
10011670:	1c04      	adds	r4, r0, #0
10011672:	4013      	ands	r3, r2
10011674:	2bc0      	cmp	r3, #192	; 0xc0
10011676:	d038      	beq.n	100116ea <inv_sensor_data_preprocess+0x82>
10011678:	23c0      	movs	r3, #192	; 0xc0
1001167a:	6f62      	ldr	r2, [r4, #116]	; 0x74
1001167c:	4013      	ands	r3, r2
1001167e:	2bc0      	cmp	r3, #192	; 0xc0
10011680:	d02d      	beq.n	100116de <inv_sensor_data_preprocess+0x76>
10011682:	21c0      	movs	r1, #192	; 0xc0
10011684:	23b8      	movs	r3, #184	; 0xb8
10011686:	1c0a      	adds	r2, r1, #0
10011688:	58e3      	ldr	r3, [r4, r3]
1001168a:	401a      	ands	r2, r3
1001168c:	2ac0      	cmp	r2, #192	; 0xc0
1001168e:	d017      	beq.n	100116c0 <inv_sensor_data_preprocess+0x58>
10011690:	2260      	movs	r2, #96	; 0x60
10011692:	4013      	ands	r3, r2
10011694:	2b60      	cmp	r3, #96	; 0x60
10011696:	d001      	beq.n	1001169c <inv_sensor_data_preprocess+0x34>
10011698:	b004      	add	sp, #16
1001169a:	bd10      	pop	{r4, pc}
1001169c:	3340      	adds	r3, #64	; 0x40
1001169e:	58e3      	ldr	r3, [r4, r3]
100116a0:	5861      	ldr	r1, [r4, r1]
100116a2:	139b      	asrs	r3, r3, #14
100116a4:	9301      	str	r3, [sp, #4]
100116a6:	23a4      	movs	r3, #164	; 0xa4
100116a8:	58e3      	ldr	r3, [r4, r3]
100116aa:	a801      	add	r0, sp, #4
100116ac:	139b      	asrs	r3, r3, #14
100116ae:	9302      	str	r3, [sp, #8]
100116b0:	23a8      	movs	r3, #168	; 0xa8
100116b2:	58e3      	ldr	r3, [r4, r3]
100116b4:	4a0f      	ldr	r2, [pc, #60]	; (100116f4 <inv_sensor_data_preprocess+0x8c>)
100116b6:	139b      	asrs	r3, r3, #14
100116b8:	9303      	str	r3, [sp, #12]
100116ba:	f7ff fe0b 	bl	100112d4 <inv_fast_nomot_store_data_compass>
100116be:	e7eb      	b.n	10011698 <inv_sensor_data_preprocess+0x30>
100116c0:	238c      	movs	r3, #140	; 0x8c
100116c2:	5ee3      	ldrsh	r3, [r4, r3]
100116c4:	a801      	add	r0, sp, #4
100116c6:	9301      	str	r3, [sp, #4]
100116c8:	238e      	movs	r3, #142	; 0x8e
100116ca:	5ee3      	ldrsh	r3, [r4, r3]
100116cc:	9302      	str	r3, [sp, #8]
100116ce:	2390      	movs	r3, #144	; 0x90
100116d0:	5ee3      	ldrsh	r3, [r4, r3]
100116d2:	58a1      	ldr	r1, [r4, r2]
100116d4:	4a07      	ldr	r2, [pc, #28]	; (100116f4 <inv_sensor_data_preprocess+0x8c>)
100116d6:	9303      	str	r3, [sp, #12]
100116d8:	f7ff fdfc 	bl	100112d4 <inv_fast_nomot_store_data_compass>
100116dc:	e7dc      	b.n	10011698 <inv_sensor_data_preprocess+0x30>
100116de:	1c20      	adds	r0, r4, #0
100116e0:	4905      	ldr	r1, [pc, #20]	; (100116f8 <inv_sensor_data_preprocess+0x90>)
100116e2:	3048      	adds	r0, #72	; 0x48
100116e4:	f7ff fd9e 	bl	10011224 <inv_fast_nomot_store_data>
100116e8:	e7cb      	b.n	10011682 <inv_sensor_data_preprocess+0x1a>
100116ea:	3004      	adds	r0, #4
100116ec:	4903      	ldr	r1, [pc, #12]	; (100116fc <inv_sensor_data_preprocess+0x94>)
100116ee:	f7ff fd99 	bl	10011224 <inv_fast_nomot_store_data>
100116f2:	e7c1      	b.n	10011678 <inv_sensor_data_preprocess+0x10>
100116f4:	1001e580 	.word	0x1001e580
100116f8:	1001e618 	.word	0x1001e618
100116fc:	1001e4e8 	.word	0x1001e4e8

10011700 <inv_generate_fast_nomot>:
10011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011702:	6b03      	ldr	r3, [r0, #48]	; 0x30
10011704:	05da      	lsls	r2, r3, #23
10011706:	d400      	bmi.n	1001170a <inv_generate_fast_nomot+0xa>
10011708:	e0a0      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
1001170a:	2150      	movs	r1, #80	; 0x50
1001170c:	6f42      	ldr	r2, [r0, #116]	; 0x74
1001170e:	1c05      	adds	r5, r0, #0
10011710:	400a      	ands	r2, r1
10011712:	2a40      	cmp	r2, #64	; 0x40
10011714:	d100      	bne.n	10011718 <inv_generate_fast_nomot+0x18>
10011716:	e09b      	b.n	10011850 <inv_generate_fast_nomot+0x150>
10011718:	22b8      	movs	r2, #184	; 0xb8
1001171a:	5882      	ldr	r2, [r0, r2]
1001171c:	400a      	ands	r2, r1
1001171e:	2a40      	cmp	r2, #64	; 0x40
10011720:	d100      	bne.n	10011724 <inv_generate_fast_nomot+0x24>
10011722:	e095      	b.n	10011850 <inv_generate_fast_nomot+0x150>
10011724:	400b      	ands	r3, r1
10011726:	2b40      	cmp	r3, #64	; 0x40
10011728:	d100      	bne.n	1001172c <inv_generate_fast_nomot+0x2c>
1001172a:	e091      	b.n	10011850 <inv_generate_fast_nomot+0x150>
1001172c:	4cc9      	ldr	r4, [pc, #804]	; (10011a54 <inv_generate_fast_nomot+0x354>)
1001172e:	2282      	movs	r2, #130	; 0x82
10011730:	0092      	lsls	r2, r2, #2
10011732:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10011734:	58a1      	ldr	r1, [r4, r2]
10011736:	4299      	cmp	r1, r3
10011738:	d01b      	beq.n	10011772 <inv_generate_fast_nomot+0x72>
1001173a:	50a3      	str	r3, [r4, r2]
1001173c:	4ec6      	ldr	r6, [pc, #792]	; (10011a58 <inv_generate_fast_nomot+0x358>)
1001173e:	2b09      	cmp	r3, #9
10011740:	dc00      	bgt.n	10011744 <inv_generate_fast_nomot+0x44>
10011742:	e18d      	b.n	10011a60 <inv_generate_fast_nomot+0x360>
10011744:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011746:	6b71      	ldr	r1, [r6, #52]	; 0x34
10011748:	6023      	str	r3, [r4, #0]
1001174a:	2383      	movs	r3, #131	; 0x83
1001174c:	1c08      	adds	r0, r1, #0
1001174e:	009b      	lsls	r3, r3, #2
10011750:	6bb2      	ldr	r2, [r6, #56]	; 0x38
10011752:	50e1      	str	r1, [r4, r3]
10011754:	3308      	adds	r3, #8
10011756:	50e2      	str	r2, [r4, r3]
10011758:	2210      	movs	r2, #16
1001175a:	1a52      	subs	r2, r2, r1
1001175c:	2184      	movs	r1, #132	; 0x84
1001175e:	2319      	movs	r3, #25
10011760:	0089      	lsls	r1, r1, #2
10011762:	5062      	str	r2, [r4, r1]
10011764:	2180      	movs	r1, #128	; 0x80
10011766:	2286      	movs	r2, #134	; 0x86
10011768:	4083      	lsls	r3, r0
1001176a:	01c9      	lsls	r1, r1, #7
1001176c:	0092      	lsls	r2, r2, #2
1001176e:	50a1      	str	r1, [r4, r2]
10011770:	63f3      	str	r3, [r6, #60]	; 0x3c
10011772:	1c28      	adds	r0, r5, #0
10011774:	f7ff ff78 	bl	10011668 <inv_sensor_data_preprocess>
10011778:	23f4      	movs	r3, #244	; 0xf4
1001177a:	005b      	lsls	r3, r3, #1
1001177c:	5ce3      	ldrb	r3, [r4, r3]
1001177e:	2b06      	cmp	r3, #6
10011780:	d864      	bhi.n	1001184c <inv_generate_fast_nomot+0x14c>
10011782:	4ab6      	ldr	r2, [pc, #728]	; (10011a5c <inv_generate_fast_nomot+0x35c>)
10011784:	009b      	lsls	r3, r3, #2
10011786:	58d3      	ldr	r3, [r2, r3]
10011788:	469f      	mov	pc, r3
1001178a:	23b8      	movs	r3, #184	; 0xb8
1001178c:	58ea      	ldr	r2, [r5, r3]
1001178e:	3348      	adds	r3, #72	; 0x48
10011790:	421a      	tst	r2, r3
10011792:	d01b      	beq.n	100117cc <inv_generate_fast_nomot+0xcc>
10011794:	58e2      	ldr	r2, [r4, r3]
10011796:	3304      	adds	r3, #4
10011798:	58e3      	ldr	r3, [r4, r3]
1001179a:	4293      	cmp	r3, r2
1001179c:	da00      	bge.n	100117a0 <inv_generate_fast_nomot+0xa0>
1001179e:	1c13      	adds	r3, r2, #0
100117a0:	2284      	movs	r2, #132	; 0x84
100117a2:	0052      	lsls	r2, r2, #1
100117a4:	58a2      	ldr	r2, [r4, r2]
100117a6:	4293      	cmp	r3, r2
100117a8:	da00      	bge.n	100117ac <inv_generate_fast_nomot+0xac>
100117aa:	1c13      	adds	r3, r2, #0
100117ac:	1c21      	adds	r1, r4, #0
100117ae:	48aa      	ldr	r0, [pc, #680]	; (10011a58 <inv_generate_fast_nomot+0x358>)
100117b0:	31d1      	adds	r1, #209	; 0xd1
100117b2:	31ff      	adds	r1, #255	; 0xff
100117b4:	17da      	asrs	r2, r3, #31
100117b6:	600b      	str	r3, [r1, #0]
100117b8:	604a      	str	r2, [r1, #4]
100117ba:	68c1      	ldr	r1, [r0, #12]
100117bc:	4291      	cmp	r1, r2
100117be:	da00      	bge.n	100117c2 <inv_generate_fast_nomot+0xc2>
100117c0:	e143      	b.n	10011a4a <inv_generate_fast_nomot+0x34a>
100117c2:	d103      	bne.n	100117cc <inv_generate_fast_nomot+0xcc>
100117c4:	6882      	ldr	r2, [r0, #8]
100117c6:	429a      	cmp	r2, r3
100117c8:	d200      	bcs.n	100117cc <inv_generate_fast_nomot+0xcc>
100117ca:	e13e      	b.n	10011a4a <inv_generate_fast_nomot+0x34a>
100117cc:	1c28      	adds	r0, r5, #0
100117ce:	f7ff fea3 	bl	10011518 <inv_detect_motion_by_gyro_accel>
100117d2:	2800      	cmp	r0, #0
100117d4:	d100      	bne.n	100117d8 <inv_generate_fast_nomot+0xd8>
100117d6:	e138      	b.n	10011a4a <inv_generate_fast_nomot+0x34a>
100117d8:	2801      	cmp	r0, #1
100117da:	d137      	bne.n	1001184c <inv_generate_fast_nomot+0x14c>
100117dc:	1c28      	adds	r0, r5, #0
100117de:	f7ff fc8d 	bl	100110fc <inv_fast_nomot_set_gyro_bias>
100117e2:	1c23      	adds	r3, r4, #0
100117e4:	33d9      	adds	r3, #217	; 0xd9
100117e6:	33ff      	adds	r3, #255	; 0xff
100117e8:	cb06      	ldmia	r3!, {r1, r2}
100117ea:	2396      	movs	r3, #150	; 0x96
100117ec:	2094      	movs	r0, #148	; 0x94
100117ee:	009b      	lsls	r3, r3, #2
100117f0:	58e3      	ldr	r3, [r4, r3]
100117f2:	0080      	lsls	r0, r0, #2
100117f4:	1820      	adds	r0, r4, r0
100117f6:	2b00      	cmp	r3, #0
100117f8:	d009      	beq.n	1001180e <inv_generate_fast_nomot+0x10e>
100117fa:	6845      	ldr	r5, [r0, #4]
100117fc:	4295      	cmp	r5, r2
100117fe:	db03      	blt.n	10011808 <inv_generate_fast_nomot+0x108>
10011800:	d106      	bne.n	10011810 <inv_generate_fast_nomot+0x110>
10011802:	6800      	ldr	r0, [r0, #0]
10011804:	4288      	cmp	r0, r1
10011806:	d203      	bcs.n	10011810 <inv_generate_fast_nomot+0x110>
10011808:	2094      	movs	r0, #148	; 0x94
1001180a:	0080      	lsls	r0, r0, #2
1001180c:	1820      	adds	r0, r4, r0
1001180e:	c006      	stmia	r0!, {r1, r2}
10011810:	2296      	movs	r2, #150	; 0x96
10011812:	3301      	adds	r3, #1
10011814:	0092      	lsls	r2, r2, #2
10011816:	50a3      	str	r3, [r4, r2]
10011818:	1c23      	adds	r3, r4, #0
1001181a:	33f1      	adds	r3, #241	; 0xf1
1001181c:	33ff      	adds	r3, #255	; 0xff
1001181e:	cb06      	ldmia	r3!, {r1, r2}
10011820:	2392      	movs	r3, #146	; 0x92
10011822:	2090      	movs	r0, #144	; 0x90
10011824:	009b      	lsls	r3, r3, #2
10011826:	58e3      	ldr	r3, [r4, r3]
10011828:	0080      	lsls	r0, r0, #2
1001182a:	1820      	adds	r0, r4, r0
1001182c:	2b00      	cmp	r3, #0
1001182e:	d100      	bne.n	10011832 <inv_generate_fast_nomot+0x132>
10011830:	e09b      	b.n	1001196a <inv_generate_fast_nomot+0x26a>
10011832:	6845      	ldr	r5, [r0, #4]
10011834:	4295      	cmp	r5, r2
10011836:	da00      	bge.n	1001183a <inv_generate_fast_nomot+0x13a>
10011838:	e094      	b.n	10011964 <inv_generate_fast_nomot+0x264>
1001183a:	d103      	bne.n	10011844 <inv_generate_fast_nomot+0x144>
1001183c:	6800      	ldr	r0, [r0, #0]
1001183e:	4288      	cmp	r0, r1
10011840:	d200      	bcs.n	10011844 <inv_generate_fast_nomot+0x144>
10011842:	e08f      	b.n	10011964 <inv_generate_fast_nomot+0x264>
10011844:	2292      	movs	r2, #146	; 0x92
10011846:	3301      	adds	r3, #1
10011848:	0092      	lsls	r2, r2, #2
1001184a:	50a3      	str	r3, [r4, r2]
1001184c:	2000      	movs	r0, #0
1001184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011850:	f7ff fb96 	bl	10010f80 <inv_reset_packet>
10011854:	22f0      	movs	r2, #240	; 0xf0
10011856:	2300      	movs	r3, #0
10011858:	4c7e      	ldr	r4, [pc, #504]	; (10011a54 <inv_generate_fast_nomot+0x354>)
1001185a:	0052      	lsls	r2, r2, #1
1001185c:	50a3      	str	r3, [r4, r2]
1001185e:	3208      	adds	r2, #8
10011860:	54a3      	strb	r3, [r4, r2]
10011862:	e764      	b.n	1001172e <inv_generate_fast_nomot+0x2e>
10011864:	23f4      	movs	r3, #244	; 0xf4
10011866:	2206      	movs	r2, #6
10011868:	005b      	lsls	r3, r3, #1
1001186a:	2001      	movs	r0, #1
1001186c:	54e2      	strb	r2, [r4, r3]
1001186e:	f7f9 f935 	bl	1000aadc <inv_set_motion_state>
10011872:	f7ff fb85 	bl	10010f80 <inv_reset_packet>
10011876:	2386      	movs	r3, #134	; 0x86
10011878:	005b      	lsls	r3, r3, #1
1001187a:	58e2      	ldr	r2, [r4, r3]
1001187c:	3310      	adds	r3, #16
1001187e:	50e2      	str	r2, [r4, r3]
10011880:	2280      	movs	r2, #128	; 0x80
10011882:	2300      	movs	r3, #0
10011884:	0052      	lsls	r2, r2, #1
10011886:	50a3      	str	r3, [r4, r2]
10011888:	3210      	adds	r2, #16
1001188a:	58a1      	ldr	r1, [r4, r2]
1001188c:	3210      	adds	r2, #16
1001188e:	50a1      	str	r1, [r4, r2]
10011890:	3a1c      	subs	r2, #28
10011892:	50a3      	str	r3, [r4, r2]
10011894:	3210      	adds	r2, #16
10011896:	58a1      	ldr	r1, [r4, r2]
10011898:	3210      	adds	r2, #16
1001189a:	50a1      	str	r1, [r4, r2]
1001189c:	3a1c      	subs	r2, #28
1001189e:	50a3      	str	r3, [r4, r2]
100118a0:	3220      	adds	r2, #32
100118a2:	58a1      	ldr	r1, [r4, r2]
100118a4:	3204      	adds	r2, #4
100118a6:	50a1      	str	r1, [r4, r2]
100118a8:	3a14      	subs	r2, #20
100118aa:	50a3      	str	r3, [r4, r2]
100118ac:	3218      	adds	r2, #24
100118ae:	50a3      	str	r3, [r4, r2]
100118b0:	e7cc      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
100118b2:	1c28      	adds	r0, r5, #0
100118b4:	f7ff fe30 	bl	10011518 <inv_detect_motion_by_gyro_accel>
100118b8:	2800      	cmp	r0, #0
100118ba:	d100      	bne.n	100118be <inv_generate_fast_nomot+0x1be>
100118bc:	e0c5      	b.n	10011a4a <inv_generate_fast_nomot+0x34a>
100118be:	2801      	cmp	r0, #1
100118c0:	d1c4      	bne.n	1001184c <inv_generate_fast_nomot+0x14c>
100118c2:	23b8      	movs	r3, #184	; 0xb8
100118c4:	58ea      	ldr	r2, [r5, r3]
100118c6:	3348      	adds	r3, #72	; 0x48
100118c8:	421a      	tst	r2, r3
100118ca:	d100      	bne.n	100118ce <inv_generate_fast_nomot+0x1ce>
100118cc:	e0f1      	b.n	10011ab2 <inv_generate_fast_nomot+0x3b2>
100118ce:	58e2      	ldr	r2, [r4, r3]
100118d0:	3304      	adds	r3, #4
100118d2:	58e3      	ldr	r3, [r4, r3]
100118d4:	4293      	cmp	r3, r2
100118d6:	da00      	bge.n	100118da <inv_generate_fast_nomot+0x1da>
100118d8:	1c13      	adds	r3, r2, #0
100118da:	2284      	movs	r2, #132	; 0x84
100118dc:	0052      	lsls	r2, r2, #1
100118de:	58a2      	ldr	r2, [r4, r2]
100118e0:	4293      	cmp	r3, r2
100118e2:	da00      	bge.n	100118e6 <inv_generate_fast_nomot+0x1e6>
100118e4:	1c13      	adds	r3, r2, #0
100118e6:	1c21      	adds	r1, r4, #0
100118e8:	4e5b      	ldr	r6, [pc, #364]	; (10011a58 <inv_generate_fast_nomot+0x358>)
100118ea:	31d1      	adds	r1, #209	; 0xd1
100118ec:	31ff      	adds	r1, #255	; 0xff
100118ee:	17da      	asrs	r2, r3, #31
100118f0:	600b      	str	r3, [r1, #0]
100118f2:	604a      	str	r2, [r1, #4]
100118f4:	68f1      	ldr	r1, [r6, #12]
100118f6:	4291      	cmp	r1, r2
100118f8:	db05      	blt.n	10011906 <inv_generate_fast_nomot+0x206>
100118fa:	d000      	beq.n	100118fe <inv_generate_fast_nomot+0x1fe>
100118fc:	e0ce      	b.n	10011a9c <inv_generate_fast_nomot+0x39c>
100118fe:	68b2      	ldr	r2, [r6, #8]
10011900:	429a      	cmp	r2, r3
10011902:	d300      	bcc.n	10011906 <inv_generate_fast_nomot+0x206>
10011904:	e0ca      	b.n	10011a9c <inv_generate_fast_nomot+0x39c>
10011906:	23f4      	movs	r3, #244	; 0xf4
10011908:	2205      	movs	r2, #5
1001190a:	005b      	lsls	r3, r3, #1
1001190c:	54e2      	strb	r2, [r4, r3]
1001190e:	1c23      	adds	r3, r4, #0
10011910:	33d9      	adds	r3, #217	; 0xd9
10011912:	33ff      	adds	r3, #255	; 0xff
10011914:	cb06      	ldmia	r3!, {r1, r2}
10011916:	2396      	movs	r3, #150	; 0x96
10011918:	2094      	movs	r0, #148	; 0x94
1001191a:	009b      	lsls	r3, r3, #2
1001191c:	58e3      	ldr	r3, [r4, r3]
1001191e:	0080      	lsls	r0, r0, #2
10011920:	2b00      	cmp	r3, #0
10011922:	d009      	beq.n	10011938 <inv_generate_fast_nomot+0x238>
10011924:	1825      	adds	r5, r4, r0
10011926:	6868      	ldr	r0, [r5, #4]
10011928:	4290      	cmp	r0, r2
1001192a:	db03      	blt.n	10011934 <inv_generate_fast_nomot+0x234>
1001192c:	d106      	bne.n	1001193c <inv_generate_fast_nomot+0x23c>
1001192e:	6828      	ldr	r0, [r5, #0]
10011930:	4288      	cmp	r0, r1
10011932:	d203      	bcs.n	1001193c <inv_generate_fast_nomot+0x23c>
10011934:	2094      	movs	r0, #148	; 0x94
10011936:	0080      	lsls	r0, r0, #2
10011938:	1820      	adds	r0, r4, r0
1001193a:	c006      	stmia	r0!, {r1, r2}
1001193c:	2296      	movs	r2, #150	; 0x96
1001193e:	3301      	adds	r3, #1
10011940:	0092      	lsls	r2, r2, #2
10011942:	50a3      	str	r3, [r4, r2]
10011944:	1c23      	adds	r3, r4, #0
10011946:	33f1      	adds	r3, #241	; 0xf1
10011948:	33ff      	adds	r3, #255	; 0xff
1001194a:	cb06      	ldmia	r3!, {r1, r2}
1001194c:	2392      	movs	r3, #146	; 0x92
1001194e:	2090      	movs	r0, #144	; 0x90
10011950:	009b      	lsls	r3, r3, #2
10011952:	58e3      	ldr	r3, [r4, r3]
10011954:	0080      	lsls	r0, r0, #2
10011956:	2b00      	cmp	r3, #0
10011958:	d006      	beq.n	10011968 <inv_generate_fast_nomot+0x268>
1001195a:	1825      	adds	r5, r4, r0
1001195c:	6868      	ldr	r0, [r5, #4]
1001195e:	4290      	cmp	r0, r2
10011960:	db00      	blt.n	10011964 <inv_generate_fast_nomot+0x264>
10011962:	e0ae      	b.n	10011ac2 <inv_generate_fast_nomot+0x3c2>
10011964:	2090      	movs	r0, #144	; 0x90
10011966:	0080      	lsls	r0, r0, #2
10011968:	1820      	adds	r0, r4, r0
1001196a:	c006      	stmia	r0!, {r1, r2}
1001196c:	e76a      	b.n	10011844 <inv_generate_fast_nomot+0x144>
1001196e:	23f4      	movs	r3, #244	; 0xf4
10011970:	2203      	movs	r2, #3
10011972:	005b      	lsls	r3, r3, #1
10011974:	1c28      	adds	r0, r5, #0
10011976:	54e2      	strb	r2, [r4, r3]
10011978:	f7ff fbc0 	bl	100110fc <inv_fast_nomot_set_gyro_bias>
1001197c:	f7ff fb00 	bl	10010f80 <inv_reset_packet>
10011980:	e764      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
10011982:	2398      	movs	r3, #152	; 0x98
10011984:	58e3      	ldr	r3, [r4, r3]
10011986:	2b01      	cmp	r3, #1
10011988:	d000      	beq.n	1001198c <inv_generate_fast_nomot+0x28c>
1001198a:	e75f      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
1001198c:	1c28      	adds	r0, r5, #0
1001198e:	f7ff fdc3 	bl	10011518 <inv_detect_motion_by_gyro_accel>
10011992:	2800      	cmp	r0, #0
10011994:	d17b      	bne.n	10011a8e <inv_generate_fast_nomot+0x38e>
10011996:	23f4      	movs	r3, #244	; 0xf4
10011998:	2205      	movs	r2, #5
1001199a:	005b      	lsls	r3, r3, #1
1001199c:	54e2      	strb	r2, [r4, r3]
1001199e:	2386      	movs	r3, #134	; 0x86
100119a0:	005b      	lsls	r3, r3, #1
100119a2:	58e2      	ldr	r2, [r4, r3]
100119a4:	3310      	adds	r3, #16
100119a6:	50e2      	str	r2, [r4, r3]
100119a8:	2280      	movs	r2, #128	; 0x80
100119aa:	2300      	movs	r3, #0
100119ac:	0052      	lsls	r2, r2, #1
100119ae:	50a3      	str	r3, [r4, r2]
100119b0:	3210      	adds	r2, #16
100119b2:	58a1      	ldr	r1, [r4, r2]
100119b4:	3210      	adds	r2, #16
100119b6:	50a1      	str	r1, [r4, r2]
100119b8:	3a1c      	subs	r2, #28
100119ba:	50a3      	str	r3, [r4, r2]
100119bc:	3210      	adds	r2, #16
100119be:	58a1      	ldr	r1, [r4, r2]
100119c0:	3210      	adds	r2, #16
100119c2:	50a1      	str	r1, [r4, r2]
100119c4:	3a1c      	subs	r2, #28
100119c6:	50a3      	str	r3, [r4, r2]
100119c8:	3220      	adds	r2, #32
100119ca:	58a1      	ldr	r1, [r4, r2]
100119cc:	3204      	adds	r2, #4
100119ce:	50a1      	str	r1, [r4, r2]
100119d0:	3a14      	subs	r2, #20
100119d2:	50a3      	str	r3, [r4, r2]
100119d4:	3218      	adds	r2, #24
100119d6:	50a3      	str	r3, [r4, r2]
100119d8:	f7ff fd10 	bl	100113fc <inv_reset_min_max_gyro_accel_statistics>
100119dc:	e736      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
100119de:	22f0      	movs	r2, #240	; 0xf0
100119e0:	0052      	lsls	r2, r2, #1
100119e2:	58a3      	ldr	r3, [r4, r2]
100119e4:	1c59      	adds	r1, r3, #1
100119e6:	50a1      	str	r1, [r4, r2]
100119e8:	2b09      	cmp	r3, #9
100119ea:	dc00      	bgt.n	100119ee <inv_generate_fast_nomot+0x2ee>
100119ec:	e72e      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
100119ee:	f7ff fac7 	bl	10010f80 <inv_reset_packet>
100119f2:	23f4      	movs	r3, #244	; 0xf4
100119f4:	2201      	movs	r2, #1
100119f6:	005b      	lsls	r3, r3, #1
100119f8:	54e2      	strb	r2, [r4, r3]
100119fa:	e727      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
100119fc:	1c28      	adds	r0, r5, #0
100119fe:	f7ff fd8b 	bl	10011518 <inv_detect_motion_by_gyro_accel>
10011a02:	1e05      	subs	r5, r0, #0
10011a04:	2d01      	cmp	r5, #1
10011a06:	d03d      	beq.n	10011a84 <inv_generate_fast_nomot+0x384>
10011a08:	2800      	cmp	r0, #0
10011a0a:	d000      	beq.n	10011a0e <inv_generate_fast_nomot+0x30e>
10011a0c:	e71e      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
10011a0e:	f7ff fab7 	bl	10010f80 <inv_reset_packet>
10011a12:	2386      	movs	r3, #134	; 0x86
10011a14:	005b      	lsls	r3, r3, #1
10011a16:	58e2      	ldr	r2, [r4, r3]
10011a18:	3310      	adds	r3, #16
10011a1a:	50e2      	str	r2, [r4, r3]
10011a1c:	3b1c      	subs	r3, #28
10011a1e:	50e5      	str	r5, [r4, r3]
10011a20:	3310      	adds	r3, #16
10011a22:	58e2      	ldr	r2, [r4, r3]
10011a24:	3310      	adds	r3, #16
10011a26:	50e2      	str	r2, [r4, r3]
10011a28:	3b1c      	subs	r3, #28
10011a2a:	50e5      	str	r5, [r4, r3]
10011a2c:	3310      	adds	r3, #16
10011a2e:	58e2      	ldr	r2, [r4, r3]
10011a30:	3310      	adds	r3, #16
10011a32:	50e2      	str	r2, [r4, r3]
10011a34:	3b1c      	subs	r3, #28
10011a36:	50e5      	str	r5, [r4, r3]
10011a38:	3320      	adds	r3, #32
10011a3a:	58e2      	ldr	r2, [r4, r3]
10011a3c:	3304      	adds	r3, #4
10011a3e:	50e2      	str	r2, [r4, r3]
10011a40:	3b14      	subs	r3, #20
10011a42:	50e5      	str	r5, [r4, r3]
10011a44:	3318      	adds	r3, #24
10011a46:	50e5      	str	r5, [r4, r3]
10011a48:	e700      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
10011a4a:	23f4      	movs	r3, #244	; 0xf4
10011a4c:	2205      	movs	r2, #5
10011a4e:	005b      	lsls	r3, r3, #1
10011a50:	54e2      	strb	r2, [r4, r3]
10011a52:	e6fb      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
10011a54:	1001e4e0 	.word	0x1001e4e0
10011a58:	1001cfa8 	.word	0x1001cfa8
10011a5c:	1001adb0 	.word	0x1001adb0
10011a60:	2783      	movs	r7, #131	; 0x83
10011a62:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011a64:	00bf      	lsls	r7, r7, #2
10011a66:	0058      	lsls	r0, r3, #1
10011a68:	6b73      	ldr	r3, [r6, #52]	; 0x34
10011a6a:	6020      	str	r0, [r4, #0]
10011a6c:	3301      	adds	r3, #1
10011a6e:	51e3      	str	r3, [r4, r7]
10011a70:	f004 faac 	bl	10015fcc <__aeabi_i2f>
10011a74:	f7fe ff2a 	bl	100108cc <sqrtf>
10011a78:	2385      	movs	r3, #133	; 0x85
10011a7a:	009b      	lsls	r3, r3, #2
10011a7c:	50e0      	str	r0, [r4, r3]
10011a7e:	59e1      	ldr	r1, [r4, r7]
10011a80:	6b70      	ldr	r0, [r6, #52]	; 0x34
10011a82:	e669      	b.n	10011758 <inv_generate_fast_nomot+0x58>
10011a84:	23f4      	movs	r3, #244	; 0xf4
10011a86:	2202      	movs	r2, #2
10011a88:	005b      	lsls	r3, r3, #1
10011a8a:	54e2      	strb	r2, [r4, r3]
10011a8c:	e6de      	b.n	1001184c <inv_generate_fast_nomot+0x14c>
10011a8e:	2801      	cmp	r0, #1
10011a90:	d185      	bne.n	1001199e <inv_generate_fast_nomot+0x29e>
10011a92:	23f4      	movs	r3, #244	; 0xf4
10011a94:	2202      	movs	r2, #2
10011a96:	005b      	lsls	r3, r3, #1
10011a98:	54e2      	strb	r2, [r4, r3]
10011a9a:	e780      	b.n	1001199e <inv_generate_fast_nomot+0x29e>
10011a9c:	2394      	movs	r3, #148	; 0x94
10011a9e:	2296      	movs	r2, #150	; 0x96
10011aa0:	005b      	lsls	r3, r3, #1
10011aa2:	0052      	lsls	r2, r2, #1
10011aa4:	58a2      	ldr	r2, [r4, r2]
10011aa6:	58e3      	ldr	r3, [r4, r3]
10011aa8:	1a9b      	subs	r3, r3, r2
10011aaa:	6a32      	ldr	r2, [r6, #32]
10011aac:	4293      	cmp	r3, r2
10011aae:	d200      	bcs.n	10011ab2 <inv_generate_fast_nomot+0x3b2>
10011ab0:	e72d      	b.n	1001190e <inv_generate_fast_nomot+0x20e>
10011ab2:	23f4      	movs	r3, #244	; 0xf4
10011ab4:	2204      	movs	r2, #4
10011ab6:	005b      	lsls	r3, r3, #1
10011ab8:	1c28      	adds	r0, r5, #0
10011aba:	54e2      	strb	r2, [r4, r3]
10011abc:	f7ff fb1e 	bl	100110fc <inv_fast_nomot_set_gyro_bias>
10011ac0:	e725      	b.n	1001190e <inv_generate_fast_nomot+0x20e>
10011ac2:	4290      	cmp	r0, r2
10011ac4:	d000      	beq.n	10011ac8 <inv_generate_fast_nomot+0x3c8>
10011ac6:	e6bd      	b.n	10011844 <inv_generate_fast_nomot+0x144>
10011ac8:	6828      	ldr	r0, [r5, #0]
10011aca:	4288      	cmp	r0, r1
10011acc:	d200      	bcs.n	10011ad0 <inv_generate_fast_nomot+0x3d0>
10011ace:	e749      	b.n	10011964 <inv_generate_fast_nomot+0x264>
10011ad0:	e6b8      	b.n	10011844 <inv_generate_fast_nomot+0x144>
10011ad2:	46c0      	nop			; (mov r8, r8)

10011ad4 <inv_set_default_number_of_samples>:
10011ad4:	2300      	movs	r3, #0
10011ad6:	b510      	push	{r4, lr}
10011ad8:	1040      	asrs	r0, r0, #1
10011ada:	d10f      	bne.n	10011afc <inv_set_default_number_of_samples+0x28>
10011adc:	2001      	movs	r0, #1
10011ade:	3301      	adds	r3, #1
10011ae0:	4098      	lsls	r0, r3
10011ae2:	4c08      	ldr	r4, [pc, #32]	; (10011b04 <inv_set_default_number_of_samples+0x30>)
10011ae4:	6363      	str	r3, [r4, #52]	; 0x34
10011ae6:	6320      	str	r0, [r4, #48]	; 0x30
10011ae8:	f004 fa70 	bl	10015fcc <__aeabi_i2f>
10011aec:	f7fe feee 	bl	100108cc <sqrtf>
10011af0:	2319      	movs	r3, #25
10011af2:	6b62      	ldr	r2, [r4, #52]	; 0x34
10011af4:	63a0      	str	r0, [r4, #56]	; 0x38
10011af6:	4093      	lsls	r3, r2
10011af8:	63e3      	str	r3, [r4, #60]	; 0x3c
10011afa:	bd10      	pop	{r4, pc}
10011afc:	3301      	adds	r3, #1
10011afe:	2800      	cmp	r0, #0
10011b00:	dcea      	bgt.n	10011ad8 <inv_set_default_number_of_samples+0x4>
10011b02:	e7eb      	b.n	10011adc <inv_set_default_number_of_samples+0x8>
10011b04:	1001cfa8 	.word	0x1001cfa8

10011b08 <inv_init_fast_nomot>:
10011b08:	2298      	movs	r2, #152	; 0x98
10011b0a:	b538      	push	{r3, r4, r5, lr}
10011b0c:	4d15      	ldr	r5, [pc, #84]	; (10011b64 <inv_init_fast_nomot+0x5c>)
10011b0e:	2100      	movs	r1, #0
10011b10:	1c28      	adds	r0, r5, #0
10011b12:	0092      	lsls	r2, r2, #2
10011b14:	f006 faf9 	bl	1001810a <memset>
10011b18:	4c13      	ldr	r4, [pc, #76]	; (10011b68 <inv_init_fast_nomot+0x60>)
10011b1a:	2100      	movs	r1, #0
10011b1c:	2240      	movs	r2, #64	; 0x40
10011b1e:	1c20      	adds	r0, r4, #0
10011b20:	f006 faf3 	bl	1001810a <memset>
10011b24:	2007      	movs	r0, #7
10011b26:	f7ff f9f3 	bl	10010f10 <inv_init_maxmin>
10011b2a:	2300      	movs	r3, #0
10011b2c:	4a0f      	ldr	r2, [pc, #60]	; (10011b6c <inv_init_fast_nomot+0x64>)
10011b2e:	2019      	movs	r0, #25
10011b30:	61a2      	str	r2, [r4, #24]
10011b32:	61e3      	str	r3, [r4, #28]
10011b34:	2214      	movs	r2, #20
10011b36:	2300      	movs	r3, #0
10011b38:	60a2      	str	r2, [r4, #8]
10011b3a:	60e3      	str	r3, [r4, #12]
10011b3c:	2296      	movs	r2, #150	; 0x96
10011b3e:	2300      	movs	r3, #0
10011b40:	0092      	lsls	r2, r2, #2
10011b42:	6122      	str	r2, [r4, #16]
10011b44:	6163      	str	r3, [r4, #20]
10011b46:	4b0a      	ldr	r3, [pc, #40]	; (10011b70 <inv_init_fast_nomot+0x68>)
10011b48:	2201      	movs	r2, #1
10011b4a:	6223      	str	r3, [r4, #32]
10011b4c:	23f2      	movs	r3, #242	; 0xf2
10011b4e:	005b      	lsls	r3, r3, #1
10011b50:	50ea      	str	r2, [r5, r3]
10011b52:	f7ff ffbf 	bl	10011ad4 <inv_set_default_number_of_samples>
10011b56:	2382      	movs	r3, #130	; 0x82
10011b58:	2200      	movs	r2, #0
10011b5a:	009b      	lsls	r3, r3, #2
10011b5c:	50ea      	str	r2, [r5, r3]
10011b5e:	2000      	movs	r0, #0
10011b60:	bd38      	pop	{r3, r4, r5, pc}
10011b62:	46c0      	nop			; (mov r8, r8)
10011b64:	1001e4e0 	.word	0x1001e4e0
10011b68:	1001cfa8 	.word	0x1001cfa8
10011b6c:	000005dc 	.word	0x000005dc
10011b70:	2faf0800 	.word	0x2faf0800

10011b74 <inv_stop_fast_nomot>:
10011b74:	b508      	push	{r3, lr}
10011b76:	2001      	movs	r0, #1
10011b78:	f7f8 ffb0 	bl	1000aadc <inv_set_motion_state>
10011b7c:	4801      	ldr	r0, [pc, #4]	; (10011b84 <inv_stop_fast_nomot+0x10>)
10011b7e:	f7f8 f9b3 	bl	10009ee8 <inv_unregister_data_cb>
10011b82:	bd08      	pop	{r3, pc}
10011b84:	10011701 	.word	0x10011701

10011b88 <inv_enable_fast_nomot>:
10011b88:	b508      	push	{r3, lr}
10011b8a:	f7ff ffbd 	bl	10011b08 <inv_init_fast_nomot>
10011b8e:	2800      	cmp	r0, #0
10011b90:	d102      	bne.n	10011b98 <inv_enable_fast_nomot+0x10>
10011b92:	4802      	ldr	r0, [pc, #8]	; (10011b9c <inv_enable_fast_nomot+0x14>)
10011b94:	f7f9 f8a4 	bl	1000ace0 <inv_register_mpl_start_notification>
10011b98:	bd08      	pop	{r3, pc}
10011b9a:	46c0      	nop			; (mov r8, r8)
10011b9c:	10010fa9 	.word	0x10010fa9

10011ba0 <inv_disable_fast_nomot>:
10011ba0:	b508      	push	{r3, lr}
10011ba2:	f7ff ffe7 	bl	10011b74 <inv_stop_fast_nomot>
10011ba6:	4802      	ldr	r0, [pc, #8]	; (10011bb0 <inv_disable_fast_nomot+0x10>)
10011ba8:	f7f9 f86a 	bl	1000ac80 <inv_unregister_mpl_start_notification>
10011bac:	bd08      	pop	{r3, pc}
10011bae:	46c0      	nop			; (mov r8, r8)
10011bb0:	10010fa9 	.word	0x10010fa9

10011bb4 <inv_get_fnm_gyro_no_motion_param>:
10011bb4:	4b02      	ldr	r3, [pc, #8]	; (10011bc0 <inv_get_fnm_gyro_no_motion_param+0xc>)
10011bb6:	33f1      	adds	r3, #241	; 0xf1
10011bb8:	33ff      	adds	r3, #255	; 0xff
10011bba:	6818      	ldr	r0, [r3, #0]
10011bbc:	6859      	ldr	r1, [r3, #4]
10011bbe:	4770      	bx	lr
10011bc0:	1001e4e0 	.word	0x1001e4e0

10011bc4 <inv_fnm_debug_print>:
10011bc4:	4770      	bx	lr
10011bc6:	46c0      	nop			; (mov r8, r8)

10011bc8 <inv_start_9x_sensor_fusion>:
10011bc8:	2196      	movs	r1, #150	; 0x96
10011bca:	b508      	push	{r3, lr}
10011bcc:	4802      	ldr	r0, [pc, #8]	; (10011bd8 <inv_start_9x_sensor_fusion+0x10>)
10011bce:	0089      	lsls	r1, r1, #2
10011bd0:	2204      	movs	r2, #4
10011bd2:	f7f8 f90b 	bl	10009dec <inv_register_data_cb>
10011bd6:	bd08      	pop	{r3, pc}
10011bd8:	100121b1 	.word	0x100121b1

10011bdc <inv_filter_correction_angle>:
10011bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011bde:	4657      	mov	r7, sl
10011be0:	464e      	mov	r6, r9
10011be2:	4645      	mov	r5, r8
10011be4:	b4e0      	push	{r5, r6, r7}
10011be6:	1c1f      	adds	r7, r3, #0
10011be8:	6b43      	ldr	r3, [r0, #52]	; 0x34
10011bea:	1c0e      	adds	r6, r1, #0
10011bec:	4690      	mov	r8, r2
10011bee:	2b00      	cmp	r3, #0
10011bf0:	da00      	bge.n	10011bf4 <inv_filter_correction_angle+0x18>
10011bf2:	e0b7      	b.n	10011d64 <inv_filter_correction_angle+0x188>
10011bf4:	23bc      	movs	r3, #188	; 0xbc
10011bf6:	58c3      	ldr	r3, [r0, r3]
10011bf8:	3b03      	subs	r3, #3
10011bfa:	425a      	negs	r2, r3
10011bfc:	415a      	adcs	r2, r3
10011bfe:	4691      	mov	r9, r2
10011c00:	4c67      	ldr	r4, [pc, #412]	; (10011da0 <inv_filter_correction_angle+0x1c4>)
10011c02:	2224      	movs	r2, #36	; 0x24
10011c04:	1d21      	adds	r1, r4, #4
10011c06:	1c20      	adds	r0, r4, #0
10011c08:	1c25      	adds	r5, r4, #0
10011c0a:	f006 fa69 	bl	100180e0 <memmove>
10011c0e:	2000      	movs	r0, #0
10011c10:	6266      	str	r6, [r4, #36]	; 0x24
10011c12:	3528      	adds	r5, #40	; 0x28
10011c14:	cc02      	ldmia	r4!, {r1}
10011c16:	f003 fbc5 	bl	100153a4 <__aeabi_fadd>
10011c1a:	42ac      	cmp	r4, r5
10011c1c:	d1fa      	bne.n	10011c14 <inv_filter_correction_angle+0x38>
10011c1e:	4961      	ldr	r1, [pc, #388]	; (10011da4 <inv_filter_correction_angle+0x1c8>)
10011c20:	f003 fd36 	bl	10015690 <__aeabi_fdiv>
10011c24:	23e4      	movs	r3, #228	; 0xe4
10011c26:	4c60      	ldr	r4, [pc, #384]	; (10011da8 <inv_filter_correction_angle+0x1cc>)
10011c28:	4682      	mov	sl, r0
10011c2a:	50e0      	str	r0, [r4, r3]
10011c2c:	4643      	mov	r3, r8
10011c2e:	2b31      	cmp	r3, #49	; 0x31
10011c30:	dd18      	ble.n	10011c64 <inv_filter_correction_angle+0x88>
10011c32:	238e      	movs	r3, #142	; 0x8e
10011c34:	22c8      	movs	r2, #200	; 0xc8
10011c36:	005b      	lsls	r3, r3, #1
10011c38:	50e2      	str	r2, [r4, r3]
10011c3a:	1c38      	adds	r0, r7, #0
10011c3c:	f004 f9c6 	bl	10015fcc <__aeabi_i2f>
10011c40:	4b5a      	ldr	r3, [pc, #360]	; (10011dac <inv_filter_correction_angle+0x1d0>)
10011c42:	1c05      	adds	r5, r0, #0
10011c44:	1c30      	adds	r0, r6, #0
10011c46:	4598      	cmp	r8, r3
10011c48:	dc00      	bgt.n	10011c4c <inv_filter_correction_angle+0x70>
10011c4a:	e07a      	b.n	10011d42 <inv_filter_correction_angle+0x166>
10011c4c:	4958      	ldr	r1, [pc, #352]	; (10011db0 <inv_filter_correction_angle+0x1d4>)
10011c4e:	f003 fd1f 	bl	10015690 <__aeabi_fdiv>
10011c52:	1c01      	adds	r1, r0, #0
10011c54:	1c28      	adds	r0, r5, #0
10011c56:	f003 fee5 	bl	10015a24 <__aeabi_fmul>
10011c5a:	4956      	ldr	r1, [pc, #344]	; (10011db4 <inv_filter_correction_angle+0x1d8>)
10011c5c:	f003 fd18 	bl	10015690 <__aeabi_fdiv>
10011c60:	1c05      	adds	r5, r0, #0
10011c62:	e023      	b.n	10011cac <inv_filter_correction_angle+0xd0>
10011c64:	1c38      	adds	r0, r7, #0
10011c66:	4954      	ldr	r1, [pc, #336]	; (10011db8 <inv_filter_correction_angle+0x1dc>)
10011c68:	f003 f92e 	bl	10014ec8 <__aeabi_idiv>
10011c6c:	258e      	movs	r5, #142	; 0x8e
10011c6e:	0083      	lsls	r3, r0, #2
10011c70:	006d      	lsls	r5, r5, #1
10011c72:	1818      	adds	r0, r3, r0
10011c74:	5963      	ldr	r3, [r4, r5]
10011c76:	4698      	mov	r8, r3
10011c78:	4480      	add	r8, r0
10011c7a:	4643      	mov	r3, r8
10011c7c:	5163      	str	r3, [r4, r5]
10011c7e:	2b00      	cmp	r3, #0
10011c80:	da00      	bge.n	10011c84 <inv_filter_correction_angle+0xa8>
10011c82:	e072      	b.n	10011d6a <inv_filter_correction_angle+0x18e>
10011c84:	494d      	ldr	r1, [pc, #308]	; (10011dbc <inv_filter_correction_angle+0x1e0>)
10011c86:	1c30      	adds	r0, r6, #0
10011c88:	f003 fd02 	bl	10015690 <__aeabi_fdiv>
10011c8c:	1c05      	adds	r5, r0, #0
10011c8e:	1c38      	adds	r0, r7, #0
10011c90:	f004 f99c 	bl	10015fcc <__aeabi_i2f>
10011c94:	1c01      	adds	r1, r0, #0
10011c96:	1c28      	adds	r0, r5, #0
10011c98:	f003 fec4 	bl	10015a24 <__aeabi_fmul>
10011c9c:	4945      	ldr	r1, [pc, #276]	; (10011db4 <inv_filter_correction_angle+0x1d8>)
10011c9e:	f003 fcf7 	bl	10015690 <__aeabi_fdiv>
10011ca2:	4643      	mov	r3, r8
10011ca4:	1c05      	adds	r5, r0, #0
10011ca6:	2b00      	cmp	r3, #0
10011ca8:	d100      	bne.n	10011cac <inv_filter_correction_angle+0xd0>
10011caa:	e070      	b.n	10011d8e <inv_filter_correction_angle+0x1b2>
10011cac:	2390      	movs	r3, #144	; 0x90
10011cae:	005b      	lsls	r3, r3, #1
10011cb0:	58e3      	ldr	r3, [r4, r3]
10011cb2:	2b00      	cmp	r3, #0
10011cb4:	d000      	beq.n	10011cb8 <inv_filter_correction_angle+0xdc>
10011cb6:	1c35      	adds	r5, r6, #0
10011cb8:	4b41      	ldr	r3, [pc, #260]	; (10011dc0 <inv_filter_correction_angle+0x1e4>)
10011cba:	429f      	cmp	r7, r3
10011cbc:	d050      	beq.n	10011d60 <inv_filter_correction_angle+0x184>
10011cbe:	1c28      	adds	r0, r5, #0
10011cc0:	2100      	movs	r1, #0
10011cc2:	f003 fa37 	bl	10015134 <__aeabi_fcmpeq>
10011cc6:	23e8      	movs	r3, #232	; 0xe8
10011cc8:	2800      	cmp	r0, #0
10011cca:	d045      	beq.n	10011d58 <inv_filter_correction_angle+0x17c>
10011ccc:	58e0      	ldr	r0, [r4, r3]
10011cce:	4651      	mov	r1, sl
10011cd0:	f003 ffbc 	bl	10015c4c <__aeabi_fsub>
10011cd4:	0040      	lsls	r0, r0, #1
10011cd6:	0840      	lsrs	r0, r0, #1
10011cd8:	f005 ffcc 	bl	10017c74 <__aeabi_f2d>
10011cdc:	4a39      	ldr	r2, [pc, #228]	; (10011dc4 <inv_filter_correction_angle+0x1e8>)
10011cde:	4b3a      	ldr	r3, [pc, #232]	; (10011dc8 <inv_filter_correction_angle+0x1ec>)
10011ce0:	f003 fa08 	bl	100150f4 <__aeabi_dcmpgt>
10011ce4:	2800      	cmp	r0, #0
10011ce6:	d026      	beq.n	10011d36 <inv_filter_correction_angle+0x15a>
10011ce8:	23b8      	movs	r3, #184	; 0xb8
10011cea:	2100      	movs	r1, #0
10011cec:	58e0      	ldr	r0, [r4, r3]
10011cee:	f003 fa21 	bl	10015134 <__aeabi_fcmpeq>
10011cf2:	2800      	cmp	r0, #0
10011cf4:	d01f      	beq.n	10011d36 <inv_filter_correction_angle+0x15a>
10011cf6:	464b      	mov	r3, r9
10011cf8:	2b01      	cmp	r3, #1
10011cfa:	d11c      	bne.n	10011d36 <inv_filter_correction_angle+0x15a>
10011cfc:	22c8      	movs	r2, #200	; 0xc8
10011cfe:	331c      	adds	r3, #28
10011d00:	33ff      	adds	r3, #255	; 0xff
10011d02:	50e2      	str	r2, [r4, r3]
10011d04:	1c30      	adds	r0, r6, #0
10011d06:	f005 ffb5 	bl	10017c74 <__aeabi_f2d>
10011d0a:	2200      	movs	r2, #0
10011d0c:	4b2f      	ldr	r3, [pc, #188]	; (10011dcc <inv_filter_correction_angle+0x1f0>)
10011d0e:	f004 fd0f 	bl	10016730 <__aeabi_ddiv>
10011d12:	1c04      	adds	r4, r0, #0
10011d14:	1c38      	adds	r0, r7, #0
10011d16:	1c0d      	adds	r5, r1, #0
10011d18:	f005 ff32 	bl	10017b80 <__aeabi_i2d>
10011d1c:	1c02      	adds	r2, r0, #0
10011d1e:	1c0b      	adds	r3, r1, #0
10011d20:	1c20      	adds	r0, r4, #0
10011d22:	1c29      	adds	r1, r5, #0
10011d24:	f005 f928 	bl	10016f78 <__aeabi_dmul>
10011d28:	2200      	movs	r2, #0
10011d2a:	4b29      	ldr	r3, [pc, #164]	; (10011dd0 <inv_filter_correction_angle+0x1f4>)
10011d2c:	f004 fd00 	bl	10016730 <__aeabi_ddiv>
10011d30:	f005 fff4 	bl	10017d1c <__aeabi_d2f>
10011d34:	1c05      	adds	r5, r0, #0
10011d36:	1c28      	adds	r0, r5, #0
10011d38:	bc1c      	pop	{r2, r3, r4}
10011d3a:	4690      	mov	r8, r2
10011d3c:	4699      	mov	r9, r3
10011d3e:	46a2      	mov	sl, r4
10011d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d42:	4924      	ldr	r1, [pc, #144]	; (10011dd4 <inv_filter_correction_angle+0x1f8>)
10011d44:	f003 fca4 	bl	10015690 <__aeabi_fdiv>
10011d48:	1c29      	adds	r1, r5, #0
10011d4a:	f003 fe6b 	bl	10015a24 <__aeabi_fmul>
10011d4e:	4919      	ldr	r1, [pc, #100]	; (10011db4 <inv_filter_correction_angle+0x1d8>)
10011d50:	f003 fc9e 	bl	10015690 <__aeabi_fdiv>
10011d54:	1c05      	adds	r5, r0, #0
10011d56:	e7a9      	b.n	10011cac <inv_filter_correction_angle+0xd0>
10011d58:	4652      	mov	r2, sl
10011d5a:	4650      	mov	r0, sl
10011d5c:	50e2      	str	r2, [r4, r3]
10011d5e:	e7b6      	b.n	10011cce <inv_filter_correction_angle+0xf2>
10011d60:	1c35      	adds	r5, r6, #0
10011d62:	e7ac      	b.n	10011cbe <inv_filter_correction_angle+0xe2>
10011d64:	2300      	movs	r3, #0
10011d66:	4699      	mov	r9, r3
10011d68:	e74a      	b.n	10011c00 <inv_filter_correction_angle+0x24>
10011d6a:	2300      	movs	r3, #0
10011d6c:	4913      	ldr	r1, [pc, #76]	; (10011dbc <inv_filter_correction_angle+0x1e0>)
10011d6e:	5163      	str	r3, [r4, r5]
10011d70:	1c30      	adds	r0, r6, #0
10011d72:	f003 fc8d 	bl	10015690 <__aeabi_fdiv>
10011d76:	1c05      	adds	r5, r0, #0
10011d78:	1c38      	adds	r0, r7, #0
10011d7a:	f004 f927 	bl	10015fcc <__aeabi_i2f>
10011d7e:	1c01      	adds	r1, r0, #0
10011d80:	1c28      	adds	r0, r5, #0
10011d82:	f003 fe4f 	bl	10015a24 <__aeabi_fmul>
10011d86:	490b      	ldr	r1, [pc, #44]	; (10011db4 <inv_filter_correction_angle+0x1d8>)
10011d88:	f003 fc82 	bl	10015690 <__aeabi_fdiv>
10011d8c:	1c05      	adds	r5, r0, #0
10011d8e:	2394      	movs	r3, #148	; 0x94
10011d90:	005b      	lsls	r3, r3, #1
10011d92:	58e3      	ldr	r3, [r4, r3]
10011d94:	2b01      	cmp	r3, #1
10011d96:	d000      	beq.n	10011d9a <inv_filter_correction_angle+0x1be>
10011d98:	e788      	b.n	10011cac <inv_filter_correction_angle+0xd0>
10011d9a:	2500      	movs	r5, #0
10011d9c:	e786      	b.n	10011cac <inv_filter_correction_angle+0xd0>
10011d9e:	46c0      	nop			; (mov r8, r8)
10011da0:	1001e7fc 	.word	0x1001e7fc
10011da4:	41200000 	.word	0x41200000
10011da8:	1001e740 	.word	0x1001e740
10011dac:	000003e7 	.word	0x000003e7
10011db0:	42480000 	.word	0x42480000
10011db4:	459c4000 	.word	0x459c4000
10011db8:	ffffec78 	.word	0xffffec78
10011dbc:	43c80000 	.word	0x43c80000
10011dc0:	000f4240 	.word	0x000f4240
10011dc4:	cac08312 	.word	0xcac08312
10011dc8:	3fb645a1 	.word	0x3fb645a1
10011dcc:	40790000 	.word	0x40790000
10011dd0:	40b38800 	.word	0x40b38800
10011dd4:	43480000 	.word	0x43480000

10011dd8 <inv_perform_9x_fusion>:
10011dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011dda:	465f      	mov	r7, fp
10011ddc:	4656      	mov	r6, sl
10011dde:	464d      	mov	r5, r9
10011de0:	4644      	mov	r4, r8
10011de2:	2300      	movs	r3, #0
10011de4:	b4f0      	push	{r4, r5, r6, r7}
10011de6:	b0ab      	sub	sp, #172	; 0xac
10011de8:	9303      	str	r3, [sp, #12]
10011dea:	9304      	str	r3, [sp, #16]
10011dec:	9305      	str	r3, [sp, #20]
10011dee:	4fd3      	ldr	r7, [pc, #844]	; (1001213c <inv_perform_9x_fusion+0x364>)
10011df0:	3321      	adds	r3, #33	; 0x21
10011df2:	33ff      	adds	r3, #255	; 0xff
10011df4:	58fa      	ldr	r2, [r7, r3]
10011df6:	2a03      	cmp	r2, #3
10011df8:	d100      	bne.n	10011dfc <inv_perform_9x_fusion+0x24>
10011dfa:	e19b      	b.n	10012134 <inv_perform_9x_fusion+0x35c>
10011dfc:	2400      	movs	r4, #0
10011dfe:	9001      	str	r0, [sp, #4]
10011e00:	1c23      	adds	r3, r4, #0
10011e02:	33a8      	adds	r3, #168	; 0xa8
10011e04:	58f8      	ldr	r0, [r7, r3]
10011e06:	f004 f8e1 	bl	10015fcc <__aeabi_i2f>
10011e0a:	21c2      	movs	r1, #194	; 0xc2
10011e0c:	0589      	lsls	r1, r1, #22
10011e0e:	f003 fe09 	bl	10015a24 <__aeabi_fmul>
10011e12:	221c      	movs	r2, #28
10011e14:	ab02      	add	r3, sp, #8
10011e16:	189b      	adds	r3, r3, r2
10011e18:	5118      	str	r0, [r3, r4]
10011e1a:	3404      	adds	r4, #4
10011e1c:	2c10      	cmp	r4, #16
10011e1e:	d1ef      	bne.n	10011e00 <inv_perform_9x_fusion+0x28>
10011e20:	ab1d      	add	r3, sp, #116	; 0x74
10011e22:	1c18      	adds	r0, r3, #0
10011e24:	ac06      	add	r4, sp, #24
10011e26:	469b      	mov	fp, r3
10011e28:	f7f8 fed0 	bl	1000abcc <inv_get_6axis_quaternion>
10011e2c:	1c20      	adds	r0, r4, #0
10011e2e:	f7f8 fe81 	bl	1000ab34 <inv_get_gravity>
10011e32:	1c39      	adds	r1, r7, #0
10011e34:	223c      	movs	r2, #60	; 0x3c
10011e36:	310c      	adds	r1, #12
10011e38:	1c38      	adds	r0, r7, #0
10011e3a:	f006 f951 	bl	100180e0 <memmove>
10011e3e:	1c38      	adds	r0, r7, #0
10011e40:	1c39      	adds	r1, r7, #0
10011e42:	2250      	movs	r2, #80	; 0x50
10011e44:	3158      	adds	r1, #88	; 0x58
10011e46:	3048      	adds	r0, #72	; 0x48
10011e48:	f006 f94a 	bl	100180e0 <memmove>
10011e4c:	1c3b      	adds	r3, r7, #0
10011e4e:	333c      	adds	r3, #60	; 0x3c
10011e50:	cc07      	ldmia	r4!, {r0, r1, r2}
10011e52:	c307      	stmia	r3!, {r0, r1, r2}
10011e54:	1c3b      	adds	r3, r7, #0
10011e56:	465a      	mov	r2, fp
10011e58:	3398      	adds	r3, #152	; 0x98
10011e5a:	ca13      	ldmia	r2!, {r0, r1, r4}
10011e5c:	c313      	stmia	r3!, {r0, r1, r4}
10011e5e:	6812      	ldr	r2, [r2, #0]
10011e60:	601a      	str	r2, [r3, #0]
10011e62:	2392      	movs	r3, #146	; 0x92
10011e64:	005b      	lsls	r3, r3, #1
10011e66:	58f9      	ldr	r1, [r7, r3]
10011e68:	1c4a      	adds	r2, r1, #1
10011e6a:	50fa      	str	r2, [r7, r3]
10011e6c:	2a06      	cmp	r2, #6
10011e6e:	dc00      	bgt.n	10011e72 <inv_perform_9x_fusion+0x9a>
10011e70:	e123      	b.n	100120ba <inv_perform_9x_fusion+0x2e2>
10011e72:	2206      	movs	r2, #6
10011e74:	2500      	movs	r5, #0
10011e76:	50fa      	str	r2, [r7, r3]
10011e78:	9b01      	ldr	r3, [sp, #4]
10011e7a:	006c      	lsls	r4, r5, #1
10011e7c:	33a0      	adds	r3, #160	; 0xa0
10011e7e:	9300      	str	r3, [sp, #0]
10011e80:	4baf      	ldr	r3, [pc, #700]	; (10012140 <inv_perform_9x_fusion+0x368>)
10011e82:	012e      	lsls	r6, r5, #4
10011e84:	469a      	mov	sl, r3
10011e86:	ab21      	add	r3, sp, #132	; 0x84
10011e88:	4699      	mov	r9, r3
10011e8a:	1964      	adds	r4, r4, r5
10011e8c:	3648      	adds	r6, #72	; 0x48
10011e8e:	00a4      	lsls	r4, r4, #2
10011e90:	19be      	adds	r6, r7, r6
10011e92:	193c      	adds	r4, r7, r4
10011e94:	48ab      	ldr	r0, [pc, #684]	; (10012144 <inv_perform_9x_fusion+0x36c>)
10011e96:	1c31      	adds	r1, r6, #0
10011e98:	464a      	mov	r2, r9
10011e9a:	f7f8 f91d 	bl	1000a0d8 <inv_q_mult>
10011e9e:	1c21      	adds	r1, r4, #0
10011ea0:	9800      	ldr	r0, [sp, #0]
10011ea2:	464a      	mov	r2, r9
10011ea4:	f7f8 f9e0 	bl	1000a268 <inv_compass_angle>
10011ea8:	4653      	mov	r3, sl
10011eaa:	4680      	mov	r8, r0
10011eac:	0059      	lsls	r1, r3, #1
10011eae:	0040      	lsls	r0, r0, #1
10011eb0:	0840      	lsrs	r0, r0, #1
10011eb2:	0849      	lsrs	r1, r1, #1
10011eb4:	f003 f944 	bl	10015140 <__aeabi_fcmplt>
10011eb8:	2800      	cmp	r0, #0
10011eba:	d000      	beq.n	10011ebe <inv_perform_9x_fusion+0xe6>
10011ebc:	46c2      	mov	sl, r8
10011ebe:	3501      	adds	r5, #1
10011ec0:	3610      	adds	r6, #16
10011ec2:	340c      	adds	r4, #12
10011ec4:	2d06      	cmp	r5, #6
10011ec6:	d1e5      	bne.n	10011e94 <inv_perform_9x_fusion+0xbc>
10011ec8:	9801      	ldr	r0, [sp, #4]
10011eca:	3018      	adds	r0, #24
10011ecc:	f7f8 f8e0 	bl	1000a090 <inv_get_gyro_sum_of_sqr>
10011ed0:	2398      	movs	r3, #152	; 0x98
10011ed2:	005b      	lsls	r3, r3, #1
10011ed4:	58fb      	ldr	r3, [r7, r3]
10011ed6:	499c      	ldr	r1, [pc, #624]	; (10012148 <inv_perform_9x_fusion+0x370>)
10011ed8:	0982      	lsrs	r2, r0, #6
10011eda:	428b      	cmp	r3, r1
10011edc:	dd00      	ble.n	10011ee0 <inv_perform_9x_fusion+0x108>
10011ede:	1c0b      	adds	r3, r1, #0
10011ee0:	4651      	mov	r1, sl
10011ee2:	9801      	ldr	r0, [sp, #4]
10011ee4:	f7ff fe7a 	bl	10011bdc <inv_filter_correction_angle>
10011ee8:	23ec      	movs	r3, #236	; 0xec
10011eea:	58f9      	ldr	r1, [r7, r3]
10011eec:	f003 fd9a 	bl	10015a24 <__aeabi_fmul>
10011ef0:	23b8      	movs	r3, #184	; 0xb8
10011ef2:	1c3c      	adds	r4, r7, #0
10011ef4:	50f8      	str	r0, [r7, r3]
10011ef6:	a819      	add	r0, sp, #100	; 0x64
10011ef8:	f7f8 fe68 	bl	1000abcc <inv_get_6axis_quaternion>
10011efc:	34fc      	adds	r4, #252	; 0xfc
10011efe:	a819      	add	r0, sp, #100	; 0x64
10011f00:	4649      	mov	r1, r9
10011f02:	f7f8 fc2d 	bl	1000a760 <inv_quaternion_to_rotation>
10011f06:	1c20      	adds	r0, r4, #0
10011f08:	a919      	add	r1, sp, #100	; 0x64
10011f0a:	465a      	mov	r2, fp
10011f0c:	f7f8 f8e4 	bl	1000a0d8 <inv_q_mult>
10011f10:	a819      	add	r0, sp, #100	; 0x64
10011f12:	1c21      	adds	r1, r4, #0
10011f14:	f7f8 fa60 	bl	1000a3d8 <inv_q_invert>
10011f18:	2300      	movs	r3, #0
10011f1a:	469a      	mov	sl, r3
10011f1c:	4653      	mov	r3, sl
10011f1e:	005b      	lsls	r3, r3, #1
10011f20:	4453      	add	r3, sl
10011f22:	444b      	add	r3, r9
10011f24:	4698      	mov	r8, r3
10011f26:	2600      	movs	r6, #0
10011f28:	2400      	movs	r4, #0
10011f2a:	2500      	movs	r5, #0
10011f2c:	4643      	mov	r3, r8
10011f2e:	599b      	ldr	r3, [r3, r6]
10011f30:	4640      	mov	r0, r8
10011f32:	17d9      	asrs	r1, r3, #31
10011f34:	465b      	mov	r3, fp
10011f36:	199b      	adds	r3, r3, r6
10011f38:	685a      	ldr	r2, [r3, #4]
10011f3a:	5980      	ldr	r0, [r0, r6]
10011f3c:	17d3      	asrs	r3, r2, #31
10011f3e:	f003 f94b 	bl	100151d8 <__aeabi_lmul>
10011f42:	3604      	adds	r6, #4
10011f44:	1824      	adds	r4, r4, r0
10011f46:	414d      	adcs	r5, r1
10011f48:	2e0c      	cmp	r6, #12
10011f4a:	d1ef      	bne.n	10011f2c <inv_perform_9x_fusion+0x154>
10011f4c:	4652      	mov	r2, sl
10011f4e:	00ab      	lsls	r3, r5, #2
10011f50:	0fa4      	lsrs	r4, r4, #30
10011f52:	431c      	orrs	r4, r3
10011f54:	ab03      	add	r3, sp, #12
10011f56:	509c      	str	r4, [r3, r2]
10011f58:	2304      	movs	r3, #4
10011f5a:	469c      	mov	ip, r3
10011f5c:	44e2      	add	sl, ip
10011f5e:	4653      	mov	r3, sl
10011f60:	2b0c      	cmp	r3, #12
10011f62:	d1db      	bne.n	10011f1c <inv_perform_9x_fusion+0x144>
10011f64:	2390      	movs	r3, #144	; 0x90
10011f66:	005b      	lsls	r3, r3, #1
10011f68:	58fb      	ldr	r3, [r7, r3]
10011f6a:	2b00      	cmp	r3, #0
10011f6c:	d000      	beq.n	10011f70 <inv_perform_9x_fusion+0x198>
10011f6e:	e0ae      	b.n	100120ce <inv_perform_9x_fusion+0x2f6>
10011f70:	9c05      	ldr	r4, [sp, #20]
10011f72:	4260      	negs	r0, r4
10011f74:	f004 f82a 	bl	10015fcc <__aeabi_i2f>
10011f78:	21c2      	movs	r1, #194	; 0xc2
10011f7a:	0589      	lsls	r1, r1, #22
10011f7c:	f003 fd52 	bl	10015a24 <__aeabi_fmul>
10011f80:	1c06      	adds	r6, r0, #0
10011f82:	f001 fdc5 	bl	10013b10 <cosf>
10011f86:	1c05      	adds	r5, r0, #0
10011f88:	1c30      	adds	r0, r6, #0
10011f8a:	f001 fdff 	bl	10013b8c <sinf>
10011f8e:	1c06      	adds	r6, r0, #0
10011f90:	1c20      	adds	r0, r4, #0
10011f92:	f004 f81b 	bl	10015fcc <__aeabi_i2f>
10011f96:	496d      	ldr	r1, [pc, #436]	; (1001214c <inv_perform_9x_fusion+0x374>)
10011f98:	f003 fb7a 	bl	10015690 <__aeabi_fdiv>
10011f9c:	4680      	mov	r8, r0
10011f9e:	2398      	movs	r3, #152	; 0x98
10011fa0:	9511      	str	r5, [sp, #68]	; 0x44
10011fa2:	2500      	movs	r5, #0
10011fa4:	005b      	lsls	r3, r3, #1
10011fa6:	ac11      	add	r4, sp, #68	; 0x44
10011fa8:	58f8      	ldr	r0, [r7, r3]
10011faa:	4969      	ldr	r1, [pc, #420]	; (10012150 <inv_perform_9x_fusion+0x378>)
10011fac:	6065      	str	r5, [r4, #4]
10011fae:	60a5      	str	r5, [r4, #8]
10011fb0:	60e6      	str	r6, [r4, #12]
10011fb2:	f002 ff89 	bl	10014ec8 <__aeabi_idiv>
10011fb6:	f004 f809 	bl	10015fcc <__aeabi_i2f>
10011fba:	1c06      	adds	r6, r0, #0
10011fbc:	1c31      	adds	r1, r6, #0
10011fbe:	4640      	mov	r0, r8
10011fc0:	f003 fb66 	bl	10015690 <__aeabi_fdiv>
10011fc4:	21fc      	movs	r1, #252	; 0xfc
10011fc6:	0589      	lsls	r1, r1, #22
10011fc8:	f003 fd2c 	bl	10015a24 <__aeabi_fmul>
10011fcc:	f003 ffdc 	bl	10015f88 <__aeabi_f2iz>
10011fd0:	0040      	lsls	r0, r0, #1
10011fd2:	f003 fffb 	bl	10015fcc <__aeabi_i2f>
10011fd6:	495d      	ldr	r1, [pc, #372]	; (1001214c <inv_perform_9x_fusion+0x374>)
10011fd8:	f003 fd24 	bl	10015a24 <__aeabi_fmul>
10011fdc:	1c01      	adds	r1, r0, #0
10011fde:	1c30      	adds	r0, r6, #0
10011fe0:	f003 fd20 	bl	10015a24 <__aeabi_fmul>
10011fe4:	f003 ffd0 	bl	10015f88 <__aeabi_f2iz>
10011fe8:	f003 fff0 	bl	10015fcc <__aeabi_i2f>
10011fec:	21c2      	movs	r1, #194	; 0xc2
10011fee:	0589      	lsls	r1, r1, #22
10011ff0:	f003 fd18 	bl	10015a24 <__aeabi_fmul>
10011ff4:	1c06      	adds	r6, r0, #0
10011ff6:	f001 fd8b 	bl	10013b10 <cosf>
10011ffa:	9015      	str	r0, [sp, #84]	; 0x54
10011ffc:	1c30      	adds	r0, r6, #0
10011ffe:	9516      	str	r5, [sp, #88]	; 0x58
10012000:	9517      	str	r5, [sp, #92]	; 0x5c
10012002:	f001 fdc3 	bl	10013b8c <sinf>
10012006:	1c21      	adds	r1, r4, #0
10012008:	9018      	str	r0, [sp, #96]	; 0x60
1001200a:	aa0d      	add	r2, sp, #52	; 0x34
1001200c:	a809      	add	r0, sp, #36	; 0x24
1001200e:	f7f8 fa17 	bl	1000a440 <inv_q_multf>
10012012:	1c22      	adds	r2, r4, #0
10012014:	a80d      	add	r0, sp, #52	; 0x34
10012016:	a915      	add	r1, sp, #84	; 0x54
10012018:	f7f8 fa12 	bl	1000a440 <inv_q_multf>
1001201c:	23bc      	movs	r3, #188	; 0xbc
1001201e:	9a01      	ldr	r2, [sp, #4]
10012020:	2500      	movs	r5, #0
10012022:	58d3      	ldr	r3, [r2, r3]
10012024:	4698      	mov	r8, r3
10012026:	2b00      	cmp	r3, #0
10012028:	dd16      	ble.n	10012058 <inv_perform_9x_fusion+0x280>
1001202a:	221c      	movs	r2, #28
1001202c:	219d      	movs	r1, #157	; 0x9d
1001202e:	ab02      	add	r3, sp, #8
10012030:	189b      	adds	r3, r3, r2
10012032:	5962      	ldr	r2, [r4, r5]
10012034:	1c2e      	adds	r6, r5, #0
10012036:	515a      	str	r2, [r3, r5]
10012038:	1c10      	adds	r0, r2, #0
1001203a:	05c9      	lsls	r1, r1, #23
1001203c:	f003 fcf2 	bl	10015a24 <__aeabi_fmul>
10012040:	f003 ffa2 	bl	10015f88 <__aeabi_f2iz>
10012044:	36a8      	adds	r6, #168	; 0xa8
10012046:	19be      	adds	r6, r7, r6
10012048:	3504      	adds	r5, #4
1001204a:	6030      	str	r0, [r6, #0]
1001204c:	2d10      	cmp	r5, #16
1001204e:	d1ec      	bne.n	1001202a <inv_perform_9x_fusion+0x252>
10012050:	4643      	mov	r3, r8
10012052:	2b03      	cmp	r3, #3
10012054:	d100      	bne.n	10012058 <inv_perform_9x_fusion+0x280>
10012056:	e07d      	b.n	10012154 <inv_perform_9x_fusion+0x37c>
10012058:	23a8      	movs	r3, #168	; 0xa8
1001205a:	58f8      	ldr	r0, [r7, r3]
1001205c:	4698      	mov	r8, r3
1001205e:	f003 ffb5 	bl	10015fcc <__aeabi_i2f>
10012062:	21c2      	movs	r1, #194	; 0xc2
10012064:	0589      	lsls	r1, r1, #22
10012066:	f003 fcdd 	bl	10015a24 <__aeabi_fmul>
1001206a:	26ac      	movs	r6, #172	; 0xac
1001206c:	900d      	str	r0, [sp, #52]	; 0x34
1001206e:	59b8      	ldr	r0, [r7, r6]
10012070:	f003 ffac 	bl	10015fcc <__aeabi_i2f>
10012074:	21c2      	movs	r1, #194	; 0xc2
10012076:	0589      	lsls	r1, r1, #22
10012078:	f003 fcd4 	bl	10015a24 <__aeabi_fmul>
1001207c:	25b0      	movs	r5, #176	; 0xb0
1001207e:	900e      	str	r0, [sp, #56]	; 0x38
10012080:	5978      	ldr	r0, [r7, r5]
10012082:	f003 ffa3 	bl	10015fcc <__aeabi_i2f>
10012086:	21c2      	movs	r1, #194	; 0xc2
10012088:	0589      	lsls	r1, r1, #22
1001208a:	f003 fccb 	bl	10015a24 <__aeabi_fmul>
1001208e:	24b4      	movs	r4, #180	; 0xb4
10012090:	900f      	str	r0, [sp, #60]	; 0x3c
10012092:	5938      	ldr	r0, [r7, r4]
10012094:	f003 ff9a 	bl	10015fcc <__aeabi_i2f>
10012098:	21c2      	movs	r1, #194	; 0xc2
1001209a:	0589      	lsls	r1, r1, #22
1001209c:	f003 fcc2 	bl	10015a24 <__aeabi_fmul>
100120a0:	2390      	movs	r3, #144	; 0x90
100120a2:	005b      	lsls	r3, r3, #1
100120a4:	58fb      	ldr	r3, [r7, r3]
100120a6:	9010      	str	r0, [sp, #64]	; 0x40
100120a8:	2b00      	cmp	r3, #0
100120aa:	d116      	bne.n	100120da <inv_perform_9x_fusion+0x302>
100120ac:	b02b      	add	sp, #172	; 0xac
100120ae:	bc3c      	pop	{r2, r3, r4, r5}
100120b0:	4690      	mov	r8, r2
100120b2:	4699      	mov	r9, r3
100120b4:	46a2      	mov	sl, r4
100120b6:	46ab      	mov	fp, r5
100120b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120ba:	2505      	movs	r5, #5
100120bc:	1a6d      	subs	r5, r5, r1
100120be:	2d05      	cmp	r5, #5
100120c0:	dc00      	bgt.n	100120c4 <inv_perform_9x_fusion+0x2ec>
100120c2:	e6d9      	b.n	10011e78 <inv_perform_9x_fusion+0xa0>
100120c4:	4b1e      	ldr	r3, [pc, #120]	; (10012140 <inv_perform_9x_fusion+0x368>)
100120c6:	469a      	mov	sl, r3
100120c8:	ab21      	add	r3, sp, #132	; 0x84
100120ca:	4699      	mov	r9, r3
100120cc:	e6fc      	b.n	10011ec8 <inv_perform_9x_fusion+0xf0>
100120ce:	2300      	movs	r3, #0
100120d0:	25fe      	movs	r5, #254	; 0xfe
100120d2:	4698      	mov	r8, r3
100120d4:	1c1e      	adds	r6, r3, #0
100120d6:	05ad      	lsls	r5, r5, #22
100120d8:	e761      	b.n	10011f9e <inv_perform_9x_fusion+0x1c6>
100120da:	23b8      	movs	r3, #184	; 0xb8
100120dc:	21fc      	movs	r1, #252	; 0xfc
100120de:	58f8      	ldr	r0, [r7, r3]
100120e0:	0589      	lsls	r1, r1, #22
100120e2:	f003 fc9f 	bl	10015a24 <__aeabi_fmul>
100120e6:	4681      	mov	r9, r0
100120e8:	f001 fd12 	bl	10013b10 <cosf>
100120ec:	219d      	movs	r1, #157	; 0x9d
100120ee:	05c9      	lsls	r1, r1, #23
100120f0:	f003 fc98 	bl	10015a24 <__aeabi_fmul>
100120f4:	f003 ff48 	bl	10015f88 <__aeabi_f2iz>
100120f8:	4643      	mov	r3, r8
100120fa:	50f8      	str	r0, [r7, r3]
100120fc:	2300      	movs	r3, #0
100120fe:	4648      	mov	r0, r9
10012100:	51bb      	str	r3, [r7, r6]
10012102:	517b      	str	r3, [r7, r5]
10012104:	f001 fd42 	bl	10013b8c <sinf>
10012108:	219d      	movs	r1, #157	; 0x9d
1001210a:	05c9      	lsls	r1, r1, #23
1001210c:	f003 fc8a 	bl	10015a24 <__aeabi_fmul>
10012110:	f003 ff3a 	bl	10015f88 <__aeabi_f2iz>
10012114:	5138      	str	r0, [r7, r4]
10012116:	23c0      	movs	r3, #192	; 0xc0
10012118:	1c38      	adds	r0, r7, #0
1001211a:	9a01      	ldr	r2, [sp, #4]
1001211c:	30a8      	adds	r0, #168	; 0xa8
1001211e:	58d1      	ldr	r1, [r2, r3]
10012120:	f7f8 fcaa 	bl	1000aa78 <inv_set_compass_correction>
10012124:	2290      	movs	r2, #144	; 0x90
10012126:	0052      	lsls	r2, r2, #1
10012128:	58bb      	ldr	r3, [r7, r2]
1001212a:	2b00      	cmp	r3, #0
1001212c:	d0be      	beq.n	100120ac <inv_perform_9x_fusion+0x2d4>
1001212e:	3b01      	subs	r3, #1
10012130:	50bb      	str	r3, [r7, r2]
10012132:	e7bb      	b.n	100120ac <inv_perform_9x_fusion+0x2d4>
10012134:	3a01      	subs	r2, #1
10012136:	50fa      	str	r2, [r7, r3]
10012138:	e7b8      	b.n	100120ac <inv_perform_9x_fusion+0x2d4>
1001213a:	46c0      	nop			; (mov r8, r8)
1001213c:	1001e740 	.word	0x1001e740
10012140:	49742400 	.word	0x49742400
10012144:	1001e7e8 	.word	0x1001e7e8
10012148:	000f4240 	.word	0x000f4240
1001214c:	473702e1 	.word	0x473702e1
10012150:	00001388 	.word	0x00001388
10012154:	f000 ff28 	bl	10012fa8 <inv_get_magnetic_disturbance_state>
10012158:	2800      	cmp	r0, #0
1001215a:	d000      	beq.n	1001215e <inv_perform_9x_fusion+0x386>
1001215c:	e77c      	b.n	10012058 <inv_perform_9x_fusion+0x280>
1001215e:	23b8      	movs	r3, #184	; 0xb8
10012160:	21fc      	movs	r1, #252	; 0xfc
10012162:	58f8      	ldr	r0, [r7, r3]
10012164:	0589      	lsls	r1, r1, #22
10012166:	f003 fc5d 	bl	10015a24 <__aeabi_fmul>
1001216a:	1c05      	adds	r5, r0, #0
1001216c:	f001 fcd0 	bl	10013b10 <cosf>
10012170:	2300      	movs	r3, #0
10012172:	9015      	str	r0, [sp, #84]	; 0x54
10012174:	1c28      	adds	r0, r5, #0
10012176:	9316      	str	r3, [sp, #88]	; 0x58
10012178:	9317      	str	r3, [sp, #92]	; 0x5c
1001217a:	f001 fd07 	bl	10013b8c <sinf>
1001217e:	a915      	add	r1, sp, #84	; 0x54
10012180:	9018      	str	r0, [sp, #96]	; 0x60
10012182:	1c22      	adds	r2, r4, #0
10012184:	a809      	add	r0, sp, #36	; 0x24
10012186:	f7f8 f95b 	bl	1000a440 <inv_q_multf>
1001218a:	1c20      	adds	r0, r4, #0
1001218c:	f7f8 f9f0 	bl	1000a570 <inv_q_normalizef>
10012190:	2500      	movs	r5, #0
10012192:	219d      	movs	r1, #157	; 0x9d
10012194:	1c2e      	adds	r6, r5, #0
10012196:	5960      	ldr	r0, [r4, r5]
10012198:	05c9      	lsls	r1, r1, #23
1001219a:	f003 fc43 	bl	10015a24 <__aeabi_fmul>
1001219e:	f003 fef3 	bl	10015f88 <__aeabi_f2iz>
100121a2:	36a8      	adds	r6, #168	; 0xa8
100121a4:	19be      	adds	r6, r7, r6
100121a6:	3504      	adds	r5, #4
100121a8:	6030      	str	r0, [r6, #0]
100121aa:	2d10      	cmp	r5, #16
100121ac:	d1f1      	bne.n	10012192 <inv_perform_9x_fusion+0x3ba>
100121ae:	e7b2      	b.n	10012116 <inv_perform_9x_fusion+0x33e>

100121b0 <inv_process_9x_sensor_fusion_cb>:
100121b0:	23b8      	movs	r3, #184	; 0xb8
100121b2:	58c2      	ldr	r2, [r0, r3]
100121b4:	3ba8      	subs	r3, #168	; 0xa8
100121b6:	b570      	push	{r4, r5, r6, lr}
100121b8:	4013      	ands	r3, r2
100121ba:	4d24      	ldr	r5, [pc, #144]	; (1001224c <inv_process_9x_sensor_fusion_cb+0x9c>)
100121bc:	d105      	bne.n	100121ca <inv_process_9x_sensor_fusion_cb+0x1a>
100121be:	2290      	movs	r2, #144	; 0x90
100121c0:	2103      	movs	r1, #3
100121c2:	0052      	lsls	r2, r2, #1
100121c4:	50a9      	str	r1, [r5, r2]
100121c6:	3204      	adds	r2, #4
100121c8:	50ab      	str	r3, [r5, r2]
100121ca:	2390      	movs	r3, #144	; 0x90
100121cc:	005b      	lsls	r3, r3, #1
100121ce:	58c2      	ldr	r2, [r0, r3]
100121d0:	3b20      	subs	r3, #32
100121d2:	421a      	tst	r2, r3
100121d4:	d105      	bne.n	100121e2 <inv_process_9x_sensor_fusion_cb+0x32>
100121d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
100121d8:	421a      	tst	r2, r3
100121da:	d02b      	beq.n	10012234 <inv_process_9x_sensor_fusion_cb+0x84>
100121dc:	6f42      	ldr	r2, [r0, #116]	; 0x74
100121de:	421a      	tst	r2, r3
100121e0:	d028      	beq.n	10012234 <inv_process_9x_sensor_fusion_cb+0x84>
100121e2:	239a      	movs	r3, #154	; 0x9a
100121e4:	005b      	lsls	r3, r3, #1
100121e6:	58eb      	ldr	r3, [r5, r3]
100121e8:	1c04      	adds	r4, r0, #0
100121ea:	2b00      	cmp	r3, #0
100121ec:	d010      	beq.n	10012210 <inv_process_9x_sensor_fusion_cb+0x60>
100121ee:	22c4      	movs	r2, #196	; 0xc4
100121f0:	23c0      	movs	r3, #192	; 0xc0
100121f2:	21fa      	movs	r1, #250	; 0xfa
100121f4:	58c3      	ldr	r3, [r0, r3]
100121f6:	5880      	ldr	r0, [r0, r2]
100121f8:	0089      	lsls	r1, r1, #2
100121fa:	1a18      	subs	r0, r3, r0
100121fc:	f002 fdda 	bl	10014db4 <__aeabi_uidiv>
10012200:	2398      	movs	r3, #152	; 0x98
10012202:	005b      	lsls	r3, r3, #1
10012204:	50e8      	str	r0, [r5, r3]
10012206:	1c20      	adds	r0, r4, #0
10012208:	f7ff fde6 	bl	10011dd8 <inv_perform_9x_fusion>
1001220c:	2000      	movs	r0, #0
1001220e:	bd70      	pop	{r4, r5, r6, pc}
10012210:	22b0      	movs	r2, #176	; 0xb0
10012212:	490f      	ldr	r1, [pc, #60]	; (10012250 <inv_process_9x_sensor_fusion_cb+0xa0>)
10012214:	5882      	ldr	r2, [r0, r2]
10012216:	428a      	cmp	r2, r1
10012218:	dc14      	bgt.n	10012244 <inv_process_9x_sensor_fusion_cb+0x94>
1001221a:	2096      	movs	r0, #150	; 0x96
1001221c:	0040      	lsls	r0, r0, #1
1001221e:	582e      	ldr	r6, [r5, r0]
10012220:	46b4      	mov	ip, r6
10012222:	4462      	add	r2, ip
10012224:	502a      	str	r2, [r5, r0]
10012226:	428a      	cmp	r2, r1
10012228:	ddf0      	ble.n	1001220c <inv_process_9x_sensor_fusion_cb+0x5c>
1001222a:	2198      	movs	r1, #152	; 0x98
1001222c:	0049      	lsls	r1, r1, #1
1001222e:	506a      	str	r2, [r5, r1]
10012230:	502b      	str	r3, [r5, r0]
10012232:	e7e8      	b.n	10012206 <inv_process_9x_sensor_fusion_cb+0x56>
10012234:	2390      	movs	r3, #144	; 0x90
10012236:	2203      	movs	r2, #3
10012238:	005b      	lsls	r3, r3, #1
1001223a:	50ea      	str	r2, [r5, r3]
1001223c:	2200      	movs	r2, #0
1001223e:	3304      	adds	r3, #4
10012240:	50ea      	str	r2, [r5, r3]
10012242:	e7e3      	b.n	1001220c <inv_process_9x_sensor_fusion_cb+0x5c>
10012244:	2398      	movs	r3, #152	; 0x98
10012246:	005b      	lsls	r3, r3, #1
10012248:	50ea      	str	r2, [r5, r3]
1001224a:	e7dc      	b.n	10012206 <inv_process_9x_sensor_fusion_cb+0x56>
1001224c:	1001e740 	.word	0x1001e740
10012250:	00004e1f 	.word	0x00004e1f

10012254 <inv_init_9x_fusion>:
10012254:	229c      	movs	r2, #156	; 0x9c
10012256:	b510      	push	{r4, lr}
10012258:	4c0d      	ldr	r4, [pc, #52]	; (10012290 <inv_init_9x_fusion+0x3c>)
1001225a:	2100      	movs	r1, #0
1001225c:	1c20      	adds	r0, r4, #0
1001225e:	0052      	lsls	r2, r2, #1
10012260:	f005 ff53 	bl	1001810a <memset>
10012264:	2380      	movs	r3, #128	; 0x80
10012266:	22fc      	movs	r2, #252	; 0xfc
10012268:	1c20      	adds	r0, r4, #0
1001226a:	05db      	lsls	r3, r3, #23
1001226c:	50a3      	str	r3, [r4, r2]
1001226e:	30a8      	adds	r0, #168	; 0xa8
10012270:	3a54      	subs	r2, #84	; 0x54
10012272:	2100      	movs	r1, #0
10012274:	50a3      	str	r3, [r4, r2]
10012276:	f7f8 fbff 	bl	1000aa78 <inv_set_compass_correction>
1001227a:	22fa      	movs	r2, #250	; 0xfa
1001227c:	238e      	movs	r3, #142	; 0x8e
1001227e:	0092      	lsls	r2, r2, #2
10012280:	005b      	lsls	r3, r3, #1
10012282:	50e2      	str	r2, [r4, r3]
10012284:	22fe      	movs	r2, #254	; 0xfe
10012286:	3b30      	subs	r3, #48	; 0x30
10012288:	0592      	lsls	r2, r2, #22
1001228a:	50e2      	str	r2, [r4, r3]
1001228c:	bd10      	pop	{r4, pc}
1001228e:	46c0      	nop			; (mov r8, r8)
10012290:	1001e740 	.word	0x1001e740

10012294 <inv_9x_fusion_set_mag_fb>:
10012294:	23ec      	movs	r3, #236	; 0xec
10012296:	4a02      	ldr	r2, [pc, #8]	; (100122a0 <inv_9x_fusion_set_mag_fb+0xc>)
10012298:	50d0      	str	r0, [r2, r3]
1001229a:	2000      	movs	r0, #0
1001229c:	4770      	bx	lr
1001229e:	46c0      	nop			; (mov r8, r8)
100122a0:	1001e740 	.word	0x1001e740

100122a4 <inv_9x_fusion_enable_jitter_reduction>:
100122a4:	2394      	movs	r3, #148	; 0x94
100122a6:	4a02      	ldr	r2, [pc, #8]	; (100122b0 <inv_9x_fusion_enable_jitter_reduction+0xc>)
100122a8:	005b      	lsls	r3, r3, #1
100122aa:	50d0      	str	r0, [r2, r3]
100122ac:	2000      	movs	r0, #0
100122ae:	4770      	bx	lr
100122b0:	1001e740 	.word	0x1001e740

100122b4 <inv_9x_fusion_use_timestamps>:
100122b4:	239a      	movs	r3, #154	; 0x9a
100122b6:	4a02      	ldr	r2, [pc, #8]	; (100122c0 <inv_9x_fusion_use_timestamps+0xc>)
100122b8:	005b      	lsls	r3, r3, #1
100122ba:	50d0      	str	r0, [r2, r3]
100122bc:	2000      	movs	r0, #0
100122be:	4770      	bx	lr
100122c0:	1001e740 	.word	0x1001e740

100122c4 <inv_stop_9x_sensor_fusion>:
100122c4:	b508      	push	{r3, lr}
100122c6:	4802      	ldr	r0, [pc, #8]	; (100122d0 <inv_stop_9x_sensor_fusion+0xc>)
100122c8:	f7f7 fe0e 	bl	10009ee8 <inv_unregister_data_cb>
100122cc:	bd08      	pop	{r3, pc}
100122ce:	46c0      	nop			; (mov r8, r8)
100122d0:	100121b1 	.word	0x100121b1

100122d4 <inv_enable_9x_sensor_fusion>:
100122d4:	b508      	push	{r3, lr}
100122d6:	f7ff ffbd 	bl	10012254 <inv_init_9x_fusion>
100122da:	2194      	movs	r1, #148	; 0x94
100122dc:	2200      	movs	r2, #0
100122de:	4b04      	ldr	r3, [pc, #16]	; (100122f0 <inv_enable_9x_sensor_fusion+0x1c>)
100122e0:	0049      	lsls	r1, r1, #1
100122e2:	505a      	str	r2, [r3, r1]
100122e4:	4803      	ldr	r0, [pc, #12]	; (100122f4 <inv_enable_9x_sensor_fusion+0x20>)
100122e6:	310c      	adds	r1, #12
100122e8:	505a      	str	r2, [r3, r1]
100122ea:	f7f8 fcf9 	bl	1000ace0 <inv_register_mpl_start_notification>
100122ee:	bd08      	pop	{r3, pc}
100122f0:	1001e740 	.word	0x1001e740
100122f4:	10011bc9 	.word	0x10011bc9

100122f8 <inv_disable_9x_sensor_fusion>:
100122f8:	b508      	push	{r3, lr}
100122fa:	4802      	ldr	r0, [pc, #8]	; (10012304 <inv_disable_9x_sensor_fusion+0xc>)
100122fc:	f7f8 fcc0 	bl	1000ac80 <inv_unregister_mpl_start_notification>
10012300:	bd08      	pop	{r3, pc}
10012302:	46c0      	nop			; (mov r8, r8)
10012304:	10011bc9 	.word	0x10011bc9

10012308 <inv_start_gyro_tc>:
10012308:	b508      	push	{r3, lr}
1001230a:	4803      	ldr	r0, [pc, #12]	; (10012318 <inv_start_gyro_tc+0x10>)
1001230c:	2196      	movs	r1, #150	; 0x96
1001230e:	2208      	movs	r2, #8
10012310:	f7f7 fd6c 	bl	10009dec <inv_register_data_cb>
10012314:	bd08      	pop	{r3, pc}
10012316:	46c0      	nop			; (mov r8, r8)
10012318:	1001231d 	.word	0x1001231d

1001231c <inv_gtc_data_cb>:
1001231c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001231e:	4644      	mov	r4, r8
10012320:	465f      	mov	r7, fp
10012322:	4656      	mov	r6, sl
10012324:	464d      	mov	r5, r9
10012326:	b4f0      	push	{r4, r5, r6, r7}
10012328:	b0b9      	sub	sp, #228	; 0xe4
1001232a:	1c04      	adds	r4, r0, #0
1001232c:	a927      	add	r1, sp, #156	; 0x9c
1001232e:	a829      	add	r0, sp, #164	; 0xa4
10012330:	f7f7 fd46 	bl	10009dc0 <inv_get_gyro_bias>
10012334:	a828      	add	r0, sp, #160	; 0xa0
10012336:	f7f8 fbc9 	bl	1000aacc <inv_get_motion_state>
1001233a:	2802      	cmp	r0, #2
1001233c:	d012      	beq.n	10012364 <inv_gtc_data_cb+0x48>
1001233e:	23e4      	movs	r3, #228	; 0xe4
10012340:	4db4      	ldr	r5, [pc, #720]	; (10012614 <inv_gtc_data_cb+0x2f8>)
10012342:	58e4      	ldr	r4, [r4, r3]
10012344:	33cc      	adds	r3, #204	; 0xcc
10012346:	5ceb      	ldrb	r3, [r5, r3]
10012348:	9a27      	ldr	r2, [sp, #156]	; 0x9c
1001234a:	2b00      	cmp	r3, #0
1001234c:	d002      	beq.n	10012354 <inv_gtc_data_cb+0x38>
1001234e:	1aa4      	subs	r4, r4, r2
10012350:	d000      	beq.n	10012354 <inv_gtc_data_cb+0x38>
10012352:	e128      	b.n	100125a6 <inv_gtc_data_cb+0x28a>
10012354:	2000      	movs	r0, #0
10012356:	b039      	add	sp, #228	; 0xe4
10012358:	bc3c      	pop	{r2, r3, r4, r5}
1001235a:	4690      	mov	r8, r2
1001235c:	4699      	mov	r9, r3
1001235e:	46a2      	mov	sl, r4
10012360:	46ab      	mov	fp, r5
10012362:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012364:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012366:	2b03      	cmp	r3, #3
10012368:	d1f4      	bne.n	10012354 <inv_gtc_data_cb+0x38>
1001236a:	f7f7 fd1b 	bl	10009da4 <inv_get_gyro_bias_tc_set>
1001236e:	2800      	cmp	r0, #0
10012370:	d0f0      	beq.n	10012354 <inv_gtc_data_cb+0x38>
10012372:	4ba8      	ldr	r3, [pc, #672]	; (10012614 <inv_gtc_data_cb+0x2f8>)
10012374:	9e27      	ldr	r6, [sp, #156]	; 0x9c
10012376:	4698      	mov	r8, r3
10012378:	23da      	movs	r3, #218	; 0xda
1001237a:	4642      	mov	r2, r8
1001237c:	005b      	lsls	r3, r3, #1
1001237e:	58d0      	ldr	r0, [r2, r3]
10012380:	3304      	adds	r3, #4
10012382:	58d3      	ldr	r3, [r2, r3]
10012384:	1a34      	subs	r4, r6, r0
10012386:	2105      	movs	r1, #5
10012388:	1a18      	subs	r0, r3, r0
1001238a:	f002 fd9d 	bl	10014ec8 <__aeabi_idiv>
1001238e:	1c01      	adds	r1, r0, #0
10012390:	1c20      	adds	r0, r4, #0
10012392:	f002 fd99 	bl	10014ec8 <__aeabi_idiv>
10012396:	b2c3      	uxtb	r3, r0
10012398:	2b04      	cmp	r3, #4
1001239a:	d8db      	bhi.n	10012354 <inv_gtc_data_cb+0x38>
1001239c:	24ff      	movs	r4, #255	; 0xff
1001239e:	2554      	movs	r5, #84	; 0x54
100123a0:	4643      	mov	r3, r8
100123a2:	4004      	ands	r4, r0
100123a4:	4365      	muls	r5, r4
100123a6:	195f      	adds	r7, r3, r5
100123a8:	1c3a      	adds	r2, r7, #0
100123aa:	3250      	adds	r2, #80	; 0x50
100123ac:	7813      	ldrb	r3, [r2, #0]
100123ae:	2b05      	cmp	r3, #5
100123b0:	d100      	bne.n	100123b4 <inv_gtc_data_cb+0x98>
100123b2:	e1d3      	b.n	1001275c <inv_gtc_data_cb+0x440>
100123b4:	1c59      	adds	r1, r3, #1
100123b6:	7011      	strb	r1, [r2, #0]
100123b8:	0062      	lsls	r2, r4, #1
100123ba:	1914      	adds	r4, r2, r4
100123bc:	00e2      	lsls	r2, r4, #3
100123be:	1b14      	subs	r4, r2, r4
100123c0:	18e3      	adds	r3, r4, r3
100123c2:	1c1a      	adds	r2, r3, #0
100123c4:	4641      	mov	r1, r8
100123c6:	320e      	adds	r2, #14
100123c8:	0092      	lsls	r2, r2, #2
100123ca:	4442      	add	r2, r8
100123cc:	9829      	ldr	r0, [sp, #164]	; 0xa4
100123ce:	6056      	str	r6, [r2, #4]
100123d0:	009a      	lsls	r2, r3, #2
100123d2:	5088      	str	r0, [r1, r2]
100123d4:	1d1a      	adds	r2, r3, #4
100123d6:	992a      	ldr	r1, [sp, #168]	; 0xa8
100123d8:	0092      	lsls	r2, r2, #2
100123da:	4442      	add	r2, r8
100123dc:	6051      	str	r1, [r2, #4]
100123de:	4642      	mov	r2, r8
100123e0:	330a      	adds	r3, #10
100123e2:	992b      	ldr	r1, [sp, #172]	; 0xac
100123e4:	009b      	lsls	r3, r3, #2
100123e6:	50d1      	str	r1, [r2, r3]
100123e8:	2300      	movs	r3, #0
100123ea:	932c      	str	r3, [sp, #176]	; 0xb0
100123ec:	932d      	str	r3, [sp, #180]	; 0xb4
100123ee:	932e      	str	r3, [sp, #184]	; 0xb8
100123f0:	932f      	str	r3, [sp, #188]	; 0xbc
100123f2:	9330      	str	r3, [sp, #192]	; 0xc0
100123f4:	9331      	str	r3, [sp, #196]	; 0xc4
100123f6:	9332      	str	r3, [sp, #200]	; 0xc8
100123f8:	9333      	str	r3, [sp, #204]	; 0xcc
100123fa:	9334      	str	r3, [sp, #208]	; 0xd0
100123fc:	9335      	str	r3, [sp, #212]	; 0xd4
100123fe:	9336      	str	r3, [sp, #216]	; 0xd8
10012400:	9337      	str	r3, [sp, #220]	; 0xdc
10012402:	33c1      	adds	r3, #193	; 0xc1
10012404:	33ff      	adds	r3, #255	; 0xff
10012406:	5cd3      	ldrb	r3, [r2, r3]
10012408:	2b01      	cmp	r3, #1
1001240a:	d1a3      	bne.n	10012354 <inv_gtc_data_cb+0x38>
1001240c:	33b8      	adds	r3, #184	; 0xb8
1001240e:	33ff      	adds	r3, #255	; 0xff
10012410:	58d3      	ldr	r3, [r2, r3]
10012412:	921a      	str	r2, [sp, #104]	; 0x68
10012414:	469a      	mov	sl, r3
10012416:	23da      	movs	r3, #218	; 0xda
10012418:	005b      	lsls	r3, r3, #1
1001241a:	58d3      	ldr	r3, [r2, r3]
1001241c:	931c      	str	r3, [sp, #112]	; 0x70
1001241e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10012420:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
10012422:	9312      	str	r3, [sp, #72]	; 0x48
10012424:	9413      	str	r4, [sp, #76]	; 0x4c
10012426:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
10012428:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
1001242a:	9310      	str	r3, [sp, #64]	; 0x40
1001242c:	9411      	str	r4, [sp, #68]	; 0x44
1001242e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10012430:	9c31      	ldr	r4, [sp, #196]	; 0xc4
10012432:	930e      	str	r3, [sp, #56]	; 0x38
10012434:	940f      	str	r4, [sp, #60]	; 0x3c
10012436:	9b32      	ldr	r3, [sp, #200]	; 0xc8
10012438:	9c33      	ldr	r4, [sp, #204]	; 0xcc
1001243a:	9314      	str	r3, [sp, #80]	; 0x50
1001243c:	9415      	str	r4, [sp, #84]	; 0x54
1001243e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10012440:	9c35      	ldr	r4, [sp, #212]	; 0xd4
10012442:	930c      	str	r3, [sp, #48]	; 0x30
10012444:	940d      	str	r4, [sp, #52]	; 0x34
10012446:	9b36      	ldr	r3, [sp, #216]	; 0xd8
10012448:	9c37      	ldr	r4, [sp, #220]	; 0xdc
1001244a:	930a      	str	r3, [sp, #40]	; 0x28
1001244c:	940b      	str	r4, [sp, #44]	; 0x2c
1001244e:	2300      	movs	r3, #0
10012450:	2400      	movs	r4, #0
10012452:	469b      	mov	fp, r3
10012454:	2300      	movs	r3, #0
10012456:	9316      	str	r3, [sp, #88]	; 0x58
10012458:	9417      	str	r4, [sp, #92]	; 0x5c
1001245a:	9324      	str	r3, [sp, #144]	; 0x90
1001245c:	9318      	str	r3, [sp, #96]	; 0x60
1001245e:	4653      	mov	r3, sl
10012460:	9319      	str	r3, [sp, #100]	; 0x64
10012462:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012464:	3350      	adds	r3, #80	; 0x50
10012466:	781b      	ldrb	r3, [r3, #0]
10012468:	931d      	str	r3, [sp, #116]	; 0x74
1001246a:	2b00      	cmp	r3, #0
1001246c:	d100      	bne.n	10012470 <inv_gtc_data_cb+0x154>
1001246e:	e0df      	b.n	10012630 <inv_gtc_data_cb+0x314>
10012470:	445b      	add	r3, fp
10012472:	009b      	lsls	r3, r3, #2
10012474:	4443      	add	r3, r8
10012476:	4699      	mov	r9, r3
10012478:	465b      	mov	r3, fp
1001247a:	9325      	str	r3, [sp, #148]	; 0x94
1001247c:	464b      	mov	r3, r9
1001247e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
10012480:	931b      	str	r3, [sp, #108]	; 0x6c
10012482:	46aa      	mov	sl, r5
10012484:	e00b      	b.n	1001249e <inv_gtc_data_cb+0x182>
10012486:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012488:	454b      	cmp	r3, r9
1001248a:	da01      	bge.n	10012490 <inv_gtc_data_cb+0x174>
1001248c:	464b      	mov	r3, r9
1001248e:	931c      	str	r3, [sp, #112]	; 0x70
10012490:	2304      	movs	r3, #4
10012492:	469c      	mov	ip, r3
10012494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10012496:	44e2      	add	sl, ip
10012498:	459a      	cmp	sl, r3
1001249a:	d100      	bne.n	1001249e <inv_gtc_data_cb+0x182>
1001249c:	e0bc      	b.n	10012618 <inv_gtc_data_cb+0x2fc>
1001249e:	4653      	mov	r3, sl
100124a0:	681b      	ldr	r3, [r3, #0]
100124a2:	9304      	str	r3, [sp, #16]
100124a4:	4653      	mov	r3, sl
100124a6:	681b      	ldr	r3, [r3, #0]
100124a8:	17db      	asrs	r3, r3, #31
100124aa:	9305      	str	r3, [sp, #20]
100124ac:	9804      	ldr	r0, [sp, #16]
100124ae:	9905      	ldr	r1, [sp, #20]
100124b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100124b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100124b4:	1812      	adds	r2, r2, r0
100124b6:	414b      	adcs	r3, r1
100124b8:	9212      	str	r2, [sp, #72]	; 0x48
100124ba:	9313      	str	r3, [sp, #76]	; 0x4c
100124bc:	4653      	mov	r3, sl
100124be:	695b      	ldr	r3, [r3, #20]
100124c0:	9306      	str	r3, [sp, #24]
100124c2:	4653      	mov	r3, sl
100124c4:	695b      	ldr	r3, [r3, #20]
100124c6:	17db      	asrs	r3, r3, #31
100124c8:	9307      	str	r3, [sp, #28]
100124ca:	9806      	ldr	r0, [sp, #24]
100124cc:	9907      	ldr	r1, [sp, #28]
100124ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
100124d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
100124d2:	1812      	adds	r2, r2, r0
100124d4:	414b      	adcs	r3, r1
100124d6:	9210      	str	r2, [sp, #64]	; 0x40
100124d8:	9311      	str	r3, [sp, #68]	; 0x44
100124da:	4653      	mov	r3, sl
100124dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100124de:	9308      	str	r3, [sp, #32]
100124e0:	4653      	mov	r3, sl
100124e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100124e4:	17db      	asrs	r3, r3, #31
100124e6:	9309      	str	r3, [sp, #36]	; 0x24
100124e8:	9808      	ldr	r0, [sp, #32]
100124ea:	9909      	ldr	r1, [sp, #36]	; 0x24
100124ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100124ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100124f0:	1812      	adds	r2, r2, r0
100124f2:	414b      	adcs	r3, r1
100124f4:	9804      	ldr	r0, [sp, #16]
100124f6:	9905      	ldr	r1, [sp, #20]
100124f8:	920e      	str	r2, [sp, #56]	; 0x38
100124fa:	930f      	str	r3, [sp, #60]	; 0x3c
100124fc:	4653      	mov	r3, sl
100124fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10012500:	4699      	mov	r9, r3
10012502:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012504:	464a      	mov	r2, r9
10012506:	444b      	add	r3, r9
10012508:	9318      	str	r3, [sp, #96]	; 0x60
1001250a:	464b      	mov	r3, r9
1001250c:	17db      	asrs	r3, r3, #31
1001250e:	469b      	mov	fp, r3
10012510:	f002 fe62 	bl	100151d8 <__aeabi_lmul>
10012514:	040b      	lsls	r3, r1, #16
10012516:	0c02      	lsrs	r2, r0, #16
10012518:	431a      	orrs	r2, r3
1001251a:	140b      	asrs	r3, r1, #16
1001251c:	9200      	str	r2, [sp, #0]
1001251e:	9301      	str	r3, [sp, #4]
10012520:	9800      	ldr	r0, [sp, #0]
10012522:	9901      	ldr	r1, [sp, #4]
10012524:	9a14      	ldr	r2, [sp, #80]	; 0x50
10012526:	9b15      	ldr	r3, [sp, #84]	; 0x54
10012528:	1812      	adds	r2, r2, r0
1001252a:	414b      	adcs	r3, r1
1001252c:	9806      	ldr	r0, [sp, #24]
1001252e:	9907      	ldr	r1, [sp, #28]
10012530:	9214      	str	r2, [sp, #80]	; 0x50
10012532:	9315      	str	r3, [sp, #84]	; 0x54
10012534:	464a      	mov	r2, r9
10012536:	465b      	mov	r3, fp
10012538:	f002 fe4e 	bl	100151d8 <__aeabi_lmul>
1001253c:	040b      	lsls	r3, r1, #16
1001253e:	0c02      	lsrs	r2, r0, #16
10012540:	431a      	orrs	r2, r3
10012542:	140b      	asrs	r3, r1, #16
10012544:	9202      	str	r2, [sp, #8]
10012546:	9303      	str	r3, [sp, #12]
10012548:	9802      	ldr	r0, [sp, #8]
1001254a:	9903      	ldr	r1, [sp, #12]
1001254c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001254e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012550:	1812      	adds	r2, r2, r0
10012552:	414b      	adcs	r3, r1
10012554:	9808      	ldr	r0, [sp, #32]
10012556:	9909      	ldr	r1, [sp, #36]	; 0x24
10012558:	920c      	str	r2, [sp, #48]	; 0x30
1001255a:	930d      	str	r3, [sp, #52]	; 0x34
1001255c:	464a      	mov	r2, r9
1001255e:	465b      	mov	r3, fp
10012560:	f002 fe3a 	bl	100151d8 <__aeabi_lmul>
10012564:	040b      	lsls	r3, r1, #16
10012566:	0c06      	lsrs	r6, r0, #16
10012568:	431e      	orrs	r6, r3
1001256a:	140f      	asrs	r7, r1, #16
1001256c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001256e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012570:	1992      	adds	r2, r2, r6
10012572:	417b      	adcs	r3, r7
10012574:	4648      	mov	r0, r9
10012576:	920a      	str	r2, [sp, #40]	; 0x28
10012578:	930b      	str	r3, [sp, #44]	; 0x2c
1001257a:	4659      	mov	r1, fp
1001257c:	464a      	mov	r2, r9
1001257e:	465b      	mov	r3, fp
10012580:	f002 fe2a 	bl	100151d8 <__aeabi_lmul>
10012584:	040b      	lsls	r3, r1, #16
10012586:	0c04      	lsrs	r4, r0, #16
10012588:	431c      	orrs	r4, r3
1001258a:	140d      	asrs	r5, r1, #16
1001258c:	9a16      	ldr	r2, [sp, #88]	; 0x58
1001258e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10012590:	1912      	adds	r2, r2, r4
10012592:	416b      	adcs	r3, r5
10012594:	9216      	str	r2, [sp, #88]	; 0x58
10012596:	9317      	str	r3, [sp, #92]	; 0x5c
10012598:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001259a:	4599      	cmp	r9, r3
1001259c:	db00      	blt.n	100125a0 <inv_gtc_data_cb+0x284>
1001259e:	e772      	b.n	10012486 <inv_gtc_data_cb+0x16a>
100125a0:	464b      	mov	r3, r9
100125a2:	9319      	str	r3, [sp, #100]	; 0x64
100125a4:	e774      	b.n	10012490 <inv_gtc_data_cb+0x174>
100125a6:	23d2      	movs	r3, #210	; 0xd2
100125a8:	005b      	lsls	r3, r3, #1
100125aa:	58ea      	ldr	r2, [r5, r3]
100125ac:	17e6      	asrs	r6, r4, #31
100125ae:	17d3      	asrs	r3, r2, #31
100125b0:	1c20      	adds	r0, r4, #0
100125b2:	1c31      	adds	r1, r6, #0
100125b4:	f002 fe10 	bl	100151d8 <__aeabi_lmul>
100125b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
100125ba:	0409      	lsls	r1, r1, #16
100125bc:	469c      	mov	ip, r3
100125be:	9300      	str	r3, [sp, #0]
100125c0:	23d4      	movs	r3, #212	; 0xd4
100125c2:	0c00      	lsrs	r0, r0, #16
100125c4:	005b      	lsls	r3, r3, #1
100125c6:	58ea      	ldr	r2, [r5, r3]
100125c8:	4308      	orrs	r0, r1
100125ca:	4460      	add	r0, ip
100125cc:	9029      	str	r0, [sp, #164]	; 0xa4
100125ce:	17d3      	asrs	r3, r2, #31
100125d0:	1c20      	adds	r0, r4, #0
100125d2:	1c31      	adds	r1, r6, #0
100125d4:	f002 fe00 	bl	100151d8 <__aeabi_lmul>
100125d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
100125da:	0409      	lsls	r1, r1, #16
100125dc:	469c      	mov	ip, r3
100125de:	9300      	str	r3, [sp, #0]
100125e0:	23d6      	movs	r3, #214	; 0xd6
100125e2:	0c00      	lsrs	r0, r0, #16
100125e4:	005b      	lsls	r3, r3, #1
100125e6:	58ea      	ldr	r2, [r5, r3]
100125e8:	4308      	orrs	r0, r1
100125ea:	4460      	add	r0, ip
100125ec:	902a      	str	r0, [sp, #168]	; 0xa8
100125ee:	17d3      	asrs	r3, r2, #31
100125f0:	1c20      	adds	r0, r4, #0
100125f2:	1c31      	adds	r1, r6, #0
100125f4:	f002 fdf0 	bl	100151d8 <__aeabi_lmul>
100125f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
100125fa:	0409      	lsls	r1, r1, #16
100125fc:	469c      	mov	ip, r3
100125fe:	0c00      	lsrs	r0, r0, #16
10012600:	4308      	orrs	r0, r1
10012602:	4460      	add	r0, ip
10012604:	902b      	str	r0, [sp, #172]	; 0xac
10012606:	2103      	movs	r1, #3
10012608:	a829      	add	r0, sp, #164	; 0xa4
1001260a:	9300      	str	r3, [sp, #0]
1001260c:	f7f7 fb80 	bl	10009d10 <inv_set_gyro_bias>
10012610:	e6a0      	b.n	10012354 <inv_gtc_data_cb+0x38>
10012612:	46c0      	nop			; (mov r8, r8)
10012614:	1001cfe8 	.word	0x1001cfe8
10012618:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001261a:	9b25      	ldr	r3, [sp, #148]	; 0x94
1001261c:	4694      	mov	ip, r2
1001261e:	469b      	mov	fp, r3
10012620:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10012622:	9620      	str	r6, [sp, #128]	; 0x80
10012624:	9721      	str	r7, [sp, #132]	; 0x84
10012626:	4463      	add	r3, ip
10012628:	9422      	str	r4, [sp, #136]	; 0x88
1001262a:	9523      	str	r5, [sp, #140]	; 0x8c
1001262c:	b2db      	uxtb	r3, r3
1001262e:	9324      	str	r3, [sp, #144]	; 0x90
10012630:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012632:	3354      	adds	r3, #84	; 0x54
10012634:	931a      	str	r3, [sp, #104]	; 0x68
10012636:	2315      	movs	r3, #21
10012638:	469c      	mov	ip, r3
1001263a:	44e3      	add	fp, ip
1001263c:	465b      	mov	r3, fp
1001263e:	2b69      	cmp	r3, #105	; 0x69
10012640:	d000      	beq.n	10012644 <inv_gtc_data_cb+0x328>
10012642:	e70e      	b.n	10012462 <inv_gtc_data_cb+0x146>
10012644:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012646:	4641      	mov	r1, r8
10012648:	4699      	mov	r9, r3
1001264a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001264c:	469a      	mov	sl, r3
1001264e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012650:	9c13      	ldr	r4, [sp, #76]	; 0x4c
10012652:	4652      	mov	r2, sl
10012654:	932c      	str	r3, [sp, #176]	; 0xb0
10012656:	942d      	str	r4, [sp, #180]	; 0xb4
10012658:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001265a:	9c11      	ldr	r4, [sp, #68]	; 0x44
1001265c:	932e      	str	r3, [sp, #184]	; 0xb8
1001265e:	942f      	str	r4, [sp, #188]	; 0xbc
10012660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012662:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10012664:	9330      	str	r3, [sp, #192]	; 0xc0
10012666:	9431      	str	r4, [sp, #196]	; 0xc4
10012668:	9b14      	ldr	r3, [sp, #80]	; 0x50
1001266a:	9c15      	ldr	r4, [sp, #84]	; 0x54
1001266c:	9332      	str	r3, [sp, #200]	; 0xc8
1001266e:	9433      	str	r4, [sp, #204]	; 0xcc
10012670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012672:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10012674:	9334      	str	r3, [sp, #208]	; 0xd0
10012676:	9435      	str	r4, [sp, #212]	; 0xd4
10012678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001267a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001267c:	9336      	str	r3, [sp, #216]	; 0xd8
1001267e:	9437      	str	r4, [sp, #220]	; 0xdc
10012680:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012682:	1a9b      	subs	r3, r3, r2
10012684:	22de      	movs	r2, #222	; 0xde
10012686:	0052      	lsls	r2, r2, #1
10012688:	588a      	ldr	r2, [r1, r2]
1001268a:	4293      	cmp	r3, r2
1001268c:	da00      	bge.n	10012690 <inv_gtc_data_cb+0x374>
1001268e:	e661      	b.n	10012354 <inv_gtc_data_cb+0x38>
10012690:	9816      	ldr	r0, [sp, #88]	; 0x58
10012692:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012694:	464b      	mov	r3, r9
10012696:	17db      	asrs	r3, r3, #31
10012698:	1c1e      	adds	r6, r3, #0
1001269a:	9304      	str	r3, [sp, #16]
1001269c:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001269e:	2300      	movs	r3, #0
100126a0:	f002 fd9a 	bl	100151d8 <__aeabi_lmul>
100126a4:	1c04      	adds	r4, r0, #0
100126a6:	1c0d      	adds	r5, r1, #0
100126a8:	1c33      	adds	r3, r6, #0
100126aa:	1c31      	adds	r1, r6, #0
100126ac:	4648      	mov	r0, r9
100126ae:	464a      	mov	r2, r9
100126b0:	9400      	str	r4, [sp, #0]
100126b2:	9501      	str	r5, [sp, #4]
100126b4:	f002 fd90 	bl	100151d8 <__aeabi_lmul>
100126b8:	040b      	lsls	r3, r1, #16
100126ba:	0c06      	lsrs	r6, r0, #16
100126bc:	431e      	orrs	r6, r3
100126be:	23d2      	movs	r3, #210	; 0xd2
100126c0:	005b      	lsls	r3, r3, #1
100126c2:	4443      	add	r3, r8
100126c4:	469b      	mov	fp, r3
100126c6:	2300      	movs	r3, #0
100126c8:	469a      	mov	sl, r3
100126ca:	1c23      	adds	r3, r4, #0
100126cc:	1c2c      	adds	r4, r5, #0
100126ce:	140f      	asrs	r7, r1, #16
100126d0:	1b9b      	subs	r3, r3, r6
100126d2:	41bc      	sbcs	r4, r7
100126d4:	9602      	str	r6, [sp, #8]
100126d6:	9703      	str	r7, [sp, #12]
100126d8:	9306      	str	r3, [sp, #24]
100126da:	9407      	str	r4, [sp, #28]
100126dc:	ab32      	add	r3, sp, #200	; 0xc8
100126de:	4453      	add	r3, sl
100126e0:	6818      	ldr	r0, [r3, #0]
100126e2:	6859      	ldr	r1, [r3, #4]
100126e4:	ab2c      	add	r3, sp, #176	; 0xb0
100126e6:	4453      	add	r3, sl
100126e8:	681e      	ldr	r6, [r3, #0]
100126ea:	685f      	ldr	r7, [r3, #4]
100126ec:	9a02      	ldr	r2, [sp, #8]
100126ee:	9b00      	ldr	r3, [sp, #0]
100126f0:	4293      	cmp	r3, r2
100126f2:	d02e      	beq.n	10012752 <inv_gtc_data_cb+0x436>
100126f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
100126f6:	2300      	movs	r3, #0
100126f8:	f002 fd6e 	bl	100151d8 <__aeabi_lmul>
100126fc:	464a      	mov	r2, r9
100126fe:	1c04      	adds	r4, r0, #0
10012700:	1c0d      	adds	r5, r1, #0
10012702:	9b04      	ldr	r3, [sp, #16]
10012704:	1c30      	adds	r0, r6, #0
10012706:	1c39      	adds	r1, r7, #0
10012708:	f002 fd66 	bl	100151d8 <__aeabi_lmul>
1001270c:	040b      	lsls	r3, r1, #16
1001270e:	0c02      	lsrs	r2, r0, #16
10012710:	431a      	orrs	r2, r3
10012712:	140b      	asrs	r3, r1, #16
10012714:	921e      	str	r2, [sp, #120]	; 0x78
10012716:	931f      	str	r3, [sp, #124]	; 0x7c
10012718:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1001271a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1001271c:	1aa4      	subs	r4, r4, r2
1001271e:	419d      	sbcs	r5, r3
10012720:	0c23      	lsrs	r3, r4, #16
10012722:	0429      	lsls	r1, r5, #16
10012724:	4319      	orrs	r1, r3
10012726:	0420      	lsls	r0, r4, #16
10012728:	9a06      	ldr	r2, [sp, #24]
1001272a:	9b07      	ldr	r3, [sp, #28]
1001272c:	f002 fd30 	bl	10015190 <__aeabi_ldivmod>
10012730:	465b      	mov	r3, fp
10012732:	6018      	str	r0, [r3, #0]
10012734:	2308      	movs	r3, #8
10012736:	469c      	mov	ip, r3
10012738:	3b04      	subs	r3, #4
1001273a:	44e2      	add	sl, ip
1001273c:	469c      	mov	ip, r3
1001273e:	4653      	mov	r3, sl
10012740:	44e3      	add	fp, ip
10012742:	2b18      	cmp	r3, #24
10012744:	d1ca      	bne.n	100126dc <inv_gtc_data_cb+0x3c0>
10012746:	2201      	movs	r2, #1
10012748:	4641      	mov	r1, r8
1001274a:	3399      	adds	r3, #153	; 0x99
1001274c:	33ff      	adds	r3, #255	; 0xff
1001274e:	54ca      	strb	r2, [r1, r3]
10012750:	e600      	b.n	10012354 <inv_gtc_data_cb+0x38>
10012752:	9b01      	ldr	r3, [sp, #4]
10012754:	9a03      	ldr	r2, [sp, #12]
10012756:	4293      	cmp	r3, r2
10012758:	d1cc      	bne.n	100126f4 <inv_gtc_data_cb+0x3d8>
1001275a:	e7eb      	b.n	10012734 <inv_gtc_data_cb+0x418>
1001275c:	4643      	mov	r3, r8
1001275e:	1958      	adds	r0, r3, r5
10012760:	1959      	adds	r1, r3, r5
10012762:	3140      	adds	r1, #64	; 0x40
10012764:	2210      	movs	r2, #16
10012766:	303c      	adds	r0, #60	; 0x3c
10012768:	f005 fcba 	bl	100180e0 <memmove>
1001276c:	1d29      	adds	r1, r5, #4
1001276e:	4441      	add	r1, r8
10012770:	2210      	movs	r2, #16
10012772:	1c38      	adds	r0, r7, #0
10012774:	f005 fcb4 	bl	100180e0 <memmove>
10012778:	4643      	mov	r3, r8
1001277a:	1958      	adds	r0, r3, r5
1001277c:	1959      	adds	r1, r3, r5
1001277e:	3118      	adds	r1, #24
10012780:	2210      	movs	r2, #16
10012782:	3014      	adds	r0, #20
10012784:	f005 fcac 	bl	100180e0 <memmove>
10012788:	1c28      	adds	r0, r5, #0
1001278a:	1c29      	adds	r1, r5, #0
1001278c:	3028      	adds	r0, #40	; 0x28
1001278e:	312c      	adds	r1, #44	; 0x2c
10012790:	4440      	add	r0, r8
10012792:	4441      	add	r1, r8
10012794:	2210      	movs	r2, #16
10012796:	f005 fca3 	bl	100180e0 <memmove>
1001279a:	2304      	movs	r3, #4
1001279c:	e60c      	b.n	100123b8 <inv_gtc_data_cb+0x9c>
1001279e:	46c0      	nop			; (mov r8, r8)

100127a0 <inv_gtc_store>:
100127a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100127a2:	4a09      	ldr	r2, [pc, #36]	; (100127c8 <inv_gtc_store+0x28>)
100127a4:	b085      	sub	sp, #20
100127a6:	1c13      	adds	r3, r2, #0
100127a8:	466c      	mov	r4, sp
100127aa:	33a5      	adds	r3, #165	; 0xa5
100127ac:	33ff      	adds	r3, #255	; 0xff
100127ae:	cbe0      	ldmia	r3!, {r5, r6, r7}
100127b0:	c4e0      	stmia	r4!, {r5, r6, r7}
100127b2:	23d8      	movs	r3, #216	; 0xd8
100127b4:	4669      	mov	r1, sp
100127b6:	005b      	lsls	r3, r3, #1
100127b8:	5cd3      	ldrb	r3, [r2, r3]
100127ba:	2210      	movs	r2, #16
100127bc:	730b      	strb	r3, [r1, #12]
100127be:	f005 fc86 	bl	100180ce <memcpy>
100127c2:	2000      	movs	r0, #0
100127c4:	b005      	add	sp, #20
100127c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100127c8:	1001cfe8 	.word	0x1001cfe8

100127cc <inv_gtc_load>:
100127cc:	b570      	push	{r4, r5, r6, lr}
100127ce:	b084      	sub	sp, #16
100127d0:	1c01      	adds	r1, r0, #0
100127d2:	2210      	movs	r2, #16
100127d4:	4668      	mov	r0, sp
100127d6:	f005 fc7a 	bl	100180ce <memcpy>
100127da:	4a07      	ldr	r2, [pc, #28]	; (100127f8 <inv_gtc_load+0x2c>)
100127dc:	4669      	mov	r1, sp
100127de:	1c13      	adds	r3, r2, #0
100127e0:	33a5      	adds	r3, #165	; 0xa5
100127e2:	466c      	mov	r4, sp
100127e4:	33ff      	adds	r3, #255	; 0xff
100127e6:	c961      	ldmia	r1!, {r0, r5, r6}
100127e8:	c361      	stmia	r3!, {r0, r5, r6}
100127ea:	23d8      	movs	r3, #216	; 0xd8
100127ec:	2000      	movs	r0, #0
100127ee:	7b21      	ldrb	r1, [r4, #12]
100127f0:	005b      	lsls	r3, r3, #1
100127f2:	54d1      	strb	r1, [r2, r3]
100127f4:	b004      	add	sp, #16
100127f6:	bd70      	pop	{r4, r5, r6, pc}
100127f8:	1001cfe8 	.word	0x1001cfe8

100127fc <inv_init_gyro_ts>:
100127fc:	22e2      	movs	r2, #226	; 0xe2
100127fe:	b510      	push	{r4, lr}
10012800:	4c0b      	ldr	r4, [pc, #44]	; (10012830 <inv_init_gyro_ts+0x34>)
10012802:	2100      	movs	r1, #0
10012804:	1c20      	adds	r0, r4, #0
10012806:	0052      	lsls	r2, r2, #1
10012808:	f005 fc7f 	bl	1001810a <memset>
1001280c:	23da      	movs	r3, #218	; 0xda
1001280e:	4a09      	ldr	r2, [pc, #36]	; (10012834 <inv_init_gyro_ts+0x38>)
10012810:	005b      	lsls	r3, r3, #1
10012812:	50e2      	str	r2, [r4, r3]
10012814:	22aa      	movs	r2, #170	; 0xaa
10012816:	3304      	adds	r3, #4
10012818:	03d2      	lsls	r2, r2, #15
1001281a:	50e2      	str	r2, [r4, r3]
1001281c:	22a0      	movs	r2, #160	; 0xa0
1001281e:	3304      	adds	r3, #4
10012820:	02d2      	lsls	r2, r2, #11
10012822:	50e2      	str	r2, [r4, r3]
10012824:	2201      	movs	r2, #1
10012826:	3304      	adds	r3, #4
10012828:	2000      	movs	r0, #0
1001282a:	54e2      	strb	r2, [r4, r3]
1001282c:	bd10      	pop	{r4, pc}
1001282e:	46c0      	nop			; (mov r8, r8)
10012830:	1001cfe8 	.word	0x1001cfe8
10012834:	ffd80000 	.word	0xffd80000

10012838 <inv_set_gtc_max_temp>:
10012838:	23dc      	movs	r3, #220	; 0xdc
1001283a:	4a02      	ldr	r2, [pc, #8]	; (10012844 <inv_set_gtc_max_temp+0xc>)
1001283c:	005b      	lsls	r3, r3, #1
1001283e:	50d0      	str	r0, [r2, r3]
10012840:	2000      	movs	r0, #0
10012842:	4770      	bx	lr
10012844:	1001cfe8 	.word	0x1001cfe8

10012848 <inv_set_gtc_min_temp>:
10012848:	23da      	movs	r3, #218	; 0xda
1001284a:	4a02      	ldr	r2, [pc, #8]	; (10012854 <inv_set_gtc_min_temp+0xc>)
1001284c:	005b      	lsls	r3, r3, #1
1001284e:	50d0      	str	r0, [r2, r3]
10012850:	2000      	movs	r0, #0
10012852:	4770      	bx	lr
10012854:	1001cfe8 	.word	0x1001cfe8

10012858 <inv_set_gtc_min_diff>:
10012858:	23de      	movs	r3, #222	; 0xde
1001285a:	4a02      	ldr	r2, [pc, #8]	; (10012864 <inv_set_gtc_min_diff+0xc>)
1001285c:	005b      	lsls	r3, r3, #1
1001285e:	50d0      	str	r0, [r2, r3]
10012860:	2000      	movs	r0, #0
10012862:	4770      	bx	lr
10012864:	1001cfe8 	.word	0x1001cfe8

10012868 <inv_get_gyro_ts>:
10012868:	2800      	cmp	r0, #0
1001286a:	d00e      	beq.n	1001288a <inv_get_gyro_ts+0x22>
1001286c:	22d2      	movs	r2, #210	; 0xd2
1001286e:	4b08      	ldr	r3, [pc, #32]	; (10012890 <inv_get_gyro_ts+0x28>)
10012870:	0052      	lsls	r2, r2, #1
10012872:	589a      	ldr	r2, [r3, r2]
10012874:	6002      	str	r2, [r0, #0]
10012876:	22d4      	movs	r2, #212	; 0xd4
10012878:	0052      	lsls	r2, r2, #1
1001287a:	589a      	ldr	r2, [r3, r2]
1001287c:	6042      	str	r2, [r0, #4]
1001287e:	22d6      	movs	r2, #214	; 0xd6
10012880:	0052      	lsls	r2, r2, #1
10012882:	589b      	ldr	r3, [r3, r2]
10012884:	6083      	str	r3, [r0, #8]
10012886:	2000      	movs	r0, #0
10012888:	4770      	bx	lr
1001288a:	2016      	movs	r0, #22
1001288c:	e7fc      	b.n	10012888 <inv_get_gyro_ts+0x20>
1001288e:	46c0      	nop			; (mov r8, r8)
10012890:	1001cfe8 	.word	0x1001cfe8

10012894 <inv_set_gyro_ts>:
10012894:	2024      	movs	r0, #36	; 0x24
10012896:	4770      	bx	lr

10012898 <inv_set_gtc_order>:
10012898:	2324      	movs	r3, #36	; 0x24
1001289a:	2800      	cmp	r0, #0
1001289c:	d101      	bne.n	100128a2 <inv_set_gtc_order+0xa>
1001289e:	1c18      	adds	r0, r3, #0
100128a0:	4770      	bx	lr
100128a2:	339d      	adds	r3, #157	; 0x9d
100128a4:	4a02      	ldr	r2, [pc, #8]	; (100128b0 <inv_set_gtc_order+0x18>)
100128a6:	33ff      	adds	r3, #255	; 0xff
100128a8:	54d0      	strb	r0, [r2, r3]
100128aa:	2300      	movs	r3, #0
100128ac:	e7f7      	b.n	1001289e <inv_set_gtc_order+0x6>
100128ae:	46c0      	nop			; (mov r8, r8)
100128b0:	1001cfe8 	.word	0x1001cfe8

100128b4 <inv_print_gtc_data>:
100128b4:	2000      	movs	r0, #0
100128b6:	4770      	bx	lr

100128b8 <inv_stop_gyro_tc>:
100128b8:	b508      	push	{r3, lr}
100128ba:	4802      	ldr	r0, [pc, #8]	; (100128c4 <inv_stop_gyro_tc+0xc>)
100128bc:	f7f7 fb14 	bl	10009ee8 <inv_unregister_data_cb>
100128c0:	bd08      	pop	{r3, pc}
100128c2:	46c0      	nop			; (mov r8, r8)
100128c4:	1001231d 	.word	0x1001231d

100128c8 <inv_enable_gyro_tc>:
100128c8:	b508      	push	{r3, lr}
100128ca:	f7ff ff97 	bl	100127fc <inv_init_gyro_ts>
100128ce:	239a      	movs	r3, #154	; 0x9a
100128d0:	480a      	ldr	r0, [pc, #40]	; (100128fc <inv_enable_gyro_tc+0x34>)
100128d2:	490b      	ldr	r1, [pc, #44]	; (10012900 <inv_enable_gyro_tc+0x38>)
100128d4:	2210      	movs	r2, #16
100128d6:	005b      	lsls	r3, r3, #1
100128d8:	f7f8 fa3c 	bl	1000ad54 <inv_register_load_store>
100128dc:	2800      	cmp	r0, #0
100128de:	d001      	beq.n	100128e4 <inv_enable_gyro_tc+0x1c>
100128e0:	2001      	movs	r0, #1
100128e2:	bd08      	pop	{r3, pc}
100128e4:	4807      	ldr	r0, [pc, #28]	; (10012904 <inv_enable_gyro_tc+0x3c>)
100128e6:	f7f8 f9fb 	bl	1000ace0 <inv_register_mpl_start_notification>
100128ea:	2800      	cmp	r0, #0
100128ec:	d1f8      	bne.n	100128e0 <inv_enable_gyro_tc+0x18>
100128ee:	23b2      	movs	r3, #178	; 0xb2
100128f0:	2101      	movs	r1, #1
100128f2:	4a05      	ldr	r2, [pc, #20]	; (10012908 <inv_enable_gyro_tc+0x40>)
100128f4:	33ff      	adds	r3, #255	; 0xff
100128f6:	54d1      	strb	r1, [r2, r3]
100128f8:	e7f3      	b.n	100128e2 <inv_enable_gyro_tc+0x1a>
100128fa:	46c0      	nop			; (mov r8, r8)
100128fc:	100127cd 	.word	0x100127cd
10012900:	100127a1 	.word	0x100127a1
10012904:	10012309 	.word	0x10012309
10012908:	1001cfe8 	.word	0x1001cfe8

1001290c <inv_disable_gyro_tc>:
1001290c:	b538      	push	{r3, r4, r5, lr}
1001290e:	24b2      	movs	r4, #178	; 0xb2
10012910:	4d09      	ldr	r5, [pc, #36]	; (10012938 <inv_disable_gyro_tc+0x2c>)
10012912:	34ff      	adds	r4, #255	; 0xff
10012914:	5d2b      	ldrb	r3, [r5, r4]
10012916:	2000      	movs	r0, #0
10012918:	2b00      	cmp	r3, #0
1001291a:	d100      	bne.n	1001291e <inv_disable_gyro_tc+0x12>
1001291c:	bd38      	pop	{r3, r4, r5, pc}
1001291e:	4807      	ldr	r0, [pc, #28]	; (1001293c <inv_disable_gyro_tc+0x30>)
10012920:	f7f7 fae2 	bl	10009ee8 <inv_unregister_data_cb>
10012924:	4806      	ldr	r0, [pc, #24]	; (10012940 <inv_disable_gyro_tc+0x34>)
10012926:	f7f8 f9ab 	bl	1000ac80 <inv_unregister_mpl_start_notification>
1001292a:	1c03      	adds	r3, r0, #0
1001292c:	2001      	movs	r0, #1
1001292e:	2b00      	cmp	r3, #0
10012930:	d1f4      	bne.n	1001291c <inv_disable_gyro_tc+0x10>
10012932:	552b      	strb	r3, [r5, r4]
10012934:	2000      	movs	r0, #0
10012936:	e7f1      	b.n	1001291c <inv_disable_gyro_tc+0x10>
10012938:	1001cfe8 	.word	0x1001cfe8
1001293c:	1001231d 	.word	0x1001231d
10012940:	10012309 	.word	0x10012309

10012944 <inv_start_magnetic_disturbance>:
10012944:	2196      	movs	r1, #150	; 0x96
10012946:	b508      	push	{r3, lr}
10012948:	4802      	ldr	r0, [pc, #8]	; (10012954 <inv_start_magnetic_disturbance+0x10>)
1001294a:	0049      	lsls	r1, r1, #1
1001294c:	2204      	movs	r2, #4
1001294e:	f7f7 fa4d 	bl	10009dec <inv_register_data_cb>
10012952:	bd08      	pop	{r3, pc}
10012954:	10012f71 	.word	0x10012f71

10012958 <inv_set_magnetic_disturbance>:
10012958:	2800      	cmp	r0, #0
1001295a:	dd05      	ble.n	10012968 <inv_set_magnetic_disturbance+0x10>
1001295c:	2284      	movs	r2, #132	; 0x84
1001295e:	2101      	movs	r1, #1
10012960:	4b02      	ldr	r3, [pc, #8]	; (1001296c <inv_set_magnetic_disturbance+0x14>)
10012962:	5099      	str	r1, [r3, r2]
10012964:	3a04      	subs	r2, #4
10012966:	5098      	str	r0, [r3, r2]
10012968:	2000      	movs	r0, #0
1001296a:	4770      	bx	lr
1001296c:	1001d1ac 	.word	0x1001d1ac

10012970 <inv_init_magnetic_disturbance>:
10012970:	b510      	push	{r4, lr}
10012972:	4c0c      	ldr	r4, [pc, #48]	; (100129a4 <inv_init_magnetic_disturbance+0x34>)
10012974:	2100      	movs	r1, #0
10012976:	1c20      	adds	r0, r4, #0
10012978:	22b8      	movs	r2, #184	; 0xb8
1001297a:	f005 fbc6 	bl	1001810a <memset>
1001297e:	4b0a      	ldr	r3, [pc, #40]	; (100129a8 <inv_init_magnetic_disturbance+0x38>)
10012980:	4a0a      	ldr	r2, [pc, #40]	; (100129ac <inv_init_magnetic_disturbance+0x3c>)
10012982:	60e3      	str	r3, [r4, #12]
10012984:	4b0a      	ldr	r3, [pc, #40]	; (100129b0 <inv_init_magnetic_disturbance+0x40>)
10012986:	2000      	movs	r0, #0
10012988:	60a3      	str	r3, [r4, #8]
1001298a:	4b0a      	ldr	r3, [pc, #40]	; (100129b4 <inv_init_magnetic_disturbance+0x44>)
1001298c:	6023      	str	r3, [r4, #0]
1001298e:	4b0a      	ldr	r3, [pc, #40]	; (100129b8 <inv_init_magnetic_disturbance+0x48>)
10012990:	6063      	str	r3, [r4, #4]
10012992:	2380      	movs	r3, #128	; 0x80
10012994:	05db      	lsls	r3, r3, #23
10012996:	6663      	str	r3, [r4, #100]	; 0x64
10012998:	23fa      	movs	r3, #250	; 0xfa
1001299a:	00db      	lsls	r3, r3, #3
1001299c:	67e3      	str	r3, [r4, #124]	; 0x7c
1001299e:	239c      	movs	r3, #156	; 0x9c
100129a0:	50e2      	str	r2, [r4, r3]
100129a2:	bd10      	pop	{r4, pc}
100129a4:	1001d1ac 	.word	0x1001d1ac
100129a8:	42b40000 	.word	0x42b40000
100129ac:	3e2e147b 	.word	0x3e2e147b
100129b0:	c2b40000 	.word	0xc2b40000
100129b4:	42700000 	.word	0x42700000
100129b8:	41f00000 	.word	0x41f00000

100129bc <inv_stop_magnetic_disturbance>:
100129bc:	b508      	push	{r3, lr}
100129be:	4802      	ldr	r0, [pc, #8]	; (100129c8 <inv_stop_magnetic_disturbance+0xc>)
100129c0:	f7f7 fa92 	bl	10009ee8 <inv_unregister_data_cb>
100129c4:	bd08      	pop	{r3, pc}
100129c6:	46c0      	nop			; (mov r8, r8)
100129c8:	10012f71 	.word	0x10012f71

100129cc <inv_enable_magnetic_disturbance>:
100129cc:	b508      	push	{r3, lr}
100129ce:	f7ff ffcf 	bl	10012970 <inv_init_magnetic_disturbance>
100129d2:	2800      	cmp	r0, #0
100129d4:	d108      	bne.n	100129e8 <inv_enable_magnetic_disturbance+0x1c>
100129d6:	228c      	movs	r2, #140	; 0x8c
100129d8:	2101      	movs	r1, #1
100129da:	4b04      	ldr	r3, [pc, #16]	; (100129ec <inv_enable_magnetic_disturbance+0x20>)
100129dc:	5098      	str	r0, [r3, r2]
100129de:	3a04      	subs	r2, #4
100129e0:	4803      	ldr	r0, [pc, #12]	; (100129f0 <inv_enable_magnetic_disturbance+0x24>)
100129e2:	5099      	str	r1, [r3, r2]
100129e4:	f7f8 f97c 	bl	1000ace0 <inv_register_mpl_start_notification>
100129e8:	bd08      	pop	{r3, pc}
100129ea:	46c0      	nop			; (mov r8, r8)
100129ec:	1001d1ac 	.word	0x1001d1ac
100129f0:	10012945 	.word	0x10012945

100129f4 <inv_disable_magnetic_disturbance>:
100129f4:	b510      	push	{r4, lr}
100129f6:	4c04      	ldr	r4, [pc, #16]	; (10012a08 <inv_disable_magnetic_disturbance+0x14>)
100129f8:	1c20      	adds	r0, r4, #0
100129fa:	f7f7 fa75 	bl	10009ee8 <inv_unregister_data_cb>
100129fe:	1c20      	adds	r0, r4, #0
10012a00:	f7f7 fa72 	bl	10009ee8 <inv_unregister_data_cb>
10012a04:	bd10      	pop	{r4, pc}
10012a06:	46c0      	nop			; (mov r8, r8)
10012a08:	10012f71 	.word	0x10012f71

10012a0c <inv_disable_dip_tracking>:
10012a0c:	2100      	movs	r1, #0
10012a0e:	238c      	movs	r3, #140	; 0x8c
10012a10:	4a01      	ldr	r2, [pc, #4]	; (10012a18 <inv_disable_dip_tracking+0xc>)
10012a12:	2000      	movs	r0, #0
10012a14:	50d1      	str	r1, [r2, r3]
10012a16:	4770      	bx	lr
10012a18:	1001d1ac 	.word	0x1001d1ac

10012a1c <inv_enable_dip_tracking>:
10012a1c:	2101      	movs	r1, #1
10012a1e:	238c      	movs	r3, #140	; 0x8c
10012a20:	4a01      	ldr	r2, [pc, #4]	; (10012a28 <inv_enable_dip_tracking+0xc>)
10012a22:	2000      	movs	r0, #0
10012a24:	50d1      	str	r1, [r2, r3]
10012a26:	4770      	bx	lr
10012a28:	1001d1ac 	.word	0x1001d1ac

10012a2c <inv_track_dip_angle>:
10012a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012a2e:	2800      	cmp	r0, #0
10012a30:	d00b      	beq.n	10012a4a <inv_track_dip_angle+0x1e>
10012a32:	2801      	cmp	r0, #1
10012a34:	d019      	beq.n	10012a6a <inv_track_dip_angle+0x3e>
10012a36:	2101      	movs	r1, #1
10012a38:	2298      	movs	r2, #152	; 0x98
10012a3a:	4b20      	ldr	r3, [pc, #128]	; (10012abc <inv_track_dip_angle+0x90>)
10012a3c:	5099      	str	r1, [r3, r2]
10012a3e:	2200      	movs	r2, #0
10012a40:	318b      	adds	r1, #139	; 0x8b
10012a42:	505a      	str	r2, [r3, r1]
10012a44:	3104      	adds	r1, #4
10012a46:	505a      	str	r2, [r3, r1]
10012a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012a4a:	22a0      	movs	r2, #160	; 0xa0
10012a4c:	4b1b      	ldr	r3, [pc, #108]	; (10012abc <inv_track_dip_angle+0x90>)
10012a4e:	5099      	str	r1, [r3, r2]
10012a50:	3204      	adds	r2, #4
10012a52:	5099      	str	r1, [r3, r2]
10012a54:	2100      	movs	r1, #0
10012a56:	3204      	adds	r2, #4
10012a58:	5099      	str	r1, [r3, r2]
10012a5a:	2101      	movs	r1, #1
10012a5c:	3a14      	subs	r2, #20
10012a5e:	5098      	str	r0, [r3, r2]
10012a60:	3a04      	subs	r2, #4
10012a62:	5099      	str	r1, [r3, r2]
10012a64:	3208      	adds	r2, #8
10012a66:	5098      	str	r0, [r3, r2]
10012a68:	e7ee      	b.n	10012a48 <inv_track_dip_angle+0x1c>
10012a6a:	23a0      	movs	r3, #160	; 0xa0
10012a6c:	4d13      	ldr	r5, [pc, #76]	; (10012abc <inv_track_dip_angle+0x90>)
10012a6e:	1c08      	adds	r0, r1, #0
10012a70:	1c0c      	adds	r4, r1, #0
10012a72:	58e9      	ldr	r1, [r5, r3]
10012a74:	f003 f8ea 	bl	10015c4c <__aeabi_fsub>
10012a78:	239c      	movs	r3, #156	; 0x9c
10012a7a:	0040      	lsls	r0, r0, #1
10012a7c:	0840      	lsrs	r0, r0, #1
10012a7e:	58e9      	ldr	r1, [r5, r3]
10012a80:	f002 fb5e 	bl	10015140 <__aeabi_fcmplt>
10012a84:	2800      	cmp	r0, #0
10012a86:	d014      	beq.n	10012ab2 <inv_track_dip_angle+0x86>
10012a88:	2394      	movs	r3, #148	; 0x94
10012a8a:	27a4      	movs	r7, #164	; 0xa4
10012a8c:	58ea      	ldr	r2, [r5, r3]
10012a8e:	59e9      	ldr	r1, [r5, r7]
10012a90:	1c56      	adds	r6, r2, #1
10012a92:	50ee      	str	r6, [r5, r3]
10012a94:	1c20      	adds	r0, r4, #0
10012a96:	f002 fc85 	bl	100153a4 <__aeabi_fadd>
10012a9a:	51e8      	str	r0, [r5, r7]
10012a9c:	2e31      	cmp	r6, #49	; 0x31
10012a9e:	ddd3      	ble.n	10012a48 <inv_track_dip_angle+0x1c>
10012aa0:	2390      	movs	r3, #144	; 0x90
10012aa2:	2202      	movs	r2, #2
10012aa4:	4906      	ldr	r1, [pc, #24]	; (10012ac0 <inv_track_dip_angle+0x94>)
10012aa6:	50ea      	str	r2, [r5, r3]
10012aa8:	f002 fdf2 	bl	10015690 <__aeabi_fdiv>
10012aac:	23a8      	movs	r3, #168	; 0xa8
10012aae:	50e8      	str	r0, [r5, r3]
10012ab0:	e7ca      	b.n	10012a48 <inv_track_dip_angle+0x1c>
10012ab2:	2390      	movs	r3, #144	; 0x90
10012ab4:	50e8      	str	r0, [r5, r3]
10012ab6:	3304      	adds	r3, #4
10012ab8:	50e8      	str	r0, [r5, r3]
10012aba:	e7c5      	b.n	10012a48 <inv_track_dip_angle+0x1c>
10012abc:	1001d1ac 	.word	0x1001d1ac
10012ac0:	42480000 	.word	0x42480000

10012ac4 <ComputeAngleVelocity>:
10012ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ac6:	464f      	mov	r7, r9
10012ac8:	4646      	mov	r6, r8
10012aca:	1c04      	adds	r4, r0, #0
10012acc:	1c0d      	adds	r5, r1, #0
10012ace:	b4c0      	push	{r6, r7}
10012ad0:	b08f      	sub	sp, #60	; 0x3c
10012ad2:	a905      	add	r1, sp, #20
10012ad4:	4691      	mov	r9, r2
10012ad6:	f7f7 fe43 	bl	1000a760 <inv_quaternion_to_rotation>
10012ada:	1c28      	adds	r0, r5, #0
10012adc:	1c21      	adds	r1, r4, #0
10012ade:	aa01      	add	r2, sp, #4
10012ae0:	f7f7 fafa 	bl	1000a0d8 <inv_q_mult>
10012ae4:	1c20      	adds	r0, r4, #0
10012ae6:	1c29      	adds	r1, r5, #0
10012ae8:	f7f7 fc76 	bl	1000a3d8 <inv_q_invert>
10012aec:	2300      	movs	r3, #0
10012aee:	4698      	mov	r8, r3
10012af0:	4643      	mov	r3, r8
10012af2:	005d      	lsls	r5, r3, #1
10012af4:	ab05      	add	r3, sp, #20
10012af6:	469c      	mov	ip, r3
10012af8:	2400      	movs	r4, #0
10012afa:	2600      	movs	r6, #0
10012afc:	2700      	movs	r7, #0
10012afe:	4445      	add	r5, r8
10012b00:	4465      	add	r5, ip
10012b02:	592b      	ldr	r3, [r5, r4]
10012b04:	5928      	ldr	r0, [r5, r4]
10012b06:	17d9      	asrs	r1, r3, #31
10012b08:	ab01      	add	r3, sp, #4
10012b0a:	191b      	adds	r3, r3, r4
10012b0c:	685a      	ldr	r2, [r3, #4]
10012b0e:	3404      	adds	r4, #4
10012b10:	17d3      	asrs	r3, r2, #31
10012b12:	f002 fb61 	bl	100151d8 <__aeabi_lmul>
10012b16:	1836      	adds	r6, r6, r0
10012b18:	414f      	adcs	r7, r1
10012b1a:	2c0c      	cmp	r4, #12
10012b1c:	d1f1      	bne.n	10012b02 <ComputeAngleVelocity+0x3e>
10012b1e:	00bb      	lsls	r3, r7, #2
10012b20:	0fb6      	lsrs	r6, r6, #30
10012b22:	431e      	orrs	r6, r3
10012b24:	4642      	mov	r2, r8
10012b26:	464b      	mov	r3, r9
10012b28:	509e      	str	r6, [r3, r2]
10012b2a:	2304      	movs	r3, #4
10012b2c:	469c      	mov	ip, r3
10012b2e:	44e0      	add	r8, ip
10012b30:	4643      	mov	r3, r8
10012b32:	2b0c      	cmp	r3, #12
10012b34:	d1dc      	bne.n	10012af0 <ComputeAngleVelocity+0x2c>
10012b36:	b00f      	add	sp, #60	; 0x3c
10012b38:	bc0c      	pop	{r2, r3}
10012b3a:	4690      	mov	r8, r2
10012b3c:	4699      	mov	r9, r3
10012b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012b40 <Mag3ofNormalizedLong>:
10012b40:	b570      	push	{r4, r5, r6, lr}
10012b42:	1c04      	adds	r4, r0, #0
10012b44:	6800      	ldr	r0, [r0, #0]
10012b46:	f003 fa41 	bl	10015fcc <__aeabi_i2f>
10012b4a:	1c06      	adds	r6, r0, #0
10012b4c:	6860      	ldr	r0, [r4, #4]
10012b4e:	f003 fa3d 	bl	10015fcc <__aeabi_i2f>
10012b52:	1c05      	adds	r5, r0, #0
10012b54:	68a0      	ldr	r0, [r4, #8]
10012b56:	f003 fa39 	bl	10015fcc <__aeabi_i2f>
10012b5a:	1c31      	adds	r1, r6, #0
10012b5c:	1c04      	adds	r4, r0, #0
10012b5e:	1c30      	adds	r0, r6, #0
10012b60:	f002 ff60 	bl	10015a24 <__aeabi_fmul>
10012b64:	1c29      	adds	r1, r5, #0
10012b66:	1c06      	adds	r6, r0, #0
10012b68:	1c28      	adds	r0, r5, #0
10012b6a:	f002 ff5b 	bl	10015a24 <__aeabi_fmul>
10012b6e:	1c01      	adds	r1, r0, #0
10012b70:	1c30      	adds	r0, r6, #0
10012b72:	f002 fc17 	bl	100153a4 <__aeabi_fadd>
10012b76:	1c21      	adds	r1, r4, #0
10012b78:	1c05      	adds	r5, r0, #0
10012b7a:	1c20      	adds	r0, r4, #0
10012b7c:	f002 ff52 	bl	10015a24 <__aeabi_fmul>
10012b80:	1c01      	adds	r1, r0, #0
10012b82:	1c28      	adds	r0, r5, #0
10012b84:	f002 fc0e 	bl	100153a4 <__aeabi_fadd>
10012b88:	f7fd fea0 	bl	100108cc <sqrtf>
10012b8c:	21de      	movs	r1, #222	; 0xde
10012b8e:	0589      	lsls	r1, r1, #22
10012b90:	f002 ff48 	bl	10015a24 <__aeabi_fmul>
10012b94:	bd70      	pop	{r4, r5, r6, pc}
10012b96:	46c0      	nop			; (mov r8, r8)

10012b98 <MagDisturbSetDisturbance>:
10012b98:	b570      	push	{r4, r5, r6, lr}
10012b9a:	4c1d      	ldr	r4, [pc, #116]	; (10012c10 <MagDisturbSetDisturbance+0x78>)
10012b9c:	1c05      	adds	r5, r0, #0
10012b9e:	1c0e      	adds	r6, r1, #0
10012ba0:	6820      	ldr	r0, [r4, #0]
10012ba2:	1c29      	adds	r1, r5, #0
10012ba4:	f002 facc 	bl	10015140 <__aeabi_fcmplt>
10012ba8:	2800      	cmp	r0, #0
10012baa:	d105      	bne.n	10012bb8 <MagDisturbSetDisturbance+0x20>
10012bac:	1c28      	adds	r0, r5, #0
10012bae:	6861      	ldr	r1, [r4, #4]
10012bb0:	f002 fac6 	bl	10015140 <__aeabi_fcmplt>
10012bb4:	2800      	cmp	r0, #0
10012bb6:	d00f      	beq.n	10012bd8 <MagDisturbSetDisturbance+0x40>
10012bb8:	6f63      	ldr	r3, [r4, #116]	; 0x74
10012bba:	2b00      	cmp	r3, #0
10012bbc:	d011      	beq.n	10012be2 <MagDisturbSetDisturbance+0x4a>
10012bbe:	2301      	movs	r3, #1
10012bc0:	6763      	str	r3, [r4, #116]	; 0x74
10012bc2:	2300      	movs	r3, #0
10012bc4:	67a3      	str	r3, [r4, #120]	; 0x78
10012bc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012bc8:	429a      	cmp	r2, r3
10012bca:	dc04      	bgt.n	10012bd6 <MagDisturbSetDisturbance+0x3e>
10012bcc:	6f63      	ldr	r3, [r4, #116]	; 0x74
10012bce:	2b01      	cmp	r3, #1
10012bd0:	d00d      	beq.n	10012bee <MagDisturbSetDisturbance+0x56>
10012bd2:	2300      	movs	r3, #0
10012bd4:	6763      	str	r3, [r4, #116]	; 0x74
10012bd6:	bd70      	pop	{r4, r5, r6, pc}
10012bd8:	6923      	ldr	r3, [r4, #16]
10012bda:	2b01      	cmp	r3, #1
10012bdc:	d00a      	beq.n	10012bf4 <MagDisturbSetDisturbance+0x5c>
10012bde:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012be0:	e7f1      	b.n	10012bc6 <MagDisturbSetDisturbance+0x2e>
10012be2:	1c20      	adds	r0, r4, #0
10012be4:	6da1      	ldr	r1, [r4, #88]	; 0x58
10012be6:	3018      	adds	r0, #24
10012be8:	f7f7 ff46 	bl	1000aa78 <inv_set_compass_correction>
10012bec:	e7e7      	b.n	10012bbe <MagDisturbSetDisturbance+0x26>
10012bee:	2300      	movs	r3, #0
10012bf0:	65e3      	str	r3, [r4, #92]	; 0x5c
10012bf2:	e7ee      	b.n	10012bd2 <MagDisturbSetDisturbance+0x3a>
10012bf4:	68e0      	ldr	r0, [r4, #12]
10012bf6:	1c31      	adds	r1, r6, #0
10012bf8:	f002 faa2 	bl	10015140 <__aeabi_fcmplt>
10012bfc:	2800      	cmp	r0, #0
10012bfe:	d1db      	bne.n	10012bb8 <MagDisturbSetDisturbance+0x20>
10012c00:	1c30      	adds	r0, r6, #0
10012c02:	68a1      	ldr	r1, [r4, #8]
10012c04:	f002 fa9c 	bl	10015140 <__aeabi_fcmplt>
10012c08:	2800      	cmp	r0, #0
10012c0a:	d1d5      	bne.n	10012bb8 <MagDisturbSetDisturbance+0x20>
10012c0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012c0e:	e7da      	b.n	10012bc6 <MagDisturbSetDisturbance+0x2e>
10012c10:	1001d1ac 	.word	0x1001d1ac

10012c14 <MagDisturbCheckSettling>:
10012c14:	b538      	push	{r3, r4, r5, lr}
10012c16:	1c05      	adds	r5, r0, #0
10012c18:	1c0c      	adds	r4, r1, #0
10012c1a:	f7f7 ff51 	bl	1000aac0 <inv_get_acc_state>
10012c1e:	2800      	cmp	r0, #0
10012c20:	d105      	bne.n	10012c2e <MagDisturbCheckSettling+0x1a>
10012c22:	1c28      	adds	r0, r5, #0
10012c24:	490d      	ldr	r1, [pc, #52]	; (10012c5c <MagDisturbCheckSettling+0x48>)
10012c26:	f002 fa9f 	bl	10015168 <__aeabi_fcmpgt>
10012c2a:	2800      	cmp	r0, #0
10012c2c:	d010      	beq.n	10012c50 <MagDisturbCheckSettling+0x3c>
10012c2e:	2200      	movs	r2, #0
10012c30:	4b0b      	ldr	r3, [pc, #44]	; (10012c60 <MagDisturbCheckSettling+0x4c>)
10012c32:	611a      	str	r2, [r3, #16]
10012c34:	615a      	str	r2, [r3, #20]
10012c36:	695a      	ldr	r2, [r3, #20]
10012c38:	18a1      	adds	r1, r4, r2
10012c3a:	22fa      	movs	r2, #250	; 0xfa
10012c3c:	6159      	str	r1, [r3, #20]
10012c3e:	0052      	lsls	r2, r2, #1
10012c40:	4291      	cmp	r1, r2
10012c42:	dd04      	ble.n	10012c4e <MagDisturbCheckSettling+0x3a>
10012c44:	3af4      	subs	r2, #244	; 0xf4
10012c46:	3aff      	subs	r2, #255	; 0xff
10012c48:	611a      	str	r2, [r3, #16]
10012c4a:	2200      	movs	r2, #0
10012c4c:	615a      	str	r2, [r3, #20]
10012c4e:	bd38      	pop	{r3, r4, r5, pc}
10012c50:	4b03      	ldr	r3, [pc, #12]	; (10012c60 <MagDisturbCheckSettling+0x4c>)
10012c52:	691a      	ldr	r2, [r3, #16]
10012c54:	2a00      	cmp	r2, #0
10012c56:	d1fa      	bne.n	10012c4e <MagDisturbCheckSettling+0x3a>
10012c58:	e7ed      	b.n	10012c36 <MagDisturbCheckSettling+0x22>
10012c5a:	46c0      	nop			; (mov r8, r8)
10012c5c:	461c4000 	.word	0x461c4000
10012c60:	1001d1ac 	.word	0x1001d1ac

10012c64 <inv_check_magnetic_disturbance>:
10012c64:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c66:	465f      	mov	r7, fp
10012c68:	4644      	mov	r4, r8
10012c6a:	4656      	mov	r6, sl
10012c6c:	464d      	mov	r5, r9
10012c6e:	b4f0      	push	{r4, r5, r6, r7}
10012c70:	2400      	movs	r4, #0
10012c72:	2788      	movs	r7, #136	; 0x88
10012c74:	b08d      	sub	sp, #52	; 0x34
10012c76:	9406      	str	r4, [sp, #24]
10012c78:	9407      	str	r4, [sp, #28]
10012c7a:	9408      	str	r4, [sp, #32]
10012c7c:	4cb5      	ldr	r4, [pc, #724]	; (10012f54 <inv_check_magnetic_disturbance+0x2f0>)
10012c7e:	59e7      	ldr	r7, [r4, r7]
10012c80:	2f00      	cmp	r7, #0
10012c82:	d107      	bne.n	10012c94 <inv_check_magnetic_disturbance+0x30>
10012c84:	2000      	movs	r0, #0
10012c86:	b00d      	add	sp, #52	; 0x34
10012c88:	bc3c      	pop	{r2, r3, r4, r5}
10012c8a:	4690      	mov	r8, r2
10012c8c:	4699      	mov	r9, r3
10012c8e:	46a2      	mov	sl, r4
10012c90:	46ab      	mov	fp, r5
10012c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c94:	4699      	mov	r9, r3
10012c96:	4690      	mov	r8, r2
10012c98:	9101      	str	r1, [sp, #4]
10012c9a:	1c05      	adds	r5, r0, #0
10012c9c:	f7f6 ffe2 	bl	10009c64 <inv_get_gyro_on>
10012ca0:	2800      	cmp	r0, #0
10012ca2:	d000      	beq.n	10012ca6 <inv_check_magnetic_disturbance+0x42>
10012ca4:	e120      	b.n	10012ee8 <inv_check_magnetic_disturbance+0x284>
10012ca6:	2780      	movs	r7, #128	; 0x80
10012ca8:	59e3      	ldr	r3, [r4, r7]
10012caa:	2b00      	cmp	r3, #0
10012cac:	dd0f      	ble.n	10012cce <inv_check_magnetic_disturbance+0x6a>
10012cae:	2201      	movs	r2, #1
10012cb0:	2384      	movs	r3, #132	; 0x84
10012cb2:	50e2      	str	r2, [r4, r3]
10012cb4:	f7f6 ffd6 	bl	10009c64 <inv_get_gyro_on>
10012cb8:	2800      	cmp	r0, #0
10012cba:	d000      	beq.n	10012cbe <inv_check_magnetic_disturbance+0x5a>
10012cbc:	e0a9      	b.n	10012e12 <inv_check_magnetic_disturbance+0x1ae>
10012cbe:	59e3      	ldr	r3, [r4, r7]
10012cc0:	1b5b      	subs	r3, r3, r5
10012cc2:	51e3      	str	r3, [r4, r7]
10012cc4:	2b00      	cmp	r3, #0
10012cc6:	dc02      	bgt.n	10012cce <inv_check_magnetic_disturbance+0x6a>
10012cc8:	2200      	movs	r2, #0
10012cca:	2384      	movs	r3, #132	; 0x84
10012ccc:	50e2      	str	r2, [r4, r3]
10012cce:	f7f7 ffb3 	bl	1000ac38 <inv_got_compass_bias>
10012cd2:	2800      	cmp	r0, #0
10012cd4:	d0d6      	beq.n	10012c84 <inv_check_magnetic_disturbance+0x20>
10012cd6:	2600      	movs	r6, #0
10012cd8:	2700      	movs	r7, #0
10012cda:	4643      	mov	r3, r8
10012cdc:	59d8      	ldr	r0, [r3, r7]
10012cde:	f003 f975 	bl	10015fcc <__aeabi_i2f>
10012ce2:	21de      	movs	r1, #222	; 0xde
10012ce4:	0589      	lsls	r1, r1, #22
10012ce6:	f002 fe9d 	bl	10015a24 <__aeabi_fmul>
10012cea:	464b      	mov	r3, r9
10012cec:	4683      	mov	fp, r0
10012cee:	59d8      	ldr	r0, [r3, r7]
10012cf0:	f003 f96c 	bl	10015fcc <__aeabi_i2f>
10012cf4:	1c01      	adds	r1, r0, #0
10012cf6:	4658      	mov	r0, fp
10012cf8:	f002 fe94 	bl	10015a24 <__aeabi_fmul>
10012cfc:	21de      	movs	r1, #222	; 0xde
10012cfe:	0589      	lsls	r1, r1, #22
10012d00:	f002 fe90 	bl	10015a24 <__aeabi_fmul>
10012d04:	1c01      	adds	r1, r0, #0
10012d06:	1c30      	adds	r0, r6, #0
10012d08:	f002 fb4c 	bl	100153a4 <__aeabi_fadd>
10012d0c:	3704      	adds	r7, #4
10012d0e:	1c06      	adds	r6, r0, #0
10012d10:	2f0c      	cmp	r7, #12
10012d12:	d1e2      	bne.n	10012cda <inv_check_magnetic_disturbance+0x76>
10012d14:	4640      	mov	r0, r8
10012d16:	f7ff ff13 	bl	10012b40 <Mag3ofNormalizedLong>
10012d1a:	9000      	str	r0, [sp, #0]
10012d1c:	9900      	ldr	r1, [sp, #0]
10012d1e:	1c30      	adds	r0, r6, #0
10012d20:	f002 fcb6 	bl	10015690 <__aeabi_fdiv>
10012d24:	21fe      	movs	r1, #254	; 0xfe
10012d26:	0589      	lsls	r1, r1, #22
10012d28:	1c06      	adds	r6, r0, #0
10012d2a:	f002 fa1d 	bl	10015168 <__aeabi_fcmpgt>
10012d2e:	2800      	cmp	r0, #0
10012d30:	d067      	beq.n	10012e02 <inv_check_magnetic_disturbance+0x19e>
10012d32:	26fe      	movs	r6, #254	; 0xfe
10012d34:	05b6      	lsls	r6, r6, #22
10012d36:	1c30      	adds	r0, r6, #0
10012d38:	f000 ff66 	bl	10013c08 <acosf>
10012d3c:	238c      	movs	r3, #140	; 0x8c
10012d3e:	58e3      	ldr	r3, [r4, r3]
10012d40:	4680      	mov	r8, r0
10012d42:	2b00      	cmp	r3, #0
10012d44:	d00c      	beq.n	10012d60 <inv_check_magnetic_disturbance+0xfc>
10012d46:	9800      	ldr	r0, [sp, #0]
10012d48:	6821      	ldr	r1, [r4, #0]
10012d4a:	f002 f9f9 	bl	10015140 <__aeabi_fcmplt>
10012d4e:	2800      	cmp	r0, #0
10012d50:	d006      	beq.n	10012d60 <inv_check_magnetic_disturbance+0xfc>
10012d52:	9800      	ldr	r0, [sp, #0]
10012d54:	6861      	ldr	r1, [r4, #4]
10012d56:	f002 fa07 	bl	10015168 <__aeabi_fcmpgt>
10012d5a:	2800      	cmp	r0, #0
10012d5c:	d000      	beq.n	10012d60 <inv_check_magnetic_disturbance+0xfc>
10012d5e:	e0c7      	b.n	10012ef0 <inv_check_magnetic_disturbance+0x28c>
10012d60:	ae09      	add	r6, sp, #36	; 0x24
10012d62:	1c30      	adds	r0, r6, #0
10012d64:	f7f7 feda 	bl	1000ab1c <inv_get_local_field>
10012d68:	1c21      	adds	r1, r4, #0
10012d6a:	1c30      	adds	r0, r6, #0
10012d6c:	31ac      	adds	r1, #172	; 0xac
10012d6e:	220c      	movs	r2, #12
10012d70:	f005 f99e 	bl	100180b0 <memcmp>
10012d74:	2800      	cmp	r0, #0
10012d76:	d157      	bne.n	10012e28 <inv_check_magnetic_disturbance+0x1c4>
10012d78:	2398      	movs	r3, #152	; 0x98
10012d7a:	58e3      	ldr	r3, [r4, r3]
10012d7c:	2b01      	cmp	r3, #1
10012d7e:	d053      	beq.n	10012e28 <inv_check_magnetic_disturbance+0x1c4>
10012d80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10012d82:	2b00      	cmp	r3, #0
10012d84:	d10e      	bne.n	10012da4 <inv_check_magnetic_disturbance+0x140>
10012d86:	2301      	movs	r3, #1
10012d88:	65e3      	str	r3, [r4, #92]	; 0x5c
10012d8a:	3357      	adds	r3, #87	; 0x57
10012d8c:	469a      	mov	sl, r3
10012d8e:	2600      	movs	r6, #0
10012d90:	44a2      	add	sl, r4
10012d92:	1c30      	adds	r0, r6, #0
10012d94:	3018      	adds	r0, #24
10012d96:	1820      	adds	r0, r4, r0
10012d98:	4651      	mov	r1, sl
10012d9a:	3610      	adds	r6, #16
10012d9c:	f7f7 fe80 	bl	1000aaa0 <inv_get_compass_correction>
10012da0:	2e40      	cmp	r6, #64	; 0x40
10012da2:	d1f6      	bne.n	10012d92 <inv_check_magnetic_disturbance+0x12e>
10012da4:	1c26      	adds	r6, r4, #0
10012da6:	9f01      	ldr	r7, [sp, #4]
10012da8:	3664      	adds	r6, #100	; 0x64
10012daa:	aa03      	add	r2, sp, #12
10012dac:	1c38      	adds	r0, r7, #0
10012dae:	1c31      	adds	r1, r6, #0
10012db0:	f7ff fe88 	bl	10012ac4 <ComputeAngleVelocity>
10012db4:	1c31      	adds	r1, r6, #0
10012db6:	1c38      	adds	r0, r7, #0
10012db8:	f7f7 fb0e 	bl	1000a3d8 <inv_q_invert>
10012dbc:	a806      	add	r0, sp, #24
10012dbe:	f7f7 f967 	bl	1000a090 <inv_get_gyro_sum_of_sqr>
10012dc2:	f003 f94b 	bl	1001605c <__aeabi_ui2f>
10012dc6:	21f2      	movs	r1, #242	; 0xf2
10012dc8:	0589      	lsls	r1, r1, #22
10012dca:	f002 fe2b 	bl	10015a24 <__aeabi_fmul>
10012dce:	1c29      	adds	r1, r5, #0
10012dd0:	f7ff ff20 	bl	10012c14 <MagDisturbCheckSettling>
10012dd4:	9800      	ldr	r0, [sp, #0]
10012dd6:	4641      	mov	r1, r8
10012dd8:	f7ff fede 	bl	10012b98 <MagDisturbSetDisturbance>
10012ddc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012dde:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012de0:	4293      	cmp	r3, r2
10012de2:	da01      	bge.n	10012de8 <inv_check_magnetic_disturbance+0x184>
10012de4:	18eb      	adds	r3, r5, r3
10012de6:	67a3      	str	r3, [r4, #120]	; 0x78
10012de8:	6f60      	ldr	r0, [r4, #116]	; 0x74
10012dea:	2800      	cmp	r0, #0
10012dec:	d000      	beq.n	10012df0 <inv_check_magnetic_disturbance+0x18c>
10012dee:	e74a      	b.n	10012c86 <inv_check_magnetic_disturbance+0x22>
10012df0:	6e23      	ldr	r3, [r4, #96]	; 0x60
10012df2:	469c      	mov	ip, r3
10012df4:	23fa      	movs	r3, #250	; 0xfa
10012df6:	4465      	add	r5, ip
10012df8:	009b      	lsls	r3, r3, #2
10012dfa:	429d      	cmp	r5, r3
10012dfc:	dc7e      	bgt.n	10012efc <inv_check_magnetic_disturbance+0x298>
10012dfe:	6625      	str	r5, [r4, #96]	; 0x60
10012e00:	e741      	b.n	10012c86 <inv_check_magnetic_disturbance+0x22>
10012e02:	1c30      	adds	r0, r6, #0
10012e04:	4954      	ldr	r1, [pc, #336]	; (10012f58 <inv_check_magnetic_disturbance+0x2f4>)
10012e06:	f002 f99b 	bl	10015140 <__aeabi_fcmplt>
10012e0a:	2800      	cmp	r0, #0
10012e0c:	d093      	beq.n	10012d36 <inv_check_magnetic_disturbance+0xd2>
10012e0e:	4e52      	ldr	r6, [pc, #328]	; (10012f58 <inv_check_magnetic_disturbance+0x2f4>)
10012e10:	e791      	b.n	10012d36 <inv_check_magnetic_disturbance+0xd2>
10012e12:	a806      	add	r0, sp, #24
10012e14:	f7f7 f93c 	bl	1000a090 <inv_get_gyro_sum_of_sqr>
10012e18:	2390      	movs	r3, #144	; 0x90
10012e1a:	33ff      	adds	r3, #255	; 0xff
10012e1c:	0980      	lsrs	r0, r0, #6
10012e1e:	4298      	cmp	r0, r3
10012e20:	d900      	bls.n	10012e24 <inv_check_magnetic_disturbance+0x1c0>
10012e22:	e74c      	b.n	10012cbe <inv_check_magnetic_disturbance+0x5a>
10012e24:	59e3      	ldr	r3, [r4, r7]
10012e26:	e74d      	b.n	10012cc4 <inv_check_magnetic_disturbance+0x60>
10012e28:	1c23      	adds	r3, r4, #0
10012e2a:	1c32      	adds	r2, r6, #0
10012e2c:	33ac      	adds	r3, #172	; 0xac
10012e2e:	ca83      	ldmia	r2!, {r0, r1, r7}
10012e30:	c383      	stmia	r3!, {r0, r1, r7}
10012e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012e34:	2b00      	cmp	r3, #0
10012e36:	d113      	bne.n	10012e60 <inv_check_magnetic_disturbance+0x1fc>
10012e38:	6873      	ldr	r3, [r6, #4]
10012e3a:	2b00      	cmp	r3, #0
10012e3c:	d110      	bne.n	10012e60 <inv_check_magnetic_disturbance+0x1fc>
10012e3e:	68b3      	ldr	r3, [r6, #8]
10012e40:	4699      	mov	r9, r3
10012e42:	2b00      	cmp	r3, #0
10012e44:	d10c      	bne.n	10012e60 <inv_check_magnetic_disturbance+0x1fc>
10012e46:	2698      	movs	r6, #152	; 0x98
10012e48:	4b44      	ldr	r3, [pc, #272]	; (10012f5c <inv_check_magnetic_disturbance+0x2f8>)
10012e4a:	6023      	str	r3, [r4, #0]
10012e4c:	4b44      	ldr	r3, [pc, #272]	; (10012f60 <inv_check_magnetic_disturbance+0x2fc>)
10012e4e:	6063      	str	r3, [r4, #4]
10012e50:	59a3      	ldr	r3, [r4, r6]
10012e52:	2b01      	cmp	r3, #1
10012e54:	d06b      	beq.n	10012f2e <inv_check_magnetic_disturbance+0x2ca>
10012e56:	4b43      	ldr	r3, [pc, #268]	; (10012f64 <inv_check_magnetic_disturbance+0x300>)
10012e58:	60a3      	str	r3, [r4, #8]
10012e5a:	4b43      	ldr	r3, [pc, #268]	; (10012f68 <inv_check_magnetic_disturbance+0x304>)
10012e5c:	60e3      	str	r3, [r4, #12]
10012e5e:	e78f      	b.n	10012d80 <inv_check_magnetic_disturbance+0x11c>
10012e60:	1c30      	adds	r0, r6, #0
10012e62:	f7ff fe6d 	bl	10012b40 <Mag3ofNormalizedLong>
10012e66:	2100      	movs	r1, #0
10012e68:	4681      	mov	r9, r0
10012e6a:	f002 f963 	bl	10015134 <__aeabi_fcmpeq>
10012e6e:	2800      	cmp	r0, #0
10012e70:	d186      	bne.n	10012d80 <inv_check_magnetic_disturbance+0x11c>
10012e72:	4648      	mov	r0, r9
10012e74:	493d      	ldr	r1, [pc, #244]	; (10012f6c <inv_check_magnetic_disturbance+0x308>)
10012e76:	f002 fee9 	bl	10015c4c <__aeabi_fsub>
10012e7a:	1c01      	adds	r1, r0, #0
10012e7c:	f002 fdd2 	bl	10015a24 <__aeabi_fmul>
10012e80:	f7fd fd24 	bl	100108cc <sqrtf>
10012e84:	4939      	ldr	r1, [pc, #228]	; (10012f6c <inv_check_magnetic_disturbance+0x308>)
10012e86:	6060      	str	r0, [r4, #4]
10012e88:	4648      	mov	r0, r9
10012e8a:	f002 fa8b 	bl	100153a4 <__aeabi_fadd>
10012e8e:	1c01      	adds	r1, r0, #0
10012e90:	f002 fdc8 	bl	10015a24 <__aeabi_fmul>
10012e94:	f7fd fd1a 	bl	100108cc <sqrtf>
10012e98:	6020      	str	r0, [r4, #0]
10012e9a:	68b0      	ldr	r0, [r6, #8]
10012e9c:	f003 f896 	bl	10015fcc <__aeabi_i2f>
10012ea0:	21de      	movs	r1, #222	; 0xde
10012ea2:	0589      	lsls	r1, r1, #22
10012ea4:	f002 fdbe 	bl	10015a24 <__aeabi_fmul>
10012ea8:	4649      	mov	r1, r9
10012eaa:	f002 fbf1 	bl	10015690 <__aeabi_fdiv>
10012eae:	21fe      	movs	r1, #254	; 0xfe
10012eb0:	0589      	lsls	r1, r1, #22
10012eb2:	4681      	mov	r9, r0
10012eb4:	f002 f958 	bl	10015168 <__aeabi_fcmpgt>
10012eb8:	2800      	cmp	r0, #0
10012eba:	d02f      	beq.n	10012f1c <inv_check_magnetic_disturbance+0x2b8>
10012ebc:	23fe      	movs	r3, #254	; 0xfe
10012ebe:	059b      	lsls	r3, r3, #22
10012ec0:	4699      	mov	r9, r3
10012ec2:	269c      	movs	r6, #156	; 0x9c
10012ec4:	4648      	mov	r0, r9
10012ec6:	f000 fe9f 	bl	10013c08 <acosf>
10012eca:	59a1      	ldr	r1, [r4, r6]
10012ecc:	f002 febe 	bl	10015c4c <__aeabi_fsub>
10012ed0:	60a0      	str	r0, [r4, #8]
10012ed2:	4648      	mov	r0, r9
10012ed4:	f000 fe98 	bl	10013c08 <acosf>
10012ed8:	59a1      	ldr	r1, [r4, r6]
10012eda:	f002 fa63 	bl	100153a4 <__aeabi_fadd>
10012ede:	2200      	movs	r2, #0
10012ee0:	238c      	movs	r3, #140	; 0x8c
10012ee2:	60e0      	str	r0, [r4, #12]
10012ee4:	50e2      	str	r2, [r4, r3]
10012ee6:	e74b      	b.n	10012d80 <inv_check_magnetic_disturbance+0x11c>
10012ee8:	a806      	add	r0, sp, #24
10012eea:	f7f7 f849 	bl	10009f80 <inv_get_gyro>
10012eee:	e6da      	b.n	10012ca6 <inv_check_magnetic_disturbance+0x42>
10012ef0:	2390      	movs	r3, #144	; 0x90
10012ef2:	4641      	mov	r1, r8
10012ef4:	58e0      	ldr	r0, [r4, r3]
10012ef6:	f7ff fd99 	bl	10012a2c <inv_track_dip_angle>
10012efa:	e731      	b.n	10012d60 <inv_check_magnetic_disturbance+0xfc>
10012efc:	6620      	str	r0, [r4, #96]	; 0x60
10012efe:	1c21      	adds	r1, r4, #0
10012f00:	1c20      	adds	r0, r4, #0
10012f02:	3128      	adds	r1, #40	; 0x28
10012f04:	2230      	movs	r2, #48	; 0x30
10012f06:	3018      	adds	r0, #24
10012f08:	f005 f8ea 	bl	100180e0 <memmove>
10012f0c:	1c20      	adds	r0, r4, #0
10012f0e:	1c21      	adds	r1, r4, #0
10012f10:	3048      	adds	r0, #72	; 0x48
10012f12:	3158      	adds	r1, #88	; 0x58
10012f14:	f7f7 fdc4 	bl	1000aaa0 <inv_get_compass_correction>
10012f18:	6f60      	ldr	r0, [r4, #116]	; 0x74
10012f1a:	e6b4      	b.n	10012c86 <inv_check_magnetic_disturbance+0x22>
10012f1c:	4648      	mov	r0, r9
10012f1e:	490e      	ldr	r1, [pc, #56]	; (10012f58 <inv_check_magnetic_disturbance+0x2f4>)
10012f20:	f002 f90e 	bl	10015140 <__aeabi_fcmplt>
10012f24:	2800      	cmp	r0, #0
10012f26:	d0cc      	beq.n	10012ec2 <inv_check_magnetic_disturbance+0x25e>
10012f28:	4b0b      	ldr	r3, [pc, #44]	; (10012f58 <inv_check_magnetic_disturbance+0x2f4>)
10012f2a:	4699      	mov	r9, r3
10012f2c:	e7c9      	b.n	10012ec2 <inv_check_magnetic_disturbance+0x25e>
10012f2e:	33a7      	adds	r3, #167	; 0xa7
10012f30:	58e3      	ldr	r3, [r4, r3]
10012f32:	469b      	mov	fp, r3
10012f34:	239c      	movs	r3, #156	; 0x9c
10012f36:	58e3      	ldr	r3, [r4, r3]
10012f38:	4658      	mov	r0, fp
10012f3a:	1c19      	adds	r1, r3, #0
10012f3c:	469a      	mov	sl, r3
10012f3e:	f002 fe85 	bl	10015c4c <__aeabi_fsub>
10012f42:	4651      	mov	r1, sl
10012f44:	60a0      	str	r0, [r4, #8]
10012f46:	4658      	mov	r0, fp
10012f48:	f002 fa2c 	bl	100153a4 <__aeabi_fadd>
10012f4c:	464b      	mov	r3, r9
10012f4e:	60e0      	str	r0, [r4, #12]
10012f50:	51a3      	str	r3, [r4, r6]
10012f52:	e715      	b.n	10012d80 <inv_check_magnetic_disturbance+0x11c>
10012f54:	1001d1ac 	.word	0x1001d1ac
10012f58:	bf800000 	.word	0xbf800000
10012f5c:	42700000 	.word	0x42700000
10012f60:	41f00000 	.word	0x41f00000
10012f64:	c2b40000 	.word	0xc2b40000
10012f68:	42b40000 	.word	0x42b40000
10012f6c:	41200000 	.word	0x41200000

10012f70 <inv_magnetic_disturbance_process>:
10012f70:	b570      	push	{r4, r5, r6, lr}
10012f72:	b088      	sub	sp, #32
10012f74:	1c04      	adds	r4, r0, #0
10012f76:	a801      	add	r0, sp, #4
10012f78:	f7f7 fddc 	bl	1000ab34 <inv_get_gravity>
10012f7c:	22c4      	movs	r2, #196	; 0xc4
10012f7e:	23c0      	movs	r3, #192	; 0xc0
10012f80:	58a5      	ldr	r5, [r4, r2]
10012f82:	58e3      	ldr	r3, [r4, r3]
10012f84:	a804      	add	r0, sp, #16
10012f86:	1b5d      	subs	r5, r3, r5
10012f88:	f7f7 fe20 	bl	1000abcc <inv_get_6axis_quaternion>
10012f8c:	1c22      	adds	r2, r4, #0
10012f8e:	1c06      	adds	r6, r0, #0
10012f90:	32a0      	adds	r2, #160	; 0xa0
10012f92:	a904      	add	r1, sp, #16
10012f94:	ab01      	add	r3, sp, #4
10012f96:	1c28      	adds	r0, r5, #0
10012f98:	f7ff fe64 	bl	10012c64 <inv_check_magnetic_disturbance>
10012f9c:	f7f6 feb0 	bl	10009d00 <inv_set_compass_disturbance>
10012fa0:	1c30      	adds	r0, r6, #0
10012fa2:	b008      	add	sp, #32
10012fa4:	bd70      	pop	{r4, r5, r6, pc}
10012fa6:	46c0      	nop			; (mov r8, r8)

10012fa8 <inv_get_magnetic_disturbance_state>:
10012fa8:	4b01      	ldr	r3, [pc, #4]	; (10012fb0 <inv_get_magnetic_disturbance_state+0x8>)
10012faa:	6f58      	ldr	r0, [r3, #116]	; 0x74
10012fac:	4770      	bx	lr
10012fae:	46c0      	nop			; (mov r8, r8)
10012fb0:	1001d1ac 	.word	0x1001d1ac

10012fb4 <inv_normalize_quat>:
10012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012fb6:	464f      	mov	r7, r9
10012fb8:	4646      	mov	r6, r8
10012fba:	1c04      	adds	r4, r0, #0
10012fbc:	b4c0      	push	{r6, r7}
10012fbe:	6800      	ldr	r0, [r0, #0]
10012fc0:	1c0d      	adds	r5, r1, #0
10012fc2:	f003 f803 	bl	10015fcc <__aeabi_i2f>
10012fc6:	4681      	mov	r9, r0
10012fc8:	6860      	ldr	r0, [r4, #4]
10012fca:	f002 ffff 	bl	10015fcc <__aeabi_i2f>
10012fce:	4680      	mov	r8, r0
10012fd0:	68a0      	ldr	r0, [r4, #8]
10012fd2:	f002 fffb 	bl	10015fcc <__aeabi_i2f>
10012fd6:	1c07      	adds	r7, r0, #0
10012fd8:	68e0      	ldr	r0, [r4, #12]
10012fda:	f002 fff7 	bl	10015fcc <__aeabi_i2f>
10012fde:	4649      	mov	r1, r9
10012fe0:	1c06      	adds	r6, r0, #0
10012fe2:	4648      	mov	r0, r9
10012fe4:	f002 fd1e 	bl	10015a24 <__aeabi_fmul>
10012fe8:	4641      	mov	r1, r8
10012fea:	4681      	mov	r9, r0
10012fec:	4640      	mov	r0, r8
10012fee:	f002 fd19 	bl	10015a24 <__aeabi_fmul>
10012ff2:	1c01      	adds	r1, r0, #0
10012ff4:	4648      	mov	r0, r9
10012ff6:	f002 f9d5 	bl	100153a4 <__aeabi_fadd>
10012ffa:	1c39      	adds	r1, r7, #0
10012ffc:	4680      	mov	r8, r0
10012ffe:	1c38      	adds	r0, r7, #0
10013000:	f002 fd10 	bl	10015a24 <__aeabi_fmul>
10013004:	1c01      	adds	r1, r0, #0
10013006:	4640      	mov	r0, r8
10013008:	f002 f9cc 	bl	100153a4 <__aeabi_fadd>
1001300c:	1c31      	adds	r1, r6, #0
1001300e:	1c07      	adds	r7, r0, #0
10013010:	1c30      	adds	r0, r6, #0
10013012:	f002 fd07 	bl	10015a24 <__aeabi_fmul>
10013016:	1c01      	adds	r1, r0, #0
10013018:	1c38      	adds	r0, r7, #0
1001301a:	f002 f9c3 	bl	100153a4 <__aeabi_fadd>
1001301e:	2100      	movs	r1, #0
10013020:	1c06      	adds	r6, r0, #0
10013022:	f002 f897 	bl	10015154 <__aeabi_fcmple>
10013026:	2800      	cmp	r0, #0
10013028:	d134      	bne.n	10013094 <inv_normalize_quat+0xe0>
1001302a:	1c30      	adds	r0, r6, #0
1001302c:	f7fd fc4e 	bl	100108cc <sqrtf>
10013030:	1c01      	adds	r1, r0, #0
10013032:	20fe      	movs	r0, #254	; 0xfe
10013034:	0580      	lsls	r0, r0, #22
10013036:	f002 fb2b 	bl	10015690 <__aeabi_fdiv>
1001303a:	219d      	movs	r1, #157	; 0x9d
1001303c:	05c9      	lsls	r1, r1, #23
1001303e:	f002 fcf1 	bl	10015a24 <__aeabi_fmul>
10013042:	1c06      	adds	r6, r0, #0
10013044:	6820      	ldr	r0, [r4, #0]
10013046:	f002 ffc1 	bl	10015fcc <__aeabi_i2f>
1001304a:	1c31      	adds	r1, r6, #0
1001304c:	f002 fcea 	bl	10015a24 <__aeabi_fmul>
10013050:	f002 ff9a 	bl	10015f88 <__aeabi_f2iz>
10013054:	6028      	str	r0, [r5, #0]
10013056:	6860      	ldr	r0, [r4, #4]
10013058:	f002 ffb8 	bl	10015fcc <__aeabi_i2f>
1001305c:	1c31      	adds	r1, r6, #0
1001305e:	f002 fce1 	bl	10015a24 <__aeabi_fmul>
10013062:	f002 ff91 	bl	10015f88 <__aeabi_f2iz>
10013066:	6068      	str	r0, [r5, #4]
10013068:	68a0      	ldr	r0, [r4, #8]
1001306a:	f002 ffaf 	bl	10015fcc <__aeabi_i2f>
1001306e:	1c31      	adds	r1, r6, #0
10013070:	f002 fcd8 	bl	10015a24 <__aeabi_fmul>
10013074:	f002 ff88 	bl	10015f88 <__aeabi_f2iz>
10013078:	60a8      	str	r0, [r5, #8]
1001307a:	68e0      	ldr	r0, [r4, #12]
1001307c:	f002 ffa6 	bl	10015fcc <__aeabi_i2f>
10013080:	1c31      	adds	r1, r6, #0
10013082:	f002 fccf 	bl	10015a24 <__aeabi_fmul>
10013086:	f002 ff7f 	bl	10015f88 <__aeabi_f2iz>
1001308a:	60e8      	str	r0, [r5, #12]
1001308c:	bc0c      	pop	{r2, r3}
1001308e:	4690      	mov	r8, r2
10013090:	4699      	mov	r9, r3
10013092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013094:	2380      	movs	r3, #128	; 0x80
10013096:	05db      	lsls	r3, r3, #23
10013098:	602b      	str	r3, [r5, #0]
1001309a:	2300      	movs	r3, #0
1001309c:	606b      	str	r3, [r5, #4]
1001309e:	60ab      	str	r3, [r5, #8]
100130a0:	60eb      	str	r3, [r5, #12]
100130a2:	e7f3      	b.n	1001308c <inv_normalize_quat+0xd8>

100130a4 <inv_start_quaternion>:
100130a4:	b508      	push	{r3, lr}
100130a6:	4b08      	ldr	r3, [pc, #32]	; (100130c8 <inv_start_quaternion+0x24>)
100130a8:	4908      	ldr	r1, [pc, #32]	; (100130cc <inv_start_quaternion+0x28>)
100130aa:	6818      	ldr	r0, [r3, #0]
100130ac:	2208      	movs	r2, #8
100130ae:	f004 ffff 	bl	100180b0 <memcmp>
100130b2:	1c03      	adds	r3, r0, #0
100130b4:	2032      	movs	r0, #50	; 0x32
100130b6:	2b00      	cmp	r3, #0
100130b8:	d000      	beq.n	100130bc <inv_start_quaternion+0x18>
100130ba:	bd08      	pop	{r3, pc}
100130bc:	21c8      	movs	r1, #200	; 0xc8
100130be:	2213      	movs	r2, #19
100130c0:	4803      	ldr	r0, [pc, #12]	; (100130d0 <inv_start_quaternion+0x2c>)
100130c2:	f7f6 fe93 	bl	10009dec <inv_register_data_cb>
100130c6:	e7f8      	b.n	100130ba <inv_start_quaternion+0x16>
100130c8:	1001b3e0 	.word	0x1001b3e0
100130cc:	1001ad64 	.word	0x1001ad64
100130d0:	10013a45 	.word	0x10013a45

100130d4 <inv_generate_gyro_quaternion.part.1>:
100130d4:	b570      	push	{r4, r5, r6, lr}
100130d6:	6986      	ldr	r6, [r0, #24]
100130d8:	b08a      	sub	sp, #40	; 0x28
100130da:	17f3      	asrs	r3, r6, #31
100130dc:	18f2      	adds	r2, r6, r3
100130de:	405a      	eors	r2, r3
100130e0:	4b42      	ldr	r3, [pc, #264]	; (100131ec <inv_generate_gyro_quaternion.part.1+0x118>)
100130e2:	429a      	cmp	r2, r3
100130e4:	dc5b      	bgt.n	1001319e <inv_generate_gyro_quaternion.part.1+0xca>
100130e6:	69c2      	ldr	r2, [r0, #28]
100130e8:	17d1      	asrs	r1, r2, #31
100130ea:	1852      	adds	r2, r2, r1
100130ec:	404a      	eors	r2, r1
100130ee:	429a      	cmp	r2, r3
100130f0:	dd5e      	ble.n	100131b0 <inv_generate_gyro_quaternion.part.1+0xdc>
100130f2:	23c8      	movs	r3, #200	; 0xc8
100130f4:	03db      	lsls	r3, r3, #15
100130f6:	429a      	cmp	r2, r3
100130f8:	dc00      	bgt.n	100130fc <inv_generate_gyro_quaternion.part.1+0x28>
100130fa:	e074      	b.n	100131e6 <inv_generate_gyro_quaternion.part.1+0x112>
100130fc:	2303      	movs	r3, #3
100130fe:	4c3c      	ldr	r4, [pc, #240]	; (100131f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
10013100:	1c05      	adds	r5, r0, #0
10013102:	63a3      	str	r3, [r4, #56]	; 0x38
10013104:	6a80      	ldr	r0, [r0, #40]	; 0x28
10013106:	6b63      	ldr	r3, [r4, #52]	; 0x34
10013108:	4283      	cmp	r3, r0
1001310a:	d066      	beq.n	100131da <inv_generate_gyro_quaternion.part.1+0x106>
1001310c:	6360      	str	r0, [r4, #52]	; 0x34
1001310e:	f002 ff5d 	bl	10015fcc <__aeabi_i2f>
10013112:	4938      	ldr	r1, [pc, #224]	; (100131f4 <inv_generate_gyro_quaternion.part.1+0x120>)
10013114:	f002 fabc 	bl	10015690 <__aeabi_fdiv>
10013118:	219c      	movs	r1, #156	; 0x9c
1001311a:	05c9      	lsls	r1, r1, #23
1001311c:	f002 fc82 	bl	10015a24 <__aeabi_fmul>
10013120:	f004 fda8 	bl	10017c74 <__aeabi_f2d>
10013124:	4a34      	ldr	r2, [pc, #208]	; (100131f8 <inv_generate_gyro_quaternion.part.1+0x124>)
10013126:	4b35      	ldr	r3, [pc, #212]	; (100131fc <inv_generate_gyro_quaternion.part.1+0x128>)
10013128:	f003 ff26 	bl	10016f78 <__aeabi_dmul>
1001312c:	2200      	movs	r2, #0
1001312e:	4b34      	ldr	r3, [pc, #208]	; (10013200 <inv_generate_gyro_quaternion.part.1+0x12c>)
10013130:	f003 ff22 	bl	10016f78 <__aeabi_dmul>
10013134:	2200      	movs	r2, #0
10013136:	4b33      	ldr	r3, [pc, #204]	; (10013204 <inv_generate_gyro_quaternion.part.1+0x130>)
10013138:	f003 fafa 	bl	10016730 <__aeabi_ddiv>
1001313c:	f004 fcea 	bl	10017b14 <__aeabi_d2iz>
10013140:	1c01      	adds	r1, r0, #0
10013142:	6320      	str	r0, [r4, #48]	; 0x30
10013144:	2300      	movs	r3, #0
10013146:	1c30      	adds	r0, r6, #0
10013148:	9302      	str	r3, [sp, #8]
1001314a:	f7f6 ffb9 	bl	1000a0c0 <inv_q30_mult>
1001314e:	6b21      	ldr	r1, [r4, #48]	; 0x30
10013150:	9003      	str	r0, [sp, #12]
10013152:	69e8      	ldr	r0, [r5, #28]
10013154:	f7f6 ffb4 	bl	1000a0c0 <inv_q30_mult>
10013158:	6b21      	ldr	r1, [r4, #48]	; 0x30
1001315a:	9004      	str	r0, [sp, #16]
1001315c:	6a28      	ldr	r0, [r5, #32]
1001315e:	f7f6 ffaf 	bl	1000a0c0 <inv_q30_mult>
10013162:	a902      	add	r1, sp, #8
10013164:	9005      	str	r0, [sp, #20]
10013166:	aa06      	add	r2, sp, #24
10013168:	1c20      	adds	r0, r4, #0
1001316a:	f7f6 ffb5 	bl	1000a0d8 <inv_q_mult>
1001316e:	9b06      	ldr	r3, [sp, #24]
10013170:	1c20      	adds	r0, r4, #0
10013172:	019b      	lsls	r3, r3, #6
10013174:	9306      	str	r3, [sp, #24]
10013176:	9b07      	ldr	r3, [sp, #28]
10013178:	a906      	add	r1, sp, #24
1001317a:	019b      	lsls	r3, r3, #6
1001317c:	9307      	str	r3, [sp, #28]
1001317e:	9b08      	ldr	r3, [sp, #32]
10013180:	1c22      	adds	r2, r4, #0
10013182:	019b      	lsls	r3, r3, #6
10013184:	9308      	str	r3, [sp, #32]
10013186:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013188:	9301      	str	r3, [sp, #4]
1001318a:	019b      	lsls	r3, r3, #6
1001318c:	9309      	str	r3, [sp, #36]	; 0x24
1001318e:	f7f7 f90b 	bl	1000a3a8 <inv_q_add>
10013192:	1c20      	adds	r0, r4, #0
10013194:	1c21      	adds	r1, r4, #0
10013196:	f7ff ff0d 	bl	10012fb4 <inv_normalize_quat>
1001319a:	b00a      	add	sp, #40	; 0x28
1001319c:	bd70      	pop	{r4, r5, r6, pc}
1001319e:	23c8      	movs	r3, #200	; 0xc8
100131a0:	03db      	lsls	r3, r3, #15
100131a2:	429a      	cmp	r2, r3
100131a4:	dcaa      	bgt.n	100130fc <inv_generate_gyro_quaternion.part.1+0x28>
100131a6:	69c3      	ldr	r3, [r0, #28]
100131a8:	17d9      	asrs	r1, r3, #31
100131aa:	185a      	adds	r2, r3, r1
100131ac:	404a      	eors	r2, r1
100131ae:	e7a0      	b.n	100130f2 <inv_generate_gyro_quaternion.part.1+0x1e>
100131b0:	6a02      	ldr	r2, [r0, #32]
100131b2:	17d4      	asrs	r4, r2, #31
100131b4:	1911      	adds	r1, r2, r4
100131b6:	4061      	eors	r1, r4
100131b8:	4299      	cmp	r1, r3
100131ba:	dd10      	ble.n	100131de <inv_generate_gyro_quaternion.part.1+0x10a>
100131bc:	17d3      	asrs	r3, r2, #31
100131be:	18d2      	adds	r2, r2, r3
100131c0:	405a      	eors	r2, r3
100131c2:	23c8      	movs	r3, #200	; 0xc8
100131c4:	03db      	lsls	r3, r3, #15
100131c6:	429a      	cmp	r2, r3
100131c8:	dc98      	bgt.n	100130fc <inv_generate_gyro_quaternion.part.1+0x28>
100131ca:	2302      	movs	r3, #2
100131cc:	4c08      	ldr	r4, [pc, #32]	; (100131f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
100131ce:	1c05      	adds	r5, r0, #0
100131d0:	63a3      	str	r3, [r4, #56]	; 0x38
100131d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
100131d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100131d6:	4283      	cmp	r3, r0
100131d8:	d198      	bne.n	1001310c <inv_generate_gyro_quaternion.part.1+0x38>
100131da:	6b21      	ldr	r1, [r4, #48]	; 0x30
100131dc:	e7b2      	b.n	10013144 <inv_generate_gyro_quaternion.part.1+0x70>
100131de:	2200      	movs	r2, #0
100131e0:	4b03      	ldr	r3, [pc, #12]	; (100131f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
100131e2:	639a      	str	r2, [r3, #56]	; 0x38
100131e4:	e7d9      	b.n	1001319a <inv_generate_gyro_quaternion.part.1+0xc6>
100131e6:	6a02      	ldr	r2, [r0, #32]
100131e8:	e7e8      	b.n	100131bc <inv_generate_gyro_quaternion.part.1+0xe8>
100131ea:	46c0      	nop			; (mov r8, r8)
100131ec:	0000ffff 	.word	0x0000ffff
100131f0:	1001d264 	.word	0x1001d264
100131f4:	49742400 	.word	0x49742400
100131f8:	54442d18 	.word	0x54442d18
100131fc:	400921fb 	.word	0x400921fb
10013200:	40700000 	.word	0x40700000
10013204:	40668000 	.word	0x40668000

10013208 <inv_generate_gyro_quaternion>:
10013208:	b508      	push	{r3, lr}
1001320a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1001320c:	065b      	lsls	r3, r3, #25
1001320e:	d501      	bpl.n	10013214 <inv_generate_gyro_quaternion+0xc>
10013210:	f7ff ff60 	bl	100130d4 <inv_generate_gyro_quaternion.part.1>
10013214:	bd08      	pop	{r3, pc}
10013216:	46c0      	nop			; (mov r8, r8)

10013218 <inv_set_quaternion>:
10013218:	b530      	push	{r4, r5, lr}
1001321a:	4c0a      	ldr	r4, [pc, #40]	; (10013244 <inv_set_quaternion+0x2c>)
1001321c:	b085      	sub	sp, #20
1001321e:	1c05      	adds	r5, r0, #0
10013220:	4669      	mov	r1, sp
10013222:	1c20      	adds	r0, r4, #0
10013224:	f7f7 f8d8 	bl	1000a3d8 <inv_q_invert>
10013228:	1c22      	adds	r2, r4, #0
1001322a:	1c28      	adds	r0, r5, #0
1001322c:	4669      	mov	r1, sp
1001322e:	3220      	adds	r2, #32
10013230:	f7f6 ff52 	bl	1000a0d8 <inv_q_mult>
10013234:	1c20      	adds	r0, r4, #0
10013236:	1c29      	adds	r1, r5, #0
10013238:	2210      	movs	r2, #16
1001323a:	3010      	adds	r0, #16
1001323c:	f004 ff47 	bl	100180ce <memcpy>
10013240:	b005      	add	sp, #20
10013242:	bd30      	pop	{r4, r5, pc}
10013244:	1001d264 	.word	0x1001d264

10013248 <inv_generate_accel_gyro_quaternion>:
10013248:	b5f0      	push	{r4, r5, r6, r7, lr}
1001324a:	4644      	mov	r4, r8
1001324c:	465f      	mov	r7, fp
1001324e:	4656      	mov	r6, sl
10013250:	464d      	mov	r5, r9
10013252:	2250      	movs	r2, #80	; 0x50
10013254:	b4f0      	push	{r4, r5, r6, r7}
10013256:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013258:	b09f      	sub	sp, #124	; 0x7c
1001325a:	1c04      	adds	r4, r0, #0
1001325c:	4013      	ands	r3, r2
1001325e:	2b40      	cmp	r3, #64	; 0x40
10013260:	d100      	bne.n	10013264 <inv_generate_accel_gyro_quaternion+0x1c>
10013262:	e2c1      	b.n	100137e8 <inv_generate_accel_gyro_quaternion+0x5a0>
10013264:	2690      	movs	r6, #144	; 0x90
10013266:	0076      	lsls	r6, r6, #1
10013268:	5983      	ldr	r3, [r0, r6]
1001326a:	4dc2      	ldr	r5, [pc, #776]	; (10013574 <inv_generate_accel_gyro_quaternion+0x32c>)
1001326c:	401a      	ands	r2, r3
1001326e:	2a40      	cmp	r2, #64	; 0x40
10013270:	d100      	bne.n	10013274 <inv_generate_accel_gyro_quaternion+0x2c>
10013272:	e389      	b.n	10013988 <inv_generate_accel_gyro_quaternion+0x740>
10013274:	05da      	lsls	r2, r3, #23
10013276:	d500      	bpl.n	1001327a <inv_generate_accel_gyro_quaternion+0x32>
10013278:	e18c      	b.n	10013594 <inv_generate_accel_gyro_quaternion+0x34c>
1001327a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1001327c:	065b      	lsls	r3, r3, #25
1001327e:	d500      	bpl.n	10013282 <inv_generate_accel_gyro_quaternion+0x3a>
10013280:	e268      	b.n	10013754 <inv_generate_accel_gyro_quaternion+0x50c>
10013282:	1c2f      	adds	r7, r5, #0
10013284:	1c28      	adds	r0, r5, #0
10013286:	3710      	adds	r7, #16
10013288:	3020      	adds	r0, #32
1001328a:	1c29      	adds	r1, r5, #0
1001328c:	1c3a      	adds	r2, r7, #0
1001328e:	f7f6 ff23 	bl	1000a0d8 <inv_q_mult>
10013292:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013294:	065b      	lsls	r3, r3, #25
10013296:	d572      	bpl.n	1001337e <inv_generate_accel_gyro_quaternion+0x136>
10013298:	2390      	movs	r3, #144	; 0x90
1001329a:	005b      	lsls	r3, r3, #1
1001329c:	58e3      	ldr	r3, [r4, r3]
1001329e:	6b22      	ldr	r2, [r4, #48]	; 0x30
100132a0:	4313      	orrs	r3, r2
100132a2:	05db      	lsls	r3, r3, #23
100132a4:	d400      	bmi.n	100132a8 <inv_generate_accel_gyro_quaternion+0x60>
100132a6:	e072      	b.n	1001338e <inv_generate_accel_gyro_quaternion+0x146>
100132a8:	1c21      	adds	r1, r4, #0
100132aa:	ae12      	add	r6, sp, #72	; 0x48
100132ac:	1c38      	adds	r0, r7, #0
100132ae:	315c      	adds	r1, #92	; 0x5c
100132b0:	1c32      	adds	r2, r6, #0
100132b2:	f7f7 f89d 	bl	1000a3f0 <inv_q_rotate>
100132b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
100132b8:	6e67      	ldr	r7, [r4, #100]	; 0x64
100132ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
100132bc:	4690      	mov	r8, r2
100132be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100132c0:	17d2      	asrs	r2, r2, #31
100132c2:	17db      	asrs	r3, r3, #31
100132c4:	4692      	mov	sl, r2
100132c6:	17fa      	asrs	r2, r7, #31
100132c8:	4691      	mov	r9, r2
100132ca:	1c19      	adds	r1, r3, #0
100132cc:	1c02      	adds	r2, r0, #0
100132ce:	f001 ff83 	bl	100151d8 <__aeabi_lmul>
100132d2:	4642      	mov	r2, r8
100132d4:	9000      	str	r0, [sp, #0]
100132d6:	9101      	str	r1, [sp, #4]
100132d8:	4653      	mov	r3, sl
100132da:	4640      	mov	r0, r8
100132dc:	4651      	mov	r1, sl
100132de:	f001 ff7b 	bl	100151d8 <__aeabi_lmul>
100132e2:	9a00      	ldr	r2, [sp, #0]
100132e4:	9b01      	ldr	r3, [sp, #4]
100132e6:	1812      	adds	r2, r2, r0
100132e8:	414b      	adcs	r3, r1
100132ea:	1c38      	adds	r0, r7, #0
100132ec:	9200      	str	r2, [sp, #0]
100132ee:	9301      	str	r3, [sp, #4]
100132f0:	4649      	mov	r1, r9
100132f2:	1c3a      	adds	r2, r7, #0
100132f4:	464b      	mov	r3, r9
100132f6:	f001 ff6f 	bl	100151d8 <__aeabi_lmul>
100132fa:	9a00      	ldr	r2, [sp, #0]
100132fc:	9b01      	ldr	r3, [sp, #4]
100132fe:	1880      	adds	r0, r0, r2
10013300:	4159      	adcs	r1, r3
10013302:	2902      	cmp	r1, #2
10013304:	dd00      	ble.n	10013308 <inv_generate_accel_gyro_quaternion+0xc0>
10013306:	e22d      	b.n	10013764 <inv_generate_accel_gyro_quaternion+0x51c>
10013308:	d100      	bne.n	1001330c <inv_generate_accel_gyro_quaternion+0xc4>
1001330a:	e227      	b.n	1001375c <inv_generate_accel_gyro_quaternion+0x514>
1001330c:	6baf      	ldr	r7, [r5, #56]	; 0x38
1001330e:	2f04      	cmp	r7, #4
10013310:	d100      	bne.n	10013314 <inv_generate_accel_gyro_quaternion+0xcc>
10013312:	e25a      	b.n	100137ca <inv_generate_accel_gyro_quaternion+0x582>
10013314:	1ebb      	subs	r3, r7, #2
10013316:	2b01      	cmp	r3, #1
10013318:	d800      	bhi.n	1001331c <inv_generate_accel_gyro_quaternion+0xd4>
1001331a:	e258      	b.n	100137ce <inv_generate_accel_gyro_quaternion+0x586>
1001331c:	2001      	movs	r0, #1
1001331e:	2f01      	cmp	r7, #1
10013320:	d100      	bne.n	10013324 <inv_generate_accel_gyro_quaternion+0xdc>
10013322:	e36a      	b.n	100139fa <inv_generate_accel_gyro_quaternion+0x7b2>
10013324:	0084      	lsls	r4, r0, #2
10013326:	4894      	ldr	r0, [pc, #592]	; (10013578 <inv_generate_accel_gyro_quaternion+0x330>)
10013328:	4344      	muls	r4, r0
1001332a:	2700      	movs	r7, #0
1001332c:	6870      	ldr	r0, [r6, #4]
1001332e:	1c21      	adds	r1, r4, #0
10013330:	0280      	lsls	r0, r0, #10
10013332:	9716      	str	r7, [sp, #88]	; 0x58
10013334:	f7f6 fec4 	bl	1000a0c0 <inv_q30_mult>
10013338:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001333a:	9017      	str	r0, [sp, #92]	; 0x5c
1001333c:	4258      	negs	r0, r3
1001333e:	1c21      	adds	r1, r4, #0
10013340:	0280      	lsls	r0, r0, #10
10013342:	1c2c      	adds	r4, r5, #0
10013344:	f7f6 febc 	bl	1000a0c0 <inv_q30_mult>
10013348:	3410      	adds	r4, #16
1001334a:	9018      	str	r0, [sp, #96]	; 0x60
1001334c:	1c21      	adds	r1, r4, #0
1001334e:	a816      	add	r0, sp, #88	; 0x58
10013350:	aa1a      	add	r2, sp, #104	; 0x68
10013352:	9719      	str	r7, [sp, #100]	; 0x64
10013354:	f7f6 fec0 	bl	1000a0d8 <inv_q_mult>
10013358:	1c22      	adds	r2, r4, #0
1001335a:	1c20      	adds	r0, r4, #0
1001335c:	a91a      	add	r1, sp, #104	; 0x68
1001335e:	f7f7 f823 	bl	1000a3a8 <inv_q_add>
10013362:	1c20      	adds	r0, r4, #0
10013364:	1c21      	adds	r1, r4, #0
10013366:	f7ff fe25 	bl	10012fb4 <inv_normalize_quat>
1001336a:	1c28      	adds	r0, r5, #0
1001336c:	a902      	add	r1, sp, #8
1001336e:	f7f7 f833 	bl	1000a3d8 <inv_q_invert>
10013372:	1c2a      	adds	r2, r5, #0
10013374:	1c20      	adds	r0, r4, #0
10013376:	3220      	adds	r2, #32
10013378:	a902      	add	r1, sp, #8
1001337a:	f7f6 fead 	bl	1000a0d8 <inv_q_mult>
1001337e:	2000      	movs	r0, #0
10013380:	b01f      	add	sp, #124	; 0x7c
10013382:	bc3c      	pop	{r2, r3, r4, r5}
10013384:	4690      	mov	r8, r2
10013386:	4699      	mov	r9, r3
10013388:	46a2      	mov	sl, r4
1001338a:	46ab      	mov	fp, r5
1001338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001338e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
10013390:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013392:	4698      	mov	r8, r3
10013394:	f002 fe1a 	bl	10015fcc <__aeabi_i2f>
10013398:	4681      	mov	r9, r0
1001339a:	6e20      	ldr	r0, [r4, #96]	; 0x60
1001339c:	f002 fe16 	bl	10015fcc <__aeabi_i2f>
100133a0:	1c07      	adds	r7, r0, #0
100133a2:	6e60      	ldr	r0, [r4, #100]	; 0x64
100133a4:	f002 fe12 	bl	10015fcc <__aeabi_i2f>
100133a8:	4649      	mov	r1, r9
100133aa:	1c06      	adds	r6, r0, #0
100133ac:	4648      	mov	r0, r9
100133ae:	f002 fb39 	bl	10015a24 <__aeabi_fmul>
100133b2:	1c39      	adds	r1, r7, #0
100133b4:	4681      	mov	r9, r0
100133b6:	1c38      	adds	r0, r7, #0
100133b8:	f002 fb34 	bl	10015a24 <__aeabi_fmul>
100133bc:	1c01      	adds	r1, r0, #0
100133be:	4648      	mov	r0, r9
100133c0:	f001 fff0 	bl	100153a4 <__aeabi_fadd>
100133c4:	1c31      	adds	r1, r6, #0
100133c6:	1c07      	adds	r7, r0, #0
100133c8:	1c30      	adds	r0, r6, #0
100133ca:	f002 fb2b 	bl	10015a24 <__aeabi_fmul>
100133ce:	1c01      	adds	r1, r0, #0
100133d0:	1c38      	adds	r0, r7, #0
100133d2:	f001 ffe7 	bl	100153a4 <__aeabi_fadd>
100133d6:	f7fd fa79 	bl	100108cc <sqrtf>
100133da:	218d      	movs	r1, #141	; 0x8d
100133dc:	1c06      	adds	r6, r0, #0
100133de:	0040      	lsls	r0, r0, #1
100133e0:	0840      	lsrs	r0, r0, #1
100133e2:	05c9      	lsls	r1, r1, #23
100133e4:	f001 fec0 	bl	10015168 <__aeabi_fcmpgt>
100133e8:	2800      	cmp	r0, #0
100133ea:	d100      	bne.n	100133ee <inv_generate_accel_gyro_quaternion+0x1a6>
100133ec:	e0b5      	b.n	1001355a <inv_generate_accel_gyro_quaternion+0x312>
100133ee:	6928      	ldr	r0, [r5, #16]
100133f0:	f002 fdec 	bl	10015fcc <__aeabi_i2f>
100133f4:	21c2      	movs	r1, #194	; 0xc2
100133f6:	0589      	lsls	r1, r1, #22
100133f8:	f002 fb14 	bl	10015a24 <__aeabi_fmul>
100133fc:	901a      	str	r0, [sp, #104]	; 0x68
100133fe:	6968      	ldr	r0, [r5, #20]
10013400:	f002 fde4 	bl	10015fcc <__aeabi_i2f>
10013404:	21c2      	movs	r1, #194	; 0xc2
10013406:	0589      	lsls	r1, r1, #22
10013408:	f002 fb0c 	bl	10015a24 <__aeabi_fmul>
1001340c:	af1a      	add	r7, sp, #104	; 0x68
1001340e:	6078      	str	r0, [r7, #4]
10013410:	69a8      	ldr	r0, [r5, #24]
10013412:	f002 fddb 	bl	10015fcc <__aeabi_i2f>
10013416:	21c2      	movs	r1, #194	; 0xc2
10013418:	0589      	lsls	r1, r1, #22
1001341a:	f002 fb03 	bl	10015a24 <__aeabi_fmul>
1001341e:	60b8      	str	r0, [r7, #8]
10013420:	69e8      	ldr	r0, [r5, #28]
10013422:	f002 fdd3 	bl	10015fcc <__aeabi_i2f>
10013426:	21c2      	movs	r1, #194	; 0xc2
10013428:	0589      	lsls	r1, r1, #22
1001342a:	f002 fafb 	bl	10015a24 <__aeabi_fmul>
1001342e:	2300      	movs	r3, #0
10013430:	60f8      	str	r0, [r7, #12]
10013432:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013434:	9316      	str	r3, [sp, #88]	; 0x58
10013436:	f002 fdc9 	bl	10015fcc <__aeabi_i2f>
1001343a:	1c31      	adds	r1, r6, #0
1001343c:	f002 f928 	bl	10015690 <__aeabi_fdiv>
10013440:	9017      	str	r0, [sp, #92]	; 0x5c
10013442:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013444:	f002 fdc2 	bl	10015fcc <__aeabi_i2f>
10013448:	1c31      	adds	r1, r6, #0
1001344a:	f002 f921 	bl	10015690 <__aeabi_fdiv>
1001344e:	9018      	str	r0, [sp, #96]	; 0x60
10013450:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013452:	f002 fdbb 	bl	10015fcc <__aeabi_i2f>
10013456:	1c31      	adds	r1, r6, #0
10013458:	f002 f91a 	bl	10015690 <__aeabi_fdiv>
1001345c:	aa06      	add	r2, sp, #24
1001345e:	9019      	str	r0, [sp, #100]	; 0x64
10013460:	a916      	add	r1, sp, #88	; 0x58
10013462:	1c38      	adds	r0, r7, #0
10013464:	f7f6 ffec 	bl	1000a440 <inv_q_multf>
10013468:	1c38      	adds	r0, r7, #0
1001346a:	a90e      	add	r1, sp, #56	; 0x38
1001346c:	f7f7 f968 	bl	1000a740 <inv_q_invertf>
10013470:	aa0a      	add	r2, sp, #40	; 0x28
10013472:	a806      	add	r0, sp, #24
10013474:	a90e      	add	r1, sp, #56	; 0x38
10013476:	f7f6 ffe3 	bl	1000a440 <inv_q_multf>
1001347a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1001347c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001347e:	1c31      	adds	r1, r6, #0
10013480:	1c30      	adds	r0, r6, #0
10013482:	f002 facf 	bl	10015a24 <__aeabi_fmul>
10013486:	1c21      	adds	r1, r4, #0
10013488:	4681      	mov	r9, r0
1001348a:	1c20      	adds	r0, r4, #0
1001348c:	f002 faca 	bl	10015a24 <__aeabi_fmul>
10013490:	1c01      	adds	r1, r0, #0
10013492:	4648      	mov	r0, r9
10013494:	f001 ff86 	bl	100153a4 <__aeabi_fadd>
10013498:	4938      	ldr	r1, [pc, #224]	; (1001357c <inv_generate_accel_gyro_quaternion+0x334>)
1001349a:	4681      	mov	r9, r0
1001349c:	f001 fe50 	bl	10015140 <__aeabi_fcmplt>
100134a0:	2800      	cmp	r0, #0
100134a2:	d110      	bne.n	100134c6 <inv_generate_accel_gyro_quaternion+0x27e>
100134a4:	4648      	mov	r0, r9
100134a6:	4936      	ldr	r1, [pc, #216]	; (10013580 <inv_generate_accel_gyro_quaternion+0x338>)
100134a8:	f001 fe4a 	bl	10015140 <__aeabi_fcmplt>
100134ac:	2800      	cmp	r0, #0
100134ae:	d000      	beq.n	100134b2 <inv_generate_accel_gyro_quaternion+0x26a>
100134b0:	e2b5      	b.n	10013a1e <inv_generate_accel_gyro_quaternion+0x7d6>
100134b2:	4648      	mov	r0, r9
100134b4:	4933      	ldr	r1, [pc, #204]	; (10013584 <inv_generate_accel_gyro_quaternion+0x33c>)
100134b6:	f001 fe43 	bl	10015140 <__aeabi_fcmplt>
100134ba:	2800      	cmp	r0, #0
100134bc:	d000      	beq.n	100134c0 <inv_generate_accel_gyro_quaternion+0x278>
100134be:	e28d      	b.n	100139dc <inv_generate_accel_gyro_quaternion+0x794>
100134c0:	4b31      	ldr	r3, [pc, #196]	; (10013588 <inv_generate_accel_gyro_quaternion+0x340>)
100134c2:	4699      	mov	r9, r3
100134c4:	e001      	b.n	100134ca <inv_generate_accel_gyro_quaternion+0x282>
100134c6:	4b31      	ldr	r3, [pc, #196]	; (1001358c <inv_generate_accel_gyro_quaternion+0x344>)
100134c8:	4699      	mov	r9, r3
100134ca:	4640      	mov	r0, r8
100134cc:	f002 fd7e 	bl	10015fcc <__aeabi_i2f>
100134d0:	492f      	ldr	r1, [pc, #188]	; (10013590 <inv_generate_accel_gyro_quaternion+0x348>)
100134d2:	f002 f8dd 	bl	10015690 <__aeabi_fdiv>
100134d6:	4649      	mov	r1, r9
100134d8:	f002 faa4 	bl	10015a24 <__aeabi_fmul>
100134dc:	4681      	mov	r9, r0
100134de:	2300      	movs	r3, #0
100134e0:	4649      	mov	r1, r9
100134e2:	1c30      	adds	r0, r6, #0
100134e4:	4698      	mov	r8, r3
100134e6:	9312      	str	r3, [sp, #72]	; 0x48
100134e8:	f002 fa9c 	bl	10015a24 <__aeabi_fmul>
100134ec:	2380      	movs	r3, #128	; 0x80
100134ee:	061b      	lsls	r3, r3, #24
100134f0:	18e1      	adds	r1, r4, r3
100134f2:	9013      	str	r0, [sp, #76]	; 0x4c
100134f4:	4648      	mov	r0, r9
100134f6:	f002 fa95 	bl	10015a24 <__aeabi_fmul>
100134fa:	4643      	mov	r3, r8
100134fc:	9014      	str	r0, [sp, #80]	; 0x50
100134fe:	1c39      	adds	r1, r7, #0
10013500:	a812      	add	r0, sp, #72	; 0x48
10013502:	aa0a      	add	r2, sp, #40	; 0x28
10013504:	9315      	str	r3, [sp, #84]	; 0x54
10013506:	f7f6 ff9b 	bl	1000a440 <inv_q_multf>
1001350a:	a80a      	add	r0, sp, #40	; 0x28
1001350c:	1c02      	adds	r2, r0, #0
1001350e:	1c39      	adds	r1, r7, #0
10013510:	f7f7 f816 	bl	1000a540 <inv_q_addf>
10013514:	a80a      	add	r0, sp, #40	; 0x28
10013516:	f7f7 f8bd 	bl	1000a694 <inv_q_norm4>
1001351a:	219d      	movs	r1, #157	; 0x9d
1001351c:	980a      	ldr	r0, [sp, #40]	; 0x28
1001351e:	05c9      	lsls	r1, r1, #23
10013520:	f002 fa80 	bl	10015a24 <__aeabi_fmul>
10013524:	f002 fd30 	bl	10015f88 <__aeabi_f2iz>
10013528:	219d      	movs	r1, #157	; 0x9d
1001352a:	6128      	str	r0, [r5, #16]
1001352c:	05c9      	lsls	r1, r1, #23
1001352e:	980b      	ldr	r0, [sp, #44]	; 0x2c
10013530:	f002 fa78 	bl	10015a24 <__aeabi_fmul>
10013534:	f002 fd28 	bl	10015f88 <__aeabi_f2iz>
10013538:	219d      	movs	r1, #157	; 0x9d
1001353a:	6168      	str	r0, [r5, #20]
1001353c:	05c9      	lsls	r1, r1, #23
1001353e:	980c      	ldr	r0, [sp, #48]	; 0x30
10013540:	f002 fa70 	bl	10015a24 <__aeabi_fmul>
10013544:	f002 fd20 	bl	10015f88 <__aeabi_f2iz>
10013548:	219d      	movs	r1, #157	; 0x9d
1001354a:	61a8      	str	r0, [r5, #24]
1001354c:	05c9      	lsls	r1, r1, #23
1001354e:	980d      	ldr	r0, [sp, #52]	; 0x34
10013550:	f002 fa68 	bl	10015a24 <__aeabi_fmul>
10013554:	f002 fd18 	bl	10015f88 <__aeabi_f2iz>
10013558:	61e8      	str	r0, [r5, #28]
1001355a:	1c28      	adds	r0, r5, #0
1001355c:	a902      	add	r1, sp, #8
1001355e:	f7f6 ff3b 	bl	1000a3d8 <inv_q_invert>
10013562:	1c28      	adds	r0, r5, #0
10013564:	1c2a      	adds	r2, r5, #0
10013566:	3010      	adds	r0, #16
10013568:	3220      	adds	r2, #32
1001356a:	a902      	add	r1, sp, #8
1001356c:	f7f6 fdb4 	bl	1000a0d8 <inv_q_mult>
10013570:	e705      	b.n	1001337e <inv_generate_accel_gyro_quaternion+0x136>
10013572:	46c0      	nop			; (mov r8, r8)
10013574:	1001d264 	.word	0x1001d264
10013578:	00c49ba6 	.word	0x00c49ba6
1001357c:	3951b717 	.word	0x3951b717
10013580:	3c23d70a 	.word	0x3c23d70a
10013584:	3e4ccccd 	.word	0x3e4ccccd
10013588:	3ecccccd 	.word	0x3ecccccd
1001358c:	3bc49ba6 	.word	0x3bc49ba6
10013590:	47cd1400 	.word	0x47cd1400
10013594:	065a      	lsls	r2, r3, #25
10013596:	d400      	bmi.n	1001359a <inv_generate_accel_gyro_quaternion+0x352>
10013598:	e673      	b.n	10013282 <inv_generate_accel_gyro_quaternion+0x3a>
1001359a:	2288      	movs	r2, #136	; 0x88
1001359c:	0052      	lsls	r2, r2, #1
1001359e:	58a1      	ldr	r1, [r4, r2]
100135a0:	682a      	ldr	r2, [r5, #0]
100135a2:	1a89      	subs	r1, r1, r2
100135a4:	2296      	movs	r2, #150	; 0x96
100135a6:	0052      	lsls	r2, r2, #1
100135a8:	58a0      	ldr	r0, [r4, r2]
100135aa:	4aef      	ldr	r2, [pc, #956]	; (10013968 <inv_generate_accel_gyro_quaternion+0x720>)
100135ac:	4342      	muls	r2, r0
100135ae:	4291      	cmp	r1, r2
100135b0:	dc00      	bgt.n	100135b4 <inv_generate_accel_gyro_quaternion+0x36c>
100135b2:	e1f4      	b.n	1001399e <inv_generate_accel_gyro_quaternion+0x756>
100135b4:	2203      	movs	r2, #3
100135b6:	63aa      	str	r2, [r5, #56]	; 0x38
100135b8:	059b      	lsls	r3, r3, #22
100135ba:	d500      	bpl.n	100135be <inv_generate_accel_gyro_quaternion+0x376>
100135bc:	e1f2      	b.n	100139a4 <inv_generate_accel_gyro_quaternion+0x75c>
100135be:	ae12      	add	r6, sp, #72	; 0x48
100135c0:	1c30      	adds	r0, r6, #0
100135c2:	2100      	movs	r1, #0
100135c4:	f7f6 fbfc 	bl	10009dc0 <inv_get_gyro_bias>
100135c8:	1c29      	adds	r1, r5, #0
100135ca:	1c30      	adds	r0, r6, #0
100135cc:	313c      	adds	r1, #60	; 0x3c
100135ce:	220c      	movs	r2, #12
100135d0:	f004 fd6e 	bl	100180b0 <memcmp>
100135d4:	2800      	cmp	r0, #0
100135d6:	d107      	bne.n	100135e8 <inv_generate_accel_gyro_quaternion+0x3a0>
100135d8:	2394      	movs	r3, #148	; 0x94
100135da:	005b      	lsls	r3, r3, #1
100135dc:	58e3      	ldr	r3, [r4, r3]
100135de:	6daa      	ldr	r2, [r5, #88]	; 0x58
100135e0:	af1a      	add	r7, sp, #104	; 0x68
100135e2:	4293      	cmp	r3, r2
100135e4:	d100      	bne.n	100135e8 <inv_generate_accel_gyro_quaternion+0x3a0>
100135e6:	e096      	b.n	10013716 <inv_generate_accel_gyro_quaternion+0x4ce>
100135e8:	af1a      	add	r7, sp, #104	; 0x68
100135ea:	1c32      	adds	r2, r6, #0
100135ec:	1c3b      	adds	r3, r7, #0
100135ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
100135f0:	8820      	ldrh	r0, [r4, #0]
100135f2:	f7f7 f9a7 	bl	1000a944 <inv_convert_to_body_with_scale>
100135f6:	981a      	ldr	r0, [sp, #104]	; 0x68
100135f8:	f002 fce8 	bl	10015fcc <__aeabi_i2f>
100135fc:	4682      	mov	sl, r0
100135fe:	6878      	ldr	r0, [r7, #4]
10013600:	f002 fce4 	bl	10015fcc <__aeabi_i2f>
10013604:	4681      	mov	r9, r0
10013606:	68b8      	ldr	r0, [r7, #8]
10013608:	f002 fce0 	bl	10015fcc <__aeabi_i2f>
1001360c:	4651      	mov	r1, sl
1001360e:	4680      	mov	r8, r0
10013610:	4650      	mov	r0, sl
10013612:	f002 fa07 	bl	10015a24 <__aeabi_fmul>
10013616:	4649      	mov	r1, r9
10013618:	4682      	mov	sl, r0
1001361a:	4648      	mov	r0, r9
1001361c:	f002 fa02 	bl	10015a24 <__aeabi_fmul>
10013620:	1c01      	adds	r1, r0, #0
10013622:	4650      	mov	r0, sl
10013624:	f001 febe 	bl	100153a4 <__aeabi_fadd>
10013628:	4641      	mov	r1, r8
1001362a:	4681      	mov	r9, r0
1001362c:	4640      	mov	r0, r8
1001362e:	f002 f9f9 	bl	10015a24 <__aeabi_fmul>
10013632:	1c01      	adds	r1, r0, #0
10013634:	4648      	mov	r0, r9
10013636:	f001 feb5 	bl	100153a4 <__aeabi_fadd>
1001363a:	f7fd f947 	bl	100108cc <sqrtf>
1001363e:	2394      	movs	r3, #148	; 0x94
10013640:	005b      	lsls	r3, r3, #1
10013642:	58e3      	ldr	r3, [r4, r3]
10013644:	49c9      	ldr	r1, [pc, #804]	; (1001396c <inv_generate_accel_gyro_quaternion+0x724>)
10013646:	4699      	mov	r9, r3
10013648:	4680      	mov	r8, r0
1001364a:	f002 f9eb 	bl	10015a24 <__aeabi_fmul>
1001364e:	49c8      	ldr	r1, [pc, #800]	; (10013970 <inv_generate_accel_gyro_quaternion+0x728>)
10013650:	f002 f81e 	bl	10015690 <__aeabi_fdiv>
10013654:	21de      	movs	r1, #222	; 0xde
10013656:	0589      	lsls	r1, r1, #22
10013658:	f002 f9e4 	bl	10015a24 <__aeabi_fmul>
1001365c:	4682      	mov	sl, r0
1001365e:	4648      	mov	r0, r9
10013660:	f002 fcb4 	bl	10015fcc <__aeabi_i2f>
10013664:	1c01      	adds	r1, r0, #0
10013666:	4650      	mov	r0, sl
10013668:	f002 f9dc 	bl	10015a24 <__aeabi_fmul>
1001366c:	49c1      	ldr	r1, [pc, #772]	; (10013974 <inv_generate_accel_gyro_quaternion+0x72c>)
1001366e:	f002 f80f 	bl	10015690 <__aeabi_fdiv>
10013672:	21fc      	movs	r1, #252	; 0xfc
10013674:	0589      	lsls	r1, r1, #22
10013676:	f002 f9d5 	bl	10015a24 <__aeabi_fmul>
1001367a:	4682      	mov	sl, r0
1001367c:	f000 fa48 	bl	10013b10 <cosf>
10013680:	4683      	mov	fp, r0
10013682:	4650      	mov	r0, sl
10013684:	f000 fa82 	bl	10013b8c <sinf>
10013688:	2180      	movs	r1, #128	; 0x80
1001368a:	4682      	mov	sl, r0
1001368c:	05c9      	lsls	r1, r1, #23
1001368e:	4640      	mov	r0, r8
10013690:	f001 fd56 	bl	10015140 <__aeabi_fcmplt>
10013694:	2800      	cmp	r0, #0
10013696:	d000      	beq.n	1001369a <inv_generate_accel_gyro_quaternion+0x452>
10013698:	e18b      	b.n	100139b2 <inv_generate_accel_gyro_quaternion+0x76a>
1001369a:	219d      	movs	r1, #157	; 0x9d
1001369c:	4658      	mov	r0, fp
1001369e:	05c9      	lsls	r1, r1, #23
100136a0:	f002 f9c0 	bl	10015a24 <__aeabi_fmul>
100136a4:	f002 fc70 	bl	10015f88 <__aeabi_f2iz>
100136a8:	2380      	movs	r3, #128	; 0x80
100136aa:	219d      	movs	r1, #157	; 0x9d
100136ac:	061b      	lsls	r3, r3, #24
100136ae:	4453      	add	r3, sl
100136b0:	05c9      	lsls	r1, r1, #23
100136b2:	64a8      	str	r0, [r5, #72]	; 0x48
100136b4:	1c18      	adds	r0, r3, #0
100136b6:	f002 f9b5 	bl	10015a24 <__aeabi_fmul>
100136ba:	4682      	mov	sl, r0
100136bc:	981a      	ldr	r0, [sp, #104]	; 0x68
100136be:	f002 fc85 	bl	10015fcc <__aeabi_i2f>
100136c2:	1c01      	adds	r1, r0, #0
100136c4:	4650      	mov	r0, sl
100136c6:	f002 f9ad 	bl	10015a24 <__aeabi_fmul>
100136ca:	4641      	mov	r1, r8
100136cc:	f001 ffe0 	bl	10015690 <__aeabi_fdiv>
100136d0:	f002 fc5a 	bl	10015f88 <__aeabi_f2iz>
100136d4:	64e8      	str	r0, [r5, #76]	; 0x4c
100136d6:	6878      	ldr	r0, [r7, #4]
100136d8:	f002 fc78 	bl	10015fcc <__aeabi_i2f>
100136dc:	1c01      	adds	r1, r0, #0
100136de:	4650      	mov	r0, sl
100136e0:	f002 f9a0 	bl	10015a24 <__aeabi_fmul>
100136e4:	4641      	mov	r1, r8
100136e6:	f001 ffd3 	bl	10015690 <__aeabi_fdiv>
100136ea:	f002 fc4d 	bl	10015f88 <__aeabi_f2iz>
100136ee:	6528      	str	r0, [r5, #80]	; 0x50
100136f0:	68b8      	ldr	r0, [r7, #8]
100136f2:	f002 fc6b 	bl	10015fcc <__aeabi_i2f>
100136f6:	1c01      	adds	r1, r0, #0
100136f8:	4650      	mov	r0, sl
100136fa:	f002 f993 	bl	10015a24 <__aeabi_fmul>
100136fe:	4641      	mov	r1, r8
10013700:	f001 ffc6 	bl	10015690 <__aeabi_fdiv>
10013704:	f002 fc40 	bl	10015f88 <__aeabi_f2iz>
10013708:	6568      	str	r0, [r5, #84]	; 0x54
1001370a:	1c2b      	adds	r3, r5, #0
1001370c:	333c      	adds	r3, #60	; 0x3c
1001370e:	ce07      	ldmia	r6!, {r0, r1, r2}
10013710:	c307      	stmia	r3!, {r0, r1, r2}
10013712:	464b      	mov	r3, r9
10013714:	65ab      	str	r3, [r5, #88]	; 0x58
10013716:	1c26      	adds	r6, r4, #0
10013718:	1c29      	adds	r1, r5, #0
1001371a:	3611      	adds	r6, #17
1001371c:	36ff      	adds	r6, #255	; 0xff
1001371e:	1c30      	adds	r0, r6, #0
10013720:	1c3a      	adds	r2, r7, #0
10013722:	3148      	adds	r1, #72	; 0x48
10013724:	f7f6 fcd8 	bl	1000a0d8 <inv_q_mult>
10013728:	235c      	movs	r3, #92	; 0x5c
1001372a:	4698      	mov	r8, r3
1001372c:	44a8      	add	r8, r5
1001372e:	aa16      	add	r2, sp, #88	; 0x58
10013730:	4640      	mov	r0, r8
10013732:	1c39      	adds	r1, r7, #0
10013734:	f7f6 fcd0 	bl	1000a0d8 <inv_q_mult>
10013738:	1c30      	adds	r0, r6, #0
1001373a:	4641      	mov	r1, r8
1001373c:	f7f6 fe4c 	bl	1000a3d8 <inv_q_invert>
10013740:	1c28      	adds	r0, r5, #0
10013742:	a916      	add	r1, sp, #88	; 0x58
10013744:	1c3a      	adds	r2, r7, #0
10013746:	f7f6 fcc7 	bl	1000a0d8 <inv_q_mult>
1001374a:	1c38      	adds	r0, r7, #0
1001374c:	1c29      	adds	r1, r5, #0
1001374e:	f7ff fc31 	bl	10012fb4 <inv_normalize_quat>
10013752:	e596      	b.n	10013282 <inv_generate_accel_gyro_quaternion+0x3a>
10013754:	1c20      	adds	r0, r4, #0
10013756:	f7ff fcbd 	bl	100130d4 <inv_generate_gyro_quaternion.part.1>
1001375a:	e592      	b.n	10013282 <inv_generate_accel_gyro_quaternion+0x3a>
1001375c:	4b86      	ldr	r3, [pc, #536]	; (10013978 <inv_generate_accel_gyro_quaternion+0x730>)
1001375e:	4298      	cmp	r0, r3
10013760:	d800      	bhi.n	10013764 <inv_generate_accel_gyro_quaternion+0x51c>
10013762:	e5d3      	b.n	1001330c <inv_generate_accel_gyro_quaternion+0xc4>
10013764:	a80e      	add	r0, sp, #56	; 0x38
10013766:	f7f7 fa73 	bl	1000ac50 <inv_get_linear_accel>
1001376a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1001376c:	9f10      	ldr	r7, [sp, #64]	; 0x40
1001376e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013770:	4690      	mov	r8, r2
10013772:	980e      	ldr	r0, [sp, #56]	; 0x38
10013774:	17d2      	asrs	r2, r2, #31
10013776:	17db      	asrs	r3, r3, #31
10013778:	4692      	mov	sl, r2
1001377a:	17fa      	asrs	r2, r7, #31
1001377c:	4691      	mov	r9, r2
1001377e:	1c19      	adds	r1, r3, #0
10013780:	1c02      	adds	r2, r0, #0
10013782:	f001 fd29 	bl	100151d8 <__aeabi_lmul>
10013786:	4642      	mov	r2, r8
10013788:	9000      	str	r0, [sp, #0]
1001378a:	9101      	str	r1, [sp, #4]
1001378c:	4653      	mov	r3, sl
1001378e:	4640      	mov	r0, r8
10013790:	4651      	mov	r1, sl
10013792:	f001 fd21 	bl	100151d8 <__aeabi_lmul>
10013796:	9a00      	ldr	r2, [sp, #0]
10013798:	9b01      	ldr	r3, [sp, #4]
1001379a:	1812      	adds	r2, r2, r0
1001379c:	414b      	adcs	r3, r1
1001379e:	1c38      	adds	r0, r7, #0
100137a0:	9200      	str	r2, [sp, #0]
100137a2:	9301      	str	r3, [sp, #4]
100137a4:	4649      	mov	r1, r9
100137a6:	1c3a      	adds	r2, r7, #0
100137a8:	464b      	mov	r3, r9
100137aa:	f001 fd15 	bl	100151d8 <__aeabi_lmul>
100137ae:	9a00      	ldr	r2, [sp, #0]
100137b0:	9b01      	ldr	r3, [sp, #4]
100137b2:	1880      	adds	r0, r0, r2
100137b4:	4159      	adcs	r1, r3
100137b6:	2902      	cmp	r1, #2
100137b8:	dc05      	bgt.n	100137c6 <inv_generate_accel_gyro_quaternion+0x57e>
100137ba:	d000      	beq.n	100137be <inv_generate_accel_gyro_quaternion+0x576>
100137bc:	e5a6      	b.n	1001330c <inv_generate_accel_gyro_quaternion+0xc4>
100137be:	4b6e      	ldr	r3, [pc, #440]	; (10013978 <inv_generate_accel_gyro_quaternion+0x730>)
100137c0:	4298      	cmp	r0, r3
100137c2:	d800      	bhi.n	100137c6 <inv_generate_accel_gyro_quaternion+0x57e>
100137c4:	e5a2      	b.n	1001330c <inv_generate_accel_gyro_quaternion+0xc4>
100137c6:	2304      	movs	r3, #4
100137c8:	63ab      	str	r3, [r5, #56]	; 0x38
100137ca:	2400      	movs	r4, #0
100137cc:	e5ad      	b.n	1001332a <inv_generate_accel_gyro_quaternion+0xe2>
100137ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100137d0:	496a      	ldr	r1, [pc, #424]	; (1001397c <inv_generate_accel_gyro_quaternion+0x734>)
100137d2:	f001 fb79 	bl	10014ec8 <__aeabi_idiv>
100137d6:	2800      	cmp	r0, #0
100137d8:	dc00      	bgt.n	100137dc <inv_generate_accel_gyro_quaternion+0x594>
100137da:	e103      	b.n	100139e4 <inv_generate_accel_gyro_quaternion+0x79c>
100137dc:	2f03      	cmp	r7, #3
100137de:	d000      	beq.n	100137e2 <inv_generate_accel_gyro_quaternion+0x59a>
100137e0:	e5a0      	b.n	10013324 <inv_generate_accel_gyro_quaternion+0xdc>
100137e2:	4c67      	ldr	r4, [pc, #412]	; (10013980 <inv_generate_accel_gyro_quaternion+0x738>)
100137e4:	4344      	muls	r4, r0
100137e6:	e5a0      	b.n	1001332a <inv_generate_accel_gyro_quaternion+0xe2>
100137e8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
100137ea:	f002 fbef 	bl	10015fcc <__aeabi_i2f>
100137ee:	1c07      	adds	r7, r0, #0
100137f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
100137f2:	f002 fbeb 	bl	10015fcc <__aeabi_i2f>
100137f6:	1c06      	adds	r6, r0, #0
100137f8:	6e60      	ldr	r0, [r4, #100]	; 0x64
100137fa:	f002 fbe7 	bl	10015fcc <__aeabi_i2f>
100137fe:	1c39      	adds	r1, r7, #0
10013800:	1c05      	adds	r5, r0, #0
10013802:	1c38      	adds	r0, r7, #0
10013804:	f002 f90e 	bl	10015a24 <__aeabi_fmul>
10013808:	1c31      	adds	r1, r6, #0
1001380a:	1c07      	adds	r7, r0, #0
1001380c:	1c30      	adds	r0, r6, #0
1001380e:	f002 f909 	bl	10015a24 <__aeabi_fmul>
10013812:	1c01      	adds	r1, r0, #0
10013814:	1c38      	adds	r0, r7, #0
10013816:	f001 fdc5 	bl	100153a4 <__aeabi_fadd>
1001381a:	1c29      	adds	r1, r5, #0
1001381c:	1c06      	adds	r6, r0, #0
1001381e:	1c28      	adds	r0, r5, #0
10013820:	f002 f900 	bl	10015a24 <__aeabi_fmul>
10013824:	1c01      	adds	r1, r0, #0
10013826:	1c30      	adds	r0, r6, #0
10013828:	f001 fdbc 	bl	100153a4 <__aeabi_fadd>
1001382c:	f7fd f84e 	bl	100108cc <sqrtf>
10013830:	21fe      	movs	r1, #254	; 0xfe
10013832:	0589      	lsls	r1, r1, #22
10013834:	1c05      	adds	r5, r0, #0
10013836:	f001 fc8d 	bl	10015154 <__aeabi_fcmple>
1001383a:	2800      	cmp	r0, #0
1001383c:	d000      	beq.n	10013840 <inv_generate_accel_gyro_quaternion+0x5f8>
1001383e:	e0d3      	b.n	100139e8 <inv_generate_accel_gyro_quaternion+0x7a0>
10013840:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013842:	f002 fbc3 	bl	10015fcc <__aeabi_i2f>
10013846:	1c29      	adds	r1, r5, #0
10013848:	f001 ff22 	bl	10015690 <__aeabi_fdiv>
1001384c:	1c05      	adds	r5, r0, #0
1001384e:	20fe      	movs	r0, #254	; 0xfe
10013850:	1c29      	adds	r1, r5, #0
10013852:	0580      	lsls	r0, r0, #22
10013854:	f002 f9fa 	bl	10015c4c <__aeabi_fsub>
10013858:	2100      	movs	r1, #0
1001385a:	1c06      	adds	r6, r0, #0
1001385c:	f001 fc84 	bl	10015168 <__aeabi_fcmpgt>
10013860:	2800      	cmp	r0, #0
10013862:	d100      	bne.n	10013866 <inv_generate_accel_gyro_quaternion+0x61e>
10013864:	e0de      	b.n	10013a24 <inv_generate_accel_gyro_quaternion+0x7dc>
10013866:	21fc      	movs	r1, #252	; 0xfc
10013868:	1c30      	adds	r0, r6, #0
1001386a:	0589      	lsls	r1, r1, #22
1001386c:	f002 f8da 	bl	10015a24 <__aeabi_fmul>
10013870:	f7fd f82c 	bl	100108cc <sqrtf>
10013874:	21fe      	movs	r1, #254	; 0xfe
10013876:	1c06      	adds	r6, r0, #0
10013878:	0589      	lsls	r1, r1, #22
1001387a:	1c28      	adds	r0, r5, #0
1001387c:	f001 fd92 	bl	100153a4 <__aeabi_fadd>
10013880:	2100      	movs	r1, #0
10013882:	1c05      	adds	r5, r0, #0
10013884:	f001 fc70 	bl	10015168 <__aeabi_fcmpgt>
10013888:	2800      	cmp	r0, #0
1001388a:	d100      	bne.n	1001388e <inv_generate_accel_gyro_quaternion+0x646>
1001388c:	e0cc      	b.n	10013a28 <inv_generate_accel_gyro_quaternion+0x7e0>
1001388e:	21fc      	movs	r1, #252	; 0xfc
10013890:	1c28      	adds	r0, r5, #0
10013892:	0589      	lsls	r1, r1, #22
10013894:	f002 f8c6 	bl	10015a24 <__aeabi_fmul>
10013898:	f7fd f818 	bl	100108cc <sqrtf>
1001389c:	4681      	mov	r9, r0
1001389e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100138a0:	f002 fb94 	bl	10015fcc <__aeabi_i2f>
100138a4:	1c07      	adds	r7, r0, #0
100138a6:	6e20      	ldr	r0, [r4, #96]	; 0x60
100138a8:	f002 fb90 	bl	10015fcc <__aeabi_i2f>
100138ac:	1c39      	adds	r1, r7, #0
100138ae:	1c05      	adds	r5, r0, #0
100138b0:	1c38      	adds	r0, r7, #0
100138b2:	f002 f8b7 	bl	10015a24 <__aeabi_fmul>
100138b6:	1c29      	adds	r1, r5, #0
100138b8:	1c07      	adds	r7, r0, #0
100138ba:	1c28      	adds	r0, r5, #0
100138bc:	f002 f8b2 	bl	10015a24 <__aeabi_fmul>
100138c0:	1c01      	adds	r1, r0, #0
100138c2:	1c38      	adds	r0, r7, #0
100138c4:	f001 fd6e 	bl	100153a4 <__aeabi_fadd>
100138c8:	f7fd f800 	bl	100108cc <sqrtf>
100138cc:	21fe      	movs	r1, #254	; 0xfe
100138ce:	0589      	lsls	r1, r1, #22
100138d0:	1c07      	adds	r7, r0, #0
100138d2:	f001 fc3f 	bl	10015154 <__aeabi_fcmple>
100138d6:	4680      	mov	r8, r0
100138d8:	2800      	cmp	r0, #0
100138da:	d000      	beq.n	100138de <inv_generate_accel_gyro_quaternion+0x696>
100138dc:	e084      	b.n	100139e8 <inv_generate_accel_gyro_quaternion+0x7a0>
100138de:	219d      	movs	r1, #157	; 0x9d
100138e0:	4648      	mov	r0, r9
100138e2:	05c9      	lsls	r1, r1, #23
100138e4:	f002 f89e 	bl	10015a24 <__aeabi_fmul>
100138e8:	f002 fb4e 	bl	10015f88 <__aeabi_f2iz>
100138ec:	4d25      	ldr	r5, [pc, #148]	; (10013984 <inv_generate_accel_gyro_quaternion+0x73c>)
100138ee:	6128      	str	r0, [r5, #16]
100138f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
100138f2:	f002 fb6b 	bl	10015fcc <__aeabi_i2f>
100138f6:	1c39      	adds	r1, r7, #0
100138f8:	f001 feca 	bl	10015690 <__aeabi_fdiv>
100138fc:	1c01      	adds	r1, r0, #0
100138fe:	1c30      	adds	r0, r6, #0
10013900:	f002 f890 	bl	10015a24 <__aeabi_fmul>
10013904:	219d      	movs	r1, #157	; 0x9d
10013906:	05c9      	lsls	r1, r1, #23
10013908:	f002 f88c 	bl	10015a24 <__aeabi_fmul>
1001390c:	f002 fb3c 	bl	10015f88 <__aeabi_f2iz>
10013910:	2380      	movs	r3, #128	; 0x80
10013912:	061b      	lsls	r3, r3, #24
10013914:	469c      	mov	ip, r3
10013916:	6168      	str	r0, [r5, #20]
10013918:	6de0      	ldr	r0, [r4, #92]	; 0x5c
1001391a:	4466      	add	r6, ip
1001391c:	f002 fb56 	bl	10015fcc <__aeabi_i2f>
10013920:	1c39      	adds	r1, r7, #0
10013922:	f001 feb5 	bl	10015690 <__aeabi_fdiv>
10013926:	1c01      	adds	r1, r0, #0
10013928:	1c30      	adds	r0, r6, #0
1001392a:	f002 f87b 	bl	10015a24 <__aeabi_fmul>
1001392e:	219d      	movs	r1, #157	; 0x9d
10013930:	05c9      	lsls	r1, r1, #23
10013932:	f002 f877 	bl	10015a24 <__aeabi_fmul>
10013936:	f002 fb27 	bl	10015f88 <__aeabi_f2iz>
1001393a:	4643      	mov	r3, r8
1001393c:	61a8      	str	r0, [r5, #24]
1001393e:	61eb      	str	r3, [r5, #28]
10013940:	2390      	movs	r3, #144	; 0x90
10013942:	005b      	lsls	r3, r3, #1
10013944:	58e3      	ldr	r3, [r4, r3]
10013946:	05db      	lsls	r3, r3, #23
10013948:	d461      	bmi.n	10013a0e <inv_generate_accel_gyro_quaternion+0x7c6>
1001394a:	1c28      	adds	r0, r5, #0
1001394c:	a902      	add	r1, sp, #8
1001394e:	f7f6 fd43 	bl	1000a3d8 <inv_q_invert>
10013952:	1c28      	adds	r0, r5, #0
10013954:	1c2a      	adds	r2, r5, #0
10013956:	3010      	adds	r0, #16
10013958:	3220      	adds	r2, #32
1001395a:	a902      	add	r1, sp, #8
1001395c:	f7f6 fbbc 	bl	1000a0d8 <inv_q_mult>
10013960:	2390      	movs	r3, #144	; 0x90
10013962:	005b      	lsls	r3, r3, #1
10013964:	58e3      	ldr	r3, [r4, r3]
10013966:	e485      	b.n	10013274 <inv_generate_accel_gyro_quaternion+0x2c>
10013968:	001c9871 	.word	0x001c9871
1001396c:	40490fdb 	.word	0x40490fdb
10013970:	43340000 	.word	0x43340000
10013974:	49742400 	.word	0x49742400
10013978:	3fffffff 	.word	0x3fffffff
1001397c:	00001388 	.word	0x00001388
10013980:	00c49ba6 	.word	0x00c49ba6
10013984:	1001d264 	.word	0x1001d264
10013988:	1c29      	adds	r1, r5, #0
1001398a:	3011      	adds	r0, #17
1001398c:	315c      	adds	r1, #92	; 0x5c
1001398e:	30ff      	adds	r0, #255	; 0xff
10013990:	f7f6 fd22 	bl	1000a3d8 <inv_q_invert>
10013994:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013996:	05db      	lsls	r3, r3, #23
10013998:	d413      	bmi.n	100139c2 <inv_generate_accel_gyro_quaternion+0x77a>
1001399a:	59a3      	ldr	r3, [r4, r6]
1001399c:	e46a      	b.n	10013274 <inv_generate_accel_gyro_quaternion+0x2c>
1001399e:	2202      	movs	r2, #2
100139a0:	63aa      	str	r2, [r5, #56]	; 0x38
100139a2:	e609      	b.n	100135b8 <inv_generate_accel_gyro_quaternion+0x370>
100139a4:	1c20      	adds	r0, r4, #0
100139a6:	3011      	adds	r0, #17
100139a8:	30ff      	adds	r0, #255	; 0xff
100139aa:	1c29      	adds	r1, r5, #0
100139ac:	f7ff fb02 	bl	10012fb4 <inv_normalize_quat>
100139b0:	e467      	b.n	10013282 <inv_generate_accel_gyro_quaternion+0x3a>
100139b2:	2380      	movs	r3, #128	; 0x80
100139b4:	05db      	lsls	r3, r3, #23
100139b6:	64ab      	str	r3, [r5, #72]	; 0x48
100139b8:	2300      	movs	r3, #0
100139ba:	64eb      	str	r3, [r5, #76]	; 0x4c
100139bc:	652b      	str	r3, [r5, #80]	; 0x50
100139be:	656b      	str	r3, [r5, #84]	; 0x54
100139c0:	e6a3      	b.n	1001370a <inv_generate_accel_gyro_quaternion+0x4c2>
100139c2:	1c28      	adds	r0, r5, #0
100139c4:	a902      	add	r1, sp, #8
100139c6:	f7f6 fd07 	bl	1000a3d8 <inv_q_invert>
100139ca:	1c28      	adds	r0, r5, #0
100139cc:	1c2a      	adds	r2, r5, #0
100139ce:	3010      	adds	r0, #16
100139d0:	3220      	adds	r2, #32
100139d2:	a902      	add	r1, sp, #8
100139d4:	f7f6 fb80 	bl	1000a0d8 <inv_q_mult>
100139d8:	59a3      	ldr	r3, [r4, r6]
100139da:	e44b      	b.n	10013274 <inv_generate_accel_gyro_quaternion+0x2c>
100139dc:	23fa      	movs	r3, #250	; 0xfa
100139de:	059b      	lsls	r3, r3, #22
100139e0:	4699      	mov	r9, r3
100139e2:	e572      	b.n	100134ca <inv_generate_accel_gyro_quaternion+0x282>
100139e4:	2001      	movs	r0, #1
100139e6:	e6f9      	b.n	100137dc <inv_generate_accel_gyro_quaternion+0x594>
100139e8:	2380      	movs	r3, #128	; 0x80
100139ea:	4d11      	ldr	r5, [pc, #68]	; (10013a30 <inv_generate_accel_gyro_quaternion+0x7e8>)
100139ec:	05db      	lsls	r3, r3, #23
100139ee:	612b      	str	r3, [r5, #16]
100139f0:	2300      	movs	r3, #0
100139f2:	616b      	str	r3, [r5, #20]
100139f4:	61ab      	str	r3, [r5, #24]
100139f6:	61eb      	str	r3, [r5, #28]
100139f8:	e7a2      	b.n	10013940 <inv_generate_accel_gyro_quaternion+0x6f8>
100139fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100139fc:	490d      	ldr	r1, [pc, #52]	; (10013a34 <inv_generate_accel_gyro_quaternion+0x7ec>)
100139fe:	f001 fa63 	bl	10014ec8 <__aeabi_idiv>
10013a02:	2800      	cmp	r0, #0
10013a04:	dd12      	ble.n	10013a2c <inv_generate_accel_gyro_quaternion+0x7e4>
10013a06:	4c0c      	ldr	r4, [pc, #48]	; (10013a38 <inv_generate_accel_gyro_quaternion+0x7f0>)
10013a08:	00c0      	lsls	r0, r0, #3
10013a0a:	4344      	muls	r4, r0
10013a0c:	e48d      	b.n	1001332a <inv_generate_accel_gyro_quaternion+0xe2>
10013a0e:	1c20      	adds	r0, r4, #0
10013a10:	1c29      	adds	r1, r5, #0
10013a12:	3011      	adds	r0, #17
10013a14:	315c      	adds	r1, #92	; 0x5c
10013a16:	30ff      	adds	r0, #255	; 0xff
10013a18:	f7f6 fcde 	bl	1000a3d8 <inv_q_invert>
10013a1c:	e795      	b.n	1001394a <inv_generate_accel_gyro_quaternion+0x702>
10013a1e:	4b07      	ldr	r3, [pc, #28]	; (10013a3c <inv_generate_accel_gyro_quaternion+0x7f4>)
10013a20:	4699      	mov	r9, r3
10013a22:	e552      	b.n	100134ca <inv_generate_accel_gyro_quaternion+0x282>
10013a24:	2000      	movs	r0, #0
10013a26:	e723      	b.n	10013870 <inv_generate_accel_gyro_quaternion+0x628>
10013a28:	2000      	movs	r0, #0
10013a2a:	e735      	b.n	10013898 <inv_generate_accel_gyro_quaternion+0x650>
10013a2c:	4c04      	ldr	r4, [pc, #16]	; (10013a40 <inv_generate_accel_gyro_quaternion+0x7f8>)
10013a2e:	e47c      	b.n	1001332a <inv_generate_accel_gyro_quaternion+0xe2>
10013a30:	1001d264 	.word	0x1001d264
10013a34:	00001388 	.word	0x00001388
10013a38:	00c49ba6 	.word	0x00c49ba6
10013a3c:	3d75c28f 	.word	0x3d75c28f
10013a40:	0624dd30 	.word	0x0624dd30

10013a44 <inv_generate_quaternion>:
10013a44:	2280      	movs	r2, #128	; 0x80
10013a46:	b538      	push	{r3, r4, r5, lr}
10013a48:	6b03      	ldr	r3, [r0, #48]	; 0x30
10013a4a:	0052      	lsls	r2, r2, #1
10013a4c:	4213      	tst	r3, r2
10013a4e:	d102      	bne.n	10013a56 <inv_generate_quaternion+0x12>
10013a50:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013a52:	4213      	tst	r3, r2
10013a54:	d012      	beq.n	10013a7c <inv_generate_quaternion+0x38>
10013a56:	2390      	movs	r3, #144	; 0x90
10013a58:	22c0      	movs	r2, #192	; 0xc0
10013a5a:	005b      	lsls	r3, r3, #1
10013a5c:	58c3      	ldr	r3, [r0, r3]
10013a5e:	0092      	lsls	r2, r2, #2
10013a60:	1c04      	adds	r4, r0, #0
10013a62:	4013      	ands	r3, r2
10013a64:	4293      	cmp	r3, r2
10013a66:	d014      	beq.n	10013a92 <inv_generate_quaternion+0x4e>
10013a68:	f7ff fbee 	bl	10013248 <inv_generate_accel_gyro_quaternion>
10013a6c:	4d0e      	ldr	r5, [pc, #56]	; (10013aa8 <inv_generate_quaternion+0x64>)
10013a6e:	1c28      	adds	r0, r5, #0
10013a70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
10013a72:	3010      	adds	r0, #16
10013a74:	f7f6 ffec 	bl	1000aa50 <inv_store_gaming_quaternion>
10013a78:	2000      	movs	r0, #0
10013a7a:	bd38      	pop	{r3, r4, r5, pc}
10013a7c:	2390      	movs	r3, #144	; 0x90
10013a7e:	005b      	lsls	r3, r3, #1
10013a80:	58c3      	ldr	r3, [r0, r3]
10013a82:	4213      	tst	r3, r2
10013a84:	d0f8      	beq.n	10013a78 <inv_generate_quaternion+0x34>
10013a86:	22c0      	movs	r2, #192	; 0xc0
10013a88:	0092      	lsls	r2, r2, #2
10013a8a:	1c04      	adds	r4, r0, #0
10013a8c:	4013      	ands	r3, r2
10013a8e:	4293      	cmp	r3, r2
10013a90:	d1ea      	bne.n	10013a68 <inv_generate_quaternion+0x24>
10013a92:	4d05      	ldr	r5, [pc, #20]	; (10013aa8 <inv_generate_quaternion+0x64>)
10013a94:	1c21      	adds	r1, r4, #0
10013a96:	1c28      	adds	r0, r5, #0
10013a98:	3111      	adds	r1, #17
10013a9a:	31ff      	adds	r1, #255	; 0xff
10013a9c:	2210      	movs	r2, #16
10013a9e:	3010      	adds	r0, #16
10013aa0:	f004 fb15 	bl	100180ce <memcpy>
10013aa4:	e7e3      	b.n	10013a6e <inv_generate_quaternion+0x2a>
10013aa6:	46c0      	nop			; (mov r8, r8)
10013aa8:	1001d264 	.word	0x1001d264

10013aac <inv_stop_quaternion>:
10013aac:	b508      	push	{r3, lr}
10013aae:	4802      	ldr	r0, [pc, #8]	; (10013ab8 <inv_stop_quaternion+0xc>)
10013ab0:	f7f6 fa1a 	bl	10009ee8 <inv_unregister_data_cb>
10013ab4:	bd08      	pop	{r3, pc}
10013ab6:	46c0      	nop			; (mov r8, r8)
10013ab8:	10013a45 	.word	0x10013a45

10013abc <inv_init_quaternion>:
10013abc:	b510      	push	{r4, lr}
10013abe:	4c07      	ldr	r4, [pc, #28]	; (10013adc <inv_init_quaternion+0x20>)
10013ac0:	2100      	movs	r1, #0
10013ac2:	1c20      	adds	r0, r4, #0
10013ac4:	226c      	movs	r2, #108	; 0x6c
10013ac6:	f004 fb20 	bl	1001810a <memset>
10013aca:	2380      	movs	r3, #128	; 0x80
10013acc:	05db      	lsls	r3, r3, #23
10013ace:	2000      	movs	r0, #0
10013ad0:	6123      	str	r3, [r4, #16]
10013ad2:	6023      	str	r3, [r4, #0]
10013ad4:	6223      	str	r3, [r4, #32]
10013ad6:	63e3      	str	r3, [r4, #60]	; 0x3c
10013ad8:	65e3      	str	r3, [r4, #92]	; 0x5c
10013ada:	bd10      	pop	{r4, pc}
10013adc:	1001d264 	.word	0x1001d264

10013ae0 <inv_enable_quaternion>:
10013ae0:	b508      	push	{r3, lr}
10013ae2:	f7ff ffeb 	bl	10013abc <inv_init_quaternion>
10013ae6:	2800      	cmp	r0, #0
10013ae8:	d102      	bne.n	10013af0 <inv_enable_quaternion+0x10>
10013aea:	4802      	ldr	r0, [pc, #8]	; (10013af4 <inv_enable_quaternion+0x14>)
10013aec:	f7f7 f8f8 	bl	1000ace0 <inv_register_mpl_start_notification>
10013af0:	bd08      	pop	{r3, pc}
10013af2:	46c0      	nop			; (mov r8, r8)
10013af4:	100130a5 	.word	0x100130a5

10013af8 <inv_disable_quaternion>:
10013af8:	b508      	push	{r3, lr}
10013afa:	4803      	ldr	r0, [pc, #12]	; (10013b08 <inv_disable_quaternion+0x10>)
10013afc:	f7f6 f9f4 	bl	10009ee8 <inv_unregister_data_cb>
10013b00:	4802      	ldr	r0, [pc, #8]	; (10013b0c <inv_disable_quaternion+0x14>)
10013b02:	f7f7 f8bd 	bl	1000ac80 <inv_unregister_mpl_start_notification>
10013b06:	bd08      	pop	{r3, pc}
10013b08:	10013a45 	.word	0x10013a45
10013b0c:	100130a5 	.word	0x100130a5

10013b10 <cosf>:
10013b10:	b500      	push	{lr}
10013b12:	4a1c      	ldr	r2, [pc, #112]	; (10013b84 <cosf+0x74>)
10013b14:	0043      	lsls	r3, r0, #1
10013b16:	b083      	sub	sp, #12
10013b18:	085b      	lsrs	r3, r3, #1
10013b1a:	4293      	cmp	r3, r2
10013b1c:	dd18      	ble.n	10013b50 <cosf+0x40>
10013b1e:	4a1a      	ldr	r2, [pc, #104]	; (10013b88 <cosf+0x78>)
10013b20:	4293      	cmp	r3, r2
10013b22:	dd04      	ble.n	10013b2e <cosf+0x1e>
10013b24:	1c01      	adds	r1, r0, #0
10013b26:	f002 f891 	bl	10015c4c <__aeabi_fsub>
10013b2a:	b003      	add	sp, #12
10013b2c:	bd00      	pop	{pc}
10013b2e:	4669      	mov	r1, sp
10013b30:	f000 fa22 	bl	10013f78 <__ieee754_rem_pio2f>
10013b34:	2303      	movs	r3, #3
10013b36:	9901      	ldr	r1, [sp, #4]
10013b38:	4018      	ands	r0, r3
10013b3a:	2801      	cmp	r0, #1
10013b3c:	d014      	beq.n	10013b68 <cosf+0x58>
10013b3e:	2802      	cmp	r0, #2
10013b40:	d00a      	beq.n	10013b58 <cosf+0x48>
10013b42:	2800      	cmp	r0, #0
10013b44:	d019      	beq.n	10013b7a <cosf+0x6a>
10013b46:	9800      	ldr	r0, [sp, #0]
10013b48:	2201      	movs	r2, #1
10013b4a:	f000 fff9 	bl	10014b40 <__kernel_sinf>
10013b4e:	e7ec      	b.n	10013b2a <cosf+0x1a>
10013b50:	2100      	movs	r1, #0
10013b52:	f000 fb99 	bl	10014288 <__kernel_cosf>
10013b56:	e7e8      	b.n	10013b2a <cosf+0x1a>
10013b58:	9800      	ldr	r0, [sp, #0]
10013b5a:	f000 fb95 	bl	10014288 <__kernel_cosf>
10013b5e:	2380      	movs	r3, #128	; 0x80
10013b60:	061b      	lsls	r3, r3, #24
10013b62:	469c      	mov	ip, r3
10013b64:	4460      	add	r0, ip
10013b66:	e7e0      	b.n	10013b2a <cosf+0x1a>
10013b68:	2201      	movs	r2, #1
10013b6a:	9800      	ldr	r0, [sp, #0]
10013b6c:	f000 ffe8 	bl	10014b40 <__kernel_sinf>
10013b70:	2380      	movs	r3, #128	; 0x80
10013b72:	061b      	lsls	r3, r3, #24
10013b74:	469c      	mov	ip, r3
10013b76:	4460      	add	r0, ip
10013b78:	e7d7      	b.n	10013b2a <cosf+0x1a>
10013b7a:	9800      	ldr	r0, [sp, #0]
10013b7c:	f000 fb84 	bl	10014288 <__kernel_cosf>
10013b80:	e7d3      	b.n	10013b2a <cosf+0x1a>
10013b82:	46c0      	nop			; (mov r8, r8)
10013b84:	3f490fd8 	.word	0x3f490fd8
10013b88:	7f7fffff 	.word	0x7f7fffff

10013b8c <sinf>:
10013b8c:	b500      	push	{lr}
10013b8e:	4a1c      	ldr	r2, [pc, #112]	; (10013c00 <sinf+0x74>)
10013b90:	0043      	lsls	r3, r0, #1
10013b92:	b083      	sub	sp, #12
10013b94:	085b      	lsrs	r3, r3, #1
10013b96:	4293      	cmp	r3, r2
10013b98:	dd1b      	ble.n	10013bd2 <sinf+0x46>
10013b9a:	4a1a      	ldr	r2, [pc, #104]	; (10013c04 <sinf+0x78>)
10013b9c:	4293      	cmp	r3, r2
10013b9e:	dd04      	ble.n	10013baa <sinf+0x1e>
10013ba0:	1c01      	adds	r1, r0, #0
10013ba2:	f002 f853 	bl	10015c4c <__aeabi_fsub>
10013ba6:	b003      	add	sp, #12
10013ba8:	bd00      	pop	{pc}
10013baa:	4669      	mov	r1, sp
10013bac:	f000 f9e4 	bl	10013f78 <__ieee754_rem_pio2f>
10013bb0:	2303      	movs	r3, #3
10013bb2:	9901      	ldr	r1, [sp, #4]
10013bb4:	4018      	ands	r0, r3
10013bb6:	2801      	cmp	r0, #1
10013bb8:	d019      	beq.n	10013bee <sinf+0x62>
10013bba:	2802      	cmp	r0, #2
10013bbc:	d00e      	beq.n	10013bdc <sinf+0x50>
10013bbe:	2800      	cmp	r0, #0
10013bc0:	d019      	beq.n	10013bf6 <sinf+0x6a>
10013bc2:	9800      	ldr	r0, [sp, #0]
10013bc4:	f000 fb60 	bl	10014288 <__kernel_cosf>
10013bc8:	2380      	movs	r3, #128	; 0x80
10013bca:	061b      	lsls	r3, r3, #24
10013bcc:	469c      	mov	ip, r3
10013bce:	4460      	add	r0, ip
10013bd0:	e7e9      	b.n	10013ba6 <sinf+0x1a>
10013bd2:	2200      	movs	r2, #0
10013bd4:	2100      	movs	r1, #0
10013bd6:	f000 ffb3 	bl	10014b40 <__kernel_sinf>
10013bda:	e7e4      	b.n	10013ba6 <sinf+0x1a>
10013bdc:	9800      	ldr	r0, [sp, #0]
10013bde:	2201      	movs	r2, #1
10013be0:	f000 ffae 	bl	10014b40 <__kernel_sinf>
10013be4:	2380      	movs	r3, #128	; 0x80
10013be6:	061b      	lsls	r3, r3, #24
10013be8:	469c      	mov	ip, r3
10013bea:	4460      	add	r0, ip
10013bec:	e7db      	b.n	10013ba6 <sinf+0x1a>
10013bee:	9800      	ldr	r0, [sp, #0]
10013bf0:	f000 fb4a 	bl	10014288 <__kernel_cosf>
10013bf4:	e7d7      	b.n	10013ba6 <sinf+0x1a>
10013bf6:	9800      	ldr	r0, [sp, #0]
10013bf8:	2201      	movs	r2, #1
10013bfa:	f000 ffa1 	bl	10014b40 <__kernel_sinf>
10013bfe:	e7d2      	b.n	10013ba6 <sinf+0x1a>
10013c00:	3f490fd8 	.word	0x3f490fd8
10013c04:	7f7fffff 	.word	0x7f7fffff

10013c08 <acosf>:
10013c08:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c0a:	b08d      	sub	sp, #52	; 0x34
10013c0c:	1c04      	adds	r4, r0, #0
10013c0e:	f000 f84f 	bl	10013cb0 <__ieee754_acosf>
10013c12:	2300      	movs	r3, #0
10013c14:	4e23      	ldr	r6, [pc, #140]	; (10013ca4 <acosf+0x9c>)
10013c16:	1c05      	adds	r5, r0, #0
10013c18:	56f3      	ldrsb	r3, [r6, r3]
10013c1a:	3301      	adds	r3, #1
10013c1c:	d031      	beq.n	10013c82 <acosf+0x7a>
10013c1e:	1c21      	adds	r1, r4, #0
10013c20:	1c20      	adds	r0, r4, #0
10013c22:	f002 f999 	bl	10015f58 <__aeabi_fcmpun>
10013c26:	1e07      	subs	r7, r0, #0
10013c28:	d12b      	bne.n	10013c82 <acosf+0x7a>
10013c2a:	1c20      	adds	r0, r4, #0
10013c2c:	f7fd f8b2 	bl	10010d94 <fabsf>
10013c30:	21fe      	movs	r1, #254	; 0xfe
10013c32:	0589      	lsls	r1, r1, #22
10013c34:	f001 fa98 	bl	10015168 <__aeabi_fcmpgt>
10013c38:	2800      	cmp	r0, #0
10013c3a:	d022      	beq.n	10013c82 <acosf+0x7a>
10013c3c:	2301      	movs	r3, #1
10013c3e:	9302      	str	r3, [sp, #8]
10013c40:	4b19      	ldr	r3, [pc, #100]	; (10013ca8 <acosf+0xa0>)
10013c42:	1c20      	adds	r0, r4, #0
10013c44:	9303      	str	r3, [sp, #12]
10013c46:	970a      	str	r7, [sp, #40]	; 0x28
10013c48:	f004 f814 	bl	10017c74 <__aeabi_f2d>
10013c4c:	9006      	str	r0, [sp, #24]
10013c4e:	9107      	str	r1, [sp, #28]
10013c50:	9004      	str	r0, [sp, #16]
10013c52:	9105      	str	r1, [sp, #20]
10013c54:	4815      	ldr	r0, [pc, #84]	; (10013cac <acosf+0xa4>)
10013c56:	f7fc ff7b 	bl	10010b50 <nan>
10013c5a:	2300      	movs	r3, #0
10013c5c:	56f3      	ldrsb	r3, [r6, r3]
10013c5e:	9008      	str	r0, [sp, #32]
10013c60:	9109      	str	r1, [sp, #36]	; 0x24
10013c62:	2b02      	cmp	r3, #2
10013c64:	d010      	beq.n	10013c88 <acosf+0x80>
10013c66:	a802      	add	r0, sp, #8
10013c68:	f7fc ff70 	bl	10010b4c <matherr>
10013c6c:	2800      	cmp	r0, #0
10013c6e:	d00b      	beq.n	10013c88 <acosf+0x80>
10013c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013c72:	9301      	str	r3, [sp, #4]
10013c74:	2b00      	cmp	r3, #0
10013c76:	d10f      	bne.n	10013c98 <acosf+0x90>
10013c78:	9808      	ldr	r0, [sp, #32]
10013c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
10013c7c:	f004 f84e 	bl	10017d1c <__aeabi_d2f>
10013c80:	e000      	b.n	10013c84 <acosf+0x7c>
10013c82:	1c28      	adds	r0, r5, #0
10013c84:	b00d      	add	sp, #52	; 0x34
10013c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c88:	f004 f9dc 	bl	10018044 <__errno>
10013c8c:	2321      	movs	r3, #33	; 0x21
10013c8e:	6003      	str	r3, [r0, #0]
10013c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013c92:	9301      	str	r3, [sp, #4]
10013c94:	2b00      	cmp	r3, #0
10013c96:	d0ef      	beq.n	10013c78 <acosf+0x70>
10013c98:	f004 f9d4 	bl	10018044 <__errno>
10013c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013c9e:	9301      	str	r3, [sp, #4]
10013ca0:	6003      	str	r3, [r0, #0]
10013ca2:	e7e9      	b.n	10013c78 <acosf+0x70>
10013ca4:	1001b400 	.word	0x1001b400
10013ca8:	1001adcc 	.word	0x1001adcc
10013cac:	10019664 	.word	0x10019664

10013cb0 <__ieee754_acosf>:
10013cb0:	22fe      	movs	r2, #254	; 0xfe
10013cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013cb4:	0043      	lsls	r3, r0, #1
10013cb6:	1c04      	adds	r4, r0, #0
10013cb8:	085b      	lsrs	r3, r3, #1
10013cba:	0592      	lsls	r2, r2, #22
10013cbc:	4293      	cmp	r3, r2
10013cbe:	d011      	beq.n	10013ce4 <__ieee754_acosf+0x34>
10013cc0:	dc09      	bgt.n	10013cd6 <__ieee754_acosf+0x26>
10013cc2:	4a9d      	ldr	r2, [pc, #628]	; (10013f38 <__ieee754_acosf+0x288>)
10013cc4:	4293      	cmp	r3, r2
10013cc6:	dc12      	bgt.n	10013cee <__ieee754_acosf+0x3e>
10013cc8:	228c      	movs	r2, #140	; 0x8c
10013cca:	0592      	lsls	r2, r2, #22
10013ccc:	4293      	cmp	r3, r2
10013cce:	dd00      	ble.n	10013cd2 <__ieee754_acosf+0x22>
10013cd0:	e080      	b.n	10013dd4 <__ieee754_acosf+0x124>
10013cd2:	489a      	ldr	r0, [pc, #616]	; (10013f3c <__ieee754_acosf+0x28c>)
10013cd4:	e005      	b.n	10013ce2 <__ieee754_acosf+0x32>
10013cd6:	1c01      	adds	r1, r0, #0
10013cd8:	f001 ffb8 	bl	10015c4c <__aeabi_fsub>
10013cdc:	1c01      	adds	r1, r0, #0
10013cde:	f001 fcd7 	bl	10015690 <__aeabi_fdiv>
10013ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013ce4:	2000      	movs	r0, #0
10013ce6:	2c00      	cmp	r4, #0
10013ce8:	dcfb      	bgt.n	10013ce2 <__ieee754_acosf+0x32>
10013cea:	4895      	ldr	r0, [pc, #596]	; (10013f40 <__ieee754_acosf+0x290>)
10013cec:	e7f9      	b.n	10013ce2 <__ieee754_acosf+0x32>
10013cee:	2800      	cmp	r0, #0
10013cf0:	da00      	bge.n	10013cf4 <__ieee754_acosf+0x44>
10013cf2:	e0c3      	b.n	10013e7c <__ieee754_acosf+0x1cc>
10013cf4:	1c01      	adds	r1, r0, #0
10013cf6:	20fe      	movs	r0, #254	; 0xfe
10013cf8:	0580      	lsls	r0, r0, #22
10013cfa:	f001 ffa7 	bl	10015c4c <__aeabi_fsub>
10013cfe:	21fc      	movs	r1, #252	; 0xfc
10013d00:	0589      	lsls	r1, r1, #22
10013d02:	f001 fe8f 	bl	10015a24 <__aeabi_fmul>
10013d06:	1c04      	adds	r4, r0, #0
10013d08:	f7fc fec4 	bl	10010a94 <__ieee754_sqrtf>
10013d0c:	498d      	ldr	r1, [pc, #564]	; (10013f44 <__ieee754_acosf+0x294>)
10013d0e:	1c06      	adds	r6, r0, #0
10013d10:	0b05      	lsrs	r5, r0, #12
10013d12:	1c20      	adds	r0, r4, #0
10013d14:	f001 fe86 	bl	10015a24 <__aeabi_fmul>
10013d18:	498b      	ldr	r1, [pc, #556]	; (10013f48 <__ieee754_acosf+0x298>)
10013d1a:	f001 fb43 	bl	100153a4 <__aeabi_fadd>
10013d1e:	1c21      	adds	r1, r4, #0
10013d20:	f001 fe80 	bl	10015a24 <__aeabi_fmul>
10013d24:	4989      	ldr	r1, [pc, #548]	; (10013f4c <__ieee754_acosf+0x29c>)
10013d26:	f001 ff91 	bl	10015c4c <__aeabi_fsub>
10013d2a:	1c21      	adds	r1, r4, #0
10013d2c:	f001 fe7a 	bl	10015a24 <__aeabi_fmul>
10013d30:	4987      	ldr	r1, [pc, #540]	; (10013f50 <__ieee754_acosf+0x2a0>)
10013d32:	f001 fb37 	bl	100153a4 <__aeabi_fadd>
10013d36:	1c21      	adds	r1, r4, #0
10013d38:	f001 fe74 	bl	10015a24 <__aeabi_fmul>
10013d3c:	4985      	ldr	r1, [pc, #532]	; (10013f54 <__ieee754_acosf+0x2a4>)
10013d3e:	f001 ff85 	bl	10015c4c <__aeabi_fsub>
10013d42:	1c21      	adds	r1, r4, #0
10013d44:	f001 fe6e 	bl	10015a24 <__aeabi_fmul>
10013d48:	4983      	ldr	r1, [pc, #524]	; (10013f58 <__ieee754_acosf+0x2a8>)
10013d4a:	f001 fb2b 	bl	100153a4 <__aeabi_fadd>
10013d4e:	1c21      	adds	r1, r4, #0
10013d50:	f001 fe68 	bl	10015a24 <__aeabi_fmul>
10013d54:	4981      	ldr	r1, [pc, #516]	; (10013f5c <__ieee754_acosf+0x2ac>)
10013d56:	1c07      	adds	r7, r0, #0
10013d58:	1c20      	adds	r0, r4, #0
10013d5a:	f001 fe63 	bl	10015a24 <__aeabi_fmul>
10013d5e:	4980      	ldr	r1, [pc, #512]	; (10013f60 <__ieee754_acosf+0x2b0>)
10013d60:	f001 ff74 	bl	10015c4c <__aeabi_fsub>
10013d64:	1c21      	adds	r1, r4, #0
10013d66:	f001 fe5d 	bl	10015a24 <__aeabi_fmul>
10013d6a:	497e      	ldr	r1, [pc, #504]	; (10013f64 <__ieee754_acosf+0x2b4>)
10013d6c:	f001 fb1a 	bl	100153a4 <__aeabi_fadd>
10013d70:	1c21      	adds	r1, r4, #0
10013d72:	f001 fe57 	bl	10015a24 <__aeabi_fmul>
10013d76:	497c      	ldr	r1, [pc, #496]	; (10013f68 <__ieee754_acosf+0x2b8>)
10013d78:	f001 ff68 	bl	10015c4c <__aeabi_fsub>
10013d7c:	1c21      	adds	r1, r4, #0
10013d7e:	f001 fe51 	bl	10015a24 <__aeabi_fmul>
10013d82:	21fe      	movs	r1, #254	; 0xfe
10013d84:	0589      	lsls	r1, r1, #22
10013d86:	f001 fb0d 	bl	100153a4 <__aeabi_fadd>
10013d8a:	1c01      	adds	r1, r0, #0
10013d8c:	1c38      	adds	r0, r7, #0
10013d8e:	f001 fc7f 	bl	10015690 <__aeabi_fdiv>
10013d92:	1c31      	adds	r1, r6, #0
10013d94:	f001 fe46 	bl	10015a24 <__aeabi_fmul>
10013d98:	032d      	lsls	r5, r5, #12
10013d9a:	1c07      	adds	r7, r0, #0
10013d9c:	1c29      	adds	r1, r5, #0
10013d9e:	1c28      	adds	r0, r5, #0
10013da0:	f001 fe40 	bl	10015a24 <__aeabi_fmul>
10013da4:	1c01      	adds	r1, r0, #0
10013da6:	1c20      	adds	r0, r4, #0
10013da8:	f001 ff50 	bl	10015c4c <__aeabi_fsub>
10013dac:	1c29      	adds	r1, r5, #0
10013dae:	1c04      	adds	r4, r0, #0
10013db0:	1c30      	adds	r0, r6, #0
10013db2:	f001 faf7 	bl	100153a4 <__aeabi_fadd>
10013db6:	1c01      	adds	r1, r0, #0
10013db8:	1c20      	adds	r0, r4, #0
10013dba:	f001 fc69 	bl	10015690 <__aeabi_fdiv>
10013dbe:	1c01      	adds	r1, r0, #0
10013dc0:	1c38      	adds	r0, r7, #0
10013dc2:	f001 faef 	bl	100153a4 <__aeabi_fadd>
10013dc6:	1c29      	adds	r1, r5, #0
10013dc8:	f001 faec 	bl	100153a4 <__aeabi_fadd>
10013dcc:	1c01      	adds	r1, r0, #0
10013dce:	f001 fae9 	bl	100153a4 <__aeabi_fadd>
10013dd2:	e786      	b.n	10013ce2 <__ieee754_acosf+0x32>
10013dd4:	1c01      	adds	r1, r0, #0
10013dd6:	f001 fe25 	bl	10015a24 <__aeabi_fmul>
10013dda:	495a      	ldr	r1, [pc, #360]	; (10013f44 <__ieee754_acosf+0x294>)
10013ddc:	1c05      	adds	r5, r0, #0
10013dde:	f001 fe21 	bl	10015a24 <__aeabi_fmul>
10013de2:	4959      	ldr	r1, [pc, #356]	; (10013f48 <__ieee754_acosf+0x298>)
10013de4:	f001 fade 	bl	100153a4 <__aeabi_fadd>
10013de8:	1c29      	adds	r1, r5, #0
10013dea:	f001 fe1b 	bl	10015a24 <__aeabi_fmul>
10013dee:	4957      	ldr	r1, [pc, #348]	; (10013f4c <__ieee754_acosf+0x29c>)
10013df0:	f001 ff2c 	bl	10015c4c <__aeabi_fsub>
10013df4:	1c29      	adds	r1, r5, #0
10013df6:	f001 fe15 	bl	10015a24 <__aeabi_fmul>
10013dfa:	4955      	ldr	r1, [pc, #340]	; (10013f50 <__ieee754_acosf+0x2a0>)
10013dfc:	f001 fad2 	bl	100153a4 <__aeabi_fadd>
10013e00:	1c29      	adds	r1, r5, #0
10013e02:	f001 fe0f 	bl	10015a24 <__aeabi_fmul>
10013e06:	4953      	ldr	r1, [pc, #332]	; (10013f54 <__ieee754_acosf+0x2a4>)
10013e08:	f001 ff20 	bl	10015c4c <__aeabi_fsub>
10013e0c:	1c29      	adds	r1, r5, #0
10013e0e:	f001 fe09 	bl	10015a24 <__aeabi_fmul>
10013e12:	4951      	ldr	r1, [pc, #324]	; (10013f58 <__ieee754_acosf+0x2a8>)
10013e14:	f001 fac6 	bl	100153a4 <__aeabi_fadd>
10013e18:	1c29      	adds	r1, r5, #0
10013e1a:	f001 fe03 	bl	10015a24 <__aeabi_fmul>
10013e1e:	494f      	ldr	r1, [pc, #316]	; (10013f5c <__ieee754_acosf+0x2ac>)
10013e20:	1c06      	adds	r6, r0, #0
10013e22:	1c28      	adds	r0, r5, #0
10013e24:	f001 fdfe 	bl	10015a24 <__aeabi_fmul>
10013e28:	494d      	ldr	r1, [pc, #308]	; (10013f60 <__ieee754_acosf+0x2b0>)
10013e2a:	f001 ff0f 	bl	10015c4c <__aeabi_fsub>
10013e2e:	1c29      	adds	r1, r5, #0
10013e30:	f001 fdf8 	bl	10015a24 <__aeabi_fmul>
10013e34:	494b      	ldr	r1, [pc, #300]	; (10013f64 <__ieee754_acosf+0x2b4>)
10013e36:	f001 fab5 	bl	100153a4 <__aeabi_fadd>
10013e3a:	1c29      	adds	r1, r5, #0
10013e3c:	f001 fdf2 	bl	10015a24 <__aeabi_fmul>
10013e40:	4949      	ldr	r1, [pc, #292]	; (10013f68 <__ieee754_acosf+0x2b8>)
10013e42:	f001 ff03 	bl	10015c4c <__aeabi_fsub>
10013e46:	1c29      	adds	r1, r5, #0
10013e48:	f001 fdec 	bl	10015a24 <__aeabi_fmul>
10013e4c:	21fe      	movs	r1, #254	; 0xfe
10013e4e:	0589      	lsls	r1, r1, #22
10013e50:	f001 faa8 	bl	100153a4 <__aeabi_fadd>
10013e54:	1c01      	adds	r1, r0, #0
10013e56:	1c30      	adds	r0, r6, #0
10013e58:	f001 fc1a 	bl	10015690 <__aeabi_fdiv>
10013e5c:	1c21      	adds	r1, r4, #0
10013e5e:	f001 fde1 	bl	10015a24 <__aeabi_fmul>
10013e62:	1c01      	adds	r1, r0, #0
10013e64:	4841      	ldr	r0, [pc, #260]	; (10013f6c <__ieee754_acosf+0x2bc>)
10013e66:	f001 fef1 	bl	10015c4c <__aeabi_fsub>
10013e6a:	1c01      	adds	r1, r0, #0
10013e6c:	1c20      	adds	r0, r4, #0
10013e6e:	f001 feed 	bl	10015c4c <__aeabi_fsub>
10013e72:	1c01      	adds	r1, r0, #0
10013e74:	483e      	ldr	r0, [pc, #248]	; (10013f70 <__ieee754_acosf+0x2c0>)
10013e76:	f001 fee9 	bl	10015c4c <__aeabi_fsub>
10013e7a:	e732      	b.n	10013ce2 <__ieee754_acosf+0x32>
10013e7c:	21fe      	movs	r1, #254	; 0xfe
10013e7e:	0589      	lsls	r1, r1, #22
10013e80:	f001 fa90 	bl	100153a4 <__aeabi_fadd>
10013e84:	21fc      	movs	r1, #252	; 0xfc
10013e86:	0589      	lsls	r1, r1, #22
10013e88:	f001 fdcc 	bl	10015a24 <__aeabi_fmul>
10013e8c:	492d      	ldr	r1, [pc, #180]	; (10013f44 <__ieee754_acosf+0x294>)
10013e8e:	1c04      	adds	r4, r0, #0
10013e90:	f001 fdc8 	bl	10015a24 <__aeabi_fmul>
10013e94:	492c      	ldr	r1, [pc, #176]	; (10013f48 <__ieee754_acosf+0x298>)
10013e96:	f001 fa85 	bl	100153a4 <__aeabi_fadd>
10013e9a:	1c21      	adds	r1, r4, #0
10013e9c:	f001 fdc2 	bl	10015a24 <__aeabi_fmul>
10013ea0:	492a      	ldr	r1, [pc, #168]	; (10013f4c <__ieee754_acosf+0x29c>)
10013ea2:	f001 fed3 	bl	10015c4c <__aeabi_fsub>
10013ea6:	1c21      	adds	r1, r4, #0
10013ea8:	f001 fdbc 	bl	10015a24 <__aeabi_fmul>
10013eac:	4928      	ldr	r1, [pc, #160]	; (10013f50 <__ieee754_acosf+0x2a0>)
10013eae:	f001 fa79 	bl	100153a4 <__aeabi_fadd>
10013eb2:	1c21      	adds	r1, r4, #0
10013eb4:	f001 fdb6 	bl	10015a24 <__aeabi_fmul>
10013eb8:	4926      	ldr	r1, [pc, #152]	; (10013f54 <__ieee754_acosf+0x2a4>)
10013eba:	f001 fec7 	bl	10015c4c <__aeabi_fsub>
10013ebe:	1c21      	adds	r1, r4, #0
10013ec0:	f001 fdb0 	bl	10015a24 <__aeabi_fmul>
10013ec4:	4924      	ldr	r1, [pc, #144]	; (10013f58 <__ieee754_acosf+0x2a8>)
10013ec6:	f001 fa6d 	bl	100153a4 <__aeabi_fadd>
10013eca:	1c21      	adds	r1, r4, #0
10013ecc:	f001 fdaa 	bl	10015a24 <__aeabi_fmul>
10013ed0:	1c06      	adds	r6, r0, #0
10013ed2:	1c20      	adds	r0, r4, #0
10013ed4:	f7fc fdde 	bl	10010a94 <__ieee754_sqrtf>
10013ed8:	4920      	ldr	r1, [pc, #128]	; (10013f5c <__ieee754_acosf+0x2ac>)
10013eda:	1c05      	adds	r5, r0, #0
10013edc:	1c20      	adds	r0, r4, #0
10013ede:	f001 fda1 	bl	10015a24 <__aeabi_fmul>
10013ee2:	491f      	ldr	r1, [pc, #124]	; (10013f60 <__ieee754_acosf+0x2b0>)
10013ee4:	f001 feb2 	bl	10015c4c <__aeabi_fsub>
10013ee8:	1c21      	adds	r1, r4, #0
10013eea:	f001 fd9b 	bl	10015a24 <__aeabi_fmul>
10013eee:	491d      	ldr	r1, [pc, #116]	; (10013f64 <__ieee754_acosf+0x2b4>)
10013ef0:	f001 fa58 	bl	100153a4 <__aeabi_fadd>
10013ef4:	1c21      	adds	r1, r4, #0
10013ef6:	f001 fd95 	bl	10015a24 <__aeabi_fmul>
10013efa:	491b      	ldr	r1, [pc, #108]	; (10013f68 <__ieee754_acosf+0x2b8>)
10013efc:	f001 fea6 	bl	10015c4c <__aeabi_fsub>
10013f00:	1c21      	adds	r1, r4, #0
10013f02:	f001 fd8f 	bl	10015a24 <__aeabi_fmul>
10013f06:	21fe      	movs	r1, #254	; 0xfe
10013f08:	0589      	lsls	r1, r1, #22
10013f0a:	f001 fa4b 	bl	100153a4 <__aeabi_fadd>
10013f0e:	1c01      	adds	r1, r0, #0
10013f10:	1c30      	adds	r0, r6, #0
10013f12:	f001 fbbd 	bl	10015690 <__aeabi_fdiv>
10013f16:	1c29      	adds	r1, r5, #0
10013f18:	f001 fd84 	bl	10015a24 <__aeabi_fmul>
10013f1c:	4913      	ldr	r1, [pc, #76]	; (10013f6c <__ieee754_acosf+0x2bc>)
10013f1e:	f001 fe95 	bl	10015c4c <__aeabi_fsub>
10013f22:	1c29      	adds	r1, r5, #0
10013f24:	f001 fa3e 	bl	100153a4 <__aeabi_fadd>
10013f28:	1c01      	adds	r1, r0, #0
10013f2a:	f001 fa3b 	bl	100153a4 <__aeabi_fadd>
10013f2e:	1c01      	adds	r1, r0, #0
10013f30:	4810      	ldr	r0, [pc, #64]	; (10013f74 <__ieee754_acosf+0x2c4>)
10013f32:	f001 fe8b 	bl	10015c4c <__aeabi_fsub>
10013f36:	e6d4      	b.n	10013ce2 <__ieee754_acosf+0x32>
10013f38:	3effffff 	.word	0x3effffff
10013f3c:	3fc90fdb 	.word	0x3fc90fdb
10013f40:	40490fdb 	.word	0x40490fdb
10013f44:	3811ef08 	.word	0x3811ef08
10013f48:	3a4f7f04 	.word	0x3a4f7f04
10013f4c:	3d241146 	.word	0x3d241146
10013f50:	3e4e0aa8 	.word	0x3e4e0aa8
10013f54:	3ea6b090 	.word	0x3ea6b090
10013f58:	3e2aaaab 	.word	0x3e2aaaab
10013f5c:	3d9dc62e 	.word	0x3d9dc62e
10013f60:	3f303361 	.word	0x3f303361
10013f64:	4001572d 	.word	0x4001572d
10013f68:	4019d139 	.word	0x4019d139
10013f6c:	33a22168 	.word	0x33a22168
10013f70:	3fc90fda 	.word	0x3fc90fda
10013f74:	40490fda 	.word	0x40490fda

10013f78 <__ieee754_rem_pio2f>:
10013f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f7a:	465f      	mov	r7, fp
10013f7c:	4656      	mov	r6, sl
10013f7e:	4644      	mov	r4, r8
10013f80:	464d      	mov	r5, r9
10013f82:	b4f0      	push	{r4, r5, r6, r7}
10013f84:	0043      	lsls	r3, r0, #1
10013f86:	085f      	lsrs	r7, r3, #1
10013f88:	4bb1      	ldr	r3, [pc, #708]	; (10014250 <__ieee754_rem_pio2f+0x2d8>)
10013f8a:	b089      	sub	sp, #36	; 0x24
10013f8c:	000c      	movs	r4, r1
10013f8e:	0006      	movs	r6, r0
10013f90:	429f      	cmp	r7, r3
10013f92:	dd6f      	ble.n	10014074 <__ieee754_rem_pio2f+0xfc>
10013f94:	4baf      	ldr	r3, [pc, #700]	; (10014254 <__ieee754_rem_pio2f+0x2dc>)
10013f96:	429f      	cmp	r7, r3
10013f98:	dc1b      	bgt.n	10013fd2 <__ieee754_rem_pio2f+0x5a>
10013f9a:	49af      	ldr	r1, [pc, #700]	; (10014258 <__ieee754_rem_pio2f+0x2e0>)
10013f9c:	2800      	cmp	r0, #0
10013f9e:	dc00      	bgt.n	10013fa2 <__ieee754_rem_pio2f+0x2a>
10013fa0:	e10b      	b.n	100141ba <__ieee754_rem_pio2f+0x242>
10013fa2:	f001 fe53 	bl	10015c4c <__aeabi_fsub>
10013fa6:	230f      	movs	r3, #15
10013fa8:	003a      	movs	r2, r7
10013faa:	439a      	bics	r2, r3
10013fac:	4bab      	ldr	r3, [pc, #684]	; (1001425c <__ieee754_rem_pio2f+0x2e4>)
10013fae:	1c05      	adds	r5, r0, #0
10013fb0:	429a      	cmp	r2, r3
10013fb2:	d100      	bne.n	10013fb6 <__ieee754_rem_pio2f+0x3e>
10013fb4:	e070      	b.n	10014098 <__ieee754_rem_pio2f+0x120>
10013fb6:	49aa      	ldr	r1, [pc, #680]	; (10014260 <__ieee754_rem_pio2f+0x2e8>)
10013fb8:	f001 fe48 	bl	10015c4c <__aeabi_fsub>
10013fbc:	1c01      	adds	r1, r0, #0
10013fbe:	6020      	str	r0, [r4, #0]
10013fc0:	1c28      	adds	r0, r5, #0
10013fc2:	f001 fe43 	bl	10015c4c <__aeabi_fsub>
10013fc6:	49a6      	ldr	r1, [pc, #664]	; (10014260 <__ieee754_rem_pio2f+0x2e8>)
10013fc8:	f001 fe40 	bl	10015c4c <__aeabi_fsub>
10013fcc:	6060      	str	r0, [r4, #4]
10013fce:	2001      	movs	r0, #1
10013fd0:	e054      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
10013fd2:	4ba4      	ldr	r3, [pc, #656]	; (10014264 <__ieee754_rem_pio2f+0x2ec>)
10013fd4:	429f      	cmp	r7, r3
10013fd6:	dc00      	bgt.n	10013fda <__ieee754_rem_pio2f+0x62>
10013fd8:	e070      	b.n	100140bc <__ieee754_rem_pio2f+0x144>
10013fda:	4ba3      	ldr	r3, [pc, #652]	; (10014268 <__ieee754_rem_pio2f+0x2f0>)
10013fdc:	429f      	cmp	r7, r3
10013fde:	dc54      	bgt.n	1001408a <__ieee754_rem_pio2f+0x112>
10013fe0:	2286      	movs	r2, #134	; 0x86
10013fe2:	4252      	negs	r2, r2
10013fe4:	4691      	mov	r9, r2
10013fe6:	15fb      	asrs	r3, r7, #23
10013fe8:	4499      	add	r9, r3
10013fea:	464b      	mov	r3, r9
10013fec:	05dd      	lsls	r5, r3, #23
10013fee:	1b7d      	subs	r5, r7, r5
10013ff0:	1c28      	adds	r0, r5, #0
10013ff2:	f001 ffc9 	bl	10015f88 <__aeabi_f2iz>
10013ff6:	f001 ffe9 	bl	10015fcc <__aeabi_i2f>
10013ffa:	1c01      	adds	r1, r0, #0
10013ffc:	9005      	str	r0, [sp, #20]
10013ffe:	1c28      	adds	r0, r5, #0
10014000:	f001 fe24 	bl	10015c4c <__aeabi_fsub>
10014004:	2187      	movs	r1, #135	; 0x87
10014006:	05c9      	lsls	r1, r1, #23
10014008:	f001 fd0c 	bl	10015a24 <__aeabi_fmul>
1001400c:	4680      	mov	r8, r0
1001400e:	f001 ffbb 	bl	10015f88 <__aeabi_f2iz>
10014012:	f001 ffdb 	bl	10015fcc <__aeabi_i2f>
10014016:	1c01      	adds	r1, r0, #0
10014018:	9006      	str	r0, [sp, #24]
1001401a:	1c05      	adds	r5, r0, #0
1001401c:	4640      	mov	r0, r8
1001401e:	f001 fe15 	bl	10015c4c <__aeabi_fsub>
10014022:	2187      	movs	r1, #135	; 0x87
10014024:	05c9      	lsls	r1, r1, #23
10014026:	f001 fcfd 	bl	10015a24 <__aeabi_fmul>
1001402a:	2100      	movs	r1, #0
1001402c:	9007      	str	r0, [sp, #28]
1001402e:	f001 f881 	bl	10015134 <__aeabi_fcmpeq>
10014032:	2800      	cmp	r0, #0
10014034:	d100      	bne.n	10014038 <__ieee754_rem_pio2f+0xc0>
10014036:	e0d8      	b.n	100141ea <__ieee754_rem_pio2f+0x272>
10014038:	2100      	movs	r1, #0
1001403a:	1c28      	adds	r0, r5, #0
1001403c:	f001 f87a 	bl	10015134 <__aeabi_fcmpeq>
10014040:	2202      	movs	r2, #2
10014042:	1e43      	subs	r3, r0, #1
10014044:	4198      	sbcs	r0, r3
10014046:	1a13      	subs	r3, r2, r0
10014048:	4a88      	ldr	r2, [pc, #544]	; (1001426c <__ieee754_rem_pio2f+0x2f4>)
1001404a:	0021      	movs	r1, r4
1001404c:	9201      	str	r2, [sp, #4]
1001404e:	2202      	movs	r2, #2
10014050:	a805      	add	r0, sp, #20
10014052:	9200      	str	r2, [sp, #0]
10014054:	464a      	mov	r2, r9
10014056:	f000 f9e1 	bl	1001441c <__kernel_rem_pio2f>
1001405a:	2e00      	cmp	r6, #0
1001405c:	da0e      	bge.n	1001407c <__ieee754_rem_pio2f+0x104>
1001405e:	2280      	movs	r2, #128	; 0x80
10014060:	0612      	lsls	r2, r2, #24
10014062:	4694      	mov	ip, r2
10014064:	6823      	ldr	r3, [r4, #0]
10014066:	4240      	negs	r0, r0
10014068:	4463      	add	r3, ip
1001406a:	6023      	str	r3, [r4, #0]
1001406c:	6863      	ldr	r3, [r4, #4]
1001406e:	4463      	add	r3, ip
10014070:	6063      	str	r3, [r4, #4]
10014072:	e003      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
10014074:	2300      	movs	r3, #0
10014076:	6008      	str	r0, [r1, #0]
10014078:	2000      	movs	r0, #0
1001407a:	604b      	str	r3, [r1, #4]
1001407c:	b009      	add	sp, #36	; 0x24
1001407e:	bc3c      	pop	{r2, r3, r4, r5}
10014080:	4690      	mov	r8, r2
10014082:	4699      	mov	r9, r3
10014084:	46a2      	mov	sl, r4
10014086:	46ab      	mov	fp, r5
10014088:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001408a:	1c01      	adds	r1, r0, #0
1001408c:	f001 fdde 	bl	10015c4c <__aeabi_fsub>
10014090:	6060      	str	r0, [r4, #4]
10014092:	6020      	str	r0, [r4, #0]
10014094:	2000      	movs	r0, #0
10014096:	e7f1      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
10014098:	4975      	ldr	r1, [pc, #468]	; (10014270 <__ieee754_rem_pio2f+0x2f8>)
1001409a:	f001 fdd7 	bl	10015c4c <__aeabi_fsub>
1001409e:	4975      	ldr	r1, [pc, #468]	; (10014274 <__ieee754_rem_pio2f+0x2fc>)
100140a0:	1c05      	adds	r5, r0, #0
100140a2:	f001 fdd3 	bl	10015c4c <__aeabi_fsub>
100140a6:	1c01      	adds	r1, r0, #0
100140a8:	6020      	str	r0, [r4, #0]
100140aa:	1c28      	adds	r0, r5, #0
100140ac:	f001 fdce 	bl	10015c4c <__aeabi_fsub>
100140b0:	4970      	ldr	r1, [pc, #448]	; (10014274 <__ieee754_rem_pio2f+0x2fc>)
100140b2:	f001 fdcb 	bl	10015c4c <__aeabi_fsub>
100140b6:	6060      	str	r0, [r4, #4]
100140b8:	2001      	movs	r0, #1
100140ba:	e7df      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
100140bc:	f7fc fe6a 	bl	10010d94 <fabsf>
100140c0:	496d      	ldr	r1, [pc, #436]	; (10014278 <__ieee754_rem_pio2f+0x300>)
100140c2:	4680      	mov	r8, r0
100140c4:	f001 fcae 	bl	10015a24 <__aeabi_fmul>
100140c8:	21fc      	movs	r1, #252	; 0xfc
100140ca:	0589      	lsls	r1, r1, #22
100140cc:	f001 f96a 	bl	100153a4 <__aeabi_fadd>
100140d0:	f001 ff5a 	bl	10015f88 <__aeabi_f2iz>
100140d4:	0005      	movs	r5, r0
100140d6:	f001 ff79 	bl	10015fcc <__aeabi_i2f>
100140da:	495f      	ldr	r1, [pc, #380]	; (10014258 <__ieee754_rem_pio2f+0x2e0>)
100140dc:	4681      	mov	r9, r0
100140de:	f001 fca1 	bl	10015a24 <__aeabi_fmul>
100140e2:	1c01      	adds	r1, r0, #0
100140e4:	4640      	mov	r0, r8
100140e6:	f001 fdb1 	bl	10015c4c <__aeabi_fsub>
100140ea:	495d      	ldr	r1, [pc, #372]	; (10014260 <__ieee754_rem_pio2f+0x2e8>)
100140ec:	4680      	mov	r8, r0
100140ee:	4648      	mov	r0, r9
100140f0:	f001 fc98 	bl	10015a24 <__aeabi_fmul>
100140f4:	4682      	mov	sl, r0
100140f6:	2d1f      	cmp	r5, #31
100140f8:	dc26      	bgt.n	10014148 <__ieee754_rem_pio2f+0x1d0>
100140fa:	23ff      	movs	r3, #255	; 0xff
100140fc:	003a      	movs	r2, r7
100140fe:	495f      	ldr	r1, [pc, #380]	; (1001427c <__ieee754_rem_pio2f+0x304>)
10014100:	439a      	bics	r2, r3
10014102:	1e6b      	subs	r3, r5, #1
10014104:	009b      	lsls	r3, r3, #2
10014106:	585b      	ldr	r3, [r3, r1]
10014108:	429a      	cmp	r2, r3
1001410a:	d01d      	beq.n	10014148 <__ieee754_rem_pio2f+0x1d0>
1001410c:	4651      	mov	r1, sl
1001410e:	4640      	mov	r0, r8
10014110:	f001 fd9c 	bl	10015c4c <__aeabi_fsub>
10014114:	4683      	mov	fp, r0
10014116:	465b      	mov	r3, fp
10014118:	6023      	str	r3, [r4, #0]
1001411a:	4659      	mov	r1, fp
1001411c:	4640      	mov	r0, r8
1001411e:	f001 fd95 	bl	10015c4c <__aeabi_fsub>
10014122:	4651      	mov	r1, sl
10014124:	f001 fd92 	bl	10015c4c <__aeabi_fsub>
10014128:	1c03      	adds	r3, r0, #0
1001412a:	6060      	str	r0, [r4, #4]
1001412c:	0028      	movs	r0, r5
1001412e:	2e00      	cmp	r6, #0
10014130:	daa4      	bge.n	1001407c <__ieee754_rem_pio2f+0x104>
10014132:	2280      	movs	r2, #128	; 0x80
10014134:	0612      	lsls	r2, r2, #24
10014136:	445a      	add	r2, fp
10014138:	6022      	str	r2, [r4, #0]
1001413a:	2280      	movs	r2, #128	; 0x80
1001413c:	0612      	lsls	r2, r2, #24
1001413e:	4694      	mov	ip, r2
10014140:	4463      	add	r3, ip
10014142:	6063      	str	r3, [r4, #4]
10014144:	4268      	negs	r0, r5
10014146:	e799      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
10014148:	4651      	mov	r1, sl
1001414a:	4640      	mov	r0, r8
1001414c:	f001 fd7e 	bl	10015c4c <__aeabi_fsub>
10014150:	15fb      	asrs	r3, r7, #23
10014152:	21ff      	movs	r1, #255	; 0xff
10014154:	001a      	movs	r2, r3
10014156:	9302      	str	r3, [sp, #8]
10014158:	0dc3      	lsrs	r3, r0, #23
1001415a:	400b      	ands	r3, r1
1001415c:	4683      	mov	fp, r0
1001415e:	1ad3      	subs	r3, r2, r3
10014160:	2b08      	cmp	r3, #8
10014162:	ddd8      	ble.n	10014116 <__ieee754_rem_pio2f+0x19e>
10014164:	4942      	ldr	r1, [pc, #264]	; (10014270 <__ieee754_rem_pio2f+0x2f8>)
10014166:	4648      	mov	r0, r9
10014168:	f001 fc5c 	bl	10015a24 <__aeabi_fmul>
1001416c:	1c07      	adds	r7, r0, #0
1001416e:	1c01      	adds	r1, r0, #0
10014170:	4640      	mov	r0, r8
10014172:	f001 fd6b 	bl	10015c4c <__aeabi_fsub>
10014176:	4683      	mov	fp, r0
10014178:	1c01      	adds	r1, r0, #0
1001417a:	9003      	str	r0, [sp, #12]
1001417c:	4640      	mov	r0, r8
1001417e:	f001 fd65 	bl	10015c4c <__aeabi_fsub>
10014182:	1c39      	adds	r1, r7, #0
10014184:	f001 fd62 	bl	10015c4c <__aeabi_fsub>
10014188:	493a      	ldr	r1, [pc, #232]	; (10014274 <__ieee754_rem_pio2f+0x2fc>)
1001418a:	1c07      	adds	r7, r0, #0
1001418c:	4648      	mov	r0, r9
1001418e:	f001 fc49 	bl	10015a24 <__aeabi_fmul>
10014192:	1c39      	adds	r1, r7, #0
10014194:	f001 fd5a 	bl	10015c4c <__aeabi_fsub>
10014198:	1c01      	adds	r1, r0, #0
1001419a:	4682      	mov	sl, r0
1001419c:	4658      	mov	r0, fp
1001419e:	f001 fd55 	bl	10015c4c <__aeabi_fsub>
100141a2:	22ff      	movs	r2, #255	; 0xff
100141a4:	0dc3      	lsrs	r3, r0, #23
100141a6:	4013      	ands	r3, r2
100141a8:	9a02      	ldr	r2, [sp, #8]
100141aa:	465f      	mov	r7, fp
100141ac:	1ad3      	subs	r3, r2, r3
100141ae:	4683      	mov	fp, r0
100141b0:	2b19      	cmp	r3, #25
100141b2:	dc2f      	bgt.n	10014214 <__ieee754_rem_pio2f+0x29c>
100141b4:	6020      	str	r0, [r4, #0]
100141b6:	46b8      	mov	r8, r7
100141b8:	e7af      	b.n	1001411a <__ieee754_rem_pio2f+0x1a2>
100141ba:	f001 f8f3 	bl	100153a4 <__aeabi_fadd>
100141be:	230f      	movs	r3, #15
100141c0:	003a      	movs	r2, r7
100141c2:	439a      	bics	r2, r3
100141c4:	4b25      	ldr	r3, [pc, #148]	; (1001425c <__ieee754_rem_pio2f+0x2e4>)
100141c6:	1c05      	adds	r5, r0, #0
100141c8:	429a      	cmp	r2, r3
100141ca:	d010      	beq.n	100141ee <__ieee754_rem_pio2f+0x276>
100141cc:	4924      	ldr	r1, [pc, #144]	; (10014260 <__ieee754_rem_pio2f+0x2e8>)
100141ce:	f001 f8e9 	bl	100153a4 <__aeabi_fadd>
100141d2:	1c01      	adds	r1, r0, #0
100141d4:	6020      	str	r0, [r4, #0]
100141d6:	1c28      	adds	r0, r5, #0
100141d8:	f001 fd38 	bl	10015c4c <__aeabi_fsub>
100141dc:	4920      	ldr	r1, [pc, #128]	; (10014260 <__ieee754_rem_pio2f+0x2e8>)
100141de:	f001 f8e1 	bl	100153a4 <__aeabi_fadd>
100141e2:	6060      	str	r0, [r4, #4]
100141e4:	2001      	movs	r0, #1
100141e6:	4240      	negs	r0, r0
100141e8:	e748      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
100141ea:	2303      	movs	r3, #3
100141ec:	e72c      	b.n	10014048 <__ieee754_rem_pio2f+0xd0>
100141ee:	4920      	ldr	r1, [pc, #128]	; (10014270 <__ieee754_rem_pio2f+0x2f8>)
100141f0:	f001 f8d8 	bl	100153a4 <__aeabi_fadd>
100141f4:	491f      	ldr	r1, [pc, #124]	; (10014274 <__ieee754_rem_pio2f+0x2fc>)
100141f6:	1c05      	adds	r5, r0, #0
100141f8:	f001 f8d4 	bl	100153a4 <__aeabi_fadd>
100141fc:	1c01      	adds	r1, r0, #0
100141fe:	6020      	str	r0, [r4, #0]
10014200:	1c28      	adds	r0, r5, #0
10014202:	f001 fd23 	bl	10015c4c <__aeabi_fsub>
10014206:	491b      	ldr	r1, [pc, #108]	; (10014274 <__ieee754_rem_pio2f+0x2fc>)
10014208:	f001 f8cc 	bl	100153a4 <__aeabi_fadd>
1001420c:	6060      	str	r0, [r4, #4]
1001420e:	2001      	movs	r0, #1
10014210:	4240      	negs	r0, r0
10014212:	e733      	b.n	1001407c <__ieee754_rem_pio2f+0x104>
10014214:	491a      	ldr	r1, [pc, #104]	; (10014280 <__ieee754_rem_pio2f+0x308>)
10014216:	4648      	mov	r0, r9
10014218:	f001 fc04 	bl	10015a24 <__aeabi_fmul>
1001421c:	9b03      	ldr	r3, [sp, #12]
1001421e:	1c07      	adds	r7, r0, #0
10014220:	1c01      	adds	r1, r0, #0
10014222:	1c18      	adds	r0, r3, #0
10014224:	469a      	mov	sl, r3
10014226:	f001 fd11 	bl	10015c4c <__aeabi_fsub>
1001422a:	1c01      	adds	r1, r0, #0
1001422c:	4680      	mov	r8, r0
1001422e:	4650      	mov	r0, sl
10014230:	f001 fd0c 	bl	10015c4c <__aeabi_fsub>
10014234:	1c39      	adds	r1, r7, #0
10014236:	f001 fd09 	bl	10015c4c <__aeabi_fsub>
1001423a:	4912      	ldr	r1, [pc, #72]	; (10014284 <__ieee754_rem_pio2f+0x30c>)
1001423c:	1c07      	adds	r7, r0, #0
1001423e:	4648      	mov	r0, r9
10014240:	f001 fbf0 	bl	10015a24 <__aeabi_fmul>
10014244:	1c39      	adds	r1, r7, #0
10014246:	f001 fd01 	bl	10015c4c <__aeabi_fsub>
1001424a:	4682      	mov	sl, r0
1001424c:	e75e      	b.n	1001410c <__ieee754_rem_pio2f+0x194>
1001424e:	46c0      	nop			; (mov r8, r8)
10014250:	3f490fd8 	.word	0x3f490fd8
10014254:	4016cbe3 	.word	0x4016cbe3
10014258:	3fc90f80 	.word	0x3fc90f80
1001425c:	3fc90fd0 	.word	0x3fc90fd0
10014260:	37354443 	.word	0x37354443
10014264:	43490f80 	.word	0x43490f80
10014268:	7f7fffff 	.word	0x7f7fffff
1001426c:	1001ae54 	.word	0x1001ae54
10014270:	37354400 	.word	0x37354400
10014274:	2e85a308 	.word	0x2e85a308
10014278:	3f22f984 	.word	0x3f22f984
1001427c:	1001add4 	.word	0x1001add4
10014280:	2e85a300 	.word	0x2e85a300
10014284:	248d3132 	.word	0x248d3132

10014288 <__kernel_cosf>:
10014288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001428a:	464f      	mov	r7, r9
1001428c:	4646      	mov	r6, r8
1001428e:	4b58      	ldr	r3, [pc, #352]	; (100143f0 <__kernel_cosf+0x168>)
10014290:	0045      	lsls	r5, r0, #1
10014292:	b4c0      	push	{r6, r7}
10014294:	086d      	lsrs	r5, r5, #1
10014296:	1c06      	adds	r6, r0, #0
10014298:	1c0f      	adds	r7, r1, #0
1001429a:	429d      	cmp	r5, r3
1001429c:	dc48      	bgt.n	10014330 <__kernel_cosf+0xa8>
1001429e:	f001 fe73 	bl	10015f88 <__aeabi_f2iz>
100142a2:	2800      	cmp	r0, #0
100142a4:	d100      	bne.n	100142a8 <__kernel_cosf+0x20>
100142a6:	e09f      	b.n	100143e8 <__kernel_cosf+0x160>
100142a8:	1c31      	adds	r1, r6, #0
100142aa:	1c30      	adds	r0, r6, #0
100142ac:	f001 fbba 	bl	10015a24 <__aeabi_fmul>
100142b0:	4950      	ldr	r1, [pc, #320]	; (100143f4 <__kernel_cosf+0x16c>)
100142b2:	1c04      	adds	r4, r0, #0
100142b4:	f001 fbb6 	bl	10015a24 <__aeabi_fmul>
100142b8:	494f      	ldr	r1, [pc, #316]	; (100143f8 <__kernel_cosf+0x170>)
100142ba:	f001 f873 	bl	100153a4 <__aeabi_fadd>
100142be:	1c21      	adds	r1, r4, #0
100142c0:	f001 fbb0 	bl	10015a24 <__aeabi_fmul>
100142c4:	494d      	ldr	r1, [pc, #308]	; (100143fc <__kernel_cosf+0x174>)
100142c6:	f001 fcc1 	bl	10015c4c <__aeabi_fsub>
100142ca:	1c21      	adds	r1, r4, #0
100142cc:	f001 fbaa 	bl	10015a24 <__aeabi_fmul>
100142d0:	494b      	ldr	r1, [pc, #300]	; (10014400 <__kernel_cosf+0x178>)
100142d2:	f001 f867 	bl	100153a4 <__aeabi_fadd>
100142d6:	1c21      	adds	r1, r4, #0
100142d8:	f001 fba4 	bl	10015a24 <__aeabi_fmul>
100142dc:	4949      	ldr	r1, [pc, #292]	; (10014404 <__kernel_cosf+0x17c>)
100142de:	f001 fcb5 	bl	10015c4c <__aeabi_fsub>
100142e2:	1c21      	adds	r1, r4, #0
100142e4:	f001 fb9e 	bl	10015a24 <__aeabi_fmul>
100142e8:	4947      	ldr	r1, [pc, #284]	; (10014408 <__kernel_cosf+0x180>)
100142ea:	f001 f85b 	bl	100153a4 <__aeabi_fadd>
100142ee:	1c21      	adds	r1, r4, #0
100142f0:	f001 fb98 	bl	10015a24 <__aeabi_fmul>
100142f4:	4680      	mov	r8, r0
100142f6:	21fc      	movs	r1, #252	; 0xfc
100142f8:	1c20      	adds	r0, r4, #0
100142fa:	0589      	lsls	r1, r1, #22
100142fc:	f001 fb92 	bl	10015a24 <__aeabi_fmul>
10014300:	4641      	mov	r1, r8
10014302:	1c05      	adds	r5, r0, #0
10014304:	1c20      	adds	r0, r4, #0
10014306:	f001 fb8d 	bl	10015a24 <__aeabi_fmul>
1001430a:	1c39      	adds	r1, r7, #0
1001430c:	1c04      	adds	r4, r0, #0
1001430e:	1c30      	adds	r0, r6, #0
10014310:	f001 fb88 	bl	10015a24 <__aeabi_fmul>
10014314:	1c01      	adds	r1, r0, #0
10014316:	1c20      	adds	r0, r4, #0
10014318:	f001 fc98 	bl	10015c4c <__aeabi_fsub>
1001431c:	1c01      	adds	r1, r0, #0
1001431e:	1c28      	adds	r0, r5, #0
10014320:	f001 fc94 	bl	10015c4c <__aeabi_fsub>
10014324:	1c01      	adds	r1, r0, #0
10014326:	20fe      	movs	r0, #254	; 0xfe
10014328:	0580      	lsls	r0, r0, #22
1001432a:	f001 fc8f 	bl	10015c4c <__aeabi_fsub>
1001432e:	e053      	b.n	100143d8 <__kernel_cosf+0x150>
10014330:	1c01      	adds	r1, r0, #0
10014332:	f001 fb77 	bl	10015a24 <__aeabi_fmul>
10014336:	492f      	ldr	r1, [pc, #188]	; (100143f4 <__kernel_cosf+0x16c>)
10014338:	1c04      	adds	r4, r0, #0
1001433a:	f001 fb73 	bl	10015a24 <__aeabi_fmul>
1001433e:	492e      	ldr	r1, [pc, #184]	; (100143f8 <__kernel_cosf+0x170>)
10014340:	f001 f830 	bl	100153a4 <__aeabi_fadd>
10014344:	1c21      	adds	r1, r4, #0
10014346:	f001 fb6d 	bl	10015a24 <__aeabi_fmul>
1001434a:	492c      	ldr	r1, [pc, #176]	; (100143fc <__kernel_cosf+0x174>)
1001434c:	f001 fc7e 	bl	10015c4c <__aeabi_fsub>
10014350:	1c21      	adds	r1, r4, #0
10014352:	f001 fb67 	bl	10015a24 <__aeabi_fmul>
10014356:	492a      	ldr	r1, [pc, #168]	; (10014400 <__kernel_cosf+0x178>)
10014358:	f001 f824 	bl	100153a4 <__aeabi_fadd>
1001435c:	1c21      	adds	r1, r4, #0
1001435e:	f001 fb61 	bl	10015a24 <__aeabi_fmul>
10014362:	4928      	ldr	r1, [pc, #160]	; (10014404 <__kernel_cosf+0x17c>)
10014364:	f001 fc72 	bl	10015c4c <__aeabi_fsub>
10014368:	1c21      	adds	r1, r4, #0
1001436a:	f001 fb5b 	bl	10015a24 <__aeabi_fmul>
1001436e:	4926      	ldr	r1, [pc, #152]	; (10014408 <__kernel_cosf+0x180>)
10014370:	f001 f818 	bl	100153a4 <__aeabi_fadd>
10014374:	1c21      	adds	r1, r4, #0
10014376:	f001 fb55 	bl	10015a24 <__aeabi_fmul>
1001437a:	4b24      	ldr	r3, [pc, #144]	; (1001440c <__kernel_cosf+0x184>)
1001437c:	4680      	mov	r8, r0
1001437e:	429d      	cmp	r5, r3
10014380:	ddb9      	ble.n	100142f6 <__kernel_cosf+0x6e>
10014382:	4b23      	ldr	r3, [pc, #140]	; (10014410 <__kernel_cosf+0x188>)
10014384:	429d      	cmp	r5, r3
10014386:	dc2b      	bgt.n	100143e0 <__kernel_cosf+0x158>
10014388:	23ff      	movs	r3, #255	; 0xff
1001438a:	061b      	lsls	r3, r3, #24
1001438c:	469c      	mov	ip, r3
1001438e:	20fe      	movs	r0, #254	; 0xfe
10014390:	4465      	add	r5, ip
10014392:	1c29      	adds	r1, r5, #0
10014394:	0580      	lsls	r0, r0, #22
10014396:	f001 fc59 	bl	10015c4c <__aeabi_fsub>
1001439a:	4681      	mov	r9, r0
1001439c:	21fc      	movs	r1, #252	; 0xfc
1001439e:	1c20      	adds	r0, r4, #0
100143a0:	0589      	lsls	r1, r1, #22
100143a2:	f001 fb3f 	bl	10015a24 <__aeabi_fmul>
100143a6:	1c29      	adds	r1, r5, #0
100143a8:	f001 fc50 	bl	10015c4c <__aeabi_fsub>
100143ac:	4641      	mov	r1, r8
100143ae:	1c05      	adds	r5, r0, #0
100143b0:	1c20      	adds	r0, r4, #0
100143b2:	f001 fb37 	bl	10015a24 <__aeabi_fmul>
100143b6:	1c39      	adds	r1, r7, #0
100143b8:	1c04      	adds	r4, r0, #0
100143ba:	1c30      	adds	r0, r6, #0
100143bc:	f001 fb32 	bl	10015a24 <__aeabi_fmul>
100143c0:	1c01      	adds	r1, r0, #0
100143c2:	1c20      	adds	r0, r4, #0
100143c4:	f001 fc42 	bl	10015c4c <__aeabi_fsub>
100143c8:	1c01      	adds	r1, r0, #0
100143ca:	1c28      	adds	r0, r5, #0
100143cc:	f001 fc3e 	bl	10015c4c <__aeabi_fsub>
100143d0:	1c01      	adds	r1, r0, #0
100143d2:	4648      	mov	r0, r9
100143d4:	f001 fc3a 	bl	10015c4c <__aeabi_fsub>
100143d8:	bc0c      	pop	{r2, r3}
100143da:	4690      	mov	r8, r2
100143dc:	4699      	mov	r9, r3
100143de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100143e0:	4b0c      	ldr	r3, [pc, #48]	; (10014414 <__kernel_cosf+0x18c>)
100143e2:	4d0d      	ldr	r5, [pc, #52]	; (10014418 <__kernel_cosf+0x190>)
100143e4:	4699      	mov	r9, r3
100143e6:	e7d9      	b.n	1001439c <__kernel_cosf+0x114>
100143e8:	20fe      	movs	r0, #254	; 0xfe
100143ea:	0580      	lsls	r0, r0, #22
100143ec:	e7f4      	b.n	100143d8 <__kernel_cosf+0x150>
100143ee:	46c0      	nop			; (mov r8, r8)
100143f0:	31ffffff 	.word	0x31ffffff
100143f4:	ad47d74e 	.word	0xad47d74e
100143f8:	310f74f6 	.word	0x310f74f6
100143fc:	3493f27c 	.word	0x3493f27c
10014400:	37d00d01 	.word	0x37d00d01
10014404:	3ab60b61 	.word	0x3ab60b61
10014408:	3d2aaaab 	.word	0x3d2aaaab
1001440c:	3e999999 	.word	0x3e999999
10014410:	3f480000 	.word	0x3f480000
10014414:	3f380000 	.word	0x3f380000
10014418:	3e900000 	.word	0x3e900000

1001441c <__kernel_rem_pio2f>:
1001441c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001441e:	465f      	mov	r7, fp
10014420:	4656      	mov	r6, sl
10014422:	464d      	mov	r5, r9
10014424:	4644      	mov	r4, r8
10014426:	b4f0      	push	{r4, r5, r6, r7}
10014428:	b0dd      	sub	sp, #372	; 0x174
1001442a:	469b      	mov	fp, r3
1001442c:	9b66      	ldr	r3, [sp, #408]	; 0x198
1001442e:	9106      	str	r1, [sp, #24]
10014430:	0099      	lsls	r1, r3, #2
10014432:	4bca      	ldr	r3, [pc, #808]	; (1001475c <__kernel_rem_pio2f+0x340>)
10014434:	9000      	str	r0, [sp, #0]
10014436:	58cb      	ldr	r3, [r1, r3]
10014438:	2007      	movs	r0, #7
1001443a:	001c      	movs	r4, r3
1001443c:	9305      	str	r3, [sp, #20]
1001443e:	2301      	movs	r3, #1
10014440:	425b      	negs	r3, r3
10014442:	445b      	add	r3, fp
10014444:	4699      	mov	r9, r3
10014446:	1ed3      	subs	r3, r2, #3
10014448:	17d9      	asrs	r1, r3, #31
1001444a:	4001      	ands	r1, r0
1001444c:	18cb      	adds	r3, r1, r3
1001444e:	10db      	asrs	r3, r3, #3
10014450:	0019      	movs	r1, r3
10014452:	43db      	mvns	r3, r3
10014454:	17db      	asrs	r3, r3, #31
10014456:	4019      	ands	r1, r3
10014458:	000b      	movs	r3, r1
1001445a:	3301      	adds	r3, #1
1001445c:	930a      	str	r3, [sp, #40]	; 0x28
1001445e:	00db      	lsls	r3, r3, #3
10014460:	1ad3      	subs	r3, r2, r3
10014462:	464a      	mov	r2, r9
10014464:	9108      	str	r1, [sp, #32]
10014466:	9302      	str	r3, [sp, #8]
10014468:	1a8e      	subs	r6, r1, r2
1001446a:	18a7      	adds	r7, r4, r2
1001446c:	d419      	bmi.n	100144a2 <__kernel_rem_pio2f+0x86>
1001446e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014470:	3701      	adds	r7, #1
10014472:	4690      	mov	r8, r2
10014474:	00b3      	lsls	r3, r6, #2
10014476:	00bf      	lsls	r7, r7, #2
10014478:	4498      	add	r8, r3
1001447a:	2400      	movs	r4, #0
1001447c:	ad20      	add	r5, sp, #128	; 0x80
1001447e:	e008      	b.n	10014492 <__kernel_rem_pio2f+0x76>
10014480:	4643      	mov	r3, r8
10014482:	5918      	ldr	r0, [r3, r4]
10014484:	f001 fda2 	bl	10015fcc <__aeabi_i2f>
10014488:	5128      	str	r0, [r5, r4]
1001448a:	3404      	adds	r4, #4
1001448c:	3601      	adds	r6, #1
1001448e:	42bc      	cmp	r4, r7
10014490:	d007      	beq.n	100144a2 <__kernel_rem_pio2f+0x86>
10014492:	2e00      	cmp	r6, #0
10014494:	daf4      	bge.n	10014480 <__kernel_rem_pio2f+0x64>
10014496:	2000      	movs	r0, #0
10014498:	5128      	str	r0, [r5, r4]
1001449a:	3404      	adds	r4, #4
1001449c:	3601      	adds	r6, #1
1001449e:	42bc      	cmp	r4, r7
100144a0:	d1f7      	bne.n	10014492 <__kernel_rem_pio2f+0x76>
100144a2:	9b05      	ldr	r3, [sp, #20]
100144a4:	2b00      	cmp	r3, #0
100144a6:	da00      	bge.n	100144aa <__kernel_rem_pio2f+0x8e>
100144a8:	e33d      	b.n	10014b26 <__kernel_rem_pio2f+0x70a>
100144aa:	9b05      	ldr	r3, [sp, #20]
100144ac:	3301      	adds	r3, #1
100144ae:	009b      	lsls	r3, r3, #2
100144b0:	469a      	mov	sl, r3
100144b2:	465b      	mov	r3, fp
100144b4:	009b      	lsls	r3, r3, #2
100144b6:	469b      	mov	fp, r3
100144b8:	9b00      	ldr	r3, [sp, #0]
100144ba:	445b      	add	r3, fp
100144bc:	001f      	movs	r7, r3
100144be:	2300      	movs	r3, #0
100144c0:	4698      	mov	r8, r3
100144c2:	ab48      	add	r3, sp, #288	; 0x120
100144c4:	9304      	str	r3, [sp, #16]
100144c6:	465b      	mov	r3, fp
100144c8:	3b04      	subs	r3, #4
100144ca:	9301      	str	r3, [sp, #4]
100144cc:	464b      	mov	r3, r9
100144ce:	2b00      	cmp	r3, #0
100144d0:	da00      	bge.n	100144d4 <__kernel_rem_pio2f+0xb8>
100144d2:	e1b6      	b.n	10014842 <__kernel_rem_pio2f+0x426>
100144d4:	9b01      	ldr	r3, [sp, #4]
100144d6:	2600      	movs	r6, #0
100144d8:	4443      	add	r3, r8
100144da:	001c      	movs	r4, r3
100144dc:	ab20      	add	r3, sp, #128	; 0x80
100144de:	469c      	mov	ip, r3
100144e0:	9d00      	ldr	r5, [sp, #0]
100144e2:	4464      	add	r4, ip
100144e4:	6821      	ldr	r1, [r4, #0]
100144e6:	cd01      	ldmia	r5!, {r0}
100144e8:	f001 fa9c 	bl	10015a24 <__aeabi_fmul>
100144ec:	1c01      	adds	r1, r0, #0
100144ee:	1c30      	adds	r0, r6, #0
100144f0:	f000 ff58 	bl	100153a4 <__aeabi_fadd>
100144f4:	3c04      	subs	r4, #4
100144f6:	1c06      	adds	r6, r0, #0
100144f8:	42bd      	cmp	r5, r7
100144fa:	d1f3      	bne.n	100144e4 <__kernel_rem_pio2f+0xc8>
100144fc:	4642      	mov	r2, r8
100144fe:	9b04      	ldr	r3, [sp, #16]
10014500:	509e      	str	r6, [r3, r2]
10014502:	2304      	movs	r3, #4
10014504:	469c      	mov	ip, r3
10014506:	44e0      	add	r8, ip
10014508:	45d0      	cmp	r8, sl
1001450a:	d1df      	bne.n	100144cc <__kernel_rem_pio2f+0xb0>
1001450c:	9a05      	ldr	r2, [sp, #20]
1001450e:	4994      	ldr	r1, [pc, #592]	; (10014760 <__kernel_rem_pio2f+0x344>)
10014510:	0013      	movs	r3, r2
10014512:	468c      	mov	ip, r1
10014514:	4463      	add	r3, ip
10014516:	009b      	lsls	r3, r3, #2
10014518:	a80c      	add	r0, sp, #48	; 0x30
1001451a:	0019      	movs	r1, r3
1001451c:	4684      	mov	ip, r0
1001451e:	4461      	add	r1, ip
10014520:	9107      	str	r1, [sp, #28]
10014522:	3304      	adds	r3, #4
10014524:	9900      	ldr	r1, [sp, #0]
10014526:	4463      	add	r3, ip
10014528:	4459      	add	r1, fp
1001452a:	9309      	str	r3, [sp, #36]	; 0x24
1001452c:	464b      	mov	r3, r9
1001452e:	000f      	movs	r7, r1
10014530:	4693      	mov	fp, r2
10014532:	9301      	str	r3, [sp, #4]
10014534:	465b      	mov	r3, fp
10014536:	009b      	lsls	r3, r3, #2
10014538:	469a      	mov	sl, r3
1001453a:	4652      	mov	r2, sl
1001453c:	9b04      	ldr	r3, [sp, #16]
1001453e:	589d      	ldr	r5, [r3, r2]
10014540:	465a      	mov	r2, fp
10014542:	2a00      	cmp	r2, #0
10014544:	dd26      	ble.n	10014594 <__kernel_rem_pio2f+0x178>
10014546:	aa0c      	add	r2, sp, #48	; 0x30
10014548:	469c      	mov	ip, r3
1001454a:	46b8      	mov	r8, r7
1001454c:	0017      	movs	r7, r2
1001454e:	4c85      	ldr	r4, [pc, #532]	; (10014764 <__kernel_rem_pio2f+0x348>)
10014550:	445c      	add	r4, fp
10014552:	00a4      	lsls	r4, r4, #2
10014554:	4464      	add	r4, ip
10014556:	21ee      	movs	r1, #238	; 0xee
10014558:	1c28      	adds	r0, r5, #0
1001455a:	0589      	lsls	r1, r1, #22
1001455c:	f001 fa62 	bl	10015a24 <__aeabi_fmul>
10014560:	f001 fd12 	bl	10015f88 <__aeabi_f2iz>
10014564:	f001 fd32 	bl	10015fcc <__aeabi_i2f>
10014568:	2187      	movs	r1, #135	; 0x87
1001456a:	05c9      	lsls	r1, r1, #23
1001456c:	1c06      	adds	r6, r0, #0
1001456e:	f001 fa59 	bl	10015a24 <__aeabi_fmul>
10014572:	1c01      	adds	r1, r0, #0
10014574:	1c28      	adds	r0, r5, #0
10014576:	f001 fb69 	bl	10015c4c <__aeabi_fsub>
1001457a:	f001 fd05 	bl	10015f88 <__aeabi_f2iz>
1001457e:	6821      	ldr	r1, [r4, #0]
10014580:	c701      	stmia	r7!, {r0}
10014582:	1c30      	adds	r0, r6, #0
10014584:	f000 ff0e 	bl	100153a4 <__aeabi_fadd>
10014588:	3c04      	subs	r4, #4
1001458a:	ab47      	add	r3, sp, #284	; 0x11c
1001458c:	1c05      	adds	r5, r0, #0
1001458e:	429c      	cmp	r4, r3
10014590:	d1e1      	bne.n	10014556 <__kernel_rem_pio2f+0x13a>
10014592:	4647      	mov	r7, r8
10014594:	9b02      	ldr	r3, [sp, #8]
10014596:	1c28      	adds	r0, r5, #0
10014598:	0019      	movs	r1, r3
1001459a:	4698      	mov	r8, r3
1001459c:	f000 fb98 	bl	10014cd0 <scalbnf>
100145a0:	21f8      	movs	r1, #248	; 0xf8
100145a2:	0589      	lsls	r1, r1, #22
100145a4:	1c04      	adds	r4, r0, #0
100145a6:	f001 fa3d 	bl	10015a24 <__aeabi_fmul>
100145aa:	f000 fb43 	bl	10014c34 <floorf>
100145ae:	2182      	movs	r1, #130	; 0x82
100145b0:	05c9      	lsls	r1, r1, #23
100145b2:	f001 fa37 	bl	10015a24 <__aeabi_fmul>
100145b6:	1c01      	adds	r1, r0, #0
100145b8:	1c20      	adds	r0, r4, #0
100145ba:	f001 fb47 	bl	10015c4c <__aeabi_fsub>
100145be:	1c04      	adds	r4, r0, #0
100145c0:	f001 fce2 	bl	10015f88 <__aeabi_f2iz>
100145c4:	0006      	movs	r6, r0
100145c6:	f001 fd01 	bl	10015fcc <__aeabi_i2f>
100145ca:	1c01      	adds	r1, r0, #0
100145cc:	1c20      	adds	r0, r4, #0
100145ce:	f001 fb3d 	bl	10015c4c <__aeabi_fsub>
100145d2:	4644      	mov	r4, r8
100145d4:	1c05      	adds	r5, r0, #0
100145d6:	2c00      	cmp	r4, #0
100145d8:	dc00      	bgt.n	100145dc <__kernel_rem_pio2f+0x1c0>
100145da:	e112      	b.n	10014802 <__kernel_rem_pio2f+0x3e6>
100145dc:	465b      	mov	r3, fp
100145de:	1e5a      	subs	r2, r3, #1
100145e0:	0092      	lsls	r2, r2, #2
100145e2:	ab0c      	add	r3, sp, #48	; 0x30
100145e4:	589b      	ldr	r3, [r3, r2]
100145e6:	2008      	movs	r0, #8
100145e8:	0019      	movs	r1, r3
100145ea:	1b00      	subs	r0, r0, r4
100145ec:	4101      	asrs	r1, r0
100145ee:	1876      	adds	r6, r6, r1
100145f0:	4081      	lsls	r1, r0
100145f2:	1a5b      	subs	r3, r3, r1
100145f4:	a90c      	add	r1, sp, #48	; 0x30
100145f6:	508b      	str	r3, [r1, r2]
100145f8:	2207      	movs	r2, #7
100145fa:	1b12      	subs	r2, r2, r4
100145fc:	4113      	asrs	r3, r2
100145fe:	9303      	str	r3, [sp, #12]
10014600:	9b03      	ldr	r3, [sp, #12]
10014602:	2b00      	cmp	r3, #0
10014604:	dd3a      	ble.n	1001467c <__kernel_rem_pio2f+0x260>
10014606:	465b      	mov	r3, fp
10014608:	3601      	adds	r6, #1
1001460a:	2b00      	cmp	r3, #0
1001460c:	dc00      	bgt.n	10014610 <__kernel_rem_pio2f+0x1f4>
1001460e:	e261      	b.n	10014ad4 <__kernel_rem_pio2f+0x6b8>
10014610:	2280      	movs	r2, #128	; 0x80
10014612:	0052      	lsls	r2, r2, #1
10014614:	46a8      	mov	r8, r5
10014616:	ab0c      	add	r3, sp, #48	; 0x30
10014618:	2100      	movs	r1, #0
1001461a:	2400      	movs	r4, #0
1001461c:	20ff      	movs	r0, #255	; 0xff
1001461e:	4694      	mov	ip, r2
10014620:	465d      	mov	r5, fp
10014622:	e009      	b.n	10014638 <__kernel_rem_pio2f+0x21c>
10014624:	2a00      	cmp	r2, #0
10014626:	d003      	beq.n	10014630 <__kernel_rem_pio2f+0x214>
10014628:	4664      	mov	r4, ip
1001462a:	1aa2      	subs	r2, r4, r2
1001462c:	2401      	movs	r4, #1
1001462e:	601a      	str	r2, [r3, #0]
10014630:	3101      	adds	r1, #1
10014632:	3304      	adds	r3, #4
10014634:	428d      	cmp	r5, r1
10014636:	dd09      	ble.n	1001464c <__kernel_rem_pio2f+0x230>
10014638:	681a      	ldr	r2, [r3, #0]
1001463a:	2c00      	cmp	r4, #0
1001463c:	d0f2      	beq.n	10014624 <__kernel_rem_pio2f+0x208>
1001463e:	1a82      	subs	r2, r0, r2
10014640:	3101      	adds	r1, #1
10014642:	601a      	str	r2, [r3, #0]
10014644:	2401      	movs	r4, #1
10014646:	3304      	adds	r3, #4
10014648:	428d      	cmp	r5, r1
1001464a:	dcf5      	bgt.n	10014638 <__kernel_rem_pio2f+0x21c>
1001464c:	46ab      	mov	fp, r5
1001464e:	4645      	mov	r5, r8
10014650:	9b02      	ldr	r3, [sp, #8]
10014652:	2b00      	cmp	r3, #0
10014654:	dd0f      	ble.n	10014676 <__kernel_rem_pio2f+0x25a>
10014656:	2b01      	cmp	r3, #1
10014658:	d100      	bne.n	1001465c <__kernel_rem_pio2f+0x240>
1001465a:	e0dd      	b.n	10014818 <__kernel_rem_pio2f+0x3fc>
1001465c:	2b02      	cmp	r3, #2
1001465e:	d10a      	bne.n	10014676 <__kernel_rem_pio2f+0x25a>
10014660:	465b      	mov	r3, fp
10014662:	3b01      	subs	r3, #1
10014664:	009b      	lsls	r3, r3, #2
10014666:	aa0c      	add	r2, sp, #48	; 0x30
10014668:	58d2      	ldr	r2, [r2, r3]
1001466a:	920b      	str	r2, [sp, #44]	; 0x2c
1001466c:	223f      	movs	r2, #63	; 0x3f
1001466e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014670:	400a      	ands	r2, r1
10014672:	a90c      	add	r1, sp, #48	; 0x30
10014674:	50ca      	str	r2, [r1, r3]
10014676:	9b03      	ldr	r3, [sp, #12]
10014678:	2b02      	cmp	r3, #2
1001467a:	d075      	beq.n	10014768 <__kernel_rem_pio2f+0x34c>
1001467c:	2100      	movs	r1, #0
1001467e:	1c28      	adds	r0, r5, #0
10014680:	f000 fd58 	bl	10015134 <__aeabi_fcmpeq>
10014684:	2800      	cmp	r0, #0
10014686:	d100      	bne.n	1001468a <__kernel_rem_pio2f+0x26e>
10014688:	e088      	b.n	1001479c <__kernel_rem_pio2f+0x380>
1001468a:	465b      	mov	r3, fp
1001468c:	1e59      	subs	r1, r3, #1
1001468e:	9b05      	ldr	r3, [sp, #20]
10014690:	428b      	cmp	r3, r1
10014692:	dc0f      	bgt.n	100146b4 <__kernel_rem_pio2f+0x298>
10014694:	aa0c      	add	r2, sp, #48	; 0x30
10014696:	4694      	mov	ip, r2
10014698:	2200      	movs	r2, #0
1001469a:	4b32      	ldr	r3, [pc, #200]	; (10014764 <__kernel_rem_pio2f+0x348>)
1001469c:	9809      	ldr	r0, [sp, #36]	; 0x24
1001469e:	445b      	add	r3, fp
100146a0:	009b      	lsls	r3, r3, #2
100146a2:	4463      	add	r3, ip
100146a4:	681c      	ldr	r4, [r3, #0]
100146a6:	3b04      	subs	r3, #4
100146a8:	4322      	orrs	r2, r4
100146aa:	4283      	cmp	r3, r0
100146ac:	d1fa      	bne.n	100146a4 <__kernel_rem_pio2f+0x288>
100146ae:	2a00      	cmp	r2, #0
100146b0:	d000      	beq.n	100146b4 <__kernel_rem_pio2f+0x298>
100146b2:	e0df      	b.n	10014874 <__kernel_rem_pio2f+0x458>
100146b4:	9b05      	ldr	r3, [sp, #20]
100146b6:	aa0c      	add	r2, sp, #48	; 0x30
100146b8:	3b01      	subs	r3, #1
100146ba:	009b      	lsls	r3, r3, #2
100146bc:	58d3      	ldr	r3, [r2, r3]
100146be:	2b00      	cmp	r3, #0
100146c0:	d000      	beq.n	100146c4 <__kernel_rem_pio2f+0x2a8>
100146c2:	e205      	b.n	10014ad0 <__kernel_rem_pio2f+0x6b4>
100146c4:	2201      	movs	r2, #1
100146c6:	9b07      	ldr	r3, [sp, #28]
100146c8:	3b04      	subs	r3, #4
100146ca:	6859      	ldr	r1, [r3, #4]
100146cc:	3201      	adds	r2, #1
100146ce:	2900      	cmp	r1, #0
100146d0:	d0fa      	beq.n	100146c8 <__kernel_rem_pio2f+0x2ac>
100146d2:	465b      	mov	r3, fp
100146d4:	445a      	add	r2, fp
100146d6:	3301      	adds	r3, #1
100146d8:	9203      	str	r2, [sp, #12]
100146da:	4293      	cmp	r3, r2
100146dc:	dc39      	bgt.n	10014752 <__kernel_rem_pio2f+0x336>
100146de:	9967      	ldr	r1, [sp, #412]	; 0x19c
100146e0:	9a08      	ldr	r2, [sp, #32]
100146e2:	4689      	mov	r9, r1
100146e4:	9904      	ldr	r1, [sp, #16]
100146e6:	189a      	adds	r2, r3, r2
100146e8:	468a      	mov	sl, r1
100146ea:	0092      	lsls	r2, r2, #2
100146ec:	4491      	add	r9, r2
100146ee:	009a      	lsls	r2, r3, #2
100146f0:	4492      	add	sl, r2
100146f2:	9a01      	ldr	r2, [sp, #4]
100146f4:	4694      	mov	ip, r2
100146f6:	aa20      	add	r2, sp, #128	; 0x80
100146f8:	4690      	mov	r8, r2
100146fa:	9a03      	ldr	r2, [sp, #12]
100146fc:	4463      	add	r3, ip
100146fe:	4694      	mov	ip, r2
10014700:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014702:	009b      	lsls	r3, r3, #2
10014704:	4693      	mov	fp, r2
10014706:	4498      	add	r8, r3
10014708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001470a:	4463      	add	r3, ip
1001470c:	009b      	lsls	r3, r3, #2
1001470e:	449b      	add	fp, r3
10014710:	464b      	mov	r3, r9
10014712:	6818      	ldr	r0, [r3, #0]
10014714:	f001 fc5a 	bl	10015fcc <__aeabi_i2f>
10014718:	4643      	mov	r3, r8
1001471a:	6018      	str	r0, [r3, #0]
1001471c:	9b01      	ldr	r3, [sp, #4]
1001471e:	2b00      	cmp	r3, #0
10014720:	db1a      	blt.n	10014758 <__kernel_rem_pio2f+0x33c>
10014722:	4644      	mov	r4, r8
10014724:	2600      	movs	r6, #0
10014726:	9d00      	ldr	r5, [sp, #0]
10014728:	6821      	ldr	r1, [r4, #0]
1001472a:	cd01      	ldmia	r5!, {r0}
1001472c:	f001 f97a 	bl	10015a24 <__aeabi_fmul>
10014730:	1c01      	adds	r1, r0, #0
10014732:	1c30      	adds	r0, r6, #0
10014734:	f000 fe36 	bl	100153a4 <__aeabi_fadd>
10014738:	3c04      	subs	r4, #4
1001473a:	1c06      	adds	r6, r0, #0
1001473c:	42bd      	cmp	r5, r7
1001473e:	d1f3      	bne.n	10014728 <__kernel_rem_pio2f+0x30c>
10014740:	4653      	mov	r3, sl
10014742:	c340      	stmia	r3!, {r6}
10014744:	469a      	mov	sl, r3
10014746:	2304      	movs	r3, #4
10014748:	469c      	mov	ip, r3
1001474a:	44e1      	add	r9, ip
1001474c:	44e0      	add	r8, ip
1001474e:	45d9      	cmp	r9, fp
10014750:	d1de      	bne.n	10014710 <__kernel_rem_pio2f+0x2f4>
10014752:	9b03      	ldr	r3, [sp, #12]
10014754:	469b      	mov	fp, r3
10014756:	e6ed      	b.n	10014534 <__kernel_rem_pio2f+0x118>
10014758:	2600      	movs	r6, #0
1001475a:	e7f1      	b.n	10014740 <__kernel_rem_pio2f+0x324>
1001475c:	1001b16c 	.word	0x1001b16c
10014760:	3ffffffe 	.word	0x3ffffffe
10014764:	3fffffff 	.word	0x3fffffff
10014768:	20fe      	movs	r0, #254	; 0xfe
1001476a:	1c29      	adds	r1, r5, #0
1001476c:	0580      	lsls	r0, r0, #22
1001476e:	f001 fa6d 	bl	10015c4c <__aeabi_fsub>
10014772:	1c05      	adds	r5, r0, #0
10014774:	2c00      	cmp	r4, #0
10014776:	d100      	bne.n	1001477a <__kernel_rem_pio2f+0x35e>
10014778:	e780      	b.n	1001467c <__kernel_rem_pio2f+0x260>
1001477a:	20fe      	movs	r0, #254	; 0xfe
1001477c:	9902      	ldr	r1, [sp, #8]
1001477e:	0580      	lsls	r0, r0, #22
10014780:	f000 faa6 	bl	10014cd0 <scalbnf>
10014784:	1c01      	adds	r1, r0, #0
10014786:	1c28      	adds	r0, r5, #0
10014788:	f001 fa60 	bl	10015c4c <__aeabi_fsub>
1001478c:	1c05      	adds	r5, r0, #0
1001478e:	2100      	movs	r1, #0
10014790:	1c28      	adds	r0, r5, #0
10014792:	f000 fccf 	bl	10015134 <__aeabi_fcmpeq>
10014796:	2800      	cmp	r0, #0
10014798:	d000      	beq.n	1001479c <__kernel_rem_pio2f+0x380>
1001479a:	e776      	b.n	1001468a <__kernel_rem_pio2f+0x26e>
1001479c:	9601      	str	r6, [sp, #4]
1001479e:	9e02      	ldr	r6, [sp, #8]
100147a0:	1c28      	adds	r0, r5, #0
100147a2:	4271      	negs	r1, r6
100147a4:	f000 fa94 	bl	10014cd0 <scalbnf>
100147a8:	2187      	movs	r1, #135	; 0x87
100147aa:	05c9      	lsls	r1, r1, #23
100147ac:	1c05      	adds	r5, r0, #0
100147ae:	f000 fce5 	bl	1001517c <__aeabi_fcmpge>
100147b2:	2800      	cmp	r0, #0
100147b4:	d100      	bne.n	100147b8 <__kernel_rem_pio2f+0x39c>
100147b6:	e199      	b.n	10014aec <__kernel_rem_pio2f+0x6d0>
100147b8:	21ee      	movs	r1, #238	; 0xee
100147ba:	1c28      	adds	r0, r5, #0
100147bc:	0589      	lsls	r1, r1, #22
100147be:	f001 f931 	bl	10015a24 <__aeabi_fmul>
100147c2:	f001 fbe1 	bl	10015f88 <__aeabi_f2iz>
100147c6:	f001 fc01 	bl	10015fcc <__aeabi_i2f>
100147ca:	2187      	movs	r1, #135	; 0x87
100147cc:	05c9      	lsls	r1, r1, #23
100147ce:	1c04      	adds	r4, r0, #0
100147d0:	f001 f928 	bl	10015a24 <__aeabi_fmul>
100147d4:	1c01      	adds	r1, r0, #0
100147d6:	1c28      	adds	r0, r5, #0
100147d8:	f001 fa38 	bl	10015c4c <__aeabi_fsub>
100147dc:	f001 fbd4 	bl	10015f88 <__aeabi_f2iz>
100147e0:	4652      	mov	r2, sl
100147e2:	ab0c      	add	r3, sp, #48	; 0x30
100147e4:	5098      	str	r0, [r3, r2]
100147e6:	2301      	movs	r3, #1
100147e8:	445b      	add	r3, fp
100147ea:	469a      	mov	sl, r3
100147ec:	0033      	movs	r3, r6
100147ee:	3308      	adds	r3, #8
100147f0:	9302      	str	r3, [sp, #8]
100147f2:	4653      	mov	r3, sl
100147f4:	1c20      	adds	r0, r4, #0
100147f6:	009d      	lsls	r5, r3, #2
100147f8:	f001 fbc6 	bl	10015f88 <__aeabi_f2iz>
100147fc:	ab0c      	add	r3, sp, #48	; 0x30
100147fe:	5158      	str	r0, [r3, r5]
10014800:	e052      	b.n	100148a8 <__kernel_rem_pio2f+0x48c>
10014802:	9b02      	ldr	r3, [sp, #8]
10014804:	2b00      	cmp	r3, #0
10014806:	d113      	bne.n	10014830 <__kernel_rem_pio2f+0x414>
10014808:	465b      	mov	r3, fp
1001480a:	3b01      	subs	r3, #1
1001480c:	009b      	lsls	r3, r3, #2
1001480e:	aa0c      	add	r2, sp, #48	; 0x30
10014810:	58d3      	ldr	r3, [r2, r3]
10014812:	121b      	asrs	r3, r3, #8
10014814:	9303      	str	r3, [sp, #12]
10014816:	e6f3      	b.n	10014600 <__kernel_rem_pio2f+0x1e4>
10014818:	465b      	mov	r3, fp
1001481a:	3b01      	subs	r3, #1
1001481c:	009b      	lsls	r3, r3, #2
1001481e:	aa0c      	add	r2, sp, #48	; 0x30
10014820:	58d2      	ldr	r2, [r2, r3]
10014822:	920b      	str	r2, [sp, #44]	; 0x2c
10014824:	227f      	movs	r2, #127	; 0x7f
10014826:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014828:	400a      	ands	r2, r1
1001482a:	a90c      	add	r1, sp, #48	; 0x30
1001482c:	50ca      	str	r2, [r1, r3]
1001482e:	e722      	b.n	10014676 <__kernel_rem_pio2f+0x25a>
10014830:	21fc      	movs	r1, #252	; 0xfc
10014832:	0589      	lsls	r1, r1, #22
10014834:	f000 fca2 	bl	1001517c <__aeabi_fcmpge>
10014838:	2800      	cmp	r0, #0
1001483a:	d10d      	bne.n	10014858 <__kernel_rem_pio2f+0x43c>
1001483c:	2300      	movs	r3, #0
1001483e:	9303      	str	r3, [sp, #12]
10014840:	e71c      	b.n	1001467c <__kernel_rem_pio2f+0x260>
10014842:	4642      	mov	r2, r8
10014844:	2600      	movs	r6, #0
10014846:	9b04      	ldr	r3, [sp, #16]
10014848:	509e      	str	r6, [r3, r2]
1001484a:	2304      	movs	r3, #4
1001484c:	469c      	mov	ip, r3
1001484e:	44e0      	add	r8, ip
10014850:	45d0      	cmp	r8, sl
10014852:	d000      	beq.n	10014856 <__kernel_rem_pio2f+0x43a>
10014854:	e63a      	b.n	100144cc <__kernel_rem_pio2f+0xb0>
10014856:	e659      	b.n	1001450c <__kernel_rem_pio2f+0xf0>
10014858:	2302      	movs	r3, #2
1001485a:	9303      	str	r3, [sp, #12]
1001485c:	465b      	mov	r3, fp
1001485e:	3601      	adds	r6, #1
10014860:	2b00      	cmp	r3, #0
10014862:	dd00      	ble.n	10014866 <__kernel_rem_pio2f+0x44a>
10014864:	e6d4      	b.n	10014610 <__kernel_rem_pio2f+0x1f4>
10014866:	20fe      	movs	r0, #254	; 0xfe
10014868:	1c29      	adds	r1, r5, #0
1001486a:	0580      	lsls	r0, r0, #22
1001486c:	f001 f9ee 	bl	10015c4c <__aeabi_fsub>
10014870:	1c05      	adds	r5, r0, #0
10014872:	e703      	b.n	1001467c <__kernel_rem_pio2f+0x260>
10014874:	468a      	mov	sl, r1
10014876:	9b02      	ldr	r3, [sp, #8]
10014878:	aa0c      	add	r2, sp, #48	; 0x30
1001487a:	3b08      	subs	r3, #8
1001487c:	0019      	movs	r1, r3
1001487e:	9302      	str	r3, [sp, #8]
10014880:	4653      	mov	r3, sl
10014882:	009b      	lsls	r3, r3, #2
10014884:	58d3      	ldr	r3, [r2, r3]
10014886:	9601      	str	r6, [sp, #4]
10014888:	2b00      	cmp	r3, #0
1001488a:	d10d      	bne.n	100148a8 <__kernel_rem_pio2f+0x48c>
1001488c:	4694      	mov	ip, r2
1001488e:	4652      	mov	r2, sl
10014890:	4ba8      	ldr	r3, [pc, #672]	; (10014b34 <__kernel_rem_pio2f+0x718>)
10014892:	4453      	add	r3, sl
10014894:	009b      	lsls	r3, r3, #2
10014896:	4463      	add	r3, ip
10014898:	3b04      	subs	r3, #4
1001489a:	6858      	ldr	r0, [r3, #4]
1001489c:	3a01      	subs	r2, #1
1001489e:	3908      	subs	r1, #8
100148a0:	2800      	cmp	r0, #0
100148a2:	d0f9      	beq.n	10014898 <__kernel_rem_pio2f+0x47c>
100148a4:	4692      	mov	sl, r2
100148a6:	9102      	str	r1, [sp, #8]
100148a8:	20fe      	movs	r0, #254	; 0xfe
100148aa:	9902      	ldr	r1, [sp, #8]
100148ac:	0580      	lsls	r0, r0, #22
100148ae:	f000 fa0f 	bl	10014cd0 <scalbnf>
100148b2:	4653      	mov	r3, sl
100148b4:	1c06      	adds	r6, r0, #0
100148b6:	2b00      	cmp	r3, #0
100148b8:	da00      	bge.n	100148bc <__kernel_rem_pio2f+0x4a0>
100148ba:	e10d      	b.n	10014ad8 <__kernel_rem_pio2f+0x6bc>
100148bc:	3301      	adds	r3, #1
100148be:	009b      	lsls	r3, r3, #2
100148c0:	425b      	negs	r3, r3
100148c2:	4698      	mov	r8, r3
100148c4:	4653      	mov	r3, sl
100148c6:	009b      	lsls	r3, r3, #2
100148c8:	001a      	movs	r2, r3
100148ca:	001c      	movs	r4, r3
100148cc:	9300      	str	r3, [sp, #0]
100148ce:	ab0c      	add	r3, sp, #48	; 0x30
100148d0:	469c      	mov	ip, r3
100148d2:	9b04      	ldr	r3, [sp, #16]
100148d4:	4464      	add	r4, ip
100148d6:	001f      	movs	r7, r3
100148d8:	4694      	mov	ip, r2
100148da:	2500      	movs	r5, #0
100148dc:	4467      	add	r7, ip
100148de:	5960      	ldr	r0, [r4, r5]
100148e0:	f001 fb74 	bl	10015fcc <__aeabi_i2f>
100148e4:	1c31      	adds	r1, r6, #0
100148e6:	f001 f89d 	bl	10015a24 <__aeabi_fmul>
100148ea:	21ee      	movs	r1, #238	; 0xee
100148ec:	5178      	str	r0, [r7, r5]
100148ee:	0589      	lsls	r1, r1, #22
100148f0:	1c30      	adds	r0, r6, #0
100148f2:	f001 f897 	bl	10015a24 <__aeabi_fmul>
100148f6:	3d04      	subs	r5, #4
100148f8:	1c06      	adds	r6, r0, #0
100148fa:	4545      	cmp	r5, r8
100148fc:	d1ef      	bne.n	100148de <__kernel_rem_pio2f+0x4c2>
100148fe:	2300      	movs	r3, #0
10014900:	4698      	mov	r8, r3
10014902:	ab34      	add	r3, sp, #208	; 0xd0
10014904:	469b      	mov	fp, r3
10014906:	4b8c      	ldr	r3, [pc, #560]	; (10014b38 <__kernel_rem_pio2f+0x71c>)
10014908:	4699      	mov	r9, r3
1001490a:	4653      	mov	r3, sl
1001490c:	9302      	str	r3, [sp, #8]
1001490e:	9b05      	ldr	r3, [sp, #20]
10014910:	469a      	mov	sl, r3
10014912:	4653      	mov	r3, sl
10014914:	2600      	movs	r6, #0
10014916:	2b00      	cmp	r3, #0
10014918:	db14      	blt.n	10014944 <__kernel_rem_pio2f+0x528>
1001491a:	2500      	movs	r5, #0
1001491c:	4887      	ldr	r0, [pc, #540]	; (10014b3c <__kernel_rem_pio2f+0x720>)
1001491e:	2600      	movs	r6, #0
10014920:	2400      	movs	r4, #0
10014922:	e004      	b.n	1001492e <__kernel_rem_pio2f+0x512>
10014924:	3504      	adds	r5, #4
10014926:	45a0      	cmp	r8, r4
10014928:	db0c      	blt.n	10014944 <__kernel_rem_pio2f+0x528>
1001492a:	464b      	mov	r3, r9
1001492c:	58e8      	ldr	r0, [r5, r3]
1001492e:	5979      	ldr	r1, [r7, r5]
10014930:	f001 f878 	bl	10015a24 <__aeabi_fmul>
10014934:	1c01      	adds	r1, r0, #0
10014936:	1c30      	adds	r0, r6, #0
10014938:	f000 fd34 	bl	100153a4 <__aeabi_fadd>
1001493c:	3401      	adds	r4, #1
1001493e:	1c06      	adds	r6, r0, #0
10014940:	45a2      	cmp	sl, r4
10014942:	daef      	bge.n	10014924 <__kernel_rem_pio2f+0x508>
10014944:	4643      	mov	r3, r8
10014946:	465a      	mov	r2, fp
10014948:	009b      	lsls	r3, r3, #2
1001494a:	50d6      	str	r6, [r2, r3]
1001494c:	2301      	movs	r3, #1
1001494e:	469c      	mov	ip, r3
10014950:	3f04      	subs	r7, #4
10014952:	ab47      	add	r3, sp, #284	; 0x11c
10014954:	44e0      	add	r8, ip
10014956:	42bb      	cmp	r3, r7
10014958:	d1db      	bne.n	10014912 <__kernel_rem_pio2f+0x4f6>
1001495a:	9b02      	ldr	r3, [sp, #8]
1001495c:	469a      	mov	sl, r3
1001495e:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014960:	2b02      	cmp	r3, #2
10014962:	dc59      	bgt.n	10014a18 <__kernel_rem_pio2f+0x5fc>
10014964:	2b00      	cmp	r3, #0
10014966:	dc1e      	bgt.n	100149a6 <__kernel_rem_pio2f+0x58a>
10014968:	d113      	bne.n	10014992 <__kernel_rem_pio2f+0x576>
1001496a:	9b00      	ldr	r3, [sp, #0]
1001496c:	2000      	movs	r0, #0
1001496e:	445b      	add	r3, fp
10014970:	001c      	movs	r4, r3
10014972:	4655      	mov	r5, sl
10014974:	6821      	ldr	r1, [r4, #0]
10014976:	f000 fd15 	bl	100153a4 <__aeabi_fadd>
1001497a:	3c04      	subs	r4, #4
1001497c:	3d01      	subs	r5, #1
1001497e:	d2f9      	bcs.n	10014974 <__kernel_rem_pio2f+0x558>
10014980:	9b03      	ldr	r3, [sp, #12]
10014982:	2b00      	cmp	r3, #0
10014984:	d003      	beq.n	1001498e <__kernel_rem_pio2f+0x572>
10014986:	2380      	movs	r3, #128	; 0x80
10014988:	061b      	lsls	r3, r3, #24
1001498a:	469c      	mov	ip, r3
1001498c:	4460      	add	r0, ip
1001498e:	9b06      	ldr	r3, [sp, #24]
10014990:	6018      	str	r0, [r3, #0]
10014992:	2007      	movs	r0, #7
10014994:	9b01      	ldr	r3, [sp, #4]
10014996:	4018      	ands	r0, r3
10014998:	b05d      	add	sp, #372	; 0x174
1001499a:	bc3c      	pop	{r2, r3, r4, r5}
1001499c:	4690      	mov	r8, r2
1001499e:	4699      	mov	r9, r3
100149a0:	46a2      	mov	sl, r4
100149a2:	46ab      	mov	fp, r5
100149a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100149a6:	9b00      	ldr	r3, [sp, #0]
100149a8:	2000      	movs	r0, #0
100149aa:	445b      	add	r3, fp
100149ac:	001c      	movs	r4, r3
100149ae:	ad33      	add	r5, sp, #204	; 0xcc
100149b0:	6821      	ldr	r1, [r4, #0]
100149b2:	3c04      	subs	r4, #4
100149b4:	f000 fcf6 	bl	100153a4 <__aeabi_fadd>
100149b8:	42ac      	cmp	r4, r5
100149ba:	d1f9      	bne.n	100149b0 <__kernel_rem_pio2f+0x594>
100149bc:	9b03      	ldr	r3, [sp, #12]
100149be:	2b00      	cmp	r3, #0
100149c0:	d01e      	beq.n	10014a00 <__kernel_rem_pio2f+0x5e4>
100149c2:	2380      	movs	r3, #128	; 0x80
100149c4:	9a06      	ldr	r2, [sp, #24]
100149c6:	061b      	lsls	r3, r3, #24
100149c8:	18c3      	adds	r3, r0, r3
100149ca:	6013      	str	r3, [r2, #0]
100149cc:	1c01      	adds	r1, r0, #0
100149ce:	9834      	ldr	r0, [sp, #208]	; 0xd0
100149d0:	f001 f93c 	bl	10015c4c <__aeabi_fsub>
100149d4:	4653      	mov	r3, sl
100149d6:	2b00      	cmp	r3, #0
100149d8:	dd0b      	ble.n	100149f2 <__kernel_rem_pio2f+0x5d6>
100149da:	2401      	movs	r4, #1
100149dc:	4656      	mov	r6, sl
100149de:	ad35      	add	r5, sp, #212	; 0xd4
100149e0:	cd02      	ldmia	r5!, {r1}
100149e2:	3401      	adds	r4, #1
100149e4:	f000 fcde 	bl	100153a4 <__aeabi_fadd>
100149e8:	42a6      	cmp	r6, r4
100149ea:	daf9      	bge.n	100149e0 <__kernel_rem_pio2f+0x5c4>
100149ec:	9b03      	ldr	r3, [sp, #12]
100149ee:	2b00      	cmp	r3, #0
100149f0:	d003      	beq.n	100149fa <__kernel_rem_pio2f+0x5de>
100149f2:	2380      	movs	r3, #128	; 0x80
100149f4:	061b      	lsls	r3, r3, #24
100149f6:	469c      	mov	ip, r3
100149f8:	4460      	add	r0, ip
100149fa:	9b06      	ldr	r3, [sp, #24]
100149fc:	6058      	str	r0, [r3, #4]
100149fe:	e7c8      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014a00:	9b06      	ldr	r3, [sp, #24]
10014a02:	1c01      	adds	r1, r0, #0
10014a04:	6018      	str	r0, [r3, #0]
10014a06:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014a08:	f001 f920 	bl	10015c4c <__aeabi_fsub>
10014a0c:	4652      	mov	r2, sl
10014a0e:	2a00      	cmp	r2, #0
10014a10:	dce3      	bgt.n	100149da <__kernel_rem_pio2f+0x5be>
10014a12:	9b06      	ldr	r3, [sp, #24]
10014a14:	6058      	str	r0, [r3, #4]
10014a16:	e7bc      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014a18:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014a1a:	2b03      	cmp	r3, #3
10014a1c:	d1b9      	bne.n	10014992 <__kernel_rem_pio2f+0x576>
10014a1e:	4653      	mov	r3, sl
10014a20:	2b00      	cmp	r3, #0
10014a22:	dd73      	ble.n	10014b0c <__kernel_rem_pio2f+0x6f0>
10014a24:	465b      	mov	r3, fp
10014a26:	9a00      	ldr	r2, [sp, #0]
10014a28:	4c42      	ldr	r4, [pc, #264]	; (10014b34 <__kernel_rem_pio2f+0x718>)
10014a2a:	589e      	ldr	r6, [r3, r2]
10014a2c:	4454      	add	r4, sl
10014a2e:	ab33      	add	r3, sp, #204	; 0xcc
10014a30:	4699      	mov	r9, r3
10014a32:	46a0      	mov	r8, r4
10014a34:	00a5      	lsls	r5, r4, #2
10014a36:	445d      	add	r5, fp
10014a38:	682c      	ldr	r4, [r5, #0]
10014a3a:	1c31      	adds	r1, r6, #0
10014a3c:	1c20      	adds	r0, r4, #0
10014a3e:	f000 fcb1 	bl	100153a4 <__aeabi_fadd>
10014a42:	1c07      	adds	r7, r0, #0
10014a44:	1c01      	adds	r1, r0, #0
10014a46:	1c20      	adds	r0, r4, #0
10014a48:	f001 f900 	bl	10015c4c <__aeabi_fsub>
10014a4c:	1c31      	adds	r1, r6, #0
10014a4e:	f000 fca9 	bl	100153a4 <__aeabi_fadd>
10014a52:	3d04      	subs	r5, #4
10014a54:	60a8      	str	r0, [r5, #8]
10014a56:	606f      	str	r7, [r5, #4]
10014a58:	1c3e      	adds	r6, r7, #0
10014a5a:	45a9      	cmp	r9, r5
10014a5c:	d1ec      	bne.n	10014a38 <__kernel_rem_pio2f+0x61c>
10014a5e:	4653      	mov	r3, sl
10014a60:	4644      	mov	r4, r8
10014a62:	2b01      	cmp	r3, #1
10014a64:	dd52      	ble.n	10014b0c <__kernel_rem_pio2f+0x6f0>
10014a66:	465b      	mov	r3, fp
10014a68:	00a4      	lsls	r4, r4, #2
10014a6a:	46a0      	mov	r8, r4
10014a6c:	9a00      	ldr	r2, [sp, #0]
10014a6e:	191d      	adds	r5, r3, r4
10014a70:	589e      	ldr	r6, [r3, r2]
10014a72:	682c      	ldr	r4, [r5, #0]
10014a74:	1c30      	adds	r0, r6, #0
10014a76:	1c21      	adds	r1, r4, #0
10014a78:	f000 fc94 	bl	100153a4 <__aeabi_fadd>
10014a7c:	1c07      	adds	r7, r0, #0
10014a7e:	1c01      	adds	r1, r0, #0
10014a80:	1c20      	adds	r0, r4, #0
10014a82:	f001 f8e3 	bl	10015c4c <__aeabi_fsub>
10014a86:	1c31      	adds	r1, r6, #0
10014a88:	f000 fc8c 	bl	100153a4 <__aeabi_fadd>
10014a8c:	3d04      	subs	r5, #4
10014a8e:	60a8      	str	r0, [r5, #8]
10014a90:	606f      	str	r7, [r5, #4]
10014a92:	1c3e      	adds	r6, r7, #0
10014a94:	45ab      	cmp	fp, r5
10014a96:	d1ec      	bne.n	10014a72 <__kernel_rem_pio2f+0x656>
10014a98:	4644      	mov	r4, r8
10014a9a:	2000      	movs	r0, #0
10014a9c:	3404      	adds	r4, #4
10014a9e:	445c      	add	r4, fp
10014aa0:	ad35      	add	r5, sp, #212	; 0xd4
10014aa2:	6821      	ldr	r1, [r4, #0]
10014aa4:	3c04      	subs	r4, #4
10014aa6:	f000 fc7d 	bl	100153a4 <__aeabi_fadd>
10014aaa:	42a5      	cmp	r5, r4
10014aac:	d1f9      	bne.n	10014aa2 <__kernel_rem_pio2f+0x686>
10014aae:	9b03      	ldr	r3, [sp, #12]
10014ab0:	2b00      	cmp	r3, #0
10014ab2:	d02f      	beq.n	10014b14 <__kernel_rem_pio2f+0x6f8>
10014ab4:	2280      	movs	r2, #128	; 0x80
10014ab6:	0612      	lsls	r2, r2, #24
10014ab8:	4694      	mov	ip, r2
10014aba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10014abc:	9a06      	ldr	r2, [sp, #24]
10014abe:	4463      	add	r3, ip
10014ac0:	6013      	str	r3, [r2, #0]
10014ac2:	465b      	mov	r3, fp
10014ac4:	685b      	ldr	r3, [r3, #4]
10014ac6:	4460      	add	r0, ip
10014ac8:	4463      	add	r3, ip
10014aca:	6053      	str	r3, [r2, #4]
10014acc:	6090      	str	r0, [r2, #8]
10014ace:	e760      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014ad0:	2201      	movs	r2, #1
10014ad2:	e5fe      	b.n	100146d2 <__kernel_rem_pio2f+0x2b6>
10014ad4:	2400      	movs	r4, #0
10014ad6:	e5bb      	b.n	10014650 <__kernel_rem_pio2f+0x234>
10014ad8:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014ada:	2b02      	cmp	r3, #2
10014adc:	dc10      	bgt.n	10014b00 <__kernel_rem_pio2f+0x6e4>
10014ade:	2b00      	cmp	r3, #0
10014ae0:	dc0c      	bgt.n	10014afc <__kernel_rem_pio2f+0x6e0>
10014ae2:	2000      	movs	r0, #0
10014ae4:	2b00      	cmp	r3, #0
10014ae6:	d100      	bne.n	10014aea <__kernel_rem_pio2f+0x6ce>
10014ae8:	e74a      	b.n	10014980 <__kernel_rem_pio2f+0x564>
10014aea:	e752      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014aec:	1c28      	adds	r0, r5, #0
10014aee:	f001 fa4b 	bl	10015f88 <__aeabi_f2iz>
10014af2:	4652      	mov	r2, sl
10014af4:	ab0c      	add	r3, sp, #48	; 0x30
10014af6:	5098      	str	r0, [r3, r2]
10014af8:	46da      	mov	sl, fp
10014afa:	e6d5      	b.n	100148a8 <__kernel_rem_pio2f+0x48c>
10014afc:	2000      	movs	r0, #0
10014afe:	e75d      	b.n	100149bc <__kernel_rem_pio2f+0x5a0>
10014b00:	ab34      	add	r3, sp, #208	; 0xd0
10014b02:	469b      	mov	fp, r3
10014b04:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014b06:	2b03      	cmp	r3, #3
10014b08:	d000      	beq.n	10014b0c <__kernel_rem_pio2f+0x6f0>
10014b0a:	e742      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014b0c:	9b03      	ldr	r3, [sp, #12]
10014b0e:	2000      	movs	r0, #0
10014b10:	2b00      	cmp	r3, #0
10014b12:	d1cf      	bne.n	10014ab4 <__kernel_rem_pio2f+0x698>
10014b14:	9b06      	ldr	r3, [sp, #24]
10014b16:	9a34      	ldr	r2, [sp, #208]	; 0xd0
10014b18:	6098      	str	r0, [r3, #8]
10014b1a:	601a      	str	r2, [r3, #0]
10014b1c:	465a      	mov	r2, fp
10014b1e:	6852      	ldr	r2, [r2, #4]
10014b20:	9200      	str	r2, [sp, #0]
10014b22:	605a      	str	r2, [r3, #4]
10014b24:	e735      	b.n	10014992 <__kernel_rem_pio2f+0x576>
10014b26:	ab48      	add	r3, sp, #288	; 0x120
10014b28:	9304      	str	r3, [sp, #16]
10014b2a:	465b      	mov	r3, fp
10014b2c:	009b      	lsls	r3, r3, #2
10014b2e:	469b      	mov	fp, r3
10014b30:	e4ec      	b.n	1001450c <__kernel_rem_pio2f+0xf0>
10014b32:	46c0      	nop			; (mov r8, r8)
10014b34:	3fffffff 	.word	0x3fffffff
10014b38:	1001b178 	.word	0x1001b178
10014b3c:	3fc90000 	.word	0x3fc90000

10014b40 <__kernel_sinf>:
10014b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014b42:	464f      	mov	r7, r9
10014b44:	4646      	mov	r6, r8
10014b46:	4690      	mov	r8, r2
10014b48:	4a33      	ldr	r2, [pc, #204]	; (10014c18 <__kernel_sinf+0xd8>)
10014b4a:	0043      	lsls	r3, r0, #1
10014b4c:	b4c0      	push	{r6, r7}
10014b4e:	1c04      	adds	r4, r0, #0
10014b50:	1c0f      	adds	r7, r1, #0
10014b52:	085b      	lsrs	r3, r3, #1
10014b54:	4293      	cmp	r3, r2
10014b56:	dc05      	bgt.n	10014b64 <__kernel_sinf+0x24>
10014b58:	f001 fa16 	bl	10015f88 <__aeabi_f2iz>
10014b5c:	0003      	movs	r3, r0
10014b5e:	1c20      	adds	r0, r4, #0
10014b60:	2b00      	cmp	r3, #0
10014b62:	d047      	beq.n	10014bf4 <__kernel_sinf+0xb4>
10014b64:	1c21      	adds	r1, r4, #0
10014b66:	1c20      	adds	r0, r4, #0
10014b68:	f000 ff5c 	bl	10015a24 <__aeabi_fmul>
10014b6c:	1c05      	adds	r5, r0, #0
10014b6e:	1c01      	adds	r1, r0, #0
10014b70:	1c20      	adds	r0, r4, #0
10014b72:	f000 ff57 	bl	10015a24 <__aeabi_fmul>
10014b76:	4929      	ldr	r1, [pc, #164]	; (10014c1c <__kernel_sinf+0xdc>)
10014b78:	1c06      	adds	r6, r0, #0
10014b7a:	1c28      	adds	r0, r5, #0
10014b7c:	f000 ff52 	bl	10015a24 <__aeabi_fmul>
10014b80:	4927      	ldr	r1, [pc, #156]	; (10014c20 <__kernel_sinf+0xe0>)
10014b82:	f001 f863 	bl	10015c4c <__aeabi_fsub>
10014b86:	1c29      	adds	r1, r5, #0
10014b88:	f000 ff4c 	bl	10015a24 <__aeabi_fmul>
10014b8c:	4925      	ldr	r1, [pc, #148]	; (10014c24 <__kernel_sinf+0xe4>)
10014b8e:	f000 fc09 	bl	100153a4 <__aeabi_fadd>
10014b92:	1c29      	adds	r1, r5, #0
10014b94:	f000 ff46 	bl	10015a24 <__aeabi_fmul>
10014b98:	4923      	ldr	r1, [pc, #140]	; (10014c28 <__kernel_sinf+0xe8>)
10014b9a:	f001 f857 	bl	10015c4c <__aeabi_fsub>
10014b9e:	1c29      	adds	r1, r5, #0
10014ba0:	f000 ff40 	bl	10015a24 <__aeabi_fmul>
10014ba4:	4921      	ldr	r1, [pc, #132]	; (10014c2c <__kernel_sinf+0xec>)
10014ba6:	f000 fbfd 	bl	100153a4 <__aeabi_fadd>
10014baa:	4643      	mov	r3, r8
10014bac:	4681      	mov	r9, r0
10014bae:	2b00      	cmp	r3, #0
10014bb0:	d024      	beq.n	10014bfc <__kernel_sinf+0xbc>
10014bb2:	21fc      	movs	r1, #252	; 0xfc
10014bb4:	1c38      	adds	r0, r7, #0
10014bb6:	0589      	lsls	r1, r1, #22
10014bb8:	f000 ff34 	bl	10015a24 <__aeabi_fmul>
10014bbc:	4649      	mov	r1, r9
10014bbe:	4680      	mov	r8, r0
10014bc0:	1c30      	adds	r0, r6, #0
10014bc2:	f000 ff2f 	bl	10015a24 <__aeabi_fmul>
10014bc6:	1c01      	adds	r1, r0, #0
10014bc8:	4640      	mov	r0, r8
10014bca:	f001 f83f 	bl	10015c4c <__aeabi_fsub>
10014bce:	1c29      	adds	r1, r5, #0
10014bd0:	f000 ff28 	bl	10015a24 <__aeabi_fmul>
10014bd4:	1c39      	adds	r1, r7, #0
10014bd6:	f001 f839 	bl	10015c4c <__aeabi_fsub>
10014bda:	4915      	ldr	r1, [pc, #84]	; (10014c30 <__kernel_sinf+0xf0>)
10014bdc:	1c05      	adds	r5, r0, #0
10014bde:	1c30      	adds	r0, r6, #0
10014be0:	f000 ff20 	bl	10015a24 <__aeabi_fmul>
10014be4:	1c01      	adds	r1, r0, #0
10014be6:	1c28      	adds	r0, r5, #0
10014be8:	f000 fbdc 	bl	100153a4 <__aeabi_fadd>
10014bec:	1c01      	adds	r1, r0, #0
10014bee:	1c20      	adds	r0, r4, #0
10014bf0:	f001 f82c 	bl	10015c4c <__aeabi_fsub>
10014bf4:	bc0c      	pop	{r2, r3}
10014bf6:	4690      	mov	r8, r2
10014bf8:	4699      	mov	r9, r3
10014bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014bfc:	1c01      	adds	r1, r0, #0
10014bfe:	1c28      	adds	r0, r5, #0
10014c00:	f000 ff10 	bl	10015a24 <__aeabi_fmul>
10014c04:	490a      	ldr	r1, [pc, #40]	; (10014c30 <__kernel_sinf+0xf0>)
10014c06:	f001 f821 	bl	10015c4c <__aeabi_fsub>
10014c0a:	1c31      	adds	r1, r6, #0
10014c0c:	f000 ff0a 	bl	10015a24 <__aeabi_fmul>
10014c10:	1c21      	adds	r1, r4, #0
10014c12:	f000 fbc7 	bl	100153a4 <__aeabi_fadd>
10014c16:	e7ed      	b.n	10014bf4 <__kernel_sinf+0xb4>
10014c18:	31ffffff 	.word	0x31ffffff
10014c1c:	2f2ec9d3 	.word	0x2f2ec9d3
10014c20:	32d72f34 	.word	0x32d72f34
10014c24:	3638ef1b 	.word	0x3638ef1b
10014c28:	39500d01 	.word	0x39500d01
10014c2c:	3c088889 	.word	0x3c088889
10014c30:	3e2aaaab 	.word	0x3e2aaaab

10014c34 <floorf>:
10014c34:	b5f0      	push	{r4, r5, r6, r7, lr}
10014c36:	4647      	mov	r7, r8
10014c38:	0043      	lsls	r3, r0, #1
10014c3a:	b480      	push	{r7}
10014c3c:	085f      	lsrs	r7, r3, #1
10014c3e:	0e1b      	lsrs	r3, r3, #24
10014c40:	3b7f      	subs	r3, #127	; 0x7f
10014c42:	1c05      	adds	r5, r0, #0
10014c44:	1e1c      	subs	r4, r3, #0
10014c46:	2c16      	cmp	r4, #22
10014c48:	dc18      	bgt.n	10014c7c <floorf+0x48>
10014c4a:	4680      	mov	r8, r0
10014c4c:	2b00      	cmp	r3, #0
10014c4e:	db1e      	blt.n	10014c8e <floorf+0x5a>
10014c50:	4f1b      	ldr	r7, [pc, #108]	; (10014cc0 <floorf+0x8c>)
10014c52:	1c06      	adds	r6, r0, #0
10014c54:	411f      	asrs	r7, r3
10014c56:	4207      	tst	r7, r0
10014c58:	d00c      	beq.n	10014c74 <floorf+0x40>
10014c5a:	491a      	ldr	r1, [pc, #104]	; (10014cc4 <floorf+0x90>)
10014c5c:	f000 fba2 	bl	100153a4 <__aeabi_fadd>
10014c60:	2100      	movs	r1, #0
10014c62:	f000 fa81 	bl	10015168 <__aeabi_fcmpgt>
10014c66:	2800      	cmp	r0, #0
10014c68:	d004      	beq.n	10014c74 <floorf+0x40>
10014c6a:	2d00      	cmp	r5, #0
10014c6c:	db1d      	blt.n	10014caa <floorf+0x76>
10014c6e:	4643      	mov	r3, r8
10014c70:	43bb      	bics	r3, r7
10014c72:	001e      	movs	r6, r3
10014c74:	1c30      	adds	r0, r6, #0
10014c76:	bc04      	pop	{r2}
10014c78:	4690      	mov	r8, r2
10014c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014c7c:	4b12      	ldr	r3, [pc, #72]	; (10014cc8 <floorf+0x94>)
10014c7e:	1c06      	adds	r6, r0, #0
10014c80:	429f      	cmp	r7, r3
10014c82:	d9f7      	bls.n	10014c74 <floorf+0x40>
10014c84:	1c01      	adds	r1, r0, #0
10014c86:	f000 fb8d 	bl	100153a4 <__aeabi_fadd>
10014c8a:	1c06      	adds	r6, r0, #0
10014c8c:	e7f2      	b.n	10014c74 <floorf+0x40>
10014c8e:	490d      	ldr	r1, [pc, #52]	; (10014cc4 <floorf+0x90>)
10014c90:	f000 fb88 	bl	100153a4 <__aeabi_fadd>
10014c94:	2100      	movs	r1, #0
10014c96:	f000 fa67 	bl	10015168 <__aeabi_fcmpgt>
10014c9a:	2800      	cmp	r0, #0
10014c9c:	d003      	beq.n	10014ca6 <floorf+0x72>
10014c9e:	2d00      	cmp	r5, #0
10014ca0:	db09      	blt.n	10014cb6 <floorf+0x82>
10014ca2:	2600      	movs	r6, #0
10014ca4:	e7e6      	b.n	10014c74 <floorf+0x40>
10014ca6:	1c2e      	adds	r6, r5, #0
10014ca8:	e7e4      	b.n	10014c74 <floorf+0x40>
10014caa:	2380      	movs	r3, #128	; 0x80
10014cac:	041b      	lsls	r3, r3, #16
10014cae:	4123      	asrs	r3, r4
10014cb0:	4698      	mov	r8, r3
10014cb2:	44a8      	add	r8, r5
10014cb4:	e7db      	b.n	10014c6e <floorf+0x3a>
10014cb6:	2f00      	cmp	r7, #0
10014cb8:	d0f5      	beq.n	10014ca6 <floorf+0x72>
10014cba:	4e04      	ldr	r6, [pc, #16]	; (10014ccc <floorf+0x98>)
10014cbc:	e7da      	b.n	10014c74 <floorf+0x40>
10014cbe:	46c0      	nop			; (mov r8, r8)
10014cc0:	007fffff 	.word	0x007fffff
10014cc4:	7149f2ca 	.word	0x7149f2ca
10014cc8:	7f7fffff 	.word	0x7f7fffff
10014ccc:	bf800000 	.word	0xbf800000

10014cd0 <scalbnf>:
10014cd0:	0043      	lsls	r3, r0, #1
10014cd2:	b570      	push	{r4, r5, r6, lr}
10014cd4:	000d      	movs	r5, r1
10014cd6:	1c04      	adds	r4, r0, #0
10014cd8:	0859      	lsrs	r1, r3, #1
10014cda:	d010      	beq.n	10014cfe <scalbnf+0x2e>
10014cdc:	4e26      	ldr	r6, [pc, #152]	; (10014d78 <scalbnf+0xa8>)
10014cde:	42b1      	cmp	r1, r6
10014ce0:	d80e      	bhi.n	10014d00 <scalbnf+0x30>
10014ce2:	4826      	ldr	r0, [pc, #152]	; (10014d7c <scalbnf+0xac>)
10014ce4:	4281      	cmp	r1, r0
10014ce6:	d90f      	bls.n	10014d08 <scalbnf+0x38>
10014ce8:	0020      	movs	r0, r4
10014cea:	0e1b      	lsrs	r3, r3, #24
10014cec:	195b      	adds	r3, r3, r5
10014cee:	2bfe      	cmp	r3, #254	; 0xfe
10014cf0:	dc29      	bgt.n	10014d46 <scalbnf+0x76>
10014cf2:	2b00      	cmp	r3, #0
10014cf4:	dd15      	ble.n	10014d22 <scalbnf+0x52>
10014cf6:	4922      	ldr	r1, [pc, #136]	; (10014d80 <scalbnf+0xb0>)
10014cf8:	05db      	lsls	r3, r3, #23
10014cfa:	4008      	ands	r0, r1
10014cfc:	4318      	orrs	r0, r3
10014cfe:	bd70      	pop	{r4, r5, r6, pc}
10014d00:	1c01      	adds	r1, r0, #0
10014d02:	f000 fb4f 	bl	100153a4 <__aeabi_fadd>
10014d06:	e7fa      	b.n	10014cfe <scalbnf+0x2e>
10014d08:	2198      	movs	r1, #152	; 0x98
10014d0a:	1c20      	adds	r0, r4, #0
10014d0c:	05c9      	lsls	r1, r1, #23
10014d0e:	f000 fe89 	bl	10015a24 <__aeabi_fmul>
10014d12:	4b1c      	ldr	r3, [pc, #112]	; (10014d84 <scalbnf+0xb4>)
10014d14:	1c04      	adds	r4, r0, #0
10014d16:	429d      	cmp	r5, r3
10014d18:	db11      	blt.n	10014d3e <scalbnf+0x6e>
10014d1a:	0043      	lsls	r3, r0, #1
10014d1c:	0e1b      	lsrs	r3, r3, #24
10014d1e:	3b19      	subs	r3, #25
10014d20:	e7e4      	b.n	10014cec <scalbnf+0x1c>
10014d22:	001a      	movs	r2, r3
10014d24:	3216      	adds	r2, #22
10014d26:	da16      	bge.n	10014d56 <scalbnf+0x86>
10014d28:	4b17      	ldr	r3, [pc, #92]	; (10014d88 <scalbnf+0xb8>)
10014d2a:	1c21      	adds	r1, r4, #0
10014d2c:	429d      	cmp	r5, r3
10014d2e:	dd1c      	ble.n	10014d6a <scalbnf+0x9a>
10014d30:	4816      	ldr	r0, [pc, #88]	; (10014d8c <scalbnf+0xbc>)
10014d32:	f000 f82f 	bl	10014d94 <copysignf>
10014d36:	4915      	ldr	r1, [pc, #84]	; (10014d8c <scalbnf+0xbc>)
10014d38:	f000 fe74 	bl	10015a24 <__aeabi_fmul>
10014d3c:	e7df      	b.n	10014cfe <scalbnf+0x2e>
10014d3e:	4914      	ldr	r1, [pc, #80]	; (10014d90 <scalbnf+0xc0>)
10014d40:	f000 fe70 	bl	10015a24 <__aeabi_fmul>
10014d44:	e7db      	b.n	10014cfe <scalbnf+0x2e>
10014d46:	1c21      	adds	r1, r4, #0
10014d48:	4810      	ldr	r0, [pc, #64]	; (10014d8c <scalbnf+0xbc>)
10014d4a:	f000 f823 	bl	10014d94 <copysignf>
10014d4e:	490f      	ldr	r1, [pc, #60]	; (10014d8c <scalbnf+0xbc>)
10014d50:	f000 fe68 	bl	10015a24 <__aeabi_fmul>
10014d54:	e7d3      	b.n	10014cfe <scalbnf+0x2e>
10014d56:	21cc      	movs	r1, #204	; 0xcc
10014d58:	3319      	adds	r3, #25
10014d5a:	05da      	lsls	r2, r3, #23
10014d5c:	4b08      	ldr	r3, [pc, #32]	; (10014d80 <scalbnf+0xb0>)
10014d5e:	0589      	lsls	r1, r1, #22
10014d60:	4018      	ands	r0, r3
10014d62:	4310      	orrs	r0, r2
10014d64:	f000 fe5e 	bl	10015a24 <__aeabi_fmul>
10014d68:	e7c9      	b.n	10014cfe <scalbnf+0x2e>
10014d6a:	4809      	ldr	r0, [pc, #36]	; (10014d90 <scalbnf+0xc0>)
10014d6c:	f000 f812 	bl	10014d94 <copysignf>
10014d70:	4907      	ldr	r1, [pc, #28]	; (10014d90 <scalbnf+0xc0>)
10014d72:	f000 fe57 	bl	10015a24 <__aeabi_fmul>
10014d76:	e7c2      	b.n	10014cfe <scalbnf+0x2e>
10014d78:	7f7fffff 	.word	0x7f7fffff
10014d7c:	007fffff 	.word	0x007fffff
10014d80:	807fffff 	.word	0x807fffff
10014d84:	ffff3cb0 	.word	0xffff3cb0
10014d88:	0000c350 	.word	0x0000c350
10014d8c:	7149f2ca 	.word	0x7149f2ca
10014d90:	0da24260 	.word	0x0da24260

10014d94 <copysignf>:
10014d94:	0040      	lsls	r0, r0, #1
10014d96:	0fc9      	lsrs	r1, r1, #31
10014d98:	07c9      	lsls	r1, r1, #31
10014d9a:	0840      	lsrs	r0, r0, #1
10014d9c:	4308      	orrs	r0, r1
10014d9e:	4770      	bx	lr

10014da0 <__gnu_thumb1_case_uqi>:
10014da0:	b402      	push	{r1}
10014da2:	4671      	mov	r1, lr
10014da4:	0849      	lsrs	r1, r1, #1
10014da6:	0049      	lsls	r1, r1, #1
10014da8:	5c09      	ldrb	r1, [r1, r0]
10014daa:	0049      	lsls	r1, r1, #1
10014dac:	448e      	add	lr, r1
10014dae:	bc02      	pop	{r1}
10014db0:	4770      	bx	lr
10014db2:	46c0      	nop			; (mov r8, r8)

10014db4 <__aeabi_uidiv>:
10014db4:	2200      	movs	r2, #0
10014db6:	0843      	lsrs	r3, r0, #1
10014db8:	428b      	cmp	r3, r1
10014dba:	d374      	bcc.n	10014ea6 <__aeabi_uidiv+0xf2>
10014dbc:	0903      	lsrs	r3, r0, #4
10014dbe:	428b      	cmp	r3, r1
10014dc0:	d35f      	bcc.n	10014e82 <__aeabi_uidiv+0xce>
10014dc2:	0a03      	lsrs	r3, r0, #8
10014dc4:	428b      	cmp	r3, r1
10014dc6:	d344      	bcc.n	10014e52 <__aeabi_uidiv+0x9e>
10014dc8:	0b03      	lsrs	r3, r0, #12
10014dca:	428b      	cmp	r3, r1
10014dcc:	d328      	bcc.n	10014e20 <__aeabi_uidiv+0x6c>
10014dce:	0c03      	lsrs	r3, r0, #16
10014dd0:	428b      	cmp	r3, r1
10014dd2:	d30d      	bcc.n	10014df0 <__aeabi_uidiv+0x3c>
10014dd4:	22ff      	movs	r2, #255	; 0xff
10014dd6:	0209      	lsls	r1, r1, #8
10014dd8:	ba12      	rev	r2, r2
10014dda:	0c03      	lsrs	r3, r0, #16
10014ddc:	428b      	cmp	r3, r1
10014dde:	d302      	bcc.n	10014de6 <__aeabi_uidiv+0x32>
10014de0:	1212      	asrs	r2, r2, #8
10014de2:	0209      	lsls	r1, r1, #8
10014de4:	d065      	beq.n	10014eb2 <__aeabi_uidiv+0xfe>
10014de6:	0b03      	lsrs	r3, r0, #12
10014de8:	428b      	cmp	r3, r1
10014dea:	d319      	bcc.n	10014e20 <__aeabi_uidiv+0x6c>
10014dec:	e000      	b.n	10014df0 <__aeabi_uidiv+0x3c>
10014dee:	0a09      	lsrs	r1, r1, #8
10014df0:	0bc3      	lsrs	r3, r0, #15
10014df2:	428b      	cmp	r3, r1
10014df4:	d301      	bcc.n	10014dfa <__aeabi_uidiv+0x46>
10014df6:	03cb      	lsls	r3, r1, #15
10014df8:	1ac0      	subs	r0, r0, r3
10014dfa:	4152      	adcs	r2, r2
10014dfc:	0b83      	lsrs	r3, r0, #14
10014dfe:	428b      	cmp	r3, r1
10014e00:	d301      	bcc.n	10014e06 <__aeabi_uidiv+0x52>
10014e02:	038b      	lsls	r3, r1, #14
10014e04:	1ac0      	subs	r0, r0, r3
10014e06:	4152      	adcs	r2, r2
10014e08:	0b43      	lsrs	r3, r0, #13
10014e0a:	428b      	cmp	r3, r1
10014e0c:	d301      	bcc.n	10014e12 <__aeabi_uidiv+0x5e>
10014e0e:	034b      	lsls	r3, r1, #13
10014e10:	1ac0      	subs	r0, r0, r3
10014e12:	4152      	adcs	r2, r2
10014e14:	0b03      	lsrs	r3, r0, #12
10014e16:	428b      	cmp	r3, r1
10014e18:	d301      	bcc.n	10014e1e <__aeabi_uidiv+0x6a>
10014e1a:	030b      	lsls	r3, r1, #12
10014e1c:	1ac0      	subs	r0, r0, r3
10014e1e:	4152      	adcs	r2, r2
10014e20:	0ac3      	lsrs	r3, r0, #11
10014e22:	428b      	cmp	r3, r1
10014e24:	d301      	bcc.n	10014e2a <__aeabi_uidiv+0x76>
10014e26:	02cb      	lsls	r3, r1, #11
10014e28:	1ac0      	subs	r0, r0, r3
10014e2a:	4152      	adcs	r2, r2
10014e2c:	0a83      	lsrs	r3, r0, #10
10014e2e:	428b      	cmp	r3, r1
10014e30:	d301      	bcc.n	10014e36 <__aeabi_uidiv+0x82>
10014e32:	028b      	lsls	r3, r1, #10
10014e34:	1ac0      	subs	r0, r0, r3
10014e36:	4152      	adcs	r2, r2
10014e38:	0a43      	lsrs	r3, r0, #9
10014e3a:	428b      	cmp	r3, r1
10014e3c:	d301      	bcc.n	10014e42 <__aeabi_uidiv+0x8e>
10014e3e:	024b      	lsls	r3, r1, #9
10014e40:	1ac0      	subs	r0, r0, r3
10014e42:	4152      	adcs	r2, r2
10014e44:	0a03      	lsrs	r3, r0, #8
10014e46:	428b      	cmp	r3, r1
10014e48:	d301      	bcc.n	10014e4e <__aeabi_uidiv+0x9a>
10014e4a:	020b      	lsls	r3, r1, #8
10014e4c:	1ac0      	subs	r0, r0, r3
10014e4e:	4152      	adcs	r2, r2
10014e50:	d2cd      	bcs.n	10014dee <__aeabi_uidiv+0x3a>
10014e52:	09c3      	lsrs	r3, r0, #7
10014e54:	428b      	cmp	r3, r1
10014e56:	d301      	bcc.n	10014e5c <__aeabi_uidiv+0xa8>
10014e58:	01cb      	lsls	r3, r1, #7
10014e5a:	1ac0      	subs	r0, r0, r3
10014e5c:	4152      	adcs	r2, r2
10014e5e:	0983      	lsrs	r3, r0, #6
10014e60:	428b      	cmp	r3, r1
10014e62:	d301      	bcc.n	10014e68 <__aeabi_uidiv+0xb4>
10014e64:	018b      	lsls	r3, r1, #6
10014e66:	1ac0      	subs	r0, r0, r3
10014e68:	4152      	adcs	r2, r2
10014e6a:	0943      	lsrs	r3, r0, #5
10014e6c:	428b      	cmp	r3, r1
10014e6e:	d301      	bcc.n	10014e74 <__aeabi_uidiv+0xc0>
10014e70:	014b      	lsls	r3, r1, #5
10014e72:	1ac0      	subs	r0, r0, r3
10014e74:	4152      	adcs	r2, r2
10014e76:	0903      	lsrs	r3, r0, #4
10014e78:	428b      	cmp	r3, r1
10014e7a:	d301      	bcc.n	10014e80 <__aeabi_uidiv+0xcc>
10014e7c:	010b      	lsls	r3, r1, #4
10014e7e:	1ac0      	subs	r0, r0, r3
10014e80:	4152      	adcs	r2, r2
10014e82:	08c3      	lsrs	r3, r0, #3
10014e84:	428b      	cmp	r3, r1
10014e86:	d301      	bcc.n	10014e8c <__aeabi_uidiv+0xd8>
10014e88:	00cb      	lsls	r3, r1, #3
10014e8a:	1ac0      	subs	r0, r0, r3
10014e8c:	4152      	adcs	r2, r2
10014e8e:	0883      	lsrs	r3, r0, #2
10014e90:	428b      	cmp	r3, r1
10014e92:	d301      	bcc.n	10014e98 <__aeabi_uidiv+0xe4>
10014e94:	008b      	lsls	r3, r1, #2
10014e96:	1ac0      	subs	r0, r0, r3
10014e98:	4152      	adcs	r2, r2
10014e9a:	0843      	lsrs	r3, r0, #1
10014e9c:	428b      	cmp	r3, r1
10014e9e:	d301      	bcc.n	10014ea4 <__aeabi_uidiv+0xf0>
10014ea0:	004b      	lsls	r3, r1, #1
10014ea2:	1ac0      	subs	r0, r0, r3
10014ea4:	4152      	adcs	r2, r2
10014ea6:	1a41      	subs	r1, r0, r1
10014ea8:	d200      	bcs.n	10014eac <__aeabi_uidiv+0xf8>
10014eaa:	4601      	mov	r1, r0
10014eac:	4152      	adcs	r2, r2
10014eae:	4610      	mov	r0, r2
10014eb0:	4770      	bx	lr
10014eb2:	e7ff      	b.n	10014eb4 <__aeabi_uidiv+0x100>
10014eb4:	b501      	push	{r0, lr}
10014eb6:	2000      	movs	r0, #0
10014eb8:	f000 f8f0 	bl	1001509c <__aeabi_idiv0>
10014ebc:	bd02      	pop	{r1, pc}
10014ebe:	46c0      	nop			; (mov r8, r8)

10014ec0 <__aeabi_uidivmod>:
10014ec0:	2900      	cmp	r1, #0
10014ec2:	d0f7      	beq.n	10014eb4 <__aeabi_uidiv+0x100>
10014ec4:	e776      	b.n	10014db4 <__aeabi_uidiv>
10014ec6:	4770      	bx	lr

10014ec8 <__aeabi_idiv>:
10014ec8:	4603      	mov	r3, r0
10014eca:	430b      	orrs	r3, r1
10014ecc:	d47f      	bmi.n	10014fce <__aeabi_idiv+0x106>
10014ece:	2200      	movs	r2, #0
10014ed0:	0843      	lsrs	r3, r0, #1
10014ed2:	428b      	cmp	r3, r1
10014ed4:	d374      	bcc.n	10014fc0 <__aeabi_idiv+0xf8>
10014ed6:	0903      	lsrs	r3, r0, #4
10014ed8:	428b      	cmp	r3, r1
10014eda:	d35f      	bcc.n	10014f9c <__aeabi_idiv+0xd4>
10014edc:	0a03      	lsrs	r3, r0, #8
10014ede:	428b      	cmp	r3, r1
10014ee0:	d344      	bcc.n	10014f6c <__aeabi_idiv+0xa4>
10014ee2:	0b03      	lsrs	r3, r0, #12
10014ee4:	428b      	cmp	r3, r1
10014ee6:	d328      	bcc.n	10014f3a <__aeabi_idiv+0x72>
10014ee8:	0c03      	lsrs	r3, r0, #16
10014eea:	428b      	cmp	r3, r1
10014eec:	d30d      	bcc.n	10014f0a <__aeabi_idiv+0x42>
10014eee:	22ff      	movs	r2, #255	; 0xff
10014ef0:	0209      	lsls	r1, r1, #8
10014ef2:	ba12      	rev	r2, r2
10014ef4:	0c03      	lsrs	r3, r0, #16
10014ef6:	428b      	cmp	r3, r1
10014ef8:	d302      	bcc.n	10014f00 <__aeabi_idiv+0x38>
10014efa:	1212      	asrs	r2, r2, #8
10014efc:	0209      	lsls	r1, r1, #8
10014efe:	d065      	beq.n	10014fcc <__aeabi_idiv+0x104>
10014f00:	0b03      	lsrs	r3, r0, #12
10014f02:	428b      	cmp	r3, r1
10014f04:	d319      	bcc.n	10014f3a <__aeabi_idiv+0x72>
10014f06:	e000      	b.n	10014f0a <__aeabi_idiv+0x42>
10014f08:	0a09      	lsrs	r1, r1, #8
10014f0a:	0bc3      	lsrs	r3, r0, #15
10014f0c:	428b      	cmp	r3, r1
10014f0e:	d301      	bcc.n	10014f14 <__aeabi_idiv+0x4c>
10014f10:	03cb      	lsls	r3, r1, #15
10014f12:	1ac0      	subs	r0, r0, r3
10014f14:	4152      	adcs	r2, r2
10014f16:	0b83      	lsrs	r3, r0, #14
10014f18:	428b      	cmp	r3, r1
10014f1a:	d301      	bcc.n	10014f20 <__aeabi_idiv+0x58>
10014f1c:	038b      	lsls	r3, r1, #14
10014f1e:	1ac0      	subs	r0, r0, r3
10014f20:	4152      	adcs	r2, r2
10014f22:	0b43      	lsrs	r3, r0, #13
10014f24:	428b      	cmp	r3, r1
10014f26:	d301      	bcc.n	10014f2c <__aeabi_idiv+0x64>
10014f28:	034b      	lsls	r3, r1, #13
10014f2a:	1ac0      	subs	r0, r0, r3
10014f2c:	4152      	adcs	r2, r2
10014f2e:	0b03      	lsrs	r3, r0, #12
10014f30:	428b      	cmp	r3, r1
10014f32:	d301      	bcc.n	10014f38 <__aeabi_idiv+0x70>
10014f34:	030b      	lsls	r3, r1, #12
10014f36:	1ac0      	subs	r0, r0, r3
10014f38:	4152      	adcs	r2, r2
10014f3a:	0ac3      	lsrs	r3, r0, #11
10014f3c:	428b      	cmp	r3, r1
10014f3e:	d301      	bcc.n	10014f44 <__aeabi_idiv+0x7c>
10014f40:	02cb      	lsls	r3, r1, #11
10014f42:	1ac0      	subs	r0, r0, r3
10014f44:	4152      	adcs	r2, r2
10014f46:	0a83      	lsrs	r3, r0, #10
10014f48:	428b      	cmp	r3, r1
10014f4a:	d301      	bcc.n	10014f50 <__aeabi_idiv+0x88>
10014f4c:	028b      	lsls	r3, r1, #10
10014f4e:	1ac0      	subs	r0, r0, r3
10014f50:	4152      	adcs	r2, r2
10014f52:	0a43      	lsrs	r3, r0, #9
10014f54:	428b      	cmp	r3, r1
10014f56:	d301      	bcc.n	10014f5c <__aeabi_idiv+0x94>
10014f58:	024b      	lsls	r3, r1, #9
10014f5a:	1ac0      	subs	r0, r0, r3
10014f5c:	4152      	adcs	r2, r2
10014f5e:	0a03      	lsrs	r3, r0, #8
10014f60:	428b      	cmp	r3, r1
10014f62:	d301      	bcc.n	10014f68 <__aeabi_idiv+0xa0>
10014f64:	020b      	lsls	r3, r1, #8
10014f66:	1ac0      	subs	r0, r0, r3
10014f68:	4152      	adcs	r2, r2
10014f6a:	d2cd      	bcs.n	10014f08 <__aeabi_idiv+0x40>
10014f6c:	09c3      	lsrs	r3, r0, #7
10014f6e:	428b      	cmp	r3, r1
10014f70:	d301      	bcc.n	10014f76 <__aeabi_idiv+0xae>
10014f72:	01cb      	lsls	r3, r1, #7
10014f74:	1ac0      	subs	r0, r0, r3
10014f76:	4152      	adcs	r2, r2
10014f78:	0983      	lsrs	r3, r0, #6
10014f7a:	428b      	cmp	r3, r1
10014f7c:	d301      	bcc.n	10014f82 <__aeabi_idiv+0xba>
10014f7e:	018b      	lsls	r3, r1, #6
10014f80:	1ac0      	subs	r0, r0, r3
10014f82:	4152      	adcs	r2, r2
10014f84:	0943      	lsrs	r3, r0, #5
10014f86:	428b      	cmp	r3, r1
10014f88:	d301      	bcc.n	10014f8e <__aeabi_idiv+0xc6>
10014f8a:	014b      	lsls	r3, r1, #5
10014f8c:	1ac0      	subs	r0, r0, r3
10014f8e:	4152      	adcs	r2, r2
10014f90:	0903      	lsrs	r3, r0, #4
10014f92:	428b      	cmp	r3, r1
10014f94:	d301      	bcc.n	10014f9a <__aeabi_idiv+0xd2>
10014f96:	010b      	lsls	r3, r1, #4
10014f98:	1ac0      	subs	r0, r0, r3
10014f9a:	4152      	adcs	r2, r2
10014f9c:	08c3      	lsrs	r3, r0, #3
10014f9e:	428b      	cmp	r3, r1
10014fa0:	d301      	bcc.n	10014fa6 <__aeabi_idiv+0xde>
10014fa2:	00cb      	lsls	r3, r1, #3
10014fa4:	1ac0      	subs	r0, r0, r3
10014fa6:	4152      	adcs	r2, r2
10014fa8:	0883      	lsrs	r3, r0, #2
10014faa:	428b      	cmp	r3, r1
10014fac:	d301      	bcc.n	10014fb2 <__aeabi_idiv+0xea>
10014fae:	008b      	lsls	r3, r1, #2
10014fb0:	1ac0      	subs	r0, r0, r3
10014fb2:	4152      	adcs	r2, r2
10014fb4:	0843      	lsrs	r3, r0, #1
10014fb6:	428b      	cmp	r3, r1
10014fb8:	d301      	bcc.n	10014fbe <__aeabi_idiv+0xf6>
10014fba:	004b      	lsls	r3, r1, #1
10014fbc:	1ac0      	subs	r0, r0, r3
10014fbe:	4152      	adcs	r2, r2
10014fc0:	1a41      	subs	r1, r0, r1
10014fc2:	d200      	bcs.n	10014fc6 <__aeabi_idiv+0xfe>
10014fc4:	4601      	mov	r1, r0
10014fc6:	4152      	adcs	r2, r2
10014fc8:	4610      	mov	r0, r2
10014fca:	4770      	bx	lr
10014fcc:	e05d      	b.n	1001508a <__aeabi_idiv+0x1c2>
10014fce:	0fca      	lsrs	r2, r1, #31
10014fd0:	d000      	beq.n	10014fd4 <__aeabi_idiv+0x10c>
10014fd2:	4249      	negs	r1, r1
10014fd4:	1003      	asrs	r3, r0, #32
10014fd6:	d300      	bcc.n	10014fda <__aeabi_idiv+0x112>
10014fd8:	4240      	negs	r0, r0
10014fda:	4053      	eors	r3, r2
10014fdc:	2200      	movs	r2, #0
10014fde:	469c      	mov	ip, r3
10014fe0:	0903      	lsrs	r3, r0, #4
10014fe2:	428b      	cmp	r3, r1
10014fe4:	d32d      	bcc.n	10015042 <__aeabi_idiv+0x17a>
10014fe6:	0a03      	lsrs	r3, r0, #8
10014fe8:	428b      	cmp	r3, r1
10014fea:	d312      	bcc.n	10015012 <__aeabi_idiv+0x14a>
10014fec:	22fc      	movs	r2, #252	; 0xfc
10014fee:	0189      	lsls	r1, r1, #6
10014ff0:	ba12      	rev	r2, r2
10014ff2:	0a03      	lsrs	r3, r0, #8
10014ff4:	428b      	cmp	r3, r1
10014ff6:	d30c      	bcc.n	10015012 <__aeabi_idiv+0x14a>
10014ff8:	0189      	lsls	r1, r1, #6
10014ffa:	1192      	asrs	r2, r2, #6
10014ffc:	428b      	cmp	r3, r1
10014ffe:	d308      	bcc.n	10015012 <__aeabi_idiv+0x14a>
10015000:	0189      	lsls	r1, r1, #6
10015002:	1192      	asrs	r2, r2, #6
10015004:	428b      	cmp	r3, r1
10015006:	d304      	bcc.n	10015012 <__aeabi_idiv+0x14a>
10015008:	0189      	lsls	r1, r1, #6
1001500a:	d03a      	beq.n	10015082 <__aeabi_idiv+0x1ba>
1001500c:	1192      	asrs	r2, r2, #6
1001500e:	e000      	b.n	10015012 <__aeabi_idiv+0x14a>
10015010:	0989      	lsrs	r1, r1, #6
10015012:	09c3      	lsrs	r3, r0, #7
10015014:	428b      	cmp	r3, r1
10015016:	d301      	bcc.n	1001501c <__aeabi_idiv+0x154>
10015018:	01cb      	lsls	r3, r1, #7
1001501a:	1ac0      	subs	r0, r0, r3
1001501c:	4152      	adcs	r2, r2
1001501e:	0983      	lsrs	r3, r0, #6
10015020:	428b      	cmp	r3, r1
10015022:	d301      	bcc.n	10015028 <__aeabi_idiv+0x160>
10015024:	018b      	lsls	r3, r1, #6
10015026:	1ac0      	subs	r0, r0, r3
10015028:	4152      	adcs	r2, r2
1001502a:	0943      	lsrs	r3, r0, #5
1001502c:	428b      	cmp	r3, r1
1001502e:	d301      	bcc.n	10015034 <__aeabi_idiv+0x16c>
10015030:	014b      	lsls	r3, r1, #5
10015032:	1ac0      	subs	r0, r0, r3
10015034:	4152      	adcs	r2, r2
10015036:	0903      	lsrs	r3, r0, #4
10015038:	428b      	cmp	r3, r1
1001503a:	d301      	bcc.n	10015040 <__aeabi_idiv+0x178>
1001503c:	010b      	lsls	r3, r1, #4
1001503e:	1ac0      	subs	r0, r0, r3
10015040:	4152      	adcs	r2, r2
10015042:	08c3      	lsrs	r3, r0, #3
10015044:	428b      	cmp	r3, r1
10015046:	d301      	bcc.n	1001504c <__aeabi_idiv+0x184>
10015048:	00cb      	lsls	r3, r1, #3
1001504a:	1ac0      	subs	r0, r0, r3
1001504c:	4152      	adcs	r2, r2
1001504e:	0883      	lsrs	r3, r0, #2
10015050:	428b      	cmp	r3, r1
10015052:	d301      	bcc.n	10015058 <__aeabi_idiv+0x190>
10015054:	008b      	lsls	r3, r1, #2
10015056:	1ac0      	subs	r0, r0, r3
10015058:	4152      	adcs	r2, r2
1001505a:	d2d9      	bcs.n	10015010 <__aeabi_idiv+0x148>
1001505c:	0843      	lsrs	r3, r0, #1
1001505e:	428b      	cmp	r3, r1
10015060:	d301      	bcc.n	10015066 <__aeabi_idiv+0x19e>
10015062:	004b      	lsls	r3, r1, #1
10015064:	1ac0      	subs	r0, r0, r3
10015066:	4152      	adcs	r2, r2
10015068:	1a41      	subs	r1, r0, r1
1001506a:	d200      	bcs.n	1001506e <__aeabi_idiv+0x1a6>
1001506c:	4601      	mov	r1, r0
1001506e:	4663      	mov	r3, ip
10015070:	4152      	adcs	r2, r2
10015072:	105b      	asrs	r3, r3, #1
10015074:	4610      	mov	r0, r2
10015076:	d301      	bcc.n	1001507c <__aeabi_idiv+0x1b4>
10015078:	4240      	negs	r0, r0
1001507a:	2b00      	cmp	r3, #0
1001507c:	d500      	bpl.n	10015080 <__aeabi_idiv+0x1b8>
1001507e:	4249      	negs	r1, r1
10015080:	4770      	bx	lr
10015082:	4663      	mov	r3, ip
10015084:	105b      	asrs	r3, r3, #1
10015086:	d300      	bcc.n	1001508a <__aeabi_idiv+0x1c2>
10015088:	4240      	negs	r0, r0
1001508a:	b501      	push	{r0, lr}
1001508c:	2000      	movs	r0, #0
1001508e:	f000 f805 	bl	1001509c <__aeabi_idiv0>
10015092:	bd02      	pop	{r1, pc}

10015094 <__aeabi_idivmod>:
10015094:	2900      	cmp	r1, #0
10015096:	d0f8      	beq.n	1001508a <__aeabi_idiv+0x1c2>
10015098:	e716      	b.n	10014ec8 <__aeabi_idiv>
1001509a:	4770      	bx	lr

1001509c <__aeabi_idiv0>:
1001509c:	4770      	bx	lr
1001509e:	46c0      	nop			; (mov r8, r8)

100150a0 <__aeabi_cdrcmple>:
100150a0:	4684      	mov	ip, r0
100150a2:	1c10      	adds	r0, r2, #0
100150a4:	4662      	mov	r2, ip
100150a6:	468c      	mov	ip, r1
100150a8:	1c19      	adds	r1, r3, #0
100150aa:	4663      	mov	r3, ip
100150ac:	e000      	b.n	100150b0 <__aeabi_cdcmpeq>
100150ae:	46c0      	nop			; (mov r8, r8)

100150b0 <__aeabi_cdcmpeq>:
100150b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100150b2:	f001 fef7 	bl	10016ea4 <__ledf2>
100150b6:	2800      	cmp	r0, #0
100150b8:	d401      	bmi.n	100150be <__aeabi_cdcmpeq+0xe>
100150ba:	2100      	movs	r1, #0
100150bc:	42c8      	cmn	r0, r1
100150be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100150c0 <__aeabi_dcmpeq>:
100150c0:	b510      	push	{r4, lr}
100150c2:	f001 fe4b 	bl	10016d5c <__eqdf2>
100150c6:	4240      	negs	r0, r0
100150c8:	3001      	adds	r0, #1
100150ca:	bd10      	pop	{r4, pc}

100150cc <__aeabi_dcmplt>:
100150cc:	b510      	push	{r4, lr}
100150ce:	f001 fee9 	bl	10016ea4 <__ledf2>
100150d2:	2800      	cmp	r0, #0
100150d4:	db01      	blt.n	100150da <__aeabi_dcmplt+0xe>
100150d6:	2000      	movs	r0, #0
100150d8:	bd10      	pop	{r4, pc}
100150da:	2001      	movs	r0, #1
100150dc:	bd10      	pop	{r4, pc}
100150de:	46c0      	nop			; (mov r8, r8)

100150e0 <__aeabi_dcmple>:
100150e0:	b510      	push	{r4, lr}
100150e2:	f001 fedf 	bl	10016ea4 <__ledf2>
100150e6:	2800      	cmp	r0, #0
100150e8:	dd01      	ble.n	100150ee <__aeabi_dcmple+0xe>
100150ea:	2000      	movs	r0, #0
100150ec:	bd10      	pop	{r4, pc}
100150ee:	2001      	movs	r0, #1
100150f0:	bd10      	pop	{r4, pc}
100150f2:	46c0      	nop			; (mov r8, r8)

100150f4 <__aeabi_dcmpgt>:
100150f4:	b510      	push	{r4, lr}
100150f6:	f001 fe71 	bl	10016ddc <__gedf2>
100150fa:	2800      	cmp	r0, #0
100150fc:	dc01      	bgt.n	10015102 <__aeabi_dcmpgt+0xe>
100150fe:	2000      	movs	r0, #0
10015100:	bd10      	pop	{r4, pc}
10015102:	2001      	movs	r0, #1
10015104:	bd10      	pop	{r4, pc}
10015106:	46c0      	nop			; (mov r8, r8)

10015108 <__aeabi_dcmpge>:
10015108:	b510      	push	{r4, lr}
1001510a:	f001 fe67 	bl	10016ddc <__gedf2>
1001510e:	2800      	cmp	r0, #0
10015110:	da01      	bge.n	10015116 <__aeabi_dcmpge+0xe>
10015112:	2000      	movs	r0, #0
10015114:	bd10      	pop	{r4, pc}
10015116:	2001      	movs	r0, #1
10015118:	bd10      	pop	{r4, pc}
1001511a:	46c0      	nop			; (mov r8, r8)

1001511c <__aeabi_cfrcmple>:
1001511c:	4684      	mov	ip, r0
1001511e:	1c08      	adds	r0, r1, #0
10015120:	4661      	mov	r1, ip
10015122:	e7ff      	b.n	10015124 <__aeabi_cfcmpeq>

10015124 <__aeabi_cfcmpeq>:
10015124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10015126:	f000 fc39 	bl	1001599c <__lesf2>
1001512a:	2800      	cmp	r0, #0
1001512c:	d401      	bmi.n	10015132 <__aeabi_cfcmpeq+0xe>
1001512e:	2100      	movs	r1, #0
10015130:	42c8      	cmn	r0, r1
10015132:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015134 <__aeabi_fcmpeq>:
10015134:	b510      	push	{r4, lr}
10015136:	f000 fbc5 	bl	100158c4 <__eqsf2>
1001513a:	4240      	negs	r0, r0
1001513c:	3001      	adds	r0, #1
1001513e:	bd10      	pop	{r4, pc}

10015140 <__aeabi_fcmplt>:
10015140:	b510      	push	{r4, lr}
10015142:	f000 fc2b 	bl	1001599c <__lesf2>
10015146:	2800      	cmp	r0, #0
10015148:	db01      	blt.n	1001514e <__aeabi_fcmplt+0xe>
1001514a:	2000      	movs	r0, #0
1001514c:	bd10      	pop	{r4, pc}
1001514e:	2001      	movs	r0, #1
10015150:	bd10      	pop	{r4, pc}
10015152:	46c0      	nop			; (mov r8, r8)

10015154 <__aeabi_fcmple>:
10015154:	b510      	push	{r4, lr}
10015156:	f000 fc21 	bl	1001599c <__lesf2>
1001515a:	2800      	cmp	r0, #0
1001515c:	dd01      	ble.n	10015162 <__aeabi_fcmple+0xe>
1001515e:	2000      	movs	r0, #0
10015160:	bd10      	pop	{r4, pc}
10015162:	2001      	movs	r0, #1
10015164:	bd10      	pop	{r4, pc}
10015166:	46c0      	nop			; (mov r8, r8)

10015168 <__aeabi_fcmpgt>:
10015168:	b510      	push	{r4, lr}
1001516a:	f000 fbd3 	bl	10015914 <__gesf2>
1001516e:	2800      	cmp	r0, #0
10015170:	dc01      	bgt.n	10015176 <__aeabi_fcmpgt+0xe>
10015172:	2000      	movs	r0, #0
10015174:	bd10      	pop	{r4, pc}
10015176:	2001      	movs	r0, #1
10015178:	bd10      	pop	{r4, pc}
1001517a:	46c0      	nop			; (mov r8, r8)

1001517c <__aeabi_fcmpge>:
1001517c:	b510      	push	{r4, lr}
1001517e:	f000 fbc9 	bl	10015914 <__gesf2>
10015182:	2800      	cmp	r0, #0
10015184:	da01      	bge.n	1001518a <__aeabi_fcmpge+0xe>
10015186:	2000      	movs	r0, #0
10015188:	bd10      	pop	{r4, pc}
1001518a:	2001      	movs	r0, #1
1001518c:	bd10      	pop	{r4, pc}
1001518e:	46c0      	nop			; (mov r8, r8)

10015190 <__aeabi_ldivmod>:
10015190:	2b00      	cmp	r3, #0
10015192:	d115      	bne.n	100151c0 <__aeabi_ldivmod+0x30>
10015194:	2a00      	cmp	r2, #0
10015196:	d113      	bne.n	100151c0 <__aeabi_ldivmod+0x30>
10015198:	2900      	cmp	r1, #0
1001519a:	db06      	blt.n	100151aa <__aeabi_ldivmod+0x1a>
1001519c:	dc01      	bgt.n	100151a2 <__aeabi_ldivmod+0x12>
1001519e:	2800      	cmp	r0, #0
100151a0:	d006      	beq.n	100151b0 <__aeabi_ldivmod+0x20>
100151a2:	2000      	movs	r0, #0
100151a4:	43c0      	mvns	r0, r0
100151a6:	0841      	lsrs	r1, r0, #1
100151a8:	e002      	b.n	100151b0 <__aeabi_ldivmod+0x20>
100151aa:	2180      	movs	r1, #128	; 0x80
100151ac:	0609      	lsls	r1, r1, #24
100151ae:	2000      	movs	r0, #0
100151b0:	b407      	push	{r0, r1, r2}
100151b2:	4802      	ldr	r0, [pc, #8]	; (100151bc <__aeabi_ldivmod+0x2c>)
100151b4:	a101      	add	r1, pc, #4	; (adr r1, 100151bc <__aeabi_ldivmod+0x2c>)
100151b6:	1840      	adds	r0, r0, r1
100151b8:	9002      	str	r0, [sp, #8]
100151ba:	bd03      	pop	{r0, r1, pc}
100151bc:	fffffee1 	.word	0xfffffee1
100151c0:	b403      	push	{r0, r1}
100151c2:	4668      	mov	r0, sp
100151c4:	b501      	push	{r0, lr}
100151c6:	9802      	ldr	r0, [sp, #8]
100151c8:	f000 f8d0 	bl	1001536c <__gnu_ldivmod_helper>
100151cc:	9b01      	ldr	r3, [sp, #4]
100151ce:	469e      	mov	lr, r3
100151d0:	b002      	add	sp, #8
100151d2:	bc0c      	pop	{r2, r3}
100151d4:	4770      	bx	lr
100151d6:	46c0      	nop			; (mov r8, r8)

100151d8 <__aeabi_lmul>:
100151d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100151da:	464f      	mov	r7, r9
100151dc:	4646      	mov	r6, r8
100151de:	b4c0      	push	{r6, r7}
100151e0:	0416      	lsls	r6, r2, #16
100151e2:	0c36      	lsrs	r6, r6, #16
100151e4:	4699      	mov	r9, r3
100151e6:	0033      	movs	r3, r6
100151e8:	0405      	lsls	r5, r0, #16
100151ea:	0c2c      	lsrs	r4, r5, #16
100151ec:	0c07      	lsrs	r7, r0, #16
100151ee:	0c15      	lsrs	r5, r2, #16
100151f0:	4363      	muls	r3, r4
100151f2:	437e      	muls	r6, r7
100151f4:	436f      	muls	r7, r5
100151f6:	4365      	muls	r5, r4
100151f8:	0c1c      	lsrs	r4, r3, #16
100151fa:	19ad      	adds	r5, r5, r6
100151fc:	1964      	adds	r4, r4, r5
100151fe:	469c      	mov	ip, r3
10015200:	42a6      	cmp	r6, r4
10015202:	d903      	bls.n	1001520c <__aeabi_lmul+0x34>
10015204:	2380      	movs	r3, #128	; 0x80
10015206:	025b      	lsls	r3, r3, #9
10015208:	4698      	mov	r8, r3
1001520a:	4447      	add	r7, r8
1001520c:	4663      	mov	r3, ip
1001520e:	0c25      	lsrs	r5, r4, #16
10015210:	19ef      	adds	r7, r5, r7
10015212:	041d      	lsls	r5, r3, #16
10015214:	464b      	mov	r3, r9
10015216:	434a      	muls	r2, r1
10015218:	4343      	muls	r3, r0
1001521a:	0c2d      	lsrs	r5, r5, #16
1001521c:	0424      	lsls	r4, r4, #16
1001521e:	1964      	adds	r4, r4, r5
10015220:	1899      	adds	r1, r3, r2
10015222:	19c9      	adds	r1, r1, r7
10015224:	0020      	movs	r0, r4
10015226:	bc0c      	pop	{r2, r3}
10015228:	4690      	mov	r8, r2
1001522a:	4699      	mov	r9, r3
1001522c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001522e:	46c0      	nop			; (mov r8, r8)

10015230 <__aeabi_f2uiz>:
10015230:	219e      	movs	r1, #158	; 0x9e
10015232:	b510      	push	{r4, lr}
10015234:	05c9      	lsls	r1, r1, #23
10015236:	1c04      	adds	r4, r0, #0
10015238:	f7ff ffa0 	bl	1001517c <__aeabi_fcmpge>
1001523c:	2800      	cmp	r0, #0
1001523e:	d103      	bne.n	10015248 <__aeabi_f2uiz+0x18>
10015240:	1c20      	adds	r0, r4, #0
10015242:	f000 fea1 	bl	10015f88 <__aeabi_f2iz>
10015246:	bd10      	pop	{r4, pc}
10015248:	219e      	movs	r1, #158	; 0x9e
1001524a:	1c20      	adds	r0, r4, #0
1001524c:	05c9      	lsls	r1, r1, #23
1001524e:	f000 fcfd 	bl	10015c4c <__aeabi_fsub>
10015252:	f000 fe99 	bl	10015f88 <__aeabi_f2iz>
10015256:	2380      	movs	r3, #128	; 0x80
10015258:	061b      	lsls	r3, r3, #24
1001525a:	469c      	mov	ip, r3
1001525c:	4460      	add	r0, ip
1001525e:	e7f2      	b.n	10015246 <__aeabi_f2uiz+0x16>

10015260 <__aeabi_d2uiz>:
10015260:	b570      	push	{r4, r5, r6, lr}
10015262:	2200      	movs	r2, #0
10015264:	4b0c      	ldr	r3, [pc, #48]	; (10015298 <__aeabi_d2uiz+0x38>)
10015266:	0004      	movs	r4, r0
10015268:	000d      	movs	r5, r1
1001526a:	f7ff ff4d 	bl	10015108 <__aeabi_dcmpge>
1001526e:	2800      	cmp	r0, #0
10015270:	d104      	bne.n	1001527c <__aeabi_d2uiz+0x1c>
10015272:	0020      	movs	r0, r4
10015274:	0029      	movs	r1, r5
10015276:	f002 fc4d 	bl	10017b14 <__aeabi_d2iz>
1001527a:	bd70      	pop	{r4, r5, r6, pc}
1001527c:	4b06      	ldr	r3, [pc, #24]	; (10015298 <__aeabi_d2uiz+0x38>)
1001527e:	2200      	movs	r2, #0
10015280:	0020      	movs	r0, r4
10015282:	0029      	movs	r1, r5
10015284:	f002 f8f2 	bl	1001746c <__aeabi_dsub>
10015288:	f002 fc44 	bl	10017b14 <__aeabi_d2iz>
1001528c:	2380      	movs	r3, #128	; 0x80
1001528e:	061b      	lsls	r3, r3, #24
10015290:	469c      	mov	ip, r3
10015292:	4460      	add	r0, ip
10015294:	e7f1      	b.n	1001527a <__aeabi_d2uiz+0x1a>
10015296:	46c0      	nop			; (mov r8, r8)
10015298:	41e00000 	.word	0x41e00000

1001529c <__aeabi_f2lz>:
1001529c:	b510      	push	{r4, lr}
1001529e:	2100      	movs	r1, #0
100152a0:	1c04      	adds	r4, r0, #0
100152a2:	f7ff ff4d 	bl	10015140 <__aeabi_fcmplt>
100152a6:	2800      	cmp	r0, #0
100152a8:	d103      	bne.n	100152b2 <__aeabi_f2lz+0x16>
100152aa:	1c20      	adds	r0, r4, #0
100152ac:	f000 f80c 	bl	100152c8 <__aeabi_f2ulz>
100152b0:	bd10      	pop	{r4, pc}
100152b2:	2380      	movs	r3, #128	; 0x80
100152b4:	061b      	lsls	r3, r3, #24
100152b6:	18e0      	adds	r0, r4, r3
100152b8:	f000 f806 	bl	100152c8 <__aeabi_f2ulz>
100152bc:	0002      	movs	r2, r0
100152be:	000b      	movs	r3, r1
100152c0:	2100      	movs	r1, #0
100152c2:	4250      	negs	r0, r2
100152c4:	4199      	sbcs	r1, r3
100152c6:	e7f3      	b.n	100152b0 <__aeabi_f2lz+0x14>

100152c8 <__aeabi_f2ulz>:
100152c8:	b570      	push	{r4, r5, r6, lr}
100152ca:	f002 fcd3 	bl	10017c74 <__aeabi_f2d>
100152ce:	2200      	movs	r2, #0
100152d0:	4b0b      	ldr	r3, [pc, #44]	; (10015300 <__aeabi_f2ulz+0x38>)
100152d2:	000d      	movs	r5, r1
100152d4:	0004      	movs	r4, r0
100152d6:	f001 fe4f 	bl	10016f78 <__aeabi_dmul>
100152da:	f7ff ffc1 	bl	10015260 <__aeabi_d2uiz>
100152de:	0006      	movs	r6, r0
100152e0:	f002 fc90 	bl	10017c04 <__aeabi_ui2d>
100152e4:	2200      	movs	r2, #0
100152e6:	4b07      	ldr	r3, [pc, #28]	; (10015304 <__aeabi_f2ulz+0x3c>)
100152e8:	f001 fe46 	bl	10016f78 <__aeabi_dmul>
100152ec:	0002      	movs	r2, r0
100152ee:	000b      	movs	r3, r1
100152f0:	0020      	movs	r0, r4
100152f2:	0029      	movs	r1, r5
100152f4:	f002 f8ba 	bl	1001746c <__aeabi_dsub>
100152f8:	f7ff ffb2 	bl	10015260 <__aeabi_d2uiz>
100152fc:	0031      	movs	r1, r6
100152fe:	bd70      	pop	{r4, r5, r6, pc}
10015300:	3df00000 	.word	0x3df00000
10015304:	41f00000 	.word	0x41f00000

10015308 <__aeabi_l2f>:
10015308:	b5d0      	push	{r4, r6, r7, lr}
1001530a:	2601      	movs	r6, #1
1001530c:	0002      	movs	r2, r0
1001530e:	000b      	movs	r3, r1
10015310:	4f13      	ldr	r7, [pc, #76]	; (10015360 <__aeabi_l2f+0x58>)
10015312:	4276      	negs	r6, r6
10015314:	18b6      	adds	r6, r6, r2
10015316:	415f      	adcs	r7, r3
10015318:	0004      	movs	r4, r0
1001531a:	4812      	ldr	r0, [pc, #72]	; (10015364 <__aeabi_l2f+0x5c>)
1001531c:	4287      	cmp	r7, r0
1001531e:	d919      	bls.n	10015354 <__aeabi_l2f+0x4c>
10015320:	0552      	lsls	r2, r2, #21
10015322:	d004      	beq.n	1001532e <__aeabi_l2f+0x26>
10015324:	2380      	movs	r3, #128	; 0x80
10015326:	0ae4      	lsrs	r4, r4, #11
10015328:	02e4      	lsls	r4, r4, #11
1001532a:	011b      	lsls	r3, r3, #4
1001532c:	431c      	orrs	r4, r3
1001532e:	0008      	movs	r0, r1
10015330:	f002 fc26 	bl	10017b80 <__aeabi_i2d>
10015334:	2200      	movs	r2, #0
10015336:	4b0c      	ldr	r3, [pc, #48]	; (10015368 <__aeabi_l2f+0x60>)
10015338:	f001 fe1e 	bl	10016f78 <__aeabi_dmul>
1001533c:	0006      	movs	r6, r0
1001533e:	000f      	movs	r7, r1
10015340:	0020      	movs	r0, r4
10015342:	f002 fc5f 	bl	10017c04 <__aeabi_ui2d>
10015346:	0032      	movs	r2, r6
10015348:	003b      	movs	r3, r7
1001534a:	f000 fec5 	bl	100160d8 <__aeabi_dadd>
1001534e:	f002 fce5 	bl	10017d1c <__aeabi_d2f>
10015352:	bdd0      	pop	{r4, r6, r7, pc}
10015354:	4287      	cmp	r7, r0
10015356:	d1ea      	bne.n	1001532e <__aeabi_l2f+0x26>
10015358:	1cb0      	adds	r0, r6, #2
1001535a:	d8e1      	bhi.n	10015320 <__aeabi_l2f+0x18>
1001535c:	e7e7      	b.n	1001532e <__aeabi_l2f+0x26>
1001535e:	46c0      	nop			; (mov r8, r8)
10015360:	001fffff 	.word	0x001fffff
10015364:	003fffff 	.word	0x003fffff
10015368:	41f00000 	.word	0x41f00000

1001536c <__gnu_ldivmod_helper>:
1001536c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001536e:	b083      	sub	sp, #12
10015370:	0016      	movs	r6, r2
10015372:	001f      	movs	r7, r3
10015374:	9000      	str	r0, [sp, #0]
10015376:	9101      	str	r1, [sp, #4]
10015378:	f002 fd7a 	bl	10017e70 <__divdi3>
1001537c:	0004      	movs	r4, r0
1001537e:	000d      	movs	r5, r1
10015380:	0002      	movs	r2, r0
10015382:	000b      	movs	r3, r1
10015384:	0030      	movs	r0, r6
10015386:	0039      	movs	r1, r7
10015388:	f7ff ff26 	bl	100151d8 <__aeabi_lmul>
1001538c:	9a00      	ldr	r2, [sp, #0]
1001538e:	9b01      	ldr	r3, [sp, #4]
10015390:	1a12      	subs	r2, r2, r0
10015392:	418b      	sbcs	r3, r1
10015394:	9908      	ldr	r1, [sp, #32]
10015396:	0020      	movs	r0, r4
10015398:	600a      	str	r2, [r1, #0]
1001539a:	604b      	str	r3, [r1, #4]
1001539c:	0029      	movs	r1, r5
1001539e:	b003      	add	sp, #12
100153a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100153a2:	46c0      	nop			; (mov r8, r8)

100153a4 <__aeabi_fadd>:
100153a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100153a6:	024a      	lsls	r2, r1, #9
100153a8:	0243      	lsls	r3, r0, #9
100153aa:	0044      	lsls	r4, r0, #1
100153ac:	004e      	lsls	r6, r1, #1
100153ae:	0fc5      	lsrs	r5, r0, #31
100153b0:	0e24      	lsrs	r4, r4, #24
100153b2:	0028      	movs	r0, r5
100153b4:	099b      	lsrs	r3, r3, #6
100153b6:	0e36      	lsrs	r6, r6, #24
100153b8:	0fc9      	lsrs	r1, r1, #31
100153ba:	0992      	lsrs	r2, r2, #6
100153bc:	428d      	cmp	r5, r1
100153be:	d059      	beq.n	10015474 <__aeabi_fadd+0xd0>
100153c0:	1ba0      	subs	r0, r4, r6
100153c2:	2800      	cmp	r0, #0
100153c4:	dc00      	bgt.n	100153c8 <__aeabi_fadd+0x24>
100153c6:	e08d      	b.n	100154e4 <__aeabi_fadd+0x140>
100153c8:	2e00      	cmp	r6, #0
100153ca:	d11a      	bne.n	10015402 <__aeabi_fadd+0x5e>
100153cc:	2a00      	cmp	r2, #0
100153ce:	d000      	beq.n	100153d2 <__aeabi_fadd+0x2e>
100153d0:	e079      	b.n	100154c6 <__aeabi_fadd+0x122>
100153d2:	075a      	lsls	r2, r3, #29
100153d4:	d004      	beq.n	100153e0 <__aeabi_fadd+0x3c>
100153d6:	220f      	movs	r2, #15
100153d8:	401a      	ands	r2, r3
100153da:	2a04      	cmp	r2, #4
100153dc:	d000      	beq.n	100153e0 <__aeabi_fadd+0x3c>
100153de:	3304      	adds	r3, #4
100153e0:	015a      	lsls	r2, r3, #5
100153e2:	d538      	bpl.n	10015456 <__aeabi_fadd+0xb2>
100153e4:	3401      	adds	r4, #1
100153e6:	2cff      	cmp	r4, #255	; 0xff
100153e8:	d100      	bne.n	100153ec <__aeabi_fadd+0x48>
100153ea:	e089      	b.n	10015500 <__aeabi_fadd+0x15c>
100153ec:	0028      	movs	r0, r5
100153ee:	019b      	lsls	r3, r3, #6
100153f0:	0a5b      	lsrs	r3, r3, #9
100153f2:	b2e4      	uxtb	r4, r4
100153f4:	025b      	lsls	r3, r3, #9
100153f6:	05e4      	lsls	r4, r4, #23
100153f8:	0a5b      	lsrs	r3, r3, #9
100153fa:	4323      	orrs	r3, r4
100153fc:	07c0      	lsls	r0, r0, #31
100153fe:	4318      	orrs	r0, r3
10015400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015402:	2cff      	cmp	r4, #255	; 0xff
10015404:	d0e5      	beq.n	100153d2 <__aeabi_fadd+0x2e>
10015406:	2180      	movs	r1, #128	; 0x80
10015408:	04c9      	lsls	r1, r1, #19
1001540a:	430a      	orrs	r2, r1
1001540c:	281b      	cmp	r0, #27
1001540e:	dd00      	ble.n	10015412 <__aeabi_fadd+0x6e>
10015410:	e089      	b.n	10015526 <__aeabi_fadd+0x182>
10015412:	0016      	movs	r6, r2
10015414:	2120      	movs	r1, #32
10015416:	40c6      	lsrs	r6, r0
10015418:	1a08      	subs	r0, r1, r0
1001541a:	4082      	lsls	r2, r0
1001541c:	1e51      	subs	r1, r2, #1
1001541e:	418a      	sbcs	r2, r1
10015420:	4332      	orrs	r2, r6
10015422:	1a9b      	subs	r3, r3, r2
10015424:	015a      	lsls	r2, r3, #5
10015426:	d514      	bpl.n	10015452 <__aeabi_fadd+0xae>
10015428:	019b      	lsls	r3, r3, #6
1001542a:	099e      	lsrs	r6, r3, #6
1001542c:	0030      	movs	r0, r6
1001542e:	f002 fd01 	bl	10017e34 <__clzsi2>
10015432:	3805      	subs	r0, #5
10015434:	4086      	lsls	r6, r0
10015436:	4284      	cmp	r4, r0
10015438:	dc65      	bgt.n	10015506 <__aeabi_fadd+0x162>
1001543a:	1b04      	subs	r4, r0, r4
1001543c:	0033      	movs	r3, r6
1001543e:	2020      	movs	r0, #32
10015440:	3401      	adds	r4, #1
10015442:	40e3      	lsrs	r3, r4
10015444:	1b04      	subs	r4, r0, r4
10015446:	40a6      	lsls	r6, r4
10015448:	1e72      	subs	r2, r6, #1
1001544a:	4196      	sbcs	r6, r2
1001544c:	2400      	movs	r4, #0
1001544e:	4333      	orrs	r3, r6
10015450:	e7bf      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015452:	075a      	lsls	r2, r3, #29
10015454:	d1bf      	bne.n	100153d6 <__aeabi_fadd+0x32>
10015456:	08df      	lsrs	r7, r3, #3
10015458:	0028      	movs	r0, r5
1001545a:	2cff      	cmp	r4, #255	; 0xff
1001545c:	d12f      	bne.n	100154be <__aeabi_fadd+0x11a>
1001545e:	2f00      	cmp	r7, #0
10015460:	d100      	bne.n	10015464 <__aeabi_fadd+0xc0>
10015462:	e087      	b.n	10015574 <__aeabi_fadd+0x1d0>
10015464:	2280      	movs	r2, #128	; 0x80
10015466:	03d2      	lsls	r2, r2, #15
10015468:	0013      	movs	r3, r2
1001546a:	433b      	orrs	r3, r7
1001546c:	025b      	lsls	r3, r3, #9
1001546e:	0a5b      	lsrs	r3, r3, #9
10015470:	24ff      	movs	r4, #255	; 0xff
10015472:	e7bf      	b.n	100153f4 <__aeabi_fadd+0x50>
10015474:	1ba1      	subs	r1, r4, r6
10015476:	2900      	cmp	r1, #0
10015478:	dd49      	ble.n	1001550e <__aeabi_fadd+0x16a>
1001547a:	2e00      	cmp	r6, #0
1001547c:	d029      	beq.n	100154d2 <__aeabi_fadd+0x12e>
1001547e:	2cff      	cmp	r4, #255	; 0xff
10015480:	d0a7      	beq.n	100153d2 <__aeabi_fadd+0x2e>
10015482:	2680      	movs	r6, #128	; 0x80
10015484:	04f6      	lsls	r6, r6, #19
10015486:	4332      	orrs	r2, r6
10015488:	291b      	cmp	r1, #27
1001548a:	dd00      	ble.n	1001548e <__aeabi_fadd+0xea>
1001548c:	e08d      	b.n	100155aa <__aeabi_fadd+0x206>
1001548e:	0017      	movs	r7, r2
10015490:	2620      	movs	r6, #32
10015492:	40cf      	lsrs	r7, r1
10015494:	1a71      	subs	r1, r6, r1
10015496:	408a      	lsls	r2, r1
10015498:	1e51      	subs	r1, r2, #1
1001549a:	418a      	sbcs	r2, r1
1001549c:	433a      	orrs	r2, r7
1001549e:	189b      	adds	r3, r3, r2
100154a0:	015a      	lsls	r2, r3, #5
100154a2:	d5d6      	bpl.n	10015452 <__aeabi_fadd+0xae>
100154a4:	3401      	adds	r4, #1
100154a6:	2cff      	cmp	r4, #255	; 0xff
100154a8:	d064      	beq.n	10015574 <__aeabi_fadd+0x1d0>
100154aa:	2201      	movs	r2, #1
100154ac:	4976      	ldr	r1, [pc, #472]	; (10015688 <__aeabi_fadd+0x2e4>)
100154ae:	401a      	ands	r2, r3
100154b0:	085b      	lsrs	r3, r3, #1
100154b2:	400b      	ands	r3, r1
100154b4:	4313      	orrs	r3, r2
100154b6:	e78c      	b.n	100153d2 <__aeabi_fadd+0x2e>
100154b8:	1e03      	subs	r3, r0, #0
100154ba:	d1ca      	bne.n	10015452 <__aeabi_fadd+0xae>
100154bc:	2000      	movs	r0, #0
100154be:	027b      	lsls	r3, r7, #9
100154c0:	0a5b      	lsrs	r3, r3, #9
100154c2:	b2e4      	uxtb	r4, r4
100154c4:	e796      	b.n	100153f4 <__aeabi_fadd+0x50>
100154c6:	3801      	subs	r0, #1
100154c8:	2800      	cmp	r0, #0
100154ca:	d0aa      	beq.n	10015422 <__aeabi_fadd+0x7e>
100154cc:	2cff      	cmp	r4, #255	; 0xff
100154ce:	d19d      	bne.n	1001540c <__aeabi_fadd+0x68>
100154d0:	e77f      	b.n	100153d2 <__aeabi_fadd+0x2e>
100154d2:	2a00      	cmp	r2, #0
100154d4:	d100      	bne.n	100154d8 <__aeabi_fadd+0x134>
100154d6:	e77c      	b.n	100153d2 <__aeabi_fadd+0x2e>
100154d8:	3901      	subs	r1, #1
100154da:	2900      	cmp	r1, #0
100154dc:	d0df      	beq.n	1001549e <__aeabi_fadd+0xfa>
100154de:	2cff      	cmp	r4, #255	; 0xff
100154e0:	d1d2      	bne.n	10015488 <__aeabi_fadd+0xe4>
100154e2:	e776      	b.n	100153d2 <__aeabi_fadd+0x2e>
100154e4:	2800      	cmp	r0, #0
100154e6:	d120      	bne.n	1001552a <__aeabi_fadd+0x186>
100154e8:	1c60      	adds	r0, r4, #1
100154ea:	b2c0      	uxtb	r0, r0
100154ec:	2801      	cmp	r0, #1
100154ee:	dd53      	ble.n	10015598 <__aeabi_fadd+0x1f4>
100154f0:	2780      	movs	r7, #128	; 0x80
100154f2:	1a9e      	subs	r6, r3, r2
100154f4:	04ff      	lsls	r7, r7, #19
100154f6:	4037      	ands	r7, r6
100154f8:	d02f      	beq.n	1001555a <__aeabi_fadd+0x1b6>
100154fa:	1ad6      	subs	r6, r2, r3
100154fc:	000d      	movs	r5, r1
100154fe:	e795      	b.n	1001542c <__aeabi_fadd+0x88>
10015500:	0028      	movs	r0, r5
10015502:	2300      	movs	r3, #0
10015504:	e776      	b.n	100153f4 <__aeabi_fadd+0x50>
10015506:	4b61      	ldr	r3, [pc, #388]	; (1001568c <__aeabi_fadd+0x2e8>)
10015508:	1a24      	subs	r4, r4, r0
1001550a:	4033      	ands	r3, r6
1001550c:	e761      	b.n	100153d2 <__aeabi_fadd+0x2e>
1001550e:	2900      	cmp	r1, #0
10015510:	d14d      	bne.n	100155ae <__aeabi_fadd+0x20a>
10015512:	1c61      	adds	r1, r4, #1
10015514:	b2ce      	uxtb	r6, r1
10015516:	2e01      	cmp	r6, #1
10015518:	dd2f      	ble.n	1001557a <__aeabi_fadd+0x1d6>
1001551a:	29ff      	cmp	r1, #255	; 0xff
1001551c:	d02a      	beq.n	10015574 <__aeabi_fadd+0x1d0>
1001551e:	189b      	adds	r3, r3, r2
10015520:	085b      	lsrs	r3, r3, #1
10015522:	000c      	movs	r4, r1
10015524:	e755      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015526:	2201      	movs	r2, #1
10015528:	e77b      	b.n	10015422 <__aeabi_fadd+0x7e>
1001552a:	2c00      	cmp	r4, #0
1001552c:	d11b      	bne.n	10015566 <__aeabi_fadd+0x1c2>
1001552e:	2b00      	cmp	r3, #0
10015530:	d05b      	beq.n	100155ea <__aeabi_fadd+0x246>
10015532:	43c0      	mvns	r0, r0
10015534:	2800      	cmp	r0, #0
10015536:	d00c      	beq.n	10015552 <__aeabi_fadd+0x1ae>
10015538:	2eff      	cmp	r6, #255	; 0xff
1001553a:	d07e      	beq.n	1001563a <__aeabi_fadd+0x296>
1001553c:	281b      	cmp	r0, #27
1001553e:	dd00      	ble.n	10015542 <__aeabi_fadd+0x19e>
10015540:	e092      	b.n	10015668 <__aeabi_fadd+0x2c4>
10015542:	001d      	movs	r5, r3
10015544:	2420      	movs	r4, #32
10015546:	40c5      	lsrs	r5, r0
10015548:	1a20      	subs	r0, r4, r0
1001554a:	4083      	lsls	r3, r0
1001554c:	1e58      	subs	r0, r3, #1
1001554e:	4183      	sbcs	r3, r0
10015550:	432b      	orrs	r3, r5
10015552:	1ad3      	subs	r3, r2, r3
10015554:	0034      	movs	r4, r6
10015556:	000d      	movs	r5, r1
10015558:	e764      	b.n	10015424 <__aeabi_fadd+0x80>
1001555a:	2e00      	cmp	r6, #0
1001555c:	d000      	beq.n	10015560 <__aeabi_fadd+0x1bc>
1001555e:	e765      	b.n	1001542c <__aeabi_fadd+0x88>
10015560:	2000      	movs	r0, #0
10015562:	2400      	movs	r4, #0
10015564:	e7ab      	b.n	100154be <__aeabi_fadd+0x11a>
10015566:	2eff      	cmp	r6, #255	; 0xff
10015568:	d067      	beq.n	1001563a <__aeabi_fadd+0x296>
1001556a:	2480      	movs	r4, #128	; 0x80
1001556c:	04e4      	lsls	r4, r4, #19
1001556e:	4240      	negs	r0, r0
10015570:	4323      	orrs	r3, r4
10015572:	e7e3      	b.n	1001553c <__aeabi_fadd+0x198>
10015574:	24ff      	movs	r4, #255	; 0xff
10015576:	2300      	movs	r3, #0
10015578:	e73c      	b.n	100153f4 <__aeabi_fadd+0x50>
1001557a:	2c00      	cmp	r4, #0
1001557c:	d161      	bne.n	10015642 <__aeabi_fadd+0x29e>
1001557e:	2b00      	cmp	r3, #0
10015580:	d07e      	beq.n	10015680 <__aeabi_fadd+0x2dc>
10015582:	2a00      	cmp	r2, #0
10015584:	d100      	bne.n	10015588 <__aeabi_fadd+0x1e4>
10015586:	e724      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015588:	189b      	adds	r3, r3, r2
1001558a:	015a      	lsls	r2, r3, #5
1001558c:	d400      	bmi.n	10015590 <__aeabi_fadd+0x1ec>
1001558e:	e760      	b.n	10015452 <__aeabi_fadd+0xae>
10015590:	4a3e      	ldr	r2, [pc, #248]	; (1001568c <__aeabi_fadd+0x2e8>)
10015592:	000c      	movs	r4, r1
10015594:	4013      	ands	r3, r2
10015596:	e71c      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015598:	2c00      	cmp	r4, #0
1001559a:	d11e      	bne.n	100155da <__aeabi_fadd+0x236>
1001559c:	2b00      	cmp	r3, #0
1001559e:	d12f      	bne.n	10015600 <__aeabi_fadd+0x25c>
100155a0:	2a00      	cmp	r2, #0
100155a2:	d066      	beq.n	10015672 <__aeabi_fadd+0x2ce>
100155a4:	0013      	movs	r3, r2
100155a6:	000d      	movs	r5, r1
100155a8:	e713      	b.n	100153d2 <__aeabi_fadd+0x2e>
100155aa:	2201      	movs	r2, #1
100155ac:	e777      	b.n	1001549e <__aeabi_fadd+0xfa>
100155ae:	2c00      	cmp	r4, #0
100155b0:	d11f      	bne.n	100155f2 <__aeabi_fadd+0x24e>
100155b2:	2b00      	cmp	r3, #0
100155b4:	d05a      	beq.n	1001566c <__aeabi_fadd+0x2c8>
100155b6:	43c9      	mvns	r1, r1
100155b8:	2900      	cmp	r1, #0
100155ba:	d00b      	beq.n	100155d4 <__aeabi_fadd+0x230>
100155bc:	2eff      	cmp	r6, #255	; 0xff
100155be:	d050      	beq.n	10015662 <__aeabi_fadd+0x2be>
100155c0:	291b      	cmp	r1, #27
100155c2:	dc5f      	bgt.n	10015684 <__aeabi_fadd+0x2e0>
100155c4:	001f      	movs	r7, r3
100155c6:	2420      	movs	r4, #32
100155c8:	40cf      	lsrs	r7, r1
100155ca:	1a61      	subs	r1, r4, r1
100155cc:	408b      	lsls	r3, r1
100155ce:	1e59      	subs	r1, r3, #1
100155d0:	418b      	sbcs	r3, r1
100155d2:	433b      	orrs	r3, r7
100155d4:	189b      	adds	r3, r3, r2
100155d6:	0034      	movs	r4, r6
100155d8:	e762      	b.n	100154a0 <__aeabi_fadd+0xfc>
100155da:	2b00      	cmp	r3, #0
100155dc:	d11c      	bne.n	10015618 <__aeabi_fadd+0x274>
100155de:	2a00      	cmp	r2, #0
100155e0:	d04a      	beq.n	10015678 <__aeabi_fadd+0x2d4>
100155e2:	0013      	movs	r3, r2
100155e4:	000d      	movs	r5, r1
100155e6:	24ff      	movs	r4, #255	; 0xff
100155e8:	e6f3      	b.n	100153d2 <__aeabi_fadd+0x2e>
100155ea:	0013      	movs	r3, r2
100155ec:	0034      	movs	r4, r6
100155ee:	000d      	movs	r5, r1
100155f0:	e6ef      	b.n	100153d2 <__aeabi_fadd+0x2e>
100155f2:	2eff      	cmp	r6, #255	; 0xff
100155f4:	d035      	beq.n	10015662 <__aeabi_fadd+0x2be>
100155f6:	2480      	movs	r4, #128	; 0x80
100155f8:	04e4      	lsls	r4, r4, #19
100155fa:	4249      	negs	r1, r1
100155fc:	4323      	orrs	r3, r4
100155fe:	e7df      	b.n	100155c0 <__aeabi_fadd+0x21c>
10015600:	2a00      	cmp	r2, #0
10015602:	d100      	bne.n	10015606 <__aeabi_fadd+0x262>
10015604:	e6e5      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015606:	2780      	movs	r7, #128	; 0x80
10015608:	1a98      	subs	r0, r3, r2
1001560a:	04ff      	lsls	r7, r7, #19
1001560c:	4007      	ands	r7, r0
1001560e:	d100      	bne.n	10015612 <__aeabi_fadd+0x26e>
10015610:	e752      	b.n	100154b8 <__aeabi_fadd+0x114>
10015612:	1ad3      	subs	r3, r2, r3
10015614:	000d      	movs	r5, r1
10015616:	e6dc      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015618:	24ff      	movs	r4, #255	; 0xff
1001561a:	2a00      	cmp	r2, #0
1001561c:	d100      	bne.n	10015620 <__aeabi_fadd+0x27c>
1001561e:	e6d8      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015620:	2080      	movs	r0, #128	; 0x80
10015622:	08db      	lsrs	r3, r3, #3
10015624:	03c0      	lsls	r0, r0, #15
10015626:	4203      	tst	r3, r0
10015628:	d004      	beq.n	10015634 <__aeabi_fadd+0x290>
1001562a:	08d2      	lsrs	r2, r2, #3
1001562c:	4202      	tst	r2, r0
1001562e:	d101      	bne.n	10015634 <__aeabi_fadd+0x290>
10015630:	0013      	movs	r3, r2
10015632:	000d      	movs	r5, r1
10015634:	00db      	lsls	r3, r3, #3
10015636:	24ff      	movs	r4, #255	; 0xff
10015638:	e6cb      	b.n	100153d2 <__aeabi_fadd+0x2e>
1001563a:	0013      	movs	r3, r2
1001563c:	24ff      	movs	r4, #255	; 0xff
1001563e:	000d      	movs	r5, r1
10015640:	e6c7      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015642:	2b00      	cmp	r3, #0
10015644:	d00d      	beq.n	10015662 <__aeabi_fadd+0x2be>
10015646:	24ff      	movs	r4, #255	; 0xff
10015648:	2a00      	cmp	r2, #0
1001564a:	d100      	bne.n	1001564e <__aeabi_fadd+0x2aa>
1001564c:	e6c1      	b.n	100153d2 <__aeabi_fadd+0x2e>
1001564e:	2180      	movs	r1, #128	; 0x80
10015650:	08db      	lsrs	r3, r3, #3
10015652:	03c9      	lsls	r1, r1, #15
10015654:	420b      	tst	r3, r1
10015656:	d0ed      	beq.n	10015634 <__aeabi_fadd+0x290>
10015658:	08d2      	lsrs	r2, r2, #3
1001565a:	420a      	tst	r2, r1
1001565c:	d1ea      	bne.n	10015634 <__aeabi_fadd+0x290>
1001565e:	0013      	movs	r3, r2
10015660:	e7e8      	b.n	10015634 <__aeabi_fadd+0x290>
10015662:	0013      	movs	r3, r2
10015664:	24ff      	movs	r4, #255	; 0xff
10015666:	e6b4      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015668:	2301      	movs	r3, #1
1001566a:	e772      	b.n	10015552 <__aeabi_fadd+0x1ae>
1001566c:	0013      	movs	r3, r2
1001566e:	0034      	movs	r4, r6
10015670:	e6af      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015672:	2700      	movs	r7, #0
10015674:	2000      	movs	r0, #0
10015676:	e722      	b.n	100154be <__aeabi_fadd+0x11a>
10015678:	2780      	movs	r7, #128	; 0x80
1001567a:	2000      	movs	r0, #0
1001567c:	03ff      	lsls	r7, r7, #15
1001567e:	e6f1      	b.n	10015464 <__aeabi_fadd+0xc0>
10015680:	0013      	movs	r3, r2
10015682:	e6a6      	b.n	100153d2 <__aeabi_fadd+0x2e>
10015684:	2301      	movs	r3, #1
10015686:	e7a5      	b.n	100155d4 <__aeabi_fadd+0x230>
10015688:	7dffffff 	.word	0x7dffffff
1001568c:	fbffffff 	.word	0xfbffffff

10015690 <__aeabi_fdiv>:
10015690:	b5f0      	push	{r4, r5, r6, r7, lr}
10015692:	4656      	mov	r6, sl
10015694:	4644      	mov	r4, r8
10015696:	465f      	mov	r7, fp
10015698:	464d      	mov	r5, r9
1001569a:	b4f0      	push	{r4, r5, r6, r7}
1001569c:	0244      	lsls	r4, r0, #9
1001569e:	0046      	lsls	r6, r0, #1
100156a0:	0fc7      	lsrs	r7, r0, #31
100156a2:	b083      	sub	sp, #12
100156a4:	4688      	mov	r8, r1
100156a6:	0a65      	lsrs	r5, r4, #9
100156a8:	0e36      	lsrs	r6, r6, #24
100156aa:	46ba      	mov	sl, r7
100156ac:	d03d      	beq.n	1001572a <__aeabi_fdiv+0x9a>
100156ae:	2eff      	cmp	r6, #255	; 0xff
100156b0:	d022      	beq.n	100156f8 <__aeabi_fdiv+0x68>
100156b2:	2300      	movs	r3, #0
100156b4:	00ec      	lsls	r4, r5, #3
100156b6:	2580      	movs	r5, #128	; 0x80
100156b8:	4699      	mov	r9, r3
100156ba:	469b      	mov	fp, r3
100156bc:	04ed      	lsls	r5, r5, #19
100156be:	4325      	orrs	r5, r4
100156c0:	3e7f      	subs	r6, #127	; 0x7f
100156c2:	4643      	mov	r3, r8
100156c4:	025c      	lsls	r4, r3, #9
100156c6:	0058      	lsls	r0, r3, #1
100156c8:	0fdb      	lsrs	r3, r3, #31
100156ca:	0a64      	lsrs	r4, r4, #9
100156cc:	0e00      	lsrs	r0, r0, #24
100156ce:	4698      	mov	r8, r3
100156d0:	d036      	beq.n	10015740 <__aeabi_fdiv+0xb0>
100156d2:	28ff      	cmp	r0, #255	; 0xff
100156d4:	d030      	beq.n	10015738 <__aeabi_fdiv+0xa8>
100156d6:	2380      	movs	r3, #128	; 0x80
100156d8:	2100      	movs	r1, #0
100156da:	00e4      	lsls	r4, r4, #3
100156dc:	04db      	lsls	r3, r3, #19
100156de:	431c      	orrs	r4, r3
100156e0:	387f      	subs	r0, #127	; 0x7f
100156e2:	1a30      	subs	r0, r6, r0
100156e4:	9001      	str	r0, [sp, #4]
100156e6:	4648      	mov	r0, r9
100156e8:	4642      	mov	r2, r8
100156ea:	4308      	orrs	r0, r1
100156ec:	4e72      	ldr	r6, [pc, #456]	; (100158b8 <__aeabi_fdiv+0x228>)
100156ee:	0080      	lsls	r0, r0, #2
100156f0:	5830      	ldr	r0, [r6, r0]
100156f2:	407a      	eors	r2, r7
100156f4:	0013      	movs	r3, r2
100156f6:	4687      	mov	pc, r0
100156f8:	2d00      	cmp	r5, #0
100156fa:	d144      	bne.n	10015786 <__aeabi_fdiv+0xf6>
100156fc:	2308      	movs	r3, #8
100156fe:	4699      	mov	r9, r3
10015700:	3b06      	subs	r3, #6
10015702:	469b      	mov	fp, r3
10015704:	e7dd      	b.n	100156c2 <__aeabi_fdiv+0x32>
10015706:	2201      	movs	r2, #1
10015708:	20ff      	movs	r0, #255	; 0xff
1001570a:	2400      	movs	r4, #0
1001570c:	401a      	ands	r2, r3
1001570e:	0264      	lsls	r4, r4, #9
10015710:	05c3      	lsls	r3, r0, #23
10015712:	0a64      	lsrs	r4, r4, #9
10015714:	07d2      	lsls	r2, r2, #31
10015716:	431c      	orrs	r4, r3
10015718:	4314      	orrs	r4, r2
1001571a:	0020      	movs	r0, r4
1001571c:	b003      	add	sp, #12
1001571e:	bc3c      	pop	{r2, r3, r4, r5}
10015720:	4690      	mov	r8, r2
10015722:	4699      	mov	r9, r3
10015724:	46a2      	mov	sl, r4
10015726:	46ab      	mov	fp, r5
10015728:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001572a:	2d00      	cmp	r5, #0
1001572c:	d120      	bne.n	10015770 <__aeabi_fdiv+0xe0>
1001572e:	2304      	movs	r3, #4
10015730:	4699      	mov	r9, r3
10015732:	3b03      	subs	r3, #3
10015734:	469b      	mov	fp, r3
10015736:	e7c4      	b.n	100156c2 <__aeabi_fdiv+0x32>
10015738:	2c00      	cmp	r4, #0
1001573a:	d117      	bne.n	1001576c <__aeabi_fdiv+0xdc>
1001573c:	2102      	movs	r1, #2
1001573e:	e002      	b.n	10015746 <__aeabi_fdiv+0xb6>
10015740:	2c00      	cmp	r4, #0
10015742:	d10a      	bne.n	1001575a <__aeabi_fdiv+0xca>
10015744:	2101      	movs	r1, #1
10015746:	1a32      	subs	r2, r6, r0
10015748:	9201      	str	r2, [sp, #4]
1001574a:	464a      	mov	r2, r9
1001574c:	4643      	mov	r3, r8
1001574e:	430a      	orrs	r2, r1
10015750:	485a      	ldr	r0, [pc, #360]	; (100158bc <__aeabi_fdiv+0x22c>)
10015752:	0092      	lsls	r2, r2, #2
10015754:	5882      	ldr	r2, [r0, r2]
10015756:	407b      	eors	r3, r7
10015758:	4697      	mov	pc, r2
1001575a:	0020      	movs	r0, r4
1001575c:	f002 fb6a 	bl	10017e34 <__clzsi2>
10015760:	1f43      	subs	r3, r0, #5
10015762:	3076      	adds	r0, #118	; 0x76
10015764:	409c      	lsls	r4, r3
10015766:	4240      	negs	r0, r0
10015768:	2100      	movs	r1, #0
1001576a:	e7ba      	b.n	100156e2 <__aeabi_fdiv+0x52>
1001576c:	2103      	movs	r1, #3
1001576e:	e7b8      	b.n	100156e2 <__aeabi_fdiv+0x52>
10015770:	0028      	movs	r0, r5
10015772:	f002 fb5f 	bl	10017e34 <__clzsi2>
10015776:	1f43      	subs	r3, r0, #5
10015778:	409d      	lsls	r5, r3
1001577a:	2300      	movs	r3, #0
1001577c:	3076      	adds	r0, #118	; 0x76
1001577e:	4246      	negs	r6, r0
10015780:	4699      	mov	r9, r3
10015782:	469b      	mov	fp, r3
10015784:	e79d      	b.n	100156c2 <__aeabi_fdiv+0x32>
10015786:	230c      	movs	r3, #12
10015788:	4699      	mov	r9, r3
1001578a:	3b09      	subs	r3, #9
1001578c:	469b      	mov	fp, r3
1001578e:	e798      	b.n	100156c2 <__aeabi_fdiv+0x32>
10015790:	2480      	movs	r4, #128	; 0x80
10015792:	2200      	movs	r2, #0
10015794:	03e4      	lsls	r4, r4, #15
10015796:	20ff      	movs	r0, #255	; 0xff
10015798:	e7b9      	b.n	1001570e <__aeabi_fdiv+0x7e>
1001579a:	2400      	movs	r4, #0
1001579c:	46c2      	mov	sl, r8
1001579e:	468b      	mov	fp, r1
100157a0:	465a      	mov	r2, fp
100157a2:	4653      	mov	r3, sl
100157a4:	2a02      	cmp	r2, #2
100157a6:	d0ae      	beq.n	10015706 <__aeabi_fdiv+0x76>
100157a8:	2a03      	cmp	r2, #3
100157aa:	d07d      	beq.n	100158a8 <__aeabi_fdiv+0x218>
100157ac:	2a01      	cmp	r2, #1
100157ae:	d131      	bne.n	10015814 <__aeabi_fdiv+0x184>
100157b0:	2201      	movs	r2, #1
100157b2:	2000      	movs	r0, #0
100157b4:	401a      	ands	r2, r3
100157b6:	2400      	movs	r4, #0
100157b8:	e7a9      	b.n	1001570e <__aeabi_fdiv+0x7e>
100157ba:	2201      	movs	r2, #1
100157bc:	1a10      	subs	r0, r2, r0
100157be:	281b      	cmp	r0, #27
100157c0:	dd56      	ble.n	10015870 <__aeabi_fdiv+0x1e0>
100157c2:	401a      	ands	r2, r3
100157c4:	2000      	movs	r0, #0
100157c6:	2400      	movs	r4, #0
100157c8:	e7a1      	b.n	1001570e <__aeabi_fdiv+0x7e>
100157ca:	2380      	movs	r3, #128	; 0x80
100157cc:	03db      	lsls	r3, r3, #15
100157ce:	421d      	tst	r5, r3
100157d0:	d14b      	bne.n	1001586a <__aeabi_fdiv+0x1da>
100157d2:	2380      	movs	r3, #128	; 0x80
100157d4:	03db      	lsls	r3, r3, #15
100157d6:	432b      	orrs	r3, r5
100157d8:	025c      	lsls	r4, r3, #9
100157da:	0a64      	lsrs	r4, r4, #9
100157dc:	003a      	movs	r2, r7
100157de:	20ff      	movs	r0, #255	; 0xff
100157e0:	e795      	b.n	1001570e <__aeabi_fdiv+0x7e>
100157e2:	016d      	lsls	r5, r5, #5
100157e4:	0160      	lsls	r0, r4, #5
100157e6:	4285      	cmp	r5, r0
100157e8:	d230      	bcs.n	1001584c <__aeabi_fdiv+0x1bc>
100157ea:	9a01      	ldr	r2, [sp, #4]
100157ec:	2400      	movs	r4, #0
100157ee:	3a01      	subs	r2, #1
100157f0:	9201      	str	r2, [sp, #4]
100157f2:	221b      	movs	r2, #27
100157f4:	2701      	movs	r7, #1
100157f6:	0029      	movs	r1, r5
100157f8:	0064      	lsls	r4, r4, #1
100157fa:	006d      	lsls	r5, r5, #1
100157fc:	2900      	cmp	r1, #0
100157fe:	db01      	blt.n	10015804 <__aeabi_fdiv+0x174>
10015800:	42a8      	cmp	r0, r5
10015802:	d801      	bhi.n	10015808 <__aeabi_fdiv+0x178>
10015804:	1a2d      	subs	r5, r5, r0
10015806:	433c      	orrs	r4, r7
10015808:	3a01      	subs	r2, #1
1001580a:	2a00      	cmp	r2, #0
1001580c:	d1f3      	bne.n	100157f6 <__aeabi_fdiv+0x166>
1001580e:	1e6a      	subs	r2, r5, #1
10015810:	4195      	sbcs	r5, r2
10015812:	432c      	orrs	r4, r5
10015814:	9801      	ldr	r0, [sp, #4]
10015816:	307f      	adds	r0, #127	; 0x7f
10015818:	2800      	cmp	r0, #0
1001581a:	ddce      	ble.n	100157ba <__aeabi_fdiv+0x12a>
1001581c:	0762      	lsls	r2, r4, #29
1001581e:	d004      	beq.n	1001582a <__aeabi_fdiv+0x19a>
10015820:	220f      	movs	r2, #15
10015822:	4022      	ands	r2, r4
10015824:	2a04      	cmp	r2, #4
10015826:	d000      	beq.n	1001582a <__aeabi_fdiv+0x19a>
10015828:	3404      	adds	r4, #4
1001582a:	0122      	lsls	r2, r4, #4
1001582c:	d503      	bpl.n	10015836 <__aeabi_fdiv+0x1a6>
1001582e:	4a24      	ldr	r2, [pc, #144]	; (100158c0 <__aeabi_fdiv+0x230>)
10015830:	9801      	ldr	r0, [sp, #4]
10015832:	4014      	ands	r4, r2
10015834:	3080      	adds	r0, #128	; 0x80
10015836:	28fe      	cmp	r0, #254	; 0xfe
10015838:	dd00      	ble.n	1001583c <__aeabi_fdiv+0x1ac>
1001583a:	e764      	b.n	10015706 <__aeabi_fdiv+0x76>
1001583c:	2201      	movs	r2, #1
1001583e:	01a4      	lsls	r4, r4, #6
10015840:	0a64      	lsrs	r4, r4, #9
10015842:	b2c0      	uxtb	r0, r0
10015844:	401a      	ands	r2, r3
10015846:	e762      	b.n	1001570e <__aeabi_fdiv+0x7e>
10015848:	002c      	movs	r4, r5
1001584a:	e7a9      	b.n	100157a0 <__aeabi_fdiv+0x110>
1001584c:	1a2d      	subs	r5, r5, r0
1001584e:	221a      	movs	r2, #26
10015850:	2401      	movs	r4, #1
10015852:	e7cf      	b.n	100157f4 <__aeabi_fdiv+0x164>
10015854:	026b      	lsls	r3, r5, #9
10015856:	d5bc      	bpl.n	100157d2 <__aeabi_fdiv+0x142>
10015858:	2400      	movs	r4, #0
1001585a:	2380      	movs	r3, #128	; 0x80
1001585c:	03db      	lsls	r3, r3, #15
1001585e:	431c      	orrs	r4, r3
10015860:	0264      	lsls	r4, r4, #9
10015862:	0a64      	lsrs	r4, r4, #9
10015864:	4642      	mov	r2, r8
10015866:	20ff      	movs	r0, #255	; 0xff
10015868:	e751      	b.n	1001570e <__aeabi_fdiv+0x7e>
1001586a:	421c      	tst	r4, r3
1001586c:	d1b3      	bne.n	100157d6 <__aeabi_fdiv+0x146>
1001586e:	e7f4      	b.n	1001585a <__aeabi_fdiv+0x1ca>
10015870:	0021      	movs	r1, r4
10015872:	2220      	movs	r2, #32
10015874:	40c1      	lsrs	r1, r0
10015876:	1a10      	subs	r0, r2, r0
10015878:	4084      	lsls	r4, r0
1001587a:	1e62      	subs	r2, r4, #1
1001587c:	4194      	sbcs	r4, r2
1001587e:	430c      	orrs	r4, r1
10015880:	0762      	lsls	r2, r4, #29
10015882:	d004      	beq.n	1001588e <__aeabi_fdiv+0x1fe>
10015884:	220f      	movs	r2, #15
10015886:	4022      	ands	r2, r4
10015888:	2a04      	cmp	r2, #4
1001588a:	d000      	beq.n	1001588e <__aeabi_fdiv+0x1fe>
1001588c:	3404      	adds	r4, #4
1001588e:	0162      	lsls	r2, r4, #5
10015890:	d504      	bpl.n	1001589c <__aeabi_fdiv+0x20c>
10015892:	2201      	movs	r2, #1
10015894:	2001      	movs	r0, #1
10015896:	401a      	ands	r2, r3
10015898:	2400      	movs	r4, #0
1001589a:	e738      	b.n	1001570e <__aeabi_fdiv+0x7e>
1001589c:	2201      	movs	r2, #1
1001589e:	01a4      	lsls	r4, r4, #6
100158a0:	0a64      	lsrs	r4, r4, #9
100158a2:	401a      	ands	r2, r3
100158a4:	2000      	movs	r0, #0
100158a6:	e732      	b.n	1001570e <__aeabi_fdiv+0x7e>
100158a8:	2380      	movs	r3, #128	; 0x80
100158aa:	03db      	lsls	r3, r3, #15
100158ac:	431c      	orrs	r4, r3
100158ae:	0264      	lsls	r4, r4, #9
100158b0:	0a64      	lsrs	r4, r4, #9
100158b2:	4652      	mov	r2, sl
100158b4:	20ff      	movs	r0, #255	; 0xff
100158b6:	e72a      	b.n	1001570e <__aeabi_fdiv+0x7e>
100158b8:	1001b1a4 	.word	0x1001b1a4
100158bc:	1001b1e4 	.word	0x1001b1e4
100158c0:	f7ffffff 	.word	0xf7ffffff

100158c4 <__eqsf2>:
100158c4:	0243      	lsls	r3, r0, #9
100158c6:	b570      	push	{r4, r5, r6, lr}
100158c8:	0042      	lsls	r2, r0, #1
100158ca:	004c      	lsls	r4, r1, #1
100158cc:	0a5d      	lsrs	r5, r3, #9
100158ce:	0fc3      	lsrs	r3, r0, #31
100158d0:	0248      	lsls	r0, r1, #9
100158d2:	0e12      	lsrs	r2, r2, #24
100158d4:	0a46      	lsrs	r6, r0, #9
100158d6:	0e24      	lsrs	r4, r4, #24
100158d8:	0fc9      	lsrs	r1, r1, #31
100158da:	2aff      	cmp	r2, #255	; 0xff
100158dc:	d00f      	beq.n	100158fe <__eqsf2+0x3a>
100158de:	2cff      	cmp	r4, #255	; 0xff
100158e0:	d011      	beq.n	10015906 <__eqsf2+0x42>
100158e2:	2001      	movs	r0, #1
100158e4:	42a2      	cmp	r2, r4
100158e6:	d000      	beq.n	100158ea <__eqsf2+0x26>
100158e8:	bd70      	pop	{r4, r5, r6, pc}
100158ea:	42b5      	cmp	r5, r6
100158ec:	d1fc      	bne.n	100158e8 <__eqsf2+0x24>
100158ee:	428b      	cmp	r3, r1
100158f0:	d00d      	beq.n	1001590e <__eqsf2+0x4a>
100158f2:	2a00      	cmp	r2, #0
100158f4:	d1f8      	bne.n	100158e8 <__eqsf2+0x24>
100158f6:	0028      	movs	r0, r5
100158f8:	1e43      	subs	r3, r0, #1
100158fa:	4198      	sbcs	r0, r3
100158fc:	e7f4      	b.n	100158e8 <__eqsf2+0x24>
100158fe:	2001      	movs	r0, #1
10015900:	2d00      	cmp	r5, #0
10015902:	d1f1      	bne.n	100158e8 <__eqsf2+0x24>
10015904:	e7eb      	b.n	100158de <__eqsf2+0x1a>
10015906:	2001      	movs	r0, #1
10015908:	2e00      	cmp	r6, #0
1001590a:	d1ed      	bne.n	100158e8 <__eqsf2+0x24>
1001590c:	e7e9      	b.n	100158e2 <__eqsf2+0x1e>
1001590e:	2000      	movs	r0, #0
10015910:	e7ea      	b.n	100158e8 <__eqsf2+0x24>
10015912:	46c0      	nop			; (mov r8, r8)

10015914 <__gesf2>:
10015914:	0243      	lsls	r3, r0, #9
10015916:	b5f0      	push	{r4, r5, r6, r7, lr}
10015918:	0042      	lsls	r2, r0, #1
1001591a:	0a5d      	lsrs	r5, r3, #9
1001591c:	0fc3      	lsrs	r3, r0, #31
1001591e:	0248      	lsls	r0, r1, #9
10015920:	0a44      	lsrs	r4, r0, #9
10015922:	0048      	lsls	r0, r1, #1
10015924:	0e12      	lsrs	r2, r2, #24
10015926:	0e00      	lsrs	r0, r0, #24
10015928:	0fc9      	lsrs	r1, r1, #31
1001592a:	2aff      	cmp	r2, #255	; 0xff
1001592c:	d01f      	beq.n	1001596e <__gesf2+0x5a>
1001592e:	28ff      	cmp	r0, #255	; 0xff
10015930:	d022      	beq.n	10015978 <__gesf2+0x64>
10015932:	2a00      	cmp	r2, #0
10015934:	d109      	bne.n	1001594a <__gesf2+0x36>
10015936:	426e      	negs	r6, r5
10015938:	416e      	adcs	r6, r5
1001593a:	2800      	cmp	r0, #0
1001593c:	d10f      	bne.n	1001595e <__gesf2+0x4a>
1001593e:	2c00      	cmp	r4, #0
10015940:	d10d      	bne.n	1001595e <__gesf2+0x4a>
10015942:	2000      	movs	r0, #0
10015944:	2d00      	cmp	r5, #0
10015946:	d009      	beq.n	1001595c <__gesf2+0x48>
10015948:	e005      	b.n	10015956 <__gesf2+0x42>
1001594a:	2800      	cmp	r0, #0
1001594c:	d101      	bne.n	10015952 <__gesf2+0x3e>
1001594e:	2c00      	cmp	r4, #0
10015950:	d001      	beq.n	10015956 <__gesf2+0x42>
10015952:	428b      	cmp	r3, r1
10015954:	d013      	beq.n	1001597e <__gesf2+0x6a>
10015956:	4258      	negs	r0, r3
10015958:	2301      	movs	r3, #1
1001595a:	4318      	orrs	r0, r3
1001595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001595e:	2e00      	cmp	r6, #0
10015960:	d0f7      	beq.n	10015952 <__gesf2+0x3e>
10015962:	4248      	negs	r0, r1
10015964:	4141      	adcs	r1, r0
10015966:	2001      	movs	r0, #1
10015968:	4249      	negs	r1, r1
1001596a:	4308      	orrs	r0, r1
1001596c:	e7f6      	b.n	1001595c <__gesf2+0x48>
1001596e:	2d00      	cmp	r5, #0
10015970:	d0dd      	beq.n	1001592e <__gesf2+0x1a>
10015972:	2002      	movs	r0, #2
10015974:	4240      	negs	r0, r0
10015976:	e7f1      	b.n	1001595c <__gesf2+0x48>
10015978:	2c00      	cmp	r4, #0
1001597a:	d0da      	beq.n	10015932 <__gesf2+0x1e>
1001597c:	e7f9      	b.n	10015972 <__gesf2+0x5e>
1001597e:	4282      	cmp	r2, r0
10015980:	dce9      	bgt.n	10015956 <__gesf2+0x42>
10015982:	db04      	blt.n	1001598e <__gesf2+0x7a>
10015984:	42a5      	cmp	r5, r4
10015986:	d8e6      	bhi.n	10015956 <__gesf2+0x42>
10015988:	2000      	movs	r0, #0
1001598a:	42a5      	cmp	r5, r4
1001598c:	d2e6      	bcs.n	1001595c <__gesf2+0x48>
1001598e:	4258      	negs	r0, r3
10015990:	4143      	adcs	r3, r0
10015992:	2001      	movs	r0, #1
10015994:	425b      	negs	r3, r3
10015996:	4318      	orrs	r0, r3
10015998:	e7e0      	b.n	1001595c <__gesf2+0x48>
1001599a:	46c0      	nop			; (mov r8, r8)

1001599c <__lesf2>:
1001599c:	0243      	lsls	r3, r0, #9
1001599e:	b5f0      	push	{r4, r5, r6, r7, lr}
100159a0:	0042      	lsls	r2, r0, #1
100159a2:	004c      	lsls	r4, r1, #1
100159a4:	0a5e      	lsrs	r6, r3, #9
100159a6:	0fc3      	lsrs	r3, r0, #31
100159a8:	0248      	lsls	r0, r1, #9
100159aa:	0e12      	lsrs	r2, r2, #24
100159ac:	0a45      	lsrs	r5, r0, #9
100159ae:	0e24      	lsrs	r4, r4, #24
100159b0:	0fc9      	lsrs	r1, r1, #31
100159b2:	2aff      	cmp	r2, #255	; 0xff
100159b4:	d017      	beq.n	100159e6 <__lesf2+0x4a>
100159b6:	2cff      	cmp	r4, #255	; 0xff
100159b8:	d019      	beq.n	100159ee <__lesf2+0x52>
100159ba:	2a00      	cmp	r2, #0
100159bc:	d10b      	bne.n	100159d6 <__lesf2+0x3a>
100159be:	4270      	negs	r0, r6
100159c0:	4170      	adcs	r0, r6
100159c2:	2c00      	cmp	r4, #0
100159c4:	d017      	beq.n	100159f6 <__lesf2+0x5a>
100159c6:	2800      	cmp	r0, #0
100159c8:	d007      	beq.n	100159da <__lesf2+0x3e>
100159ca:	4248      	negs	r0, r1
100159cc:	4141      	adcs	r1, r0
100159ce:	2001      	movs	r0, #1
100159d0:	4249      	negs	r1, r1
100159d2:	4308      	orrs	r0, r1
100159d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100159d6:	2c00      	cmp	r4, #0
100159d8:	d013      	beq.n	10015a02 <__lesf2+0x66>
100159da:	428b      	cmp	r3, r1
100159dc:	d014      	beq.n	10015a08 <__lesf2+0x6c>
100159de:	4258      	negs	r0, r3
100159e0:	2301      	movs	r3, #1
100159e2:	4318      	orrs	r0, r3
100159e4:	e7f6      	b.n	100159d4 <__lesf2+0x38>
100159e6:	2002      	movs	r0, #2
100159e8:	2e00      	cmp	r6, #0
100159ea:	d1f3      	bne.n	100159d4 <__lesf2+0x38>
100159ec:	e7e3      	b.n	100159b6 <__lesf2+0x1a>
100159ee:	2002      	movs	r0, #2
100159f0:	2d00      	cmp	r5, #0
100159f2:	d1ef      	bne.n	100159d4 <__lesf2+0x38>
100159f4:	e7e1      	b.n	100159ba <__lesf2+0x1e>
100159f6:	2d00      	cmp	r5, #0
100159f8:	d1e5      	bne.n	100159c6 <__lesf2+0x2a>
100159fa:	2000      	movs	r0, #0
100159fc:	2e00      	cmp	r6, #0
100159fe:	d0e9      	beq.n	100159d4 <__lesf2+0x38>
10015a00:	e7ed      	b.n	100159de <__lesf2+0x42>
10015a02:	2d00      	cmp	r5, #0
10015a04:	d1e9      	bne.n	100159da <__lesf2+0x3e>
10015a06:	e7ea      	b.n	100159de <__lesf2+0x42>
10015a08:	42a2      	cmp	r2, r4
10015a0a:	dce8      	bgt.n	100159de <__lesf2+0x42>
10015a0c:	db04      	blt.n	10015a18 <__lesf2+0x7c>
10015a0e:	42ae      	cmp	r6, r5
10015a10:	d8e5      	bhi.n	100159de <__lesf2+0x42>
10015a12:	2000      	movs	r0, #0
10015a14:	42ae      	cmp	r6, r5
10015a16:	d2dd      	bcs.n	100159d4 <__lesf2+0x38>
10015a18:	4258      	negs	r0, r3
10015a1a:	4143      	adcs	r3, r0
10015a1c:	2001      	movs	r0, #1
10015a1e:	425b      	negs	r3, r3
10015a20:	4318      	orrs	r0, r3
10015a22:	e7d7      	b.n	100159d4 <__lesf2+0x38>

10015a24 <__aeabi_fmul>:
10015a24:	b5f0      	push	{r4, r5, r6, r7, lr}
10015a26:	4657      	mov	r7, sl
10015a28:	464e      	mov	r6, r9
10015a2a:	4645      	mov	r5, r8
10015a2c:	0043      	lsls	r3, r0, #1
10015a2e:	b4e0      	push	{r5, r6, r7}
10015a30:	0246      	lsls	r6, r0, #9
10015a32:	4688      	mov	r8, r1
10015a34:	0a76      	lsrs	r6, r6, #9
10015a36:	0e1f      	lsrs	r7, r3, #24
10015a38:	0fc4      	lsrs	r4, r0, #31
10015a3a:	2f00      	cmp	r7, #0
10015a3c:	d047      	beq.n	10015ace <__aeabi_fmul+0xaa>
10015a3e:	2fff      	cmp	r7, #255	; 0xff
10015a40:	d025      	beq.n	10015a8e <__aeabi_fmul+0x6a>
10015a42:	2300      	movs	r3, #0
10015a44:	2580      	movs	r5, #128	; 0x80
10015a46:	469a      	mov	sl, r3
10015a48:	4699      	mov	r9, r3
10015a4a:	00f6      	lsls	r6, r6, #3
10015a4c:	04ed      	lsls	r5, r5, #19
10015a4e:	432e      	orrs	r6, r5
10015a50:	3f7f      	subs	r7, #127	; 0x7f
10015a52:	4643      	mov	r3, r8
10015a54:	4642      	mov	r2, r8
10015a56:	025d      	lsls	r5, r3, #9
10015a58:	0fd2      	lsrs	r2, r2, #31
10015a5a:	005b      	lsls	r3, r3, #1
10015a5c:	0a6d      	lsrs	r5, r5, #9
10015a5e:	0e1b      	lsrs	r3, r3, #24
10015a60:	4690      	mov	r8, r2
10015a62:	d040      	beq.n	10015ae6 <__aeabi_fmul+0xc2>
10015a64:	2bff      	cmp	r3, #255	; 0xff
10015a66:	d039      	beq.n	10015adc <__aeabi_fmul+0xb8>
10015a68:	2280      	movs	r2, #128	; 0x80
10015a6a:	2000      	movs	r0, #0
10015a6c:	00ed      	lsls	r5, r5, #3
10015a6e:	04d2      	lsls	r2, r2, #19
10015a70:	4315      	orrs	r5, r2
10015a72:	3b7f      	subs	r3, #127	; 0x7f
10015a74:	18fb      	adds	r3, r7, r3
10015a76:	4642      	mov	r2, r8
10015a78:	4657      	mov	r7, sl
10015a7a:	1c59      	adds	r1, r3, #1
10015a7c:	4062      	eors	r2, r4
10015a7e:	468c      	mov	ip, r1
10015a80:	4307      	orrs	r7, r0
10015a82:	2f0f      	cmp	r7, #15
10015a84:	d85c      	bhi.n	10015b40 <__aeabi_fmul+0x11c>
10015a86:	496f      	ldr	r1, [pc, #444]	; (10015c44 <__aeabi_fmul+0x220>)
10015a88:	00bf      	lsls	r7, r7, #2
10015a8a:	59c9      	ldr	r1, [r1, r7]
10015a8c:	468f      	mov	pc, r1
10015a8e:	2e00      	cmp	r6, #0
10015a90:	d145      	bne.n	10015b1e <__aeabi_fmul+0xfa>
10015a92:	2308      	movs	r3, #8
10015a94:	469a      	mov	sl, r3
10015a96:	3b06      	subs	r3, #6
10015a98:	4699      	mov	r9, r3
10015a9a:	e7da      	b.n	10015a52 <__aeabi_fmul+0x2e>
10015a9c:	4642      	mov	r2, r8
10015a9e:	2802      	cmp	r0, #2
10015aa0:	d02d      	beq.n	10015afe <__aeabi_fmul+0xda>
10015aa2:	2803      	cmp	r0, #3
10015aa4:	d100      	bne.n	10015aa8 <__aeabi_fmul+0x84>
10015aa6:	e0c3      	b.n	10015c30 <__aeabi_fmul+0x20c>
10015aa8:	2801      	cmp	r0, #1
10015aaa:	d000      	beq.n	10015aae <__aeabi_fmul+0x8a>
10015aac:	e0a2      	b.n	10015bf4 <__aeabi_fmul+0x1d0>
10015aae:	2500      	movs	r5, #0
10015ab0:	2600      	movs	r6, #0
10015ab2:	4002      	ands	r2, r0
10015ab4:	b2d4      	uxtb	r4, r2
10015ab6:	0276      	lsls	r6, r6, #9
10015ab8:	05ed      	lsls	r5, r5, #23
10015aba:	0a76      	lsrs	r6, r6, #9
10015abc:	432e      	orrs	r6, r5
10015abe:	07e4      	lsls	r4, r4, #31
10015ac0:	4326      	orrs	r6, r4
10015ac2:	0030      	movs	r0, r6
10015ac4:	bc1c      	pop	{r2, r3, r4}
10015ac6:	4690      	mov	r8, r2
10015ac8:	4699      	mov	r9, r3
10015aca:	46a2      	mov	sl, r4
10015acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015ace:	2e00      	cmp	r6, #0
10015ad0:	d11a      	bne.n	10015b08 <__aeabi_fmul+0xe4>
10015ad2:	2304      	movs	r3, #4
10015ad4:	469a      	mov	sl, r3
10015ad6:	3b03      	subs	r3, #3
10015ad8:	4699      	mov	r9, r3
10015ada:	e7ba      	b.n	10015a52 <__aeabi_fmul+0x2e>
10015adc:	002a      	movs	r2, r5
10015ade:	1e51      	subs	r1, r2, #1
10015ae0:	418a      	sbcs	r2, r1
10015ae2:	1c90      	adds	r0, r2, #2
10015ae4:	e7c6      	b.n	10015a74 <__aeabi_fmul+0x50>
10015ae6:	2001      	movs	r0, #1
10015ae8:	2d00      	cmp	r5, #0
10015aea:	d0c3      	beq.n	10015a74 <__aeabi_fmul+0x50>
10015aec:	0028      	movs	r0, r5
10015aee:	f002 f9a1 	bl	10017e34 <__clzsi2>
10015af2:	1f43      	subs	r3, r0, #5
10015af4:	3076      	adds	r0, #118	; 0x76
10015af6:	409d      	lsls	r5, r3
10015af8:	4243      	negs	r3, r0
10015afa:	2000      	movs	r0, #0
10015afc:	e7ba      	b.n	10015a74 <__aeabi_fmul+0x50>
10015afe:	2401      	movs	r4, #1
10015b00:	25ff      	movs	r5, #255	; 0xff
10015b02:	4014      	ands	r4, r2
10015b04:	2600      	movs	r6, #0
10015b06:	e7d6      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015b08:	0030      	movs	r0, r6
10015b0a:	f002 f993 	bl	10017e34 <__clzsi2>
10015b0e:	1f43      	subs	r3, r0, #5
10015b10:	409e      	lsls	r6, r3
10015b12:	2300      	movs	r3, #0
10015b14:	3076      	adds	r0, #118	; 0x76
10015b16:	4247      	negs	r7, r0
10015b18:	469a      	mov	sl, r3
10015b1a:	4699      	mov	r9, r3
10015b1c:	e799      	b.n	10015a52 <__aeabi_fmul+0x2e>
10015b1e:	230c      	movs	r3, #12
10015b20:	469a      	mov	sl, r3
10015b22:	3b09      	subs	r3, #9
10015b24:	4699      	mov	r9, r3
10015b26:	e794      	b.n	10015a52 <__aeabi_fmul+0x2e>
10015b28:	2680      	movs	r6, #128	; 0x80
10015b2a:	2400      	movs	r4, #0
10015b2c:	03f6      	lsls	r6, r6, #15
10015b2e:	25ff      	movs	r5, #255	; 0xff
10015b30:	e7c1      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015b32:	0035      	movs	r5, r6
10015b34:	4648      	mov	r0, r9
10015b36:	e7b2      	b.n	10015a9e <__aeabi_fmul+0x7a>
10015b38:	0035      	movs	r5, r6
10015b3a:	0022      	movs	r2, r4
10015b3c:	4648      	mov	r0, r9
10015b3e:	e7ae      	b.n	10015a9e <__aeabi_fmul+0x7a>
10015b40:	0429      	lsls	r1, r5, #16
10015b42:	0c09      	lsrs	r1, r1, #16
10015b44:	0008      	movs	r0, r1
10015b46:	0c37      	lsrs	r7, r6, #16
10015b48:	0436      	lsls	r6, r6, #16
10015b4a:	0c36      	lsrs	r6, r6, #16
10015b4c:	0c2c      	lsrs	r4, r5, #16
10015b4e:	4379      	muls	r1, r7
10015b50:	4370      	muls	r0, r6
10015b52:	4367      	muls	r7, r4
10015b54:	4374      	muls	r4, r6
10015b56:	0c06      	lsrs	r6, r0, #16
10015b58:	1864      	adds	r4, r4, r1
10015b5a:	1936      	adds	r6, r6, r4
10015b5c:	42b1      	cmp	r1, r6
10015b5e:	d903      	bls.n	10015b68 <__aeabi_fmul+0x144>
10015b60:	2180      	movs	r1, #128	; 0x80
10015b62:	0249      	lsls	r1, r1, #9
10015b64:	4688      	mov	r8, r1
10015b66:	4447      	add	r7, r8
10015b68:	0400      	lsls	r0, r0, #16
10015b6a:	0c00      	lsrs	r0, r0, #16
10015b6c:	0431      	lsls	r1, r6, #16
10015b6e:	1809      	adds	r1, r1, r0
10015b70:	018d      	lsls	r5, r1, #6
10015b72:	1e68      	subs	r0, r5, #1
10015b74:	4185      	sbcs	r5, r0
10015b76:	0e89      	lsrs	r1, r1, #26
10015b78:	4329      	orrs	r1, r5
10015b7a:	0c35      	lsrs	r5, r6, #16
10015b7c:	19ed      	adds	r5, r5, r7
10015b7e:	01ad      	lsls	r5, r5, #6
10015b80:	430d      	orrs	r5, r1
10015b82:	0129      	lsls	r1, r5, #4
10015b84:	d504      	bpl.n	10015b90 <__aeabi_fmul+0x16c>
10015b86:	2301      	movs	r3, #1
10015b88:	0869      	lsrs	r1, r5, #1
10015b8a:	401d      	ands	r5, r3
10015b8c:	4663      	mov	r3, ip
10015b8e:	430d      	orrs	r5, r1
10015b90:	0019      	movs	r1, r3
10015b92:	317f      	adds	r1, #127	; 0x7f
10015b94:	2900      	cmp	r1, #0
10015b96:	dd25      	ble.n	10015be4 <__aeabi_fmul+0x1c0>
10015b98:	0768      	lsls	r0, r5, #29
10015b9a:	d004      	beq.n	10015ba6 <__aeabi_fmul+0x182>
10015b9c:	200f      	movs	r0, #15
10015b9e:	4028      	ands	r0, r5
10015ba0:	2804      	cmp	r0, #4
10015ba2:	d000      	beq.n	10015ba6 <__aeabi_fmul+0x182>
10015ba4:	3504      	adds	r5, #4
10015ba6:	0128      	lsls	r0, r5, #4
10015ba8:	d503      	bpl.n	10015bb2 <__aeabi_fmul+0x18e>
10015baa:	4927      	ldr	r1, [pc, #156]	; (10015c48 <__aeabi_fmul+0x224>)
10015bac:	3380      	adds	r3, #128	; 0x80
10015bae:	400d      	ands	r5, r1
10015bb0:	0019      	movs	r1, r3
10015bb2:	29fe      	cmp	r1, #254	; 0xfe
10015bb4:	dca3      	bgt.n	10015afe <__aeabi_fmul+0xda>
10015bb6:	2401      	movs	r4, #1
10015bb8:	01ad      	lsls	r5, r5, #6
10015bba:	0a6e      	lsrs	r6, r5, #9
10015bbc:	4014      	ands	r4, r2
10015bbe:	b2cd      	uxtb	r5, r1
10015bc0:	e779      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015bc2:	2080      	movs	r0, #128	; 0x80
10015bc4:	03c0      	lsls	r0, r0, #15
10015bc6:	4206      	tst	r6, r0
10015bc8:	d007      	beq.n	10015bda <__aeabi_fmul+0x1b6>
10015bca:	4205      	tst	r5, r0
10015bcc:	d105      	bne.n	10015bda <__aeabi_fmul+0x1b6>
10015bce:	4328      	orrs	r0, r5
10015bd0:	0246      	lsls	r6, r0, #9
10015bd2:	0a76      	lsrs	r6, r6, #9
10015bd4:	4644      	mov	r4, r8
10015bd6:	25ff      	movs	r5, #255	; 0xff
10015bd8:	e76d      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015bda:	4306      	orrs	r6, r0
10015bdc:	0276      	lsls	r6, r6, #9
10015bde:	0a76      	lsrs	r6, r6, #9
10015be0:	25ff      	movs	r5, #255	; 0xff
10015be2:	e768      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015be4:	2401      	movs	r4, #1
10015be6:	1a61      	subs	r1, r4, r1
10015be8:	291b      	cmp	r1, #27
10015bea:	dd05      	ble.n	10015bf8 <__aeabi_fmul+0x1d4>
10015bec:	4014      	ands	r4, r2
10015bee:	2500      	movs	r5, #0
10015bf0:	2600      	movs	r6, #0
10015bf2:	e760      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015bf4:	4663      	mov	r3, ip
10015bf6:	e7cb      	b.n	10015b90 <__aeabi_fmul+0x16c>
10015bf8:	002e      	movs	r6, r5
10015bfa:	2320      	movs	r3, #32
10015bfc:	40ce      	lsrs	r6, r1
10015bfe:	1a59      	subs	r1, r3, r1
10015c00:	408d      	lsls	r5, r1
10015c02:	1e6b      	subs	r3, r5, #1
10015c04:	419d      	sbcs	r5, r3
10015c06:	432e      	orrs	r6, r5
10015c08:	0773      	lsls	r3, r6, #29
10015c0a:	d004      	beq.n	10015c16 <__aeabi_fmul+0x1f2>
10015c0c:	230f      	movs	r3, #15
10015c0e:	4033      	ands	r3, r6
10015c10:	2b04      	cmp	r3, #4
10015c12:	d000      	beq.n	10015c16 <__aeabi_fmul+0x1f2>
10015c14:	3604      	adds	r6, #4
10015c16:	0173      	lsls	r3, r6, #5
10015c18:	d504      	bpl.n	10015c24 <__aeabi_fmul+0x200>
10015c1a:	2401      	movs	r4, #1
10015c1c:	2501      	movs	r5, #1
10015c1e:	4014      	ands	r4, r2
10015c20:	2600      	movs	r6, #0
10015c22:	e748      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015c24:	2401      	movs	r4, #1
10015c26:	01b6      	lsls	r6, r6, #6
10015c28:	0a76      	lsrs	r6, r6, #9
10015c2a:	4014      	ands	r4, r2
10015c2c:	2500      	movs	r5, #0
10015c2e:	e742      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015c30:	2680      	movs	r6, #128	; 0x80
10015c32:	2401      	movs	r4, #1
10015c34:	03f6      	lsls	r6, r6, #15
10015c36:	432e      	orrs	r6, r5
10015c38:	0276      	lsls	r6, r6, #9
10015c3a:	0a76      	lsrs	r6, r6, #9
10015c3c:	4014      	ands	r4, r2
10015c3e:	25ff      	movs	r5, #255	; 0xff
10015c40:	e739      	b.n	10015ab6 <__aeabi_fmul+0x92>
10015c42:	46c0      	nop			; (mov r8, r8)
10015c44:	1001b224 	.word	0x1001b224
10015c48:	f7ffffff 	.word	0xf7ffffff

10015c4c <__aeabi_fsub>:
10015c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015c4e:	024a      	lsls	r2, r1, #9
10015c50:	004e      	lsls	r6, r1, #1
10015c52:	0243      	lsls	r3, r0, #9
10015c54:	0044      	lsls	r4, r0, #1
10015c56:	0e24      	lsrs	r4, r4, #24
10015c58:	0fc5      	lsrs	r5, r0, #31
10015c5a:	099b      	lsrs	r3, r3, #6
10015c5c:	0e36      	lsrs	r6, r6, #24
10015c5e:	0fc9      	lsrs	r1, r1, #31
10015c60:	0992      	lsrs	r2, r2, #6
10015c62:	2eff      	cmp	r6, #255	; 0xff
10015c64:	d100      	bne.n	10015c68 <__aeabi_fsub+0x1c>
10015c66:	e083      	b.n	10015d70 <__aeabi_fsub+0x124>
10015c68:	2001      	movs	r0, #1
10015c6a:	4041      	eors	r1, r0
10015c6c:	1ba0      	subs	r0, r4, r6
10015c6e:	42a9      	cmp	r1, r5
10015c70:	d05c      	beq.n	10015d2c <__aeabi_fsub+0xe0>
10015c72:	2800      	cmp	r0, #0
10015c74:	dc00      	bgt.n	10015c78 <__aeabi_fsub+0x2c>
10015c76:	e095      	b.n	10015da4 <__aeabi_fsub+0x158>
10015c78:	2e00      	cmp	r6, #0
10015c7a:	d11c      	bne.n	10015cb6 <__aeabi_fsub+0x6a>
10015c7c:	2a00      	cmp	r2, #0
10015c7e:	d000      	beq.n	10015c82 <__aeabi_fsub+0x36>
10015c80:	e081      	b.n	10015d86 <__aeabi_fsub+0x13a>
10015c82:	075a      	lsls	r2, r3, #29
10015c84:	d004      	beq.n	10015c90 <__aeabi_fsub+0x44>
10015c86:	220f      	movs	r2, #15
10015c88:	401a      	ands	r2, r3
10015c8a:	2a04      	cmp	r2, #4
10015c8c:	d000      	beq.n	10015c90 <__aeabi_fsub+0x44>
10015c8e:	3304      	adds	r3, #4
10015c90:	015a      	lsls	r2, r3, #5
10015c92:	d53b      	bpl.n	10015d0c <__aeabi_fsub+0xc0>
10015c94:	3401      	adds	r4, #1
10015c96:	2cff      	cmp	r4, #255	; 0xff
10015c98:	d100      	bne.n	10015c9c <__aeabi_fsub+0x50>
10015c9a:	e091      	b.n	10015dc0 <__aeabi_fsub+0x174>
10015c9c:	2001      	movs	r0, #1
10015c9e:	019b      	lsls	r3, r3, #6
10015ca0:	0a5b      	lsrs	r3, r3, #9
10015ca2:	b2e4      	uxtb	r4, r4
10015ca4:	4005      	ands	r5, r0
10015ca6:	025b      	lsls	r3, r3, #9
10015ca8:	05e4      	lsls	r4, r4, #23
10015caa:	0a5b      	lsrs	r3, r3, #9
10015cac:	07ed      	lsls	r5, r5, #31
10015cae:	4323      	orrs	r3, r4
10015cb0:	432b      	orrs	r3, r5
10015cb2:	0018      	movs	r0, r3
10015cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015cb6:	2cff      	cmp	r4, #255	; 0xff
10015cb8:	d0e3      	beq.n	10015c82 <__aeabi_fsub+0x36>
10015cba:	2180      	movs	r1, #128	; 0x80
10015cbc:	04c9      	lsls	r1, r1, #19
10015cbe:	430a      	orrs	r2, r1
10015cc0:	281b      	cmp	r0, #27
10015cc2:	dd00      	ble.n	10015cc6 <__aeabi_fsub+0x7a>
10015cc4:	e090      	b.n	10015de8 <__aeabi_fsub+0x19c>
10015cc6:	0016      	movs	r6, r2
10015cc8:	2120      	movs	r1, #32
10015cca:	40c6      	lsrs	r6, r0
10015ccc:	1a08      	subs	r0, r1, r0
10015cce:	4082      	lsls	r2, r0
10015cd0:	1e51      	subs	r1, r2, #1
10015cd2:	418a      	sbcs	r2, r1
10015cd4:	4332      	orrs	r2, r6
10015cd6:	1a9b      	subs	r3, r3, r2
10015cd8:	015a      	lsls	r2, r3, #5
10015cda:	d515      	bpl.n	10015d08 <__aeabi_fsub+0xbc>
10015cdc:	019b      	lsls	r3, r3, #6
10015cde:	099e      	lsrs	r6, r3, #6
10015ce0:	0030      	movs	r0, r6
10015ce2:	f002 f8a7 	bl	10017e34 <__clzsi2>
10015ce6:	3805      	subs	r0, #5
10015ce8:	4086      	lsls	r6, r0
10015cea:	4284      	cmp	r4, r0
10015cec:	dc6c      	bgt.n	10015dc8 <__aeabi_fsub+0x17c>
10015cee:	1b04      	subs	r4, r0, r4
10015cf0:	0033      	movs	r3, r6
10015cf2:	2020      	movs	r0, #32
10015cf4:	3401      	adds	r4, #1
10015cf6:	40e3      	lsrs	r3, r4
10015cf8:	1b04      	subs	r4, r0, r4
10015cfa:	40a6      	lsls	r6, r4
10015cfc:	1e72      	subs	r2, r6, #1
10015cfe:	4196      	sbcs	r6, r2
10015d00:	2400      	movs	r4, #0
10015d02:	4333      	orrs	r3, r6
10015d04:	e7bd      	b.n	10015c82 <__aeabi_fsub+0x36>
10015d06:	000d      	movs	r5, r1
10015d08:	075a      	lsls	r2, r3, #29
10015d0a:	d1bc      	bne.n	10015c86 <__aeabi_fsub+0x3a>
10015d0c:	08df      	lsrs	r7, r3, #3
10015d0e:	2301      	movs	r3, #1
10015d10:	401d      	ands	r5, r3
10015d12:	2cff      	cmp	r4, #255	; 0xff
10015d14:	d133      	bne.n	10015d7e <__aeabi_fsub+0x132>
10015d16:	2f00      	cmp	r7, #0
10015d18:	d100      	bne.n	10015d1c <__aeabi_fsub+0xd0>
10015d1a:	e090      	b.n	10015e3e <__aeabi_fsub+0x1f2>
10015d1c:	2280      	movs	r2, #128	; 0x80
10015d1e:	03d2      	lsls	r2, r2, #15
10015d20:	0013      	movs	r3, r2
10015d22:	433b      	orrs	r3, r7
10015d24:	025b      	lsls	r3, r3, #9
10015d26:	0a5b      	lsrs	r3, r3, #9
10015d28:	24ff      	movs	r4, #255	; 0xff
10015d2a:	e7bc      	b.n	10015ca6 <__aeabi_fsub+0x5a>
10015d2c:	2800      	cmp	r0, #0
10015d2e:	dd4f      	ble.n	10015dd0 <__aeabi_fsub+0x184>
10015d30:	2e00      	cmp	r6, #0
10015d32:	d02e      	beq.n	10015d92 <__aeabi_fsub+0x146>
10015d34:	2cff      	cmp	r4, #255	; 0xff
10015d36:	d0a4      	beq.n	10015c82 <__aeabi_fsub+0x36>
10015d38:	2580      	movs	r5, #128	; 0x80
10015d3a:	04ed      	lsls	r5, r5, #19
10015d3c:	432a      	orrs	r2, r5
10015d3e:	281b      	cmp	r0, #27
10015d40:	dd00      	ble.n	10015d44 <__aeabi_fsub+0xf8>
10015d42:	e097      	b.n	10015e74 <__aeabi_fsub+0x228>
10015d44:	0016      	movs	r6, r2
10015d46:	2520      	movs	r5, #32
10015d48:	40c6      	lsrs	r6, r0
10015d4a:	1a28      	subs	r0, r5, r0
10015d4c:	4082      	lsls	r2, r0
10015d4e:	1e50      	subs	r0, r2, #1
10015d50:	4182      	sbcs	r2, r0
10015d52:	4332      	orrs	r2, r6
10015d54:	189b      	adds	r3, r3, r2
10015d56:	015a      	lsls	r2, r3, #5
10015d58:	d5d5      	bpl.n	10015d06 <__aeabi_fsub+0xba>
10015d5a:	3401      	adds	r4, #1
10015d5c:	2cff      	cmp	r4, #255	; 0xff
10015d5e:	d06d      	beq.n	10015e3c <__aeabi_fsub+0x1f0>
10015d60:	2201      	movs	r2, #1
10015d62:	487b      	ldr	r0, [pc, #492]	; (10015f50 <__aeabi_fsub+0x304>)
10015d64:	401a      	ands	r2, r3
10015d66:	085b      	lsrs	r3, r3, #1
10015d68:	4003      	ands	r3, r0
10015d6a:	4313      	orrs	r3, r2
10015d6c:	000d      	movs	r5, r1
10015d6e:	e788      	b.n	10015c82 <__aeabi_fsub+0x36>
10015d70:	2a00      	cmp	r2, #0
10015d72:	d000      	beq.n	10015d76 <__aeabi_fsub+0x12a>
10015d74:	e77a      	b.n	10015c6c <__aeabi_fsub+0x20>
10015d76:	e777      	b.n	10015c68 <__aeabi_fsub+0x1c>
10015d78:	1e03      	subs	r3, r0, #0
10015d7a:	d1c5      	bne.n	10015d08 <__aeabi_fsub+0xbc>
10015d7c:	2500      	movs	r5, #0
10015d7e:	027b      	lsls	r3, r7, #9
10015d80:	0a5b      	lsrs	r3, r3, #9
10015d82:	b2e4      	uxtb	r4, r4
10015d84:	e78f      	b.n	10015ca6 <__aeabi_fsub+0x5a>
10015d86:	3801      	subs	r0, #1
10015d88:	2800      	cmp	r0, #0
10015d8a:	d0a4      	beq.n	10015cd6 <__aeabi_fsub+0x8a>
10015d8c:	2cff      	cmp	r4, #255	; 0xff
10015d8e:	d197      	bne.n	10015cc0 <__aeabi_fsub+0x74>
10015d90:	e777      	b.n	10015c82 <__aeabi_fsub+0x36>
10015d92:	2a00      	cmp	r2, #0
10015d94:	d100      	bne.n	10015d98 <__aeabi_fsub+0x14c>
10015d96:	e774      	b.n	10015c82 <__aeabi_fsub+0x36>
10015d98:	3801      	subs	r0, #1
10015d9a:	2800      	cmp	r0, #0
10015d9c:	d0da      	beq.n	10015d54 <__aeabi_fsub+0x108>
10015d9e:	2cff      	cmp	r4, #255	; 0xff
10015da0:	d1cd      	bne.n	10015d3e <__aeabi_fsub+0xf2>
10015da2:	e76e      	b.n	10015c82 <__aeabi_fsub+0x36>
10015da4:	2800      	cmp	r0, #0
10015da6:	d121      	bne.n	10015dec <__aeabi_fsub+0x1a0>
10015da8:	1c60      	adds	r0, r4, #1
10015daa:	b2c0      	uxtb	r0, r0
10015dac:	2801      	cmp	r0, #1
10015dae:	dd58      	ble.n	10015e62 <__aeabi_fsub+0x216>
10015db0:	2780      	movs	r7, #128	; 0x80
10015db2:	1a9e      	subs	r6, r3, r2
10015db4:	04ff      	lsls	r7, r7, #19
10015db6:	4037      	ands	r7, r6
10015db8:	d02f      	beq.n	10015e1a <__aeabi_fsub+0x1ce>
10015dba:	1ad6      	subs	r6, r2, r3
10015dbc:	000d      	movs	r5, r1
10015dbe:	e78f      	b.n	10015ce0 <__aeabi_fsub+0x94>
10015dc0:	2301      	movs	r3, #1
10015dc2:	401d      	ands	r5, r3
10015dc4:	2300      	movs	r3, #0
10015dc6:	e76e      	b.n	10015ca6 <__aeabi_fsub+0x5a>
10015dc8:	4b62      	ldr	r3, [pc, #392]	; (10015f54 <__aeabi_fsub+0x308>)
10015dca:	1a24      	subs	r4, r4, r0
10015dcc:	4033      	ands	r3, r6
10015dce:	e758      	b.n	10015c82 <__aeabi_fsub+0x36>
10015dd0:	2800      	cmp	r0, #0
10015dd2:	d151      	bne.n	10015e78 <__aeabi_fsub+0x22c>
10015dd4:	1c60      	adds	r0, r4, #1
10015dd6:	b2c6      	uxtb	r6, r0
10015dd8:	2e01      	cmp	r6, #1
10015dda:	dd33      	ble.n	10015e44 <__aeabi_fsub+0x1f8>
10015ddc:	28ff      	cmp	r0, #255	; 0xff
10015dde:	d02d      	beq.n	10015e3c <__aeabi_fsub+0x1f0>
10015de0:	189b      	adds	r3, r3, r2
10015de2:	085b      	lsrs	r3, r3, #1
10015de4:	0004      	movs	r4, r0
10015de6:	e74c      	b.n	10015c82 <__aeabi_fsub+0x36>
10015de8:	2201      	movs	r2, #1
10015dea:	e774      	b.n	10015cd6 <__aeabi_fsub+0x8a>
10015dec:	2c00      	cmp	r4, #0
10015dee:	d01a      	beq.n	10015e26 <__aeabi_fsub+0x1da>
10015df0:	2eff      	cmp	r6, #255	; 0xff
10015df2:	d01f      	beq.n	10015e34 <__aeabi_fsub+0x1e8>
10015df4:	2480      	movs	r4, #128	; 0x80
10015df6:	04e4      	lsls	r4, r4, #19
10015df8:	4240      	negs	r0, r0
10015dfa:	4323      	orrs	r3, r4
10015dfc:	281b      	cmp	r0, #27
10015dfe:	dd00      	ble.n	10015e02 <__aeabi_fsub+0x1b6>
10015e00:	e096      	b.n	10015f30 <__aeabi_fsub+0x2e4>
10015e02:	001d      	movs	r5, r3
10015e04:	2420      	movs	r4, #32
10015e06:	40c5      	lsrs	r5, r0
10015e08:	1a20      	subs	r0, r4, r0
10015e0a:	4083      	lsls	r3, r0
10015e0c:	1e58      	subs	r0, r3, #1
10015e0e:	4183      	sbcs	r3, r0
10015e10:	432b      	orrs	r3, r5
10015e12:	1ad3      	subs	r3, r2, r3
10015e14:	0034      	movs	r4, r6
10015e16:	000d      	movs	r5, r1
10015e18:	e75e      	b.n	10015cd8 <__aeabi_fsub+0x8c>
10015e1a:	2e00      	cmp	r6, #0
10015e1c:	d000      	beq.n	10015e20 <__aeabi_fsub+0x1d4>
10015e1e:	e75f      	b.n	10015ce0 <__aeabi_fsub+0x94>
10015e20:	2500      	movs	r5, #0
10015e22:	2400      	movs	r4, #0
10015e24:	e7ab      	b.n	10015d7e <__aeabi_fsub+0x132>
10015e26:	2b00      	cmp	r3, #0
10015e28:	d044      	beq.n	10015eb4 <__aeabi_fsub+0x268>
10015e2a:	43c0      	mvns	r0, r0
10015e2c:	2800      	cmp	r0, #0
10015e2e:	d0f0      	beq.n	10015e12 <__aeabi_fsub+0x1c6>
10015e30:	2eff      	cmp	r6, #255	; 0xff
10015e32:	d1e3      	bne.n	10015dfc <__aeabi_fsub+0x1b0>
10015e34:	0013      	movs	r3, r2
10015e36:	24ff      	movs	r4, #255	; 0xff
10015e38:	000d      	movs	r5, r1
10015e3a:	e722      	b.n	10015c82 <__aeabi_fsub+0x36>
10015e3c:	000d      	movs	r5, r1
10015e3e:	24ff      	movs	r4, #255	; 0xff
10015e40:	2300      	movs	r3, #0
10015e42:	e730      	b.n	10015ca6 <__aeabi_fsub+0x5a>
10015e44:	2c00      	cmp	r4, #0
10015e46:	d15d      	bne.n	10015f04 <__aeabi_fsub+0x2b8>
10015e48:	2b00      	cmp	r3, #0
10015e4a:	d07d      	beq.n	10015f48 <__aeabi_fsub+0x2fc>
10015e4c:	2a00      	cmp	r2, #0
10015e4e:	d100      	bne.n	10015e52 <__aeabi_fsub+0x206>
10015e50:	e717      	b.n	10015c82 <__aeabi_fsub+0x36>
10015e52:	189b      	adds	r3, r3, r2
10015e54:	015a      	lsls	r2, r3, #5
10015e56:	d400      	bmi.n	10015e5a <__aeabi_fsub+0x20e>
10015e58:	e756      	b.n	10015d08 <__aeabi_fsub+0xbc>
10015e5a:	4a3e      	ldr	r2, [pc, #248]	; (10015f54 <__aeabi_fsub+0x308>)
10015e5c:	0004      	movs	r4, r0
10015e5e:	4013      	ands	r3, r2
10015e60:	e70f      	b.n	10015c82 <__aeabi_fsub+0x36>
10015e62:	2c00      	cmp	r4, #0
10015e64:	d11e      	bne.n	10015ea4 <__aeabi_fsub+0x258>
10015e66:	2b00      	cmp	r3, #0
10015e68:	d12f      	bne.n	10015eca <__aeabi_fsub+0x27e>
10015e6a:	2a00      	cmp	r2, #0
10015e6c:	d065      	beq.n	10015f3a <__aeabi_fsub+0x2ee>
10015e6e:	0013      	movs	r3, r2
10015e70:	000d      	movs	r5, r1
10015e72:	e706      	b.n	10015c82 <__aeabi_fsub+0x36>
10015e74:	2201      	movs	r2, #1
10015e76:	e76d      	b.n	10015d54 <__aeabi_fsub+0x108>
10015e78:	2c00      	cmp	r4, #0
10015e7a:	d11f      	bne.n	10015ebc <__aeabi_fsub+0x270>
10015e7c:	2b00      	cmp	r3, #0
10015e7e:	d059      	beq.n	10015f34 <__aeabi_fsub+0x2e8>
10015e80:	43c0      	mvns	r0, r0
10015e82:	2800      	cmp	r0, #0
10015e84:	d00b      	beq.n	10015e9e <__aeabi_fsub+0x252>
10015e86:	2eff      	cmp	r6, #255	; 0xff
10015e88:	d04f      	beq.n	10015f2a <__aeabi_fsub+0x2de>
10015e8a:	281b      	cmp	r0, #27
10015e8c:	dc5e      	bgt.n	10015f4c <__aeabi_fsub+0x300>
10015e8e:	001d      	movs	r5, r3
10015e90:	2420      	movs	r4, #32
10015e92:	40c5      	lsrs	r5, r0
10015e94:	1a20      	subs	r0, r4, r0
10015e96:	4083      	lsls	r3, r0
10015e98:	1e58      	subs	r0, r3, #1
10015e9a:	4183      	sbcs	r3, r0
10015e9c:	432b      	orrs	r3, r5
10015e9e:	189b      	adds	r3, r3, r2
10015ea0:	0034      	movs	r4, r6
10015ea2:	e758      	b.n	10015d56 <__aeabi_fsub+0x10a>
10015ea4:	2b00      	cmp	r3, #0
10015ea6:	d11c      	bne.n	10015ee2 <__aeabi_fsub+0x296>
10015ea8:	2a00      	cmp	r2, #0
10015eaa:	d049      	beq.n	10015f40 <__aeabi_fsub+0x2f4>
10015eac:	0013      	movs	r3, r2
10015eae:	000d      	movs	r5, r1
10015eb0:	24ff      	movs	r4, #255	; 0xff
10015eb2:	e6e6      	b.n	10015c82 <__aeabi_fsub+0x36>
10015eb4:	0013      	movs	r3, r2
10015eb6:	0034      	movs	r4, r6
10015eb8:	000d      	movs	r5, r1
10015eba:	e6e2      	b.n	10015c82 <__aeabi_fsub+0x36>
10015ebc:	2eff      	cmp	r6, #255	; 0xff
10015ebe:	d034      	beq.n	10015f2a <__aeabi_fsub+0x2de>
10015ec0:	2480      	movs	r4, #128	; 0x80
10015ec2:	04e4      	lsls	r4, r4, #19
10015ec4:	4240      	negs	r0, r0
10015ec6:	4323      	orrs	r3, r4
10015ec8:	e7df      	b.n	10015e8a <__aeabi_fsub+0x23e>
10015eca:	2a00      	cmp	r2, #0
10015ecc:	d100      	bne.n	10015ed0 <__aeabi_fsub+0x284>
10015ece:	e6d8      	b.n	10015c82 <__aeabi_fsub+0x36>
10015ed0:	2780      	movs	r7, #128	; 0x80
10015ed2:	1a98      	subs	r0, r3, r2
10015ed4:	04ff      	lsls	r7, r7, #19
10015ed6:	4007      	ands	r7, r0
10015ed8:	d100      	bne.n	10015edc <__aeabi_fsub+0x290>
10015eda:	e74d      	b.n	10015d78 <__aeabi_fsub+0x12c>
10015edc:	1ad3      	subs	r3, r2, r3
10015ede:	000d      	movs	r5, r1
10015ee0:	e6cf      	b.n	10015c82 <__aeabi_fsub+0x36>
10015ee2:	24ff      	movs	r4, #255	; 0xff
10015ee4:	2a00      	cmp	r2, #0
10015ee6:	d100      	bne.n	10015eea <__aeabi_fsub+0x29e>
10015ee8:	e6cb      	b.n	10015c82 <__aeabi_fsub+0x36>
10015eea:	2080      	movs	r0, #128	; 0x80
10015eec:	08db      	lsrs	r3, r3, #3
10015eee:	03c0      	lsls	r0, r0, #15
10015ef0:	4203      	tst	r3, r0
10015ef2:	d004      	beq.n	10015efe <__aeabi_fsub+0x2b2>
10015ef4:	08d2      	lsrs	r2, r2, #3
10015ef6:	4202      	tst	r2, r0
10015ef8:	d101      	bne.n	10015efe <__aeabi_fsub+0x2b2>
10015efa:	0013      	movs	r3, r2
10015efc:	000d      	movs	r5, r1
10015efe:	00db      	lsls	r3, r3, #3
10015f00:	24ff      	movs	r4, #255	; 0xff
10015f02:	e6be      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f04:	2b00      	cmp	r3, #0
10015f06:	d010      	beq.n	10015f2a <__aeabi_fsub+0x2de>
10015f08:	24ff      	movs	r4, #255	; 0xff
10015f0a:	2a00      	cmp	r2, #0
10015f0c:	d100      	bne.n	10015f10 <__aeabi_fsub+0x2c4>
10015f0e:	e6b8      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f10:	2080      	movs	r0, #128	; 0x80
10015f12:	08db      	lsrs	r3, r3, #3
10015f14:	03c0      	lsls	r0, r0, #15
10015f16:	4203      	tst	r3, r0
10015f18:	d003      	beq.n	10015f22 <__aeabi_fsub+0x2d6>
10015f1a:	08d2      	lsrs	r2, r2, #3
10015f1c:	4202      	tst	r2, r0
10015f1e:	d100      	bne.n	10015f22 <__aeabi_fsub+0x2d6>
10015f20:	0013      	movs	r3, r2
10015f22:	00db      	lsls	r3, r3, #3
10015f24:	000d      	movs	r5, r1
10015f26:	24ff      	movs	r4, #255	; 0xff
10015f28:	e6ab      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f2a:	0013      	movs	r3, r2
10015f2c:	24ff      	movs	r4, #255	; 0xff
10015f2e:	e6a8      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f30:	2301      	movs	r3, #1
10015f32:	e76e      	b.n	10015e12 <__aeabi_fsub+0x1c6>
10015f34:	0013      	movs	r3, r2
10015f36:	0034      	movs	r4, r6
10015f38:	e6a3      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f3a:	2700      	movs	r7, #0
10015f3c:	2500      	movs	r5, #0
10015f3e:	e71e      	b.n	10015d7e <__aeabi_fsub+0x132>
10015f40:	2780      	movs	r7, #128	; 0x80
10015f42:	2500      	movs	r5, #0
10015f44:	03ff      	lsls	r7, r7, #15
10015f46:	e6e9      	b.n	10015d1c <__aeabi_fsub+0xd0>
10015f48:	0013      	movs	r3, r2
10015f4a:	e69a      	b.n	10015c82 <__aeabi_fsub+0x36>
10015f4c:	2301      	movs	r3, #1
10015f4e:	e7a6      	b.n	10015e9e <__aeabi_fsub+0x252>
10015f50:	7dffffff 	.word	0x7dffffff
10015f54:	fbffffff 	.word	0xfbffffff

10015f58 <__aeabi_fcmpun>:
10015f58:	0243      	lsls	r3, r0, #9
10015f5a:	0a5a      	lsrs	r2, r3, #9
10015f5c:	0040      	lsls	r0, r0, #1
10015f5e:	024b      	lsls	r3, r1, #9
10015f60:	0049      	lsls	r1, r1, #1
10015f62:	0e00      	lsrs	r0, r0, #24
10015f64:	0a5b      	lsrs	r3, r3, #9
10015f66:	0e09      	lsrs	r1, r1, #24
10015f68:	28ff      	cmp	r0, #255	; 0xff
10015f6a:	d003      	beq.n	10015f74 <__aeabi_fcmpun+0x1c>
10015f6c:	2000      	movs	r0, #0
10015f6e:	29ff      	cmp	r1, #255	; 0xff
10015f70:	d006      	beq.n	10015f80 <__aeabi_fcmpun+0x28>
10015f72:	4770      	bx	lr
10015f74:	38fe      	subs	r0, #254	; 0xfe
10015f76:	2a00      	cmp	r2, #0
10015f78:	d1fb      	bne.n	10015f72 <__aeabi_fcmpun+0x1a>
10015f7a:	2000      	movs	r0, #0
10015f7c:	29ff      	cmp	r1, #255	; 0xff
10015f7e:	d1f8      	bne.n	10015f72 <__aeabi_fcmpun+0x1a>
10015f80:	0018      	movs	r0, r3
10015f82:	1e43      	subs	r3, r0, #1
10015f84:	4198      	sbcs	r0, r3
10015f86:	e7f4      	b.n	10015f72 <__aeabi_fcmpun+0x1a>

10015f88 <__aeabi_f2iz>:
10015f88:	0243      	lsls	r3, r0, #9
10015f8a:	0a59      	lsrs	r1, r3, #9
10015f8c:	0043      	lsls	r3, r0, #1
10015f8e:	0fc2      	lsrs	r2, r0, #31
10015f90:	0e1b      	lsrs	r3, r3, #24
10015f92:	2000      	movs	r0, #0
10015f94:	2b7e      	cmp	r3, #126	; 0x7e
10015f96:	dd0e      	ble.n	10015fb6 <__aeabi_f2iz+0x2e>
10015f98:	2b9d      	cmp	r3, #157	; 0x9d
10015f9a:	dc0d      	bgt.n	10015fb8 <__aeabi_f2iz+0x30>
10015f9c:	2080      	movs	r0, #128	; 0x80
10015f9e:	0400      	lsls	r0, r0, #16
10015fa0:	4301      	orrs	r1, r0
10015fa2:	2b95      	cmp	r3, #149	; 0x95
10015fa4:	dc0b      	bgt.n	10015fbe <__aeabi_f2iz+0x36>
10015fa6:	2096      	movs	r0, #150	; 0x96
10015fa8:	1ac3      	subs	r3, r0, r3
10015faa:	40d9      	lsrs	r1, r3
10015fac:	000b      	movs	r3, r1
10015fae:	4258      	negs	r0, r3
10015fb0:	2a00      	cmp	r2, #0
10015fb2:	d100      	bne.n	10015fb6 <__aeabi_f2iz+0x2e>
10015fb4:	0018      	movs	r0, r3
10015fb6:	4770      	bx	lr
10015fb8:	4b03      	ldr	r3, [pc, #12]	; (10015fc8 <__aeabi_f2iz+0x40>)
10015fba:	18d0      	adds	r0, r2, r3
10015fbc:	e7fb      	b.n	10015fb6 <__aeabi_f2iz+0x2e>
10015fbe:	3b96      	subs	r3, #150	; 0x96
10015fc0:	4099      	lsls	r1, r3
10015fc2:	000b      	movs	r3, r1
10015fc4:	e7f3      	b.n	10015fae <__aeabi_f2iz+0x26>
10015fc6:	46c0      	nop			; (mov r8, r8)
10015fc8:	7fffffff 	.word	0x7fffffff

10015fcc <__aeabi_i2f>:
10015fcc:	b570      	push	{r4, r5, r6, lr}
10015fce:	2800      	cmp	r0, #0
10015fd0:	d030      	beq.n	10016034 <__aeabi_i2f+0x68>
10015fd2:	17c3      	asrs	r3, r0, #31
10015fd4:	18c5      	adds	r5, r0, r3
10015fd6:	405d      	eors	r5, r3
10015fd8:	0fc4      	lsrs	r4, r0, #31
10015fda:	0028      	movs	r0, r5
10015fdc:	f001 ff2a 	bl	10017e34 <__clzsi2>
10015fe0:	239e      	movs	r3, #158	; 0x9e
10015fe2:	1a1b      	subs	r3, r3, r0
10015fe4:	2b96      	cmp	r3, #150	; 0x96
10015fe6:	dc0d      	bgt.n	10016004 <__aeabi_i2f+0x38>
10015fe8:	2296      	movs	r2, #150	; 0x96
10015fea:	1ad2      	subs	r2, r2, r3
10015fec:	4095      	lsls	r5, r2
10015fee:	026a      	lsls	r2, r5, #9
10015ff0:	0a52      	lsrs	r2, r2, #9
10015ff2:	b2d8      	uxtb	r0, r3
10015ff4:	0252      	lsls	r2, r2, #9
10015ff6:	05c0      	lsls	r0, r0, #23
10015ff8:	0a52      	lsrs	r2, r2, #9
10015ffa:	07e4      	lsls	r4, r4, #31
10015ffc:	4302      	orrs	r2, r0
10015ffe:	4322      	orrs	r2, r4
10016000:	0010      	movs	r0, r2
10016002:	bd70      	pop	{r4, r5, r6, pc}
10016004:	2b99      	cmp	r3, #153	; 0x99
10016006:	dc19      	bgt.n	1001603c <__aeabi_i2f+0x70>
10016008:	2299      	movs	r2, #153	; 0x99
1001600a:	1ad2      	subs	r2, r2, r3
1001600c:	4095      	lsls	r5, r2
1001600e:	4a12      	ldr	r2, [pc, #72]	; (10016058 <__aeabi_i2f+0x8c>)
10016010:	402a      	ands	r2, r5
10016012:	0769      	lsls	r1, r5, #29
10016014:	d004      	beq.n	10016020 <__aeabi_i2f+0x54>
10016016:	210f      	movs	r1, #15
10016018:	400d      	ands	r5, r1
1001601a:	2d04      	cmp	r5, #4
1001601c:	d000      	beq.n	10016020 <__aeabi_i2f+0x54>
1001601e:	3204      	adds	r2, #4
10016020:	0151      	lsls	r1, r2, #5
10016022:	d503      	bpl.n	1001602c <__aeabi_i2f+0x60>
10016024:	4b0c      	ldr	r3, [pc, #48]	; (10016058 <__aeabi_i2f+0x8c>)
10016026:	401a      	ands	r2, r3
10016028:	239f      	movs	r3, #159	; 0x9f
1001602a:	1a1b      	subs	r3, r3, r0
1001602c:	0192      	lsls	r2, r2, #6
1001602e:	0a52      	lsrs	r2, r2, #9
10016030:	b2d8      	uxtb	r0, r3
10016032:	e7df      	b.n	10015ff4 <__aeabi_i2f+0x28>
10016034:	2400      	movs	r4, #0
10016036:	2000      	movs	r0, #0
10016038:	2200      	movs	r2, #0
1001603a:	e7db      	b.n	10015ff4 <__aeabi_i2f+0x28>
1001603c:	2205      	movs	r2, #5
1001603e:	002e      	movs	r6, r5
10016040:	1a12      	subs	r2, r2, r0
10016042:	21b9      	movs	r1, #185	; 0xb9
10016044:	40d6      	lsrs	r6, r2
10016046:	002a      	movs	r2, r5
10016048:	1ac9      	subs	r1, r1, r3
1001604a:	408a      	lsls	r2, r1
1001604c:	1e55      	subs	r5, r2, #1
1001604e:	41aa      	sbcs	r2, r5
10016050:	0035      	movs	r5, r6
10016052:	4315      	orrs	r5, r2
10016054:	e7db      	b.n	1001600e <__aeabi_i2f+0x42>
10016056:	46c0      	nop			; (mov r8, r8)
10016058:	fbffffff 	.word	0xfbffffff

1001605c <__aeabi_ui2f>:
1001605c:	b570      	push	{r4, r5, r6, lr}
1001605e:	1e04      	subs	r4, r0, #0
10016060:	d028      	beq.n	100160b4 <__aeabi_ui2f+0x58>
10016062:	f001 fee7 	bl	10017e34 <__clzsi2>
10016066:	239e      	movs	r3, #158	; 0x9e
10016068:	1a1b      	subs	r3, r3, r0
1001606a:	2b96      	cmp	r3, #150	; 0x96
1001606c:	dc0a      	bgt.n	10016084 <__aeabi_ui2f+0x28>
1001606e:	2296      	movs	r2, #150	; 0x96
10016070:	1ad2      	subs	r2, r2, r3
10016072:	4094      	lsls	r4, r2
10016074:	0262      	lsls	r2, r4, #9
10016076:	0a52      	lsrs	r2, r2, #9
10016078:	b2d8      	uxtb	r0, r3
1001607a:	0252      	lsls	r2, r2, #9
1001607c:	0a52      	lsrs	r2, r2, #9
1001607e:	05c0      	lsls	r0, r0, #23
10016080:	4310      	orrs	r0, r2
10016082:	bd70      	pop	{r4, r5, r6, pc}
10016084:	2b99      	cmp	r3, #153	; 0x99
10016086:	dc18      	bgt.n	100160ba <__aeabi_ui2f+0x5e>
10016088:	2299      	movs	r2, #153	; 0x99
1001608a:	1ad2      	subs	r2, r2, r3
1001608c:	4094      	lsls	r4, r2
1001608e:	4a11      	ldr	r2, [pc, #68]	; (100160d4 <__aeabi_ui2f+0x78>)
10016090:	4022      	ands	r2, r4
10016092:	0761      	lsls	r1, r4, #29
10016094:	d004      	beq.n	100160a0 <__aeabi_ui2f+0x44>
10016096:	210f      	movs	r1, #15
10016098:	400c      	ands	r4, r1
1001609a:	2c04      	cmp	r4, #4
1001609c:	d000      	beq.n	100160a0 <__aeabi_ui2f+0x44>
1001609e:	3204      	adds	r2, #4
100160a0:	0151      	lsls	r1, r2, #5
100160a2:	d503      	bpl.n	100160ac <__aeabi_ui2f+0x50>
100160a4:	4b0b      	ldr	r3, [pc, #44]	; (100160d4 <__aeabi_ui2f+0x78>)
100160a6:	401a      	ands	r2, r3
100160a8:	239f      	movs	r3, #159	; 0x9f
100160aa:	1a1b      	subs	r3, r3, r0
100160ac:	0192      	lsls	r2, r2, #6
100160ae:	0a52      	lsrs	r2, r2, #9
100160b0:	b2d8      	uxtb	r0, r3
100160b2:	e7e2      	b.n	1001607a <__aeabi_ui2f+0x1e>
100160b4:	2000      	movs	r0, #0
100160b6:	2200      	movs	r2, #0
100160b8:	e7df      	b.n	1001607a <__aeabi_ui2f+0x1e>
100160ba:	2205      	movs	r2, #5
100160bc:	0025      	movs	r5, r4
100160be:	1a12      	subs	r2, r2, r0
100160c0:	21b9      	movs	r1, #185	; 0xb9
100160c2:	40d5      	lsrs	r5, r2
100160c4:	0022      	movs	r2, r4
100160c6:	1ac9      	subs	r1, r1, r3
100160c8:	408a      	lsls	r2, r1
100160ca:	1e54      	subs	r4, r2, #1
100160cc:	41a2      	sbcs	r2, r4
100160ce:	002c      	movs	r4, r5
100160d0:	4314      	orrs	r4, r2
100160d2:	e7dc      	b.n	1001608e <__aeabi_ui2f+0x32>
100160d4:	fbffffff 	.word	0xfbffffff

100160d8 <__aeabi_dadd>:
100160d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100160da:	4656      	mov	r6, sl
100160dc:	465f      	mov	r7, fp
100160de:	464d      	mov	r5, r9
100160e0:	4644      	mov	r4, r8
100160e2:	b4f0      	push	{r4, r5, r6, r7}
100160e4:	000f      	movs	r7, r1
100160e6:	0ffd      	lsrs	r5, r7, #31
100160e8:	46aa      	mov	sl, r5
100160ea:	0309      	lsls	r1, r1, #12
100160ec:	007c      	lsls	r4, r7, #1
100160ee:	002e      	movs	r6, r5
100160f0:	005f      	lsls	r7, r3, #1
100160f2:	0f45      	lsrs	r5, r0, #29
100160f4:	0a49      	lsrs	r1, r1, #9
100160f6:	0d7f      	lsrs	r7, r7, #21
100160f8:	4329      	orrs	r1, r5
100160fa:	00c5      	lsls	r5, r0, #3
100160fc:	0318      	lsls	r0, r3, #12
100160fe:	46bc      	mov	ip, r7
10016100:	0a40      	lsrs	r0, r0, #9
10016102:	0f57      	lsrs	r7, r2, #29
10016104:	0d64      	lsrs	r4, r4, #21
10016106:	0fdb      	lsrs	r3, r3, #31
10016108:	4338      	orrs	r0, r7
1001610a:	00d2      	lsls	r2, r2, #3
1001610c:	459a      	cmp	sl, r3
1001610e:	d100      	bne.n	10016112 <__aeabi_dadd+0x3a>
10016110:	e0aa      	b.n	10016268 <__aeabi_dadd+0x190>
10016112:	4666      	mov	r6, ip
10016114:	1ba6      	subs	r6, r4, r6
10016116:	2e00      	cmp	r6, #0
10016118:	dc00      	bgt.n	1001611c <__aeabi_dadd+0x44>
1001611a:	e0ff      	b.n	1001631c <__aeabi_dadd+0x244>
1001611c:	4663      	mov	r3, ip
1001611e:	2b00      	cmp	r3, #0
10016120:	d139      	bne.n	10016196 <__aeabi_dadd+0xbe>
10016122:	0003      	movs	r3, r0
10016124:	4313      	orrs	r3, r2
10016126:	d000      	beq.n	1001612a <__aeabi_dadd+0x52>
10016128:	e0d9      	b.n	100162de <__aeabi_dadd+0x206>
1001612a:	076b      	lsls	r3, r5, #29
1001612c:	d009      	beq.n	10016142 <__aeabi_dadd+0x6a>
1001612e:	230f      	movs	r3, #15
10016130:	402b      	ands	r3, r5
10016132:	2b04      	cmp	r3, #4
10016134:	d005      	beq.n	10016142 <__aeabi_dadd+0x6a>
10016136:	1d2b      	adds	r3, r5, #4
10016138:	42ab      	cmp	r3, r5
1001613a:	41ad      	sbcs	r5, r5
1001613c:	426d      	negs	r5, r5
1001613e:	1949      	adds	r1, r1, r5
10016140:	001d      	movs	r5, r3
10016142:	020b      	lsls	r3, r1, #8
10016144:	d400      	bmi.n	10016148 <__aeabi_dadd+0x70>
10016146:	e082      	b.n	1001624e <__aeabi_dadd+0x176>
10016148:	4bca      	ldr	r3, [pc, #808]	; (10016474 <__aeabi_dadd+0x39c>)
1001614a:	3401      	adds	r4, #1
1001614c:	429c      	cmp	r4, r3
1001614e:	d100      	bne.n	10016152 <__aeabi_dadd+0x7a>
10016150:	e0fe      	b.n	10016350 <__aeabi_dadd+0x278>
10016152:	000a      	movs	r2, r1
10016154:	4656      	mov	r6, sl
10016156:	4bc8      	ldr	r3, [pc, #800]	; (10016478 <__aeabi_dadd+0x3a0>)
10016158:	08ed      	lsrs	r5, r5, #3
1001615a:	401a      	ands	r2, r3
1001615c:	0750      	lsls	r0, r2, #29
1001615e:	0564      	lsls	r4, r4, #21
10016160:	0252      	lsls	r2, r2, #9
10016162:	4305      	orrs	r5, r0
10016164:	0b12      	lsrs	r2, r2, #12
10016166:	0d64      	lsrs	r4, r4, #21
10016168:	2100      	movs	r1, #0
1001616a:	0312      	lsls	r2, r2, #12
1001616c:	0d0b      	lsrs	r3, r1, #20
1001616e:	051b      	lsls	r3, r3, #20
10016170:	0564      	lsls	r4, r4, #21
10016172:	0b12      	lsrs	r2, r2, #12
10016174:	431a      	orrs	r2, r3
10016176:	0863      	lsrs	r3, r4, #1
10016178:	4cc0      	ldr	r4, [pc, #768]	; (1001647c <__aeabi_dadd+0x3a4>)
1001617a:	07f6      	lsls	r6, r6, #31
1001617c:	4014      	ands	r4, r2
1001617e:	431c      	orrs	r4, r3
10016180:	0064      	lsls	r4, r4, #1
10016182:	0864      	lsrs	r4, r4, #1
10016184:	4334      	orrs	r4, r6
10016186:	0028      	movs	r0, r5
10016188:	0021      	movs	r1, r4
1001618a:	bc3c      	pop	{r2, r3, r4, r5}
1001618c:	4690      	mov	r8, r2
1001618e:	4699      	mov	r9, r3
10016190:	46a2      	mov	sl, r4
10016192:	46ab      	mov	fp, r5
10016194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016196:	4bb7      	ldr	r3, [pc, #732]	; (10016474 <__aeabi_dadd+0x39c>)
10016198:	429c      	cmp	r4, r3
1001619a:	d0c6      	beq.n	1001612a <__aeabi_dadd+0x52>
1001619c:	2380      	movs	r3, #128	; 0x80
1001619e:	041b      	lsls	r3, r3, #16
100161a0:	4318      	orrs	r0, r3
100161a2:	2e38      	cmp	r6, #56	; 0x38
100161a4:	dd00      	ble.n	100161a8 <__aeabi_dadd+0xd0>
100161a6:	e0eb      	b.n	10016380 <__aeabi_dadd+0x2a8>
100161a8:	2e1f      	cmp	r6, #31
100161aa:	dd00      	ble.n	100161ae <__aeabi_dadd+0xd6>
100161ac:	e11e      	b.n	100163ec <__aeabi_dadd+0x314>
100161ae:	2320      	movs	r3, #32
100161b0:	1b9b      	subs	r3, r3, r6
100161b2:	469c      	mov	ip, r3
100161b4:	0003      	movs	r3, r0
100161b6:	4667      	mov	r7, ip
100161b8:	40bb      	lsls	r3, r7
100161ba:	4698      	mov	r8, r3
100161bc:	0013      	movs	r3, r2
100161be:	4647      	mov	r7, r8
100161c0:	40f3      	lsrs	r3, r6
100161c2:	433b      	orrs	r3, r7
100161c4:	4667      	mov	r7, ip
100161c6:	40ba      	lsls	r2, r7
100161c8:	1e57      	subs	r7, r2, #1
100161ca:	41ba      	sbcs	r2, r7
100161cc:	4313      	orrs	r3, r2
100161ce:	0002      	movs	r2, r0
100161d0:	40f2      	lsrs	r2, r6
100161d2:	1aeb      	subs	r3, r5, r3
100161d4:	429d      	cmp	r5, r3
100161d6:	41b6      	sbcs	r6, r6
100161d8:	001d      	movs	r5, r3
100161da:	1a8a      	subs	r2, r1, r2
100161dc:	4276      	negs	r6, r6
100161de:	1b91      	subs	r1, r2, r6
100161e0:	020b      	lsls	r3, r1, #8
100161e2:	d531      	bpl.n	10016248 <__aeabi_dadd+0x170>
100161e4:	024a      	lsls	r2, r1, #9
100161e6:	0a56      	lsrs	r6, r2, #9
100161e8:	2e00      	cmp	r6, #0
100161ea:	d100      	bne.n	100161ee <__aeabi_dadd+0x116>
100161ec:	e0b4      	b.n	10016358 <__aeabi_dadd+0x280>
100161ee:	0030      	movs	r0, r6
100161f0:	f001 fe20 	bl	10017e34 <__clzsi2>
100161f4:	0003      	movs	r3, r0
100161f6:	3b08      	subs	r3, #8
100161f8:	2b1f      	cmp	r3, #31
100161fa:	dd00      	ble.n	100161fe <__aeabi_dadd+0x126>
100161fc:	e0b5      	b.n	1001636a <__aeabi_dadd+0x292>
100161fe:	2220      	movs	r2, #32
10016200:	0029      	movs	r1, r5
10016202:	1ad2      	subs	r2, r2, r3
10016204:	40d1      	lsrs	r1, r2
10016206:	409e      	lsls	r6, r3
10016208:	000a      	movs	r2, r1
1001620a:	409d      	lsls	r5, r3
1001620c:	4332      	orrs	r2, r6
1001620e:	429c      	cmp	r4, r3
10016210:	dd00      	ble.n	10016214 <__aeabi_dadd+0x13c>
10016212:	e0b1      	b.n	10016378 <__aeabi_dadd+0x2a0>
10016214:	1b1c      	subs	r4, r3, r4
10016216:	1c63      	adds	r3, r4, #1
10016218:	2b1f      	cmp	r3, #31
1001621a:	dd00      	ble.n	1001621e <__aeabi_dadd+0x146>
1001621c:	e0d5      	b.n	100163ca <__aeabi_dadd+0x2f2>
1001621e:	2120      	movs	r1, #32
10016220:	0014      	movs	r4, r2
10016222:	0028      	movs	r0, r5
10016224:	1ac9      	subs	r1, r1, r3
10016226:	408c      	lsls	r4, r1
10016228:	40d8      	lsrs	r0, r3
1001622a:	408d      	lsls	r5, r1
1001622c:	4304      	orrs	r4, r0
1001622e:	40da      	lsrs	r2, r3
10016230:	1e68      	subs	r0, r5, #1
10016232:	4185      	sbcs	r5, r0
10016234:	0011      	movs	r1, r2
10016236:	4325      	orrs	r5, r4
10016238:	2400      	movs	r4, #0
1001623a:	e776      	b.n	1001612a <__aeabi_dadd+0x52>
1001623c:	4641      	mov	r1, r8
1001623e:	4331      	orrs	r1, r6
10016240:	d100      	bne.n	10016244 <__aeabi_dadd+0x16c>
10016242:	e234      	b.n	100166ae <__aeabi_dadd+0x5d6>
10016244:	0031      	movs	r1, r6
10016246:	4645      	mov	r5, r8
10016248:	076b      	lsls	r3, r5, #29
1001624a:	d000      	beq.n	1001624e <__aeabi_dadd+0x176>
1001624c:	e76f      	b.n	1001612e <__aeabi_dadd+0x56>
1001624e:	4656      	mov	r6, sl
10016250:	0748      	lsls	r0, r1, #29
10016252:	08ed      	lsrs	r5, r5, #3
10016254:	08c9      	lsrs	r1, r1, #3
10016256:	4305      	orrs	r5, r0
10016258:	4b86      	ldr	r3, [pc, #536]	; (10016474 <__aeabi_dadd+0x39c>)
1001625a:	429c      	cmp	r4, r3
1001625c:	d035      	beq.n	100162ca <__aeabi_dadd+0x1f2>
1001625e:	030a      	lsls	r2, r1, #12
10016260:	0564      	lsls	r4, r4, #21
10016262:	0b12      	lsrs	r2, r2, #12
10016264:	0d64      	lsrs	r4, r4, #21
10016266:	e77f      	b.n	10016168 <__aeabi_dadd+0x90>
10016268:	4663      	mov	r3, ip
1001626a:	1ae3      	subs	r3, r4, r3
1001626c:	469b      	mov	fp, r3
1001626e:	2b00      	cmp	r3, #0
10016270:	dc00      	bgt.n	10016274 <__aeabi_dadd+0x19c>
10016272:	e08b      	b.n	1001638c <__aeabi_dadd+0x2b4>
10016274:	4667      	mov	r7, ip
10016276:	2f00      	cmp	r7, #0
10016278:	d03c      	beq.n	100162f4 <__aeabi_dadd+0x21c>
1001627a:	4f7e      	ldr	r7, [pc, #504]	; (10016474 <__aeabi_dadd+0x39c>)
1001627c:	42bc      	cmp	r4, r7
1001627e:	d100      	bne.n	10016282 <__aeabi_dadd+0x1aa>
10016280:	e753      	b.n	1001612a <__aeabi_dadd+0x52>
10016282:	2780      	movs	r7, #128	; 0x80
10016284:	043f      	lsls	r7, r7, #16
10016286:	4338      	orrs	r0, r7
10016288:	465b      	mov	r3, fp
1001628a:	2b38      	cmp	r3, #56	; 0x38
1001628c:	dc00      	bgt.n	10016290 <__aeabi_dadd+0x1b8>
1001628e:	e0f7      	b.n	10016480 <__aeabi_dadd+0x3a8>
10016290:	4302      	orrs	r2, r0
10016292:	1e50      	subs	r0, r2, #1
10016294:	4182      	sbcs	r2, r0
10016296:	2000      	movs	r0, #0
10016298:	b2d2      	uxtb	r2, r2
1001629a:	1953      	adds	r3, r2, r5
1001629c:	1842      	adds	r2, r0, r1
1001629e:	42ab      	cmp	r3, r5
100162a0:	4189      	sbcs	r1, r1
100162a2:	001d      	movs	r5, r3
100162a4:	4249      	negs	r1, r1
100162a6:	1889      	adds	r1, r1, r2
100162a8:	020b      	lsls	r3, r1, #8
100162aa:	d5cd      	bpl.n	10016248 <__aeabi_dadd+0x170>
100162ac:	4b71      	ldr	r3, [pc, #452]	; (10016474 <__aeabi_dadd+0x39c>)
100162ae:	3401      	adds	r4, #1
100162b0:	429c      	cmp	r4, r3
100162b2:	d100      	bne.n	100162b6 <__aeabi_dadd+0x1de>
100162b4:	e13d      	b.n	10016532 <__aeabi_dadd+0x45a>
100162b6:	2001      	movs	r0, #1
100162b8:	4a6f      	ldr	r2, [pc, #444]	; (10016478 <__aeabi_dadd+0x3a0>)
100162ba:	086b      	lsrs	r3, r5, #1
100162bc:	400a      	ands	r2, r1
100162be:	4028      	ands	r0, r5
100162c0:	4318      	orrs	r0, r3
100162c2:	07d5      	lsls	r5, r2, #31
100162c4:	4305      	orrs	r5, r0
100162c6:	0851      	lsrs	r1, r2, #1
100162c8:	e72f      	b.n	1001612a <__aeabi_dadd+0x52>
100162ca:	002b      	movs	r3, r5
100162cc:	430b      	orrs	r3, r1
100162ce:	d100      	bne.n	100162d2 <__aeabi_dadd+0x1fa>
100162d0:	e1cb      	b.n	1001666a <__aeabi_dadd+0x592>
100162d2:	2380      	movs	r3, #128	; 0x80
100162d4:	031b      	lsls	r3, r3, #12
100162d6:	430b      	orrs	r3, r1
100162d8:	031a      	lsls	r2, r3, #12
100162da:	0b12      	lsrs	r2, r2, #12
100162dc:	e744      	b.n	10016168 <__aeabi_dadd+0x90>
100162de:	3e01      	subs	r6, #1
100162e0:	2e00      	cmp	r6, #0
100162e2:	d16d      	bne.n	100163c0 <__aeabi_dadd+0x2e8>
100162e4:	1aae      	subs	r6, r5, r2
100162e6:	42b5      	cmp	r5, r6
100162e8:	419b      	sbcs	r3, r3
100162ea:	1a09      	subs	r1, r1, r0
100162ec:	425b      	negs	r3, r3
100162ee:	1ac9      	subs	r1, r1, r3
100162f0:	0035      	movs	r5, r6
100162f2:	e775      	b.n	100161e0 <__aeabi_dadd+0x108>
100162f4:	0007      	movs	r7, r0
100162f6:	4317      	orrs	r7, r2
100162f8:	d100      	bne.n	100162fc <__aeabi_dadd+0x224>
100162fa:	e716      	b.n	1001612a <__aeabi_dadd+0x52>
100162fc:	2301      	movs	r3, #1
100162fe:	425b      	negs	r3, r3
10016300:	469c      	mov	ip, r3
10016302:	44e3      	add	fp, ip
10016304:	465b      	mov	r3, fp
10016306:	2b00      	cmp	r3, #0
10016308:	d000      	beq.n	1001630c <__aeabi_dadd+0x234>
1001630a:	e0e0      	b.n	100164ce <__aeabi_dadd+0x3f6>
1001630c:	18aa      	adds	r2, r5, r2
1001630e:	42aa      	cmp	r2, r5
10016310:	419b      	sbcs	r3, r3
10016312:	1809      	adds	r1, r1, r0
10016314:	425b      	negs	r3, r3
10016316:	1859      	adds	r1, r3, r1
10016318:	0015      	movs	r5, r2
1001631a:	e7c5      	b.n	100162a8 <__aeabi_dadd+0x1d0>
1001631c:	2e00      	cmp	r6, #0
1001631e:	d175      	bne.n	1001640c <__aeabi_dadd+0x334>
10016320:	1c66      	adds	r6, r4, #1
10016322:	0576      	lsls	r6, r6, #21
10016324:	0d76      	lsrs	r6, r6, #21
10016326:	2e01      	cmp	r6, #1
10016328:	dc00      	bgt.n	1001632c <__aeabi_dadd+0x254>
1001632a:	e0f3      	b.n	10016514 <__aeabi_dadd+0x43c>
1001632c:	1aae      	subs	r6, r5, r2
1001632e:	46b0      	mov	r8, r6
10016330:	4545      	cmp	r5, r8
10016332:	41bf      	sbcs	r7, r7
10016334:	1a0e      	subs	r6, r1, r0
10016336:	427f      	negs	r7, r7
10016338:	1bf6      	subs	r6, r6, r7
1001633a:	0237      	lsls	r7, r6, #8
1001633c:	d400      	bmi.n	10016340 <__aeabi_dadd+0x268>
1001633e:	e08f      	b.n	10016460 <__aeabi_dadd+0x388>
10016340:	1b55      	subs	r5, r2, r5
10016342:	42aa      	cmp	r2, r5
10016344:	41b6      	sbcs	r6, r6
10016346:	1a41      	subs	r1, r0, r1
10016348:	4276      	negs	r6, r6
1001634a:	1b8e      	subs	r6, r1, r6
1001634c:	469a      	mov	sl, r3
1001634e:	e74b      	b.n	100161e8 <__aeabi_dadd+0x110>
10016350:	4656      	mov	r6, sl
10016352:	2200      	movs	r2, #0
10016354:	2500      	movs	r5, #0
10016356:	e707      	b.n	10016168 <__aeabi_dadd+0x90>
10016358:	0028      	movs	r0, r5
1001635a:	f001 fd6b 	bl	10017e34 <__clzsi2>
1001635e:	3020      	adds	r0, #32
10016360:	0003      	movs	r3, r0
10016362:	3b08      	subs	r3, #8
10016364:	2b1f      	cmp	r3, #31
10016366:	dc00      	bgt.n	1001636a <__aeabi_dadd+0x292>
10016368:	e749      	b.n	100161fe <__aeabi_dadd+0x126>
1001636a:	002a      	movs	r2, r5
1001636c:	3828      	subs	r0, #40	; 0x28
1001636e:	4082      	lsls	r2, r0
10016370:	2500      	movs	r5, #0
10016372:	429c      	cmp	r4, r3
10016374:	dc00      	bgt.n	10016378 <__aeabi_dadd+0x2a0>
10016376:	e74d      	b.n	10016214 <__aeabi_dadd+0x13c>
10016378:	493f      	ldr	r1, [pc, #252]	; (10016478 <__aeabi_dadd+0x3a0>)
1001637a:	1ae4      	subs	r4, r4, r3
1001637c:	4011      	ands	r1, r2
1001637e:	e6d4      	b.n	1001612a <__aeabi_dadd+0x52>
10016380:	4302      	orrs	r2, r0
10016382:	1e50      	subs	r0, r2, #1
10016384:	4182      	sbcs	r2, r0
10016386:	b2d3      	uxtb	r3, r2
10016388:	2200      	movs	r2, #0
1001638a:	e722      	b.n	100161d2 <__aeabi_dadd+0xfa>
1001638c:	2b00      	cmp	r3, #0
1001638e:	d000      	beq.n	10016392 <__aeabi_dadd+0x2ba>
10016390:	e0f3      	b.n	1001657a <__aeabi_dadd+0x4a2>
10016392:	1c63      	adds	r3, r4, #1
10016394:	469c      	mov	ip, r3
10016396:	055b      	lsls	r3, r3, #21
10016398:	0d5b      	lsrs	r3, r3, #21
1001639a:	2b01      	cmp	r3, #1
1001639c:	dc00      	bgt.n	100163a0 <__aeabi_dadd+0x2c8>
1001639e:	e09f      	b.n	100164e0 <__aeabi_dadd+0x408>
100163a0:	4b34      	ldr	r3, [pc, #208]	; (10016474 <__aeabi_dadd+0x39c>)
100163a2:	459c      	cmp	ip, r3
100163a4:	d100      	bne.n	100163a8 <__aeabi_dadd+0x2d0>
100163a6:	e0c3      	b.n	10016530 <__aeabi_dadd+0x458>
100163a8:	18aa      	adds	r2, r5, r2
100163aa:	1809      	adds	r1, r1, r0
100163ac:	42aa      	cmp	r2, r5
100163ae:	4180      	sbcs	r0, r0
100163b0:	4240      	negs	r0, r0
100163b2:	1841      	adds	r1, r0, r1
100163b4:	07cd      	lsls	r5, r1, #31
100163b6:	0852      	lsrs	r2, r2, #1
100163b8:	4315      	orrs	r5, r2
100163ba:	0849      	lsrs	r1, r1, #1
100163bc:	4664      	mov	r4, ip
100163be:	e6b4      	b.n	1001612a <__aeabi_dadd+0x52>
100163c0:	4b2c      	ldr	r3, [pc, #176]	; (10016474 <__aeabi_dadd+0x39c>)
100163c2:	429c      	cmp	r4, r3
100163c4:	d000      	beq.n	100163c8 <__aeabi_dadd+0x2f0>
100163c6:	e6ec      	b.n	100161a2 <__aeabi_dadd+0xca>
100163c8:	e6af      	b.n	1001612a <__aeabi_dadd+0x52>
100163ca:	0011      	movs	r1, r2
100163cc:	3c1f      	subs	r4, #31
100163ce:	40e1      	lsrs	r1, r4
100163d0:	000c      	movs	r4, r1
100163d2:	2b20      	cmp	r3, #32
100163d4:	d100      	bne.n	100163d8 <__aeabi_dadd+0x300>
100163d6:	e07f      	b.n	100164d8 <__aeabi_dadd+0x400>
100163d8:	2140      	movs	r1, #64	; 0x40
100163da:	1acb      	subs	r3, r1, r3
100163dc:	409a      	lsls	r2, r3
100163de:	4315      	orrs	r5, r2
100163e0:	1e6a      	subs	r2, r5, #1
100163e2:	4195      	sbcs	r5, r2
100163e4:	2100      	movs	r1, #0
100163e6:	4325      	orrs	r5, r4
100163e8:	2400      	movs	r4, #0
100163ea:	e72d      	b.n	10016248 <__aeabi_dadd+0x170>
100163ec:	0033      	movs	r3, r6
100163ee:	0007      	movs	r7, r0
100163f0:	3b20      	subs	r3, #32
100163f2:	40df      	lsrs	r7, r3
100163f4:	003b      	movs	r3, r7
100163f6:	2e20      	cmp	r6, #32
100163f8:	d070      	beq.n	100164dc <__aeabi_dadd+0x404>
100163fa:	2740      	movs	r7, #64	; 0x40
100163fc:	1bbe      	subs	r6, r7, r6
100163fe:	40b0      	lsls	r0, r6
10016400:	4302      	orrs	r2, r0
10016402:	1e50      	subs	r0, r2, #1
10016404:	4182      	sbcs	r2, r0
10016406:	4313      	orrs	r3, r2
10016408:	2200      	movs	r2, #0
1001640a:	e6e2      	b.n	100161d2 <__aeabi_dadd+0xfa>
1001640c:	2c00      	cmp	r4, #0
1001640e:	d04f      	beq.n	100164b0 <__aeabi_dadd+0x3d8>
10016410:	4c18      	ldr	r4, [pc, #96]	; (10016474 <__aeabi_dadd+0x39c>)
10016412:	45a4      	cmp	ip, r4
10016414:	d100      	bne.n	10016418 <__aeabi_dadd+0x340>
10016416:	e0ab      	b.n	10016570 <__aeabi_dadd+0x498>
10016418:	2480      	movs	r4, #128	; 0x80
1001641a:	0424      	lsls	r4, r4, #16
1001641c:	4276      	negs	r6, r6
1001641e:	4321      	orrs	r1, r4
10016420:	2e38      	cmp	r6, #56	; 0x38
10016422:	dd00      	ble.n	10016426 <__aeabi_dadd+0x34e>
10016424:	e0df      	b.n	100165e6 <__aeabi_dadd+0x50e>
10016426:	2e1f      	cmp	r6, #31
10016428:	dd00      	ble.n	1001642c <__aeabi_dadd+0x354>
1001642a:	e143      	b.n	100166b4 <__aeabi_dadd+0x5dc>
1001642c:	2720      	movs	r7, #32
1001642e:	1bbc      	subs	r4, r7, r6
10016430:	46a1      	mov	r9, r4
10016432:	000c      	movs	r4, r1
10016434:	464f      	mov	r7, r9
10016436:	40bc      	lsls	r4, r7
10016438:	46a0      	mov	r8, r4
1001643a:	002c      	movs	r4, r5
1001643c:	4647      	mov	r7, r8
1001643e:	40f4      	lsrs	r4, r6
10016440:	433c      	orrs	r4, r7
10016442:	464f      	mov	r7, r9
10016444:	40bd      	lsls	r5, r7
10016446:	1e6f      	subs	r7, r5, #1
10016448:	41bd      	sbcs	r5, r7
1001644a:	40f1      	lsrs	r1, r6
1001644c:	432c      	orrs	r4, r5
1001644e:	1b15      	subs	r5, r2, r4
10016450:	42aa      	cmp	r2, r5
10016452:	4192      	sbcs	r2, r2
10016454:	1a41      	subs	r1, r0, r1
10016456:	4252      	negs	r2, r2
10016458:	1a89      	subs	r1, r1, r2
1001645a:	4664      	mov	r4, ip
1001645c:	469a      	mov	sl, r3
1001645e:	e6bf      	b.n	100161e0 <__aeabi_dadd+0x108>
10016460:	4641      	mov	r1, r8
10016462:	4645      	mov	r5, r8
10016464:	4331      	orrs	r1, r6
10016466:	d000      	beq.n	1001646a <__aeabi_dadd+0x392>
10016468:	e6be      	b.n	100161e8 <__aeabi_dadd+0x110>
1001646a:	2600      	movs	r6, #0
1001646c:	2400      	movs	r4, #0
1001646e:	2500      	movs	r5, #0
10016470:	e6f2      	b.n	10016258 <__aeabi_dadd+0x180>
10016472:	46c0      	nop			; (mov r8, r8)
10016474:	000007ff 	.word	0x000007ff
10016478:	ff7fffff 	.word	0xff7fffff
1001647c:	800fffff 	.word	0x800fffff
10016480:	2b1f      	cmp	r3, #31
10016482:	dc59      	bgt.n	10016538 <__aeabi_dadd+0x460>
10016484:	2720      	movs	r7, #32
10016486:	1aff      	subs	r7, r7, r3
10016488:	46bc      	mov	ip, r7
1001648a:	0007      	movs	r7, r0
1001648c:	4663      	mov	r3, ip
1001648e:	409f      	lsls	r7, r3
10016490:	465b      	mov	r3, fp
10016492:	46b9      	mov	r9, r7
10016494:	0017      	movs	r7, r2
10016496:	40df      	lsrs	r7, r3
10016498:	46b8      	mov	r8, r7
1001649a:	464f      	mov	r7, r9
1001649c:	4643      	mov	r3, r8
1001649e:	431f      	orrs	r7, r3
100164a0:	4663      	mov	r3, ip
100164a2:	409a      	lsls	r2, r3
100164a4:	1e53      	subs	r3, r2, #1
100164a6:	419a      	sbcs	r2, r3
100164a8:	465b      	mov	r3, fp
100164aa:	433a      	orrs	r2, r7
100164ac:	40d8      	lsrs	r0, r3
100164ae:	e6f4      	b.n	1001629a <__aeabi_dadd+0x1c2>
100164b0:	000c      	movs	r4, r1
100164b2:	432c      	orrs	r4, r5
100164b4:	d05c      	beq.n	10016570 <__aeabi_dadd+0x498>
100164b6:	43f6      	mvns	r6, r6
100164b8:	2e00      	cmp	r6, #0
100164ba:	d155      	bne.n	10016568 <__aeabi_dadd+0x490>
100164bc:	1b55      	subs	r5, r2, r5
100164be:	42aa      	cmp	r2, r5
100164c0:	41a4      	sbcs	r4, r4
100164c2:	1a41      	subs	r1, r0, r1
100164c4:	4264      	negs	r4, r4
100164c6:	1b09      	subs	r1, r1, r4
100164c8:	469a      	mov	sl, r3
100164ca:	4664      	mov	r4, ip
100164cc:	e688      	b.n	100161e0 <__aeabi_dadd+0x108>
100164ce:	4f96      	ldr	r7, [pc, #600]	; (10016728 <__aeabi_dadd+0x650>)
100164d0:	42bc      	cmp	r4, r7
100164d2:	d000      	beq.n	100164d6 <__aeabi_dadd+0x3fe>
100164d4:	e6d8      	b.n	10016288 <__aeabi_dadd+0x1b0>
100164d6:	e628      	b.n	1001612a <__aeabi_dadd+0x52>
100164d8:	2200      	movs	r2, #0
100164da:	e780      	b.n	100163de <__aeabi_dadd+0x306>
100164dc:	2000      	movs	r0, #0
100164de:	e78f      	b.n	10016400 <__aeabi_dadd+0x328>
100164e0:	000b      	movs	r3, r1
100164e2:	432b      	orrs	r3, r5
100164e4:	2c00      	cmp	r4, #0
100164e6:	d000      	beq.n	100164ea <__aeabi_dadd+0x412>
100164e8:	e0c2      	b.n	10016670 <__aeabi_dadd+0x598>
100164ea:	2b00      	cmp	r3, #0
100164ec:	d100      	bne.n	100164f0 <__aeabi_dadd+0x418>
100164ee:	e101      	b.n	100166f4 <__aeabi_dadd+0x61c>
100164f0:	0003      	movs	r3, r0
100164f2:	4313      	orrs	r3, r2
100164f4:	d100      	bne.n	100164f8 <__aeabi_dadd+0x420>
100164f6:	e618      	b.n	1001612a <__aeabi_dadd+0x52>
100164f8:	18ab      	adds	r3, r5, r2
100164fa:	42ab      	cmp	r3, r5
100164fc:	41b6      	sbcs	r6, r6
100164fe:	1809      	adds	r1, r1, r0
10016500:	4276      	negs	r6, r6
10016502:	1871      	adds	r1, r6, r1
10016504:	020a      	lsls	r2, r1, #8
10016506:	d400      	bmi.n	1001650a <__aeabi_dadd+0x432>
10016508:	e109      	b.n	1001671e <__aeabi_dadd+0x646>
1001650a:	4a88      	ldr	r2, [pc, #544]	; (1001672c <__aeabi_dadd+0x654>)
1001650c:	001d      	movs	r5, r3
1001650e:	4011      	ands	r1, r2
10016510:	4664      	mov	r4, ip
10016512:	e60a      	b.n	1001612a <__aeabi_dadd+0x52>
10016514:	2c00      	cmp	r4, #0
10016516:	d15b      	bne.n	100165d0 <__aeabi_dadd+0x4f8>
10016518:	000e      	movs	r6, r1
1001651a:	432e      	orrs	r6, r5
1001651c:	d000      	beq.n	10016520 <__aeabi_dadd+0x448>
1001651e:	e08a      	b.n	10016636 <__aeabi_dadd+0x55e>
10016520:	0001      	movs	r1, r0
10016522:	4311      	orrs	r1, r2
10016524:	d100      	bne.n	10016528 <__aeabi_dadd+0x450>
10016526:	e0c2      	b.n	100166ae <__aeabi_dadd+0x5d6>
10016528:	0001      	movs	r1, r0
1001652a:	0015      	movs	r5, r2
1001652c:	469a      	mov	sl, r3
1001652e:	e5fc      	b.n	1001612a <__aeabi_dadd+0x52>
10016530:	4664      	mov	r4, ip
10016532:	2100      	movs	r1, #0
10016534:	2500      	movs	r5, #0
10016536:	e68f      	b.n	10016258 <__aeabi_dadd+0x180>
10016538:	2320      	movs	r3, #32
1001653a:	425b      	negs	r3, r3
1001653c:	469c      	mov	ip, r3
1001653e:	44dc      	add	ip, fp
10016540:	4663      	mov	r3, ip
10016542:	0007      	movs	r7, r0
10016544:	40df      	lsrs	r7, r3
10016546:	465b      	mov	r3, fp
10016548:	46bc      	mov	ip, r7
1001654a:	2b20      	cmp	r3, #32
1001654c:	d100      	bne.n	10016550 <__aeabi_dadd+0x478>
1001654e:	e0ac      	b.n	100166aa <__aeabi_dadd+0x5d2>
10016550:	2340      	movs	r3, #64	; 0x40
10016552:	465f      	mov	r7, fp
10016554:	1bdb      	subs	r3, r3, r7
10016556:	4098      	lsls	r0, r3
10016558:	4302      	orrs	r2, r0
1001655a:	1e50      	subs	r0, r2, #1
1001655c:	4182      	sbcs	r2, r0
1001655e:	4663      	mov	r3, ip
10016560:	4313      	orrs	r3, r2
10016562:	001a      	movs	r2, r3
10016564:	2000      	movs	r0, #0
10016566:	e698      	b.n	1001629a <__aeabi_dadd+0x1c2>
10016568:	4c6f      	ldr	r4, [pc, #444]	; (10016728 <__aeabi_dadd+0x650>)
1001656a:	45a4      	cmp	ip, r4
1001656c:	d000      	beq.n	10016570 <__aeabi_dadd+0x498>
1001656e:	e757      	b.n	10016420 <__aeabi_dadd+0x348>
10016570:	0001      	movs	r1, r0
10016572:	0015      	movs	r5, r2
10016574:	4664      	mov	r4, ip
10016576:	469a      	mov	sl, r3
10016578:	e5d7      	b.n	1001612a <__aeabi_dadd+0x52>
1001657a:	2c00      	cmp	r4, #0
1001657c:	d139      	bne.n	100165f2 <__aeabi_dadd+0x51a>
1001657e:	000c      	movs	r4, r1
10016580:	432c      	orrs	r4, r5
10016582:	d06e      	beq.n	10016662 <__aeabi_dadd+0x58a>
10016584:	43db      	mvns	r3, r3
10016586:	2b00      	cmp	r3, #0
10016588:	d01a      	beq.n	100165c0 <__aeabi_dadd+0x4e8>
1001658a:	4c67      	ldr	r4, [pc, #412]	; (10016728 <__aeabi_dadd+0x650>)
1001658c:	45a4      	cmp	ip, r4
1001658e:	d068      	beq.n	10016662 <__aeabi_dadd+0x58a>
10016590:	2b38      	cmp	r3, #56	; 0x38
10016592:	dd00      	ble.n	10016596 <__aeabi_dadd+0x4be>
10016594:	e0a4      	b.n	100166e0 <__aeabi_dadd+0x608>
10016596:	2b1f      	cmp	r3, #31
10016598:	dd00      	ble.n	1001659c <__aeabi_dadd+0x4c4>
1001659a:	e0ae      	b.n	100166fa <__aeabi_dadd+0x622>
1001659c:	2420      	movs	r4, #32
1001659e:	000f      	movs	r7, r1
100165a0:	1ae4      	subs	r4, r4, r3
100165a2:	40a7      	lsls	r7, r4
100165a4:	46b9      	mov	r9, r7
100165a6:	002f      	movs	r7, r5
100165a8:	40df      	lsrs	r7, r3
100165aa:	46b8      	mov	r8, r7
100165ac:	46a3      	mov	fp, r4
100165ae:	464f      	mov	r7, r9
100165b0:	4644      	mov	r4, r8
100165b2:	4327      	orrs	r7, r4
100165b4:	465c      	mov	r4, fp
100165b6:	40a5      	lsls	r5, r4
100165b8:	1e6c      	subs	r4, r5, #1
100165ba:	41a5      	sbcs	r5, r4
100165bc:	40d9      	lsrs	r1, r3
100165be:	433d      	orrs	r5, r7
100165c0:	18ad      	adds	r5, r5, r2
100165c2:	4295      	cmp	r5, r2
100165c4:	419b      	sbcs	r3, r3
100165c6:	1809      	adds	r1, r1, r0
100165c8:	425b      	negs	r3, r3
100165ca:	1859      	adds	r1, r3, r1
100165cc:	4664      	mov	r4, ip
100165ce:	e66b      	b.n	100162a8 <__aeabi_dadd+0x1d0>
100165d0:	000c      	movs	r4, r1
100165d2:	432c      	orrs	r4, r5
100165d4:	d115      	bne.n	10016602 <__aeabi_dadd+0x52a>
100165d6:	0001      	movs	r1, r0
100165d8:	4311      	orrs	r1, r2
100165da:	d07b      	beq.n	100166d4 <__aeabi_dadd+0x5fc>
100165dc:	0001      	movs	r1, r0
100165de:	0015      	movs	r5, r2
100165e0:	469a      	mov	sl, r3
100165e2:	4c51      	ldr	r4, [pc, #324]	; (10016728 <__aeabi_dadd+0x650>)
100165e4:	e5a1      	b.n	1001612a <__aeabi_dadd+0x52>
100165e6:	430d      	orrs	r5, r1
100165e8:	1e69      	subs	r1, r5, #1
100165ea:	418d      	sbcs	r5, r1
100165ec:	2100      	movs	r1, #0
100165ee:	b2ec      	uxtb	r4, r5
100165f0:	e72d      	b.n	1001644e <__aeabi_dadd+0x376>
100165f2:	4c4d      	ldr	r4, [pc, #308]	; (10016728 <__aeabi_dadd+0x650>)
100165f4:	45a4      	cmp	ip, r4
100165f6:	d034      	beq.n	10016662 <__aeabi_dadd+0x58a>
100165f8:	2480      	movs	r4, #128	; 0x80
100165fa:	0424      	lsls	r4, r4, #16
100165fc:	425b      	negs	r3, r3
100165fe:	4321      	orrs	r1, r4
10016600:	e7c6      	b.n	10016590 <__aeabi_dadd+0x4b8>
10016602:	0004      	movs	r4, r0
10016604:	4314      	orrs	r4, r2
10016606:	d04e      	beq.n	100166a6 <__aeabi_dadd+0x5ce>
10016608:	08ed      	lsrs	r5, r5, #3
1001660a:	074c      	lsls	r4, r1, #29
1001660c:	432c      	orrs	r4, r5
1001660e:	2580      	movs	r5, #128	; 0x80
10016610:	08c9      	lsrs	r1, r1, #3
10016612:	032d      	lsls	r5, r5, #12
10016614:	4229      	tst	r1, r5
10016616:	d008      	beq.n	1001662a <__aeabi_dadd+0x552>
10016618:	08c6      	lsrs	r6, r0, #3
1001661a:	422e      	tst	r6, r5
1001661c:	d105      	bne.n	1001662a <__aeabi_dadd+0x552>
1001661e:	08d2      	lsrs	r2, r2, #3
10016620:	0741      	lsls	r1, r0, #29
10016622:	4311      	orrs	r1, r2
10016624:	000c      	movs	r4, r1
10016626:	469a      	mov	sl, r3
10016628:	0031      	movs	r1, r6
1001662a:	0f62      	lsrs	r2, r4, #29
1001662c:	00c9      	lsls	r1, r1, #3
1001662e:	00e5      	lsls	r5, r4, #3
10016630:	4311      	orrs	r1, r2
10016632:	4c3d      	ldr	r4, [pc, #244]	; (10016728 <__aeabi_dadd+0x650>)
10016634:	e579      	b.n	1001612a <__aeabi_dadd+0x52>
10016636:	0006      	movs	r6, r0
10016638:	4316      	orrs	r6, r2
1001663a:	d100      	bne.n	1001663e <__aeabi_dadd+0x566>
1001663c:	e575      	b.n	1001612a <__aeabi_dadd+0x52>
1001663e:	1aae      	subs	r6, r5, r2
10016640:	46b0      	mov	r8, r6
10016642:	4545      	cmp	r5, r8
10016644:	41bf      	sbcs	r7, r7
10016646:	1a0e      	subs	r6, r1, r0
10016648:	427f      	negs	r7, r7
1001664a:	1bf6      	subs	r6, r6, r7
1001664c:	0237      	lsls	r7, r6, #8
1001664e:	d400      	bmi.n	10016652 <__aeabi_dadd+0x57a>
10016650:	e5f4      	b.n	1001623c <__aeabi_dadd+0x164>
10016652:	1b55      	subs	r5, r2, r5
10016654:	42aa      	cmp	r2, r5
10016656:	41b6      	sbcs	r6, r6
10016658:	1a41      	subs	r1, r0, r1
1001665a:	4276      	negs	r6, r6
1001665c:	1b89      	subs	r1, r1, r6
1001665e:	469a      	mov	sl, r3
10016660:	e563      	b.n	1001612a <__aeabi_dadd+0x52>
10016662:	0001      	movs	r1, r0
10016664:	0015      	movs	r5, r2
10016666:	4664      	mov	r4, ip
10016668:	e55f      	b.n	1001612a <__aeabi_dadd+0x52>
1001666a:	2200      	movs	r2, #0
1001666c:	2500      	movs	r5, #0
1001666e:	e57b      	b.n	10016168 <__aeabi_dadd+0x90>
10016670:	2b00      	cmp	r3, #0
10016672:	d03b      	beq.n	100166ec <__aeabi_dadd+0x614>
10016674:	0003      	movs	r3, r0
10016676:	4313      	orrs	r3, r2
10016678:	d015      	beq.n	100166a6 <__aeabi_dadd+0x5ce>
1001667a:	08ed      	lsrs	r5, r5, #3
1001667c:	074b      	lsls	r3, r1, #29
1001667e:	432b      	orrs	r3, r5
10016680:	2580      	movs	r5, #128	; 0x80
10016682:	08c9      	lsrs	r1, r1, #3
10016684:	032d      	lsls	r5, r5, #12
10016686:	4229      	tst	r1, r5
10016688:	d007      	beq.n	1001669a <__aeabi_dadd+0x5c2>
1001668a:	08c4      	lsrs	r4, r0, #3
1001668c:	422c      	tst	r4, r5
1001668e:	d104      	bne.n	1001669a <__aeabi_dadd+0x5c2>
10016690:	0741      	lsls	r1, r0, #29
10016692:	000b      	movs	r3, r1
10016694:	0021      	movs	r1, r4
10016696:	08d2      	lsrs	r2, r2, #3
10016698:	4313      	orrs	r3, r2
1001669a:	00c9      	lsls	r1, r1, #3
1001669c:	0f5a      	lsrs	r2, r3, #29
1001669e:	4311      	orrs	r1, r2
100166a0:	00dd      	lsls	r5, r3, #3
100166a2:	4c21      	ldr	r4, [pc, #132]	; (10016728 <__aeabi_dadd+0x650>)
100166a4:	e541      	b.n	1001612a <__aeabi_dadd+0x52>
100166a6:	4c20      	ldr	r4, [pc, #128]	; (10016728 <__aeabi_dadd+0x650>)
100166a8:	e53f      	b.n	1001612a <__aeabi_dadd+0x52>
100166aa:	2000      	movs	r0, #0
100166ac:	e754      	b.n	10016558 <__aeabi_dadd+0x480>
100166ae:	2600      	movs	r6, #0
100166b0:	2500      	movs	r5, #0
100166b2:	e5d1      	b.n	10016258 <__aeabi_dadd+0x180>
100166b4:	0034      	movs	r4, r6
100166b6:	000f      	movs	r7, r1
100166b8:	3c20      	subs	r4, #32
100166ba:	40e7      	lsrs	r7, r4
100166bc:	003c      	movs	r4, r7
100166be:	2e20      	cmp	r6, #32
100166c0:	d02b      	beq.n	1001671a <__aeabi_dadd+0x642>
100166c2:	2740      	movs	r7, #64	; 0x40
100166c4:	1bbe      	subs	r6, r7, r6
100166c6:	40b1      	lsls	r1, r6
100166c8:	430d      	orrs	r5, r1
100166ca:	1e69      	subs	r1, r5, #1
100166cc:	418d      	sbcs	r5, r1
100166ce:	2100      	movs	r1, #0
100166d0:	432c      	orrs	r4, r5
100166d2:	e6bc      	b.n	1001644e <__aeabi_dadd+0x376>
100166d4:	2180      	movs	r1, #128	; 0x80
100166d6:	2600      	movs	r6, #0
100166d8:	0309      	lsls	r1, r1, #12
100166da:	4c13      	ldr	r4, [pc, #76]	; (10016728 <__aeabi_dadd+0x650>)
100166dc:	2500      	movs	r5, #0
100166de:	e5bb      	b.n	10016258 <__aeabi_dadd+0x180>
100166e0:	430d      	orrs	r5, r1
100166e2:	1e69      	subs	r1, r5, #1
100166e4:	418d      	sbcs	r5, r1
100166e6:	2100      	movs	r1, #0
100166e8:	b2ed      	uxtb	r5, r5
100166ea:	e769      	b.n	100165c0 <__aeabi_dadd+0x4e8>
100166ec:	0001      	movs	r1, r0
100166ee:	0015      	movs	r5, r2
100166f0:	4c0d      	ldr	r4, [pc, #52]	; (10016728 <__aeabi_dadd+0x650>)
100166f2:	e51a      	b.n	1001612a <__aeabi_dadd+0x52>
100166f4:	0001      	movs	r1, r0
100166f6:	0015      	movs	r5, r2
100166f8:	e517      	b.n	1001612a <__aeabi_dadd+0x52>
100166fa:	001c      	movs	r4, r3
100166fc:	000f      	movs	r7, r1
100166fe:	3c20      	subs	r4, #32
10016700:	40e7      	lsrs	r7, r4
10016702:	003c      	movs	r4, r7
10016704:	2b20      	cmp	r3, #32
10016706:	d00c      	beq.n	10016722 <__aeabi_dadd+0x64a>
10016708:	2740      	movs	r7, #64	; 0x40
1001670a:	1afb      	subs	r3, r7, r3
1001670c:	4099      	lsls	r1, r3
1001670e:	430d      	orrs	r5, r1
10016710:	1e69      	subs	r1, r5, #1
10016712:	418d      	sbcs	r5, r1
10016714:	2100      	movs	r1, #0
10016716:	4325      	orrs	r5, r4
10016718:	e752      	b.n	100165c0 <__aeabi_dadd+0x4e8>
1001671a:	2100      	movs	r1, #0
1001671c:	e7d4      	b.n	100166c8 <__aeabi_dadd+0x5f0>
1001671e:	001d      	movs	r5, r3
10016720:	e592      	b.n	10016248 <__aeabi_dadd+0x170>
10016722:	2100      	movs	r1, #0
10016724:	e7f3      	b.n	1001670e <__aeabi_dadd+0x636>
10016726:	46c0      	nop			; (mov r8, r8)
10016728:	000007ff 	.word	0x000007ff
1001672c:	ff7fffff 	.word	0xff7fffff

10016730 <__aeabi_ddiv>:
10016730:	b5f0      	push	{r4, r5, r6, r7, lr}
10016732:	4656      	mov	r6, sl
10016734:	464d      	mov	r5, r9
10016736:	4644      	mov	r4, r8
10016738:	465f      	mov	r7, fp
1001673a:	b4f0      	push	{r4, r5, r6, r7}
1001673c:	001d      	movs	r5, r3
1001673e:	030e      	lsls	r6, r1, #12
10016740:	004c      	lsls	r4, r1, #1
10016742:	0fcb      	lsrs	r3, r1, #31
10016744:	b087      	sub	sp, #28
10016746:	0007      	movs	r7, r0
10016748:	4692      	mov	sl, r2
1001674a:	4681      	mov	r9, r0
1001674c:	0b36      	lsrs	r6, r6, #12
1001674e:	0d64      	lsrs	r4, r4, #21
10016750:	4698      	mov	r8, r3
10016752:	d06a      	beq.n	1001682a <__aeabi_ddiv+0xfa>
10016754:	4b6d      	ldr	r3, [pc, #436]	; (1001690c <__aeabi_ddiv+0x1dc>)
10016756:	429c      	cmp	r4, r3
10016758:	d035      	beq.n	100167c6 <__aeabi_ddiv+0x96>
1001675a:	2280      	movs	r2, #128	; 0x80
1001675c:	0f43      	lsrs	r3, r0, #29
1001675e:	0412      	lsls	r2, r2, #16
10016760:	4313      	orrs	r3, r2
10016762:	00f6      	lsls	r6, r6, #3
10016764:	431e      	orrs	r6, r3
10016766:	00c3      	lsls	r3, r0, #3
10016768:	4699      	mov	r9, r3
1001676a:	4b69      	ldr	r3, [pc, #420]	; (10016910 <__aeabi_ddiv+0x1e0>)
1001676c:	2700      	movs	r7, #0
1001676e:	469c      	mov	ip, r3
10016770:	2300      	movs	r3, #0
10016772:	4464      	add	r4, ip
10016774:	9302      	str	r3, [sp, #8]
10016776:	032b      	lsls	r3, r5, #12
10016778:	0068      	lsls	r0, r5, #1
1001677a:	0b1b      	lsrs	r3, r3, #12
1001677c:	0fed      	lsrs	r5, r5, #31
1001677e:	4651      	mov	r1, sl
10016780:	469b      	mov	fp, r3
10016782:	0d40      	lsrs	r0, r0, #21
10016784:	9500      	str	r5, [sp, #0]
10016786:	d100      	bne.n	1001678a <__aeabi_ddiv+0x5a>
10016788:	e078      	b.n	1001687c <__aeabi_ddiv+0x14c>
1001678a:	4b60      	ldr	r3, [pc, #384]	; (1001690c <__aeabi_ddiv+0x1dc>)
1001678c:	4298      	cmp	r0, r3
1001678e:	d06c      	beq.n	1001686a <__aeabi_ddiv+0x13a>
10016790:	465b      	mov	r3, fp
10016792:	00da      	lsls	r2, r3, #3
10016794:	0f4b      	lsrs	r3, r1, #29
10016796:	2180      	movs	r1, #128	; 0x80
10016798:	0409      	lsls	r1, r1, #16
1001679a:	430b      	orrs	r3, r1
1001679c:	4313      	orrs	r3, r2
1001679e:	469b      	mov	fp, r3
100167a0:	4653      	mov	r3, sl
100167a2:	00d9      	lsls	r1, r3, #3
100167a4:	4b5a      	ldr	r3, [pc, #360]	; (10016910 <__aeabi_ddiv+0x1e0>)
100167a6:	469c      	mov	ip, r3
100167a8:	2300      	movs	r3, #0
100167aa:	4460      	add	r0, ip
100167ac:	4642      	mov	r2, r8
100167ae:	1a20      	subs	r0, r4, r0
100167b0:	406a      	eors	r2, r5
100167b2:	4692      	mov	sl, r2
100167b4:	9001      	str	r0, [sp, #4]
100167b6:	431f      	orrs	r7, r3
100167b8:	2f0f      	cmp	r7, #15
100167ba:	d900      	bls.n	100167be <__aeabi_ddiv+0x8e>
100167bc:	e0b0      	b.n	10016920 <__aeabi_ddiv+0x1f0>
100167be:	4855      	ldr	r0, [pc, #340]	; (10016914 <__aeabi_ddiv+0x1e4>)
100167c0:	00bf      	lsls	r7, r7, #2
100167c2:	59c0      	ldr	r0, [r0, r7]
100167c4:	4687      	mov	pc, r0
100167c6:	4337      	orrs	r7, r6
100167c8:	d000      	beq.n	100167cc <__aeabi_ddiv+0x9c>
100167ca:	e088      	b.n	100168de <__aeabi_ddiv+0x1ae>
100167cc:	2300      	movs	r3, #0
100167ce:	4699      	mov	r9, r3
100167d0:	3302      	adds	r3, #2
100167d2:	2708      	movs	r7, #8
100167d4:	2600      	movs	r6, #0
100167d6:	9302      	str	r3, [sp, #8]
100167d8:	e7cd      	b.n	10016776 <__aeabi_ddiv+0x46>
100167da:	4643      	mov	r3, r8
100167dc:	46b3      	mov	fp, r6
100167de:	4649      	mov	r1, r9
100167e0:	9300      	str	r3, [sp, #0]
100167e2:	9b02      	ldr	r3, [sp, #8]
100167e4:	9a00      	ldr	r2, [sp, #0]
100167e6:	4692      	mov	sl, r2
100167e8:	2b02      	cmp	r3, #2
100167ea:	d000      	beq.n	100167ee <__aeabi_ddiv+0xbe>
100167ec:	e1bf      	b.n	10016b6e <__aeabi_ddiv+0x43e>
100167ee:	2100      	movs	r1, #0
100167f0:	4653      	mov	r3, sl
100167f2:	2201      	movs	r2, #1
100167f4:	2600      	movs	r6, #0
100167f6:	4689      	mov	r9, r1
100167f8:	401a      	ands	r2, r3
100167fa:	4b44      	ldr	r3, [pc, #272]	; (1001690c <__aeabi_ddiv+0x1dc>)
100167fc:	2100      	movs	r1, #0
100167fe:	0336      	lsls	r6, r6, #12
10016800:	0d0c      	lsrs	r4, r1, #20
10016802:	0524      	lsls	r4, r4, #20
10016804:	0b36      	lsrs	r6, r6, #12
10016806:	4326      	orrs	r6, r4
10016808:	4c43      	ldr	r4, [pc, #268]	; (10016918 <__aeabi_ddiv+0x1e8>)
1001680a:	051b      	lsls	r3, r3, #20
1001680c:	4026      	ands	r6, r4
1001680e:	431e      	orrs	r6, r3
10016810:	0076      	lsls	r6, r6, #1
10016812:	07d2      	lsls	r2, r2, #31
10016814:	0876      	lsrs	r6, r6, #1
10016816:	4316      	orrs	r6, r2
10016818:	4648      	mov	r0, r9
1001681a:	0031      	movs	r1, r6
1001681c:	b007      	add	sp, #28
1001681e:	bc3c      	pop	{r2, r3, r4, r5}
10016820:	4690      	mov	r8, r2
10016822:	4699      	mov	r9, r3
10016824:	46a2      	mov	sl, r4
10016826:	46ab      	mov	fp, r5
10016828:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001682a:	0033      	movs	r3, r6
1001682c:	4303      	orrs	r3, r0
1001682e:	d04f      	beq.n	100168d0 <__aeabi_ddiv+0x1a0>
10016830:	2e00      	cmp	r6, #0
10016832:	d100      	bne.n	10016836 <__aeabi_ddiv+0x106>
10016834:	e1bc      	b.n	10016bb0 <__aeabi_ddiv+0x480>
10016836:	0030      	movs	r0, r6
10016838:	f001 fafc 	bl	10017e34 <__clzsi2>
1001683c:	0003      	movs	r3, r0
1001683e:	3b0b      	subs	r3, #11
10016840:	2b1c      	cmp	r3, #28
10016842:	dd00      	ble.n	10016846 <__aeabi_ddiv+0x116>
10016844:	e1ad      	b.n	10016ba2 <__aeabi_ddiv+0x472>
10016846:	221d      	movs	r2, #29
10016848:	0001      	movs	r1, r0
1001684a:	1ad3      	subs	r3, r2, r3
1001684c:	3908      	subs	r1, #8
1001684e:	003a      	movs	r2, r7
10016850:	408f      	lsls	r7, r1
10016852:	408e      	lsls	r6, r1
10016854:	40da      	lsrs	r2, r3
10016856:	46b9      	mov	r9, r7
10016858:	4316      	orrs	r6, r2
1001685a:	4b30      	ldr	r3, [pc, #192]	; (1001691c <__aeabi_ddiv+0x1ec>)
1001685c:	2700      	movs	r7, #0
1001685e:	469c      	mov	ip, r3
10016860:	2300      	movs	r3, #0
10016862:	4460      	add	r0, ip
10016864:	4244      	negs	r4, r0
10016866:	9302      	str	r3, [sp, #8]
10016868:	e785      	b.n	10016776 <__aeabi_ddiv+0x46>
1001686a:	4653      	mov	r3, sl
1001686c:	465a      	mov	r2, fp
1001686e:	4313      	orrs	r3, r2
10016870:	d12c      	bne.n	100168cc <__aeabi_ddiv+0x19c>
10016872:	2300      	movs	r3, #0
10016874:	2100      	movs	r1, #0
10016876:	469b      	mov	fp, r3
10016878:	3302      	adds	r3, #2
1001687a:	e797      	b.n	100167ac <__aeabi_ddiv+0x7c>
1001687c:	430b      	orrs	r3, r1
1001687e:	d020      	beq.n	100168c2 <__aeabi_ddiv+0x192>
10016880:	465b      	mov	r3, fp
10016882:	2b00      	cmp	r3, #0
10016884:	d100      	bne.n	10016888 <__aeabi_ddiv+0x158>
10016886:	e19e      	b.n	10016bc6 <__aeabi_ddiv+0x496>
10016888:	4658      	mov	r0, fp
1001688a:	f001 fad3 	bl	10017e34 <__clzsi2>
1001688e:	0003      	movs	r3, r0
10016890:	3b0b      	subs	r3, #11
10016892:	2b1c      	cmp	r3, #28
10016894:	dd00      	ble.n	10016898 <__aeabi_ddiv+0x168>
10016896:	e18f      	b.n	10016bb8 <__aeabi_ddiv+0x488>
10016898:	0002      	movs	r2, r0
1001689a:	4659      	mov	r1, fp
1001689c:	3a08      	subs	r2, #8
1001689e:	4091      	lsls	r1, r2
100168a0:	468b      	mov	fp, r1
100168a2:	211d      	movs	r1, #29
100168a4:	1acb      	subs	r3, r1, r3
100168a6:	4651      	mov	r1, sl
100168a8:	40d9      	lsrs	r1, r3
100168aa:	000b      	movs	r3, r1
100168ac:	4659      	mov	r1, fp
100168ae:	430b      	orrs	r3, r1
100168b0:	4651      	mov	r1, sl
100168b2:	469b      	mov	fp, r3
100168b4:	4091      	lsls	r1, r2
100168b6:	4b19      	ldr	r3, [pc, #100]	; (1001691c <__aeabi_ddiv+0x1ec>)
100168b8:	469c      	mov	ip, r3
100168ba:	4460      	add	r0, ip
100168bc:	4240      	negs	r0, r0
100168be:	2300      	movs	r3, #0
100168c0:	e774      	b.n	100167ac <__aeabi_ddiv+0x7c>
100168c2:	2300      	movs	r3, #0
100168c4:	2100      	movs	r1, #0
100168c6:	469b      	mov	fp, r3
100168c8:	3301      	adds	r3, #1
100168ca:	e76f      	b.n	100167ac <__aeabi_ddiv+0x7c>
100168cc:	2303      	movs	r3, #3
100168ce:	e76d      	b.n	100167ac <__aeabi_ddiv+0x7c>
100168d0:	2300      	movs	r3, #0
100168d2:	4699      	mov	r9, r3
100168d4:	3301      	adds	r3, #1
100168d6:	2704      	movs	r7, #4
100168d8:	2600      	movs	r6, #0
100168da:	9302      	str	r3, [sp, #8]
100168dc:	e74b      	b.n	10016776 <__aeabi_ddiv+0x46>
100168de:	2303      	movs	r3, #3
100168e0:	270c      	movs	r7, #12
100168e2:	9302      	str	r3, [sp, #8]
100168e4:	e747      	b.n	10016776 <__aeabi_ddiv+0x46>
100168e6:	2201      	movs	r2, #1
100168e8:	1ad5      	subs	r5, r2, r3
100168ea:	2d38      	cmp	r5, #56	; 0x38
100168ec:	dc00      	bgt.n	100168f0 <__aeabi_ddiv+0x1c0>
100168ee:	e1b0      	b.n	10016c52 <__aeabi_ddiv+0x522>
100168f0:	4653      	mov	r3, sl
100168f2:	401a      	ands	r2, r3
100168f4:	2100      	movs	r1, #0
100168f6:	2300      	movs	r3, #0
100168f8:	2600      	movs	r6, #0
100168fa:	4689      	mov	r9, r1
100168fc:	e77e      	b.n	100167fc <__aeabi_ddiv+0xcc>
100168fe:	2300      	movs	r3, #0
10016900:	2680      	movs	r6, #128	; 0x80
10016902:	4699      	mov	r9, r3
10016904:	2200      	movs	r2, #0
10016906:	0336      	lsls	r6, r6, #12
10016908:	4b00      	ldr	r3, [pc, #0]	; (1001690c <__aeabi_ddiv+0x1dc>)
1001690a:	e777      	b.n	100167fc <__aeabi_ddiv+0xcc>
1001690c:	000007ff 	.word	0x000007ff
10016910:	fffffc01 	.word	0xfffffc01
10016914:	1001b264 	.word	0x1001b264
10016918:	800fffff 	.word	0x800fffff
1001691c:	000003f3 	.word	0x000003f3
10016920:	455e      	cmp	r6, fp
10016922:	d900      	bls.n	10016926 <__aeabi_ddiv+0x1f6>
10016924:	e172      	b.n	10016c0c <__aeabi_ddiv+0x4dc>
10016926:	d100      	bne.n	1001692a <__aeabi_ddiv+0x1fa>
10016928:	e16d      	b.n	10016c06 <__aeabi_ddiv+0x4d6>
1001692a:	9b01      	ldr	r3, [sp, #4]
1001692c:	464d      	mov	r5, r9
1001692e:	3b01      	subs	r3, #1
10016930:	9301      	str	r3, [sp, #4]
10016932:	2300      	movs	r3, #0
10016934:	0034      	movs	r4, r6
10016936:	9302      	str	r3, [sp, #8]
10016938:	465b      	mov	r3, fp
1001693a:	021e      	lsls	r6, r3, #8
1001693c:	0e0b      	lsrs	r3, r1, #24
1001693e:	431e      	orrs	r6, r3
10016940:	020b      	lsls	r3, r1, #8
10016942:	9303      	str	r3, [sp, #12]
10016944:	0c33      	lsrs	r3, r6, #16
10016946:	4699      	mov	r9, r3
10016948:	0433      	lsls	r3, r6, #16
1001694a:	0c1b      	lsrs	r3, r3, #16
1001694c:	4649      	mov	r1, r9
1001694e:	0020      	movs	r0, r4
10016950:	9300      	str	r3, [sp, #0]
10016952:	f7fe fa2f 	bl	10014db4 <__aeabi_uidiv>
10016956:	9b00      	ldr	r3, [sp, #0]
10016958:	0037      	movs	r7, r6
1001695a:	4343      	muls	r3, r0
1001695c:	0006      	movs	r6, r0
1001695e:	4649      	mov	r1, r9
10016960:	0020      	movs	r0, r4
10016962:	4698      	mov	r8, r3
10016964:	f7fe faac 	bl	10014ec0 <__aeabi_uidivmod>
10016968:	0c2c      	lsrs	r4, r5, #16
1001696a:	0409      	lsls	r1, r1, #16
1001696c:	430c      	orrs	r4, r1
1001696e:	45a0      	cmp	r8, r4
10016970:	d909      	bls.n	10016986 <__aeabi_ddiv+0x256>
10016972:	19e4      	adds	r4, r4, r7
10016974:	1e73      	subs	r3, r6, #1
10016976:	42a7      	cmp	r7, r4
10016978:	d900      	bls.n	1001697c <__aeabi_ddiv+0x24c>
1001697a:	e15c      	b.n	10016c36 <__aeabi_ddiv+0x506>
1001697c:	45a0      	cmp	r8, r4
1001697e:	d800      	bhi.n	10016982 <__aeabi_ddiv+0x252>
10016980:	e159      	b.n	10016c36 <__aeabi_ddiv+0x506>
10016982:	3e02      	subs	r6, #2
10016984:	19e4      	adds	r4, r4, r7
10016986:	4643      	mov	r3, r8
10016988:	1ae4      	subs	r4, r4, r3
1001698a:	4649      	mov	r1, r9
1001698c:	0020      	movs	r0, r4
1001698e:	f7fe fa11 	bl	10014db4 <__aeabi_uidiv>
10016992:	0003      	movs	r3, r0
10016994:	9a00      	ldr	r2, [sp, #0]
10016996:	4680      	mov	r8, r0
10016998:	4353      	muls	r3, r2
1001699a:	4649      	mov	r1, r9
1001699c:	0020      	movs	r0, r4
1001699e:	469b      	mov	fp, r3
100169a0:	f7fe fa8e 	bl	10014ec0 <__aeabi_uidivmod>
100169a4:	042a      	lsls	r2, r5, #16
100169a6:	0409      	lsls	r1, r1, #16
100169a8:	0c12      	lsrs	r2, r2, #16
100169aa:	430a      	orrs	r2, r1
100169ac:	4593      	cmp	fp, r2
100169ae:	d90d      	bls.n	100169cc <__aeabi_ddiv+0x29c>
100169b0:	4643      	mov	r3, r8
100169b2:	19d2      	adds	r2, r2, r7
100169b4:	3b01      	subs	r3, #1
100169b6:	4297      	cmp	r7, r2
100169b8:	d900      	bls.n	100169bc <__aeabi_ddiv+0x28c>
100169ba:	e13a      	b.n	10016c32 <__aeabi_ddiv+0x502>
100169bc:	4593      	cmp	fp, r2
100169be:	d800      	bhi.n	100169c2 <__aeabi_ddiv+0x292>
100169c0:	e137      	b.n	10016c32 <__aeabi_ddiv+0x502>
100169c2:	2302      	movs	r3, #2
100169c4:	425b      	negs	r3, r3
100169c6:	469c      	mov	ip, r3
100169c8:	19d2      	adds	r2, r2, r7
100169ca:	44e0      	add	r8, ip
100169cc:	465b      	mov	r3, fp
100169ce:	1ad2      	subs	r2, r2, r3
100169d0:	4643      	mov	r3, r8
100169d2:	0436      	lsls	r6, r6, #16
100169d4:	4333      	orrs	r3, r6
100169d6:	469b      	mov	fp, r3
100169d8:	9903      	ldr	r1, [sp, #12]
100169da:	0c18      	lsrs	r0, r3, #16
100169dc:	0c0b      	lsrs	r3, r1, #16
100169de:	001d      	movs	r5, r3
100169e0:	9305      	str	r3, [sp, #20]
100169e2:	0409      	lsls	r1, r1, #16
100169e4:	465b      	mov	r3, fp
100169e6:	0c09      	lsrs	r1, r1, #16
100169e8:	000c      	movs	r4, r1
100169ea:	041b      	lsls	r3, r3, #16
100169ec:	0c1b      	lsrs	r3, r3, #16
100169ee:	4344      	muls	r4, r0
100169f0:	9104      	str	r1, [sp, #16]
100169f2:	4359      	muls	r1, r3
100169f4:	436b      	muls	r3, r5
100169f6:	4368      	muls	r0, r5
100169f8:	191b      	adds	r3, r3, r4
100169fa:	0c0d      	lsrs	r5, r1, #16
100169fc:	18eb      	adds	r3, r5, r3
100169fe:	429c      	cmp	r4, r3
10016a00:	d903      	bls.n	10016a0a <__aeabi_ddiv+0x2da>
10016a02:	2480      	movs	r4, #128	; 0x80
10016a04:	0264      	lsls	r4, r4, #9
10016a06:	46a4      	mov	ip, r4
10016a08:	4460      	add	r0, ip
10016a0a:	0c1c      	lsrs	r4, r3, #16
10016a0c:	0409      	lsls	r1, r1, #16
10016a0e:	041b      	lsls	r3, r3, #16
10016a10:	0c09      	lsrs	r1, r1, #16
10016a12:	1820      	adds	r0, r4, r0
10016a14:	185d      	adds	r5, r3, r1
10016a16:	4282      	cmp	r2, r0
10016a18:	d200      	bcs.n	10016a1c <__aeabi_ddiv+0x2ec>
10016a1a:	e0de      	b.n	10016bda <__aeabi_ddiv+0x4aa>
10016a1c:	d100      	bne.n	10016a20 <__aeabi_ddiv+0x2f0>
10016a1e:	e0d7      	b.n	10016bd0 <__aeabi_ddiv+0x4a0>
10016a20:	1a16      	subs	r6, r2, r0
10016a22:	9b02      	ldr	r3, [sp, #8]
10016a24:	469c      	mov	ip, r3
10016a26:	1b5d      	subs	r5, r3, r5
10016a28:	45ac      	cmp	ip, r5
10016a2a:	419b      	sbcs	r3, r3
10016a2c:	425b      	negs	r3, r3
10016a2e:	1af6      	subs	r6, r6, r3
10016a30:	42b7      	cmp	r7, r6
10016a32:	d100      	bne.n	10016a36 <__aeabi_ddiv+0x306>
10016a34:	e106      	b.n	10016c44 <__aeabi_ddiv+0x514>
10016a36:	4649      	mov	r1, r9
10016a38:	0030      	movs	r0, r6
10016a3a:	f7fe f9bb 	bl	10014db4 <__aeabi_uidiv>
10016a3e:	9b00      	ldr	r3, [sp, #0]
10016a40:	0004      	movs	r4, r0
10016a42:	4343      	muls	r3, r0
10016a44:	4649      	mov	r1, r9
10016a46:	0030      	movs	r0, r6
10016a48:	4698      	mov	r8, r3
10016a4a:	f7fe fa39 	bl	10014ec0 <__aeabi_uidivmod>
10016a4e:	0c2e      	lsrs	r6, r5, #16
10016a50:	0409      	lsls	r1, r1, #16
10016a52:	430e      	orrs	r6, r1
10016a54:	45b0      	cmp	r8, r6
10016a56:	d909      	bls.n	10016a6c <__aeabi_ddiv+0x33c>
10016a58:	19f6      	adds	r6, r6, r7
10016a5a:	1e63      	subs	r3, r4, #1
10016a5c:	42b7      	cmp	r7, r6
10016a5e:	d900      	bls.n	10016a62 <__aeabi_ddiv+0x332>
10016a60:	e0f3      	b.n	10016c4a <__aeabi_ddiv+0x51a>
10016a62:	45b0      	cmp	r8, r6
10016a64:	d800      	bhi.n	10016a68 <__aeabi_ddiv+0x338>
10016a66:	e0f0      	b.n	10016c4a <__aeabi_ddiv+0x51a>
10016a68:	3c02      	subs	r4, #2
10016a6a:	19f6      	adds	r6, r6, r7
10016a6c:	4643      	mov	r3, r8
10016a6e:	1af3      	subs	r3, r6, r3
10016a70:	4649      	mov	r1, r9
10016a72:	0018      	movs	r0, r3
10016a74:	9302      	str	r3, [sp, #8]
10016a76:	f7fe f99d 	bl	10014db4 <__aeabi_uidiv>
10016a7a:	9b00      	ldr	r3, [sp, #0]
10016a7c:	0006      	movs	r6, r0
10016a7e:	4343      	muls	r3, r0
10016a80:	4649      	mov	r1, r9
10016a82:	9802      	ldr	r0, [sp, #8]
10016a84:	4698      	mov	r8, r3
10016a86:	f7fe fa1b 	bl	10014ec0 <__aeabi_uidivmod>
10016a8a:	042d      	lsls	r5, r5, #16
10016a8c:	0409      	lsls	r1, r1, #16
10016a8e:	0c2d      	lsrs	r5, r5, #16
10016a90:	430d      	orrs	r5, r1
10016a92:	45a8      	cmp	r8, r5
10016a94:	d909      	bls.n	10016aaa <__aeabi_ddiv+0x37a>
10016a96:	19ed      	adds	r5, r5, r7
10016a98:	1e73      	subs	r3, r6, #1
10016a9a:	42af      	cmp	r7, r5
10016a9c:	d900      	bls.n	10016aa0 <__aeabi_ddiv+0x370>
10016a9e:	e0d6      	b.n	10016c4e <__aeabi_ddiv+0x51e>
10016aa0:	45a8      	cmp	r8, r5
10016aa2:	d800      	bhi.n	10016aa6 <__aeabi_ddiv+0x376>
10016aa4:	e0d3      	b.n	10016c4e <__aeabi_ddiv+0x51e>
10016aa6:	3e02      	subs	r6, #2
10016aa8:	19ed      	adds	r5, r5, r7
10016aaa:	0424      	lsls	r4, r4, #16
10016aac:	0021      	movs	r1, r4
10016aae:	4643      	mov	r3, r8
10016ab0:	4331      	orrs	r1, r6
10016ab2:	9e04      	ldr	r6, [sp, #16]
10016ab4:	9a05      	ldr	r2, [sp, #20]
10016ab6:	0030      	movs	r0, r6
10016ab8:	1aed      	subs	r5, r5, r3
10016aba:	040b      	lsls	r3, r1, #16
10016abc:	0c0c      	lsrs	r4, r1, #16
10016abe:	0c1b      	lsrs	r3, r3, #16
10016ac0:	4358      	muls	r0, r3
10016ac2:	4366      	muls	r6, r4
10016ac4:	4353      	muls	r3, r2
10016ac6:	4354      	muls	r4, r2
10016ac8:	199a      	adds	r2, r3, r6
10016aca:	0c03      	lsrs	r3, r0, #16
10016acc:	189b      	adds	r3, r3, r2
10016ace:	429e      	cmp	r6, r3
10016ad0:	d903      	bls.n	10016ada <__aeabi_ddiv+0x3aa>
10016ad2:	2280      	movs	r2, #128	; 0x80
10016ad4:	0252      	lsls	r2, r2, #9
10016ad6:	4694      	mov	ip, r2
10016ad8:	4464      	add	r4, ip
10016ada:	0c1a      	lsrs	r2, r3, #16
10016adc:	0400      	lsls	r0, r0, #16
10016ade:	041b      	lsls	r3, r3, #16
10016ae0:	0c00      	lsrs	r0, r0, #16
10016ae2:	1914      	adds	r4, r2, r4
10016ae4:	181b      	adds	r3, r3, r0
10016ae6:	42a5      	cmp	r5, r4
10016ae8:	d350      	bcc.n	10016b8c <__aeabi_ddiv+0x45c>
10016aea:	d04d      	beq.n	10016b88 <__aeabi_ddiv+0x458>
10016aec:	2301      	movs	r3, #1
10016aee:	4319      	orrs	r1, r3
10016af0:	4a96      	ldr	r2, [pc, #600]	; (10016d4c <__aeabi_ddiv+0x61c>)
10016af2:	9b01      	ldr	r3, [sp, #4]
10016af4:	4694      	mov	ip, r2
10016af6:	4463      	add	r3, ip
10016af8:	2b00      	cmp	r3, #0
10016afa:	dc00      	bgt.n	10016afe <__aeabi_ddiv+0x3ce>
10016afc:	e6f3      	b.n	100168e6 <__aeabi_ddiv+0x1b6>
10016afe:	074a      	lsls	r2, r1, #29
10016b00:	d009      	beq.n	10016b16 <__aeabi_ddiv+0x3e6>
10016b02:	220f      	movs	r2, #15
10016b04:	400a      	ands	r2, r1
10016b06:	2a04      	cmp	r2, #4
10016b08:	d005      	beq.n	10016b16 <__aeabi_ddiv+0x3e6>
10016b0a:	1d0a      	adds	r2, r1, #4
10016b0c:	428a      	cmp	r2, r1
10016b0e:	4189      	sbcs	r1, r1
10016b10:	4249      	negs	r1, r1
10016b12:	448b      	add	fp, r1
10016b14:	0011      	movs	r1, r2
10016b16:	465a      	mov	r2, fp
10016b18:	01d2      	lsls	r2, r2, #7
10016b1a:	d508      	bpl.n	10016b2e <__aeabi_ddiv+0x3fe>
10016b1c:	465a      	mov	r2, fp
10016b1e:	4b8c      	ldr	r3, [pc, #560]	; (10016d50 <__aeabi_ddiv+0x620>)
10016b20:	401a      	ands	r2, r3
10016b22:	4693      	mov	fp, r2
10016b24:	2280      	movs	r2, #128	; 0x80
10016b26:	00d2      	lsls	r2, r2, #3
10016b28:	4694      	mov	ip, r2
10016b2a:	9b01      	ldr	r3, [sp, #4]
10016b2c:	4463      	add	r3, ip
10016b2e:	4a89      	ldr	r2, [pc, #548]	; (10016d54 <__aeabi_ddiv+0x624>)
10016b30:	4293      	cmp	r3, r2
10016b32:	dd00      	ble.n	10016b36 <__aeabi_ddiv+0x406>
10016b34:	e65b      	b.n	100167ee <__aeabi_ddiv+0xbe>
10016b36:	465a      	mov	r2, fp
10016b38:	08c9      	lsrs	r1, r1, #3
10016b3a:	0750      	lsls	r0, r2, #29
10016b3c:	4308      	orrs	r0, r1
10016b3e:	0256      	lsls	r6, r2, #9
10016b40:	4651      	mov	r1, sl
10016b42:	2201      	movs	r2, #1
10016b44:	055b      	lsls	r3, r3, #21
10016b46:	4681      	mov	r9, r0
10016b48:	0b36      	lsrs	r6, r6, #12
10016b4a:	0d5b      	lsrs	r3, r3, #21
10016b4c:	400a      	ands	r2, r1
10016b4e:	e655      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016b50:	2380      	movs	r3, #128	; 0x80
10016b52:	031b      	lsls	r3, r3, #12
10016b54:	421e      	tst	r6, r3
10016b56:	d011      	beq.n	10016b7c <__aeabi_ddiv+0x44c>
10016b58:	465a      	mov	r2, fp
10016b5a:	421a      	tst	r2, r3
10016b5c:	d10e      	bne.n	10016b7c <__aeabi_ddiv+0x44c>
10016b5e:	465e      	mov	r6, fp
10016b60:	431e      	orrs	r6, r3
10016b62:	0336      	lsls	r6, r6, #12
10016b64:	0b36      	lsrs	r6, r6, #12
10016b66:	002a      	movs	r2, r5
10016b68:	4689      	mov	r9, r1
10016b6a:	4b7b      	ldr	r3, [pc, #492]	; (10016d58 <__aeabi_ddiv+0x628>)
10016b6c:	e646      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016b6e:	2b03      	cmp	r3, #3
10016b70:	d100      	bne.n	10016b74 <__aeabi_ddiv+0x444>
10016b72:	e0e1      	b.n	10016d38 <__aeabi_ddiv+0x608>
10016b74:	2b01      	cmp	r3, #1
10016b76:	d1bb      	bne.n	10016af0 <__aeabi_ddiv+0x3c0>
10016b78:	401a      	ands	r2, r3
10016b7a:	e6bb      	b.n	100168f4 <__aeabi_ddiv+0x1c4>
10016b7c:	431e      	orrs	r6, r3
10016b7e:	0336      	lsls	r6, r6, #12
10016b80:	0b36      	lsrs	r6, r6, #12
10016b82:	4642      	mov	r2, r8
10016b84:	4b74      	ldr	r3, [pc, #464]	; (10016d58 <__aeabi_ddiv+0x628>)
10016b86:	e639      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016b88:	2b00      	cmp	r3, #0
10016b8a:	d0b1      	beq.n	10016af0 <__aeabi_ddiv+0x3c0>
10016b8c:	197d      	adds	r5, r7, r5
10016b8e:	1e4a      	subs	r2, r1, #1
10016b90:	42af      	cmp	r7, r5
10016b92:	d952      	bls.n	10016c3a <__aeabi_ddiv+0x50a>
10016b94:	0011      	movs	r1, r2
10016b96:	42a5      	cmp	r5, r4
10016b98:	d1a8      	bne.n	10016aec <__aeabi_ddiv+0x3bc>
10016b9a:	9a03      	ldr	r2, [sp, #12]
10016b9c:	429a      	cmp	r2, r3
10016b9e:	d1a5      	bne.n	10016aec <__aeabi_ddiv+0x3bc>
10016ba0:	e7a6      	b.n	10016af0 <__aeabi_ddiv+0x3c0>
10016ba2:	0003      	movs	r3, r0
10016ba4:	003e      	movs	r6, r7
10016ba6:	3b28      	subs	r3, #40	; 0x28
10016ba8:	409e      	lsls	r6, r3
10016baa:	2300      	movs	r3, #0
10016bac:	4699      	mov	r9, r3
10016bae:	e654      	b.n	1001685a <__aeabi_ddiv+0x12a>
10016bb0:	f001 f940 	bl	10017e34 <__clzsi2>
10016bb4:	3020      	adds	r0, #32
10016bb6:	e641      	b.n	1001683c <__aeabi_ddiv+0x10c>
10016bb8:	0003      	movs	r3, r0
10016bba:	4652      	mov	r2, sl
10016bbc:	3b28      	subs	r3, #40	; 0x28
10016bbe:	409a      	lsls	r2, r3
10016bc0:	2100      	movs	r1, #0
10016bc2:	4693      	mov	fp, r2
10016bc4:	e677      	b.n	100168b6 <__aeabi_ddiv+0x186>
10016bc6:	4650      	mov	r0, sl
10016bc8:	f001 f934 	bl	10017e34 <__clzsi2>
10016bcc:	3020      	adds	r0, #32
10016bce:	e65e      	b.n	1001688e <__aeabi_ddiv+0x15e>
10016bd0:	9b02      	ldr	r3, [sp, #8]
10016bd2:	2600      	movs	r6, #0
10016bd4:	42ab      	cmp	r3, r5
10016bd6:	d300      	bcc.n	10016bda <__aeabi_ddiv+0x4aa>
10016bd8:	e723      	b.n	10016a22 <__aeabi_ddiv+0x2f2>
10016bda:	9e03      	ldr	r6, [sp, #12]
10016bdc:	9902      	ldr	r1, [sp, #8]
10016bde:	46b4      	mov	ip, r6
10016be0:	4461      	add	r1, ip
10016be2:	4688      	mov	r8, r1
10016be4:	45b0      	cmp	r8, r6
10016be6:	41b6      	sbcs	r6, r6
10016be8:	465b      	mov	r3, fp
10016bea:	4276      	negs	r6, r6
10016bec:	19f6      	adds	r6, r6, r7
10016bee:	18b2      	adds	r2, r6, r2
10016bf0:	3b01      	subs	r3, #1
10016bf2:	9102      	str	r1, [sp, #8]
10016bf4:	4297      	cmp	r7, r2
10016bf6:	d213      	bcs.n	10016c20 <__aeabi_ddiv+0x4f0>
10016bf8:	4290      	cmp	r0, r2
10016bfa:	d84f      	bhi.n	10016c9c <__aeabi_ddiv+0x56c>
10016bfc:	d100      	bne.n	10016c00 <__aeabi_ddiv+0x4d0>
10016bfe:	e08e      	b.n	10016d1e <__aeabi_ddiv+0x5ee>
10016c00:	1a16      	subs	r6, r2, r0
10016c02:	469b      	mov	fp, r3
10016c04:	e70d      	b.n	10016a22 <__aeabi_ddiv+0x2f2>
10016c06:	4589      	cmp	r9, r1
10016c08:	d200      	bcs.n	10016c0c <__aeabi_ddiv+0x4dc>
10016c0a:	e68e      	b.n	1001692a <__aeabi_ddiv+0x1fa>
10016c0c:	0874      	lsrs	r4, r6, #1
10016c0e:	464b      	mov	r3, r9
10016c10:	07f6      	lsls	r6, r6, #31
10016c12:	0035      	movs	r5, r6
10016c14:	085b      	lsrs	r3, r3, #1
10016c16:	431d      	orrs	r5, r3
10016c18:	464b      	mov	r3, r9
10016c1a:	07db      	lsls	r3, r3, #31
10016c1c:	9302      	str	r3, [sp, #8]
10016c1e:	e68b      	b.n	10016938 <__aeabi_ddiv+0x208>
10016c20:	4297      	cmp	r7, r2
10016c22:	d1ed      	bne.n	10016c00 <__aeabi_ddiv+0x4d0>
10016c24:	9903      	ldr	r1, [sp, #12]
10016c26:	9c02      	ldr	r4, [sp, #8]
10016c28:	42a1      	cmp	r1, r4
10016c2a:	d9e5      	bls.n	10016bf8 <__aeabi_ddiv+0x4c8>
10016c2c:	1a3e      	subs	r6, r7, r0
10016c2e:	469b      	mov	fp, r3
10016c30:	e6f7      	b.n	10016a22 <__aeabi_ddiv+0x2f2>
10016c32:	4698      	mov	r8, r3
10016c34:	e6ca      	b.n	100169cc <__aeabi_ddiv+0x29c>
10016c36:	001e      	movs	r6, r3
10016c38:	e6a5      	b.n	10016986 <__aeabi_ddiv+0x256>
10016c3a:	42ac      	cmp	r4, r5
10016c3c:	d83e      	bhi.n	10016cbc <__aeabi_ddiv+0x58c>
10016c3e:	d074      	beq.n	10016d2a <__aeabi_ddiv+0x5fa>
10016c40:	0011      	movs	r1, r2
10016c42:	e753      	b.n	10016aec <__aeabi_ddiv+0x3bc>
10016c44:	2101      	movs	r1, #1
10016c46:	4249      	negs	r1, r1
10016c48:	e752      	b.n	10016af0 <__aeabi_ddiv+0x3c0>
10016c4a:	001c      	movs	r4, r3
10016c4c:	e70e      	b.n	10016a6c <__aeabi_ddiv+0x33c>
10016c4e:	001e      	movs	r6, r3
10016c50:	e72b      	b.n	10016aaa <__aeabi_ddiv+0x37a>
10016c52:	2d1f      	cmp	r5, #31
10016c54:	dc3c      	bgt.n	10016cd0 <__aeabi_ddiv+0x5a0>
10016c56:	2320      	movs	r3, #32
10016c58:	000a      	movs	r2, r1
10016c5a:	4658      	mov	r0, fp
10016c5c:	1b5b      	subs	r3, r3, r5
10016c5e:	4098      	lsls	r0, r3
10016c60:	40ea      	lsrs	r2, r5
10016c62:	4099      	lsls	r1, r3
10016c64:	4302      	orrs	r2, r0
10016c66:	1e48      	subs	r0, r1, #1
10016c68:	4181      	sbcs	r1, r0
10016c6a:	465e      	mov	r6, fp
10016c6c:	4311      	orrs	r1, r2
10016c6e:	40ee      	lsrs	r6, r5
10016c70:	074b      	lsls	r3, r1, #29
10016c72:	d009      	beq.n	10016c88 <__aeabi_ddiv+0x558>
10016c74:	230f      	movs	r3, #15
10016c76:	400b      	ands	r3, r1
10016c78:	2b04      	cmp	r3, #4
10016c7a:	d005      	beq.n	10016c88 <__aeabi_ddiv+0x558>
10016c7c:	000b      	movs	r3, r1
10016c7e:	1d19      	adds	r1, r3, #4
10016c80:	4299      	cmp	r1, r3
10016c82:	419b      	sbcs	r3, r3
10016c84:	425b      	negs	r3, r3
10016c86:	18f6      	adds	r6, r6, r3
10016c88:	0233      	lsls	r3, r6, #8
10016c8a:	d53c      	bpl.n	10016d06 <__aeabi_ddiv+0x5d6>
10016c8c:	4653      	mov	r3, sl
10016c8e:	2201      	movs	r2, #1
10016c90:	2100      	movs	r1, #0
10016c92:	401a      	ands	r2, r3
10016c94:	2600      	movs	r6, #0
10016c96:	2301      	movs	r3, #1
10016c98:	4689      	mov	r9, r1
10016c9a:	e5af      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016c9c:	2302      	movs	r3, #2
10016c9e:	425b      	negs	r3, r3
10016ca0:	469c      	mov	ip, r3
10016ca2:	9c03      	ldr	r4, [sp, #12]
10016ca4:	44e3      	add	fp, ip
10016ca6:	46a4      	mov	ip, r4
10016ca8:	9b02      	ldr	r3, [sp, #8]
10016caa:	4463      	add	r3, ip
10016cac:	4698      	mov	r8, r3
10016cae:	45a0      	cmp	r8, r4
10016cb0:	41b6      	sbcs	r6, r6
10016cb2:	4276      	negs	r6, r6
10016cb4:	19f6      	adds	r6, r6, r7
10016cb6:	9302      	str	r3, [sp, #8]
10016cb8:	18b2      	adds	r2, r6, r2
10016cba:	e6b1      	b.n	10016a20 <__aeabi_ddiv+0x2f0>
10016cbc:	9803      	ldr	r0, [sp, #12]
10016cbe:	1e8a      	subs	r2, r1, #2
10016cc0:	0041      	lsls	r1, r0, #1
10016cc2:	4281      	cmp	r1, r0
10016cc4:	41b6      	sbcs	r6, r6
10016cc6:	4276      	negs	r6, r6
10016cc8:	19f6      	adds	r6, r6, r7
10016cca:	19ad      	adds	r5, r5, r6
10016ccc:	9103      	str	r1, [sp, #12]
10016cce:	e761      	b.n	10016b94 <__aeabi_ddiv+0x464>
10016cd0:	221f      	movs	r2, #31
10016cd2:	4252      	negs	r2, r2
10016cd4:	1ad3      	subs	r3, r2, r3
10016cd6:	465a      	mov	r2, fp
10016cd8:	40da      	lsrs	r2, r3
10016cda:	0013      	movs	r3, r2
10016cdc:	2d20      	cmp	r5, #32
10016cde:	d029      	beq.n	10016d34 <__aeabi_ddiv+0x604>
10016ce0:	2240      	movs	r2, #64	; 0x40
10016ce2:	4658      	mov	r0, fp
10016ce4:	1b55      	subs	r5, r2, r5
10016ce6:	40a8      	lsls	r0, r5
10016ce8:	4301      	orrs	r1, r0
10016cea:	1e48      	subs	r0, r1, #1
10016cec:	4181      	sbcs	r1, r0
10016cee:	2007      	movs	r0, #7
10016cf0:	430b      	orrs	r3, r1
10016cf2:	4018      	ands	r0, r3
10016cf4:	2600      	movs	r6, #0
10016cf6:	2800      	cmp	r0, #0
10016cf8:	d009      	beq.n	10016d0e <__aeabi_ddiv+0x5de>
10016cfa:	220f      	movs	r2, #15
10016cfc:	2600      	movs	r6, #0
10016cfe:	401a      	ands	r2, r3
10016d00:	0019      	movs	r1, r3
10016d02:	2a04      	cmp	r2, #4
10016d04:	d1bb      	bne.n	10016c7e <__aeabi_ddiv+0x54e>
10016d06:	000b      	movs	r3, r1
10016d08:	0770      	lsls	r0, r6, #29
10016d0a:	0276      	lsls	r6, r6, #9
10016d0c:	0b36      	lsrs	r6, r6, #12
10016d0e:	08db      	lsrs	r3, r3, #3
10016d10:	4303      	orrs	r3, r0
10016d12:	4699      	mov	r9, r3
10016d14:	2201      	movs	r2, #1
10016d16:	4653      	mov	r3, sl
10016d18:	401a      	ands	r2, r3
10016d1a:	2300      	movs	r3, #0
10016d1c:	e56e      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016d1e:	9902      	ldr	r1, [sp, #8]
10016d20:	428d      	cmp	r5, r1
10016d22:	d8bb      	bhi.n	10016c9c <__aeabi_ddiv+0x56c>
10016d24:	469b      	mov	fp, r3
10016d26:	2600      	movs	r6, #0
10016d28:	e67b      	b.n	10016a22 <__aeabi_ddiv+0x2f2>
10016d2a:	9803      	ldr	r0, [sp, #12]
10016d2c:	4298      	cmp	r0, r3
10016d2e:	d3c5      	bcc.n	10016cbc <__aeabi_ddiv+0x58c>
10016d30:	0011      	movs	r1, r2
10016d32:	e732      	b.n	10016b9a <__aeabi_ddiv+0x46a>
10016d34:	2000      	movs	r0, #0
10016d36:	e7d7      	b.n	10016ce8 <__aeabi_ddiv+0x5b8>
10016d38:	2680      	movs	r6, #128	; 0x80
10016d3a:	465b      	mov	r3, fp
10016d3c:	0336      	lsls	r6, r6, #12
10016d3e:	431e      	orrs	r6, r3
10016d40:	0336      	lsls	r6, r6, #12
10016d42:	0b36      	lsrs	r6, r6, #12
10016d44:	9a00      	ldr	r2, [sp, #0]
10016d46:	4689      	mov	r9, r1
10016d48:	4b03      	ldr	r3, [pc, #12]	; (10016d58 <__aeabi_ddiv+0x628>)
10016d4a:	e557      	b.n	100167fc <__aeabi_ddiv+0xcc>
10016d4c:	000003ff 	.word	0x000003ff
10016d50:	feffffff 	.word	0xfeffffff
10016d54:	000007fe 	.word	0x000007fe
10016d58:	000007ff 	.word	0x000007ff

10016d5c <__eqdf2>:
10016d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016d5e:	465f      	mov	r7, fp
10016d60:	4656      	mov	r6, sl
10016d62:	464d      	mov	r5, r9
10016d64:	4644      	mov	r4, r8
10016d66:	b4f0      	push	{r4, r5, r6, r7}
10016d68:	031f      	lsls	r7, r3, #12
10016d6a:	005c      	lsls	r4, r3, #1
10016d6c:	0fdb      	lsrs	r3, r3, #31
10016d6e:	469a      	mov	sl, r3
10016d70:	4b19      	ldr	r3, [pc, #100]	; (10016dd8 <__eqdf2+0x7c>)
10016d72:	030e      	lsls	r6, r1, #12
10016d74:	004d      	lsls	r5, r1, #1
10016d76:	0fc9      	lsrs	r1, r1, #31
10016d78:	4680      	mov	r8, r0
10016d7a:	0b36      	lsrs	r6, r6, #12
10016d7c:	0d6d      	lsrs	r5, r5, #21
10016d7e:	468b      	mov	fp, r1
10016d80:	4691      	mov	r9, r2
10016d82:	0b3f      	lsrs	r7, r7, #12
10016d84:	0d64      	lsrs	r4, r4, #21
10016d86:	429d      	cmp	r5, r3
10016d88:	d019      	beq.n	10016dbe <__eqdf2+0x62>
10016d8a:	4b13      	ldr	r3, [pc, #76]	; (10016dd8 <__eqdf2+0x7c>)
10016d8c:	429c      	cmp	r4, r3
10016d8e:	d01b      	beq.n	10016dc8 <__eqdf2+0x6c>
10016d90:	2301      	movs	r3, #1
10016d92:	42a5      	cmp	r5, r4
10016d94:	d006      	beq.n	10016da4 <__eqdf2+0x48>
10016d96:	0018      	movs	r0, r3
10016d98:	bc3c      	pop	{r2, r3, r4, r5}
10016d9a:	4690      	mov	r8, r2
10016d9c:	4699      	mov	r9, r3
10016d9e:	46a2      	mov	sl, r4
10016da0:	46ab      	mov	fp, r5
10016da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016da4:	42be      	cmp	r6, r7
10016da6:	d1f6      	bne.n	10016d96 <__eqdf2+0x3a>
10016da8:	45c8      	cmp	r8, r9
10016daa:	d1f4      	bne.n	10016d96 <__eqdf2+0x3a>
10016dac:	45d3      	cmp	fp, sl
10016dae:	d010      	beq.n	10016dd2 <__eqdf2+0x76>
10016db0:	2d00      	cmp	r5, #0
10016db2:	d1f0      	bne.n	10016d96 <__eqdf2+0x3a>
10016db4:	4330      	orrs	r0, r6
10016db6:	0003      	movs	r3, r0
10016db8:	1e5a      	subs	r2, r3, #1
10016dba:	4193      	sbcs	r3, r2
10016dbc:	e7eb      	b.n	10016d96 <__eqdf2+0x3a>
10016dbe:	0031      	movs	r1, r6
10016dc0:	2301      	movs	r3, #1
10016dc2:	4301      	orrs	r1, r0
10016dc4:	d1e7      	bne.n	10016d96 <__eqdf2+0x3a>
10016dc6:	e7e0      	b.n	10016d8a <__eqdf2+0x2e>
10016dc8:	433a      	orrs	r2, r7
10016dca:	2301      	movs	r3, #1
10016dcc:	2a00      	cmp	r2, #0
10016dce:	d1e2      	bne.n	10016d96 <__eqdf2+0x3a>
10016dd0:	e7de      	b.n	10016d90 <__eqdf2+0x34>
10016dd2:	2300      	movs	r3, #0
10016dd4:	e7df      	b.n	10016d96 <__eqdf2+0x3a>
10016dd6:	46c0      	nop			; (mov r8, r8)
10016dd8:	000007ff 	.word	0x000007ff

10016ddc <__gedf2>:
10016ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10016dde:	465f      	mov	r7, fp
10016de0:	4644      	mov	r4, r8
10016de2:	4656      	mov	r6, sl
10016de4:	464d      	mov	r5, r9
10016de6:	b4f0      	push	{r4, r5, r6, r7}
10016de8:	031f      	lsls	r7, r3, #12
10016dea:	0b3c      	lsrs	r4, r7, #12
10016dec:	4f2c      	ldr	r7, [pc, #176]	; (10016ea0 <__gedf2+0xc4>)
10016dee:	030e      	lsls	r6, r1, #12
10016df0:	004d      	lsls	r5, r1, #1
10016df2:	46a3      	mov	fp, r4
10016df4:	005c      	lsls	r4, r3, #1
10016df6:	4684      	mov	ip, r0
10016df8:	0b36      	lsrs	r6, r6, #12
10016dfa:	0d6d      	lsrs	r5, r5, #21
10016dfc:	0fc9      	lsrs	r1, r1, #31
10016dfe:	4690      	mov	r8, r2
10016e00:	0d64      	lsrs	r4, r4, #21
10016e02:	0fdb      	lsrs	r3, r3, #31
10016e04:	42bd      	cmp	r5, r7
10016e06:	d02b      	beq.n	10016e60 <__gedf2+0x84>
10016e08:	4f25      	ldr	r7, [pc, #148]	; (10016ea0 <__gedf2+0xc4>)
10016e0a:	42bc      	cmp	r4, r7
10016e0c:	d02e      	beq.n	10016e6c <__gedf2+0x90>
10016e0e:	2d00      	cmp	r5, #0
10016e10:	d10e      	bne.n	10016e30 <__gedf2+0x54>
10016e12:	4330      	orrs	r0, r6
10016e14:	0007      	movs	r7, r0
10016e16:	4681      	mov	r9, r0
10016e18:	4278      	negs	r0, r7
10016e1a:	4178      	adcs	r0, r7
10016e1c:	2c00      	cmp	r4, #0
10016e1e:	d117      	bne.n	10016e50 <__gedf2+0x74>
10016e20:	465f      	mov	r7, fp
10016e22:	433a      	orrs	r2, r7
10016e24:	d114      	bne.n	10016e50 <__gedf2+0x74>
10016e26:	464b      	mov	r3, r9
10016e28:	2000      	movs	r0, #0
10016e2a:	2b00      	cmp	r3, #0
10016e2c:	d00a      	beq.n	10016e44 <__gedf2+0x68>
10016e2e:	e006      	b.n	10016e3e <__gedf2+0x62>
10016e30:	2c00      	cmp	r4, #0
10016e32:	d102      	bne.n	10016e3a <__gedf2+0x5e>
10016e34:	4658      	mov	r0, fp
10016e36:	4302      	orrs	r2, r0
10016e38:	d001      	beq.n	10016e3e <__gedf2+0x62>
10016e3a:	4299      	cmp	r1, r3
10016e3c:	d01a      	beq.n	10016e74 <__gedf2+0x98>
10016e3e:	2301      	movs	r3, #1
10016e40:	4248      	negs	r0, r1
10016e42:	4318      	orrs	r0, r3
10016e44:	bc3c      	pop	{r2, r3, r4, r5}
10016e46:	4690      	mov	r8, r2
10016e48:	4699      	mov	r9, r3
10016e4a:	46a2      	mov	sl, r4
10016e4c:	46ab      	mov	fp, r5
10016e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016e50:	2800      	cmp	r0, #0
10016e52:	d0f2      	beq.n	10016e3a <__gedf2+0x5e>
10016e54:	4258      	negs	r0, r3
10016e56:	4158      	adcs	r0, r3
10016e58:	2201      	movs	r2, #1
10016e5a:	4240      	negs	r0, r0
10016e5c:	4310      	orrs	r0, r2
10016e5e:	e7f1      	b.n	10016e44 <__gedf2+0x68>
10016e60:	0037      	movs	r7, r6
10016e62:	4307      	orrs	r7, r0
10016e64:	d0d0      	beq.n	10016e08 <__gedf2+0x2c>
10016e66:	2002      	movs	r0, #2
10016e68:	4240      	negs	r0, r0
10016e6a:	e7eb      	b.n	10016e44 <__gedf2+0x68>
10016e6c:	465f      	mov	r7, fp
10016e6e:	4317      	orrs	r7, r2
10016e70:	d0cd      	beq.n	10016e0e <__gedf2+0x32>
10016e72:	e7f8      	b.n	10016e66 <__gedf2+0x8a>
10016e74:	42a5      	cmp	r5, r4
10016e76:	dce2      	bgt.n	10016e3e <__gedf2+0x62>
10016e78:	db05      	blt.n	10016e86 <__gedf2+0xaa>
10016e7a:	455e      	cmp	r6, fp
10016e7c:	d8df      	bhi.n	10016e3e <__gedf2+0x62>
10016e7e:	d008      	beq.n	10016e92 <__gedf2+0xb6>
10016e80:	2000      	movs	r0, #0
10016e82:	455e      	cmp	r6, fp
10016e84:	d2de      	bcs.n	10016e44 <__gedf2+0x68>
10016e86:	4248      	negs	r0, r1
10016e88:	4148      	adcs	r0, r1
10016e8a:	2301      	movs	r3, #1
10016e8c:	4240      	negs	r0, r0
10016e8e:	4318      	orrs	r0, r3
10016e90:	e7d8      	b.n	10016e44 <__gedf2+0x68>
10016e92:	45c4      	cmp	ip, r8
10016e94:	d8d3      	bhi.n	10016e3e <__gedf2+0x62>
10016e96:	2000      	movs	r0, #0
10016e98:	45c4      	cmp	ip, r8
10016e9a:	d3f4      	bcc.n	10016e86 <__gedf2+0xaa>
10016e9c:	e7d2      	b.n	10016e44 <__gedf2+0x68>
10016e9e:	46c0      	nop			; (mov r8, r8)
10016ea0:	000007ff 	.word	0x000007ff

10016ea4 <__ledf2>:
10016ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
10016ea6:	465f      	mov	r7, fp
10016ea8:	464d      	mov	r5, r9
10016eaa:	4644      	mov	r4, r8
10016eac:	4656      	mov	r6, sl
10016eae:	b4f0      	push	{r4, r5, r6, r7}
10016eb0:	031c      	lsls	r4, r3, #12
10016eb2:	0b24      	lsrs	r4, r4, #12
10016eb4:	46a4      	mov	ip, r4
10016eb6:	4c2f      	ldr	r4, [pc, #188]	; (10016f74 <__ledf2+0xd0>)
10016eb8:	030f      	lsls	r7, r1, #12
10016eba:	004d      	lsls	r5, r1, #1
10016ebc:	005e      	lsls	r6, r3, #1
10016ebe:	0fc9      	lsrs	r1, r1, #31
10016ec0:	4680      	mov	r8, r0
10016ec2:	0b3f      	lsrs	r7, r7, #12
10016ec4:	0d6d      	lsrs	r5, r5, #21
10016ec6:	468b      	mov	fp, r1
10016ec8:	4691      	mov	r9, r2
10016eca:	0d76      	lsrs	r6, r6, #21
10016ecc:	0fdb      	lsrs	r3, r3, #31
10016ece:	42a5      	cmp	r5, r4
10016ed0:	d020      	beq.n	10016f14 <__ledf2+0x70>
10016ed2:	4c28      	ldr	r4, [pc, #160]	; (10016f74 <__ledf2+0xd0>)
10016ed4:	42a6      	cmp	r6, r4
10016ed6:	d022      	beq.n	10016f1e <__ledf2+0x7a>
10016ed8:	2d00      	cmp	r5, #0
10016eda:	d112      	bne.n	10016f02 <__ledf2+0x5e>
10016edc:	4338      	orrs	r0, r7
10016ede:	4244      	negs	r4, r0
10016ee0:	4144      	adcs	r4, r0
10016ee2:	2e00      	cmp	r6, #0
10016ee4:	d020      	beq.n	10016f28 <__ledf2+0x84>
10016ee6:	2c00      	cmp	r4, #0
10016ee8:	d00d      	beq.n	10016f06 <__ledf2+0x62>
10016eea:	425c      	negs	r4, r3
10016eec:	4163      	adcs	r3, r4
10016eee:	2401      	movs	r4, #1
10016ef0:	425b      	negs	r3, r3
10016ef2:	431c      	orrs	r4, r3
10016ef4:	0020      	movs	r0, r4
10016ef6:	bc3c      	pop	{r2, r3, r4, r5}
10016ef8:	4690      	mov	r8, r2
10016efa:	4699      	mov	r9, r3
10016efc:	46a2      	mov	sl, r4
10016efe:	46ab      	mov	fp, r5
10016f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016f02:	2e00      	cmp	r6, #0
10016f04:	d017      	beq.n	10016f36 <__ledf2+0x92>
10016f06:	455b      	cmp	r3, fp
10016f08:	d019      	beq.n	10016f3e <__ledf2+0x9a>
10016f0a:	465b      	mov	r3, fp
10016f0c:	425c      	negs	r4, r3
10016f0e:	2301      	movs	r3, #1
10016f10:	431c      	orrs	r4, r3
10016f12:	e7ef      	b.n	10016ef4 <__ledf2+0x50>
10016f14:	0039      	movs	r1, r7
10016f16:	2402      	movs	r4, #2
10016f18:	4301      	orrs	r1, r0
10016f1a:	d1eb      	bne.n	10016ef4 <__ledf2+0x50>
10016f1c:	e7d9      	b.n	10016ed2 <__ledf2+0x2e>
10016f1e:	4661      	mov	r1, ip
10016f20:	2402      	movs	r4, #2
10016f22:	4311      	orrs	r1, r2
10016f24:	d1e6      	bne.n	10016ef4 <__ledf2+0x50>
10016f26:	e7d7      	b.n	10016ed8 <__ledf2+0x34>
10016f28:	4661      	mov	r1, ip
10016f2a:	430a      	orrs	r2, r1
10016f2c:	d1db      	bne.n	10016ee6 <__ledf2+0x42>
10016f2e:	2400      	movs	r4, #0
10016f30:	2800      	cmp	r0, #0
10016f32:	d0df      	beq.n	10016ef4 <__ledf2+0x50>
10016f34:	e7e9      	b.n	10016f0a <__ledf2+0x66>
10016f36:	4661      	mov	r1, ip
10016f38:	430a      	orrs	r2, r1
10016f3a:	d1e4      	bne.n	10016f06 <__ledf2+0x62>
10016f3c:	e7e5      	b.n	10016f0a <__ledf2+0x66>
10016f3e:	42b5      	cmp	r5, r6
10016f40:	dd03      	ble.n	10016f4a <__ledf2+0xa6>
10016f42:	2201      	movs	r2, #1
10016f44:	425c      	negs	r4, r3
10016f46:	4314      	orrs	r4, r2
10016f48:	e7d4      	b.n	10016ef4 <__ledf2+0x50>
10016f4a:	42b5      	cmp	r5, r6
10016f4c:	dbcd      	blt.n	10016eea <__ledf2+0x46>
10016f4e:	4567      	cmp	r7, ip
10016f50:	d8db      	bhi.n	10016f0a <__ledf2+0x66>
10016f52:	d009      	beq.n	10016f68 <__ledf2+0xc4>
10016f54:	2400      	movs	r4, #0
10016f56:	4567      	cmp	r7, ip
10016f58:	d2cc      	bcs.n	10016ef4 <__ledf2+0x50>
10016f5a:	4659      	mov	r1, fp
10016f5c:	424c      	negs	r4, r1
10016f5e:	4161      	adcs	r1, r4
10016f60:	2401      	movs	r4, #1
10016f62:	4249      	negs	r1, r1
10016f64:	430c      	orrs	r4, r1
10016f66:	e7c5      	b.n	10016ef4 <__ledf2+0x50>
10016f68:	45c8      	cmp	r8, r9
10016f6a:	d8ce      	bhi.n	10016f0a <__ledf2+0x66>
10016f6c:	2400      	movs	r4, #0
10016f6e:	45c8      	cmp	r8, r9
10016f70:	d3f3      	bcc.n	10016f5a <__ledf2+0xb6>
10016f72:	e7bf      	b.n	10016ef4 <__ledf2+0x50>
10016f74:	000007ff 	.word	0x000007ff

10016f78 <__aeabi_dmul>:
10016f78:	b5f0      	push	{r4, r5, r6, r7, lr}
10016f7a:	465f      	mov	r7, fp
10016f7c:	4656      	mov	r6, sl
10016f7e:	464d      	mov	r5, r9
10016f80:	4644      	mov	r4, r8
10016f82:	b4f0      	push	{r4, r5, r6, r7}
10016f84:	030d      	lsls	r5, r1, #12
10016f86:	4699      	mov	r9, r3
10016f88:	004e      	lsls	r6, r1, #1
10016f8a:	0b2b      	lsrs	r3, r5, #12
10016f8c:	b087      	sub	sp, #28
10016f8e:	0007      	movs	r7, r0
10016f90:	4692      	mov	sl, r2
10016f92:	4680      	mov	r8, r0
10016f94:	469b      	mov	fp, r3
10016f96:	0d76      	lsrs	r6, r6, #21
10016f98:	0fcc      	lsrs	r4, r1, #31
10016f9a:	2e00      	cmp	r6, #0
10016f9c:	d069      	beq.n	10017072 <__aeabi_dmul+0xfa>
10016f9e:	4b6d      	ldr	r3, [pc, #436]	; (10017154 <__aeabi_dmul+0x1dc>)
10016fa0:	429e      	cmp	r6, r3
10016fa2:	d035      	beq.n	10017010 <__aeabi_dmul+0x98>
10016fa4:	465b      	mov	r3, fp
10016fa6:	2280      	movs	r2, #128	; 0x80
10016fa8:	00dd      	lsls	r5, r3, #3
10016faa:	0412      	lsls	r2, r2, #16
10016fac:	0f43      	lsrs	r3, r0, #29
10016fae:	4313      	orrs	r3, r2
10016fb0:	432b      	orrs	r3, r5
10016fb2:	469b      	mov	fp, r3
10016fb4:	00c3      	lsls	r3, r0, #3
10016fb6:	4698      	mov	r8, r3
10016fb8:	4b67      	ldr	r3, [pc, #412]	; (10017158 <__aeabi_dmul+0x1e0>)
10016fba:	2700      	movs	r7, #0
10016fbc:	469c      	mov	ip, r3
10016fbe:	2300      	movs	r3, #0
10016fc0:	4466      	add	r6, ip
10016fc2:	9301      	str	r3, [sp, #4]
10016fc4:	464a      	mov	r2, r9
10016fc6:	0315      	lsls	r5, r2, #12
10016fc8:	0050      	lsls	r0, r2, #1
10016fca:	0fd2      	lsrs	r2, r2, #31
10016fcc:	4653      	mov	r3, sl
10016fce:	0b2d      	lsrs	r5, r5, #12
10016fd0:	0d40      	lsrs	r0, r0, #21
10016fd2:	4691      	mov	r9, r2
10016fd4:	d100      	bne.n	10016fd8 <__aeabi_dmul+0x60>
10016fd6:	e076      	b.n	100170c6 <__aeabi_dmul+0x14e>
10016fd8:	4a5e      	ldr	r2, [pc, #376]	; (10017154 <__aeabi_dmul+0x1dc>)
10016fda:	4290      	cmp	r0, r2
10016fdc:	d06c      	beq.n	100170b8 <__aeabi_dmul+0x140>
10016fde:	2280      	movs	r2, #128	; 0x80
10016fe0:	0f5b      	lsrs	r3, r3, #29
10016fe2:	0412      	lsls	r2, r2, #16
10016fe4:	4313      	orrs	r3, r2
10016fe6:	4a5c      	ldr	r2, [pc, #368]	; (10017158 <__aeabi_dmul+0x1e0>)
10016fe8:	00ed      	lsls	r5, r5, #3
10016fea:	4694      	mov	ip, r2
10016fec:	431d      	orrs	r5, r3
10016fee:	4653      	mov	r3, sl
10016ff0:	2200      	movs	r2, #0
10016ff2:	00db      	lsls	r3, r3, #3
10016ff4:	4460      	add	r0, ip
10016ff6:	4649      	mov	r1, r9
10016ff8:	1836      	adds	r6, r6, r0
10016ffa:	1c70      	adds	r0, r6, #1
10016ffc:	4061      	eors	r1, r4
10016ffe:	9002      	str	r0, [sp, #8]
10017000:	4317      	orrs	r7, r2
10017002:	2f0f      	cmp	r7, #15
10017004:	d900      	bls.n	10017008 <__aeabi_dmul+0x90>
10017006:	e0af      	b.n	10017168 <__aeabi_dmul+0x1f0>
10017008:	4854      	ldr	r0, [pc, #336]	; (1001715c <__aeabi_dmul+0x1e4>)
1001700a:	00bf      	lsls	r7, r7, #2
1001700c:	59c7      	ldr	r7, [r0, r7]
1001700e:	46bf      	mov	pc, r7
10017010:	465b      	mov	r3, fp
10017012:	431f      	orrs	r7, r3
10017014:	d000      	beq.n	10017018 <__aeabi_dmul+0xa0>
10017016:	e088      	b.n	1001712a <__aeabi_dmul+0x1b2>
10017018:	2300      	movs	r3, #0
1001701a:	469b      	mov	fp, r3
1001701c:	4698      	mov	r8, r3
1001701e:	3302      	adds	r3, #2
10017020:	2708      	movs	r7, #8
10017022:	9301      	str	r3, [sp, #4]
10017024:	e7ce      	b.n	10016fc4 <__aeabi_dmul+0x4c>
10017026:	4649      	mov	r1, r9
10017028:	2a02      	cmp	r2, #2
1001702a:	d06a      	beq.n	10017102 <__aeabi_dmul+0x18a>
1001702c:	2a03      	cmp	r2, #3
1001702e:	d100      	bne.n	10017032 <__aeabi_dmul+0xba>
10017030:	e209      	b.n	10017446 <__aeabi_dmul+0x4ce>
10017032:	2a01      	cmp	r2, #1
10017034:	d000      	beq.n	10017038 <__aeabi_dmul+0xc0>
10017036:	e1bb      	b.n	100173b0 <__aeabi_dmul+0x438>
10017038:	4011      	ands	r1, r2
1001703a:	2200      	movs	r2, #0
1001703c:	2300      	movs	r3, #0
1001703e:	2500      	movs	r5, #0
10017040:	4690      	mov	r8, r2
10017042:	b2cc      	uxtb	r4, r1
10017044:	2100      	movs	r1, #0
10017046:	032d      	lsls	r5, r5, #12
10017048:	0d0a      	lsrs	r2, r1, #20
1001704a:	0512      	lsls	r2, r2, #20
1001704c:	0b2d      	lsrs	r5, r5, #12
1001704e:	4315      	orrs	r5, r2
10017050:	4a43      	ldr	r2, [pc, #268]	; (10017160 <__aeabi_dmul+0x1e8>)
10017052:	051b      	lsls	r3, r3, #20
10017054:	4015      	ands	r5, r2
10017056:	431d      	orrs	r5, r3
10017058:	006d      	lsls	r5, r5, #1
1001705a:	07e4      	lsls	r4, r4, #31
1001705c:	086d      	lsrs	r5, r5, #1
1001705e:	4325      	orrs	r5, r4
10017060:	4640      	mov	r0, r8
10017062:	0029      	movs	r1, r5
10017064:	b007      	add	sp, #28
10017066:	bc3c      	pop	{r2, r3, r4, r5}
10017068:	4690      	mov	r8, r2
1001706a:	4699      	mov	r9, r3
1001706c:	46a2      	mov	sl, r4
1001706e:	46ab      	mov	fp, r5
10017070:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017072:	4303      	orrs	r3, r0
10017074:	d052      	beq.n	1001711c <__aeabi_dmul+0x1a4>
10017076:	465b      	mov	r3, fp
10017078:	2b00      	cmp	r3, #0
1001707a:	d100      	bne.n	1001707e <__aeabi_dmul+0x106>
1001707c:	e18a      	b.n	10017394 <__aeabi_dmul+0x41c>
1001707e:	4658      	mov	r0, fp
10017080:	f000 fed8 	bl	10017e34 <__clzsi2>
10017084:	0003      	movs	r3, r0
10017086:	3b0b      	subs	r3, #11
10017088:	2b1c      	cmp	r3, #28
1001708a:	dd00      	ble.n	1001708e <__aeabi_dmul+0x116>
1001708c:	e17b      	b.n	10017386 <__aeabi_dmul+0x40e>
1001708e:	221d      	movs	r2, #29
10017090:	1ad3      	subs	r3, r2, r3
10017092:	003a      	movs	r2, r7
10017094:	0001      	movs	r1, r0
10017096:	465d      	mov	r5, fp
10017098:	40da      	lsrs	r2, r3
1001709a:	3908      	subs	r1, #8
1001709c:	408d      	lsls	r5, r1
1001709e:	0013      	movs	r3, r2
100170a0:	408f      	lsls	r7, r1
100170a2:	432b      	orrs	r3, r5
100170a4:	469b      	mov	fp, r3
100170a6:	46b8      	mov	r8, r7
100170a8:	4b2e      	ldr	r3, [pc, #184]	; (10017164 <__aeabi_dmul+0x1ec>)
100170aa:	2700      	movs	r7, #0
100170ac:	469c      	mov	ip, r3
100170ae:	2300      	movs	r3, #0
100170b0:	4460      	add	r0, ip
100170b2:	4246      	negs	r6, r0
100170b4:	9301      	str	r3, [sp, #4]
100170b6:	e785      	b.n	10016fc4 <__aeabi_dmul+0x4c>
100170b8:	4652      	mov	r2, sl
100170ba:	432a      	orrs	r2, r5
100170bc:	d12c      	bne.n	10017118 <__aeabi_dmul+0x1a0>
100170be:	2500      	movs	r5, #0
100170c0:	2300      	movs	r3, #0
100170c2:	2202      	movs	r2, #2
100170c4:	e797      	b.n	10016ff6 <__aeabi_dmul+0x7e>
100170c6:	4652      	mov	r2, sl
100170c8:	432a      	orrs	r2, r5
100170ca:	d021      	beq.n	10017110 <__aeabi_dmul+0x198>
100170cc:	2d00      	cmp	r5, #0
100170ce:	d100      	bne.n	100170d2 <__aeabi_dmul+0x15a>
100170d0:	e154      	b.n	1001737c <__aeabi_dmul+0x404>
100170d2:	0028      	movs	r0, r5
100170d4:	f000 feae 	bl	10017e34 <__clzsi2>
100170d8:	0003      	movs	r3, r0
100170da:	3b0b      	subs	r3, #11
100170dc:	2b1c      	cmp	r3, #28
100170de:	dd00      	ble.n	100170e2 <__aeabi_dmul+0x16a>
100170e0:	e146      	b.n	10017370 <__aeabi_dmul+0x3f8>
100170e2:	211d      	movs	r1, #29
100170e4:	1acb      	subs	r3, r1, r3
100170e6:	4651      	mov	r1, sl
100170e8:	0002      	movs	r2, r0
100170ea:	40d9      	lsrs	r1, r3
100170ec:	4653      	mov	r3, sl
100170ee:	3a08      	subs	r2, #8
100170f0:	4095      	lsls	r5, r2
100170f2:	4093      	lsls	r3, r2
100170f4:	430d      	orrs	r5, r1
100170f6:	4a1b      	ldr	r2, [pc, #108]	; (10017164 <__aeabi_dmul+0x1ec>)
100170f8:	4694      	mov	ip, r2
100170fa:	4460      	add	r0, ip
100170fc:	4240      	negs	r0, r0
100170fe:	2200      	movs	r2, #0
10017100:	e779      	b.n	10016ff6 <__aeabi_dmul+0x7e>
10017102:	2401      	movs	r4, #1
10017104:	2200      	movs	r2, #0
10017106:	400c      	ands	r4, r1
10017108:	4b12      	ldr	r3, [pc, #72]	; (10017154 <__aeabi_dmul+0x1dc>)
1001710a:	2500      	movs	r5, #0
1001710c:	4690      	mov	r8, r2
1001710e:	e799      	b.n	10017044 <__aeabi_dmul+0xcc>
10017110:	2500      	movs	r5, #0
10017112:	2300      	movs	r3, #0
10017114:	2201      	movs	r2, #1
10017116:	e76e      	b.n	10016ff6 <__aeabi_dmul+0x7e>
10017118:	2203      	movs	r2, #3
1001711a:	e76c      	b.n	10016ff6 <__aeabi_dmul+0x7e>
1001711c:	2300      	movs	r3, #0
1001711e:	469b      	mov	fp, r3
10017120:	4698      	mov	r8, r3
10017122:	3301      	adds	r3, #1
10017124:	2704      	movs	r7, #4
10017126:	9301      	str	r3, [sp, #4]
10017128:	e74c      	b.n	10016fc4 <__aeabi_dmul+0x4c>
1001712a:	2303      	movs	r3, #3
1001712c:	270c      	movs	r7, #12
1001712e:	9301      	str	r3, [sp, #4]
10017130:	e748      	b.n	10016fc4 <__aeabi_dmul+0x4c>
10017132:	2300      	movs	r3, #0
10017134:	2580      	movs	r5, #128	; 0x80
10017136:	4698      	mov	r8, r3
10017138:	2400      	movs	r4, #0
1001713a:	032d      	lsls	r5, r5, #12
1001713c:	4b05      	ldr	r3, [pc, #20]	; (10017154 <__aeabi_dmul+0x1dc>)
1001713e:	e781      	b.n	10017044 <__aeabi_dmul+0xcc>
10017140:	465d      	mov	r5, fp
10017142:	4643      	mov	r3, r8
10017144:	9a01      	ldr	r2, [sp, #4]
10017146:	e76f      	b.n	10017028 <__aeabi_dmul+0xb0>
10017148:	465d      	mov	r5, fp
1001714a:	4643      	mov	r3, r8
1001714c:	0021      	movs	r1, r4
1001714e:	9a01      	ldr	r2, [sp, #4]
10017150:	e76a      	b.n	10017028 <__aeabi_dmul+0xb0>
10017152:	46c0      	nop			; (mov r8, r8)
10017154:	000007ff 	.word	0x000007ff
10017158:	fffffc01 	.word	0xfffffc01
1001715c:	1001b2a4 	.word	0x1001b2a4
10017160:	800fffff 	.word	0x800fffff
10017164:	000003f3 	.word	0x000003f3
10017168:	4642      	mov	r2, r8
1001716a:	0c12      	lsrs	r2, r2, #16
1001716c:	4691      	mov	r9, r2
1001716e:	0c1a      	lsrs	r2, r3, #16
10017170:	4694      	mov	ip, r2
10017172:	4642      	mov	r2, r8
10017174:	0417      	lsls	r7, r2, #16
10017176:	464a      	mov	r2, r9
10017178:	041b      	lsls	r3, r3, #16
1001717a:	0c1b      	lsrs	r3, r3, #16
1001717c:	435a      	muls	r2, r3
1001717e:	4660      	mov	r0, ip
10017180:	4690      	mov	r8, r2
10017182:	464a      	mov	r2, r9
10017184:	4342      	muls	r2, r0
10017186:	0010      	movs	r0, r2
10017188:	9203      	str	r2, [sp, #12]
1001718a:	4662      	mov	r2, ip
1001718c:	001c      	movs	r4, r3
1001718e:	0c3f      	lsrs	r7, r7, #16
10017190:	437a      	muls	r2, r7
10017192:	437c      	muls	r4, r7
10017194:	4442      	add	r2, r8
10017196:	9201      	str	r2, [sp, #4]
10017198:	0c22      	lsrs	r2, r4, #16
1001719a:	4692      	mov	sl, r2
1001719c:	9a01      	ldr	r2, [sp, #4]
1001719e:	4452      	add	r2, sl
100171a0:	4590      	cmp	r8, r2
100171a2:	d906      	bls.n	100171b2 <__aeabi_dmul+0x23a>
100171a4:	4682      	mov	sl, r0
100171a6:	2080      	movs	r0, #128	; 0x80
100171a8:	0240      	lsls	r0, r0, #9
100171aa:	4680      	mov	r8, r0
100171ac:	44c2      	add	sl, r8
100171ae:	4650      	mov	r0, sl
100171b0:	9003      	str	r0, [sp, #12]
100171b2:	0c10      	lsrs	r0, r2, #16
100171b4:	9004      	str	r0, [sp, #16]
100171b6:	4648      	mov	r0, r9
100171b8:	0424      	lsls	r4, r4, #16
100171ba:	0c24      	lsrs	r4, r4, #16
100171bc:	0412      	lsls	r2, r2, #16
100171be:	1912      	adds	r2, r2, r4
100171c0:	9205      	str	r2, [sp, #20]
100171c2:	0c2a      	lsrs	r2, r5, #16
100171c4:	042d      	lsls	r5, r5, #16
100171c6:	0c2d      	lsrs	r5, r5, #16
100171c8:	4368      	muls	r0, r5
100171ca:	002c      	movs	r4, r5
100171cc:	4682      	mov	sl, r0
100171ce:	4648      	mov	r0, r9
100171d0:	437c      	muls	r4, r7
100171d2:	4350      	muls	r0, r2
100171d4:	4681      	mov	r9, r0
100171d6:	0c20      	lsrs	r0, r4, #16
100171d8:	4680      	mov	r8, r0
100171da:	4357      	muls	r7, r2
100171dc:	4457      	add	r7, sl
100171de:	4447      	add	r7, r8
100171e0:	45ba      	cmp	sl, r7
100171e2:	d903      	bls.n	100171ec <__aeabi_dmul+0x274>
100171e4:	2080      	movs	r0, #128	; 0x80
100171e6:	0240      	lsls	r0, r0, #9
100171e8:	4680      	mov	r8, r0
100171ea:	44c1      	add	r9, r8
100171ec:	0c38      	lsrs	r0, r7, #16
100171ee:	043f      	lsls	r7, r7, #16
100171f0:	46b8      	mov	r8, r7
100171f2:	4448      	add	r0, r9
100171f4:	0424      	lsls	r4, r4, #16
100171f6:	0c24      	lsrs	r4, r4, #16
100171f8:	9001      	str	r0, [sp, #4]
100171fa:	9804      	ldr	r0, [sp, #16]
100171fc:	44a0      	add	r8, r4
100171fe:	4440      	add	r0, r8
10017200:	9004      	str	r0, [sp, #16]
10017202:	4658      	mov	r0, fp
10017204:	0c00      	lsrs	r0, r0, #16
10017206:	4681      	mov	r9, r0
10017208:	4658      	mov	r0, fp
1001720a:	0404      	lsls	r4, r0, #16
1001720c:	0c20      	lsrs	r0, r4, #16
1001720e:	4682      	mov	sl, r0
10017210:	0007      	movs	r7, r0
10017212:	4648      	mov	r0, r9
10017214:	435f      	muls	r7, r3
10017216:	464c      	mov	r4, r9
10017218:	4343      	muls	r3, r0
1001721a:	4660      	mov	r0, ip
1001721c:	4360      	muls	r0, r4
1001721e:	4664      	mov	r4, ip
10017220:	4683      	mov	fp, r0
10017222:	4650      	mov	r0, sl
10017224:	4344      	muls	r4, r0
10017226:	0c38      	lsrs	r0, r7, #16
10017228:	4684      	mov	ip, r0
1001722a:	18e4      	adds	r4, r4, r3
1001722c:	4464      	add	r4, ip
1001722e:	42a3      	cmp	r3, r4
10017230:	d903      	bls.n	1001723a <__aeabi_dmul+0x2c2>
10017232:	2380      	movs	r3, #128	; 0x80
10017234:	025b      	lsls	r3, r3, #9
10017236:	469c      	mov	ip, r3
10017238:	44e3      	add	fp, ip
1001723a:	4648      	mov	r0, r9
1001723c:	043f      	lsls	r7, r7, #16
1001723e:	0c23      	lsrs	r3, r4, #16
10017240:	0c3f      	lsrs	r7, r7, #16
10017242:	0424      	lsls	r4, r4, #16
10017244:	19e4      	adds	r4, r4, r7
10017246:	4657      	mov	r7, sl
10017248:	4368      	muls	r0, r5
1001724a:	436f      	muls	r7, r5
1001724c:	4684      	mov	ip, r0
1001724e:	464d      	mov	r5, r9
10017250:	4650      	mov	r0, sl
10017252:	4355      	muls	r5, r2
10017254:	4342      	muls	r2, r0
10017256:	0c38      	lsrs	r0, r7, #16
10017258:	4681      	mov	r9, r0
1001725a:	4462      	add	r2, ip
1001725c:	444a      	add	r2, r9
1001725e:	445b      	add	r3, fp
10017260:	4594      	cmp	ip, r2
10017262:	d903      	bls.n	1001726c <__aeabi_dmul+0x2f4>
10017264:	2080      	movs	r0, #128	; 0x80
10017266:	0240      	lsls	r0, r0, #9
10017268:	4684      	mov	ip, r0
1001726a:	4465      	add	r5, ip
1001726c:	9803      	ldr	r0, [sp, #12]
1001726e:	043f      	lsls	r7, r7, #16
10017270:	4683      	mov	fp, r0
10017272:	9804      	ldr	r0, [sp, #16]
10017274:	0c3f      	lsrs	r7, r7, #16
10017276:	4684      	mov	ip, r0
10017278:	44e3      	add	fp, ip
1001727a:	45c3      	cmp	fp, r8
1001727c:	4180      	sbcs	r0, r0
1001727e:	4240      	negs	r0, r0
10017280:	4682      	mov	sl, r0
10017282:	0410      	lsls	r0, r2, #16
10017284:	4684      	mov	ip, r0
10017286:	9801      	ldr	r0, [sp, #4]
10017288:	4467      	add	r7, ip
1001728a:	4684      	mov	ip, r0
1001728c:	4467      	add	r7, ip
1001728e:	44a3      	add	fp, r4
10017290:	46bc      	mov	ip, r7
10017292:	45a3      	cmp	fp, r4
10017294:	41a4      	sbcs	r4, r4
10017296:	4699      	mov	r9, r3
10017298:	44d4      	add	ip, sl
1001729a:	4264      	negs	r4, r4
1001729c:	4287      	cmp	r7, r0
1001729e:	41bf      	sbcs	r7, r7
100172a0:	45d4      	cmp	ip, sl
100172a2:	4180      	sbcs	r0, r0
100172a4:	44e1      	add	r9, ip
100172a6:	46a0      	mov	r8, r4
100172a8:	4599      	cmp	r9, r3
100172aa:	419b      	sbcs	r3, r3
100172ac:	427f      	negs	r7, r7
100172ae:	4240      	negs	r0, r0
100172b0:	44c8      	add	r8, r9
100172b2:	4307      	orrs	r7, r0
100172b4:	0c12      	lsrs	r2, r2, #16
100172b6:	18ba      	adds	r2, r7, r2
100172b8:	45a0      	cmp	r8, r4
100172ba:	41a4      	sbcs	r4, r4
100172bc:	425f      	negs	r7, r3
100172be:	003b      	movs	r3, r7
100172c0:	4264      	negs	r4, r4
100172c2:	4323      	orrs	r3, r4
100172c4:	18d7      	adds	r7, r2, r3
100172c6:	4643      	mov	r3, r8
100172c8:	197d      	adds	r5, r7, r5
100172ca:	0ddb      	lsrs	r3, r3, #23
100172cc:	026d      	lsls	r5, r5, #9
100172ce:	431d      	orrs	r5, r3
100172d0:	465b      	mov	r3, fp
100172d2:	025a      	lsls	r2, r3, #9
100172d4:	9b05      	ldr	r3, [sp, #20]
100172d6:	431a      	orrs	r2, r3
100172d8:	1e53      	subs	r3, r2, #1
100172da:	419a      	sbcs	r2, r3
100172dc:	465b      	mov	r3, fp
100172de:	0ddb      	lsrs	r3, r3, #23
100172e0:	431a      	orrs	r2, r3
100172e2:	4643      	mov	r3, r8
100172e4:	025b      	lsls	r3, r3, #9
100172e6:	4313      	orrs	r3, r2
100172e8:	01ea      	lsls	r2, r5, #7
100172ea:	d507      	bpl.n	100172fc <__aeabi_dmul+0x384>
100172ec:	2201      	movs	r2, #1
100172ee:	085c      	lsrs	r4, r3, #1
100172f0:	4013      	ands	r3, r2
100172f2:	4323      	orrs	r3, r4
100172f4:	07ea      	lsls	r2, r5, #31
100172f6:	9e02      	ldr	r6, [sp, #8]
100172f8:	4313      	orrs	r3, r2
100172fa:	086d      	lsrs	r5, r5, #1
100172fc:	4a57      	ldr	r2, [pc, #348]	; (1001745c <__aeabi_dmul+0x4e4>)
100172fe:	18b2      	adds	r2, r6, r2
10017300:	2a00      	cmp	r2, #0
10017302:	dd4b      	ble.n	1001739c <__aeabi_dmul+0x424>
10017304:	0758      	lsls	r0, r3, #29
10017306:	d009      	beq.n	1001731c <__aeabi_dmul+0x3a4>
10017308:	200f      	movs	r0, #15
1001730a:	4018      	ands	r0, r3
1001730c:	2804      	cmp	r0, #4
1001730e:	d005      	beq.n	1001731c <__aeabi_dmul+0x3a4>
10017310:	1d18      	adds	r0, r3, #4
10017312:	4298      	cmp	r0, r3
10017314:	419b      	sbcs	r3, r3
10017316:	425b      	negs	r3, r3
10017318:	18ed      	adds	r5, r5, r3
1001731a:	0003      	movs	r3, r0
1001731c:	01e8      	lsls	r0, r5, #7
1001731e:	d504      	bpl.n	1001732a <__aeabi_dmul+0x3b2>
10017320:	4a4f      	ldr	r2, [pc, #316]	; (10017460 <__aeabi_dmul+0x4e8>)
10017322:	4015      	ands	r5, r2
10017324:	2280      	movs	r2, #128	; 0x80
10017326:	00d2      	lsls	r2, r2, #3
10017328:	18b2      	adds	r2, r6, r2
1001732a:	484e      	ldr	r0, [pc, #312]	; (10017464 <__aeabi_dmul+0x4ec>)
1001732c:	4282      	cmp	r2, r0
1001732e:	dd00      	ble.n	10017332 <__aeabi_dmul+0x3ba>
10017330:	e6e7      	b.n	10017102 <__aeabi_dmul+0x18a>
10017332:	2401      	movs	r4, #1
10017334:	08db      	lsrs	r3, r3, #3
10017336:	0768      	lsls	r0, r5, #29
10017338:	4318      	orrs	r0, r3
1001733a:	026d      	lsls	r5, r5, #9
1001733c:	0553      	lsls	r3, r2, #21
1001733e:	4680      	mov	r8, r0
10017340:	0b2d      	lsrs	r5, r5, #12
10017342:	0d5b      	lsrs	r3, r3, #21
10017344:	400c      	ands	r4, r1
10017346:	e67d      	b.n	10017044 <__aeabi_dmul+0xcc>
10017348:	2280      	movs	r2, #128	; 0x80
1001734a:	4659      	mov	r1, fp
1001734c:	0312      	lsls	r2, r2, #12
1001734e:	4211      	tst	r1, r2
10017350:	d008      	beq.n	10017364 <__aeabi_dmul+0x3ec>
10017352:	4215      	tst	r5, r2
10017354:	d106      	bne.n	10017364 <__aeabi_dmul+0x3ec>
10017356:	4315      	orrs	r5, r2
10017358:	032d      	lsls	r5, r5, #12
1001735a:	4698      	mov	r8, r3
1001735c:	0b2d      	lsrs	r5, r5, #12
1001735e:	464c      	mov	r4, r9
10017360:	4b41      	ldr	r3, [pc, #260]	; (10017468 <__aeabi_dmul+0x4f0>)
10017362:	e66f      	b.n	10017044 <__aeabi_dmul+0xcc>
10017364:	465d      	mov	r5, fp
10017366:	4315      	orrs	r5, r2
10017368:	032d      	lsls	r5, r5, #12
1001736a:	0b2d      	lsrs	r5, r5, #12
1001736c:	4b3e      	ldr	r3, [pc, #248]	; (10017468 <__aeabi_dmul+0x4f0>)
1001736e:	e669      	b.n	10017044 <__aeabi_dmul+0xcc>
10017370:	0003      	movs	r3, r0
10017372:	4655      	mov	r5, sl
10017374:	3b28      	subs	r3, #40	; 0x28
10017376:	409d      	lsls	r5, r3
10017378:	2300      	movs	r3, #0
1001737a:	e6bc      	b.n	100170f6 <__aeabi_dmul+0x17e>
1001737c:	4650      	mov	r0, sl
1001737e:	f000 fd59 	bl	10017e34 <__clzsi2>
10017382:	3020      	adds	r0, #32
10017384:	e6a8      	b.n	100170d8 <__aeabi_dmul+0x160>
10017386:	0003      	movs	r3, r0
10017388:	3b28      	subs	r3, #40	; 0x28
1001738a:	409f      	lsls	r7, r3
1001738c:	2300      	movs	r3, #0
1001738e:	46bb      	mov	fp, r7
10017390:	4698      	mov	r8, r3
10017392:	e689      	b.n	100170a8 <__aeabi_dmul+0x130>
10017394:	f000 fd4e 	bl	10017e34 <__clzsi2>
10017398:	3020      	adds	r0, #32
1001739a:	e673      	b.n	10017084 <__aeabi_dmul+0x10c>
1001739c:	2401      	movs	r4, #1
1001739e:	1aa6      	subs	r6, r4, r2
100173a0:	2e38      	cmp	r6, #56	; 0x38
100173a2:	dd07      	ble.n	100173b4 <__aeabi_dmul+0x43c>
100173a4:	2200      	movs	r2, #0
100173a6:	400c      	ands	r4, r1
100173a8:	2300      	movs	r3, #0
100173aa:	2500      	movs	r5, #0
100173ac:	4690      	mov	r8, r2
100173ae:	e649      	b.n	10017044 <__aeabi_dmul+0xcc>
100173b0:	9e02      	ldr	r6, [sp, #8]
100173b2:	e7a3      	b.n	100172fc <__aeabi_dmul+0x384>
100173b4:	2e1f      	cmp	r6, #31
100173b6:	dc20      	bgt.n	100173fa <__aeabi_dmul+0x482>
100173b8:	2220      	movs	r2, #32
100173ba:	002c      	movs	r4, r5
100173bc:	0018      	movs	r0, r3
100173be:	1b92      	subs	r2, r2, r6
100173c0:	40f0      	lsrs	r0, r6
100173c2:	4094      	lsls	r4, r2
100173c4:	4093      	lsls	r3, r2
100173c6:	4304      	orrs	r4, r0
100173c8:	1e58      	subs	r0, r3, #1
100173ca:	4183      	sbcs	r3, r0
100173cc:	431c      	orrs	r4, r3
100173ce:	40f5      	lsrs	r5, r6
100173d0:	0763      	lsls	r3, r4, #29
100173d2:	d009      	beq.n	100173e8 <__aeabi_dmul+0x470>
100173d4:	230f      	movs	r3, #15
100173d6:	4023      	ands	r3, r4
100173d8:	2b04      	cmp	r3, #4
100173da:	d005      	beq.n	100173e8 <__aeabi_dmul+0x470>
100173dc:	0023      	movs	r3, r4
100173de:	1d1c      	adds	r4, r3, #4
100173e0:	429c      	cmp	r4, r3
100173e2:	4192      	sbcs	r2, r2
100173e4:	4252      	negs	r2, r2
100173e6:	18ad      	adds	r5, r5, r2
100173e8:	022b      	lsls	r3, r5, #8
100173ea:	d51f      	bpl.n	1001742c <__aeabi_dmul+0x4b4>
100173ec:	2401      	movs	r4, #1
100173ee:	2200      	movs	r2, #0
100173f0:	400c      	ands	r4, r1
100173f2:	2301      	movs	r3, #1
100173f4:	2500      	movs	r5, #0
100173f6:	4690      	mov	r8, r2
100173f8:	e624      	b.n	10017044 <__aeabi_dmul+0xcc>
100173fa:	201f      	movs	r0, #31
100173fc:	002c      	movs	r4, r5
100173fe:	4240      	negs	r0, r0
10017400:	1a82      	subs	r2, r0, r2
10017402:	40d4      	lsrs	r4, r2
10017404:	2e20      	cmp	r6, #32
10017406:	d01c      	beq.n	10017442 <__aeabi_dmul+0x4ca>
10017408:	2240      	movs	r2, #64	; 0x40
1001740a:	1b96      	subs	r6, r2, r6
1001740c:	40b5      	lsls	r5, r6
1001740e:	432b      	orrs	r3, r5
10017410:	1e58      	subs	r0, r3, #1
10017412:	4183      	sbcs	r3, r0
10017414:	2007      	movs	r0, #7
10017416:	4323      	orrs	r3, r4
10017418:	4018      	ands	r0, r3
1001741a:	2500      	movs	r5, #0
1001741c:	2800      	cmp	r0, #0
1001741e:	d009      	beq.n	10017434 <__aeabi_dmul+0x4bc>
10017420:	220f      	movs	r2, #15
10017422:	2500      	movs	r5, #0
10017424:	401a      	ands	r2, r3
10017426:	001c      	movs	r4, r3
10017428:	2a04      	cmp	r2, #4
1001742a:	d1d8      	bne.n	100173de <__aeabi_dmul+0x466>
1001742c:	0023      	movs	r3, r4
1001742e:	0768      	lsls	r0, r5, #29
10017430:	026d      	lsls	r5, r5, #9
10017432:	0b2d      	lsrs	r5, r5, #12
10017434:	2401      	movs	r4, #1
10017436:	08db      	lsrs	r3, r3, #3
10017438:	4303      	orrs	r3, r0
1001743a:	4698      	mov	r8, r3
1001743c:	400c      	ands	r4, r1
1001743e:	2300      	movs	r3, #0
10017440:	e600      	b.n	10017044 <__aeabi_dmul+0xcc>
10017442:	2500      	movs	r5, #0
10017444:	e7e3      	b.n	1001740e <__aeabi_dmul+0x496>
10017446:	2280      	movs	r2, #128	; 0x80
10017448:	2401      	movs	r4, #1
1001744a:	0312      	lsls	r2, r2, #12
1001744c:	4315      	orrs	r5, r2
1001744e:	032d      	lsls	r5, r5, #12
10017450:	4698      	mov	r8, r3
10017452:	0b2d      	lsrs	r5, r5, #12
10017454:	400c      	ands	r4, r1
10017456:	4b04      	ldr	r3, [pc, #16]	; (10017468 <__aeabi_dmul+0x4f0>)
10017458:	e5f4      	b.n	10017044 <__aeabi_dmul+0xcc>
1001745a:	46c0      	nop			; (mov r8, r8)
1001745c:	000003ff 	.word	0x000003ff
10017460:	feffffff 	.word	0xfeffffff
10017464:	000007fe 	.word	0x000007fe
10017468:	000007ff 	.word	0x000007ff

1001746c <__aeabi_dsub>:
1001746c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001746e:	4657      	mov	r7, sl
10017470:	464e      	mov	r6, r9
10017472:	4645      	mov	r5, r8
10017474:	b4e0      	push	{r5, r6, r7}
10017476:	000e      	movs	r6, r1
10017478:	0011      	movs	r1, r2
1001747a:	0ff2      	lsrs	r2, r6, #31
1001747c:	4692      	mov	sl, r2
1001747e:	00c5      	lsls	r5, r0, #3
10017480:	0f42      	lsrs	r2, r0, #29
10017482:	0318      	lsls	r0, r3, #12
10017484:	0337      	lsls	r7, r6, #12
10017486:	0074      	lsls	r4, r6, #1
10017488:	0a40      	lsrs	r0, r0, #9
1001748a:	0f4e      	lsrs	r6, r1, #29
1001748c:	0a7f      	lsrs	r7, r7, #9
1001748e:	4330      	orrs	r0, r6
10017490:	4ecf      	ldr	r6, [pc, #828]	; (100177d0 <__aeabi_dsub+0x364>)
10017492:	4317      	orrs	r7, r2
10017494:	005a      	lsls	r2, r3, #1
10017496:	0d64      	lsrs	r4, r4, #21
10017498:	0d52      	lsrs	r2, r2, #21
1001749a:	0fdb      	lsrs	r3, r3, #31
1001749c:	00c9      	lsls	r1, r1, #3
1001749e:	42b2      	cmp	r2, r6
100174a0:	d100      	bne.n	100174a4 <__aeabi_dsub+0x38>
100174a2:	e0e5      	b.n	10017670 <__aeabi_dsub+0x204>
100174a4:	2601      	movs	r6, #1
100174a6:	4073      	eors	r3, r6
100174a8:	1aa6      	subs	r6, r4, r2
100174aa:	46b4      	mov	ip, r6
100174ac:	4553      	cmp	r3, sl
100174ae:	d100      	bne.n	100174b2 <__aeabi_dsub+0x46>
100174b0:	e0af      	b.n	10017612 <__aeabi_dsub+0x1a6>
100174b2:	2e00      	cmp	r6, #0
100174b4:	dc00      	bgt.n	100174b8 <__aeabi_dsub+0x4c>
100174b6:	e10d      	b.n	100176d4 <__aeabi_dsub+0x268>
100174b8:	2a00      	cmp	r2, #0
100174ba:	d13a      	bne.n	10017532 <__aeabi_dsub+0xc6>
100174bc:	0003      	movs	r3, r0
100174be:	430b      	orrs	r3, r1
100174c0:	d000      	beq.n	100174c4 <__aeabi_dsub+0x58>
100174c2:	e0e4      	b.n	1001768e <__aeabi_dsub+0x222>
100174c4:	076b      	lsls	r3, r5, #29
100174c6:	d009      	beq.n	100174dc <__aeabi_dsub+0x70>
100174c8:	230f      	movs	r3, #15
100174ca:	402b      	ands	r3, r5
100174cc:	2b04      	cmp	r3, #4
100174ce:	d005      	beq.n	100174dc <__aeabi_dsub+0x70>
100174d0:	1d2b      	adds	r3, r5, #4
100174d2:	42ab      	cmp	r3, r5
100174d4:	41ad      	sbcs	r5, r5
100174d6:	426d      	negs	r5, r5
100174d8:	197f      	adds	r7, r7, r5
100174da:	001d      	movs	r5, r3
100174dc:	023b      	lsls	r3, r7, #8
100174de:	d400      	bmi.n	100174e2 <__aeabi_dsub+0x76>
100174e0:	e088      	b.n	100175f4 <__aeabi_dsub+0x188>
100174e2:	4bbb      	ldr	r3, [pc, #748]	; (100177d0 <__aeabi_dsub+0x364>)
100174e4:	3401      	adds	r4, #1
100174e6:	429c      	cmp	r4, r3
100174e8:	d100      	bne.n	100174ec <__aeabi_dsub+0x80>
100174ea:	e110      	b.n	1001770e <__aeabi_dsub+0x2a2>
100174ec:	003a      	movs	r2, r7
100174ee:	4bb9      	ldr	r3, [pc, #740]	; (100177d4 <__aeabi_dsub+0x368>)
100174f0:	4651      	mov	r1, sl
100174f2:	401a      	ands	r2, r3
100174f4:	2301      	movs	r3, #1
100174f6:	0750      	lsls	r0, r2, #29
100174f8:	08ed      	lsrs	r5, r5, #3
100174fa:	0252      	lsls	r2, r2, #9
100174fc:	0564      	lsls	r4, r4, #21
100174fe:	4305      	orrs	r5, r0
10017500:	0b12      	lsrs	r2, r2, #12
10017502:	0d64      	lsrs	r4, r4, #21
10017504:	400b      	ands	r3, r1
10017506:	2100      	movs	r1, #0
10017508:	0028      	movs	r0, r5
1001750a:	0312      	lsls	r2, r2, #12
1001750c:	0d0d      	lsrs	r5, r1, #20
1001750e:	0b12      	lsrs	r2, r2, #12
10017510:	0564      	lsls	r4, r4, #21
10017512:	052d      	lsls	r5, r5, #20
10017514:	4315      	orrs	r5, r2
10017516:	0862      	lsrs	r2, r4, #1
10017518:	4caf      	ldr	r4, [pc, #700]	; (100177d8 <__aeabi_dsub+0x36c>)
1001751a:	07db      	lsls	r3, r3, #31
1001751c:	402c      	ands	r4, r5
1001751e:	4314      	orrs	r4, r2
10017520:	0064      	lsls	r4, r4, #1
10017522:	0864      	lsrs	r4, r4, #1
10017524:	431c      	orrs	r4, r3
10017526:	0021      	movs	r1, r4
10017528:	bc1c      	pop	{r2, r3, r4}
1001752a:	4690      	mov	r8, r2
1001752c:	4699      	mov	r9, r3
1001752e:	46a2      	mov	sl, r4
10017530:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017532:	4ba7      	ldr	r3, [pc, #668]	; (100177d0 <__aeabi_dsub+0x364>)
10017534:	429c      	cmp	r4, r3
10017536:	d0c5      	beq.n	100174c4 <__aeabi_dsub+0x58>
10017538:	2380      	movs	r3, #128	; 0x80
1001753a:	041b      	lsls	r3, r3, #16
1001753c:	4318      	orrs	r0, r3
1001753e:	4663      	mov	r3, ip
10017540:	2b38      	cmp	r3, #56	; 0x38
10017542:	dd00      	ble.n	10017546 <__aeabi_dsub+0xda>
10017544:	e0fd      	b.n	10017742 <__aeabi_dsub+0x2d6>
10017546:	2b1f      	cmp	r3, #31
10017548:	dd00      	ble.n	1001754c <__aeabi_dsub+0xe0>
1001754a:	e130      	b.n	100177ae <__aeabi_dsub+0x342>
1001754c:	4662      	mov	r2, ip
1001754e:	2320      	movs	r3, #32
10017550:	1a9b      	subs	r3, r3, r2
10017552:	0002      	movs	r2, r0
10017554:	409a      	lsls	r2, r3
10017556:	4666      	mov	r6, ip
10017558:	4690      	mov	r8, r2
1001755a:	000a      	movs	r2, r1
1001755c:	4099      	lsls	r1, r3
1001755e:	40f2      	lsrs	r2, r6
10017560:	4646      	mov	r6, r8
10017562:	1e4b      	subs	r3, r1, #1
10017564:	4199      	sbcs	r1, r3
10017566:	4332      	orrs	r2, r6
10017568:	4311      	orrs	r1, r2
1001756a:	4663      	mov	r3, ip
1001756c:	0002      	movs	r2, r0
1001756e:	40da      	lsrs	r2, r3
10017570:	1a69      	subs	r1, r5, r1
10017572:	428d      	cmp	r5, r1
10017574:	419b      	sbcs	r3, r3
10017576:	000d      	movs	r5, r1
10017578:	1aba      	subs	r2, r7, r2
1001757a:	425b      	negs	r3, r3
1001757c:	1ad7      	subs	r7, r2, r3
1001757e:	023b      	lsls	r3, r7, #8
10017580:	d535      	bpl.n	100175ee <__aeabi_dsub+0x182>
10017582:	027a      	lsls	r2, r7, #9
10017584:	0a53      	lsrs	r3, r2, #9
10017586:	4698      	mov	r8, r3
10017588:	4643      	mov	r3, r8
1001758a:	2b00      	cmp	r3, #0
1001758c:	d100      	bne.n	10017590 <__aeabi_dsub+0x124>
1001758e:	e0c4      	b.n	1001771a <__aeabi_dsub+0x2ae>
10017590:	4640      	mov	r0, r8
10017592:	f000 fc4f 	bl	10017e34 <__clzsi2>
10017596:	0003      	movs	r3, r0
10017598:	3b08      	subs	r3, #8
1001759a:	2b1f      	cmp	r3, #31
1001759c:	dd00      	ble.n	100175a0 <__aeabi_dsub+0x134>
1001759e:	e0c5      	b.n	1001772c <__aeabi_dsub+0x2c0>
100175a0:	2220      	movs	r2, #32
100175a2:	0029      	movs	r1, r5
100175a4:	1ad2      	subs	r2, r2, r3
100175a6:	4647      	mov	r7, r8
100175a8:	40d1      	lsrs	r1, r2
100175aa:	409f      	lsls	r7, r3
100175ac:	000a      	movs	r2, r1
100175ae:	409d      	lsls	r5, r3
100175b0:	433a      	orrs	r2, r7
100175b2:	429c      	cmp	r4, r3
100175b4:	dd00      	ble.n	100175b8 <__aeabi_dsub+0x14c>
100175b6:	e0c0      	b.n	1001773a <__aeabi_dsub+0x2ce>
100175b8:	1b1c      	subs	r4, r3, r4
100175ba:	1c63      	adds	r3, r4, #1
100175bc:	2b1f      	cmp	r3, #31
100175be:	dd00      	ble.n	100175c2 <__aeabi_dsub+0x156>
100175c0:	e0e4      	b.n	1001778c <__aeabi_dsub+0x320>
100175c2:	2120      	movs	r1, #32
100175c4:	0014      	movs	r4, r2
100175c6:	0028      	movs	r0, r5
100175c8:	1ac9      	subs	r1, r1, r3
100175ca:	40d8      	lsrs	r0, r3
100175cc:	408c      	lsls	r4, r1
100175ce:	408d      	lsls	r5, r1
100175d0:	4304      	orrs	r4, r0
100175d2:	40da      	lsrs	r2, r3
100175d4:	1e68      	subs	r0, r5, #1
100175d6:	4185      	sbcs	r5, r0
100175d8:	0017      	movs	r7, r2
100175da:	4325      	orrs	r5, r4
100175dc:	2400      	movs	r4, #0
100175de:	e771      	b.n	100174c4 <__aeabi_dsub+0x58>
100175e0:	4642      	mov	r2, r8
100175e2:	4663      	mov	r3, ip
100175e4:	431a      	orrs	r2, r3
100175e6:	d100      	bne.n	100175ea <__aeabi_dsub+0x17e>
100175e8:	e24c      	b.n	10017a84 <__aeabi_dsub+0x618>
100175ea:	4667      	mov	r7, ip
100175ec:	4645      	mov	r5, r8
100175ee:	076b      	lsls	r3, r5, #29
100175f0:	d000      	beq.n	100175f4 <__aeabi_dsub+0x188>
100175f2:	e769      	b.n	100174c8 <__aeabi_dsub+0x5c>
100175f4:	2301      	movs	r3, #1
100175f6:	4651      	mov	r1, sl
100175f8:	0778      	lsls	r0, r7, #29
100175fa:	08ed      	lsrs	r5, r5, #3
100175fc:	08fa      	lsrs	r2, r7, #3
100175fe:	400b      	ands	r3, r1
10017600:	4305      	orrs	r5, r0
10017602:	4973      	ldr	r1, [pc, #460]	; (100177d0 <__aeabi_dsub+0x364>)
10017604:	428c      	cmp	r4, r1
10017606:	d038      	beq.n	1001767a <__aeabi_dsub+0x20e>
10017608:	0312      	lsls	r2, r2, #12
1001760a:	0564      	lsls	r4, r4, #21
1001760c:	0b12      	lsrs	r2, r2, #12
1001760e:	0d64      	lsrs	r4, r4, #21
10017610:	e779      	b.n	10017506 <__aeabi_dsub+0x9a>
10017612:	2e00      	cmp	r6, #0
10017614:	dc00      	bgt.n	10017618 <__aeabi_dsub+0x1ac>
10017616:	e09a      	b.n	1001774e <__aeabi_dsub+0x2e2>
10017618:	2a00      	cmp	r2, #0
1001761a:	d047      	beq.n	100176ac <__aeabi_dsub+0x240>
1001761c:	4a6c      	ldr	r2, [pc, #432]	; (100177d0 <__aeabi_dsub+0x364>)
1001761e:	4294      	cmp	r4, r2
10017620:	d100      	bne.n	10017624 <__aeabi_dsub+0x1b8>
10017622:	e74f      	b.n	100174c4 <__aeabi_dsub+0x58>
10017624:	2280      	movs	r2, #128	; 0x80
10017626:	0412      	lsls	r2, r2, #16
10017628:	4310      	orrs	r0, r2
1001762a:	4662      	mov	r2, ip
1001762c:	2a38      	cmp	r2, #56	; 0x38
1001762e:	dc00      	bgt.n	10017632 <__aeabi_dsub+0x1c6>
10017630:	e108      	b.n	10017844 <__aeabi_dsub+0x3d8>
10017632:	4301      	orrs	r1, r0
10017634:	1e48      	subs	r0, r1, #1
10017636:	4181      	sbcs	r1, r0
10017638:	2200      	movs	r2, #0
1001763a:	b2c9      	uxtb	r1, r1
1001763c:	1949      	adds	r1, r1, r5
1001763e:	19d2      	adds	r2, r2, r7
10017640:	42a9      	cmp	r1, r5
10017642:	41bf      	sbcs	r7, r7
10017644:	000d      	movs	r5, r1
10017646:	427f      	negs	r7, r7
10017648:	18bf      	adds	r7, r7, r2
1001764a:	023a      	lsls	r2, r7, #8
1001764c:	d400      	bmi.n	10017650 <__aeabi_dsub+0x1e4>
1001764e:	e142      	b.n	100178d6 <__aeabi_dsub+0x46a>
10017650:	4a5f      	ldr	r2, [pc, #380]	; (100177d0 <__aeabi_dsub+0x364>)
10017652:	3401      	adds	r4, #1
10017654:	4294      	cmp	r4, r2
10017656:	d100      	bne.n	1001765a <__aeabi_dsub+0x1ee>
10017658:	e14e      	b.n	100178f8 <__aeabi_dsub+0x48c>
1001765a:	2001      	movs	r0, #1
1001765c:	4a5d      	ldr	r2, [pc, #372]	; (100177d4 <__aeabi_dsub+0x368>)
1001765e:	0869      	lsrs	r1, r5, #1
10017660:	403a      	ands	r2, r7
10017662:	4028      	ands	r0, r5
10017664:	4308      	orrs	r0, r1
10017666:	07d5      	lsls	r5, r2, #31
10017668:	4305      	orrs	r5, r0
1001766a:	0857      	lsrs	r7, r2, #1
1001766c:	469a      	mov	sl, r3
1001766e:	e729      	b.n	100174c4 <__aeabi_dsub+0x58>
10017670:	0006      	movs	r6, r0
10017672:	430e      	orrs	r6, r1
10017674:	d000      	beq.n	10017678 <__aeabi_dsub+0x20c>
10017676:	e717      	b.n	100174a8 <__aeabi_dsub+0x3c>
10017678:	e714      	b.n	100174a4 <__aeabi_dsub+0x38>
1001767a:	0029      	movs	r1, r5
1001767c:	4311      	orrs	r1, r2
1001767e:	d100      	bne.n	10017682 <__aeabi_dsub+0x216>
10017680:	e1f9      	b.n	10017a76 <__aeabi_dsub+0x60a>
10017682:	2180      	movs	r1, #128	; 0x80
10017684:	0309      	lsls	r1, r1, #12
10017686:	430a      	orrs	r2, r1
10017688:	0312      	lsls	r2, r2, #12
1001768a:	0b12      	lsrs	r2, r2, #12
1001768c:	e73b      	b.n	10017506 <__aeabi_dsub+0x9a>
1001768e:	2301      	movs	r3, #1
10017690:	425b      	negs	r3, r3
10017692:	4698      	mov	r8, r3
10017694:	44c4      	add	ip, r8
10017696:	4663      	mov	r3, ip
10017698:	2b00      	cmp	r3, #0
1001769a:	d172      	bne.n	10017782 <__aeabi_dsub+0x316>
1001769c:	1a69      	subs	r1, r5, r1
1001769e:	428d      	cmp	r5, r1
100176a0:	419b      	sbcs	r3, r3
100176a2:	1a3f      	subs	r7, r7, r0
100176a4:	425b      	negs	r3, r3
100176a6:	1aff      	subs	r7, r7, r3
100176a8:	000d      	movs	r5, r1
100176aa:	e768      	b.n	1001757e <__aeabi_dsub+0x112>
100176ac:	0002      	movs	r2, r0
100176ae:	430a      	orrs	r2, r1
100176b0:	d100      	bne.n	100176b4 <__aeabi_dsub+0x248>
100176b2:	e707      	b.n	100174c4 <__aeabi_dsub+0x58>
100176b4:	2201      	movs	r2, #1
100176b6:	4252      	negs	r2, r2
100176b8:	4690      	mov	r8, r2
100176ba:	44c4      	add	ip, r8
100176bc:	4662      	mov	r2, ip
100176be:	2a00      	cmp	r2, #0
100176c0:	d000      	beq.n	100176c4 <__aeabi_dsub+0x258>
100176c2:	e0e6      	b.n	10017892 <__aeabi_dsub+0x426>
100176c4:	1869      	adds	r1, r5, r1
100176c6:	42a9      	cmp	r1, r5
100176c8:	41b6      	sbcs	r6, r6
100176ca:	183f      	adds	r7, r7, r0
100176cc:	4276      	negs	r6, r6
100176ce:	19f7      	adds	r7, r6, r7
100176d0:	000d      	movs	r5, r1
100176d2:	e7ba      	b.n	1001764a <__aeabi_dsub+0x1de>
100176d4:	2e00      	cmp	r6, #0
100176d6:	d000      	beq.n	100176da <__aeabi_dsub+0x26e>
100176d8:	e080      	b.n	100177dc <__aeabi_dsub+0x370>
100176da:	1c62      	adds	r2, r4, #1
100176dc:	0552      	lsls	r2, r2, #21
100176de:	0d52      	lsrs	r2, r2, #21
100176e0:	2a01      	cmp	r2, #1
100176e2:	dc00      	bgt.n	100176e6 <__aeabi_dsub+0x27a>
100176e4:	e0f9      	b.n	100178da <__aeabi_dsub+0x46e>
100176e6:	1a6a      	subs	r2, r5, r1
100176e8:	4691      	mov	r9, r2
100176ea:	454d      	cmp	r5, r9
100176ec:	41b6      	sbcs	r6, r6
100176ee:	1a3a      	subs	r2, r7, r0
100176f0:	4276      	negs	r6, r6
100176f2:	1b92      	subs	r2, r2, r6
100176f4:	4690      	mov	r8, r2
100176f6:	0212      	lsls	r2, r2, #8
100176f8:	d400      	bmi.n	100176fc <__aeabi_dsub+0x290>
100176fa:	e099      	b.n	10017830 <__aeabi_dsub+0x3c4>
100176fc:	1b4d      	subs	r5, r1, r5
100176fe:	42a9      	cmp	r1, r5
10017700:	4189      	sbcs	r1, r1
10017702:	1bc7      	subs	r7, r0, r7
10017704:	4249      	negs	r1, r1
10017706:	1a7a      	subs	r2, r7, r1
10017708:	4690      	mov	r8, r2
1001770a:	469a      	mov	sl, r3
1001770c:	e73c      	b.n	10017588 <__aeabi_dsub+0x11c>
1001770e:	4652      	mov	r2, sl
10017710:	2301      	movs	r3, #1
10017712:	2500      	movs	r5, #0
10017714:	4013      	ands	r3, r2
10017716:	2200      	movs	r2, #0
10017718:	e6f5      	b.n	10017506 <__aeabi_dsub+0x9a>
1001771a:	0028      	movs	r0, r5
1001771c:	f000 fb8a 	bl	10017e34 <__clzsi2>
10017720:	3020      	adds	r0, #32
10017722:	0003      	movs	r3, r0
10017724:	3b08      	subs	r3, #8
10017726:	2b1f      	cmp	r3, #31
10017728:	dc00      	bgt.n	1001772c <__aeabi_dsub+0x2c0>
1001772a:	e739      	b.n	100175a0 <__aeabi_dsub+0x134>
1001772c:	002a      	movs	r2, r5
1001772e:	3828      	subs	r0, #40	; 0x28
10017730:	4082      	lsls	r2, r0
10017732:	2500      	movs	r5, #0
10017734:	429c      	cmp	r4, r3
10017736:	dc00      	bgt.n	1001773a <__aeabi_dsub+0x2ce>
10017738:	e73e      	b.n	100175b8 <__aeabi_dsub+0x14c>
1001773a:	4f26      	ldr	r7, [pc, #152]	; (100177d4 <__aeabi_dsub+0x368>)
1001773c:	1ae4      	subs	r4, r4, r3
1001773e:	4017      	ands	r7, r2
10017740:	e6c0      	b.n	100174c4 <__aeabi_dsub+0x58>
10017742:	4301      	orrs	r1, r0
10017744:	1e48      	subs	r0, r1, #1
10017746:	4181      	sbcs	r1, r0
10017748:	2200      	movs	r2, #0
1001774a:	b2c9      	uxtb	r1, r1
1001774c:	e710      	b.n	10017570 <__aeabi_dsub+0x104>
1001774e:	2e00      	cmp	r6, #0
10017750:	d000      	beq.n	10017754 <__aeabi_dsub+0x2e8>
10017752:	e0f1      	b.n	10017938 <__aeabi_dsub+0x4cc>
10017754:	1c62      	adds	r2, r4, #1
10017756:	4694      	mov	ip, r2
10017758:	0552      	lsls	r2, r2, #21
1001775a:	0d52      	lsrs	r2, r2, #21
1001775c:	2a01      	cmp	r2, #1
1001775e:	dc00      	bgt.n	10017762 <__aeabi_dsub+0x2f6>
10017760:	e0a0      	b.n	100178a4 <__aeabi_dsub+0x438>
10017762:	4a1b      	ldr	r2, [pc, #108]	; (100177d0 <__aeabi_dsub+0x364>)
10017764:	4594      	cmp	ip, r2
10017766:	d100      	bne.n	1001776a <__aeabi_dsub+0x2fe>
10017768:	e0c5      	b.n	100178f6 <__aeabi_dsub+0x48a>
1001776a:	1869      	adds	r1, r5, r1
1001776c:	42a9      	cmp	r1, r5
1001776e:	4192      	sbcs	r2, r2
10017770:	183f      	adds	r7, r7, r0
10017772:	4252      	negs	r2, r2
10017774:	19d2      	adds	r2, r2, r7
10017776:	0849      	lsrs	r1, r1, #1
10017778:	07d5      	lsls	r5, r2, #31
1001777a:	430d      	orrs	r5, r1
1001777c:	0857      	lsrs	r7, r2, #1
1001777e:	4664      	mov	r4, ip
10017780:	e6a0      	b.n	100174c4 <__aeabi_dsub+0x58>
10017782:	4b13      	ldr	r3, [pc, #76]	; (100177d0 <__aeabi_dsub+0x364>)
10017784:	429c      	cmp	r4, r3
10017786:	d000      	beq.n	1001778a <__aeabi_dsub+0x31e>
10017788:	e6d9      	b.n	1001753e <__aeabi_dsub+0xd2>
1001778a:	e69b      	b.n	100174c4 <__aeabi_dsub+0x58>
1001778c:	0011      	movs	r1, r2
1001778e:	3c1f      	subs	r4, #31
10017790:	40e1      	lsrs	r1, r4
10017792:	000c      	movs	r4, r1
10017794:	2b20      	cmp	r3, #32
10017796:	d100      	bne.n	1001779a <__aeabi_dsub+0x32e>
10017798:	e080      	b.n	1001789c <__aeabi_dsub+0x430>
1001779a:	2140      	movs	r1, #64	; 0x40
1001779c:	1acb      	subs	r3, r1, r3
1001779e:	409a      	lsls	r2, r3
100177a0:	4315      	orrs	r5, r2
100177a2:	1e6a      	subs	r2, r5, #1
100177a4:	4195      	sbcs	r5, r2
100177a6:	2700      	movs	r7, #0
100177a8:	4325      	orrs	r5, r4
100177aa:	2400      	movs	r4, #0
100177ac:	e71f      	b.n	100175ee <__aeabi_dsub+0x182>
100177ae:	4663      	mov	r3, ip
100177b0:	0002      	movs	r2, r0
100177b2:	3b20      	subs	r3, #32
100177b4:	40da      	lsrs	r2, r3
100177b6:	4663      	mov	r3, ip
100177b8:	2b20      	cmp	r3, #32
100177ba:	d071      	beq.n	100178a0 <__aeabi_dsub+0x434>
100177bc:	2340      	movs	r3, #64	; 0x40
100177be:	4666      	mov	r6, ip
100177c0:	1b9b      	subs	r3, r3, r6
100177c2:	4098      	lsls	r0, r3
100177c4:	4301      	orrs	r1, r0
100177c6:	1e48      	subs	r0, r1, #1
100177c8:	4181      	sbcs	r1, r0
100177ca:	4311      	orrs	r1, r2
100177cc:	2200      	movs	r2, #0
100177ce:	e6cf      	b.n	10017570 <__aeabi_dsub+0x104>
100177d0:	000007ff 	.word	0x000007ff
100177d4:	ff7fffff 	.word	0xff7fffff
100177d8:	800fffff 	.word	0x800fffff
100177dc:	2c00      	cmp	r4, #0
100177de:	d048      	beq.n	10017872 <__aeabi_dsub+0x406>
100177e0:	4cca      	ldr	r4, [pc, #808]	; (10017b0c <__aeabi_dsub+0x6a0>)
100177e2:	42a2      	cmp	r2, r4
100177e4:	d100      	bne.n	100177e8 <__aeabi_dsub+0x37c>
100177e6:	e0a2      	b.n	1001792e <__aeabi_dsub+0x4c2>
100177e8:	4274      	negs	r4, r6
100177ea:	46a1      	mov	r9, r4
100177ec:	2480      	movs	r4, #128	; 0x80
100177ee:	0424      	lsls	r4, r4, #16
100177f0:	4327      	orrs	r7, r4
100177f2:	464c      	mov	r4, r9
100177f4:	2c38      	cmp	r4, #56	; 0x38
100177f6:	dd00      	ble.n	100177fa <__aeabi_dsub+0x38e>
100177f8:	e0db      	b.n	100179b2 <__aeabi_dsub+0x546>
100177fa:	2c1f      	cmp	r4, #31
100177fc:	dd00      	ble.n	10017800 <__aeabi_dsub+0x394>
100177fe:	e144      	b.n	10017a8a <__aeabi_dsub+0x61e>
10017800:	464e      	mov	r6, r9
10017802:	2420      	movs	r4, #32
10017804:	1ba4      	subs	r4, r4, r6
10017806:	003e      	movs	r6, r7
10017808:	40a6      	lsls	r6, r4
1001780a:	46a2      	mov	sl, r4
1001780c:	46b0      	mov	r8, r6
1001780e:	464c      	mov	r4, r9
10017810:	002e      	movs	r6, r5
10017812:	40e6      	lsrs	r6, r4
10017814:	46b4      	mov	ip, r6
10017816:	4646      	mov	r6, r8
10017818:	4664      	mov	r4, ip
1001781a:	4326      	orrs	r6, r4
1001781c:	4654      	mov	r4, sl
1001781e:	40a5      	lsls	r5, r4
10017820:	1e6c      	subs	r4, r5, #1
10017822:	41a5      	sbcs	r5, r4
10017824:	0034      	movs	r4, r6
10017826:	432c      	orrs	r4, r5
10017828:	464d      	mov	r5, r9
1001782a:	40ef      	lsrs	r7, r5
1001782c:	1b0d      	subs	r5, r1, r4
1001782e:	e028      	b.n	10017882 <__aeabi_dsub+0x416>
10017830:	464a      	mov	r2, r9
10017832:	4643      	mov	r3, r8
10017834:	464d      	mov	r5, r9
10017836:	431a      	orrs	r2, r3
10017838:	d000      	beq.n	1001783c <__aeabi_dsub+0x3d0>
1001783a:	e6a5      	b.n	10017588 <__aeabi_dsub+0x11c>
1001783c:	2300      	movs	r3, #0
1001783e:	2400      	movs	r4, #0
10017840:	2500      	movs	r5, #0
10017842:	e6de      	b.n	10017602 <__aeabi_dsub+0x196>
10017844:	2a1f      	cmp	r2, #31
10017846:	dc5a      	bgt.n	100178fe <__aeabi_dsub+0x492>
10017848:	4666      	mov	r6, ip
1001784a:	2220      	movs	r2, #32
1001784c:	1b92      	subs	r2, r2, r6
1001784e:	0006      	movs	r6, r0
10017850:	4096      	lsls	r6, r2
10017852:	4691      	mov	r9, r2
10017854:	46b0      	mov	r8, r6
10017856:	4662      	mov	r2, ip
10017858:	000e      	movs	r6, r1
1001785a:	40d6      	lsrs	r6, r2
1001785c:	4642      	mov	r2, r8
1001785e:	4316      	orrs	r6, r2
10017860:	464a      	mov	r2, r9
10017862:	4091      	lsls	r1, r2
10017864:	1e4a      	subs	r2, r1, #1
10017866:	4191      	sbcs	r1, r2
10017868:	0002      	movs	r2, r0
1001786a:	4660      	mov	r0, ip
1001786c:	4331      	orrs	r1, r6
1001786e:	40c2      	lsrs	r2, r0
10017870:	e6e4      	b.n	1001763c <__aeabi_dsub+0x1d0>
10017872:	003c      	movs	r4, r7
10017874:	432c      	orrs	r4, r5
10017876:	d05a      	beq.n	1001792e <__aeabi_dsub+0x4c2>
10017878:	43f4      	mvns	r4, r6
1001787a:	46a1      	mov	r9, r4
1001787c:	2c00      	cmp	r4, #0
1001787e:	d152      	bne.n	10017926 <__aeabi_dsub+0x4ba>
10017880:	1b4d      	subs	r5, r1, r5
10017882:	42a9      	cmp	r1, r5
10017884:	4189      	sbcs	r1, r1
10017886:	1bc7      	subs	r7, r0, r7
10017888:	4249      	negs	r1, r1
1001788a:	1a7f      	subs	r7, r7, r1
1001788c:	0014      	movs	r4, r2
1001788e:	469a      	mov	sl, r3
10017890:	e675      	b.n	1001757e <__aeabi_dsub+0x112>
10017892:	4a9e      	ldr	r2, [pc, #632]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017894:	4294      	cmp	r4, r2
10017896:	d000      	beq.n	1001789a <__aeabi_dsub+0x42e>
10017898:	e6c7      	b.n	1001762a <__aeabi_dsub+0x1be>
1001789a:	e613      	b.n	100174c4 <__aeabi_dsub+0x58>
1001789c:	2200      	movs	r2, #0
1001789e:	e77f      	b.n	100177a0 <__aeabi_dsub+0x334>
100178a0:	2000      	movs	r0, #0
100178a2:	e78f      	b.n	100177c4 <__aeabi_dsub+0x358>
100178a4:	2c00      	cmp	r4, #0
100178a6:	d000      	beq.n	100178aa <__aeabi_dsub+0x43e>
100178a8:	e0c8      	b.n	10017a3c <__aeabi_dsub+0x5d0>
100178aa:	003b      	movs	r3, r7
100178ac:	432b      	orrs	r3, r5
100178ae:	d100      	bne.n	100178b2 <__aeabi_dsub+0x446>
100178b0:	e10f      	b.n	10017ad2 <__aeabi_dsub+0x666>
100178b2:	0003      	movs	r3, r0
100178b4:	430b      	orrs	r3, r1
100178b6:	d100      	bne.n	100178ba <__aeabi_dsub+0x44e>
100178b8:	e604      	b.n	100174c4 <__aeabi_dsub+0x58>
100178ba:	1869      	adds	r1, r5, r1
100178bc:	42a9      	cmp	r1, r5
100178be:	419b      	sbcs	r3, r3
100178c0:	183f      	adds	r7, r7, r0
100178c2:	425b      	negs	r3, r3
100178c4:	19df      	adds	r7, r3, r7
100178c6:	023b      	lsls	r3, r7, #8
100178c8:	d400      	bmi.n	100178cc <__aeabi_dsub+0x460>
100178ca:	e11a      	b.n	10017b02 <__aeabi_dsub+0x696>
100178cc:	4b90      	ldr	r3, [pc, #576]	; (10017b10 <__aeabi_dsub+0x6a4>)
100178ce:	000d      	movs	r5, r1
100178d0:	401f      	ands	r7, r3
100178d2:	4664      	mov	r4, ip
100178d4:	e5f6      	b.n	100174c4 <__aeabi_dsub+0x58>
100178d6:	469a      	mov	sl, r3
100178d8:	e689      	b.n	100175ee <__aeabi_dsub+0x182>
100178da:	003a      	movs	r2, r7
100178dc:	432a      	orrs	r2, r5
100178de:	2c00      	cmp	r4, #0
100178e0:	d15c      	bne.n	1001799c <__aeabi_dsub+0x530>
100178e2:	2a00      	cmp	r2, #0
100178e4:	d175      	bne.n	100179d2 <__aeabi_dsub+0x566>
100178e6:	0002      	movs	r2, r0
100178e8:	430a      	orrs	r2, r1
100178ea:	d100      	bne.n	100178ee <__aeabi_dsub+0x482>
100178ec:	e0ca      	b.n	10017a84 <__aeabi_dsub+0x618>
100178ee:	0007      	movs	r7, r0
100178f0:	000d      	movs	r5, r1
100178f2:	469a      	mov	sl, r3
100178f4:	e5e6      	b.n	100174c4 <__aeabi_dsub+0x58>
100178f6:	4664      	mov	r4, ip
100178f8:	2200      	movs	r2, #0
100178fa:	2500      	movs	r5, #0
100178fc:	e681      	b.n	10017602 <__aeabi_dsub+0x196>
100178fe:	4662      	mov	r2, ip
10017900:	0006      	movs	r6, r0
10017902:	3a20      	subs	r2, #32
10017904:	40d6      	lsrs	r6, r2
10017906:	4662      	mov	r2, ip
10017908:	46b0      	mov	r8, r6
1001790a:	2a20      	cmp	r2, #32
1001790c:	d100      	bne.n	10017910 <__aeabi_dsub+0x4a4>
1001790e:	e0b7      	b.n	10017a80 <__aeabi_dsub+0x614>
10017910:	2240      	movs	r2, #64	; 0x40
10017912:	4666      	mov	r6, ip
10017914:	1b92      	subs	r2, r2, r6
10017916:	4090      	lsls	r0, r2
10017918:	4301      	orrs	r1, r0
1001791a:	4642      	mov	r2, r8
1001791c:	1e48      	subs	r0, r1, #1
1001791e:	4181      	sbcs	r1, r0
10017920:	4311      	orrs	r1, r2
10017922:	2200      	movs	r2, #0
10017924:	e68a      	b.n	1001763c <__aeabi_dsub+0x1d0>
10017926:	4c79      	ldr	r4, [pc, #484]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017928:	42a2      	cmp	r2, r4
1001792a:	d000      	beq.n	1001792e <__aeabi_dsub+0x4c2>
1001792c:	e761      	b.n	100177f2 <__aeabi_dsub+0x386>
1001792e:	0007      	movs	r7, r0
10017930:	000d      	movs	r5, r1
10017932:	0014      	movs	r4, r2
10017934:	469a      	mov	sl, r3
10017936:	e5c5      	b.n	100174c4 <__aeabi_dsub+0x58>
10017938:	2c00      	cmp	r4, #0
1001793a:	d141      	bne.n	100179c0 <__aeabi_dsub+0x554>
1001793c:	003c      	movs	r4, r7
1001793e:	432c      	orrs	r4, r5
10017940:	d078      	beq.n	10017a34 <__aeabi_dsub+0x5c8>
10017942:	43f4      	mvns	r4, r6
10017944:	46a1      	mov	r9, r4
10017946:	2c00      	cmp	r4, #0
10017948:	d020      	beq.n	1001798c <__aeabi_dsub+0x520>
1001794a:	4c70      	ldr	r4, [pc, #448]	; (10017b0c <__aeabi_dsub+0x6a0>)
1001794c:	42a2      	cmp	r2, r4
1001794e:	d071      	beq.n	10017a34 <__aeabi_dsub+0x5c8>
10017950:	464c      	mov	r4, r9
10017952:	2c38      	cmp	r4, #56	; 0x38
10017954:	dd00      	ble.n	10017958 <__aeabi_dsub+0x4ec>
10017956:	e0b2      	b.n	10017abe <__aeabi_dsub+0x652>
10017958:	2c1f      	cmp	r4, #31
1001795a:	dd00      	ble.n	1001795e <__aeabi_dsub+0x4f2>
1001795c:	e0bc      	b.n	10017ad8 <__aeabi_dsub+0x66c>
1001795e:	2620      	movs	r6, #32
10017960:	1b34      	subs	r4, r6, r4
10017962:	46a2      	mov	sl, r4
10017964:	003c      	movs	r4, r7
10017966:	4656      	mov	r6, sl
10017968:	40b4      	lsls	r4, r6
1001796a:	464e      	mov	r6, r9
1001796c:	46a0      	mov	r8, r4
1001796e:	002c      	movs	r4, r5
10017970:	40f4      	lsrs	r4, r6
10017972:	46a4      	mov	ip, r4
10017974:	4644      	mov	r4, r8
10017976:	4666      	mov	r6, ip
10017978:	4334      	orrs	r4, r6
1001797a:	46a4      	mov	ip, r4
1001797c:	4654      	mov	r4, sl
1001797e:	40a5      	lsls	r5, r4
10017980:	4664      	mov	r4, ip
10017982:	1e6e      	subs	r6, r5, #1
10017984:	41b5      	sbcs	r5, r6
10017986:	4325      	orrs	r5, r4
10017988:	464c      	mov	r4, r9
1001798a:	40e7      	lsrs	r7, r4
1001798c:	186d      	adds	r5, r5, r1
1001798e:	428d      	cmp	r5, r1
10017990:	4189      	sbcs	r1, r1
10017992:	183f      	adds	r7, r7, r0
10017994:	4249      	negs	r1, r1
10017996:	19cf      	adds	r7, r1, r7
10017998:	0014      	movs	r4, r2
1001799a:	e656      	b.n	1001764a <__aeabi_dsub+0x1de>
1001799c:	2a00      	cmp	r2, #0
1001799e:	d12f      	bne.n	10017a00 <__aeabi_dsub+0x594>
100179a0:	0002      	movs	r2, r0
100179a2:	430a      	orrs	r2, r1
100179a4:	d100      	bne.n	100179a8 <__aeabi_dsub+0x53c>
100179a6:	e084      	b.n	10017ab2 <__aeabi_dsub+0x646>
100179a8:	0007      	movs	r7, r0
100179aa:	000d      	movs	r5, r1
100179ac:	469a      	mov	sl, r3
100179ae:	4c57      	ldr	r4, [pc, #348]	; (10017b0c <__aeabi_dsub+0x6a0>)
100179b0:	e588      	b.n	100174c4 <__aeabi_dsub+0x58>
100179b2:	433d      	orrs	r5, r7
100179b4:	1e6f      	subs	r7, r5, #1
100179b6:	41bd      	sbcs	r5, r7
100179b8:	b2ec      	uxtb	r4, r5
100179ba:	2700      	movs	r7, #0
100179bc:	1b0d      	subs	r5, r1, r4
100179be:	e760      	b.n	10017882 <__aeabi_dsub+0x416>
100179c0:	4c52      	ldr	r4, [pc, #328]	; (10017b0c <__aeabi_dsub+0x6a0>)
100179c2:	42a2      	cmp	r2, r4
100179c4:	d036      	beq.n	10017a34 <__aeabi_dsub+0x5c8>
100179c6:	4274      	negs	r4, r6
100179c8:	2680      	movs	r6, #128	; 0x80
100179ca:	0436      	lsls	r6, r6, #16
100179cc:	46a1      	mov	r9, r4
100179ce:	4337      	orrs	r7, r6
100179d0:	e7be      	b.n	10017950 <__aeabi_dsub+0x4e4>
100179d2:	0002      	movs	r2, r0
100179d4:	430a      	orrs	r2, r1
100179d6:	d100      	bne.n	100179da <__aeabi_dsub+0x56e>
100179d8:	e574      	b.n	100174c4 <__aeabi_dsub+0x58>
100179da:	1a6a      	subs	r2, r5, r1
100179dc:	4690      	mov	r8, r2
100179de:	4545      	cmp	r5, r8
100179e0:	41b6      	sbcs	r6, r6
100179e2:	1a3a      	subs	r2, r7, r0
100179e4:	4276      	negs	r6, r6
100179e6:	1b92      	subs	r2, r2, r6
100179e8:	4694      	mov	ip, r2
100179ea:	0212      	lsls	r2, r2, #8
100179ec:	d400      	bmi.n	100179f0 <__aeabi_dsub+0x584>
100179ee:	e5f7      	b.n	100175e0 <__aeabi_dsub+0x174>
100179f0:	1b4d      	subs	r5, r1, r5
100179f2:	42a9      	cmp	r1, r5
100179f4:	4189      	sbcs	r1, r1
100179f6:	1bc7      	subs	r7, r0, r7
100179f8:	4249      	negs	r1, r1
100179fa:	1a7f      	subs	r7, r7, r1
100179fc:	469a      	mov	sl, r3
100179fe:	e561      	b.n	100174c4 <__aeabi_dsub+0x58>
10017a00:	0002      	movs	r2, r0
10017a02:	430a      	orrs	r2, r1
10017a04:	d03a      	beq.n	10017a7c <__aeabi_dsub+0x610>
10017a06:	08ed      	lsrs	r5, r5, #3
10017a08:	077c      	lsls	r4, r7, #29
10017a0a:	432c      	orrs	r4, r5
10017a0c:	2580      	movs	r5, #128	; 0x80
10017a0e:	08fa      	lsrs	r2, r7, #3
10017a10:	032d      	lsls	r5, r5, #12
10017a12:	422a      	tst	r2, r5
10017a14:	d008      	beq.n	10017a28 <__aeabi_dsub+0x5bc>
10017a16:	08c7      	lsrs	r7, r0, #3
10017a18:	422f      	tst	r7, r5
10017a1a:	d105      	bne.n	10017a28 <__aeabi_dsub+0x5bc>
10017a1c:	0745      	lsls	r5, r0, #29
10017a1e:	002c      	movs	r4, r5
10017a20:	003a      	movs	r2, r7
10017a22:	469a      	mov	sl, r3
10017a24:	08c9      	lsrs	r1, r1, #3
10017a26:	430c      	orrs	r4, r1
10017a28:	0f67      	lsrs	r7, r4, #29
10017a2a:	00d2      	lsls	r2, r2, #3
10017a2c:	00e5      	lsls	r5, r4, #3
10017a2e:	4317      	orrs	r7, r2
10017a30:	4c36      	ldr	r4, [pc, #216]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017a32:	e547      	b.n	100174c4 <__aeabi_dsub+0x58>
10017a34:	0007      	movs	r7, r0
10017a36:	000d      	movs	r5, r1
10017a38:	0014      	movs	r4, r2
10017a3a:	e543      	b.n	100174c4 <__aeabi_dsub+0x58>
10017a3c:	003a      	movs	r2, r7
10017a3e:	432a      	orrs	r2, r5
10017a40:	d043      	beq.n	10017aca <__aeabi_dsub+0x65e>
10017a42:	0002      	movs	r2, r0
10017a44:	430a      	orrs	r2, r1
10017a46:	d019      	beq.n	10017a7c <__aeabi_dsub+0x610>
10017a48:	08ed      	lsrs	r5, r5, #3
10017a4a:	077c      	lsls	r4, r7, #29
10017a4c:	432c      	orrs	r4, r5
10017a4e:	2580      	movs	r5, #128	; 0x80
10017a50:	08fa      	lsrs	r2, r7, #3
10017a52:	032d      	lsls	r5, r5, #12
10017a54:	422a      	tst	r2, r5
10017a56:	d007      	beq.n	10017a68 <__aeabi_dsub+0x5fc>
10017a58:	08c6      	lsrs	r6, r0, #3
10017a5a:	422e      	tst	r6, r5
10017a5c:	d104      	bne.n	10017a68 <__aeabi_dsub+0x5fc>
10017a5e:	0747      	lsls	r7, r0, #29
10017a60:	003c      	movs	r4, r7
10017a62:	0032      	movs	r2, r6
10017a64:	08c9      	lsrs	r1, r1, #3
10017a66:	430c      	orrs	r4, r1
10017a68:	00d7      	lsls	r7, r2, #3
10017a6a:	0f62      	lsrs	r2, r4, #29
10017a6c:	00e5      	lsls	r5, r4, #3
10017a6e:	4317      	orrs	r7, r2
10017a70:	469a      	mov	sl, r3
10017a72:	4c26      	ldr	r4, [pc, #152]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017a74:	e526      	b.n	100174c4 <__aeabi_dsub+0x58>
10017a76:	2200      	movs	r2, #0
10017a78:	2500      	movs	r5, #0
10017a7a:	e544      	b.n	10017506 <__aeabi_dsub+0x9a>
10017a7c:	4c23      	ldr	r4, [pc, #140]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017a7e:	e521      	b.n	100174c4 <__aeabi_dsub+0x58>
10017a80:	2000      	movs	r0, #0
10017a82:	e749      	b.n	10017918 <__aeabi_dsub+0x4ac>
10017a84:	2300      	movs	r3, #0
10017a86:	2500      	movs	r5, #0
10017a88:	e5bb      	b.n	10017602 <__aeabi_dsub+0x196>
10017a8a:	464c      	mov	r4, r9
10017a8c:	003e      	movs	r6, r7
10017a8e:	3c20      	subs	r4, #32
10017a90:	40e6      	lsrs	r6, r4
10017a92:	464c      	mov	r4, r9
10017a94:	46b4      	mov	ip, r6
10017a96:	2c20      	cmp	r4, #32
10017a98:	d031      	beq.n	10017afe <__aeabi_dsub+0x692>
10017a9a:	2440      	movs	r4, #64	; 0x40
10017a9c:	464e      	mov	r6, r9
10017a9e:	1ba6      	subs	r6, r4, r6
10017aa0:	40b7      	lsls	r7, r6
10017aa2:	433d      	orrs	r5, r7
10017aa4:	1e6c      	subs	r4, r5, #1
10017aa6:	41a5      	sbcs	r5, r4
10017aa8:	4664      	mov	r4, ip
10017aaa:	432c      	orrs	r4, r5
10017aac:	2700      	movs	r7, #0
10017aae:	1b0d      	subs	r5, r1, r4
10017ab0:	e6e7      	b.n	10017882 <__aeabi_dsub+0x416>
10017ab2:	2280      	movs	r2, #128	; 0x80
10017ab4:	2300      	movs	r3, #0
10017ab6:	0312      	lsls	r2, r2, #12
10017ab8:	4c14      	ldr	r4, [pc, #80]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017aba:	2500      	movs	r5, #0
10017abc:	e5a1      	b.n	10017602 <__aeabi_dsub+0x196>
10017abe:	433d      	orrs	r5, r7
10017ac0:	1e6f      	subs	r7, r5, #1
10017ac2:	41bd      	sbcs	r5, r7
10017ac4:	2700      	movs	r7, #0
10017ac6:	b2ed      	uxtb	r5, r5
10017ac8:	e760      	b.n	1001798c <__aeabi_dsub+0x520>
10017aca:	0007      	movs	r7, r0
10017acc:	000d      	movs	r5, r1
10017ace:	4c0f      	ldr	r4, [pc, #60]	; (10017b0c <__aeabi_dsub+0x6a0>)
10017ad0:	e4f8      	b.n	100174c4 <__aeabi_dsub+0x58>
10017ad2:	0007      	movs	r7, r0
10017ad4:	000d      	movs	r5, r1
10017ad6:	e4f5      	b.n	100174c4 <__aeabi_dsub+0x58>
10017ad8:	464e      	mov	r6, r9
10017ada:	003c      	movs	r4, r7
10017adc:	3e20      	subs	r6, #32
10017ade:	40f4      	lsrs	r4, r6
10017ae0:	46a0      	mov	r8, r4
10017ae2:	464c      	mov	r4, r9
10017ae4:	2c20      	cmp	r4, #32
10017ae6:	d00e      	beq.n	10017b06 <__aeabi_dsub+0x69a>
10017ae8:	2440      	movs	r4, #64	; 0x40
10017aea:	464e      	mov	r6, r9
10017aec:	1ba4      	subs	r4, r4, r6
10017aee:	40a7      	lsls	r7, r4
10017af0:	433d      	orrs	r5, r7
10017af2:	1e6f      	subs	r7, r5, #1
10017af4:	41bd      	sbcs	r5, r7
10017af6:	4644      	mov	r4, r8
10017af8:	2700      	movs	r7, #0
10017afa:	4325      	orrs	r5, r4
10017afc:	e746      	b.n	1001798c <__aeabi_dsub+0x520>
10017afe:	2700      	movs	r7, #0
10017b00:	e7cf      	b.n	10017aa2 <__aeabi_dsub+0x636>
10017b02:	000d      	movs	r5, r1
10017b04:	e573      	b.n	100175ee <__aeabi_dsub+0x182>
10017b06:	2700      	movs	r7, #0
10017b08:	e7f2      	b.n	10017af0 <__aeabi_dsub+0x684>
10017b0a:	46c0      	nop			; (mov r8, r8)
10017b0c:	000007ff 	.word	0x000007ff
10017b10:	ff7fffff 	.word	0xff7fffff

10017b14 <__aeabi_d2iz>:
10017b14:	030b      	lsls	r3, r1, #12
10017b16:	b530      	push	{r4, r5, lr}
10017b18:	4d13      	ldr	r5, [pc, #76]	; (10017b68 <__aeabi_d2iz+0x54>)
10017b1a:	0b1a      	lsrs	r2, r3, #12
10017b1c:	004b      	lsls	r3, r1, #1
10017b1e:	0d5b      	lsrs	r3, r3, #21
10017b20:	0fc9      	lsrs	r1, r1, #31
10017b22:	2400      	movs	r4, #0
10017b24:	42ab      	cmp	r3, r5
10017b26:	dd11      	ble.n	10017b4c <__aeabi_d2iz+0x38>
10017b28:	4c10      	ldr	r4, [pc, #64]	; (10017b6c <__aeabi_d2iz+0x58>)
10017b2a:	42a3      	cmp	r3, r4
10017b2c:	dc10      	bgt.n	10017b50 <__aeabi_d2iz+0x3c>
10017b2e:	2480      	movs	r4, #128	; 0x80
10017b30:	0364      	lsls	r4, r4, #13
10017b32:	4322      	orrs	r2, r4
10017b34:	4c0e      	ldr	r4, [pc, #56]	; (10017b70 <__aeabi_d2iz+0x5c>)
10017b36:	1ae4      	subs	r4, r4, r3
10017b38:	2c1f      	cmp	r4, #31
10017b3a:	dd0c      	ble.n	10017b56 <__aeabi_d2iz+0x42>
10017b3c:	480d      	ldr	r0, [pc, #52]	; (10017b74 <__aeabi_d2iz+0x60>)
10017b3e:	1ac3      	subs	r3, r0, r3
10017b40:	40da      	lsrs	r2, r3
10017b42:	0013      	movs	r3, r2
10017b44:	425c      	negs	r4, r3
10017b46:	2900      	cmp	r1, #0
10017b48:	d100      	bne.n	10017b4c <__aeabi_d2iz+0x38>
10017b4a:	001c      	movs	r4, r3
10017b4c:	0020      	movs	r0, r4
10017b4e:	bd30      	pop	{r4, r5, pc}
10017b50:	4b09      	ldr	r3, [pc, #36]	; (10017b78 <__aeabi_d2iz+0x64>)
10017b52:	18cc      	adds	r4, r1, r3
10017b54:	e7fa      	b.n	10017b4c <__aeabi_d2iz+0x38>
10017b56:	40e0      	lsrs	r0, r4
10017b58:	4c08      	ldr	r4, [pc, #32]	; (10017b7c <__aeabi_d2iz+0x68>)
10017b5a:	46a4      	mov	ip, r4
10017b5c:	4463      	add	r3, ip
10017b5e:	409a      	lsls	r2, r3
10017b60:	0013      	movs	r3, r2
10017b62:	4303      	orrs	r3, r0
10017b64:	e7ee      	b.n	10017b44 <__aeabi_d2iz+0x30>
10017b66:	46c0      	nop			; (mov r8, r8)
10017b68:	000003fe 	.word	0x000003fe
10017b6c:	0000041d 	.word	0x0000041d
10017b70:	00000433 	.word	0x00000433
10017b74:	00000413 	.word	0x00000413
10017b78:	7fffffff 	.word	0x7fffffff
10017b7c:	fffffbed 	.word	0xfffffbed

10017b80 <__aeabi_i2d>:
10017b80:	b570      	push	{r4, r5, r6, lr}
10017b82:	2800      	cmp	r0, #0
10017b84:	d030      	beq.n	10017be8 <__aeabi_i2d+0x68>
10017b86:	17c3      	asrs	r3, r0, #31
10017b88:	18c4      	adds	r4, r0, r3
10017b8a:	405c      	eors	r4, r3
10017b8c:	0fc5      	lsrs	r5, r0, #31
10017b8e:	0020      	movs	r0, r4
10017b90:	f000 f950 	bl	10017e34 <__clzsi2>
10017b94:	4b17      	ldr	r3, [pc, #92]	; (10017bf4 <__aeabi_i2d+0x74>)
10017b96:	4a18      	ldr	r2, [pc, #96]	; (10017bf8 <__aeabi_i2d+0x78>)
10017b98:	1a1b      	subs	r3, r3, r0
10017b9a:	1ad2      	subs	r2, r2, r3
10017b9c:	2a1f      	cmp	r2, #31
10017b9e:	dd18      	ble.n	10017bd2 <__aeabi_i2d+0x52>
10017ba0:	4a16      	ldr	r2, [pc, #88]	; (10017bfc <__aeabi_i2d+0x7c>)
10017ba2:	1ad2      	subs	r2, r2, r3
10017ba4:	4094      	lsls	r4, r2
10017ba6:	2200      	movs	r2, #0
10017ba8:	0324      	lsls	r4, r4, #12
10017baa:	055b      	lsls	r3, r3, #21
10017bac:	0b24      	lsrs	r4, r4, #12
10017bae:	0d5b      	lsrs	r3, r3, #21
10017bb0:	2100      	movs	r1, #0
10017bb2:	0010      	movs	r0, r2
10017bb4:	0324      	lsls	r4, r4, #12
10017bb6:	0d0a      	lsrs	r2, r1, #20
10017bb8:	0512      	lsls	r2, r2, #20
10017bba:	0b24      	lsrs	r4, r4, #12
10017bbc:	4314      	orrs	r4, r2
10017bbe:	4a10      	ldr	r2, [pc, #64]	; (10017c00 <__aeabi_i2d+0x80>)
10017bc0:	051b      	lsls	r3, r3, #20
10017bc2:	4014      	ands	r4, r2
10017bc4:	431c      	orrs	r4, r3
10017bc6:	0064      	lsls	r4, r4, #1
10017bc8:	07ed      	lsls	r5, r5, #31
10017bca:	0864      	lsrs	r4, r4, #1
10017bcc:	432c      	orrs	r4, r5
10017bce:	0021      	movs	r1, r4
10017bd0:	bd70      	pop	{r4, r5, r6, pc}
10017bd2:	0021      	movs	r1, r4
10017bd4:	4091      	lsls	r1, r2
10017bd6:	000a      	movs	r2, r1
10017bd8:	210b      	movs	r1, #11
10017bda:	1a08      	subs	r0, r1, r0
10017bdc:	40c4      	lsrs	r4, r0
10017bde:	055b      	lsls	r3, r3, #21
10017be0:	0324      	lsls	r4, r4, #12
10017be2:	0b24      	lsrs	r4, r4, #12
10017be4:	0d5b      	lsrs	r3, r3, #21
10017be6:	e7e3      	b.n	10017bb0 <__aeabi_i2d+0x30>
10017be8:	2500      	movs	r5, #0
10017bea:	2300      	movs	r3, #0
10017bec:	2400      	movs	r4, #0
10017bee:	2200      	movs	r2, #0
10017bf0:	e7de      	b.n	10017bb0 <__aeabi_i2d+0x30>
10017bf2:	46c0      	nop			; (mov r8, r8)
10017bf4:	0000041e 	.word	0x0000041e
10017bf8:	00000433 	.word	0x00000433
10017bfc:	00000413 	.word	0x00000413
10017c00:	800fffff 	.word	0x800fffff

10017c04 <__aeabi_ui2d>:
10017c04:	b570      	push	{r4, r5, r6, lr}
10017c06:	1e05      	subs	r5, r0, #0
10017c08:	d028      	beq.n	10017c5c <__aeabi_ui2d+0x58>
10017c0a:	f000 f913 	bl	10017e34 <__clzsi2>
10017c0e:	4b15      	ldr	r3, [pc, #84]	; (10017c64 <__aeabi_ui2d+0x60>)
10017c10:	4a15      	ldr	r2, [pc, #84]	; (10017c68 <__aeabi_ui2d+0x64>)
10017c12:	1a1b      	subs	r3, r3, r0
10017c14:	1ad2      	subs	r2, r2, r3
10017c16:	2a1f      	cmp	r2, #31
10017c18:	dd16      	ble.n	10017c48 <__aeabi_ui2d+0x44>
10017c1a:	002c      	movs	r4, r5
10017c1c:	4a13      	ldr	r2, [pc, #76]	; (10017c6c <__aeabi_ui2d+0x68>)
10017c1e:	2500      	movs	r5, #0
10017c20:	1ad2      	subs	r2, r2, r3
10017c22:	4094      	lsls	r4, r2
10017c24:	055a      	lsls	r2, r3, #21
10017c26:	0324      	lsls	r4, r4, #12
10017c28:	0b24      	lsrs	r4, r4, #12
10017c2a:	0d52      	lsrs	r2, r2, #21
10017c2c:	2100      	movs	r1, #0
10017c2e:	0324      	lsls	r4, r4, #12
10017c30:	0d0b      	lsrs	r3, r1, #20
10017c32:	0b24      	lsrs	r4, r4, #12
10017c34:	051b      	lsls	r3, r3, #20
10017c36:	4323      	orrs	r3, r4
10017c38:	4c0d      	ldr	r4, [pc, #52]	; (10017c70 <__aeabi_ui2d+0x6c>)
10017c3a:	0512      	lsls	r2, r2, #20
10017c3c:	4023      	ands	r3, r4
10017c3e:	4313      	orrs	r3, r2
10017c40:	005b      	lsls	r3, r3, #1
10017c42:	0028      	movs	r0, r5
10017c44:	0859      	lsrs	r1, r3, #1
10017c46:	bd70      	pop	{r4, r5, r6, pc}
10017c48:	210b      	movs	r1, #11
10017c4a:	002c      	movs	r4, r5
10017c4c:	1a08      	subs	r0, r1, r0
10017c4e:	40c4      	lsrs	r4, r0
10017c50:	4095      	lsls	r5, r2
10017c52:	0324      	lsls	r4, r4, #12
10017c54:	055a      	lsls	r2, r3, #21
10017c56:	0b24      	lsrs	r4, r4, #12
10017c58:	0d52      	lsrs	r2, r2, #21
10017c5a:	e7e7      	b.n	10017c2c <__aeabi_ui2d+0x28>
10017c5c:	2200      	movs	r2, #0
10017c5e:	2400      	movs	r4, #0
10017c60:	e7e4      	b.n	10017c2c <__aeabi_ui2d+0x28>
10017c62:	46c0      	nop			; (mov r8, r8)
10017c64:	0000041e 	.word	0x0000041e
10017c68:	00000433 	.word	0x00000433
10017c6c:	00000413 	.word	0x00000413
10017c70:	800fffff 	.word	0x800fffff

10017c74 <__aeabi_f2d>:
10017c74:	0042      	lsls	r2, r0, #1
10017c76:	0e12      	lsrs	r2, r2, #24
10017c78:	1c51      	adds	r1, r2, #1
10017c7a:	0243      	lsls	r3, r0, #9
10017c7c:	b2c9      	uxtb	r1, r1
10017c7e:	b570      	push	{r4, r5, r6, lr}
10017c80:	0a5d      	lsrs	r5, r3, #9
10017c82:	0fc4      	lsrs	r4, r0, #31
10017c84:	2901      	cmp	r1, #1
10017c86:	dd15      	ble.n	10017cb4 <__aeabi_f2d+0x40>
10017c88:	21e0      	movs	r1, #224	; 0xe0
10017c8a:	0089      	lsls	r1, r1, #2
10017c8c:	468c      	mov	ip, r1
10017c8e:	076d      	lsls	r5, r5, #29
10017c90:	0b1b      	lsrs	r3, r3, #12
10017c92:	4462      	add	r2, ip
10017c94:	2100      	movs	r1, #0
10017c96:	0028      	movs	r0, r5
10017c98:	0d0d      	lsrs	r5, r1, #20
10017c9a:	052d      	lsls	r5, r5, #20
10017c9c:	432b      	orrs	r3, r5
10017c9e:	4d1c      	ldr	r5, [pc, #112]	; (10017d10 <__aeabi_f2d+0x9c>)
10017ca0:	0552      	lsls	r2, r2, #21
10017ca2:	402b      	ands	r3, r5
10017ca4:	0852      	lsrs	r2, r2, #1
10017ca6:	4313      	orrs	r3, r2
10017ca8:	005b      	lsls	r3, r3, #1
10017caa:	07e4      	lsls	r4, r4, #31
10017cac:	085b      	lsrs	r3, r3, #1
10017cae:	4323      	orrs	r3, r4
10017cb0:	0019      	movs	r1, r3
10017cb2:	bd70      	pop	{r4, r5, r6, pc}
10017cb4:	2a00      	cmp	r2, #0
10017cb6:	d115      	bne.n	10017ce4 <__aeabi_f2d+0x70>
10017cb8:	2d00      	cmp	r5, #0
10017cba:	d01f      	beq.n	10017cfc <__aeabi_f2d+0x88>
10017cbc:	0028      	movs	r0, r5
10017cbe:	f000 f8b9 	bl	10017e34 <__clzsi2>
10017cc2:	280a      	cmp	r0, #10
10017cc4:	dc1d      	bgt.n	10017d02 <__aeabi_f2d+0x8e>
10017cc6:	230b      	movs	r3, #11
10017cc8:	002a      	movs	r2, r5
10017cca:	1a1b      	subs	r3, r3, r0
10017ccc:	40da      	lsrs	r2, r3
10017cce:	0013      	movs	r3, r2
10017cd0:	0002      	movs	r2, r0
10017cd2:	3215      	adds	r2, #21
10017cd4:	4095      	lsls	r5, r2
10017cd6:	4a0f      	ldr	r2, [pc, #60]	; (10017d14 <__aeabi_f2d+0xa0>)
10017cd8:	031b      	lsls	r3, r3, #12
10017cda:	1a12      	subs	r2, r2, r0
10017cdc:	0552      	lsls	r2, r2, #21
10017cde:	0b1b      	lsrs	r3, r3, #12
10017ce0:	0d52      	lsrs	r2, r2, #21
10017ce2:	e7d7      	b.n	10017c94 <__aeabi_f2d+0x20>
10017ce4:	2d00      	cmp	r5, #0
10017ce6:	d006      	beq.n	10017cf6 <__aeabi_f2d+0x82>
10017ce8:	2280      	movs	r2, #128	; 0x80
10017cea:	0b1b      	lsrs	r3, r3, #12
10017cec:	0312      	lsls	r2, r2, #12
10017cee:	4313      	orrs	r3, r2
10017cf0:	076d      	lsls	r5, r5, #29
10017cf2:	4a09      	ldr	r2, [pc, #36]	; (10017d18 <__aeabi_f2d+0xa4>)
10017cf4:	e7ce      	b.n	10017c94 <__aeabi_f2d+0x20>
10017cf6:	4a08      	ldr	r2, [pc, #32]	; (10017d18 <__aeabi_f2d+0xa4>)
10017cf8:	2300      	movs	r3, #0
10017cfa:	e7cb      	b.n	10017c94 <__aeabi_f2d+0x20>
10017cfc:	2200      	movs	r2, #0
10017cfe:	2300      	movs	r3, #0
10017d00:	e7c8      	b.n	10017c94 <__aeabi_f2d+0x20>
10017d02:	0003      	movs	r3, r0
10017d04:	3b0b      	subs	r3, #11
10017d06:	409d      	lsls	r5, r3
10017d08:	002b      	movs	r3, r5
10017d0a:	2500      	movs	r5, #0
10017d0c:	e7e3      	b.n	10017cd6 <__aeabi_f2d+0x62>
10017d0e:	46c0      	nop			; (mov r8, r8)
10017d10:	800fffff 	.word	0x800fffff
10017d14:	00000389 	.word	0x00000389
10017d18:	000007ff 	.word	0x000007ff

10017d1c <__aeabi_d2f>:
10017d1c:	004b      	lsls	r3, r1, #1
10017d1e:	b570      	push	{r4, r5, r6, lr}
10017d20:	0d5e      	lsrs	r6, r3, #21
10017d22:	030c      	lsls	r4, r1, #12
10017d24:	1c75      	adds	r5, r6, #1
10017d26:	0a64      	lsrs	r4, r4, #9
10017d28:	0f42      	lsrs	r2, r0, #29
10017d2a:	056d      	lsls	r5, r5, #21
10017d2c:	4322      	orrs	r2, r4
10017d2e:	0fc9      	lsrs	r1, r1, #31
10017d30:	00c4      	lsls	r4, r0, #3
10017d32:	0d6d      	lsrs	r5, r5, #21
10017d34:	2d01      	cmp	r5, #1
10017d36:	dd2a      	ble.n	10017d8e <__aeabi_d2f+0x72>
10017d38:	4b3b      	ldr	r3, [pc, #236]	; (10017e28 <__aeabi_d2f+0x10c>)
10017d3a:	18f3      	adds	r3, r6, r3
10017d3c:	2bfe      	cmp	r3, #254	; 0xfe
10017d3e:	dc1a      	bgt.n	10017d76 <__aeabi_d2f+0x5a>
10017d40:	2b00      	cmp	r3, #0
10017d42:	dd42      	ble.n	10017dca <__aeabi_d2f+0xae>
10017d44:	0180      	lsls	r0, r0, #6
10017d46:	1e45      	subs	r5, r0, #1
10017d48:	41a8      	sbcs	r0, r5
10017d4a:	00d2      	lsls	r2, r2, #3
10017d4c:	4310      	orrs	r0, r2
10017d4e:	0f62      	lsrs	r2, r4, #29
10017d50:	4302      	orrs	r2, r0
10017d52:	0750      	lsls	r0, r2, #29
10017d54:	d004      	beq.n	10017d60 <__aeabi_d2f+0x44>
10017d56:	200f      	movs	r0, #15
10017d58:	4010      	ands	r0, r2
10017d5a:	2804      	cmp	r0, #4
10017d5c:	d000      	beq.n	10017d60 <__aeabi_d2f+0x44>
10017d5e:	3204      	adds	r2, #4
10017d60:	2080      	movs	r0, #128	; 0x80
10017d62:	04c0      	lsls	r0, r0, #19
10017d64:	4010      	ands	r0, r2
10017d66:	d021      	beq.n	10017dac <__aeabi_d2f+0x90>
10017d68:	3301      	adds	r3, #1
10017d6a:	2bff      	cmp	r3, #255	; 0xff
10017d6c:	d003      	beq.n	10017d76 <__aeabi_d2f+0x5a>
10017d6e:	0192      	lsls	r2, r2, #6
10017d70:	0a52      	lsrs	r2, r2, #9
10017d72:	b2db      	uxtb	r3, r3
10017d74:	e001      	b.n	10017d7a <__aeabi_d2f+0x5e>
10017d76:	23ff      	movs	r3, #255	; 0xff
10017d78:	2200      	movs	r2, #0
10017d7a:	0252      	lsls	r2, r2, #9
10017d7c:	0a52      	lsrs	r2, r2, #9
10017d7e:	05db      	lsls	r3, r3, #23
10017d80:	4313      	orrs	r3, r2
10017d82:	005b      	lsls	r3, r3, #1
10017d84:	07c9      	lsls	r1, r1, #31
10017d86:	085b      	lsrs	r3, r3, #1
10017d88:	430b      	orrs	r3, r1
10017d8a:	0018      	movs	r0, r3
10017d8c:	bd70      	pop	{r4, r5, r6, pc}
10017d8e:	2e00      	cmp	r6, #0
10017d90:	d007      	beq.n	10017da2 <__aeabi_d2f+0x86>
10017d92:	4314      	orrs	r4, r2
10017d94:	d0ef      	beq.n	10017d76 <__aeabi_d2f+0x5a>
10017d96:	2080      	movs	r0, #128	; 0x80
10017d98:	00d2      	lsls	r2, r2, #3
10017d9a:	0480      	lsls	r0, r0, #18
10017d9c:	4302      	orrs	r2, r0
10017d9e:	23ff      	movs	r3, #255	; 0xff
10017da0:	e7d7      	b.n	10017d52 <__aeabi_d2f+0x36>
10017da2:	4322      	orrs	r2, r4
10017da4:	2300      	movs	r3, #0
10017da6:	2a00      	cmp	r2, #0
10017da8:	d003      	beq.n	10017db2 <__aeabi_d2f+0x96>
10017daa:	2205      	movs	r2, #5
10017dac:	08d2      	lsrs	r2, r2, #3
10017dae:	2bff      	cmp	r3, #255	; 0xff
10017db0:	d003      	beq.n	10017dba <__aeabi_d2f+0x9e>
10017db2:	0252      	lsls	r2, r2, #9
10017db4:	0a52      	lsrs	r2, r2, #9
10017db6:	b2db      	uxtb	r3, r3
10017db8:	e7df      	b.n	10017d7a <__aeabi_d2f+0x5e>
10017dba:	2a00      	cmp	r2, #0
10017dbc:	d032      	beq.n	10017e24 <__aeabi_d2f+0x108>
10017dbe:	2080      	movs	r0, #128	; 0x80
10017dc0:	03c0      	lsls	r0, r0, #15
10017dc2:	4302      	orrs	r2, r0
10017dc4:	0252      	lsls	r2, r2, #9
10017dc6:	0a52      	lsrs	r2, r2, #9
10017dc8:	e7d7      	b.n	10017d7a <__aeabi_d2f+0x5e>
10017dca:	0018      	movs	r0, r3
10017dcc:	3017      	adds	r0, #23
10017dce:	db14      	blt.n	10017dfa <__aeabi_d2f+0xde>
10017dd0:	2080      	movs	r0, #128	; 0x80
10017dd2:	0400      	lsls	r0, r0, #16
10017dd4:	4302      	orrs	r2, r0
10017dd6:	201e      	movs	r0, #30
10017dd8:	1ac0      	subs	r0, r0, r3
10017dda:	281f      	cmp	r0, #31
10017ddc:	dc0f      	bgt.n	10017dfe <__aeabi_d2f+0xe2>
10017dde:	0025      	movs	r5, r4
10017de0:	4b12      	ldr	r3, [pc, #72]	; (10017e2c <__aeabi_d2f+0x110>)
10017de2:	18f3      	adds	r3, r6, r3
10017de4:	409d      	lsls	r5, r3
10017de6:	1e6e      	subs	r6, r5, #1
10017de8:	41b5      	sbcs	r5, r6
10017dea:	409a      	lsls	r2, r3
10017dec:	002b      	movs	r3, r5
10017dee:	4313      	orrs	r3, r2
10017df0:	0022      	movs	r2, r4
10017df2:	40c2      	lsrs	r2, r0
10017df4:	431a      	orrs	r2, r3
10017df6:	2300      	movs	r3, #0
10017df8:	e7ab      	b.n	10017d52 <__aeabi_d2f+0x36>
10017dfa:	2300      	movs	r3, #0
10017dfc:	e7d5      	b.n	10017daa <__aeabi_d2f+0x8e>
10017dfe:	2502      	movs	r5, #2
10017e00:	426d      	negs	r5, r5
10017e02:	1aeb      	subs	r3, r5, r3
10017e04:	0015      	movs	r5, r2
10017e06:	40dd      	lsrs	r5, r3
10017e08:	2820      	cmp	r0, #32
10017e0a:	d009      	beq.n	10017e20 <__aeabi_d2f+0x104>
10017e0c:	4b08      	ldr	r3, [pc, #32]	; (10017e30 <__aeabi_d2f+0x114>)
10017e0e:	18f3      	adds	r3, r6, r3
10017e10:	409a      	lsls	r2, r3
10017e12:	4314      	orrs	r4, r2
10017e14:	1e62      	subs	r2, r4, #1
10017e16:	4194      	sbcs	r4, r2
10017e18:	0022      	movs	r2, r4
10017e1a:	2300      	movs	r3, #0
10017e1c:	432a      	orrs	r2, r5
10017e1e:	e798      	b.n	10017d52 <__aeabi_d2f+0x36>
10017e20:	2200      	movs	r2, #0
10017e22:	e7f6      	b.n	10017e12 <__aeabi_d2f+0xf6>
10017e24:	2200      	movs	r2, #0
10017e26:	e7a8      	b.n	10017d7a <__aeabi_d2f+0x5e>
10017e28:	fffffc80 	.word	0xfffffc80
10017e2c:	fffffc82 	.word	0xfffffc82
10017e30:	fffffca2 	.word	0xfffffca2

10017e34 <__clzsi2>:
10017e34:	211c      	movs	r1, #28
10017e36:	2301      	movs	r3, #1
10017e38:	041b      	lsls	r3, r3, #16
10017e3a:	4298      	cmp	r0, r3
10017e3c:	d301      	bcc.n	10017e42 <__clzsi2+0xe>
10017e3e:	0c00      	lsrs	r0, r0, #16
10017e40:	3910      	subs	r1, #16
10017e42:	0a1b      	lsrs	r3, r3, #8
10017e44:	4298      	cmp	r0, r3
10017e46:	d301      	bcc.n	10017e4c <__clzsi2+0x18>
10017e48:	0a00      	lsrs	r0, r0, #8
10017e4a:	3908      	subs	r1, #8
10017e4c:	091b      	lsrs	r3, r3, #4
10017e4e:	4298      	cmp	r0, r3
10017e50:	d301      	bcc.n	10017e56 <__clzsi2+0x22>
10017e52:	0900      	lsrs	r0, r0, #4
10017e54:	3904      	subs	r1, #4
10017e56:	a202      	add	r2, pc, #8	; (adr r2, 10017e60 <__clzsi2+0x2c>)
10017e58:	5c10      	ldrb	r0, [r2, r0]
10017e5a:	1840      	adds	r0, r0, r1
10017e5c:	4770      	bx	lr
10017e5e:	46c0      	nop			; (mov r8, r8)
10017e60:	02020304 	.word	0x02020304
10017e64:	01010101 	.word	0x01010101
	...

10017e70 <__divdi3>:
10017e70:	b5f0      	push	{r4, r5, r6, r7, lr}
10017e72:	4644      	mov	r4, r8
10017e74:	465f      	mov	r7, fp
10017e76:	4656      	mov	r6, sl
10017e78:	464d      	mov	r5, r9
10017e7a:	b4f0      	push	{r4, r5, r6, r7}
10017e7c:	001c      	movs	r4, r3
10017e7e:	b083      	sub	sp, #12
10017e80:	2900      	cmp	r1, #0
10017e82:	da00      	bge.n	10017e86 <__divdi3+0x16>
10017e84:	e092      	b.n	10017fac <__divdi3+0x13c>
10017e86:	000f      	movs	r7, r1
10017e88:	2100      	movs	r1, #0
10017e8a:	0006      	movs	r6, r0
10017e8c:	468a      	mov	sl, r1
10017e8e:	0010      	movs	r0, r2
10017e90:	0019      	movs	r1, r3
10017e92:	2c00      	cmp	r4, #0
10017e94:	da00      	bge.n	10017e98 <__divdi3+0x28>
10017e96:	e080      	b.n	10017f9a <__divdi3+0x12a>
10017e98:	0034      	movs	r4, r6
10017e9a:	003d      	movs	r5, r7
10017e9c:	4681      	mov	r9, r0
10017e9e:	4688      	mov	r8, r1
10017ea0:	42b9      	cmp	r1, r7
10017ea2:	d869      	bhi.n	10017f78 <__divdi3+0x108>
10017ea4:	d066      	beq.n	10017f74 <__divdi3+0x104>
10017ea6:	4641      	mov	r1, r8
10017ea8:	4648      	mov	r0, r9
10017eaa:	f000 f8bf 	bl	1001802c <__clzdi2>
10017eae:	4683      	mov	fp, r0
10017eb0:	0039      	movs	r1, r7
10017eb2:	0030      	movs	r0, r6
10017eb4:	f000 f8ba 	bl	1001802c <__clzdi2>
10017eb8:	465b      	mov	r3, fp
10017eba:	1a1b      	subs	r3, r3, r0
10017ebc:	469c      	mov	ip, r3
10017ebe:	3b20      	subs	r3, #32
10017ec0:	469b      	mov	fp, r3
10017ec2:	d500      	bpl.n	10017ec6 <__divdi3+0x56>
10017ec4:	e086      	b.n	10017fd4 <__divdi3+0x164>
10017ec6:	4649      	mov	r1, r9
10017ec8:	4658      	mov	r0, fp
10017eca:	4081      	lsls	r1, r0
10017ecc:	000b      	movs	r3, r1
10017ece:	4649      	mov	r1, r9
10017ed0:	4660      	mov	r0, ip
10017ed2:	4081      	lsls	r1, r0
10017ed4:	000a      	movs	r2, r1
10017ed6:	42bb      	cmp	r3, r7
10017ed8:	d900      	bls.n	10017edc <__divdi3+0x6c>
10017eda:	e071      	b.n	10017fc0 <__divdi3+0x150>
10017edc:	d06d      	beq.n	10017fba <__divdi3+0x14a>
10017ede:	0034      	movs	r4, r6
10017ee0:	003d      	movs	r5, r7
10017ee2:	4659      	mov	r1, fp
10017ee4:	1aa4      	subs	r4, r4, r2
10017ee6:	419d      	sbcs	r5, r3
10017ee8:	2900      	cmp	r1, #0
10017eea:	da00      	bge.n	10017eee <__divdi3+0x7e>
10017eec:	e089      	b.n	10018002 <__divdi3+0x192>
10017eee:	2100      	movs	r1, #0
10017ef0:	2000      	movs	r0, #0
10017ef2:	2601      	movs	r6, #1
10017ef4:	9000      	str	r0, [sp, #0]
10017ef6:	9101      	str	r1, [sp, #4]
10017ef8:	4659      	mov	r1, fp
10017efa:	408e      	lsls	r6, r1
10017efc:	9601      	str	r6, [sp, #4]
10017efe:	4661      	mov	r1, ip
10017f00:	2601      	movs	r6, #1
10017f02:	408e      	lsls	r6, r1
10017f04:	4661      	mov	r1, ip
10017f06:	9600      	str	r6, [sp, #0]
10017f08:	2900      	cmp	r1, #0
10017f0a:	d060      	beq.n	10017fce <__divdi3+0x15e>
10017f0c:	07d9      	lsls	r1, r3, #31
10017f0e:	0856      	lsrs	r6, r2, #1
10017f10:	430e      	orrs	r6, r1
10017f12:	085f      	lsrs	r7, r3, #1
10017f14:	4661      	mov	r1, ip
10017f16:	2201      	movs	r2, #1
10017f18:	2300      	movs	r3, #0
10017f1a:	e00c      	b.n	10017f36 <__divdi3+0xc6>
10017f1c:	42af      	cmp	r7, r5
10017f1e:	d101      	bne.n	10017f24 <__divdi3+0xb4>
10017f20:	42a6      	cmp	r6, r4
10017f22:	d80a      	bhi.n	10017f3a <__divdi3+0xca>
10017f24:	1ba4      	subs	r4, r4, r6
10017f26:	41bd      	sbcs	r5, r7
10017f28:	1924      	adds	r4, r4, r4
10017f2a:	416d      	adcs	r5, r5
10017f2c:	3901      	subs	r1, #1
10017f2e:	18a4      	adds	r4, r4, r2
10017f30:	415d      	adcs	r5, r3
10017f32:	2900      	cmp	r1, #0
10017f34:	d006      	beq.n	10017f44 <__divdi3+0xd4>
10017f36:	42af      	cmp	r7, r5
10017f38:	d9f0      	bls.n	10017f1c <__divdi3+0xac>
10017f3a:	3901      	subs	r1, #1
10017f3c:	1924      	adds	r4, r4, r4
10017f3e:	416d      	adcs	r5, r5
10017f40:	2900      	cmp	r1, #0
10017f42:	d1f8      	bne.n	10017f36 <__divdi3+0xc6>
10017f44:	465b      	mov	r3, fp
10017f46:	9800      	ldr	r0, [sp, #0]
10017f48:	9901      	ldr	r1, [sp, #4]
10017f4a:	1900      	adds	r0, r0, r4
10017f4c:	4169      	adcs	r1, r5
10017f4e:	2b00      	cmp	r3, #0
10017f50:	db4c      	blt.n	10017fec <__divdi3+0x17c>
10017f52:	002e      	movs	r6, r5
10017f54:	40de      	lsrs	r6, r3
10017f56:	4663      	mov	r3, ip
10017f58:	002c      	movs	r4, r5
10017f5a:	40dc      	lsrs	r4, r3
10017f5c:	465b      	mov	r3, fp
10017f5e:	2b00      	cmp	r3, #0
10017f60:	db5a      	blt.n	10018018 <__divdi3+0x1a8>
10017f62:	0034      	movs	r4, r6
10017f64:	409c      	lsls	r4, r3
10017f66:	0023      	movs	r3, r4
10017f68:	4664      	mov	r4, ip
10017f6a:	40a6      	lsls	r6, r4
10017f6c:	0032      	movs	r2, r6
10017f6e:	1a80      	subs	r0, r0, r2
10017f70:	4199      	sbcs	r1, r3
10017f72:	e003      	b.n	10017f7c <__divdi3+0x10c>
10017f74:	42b0      	cmp	r0, r6
10017f76:	d996      	bls.n	10017ea6 <__divdi3+0x36>
10017f78:	2000      	movs	r0, #0
10017f7a:	2100      	movs	r1, #0
10017f7c:	4653      	mov	r3, sl
10017f7e:	2b00      	cmp	r3, #0
10017f80:	d004      	beq.n	10017f8c <__divdi3+0x11c>
10017f82:	0003      	movs	r3, r0
10017f84:	000c      	movs	r4, r1
10017f86:	2100      	movs	r1, #0
10017f88:	4258      	negs	r0, r3
10017f8a:	41a1      	sbcs	r1, r4
10017f8c:	b003      	add	sp, #12
10017f8e:	bc3c      	pop	{r2, r3, r4, r5}
10017f90:	4690      	mov	r8, r2
10017f92:	4699      	mov	r9, r3
10017f94:	46a2      	mov	sl, r4
10017f96:	46ab      	mov	fp, r5
10017f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017f9a:	4653      	mov	r3, sl
10017f9c:	43db      	mvns	r3, r3
10017f9e:	000c      	movs	r4, r1
10017fa0:	469a      	mov	sl, r3
10017fa2:	0013      	movs	r3, r2
10017fa4:	2100      	movs	r1, #0
10017fa6:	4258      	negs	r0, r3
10017fa8:	41a1      	sbcs	r1, r4
10017faa:	e775      	b.n	10017e98 <__divdi3+0x28>
10017fac:	2700      	movs	r7, #0
10017fae:	4246      	negs	r6, r0
10017fb0:	418f      	sbcs	r7, r1
10017fb2:	2101      	movs	r1, #1
10017fb4:	4249      	negs	r1, r1
10017fb6:	468a      	mov	sl, r1
10017fb8:	e769      	b.n	10017e8e <__divdi3+0x1e>
10017fba:	42b1      	cmp	r1, r6
10017fbc:	d800      	bhi.n	10017fc0 <__divdi3+0x150>
10017fbe:	e78e      	b.n	10017ede <__divdi3+0x6e>
10017fc0:	2100      	movs	r1, #0
10017fc2:	2000      	movs	r0, #0
10017fc4:	9000      	str	r0, [sp, #0]
10017fc6:	9101      	str	r1, [sp, #4]
10017fc8:	4661      	mov	r1, ip
10017fca:	2900      	cmp	r1, #0
10017fcc:	d19e      	bne.n	10017f0c <__divdi3+0x9c>
10017fce:	9800      	ldr	r0, [sp, #0]
10017fd0:	9901      	ldr	r1, [sp, #4]
10017fd2:	e7d3      	b.n	10017f7c <__divdi3+0x10c>
10017fd4:	4662      	mov	r2, ip
10017fd6:	4640      	mov	r0, r8
10017fd8:	2320      	movs	r3, #32
10017fda:	4649      	mov	r1, r9
10017fdc:	4090      	lsls	r0, r2
10017fde:	1a9b      	subs	r3, r3, r2
10017fe0:	40d9      	lsrs	r1, r3
10017fe2:	0003      	movs	r3, r0
10017fe4:	9100      	str	r1, [sp, #0]
10017fe6:	9900      	ldr	r1, [sp, #0]
10017fe8:	430b      	orrs	r3, r1
10017fea:	e770      	b.n	10017ece <__divdi3+0x5e>
10017fec:	4662      	mov	r2, ip
10017fee:	2320      	movs	r3, #32
10017ff0:	1a9b      	subs	r3, r3, r2
10017ff2:	002a      	movs	r2, r5
10017ff4:	409a      	lsls	r2, r3
10017ff6:	0026      	movs	r6, r4
10017ff8:	0013      	movs	r3, r2
10017ffa:	4662      	mov	r2, ip
10017ffc:	40d6      	lsrs	r6, r2
10017ffe:	431e      	orrs	r6, r3
10018000:	e7a9      	b.n	10017f56 <__divdi3+0xe6>
10018002:	4661      	mov	r1, ip
10018004:	2620      	movs	r6, #32
10018006:	2701      	movs	r7, #1
10018008:	1a76      	subs	r6, r6, r1
1001800a:	2000      	movs	r0, #0
1001800c:	2100      	movs	r1, #0
1001800e:	40f7      	lsrs	r7, r6
10018010:	9000      	str	r0, [sp, #0]
10018012:	9101      	str	r1, [sp, #4]
10018014:	9701      	str	r7, [sp, #4]
10018016:	e772      	b.n	10017efe <__divdi3+0x8e>
10018018:	4662      	mov	r2, ip
1001801a:	2320      	movs	r3, #32
1001801c:	0035      	movs	r5, r6
1001801e:	4094      	lsls	r4, r2
10018020:	1a9b      	subs	r3, r3, r2
10018022:	40dd      	lsrs	r5, r3
10018024:	0023      	movs	r3, r4
10018026:	432b      	orrs	r3, r5
10018028:	e79e      	b.n	10017f68 <__divdi3+0xf8>
1001802a:	46c0      	nop			; (mov r8, r8)

1001802c <__clzdi2>:
1001802c:	b510      	push	{r4, lr}
1001802e:	2900      	cmp	r1, #0
10018030:	d103      	bne.n	1001803a <__clzdi2+0xe>
10018032:	f7ff feff 	bl	10017e34 <__clzsi2>
10018036:	3020      	adds	r0, #32
10018038:	e002      	b.n	10018040 <__clzdi2+0x14>
1001803a:	1c08      	adds	r0, r1, #0
1001803c:	f7ff fefa 	bl	10017e34 <__clzsi2>
10018040:	bd10      	pop	{r4, pc}
10018042:	46c0      	nop			; (mov r8, r8)

10018044 <__errno>:
10018044:	4b01      	ldr	r3, [pc, #4]	; (1001804c <__errno+0x8>)
10018046:	6818      	ldr	r0, [r3, #0]
10018048:	4770      	bx	lr
1001804a:	46c0      	nop			; (mov r8, r8)
1001804c:	1001b464 	.word	0x1001b464

10018050 <__libc_init_array>:
10018050:	4b0e      	ldr	r3, [pc, #56]	; (1001808c <__libc_init_array+0x3c>)
10018052:	b570      	push	{r4, r5, r6, lr}
10018054:	2500      	movs	r5, #0
10018056:	001e      	movs	r6, r3
10018058:	4c0d      	ldr	r4, [pc, #52]	; (10018090 <__libc_init_array+0x40>)
1001805a:	1ae4      	subs	r4, r4, r3
1001805c:	10a4      	asrs	r4, r4, #2
1001805e:	42a5      	cmp	r5, r4
10018060:	d004      	beq.n	1001806c <__libc_init_array+0x1c>
10018062:	00ab      	lsls	r3, r5, #2
10018064:	58f3      	ldr	r3, [r6, r3]
10018066:	4798      	blx	r3
10018068:	3501      	adds	r5, #1
1001806a:	e7f8      	b.n	1001805e <__libc_init_array+0xe>
1001806c:	f003 f988 	bl	1001b380 <_init>
10018070:	4b08      	ldr	r3, [pc, #32]	; (10018094 <__libc_init_array+0x44>)
10018072:	2500      	movs	r5, #0
10018074:	001e      	movs	r6, r3
10018076:	4c08      	ldr	r4, [pc, #32]	; (10018098 <__libc_init_array+0x48>)
10018078:	1ae4      	subs	r4, r4, r3
1001807a:	10a4      	asrs	r4, r4, #2
1001807c:	42a5      	cmp	r5, r4
1001807e:	d004      	beq.n	1001808a <__libc_init_array+0x3a>
10018080:	00ab      	lsls	r3, r5, #2
10018082:	58f3      	ldr	r3, [r6, r3]
10018084:	4798      	blx	r3
10018086:	3501      	adds	r5, #1
10018088:	e7f8      	b.n	1001807c <__libc_init_array+0x2c>
1001808a:	bd70      	pop	{r4, r5, r6, pc}
1001808c:	1001b38c 	.word	0x1001b38c
10018090:	1001b38c 	.word	0x1001b38c
10018094:	1001b38c 	.word	0x1001b38c
10018098:	1001b390 	.word	0x1001b390

1001809c <malloc>:
1001809c:	b510      	push	{r4, lr}
1001809e:	4b03      	ldr	r3, [pc, #12]	; (100180ac <malloc+0x10>)
100180a0:	0001      	movs	r1, r0
100180a2:	6818      	ldr	r0, [r3, #0]
100180a4:	f000 f880 	bl	100181a8 <_malloc_r>
100180a8:	bd10      	pop	{r4, pc}
100180aa:	46c0      	nop			; (mov r8, r8)
100180ac:	1001b464 	.word	0x1001b464

100180b0 <memcmp>:
100180b0:	b530      	push	{r4, r5, lr}
100180b2:	2400      	movs	r4, #0
100180b4:	42a2      	cmp	r2, r4
100180b6:	d008      	beq.n	100180ca <memcmp+0x1a>
100180b8:	5d03      	ldrb	r3, [r0, r4]
100180ba:	1c65      	adds	r5, r4, #1
100180bc:	5d0c      	ldrb	r4, [r1, r4]
100180be:	42a3      	cmp	r3, r4
100180c0:	d001      	beq.n	100180c6 <memcmp+0x16>
100180c2:	1b18      	subs	r0, r3, r4
100180c4:	e002      	b.n	100180cc <memcmp+0x1c>
100180c6:	002c      	movs	r4, r5
100180c8:	e7f4      	b.n	100180b4 <memcmp+0x4>
100180ca:	2000      	movs	r0, #0
100180cc:	bd30      	pop	{r4, r5, pc}

100180ce <memcpy>:
100180ce:	2300      	movs	r3, #0
100180d0:	b510      	push	{r4, lr}
100180d2:	429a      	cmp	r2, r3
100180d4:	d003      	beq.n	100180de <memcpy+0x10>
100180d6:	5ccc      	ldrb	r4, [r1, r3]
100180d8:	54c4      	strb	r4, [r0, r3]
100180da:	3301      	adds	r3, #1
100180dc:	e7f9      	b.n	100180d2 <memcpy+0x4>
100180de:	bd10      	pop	{r4, pc}

100180e0 <memmove>:
100180e0:	b510      	push	{r4, lr}
100180e2:	4288      	cmp	r0, r1
100180e4:	d902      	bls.n	100180ec <memmove+0xc>
100180e6:	188b      	adds	r3, r1, r2
100180e8:	4298      	cmp	r0, r3
100180ea:	d301      	bcc.n	100180f0 <memmove+0x10>
100180ec:	2300      	movs	r3, #0
100180ee:	e005      	b.n	100180fc <memmove+0x1c>
100180f0:	1a9b      	subs	r3, r3, r2
100180f2:	3a01      	subs	r2, #1
100180f4:	d308      	bcc.n	10018108 <memmove+0x28>
100180f6:	5c99      	ldrb	r1, [r3, r2]
100180f8:	5481      	strb	r1, [r0, r2]
100180fa:	e7fa      	b.n	100180f2 <memmove+0x12>
100180fc:	4293      	cmp	r3, r2
100180fe:	d003      	beq.n	10018108 <memmove+0x28>
10018100:	5ccc      	ldrb	r4, [r1, r3]
10018102:	54c4      	strb	r4, [r0, r3]
10018104:	3301      	adds	r3, #1
10018106:	e7f9      	b.n	100180fc <memmove+0x1c>
10018108:	bd10      	pop	{r4, pc}

1001810a <memset>:
1001810a:	0003      	movs	r3, r0
1001810c:	1882      	adds	r2, r0, r2
1001810e:	4293      	cmp	r3, r2
10018110:	d002      	beq.n	10018118 <memset+0xe>
10018112:	7019      	strb	r1, [r3, #0]
10018114:	3301      	adds	r3, #1
10018116:	e7fa      	b.n	1001810e <memset+0x4>
10018118:	4770      	bx	lr
	...

1001811c <_free_r>:
1001811c:	b530      	push	{r4, r5, lr}
1001811e:	2900      	cmp	r1, #0
10018120:	d03e      	beq.n	100181a0 <_free_r+0x84>
10018122:	3904      	subs	r1, #4
10018124:	680b      	ldr	r3, [r1, #0]
10018126:	2b00      	cmp	r3, #0
10018128:	da00      	bge.n	1001812c <_free_r+0x10>
1001812a:	18c9      	adds	r1, r1, r3
1001812c:	4a1d      	ldr	r2, [pc, #116]	; (100181a4 <_free_r+0x88>)
1001812e:	6813      	ldr	r3, [r2, #0]
10018130:	0014      	movs	r4, r2
10018132:	2b00      	cmp	r3, #0
10018134:	d102      	bne.n	1001813c <_free_r+0x20>
10018136:	604b      	str	r3, [r1, #4]
10018138:	6011      	str	r1, [r2, #0]
1001813a:	e031      	b.n	100181a0 <_free_r+0x84>
1001813c:	428b      	cmp	r3, r1
1001813e:	d90d      	bls.n	1001815c <_free_r+0x40>
10018140:	680a      	ldr	r2, [r1, #0]
10018142:	1888      	adds	r0, r1, r2
10018144:	4283      	cmp	r3, r0
10018146:	d103      	bne.n	10018150 <_free_r+0x34>
10018148:	6818      	ldr	r0, [r3, #0]
1001814a:	685b      	ldr	r3, [r3, #4]
1001814c:	1882      	adds	r2, r0, r2
1001814e:	600a      	str	r2, [r1, #0]
10018150:	604b      	str	r3, [r1, #4]
10018152:	6021      	str	r1, [r4, #0]
10018154:	e024      	b.n	100181a0 <_free_r+0x84>
10018156:	428a      	cmp	r2, r1
10018158:	d803      	bhi.n	10018162 <_free_r+0x46>
1001815a:	0013      	movs	r3, r2
1001815c:	685a      	ldr	r2, [r3, #4]
1001815e:	2a00      	cmp	r2, #0
10018160:	d1f9      	bne.n	10018156 <_free_r+0x3a>
10018162:	681d      	ldr	r5, [r3, #0]
10018164:	195c      	adds	r4, r3, r5
10018166:	428c      	cmp	r4, r1
10018168:	d10b      	bne.n	10018182 <_free_r+0x66>
1001816a:	6809      	ldr	r1, [r1, #0]
1001816c:	1869      	adds	r1, r5, r1
1001816e:	1858      	adds	r0, r3, r1
10018170:	6019      	str	r1, [r3, #0]
10018172:	4282      	cmp	r2, r0
10018174:	d114      	bne.n	100181a0 <_free_r+0x84>
10018176:	6810      	ldr	r0, [r2, #0]
10018178:	6852      	ldr	r2, [r2, #4]
1001817a:	1841      	adds	r1, r0, r1
1001817c:	6019      	str	r1, [r3, #0]
1001817e:	605a      	str	r2, [r3, #4]
10018180:	e00e      	b.n	100181a0 <_free_r+0x84>
10018182:	428c      	cmp	r4, r1
10018184:	d902      	bls.n	1001818c <_free_r+0x70>
10018186:	230c      	movs	r3, #12
10018188:	6003      	str	r3, [r0, #0]
1001818a:	e009      	b.n	100181a0 <_free_r+0x84>
1001818c:	6808      	ldr	r0, [r1, #0]
1001818e:	180c      	adds	r4, r1, r0
10018190:	42a2      	cmp	r2, r4
10018192:	d103      	bne.n	1001819c <_free_r+0x80>
10018194:	6814      	ldr	r4, [r2, #0]
10018196:	6852      	ldr	r2, [r2, #4]
10018198:	1820      	adds	r0, r4, r0
1001819a:	6008      	str	r0, [r1, #0]
1001819c:	604a      	str	r2, [r1, #4]
1001819e:	6059      	str	r1, [r3, #4]
100181a0:	bd30      	pop	{r4, r5, pc}
100181a2:	46c0      	nop			; (mov r8, r8)
100181a4:	1001d2d4 	.word	0x1001d2d4

100181a8 <_malloc_r>:
100181a8:	2303      	movs	r3, #3
100181aa:	b570      	push	{r4, r5, r6, lr}
100181ac:	1ccd      	adds	r5, r1, #3
100181ae:	439d      	bics	r5, r3
100181b0:	3508      	adds	r5, #8
100181b2:	0006      	movs	r6, r0
100181b4:	2d0c      	cmp	r5, #12
100181b6:	d201      	bcs.n	100181bc <_malloc_r+0x14>
100181b8:	250c      	movs	r5, #12
100181ba:	e005      	b.n	100181c8 <_malloc_r+0x20>
100181bc:	2d00      	cmp	r5, #0
100181be:	da03      	bge.n	100181c8 <_malloc_r+0x20>
100181c0:	230c      	movs	r3, #12
100181c2:	2000      	movs	r0, #0
100181c4:	6033      	str	r3, [r6, #0]
100181c6:	e040      	b.n	1001824a <_malloc_r+0xa2>
100181c8:	42a9      	cmp	r1, r5
100181ca:	d8f9      	bhi.n	100181c0 <_malloc_r+0x18>
100181cc:	4b1f      	ldr	r3, [pc, #124]	; (1001824c <_malloc_r+0xa4>)
100181ce:	681c      	ldr	r4, [r3, #0]
100181d0:	001a      	movs	r2, r3
100181d2:	0021      	movs	r1, r4
100181d4:	2900      	cmp	r1, #0
100181d6:	d013      	beq.n	10018200 <_malloc_r+0x58>
100181d8:	680b      	ldr	r3, [r1, #0]
100181da:	1b5b      	subs	r3, r3, r5
100181dc:	d40d      	bmi.n	100181fa <_malloc_r+0x52>
100181de:	2b0b      	cmp	r3, #11
100181e0:	d902      	bls.n	100181e8 <_malloc_r+0x40>
100181e2:	600b      	str	r3, [r1, #0]
100181e4:	18cc      	adds	r4, r1, r3
100181e6:	e01e      	b.n	10018226 <_malloc_r+0x7e>
100181e8:	428c      	cmp	r4, r1
100181ea:	d102      	bne.n	100181f2 <_malloc_r+0x4a>
100181ec:	6863      	ldr	r3, [r4, #4]
100181ee:	6013      	str	r3, [r2, #0]
100181f0:	e01a      	b.n	10018228 <_malloc_r+0x80>
100181f2:	684b      	ldr	r3, [r1, #4]
100181f4:	6063      	str	r3, [r4, #4]
100181f6:	000c      	movs	r4, r1
100181f8:	e016      	b.n	10018228 <_malloc_r+0x80>
100181fa:	000c      	movs	r4, r1
100181fc:	6849      	ldr	r1, [r1, #4]
100181fe:	e7e9      	b.n	100181d4 <_malloc_r+0x2c>
10018200:	4c13      	ldr	r4, [pc, #76]	; (10018250 <_malloc_r+0xa8>)
10018202:	6823      	ldr	r3, [r4, #0]
10018204:	2b00      	cmp	r3, #0
10018206:	d103      	bne.n	10018210 <_malloc_r+0x68>
10018208:	0030      	movs	r0, r6
1001820a:	f000 f8f9 	bl	10018400 <_sbrk_r>
1001820e:	6020      	str	r0, [r4, #0]
10018210:	0029      	movs	r1, r5
10018212:	0030      	movs	r0, r6
10018214:	f000 f8f4 	bl	10018400 <_sbrk_r>
10018218:	1c43      	adds	r3, r0, #1
1001821a:	d0d1      	beq.n	100181c0 <_malloc_r+0x18>
1001821c:	2303      	movs	r3, #3
1001821e:	1cc4      	adds	r4, r0, #3
10018220:	439c      	bics	r4, r3
10018222:	42a0      	cmp	r0, r4
10018224:	d10a      	bne.n	1001823c <_malloc_r+0x94>
10018226:	6025      	str	r5, [r4, #0]
10018228:	0020      	movs	r0, r4
1001822a:	2207      	movs	r2, #7
1001822c:	300b      	adds	r0, #11
1001822e:	1d23      	adds	r3, r4, #4
10018230:	4390      	bics	r0, r2
10018232:	1ac3      	subs	r3, r0, r3
10018234:	d009      	beq.n	1001824a <_malloc_r+0xa2>
10018236:	425a      	negs	r2, r3
10018238:	50e2      	str	r2, [r4, r3]
1001823a:	e006      	b.n	1001824a <_malloc_r+0xa2>
1001823c:	1a21      	subs	r1, r4, r0
1001823e:	0030      	movs	r0, r6
10018240:	f000 f8de 	bl	10018400 <_sbrk_r>
10018244:	1c43      	adds	r3, r0, #1
10018246:	d1ee      	bne.n	10018226 <_malloc_r+0x7e>
10018248:	e7ba      	b.n	100181c0 <_malloc_r+0x18>
1001824a:	bd70      	pop	{r4, r5, r6, pc}
1001824c:	1001d2d4 	.word	0x1001d2d4
10018250:	1001d2d0 	.word	0x1001d2d0

10018254 <iprintf>:
10018254:	b40f      	push	{r0, r1, r2, r3}
10018256:	4b0b      	ldr	r3, [pc, #44]	; (10018284 <iprintf+0x30>)
10018258:	b513      	push	{r0, r1, r4, lr}
1001825a:	681c      	ldr	r4, [r3, #0]
1001825c:	2c00      	cmp	r4, #0
1001825e:	d005      	beq.n	1001826c <iprintf+0x18>
10018260:	69a3      	ldr	r3, [r4, #24]
10018262:	2b00      	cmp	r3, #0
10018264:	d102      	bne.n	1001826c <iprintf+0x18>
10018266:	0020      	movs	r0, r4
10018268:	f000 fb58 	bl	1001891c <__sinit>
1001826c:	ab05      	add	r3, sp, #20
1001826e:	9a04      	ldr	r2, [sp, #16]
10018270:	68a1      	ldr	r1, [r4, #8]
10018272:	0020      	movs	r0, r4
10018274:	9301      	str	r3, [sp, #4]
10018276:	f000 fc71 	bl	10018b5c <_vfiprintf_r>
1001827a:	bc16      	pop	{r1, r2, r4}
1001827c:	bc08      	pop	{r3}
1001827e:	b004      	add	sp, #16
10018280:	4718      	bx	r3
10018282:	46c0      	nop			; (mov r8, r8)
10018284:	1001b464 	.word	0x1001b464

10018288 <putchar>:
10018288:	4b08      	ldr	r3, [pc, #32]	; (100182ac <putchar+0x24>)
1001828a:	b570      	push	{r4, r5, r6, lr}
1001828c:	681c      	ldr	r4, [r3, #0]
1001828e:	0005      	movs	r5, r0
10018290:	2c00      	cmp	r4, #0
10018292:	d005      	beq.n	100182a0 <putchar+0x18>
10018294:	69a3      	ldr	r3, [r4, #24]
10018296:	2b00      	cmp	r3, #0
10018298:	d102      	bne.n	100182a0 <putchar+0x18>
1001829a:	0020      	movs	r0, r4
1001829c:	f000 fb3e 	bl	1001891c <__sinit>
100182a0:	0029      	movs	r1, r5
100182a2:	68a2      	ldr	r2, [r4, #8]
100182a4:	0020      	movs	r0, r4
100182a6:	f000 ff05 	bl	100190b4 <_putc_r>
100182aa:	bd70      	pop	{r4, r5, r6, pc}
100182ac:	1001b464 	.word	0x1001b464

100182b0 <_puts_r>:
100182b0:	b570      	push	{r4, r5, r6, lr}
100182b2:	0005      	movs	r5, r0
100182b4:	000e      	movs	r6, r1
100182b6:	2800      	cmp	r0, #0
100182b8:	d004      	beq.n	100182c4 <_puts_r+0x14>
100182ba:	6983      	ldr	r3, [r0, #24]
100182bc:	2b00      	cmp	r3, #0
100182be:	d101      	bne.n	100182c4 <_puts_r+0x14>
100182c0:	f000 fb2c 	bl	1001891c <__sinit>
100182c4:	69ab      	ldr	r3, [r5, #24]
100182c6:	68ac      	ldr	r4, [r5, #8]
100182c8:	2b00      	cmp	r3, #0
100182ca:	d102      	bne.n	100182d2 <_puts_r+0x22>
100182cc:	0028      	movs	r0, r5
100182ce:	f000 fb25 	bl	1001891c <__sinit>
100182d2:	4b25      	ldr	r3, [pc, #148]	; (10018368 <_puts_r+0xb8>)
100182d4:	429c      	cmp	r4, r3
100182d6:	d101      	bne.n	100182dc <_puts_r+0x2c>
100182d8:	686c      	ldr	r4, [r5, #4]
100182da:	e008      	b.n	100182ee <_puts_r+0x3e>
100182dc:	4b23      	ldr	r3, [pc, #140]	; (1001836c <_puts_r+0xbc>)
100182de:	429c      	cmp	r4, r3
100182e0:	d101      	bne.n	100182e6 <_puts_r+0x36>
100182e2:	68ac      	ldr	r4, [r5, #8]
100182e4:	e003      	b.n	100182ee <_puts_r+0x3e>
100182e6:	4b22      	ldr	r3, [pc, #136]	; (10018370 <_puts_r+0xc0>)
100182e8:	429c      	cmp	r4, r3
100182ea:	d100      	bne.n	100182ee <_puts_r+0x3e>
100182ec:	68ec      	ldr	r4, [r5, #12]
100182ee:	89a3      	ldrh	r3, [r4, #12]
100182f0:	071b      	lsls	r3, r3, #28
100182f2:	d502      	bpl.n	100182fa <_puts_r+0x4a>
100182f4:	6923      	ldr	r3, [r4, #16]
100182f6:	2b00      	cmp	r3, #0
100182f8:	d111      	bne.n	1001831e <_puts_r+0x6e>
100182fa:	0021      	movs	r1, r4
100182fc:	0028      	movs	r0, r5
100182fe:	f000 f9a3 	bl	10018648 <__swsetup_r>
10018302:	2800      	cmp	r0, #0
10018304:	d00b      	beq.n	1001831e <_puts_r+0x6e>
10018306:	2001      	movs	r0, #1
10018308:	4240      	negs	r0, r0
1001830a:	e02b      	b.n	10018364 <_puts_r+0xb4>
1001830c:	3b01      	subs	r3, #1
1001830e:	3601      	adds	r6, #1
10018310:	60a3      	str	r3, [r4, #8]
10018312:	2b00      	cmp	r3, #0
10018314:	db08      	blt.n	10018328 <_puts_r+0x78>
10018316:	6823      	ldr	r3, [r4, #0]
10018318:	1c5a      	adds	r2, r3, #1
1001831a:	6022      	str	r2, [r4, #0]
1001831c:	7019      	strb	r1, [r3, #0]
1001831e:	7831      	ldrb	r1, [r6, #0]
10018320:	68a3      	ldr	r3, [r4, #8]
10018322:	2900      	cmp	r1, #0
10018324:	d1f2      	bne.n	1001830c <_puts_r+0x5c>
10018326:	e00b      	b.n	10018340 <_puts_r+0x90>
10018328:	69a2      	ldr	r2, [r4, #24]
1001832a:	4293      	cmp	r3, r2
1001832c:	db01      	blt.n	10018332 <_puts_r+0x82>
1001832e:	290a      	cmp	r1, #10
10018330:	d1f1      	bne.n	10018316 <_puts_r+0x66>
10018332:	0022      	movs	r2, r4
10018334:	0028      	movs	r0, r5
10018336:	f000 f92f 	bl	10018598 <__swbuf_r>
1001833a:	1c43      	adds	r3, r0, #1
1001833c:	d1ef      	bne.n	1001831e <_puts_r+0x6e>
1001833e:	e7e2      	b.n	10018306 <_puts_r+0x56>
10018340:	3b01      	subs	r3, #1
10018342:	60a3      	str	r3, [r4, #8]
10018344:	2b00      	cmp	r3, #0
10018346:	da08      	bge.n	1001835a <_puts_r+0xaa>
10018348:	0022      	movs	r2, r4
1001834a:	310a      	adds	r1, #10
1001834c:	0028      	movs	r0, r5
1001834e:	f000 f923 	bl	10018598 <__swbuf_r>
10018352:	1c43      	adds	r3, r0, #1
10018354:	d0d7      	beq.n	10018306 <_puts_r+0x56>
10018356:	200a      	movs	r0, #10
10018358:	e004      	b.n	10018364 <_puts_r+0xb4>
1001835a:	200a      	movs	r0, #10
1001835c:	6823      	ldr	r3, [r4, #0]
1001835e:	1c5a      	adds	r2, r3, #1
10018360:	6022      	str	r2, [r4, #0]
10018362:	7018      	strb	r0, [r3, #0]
10018364:	bd70      	pop	{r4, r5, r6, pc}
10018366:	46c0      	nop			; (mov r8, r8)
10018368:	1001b2ec 	.word	0x1001b2ec
1001836c:	1001b30c 	.word	0x1001b30c
10018370:	1001b32c 	.word	0x1001b32c

10018374 <puts>:
10018374:	b510      	push	{r4, lr}
10018376:	4b03      	ldr	r3, [pc, #12]	; (10018384 <puts+0x10>)
10018378:	0001      	movs	r1, r0
1001837a:	6818      	ldr	r0, [r3, #0]
1001837c:	f7ff ff98 	bl	100182b0 <_puts_r>
10018380:	bd10      	pop	{r4, pc}
10018382:	46c0      	nop			; (mov r8, r8)
10018384:	1001b464 	.word	0x1001b464

10018388 <rand>:
10018388:	4b15      	ldr	r3, [pc, #84]	; (100183e0 <rand+0x58>)
1001838a:	b510      	push	{r4, lr}
1001838c:	681c      	ldr	r4, [r3, #0]
1001838e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10018390:	2b00      	cmp	r3, #0
10018392:	d115      	bne.n	100183c0 <rand+0x38>
10018394:	2018      	movs	r0, #24
10018396:	f7ff fe81 	bl	1001809c <malloc>
1001839a:	4b12      	ldr	r3, [pc, #72]	; (100183e4 <rand+0x5c>)
1001839c:	63a0      	str	r0, [r4, #56]	; 0x38
1001839e:	8003      	strh	r3, [r0, #0]
100183a0:	4b11      	ldr	r3, [pc, #68]	; (100183e8 <rand+0x60>)
100183a2:	2201      	movs	r2, #1
100183a4:	8043      	strh	r3, [r0, #2]
100183a6:	4b11      	ldr	r3, [pc, #68]	; (100183ec <rand+0x64>)
100183a8:	8083      	strh	r3, [r0, #4]
100183aa:	4b11      	ldr	r3, [pc, #68]	; (100183f0 <rand+0x68>)
100183ac:	80c3      	strh	r3, [r0, #6]
100183ae:	4b11      	ldr	r3, [pc, #68]	; (100183f4 <rand+0x6c>)
100183b0:	8103      	strh	r3, [r0, #8]
100183b2:	2305      	movs	r3, #5
100183b4:	8143      	strh	r3, [r0, #10]
100183b6:	3306      	adds	r3, #6
100183b8:	8183      	strh	r3, [r0, #12]
100183ba:	2300      	movs	r3, #0
100183bc:	6102      	str	r2, [r0, #16]
100183be:	6143      	str	r3, [r0, #20]
100183c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100183c2:	4a0d      	ldr	r2, [pc, #52]	; (100183f8 <rand+0x70>)
100183c4:	6920      	ldr	r0, [r4, #16]
100183c6:	6961      	ldr	r1, [r4, #20]
100183c8:	4b0c      	ldr	r3, [pc, #48]	; (100183fc <rand+0x74>)
100183ca:	f7fc ff05 	bl	100151d8 <__aeabi_lmul>
100183ce:	2201      	movs	r2, #1
100183d0:	2300      	movs	r3, #0
100183d2:	1880      	adds	r0, r0, r2
100183d4:	4159      	adcs	r1, r3
100183d6:	6120      	str	r0, [r4, #16]
100183d8:	6161      	str	r1, [r4, #20]
100183da:	0048      	lsls	r0, r1, #1
100183dc:	0840      	lsrs	r0, r0, #1
100183de:	bd10      	pop	{r4, pc}
100183e0:	1001b464 	.word	0x1001b464
100183e4:	0000330e 	.word	0x0000330e
100183e8:	ffffabcd 	.word	0xffffabcd
100183ec:	00001234 	.word	0x00001234
100183f0:	ffffe66d 	.word	0xffffe66d
100183f4:	ffffdeec 	.word	0xffffdeec
100183f8:	4c957f2d 	.word	0x4c957f2d
100183fc:	5851f42d 	.word	0x5851f42d

10018400 <_sbrk_r>:
10018400:	2300      	movs	r3, #0
10018402:	b570      	push	{r4, r5, r6, lr}
10018404:	4c06      	ldr	r4, [pc, #24]	; (10018420 <_sbrk_r+0x20>)
10018406:	0005      	movs	r5, r0
10018408:	0008      	movs	r0, r1
1001840a:	6023      	str	r3, [r4, #0]
1001840c:	f7f5 fc24 	bl	1000dc58 <_sbrk>
10018410:	1c43      	adds	r3, r0, #1
10018412:	d103      	bne.n	1001841c <_sbrk_r+0x1c>
10018414:	6823      	ldr	r3, [r4, #0]
10018416:	2b00      	cmp	r3, #0
10018418:	d000      	beq.n	1001841c <_sbrk_r+0x1c>
1001841a:	602b      	str	r3, [r5, #0]
1001841c:	bd70      	pop	{r4, r5, r6, pc}
1001841e:	46c0      	nop			; (mov r8, r8)
10018420:	1001e878 	.word	0x1001e878

10018424 <setbuf>:
10018424:	424a      	negs	r2, r1
10018426:	414a      	adcs	r2, r1
10018428:	2380      	movs	r3, #128	; 0x80
1001842a:	b510      	push	{r4, lr}
1001842c:	0052      	lsls	r2, r2, #1
1001842e:	00db      	lsls	r3, r3, #3
10018430:	f000 f802 	bl	10018438 <setvbuf>
10018434:	bd10      	pop	{r4, pc}
	...

10018438 <setvbuf>:
10018438:	b5f0      	push	{r4, r5, r6, r7, lr}
1001843a:	001d      	movs	r5, r3
1001843c:	4b51      	ldr	r3, [pc, #324]	; (10018584 <setvbuf+0x14c>)
1001843e:	b085      	sub	sp, #20
10018440:	681e      	ldr	r6, [r3, #0]
10018442:	0004      	movs	r4, r0
10018444:	000f      	movs	r7, r1
10018446:	9200      	str	r2, [sp, #0]
10018448:	2e00      	cmp	r6, #0
1001844a:	d005      	beq.n	10018458 <setvbuf+0x20>
1001844c:	69b3      	ldr	r3, [r6, #24]
1001844e:	2b00      	cmp	r3, #0
10018450:	d102      	bne.n	10018458 <setvbuf+0x20>
10018452:	0030      	movs	r0, r6
10018454:	f000 fa62 	bl	1001891c <__sinit>
10018458:	4b4b      	ldr	r3, [pc, #300]	; (10018588 <setvbuf+0x150>)
1001845a:	429c      	cmp	r4, r3
1001845c:	d101      	bne.n	10018462 <setvbuf+0x2a>
1001845e:	6874      	ldr	r4, [r6, #4]
10018460:	e008      	b.n	10018474 <setvbuf+0x3c>
10018462:	4b4a      	ldr	r3, [pc, #296]	; (1001858c <setvbuf+0x154>)
10018464:	429c      	cmp	r4, r3
10018466:	d101      	bne.n	1001846c <setvbuf+0x34>
10018468:	68b4      	ldr	r4, [r6, #8]
1001846a:	e003      	b.n	10018474 <setvbuf+0x3c>
1001846c:	4b48      	ldr	r3, [pc, #288]	; (10018590 <setvbuf+0x158>)
1001846e:	429c      	cmp	r4, r3
10018470:	d100      	bne.n	10018474 <setvbuf+0x3c>
10018472:	68f4      	ldr	r4, [r6, #12]
10018474:	9b00      	ldr	r3, [sp, #0]
10018476:	2b02      	cmp	r3, #2
10018478:	d005      	beq.n	10018486 <setvbuf+0x4e>
1001847a:	2b01      	cmp	r3, #1
1001847c:	d900      	bls.n	10018480 <setvbuf+0x48>
1001847e:	e07c      	b.n	1001857a <setvbuf+0x142>
10018480:	2d00      	cmp	r5, #0
10018482:	da00      	bge.n	10018486 <setvbuf+0x4e>
10018484:	e079      	b.n	1001857a <setvbuf+0x142>
10018486:	0021      	movs	r1, r4
10018488:	0030      	movs	r0, r6
1001848a:	f000 f9d9 	bl	10018840 <_fflush_r>
1001848e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018490:	2900      	cmp	r1, #0
10018492:	d008      	beq.n	100184a6 <setvbuf+0x6e>
10018494:	0023      	movs	r3, r4
10018496:	3344      	adds	r3, #68	; 0x44
10018498:	4299      	cmp	r1, r3
1001849a:	d002      	beq.n	100184a2 <setvbuf+0x6a>
1001849c:	0030      	movs	r0, r6
1001849e:	f7ff fe3d 	bl	1001811c <_free_r>
100184a2:	2300      	movs	r3, #0
100184a4:	6363      	str	r3, [r4, #52]	; 0x34
100184a6:	2300      	movs	r3, #0
100184a8:	61a3      	str	r3, [r4, #24]
100184aa:	6063      	str	r3, [r4, #4]
100184ac:	89a3      	ldrh	r3, [r4, #12]
100184ae:	061b      	lsls	r3, r3, #24
100184b0:	d503      	bpl.n	100184ba <setvbuf+0x82>
100184b2:	6921      	ldr	r1, [r4, #16]
100184b4:	0030      	movs	r0, r6
100184b6:	f7ff fe31 	bl	1001811c <_free_r>
100184ba:	89a2      	ldrh	r2, [r4, #12]
100184bc:	4b35      	ldr	r3, [pc, #212]	; (10018594 <setvbuf+0x15c>)
100184be:	4013      	ands	r3, r2
100184c0:	81a3      	strh	r3, [r4, #12]
100184c2:	9b00      	ldr	r3, [sp, #0]
100184c4:	2b02      	cmp	r3, #2
100184c6:	d021      	beq.n	1001850c <setvbuf+0xd4>
100184c8:	ab03      	add	r3, sp, #12
100184ca:	aa02      	add	r2, sp, #8
100184cc:	0021      	movs	r1, r4
100184ce:	0030      	movs	r0, r6
100184d0:	f000 fab8 	bl	10018a44 <__swhatbuf_r>
100184d4:	89a3      	ldrh	r3, [r4, #12]
100184d6:	4318      	orrs	r0, r3
100184d8:	81a0      	strh	r0, [r4, #12]
100184da:	2d00      	cmp	r5, #0
100184dc:	d101      	bne.n	100184e2 <setvbuf+0xaa>
100184de:	9d02      	ldr	r5, [sp, #8]
100184e0:	e001      	b.n	100184e6 <setvbuf+0xae>
100184e2:	2f00      	cmp	r7, #0
100184e4:	d125      	bne.n	10018532 <setvbuf+0xfa>
100184e6:	0028      	movs	r0, r5
100184e8:	f7ff fdd8 	bl	1001809c <malloc>
100184ec:	9501      	str	r5, [sp, #4]
100184ee:	1e07      	subs	r7, r0, #0
100184f0:	d11a      	bne.n	10018528 <setvbuf+0xf0>
100184f2:	9b02      	ldr	r3, [sp, #8]
100184f4:	9301      	str	r3, [sp, #4]
100184f6:	42ab      	cmp	r3, r5
100184f8:	d102      	bne.n	10018500 <setvbuf+0xc8>
100184fa:	2001      	movs	r0, #1
100184fc:	4240      	negs	r0, r0
100184fe:	e006      	b.n	1001850e <setvbuf+0xd6>
10018500:	9801      	ldr	r0, [sp, #4]
10018502:	f7ff fdcb 	bl	1001809c <malloc>
10018506:	1e07      	subs	r7, r0, #0
10018508:	d10e      	bne.n	10018528 <setvbuf+0xf0>
1001850a:	e7f6      	b.n	100184fa <setvbuf+0xc2>
1001850c:	2000      	movs	r0, #0
1001850e:	2202      	movs	r2, #2
10018510:	89a3      	ldrh	r3, [r4, #12]
10018512:	4313      	orrs	r3, r2
10018514:	81a3      	strh	r3, [r4, #12]
10018516:	2300      	movs	r3, #0
10018518:	60a3      	str	r3, [r4, #8]
1001851a:	0023      	movs	r3, r4
1001851c:	3347      	adds	r3, #71	; 0x47
1001851e:	6023      	str	r3, [r4, #0]
10018520:	6123      	str	r3, [r4, #16]
10018522:	2301      	movs	r3, #1
10018524:	6163      	str	r3, [r4, #20]
10018526:	e02a      	b.n	1001857e <setvbuf+0x146>
10018528:	2280      	movs	r2, #128	; 0x80
1001852a:	89a3      	ldrh	r3, [r4, #12]
1001852c:	9d01      	ldr	r5, [sp, #4]
1001852e:	4313      	orrs	r3, r2
10018530:	81a3      	strh	r3, [r4, #12]
10018532:	69b3      	ldr	r3, [r6, #24]
10018534:	2b00      	cmp	r3, #0
10018536:	d102      	bne.n	1001853e <setvbuf+0x106>
10018538:	0030      	movs	r0, r6
1001853a:	f000 f9ef 	bl	1001891c <__sinit>
1001853e:	9b00      	ldr	r3, [sp, #0]
10018540:	2b01      	cmp	r3, #1
10018542:	d103      	bne.n	1001854c <setvbuf+0x114>
10018544:	89a3      	ldrh	r3, [r4, #12]
10018546:	9a00      	ldr	r2, [sp, #0]
10018548:	431a      	orrs	r2, r3
1001854a:	81a2      	strh	r2, [r4, #12]
1001854c:	2308      	movs	r3, #8
1001854e:	89a2      	ldrh	r2, [r4, #12]
10018550:	6027      	str	r7, [r4, #0]
10018552:	4013      	ands	r3, r2
10018554:	6127      	str	r7, [r4, #16]
10018556:	6165      	str	r5, [r4, #20]
10018558:	1e18      	subs	r0, r3, #0
1001855a:	d00c      	beq.n	10018576 <setvbuf+0x13e>
1001855c:	2301      	movs	r3, #1
1001855e:	401a      	ands	r2, r3
10018560:	2300      	movs	r3, #0
10018562:	1e10      	subs	r0, r2, #0
10018564:	4298      	cmp	r0, r3
10018566:	d004      	beq.n	10018572 <setvbuf+0x13a>
10018568:	426d      	negs	r5, r5
1001856a:	60a3      	str	r3, [r4, #8]
1001856c:	61a5      	str	r5, [r4, #24]
1001856e:	0018      	movs	r0, r3
10018570:	e005      	b.n	1001857e <setvbuf+0x146>
10018572:	60a5      	str	r5, [r4, #8]
10018574:	e003      	b.n	1001857e <setvbuf+0x146>
10018576:	60a3      	str	r3, [r4, #8]
10018578:	e001      	b.n	1001857e <setvbuf+0x146>
1001857a:	2001      	movs	r0, #1
1001857c:	4240      	negs	r0, r0
1001857e:	b005      	add	sp, #20
10018580:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018582:	46c0      	nop			; (mov r8, r8)
10018584:	1001b464 	.word	0x1001b464
10018588:	1001b2ec 	.word	0x1001b2ec
1001858c:	1001b30c 	.word	0x1001b30c
10018590:	1001b32c 	.word	0x1001b32c
10018594:	fffff35c 	.word	0xfffff35c

10018598 <__swbuf_r>:
10018598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001859a:	0005      	movs	r5, r0
1001859c:	000f      	movs	r7, r1
1001859e:	0014      	movs	r4, r2
100185a0:	2800      	cmp	r0, #0
100185a2:	d004      	beq.n	100185ae <__swbuf_r+0x16>
100185a4:	6983      	ldr	r3, [r0, #24]
100185a6:	2b00      	cmp	r3, #0
100185a8:	d101      	bne.n	100185ae <__swbuf_r+0x16>
100185aa:	f000 f9b7 	bl	1001891c <__sinit>
100185ae:	4b23      	ldr	r3, [pc, #140]	; (1001863c <__swbuf_r+0xa4>)
100185b0:	429c      	cmp	r4, r3
100185b2:	d101      	bne.n	100185b8 <__swbuf_r+0x20>
100185b4:	686c      	ldr	r4, [r5, #4]
100185b6:	e008      	b.n	100185ca <__swbuf_r+0x32>
100185b8:	4b21      	ldr	r3, [pc, #132]	; (10018640 <__swbuf_r+0xa8>)
100185ba:	429c      	cmp	r4, r3
100185bc:	d101      	bne.n	100185c2 <__swbuf_r+0x2a>
100185be:	68ac      	ldr	r4, [r5, #8]
100185c0:	e003      	b.n	100185ca <__swbuf_r+0x32>
100185c2:	4b20      	ldr	r3, [pc, #128]	; (10018644 <__swbuf_r+0xac>)
100185c4:	429c      	cmp	r4, r3
100185c6:	d100      	bne.n	100185ca <__swbuf_r+0x32>
100185c8:	68ec      	ldr	r4, [r5, #12]
100185ca:	69a3      	ldr	r3, [r4, #24]
100185cc:	60a3      	str	r3, [r4, #8]
100185ce:	89a3      	ldrh	r3, [r4, #12]
100185d0:	071b      	lsls	r3, r3, #28
100185d2:	d50a      	bpl.n	100185ea <__swbuf_r+0x52>
100185d4:	6923      	ldr	r3, [r4, #16]
100185d6:	2b00      	cmp	r3, #0
100185d8:	d007      	beq.n	100185ea <__swbuf_r+0x52>
100185da:	6823      	ldr	r3, [r4, #0]
100185dc:	6922      	ldr	r2, [r4, #16]
100185de:	b2fe      	uxtb	r6, r7
100185e0:	1a98      	subs	r0, r3, r2
100185e2:	6963      	ldr	r3, [r4, #20]
100185e4:	4298      	cmp	r0, r3
100185e6:	db0f      	blt.n	10018608 <__swbuf_r+0x70>
100185e8:	e008      	b.n	100185fc <__swbuf_r+0x64>
100185ea:	0021      	movs	r1, r4
100185ec:	0028      	movs	r0, r5
100185ee:	f000 f82b 	bl	10018648 <__swsetup_r>
100185f2:	2800      	cmp	r0, #0
100185f4:	d0f1      	beq.n	100185da <__swbuf_r+0x42>
100185f6:	2001      	movs	r0, #1
100185f8:	4240      	negs	r0, r0
100185fa:	e01d      	b.n	10018638 <__swbuf_r+0xa0>
100185fc:	0021      	movs	r1, r4
100185fe:	0028      	movs	r0, r5
10018600:	f000 f91e 	bl	10018840 <_fflush_r>
10018604:	2800      	cmp	r0, #0
10018606:	d1f6      	bne.n	100185f6 <__swbuf_r+0x5e>
10018608:	68a3      	ldr	r3, [r4, #8]
1001860a:	3001      	adds	r0, #1
1001860c:	3b01      	subs	r3, #1
1001860e:	60a3      	str	r3, [r4, #8]
10018610:	6823      	ldr	r3, [r4, #0]
10018612:	1c5a      	adds	r2, r3, #1
10018614:	6022      	str	r2, [r4, #0]
10018616:	701f      	strb	r7, [r3, #0]
10018618:	6963      	ldr	r3, [r4, #20]
1001861a:	4298      	cmp	r0, r3
1001861c:	d005      	beq.n	1001862a <__swbuf_r+0x92>
1001861e:	89a3      	ldrh	r3, [r4, #12]
10018620:	0030      	movs	r0, r6
10018622:	07db      	lsls	r3, r3, #31
10018624:	d508      	bpl.n	10018638 <__swbuf_r+0xa0>
10018626:	2e0a      	cmp	r6, #10
10018628:	d106      	bne.n	10018638 <__swbuf_r+0xa0>
1001862a:	0021      	movs	r1, r4
1001862c:	0028      	movs	r0, r5
1001862e:	f000 f907 	bl	10018840 <_fflush_r>
10018632:	2800      	cmp	r0, #0
10018634:	d1df      	bne.n	100185f6 <__swbuf_r+0x5e>
10018636:	0030      	movs	r0, r6
10018638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001863a:	46c0      	nop			; (mov r8, r8)
1001863c:	1001b2ec 	.word	0x1001b2ec
10018640:	1001b30c 	.word	0x1001b30c
10018644:	1001b32c 	.word	0x1001b32c

10018648 <__swsetup_r>:
10018648:	4b36      	ldr	r3, [pc, #216]	; (10018724 <__swsetup_r+0xdc>)
1001864a:	b570      	push	{r4, r5, r6, lr}
1001864c:	681d      	ldr	r5, [r3, #0]
1001864e:	0006      	movs	r6, r0
10018650:	000c      	movs	r4, r1
10018652:	2d00      	cmp	r5, #0
10018654:	d005      	beq.n	10018662 <__swsetup_r+0x1a>
10018656:	69ab      	ldr	r3, [r5, #24]
10018658:	2b00      	cmp	r3, #0
1001865a:	d102      	bne.n	10018662 <__swsetup_r+0x1a>
1001865c:	0028      	movs	r0, r5
1001865e:	f000 f95d 	bl	1001891c <__sinit>
10018662:	4b31      	ldr	r3, [pc, #196]	; (10018728 <__swsetup_r+0xe0>)
10018664:	429c      	cmp	r4, r3
10018666:	d101      	bne.n	1001866c <__swsetup_r+0x24>
10018668:	686c      	ldr	r4, [r5, #4]
1001866a:	e008      	b.n	1001867e <__swsetup_r+0x36>
1001866c:	4b2f      	ldr	r3, [pc, #188]	; (1001872c <__swsetup_r+0xe4>)
1001866e:	429c      	cmp	r4, r3
10018670:	d101      	bne.n	10018676 <__swsetup_r+0x2e>
10018672:	68ac      	ldr	r4, [r5, #8]
10018674:	e003      	b.n	1001867e <__swsetup_r+0x36>
10018676:	4b2e      	ldr	r3, [pc, #184]	; (10018730 <__swsetup_r+0xe8>)
10018678:	429c      	cmp	r4, r3
1001867a:	d100      	bne.n	1001867e <__swsetup_r+0x36>
1001867c:	68ec      	ldr	r4, [r5, #12]
1001867e:	220c      	movs	r2, #12
10018680:	5ea3      	ldrsh	r3, [r4, r2]
10018682:	b29a      	uxth	r2, r3
10018684:	0711      	lsls	r1, r2, #28
10018686:	d423      	bmi.n	100186d0 <__swsetup_r+0x88>
10018688:	06d1      	lsls	r1, r2, #27
1001868a:	d407      	bmi.n	1001869c <__swsetup_r+0x54>
1001868c:	2209      	movs	r2, #9
1001868e:	2001      	movs	r0, #1
10018690:	6032      	str	r2, [r6, #0]
10018692:	3237      	adds	r2, #55	; 0x37
10018694:	4313      	orrs	r3, r2
10018696:	81a3      	strh	r3, [r4, #12]
10018698:	4240      	negs	r0, r0
1001869a:	e042      	b.n	10018722 <__swsetup_r+0xda>
1001869c:	0753      	lsls	r3, r2, #29
1001869e:	d513      	bpl.n	100186c8 <__swsetup_r+0x80>
100186a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100186a2:	2900      	cmp	r1, #0
100186a4:	d008      	beq.n	100186b8 <__swsetup_r+0x70>
100186a6:	0023      	movs	r3, r4
100186a8:	3344      	adds	r3, #68	; 0x44
100186aa:	4299      	cmp	r1, r3
100186ac:	d002      	beq.n	100186b4 <__swsetup_r+0x6c>
100186ae:	0030      	movs	r0, r6
100186b0:	f7ff fd34 	bl	1001811c <_free_r>
100186b4:	2300      	movs	r3, #0
100186b6:	6363      	str	r3, [r4, #52]	; 0x34
100186b8:	2224      	movs	r2, #36	; 0x24
100186ba:	89a3      	ldrh	r3, [r4, #12]
100186bc:	4393      	bics	r3, r2
100186be:	81a3      	strh	r3, [r4, #12]
100186c0:	2300      	movs	r3, #0
100186c2:	6063      	str	r3, [r4, #4]
100186c4:	6923      	ldr	r3, [r4, #16]
100186c6:	6023      	str	r3, [r4, #0]
100186c8:	2208      	movs	r2, #8
100186ca:	89a3      	ldrh	r3, [r4, #12]
100186cc:	4313      	orrs	r3, r2
100186ce:	81a3      	strh	r3, [r4, #12]
100186d0:	6923      	ldr	r3, [r4, #16]
100186d2:	2b00      	cmp	r3, #0
100186d4:	d10b      	bne.n	100186ee <__swsetup_r+0xa6>
100186d6:	23a0      	movs	r3, #160	; 0xa0
100186d8:	89a2      	ldrh	r2, [r4, #12]
100186da:	009b      	lsls	r3, r3, #2
100186dc:	4013      	ands	r3, r2
100186de:	2280      	movs	r2, #128	; 0x80
100186e0:	0092      	lsls	r2, r2, #2
100186e2:	4293      	cmp	r3, r2
100186e4:	d003      	beq.n	100186ee <__swsetup_r+0xa6>
100186e6:	0021      	movs	r1, r4
100186e8:	0030      	movs	r0, r6
100186ea:	f000 f9d1 	bl	10018a90 <__smakebuf_r>
100186ee:	2301      	movs	r3, #1
100186f0:	89a2      	ldrh	r2, [r4, #12]
100186f2:	4013      	ands	r3, r2
100186f4:	d005      	beq.n	10018702 <__swsetup_r+0xba>
100186f6:	2300      	movs	r3, #0
100186f8:	60a3      	str	r3, [r4, #8]
100186fa:	6963      	ldr	r3, [r4, #20]
100186fc:	425b      	negs	r3, r3
100186fe:	61a3      	str	r3, [r4, #24]
10018700:	e003      	b.n	1001870a <__swsetup_r+0xc2>
10018702:	0792      	lsls	r2, r2, #30
10018704:	d400      	bmi.n	10018708 <__swsetup_r+0xc0>
10018706:	6963      	ldr	r3, [r4, #20]
10018708:	60a3      	str	r3, [r4, #8]
1001870a:	2000      	movs	r0, #0
1001870c:	6923      	ldr	r3, [r4, #16]
1001870e:	4283      	cmp	r3, r0
10018710:	d107      	bne.n	10018722 <__swsetup_r+0xda>
10018712:	220c      	movs	r2, #12
10018714:	5ea3      	ldrsh	r3, [r4, r2]
10018716:	061a      	lsls	r2, r3, #24
10018718:	d503      	bpl.n	10018722 <__swsetup_r+0xda>
1001871a:	2240      	movs	r2, #64	; 0x40
1001871c:	4313      	orrs	r3, r2
1001871e:	81a3      	strh	r3, [r4, #12]
10018720:	3801      	subs	r0, #1
10018722:	bd70      	pop	{r4, r5, r6, pc}
10018724:	1001b464 	.word	0x1001b464
10018728:	1001b2ec 	.word	0x1001b2ec
1001872c:	1001b30c 	.word	0x1001b30c
10018730:	1001b32c 	.word	0x1001b32c

10018734 <__sflush_r>:
10018734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018736:	898a      	ldrh	r2, [r1, #12]
10018738:	0005      	movs	r5, r0
1001873a:	000c      	movs	r4, r1
1001873c:	0713      	lsls	r3, r2, #28
1001873e:	d45a      	bmi.n	100187f6 <__sflush_r+0xc2>
10018740:	684b      	ldr	r3, [r1, #4]
10018742:	2b00      	cmp	r3, #0
10018744:	dc02      	bgt.n	1001874c <__sflush_r+0x18>
10018746:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10018748:	2b00      	cmp	r3, #0
1001874a:	dd19      	ble.n	10018780 <__sflush_r+0x4c>
1001874c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001874e:	2f00      	cmp	r7, #0
10018750:	d016      	beq.n	10018780 <__sflush_r+0x4c>
10018752:	2300      	movs	r3, #0
10018754:	682e      	ldr	r6, [r5, #0]
10018756:	602b      	str	r3, [r5, #0]
10018758:	2380      	movs	r3, #128	; 0x80
1001875a:	015b      	lsls	r3, r3, #5
1001875c:	401a      	ands	r2, r3
1001875e:	d001      	beq.n	10018764 <__sflush_r+0x30>
10018760:	6d60      	ldr	r0, [r4, #84]	; 0x54
10018762:	e014      	b.n	1001878e <__sflush_r+0x5a>
10018764:	2301      	movs	r3, #1
10018766:	6a21      	ldr	r1, [r4, #32]
10018768:	0028      	movs	r0, r5
1001876a:	47b8      	blx	r7
1001876c:	1c43      	adds	r3, r0, #1
1001876e:	d10e      	bne.n	1001878e <__sflush_r+0x5a>
10018770:	682b      	ldr	r3, [r5, #0]
10018772:	2b00      	cmp	r3, #0
10018774:	d00b      	beq.n	1001878e <__sflush_r+0x5a>
10018776:	2b1d      	cmp	r3, #29
10018778:	d001      	beq.n	1001877e <__sflush_r+0x4a>
1001877a:	2b16      	cmp	r3, #22
1001877c:	d102      	bne.n	10018784 <__sflush_r+0x50>
1001877e:	602e      	str	r6, [r5, #0]
10018780:	2000      	movs	r0, #0
10018782:	e05a      	b.n	1001883a <__sflush_r+0x106>
10018784:	2240      	movs	r2, #64	; 0x40
10018786:	89a3      	ldrh	r3, [r4, #12]
10018788:	4313      	orrs	r3, r2
1001878a:	81a3      	strh	r3, [r4, #12]
1001878c:	e055      	b.n	1001883a <__sflush_r+0x106>
1001878e:	89a3      	ldrh	r3, [r4, #12]
10018790:	075b      	lsls	r3, r3, #29
10018792:	d506      	bpl.n	100187a2 <__sflush_r+0x6e>
10018794:	6863      	ldr	r3, [r4, #4]
10018796:	1ac0      	subs	r0, r0, r3
10018798:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001879a:	2b00      	cmp	r3, #0
1001879c:	d001      	beq.n	100187a2 <__sflush_r+0x6e>
1001879e:	6c23      	ldr	r3, [r4, #64]	; 0x40
100187a0:	1ac0      	subs	r0, r0, r3
100187a2:	2300      	movs	r3, #0
100187a4:	0002      	movs	r2, r0
100187a6:	6a21      	ldr	r1, [r4, #32]
100187a8:	0028      	movs	r0, r5
100187aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100187ac:	47b8      	blx	r7
100187ae:	89a3      	ldrh	r3, [r4, #12]
100187b0:	1c42      	adds	r2, r0, #1
100187b2:	d106      	bne.n	100187c2 <__sflush_r+0x8e>
100187b4:	6829      	ldr	r1, [r5, #0]
100187b6:	291d      	cmp	r1, #29
100187b8:	d83a      	bhi.n	10018830 <__sflush_r+0xfc>
100187ba:	4a20      	ldr	r2, [pc, #128]	; (1001883c <__sflush_r+0x108>)
100187bc:	40ca      	lsrs	r2, r1
100187be:	07d2      	lsls	r2, r2, #31
100187c0:	d536      	bpl.n	10018830 <__sflush_r+0xfc>
100187c2:	2200      	movs	r2, #0
100187c4:	6062      	str	r2, [r4, #4]
100187c6:	6922      	ldr	r2, [r4, #16]
100187c8:	6022      	str	r2, [r4, #0]
100187ca:	04db      	lsls	r3, r3, #19
100187cc:	d505      	bpl.n	100187da <__sflush_r+0xa6>
100187ce:	1c43      	adds	r3, r0, #1
100187d0:	d102      	bne.n	100187d8 <__sflush_r+0xa4>
100187d2:	682b      	ldr	r3, [r5, #0]
100187d4:	2b00      	cmp	r3, #0
100187d6:	d100      	bne.n	100187da <__sflush_r+0xa6>
100187d8:	6560      	str	r0, [r4, #84]	; 0x54
100187da:	6b61      	ldr	r1, [r4, #52]	; 0x34
100187dc:	602e      	str	r6, [r5, #0]
100187de:	2900      	cmp	r1, #0
100187e0:	d0ce      	beq.n	10018780 <__sflush_r+0x4c>
100187e2:	0023      	movs	r3, r4
100187e4:	3344      	adds	r3, #68	; 0x44
100187e6:	4299      	cmp	r1, r3
100187e8:	d002      	beq.n	100187f0 <__sflush_r+0xbc>
100187ea:	0028      	movs	r0, r5
100187ec:	f7ff fc96 	bl	1001811c <_free_r>
100187f0:	2000      	movs	r0, #0
100187f2:	6360      	str	r0, [r4, #52]	; 0x34
100187f4:	e021      	b.n	1001883a <__sflush_r+0x106>
100187f6:	690f      	ldr	r7, [r1, #16]
100187f8:	2f00      	cmp	r7, #0
100187fa:	d0c1      	beq.n	10018780 <__sflush_r+0x4c>
100187fc:	680b      	ldr	r3, [r1, #0]
100187fe:	600f      	str	r7, [r1, #0]
10018800:	1bdb      	subs	r3, r3, r7
10018802:	9301      	str	r3, [sp, #4]
10018804:	2300      	movs	r3, #0
10018806:	0792      	lsls	r2, r2, #30
10018808:	d100      	bne.n	1001880c <__sflush_r+0xd8>
1001880a:	694b      	ldr	r3, [r1, #20]
1001880c:	60a3      	str	r3, [r4, #8]
1001880e:	e003      	b.n	10018818 <__sflush_r+0xe4>
10018810:	9b01      	ldr	r3, [sp, #4]
10018812:	183f      	adds	r7, r7, r0
10018814:	1a1b      	subs	r3, r3, r0
10018816:	9301      	str	r3, [sp, #4]
10018818:	9b01      	ldr	r3, [sp, #4]
1001881a:	2b00      	cmp	r3, #0
1001881c:	ddb0      	ble.n	10018780 <__sflush_r+0x4c>
1001881e:	9b01      	ldr	r3, [sp, #4]
10018820:	003a      	movs	r2, r7
10018822:	6a21      	ldr	r1, [r4, #32]
10018824:	0028      	movs	r0, r5
10018826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10018828:	47b0      	blx	r6
1001882a:	2800      	cmp	r0, #0
1001882c:	dcf0      	bgt.n	10018810 <__sflush_r+0xdc>
1001882e:	89a3      	ldrh	r3, [r4, #12]
10018830:	2240      	movs	r2, #64	; 0x40
10018832:	2001      	movs	r0, #1
10018834:	4313      	orrs	r3, r2
10018836:	81a3      	strh	r3, [r4, #12]
10018838:	4240      	negs	r0, r0
1001883a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001883c:	20400001 	.word	0x20400001

10018840 <_fflush_r>:
10018840:	690b      	ldr	r3, [r1, #16]
10018842:	b570      	push	{r4, r5, r6, lr}
10018844:	0005      	movs	r5, r0
10018846:	000c      	movs	r4, r1
10018848:	2b00      	cmp	r3, #0
1001884a:	d101      	bne.n	10018850 <_fflush_r+0x10>
1001884c:	2000      	movs	r0, #0
1001884e:	e01c      	b.n	1001888a <_fflush_r+0x4a>
10018850:	2800      	cmp	r0, #0
10018852:	d004      	beq.n	1001885e <_fflush_r+0x1e>
10018854:	6983      	ldr	r3, [r0, #24]
10018856:	2b00      	cmp	r3, #0
10018858:	d101      	bne.n	1001885e <_fflush_r+0x1e>
1001885a:	f000 f85f 	bl	1001891c <__sinit>
1001885e:	4b0b      	ldr	r3, [pc, #44]	; (1001888c <_fflush_r+0x4c>)
10018860:	429c      	cmp	r4, r3
10018862:	d101      	bne.n	10018868 <_fflush_r+0x28>
10018864:	686c      	ldr	r4, [r5, #4]
10018866:	e008      	b.n	1001887a <_fflush_r+0x3a>
10018868:	4b09      	ldr	r3, [pc, #36]	; (10018890 <_fflush_r+0x50>)
1001886a:	429c      	cmp	r4, r3
1001886c:	d101      	bne.n	10018872 <_fflush_r+0x32>
1001886e:	68ac      	ldr	r4, [r5, #8]
10018870:	e003      	b.n	1001887a <_fflush_r+0x3a>
10018872:	4b08      	ldr	r3, [pc, #32]	; (10018894 <_fflush_r+0x54>)
10018874:	429c      	cmp	r4, r3
10018876:	d100      	bne.n	1001887a <_fflush_r+0x3a>
10018878:	68ec      	ldr	r4, [r5, #12]
1001887a:	220c      	movs	r2, #12
1001887c:	5ea3      	ldrsh	r3, [r4, r2]
1001887e:	2b00      	cmp	r3, #0
10018880:	d0e4      	beq.n	1001884c <_fflush_r+0xc>
10018882:	0021      	movs	r1, r4
10018884:	0028      	movs	r0, r5
10018886:	f7ff ff55 	bl	10018734 <__sflush_r>
1001888a:	bd70      	pop	{r4, r5, r6, pc}
1001888c:	1001b2ec 	.word	0x1001b2ec
10018890:	1001b30c 	.word	0x1001b30c
10018894:	1001b32c 	.word	0x1001b32c

10018898 <_cleanup_r>:
10018898:	b510      	push	{r4, lr}
1001889a:	4902      	ldr	r1, [pc, #8]	; (100188a4 <_cleanup_r+0xc>)
1001889c:	f000 f8b0 	bl	10018a00 <_fwalk_reent>
100188a0:	bd10      	pop	{r4, pc}
100188a2:	46c0      	nop			; (mov r8, r8)
100188a4:	10018841 	.word	0x10018841

100188a8 <std.isra.0>:
100188a8:	2300      	movs	r3, #0
100188aa:	b510      	push	{r4, lr}
100188ac:	0004      	movs	r4, r0
100188ae:	6003      	str	r3, [r0, #0]
100188b0:	6043      	str	r3, [r0, #4]
100188b2:	6083      	str	r3, [r0, #8]
100188b4:	8181      	strh	r1, [r0, #12]
100188b6:	6643      	str	r3, [r0, #100]	; 0x64
100188b8:	81c2      	strh	r2, [r0, #14]
100188ba:	6103      	str	r3, [r0, #16]
100188bc:	6143      	str	r3, [r0, #20]
100188be:	6183      	str	r3, [r0, #24]
100188c0:	0019      	movs	r1, r3
100188c2:	2208      	movs	r2, #8
100188c4:	305c      	adds	r0, #92	; 0x5c
100188c6:	f7ff fc20 	bl	1001810a <memset>
100188ca:	4b05      	ldr	r3, [pc, #20]	; (100188e0 <std.isra.0+0x38>)
100188cc:	6224      	str	r4, [r4, #32]
100188ce:	6263      	str	r3, [r4, #36]	; 0x24
100188d0:	4b04      	ldr	r3, [pc, #16]	; (100188e4 <std.isra.0+0x3c>)
100188d2:	62a3      	str	r3, [r4, #40]	; 0x28
100188d4:	4b04      	ldr	r3, [pc, #16]	; (100188e8 <std.isra.0+0x40>)
100188d6:	62e3      	str	r3, [r4, #44]	; 0x2c
100188d8:	4b04      	ldr	r3, [pc, #16]	; (100188ec <std.isra.0+0x44>)
100188da:	6323      	str	r3, [r4, #48]	; 0x30
100188dc:	bd10      	pop	{r4, pc}
100188de:	46c0      	nop			; (mov r8, r8)
100188e0:	10019121 	.word	0x10019121
100188e4:	10019149 	.word	0x10019149
100188e8:	10019181 	.word	0x10019181
100188ec:	100191ad 	.word	0x100191ad

100188f0 <__sfmoreglue>:
100188f0:	b570      	push	{r4, r5, r6, lr}
100188f2:	2568      	movs	r5, #104	; 0x68
100188f4:	1e4b      	subs	r3, r1, #1
100188f6:	435d      	muls	r5, r3
100188f8:	000e      	movs	r6, r1
100188fa:	0029      	movs	r1, r5
100188fc:	3174      	adds	r1, #116	; 0x74
100188fe:	f7ff fc53 	bl	100181a8 <_malloc_r>
10018902:	1e04      	subs	r4, r0, #0
10018904:	d008      	beq.n	10018918 <__sfmoreglue+0x28>
10018906:	2100      	movs	r1, #0
10018908:	002a      	movs	r2, r5
1001890a:	6001      	str	r1, [r0, #0]
1001890c:	6046      	str	r6, [r0, #4]
1001890e:	300c      	adds	r0, #12
10018910:	60a0      	str	r0, [r4, #8]
10018912:	3268      	adds	r2, #104	; 0x68
10018914:	f7ff fbf9 	bl	1001810a <memset>
10018918:	0020      	movs	r0, r4
1001891a:	bd70      	pop	{r4, r5, r6, pc}

1001891c <__sinit>:
1001891c:	6983      	ldr	r3, [r0, #24]
1001891e:	b513      	push	{r0, r1, r4, lr}
10018920:	0004      	movs	r4, r0
10018922:	2b00      	cmp	r3, #0
10018924:	d128      	bne.n	10018978 <__sinit+0x5c>
10018926:	6483      	str	r3, [r0, #72]	; 0x48
10018928:	64c3      	str	r3, [r0, #76]	; 0x4c
1001892a:	6503      	str	r3, [r0, #80]	; 0x50
1001892c:	4b13      	ldr	r3, [pc, #76]	; (1001897c <__sinit+0x60>)
1001892e:	4a14      	ldr	r2, [pc, #80]	; (10018980 <__sinit+0x64>)
10018930:	681b      	ldr	r3, [r3, #0]
10018932:	6282      	str	r2, [r0, #40]	; 0x28
10018934:	9301      	str	r3, [sp, #4]
10018936:	4298      	cmp	r0, r3
10018938:	d101      	bne.n	1001893e <__sinit+0x22>
1001893a:	2301      	movs	r3, #1
1001893c:	6183      	str	r3, [r0, #24]
1001893e:	0020      	movs	r0, r4
10018940:	f000 f820 	bl	10018984 <__sfp>
10018944:	6060      	str	r0, [r4, #4]
10018946:	0020      	movs	r0, r4
10018948:	f000 f81c 	bl	10018984 <__sfp>
1001894c:	60a0      	str	r0, [r4, #8]
1001894e:	0020      	movs	r0, r4
10018950:	f000 f818 	bl	10018984 <__sfp>
10018954:	2200      	movs	r2, #0
10018956:	60e0      	str	r0, [r4, #12]
10018958:	2104      	movs	r1, #4
1001895a:	6860      	ldr	r0, [r4, #4]
1001895c:	f7ff ffa4 	bl	100188a8 <std.isra.0>
10018960:	2201      	movs	r2, #1
10018962:	2109      	movs	r1, #9
10018964:	68a0      	ldr	r0, [r4, #8]
10018966:	f7ff ff9f 	bl	100188a8 <std.isra.0>
1001896a:	2202      	movs	r2, #2
1001896c:	2112      	movs	r1, #18
1001896e:	68e0      	ldr	r0, [r4, #12]
10018970:	f7ff ff9a 	bl	100188a8 <std.isra.0>
10018974:	2301      	movs	r3, #1
10018976:	61a3      	str	r3, [r4, #24]
10018978:	bd13      	pop	{r0, r1, r4, pc}
1001897a:	46c0      	nop			; (mov r8, r8)
1001897c:	1001b2e8 	.word	0x1001b2e8
10018980:	10018899 	.word	0x10018899

10018984 <__sfp>:
10018984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018986:	4b1d      	ldr	r3, [pc, #116]	; (100189fc <__sfp+0x78>)
10018988:	0006      	movs	r6, r0
1001898a:	681d      	ldr	r5, [r3, #0]
1001898c:	69ab      	ldr	r3, [r5, #24]
1001898e:	2b00      	cmp	r3, #0
10018990:	d102      	bne.n	10018998 <__sfp+0x14>
10018992:	0028      	movs	r0, r5
10018994:	f7ff ffc2 	bl	1001891c <__sinit>
10018998:	3548      	adds	r5, #72	; 0x48
1001899a:	68ac      	ldr	r4, [r5, #8]
1001899c:	686b      	ldr	r3, [r5, #4]
1001899e:	3b01      	subs	r3, #1
100189a0:	d405      	bmi.n	100189ae <__sfp+0x2a>
100189a2:	220c      	movs	r2, #12
100189a4:	5ea7      	ldrsh	r7, [r4, r2]
100189a6:	2f00      	cmp	r7, #0
100189a8:	d010      	beq.n	100189cc <__sfp+0x48>
100189aa:	3468      	adds	r4, #104	; 0x68
100189ac:	e7f7      	b.n	1001899e <__sfp+0x1a>
100189ae:	682b      	ldr	r3, [r5, #0]
100189b0:	2b00      	cmp	r3, #0
100189b2:	d001      	beq.n	100189b8 <__sfp+0x34>
100189b4:	682d      	ldr	r5, [r5, #0]
100189b6:	e7f0      	b.n	1001899a <__sfp+0x16>
100189b8:	2104      	movs	r1, #4
100189ba:	0030      	movs	r0, r6
100189bc:	f7ff ff98 	bl	100188f0 <__sfmoreglue>
100189c0:	6028      	str	r0, [r5, #0]
100189c2:	2800      	cmp	r0, #0
100189c4:	d1f6      	bne.n	100189b4 <__sfp+0x30>
100189c6:	230c      	movs	r3, #12
100189c8:	6033      	str	r3, [r6, #0]
100189ca:	e016      	b.n	100189fa <__sfp+0x76>
100189cc:	2301      	movs	r3, #1
100189ce:	0020      	movs	r0, r4
100189d0:	425b      	negs	r3, r3
100189d2:	81e3      	strh	r3, [r4, #14]
100189d4:	3302      	adds	r3, #2
100189d6:	81a3      	strh	r3, [r4, #12]
100189d8:	6667      	str	r7, [r4, #100]	; 0x64
100189da:	6027      	str	r7, [r4, #0]
100189dc:	60a7      	str	r7, [r4, #8]
100189de:	6067      	str	r7, [r4, #4]
100189e0:	6127      	str	r7, [r4, #16]
100189e2:	6167      	str	r7, [r4, #20]
100189e4:	61a7      	str	r7, [r4, #24]
100189e6:	305c      	adds	r0, #92	; 0x5c
100189e8:	2208      	movs	r2, #8
100189ea:	0039      	movs	r1, r7
100189ec:	f7ff fb8d 	bl	1001810a <memset>
100189f0:	0020      	movs	r0, r4
100189f2:	6367      	str	r7, [r4, #52]	; 0x34
100189f4:	63a7      	str	r7, [r4, #56]	; 0x38
100189f6:	64a7      	str	r7, [r4, #72]	; 0x48
100189f8:	64e7      	str	r7, [r4, #76]	; 0x4c
100189fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100189fc:	1001b2e8 	.word	0x1001b2e8

10018a00 <_fwalk_reent>:
10018a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018a02:	0004      	movs	r4, r0
10018a04:	0007      	movs	r7, r0
10018a06:	2600      	movs	r6, #0
10018a08:	9101      	str	r1, [sp, #4]
10018a0a:	3448      	adds	r4, #72	; 0x48
10018a0c:	2c00      	cmp	r4, #0
10018a0e:	d016      	beq.n	10018a3e <_fwalk_reent+0x3e>
10018a10:	6863      	ldr	r3, [r4, #4]
10018a12:	68a5      	ldr	r5, [r4, #8]
10018a14:	9300      	str	r3, [sp, #0]
10018a16:	9b00      	ldr	r3, [sp, #0]
10018a18:	3b01      	subs	r3, #1
10018a1a:	9300      	str	r3, [sp, #0]
10018a1c:	d40d      	bmi.n	10018a3a <_fwalk_reent+0x3a>
10018a1e:	89ab      	ldrh	r3, [r5, #12]
10018a20:	2b01      	cmp	r3, #1
10018a22:	d908      	bls.n	10018a36 <_fwalk_reent+0x36>
10018a24:	220e      	movs	r2, #14
10018a26:	5eab      	ldrsh	r3, [r5, r2]
10018a28:	3301      	adds	r3, #1
10018a2a:	d004      	beq.n	10018a36 <_fwalk_reent+0x36>
10018a2c:	0029      	movs	r1, r5
10018a2e:	0038      	movs	r0, r7
10018a30:	9b01      	ldr	r3, [sp, #4]
10018a32:	4798      	blx	r3
10018a34:	4306      	orrs	r6, r0
10018a36:	3568      	adds	r5, #104	; 0x68
10018a38:	e7ed      	b.n	10018a16 <_fwalk_reent+0x16>
10018a3a:	6824      	ldr	r4, [r4, #0]
10018a3c:	e7e6      	b.n	10018a0c <_fwalk_reent+0xc>
10018a3e:	0030      	movs	r0, r6
10018a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10018a44 <__swhatbuf_r>:
10018a44:	b570      	push	{r4, r5, r6, lr}
10018a46:	000e      	movs	r6, r1
10018a48:	001d      	movs	r5, r3
10018a4a:	230e      	movs	r3, #14
10018a4c:	5ec9      	ldrsh	r1, [r1, r3]
10018a4e:	b090      	sub	sp, #64	; 0x40
10018a50:	0014      	movs	r4, r2
10018a52:	2900      	cmp	r1, #0
10018a54:	da06      	bge.n	10018a64 <__swhatbuf_r+0x20>
10018a56:	2300      	movs	r3, #0
10018a58:	602b      	str	r3, [r5, #0]
10018a5a:	89b3      	ldrh	r3, [r6, #12]
10018a5c:	061b      	lsls	r3, r3, #24
10018a5e:	d50f      	bpl.n	10018a80 <__swhatbuf_r+0x3c>
10018a60:	2340      	movs	r3, #64	; 0x40
10018a62:	e00f      	b.n	10018a84 <__swhatbuf_r+0x40>
10018a64:	aa01      	add	r2, sp, #4
10018a66:	f000 fbcd 	bl	10019204 <_fstat_r>
10018a6a:	2800      	cmp	r0, #0
10018a6c:	dbf3      	blt.n	10018a56 <__swhatbuf_r+0x12>
10018a6e:	23f0      	movs	r3, #240	; 0xf0
10018a70:	9a02      	ldr	r2, [sp, #8]
10018a72:	021b      	lsls	r3, r3, #8
10018a74:	4013      	ands	r3, r2
10018a76:	4a05      	ldr	r2, [pc, #20]	; (10018a8c <__swhatbuf_r+0x48>)
10018a78:	189b      	adds	r3, r3, r2
10018a7a:	425a      	negs	r2, r3
10018a7c:	4153      	adcs	r3, r2
10018a7e:	602b      	str	r3, [r5, #0]
10018a80:	2380      	movs	r3, #128	; 0x80
10018a82:	00db      	lsls	r3, r3, #3
10018a84:	2000      	movs	r0, #0
10018a86:	6023      	str	r3, [r4, #0]
10018a88:	b010      	add	sp, #64	; 0x40
10018a8a:	bd70      	pop	{r4, r5, r6, pc}
10018a8c:	ffffe000 	.word	0xffffe000

10018a90 <__smakebuf_r>:
10018a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018a92:	2602      	movs	r6, #2
10018a94:	898b      	ldrh	r3, [r1, #12]
10018a96:	0005      	movs	r5, r0
10018a98:	000c      	movs	r4, r1
10018a9a:	4233      	tst	r3, r6
10018a9c:	d110      	bne.n	10018ac0 <__smakebuf_r+0x30>
10018a9e:	ab01      	add	r3, sp, #4
10018aa0:	466a      	mov	r2, sp
10018aa2:	f7ff ffcf 	bl	10018a44 <__swhatbuf_r>
10018aa6:	9900      	ldr	r1, [sp, #0]
10018aa8:	0007      	movs	r7, r0
10018aaa:	0028      	movs	r0, r5
10018aac:	f7ff fb7c 	bl	100181a8 <_malloc_r>
10018ab0:	2800      	cmp	r0, #0
10018ab2:	d10c      	bne.n	10018ace <__smakebuf_r+0x3e>
10018ab4:	220c      	movs	r2, #12
10018ab6:	5ea3      	ldrsh	r3, [r4, r2]
10018ab8:	059a      	lsls	r2, r3, #22
10018aba:	d423      	bmi.n	10018b04 <__smakebuf_r+0x74>
10018abc:	4333      	orrs	r3, r6
10018abe:	81a3      	strh	r3, [r4, #12]
10018ac0:	0023      	movs	r3, r4
10018ac2:	3347      	adds	r3, #71	; 0x47
10018ac4:	6023      	str	r3, [r4, #0]
10018ac6:	6123      	str	r3, [r4, #16]
10018ac8:	2301      	movs	r3, #1
10018aca:	6163      	str	r3, [r4, #20]
10018acc:	e01a      	b.n	10018b04 <__smakebuf_r+0x74>
10018ace:	2280      	movs	r2, #128	; 0x80
10018ad0:	4b0d      	ldr	r3, [pc, #52]	; (10018b08 <__smakebuf_r+0x78>)
10018ad2:	62ab      	str	r3, [r5, #40]	; 0x28
10018ad4:	89a3      	ldrh	r3, [r4, #12]
10018ad6:	6020      	str	r0, [r4, #0]
10018ad8:	4313      	orrs	r3, r2
10018ada:	81a3      	strh	r3, [r4, #12]
10018adc:	9b00      	ldr	r3, [sp, #0]
10018ade:	6120      	str	r0, [r4, #16]
10018ae0:	6163      	str	r3, [r4, #20]
10018ae2:	9b01      	ldr	r3, [sp, #4]
10018ae4:	2b00      	cmp	r3, #0
10018ae6:	d00a      	beq.n	10018afe <__smakebuf_r+0x6e>
10018ae8:	230e      	movs	r3, #14
10018aea:	5ee1      	ldrsh	r1, [r4, r3]
10018aec:	0028      	movs	r0, r5
10018aee:	f000 fb9b 	bl	10019228 <_isatty_r>
10018af2:	2800      	cmp	r0, #0
10018af4:	d003      	beq.n	10018afe <__smakebuf_r+0x6e>
10018af6:	2201      	movs	r2, #1
10018af8:	89a3      	ldrh	r3, [r4, #12]
10018afa:	4313      	orrs	r3, r2
10018afc:	81a3      	strh	r3, [r4, #12]
10018afe:	89a3      	ldrh	r3, [r4, #12]
10018b00:	431f      	orrs	r7, r3
10018b02:	81a7      	strh	r7, [r4, #12]
10018b04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10018b06:	46c0      	nop			; (mov r8, r8)
10018b08:	10018899 	.word	0x10018899

10018b0c <__sfputc_r>:
10018b0c:	6893      	ldr	r3, [r2, #8]
10018b0e:	b510      	push	{r4, lr}
10018b10:	3b01      	subs	r3, #1
10018b12:	6093      	str	r3, [r2, #8]
10018b14:	2b00      	cmp	r3, #0
10018b16:	da05      	bge.n	10018b24 <__sfputc_r+0x18>
10018b18:	6994      	ldr	r4, [r2, #24]
10018b1a:	42a3      	cmp	r3, r4
10018b1c:	db08      	blt.n	10018b30 <__sfputc_r+0x24>
10018b1e:	b2cb      	uxtb	r3, r1
10018b20:	2b0a      	cmp	r3, #10
10018b22:	d005      	beq.n	10018b30 <__sfputc_r+0x24>
10018b24:	6813      	ldr	r3, [r2, #0]
10018b26:	1c58      	adds	r0, r3, #1
10018b28:	6010      	str	r0, [r2, #0]
10018b2a:	7019      	strb	r1, [r3, #0]
10018b2c:	b2c8      	uxtb	r0, r1
10018b2e:	e001      	b.n	10018b34 <__sfputc_r+0x28>
10018b30:	f7ff fd32 	bl	10018598 <__swbuf_r>
10018b34:	bd10      	pop	{r4, pc}

10018b36 <__sfputs_r>:
10018b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018b38:	0006      	movs	r6, r0
10018b3a:	000f      	movs	r7, r1
10018b3c:	0014      	movs	r4, r2
10018b3e:	18d5      	adds	r5, r2, r3
10018b40:	42ac      	cmp	r4, r5
10018b42:	d008      	beq.n	10018b56 <__sfputs_r+0x20>
10018b44:	7821      	ldrb	r1, [r4, #0]
10018b46:	003a      	movs	r2, r7
10018b48:	0030      	movs	r0, r6
10018b4a:	f7ff ffdf 	bl	10018b0c <__sfputc_r>
10018b4e:	3401      	adds	r4, #1
10018b50:	1c43      	adds	r3, r0, #1
10018b52:	d1f5      	bne.n	10018b40 <__sfputs_r+0xa>
10018b54:	e000      	b.n	10018b58 <__sfputs_r+0x22>
10018b56:	2000      	movs	r0, #0
10018b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10018b5c <_vfiprintf_r>:
10018b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10018b5e:	b09f      	sub	sp, #124	; 0x7c
10018b60:	0006      	movs	r6, r0
10018b62:	000f      	movs	r7, r1
10018b64:	9202      	str	r2, [sp, #8]
10018b66:	9305      	str	r3, [sp, #20]
10018b68:	2800      	cmp	r0, #0
10018b6a:	d004      	beq.n	10018b76 <_vfiprintf_r+0x1a>
10018b6c:	6983      	ldr	r3, [r0, #24]
10018b6e:	2b00      	cmp	r3, #0
10018b70:	d101      	bne.n	10018b76 <_vfiprintf_r+0x1a>
10018b72:	f7ff fed3 	bl	1001891c <__sinit>
10018b76:	4b7f      	ldr	r3, [pc, #508]	; (10018d74 <_vfiprintf_r+0x218>)
10018b78:	429f      	cmp	r7, r3
10018b7a:	d101      	bne.n	10018b80 <_vfiprintf_r+0x24>
10018b7c:	6877      	ldr	r7, [r6, #4]
10018b7e:	e008      	b.n	10018b92 <_vfiprintf_r+0x36>
10018b80:	4b7d      	ldr	r3, [pc, #500]	; (10018d78 <_vfiprintf_r+0x21c>)
10018b82:	429f      	cmp	r7, r3
10018b84:	d101      	bne.n	10018b8a <_vfiprintf_r+0x2e>
10018b86:	68b7      	ldr	r7, [r6, #8]
10018b88:	e003      	b.n	10018b92 <_vfiprintf_r+0x36>
10018b8a:	4b7c      	ldr	r3, [pc, #496]	; (10018d7c <_vfiprintf_r+0x220>)
10018b8c:	429f      	cmp	r7, r3
10018b8e:	d100      	bne.n	10018b92 <_vfiprintf_r+0x36>
10018b90:	68f7      	ldr	r7, [r6, #12]
10018b92:	89bb      	ldrh	r3, [r7, #12]
10018b94:	071b      	lsls	r3, r3, #28
10018b96:	d50a      	bpl.n	10018bae <_vfiprintf_r+0x52>
10018b98:	693b      	ldr	r3, [r7, #16]
10018b9a:	2b00      	cmp	r3, #0
10018b9c:	d007      	beq.n	10018bae <_vfiprintf_r+0x52>
10018b9e:	2300      	movs	r3, #0
10018ba0:	ad06      	add	r5, sp, #24
10018ba2:	616b      	str	r3, [r5, #20]
10018ba4:	3320      	adds	r3, #32
10018ba6:	766b      	strb	r3, [r5, #25]
10018ba8:	3310      	adds	r3, #16
10018baa:	76ab      	strb	r3, [r5, #26]
10018bac:	e03d      	b.n	10018c2a <_vfiprintf_r+0xce>
10018bae:	0039      	movs	r1, r7
10018bb0:	0030      	movs	r0, r6
10018bb2:	f7ff fd49 	bl	10018648 <__swsetup_r>
10018bb6:	2800      	cmp	r0, #0
10018bb8:	d0f1      	beq.n	10018b9e <_vfiprintf_r+0x42>
10018bba:	2001      	movs	r0, #1
10018bbc:	4240      	negs	r0, r0
10018bbe:	e0d6      	b.n	10018d6e <_vfiprintf_r+0x212>
10018bc0:	9a05      	ldr	r2, [sp, #20]
10018bc2:	1d11      	adds	r1, r2, #4
10018bc4:	6812      	ldr	r2, [r2, #0]
10018bc6:	9105      	str	r1, [sp, #20]
10018bc8:	2a00      	cmp	r2, #0
10018bca:	da00      	bge.n	10018bce <_vfiprintf_r+0x72>
10018bcc:	e07f      	b.n	10018cce <_vfiprintf_r+0x172>
10018bce:	9209      	str	r2, [sp, #36]	; 0x24
10018bd0:	3401      	adds	r4, #1
10018bd2:	7823      	ldrb	r3, [r4, #0]
10018bd4:	2b2e      	cmp	r3, #46	; 0x2e
10018bd6:	d100      	bne.n	10018bda <_vfiprintf_r+0x7e>
10018bd8:	e08d      	b.n	10018cf6 <_vfiprintf_r+0x19a>
10018bda:	7821      	ldrb	r1, [r4, #0]
10018bdc:	2203      	movs	r2, #3
10018bde:	4868      	ldr	r0, [pc, #416]	; (10018d80 <_vfiprintf_r+0x224>)
10018be0:	f000 fb48 	bl	10019274 <memchr>
10018be4:	2800      	cmp	r0, #0
10018be6:	d007      	beq.n	10018bf8 <_vfiprintf_r+0x9c>
10018be8:	4b65      	ldr	r3, [pc, #404]	; (10018d80 <_vfiprintf_r+0x224>)
10018bea:	682a      	ldr	r2, [r5, #0]
10018bec:	1ac0      	subs	r0, r0, r3
10018bee:	2340      	movs	r3, #64	; 0x40
10018bf0:	4083      	lsls	r3, r0
10018bf2:	4313      	orrs	r3, r2
10018bf4:	602b      	str	r3, [r5, #0]
10018bf6:	3401      	adds	r4, #1
10018bf8:	7821      	ldrb	r1, [r4, #0]
10018bfa:	1c63      	adds	r3, r4, #1
10018bfc:	2206      	movs	r2, #6
10018bfe:	4861      	ldr	r0, [pc, #388]	; (10018d84 <_vfiprintf_r+0x228>)
10018c00:	9302      	str	r3, [sp, #8]
10018c02:	7629      	strb	r1, [r5, #24]
10018c04:	f000 fb36 	bl	10019274 <memchr>
10018c08:	2800      	cmp	r0, #0
10018c0a:	d100      	bne.n	10018c0e <_vfiprintf_r+0xb2>
10018c0c:	e09d      	b.n	10018d4a <_vfiprintf_r+0x1ee>
10018c0e:	4b5e      	ldr	r3, [pc, #376]	; (10018d88 <_vfiprintf_r+0x22c>)
10018c10:	2b00      	cmp	r3, #0
10018c12:	d000      	beq.n	10018c16 <_vfiprintf_r+0xba>
10018c14:	e090      	b.n	10018d38 <_vfiprintf_r+0x1dc>
10018c16:	2207      	movs	r2, #7
10018c18:	9b05      	ldr	r3, [sp, #20]
10018c1a:	3307      	adds	r3, #7
10018c1c:	4393      	bics	r3, r2
10018c1e:	3308      	adds	r3, #8
10018c20:	9305      	str	r3, [sp, #20]
10018c22:	696b      	ldr	r3, [r5, #20]
10018c24:	9a03      	ldr	r2, [sp, #12]
10018c26:	189b      	adds	r3, r3, r2
10018c28:	616b      	str	r3, [r5, #20]
10018c2a:	9c02      	ldr	r4, [sp, #8]
10018c2c:	7823      	ldrb	r3, [r4, #0]
10018c2e:	2b00      	cmp	r3, #0
10018c30:	d104      	bne.n	10018c3c <_vfiprintf_r+0xe0>
10018c32:	9b02      	ldr	r3, [sp, #8]
10018c34:	1ae3      	subs	r3, r4, r3
10018c36:	9304      	str	r3, [sp, #16]
10018c38:	d012      	beq.n	10018c60 <_vfiprintf_r+0x104>
10018c3a:	e003      	b.n	10018c44 <_vfiprintf_r+0xe8>
10018c3c:	2b25      	cmp	r3, #37	; 0x25
10018c3e:	d0f8      	beq.n	10018c32 <_vfiprintf_r+0xd6>
10018c40:	3401      	adds	r4, #1
10018c42:	e7f3      	b.n	10018c2c <_vfiprintf_r+0xd0>
10018c44:	9b04      	ldr	r3, [sp, #16]
10018c46:	9a02      	ldr	r2, [sp, #8]
10018c48:	0039      	movs	r1, r7
10018c4a:	0030      	movs	r0, r6
10018c4c:	f7ff ff73 	bl	10018b36 <__sfputs_r>
10018c50:	1c43      	adds	r3, r0, #1
10018c52:	d100      	bne.n	10018c56 <_vfiprintf_r+0xfa>
10018c54:	e086      	b.n	10018d64 <_vfiprintf_r+0x208>
10018c56:	696a      	ldr	r2, [r5, #20]
10018c58:	9b04      	ldr	r3, [sp, #16]
10018c5a:	4694      	mov	ip, r2
10018c5c:	4463      	add	r3, ip
10018c5e:	616b      	str	r3, [r5, #20]
10018c60:	7823      	ldrb	r3, [r4, #0]
10018c62:	2b00      	cmp	r3, #0
10018c64:	d07e      	beq.n	10018d64 <_vfiprintf_r+0x208>
10018c66:	2201      	movs	r2, #1
10018c68:	2300      	movs	r3, #0
10018c6a:	4252      	negs	r2, r2
10018c6c:	606a      	str	r2, [r5, #4]
10018c6e:	a902      	add	r1, sp, #8
10018c70:	3254      	adds	r2, #84	; 0x54
10018c72:	1852      	adds	r2, r2, r1
10018c74:	3401      	adds	r4, #1
10018c76:	602b      	str	r3, [r5, #0]
10018c78:	60eb      	str	r3, [r5, #12]
10018c7a:	60ab      	str	r3, [r5, #8]
10018c7c:	7013      	strb	r3, [r2, #0]
10018c7e:	65ab      	str	r3, [r5, #88]	; 0x58
10018c80:	7821      	ldrb	r1, [r4, #0]
10018c82:	2205      	movs	r2, #5
10018c84:	4841      	ldr	r0, [pc, #260]	; (10018d8c <_vfiprintf_r+0x230>)
10018c86:	f000 faf5 	bl	10019274 <memchr>
10018c8a:	2800      	cmp	r0, #0
10018c8c:	d008      	beq.n	10018ca0 <_vfiprintf_r+0x144>
10018c8e:	4b3f      	ldr	r3, [pc, #252]	; (10018d8c <_vfiprintf_r+0x230>)
10018c90:	682a      	ldr	r2, [r5, #0]
10018c92:	1ac0      	subs	r0, r0, r3
10018c94:	2301      	movs	r3, #1
10018c96:	4083      	lsls	r3, r0
10018c98:	4313      	orrs	r3, r2
10018c9a:	602b      	str	r3, [r5, #0]
10018c9c:	3401      	adds	r4, #1
10018c9e:	e7ef      	b.n	10018c80 <_vfiprintf_r+0x124>
10018ca0:	682b      	ldr	r3, [r5, #0]
10018ca2:	06da      	lsls	r2, r3, #27
10018ca4:	d504      	bpl.n	10018cb0 <_vfiprintf_r+0x154>
10018ca6:	2253      	movs	r2, #83	; 0x53
10018ca8:	2120      	movs	r1, #32
10018caa:	a802      	add	r0, sp, #8
10018cac:	1812      	adds	r2, r2, r0
10018cae:	7011      	strb	r1, [r2, #0]
10018cb0:	071a      	lsls	r2, r3, #28
10018cb2:	d504      	bpl.n	10018cbe <_vfiprintf_r+0x162>
10018cb4:	2253      	movs	r2, #83	; 0x53
10018cb6:	212b      	movs	r1, #43	; 0x2b
10018cb8:	a802      	add	r0, sp, #8
10018cba:	1812      	adds	r2, r2, r0
10018cbc:	7011      	strb	r1, [r2, #0]
10018cbe:	7822      	ldrb	r2, [r4, #0]
10018cc0:	2a2a      	cmp	r2, #42	; 0x2a
10018cc2:	d100      	bne.n	10018cc6 <_vfiprintf_r+0x16a>
10018cc4:	e77c      	b.n	10018bc0 <_vfiprintf_r+0x64>
10018cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10018cc8:	2000      	movs	r0, #0
10018cca:	210a      	movs	r1, #10
10018ccc:	e005      	b.n	10018cda <_vfiprintf_r+0x17e>
10018cce:	4252      	negs	r2, r2
10018cd0:	60ea      	str	r2, [r5, #12]
10018cd2:	2202      	movs	r2, #2
10018cd4:	4313      	orrs	r3, r2
10018cd6:	602b      	str	r3, [r5, #0]
10018cd8:	e77a      	b.n	10018bd0 <_vfiprintf_r+0x74>
10018cda:	7822      	ldrb	r2, [r4, #0]
10018cdc:	3a30      	subs	r2, #48	; 0x30
10018cde:	2a09      	cmp	r2, #9
10018ce0:	d804      	bhi.n	10018cec <_vfiprintf_r+0x190>
10018ce2:	434b      	muls	r3, r1
10018ce4:	3401      	adds	r4, #1
10018ce6:	189b      	adds	r3, r3, r2
10018ce8:	2001      	movs	r0, #1
10018cea:	e7f6      	b.n	10018cda <_vfiprintf_r+0x17e>
10018cec:	2800      	cmp	r0, #0
10018cee:	d100      	bne.n	10018cf2 <_vfiprintf_r+0x196>
10018cf0:	e76f      	b.n	10018bd2 <_vfiprintf_r+0x76>
10018cf2:	9309      	str	r3, [sp, #36]	; 0x24
10018cf4:	e76d      	b.n	10018bd2 <_vfiprintf_r+0x76>
10018cf6:	7863      	ldrb	r3, [r4, #1]
10018cf8:	2b2a      	cmp	r3, #42	; 0x2a
10018cfa:	d10a      	bne.n	10018d12 <_vfiprintf_r+0x1b6>
10018cfc:	9b05      	ldr	r3, [sp, #20]
10018cfe:	3402      	adds	r4, #2
10018d00:	1d1a      	adds	r2, r3, #4
10018d02:	681b      	ldr	r3, [r3, #0]
10018d04:	9205      	str	r2, [sp, #20]
10018d06:	2b00      	cmp	r3, #0
10018d08:	da01      	bge.n	10018d0e <_vfiprintf_r+0x1b2>
10018d0a:	2301      	movs	r3, #1
10018d0c:	425b      	negs	r3, r3
10018d0e:	9307      	str	r3, [sp, #28]
10018d10:	e763      	b.n	10018bda <_vfiprintf_r+0x7e>
10018d12:	2300      	movs	r3, #0
10018d14:	200a      	movs	r0, #10
10018d16:	001a      	movs	r2, r3
10018d18:	3401      	adds	r4, #1
10018d1a:	606b      	str	r3, [r5, #4]
10018d1c:	7821      	ldrb	r1, [r4, #0]
10018d1e:	3930      	subs	r1, #48	; 0x30
10018d20:	2909      	cmp	r1, #9
10018d22:	d804      	bhi.n	10018d2e <_vfiprintf_r+0x1d2>
10018d24:	4342      	muls	r2, r0
10018d26:	3401      	adds	r4, #1
10018d28:	1852      	adds	r2, r2, r1
10018d2a:	2301      	movs	r3, #1
10018d2c:	e7f6      	b.n	10018d1c <_vfiprintf_r+0x1c0>
10018d2e:	2b00      	cmp	r3, #0
10018d30:	d100      	bne.n	10018d34 <_vfiprintf_r+0x1d8>
10018d32:	e752      	b.n	10018bda <_vfiprintf_r+0x7e>
10018d34:	9207      	str	r2, [sp, #28]
10018d36:	e750      	b.n	10018bda <_vfiprintf_r+0x7e>
10018d38:	ab05      	add	r3, sp, #20
10018d3a:	9300      	str	r3, [sp, #0]
10018d3c:	003a      	movs	r2, r7
10018d3e:	4b14      	ldr	r3, [pc, #80]	; (10018d90 <_vfiprintf_r+0x234>)
10018d40:	0029      	movs	r1, r5
10018d42:	0030      	movs	r0, r6
10018d44:	e000      	b.n	10018d48 <_vfiprintf_r+0x1ec>
10018d46:	bf00      	nop
10018d48:	e007      	b.n	10018d5a <_vfiprintf_r+0x1fe>
10018d4a:	ab05      	add	r3, sp, #20
10018d4c:	9300      	str	r3, [sp, #0]
10018d4e:	003a      	movs	r2, r7
10018d50:	4b0f      	ldr	r3, [pc, #60]	; (10018d90 <_vfiprintf_r+0x234>)
10018d52:	0029      	movs	r1, r5
10018d54:	0030      	movs	r0, r6
10018d56:	f000 f88b 	bl	10018e70 <_printf_i>
10018d5a:	9003      	str	r0, [sp, #12]
10018d5c:	9b03      	ldr	r3, [sp, #12]
10018d5e:	3301      	adds	r3, #1
10018d60:	d000      	beq.n	10018d64 <_vfiprintf_r+0x208>
10018d62:	e75e      	b.n	10018c22 <_vfiprintf_r+0xc6>
10018d64:	89bb      	ldrh	r3, [r7, #12]
10018d66:	065b      	lsls	r3, r3, #25
10018d68:	d500      	bpl.n	10018d6c <_vfiprintf_r+0x210>
10018d6a:	e726      	b.n	10018bba <_vfiprintf_r+0x5e>
10018d6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10018d6e:	b01f      	add	sp, #124	; 0x7c
10018d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018d72:	46c0      	nop			; (mov r8, r8)
10018d74:	1001b2ec 	.word	0x1001b2ec
10018d78:	1001b30c 	.word	0x1001b30c
10018d7c:	1001b32c 	.word	0x1001b32c
10018d80:	1001b352 	.word	0x1001b352
10018d84:	1001b356 	.word	0x1001b356
10018d88:	00000000 	.word	0x00000000
10018d8c:	1001b34c 	.word	0x1001b34c
10018d90:	10018b37 	.word	0x10018b37

10018d94 <_printf_common>:
10018d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018d96:	0017      	movs	r7, r2
10018d98:	9301      	str	r3, [sp, #4]
10018d9a:	688a      	ldr	r2, [r1, #8]
10018d9c:	690b      	ldr	r3, [r1, #16]
10018d9e:	9000      	str	r0, [sp, #0]
10018da0:	000c      	movs	r4, r1
10018da2:	4293      	cmp	r3, r2
10018da4:	da00      	bge.n	10018da8 <_printf_common+0x14>
10018da6:	0013      	movs	r3, r2
10018da8:	0022      	movs	r2, r4
10018daa:	603b      	str	r3, [r7, #0]
10018dac:	3243      	adds	r2, #67	; 0x43
10018dae:	7812      	ldrb	r2, [r2, #0]
10018db0:	2a00      	cmp	r2, #0
10018db2:	d001      	beq.n	10018db8 <_printf_common+0x24>
10018db4:	3301      	adds	r3, #1
10018db6:	603b      	str	r3, [r7, #0]
10018db8:	6823      	ldr	r3, [r4, #0]
10018dba:	069b      	lsls	r3, r3, #26
10018dbc:	d502      	bpl.n	10018dc4 <_printf_common+0x30>
10018dbe:	683b      	ldr	r3, [r7, #0]
10018dc0:	3302      	adds	r3, #2
10018dc2:	603b      	str	r3, [r7, #0]
10018dc4:	2506      	movs	r5, #6
10018dc6:	6823      	ldr	r3, [r4, #0]
10018dc8:	401d      	ands	r5, r3
10018dca:	d01e      	beq.n	10018e0a <_printf_common+0x76>
10018dcc:	0023      	movs	r3, r4
10018dce:	3343      	adds	r3, #67	; 0x43
10018dd0:	781b      	ldrb	r3, [r3, #0]
10018dd2:	1e5a      	subs	r2, r3, #1
10018dd4:	4193      	sbcs	r3, r2
10018dd6:	6822      	ldr	r2, [r4, #0]
10018dd8:	0692      	lsls	r2, r2, #26
10018dda:	d51c      	bpl.n	10018e16 <_printf_common+0x82>
10018ddc:	2030      	movs	r0, #48	; 0x30
10018dde:	18e1      	adds	r1, r4, r3
10018de0:	3143      	adds	r1, #67	; 0x43
10018de2:	7008      	strb	r0, [r1, #0]
10018de4:	0021      	movs	r1, r4
10018de6:	1c5a      	adds	r2, r3, #1
10018de8:	3145      	adds	r1, #69	; 0x45
10018dea:	7809      	ldrb	r1, [r1, #0]
10018dec:	18a2      	adds	r2, r4, r2
10018dee:	3243      	adds	r2, #67	; 0x43
10018df0:	3302      	adds	r3, #2
10018df2:	7011      	strb	r1, [r2, #0]
10018df4:	e00f      	b.n	10018e16 <_printf_common+0x82>
10018df6:	0022      	movs	r2, r4
10018df8:	2301      	movs	r3, #1
10018dfa:	3219      	adds	r2, #25
10018dfc:	9901      	ldr	r1, [sp, #4]
10018dfe:	9800      	ldr	r0, [sp, #0]
10018e00:	9e08      	ldr	r6, [sp, #32]
10018e02:	47b0      	blx	r6
10018e04:	1c43      	adds	r3, r0, #1
10018e06:	d00e      	beq.n	10018e26 <_printf_common+0x92>
10018e08:	3501      	adds	r5, #1
10018e0a:	68e3      	ldr	r3, [r4, #12]
10018e0c:	683a      	ldr	r2, [r7, #0]
10018e0e:	1a9b      	subs	r3, r3, r2
10018e10:	429d      	cmp	r5, r3
10018e12:	dbf0      	blt.n	10018df6 <_printf_common+0x62>
10018e14:	e7da      	b.n	10018dcc <_printf_common+0x38>
10018e16:	0022      	movs	r2, r4
10018e18:	9901      	ldr	r1, [sp, #4]
10018e1a:	3243      	adds	r2, #67	; 0x43
10018e1c:	9800      	ldr	r0, [sp, #0]
10018e1e:	9d08      	ldr	r5, [sp, #32]
10018e20:	47a8      	blx	r5
10018e22:	1c43      	adds	r3, r0, #1
10018e24:	d102      	bne.n	10018e2c <_printf_common+0x98>
10018e26:	2001      	movs	r0, #1
10018e28:	4240      	negs	r0, r0
10018e2a:	e020      	b.n	10018e6e <_printf_common+0xda>
10018e2c:	2306      	movs	r3, #6
10018e2e:	6820      	ldr	r0, [r4, #0]
10018e30:	68e1      	ldr	r1, [r4, #12]
10018e32:	683a      	ldr	r2, [r7, #0]
10018e34:	4003      	ands	r3, r0
10018e36:	2500      	movs	r5, #0
10018e38:	2b04      	cmp	r3, #4
10018e3a:	d103      	bne.n	10018e44 <_printf_common+0xb0>
10018e3c:	1a8d      	subs	r5, r1, r2
10018e3e:	43eb      	mvns	r3, r5
10018e40:	17db      	asrs	r3, r3, #31
10018e42:	401d      	ands	r5, r3
10018e44:	68a3      	ldr	r3, [r4, #8]
10018e46:	6922      	ldr	r2, [r4, #16]
10018e48:	4293      	cmp	r3, r2
10018e4a:	dd01      	ble.n	10018e50 <_printf_common+0xbc>
10018e4c:	1a9b      	subs	r3, r3, r2
10018e4e:	18ed      	adds	r5, r5, r3
10018e50:	2700      	movs	r7, #0
10018e52:	42bd      	cmp	r5, r7
10018e54:	d00a      	beq.n	10018e6c <_printf_common+0xd8>
10018e56:	0022      	movs	r2, r4
10018e58:	2301      	movs	r3, #1
10018e5a:	321a      	adds	r2, #26
10018e5c:	9901      	ldr	r1, [sp, #4]
10018e5e:	9800      	ldr	r0, [sp, #0]
10018e60:	9e08      	ldr	r6, [sp, #32]
10018e62:	47b0      	blx	r6
10018e64:	1c43      	adds	r3, r0, #1
10018e66:	d0de      	beq.n	10018e26 <_printf_common+0x92>
10018e68:	3701      	adds	r7, #1
10018e6a:	e7f2      	b.n	10018e52 <_printf_common+0xbe>
10018e6c:	2000      	movs	r0, #0
10018e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10018e70 <_printf_i>:
10018e70:	b5f0      	push	{r4, r5, r6, r7, lr}
10018e72:	b08b      	sub	sp, #44	; 0x2c
10018e74:	9206      	str	r2, [sp, #24]
10018e76:	000a      	movs	r2, r1
10018e78:	3243      	adds	r2, #67	; 0x43
10018e7a:	9307      	str	r3, [sp, #28]
10018e7c:	9005      	str	r0, [sp, #20]
10018e7e:	9204      	str	r2, [sp, #16]
10018e80:	7e0a      	ldrb	r2, [r1, #24]
10018e82:	000c      	movs	r4, r1
10018e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
10018e86:	2a6e      	cmp	r2, #110	; 0x6e
10018e88:	d100      	bne.n	10018e8c <_printf_i+0x1c>
10018e8a:	e0ab      	b.n	10018fe4 <_printf_i+0x174>
10018e8c:	d811      	bhi.n	10018eb2 <_printf_i+0x42>
10018e8e:	2a63      	cmp	r2, #99	; 0x63
10018e90:	d022      	beq.n	10018ed8 <_printf_i+0x68>
10018e92:	d809      	bhi.n	10018ea8 <_printf_i+0x38>
10018e94:	2a00      	cmp	r2, #0
10018e96:	d100      	bne.n	10018e9a <_printf_i+0x2a>
10018e98:	e0b5      	b.n	10019006 <_printf_i+0x196>
10018e9a:	2a58      	cmp	r2, #88	; 0x58
10018e9c:	d000      	beq.n	10018ea0 <_printf_i+0x30>
10018e9e:	e0c5      	b.n	1001902c <_printf_i+0x1bc>
10018ea0:	3145      	adds	r1, #69	; 0x45
10018ea2:	700a      	strb	r2, [r1, #0]
10018ea4:	4a81      	ldr	r2, [pc, #516]	; (100190ac <_printf_i+0x23c>)
10018ea6:	e04f      	b.n	10018f48 <_printf_i+0xd8>
10018ea8:	2a64      	cmp	r2, #100	; 0x64
10018eaa:	d01d      	beq.n	10018ee8 <_printf_i+0x78>
10018eac:	2a69      	cmp	r2, #105	; 0x69
10018eae:	d01b      	beq.n	10018ee8 <_printf_i+0x78>
10018eb0:	e0bc      	b.n	1001902c <_printf_i+0x1bc>
10018eb2:	2a73      	cmp	r2, #115	; 0x73
10018eb4:	d100      	bne.n	10018eb8 <_printf_i+0x48>
10018eb6:	e0aa      	b.n	1001900e <_printf_i+0x19e>
10018eb8:	d809      	bhi.n	10018ece <_printf_i+0x5e>
10018eba:	2a6f      	cmp	r2, #111	; 0x6f
10018ebc:	d029      	beq.n	10018f12 <_printf_i+0xa2>
10018ebe:	2a70      	cmp	r2, #112	; 0x70
10018ec0:	d000      	beq.n	10018ec4 <_printf_i+0x54>
10018ec2:	e0b3      	b.n	1001902c <_printf_i+0x1bc>
10018ec4:	2220      	movs	r2, #32
10018ec6:	6809      	ldr	r1, [r1, #0]
10018ec8:	430a      	orrs	r2, r1
10018eca:	6022      	str	r2, [r4, #0]
10018ecc:	e037      	b.n	10018f3e <_printf_i+0xce>
10018ece:	2a75      	cmp	r2, #117	; 0x75
10018ed0:	d01f      	beq.n	10018f12 <_printf_i+0xa2>
10018ed2:	2a78      	cmp	r2, #120	; 0x78
10018ed4:	d033      	beq.n	10018f3e <_printf_i+0xce>
10018ed6:	e0a9      	b.n	1001902c <_printf_i+0x1bc>
10018ed8:	000e      	movs	r6, r1
10018eda:	681a      	ldr	r2, [r3, #0]
10018edc:	3642      	adds	r6, #66	; 0x42
10018ede:	1d11      	adds	r1, r2, #4
10018ee0:	6019      	str	r1, [r3, #0]
10018ee2:	6813      	ldr	r3, [r2, #0]
10018ee4:	7033      	strb	r3, [r6, #0]
10018ee6:	e0a4      	b.n	10019032 <_printf_i+0x1c2>
10018ee8:	6821      	ldr	r1, [r4, #0]
10018eea:	681a      	ldr	r2, [r3, #0]
10018eec:	0608      	lsls	r0, r1, #24
10018eee:	d406      	bmi.n	10018efe <_printf_i+0x8e>
10018ef0:	0649      	lsls	r1, r1, #25
10018ef2:	d504      	bpl.n	10018efe <_printf_i+0x8e>
10018ef4:	1d11      	adds	r1, r2, #4
10018ef6:	6019      	str	r1, [r3, #0]
10018ef8:	2300      	movs	r3, #0
10018efa:	5ed5      	ldrsh	r5, [r2, r3]
10018efc:	e002      	b.n	10018f04 <_printf_i+0x94>
10018efe:	1d11      	adds	r1, r2, #4
10018f00:	6019      	str	r1, [r3, #0]
10018f02:	6815      	ldr	r5, [r2, #0]
10018f04:	2d00      	cmp	r5, #0
10018f06:	da3b      	bge.n	10018f80 <_printf_i+0x110>
10018f08:	232d      	movs	r3, #45	; 0x2d
10018f0a:	9a04      	ldr	r2, [sp, #16]
10018f0c:	426d      	negs	r5, r5
10018f0e:	7013      	strb	r3, [r2, #0]
10018f10:	e036      	b.n	10018f80 <_printf_i+0x110>
10018f12:	6821      	ldr	r1, [r4, #0]
10018f14:	681a      	ldr	r2, [r3, #0]
10018f16:	0608      	lsls	r0, r1, #24
10018f18:	d406      	bmi.n	10018f28 <_printf_i+0xb8>
10018f1a:	0649      	lsls	r1, r1, #25
10018f1c:	d504      	bpl.n	10018f28 <_printf_i+0xb8>
10018f1e:	6815      	ldr	r5, [r2, #0]
10018f20:	1d11      	adds	r1, r2, #4
10018f22:	6019      	str	r1, [r3, #0]
10018f24:	b2ad      	uxth	r5, r5
10018f26:	e002      	b.n	10018f2e <_printf_i+0xbe>
10018f28:	1d11      	adds	r1, r2, #4
10018f2a:	6019      	str	r1, [r3, #0]
10018f2c:	6815      	ldr	r5, [r2, #0]
10018f2e:	4b5f      	ldr	r3, [pc, #380]	; (100190ac <_printf_i+0x23c>)
10018f30:	7e22      	ldrb	r2, [r4, #24]
10018f32:	9303      	str	r3, [sp, #12]
10018f34:	2708      	movs	r7, #8
10018f36:	2a6f      	cmp	r2, #111	; 0x6f
10018f38:	d01d      	beq.n	10018f76 <_printf_i+0x106>
10018f3a:	270a      	movs	r7, #10
10018f3c:	e01b      	b.n	10018f76 <_printf_i+0x106>
10018f3e:	0022      	movs	r2, r4
10018f40:	2178      	movs	r1, #120	; 0x78
10018f42:	3245      	adds	r2, #69	; 0x45
10018f44:	7011      	strb	r1, [r2, #0]
10018f46:	4a5a      	ldr	r2, [pc, #360]	; (100190b0 <_printf_i+0x240>)
10018f48:	6819      	ldr	r1, [r3, #0]
10018f4a:	9203      	str	r2, [sp, #12]
10018f4c:	1d08      	adds	r0, r1, #4
10018f4e:	6822      	ldr	r2, [r4, #0]
10018f50:	6018      	str	r0, [r3, #0]
10018f52:	680d      	ldr	r5, [r1, #0]
10018f54:	0610      	lsls	r0, r2, #24
10018f56:	d402      	bmi.n	10018f5e <_printf_i+0xee>
10018f58:	0650      	lsls	r0, r2, #25
10018f5a:	d500      	bpl.n	10018f5e <_printf_i+0xee>
10018f5c:	b2ad      	uxth	r5, r5
10018f5e:	07d3      	lsls	r3, r2, #31
10018f60:	d502      	bpl.n	10018f68 <_printf_i+0xf8>
10018f62:	2320      	movs	r3, #32
10018f64:	431a      	orrs	r2, r3
10018f66:	6022      	str	r2, [r4, #0]
10018f68:	2710      	movs	r7, #16
10018f6a:	2d00      	cmp	r5, #0
10018f6c:	d103      	bne.n	10018f76 <_printf_i+0x106>
10018f6e:	2320      	movs	r3, #32
10018f70:	6822      	ldr	r2, [r4, #0]
10018f72:	439a      	bics	r2, r3
10018f74:	6022      	str	r2, [r4, #0]
10018f76:	0023      	movs	r3, r4
10018f78:	2200      	movs	r2, #0
10018f7a:	3343      	adds	r3, #67	; 0x43
10018f7c:	701a      	strb	r2, [r3, #0]
10018f7e:	e002      	b.n	10018f86 <_printf_i+0x116>
10018f80:	270a      	movs	r7, #10
10018f82:	4b4a      	ldr	r3, [pc, #296]	; (100190ac <_printf_i+0x23c>)
10018f84:	9303      	str	r3, [sp, #12]
10018f86:	6863      	ldr	r3, [r4, #4]
10018f88:	60a3      	str	r3, [r4, #8]
10018f8a:	2b00      	cmp	r3, #0
10018f8c:	db09      	blt.n	10018fa2 <_printf_i+0x132>
10018f8e:	2204      	movs	r2, #4
10018f90:	6821      	ldr	r1, [r4, #0]
10018f92:	4391      	bics	r1, r2
10018f94:	6021      	str	r1, [r4, #0]
10018f96:	2d00      	cmp	r5, #0
10018f98:	d105      	bne.n	10018fa6 <_printf_i+0x136>
10018f9a:	9e04      	ldr	r6, [sp, #16]
10018f9c:	2b00      	cmp	r3, #0
10018f9e:	d011      	beq.n	10018fc4 <_printf_i+0x154>
10018fa0:	e07b      	b.n	1001909a <_printf_i+0x22a>
10018fa2:	2d00      	cmp	r5, #0
10018fa4:	d079      	beq.n	1001909a <_printf_i+0x22a>
10018fa6:	9e04      	ldr	r6, [sp, #16]
10018fa8:	0028      	movs	r0, r5
10018faa:	0039      	movs	r1, r7
10018fac:	f7fb ff88 	bl	10014ec0 <__aeabi_uidivmod>
10018fb0:	9b03      	ldr	r3, [sp, #12]
10018fb2:	3e01      	subs	r6, #1
10018fb4:	5c5b      	ldrb	r3, [r3, r1]
10018fb6:	0028      	movs	r0, r5
10018fb8:	7033      	strb	r3, [r6, #0]
10018fba:	0039      	movs	r1, r7
10018fbc:	f7fb fefa 	bl	10014db4 <__aeabi_uidiv>
10018fc0:	1e05      	subs	r5, r0, #0
10018fc2:	d1f1      	bne.n	10018fa8 <_printf_i+0x138>
10018fc4:	2f08      	cmp	r7, #8
10018fc6:	d109      	bne.n	10018fdc <_printf_i+0x16c>
10018fc8:	6823      	ldr	r3, [r4, #0]
10018fca:	07db      	lsls	r3, r3, #31
10018fcc:	d506      	bpl.n	10018fdc <_printf_i+0x16c>
10018fce:	6863      	ldr	r3, [r4, #4]
10018fd0:	6922      	ldr	r2, [r4, #16]
10018fd2:	4293      	cmp	r3, r2
10018fd4:	dc02      	bgt.n	10018fdc <_printf_i+0x16c>
10018fd6:	2330      	movs	r3, #48	; 0x30
10018fd8:	3e01      	subs	r6, #1
10018fda:	7033      	strb	r3, [r6, #0]
10018fdc:	9b04      	ldr	r3, [sp, #16]
10018fde:	1b9b      	subs	r3, r3, r6
10018fe0:	6123      	str	r3, [r4, #16]
10018fe2:	e02b      	b.n	1001903c <_printf_i+0x1cc>
10018fe4:	6809      	ldr	r1, [r1, #0]
10018fe6:	681a      	ldr	r2, [r3, #0]
10018fe8:	0608      	lsls	r0, r1, #24
10018fea:	d407      	bmi.n	10018ffc <_printf_i+0x18c>
10018fec:	0649      	lsls	r1, r1, #25
10018fee:	d505      	bpl.n	10018ffc <_printf_i+0x18c>
10018ff0:	1d11      	adds	r1, r2, #4
10018ff2:	6019      	str	r1, [r3, #0]
10018ff4:	6813      	ldr	r3, [r2, #0]
10018ff6:	8aa2      	ldrh	r2, [r4, #20]
10018ff8:	801a      	strh	r2, [r3, #0]
10018ffa:	e004      	b.n	10019006 <_printf_i+0x196>
10018ffc:	1d11      	adds	r1, r2, #4
10018ffe:	6019      	str	r1, [r3, #0]
10019000:	6813      	ldr	r3, [r2, #0]
10019002:	6962      	ldr	r2, [r4, #20]
10019004:	601a      	str	r2, [r3, #0]
10019006:	2300      	movs	r3, #0
10019008:	9e04      	ldr	r6, [sp, #16]
1001900a:	6123      	str	r3, [r4, #16]
1001900c:	e016      	b.n	1001903c <_printf_i+0x1cc>
1001900e:	681a      	ldr	r2, [r3, #0]
10019010:	1d11      	adds	r1, r2, #4
10019012:	6019      	str	r1, [r3, #0]
10019014:	6816      	ldr	r6, [r2, #0]
10019016:	2100      	movs	r1, #0
10019018:	6862      	ldr	r2, [r4, #4]
1001901a:	0030      	movs	r0, r6
1001901c:	f000 f92a 	bl	10019274 <memchr>
10019020:	2800      	cmp	r0, #0
10019022:	d001      	beq.n	10019028 <_printf_i+0x1b8>
10019024:	1b80      	subs	r0, r0, r6
10019026:	6060      	str	r0, [r4, #4]
10019028:	6863      	ldr	r3, [r4, #4]
1001902a:	e003      	b.n	10019034 <_printf_i+0x1c4>
1001902c:	0026      	movs	r6, r4
1001902e:	3642      	adds	r6, #66	; 0x42
10019030:	7032      	strb	r2, [r6, #0]
10019032:	2301      	movs	r3, #1
10019034:	6123      	str	r3, [r4, #16]
10019036:	2300      	movs	r3, #0
10019038:	9a04      	ldr	r2, [sp, #16]
1001903a:	7013      	strb	r3, [r2, #0]
1001903c:	9b07      	ldr	r3, [sp, #28]
1001903e:	aa09      	add	r2, sp, #36	; 0x24
10019040:	9300      	str	r3, [sp, #0]
10019042:	0021      	movs	r1, r4
10019044:	9b06      	ldr	r3, [sp, #24]
10019046:	9805      	ldr	r0, [sp, #20]
10019048:	f7ff fea4 	bl	10018d94 <_printf_common>
1001904c:	1c43      	adds	r3, r0, #1
1001904e:	d102      	bne.n	10019056 <_printf_i+0x1e6>
10019050:	2001      	movs	r0, #1
10019052:	4240      	negs	r0, r0
10019054:	e027      	b.n	100190a6 <_printf_i+0x236>
10019056:	6923      	ldr	r3, [r4, #16]
10019058:	0032      	movs	r2, r6
1001905a:	9906      	ldr	r1, [sp, #24]
1001905c:	9805      	ldr	r0, [sp, #20]
1001905e:	9d07      	ldr	r5, [sp, #28]
10019060:	47a8      	blx	r5
10019062:	1c43      	adds	r3, r0, #1
10019064:	d0f4      	beq.n	10019050 <_printf_i+0x1e0>
10019066:	6823      	ldr	r3, [r4, #0]
10019068:	2500      	movs	r5, #0
1001906a:	079b      	lsls	r3, r3, #30
1001906c:	d40f      	bmi.n	1001908e <_printf_i+0x21e>
1001906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10019070:	68e0      	ldr	r0, [r4, #12]
10019072:	4298      	cmp	r0, r3
10019074:	da17      	bge.n	100190a6 <_printf_i+0x236>
10019076:	0018      	movs	r0, r3
10019078:	e015      	b.n	100190a6 <_printf_i+0x236>
1001907a:	0022      	movs	r2, r4
1001907c:	2301      	movs	r3, #1
1001907e:	3219      	adds	r2, #25
10019080:	9906      	ldr	r1, [sp, #24]
10019082:	9805      	ldr	r0, [sp, #20]
10019084:	9e07      	ldr	r6, [sp, #28]
10019086:	47b0      	blx	r6
10019088:	1c43      	adds	r3, r0, #1
1001908a:	d0e1      	beq.n	10019050 <_printf_i+0x1e0>
1001908c:	3501      	adds	r5, #1
1001908e:	68e3      	ldr	r3, [r4, #12]
10019090:	9a09      	ldr	r2, [sp, #36]	; 0x24
10019092:	1a9b      	subs	r3, r3, r2
10019094:	429d      	cmp	r5, r3
10019096:	dbf0      	blt.n	1001907a <_printf_i+0x20a>
10019098:	e7e9      	b.n	1001906e <_printf_i+0x1fe>
1001909a:	0026      	movs	r6, r4
1001909c:	9b03      	ldr	r3, [sp, #12]
1001909e:	3642      	adds	r6, #66	; 0x42
100190a0:	781b      	ldrb	r3, [r3, #0]
100190a2:	7033      	strb	r3, [r6, #0]
100190a4:	e78e      	b.n	10018fc4 <_printf_i+0x154>
100190a6:	b00b      	add	sp, #44	; 0x2c
100190a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100190aa:	46c0      	nop			; (mov r8, r8)
100190ac:	1001b35d 	.word	0x1001b35d
100190b0:	1001b36e 	.word	0x1001b36e

100190b4 <_putc_r>:
100190b4:	b570      	push	{r4, r5, r6, lr}
100190b6:	0006      	movs	r6, r0
100190b8:	000d      	movs	r5, r1
100190ba:	0014      	movs	r4, r2
100190bc:	2800      	cmp	r0, #0
100190be:	d004      	beq.n	100190ca <_putc_r+0x16>
100190c0:	6983      	ldr	r3, [r0, #24]
100190c2:	2b00      	cmp	r3, #0
100190c4:	d101      	bne.n	100190ca <_putc_r+0x16>
100190c6:	f7ff fc29 	bl	1001891c <__sinit>
100190ca:	4b12      	ldr	r3, [pc, #72]	; (10019114 <_putc_r+0x60>)
100190cc:	429c      	cmp	r4, r3
100190ce:	d101      	bne.n	100190d4 <_putc_r+0x20>
100190d0:	6874      	ldr	r4, [r6, #4]
100190d2:	e008      	b.n	100190e6 <_putc_r+0x32>
100190d4:	4b10      	ldr	r3, [pc, #64]	; (10019118 <_putc_r+0x64>)
100190d6:	429c      	cmp	r4, r3
100190d8:	d101      	bne.n	100190de <_putc_r+0x2a>
100190da:	68b4      	ldr	r4, [r6, #8]
100190dc:	e003      	b.n	100190e6 <_putc_r+0x32>
100190de:	4b0f      	ldr	r3, [pc, #60]	; (1001911c <_putc_r+0x68>)
100190e0:	429c      	cmp	r4, r3
100190e2:	d100      	bne.n	100190e6 <_putc_r+0x32>
100190e4:	68f4      	ldr	r4, [r6, #12]
100190e6:	68a3      	ldr	r3, [r4, #8]
100190e8:	3b01      	subs	r3, #1
100190ea:	60a3      	str	r3, [r4, #8]
100190ec:	2b00      	cmp	r3, #0
100190ee:	da05      	bge.n	100190fc <_putc_r+0x48>
100190f0:	69a2      	ldr	r2, [r4, #24]
100190f2:	4293      	cmp	r3, r2
100190f4:	db08      	blt.n	10019108 <_putc_r+0x54>
100190f6:	b2eb      	uxtb	r3, r5
100190f8:	2b0a      	cmp	r3, #10
100190fa:	d005      	beq.n	10019108 <_putc_r+0x54>
100190fc:	6823      	ldr	r3, [r4, #0]
100190fe:	b2e8      	uxtb	r0, r5
10019100:	1c5a      	adds	r2, r3, #1
10019102:	6022      	str	r2, [r4, #0]
10019104:	701d      	strb	r5, [r3, #0]
10019106:	e004      	b.n	10019112 <_putc_r+0x5e>
10019108:	0022      	movs	r2, r4
1001910a:	0029      	movs	r1, r5
1001910c:	0030      	movs	r0, r6
1001910e:	f7ff fa43 	bl	10018598 <__swbuf_r>
10019112:	bd70      	pop	{r4, r5, r6, pc}
10019114:	1001b2ec 	.word	0x1001b2ec
10019118:	1001b30c 	.word	0x1001b30c
1001911c:	1001b32c 	.word	0x1001b32c

10019120 <__sread>:
10019120:	b570      	push	{r4, r5, r6, lr}
10019122:	000c      	movs	r4, r1
10019124:	250e      	movs	r5, #14
10019126:	5f49      	ldrsh	r1, [r1, r5]
10019128:	f000 f8b0 	bl	1001928c <_read_r>
1001912c:	2800      	cmp	r0, #0
1001912e:	db03      	blt.n	10019138 <__sread+0x18>
10019130:	6d63      	ldr	r3, [r4, #84]	; 0x54
10019132:	181b      	adds	r3, r3, r0
10019134:	6563      	str	r3, [r4, #84]	; 0x54
10019136:	e003      	b.n	10019140 <__sread+0x20>
10019138:	89a2      	ldrh	r2, [r4, #12]
1001913a:	4b02      	ldr	r3, [pc, #8]	; (10019144 <__sread+0x24>)
1001913c:	4013      	ands	r3, r2
1001913e:	81a3      	strh	r3, [r4, #12]
10019140:	bd70      	pop	{r4, r5, r6, pc}
10019142:	46c0      	nop			; (mov r8, r8)
10019144:	ffffefff 	.word	0xffffefff

10019148 <__swrite>:
10019148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001914a:	001f      	movs	r7, r3
1001914c:	898b      	ldrh	r3, [r1, #12]
1001914e:	0005      	movs	r5, r0
10019150:	000c      	movs	r4, r1
10019152:	0016      	movs	r6, r2
10019154:	05db      	lsls	r3, r3, #23
10019156:	d505      	bpl.n	10019164 <__swrite+0x1c>
10019158:	230e      	movs	r3, #14
1001915a:	5ec9      	ldrsh	r1, [r1, r3]
1001915c:	2200      	movs	r2, #0
1001915e:	2302      	movs	r3, #2
10019160:	f000 f874 	bl	1001924c <_lseek_r>
10019164:	89a2      	ldrh	r2, [r4, #12]
10019166:	4b05      	ldr	r3, [pc, #20]	; (1001917c <__swrite+0x34>)
10019168:	0028      	movs	r0, r5
1001916a:	4013      	ands	r3, r2
1001916c:	81a3      	strh	r3, [r4, #12]
1001916e:	0032      	movs	r2, r6
10019170:	230e      	movs	r3, #14
10019172:	5ee1      	ldrsh	r1, [r4, r3]
10019174:	003b      	movs	r3, r7
10019176:	f000 f81f 	bl	100191b8 <_write_r>
1001917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001917c:	ffffefff 	.word	0xffffefff

10019180 <__sseek>:
10019180:	b570      	push	{r4, r5, r6, lr}
10019182:	000c      	movs	r4, r1
10019184:	250e      	movs	r5, #14
10019186:	5f49      	ldrsh	r1, [r1, r5]
10019188:	f000 f860 	bl	1001924c <_lseek_r>
1001918c:	89a3      	ldrh	r3, [r4, #12]
1001918e:	1c42      	adds	r2, r0, #1
10019190:	d103      	bne.n	1001919a <__sseek+0x1a>
10019192:	4a05      	ldr	r2, [pc, #20]	; (100191a8 <__sseek+0x28>)
10019194:	4013      	ands	r3, r2
10019196:	81a3      	strh	r3, [r4, #12]
10019198:	e004      	b.n	100191a4 <__sseek+0x24>
1001919a:	2280      	movs	r2, #128	; 0x80
1001919c:	0152      	lsls	r2, r2, #5
1001919e:	4313      	orrs	r3, r2
100191a0:	81a3      	strh	r3, [r4, #12]
100191a2:	6560      	str	r0, [r4, #84]	; 0x54
100191a4:	bd70      	pop	{r4, r5, r6, pc}
100191a6:	46c0      	nop			; (mov r8, r8)
100191a8:	ffffefff 	.word	0xffffefff

100191ac <__sclose>:
100191ac:	b510      	push	{r4, lr}
100191ae:	230e      	movs	r3, #14
100191b0:	5ec9      	ldrsh	r1, [r1, r3]
100191b2:	f000 f815 	bl	100191e0 <_close_r>
100191b6:	bd10      	pop	{r4, pc}

100191b8 <_write_r>:
100191b8:	b570      	push	{r4, r5, r6, lr}
100191ba:	0005      	movs	r5, r0
100191bc:	0008      	movs	r0, r1
100191be:	0011      	movs	r1, r2
100191c0:	2200      	movs	r2, #0
100191c2:	4c06      	ldr	r4, [pc, #24]	; (100191dc <_write_r+0x24>)
100191c4:	6022      	str	r2, [r4, #0]
100191c6:	001a      	movs	r2, r3
100191c8:	f7f3 fb52 	bl	1000c870 <_write>
100191cc:	1c43      	adds	r3, r0, #1
100191ce:	d103      	bne.n	100191d8 <_write_r+0x20>
100191d0:	6823      	ldr	r3, [r4, #0]
100191d2:	2b00      	cmp	r3, #0
100191d4:	d000      	beq.n	100191d8 <_write_r+0x20>
100191d6:	602b      	str	r3, [r5, #0]
100191d8:	bd70      	pop	{r4, r5, r6, pc}
100191da:	46c0      	nop			; (mov r8, r8)
100191dc:	1001e878 	.word	0x1001e878

100191e0 <_close_r>:
100191e0:	2300      	movs	r3, #0
100191e2:	b570      	push	{r4, r5, r6, lr}
100191e4:	4c06      	ldr	r4, [pc, #24]	; (10019200 <_close_r+0x20>)
100191e6:	0005      	movs	r5, r0
100191e8:	0008      	movs	r0, r1
100191ea:	6023      	str	r3, [r4, #0]
100191ec:	f7f4 fd42 	bl	1000dc74 <_close>
100191f0:	1c43      	adds	r3, r0, #1
100191f2:	d103      	bne.n	100191fc <_close_r+0x1c>
100191f4:	6823      	ldr	r3, [r4, #0]
100191f6:	2b00      	cmp	r3, #0
100191f8:	d000      	beq.n	100191fc <_close_r+0x1c>
100191fa:	602b      	str	r3, [r5, #0]
100191fc:	bd70      	pop	{r4, r5, r6, pc}
100191fe:	46c0      	nop			; (mov r8, r8)
10019200:	1001e878 	.word	0x1001e878

10019204 <_fstat_r>:
10019204:	2300      	movs	r3, #0
10019206:	b570      	push	{r4, r5, r6, lr}
10019208:	4c06      	ldr	r4, [pc, #24]	; (10019224 <_fstat_r+0x20>)
1001920a:	0005      	movs	r5, r0
1001920c:	0008      	movs	r0, r1
1001920e:	0011      	movs	r1, r2
10019210:	6023      	str	r3, [r4, #0]
10019212:	f7f4 fd33 	bl	1000dc7c <_fstat>
10019216:	1c43      	adds	r3, r0, #1
10019218:	d103      	bne.n	10019222 <_fstat_r+0x1e>
1001921a:	6823      	ldr	r3, [r4, #0]
1001921c:	2b00      	cmp	r3, #0
1001921e:	d000      	beq.n	10019222 <_fstat_r+0x1e>
10019220:	602b      	str	r3, [r5, #0]
10019222:	bd70      	pop	{r4, r5, r6, pc}
10019224:	1001e878 	.word	0x1001e878

10019228 <_isatty_r>:
10019228:	2300      	movs	r3, #0
1001922a:	b570      	push	{r4, r5, r6, lr}
1001922c:	4c06      	ldr	r4, [pc, #24]	; (10019248 <_isatty_r+0x20>)
1001922e:	0005      	movs	r5, r0
10019230:	0008      	movs	r0, r1
10019232:	6023      	str	r3, [r4, #0]
10019234:	f7f4 fd28 	bl	1000dc88 <_isatty>
10019238:	1c43      	adds	r3, r0, #1
1001923a:	d103      	bne.n	10019244 <_isatty_r+0x1c>
1001923c:	6823      	ldr	r3, [r4, #0]
1001923e:	2b00      	cmp	r3, #0
10019240:	d000      	beq.n	10019244 <_isatty_r+0x1c>
10019242:	602b      	str	r3, [r5, #0]
10019244:	bd70      	pop	{r4, r5, r6, pc}
10019246:	46c0      	nop			; (mov r8, r8)
10019248:	1001e878 	.word	0x1001e878

1001924c <_lseek_r>:
1001924c:	b570      	push	{r4, r5, r6, lr}
1001924e:	0005      	movs	r5, r0
10019250:	0008      	movs	r0, r1
10019252:	0011      	movs	r1, r2
10019254:	2200      	movs	r2, #0
10019256:	4c06      	ldr	r4, [pc, #24]	; (10019270 <_lseek_r+0x24>)
10019258:	6022      	str	r2, [r4, #0]
1001925a:	001a      	movs	r2, r3
1001925c:	f7f4 fd16 	bl	1000dc8c <_lseek>
10019260:	1c43      	adds	r3, r0, #1
10019262:	d103      	bne.n	1001926c <_lseek_r+0x20>
10019264:	6823      	ldr	r3, [r4, #0]
10019266:	2b00      	cmp	r3, #0
10019268:	d000      	beq.n	1001926c <_lseek_r+0x20>
1001926a:	602b      	str	r3, [r5, #0]
1001926c:	bd70      	pop	{r4, r5, r6, pc}
1001926e:	46c0      	nop			; (mov r8, r8)
10019270:	1001e878 	.word	0x1001e878

10019274 <memchr>:
10019274:	b2c9      	uxtb	r1, r1
10019276:	1882      	adds	r2, r0, r2
10019278:	4290      	cmp	r0, r2
1001927a:	d004      	beq.n	10019286 <memchr+0x12>
1001927c:	7803      	ldrb	r3, [r0, #0]
1001927e:	428b      	cmp	r3, r1
10019280:	d002      	beq.n	10019288 <memchr+0x14>
10019282:	3001      	adds	r0, #1
10019284:	e7f8      	b.n	10019278 <memchr+0x4>
10019286:	2000      	movs	r0, #0
10019288:	4770      	bx	lr
	...

1001928c <_read_r>:
1001928c:	b570      	push	{r4, r5, r6, lr}
1001928e:	0005      	movs	r5, r0
10019290:	0008      	movs	r0, r1
10019292:	0011      	movs	r1, r2
10019294:	2200      	movs	r2, #0
10019296:	4c06      	ldr	r4, [pc, #24]	; (100192b0 <_read_r+0x24>)
10019298:	6022      	str	r2, [r4, #0]
1001929a:	001a      	movs	r2, r3
1001929c:	f7f3 fac8 	bl	1000c830 <_read>
100192a0:	1c43      	adds	r3, r0, #1
100192a2:	d103      	bne.n	100192ac <_read_r+0x20>
100192a4:	6823      	ldr	r3, [r4, #0]
100192a6:	2b00      	cmp	r3, #0
100192a8:	d000      	beq.n	100192ac <_read_r+0x20>
100192aa:	602b      	str	r3, [r5, #0]
100192ac:	bd70      	pop	{r4, r5, r6, pc}
100192ae:	46c0      	nop			; (mov r8, r8)
100192b0:	1001e878 	.word	0x1001e878

100192b4 <test>:
100192b4:	00000083 00004000 00000200 00c800c8     .....@..........
100192c4:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100192d4:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100192e4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
100192f4:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10019304:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10019314:	666f206c 74657366 74616420 57482061     l offset data HW
10019324:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10019334:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10019344:	6f727947 66666f20 20746573 61746164     Gyro offset data
10019354:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10019364:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10019374:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10019384:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10019394:	6e756f66 00002e64 72617453 676e6974     found...Starting
100193a4:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
100193b4:	72746552 69766569 4220676e 65736169     Retrieving Biase
100193c4:	00000d73 72746552 69766569 4220676e     s...Retrieving B
100193d4:	65736169 72452073 20726f72 6f70202d     iases Error - po
100193e4:	62697373 4920656c 65204332 726f7272     ssible I2C error
100193f4:	00000000 72746552 69766569 5320676e     ....Retrieving S
10019404:	69422054 73657361 00000000 72746552     T Biases....Retr
10019414:	69766569 5320676e 69422054 73657361     ieving ST Biases
10019424:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10019434:	32492065 72652043 00726f72 64616552     e I2C error.Read
10019444:	20676e69 2050544f 69676552 72657473     ing OTP Register
10019454:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10019464:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10019474:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10019484:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10019494:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100194a4:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
100194b4:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
100194c4:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
100194d4:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100194e4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100194f4:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10019504:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10019514:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10019524:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10019534:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10019544:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10019554:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10019564:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10019574:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10019584:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10019594:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
100195a4:	6c207361 20737365 6e616874 2e372520     as less than %7.
100195b4:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
100195c4:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
100195d4:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100195e4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
100195f4:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10019604:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10019614:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10019624:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10019634:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10019644:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10019654:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10019664:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10019674:	253a7369 72672064 65746165 68742072     is:%d greater th
10019684:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10019694:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
100196a4:	656c2073 74207373 206e6168 342e3725     s less than %7.4
100196b4:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
100196c4:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
100196d4:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100196e4:	65542066 52207473 6c757365 203a7374     f Test Results: 
100196f4:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10019704:	73655420 65522074 746c7573 25203a73      Test Results: %
10019714:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10019724:	00000000                                ....

10019728 <reg>:
10019728:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10019738:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10019748:	2a292827 67646334 00000049              '()*4cdgI...

10019754 <hw>:
10019754:	04000069 01410080 01000000 00001333     i.....A.....3...
10019764:	8db3aab8 350d98b4 0000005d 006ccd4c     .......5]...L.l.
10019774:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10019784:	dfdff1aa dfdfafbb aaaaaab8 c5c388b0     ................
10019794:	000000c7 f3b9b1d8 b691a38b 00d9b409     ................
100197a4:	f3b9b1da b691a38b 00dab4da              ............

100197b0 <dmp_memory>:
100197b0:	00700000 24000000 02000000 00000300     ..p....$........
100197c0:	54006500 0000efff 0b0080fa 01008212     .e.T............
100197d0:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
100197e0:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
100197f0:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
10019800:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
10019810:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
10019820:	00000020 00000000 00000040 00000060      .......@...`...
10019830:	00000c00 6e180c00 92060000 dfc0160a     .......n........
10019840:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
10019850:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
10019860:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
10019870:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
10019880:	00000000 b5421900 a2390000 65b30000     ......B...9....e
10019890:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
100198a0:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
100198b0:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
100198c0:	00000100 00003200 000046ff 0000d463     .....2...F..c...
100198d0:	00000010 0000d604 0000cc04 0000cc04     ................
100198e0:	72100000 40000000 00000000 00000000     ...r...@........
100198f0:	02000600 07000500 00000000 00006400     .............d..
10019900:	00000000 05000000 64000500 00002000     ...........d. ..
	...
10019918:	00400000 00030000 32000000 000098f8     ..@........2....
10019928:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
1001995c:	00100000 00000040 06000000 6ab20000     ....@..........j
1001996c:	00000200 83fb0100 00006800 00fcd900     .........h......
1001997c:	83fff17c 00000000 00006500 e8036400     |........e...d..
1001998c:	28006400 25000000 00000000 0000a016     .d.(...%........
1001999c:	00100000 00100000 00002f00 f4010000     ........./......
100199ac:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
100199c4:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
100199d4:	00000000 00060000 14000000 4d250000     ..............%M
100199e4:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
10019a00:	00001b00 00000000 00000000 00000000     ................
10019a10:	00006400 00000800 00000000 00000000     .d..............
	...
10019a70:	00001b00 00000000 00000000 0e000e00     ................
10019a80:	c70a0000 00000400 32000000 9cffffff     ...........2....
10019a90:	2b0b0000 02000000 01000000 64000000     ...+...........d
10019aa0:	0000e5ff 00000000 00000000 00000000     ................
10019ab0:	01000000 00000000 00000100 00000000     ................
10019ac0:	00800100 00800100 00800100 d3262400     .............$&.
	...
10019ad8:	10000600 3c009600 00000000 00000000     .......<........
	...
10019af0:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
10019b18:	0084d717 00000003 00000000 00000000     ................
10019b28:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
10019b48:	85180302 00400000 03000000 03000000     ......@.........
	...
10019b60:	00000040 00000000 00000000 00000000     @...............
	...
10019b94:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
10019bb0:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
10019bc0:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
10019bd0:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
10019be0:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
10019bf0:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
10019c00:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
10019c10:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
10019c20:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
10019c30:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
10019c40:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
10019c50:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
10019c60:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
10019c70:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
10019c80:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
10019c90:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
10019ca0:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
10019cb0:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
10019cc0:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
10019cd0:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
10019ce0:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
10019cf0:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
10019d00:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
10019d10:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
10019d20:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
10019d30:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
10019d40:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
10019d50:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
10019d60:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
10019d70:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
10019d80:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
10019d90:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
10019da0:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
10019db0:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
10019dc0:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
10019dd0:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
10019de0:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
10019df0:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
10019e00:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
10019e10:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
10019e20:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
10019e30:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
10019e40:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
10019e50:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
10019e60:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
10019e70:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
10019e80:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
10019e90:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
10019ea0:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
10019eb0:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
10019ec0:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
10019ed0:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
10019ee0:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
10019ef0:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
10019f00:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
10019f10:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
10019f20:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
10019f30:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
10019f40:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
10019f50:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
10019f60:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
10019f70:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
10019f80:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
10019f90:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
10019fa0:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
10019fb0:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
10019fc0:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
10019fd0:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
10019fe0:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
10019ff0:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
1001a000:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
1001a010:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
1001a020:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
1001a030:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
1001a040:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
1001a050:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
1001a060:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
1001a070:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
1001a080:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
1001a090:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
1001a0a0:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
1001a0b0:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
1001a0c0:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
1001a0d0:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
1001a0e0:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
1001a0f0:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
1001a100:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
1001a110:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
1001a120:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
1001a130:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
1001a140:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
1001a150:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
1001a160:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
1001a170:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
1001a180:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
1001a190:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
1001a1a0:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
1001a1b0:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
1001a1c0:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
1001a1d0:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
1001a1e0:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
1001a1f0:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
1001a200:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
1001a210:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
1001a220:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
1001a230:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
1001a240:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
1001a250:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
1001a260:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
1001a270:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
1001a280:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
1001a290:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
1001a2a0:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
1001a2b0:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
1001a2c0:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
1001a2d0:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
1001a2e0:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
1001a2f0:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
1001a300:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
1001a310:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
1001a320:	a890d8ff a899890d 21988010 89d82eda     ...........!....
1001a330:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
1001a340:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
1001a350:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
1001a360:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
1001a370:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
1001a380:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
1001a390:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
1001a3a0:	d800d9a6 0000fff1 1000bc42 1000bc42     ........B...B...
1001a3b0:	1000bc42 1000bc42 1000bc42 1000bc42     B...B...B...B...
1001a3c0:	1000bc42 1000bc42 1000bc42 1000bc42     B...B...B...B...
1001a3d0:	1000bc42 1000bc42 1000bc42 1000bc42     B...B...B...B...
1001a3e0:	1000bc42 1000bc42 1000bc42 1000bc42     B...B...B...B...
1001a3f0:	1000bc42 1000bc5e 1000bc5e 1000bc5e     B...^...^...^...
1001a400:	1000bc5e 1000bc5e 1000bc5e 1000bc5e     ^...^...^...^...
1001a410:	1000bc5e 1000bc5e 1000bc5e 1000bc80     ^...^...^.......
1001a420:	1000bc80 1000bc80 1000bc80 1000bc80     ................
1001a430:	1000bc80 1000bc80 1000bc80 1000bc80     ................
1001a440:	1000bc80 1000bca2 1000bca2 1000bca2     ................
1001a450:	1000bca2 1000bca2 1000bca2 1000bcb0     ................
1001a460:	1000bcb0 1000bcb0 1000bcb0 1000bcb0     ................
1001a470:	1000bcb0 1000bcb0 1000bcb0 1000bcb0     ................
1001a480:	1000bcbe 1000bcbe 1000bc1c 1000bc1c     ................
1001a490:	1000bc36 1000bc1c 34333231 00003635     6.......123456..
1001a4a0:	efcdab00 00efcdab b2d60600 f8f005f0     ................
1001a4b0:	00000000                                ....

1001a4b4 <ble_mgr_gatt_server_handle>:
	...
1001a4cc:	1000b655 1000b4f5 1000add1 00000000     U...............
1001a4dc:	69766544 64206563 6f637369 63656e6e     Device disconnec
1001a4ec:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
1001a4fc:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
1001a50c:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
1001a51c:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
1001a52c:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
1001a53c:	46207473 656c6961 00000064 72696150     st Failed...Pair
1001a54c:	20676e69 636f7270 72756465 6f632065     ing procedure co
1001a55c:	656c706d 20646574 63637573 66737365     mpleted successf
1001a56c:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
1001a57c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001a58c:	726f7473 68742065 61702065 6e697269     store the pairin
1001a59c:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
1001a5ac:	4e206e6f 7320746f 74726174 00006465     on Not started..
1001a5bc:	76616c53 65532065 69727563 52207974     Slave Security R
1001a5cc:	2d207165 74754120 746e6568 74616369     eq - Authenticat
1001a5dc:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
1001a5ec:	71655220 74736575 41202d20 65687475      Request - Authe
1001a5fc:	6369746e 6f697461 6146206e 64656c69     ntication Failed
1001a60c:	00000000 65746e45 68742072 61502065     ....Enter the Pa
1001a61c:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
1001a62c:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
1001a63c:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
1001a64c:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
1001a65c:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
1001a66c:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
1001a67c:	206e6f28 6568746f 65442072 65636976     (on other Device
1001a68c:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
1001a69c:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
1001a6ac:	74616546 20657275 20746f4e 70707573     Feature Not supp
1001a6bc:	6574726f 00000064 65746e45 20646572     orted...Entered 
1001a6cc:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
1001a6dc:	20676e69 6f666e69 74616d72 206e6f69     ing information 
1001a6ec:	7020666f 20726565 69766564 69206563     of peer device i
1001a6fc:	6f6e2073 76612074 616c6961 2e656c62     s not available.
1001a70c:	00000000 61656c50 75206573 6961706e     ....Please unpai
1001a71c:	68742072 65642065 65636976 6f726620     r the device fro
1001a72c:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
1001a73c:	656c6962 65732029 6e697474 6d207367     bile) settings m
1001a74c:	20756e65 20646e61 72617473 61702074     enu and start pa
1001a75c:	6e697269 67612067 006e6961 72636e45     iring again.Encr
1001a76c:	69747079 52206e6f 65757165 52207473     yption Request R
1001a77c:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
1001a78c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001a79c:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
1001a7ac:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
1001a7bc:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
1001a7cc:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
1001a7dc:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
1001a7ec:	69747079 63206e6f 6c706d6f 64657465     yption completed
1001a7fc:	63757320 73736563 6c6c7566 00000079      successfully...
1001a80c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
1001a81c:	646e756f 636e6520 74707972 206e6f69     ound encryption 
1001a82c:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
1001a83c:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
1001a84c:	69766564 72206563 68636165 2e2e6465     device reached..
1001a85c:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
1001a86c:	6c696146 74206465 7473206f 7320706f     Failed to stop s
1001a87c:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
1001a88c:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
1001a89c:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
1001a8ac:	6166206e 64656c69 00000000 61656c50     n failed....Plea
1001a8bc:	63206573 6b636568 65687420 776f7020     se check the pow
1001a8cc:	61207265 6320646e 656e6e6f 6f697463     er and connectio
1001a8dc:	202f206e 64726168 65726177 6e6f6320     n / hardware con
1001a8ec:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
1001a8fc:	00000045 69766544 6e206563 20656d61     E...Device name 
1001a90c:	20746573 6c696166 00006465 61204442     set failed..BD a
1001a91c:	65726464 67207373 66207465 656c6961     ddress get faile
1001a92c:	00000064 41204442 65726464 303a7373     d...BD Address:0
1001a93c:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
1001a94c:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
1001a95c:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
1001a96c:	20454c42 69766544 63206563 69666e6f     BLE Device confi
1001a97c:	61727567 6e6f6974 69616620 0064656c     guration failed.
1001a98c:	20746553 20454c42 69766544 41206563     Set BLE Device A
1001a99c:	65726464 66207373 656c6961 00000064     ddress failed...
1001a9ac:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
1001a9bc:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
1001a9cc:	65732065 69727563 72207974 65757165     e security reque
1001a9dc:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001a9ec:	65746365 6f742064 65657020 65642072     ected to peer de
1001a9fc:	65636976 74697720 64612068 73657264     vice with addres
1001aa0c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001aa1c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001aa2c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001aa3c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001aa4c:	61522067 6d6f646e 64646120 73736572     g Random address
1001aa5c:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
1001aa6c:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001aa7c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001aa8c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001aa9c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001aaac:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001aabc:	53202d20 75746174 25203a73 00000064      - Status: %d...
1001aacc:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001aadc:	61642074 73206174 66207465 656c6961     t data set faile
1001aaec:	00000064                                d...

1001aaf0 <ble_mgr_gap_handle>:
1001aaf0:	1000b659 1000b5d9 1000b4cd 00000000     Y...............
1001ab00:	00000000 1000b951 1000ade1 1000addd     ....Q...........
1001ab10:	1000af7d 1000ae7d 1000b161 1000af95     }...}...a.......
1001ab20:	1000b29d 1000b3f9 1000b525 1000bb5d     ........%...]...
	...
1001ab3c:	00002121 1000d7f4 1000d7e8 1000d7dc     !!..............
1001ab4c:	1000d7d0 1000d7c4 1000d7b8 1000d7aa     ................
1001ab5c:	1000d79c 1000d78e 1000d780 1000d772     ............r...
1001ab6c:	1000d764 1000d756 1000d748 1000d73a     d...V...H...:...
1001ab7c:	1000d72c 1000d71e 1000d710 1000d702     ,...............
1001ab8c:	1000d6f4 1000d6e6 1000d6d8 1000d6ca     ................
1001ab9c:	1000d6bc 1000d6ae 1000d6a0 1000d692     ................
1001abac:	1000d686 1000d67a 1000d66e 1000d662     ....z...n...b...
1001abbc:	1000d656 1000d64a 1000d63e 1000d632     V...J...>...2...
1001abcc:	1000d624 1000d616 1000d608 1000d5fa     $...............
1001abdc:	1000d5ec 1000d5de 1000d5d0 1000d5c2     ................
1001abec:	1000d5b4 1000d5a6 1000d598 1000d58a     ................
1001abfc:	1000d57c 1000d56e 1000d560 1000d552     |...n...`...R...
1001ac0c:	1000d546 1000d53a 1000d800 1000dc32     F...:.......2...
1001ac1c:	1000dc2a 1000dc22 1000dc0a 1000dbf4     *..."...........
1001ac2c:	1000db76 1000db5e 1000db46 1000db2e     v...^...F.......
1001ac3c:	1000db16 1000dafe 1000dae6 1000dace     ................
1001ac4c:	1000dab6 1000dc3a 1000dc3a 1000dc3a     ....:...:...:...
1001ac5c:	1000dc3a 1000dc3a 1000dc3a 1000dc3a     :...:...:...:...
1001ac6c:	1000dc3a 1000da9e 1000da86 1000da6e     :...........n...
1001ac7c:	1000da58 1000da40 1000dc3a 1000dc3a     X...@...:...:...
1001ac8c:	1000dc3a 1000dc3a 1000dc3a 1000dc3a     :...:...:...:...
1001ac9c:	1000da28 1000da10 1000d9f8 1000d9e0     (...............
1001acac:	1000dc3a 1000d9c8 1000d9b0 1000dc3a     :...........:...
1001acbc:	1000dc3a 1000d99a 1000d984 1000d96e     :...........n...
1001accc:	1000d958 1000dc3a 1000dc3a 1000dc3a     X...:...:...:...
1001acdc:	1000dc3a 1000dc3a 1000dc3a 1000dc3a     :...:...:...:...
1001acec:	1000dc3a 1000d950 1000d948 1000d940     :...P...H...@...
1001acfc:	1000d92c 1000d914 1000d8fc 1000d8e4     ,...............
1001ad0c:	1000d8cc 1000d8b4 1000d89c 1000d886     ................
1001ad1c:	1000d870 1000d858 1000d840 4f464946     p...X...@...FIFO
1001ad2c:	6425203a 20642520 202c6425 25206425     : %d %d %d, %d %
1001ad3c:	64252064 6c25202c 6c252064 6c252064     d %d, %ld %ld %l
1001ad4c:	6c252064 00000064 20554d49 45544e49     d %ld...IMU INTE
1001ad5c:	50555252 00002154 4c504d65 312e3520     RRUPT!..eMPL 5.1
1001ad6c:	6d744100 43206c65 2e70726f              .Atmel Corp.

1001ad78 <CSWTCH.47>:
1001ad78:	03010300 03030303 03030303 00020303     ................
1001ad88:	74727173 00000066                       sqrtf...

1001ad90 <atanlo>:
1001ad90:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

1001ada0 <atanhi>:
1001ada0:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
1001adb0:	100119de 10011982 1001196e 100118b2     ........n.......
1001adc0:	1001178a 10011864 100119fc 736f6361     ....d.......acos
1001add0:	00000066                                f...

1001add4 <npio2_hw>:
1001add4:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
1001ade4:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
1001adf4:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
1001ae04:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
1001ae14:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
1001ae24:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
1001ae34:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
1001ae44:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

1001ae54 <two_over_pi>:
1001ae54:	000000a2 000000f9 00000083 0000006e     ............n...
1001ae64:	0000004e 00000044 00000015 00000029     N...D.......)...
1001ae74:	000000fc 00000027 00000057 000000d1     ....'...W.......
1001ae84:	000000f5 00000034 000000dd 000000c0     ....4...........
1001ae94:	000000db 00000062 00000095 00000099     ....b...........
1001aea4:	0000003c 00000043 00000090 00000041     <...C.......A...
1001aeb4:	000000fe 00000051 00000063 000000ab     ....Q...c.......
1001aec4:	000000de 000000bb 000000c5 00000061     ............a...
1001aed4:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
1001aee4:	00000042 0000004d 000000d2 000000e0     B...M...........
1001aef4:	00000006 00000049 0000002e 000000ea     ....I...........
1001af04:	00000009 000000d1 00000092 0000001c     ................
1001af14:	000000fe 0000001d 000000eb 0000001c     ................
1001af24:	000000b1 00000029 000000a7 0000003e     ....).......>...
1001af34:	000000e8 00000082 00000035 000000f5     ........5.......
1001af44:	0000002e 000000bb 00000044 00000084     ........D.......
1001af54:	000000e9 0000009c 00000070 00000026     ........p...&...
1001af64:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1001af74:	00000039 00000091 000000d6 00000039     9...........9...
1001af84:	00000083 00000053 00000039 000000f4     ....S...9.......
1001af94:	0000009c 00000084 0000005f 0000008b     ........_.......
1001afa4:	000000bd 000000f9 00000028 0000003b     ........(...;...
1001afb4:	0000001f 000000f8 00000097 000000ff     ................
1001afc4:	000000de 00000005 00000098 0000000f     ................
1001afd4:	000000ef 0000002f 00000011 0000008b     ..../...........
1001afe4:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1001aff4:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1001b004:	00000027 000000cb 00000009 000000b7     '...............
1001b014:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1001b024:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1001b034:	00000075 00000027 000000ba 000000c7     u...'...........
1001b044:	000000eb 000000e5 000000f1 0000007b     ............{...
1001b054:	0000003d 00000007 00000039 000000f7     =.......9.......
1001b064:	0000008a 00000052 00000092 000000ea     ....R...........
1001b074:	0000006b 000000fb 0000005f 000000b1     k......._.......
1001b084:	0000001f 0000008d 0000005d 00000008     ........].......
1001b094:	00000056 00000003 00000030 00000046     V.......0...F...
1001b0a4:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1001b0b4:	000000f0 000000cf 000000bc 00000020     ............ ...
1001b0c4:	0000009a 000000f4 00000036 0000001d     ........6.......
1001b0d4:	000000a9 000000e3 00000091 00000061     ............a...
1001b0e4:	0000005e 000000e6 0000001b 00000008     ^...............
1001b0f4:	00000065 00000099 00000085 0000005f     e..........._...
1001b104:	00000014 000000a0 00000068 00000040     ........h...@...
1001b114:	0000008d 000000ff 000000d8 00000080     ................
1001b124:	0000004d 00000073 00000027 00000031     M...s...'...1...
1001b134:	00000006 00000006 00000015 00000056     ............V...
1001b144:	000000ca 00000073 000000a8 000000c9     ....s...........
1001b154:	00000060 000000e2 0000007b 000000c0     `.......{.......
1001b164:	0000008c 0000006b                       ....k...

1001b16c <init_jk>:
1001b16c:	00000004 00000007 00000009              ............

1001b178 <PIo2>:
1001b178:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1001b188:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1001b198:	1fc40000 1bc60000 17440000 100157e2     ..........D..W..
1001b1a8:	10015706 100157c4 1001579c 100157c4     .W...W...W...W..
1001b1b8:	10015790 100157c4 1001579c 10015706     .W...W...W...W..
1001b1c8:	10015706 10015790 1001579c 10015848     .W...W...W..HX..
1001b1d8:	10015848 10015848 100157ca 10015706     HX..HX...W...W..
1001b1e8:	10015706 100157b0 1001579a 100157b0     .W...W...W...W..
1001b1f8:	10015790 100157b0 1001579a 10015706     .W...W...W...W..
1001b208:	10015706 10015790 1001579a 10015848     .W...W...W..HX..
1001b218:	10015848 10015848 10015854 10015b40     HX..HX..TX..@[..
1001b228:	10015a9e 10015a9e 10015a9c 10015b32     .Z...Z...Z..2[..
1001b238:	10015b32 10015b28 10015a9c 10015b32     2[..([...Z..2[..
1001b248:	10015b28 10015b32 10015a9c 10015b38     ([..2[...Z..8[..
1001b258:	10015b38 10015b38 10015bc2 10016920     8[..8[...[.. i..
1001b268:	100167ee 100168f4 100167e4 100168f4     .g...h...g...h..
1001b278:	100168fe 100168f4 100167e4 100167ee     .h...h...g...g..
1001b288:	100167ee 100168fe 100167e4 100167da     .g...h...g...g..
1001b298:	100167da 100167da 10016b50 10017168     .g...g..Pk..hq..
1001b2a8:	10017028 10017028 10017026 10017140     (p..(p..&p..@q..
1001b2b8:	10017140 10017132 10017026 10017140     @q..2q..&p..@q..
1001b2c8:	10017132 10017140 10017026 10017148     2q..@q..&p..Hq..
1001b2d8:	10017148 10017148 10017348 00000043     Hq..Hq..Hs..C...

1001b2e8 <_global_impure_ptr>:
1001b2e8:	1001b404                                ....

1001b2ec <__sf_fake_stdin>:
	...

1001b30c <__sf_fake_stdout>:
	...

1001b32c <__sf_fake_stderr>:
	...
1001b34c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001b35c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001b36c:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001b37c:	00006665                                ef..

1001b380 <_init>:
1001b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b382:	46c0      	nop			; (mov r8, r8)
1001b384:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b386:	bc08      	pop	{r3}
1001b388:	469e      	mov	lr, r3
1001b38a:	4770      	bx	lr

1001b38c <__init_array_start>:
1001b38c:	10008095 	.word	0x10008095

1001b390 <_fini>:
1001b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b392:	46c0      	nop			; (mov r8, r8)
1001b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b396:	bc08      	pop	{r3}
1001b398:	469e      	mov	lr, r3
1001b39a:	4770      	bx	lr

1001b39c <__fini_array_start>:
1001b39c:	1000806d 	.word	0x1000806d
