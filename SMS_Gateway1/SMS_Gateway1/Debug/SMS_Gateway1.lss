
SMS_Gateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004040c4  004040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  004040cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000b8  2000086c  00404938  0002086c  2**2
                  ALLOC
  4 .stack        00003004  20000924  004049f0  0002086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002089a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c047  00000000  00000000  000208f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000209d  00000000  00000000  0002c93a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003c0a  00000000  00000000  0002e9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000007a8  00000000  00000000  000325e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006c0  00000000  00000000  00032d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000176d5  00000000  00000000  00033449  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a619  00000000  00000000  0004ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006783a  00000000  00000000  00055137  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c5c  00000000  00000000  000bc974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003928 	.word	0x20003928
  400004:	0040086d 	.word	0x0040086d
  400008:	00400869 	.word	0x00400869
  40000c:	00400869 	.word	0x00400869
  400010:	00400869 	.word	0x00400869
  400014:	00400869 	.word	0x00400869
  400018:	00400869 	.word	0x00400869
	...
  40002c:	00400869 	.word	0x00400869
  400030:	00400869 	.word	0x00400869
  400034:	00000000 	.word	0x00000000
  400038:	00400869 	.word	0x00400869
  40003c:	00400869 	.word	0x00400869
  400040:	00400869 	.word	0x00400869
  400044:	00400869 	.word	0x00400869
  400048:	00400869 	.word	0x00400869
  40004c:	00400869 	.word	0x00400869
  400050:	00400869 	.word	0x00400869
  400054:	00400869 	.word	0x00400869
  400058:	00400869 	.word	0x00400869
  40005c:	00400869 	.word	0x00400869
  400060:	00400869 	.word	0x00400869
  400064:	00400869 	.word	0x00400869
  400068:	00400869 	.word	0x00400869
  40006c:	00400869 	.word	0x00400869
  400070:	00400869 	.word	0x00400869
  400074:	00400869 	.word	0x00400869
  400078:	00400869 	.word	0x00400869
  40007c:	00400869 	.word	0x00400869
  400080:	00400869 	.word	0x00400869
  400084:	00400869 	.word	0x00400869
  400088:	00400869 	.word	0x00400869
  40008c:	00400c51 	.word	0x00400c51
  400090:	00400869 	.word	0x00400869
  400094:	00400b2d 	.word	0x00400b2d
  400098:	00400869 	.word	0x00400869
  40009c:	00400869 	.word	0x00400869
  4000a0:	00400869 	.word	0x00400869
  4000a4:	00400869 	.word	0x00400869
  4000a8:	00400869 	.word	0x00400869
  4000ac:	00400869 	.word	0x00400869
  4000b0:	00400869 	.word	0x00400869
  4000b4:	00400869 	.word	0x00400869
  4000b8:	00400869 	.word	0x00400869
  4000bc:	00400869 	.word	0x00400869
  4000c0:	00400869 	.word	0x00400869
  4000c4:	00400869 	.word	0x00400869
  4000c8:	00400869 	.word	0x00400869
  4000cc:	00400869 	.word	0x00400869
  4000d0:	00400869 	.word	0x00400869
  4000d4:	00400869 	.word	0x00400869
  4000d8:	00400869 	.word	0x00400869
  4000dc:	00400869 	.word	0x00400869
  4000e0:	00400869 	.word	0x00400869
  4000e4:	00400869 	.word	0x00400869
  4000e8:	00400869 	.word	0x00400869
  4000ec:	00400869 	.word	0x00400869
  4000f0:	00400b1d 	.word	0x00400b1d
  4000f4:	00400869 	.word	0x00400869

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000086c 	.word	0x2000086c
  400114:	00000000 	.word	0x00000000
  400118:	004040cc 	.word	0x004040cc

0040011c <frame_dummy>:
  40011c:	4b08      	ldr	r3, [pc, #32]	; (400140 <frame_dummy+0x24>)
  40011e:	b510      	push	{r4, lr}
  400120:	b11b      	cbz	r3, 40012a <frame_dummy+0xe>
  400122:	4908      	ldr	r1, [pc, #32]	; (400144 <frame_dummy+0x28>)
  400124:	4808      	ldr	r0, [pc, #32]	; (400148 <frame_dummy+0x2c>)
  400126:	f3af 8000 	nop.w
  40012a:	4808      	ldr	r0, [pc, #32]	; (40014c <frame_dummy+0x30>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b903      	cbnz	r3, 400132 <frame_dummy+0x16>
  400130:	bd10      	pop	{r4, pc}
  400132:	4b07      	ldr	r3, [pc, #28]	; (400150 <frame_dummy+0x34>)
  400134:	2b00      	cmp	r3, #0
  400136:	d0fb      	beq.n	400130 <frame_dummy+0x14>
  400138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40013c:	4718      	bx	r3
  40013e:	bf00      	nop
  400140:	00000000 	.word	0x00000000
  400144:	20000870 	.word	0x20000870
  400148:	004040cc 	.word	0x004040cc
  40014c:	004040cc 	.word	0x004040cc
  400150:	00000000 	.word	0x00000000

00400154 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400156:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40015a:	4bae      	ldr	r3, [pc, #696]	; (400414 <board_init+0x2c0>)
  40015c:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40015e:	2009      	movs	r0, #9
  400160:	4dad      	ldr	r5, [pc, #692]	; (400418 <board_init+0x2c4>)
  400162:	47a8      	blx	r5
  400164:	200a      	movs	r0, #10
  400166:	47a8      	blx	r5
  400168:	200b      	movs	r0, #11
  40016a:	47a8      	blx	r5
  40016c:	200c      	movs	r0, #12
  40016e:	47a8      	blx	r5
  400170:	200d      	movs	r0, #13
  400172:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400174:	4ba9      	ldr	r3, [pc, #676]	; (40041c <board_init+0x2c8>)
  400176:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40017a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40017c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400180:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400182:	4aa7      	ldr	r2, [pc, #668]	; (400420 <board_init+0x2cc>)
  400184:	2104      	movs	r1, #4
  400186:	6151      	str	r1, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400188:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40018c:	6651      	str	r1, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40018e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400192:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400194:	6211      	str	r1, [r2, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400196:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40019a:	6f10      	ldr	r0, [r2, #112]	; 0x70
  40019c:	f020 0004 	bic.w	r0, r0, #4
  4001a0:	6710      	str	r0, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001a2:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4001a4:	f020 0004 	bic.w	r0, r0, #4
  4001a8:	6750      	str	r0, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4001aa:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4001ae:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4001b2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001b6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  4001ba:	6610      	str	r0, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001bc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001c0:	6550      	str	r0, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001c2:	6250      	str	r0, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001c4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001c8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4001ca:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001ce:	6715      	str	r5, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001d0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4001d2:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001d6:	6755      	str	r5, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001d8:	6050      	str	r0, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4001de:	6618      	str	r0, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001e0:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001e4:	6558      	str	r0, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001e6:	6258      	str	r0, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001e8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001ec:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4001ee:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
  4001f2:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001f4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4001f6:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
  4001fa:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001fc:	6058      	str	r0, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001fe:	2501      	movs	r5, #1
  400200:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400202:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400206:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400208:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40020a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40020e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400210:	f026 0601 	bic.w	r6, r6, #1
  400214:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400216:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400218:	f026 0601 	bic.w	r6, r6, #1
  40021c:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40021e:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400220:	2502      	movs	r5, #2
  400222:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400224:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400228:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40022a:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40022c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400230:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400232:	f026 0602 	bic.w	r6, r6, #2
  400236:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400238:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40023a:	f026 0602 	bic.w	r6, r6, #2
  40023e:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400240:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400242:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  400246:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400248:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40024c:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40024e:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400250:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400254:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400256:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
  40025a:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40025c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40025e:	f426 3680 	bic.w	r6, r6, #65536	; 0x10000
  400262:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400264:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400266:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400268:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40026c:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40026e:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400270:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400274:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400276:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
  40027a:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40027c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40027e:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
  400282:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400284:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400286:	2408      	movs	r4, #8
  400288:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40028a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40028e:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400290:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400292:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400296:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400298:	f025 0508 	bic.w	r5, r5, #8
  40029c:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40029e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4002a0:	f025 0508 	bic.w	r5, r5, #8
  4002a4:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002a6:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002a8:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002aa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002ae:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002b0:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002b2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002b6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4002b8:	f024 0404 	bic.w	r4, r4, #4
  4002bc:	671c      	str	r4, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002be:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4002c0:	f024 0404 	bic.w	r4, r4, #4
  4002c4:	675c      	str	r4, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002c6:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002c8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  4002cc:	661d      	str	r5, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002ce:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002d2:	655d      	str	r5, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d4:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002ea:	605d      	str	r5, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4002f0:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002f2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002f6:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002f8:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002fa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002fe:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  400300:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  400304:	671c      	str	r4, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400306:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  400308:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  40030c:	675c      	str	r4, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40030e:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400310:	2440      	movs	r4, #64	; 0x40
  400312:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400314:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400318:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40031a:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40031c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400320:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400322:	f026 0640 	bic.w	r6, r6, #64	; 0x40
  400326:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400328:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40032a:	f026 0640 	bic.w	r6, r6, #64	; 0x40
  40032e:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400330:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400332:	2420      	movs	r4, #32
  400334:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400336:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40033a:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40033c:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400342:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400344:	f026 0620 	bic.w	r6, r6, #32
  400348:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40034a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40034c:	f026 0620 	bic.w	r6, r6, #32
  400350:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400352:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400354:	2480      	movs	r4, #128	; 0x80
  400356:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400358:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40035c:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40035e:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400360:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400364:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400366:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40036a:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40036c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40036e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  400372:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400374:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400376:	2410      	movs	r4, #16
  400378:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40037a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40037e:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400380:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400382:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400386:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400388:	f026 0610 	bic.w	r6, r6, #16
  40038c:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40038e:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400390:	f026 0610 	bic.w	r6, r6, #16
  400394:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400396:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400398:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40039c:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40039e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a2:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003a4:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003a6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003aa:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4003ac:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  4003b0:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b2:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4003b4:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
  4003b8:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ba:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003bc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  4003c0:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003c2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003c6:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003c8:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ca:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ce:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  4003d0:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  4003d4:	671e      	str	r6, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003d6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4003d8:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  4003dc:	675e      	str	r6, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003de:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003e0:	f44f 7680 	mov.w	r6, #256	; 0x100
  4003e4:	661e      	str	r6, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e6:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003ea:	655e      	str	r6, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ec:	625e      	str	r6, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ee:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003f2:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  4003f4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  4003f8:	671f      	str	r7, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003fa:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  4003fc:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  400400:	675f      	str	r7, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400402:	605e      	str	r6, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400404:	f44f 7600 	mov.w	r6, #512	; 0x200
  400408:	661e      	str	r6, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40040a:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40040e:	655e      	str	r6, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400410:	625e      	str	r6, [r3, #36]	; 0x24
  400412:	e007      	b.n	400424 <board_init+0x2d0>
  400414:	400e1850 	.word	0x400e1850
  400418:	004006a5 	.word	0x004006a5
  40041c:	400e1400 	.word	0x400e1400
  400420:	400e0e00 	.word	0x400e0e00
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400424:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400428:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40042a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40042e:	671f      	str	r7, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400430:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  400432:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  400436:	675f      	str	r7, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400438:	605e      	str	r6, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40043a:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  40043e:	615e      	str	r6, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400440:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400444:	6615      	str	r5, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400446:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40044a:	6555      	str	r5, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40044c:	6255      	str	r5, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40044e:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400452:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400458:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40045a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40045c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400460:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400462:	6055      	str	r5, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400464:	6614      	str	r4, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400466:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40046a:	6554      	str	r4, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40046c:	6254      	str	r4, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40046e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400472:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  400478:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40047a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40047c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  400480:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400482:	6054      	str	r4, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400484:	6610      	str	r0, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400486:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40048a:	6550      	str	r0, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40048c:	6250      	str	r0, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40048e:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400492:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  400498:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40049a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40049c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  4004a0:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004a2:	6050      	str	r0, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4004a4:	6611      	str	r1, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004a6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4004aa:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4004ac:	6251      	str	r1, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4004ae:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4004b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4004b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004b8:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4004ba:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4004bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4004c0:	6753      	str	r3, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c2:	6051      	str	r1, [r2, #4]
  4004c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004c6:	bf00      	nop

004004c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004c8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004ca:	480e      	ldr	r0, [pc, #56]	; (400504 <sysclk_init+0x3c>)
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x40>)
  4004ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4004d0:	213e      	movs	r1, #62	; 0x3e
  4004d2:	2000      	movs	r0, #0
  4004d4:	4b0d      	ldr	r3, [pc, #52]	; (40050c <sysclk_init+0x44>)
  4004d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4004d8:	4c0d      	ldr	r4, [pc, #52]	; (400510 <sysclk_init+0x48>)
  4004da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4004dc:	2800      	cmp	r0, #0
  4004de:	d0fc      	beq.n	4004da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4004e0:	4b0c      	ldr	r3, [pc, #48]	; (400514 <sysclk_init+0x4c>)
  4004e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4004e4:	4a0c      	ldr	r2, [pc, #48]	; (400518 <sysclk_init+0x50>)
  4004e6:	4b0d      	ldr	r3, [pc, #52]	; (40051c <sysclk_init+0x54>)
  4004e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4004ea:	4c0d      	ldr	r4, [pc, #52]	; (400520 <sysclk_init+0x58>)
  4004ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4004ee:	2800      	cmp	r0, #0
  4004f0:	d0fc      	beq.n	4004ec <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004f2:	2010      	movs	r0, #16
  4004f4:	4b0b      	ldr	r3, [pc, #44]	; (400524 <sysclk_init+0x5c>)
  4004f6:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004f8:	4b0b      	ldr	r3, [pc, #44]	; (400528 <sysclk_init+0x60>)
  4004fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004fc:	4801      	ldr	r0, [pc, #4]	; (400504 <sysclk_init+0x3c>)
  4004fe:	4b02      	ldr	r3, [pc, #8]	; (400508 <sysclk_init+0x40>)
  400500:	4798      	blx	r3
  400502:	bd10      	pop	{r4, pc}
  400504:	07270e00 	.word	0x07270e00
  400508:	00400a59 	.word	0x00400a59
  40050c:	00400621 	.word	0x00400621
  400510:	00400675 	.word	0x00400675
  400514:	00400685 	.word	0x00400685
  400518:	20133f01 	.word	0x20133f01
  40051c:	400e0400 	.word	0x400e0400
  400520:	00400695 	.word	0x00400695
  400524:	004005b9 	.word	0x004005b9
  400528:	00400949 	.word	0x00400949

0040052c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40052c:	b990      	cbnz	r0, 400554 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40052e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400532:	460c      	mov	r4, r1
  400534:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400536:	2a00      	cmp	r2, #0
  400538:	dd0f      	ble.n	40055a <_read+0x2e>
  40053a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40053c:	4e08      	ldr	r6, [pc, #32]	; (400560 <_read+0x34>)
  40053e:	4d09      	ldr	r5, [pc, #36]	; (400564 <_read+0x38>)
  400540:	6830      	ldr	r0, [r6, #0]
  400542:	4621      	mov	r1, r4
  400544:	682b      	ldr	r3, [r5, #0]
  400546:	4798      	blx	r3
		ptr++;
  400548:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40054a:	42a7      	cmp	r7, r4
  40054c:	d1f8      	bne.n	400540 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40054e:	4640      	mov	r0, r8
  400550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400554:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400558:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40055a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40055c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400560:	2000091c 	.word	0x2000091c
  400564:	20000914 	.word	0x20000914

00400568 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400568:	3801      	subs	r0, #1
  40056a:	2802      	cmp	r0, #2
  40056c:	d815      	bhi.n	40059a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40056e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400572:	460e      	mov	r6, r1
  400574:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400576:	b19a      	cbz	r2, 4005a0 <_write+0x38>
  400578:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40057a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4005b4 <_write+0x4c>
  40057e:	4f0c      	ldr	r7, [pc, #48]	; (4005b0 <_write+0x48>)
  400580:	f8d8 0000 	ldr.w	r0, [r8]
  400584:	f815 1b01 	ldrb.w	r1, [r5], #1
  400588:	683b      	ldr	r3, [r7, #0]
  40058a:	4798      	blx	r3
  40058c:	2800      	cmp	r0, #0
  40058e:	db0a      	blt.n	4005a6 <_write+0x3e>
  400590:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400592:	3c01      	subs	r4, #1
  400594:	d1f4      	bne.n	400580 <_write+0x18>
  400596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40059a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40059e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005a0:	2000      	movs	r0, #0
  4005a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4005a6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ae:	bf00      	nop
  4005b0:	20000918 	.word	0x20000918
  4005b4:	2000091c 	.word	0x2000091c

004005b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005b8:	4a18      	ldr	r2, [pc, #96]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005c0:	4318      	orrs	r0, r3
  4005c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005c6:	f013 0f08 	tst.w	r3, #8
  4005ca:	d003      	beq.n	4005d4 <pmc_switch_mck_to_pllack+0x1c>
  4005cc:	e009      	b.n	4005e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ce:	3b01      	subs	r3, #1
  4005d0:	d103      	bne.n	4005da <pmc_switch_mck_to_pllack+0x22>
  4005d2:	e01e      	b.n	400612 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005d8:	4910      	ldr	r1, [pc, #64]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005dc:	f012 0f08 	tst.w	r2, #8
  4005e0:	d0f5      	beq.n	4005ce <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005e2:	4a0e      	ldr	r2, [pc, #56]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  4005e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005e6:	f023 0303 	bic.w	r3, r3, #3
  4005ea:	f043 0302 	orr.w	r3, r3, #2
  4005ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005f0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4005f2:	f010 0008 	ands.w	r0, r0, #8
  4005f6:	d004      	beq.n	400602 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4005f8:	2000      	movs	r0, #0
  4005fa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005fc:	3b01      	subs	r3, #1
  4005fe:	d103      	bne.n	400608 <pmc_switch_mck_to_pllack+0x50>
  400600:	e009      	b.n	400616 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400602:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400606:	4905      	ldr	r1, [pc, #20]	; (40061c <pmc_switch_mck_to_pllack+0x64>)
  400608:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40060a:	f012 0f08 	tst.w	r2, #8
  40060e:	d0f5      	beq.n	4005fc <pmc_switch_mck_to_pllack+0x44>
  400610:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400612:	2001      	movs	r0, #1
  400614:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400616:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	400e0400 	.word	0x400e0400

00400620 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400620:	b138      	cbz	r0, 400632 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400622:	4911      	ldr	r1, [pc, #68]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  400624:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400626:	4a11      	ldr	r2, [pc, #68]	; (40066c <pmc_switch_mainck_to_xtal+0x4c>)
  400628:	401a      	ands	r2, r3
  40062a:	4b11      	ldr	r3, [pc, #68]	; (400670 <pmc_switch_mainck_to_xtal+0x50>)
  40062c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40062e:	620b      	str	r3, [r1, #32]
  400630:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400632:	480d      	ldr	r0, [pc, #52]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  400634:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400636:	0209      	lsls	r1, r1, #8
  400638:	b289      	uxth	r1, r1
  40063a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40063e:	f023 0303 	bic.w	r3, r3, #3
  400642:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400646:	f043 0301 	orr.w	r3, r3, #1
  40064a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40064c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40064e:	4602      	mov	r2, r0
  400650:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400652:	f013 0f01 	tst.w	r3, #1
  400656:	d0fb      	beq.n	400650 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400658:	4a03      	ldr	r2, [pc, #12]	; (400668 <pmc_switch_mainck_to_xtal+0x48>)
  40065a:	6a13      	ldr	r3, [r2, #32]
  40065c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400664:	6213      	str	r3, [r2, #32]
  400666:	4770      	bx	lr
  400668:	400e0400 	.word	0x400e0400
  40066c:	fec8fffc 	.word	0xfec8fffc
  400670:	01370002 	.word	0x01370002

00400674 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400674:	4b02      	ldr	r3, [pc, #8]	; (400680 <pmc_osc_is_ready_mainck+0xc>)
  400676:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400678:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop
  400680:	400e0400 	.word	0x400e0400

00400684 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400684:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400688:	4b01      	ldr	r3, [pc, #4]	; (400690 <pmc_disable_pllack+0xc>)
  40068a:	629a      	str	r2, [r3, #40]	; 0x28
  40068c:	4770      	bx	lr
  40068e:	bf00      	nop
  400690:	400e0400 	.word	0x400e0400

00400694 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400694:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <pmc_is_locked_pllack+0xc>)
  400696:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400698:	f000 0002 	and.w	r0, r0, #2
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	400e0400 	.word	0x400e0400

004006a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4006a4:	282f      	cmp	r0, #47	; 0x2f
  4006a6:	d81e      	bhi.n	4006e6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4006a8:	281f      	cmp	r0, #31
  4006aa:	d80c      	bhi.n	4006c6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4006ac:	4b11      	ldr	r3, [pc, #68]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006ae:	699a      	ldr	r2, [r3, #24]
  4006b0:	2301      	movs	r3, #1
  4006b2:	4083      	lsls	r3, r0
  4006b4:	4393      	bics	r3, r2
  4006b6:	d018      	beq.n	4006ea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4006b8:	2301      	movs	r3, #1
  4006ba:	fa03 f000 	lsl.w	r0, r3, r0
  4006be:	4b0d      	ldr	r3, [pc, #52]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006c0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006c2:	2000      	movs	r0, #0
  4006c4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4006c6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4006c8:	4b0a      	ldr	r3, [pc, #40]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006ce:	2301      	movs	r3, #1
  4006d0:	4083      	lsls	r3, r0
  4006d2:	4393      	bics	r3, r2
  4006d4:	d00b      	beq.n	4006ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006d6:	2301      	movs	r3, #1
  4006d8:	fa03 f000 	lsl.w	r0, r3, r0
  4006dc:	4b05      	ldr	r3, [pc, #20]	; (4006f4 <pmc_enable_periph_clk+0x50>)
  4006de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4006e2:	2000      	movs	r0, #0
  4006e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4006e6:	2001      	movs	r0, #1
  4006e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006ea:	2000      	movs	r0, #0
  4006ec:	4770      	bx	lr
  4006ee:	2000      	movs	r0, #0
}
  4006f0:	4770      	bx	lr
  4006f2:	bf00      	nop
  4006f4:	400e0400 	.word	0x400e0400

004006f8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4006f8:	b508      	push	{r3, lr}
  4006fa:	2013      	movs	r0, #19
  4006fc:	4b01      	ldr	r3, [pc, #4]	; (400704 <spi_enable_clock+0xc>)
  4006fe:	4798      	blx	r3
  400700:	bd08      	pop	{r3, pc}
  400702:	bf00      	nop
  400704:	004006a5 	.word	0x004006a5

00400708 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400708:	6843      	ldr	r3, [r0, #4]
  40070a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40070e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400710:	6843      	ldr	r3, [r0, #4]
  400712:	0409      	lsls	r1, r1, #16
  400714:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400718:	430b      	orrs	r3, r1
  40071a:	6043      	str	r3, [r0, #4]
  40071c:	4770      	bx	lr
  40071e:	bf00      	nop

00400720 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  400720:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  400722:	f643 2399 	movw	r3, #15001	; 0x3a99
  400726:	e001      	b.n	40072c <spi_read+0xc>
		if (!timeout--) {
  400728:	3b01      	subs	r3, #1
  40072a:	d00e      	beq.n	40074a <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40072c:	6904      	ldr	r4, [r0, #16]
  40072e:	f014 0f01 	tst.w	r4, #1
  400732:	d0f9      	beq.n	400728 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  400734:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400736:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  400738:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40073c:	bf1c      	itt	ne
  40073e:	f3c3 4003 	ubfxne	r0, r3, #16, #4
  400742:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400744:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  400746:	2000      	movs	r0, #0
  400748:	e000      	b.n	40074c <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  40074a:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  40074c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400750:	4770      	bx	lr
  400752:	bf00      	nop

00400754 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400754:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400756:	f643 2499 	movw	r4, #15001	; 0x3a99
  40075a:	e001      	b.n	400760 <spi_write+0xc>
		if (!timeout--) {
  40075c:	3c01      	subs	r4, #1
  40075e:	d011      	beq.n	400784 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400760:	6905      	ldr	r5, [r0, #16]
  400762:	f015 0f02 	tst.w	r5, #2
  400766:	d0f9      	beq.n	40075c <spi_write+0x8>
  400768:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40076a:	f014 0f02 	tst.w	r4, #2
  40076e:	d006      	beq.n	40077e <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400770:	0412      	lsls	r2, r2, #16
  400772:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400776:	4311      	orrs	r1, r2
		if (uc_last) {
  400778:	b10b      	cbz	r3, 40077e <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  40077a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40077e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400780:	2000      	movs	r0, #0
  400782:	e000      	b.n	400786 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400784:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  400786:	bc30      	pop	{r4, r5}
  400788:	4770      	bx	lr
  40078a:	bf00      	nop

0040078c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40078c:	b132      	cbz	r2, 40079c <spi_set_clock_polarity+0x10>
  40078e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400792:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400794:	f043 0301 	orr.w	r3, r3, #1
  400798:	6303      	str	r3, [r0, #48]	; 0x30
  40079a:	4770      	bx	lr
  40079c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4007a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007a2:	f023 0301 	bic.w	r3, r3, #1
  4007a6:	6303      	str	r3, [r0, #48]	; 0x30
  4007a8:	4770      	bx	lr
  4007aa:	bf00      	nop

004007ac <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4007ac:	b132      	cbz	r2, 4007bc <spi_set_clock_phase+0x10>
  4007ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4007b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007b4:	f043 0302 	orr.w	r3, r3, #2
  4007b8:	6303      	str	r3, [r0, #48]	; 0x30
  4007ba:	4770      	bx	lr
  4007bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4007c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007c2:	f023 0302 	bic.w	r3, r3, #2
  4007c6:	6303      	str	r3, [r0, #48]	; 0x30
  4007c8:	4770      	bx	lr
  4007ca:	bf00      	nop

004007cc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4007cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4007d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4007d6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4007d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4007da:	431a      	orrs	r2, r3
  4007dc:	630a      	str	r2, [r1, #48]	; 0x30
  4007de:	4770      	bx	lr

004007e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4007e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4007e2:	23ac      	movs	r3, #172	; 0xac
  4007e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4007e6:	680b      	ldr	r3, [r1, #0]
  4007e8:	684a      	ldr	r2, [r1, #4]
  4007ea:	fbb3 f3f2 	udiv	r3, r3, r2
  4007ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4007f0:	1e5c      	subs	r4, r3, #1
  4007f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4007f6:	4294      	cmp	r4, r2
  4007f8:	d80a      	bhi.n	400810 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4007fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4007fc:	688b      	ldr	r3, [r1, #8]
  4007fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400800:	f240 2302 	movw	r3, #514	; 0x202
  400804:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400808:	2350      	movs	r3, #80	; 0x50
  40080a:	6003      	str	r3, [r0, #0]

	return 0;
  40080c:	2000      	movs	r0, #0
  40080e:	e000      	b.n	400812 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400810:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400812:	f85d 4b04 	ldr.w	r4, [sp], #4
  400816:	4770      	bx	lr

00400818 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400818:	6943      	ldr	r3, [r0, #20]
  40081a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40081e:	bf1a      	itte	ne
  400820:	61c1      	strne	r1, [r0, #28]
	return 0;
  400822:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400824:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400826:	4770      	bx	lr

00400828 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400828:	6943      	ldr	r3, [r0, #20]
  40082a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40082e:	bf1d      	ittte	ne
  400830:	6983      	ldrne	r3, [r0, #24]
  400832:	700b      	strbne	r3, [r1, #0]
	return 0;
  400834:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400836:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400838:	4770      	bx	lr
  40083a:	bf00      	nop

0040083c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40083c:	6943      	ldr	r3, [r0, #20]
  40083e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400842:	bf1d      	ittte	ne
  400844:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400848:	61c1      	strne	r1, [r0, #28]
	return 0;
  40084a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40084c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40084e:	4770      	bx	lr

00400850 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400850:	6943      	ldr	r3, [r0, #20]
  400852:	f013 0f01 	tst.w	r3, #1
  400856:	d005      	beq.n	400864 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400858:	6983      	ldr	r3, [r0, #24]
  40085a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40085e:	600b      	str	r3, [r1, #0]

	return 0;
  400860:	2000      	movs	r0, #0
  400862:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400864:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400866:	4770      	bx	lr

00400868 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400868:	e7fe      	b.n	400868 <Dummy_Handler>
  40086a:	bf00      	nop

0040086c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40086c:	b500      	push	{lr}
  40086e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400870:	4b27      	ldr	r3, [pc, #156]	; (400910 <Reset_Handler+0xa4>)
  400872:	4a28      	ldr	r2, [pc, #160]	; (400914 <Reset_Handler+0xa8>)
  400874:	429a      	cmp	r2, r3
  400876:	d003      	beq.n	400880 <Reset_Handler+0x14>
		for (; pDest < &_erelocate;) {
  400878:	4b27      	ldr	r3, [pc, #156]	; (400918 <Reset_Handler+0xac>)
  40087a:	4a25      	ldr	r2, [pc, #148]	; (400910 <Reset_Handler+0xa4>)
  40087c:	429a      	cmp	r2, r3
  40087e:	d304      	bcc.n	40088a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400880:	4b26      	ldr	r3, [pc, #152]	; (40091c <Reset_Handler+0xb0>)
  400882:	4a27      	ldr	r2, [pc, #156]	; (400920 <Reset_Handler+0xb4>)
  400884:	429a      	cmp	r2, r3
  400886:	d30f      	bcc.n	4008a8 <Reset_Handler+0x3c>
  400888:	e01a      	b.n	4008c0 <Reset_Handler+0x54>
  40088a:	4921      	ldr	r1, [pc, #132]	; (400910 <Reset_Handler+0xa4>)
  40088c:	4b25      	ldr	r3, [pc, #148]	; (400924 <Reset_Handler+0xb8>)
  40088e:	1a5b      	subs	r3, r3, r1
  400890:	f023 0303 	bic.w	r3, r3, #3
  400894:	3304      	adds	r3, #4
  400896:	4a1f      	ldr	r2, [pc, #124]	; (400914 <Reset_Handler+0xa8>)
  400898:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  40089a:	f852 0b04 	ldr.w	r0, [r2], #4
  40089e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4008a2:	429a      	cmp	r2, r3
  4008a4:	d1f9      	bne.n	40089a <Reset_Handler+0x2e>
  4008a6:	e7eb      	b.n	400880 <Reset_Handler+0x14>
  4008a8:	4b1f      	ldr	r3, [pc, #124]	; (400928 <Reset_Handler+0xbc>)
  4008aa:	4a20      	ldr	r2, [pc, #128]	; (40092c <Reset_Handler+0xc0>)
  4008ac:	1ad2      	subs	r2, r2, r3
  4008ae:	f022 0203 	bic.w	r2, r2, #3
  4008b2:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008b4:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4008b6:	2100      	movs	r1, #0
  4008b8:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008bc:	4293      	cmp	r3, r2
  4008be:	d1fb      	bne.n	4008b8 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4008c0:	4a1b      	ldr	r2, [pc, #108]	; (400930 <Reset_Handler+0xc4>)
  4008c2:	4b1c      	ldr	r3, [pc, #112]	; (400934 <Reset_Handler+0xc8>)
  4008c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4008c8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008ca:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008ce:	fab3 f383 	clz	r3, r3
  4008d2:	095b      	lsrs	r3, r3, #5
  4008d4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4008d6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008dc:	2200      	movs	r2, #0
  4008de:	4b16      	ldr	r3, [pc, #88]	; (400938 <Reset_Handler+0xcc>)
  4008e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008e2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008e4:	4a15      	ldr	r2, [pc, #84]	; (40093c <Reset_Handler+0xd0>)
  4008e6:	6813      	ldr	r3, [r2, #0]
  4008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ec:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008ee:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008f6:	b129      	cbz	r1, 400904 <Reset_Handler+0x98>
		cpu_irq_enable();
  4008f8:	2201      	movs	r2, #1
  4008fa:	4b0f      	ldr	r3, [pc, #60]	; (400938 <Reset_Handler+0xcc>)
  4008fc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400902:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400904:	4b0e      	ldr	r3, [pc, #56]	; (400940 <Reset_Handler+0xd4>)
  400906:	4798      	blx	r3

	/* Branch to main function */
	main();
  400908:	4b0e      	ldr	r3, [pc, #56]	; (400944 <Reset_Handler+0xd8>)
  40090a:	4798      	blx	r3
  40090c:	e7fe      	b.n	40090c <Reset_Handler+0xa0>
  40090e:	bf00      	nop
  400910:	20000000 	.word	0x20000000
  400914:	004040cc 	.word	0x004040cc
  400918:	2000086c 	.word	0x2000086c
  40091c:	20000924 	.word	0x20000924
  400920:	2000086c 	.word	0x2000086c
  400924:	2000086b 	.word	0x2000086b
  400928:	20000870 	.word	0x20000870
  40092c:	20000927 	.word	0x20000927
  400930:	e000ed00 	.word	0xe000ed00
  400934:	00400000 	.word	0x00400000
  400938:	20000000 	.word	0x20000000
  40093c:	e000ed88 	.word	0xe000ed88
  400940:	00400e6d 	.word	0x00400e6d
  400944:	00400d0d 	.word	0x00400d0d

00400948 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400948:	4b3c      	ldr	r3, [pc, #240]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  40094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40094c:	f003 0303 	and.w	r3, r3, #3
  400950:	2b01      	cmp	r3, #1
  400952:	d00f      	beq.n	400974 <SystemCoreClockUpdate+0x2c>
  400954:	b113      	cbz	r3, 40095c <SystemCoreClockUpdate+0x14>
  400956:	2b02      	cmp	r3, #2
  400958:	d029      	beq.n	4009ae <SystemCoreClockUpdate+0x66>
  40095a:	e057      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40095c:	4b38      	ldr	r3, [pc, #224]	; (400a40 <SystemCoreClockUpdate+0xf8>)
  40095e:	695b      	ldr	r3, [r3, #20]
  400960:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400964:	bf14      	ite	ne
  400966:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40096a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40096e:	4b35      	ldr	r3, [pc, #212]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400970:	601a      	str	r2, [r3, #0]
  400972:	e04b      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400974:	4b31      	ldr	r3, [pc, #196]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400976:	6a1b      	ldr	r3, [r3, #32]
  400978:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40097c:	d003      	beq.n	400986 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40097e:	4a32      	ldr	r2, [pc, #200]	; (400a48 <SystemCoreClockUpdate+0x100>)
  400980:	4b30      	ldr	r3, [pc, #192]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400982:	601a      	str	r2, [r3, #0]
  400984:	e042      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400986:	4a31      	ldr	r2, [pc, #196]	; (400a4c <SystemCoreClockUpdate+0x104>)
  400988:	4b2e      	ldr	r3, [pc, #184]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  40098a:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40098c:	4b2b      	ldr	r3, [pc, #172]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  40098e:	6a1b      	ldr	r3, [r3, #32]
  400990:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400994:	2b10      	cmp	r3, #16
  400996:	d002      	beq.n	40099e <SystemCoreClockUpdate+0x56>
  400998:	2b20      	cmp	r3, #32
  40099a:	d004      	beq.n	4009a6 <SystemCoreClockUpdate+0x5e>
  40099c:	e036      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40099e:	4a2c      	ldr	r2, [pc, #176]	; (400a50 <SystemCoreClockUpdate+0x108>)
  4009a0:	4b28      	ldr	r3, [pc, #160]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009a2:	601a      	str	r2, [r3, #0]
				break;
  4009a4:	e032      	b.n	400a0c <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4009a6:	4a28      	ldr	r2, [pc, #160]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009a8:	4b26      	ldr	r3, [pc, #152]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009aa:	601a      	str	r2, [r3, #0]
				break;
  4009ac:	e02e      	b.n	400a0c <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009ae:	4b23      	ldr	r3, [pc, #140]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009b0:	6a1b      	ldr	r3, [r3, #32]
  4009b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009b6:	d003      	beq.n	4009c0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4009b8:	4a23      	ldr	r2, [pc, #140]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009ba:	4b22      	ldr	r3, [pc, #136]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009bc:	601a      	str	r2, [r3, #0]
  4009be:	e012      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009c0:	4a22      	ldr	r2, [pc, #136]	; (400a4c <SystemCoreClockUpdate+0x104>)
  4009c2:	4b20      	ldr	r3, [pc, #128]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009c4:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009c6:	4b1d      	ldr	r3, [pc, #116]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009c8:	6a1b      	ldr	r3, [r3, #32]
  4009ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009ce:	2b10      	cmp	r3, #16
  4009d0:	d002      	beq.n	4009d8 <SystemCoreClockUpdate+0x90>
  4009d2:	2b20      	cmp	r3, #32
  4009d4:	d004      	beq.n	4009e0 <SystemCoreClockUpdate+0x98>
  4009d6:	e006      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4009d8:	4a1d      	ldr	r2, [pc, #116]	; (400a50 <SystemCoreClockUpdate+0x108>)
  4009da:	4b1a      	ldr	r3, [pc, #104]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009dc:	601a      	str	r2, [r3, #0]
				break;
  4009de:	e002      	b.n	4009e6 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4009e0:	4a19      	ldr	r2, [pc, #100]	; (400a48 <SystemCoreClockUpdate+0x100>)
  4009e2:	4b18      	ldr	r3, [pc, #96]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009e4:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4009e6:	4b15      	ldr	r3, [pc, #84]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ea:	f003 0303 	and.w	r3, r3, #3
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d10c      	bne.n	400a0c <SystemCoreClockUpdate+0xc4>
		{
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009f2:	4a12      	ldr	r2, [pc, #72]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  4009f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009f8:	4812      	ldr	r0, [pc, #72]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  4009fa:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4009fe:	6803      	ldr	r3, [r0, #0]
  400a00:	fb01 3303 	mla	r3, r1, r3, r3
  400a04:	b2d2      	uxtb	r2, r2
  400a06:	fbb3 f3f2 	udiv	r3, r3, r2
  400a0a:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a0c:	4b0b      	ldr	r3, [pc, #44]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a14:	2b70      	cmp	r3, #112	; 0x70
  400a16:	d107      	bne.n	400a28 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400a18:	4a0a      	ldr	r2, [pc, #40]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400a1a:	6813      	ldr	r3, [r2, #0]
  400a1c:	490d      	ldr	r1, [pc, #52]	; (400a54 <SystemCoreClockUpdate+0x10c>)
  400a1e:	fba1 1303 	umull	r1, r3, r1, r3
  400a22:	085b      	lsrs	r3, r3, #1
  400a24:	6013      	str	r3, [r2, #0]
  400a26:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400a28:	4b04      	ldr	r3, [pc, #16]	; (400a3c <SystemCoreClockUpdate+0xf4>)
  400a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a2c:	4905      	ldr	r1, [pc, #20]	; (400a44 <SystemCoreClockUpdate+0xfc>)
  400a2e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a32:	680b      	ldr	r3, [r1, #0]
  400a34:	40d3      	lsrs	r3, r2
  400a36:	600b      	str	r3, [r1, #0]
  400a38:	4770      	bx	lr
  400a3a:	bf00      	nop
  400a3c:	400e0400 	.word	0x400e0400
  400a40:	400e1810 	.word	0x400e1810
  400a44:	20000004 	.word	0x20000004
  400a48:	00b71b00 	.word	0x00b71b00
  400a4c:	003d0900 	.word	0x003d0900
  400a50:	007a1200 	.word	0x007a1200
  400a54:	aaaaaaab 	.word	0xaaaaaaab

00400a58 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a58:	4b12      	ldr	r3, [pc, #72]	; (400aa4 <system_init_flash+0x4c>)
  400a5a:	4298      	cmp	r0, r3
  400a5c:	d804      	bhi.n	400a68 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a62:	4b11      	ldr	r3, [pc, #68]	; (400aa8 <system_init_flash+0x50>)
  400a64:	601a      	str	r2, [r3, #0]
  400a66:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400a68:	4b10      	ldr	r3, [pc, #64]	; (400aac <system_init_flash+0x54>)
  400a6a:	4298      	cmp	r0, r3
  400a6c:	d803      	bhi.n	400a76 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a6e:	4a10      	ldr	r2, [pc, #64]	; (400ab0 <system_init_flash+0x58>)
  400a70:	4b0d      	ldr	r3, [pc, #52]	; (400aa8 <system_init_flash+0x50>)
  400a72:	601a      	str	r2, [r3, #0]
  400a74:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400a76:	4b0f      	ldr	r3, [pc, #60]	; (400ab4 <system_init_flash+0x5c>)
  400a78:	4298      	cmp	r0, r3
  400a7a:	d803      	bhi.n	400a84 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a7c:	4a0e      	ldr	r2, [pc, #56]	; (400ab8 <system_init_flash+0x60>)
  400a7e:	4b0a      	ldr	r3, [pc, #40]	; (400aa8 <system_init_flash+0x50>)
  400a80:	601a      	str	r2, [r3, #0]
  400a82:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a84:	4b0d      	ldr	r3, [pc, #52]	; (400abc <system_init_flash+0x64>)
  400a86:	4298      	cmp	r0, r3
  400a88:	d803      	bhi.n	400a92 <system_init_flash+0x3a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a8a:	4a0d      	ldr	r2, [pc, #52]	; (400ac0 <system_init_flash+0x68>)
  400a8c:	4b06      	ldr	r3, [pc, #24]	; (400aa8 <system_init_flash+0x50>)
  400a8e:	601a      	str	r2, [r3, #0]
  400a90:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a92:	4b0c      	ldr	r3, [pc, #48]	; (400ac4 <system_init_flash+0x6c>)
  400a94:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a96:	bf94      	ite	ls
  400a98:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a9c:	4a0a      	ldrhi	r2, [pc, #40]	; (400ac8 <system_init_flash+0x70>)
  400a9e:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <system_init_flash+0x50>)
  400aa0:	601a      	str	r2, [r3, #0]
  400aa2:	4770      	bx	lr
  400aa4:	01312cff 	.word	0x01312cff
  400aa8:	400e0a00 	.word	0x400e0a00
  400aac:	026259ff 	.word	0x026259ff
  400ab0:	04000100 	.word	0x04000100
  400ab4:	039386ff 	.word	0x039386ff
  400ab8:	04000200 	.word	0x04000200
  400abc:	04c4b3ff 	.word	0x04c4b3ff
  400ac0:	04000300 	.word	0x04000300
  400ac4:	05f5e0ff 	.word	0x05f5e0ff
  400ac8:	04000500 	.word	0x04000500

00400acc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400acc:	4b09      	ldr	r3, [pc, #36]	; (400af4 <_sbrk+0x28>)
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	b913      	cbnz	r3, 400ad8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ad2:	4a09      	ldr	r2, [pc, #36]	; (400af8 <_sbrk+0x2c>)
  400ad4:	4b07      	ldr	r3, [pc, #28]	; (400af4 <_sbrk+0x28>)
  400ad6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ad8:	4b06      	ldr	r3, [pc, #24]	; (400af4 <_sbrk+0x28>)
  400ada:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400adc:	181a      	adds	r2, r3, r0
  400ade:	4907      	ldr	r1, [pc, #28]	; (400afc <_sbrk+0x30>)
  400ae0:	4291      	cmp	r1, r2
  400ae2:	db04      	blt.n	400aee <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400ae4:	4610      	mov	r0, r2
  400ae6:	4a03      	ldr	r2, [pc, #12]	; (400af4 <_sbrk+0x28>)
  400ae8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400aea:	4618      	mov	r0, r3
  400aec:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400aee:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400af2:	4770      	bx	lr
  400af4:	20000888 	.word	0x20000888
  400af8:	20003928 	.word	0x20003928
  400afc:	2001fffc 	.word	0x2001fffc

00400b00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b00:	f04f 30ff 	mov.w	r0, #4294967295
  400b04:	4770      	bx	lr
  400b06:	bf00      	nop

00400b08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b0c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b0e:	2000      	movs	r0, #0
  400b10:	4770      	bx	lr
  400b12:	bf00      	nop

00400b14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b14:	2001      	movs	r0, #1
  400b16:	4770      	bx	lr

00400b18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b18:	2000      	movs	r0, #0
  400b1a:	4770      	bx	lr

00400b1c <GMAC_Handler>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400b20:	4b01      	ldr	r3, [pc, #4]	; (400b28 <GMAC_Handler+0xc>)
  400b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400b26:	4770      	bx	lr
  400b28:	e000e100 	.word	0xe000e100

00400b2c <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  400b2c:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  400b2e:	4b04      	ldr	r3, [pc, #16]	; (400b40 <TC0_Handler+0x14>)
  400b30:	6a1b      	ldr	r3, [r3, #32]
  400b32:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  400b34:	4a03      	ldr	r2, [pc, #12]	; (400b44 <TC0_Handler+0x18>)
  400b36:	6813      	ldr	r3, [r2, #0]
  400b38:	3301      	adds	r3, #1
  400b3a:	6013      	str	r3, [r2, #0]
}
  400b3c:	b002      	add	sp, #8
  400b3e:	4770      	bx	lr
  400b40:	40090000 	.word	0x40090000
  400b44:	2000088c 	.word	0x2000088c

00400b48 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b48:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b4a:	b083      	sub	sp, #12
  400b4c:	4605      	mov	r5, r0
  400b4e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b50:	2300      	movs	r3, #0
  400b52:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b54:	4b18      	ldr	r3, [pc, #96]	; (400bb8 <usart_serial_getchar+0x70>)
  400b56:	4298      	cmp	r0, r3
  400b58:	d107      	bne.n	400b6a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400b5a:	461f      	mov	r7, r3
  400b5c:	4e17      	ldr	r6, [pc, #92]	; (400bbc <usart_serial_getchar+0x74>)
  400b5e:	4621      	mov	r1, r4
  400b60:	4638      	mov	r0, r7
  400b62:	47b0      	blx	r6
  400b64:	2800      	cmp	r0, #0
  400b66:	d1fa      	bne.n	400b5e <usart_serial_getchar+0x16>
  400b68:	e017      	b.n	400b9a <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b6a:	4b15      	ldr	r3, [pc, #84]	; (400bc0 <usart_serial_getchar+0x78>)
  400b6c:	4298      	cmp	r0, r3
  400b6e:	d107      	bne.n	400b80 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400b70:	461e      	mov	r6, r3
  400b72:	4d12      	ldr	r5, [pc, #72]	; (400bbc <usart_serial_getchar+0x74>)
  400b74:	4621      	mov	r1, r4
  400b76:	4630      	mov	r0, r6
  400b78:	47a8      	blx	r5
  400b7a:	2800      	cmp	r0, #0
  400b7c:	d1fa      	bne.n	400b74 <usart_serial_getchar+0x2c>
  400b7e:	e018      	b.n	400bb2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400b80:	4b10      	ldr	r3, [pc, #64]	; (400bc4 <usart_serial_getchar+0x7c>)
  400b82:	4298      	cmp	r0, r3
  400b84:	d109      	bne.n	400b9a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400b86:	461e      	mov	r6, r3
  400b88:	4d0f      	ldr	r5, [pc, #60]	; (400bc8 <usart_serial_getchar+0x80>)
  400b8a:	a901      	add	r1, sp, #4
  400b8c:	4630      	mov	r0, r6
  400b8e:	47a8      	blx	r5
  400b90:	2800      	cmp	r0, #0
  400b92:	d1fa      	bne.n	400b8a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400b94:	9b01      	ldr	r3, [sp, #4]
  400b96:	7023      	strb	r3, [r4, #0]
  400b98:	e00b      	b.n	400bb2 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400b9a:	4b0c      	ldr	r3, [pc, #48]	; (400bcc <usart_serial_getchar+0x84>)
  400b9c:	429d      	cmp	r5, r3
  400b9e:	d108      	bne.n	400bb2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400ba0:	461e      	mov	r6, r3
  400ba2:	4d09      	ldr	r5, [pc, #36]	; (400bc8 <usart_serial_getchar+0x80>)
  400ba4:	a901      	add	r1, sp, #4
  400ba6:	4630      	mov	r0, r6
  400ba8:	47a8      	blx	r5
  400baa:	2800      	cmp	r0, #0
  400bac:	d1fa      	bne.n	400ba4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400bae:	9b01      	ldr	r3, [sp, #4]
  400bb0:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400bb2:	b003      	add	sp, #12
  400bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bb6:	bf00      	nop
  400bb8:	400e0600 	.word	0x400e0600
  400bbc:	00400829 	.word	0x00400829
  400bc0:	40060600 	.word	0x40060600
  400bc4:	400a0000 	.word	0x400a0000
  400bc8:	00400851 	.word	0x00400851
  400bcc:	400a4000 	.word	0x400a4000

00400bd0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400bd0:	b570      	push	{r4, r5, r6, lr}
  400bd2:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400bd4:	4b18      	ldr	r3, [pc, #96]	; (400c38 <usart_serial_putchar+0x68>)
  400bd6:	4298      	cmp	r0, r3
  400bd8:	d108      	bne.n	400bec <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bda:	461e      	mov	r6, r3
  400bdc:	4d17      	ldr	r5, [pc, #92]	; (400c3c <usart_serial_putchar+0x6c>)
  400bde:	4621      	mov	r1, r4
  400be0:	4630      	mov	r0, r6
  400be2:	47a8      	blx	r5
  400be4:	2800      	cmp	r0, #0
  400be6:	d1fa      	bne.n	400bde <usart_serial_putchar+0xe>
		return 1;
  400be8:	2001      	movs	r0, #1
  400bea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bec:	4b14      	ldr	r3, [pc, #80]	; (400c40 <usart_serial_putchar+0x70>)
  400bee:	4298      	cmp	r0, r3
  400bf0:	d108      	bne.n	400c04 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bf2:	461e      	mov	r6, r3
  400bf4:	4d11      	ldr	r5, [pc, #68]	; (400c3c <usart_serial_putchar+0x6c>)
  400bf6:	4621      	mov	r1, r4
  400bf8:	4630      	mov	r0, r6
  400bfa:	47a8      	blx	r5
  400bfc:	2800      	cmp	r0, #0
  400bfe:	d1fa      	bne.n	400bf6 <usart_serial_putchar+0x26>
		return 1;
  400c00:	2001      	movs	r0, #1
  400c02:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c04:	4b0f      	ldr	r3, [pc, #60]	; (400c44 <usart_serial_putchar+0x74>)
  400c06:	4298      	cmp	r0, r3
  400c08:	d108      	bne.n	400c1c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400c0a:	461e      	mov	r6, r3
  400c0c:	4d0e      	ldr	r5, [pc, #56]	; (400c48 <usart_serial_putchar+0x78>)
  400c0e:	4621      	mov	r1, r4
  400c10:	4630      	mov	r0, r6
  400c12:	47a8      	blx	r5
  400c14:	2800      	cmp	r0, #0
  400c16:	d1fa      	bne.n	400c0e <usart_serial_putchar+0x3e>
		return 1;
  400c18:	2001      	movs	r0, #1
  400c1a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c1c:	4b0b      	ldr	r3, [pc, #44]	; (400c4c <usart_serial_putchar+0x7c>)
  400c1e:	4298      	cmp	r0, r3
  400c20:	d108      	bne.n	400c34 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c22:	461e      	mov	r6, r3
  400c24:	4d08      	ldr	r5, [pc, #32]	; (400c48 <usart_serial_putchar+0x78>)
  400c26:	4621      	mov	r1, r4
  400c28:	4630      	mov	r0, r6
  400c2a:	47a8      	blx	r5
  400c2c:	2800      	cmp	r0, #0
  400c2e:	d1fa      	bne.n	400c26 <usart_serial_putchar+0x56>
		return 1;
  400c30:	2001      	movs	r0, #1
  400c32:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c34:	2000      	movs	r0, #0
}
  400c36:	bd70      	pop	{r4, r5, r6, pc}
  400c38:	400e0600 	.word	0x400e0600
  400c3c:	00400819 	.word	0x00400819
  400c40:	40060600 	.word	0x40060600
  400c44:	400a0000 	.word	0x400a0000
  400c48:	0040083d 	.word	0x0040083d
  400c4c:	400a4000 	.word	0x400a4000

00400c50 <SPI_Handler>:
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c50:	4b23      	ldr	r3, [pc, #140]	; (400ce0 <SPI_Handler+0x90>)
  400c52:	691b      	ldr	r3, [r3, #16]
	uint32_t new_cmd = 0;
	static uint16_t data;
	uint8_t uc_pcs;
	bool read_done;

	if(spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) {
  400c54:	f013 0f01 	tst.w	r3, #1
  400c58:	d041      	beq.n	400cde <SPI_Handler+0x8e>

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
  400c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c5c:	b083      	sub	sp, #12
	uint8_t uc_pcs;
	bool read_done;

	if(spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) {
		read_done = false;
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);
  400c5e:	4c21      	ldr	r4, [pc, #132]	; (400ce4 <SPI_Handler+0x94>)
  400c60:	f10d 0207 	add.w	r2, sp, #7
  400c64:	4621      	mov	r1, r4
  400c66:	481e      	ldr	r0, [pc, #120]	; (400ce0 <SPI_Handler+0x90>)
  400c68:	4b1f      	ldr	r3, [pc, #124]	; (400ce8 <SPI_Handler+0x98>)
  400c6a:	4798      	blx	r3
		gs_puc_transfer_buffer[gs_ul_transfer_index] = data;
  400c6c:	4b1f      	ldr	r3, [pc, #124]	; (400cec <SPI_Handler+0x9c>)
  400c6e:	681a      	ldr	r2, [r3, #0]
  400c70:	8821      	ldrh	r1, [r4, #0]
  400c72:	4b1f      	ldr	r3, [pc, #124]	; (400cf0 <SPI_Handler+0xa0>)
  400c74:	681b      	ldr	r3, [r3, #0]
  400c76:	5499      	strb	r1, [r3, r2]
		//my_spi_buffer[gs_ul_transfer_index] = data;
		gs_ul_transfer_length--;
  400c78:	481e      	ldr	r0, [pc, #120]	; (400cf4 <SPI_Handler+0xa4>)
  400c7a:	6803      	ldr	r3, [r0, #0]
  400c7c:	3b01      	subs	r3, #1
  400c7e:	6003      	str	r3, [r0, #0]
		if(gs_ul_transfer_length) {
  400c80:	b313      	cbz	r3, 400cc8 <SPI_Handler+0x78>
			spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
  400c82:	2300      	movs	r3, #0
  400c84:	461a      	mov	r2, r3
  400c86:	b2c9      	uxtb	r1, r1
  400c88:	4815      	ldr	r0, [pc, #84]	; (400ce0 <SPI_Handler+0x90>)
  400c8a:	4c1b      	ldr	r4, [pc, #108]	; (400cf8 <SPI_Handler+0xa8>)
  400c8c:	47a0      	blx	r4
		}
		else {
			read_done = true;
		}
		gs_ul_transfer_index++;
  400c8e:	4a17      	ldr	r2, [pc, #92]	; (400cec <SPI_Handler+0x9c>)
  400c90:	6813      	ldr	r3, [r2, #0]
  400c92:	3301      	adds	r3, #1
  400c94:	6013      	str	r3, [r2, #0]
  400c96:	e020      	b.n	400cda <SPI_Handler+0x8a>
	
		if(read_done) {
			for(uint8_t i = 0; i < COMM_BUFFER_SIZE; i++) {
				printf("%02x ", gs_uc_spi_buffer[i]);
  400c98:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  400c9c:	4638      	mov	r0, r7
  400c9e:	47b0      	blx	r6
			read_done = true;
		}
		gs_ul_transfer_index++;
	
		if(read_done) {
			for(uint8_t i = 0; i < COMM_BUFFER_SIZE; i++) {
  400ca0:	42a5      	cmp	r5, r4
  400ca2:	d1f9      	bne.n	400c98 <SPI_Handler+0x48>
				printf("%02x ", gs_uc_spi_buffer[i]);
			}
			printf("READING COMPLETE\n\r");
  400ca4:	4815      	ldr	r0, [pc, #84]	; (400cfc <SPI_Handler+0xac>)
  400ca6:	4b16      	ldr	r3, [pc, #88]	; (400d00 <SPI_Handler+0xb0>)
  400ca8:	4798      	blx	r3
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
	gs_puc_transfer_buffer = p_buf;
  400caa:	4916      	ldr	r1, [pc, #88]	; (400d04 <SPI_Handler+0xb4>)
  400cac:	4b10      	ldr	r3, [pc, #64]	; (400cf0 <SPI_Handler+0xa0>)
  400cae:	6019      	str	r1, [r3, #0]
	gs_ul_transfer_length = size;
  400cb0:	2240      	movs	r2, #64	; 0x40
  400cb2:	4b10      	ldr	r3, [pc, #64]	; (400cf4 <SPI_Handler+0xa4>)
  400cb4:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_index = 0;
  400cb6:	2200      	movs	r2, #0
  400cb8:	4b0c      	ldr	r3, [pc, #48]	; (400cec <SPI_Handler+0x9c>)
  400cba:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
  400cbc:	4613      	mov	r3, r2
  400cbe:	7809      	ldrb	r1, [r1, #0]
  400cc0:	4807      	ldr	r0, [pc, #28]	; (400ce0 <SPI_Handler+0x90>)
  400cc2:	4c0d      	ldr	r4, [pc, #52]	; (400cf8 <SPI_Handler+0xa8>)
  400cc4:	47a0      	blx	r4
				//gs_spi_status.ul_total_command_number++;
			//}
			//spi_slave_new_command();
		//}
	//}
}
  400cc6:	e008      	b.n	400cda <SPI_Handler+0x8a>
			spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
		}
		else {
			read_done = true;
		}
		gs_ul_transfer_index++;
  400cc8:	3201      	adds	r2, #1
  400cca:	4b08      	ldr	r3, [pc, #32]	; (400cec <SPI_Handler+0x9c>)
  400ccc:	601a      	str	r2, [r3, #0]
  400cce:	4d0d      	ldr	r5, [pc, #52]	; (400d04 <SPI_Handler+0xb4>)
  400cd0:	1e6c      	subs	r4, r5, #1
  400cd2:	353f      	adds	r5, #63	; 0x3f
	
		if(read_done) {
			for(uint8_t i = 0; i < COMM_BUFFER_SIZE; i++) {
				printf("%02x ", gs_uc_spi_buffer[i]);
  400cd4:	4f0c      	ldr	r7, [pc, #48]	; (400d08 <SPI_Handler+0xb8>)
  400cd6:	4e0a      	ldr	r6, [pc, #40]	; (400d00 <SPI_Handler+0xb0>)
  400cd8:	e7de      	b.n	400c98 <SPI_Handler+0x48>
				//gs_spi_status.ul_total_command_number++;
			//}
			//spi_slave_new_command();
		//}
	//}
}
  400cda:	b003      	add	sp, #12
  400cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400cde:	4770      	bx	lr
  400ce0:	40088000 	.word	0x40088000
  400ce4:	200008d8 	.word	0x200008d8
  400ce8:	00400721 	.word	0x00400721
  400cec:	200008dc 	.word	0x200008dc
  400cf0:	200008d4 	.word	0x200008d4
  400cf4:	20000890 	.word	0x20000890
  400cf8:	00400755 	.word	0x00400755
  400cfc:	00403fb8 	.word	0x00403fb8
  400d00:	00400ebd 	.word	0x00400ebd
  400d04:	20000894 	.word	0x20000894
  400d08:	00403fb0 	.word	0x00403fb0

00400d0c <main>:
/**
* \brief Main program function. Configure the hardware, initialize lwIP
* TCP/IP stack, and start HTTP service.
*/
int main(void)
{
  400d0c:	b500      	push	{lr}
  400d0e:	b085      	sub	sp, #20
	uint8_t uc_key;
	
	/* Initialize the SAM system. */
	sysclk_init();
  400d10:	4b3a      	ldr	r3, [pc, #232]	; (400dfc <main+0xf0>)
  400d12:	4798      	blx	r3
	board_init();
  400d14:	4b3a      	ldr	r3, [pc, #232]	; (400e00 <main+0xf4>)
  400d16:	4798      	blx	r3
  400d18:	2007      	movs	r0, #7
  400d1a:	4d3a      	ldr	r5, [pc, #232]	; (400e04 <main+0xf8>)
  400d1c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d1e:	4c3a      	ldr	r4, [pc, #232]	; (400e08 <main+0xfc>)
  400d20:	4b3a      	ldr	r3, [pc, #232]	; (400e0c <main+0x100>)
  400d22:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d24:	4a3a      	ldr	r2, [pc, #232]	; (400e10 <main+0x104>)
  400d26:	4b3b      	ldr	r3, [pc, #236]	; (400e14 <main+0x108>)
  400d28:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d2a:	4a3b      	ldr	r2, [pc, #236]	; (400e18 <main+0x10c>)
  400d2c:	4b3b      	ldr	r3, [pc, #236]	; (400e1c <main+0x110>)
  400d2e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d30:	4b3b      	ldr	r3, [pc, #236]	; (400e20 <main+0x114>)
  400d32:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400d34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d38:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d3e:	9303      	str	r3, [sp, #12]
  400d40:	2007      	movs	r0, #7
  400d42:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400d44:	a901      	add	r1, sp, #4
  400d46:	4620      	mov	r0, r4
  400d48:	4b36      	ldr	r3, [pc, #216]	; (400e24 <main+0x118>)
  400d4a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400d4c:	4d36      	ldr	r5, [pc, #216]	; (400e28 <main+0x11c>)
  400d4e:	682b      	ldr	r3, [r5, #0]
  400d50:	2100      	movs	r1, #0
  400d52:	6898      	ldr	r0, [r3, #8]
  400d54:	4c35      	ldr	r4, [pc, #212]	; (400e2c <main+0x120>)
  400d56:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400d58:	682b      	ldr	r3, [r5, #0]
  400d5a:	2100      	movs	r1, #0
  400d5c:	6858      	ldr	r0, [r3, #4]
  400d5e:	47a0      	blx	r4

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
  400d60:	682b      	ldr	r3, [r5, #0]
  400d62:	2100      	movs	r1, #0
  400d64:	6898      	ldr	r0, [r3, #8]
  400d66:	47a0      	blx	r4

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  400d68:	4831      	ldr	r0, [pc, #196]	; (400e30 <main+0x124>)
  400d6a:	4b32      	ldr	r3, [pc, #200]	; (400e34 <main+0x128>)
  400d6c:	4798      	blx	r3
  400d6e:	4b32      	ldr	r3, [pc, #200]	; (400e38 <main+0x12c>)
  400d70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400d78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400d7c:	2100      	movs	r1, #0
  400d7e:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d82:	601a      	str	r2, [r3, #0]
  400d84:	2314      	movs	r3, #20
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
  400d86:	3b01      	subs	r3, #1
  400d88:	d1fd      	bne.n	400d86 <main+0x7a>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_IDLE;
	gs_ul_spi_cmd = RC_SYN;

	puts("-I- Initialize SPI as slave \r");
  400d8a:	482c      	ldr	r0, [pc, #176]	; (400e3c <main+0x130>)
  400d8c:	4b29      	ldr	r3, [pc, #164]	; (400e34 <main+0x128>)
  400d8e:	4798      	blx	r3
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_SLAVE_BASE);
  400d90:	4c2b      	ldr	r4, [pc, #172]	; (400e40 <main+0x134>)
  400d92:	4620      	mov	r0, r4
  400d94:	4b2b      	ldr	r3, [pc, #172]	; (400e44 <main+0x138>)
  400d96:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400d98:	2302      	movs	r3, #2
  400d9a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400d9c:	2380      	movs	r3, #128	; 0x80
  400d9e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400da0:	6863      	ldr	r3, [r4, #4]
  400da2:	f023 0301 	bic.w	r3, r3, #1
  400da6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400da8:	6863      	ldr	r3, [r4, #4]
  400daa:	f043 0310 	orr.w	r3, r3, #16
  400dae:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_SLAVE_BASE);
	spi_reset(SPI_SLAVE_BASE);
	spi_set_slave_mode(SPI_SLAVE_BASE);
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  400db0:	210e      	movs	r1, #14
  400db2:	4620      	mov	r0, r4
  400db4:	4b24      	ldr	r3, [pc, #144]	; (400e48 <main+0x13c>)
  400db6:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400db8:	2200      	movs	r2, #0
  400dba:	4611      	mov	r1, r2
  400dbc:	4620      	mov	r0, r4
  400dbe:	4b23      	ldr	r3, [pc, #140]	; (400e4c <main+0x140>)
  400dc0:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400dc2:	2201      	movs	r2, #1
  400dc4:	2100      	movs	r1, #0
  400dc6:	4620      	mov	r0, r4
  400dc8:	4b21      	ldr	r3, [pc, #132]	; (400e50 <main+0x144>)
  400dca:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  400dcc:	2200      	movs	r2, #0
  400dce:	4611      	mov	r1, r2
  400dd0:	4620      	mov	r0, r4
  400dd2:	4b20      	ldr	r3, [pc, #128]	; (400e54 <main+0x148>)
  400dd4:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400dd6:	2301      	movs	r3, #1
  400dd8:	6163      	str	r3, [r4, #20]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400dda:	6023      	str	r3, [r4, #0]
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
	gs_puc_transfer_buffer = p_buf;
  400ddc:	491e      	ldr	r1, [pc, #120]	; (400e58 <main+0x14c>)
  400dde:	4b1f      	ldr	r3, [pc, #124]	; (400e5c <main+0x150>)
  400de0:	6019      	str	r1, [r3, #0]
	gs_ul_transfer_length = size;
  400de2:	2240      	movs	r2, #64	; 0x40
  400de4:	4b1e      	ldr	r3, [pc, #120]	; (400e60 <main+0x154>)
  400de6:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_index = 0;
  400de8:	2200      	movs	r2, #0
  400dea:	4b1e      	ldr	r3, [pc, #120]	; (400e64 <main+0x158>)
  400dec:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0, 0);
  400dee:	4613      	mov	r3, r2
  400df0:	7809      	ldrb	r1, [r1, #0]
  400df2:	4620      	mov	r0, r4
  400df4:	4c1c      	ldr	r4, [pc, #112]	; (400e68 <main+0x15c>)
  400df6:	47a0      	blx	r4
  400df8:	e7fe      	b.n	400df8 <main+0xec>
  400dfa:	bf00      	nop
  400dfc:	004004c9 	.word	0x004004c9
  400e00:	00400155 	.word	0x00400155
  400e04:	004006a5 	.word	0x004006a5
  400e08:	400e0600 	.word	0x400e0600
  400e0c:	2000091c 	.word	0x2000091c
  400e10:	00400bd1 	.word	0x00400bd1
  400e14:	20000918 	.word	0x20000918
  400e18:	00400b49 	.word	0x00400b49
  400e1c:	20000914 	.word	0x20000914
  400e20:	07270e00 	.word	0x07270e00
  400e24:	004007e1 	.word	0x004007e1
  400e28:	20000430 	.word	0x20000430
  400e2c:	004011f5 	.word	0x004011f5
  400e30:	00403fcc 	.word	0x00403fcc
  400e34:	004011e5 	.word	0x004011e5
  400e38:	e000e100 	.word	0xe000e100
  400e3c:	00404024 	.word	0x00404024
  400e40:	40088000 	.word	0x40088000
  400e44:	004006f9 	.word	0x004006f9
  400e48:	00400709 	.word	0x00400709
  400e4c:	0040078d 	.word	0x0040078d
  400e50:	004007ad 	.word	0x004007ad
  400e54:	004007cd 	.word	0x004007cd
  400e58:	20000894 	.word	0x20000894
  400e5c:	200008d4 	.word	0x200008d4
  400e60:	20000890 	.word	0x20000890
  400e64:	200008dc 	.word	0x200008dc
  400e68:	00400755 	.word	0x00400755

00400e6c <__libc_init_array>:
  400e6c:	b570      	push	{r4, r5, r6, lr}
  400e6e:	4e0f      	ldr	r6, [pc, #60]	; (400eac <__libc_init_array+0x40>)
  400e70:	4d0f      	ldr	r5, [pc, #60]	; (400eb0 <__libc_init_array+0x44>)
  400e72:	1b76      	subs	r6, r6, r5
  400e74:	10b6      	asrs	r6, r6, #2
  400e76:	bf18      	it	ne
  400e78:	2400      	movne	r4, #0
  400e7a:	d005      	beq.n	400e88 <__libc_init_array+0x1c>
  400e7c:	3401      	adds	r4, #1
  400e7e:	f855 3b04 	ldr.w	r3, [r5], #4
  400e82:	4798      	blx	r3
  400e84:	42a6      	cmp	r6, r4
  400e86:	d1f9      	bne.n	400e7c <__libc_init_array+0x10>
  400e88:	4e0a      	ldr	r6, [pc, #40]	; (400eb4 <__libc_init_array+0x48>)
  400e8a:	4d0b      	ldr	r5, [pc, #44]	; (400eb8 <__libc_init_array+0x4c>)
  400e8c:	1b76      	subs	r6, r6, r5
  400e8e:	f003 f907 	bl	4040a0 <_init>
  400e92:	10b6      	asrs	r6, r6, #2
  400e94:	bf18      	it	ne
  400e96:	2400      	movne	r4, #0
  400e98:	d006      	beq.n	400ea8 <__libc_init_array+0x3c>
  400e9a:	3401      	adds	r4, #1
  400e9c:	f855 3b04 	ldr.w	r3, [r5], #4
  400ea0:	4798      	blx	r3
  400ea2:	42a6      	cmp	r6, r4
  400ea4:	d1f9      	bne.n	400e9a <__libc_init_array+0x2e>
  400ea6:	bd70      	pop	{r4, r5, r6, pc}
  400ea8:	bd70      	pop	{r4, r5, r6, pc}
  400eaa:	bf00      	nop
  400eac:	004040ac 	.word	0x004040ac
  400eb0:	004040ac 	.word	0x004040ac
  400eb4:	004040b4 	.word	0x004040b4
  400eb8:	004040ac 	.word	0x004040ac

00400ebc <iprintf>:
  400ebc:	b40f      	push	{r0, r1, r2, r3}
  400ebe:	b500      	push	{lr}
  400ec0:	4907      	ldr	r1, [pc, #28]	; (400ee0 <iprintf+0x24>)
  400ec2:	b083      	sub	sp, #12
  400ec4:	ab04      	add	r3, sp, #16
  400ec6:	6808      	ldr	r0, [r1, #0]
  400ec8:	f853 2b04 	ldr.w	r2, [r3], #4
  400ecc:	6881      	ldr	r1, [r0, #8]
  400ece:	9301      	str	r3, [sp, #4]
  400ed0:	f000 fb00 	bl	4014d4 <_vfiprintf_r>
  400ed4:	b003      	add	sp, #12
  400ed6:	f85d eb04 	ldr.w	lr, [sp], #4
  400eda:	b004      	add	sp, #16
  400edc:	4770      	bx	lr
  400ede:	bf00      	nop
  400ee0:	20000430 	.word	0x20000430

00400ee4 <memcpy>:
  400ee4:	4684      	mov	ip, r0
  400ee6:	ea41 0300 	orr.w	r3, r1, r0
  400eea:	f013 0303 	ands.w	r3, r3, #3
  400eee:	d16d      	bne.n	400fcc <memcpy+0xe8>
  400ef0:	3a40      	subs	r2, #64	; 0x40
  400ef2:	d341      	bcc.n	400f78 <memcpy+0x94>
  400ef4:	f851 3b04 	ldr.w	r3, [r1], #4
  400ef8:	f840 3b04 	str.w	r3, [r0], #4
  400efc:	f851 3b04 	ldr.w	r3, [r1], #4
  400f00:	f840 3b04 	str.w	r3, [r0], #4
  400f04:	f851 3b04 	ldr.w	r3, [r1], #4
  400f08:	f840 3b04 	str.w	r3, [r0], #4
  400f0c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f10:	f840 3b04 	str.w	r3, [r0], #4
  400f14:	f851 3b04 	ldr.w	r3, [r1], #4
  400f18:	f840 3b04 	str.w	r3, [r0], #4
  400f1c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f20:	f840 3b04 	str.w	r3, [r0], #4
  400f24:	f851 3b04 	ldr.w	r3, [r1], #4
  400f28:	f840 3b04 	str.w	r3, [r0], #4
  400f2c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f30:	f840 3b04 	str.w	r3, [r0], #4
  400f34:	f851 3b04 	ldr.w	r3, [r1], #4
  400f38:	f840 3b04 	str.w	r3, [r0], #4
  400f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f40:	f840 3b04 	str.w	r3, [r0], #4
  400f44:	f851 3b04 	ldr.w	r3, [r1], #4
  400f48:	f840 3b04 	str.w	r3, [r0], #4
  400f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f50:	f840 3b04 	str.w	r3, [r0], #4
  400f54:	f851 3b04 	ldr.w	r3, [r1], #4
  400f58:	f840 3b04 	str.w	r3, [r0], #4
  400f5c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f60:	f840 3b04 	str.w	r3, [r0], #4
  400f64:	f851 3b04 	ldr.w	r3, [r1], #4
  400f68:	f840 3b04 	str.w	r3, [r0], #4
  400f6c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f70:	f840 3b04 	str.w	r3, [r0], #4
  400f74:	3a40      	subs	r2, #64	; 0x40
  400f76:	d2bd      	bcs.n	400ef4 <memcpy+0x10>
  400f78:	3230      	adds	r2, #48	; 0x30
  400f7a:	d311      	bcc.n	400fa0 <memcpy+0xbc>
  400f7c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f80:	f840 3b04 	str.w	r3, [r0], #4
  400f84:	f851 3b04 	ldr.w	r3, [r1], #4
  400f88:	f840 3b04 	str.w	r3, [r0], #4
  400f8c:	f851 3b04 	ldr.w	r3, [r1], #4
  400f90:	f840 3b04 	str.w	r3, [r0], #4
  400f94:	f851 3b04 	ldr.w	r3, [r1], #4
  400f98:	f840 3b04 	str.w	r3, [r0], #4
  400f9c:	3a10      	subs	r2, #16
  400f9e:	d2ed      	bcs.n	400f7c <memcpy+0x98>
  400fa0:	320c      	adds	r2, #12
  400fa2:	d305      	bcc.n	400fb0 <memcpy+0xcc>
  400fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  400fa8:	f840 3b04 	str.w	r3, [r0], #4
  400fac:	3a04      	subs	r2, #4
  400fae:	d2f9      	bcs.n	400fa4 <memcpy+0xc0>
  400fb0:	3204      	adds	r2, #4
  400fb2:	d008      	beq.n	400fc6 <memcpy+0xe2>
  400fb4:	07d2      	lsls	r2, r2, #31
  400fb6:	bf1c      	itt	ne
  400fb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  400fbc:	f800 3b01 	strbne.w	r3, [r0], #1
  400fc0:	d301      	bcc.n	400fc6 <memcpy+0xe2>
  400fc2:	880b      	ldrh	r3, [r1, #0]
  400fc4:	8003      	strh	r3, [r0, #0]
  400fc6:	4660      	mov	r0, ip
  400fc8:	4770      	bx	lr
  400fca:	bf00      	nop
  400fcc:	2a08      	cmp	r2, #8
  400fce:	d313      	bcc.n	400ff8 <memcpy+0x114>
  400fd0:	078b      	lsls	r3, r1, #30
  400fd2:	d08d      	beq.n	400ef0 <memcpy+0xc>
  400fd4:	f010 0303 	ands.w	r3, r0, #3
  400fd8:	d08a      	beq.n	400ef0 <memcpy+0xc>
  400fda:	f1c3 0304 	rsb	r3, r3, #4
  400fde:	1ad2      	subs	r2, r2, r3
  400fe0:	07db      	lsls	r3, r3, #31
  400fe2:	bf1c      	itt	ne
  400fe4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  400fe8:	f800 3b01 	strbne.w	r3, [r0], #1
  400fec:	d380      	bcc.n	400ef0 <memcpy+0xc>
  400fee:	f831 3b02 	ldrh.w	r3, [r1], #2
  400ff2:	f820 3b02 	strh.w	r3, [r0], #2
  400ff6:	e77b      	b.n	400ef0 <memcpy+0xc>
  400ff8:	3a04      	subs	r2, #4
  400ffa:	d3d9      	bcc.n	400fb0 <memcpy+0xcc>
  400ffc:	3a01      	subs	r2, #1
  400ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
  401002:	f800 3b01 	strb.w	r3, [r0], #1
  401006:	d2f9      	bcs.n	400ffc <memcpy+0x118>
  401008:	780b      	ldrb	r3, [r1, #0]
  40100a:	7003      	strb	r3, [r0, #0]
  40100c:	784b      	ldrb	r3, [r1, #1]
  40100e:	7043      	strb	r3, [r0, #1]
  401010:	788b      	ldrb	r3, [r1, #2]
  401012:	7083      	strb	r3, [r0, #2]
  401014:	4660      	mov	r0, ip
  401016:	4770      	bx	lr

00401018 <memmove>:
  401018:	4288      	cmp	r0, r1
  40101a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40101c:	d90d      	bls.n	40103a <memmove+0x22>
  40101e:	188b      	adds	r3, r1, r2
  401020:	4298      	cmp	r0, r3
  401022:	d20a      	bcs.n	40103a <memmove+0x22>
  401024:	1881      	adds	r1, r0, r2
  401026:	2a00      	cmp	r2, #0
  401028:	d051      	beq.n	4010ce <memmove+0xb6>
  40102a:	1a9a      	subs	r2, r3, r2
  40102c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  401030:	f801 4d01 	strb.w	r4, [r1, #-1]!
  401034:	4293      	cmp	r3, r2
  401036:	d1f9      	bne.n	40102c <memmove+0x14>
  401038:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40103a:	2a0f      	cmp	r2, #15
  40103c:	d948      	bls.n	4010d0 <memmove+0xb8>
  40103e:	ea41 0300 	orr.w	r3, r1, r0
  401042:	079b      	lsls	r3, r3, #30
  401044:	d146      	bne.n	4010d4 <memmove+0xbc>
  401046:	f100 0410 	add.w	r4, r0, #16
  40104a:	f101 0310 	add.w	r3, r1, #16
  40104e:	4615      	mov	r5, r2
  401050:	f853 6c10 	ldr.w	r6, [r3, #-16]
  401054:	f844 6c10 	str.w	r6, [r4, #-16]
  401058:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40105c:	f844 6c0c 	str.w	r6, [r4, #-12]
  401060:	f853 6c08 	ldr.w	r6, [r3, #-8]
  401064:	f844 6c08 	str.w	r6, [r4, #-8]
  401068:	3d10      	subs	r5, #16
  40106a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40106e:	f844 6c04 	str.w	r6, [r4, #-4]
  401072:	2d0f      	cmp	r5, #15
  401074:	f103 0310 	add.w	r3, r3, #16
  401078:	f104 0410 	add.w	r4, r4, #16
  40107c:	d8e8      	bhi.n	401050 <memmove+0x38>
  40107e:	f1a2 0310 	sub.w	r3, r2, #16
  401082:	f023 030f 	bic.w	r3, r3, #15
  401086:	f002 0e0f 	and.w	lr, r2, #15
  40108a:	3310      	adds	r3, #16
  40108c:	f1be 0f03 	cmp.w	lr, #3
  401090:	4419      	add	r1, r3
  401092:	4403      	add	r3, r0
  401094:	d921      	bls.n	4010da <memmove+0xc2>
  401096:	1f1e      	subs	r6, r3, #4
  401098:	460d      	mov	r5, r1
  40109a:	4674      	mov	r4, lr
  40109c:	3c04      	subs	r4, #4
  40109e:	f855 7b04 	ldr.w	r7, [r5], #4
  4010a2:	f846 7f04 	str.w	r7, [r6, #4]!
  4010a6:	2c03      	cmp	r4, #3
  4010a8:	d8f8      	bhi.n	40109c <memmove+0x84>
  4010aa:	f1ae 0404 	sub.w	r4, lr, #4
  4010ae:	f024 0403 	bic.w	r4, r4, #3
  4010b2:	3404      	adds	r4, #4
  4010b4:	4423      	add	r3, r4
  4010b6:	4421      	add	r1, r4
  4010b8:	f002 0203 	and.w	r2, r2, #3
  4010bc:	b162      	cbz	r2, 4010d8 <memmove+0xc0>
  4010be:	3b01      	subs	r3, #1
  4010c0:	440a      	add	r2, r1
  4010c2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4010c6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4010ca:	428a      	cmp	r2, r1
  4010cc:	d1f9      	bne.n	4010c2 <memmove+0xaa>
  4010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010d0:	4603      	mov	r3, r0
  4010d2:	e7f3      	b.n	4010bc <memmove+0xa4>
  4010d4:	4603      	mov	r3, r0
  4010d6:	e7f2      	b.n	4010be <memmove+0xa6>
  4010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010da:	4672      	mov	r2, lr
  4010dc:	e7ee      	b.n	4010bc <memmove+0xa4>
  4010de:	bf00      	nop

004010e0 <memset>:
  4010e0:	b470      	push	{r4, r5, r6}
  4010e2:	0784      	lsls	r4, r0, #30
  4010e4:	d046      	beq.n	401174 <memset+0x94>
  4010e6:	1e54      	subs	r4, r2, #1
  4010e8:	2a00      	cmp	r2, #0
  4010ea:	d041      	beq.n	401170 <memset+0x90>
  4010ec:	b2cd      	uxtb	r5, r1
  4010ee:	4603      	mov	r3, r0
  4010f0:	e002      	b.n	4010f8 <memset+0x18>
  4010f2:	1e62      	subs	r2, r4, #1
  4010f4:	b3e4      	cbz	r4, 401170 <memset+0x90>
  4010f6:	4614      	mov	r4, r2
  4010f8:	f803 5b01 	strb.w	r5, [r3], #1
  4010fc:	079a      	lsls	r2, r3, #30
  4010fe:	d1f8      	bne.n	4010f2 <memset+0x12>
  401100:	2c03      	cmp	r4, #3
  401102:	d92e      	bls.n	401162 <memset+0x82>
  401104:	b2cd      	uxtb	r5, r1
  401106:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40110a:	2c0f      	cmp	r4, #15
  40110c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401110:	d919      	bls.n	401146 <memset+0x66>
  401112:	f103 0210 	add.w	r2, r3, #16
  401116:	4626      	mov	r6, r4
  401118:	3e10      	subs	r6, #16
  40111a:	2e0f      	cmp	r6, #15
  40111c:	f842 5c10 	str.w	r5, [r2, #-16]
  401120:	f842 5c0c 	str.w	r5, [r2, #-12]
  401124:	f842 5c08 	str.w	r5, [r2, #-8]
  401128:	f842 5c04 	str.w	r5, [r2, #-4]
  40112c:	f102 0210 	add.w	r2, r2, #16
  401130:	d8f2      	bhi.n	401118 <memset+0x38>
  401132:	f1a4 0210 	sub.w	r2, r4, #16
  401136:	f022 020f 	bic.w	r2, r2, #15
  40113a:	f004 040f 	and.w	r4, r4, #15
  40113e:	3210      	adds	r2, #16
  401140:	2c03      	cmp	r4, #3
  401142:	4413      	add	r3, r2
  401144:	d90d      	bls.n	401162 <memset+0x82>
  401146:	461e      	mov	r6, r3
  401148:	4622      	mov	r2, r4
  40114a:	3a04      	subs	r2, #4
  40114c:	2a03      	cmp	r2, #3
  40114e:	f846 5b04 	str.w	r5, [r6], #4
  401152:	d8fa      	bhi.n	40114a <memset+0x6a>
  401154:	1f22      	subs	r2, r4, #4
  401156:	f022 0203 	bic.w	r2, r2, #3
  40115a:	3204      	adds	r2, #4
  40115c:	4413      	add	r3, r2
  40115e:	f004 0403 	and.w	r4, r4, #3
  401162:	b12c      	cbz	r4, 401170 <memset+0x90>
  401164:	b2c9      	uxtb	r1, r1
  401166:	441c      	add	r4, r3
  401168:	f803 1b01 	strb.w	r1, [r3], #1
  40116c:	42a3      	cmp	r3, r4
  40116e:	d1fb      	bne.n	401168 <memset+0x88>
  401170:	bc70      	pop	{r4, r5, r6}
  401172:	4770      	bx	lr
  401174:	4614      	mov	r4, r2
  401176:	4603      	mov	r3, r0
  401178:	e7c2      	b.n	401100 <memset+0x20>
  40117a:	bf00      	nop

0040117c <_puts_r>:
  40117c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40117e:	4605      	mov	r5, r0
  401180:	b089      	sub	sp, #36	; 0x24
  401182:	4608      	mov	r0, r1
  401184:	460c      	mov	r4, r1
  401186:	f000 f8fb 	bl	401380 <strlen>
  40118a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40118c:	4f14      	ldr	r7, [pc, #80]	; (4011e0 <_puts_r+0x64>)
  40118e:	9404      	str	r4, [sp, #16]
  401190:	2601      	movs	r6, #1
  401192:	1c44      	adds	r4, r0, #1
  401194:	a904      	add	r1, sp, #16
  401196:	2202      	movs	r2, #2
  401198:	9403      	str	r4, [sp, #12]
  40119a:	9005      	str	r0, [sp, #20]
  40119c:	68ac      	ldr	r4, [r5, #8]
  40119e:	9706      	str	r7, [sp, #24]
  4011a0:	9607      	str	r6, [sp, #28]
  4011a2:	9101      	str	r1, [sp, #4]
  4011a4:	9202      	str	r2, [sp, #8]
  4011a6:	b1b3      	cbz	r3, 4011d6 <_puts_r+0x5a>
  4011a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011ac:	049a      	lsls	r2, r3, #18
  4011ae:	d406      	bmi.n	4011be <_puts_r+0x42>
  4011b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4011b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4011ba:	81a3      	strh	r3, [r4, #12]
  4011bc:	6662      	str	r2, [r4, #100]	; 0x64
  4011be:	4621      	mov	r1, r4
  4011c0:	4628      	mov	r0, r5
  4011c2:	aa01      	add	r2, sp, #4
  4011c4:	f001 fc18 	bl	4029f8 <__sfvwrite_r>
  4011c8:	2800      	cmp	r0, #0
  4011ca:	bf14      	ite	ne
  4011cc:	f04f 30ff 	movne.w	r0, #4294967295
  4011d0:	200a      	moveq	r0, #10
  4011d2:	b009      	add	sp, #36	; 0x24
  4011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011d6:	4628      	mov	r0, r5
  4011d8:	f001 fa5c 	bl	402694 <__sinit>
  4011dc:	e7e4      	b.n	4011a8 <_puts_r+0x2c>
  4011de:	bf00      	nop
  4011e0:	0040404c 	.word	0x0040404c

004011e4 <puts>:
  4011e4:	4b02      	ldr	r3, [pc, #8]	; (4011f0 <puts+0xc>)
  4011e6:	4601      	mov	r1, r0
  4011e8:	6818      	ldr	r0, [r3, #0]
  4011ea:	f7ff bfc7 	b.w	40117c <_puts_r>
  4011ee:	bf00      	nop
  4011f0:	20000430 	.word	0x20000430

004011f4 <setbuf>:
  4011f4:	2900      	cmp	r1, #0
  4011f6:	bf0c      	ite	eq
  4011f8:	2202      	moveq	r2, #2
  4011fa:	2200      	movne	r2, #0
  4011fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401200:	f000 b800 	b.w	401204 <setvbuf>

00401204 <setvbuf>:
  401204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401208:	4c51      	ldr	r4, [pc, #324]	; (401350 <setvbuf+0x14c>)
  40120a:	6825      	ldr	r5, [r4, #0]
  40120c:	b083      	sub	sp, #12
  40120e:	4604      	mov	r4, r0
  401210:	460f      	mov	r7, r1
  401212:	4690      	mov	r8, r2
  401214:	461e      	mov	r6, r3
  401216:	b115      	cbz	r5, 40121e <setvbuf+0x1a>
  401218:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40121a:	2b00      	cmp	r3, #0
  40121c:	d079      	beq.n	401312 <setvbuf+0x10e>
  40121e:	f1b8 0f02 	cmp.w	r8, #2
  401222:	d004      	beq.n	40122e <setvbuf+0x2a>
  401224:	f1b8 0f01 	cmp.w	r8, #1
  401228:	d87f      	bhi.n	40132a <setvbuf+0x126>
  40122a:	2e00      	cmp	r6, #0
  40122c:	db7d      	blt.n	40132a <setvbuf+0x126>
  40122e:	4621      	mov	r1, r4
  401230:	4628      	mov	r0, r5
  401232:	f001 f99b 	bl	40256c <_fflush_r>
  401236:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401238:	b141      	cbz	r1, 40124c <setvbuf+0x48>
  40123a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40123e:	4299      	cmp	r1, r3
  401240:	d002      	beq.n	401248 <setvbuf+0x44>
  401242:	4628      	mov	r0, r5
  401244:	f001 faf0 	bl	402828 <_free_r>
  401248:	2300      	movs	r3, #0
  40124a:	6323      	str	r3, [r4, #48]	; 0x30
  40124c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401250:	2200      	movs	r2, #0
  401252:	61a2      	str	r2, [r4, #24]
  401254:	6062      	str	r2, [r4, #4]
  401256:	061a      	lsls	r2, r3, #24
  401258:	d454      	bmi.n	401304 <setvbuf+0x100>
  40125a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40125e:	f023 0303 	bic.w	r3, r3, #3
  401262:	f1b8 0f02 	cmp.w	r8, #2
  401266:	81a3      	strh	r3, [r4, #12]
  401268:	d039      	beq.n	4012de <setvbuf+0xda>
  40126a:	ab01      	add	r3, sp, #4
  40126c:	466a      	mov	r2, sp
  40126e:	4621      	mov	r1, r4
  401270:	4628      	mov	r0, r5
  401272:	f001 fd77 	bl	402d64 <__swhatbuf_r>
  401276:	89a3      	ldrh	r3, [r4, #12]
  401278:	4318      	orrs	r0, r3
  40127a:	81a0      	strh	r0, [r4, #12]
  40127c:	b326      	cbz	r6, 4012c8 <setvbuf+0xc4>
  40127e:	b327      	cbz	r7, 4012ca <setvbuf+0xc6>
  401280:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401282:	2b00      	cmp	r3, #0
  401284:	d04d      	beq.n	401322 <setvbuf+0x11e>
  401286:	9b00      	ldr	r3, [sp, #0]
  401288:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  40128c:	6027      	str	r7, [r4, #0]
  40128e:	429e      	cmp	r6, r3
  401290:	bf1c      	itt	ne
  401292:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  401296:	81a0      	strhne	r0, [r4, #12]
  401298:	f1b8 0f01 	cmp.w	r8, #1
  40129c:	bf08      	it	eq
  40129e:	f040 0001 	orreq.w	r0, r0, #1
  4012a2:	b283      	uxth	r3, r0
  4012a4:	bf08      	it	eq
  4012a6:	81a0      	strheq	r0, [r4, #12]
  4012a8:	f003 0008 	and.w	r0, r3, #8
  4012ac:	b280      	uxth	r0, r0
  4012ae:	6127      	str	r7, [r4, #16]
  4012b0:	6166      	str	r6, [r4, #20]
  4012b2:	b318      	cbz	r0, 4012fc <setvbuf+0xf8>
  4012b4:	f013 0001 	ands.w	r0, r3, #1
  4012b8:	d02f      	beq.n	40131a <setvbuf+0x116>
  4012ba:	2000      	movs	r0, #0
  4012bc:	4276      	negs	r6, r6
  4012be:	61a6      	str	r6, [r4, #24]
  4012c0:	60a0      	str	r0, [r4, #8]
  4012c2:	b003      	add	sp, #12
  4012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012c8:	9e00      	ldr	r6, [sp, #0]
  4012ca:	4630      	mov	r0, r6
  4012cc:	f001 fdbe 	bl	402e4c <malloc>
  4012d0:	4607      	mov	r7, r0
  4012d2:	b368      	cbz	r0, 401330 <setvbuf+0x12c>
  4012d4:	89a3      	ldrh	r3, [r4, #12]
  4012d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4012da:	81a3      	strh	r3, [r4, #12]
  4012dc:	e7d0      	b.n	401280 <setvbuf+0x7c>
  4012de:	2000      	movs	r0, #0
  4012e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4012e4:	f043 0302 	orr.w	r3, r3, #2
  4012e8:	2500      	movs	r5, #0
  4012ea:	2101      	movs	r1, #1
  4012ec:	81a3      	strh	r3, [r4, #12]
  4012ee:	60a5      	str	r5, [r4, #8]
  4012f0:	6022      	str	r2, [r4, #0]
  4012f2:	6122      	str	r2, [r4, #16]
  4012f4:	6161      	str	r1, [r4, #20]
  4012f6:	b003      	add	sp, #12
  4012f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012fc:	60a0      	str	r0, [r4, #8]
  4012fe:	b003      	add	sp, #12
  401300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401304:	6921      	ldr	r1, [r4, #16]
  401306:	4628      	mov	r0, r5
  401308:	f001 fa8e 	bl	402828 <_free_r>
  40130c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401310:	e7a3      	b.n	40125a <setvbuf+0x56>
  401312:	4628      	mov	r0, r5
  401314:	f001 f9be 	bl	402694 <__sinit>
  401318:	e781      	b.n	40121e <setvbuf+0x1a>
  40131a:	60a6      	str	r6, [r4, #8]
  40131c:	b003      	add	sp, #12
  40131e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401322:	4628      	mov	r0, r5
  401324:	f001 f9b6 	bl	402694 <__sinit>
  401328:	e7ad      	b.n	401286 <setvbuf+0x82>
  40132a:	f04f 30ff 	mov.w	r0, #4294967295
  40132e:	e7e2      	b.n	4012f6 <setvbuf+0xf2>
  401330:	f8dd 9000 	ldr.w	r9, [sp]
  401334:	45b1      	cmp	r9, r6
  401336:	d006      	beq.n	401346 <setvbuf+0x142>
  401338:	4648      	mov	r0, r9
  40133a:	f001 fd87 	bl	402e4c <malloc>
  40133e:	4607      	mov	r7, r0
  401340:	b108      	cbz	r0, 401346 <setvbuf+0x142>
  401342:	464e      	mov	r6, r9
  401344:	e7c6      	b.n	4012d4 <setvbuf+0xd0>
  401346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40134a:	f04f 30ff 	mov.w	r0, #4294967295
  40134e:	e7c7      	b.n	4012e0 <setvbuf+0xdc>
  401350:	20000430 	.word	0x20000430
	...

00401380 <strlen>:
  401380:	f890 f000 	pld	[r0]
  401384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401388:	f020 0107 	bic.w	r1, r0, #7
  40138c:	f06f 0c00 	mvn.w	ip, #0
  401390:	f010 0407 	ands.w	r4, r0, #7
  401394:	f891 f020 	pld	[r1, #32]
  401398:	f040 8049 	bne.w	40142e <strlen+0xae>
  40139c:	f04f 0400 	mov.w	r4, #0
  4013a0:	f06f 0007 	mvn.w	r0, #7
  4013a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4013a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4013ac:	f100 0008 	add.w	r0, r0, #8
  4013b0:	fa82 f24c 	uadd8	r2, r2, ip
  4013b4:	faa4 f28c 	sel	r2, r4, ip
  4013b8:	fa83 f34c 	uadd8	r3, r3, ip
  4013bc:	faa2 f38c 	sel	r3, r2, ip
  4013c0:	bb4b      	cbnz	r3, 401416 <strlen+0x96>
  4013c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4013c6:	fa82 f24c 	uadd8	r2, r2, ip
  4013ca:	f100 0008 	add.w	r0, r0, #8
  4013ce:	faa4 f28c 	sel	r2, r4, ip
  4013d2:	fa83 f34c 	uadd8	r3, r3, ip
  4013d6:	faa2 f38c 	sel	r3, r2, ip
  4013da:	b9e3      	cbnz	r3, 401416 <strlen+0x96>
  4013dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4013e0:	fa82 f24c 	uadd8	r2, r2, ip
  4013e4:	f100 0008 	add.w	r0, r0, #8
  4013e8:	faa4 f28c 	sel	r2, r4, ip
  4013ec:	fa83 f34c 	uadd8	r3, r3, ip
  4013f0:	faa2 f38c 	sel	r3, r2, ip
  4013f4:	b97b      	cbnz	r3, 401416 <strlen+0x96>
  4013f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4013fa:	f101 0120 	add.w	r1, r1, #32
  4013fe:	fa82 f24c 	uadd8	r2, r2, ip
  401402:	f100 0008 	add.w	r0, r0, #8
  401406:	faa4 f28c 	sel	r2, r4, ip
  40140a:	fa83 f34c 	uadd8	r3, r3, ip
  40140e:	faa2 f38c 	sel	r3, r2, ip
  401412:	2b00      	cmp	r3, #0
  401414:	d0c6      	beq.n	4013a4 <strlen+0x24>
  401416:	2a00      	cmp	r2, #0
  401418:	bf04      	itt	eq
  40141a:	3004      	addeq	r0, #4
  40141c:	461a      	moveq	r2, r3
  40141e:	ba12      	rev	r2, r2
  401420:	fab2 f282 	clz	r2, r2
  401424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40142c:	4770      	bx	lr
  40142e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401432:	f004 0503 	and.w	r5, r4, #3
  401436:	f1c4 0000 	rsb	r0, r4, #0
  40143a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40143e:	f014 0f04 	tst.w	r4, #4
  401442:	f891 f040 	pld	[r1, #64]	; 0x40
  401446:	fa0c f505 	lsl.w	r5, ip, r5
  40144a:	ea62 0205 	orn	r2, r2, r5
  40144e:	bf1c      	itt	ne
  401450:	ea63 0305 	ornne	r3, r3, r5
  401454:	4662      	movne	r2, ip
  401456:	f04f 0400 	mov.w	r4, #0
  40145a:	e7a9      	b.n	4013b0 <strlen+0x30>

0040145c <__sprint_r.part.0>:
  40145c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40145e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401462:	049c      	lsls	r4, r3, #18
  401464:	4692      	mov	sl, r2
  401466:	d52c      	bpl.n	4014c2 <__sprint_r.part.0+0x66>
  401468:	6893      	ldr	r3, [r2, #8]
  40146a:	6812      	ldr	r2, [r2, #0]
  40146c:	b33b      	cbz	r3, 4014be <__sprint_r.part.0+0x62>
  40146e:	460f      	mov	r7, r1
  401470:	4680      	mov	r8, r0
  401472:	f102 0908 	add.w	r9, r2, #8
  401476:	e919 0060 	ldmdb	r9, {r5, r6}
  40147a:	08b6      	lsrs	r6, r6, #2
  40147c:	d017      	beq.n	4014ae <__sprint_r.part.0+0x52>
  40147e:	3d04      	subs	r5, #4
  401480:	2400      	movs	r4, #0
  401482:	e001      	b.n	401488 <__sprint_r.part.0+0x2c>
  401484:	42a6      	cmp	r6, r4
  401486:	d010      	beq.n	4014aa <__sprint_r.part.0+0x4e>
  401488:	463a      	mov	r2, r7
  40148a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40148e:	4640      	mov	r0, r8
  401490:	f001 f96a 	bl	402768 <_fputwc_r>
  401494:	1c43      	adds	r3, r0, #1
  401496:	f104 0401 	add.w	r4, r4, #1
  40149a:	d1f3      	bne.n	401484 <__sprint_r.part.0+0x28>
  40149c:	2300      	movs	r3, #0
  40149e:	f8ca 3008 	str.w	r3, [sl, #8]
  4014a2:	f8ca 3004 	str.w	r3, [sl, #4]
  4014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4014aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4014ae:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4014b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4014b6:	f109 0908 	add.w	r9, r9, #8
  4014ba:	2b00      	cmp	r3, #0
  4014bc:	d1db      	bne.n	401476 <__sprint_r.part.0+0x1a>
  4014be:	2000      	movs	r0, #0
  4014c0:	e7ec      	b.n	40149c <__sprint_r.part.0+0x40>
  4014c2:	f001 fa99 	bl	4029f8 <__sfvwrite_r>
  4014c6:	2300      	movs	r3, #0
  4014c8:	f8ca 3008 	str.w	r3, [sl, #8]
  4014cc:	f8ca 3004 	str.w	r3, [sl, #4]
  4014d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004014d4 <_vfiprintf_r>:
  4014d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014d8:	b0ab      	sub	sp, #172	; 0xac
  4014da:	461c      	mov	r4, r3
  4014dc:	9100      	str	r1, [sp, #0]
  4014de:	4690      	mov	r8, r2
  4014e0:	9304      	str	r3, [sp, #16]
  4014e2:	9005      	str	r0, [sp, #20]
  4014e4:	b118      	cbz	r0, 4014ee <_vfiprintf_r+0x1a>
  4014e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4014e8:	2b00      	cmp	r3, #0
  4014ea:	f000 80de 	beq.w	4016aa <_vfiprintf_r+0x1d6>
  4014ee:	9800      	ldr	r0, [sp, #0]
  4014f0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4014f4:	b28a      	uxth	r2, r1
  4014f6:	0495      	lsls	r5, r2, #18
  4014f8:	d407      	bmi.n	40150a <_vfiprintf_r+0x36>
  4014fa:	6e43      	ldr	r3, [r0, #100]	; 0x64
  4014fc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401504:	8182      	strh	r2, [r0, #12]
  401506:	6643      	str	r3, [r0, #100]	; 0x64
  401508:	b292      	uxth	r2, r2
  40150a:	0711      	lsls	r1, r2, #28
  40150c:	f140 80b1 	bpl.w	401672 <_vfiprintf_r+0x19e>
  401510:	9b00      	ldr	r3, [sp, #0]
  401512:	691b      	ldr	r3, [r3, #16]
  401514:	2b00      	cmp	r3, #0
  401516:	f000 80ac 	beq.w	401672 <_vfiprintf_r+0x19e>
  40151a:	f002 021a 	and.w	r2, r2, #26
  40151e:	2a0a      	cmp	r2, #10
  401520:	f000 80b5 	beq.w	40168e <_vfiprintf_r+0x1ba>
  401524:	2300      	movs	r3, #0
  401526:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40152a:	9302      	str	r3, [sp, #8]
  40152c:	930f      	str	r3, [sp, #60]	; 0x3c
  40152e:	930e      	str	r3, [sp, #56]	; 0x38
  401530:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401534:	46da      	mov	sl, fp
  401536:	f898 3000 	ldrb.w	r3, [r8]
  40153a:	4644      	mov	r4, r8
  40153c:	b1fb      	cbz	r3, 40157e <_vfiprintf_r+0xaa>
  40153e:	2b25      	cmp	r3, #37	; 0x25
  401540:	d102      	bne.n	401548 <_vfiprintf_r+0x74>
  401542:	e01c      	b.n	40157e <_vfiprintf_r+0xaa>
  401544:	2b25      	cmp	r3, #37	; 0x25
  401546:	d003      	beq.n	401550 <_vfiprintf_r+0x7c>
  401548:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40154c:	2b00      	cmp	r3, #0
  40154e:	d1f9      	bne.n	401544 <_vfiprintf_r+0x70>
  401550:	ebc8 0504 	rsb	r5, r8, r4
  401554:	b19d      	cbz	r5, 40157e <_vfiprintf_r+0xaa>
  401556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40155a:	f8ca 8000 	str.w	r8, [sl]
  40155e:	3301      	adds	r3, #1
  401560:	442a      	add	r2, r5
  401562:	2b07      	cmp	r3, #7
  401564:	f8ca 5004 	str.w	r5, [sl, #4]
  401568:	920f      	str	r2, [sp, #60]	; 0x3c
  40156a:	930e      	str	r3, [sp, #56]	; 0x38
  40156c:	dd7b      	ble.n	401666 <_vfiprintf_r+0x192>
  40156e:	2a00      	cmp	r2, #0
  401570:	f040 8528 	bne.w	401fc4 <_vfiprintf_r+0xaf0>
  401574:	9b02      	ldr	r3, [sp, #8]
  401576:	920e      	str	r2, [sp, #56]	; 0x38
  401578:	442b      	add	r3, r5
  40157a:	46da      	mov	sl, fp
  40157c:	9302      	str	r3, [sp, #8]
  40157e:	7823      	ldrb	r3, [r4, #0]
  401580:	2b00      	cmp	r3, #0
  401582:	f000 843e 	beq.w	401e02 <_vfiprintf_r+0x92e>
  401586:	2100      	movs	r1, #0
  401588:	f04f 0300 	mov.w	r3, #0
  40158c:	f04f 32ff 	mov.w	r2, #4294967295
  401590:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401594:	f104 0801 	add.w	r8, r4, #1
  401598:	7863      	ldrb	r3, [r4, #1]
  40159a:	9201      	str	r2, [sp, #4]
  40159c:	4608      	mov	r0, r1
  40159e:	460e      	mov	r6, r1
  4015a0:	460c      	mov	r4, r1
  4015a2:	f108 0801 	add.w	r8, r8, #1
  4015a6:	f1a3 0220 	sub.w	r2, r3, #32
  4015aa:	2a58      	cmp	r2, #88	; 0x58
  4015ac:	f200 8393 	bhi.w	401cd6 <_vfiprintf_r+0x802>
  4015b0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4015b4:	03910346 	.word	0x03910346
  4015b8:	034e0391 	.word	0x034e0391
  4015bc:	03910391 	.word	0x03910391
  4015c0:	03910391 	.word	0x03910391
  4015c4:	03910391 	.word	0x03910391
  4015c8:	02670289 	.word	0x02670289
  4015cc:	00800391 	.word	0x00800391
  4015d0:	0391026c 	.word	0x0391026c
  4015d4:	025901c6 	.word	0x025901c6
  4015d8:	02590259 	.word	0x02590259
  4015dc:	02590259 	.word	0x02590259
  4015e0:	02590259 	.word	0x02590259
  4015e4:	02590259 	.word	0x02590259
  4015e8:	03910391 	.word	0x03910391
  4015ec:	03910391 	.word	0x03910391
  4015f0:	03910391 	.word	0x03910391
  4015f4:	03910391 	.word	0x03910391
  4015f8:	03910391 	.word	0x03910391
  4015fc:	039101cb 	.word	0x039101cb
  401600:	03910391 	.word	0x03910391
  401604:	03910391 	.word	0x03910391
  401608:	03910391 	.word	0x03910391
  40160c:	03910391 	.word	0x03910391
  401610:	02140391 	.word	0x02140391
  401614:	03910391 	.word	0x03910391
  401618:	03910391 	.word	0x03910391
  40161c:	02ee0391 	.word	0x02ee0391
  401620:	03910391 	.word	0x03910391
  401624:	03910311 	.word	0x03910311
  401628:	03910391 	.word	0x03910391
  40162c:	03910391 	.word	0x03910391
  401630:	03910391 	.word	0x03910391
  401634:	03910391 	.word	0x03910391
  401638:	03340391 	.word	0x03340391
  40163c:	0391038a 	.word	0x0391038a
  401640:	03910391 	.word	0x03910391
  401644:	038a0367 	.word	0x038a0367
  401648:	03910391 	.word	0x03910391
  40164c:	0391036c 	.word	0x0391036c
  401650:	02950379 	.word	0x02950379
  401654:	02e90085 	.word	0x02e90085
  401658:	029b0391 	.word	0x029b0391
  40165c:	02ba0391 	.word	0x02ba0391
  401660:	03910391 	.word	0x03910391
  401664:	0353      	.short	0x0353
  401666:	f10a 0a08 	add.w	sl, sl, #8
  40166a:	9b02      	ldr	r3, [sp, #8]
  40166c:	442b      	add	r3, r5
  40166e:	9302      	str	r3, [sp, #8]
  401670:	e785      	b.n	40157e <_vfiprintf_r+0xaa>
  401672:	9900      	ldr	r1, [sp, #0]
  401674:	9805      	ldr	r0, [sp, #20]
  401676:	f000 fe61 	bl	40233c <__swsetup_r>
  40167a:	2800      	cmp	r0, #0
  40167c:	f040 8558 	bne.w	402130 <_vfiprintf_r+0xc5c>
  401680:	9b00      	ldr	r3, [sp, #0]
  401682:	899a      	ldrh	r2, [r3, #12]
  401684:	f002 021a 	and.w	r2, r2, #26
  401688:	2a0a      	cmp	r2, #10
  40168a:	f47f af4b 	bne.w	401524 <_vfiprintf_r+0x50>
  40168e:	9900      	ldr	r1, [sp, #0]
  401690:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401694:	2b00      	cmp	r3, #0
  401696:	f6ff af45 	blt.w	401524 <_vfiprintf_r+0x50>
  40169a:	4623      	mov	r3, r4
  40169c:	4642      	mov	r2, r8
  40169e:	9805      	ldr	r0, [sp, #20]
  4016a0:	f000 fe16 	bl	4022d0 <__sbprintf>
  4016a4:	b02b      	add	sp, #172	; 0xac
  4016a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016aa:	f000 fff3 	bl	402694 <__sinit>
  4016ae:	e71e      	b.n	4014ee <_vfiprintf_r+0x1a>
  4016b0:	4264      	negs	r4, r4
  4016b2:	9304      	str	r3, [sp, #16]
  4016b4:	f046 0604 	orr.w	r6, r6, #4
  4016b8:	f898 3000 	ldrb.w	r3, [r8]
  4016bc:	e771      	b.n	4015a2 <_vfiprintf_r+0xce>
  4016be:	2130      	movs	r1, #48	; 0x30
  4016c0:	9804      	ldr	r0, [sp, #16]
  4016c2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4016c6:	9901      	ldr	r1, [sp, #4]
  4016c8:	9406      	str	r4, [sp, #24]
  4016ca:	f04f 0300 	mov.w	r3, #0
  4016ce:	2278      	movs	r2, #120	; 0x78
  4016d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4016d4:	2900      	cmp	r1, #0
  4016d6:	4603      	mov	r3, r0
  4016d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  4016dc:	6804      	ldr	r4, [r0, #0]
  4016de:	f103 0304 	add.w	r3, r3, #4
  4016e2:	f04f 0500 	mov.w	r5, #0
  4016e6:	f046 0202 	orr.w	r2, r6, #2
  4016ea:	f2c0 8525 	blt.w	402138 <_vfiprintf_r+0xc64>
  4016ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4016f2:	ea54 0205 	orrs.w	r2, r4, r5
  4016f6:	f046 0602 	orr.w	r6, r6, #2
  4016fa:	9304      	str	r3, [sp, #16]
  4016fc:	f040 84bf 	bne.w	40207e <_vfiprintf_r+0xbaa>
  401700:	48b3      	ldr	r0, [pc, #716]	; (4019d0 <_vfiprintf_r+0x4fc>)
  401702:	9b01      	ldr	r3, [sp, #4]
  401704:	2b00      	cmp	r3, #0
  401706:	f040 841c 	bne.w	401f42 <_vfiprintf_r+0xa6e>
  40170a:	4699      	mov	r9, r3
  40170c:	2300      	movs	r3, #0
  40170e:	9301      	str	r3, [sp, #4]
  401710:	9303      	str	r3, [sp, #12]
  401712:	465f      	mov	r7, fp
  401714:	9b01      	ldr	r3, [sp, #4]
  401716:	9a03      	ldr	r2, [sp, #12]
  401718:	4293      	cmp	r3, r2
  40171a:	bfb8      	it	lt
  40171c:	4613      	movlt	r3, r2
  40171e:	461d      	mov	r5, r3
  401720:	f1b9 0f00 	cmp.w	r9, #0
  401724:	d000      	beq.n	401728 <_vfiprintf_r+0x254>
  401726:	3501      	adds	r5, #1
  401728:	f016 0302 	ands.w	r3, r6, #2
  40172c:	9307      	str	r3, [sp, #28]
  40172e:	bf18      	it	ne
  401730:	3502      	addne	r5, #2
  401732:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  401736:	9308      	str	r3, [sp, #32]
  401738:	f040 82f1 	bne.w	401d1e <_vfiprintf_r+0x84a>
  40173c:	9b06      	ldr	r3, [sp, #24]
  40173e:	1b5c      	subs	r4, r3, r5
  401740:	2c00      	cmp	r4, #0
  401742:	f340 82ec 	ble.w	401d1e <_vfiprintf_r+0x84a>
  401746:	2c10      	cmp	r4, #16
  401748:	f340 8556 	ble.w	4021f8 <_vfiprintf_r+0xd24>
  40174c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4019d4 <_vfiprintf_r+0x500>
  401750:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401756:	46d4      	mov	ip, sl
  401758:	2310      	movs	r3, #16
  40175a:	46c2      	mov	sl, r8
  40175c:	4670      	mov	r0, lr
  40175e:	46a8      	mov	r8, r5
  401760:	464d      	mov	r5, r9
  401762:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401766:	e007      	b.n	401778 <_vfiprintf_r+0x2a4>
  401768:	f100 0e02 	add.w	lr, r0, #2
  40176c:	f10c 0c08 	add.w	ip, ip, #8
  401770:	4608      	mov	r0, r1
  401772:	3c10      	subs	r4, #16
  401774:	2c10      	cmp	r4, #16
  401776:	dd13      	ble.n	4017a0 <_vfiprintf_r+0x2cc>
  401778:	1c41      	adds	r1, r0, #1
  40177a:	3210      	adds	r2, #16
  40177c:	2907      	cmp	r1, #7
  40177e:	920f      	str	r2, [sp, #60]	; 0x3c
  401780:	f8cc 5000 	str.w	r5, [ip]
  401784:	f8cc 3004 	str.w	r3, [ip, #4]
  401788:	910e      	str	r1, [sp, #56]	; 0x38
  40178a:	dded      	ble.n	401768 <_vfiprintf_r+0x294>
  40178c:	2a00      	cmp	r2, #0
  40178e:	f040 82b7 	bne.w	401d00 <_vfiprintf_r+0x82c>
  401792:	3c10      	subs	r4, #16
  401794:	2c10      	cmp	r4, #16
  401796:	4610      	mov	r0, r2
  401798:	f04f 0e01 	mov.w	lr, #1
  40179c:	46dc      	mov	ip, fp
  40179e:	dceb      	bgt.n	401778 <_vfiprintf_r+0x2a4>
  4017a0:	46a9      	mov	r9, r5
  4017a2:	4670      	mov	r0, lr
  4017a4:	4645      	mov	r5, r8
  4017a6:	46d0      	mov	r8, sl
  4017a8:	46e2      	mov	sl, ip
  4017aa:	4422      	add	r2, r4
  4017ac:	2807      	cmp	r0, #7
  4017ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4017b0:	f8ca 9000 	str.w	r9, [sl]
  4017b4:	f8ca 4004 	str.w	r4, [sl, #4]
  4017b8:	900e      	str	r0, [sp, #56]	; 0x38
  4017ba:	f300 8375 	bgt.w	401ea8 <_vfiprintf_r+0x9d4>
  4017be:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4017c2:	f10a 0a08 	add.w	sl, sl, #8
  4017c6:	f100 0e01 	add.w	lr, r0, #1
  4017ca:	2b00      	cmp	r3, #0
  4017cc:	f040 82b0 	bne.w	401d30 <_vfiprintf_r+0x85c>
  4017d0:	9b07      	ldr	r3, [sp, #28]
  4017d2:	2b00      	cmp	r3, #0
  4017d4:	f000 82c3 	beq.w	401d5e <_vfiprintf_r+0x88a>
  4017d8:	3202      	adds	r2, #2
  4017da:	a90c      	add	r1, sp, #48	; 0x30
  4017dc:	2302      	movs	r3, #2
  4017de:	f1be 0f07 	cmp.w	lr, #7
  4017e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4017e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4017e8:	e88a 000a 	stmia.w	sl, {r1, r3}
  4017ec:	f340 8378 	ble.w	401ee0 <_vfiprintf_r+0xa0c>
  4017f0:	2a00      	cmp	r2, #0
  4017f2:	f040 840a 	bne.w	40200a <_vfiprintf_r+0xb36>
  4017f6:	9b08      	ldr	r3, [sp, #32]
  4017f8:	2b80      	cmp	r3, #128	; 0x80
  4017fa:	f04f 0e01 	mov.w	lr, #1
  4017fe:	4610      	mov	r0, r2
  401800:	46da      	mov	sl, fp
  401802:	f040 82b0 	bne.w	401d66 <_vfiprintf_r+0x892>
  401806:	9b06      	ldr	r3, [sp, #24]
  401808:	1b5c      	subs	r4, r3, r5
  40180a:	2c00      	cmp	r4, #0
  40180c:	f340 82ab 	ble.w	401d66 <_vfiprintf_r+0x892>
  401810:	2c10      	cmp	r4, #16
  401812:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4019d8 <_vfiprintf_r+0x504>
  401816:	f340 850b 	ble.w	402230 <_vfiprintf_r+0xd5c>
  40181a:	46d6      	mov	lr, sl
  40181c:	2310      	movs	r3, #16
  40181e:	46c2      	mov	sl, r8
  401820:	46a8      	mov	r8, r5
  401822:	464d      	mov	r5, r9
  401824:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401828:	e007      	b.n	40183a <_vfiprintf_r+0x366>
  40182a:	f100 0c02 	add.w	ip, r0, #2
  40182e:	f10e 0e08 	add.w	lr, lr, #8
  401832:	4608      	mov	r0, r1
  401834:	3c10      	subs	r4, #16
  401836:	2c10      	cmp	r4, #16
  401838:	dd13      	ble.n	401862 <_vfiprintf_r+0x38e>
  40183a:	1c41      	adds	r1, r0, #1
  40183c:	3210      	adds	r2, #16
  40183e:	2907      	cmp	r1, #7
  401840:	920f      	str	r2, [sp, #60]	; 0x3c
  401842:	f8ce 5000 	str.w	r5, [lr]
  401846:	f8ce 3004 	str.w	r3, [lr, #4]
  40184a:	910e      	str	r1, [sp, #56]	; 0x38
  40184c:	dded      	ble.n	40182a <_vfiprintf_r+0x356>
  40184e:	2a00      	cmp	r2, #0
  401850:	f040 8315 	bne.w	401e7e <_vfiprintf_r+0x9aa>
  401854:	3c10      	subs	r4, #16
  401856:	2c10      	cmp	r4, #16
  401858:	f04f 0c01 	mov.w	ip, #1
  40185c:	4610      	mov	r0, r2
  40185e:	46de      	mov	lr, fp
  401860:	dceb      	bgt.n	40183a <_vfiprintf_r+0x366>
  401862:	46a9      	mov	r9, r5
  401864:	4645      	mov	r5, r8
  401866:	46d0      	mov	r8, sl
  401868:	46f2      	mov	sl, lr
  40186a:	4422      	add	r2, r4
  40186c:	f1bc 0f07 	cmp.w	ip, #7
  401870:	920f      	str	r2, [sp, #60]	; 0x3c
  401872:	f8ca 9000 	str.w	r9, [sl]
  401876:	f8ca 4004 	str.w	r4, [sl, #4]
  40187a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40187e:	f300 83d2 	bgt.w	402026 <_vfiprintf_r+0xb52>
  401882:	9b01      	ldr	r3, [sp, #4]
  401884:	9903      	ldr	r1, [sp, #12]
  401886:	1a5c      	subs	r4, r3, r1
  401888:	2c00      	cmp	r4, #0
  40188a:	f10a 0a08 	add.w	sl, sl, #8
  40188e:	f10c 0e01 	add.w	lr, ip, #1
  401892:	4660      	mov	r0, ip
  401894:	f300 826d 	bgt.w	401d72 <_vfiprintf_r+0x89e>
  401898:	9903      	ldr	r1, [sp, #12]
  40189a:	f8ca 7000 	str.w	r7, [sl]
  40189e:	440a      	add	r2, r1
  4018a0:	f1be 0f07 	cmp.w	lr, #7
  4018a4:	920f      	str	r2, [sp, #60]	; 0x3c
  4018a6:	f8ca 1004 	str.w	r1, [sl, #4]
  4018aa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4018ae:	f340 82ce 	ble.w	401e4e <_vfiprintf_r+0x97a>
  4018b2:	2a00      	cmp	r2, #0
  4018b4:	f040 833a 	bne.w	401f2c <_vfiprintf_r+0xa58>
  4018b8:	0770      	lsls	r0, r6, #29
  4018ba:	920e      	str	r2, [sp, #56]	; 0x38
  4018bc:	d538      	bpl.n	401930 <_vfiprintf_r+0x45c>
  4018be:	9b06      	ldr	r3, [sp, #24]
  4018c0:	1b5c      	subs	r4, r3, r5
  4018c2:	2c00      	cmp	r4, #0
  4018c4:	dd34      	ble.n	401930 <_vfiprintf_r+0x45c>
  4018c6:	46da      	mov	sl, fp
  4018c8:	2c10      	cmp	r4, #16
  4018ca:	f340 84ab 	ble.w	402224 <_vfiprintf_r+0xd50>
  4018ce:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4019d4 <_vfiprintf_r+0x500>
  4018d2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4018d4:	464f      	mov	r7, r9
  4018d6:	2610      	movs	r6, #16
  4018d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4018dc:	e006      	b.n	4018ec <_vfiprintf_r+0x418>
  4018de:	1c88      	adds	r0, r1, #2
  4018e0:	f10a 0a08 	add.w	sl, sl, #8
  4018e4:	4619      	mov	r1, r3
  4018e6:	3c10      	subs	r4, #16
  4018e8:	2c10      	cmp	r4, #16
  4018ea:	dd13      	ble.n	401914 <_vfiprintf_r+0x440>
  4018ec:	1c4b      	adds	r3, r1, #1
  4018ee:	3210      	adds	r2, #16
  4018f0:	2b07      	cmp	r3, #7
  4018f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4018f4:	f8ca 7000 	str.w	r7, [sl]
  4018f8:	f8ca 6004 	str.w	r6, [sl, #4]
  4018fc:	930e      	str	r3, [sp, #56]	; 0x38
  4018fe:	ddee      	ble.n	4018de <_vfiprintf_r+0x40a>
  401900:	2a00      	cmp	r2, #0
  401902:	f040 828e 	bne.w	401e22 <_vfiprintf_r+0x94e>
  401906:	3c10      	subs	r4, #16
  401908:	2c10      	cmp	r4, #16
  40190a:	f04f 0001 	mov.w	r0, #1
  40190e:	4611      	mov	r1, r2
  401910:	46da      	mov	sl, fp
  401912:	dceb      	bgt.n	4018ec <_vfiprintf_r+0x418>
  401914:	46b9      	mov	r9, r7
  401916:	4422      	add	r2, r4
  401918:	2807      	cmp	r0, #7
  40191a:	920f      	str	r2, [sp, #60]	; 0x3c
  40191c:	f8ca 9000 	str.w	r9, [sl]
  401920:	f8ca 4004 	str.w	r4, [sl, #4]
  401924:	900e      	str	r0, [sp, #56]	; 0x38
  401926:	f340 829b 	ble.w	401e60 <_vfiprintf_r+0x98c>
  40192a:	2a00      	cmp	r2, #0
  40192c:	f040 8425 	bne.w	40217a <_vfiprintf_r+0xca6>
  401930:	9b02      	ldr	r3, [sp, #8]
  401932:	9a06      	ldr	r2, [sp, #24]
  401934:	42aa      	cmp	r2, r5
  401936:	bfac      	ite	ge
  401938:	189b      	addge	r3, r3, r2
  40193a:	195b      	addlt	r3, r3, r5
  40193c:	9302      	str	r3, [sp, #8]
  40193e:	e299      	b.n	401e74 <_vfiprintf_r+0x9a0>
  401940:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401944:	f898 3000 	ldrb.w	r3, [r8]
  401948:	e62b      	b.n	4015a2 <_vfiprintf_r+0xce>
  40194a:	9406      	str	r4, [sp, #24]
  40194c:	2900      	cmp	r1, #0
  40194e:	f040 84af 	bne.w	4022b0 <_vfiprintf_r+0xddc>
  401952:	f046 0610 	orr.w	r6, r6, #16
  401956:	06b3      	lsls	r3, r6, #26
  401958:	f140 8312 	bpl.w	401f80 <_vfiprintf_r+0xaac>
  40195c:	9904      	ldr	r1, [sp, #16]
  40195e:	3107      	adds	r1, #7
  401960:	f021 0107 	bic.w	r1, r1, #7
  401964:	e9d1 2300 	ldrd	r2, r3, [r1]
  401968:	3108      	adds	r1, #8
  40196a:	9104      	str	r1, [sp, #16]
  40196c:	4614      	mov	r4, r2
  40196e:	461d      	mov	r5, r3
  401970:	2a00      	cmp	r2, #0
  401972:	f173 0300 	sbcs.w	r3, r3, #0
  401976:	f2c0 8386 	blt.w	402086 <_vfiprintf_r+0xbb2>
  40197a:	9b01      	ldr	r3, [sp, #4]
  40197c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  401980:	2b00      	cmp	r3, #0
  401982:	f2c0 831a 	blt.w	401fba <_vfiprintf_r+0xae6>
  401986:	ea54 0305 	orrs.w	r3, r4, r5
  40198a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40198e:	f000 80ed 	beq.w	401b6c <_vfiprintf_r+0x698>
  401992:	2d00      	cmp	r5, #0
  401994:	bf08      	it	eq
  401996:	2c0a      	cmpeq	r4, #10
  401998:	f0c0 80ed 	bcc.w	401b76 <_vfiprintf_r+0x6a2>
  40199c:	465f      	mov	r7, fp
  40199e:	4620      	mov	r0, r4
  4019a0:	4629      	mov	r1, r5
  4019a2:	220a      	movs	r2, #10
  4019a4:	2300      	movs	r3, #0
  4019a6:	f002 f949 	bl	403c3c <__aeabi_uldivmod>
  4019aa:	3230      	adds	r2, #48	; 0x30
  4019ac:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4019b0:	4620      	mov	r0, r4
  4019b2:	4629      	mov	r1, r5
  4019b4:	2300      	movs	r3, #0
  4019b6:	220a      	movs	r2, #10
  4019b8:	f002 f940 	bl	403c3c <__aeabi_uldivmod>
  4019bc:	4604      	mov	r4, r0
  4019be:	460d      	mov	r5, r1
  4019c0:	ea54 0305 	orrs.w	r3, r4, r5
  4019c4:	d1eb      	bne.n	40199e <_vfiprintf_r+0x4ca>
  4019c6:	ebc7 030b 	rsb	r3, r7, fp
  4019ca:	9303      	str	r3, [sp, #12]
  4019cc:	e6a2      	b.n	401714 <_vfiprintf_r+0x240>
  4019ce:	bf00      	nop
  4019d0:	00404074 	.word	0x00404074
  4019d4:	00404090 	.word	0x00404090
  4019d8:	00404050 	.word	0x00404050
  4019dc:	9406      	str	r4, [sp, #24]
  4019de:	2900      	cmp	r1, #0
  4019e0:	f040 8462 	bne.w	4022a8 <_vfiprintf_r+0xdd4>
  4019e4:	f046 0610 	orr.w	r6, r6, #16
  4019e8:	f016 0320 	ands.w	r3, r6, #32
  4019ec:	f000 82ae 	beq.w	401f4c <_vfiprintf_r+0xa78>
  4019f0:	9b04      	ldr	r3, [sp, #16]
  4019f2:	3307      	adds	r3, #7
  4019f4:	f023 0307 	bic.w	r3, r3, #7
  4019f8:	f04f 0200 	mov.w	r2, #0
  4019fc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401a00:	e9d3 4500 	ldrd	r4, r5, [r3]
  401a04:	f103 0208 	add.w	r2, r3, #8
  401a08:	9b01      	ldr	r3, [sp, #4]
  401a0a:	9204      	str	r2, [sp, #16]
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	f2c0 8174 	blt.w	401cfa <_vfiprintf_r+0x826>
  401a12:	ea54 0305 	orrs.w	r3, r4, r5
  401a16:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401a1a:	f040 816e 	bne.w	401cfa <_vfiprintf_r+0x826>
  401a1e:	9b01      	ldr	r3, [sp, #4]
  401a20:	2b00      	cmp	r3, #0
  401a22:	f000 8430 	beq.w	402286 <_vfiprintf_r+0xdb2>
  401a26:	f04f 0900 	mov.w	r9, #0
  401a2a:	2400      	movs	r4, #0
  401a2c:	2500      	movs	r5, #0
  401a2e:	465f      	mov	r7, fp
  401a30:	08e2      	lsrs	r2, r4, #3
  401a32:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  401a36:	08e9      	lsrs	r1, r5, #3
  401a38:	f004 0307 	and.w	r3, r4, #7
  401a3c:	460d      	mov	r5, r1
  401a3e:	4614      	mov	r4, r2
  401a40:	3330      	adds	r3, #48	; 0x30
  401a42:	ea54 0205 	orrs.w	r2, r4, r5
  401a46:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401a4a:	d1f1      	bne.n	401a30 <_vfiprintf_r+0x55c>
  401a4c:	07f4      	lsls	r4, r6, #31
  401a4e:	d5ba      	bpl.n	4019c6 <_vfiprintf_r+0x4f2>
  401a50:	2b30      	cmp	r3, #48	; 0x30
  401a52:	d0b8      	beq.n	4019c6 <_vfiprintf_r+0x4f2>
  401a54:	2230      	movs	r2, #48	; 0x30
  401a56:	1e7b      	subs	r3, r7, #1
  401a58:	f807 2c01 	strb.w	r2, [r7, #-1]
  401a5c:	ebc3 020b 	rsb	r2, r3, fp
  401a60:	9203      	str	r2, [sp, #12]
  401a62:	461f      	mov	r7, r3
  401a64:	e656      	b.n	401714 <_vfiprintf_r+0x240>
  401a66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401a6a:	2400      	movs	r4, #0
  401a6c:	f818 3b01 	ldrb.w	r3, [r8], #1
  401a70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401a74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  401a78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401a7c:	2a09      	cmp	r2, #9
  401a7e:	d9f5      	bls.n	401a6c <_vfiprintf_r+0x598>
  401a80:	e591      	b.n	4015a6 <_vfiprintf_r+0xd2>
  401a82:	f898 3000 	ldrb.w	r3, [r8]
  401a86:	2101      	movs	r1, #1
  401a88:	202b      	movs	r0, #43	; 0x2b
  401a8a:	e58a      	b.n	4015a2 <_vfiprintf_r+0xce>
  401a8c:	f898 3000 	ldrb.w	r3, [r8]
  401a90:	2b2a      	cmp	r3, #42	; 0x2a
  401a92:	f108 0501 	add.w	r5, r8, #1
  401a96:	f000 83dd 	beq.w	402254 <_vfiprintf_r+0xd80>
  401a9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401a9e:	2a09      	cmp	r2, #9
  401aa0:	46a8      	mov	r8, r5
  401aa2:	bf98      	it	ls
  401aa4:	2500      	movls	r5, #0
  401aa6:	f200 83ce 	bhi.w	402246 <_vfiprintf_r+0xd72>
  401aaa:	f818 3b01 	ldrb.w	r3, [r8], #1
  401aae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401ab2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401ab6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401aba:	2a09      	cmp	r2, #9
  401abc:	d9f5      	bls.n	401aaa <_vfiprintf_r+0x5d6>
  401abe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  401ac2:	9201      	str	r2, [sp, #4]
  401ac4:	e56f      	b.n	4015a6 <_vfiprintf_r+0xd2>
  401ac6:	9a04      	ldr	r2, [sp, #16]
  401ac8:	6814      	ldr	r4, [r2, #0]
  401aca:	4613      	mov	r3, r2
  401acc:	2c00      	cmp	r4, #0
  401ace:	f103 0304 	add.w	r3, r3, #4
  401ad2:	f6ff aded 	blt.w	4016b0 <_vfiprintf_r+0x1dc>
  401ad6:	9304      	str	r3, [sp, #16]
  401ad8:	f898 3000 	ldrb.w	r3, [r8]
  401adc:	e561      	b.n	4015a2 <_vfiprintf_r+0xce>
  401ade:	9406      	str	r4, [sp, #24]
  401ae0:	2900      	cmp	r1, #0
  401ae2:	d081      	beq.n	4019e8 <_vfiprintf_r+0x514>
  401ae4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401ae8:	e77e      	b.n	4019e8 <_vfiprintf_r+0x514>
  401aea:	9a04      	ldr	r2, [sp, #16]
  401aec:	9406      	str	r4, [sp, #24]
  401aee:	6817      	ldr	r7, [r2, #0]
  401af0:	f04f 0300 	mov.w	r3, #0
  401af4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401af8:	1d14      	adds	r4, r2, #4
  401afa:	9b01      	ldr	r3, [sp, #4]
  401afc:	2f00      	cmp	r7, #0
  401afe:	f000 8386 	beq.w	40220e <_vfiprintf_r+0xd3a>
  401b02:	2b00      	cmp	r3, #0
  401b04:	f2c0 835f 	blt.w	4021c6 <_vfiprintf_r+0xcf2>
  401b08:	461a      	mov	r2, r3
  401b0a:	2100      	movs	r1, #0
  401b0c:	4638      	mov	r0, r7
  401b0e:	f001 fc5f 	bl	4033d0 <memchr>
  401b12:	2800      	cmp	r0, #0
  401b14:	f000 838f 	beq.w	402236 <_vfiprintf_r+0xd62>
  401b18:	1bc3      	subs	r3, r0, r7
  401b1a:	9303      	str	r3, [sp, #12]
  401b1c:	2300      	movs	r3, #0
  401b1e:	9404      	str	r4, [sp, #16]
  401b20:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  401b24:	9301      	str	r3, [sp, #4]
  401b26:	e5f5      	b.n	401714 <_vfiprintf_r+0x240>
  401b28:	9406      	str	r4, [sp, #24]
  401b2a:	2900      	cmp	r1, #0
  401b2c:	f040 83b9 	bne.w	4022a2 <_vfiprintf_r+0xdce>
  401b30:	f016 0920 	ands.w	r9, r6, #32
  401b34:	d135      	bne.n	401ba2 <_vfiprintf_r+0x6ce>
  401b36:	f016 0310 	ands.w	r3, r6, #16
  401b3a:	d103      	bne.n	401b44 <_vfiprintf_r+0x670>
  401b3c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  401b40:	f040 832a 	bne.w	402198 <_vfiprintf_r+0xcc4>
  401b44:	9a04      	ldr	r2, [sp, #16]
  401b46:	4613      	mov	r3, r2
  401b48:	6814      	ldr	r4, [r2, #0]
  401b4a:	9a01      	ldr	r2, [sp, #4]
  401b4c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401b50:	2a00      	cmp	r2, #0
  401b52:	f103 0304 	add.w	r3, r3, #4
  401b56:	f04f 0500 	mov.w	r5, #0
  401b5a:	f2c0 8332 	blt.w	4021c2 <_vfiprintf_r+0xcee>
  401b5e:	ea54 0205 	orrs.w	r2, r4, r5
  401b62:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401b66:	9304      	str	r3, [sp, #16]
  401b68:	f47f af13 	bne.w	401992 <_vfiprintf_r+0x4be>
  401b6c:	9b01      	ldr	r3, [sp, #4]
  401b6e:	2b00      	cmp	r3, #0
  401b70:	f43f adcc 	beq.w	40170c <_vfiprintf_r+0x238>
  401b74:	2400      	movs	r4, #0
  401b76:	af2a      	add	r7, sp, #168	; 0xa8
  401b78:	3430      	adds	r4, #48	; 0x30
  401b7a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  401b7e:	ebc7 030b 	rsb	r3, r7, fp
  401b82:	9303      	str	r3, [sp, #12]
  401b84:	e5c6      	b.n	401714 <_vfiprintf_r+0x240>
  401b86:	f046 0620 	orr.w	r6, r6, #32
  401b8a:	f898 3000 	ldrb.w	r3, [r8]
  401b8e:	e508      	b.n	4015a2 <_vfiprintf_r+0xce>
  401b90:	9406      	str	r4, [sp, #24]
  401b92:	2900      	cmp	r1, #0
  401b94:	f040 836e 	bne.w	402274 <_vfiprintf_r+0xda0>
  401b98:	f046 0610 	orr.w	r6, r6, #16
  401b9c:	f016 0920 	ands.w	r9, r6, #32
  401ba0:	d0c9      	beq.n	401b36 <_vfiprintf_r+0x662>
  401ba2:	9b04      	ldr	r3, [sp, #16]
  401ba4:	3307      	adds	r3, #7
  401ba6:	f023 0307 	bic.w	r3, r3, #7
  401baa:	f04f 0200 	mov.w	r2, #0
  401bae:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401bb2:	e9d3 4500 	ldrd	r4, r5, [r3]
  401bb6:	f103 0208 	add.w	r2, r3, #8
  401bba:	9b01      	ldr	r3, [sp, #4]
  401bbc:	9204      	str	r2, [sp, #16]
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	f2c0 81f9 	blt.w	401fb6 <_vfiprintf_r+0xae2>
  401bc4:	ea54 0305 	orrs.w	r3, r4, r5
  401bc8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401bcc:	f04f 0900 	mov.w	r9, #0
  401bd0:	f47f aedf 	bne.w	401992 <_vfiprintf_r+0x4be>
  401bd4:	e7ca      	b.n	401b6c <_vfiprintf_r+0x698>
  401bd6:	9406      	str	r4, [sp, #24]
  401bd8:	2900      	cmp	r1, #0
  401bda:	f040 8351 	bne.w	402280 <_vfiprintf_r+0xdac>
  401bde:	06b2      	lsls	r2, r6, #26
  401be0:	48ae      	ldr	r0, [pc, #696]	; (401e9c <_vfiprintf_r+0x9c8>)
  401be2:	d541      	bpl.n	401c68 <_vfiprintf_r+0x794>
  401be4:	9a04      	ldr	r2, [sp, #16]
  401be6:	3207      	adds	r2, #7
  401be8:	f022 0207 	bic.w	r2, r2, #7
  401bec:	e9d2 4500 	ldrd	r4, r5, [r2]
  401bf0:	f102 0108 	add.w	r1, r2, #8
  401bf4:	9104      	str	r1, [sp, #16]
  401bf6:	f016 0901 	ands.w	r9, r6, #1
  401bfa:	f000 8177 	beq.w	401eec <_vfiprintf_r+0xa18>
  401bfe:	ea54 0205 	orrs.w	r2, r4, r5
  401c02:	f040 8226 	bne.w	402052 <_vfiprintf_r+0xb7e>
  401c06:	f04f 0300 	mov.w	r3, #0
  401c0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401c0e:	9b01      	ldr	r3, [sp, #4]
  401c10:	2b00      	cmp	r3, #0
  401c12:	f2c0 8196 	blt.w	401f42 <_vfiprintf_r+0xa6e>
  401c16:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401c1a:	e572      	b.n	401702 <_vfiprintf_r+0x22e>
  401c1c:	9a04      	ldr	r2, [sp, #16]
  401c1e:	9406      	str	r4, [sp, #24]
  401c20:	6813      	ldr	r3, [r2, #0]
  401c22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401c26:	4613      	mov	r3, r2
  401c28:	f04f 0100 	mov.w	r1, #0
  401c2c:	2501      	movs	r5, #1
  401c2e:	3304      	adds	r3, #4
  401c30:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401c34:	9304      	str	r3, [sp, #16]
  401c36:	9503      	str	r5, [sp, #12]
  401c38:	af10      	add	r7, sp, #64	; 0x40
  401c3a:	2300      	movs	r3, #0
  401c3c:	9301      	str	r3, [sp, #4]
  401c3e:	e573      	b.n	401728 <_vfiprintf_r+0x254>
  401c40:	f898 3000 	ldrb.w	r3, [r8]
  401c44:	2800      	cmp	r0, #0
  401c46:	f47f acac 	bne.w	4015a2 <_vfiprintf_r+0xce>
  401c4a:	2101      	movs	r1, #1
  401c4c:	2020      	movs	r0, #32
  401c4e:	e4a8      	b.n	4015a2 <_vfiprintf_r+0xce>
  401c50:	f046 0601 	orr.w	r6, r6, #1
  401c54:	f898 3000 	ldrb.w	r3, [r8]
  401c58:	e4a3      	b.n	4015a2 <_vfiprintf_r+0xce>
  401c5a:	9406      	str	r4, [sp, #24]
  401c5c:	2900      	cmp	r1, #0
  401c5e:	f040 830c 	bne.w	40227a <_vfiprintf_r+0xda6>
  401c62:	06b2      	lsls	r2, r6, #26
  401c64:	488e      	ldr	r0, [pc, #568]	; (401ea0 <_vfiprintf_r+0x9cc>)
  401c66:	d4bd      	bmi.n	401be4 <_vfiprintf_r+0x710>
  401c68:	9904      	ldr	r1, [sp, #16]
  401c6a:	06f7      	lsls	r7, r6, #27
  401c6c:	460a      	mov	r2, r1
  401c6e:	f100 819d 	bmi.w	401fac <_vfiprintf_r+0xad8>
  401c72:	0675      	lsls	r5, r6, #25
  401c74:	f140 819a 	bpl.w	401fac <_vfiprintf_r+0xad8>
  401c78:	3204      	adds	r2, #4
  401c7a:	880c      	ldrh	r4, [r1, #0]
  401c7c:	9204      	str	r2, [sp, #16]
  401c7e:	2500      	movs	r5, #0
  401c80:	e7b9      	b.n	401bf6 <_vfiprintf_r+0x722>
  401c82:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c86:	f898 3000 	ldrb.w	r3, [r8]
  401c8a:	e48a      	b.n	4015a2 <_vfiprintf_r+0xce>
  401c8c:	f898 3000 	ldrb.w	r3, [r8]
  401c90:	2b6c      	cmp	r3, #108	; 0x6c
  401c92:	bf03      	ittte	eq
  401c94:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  401c98:	f046 0620 	orreq.w	r6, r6, #32
  401c9c:	f108 0801 	addeq.w	r8, r8, #1
  401ca0:	f046 0610 	orrne.w	r6, r6, #16
  401ca4:	e47d      	b.n	4015a2 <_vfiprintf_r+0xce>
  401ca6:	2900      	cmp	r1, #0
  401ca8:	f040 8309 	bne.w	4022be <_vfiprintf_r+0xdea>
  401cac:	06b4      	lsls	r4, r6, #26
  401cae:	f140 821c 	bpl.w	4020ea <_vfiprintf_r+0xc16>
  401cb2:	9a04      	ldr	r2, [sp, #16]
  401cb4:	9902      	ldr	r1, [sp, #8]
  401cb6:	6813      	ldr	r3, [r2, #0]
  401cb8:	17cd      	asrs	r5, r1, #31
  401cba:	4608      	mov	r0, r1
  401cbc:	3204      	adds	r2, #4
  401cbe:	4629      	mov	r1, r5
  401cc0:	9204      	str	r2, [sp, #16]
  401cc2:	e9c3 0100 	strd	r0, r1, [r3]
  401cc6:	e436      	b.n	401536 <_vfiprintf_r+0x62>
  401cc8:	9406      	str	r4, [sp, #24]
  401cca:	2900      	cmp	r1, #0
  401ccc:	f43f ae43 	beq.w	401956 <_vfiprintf_r+0x482>
  401cd0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401cd4:	e63f      	b.n	401956 <_vfiprintf_r+0x482>
  401cd6:	9406      	str	r4, [sp, #24]
  401cd8:	2900      	cmp	r1, #0
  401cda:	f040 82ed 	bne.w	4022b8 <_vfiprintf_r+0xde4>
  401cde:	2b00      	cmp	r3, #0
  401ce0:	f000 808f 	beq.w	401e02 <_vfiprintf_r+0x92e>
  401ce4:	2501      	movs	r5, #1
  401ce6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401cea:	f04f 0300 	mov.w	r3, #0
  401cee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401cf2:	9503      	str	r5, [sp, #12]
  401cf4:	af10      	add	r7, sp, #64	; 0x40
  401cf6:	e7a0      	b.n	401c3a <_vfiprintf_r+0x766>
  401cf8:	9304      	str	r3, [sp, #16]
  401cfa:	f04f 0900 	mov.w	r9, #0
  401cfe:	e696      	b.n	401a2e <_vfiprintf_r+0x55a>
  401d00:	aa0d      	add	r2, sp, #52	; 0x34
  401d02:	9900      	ldr	r1, [sp, #0]
  401d04:	9309      	str	r3, [sp, #36]	; 0x24
  401d06:	4648      	mov	r0, r9
  401d08:	f7ff fba8 	bl	40145c <__sprint_r.part.0>
  401d0c:	2800      	cmp	r0, #0
  401d0e:	d17f      	bne.n	401e10 <_vfiprintf_r+0x93c>
  401d10:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d16:	f100 0e01 	add.w	lr, r0, #1
  401d1a:	46dc      	mov	ip, fp
  401d1c:	e529      	b.n	401772 <_vfiprintf_r+0x29e>
  401d1e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d22:	f100 0e01 	add.w	lr, r0, #1
  401d26:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401d2a:	2b00      	cmp	r3, #0
  401d2c:	f43f ad50 	beq.w	4017d0 <_vfiprintf_r+0x2fc>
  401d30:	3201      	adds	r2, #1
  401d32:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d36:	2301      	movs	r3, #1
  401d38:	f1be 0f07 	cmp.w	lr, #7
  401d3c:	920f      	str	r2, [sp, #60]	; 0x3c
  401d3e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401d42:	e88a 000a 	stmia.w	sl, {r1, r3}
  401d46:	f340 80bf 	ble.w	401ec8 <_vfiprintf_r+0x9f4>
  401d4a:	2a00      	cmp	r2, #0
  401d4c:	f040 814e 	bne.w	401fec <_vfiprintf_r+0xb18>
  401d50:	9907      	ldr	r1, [sp, #28]
  401d52:	2900      	cmp	r1, #0
  401d54:	f040 80be 	bne.w	401ed4 <_vfiprintf_r+0xa00>
  401d58:	469e      	mov	lr, r3
  401d5a:	4610      	mov	r0, r2
  401d5c:	46da      	mov	sl, fp
  401d5e:	9b08      	ldr	r3, [sp, #32]
  401d60:	2b80      	cmp	r3, #128	; 0x80
  401d62:	f43f ad50 	beq.w	401806 <_vfiprintf_r+0x332>
  401d66:	9b01      	ldr	r3, [sp, #4]
  401d68:	9903      	ldr	r1, [sp, #12]
  401d6a:	1a5c      	subs	r4, r3, r1
  401d6c:	2c00      	cmp	r4, #0
  401d6e:	f77f ad93 	ble.w	401898 <_vfiprintf_r+0x3c4>
  401d72:	2c10      	cmp	r4, #16
  401d74:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401ea4 <_vfiprintf_r+0x9d0>
  401d78:	dd25      	ble.n	401dc6 <_vfiprintf_r+0x8f2>
  401d7a:	46d4      	mov	ip, sl
  401d7c:	2310      	movs	r3, #16
  401d7e:	46c2      	mov	sl, r8
  401d80:	46a8      	mov	r8, r5
  401d82:	464d      	mov	r5, r9
  401d84:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401d88:	e007      	b.n	401d9a <_vfiprintf_r+0x8c6>
  401d8a:	f100 0e02 	add.w	lr, r0, #2
  401d8e:	f10c 0c08 	add.w	ip, ip, #8
  401d92:	4608      	mov	r0, r1
  401d94:	3c10      	subs	r4, #16
  401d96:	2c10      	cmp	r4, #16
  401d98:	dd11      	ble.n	401dbe <_vfiprintf_r+0x8ea>
  401d9a:	1c41      	adds	r1, r0, #1
  401d9c:	3210      	adds	r2, #16
  401d9e:	2907      	cmp	r1, #7
  401da0:	920f      	str	r2, [sp, #60]	; 0x3c
  401da2:	f8cc 5000 	str.w	r5, [ip]
  401da6:	f8cc 3004 	str.w	r3, [ip, #4]
  401daa:	910e      	str	r1, [sp, #56]	; 0x38
  401dac:	dded      	ble.n	401d8a <_vfiprintf_r+0x8b6>
  401dae:	b9d2      	cbnz	r2, 401de6 <_vfiprintf_r+0x912>
  401db0:	3c10      	subs	r4, #16
  401db2:	2c10      	cmp	r4, #16
  401db4:	f04f 0e01 	mov.w	lr, #1
  401db8:	4610      	mov	r0, r2
  401dba:	46dc      	mov	ip, fp
  401dbc:	dced      	bgt.n	401d9a <_vfiprintf_r+0x8c6>
  401dbe:	46a9      	mov	r9, r5
  401dc0:	4645      	mov	r5, r8
  401dc2:	46d0      	mov	r8, sl
  401dc4:	46e2      	mov	sl, ip
  401dc6:	4422      	add	r2, r4
  401dc8:	f1be 0f07 	cmp.w	lr, #7
  401dcc:	920f      	str	r2, [sp, #60]	; 0x3c
  401dce:	f8ca 9000 	str.w	r9, [sl]
  401dd2:	f8ca 4004 	str.w	r4, [sl, #4]
  401dd6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401dda:	dc2e      	bgt.n	401e3a <_vfiprintf_r+0x966>
  401ddc:	f10a 0a08 	add.w	sl, sl, #8
  401de0:	f10e 0e01 	add.w	lr, lr, #1
  401de4:	e558      	b.n	401898 <_vfiprintf_r+0x3c4>
  401de6:	aa0d      	add	r2, sp, #52	; 0x34
  401de8:	9900      	ldr	r1, [sp, #0]
  401dea:	9301      	str	r3, [sp, #4]
  401dec:	4648      	mov	r0, r9
  401dee:	f7ff fb35 	bl	40145c <__sprint_r.part.0>
  401df2:	b968      	cbnz	r0, 401e10 <_vfiprintf_r+0x93c>
  401df4:	980e      	ldr	r0, [sp, #56]	; 0x38
  401df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401df8:	9b01      	ldr	r3, [sp, #4]
  401dfa:	f100 0e01 	add.w	lr, r0, #1
  401dfe:	46dc      	mov	ip, fp
  401e00:	e7c8      	b.n	401d94 <_vfiprintf_r+0x8c0>
  401e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401e04:	b123      	cbz	r3, 401e10 <_vfiprintf_r+0x93c>
  401e06:	9805      	ldr	r0, [sp, #20]
  401e08:	9900      	ldr	r1, [sp, #0]
  401e0a:	aa0d      	add	r2, sp, #52	; 0x34
  401e0c:	f7ff fb26 	bl	40145c <__sprint_r.part.0>
  401e10:	9b00      	ldr	r3, [sp, #0]
  401e12:	899b      	ldrh	r3, [r3, #12]
  401e14:	065a      	lsls	r2, r3, #25
  401e16:	f100 818b 	bmi.w	402130 <_vfiprintf_r+0xc5c>
  401e1a:	9802      	ldr	r0, [sp, #8]
  401e1c:	b02b      	add	sp, #172	; 0xac
  401e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e22:	aa0d      	add	r2, sp, #52	; 0x34
  401e24:	9900      	ldr	r1, [sp, #0]
  401e26:	4648      	mov	r0, r9
  401e28:	f7ff fb18 	bl	40145c <__sprint_r.part.0>
  401e2c:	2800      	cmp	r0, #0
  401e2e:	d1ef      	bne.n	401e10 <_vfiprintf_r+0x93c>
  401e30:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e34:	1c48      	adds	r0, r1, #1
  401e36:	46da      	mov	sl, fp
  401e38:	e555      	b.n	4018e6 <_vfiprintf_r+0x412>
  401e3a:	2a00      	cmp	r2, #0
  401e3c:	f040 80fb 	bne.w	402036 <_vfiprintf_r+0xb62>
  401e40:	9a03      	ldr	r2, [sp, #12]
  401e42:	921b      	str	r2, [sp, #108]	; 0x6c
  401e44:	2301      	movs	r3, #1
  401e46:	920f      	str	r2, [sp, #60]	; 0x3c
  401e48:	971a      	str	r7, [sp, #104]	; 0x68
  401e4a:	930e      	str	r3, [sp, #56]	; 0x38
  401e4c:	46da      	mov	sl, fp
  401e4e:	f10a 0a08 	add.w	sl, sl, #8
  401e52:	0771      	lsls	r1, r6, #29
  401e54:	d504      	bpl.n	401e60 <_vfiprintf_r+0x98c>
  401e56:	9b06      	ldr	r3, [sp, #24]
  401e58:	1b5c      	subs	r4, r3, r5
  401e5a:	2c00      	cmp	r4, #0
  401e5c:	f73f ad34 	bgt.w	4018c8 <_vfiprintf_r+0x3f4>
  401e60:	9b02      	ldr	r3, [sp, #8]
  401e62:	9906      	ldr	r1, [sp, #24]
  401e64:	42a9      	cmp	r1, r5
  401e66:	bfac      	ite	ge
  401e68:	185b      	addge	r3, r3, r1
  401e6a:	195b      	addlt	r3, r3, r5
  401e6c:	9302      	str	r3, [sp, #8]
  401e6e:	2a00      	cmp	r2, #0
  401e70:	f040 80b3 	bne.w	401fda <_vfiprintf_r+0xb06>
  401e74:	2300      	movs	r3, #0
  401e76:	930e      	str	r3, [sp, #56]	; 0x38
  401e78:	46da      	mov	sl, fp
  401e7a:	f7ff bb5c 	b.w	401536 <_vfiprintf_r+0x62>
  401e7e:	aa0d      	add	r2, sp, #52	; 0x34
  401e80:	9900      	ldr	r1, [sp, #0]
  401e82:	9307      	str	r3, [sp, #28]
  401e84:	4648      	mov	r0, r9
  401e86:	f7ff fae9 	bl	40145c <__sprint_r.part.0>
  401e8a:	2800      	cmp	r0, #0
  401e8c:	d1c0      	bne.n	401e10 <_vfiprintf_r+0x93c>
  401e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e92:	9b07      	ldr	r3, [sp, #28]
  401e94:	f100 0c01 	add.w	ip, r0, #1
  401e98:	46de      	mov	lr, fp
  401e9a:	e4cb      	b.n	401834 <_vfiprintf_r+0x360>
  401e9c:	00404060 	.word	0x00404060
  401ea0:	00404074 	.word	0x00404074
  401ea4:	00404050 	.word	0x00404050
  401ea8:	2a00      	cmp	r2, #0
  401eaa:	f040 8133 	bne.w	402114 <_vfiprintf_r+0xc40>
  401eae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401eb2:	2b00      	cmp	r3, #0
  401eb4:	f000 80f5 	beq.w	4020a2 <_vfiprintf_r+0xbce>
  401eb8:	2301      	movs	r3, #1
  401eba:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401ebe:	461a      	mov	r2, r3
  401ec0:	931b      	str	r3, [sp, #108]	; 0x6c
  401ec2:	469e      	mov	lr, r3
  401ec4:	911a      	str	r1, [sp, #104]	; 0x68
  401ec6:	46da      	mov	sl, fp
  401ec8:	4670      	mov	r0, lr
  401eca:	f10a 0a08 	add.w	sl, sl, #8
  401ece:	f10e 0e01 	add.w	lr, lr, #1
  401ed2:	e47d      	b.n	4017d0 <_vfiprintf_r+0x2fc>
  401ed4:	a90c      	add	r1, sp, #48	; 0x30
  401ed6:	2202      	movs	r2, #2
  401ed8:	469e      	mov	lr, r3
  401eda:	911a      	str	r1, [sp, #104]	; 0x68
  401edc:	921b      	str	r2, [sp, #108]	; 0x6c
  401ede:	46da      	mov	sl, fp
  401ee0:	4670      	mov	r0, lr
  401ee2:	f10a 0a08 	add.w	sl, sl, #8
  401ee6:	f10e 0e01 	add.w	lr, lr, #1
  401eea:	e738      	b.n	401d5e <_vfiprintf_r+0x88a>
  401eec:	9b01      	ldr	r3, [sp, #4]
  401eee:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401ef2:	2b00      	cmp	r3, #0
  401ef4:	f2c0 812a 	blt.w	40214c <_vfiprintf_r+0xc78>
  401ef8:	ea54 0305 	orrs.w	r3, r4, r5
  401efc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401f00:	f43f abff 	beq.w	401702 <_vfiprintf_r+0x22e>
  401f04:	465f      	mov	r7, fp
  401f06:	0923      	lsrs	r3, r4, #4
  401f08:	f004 010f 	and.w	r1, r4, #15
  401f0c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  401f10:	092a      	lsrs	r2, r5, #4
  401f12:	461c      	mov	r4, r3
  401f14:	4615      	mov	r5, r2
  401f16:	5c43      	ldrb	r3, [r0, r1]
  401f18:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401f1c:	ea54 0305 	orrs.w	r3, r4, r5
  401f20:	d1f1      	bne.n	401f06 <_vfiprintf_r+0xa32>
  401f22:	ebc7 030b 	rsb	r3, r7, fp
  401f26:	9303      	str	r3, [sp, #12]
  401f28:	f7ff bbf4 	b.w	401714 <_vfiprintf_r+0x240>
  401f2c:	aa0d      	add	r2, sp, #52	; 0x34
  401f2e:	9900      	ldr	r1, [sp, #0]
  401f30:	9805      	ldr	r0, [sp, #20]
  401f32:	f7ff fa93 	bl	40145c <__sprint_r.part.0>
  401f36:	2800      	cmp	r0, #0
  401f38:	f47f af6a 	bne.w	401e10 <_vfiprintf_r+0x93c>
  401f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f3e:	46da      	mov	sl, fp
  401f40:	e787      	b.n	401e52 <_vfiprintf_r+0x97e>
  401f42:	f04f 0900 	mov.w	r9, #0
  401f46:	2400      	movs	r4, #0
  401f48:	2500      	movs	r5, #0
  401f4a:	e7db      	b.n	401f04 <_vfiprintf_r+0xa30>
  401f4c:	f016 0210 	ands.w	r2, r6, #16
  401f50:	f000 80b2 	beq.w	4020b8 <_vfiprintf_r+0xbe4>
  401f54:	9904      	ldr	r1, [sp, #16]
  401f56:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401f5a:	460a      	mov	r2, r1
  401f5c:	680c      	ldr	r4, [r1, #0]
  401f5e:	9901      	ldr	r1, [sp, #4]
  401f60:	2900      	cmp	r1, #0
  401f62:	f102 0204 	add.w	r2, r2, #4
  401f66:	f04f 0500 	mov.w	r5, #0
  401f6a:	f2c0 8159 	blt.w	402220 <_vfiprintf_r+0xd4c>
  401f6e:	ea54 0105 	orrs.w	r1, r4, r5
  401f72:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401f76:	9204      	str	r2, [sp, #16]
  401f78:	f43f ad51 	beq.w	401a1e <_vfiprintf_r+0x54a>
  401f7c:	4699      	mov	r9, r3
  401f7e:	e556      	b.n	401a2e <_vfiprintf_r+0x55a>
  401f80:	06f7      	lsls	r7, r6, #27
  401f82:	d40a      	bmi.n	401f9a <_vfiprintf_r+0xac6>
  401f84:	0675      	lsls	r5, r6, #25
  401f86:	d508      	bpl.n	401f9a <_vfiprintf_r+0xac6>
  401f88:	9904      	ldr	r1, [sp, #16]
  401f8a:	f9b1 4000 	ldrsh.w	r4, [r1]
  401f8e:	3104      	adds	r1, #4
  401f90:	17e5      	asrs	r5, r4, #31
  401f92:	4622      	mov	r2, r4
  401f94:	462b      	mov	r3, r5
  401f96:	9104      	str	r1, [sp, #16]
  401f98:	e4ea      	b.n	401970 <_vfiprintf_r+0x49c>
  401f9a:	9a04      	ldr	r2, [sp, #16]
  401f9c:	6814      	ldr	r4, [r2, #0]
  401f9e:	4613      	mov	r3, r2
  401fa0:	3304      	adds	r3, #4
  401fa2:	17e5      	asrs	r5, r4, #31
  401fa4:	9304      	str	r3, [sp, #16]
  401fa6:	4622      	mov	r2, r4
  401fa8:	462b      	mov	r3, r5
  401faa:	e4e1      	b.n	401970 <_vfiprintf_r+0x49c>
  401fac:	6814      	ldr	r4, [r2, #0]
  401fae:	3204      	adds	r2, #4
  401fb0:	9204      	str	r2, [sp, #16]
  401fb2:	2500      	movs	r5, #0
  401fb4:	e61f      	b.n	401bf6 <_vfiprintf_r+0x722>
  401fb6:	f04f 0900 	mov.w	r9, #0
  401fba:	ea54 0305 	orrs.w	r3, r4, r5
  401fbe:	f47f ace8 	bne.w	401992 <_vfiprintf_r+0x4be>
  401fc2:	e5d8      	b.n	401b76 <_vfiprintf_r+0x6a2>
  401fc4:	aa0d      	add	r2, sp, #52	; 0x34
  401fc6:	9900      	ldr	r1, [sp, #0]
  401fc8:	9805      	ldr	r0, [sp, #20]
  401fca:	f7ff fa47 	bl	40145c <__sprint_r.part.0>
  401fce:	2800      	cmp	r0, #0
  401fd0:	f47f af1e 	bne.w	401e10 <_vfiprintf_r+0x93c>
  401fd4:	46da      	mov	sl, fp
  401fd6:	f7ff bb48 	b.w	40166a <_vfiprintf_r+0x196>
  401fda:	aa0d      	add	r2, sp, #52	; 0x34
  401fdc:	9900      	ldr	r1, [sp, #0]
  401fde:	9805      	ldr	r0, [sp, #20]
  401fe0:	f7ff fa3c 	bl	40145c <__sprint_r.part.0>
  401fe4:	2800      	cmp	r0, #0
  401fe6:	f43f af45 	beq.w	401e74 <_vfiprintf_r+0x9a0>
  401fea:	e711      	b.n	401e10 <_vfiprintf_r+0x93c>
  401fec:	aa0d      	add	r2, sp, #52	; 0x34
  401fee:	9900      	ldr	r1, [sp, #0]
  401ff0:	9805      	ldr	r0, [sp, #20]
  401ff2:	f7ff fa33 	bl	40145c <__sprint_r.part.0>
  401ff6:	2800      	cmp	r0, #0
  401ff8:	f47f af0a 	bne.w	401e10 <_vfiprintf_r+0x93c>
  401ffc:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402000:	f100 0e01 	add.w	lr, r0, #1
  402004:	46da      	mov	sl, fp
  402006:	f7ff bbe3 	b.w	4017d0 <_vfiprintf_r+0x2fc>
  40200a:	aa0d      	add	r2, sp, #52	; 0x34
  40200c:	9900      	ldr	r1, [sp, #0]
  40200e:	9805      	ldr	r0, [sp, #20]
  402010:	f7ff fa24 	bl	40145c <__sprint_r.part.0>
  402014:	2800      	cmp	r0, #0
  402016:	f47f aefb 	bne.w	401e10 <_vfiprintf_r+0x93c>
  40201a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40201c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40201e:	f100 0e01 	add.w	lr, r0, #1
  402022:	46da      	mov	sl, fp
  402024:	e69b      	b.n	401d5e <_vfiprintf_r+0x88a>
  402026:	2a00      	cmp	r2, #0
  402028:	f040 80d8 	bne.w	4021dc <_vfiprintf_r+0xd08>
  40202c:	f04f 0e01 	mov.w	lr, #1
  402030:	4610      	mov	r0, r2
  402032:	46da      	mov	sl, fp
  402034:	e697      	b.n	401d66 <_vfiprintf_r+0x892>
  402036:	aa0d      	add	r2, sp, #52	; 0x34
  402038:	9900      	ldr	r1, [sp, #0]
  40203a:	9805      	ldr	r0, [sp, #20]
  40203c:	f7ff fa0e 	bl	40145c <__sprint_r.part.0>
  402040:	2800      	cmp	r0, #0
  402042:	f47f aee5 	bne.w	401e10 <_vfiprintf_r+0x93c>
  402046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40204a:	f103 0e01 	add.w	lr, r3, #1
  40204e:	46da      	mov	sl, fp
  402050:	e422      	b.n	401898 <_vfiprintf_r+0x3c4>
  402052:	2230      	movs	r2, #48	; 0x30
  402054:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  402058:	9a01      	ldr	r2, [sp, #4]
  40205a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40205e:	2a00      	cmp	r2, #0
  402060:	f04f 0300 	mov.w	r3, #0
  402064:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402068:	f046 0302 	orr.w	r3, r6, #2
  40206c:	f2c0 80cb 	blt.w	402206 <_vfiprintf_r+0xd32>
  402070:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402074:	f046 0602 	orr.w	r6, r6, #2
  402078:	f04f 0900 	mov.w	r9, #0
  40207c:	e742      	b.n	401f04 <_vfiprintf_r+0xa30>
  40207e:	f04f 0900 	mov.w	r9, #0
  402082:	4890      	ldr	r0, [pc, #576]	; (4022c4 <_vfiprintf_r+0xdf0>)
  402084:	e73e      	b.n	401f04 <_vfiprintf_r+0xa30>
  402086:	9b01      	ldr	r3, [sp, #4]
  402088:	4264      	negs	r4, r4
  40208a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40208e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402092:	2b00      	cmp	r3, #0
  402094:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402098:	f6ff ac7b 	blt.w	401992 <_vfiprintf_r+0x4be>
  40209c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020a0:	e477      	b.n	401992 <_vfiprintf_r+0x4be>
  4020a2:	9b07      	ldr	r3, [sp, #28]
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	d072      	beq.n	40218e <_vfiprintf_r+0xcba>
  4020a8:	ab0c      	add	r3, sp, #48	; 0x30
  4020aa:	2202      	movs	r2, #2
  4020ac:	931a      	str	r3, [sp, #104]	; 0x68
  4020ae:	921b      	str	r2, [sp, #108]	; 0x6c
  4020b0:	f04f 0e01 	mov.w	lr, #1
  4020b4:	46da      	mov	sl, fp
  4020b6:	e713      	b.n	401ee0 <_vfiprintf_r+0xa0c>
  4020b8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4020bc:	d048      	beq.n	402150 <_vfiprintf_r+0xc7c>
  4020be:	9904      	ldr	r1, [sp, #16]
  4020c0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4020c4:	460b      	mov	r3, r1
  4020c6:	880c      	ldrh	r4, [r1, #0]
  4020c8:	9901      	ldr	r1, [sp, #4]
  4020ca:	2900      	cmp	r1, #0
  4020cc:	f103 0304 	add.w	r3, r3, #4
  4020d0:	f04f 0500 	mov.w	r5, #0
  4020d4:	f6ff ae10 	blt.w	401cf8 <_vfiprintf_r+0x824>
  4020d8:	ea54 0105 	orrs.w	r1, r4, r5
  4020dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020e0:	9304      	str	r3, [sp, #16]
  4020e2:	f43f ac9c 	beq.w	401a1e <_vfiprintf_r+0x54a>
  4020e6:	4691      	mov	r9, r2
  4020e8:	e4a1      	b.n	401a2e <_vfiprintf_r+0x55a>
  4020ea:	06f0      	lsls	r0, r6, #27
  4020ec:	d40a      	bmi.n	402104 <_vfiprintf_r+0xc30>
  4020ee:	0671      	lsls	r1, r6, #25
  4020f0:	d508      	bpl.n	402104 <_vfiprintf_r+0xc30>
  4020f2:	9a04      	ldr	r2, [sp, #16]
  4020f4:	6813      	ldr	r3, [r2, #0]
  4020f6:	3204      	adds	r2, #4
  4020f8:	9204      	str	r2, [sp, #16]
  4020fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4020fe:	801a      	strh	r2, [r3, #0]
  402100:	f7ff ba19 	b.w	401536 <_vfiprintf_r+0x62>
  402104:	9a04      	ldr	r2, [sp, #16]
  402106:	6813      	ldr	r3, [r2, #0]
  402108:	3204      	adds	r2, #4
  40210a:	9204      	str	r2, [sp, #16]
  40210c:	9a02      	ldr	r2, [sp, #8]
  40210e:	601a      	str	r2, [r3, #0]
  402110:	f7ff ba11 	b.w	401536 <_vfiprintf_r+0x62>
  402114:	aa0d      	add	r2, sp, #52	; 0x34
  402116:	9900      	ldr	r1, [sp, #0]
  402118:	9805      	ldr	r0, [sp, #20]
  40211a:	f7ff f99f 	bl	40145c <__sprint_r.part.0>
  40211e:	2800      	cmp	r0, #0
  402120:	f47f ae76 	bne.w	401e10 <_vfiprintf_r+0x93c>
  402124:	980e      	ldr	r0, [sp, #56]	; 0x38
  402126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402128:	f100 0e01 	add.w	lr, r0, #1
  40212c:	46da      	mov	sl, fp
  40212e:	e5fa      	b.n	401d26 <_vfiprintf_r+0x852>
  402130:	f04f 30ff 	mov.w	r0, #4294967295
  402134:	f7ff bab6 	b.w	4016a4 <_vfiprintf_r+0x1d0>
  402138:	4862      	ldr	r0, [pc, #392]	; (4022c4 <_vfiprintf_r+0xdf0>)
  40213a:	4616      	mov	r6, r2
  40213c:	ea54 0205 	orrs.w	r2, r4, r5
  402140:	9304      	str	r3, [sp, #16]
  402142:	f04f 0900 	mov.w	r9, #0
  402146:	f47f aedd 	bne.w	401f04 <_vfiprintf_r+0xa30>
  40214a:	e6fc      	b.n	401f46 <_vfiprintf_r+0xa72>
  40214c:	9b04      	ldr	r3, [sp, #16]
  40214e:	e7f5      	b.n	40213c <_vfiprintf_r+0xc68>
  402150:	9a04      	ldr	r2, [sp, #16]
  402152:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402156:	4613      	mov	r3, r2
  402158:	6814      	ldr	r4, [r2, #0]
  40215a:	9a01      	ldr	r2, [sp, #4]
  40215c:	2a00      	cmp	r2, #0
  40215e:	f103 0304 	add.w	r3, r3, #4
  402162:	f04f 0500 	mov.w	r5, #0
  402166:	f6ff adc7 	blt.w	401cf8 <_vfiprintf_r+0x824>
  40216a:	ea54 0205 	orrs.w	r2, r4, r5
  40216e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402172:	9304      	str	r3, [sp, #16]
  402174:	f47f ac5b 	bne.w	401a2e <_vfiprintf_r+0x55a>
  402178:	e451      	b.n	401a1e <_vfiprintf_r+0x54a>
  40217a:	aa0d      	add	r2, sp, #52	; 0x34
  40217c:	9900      	ldr	r1, [sp, #0]
  40217e:	9805      	ldr	r0, [sp, #20]
  402180:	f7ff f96c 	bl	40145c <__sprint_r.part.0>
  402184:	2800      	cmp	r0, #0
  402186:	f47f ae43 	bne.w	401e10 <_vfiprintf_r+0x93c>
  40218a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40218c:	e668      	b.n	401e60 <_vfiprintf_r+0x98c>
  40218e:	4610      	mov	r0, r2
  402190:	f04f 0e01 	mov.w	lr, #1
  402194:	46da      	mov	sl, fp
  402196:	e5e6      	b.n	401d66 <_vfiprintf_r+0x892>
  402198:	9904      	ldr	r1, [sp, #16]
  40219a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40219e:	460a      	mov	r2, r1
  4021a0:	880c      	ldrh	r4, [r1, #0]
  4021a2:	9901      	ldr	r1, [sp, #4]
  4021a4:	2900      	cmp	r1, #0
  4021a6:	f102 0204 	add.w	r2, r2, #4
  4021aa:	f04f 0500 	mov.w	r5, #0
  4021ae:	db4e      	blt.n	40224e <_vfiprintf_r+0xd7a>
  4021b0:	ea54 0105 	orrs.w	r1, r4, r5
  4021b4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4021b8:	9204      	str	r2, [sp, #16]
  4021ba:	4699      	mov	r9, r3
  4021bc:	f47f abe9 	bne.w	401992 <_vfiprintf_r+0x4be>
  4021c0:	e4d4      	b.n	401b6c <_vfiprintf_r+0x698>
  4021c2:	9304      	str	r3, [sp, #16]
  4021c4:	e6f9      	b.n	401fba <_vfiprintf_r+0xae6>
  4021c6:	4638      	mov	r0, r7
  4021c8:	9404      	str	r4, [sp, #16]
  4021ca:	f7ff f8d9 	bl	401380 <strlen>
  4021ce:	2300      	movs	r3, #0
  4021d0:	9003      	str	r0, [sp, #12]
  4021d2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4021d6:	9301      	str	r3, [sp, #4]
  4021d8:	f7ff ba9c 	b.w	401714 <_vfiprintf_r+0x240>
  4021dc:	aa0d      	add	r2, sp, #52	; 0x34
  4021de:	9900      	ldr	r1, [sp, #0]
  4021e0:	9805      	ldr	r0, [sp, #20]
  4021e2:	f7ff f93b 	bl	40145c <__sprint_r.part.0>
  4021e6:	2800      	cmp	r0, #0
  4021e8:	f47f ae12 	bne.w	401e10 <_vfiprintf_r+0x93c>
  4021ec:	980e      	ldr	r0, [sp, #56]	; 0x38
  4021ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4021f0:	f100 0e01 	add.w	lr, r0, #1
  4021f4:	46da      	mov	sl, fp
  4021f6:	e5b6      	b.n	401d66 <_vfiprintf_r+0x892>
  4021f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4021fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4021fc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4022cc <_vfiprintf_r+0xdf8>
  402200:	3001      	adds	r0, #1
  402202:	f7ff bad2 	b.w	4017aa <_vfiprintf_r+0x2d6>
  402206:	461e      	mov	r6, r3
  402208:	f04f 0900 	mov.w	r9, #0
  40220c:	e67a      	b.n	401f04 <_vfiprintf_r+0xa30>
  40220e:	2b06      	cmp	r3, #6
  402210:	bf28      	it	cs
  402212:	2306      	movcs	r3, #6
  402214:	9303      	str	r3, [sp, #12]
  402216:	9404      	str	r4, [sp, #16]
  402218:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40221c:	4f2a      	ldr	r7, [pc, #168]	; (4022c8 <_vfiprintf_r+0xdf4>)
  40221e:	e50c      	b.n	401c3a <_vfiprintf_r+0x766>
  402220:	9204      	str	r2, [sp, #16]
  402222:	e56a      	b.n	401cfa <_vfiprintf_r+0x826>
  402224:	980e      	ldr	r0, [sp, #56]	; 0x38
  402226:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4022cc <_vfiprintf_r+0xdf8>
  40222a:	3001      	adds	r0, #1
  40222c:	f7ff bb73 	b.w	401916 <_vfiprintf_r+0x442>
  402230:	46f4      	mov	ip, lr
  402232:	f7ff bb1a 	b.w	40186a <_vfiprintf_r+0x396>
  402236:	9b01      	ldr	r3, [sp, #4]
  402238:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40223c:	9303      	str	r3, [sp, #12]
  40223e:	9404      	str	r4, [sp, #16]
  402240:	9001      	str	r0, [sp, #4]
  402242:	f7ff ba67 	b.w	401714 <_vfiprintf_r+0x240>
  402246:	2200      	movs	r2, #0
  402248:	9201      	str	r2, [sp, #4]
  40224a:	f7ff b9ac 	b.w	4015a6 <_vfiprintf_r+0xd2>
  40224e:	9204      	str	r2, [sp, #16]
  402250:	4699      	mov	r9, r3
  402252:	e6b2      	b.n	401fba <_vfiprintf_r+0xae6>
  402254:	9a04      	ldr	r2, [sp, #16]
  402256:	6813      	ldr	r3, [r2, #0]
  402258:	9301      	str	r3, [sp, #4]
  40225a:	3204      	adds	r2, #4
  40225c:	2b00      	cmp	r3, #0
  40225e:	9204      	str	r2, [sp, #16]
  402260:	f898 3001 	ldrb.w	r3, [r8, #1]
  402264:	46a8      	mov	r8, r5
  402266:	f6bf a99c 	bge.w	4015a2 <_vfiprintf_r+0xce>
  40226a:	f04f 32ff 	mov.w	r2, #4294967295
  40226e:	9201      	str	r2, [sp, #4]
  402270:	f7ff b997 	b.w	4015a2 <_vfiprintf_r+0xce>
  402274:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402278:	e48e      	b.n	401b98 <_vfiprintf_r+0x6c4>
  40227a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40227e:	e4f0      	b.n	401c62 <_vfiprintf_r+0x78e>
  402280:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402284:	e4ab      	b.n	401bde <_vfiprintf_r+0x70a>
  402286:	4699      	mov	r9, r3
  402288:	07f3      	lsls	r3, r6, #31
  40228a:	d505      	bpl.n	402298 <_vfiprintf_r+0xdc4>
  40228c:	af2a      	add	r7, sp, #168	; 0xa8
  40228e:	2330      	movs	r3, #48	; 0x30
  402290:	f807 3d41 	strb.w	r3, [r7, #-65]!
  402294:	f7ff bb97 	b.w	4019c6 <_vfiprintf_r+0x4f2>
  402298:	9b01      	ldr	r3, [sp, #4]
  40229a:	9303      	str	r3, [sp, #12]
  40229c:	465f      	mov	r7, fp
  40229e:	f7ff ba39 	b.w	401714 <_vfiprintf_r+0x240>
  4022a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022a6:	e443      	b.n	401b30 <_vfiprintf_r+0x65c>
  4022a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022ac:	f7ff bb9a 	b.w	4019e4 <_vfiprintf_r+0x510>
  4022b0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022b4:	f7ff bb4d 	b.w	401952 <_vfiprintf_r+0x47e>
  4022b8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022bc:	e50f      	b.n	401cde <_vfiprintf_r+0x80a>
  4022be:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4022c2:	e4f3      	b.n	401cac <_vfiprintf_r+0x7d8>
  4022c4:	00404074 	.word	0x00404074
  4022c8:	00404088 	.word	0x00404088
  4022cc:	00404090 	.word	0x00404090

004022d0 <__sbprintf>:
  4022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4022d2:	460c      	mov	r4, r1
  4022d4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4022d8:	8989      	ldrh	r1, [r1, #12]
  4022da:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4022dc:	89e5      	ldrh	r5, [r4, #14]
  4022de:	9619      	str	r6, [sp, #100]	; 0x64
  4022e0:	f021 0102 	bic.w	r1, r1, #2
  4022e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4022e6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4022ea:	2500      	movs	r5, #0
  4022ec:	69e7      	ldr	r7, [r4, #28]
  4022ee:	f8ad 100c 	strh.w	r1, [sp, #12]
  4022f2:	9609      	str	r6, [sp, #36]	; 0x24
  4022f4:	9506      	str	r5, [sp, #24]
  4022f6:	ae1a      	add	r6, sp, #104	; 0x68
  4022f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4022fc:	4669      	mov	r1, sp
  4022fe:	9600      	str	r6, [sp, #0]
  402300:	9604      	str	r6, [sp, #16]
  402302:	9502      	str	r5, [sp, #8]
  402304:	9505      	str	r5, [sp, #20]
  402306:	9707      	str	r7, [sp, #28]
  402308:	4606      	mov	r6, r0
  40230a:	f7ff f8e3 	bl	4014d4 <_vfiprintf_r>
  40230e:	1e05      	subs	r5, r0, #0
  402310:	db07      	blt.n	402322 <__sbprintf+0x52>
  402312:	4630      	mov	r0, r6
  402314:	4669      	mov	r1, sp
  402316:	f000 f929 	bl	40256c <_fflush_r>
  40231a:	2800      	cmp	r0, #0
  40231c:	bf18      	it	ne
  40231e:	f04f 35ff 	movne.w	r5, #4294967295
  402322:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402326:	065b      	lsls	r3, r3, #25
  402328:	d503      	bpl.n	402332 <__sbprintf+0x62>
  40232a:	89a3      	ldrh	r3, [r4, #12]
  40232c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402330:	81a3      	strh	r3, [r4, #12]
  402332:	4628      	mov	r0, r5
  402334:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40233a:	bf00      	nop

0040233c <__swsetup_r>:
  40233c:	b538      	push	{r3, r4, r5, lr}
  40233e:	4b30      	ldr	r3, [pc, #192]	; (402400 <__swsetup_r+0xc4>)
  402340:	681b      	ldr	r3, [r3, #0]
  402342:	4605      	mov	r5, r0
  402344:	460c      	mov	r4, r1
  402346:	b113      	cbz	r3, 40234e <__swsetup_r+0x12>
  402348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40234a:	2a00      	cmp	r2, #0
  40234c:	d038      	beq.n	4023c0 <__swsetup_r+0x84>
  40234e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402352:	b293      	uxth	r3, r2
  402354:	0718      	lsls	r0, r3, #28
  402356:	d50c      	bpl.n	402372 <__swsetup_r+0x36>
  402358:	6920      	ldr	r0, [r4, #16]
  40235a:	b1a8      	cbz	r0, 402388 <__swsetup_r+0x4c>
  40235c:	f013 0201 	ands.w	r2, r3, #1
  402360:	d01e      	beq.n	4023a0 <__swsetup_r+0x64>
  402362:	6963      	ldr	r3, [r4, #20]
  402364:	2200      	movs	r2, #0
  402366:	425b      	negs	r3, r3
  402368:	61a3      	str	r3, [r4, #24]
  40236a:	60a2      	str	r2, [r4, #8]
  40236c:	b1f0      	cbz	r0, 4023ac <__swsetup_r+0x70>
  40236e:	2000      	movs	r0, #0
  402370:	bd38      	pop	{r3, r4, r5, pc}
  402372:	06d9      	lsls	r1, r3, #27
  402374:	d53c      	bpl.n	4023f0 <__swsetup_r+0xb4>
  402376:	0758      	lsls	r0, r3, #29
  402378:	d426      	bmi.n	4023c8 <__swsetup_r+0x8c>
  40237a:	6920      	ldr	r0, [r4, #16]
  40237c:	f042 0308 	orr.w	r3, r2, #8
  402380:	81a3      	strh	r3, [r4, #12]
  402382:	b29b      	uxth	r3, r3
  402384:	2800      	cmp	r0, #0
  402386:	d1e9      	bne.n	40235c <__swsetup_r+0x20>
  402388:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40238c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402390:	d0e4      	beq.n	40235c <__swsetup_r+0x20>
  402392:	4628      	mov	r0, r5
  402394:	4621      	mov	r1, r4
  402396:	f000 fd15 	bl	402dc4 <__smakebuf_r>
  40239a:	89a3      	ldrh	r3, [r4, #12]
  40239c:	6920      	ldr	r0, [r4, #16]
  40239e:	e7dd      	b.n	40235c <__swsetup_r+0x20>
  4023a0:	0799      	lsls	r1, r3, #30
  4023a2:	bf58      	it	pl
  4023a4:	6962      	ldrpl	r2, [r4, #20]
  4023a6:	60a2      	str	r2, [r4, #8]
  4023a8:	2800      	cmp	r0, #0
  4023aa:	d1e0      	bne.n	40236e <__swsetup_r+0x32>
  4023ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023b0:	061a      	lsls	r2, r3, #24
  4023b2:	d5dd      	bpl.n	402370 <__swsetup_r+0x34>
  4023b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023b8:	81a3      	strh	r3, [r4, #12]
  4023ba:	f04f 30ff 	mov.w	r0, #4294967295
  4023be:	bd38      	pop	{r3, r4, r5, pc}
  4023c0:	4618      	mov	r0, r3
  4023c2:	f000 f967 	bl	402694 <__sinit>
  4023c6:	e7c2      	b.n	40234e <__swsetup_r+0x12>
  4023c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4023ca:	b151      	cbz	r1, 4023e2 <__swsetup_r+0xa6>
  4023cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4023d0:	4299      	cmp	r1, r3
  4023d2:	d004      	beq.n	4023de <__swsetup_r+0xa2>
  4023d4:	4628      	mov	r0, r5
  4023d6:	f000 fa27 	bl	402828 <_free_r>
  4023da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4023de:	2300      	movs	r3, #0
  4023e0:	6323      	str	r3, [r4, #48]	; 0x30
  4023e2:	2300      	movs	r3, #0
  4023e4:	6920      	ldr	r0, [r4, #16]
  4023e6:	6063      	str	r3, [r4, #4]
  4023e8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4023ec:	6020      	str	r0, [r4, #0]
  4023ee:	e7c5      	b.n	40237c <__swsetup_r+0x40>
  4023f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4023f4:	2309      	movs	r3, #9
  4023f6:	602b      	str	r3, [r5, #0]
  4023f8:	f04f 30ff 	mov.w	r0, #4294967295
  4023fc:	81a2      	strh	r2, [r4, #12]
  4023fe:	bd38      	pop	{r3, r4, r5, pc}
  402400:	20000430 	.word	0x20000430

00402404 <register_fini>:
  402404:	4b02      	ldr	r3, [pc, #8]	; (402410 <register_fini+0xc>)
  402406:	b113      	cbz	r3, 40240e <register_fini+0xa>
  402408:	4802      	ldr	r0, [pc, #8]	; (402414 <register_fini+0x10>)
  40240a:	f000 b805 	b.w	402418 <atexit>
  40240e:	4770      	bx	lr
  402410:	00000000 	.word	0x00000000
  402414:	004026a9 	.word	0x004026a9

00402418 <atexit>:
  402418:	2300      	movs	r3, #0
  40241a:	4601      	mov	r1, r0
  40241c:	461a      	mov	r2, r3
  40241e:	4618      	mov	r0, r3
  402420:	f001 bb14 	b.w	403a4c <__register_exitproc>

00402424 <__sflush_r>:
  402424:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402428:	b29a      	uxth	r2, r3
  40242a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40242e:	460d      	mov	r5, r1
  402430:	0711      	lsls	r1, r2, #28
  402432:	4680      	mov	r8, r0
  402434:	d43c      	bmi.n	4024b0 <__sflush_r+0x8c>
  402436:	686a      	ldr	r2, [r5, #4]
  402438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40243c:	2a00      	cmp	r2, #0
  40243e:	81ab      	strh	r3, [r5, #12]
  402440:	dd73      	ble.n	40252a <__sflush_r+0x106>
  402442:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402444:	2c00      	cmp	r4, #0
  402446:	d04b      	beq.n	4024e0 <__sflush_r+0xbc>
  402448:	b29b      	uxth	r3, r3
  40244a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40244e:	2100      	movs	r1, #0
  402450:	b292      	uxth	r2, r2
  402452:	f8d8 6000 	ldr.w	r6, [r8]
  402456:	f8c8 1000 	str.w	r1, [r8]
  40245a:	2a00      	cmp	r2, #0
  40245c:	d069      	beq.n	402532 <__sflush_r+0x10e>
  40245e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402460:	075f      	lsls	r7, r3, #29
  402462:	d505      	bpl.n	402470 <__sflush_r+0x4c>
  402464:	6869      	ldr	r1, [r5, #4]
  402466:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402468:	1a52      	subs	r2, r2, r1
  40246a:	b10b      	cbz	r3, 402470 <__sflush_r+0x4c>
  40246c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40246e:	1ad2      	subs	r2, r2, r3
  402470:	2300      	movs	r3, #0
  402472:	69e9      	ldr	r1, [r5, #28]
  402474:	4640      	mov	r0, r8
  402476:	47a0      	blx	r4
  402478:	1c44      	adds	r4, r0, #1
  40247a:	d03c      	beq.n	4024f6 <__sflush_r+0xd2>
  40247c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402480:	692a      	ldr	r2, [r5, #16]
  402482:	602a      	str	r2, [r5, #0]
  402484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402488:	2200      	movs	r2, #0
  40248a:	81ab      	strh	r3, [r5, #12]
  40248c:	04db      	lsls	r3, r3, #19
  40248e:	606a      	str	r2, [r5, #4]
  402490:	d449      	bmi.n	402526 <__sflush_r+0x102>
  402492:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402494:	f8c8 6000 	str.w	r6, [r8]
  402498:	b311      	cbz	r1, 4024e0 <__sflush_r+0xbc>
  40249a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40249e:	4299      	cmp	r1, r3
  4024a0:	d002      	beq.n	4024a8 <__sflush_r+0x84>
  4024a2:	4640      	mov	r0, r8
  4024a4:	f000 f9c0 	bl	402828 <_free_r>
  4024a8:	2000      	movs	r0, #0
  4024aa:	6328      	str	r0, [r5, #48]	; 0x30
  4024ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024b0:	692e      	ldr	r6, [r5, #16]
  4024b2:	b1ae      	cbz	r6, 4024e0 <__sflush_r+0xbc>
  4024b4:	682c      	ldr	r4, [r5, #0]
  4024b6:	602e      	str	r6, [r5, #0]
  4024b8:	0790      	lsls	r0, r2, #30
  4024ba:	bf0c      	ite	eq
  4024bc:	696b      	ldreq	r3, [r5, #20]
  4024be:	2300      	movne	r3, #0
  4024c0:	1ba4      	subs	r4, r4, r6
  4024c2:	60ab      	str	r3, [r5, #8]
  4024c4:	e00a      	b.n	4024dc <__sflush_r+0xb8>
  4024c6:	4623      	mov	r3, r4
  4024c8:	4632      	mov	r2, r6
  4024ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4024cc:	69e9      	ldr	r1, [r5, #28]
  4024ce:	4640      	mov	r0, r8
  4024d0:	47b8      	blx	r7
  4024d2:	2800      	cmp	r0, #0
  4024d4:	eba4 0400 	sub.w	r4, r4, r0
  4024d8:	4406      	add	r6, r0
  4024da:	dd04      	ble.n	4024e6 <__sflush_r+0xc2>
  4024dc:	2c00      	cmp	r4, #0
  4024de:	dcf2      	bgt.n	4024c6 <__sflush_r+0xa2>
  4024e0:	2000      	movs	r0, #0
  4024e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024e6:	89ab      	ldrh	r3, [r5, #12]
  4024e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024ec:	81ab      	strh	r3, [r5, #12]
  4024ee:	f04f 30ff 	mov.w	r0, #4294967295
  4024f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024f6:	f8d8 2000 	ldr.w	r2, [r8]
  4024fa:	2a1d      	cmp	r2, #29
  4024fc:	d8f3      	bhi.n	4024e6 <__sflush_r+0xc2>
  4024fe:	4b1a      	ldr	r3, [pc, #104]	; (402568 <__sflush_r+0x144>)
  402500:	40d3      	lsrs	r3, r2
  402502:	f003 0301 	and.w	r3, r3, #1
  402506:	f083 0401 	eor.w	r4, r3, #1
  40250a:	2b00      	cmp	r3, #0
  40250c:	d0eb      	beq.n	4024e6 <__sflush_r+0xc2>
  40250e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402512:	6929      	ldr	r1, [r5, #16]
  402514:	6029      	str	r1, [r5, #0]
  402516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40251a:	04d9      	lsls	r1, r3, #19
  40251c:	606c      	str	r4, [r5, #4]
  40251e:	81ab      	strh	r3, [r5, #12]
  402520:	d5b7      	bpl.n	402492 <__sflush_r+0x6e>
  402522:	2a00      	cmp	r2, #0
  402524:	d1b5      	bne.n	402492 <__sflush_r+0x6e>
  402526:	6528      	str	r0, [r5, #80]	; 0x50
  402528:	e7b3      	b.n	402492 <__sflush_r+0x6e>
  40252a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40252c:	2a00      	cmp	r2, #0
  40252e:	dc88      	bgt.n	402442 <__sflush_r+0x1e>
  402530:	e7d6      	b.n	4024e0 <__sflush_r+0xbc>
  402532:	2301      	movs	r3, #1
  402534:	69e9      	ldr	r1, [r5, #28]
  402536:	4640      	mov	r0, r8
  402538:	47a0      	blx	r4
  40253a:	1c43      	adds	r3, r0, #1
  40253c:	4602      	mov	r2, r0
  40253e:	d002      	beq.n	402546 <__sflush_r+0x122>
  402540:	89ab      	ldrh	r3, [r5, #12]
  402542:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402544:	e78c      	b.n	402460 <__sflush_r+0x3c>
  402546:	f8d8 3000 	ldr.w	r3, [r8]
  40254a:	2b00      	cmp	r3, #0
  40254c:	d0f8      	beq.n	402540 <__sflush_r+0x11c>
  40254e:	2b1d      	cmp	r3, #29
  402550:	d001      	beq.n	402556 <__sflush_r+0x132>
  402552:	2b16      	cmp	r3, #22
  402554:	d102      	bne.n	40255c <__sflush_r+0x138>
  402556:	f8c8 6000 	str.w	r6, [r8]
  40255a:	e7c1      	b.n	4024e0 <__sflush_r+0xbc>
  40255c:	89ab      	ldrh	r3, [r5, #12]
  40255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402562:	81ab      	strh	r3, [r5, #12]
  402564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402568:	20400001 	.word	0x20400001

0040256c <_fflush_r>:
  40256c:	b510      	push	{r4, lr}
  40256e:	4604      	mov	r4, r0
  402570:	b082      	sub	sp, #8
  402572:	b108      	cbz	r0, 402578 <_fflush_r+0xc>
  402574:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402576:	b153      	cbz	r3, 40258e <_fflush_r+0x22>
  402578:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40257c:	b908      	cbnz	r0, 402582 <_fflush_r+0x16>
  40257e:	b002      	add	sp, #8
  402580:	bd10      	pop	{r4, pc}
  402582:	4620      	mov	r0, r4
  402584:	b002      	add	sp, #8
  402586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40258a:	f7ff bf4b 	b.w	402424 <__sflush_r>
  40258e:	9101      	str	r1, [sp, #4]
  402590:	f000 f880 	bl	402694 <__sinit>
  402594:	9901      	ldr	r1, [sp, #4]
  402596:	e7ef      	b.n	402578 <_fflush_r+0xc>

00402598 <_cleanup_r>:
  402598:	4901      	ldr	r1, [pc, #4]	; (4025a0 <_cleanup_r+0x8>)
  40259a:	f000 bbaf 	b.w	402cfc <_fwalk_reent>
  40259e:	bf00      	nop
  4025a0:	00403b15 	.word	0x00403b15

004025a4 <__sinit.part.1>:
  4025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025a8:	4b35      	ldr	r3, [pc, #212]	; (402680 <__sinit.part.1+0xdc>)
  4025aa:	6845      	ldr	r5, [r0, #4]
  4025ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  4025ae:	2400      	movs	r4, #0
  4025b0:	4607      	mov	r7, r0
  4025b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4025b6:	2304      	movs	r3, #4
  4025b8:	2103      	movs	r1, #3
  4025ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4025be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4025c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4025c6:	b083      	sub	sp, #12
  4025c8:	602c      	str	r4, [r5, #0]
  4025ca:	606c      	str	r4, [r5, #4]
  4025cc:	60ac      	str	r4, [r5, #8]
  4025ce:	666c      	str	r4, [r5, #100]	; 0x64
  4025d0:	81ec      	strh	r4, [r5, #14]
  4025d2:	612c      	str	r4, [r5, #16]
  4025d4:	616c      	str	r4, [r5, #20]
  4025d6:	61ac      	str	r4, [r5, #24]
  4025d8:	81ab      	strh	r3, [r5, #12]
  4025da:	4621      	mov	r1, r4
  4025dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4025e0:	2208      	movs	r2, #8
  4025e2:	f7fe fd7d 	bl	4010e0 <memset>
  4025e6:	68be      	ldr	r6, [r7, #8]
  4025e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 402684 <__sinit.part.1+0xe0>
  4025ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 402688 <__sinit.part.1+0xe4>
  4025f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40268c <__sinit.part.1+0xe8>
  4025f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402690 <__sinit.part.1+0xec>
  4025f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4025fc:	2301      	movs	r3, #1
  4025fe:	2209      	movs	r2, #9
  402600:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402604:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402608:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40260c:	61ed      	str	r5, [r5, #28]
  40260e:	4621      	mov	r1, r4
  402610:	81f3      	strh	r3, [r6, #14]
  402612:	81b2      	strh	r2, [r6, #12]
  402614:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402618:	6034      	str	r4, [r6, #0]
  40261a:	6074      	str	r4, [r6, #4]
  40261c:	60b4      	str	r4, [r6, #8]
  40261e:	6674      	str	r4, [r6, #100]	; 0x64
  402620:	6134      	str	r4, [r6, #16]
  402622:	6174      	str	r4, [r6, #20]
  402624:	61b4      	str	r4, [r6, #24]
  402626:	2208      	movs	r2, #8
  402628:	9301      	str	r3, [sp, #4]
  40262a:	f7fe fd59 	bl	4010e0 <memset>
  40262e:	68fd      	ldr	r5, [r7, #12]
  402630:	61f6      	str	r6, [r6, #28]
  402632:	2012      	movs	r0, #18
  402634:	2202      	movs	r2, #2
  402636:	f8c6 b020 	str.w	fp, [r6, #32]
  40263a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40263e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402642:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402646:	4621      	mov	r1, r4
  402648:	81a8      	strh	r0, [r5, #12]
  40264a:	81ea      	strh	r2, [r5, #14]
  40264c:	602c      	str	r4, [r5, #0]
  40264e:	606c      	str	r4, [r5, #4]
  402650:	60ac      	str	r4, [r5, #8]
  402652:	666c      	str	r4, [r5, #100]	; 0x64
  402654:	612c      	str	r4, [r5, #16]
  402656:	616c      	str	r4, [r5, #20]
  402658:	61ac      	str	r4, [r5, #24]
  40265a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40265e:	2208      	movs	r2, #8
  402660:	f7fe fd3e 	bl	4010e0 <memset>
  402664:	9b01      	ldr	r3, [sp, #4]
  402666:	61ed      	str	r5, [r5, #28]
  402668:	f8c5 b020 	str.w	fp, [r5, #32]
  40266c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402670:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402674:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402678:	63bb      	str	r3, [r7, #56]	; 0x38
  40267a:	b003      	add	sp, #12
  40267c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402680:	00402599 	.word	0x00402599
  402684:	0040387d 	.word	0x0040387d
  402688:	004038a1 	.word	0x004038a1
  40268c:	004038dd 	.word	0x004038dd
  402690:	004038fd 	.word	0x004038fd

00402694 <__sinit>:
  402694:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402696:	b103      	cbz	r3, 40269a <__sinit+0x6>
  402698:	4770      	bx	lr
  40269a:	f7ff bf83 	b.w	4025a4 <__sinit.part.1>
  40269e:	bf00      	nop

004026a0 <__sfp_lock_acquire>:
  4026a0:	4770      	bx	lr
  4026a2:	bf00      	nop

004026a4 <__sfp_lock_release>:
  4026a4:	4770      	bx	lr
  4026a6:	bf00      	nop

004026a8 <__libc_fini_array>:
  4026a8:	b538      	push	{r3, r4, r5, lr}
  4026aa:	4d07      	ldr	r5, [pc, #28]	; (4026c8 <__libc_fini_array+0x20>)
  4026ac:	4c07      	ldr	r4, [pc, #28]	; (4026cc <__libc_fini_array+0x24>)
  4026ae:	1b2c      	subs	r4, r5, r4
  4026b0:	10a4      	asrs	r4, r4, #2
  4026b2:	d005      	beq.n	4026c0 <__libc_fini_array+0x18>
  4026b4:	3c01      	subs	r4, #1
  4026b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4026ba:	4798      	blx	r3
  4026bc:	2c00      	cmp	r4, #0
  4026be:	d1f9      	bne.n	4026b4 <__libc_fini_array+0xc>
  4026c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4026c4:	f001 bcf6 	b.w	4040b4 <_fini>
  4026c8:	004040c4 	.word	0x004040c4
  4026cc:	004040c0 	.word	0x004040c0

004026d0 <__fputwc>:
  4026d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026d4:	b082      	sub	sp, #8
  4026d6:	4680      	mov	r8, r0
  4026d8:	4689      	mov	r9, r1
  4026da:	4614      	mov	r4, r2
  4026dc:	f000 fb3c 	bl	402d58 <__locale_mb_cur_max>
  4026e0:	2801      	cmp	r0, #1
  4026e2:	d033      	beq.n	40274c <__fputwc+0x7c>
  4026e4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4026e8:	464a      	mov	r2, r9
  4026ea:	a901      	add	r1, sp, #4
  4026ec:	4640      	mov	r0, r8
  4026ee:	f001 f95f 	bl	4039b0 <_wcrtomb_r>
  4026f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4026f6:	4682      	mov	sl, r0
  4026f8:	d021      	beq.n	40273e <__fputwc+0x6e>
  4026fa:	b388      	cbz	r0, 402760 <__fputwc+0x90>
  4026fc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  402700:	2500      	movs	r5, #0
  402702:	e008      	b.n	402716 <__fputwc+0x46>
  402704:	6823      	ldr	r3, [r4, #0]
  402706:	1c5a      	adds	r2, r3, #1
  402708:	6022      	str	r2, [r4, #0]
  40270a:	701e      	strb	r6, [r3, #0]
  40270c:	3501      	adds	r5, #1
  40270e:	4555      	cmp	r5, sl
  402710:	d226      	bcs.n	402760 <__fputwc+0x90>
  402712:	ab01      	add	r3, sp, #4
  402714:	5d5e      	ldrb	r6, [r3, r5]
  402716:	68a3      	ldr	r3, [r4, #8]
  402718:	3b01      	subs	r3, #1
  40271a:	2b00      	cmp	r3, #0
  40271c:	60a3      	str	r3, [r4, #8]
  40271e:	daf1      	bge.n	402704 <__fputwc+0x34>
  402720:	69a7      	ldr	r7, [r4, #24]
  402722:	42bb      	cmp	r3, r7
  402724:	4631      	mov	r1, r6
  402726:	4622      	mov	r2, r4
  402728:	4640      	mov	r0, r8
  40272a:	db01      	blt.n	402730 <__fputwc+0x60>
  40272c:	2e0a      	cmp	r6, #10
  40272e:	d1e9      	bne.n	402704 <__fputwc+0x34>
  402730:	f001 f8e8 	bl	403904 <__swbuf_r>
  402734:	1c43      	adds	r3, r0, #1
  402736:	d1e9      	bne.n	40270c <__fputwc+0x3c>
  402738:	b002      	add	sp, #8
  40273a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40273e:	89a3      	ldrh	r3, [r4, #12]
  402740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402744:	81a3      	strh	r3, [r4, #12]
  402746:	b002      	add	sp, #8
  402748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40274c:	f109 33ff 	add.w	r3, r9, #4294967295
  402750:	2bfe      	cmp	r3, #254	; 0xfe
  402752:	d8c7      	bhi.n	4026e4 <__fputwc+0x14>
  402754:	fa5f f689 	uxtb.w	r6, r9
  402758:	4682      	mov	sl, r0
  40275a:	f88d 6004 	strb.w	r6, [sp, #4]
  40275e:	e7cf      	b.n	402700 <__fputwc+0x30>
  402760:	4648      	mov	r0, r9
  402762:	b002      	add	sp, #8
  402764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402768 <_fputwc_r>:
  402768:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40276c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402770:	d10a      	bne.n	402788 <_fputwc_r+0x20>
  402772:	b410      	push	{r4}
  402774:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40277a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40277e:	6654      	str	r4, [r2, #100]	; 0x64
  402780:	8193      	strh	r3, [r2, #12]
  402782:	bc10      	pop	{r4}
  402784:	f7ff bfa4 	b.w	4026d0 <__fputwc>
  402788:	f7ff bfa2 	b.w	4026d0 <__fputwc>

0040278c <_malloc_trim_r>:
  40278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40278e:	4f23      	ldr	r7, [pc, #140]	; (40281c <_malloc_trim_r+0x90>)
  402790:	460c      	mov	r4, r1
  402792:	4606      	mov	r6, r0
  402794:	f000 fe6c 	bl	403470 <__malloc_lock>
  402798:	68bb      	ldr	r3, [r7, #8]
  40279a:	685d      	ldr	r5, [r3, #4]
  40279c:	f025 0503 	bic.w	r5, r5, #3
  4027a0:	1b29      	subs	r1, r5, r4
  4027a2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4027a6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4027aa:	f021 010f 	bic.w	r1, r1, #15
  4027ae:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4027b2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4027b6:	db07      	blt.n	4027c8 <_malloc_trim_r+0x3c>
  4027b8:	2100      	movs	r1, #0
  4027ba:	4630      	mov	r0, r6
  4027bc:	f001 f84c 	bl	403858 <_sbrk_r>
  4027c0:	68bb      	ldr	r3, [r7, #8]
  4027c2:	442b      	add	r3, r5
  4027c4:	4298      	cmp	r0, r3
  4027c6:	d004      	beq.n	4027d2 <_malloc_trim_r+0x46>
  4027c8:	4630      	mov	r0, r6
  4027ca:	f000 fe53 	bl	403474 <__malloc_unlock>
  4027ce:	2000      	movs	r0, #0
  4027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027d2:	4261      	negs	r1, r4
  4027d4:	4630      	mov	r0, r6
  4027d6:	f001 f83f 	bl	403858 <_sbrk_r>
  4027da:	3001      	adds	r0, #1
  4027dc:	d00d      	beq.n	4027fa <_malloc_trim_r+0x6e>
  4027de:	4b10      	ldr	r3, [pc, #64]	; (402820 <_malloc_trim_r+0x94>)
  4027e0:	68ba      	ldr	r2, [r7, #8]
  4027e2:	6819      	ldr	r1, [r3, #0]
  4027e4:	1b2d      	subs	r5, r5, r4
  4027e6:	f045 0501 	orr.w	r5, r5, #1
  4027ea:	4630      	mov	r0, r6
  4027ec:	1b09      	subs	r1, r1, r4
  4027ee:	6055      	str	r5, [r2, #4]
  4027f0:	6019      	str	r1, [r3, #0]
  4027f2:	f000 fe3f 	bl	403474 <__malloc_unlock>
  4027f6:	2001      	movs	r0, #1
  4027f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027fa:	2100      	movs	r1, #0
  4027fc:	4630      	mov	r0, r6
  4027fe:	f001 f82b 	bl	403858 <_sbrk_r>
  402802:	68ba      	ldr	r2, [r7, #8]
  402804:	1a83      	subs	r3, r0, r2
  402806:	2b0f      	cmp	r3, #15
  402808:	ddde      	ble.n	4027c8 <_malloc_trim_r+0x3c>
  40280a:	4c06      	ldr	r4, [pc, #24]	; (402824 <_malloc_trim_r+0x98>)
  40280c:	4904      	ldr	r1, [pc, #16]	; (402820 <_malloc_trim_r+0x94>)
  40280e:	6824      	ldr	r4, [r4, #0]
  402810:	f043 0301 	orr.w	r3, r3, #1
  402814:	1b00      	subs	r0, r0, r4
  402816:	6053      	str	r3, [r2, #4]
  402818:	6008      	str	r0, [r1, #0]
  40281a:	e7d5      	b.n	4027c8 <_malloc_trim_r+0x3c>
  40281c:	20000458 	.word	0x20000458
  402820:	200008ec 	.word	0x200008ec
  402824:	20000864 	.word	0x20000864

00402828 <_free_r>:
  402828:	2900      	cmp	r1, #0
  40282a:	d045      	beq.n	4028b8 <_free_r+0x90>
  40282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402830:	460d      	mov	r5, r1
  402832:	4680      	mov	r8, r0
  402834:	f000 fe1c 	bl	403470 <__malloc_lock>
  402838:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40283c:	496a      	ldr	r1, [pc, #424]	; (4029e8 <_free_r+0x1c0>)
  40283e:	f027 0301 	bic.w	r3, r7, #1
  402842:	f1a5 0408 	sub.w	r4, r5, #8
  402846:	18e2      	adds	r2, r4, r3
  402848:	688e      	ldr	r6, [r1, #8]
  40284a:	6850      	ldr	r0, [r2, #4]
  40284c:	42b2      	cmp	r2, r6
  40284e:	f020 0003 	bic.w	r0, r0, #3
  402852:	d062      	beq.n	40291a <_free_r+0xf2>
  402854:	07fe      	lsls	r6, r7, #31
  402856:	6050      	str	r0, [r2, #4]
  402858:	d40b      	bmi.n	402872 <_free_r+0x4a>
  40285a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40285e:	1be4      	subs	r4, r4, r7
  402860:	f101 0e08 	add.w	lr, r1, #8
  402864:	68a5      	ldr	r5, [r4, #8]
  402866:	4575      	cmp	r5, lr
  402868:	443b      	add	r3, r7
  40286a:	d06f      	beq.n	40294c <_free_r+0x124>
  40286c:	68e7      	ldr	r7, [r4, #12]
  40286e:	60ef      	str	r7, [r5, #12]
  402870:	60bd      	str	r5, [r7, #8]
  402872:	1815      	adds	r5, r2, r0
  402874:	686d      	ldr	r5, [r5, #4]
  402876:	07ed      	lsls	r5, r5, #31
  402878:	d542      	bpl.n	402900 <_free_r+0xd8>
  40287a:	f043 0201 	orr.w	r2, r3, #1
  40287e:	6062      	str	r2, [r4, #4]
  402880:	50e3      	str	r3, [r4, r3]
  402882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402886:	d218      	bcs.n	4028ba <_free_r+0x92>
  402888:	08db      	lsrs	r3, r3, #3
  40288a:	1c5a      	adds	r2, r3, #1
  40288c:	684d      	ldr	r5, [r1, #4]
  40288e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  402892:	60a7      	str	r7, [r4, #8]
  402894:	2001      	movs	r0, #1
  402896:	109b      	asrs	r3, r3, #2
  402898:	fa00 f303 	lsl.w	r3, r0, r3
  40289c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4028a0:	431d      	orrs	r5, r3
  4028a2:	3808      	subs	r0, #8
  4028a4:	60e0      	str	r0, [r4, #12]
  4028a6:	604d      	str	r5, [r1, #4]
  4028a8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4028ac:	60fc      	str	r4, [r7, #12]
  4028ae:	4640      	mov	r0, r8
  4028b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028b4:	f000 bdde 	b.w	403474 <__malloc_unlock>
  4028b8:	4770      	bx	lr
  4028ba:	0a5a      	lsrs	r2, r3, #9
  4028bc:	2a04      	cmp	r2, #4
  4028be:	d853      	bhi.n	402968 <_free_r+0x140>
  4028c0:	099a      	lsrs	r2, r3, #6
  4028c2:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4028c6:	007f      	lsls	r7, r7, #1
  4028c8:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4028cc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4028d0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4028d4:	4944      	ldr	r1, [pc, #272]	; (4029e8 <_free_r+0x1c0>)
  4028d6:	3808      	subs	r0, #8
  4028d8:	4290      	cmp	r0, r2
  4028da:	d04d      	beq.n	402978 <_free_r+0x150>
  4028dc:	6851      	ldr	r1, [r2, #4]
  4028de:	f021 0103 	bic.w	r1, r1, #3
  4028e2:	428b      	cmp	r3, r1
  4028e4:	d202      	bcs.n	4028ec <_free_r+0xc4>
  4028e6:	6892      	ldr	r2, [r2, #8]
  4028e8:	4290      	cmp	r0, r2
  4028ea:	d1f7      	bne.n	4028dc <_free_r+0xb4>
  4028ec:	68d0      	ldr	r0, [r2, #12]
  4028ee:	60e0      	str	r0, [r4, #12]
  4028f0:	60a2      	str	r2, [r4, #8]
  4028f2:	6084      	str	r4, [r0, #8]
  4028f4:	60d4      	str	r4, [r2, #12]
  4028f6:	4640      	mov	r0, r8
  4028f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028fc:	f000 bdba 	b.w	403474 <__malloc_unlock>
  402900:	6895      	ldr	r5, [r2, #8]
  402902:	4f3a      	ldr	r7, [pc, #232]	; (4029ec <_free_r+0x1c4>)
  402904:	42bd      	cmp	r5, r7
  402906:	4403      	add	r3, r0
  402908:	d03f      	beq.n	40298a <_free_r+0x162>
  40290a:	68d0      	ldr	r0, [r2, #12]
  40290c:	60e8      	str	r0, [r5, #12]
  40290e:	f043 0201 	orr.w	r2, r3, #1
  402912:	6085      	str	r5, [r0, #8]
  402914:	6062      	str	r2, [r4, #4]
  402916:	50e3      	str	r3, [r4, r3]
  402918:	e7b3      	b.n	402882 <_free_r+0x5a>
  40291a:	07ff      	lsls	r7, r7, #31
  40291c:	4403      	add	r3, r0
  40291e:	d407      	bmi.n	402930 <_free_r+0x108>
  402920:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402924:	1aa4      	subs	r4, r4, r2
  402926:	4413      	add	r3, r2
  402928:	68a0      	ldr	r0, [r4, #8]
  40292a:	68e2      	ldr	r2, [r4, #12]
  40292c:	60c2      	str	r2, [r0, #12]
  40292e:	6090      	str	r0, [r2, #8]
  402930:	4a2f      	ldr	r2, [pc, #188]	; (4029f0 <_free_r+0x1c8>)
  402932:	6812      	ldr	r2, [r2, #0]
  402934:	f043 0001 	orr.w	r0, r3, #1
  402938:	4293      	cmp	r3, r2
  40293a:	6060      	str	r0, [r4, #4]
  40293c:	608c      	str	r4, [r1, #8]
  40293e:	d3b6      	bcc.n	4028ae <_free_r+0x86>
  402940:	4b2c      	ldr	r3, [pc, #176]	; (4029f4 <_free_r+0x1cc>)
  402942:	4640      	mov	r0, r8
  402944:	6819      	ldr	r1, [r3, #0]
  402946:	f7ff ff21 	bl	40278c <_malloc_trim_r>
  40294a:	e7b0      	b.n	4028ae <_free_r+0x86>
  40294c:	1811      	adds	r1, r2, r0
  40294e:	6849      	ldr	r1, [r1, #4]
  402950:	07c9      	lsls	r1, r1, #31
  402952:	d444      	bmi.n	4029de <_free_r+0x1b6>
  402954:	6891      	ldr	r1, [r2, #8]
  402956:	68d2      	ldr	r2, [r2, #12]
  402958:	60ca      	str	r2, [r1, #12]
  40295a:	4403      	add	r3, r0
  40295c:	f043 0001 	orr.w	r0, r3, #1
  402960:	6091      	str	r1, [r2, #8]
  402962:	6060      	str	r0, [r4, #4]
  402964:	50e3      	str	r3, [r4, r3]
  402966:	e7a2      	b.n	4028ae <_free_r+0x86>
  402968:	2a14      	cmp	r2, #20
  40296a:	d817      	bhi.n	40299c <_free_r+0x174>
  40296c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402970:	007f      	lsls	r7, r7, #1
  402972:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402976:	e7a9      	b.n	4028cc <_free_r+0xa4>
  402978:	10aa      	asrs	r2, r5, #2
  40297a:	684b      	ldr	r3, [r1, #4]
  40297c:	2501      	movs	r5, #1
  40297e:	fa05 f202 	lsl.w	r2, r5, r2
  402982:	4313      	orrs	r3, r2
  402984:	604b      	str	r3, [r1, #4]
  402986:	4602      	mov	r2, r0
  402988:	e7b1      	b.n	4028ee <_free_r+0xc6>
  40298a:	f043 0201 	orr.w	r2, r3, #1
  40298e:	614c      	str	r4, [r1, #20]
  402990:	610c      	str	r4, [r1, #16]
  402992:	60e5      	str	r5, [r4, #12]
  402994:	60a5      	str	r5, [r4, #8]
  402996:	6062      	str	r2, [r4, #4]
  402998:	50e3      	str	r3, [r4, r3]
  40299a:	e788      	b.n	4028ae <_free_r+0x86>
  40299c:	2a54      	cmp	r2, #84	; 0x54
  40299e:	d806      	bhi.n	4029ae <_free_r+0x186>
  4029a0:	0b1a      	lsrs	r2, r3, #12
  4029a2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4029a6:	007f      	lsls	r7, r7, #1
  4029a8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4029ac:	e78e      	b.n	4028cc <_free_r+0xa4>
  4029ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4029b2:	d806      	bhi.n	4029c2 <_free_r+0x19a>
  4029b4:	0bda      	lsrs	r2, r3, #15
  4029b6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4029ba:	007f      	lsls	r7, r7, #1
  4029bc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4029c0:	e784      	b.n	4028cc <_free_r+0xa4>
  4029c2:	f240 5054 	movw	r0, #1364	; 0x554
  4029c6:	4282      	cmp	r2, r0
  4029c8:	d806      	bhi.n	4029d8 <_free_r+0x1b0>
  4029ca:	0c9a      	lsrs	r2, r3, #18
  4029cc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4029d0:	007f      	lsls	r7, r7, #1
  4029d2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4029d6:	e779      	b.n	4028cc <_free_r+0xa4>
  4029d8:	27fe      	movs	r7, #254	; 0xfe
  4029da:	257e      	movs	r5, #126	; 0x7e
  4029dc:	e776      	b.n	4028cc <_free_r+0xa4>
  4029de:	f043 0201 	orr.w	r2, r3, #1
  4029e2:	6062      	str	r2, [r4, #4]
  4029e4:	50e3      	str	r3, [r4, r3]
  4029e6:	e762      	b.n	4028ae <_free_r+0x86>
  4029e8:	20000458 	.word	0x20000458
  4029ec:	20000460 	.word	0x20000460
  4029f0:	20000860 	.word	0x20000860
  4029f4:	200008e8 	.word	0x200008e8

004029f8 <__sfvwrite_r>:
  4029f8:	6893      	ldr	r3, [r2, #8]
  4029fa:	2b00      	cmp	r3, #0
  4029fc:	d076      	beq.n	402aec <__sfvwrite_r+0xf4>
  4029fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a02:	898b      	ldrh	r3, [r1, #12]
  402a04:	b085      	sub	sp, #20
  402a06:	460c      	mov	r4, r1
  402a08:	0719      	lsls	r1, r3, #28
  402a0a:	9001      	str	r0, [sp, #4]
  402a0c:	4616      	mov	r6, r2
  402a0e:	d529      	bpl.n	402a64 <__sfvwrite_r+0x6c>
  402a10:	6922      	ldr	r2, [r4, #16]
  402a12:	b33a      	cbz	r2, 402a64 <__sfvwrite_r+0x6c>
  402a14:	f003 0802 	and.w	r8, r3, #2
  402a18:	fa1f f088 	uxth.w	r0, r8
  402a1c:	6835      	ldr	r5, [r6, #0]
  402a1e:	2800      	cmp	r0, #0
  402a20:	d02f      	beq.n	402a82 <__sfvwrite_r+0x8a>
  402a22:	f04f 0900 	mov.w	r9, #0
  402a26:	4fb4      	ldr	r7, [pc, #720]	; (402cf8 <__sfvwrite_r+0x300>)
  402a28:	46c8      	mov	r8, r9
  402a2a:	46b2      	mov	sl, r6
  402a2c:	45b8      	cmp	r8, r7
  402a2e:	4643      	mov	r3, r8
  402a30:	464a      	mov	r2, r9
  402a32:	bf28      	it	cs
  402a34:	463b      	movcs	r3, r7
  402a36:	9801      	ldr	r0, [sp, #4]
  402a38:	f1b8 0f00 	cmp.w	r8, #0
  402a3c:	d050      	beq.n	402ae0 <__sfvwrite_r+0xe8>
  402a3e:	69e1      	ldr	r1, [r4, #28]
  402a40:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a42:	47b0      	blx	r6
  402a44:	2800      	cmp	r0, #0
  402a46:	dd71      	ble.n	402b2c <__sfvwrite_r+0x134>
  402a48:	f8da 3008 	ldr.w	r3, [sl, #8]
  402a4c:	1a1b      	subs	r3, r3, r0
  402a4e:	4481      	add	r9, r0
  402a50:	ebc0 0808 	rsb	r8, r0, r8
  402a54:	f8ca 3008 	str.w	r3, [sl, #8]
  402a58:	2b00      	cmp	r3, #0
  402a5a:	d1e7      	bne.n	402a2c <__sfvwrite_r+0x34>
  402a5c:	2000      	movs	r0, #0
  402a5e:	b005      	add	sp, #20
  402a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a64:	4621      	mov	r1, r4
  402a66:	9801      	ldr	r0, [sp, #4]
  402a68:	f7ff fc68 	bl	40233c <__swsetup_r>
  402a6c:	2800      	cmp	r0, #0
  402a6e:	f040 813a 	bne.w	402ce6 <__sfvwrite_r+0x2ee>
  402a72:	89a3      	ldrh	r3, [r4, #12]
  402a74:	6835      	ldr	r5, [r6, #0]
  402a76:	f003 0802 	and.w	r8, r3, #2
  402a7a:	fa1f f088 	uxth.w	r0, r8
  402a7e:	2800      	cmp	r0, #0
  402a80:	d1cf      	bne.n	402a22 <__sfvwrite_r+0x2a>
  402a82:	f013 0901 	ands.w	r9, r3, #1
  402a86:	d15b      	bne.n	402b40 <__sfvwrite_r+0x148>
  402a88:	464f      	mov	r7, r9
  402a8a:	9602      	str	r6, [sp, #8]
  402a8c:	b31f      	cbz	r7, 402ad6 <__sfvwrite_r+0xde>
  402a8e:	059a      	lsls	r2, r3, #22
  402a90:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402a94:	d52c      	bpl.n	402af0 <__sfvwrite_r+0xf8>
  402a96:	4547      	cmp	r7, r8
  402a98:	46c2      	mov	sl, r8
  402a9a:	f0c0 80a4 	bcc.w	402be6 <__sfvwrite_r+0x1ee>
  402a9e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402aa2:	f040 80b1 	bne.w	402c08 <__sfvwrite_r+0x210>
  402aa6:	6820      	ldr	r0, [r4, #0]
  402aa8:	4652      	mov	r2, sl
  402aaa:	4649      	mov	r1, r9
  402aac:	f7fe fab4 	bl	401018 <memmove>
  402ab0:	68a0      	ldr	r0, [r4, #8]
  402ab2:	6823      	ldr	r3, [r4, #0]
  402ab4:	ebc8 0000 	rsb	r0, r8, r0
  402ab8:	4453      	add	r3, sl
  402aba:	60a0      	str	r0, [r4, #8]
  402abc:	6023      	str	r3, [r4, #0]
  402abe:	4638      	mov	r0, r7
  402ac0:	9a02      	ldr	r2, [sp, #8]
  402ac2:	6893      	ldr	r3, [r2, #8]
  402ac4:	1a1b      	subs	r3, r3, r0
  402ac6:	4481      	add	r9, r0
  402ac8:	1a3f      	subs	r7, r7, r0
  402aca:	6093      	str	r3, [r2, #8]
  402acc:	2b00      	cmp	r3, #0
  402ace:	d0c5      	beq.n	402a5c <__sfvwrite_r+0x64>
  402ad0:	89a3      	ldrh	r3, [r4, #12]
  402ad2:	2f00      	cmp	r7, #0
  402ad4:	d1db      	bne.n	402a8e <__sfvwrite_r+0x96>
  402ad6:	f8d5 9000 	ldr.w	r9, [r5]
  402ada:	686f      	ldr	r7, [r5, #4]
  402adc:	3508      	adds	r5, #8
  402ade:	e7d5      	b.n	402a8c <__sfvwrite_r+0x94>
  402ae0:	f8d5 9000 	ldr.w	r9, [r5]
  402ae4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402ae8:	3508      	adds	r5, #8
  402aea:	e79f      	b.n	402a2c <__sfvwrite_r+0x34>
  402aec:	2000      	movs	r0, #0
  402aee:	4770      	bx	lr
  402af0:	6820      	ldr	r0, [r4, #0]
  402af2:	6923      	ldr	r3, [r4, #16]
  402af4:	4298      	cmp	r0, r3
  402af6:	d803      	bhi.n	402b00 <__sfvwrite_r+0x108>
  402af8:	6961      	ldr	r1, [r4, #20]
  402afa:	428f      	cmp	r7, r1
  402afc:	f080 80b7 	bcs.w	402c6e <__sfvwrite_r+0x276>
  402b00:	45b8      	cmp	r8, r7
  402b02:	bf28      	it	cs
  402b04:	46b8      	movcs	r8, r7
  402b06:	4642      	mov	r2, r8
  402b08:	4649      	mov	r1, r9
  402b0a:	f7fe fa85 	bl	401018 <memmove>
  402b0e:	68a3      	ldr	r3, [r4, #8]
  402b10:	6822      	ldr	r2, [r4, #0]
  402b12:	ebc8 0303 	rsb	r3, r8, r3
  402b16:	4442      	add	r2, r8
  402b18:	60a3      	str	r3, [r4, #8]
  402b1a:	6022      	str	r2, [r4, #0]
  402b1c:	2b00      	cmp	r3, #0
  402b1e:	d149      	bne.n	402bb4 <__sfvwrite_r+0x1bc>
  402b20:	4621      	mov	r1, r4
  402b22:	9801      	ldr	r0, [sp, #4]
  402b24:	f7ff fd22 	bl	40256c <_fflush_r>
  402b28:	2800      	cmp	r0, #0
  402b2a:	d043      	beq.n	402bb4 <__sfvwrite_r+0x1bc>
  402b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b34:	f04f 30ff 	mov.w	r0, #4294967295
  402b38:	81a3      	strh	r3, [r4, #12]
  402b3a:	b005      	add	sp, #20
  402b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b40:	4680      	mov	r8, r0
  402b42:	9002      	str	r0, [sp, #8]
  402b44:	4682      	mov	sl, r0
  402b46:	4681      	mov	r9, r0
  402b48:	f1b9 0f00 	cmp.w	r9, #0
  402b4c:	d02a      	beq.n	402ba4 <__sfvwrite_r+0x1ac>
  402b4e:	9b02      	ldr	r3, [sp, #8]
  402b50:	2b00      	cmp	r3, #0
  402b52:	d04c      	beq.n	402bee <__sfvwrite_r+0x1f6>
  402b54:	6820      	ldr	r0, [r4, #0]
  402b56:	6923      	ldr	r3, [r4, #16]
  402b58:	6962      	ldr	r2, [r4, #20]
  402b5a:	45c8      	cmp	r8, r9
  402b5c:	46c3      	mov	fp, r8
  402b5e:	bf28      	it	cs
  402b60:	46cb      	movcs	fp, r9
  402b62:	4298      	cmp	r0, r3
  402b64:	465f      	mov	r7, fp
  402b66:	d904      	bls.n	402b72 <__sfvwrite_r+0x17a>
  402b68:	68a3      	ldr	r3, [r4, #8]
  402b6a:	4413      	add	r3, r2
  402b6c:	459b      	cmp	fp, r3
  402b6e:	f300 8090 	bgt.w	402c92 <__sfvwrite_r+0x29a>
  402b72:	4593      	cmp	fp, r2
  402b74:	db20      	blt.n	402bb8 <__sfvwrite_r+0x1c0>
  402b76:	4613      	mov	r3, r2
  402b78:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402b7a:	69e1      	ldr	r1, [r4, #28]
  402b7c:	9801      	ldr	r0, [sp, #4]
  402b7e:	4652      	mov	r2, sl
  402b80:	47b8      	blx	r7
  402b82:	1e07      	subs	r7, r0, #0
  402b84:	ddd2      	ble.n	402b2c <__sfvwrite_r+0x134>
  402b86:	ebb8 0807 	subs.w	r8, r8, r7
  402b8a:	d023      	beq.n	402bd4 <__sfvwrite_r+0x1dc>
  402b8c:	68b3      	ldr	r3, [r6, #8]
  402b8e:	1bdb      	subs	r3, r3, r7
  402b90:	44ba      	add	sl, r7
  402b92:	ebc7 0909 	rsb	r9, r7, r9
  402b96:	60b3      	str	r3, [r6, #8]
  402b98:	2b00      	cmp	r3, #0
  402b9a:	f43f af5f 	beq.w	402a5c <__sfvwrite_r+0x64>
  402b9e:	f1b9 0f00 	cmp.w	r9, #0
  402ba2:	d1d4      	bne.n	402b4e <__sfvwrite_r+0x156>
  402ba4:	2300      	movs	r3, #0
  402ba6:	f8d5 a000 	ldr.w	sl, [r5]
  402baa:	f8d5 9004 	ldr.w	r9, [r5, #4]
  402bae:	9302      	str	r3, [sp, #8]
  402bb0:	3508      	adds	r5, #8
  402bb2:	e7c9      	b.n	402b48 <__sfvwrite_r+0x150>
  402bb4:	4640      	mov	r0, r8
  402bb6:	e783      	b.n	402ac0 <__sfvwrite_r+0xc8>
  402bb8:	465a      	mov	r2, fp
  402bba:	4651      	mov	r1, sl
  402bbc:	f7fe fa2c 	bl	401018 <memmove>
  402bc0:	68a2      	ldr	r2, [r4, #8]
  402bc2:	6823      	ldr	r3, [r4, #0]
  402bc4:	ebcb 0202 	rsb	r2, fp, r2
  402bc8:	445b      	add	r3, fp
  402bca:	ebb8 0807 	subs.w	r8, r8, r7
  402bce:	60a2      	str	r2, [r4, #8]
  402bd0:	6023      	str	r3, [r4, #0]
  402bd2:	d1db      	bne.n	402b8c <__sfvwrite_r+0x194>
  402bd4:	4621      	mov	r1, r4
  402bd6:	9801      	ldr	r0, [sp, #4]
  402bd8:	f7ff fcc8 	bl	40256c <_fflush_r>
  402bdc:	2800      	cmp	r0, #0
  402bde:	d1a5      	bne.n	402b2c <__sfvwrite_r+0x134>
  402be0:	f8cd 8008 	str.w	r8, [sp, #8]
  402be4:	e7d2      	b.n	402b8c <__sfvwrite_r+0x194>
  402be6:	6820      	ldr	r0, [r4, #0]
  402be8:	46b8      	mov	r8, r7
  402bea:	46ba      	mov	sl, r7
  402bec:	e75c      	b.n	402aa8 <__sfvwrite_r+0xb0>
  402bee:	464a      	mov	r2, r9
  402bf0:	210a      	movs	r1, #10
  402bf2:	4650      	mov	r0, sl
  402bf4:	f000 fbec 	bl	4033d0 <memchr>
  402bf8:	2800      	cmp	r0, #0
  402bfa:	d06f      	beq.n	402cdc <__sfvwrite_r+0x2e4>
  402bfc:	3001      	adds	r0, #1
  402bfe:	2301      	movs	r3, #1
  402c00:	ebca 0800 	rsb	r8, sl, r0
  402c04:	9302      	str	r3, [sp, #8]
  402c06:	e7a5      	b.n	402b54 <__sfvwrite_r+0x15c>
  402c08:	6962      	ldr	r2, [r4, #20]
  402c0a:	6820      	ldr	r0, [r4, #0]
  402c0c:	6921      	ldr	r1, [r4, #16]
  402c0e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402c12:	ebc1 0a00 	rsb	sl, r1, r0
  402c16:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402c1a:	f10a 0001 	add.w	r0, sl, #1
  402c1e:	ea4f 0868 	mov.w	r8, r8, asr #1
  402c22:	4438      	add	r0, r7
  402c24:	4540      	cmp	r0, r8
  402c26:	4642      	mov	r2, r8
  402c28:	bf84      	itt	hi
  402c2a:	4680      	movhi	r8, r0
  402c2c:	4642      	movhi	r2, r8
  402c2e:	055b      	lsls	r3, r3, #21
  402c30:	d542      	bpl.n	402cb8 <__sfvwrite_r+0x2c0>
  402c32:	4611      	mov	r1, r2
  402c34:	9801      	ldr	r0, [sp, #4]
  402c36:	f000 f911 	bl	402e5c <_malloc_r>
  402c3a:	4683      	mov	fp, r0
  402c3c:	2800      	cmp	r0, #0
  402c3e:	d055      	beq.n	402cec <__sfvwrite_r+0x2f4>
  402c40:	4652      	mov	r2, sl
  402c42:	6921      	ldr	r1, [r4, #16]
  402c44:	f7fe f94e 	bl	400ee4 <memcpy>
  402c48:	89a3      	ldrh	r3, [r4, #12]
  402c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c52:	81a3      	strh	r3, [r4, #12]
  402c54:	ebca 0308 	rsb	r3, sl, r8
  402c58:	eb0b 000a 	add.w	r0, fp, sl
  402c5c:	f8c4 8014 	str.w	r8, [r4, #20]
  402c60:	f8c4 b010 	str.w	fp, [r4, #16]
  402c64:	6020      	str	r0, [r4, #0]
  402c66:	60a3      	str	r3, [r4, #8]
  402c68:	46b8      	mov	r8, r7
  402c6a:	46ba      	mov	sl, r7
  402c6c:	e71c      	b.n	402aa8 <__sfvwrite_r+0xb0>
  402c6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402c72:	42bb      	cmp	r3, r7
  402c74:	bf28      	it	cs
  402c76:	463b      	movcs	r3, r7
  402c78:	464a      	mov	r2, r9
  402c7a:	fb93 f3f1 	sdiv	r3, r3, r1
  402c7e:	9801      	ldr	r0, [sp, #4]
  402c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c82:	fb01 f303 	mul.w	r3, r1, r3
  402c86:	69e1      	ldr	r1, [r4, #28]
  402c88:	47b0      	blx	r6
  402c8a:	2800      	cmp	r0, #0
  402c8c:	f73f af18 	bgt.w	402ac0 <__sfvwrite_r+0xc8>
  402c90:	e74c      	b.n	402b2c <__sfvwrite_r+0x134>
  402c92:	461a      	mov	r2, r3
  402c94:	4651      	mov	r1, sl
  402c96:	9303      	str	r3, [sp, #12]
  402c98:	f7fe f9be 	bl	401018 <memmove>
  402c9c:	6822      	ldr	r2, [r4, #0]
  402c9e:	9b03      	ldr	r3, [sp, #12]
  402ca0:	9801      	ldr	r0, [sp, #4]
  402ca2:	441a      	add	r2, r3
  402ca4:	6022      	str	r2, [r4, #0]
  402ca6:	4621      	mov	r1, r4
  402ca8:	f7ff fc60 	bl	40256c <_fflush_r>
  402cac:	9b03      	ldr	r3, [sp, #12]
  402cae:	2800      	cmp	r0, #0
  402cb0:	f47f af3c 	bne.w	402b2c <__sfvwrite_r+0x134>
  402cb4:	461f      	mov	r7, r3
  402cb6:	e766      	b.n	402b86 <__sfvwrite_r+0x18e>
  402cb8:	9801      	ldr	r0, [sp, #4]
  402cba:	f000 fbdd 	bl	403478 <_realloc_r>
  402cbe:	4683      	mov	fp, r0
  402cc0:	2800      	cmp	r0, #0
  402cc2:	d1c7      	bne.n	402c54 <__sfvwrite_r+0x25c>
  402cc4:	9d01      	ldr	r5, [sp, #4]
  402cc6:	6921      	ldr	r1, [r4, #16]
  402cc8:	4628      	mov	r0, r5
  402cca:	f7ff fdad 	bl	402828 <_free_r>
  402cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cd2:	220c      	movs	r2, #12
  402cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402cd8:	602a      	str	r2, [r5, #0]
  402cda:	e729      	b.n	402b30 <__sfvwrite_r+0x138>
  402cdc:	2301      	movs	r3, #1
  402cde:	f109 0801 	add.w	r8, r9, #1
  402ce2:	9302      	str	r3, [sp, #8]
  402ce4:	e736      	b.n	402b54 <__sfvwrite_r+0x15c>
  402ce6:	f04f 30ff 	mov.w	r0, #4294967295
  402cea:	e6b8      	b.n	402a5e <__sfvwrite_r+0x66>
  402cec:	9a01      	ldr	r2, [sp, #4]
  402cee:	230c      	movs	r3, #12
  402cf0:	6013      	str	r3, [r2, #0]
  402cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cf6:	e71b      	b.n	402b30 <__sfvwrite_r+0x138>
  402cf8:	7ffffc00 	.word	0x7ffffc00

00402cfc <_fwalk_reent>:
  402cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d00:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d04:	d01f      	beq.n	402d46 <_fwalk_reent+0x4a>
  402d06:	4688      	mov	r8, r1
  402d08:	4606      	mov	r6, r0
  402d0a:	f04f 0900 	mov.w	r9, #0
  402d0e:	687d      	ldr	r5, [r7, #4]
  402d10:	68bc      	ldr	r4, [r7, #8]
  402d12:	3d01      	subs	r5, #1
  402d14:	d411      	bmi.n	402d3a <_fwalk_reent+0x3e>
  402d16:	89a3      	ldrh	r3, [r4, #12]
  402d18:	2b01      	cmp	r3, #1
  402d1a:	f105 35ff 	add.w	r5, r5, #4294967295
  402d1e:	d908      	bls.n	402d32 <_fwalk_reent+0x36>
  402d20:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d24:	3301      	adds	r3, #1
  402d26:	4621      	mov	r1, r4
  402d28:	4630      	mov	r0, r6
  402d2a:	d002      	beq.n	402d32 <_fwalk_reent+0x36>
  402d2c:	47c0      	blx	r8
  402d2e:	ea49 0900 	orr.w	r9, r9, r0
  402d32:	1c6b      	adds	r3, r5, #1
  402d34:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d38:	d1ed      	bne.n	402d16 <_fwalk_reent+0x1a>
  402d3a:	683f      	ldr	r7, [r7, #0]
  402d3c:	2f00      	cmp	r7, #0
  402d3e:	d1e6      	bne.n	402d0e <_fwalk_reent+0x12>
  402d40:	4648      	mov	r0, r9
  402d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d46:	46b9      	mov	r9, r7
  402d48:	4648      	mov	r0, r9
  402d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d4e:	bf00      	nop

00402d50 <__locale_charset>:
  402d50:	4800      	ldr	r0, [pc, #0]	; (402d54 <__locale_charset+0x4>)
  402d52:	4770      	bx	lr
  402d54:	20000434 	.word	0x20000434

00402d58 <__locale_mb_cur_max>:
  402d58:	4b01      	ldr	r3, [pc, #4]	; (402d60 <__locale_mb_cur_max+0x8>)
  402d5a:	6818      	ldr	r0, [r3, #0]
  402d5c:	4770      	bx	lr
  402d5e:	bf00      	nop
  402d60:	20000454 	.word	0x20000454

00402d64 <__swhatbuf_r>:
  402d64:	b570      	push	{r4, r5, r6, lr}
  402d66:	460d      	mov	r5, r1
  402d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d6c:	2900      	cmp	r1, #0
  402d6e:	b090      	sub	sp, #64	; 0x40
  402d70:	4614      	mov	r4, r2
  402d72:	461e      	mov	r6, r3
  402d74:	db14      	blt.n	402da0 <__swhatbuf_r+0x3c>
  402d76:	aa01      	add	r2, sp, #4
  402d78:	f000 ff0e 	bl	403b98 <_fstat_r>
  402d7c:	2800      	cmp	r0, #0
  402d7e:	db0f      	blt.n	402da0 <__swhatbuf_r+0x3c>
  402d80:	9a02      	ldr	r2, [sp, #8]
  402d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402d86:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402d8a:	fab2 f282 	clz	r2, r2
  402d8e:	0952      	lsrs	r2, r2, #5
  402d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d94:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402d98:	6032      	str	r2, [r6, #0]
  402d9a:	6023      	str	r3, [r4, #0]
  402d9c:	b010      	add	sp, #64	; 0x40
  402d9e:	bd70      	pop	{r4, r5, r6, pc}
  402da0:	89a8      	ldrh	r0, [r5, #12]
  402da2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  402da6:	b282      	uxth	r2, r0
  402da8:	2000      	movs	r0, #0
  402daa:	6030      	str	r0, [r6, #0]
  402dac:	b11a      	cbz	r2, 402db6 <__swhatbuf_r+0x52>
  402dae:	2340      	movs	r3, #64	; 0x40
  402db0:	6023      	str	r3, [r4, #0]
  402db2:	b010      	add	sp, #64	; 0x40
  402db4:	bd70      	pop	{r4, r5, r6, pc}
  402db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dba:	4610      	mov	r0, r2
  402dbc:	6023      	str	r3, [r4, #0]
  402dbe:	b010      	add	sp, #64	; 0x40
  402dc0:	bd70      	pop	{r4, r5, r6, pc}
  402dc2:	bf00      	nop

00402dc4 <__smakebuf_r>:
  402dc4:	898a      	ldrh	r2, [r1, #12]
  402dc6:	0792      	lsls	r2, r2, #30
  402dc8:	460b      	mov	r3, r1
  402dca:	d506      	bpl.n	402dda <__smakebuf_r+0x16>
  402dcc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402dd0:	2101      	movs	r1, #1
  402dd2:	601a      	str	r2, [r3, #0]
  402dd4:	611a      	str	r2, [r3, #16]
  402dd6:	6159      	str	r1, [r3, #20]
  402dd8:	4770      	bx	lr
  402dda:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ddc:	b083      	sub	sp, #12
  402dde:	ab01      	add	r3, sp, #4
  402de0:	466a      	mov	r2, sp
  402de2:	460c      	mov	r4, r1
  402de4:	4605      	mov	r5, r0
  402de6:	f7ff ffbd 	bl	402d64 <__swhatbuf_r>
  402dea:	9900      	ldr	r1, [sp, #0]
  402dec:	4606      	mov	r6, r0
  402dee:	4628      	mov	r0, r5
  402df0:	f000 f834 	bl	402e5c <_malloc_r>
  402df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402df8:	b1d0      	cbz	r0, 402e30 <__smakebuf_r+0x6c>
  402dfa:	9a01      	ldr	r2, [sp, #4]
  402dfc:	4f12      	ldr	r7, [pc, #72]	; (402e48 <__smakebuf_r+0x84>)
  402dfe:	9900      	ldr	r1, [sp, #0]
  402e00:	63ef      	str	r7, [r5, #60]	; 0x3c
  402e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e06:	81a3      	strh	r3, [r4, #12]
  402e08:	6020      	str	r0, [r4, #0]
  402e0a:	6120      	str	r0, [r4, #16]
  402e0c:	6161      	str	r1, [r4, #20]
  402e0e:	b91a      	cbnz	r2, 402e18 <__smakebuf_r+0x54>
  402e10:	4333      	orrs	r3, r6
  402e12:	81a3      	strh	r3, [r4, #12]
  402e14:	b003      	add	sp, #12
  402e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e18:	4628      	mov	r0, r5
  402e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e1e:	f000 fecf 	bl	403bc0 <_isatty_r>
  402e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e26:	2800      	cmp	r0, #0
  402e28:	d0f2      	beq.n	402e10 <__smakebuf_r+0x4c>
  402e2a:	f043 0301 	orr.w	r3, r3, #1
  402e2e:	e7ef      	b.n	402e10 <__smakebuf_r+0x4c>
  402e30:	059a      	lsls	r2, r3, #22
  402e32:	d4ef      	bmi.n	402e14 <__smakebuf_r+0x50>
  402e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402e38:	f043 0302 	orr.w	r3, r3, #2
  402e3c:	2101      	movs	r1, #1
  402e3e:	81a3      	strh	r3, [r4, #12]
  402e40:	6022      	str	r2, [r4, #0]
  402e42:	6122      	str	r2, [r4, #16]
  402e44:	6161      	str	r1, [r4, #20]
  402e46:	e7e5      	b.n	402e14 <__smakebuf_r+0x50>
  402e48:	00402599 	.word	0x00402599

00402e4c <malloc>:
  402e4c:	4b02      	ldr	r3, [pc, #8]	; (402e58 <malloc+0xc>)
  402e4e:	4601      	mov	r1, r0
  402e50:	6818      	ldr	r0, [r3, #0]
  402e52:	f000 b803 	b.w	402e5c <_malloc_r>
  402e56:	bf00      	nop
  402e58:	20000430 	.word	0x20000430

00402e5c <_malloc_r>:
  402e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e60:	f101 050b 	add.w	r5, r1, #11
  402e64:	2d16      	cmp	r5, #22
  402e66:	b083      	sub	sp, #12
  402e68:	4606      	mov	r6, r0
  402e6a:	f240 809f 	bls.w	402fac <_malloc_r+0x150>
  402e6e:	f035 0507 	bics.w	r5, r5, #7
  402e72:	f100 80bf 	bmi.w	402ff4 <_malloc_r+0x198>
  402e76:	42a9      	cmp	r1, r5
  402e78:	f200 80bc 	bhi.w	402ff4 <_malloc_r+0x198>
  402e7c:	f000 faf8 	bl	403470 <__malloc_lock>
  402e80:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402e84:	f0c0 829c 	bcc.w	4033c0 <_malloc_r+0x564>
  402e88:	0a6b      	lsrs	r3, r5, #9
  402e8a:	f000 80ba 	beq.w	403002 <_malloc_r+0x1a6>
  402e8e:	2b04      	cmp	r3, #4
  402e90:	f200 8183 	bhi.w	40319a <_malloc_r+0x33e>
  402e94:	09a8      	lsrs	r0, r5, #6
  402e96:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402e9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402e9e:	3038      	adds	r0, #56	; 0x38
  402ea0:	4fc4      	ldr	r7, [pc, #784]	; (4031b4 <_malloc_r+0x358>)
  402ea2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402ea6:	f1a3 0108 	sub.w	r1, r3, #8
  402eaa:	685c      	ldr	r4, [r3, #4]
  402eac:	42a1      	cmp	r1, r4
  402eae:	d107      	bne.n	402ec0 <_malloc_r+0x64>
  402eb0:	e0ac      	b.n	40300c <_malloc_r+0x1b0>
  402eb2:	2a00      	cmp	r2, #0
  402eb4:	f280 80ac 	bge.w	403010 <_malloc_r+0x1b4>
  402eb8:	68e4      	ldr	r4, [r4, #12]
  402eba:	42a1      	cmp	r1, r4
  402ebc:	f000 80a6 	beq.w	40300c <_malloc_r+0x1b0>
  402ec0:	6863      	ldr	r3, [r4, #4]
  402ec2:	f023 0303 	bic.w	r3, r3, #3
  402ec6:	1b5a      	subs	r2, r3, r5
  402ec8:	2a0f      	cmp	r2, #15
  402eca:	ddf2      	ble.n	402eb2 <_malloc_r+0x56>
  402ecc:	49b9      	ldr	r1, [pc, #740]	; (4031b4 <_malloc_r+0x358>)
  402ece:	693c      	ldr	r4, [r7, #16]
  402ed0:	f101 0e08 	add.w	lr, r1, #8
  402ed4:	4574      	cmp	r4, lr
  402ed6:	f000 81b3 	beq.w	403240 <_malloc_r+0x3e4>
  402eda:	6863      	ldr	r3, [r4, #4]
  402edc:	f023 0303 	bic.w	r3, r3, #3
  402ee0:	1b5a      	subs	r2, r3, r5
  402ee2:	2a0f      	cmp	r2, #15
  402ee4:	f300 8199 	bgt.w	40321a <_malloc_r+0x3be>
  402ee8:	2a00      	cmp	r2, #0
  402eea:	f8c1 e014 	str.w	lr, [r1, #20]
  402eee:	f8c1 e010 	str.w	lr, [r1, #16]
  402ef2:	f280 809e 	bge.w	403032 <_malloc_r+0x1d6>
  402ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402efa:	f080 8167 	bcs.w	4031cc <_malloc_r+0x370>
  402efe:	08db      	lsrs	r3, r3, #3
  402f00:	f103 0c01 	add.w	ip, r3, #1
  402f04:	2201      	movs	r2, #1
  402f06:	109b      	asrs	r3, r3, #2
  402f08:	fa02 f303 	lsl.w	r3, r2, r3
  402f0c:	684a      	ldr	r2, [r1, #4]
  402f0e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402f12:	f8c4 8008 	str.w	r8, [r4, #8]
  402f16:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402f1a:	431a      	orrs	r2, r3
  402f1c:	f1a9 0308 	sub.w	r3, r9, #8
  402f20:	60e3      	str	r3, [r4, #12]
  402f22:	604a      	str	r2, [r1, #4]
  402f24:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402f28:	f8c8 400c 	str.w	r4, [r8, #12]
  402f2c:	1083      	asrs	r3, r0, #2
  402f2e:	2401      	movs	r4, #1
  402f30:	409c      	lsls	r4, r3
  402f32:	4294      	cmp	r4, r2
  402f34:	f200 808a 	bhi.w	40304c <_malloc_r+0x1f0>
  402f38:	4214      	tst	r4, r2
  402f3a:	d106      	bne.n	402f4a <_malloc_r+0xee>
  402f3c:	f020 0003 	bic.w	r0, r0, #3
  402f40:	0064      	lsls	r4, r4, #1
  402f42:	4214      	tst	r4, r2
  402f44:	f100 0004 	add.w	r0, r0, #4
  402f48:	d0fa      	beq.n	402f40 <_malloc_r+0xe4>
  402f4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402f4e:	46cc      	mov	ip, r9
  402f50:	4680      	mov	r8, r0
  402f52:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402f56:	458c      	cmp	ip, r1
  402f58:	d107      	bne.n	402f6a <_malloc_r+0x10e>
  402f5a:	e173      	b.n	403244 <_malloc_r+0x3e8>
  402f5c:	2a00      	cmp	r2, #0
  402f5e:	f280 8181 	bge.w	403264 <_malloc_r+0x408>
  402f62:	68c9      	ldr	r1, [r1, #12]
  402f64:	458c      	cmp	ip, r1
  402f66:	f000 816d 	beq.w	403244 <_malloc_r+0x3e8>
  402f6a:	684b      	ldr	r3, [r1, #4]
  402f6c:	f023 0303 	bic.w	r3, r3, #3
  402f70:	1b5a      	subs	r2, r3, r5
  402f72:	2a0f      	cmp	r2, #15
  402f74:	ddf2      	ble.n	402f5c <_malloc_r+0x100>
  402f76:	460c      	mov	r4, r1
  402f78:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402f7c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402f80:	194b      	adds	r3, r1, r5
  402f82:	f045 0501 	orr.w	r5, r5, #1
  402f86:	604d      	str	r5, [r1, #4]
  402f88:	f042 0101 	orr.w	r1, r2, #1
  402f8c:	f8c8 c00c 	str.w	ip, [r8, #12]
  402f90:	4630      	mov	r0, r6
  402f92:	f8cc 8008 	str.w	r8, [ip, #8]
  402f96:	617b      	str	r3, [r7, #20]
  402f98:	613b      	str	r3, [r7, #16]
  402f9a:	f8c3 e00c 	str.w	lr, [r3, #12]
  402f9e:	f8c3 e008 	str.w	lr, [r3, #8]
  402fa2:	6059      	str	r1, [r3, #4]
  402fa4:	509a      	str	r2, [r3, r2]
  402fa6:	f000 fa65 	bl	403474 <__malloc_unlock>
  402faa:	e01f      	b.n	402fec <_malloc_r+0x190>
  402fac:	2910      	cmp	r1, #16
  402fae:	d821      	bhi.n	402ff4 <_malloc_r+0x198>
  402fb0:	f000 fa5e 	bl	403470 <__malloc_lock>
  402fb4:	2510      	movs	r5, #16
  402fb6:	2306      	movs	r3, #6
  402fb8:	2002      	movs	r0, #2
  402fba:	4f7e      	ldr	r7, [pc, #504]	; (4031b4 <_malloc_r+0x358>)
  402fbc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402fc0:	f1a3 0208 	sub.w	r2, r3, #8
  402fc4:	685c      	ldr	r4, [r3, #4]
  402fc6:	4294      	cmp	r4, r2
  402fc8:	f000 8145 	beq.w	403256 <_malloc_r+0x3fa>
  402fcc:	6863      	ldr	r3, [r4, #4]
  402fce:	68e1      	ldr	r1, [r4, #12]
  402fd0:	68a5      	ldr	r5, [r4, #8]
  402fd2:	f023 0303 	bic.w	r3, r3, #3
  402fd6:	4423      	add	r3, r4
  402fd8:	4630      	mov	r0, r6
  402fda:	685a      	ldr	r2, [r3, #4]
  402fdc:	60e9      	str	r1, [r5, #12]
  402fde:	f042 0201 	orr.w	r2, r2, #1
  402fe2:	608d      	str	r5, [r1, #8]
  402fe4:	605a      	str	r2, [r3, #4]
  402fe6:	f000 fa45 	bl	403474 <__malloc_unlock>
  402fea:	3408      	adds	r4, #8
  402fec:	4620      	mov	r0, r4
  402fee:	b003      	add	sp, #12
  402ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ff4:	2400      	movs	r4, #0
  402ff6:	230c      	movs	r3, #12
  402ff8:	4620      	mov	r0, r4
  402ffa:	6033      	str	r3, [r6, #0]
  402ffc:	b003      	add	sp, #12
  402ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403002:	2380      	movs	r3, #128	; 0x80
  403004:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403008:	203f      	movs	r0, #63	; 0x3f
  40300a:	e749      	b.n	402ea0 <_malloc_r+0x44>
  40300c:	4670      	mov	r0, lr
  40300e:	e75d      	b.n	402ecc <_malloc_r+0x70>
  403010:	4423      	add	r3, r4
  403012:	68e1      	ldr	r1, [r4, #12]
  403014:	685a      	ldr	r2, [r3, #4]
  403016:	68a5      	ldr	r5, [r4, #8]
  403018:	f042 0201 	orr.w	r2, r2, #1
  40301c:	60e9      	str	r1, [r5, #12]
  40301e:	4630      	mov	r0, r6
  403020:	608d      	str	r5, [r1, #8]
  403022:	605a      	str	r2, [r3, #4]
  403024:	f000 fa26 	bl	403474 <__malloc_unlock>
  403028:	3408      	adds	r4, #8
  40302a:	4620      	mov	r0, r4
  40302c:	b003      	add	sp, #12
  40302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403032:	4423      	add	r3, r4
  403034:	4630      	mov	r0, r6
  403036:	685a      	ldr	r2, [r3, #4]
  403038:	f042 0201 	orr.w	r2, r2, #1
  40303c:	605a      	str	r2, [r3, #4]
  40303e:	f000 fa19 	bl	403474 <__malloc_unlock>
  403042:	3408      	adds	r4, #8
  403044:	4620      	mov	r0, r4
  403046:	b003      	add	sp, #12
  403048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40304c:	68bc      	ldr	r4, [r7, #8]
  40304e:	6863      	ldr	r3, [r4, #4]
  403050:	f023 0803 	bic.w	r8, r3, #3
  403054:	45a8      	cmp	r8, r5
  403056:	d304      	bcc.n	403062 <_malloc_r+0x206>
  403058:	ebc5 0308 	rsb	r3, r5, r8
  40305c:	2b0f      	cmp	r3, #15
  40305e:	f300 808c 	bgt.w	40317a <_malloc_r+0x31e>
  403062:	4b55      	ldr	r3, [pc, #340]	; (4031b8 <_malloc_r+0x35c>)
  403064:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4031c8 <_malloc_r+0x36c>
  403068:	681a      	ldr	r2, [r3, #0]
  40306a:	f8d9 3000 	ldr.w	r3, [r9]
  40306e:	3301      	adds	r3, #1
  403070:	442a      	add	r2, r5
  403072:	eb04 0a08 	add.w	sl, r4, r8
  403076:	f000 8160 	beq.w	40333a <_malloc_r+0x4de>
  40307a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40307e:	320f      	adds	r2, #15
  403080:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  403084:	f022 020f 	bic.w	r2, r2, #15
  403088:	4611      	mov	r1, r2
  40308a:	4630      	mov	r0, r6
  40308c:	9201      	str	r2, [sp, #4]
  40308e:	f000 fbe3 	bl	403858 <_sbrk_r>
  403092:	f1b0 3fff 	cmp.w	r0, #4294967295
  403096:	4683      	mov	fp, r0
  403098:	9a01      	ldr	r2, [sp, #4]
  40309a:	f000 8158 	beq.w	40334e <_malloc_r+0x4f2>
  40309e:	4582      	cmp	sl, r0
  4030a0:	f200 80fc 	bhi.w	40329c <_malloc_r+0x440>
  4030a4:	4b45      	ldr	r3, [pc, #276]	; (4031bc <_malloc_r+0x360>)
  4030a6:	6819      	ldr	r1, [r3, #0]
  4030a8:	45da      	cmp	sl, fp
  4030aa:	4411      	add	r1, r2
  4030ac:	6019      	str	r1, [r3, #0]
  4030ae:	f000 8153 	beq.w	403358 <_malloc_r+0x4fc>
  4030b2:	f8d9 0000 	ldr.w	r0, [r9]
  4030b6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4031c8 <_malloc_r+0x36c>
  4030ba:	3001      	adds	r0, #1
  4030bc:	bf1b      	ittet	ne
  4030be:	ebca 0a0b 	rsbne	sl, sl, fp
  4030c2:	4451      	addne	r1, sl
  4030c4:	f8ce b000 	streq.w	fp, [lr]
  4030c8:	6019      	strne	r1, [r3, #0]
  4030ca:	f01b 0107 	ands.w	r1, fp, #7
  4030ce:	f000 8117 	beq.w	403300 <_malloc_r+0x4a4>
  4030d2:	f1c1 0008 	rsb	r0, r1, #8
  4030d6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4030da:	4483      	add	fp, r0
  4030dc:	3108      	adds	r1, #8
  4030de:	445a      	add	r2, fp
  4030e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4030e4:	ebc2 0901 	rsb	r9, r2, r1
  4030e8:	4649      	mov	r1, r9
  4030ea:	4630      	mov	r0, r6
  4030ec:	9301      	str	r3, [sp, #4]
  4030ee:	f000 fbb3 	bl	403858 <_sbrk_r>
  4030f2:	1c43      	adds	r3, r0, #1
  4030f4:	9b01      	ldr	r3, [sp, #4]
  4030f6:	f000 813f 	beq.w	403378 <_malloc_r+0x51c>
  4030fa:	ebcb 0200 	rsb	r2, fp, r0
  4030fe:	444a      	add	r2, r9
  403100:	f042 0201 	orr.w	r2, r2, #1
  403104:	6819      	ldr	r1, [r3, #0]
  403106:	f8c7 b008 	str.w	fp, [r7, #8]
  40310a:	4449      	add	r1, r9
  40310c:	42bc      	cmp	r4, r7
  40310e:	f8cb 2004 	str.w	r2, [fp, #4]
  403112:	6019      	str	r1, [r3, #0]
  403114:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4031bc <_malloc_r+0x360>
  403118:	d016      	beq.n	403148 <_malloc_r+0x2ec>
  40311a:	f1b8 0f0f 	cmp.w	r8, #15
  40311e:	f240 80fd 	bls.w	40331c <_malloc_r+0x4c0>
  403122:	6862      	ldr	r2, [r4, #4]
  403124:	f1a8 030c 	sub.w	r3, r8, #12
  403128:	f023 0307 	bic.w	r3, r3, #7
  40312c:	18e0      	adds	r0, r4, r3
  40312e:	f002 0201 	and.w	r2, r2, #1
  403132:	f04f 0e05 	mov.w	lr, #5
  403136:	431a      	orrs	r2, r3
  403138:	2b0f      	cmp	r3, #15
  40313a:	6062      	str	r2, [r4, #4]
  40313c:	f8c0 e004 	str.w	lr, [r0, #4]
  403140:	f8c0 e008 	str.w	lr, [r0, #8]
  403144:	f200 811c 	bhi.w	403380 <_malloc_r+0x524>
  403148:	4b1d      	ldr	r3, [pc, #116]	; (4031c0 <_malloc_r+0x364>)
  40314a:	68bc      	ldr	r4, [r7, #8]
  40314c:	681a      	ldr	r2, [r3, #0]
  40314e:	4291      	cmp	r1, r2
  403150:	bf88      	it	hi
  403152:	6019      	strhi	r1, [r3, #0]
  403154:	4b1b      	ldr	r3, [pc, #108]	; (4031c4 <_malloc_r+0x368>)
  403156:	681a      	ldr	r2, [r3, #0]
  403158:	4291      	cmp	r1, r2
  40315a:	6862      	ldr	r2, [r4, #4]
  40315c:	bf88      	it	hi
  40315e:	6019      	strhi	r1, [r3, #0]
  403160:	f022 0203 	bic.w	r2, r2, #3
  403164:	4295      	cmp	r5, r2
  403166:	eba2 0305 	sub.w	r3, r2, r5
  40316a:	d801      	bhi.n	403170 <_malloc_r+0x314>
  40316c:	2b0f      	cmp	r3, #15
  40316e:	dc04      	bgt.n	40317a <_malloc_r+0x31e>
  403170:	4630      	mov	r0, r6
  403172:	f000 f97f 	bl	403474 <__malloc_unlock>
  403176:	2400      	movs	r4, #0
  403178:	e738      	b.n	402fec <_malloc_r+0x190>
  40317a:	1962      	adds	r2, r4, r5
  40317c:	f043 0301 	orr.w	r3, r3, #1
  403180:	f045 0501 	orr.w	r5, r5, #1
  403184:	6065      	str	r5, [r4, #4]
  403186:	4630      	mov	r0, r6
  403188:	60ba      	str	r2, [r7, #8]
  40318a:	6053      	str	r3, [r2, #4]
  40318c:	f000 f972 	bl	403474 <__malloc_unlock>
  403190:	3408      	adds	r4, #8
  403192:	4620      	mov	r0, r4
  403194:	b003      	add	sp, #12
  403196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40319a:	2b14      	cmp	r3, #20
  40319c:	d971      	bls.n	403282 <_malloc_r+0x426>
  40319e:	2b54      	cmp	r3, #84	; 0x54
  4031a0:	f200 80a4 	bhi.w	4032ec <_malloc_r+0x490>
  4031a4:	0b28      	lsrs	r0, r5, #12
  4031a6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4031aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031ae:	306e      	adds	r0, #110	; 0x6e
  4031b0:	e676      	b.n	402ea0 <_malloc_r+0x44>
  4031b2:	bf00      	nop
  4031b4:	20000458 	.word	0x20000458
  4031b8:	200008e8 	.word	0x200008e8
  4031bc:	200008ec 	.word	0x200008ec
  4031c0:	200008e4 	.word	0x200008e4
  4031c4:	200008e0 	.word	0x200008e0
  4031c8:	20000864 	.word	0x20000864
  4031cc:	0a5a      	lsrs	r2, r3, #9
  4031ce:	2a04      	cmp	r2, #4
  4031d0:	d95e      	bls.n	403290 <_malloc_r+0x434>
  4031d2:	2a14      	cmp	r2, #20
  4031d4:	f200 80b3 	bhi.w	40333e <_malloc_r+0x4e2>
  4031d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4031dc:	0049      	lsls	r1, r1, #1
  4031de:	325b      	adds	r2, #91	; 0x5b
  4031e0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4031e4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4031e8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4033c8 <_malloc_r+0x56c>
  4031ec:	f1ac 0c08 	sub.w	ip, ip, #8
  4031f0:	458c      	cmp	ip, r1
  4031f2:	f000 8088 	beq.w	403306 <_malloc_r+0x4aa>
  4031f6:	684a      	ldr	r2, [r1, #4]
  4031f8:	f022 0203 	bic.w	r2, r2, #3
  4031fc:	4293      	cmp	r3, r2
  4031fe:	d202      	bcs.n	403206 <_malloc_r+0x3aa>
  403200:	6889      	ldr	r1, [r1, #8]
  403202:	458c      	cmp	ip, r1
  403204:	d1f7      	bne.n	4031f6 <_malloc_r+0x39a>
  403206:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40320a:	687a      	ldr	r2, [r7, #4]
  40320c:	f8c4 c00c 	str.w	ip, [r4, #12]
  403210:	60a1      	str	r1, [r4, #8]
  403212:	f8cc 4008 	str.w	r4, [ip, #8]
  403216:	60cc      	str	r4, [r1, #12]
  403218:	e688      	b.n	402f2c <_malloc_r+0xd0>
  40321a:	1963      	adds	r3, r4, r5
  40321c:	f042 0701 	orr.w	r7, r2, #1
  403220:	f045 0501 	orr.w	r5, r5, #1
  403224:	6065      	str	r5, [r4, #4]
  403226:	4630      	mov	r0, r6
  403228:	614b      	str	r3, [r1, #20]
  40322a:	610b      	str	r3, [r1, #16]
  40322c:	f8c3 e00c 	str.w	lr, [r3, #12]
  403230:	f8c3 e008 	str.w	lr, [r3, #8]
  403234:	605f      	str	r7, [r3, #4]
  403236:	509a      	str	r2, [r3, r2]
  403238:	3408      	adds	r4, #8
  40323a:	f000 f91b 	bl	403474 <__malloc_unlock>
  40323e:	e6d5      	b.n	402fec <_malloc_r+0x190>
  403240:	684a      	ldr	r2, [r1, #4]
  403242:	e673      	b.n	402f2c <_malloc_r+0xd0>
  403244:	f108 0801 	add.w	r8, r8, #1
  403248:	f018 0f03 	tst.w	r8, #3
  40324c:	f10c 0c08 	add.w	ip, ip, #8
  403250:	f47f ae7f 	bne.w	402f52 <_malloc_r+0xf6>
  403254:	e030      	b.n	4032b8 <_malloc_r+0x45c>
  403256:	68dc      	ldr	r4, [r3, #12]
  403258:	42a3      	cmp	r3, r4
  40325a:	bf08      	it	eq
  40325c:	3002      	addeq	r0, #2
  40325e:	f43f ae35 	beq.w	402ecc <_malloc_r+0x70>
  403262:	e6b3      	b.n	402fcc <_malloc_r+0x170>
  403264:	440b      	add	r3, r1
  403266:	460c      	mov	r4, r1
  403268:	685a      	ldr	r2, [r3, #4]
  40326a:	68c9      	ldr	r1, [r1, #12]
  40326c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  403270:	f042 0201 	orr.w	r2, r2, #1
  403274:	605a      	str	r2, [r3, #4]
  403276:	4630      	mov	r0, r6
  403278:	60e9      	str	r1, [r5, #12]
  40327a:	608d      	str	r5, [r1, #8]
  40327c:	f000 f8fa 	bl	403474 <__malloc_unlock>
  403280:	e6b4      	b.n	402fec <_malloc_r+0x190>
  403282:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  403286:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40328a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40328e:	e607      	b.n	402ea0 <_malloc_r+0x44>
  403290:	099a      	lsrs	r2, r3, #6
  403292:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403296:	0049      	lsls	r1, r1, #1
  403298:	3238      	adds	r2, #56	; 0x38
  40329a:	e7a1      	b.n	4031e0 <_malloc_r+0x384>
  40329c:	42bc      	cmp	r4, r7
  40329e:	4b4a      	ldr	r3, [pc, #296]	; (4033c8 <_malloc_r+0x56c>)
  4032a0:	f43f af00 	beq.w	4030a4 <_malloc_r+0x248>
  4032a4:	689c      	ldr	r4, [r3, #8]
  4032a6:	6862      	ldr	r2, [r4, #4]
  4032a8:	f022 0203 	bic.w	r2, r2, #3
  4032ac:	e75a      	b.n	403164 <_malloc_r+0x308>
  4032ae:	f859 3908 	ldr.w	r3, [r9], #-8
  4032b2:	4599      	cmp	r9, r3
  4032b4:	f040 8082 	bne.w	4033bc <_malloc_r+0x560>
  4032b8:	f010 0f03 	tst.w	r0, #3
  4032bc:	f100 30ff 	add.w	r0, r0, #4294967295
  4032c0:	d1f5      	bne.n	4032ae <_malloc_r+0x452>
  4032c2:	687b      	ldr	r3, [r7, #4]
  4032c4:	ea23 0304 	bic.w	r3, r3, r4
  4032c8:	607b      	str	r3, [r7, #4]
  4032ca:	0064      	lsls	r4, r4, #1
  4032cc:	429c      	cmp	r4, r3
  4032ce:	f63f aebd 	bhi.w	40304c <_malloc_r+0x1f0>
  4032d2:	2c00      	cmp	r4, #0
  4032d4:	f43f aeba 	beq.w	40304c <_malloc_r+0x1f0>
  4032d8:	421c      	tst	r4, r3
  4032da:	4640      	mov	r0, r8
  4032dc:	f47f ae35 	bne.w	402f4a <_malloc_r+0xee>
  4032e0:	0064      	lsls	r4, r4, #1
  4032e2:	421c      	tst	r4, r3
  4032e4:	f100 0004 	add.w	r0, r0, #4
  4032e8:	d0fa      	beq.n	4032e0 <_malloc_r+0x484>
  4032ea:	e62e      	b.n	402f4a <_malloc_r+0xee>
  4032ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4032f0:	d818      	bhi.n	403324 <_malloc_r+0x4c8>
  4032f2:	0be8      	lsrs	r0, r5, #15
  4032f4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4032f8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4032fc:	3077      	adds	r0, #119	; 0x77
  4032fe:	e5cf      	b.n	402ea0 <_malloc_r+0x44>
  403300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403304:	e6eb      	b.n	4030de <_malloc_r+0x282>
  403306:	2101      	movs	r1, #1
  403308:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40330c:	1092      	asrs	r2, r2, #2
  40330e:	fa01 f202 	lsl.w	r2, r1, r2
  403312:	431a      	orrs	r2, r3
  403314:	f8c8 2004 	str.w	r2, [r8, #4]
  403318:	4661      	mov	r1, ip
  40331a:	e777      	b.n	40320c <_malloc_r+0x3b0>
  40331c:	2301      	movs	r3, #1
  40331e:	f8cb 3004 	str.w	r3, [fp, #4]
  403322:	e725      	b.n	403170 <_malloc_r+0x314>
  403324:	f240 5254 	movw	r2, #1364	; 0x554
  403328:	4293      	cmp	r3, r2
  40332a:	d820      	bhi.n	40336e <_malloc_r+0x512>
  40332c:	0ca8      	lsrs	r0, r5, #18
  40332e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  403332:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403336:	307c      	adds	r0, #124	; 0x7c
  403338:	e5b2      	b.n	402ea0 <_malloc_r+0x44>
  40333a:	3210      	adds	r2, #16
  40333c:	e6a4      	b.n	403088 <_malloc_r+0x22c>
  40333e:	2a54      	cmp	r2, #84	; 0x54
  403340:	d826      	bhi.n	403390 <_malloc_r+0x534>
  403342:	0b1a      	lsrs	r2, r3, #12
  403344:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403348:	0049      	lsls	r1, r1, #1
  40334a:	326e      	adds	r2, #110	; 0x6e
  40334c:	e748      	b.n	4031e0 <_malloc_r+0x384>
  40334e:	68bc      	ldr	r4, [r7, #8]
  403350:	6862      	ldr	r2, [r4, #4]
  403352:	f022 0203 	bic.w	r2, r2, #3
  403356:	e705      	b.n	403164 <_malloc_r+0x308>
  403358:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40335c:	2800      	cmp	r0, #0
  40335e:	f47f aea8 	bne.w	4030b2 <_malloc_r+0x256>
  403362:	4442      	add	r2, r8
  403364:	68bb      	ldr	r3, [r7, #8]
  403366:	f042 0201 	orr.w	r2, r2, #1
  40336a:	605a      	str	r2, [r3, #4]
  40336c:	e6ec      	b.n	403148 <_malloc_r+0x2ec>
  40336e:	23fe      	movs	r3, #254	; 0xfe
  403370:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  403374:	207e      	movs	r0, #126	; 0x7e
  403376:	e593      	b.n	402ea0 <_malloc_r+0x44>
  403378:	2201      	movs	r2, #1
  40337a:	f04f 0900 	mov.w	r9, #0
  40337e:	e6c1      	b.n	403104 <_malloc_r+0x2a8>
  403380:	f104 0108 	add.w	r1, r4, #8
  403384:	4630      	mov	r0, r6
  403386:	f7ff fa4f 	bl	402828 <_free_r>
  40338a:	f8d9 1000 	ldr.w	r1, [r9]
  40338e:	e6db      	b.n	403148 <_malloc_r+0x2ec>
  403390:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403394:	d805      	bhi.n	4033a2 <_malloc_r+0x546>
  403396:	0bda      	lsrs	r2, r3, #15
  403398:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40339c:	0049      	lsls	r1, r1, #1
  40339e:	3277      	adds	r2, #119	; 0x77
  4033a0:	e71e      	b.n	4031e0 <_malloc_r+0x384>
  4033a2:	f240 5154 	movw	r1, #1364	; 0x554
  4033a6:	428a      	cmp	r2, r1
  4033a8:	d805      	bhi.n	4033b6 <_malloc_r+0x55a>
  4033aa:	0c9a      	lsrs	r2, r3, #18
  4033ac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4033b0:	0049      	lsls	r1, r1, #1
  4033b2:	327c      	adds	r2, #124	; 0x7c
  4033b4:	e714      	b.n	4031e0 <_malloc_r+0x384>
  4033b6:	21fe      	movs	r1, #254	; 0xfe
  4033b8:	227e      	movs	r2, #126	; 0x7e
  4033ba:	e711      	b.n	4031e0 <_malloc_r+0x384>
  4033bc:	687b      	ldr	r3, [r7, #4]
  4033be:	e784      	b.n	4032ca <_malloc_r+0x46e>
  4033c0:	08e8      	lsrs	r0, r5, #3
  4033c2:	1c43      	adds	r3, r0, #1
  4033c4:	005b      	lsls	r3, r3, #1
  4033c6:	e5f8      	b.n	402fba <_malloc_r+0x15e>
  4033c8:	20000458 	.word	0x20000458
  4033cc:	00000000 	.word	0x00000000

004033d0 <memchr>:
  4033d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033d4:	2a10      	cmp	r2, #16
  4033d6:	db2b      	blt.n	403430 <memchr+0x60>
  4033d8:	f010 0f07 	tst.w	r0, #7
  4033dc:	d008      	beq.n	4033f0 <memchr+0x20>
  4033de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4033e2:	3a01      	subs	r2, #1
  4033e4:	428b      	cmp	r3, r1
  4033e6:	d02d      	beq.n	403444 <memchr+0x74>
  4033e8:	f010 0f07 	tst.w	r0, #7
  4033ec:	b342      	cbz	r2, 403440 <memchr+0x70>
  4033ee:	d1f6      	bne.n	4033de <memchr+0xe>
  4033f0:	b4f0      	push	{r4, r5, r6, r7}
  4033f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4033f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4033fa:	f022 0407 	bic.w	r4, r2, #7
  4033fe:	f07f 0700 	mvns.w	r7, #0
  403402:	2300      	movs	r3, #0
  403404:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403408:	3c08      	subs	r4, #8
  40340a:	ea85 0501 	eor.w	r5, r5, r1
  40340e:	ea86 0601 	eor.w	r6, r6, r1
  403412:	fa85 f547 	uadd8	r5, r5, r7
  403416:	faa3 f587 	sel	r5, r3, r7
  40341a:	fa86 f647 	uadd8	r6, r6, r7
  40341e:	faa5 f687 	sel	r6, r5, r7
  403422:	b98e      	cbnz	r6, 403448 <memchr+0x78>
  403424:	d1ee      	bne.n	403404 <memchr+0x34>
  403426:	bcf0      	pop	{r4, r5, r6, r7}
  403428:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40342c:	f002 0207 	and.w	r2, r2, #7
  403430:	b132      	cbz	r2, 403440 <memchr+0x70>
  403432:	f810 3b01 	ldrb.w	r3, [r0], #1
  403436:	3a01      	subs	r2, #1
  403438:	ea83 0301 	eor.w	r3, r3, r1
  40343c:	b113      	cbz	r3, 403444 <memchr+0x74>
  40343e:	d1f8      	bne.n	403432 <memchr+0x62>
  403440:	2000      	movs	r0, #0
  403442:	4770      	bx	lr
  403444:	3801      	subs	r0, #1
  403446:	4770      	bx	lr
  403448:	2d00      	cmp	r5, #0
  40344a:	bf06      	itte	eq
  40344c:	4635      	moveq	r5, r6
  40344e:	3803      	subeq	r0, #3
  403450:	3807      	subne	r0, #7
  403452:	f015 0f01 	tst.w	r5, #1
  403456:	d107      	bne.n	403468 <memchr+0x98>
  403458:	3001      	adds	r0, #1
  40345a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40345e:	bf02      	ittt	eq
  403460:	3001      	addeq	r0, #1
  403462:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403466:	3001      	addeq	r0, #1
  403468:	bcf0      	pop	{r4, r5, r6, r7}
  40346a:	3801      	subs	r0, #1
  40346c:	4770      	bx	lr
  40346e:	bf00      	nop

00403470 <__malloc_lock>:
  403470:	4770      	bx	lr
  403472:	bf00      	nop

00403474 <__malloc_unlock>:
  403474:	4770      	bx	lr
  403476:	bf00      	nop

00403478 <_realloc_r>:
  403478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40347c:	4617      	mov	r7, r2
  40347e:	b083      	sub	sp, #12
  403480:	2900      	cmp	r1, #0
  403482:	f000 80c1 	beq.w	403608 <_realloc_r+0x190>
  403486:	460e      	mov	r6, r1
  403488:	4681      	mov	r9, r0
  40348a:	f107 050b 	add.w	r5, r7, #11
  40348e:	f7ff ffef 	bl	403470 <__malloc_lock>
  403492:	f856 ec04 	ldr.w	lr, [r6, #-4]
  403496:	2d16      	cmp	r5, #22
  403498:	f02e 0403 	bic.w	r4, lr, #3
  40349c:	f1a6 0808 	sub.w	r8, r6, #8
  4034a0:	d840      	bhi.n	403524 <_realloc_r+0xac>
  4034a2:	2210      	movs	r2, #16
  4034a4:	4615      	mov	r5, r2
  4034a6:	42af      	cmp	r7, r5
  4034a8:	d841      	bhi.n	40352e <_realloc_r+0xb6>
  4034aa:	4294      	cmp	r4, r2
  4034ac:	da75      	bge.n	40359a <_realloc_r+0x122>
  4034ae:	4bc9      	ldr	r3, [pc, #804]	; (4037d4 <_realloc_r+0x35c>)
  4034b0:	6899      	ldr	r1, [r3, #8]
  4034b2:	eb08 0004 	add.w	r0, r8, r4
  4034b6:	4288      	cmp	r0, r1
  4034b8:	6841      	ldr	r1, [r0, #4]
  4034ba:	f000 80d9 	beq.w	403670 <_realloc_r+0x1f8>
  4034be:	f021 0301 	bic.w	r3, r1, #1
  4034c2:	4403      	add	r3, r0
  4034c4:	685b      	ldr	r3, [r3, #4]
  4034c6:	07db      	lsls	r3, r3, #31
  4034c8:	d57d      	bpl.n	4035c6 <_realloc_r+0x14e>
  4034ca:	f01e 0f01 	tst.w	lr, #1
  4034ce:	d035      	beq.n	40353c <_realloc_r+0xc4>
  4034d0:	4639      	mov	r1, r7
  4034d2:	4648      	mov	r0, r9
  4034d4:	f7ff fcc2 	bl	402e5c <_malloc_r>
  4034d8:	4607      	mov	r7, r0
  4034da:	b1e0      	cbz	r0, 403516 <_realloc_r+0x9e>
  4034dc:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4034e0:	f023 0301 	bic.w	r3, r3, #1
  4034e4:	4443      	add	r3, r8
  4034e6:	f1a0 0208 	sub.w	r2, r0, #8
  4034ea:	429a      	cmp	r2, r3
  4034ec:	f000 8144 	beq.w	403778 <_realloc_r+0x300>
  4034f0:	1f22      	subs	r2, r4, #4
  4034f2:	2a24      	cmp	r2, #36	; 0x24
  4034f4:	f200 8131 	bhi.w	40375a <_realloc_r+0x2e2>
  4034f8:	2a13      	cmp	r2, #19
  4034fa:	f200 8104 	bhi.w	403706 <_realloc_r+0x28e>
  4034fe:	4603      	mov	r3, r0
  403500:	4632      	mov	r2, r6
  403502:	6811      	ldr	r1, [r2, #0]
  403504:	6019      	str	r1, [r3, #0]
  403506:	6851      	ldr	r1, [r2, #4]
  403508:	6059      	str	r1, [r3, #4]
  40350a:	6892      	ldr	r2, [r2, #8]
  40350c:	609a      	str	r2, [r3, #8]
  40350e:	4631      	mov	r1, r6
  403510:	4648      	mov	r0, r9
  403512:	f7ff f989 	bl	402828 <_free_r>
  403516:	4648      	mov	r0, r9
  403518:	f7ff ffac 	bl	403474 <__malloc_unlock>
  40351c:	4638      	mov	r0, r7
  40351e:	b003      	add	sp, #12
  403520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403524:	f025 0507 	bic.w	r5, r5, #7
  403528:	2d00      	cmp	r5, #0
  40352a:	462a      	mov	r2, r5
  40352c:	dabb      	bge.n	4034a6 <_realloc_r+0x2e>
  40352e:	230c      	movs	r3, #12
  403530:	2000      	movs	r0, #0
  403532:	f8c9 3000 	str.w	r3, [r9]
  403536:	b003      	add	sp, #12
  403538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40353c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403540:	ebc3 0a08 	rsb	sl, r3, r8
  403544:	f8da 3004 	ldr.w	r3, [sl, #4]
  403548:	f023 0c03 	bic.w	ip, r3, #3
  40354c:	eb04 030c 	add.w	r3, r4, ip
  403550:	4293      	cmp	r3, r2
  403552:	dbbd      	blt.n	4034d0 <_realloc_r+0x58>
  403554:	4657      	mov	r7, sl
  403556:	f8da 100c 	ldr.w	r1, [sl, #12]
  40355a:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40355e:	1f22      	subs	r2, r4, #4
  403560:	2a24      	cmp	r2, #36	; 0x24
  403562:	60c1      	str	r1, [r0, #12]
  403564:	6088      	str	r0, [r1, #8]
  403566:	f200 8117 	bhi.w	403798 <_realloc_r+0x320>
  40356a:	2a13      	cmp	r2, #19
  40356c:	f240 8112 	bls.w	403794 <_realloc_r+0x31c>
  403570:	6831      	ldr	r1, [r6, #0]
  403572:	f8ca 1008 	str.w	r1, [sl, #8]
  403576:	6871      	ldr	r1, [r6, #4]
  403578:	f8ca 100c 	str.w	r1, [sl, #12]
  40357c:	2a1b      	cmp	r2, #27
  40357e:	f200 812b 	bhi.w	4037d8 <_realloc_r+0x360>
  403582:	3608      	adds	r6, #8
  403584:	f10a 0210 	add.w	r2, sl, #16
  403588:	6831      	ldr	r1, [r6, #0]
  40358a:	6011      	str	r1, [r2, #0]
  40358c:	6871      	ldr	r1, [r6, #4]
  40358e:	6051      	str	r1, [r2, #4]
  403590:	68b1      	ldr	r1, [r6, #8]
  403592:	6091      	str	r1, [r2, #8]
  403594:	463e      	mov	r6, r7
  403596:	461c      	mov	r4, r3
  403598:	46d0      	mov	r8, sl
  40359a:	1b63      	subs	r3, r4, r5
  40359c:	2b0f      	cmp	r3, #15
  40359e:	d81d      	bhi.n	4035dc <_realloc_r+0x164>
  4035a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4035a4:	f003 0301 	and.w	r3, r3, #1
  4035a8:	4323      	orrs	r3, r4
  4035aa:	4444      	add	r4, r8
  4035ac:	f8c8 3004 	str.w	r3, [r8, #4]
  4035b0:	6863      	ldr	r3, [r4, #4]
  4035b2:	f043 0301 	orr.w	r3, r3, #1
  4035b6:	6063      	str	r3, [r4, #4]
  4035b8:	4648      	mov	r0, r9
  4035ba:	f7ff ff5b 	bl	403474 <__malloc_unlock>
  4035be:	4630      	mov	r0, r6
  4035c0:	b003      	add	sp, #12
  4035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035c6:	f021 0103 	bic.w	r1, r1, #3
  4035ca:	4421      	add	r1, r4
  4035cc:	4291      	cmp	r1, r2
  4035ce:	db21      	blt.n	403614 <_realloc_r+0x19c>
  4035d0:	68c3      	ldr	r3, [r0, #12]
  4035d2:	6882      	ldr	r2, [r0, #8]
  4035d4:	460c      	mov	r4, r1
  4035d6:	60d3      	str	r3, [r2, #12]
  4035d8:	609a      	str	r2, [r3, #8]
  4035da:	e7de      	b.n	40359a <_realloc_r+0x122>
  4035dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4035e0:	eb08 0105 	add.w	r1, r8, r5
  4035e4:	f002 0201 	and.w	r2, r2, #1
  4035e8:	4315      	orrs	r5, r2
  4035ea:	f043 0201 	orr.w	r2, r3, #1
  4035ee:	440b      	add	r3, r1
  4035f0:	f8c8 5004 	str.w	r5, [r8, #4]
  4035f4:	604a      	str	r2, [r1, #4]
  4035f6:	685a      	ldr	r2, [r3, #4]
  4035f8:	f042 0201 	orr.w	r2, r2, #1
  4035fc:	3108      	adds	r1, #8
  4035fe:	605a      	str	r2, [r3, #4]
  403600:	4648      	mov	r0, r9
  403602:	f7ff f911 	bl	402828 <_free_r>
  403606:	e7d7      	b.n	4035b8 <_realloc_r+0x140>
  403608:	4611      	mov	r1, r2
  40360a:	b003      	add	sp, #12
  40360c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403610:	f7ff bc24 	b.w	402e5c <_malloc_r>
  403614:	f01e 0f01 	tst.w	lr, #1
  403618:	f47f af5a 	bne.w	4034d0 <_realloc_r+0x58>
  40361c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403620:	ebc3 0a08 	rsb	sl, r3, r8
  403624:	f8da 3004 	ldr.w	r3, [sl, #4]
  403628:	f023 0c03 	bic.w	ip, r3, #3
  40362c:	eb01 0e0c 	add.w	lr, r1, ip
  403630:	4596      	cmp	lr, r2
  403632:	db8b      	blt.n	40354c <_realloc_r+0xd4>
  403634:	68c3      	ldr	r3, [r0, #12]
  403636:	6882      	ldr	r2, [r0, #8]
  403638:	4657      	mov	r7, sl
  40363a:	60d3      	str	r3, [r2, #12]
  40363c:	609a      	str	r2, [r3, #8]
  40363e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403642:	f8da 300c 	ldr.w	r3, [sl, #12]
  403646:	60cb      	str	r3, [r1, #12]
  403648:	1f22      	subs	r2, r4, #4
  40364a:	2a24      	cmp	r2, #36	; 0x24
  40364c:	6099      	str	r1, [r3, #8]
  40364e:	f200 8099 	bhi.w	403784 <_realloc_r+0x30c>
  403652:	2a13      	cmp	r2, #19
  403654:	d962      	bls.n	40371c <_realloc_r+0x2a4>
  403656:	6833      	ldr	r3, [r6, #0]
  403658:	f8ca 3008 	str.w	r3, [sl, #8]
  40365c:	6873      	ldr	r3, [r6, #4]
  40365e:	f8ca 300c 	str.w	r3, [sl, #12]
  403662:	2a1b      	cmp	r2, #27
  403664:	f200 80a0 	bhi.w	4037a8 <_realloc_r+0x330>
  403668:	3608      	adds	r6, #8
  40366a:	f10a 0310 	add.w	r3, sl, #16
  40366e:	e056      	b.n	40371e <_realloc_r+0x2a6>
  403670:	f021 0b03 	bic.w	fp, r1, #3
  403674:	44a3      	add	fp, r4
  403676:	f105 0010 	add.w	r0, r5, #16
  40367a:	4583      	cmp	fp, r0
  40367c:	da59      	bge.n	403732 <_realloc_r+0x2ba>
  40367e:	f01e 0f01 	tst.w	lr, #1
  403682:	f47f af25 	bne.w	4034d0 <_realloc_r+0x58>
  403686:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40368a:	ebc1 0a08 	rsb	sl, r1, r8
  40368e:	f8da 1004 	ldr.w	r1, [sl, #4]
  403692:	f021 0c03 	bic.w	ip, r1, #3
  403696:	44e3      	add	fp, ip
  403698:	4558      	cmp	r0, fp
  40369a:	f73f af57 	bgt.w	40354c <_realloc_r+0xd4>
  40369e:	4657      	mov	r7, sl
  4036a0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4036a4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4036a8:	1f22      	subs	r2, r4, #4
  4036aa:	2a24      	cmp	r2, #36	; 0x24
  4036ac:	60c1      	str	r1, [r0, #12]
  4036ae:	6088      	str	r0, [r1, #8]
  4036b0:	f200 80b4 	bhi.w	40381c <_realloc_r+0x3a4>
  4036b4:	2a13      	cmp	r2, #19
  4036b6:	f240 80a5 	bls.w	403804 <_realloc_r+0x38c>
  4036ba:	6831      	ldr	r1, [r6, #0]
  4036bc:	f8ca 1008 	str.w	r1, [sl, #8]
  4036c0:	6871      	ldr	r1, [r6, #4]
  4036c2:	f8ca 100c 	str.w	r1, [sl, #12]
  4036c6:	2a1b      	cmp	r2, #27
  4036c8:	f200 80af 	bhi.w	40382a <_realloc_r+0x3b2>
  4036cc:	3608      	adds	r6, #8
  4036ce:	f10a 0210 	add.w	r2, sl, #16
  4036d2:	6831      	ldr	r1, [r6, #0]
  4036d4:	6011      	str	r1, [r2, #0]
  4036d6:	6871      	ldr	r1, [r6, #4]
  4036d8:	6051      	str	r1, [r2, #4]
  4036da:	68b1      	ldr	r1, [r6, #8]
  4036dc:	6091      	str	r1, [r2, #8]
  4036de:	eb0a 0105 	add.w	r1, sl, r5
  4036e2:	ebc5 020b 	rsb	r2, r5, fp
  4036e6:	f042 0201 	orr.w	r2, r2, #1
  4036ea:	6099      	str	r1, [r3, #8]
  4036ec:	604a      	str	r2, [r1, #4]
  4036ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  4036f2:	f003 0301 	and.w	r3, r3, #1
  4036f6:	431d      	orrs	r5, r3
  4036f8:	4648      	mov	r0, r9
  4036fa:	f8ca 5004 	str.w	r5, [sl, #4]
  4036fe:	f7ff feb9 	bl	403474 <__malloc_unlock>
  403702:	4638      	mov	r0, r7
  403704:	e75c      	b.n	4035c0 <_realloc_r+0x148>
  403706:	6833      	ldr	r3, [r6, #0]
  403708:	6003      	str	r3, [r0, #0]
  40370a:	6873      	ldr	r3, [r6, #4]
  40370c:	6043      	str	r3, [r0, #4]
  40370e:	2a1b      	cmp	r2, #27
  403710:	d827      	bhi.n	403762 <_realloc_r+0x2ea>
  403712:	f100 0308 	add.w	r3, r0, #8
  403716:	f106 0208 	add.w	r2, r6, #8
  40371a:	e6f2      	b.n	403502 <_realloc_r+0x8a>
  40371c:	463b      	mov	r3, r7
  40371e:	6832      	ldr	r2, [r6, #0]
  403720:	601a      	str	r2, [r3, #0]
  403722:	6872      	ldr	r2, [r6, #4]
  403724:	605a      	str	r2, [r3, #4]
  403726:	68b2      	ldr	r2, [r6, #8]
  403728:	609a      	str	r2, [r3, #8]
  40372a:	463e      	mov	r6, r7
  40372c:	4674      	mov	r4, lr
  40372e:	46d0      	mov	r8, sl
  403730:	e733      	b.n	40359a <_realloc_r+0x122>
  403732:	eb08 0105 	add.w	r1, r8, r5
  403736:	ebc5 0b0b 	rsb	fp, r5, fp
  40373a:	f04b 0201 	orr.w	r2, fp, #1
  40373e:	6099      	str	r1, [r3, #8]
  403740:	604a      	str	r2, [r1, #4]
  403742:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403746:	f003 0301 	and.w	r3, r3, #1
  40374a:	431d      	orrs	r5, r3
  40374c:	4648      	mov	r0, r9
  40374e:	f846 5c04 	str.w	r5, [r6, #-4]
  403752:	f7ff fe8f 	bl	403474 <__malloc_unlock>
  403756:	4630      	mov	r0, r6
  403758:	e732      	b.n	4035c0 <_realloc_r+0x148>
  40375a:	4631      	mov	r1, r6
  40375c:	f7fd fc5c 	bl	401018 <memmove>
  403760:	e6d5      	b.n	40350e <_realloc_r+0x96>
  403762:	68b3      	ldr	r3, [r6, #8]
  403764:	6083      	str	r3, [r0, #8]
  403766:	68f3      	ldr	r3, [r6, #12]
  403768:	60c3      	str	r3, [r0, #12]
  40376a:	2a24      	cmp	r2, #36	; 0x24
  40376c:	d028      	beq.n	4037c0 <_realloc_r+0x348>
  40376e:	f100 0310 	add.w	r3, r0, #16
  403772:	f106 0210 	add.w	r2, r6, #16
  403776:	e6c4      	b.n	403502 <_realloc_r+0x8a>
  403778:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40377c:	f023 0303 	bic.w	r3, r3, #3
  403780:	441c      	add	r4, r3
  403782:	e70a      	b.n	40359a <_realloc_r+0x122>
  403784:	4631      	mov	r1, r6
  403786:	4638      	mov	r0, r7
  403788:	4674      	mov	r4, lr
  40378a:	46d0      	mov	r8, sl
  40378c:	f7fd fc44 	bl	401018 <memmove>
  403790:	463e      	mov	r6, r7
  403792:	e702      	b.n	40359a <_realloc_r+0x122>
  403794:	463a      	mov	r2, r7
  403796:	e6f7      	b.n	403588 <_realloc_r+0x110>
  403798:	4631      	mov	r1, r6
  40379a:	4638      	mov	r0, r7
  40379c:	461c      	mov	r4, r3
  40379e:	46d0      	mov	r8, sl
  4037a0:	f7fd fc3a 	bl	401018 <memmove>
  4037a4:	463e      	mov	r6, r7
  4037a6:	e6f8      	b.n	40359a <_realloc_r+0x122>
  4037a8:	68b3      	ldr	r3, [r6, #8]
  4037aa:	f8ca 3010 	str.w	r3, [sl, #16]
  4037ae:	68f3      	ldr	r3, [r6, #12]
  4037b0:	f8ca 3014 	str.w	r3, [sl, #20]
  4037b4:	2a24      	cmp	r2, #36	; 0x24
  4037b6:	d01b      	beq.n	4037f0 <_realloc_r+0x378>
  4037b8:	3610      	adds	r6, #16
  4037ba:	f10a 0318 	add.w	r3, sl, #24
  4037be:	e7ae      	b.n	40371e <_realloc_r+0x2a6>
  4037c0:	6933      	ldr	r3, [r6, #16]
  4037c2:	6103      	str	r3, [r0, #16]
  4037c4:	6973      	ldr	r3, [r6, #20]
  4037c6:	6143      	str	r3, [r0, #20]
  4037c8:	f106 0218 	add.w	r2, r6, #24
  4037cc:	f100 0318 	add.w	r3, r0, #24
  4037d0:	e697      	b.n	403502 <_realloc_r+0x8a>
  4037d2:	bf00      	nop
  4037d4:	20000458 	.word	0x20000458
  4037d8:	68b1      	ldr	r1, [r6, #8]
  4037da:	f8ca 1010 	str.w	r1, [sl, #16]
  4037de:	68f1      	ldr	r1, [r6, #12]
  4037e0:	f8ca 1014 	str.w	r1, [sl, #20]
  4037e4:	2a24      	cmp	r2, #36	; 0x24
  4037e6:	d00f      	beq.n	403808 <_realloc_r+0x390>
  4037e8:	3610      	adds	r6, #16
  4037ea:	f10a 0218 	add.w	r2, sl, #24
  4037ee:	e6cb      	b.n	403588 <_realloc_r+0x110>
  4037f0:	6933      	ldr	r3, [r6, #16]
  4037f2:	f8ca 3018 	str.w	r3, [sl, #24]
  4037f6:	6973      	ldr	r3, [r6, #20]
  4037f8:	f8ca 301c 	str.w	r3, [sl, #28]
  4037fc:	3618      	adds	r6, #24
  4037fe:	f10a 0320 	add.w	r3, sl, #32
  403802:	e78c      	b.n	40371e <_realloc_r+0x2a6>
  403804:	463a      	mov	r2, r7
  403806:	e764      	b.n	4036d2 <_realloc_r+0x25a>
  403808:	6932      	ldr	r2, [r6, #16]
  40380a:	f8ca 2018 	str.w	r2, [sl, #24]
  40380e:	6972      	ldr	r2, [r6, #20]
  403810:	f8ca 201c 	str.w	r2, [sl, #28]
  403814:	3618      	adds	r6, #24
  403816:	f10a 0220 	add.w	r2, sl, #32
  40381a:	e6b5      	b.n	403588 <_realloc_r+0x110>
  40381c:	4631      	mov	r1, r6
  40381e:	4638      	mov	r0, r7
  403820:	9301      	str	r3, [sp, #4]
  403822:	f7fd fbf9 	bl	401018 <memmove>
  403826:	9b01      	ldr	r3, [sp, #4]
  403828:	e759      	b.n	4036de <_realloc_r+0x266>
  40382a:	68b1      	ldr	r1, [r6, #8]
  40382c:	f8ca 1010 	str.w	r1, [sl, #16]
  403830:	68f1      	ldr	r1, [r6, #12]
  403832:	f8ca 1014 	str.w	r1, [sl, #20]
  403836:	2a24      	cmp	r2, #36	; 0x24
  403838:	d003      	beq.n	403842 <_realloc_r+0x3ca>
  40383a:	3610      	adds	r6, #16
  40383c:	f10a 0218 	add.w	r2, sl, #24
  403840:	e747      	b.n	4036d2 <_realloc_r+0x25a>
  403842:	6932      	ldr	r2, [r6, #16]
  403844:	f8ca 2018 	str.w	r2, [sl, #24]
  403848:	6972      	ldr	r2, [r6, #20]
  40384a:	f8ca 201c 	str.w	r2, [sl, #28]
  40384e:	3618      	adds	r6, #24
  403850:	f10a 0220 	add.w	r2, sl, #32
  403854:	e73d      	b.n	4036d2 <_realloc_r+0x25a>
  403856:	bf00      	nop

00403858 <_sbrk_r>:
  403858:	b538      	push	{r3, r4, r5, lr}
  40385a:	4c07      	ldr	r4, [pc, #28]	; (403878 <_sbrk_r+0x20>)
  40385c:	2300      	movs	r3, #0
  40385e:	4605      	mov	r5, r0
  403860:	4608      	mov	r0, r1
  403862:	6023      	str	r3, [r4, #0]
  403864:	f7fd f932 	bl	400acc <_sbrk>
  403868:	1c43      	adds	r3, r0, #1
  40386a:	d000      	beq.n	40386e <_sbrk_r+0x16>
  40386c:	bd38      	pop	{r3, r4, r5, pc}
  40386e:	6823      	ldr	r3, [r4, #0]
  403870:	2b00      	cmp	r3, #0
  403872:	d0fb      	beq.n	40386c <_sbrk_r+0x14>
  403874:	602b      	str	r3, [r5, #0]
  403876:	bd38      	pop	{r3, r4, r5, pc}
  403878:	20000920 	.word	0x20000920

0040387c <__sread>:
  40387c:	b510      	push	{r4, lr}
  40387e:	460c      	mov	r4, r1
  403880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403884:	f000 f9c4 	bl	403c10 <_read_r>
  403888:	2800      	cmp	r0, #0
  40388a:	db03      	blt.n	403894 <__sread+0x18>
  40388c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40388e:	4403      	add	r3, r0
  403890:	6523      	str	r3, [r4, #80]	; 0x50
  403892:	bd10      	pop	{r4, pc}
  403894:	89a3      	ldrh	r3, [r4, #12]
  403896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40389a:	81a3      	strh	r3, [r4, #12]
  40389c:	bd10      	pop	{r4, pc}
  40389e:	bf00      	nop

004038a0 <__swrite>:
  4038a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038a4:	4616      	mov	r6, r2
  4038a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4038aa:	461f      	mov	r7, r3
  4038ac:	05d3      	lsls	r3, r2, #23
  4038ae:	460c      	mov	r4, r1
  4038b0:	4605      	mov	r5, r0
  4038b2:	d507      	bpl.n	4038c4 <__swrite+0x24>
  4038b4:	2200      	movs	r2, #0
  4038b6:	2302      	movs	r3, #2
  4038b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4038bc:	f000 f992 	bl	403be4 <_lseek_r>
  4038c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4038c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4038cc:	81a2      	strh	r2, [r4, #12]
  4038ce:	463b      	mov	r3, r7
  4038d0:	4632      	mov	r2, r6
  4038d2:	4628      	mov	r0, r5
  4038d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4038d8:	f000 b8a2 	b.w	403a20 <_write_r>

004038dc <__sseek>:
  4038dc:	b510      	push	{r4, lr}
  4038de:	460c      	mov	r4, r1
  4038e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4038e4:	f000 f97e 	bl	403be4 <_lseek_r>
  4038e8:	89a3      	ldrh	r3, [r4, #12]
  4038ea:	1c42      	adds	r2, r0, #1
  4038ec:	bf0e      	itee	eq
  4038ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4038f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4038f6:	6520      	strne	r0, [r4, #80]	; 0x50
  4038f8:	81a3      	strh	r3, [r4, #12]
  4038fa:	bd10      	pop	{r4, pc}

004038fc <__sclose>:
  4038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403900:	f000 b8f6 	b.w	403af0 <_close_r>

00403904 <__swbuf_r>:
  403904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403906:	460e      	mov	r6, r1
  403908:	4614      	mov	r4, r2
  40390a:	4607      	mov	r7, r0
  40390c:	b110      	cbz	r0, 403914 <__swbuf_r+0x10>
  40390e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403910:	2b00      	cmp	r3, #0
  403912:	d04a      	beq.n	4039aa <__swbuf_r+0xa6>
  403914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403918:	69a3      	ldr	r3, [r4, #24]
  40391a:	60a3      	str	r3, [r4, #8]
  40391c:	b291      	uxth	r1, r2
  40391e:	0708      	lsls	r0, r1, #28
  403920:	d538      	bpl.n	403994 <__swbuf_r+0x90>
  403922:	6923      	ldr	r3, [r4, #16]
  403924:	2b00      	cmp	r3, #0
  403926:	d035      	beq.n	403994 <__swbuf_r+0x90>
  403928:	0489      	lsls	r1, r1, #18
  40392a:	b2f5      	uxtb	r5, r6
  40392c:	d515      	bpl.n	40395a <__swbuf_r+0x56>
  40392e:	6822      	ldr	r2, [r4, #0]
  403930:	6961      	ldr	r1, [r4, #20]
  403932:	1ad3      	subs	r3, r2, r3
  403934:	428b      	cmp	r3, r1
  403936:	da1c      	bge.n	403972 <__swbuf_r+0x6e>
  403938:	3301      	adds	r3, #1
  40393a:	68a1      	ldr	r1, [r4, #8]
  40393c:	1c50      	adds	r0, r2, #1
  40393e:	3901      	subs	r1, #1
  403940:	60a1      	str	r1, [r4, #8]
  403942:	6020      	str	r0, [r4, #0]
  403944:	7016      	strb	r6, [r2, #0]
  403946:	6962      	ldr	r2, [r4, #20]
  403948:	429a      	cmp	r2, r3
  40394a:	d01a      	beq.n	403982 <__swbuf_r+0x7e>
  40394c:	89a3      	ldrh	r3, [r4, #12]
  40394e:	07db      	lsls	r3, r3, #31
  403950:	d501      	bpl.n	403956 <__swbuf_r+0x52>
  403952:	2d0a      	cmp	r5, #10
  403954:	d015      	beq.n	403982 <__swbuf_r+0x7e>
  403956:	4628      	mov	r0, r5
  403958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40395a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403960:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403964:	81a2      	strh	r2, [r4, #12]
  403966:	6822      	ldr	r2, [r4, #0]
  403968:	6661      	str	r1, [r4, #100]	; 0x64
  40396a:	6961      	ldr	r1, [r4, #20]
  40396c:	1ad3      	subs	r3, r2, r3
  40396e:	428b      	cmp	r3, r1
  403970:	dbe2      	blt.n	403938 <__swbuf_r+0x34>
  403972:	4621      	mov	r1, r4
  403974:	4638      	mov	r0, r7
  403976:	f7fe fdf9 	bl	40256c <_fflush_r>
  40397a:	b940      	cbnz	r0, 40398e <__swbuf_r+0x8a>
  40397c:	6822      	ldr	r2, [r4, #0]
  40397e:	2301      	movs	r3, #1
  403980:	e7db      	b.n	40393a <__swbuf_r+0x36>
  403982:	4621      	mov	r1, r4
  403984:	4638      	mov	r0, r7
  403986:	f7fe fdf1 	bl	40256c <_fflush_r>
  40398a:	2800      	cmp	r0, #0
  40398c:	d0e3      	beq.n	403956 <__swbuf_r+0x52>
  40398e:	f04f 30ff 	mov.w	r0, #4294967295
  403992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403994:	4621      	mov	r1, r4
  403996:	4638      	mov	r0, r7
  403998:	f7fe fcd0 	bl	40233c <__swsetup_r>
  40399c:	2800      	cmp	r0, #0
  40399e:	d1f6      	bne.n	40398e <__swbuf_r+0x8a>
  4039a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4039a4:	6923      	ldr	r3, [r4, #16]
  4039a6:	b291      	uxth	r1, r2
  4039a8:	e7be      	b.n	403928 <__swbuf_r+0x24>
  4039aa:	f7fe fe73 	bl	402694 <__sinit>
  4039ae:	e7b1      	b.n	403914 <__swbuf_r+0x10>

004039b0 <_wcrtomb_r>:
  4039b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039b4:	4605      	mov	r5, r0
  4039b6:	b086      	sub	sp, #24
  4039b8:	461e      	mov	r6, r3
  4039ba:	460c      	mov	r4, r1
  4039bc:	b1a1      	cbz	r1, 4039e8 <_wcrtomb_r+0x38>
  4039be:	4b10      	ldr	r3, [pc, #64]	; (403a00 <_wcrtomb_r+0x50>)
  4039c0:	4617      	mov	r7, r2
  4039c2:	f8d3 8000 	ldr.w	r8, [r3]
  4039c6:	f7ff f9c3 	bl	402d50 <__locale_charset>
  4039ca:	9600      	str	r6, [sp, #0]
  4039cc:	4603      	mov	r3, r0
  4039ce:	463a      	mov	r2, r7
  4039d0:	4621      	mov	r1, r4
  4039d2:	4628      	mov	r0, r5
  4039d4:	47c0      	blx	r8
  4039d6:	1c43      	adds	r3, r0, #1
  4039d8:	d103      	bne.n	4039e2 <_wcrtomb_r+0x32>
  4039da:	2200      	movs	r2, #0
  4039dc:	238a      	movs	r3, #138	; 0x8a
  4039de:	6032      	str	r2, [r6, #0]
  4039e0:	602b      	str	r3, [r5, #0]
  4039e2:	b006      	add	sp, #24
  4039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039e8:	4b05      	ldr	r3, [pc, #20]	; (403a00 <_wcrtomb_r+0x50>)
  4039ea:	681f      	ldr	r7, [r3, #0]
  4039ec:	f7ff f9b0 	bl	402d50 <__locale_charset>
  4039f0:	9600      	str	r6, [sp, #0]
  4039f2:	4603      	mov	r3, r0
  4039f4:	4622      	mov	r2, r4
  4039f6:	a903      	add	r1, sp, #12
  4039f8:	4628      	mov	r0, r5
  4039fa:	47b8      	blx	r7
  4039fc:	e7eb      	b.n	4039d6 <_wcrtomb_r+0x26>
  4039fe:	bf00      	nop
  403a00:	20000868 	.word	0x20000868

00403a04 <__ascii_wctomb>:
  403a04:	b121      	cbz	r1, 403a10 <__ascii_wctomb+0xc>
  403a06:	2aff      	cmp	r2, #255	; 0xff
  403a08:	d804      	bhi.n	403a14 <__ascii_wctomb+0x10>
  403a0a:	700a      	strb	r2, [r1, #0]
  403a0c:	2001      	movs	r0, #1
  403a0e:	4770      	bx	lr
  403a10:	4608      	mov	r0, r1
  403a12:	4770      	bx	lr
  403a14:	238a      	movs	r3, #138	; 0x8a
  403a16:	6003      	str	r3, [r0, #0]
  403a18:	f04f 30ff 	mov.w	r0, #4294967295
  403a1c:	4770      	bx	lr
  403a1e:	bf00      	nop

00403a20 <_write_r>:
  403a20:	b570      	push	{r4, r5, r6, lr}
  403a22:	460d      	mov	r5, r1
  403a24:	4c08      	ldr	r4, [pc, #32]	; (403a48 <_write_r+0x28>)
  403a26:	4611      	mov	r1, r2
  403a28:	4606      	mov	r6, r0
  403a2a:	461a      	mov	r2, r3
  403a2c:	4628      	mov	r0, r5
  403a2e:	2300      	movs	r3, #0
  403a30:	6023      	str	r3, [r4, #0]
  403a32:	f7fc fd99 	bl	400568 <_write>
  403a36:	1c43      	adds	r3, r0, #1
  403a38:	d000      	beq.n	403a3c <_write_r+0x1c>
  403a3a:	bd70      	pop	{r4, r5, r6, pc}
  403a3c:	6823      	ldr	r3, [r4, #0]
  403a3e:	2b00      	cmp	r3, #0
  403a40:	d0fb      	beq.n	403a3a <_write_r+0x1a>
  403a42:	6033      	str	r3, [r6, #0]
  403a44:	bd70      	pop	{r4, r5, r6, pc}
  403a46:	bf00      	nop
  403a48:	20000920 	.word	0x20000920

00403a4c <__register_exitproc>:
  403a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a50:	4c25      	ldr	r4, [pc, #148]	; (403ae8 <__register_exitproc+0x9c>)
  403a52:	6825      	ldr	r5, [r4, #0]
  403a54:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403a58:	4606      	mov	r6, r0
  403a5a:	4688      	mov	r8, r1
  403a5c:	4692      	mov	sl, r2
  403a5e:	4699      	mov	r9, r3
  403a60:	b3c4      	cbz	r4, 403ad4 <__register_exitproc+0x88>
  403a62:	6860      	ldr	r0, [r4, #4]
  403a64:	281f      	cmp	r0, #31
  403a66:	dc17      	bgt.n	403a98 <__register_exitproc+0x4c>
  403a68:	1c43      	adds	r3, r0, #1
  403a6a:	b176      	cbz	r6, 403a8a <__register_exitproc+0x3e>
  403a6c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403a70:	2201      	movs	r2, #1
  403a72:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403a76:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403a7a:	4082      	lsls	r2, r0
  403a7c:	4311      	orrs	r1, r2
  403a7e:	2e02      	cmp	r6, #2
  403a80:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403a84:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403a88:	d01e      	beq.n	403ac8 <__register_exitproc+0x7c>
  403a8a:	3002      	adds	r0, #2
  403a8c:	6063      	str	r3, [r4, #4]
  403a8e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403a92:	2000      	movs	r0, #0
  403a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a98:	4b14      	ldr	r3, [pc, #80]	; (403aec <__register_exitproc+0xa0>)
  403a9a:	b303      	cbz	r3, 403ade <__register_exitproc+0x92>
  403a9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403aa0:	f7ff f9d4 	bl	402e4c <malloc>
  403aa4:	4604      	mov	r4, r0
  403aa6:	b1d0      	cbz	r0, 403ade <__register_exitproc+0x92>
  403aa8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403aac:	2700      	movs	r7, #0
  403aae:	e880 0088 	stmia.w	r0, {r3, r7}
  403ab2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403ab6:	4638      	mov	r0, r7
  403ab8:	2301      	movs	r3, #1
  403aba:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403abe:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403ac2:	2e00      	cmp	r6, #0
  403ac4:	d0e1      	beq.n	403a8a <__register_exitproc+0x3e>
  403ac6:	e7d1      	b.n	403a6c <__register_exitproc+0x20>
  403ac8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403acc:	430a      	orrs	r2, r1
  403ace:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403ad2:	e7da      	b.n	403a8a <__register_exitproc+0x3e>
  403ad4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403ad8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403adc:	e7c1      	b.n	403a62 <__register_exitproc+0x16>
  403ade:	f04f 30ff 	mov.w	r0, #4294967295
  403ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ae6:	bf00      	nop
  403ae8:	00404048 	.word	0x00404048
  403aec:	00402e4d 	.word	0x00402e4d

00403af0 <_close_r>:
  403af0:	b538      	push	{r3, r4, r5, lr}
  403af2:	4c07      	ldr	r4, [pc, #28]	; (403b10 <_close_r+0x20>)
  403af4:	2300      	movs	r3, #0
  403af6:	4605      	mov	r5, r0
  403af8:	4608      	mov	r0, r1
  403afa:	6023      	str	r3, [r4, #0]
  403afc:	f7fd f800 	bl	400b00 <_close>
  403b00:	1c43      	adds	r3, r0, #1
  403b02:	d000      	beq.n	403b06 <_close_r+0x16>
  403b04:	bd38      	pop	{r3, r4, r5, pc}
  403b06:	6823      	ldr	r3, [r4, #0]
  403b08:	2b00      	cmp	r3, #0
  403b0a:	d0fb      	beq.n	403b04 <_close_r+0x14>
  403b0c:	602b      	str	r3, [r5, #0]
  403b0e:	bd38      	pop	{r3, r4, r5, pc}
  403b10:	20000920 	.word	0x20000920

00403b14 <_fclose_r>:
  403b14:	2900      	cmp	r1, #0
  403b16:	d03d      	beq.n	403b94 <_fclose_r+0x80>
  403b18:	b570      	push	{r4, r5, r6, lr}
  403b1a:	4605      	mov	r5, r0
  403b1c:	460c      	mov	r4, r1
  403b1e:	b108      	cbz	r0, 403b24 <_fclose_r+0x10>
  403b20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b22:	b37b      	cbz	r3, 403b84 <_fclose_r+0x70>
  403b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b28:	b90b      	cbnz	r3, 403b2e <_fclose_r+0x1a>
  403b2a:	2000      	movs	r0, #0
  403b2c:	bd70      	pop	{r4, r5, r6, pc}
  403b2e:	4621      	mov	r1, r4
  403b30:	4628      	mov	r0, r5
  403b32:	f7fe fc77 	bl	402424 <__sflush_r>
  403b36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403b38:	4606      	mov	r6, r0
  403b3a:	b133      	cbz	r3, 403b4a <_fclose_r+0x36>
  403b3c:	69e1      	ldr	r1, [r4, #28]
  403b3e:	4628      	mov	r0, r5
  403b40:	4798      	blx	r3
  403b42:	2800      	cmp	r0, #0
  403b44:	bfb8      	it	lt
  403b46:	f04f 36ff 	movlt.w	r6, #4294967295
  403b4a:	89a3      	ldrh	r3, [r4, #12]
  403b4c:	061b      	lsls	r3, r3, #24
  403b4e:	d41c      	bmi.n	403b8a <_fclose_r+0x76>
  403b50:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403b52:	b141      	cbz	r1, 403b66 <_fclose_r+0x52>
  403b54:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403b58:	4299      	cmp	r1, r3
  403b5a:	d002      	beq.n	403b62 <_fclose_r+0x4e>
  403b5c:	4628      	mov	r0, r5
  403b5e:	f7fe fe63 	bl	402828 <_free_r>
  403b62:	2300      	movs	r3, #0
  403b64:	6323      	str	r3, [r4, #48]	; 0x30
  403b66:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403b68:	b121      	cbz	r1, 403b74 <_fclose_r+0x60>
  403b6a:	4628      	mov	r0, r5
  403b6c:	f7fe fe5c 	bl	402828 <_free_r>
  403b70:	2300      	movs	r3, #0
  403b72:	6463      	str	r3, [r4, #68]	; 0x44
  403b74:	f7fe fd94 	bl	4026a0 <__sfp_lock_acquire>
  403b78:	2300      	movs	r3, #0
  403b7a:	81a3      	strh	r3, [r4, #12]
  403b7c:	f7fe fd92 	bl	4026a4 <__sfp_lock_release>
  403b80:	4630      	mov	r0, r6
  403b82:	bd70      	pop	{r4, r5, r6, pc}
  403b84:	f7fe fd86 	bl	402694 <__sinit>
  403b88:	e7cc      	b.n	403b24 <_fclose_r+0x10>
  403b8a:	6921      	ldr	r1, [r4, #16]
  403b8c:	4628      	mov	r0, r5
  403b8e:	f7fe fe4b 	bl	402828 <_free_r>
  403b92:	e7dd      	b.n	403b50 <_fclose_r+0x3c>
  403b94:	2000      	movs	r0, #0
  403b96:	4770      	bx	lr

00403b98 <_fstat_r>:
  403b98:	b538      	push	{r3, r4, r5, lr}
  403b9a:	460b      	mov	r3, r1
  403b9c:	4c07      	ldr	r4, [pc, #28]	; (403bbc <_fstat_r+0x24>)
  403b9e:	4605      	mov	r5, r0
  403ba0:	4611      	mov	r1, r2
  403ba2:	4618      	mov	r0, r3
  403ba4:	2300      	movs	r3, #0
  403ba6:	6023      	str	r3, [r4, #0]
  403ba8:	f7fc ffae 	bl	400b08 <_fstat>
  403bac:	1c43      	adds	r3, r0, #1
  403bae:	d000      	beq.n	403bb2 <_fstat_r+0x1a>
  403bb0:	bd38      	pop	{r3, r4, r5, pc}
  403bb2:	6823      	ldr	r3, [r4, #0]
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d0fb      	beq.n	403bb0 <_fstat_r+0x18>
  403bb8:	602b      	str	r3, [r5, #0]
  403bba:	bd38      	pop	{r3, r4, r5, pc}
  403bbc:	20000920 	.word	0x20000920

00403bc0 <_isatty_r>:
  403bc0:	b538      	push	{r3, r4, r5, lr}
  403bc2:	4c07      	ldr	r4, [pc, #28]	; (403be0 <_isatty_r+0x20>)
  403bc4:	2300      	movs	r3, #0
  403bc6:	4605      	mov	r5, r0
  403bc8:	4608      	mov	r0, r1
  403bca:	6023      	str	r3, [r4, #0]
  403bcc:	f7fc ffa2 	bl	400b14 <_isatty>
  403bd0:	1c43      	adds	r3, r0, #1
  403bd2:	d000      	beq.n	403bd6 <_isatty_r+0x16>
  403bd4:	bd38      	pop	{r3, r4, r5, pc}
  403bd6:	6823      	ldr	r3, [r4, #0]
  403bd8:	2b00      	cmp	r3, #0
  403bda:	d0fb      	beq.n	403bd4 <_isatty_r+0x14>
  403bdc:	602b      	str	r3, [r5, #0]
  403bde:	bd38      	pop	{r3, r4, r5, pc}
  403be0:	20000920 	.word	0x20000920

00403be4 <_lseek_r>:
  403be4:	b570      	push	{r4, r5, r6, lr}
  403be6:	460d      	mov	r5, r1
  403be8:	4c08      	ldr	r4, [pc, #32]	; (403c0c <_lseek_r+0x28>)
  403bea:	4611      	mov	r1, r2
  403bec:	4606      	mov	r6, r0
  403bee:	461a      	mov	r2, r3
  403bf0:	4628      	mov	r0, r5
  403bf2:	2300      	movs	r3, #0
  403bf4:	6023      	str	r3, [r4, #0]
  403bf6:	f7fc ff8f 	bl	400b18 <_lseek>
  403bfa:	1c43      	adds	r3, r0, #1
  403bfc:	d000      	beq.n	403c00 <_lseek_r+0x1c>
  403bfe:	bd70      	pop	{r4, r5, r6, pc}
  403c00:	6823      	ldr	r3, [r4, #0]
  403c02:	2b00      	cmp	r3, #0
  403c04:	d0fb      	beq.n	403bfe <_lseek_r+0x1a>
  403c06:	6033      	str	r3, [r6, #0]
  403c08:	bd70      	pop	{r4, r5, r6, pc}
  403c0a:	bf00      	nop
  403c0c:	20000920 	.word	0x20000920

00403c10 <_read_r>:
  403c10:	b570      	push	{r4, r5, r6, lr}
  403c12:	460d      	mov	r5, r1
  403c14:	4c08      	ldr	r4, [pc, #32]	; (403c38 <_read_r+0x28>)
  403c16:	4611      	mov	r1, r2
  403c18:	4606      	mov	r6, r0
  403c1a:	461a      	mov	r2, r3
  403c1c:	4628      	mov	r0, r5
  403c1e:	2300      	movs	r3, #0
  403c20:	6023      	str	r3, [r4, #0]
  403c22:	f7fc fc83 	bl	40052c <_read>
  403c26:	1c43      	adds	r3, r0, #1
  403c28:	d000      	beq.n	403c2c <_read_r+0x1c>
  403c2a:	bd70      	pop	{r4, r5, r6, pc}
  403c2c:	6823      	ldr	r3, [r4, #0]
  403c2e:	2b00      	cmp	r3, #0
  403c30:	d0fb      	beq.n	403c2a <_read_r+0x1a>
  403c32:	6033      	str	r3, [r6, #0]
  403c34:	bd70      	pop	{r4, r5, r6, pc}
  403c36:	bf00      	nop
  403c38:	20000920 	.word	0x20000920

00403c3c <__aeabi_uldivmod>:
  403c3c:	b953      	cbnz	r3, 403c54 <__aeabi_uldivmod+0x18>
  403c3e:	b94a      	cbnz	r2, 403c54 <__aeabi_uldivmod+0x18>
  403c40:	2900      	cmp	r1, #0
  403c42:	bf08      	it	eq
  403c44:	2800      	cmpeq	r0, #0
  403c46:	bf1c      	itt	ne
  403c48:	f04f 31ff 	movne.w	r1, #4294967295
  403c4c:	f04f 30ff 	movne.w	r0, #4294967295
  403c50:	f000 b97e 	b.w	403f50 <__aeabi_idiv0>
  403c54:	f1ad 0c08 	sub.w	ip, sp, #8
  403c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403c5c:	f000 f806 	bl	403c6c <__udivmoddi4>
  403c60:	f8dd e004 	ldr.w	lr, [sp, #4]
  403c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c68:	b004      	add	sp, #16
  403c6a:	4770      	bx	lr

00403c6c <__udivmoddi4>:
  403c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c70:	468c      	mov	ip, r1
  403c72:	460e      	mov	r6, r1
  403c74:	4604      	mov	r4, r0
  403c76:	9d08      	ldr	r5, [sp, #32]
  403c78:	2b00      	cmp	r3, #0
  403c7a:	d150      	bne.n	403d1e <__udivmoddi4+0xb2>
  403c7c:	428a      	cmp	r2, r1
  403c7e:	4617      	mov	r7, r2
  403c80:	d96c      	bls.n	403d5c <__udivmoddi4+0xf0>
  403c82:	fab2 fe82 	clz	lr, r2
  403c86:	f1be 0f00 	cmp.w	lr, #0
  403c8a:	d00b      	beq.n	403ca4 <__udivmoddi4+0x38>
  403c8c:	f1ce 0420 	rsb	r4, lr, #32
  403c90:	fa20 f404 	lsr.w	r4, r0, r4
  403c94:	fa01 f60e 	lsl.w	r6, r1, lr
  403c98:	ea44 0c06 	orr.w	ip, r4, r6
  403c9c:	fa02 f70e 	lsl.w	r7, r2, lr
  403ca0:	fa00 f40e 	lsl.w	r4, r0, lr
  403ca4:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403ca8:	0c22      	lsrs	r2, r4, #16
  403caa:	fbbc f0f9 	udiv	r0, ip, r9
  403cae:	fa1f f887 	uxth.w	r8, r7
  403cb2:	fb09 c610 	mls	r6, r9, r0, ip
  403cb6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403cba:	fb00 f308 	mul.w	r3, r0, r8
  403cbe:	42b3      	cmp	r3, r6
  403cc0:	d909      	bls.n	403cd6 <__udivmoddi4+0x6a>
  403cc2:	19f6      	adds	r6, r6, r7
  403cc4:	f100 32ff 	add.w	r2, r0, #4294967295
  403cc8:	f080 8122 	bcs.w	403f10 <__udivmoddi4+0x2a4>
  403ccc:	42b3      	cmp	r3, r6
  403cce:	f240 811f 	bls.w	403f10 <__udivmoddi4+0x2a4>
  403cd2:	3802      	subs	r0, #2
  403cd4:	443e      	add	r6, r7
  403cd6:	1af6      	subs	r6, r6, r3
  403cd8:	b2a2      	uxth	r2, r4
  403cda:	fbb6 f3f9 	udiv	r3, r6, r9
  403cde:	fb09 6613 	mls	r6, r9, r3, r6
  403ce2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403ce6:	fb03 f808 	mul.w	r8, r3, r8
  403cea:	45a0      	cmp	r8, r4
  403cec:	d909      	bls.n	403d02 <__udivmoddi4+0x96>
  403cee:	19e4      	adds	r4, r4, r7
  403cf0:	f103 32ff 	add.w	r2, r3, #4294967295
  403cf4:	f080 810a 	bcs.w	403f0c <__udivmoddi4+0x2a0>
  403cf8:	45a0      	cmp	r8, r4
  403cfa:	f240 8107 	bls.w	403f0c <__udivmoddi4+0x2a0>
  403cfe:	3b02      	subs	r3, #2
  403d00:	443c      	add	r4, r7
  403d02:	ebc8 0404 	rsb	r4, r8, r4
  403d06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403d0a:	2100      	movs	r1, #0
  403d0c:	2d00      	cmp	r5, #0
  403d0e:	d062      	beq.n	403dd6 <__udivmoddi4+0x16a>
  403d10:	fa24 f40e 	lsr.w	r4, r4, lr
  403d14:	2300      	movs	r3, #0
  403d16:	602c      	str	r4, [r5, #0]
  403d18:	606b      	str	r3, [r5, #4]
  403d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d1e:	428b      	cmp	r3, r1
  403d20:	d907      	bls.n	403d32 <__udivmoddi4+0xc6>
  403d22:	2d00      	cmp	r5, #0
  403d24:	d055      	beq.n	403dd2 <__udivmoddi4+0x166>
  403d26:	2100      	movs	r1, #0
  403d28:	e885 0041 	stmia.w	r5, {r0, r6}
  403d2c:	4608      	mov	r0, r1
  403d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d32:	fab3 f183 	clz	r1, r3
  403d36:	2900      	cmp	r1, #0
  403d38:	f040 8090 	bne.w	403e5c <__udivmoddi4+0x1f0>
  403d3c:	42b3      	cmp	r3, r6
  403d3e:	d302      	bcc.n	403d46 <__udivmoddi4+0xda>
  403d40:	4282      	cmp	r2, r0
  403d42:	f200 80f8 	bhi.w	403f36 <__udivmoddi4+0x2ca>
  403d46:	1a84      	subs	r4, r0, r2
  403d48:	eb66 0603 	sbc.w	r6, r6, r3
  403d4c:	2001      	movs	r0, #1
  403d4e:	46b4      	mov	ip, r6
  403d50:	2d00      	cmp	r5, #0
  403d52:	d040      	beq.n	403dd6 <__udivmoddi4+0x16a>
  403d54:	e885 1010 	stmia.w	r5, {r4, ip}
  403d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d5c:	b912      	cbnz	r2, 403d64 <__udivmoddi4+0xf8>
  403d5e:	2701      	movs	r7, #1
  403d60:	fbb7 f7f2 	udiv	r7, r7, r2
  403d64:	fab7 fe87 	clz	lr, r7
  403d68:	f1be 0f00 	cmp.w	lr, #0
  403d6c:	d135      	bne.n	403dda <__udivmoddi4+0x16e>
  403d6e:	1bf3      	subs	r3, r6, r7
  403d70:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403d74:	fa1f fc87 	uxth.w	ip, r7
  403d78:	2101      	movs	r1, #1
  403d7a:	fbb3 f0f8 	udiv	r0, r3, r8
  403d7e:	0c22      	lsrs	r2, r4, #16
  403d80:	fb08 3610 	mls	r6, r8, r0, r3
  403d84:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403d88:	fb0c f300 	mul.w	r3, ip, r0
  403d8c:	42b3      	cmp	r3, r6
  403d8e:	d907      	bls.n	403da0 <__udivmoddi4+0x134>
  403d90:	19f6      	adds	r6, r6, r7
  403d92:	f100 32ff 	add.w	r2, r0, #4294967295
  403d96:	d202      	bcs.n	403d9e <__udivmoddi4+0x132>
  403d98:	42b3      	cmp	r3, r6
  403d9a:	f200 80ce 	bhi.w	403f3a <__udivmoddi4+0x2ce>
  403d9e:	4610      	mov	r0, r2
  403da0:	1af6      	subs	r6, r6, r3
  403da2:	b2a2      	uxth	r2, r4
  403da4:	fbb6 f3f8 	udiv	r3, r6, r8
  403da8:	fb08 6613 	mls	r6, r8, r3, r6
  403dac:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403db0:	fb0c fc03 	mul.w	ip, ip, r3
  403db4:	45a4      	cmp	ip, r4
  403db6:	d907      	bls.n	403dc8 <__udivmoddi4+0x15c>
  403db8:	19e4      	adds	r4, r4, r7
  403dba:	f103 32ff 	add.w	r2, r3, #4294967295
  403dbe:	d202      	bcs.n	403dc6 <__udivmoddi4+0x15a>
  403dc0:	45a4      	cmp	ip, r4
  403dc2:	f200 80b5 	bhi.w	403f30 <__udivmoddi4+0x2c4>
  403dc6:	4613      	mov	r3, r2
  403dc8:	ebcc 0404 	rsb	r4, ip, r4
  403dcc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403dd0:	e79c      	b.n	403d0c <__udivmoddi4+0xa0>
  403dd2:	4629      	mov	r1, r5
  403dd4:	4628      	mov	r0, r5
  403dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dda:	f1ce 0120 	rsb	r1, lr, #32
  403dde:	fa06 f30e 	lsl.w	r3, r6, lr
  403de2:	fa07 f70e 	lsl.w	r7, r7, lr
  403de6:	fa20 f901 	lsr.w	r9, r0, r1
  403dea:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403dee:	40ce      	lsrs	r6, r1
  403df0:	ea49 0903 	orr.w	r9, r9, r3
  403df4:	fbb6 faf8 	udiv	sl, r6, r8
  403df8:	ea4f 4419 	mov.w	r4, r9, lsr #16
  403dfc:	fb08 661a 	mls	r6, r8, sl, r6
  403e00:	fa1f fc87 	uxth.w	ip, r7
  403e04:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  403e08:	fb0a f20c 	mul.w	r2, sl, ip
  403e0c:	429a      	cmp	r2, r3
  403e0e:	fa00 f40e 	lsl.w	r4, r0, lr
  403e12:	d90a      	bls.n	403e2a <__udivmoddi4+0x1be>
  403e14:	19db      	adds	r3, r3, r7
  403e16:	f10a 31ff 	add.w	r1, sl, #4294967295
  403e1a:	f080 8087 	bcs.w	403f2c <__udivmoddi4+0x2c0>
  403e1e:	429a      	cmp	r2, r3
  403e20:	f240 8084 	bls.w	403f2c <__udivmoddi4+0x2c0>
  403e24:	f1aa 0a02 	sub.w	sl, sl, #2
  403e28:	443b      	add	r3, r7
  403e2a:	1a9b      	subs	r3, r3, r2
  403e2c:	fa1f f989 	uxth.w	r9, r9
  403e30:	fbb3 f1f8 	udiv	r1, r3, r8
  403e34:	fb08 3311 	mls	r3, r8, r1, r3
  403e38:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  403e3c:	fb01 f60c 	mul.w	r6, r1, ip
  403e40:	429e      	cmp	r6, r3
  403e42:	d907      	bls.n	403e54 <__udivmoddi4+0x1e8>
  403e44:	19db      	adds	r3, r3, r7
  403e46:	f101 32ff 	add.w	r2, r1, #4294967295
  403e4a:	d26b      	bcs.n	403f24 <__udivmoddi4+0x2b8>
  403e4c:	429e      	cmp	r6, r3
  403e4e:	d969      	bls.n	403f24 <__udivmoddi4+0x2b8>
  403e50:	3902      	subs	r1, #2
  403e52:	443b      	add	r3, r7
  403e54:	1b9b      	subs	r3, r3, r6
  403e56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  403e5a:	e78e      	b.n	403d7a <__udivmoddi4+0x10e>
  403e5c:	f1c1 0e20 	rsb	lr, r1, #32
  403e60:	fa22 f40e 	lsr.w	r4, r2, lr
  403e64:	408b      	lsls	r3, r1
  403e66:	4323      	orrs	r3, r4
  403e68:	fa20 f70e 	lsr.w	r7, r0, lr
  403e6c:	fa06 f401 	lsl.w	r4, r6, r1
  403e70:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403e74:	fa26 f60e 	lsr.w	r6, r6, lr
  403e78:	433c      	orrs	r4, r7
  403e7a:	fbb6 f9fc 	udiv	r9, r6, ip
  403e7e:	0c27      	lsrs	r7, r4, #16
  403e80:	fb0c 6619 	mls	r6, ip, r9, r6
  403e84:	fa1f f883 	uxth.w	r8, r3
  403e88:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  403e8c:	fb09 f708 	mul.w	r7, r9, r8
  403e90:	42b7      	cmp	r7, r6
  403e92:	fa02 f201 	lsl.w	r2, r2, r1
  403e96:	fa00 fa01 	lsl.w	sl, r0, r1
  403e9a:	d908      	bls.n	403eae <__udivmoddi4+0x242>
  403e9c:	18f6      	adds	r6, r6, r3
  403e9e:	f109 30ff 	add.w	r0, r9, #4294967295
  403ea2:	d241      	bcs.n	403f28 <__udivmoddi4+0x2bc>
  403ea4:	42b7      	cmp	r7, r6
  403ea6:	d93f      	bls.n	403f28 <__udivmoddi4+0x2bc>
  403ea8:	f1a9 0902 	sub.w	r9, r9, #2
  403eac:	441e      	add	r6, r3
  403eae:	1bf6      	subs	r6, r6, r7
  403eb0:	b2a0      	uxth	r0, r4
  403eb2:	fbb6 f4fc 	udiv	r4, r6, ip
  403eb6:	fb0c 6614 	mls	r6, ip, r4, r6
  403eba:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  403ebe:	fb04 f808 	mul.w	r8, r4, r8
  403ec2:	45b8      	cmp	r8, r7
  403ec4:	d907      	bls.n	403ed6 <__udivmoddi4+0x26a>
  403ec6:	18ff      	adds	r7, r7, r3
  403ec8:	f104 30ff 	add.w	r0, r4, #4294967295
  403ecc:	d228      	bcs.n	403f20 <__udivmoddi4+0x2b4>
  403ece:	45b8      	cmp	r8, r7
  403ed0:	d926      	bls.n	403f20 <__udivmoddi4+0x2b4>
  403ed2:	3c02      	subs	r4, #2
  403ed4:	441f      	add	r7, r3
  403ed6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  403eda:	ebc8 0707 	rsb	r7, r8, r7
  403ede:	fba0 8902 	umull	r8, r9, r0, r2
  403ee2:	454f      	cmp	r7, r9
  403ee4:	4644      	mov	r4, r8
  403ee6:	464e      	mov	r6, r9
  403ee8:	d314      	bcc.n	403f14 <__udivmoddi4+0x2a8>
  403eea:	d029      	beq.n	403f40 <__udivmoddi4+0x2d4>
  403eec:	b365      	cbz	r5, 403f48 <__udivmoddi4+0x2dc>
  403eee:	ebba 0304 	subs.w	r3, sl, r4
  403ef2:	eb67 0706 	sbc.w	r7, r7, r6
  403ef6:	fa07 fe0e 	lsl.w	lr, r7, lr
  403efa:	40cb      	lsrs	r3, r1
  403efc:	40cf      	lsrs	r7, r1
  403efe:	ea4e 0303 	orr.w	r3, lr, r3
  403f02:	e885 0088 	stmia.w	r5, {r3, r7}
  403f06:	2100      	movs	r1, #0
  403f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f0c:	4613      	mov	r3, r2
  403f0e:	e6f8      	b.n	403d02 <__udivmoddi4+0x96>
  403f10:	4610      	mov	r0, r2
  403f12:	e6e0      	b.n	403cd6 <__udivmoddi4+0x6a>
  403f14:	ebb8 0402 	subs.w	r4, r8, r2
  403f18:	eb69 0603 	sbc.w	r6, r9, r3
  403f1c:	3801      	subs	r0, #1
  403f1e:	e7e5      	b.n	403eec <__udivmoddi4+0x280>
  403f20:	4604      	mov	r4, r0
  403f22:	e7d8      	b.n	403ed6 <__udivmoddi4+0x26a>
  403f24:	4611      	mov	r1, r2
  403f26:	e795      	b.n	403e54 <__udivmoddi4+0x1e8>
  403f28:	4681      	mov	r9, r0
  403f2a:	e7c0      	b.n	403eae <__udivmoddi4+0x242>
  403f2c:	468a      	mov	sl, r1
  403f2e:	e77c      	b.n	403e2a <__udivmoddi4+0x1be>
  403f30:	3b02      	subs	r3, #2
  403f32:	443c      	add	r4, r7
  403f34:	e748      	b.n	403dc8 <__udivmoddi4+0x15c>
  403f36:	4608      	mov	r0, r1
  403f38:	e70a      	b.n	403d50 <__udivmoddi4+0xe4>
  403f3a:	3802      	subs	r0, #2
  403f3c:	443e      	add	r6, r7
  403f3e:	e72f      	b.n	403da0 <__udivmoddi4+0x134>
  403f40:	45c2      	cmp	sl, r8
  403f42:	d3e7      	bcc.n	403f14 <__udivmoddi4+0x2a8>
  403f44:	463e      	mov	r6, r7
  403f46:	e7d1      	b.n	403eec <__udivmoddi4+0x280>
  403f48:	4629      	mov	r1, r5
  403f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f4e:	bf00      	nop

00403f50 <__aeabi_idiv0>:
  403f50:	4770      	bx	lr
  403f52:	bf00      	nop
  403f54:	4f525245 	.word	0x4f525245
  403f58:	6f203a52 	.word	0x6f203a52
  403f5c:	6f207475 	.word	0x6f207475
  403f60:	656d2066 	.word	0x656d2066
  403f64:	79726f6d 	.word	0x79726f6d
  403f68:	00000d0a 	.word	0x00000d0a
  403f6c:	4f525245 	.word	0x4f525245
  403f70:	72203a52 	.word	0x72203a52
  403f74:	6574756f 	.word	0x6574756f
  403f78:	746f6e20 	.word	0x746f6e20
  403f7c:	756f6620 	.word	0x756f6620
  403f80:	0d0a646e 	.word	0x0d0a646e
  403f84:	00000000 	.word	0x00000000
  403f88:	4f525245 	.word	0x4f525245
  403f8c:	25203a52 	.word	0x25203a52
  403f90:	000d0a64 	.word	0x000d0a64
  403f94:	6b636150 	.word	0x6b636150
  403f98:	73207465 	.word	0x73207465
  403f9c:	21746e65 	.word	0x21746e65
  403fa0:	00000d0a 	.word	0x00000d0a
  403fa4:	414c414c 	.word	0x414c414c
  403fa8:	0d0a414c 	.word	0x0d0a414c
  403fac:	00000000 	.word	0x00000000
  403fb0:	78323025 	.word	0x78323025
  403fb4:	00000020 	.word	0x00000020
  403fb8:	44414552 	.word	0x44414552
  403fbc:	20474e49 	.word	0x20474e49
  403fc0:	504d4f43 	.word	0x504d4f43
  403fc4:	4554454c 	.word	0x4554454c
  403fc8:	00000d0a 	.word	0x00000d0a
  403fcc:	52202d2d 	.word	0x52202d2d
  403fd0:	48207761 	.word	0x48207761
  403fd4:	20505454 	.word	0x20505454
  403fd8:	69736142 	.word	0x69736142
  403fdc:	78452063 	.word	0x78452063
  403fe0:	6c706d61 	.word	0x6c706d61
  403fe4:	2d2d2065 	.word	0x2d2d2065
  403fe8:	2d2d0a0d 	.word	0x2d2d0a0d
  403fec:	4d415320 	.word	0x4d415320
  403ff0:	582d4534 	.word	0x582d4534
  403ff4:	204f5250 	.word	0x204f5250
  403ff8:	0a0d2d2d 	.word	0x0a0d2d2d
  403ffc:	43202d2d 	.word	0x43202d2d
  404000:	69706d6f 	.word	0x69706d6f
  404004:	3a64656c 	.word	0x3a64656c
  404008:	63654420 	.word	0x63654420
  40400c:	20362020 	.word	0x20362020
  404010:	36313032 	.word	0x36313032
  404014:	3a313120 	.word	0x3a313120
  404018:	353a3530 	.word	0x353a3530
  40401c:	2d2d2033 	.word	0x2d2d2033
  404020:	00000a0d 	.word	0x00000a0d
  404024:	202d492d 	.word	0x202d492d
  404028:	74696e49 	.word	0x74696e49
  40402c:	696c6169 	.word	0x696c6169
  404030:	5320657a 	.word	0x5320657a
  404034:	61204950 	.word	0x61204950
  404038:	6c732073 	.word	0x6c732073
  40403c:	20657661 	.word	0x20657661
  404040:	0000000d 	.word	0x0000000d
  404044:	00000043 	.word	0x00000043

00404048 <_global_impure_ptr>:
  404048:	20000008 0000000a                       ... ....

00404050 <zeroes.6993>:
  404050:	30303030 30303030 30303030 30303030     0000000000000000
  404060:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  404070:	00000000 33323130 37363534 62613938     ....0123456789ab
  404080:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404090 <blanks.6992>:
  404090:	20202020 20202020 20202020 20202020                     

004040a0 <_init>:
  4040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040a2:	bf00      	nop
  4040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4040a6:	bc08      	pop	{r3}
  4040a8:	469e      	mov	lr, r3
  4040aa:	4770      	bx	lr

004040ac <__init_array_start>:
  4040ac:	00402405 	.word	0x00402405

004040b0 <__frame_dummy_init_array_entry>:
  4040b0:	0040011d                                ..@.

004040b4 <_fini>:
  4040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040b6:	bf00      	nop
  4040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4040ba:	bc08      	pop	{r3}
  4040bc:	469e      	mov	lr, r3
  4040be:	4770      	bx	lr

004040c0 <__fini_array_start>:
  4040c0:	004000f9 	.word	0x004000f9
