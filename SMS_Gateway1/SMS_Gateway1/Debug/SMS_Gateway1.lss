
SMS_Gateway1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000980c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040980c  0040980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008a4  20000000  00409814  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003f18  200008a8  0040a0c0  000208a8  2**3
                  ALLOC
  4 .stack        00003000  200047c0  0040dfd8  000208a8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208d2  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a3c4  00000000  00000000  0002092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004de4  00000000  00000000  0003acef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e26a  00000000  00000000  0003fad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ec0  00000000  00000000  0004dd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f88  00000000  00000000  0004ebfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002148a  00000000  00000000  0004fb85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001991a  00000000  00000000  0007100f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b793  00000000  00000000  0008a929  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000031a0  00000000  00000000  000f60bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200077c0 	.word	0x200077c0
  400004:	00400c55 	.word	0x00400c55
  400008:	00400c51 	.word	0x00400c51
  40000c:	00400c51 	.word	0x00400c51
  400010:	00400c51 	.word	0x00400c51
  400014:	00400c51 	.word	0x00400c51
  400018:	00400c51 	.word	0x00400c51
	...
  40002c:	00400c51 	.word	0x00400c51
  400030:	00400c51 	.word	0x00400c51
  400034:	00000000 	.word	0x00000000
  400038:	00400c51 	.word	0x00400c51
  40003c:	00400c51 	.word	0x00400c51
  400040:	00400c51 	.word	0x00400c51
  400044:	00400c51 	.word	0x00400c51
  400048:	00400c51 	.word	0x00400c51
  40004c:	00400c51 	.word	0x00400c51
  400050:	00400c51 	.word	0x00400c51
  400054:	00400c51 	.word	0x00400c51
  400058:	00400c51 	.word	0x00400c51
  40005c:	00400c51 	.word	0x00400c51
  400060:	00400c51 	.word	0x00400c51
  400064:	00400c51 	.word	0x00400c51
  400068:	00400c51 	.word	0x00400c51
  40006c:	00400c51 	.word	0x00400c51
  400070:	00400c51 	.word	0x00400c51
  400074:	00400c51 	.word	0x00400c51
  400078:	00400c51 	.word	0x00400c51
  40007c:	00400c51 	.word	0x00400c51
  400080:	00400c51 	.word	0x00400c51
  400084:	00400c51 	.word	0x00400c51
  400088:	00400c51 	.word	0x00400c51
  40008c:	00400c51 	.word	0x00400c51
  400090:	00400c51 	.word	0x00400c51
  400094:	00405ed9 	.word	0x00405ed9
  400098:	00400c51 	.word	0x00400c51
  40009c:	00400c51 	.word	0x00400c51
  4000a0:	00400c51 	.word	0x00400c51
  4000a4:	00400c51 	.word	0x00400c51
  4000a8:	00400c51 	.word	0x00400c51
  4000ac:	00400c51 	.word	0x00400c51
  4000b0:	00400c51 	.word	0x00400c51
  4000b4:	00400c51 	.word	0x00400c51
  4000b8:	00400c51 	.word	0x00400c51
  4000bc:	00400c51 	.word	0x00400c51
  4000c0:	00400c51 	.word	0x00400c51
  4000c4:	00400c51 	.word	0x00400c51
  4000c8:	00400c51 	.word	0x00400c51
  4000cc:	00400c51 	.word	0x00400c51
  4000d0:	00400c51 	.word	0x00400c51
  4000d4:	00400c51 	.word	0x00400c51
  4000d8:	00400c51 	.word	0x00400c51
  4000dc:	00400c51 	.word	0x00400c51
  4000e0:	00400c51 	.word	0x00400c51
  4000e4:	00400c51 	.word	0x00400c51
  4000e8:	00400c51 	.word	0x00400c51
  4000ec:	00400c51 	.word	0x00400c51
  4000f0:	00405b15 	.word	0x00405b15
  4000f4:	00400c51 	.word	0x00400c51

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200008a8 	.word	0x200008a8
  400114:	00000000 	.word	0x00000000
  400118:	00409814 	.word	0x00409814

0040011c <frame_dummy>:
  40011c:	4b08      	ldr	r3, [pc, #32]	; (400140 <frame_dummy+0x24>)
  40011e:	b510      	push	{r4, lr}
  400120:	b11b      	cbz	r3, 40012a <frame_dummy+0xe>
  400122:	4908      	ldr	r1, [pc, #32]	; (400144 <frame_dummy+0x28>)
  400124:	4808      	ldr	r0, [pc, #32]	; (400148 <frame_dummy+0x2c>)
  400126:	f3af 8000 	nop.w
  40012a:	4808      	ldr	r0, [pc, #32]	; (40014c <frame_dummy+0x30>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b903      	cbnz	r3, 400132 <frame_dummy+0x16>
  400130:	bd10      	pop	{r4, pc}
  400132:	4b07      	ldr	r3, [pc, #28]	; (400150 <frame_dummy+0x34>)
  400134:	2b00      	cmp	r3, #0
  400136:	d0fb      	beq.n	400130 <frame_dummy+0x14>
  400138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40013c:	4718      	bx	r3
  40013e:	bf00      	nop
  400140:	00000000 	.word	0x00000000
  400144:	200008ac 	.word	0x200008ac
  400148:	00409814 	.word	0x00409814
  40014c:	00409814 	.word	0x00409814
  400150:	00000000 	.word	0x00000000

00400154 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400154:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400156:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40015a:	4bae      	ldr	r3, [pc, #696]	; (400414 <board_init+0x2c0>)
  40015c:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40015e:	2009      	movs	r0, #9
  400160:	4dad      	ldr	r5, [pc, #692]	; (400418 <board_init+0x2c4>)
  400162:	47a8      	blx	r5
  400164:	200a      	movs	r0, #10
  400166:	47a8      	blx	r5
  400168:	200b      	movs	r0, #11
  40016a:	47a8      	blx	r5
  40016c:	200c      	movs	r0, #12
  40016e:	47a8      	blx	r5
  400170:	200d      	movs	r0, #13
  400172:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400174:	4ba9      	ldr	r3, [pc, #676]	; (40041c <board_init+0x2c8>)
  400176:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40017a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40017c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400180:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400182:	4aa7      	ldr	r2, [pc, #668]	; (400420 <board_init+0x2cc>)
  400184:	2104      	movs	r1, #4
  400186:	6151      	str	r1, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400188:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40018c:	6651      	str	r1, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40018e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400192:	6551      	str	r1, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400194:	6211      	str	r1, [r2, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400196:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40019a:	6f10      	ldr	r0, [r2, #112]	; 0x70
  40019c:	f020 0004 	bic.w	r0, r0, #4
  4001a0:	6710      	str	r0, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001a2:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4001a4:	f020 0004 	bic.w	r0, r0, #4
  4001a8:	6750      	str	r0, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4001aa:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4001ae:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4001b2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001b6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  4001ba:	6610      	str	r0, [r2, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001bc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001c0:	6550      	str	r0, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001c2:	6250      	str	r0, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001c4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001c8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4001ca:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001ce:	6715      	str	r5, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001d0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4001d2:	f425 65c0 	bic.w	r5, r5, #1536	; 0x600
  4001d6:	6755      	str	r5, [r2, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001d8:	6050      	str	r0, [r2, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4001de:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001e4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001e6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4001ee:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  4001f2:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001f4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4001f6:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  4001fa:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4001fc:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4001fe:	2201      	movs	r2, #1
  400200:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400206:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400208:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40020a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40020e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400210:	f020 0001 	bic.w	r0, r0, #1
  400214:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400216:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400218:	f020 0001 	bic.w	r0, r0, #1
  40021c:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40021e:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400220:	2202      	movs	r2, #2
  400222:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400228:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40022a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40022c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400230:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400232:	f020 0002 	bic.w	r0, r0, #2
  400236:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400238:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40023a:	f020 0002 	bic.w	r0, r0, #2
  40023e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400240:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400246:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40024c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40024e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400254:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400256:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  40025a:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40025c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40025e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  400262:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400264:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400266:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400268:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40026c:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40026e:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400270:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  40027a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40027c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40027e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  400282:	675a      	str	r2, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400284:	605c      	str	r4, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400286:	2208      	movs	r2, #8
  400288:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40028a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40028e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400290:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400296:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400298:	f020 0008 	bic.w	r0, r0, #8
  40029c:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40029e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002a0:	f020 0008 	bic.w	r0, r0, #8
  4002a4:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002a6:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002a8:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002aa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002ae:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002b0:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002b2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b8:	f022 0204 	bic.w	r2, r2, #4
  4002bc:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002c0:	f022 0204 	bic.w	r2, r2, #4
  4002c4:	675a      	str	r2, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002c6:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4002cc:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4002e8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002ea:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002f0:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002f6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002f8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400300:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400304:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400306:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400308:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40030c:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40030e:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400310:	2240      	movs	r2, #64	; 0x40
  400312:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400318:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40031a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40031c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400320:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400322:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  400326:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400328:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40032a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  40032e:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400330:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400332:	2220      	movs	r2, #32
  400334:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40033a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40033c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400342:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400344:	f021 0120 	bic.w	r1, r1, #32
  400348:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40034a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40034c:	f021 0120 	bic.w	r1, r1, #32
  400350:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400352:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400354:	2280      	movs	r2, #128	; 0x80
  400356:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40035c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40035e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400364:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400366:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40036a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40036c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40036e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  400372:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400374:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400376:	2210      	movs	r2, #16
  400378:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40037a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40037e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400380:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400386:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400388:	f021 0110 	bic.w	r1, r1, #16
  40038c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40038e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400390:	f021 0110 	bic.w	r1, r1, #16
  400394:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400396:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400398:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40039c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40039e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003a4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4003b0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003b4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4003b8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ba:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4003c0:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003c6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003c8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003d4:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003d6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003d8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003dc:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003de:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003e0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003e4:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003ea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003ec:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003f4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  4003f8:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003fa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003fc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  400400:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400402:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400404:	f44f 7200 	mov.w	r2, #512	; 0x200
  400408:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40040a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40040e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400410:	625a      	str	r2, [r3, #36]	; 0x24
  400412:	e007      	b.n	400424 <board_init+0x2d0>
  400414:	400e1850 	.word	0x400e1850
  400418:	00400acd 	.word	0x00400acd
  40041c:	400e1400 	.word	0x400e1400
  400420:	400e0e00 	.word	0x400e0e00
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400428:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40042a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  40042e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400430:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400432:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  400436:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400438:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40043a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40043e:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400440:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400444:	bd38      	pop	{r3, r4, r5, pc}
  400446:	bf00      	nop

00400448 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400448:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40044a:	480e      	ldr	r0, [pc, #56]	; (400484 <sysclk_init+0x3c>)
  40044c:	4b0e      	ldr	r3, [pc, #56]	; (400488 <sysclk_init+0x40>)
  40044e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400450:	213e      	movs	r1, #62	; 0x3e
  400452:	2000      	movs	r0, #0
  400454:	4b0d      	ldr	r3, [pc, #52]	; (40048c <sysclk_init+0x44>)
  400456:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400458:	4c0d      	ldr	r4, [pc, #52]	; (400490 <sysclk_init+0x48>)
  40045a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40045c:	2800      	cmp	r0, #0
  40045e:	d0fc      	beq.n	40045a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400460:	4b0c      	ldr	r3, [pc, #48]	; (400494 <sysclk_init+0x4c>)
  400462:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400464:	4a0c      	ldr	r2, [pc, #48]	; (400498 <sysclk_init+0x50>)
  400466:	4b0d      	ldr	r3, [pc, #52]	; (40049c <sysclk_init+0x54>)
  400468:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40046a:	4c0d      	ldr	r4, [pc, #52]	; (4004a0 <sysclk_init+0x58>)
  40046c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40046e:	2800      	cmp	r0, #0
  400470:	d0fc      	beq.n	40046c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400472:	2010      	movs	r0, #16
  400474:	4b0b      	ldr	r3, [pc, #44]	; (4004a4 <sysclk_init+0x5c>)
  400476:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400478:	4b0b      	ldr	r3, [pc, #44]	; (4004a8 <sysclk_init+0x60>)
  40047a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40047c:	4801      	ldr	r0, [pc, #4]	; (400484 <sysclk_init+0x3c>)
  40047e:	4b02      	ldr	r3, [pc, #8]	; (400488 <sysclk_init+0x40>)
  400480:	4798      	blx	r3
  400482:	bd10      	pop	{r4, pc}
  400484:	07270e00 	.word	0x07270e00
  400488:	00400e41 	.word	0x00400e41
  40048c:	00400a49 	.word	0x00400a49
  400490:	00400a9d 	.word	0x00400a9d
  400494:	00400aad 	.word	0x00400aad
  400498:	20133f01 	.word	0x20133f01
  40049c:	400e0400 	.word	0x400e0400
  4004a0:	00400abd 	.word	0x00400abd
  4004a4:	004009e1 	.word	0x004009e1
  4004a8:	00400d31 	.word	0x00400d31

004004ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4004ac:	b990      	cbnz	r0, 4004d4 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4004ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004b2:	460c      	mov	r4, r1
  4004b4:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4004b6:	2a00      	cmp	r2, #0
  4004b8:	dd0f      	ble.n	4004da <_read+0x2e>
  4004ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4004bc:	4e08      	ldr	r6, [pc, #32]	; (4004e0 <_read+0x34>)
  4004be:	4d09      	ldr	r5, [pc, #36]	; (4004e4 <_read+0x38>)
  4004c0:	6830      	ldr	r0, [r6, #0]
  4004c2:	4621      	mov	r1, r4
  4004c4:	682b      	ldr	r3, [r5, #0]
  4004c6:	4798      	blx	r3
		ptr++;
  4004c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4004ca:	42a7      	cmp	r7, r4
  4004cc:	d1f8      	bne.n	4004c0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4004ce:	4640      	mov	r0, r8
  4004d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4004d4:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4004d8:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4004da:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4004dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004e0:	20003730 	.word	0x20003730
  4004e4:	20003728 	.word	0x20003728

004004e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4004e8:	3801      	subs	r0, #1
  4004ea:	2802      	cmp	r0, #2
  4004ec:	d815      	bhi.n	40051a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4004ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004f2:	460e      	mov	r6, r1
  4004f4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4004f6:	b19a      	cbz	r2, 400520 <_write+0x38>
  4004f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4004fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400534 <_write+0x4c>
  4004fe:	4f0c      	ldr	r7, [pc, #48]	; (400530 <_write+0x48>)
  400500:	f8d8 0000 	ldr.w	r0, [r8]
  400504:	f815 1b01 	ldrb.w	r1, [r5], #1
  400508:	683b      	ldr	r3, [r7, #0]
  40050a:	4798      	blx	r3
  40050c:	2800      	cmp	r0, #0
  40050e:	db0a      	blt.n	400526 <_write+0x3e>
  400510:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400512:	3c01      	subs	r4, #1
  400514:	d1f4      	bne.n	400500 <_write+0x18>
  400516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40051a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40051e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400520:	2000      	movs	r0, #0
  400522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400526:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40052a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40052e:	bf00      	nop
  400530:	2000372c 	.word	0x2000372c
  400534:	20003730 	.word	0x20003730

00400538 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  400538:	b5f0      	push	{r4, r5, r6, r7, lr}
  40053a:	b083      	sub	sp, #12
  40053c:	4604      	mov	r4, r0
  40053e:	460f      	mov	r7, r1
  400540:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400542:	6803      	ldr	r3, [r0, #0]
  400544:	f043 0310 	orr.w	r3, r3, #16
  400548:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  40054a:	ab01      	add	r3, sp, #4
  40054c:	2201      	movs	r2, #1
  40054e:	4d36      	ldr	r5, [pc, #216]	; (400628 <ethernet_phy_set_link+0xf0>)
  400550:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400552:	b120      	cbz	r0, 40055e <ethernet_phy_set_link+0x26>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400554:	6822      	ldr	r2, [r4, #0]
  400556:	f022 0210 	bic.w	r2, r2, #16
  40055a:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  40055c:	e061      	b.n	400622 <ethernet_phy_set_link+0xea>
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  40055e:	9b01      	ldr	r3, [sp, #4]
  400560:	f013 0f04 	tst.w	r3, #4
  400564:	d105      	bne.n	400572 <ethernet_phy_set_link+0x3a>
  400566:	6823      	ldr	r3, [r4, #0]
  400568:	f023 0310 	bic.w	r3, r3, #16
  40056c:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  40056e:	20ff      	movs	r0, #255	; 0xff
  400570:	e057      	b.n	400622 <ethernet_phy_set_link+0xea>
	}

	if (uc_apply_setting_flag == 0) {
  400572:	b92e      	cbnz	r6, 400580 <ethernet_phy_set_link+0x48>
  400574:	6823      	ldr	r3, [r4, #0]
  400576:	f023 0310 	bic.w	r3, r3, #16
  40057a:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  40057c:	2000      	movs	r0, #0
  40057e:	e050      	b.n	400622 <ethernet_phy_set_link+0xea>
	}

	/* Read advertisement */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400580:	466b      	mov	r3, sp
  400582:	221e      	movs	r2, #30
  400584:	4639      	mov	r1, r7
  400586:	4620      	mov	r0, r4
  400588:	4d27      	ldr	r5, [pc, #156]	; (400628 <ethernet_phy_set_link+0xf0>)
  40058a:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40058c:	b120      	cbz	r0, 400598 <ethernet_phy_set_link+0x60>
  40058e:	6822      	ldr	r2, [r4, #0]
  400590:	f022 0210 	bic.w	r2, r2, #16
  400594:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  400596:	e044      	b.n	400622 <ethernet_phy_set_link+0xea>
	}

	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400598:	9b01      	ldr	r3, [sp, #4]
		/* Set GMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	}

	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  40059a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40059e:	d006      	beq.n	4005ae <ethernet_phy_set_link+0x76>
  4005a0:	9a00      	ldr	r2, [sp, #0]
  4005a2:	f012 0f05 	tst.w	r2, #5
  4005a6:	bf0c      	ite	eq
  4005a8:	2201      	moveq	r2, #1
  4005aa:	2200      	movne	r2, #0
  4005ac:	e000      	b.n	4005b0 <ethernet_phy_set_link+0x78>
  4005ae:	2201      	movs	r2, #1
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  4005b0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4005b4:	d003      	beq.n	4005be <ethernet_phy_set_link+0x86>
  4005b6:	9900      	ldr	r1, [sp, #0]
  4005b8:	f011 0f02 	tst.w	r1, #2
  4005bc:	d128      	bne.n	400610 <ethernet_phy_set_link+0xd8>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4005be:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4005c2:	d003      	beq.n	4005cc <ethernet_phy_set_link+0x94>
  4005c4:	9b00      	ldr	r3, [sp, #0]
  4005c6:	f013 0f01 	tst.w	r3, #1
  4005ca:	d108      	bne.n	4005de <ethernet_phy_set_link+0xa6>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  4005cc:	b14a      	cbz	r2, 4005e2 <ethernet_phy_set_link+0xaa>
  4005ce:	2301      	movs	r3, #1
  4005d0:	e000      	b.n	4005d4 <ethernet_phy_set_link+0x9c>
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
  4005d2:	2300      	movs	r3, #0
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  4005d4:	6862      	ldr	r2, [r4, #4]
  4005d6:	f042 0201 	orr.w	r2, r2, #1
  4005da:	6062      	str	r2, [r4, #4]
  4005dc:	e008      	b.n	4005f0 <ethernet_phy_set_link+0xb8>
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
		uc_fd = false;
  4005de:	2300      	movs	r3, #0
  4005e0:	e002      	b.n	4005e8 <ethernet_phy_set_link+0xb0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  4005e2:	2301      	movs	r3, #1
  4005e4:	e000      	b.n	4005e8 <ethernet_phy_set_link+0xb0>
  4005e6:	2300      	movs	r3, #0
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4005e8:	6862      	ldr	r2, [r4, #4]
  4005ea:	f022 0201 	bic.w	r2, r2, #1
  4005ee:	6062      	str	r2, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  4005f0:	b123      	cbz	r3, 4005fc <ethernet_phy_set_link+0xc4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  4005f2:	6863      	ldr	r3, [r4, #4]
  4005f4:	f043 0302 	orr.w	r3, r3, #2
  4005f8:	6063      	str	r3, [r4, #4]
  4005fa:	e003      	b.n	400604 <ethernet_phy_set_link+0xcc>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4005fc:	6863      	ldr	r3, [r4, #4]
  4005fe:	f023 0302 	bic.w	r3, r3, #2
  400602:	6063      	str	r3, [r4, #4]
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400604:	6823      	ldr	r3, [r4, #0]
  400606:	f023 0310 	bic.w	r3, r3, #16
  40060a:	6023      	str	r3, [r4, #0]
	gmac_set_speed(p_gmac, uc_speed);
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
  40060c:	2000      	movs	r0, #0
  40060e:	e008      	b.n	400622 <ethernet_phy_set_link+0xea>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400610:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400614:	d0dd      	beq.n	4005d2 <ethernet_phy_set_link+0x9a>
  400616:	9b00      	ldr	r3, [sp, #0]
  400618:	f013 0f01 	tst.w	r3, #1
  40061c:	d1e3      	bne.n	4005e6 <ethernet_phy_set_link+0xae>
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
  40061e:	2300      	movs	r3, #0
  400620:	e7d8      	b.n	4005d4 <ethernet_phy_set_link+0x9c>
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  400622:	b003      	add	sp, #12
  400624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400626:	bf00      	nop
  400628:	00400929 	.word	0x00400929

0040062c <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  40062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400630:	b082      	sub	sp, #8
  400632:	4604      	mov	r4, r0
  400634:	460d      	mov	r5, r1
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400636:	6803      	ldr	r3, [r0, #0]
  400638:	f043 0310 	orr.w	r3, r3, #16
  40063c:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  40063e:	ab01      	add	r3, sp, #4
  400640:	2200      	movs	r2, #0
  400642:	4e59      	ldr	r6, [pc, #356]	; (4007a8 <ethernet_phy_auto_negotiate+0x17c>)
  400644:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400646:	b120      	cbz	r0, 400652 <ethernet_phy_auto_negotiate+0x26>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400648:	6822      	ldr	r2, [r4, #0]
  40064a:	f022 0210 	bic.w	r2, r2, #16
  40064e:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400650:	e0a6      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	}

	ul_value &= ~(uint32_t)GMII_AUTONEG; /* Remove auto-negotiation enable */
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400652:	9b01      	ldr	r3, [sp, #4]
  400654:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
  400658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40065c:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40065e:	2200      	movs	r2, #0
  400660:	4629      	mov	r1, r5
  400662:	4620      	mov	r0, r4
  400664:	4e51      	ldr	r6, [pc, #324]	; (4007ac <ethernet_phy_auto_negotiate+0x180>)
  400666:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400668:	b120      	cbz	r0, 400674 <ethernet_phy_auto_negotiate+0x48>
  40066a:	6822      	ldr	r2, [r4, #0]
  40066c:	f022 0210 	bic.w	r2, r2, #16
  400670:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400672:	e095      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = GMII_100TX_FDX | GMII_100TX_HDX | GMII_10_FDX | GMII_10_HDX | 
			GMII_AN_IEEE_802_3;
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400674:	f240 13e1 	movw	r3, #481	; 0x1e1
  400678:	2204      	movs	r2, #4
  40067a:	4629      	mov	r1, r5
  40067c:	4620      	mov	r0, r4
  40067e:	4e4b      	ldr	r6, [pc, #300]	; (4007ac <ethernet_phy_auto_negotiate+0x180>)
  400680:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400682:	b120      	cbz	r0, 40068e <ethernet_phy_auto_negotiate+0x62>
  400684:	6822      	ldr	r2, [r4, #0]
  400686:	f022 0210 	bic.w	r2, r2, #16
  40068a:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  40068c:	e088      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	}

	/* Read & modify control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  40068e:	ab01      	add	r3, sp, #4
  400690:	2200      	movs	r2, #0
  400692:	4629      	mov	r1, r5
  400694:	4620      	mov	r0, r4
  400696:	4e44      	ldr	r6, [pc, #272]	; (4007a8 <ethernet_phy_auto_negotiate+0x17c>)
  400698:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40069a:	b120      	cbz	r0, 4006a6 <ethernet_phy_auto_negotiate+0x7a>
  40069c:	6822      	ldr	r2, [r4, #0]
  40069e:	f022 0210 	bic.w	r2, r2, #16
  4006a2:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4006a4:	e07c      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	}

	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  4006a6:	9b01      	ldr	r3, [sp, #4]
  4006a8:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  4006ac:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  4006ae:	2200      	movs	r2, #0
  4006b0:	4629      	mov	r1, r5
  4006b2:	4620      	mov	r0, r4
  4006b4:	4e3d      	ldr	r6, [pc, #244]	; (4007ac <ethernet_phy_auto_negotiate+0x180>)
  4006b6:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4006b8:	b120      	cbz	r0, 4006c4 <ethernet_phy_auto_negotiate+0x98>
  4006ba:	6822      	ldr	r2, [r4, #0]
  4006bc:	f022 0210 	bic.w	r2, r2, #16
  4006c0:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4006c2:	e06d      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	}

	/* Restart auto negotiation */
	ul_value |= (uint32_t)GMII_RESTART_AUTONEG;
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  4006c4:	9b01      	ldr	r3, [sp, #4]
  4006c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4006ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4006ce:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  4006d0:	2200      	movs	r2, #0
  4006d2:	4629      	mov	r1, r5
  4006d4:	4620      	mov	r0, r4
  4006d6:	4e35      	ldr	r6, [pc, #212]	; (4007ac <ethernet_phy_auto_negotiate+0x180>)
  4006d8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4006da:	b120      	cbz	r0, 4006e6 <ethernet_phy_auto_negotiate+0xba>
  4006dc:	6822      	ldr	r2, [r4, #0]
  4006de:	f022 0210 	bic.w	r2, r2, #16
  4006e2:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4006e4:	e05c      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
  4006e6:	4e32      	ldr	r6, [pc, #200]	; (4007b0 <ethernet_phy_auto_negotiate+0x184>)
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  4006e8:	f04f 0801 	mov.w	r8, #1
  4006ec:	4f2e      	ldr	r7, [pc, #184]	; (4007a8 <ethernet_phy_auto_negotiate+0x17c>)
  4006ee:	ab01      	add	r3, sp, #4
  4006f0:	4642      	mov	r2, r8
  4006f2:	4629      	mov	r1, r5
  4006f4:	4620      	mov	r0, r4
  4006f6:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4006f8:	b120      	cbz	r0, 400704 <ethernet_phy_auto_negotiate+0xd8>
  4006fa:	6822      	ldr	r2, [r4, #0]
  4006fc:	f022 0210 	bic.w	r2, r2, #16
  400700:	6022      	str	r2, [r4, #0]
			gmac_enable_management(p_gmac, false);
			return uc_rc;
  400702:	e04d      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
  400704:	9b01      	ldr	r3, [sp, #4]
  400706:	f013 0f20 	tst.w	r3, #32
  40070a:	d107      	bne.n	40071c <ethernet_phy_auto_negotiate+0xf0>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
			if (++ul_retry_count >= ul_retry_max) {
  40070c:	3e01      	subs	r6, #1
  40070e:	d1ee      	bne.n	4006ee <ethernet_phy_auto_negotiate+0xc2>
  400710:	6823      	ldr	r3, [r4, #0]
  400712:	f023 0310 	bic.w	r3, r3, #16
  400716:	6023      	str	r3, [r4, #0]
				gmac_enable_management(p_gmac, false);
				return GMAC_TIMEOUT;
  400718:	2001      	movs	r0, #1
  40071a:	e041      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  40071c:	466b      	mov	r3, sp
  40071e:	2205      	movs	r2, #5
  400720:	4629      	mov	r1, r5
  400722:	4620      	mov	r0, r4
  400724:	4d20      	ldr	r5, [pc, #128]	; (4007a8 <ethernet_phy_auto_negotiate+0x17c>)
  400726:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400728:	b120      	cbz	r0, 400734 <ethernet_phy_auto_negotiate+0x108>
  40072a:	6822      	ldr	r2, [r4, #0]
  40072c:	f022 0210 	bic.w	r2, r2, #16
  400730:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400732:	e035      	b.n	4007a0 <ethernet_phy_auto_negotiate+0x174>
	}


	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  400734:	9b00      	ldr	r3, [sp, #0]
  400736:	f413 7f80 	tst.w	r3, #256	; 0x100
  40073a:	d109      	bne.n	400750 <ethernet_phy_auto_negotiate+0x124>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  40073c:	f013 0f40 	tst.w	r3, #64	; 0x40
  400740:	d10c      	bne.n	40075c <ethernet_phy_auto_negotiate+0x130>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400742:	f013 0f80 	tst.w	r3, #128	; 0x80
		uc_speed = false;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_HDX) {
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
		uc_fd = false;
  400746:	bf08      	it	eq
  400748:	2300      	moveq	r3, #0
  40074a:	d009      	beq.n	400760 <ethernet_phy_auto_negotiate+0x134>
  40074c:	2300      	movs	r3, #0
  40074e:	e000      	b.n	400752 <ethernet_phy_auto_negotiate+0x126>

	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
  400750:	2301      	movs	r3, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400752:	6862      	ldr	r2, [r4, #4]
  400754:	f042 0201 	orr.w	r2, r2, #1
  400758:	6062      	str	r2, [r4, #4]
  40075a:	e005      	b.n	400768 <ethernet_phy_auto_negotiate+0x13c>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
  40075c:	2301      	movs	r3, #1
  40075e:	e7ff      	b.n	400760 <ethernet_phy_auto_negotiate+0x134>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400760:	6862      	ldr	r2, [r4, #4]
  400762:	f022 0201 	bic.w	r2, r2, #1
  400766:	6062      	str	r2, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  400768:	b123      	cbz	r3, 400774 <ethernet_phy_auto_negotiate+0x148>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  40076a:	6863      	ldr	r3, [r4, #4]
  40076c:	f043 0302 	orr.w	r3, r3, #2
  400770:	6063      	str	r3, [r4, #4]
  400772:	e003      	b.n	40077c <ethernet_phy_auto_negotiate+0x150>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400774:	6863      	ldr	r3, [r4, #4]
  400776:	f023 0302 	bic.w	r3, r3, #2
  40077a:	6063      	str	r3, [r4, #4]
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
	switch (mode) {
		case GMAC_PHY_MII:
		case GMAC_PHY_RMII:
			p_gmac->GMAC_UR |= GMAC_UR_MII;
  40077c:	68e3      	ldr	r3, [r4, #12]
  40077e:	f043 0301 	orr.w	r3, r3, #1
  400782:	60e3      	str	r3, [r4, #12]
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400784:	4b0b      	ldr	r3, [pc, #44]	; (4007b4 <ethernet_phy_auto_negotiate+0x188>)
  400786:	681a      	ldr	r2, [r3, #0]
  400788:	f042 0208 	orr.w	r2, r2, #8
  40078c:	601a      	str	r2, [r3, #0]
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40078e:	681a      	ldr	r2, [r3, #0]
  400790:	f042 0204 	orr.w	r2, r2, #4
  400794:	601a      	str	r2, [r3, #0]
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400796:	6823      	ldr	r3, [r4, #0]
  400798:	f023 0310 	bic.w	r3, r3, #16
  40079c:	6023      	str	r3, [r4, #0]

	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
  40079e:	2000      	movs	r0, #0
}
  4007a0:	b002      	add	sp, #8
  4007a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007a6:	bf00      	nop
  4007a8:	00400929 	.word	0x00400929
  4007ac:	00400989 	.word	0x00400989
  4007b0:	000f4240 	.word	0x000f4240
  4007b4:	40034000 	.word	0x40034000

004007b8 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4007b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4007bc:	b083      	sub	sp, #12
  4007be:	4605      	mov	r5, r0
  4007c0:	4689      	mov	r9, r1
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4007c2:	6803      	ldr	r3, [r0, #0]
  4007c4:	f043 0310 	orr.w	r3, r3, #16
  4007c8:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  4007ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007ce:	ae02      	add	r6, sp, #8
  4007d0:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  4007d4:	2200      	movs	r2, #0
  4007d6:	4c0e      	ldr	r4, [pc, #56]	; (400810 <ethernet_phy_reset+0x58>)
  4007d8:	47a0      	blx	r4
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
	uint32_t ul_bmcr;
	uint8_t uc_phy_address = uc_phy_addr;
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  4007da:	240a      	movs	r4, #10

	ul_bmcr = GMII_RESET;
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  4007dc:	f04f 0800 	mov.w	r8, #0
  4007e0:	4f0c      	ldr	r7, [pc, #48]	; (400814 <ethernet_phy_reset+0x5c>)
  4007e2:	4633      	mov	r3, r6
  4007e4:	4642      	mov	r2, r8
  4007e6:	4649      	mov	r1, r9
  4007e8:	4628      	mov	r0, r5
  4007ea:	47b8      	blx	r7
		ul_timeout--;
  4007ec:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4007ee:	9b01      	ldr	r3, [sp, #4]
  4007f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4007f4:	d001      	beq.n	4007fa <ethernet_phy_reset+0x42>
  4007f6:	2c00      	cmp	r4, #0
  4007f8:	d1f3      	bne.n	4007e2 <ethernet_phy_reset+0x2a>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007fa:	682b      	ldr	r3, [r5, #0]
  4007fc:	f023 0310 	bic.w	r3, r3, #16
  400800:	602b      	str	r3, [r5, #0]
	if (!ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  400802:	1c20      	adds	r0, r4, #0
  400804:	bf18      	it	ne
  400806:	2001      	movne	r0, #1
  400808:	b003      	add	sp, #12
  40080a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40080e:	bf00      	nop
  400810:	00400989 	.word	0x00400989
  400814:	00400929 	.word	0x00400929

00400818 <ethernet_phy_init>:
 * \param ul_mck GMAC MCK.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Gmac *p_gmac, uint8_t uc_phy_addr, uint32_t mck)
{
  400818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40081c:	b083      	sub	sp, #12
  40081e:	4606      	mov	r6, r0
  400820:	4689      	mov	r9, r1
  400822:	4614      	mov	r4, r2
	uint8_t uc_rc;
	uint8_t uc_phy;

	ethernet_phy_reset(GMAC,uc_phy_addr);
  400824:	4837      	ldr	r0, [pc, #220]	; (400904 <ethernet_phy_init+0xec>)
  400826:	4b38      	ldr	r3, [pc, #224]	; (400908 <ethernet_phy_init+0xf0>)
  400828:	4798      	blx	r3
 */
static inline uint8_t gmac_set_mdc_clock(Gmac* p_gmac, uint32_t ul_mck)
{
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  40082a:	4b38      	ldr	r3, [pc, #224]	; (40090c <ethernet_phy_init+0xf4>)
  40082c:	429c      	cmp	r4, r3
  40082e:	d865      	bhi.n	4008fc <ethernet_phy_init+0xe4>
		return GMAC_INVALID;
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400830:	4b37      	ldr	r3, [pc, #220]	; (400910 <ethernet_phy_init+0xf8>)
  400832:	429c      	cmp	r4, r3
  400834:	d80f      	bhi.n	400856 <ethernet_phy_init+0x3e>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400836:	4b37      	ldr	r3, [pc, #220]	; (400914 <ethernet_phy_init+0xfc>)
  400838:	429c      	cmp	r4, r3
  40083a:	d80f      	bhi.n	40085c <ethernet_phy_init+0x44>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  40083c:	4b36      	ldr	r3, [pc, #216]	; (400918 <ethernet_phy_init+0x100>)
  40083e:	429c      	cmp	r4, r3
  400840:	d80f      	bhi.n	400862 <ethernet_phy_init+0x4a>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400842:	4b36      	ldr	r3, [pc, #216]	; (40091c <ethernet_phy_init+0x104>)
  400844:	429c      	cmp	r4, r3
  400846:	d80f      	bhi.n	400868 <ethernet_phy_init+0x50>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400848:	4b35      	ldr	r3, [pc, #212]	; (400920 <ethernet_phy_init+0x108>)
  40084a:	429c      	cmp	r4, r3
  40084c:	bf8c      	ite	hi
  40084e:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  400852:	2300      	movls	r3, #0
  400854:	e00a      	b.n	40086c <ethernet_phy_init+0x54>
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
		return GMAC_INVALID;
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400856:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
  40085a:	e007      	b.n	40086c <ethernet_phy_init+0x54>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  40085c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400860:	e004      	b.n	40086c <ethernet_phy_init+0x54>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400862:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400866:	e001      	b.n	40086c <ethernet_phy_init+0x54>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  400868:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
	}
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  40086c:	6872      	ldr	r2, [r6, #4]
  40086e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  400872:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400874:	6874      	ldr	r4, [r6, #4]
  400876:	431c      	orrs	r4, r3
  400878:	6074      	str	r4, [r6, #4]
 * \return 0xFF when no valid PHY address is found.
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
	uint32_t ul_value = 0;
  40087a:	ab02      	add	r3, sp, #8
  40087c:	2200      	movs	r2, #0
  40087e:	f843 2d04 	str.w	r2, [r3, #-4]!
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400882:	6832      	ldr	r2, [r6, #0]
  400884:	f042 0210 	orr.w	r2, r2, #16
  400888:	6032      	str	r2, [r6, #0]
	uint8_t uc_phy_address = uc_phy_addr;

	gmac_enable_management(p_gmac, true);

	/* Check the current PHY address */
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  40088a:	2202      	movs	r2, #2
  40088c:	4649      	mov	r1, r9
  40088e:	4630      	mov	r0, r6
  400890:	4c24      	ldr	r4, [pc, #144]	; (400924 <ethernet_phy_init+0x10c>)
  400892:	47a0      	blx	r4

	/* Find another one */
	if (ul_value != GMII_OUI_LSB) {
  400894:	9b01      	ldr	r3, [sp, #4]
  400896:	2b05      	cmp	r3, #5
  400898:	d025      	beq.n	4008e6 <ethernet_phy_init+0xce>
  40089a:	464c      	mov	r4, r9
  40089c:	2520      	movs	r5, #32
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  40089e:	f04f 0802 	mov.w	r8, #2
  4008a2:	4f20      	ldr	r7, [pc, #128]	; (400924 <ethernet_phy_init+0x10c>)

	/* Find another one */
	if (ul_value != GMII_OUI_LSB) {
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  4008a4:	3401      	adds	r4, #1
  4008a6:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  4008aa:	ab01      	add	r3, sp, #4
  4008ac:	4642      	mov	r2, r8
  4008ae:	4621      	mov	r1, r4
  4008b0:	4630      	mov	r0, r6
  4008b2:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  4008b4:	9b01      	ldr	r3, [sp, #4]
  4008b6:	2b22      	cmp	r3, #34	; 0x22
  4008b8:	d004      	beq.n	4008c4 <ethernet_phy_init+0xac>
  4008ba:	1e6b      	subs	r3, r5, #1
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);

	/* Find another one */
	if (ul_value != GMII_OUI_LSB) {
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  4008bc:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  4008c0:	d1f0      	bne.n	4008a4 <ethernet_phy_init+0x8c>
  4008c2:	e017      	b.n	4008f4 <ethernet_phy_init+0xdc>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4008c4:	6833      	ldr	r3, [r6, #0]
  4008c6:	f023 0310 	bic.w	r3, r3, #16
  4008ca:	6033      	str	r3, [r6, #0]
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  4008cc:	4621      	mov	r1, r4
	}

	gmac_enable_management(p_gmac, false);

	if (uc_rc != 0xFF) {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4008ce:	ab01      	add	r3, sp, #4
  4008d0:	2201      	movs	r2, #1
  4008d2:	4630      	mov	r0, r6
  4008d4:	4d13      	ldr	r5, [pc, #76]	; (400924 <ethernet_phy_init+0x10c>)
  4008d6:	47a8      	blx	r5
	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_gmac, uc_phy_addr, 0);
	if (uc_phy == 0xFF) {
		return 0;
	}
	if (uc_phy != uc_phy_addr) {
  4008d8:	45a1      	cmp	r9, r4
  4008da:	d00f      	beq.n	4008fc <ethernet_phy_init+0xe4>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4008dc:	4649      	mov	r1, r9
  4008de:	4630      	mov	r0, r6
  4008e0:	4b09      	ldr	r3, [pc, #36]	; (400908 <ethernet_phy_init+0xf0>)
  4008e2:	4798      	blx	r3
  4008e4:	e00a      	b.n	4008fc <ethernet_phy_init+0xe4>
  4008e6:	6833      	ldr	r3, [r6, #0]
  4008e8:	f023 0310 	bic.w	r3, r3, #16
  4008ec:	6033      	str	r3, [r6, #0]
		uint8_t uc_start_addr)
{
	uint32_t ul_value = 0;
	uint8_t uc_rc = 0;
	uint8_t uc_cnt;
	uint8_t uc_phy_address = uc_phy_addr;
  4008ee:	4649      	mov	r1, r9
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
	uint32_t ul_value = 0;
	uint8_t uc_rc = 0;
  4008f0:	2400      	movs	r4, #0
  4008f2:	e7ec      	b.n	4008ce <ethernet_phy_init+0xb6>
  4008f4:	6833      	ldr	r3, [r6, #0]
  4008f6:	f023 0310 	bic.w	r3, r3, #16
  4008fa:	6033      	str	r3, [r6, #0]
	if (uc_phy != uc_phy_addr) {
		ethernet_phy_reset(p_gmac, uc_phy_addr);
	}

	return uc_rc;
}
  4008fc:	2000      	movs	r0, #0
  4008fe:	b003      	add	sp, #12
  400900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400904:	40034000 	.word	0x40034000
  400908:	004007b9 	.word	0x004007b9
  40090c:	0e4e1c00 	.word	0x0e4e1c00
  400910:	09896800 	.word	0x09896800
  400914:	07270e00 	.word	0x07270e00
  400918:	04c4b400 	.word	0x04c4b400
  40091c:	02625a00 	.word	0x02625a00
  400920:	01312d00 	.word	0x01312d00
  400924:	00400929 	.word	0x00400929

00400928 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  400928:	b410      	push	{r4}
  40092a:	b083      	sub	sp, #12
static inline void gmac_maintain_phy(Gmac* p_gmac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40092c:	6884      	ldr	r4, [r0, #8]
  40092e:	f014 0f04 	tst.w	r4, #4
  400932:	d0fb      	beq.n	40092c <gmac_phy_read+0x4>
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
			| GMAC_MAN_REGA(uc_reg_addr)
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
			| GMAC_MAN_DATA(us_data);
  400934:	0492      	lsls	r2, r2, #18
  400936:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
  40093a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
  40093e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400942:	05c9      	lsls	r1, r1, #23
  400944:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
  400948:	430a      	orrs	r2, r1
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  40094a:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
  40094c:	2200      	movs	r2, #0
  40094e:	9201      	str	r2, [sp, #4]

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
  400950:	490c      	ldr	r1, [pc, #48]	; (400984 <gmac_phy_read+0x5c>)
  400952:	e005      	b.n	400960 <gmac_phy_read+0x38>
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;
  400954:	9a01      	ldr	r2, [sp, #4]
  400956:	3201      	adds	r2, #1
  400958:	9201      	str	r2, [sp, #4]

		if (ul_retry_count >= ul_retry) {
  40095a:	9a01      	ldr	r2, [sp, #4]
  40095c:	428a      	cmp	r2, r1
  40095e:	d80c      	bhi.n	40097a <gmac_phy_read+0x52>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t gmac_is_phy_idle(Gmac* p_gmac)
{
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  400960:	6882      	ldr	r2, [r0, #8]
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
  400962:	f012 0f04 	tst.w	r2, #4
  400966:	d0f5      	beq.n	400954 <gmac_phy_read+0x2c>
 * \return Get PHY data.
 */
static inline uint16_t gmac_get_phy_data(Gmac* p_gmac)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400968:	6882      	ldr	r2, [r0, #8]
  40096a:	f012 0f04 	tst.w	r2, #4
  40096e:	d0fb      	beq.n	400968 <gmac_phy_read+0x40>
	/* Return data */
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  400970:	6b42      	ldr	r2, [r0, #52]	; 0x34
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	*p_value = gmac_get_phy_data(p_gmac);
  400972:	b292      	uxth	r2, r2
  400974:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  400976:	2000      	movs	r0, #0
  400978:	e000      	b.n	40097c <gmac_phy_read+0x54>
		uint32_t* p_value)
{
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  40097a:	2001      	movs	r0, #1
	}
	*p_value = gmac_get_phy_data(p_gmac);
	return GMAC_OK;
}
  40097c:	b003      	add	sp, #12
  40097e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400982:	4770      	bx	lr
  400984:	000f423f 	.word	0x000f423f

00400988 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  400988:	b410      	push	{r4}
  40098a:	b083      	sub	sp, #12
static inline void gmac_maintain_phy(Gmac* p_gmac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40098c:	6884      	ldr	r4, [r0, #8]
  40098e:	f014 0f04 	tst.w	r4, #4
  400992:	d0fb      	beq.n	40098c <gmac_phy_write+0x4>
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
			| GMAC_MAN_REGA(uc_reg_addr)
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
			| GMAC_MAN_DATA(us_data);
  400994:	0492      	lsls	r2, r2, #18
  400996:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
  40099a:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
  40099e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009a2:	05c9      	lsls	r1, r1, #23
  4009a4:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
  4009a8:	430a      	orrs	r2, r1
  4009aa:	b29b      	uxth	r3, r3
  4009ac:	431a      	orrs	r2, r3
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  4009ae:	6342      	str	r2, [r0, #52]	; 0x34
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
  4009b0:	2300      	movs	r3, #0
  4009b2:	9301      	str	r3, [sp, #4]

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
  4009b4:	4a09      	ldr	r2, [pc, #36]	; (4009dc <gmac_phy_write+0x54>)
  4009b6:	e005      	b.n	4009c4 <gmac_phy_write+0x3c>
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;
  4009b8:	9b01      	ldr	r3, [sp, #4]
  4009ba:	3301      	adds	r3, #1
  4009bc:	9301      	str	r3, [sp, #4]

		if (ul_retry_count >= ul_retry) {
  4009be:	9b01      	ldr	r3, [sp, #4]
  4009c0:	4293      	cmp	r3, r2
  4009c2:	d805      	bhi.n	4009d0 <gmac_phy_write+0x48>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t gmac_is_phy_idle(Gmac* p_gmac)
{
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  4009c4:	6883      	ldr	r3, [r0, #8]
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
  4009c6:	f013 0f04 	tst.w	r3, #4
  4009ca:	d0f5      	beq.n	4009b8 <gmac_phy_write+0x30>

		if (ul_retry_count >= ul_retry) {
			return GMAC_TIMEOUT;
		}
	}
	return GMAC_OK;
  4009cc:	2000      	movs	r0, #0
  4009ce:	e000      	b.n	4009d2 <gmac_phy_write+0x4a>

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
			return GMAC_TIMEOUT;
  4009d0:	2001      	movs	r0, #1

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  4009d2:	b003      	add	sp, #12
  4009d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009d8:	4770      	bx	lr
  4009da:	bf00      	nop
  4009dc:	000f423f 	.word	0x000f423f

004009e0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4009e0:	4a18      	ldr	r2, [pc, #96]	; (400a44 <pmc_switch_mck_to_pllack+0x64>)
  4009e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4009e8:	4318      	orrs	r0, r3
  4009ea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ee:	f013 0f08 	tst.w	r3, #8
  4009f2:	d003      	beq.n	4009fc <pmc_switch_mck_to_pllack+0x1c>
  4009f4:	e009      	b.n	400a0a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009f6:	3b01      	subs	r3, #1
  4009f8:	d103      	bne.n	400a02 <pmc_switch_mck_to_pllack+0x22>
  4009fa:	e01e      	b.n	400a3a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a00:	4910      	ldr	r1, [pc, #64]	; (400a44 <pmc_switch_mck_to_pllack+0x64>)
  400a02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a04:	f012 0f08 	tst.w	r2, #8
  400a08:	d0f5      	beq.n	4009f6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400a0a:	4a0e      	ldr	r2, [pc, #56]	; (400a44 <pmc_switch_mck_to_pllack+0x64>)
  400a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a0e:	f023 0303 	bic.w	r3, r3, #3
  400a12:	f043 0302 	orr.w	r3, r3, #2
  400a16:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a18:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400a1a:	f010 0008 	ands.w	r0, r0, #8
  400a1e:	d004      	beq.n	400a2a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400a20:	2000      	movs	r0, #0
  400a22:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a24:	3b01      	subs	r3, #1
  400a26:	d103      	bne.n	400a30 <pmc_switch_mck_to_pllack+0x50>
  400a28:	e009      	b.n	400a3e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a2e:	4905      	ldr	r1, [pc, #20]	; (400a44 <pmc_switch_mck_to_pllack+0x64>)
  400a30:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a32:	f012 0f08 	tst.w	r2, #8
  400a36:	d0f5      	beq.n	400a24 <pmc_switch_mck_to_pllack+0x44>
  400a38:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a3a:	2001      	movs	r0, #1
  400a3c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a3e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	400e0400 	.word	0x400e0400

00400a48 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a48:	b138      	cbz	r0, 400a5a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a4a:	4911      	ldr	r1, [pc, #68]	; (400a90 <pmc_switch_mainck_to_xtal+0x48>)
  400a4c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a4e:	4a11      	ldr	r2, [pc, #68]	; (400a94 <pmc_switch_mainck_to_xtal+0x4c>)
  400a50:	401a      	ands	r2, r3
  400a52:	4b11      	ldr	r3, [pc, #68]	; (400a98 <pmc_switch_mainck_to_xtal+0x50>)
  400a54:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a56:	620b      	str	r3, [r1, #32]
  400a58:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a5a:	480d      	ldr	r0, [pc, #52]	; (400a90 <pmc_switch_mainck_to_xtal+0x48>)
  400a5c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a5e:	0209      	lsls	r1, r1, #8
  400a60:	b289      	uxth	r1, r1
  400a62:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400a66:	f023 0303 	bic.w	r3, r3, #3
  400a6a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a6e:	f043 0301 	orr.w	r3, r3, #1
  400a72:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a74:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a76:	4602      	mov	r2, r0
  400a78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a7a:	f013 0f01 	tst.w	r3, #1
  400a7e:	d0fb      	beq.n	400a78 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a80:	4a03      	ldr	r2, [pc, #12]	; (400a90 <pmc_switch_mainck_to_xtal+0x48>)
  400a82:	6a13      	ldr	r3, [r2, #32]
  400a84:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a8c:	6213      	str	r3, [r2, #32]
  400a8e:	4770      	bx	lr
  400a90:	400e0400 	.word	0x400e0400
  400a94:	fec8fffc 	.word	0xfec8fffc
  400a98:	01370002 	.word	0x01370002

00400a9c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a9c:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <pmc_osc_is_ready_mainck+0xc>)
  400a9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400aa0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop
  400aa8:	400e0400 	.word	0x400e0400

00400aac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400aac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ab0:	4b01      	ldr	r3, [pc, #4]	; (400ab8 <pmc_disable_pllack+0xc>)
  400ab2:	629a      	str	r2, [r3, #40]	; 0x28
  400ab4:	4770      	bx	lr
  400ab6:	bf00      	nop
  400ab8:	400e0400 	.word	0x400e0400

00400abc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400abc:	4b02      	ldr	r3, [pc, #8]	; (400ac8 <pmc_is_locked_pllack+0xc>)
  400abe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ac0:	f000 0002 	and.w	r0, r0, #2
  400ac4:	4770      	bx	lr
  400ac6:	bf00      	nop
  400ac8:	400e0400 	.word	0x400e0400

00400acc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400acc:	282f      	cmp	r0, #47	; 0x2f
  400ace:	d81e      	bhi.n	400b0e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ad0:	281f      	cmp	r0, #31
  400ad2:	d80c      	bhi.n	400aee <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ad4:	4b11      	ldr	r3, [pc, #68]	; (400b1c <pmc_enable_periph_clk+0x50>)
  400ad6:	699a      	ldr	r2, [r3, #24]
  400ad8:	2301      	movs	r3, #1
  400ada:	4083      	lsls	r3, r0
  400adc:	4393      	bics	r3, r2
  400ade:	d018      	beq.n	400b12 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ae0:	2301      	movs	r3, #1
  400ae2:	fa03 f000 	lsl.w	r0, r3, r0
  400ae6:	4b0d      	ldr	r3, [pc, #52]	; (400b1c <pmc_enable_periph_clk+0x50>)
  400ae8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400aea:	2000      	movs	r0, #0
  400aec:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400aee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400af0:	4b0a      	ldr	r3, [pc, #40]	; (400b1c <pmc_enable_periph_clk+0x50>)
  400af2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400af6:	2301      	movs	r3, #1
  400af8:	4083      	lsls	r3, r0
  400afa:	4393      	bics	r3, r2
  400afc:	d00b      	beq.n	400b16 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400afe:	2301      	movs	r3, #1
  400b00:	fa03 f000 	lsl.w	r0, r3, r0
  400b04:	4b05      	ldr	r3, [pc, #20]	; (400b1c <pmc_enable_periph_clk+0x50>)
  400b06:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b0a:	2000      	movs	r0, #0
  400b0c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400b0e:	2001      	movs	r0, #1
  400b10:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b12:	2000      	movs	r0, #0
  400b14:	4770      	bx	lr
  400b16:	2000      	movs	r0, #0
}
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop
  400b1c:	400e0400 	.word	0x400e0400

00400b20 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400b20:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400b22:	0189      	lsls	r1, r1, #6
  400b24:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400b26:	2402      	movs	r4, #2
  400b28:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400b2a:	f04f 31ff 	mov.w	r1, #4294967295
  400b2e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400b30:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400b32:	605a      	str	r2, [r3, #4]
}
  400b34:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b38:	4770      	bx	lr
  400b3a:	bf00      	nop

00400b3c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400b3c:	0189      	lsls	r1, r1, #6
  400b3e:	2305      	movs	r3, #5
  400b40:	5043      	str	r3, [r0, r1]
  400b42:	4770      	bx	lr

00400b44 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400b44:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400b48:	61ca      	str	r2, [r1, #28]
  400b4a:	4770      	bx	lr

00400b4c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400b4c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400b50:	624a      	str	r2, [r1, #36]	; 0x24
  400b52:	4770      	bx	lr

00400b54 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400b54:	b4f0      	push	{r4, r5, r6, r7}
  400b56:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400b58:	2402      	movs	r4, #2
  400b5a:	9401      	str	r4, [sp, #4]
  400b5c:	2408      	movs	r4, #8
  400b5e:	9402      	str	r4, [sp, #8]
  400b60:	2420      	movs	r4, #32
  400b62:	9403      	str	r4, [sp, #12]
  400b64:	2480      	movs	r4, #128	; 0x80
  400b66:	9404      	str	r4, [sp, #16]
  400b68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400b6a:	0be4      	lsrs	r4, r4, #15
  400b6c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400b6e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400b72:	d81c      	bhi.n	400bae <tc_find_mck_divisor+0x5a>
  400b74:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400b76:	42a0      	cmp	r0, r4
  400b78:	d21f      	bcs.n	400bba <tc_find_mck_divisor+0x66>
  400b7a:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400b7c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400b7e:	f856 4f04 	ldr.w	r4, [r6, #4]!
  400b82:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400b86:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  400b88:	4284      	cmp	r4, r0
  400b8a:	d312      	bcc.n	400bb2 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  400b8c:	4287      	cmp	r7, r0
  400b8e:	d915      	bls.n	400bbc <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400b90:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400b92:	2d05      	cmp	r5, #5
  400b94:	d1f3      	bne.n	400b7e <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400b96:	2000      	movs	r0, #0
  400b98:	e013      	b.n	400bc2 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  400b9a:	a906      	add	r1, sp, #24
  400b9c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400ba0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400ba4:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400ba6:	b133      	cbz	r3, 400bb6 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400ba8:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400baa:	2001      	movs	r0, #1
  400bac:	e009      	b.n	400bc2 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  400bae:	2000      	movs	r0, #0
  400bb0:	e007      	b.n	400bc2 <tc_find_mck_divisor+0x6e>
  400bb2:	2000      	movs	r0, #0
  400bb4:	e005      	b.n	400bc2 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400bb6:	2001      	movs	r0, #1
  400bb8:	e003      	b.n	400bc2 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400bba:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400bbc:	2a00      	cmp	r2, #0
  400bbe:	d1ec      	bne.n	400b9a <tc_find_mck_divisor+0x46>
  400bc0:	e7f1      	b.n	400ba6 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400bc2:	b006      	add	sp, #24
  400bc4:	bcf0      	pop	{r4, r5, r6, r7}
  400bc6:	4770      	bx	lr

00400bc8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400bc8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400bca:	23ac      	movs	r3, #172	; 0xac
  400bcc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400bce:	680b      	ldr	r3, [r1, #0]
  400bd0:	684a      	ldr	r2, [r1, #4]
  400bd2:	fbb3 f3f2 	udiv	r3, r3, r2
  400bd6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400bd8:	1e5c      	subs	r4, r3, #1
  400bda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400bde:	4294      	cmp	r4, r2
  400be0:	d80a      	bhi.n	400bf8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400be2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400be4:	688b      	ldr	r3, [r1, #8]
  400be6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400be8:	f240 2302 	movw	r3, #514	; 0x202
  400bec:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400bf0:	2350      	movs	r3, #80	; 0x50
  400bf2:	6003      	str	r3, [r0, #0]

	return 0;
  400bf4:	2000      	movs	r0, #0
  400bf6:	e000      	b.n	400bfa <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400bf8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bfe:	4770      	bx	lr

00400c00 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c00:	6943      	ldr	r3, [r0, #20]
  400c02:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c06:	bf1a      	itte	ne
  400c08:	61c1      	strne	r1, [r0, #28]
	return 0;
  400c0a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400c0c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400c0e:	4770      	bx	lr

00400c10 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400c10:	6943      	ldr	r3, [r0, #20]
  400c12:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400c16:	bf1d      	ittte	ne
  400c18:	6983      	ldrne	r3, [r0, #24]
  400c1a:	700b      	strbne	r3, [r1, #0]
	return 0;
  400c1c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400c1e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop

00400c24 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c24:	6943      	ldr	r3, [r0, #20]
  400c26:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400c2a:	bf1d      	ittte	ne
  400c2c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400c30:	61c1      	strne	r1, [r0, #28]
	return 0;
  400c32:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400c34:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400c36:	4770      	bx	lr

00400c38 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c38:	6943      	ldr	r3, [r0, #20]
  400c3a:	f013 0f01 	tst.w	r3, #1
  400c3e:	d005      	beq.n	400c4c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c40:	6983      	ldr	r3, [r0, #24]
  400c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400c46:	600b      	str	r3, [r1, #0]

	return 0;
  400c48:	2000      	movs	r0, #0
  400c4a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400c4c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400c4e:	4770      	bx	lr

00400c50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400c50:	e7fe      	b.n	400c50 <Dummy_Handler>
  400c52:	bf00      	nop

00400c54 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400c54:	b500      	push	{lr}
  400c56:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400c58:	4b27      	ldr	r3, [pc, #156]	; (400cf8 <Reset_Handler+0xa4>)
  400c5a:	4a28      	ldr	r2, [pc, #160]	; (400cfc <Reset_Handler+0xa8>)
  400c5c:	429a      	cmp	r2, r3
  400c5e:	d003      	beq.n	400c68 <Reset_Handler+0x14>
		for (; pDest < &_erelocate;) {
  400c60:	4b27      	ldr	r3, [pc, #156]	; (400d00 <Reset_Handler+0xac>)
  400c62:	4a25      	ldr	r2, [pc, #148]	; (400cf8 <Reset_Handler+0xa4>)
  400c64:	429a      	cmp	r2, r3
  400c66:	d304      	bcc.n	400c72 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400c68:	4b26      	ldr	r3, [pc, #152]	; (400d04 <Reset_Handler+0xb0>)
  400c6a:	4a27      	ldr	r2, [pc, #156]	; (400d08 <Reset_Handler+0xb4>)
  400c6c:	429a      	cmp	r2, r3
  400c6e:	d30f      	bcc.n	400c90 <Reset_Handler+0x3c>
  400c70:	e01a      	b.n	400ca8 <Reset_Handler+0x54>
  400c72:	4921      	ldr	r1, [pc, #132]	; (400cf8 <Reset_Handler+0xa4>)
  400c74:	4b25      	ldr	r3, [pc, #148]	; (400d0c <Reset_Handler+0xb8>)
  400c76:	1a5b      	subs	r3, r3, r1
  400c78:	f023 0303 	bic.w	r3, r3, #3
  400c7c:	3304      	adds	r3, #4
  400c7e:	4a1f      	ldr	r2, [pc, #124]	; (400cfc <Reset_Handler+0xa8>)
  400c80:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  400c82:	f852 0b04 	ldr.w	r0, [r2], #4
  400c86:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  400c8a:	429a      	cmp	r2, r3
  400c8c:	d1f9      	bne.n	400c82 <Reset_Handler+0x2e>
  400c8e:	e7eb      	b.n	400c68 <Reset_Handler+0x14>
  400c90:	4b1f      	ldr	r3, [pc, #124]	; (400d10 <Reset_Handler+0xbc>)
  400c92:	4a20      	ldr	r2, [pc, #128]	; (400d14 <Reset_Handler+0xc0>)
  400c94:	1ad2      	subs	r2, r2, r3
  400c96:	f022 0203 	bic.w	r2, r2, #3
  400c9a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400c9c:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400c9e:	2100      	movs	r1, #0
  400ca0:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400ca4:	4293      	cmp	r3, r2
  400ca6:	d1fb      	bne.n	400ca0 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ca8:	4a1b      	ldr	r2, [pc, #108]	; (400d18 <Reset_Handler+0xc4>)
  400caa:	4b1c      	ldr	r3, [pc, #112]	; (400d1c <Reset_Handler+0xc8>)
  400cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400cb0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400cb2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cb6:	fab3 f383 	clz	r3, r3
  400cba:	095b      	lsrs	r3, r3, #5
  400cbc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400cbe:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400cc0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cc4:	2200      	movs	r2, #0
  400cc6:	4b16      	ldr	r3, [pc, #88]	; (400d20 <Reset_Handler+0xcc>)
  400cc8:	701a      	strb	r2, [r3, #0]
	return flags;
  400cca:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400ccc:	4a15      	ldr	r2, [pc, #84]	; (400d24 <Reset_Handler+0xd0>)
  400cce:	6813      	ldr	r3, [r2, #0]
  400cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400cd4:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400cd6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400cda:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400cde:	b129      	cbz	r1, 400cec <Reset_Handler+0x98>
		cpu_irq_enable();
  400ce0:	2201      	movs	r2, #1
  400ce2:	4b0f      	ldr	r3, [pc, #60]	; (400d20 <Reset_Handler+0xcc>)
  400ce4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400ce6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cea:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400cec:	4b0e      	ldr	r3, [pc, #56]	; (400d28 <Reset_Handler+0xd4>)
  400cee:	4798      	blx	r3

	/* Branch to main function */
	main();
  400cf0:	4b0e      	ldr	r3, [pc, #56]	; (400d2c <Reset_Handler+0xd8>)
  400cf2:	4798      	blx	r3
  400cf4:	e7fe      	b.n	400cf4 <Reset_Handler+0xa0>
  400cf6:	bf00      	nop
  400cf8:	20000000 	.word	0x20000000
  400cfc:	00409814 	.word	0x00409814
  400d00:	200008a4 	.word	0x200008a4
  400d04:	200047c0 	.word	0x200047c0
  400d08:	200008a8 	.word	0x200008a8
  400d0c:	200008a3 	.word	0x200008a3
  400d10:	200008ac 	.word	0x200008ac
  400d14:	200047c3 	.word	0x200047c3
  400d18:	e000ed00 	.word	0xe000ed00
  400d1c:	00400000 	.word	0x00400000
  400d20:	20000000 	.word	0x20000000
  400d24:	e000ed88 	.word	0xe000ed88
  400d28:	00406319 	.word	0x00406319
  400d2c:	004060f5 	.word	0x004060f5

00400d30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400d30:	4b3c      	ldr	r3, [pc, #240]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d34:	f003 0303 	and.w	r3, r3, #3
  400d38:	2b01      	cmp	r3, #1
  400d3a:	d00f      	beq.n	400d5c <SystemCoreClockUpdate+0x2c>
  400d3c:	b113      	cbz	r3, 400d44 <SystemCoreClockUpdate+0x14>
  400d3e:	2b02      	cmp	r3, #2
  400d40:	d029      	beq.n	400d96 <SystemCoreClockUpdate+0x66>
  400d42:	e057      	b.n	400df4 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400d44:	4b38      	ldr	r3, [pc, #224]	; (400e28 <SystemCoreClockUpdate+0xf8>)
  400d46:	695b      	ldr	r3, [r3, #20]
  400d48:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400d4c:	bf14      	ite	ne
  400d4e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400d52:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400d56:	4b35      	ldr	r3, [pc, #212]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400d58:	601a      	str	r2, [r3, #0]
  400d5a:	e04b      	b.n	400df4 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400d5c:	4b31      	ldr	r3, [pc, #196]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400d5e:	6a1b      	ldr	r3, [r3, #32]
  400d60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400d64:	d003      	beq.n	400d6e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400d66:	4a32      	ldr	r2, [pc, #200]	; (400e30 <SystemCoreClockUpdate+0x100>)
  400d68:	4b30      	ldr	r3, [pc, #192]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400d6a:	601a      	str	r2, [r3, #0]
  400d6c:	e042      	b.n	400df4 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d6e:	4a31      	ldr	r2, [pc, #196]	; (400e34 <SystemCoreClockUpdate+0x104>)
  400d70:	4b2e      	ldr	r3, [pc, #184]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400d72:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d74:	4b2b      	ldr	r3, [pc, #172]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400d76:	6a1b      	ldr	r3, [r3, #32]
  400d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d7c:	2b10      	cmp	r3, #16
  400d7e:	d002      	beq.n	400d86 <SystemCoreClockUpdate+0x56>
  400d80:	2b20      	cmp	r3, #32
  400d82:	d004      	beq.n	400d8e <SystemCoreClockUpdate+0x5e>
  400d84:	e036      	b.n	400df4 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  400d86:	4a2c      	ldr	r2, [pc, #176]	; (400e38 <SystemCoreClockUpdate+0x108>)
  400d88:	4b28      	ldr	r3, [pc, #160]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400d8a:	601a      	str	r2, [r3, #0]
				break;
  400d8c:	e032      	b.n	400df4 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  400d8e:	4a28      	ldr	r2, [pc, #160]	; (400e30 <SystemCoreClockUpdate+0x100>)
  400d90:	4b26      	ldr	r3, [pc, #152]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400d92:	601a      	str	r2, [r3, #0]
				break;
  400d94:	e02e      	b.n	400df4 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400d96:	4b23      	ldr	r3, [pc, #140]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400d98:	6a1b      	ldr	r3, [r3, #32]
  400d9a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400d9e:	d003      	beq.n	400da8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400da0:	4a23      	ldr	r2, [pc, #140]	; (400e30 <SystemCoreClockUpdate+0x100>)
  400da2:	4b22      	ldr	r3, [pc, #136]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400da4:	601a      	str	r2, [r3, #0]
  400da6:	e012      	b.n	400dce <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400da8:	4a22      	ldr	r2, [pc, #136]	; (400e34 <SystemCoreClockUpdate+0x104>)
  400daa:	4b20      	ldr	r3, [pc, #128]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400dac:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400dae:	4b1d      	ldr	r3, [pc, #116]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400db0:	6a1b      	ldr	r3, [r3, #32]
  400db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400db6:	2b10      	cmp	r3, #16
  400db8:	d002      	beq.n	400dc0 <SystemCoreClockUpdate+0x90>
  400dba:	2b20      	cmp	r3, #32
  400dbc:	d004      	beq.n	400dc8 <SystemCoreClockUpdate+0x98>
  400dbe:	e006      	b.n	400dce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  400dc0:	4a1d      	ldr	r2, [pc, #116]	; (400e38 <SystemCoreClockUpdate+0x108>)
  400dc2:	4b1a      	ldr	r3, [pc, #104]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400dc4:	601a      	str	r2, [r3, #0]
				break;
  400dc6:	e002      	b.n	400dce <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  400dc8:	4a19      	ldr	r2, [pc, #100]	; (400e30 <SystemCoreClockUpdate+0x100>)
  400dca:	4b18      	ldr	r3, [pc, #96]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400dcc:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400dce:	4b15      	ldr	r3, [pc, #84]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd2:	f003 0303 	and.w	r3, r3, #3
  400dd6:	2b02      	cmp	r3, #2
  400dd8:	d10c      	bne.n	400df4 <SystemCoreClockUpdate+0xc4>
		{
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400dda:	4a12      	ldr	r2, [pc, #72]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400ddc:	6a93      	ldr	r3, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400dde:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400de0:	4812      	ldr	r0, [pc, #72]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400de2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400de6:	6803      	ldr	r3, [r0, #0]
  400de8:	fb01 3303 	mla	r3, r1, r3, r3
  400dec:	b2d2      	uxtb	r2, r2
  400dee:	fbb3 f3f2 	udiv	r3, r3, r2
  400df2:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400df4:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dfc:	2b70      	cmp	r3, #112	; 0x70
  400dfe:	d107      	bne.n	400e10 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400e00:	4a0a      	ldr	r2, [pc, #40]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400e02:	6813      	ldr	r3, [r2, #0]
  400e04:	490d      	ldr	r1, [pc, #52]	; (400e3c <SystemCoreClockUpdate+0x10c>)
  400e06:	fba1 1303 	umull	r1, r3, r1, r3
  400e0a:	085b      	lsrs	r3, r3, #1
  400e0c:	6013      	str	r3, [r2, #0]
  400e0e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400e10:	4b04      	ldr	r3, [pc, #16]	; (400e24 <SystemCoreClockUpdate+0xf4>)
  400e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e14:	4905      	ldr	r1, [pc, #20]	; (400e2c <SystemCoreClockUpdate+0xfc>)
  400e16:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400e1a:	680b      	ldr	r3, [r1, #0]
  400e1c:	40d3      	lsrs	r3, r2
  400e1e:	600b      	str	r3, [r1, #0]
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop
  400e24:	400e0400 	.word	0x400e0400
  400e28:	400e1810 	.word	0x400e1810
  400e2c:	20000004 	.word	0x20000004
  400e30:	00b71b00 	.word	0x00b71b00
  400e34:	003d0900 	.word	0x003d0900
  400e38:	007a1200 	.word	0x007a1200
  400e3c:	aaaaaaab 	.word	0xaaaaaaab

00400e40 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400e40:	4b12      	ldr	r3, [pc, #72]	; (400e8c <system_init_flash+0x4c>)
  400e42:	4298      	cmp	r0, r3
  400e44:	d804      	bhi.n	400e50 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400e46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400e4a:	4b11      	ldr	r3, [pc, #68]	; (400e90 <system_init_flash+0x50>)
  400e4c:	601a      	str	r2, [r3, #0]
  400e4e:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <system_init_flash+0x54>)
  400e52:	4298      	cmp	r0, r3
  400e54:	d803      	bhi.n	400e5e <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400e56:	4a10      	ldr	r2, [pc, #64]	; (400e98 <system_init_flash+0x58>)
  400e58:	4b0d      	ldr	r3, [pc, #52]	; (400e90 <system_init_flash+0x50>)
  400e5a:	601a      	str	r2, [r3, #0]
  400e5c:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400e5e:	4b0f      	ldr	r3, [pc, #60]	; (400e9c <system_init_flash+0x5c>)
  400e60:	4298      	cmp	r0, r3
  400e62:	d803      	bhi.n	400e6c <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400e64:	4a0e      	ldr	r2, [pc, #56]	; (400ea0 <system_init_flash+0x60>)
  400e66:	4b0a      	ldr	r3, [pc, #40]	; (400e90 <system_init_flash+0x50>)
  400e68:	601a      	str	r2, [r3, #0]
  400e6a:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400e6c:	4b0d      	ldr	r3, [pc, #52]	; (400ea4 <system_init_flash+0x64>)
  400e6e:	4298      	cmp	r0, r3
  400e70:	d803      	bhi.n	400e7a <system_init_flash+0x3a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e72:	4a0d      	ldr	r2, [pc, #52]	; (400ea8 <system_init_flash+0x68>)
  400e74:	4b06      	ldr	r3, [pc, #24]	; (400e90 <system_init_flash+0x50>)
  400e76:	601a      	str	r2, [r3, #0]
  400e78:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400e7a:	4b0c      	ldr	r3, [pc, #48]	; (400eac <system_init_flash+0x6c>)
  400e7c:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400e7e:	bf94      	ite	ls
  400e80:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e84:	4a0a      	ldrhi	r2, [pc, #40]	; (400eb0 <system_init_flash+0x70>)
  400e86:	4b02      	ldr	r3, [pc, #8]	; (400e90 <system_init_flash+0x50>)
  400e88:	601a      	str	r2, [r3, #0]
  400e8a:	4770      	bx	lr
  400e8c:	01312cff 	.word	0x01312cff
  400e90:	400e0a00 	.word	0x400e0a00
  400e94:	026259ff 	.word	0x026259ff
  400e98:	04000100 	.word	0x04000100
  400e9c:	039386ff 	.word	0x039386ff
  400ea0:	04000200 	.word	0x04000200
  400ea4:	04c4b3ff 	.word	0x04c4b3ff
  400ea8:	04000300 	.word	0x04000300
  400eac:	05f5e0ff 	.word	0x05f5e0ff
  400eb0:	04000500 	.word	0x04000500

00400eb4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400eb4:	4b09      	ldr	r3, [pc, #36]	; (400edc <_sbrk+0x28>)
  400eb6:	681b      	ldr	r3, [r3, #0]
  400eb8:	b913      	cbnz	r3, 400ec0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400eba:	4a09      	ldr	r2, [pc, #36]	; (400ee0 <_sbrk+0x2c>)
  400ebc:	4b07      	ldr	r3, [pc, #28]	; (400edc <_sbrk+0x28>)
  400ebe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ec0:	4b06      	ldr	r3, [pc, #24]	; (400edc <_sbrk+0x28>)
  400ec2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400ec4:	181a      	adds	r2, r3, r0
  400ec6:	4907      	ldr	r1, [pc, #28]	; (400ee4 <_sbrk+0x30>)
  400ec8:	4291      	cmp	r1, r2
  400eca:	db04      	blt.n	400ed6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400ecc:	4610      	mov	r0, r2
  400ece:	4a03      	ldr	r2, [pc, #12]	; (400edc <_sbrk+0x28>)
  400ed0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400ed2:	4618      	mov	r0, r3
  400ed4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400ed6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400eda:	4770      	bx	lr
  400edc:	200008c4 	.word	0x200008c4
  400ee0:	200077c0 	.word	0x200077c0
  400ee4:	2001fffc 	.word	0x2001fffc

00400ee8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ee8:	f04f 30ff 	mov.w	r0, #4294967295
  400eec:	4770      	bx	lr
  400eee:	bf00      	nop

00400ef0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ef4:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ef6:	2000      	movs	r0, #0
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop

00400efc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400efc:	2001      	movs	r0, #1
  400efe:	4770      	bx	lr

00400f00 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f00:	2000      	movs	r0, #0
  400f02:	4770      	bx	lr

00400f04 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  400f04:	0a03      	lsrs	r3, r0, #8
  400f06:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  400f0a:	b280      	uxth	r0, r0
  400f0c:	4770      	bx	lr
  400f0e:	bf00      	nop

00400f10 <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
  400f10:	0a03      	lsrs	r3, r0, #8
  400f12:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  400f16:	b280      	uxth	r0, r0
  400f18:	4770      	bx	lr
  400f1a:	bf00      	nop

00400f1c <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  400f1c:	0e03      	lsrs	r3, r0, #24
  400f1e:	ea43 6200 	orr.w	r2, r3, r0, lsl #24
  400f22:	0203      	lsls	r3, r0, #8
  400f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  400f28:	4313      	orrs	r3, r2
  400f2a:	0a00      	lsrs	r0, r0, #8
  400f2c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
  400f30:	4318      	orrs	r0, r3
  400f32:	4770      	bx	lr

00400f34 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  400f34:	b508      	push	{r3, lr}
  return lwip_htonl(n);
  400f36:	4b01      	ldr	r3, [pc, #4]	; (400f3c <lwip_ntohl+0x8>)
  400f38:	4798      	blx	r3
}
  400f3a:	bd08      	pop	{r3, pc}
  400f3c:	00400f1d 	.word	0x00400f1d

00400f40 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  400f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f44:	b085      	sub	sp, #20
  400f46:	4680      	mov	r8, r0
  400f48:	4689      	mov	r9, r1
  400f4a:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  400f4c:	2200      	movs	r2, #0
  400f4e:	2124      	movs	r1, #36	; 0x24
  400f50:	2001      	movs	r0, #1
  400f52:	4b22      	ldr	r3, [pc, #136]	; (400fdc <icmp_send_response+0x9c>)
  400f54:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  400f56:	2800      	cmp	r0, #0
  400f58:	d03d      	beq.n	400fd6 <icmp_send_response+0x96>
  400f5a:	4606      	mov	r6, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  400f5c:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  400f60:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  400f62:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  400f66:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
  400f68:	2500      	movs	r5, #0
  400f6a:	7125      	strb	r5, [r4, #4]
  400f6c:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
  400f6e:	71a5      	strb	r5, [r4, #6]
  400f70:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  400f72:	f8d0 c004 	ldr.w	ip, [r0, #4]
  400f76:	f8d8 3004 	ldr.w	r3, [r8, #4]
  400f7a:	f8d3 e000 	ldr.w	lr, [r3]
  400f7e:	6858      	ldr	r0, [r3, #4]
  400f80:	6899      	ldr	r1, [r3, #8]
  400f82:	f8d3 800c 	ldr.w	r8, [r3, #12]
  400f86:	f8cc e008 	str.w	lr, [ip, #8]
  400f8a:	f8cc 000c 	str.w	r0, [ip, #12]
  400f8e:	f8cc 1010 	str.w	r1, [ip, #16]
  400f92:	f8cc 8014 	str.w	r8, [ip, #20]
  400f96:	f8d3 e010 	ldr.w	lr, [r3, #16]
  400f9a:	6958      	ldr	r0, [r3, #20]
  400f9c:	6999      	ldr	r1, [r3, #24]
  400f9e:	f8cc e018 	str.w	lr, [ip, #24]
  400fa2:	f8cc 001c 	str.w	r0, [ip, #28]
  400fa6:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  400faa:	70a5      	strb	r5, [r4, #2]
  400fac:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  400fae:	8971      	ldrh	r1, [r6, #10]
  400fb0:	4620      	mov	r0, r4
  400fb2:	4b0b      	ldr	r3, [pc, #44]	; (400fe0 <icmp_send_response+0xa0>)
  400fb4:	4798      	blx	r3
  400fb6:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  400fb8:	68fb      	ldr	r3, [r7, #12]
  400fba:	aa04      	add	r2, sp, #16
  400fbc:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  400fc0:	2301      	movs	r3, #1
  400fc2:	9301      	str	r3, [sp, #4]
  400fc4:	9500      	str	r5, [sp, #0]
  400fc6:	23ff      	movs	r3, #255	; 0xff
  400fc8:	4629      	mov	r1, r5
  400fca:	4630      	mov	r0, r6
  400fcc:	4c05      	ldr	r4, [pc, #20]	; (400fe4 <icmp_send_response+0xa4>)
  400fce:	47a0      	blx	r4
  pbuf_free(q);
  400fd0:	4630      	mov	r0, r6
  400fd2:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <icmp_send_response+0xa8>)
  400fd4:	4798      	blx	r3
}
  400fd6:	b005      	add	sp, #20
  400fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400fdc:	004023d5 	.word	0x004023d5
  400fe0:	00401271 	.word	0x00401271
  400fe4:	004015bd 	.word	0x004015bd
  400fe8:	00402375 	.word	0x00402375

00400fec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  400fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ff0:	b085      	sub	sp, #20
  400ff2:	4606      	mov	r6, r0
  400ff4:	4688      	mov	r8, r1

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  400ff6:	6847      	ldr	r7, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
  400ff8:	783c      	ldrb	r4, [r7, #0]
  400ffa:	f004 040f 	and.w	r4, r4, #15
  400ffe:	00a4      	lsls	r4, r4, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  401000:	4265      	negs	r5, r4
  401002:	b22d      	sxth	r5, r5
  401004:	4629      	mov	r1, r5
  401006:	4b46      	ldr	r3, [pc, #280]	; (401120 <icmp_input+0x134>)
  401008:	4798      	blx	r3
  40100a:	2800      	cmp	r0, #0
  40100c:	d17e      	bne.n	40110c <icmp_input+0x120>
  40100e:	8933      	ldrh	r3, [r6, #8]
  401010:	2b03      	cmp	r3, #3
  401012:	d97b      	bls.n	40110c <icmp_input+0x120>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  401014:	6873      	ldr	r3, [r6, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  401016:	781b      	ldrb	r3, [r3, #0]
  401018:	2b08      	cmp	r3, #8
  40101a:	d173      	bne.n	401104 <icmp_input+0x118>
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  40101c:	4b41      	ldr	r3, [pc, #260]	; (401124 <icmp_input+0x138>)
  40101e:	f8d3 9000 	ldr.w	r9, [r3]
        accepted = 0;
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  401022:	4641      	mov	r1, r8
  401024:	4648      	mov	r0, r9
  401026:	4b40      	ldr	r3, [pc, #256]	; (401128 <icmp_input+0x13c>)
  401028:	4798      	blx	r3
  40102a:	b920      	cbnz	r0, 401036 <icmp_input+0x4a>
        accepted = 0;
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
  40102c:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
  401030:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
  401034:	d103      	bne.n	40103e <icmp_input+0x52>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
  401036:	4630      	mov	r0, r6
  401038:	4b3c      	ldr	r3, [pc, #240]	; (40112c <icmp_input+0x140>)
  40103a:	4798      	blx	r3
        return;
  40103c:	e06d      	b.n	40111a <icmp_input+0x12e>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  40103e:	8933      	ldrh	r3, [r6, #8]
  401040:	2b07      	cmp	r3, #7
  401042:	d963      	bls.n	40110c <icmp_input+0x120>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  401044:	4630      	mov	r0, r6
  401046:	4b3a      	ldr	r3, [pc, #232]	; (401130 <icmp_input+0x144>)
  401048:	4798      	blx	r3
  40104a:	b118      	cbz	r0, 401054 <icmp_input+0x68>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  40104c:	4630      	mov	r0, r6
  40104e:	4b37      	ldr	r3, [pc, #220]	; (40112c <icmp_input+0x140>)
  401050:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  401052:	e062      	b.n	40111a <icmp_input+0x12e>
  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
  401054:	b224      	sxth	r4, r4
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  401056:	2122      	movs	r1, #34	; 0x22
  401058:	4630      	mov	r0, r6
  40105a:	4b31      	ldr	r3, [pc, #196]	; (401120 <icmp_input+0x134>)
  40105c:	4798      	blx	r3
  40105e:	b1f8      	cbz	r0, 4010a0 <icmp_input+0xb4>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  401060:	4621      	mov	r1, r4
  401062:	4630      	mov	r0, r6
  401064:	4b2e      	ldr	r3, [pc, #184]	; (401120 <icmp_input+0x134>)
  401066:	4798      	blx	r3
  401068:	2800      	cmp	r0, #0
  40106a:	d153      	bne.n	401114 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  40106c:	2200      	movs	r2, #0
  40106e:	8931      	ldrh	r1, [r6, #8]
  401070:	2002      	movs	r0, #2
  401072:	4b30      	ldr	r3, [pc, #192]	; (401134 <icmp_input+0x148>)
  401074:	4798      	blx	r3
      if (r == NULL) {
  401076:	4681      	mov	r9, r0
  401078:	2800      	cmp	r0, #0
  40107a:	d04b      	beq.n	401114 <icmp_input+0x128>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  40107c:	4631      	mov	r1, r6
  40107e:	4b2e      	ldr	r3, [pc, #184]	; (401138 <icmp_input+0x14c>)
  401080:	4798      	blx	r3
  401082:	2800      	cmp	r0, #0
  401084:	d146      	bne.n	401114 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
  401086:	f8d9 7004 	ldr.w	r7, [r9, #4]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  40108a:	4629      	mov	r1, r5
  40108c:	4648      	mov	r0, r9
  40108e:	4b24      	ldr	r3, [pc, #144]	; (401120 <icmp_input+0x134>)
  401090:	4798      	blx	r3
  401092:	2800      	cmp	r0, #0
  401094:	d13e      	bne.n	401114 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  401096:	4630      	mov	r0, r6
  401098:	4b24      	ldr	r3, [pc, #144]	; (40112c <icmp_input+0x140>)
  40109a:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  40109c:	464e      	mov	r6, r9
  40109e:	e006      	b.n	4010ae <icmp_input+0xc2>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4010a0:	f06f 0121 	mvn.w	r1, #33	; 0x21
  4010a4:	4630      	mov	r0, r6
  4010a6:	4b1e      	ldr	r3, [pc, #120]	; (401120 <icmp_input+0x134>)
  4010a8:	4798      	blx	r3
  4010aa:	2800      	cmp	r0, #0
  4010ac:	d132      	bne.n	401114 <icmp_input+0x128>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  4010ae:	6872      	ldr	r2, [r6, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  4010b0:	4b1c      	ldr	r3, [pc, #112]	; (401124 <icmp_input+0x138>)
  4010b2:	681b      	ldr	r3, [r3, #0]
  4010b4:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  4010b6:	4b21      	ldr	r3, [pc, #132]	; (40113c <icmp_input+0x150>)
  4010b8:	681b      	ldr	r3, [r3, #0]
  4010ba:	613b      	str	r3, [r7, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  4010bc:	2300      	movs	r3, #0
  4010be:	7013      	strb	r3, [r2, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  4010c0:	8853      	ldrh	r3, [r2, #2]
  4010c2:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  4010c6:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  4010c8:	bf8c      	ite	hi
  4010ca:	3309      	addhi	r3, #9
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  4010cc:	3308      	addls	r3, #8
  4010ce:	8053      	strh	r3, [r2, #2]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  4010d0:	23ff      	movs	r3, #255	; 0xff
  4010d2:	723b      	strb	r3, [r7, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  4010d4:	2300      	movs	r3, #0
  4010d6:	72bb      	strb	r3, [r7, #10]
  4010d8:	72fb      	strb	r3, [r7, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  4010da:	2114      	movs	r1, #20
  4010dc:	4638      	mov	r0, r7
  4010de:	4b18      	ldr	r3, [pc, #96]	; (401140 <icmp_input+0x154>)
  4010e0:	4798      	blx	r3
  4010e2:	8178      	strh	r0, [r7, #10]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  4010e4:	4621      	mov	r1, r4
  4010e6:	4630      	mov	r0, r6
  4010e8:	4b0d      	ldr	r3, [pc, #52]	; (401120 <icmp_input+0x134>)
  4010ea:	4798      	blx	r3
  4010ec:	b950      	cbnz	r0, 401104 <icmp_input+0x118>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  4010ee:	f8cd 8008 	str.w	r8, [sp, #8]
  4010f2:	2301      	movs	r3, #1
  4010f4:	9301      	str	r3, [sp, #4]
  4010f6:	2200      	movs	r2, #0
  4010f8:	9200      	str	r2, [sp, #0]
  4010fa:	23ff      	movs	r3, #255	; 0xff
  4010fc:	4909      	ldr	r1, [pc, #36]	; (401124 <icmp_input+0x138>)
  4010fe:	4630      	mov	r0, r6
  401100:	4c10      	ldr	r4, [pc, #64]	; (401144 <icmp_input+0x158>)
  401102:	47a0      	blx	r4
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  401104:	4630      	mov	r0, r6
  401106:	4b09      	ldr	r3, [pc, #36]	; (40112c <icmp_input+0x140>)
  401108:	4798      	blx	r3
  return;
  40110a:	e006      	b.n	40111a <icmp_input+0x12e>
lenerr:
  pbuf_free(p);
  40110c:	4630      	mov	r0, r6
  40110e:	4b07      	ldr	r3, [pc, #28]	; (40112c <icmp_input+0x140>)
  401110:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  401112:	e002      	b.n	40111a <icmp_input+0x12e>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
  401114:	4630      	mov	r0, r6
  401116:	4b05      	ldr	r3, [pc, #20]	; (40112c <icmp_input+0x140>)
  401118:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
  40111a:	b005      	add	sp, #20
  40111c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401120:	004022fd 	.word	0x004022fd
  401124:	2000373c 	.word	0x2000373c
  401128:	004015fd 	.word	0x004015fd
  40112c:	00402375 	.word	0x00402375
  401130:	00401281 	.word	0x00401281
  401134:	004023d5 	.word	0x004023d5
  401138:	004025f9 	.word	0x004025f9
  40113c:	20003734 	.word	0x20003734
  401140:	00401271 	.word	0x00401271
  401144:	004014c9 	.word	0x004014c9

00401148 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  401148:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  40114a:	460a      	mov	r2, r1
  40114c:	2103      	movs	r1, #3
  40114e:	4b01      	ldr	r3, [pc, #4]	; (401154 <icmp_dest_unreach+0xc>)
  401150:	4798      	blx	r3
  401152:	bd08      	pop	{r3, pc}
  401154:	00400f41 	.word	0x00400f41

00401158 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  401158:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  40115a:	460a      	mov	r2, r1
  40115c:	210b      	movs	r1, #11
  40115e:	4b01      	ldr	r3, [pc, #4]	; (401164 <icmp_time_exceeded+0xc>)
  401160:	4798      	blx	r3
  401162:	bd08      	pop	{r3, pc}
  401164:	00400f41 	.word	0x00400f41

00401168 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  401168:	b410      	push	{r4}
  40116a:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  40116c:	2300      	movs	r3, #0
  40116e:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  401172:	f010 0401 	ands.w	r4, r0, #1
  401176:	d006      	beq.n	401186 <lwip_standard_chksum+0x1e>
  401178:	4299      	cmp	r1, r3
  40117a:	dd24      	ble.n	4011c6 <lwip_standard_chksum+0x5e>
    ((u8_t *)&t)[1] = *pb++;
  40117c:	7803      	ldrb	r3, [r0, #0]
  40117e:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  401182:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
  401184:	3001      	adds	r0, #1
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  401186:	2901      	cmp	r1, #1
  401188:	dd07      	ble.n	40119a <lwip_standard_chksum+0x32>
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
  40118a:	2300      	movs	r3, #0
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
    sum += *ps++;
  40118c:	f830 2b02 	ldrh.w	r2, [r0], #2
  401190:	4413      	add	r3, r2
    len -= 2;
  401192:	3902      	subs	r1, #2
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  401194:	2901      	cmp	r1, #1
  401196:	dcf9      	bgt.n	40118c <lwip_standard_chksum+0x24>
  401198:	e000      	b.n	40119c <lwip_standard_chksum+0x34>
static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
  40119a:	2300      	movs	r3, #0
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  40119c:	2900      	cmp	r1, #0
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  40119e:	bfc4      	itt	gt
  4011a0:	7802      	ldrbgt	r2, [r0, #0]
  4011a2:	f88d 2006 	strbgt.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  4011a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4011aa:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  4011ac:	b298      	uxth	r0, r3
  4011ae:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
  4011b2:	b29a      	uxth	r2, r3
  4011b4:	eb02 4313 	add.w	r3, r2, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  4011b8:	b154      	cbz	r4, 4011d0 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
  4011ba:	021a      	lsls	r2, r3, #8
  4011bc:	b292      	uxth	r2, r2
  4011be:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4011c2:	4313      	orrs	r3, r2
  4011c4:	e004      	b.n	4011d0 <lwip_standard_chksum+0x68>
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  4011c6:	2901      	cmp	r1, #1
  4011c8:	dcdf      	bgt.n	40118a <lwip_standard_chksum+0x22>
  sum += t;

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  sum = FOLD_U32T(sum);
  4011ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4011ce:	e7f4      	b.n	4011ba <lwip_standard_chksum+0x52>
  /* Swap if alignment was odd */
  if (odd) {
    sum = SWAP_BYTES_IN_WORD(sum);
  }

  return (u16_t)sum;
  4011d0:	b298      	uxth	r0, r3
}
  4011d2:	b003      	add	sp, #12
  4011d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop

004011dc <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  4011dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4011e0:	468a      	mov	sl, r1
  4011e2:	4691      	mov	r9, r2
  4011e4:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  4011e6:	b300      	cbz	r0, 40122a <inet_chksum_pseudo+0x4e>
  4011e8:	4605      	mov	r5, r0
  4011ea:	2600      	movs	r6, #0
  4011ec:	4634      	mov	r4, r6
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  4011ee:	4f1e      	ldr	r7, [pc, #120]	; (401268 <inet_chksum_pseudo+0x8c>)
  4011f0:	8969      	ldrh	r1, [r5, #10]
  4011f2:	6868      	ldr	r0, [r5, #4]
  4011f4:	47b8      	blx	r7
  4011f6:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  4011f8:	b284      	uxth	r4, r0
  4011fa:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  4011fe:	896b      	ldrh	r3, [r5, #10]
  401200:	f013 0f01 	tst.w	r3, #1
  401204:	d007      	beq.n	401216 <inet_chksum_pseudo+0x3a>
      swapped = 1 - swapped;
  401206:	f1c6 0601 	rsb	r6, r6, #1
  40120a:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  40120c:	0223      	lsls	r3, r4, #8
  40120e:	b29b      	uxth	r3, r3
  401210:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401214:	431c      	orrs	r4, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  401216:	682d      	ldr	r5, [r5, #0]
  401218:	2d00      	cmp	r5, #0
  40121a:	d1e9      	bne.n	4011f0 <inet_chksum_pseudo+0x14>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  40121c:	b136      	cbz	r6, 40122c <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
  40121e:	0223      	lsls	r3, r4, #8
  401220:	b29b      	uxth	r3, r3
  401222:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401226:	431c      	orrs	r4, r3
  401228:	e000      	b.n	40122c <inet_chksum_pseudo+0x50>
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  40122a:	2400      	movs	r4, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  addr = ip4_addr_get_u32(src);
  40122c:	f8da 3000 	ldr.w	r3, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  401230:	f8d9 0000 	ldr.w	r0, [r9]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  401234:	0c1a      	lsrs	r2, r3, #16
  401236:	fa12 f383 	uxtah	r3, r2, r3
  40123a:	fa13 f380 	uxtah	r3, r3, r0
  40123e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  401242:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
  401244:	4640      	mov	r0, r8
  401246:	4d09      	ldr	r5, [pc, #36]	; (40126c <inet_chksum_pseudo+0x90>)
  401248:	47a8      	blx	r5
  40124a:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
  40124c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
  401250:	47a8      	blx	r5
  401252:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  401254:	b283      	uxth	r3, r0
  401256:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  acc = FOLD_U32T(acc);
  40125a:	b283      	uxth	r3, r0
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  40125c:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  401260:	43c0      	mvns	r0, r0
}
  401262:	b280      	uxth	r0, r0
  401264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401268:	00401169 	.word	0x00401169
  40126c:	00400f05 	.word	0x00400f05

00401270 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  401270:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
  401272:	4b02      	ldr	r3, [pc, #8]	; (40127c <inet_chksum+0xc>)
  401274:	4798      	blx	r3
  401276:	43c0      	mvns	r0, r0
}
  401278:	b280      	uxth	r0, r0
  40127a:	bd08      	pop	{r3, pc}
  40127c:	00401169 	.word	0x00401169

00401280 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  401280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  401282:	b300      	cbz	r0, 4012c6 <inet_chksum_pbuf+0x46>
  401284:	4605      	mov	r5, r0
  401286:	2600      	movs	r6, #0
  401288:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  40128a:	4f11      	ldr	r7, [pc, #68]	; (4012d0 <inet_chksum_pbuf+0x50>)
  40128c:	8969      	ldrh	r1, [r5, #10]
  40128e:	6868      	ldr	r0, [r5, #4]
  401290:	47b8      	blx	r7
  401292:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  401294:	b284      	uxth	r4, r0
  401296:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  40129a:	896b      	ldrh	r3, [r5, #10]
  40129c:	f013 0f01 	tst.w	r3, #1
  4012a0:	d007      	beq.n	4012b2 <inet_chksum_pbuf+0x32>
      swapped = 1 - swapped;
  4012a2:	f1c6 0601 	rsb	r6, r6, #1
  4012a6:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  4012a8:	0223      	lsls	r3, r4, #8
  4012aa:	b29b      	uxth	r3, r3
  4012ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4012b0:	431c      	orrs	r4, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  4012b2:	682d      	ldr	r5, [r5, #0]
  4012b4:	2d00      	cmp	r5, #0
  4012b6:	d1e9      	bne.n	40128c <inet_chksum_pbuf+0xc>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
  4012b8:	b136      	cbz	r6, 4012c8 <inet_chksum_pbuf+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
  4012ba:	0223      	lsls	r3, r4, #8
  4012bc:	b29b      	uxth	r3, r3
  4012be:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4012c2:	431c      	orrs	r4, r3
  4012c4:	e000      	b.n	4012c8 <inet_chksum_pbuf+0x48>
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  4012c6:	2400      	movs	r4, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  return (u16_t)~(acc & 0xffffUL);
  4012c8:	43e0      	mvns	r0, r4
}
  4012ca:	b280      	uxth	r0, r0
  4012cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012ce:	bf00      	nop
  4012d0:	00401169 	.word	0x00401169

004012d4 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  4012d4:	4b0e      	ldr	r3, [pc, #56]	; (401310 <ip_route+0x3c>)
  4012d6:	681b      	ldr	r3, [r3, #0]
  4012d8:	b16b      	cbz	r3, 4012f6 <ip_route+0x22>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  4012da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  4012de:	f012 0f01 	tst.w	r2, #1
  4012e2:	d005      	beq.n	4012f0 <ip_route+0x1c>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  4012e4:	6801      	ldr	r1, [r0, #0]
  4012e6:	685a      	ldr	r2, [r3, #4]
  4012e8:	404a      	eors	r2, r1
  4012ea:	6899      	ldr	r1, [r3, #8]
  4012ec:	420a      	tst	r2, r1
  4012ee:	d00d      	beq.n	40130c <ip_route+0x38>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  4012f0:	681b      	ldr	r3, [r3, #0]
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d1f1      	bne.n	4012da <ip_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  4012f6:	4b07      	ldr	r3, [pc, #28]	; (401314 <ip_route+0x40>)
  4012f8:	6818      	ldr	r0, [r3, #0]
  4012fa:	b140      	cbz	r0, 40130e <ip_route+0x3a>
  4012fc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  401300:	f003 0301 	and.w	r3, r3, #1
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  401304:	2b00      	cmp	r3, #0
  401306:	bf08      	it	eq
  401308:	2000      	moveq	r0, #0
  40130a:	4770      	bx	lr
  40130c:	4618      	mov	r0, r3
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  40130e:	4770      	bx	lr
  401310:	20004758 	.word	0x20004758
  401314:	2000475c 	.word	0x2000475c

00401318 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  401318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40131c:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  40131e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  401322:	f898 3000 	ldrb.w	r3, [r8]
  401326:	091a      	lsrs	r2, r3, #4
  401328:	2a04      	cmp	r2, #4
  40132a:	d002      	beq.n	401332 <ip_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  40132c:	4b57      	ldr	r3, [pc, #348]	; (40148c <ip_input+0x174>)
  40132e:	4798      	blx	r3
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  401330:	e0a9      	b.n	401486 <ip_input+0x16e>
  401332:	460f      	mov	r7, r1
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  401334:	f003 030f 	and.w	r3, r3, #15
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  401338:	009c      	lsls	r4, r3, #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  40133a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  40133e:	4b54      	ldr	r3, [pc, #336]	; (401490 <ip_input+0x178>)
  401340:	4798      	blx	r3
  401342:	4606      	mov	r6, r0

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  401344:	896b      	ldrh	r3, [r5, #10]
  401346:	42a3      	cmp	r3, r4
  401348:	d302      	bcc.n	401350 <ip_input+0x38>
  40134a:	892b      	ldrh	r3, [r5, #8]
  40134c:	4283      	cmp	r3, r0
  40134e:	d203      	bcs.n	401358 <ip_input+0x40>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  401350:	4628      	mov	r0, r5
  401352:	4b4e      	ldr	r3, [pc, #312]	; (40148c <ip_input+0x174>)
  401354:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  401356:	e096      	b.n	401486 <ip_input+0x16e>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  401358:	4621      	mov	r1, r4
  40135a:	4640      	mov	r0, r8
  40135c:	4b4d      	ldr	r3, [pc, #308]	; (401494 <ip_input+0x17c>)
  40135e:	4798      	blx	r3
  401360:	b118      	cbz	r0, 40136a <ip_input+0x52>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  401362:	4628      	mov	r0, r5
  401364:	4b49      	ldr	r3, [pc, #292]	; (40148c <ip_input+0x174>)
  401366:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  401368:	e08d      	b.n	401486 <ip_input+0x16e>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  40136a:	4631      	mov	r1, r6
  40136c:	4628      	mov	r0, r5
  40136e:	4b4a      	ldr	r3, [pc, #296]	; (401498 <ip_input+0x180>)
  401370:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  401372:	f8d8 2010 	ldr.w	r2, [r8, #16]
  401376:	4b49      	ldr	r3, [pc, #292]	; (40149c <ip_input+0x184>)
  401378:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  40137a:	f8d8 200c 	ldr.w	r2, [r8, #12]
  40137e:	4b48      	ldr	r3, [pc, #288]	; (4014a0 <ip_input+0x188>)
  401380:	601a      	str	r2, [r3, #0]
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    netif = inp;
  401382:	463c      	mov	r4, r7
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  401384:	2601      	movs	r6, #1
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401386:	f8df a114 	ldr.w	sl, [pc, #276]	; 40149c <ip_input+0x184>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40138a:	f8df b118 	ldr.w	fp, [pc, #280]	; 4014a4 <ip_input+0x18c>
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
  40138e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4014c4 <ip_input+0x1ac>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  401392:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  401396:	f013 0f01 	tst.w	r3, #1
  40139a:	d00b      	beq.n	4013b4 <ip_input+0x9c>
  40139c:	f114 0f04 	cmn.w	r4, #4
  4013a0:	d008      	beq.n	4013b4 <ip_input+0x9c>
  4013a2:	6863      	ldr	r3, [r4, #4]
  4013a4:	b133      	cbz	r3, 4013b4 <ip_input+0x9c>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  4013a6:	f8da 0000 	ldr.w	r0, [sl]
  4013aa:	4283      	cmp	r3, r0
  4013ac:	d00d      	beq.n	4013ca <ip_input+0xb2>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  4013ae:	4621      	mov	r1, r4
  4013b0:	47d8      	blx	fp
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  4013b2:	b950      	cbnz	r0, 4013ca <ip_input+0xb2>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  4013b4:	b116      	cbz	r6, 4013bc <ip_input+0xa4>
        first = 0;
        netif = netif_list;
  4013b6:	f8d9 4000 	ldr.w	r4, [r9]
  4013ba:	e000      	b.n	4013be <ip_input+0xa6>
      } else {
        netif = netif->next;
  4013bc:	6824      	ldr	r4, [r4, #0]
      }
      if (netif == inp) {
  4013be:	42bc      	cmp	r4, r7
        netif = netif->next;
  4013c0:	bf08      	it	eq
  4013c2:	683c      	ldreq	r4, [r7, #0]
  4013c4:	2600      	movs	r6, #0
      }
    } while(netif != NULL);
  4013c6:	2c00      	cmp	r4, #0
  4013c8:	d1e3      	bne.n	401392 <ip_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  4013ca:	4639      	mov	r1, r7
  4013cc:	4b34      	ldr	r3, [pc, #208]	; (4014a0 <ip_input+0x188>)
  4013ce:	6818      	ldr	r0, [r3, #0]
  4013d0:	4b34      	ldr	r3, [pc, #208]	; (4014a4 <ip_input+0x18c>)
  4013d2:	4798      	blx	r3
  4013d4:	b928      	cbnz	r0, 4013e2 <ip_input+0xca>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  4013d6:	4b32      	ldr	r3, [pc, #200]	; (4014a0 <ip_input+0x188>)
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  4013d8:	681b      	ldr	r3, [r3, #0]
  4013da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4013de:	2be0      	cmp	r3, #224	; 0xe0
  4013e0:	d103      	bne.n	4013ea <ip_input+0xd2>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  4013e2:	4628      	mov	r0, r5
  4013e4:	4b29      	ldr	r3, [pc, #164]	; (40148c <ip_input+0x174>)
  4013e6:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  4013e8:	e04d      	b.n	401486 <ip_input+0x16e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  4013ea:	b91c      	cbnz	r4, 4013f4 <ip_input+0xdc>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  4013ec:	4628      	mov	r0, r5
  4013ee:	4b27      	ldr	r3, [pc, #156]	; (40148c <ip_input+0x174>)
  4013f0:	4798      	blx	r3
    return ERR_OK;
  4013f2:	e048      	b.n	401486 <ip_input+0x16e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  4013f4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  4013f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  4013fc:	b29b      	uxth	r3, r3
  4013fe:	b13b      	cbz	r3, 401410 <ip_input+0xf8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  401400:	4628      	mov	r0, r5
  401402:	4b29      	ldr	r3, [pc, #164]	; (4014a8 <ip_input+0x190>)
  401404:	4798      	blx	r3
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  401406:	4605      	mov	r5, r0
  401408:	2800      	cmp	r0, #0
  40140a:	d03c      	beq.n	401486 <ip_input+0x16e>
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
  40140c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  401410:	4b26      	ldr	r3, [pc, #152]	; (4014ac <ip_input+0x194>)
  401412:	601f      	str	r7, [r3, #0]
  current_header = iphdr;
  401414:	4b26      	ldr	r3, [pc, #152]	; (4014b0 <ip_input+0x198>)
  401416:	f8c3 8000 	str.w	r8, [r3]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
  40141a:	f898 3009 	ldrb.w	r3, [r8, #9]
  40141e:	2b06      	cmp	r3, #6
  401420:	d009      	beq.n	401436 <ip_input+0x11e>
  401422:	2b11      	cmp	r3, #17
  401424:	d002      	beq.n	40142c <ip_input+0x114>
  401426:	2b01      	cmp	r3, #1
  401428:	d10f      	bne.n	40144a <ip_input+0x132>
  40142a:	e009      	b.n	401440 <ip_input+0x128>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  40142c:	4639      	mov	r1, r7
  40142e:	4628      	mov	r0, r5
  401430:	4b20      	ldr	r3, [pc, #128]	; (4014b4 <ip_input+0x19c>)
  401432:	4798      	blx	r3
      break;
  401434:	e01e      	b.n	401474 <ip_input+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  401436:	4639      	mov	r1, r7
  401438:	4628      	mov	r0, r5
  40143a:	4b1f      	ldr	r3, [pc, #124]	; (4014b8 <ip_input+0x1a0>)
  40143c:	4798      	blx	r3
      break;
  40143e:	e019      	b.n	401474 <ip_input+0x15c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  401440:	4639      	mov	r1, r7
  401442:	4628      	mov	r0, r5
  401444:	4b1d      	ldr	r3, [pc, #116]	; (4014bc <ip_input+0x1a4>)
  401446:	4798      	blx	r3
      break;
  401448:	e014      	b.n	401474 <ip_input+0x15c>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  40144a:	4639      	mov	r1, r7
  40144c:	4b13      	ldr	r3, [pc, #76]	; (40149c <ip_input+0x184>)
  40144e:	6818      	ldr	r0, [r3, #0]
  401450:	4b14      	ldr	r3, [pc, #80]	; (4014a4 <ip_input+0x18c>)
  401452:	4798      	blx	r3
  401454:	b958      	cbnz	r0, 40146e <ip_input+0x156>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  401456:	4b11      	ldr	r3, [pc, #68]	; (40149c <ip_input+0x184>)
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  401458:	681b      	ldr	r3, [r3, #0]
  40145a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40145e:	2be0      	cmp	r3, #224	; 0xe0
  401460:	d005      	beq.n	40146e <ip_input+0x156>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
  401462:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  401466:	2102      	movs	r1, #2
  401468:	4628      	mov	r0, r5
  40146a:	4b15      	ldr	r3, [pc, #84]	; (4014c0 <ip_input+0x1a8>)
  40146c:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  40146e:	4628      	mov	r0, r5
  401470:	4b06      	ldr	r3, [pc, #24]	; (40148c <ip_input+0x174>)
  401472:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
  401474:	2300      	movs	r3, #0
  401476:	4a0d      	ldr	r2, [pc, #52]	; (4014ac <ip_input+0x194>)
  401478:	6013      	str	r3, [r2, #0]
  current_header = NULL;
  40147a:	4a0d      	ldr	r2, [pc, #52]	; (4014b0 <ip_input+0x198>)
  40147c:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
  40147e:	4a08      	ldr	r2, [pc, #32]	; (4014a0 <ip_input+0x188>)
  401480:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
  401482:	4a06      	ldr	r2, [pc, #24]	; (40149c <ip_input+0x184>)
  401484:	6013      	str	r3, [r2, #0]

  return ERR_OK;
}
  401486:	2000      	movs	r0, #0
  401488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40148c:	00402375 	.word	0x00402375
  401490:	00400f11 	.word	0x00400f11
  401494:	00401271 	.word	0x00401271
  401498:	00402529 	.word	0x00402529
  40149c:	2000373c 	.word	0x2000373c
  4014a0:	20003734 	.word	0x20003734
  4014a4:	004015fd 	.word	0x004015fd
  4014a8:	0040186d 	.word	0x0040186d
  4014ac:	20003738 	.word	0x20003738
  4014b0:	20003740 	.word	0x20003740
  4014b4:	00404e69 	.word	0x00404e69
  4014b8:	00403bd9 	.word	0x00403bd9
  4014bc:	00400fed 	.word	0x00400fed
  4014c0:	00401149 	.word	0x00401149
  4014c4:	20004758 	.word	0x20004758

004014c8 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  4014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014cc:	b087      	sub	sp, #28
  4014ce:	4605      	mov	r5, r0
  4014d0:	9102      	str	r1, [sp, #8]
  4014d2:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
  4014d6:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
  4014da:	9e12      	ldr	r6, [sp, #72]	; 0x48
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  4014dc:	9201      	str	r2, [sp, #4]
  4014de:	2a00      	cmp	r2, #0
  4014e0:	d048      	beq.n	401574 <ip_output_if+0xac>
  4014e2:	4698      	mov	r8, r3
  4014e4:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  4014e6:	2114      	movs	r1, #20
  4014e8:	4b30      	ldr	r3, [pc, #192]	; (4015ac <ip_output_if+0xe4>)
  4014ea:	4798      	blx	r3
  4014ec:	2800      	cmp	r0, #0
  4014ee:	d158      	bne.n	4015a2 <ip_output_if+0xda>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  4014f0:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  4014f2:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  4014f6:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  4014fa:	ea48 2a0b 	orr.w	sl, r8, fp, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  4014fe:	683b      	ldr	r3, [r7, #0]
  401500:	6123      	str	r3, [r4, #16]
  401502:	0c1a      	lsrs	r2, r3, #16
  401504:	fa12 f283 	uxtah	r2, r2, r3
  401508:	9203      	str	r2, [sp, #12]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  40150a:	2345      	movs	r3, #69	; 0x45
  40150c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  40150e:	f884 9001 	strb.w	r9, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  401512:	ea4f 2909 	mov.w	r9, r9, lsl #8
  401516:	ea49 0b03 	orr.w	fp, r9, r3
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  40151a:	8928      	ldrh	r0, [r5, #8]
  40151c:	4f24      	ldr	r7, [pc, #144]	; (4015b0 <ip_output_if+0xe8>)
  40151e:	47b8      	blx	r7
  401520:	4680      	mov	r8, r0
  401522:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  401524:	2300      	movs	r3, #0
  401526:	71a3      	strb	r3, [r4, #6]
  401528:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  40152a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4015b8 <ip_output_if+0xf0>
  40152e:	f8b9 0000 	ldrh.w	r0, [r9]
  401532:	47b8      	blx	r7
  401534:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  401536:	f8b9 3000 	ldrh.w	r3, [r9]
  40153a:	3301      	adds	r3, #1
  40153c:	f8a9 3000 	strh.w	r3, [r9]

    if (ip_addr_isany(src)) {
  401540:	9b02      	ldr	r3, [sp, #8]
  401542:	b10b      	cbz	r3, 401548 <ip_output_if+0x80>
  401544:	681b      	ldr	r3, [r3, #0]
  401546:	b913      	cbnz	r3, 40154e <ip_output_if+0x86>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  401548:	6873      	ldr	r3, [r6, #4]
  40154a:	60e3      	str	r3, [r4, #12]
  40154c:	e000      	b.n	401550 <ip_output_if+0x88>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  40154e:	60e3      	str	r3, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  401550:	68e2      	ldr	r2, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  401552:	9b03      	ldr	r3, [sp, #12]
  401554:	fa13 f382 	uxtah	r3, r3, r2
  401558:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40155c:	445b      	add	r3, fp
  40155e:	4453      	add	r3, sl
  401560:	4498      	add	r8, r3
  401562:	4440      	add	r0, r8
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  401564:	b283      	uxth	r3, r0
  401566:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  40156a:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
  40156e:	43c0      	mvns	r0, r0
  401570:	8160      	strh	r0, [r4, #10]
  401572:	e005      	b.n	401580 <ip_output_if+0xb8>
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip_addr_copy(dest_addr, iphdr->dest);
  401574:	6843      	ldr	r3, [r0, #4]
  401576:	691b      	ldr	r3, [r3, #16]
  401578:	aa06      	add	r2, sp, #24
  40157a:	f842 3d04 	str.w	r3, [r2, #-4]!
  40157e:	9201      	str	r2, [sp, #4]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  401580:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  401582:	b143      	cbz	r3, 401596 <ip_output_if+0xce>
  401584:	892a      	ldrh	r2, [r5, #8]
  401586:	429a      	cmp	r2, r3
  401588:	d905      	bls.n	401596 <ip_output_if+0xce>
    return ip_frag(p, netif, dest);
  40158a:	9a01      	ldr	r2, [sp, #4]
  40158c:	4631      	mov	r1, r6
  40158e:	4628      	mov	r0, r5
  401590:	4b08      	ldr	r3, [pc, #32]	; (4015b4 <ip_output_if+0xec>)
  401592:	4798      	blx	r3
  401594:	e007      	b.n	4015a6 <ip_output_if+0xde>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  401596:	6973      	ldr	r3, [r6, #20]
  401598:	9a01      	ldr	r2, [sp, #4]
  40159a:	4629      	mov	r1, r5
  40159c:	4630      	mov	r0, r6
  40159e:	4798      	blx	r3
  4015a0:	e001      	b.n	4015a6 <ip_output_if+0xde>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  4015a2:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
}
  4015a6:	b007      	add	sp, #28
  4015a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ac:	004022fd 	.word	0x004022fd
  4015b0:	00400f05 	.word	0x00400f05
  4015b4:	00401bd5 	.word	0x00401bd5
  4015b8:	200008c8 	.word	0x200008c8

004015bc <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  4015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015be:	b085      	sub	sp, #20
  4015c0:	4605      	mov	r5, r0
  4015c2:	460e      	mov	r6, r1
  4015c4:	4614      	mov	r4, r2
  4015c6:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  4015c8:	4610      	mov	r0, r2
  4015ca:	4b0a      	ldr	r3, [pc, #40]	; (4015f4 <ip_output+0x38>)
  4015cc:	4798      	blx	r3
  4015ce:	b168      	cbz	r0, 4015ec <ip_output+0x30>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  4015d0:	9002      	str	r0, [sp, #8]
  4015d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  4015d6:	9301      	str	r3, [sp, #4]
  4015d8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4015dc:	9300      	str	r3, [sp, #0]
  4015de:	463b      	mov	r3, r7
  4015e0:	4622      	mov	r2, r4
  4015e2:	4631      	mov	r1, r6
  4015e4:	4628      	mov	r0, r5
  4015e6:	4c04      	ldr	r4, [pc, #16]	; (4015f8 <ip_output+0x3c>)
  4015e8:	47a0      	blx	r4
  4015ea:	e001      	b.n	4015f0 <ip_output+0x34>

  if ((netif = ip_route(dest)) == NULL) {
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  4015ec:	f06f 0003 	mvn.w	r0, #3
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
  4015f0:	b005      	add	sp, #20
  4015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4015f4:	004012d5 	.word	0x004012d5
  4015f8:	004014c9 	.word	0x004014c9

004015fc <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
  4015fc:	4602      	mov	r2, r0
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  4015fe:	1e43      	subs	r3, r0, #1
  401600:	f113 0f03 	cmn.w	r3, #3
  401604:	d814      	bhi.n	401630 <ip4_addr_isbroadcast+0x34>
  401606:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
  40160a:	f003 0302 	and.w	r3, r3, #2
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  40160e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  401612:	b193      	cbz	r3, 40163a <ip4_addr_isbroadcast+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  401614:	684b      	ldr	r3, [r1, #4]
  401616:	429a      	cmp	r2, r3
  401618:	d00c      	beq.n	401634 <ip4_addr_isbroadcast+0x38>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  40161a:	6889      	ldr	r1, [r1, #8]
  40161c:	4053      	eors	r3, r2
  40161e:	420b      	tst	r3, r1
  401620:	d10a      	bne.n	401638 <ip4_addr_isbroadcast+0x3c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  401622:	43c9      	mvns	r1, r1
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
  401624:	ea31 0302 	bics.w	r3, r1, r2
  401628:	bf0c      	ite	eq
  40162a:	2001      	moveq	r0, #1
  40162c:	2000      	movne	r0, #0
  40162e:	4770      	bx	lr
  401630:	2001      	movs	r0, #1
  401632:	4770      	bx	lr
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  401634:	2000      	movs	r0, #0
  401636:	4770      	bx	lr
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  401638:	2000      	movs	r0, #0
  }
}
  40163a:	4770      	bx	lr

0040163c <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  40163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401640:	b085      	sub	sp, #20
  401642:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  401644:	6803      	ldr	r3, [r0, #0]
  401646:	f10d 0e10 	add.w	lr, sp, #16
  40164a:	f84e 3d04 	str.w	r3, [lr, #-4]!
  40164e:	f10d 0b10 	add.w	fp, sp, #16

  rp = buf;
  401652:	468c      	mov	ip, r1
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  401654:	2600      	movs	r6, #0
  401656:	46b0      	mov	r8, r6
  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  401658:	4f27      	ldr	r7, [pc, #156]	; (4016f8 <ipaddr_ntoa_r+0xbc>)
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  40165a:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
  40165e:	4675      	mov	r5, lr
  401660:	f89e 3000 	ldrb.w	r3, [lr]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  401664:	4641      	mov	r1, r8
  401666:	e000      	b.n	40166a <ipaddr_ntoa_r+0x2e>
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
  401668:	4621      	mov	r1, r4
  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  40166a:	fba7 4003 	umull	r4, r0, r7, r3
  40166e:	08c0      	lsrs	r0, r0, #3
  401670:	eb00 0480 	add.w	r4, r0, r0, lsl #2
  401674:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
  401678:	1c4c      	adds	r4, r1, #1
  40167a:	b2e4      	uxtb	r4, r4
  40167c:	3330      	adds	r3, #48	; 0x30
  40167e:	f10d 0910 	add.w	r9, sp, #16
  401682:	4489      	add	r9, r1
  401684:	f809 3c08 	strb.w	r3, [r9, #-8]
    } while(*ap);
  401688:	f000 03ff 	and.w	r3, r0, #255	; 0xff
  40168c:	2800      	cmp	r0, #0
  40168e:	d1eb      	bne.n	401668 <ipaddr_ntoa_r+0x2c>
  401690:	f885 8000 	strb.w	r8, [r5]
  401694:	f10e 0e01 	add.w	lr, lr, #1
    while(i--) {
  401698:	b1bc      	cbz	r4, 4016ca <ipaddr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  40169a:	42b2      	cmp	r2, r6
  40169c:	dd24      	ble.n	4016e8 <ipaddr_ntoa_r+0xac>
  40169e:	4663      	mov	r3, ip
  4016a0:	1c74      	adds	r4, r6, #1
  4016a2:	ebcc 0404 	rsb	r4, ip, r4
  4016a6:	ebcc 0606 	rsb	r6, ip, r6
  4016aa:	e004      	b.n	4016b6 <ipaddr_ntoa_r+0x7a>
  4016ac:	3901      	subs	r1, #1
  4016ae:	b2c9      	uxtb	r1, r1
  4016b0:	1998      	adds	r0, r3, r6
  4016b2:	4282      	cmp	r2, r0
  4016b4:	dd1a      	ble.n	4016ec <ipaddr_ntoa_r+0xb0>
  4016b6:	191d      	adds	r5, r3, r4
        return NULL;
      }
      *rp++ = inv[i];
  4016b8:	a804      	add	r0, sp, #16
  4016ba:	4408      	add	r0, r1
  4016bc:	f810 0c08 	ldrb.w	r0, [r0, #-8]
  4016c0:	f803 0b01 	strb.w	r0, [r3], #1
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
  4016c4:	2900      	cmp	r1, #0
  4016c6:	d1f1      	bne.n	4016ac <ipaddr_ntoa_r+0x70>
  4016c8:	e001      	b.n	4016ce <ipaddr_ntoa_r+0x92>
  4016ca:	4635      	mov	r5, r6
  4016cc:	4663      	mov	r3, ip
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
  4016ce:	1c6e      	adds	r6, r5, #1
  4016d0:	42aa      	cmp	r2, r5
  4016d2:	dd0d      	ble.n	4016f0 <ipaddr_ntoa_r+0xb4>
      return NULL;
    }
    *rp++ = '.';
  4016d4:	f103 0c01 	add.w	ip, r3, #1
  4016d8:	f883 a000 	strb.w	sl, [r3]

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
  4016dc:	45de      	cmp	lr, fp
  4016de:	d1be      	bne.n	40165e <ipaddr_ntoa_r+0x22>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  4016e0:	2200      	movs	r2, #0
  4016e2:	701a      	strb	r2, [r3, #0]
  return buf;
  4016e4:	9801      	ldr	r0, [sp, #4]
  4016e6:	e004      	b.n	4016f2 <ipaddr_ntoa_r+0xb6>
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
      if (len++ >= buflen) {
        return NULL;
  4016e8:	2000      	movs	r0, #0
  4016ea:	e002      	b.n	4016f2 <ipaddr_ntoa_r+0xb6>
  4016ec:	2000      	movs	r0, #0
  4016ee:	e000      	b.n	4016f2 <ipaddr_ntoa_r+0xb6>
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
  4016f0:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
  4016f2:	b005      	add	sp, #20
  4016f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016f8:	cccccccd 	.word	0xcccccccd

004016fc <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
  4016fc:	b508      	push	{r3, lr}
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
  4016fe:	2210      	movs	r2, #16
  401700:	4901      	ldr	r1, [pc, #4]	; (401708 <ipaddr_ntoa+0xc>)
  401702:	4b02      	ldr	r3, [pc, #8]	; (40170c <ipaddr_ntoa+0x10>)
  401704:	4798      	blx	r3
}
  401706:	bd08      	pop	{r3, pc}
  401708:	200008cc 	.word	0x200008cc
  40170c:	0040163d 	.word	0x0040163d

00401710 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  401710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401714:	4681      	mov	r9, r0
  401716:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  401718:	6845      	ldr	r5, [r0, #4]
  40171a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  40171c:	889a      	ldrh	r2, [r3, #4]
  40171e:	b9d2      	cbnz	r2, 401756 <ip_reass_free_complete_datagram+0x46>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
  401720:	681b      	ldr	r3, [r3, #0]
  401722:	6043      	str	r3, [r0, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  401724:	686a      	ldr	r2, [r5, #4]
  401726:	4603      	mov	r3, r0
  401728:	f853 1f08 	ldr.w	r1, [r3, #8]!
  40172c:	685e      	ldr	r6, [r3, #4]
  40172e:	689c      	ldr	r4, [r3, #8]
  401730:	68d8      	ldr	r0, [r3, #12]
  401732:	6011      	str	r1, [r2, #0]
  401734:	6056      	str	r6, [r2, #4]
  401736:	6094      	str	r4, [r2, #8]
  401738:	60d0      	str	r0, [r2, #12]
  40173a:	6919      	ldr	r1, [r3, #16]
  40173c:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  40173e:	2101      	movs	r1, #1
  401740:	4628      	mov	r0, r5
  401742:	4b1a      	ldr	r3, [pc, #104]	; (4017ac <ip_reass_free_complete_datagram+0x9c>)
  401744:	4798      	blx	r3
    clen = pbuf_clen(p);
  401746:	4628      	mov	r0, r5
  401748:	4b19      	ldr	r3, [pc, #100]	; (4017b0 <ip_reass_free_complete_datagram+0xa0>)
  40174a:	4798      	blx	r3
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  40174c:	b284      	uxth	r4, r0
    pbuf_free(p);
  40174e:	4628      	mov	r0, r5
  401750:	4b18      	ldr	r3, [pc, #96]	; (4017b4 <ip_reass_free_complete_datagram+0xa4>)
  401752:	4798      	blx	r3
  401754:	e000      	b.n	401758 <ip_reass_free_complete_datagram+0x48>
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  u16_t pbufs_freed = 0;
  401756:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  401758:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  40175c:	b16e      	cbz	r6, 40177a <ip_reass_free_complete_datagram+0x6a>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  40175e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4017b0 <ip_reass_free_complete_datagram+0xa0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  401762:	4f14      	ldr	r7, [pc, #80]	; (4017b4 <ip_reass_free_complete_datagram+0xa4>)
  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  401764:	6873      	ldr	r3, [r6, #4]
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  401766:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  401768:	4630      	mov	r0, r6
  40176a:	47c0      	blx	r8
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  40176c:	4420      	add	r0, r4
  40176e:	b284      	uxth	r4, r0
    pbuf_free(pcur);
  401770:	4630      	mov	r0, r6
  401772:	47b8      	blx	r7
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  401774:	462e      	mov	r6, r5
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
  401776:	2d00      	cmp	r5, #0
  401778:	d1f4      	bne.n	401764 <ip_reass_free_complete_datagram+0x54>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  40177a:	4b0f      	ldr	r3, [pc, #60]	; (4017b8 <ip_reass_free_complete_datagram+0xa8>)
  40177c:	681b      	ldr	r3, [r3, #0]
  40177e:	4599      	cmp	r9, r3
  401780:	d104      	bne.n	40178c <ip_reass_free_complete_datagram+0x7c>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  401782:	f8d9 2000 	ldr.w	r2, [r9]
  401786:	4b0c      	ldr	r3, [pc, #48]	; (4017b8 <ip_reass_free_complete_datagram+0xa8>)
  401788:	601a      	str	r2, [r3, #0]
  40178a:	e003      	b.n	401794 <ip_reass_free_complete_datagram+0x84>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  40178c:	f8d9 3000 	ldr.w	r3, [r9]
  401790:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  401794:	4649      	mov	r1, r9
  401796:	2004      	movs	r0, #4
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <ip_reass_free_complete_datagram+0xac>)
  40179a:	4798      	blx	r3
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
  40179c:	4a08      	ldr	r2, [pc, #32]	; (4017c0 <ip_reass_free_complete_datagram+0xb0>)
  40179e:	8813      	ldrh	r3, [r2, #0]
  4017a0:	1b1b      	subs	r3, r3, r4
  4017a2:	8013      	strh	r3, [r2, #0]

  return pbufs_freed;
}
  4017a4:	4620      	mov	r0, r4
  4017a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017aa:	bf00      	nop
  4017ac:	00401159 	.word	0x00401159
  4017b0:	00402589 	.word	0x00402589
  4017b4:	00402375 	.word	0x00402375
  4017b8:	200008dc 	.word	0x200008dc
  4017bc:	004021b9 	.word	0x004021b9
  4017c0:	200008e0 	.word	0x200008e0

004017c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  4017c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017c8:	4605      	mov	r5, r0
  4017ca:	4688      	mov	r8, r1
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  4017cc:	2600      	movs	r6, #0
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
  4017ce:	4f18      	ldr	r7, [pc, #96]	; (401830 <ip_reass_remove_oldest_datagram+0x6c>)
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  4017d0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 401834 <ip_reass_remove_oldest_datagram+0x70>
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
  4017d4:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  4017d6:	b343      	cbz	r3, 40182a <ip_reass_remove_oldest_datagram+0x66>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  4017d8:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  4017dc:	2400      	movs	r4, #0
  4017de:	4621      	mov	r1, r4
  4017e0:	4620      	mov	r0, r4
  4017e2:	e001      	b.n	4017e8 <ip_reass_remove_oldest_datagram+0x24>
  4017e4:	4619      	mov	r1, r3
  4017e6:	4613      	mov	r3, r2
  4017e8:	695a      	ldr	r2, [r3, #20]
  4017ea:	4572      	cmp	r2, lr
  4017ec:	d109      	bne.n	401802 <ip_reass_remove_oldest_datagram+0x3e>
  4017ee:	f8d5 c010 	ldr.w	ip, [r5, #16]
  4017f2:	699a      	ldr	r2, [r3, #24]
  4017f4:	4562      	cmp	r2, ip
  4017f6:	d104      	bne.n	401802 <ip_reass_remove_oldest_datagram+0x3e>
  4017f8:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
  4017fc:	88aa      	ldrh	r2, [r5, #4]
  4017fe:	4594      	cmp	ip, r2
  401800:	d009      	beq.n	401816 <ip_reass_remove_oldest_datagram+0x52>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  401802:	3401      	adds	r4, #1
        if (oldest == NULL) {
  401804:	b130      	cbz	r0, 401814 <ip_reass_remove_oldest_datagram+0x50>
          oldest = r;
        } else if (r->timer <= oldest->timer) {
  401806:	f893 c01f 	ldrb.w	ip, [r3, #31]
  40180a:	7fc2      	ldrb	r2, [r0, #31]
  40180c:	4594      	cmp	ip, r2
  40180e:	bf98      	it	ls
  401810:	4618      	movls	r0, r3
  401812:	e000      	b.n	401816 <ip_reass_remove_oldest_datagram+0x52>
  401814:	4618      	mov	r0, r3
          /* older than the previous oldest */
          oldest = r;
        }
      }
      if (r->next != NULL) {
  401816:	681a      	ldr	r2, [r3, #0]
  401818:	2a00      	cmp	r2, #0
  40181a:	d1e3      	bne.n	4017e4 <ip_reass_remove_oldest_datagram+0x20>
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
  40181c:	b108      	cbz	r0, 401822 <ip_reass_remove_oldest_datagram+0x5e>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  40181e:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  401820:	4406      	add	r6, r0
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  401822:	4546      	cmp	r6, r8
  401824:	da01      	bge.n	40182a <ip_reass_remove_oldest_datagram+0x66>
  401826:	2c01      	cmp	r4, #1
  401828:	dcd4      	bgt.n	4017d4 <ip_reass_remove_oldest_datagram+0x10>
  return pbufs_freed;
}
  40182a:	4630      	mov	r0, r6
  40182c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401830:	200008dc 	.word	0x200008dc
  401834:	00401711 	.word	0x00401711

00401838 <ip_reass_tmr>:
void
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  401838:	4b0a      	ldr	r3, [pc, #40]	; (401864 <ip_reass_tmr+0x2c>)
  40183a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  40183c:	b180      	cbz	r0, 401860 <ip_reass_tmr+0x28>
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  40183e:	b570      	push	{r4, r5, r6, lr}
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  401840:	2400      	movs	r4, #0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  401842:	4e09      	ldr	r6, [pc, #36]	; (401868 <ip_reass_tmr+0x30>)

  r = reassdatagrams;
  while (r != NULL) {
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  401844:	7fc3      	ldrb	r3, [r0, #31]
  401846:	b123      	cbz	r3, 401852 <ip_reass_tmr+0x1a>
      r->timer--;
  401848:	3b01      	subs	r3, #1
  40184a:	77c3      	strb	r3, [r0, #31]
  40184c:	4604      	mov	r4, r0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
      r = r->next;
  40184e:	6800      	ldr	r0, [r0, #0]
  401850:	e003      	b.n	40185a <ip_reass_tmr+0x22>
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  401852:	6805      	ldr	r5, [r0, #0]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  401854:	4621      	mov	r1, r4
  401856:	47b0      	blx	r6
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  401858:	4628      	mov	r0, r5
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  40185a:	2800      	cmp	r0, #0
  40185c:	d1f2      	bne.n	401844 <ip_reass_tmr+0xc>
  40185e:	bd70      	pop	{r4, r5, r6, pc}
  401860:	4770      	bx	lr
  401862:	bf00      	nop
  401864:	200008dc 	.word	0x200008dc
  401868:	00401711 	.word	0x00401711

0040186c <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  40186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401870:	b083      	sub	sp, #12
  401872:	4607      	mov	r7, r0
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  401874:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  401876:	7833      	ldrb	r3, [r6, #0]
  401878:	f003 030f 	and.w	r3, r3, #15
  40187c:	2b05      	cmp	r3, #5
  40187e:	f040 8154 	bne.w	401b2a <ip_reass+0x2be>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401882:	88f0      	ldrh	r0, [r6, #6]
  401884:	4caf      	ldr	r4, [pc, #700]	; (401b44 <ip_reass+0x2d8>)
  401886:	47a0      	blx	r4
  401888:	4683      	mov	fp, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  40188a:	8870      	ldrh	r0, [r6, #2]
  40188c:	47a0      	blx	r4
  40188e:	9001      	str	r0, [sp, #4]
  401890:	f896 a000 	ldrb.w	sl, [r6]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  401894:	4638      	mov	r0, r7
  401896:	4bac      	ldr	r3, [pc, #688]	; (401b48 <ip_reass+0x2dc>)
  401898:	4798      	blx	r3
  40189a:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  40189c:	4bab      	ldr	r3, [pc, #684]	; (401b4c <ip_reass+0x2e0>)
  40189e:	881b      	ldrh	r3, [r3, #0]
  4018a0:	4403      	add	r3, r0
  4018a2:	2b0a      	cmp	r3, #10
  4018a4:	dd0c      	ble.n	4018c0 <ip_reass+0x54>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4018a6:	4601      	mov	r1, r0
  4018a8:	4630      	mov	r0, r6
  4018aa:	4ba9      	ldr	r3, [pc, #676]	; (401b50 <ip_reass+0x2e4>)
  4018ac:	4798      	blx	r3
  4018ae:	2800      	cmp	r0, #0
  4018b0:	f000 813b 	beq.w	401b2a <ip_reass+0x2be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  4018b4:	4ba5      	ldr	r3, [pc, #660]	; (401b4c <ip_reass+0x2e0>)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4018b6:	881b      	ldrh	r3, [r3, #0]
  4018b8:	4443      	add	r3, r8
  4018ba:	2b0a      	cmp	r3, #10
  4018bc:	f300 8135 	bgt.w	401b2a <ip_reass+0x2be>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4018c0:	4ba4      	ldr	r3, [pc, #656]	; (401b54 <ip_reass+0x2e8>)
  4018c2:	681c      	ldr	r4, [r3, #0]
  4018c4:	b1b4      	cbz	r4, 4018f4 <ip_reass+0x88>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  4018c6:	68f2      	ldr	r2, [r6, #12]
  4018c8:	2500      	movs	r5, #0
  4018ca:	e000      	b.n	4018ce <ip_reass+0x62>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4018cc:	461c      	mov	r4, r3
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  4018ce:	6963      	ldr	r3, [r4, #20]
  4018d0:	4293      	cmp	r3, r2
  4018d2:	d107      	bne.n	4018e4 <ip_reass+0x78>
  4018d4:	6933      	ldr	r3, [r6, #16]
  4018d6:	69a1      	ldr	r1, [r4, #24]
  4018d8:	4299      	cmp	r1, r3
  4018da:	d103      	bne.n	4018e4 <ip_reass+0x78>
  4018dc:	89a1      	ldrh	r1, [r4, #12]
  4018de:	88b3      	ldrh	r3, [r6, #4]
  4018e0:	4299      	cmp	r1, r3
  4018e2:	d004      	beq.n	4018ee <ip_reass+0x82>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4018e4:	6823      	ldr	r3, [r4, #0]
  4018e6:	4625      	mov	r5, r4
  4018e8:	2b00      	cmp	r3, #0
  4018ea:	d1ef      	bne.n	4018cc <ip_reass+0x60>
  4018ec:	e002      	b.n	4018f4 <ip_reass+0x88>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
  4018ee:	2c00      	cmp	r4, #0
  4018f0:	d137      	bne.n	401962 <ip_reass+0xf6>
  4018f2:	462c      	mov	r4, r5
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  4018f4:	2004      	movs	r0, #4
  4018f6:	4b98      	ldr	r3, [pc, #608]	; (401b58 <ip_reass+0x2ec>)
  4018f8:	4798      	blx	r3
  if (ipr == NULL) {
  4018fa:	4681      	mov	r9, r0
  4018fc:	b968      	cbnz	r0, 40191a <ip_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  4018fe:	4641      	mov	r1, r8
  401900:	4630      	mov	r0, r6
  401902:	4b93      	ldr	r3, [pc, #588]	; (401b50 <ip_reass+0x2e4>)
  401904:	4798      	blx	r3
  401906:	4580      	cmp	r8, r0
  401908:	f300 810f 	bgt.w	401b2a <ip_reass+0x2be>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  40190c:	2004      	movs	r0, #4
  40190e:	4b92      	ldr	r3, [pc, #584]	; (401b58 <ip_reass+0x2ec>)
  401910:	4798      	blx	r3
    }
    if (ipr == NULL)
  401912:	4681      	mov	r9, r0
  401914:	2800      	cmp	r0, #0
  401916:	f000 8108 	beq.w	401b2a <ip_reass+0x2be>
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  40191a:	2220      	movs	r2, #32
  40191c:	2100      	movs	r1, #0
  40191e:	4648      	mov	r0, r9
  401920:	4b8e      	ldr	r3, [pc, #568]	; (401b5c <ip_reass+0x2f0>)
  401922:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  401924:	2303      	movs	r3, #3
  401926:	f889 301f 	strb.w	r3, [r9, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  40192a:	4b8a      	ldr	r3, [pc, #552]	; (401b54 <ip_reass+0x2e8>)
  40192c:	681a      	ldr	r2, [r3, #0]
  40192e:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
  401932:	f8c3 9000 	str.w	r9, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  401936:	6832      	ldr	r2, [r6, #0]
  401938:	6875      	ldr	r5, [r6, #4]
  40193a:	68b0      	ldr	r0, [r6, #8]
  40193c:	68f1      	ldr	r1, [r6, #12]
  40193e:	f8c9 2008 	str.w	r2, [r9, #8]
  401942:	f8c9 500c 	str.w	r5, [r9, #12]
  401946:	f8c9 0010 	str.w	r0, [r9, #16]
  40194a:	f8c9 1014 	str.w	r1, [r9, #20]
  40194e:	6932      	ldr	r2, [r6, #16]
  401950:	f8c9 2018 	str.w	r2, [r9, #24]

  if (ipr == NULL) {
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
  401954:	f1b9 0f00 	cmp.w	r9, #0
  401958:	f000 80e7 	beq.w	401b2a <ip_reass+0x2be>
  40195c:	4625      	mov	r5, r4
  ipr->next = reassdatagrams;
  reassdatagrams = ipr;
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  return ipr;
  40195e:	464c      	mov	r4, r9
  401960:	e017      	b.n	401992 <ip_reass+0x126>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401962:	88f0      	ldrh	r0, [r6, #6]
  401964:	4b77      	ldr	r3, [pc, #476]	; (401b44 <ip_reass+0x2d8>)
  401966:	4798      	blx	r3
  401968:	f3c0 000c 	ubfx	r0, r0, #0, #13
  40196c:	b988      	cbnz	r0, 401992 <ip_reass+0x126>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  40196e:	89e0      	ldrh	r0, [r4, #14]
  401970:	4b74      	ldr	r3, [pc, #464]	; (401b44 <ip_reass+0x2d8>)
  401972:	4798      	blx	r3
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401974:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401978:	b158      	cbz	r0, 401992 <ip_reass+0x126>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  40197a:	6832      	ldr	r2, [r6, #0]
  40197c:	f8d6 e004 	ldr.w	lr, [r6, #4]
  401980:	68b0      	ldr	r0, [r6, #8]
  401982:	68f1      	ldr	r1, [r6, #12]
  401984:	60a2      	str	r2, [r4, #8]
  401986:	f8c4 e00c 	str.w	lr, [r4, #12]
  40198a:	6120      	str	r0, [r4, #16]
  40198c:	6161      	str	r1, [r4, #20]
  40198e:	6932      	ldr	r2, [r6, #16]
  401990:	61a2      	str	r2, [r4, #24]
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  401992:	4a6e      	ldr	r2, [pc, #440]	; (401b4c <ip_reass+0x2e0>)
  401994:	8813      	ldrh	r3, [r2, #0]
  401996:	4498      	add	r8, r3
  401998:	f8a2 8000 	strh.w	r8, [r2]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  40199c:	88f3      	ldrh	r3, [r6, #6]
  40199e:	f003 0320 	and.w	r3, r3, #32
  4019a2:	b29b      	uxth	r3, r3
  4019a4:	b963      	cbnz	r3, 4019c0 <ip_reass+0x154>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  4019a6:	7fa3      	ldrb	r3, [r4, #30]
  4019a8:	f043 0301 	orr.w	r3, r3, #1
  4019ac:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = offset + len;
  4019ae:	f00a 0a0f 	and.w	sl, sl, #15
  4019b2:	9b01      	ldr	r3, [sp, #4]
  4019b4:	eba3 098a 	sub.w	r9, r3, sl, lsl #2
  4019b8:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
  4019bc:	f8a4 b01c 	strh.w	fp, [r4, #28]
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  4019c0:	687e      	ldr	r6, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  4019c2:	8870      	ldrh	r0, [r6, #2]
  4019c4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 401b44 <ip_reass+0x2d8>
  4019c8:	47c8      	blx	r9
  4019ca:	f896 8000 	ldrb.w	r8, [r6]
  4019ce:	f008 080f 	and.w	r8, r8, #15
  4019d2:	eba0 0088 	sub.w	r0, r0, r8, lsl #2
  4019d6:	fa1f f880 	uxth.w	r8, r0
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  4019da:	88f0      	ldrh	r0, [r6, #6]
  4019dc:	47c8      	blx	r9
  4019de:	f3c0 000c 	ubfx	r0, r0, #0, #13
  4019e2:	00c0      	lsls	r0, r0, #3
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  4019e4:	f8d7 c004 	ldr.w	ip, [r7, #4]
  iprh->next_pbuf = NULL;
  4019e8:	2300      	movs	r3, #0
  4019ea:	f88c 3000 	strb.w	r3, [ip]
  4019ee:	f88c 3001 	strb.w	r3, [ip, #1]
  4019f2:	f88c 3002 	strb.w	r3, [ip, #2]
  4019f6:	f88c 3003 	strb.w	r3, [ip, #3]
  iprh->start = offset;
  4019fa:	f8ac 0004 	strh.w	r0, [ip, #4]
  iprh->end = offset + len;
  4019fe:	4480      	add	r8, r0
  401a00:	fa1f f888 	uxth.w	r8, r8
  401a04:	f8ac 8006 	strh.w	r8, [ip, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  401a08:	6862      	ldr	r2, [r4, #4]
  401a0a:	b3a2      	cbz	r2, 401a76 <ip_reass+0x20a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401a0c:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  401a0e:	8899      	ldrh	r1, [r3, #4]
  401a10:	4288      	cmp	r0, r1
  401a12:	f0c0 808f 	bcc.w	401b34 <ip_reass+0x2c8>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
  401a16:	d056      	beq.n	401ac6 <ip_reass+0x25a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  401a18:	88da      	ldrh	r2, [r3, #6]
  401a1a:	4282      	cmp	r2, r0
  401a1c:	d853      	bhi.n	401ac6 <ip_reass+0x25a>
  401a1e:	f04f 0e01 	mov.w	lr, #1
  401a22:	e01c      	b.n	401a5e <ip_reass+0x1f2>
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401a24:	6872      	ldr	r2, [r6, #4]
    if (iprh->start < iprh_tmp->start) {
  401a26:	8891      	ldrh	r1, [r2, #4]
  401a28:	4288      	cmp	r0, r1
  401a2a:	d20c      	bcs.n	401a46 <ip_reass+0x1da>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  401a2c:	f8cc 6000 	str.w	r6, [ip]
      if (iprh_prev != NULL) {
  401a30:	2b00      	cmp	r3, #0
  401a32:	f000 80c5 	beq.w	401bc0 <ip_reass+0x354>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  401a36:	88d9      	ldrh	r1, [r3, #6]
  401a38:	4281      	cmp	r1, r0
  401a3a:	d844      	bhi.n	401ac6 <ip_reass+0x25a>
  401a3c:	8892      	ldrh	r2, [r2, #4]
  401a3e:	4542      	cmp	r2, r8
  401a40:	d341      	bcc.n	401ac6 <ip_reass+0x25a>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  401a42:	601f      	str	r7, [r3, #0]
  401a44:	e01a      	b.n	401a7c <ip_reass+0x210>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
  401a46:	4288      	cmp	r0, r1
  401a48:	d03d      	beq.n	401ac6 <ip_reass+0x25a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  401a4a:	88d6      	ldrh	r6, [r2, #6]
  401a4c:	4286      	cmp	r6, r0
  401a4e:	d83a      	bhi.n	401ac6 <ip_reass+0x25a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  401a50:	b123      	cbz	r3, 401a5c <ip_reass+0x1f0>
        if (iprh_prev->end != iprh_tmp->start) {
  401a52:	88db      	ldrh	r3, [r3, #6]
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  401a54:	428b      	cmp	r3, r1
  401a56:	bf18      	it	ne
  401a58:	f04f 0e00 	movne.w	lr, #0
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401a5c:	4613      	mov	r3, r2
           * and the previous fragment */
          valid = 0;
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  401a5e:	681e      	ldr	r6, [r3, #0]
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  401a60:	2e00      	cmp	r6, #0
  401a62:	d1df      	bne.n	401a24 <ip_reass+0x1b8>
  401a64:	e06b      	b.n	401b3e <ip_reass+0x2d2>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  401a66:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  401a68:	88da      	ldrh	r2, [r3, #6]
  401a6a:	f8bc 3004 	ldrh.w	r3, [ip, #4]
  401a6e:	429a      	cmp	r2, r3
  401a70:	f040 80a4 	bne.w	401bbc <ip_reass+0x350>
  401a74:	e002      	b.n	401a7c <ip_reass+0x210>
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  401a76:	f04f 0e01 	mov.w	lr, #1
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  401a7a:	6067      	str	r7, [r4, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  401a7c:	7fa3      	ldrb	r3, [r4, #30]
  401a7e:	f013 0f01 	tst.w	r3, #1
  401a82:	f000 809b 	beq.w	401bbc <ip_reass+0x350>
    /* and had no wholes so far */
    if (valid) {
  401a86:	f1be 0f00 	cmp.w	lr, #0
  401a8a:	f000 8097 	beq.w	401bbc <ip_reass+0x350>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  401a8e:	6860      	ldr	r0, [r4, #4]
  401a90:	6843      	ldr	r3, [r0, #4]
  401a92:	889b      	ldrh	r3, [r3, #4]
  401a94:	2b00      	cmp	r3, #0
  401a96:	f040 8091 	bne.w	401bbc <ip_reass+0x350>
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
  401a9a:	f8dc 3000 	ldr.w	r3, [ip]
        while (q != NULL) {
  401a9e:	2b00      	cmp	r3, #0
  401aa0:	d066      	beq.n	401b70 <ip_reass+0x304>
          iprh = (struct ip_reass_helper*)q->payload;
  401aa2:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  401aa4:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  401aa8:	889a      	ldrh	r2, [r3, #4]
  401aaa:	4291      	cmp	r1, r2
  401aac:	d007      	beq.n	401abe <ip_reass+0x252>
  401aae:	e085      	b.n	401bbc <ip_reass+0x350>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  401ab0:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  401ab2:	88d9      	ldrh	r1, [r3, #6]
  401ab4:	8893      	ldrh	r3, [r2, #4]
  401ab6:	4299      	cmp	r1, r3
  401ab8:	f040 8080 	bne.w	401bbc <ip_reass+0x350>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  401abc:	4613      	mov	r3, r2
          if (iprh_prev->end != iprh->start) {
            valid = 0;
            break;
          }
          iprh_prev = iprh;
          q = iprh->next_pbuf;
  401abe:	681a      	ldr	r2, [r3, #0]
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
  401ac0:	2a00      	cmp	r2, #0
  401ac2:	d1f5      	bne.n	401ab0 <ip_reass+0x244>
  401ac4:	e054      	b.n	401b70 <ip_reass+0x304>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  401ac6:	4638      	mov	r0, r7
  401ac8:	4b1f      	ldr	r3, [pc, #124]	; (401b48 <ip_reass+0x2dc>)
  401aca:	4798      	blx	r3
  401acc:	4a1f      	ldr	r2, [pc, #124]	; (401b4c <ip_reass+0x2e0>)
  401ace:	8813      	ldrh	r3, [r2, #0]
  401ad0:	1a18      	subs	r0, r3, r0
  401ad2:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  401ad4:	4638      	mov	r0, r7
  401ad6:	4b22      	ldr	r3, [pc, #136]	; (401b60 <ip_reass+0x2f4>)
  401ad8:	4798      	blx	r3
  401ada:	e06f      	b.n	401bbc <ip_reass+0x350>
    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  401adc:	f06f 0b13 	mvn.w	fp, #19
  401ae0:	f8df a084 	ldr.w	sl, [pc, #132]	; 401b68 <ip_reass+0x2fc>
      pbuf_cat(p, r);
  401ae4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401b6c <ip_reass+0x300>

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;
  401ae8:	6877      	ldr	r7, [r6, #4]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  401aea:	4659      	mov	r1, fp
  401aec:	4630      	mov	r0, r6
  401aee:	47d0      	blx	sl
      pbuf_cat(p, r);
  401af0:	4631      	mov	r1, r6
  401af2:	4640      	mov	r0, r8
  401af4:	47c8      	blx	r9
      r = iprh->next_pbuf;
  401af6:	683e      	ldr	r6, [r7, #0]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  401af8:	2e00      	cmp	r6, #0
  401afa:	d1f5      	bne.n	401ae8 <ip_reass+0x27c>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  401afc:	4b15      	ldr	r3, [pc, #84]	; (401b54 <ip_reass+0x2e8>)
  401afe:	681b      	ldr	r3, [r3, #0]
  401b00:	429c      	cmp	r4, r3
  401b02:	d103      	bne.n	401b0c <ip_reass+0x2a0>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  401b04:	6822      	ldr	r2, [r4, #0]
  401b06:	4b13      	ldr	r3, [pc, #76]	; (401b54 <ip_reass+0x2e8>)
  401b08:	601a      	str	r2, [r3, #0]
  401b0a:	e001      	b.n	401b10 <ip_reass+0x2a4>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  401b0c:	6823      	ldr	r3, [r4, #0]
  401b0e:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  401b10:	4621      	mov	r1, r4
  401b12:	2004      	movs	r0, #4
  401b14:	4b13      	ldr	r3, [pc, #76]	; (401b64 <ip_reass+0x2f8>)
  401b16:	4798      	blx	r3
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  401b18:	4640      	mov	r0, r8
  401b1a:	4b0b      	ldr	r3, [pc, #44]	; (401b48 <ip_reass+0x2dc>)
  401b1c:	4798      	blx	r3
  401b1e:	4a0b      	ldr	r2, [pc, #44]	; (401b4c <ip_reass+0x2e0>)
  401b20:	8813      	ldrh	r3, [r2, #0]
  401b22:	1a18      	subs	r0, r3, r0
  401b24:	8010      	strh	r0, [r2, #0]

    /* Return the pbuf chain */
    return p;
  401b26:	4640      	mov	r0, r8
  401b28:	e04c      	b.n	401bc4 <ip_reass+0x358>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  401b2a:	4638      	mov	r0, r7
  401b2c:	4b0c      	ldr	r3, [pc, #48]	; (401b60 <ip_reass+0x2f4>)
  401b2e:	4798      	blx	r3
  return NULL;
  401b30:	2000      	movs	r0, #0
  401b32:	e047      	b.n	401bc4 <ip_reass+0x358>
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
    if (iprh->start < iprh_tmp->start) {
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  401b34:	f8cc 2000 	str.w	r2, [ip]
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  401b38:	f04f 0e01 	mov.w	lr, #1
  401b3c:	e040      	b.n	401bc0 <ip_reass+0x354>
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    if (iprh_prev != NULL) {
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d191      	bne.n	401a66 <ip_reass+0x1fa>
  401b42:	e79a      	b.n	401a7a <ip_reass+0x20e>
  401b44:	00400f11 	.word	0x00400f11
  401b48:	00402589 	.word	0x00402589
  401b4c:	200008e0 	.word	0x200008e0
  401b50:	004017c5 	.word	0x004017c5
  401b54:	200008dc 	.word	0x200008dc
  401b58:	00402199 	.word	0x00402199
  401b5c:	00406529 	.word	0x00406529
  401b60:	00402375 	.word	0x00402375
  401b64:	004021b9 	.word	0x004021b9
  401b68:	004022fd 	.word	0x004022fd
  401b6c:	004025ad 	.word	0x004025ad
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  401b70:	8ba3      	ldrh	r3, [r4, #28]
  401b72:	3314      	adds	r3, #20
  401b74:	83a3      	strh	r3, [r4, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  401b76:	6847      	ldr	r7, [r0, #4]
  401b78:	683e      	ldr	r6, [r7, #0]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  401b7a:	4623      	mov	r3, r4
  401b7c:	f853 2f08 	ldr.w	r2, [r3, #8]!
  401b80:	f8d3 e004 	ldr.w	lr, [r3, #4]
  401b84:	6898      	ldr	r0, [r3, #8]
  401b86:	68d9      	ldr	r1, [r3, #12]
  401b88:	603a      	str	r2, [r7, #0]
  401b8a:	f8c7 e004 	str.w	lr, [r7, #4]
  401b8e:	60b8      	str	r0, [r7, #8]
  401b90:	60f9      	str	r1, [r7, #12]
  401b92:	691a      	ldr	r2, [r3, #16]
  401b94:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  401b96:	8ba0      	ldrh	r0, [r4, #28]
  401b98:	4b0c      	ldr	r3, [pc, #48]	; (401bcc <ip_reass+0x360>)
  401b9a:	4798      	blx	r3
  401b9c:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  401b9e:	2300      	movs	r3, #0
  401ba0:	71bb      	strb	r3, [r7, #6]
  401ba2:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  401ba4:	72bb      	strb	r3, [r7, #10]
  401ba6:	72fb      	strb	r3, [r7, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  401ba8:	2114      	movs	r1, #20
  401baa:	4638      	mov	r0, r7
  401bac:	4b08      	ldr	r3, [pc, #32]	; (401bd0 <ip_reass+0x364>)
  401bae:	4798      	blx	r3
  401bb0:	8178      	strh	r0, [r7, #10]

    p = ipr->p;
  401bb2:	f8d4 8004 	ldr.w	r8, [r4, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  401bb6:	2e00      	cmp	r6, #0
  401bb8:	d190      	bne.n	401adc <ip_reass+0x270>
  401bba:	e79f      	b.n	401afc <ip_reass+0x290>
    /* Return the pbuf chain */
    return p;
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  401bbc:	2000      	movs	r0, #0
  401bbe:	e001      	b.n	401bc4 <ip_reass+0x358>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
  401bc0:	6067      	str	r7, [r4, #4]
  401bc2:	e75b      	b.n	401a7c <ip_reass+0x210>
nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  return NULL;
}
  401bc4:	b003      	add	sp, #12
  401bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bca:	bf00      	nop
  401bcc:	00400f05 	.word	0x00400f05
  401bd0:	00401271 	.word	0x00401271

00401bd4 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  401bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bd8:	b089      	sub	sp, #36	; 0x24
  401bda:	4604      	mov	r4, r0
  401bdc:	9003      	str	r0, [sp, #12]
  401bde:	9105      	str	r1, [sp, #20]
  401be0:	9206      	str	r2, [sp, #24]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  401be2:	8c8e      	ldrh	r6, [r1, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  401be4:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  401be8:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  401bec:	4b3f      	ldr	r3, [pc, #252]	; (401cec <ip_frag+0x118>)
  401bee:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  401bf0:	f3c0 0b0c 	ubfx	fp, r0, #0, #13
  omf = tmp & IP_MF;
  401bf4:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  401bf8:	b283      	uxth	r3, r0
  401bfa:	9302      	str	r3, [sp, #8]

  left = p->tot_len - IP_HLEN;
  401bfc:	8925      	ldrh	r5, [r4, #8]
  401bfe:	3d14      	subs	r5, #20
  401c00:	b2ad      	uxth	r5, r5

  nfb = (mtu - IP_HLEN) / 8;
  401c02:	f1a6 0314 	sub.w	r3, r6, #20
  401c06:	9301      	str	r3, [sp, #4]
  401c08:	2b00      	cmp	r3, #0
  401c0a:	bfb8      	it	lt
  401c0c:	3307      	addlt	r3, #7
  401c0e:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  401c12:	9304      	str	r3, [sp, #16]

  while (left) {
  401c14:	2d00      	cmp	r5, #0
  401c16:	d061      	beq.n	401cdc <ip_frag+0x108>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  401c18:	00db      	lsls	r3, r3, #3
  401c1a:	b29b      	uxth	r3, r3
  401c1c:	9307      	str	r3, [sp, #28]
  401c1e:	f04f 0914 	mov.w	r9, #20

  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  401c22:	f3cb 080c 	ubfx	r8, fp, #0, #13
  401c26:	9b02      	ldr	r3, [sp, #8]
  401c28:	ea43 0808 	orr.w	r8, r3, r8
    if (!last) {
  401c2c:	9b01      	ldr	r3, [sp, #4]
  401c2e:	42ab      	cmp	r3, r5
      tmp = tmp | IP_MF;
  401c30:	bfba      	itte	lt
  401c32:	f448 5800 	orrlt.w	r8, r8, #8192	; 0x2000
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  401c36:	9c07      	ldrlt	r4, [sp, #28]
  401c38:	462c      	movge	r4, r5

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  401c3a:	2200      	movs	r2, #0
  401c3c:	4621      	mov	r1, r4
  401c3e:	2001      	movs	r0, #1
  401c40:	4b2b      	ldr	r3, [pc, #172]	; (401cf0 <ip_frag+0x11c>)
  401c42:	4798      	blx	r3
    if (rambuf == NULL) {
  401c44:	4606      	mov	r6, r0
  401c46:	2800      	cmp	r0, #0
  401c48:	d04a      	beq.n	401ce0 <ip_frag+0x10c>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  401c4a:	464b      	mov	r3, r9
  401c4c:	4622      	mov	r2, r4
  401c4e:	6841      	ldr	r1, [r0, #4]
  401c50:	9803      	ldr	r0, [sp, #12]
  401c52:	4f28      	ldr	r7, [pc, #160]	; (401cf4 <ip_frag+0x120>)
  401c54:	47b8      	blx	r7
  401c56:	4448      	add	r0, r9
  401c58:	fa1f f980 	uxth.w	r9, r0
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  401c5c:	2114      	movs	r1, #20
  401c5e:	4630      	mov	r0, r6
  401c60:	4b25      	ldr	r3, [pc, #148]	; (401cf8 <ip_frag+0x124>)
  401c62:	4798      	blx	r3
  401c64:	b128      	cbz	r0, 401c72 <ip_frag+0x9e>
      pbuf_free(rambuf);
  401c66:	4630      	mov	r0, r6
  401c68:	4b24      	ldr	r3, [pc, #144]	; (401cfc <ip_frag+0x128>)
  401c6a:	4798      	blx	r3
      return ERR_MEM;
  401c6c:	f04f 30ff 	mov.w	r0, #4294967295
  401c70:	e038      	b.n	401ce4 <ip_frag+0x110>
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  401c72:	6873      	ldr	r3, [r6, #4]
  401c74:	f8da 2000 	ldr.w	r2, [sl]
  401c78:	f8da 7004 	ldr.w	r7, [sl, #4]
  401c7c:	f8da 0008 	ldr.w	r0, [sl, #8]
  401c80:	f8da 100c 	ldr.w	r1, [sl, #12]
  401c84:	601a      	str	r2, [r3, #0]
  401c86:	605f      	str	r7, [r3, #4]
  401c88:	6098      	str	r0, [r3, #8]
  401c8a:	60d9      	str	r1, [r3, #12]
  401c8c:	f8da 2010 	ldr.w	r2, [sl, #16]
  401c90:	611a      	str	r2, [r3, #16]
    iphdr = rambuf->payload;
  401c92:	6877      	ldr	r7, [r6, #4]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  401c94:	4640      	mov	r0, r8
  401c96:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401d04 <ip_frag+0x130>
  401c9a:	47c0      	blx	r8
  401c9c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  401c9e:	f104 0014 	add.w	r0, r4, #20
  401ca2:	b280      	uxth	r0, r0
  401ca4:	47c0      	blx	r8
  401ca6:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  401ca8:	2300      	movs	r3, #0
  401caa:	72bb      	strb	r3, [r7, #10]
  401cac:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  401cae:	2114      	movs	r1, #20
  401cb0:	4638      	mov	r0, r7
  401cb2:	4b13      	ldr	r3, [pc, #76]	; (401d00 <ip_frag+0x12c>)
  401cb4:	4798      	blx	r3
  401cb6:	8178      	strh	r0, [r7, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  401cb8:	9805      	ldr	r0, [sp, #20]
  401cba:	6943      	ldr	r3, [r0, #20]
  401cbc:	9a06      	ldr	r2, [sp, #24]
  401cbe:	4631      	mov	r1, r6
  401cc0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  401cc2:	4630      	mov	r0, r6
  401cc4:	4b0d      	ldr	r3, [pc, #52]	; (401cfc <ip_frag+0x128>)
  401cc6:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  401cc8:	1b2d      	subs	r5, r5, r4
  401cca:	b2ad      	uxth	r5, r5
    ofo += nfb;
  401ccc:	9b04      	ldr	r3, [sp, #16]
  401cce:	449b      	add	fp, r3
  401cd0:	fa1f fb8b 	uxth.w	fp, fp

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
  401cd4:	2d00      	cmp	r5, #0
  401cd6:	d1a4      	bne.n	401c22 <ip_frag+0x4e>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  401cd8:	2000      	movs	r0, #0
  401cda:	e003      	b.n	401ce4 <ip_frag+0x110>
  401cdc:	2000      	movs	r0, #0
  401cde:	e001      	b.n	401ce4 <ip_frag+0x110>
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
    if (rambuf == NULL) {
      return ERR_MEM;
  401ce0:	f04f 30ff 	mov.w	r0, #4294967295
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
}
  401ce4:	b009      	add	sp, #36	; 0x24
  401ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cea:	bf00      	nop
  401cec:	00400f11 	.word	0x00400f11
  401cf0:	004023d5 	.word	0x004023d5
  401cf4:	004026a1 	.word	0x004026a1
  401cf8:	004022fd 	.word	0x004022fd
  401cfc:	00402375 	.word	0x00402375
  401d00:	00401271 	.word	0x00401271
  401d04:	00400f05 	.word	0x00400f05

00401d08 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  401d08:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  401d0a:	4b06      	ldr	r3, [pc, #24]	; (401d24 <lwip_init+0x1c>)
  401d0c:	4798      	blx	r3
  memp_init();
  401d0e:	4b06      	ldr	r3, [pc, #24]	; (401d28 <lwip_init+0x20>)
  401d10:	4798      	blx	r3
  pbuf_init();
  netif_init();
  401d12:	4b06      	ldr	r3, [pc, #24]	; (401d2c <lwip_init+0x24>)
  401d14:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  401d16:	4b06      	ldr	r3, [pc, #24]	; (401d30 <lwip_init+0x28>)
  401d18:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  401d1a:	4b06      	ldr	r3, [pc, #24]	; (401d34 <lwip_init+0x2c>)
  401d1c:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  401d1e:	4b06      	ldr	r3, [pc, #24]	; (401d38 <lwip_init+0x30>)
  401d20:	4798      	blx	r3
  401d22:	bd08      	pop	{r3, pc}
  401d24:	00401eb1 	.word	0x00401eb1
  401d28:	00402125 	.word	0x00402125
  401d2c:	004021d1 	.word	0x004021d1
  401d30:	00404e65 	.word	0x00404e65
  401d34:	00402719 	.word	0x00402719
  401d38:	00401e39 	.word	0x00401e39

00401d3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  401d3c:	b570      	push	{r4, r5, r6, lr}
  401d3e:	4604      	mov	r4, r0
  401d40:	460e      	mov	r6, r1
  401d42:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  401d44:	2005      	movs	r0, #5
  401d46:	4b1b      	ldr	r3, [pc, #108]	; (401db4 <sys_timeout+0x78>)
  401d48:	4798      	blx	r3
  if (timeout == NULL) {
  401d4a:	2800      	cmp	r0, #0
  401d4c:	d031      	beq.n	401db2 <sys_timeout+0x76>
  401d4e:	4601      	mov	r1, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  401d50:	2300      	movs	r3, #0
  401d52:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
  401d54:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
  401d56:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
  401d58:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  401d5a:	4b17      	ldr	r3, [pc, #92]	; (401db8 <sys_timeout+0x7c>)
  401d5c:	681d      	ldr	r5, [r3, #0]
  401d5e:	b90d      	cbnz	r5, 401d64 <sys_timeout+0x28>
    next_timeout = timeout;
  401d60:	6018      	str	r0, [r3, #0]
    return;
  401d62:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (next_timeout->time > msecs) {
  401d64:	6868      	ldr	r0, [r5, #4]
  401d66:	4284      	cmp	r4, r0
  401d68:	d214      	bcs.n	401d94 <sys_timeout+0x58>
    next_timeout->time -= msecs;
  401d6a:	1b00      	subs	r0, r0, r4
  401d6c:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
  401d6e:	600d      	str	r5, [r1, #0]
    next_timeout = timeout;
  401d70:	4b11      	ldr	r3, [pc, #68]	; (401db8 <sys_timeout+0x7c>)
  401d72:	6019      	str	r1, [r3, #0]
  401d74:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  401d76:	684b      	ldr	r3, [r1, #4]
  401d78:	6850      	ldr	r0, [r2, #4]
  401d7a:	1a18      	subs	r0, r3, r0
  401d7c:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  401d7e:	6813      	ldr	r3, [r2, #0]
  401d80:	b123      	cbz	r3, 401d8c <sys_timeout+0x50>
  401d82:	685c      	ldr	r4, [r3, #4]
  401d84:	42a0      	cmp	r0, r4
  401d86:	d30e      	bcc.n	401da6 <sys_timeout+0x6a>
  401d88:	461a      	mov	r2, r3
  401d8a:	e7f4      	b.n	401d76 <sys_timeout+0x3a>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        }
        timeout->next = t->next;
  401d8c:	6813      	ldr	r3, [r2, #0]
  401d8e:	600b      	str	r3, [r1, #0]
        t->next = timeout;
  401d90:	6011      	str	r1, [r2, #0]
        break;
  401d92:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  401d94:	1a20      	subs	r0, r4, r0
  401d96:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  401d98:	682a      	ldr	r2, [r5, #0]
  401d9a:	b142      	cbz	r2, 401dae <sys_timeout+0x72>
  401d9c:	6853      	ldr	r3, [r2, #4]
  401d9e:	4298      	cmp	r0, r3
  401da0:	d2e9      	bcs.n	401d76 <sys_timeout+0x3a>
  401da2:	4613      	mov	r3, r2
  401da4:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  401da6:	685c      	ldr	r4, [r3, #4]
  401da8:	1a20      	subs	r0, r4, r0
  401daa:	6058      	str	r0, [r3, #4]
  401dac:	e7ee      	b.n	401d8c <sys_timeout+0x50>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
  401dae:	462a      	mov	r2, r5
  401db0:	e7ec      	b.n	401d8c <sys_timeout+0x50>
  401db2:	bd70      	pop	{r4, r5, r6, pc}
  401db4:	00402199 	.word	0x00402199
  401db8:	200008ec 	.word	0x200008ec

00401dbc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  401dbc:	b508      	push	{r3, lr}
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  401dbe:	4b09      	ldr	r3, [pc, #36]	; (401de4 <tcp_timer_needed+0x28>)
  401dc0:	681b      	ldr	r3, [r3, #0]
  401dc2:	b96b      	cbnz	r3, 401de0 <tcp_timer_needed+0x24>
  401dc4:	4b08      	ldr	r3, [pc, #32]	; (401de8 <tcp_timer_needed+0x2c>)
  401dc6:	681b      	ldr	r3, [r3, #0]
  401dc8:	b913      	cbnz	r3, 401dd0 <tcp_timer_needed+0x14>
  401dca:	4b08      	ldr	r3, [pc, #32]	; (401dec <tcp_timer_needed+0x30>)
  401dcc:	681b      	ldr	r3, [r3, #0]
  401dce:	b13b      	cbz	r3, 401de0 <tcp_timer_needed+0x24>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  401dd0:	2201      	movs	r2, #1
  401dd2:	4b04      	ldr	r3, [pc, #16]	; (401de4 <tcp_timer_needed+0x28>)
  401dd4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  401dd6:	2200      	movs	r2, #0
  401dd8:	4905      	ldr	r1, [pc, #20]	; (401df0 <tcp_timer_needed+0x34>)
  401dda:	20fa      	movs	r0, #250	; 0xfa
  401ddc:	4b05      	ldr	r3, [pc, #20]	; (401df4 <tcp_timer_needed+0x38>)
  401dde:	4798      	blx	r3
  401de0:	bd08      	pop	{r3, pc}
  401de2:	bf00      	nop
  401de4:	200008e4 	.word	0x200008e4
  401de8:	20004768 	.word	0x20004768
  401dec:	2000477c 	.word	0x2000477c
  401df0:	00401df9 	.word	0x00401df9
  401df4:	00401d3d 	.word	0x00401d3d

00401df8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  401df8:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  401dfa:	4b09      	ldr	r3, [pc, #36]	; (401e20 <tcpip_tcp_timer+0x28>)
  401dfc:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  401dfe:	4b09      	ldr	r3, [pc, #36]	; (401e24 <tcpip_tcp_timer+0x2c>)
  401e00:	681b      	ldr	r3, [r3, #0]
  401e02:	b913      	cbnz	r3, 401e0a <tcpip_tcp_timer+0x12>
  401e04:	4b08      	ldr	r3, [pc, #32]	; (401e28 <tcpip_tcp_timer+0x30>)
  401e06:	681b      	ldr	r3, [r3, #0]
  401e08:	b12b      	cbz	r3, 401e16 <tcpip_tcp_timer+0x1e>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  401e0a:	2200      	movs	r2, #0
  401e0c:	4907      	ldr	r1, [pc, #28]	; (401e2c <tcpip_tcp_timer+0x34>)
  401e0e:	20fa      	movs	r0, #250	; 0xfa
  401e10:	4b07      	ldr	r3, [pc, #28]	; (401e30 <tcpip_tcp_timer+0x38>)
  401e12:	4798      	blx	r3
  401e14:	bd08      	pop	{r3, pc}
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  401e16:	2200      	movs	r2, #0
  401e18:	4b06      	ldr	r3, [pc, #24]	; (401e34 <tcpip_tcp_timer+0x3c>)
  401e1a:	601a      	str	r2, [r3, #0]
  401e1c:	bd08      	pop	{r3, pc}
  401e1e:	bf00      	nop
  401e20:	00402f71 	.word	0x00402f71
  401e24:	20004768 	.word	0x20004768
  401e28:	2000477c 	.word	0x2000477c
  401e2c:	00401df9 	.word	0x00401df9
  401e30:	00401d3d 	.word	0x00401d3d
  401e34:	200008e4 	.word	0x200008e4

00401e38 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
  401e38:	b510      	push	{r4, lr}
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  401e3a:	2200      	movs	r2, #0
  401e3c:	4907      	ldr	r1, [pc, #28]	; (401e5c <sys_timeouts_init+0x24>)
  401e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401e42:	4c07      	ldr	r4, [pc, #28]	; (401e60 <sys_timeouts_init+0x28>)
  401e44:	47a0      	blx	r4
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  401e46:	2200      	movs	r2, #0
  401e48:	4906      	ldr	r1, [pc, #24]	; (401e64 <sys_timeouts_init+0x2c>)
  401e4a:	f241 3088 	movw	r0, #5000	; 0x1388
  401e4e:	47a0      	blx	r4
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  401e50:	4b05      	ldr	r3, [pc, #20]	; (401e68 <sys_timeouts_init+0x30>)
  401e52:	4798      	blx	r3
  401e54:	4b05      	ldr	r3, [pc, #20]	; (401e6c <sys_timeouts_init+0x34>)
  401e56:	6018      	str	r0, [r3, #0]
  401e58:	bd10      	pop	{r4, pc}
  401e5a:	bf00      	nop
  401e5c:	00401e91 	.word	0x00401e91
  401e60:	00401d3d 	.word	0x00401d3d
  401e64:	00401e71 	.word	0x00401e71
  401e68:	00405f95 	.word	0x00405f95
  401e6c:	200008e8 	.word	0x200008e8

00401e70 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  401e70:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  401e72:	4b04      	ldr	r3, [pc, #16]	; (401e84 <arp_timer+0x14>)
  401e74:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  401e76:	2200      	movs	r2, #0
  401e78:	4903      	ldr	r1, [pc, #12]	; (401e88 <arp_timer+0x18>)
  401e7a:	f241 3088 	movw	r0, #5000	; 0x1388
  401e7e:	4b03      	ldr	r3, [pc, #12]	; (401e8c <arp_timer+0x1c>)
  401e80:	4798      	blx	r3
  401e82:	bd08      	pop	{r3, pc}
  401e84:	00405445 	.word	0x00405445
  401e88:	00401e71 	.word	0x00401e71
  401e8c:	00401d3d 	.word	0x00401d3d

00401e90 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  401e90:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  401e92:	4b04      	ldr	r3, [pc, #16]	; (401ea4 <ip_reass_timer+0x14>)
  401e94:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  401e96:	2200      	movs	r2, #0
  401e98:	4903      	ldr	r1, [pc, #12]	; (401ea8 <ip_reass_timer+0x18>)
  401e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401e9e:	4b03      	ldr	r3, [pc, #12]	; (401eac <ip_reass_timer+0x1c>)
  401ea0:	4798      	blx	r3
  401ea2:	bd08      	pop	{r3, pc}
  401ea4:	00401839 	.word	0x00401839
  401ea8:	00401e91 	.word	0x00401e91
  401eac:	00401d3d 	.word	0x00401d3d

00401eb0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  401eb0:	4b0a      	ldr	r3, [pc, #40]	; (401edc <mem_init+0x2c>)
  401eb2:	f023 0303 	bic.w	r3, r3, #3
  401eb6:	4a0a      	ldr	r2, [pc, #40]	; (401ee0 <mem_init+0x30>)
  401eb8:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  401eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401ebe:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  401ec0:	2200      	movs	r2, #0
  401ec2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  401ec4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  401ec6:	185a      	adds	r2, r3, r1
  401ec8:	4806      	ldr	r0, [pc, #24]	; (401ee4 <mem_init+0x34>)
  401eca:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  401ecc:	2001      	movs	r0, #1
  401ece:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  401ed0:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  401ed2:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  401ed4:	4a04      	ldr	r2, [pc, #16]	; (401ee8 <mem_init+0x38>)
  401ed6:	6013      	str	r3, [r2, #0]
  401ed8:	4770      	bx	lr
  401eda:	bf00      	nop
  401edc:	20003747 	.word	0x20003747
  401ee0:	200008f8 	.word	0x200008f8
  401ee4:	200008f4 	.word	0x200008f4
  401ee8:	200008f0 	.word	0x200008f0

00401eec <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  401eec:	2800      	cmp	r0, #0
  401eee:	d03f      	beq.n	401f70 <mem_free+0x84>
  401ef0:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  401ef2:	4a20      	ldr	r2, [pc, #128]	; (401f74 <mem_free+0x88>)
  401ef4:	6812      	ldr	r2, [r2, #0]
  401ef6:	4290      	cmp	r0, r2
  401ef8:	d33a      	bcc.n	401f70 <mem_free+0x84>
  401efa:	491f      	ldr	r1, [pc, #124]	; (401f78 <mem_free+0x8c>)
  401efc:	6808      	ldr	r0, [r1, #0]
  401efe:	4283      	cmp	r3, r0
  401f00:	d236      	bcs.n	401f70 <mem_free+0x84>
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  401f02:	b470      	push	{r4, r5, r6}
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  401f04:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  401f08:	2400      	movs	r4, #0
  401f0a:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  401f0e:	4c1b      	ldr	r4, [pc, #108]	; (401f7c <mem_free+0x90>)
  401f10:	6824      	ldr	r4, [r4, #0]
  401f12:	42a1      	cmp	r1, r4
    /* the newly freed struct is now the lowest */
    lfree = mem;
  401f14:	bf3c      	itt	cc
  401f16:	4c19      	ldrcc	r4, [pc, #100]	; (401f7c <mem_free+0x90>)
  401f18:	6021      	strcc	r1, [r4, #0]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  401f1a:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  401f1e:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  401f20:	42a1      	cmp	r1, r4
  401f22:	d010      	beq.n	401f46 <mem_free+0x5a>
  401f24:	7926      	ldrb	r6, [r4, #4]
  401f26:	b976      	cbnz	r6, 401f46 <mem_free+0x5a>
  401f28:	42a0      	cmp	r0, r4
  401f2a:	d00c      	beq.n	401f46 <mem_free+0x5a>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  401f2c:	4813      	ldr	r0, [pc, #76]	; (401f7c <mem_free+0x90>)
  401f2e:	6800      	ldr	r0, [r0, #0]
  401f30:	4284      	cmp	r4, r0
      lfree = mem;
  401f32:	bf04      	itt	eq
  401f34:	4811      	ldreq	r0, [pc, #68]	; (401f7c <mem_free+0x90>)
  401f36:	6001      	streq	r1, [r0, #0]
    }
    mem->next = nmem->next;
  401f38:	5b50      	ldrh	r0, [r2, r5]
  401f3a:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  401f3e:	5b50      	ldrh	r0, [r2, r5]
  401f40:	4410      	add	r0, r2
  401f42:	1a8c      	subs	r4, r1, r2
  401f44:	8044      	strh	r4, [r0, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
  401f46:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  401f4a:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  401f4c:	42a1      	cmp	r1, r4
  401f4e:	d00e      	beq.n	401f6e <mem_free+0x82>
  401f50:	7925      	ldrb	r5, [r4, #4]
  401f52:	b965      	cbnz	r5, 401f6e <mem_free+0x82>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  401f54:	4d09      	ldr	r5, [pc, #36]	; (401f7c <mem_free+0x90>)
  401f56:	682d      	ldr	r5, [r5, #0]
  401f58:	42a9      	cmp	r1, r5
      lfree = pmem;
  401f5a:	bf04      	itt	eq
  401f5c:	4907      	ldreq	r1, [pc, #28]	; (401f7c <mem_free+0x90>)
  401f5e:	600c      	streq	r4, [r1, #0]
    }
    pmem->next = mem->next;
  401f60:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  401f64:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  401f66:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  401f6a:	441a      	add	r2, r3
  401f6c:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  401f6e:	bc70      	pop	{r4, r5, r6}
  401f70:	4770      	bx	lr
  401f72:	bf00      	nop
  401f74:	200008f8 	.word	0x200008f8
  401f78:	200008f4 	.word	0x200008f4
  401f7c:	200008f0 	.word	0x200008f0

00401f80 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  401f80:	3103      	adds	r1, #3
  401f82:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  401f86:	400b      	ands	r3, r1

  if(newsize < MIN_SIZE_ALIGNED) {
  401f88:	2b0b      	cmp	r3, #11
  401f8a:	d903      	bls.n	401f94 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  401f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  401f90:	d901      	bls.n	401f96 <mem_trim+0x16>
  401f92:	e051      	b.n	402038 <mem_trim+0xb8>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  401f94:	230c      	movs	r3, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  401f96:	4a2b      	ldr	r2, [pc, #172]	; (402044 <mem_trim+0xc4>)
  401f98:	6812      	ldr	r2, [r2, #0]
  401f9a:	4282      	cmp	r2, r0
  401f9c:	d850      	bhi.n	402040 <mem_trim+0xc0>
  401f9e:	492a      	ldr	r1, [pc, #168]	; (402048 <mem_trim+0xc8>)
  401fa0:	6809      	ldr	r1, [r1, #0]
  401fa2:	4288      	cmp	r0, r1
  401fa4:	d24c      	bcs.n	402040 <mem_trim+0xc0>
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
  401fa6:	b4f0      	push	{r4, r5, r6, r7}
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  401fa8:	f1a0 0408 	sub.w	r4, r0, #8
  401fac:	1aa4      	subs	r4, r4, r2
  401fae:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  401fb0:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  401fb4:	f1a5 0108 	sub.w	r1, r5, #8
  401fb8:	1b09      	subs	r1, r1, r4
  401fba:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  401fbc:	4299      	cmp	r1, r3
  401fbe:	d33d      	bcc.n	40203c <mem_trim+0xbc>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  401fc0:	d03d      	beq.n	40203e <mem_trim+0xbe>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  401fc2:	1956      	adds	r6, r2, r5
  if(mem2->used == 0) {
  401fc4:	7937      	ldrb	r7, [r6, #4]
  401fc6:	b9cf      	cbnz	r7, 401ffc <mem_trim+0x7c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  401fc8:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  401fca:	f104 0108 	add.w	r1, r4, #8
  401fce:	440b      	add	r3, r1
  401fd0:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  401fd2:	491e      	ldr	r1, [pc, #120]	; (40204c <mem_trim+0xcc>)
  401fd4:	6809      	ldr	r1, [r1, #0]
  401fd6:	428e      	cmp	r6, r1
  401fd8:	d102      	bne.n	401fe0 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
  401fda:	18d1      	adds	r1, r2, r3
  401fdc:	4e1b      	ldr	r6, [pc, #108]	; (40204c <mem_trim+0xcc>)
  401fde:	6031      	str	r1, [r6, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  401fe0:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  401fe2:	2600      	movs	r6, #0
  401fe4:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  401fe6:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  401fe8:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  401fea:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  401fee:	5ad1      	ldrh	r1, [r2, r3]
  401ff0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  401ff4:	d023      	beq.n	40203e <mem_trim+0xbe>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  401ff6:	440a      	add	r2, r1
  401ff8:	8053      	strh	r3, [r2, #2]
  401ffa:	e020      	b.n	40203e <mem_trim+0xbe>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  401ffc:	f103 0514 	add.w	r5, r3, #20
  402000:	428d      	cmp	r5, r1
  402002:	d81c      	bhi.n	40203e <mem_trim+0xbe>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  402004:	f104 0108 	add.w	r1, r4, #8
  402008:	440b      	add	r3, r1
  40200a:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  40200c:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  40200e:	4d0f      	ldr	r5, [pc, #60]	; (40204c <mem_trim+0xcc>)
  402010:	682d      	ldr	r5, [r5, #0]
  402012:	42a9      	cmp	r1, r5
      lfree = mem2;
  402014:	bf3c      	itt	cc
  402016:	4d0d      	ldrcc	r5, [pc, #52]	; (40204c <mem_trim+0xcc>)
  402018:	6029      	strcc	r1, [r5, #0]
    }
    mem2->used = 0;
  40201a:	2500      	movs	r5, #0
  40201c:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  40201e:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  402022:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  402024:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  402026:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  40202a:	5ad1      	ldrh	r1, [r2, r3]
  40202c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  402030:	d005      	beq.n	40203e <mem_trim+0xbe>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402032:	440a      	add	r2, r1
  402034:	8053      	strh	r3, [r2, #2]
  402036:	e002      	b.n	40203e <mem_trim+0xbe>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  402038:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40203a:	4770      	bx	lr

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
    /* not supported */
    return NULL;
  40203c:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40203e:	bcf0      	pop	{r4, r5, r6, r7}
  402040:	4770      	bx	lr
  402042:	bf00      	nop
  402044:	200008f8 	.word	0x200008f8
  402048:	200008f4 	.word	0x200008f4
  40204c:	200008f0 	.word	0x200008f0

00402050 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  402050:	2800      	cmp	r0, #0
  402052:	d059      	beq.n	402108 <mem_malloc+0xb8>
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  402054:	b4f0      	push	{r4, r5, r6, r7}
  402056:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  402058:	3303      	adds	r3, #3
  40205a:	f64f 74fc 	movw	r4, #65532	; 0xfffc
  40205e:	401c      	ands	r4, r3

  if(size < MIN_SIZE_ALIGNED) {
  402060:	2c0b      	cmp	r4, #11
  402062:	d903      	bls.n	40206c <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  402064:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402068:	d901      	bls.n	40206e <mem_malloc+0x1e>
  40206a:	e04f      	b.n	40210c <mem_malloc+0xbc>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  40206c:	240c      	movs	r4, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  40206e:	4b2a      	ldr	r3, [pc, #168]	; (402118 <mem_malloc+0xc8>)
  402070:	6819      	ldr	r1, [r3, #0]
  402072:	4b2a      	ldr	r3, [pc, #168]	; (40211c <mem_malloc+0xcc>)
  402074:	681b      	ldr	r3, [r3, #0]
  402076:	1a5b      	subs	r3, r3, r1
  402078:	b29b      	uxth	r3, r3
  40207a:	f5c4 5580 	rsb	r5, r4, #4096	; 0x1000
  40207e:	42ab      	cmp	r3, r5
  402080:	da46      	bge.n	402110 <mem_malloc+0xc0>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  402082:	4626      	mov	r6, r4
    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
  402084:	18c8      	adds	r0, r1, r3
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  402086:	7902      	ldrb	r2, [r0, #4]
  402088:	2a00      	cmp	r2, #0
  40208a:	d138      	bne.n	4020fe <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40208c:	5aca      	ldrh	r2, [r1, r3]
  40208e:	3a08      	subs	r2, #8
  402090:	1ad2      	subs	r2, r2, r3
  402092:	4637      	mov	r7, r6
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  402094:	42a2      	cmp	r2, r4
  402096:	d332      	bcc.n	4020fe <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  402098:	3714      	adds	r7, #20
  40209a:	42ba      	cmp	r2, r7
  40209c:	d313      	bcc.n	4020c6 <mem_malloc+0x76>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  40209e:	f104 0208 	add.w	r2, r4, #8
  4020a2:	441a      	add	r2, r3
  4020a4:	b292      	uxth	r2, r2
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
  4020a6:	188c      	adds	r4, r1, r2
          mem2->used = 0;
  4020a8:	2500      	movs	r5, #0
  4020aa:	7125      	strb	r5, [r4, #4]
          mem2->next = mem->next;
  4020ac:	8805      	ldrh	r5, [r0, #0]
  4020ae:	528d      	strh	r5, [r1, r2]
          mem2->prev = ptr;
  4020b0:	8063      	strh	r3, [r4, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  4020b2:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  4020b4:	2301      	movs	r3, #1
  4020b6:	7103      	strb	r3, [r0, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
  4020b8:	5a8b      	ldrh	r3, [r1, r2]
  4020ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4020be:	d004      	beq.n	4020ca <mem_malloc+0x7a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4020c0:	440b      	add	r3, r1
  4020c2:	805a      	strh	r2, [r3, #2]
  4020c4:	e001      	b.n	4020ca <mem_malloc+0x7a>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  4020c6:	2301      	movs	r3, #1
  4020c8:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  4020ca:	4b14      	ldr	r3, [pc, #80]	; (40211c <mem_malloc+0xcc>)
  4020cc:	681b      	ldr	r3, [r3, #0]
  4020ce:	4298      	cmp	r0, r3
  4020d0:	d113      	bne.n	4020fa <mem_malloc+0xaa>
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  4020d2:	791a      	ldrb	r2, [r3, #4]
  4020d4:	b162      	cbz	r2, 4020f0 <mem_malloc+0xa0>
  4020d6:	4a12      	ldr	r2, [pc, #72]	; (402120 <mem_malloc+0xd0>)
  4020d8:	6811      	ldr	r1, [r2, #0]
  4020da:	428b      	cmp	r3, r1
  4020dc:	d00b      	beq.n	4020f6 <mem_malloc+0xa6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  4020de:	4a0e      	ldr	r2, [pc, #56]	; (402118 <mem_malloc+0xc8>)
  4020e0:	6814      	ldr	r4, [r2, #0]
  4020e2:	881b      	ldrh	r3, [r3, #0]
  4020e4:	4423      	add	r3, r4
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  4020e6:	791a      	ldrb	r2, [r3, #4]
  4020e8:	b122      	cbz	r2, 4020f4 <mem_malloc+0xa4>
  4020ea:	428b      	cmp	r3, r1
  4020ec:	d1f9      	bne.n	4020e2 <mem_malloc+0x92>
  4020ee:	e002      	b.n	4020f6 <mem_malloc+0xa6>
  4020f0:	4619      	mov	r1, r3
  4020f2:	e000      	b.n	4020f6 <mem_malloc+0xa6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  4020f4:	4619      	mov	r1, r3
          }
          lfree = cur;
  4020f6:	4b09      	ldr	r3, [pc, #36]	; (40211c <mem_malloc+0xcc>)
  4020f8:	6019      	str	r1, [r3, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  4020fa:	3008      	adds	r0, #8
  4020fc:	e009      	b.n	402112 <mem_malloc+0xc2>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  4020fe:	8803      	ldrh	r3, [r0, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  402100:	42ab      	cmp	r3, r5
  402102:	dbbf      	blt.n	402084 <mem_malloc+0x34>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  402104:	2000      	movs	r0, #0
  402106:	e004      	b.n	402112 <mem_malloc+0xc2>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
  402108:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
  40210a:	4770      	bx	lr
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  40210c:	2000      	movs	r0, #0
  40210e:	e000      	b.n	402112 <mem_malloc+0xc2>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  402110:	2000      	movs	r0, #0
}
  402112:	bcf0      	pop	{r4, r5, r6, r7}
  402114:	4770      	bx	lr
  402116:	bf00      	nop
  402118:	200008f8 	.word	0x200008f8
  40211c:	200008f0 	.word	0x200008f0
  402120:	200008f4 	.word	0x200008f4

00402124 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  402124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  402128:	4d17      	ldr	r5, [pc, #92]	; (402188 <memp_init+0x64>)
  40212a:	f025 0503 	bic.w	r5, r5, #3
  40212e:	4b17      	ldr	r3, [pc, #92]	; (40218c <memp_init+0x68>)
  402130:	1f1c      	subs	r4, r3, #4
  402132:	4f17      	ldr	r7, [pc, #92]	; (402190 <memp_init+0x6c>)
  402134:	4e17      	ldr	r6, [pc, #92]	; (402194 <memp_init+0x70>)
  402136:	f103 0c1c 	add.w	ip, r3, #28
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  40213a:	f04f 0800 	mov.w	r8, #0
  40213e:	3404      	adds	r4, #4
  402140:	46a6      	mov	lr, r4
  402142:	f8c4 8000 	str.w	r8, [r4]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  402146:	f837 0f02 	ldrh.w	r0, [r7, #2]!
  40214a:	b1b8      	cbz	r0, 40217c <memp_init+0x58>
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40214c:	f8b6 9000 	ldrh.w	r9, [r6]
  402150:	462b      	mov	r3, r5
  402152:	2200      	movs	r2, #0
  402154:	4611      	mov	r1, r2
  402156:	e000      	b.n	40215a <memp_init+0x36>
  402158:	4653      	mov	r3, sl
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
  40215a:	6019      	str	r1, [r3, #0]
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40215c:	eb03 0a09 	add.w	sl, r3, r9
  402160:	3201      	adds	r2, #1
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
  402162:	4619      	mov	r1, r3
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  402164:	b293      	uxth	r3, r2
  402166:	4298      	cmp	r0, r3
  402168:	d8f6      	bhi.n	402158 <memp_init+0x34>
  40216a:	3801      	subs	r0, #1
  40216c:	b280      	uxth	r0, r0
  40216e:	fb00 9309 	mla	r3, r0, r9, r9
  402172:	fb09 5000 	mla	r0, r9, r0, r5
  402176:	f8ce 0000 	str.w	r0, [lr]
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40217a:	441d      	add	r5, r3
  40217c:	3602      	adds	r6, #2

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  40217e:	45a4      	cmp	ip, r4
  402180:	d1dd      	bne.n	40213e <memp_init+0x1a>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  402182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402186:	bf00      	nop
  402188:	200008ff 	.word	0x200008ff
  40218c:	200023bc 	.word	0x200023bc
  402190:	0040955a 	.word	0x0040955a
  402194:	0040956c 	.word	0x0040956c

00402198 <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  402198:	2807      	cmp	r0, #7
  40219a:	d900      	bls.n	40219e <memp_malloc+0x6>
  40219c:	e7fe      	b.n	40219c <memp_malloc+0x4>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  40219e:	4b05      	ldr	r3, [pc, #20]	; (4021b4 <memp_malloc+0x1c>)
  4021a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  
  if (memp != NULL) {
  4021a4:	b11b      	cbz	r3, 4021ae <memp_malloc+0x16>
    memp_tab[type] = memp->next;
  4021a6:	6819      	ldr	r1, [r3, #0]
  4021a8:	4a02      	ldr	r2, [pc, #8]	; (4021b4 <memp_malloc+0x1c>)
  4021aa:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  4021ae:	4618      	mov	r0, r3
  4021b0:	4770      	bx	lr
  4021b2:	bf00      	nop
  4021b4:	200023bc 	.word	0x200023bc

004021b8 <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  4021b8:	460b      	mov	r3, r1
  4021ba:	b129      	cbz	r1, 4021c8 <memp_free+0x10>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  4021bc:	4a03      	ldr	r2, [pc, #12]	; (4021cc <memp_free+0x14>)
  4021be:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  4021c2:	6019      	str	r1, [r3, #0]
  memp_tab[type] = memp;
  4021c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  4021c8:	4770      	bx	lr
  4021ca:	bf00      	nop
  4021cc:	200023bc 	.word	0x200023bc

004021d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  4021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021d6:	4604      	mov	r4, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  4021d8:	b311      	cbz	r1, 402220 <netif_set_ipaddr+0x4c>
  4021da:	460d      	mov	r5, r1
  4021dc:	680a      	ldr	r2, [r1, #0]
  4021de:	6843      	ldr	r3, [r0, #4]
  4021e0:	429a      	cmp	r2, r3
  4021e2:	d020      	beq.n	402226 <netif_set_ipaddr+0x52>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  4021e4:	4b11      	ldr	r3, [pc, #68]	; (40222c <netif_set_ipaddr+0x58>)
  4021e6:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
  4021e8:	b158      	cbz	r0, 402202 <netif_set_ipaddr+0x2e>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4021ea:	4f11      	ldr	r7, [pc, #68]	; (402230 <netif_set_ipaddr+0x5c>)
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  4021ec:	6802      	ldr	r2, [r0, #0]
  4021ee:	6863      	ldr	r3, [r4, #4]
  4021f0:	429a      	cmp	r2, r3
  4021f2:	d103      	bne.n	4021fc <netif_set_ipaddr+0x28>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  4021f4:	68c6      	ldr	r6, [r0, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4021f6:	47b8      	blx	r7
        pcb = next;
  4021f8:	4630      	mov	r0, r6
  4021fa:	e000      	b.n	4021fe <netif_set_ipaddr+0x2a>
      } else {
        pcb = pcb->next;
  4021fc:	68c0      	ldr	r0, [r0, #12]
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
  4021fe:	2800      	cmp	r0, #0
  402200:	d1f4      	bne.n	4021ec <netif_set_ipaddr+0x18>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  402202:	4b0c      	ldr	r3, [pc, #48]	; (402234 <netif_set_ipaddr+0x60>)
  402204:	681b      	ldr	r3, [r3, #0]
  402206:	b173      	cbz	r3, 402226 <netif_set_ipaddr+0x52>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  402208:	b133      	cbz	r3, 402218 <netif_set_ipaddr+0x44>
  40220a:	681a      	ldr	r2, [r3, #0]
  40220c:	b122      	cbz	r2, 402218 <netif_set_ipaddr+0x44>
  40220e:	6861      	ldr	r1, [r4, #4]
  402210:	428a      	cmp	r2, r1
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  402212:	bf04      	itt	eq
  402214:	682a      	ldreq	r2, [r5, #0]
  402216:	601a      	streq	r2, [r3, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  402218:	68db      	ldr	r3, [r3, #12]
  40221a:	2b00      	cmp	r3, #0
  40221c:	d1f4      	bne.n	402208 <netif_set_ipaddr+0x34>
  40221e:	e002      	b.n	402226 <netif_set_ipaddr+0x52>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  402220:	2300      	movs	r3, #0
  402222:	6063      	str	r3, [r4, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  402224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  402226:	682b      	ldr	r3, [r5, #0]
  402228:	e7fb      	b.n	402222 <netif_set_ipaddr+0x4e>
  40222a:	bf00      	nop
  40222c:	20004768 	.word	0x20004768
  402230:	00403039 	.word	0x00403039
  402234:	20004770 	.word	0x20004770

00402238 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
  402238:	b570      	push	{r4, r5, r6, lr}
  40223a:	4604      	mov	r4, r0
  40223c:	4616      	mov	r6, r2
  40223e:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
  402240:	4b06      	ldr	r3, [pc, #24]	; (40225c <netif_set_addr+0x24>)
  402242:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  402244:	b10e      	cbz	r6, 40224a <netif_set_addr+0x12>
  402246:	6833      	ldr	r3, [r6, #0]
  402248:	e000      	b.n	40224c <netif_set_addr+0x14>
  40224a:	2300      	movs	r3, #0
  40224c:	60a3      	str	r3, [r4, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  ip_addr_set(&(netif->gw), gw);
  40224e:	b10d      	cbz	r5, 402254 <netif_set_addr+0x1c>
  402250:	682b      	ldr	r3, [r5, #0]
  402252:	e000      	b.n	402256 <netif_set_addr+0x1e>
  402254:	2300      	movs	r3, #0
  402256:	60e3      	str	r3, [r4, #12]
  402258:	bd70      	pop	{r4, r5, r6, pc}
  40225a:	bf00      	nop
  40225c:	004021d5 	.word	0x004021d5

00402260 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
  402260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402262:	4604      	mov	r4, r0

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  402264:	2500      	movs	r5, #0
  402266:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero(&netif->netmask);
  402268:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
  40226a:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  40226c:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  402270:	61c5      	str	r5, [r0, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  402272:	9d06      	ldr	r5, [sp, #24]
  402274:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  402276:	4e0b      	ldr	r6, [pc, #44]	; (4022a4 <netif_add+0x44>)
  402278:	7835      	ldrb	r5, [r6, #0]
  40227a:	1c6f      	adds	r7, r5, #1
  40227c:	7037      	strb	r7, [r6, #0]
  40227e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  netif->input = input;
  402282:	9d08      	ldr	r5, [sp, #32]
  402284:	6105      	str	r5, [r0, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  402286:	4d08      	ldr	r5, [pc, #32]	; (4022a8 <netif_add+0x48>)
  402288:	47a8      	blx	r5

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  40228a:	4620      	mov	r0, r4
  40228c:	9b07      	ldr	r3, [sp, #28]
  40228e:	4798      	blx	r3
  402290:	b928      	cbnz	r0, 40229e <netif_add+0x3e>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
  402292:	4b06      	ldr	r3, [pc, #24]	; (4022ac <netif_add+0x4c>)
  402294:	681a      	ldr	r2, [r3, #0]
  402296:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  402298:	601c      	str	r4, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  40229a:	4620      	mov	r0, r4
  40229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  netif_set_addr(netif, ipaddr, netmask, gw);

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
  40229e:	2000      	movs	r0, #0
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
  4022a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022a2:	bf00      	nop
  4022a4:	200023dc 	.word	0x200023dc
  4022a8:	00402239 	.word	0x00402239
  4022ac:	20004758 	.word	0x20004758

004022b0 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  4022b0:	4b01      	ldr	r3, [pc, #4]	; (4022b8 <netif_set_default+0x8>)
  4022b2:	6018      	str	r0, [r3, #0]
  4022b4:	4770      	bx	lr
  4022b6:	bf00      	nop
  4022b8:	2000475c 	.word	0x2000475c

004022bc <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
  4022bc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  4022c0:	f013 0f01 	tst.w	r3, #1
  4022c4:	d113      	bne.n	4022ee <netif_set_up+0x32>
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  4022c6:	b510      	push	{r4, lr}
  4022c8:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
    netif->flags |= NETIF_FLAG_UP;
  4022ca:	f043 0301 	orr.w	r3, r3, #1
  4022ce:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  4022d2:	69c3      	ldr	r3, [r0, #28]
  4022d4:	b103      	cbz	r3, 4022d8 <netif_set_up+0x1c>
  4022d6:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  4022d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  4022dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4022e0:	2b30      	cmp	r3, #48	; 0x30
  4022e2:	d103      	bne.n	4022ec <netif_set_up+0x30>
        etharp_gratuitous(netif);
  4022e4:	1d21      	adds	r1, r4, #4
  4022e6:	4620      	mov	r0, r4
  4022e8:	4b01      	ldr	r3, [pc, #4]	; (4022f0 <netif_set_up+0x34>)
  4022ea:	4798      	blx	r3
  4022ec:	bd10      	pop	{r4, pc}
  4022ee:	4770      	bx	lr
  4022f0:	00405485 	.word	0x00405485

004022f4 <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  4022f4:	b100      	cbz	r0, 4022f8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  4022f6:	61c1      	str	r1, [r0, #28]
  4022f8:	4770      	bx	lr
  4022fa:	bf00      	nop

004022fc <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  4022fc:	b359      	cbz	r1, 402356 <pbuf_header+0x5a>
  4022fe:	460b      	mov	r3, r1
  402300:	b358      	cbz	r0, 40235a <pbuf_header+0x5e>
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  402302:	b410      	push	{r4}
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }
 
  if (header_size_increment < 0){
  402304:	2900      	cmp	r1, #0
  402306:	da05      	bge.n	402314 <pbuf_header+0x18>
    increment_magnitude = -header_size_increment;
  402308:	424c      	negs	r4, r1
  40230a:	b2a4      	uxth	r4, r4
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  40230c:	8942      	ldrh	r2, [r0, #10]
  40230e:	42a2      	cmp	r2, r4
  402310:	d201      	bcs.n	402316 <pbuf_header+0x1a>
  402312:	e7fe      	b.n	402312 <pbuf_header+0x16>
  } else {
    increment_magnitude = header_size_increment;
  402314:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  402316:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  402318:	6842      	ldr	r2, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  40231a:	b109      	cbz	r1, 402320 <pbuf_header+0x24>
  40231c:	2903      	cmp	r1, #3
  40231e:	d106      	bne.n	40232e <pbuf_header+0x32>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  402320:	1ad2      	subs	r2, r2, r3
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  402322:	f100 0110 	add.w	r1, r0, #16
  402326:	428a      	cmp	r2, r1
  402328:	d319      	bcc.n	40235e <pbuf_header+0x62>
  payload = p->payload;

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  40232a:	6042      	str	r2, [r0, #4]
  40232c:	e00a      	b.n	402344 <pbuf_header+0x48>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  40232e:	3901      	subs	r1, #1
  402330:	b289      	uxth	r1, r1
  402332:	2901      	cmp	r1, #1
  402334:	d815      	bhi.n	402362 <pbuf_header+0x66>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  402336:	2b00      	cmp	r3, #0
  402338:	da15      	bge.n	402366 <pbuf_header+0x6a>
  40233a:	8941      	ldrh	r1, [r0, #10]
  40233c:	42a1      	cmp	r1, r4
  40233e:	d314      	bcc.n	40236a <pbuf_header+0x6e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  402340:	1ad2      	subs	r2, r2, r3
  402342:	6042      	str	r2, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  402344:	b29b      	uxth	r3, r3
  402346:	8942      	ldrh	r2, [r0, #10]
  402348:	441a      	add	r2, r3
  40234a:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  40234c:	8902      	ldrh	r2, [r0, #8]
  40234e:	4413      	add	r3, r2
  402350:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  402352:	2000      	movs	r0, #0
  402354:	e00a      	b.n	40236c <pbuf_header+0x70>
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  402356:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
  402358:	4770      	bx	lr
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  40235a:	2000      	movs	r0, #0
  40235c:	4770      	bx	lr
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
  40235e:	2001      	movs	r0, #1
  402360:	e004      	b.n	40236c <pbuf_header+0x70>
      return 1;
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  402362:	2001      	movs	r0, #1
  402364:	e002      	b.n	40236c <pbuf_header+0x70>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  402366:	2001      	movs	r0, #1
  402368:	e000      	b.n	40236c <pbuf_header+0x70>
  40236a:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
  40236c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402370:	4770      	bx	lr
  402372:	bf00      	nop

00402374 <pbuf_free>:
{
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  402374:	b328      	cbz	r0, 4023c2 <pbuf_free+0x4e>
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  402376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40237a:	4601      	mov	r1, r0
  40237c:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  40237e:	4d13      	ldr	r5, [pc, #76]	; (4023cc <pbuf_free+0x58>)
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
          memp_free(MEMP_PBUF_POOL, p);
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
  402380:	f04f 0806 	mov.w	r8, #6
  402384:	4e12      	ldr	r6, [pc, #72]	; (4023d0 <pbuf_free+0x5c>)
  402386:	e013      	b.n	4023b0 <pbuf_free+0x3c>
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  402388:	680f      	ldr	r7, [r1, #0]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  40238a:	7b0b      	ldrb	r3, [r1, #12]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  40238c:	2b03      	cmp	r3, #3
  40238e:	d102      	bne.n	402396 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
  402390:	2007      	movs	r0, #7
  402392:	47b0      	blx	r6
  402394:	e008      	b.n	4023a8 <pbuf_free+0x34>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  402396:	3b01      	subs	r3, #1
  402398:	b29b      	uxth	r3, r3
  40239a:	2b01      	cmp	r3, #1
  40239c:	d802      	bhi.n	4023a4 <pbuf_free+0x30>
          memp_free(MEMP_PBUF, p);
  40239e:	4640      	mov	r0, r8
  4023a0:	47b0      	blx	r6
  4023a2:	e001      	b.n	4023a8 <pbuf_free+0x34>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  4023a4:	4608      	mov	r0, r1
  4023a6:	47a8      	blx	r5
        }
      }
      count++;
  4023a8:	3401      	adds	r4, #1
  4023aa:	b2e4      	uxtb	r4, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  4023ac:	b15f      	cbz	r7, 4023c6 <pbuf_free+0x52>
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
  4023ae:	4639      	mov	r1, r7
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  4023b0:	89cb      	ldrh	r3, [r1, #14]
  4023b2:	3b01      	subs	r3, #1
  4023b4:	b29b      	uxth	r3, r3
  4023b6:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  4023b8:	2b00      	cmp	r3, #0
  4023ba:	d0e5      	beq.n	402388 <pbuf_free+0x14>
  4023bc:	4620      	mov	r0, r4
  4023be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (p == NULL) {
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  4023c2:	2000      	movs	r0, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  4023c4:	4770      	bx	lr
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
  4023c6:	4620      	mov	r0, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  4023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023cc:	00401eed 	.word	0x00401eed
  4023d0:	004021b9 	.word	0x004021b9

004023d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  4023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  4023d8:	2803      	cmp	r0, #3
  4023da:	f200 8091 	bhi.w	402500 <pbuf_alloc+0x12c>
  4023de:	e8df f000 	tbb	[pc, r0]
  4023e2:	0208      	.short	0x0208
  4023e4:	0604      	.short	0x0604
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  4023e6:	2622      	movs	r6, #34	; 0x22
  4023e8:	e004      	b.n	4023f4 <pbuf_alloc+0x20>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
  4023ea:	260e      	movs	r6, #14
    break;
  4023ec:	e002      	b.n	4023f4 <pbuf_alloc+0x20>
  case PBUF_RAW:
    offset = 0;
  4023ee:	2600      	movs	r6, #0
    break;
  4023f0:	e000      	b.n	4023f4 <pbuf_alloc+0x20>

  /* determine header offset */
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  4023f2:	2636      	movs	r6, #54	; 0x36
  4023f4:	4617      	mov	r7, r2
  4023f6:	4688      	mov	r8, r1
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
  4023f8:	2a03      	cmp	r2, #3
  4023fa:	f200 8084 	bhi.w	402506 <pbuf_alloc+0x132>
  4023fe:	e8df f002 	tbb	[pc, r2]
  402402:	6b51      	.short	0x6b51
  402404:	026b      	.short	0x026b
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402406:	2007      	movs	r0, #7
  402408:	4b43      	ldr	r3, [pc, #268]	; (402518 <pbuf_alloc+0x144>)
  40240a:	4798      	blx	r3
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  40240c:	4605      	mov	r5, r0
  40240e:	b920      	cbnz	r0, 40241a <pbuf_alloc+0x46>
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  402410:	2201      	movs	r2, #1
  402412:	4b42      	ldr	r3, [pc, #264]	; (40251c <pbuf_alloc+0x148>)
  402414:	701a      	strb	r2, [r3, #0]
  402416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
  40241a:	2303      	movs	r3, #3
  40241c:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  40241e:	2300      	movs	r3, #0
  402420:	6003      	str	r3, [r0, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  402422:	1983      	adds	r3, r0, r6
  402424:	3313      	adds	r3, #19
  402426:	f023 0303 	bic.w	r3, r3, #3
  40242a:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  40242c:	f8a0 8008 	strh.w	r8, [r0, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  402430:	3603      	adds	r6, #3
  402432:	f026 0603 	bic.w	r6, r6, #3
  402436:	f5c6 66c0 	rsb	r6, r6, #1536	; 0x600
  40243a:	4546      	cmp	r6, r8
  40243c:	bfa8      	it	ge
  40243e:	4646      	movge	r6, r8
  402440:	8146      	strh	r6, [r0, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  402442:	2301      	movs	r3, #1
  402444:	81c3      	strh	r3, [r0, #14]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
  402446:	b2b4      	uxth	r4, r6
  402448:	ebc4 0408 	rsb	r4, r4, r8
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  40244c:	2c00      	cmp	r4, #0
  40244e:	dd50      	ble.n	4024f2 <pbuf_alloc+0x11e>
  402450:	4681      	mov	r9, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402452:	2707      	movs	r7, #7
  402454:	4e30      	ldr	r6, [pc, #192]	; (402518 <pbuf_alloc+0x144>)
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
  402456:	f04f 0803 	mov.w	r8, #3
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  40245a:	4638      	mov	r0, r7
  40245c:	47b0      	blx	r6
      if (q == NULL) {
  40245e:	b940      	cbnz	r0, 402472 <pbuf_alloc+0x9e>
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  402460:	2201      	movs	r2, #1
  402462:	4b2e      	ldr	r3, [pc, #184]	; (40251c <pbuf_alloc+0x148>)
  402464:	701a      	strb	r2, [r3, #0]
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
      if (q == NULL) {
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
  402466:	4628      	mov	r0, r5
  402468:	4b2d      	ldr	r3, [pc, #180]	; (402520 <pbuf_alloc+0x14c>)
  40246a:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
  40246c:	2000      	movs	r0, #0
  40246e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
      q->type = type;
  402472:	f880 800c 	strb.w	r8, [r0, #12]
      q->flags = 0;
  402476:	2200      	movs	r2, #0
  402478:	7342      	strb	r2, [r0, #13]
      q->next = NULL;
  40247a:	6002      	str	r2, [r0, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  40247c:	f8c9 0000 	str.w	r0, [r9]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
  402480:	8104      	strh	r4, [r0, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  402482:	b2a2      	uxth	r2, r4
  402484:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
  402488:	bfa8      	it	ge
  40248a:	f44f 62c0 	movge.w	r2, #1536	; 0x600
  40248e:	8142      	strh	r2, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  402490:	f100 0110 	add.w	r1, r0, #16
  402494:	6041      	str	r1, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  402496:	2101      	movs	r1, #1
  402498:	81c1      	strh	r1, [r0, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  40249a:	1aa4      	subs	r4, r4, r2
      /* remember this pbuf for linkage in next iteration */
      r = q;
  40249c:	4681      	mov	r9, r0
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  40249e:	2c00      	cmp	r4, #0
  4024a0:	dcdb      	bgt.n	40245a <pbuf_alloc+0x86>
  4024a2:	e026      	b.n	4024f2 <pbuf_alloc+0x11e>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  4024a4:	f106 0013 	add.w	r0, r6, #19
  4024a8:	f020 0003 	bic.w	r0, r0, #3
  4024ac:	1ccb      	adds	r3, r1, #3
  4024ae:	f023 0303 	bic.w	r3, r3, #3
  4024b2:	4418      	add	r0, r3
  4024b4:	b280      	uxth	r0, r0
  4024b6:	4b1b      	ldr	r3, [pc, #108]	; (402524 <pbuf_alloc+0x150>)
  4024b8:	4798      	blx	r3
    if (p == NULL) {
  4024ba:	4605      	mov	r5, r0
  4024bc:	b330      	cbz	r0, 40250c <pbuf_alloc+0x138>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  4024be:	4406      	add	r6, r0
  4024c0:	3613      	adds	r6, #19
  4024c2:	f026 0603 	bic.w	r6, r6, #3
  4024c6:	6046      	str	r6, [r0, #4]
    p->len = p->tot_len = length;
  4024c8:	f8a0 8008 	strh.w	r8, [r0, #8]
  4024cc:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4024d0:	2300      	movs	r3, #0
  4024d2:	6003      	str	r3, [r0, #0]
    p->type = type;
  4024d4:	7303      	strb	r3, [r0, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  4024d6:	e00c      	b.n	4024f2 <pbuf_alloc+0x11e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  4024d8:	2006      	movs	r0, #6
  4024da:	4b0f      	ldr	r3, [pc, #60]	; (402518 <pbuf_alloc+0x144>)
  4024dc:	4798      	blx	r3
    if (p == NULL) {
  4024de:	4605      	mov	r5, r0
  4024e0:	b1b8      	cbz	r0, 402512 <pbuf_alloc+0x13e>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  4024e2:	2300      	movs	r3, #0
  4024e4:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  4024e6:	f8a0 8008 	strh.w	r8, [r0, #8]
  4024ea:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4024ee:	6003      	str	r3, [r0, #0]
    p->type = type;
  4024f0:	7307      	strb	r7, [r0, #12]
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
  4024f2:	2301      	movs	r3, #1
  4024f4:	81eb      	strh	r3, [r5, #14]
  /* set flags */
  p->flags = 0;
  4024f6:	2300      	movs	r3, #0
  4024f8:	736b      	strb	r3, [r5, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  4024fa:	4628      	mov	r0, r5
  4024fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  case PBUF_RAW:
    offset = 0;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  402500:	2000      	movs	r0, #0
  402502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->next = NULL;
    p->type = type;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  402506:	2000      	movs	r0, #0
  402508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
  40250c:	2000      	movs	r0, #0
  40250e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    if (p == NULL) {
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  402512:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
  402514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402518:	00402199 	.word	0x00402199
  40251c:	20004760 	.word	0x20004760
  402520:	00402375 	.word	0x00402375
  402524:	00402051 	.word	0x00402051

00402528 <pbuf_realloc>:
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  402528:	8902      	ldrh	r2, [r0, #8]
  40252a:	428a      	cmp	r2, r1
  40252c:	d926      	bls.n	40257c <pbuf_realloc+0x54>
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  40252e:	b538      	push	{r3, r4, r5, lr}
  402530:	4604      	mov	r4, r0

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  402532:	8943      	ldrh	r3, [r0, #10]
  402534:	4299      	cmp	r1, r3
  402536:	d90b      	bls.n	402550 <pbuf_realloc+0x28>
  402538:	460d      	mov	r5, r1
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  40253a:	1aeb      	subs	r3, r5, r3
  40253c:	b29d      	uxth	r5, r3
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
  40253e:	8923      	ldrh	r3, [r4, #8]
  402540:	1a9b      	subs	r3, r3, r2
  402542:	440b      	add	r3, r1
  402544:	8123      	strh	r3, [r4, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  402546:	6824      	ldr	r4, [r4, #0]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  402548:	8963      	ldrh	r3, [r4, #10]
  40254a:	42ab      	cmp	r3, r5
  40254c:	d3f5      	bcc.n	40253a <pbuf_realloc+0x12>
  40254e:	e000      	b.n	402552 <pbuf_realloc+0x2a>
  402550:	460d      	mov	r5, r1
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  402552:	7b22      	ldrb	r2, [r4, #12]
  402554:	b94a      	cbnz	r2, 40256a <pbuf_realloc+0x42>
  402556:	429d      	cmp	r5, r3
  402558:	d007      	beq.n	40256a <pbuf_realloc+0x42>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  40255a:	6863      	ldr	r3, [r4, #4]
  40255c:	1b1b      	subs	r3, r3, r4
  40255e:	18e9      	adds	r1, r5, r3
  402560:	b289      	uxth	r1, r1
  402562:	4620      	mov	r0, r4
  402564:	4b06      	ldr	r3, [pc, #24]	; (402580 <pbuf_realloc+0x58>)
  402566:	4798      	blx	r3
  402568:	4604      	mov	r4, r0
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  40256a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  40256c:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  40256e:	6820      	ldr	r0, [r4, #0]
  402570:	b108      	cbz	r0, 402576 <pbuf_realloc+0x4e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  402572:	4b04      	ldr	r3, [pc, #16]	; (402584 <pbuf_realloc+0x5c>)
  402574:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
  402576:	2300      	movs	r3, #0
  402578:	6023      	str	r3, [r4, #0]
  40257a:	bd38      	pop	{r3, r4, r5, pc}
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	00401f81 	.word	0x00401f81
  402584:	00402375 	.word	0x00402375

00402588 <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  402588:	4603      	mov	r3, r0
  40258a:	b130      	cbz	r0, 40259a <pbuf_clen+0x12>
  40258c:	2000      	movs	r0, #0
    ++len;
  40258e:	3001      	adds	r0, #1
  402590:	b2c0      	uxtb	r0, r0
    p = p->next;
  402592:	681b      	ldr	r3, [r3, #0]
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  402594:	2b00      	cmp	r3, #0
  402596:	d1fa      	bne.n	40258e <pbuf_clen+0x6>
  402598:	4770      	bx	lr
u8_t
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  40259a:	2000      	movs	r0, #0
  while (p != NULL) {
    ++len;
    p = p->next;
  }
  return len;
}
  40259c:	4770      	bx	lr
  40259e:	bf00      	nop

004025a0 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  4025a0:	b110      	cbz	r0, 4025a8 <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  4025a2:	89c3      	ldrh	r3, [r0, #14]
  4025a4:	3301      	adds	r3, #1
  4025a6:	81c3      	strh	r3, [r0, #14]
  4025a8:	4770      	bx	lr
  4025aa:	bf00      	nop

004025ac <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  4025ac:	b130      	cbz	r0, 4025bc <pbuf_cat+0x10>
  4025ae:	4602      	mov	r2, r0
  4025b0:	b121      	cbz	r1, 4025bc <pbuf_cat+0x10>
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  4025b2:	b410      	push	{r4}

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  4025b4:	6803      	ldr	r3, [r0, #0]
  4025b6:	b91b      	cbnz	r3, 4025c0 <pbuf_cat+0x14>
  4025b8:	4603      	mov	r3, r0
  4025ba:	e009      	b.n	4025d0 <pbuf_cat+0x24>
  4025bc:	e7fe      	b.n	4025bc <pbuf_cat+0x10>
  4025be:	4603      	mov	r3, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  4025c0:	8914      	ldrh	r4, [r2, #8]
  4025c2:	8908      	ldrh	r0, [r1, #8]
  4025c4:	4420      	add	r0, r4
  4025c6:	8110      	strh	r0, [r2, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  4025c8:	6818      	ldr	r0, [r3, #0]
  4025ca:	461a      	mov	r2, r3
  4025cc:	2800      	cmp	r0, #0
  4025ce:	d1f6      	bne.n	4025be <pbuf_cat+0x12>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  4025d0:	8918      	ldrh	r0, [r3, #8]
  4025d2:	890a      	ldrh	r2, [r1, #8]
  4025d4:	4402      	add	r2, r0
  4025d6:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  4025d8:	6019      	str	r1, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  4025da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4025de:	4770      	bx	lr

004025e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  4025e0:	b510      	push	{r4, lr}
  4025e2:	460c      	mov	r4, r1
  pbuf_cat(h, t);
  4025e4:	4b02      	ldr	r3, [pc, #8]	; (4025f0 <pbuf_chain+0x10>)
  4025e6:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  4025e8:	4620      	mov	r0, r4
  4025ea:	4b02      	ldr	r3, [pc, #8]	; (4025f4 <pbuf_chain+0x14>)
  4025ec:	4798      	blx	r3
  4025ee:	bd10      	pop	{r4, pc}
  4025f0:	004025ad 	.word	0x004025ad
  4025f4:	004025a1 	.word	0x004025a1

004025f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  4025f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  4025fc:	b130      	cbz	r0, 40260c <pbuf_copy+0x14>
  4025fe:	460d      	mov	r5, r1
  402600:	4604      	mov	r4, r0
  402602:	b119      	cbz	r1, 40260c <pbuf_copy+0x14>
  402604:	8902      	ldrh	r2, [r0, #8]
  402606:	890b      	ldrh	r3, [r1, #8]
  402608:	429a      	cmp	r2, r3
  40260a:	d200      	bcs.n	40260e <pbuf_copy+0x16>
  40260c:	e7fe      	b.n	40260c <pbuf_copy+0x14>
  40260e:	f04f 0a00 	mov.w	sl, #0
  402612:	4657      	mov	r7, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402614:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40269c <pbuf_copy+0xa4>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  402618:	46d0      	mov	r8, sl

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  40261a:	8963      	ldrh	r3, [r4, #10]
  40261c:	896a      	ldrh	r2, [r5, #10]
  40261e:	1bd8      	subs	r0, r3, r7
  402620:	ebca 0102 	rsb	r1, sl, r2
  402624:	4288      	cmp	r0, r1
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  402626:	bfa7      	ittee	ge
  402628:	460a      	movge	r2, r1
  40262a:	b296      	uxthge	r6, r2
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  40262c:	1bdb      	sublt	r3, r3, r7
  40262e:	b29e      	uxthlt	r6, r3
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402630:	6860      	ldr	r0, [r4, #4]
  402632:	6869      	ldr	r1, [r5, #4]
  402634:	4632      	mov	r2, r6
  402636:	4451      	add	r1, sl
  402638:	4438      	add	r0, r7
  40263a:	47c8      	blx	r9
    offset_to += len;
  40263c:	4437      	add	r7, r6
  40263e:	b2bf      	uxth	r7, r7
    offset_from += len;
  402640:	4456      	add	r6, sl
  402642:	fa1f fa86 	uxth.w	sl, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
  402646:	896b      	ldrh	r3, [r5, #10]
  402648:	4553      	cmp	r3, sl
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
  40264a:	bf9c      	itt	ls
  40264c:	682d      	ldrls	r5, [r5, #0]
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  40264e:	46c2      	movls	sl, r8
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  402650:	8963      	ldrh	r3, [r4, #10]
  402652:	42bb      	cmp	r3, r7
  402654:	d104      	bne.n	402660 <pbuf_copy+0x68>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
  402656:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402658:	b90c      	cbnz	r4, 40265e <pbuf_copy+0x66>
  40265a:	b1e5      	cbz	r5, 402696 <pbuf_copy+0x9e>
  40265c:	e7fe      	b.n	40265c <pbuf_copy+0x64>
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
  40265e:	4647      	mov	r7, r8
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  402660:	b175      	cbz	r5, 402680 <pbuf_copy+0x88>
  402662:	896a      	ldrh	r2, [r5, #10]
  402664:	892b      	ldrh	r3, [r5, #8]
  402666:	429a      	cmp	r2, r3
  402668:	d108      	bne.n	40267c <pbuf_copy+0x84>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  40266a:	682b      	ldr	r3, [r5, #0]
  40266c:	b133      	cbz	r3, 40267c <pbuf_copy+0x84>
  40266e:	e7fe      	b.n	40266e <pbuf_copy+0x76>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402670:	6823      	ldr	r3, [r4, #0]
  402672:	b103      	cbz	r3, 402676 <pbuf_copy+0x7e>
  402674:	e7fe      	b.n	402674 <pbuf_copy+0x7c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  402676:	2d00      	cmp	r5, #0
  402678:	d1cf      	bne.n	40261a <pbuf_copy+0x22>
  40267a:	e00c      	b.n	402696 <pbuf_copy+0x9e>
    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  40267c:	b934      	cbnz	r4, 40268c <pbuf_copy+0x94>
  40267e:	e7cc      	b.n	40261a <pbuf_copy+0x22>
  402680:	b14c      	cbz	r4, 402696 <pbuf_copy+0x9e>
  402682:	8962      	ldrh	r2, [r4, #10]
  402684:	8923      	ldrh	r3, [r4, #8]
  402686:	429a      	cmp	r2, r3
  402688:	d0f2      	beq.n	402670 <pbuf_copy+0x78>
  40268a:	e004      	b.n	402696 <pbuf_copy+0x9e>
  40268c:	8962      	ldrh	r2, [r4, #10]
  40268e:	8923      	ldrh	r3, [r4, #8]
  402690:	429a      	cmp	r2, r3
  402692:	d1c2      	bne.n	40261a <pbuf_copy+0x22>
  402694:	e7ec      	b.n	402670 <pbuf_copy+0x78>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  402696:	2000      	movs	r0, #0
  402698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40269c:	004063f5 	.word	0x004063f5

004026a0 <pbuf_copy_partial>:
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  4026a0:	b900      	cbnz	r0, 4026a4 <pbuf_copy_partial+0x4>
  4026a2:	e7fe      	b.n	4026a2 <pbuf_copy_partial+0x2>
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  4026a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026a8:	4688      	mov	r8, r1
  4026aa:	4693      	mov	fp, r2
  4026ac:	4606      	mov	r6, r0
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  4026ae:	b901      	cbnz	r1, 4026b2 <pbuf_copy_partial+0x12>
  4026b0:	e7fe      	b.n	4026b0 <pbuf_copy_partial+0x10>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  4026b2:	b34a      	cbz	r2, 402708 <pbuf_copy_partial+0x68>
  4026b4:	2500      	movs	r5, #0
  4026b6:	462f      	mov	r7, r5
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  4026b8:	f8df a058 	ldr.w	sl, [pc, #88]	; 402714 <pbuf_copy_partial+0x74>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  4026bc:	46a9      	mov	r9, r5
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    if ((offset != 0) && (offset >= p->len)) {
  4026be:	b12b      	cbz	r3, 4026cc <pbuf_copy_partial+0x2c>
  4026c0:	8972      	ldrh	r2, [r6, #10]
  4026c2:	429a      	cmp	r2, r3
  4026c4:	d802      	bhi.n	4026cc <pbuf_copy_partial+0x2c>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  4026c6:	1a9b      	subs	r3, r3, r2
  4026c8:	b29b      	uxth	r3, r3
  4026ca:	e014      	b.n	4026f6 <pbuf_copy_partial+0x56>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  4026cc:	8974      	ldrh	r4, [r6, #10]
  4026ce:	1ae4      	subs	r4, r4, r3
  4026d0:	b2a4      	uxth	r4, r4
  4026d2:	455c      	cmp	r4, fp
  4026d4:	bf28      	it	cs
  4026d6:	465c      	movcs	r4, fp
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  4026d8:	6871      	ldr	r1, [r6, #4]
  4026da:	4622      	mov	r2, r4
  4026dc:	4419      	add	r1, r3
  4026de:	eb08 0007 	add.w	r0, r8, r7
  4026e2:	47d0      	blx	sl
      copied_total += buf_copy_len;
  4026e4:	4425      	add	r5, r4
  4026e6:	b2ad      	uxth	r5, r5
      left += buf_copy_len;
  4026e8:	4427      	add	r7, r4
  4026ea:	b2bf      	uxth	r7, r7
      len -= buf_copy_len;
  4026ec:	ebc4 040b 	rsb	r4, r4, fp
  4026f0:	fa1f fb84 	uxth.w	fp, r4
      offset = 0;
  4026f4:	464b      	mov	r3, r9
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  4026f6:	6836      	ldr	r6, [r6, #0]
  4026f8:	f1bb 0f00 	cmp.w	fp, #0
  4026fc:	d007      	beq.n	40270e <pbuf_copy_partial+0x6e>
  4026fe:	2e00      	cmp	r6, #0
  402700:	d1dd      	bne.n	4026be <pbuf_copy_partial+0x1e>
  402702:	4628      	mov	r0, r5
  402704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402708:	2000      	movs	r0, #0
  40270a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40270e:	4628      	mov	r0, r5
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
  402710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402714:	004063f5 	.word	0x004063f5

00402718 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  402718:	4770      	bx	lr
  40271a:	bf00      	nop

0040271c <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  40271c:	b4f0      	push	{r4, r5, r6, r7}
  40271e:	4601      	mov	r1, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402720:	6a86      	ldr	r6, [r0, #40]	; 0x28
  402722:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
  402724:	19aa      	adds	r2, r5, r6

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402726:	6b04      	ldr	r4, [r0, #48]	; 0x30
  402728:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
  40272a:	f240 50b4 	movw	r0, #1460	; 0x5b4
  40272e:	4283      	cmp	r3, r0
  402730:	bf88      	it	hi
  402732:	4603      	movhi	r3, r0
  402734:	1b10      	subs	r0, r2, r4
  402736:	1ac3      	subs	r3, r0, r3
  402738:	2b00      	cmp	r3, #0
  40273a:	db01      	blt.n	402740 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  40273c:	85cd      	strh	r5, [r1, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  40273e:	e009      	b.n	402754 <tcp_update_rcv_ann_wnd+0x38>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  402740:	1b33      	subs	r3, r6, r4
  402742:	2b00      	cmp	r3, #0
  402744:	dd03      	ble.n	40274e <tcp_update_rcv_ann_wnd+0x32>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  402746:	2300      	movs	r3, #0
  402748:	85cb      	strh	r3, [r1, #46]	; 0x2e
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    }
    return 0;
  40274a:	4618      	mov	r0, r3
  40274c:	e002      	b.n	402754 <tcp_update_rcv_ann_wnd+0x38>
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  40274e:	1ba4      	subs	r4, r4, r6
  402750:	85cc      	strh	r4, [r1, #46]	; 0x2e
    }
    return 0;
  402752:	2000      	movs	r0, #0
  }
}
  402754:	bcf0      	pop	{r4, r5, r6, r7}
  402756:	4770      	bx	lr

00402758 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  402758:	b510      	push	{r4, lr}
  40275a:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  40275c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  40275e:	4419      	add	r1, r3
  402760:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
  402762:	f640 3368 	movw	r3, #2920	; 0xb68
  402766:	4299      	cmp	r1, r3
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  402768:	bf92      	itee	ls
  40276a:	8581      	strhls	r1, [r0, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
    pcb->rcv_wnd = TCP_WND;
  40276c:	f640 3368 	movwhi	r3, #2920	; 0xb68
  402770:	8583      	strhhi	r3, [r0, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  402772:	4b07      	ldr	r3, [pc, #28]	; (402790 <tcp_recved+0x38>)
  402774:	4798      	blx	r3

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  402776:	f240 23d9 	movw	r3, #729	; 0x2d9
  40277a:	4298      	cmp	r0, r3
  40277c:	dd06      	ble.n	40278c <tcp_recved+0x34>
    tcp_ack_now(pcb);
  40277e:	7fa3      	ldrb	r3, [r4, #30]
  402780:	f043 0302 	orr.w	r3, r3, #2
  402784:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  402786:	4620      	mov	r0, r4
  402788:	4b02      	ldr	r3, [pc, #8]	; (402794 <tcp_recved+0x3c>)
  40278a:	4798      	blx	r3
  40278c:	bd10      	pop	{r4, pc}
  40278e:	bf00      	nop
  402790:	0040271d 	.word	0x0040271d
  402794:	004048e1 	.word	0x004048e1

00402798 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  402798:	b150      	cbz	r0, 4027b0 <tcp_seg_free+0x18>
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  40279a:	b510      	push	{r4, lr}
  40279c:	4604      	mov	r4, r0
  if (seg != NULL) {
    if (seg->p != NULL) {
  40279e:	6840      	ldr	r0, [r0, #4]
  4027a0:	b108      	cbz	r0, 4027a6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
  4027a2:	4b04      	ldr	r3, [pc, #16]	; (4027b4 <tcp_seg_free+0x1c>)
  4027a4:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  4027a6:	4621      	mov	r1, r4
  4027a8:	2003      	movs	r0, #3
  4027aa:	4b03      	ldr	r3, [pc, #12]	; (4027b8 <tcp_seg_free+0x20>)
  4027ac:	4798      	blx	r3
  4027ae:	bd10      	pop	{r4, pc}
  4027b0:	4770      	bx	lr
  4027b2:	bf00      	nop
  4027b4:	00402375 	.word	0x00402375
  4027b8:	004021b9 	.word	0x004021b9

004027bc <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
  4027bc:	b148      	cbz	r0, 4027d2 <tcp_segs_free+0x16>
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  4027be:	b538      	push	{r3, r4, r5, lr}
  4027c0:	4603      	mov	r3, r0
  while (seg != NULL) {
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
  4027c2:	4d04      	ldr	r5, [pc, #16]	; (4027d4 <tcp_segs_free+0x18>)
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
    struct tcp_seg *next = seg->next;
  4027c4:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  4027c6:	4618      	mov	r0, r3
  4027c8:	47a8      	blx	r5
    seg = next;
  4027ca:	4623      	mov	r3, r4
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
  4027cc:	2c00      	cmp	r4, #0
  4027ce:	d1f9      	bne.n	4027c4 <tcp_segs_free+0x8>
  4027d0:	bd38      	pop	{r3, r4, r5, pc}
  4027d2:	4770      	bx	lr
  4027d4:	00402799 	.word	0x00402799

004027d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  4027d8:	b538      	push	{r3, r4, r5, lr}
  4027da:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  4027dc:	2003      	movs	r0, #3
  4027de:	4b08      	ldr	r3, [pc, #32]	; (402800 <tcp_seg_copy+0x28>)
  4027e0:	4798      	blx	r3
  if (cseg == NULL) {
  4027e2:	4604      	mov	r4, r0
  4027e4:	b150      	cbz	r0, 4027fc <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  4027e6:	6828      	ldr	r0, [r5, #0]
  4027e8:	6869      	ldr	r1, [r5, #4]
  4027ea:	68aa      	ldr	r2, [r5, #8]
  4027ec:	68eb      	ldr	r3, [r5, #12]
  4027ee:	6020      	str	r0, [r4, #0]
  4027f0:	6061      	str	r1, [r4, #4]
  4027f2:	60a2      	str	r2, [r4, #8]
  4027f4:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
  4027f6:	6860      	ldr	r0, [r4, #4]
  4027f8:	4b02      	ldr	r3, [pc, #8]	; (402804 <tcp_seg_copy+0x2c>)
  4027fa:	4798      	blx	r3
  return cseg;
}
  4027fc:	4620      	mov	r0, r4
  4027fe:	bd38      	pop	{r3, r4, r5, pc}
  402800:	00402199 	.word	0x00402199
  402804:	004025a1 	.word	0x004025a1

00402808 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  402808:	7e03      	ldrb	r3, [r0, #24]
  40280a:	2b01      	cmp	r3, #1
  40280c:	d91a      	bls.n	402844 <tcp_pcb_purge+0x3c>
  40280e:	2b0a      	cmp	r3, #10
  402810:	d018      	beq.n	402844 <tcp_pcb_purge+0x3c>
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  402812:	b570      	push	{r4, r5, r6, lr}
  402814:	4604      	mov	r4, r0
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  402816:	6f80      	ldr	r0, [r0, #120]	; 0x78
  402818:	b118      	cbz	r0, 402822 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  40281a:	4b0b      	ldr	r3, [pc, #44]	; (402848 <tcp_pcb_purge+0x40>)
  40281c:	4798      	blx	r3
      pcb->refused_data = NULL;
  40281e:	2300      	movs	r3, #0
  402820:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  402822:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402824:	4e09      	ldr	r6, [pc, #36]	; (40284c <tcp_pcb_purge+0x44>)
  402826:	47b0      	blx	r6
    pcb->ooseq = NULL;
  402828:	2500      	movs	r5, #0
  40282a:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  40282c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402830:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  402832:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  402834:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  402836:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402838:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  40283a:	66e5      	str	r5, [r4, #108]	; 0x6c
  40283c:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  40283e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  402842:	bd70      	pop	{r4, r5, r6, pc}
  402844:	4770      	bx	lr
  402846:	bf00      	nop
  402848:	00402375 	.word	0x00402375
  40284c:	004027bd 	.word	0x004027bd

00402850 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  402850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402854:	b083      	sub	sp, #12
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
  402856:	4ab2      	ldr	r2, [pc, #712]	; (402b20 <tcp_slowtmr+0x2d0>)
  402858:	6813      	ldr	r3, [r2, #0]
  40285a:	3301      	adds	r3, #1
  40285c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  40285e:	4ab1      	ldr	r2, [pc, #708]	; (402b24 <tcp_slowtmr+0x2d4>)
  402860:	7813      	ldrb	r3, [r2, #0]
  402862:	3301      	adds	r3, #1
  402864:	7013      	strb	r3, [r2, #0]
  while (pcb != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  402866:	4615      	mov	r5, r2
      /* We check if we should poll the connection. */
      ++prev->polltmr;
      if (prev->polltmr >= prev->pollinterval) {
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  402868:	4faf      	ldr	r7, [pc, #700]	; (402b28 <tcp_slowtmr+0x2d8>)

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  40286a:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 402b58 <tcp_slowtmr+0x308>
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
  40286e:	4baf      	ldr	r3, [pc, #700]	; (402b2c <tcp_slowtmr+0x2dc>)
  402870:	681c      	ldr	r4, [r3, #0]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  402872:	2c00      	cmp	r4, #0
  402874:	f000 8179 	beq.w	402b6a <tcp_slowtmr+0x31a>
  402878:	2600      	movs	r6, #0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  40287a:	782b      	ldrb	r3, [r5, #0]
  40287c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  402880:	429a      	cmp	r2, r3
  402882:	d101      	bne.n	402888 <tcp_slowtmr+0x38>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  402884:	68e4      	ldr	r4, [r4, #12]
      continue;
  402886:	e16d      	b.n	402b64 <tcp_slowtmr+0x314>
    }
    pcb->last_timer = tcp_timer_ctr;
  402888:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  40288c:	7e22      	ldrb	r2, [r4, #24]
  40288e:	2a02      	cmp	r2, #2
  402890:	d105      	bne.n	40289e <tcp_slowtmr+0x4e>
  402892:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402896:	2b06      	cmp	r3, #6
  402898:	f040 8189 	bne.w	402bae <tcp_slowtmr+0x35e>
  40289c:	e0a9      	b.n	4029f2 <tcp_slowtmr+0x1a2>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  40289e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  4028a2:	2b0c      	cmp	r3, #12
  4028a4:	d053      	beq.n	40294e <tcp_slowtmr+0xfe>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  4028a6:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
  4028aa:	b1c9      	cbz	r1, 4028e0 <tcp_slowtmr+0x90>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  4028ac:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  4028b0:	3301      	adds	r3, #1
  4028b2:	b2db      	uxtb	r3, r3
  4028b4:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  4028b8:	4a9d      	ldr	r2, [pc, #628]	; (402b30 <tcp_slowtmr+0x2e0>)
  4028ba:	440a      	add	r2, r1
  4028bc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  4028c0:	429a      	cmp	r2, r3
  4028c2:	d847      	bhi.n	402954 <tcp_slowtmr+0x104>
          pcb->persist_cnt = 0;
  4028c4:	2300      	movs	r3, #0
  4028c6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  4028ca:	2906      	cmp	r1, #6
            pcb->persist_backoff++;
  4028cc:	bf9c      	itt	ls
  4028ce:	3101      	addls	r1, #1
  4028d0:	f884 1095 	strbls.w	r1, [r4, #149]	; 0x95
          }
          tcp_zero_window_probe(pcb);
  4028d4:	4620      	mov	r0, r4
  4028d6:	4b97      	ldr	r3, [pc, #604]	; (402b34 <tcp_slowtmr+0x2e4>)
  4028d8:	4798      	blx	r3
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  4028da:	f04f 0800 	mov.w	r8, #0
  4028de:	e041      	b.n	402964 <tcp_slowtmr+0x114>
          }
          tcp_zero_window_probe(pcb);
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
  4028e0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  4028e4:	2900      	cmp	r1, #0
          ++pcb->rtime;
  4028e6:	bfa4      	itt	ge
  4028e8:	3101      	addge	r1, #1
  4028ea:	86a1      	strhge	r1, [r4, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  4028ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4028ee:	b3a1      	cbz	r1, 40295a <tcp_slowtmr+0x10a>
  4028f0:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
  4028f4:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
  4028f8:	4288      	cmp	r0, r1
  4028fa:	db31      	blt.n	402960 <tcp_slowtmr+0x110>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  4028fc:	2a02      	cmp	r2, #2
  4028fe:	d00b      	beq.n	402918 <tcp_slowtmr+0xc8>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  402900:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  402904:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  402908:	eb02 02e1 	add.w	r2, r2, r1, asr #3
  40290c:	498a      	ldr	r1, [pc, #552]	; (402b38 <tcp_slowtmr+0x2e8>)
  40290e:	5ccb      	ldrb	r3, [r1, r3]
  402910:	fa02 f303 	lsl.w	r3, r2, r3
  402914:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  402918:	2300      	movs	r3, #0
  40291a:	86a3      	strh	r3, [r4, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
  40291c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  402920:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  402924:	4293      	cmp	r3, r2
  402926:	bf28      	it	cs
  402928:	4613      	movcs	r3, r2
  40292a:	085b      	lsrs	r3, r3, #1
  40292c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  402930:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
  402932:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            pcb->ssthresh = (pcb->mss << 1);
  402936:	bfbc      	itt	lt
  402938:	0053      	lsllt	r3, r2, #1
  40293a:	f8a4 304e 	strhlt.w	r3, [r4, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  40293e:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  402942:	4620      	mov	r0, r4
  402944:	4b7d      	ldr	r3, [pc, #500]	; (402b3c <tcp_slowtmr+0x2ec>)
  402946:	4798      	blx	r3
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  402948:	f04f 0800 	mov.w	r8, #0
  40294c:	e00a      	b.n	402964 <tcp_slowtmr+0x114>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
      ++pcb_remove;
  40294e:	f04f 0801 	mov.w	r8, #1
  402952:	e007      	b.n	402964 <tcp_slowtmr+0x114>
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  402954:	f04f 0800 	mov.w	r8, #0
  402958:	e004      	b.n	402964 <tcp_slowtmr+0x114>
  40295a:	f04f 0800 	mov.w	r8, #0
  40295e:	e001      	b.n	402964 <tcp_slowtmr+0x114>
  402960:	f04f 0800 	mov.w	r8, #0
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  402964:	7e23      	ldrb	r3, [r4, #24]
  402966:	2b06      	cmp	r3, #6
  402968:	d110      	bne.n	40298c <tcp_slowtmr+0x13c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  40296a:	7fa3      	ldrb	r3, [r4, #30]
  40296c:	f013 0f10 	tst.w	r3, #16
  402970:	f000 8121 	beq.w	402bb6 <tcp_slowtmr+0x366>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  402974:	4b6a      	ldr	r3, [pc, #424]	; (402b20 <tcp_slowtmr+0x2d0>)
  402976:	681b      	ldr	r3, [r3, #0]
  402978:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40297a:	1a9b      	subs	r3, r3, r2
  40297c:	2b28      	cmp	r3, #40	; 0x28
  40297e:	f240 811a 	bls.w	402bb6 <tcp_slowtmr+0x366>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  402982:	f108 0801 	add.w	r8, r8, #1
  402986:	fa5f f888 	uxtb.w	r8, r8
  40298a:	e114      	b.n	402bb6 <tcp_slowtmr+0x366>
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  40298c:	7a22      	ldrb	r2, [r4, #8]
  40298e:	f012 0f08 	tst.w	r2, #8
  402992:	d033      	beq.n	4029fc <tcp_slowtmr+0x1ac>
  402994:	2b04      	cmp	r3, #4
  402996:	d001      	beq.n	40299c <tcp_slowtmr+0x14c>
       ((pcb->state == ESTABLISHED) ||
  402998:	2b07      	cmp	r3, #7
  40299a:	d132      	bne.n	402a02 <tcp_slowtmr+0x1b2>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  40299c:	4b60      	ldr	r3, [pc, #384]	; (402b20 <tcp_slowtmr+0x2d0>)
  40299e:	681a      	ldr	r2, [r3, #0]
  4029a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4029a2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  4029a4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  4029a8:	f500 2324 	add.w	r3, r0, #671744	; 0xa4000
  4029ac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
  4029b0:	fbab 1303 	umull	r1, r3, fp, r3
  4029b4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  4029b8:	d906      	bls.n	4029c8 <tcp_slowtmr+0x178>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
  4029ba:	f108 0801 	add.w	r8, r8, #1
  4029be:	fa5f f888 	uxtb.w	r8, r8
        ++pcb_reset;
  4029c2:	f04f 0901 	mov.w	r9, #1
  4029c6:	e026      	b.n	402a16 <tcp_slowtmr+0x1c6>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  4029c8:	f894 1096 	ldrb.w	r1, [r4, #150]	; 0x96
  4029cc:	4b5c      	ldr	r3, [pc, #368]	; (402b40 <tcp_slowtmr+0x2f0>)
  4029ce:	fb03 0301 	mla	r3, r3, r1, r0
  4029d2:	fbab 1303 	umull	r1, r3, fp, r3
  4029d6:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  4029da:	d915      	bls.n	402a08 <tcp_slowtmr+0x1b8>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
  4029dc:	4620      	mov	r0, r4
  4029de:	4b59      	ldr	r3, [pc, #356]	; (402b44 <tcp_slowtmr+0x2f4>)
  4029e0:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  4029e2:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  4029e6:	3301      	adds	r3, #1
  4029e8:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  4029ec:	f04f 0900 	mov.w	r9, #0
  4029f0:	e011      	b.n	402a16 <tcp_slowtmr+0x1c6>
  4029f2:	f04f 0900 	mov.w	r9, #0
  4029f6:	f04f 0801 	mov.w	r8, #1
  4029fa:	e00c      	b.n	402a16 <tcp_slowtmr+0x1c6>
  4029fc:	f04f 0900 	mov.w	r9, #0
  402a00:	e009      	b.n	402a16 <tcp_slowtmr+0x1c6>
  402a02:	f04f 0900 	mov.w	r9, #0
  402a06:	e006      	b.n	402a16 <tcp_slowtmr+0x1c6>
  402a08:	f04f 0900 	mov.w	r9, #0
  402a0c:	e003      	b.n	402a16 <tcp_slowtmr+0x1c6>
  402a0e:	f04f 0900 	mov.w	r9, #0

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  402a12:	f04f 0801 	mov.w	r8, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  402a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402a18:	b910      	cbnz	r0, 402a20 <tcp_slowtmr+0x1d0>
  402a1a:	e010      	b.n	402a3e <tcp_slowtmr+0x1ee>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  402a1c:	f04f 0900 	mov.w	r9, #0
    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  402a20:	4b3f      	ldr	r3, [pc, #252]	; (402b20 <tcp_slowtmr+0x2d0>)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  402a22:	681b      	ldr	r3, [r3, #0]
  402a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402a26:	1a9a      	subs	r2, r3, r2
  402a28:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  402a2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402a30:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  402a34:	d303      	bcc.n	402a3e <tcp_slowtmr+0x1ee>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
  402a36:	4b44      	ldr	r3, [pc, #272]	; (402b48 <tcp_slowtmr+0x2f8>)
  402a38:	4798      	blx	r3
      pcb->ooseq = NULL;
  402a3a:	2300      	movs	r3, #0
  402a3c:	6763      	str	r3, [r4, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  402a3e:	7e23      	ldrb	r3, [r4, #24]
  402a40:	2b03      	cmp	r3, #3
  402a42:	d10a      	bne.n	402a5a <tcp_slowtmr+0x20a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  402a44:	4b36      	ldr	r3, [pc, #216]	; (402b20 <tcp_slowtmr+0x2d0>)
  402a46:	681b      	ldr	r3, [r3, #0]
  402a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402a4a:	1a9b      	subs	r3, r3, r2
  402a4c:	2b28      	cmp	r3, #40	; 0x28
  402a4e:	d910      	bls.n	402a72 <tcp_slowtmr+0x222>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  402a50:	f108 0801 	add.w	r8, r8, #1
  402a54:	fa5f f888 	uxtb.w	r8, r8
  402a58:	e00b      	b.n	402a72 <tcp_slowtmr+0x222>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  402a5a:	2b09      	cmp	r3, #9
  402a5c:	d109      	bne.n	402a72 <tcp_slowtmr+0x222>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402a5e:	4b30      	ldr	r3, [pc, #192]	; (402b20 <tcp_slowtmr+0x2d0>)
  402a60:	681b      	ldr	r3, [r3, #0]
  402a62:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402a64:	1a9b      	subs	r3, r3, r2
  402a66:	2bf0      	cmp	r3, #240	; 0xf0
        ++pcb_remove;
  402a68:	bf84      	itt	hi
  402a6a:	f108 0801 	addhi.w	r8, r8, #1
  402a6e:	fa5f f888 	uxtbhi.w	r8, r8
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  402a72:	f1b8 0f00 	cmp.w	r8, #0
  402a76:	d030      	beq.n	402ada <tcp_slowtmr+0x28a>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
  402a78:	4620      	mov	r0, r4
  402a7a:	4b34      	ldr	r3, [pc, #208]	; (402b4c <tcp_slowtmr+0x2fc>)
  402a7c:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  402a7e:	b116      	cbz	r6, 402a86 <tcp_slowtmr+0x236>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
  402a80:	68e3      	ldr	r3, [r4, #12]
  402a82:	60f3      	str	r3, [r6, #12]
  402a84:	e002      	b.n	402a8c <tcp_slowtmr+0x23c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
  402a86:	68e3      	ldr	r3, [r4, #12]
  402a88:	4a28      	ldr	r2, [pc, #160]	; (402b2c <tcp_slowtmr+0x2dc>)
  402a8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
  402a8c:	f1b9 0f00 	cmp.w	r9, #0
  402a90:	d00a      	beq.n	402aa8 <tcp_slowtmr+0x258>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  402a92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  402a94:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402a96:	8ba3      	ldrh	r3, [r4, #28]
  402a98:	9301      	str	r3, [sp, #4]
  402a9a:	8b63      	ldrh	r3, [r4, #26]
  402a9c:	9300      	str	r3, [sp, #0]
  402a9e:	1d23      	adds	r3, r4, #4
  402aa0:	4622      	mov	r2, r4
  402aa2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402b5c <tcp_slowtmr+0x30c>
  402aa6:	47c0      	blx	r8
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
  402aa8:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
  402aac:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb2 = pcb;
      pcb = pcb->next;
  402ab0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  402ab4:	4621      	mov	r1, r4
  402ab6:	2001      	movs	r0, #1
  402ab8:	4b25      	ldr	r3, [pc, #148]	; (402b50 <tcp_slowtmr+0x300>)
  402aba:	4798      	blx	r3

      tcp_active_pcbs_changed = 0;
  402abc:	2300      	movs	r3, #0
  402abe:	703b      	strb	r3, [r7, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  402ac0:	f1b8 0f00 	cmp.w	r8, #0
  402ac4:	d027      	beq.n	402b16 <tcp_slowtmr+0x2c6>
  402ac6:	f06f 0109 	mvn.w	r1, #9
  402aca:	4650      	mov	r0, sl
  402acc:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  402ace:	783b      	ldrb	r3, [r7, #0]
  402ad0:	2b00      	cmp	r3, #0
  402ad2:	f47f aecc 	bne.w	40286e <tcp_slowtmr+0x1e>
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
  402ad6:	464c      	mov	r4, r9
  402ad8:	e044      	b.n	402b64 <tcp_slowtmr+0x314>
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  402ada:	f8d4 800c 	ldr.w	r8, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  402ade:	7fe3      	ldrb	r3, [r4, #31]
  402ae0:	3301      	adds	r3, #1
  402ae2:	b2db      	uxtb	r3, r3
  402ae4:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
  402ae6:	f894 2020 	ldrb.w	r2, [r4, #32]
  402aea:	429a      	cmp	r2, r3
  402aec:	d815      	bhi.n	402b1a <tcp_slowtmr+0x2ca>
        prev->polltmr = 0;
  402aee:	2300      	movs	r3, #0
  402af0:	77e3      	strb	r3, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  402af2:	703b      	strb	r3, [r7, #0]
        TCP_EVENT_POLL(prev, err);
  402af4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  402af8:	b13b      	cbz	r3, 402b0a <tcp_slowtmr+0x2ba>
  402afa:	4621      	mov	r1, r4
  402afc:	6920      	ldr	r0, [r4, #16]
  402afe:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  402b00:	783b      	ldrb	r3, [r7, #0]
  402b02:	2b00      	cmp	r3, #0
  402b04:	f47f aeb3 	bne.w	40286e <tcp_slowtmr+0x1e>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  402b08:	bb50      	cbnz	r0, 402b60 <tcp_slowtmr+0x310>
          tcp_output(prev);
  402b0a:	4620      	mov	r0, r4
  402b0c:	4b11      	ldr	r3, [pc, #68]	; (402b54 <tcp_slowtmr+0x304>)
  402b0e:	4798      	blx	r3
  402b10:	4626      	mov	r6, r4
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  402b12:	4644      	mov	r4, r8
  402b14:	e026      	b.n	402b64 <tcp_slowtmr+0x314>
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
  402b16:	464c      	mov	r4, r9
  402b18:	e024      	b.n	402b64 <tcp_slowtmr+0x314>
  402b1a:	4626      	mov	r6, r4
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  402b1c:	4644      	mov	r4, r8
  402b1e:	e021      	b.n	402b64 <tcp_slowtmr+0x314>
  402b20:	2000476c 	.word	0x2000476c
  402b24:	200023de 	.word	0x200023de
  402b28:	20004764 	.word	0x20004764
  402b2c:	20004768 	.word	0x20004768
  402b30:	0040958c 	.word	0x0040958c
  402b34:	00404d91 	.word	0x00404d91
  402b38:	0040957c 	.word	0x0040957c
  402b3c:	00404c39 	.word	0x00404c39
  402b40:	000124f8 	.word	0x000124f8
  402b44:	00404d25 	.word	0x00404d25
  402b48:	004027bd 	.word	0x004027bd
  402b4c:	00402809 	.word	0x00402809
  402b50:	004021b9 	.word	0x004021b9
  402b54:	004048e1 	.word	0x004048e1
  402b58:	10624dd3 	.word	0x10624dd3
  402b5c:	00404b95 	.word	0x00404b95
  402b60:	4626      	mov	r6, r4
  402b62:	4644      	mov	r4, r8
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  402b64:	2c00      	cmp	r4, #0
  402b66:	f47f ae88 	bne.w	40287a <tcp_slowtmr+0x2a>
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  402b6a:	4b18      	ldr	r3, [pc, #96]	; (402bcc <tcp_slowtmr+0x37c>)
  402b6c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  402b6e:	b34c      	cbz	r4, 402bc4 <tcp_slowtmr+0x374>
  402b70:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402b72:	4e17      	ldr	r6, [pc, #92]	; (402bd0 <tcp_slowtmr+0x380>)


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  402b74:	f8df 8060 	ldr.w	r8, [pc, #96]	; 402bd8 <tcp_slowtmr+0x388>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
  402b78:	4f16      	ldr	r7, [pc, #88]	; (402bd4 <tcp_slowtmr+0x384>)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  402b7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402b7c:	6833      	ldr	r3, [r6, #0]
  402b7e:	1a9b      	subs	r3, r3, r2
  402b80:	2bf0      	cmp	r3, #240	; 0xf0
  402b82:	d90f      	bls.n	402ba4 <tcp_slowtmr+0x354>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  402b84:	4620      	mov	r0, r4
  402b86:	47c0      	blx	r8
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  402b88:	b115      	cbz	r5, 402b90 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
  402b8a:	68e3      	ldr	r3, [r4, #12]
  402b8c:	60eb      	str	r3, [r5, #12]
  402b8e:	e002      	b.n	402b96 <tcp_slowtmr+0x346>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
  402b90:	68e2      	ldr	r2, [r4, #12]
  402b92:	4b0e      	ldr	r3, [pc, #56]	; (402bcc <tcp_slowtmr+0x37c>)
  402b94:	601a      	str	r2, [r3, #0]
      }
      pcb2 = pcb;
      pcb = pcb->next;
  402b96:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  402b9a:	4621      	mov	r1, r4
  402b9c:	2001      	movs	r0, #1
  402b9e:	47b8      	blx	r7
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
  402ba0:	464c      	mov	r4, r9
  402ba2:	e001      	b.n	402ba8 <tcp_slowtmr+0x358>
      memp_free(MEMP_TCP_PCB, pcb2);
    } else {
      prev = pcb;
      pcb = pcb->next;
  402ba4:	4625      	mov	r5, r4
  402ba6:	68e4      	ldr	r4, [r4, #12]

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
  402ba8:	2c00      	cmp	r4, #0
  402baa:	d1e6      	bne.n	402b7a <tcp_slowtmr+0x32a>
  402bac:	e00a      	b.n	402bc4 <tcp_slowtmr+0x374>

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  402bae:	2b0c      	cmp	r3, #12
  402bb0:	f47f ae79 	bne.w	4028a6 <tcp_slowtmr+0x56>
  402bb4:	e72b      	b.n	402a0e <tcp_slowtmr+0x1be>

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  402bb6:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402bb8:	2800      	cmp	r0, #0
  402bba:	f47f af2f 	bne.w	402a1c <tcp_slowtmr+0x1cc>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  402bbe:	f04f 0900 	mov.w	r9, #0
  402bc2:	e756      	b.n	402a72 <tcp_slowtmr+0x222>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
  402bc4:	b003      	add	sp, #12
  402bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bca:	bf00      	nop
  402bcc:	2000477c 	.word	0x2000477c
  402bd0:	2000476c 	.word	0x2000476c
  402bd4:	004021b9 	.word	0x004021b9
  402bd8:	00402809 	.word	0x00402809

00402bdc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  402bdc:	b510      	push	{r4, lr}
  402bde:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  402be0:	6802      	ldr	r2, [r0, #0]
  402be2:	428a      	cmp	r2, r1
  402be4:	d102      	bne.n	402bec <tcp_pcb_remove+0x10>
  402be6:	68d3      	ldr	r3, [r2, #12]
  402be8:	6003      	str	r3, [r0, #0]
  402bea:	e016      	b.n	402c1a <tcp_pcb_remove+0x3e>
  402bec:	4b16      	ldr	r3, [pc, #88]	; (402c48 <tcp_pcb_remove+0x6c>)
  402bee:	601a      	str	r2, [r3, #0]
  402bf0:	b19a      	cbz	r2, 402c1a <tcp_pcb_remove+0x3e>
  402bf2:	68d3      	ldr	r3, [r2, #12]
  402bf4:	4299      	cmp	r1, r3
  402bf6:	d10b      	bne.n	402c10 <tcp_pcb_remove+0x34>
  402bf8:	e005      	b.n	402c06 <tcp_pcb_remove+0x2a>
  402bfa:	68da      	ldr	r2, [r3, #12]
  402bfc:	4294      	cmp	r4, r2
  402bfe:	d106      	bne.n	402c0e <tcp_pcb_remove+0x32>
  402c00:	4a11      	ldr	r2, [pc, #68]	; (402c48 <tcp_pcb_remove+0x6c>)
  402c02:	6013      	str	r3, [r2, #0]
  402c04:	e000      	b.n	402c08 <tcp_pcb_remove+0x2c>
  402c06:	4613      	mov	r3, r2
  402c08:	68e2      	ldr	r2, [r4, #12]
  402c0a:	60da      	str	r2, [r3, #12]
  402c0c:	e005      	b.n	402c1a <tcp_pcb_remove+0x3e>
  402c0e:	4613      	mov	r3, r2
  402c10:	2b00      	cmp	r3, #0
  402c12:	d1f2      	bne.n	402bfa <tcp_pcb_remove+0x1e>
  402c14:	2200      	movs	r2, #0
  402c16:	4b0c      	ldr	r3, [pc, #48]	; (402c48 <tcp_pcb_remove+0x6c>)
  402c18:	601a      	str	r2, [r3, #0]
  402c1a:	2300      	movs	r3, #0
  402c1c:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  402c1e:	4620      	mov	r0, r4
  402c20:	4b0a      	ldr	r3, [pc, #40]	; (402c4c <tcp_pcb_remove+0x70>)
  402c22:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  402c24:	7e23      	ldrb	r3, [r4, #24]
  402c26:	2b0a      	cmp	r3, #10
  402c28:	d00b      	beq.n	402c42 <tcp_pcb_remove+0x66>
  402c2a:	2b01      	cmp	r3, #1
  402c2c:	d009      	beq.n	402c42 <tcp_pcb_remove+0x66>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  402c2e:	7fa3      	ldrb	r3, [r4, #30]

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
  402c30:	f013 0f01 	tst.w	r3, #1
  402c34:	d005      	beq.n	402c42 <tcp_pcb_remove+0x66>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
  402c36:	f043 0302 	orr.w	r3, r3, #2
  402c3a:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  402c3c:	4620      	mov	r0, r4
  402c3e:	4b04      	ldr	r3, [pc, #16]	; (402c50 <tcp_pcb_remove+0x74>)
  402c40:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  402c42:	2300      	movs	r3, #0
  402c44:	7623      	strb	r3, [r4, #24]
  402c46:	bd10      	pop	{r4, pc}
  402c48:	20004774 	.word	0x20004774
  402c4c:	00402809 	.word	0x00402809
  402c50:	004048e1 	.word	0x004048e1

00402c54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  402c54:	b530      	push	{r4, r5, lr}
  402c56:	b083      	sub	sp, #12
  402c58:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  402c5a:	2900      	cmp	r1, #0
  402c5c:	f000 80ac 	beq.w	402db8 <tcp_close_shutdown+0x164>
  402c60:	7e03      	ldrb	r3, [r0, #24]
  402c62:	2b04      	cmp	r3, #4
  402c64:	d002      	beq.n	402c6c <tcp_close_shutdown+0x18>
  402c66:	2b07      	cmp	r3, #7
  402c68:	f040 80a6 	bne.w	402db8 <tcp_close_shutdown+0x164>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  402c6c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  402c6e:	b92b      	cbnz	r3, 402c7c <tcp_close_shutdown+0x28>
  402c70:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  402c72:	f640 3368 	movw	r3, #2920	; 0xb68
  402c76:	429a      	cmp	r2, r3
  402c78:	f000 809e 	beq.w	402db8 <tcp_close_shutdown+0x164>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  402c7c:	8ba3      	ldrh	r3, [r4, #28]
  402c7e:	9301      	str	r3, [sp, #4]
  402c80:	8b63      	ldrh	r3, [r4, #26]
  402c82:	9300      	str	r3, [sp, #0]
  402c84:	1d23      	adds	r3, r4, #4
  402c86:	4622      	mov	r2, r4
  402c88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  402c8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402c8c:	4d5a      	ldr	r5, [pc, #360]	; (402df8 <tcp_close_shutdown+0x1a4>)
  402c8e:	47a8      	blx	r5
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  402c90:	4620      	mov	r0, r4
  402c92:	4b5a      	ldr	r3, [pc, #360]	; (402dfc <tcp_close_shutdown+0x1a8>)
  402c94:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  402c96:	4b5a      	ldr	r3, [pc, #360]	; (402e00 <tcp_close_shutdown+0x1ac>)
  402c98:	681a      	ldr	r2, [r3, #0]
  402c9a:	4294      	cmp	r4, r2
  402c9c:	d102      	bne.n	402ca4 <tcp_close_shutdown+0x50>
  402c9e:	68e2      	ldr	r2, [r4, #12]
  402ca0:	601a      	str	r2, [r3, #0]
  402ca2:	e016      	b.n	402cd2 <tcp_close_shutdown+0x7e>
  402ca4:	4b57      	ldr	r3, [pc, #348]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402ca6:	601a      	str	r2, [r3, #0]
  402ca8:	b19a      	cbz	r2, 402cd2 <tcp_close_shutdown+0x7e>
  402caa:	68d3      	ldr	r3, [r2, #12]
  402cac:	429c      	cmp	r4, r3
  402cae:	d10b      	bne.n	402cc8 <tcp_close_shutdown+0x74>
  402cb0:	e005      	b.n	402cbe <tcp_close_shutdown+0x6a>
  402cb2:	68da      	ldr	r2, [r3, #12]
  402cb4:	4294      	cmp	r4, r2
  402cb6:	d106      	bne.n	402cc6 <tcp_close_shutdown+0x72>
  402cb8:	4a52      	ldr	r2, [pc, #328]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402cba:	6013      	str	r3, [r2, #0]
  402cbc:	e000      	b.n	402cc0 <tcp_close_shutdown+0x6c>
  402cbe:	4613      	mov	r3, r2
  402cc0:	68e2      	ldr	r2, [r4, #12]
  402cc2:	60da      	str	r2, [r3, #12]
  402cc4:	e005      	b.n	402cd2 <tcp_close_shutdown+0x7e>
  402cc6:	4613      	mov	r3, r2
  402cc8:	2b00      	cmp	r3, #0
  402cca:	d1f2      	bne.n	402cb2 <tcp_close_shutdown+0x5e>
  402ccc:	2200      	movs	r2, #0
  402cce:	4b4d      	ldr	r3, [pc, #308]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402cd0:	601a      	str	r2, [r3, #0]
  402cd2:	2300      	movs	r3, #0
  402cd4:	60e3      	str	r3, [r4, #12]
  402cd6:	2201      	movs	r2, #1
  402cd8:	4b4b      	ldr	r3, [pc, #300]	; (402e08 <tcp_close_shutdown+0x1b4>)
  402cda:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  402cdc:	7e23      	ldrb	r3, [r4, #24]
  402cde:	2b04      	cmp	r3, #4
  402ce0:	d109      	bne.n	402cf6 <tcp_close_shutdown+0xa2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  402ce2:	230a      	movs	r3, #10
  402ce4:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  402ce6:	4b49      	ldr	r3, [pc, #292]	; (402e0c <tcp_close_shutdown+0x1b8>)
  402ce8:	681a      	ldr	r2, [r3, #0]
  402cea:	60e2      	str	r2, [r4, #12]
  402cec:	601c      	str	r4, [r3, #0]
  402cee:	4b48      	ldr	r3, [pc, #288]	; (402e10 <tcp_close_shutdown+0x1bc>)
  402cf0:	4798      	blx	r3
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
      }
      return ERR_OK;
  402cf2:	2000      	movs	r0, #0
  402cf4:	e07d      	b.n	402df2 <tcp_close_shutdown+0x19e>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
  402cf6:	4621      	mov	r1, r4
  402cf8:	2001      	movs	r0, #1
  402cfa:	4b46      	ldr	r3, [pc, #280]	; (402e14 <tcp_close_shutdown+0x1c0>)
  402cfc:	4798      	blx	r3
      }
      return ERR_OK;
  402cfe:	2000      	movs	r0, #0
  402d00:	e077      	b.n	402df2 <tcp_close_shutdown+0x19e>
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
  402d02:	8b63      	ldrh	r3, [r4, #26]
  402d04:	b1fb      	cbz	r3, 402d46 <tcp_close_shutdown+0xf2>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  402d06:	4b44      	ldr	r3, [pc, #272]	; (402e18 <tcp_close_shutdown+0x1c4>)
  402d08:	681a      	ldr	r2, [r3, #0]
  402d0a:	4294      	cmp	r4, r2
  402d0c:	d102      	bne.n	402d14 <tcp_close_shutdown+0xc0>
  402d0e:	68e2      	ldr	r2, [r4, #12]
  402d10:	601a      	str	r2, [r3, #0]
  402d12:	e016      	b.n	402d42 <tcp_close_shutdown+0xee>
  402d14:	4b3b      	ldr	r3, [pc, #236]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402d16:	601a      	str	r2, [r3, #0]
  402d18:	b19a      	cbz	r2, 402d42 <tcp_close_shutdown+0xee>
  402d1a:	68d3      	ldr	r3, [r2, #12]
  402d1c:	429c      	cmp	r4, r3
  402d1e:	d10b      	bne.n	402d38 <tcp_close_shutdown+0xe4>
  402d20:	e005      	b.n	402d2e <tcp_close_shutdown+0xda>
  402d22:	68da      	ldr	r2, [r3, #12]
  402d24:	4294      	cmp	r4, r2
  402d26:	d106      	bne.n	402d36 <tcp_close_shutdown+0xe2>
  402d28:	4a36      	ldr	r2, [pc, #216]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402d2a:	6013      	str	r3, [r2, #0]
  402d2c:	e000      	b.n	402d30 <tcp_close_shutdown+0xdc>
  402d2e:	4613      	mov	r3, r2
  402d30:	68e2      	ldr	r2, [r4, #12]
  402d32:	60da      	str	r2, [r3, #12]
  402d34:	e005      	b.n	402d42 <tcp_close_shutdown+0xee>
  402d36:	4613      	mov	r3, r2
  402d38:	2b00      	cmp	r3, #0
  402d3a:	d1f2      	bne.n	402d22 <tcp_close_shutdown+0xce>
  402d3c:	2200      	movs	r2, #0
  402d3e:	4b31      	ldr	r3, [pc, #196]	; (402e04 <tcp_close_shutdown+0x1b0>)
  402d40:	601a      	str	r2, [r3, #0]
  402d42:	2300      	movs	r3, #0
  402d44:	60e3      	str	r3, [r4, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  402d46:	4621      	mov	r1, r4
  402d48:	2001      	movs	r0, #1
  402d4a:	4b32      	ldr	r3, [pc, #200]	; (402e14 <tcp_close_shutdown+0x1c0>)
  402d4c:	4798      	blx	r3
    pcb = NULL;
    break;
  402d4e:	e049      	b.n	402de4 <tcp_close_shutdown+0x190>
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  402d50:	4621      	mov	r1, r4
  402d52:	4832      	ldr	r0, [pc, #200]	; (402e1c <tcp_close_shutdown+0x1c8>)
  402d54:	4b32      	ldr	r3, [pc, #200]	; (402e20 <tcp_close_shutdown+0x1cc>)
  402d56:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  402d58:	4621      	mov	r1, r4
  402d5a:	2002      	movs	r0, #2
  402d5c:	4b2d      	ldr	r3, [pc, #180]	; (402e14 <tcp_close_shutdown+0x1c0>)
  402d5e:	4798      	blx	r3
    pcb = NULL;
    break;
  402d60:	e040      	b.n	402de4 <tcp_close_shutdown+0x190>
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
  402d62:	4621      	mov	r1, r4
  402d64:	4826      	ldr	r0, [pc, #152]	; (402e00 <tcp_close_shutdown+0x1ac>)
  402d66:	4b2e      	ldr	r3, [pc, #184]	; (402e20 <tcp_close_shutdown+0x1cc>)
  402d68:	4798      	blx	r3
  402d6a:	2001      	movs	r0, #1
  402d6c:	4b26      	ldr	r3, [pc, #152]	; (402e08 <tcp_close_shutdown+0x1b4>)
  402d6e:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  402d70:	4621      	mov	r1, r4
  402d72:	4b28      	ldr	r3, [pc, #160]	; (402e14 <tcp_close_shutdown+0x1c0>)
  402d74:	4798      	blx	r3
    pcb = NULL;
    snmp_inc_tcpattemptfails();
    break;
  402d76:	e035      	b.n	402de4 <tcp_close_shutdown+0x190>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  402d78:	4620      	mov	r0, r4
  402d7a:	4b2a      	ldr	r3, [pc, #168]	; (402e24 <tcp_close_shutdown+0x1d0>)
  402d7c:	4798      	blx	r3
    if (err == ERR_OK) {
  402d7e:	4603      	mov	r3, r0
  402d80:	2800      	cmp	r0, #0
  402d82:	d135      	bne.n	402df0 <tcp_close_shutdown+0x19c>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  402d84:	2305      	movs	r3, #5
  402d86:	7623      	strb	r3, [r4, #24]
  402d88:	e02e      	b.n	402de8 <tcp_close_shutdown+0x194>
    }
    break;
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  402d8a:	4620      	mov	r0, r4
  402d8c:	4b25      	ldr	r3, [pc, #148]	; (402e24 <tcp_close_shutdown+0x1d0>)
  402d8e:	4798      	blx	r3
    if (err == ERR_OK) {
  402d90:	4603      	mov	r3, r0
  402d92:	bb68      	cbnz	r0, 402df0 <tcp_close_shutdown+0x19c>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  402d94:	2305      	movs	r3, #5
  402d96:	7623      	strb	r3, [r4, #24]
  402d98:	e026      	b.n	402de8 <tcp_close_shutdown+0x194>
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  402d9a:	4620      	mov	r0, r4
  402d9c:	4b21      	ldr	r3, [pc, #132]	; (402e24 <tcp_close_shutdown+0x1d0>)
  402d9e:	4798      	blx	r3
    if (err == ERR_OK) {
  402da0:	4603      	mov	r3, r0
  402da2:	bb28      	cbnz	r0, 402df0 <tcp_close_shutdown+0x19c>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  402da4:	2309      	movs	r3, #9
  402da6:	7623      	strb	r3, [r4, #24]
  402da8:	e01e      	b.n	402de8 <tcp_close_shutdown+0x194>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  402daa:	4620      	mov	r0, r4
  402dac:	4b1e      	ldr	r3, [pc, #120]	; (402e28 <tcp_close_shutdown+0x1d4>)
  402dae:	4798      	blx	r3
  }
  return err;
  402db0:	2000      	movs	r0, #0
  402db2:	e01e      	b.n	402df2 <tcp_close_shutdown+0x19e>
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  402db4:	2000      	movs	r0, #0
  402db6:	e01c      	b.n	402df2 <tcp_close_shutdown+0x19e>
      }
      return ERR_OK;
    }
  }

  switch (pcb->state) {
  402db8:	7e23      	ldrb	r3, [r4, #24]
  402dba:	2b07      	cmp	r3, #7
  402dbc:	d8fa      	bhi.n	402db4 <tcp_close_shutdown+0x160>
  402dbe:	a201      	add	r2, pc, #4	; (adr r2, 402dc4 <tcp_close_shutdown+0x170>)
  402dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dc4:	00402d03 	.word	0x00402d03
  402dc8:	00402d51 	.word	0x00402d51
  402dcc:	00402d63 	.word	0x00402d63
  402dd0:	00402d79 	.word	0x00402d79
  402dd4:	00402d8b 	.word	0x00402d8b
  402dd8:	00402db5 	.word	0x00402db5
  402ddc:	00402db5 	.word	0x00402db5
  402de0:	00402d9b 	.word	0x00402d9b
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  402de4:	2000      	movs	r0, #0
  402de6:	e004      	b.n	402df2 <tcp_close_shutdown+0x19e>
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
  402de8:	2c00      	cmp	r4, #0
  402dea:	d1de      	bne.n	402daa <tcp_close_shutdown+0x156>
  402dec:	2000      	movs	r0, #0
  402dee:	e000      	b.n	402df2 <tcp_close_shutdown+0x19e>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
      }
      return ERR_OK;
  402df0:	4618      	mov	r0, r3
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  }
  return err;
}
  402df2:	b003      	add	sp, #12
  402df4:	bd30      	pop	{r4, r5, pc}
  402df6:	bf00      	nop
  402df8:	00404b95 	.word	0x00404b95
  402dfc:	00402809 	.word	0x00402809
  402e00:	20004768 	.word	0x20004768
  402e04:	20004774 	.word	0x20004774
  402e08:	20004764 	.word	0x20004764
  402e0c:	2000477c 	.word	0x2000477c
  402e10:	00401dbd 	.word	0x00401dbd
  402e14:	004021b9 	.word	0x004021b9
  402e18:	20004778 	.word	0x20004778
  402e1c:	20004770 	.word	0x20004770
  402e20:	00402bdd 	.word	0x00402bdd
  402e24:	00404819 	.word	0x00404819
  402e28:	004048e1 	.word	0x004048e1

00402e2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  402e2c:	b508      	push	{r3, lr}
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
  402e2e:	7e03      	ldrb	r3, [r0, #24]
  402e30:	2b01      	cmp	r3, #1
  402e32:	d003      	beq.n	402e3c <tcp_close+0x10>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  402e34:	7f83      	ldrb	r3, [r0, #30]
  402e36:	f043 0310 	orr.w	r3, r3, #16
  402e3a:	7783      	strb	r3, [r0, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  402e3c:	2101      	movs	r1, #1
  402e3e:	4b01      	ldr	r3, [pc, #4]	; (402e44 <tcp_close+0x18>)
  402e40:	4798      	blx	r3
}
  402e42:	bd08      	pop	{r3, pc}
  402e44:	00402c55 	.word	0x00402c55

00402e48 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  402e48:	b510      	push	{r4, lr}
  402e4a:	4608      	mov	r0, r1
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  402e4c:	b142      	cbz	r2, 402e60 <tcp_recv_null+0x18>
  402e4e:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  402e50:	8911      	ldrh	r1, [r2, #8]
  402e52:	4b06      	ldr	r3, [pc, #24]	; (402e6c <tcp_recv_null+0x24>)
  402e54:	4798      	blx	r3
    pbuf_free(p);
  402e56:	4620      	mov	r0, r4
  402e58:	4b05      	ldr	r3, [pc, #20]	; (402e70 <tcp_recv_null+0x28>)
  402e5a:	4798      	blx	r3
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
  }
  return ERR_OK;
  402e5c:	2000      	movs	r0, #0
  402e5e:	bd10      	pop	{r4, pc}
{
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
  402e60:	b913      	cbnz	r3, 402e68 <tcp_recv_null+0x20>
    return tcp_close(pcb);
  402e62:	4b04      	ldr	r3, [pc, #16]	; (402e74 <tcp_recv_null+0x2c>)
  402e64:	4798      	blx	r3
  402e66:	bd10      	pop	{r4, pc}
  }
  return ERR_OK;
  402e68:	2000      	movs	r0, #0
}
  402e6a:	bd10      	pop	{r4, pc}
  402e6c:	00402759 	.word	0x00402759
  402e70:	00402375 	.word	0x00402375
  402e74:	00402e2d 	.word	0x00402e2d

00402e78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  402e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e7a:	4604      	mov	r4, r0
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  402e7c:	6f85      	ldr	r5, [r0, #120]	; 0x78
  402e7e:	7b6f      	ldrb	r7, [r5, #13]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  pcb->refused_data = NULL;
  402e80:	2300      	movs	r3, #0
  402e82:	6783      	str	r3, [r0, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  402e84:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
  402e88:	b126      	cbz	r6, 402e94 <tcp_process_refused_data+0x1c>
  402e8a:	462a      	mov	r2, r5
  402e8c:	4601      	mov	r1, r0
  402e8e:	6900      	ldr	r0, [r0, #16]
  402e90:	47b0      	blx	r6
  402e92:	e005      	b.n	402ea0 <tcp_process_refused_data+0x28>
  402e94:	2300      	movs	r3, #0
  402e96:	462a      	mov	r2, r5
  402e98:	4601      	mov	r1, r0
  402e9a:	4618      	mov	r0, r3
  402e9c:	4e14      	ldr	r6, [pc, #80]	; (402ef0 <tcp_process_refused_data+0x78>)
  402e9e:	47b0      	blx	r6
  if (err == ERR_OK) {
  402ea0:	b9c0      	cbnz	r0, 402ed4 <tcp_process_refused_data+0x5c>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  402ea2:	f017 0f20 	tst.w	r7, #32
  402ea6:	d01b      	beq.n	402ee0 <tcp_process_refused_data+0x68>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
  402ea8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  402eaa:	f640 3268 	movw	r2, #2920	; 0xb68
  402eae:	4293      	cmp	r3, r2
        pcb->rcv_wnd++;
  402eb0:	bf1c      	itt	ne
  402eb2:	3301      	addne	r3, #1
  402eb4:	85a3      	strhne	r3, [r4, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
  402eb6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  402eba:	b19d      	cbz	r5, 402ee4 <tcp_process_refused_data+0x6c>
  402ebc:	2300      	movs	r3, #0
  402ebe:	461a      	mov	r2, r3
  402ec0:	4621      	mov	r1, r4
  402ec2:	6920      	ldr	r0, [r4, #16]
  402ec4:	47a8      	blx	r5
    return ERR_ABRT;
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  }
  return ERR_OK;
  402ec6:	f110 0f0a 	cmn.w	r0, #10
  402eca:	bf0c      	ite	eq
  402ecc:	f06f 0009 	mvneq.w	r0, #9
  402ed0:	2000      	movne	r0, #0
  402ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_EVENT_CLOSED(pcb, err);
      if (err == ERR_ABRT) {
        return ERR_ABRT;
      }
    }
  } else if (err == ERR_ABRT) {
  402ed4:	f110 0f0a 	cmn.w	r0, #10
  402ed8:	d006      	beq.n	402ee8 <tcp_process_refused_data+0x70>
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  402eda:	67a5      	str	r5, [r4, #120]	; 0x78
  }
  return ERR_OK;
  402edc:	2000      	movs	r0, #0
  402ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ee0:	2000      	movs	r0, #0
  402ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ee4:	2000      	movs	r0, #0
  402ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (err == ERR_ABRT) {
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  402ee8:	f06f 0009 	mvn.w	r0, #9
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  }
  return ERR_OK;
}
  402eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402eee:	bf00      	nop
  402ef0:	00402e49 	.word	0x00402e49

00402ef4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  402ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  402ef8:	4a18      	ldr	r2, [pc, #96]	; (402f5c <tcp_fasttmr+0x68>)
  402efa:	7813      	ldrb	r3, [r2, #0]
  402efc:	3301      	adds	r3, #1
  402efe:	7013      	strb	r3, [r2, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  402f00:	4f17      	ldr	r7, [pc, #92]	; (402f60 <tcp_fasttmr+0x6c>)

  while(pcb != NULL) {
    if (pcb->last_timer != tcp_timer_ctr) {
  402f02:	4615      	mov	r5, r2
      pcb->last_timer = tcp_timer_ctr;
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
        tcp_output(pcb);
  402f04:	f8df 8064 	ldr.w	r8, [pc, #100]	; 402f6c <tcp_fasttmr+0x78>

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
  402f08:	4e16      	ldr	r6, [pc, #88]	; (402f64 <tcp_fasttmr+0x70>)
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  402f0a:	683c      	ldr	r4, [r7, #0]

  while(pcb != NULL) {
  402f0c:	e01c      	b.n	402f48 <tcp_fasttmr+0x54>
  402f0e:	e7fe      	b.n	402f0e <tcp_fasttmr+0x1a>
    if (pcb->last_timer != tcp_timer_ctr) {
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  402f10:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  402f14:	7fa3      	ldrb	r3, [r4, #30]
  402f16:	f013 0f01 	tst.w	r3, #1
  402f1a:	d008      	beq.n	402f2e <tcp_fasttmr+0x3a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  402f1c:	f043 0302 	orr.w	r3, r3, #2
  402f20:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
  402f22:	4620      	mov	r0, r4
  402f24:	47c0      	blx	r8
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  402f26:	7fa3      	ldrb	r3, [r4, #30]
  402f28:	f023 0303 	bic.w	r3, r3, #3
  402f2c:	77a3      	strb	r3, [r4, #30]
      }

      next = pcb->next;
  402f2e:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  402f32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  402f34:	b13b      	cbz	r3, 402f46 <tcp_fasttmr+0x52>
        tcp_active_pcbs_changed = 0;
  402f36:	2300      	movs	r3, #0
  402f38:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
  402f3a:	4620      	mov	r0, r4
  402f3c:	4b0a      	ldr	r3, [pc, #40]	; (402f68 <tcp_fasttmr+0x74>)
  402f3e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  402f40:	7833      	ldrb	r3, [r6, #0]
  402f42:	2b00      	cmp	r3, #0
  402f44:	d1e1      	bne.n	402f0a <tcp_fasttmr+0x16>
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  402f46:	464c      	mov	r4, r9
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
  402f48:	b12c      	cbz	r4, 402f56 <tcp_fasttmr+0x62>
    if (pcb->last_timer != tcp_timer_ctr) {
  402f4a:	782b      	ldrb	r3, [r5, #0]
  402f4c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  402f50:	429a      	cmp	r2, r3
  402f52:	d1dd      	bne.n	402f10 <tcp_fasttmr+0x1c>
  402f54:	e7db      	b.n	402f0e <tcp_fasttmr+0x1a>
  402f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f5a:	bf00      	nop
  402f5c:	200023de 	.word	0x200023de
  402f60:	20004768 	.word	0x20004768
  402f64:	20004764 	.word	0x20004764
  402f68:	00402e79 	.word	0x00402e79
  402f6c:	004048e1 	.word	0x004048e1

00402f70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  402f70:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  402f72:	4b06      	ldr	r3, [pc, #24]	; (402f8c <tcp_tmr+0x1c>)
  402f74:	4798      	blx	r3

  if (++tcp_timer & 1) {
  402f76:	4a06      	ldr	r2, [pc, #24]	; (402f90 <tcp_tmr+0x20>)
  402f78:	7813      	ldrb	r3, [r2, #0]
  402f7a:	3301      	adds	r3, #1
  402f7c:	b2db      	uxtb	r3, r3
  402f7e:	7013      	strb	r3, [r2, #0]
  402f80:	f013 0f01 	tst.w	r3, #1
  402f84:	d001      	beq.n	402f8a <tcp_tmr+0x1a>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  402f86:	4b03      	ldr	r3, [pc, #12]	; (402f94 <tcp_tmr+0x24>)
  402f88:	4798      	blx	r3
  402f8a:	bd08      	pop	{r3, pc}
  402f8c:	00402ef5 	.word	0x00402ef5
  402f90:	200023dd 	.word	0x200023dd
  402f94:	00402851 	.word	0x00402851

00402f98 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  402f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402f9c:	b083      	sub	sp, #12
  402f9e:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  402fa0:	7e03      	ldrb	r3, [r0, #24]
  402fa2:	2b0a      	cmp	r3, #10
  402fa4:	d108      	bne.n	402fb8 <tcp_abandon+0x20>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  402fa6:	4601      	mov	r1, r0
  402fa8:	481c      	ldr	r0, [pc, #112]	; (40301c <tcp_abandon+0x84>)
  402faa:	4b1d      	ldr	r3, [pc, #116]	; (403020 <tcp_abandon+0x88>)
  402fac:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  402fae:	4621      	mov	r1, r4
  402fb0:	2001      	movs	r0, #1
  402fb2:	4b1c      	ldr	r3, [pc, #112]	; (403024 <tcp_abandon+0x8c>)
  402fb4:	4798      	blx	r3
  402fb6:	e02e      	b.n	403016 <tcp_abandon+0x7e>
  402fb8:	460e      	mov	r6, r1
  } else {
    seqno = pcb->snd_nxt;
  402fba:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
  402fbe:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
#if LWIP_CALLBACK_API
    errf = pcb->errf;
  402fc2:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
  402fc6:	6907      	ldr	r7, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  402fc8:	4601      	mov	r1, r0
  402fca:	4817      	ldr	r0, [pc, #92]	; (403028 <tcp_abandon+0x90>)
  402fcc:	4b14      	ldr	r3, [pc, #80]	; (403020 <tcp_abandon+0x88>)
  402fce:	4798      	blx	r3
  402fd0:	2201      	movs	r2, #1
  402fd2:	4b16      	ldr	r3, [pc, #88]	; (40302c <tcp_abandon+0x94>)
  402fd4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  402fd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402fd8:	b108      	cbz	r0, 402fde <tcp_abandon+0x46>
      tcp_segs_free(pcb->unacked);
  402fda:	4b15      	ldr	r3, [pc, #84]	; (403030 <tcp_abandon+0x98>)
  402fdc:	4798      	blx	r3
    }
    if (pcb->unsent != NULL) {
  402fde:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  402fe0:	b108      	cbz	r0, 402fe6 <tcp_abandon+0x4e>
      tcp_segs_free(pcb->unsent);
  402fe2:	4b13      	ldr	r3, [pc, #76]	; (403030 <tcp_abandon+0x98>)
  402fe4:	4798      	blx	r3
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
  402fe6:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402fe8:	b108      	cbz	r0, 402fee <tcp_abandon+0x56>
      tcp_segs_free(pcb->ooseq);
  402fea:	4b11      	ldr	r3, [pc, #68]	; (403030 <tcp_abandon+0x98>)
  402fec:	4798      	blx	r3
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
  402fee:	b14e      	cbz	r6, 403004 <tcp_abandon+0x6c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  402ff0:	8ba3      	ldrh	r3, [r4, #28]
  402ff2:	9301      	str	r3, [sp, #4]
  402ff4:	8b63      	ldrh	r3, [r4, #26]
  402ff6:	9300      	str	r3, [sp, #0]
  402ff8:	1d23      	adds	r3, r4, #4
  402ffa:	4622      	mov	r2, r4
  402ffc:	4649      	mov	r1, r9
  402ffe:	4640      	mov	r0, r8
  403000:	4e0c      	ldr	r6, [pc, #48]	; (403034 <tcp_abandon+0x9c>)
  403002:	47b0      	blx	r6
    }
    memp_free(MEMP_TCP_PCB, pcb);
  403004:	4621      	mov	r1, r4
  403006:	2001      	movs	r0, #1
  403008:	4b06      	ldr	r3, [pc, #24]	; (403024 <tcp_abandon+0x8c>)
  40300a:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  40300c:	b11d      	cbz	r5, 403016 <tcp_abandon+0x7e>
  40300e:	f06f 0109 	mvn.w	r1, #9
  403012:	4638      	mov	r0, r7
  403014:	47a8      	blx	r5
  }
}
  403016:	b003      	add	sp, #12
  403018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40301c:	2000477c 	.word	0x2000477c
  403020:	00402bdd 	.word	0x00402bdd
  403024:	004021b9 	.word	0x004021b9
  403028:	20004768 	.word	0x20004768
  40302c:	20004764 	.word	0x20004764
  403030:	004027bd 	.word	0x004027bd
  403034:	00404b95 	.word	0x00404b95

00403038 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  403038:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  40303a:	2101      	movs	r1, #1
  40303c:	4b01      	ldr	r3, [pc, #4]	; (403044 <tcp_abort+0xc>)
  40303e:	4798      	blx	r3
  403040:	bd08      	pop	{r3, pc}
  403042:	bf00      	nop
  403044:	00402f99 	.word	0x00402f99

00403048 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  403048:	4a03      	ldr	r2, [pc, #12]	; (403058 <tcp_next_iss+0x10>)
  40304a:	6810      	ldr	r0, [r2, #0]
  40304c:	4b03      	ldr	r3, [pc, #12]	; (40305c <tcp_next_iss+0x14>)
  40304e:	681b      	ldr	r3, [r3, #0]
  403050:	4418      	add	r0, r3
  403052:	6010      	str	r0, [r2, #0]
  return iss;
}
  403054:	4770      	bx	lr
  403056:	bf00      	nop
  403058:	20000008 	.word	0x20000008
  40305c:	2000476c 	.word	0x2000476c

00403060 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  403060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403062:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403064:	2001      	movs	r0, #1
  403066:	4b3a      	ldr	r3, [pc, #232]	; (403150 <tcp_alloc+0xf0>)
  403068:	4798      	blx	r3
  if (pcb == NULL) {
  40306a:	4604      	mov	r4, r0
  40306c:	2800      	cmp	r0, #0
  40306e:	d135      	bne.n	4030dc <tcp_alloc+0x7c>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403070:	4b38      	ldr	r3, [pc, #224]	; (403154 <tcp_alloc+0xf4>)
  403072:	681b      	ldr	r3, [r3, #0]
  403074:	b173      	cbz	r3, 403094 <tcp_alloc+0x34>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403076:	4a38      	ldr	r2, [pc, #224]	; (403158 <tcp_alloc+0xf8>)
  403078:	6814      	ldr	r4, [r2, #0]
  40307a:	4601      	mov	r1, r0
  40307c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40307e:	1aa2      	subs	r2, r4, r2
  403080:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
  403082:	bf24      	itt	cs
  403084:	4611      	movcs	r1, r2

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403086:	4618      	movcs	r0, r3
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403088:	68db      	ldr	r3, [r3, #12]
  40308a:	2b00      	cmp	r3, #0
  40308c:	d1f6      	bne.n	40307c <tcp_alloc+0x1c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
  40308e:	b108      	cbz	r0, 403094 <tcp_alloc+0x34>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  403090:	4b32      	ldr	r3, [pc, #200]	; (40315c <tcp_alloc+0xfc>)
  403092:	4798      	blx	r3
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403094:	2001      	movs	r0, #1
  403096:	4b2e      	ldr	r3, [pc, #184]	; (403150 <tcp_alloc+0xf0>)
  403098:	4798      	blx	r3
    if (pcb == NULL) {
  40309a:	4604      	mov	r4, r0
  40309c:	b9f0      	cbnz	r0, 4030dc <tcp_alloc+0x7c>
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40309e:	4b30      	ldr	r3, [pc, #192]	; (403160 <tcp_alloc+0x100>)
  4030a0:	681b      	ldr	r3, [r3, #0]
  4030a2:	b1ab      	cbz	r3, 4030d0 <tcp_alloc+0x70>
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  4030a4:	4a2c      	ldr	r2, [pc, #176]	; (403158 <tcp_alloc+0xf8>)
  4030a6:	6817      	ldr	r7, [r2, #0]
  4030a8:	4606      	mov	r6, r0
  4030aa:	247f      	movs	r4, #127	; 0x7f
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
  4030ac:	7e5a      	ldrb	r2, [r3, #25]
  4030ae:	4295      	cmp	r5, r2
  4030b0:	d308      	bcc.n	4030c4 <tcp_alloc+0x64>
  4030b2:	42a2      	cmp	r2, r4
  4030b4:	d806      	bhi.n	4030c4 <tcp_alloc+0x64>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  4030b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  4030b8:	1a79      	subs	r1, r7, r1
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  4030ba:	42b1      	cmp	r1, r6
  4030bc:	d302      	bcc.n	4030c4 <tcp_alloc+0x64>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
  4030be:	4614      	mov	r4, r2
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
  4030c0:	460e      	mov	r6, r1
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  4030c2:	4618      	mov	r0, r3
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4030c4:	68db      	ldr	r3, [r3, #12]
  4030c6:	2b00      	cmp	r3, #0
  4030c8:	d1f0      	bne.n	4030ac <tcp_alloc+0x4c>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
  4030ca:	b108      	cbz	r0, 4030d0 <tcp_alloc+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  4030cc:	4b23      	ldr	r3, [pc, #140]	; (40315c <tcp_alloc+0xfc>)
  4030ce:	4798      	blx	r3
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  4030d0:	2001      	movs	r0, #1
  4030d2:	4b1f      	ldr	r3, [pc, #124]	; (403150 <tcp_alloc+0xf0>)
  4030d4:	4798      	blx	r3
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
  4030d6:	4604      	mov	r4, r0
  4030d8:	2800      	cmp	r0, #0
  4030da:	d037      	beq.n	40314c <tcp_alloc+0xec>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  4030dc:	2298      	movs	r2, #152	; 0x98
  4030de:	2100      	movs	r1, #0
  4030e0:	4620      	mov	r0, r4
  4030e2:	4b20      	ldr	r3, [pc, #128]	; (403164 <tcp_alloc+0x104>)
  4030e4:	4798      	blx	r3
    pcb->prio = prio;
  4030e6:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
  4030e8:	f640 3368 	movw	r3, #2920	; 0xb68
  4030ec:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
  4030f0:	2500      	movs	r5, #0
  4030f2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  4030f6:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  4030f8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
  4030fa:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
  4030fc:	23ff      	movs	r3, #255	; 0xff
  4030fe:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  403100:	f44f 7306 	mov.w	r3, #536	; 0x218
  403104:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  403106:	2306      	movs	r3, #6
  403108:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
  40310c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  403110:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
  403114:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403118:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
  40311a:	2301      	movs	r3, #1
  40311c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
  403120:	4b11      	ldr	r3, [pc, #68]	; (403168 <tcp_alloc+0x108>)
  403122:	4798      	blx	r3
    pcb->snd_wl2 = iss;
  403124:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
  403126:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
  403128:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
  40312a:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  40312c:	4b0a      	ldr	r3, [pc, #40]	; (403158 <tcp_alloc+0xf8>)
  40312e:	681b      	ldr	r3, [r3, #0]
  403130:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  403132:	4b0e      	ldr	r3, [pc, #56]	; (40316c <tcp_alloc+0x10c>)
  403134:	781b      	ldrb	r3, [r3, #0]
  403136:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb->polltmr = 0;
  40313a:	77e5      	strb	r5, [r4, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  40313c:	4b0c      	ldr	r3, [pc, #48]	; (403170 <tcp_alloc+0x110>)
  40313e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  403142:	4b0c      	ldr	r3, [pc, #48]	; (403174 <tcp_alloc+0x114>)
  403144:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  403148:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
  }
  return pcb;
}
  40314c:	4620      	mov	r0, r4
  40314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403150:	00402199 	.word	0x00402199
  403154:	2000477c 	.word	0x2000477c
  403158:	2000476c 	.word	0x2000476c
  40315c:	00403039 	.word	0x00403039
  403160:	20004768 	.word	0x20004768
  403164:	00406529 	.word	0x00406529
  403168:	00403049 	.word	0x00403049
  40316c:	200023de 	.word	0x200023de
  403170:	00402e49 	.word	0x00402e49
  403174:	006ddd00 	.word	0x006ddd00

00403178 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  403178:	b510      	push	{r4, lr}
  40317a:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  40317c:	4608      	mov	r0, r1
  40317e:	4b06      	ldr	r3, [pc, #24]	; (403198 <tcp_eff_send_mss+0x20>)
  403180:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
  403182:	b130      	cbz	r0, 403192 <tcp_eff_send_mss+0x1a>
  403184:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  403186:	b123      	cbz	r3, 403192 <tcp_eff_send_mss+0x1a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  403188:	3b28      	subs	r3, #40	; 0x28
  40318a:	b29b      	uxth	r3, r3
  40318c:	429c      	cmp	r4, r3
  40318e:	bf28      	it	cs
  403190:	461c      	movcs	r4, r3
  }
  return sendmss;
}
  403192:	4620      	mov	r0, r4
  403194:	bd10      	pop	{r4, pc}
  403196:	bf00      	nop
  403198:	004012d5 	.word	0x004012d5

0040319c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  40319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40319e:	4605      	mov	r5, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  4031a0:	4b21      	ldr	r3, [pc, #132]	; (403228 <tcp_parseopt+0x8c>)
  4031a2:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  4031a4:	89a0      	ldrh	r0, [r4, #12]
  4031a6:	4b21      	ldr	r3, [pc, #132]	; (40322c <tcp_parseopt+0x90>)
  4031a8:	4798      	blx	r3
  4031aa:	f3c0 300f 	ubfx	r0, r0, #12, #16
  4031ae:	2805      	cmp	r0, #5
  4031b0:	d938      	bls.n	403224 <tcp_parseopt+0x88>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  4031b2:	4b1d      	ldr	r3, [pc, #116]	; (403228 <tcp_parseopt+0x8c>)
  4031b4:	681b      	ldr	r3, [r3, #0]
  4031b6:	8998      	ldrh	r0, [r3, #12]
  4031b8:	4b1c      	ldr	r3, [pc, #112]	; (40322c <tcp_parseopt+0x90>)
  4031ba:	4798      	blx	r3
  4031bc:	0b00      	lsrs	r0, r0, #12
  4031be:	3805      	subs	r0, #5
  4031c0:	0080      	lsls	r0, r0, #2
  4031c2:	b280      	uxth	r0, r0
    for (c = 0; c < max_c; ) {
  4031c4:	b370      	cbz	r0, 403224 <tcp_parseopt+0x88>
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  4031c6:	f104 0214 	add.w	r2, r4, #20
  4031ca:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  4031cc:	f240 57b3 	movw	r7, #1459	; 0x5b3
  4031d0:	f240 56b4 	movw	r6, #1460	; 0x5b4

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
      opt = opts[c];
  4031d4:	461c      	mov	r4, r3
      switch (opt) {
  4031d6:	5cd1      	ldrb	r1, [r2, r3]
  4031d8:	2901      	cmp	r1, #1
  4031da:	d003      	beq.n	4031e4 <tcp_parseopt+0x48>
  4031dc:	b311      	cbz	r1, 403224 <tcp_parseopt+0x88>
  4031de:	2902      	cmp	r1, #2
  4031e0:	d003      	beq.n	4031ea <tcp_parseopt+0x4e>
  4031e2:	e018      	b.n	403216 <tcp_parseopt+0x7a>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
  4031e4:	3301      	adds	r3, #1
  4031e6:	b29b      	uxth	r3, r3
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
  4031e8:	e01a      	b.n	403220 <tcp_parseopt+0x84>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  4031ea:	18d1      	adds	r1, r2, r3
  4031ec:	7849      	ldrb	r1, [r1, #1]
  4031ee:	2904      	cmp	r1, #4
  4031f0:	d118      	bne.n	403224 <tcp_parseopt+0x88>
  4031f2:	1d19      	adds	r1, r3, #4
  4031f4:	4281      	cmp	r1, r0
  4031f6:	dc15      	bgt.n	403224 <tcp_parseopt+0x88>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  4031f8:	4414      	add	r4, r2
  4031fa:	f894 e002 	ldrb.w	lr, [r4, #2]
  4031fe:	78e1      	ldrb	r1, [r4, #3]
  403200:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403204:	1e4c      	subs	r4, r1, #1
  403206:	b2a4      	uxth	r4, r4
  403208:	42bc      	cmp	r4, r7
  40320a:	bf88      	it	hi
  40320c:	4631      	movhi	r1, r6
  40320e:	86e9      	strh	r1, [r5, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
  403210:	3304      	adds	r3, #4
  403212:	b29b      	uxth	r3, r3
        break;
  403214:	e004      	b.n	403220 <tcp_parseopt+0x84>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  403216:	4414      	add	r4, r2
  403218:	7861      	ldrb	r1, [r4, #1]
  40321a:	b119      	cbz	r1, 403224 <tcp_parseopt+0x88>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  40321c:	440b      	add	r3, r1
  40321e:	b29b      	uxth	r3, r3
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
  403220:	4283      	cmp	r3, r0
  403222:	d3d7      	bcc.n	4031d4 <tcp_parseopt+0x38>
  403224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403226:	bf00      	nop
  403228:	200023e0 	.word	0x200023e0
  40322c:	00400f11 	.word	0x00400f11

00403230 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  403230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403234:	4605      	mov	r5, r0
  403236:	4689      	mov	r9, r1
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403238:	68c3      	ldr	r3, [r0, #12]
  40323a:	8998      	ldrh	r0, [r3, #12]
  40323c:	4b2b      	ldr	r3, [pc, #172]	; (4032ec <tcp_oos_insert_segment+0xbc>)
  40323e:	4798      	blx	r3
  403240:	f010 0f01 	tst.w	r0, #1
  403244:	d112      	bne.n	40326c <tcp_oos_insert_segment+0x3c>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  403246:	f1b9 0f00 	cmp.w	r9, #0
  40324a:	d04c      	beq.n	4032e6 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
  40324c:	f8d9 100c 	ldr.w	r1, [r9, #12]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  403250:	892b      	ldrh	r3, [r5, #8]
           TCP_SEQ_GEQ((seqno + cseg->len),
  403252:	684a      	ldr	r2, [r1, #4]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  403254:	1a9a      	subs	r2, r3, r2
           TCP_SEQ_GEQ((seqno + cseg->len),
  403256:	4b26      	ldr	r3, [pc, #152]	; (4032f0 <tcp_oos_insert_segment+0xc0>)
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  403258:	681b      	ldr	r3, [r3, #0]
  40325a:	4413      	add	r3, r2
  40325c:	f8b9 2008 	ldrh.w	r2, [r9, #8]
  403260:	1a9b      	subs	r3, r3, r2
  403262:	2b00      	cmp	r3, #0
  403264:	bfb8      	it	lt
  403266:	464c      	movlt	r4, r9
  403268:	db33      	blt.n	4032d2 <tcp_oos_insert_segment+0xa2>
  40326a:	e006      	b.n	40327a <tcp_oos_insert_segment+0x4a>
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  40326c:	4648      	mov	r0, r9
  40326e:	4b21      	ldr	r3, [pc, #132]	; (4032f4 <tcp_oos_insert_segment+0xc4>)
  403270:	4798      	blx	r3
    next = NULL;
  403272:	2400      	movs	r4, #0
  403274:	e02a      	b.n	4032cc <tcp_oos_insert_segment+0x9c>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
  403276:	46a1      	mov	r9, r4
  403278:	e003      	b.n	403282 <tcp_oos_insert_segment+0x52>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  40327a:	4f1c      	ldr	r7, [pc, #112]	; (4032ec <tcp_oos_insert_segment+0xbc>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  40327c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 403300 <tcp_oos_insert_segment+0xd0>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
  403280:	4e1d      	ldr	r6, [pc, #116]	; (4032f8 <tcp_oos_insert_segment+0xc8>)
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403282:	8988      	ldrh	r0, [r1, #12]
  403284:	47b8      	blx	r7
  403286:	f010 0f01 	tst.w	r0, #1
  40328a:	d008      	beq.n	40329e <tcp_oos_insert_segment+0x6e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  40328c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  403290:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  403294:	2001      	movs	r0, #1
  403296:	47c0      	blx	r8
  403298:	4320      	orrs	r0, r4
  40329a:	f8aa 000c 	strh.w	r0, [sl, #12]
      }
      old_seg = next;
      next = next->next;
  40329e:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  4032a2:	4648      	mov	r0, r9
  4032a4:	47b0      	blx	r6
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4032a6:	b1f4      	cbz	r4, 4032e6 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
  4032a8:	68e1      	ldr	r1, [r4, #12]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4032aa:	892b      	ldrh	r3, [r5, #8]
           TCP_SEQ_GEQ((seqno + cseg->len),
  4032ac:	684a      	ldr	r2, [r1, #4]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4032ae:	1a9b      	subs	r3, r3, r2
           TCP_SEQ_GEQ((seqno + cseg->len),
  4032b0:	4a0f      	ldr	r2, [pc, #60]	; (4032f0 <tcp_oos_insert_segment+0xc0>)
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4032b2:	6812      	ldr	r2, [r2, #0]
  4032b4:	4413      	add	r3, r2
  4032b6:	8922      	ldrh	r2, [r4, #8]
  4032b8:	1a9b      	subs	r3, r3, r2
  4032ba:	2b00      	cmp	r3, #0
  4032bc:	dadb      	bge.n	403276 <tcp_oos_insert_segment+0x46>
  4032be:	e008      	b.n	4032d2 <tcp_oos_insert_segment+0xa2>
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  4032c0:	1a52      	subs	r2, r2, r1
  4032c2:	b291      	uxth	r1, r2
  4032c4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  4032c6:	6868      	ldr	r0, [r5, #4]
  4032c8:	4b0c      	ldr	r3, [pc, #48]	; (4032fc <tcp_oos_insert_segment+0xcc>)
  4032ca:	4798      	blx	r3
    }
  }
  cseg->next = next;
  4032cc:	602c      	str	r4, [r5, #0]
}
  4032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  4032d2:	4b07      	ldr	r3, [pc, #28]	; (4032f0 <tcp_oos_insert_segment+0xc0>)
  4032d4:	6819      	ldr	r1, [r3, #0]
  4032d6:	68e3      	ldr	r3, [r4, #12]
  4032d8:	685a      	ldr	r2, [r3, #4]
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
  4032da:	892b      	ldrh	r3, [r5, #8]
  4032dc:	1a9b      	subs	r3, r3, r2
  4032de:	440b      	add	r3, r1
  4032e0:	2b00      	cmp	r3, #0
  4032e2:	dced      	bgt.n	4032c0 <tcp_oos_insert_segment+0x90>
  4032e4:	e7f2      	b.n	4032cc <tcp_oos_insert_segment+0x9c>
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
    next = NULL;
  4032e6:	2400      	movs	r4, #0
  4032e8:	e7f0      	b.n	4032cc <tcp_oos_insert_segment+0x9c>
  4032ea:	bf00      	nop
  4032ec:	00400f11 	.word	0x00400f11
  4032f0:	200023e4 	.word	0x200023e4
  4032f4:	004027bd 	.word	0x004027bd
  4032f8:	00402799 	.word	0x00402799
  4032fc:	00402529 	.word	0x00402529
  403300:	00400f05 	.word	0x00400f05

00403304 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  403304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403308:	4604      	mov	r4, r0
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
  40330a:	4b98      	ldr	r3, [pc, #608]	; (40356c <tcp_receive+0x268>)
  40330c:	781b      	ldrb	r3, [r3, #0]
  40330e:	f013 0f10 	tst.w	r3, #16
  403312:	f000 8185 	beq.w	403620 <tcp_receive+0x31c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403316:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  40331a:	6d80      	ldr	r0, [r0, #88]	; 0x58

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  40331c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40331e:	4b94      	ldr	r3, [pc, #592]	; (403570 <tcp_receive+0x26c>)
  403320:	681b      	ldr	r3, [r3, #0]
  403322:	1ad1      	subs	r1, r2, r3
  403324:	2900      	cmp	r1, #0
  403326:	db0f      	blt.n	403348 <tcp_receive+0x44>
  403328:	429a      	cmp	r2, r3
  40332a:	d104      	bne.n	403336 <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  40332c:	4a91      	ldr	r2, [pc, #580]	; (403574 <tcp_receive+0x270>)
  40332e:	6812      	ldr	r2, [r2, #0]
  403330:	1a82      	subs	r2, r0, r2
  403332:	2a00      	cmp	r2, #0
  403334:	db08      	blt.n	403348 <tcp_receive+0x44>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  403336:	4a8f      	ldr	r2, [pc, #572]	; (403574 <tcp_receive+0x270>)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  403338:	6812      	ldr	r2, [r2, #0]
  40333a:	4290      	cmp	r0, r2
  40333c:	d126      	bne.n	40338c <tcp_receive+0x88>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  40333e:	4a8e      	ldr	r2, [pc, #568]	; (403578 <tcp_receive+0x274>)
  403340:	6812      	ldr	r2, [r2, #0]
  403342:	89d2      	ldrh	r2, [r2, #14]
  403344:	42aa      	cmp	r2, r5
  403346:	d921      	bls.n	40338c <tcp_receive+0x88>
      pcb->snd_wnd = tcphdr->wnd;
  403348:	4a8b      	ldr	r2, [pc, #556]	; (403578 <tcp_receive+0x274>)
  40334a:	6812      	ldr	r2, [r2, #0]
  40334c:	89d1      	ldrh	r1, [r2, #14]
  40334e:	b28e      	uxth	r6, r1
  403350:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  403354:	89d2      	ldrh	r2, [r2, #14]
  403356:	b291      	uxth	r1, r2
  403358:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
  40335c:	428f      	cmp	r7, r1
        pcb->snd_wnd_max = tcphdr->wnd;
  40335e:	bf38      	it	cc
  403360:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  403364:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  403366:	4b83      	ldr	r3, [pc, #524]	; (403574 <tcp_receive+0x270>)
  403368:	681b      	ldr	r3, [r3, #0]
  40336a:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  40336c:	b946      	cbnz	r6, 403380 <tcp_receive+0x7c>
        if (pcb->persist_backoff == 0) {
  40336e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403372:	b95b      	cbnz	r3, 40338c <tcp_receive+0x88>
          /* start persist timer */
          pcb->persist_cnt = 0;
  403374:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  403378:	2301      	movs	r3, #1
  40337a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  40337e:	e005      	b.n	40338c <tcp_receive+0x88>
        }
      } else if (pcb->persist_backoff > 0) {
  403380:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403384:	b113      	cbz	r3, 40338c <tcp_receive+0x88>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  403386:	2300      	movs	r3, #0
  403388:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  40338c:	4b79      	ldr	r3, [pc, #484]	; (403574 <tcp_receive+0x270>)
  40338e:	681a      	ldr	r2, [r3, #0]
  403390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403392:	1ad1      	subs	r1, r2, r3
  403394:	2900      	cmp	r1, #0
  403396:	dc37      	bgt.n	403408 <tcp_receive+0x104>
      pcb->acked = 0;
  403398:	2100      	movs	r1, #0
  40339a:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
  40339e:	4977      	ldr	r1, [pc, #476]	; (40357c <tcp_receive+0x278>)
  4033a0:	8809      	ldrh	r1, [r1, #0]
  4033a2:	2900      	cmp	r1, #0
  4033a4:	f040 83eb 	bne.w	403b7e <tcp_receive+0x87a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  4033a8:	4428      	add	r0, r5
  4033aa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
  4033ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
  4033b0:	4429      	add	r1, r5
  4033b2:	4288      	cmp	r0, r1
  4033b4:	f040 83e3 	bne.w	403b7e <tcp_receive+0x87a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  4033b8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  4033bc:	2900      	cmp	r1, #0
  4033be:	f2c0 83de 	blt.w	403b7e <tcp_receive+0x87a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  4033c2:	429a      	cmp	r2, r3
  4033c4:	f040 83db 	bne.w	403b7e <tcp_receive+0x87a>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4033c8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
  4033cc:	1c53      	adds	r3, r2, #1
  4033ce:	b2db      	uxtb	r3, r3
  4033d0:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  4033d2:	bf38      	it	cc
  4033d4:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  4033d8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  4033dc:	2b03      	cmp	r3, #3
  4033de:	d909      	bls.n	4033f4 <tcp_receive+0xf0>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  4033e0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  4033e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4033e6:	4413      	add	r3, r2
  4033e8:	b29b      	uxth	r3, r3
  4033ea:	429a      	cmp	r2, r3
  4033ec:	d207      	bcs.n	4033fe <tcp_receive+0xfa>
                  pcb->cwnd += pcb->mss;
  4033ee:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  4033f2:	e004      	b.n	4033fe <tcp_receive+0xfa>
                }
              } else if (pcb->dupacks == 3) {
  4033f4:	2b03      	cmp	r3, #3
  4033f6:	d102      	bne.n	4033fe <tcp_receive+0xfa>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  4033f8:	4620      	mov	r0, r4
  4033fa:	4b61      	ldr	r3, [pc, #388]	; (403580 <tcp_receive+0x27c>)
  4033fc:	4798      	blx	r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  4033fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  403400:	2b00      	cmp	r3, #0
  403402:	f040 80c7 	bne.w	403594 <tcp_receive+0x290>
  403406:	e0e4      	b.n	4035d2 <tcp_receive+0x2ce>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  403408:	2901      	cmp	r1, #1
  40340a:	f100 8088 	bmi.w	40351e <tcp_receive+0x21a>
  40340e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  403410:	1a51      	subs	r1, r2, r1
  403412:	2900      	cmp	r1, #0
  403414:	f300 8083 	bgt.w	40351e <tcp_receive+0x21a>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  403418:	7fa1      	ldrb	r1, [r4, #30]
  40341a:	f011 0f04 	tst.w	r1, #4
  40341e:	d006      	beq.n	40342e <tcp_receive+0x12a>
        pcb->flags &= ~TF_INFR;
  403420:	f021 0104 	bic.w	r1, r1, #4
  403424:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
  403426:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
  40342a:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  40342e:	2000      	movs	r0, #0
  403430:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  403434:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
  403438:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  40343c:	eb01 01e5 	add.w	r1, r1, r5, asr #3
  403440:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  403444:	1ad3      	subs	r3, r2, r3
  403446:	b29b      	uxth	r3, r3
  403448:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
  40344c:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
  403450:	440b      	add	r3, r1
  403452:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  403456:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
  40345a:	64a2      	str	r2, [r4, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  40345c:	7e23      	ldrb	r3, [r4, #24]
  40345e:	2b03      	cmp	r3, #3
  403460:	d918      	bls.n	403494 <tcp_receive+0x190>
        if (pcb->cwnd < pcb->ssthresh) {
  403462:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  403466:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  40346a:	4293      	cmp	r3, r2
  40346c:	d907      	bls.n	40347e <tcp_receive+0x17a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  40346e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403470:	4413      	add	r3, r2
  403472:	b29b      	uxth	r3, r3
  403474:	429a      	cmp	r2, r3
  403476:	d20d      	bcs.n	403494 <tcp_receive+0x190>
            pcb->cwnd += pcb->mss;
  403478:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  40347c:	e00a      	b.n	403494 <tcp_receive+0x190>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  40347e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403480:	fb03 f303 	mul.w	r3, r3, r3
  403484:	fb93 f3f2 	sdiv	r3, r3, r2
  403488:	4413      	add	r3, r2
  40348a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  40348c:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
  40348e:	bf38      	it	cc
  403490:	f8a4 304c 	strhcc.w	r3, [r4, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  403494:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403496:	b9fb      	cbnz	r3, 4034d8 <tcp_receive+0x1d4>
  403498:	e038      	b.n	40350c <tcp_receive+0x208>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  40349a:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
  40349c:	682b      	ldr	r3, [r5, #0]
  40349e:	6723      	str	r3, [r4, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4034a0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4034a4:	b153      	cbz	r3, 4034bc <tcp_receive+0x1b8>
  4034a6:	68eb      	ldr	r3, [r5, #12]
  4034a8:	8998      	ldrh	r0, [r3, #12]
  4034aa:	47b0      	blx	r6
  4034ac:	f010 0f01 	tst.w	r0, #1
  4034b0:	d004      	beq.n	4034bc <tcp_receive+0x1b8>
          pcb->acked--;
  4034b2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4034b6:	3b01      	subs	r3, #1
  4034b8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
  4034bc:	6868      	ldr	r0, [r5, #4]
  4034be:	4b31      	ldr	r3, [pc, #196]	; (403584 <tcp_receive+0x280>)
  4034c0:	4798      	blx	r3
  4034c2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  4034c6:	1a18      	subs	r0, r3, r0
  4034c8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
  4034cc:	4628      	mov	r0, r5
  4034ce:	4b2e      	ldr	r3, [pc, #184]	; (403588 <tcp_receive+0x284>)
  4034d0:	4798      	blx	r3
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  4034d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4034d4:	b923      	cbnz	r3, 4034e0 <tcp_receive+0x1dc>
  4034d6:	e019      	b.n	40350c <tcp_receive+0x208>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  4034d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 403590 <tcp_receive+0x28c>
  4034dc:	4e2b      	ldr	r6, [pc, #172]	; (40358c <tcp_receive+0x288>)
  4034de:	4f25      	ldr	r7, [pc, #148]	; (403574 <tcp_receive+0x270>)
  4034e0:	68db      	ldr	r3, [r3, #12]
  4034e2:	6858      	ldr	r0, [r3, #4]
  4034e4:	47c0      	blx	r8
  4034e6:	4605      	mov	r5, r0
  4034e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4034ea:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  4034ee:	68db      	ldr	r3, [r3, #12]
  4034f0:	8998      	ldrh	r0, [r3, #12]
  4034f2:	47b0      	blx	r6
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  4034f4:	f010 0003 	ands.w	r0, r0, #3
  4034f8:	bf18      	it	ne
  4034fa:	2001      	movne	r0, #1
  4034fc:	4481      	add	r9, r0
  4034fe:	683b      	ldr	r3, [r7, #0]
  403500:	1aed      	subs	r5, r5, r3
  403502:	444d      	add	r5, r9
  403504:	2d00      	cmp	r5, #0
  403506:	ddc8      	ble.n	40349a <tcp_receive+0x196>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  403508:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40350a:	b91b      	cbnz	r3, 403514 <tcp_receive+0x210>
        pcb->rtime = -1;
  40350c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403510:	86a3      	strh	r3, [r4, #52]	; 0x34
  403512:	e001      	b.n	403518 <tcp_receive+0x214>
      else
        pcb->rtime = 0;
  403514:	2300      	movs	r3, #0
  403516:	86a3      	strh	r3, [r4, #52]	; 0x34

      pcb->polltmr = 0;
  403518:	2300      	movs	r3, #0
  40351a:	77e3      	strb	r3, [r4, #31]
  40351c:	e76f      	b.n	4033fe <tcp_receive+0xfa>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  40351e:	2300      	movs	r3, #0
  403520:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  403524:	e76b      	b.n	4033fe <tcp_receive+0xfa>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  403526:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
  403528:	682b      	ldr	r3, [r5, #0]
  40352a:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  40352c:	b90b      	cbnz	r3, 403532 <tcp_receive+0x22e>
        pcb->unsent_oversize = 0;
  40352e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  403532:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403536:	b153      	cbz	r3, 40354e <tcp_receive+0x24a>
  403538:	68eb      	ldr	r3, [r5, #12]
  40353a:	8998      	ldrh	r0, [r3, #12]
  40353c:	47b8      	blx	r7
  40353e:	f010 0f01 	tst.w	r0, #1
  403542:	d004      	beq.n	40354e <tcp_receive+0x24a>
        pcb->acked--;
  403544:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403548:	3b01      	subs	r3, #1
  40354a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
  40354e:	6868      	ldr	r0, [r5, #4]
  403550:	4b0c      	ldr	r3, [pc, #48]	; (403584 <tcp_receive+0x280>)
  403552:	4798      	blx	r3
  403554:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  403558:	1a18      	subs	r0, r3, r0
  40355a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
  40355e:	4628      	mov	r0, r5
  403560:	4b09      	ldr	r3, [pc, #36]	; (403588 <tcp_receive+0x284>)
  403562:	4798      	blx	r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  403564:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  403566:	b9cb      	cbnz	r3, 40359c <tcp_receive+0x298>
  403568:	e033      	b.n	4035d2 <tcp_receive+0x2ce>
  40356a:	bf00      	nop
  40356c:	200023f0 	.word	0x200023f0
  403570:	200023e4 	.word	0x200023e4
  403574:	200023ec 	.word	0x200023ec
  403578:	200023e0 	.word	0x200023e0
  40357c:	200023e8 	.word	0x200023e8
  403580:	00404cc9 	.word	0x00404cc9
  403584:	00402589 	.word	0x00402589
  403588:	00402799 	.word	0x00402799
  40358c:	00400f11 	.word	0x00400f11
  403590:	00400f35 	.word	0x00400f35
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  403594:	4ea2      	ldr	r6, [pc, #648]	; (403820 <tcp_receive+0x51c>)
  403596:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 403848 <tcp_receive+0x544>
  40359a:	4fa2      	ldr	r7, [pc, #648]	; (403824 <tcp_receive+0x520>)
  40359c:	6835      	ldr	r5, [r6, #0]
  40359e:	68db      	ldr	r3, [r3, #12]
  4035a0:	6858      	ldr	r0, [r3, #4]
  4035a2:	47c0      	blx	r8
  4035a4:	4682      	mov	sl, r0
  4035a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4035a8:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  4035ac:	68db      	ldr	r3, [r3, #12]
  4035ae:	8998      	ldrh	r0, [r3, #12]
  4035b0:	47b8      	blx	r7
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  4035b2:	ebca 0505 	rsb	r5, sl, r5
  4035b6:	f010 0003 	ands.w	r0, r0, #3
  4035ba:	bf18      	it	ne
  4035bc:	2001      	movne	r0, #1
  4035be:	4481      	add	r9, r0
  4035c0:	ebc9 0505 	rsb	r5, r9, r5
  4035c4:	2d00      	cmp	r5, #0
  4035c6:	db04      	blt.n	4035d2 <tcp_receive+0x2ce>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4035c8:	6833      	ldr	r3, [r6, #0]
  4035ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4035cc:	1a9b      	subs	r3, r3, r2
  4035ce:	2b00      	cmp	r3, #0
  4035d0:	dda9      	ble.n	403526 <tcp_receive+0x222>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  4035d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4035d4:	b323      	cbz	r3, 403620 <tcp_receive+0x31c>
  4035d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4035d8:	4991      	ldr	r1, [pc, #580]	; (403820 <tcp_receive+0x51c>)
  4035da:	6809      	ldr	r1, [r1, #0]
  4035dc:	1a52      	subs	r2, r2, r1
  4035de:	2a00      	cmp	r2, #0
  4035e0:	da1e      	bge.n	403620 <tcp_receive+0x31c>

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  4035e2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  4035e6:	4a90      	ldr	r2, [pc, #576]	; (403828 <tcp_receive+0x524>)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  4035e8:	6812      	ldr	r2, [r2, #0]
  4035ea:	1ad2      	subs	r2, r2, r3
  4035ec:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
  4035f0:	b292      	uxth	r2, r2
  4035f2:	b213      	sxth	r3, r2
      pcb->sa += m;
  4035f4:	4411      	add	r1, r2
  4035f6:	b209      	sxth	r1, r1
  4035f8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
  4035fc:	2b00      	cmp	r3, #0
        m = -m;
  4035fe:	bfbc      	itt	lt
  403600:	4252      	neglt	r2, r2
  403602:	b213      	sxthlt	r3, r2
      }
      m = m - (pcb->sv >> 2);
  403604:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
      pcb->sv += m;
  403608:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
  40360c:	4413      	add	r3, r2
  40360e:	b29b      	uxth	r3, r3
  403610:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  403614:	eb03 03e1 	add.w	r3, r3, r1, asr #3
  403618:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  40361c:	2300      	movs	r3, #0
  40361e:	63a3      	str	r3, [r4, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  403620:	4b82      	ldr	r3, [pc, #520]	; (40382c <tcp_receive+0x528>)
  403622:	881b      	ldrh	r3, [r3, #0]
  403624:	2b00      	cmp	r3, #0
  403626:	f000 8298 	beq.w	403b5a <tcp_receive+0x856>
  40362a:	7e22      	ldrb	r2, [r4, #24]
  40362c:	2a06      	cmp	r2, #6
  40362e:	f200 8294 	bhi.w	403b5a <tcp_receive+0x856>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  403632:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403634:	4a7e      	ldr	r2, [pc, #504]	; (403830 <tcp_receive+0x52c>)
  403636:	6812      	ldr	r2, [r2, #0]
  403638:	1a8d      	subs	r5, r1, r2
  40363a:	2d01      	cmp	r5, #1
  40363c:	d42e      	bmi.n	40369c <tcp_receive+0x398>
  40363e:	1c48      	adds	r0, r1, #1
  403640:	1a80      	subs	r0, r0, r2
  403642:	1ac3      	subs	r3, r0, r3
  403644:	2b00      	cmp	r3, #0
  403646:	dc29      	bgt.n	40369c <tcp_receive+0x398>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  403648:	462b      	mov	r3, r5
      p = inseg.p;
  40364a:	4a7a      	ldr	r2, [pc, #488]	; (403834 <tcp_receive+0x530>)
  40364c:	6850      	ldr	r0, [r2, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
  40364e:	8942      	ldrh	r2, [r0, #10]
  403650:	4295      	cmp	r5, r2
  403652:	dd0f      	ble.n	403674 <tcp_receive+0x370>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  403654:	8901      	ldrh	r1, [r0, #8]
  403656:	1b49      	subs	r1, r1, r5
  403658:	b289      	uxth	r1, r1
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
  40365a:	2500      	movs	r5, #0
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
          off -= p->len;
  40365c:	1a9b      	subs	r3, r3, r2
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  40365e:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  403660:	8145      	strh	r5, [r0, #10]
          p = p->next;
  403662:	6800      	ldr	r0, [r0, #0]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
  403664:	8942      	ldrh	r2, [r0, #10]
  403666:	429a      	cmp	r2, r3
  403668:	dbf8      	blt.n	40365c <tcp_receive+0x358>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
  40366a:	4259      	negs	r1, r3
  40366c:	b209      	sxth	r1, r1
  40366e:	4b72      	ldr	r3, [pc, #456]	; (403838 <tcp_receive+0x534>)
  403670:	4798      	blx	r3
  403672:	e003      	b.n	40367c <tcp_receive+0x378>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  403674:	4269      	negs	r1, r5
  403676:	b209      	sxth	r1, r1
  403678:	4b6f      	ldr	r3, [pc, #444]	; (403838 <tcp_receive+0x534>)
  40367a:	4798      	blx	r3
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  40367c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40367e:	496d      	ldr	r1, [pc, #436]	; (403834 <tcp_receive+0x530>)
  403680:	486b      	ldr	r0, [pc, #428]	; (403830 <tcp_receive+0x52c>)
  403682:	6805      	ldr	r5, [r0, #0]
  403684:	890b      	ldrh	r3, [r1, #8]
  403686:	442b      	add	r3, r5
  403688:	1a9b      	subs	r3, r3, r2
  40368a:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  40368c:	68cb      	ldr	r3, [r1, #12]
  40368e:	6002      	str	r2, [r0, #0]
  403690:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403692:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403694:	1a53      	subs	r3, r2, r1
  403696:	2b00      	cmp	r3, #0
  403698:	da08      	bge.n	4036ac <tcp_receive+0x3a8>
  40369a:	e259      	b.n	403b50 <tcp_receive+0x84c>
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  40369c:	1a53      	subs	r3, r2, r1
  40369e:	2b00      	cmp	r3, #0
  4036a0:	da04      	bge.n	4036ac <tcp_receive+0x3a8>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  4036a2:	7fa3      	ldrb	r3, [r4, #30]
  4036a4:	f043 0302 	orr.w	r3, r3, #2
  4036a8:	77a3      	strb	r3, [r4, #30]
  4036aa:	e251      	b.n	403b50 <tcp_receive+0x84c>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4036ac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4036ae:	f1c3 0301 	rsb	r3, r3, #1
  4036b2:	4413      	add	r3, r2
  4036b4:	1a5b      	subs	r3, r3, r1
  4036b6:	2b00      	cmp	r3, #0
  4036b8:	f300 824a 	bgt.w	403b50 <tcp_receive+0x84c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  4036bc:	428a      	cmp	r2, r1
  4036be:	f040 8166 	bne.w	40398e <tcp_receive+0x68a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  4036c2:	4b5c      	ldr	r3, [pc, #368]	; (403834 <tcp_receive+0x530>)
  4036c4:	891d      	ldrh	r5, [r3, #8]
  4036c6:	68db      	ldr	r3, [r3, #12]
  4036c8:	8998      	ldrh	r0, [r3, #12]
  4036ca:	4b56      	ldr	r3, [pc, #344]	; (403824 <tcp_receive+0x520>)
  4036cc:	4798      	blx	r3
  4036ce:	f010 0003 	ands.w	r0, r0, #3
  4036d2:	bf18      	it	ne
  4036d4:	2001      	movne	r0, #1
  4036d6:	182b      	adds	r3, r5, r0
  4036d8:	b29b      	uxth	r3, r3
  4036da:	4a54      	ldr	r2, [pc, #336]	; (40382c <tcp_receive+0x528>)
  4036dc:	8013      	strh	r3, [r2, #0]

        if (tcplen > pcb->rcv_wnd) {
  4036de:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  4036e0:	429a      	cmp	r2, r3
  4036e2:	d235      	bcs.n	403750 <tcp_receive+0x44c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4036e4:	4b53      	ldr	r3, [pc, #332]	; (403834 <tcp_receive+0x530>)
  4036e6:	68db      	ldr	r3, [r3, #12]
  4036e8:	8998      	ldrh	r0, [r3, #12]
  4036ea:	4b4e      	ldr	r3, [pc, #312]	; (403824 <tcp_receive+0x520>)
  4036ec:	4798      	blx	r3
  4036ee:	f010 0f01 	tst.w	r0, #1
  4036f2:	d00d      	beq.n	403710 <tcp_receive+0x40c>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  4036f4:	4b4f      	ldr	r3, [pc, #316]	; (403834 <tcp_receive+0x530>)
  4036f6:	68de      	ldr	r6, [r3, #12]
  4036f8:	89b5      	ldrh	r5, [r6, #12]
  4036fa:	4628      	mov	r0, r5
  4036fc:	4b49      	ldr	r3, [pc, #292]	; (403824 <tcp_receive+0x520>)
  4036fe:	4798      	blx	r3
  403700:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403704:	4b4d      	ldr	r3, [pc, #308]	; (40383c <tcp_receive+0x538>)
  403706:	4798      	blx	r3
  403708:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  40370c:	4328      	orrs	r0, r5
  40370e:	81b0      	strh	r0, [r6, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
  403710:	4b48      	ldr	r3, [pc, #288]	; (403834 <tcp_receive+0x530>)
  403712:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403714:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403716:	68db      	ldr	r3, [r3, #12]
  403718:	8998      	ldrh	r0, [r3, #12]
  40371a:	4b42      	ldr	r3, [pc, #264]	; (403824 <tcp_receive+0x520>)
  40371c:	4798      	blx	r3
  40371e:	f000 0002 	and.w	r0, r0, #2
  403722:	b283      	uxth	r3, r0
  403724:	b11b      	cbz	r3, 40372e <tcp_receive+0x42a>
            inseg.len -= 1;
  403726:	4a43      	ldr	r2, [pc, #268]	; (403834 <tcp_receive+0x530>)
  403728:	8913      	ldrh	r3, [r2, #8]
  40372a:	3b01      	subs	r3, #1
  40372c:	8113      	strh	r3, [r2, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  40372e:	4d41      	ldr	r5, [pc, #260]	; (403834 <tcp_receive+0x530>)
  403730:	8929      	ldrh	r1, [r5, #8]
  403732:	6868      	ldr	r0, [r5, #4]
  403734:	4b42      	ldr	r3, [pc, #264]	; (403840 <tcp_receive+0x53c>)
  403736:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  403738:	892e      	ldrh	r6, [r5, #8]
  40373a:	68eb      	ldr	r3, [r5, #12]
  40373c:	8998      	ldrh	r0, [r3, #12]
  40373e:	4b39      	ldr	r3, [pc, #228]	; (403824 <tcp_receive+0x520>)
  403740:	4798      	blx	r3
  403742:	f010 0003 	ands.w	r0, r0, #3
  403746:	bf18      	it	ne
  403748:	2001      	movne	r0, #1
  40374a:	4430      	add	r0, r6
  40374c:	4b37      	ldr	r3, [pc, #220]	; (40382c <tcp_receive+0x528>)
  40374e:	8018      	strh	r0, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  403750:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403752:	2b00      	cmp	r3, #0
  403754:	f000 809b 	beq.w	40388e <tcp_receive+0x58a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403758:	4b36      	ldr	r3, [pc, #216]	; (403834 <tcp_receive+0x530>)
  40375a:	68db      	ldr	r3, [r3, #12]
  40375c:	8998      	ldrh	r0, [r3, #12]
  40375e:	4b31      	ldr	r3, [pc, #196]	; (403824 <tcp_receive+0x520>)
  403760:	4798      	blx	r3
  403762:	f010 0f01 	tst.w	r0, #1
  403766:	d00b      	beq.n	403780 <tcp_receive+0x47c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  403768:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40376a:	2800      	cmp	r0, #0
  40376c:	f000 808f 	beq.w	40388e <tcp_receive+0x58a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
  403770:	4d34      	ldr	r5, [pc, #208]	; (403844 <tcp_receive+0x540>)
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
  403772:	6803      	ldr	r3, [r0, #0]
  403774:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  403776:	47a8      	blx	r5
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  403778:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40377a:	2800      	cmp	r0, #0
  40377c:	d1f9      	bne.n	403772 <tcp_receive+0x46e>
  40377e:	e086      	b.n	40388e <tcp_receive+0x58a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
  403780:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  403784:	f1b9 0f00 	cmp.w	r9, #0
  403788:	f000 81fd 	beq.w	403b86 <tcp_receive+0x882>
                   TCP_SEQ_GEQ(seqno + tcplen,
  40378c:	f8d9 100c 	ldr.w	r1, [r9, #12]
  403790:	4b26      	ldr	r3, [pc, #152]	; (40382c <tcp_receive+0x528>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  403792:	881b      	ldrh	r3, [r3, #0]
                   TCP_SEQ_GEQ(seqno + tcplen,
  403794:	684a      	ldr	r2, [r1, #4]
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  403796:	1a9a      	subs	r2, r3, r2
                   TCP_SEQ_GEQ(seqno + tcplen,
  403798:	4b25      	ldr	r3, [pc, #148]	; (403830 <tcp_receive+0x52c>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  40379a:	681b      	ldr	r3, [r3, #0]
  40379c:	4413      	add	r3, r2
  40379e:	f8b9 2008 	ldrh.w	r2, [r9, #8]
  4037a2:	1a9b      	subs	r3, r3, r2
  4037a4:	2b00      	cmp	r3, #0
  4037a6:	f2c0 81f0 	blt.w	403b8a <tcp_receive+0x886>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  4037aa:	4e1e      	ldr	r6, [pc, #120]	; (403824 <tcp_receive+0x520>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  4037ac:	4f21      	ldr	r7, [pc, #132]	; (403834 <tcp_receive+0x530>)
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  4037ae:	f8df 808c 	ldr.w	r8, [pc, #140]	; 40383c <tcp_receive+0x538>
  4037b2:	e000      	b.n	4037b6 <tcp_receive+0x4b2>
                tcplen = TCP_TCPLEN(&inseg);
              }
              prev = next;
              next = next->next;
  4037b4:	46a9      	mov	r9, r5
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  4037b6:	8988      	ldrh	r0, [r1, #12]
  4037b8:	47b0      	blx	r6
  4037ba:	f010 0f01 	tst.w	r0, #1
  4037be:	d01a      	beq.n	4037f6 <tcp_receive+0x4f2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  4037c0:	68fb      	ldr	r3, [r7, #12]
  4037c2:	8998      	ldrh	r0, [r3, #12]
  4037c4:	47b0      	blx	r6
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  4037c6:	f000 0002 	and.w	r0, r0, #2
  4037ca:	b283      	uxth	r3, r0
  4037cc:	b99b      	cbnz	r3, 4037f6 <tcp_receive+0x4f2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  4037ce:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  4037d2:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  4037d6:	2001      	movs	r0, #1
  4037d8:	47c0      	blx	r8
  4037da:	4328      	orrs	r0, r5
  4037dc:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  4037e0:	893d      	ldrh	r5, [r7, #8]
  4037e2:	68fb      	ldr	r3, [r7, #12]
  4037e4:	8998      	ldrh	r0, [r3, #12]
  4037e6:	47b0      	blx	r6
  4037e8:	f010 0003 	ands.w	r0, r0, #3
  4037ec:	bf18      	it	ne
  4037ee:	2001      	movne	r0, #1
  4037f0:	4428      	add	r0, r5
  4037f2:	4b0e      	ldr	r3, [pc, #56]	; (40382c <tcp_receive+0x528>)
  4037f4:	8018      	strh	r0, [r3, #0]
              }
              prev = next;
              next = next->next;
  4037f6:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  4037fa:	4648      	mov	r0, r9
  4037fc:	4b11      	ldr	r3, [pc, #68]	; (403844 <tcp_receive+0x540>)
  4037fe:	4798      	blx	r3
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  403800:	2d00      	cmp	r5, #0
  403802:	f000 81c0 	beq.w	403b86 <tcp_receive+0x882>
                   TCP_SEQ_GEQ(seqno + tcplen,
  403806:	68e9      	ldr	r1, [r5, #12]
  403808:	4b08      	ldr	r3, [pc, #32]	; (40382c <tcp_receive+0x528>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  40380a:	881b      	ldrh	r3, [r3, #0]
                   TCP_SEQ_GEQ(seqno + tcplen,
  40380c:	684a      	ldr	r2, [r1, #4]
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  40380e:	1a9a      	subs	r2, r3, r2
                   TCP_SEQ_GEQ(seqno + tcplen,
  403810:	4b07      	ldr	r3, [pc, #28]	; (403830 <tcp_receive+0x52c>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  403812:	681b      	ldr	r3, [r3, #0]
  403814:	4413      	add	r3, r2
  403816:	892a      	ldrh	r2, [r5, #8]
  403818:	1a9b      	subs	r3, r3, r2
  40381a:	2b00      	cmp	r3, #0
  40381c:	daca      	bge.n	4037b4 <tcp_receive+0x4b0>
  40381e:	e1b5      	b.n	403b8c <tcp_receive+0x888>
  403820:	200023ec 	.word	0x200023ec
  403824:	00400f11 	.word	0x00400f11
  403828:	2000476c 	.word	0x2000476c
  40382c:	200023e8 	.word	0x200023e8
  403830:	200023e4 	.word	0x200023e4
  403834:	200023f8 	.word	0x200023f8
  403838:	004022fd 	.word	0x004022fd
  40383c:	00400f05 	.word	0x00400f05
  403840:	00402529 	.word	0x00402529
  403844:	00402799 	.word	0x00402799
  403848:	00400f35 	.word	0x00400f35
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  40384c:	4b83      	ldr	r3, [pc, #524]	; (403a5c <tcp_receive+0x758>)
  40384e:	1a52      	subs	r2, r2, r1
  403850:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403852:	68db      	ldr	r3, [r3, #12]
  403854:	8998      	ldrh	r0, [r3, #12]
  403856:	4b82      	ldr	r3, [pc, #520]	; (403a60 <tcp_receive+0x75c>)
  403858:	4798      	blx	r3
  40385a:	f000 0002 	and.w	r0, r0, #2
  40385e:	b283      	uxth	r3, r0
  403860:	b11b      	cbz	r3, 40386a <tcp_receive+0x566>
                inseg.len -= 1;
  403862:	4a7e      	ldr	r2, [pc, #504]	; (403a5c <tcp_receive+0x758>)
  403864:	8913      	ldrh	r3, [r2, #8]
  403866:	3b01      	subs	r3, #1
  403868:	8113      	strh	r3, [r2, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  40386a:	4e7c      	ldr	r6, [pc, #496]	; (403a5c <tcp_receive+0x758>)
  40386c:	8931      	ldrh	r1, [r6, #8]
  40386e:	6870      	ldr	r0, [r6, #4]
  403870:	4b7c      	ldr	r3, [pc, #496]	; (403a64 <tcp_receive+0x760>)
  403872:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  403874:	8937      	ldrh	r7, [r6, #8]
  403876:	68f3      	ldr	r3, [r6, #12]
  403878:	8998      	ldrh	r0, [r3, #12]
  40387a:	4b79      	ldr	r3, [pc, #484]	; (403a60 <tcp_receive+0x75c>)
  40387c:	4798      	blx	r3
  40387e:	f010 0003 	ands.w	r0, r0, #3
  403882:	bf18      	it	ne
  403884:	2001      	movne	r0, #1
  403886:	4438      	add	r0, r7
  403888:	4b77      	ldr	r3, [pc, #476]	; (403a68 <tcp_receive+0x764>)
  40388a:	8018      	strh	r0, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  40388c:	6765      	str	r5, [r4, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  40388e:	4b76      	ldr	r3, [pc, #472]	; (403a68 <tcp_receive+0x764>)
  403890:	8819      	ldrh	r1, [r3, #0]
  403892:	4b76      	ldr	r3, [pc, #472]	; (403a6c <tcp_receive+0x768>)
  403894:	681a      	ldr	r2, [r3, #0]
  403896:	440a      	add	r2, r1
  403898:	62a2      	str	r2, [r4, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
  40389a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  40389c:	1a5b      	subs	r3, r3, r1
  40389e:	85a3      	strh	r3, [r4, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  4038a0:	4620      	mov	r0, r4
  4038a2:	4b73      	ldr	r3, [pc, #460]	; (403a70 <tcp_receive+0x76c>)
  4038a4:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  4038a6:	4b6d      	ldr	r3, [pc, #436]	; (403a5c <tcp_receive+0x758>)
  4038a8:	685b      	ldr	r3, [r3, #4]
  4038aa:	891a      	ldrh	r2, [r3, #8]
  4038ac:	b122      	cbz	r2, 4038b8 <tcp_receive+0x5b4>
          recv_data = inseg.p;
  4038ae:	4a71      	ldr	r2, [pc, #452]	; (403a74 <tcp_receive+0x770>)
  4038b0:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  4038b2:	2200      	movs	r2, #0
  4038b4:	4b69      	ldr	r3, [pc, #420]	; (403a5c <tcp_receive+0x758>)
  4038b6:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4038b8:	4b68      	ldr	r3, [pc, #416]	; (403a5c <tcp_receive+0x758>)
  4038ba:	68db      	ldr	r3, [r3, #12]
  4038bc:	8998      	ldrh	r0, [r3, #12]
  4038be:	4b68      	ldr	r3, [pc, #416]	; (403a60 <tcp_receive+0x75c>)
  4038c0:	4798      	blx	r3
  4038c2:	f010 0f01 	tst.w	r0, #1
  4038c6:	d004      	beq.n	4038d2 <tcp_receive+0x5ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  4038c8:	4a6b      	ldr	r2, [pc, #428]	; (403a78 <tcp_receive+0x774>)
  4038ca:	7813      	ldrb	r3, [r2, #0]
  4038cc:	f043 0320 	orr.w	r3, r3, #32
  4038d0:	7013      	strb	r3, [r2, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  4038d2:	6f65      	ldr	r5, [r4, #116]	; 0x74
  4038d4:	2d00      	cmp	r5, #0
  4038d6:	d04d      	beq.n	403974 <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  4038d8:	68eb      	ldr	r3, [r5, #12]
  4038da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4038dc:	6859      	ldr	r1, [r3, #4]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  4038de:	4291      	cmp	r1, r2
  4038e0:	d148      	bne.n	403974 <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
  4038e2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 403a6c <tcp_receive+0x768>

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  4038e6:	4f5e      	ldr	r7, [pc, #376]	; (403a60 <tcp_receive+0x75c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);

          tcp_update_rcv_ann_wnd(pcb);
  4038e8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 403a70 <tcp_receive+0x76c>
           are now in sequence. */
        while (pcb->ooseq != NULL &&
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
  4038ec:	f8c9 2000 	str.w	r2, [r9]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  4038f0:	892e      	ldrh	r6, [r5, #8]
  4038f2:	8998      	ldrh	r0, [r3, #12]
  4038f4:	47b8      	blx	r7
  4038f6:	f010 0003 	ands.w	r0, r0, #3
  4038fa:	bf18      	it	ne
  4038fc:	2001      	movne	r0, #1
  4038fe:	4406      	add	r6, r0
  403900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403902:	441e      	add	r6, r3
  403904:	62a6      	str	r6, [r4, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  403906:	892e      	ldrh	r6, [r5, #8]
  403908:	68eb      	ldr	r3, [r5, #12]
  40390a:	8998      	ldrh	r0, [r3, #12]
  40390c:	47b8      	blx	r7
  40390e:	f010 0003 	ands.w	r0, r0, #3
  403912:	bf18      	it	ne
  403914:	2001      	movne	r0, #1
  403916:	4406      	add	r6, r0
  403918:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  40391a:	1b9b      	subs	r3, r3, r6
  40391c:	85a3      	strh	r3, [r4, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  40391e:	4620      	mov	r0, r4
  403920:	47c0      	blx	r8

          if (cseg->p->tot_len > 0) {
  403922:	6869      	ldr	r1, [r5, #4]
  403924:	890b      	ldrh	r3, [r1, #8]
  403926:	b14b      	cbz	r3, 40393c <tcp_receive+0x638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  403928:	4b52      	ldr	r3, [pc, #328]	; (403a74 <tcp_receive+0x770>)
  40392a:	6818      	ldr	r0, [r3, #0]
  40392c:	b110      	cbz	r0, 403934 <tcp_receive+0x630>
              pbuf_cat(recv_data, cseg->p);
  40392e:	4b53      	ldr	r3, [pc, #332]	; (403a7c <tcp_receive+0x778>)
  403930:	4798      	blx	r3
  403932:	e001      	b.n	403938 <tcp_receive+0x634>
            } else {
              recv_data = cseg->p;
  403934:	4b4f      	ldr	r3, [pc, #316]	; (403a74 <tcp_receive+0x770>)
  403936:	6019      	str	r1, [r3, #0]
            }
            cseg->p = NULL;
  403938:	2300      	movs	r3, #0
  40393a:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  40393c:	68eb      	ldr	r3, [r5, #12]
  40393e:	8998      	ldrh	r0, [r3, #12]
  403940:	47b8      	blx	r7
  403942:	f010 0f01 	tst.w	r0, #1
  403946:	d009      	beq.n	40395c <tcp_receive+0x658>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  403948:	4a4b      	ldr	r2, [pc, #300]	; (403a78 <tcp_receive+0x774>)
  40394a:	7813      	ldrb	r3, [r2, #0]
  40394c:	f043 0320 	orr.w	r3, r3, #32
  403950:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  403952:	7e23      	ldrb	r3, [r4, #24]
  403954:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
  403956:	bf04      	itt	eq
  403958:	2307      	moveq	r3, #7
  40395a:	7623      	strbeq	r3, [r4, #24]
            } 
          }

          pcb->ooseq = cseg->next;
  40395c:	682b      	ldr	r3, [r5, #0]
  40395e:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
  403960:	4628      	mov	r0, r5
  403962:	4b47      	ldr	r3, [pc, #284]	; (403a80 <tcp_receive+0x77c>)
  403964:	4798      	blx	r3
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  403966:	6f65      	ldr	r5, [r4, #116]	; 0x74
  403968:	b125      	cbz	r5, 403974 <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  40396a:	68eb      	ldr	r3, [r5, #12]
  40396c:	685a      	ldr	r2, [r3, #4]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  40396e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403970:	428a      	cmp	r2, r1
  403972:	d0bb      	beq.n	4038ec <tcp_receive+0x5e8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  403974:	7fa3      	ldrb	r3, [r4, #30]
  403976:	f013 0f01 	tst.w	r3, #1
  40397a:	bf1a      	itte	ne
  40397c:	f023 0301 	bicne.w	r3, r3, #1
  403980:	f043 0302 	orrne.w	r3, r3, #2
  403984:	f043 0301 	orreq.w	r3, r3, #1
  403988:	77a3      	strb	r3, [r4, #30]
  40398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  40398e:	4620      	mov	r0, r4
  403990:	4b3c      	ldr	r3, [pc, #240]	; (403a84 <tcp_receive+0x780>)
  403992:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  403994:	6f66      	ldr	r6, [r4, #116]	; 0x74
  403996:	b15e      	cbz	r6, 4039b0 <tcp_receive+0x6ac>
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  403998:	68f1      	ldr	r1, [r6, #12]
  40399a:	684a      	ldr	r2, [r1, #4]
  40399c:	4b33      	ldr	r3, [pc, #204]	; (403a6c <tcp_receive+0x768>)
  40399e:	6818      	ldr	r0, [r3, #0]
  4039a0:	4282      	cmp	r2, r0
  4039a2:	d00b      	beq.n	4039bc <tcp_receive+0x6b8>
  4039a4:	2700      	movs	r7, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  4039a6:	f100 3eff 	add.w	lr, r0, #4294967295
  4039aa:	f100 0c01 	add.w	ip, r0, #1
  4039ae:	e01e      	b.n	4039ee <tcp_receive+0x6ea>
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
          pcb->ooseq = tcp_seg_copy(&inseg);
  4039b0:	482a      	ldr	r0, [pc, #168]	; (403a5c <tcp_receive+0x758>)
  4039b2:	4b35      	ldr	r3, [pc, #212]	; (403a88 <tcp_receive+0x784>)
  4039b4:	4798      	blx	r3
  4039b6:	6760      	str	r0, [r4, #116]	; 0x74
  4039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  4039bc:	4635      	mov	r5, r6
  4039be:	2600      	movs	r6, #0
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  4039c0:	4b26      	ldr	r3, [pc, #152]	; (403a5c <tcp_receive+0x758>)
  4039c2:	891a      	ldrh	r2, [r3, #8]
  4039c4:	892b      	ldrh	r3, [r5, #8]
  4039c6:	429a      	cmp	r2, r3
  4039c8:	f240 80f4 	bls.w	403bb4 <tcp_receive+0x8b0>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  4039cc:	4823      	ldr	r0, [pc, #140]	; (403a5c <tcp_receive+0x758>)
  4039ce:	4b2e      	ldr	r3, [pc, #184]	; (403a88 <tcp_receive+0x784>)
  4039d0:	4798      	blx	r3
                if (cseg != NULL) {
  4039d2:	4603      	mov	r3, r0
  4039d4:	2800      	cmp	r0, #0
  4039d6:	f000 80ed 	beq.w	403bb4 <tcp_receive+0x8b0>
                  if (prev != NULL) {
  4039da:	b10e      	cbz	r6, 4039e0 <tcp_receive+0x6dc>
                    prev->next = cseg;
  4039dc:	6030      	str	r0, [r6, #0]
  4039de:	e000      	b.n	4039e2 <tcp_receive+0x6de>
                  } else {
                    pcb->ooseq = cseg;
  4039e0:	6760      	str	r0, [r4, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  4039e2:	4629      	mov	r1, r5
  4039e4:	4618      	mov	r0, r3
  4039e6:	4b29      	ldr	r3, [pc, #164]	; (403a8c <tcp_receive+0x788>)
  4039e8:	4798      	blx	r3
  4039ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  4039ee:	b977      	cbnz	r7, 403a0e <tcp_receive+0x70a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  4039f0:	1a83      	subs	r3, r0, r2
  4039f2:	2b00      	cmp	r3, #0
  4039f4:	da4c      	bge.n	403a90 <tcp_receive+0x78c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  4039f6:	4819      	ldr	r0, [pc, #100]	; (403a5c <tcp_receive+0x758>)
  4039f8:	4b23      	ldr	r3, [pc, #140]	; (403a88 <tcp_receive+0x784>)
  4039fa:	4798      	blx	r3
                  if (cseg != NULL) {
  4039fc:	2800      	cmp	r0, #0
  4039fe:	f000 80d9 	beq.w	403bb4 <tcp_receive+0x8b0>
                    pcb->ooseq = cseg;
  403a02:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  403a04:	4631      	mov	r1, r6
  403a06:	4b21      	ldr	r3, [pc, #132]	; (403a8c <tcp_receive+0x788>)
  403a08:	4798      	blx	r3
  403a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  403a0e:	68fb      	ldr	r3, [r7, #12]
  403a10:	685b      	ldr	r3, [r3, #4]
  403a12:	ebc3 030e 	rsb	r3, r3, lr
  403a16:	2b00      	cmp	r3, #0
  403a18:	db3a      	blt.n	403a90 <tcp_receive+0x78c>
  403a1a:	ebc2 030c 	rsb	r3, r2, ip
  403a1e:	2b00      	cmp	r3, #0
  403a20:	dc36      	bgt.n	403a90 <tcp_receive+0x78c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  403a22:	480e      	ldr	r0, [pc, #56]	; (403a5c <tcp_receive+0x758>)
  403a24:	4b18      	ldr	r3, [pc, #96]	; (403a88 <tcp_receive+0x784>)
  403a26:	4798      	blx	r3
                  if (cseg != NULL) {
  403a28:	4604      	mov	r4, r0
  403a2a:	2800      	cmp	r0, #0
  403a2c:	f000 80c2 	beq.w	403bb4 <tcp_receive+0x8b0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  403a30:	68fb      	ldr	r3, [r7, #12]
  403a32:	6859      	ldr	r1, [r3, #4]
  403a34:	4b0d      	ldr	r3, [pc, #52]	; (403a6c <tcp_receive+0x768>)
  403a36:	681b      	ldr	r3, [r3, #0]
  403a38:	893a      	ldrh	r2, [r7, #8]
  403a3a:	1ad2      	subs	r2, r2, r3
  403a3c:	440a      	add	r2, r1
  403a3e:	2a00      	cmp	r2, #0
  403a40:	dd05      	ble.n	403a4e <tcp_receive+0x74a>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  403a42:	1a5b      	subs	r3, r3, r1
  403a44:	b299      	uxth	r1, r3
  403a46:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  403a48:	6878      	ldr	r0, [r7, #4]
  403a4a:	4b06      	ldr	r3, [pc, #24]	; (403a64 <tcp_receive+0x760>)
  403a4c:	4798      	blx	r3
                    }
                    prev->next = cseg;
  403a4e:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  403a50:	4631      	mov	r1, r6
  403a52:	4620      	mov	r0, r4
  403a54:	4b0d      	ldr	r3, [pc, #52]	; (403a8c <tcp_receive+0x788>)
  403a56:	4798      	blx	r3
  403a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a5c:	200023f8 	.word	0x200023f8
  403a60:	00400f11 	.word	0x00400f11
  403a64:	00402529 	.word	0x00402529
  403a68:	200023e8 	.word	0x200023e8
  403a6c:	200023e4 	.word	0x200023e4
  403a70:	0040271d 	.word	0x0040271d
  403a74:	200023f4 	.word	0x200023f4
  403a78:	200023f1 	.word	0x200023f1
  403a7c:	004025ad 	.word	0x004025ad
  403a80:	00402799 	.word	0x00402799
  403a84:	00404869 	.word	0x00404869
  403a88:	004027d9 	.word	0x004027d9
  403a8c:	00403231 	.word	0x00403231
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  403a90:	6835      	ldr	r5, [r6, #0]
  403a92:	2d00      	cmp	r5, #0
  403a94:	f040 8086 	bne.w	403ba4 <tcp_receive+0x8a0>
  403a98:	1a82      	subs	r2, r0, r2
  403a9a:	2a00      	cmp	r2, #0
  403a9c:	f340 808a 	ble.w	403bb4 <tcp_receive+0x8b0>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403aa0:	8988      	ldrh	r0, [r1, #12]
  403aa2:	4b45      	ldr	r3, [pc, #276]	; (403bb8 <tcp_receive+0x8b4>)
  403aa4:	4798      	blx	r3
  403aa6:	f010 0f01 	tst.w	r0, #1
  403aaa:	f040 8083 	bne.w	403bb4 <tcp_receive+0x8b0>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  403aae:	4843      	ldr	r0, [pc, #268]	; (403bbc <tcp_receive+0x8b8>)
  403ab0:	4b43      	ldr	r3, [pc, #268]	; (403bc0 <tcp_receive+0x8bc>)
  403ab2:	4798      	blx	r3
  403ab4:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  403ab6:	2800      	cmp	r0, #0
  403ab8:	d07c      	beq.n	403bb4 <tcp_receive+0x8b0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  403aba:	68f3      	ldr	r3, [r6, #12]
  403abc:	6859      	ldr	r1, [r3, #4]
  403abe:	4b41      	ldr	r3, [pc, #260]	; (403bc4 <tcp_receive+0x8c0>)
  403ac0:	681b      	ldr	r3, [r3, #0]
  403ac2:	8932      	ldrh	r2, [r6, #8]
  403ac4:	1ad2      	subs	r2, r2, r3
  403ac6:	440a      	add	r2, r1
  403ac8:	2a00      	cmp	r2, #0
  403aca:	dd05      	ble.n	403ad8 <tcp_receive+0x7d4>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  403acc:	1a5b      	subs	r3, r3, r1
  403ace:	b299      	uxth	r1, r3
  403ad0:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  403ad2:	6870      	ldr	r0, [r6, #4]
  403ad4:	4b3c      	ldr	r3, [pc, #240]	; (403bc8 <tcp_receive+0x8c4>)
  403ad6:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  403ad8:	4b3c      	ldr	r3, [pc, #240]	; (403bcc <tcp_receive+0x8c8>)
  403ada:	881a      	ldrh	r2, [r3, #0]
  403adc:	4b39      	ldr	r3, [pc, #228]	; (403bc4 <tcp_receive+0x8c0>)
  403ade:	681b      	ldr	r3, [r3, #0]
  403ae0:	441a      	add	r2, r3
  403ae2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
  403ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403ae6:	440b      	add	r3, r1
  403ae8:	429a      	cmp	r2, r3
  403aea:	d963      	bls.n	403bb4 <tcp_receive+0x8b0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  403aec:	6833      	ldr	r3, [r6, #0]
  403aee:	68db      	ldr	r3, [r3, #12]
  403af0:	8998      	ldrh	r0, [r3, #12]
  403af2:	4b31      	ldr	r3, [pc, #196]	; (403bb8 <tcp_receive+0x8b4>)
  403af4:	4798      	blx	r3
  403af6:	f010 0f01 	tst.w	r0, #1
  403afa:	d00d      	beq.n	403b18 <tcp_receive+0x814>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  403afc:	6833      	ldr	r3, [r6, #0]
  403afe:	68df      	ldr	r7, [r3, #12]
  403b00:	89bd      	ldrh	r5, [r7, #12]
  403b02:	4628      	mov	r0, r5
  403b04:	4b2c      	ldr	r3, [pc, #176]	; (403bb8 <tcp_receive+0x8b4>)
  403b06:	4798      	blx	r3
  403b08:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403b0c:	4b30      	ldr	r3, [pc, #192]	; (403bd0 <tcp_receive+0x8cc>)
  403b0e:	4798      	blx	r3
  403b10:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  403b14:	4328      	orrs	r0, r5
  403b16:	81b8      	strh	r0, [r7, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  403b18:	6832      	ldr	r2, [r6, #0]
  403b1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403b1c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403b1e:	440b      	add	r3, r1
  403b20:	4928      	ldr	r1, [pc, #160]	; (403bc4 <tcp_receive+0x8c0>)
  403b22:	6809      	ldr	r1, [r1, #0]
  403b24:	1a5b      	subs	r3, r3, r1
  403b26:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  403b28:	6833      	ldr	r3, [r6, #0]
  403b2a:	8919      	ldrh	r1, [r3, #8]
  403b2c:	6858      	ldr	r0, [r3, #4]
  403b2e:	4b26      	ldr	r3, [pc, #152]	; (403bc8 <tcp_receive+0x8c4>)
  403b30:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  403b32:	6833      	ldr	r3, [r6, #0]
  403b34:	891c      	ldrh	r4, [r3, #8]
  403b36:	68db      	ldr	r3, [r3, #12]
  403b38:	8998      	ldrh	r0, [r3, #12]
  403b3a:	4b1f      	ldr	r3, [pc, #124]	; (403bb8 <tcp_receive+0x8b4>)
  403b3c:	4798      	blx	r3
  403b3e:	f010 0003 	ands.w	r0, r0, #3
  403b42:	bf18      	it	ne
  403b44:	2001      	movne	r0, #1
  403b46:	4420      	add	r0, r4
  403b48:	4b20      	ldr	r3, [pc, #128]	; (403bcc <tcp_receive+0x8c8>)
  403b4a:	8018      	strh	r0, [r3, #0]
  403b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
  403b50:	4620      	mov	r0, r4
  403b52:	4b20      	ldr	r3, [pc, #128]	; (403bd4 <tcp_receive+0x8d0>)
  403b54:	4798      	blx	r3
  403b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  403b5a:	4b1a      	ldr	r3, [pc, #104]	; (403bc4 <tcp_receive+0x8c0>)
  403b5c:	681b      	ldr	r3, [r3, #0]
  403b5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403b60:	1a99      	subs	r1, r3, r2
  403b62:	2900      	cmp	r1, #0
  403b64:	db05      	blt.n	403b72 <tcp_receive+0x86e>
  403b66:	3301      	adds	r3, #1
  403b68:	1a9b      	subs	r3, r3, r2
  403b6a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403b6c:	1a9b      	subs	r3, r3, r2
  403b6e:	2b00      	cmp	r3, #0
  403b70:	dd20      	ble.n	403bb4 <tcp_receive+0x8b0>
      tcp_ack_now(pcb);
  403b72:	7fa3      	ldrb	r3, [r4, #30]
  403b74:	f043 0302 	orr.w	r3, r3, #2
  403b78:	77a3      	strb	r3, [r4, #30]
    }
  }
}
  403b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
  403b7e:	2300      	movs	r3, #0
  403b80:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  403b84:	e43b      	b.n	4033fe <tcp_receive+0xfa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
                tcplen = TCP_TCPLEN(&inseg);
              }
              prev = next;
              next = next->next;
  403b86:	2500      	movs	r5, #0
  403b88:	e680      	b.n	40388c <tcp_receive+0x588>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
  403b8a:	464d      	mov	r5, r9
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
  403b8c:	4b0d      	ldr	r3, [pc, #52]	; (403bc4 <tcp_receive+0x8c0>)
  403b8e:	6819      	ldr	r1, [r3, #0]
  403b90:	68eb      	ldr	r3, [r5, #12]
  403b92:	685a      	ldr	r2, [r3, #4]
  403b94:	4b0d      	ldr	r3, [pc, #52]	; (403bcc <tcp_receive+0x8c8>)
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  403b96:	881b      	ldrh	r3, [r3, #0]
  403b98:	1a9b      	subs	r3, r3, r2
  403b9a:	440b      	add	r3, r1
  403b9c:	2b00      	cmp	r3, #0
  403b9e:	f73f ae55 	bgt.w	40384c <tcp_receive+0x548>
  403ba2:	e673      	b.n	40388c <tcp_receive+0x588>
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  403ba4:	68e9      	ldr	r1, [r5, #12]
  403ba6:	684a      	ldr	r2, [r1, #4]
  403ba8:	4637      	mov	r7, r6
  403baa:	4282      	cmp	r2, r0
  403bac:	f43f af08 	beq.w	4039c0 <tcp_receive+0x6bc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  403bb0:	462e      	mov	r6, r5
  403bb2:	e71c      	b.n	4039ee <tcp_receive+0x6ea>
  403bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bb8:	00400f11 	.word	0x00400f11
  403bbc:	200023f8 	.word	0x200023f8
  403bc0:	004027d9 	.word	0x004027d9
  403bc4:	200023e4 	.word	0x200023e4
  403bc8:	00402529 	.word	0x00402529
  403bcc:	200023e8 	.word	0x200023e8
  403bd0:	00400f05 	.word	0x00400f05
  403bd4:	00404869 	.word	0x00404869

00403bd8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  403bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bdc:	b083      	sub	sp, #12
  403bde:	4604      	mov	r4, r0
  403be0:	460d      	mov	r5, r1
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  403be2:	6843      	ldr	r3, [r0, #4]
  403be4:	7819      	ldrb	r1, [r3, #0]
  403be6:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  403bea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  403bee:	4a89      	ldr	r2, [pc, #548]	; (403e14 <tcp_input+0x23c>)
  403bf0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  403bf2:	0089      	lsls	r1, r1, #2
  403bf4:	4249      	negs	r1, r1
  403bf6:	4b88      	ldr	r3, [pc, #544]	; (403e18 <tcp_input+0x240>)
  403bf8:	4798      	blx	r3
  403bfa:	2800      	cmp	r0, #0
  403bfc:	f040 84a8 	bne.w	404550 <tcp_input+0x978>
  403c00:	8923      	ldrh	r3, [r4, #8]
  403c02:	2b13      	cmp	r3, #19
  403c04:	f240 84a4 	bls.w	404550 <tcp_input+0x978>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  403c08:	4629      	mov	r1, r5
  403c0a:	4b84      	ldr	r3, [pc, #528]	; (403e1c <tcp_input+0x244>)
  403c0c:	6818      	ldr	r0, [r3, #0]
  403c0e:	4b84      	ldr	r3, [pc, #528]	; (403e20 <tcp_input+0x248>)
  403c10:	4798      	blx	r3
  403c12:	2800      	cmp	r0, #0
  403c14:	f040 849c 	bne.w	404550 <tcp_input+0x978>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  403c18:	4b80      	ldr	r3, [pc, #512]	; (403e1c <tcp_input+0x244>)
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  403c1a:	681b      	ldr	r3, [r3, #0]
  403c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  403c20:	2be0      	cmp	r3, #224	; 0xe0
  403c22:	f000 8495 	beq.w	404550 <tcp_input+0x978>
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  403c26:	8923      	ldrh	r3, [r4, #8]
  403c28:	9300      	str	r3, [sp, #0]
  403c2a:	2306      	movs	r3, #6
  403c2c:	4a7b      	ldr	r2, [pc, #492]	; (403e1c <tcp_input+0x244>)
  403c2e:	497d      	ldr	r1, [pc, #500]	; (403e24 <tcp_input+0x24c>)
  403c30:	4620      	mov	r0, r4
  403c32:	4d7d      	ldr	r5, [pc, #500]	; (403e28 <tcp_input+0x250>)
  403c34:	47a8      	blx	r5
  403c36:	2800      	cmp	r0, #0
  403c38:	f040 848a 	bne.w	404550 <tcp_input+0x978>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  403c3c:	4b75      	ldr	r3, [pc, #468]	; (403e14 <tcp_input+0x23c>)
  403c3e:	681b      	ldr	r3, [r3, #0]
  403c40:	8998      	ldrh	r0, [r3, #12]
  403c42:	4b7a      	ldr	r3, [pc, #488]	; (403e2c <tcp_input+0x254>)
  403c44:	4798      	blx	r3
  if(pbuf_header(p, -(hdrlen * 4))){
  403c46:	0b00      	lsrs	r0, r0, #12
  403c48:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
  403c4c:	0081      	lsls	r1, r0, #2
  403c4e:	b209      	sxth	r1, r1
  403c50:	4620      	mov	r0, r4
  403c52:	4b71      	ldr	r3, [pc, #452]	; (403e18 <tcp_input+0x240>)
  403c54:	4798      	blx	r3
  403c56:	2800      	cmp	r0, #0
  403c58:	f040 847a 	bne.w	404550 <tcp_input+0x978>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  403c5c:	4d6d      	ldr	r5, [pc, #436]	; (403e14 <tcp_input+0x23c>)
  403c5e:	682f      	ldr	r7, [r5, #0]
  403c60:	8838      	ldrh	r0, [r7, #0]
  403c62:	4e72      	ldr	r6, [pc, #456]	; (403e2c <tcp_input+0x254>)
  403c64:	47b0      	blx	r6
  403c66:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  403c68:	682f      	ldr	r7, [r5, #0]
  403c6a:	8878      	ldrh	r0, [r7, #2]
  403c6c:	47b0      	blx	r6
  403c6e:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  403c70:	682f      	ldr	r7, [r5, #0]
  403c72:	6878      	ldr	r0, [r7, #4]
  403c74:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 403e5c <tcp_input+0x284>
  403c78:	47c0      	blx	r8
  403c7a:	6078      	str	r0, [r7, #4]
  403c7c:	4b6c      	ldr	r3, [pc, #432]	; (403e30 <tcp_input+0x258>)
  403c7e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  403c80:	682f      	ldr	r7, [r5, #0]
  403c82:	68b8      	ldr	r0, [r7, #8]
  403c84:	47c0      	blx	r8
  403c86:	60b8      	str	r0, [r7, #8]
  403c88:	4b6a      	ldr	r3, [pc, #424]	; (403e34 <tcp_input+0x25c>)
  403c8a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  403c8c:	682f      	ldr	r7, [r5, #0]
  403c8e:	89f8      	ldrh	r0, [r7, #14]
  403c90:	47b0      	blx	r6
  403c92:	81f8      	strh	r0, [r7, #14]

  flags = TCPH_FLAGS(tcphdr);
  403c94:	682b      	ldr	r3, [r5, #0]
  403c96:	8998      	ldrh	r0, [r3, #12]
  403c98:	47b0      	blx	r6
  403c9a:	fa5f fe80 	uxtb.w	lr, r0
  403c9e:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  403ca2:	4b65      	ldr	r3, [pc, #404]	; (403e38 <tcp_input+0x260>)
  403ca4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  403ca6:	f01e 0103 	ands.w	r1, lr, #3
  403caa:	bf18      	it	ne
  403cac:	2101      	movne	r1, #1
  403cae:	8923      	ldrh	r3, [r4, #8]
  403cb0:	4419      	add	r1, r3
  403cb2:	b289      	uxth	r1, r1
  403cb4:	4b61      	ldr	r3, [pc, #388]	; (403e3c <tcp_input+0x264>)
  403cb6:	8019      	strh	r1, [r3, #0]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403cb8:	4b61      	ldr	r3, [pc, #388]	; (403e40 <tcp_input+0x268>)
  403cba:	6818      	ldr	r0, [r3, #0]
  403cbc:	b340      	cbz	r0, 403d10 <tcp_input+0x138>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  403cbe:	682f      	ldr	r7, [r5, #0]
  403cc0:	883e      	ldrh	r6, [r7, #0]
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  403cc2:	4b58      	ldr	r3, [pc, #352]	; (403e24 <tcp_input+0x24c>)
  403cc4:	f8d3 c000 	ldr.w	ip, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  403cc8:	4b54      	ldr	r3, [pc, #336]	; (403e1c <tcp_input+0x244>)
  403cca:	f8d3 8000 	ldr.w	r8, [r3]
  403cce:	4605      	mov	r5, r0
  403cd0:	2200      	movs	r2, #0
  403cd2:	e000      	b.n	403cd6 <tcp_input+0xfe>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403cd4:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  403cd6:	8bab      	ldrh	r3, [r5, #28]
  403cd8:	42b3      	cmp	r3, r6
  403cda:	d111      	bne.n	403d00 <tcp_input+0x128>
  403cdc:	f8b5 901a 	ldrh.w	r9, [r5, #26]
  403ce0:	887b      	ldrh	r3, [r7, #2]
  403ce2:	4599      	cmp	r9, r3
  403ce4:	d10c      	bne.n	403d00 <tcp_input+0x128>
       pcb->local_port == tcphdr->dest &&
  403ce6:	686b      	ldr	r3, [r5, #4]
  403ce8:	4563      	cmp	r3, ip
  403cea:	d109      	bne.n	403d00 <tcp_input+0x128>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  403cec:	682b      	ldr	r3, [r5, #0]
  403cee:	4543      	cmp	r3, r8
  403cf0:	d106      	bne.n	403d00 <tcp_input+0x128>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
  403cf2:	b152      	cbz	r2, 403d0a <tcp_input+0x132>
        prev->next = pcb->next;
  403cf4:	68eb      	ldr	r3, [r5, #12]
  403cf6:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  403cf8:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  403cfa:	4b51      	ldr	r3, [pc, #324]	; (403e40 <tcp_input+0x268>)
  403cfc:	601d      	str	r5, [r3, #0]
  403cfe:	e004      	b.n	403d0a <tcp_input+0x132>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403d00:	68eb      	ldr	r3, [r5, #12]
  403d02:	462a      	mov	r2, r5
  403d04:	2b00      	cmp	r3, #0
  403d06:	d1e5      	bne.n	403cd4 <tcp_input+0xfc>
  403d08:	e002      	b.n	403d10 <tcp_input+0x138>
      break;
    }
    prev = pcb;
  }

  if (pcb == NULL) {
  403d0a:	2d00      	cmp	r5, #0
  403d0c:	f040 80f8 	bne.w	403f00 <tcp_input+0x328>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403d10:	4b4c      	ldr	r3, [pc, #304]	; (403e44 <tcp_input+0x26c>)
  403d12:	6818      	ldr	r0, [r3, #0]
  403d14:	2800      	cmp	r0, #0
  403d16:	d041      	beq.n	403d9c <tcp_input+0x1c4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  403d18:	4b3e      	ldr	r3, [pc, #248]	; (403e14 <tcp_input+0x23c>)
  403d1a:	681e      	ldr	r6, [r3, #0]
  403d1c:	8832      	ldrh	r2, [r6, #0]
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  403d1e:	4b41      	ldr	r3, [pc, #260]	; (403e24 <tcp_input+0x24c>)
  403d20:	f8d3 c000 	ldr.w	ip, [r3]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  403d24:	4b3d      	ldr	r3, [pc, #244]	; (403e1c <tcp_input+0x244>)
  403d26:	681f      	ldr	r7, [r3, #0]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  403d28:	8b83      	ldrh	r3, [r0, #28]
  403d2a:	4293      	cmp	r3, r2
  403d2c:	d133      	bne.n	403d96 <tcp_input+0x1be>
         pcb->local_port == tcphdr->dest &&
  403d2e:	8b43      	ldrh	r3, [r0, #26]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  403d30:	8875      	ldrh	r5, [r6, #2]
  403d32:	429d      	cmp	r5, r3
  403d34:	d12f      	bne.n	403d96 <tcp_input+0x1be>
         pcb->local_port == tcphdr->dest &&
  403d36:	6845      	ldr	r5, [r0, #4]
  403d38:	4565      	cmp	r5, ip
  403d3a:	d12c      	bne.n	403d96 <tcp_input+0x1be>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  403d3c:	6805      	ldr	r5, [r0, #0]
  403d3e:	42bd      	cmp	r5, r7
  403d40:	d129      	bne.n	403d96 <tcp_input+0x1be>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
  403d42:	f01e 0f04 	tst.w	lr, #4
  403d46:	d122      	bne.n	403d8e <tcp_input+0x1b6>
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  403d48:	f01e 0f02 	tst.w	lr, #2
  403d4c:	d012      	beq.n	403d74 <tcp_input+0x19c>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  403d4e:	4d38      	ldr	r5, [pc, #224]	; (403e30 <tcp_input+0x258>)
  403d50:	682e      	ldr	r6, [r5, #0]
  403d52:	6a85      	ldr	r5, [r0, #40]	; 0x28
  403d54:	1b75      	subs	r5, r6, r5
  403d56:	d413      	bmi.n	403d80 <tcp_input+0x1a8>
  403d58:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
  403d5a:	1bed      	subs	r5, r5, r7
  403d5c:	2d00      	cmp	r5, #0
  403d5e:	dc0f      	bgt.n	403d80 <tcp_input+0x1a8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  403d60:	9201      	str	r2, [sp, #4]
  403d62:	9300      	str	r3, [sp, #0]
  403d64:	4b2f      	ldr	r3, [pc, #188]	; (403e24 <tcp_input+0x24c>)
  403d66:	4a2d      	ldr	r2, [pc, #180]	; (403e1c <tcp_input+0x244>)
  403d68:	4431      	add	r1, r6
  403d6a:	4832      	ldr	r0, [pc, #200]	; (403e34 <tcp_input+0x25c>)
  403d6c:	6800      	ldr	r0, [r0, #0]
  403d6e:	4d36      	ldr	r5, [pc, #216]	; (403e48 <tcp_input+0x270>)
  403d70:	47a8      	blx	r5
  403d72:	e00c      	b.n	403d8e <tcp_input+0x1b6>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
  403d74:	f01e 0f01 	tst.w	lr, #1
  403d78:	d002      	beq.n	403d80 <tcp_input+0x1a8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  403d7a:	4b34      	ldr	r3, [pc, #208]	; (403e4c <tcp_input+0x274>)
  403d7c:	681b      	ldr	r3, [r3, #0]
  403d7e:	6243      	str	r3, [r0, #36]	; 0x24
  }

  if ((tcplen > 0))  {
  403d80:	b129      	cbz	r1, 403d8e <tcp_input+0x1b6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  403d82:	7f83      	ldrb	r3, [r0, #30]
  403d84:	f043 0302 	orr.w	r3, r3, #2
  403d88:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
  403d8a:	4b31      	ldr	r3, [pc, #196]	; (403e50 <tcp_input+0x278>)
  403d8c:	4798      	blx	r3
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
        pbuf_free(p);
  403d8e:	4620      	mov	r0, r4
  403d90:	4b30      	ldr	r3, [pc, #192]	; (403e54 <tcp_input+0x27c>)
  403d92:	4798      	blx	r3
        return;
  403d94:	e3fe      	b.n	404594 <tcp_input+0x9bc>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403d96:	68c0      	ldr	r0, [r0, #12]
  403d98:	2800      	cmp	r0, #0
  403d9a:	d1c5      	bne.n	403d28 <tcp_input+0x150>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  403d9c:	4b2e      	ldr	r3, [pc, #184]	; (403e58 <tcp_input+0x280>)
  403d9e:	f8d3 c000 	ldr.w	ip, [r3]
  403da2:	f1bc 0f00 	cmp.w	ip, #0
  403da6:	f000 83b5 	beq.w	404514 <tcp_input+0x93c>
      if (lpcb->local_port == tcphdr->dest) {
  403daa:	4b1a      	ldr	r3, [pc, #104]	; (403e14 <tcp_input+0x23c>)
  403dac:	681f      	ldr	r7, [r3, #0]
  403dae:	8878      	ldrh	r0, [r7, #2]
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  403db0:	4b1a      	ldr	r3, [pc, #104]	; (403e1c <tcp_input+0x244>)
  403db2:	681e      	ldr	r6, [r3, #0]
  403db4:	4665      	mov	r5, ip
  403db6:	2200      	movs	r2, #0
  403db8:	e000      	b.n	403dbc <tcp_input+0x1e4>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  403dba:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  403dbc:	8b6b      	ldrh	r3, [r5, #26]
  403dbe:	4283      	cmp	r3, r0
  403dc0:	d104      	bne.n	403dcc <tcp_input+0x1f4>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  403dc2:	682b      	ldr	r3, [r5, #0]
  403dc4:	42b3      	cmp	r3, r6
  403dc6:	d006      	beq.n	403dd6 <tcp_input+0x1fe>
  403dc8:	b12d      	cbz	r5, 403dd6 <tcp_input+0x1fe>
            ip_addr_isany(&(lpcb->local_ip))) {
  403dca:	b123      	cbz	r3, 403dd6 <tcp_input+0x1fe>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  403dcc:	68eb      	ldr	r3, [r5, #12]
  403dce:	462a      	mov	r2, r5
  403dd0:	2b00      	cmp	r3, #0
  403dd2:	d1f2      	bne.n	403dba <tcp_input+0x1e2>
  403dd4:	e39e      	b.n	404514 <tcp_input+0x93c>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  403dd6:	2d00      	cmp	r5, #0
  403dd8:	f000 839c 	beq.w	404514 <tcp_input+0x93c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  403ddc:	b12a      	cbz	r2, 403dea <tcp_input+0x212>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  403dde:	68eb      	ldr	r3, [r5, #12]
  403de0:	60d3      	str	r3, [r2, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  403de2:	f8c5 c00c 	str.w	ip, [r5, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  403de6:	4b1c      	ldr	r3, [pc, #112]	; (403e58 <tcp_input+0x280>)
  403de8:	601d      	str	r5, [r3, #0]
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
  403dea:	f01e 0f04 	tst.w	lr, #4
  403dee:	f040 8083 	bne.w	403ef8 <tcp_input+0x320>
    return ERR_OK;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  403df2:	f01e 0f10 	tst.w	lr, #16
  403df6:	d033      	beq.n	403e60 <tcp_input+0x288>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  403df8:	4b0d      	ldr	r3, [pc, #52]	; (403e30 <tcp_input+0x258>)
  403dfa:	6818      	ldr	r0, [r3, #0]
  403dfc:	883b      	ldrh	r3, [r7, #0]
  403dfe:	9301      	str	r3, [sp, #4]
  403e00:	887b      	ldrh	r3, [r7, #2]
  403e02:	9300      	str	r3, [sp, #0]
  403e04:	4b07      	ldr	r3, [pc, #28]	; (403e24 <tcp_input+0x24c>)
  403e06:	4a05      	ldr	r2, [pc, #20]	; (403e1c <tcp_input+0x244>)
  403e08:	4401      	add	r1, r0
  403e0a:	480a      	ldr	r0, [pc, #40]	; (403e34 <tcp_input+0x25c>)
  403e0c:	6800      	ldr	r0, [r0, #0]
  403e0e:	4d0e      	ldr	r5, [pc, #56]	; (403e48 <tcp_input+0x270>)
  403e10:	47a8      	blx	r5
  403e12:	e071      	b.n	403ef8 <tcp_input+0x320>
  403e14:	200023e0 	.word	0x200023e0
  403e18:	004022fd 	.word	0x004022fd
  403e1c:	2000373c 	.word	0x2000373c
  403e20:	004015fd 	.word	0x004015fd
  403e24:	20003734 	.word	0x20003734
  403e28:	004011dd 	.word	0x004011dd
  403e2c:	00400f11 	.word	0x00400f11
  403e30:	200023e4 	.word	0x200023e4
  403e34:	200023ec 	.word	0x200023ec
  403e38:	200023f0 	.word	0x200023f0
  403e3c:	200023e8 	.word	0x200023e8
  403e40:	20004768 	.word	0x20004768
  403e44:	2000477c 	.word	0x2000477c
  403e48:	00404b95 	.word	0x00404b95
  403e4c:	2000476c 	.word	0x2000476c
  403e50:	004048e1 	.word	0x004048e1
  403e54:	00402375 	.word	0x00402375
  403e58:	20004770 	.word	0x20004770
  403e5c:	00400f35 	.word	0x00400f35
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
  403e60:	f01e 0f02 	tst.w	lr, #2
  403e64:	d048      	beq.n	403ef8 <tcp_input+0x320>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  403e66:	7e68      	ldrb	r0, [r5, #25]
  403e68:	4b91      	ldr	r3, [pc, #580]	; (4040b0 <tcp_input+0x4d8>)
  403e6a:	4798      	blx	r3
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  403e6c:	4606      	mov	r6, r0
  403e6e:	2800      	cmp	r0, #0
  403e70:	d042      	beq.n	403ef8 <tcp_input+0x320>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  403e72:	4b90      	ldr	r3, [pc, #576]	; (4040b4 <tcp_input+0x4dc>)
  403e74:	681b      	ldr	r3, [r3, #0]
  403e76:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
  403e78:	8b6b      	ldrh	r3, [r5, #26]
  403e7a:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  403e7c:	4b8e      	ldr	r3, [pc, #568]	; (4040b8 <tcp_input+0x4e0>)
  403e7e:	681b      	ldr	r3, [r3, #0]
  403e80:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
  403e82:	4b8e      	ldr	r3, [pc, #568]	; (4040bc <tcp_input+0x4e4>)
  403e84:	681a      	ldr	r2, [r3, #0]
  403e86:	8813      	ldrh	r3, [r2, #0]
  403e88:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
  403e8a:	2303      	movs	r3, #3
  403e8c:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
  403e8e:	4b8c      	ldr	r3, [pc, #560]	; (4040c0 <tcp_input+0x4e8>)
  403e90:	681b      	ldr	r3, [r3, #0]
  403e92:	1c59      	adds	r1, r3, #1
  403e94:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  403e96:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  403e98:	89d1      	ldrh	r1, [r2, #14]
  403e9a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  403e9e:	89d2      	ldrh	r2, [r2, #14]
  403ea0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  403ea4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  403ea8:	3b01      	subs	r3, #1
  403eaa:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  403eac:	692b      	ldr	r3, [r5, #16]
  403eae:	6103      	str	r3, [r0, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  403eb0:	696b      	ldr	r3, [r5, #20]
  403eb2:	6143      	str	r3, [r0, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  403eb4:	7a2b      	ldrb	r3, [r5, #8]
  403eb6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  403eba:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
  403ebc:	4b81      	ldr	r3, [pc, #516]	; (4040c4 <tcp_input+0x4ec>)
  403ebe:	681a      	ldr	r2, [r3, #0]
  403ec0:	60c2      	str	r2, [r0, #12]
  403ec2:	6018      	str	r0, [r3, #0]
  403ec4:	4b80      	ldr	r3, [pc, #512]	; (4040c8 <tcp_input+0x4f0>)
  403ec6:	4798      	blx	r3
  403ec8:	2201      	movs	r2, #1
  403eca:	4b80      	ldr	r3, [pc, #512]	; (4040cc <tcp_input+0x4f4>)
  403ecc:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  403ece:	4630      	mov	r0, r6
  403ed0:	4b7f      	ldr	r3, [pc, #508]	; (4040d0 <tcp_input+0x4f8>)
  403ed2:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  403ed4:	1d31      	adds	r1, r6, #4
  403ed6:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
  403ed8:	4b7e      	ldr	r3, [pc, #504]	; (4040d4 <tcp_input+0x4fc>)
  403eda:	4798      	blx	r3
  403edc:	86f0      	strh	r0, [r6, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  403ede:	2112      	movs	r1, #18
  403ee0:	4630      	mov	r0, r6
  403ee2:	4b7d      	ldr	r3, [pc, #500]	; (4040d8 <tcp_input+0x500>)
  403ee4:	4798      	blx	r3
    if (rc != ERR_OK) {
  403ee6:	b120      	cbz	r0, 403ef2 <tcp_input+0x31a>
      tcp_abandon(npcb, 0);
  403ee8:	2100      	movs	r1, #0
  403eea:	4630      	mov	r0, r6
  403eec:	4b7b      	ldr	r3, [pc, #492]	; (4040dc <tcp_input+0x504>)
  403eee:	4798      	blx	r3
  403ef0:	e002      	b.n	403ef8 <tcp_input+0x320>
      return rc;
    }
    return tcp_output(npcb);
  403ef2:	4630      	mov	r0, r6
  403ef4:	4b7a      	ldr	r3, [pc, #488]	; (4040e0 <tcp_input+0x508>)
  403ef6:	4798      	blx	r3
        tcp_listen_pcbs.listen_pcbs = lpcb;
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
      pbuf_free(p);
  403ef8:	4620      	mov	r0, r4
  403efa:	4b7a      	ldr	r3, [pc, #488]	; (4040e4 <tcp_input+0x50c>)
  403efc:	4798      	blx	r3
      return;
  403efe:	e349      	b.n	404594 <tcp_input+0x9bc>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  403f00:	4b79      	ldr	r3, [pc, #484]	; (4040e8 <tcp_input+0x510>)
  403f02:	2200      	movs	r2, #0
  403f04:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  403f06:	8921      	ldrh	r1, [r4, #8]
  403f08:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
  403f0a:	605c      	str	r4, [r3, #4]
    inseg.tcphdr = tcphdr;
  403f0c:	60df      	str	r7, [r3, #12]

    recv_data = NULL;
  403f0e:	4b77      	ldr	r3, [pc, #476]	; (4040ec <tcp_input+0x514>)
  403f10:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  403f12:	4b77      	ldr	r3, [pc, #476]	; (4040f0 <tcp_input+0x518>)
  403f14:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
  403f16:	f01e 0f08 	tst.w	lr, #8
  403f1a:	d003      	beq.n	403f24 <tcp_input+0x34c>
      p->flags |= PBUF_FLAG_PUSH;
  403f1c:	7b63      	ldrb	r3, [r4, #13]
  403f1e:	f043 0301 	orr.w	r3, r3, #1
  403f22:	7363      	strb	r3, [r4, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  403f24:	6fab      	ldr	r3, [r5, #120]	; 0x78
  403f26:	b16b      	cbz	r3, 403f44 <tcp_input+0x36c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  403f28:	4628      	mov	r0, r5
  403f2a:	4b72      	ldr	r3, [pc, #456]	; (4040f4 <tcp_input+0x51c>)
  403f2c:	4798      	blx	r3
  403f2e:	f110 0f0a 	cmn.w	r0, #10
  403f32:	f000 82e0 	beq.w	4044f6 <tcp_input+0x91e>
  403f36:	6fab      	ldr	r3, [r5, #120]	; 0x78
  403f38:	b123      	cbz	r3, 403f44 <tcp_input+0x36c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  403f3a:	4b6f      	ldr	r3, [pc, #444]	; (4040f8 <tcp_input+0x520>)
  403f3c:	881b      	ldrh	r3, [r3, #0]
  403f3e:	2b00      	cmp	r3, #0
  403f40:	f040 82d9 	bne.w	4044f6 <tcp_input+0x91e>
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
  403f44:	4b6d      	ldr	r3, [pc, #436]	; (4040fc <tcp_input+0x524>)
  403f46:	601d      	str	r5, [r3, #0]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  403f48:	4b6d      	ldr	r3, [pc, #436]	; (404100 <tcp_input+0x528>)
  403f4a:	781b      	ldrb	r3, [r3, #0]
  403f4c:	f013 0f04 	tst.w	r3, #4
  403f50:	d023      	beq.n	403f9a <tcp_input+0x3c2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  403f52:	7e2b      	ldrb	r3, [r5, #24]
  403f54:	2b02      	cmp	r3, #2
  403f56:	d107      	bne.n	403f68 <tcp_input+0x390>
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  403f58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  403f5a:	4a6a      	ldr	r2, [pc, #424]	; (404104 <tcp_input+0x52c>)
  403f5c:	6812      	ldr	r2, [r2, #0]
  403f5e:	4293      	cmp	r3, r2
  403f60:	bf14      	ite	ne
  403f62:	2300      	movne	r3, #0
  403f64:	2301      	moveq	r3, #1
  403f66:	e00b      	b.n	403f80 <tcp_input+0x3a8>
    if (pcb->state == SYN_SENT) {
      if (ackno == pcb->snd_nxt) {
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403f68:	4b55      	ldr	r3, [pc, #340]	; (4040c0 <tcp_input+0x4e8>)
  403f6a:	681b      	ldr	r3, [r3, #0]
  403f6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  403f6e:	1a9b      	subs	r3, r3, r2
  403f70:	f100 8244 	bmi.w	4043fc <tcp_input+0x824>
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  403f74:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  403f76:	1a9b      	subs	r3, r3, r2
  403f78:	2b00      	cmp	r3, #0
  403f7a:	bfcc      	ite	gt
  403f7c:	2300      	movgt	r3, #0
  403f7e:	2301      	movle	r3, #1
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
  403f80:	2b00      	cmp	r3, #0
  403f82:	f000 823b 	beq.w	4043fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
  403f86:	4a5a      	ldr	r2, [pc, #360]	; (4040f0 <tcp_input+0x518>)
  403f88:	7813      	ldrb	r3, [r2, #0]
  403f8a:	f043 0308 	orr.w	r3, r3, #8
  403f8e:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  403f90:	7fab      	ldrb	r3, [r5, #30]
  403f92:	f023 0301 	bic.w	r3, r3, #1
  403f96:	77ab      	strb	r3, [r5, #30]
  403f98:	e230      	b.n	4043fc <tcp_input+0x824>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  403f9a:	f013 0f02 	tst.w	r3, #2
  403f9e:	d009      	beq.n	403fb4 <tcp_input+0x3dc>
  403fa0:	7e2b      	ldrb	r3, [r5, #24]
  403fa2:	3b02      	subs	r3, #2
  403fa4:	b2db      	uxtb	r3, r3
  403fa6:	2b01      	cmp	r3, #1
  403fa8:	d904      	bls.n	403fb4 <tcp_input+0x3dc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  403faa:	7fab      	ldrb	r3, [r5, #30]
  403fac:	f043 0302 	orr.w	r3, r3, #2
  403fb0:	77ab      	strb	r3, [r5, #30]
  403fb2:	e223      	b.n	4043fc <tcp_input+0x824>
    return ERR_OK;
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  403fb4:	7fab      	ldrb	r3, [r5, #30]
  403fb6:	f013 0f10 	tst.w	r3, #16
  403fba:	f040 82cd 	bne.w	404558 <tcp_input+0x980>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  403fbe:	4b52      	ldr	r3, [pc, #328]	; (404108 <tcp_input+0x530>)
  403fc0:	681b      	ldr	r3, [r3, #0]
  403fc2:	626b      	str	r3, [r5, #36]	; 0x24
  403fc4:	e2c8      	b.n	404558 <tcp_input+0x980>
  switch (pcb->state) {
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  403fc6:	4b4e      	ldr	r3, [pc, #312]	; (404100 <tcp_input+0x528>)
  403fc8:	781b      	ldrb	r3, [r3, #0]
  403fca:	f003 0312 	and.w	r3, r3, #18
  403fce:	2b12      	cmp	r3, #18
  403fd0:	d156      	bne.n	404080 <tcp_input+0x4a8>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  403fd2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  403fd4:	68db      	ldr	r3, [r3, #12]
  403fd6:	6858      	ldr	r0, [r3, #4]
  403fd8:	4b4c      	ldr	r3, [pc, #304]	; (40410c <tcp_input+0x534>)
  403fda:	4798      	blx	r3
  403fdc:	3001      	adds	r0, #1
  403fde:	4b49      	ldr	r3, [pc, #292]	; (404104 <tcp_input+0x52c>)
  403fe0:	681b      	ldr	r3, [r3, #0]
  403fe2:	4298      	cmp	r0, r3
  403fe4:	d14c      	bne.n	404080 <tcp_input+0x4a8>
      pcb->snd_buf++;
  403fe6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  403fea:	3301      	adds	r3, #1
  403fec:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  403ff0:	4b33      	ldr	r3, [pc, #204]	; (4040c0 <tcp_input+0x4e8>)
  403ff2:	681b      	ldr	r3, [r3, #0]
  403ff4:	1c5a      	adds	r2, r3, #1
  403ff6:	62aa      	str	r2, [r5, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  403ff8:	632a      	str	r2, [r5, #48]	; 0x30
      pcb->lastack = ackno;
  403ffa:	64a8      	str	r0, [r5, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  403ffc:	4a2f      	ldr	r2, [pc, #188]	; (4040bc <tcp_input+0x4e4>)
  403ffe:	6812      	ldr	r2, [r2, #0]
  404000:	89d1      	ldrh	r1, [r2, #14]
  404002:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  404006:	89d2      	ldrh	r2, [r2, #14]
  404008:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  40400c:	3b01      	subs	r3, #1
  40400e:	656b      	str	r3, [r5, #84]	; 0x54
      pcb->state = ESTABLISHED;
  404010:	2304      	movs	r3, #4
  404012:	762b      	strb	r3, [r5, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  404014:	18e9      	adds	r1, r5, r3
  404016:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
  404018:	4b2e      	ldr	r3, [pc, #184]	; (4040d4 <tcp_input+0x4fc>)
  40401a:	4798      	blx	r3
  40401c:	86e8      	strh	r0, [r5, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  40401e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  404022:	005b      	lsls	r3, r3, #1
  404024:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404028:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
  40402c:	2b01      	cmp	r3, #1
  40402e:	bf04      	itt	eq
  404030:	0040      	lsleq	r0, r0, #1
  404032:	b280      	uxtheq	r0, r0
  404034:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
  404038:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
  40403c:	3b01      	subs	r3, #1
  40403e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  404042:	6f28      	ldr	r0, [r5, #112]	; 0x70
      pcb->unacked = rseg->next;
  404044:	6803      	ldr	r3, [r0, #0]
  404046:	672b      	str	r3, [r5, #112]	; 0x70
      tcp_seg_free(rseg);
  404048:	4b31      	ldr	r3, [pc, #196]	; (404110 <tcp_input+0x538>)
  40404a:	4798      	blx	r3

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  40404c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40404e:	b91b      	cbnz	r3, 404058 <tcp_input+0x480>
        pcb->rtime = -1;
  404050:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404054:	86ab      	strh	r3, [r5, #52]	; 0x34
  404056:	e003      	b.n	404060 <tcp_input+0x488>
      else {
        pcb->rtime = 0;
  404058:	2300      	movs	r3, #0
  40405a:	86ab      	strh	r3, [r5, #52]	; 0x34
        pcb->nrtx = 0;
  40405c:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  404060:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  404064:	b13b      	cbz	r3, 404076 <tcp_input+0x49e>
  404066:	2200      	movs	r2, #0
  404068:	4629      	mov	r1, r5
  40406a:	6928      	ldr	r0, [r5, #16]
  40406c:	4798      	blx	r3
      if (err == ERR_ABRT) {
  40406e:	f110 0f0a 	cmn.w	r0, #10
  404072:	f000 8240 	beq.w	4044f6 <tcp_input+0x91e>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
  404076:	7fab      	ldrb	r3, [r5, #30]
  404078:	f043 0302 	orr.w	r3, r3, #2
  40407c:	77ab      	strb	r3, [r5, #30]
  40407e:	e1bd      	b.n	4043fc <tcp_input+0x824>
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
  404080:	4b1f      	ldr	r3, [pc, #124]	; (404100 <tcp_input+0x528>)
  404082:	781b      	ldrb	r3, [r3, #0]
  404084:	f013 0f10 	tst.w	r3, #16
  404088:	f000 81b8 	beq.w	4043fc <tcp_input+0x824>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  40408c:	4b0b      	ldr	r3, [pc, #44]	; (4040bc <tcp_input+0x4e4>)
  40408e:	681b      	ldr	r3, [r3, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404090:	4a19      	ldr	r2, [pc, #100]	; (4040f8 <tcp_input+0x520>)
  404092:	8810      	ldrh	r0, [r2, #0]
  404094:	4a0a      	ldr	r2, [pc, #40]	; (4040c0 <tcp_input+0x4e8>)
  404096:	6811      	ldr	r1, [r2, #0]
  404098:	881a      	ldrh	r2, [r3, #0]
  40409a:	9201      	str	r2, [sp, #4]
  40409c:	885b      	ldrh	r3, [r3, #2]
  40409e:	9300      	str	r3, [sp, #0]
  4040a0:	4b05      	ldr	r3, [pc, #20]	; (4040b8 <tcp_input+0x4e0>)
  4040a2:	4a04      	ldr	r2, [pc, #16]	; (4040b4 <tcp_input+0x4dc>)
  4040a4:	4401      	add	r1, r0
  4040a6:	4817      	ldr	r0, [pc, #92]	; (404104 <tcp_input+0x52c>)
  4040a8:	6800      	ldr	r0, [r0, #0]
  4040aa:	4c1a      	ldr	r4, [pc, #104]	; (404114 <tcp_input+0x53c>)
  4040ac:	47a0      	blx	r4
  4040ae:	e1a5      	b.n	4043fc <tcp_input+0x824>
  4040b0:	00403061 	.word	0x00403061
  4040b4:	2000373c 	.word	0x2000373c
  4040b8:	20003734 	.word	0x20003734
  4040bc:	200023e0 	.word	0x200023e0
  4040c0:	200023e4 	.word	0x200023e4
  4040c4:	20004768 	.word	0x20004768
  4040c8:	00401dbd 	.word	0x00401dbd
  4040cc:	20004764 	.word	0x20004764
  4040d0:	0040319d 	.word	0x0040319d
  4040d4:	00403179 	.word	0x00403179
  4040d8:	00404741 	.word	0x00404741
  4040dc:	00402f99 	.word	0x00402f99
  4040e0:	004048e1 	.word	0x004048e1
  4040e4:	00402375 	.word	0x00402375
  4040e8:	200023f8 	.word	0x200023f8
  4040ec:	200023f4 	.word	0x200023f4
  4040f0:	200023f1 	.word	0x200023f1
  4040f4:	00402e79 	.word	0x00402e79
  4040f8:	200023e8 	.word	0x200023e8
  4040fc:	20004780 	.word	0x20004780
  404100:	200023f0 	.word	0x200023f0
  404104:	200023ec 	.word	0x200023ec
  404108:	2000476c 	.word	0x2000476c
  40410c:	00400f35 	.word	0x00400f35
  404110:	00402799 	.word	0x00402799
  404114:	00404b95 	.word	0x00404b95
        tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  404118:	4b93      	ldr	r3, [pc, #588]	; (404368 <tcp_input+0x790>)
  40411a:	781b      	ldrb	r3, [r3, #0]
  40411c:	f013 0f10 	tst.w	r3, #16
  404120:	d049      	beq.n	4041b6 <tcp_input+0x5de>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  404122:	4b92      	ldr	r3, [pc, #584]	; (40436c <tcp_input+0x794>)
  404124:	6818      	ldr	r0, [r3, #0]
  404126:	6cab      	ldr	r3, [r5, #72]	; 0x48
  404128:	43db      	mvns	r3, r3
  40412a:	42c3      	cmn	r3, r0
  40412c:	d433      	bmi.n	404196 <tcp_input+0x5be>
  40412e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  404130:	1ac3      	subs	r3, r0, r3
  404132:	2b00      	cmp	r3, #0
  404134:	dc2f      	bgt.n	404196 <tcp_input+0x5be>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  404136:	2304      	movs	r3, #4
  404138:	762b      	strb	r3, [r5, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  40413a:	696b      	ldr	r3, [r5, #20]
  40413c:	b143      	cbz	r3, 404150 <tcp_input+0x578>
  40413e:	2200      	movs	r2, #0
  404140:	4629      	mov	r1, r5
  404142:	6928      	ldr	r0, [r5, #16]
  404144:	4798      	blx	r3
        if (err != ERR_OK) {
  404146:	b138      	cbz	r0, 404158 <tcp_input+0x580>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  404148:	f110 0f0a 	cmn.w	r0, #10
  40414c:	f000 81d3 	beq.w	4044f6 <tcp_input+0x91e>
            tcp_abort(pcb);
  404150:	4628      	mov	r0, r5
  404152:	4b87      	ldr	r3, [pc, #540]	; (404370 <tcp_input+0x798>)
  404154:	4798      	blx	r3
  404156:	e1ce      	b.n	4044f6 <tcp_input+0x91e>
          }
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
  404158:	f8b5 404c 	ldrh.w	r4, [r5, #76]	; 0x4c
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  40415c:	4628      	mov	r0, r5
  40415e:	4b85      	ldr	r3, [pc, #532]	; (404374 <tcp_input+0x79c>)
  404160:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
  404162:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  404166:	b113      	cbz	r3, 40416e <tcp_input+0x596>
          pcb->acked--;
  404168:	3b01      	subs	r3, #1
  40416a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  40416e:	2c01      	cmp	r4, #1
  404170:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  404172:	bf04      	itt	eq
  404174:	005b      	lsleq	r3, r3, #1
  404176:	b29b      	uxtheq	r3, r3
  404178:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c

        if (recv_flags & TF_GOT_FIN) {
  40417c:	4b7e      	ldr	r3, [pc, #504]	; (404378 <tcp_input+0x7a0>)
  40417e:	781b      	ldrb	r3, [r3, #0]
  404180:	f013 0f20 	tst.w	r3, #32
  404184:	f000 813a 	beq.w	4043fc <tcp_input+0x824>
          tcp_ack_now(pcb);
  404188:	7fab      	ldrb	r3, [r5, #30]
  40418a:	f043 0302 	orr.w	r3, r3, #2
  40418e:	77ab      	strb	r3, [r5, #30]
          pcb->state = CLOSE_WAIT;
  404190:	2307      	movs	r3, #7
  404192:	762b      	strb	r3, [r5, #24]
  404194:	e132      	b.n	4043fc <tcp_input+0x824>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
  404196:	4b79      	ldr	r3, [pc, #484]	; (40437c <tcp_input+0x7a4>)
  404198:	681b      	ldr	r3, [r3, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40419a:	4a79      	ldr	r2, [pc, #484]	; (404380 <tcp_input+0x7a8>)
  40419c:	8814      	ldrh	r4, [r2, #0]
  40419e:	4a79      	ldr	r2, [pc, #484]	; (404384 <tcp_input+0x7ac>)
  4041a0:	6811      	ldr	r1, [r2, #0]
  4041a2:	881a      	ldrh	r2, [r3, #0]
  4041a4:	9201      	str	r2, [sp, #4]
  4041a6:	885b      	ldrh	r3, [r3, #2]
  4041a8:	9300      	str	r3, [sp, #0]
  4041aa:	4b77      	ldr	r3, [pc, #476]	; (404388 <tcp_input+0x7b0>)
  4041ac:	4a77      	ldr	r2, [pc, #476]	; (40438c <tcp_input+0x7b4>)
  4041ae:	4421      	add	r1, r4
  4041b0:	4c77      	ldr	r4, [pc, #476]	; (404390 <tcp_input+0x7b8>)
  4041b2:	47a0      	blx	r4
  4041b4:	e122      	b.n	4043fc <tcp_input+0x824>
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  4041b6:	f013 0f02 	tst.w	r3, #2
  4041ba:	f000 811f 	beq.w	4043fc <tcp_input+0x824>
  4041be:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4041c0:	3b01      	subs	r3, #1
  4041c2:	4a70      	ldr	r2, [pc, #448]	; (404384 <tcp_input+0x7ac>)
  4041c4:	6812      	ldr	r2, [r2, #0]
  4041c6:	4293      	cmp	r3, r2
  4041c8:	f040 8118 	bne.w	4043fc <tcp_input+0x824>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
  4041cc:	4628      	mov	r0, r5
  4041ce:	4b71      	ldr	r3, [pc, #452]	; (404394 <tcp_input+0x7bc>)
  4041d0:	4798      	blx	r3
  4041d2:	e113      	b.n	4043fc <tcp_input+0x824>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  4041d4:	4628      	mov	r0, r5
  4041d6:	4b67      	ldr	r3, [pc, #412]	; (404374 <tcp_input+0x79c>)
  4041d8:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  4041da:	4b67      	ldr	r3, [pc, #412]	; (404378 <tcp_input+0x7a0>)
  4041dc:	781b      	ldrb	r3, [r3, #0]
  4041de:	f013 0f20 	tst.w	r3, #32
  4041e2:	f000 810b 	beq.w	4043fc <tcp_input+0x824>
      tcp_ack_now(pcb);
  4041e6:	7fab      	ldrb	r3, [r5, #30]
  4041e8:	f043 0302 	orr.w	r3, r3, #2
  4041ec:	77ab      	strb	r3, [r5, #30]
      pcb->state = CLOSE_WAIT;
  4041ee:	2307      	movs	r3, #7
  4041f0:	762b      	strb	r3, [r5, #24]
  4041f2:	e103      	b.n	4043fc <tcp_input+0x824>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
  4041f4:	4628      	mov	r0, r5
  4041f6:	4b5f      	ldr	r3, [pc, #380]	; (404374 <tcp_input+0x79c>)
  4041f8:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4041fa:	4b5f      	ldr	r3, [pc, #380]	; (404378 <tcp_input+0x7a0>)
  4041fc:	781b      	ldrb	r3, [r3, #0]
  4041fe:	f013 0f20 	tst.w	r3, #32
  404202:	d041      	beq.n	404288 <tcp_input+0x6b0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  404204:	4b58      	ldr	r3, [pc, #352]	; (404368 <tcp_input+0x790>)
  404206:	781b      	ldrb	r3, [r3, #0]
  404208:	f013 0f10 	tst.w	r3, #16
  40420c:	d035      	beq.n	40427a <tcp_input+0x6a2>
  40420e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404210:	4b56      	ldr	r3, [pc, #344]	; (40436c <tcp_input+0x794>)
  404212:	681b      	ldr	r3, [r3, #0]
  404214:	429a      	cmp	r2, r3
  404216:	d130      	bne.n	40427a <tcp_input+0x6a2>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  404218:	7fab      	ldrb	r3, [r5, #30]
  40421a:	f043 0302 	orr.w	r3, r3, #2
  40421e:	77ab      	strb	r3, [r5, #30]
        tcp_pcb_purge(pcb);
  404220:	4628      	mov	r0, r5
  404222:	4b5d      	ldr	r3, [pc, #372]	; (404398 <tcp_input+0x7c0>)
  404224:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  404226:	4b5d      	ldr	r3, [pc, #372]	; (40439c <tcp_input+0x7c4>)
  404228:	681b      	ldr	r3, [r3, #0]
  40422a:	429d      	cmp	r5, r3
  40422c:	d103      	bne.n	404236 <tcp_input+0x65e>
  40422e:	68ea      	ldr	r2, [r5, #12]
  404230:	4b5a      	ldr	r3, [pc, #360]	; (40439c <tcp_input+0x7c4>)
  404232:	601a      	str	r2, [r3, #0]
  404234:	e015      	b.n	404262 <tcp_input+0x68a>
  404236:	4a5a      	ldr	r2, [pc, #360]	; (4043a0 <tcp_input+0x7c8>)
  404238:	6013      	str	r3, [r2, #0]
  40423a:	2200      	movs	r2, #0
  40423c:	2001      	movs	r0, #1
  40423e:	e00a      	b.n	404256 <tcp_input+0x67e>
  404240:	68d9      	ldr	r1, [r3, #12]
  404242:	428d      	cmp	r5, r1
  404244:	d105      	bne.n	404252 <tcp_input+0x67a>
  404246:	b10a      	cbz	r2, 40424c <tcp_input+0x674>
  404248:	4a55      	ldr	r2, [pc, #340]	; (4043a0 <tcp_input+0x7c8>)
  40424a:	6013      	str	r3, [r2, #0]
  40424c:	68ea      	ldr	r2, [r5, #12]
  40424e:	60da      	str	r2, [r3, #12]
  404250:	e007      	b.n	404262 <tcp_input+0x68a>
  404252:	4602      	mov	r2, r0
  404254:	460b      	mov	r3, r1
  404256:	2b00      	cmp	r3, #0
  404258:	d1f2      	bne.n	404240 <tcp_input+0x668>
  40425a:	b112      	cbz	r2, 404262 <tcp_input+0x68a>
  40425c:	2200      	movs	r2, #0
  40425e:	4b50      	ldr	r3, [pc, #320]	; (4043a0 <tcp_input+0x7c8>)
  404260:	601a      	str	r2, [r3, #0]
  404262:	2201      	movs	r2, #1
  404264:	4b4f      	ldr	r3, [pc, #316]	; (4043a4 <tcp_input+0x7cc>)
  404266:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  404268:	230a      	movs	r3, #10
  40426a:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  40426c:	4b4e      	ldr	r3, [pc, #312]	; (4043a8 <tcp_input+0x7d0>)
  40426e:	681a      	ldr	r2, [r3, #0]
  404270:	60ea      	str	r2, [r5, #12]
  404272:	601d      	str	r5, [r3, #0]
  404274:	4b4d      	ldr	r3, [pc, #308]	; (4043ac <tcp_input+0x7d4>)
  404276:	4798      	blx	r3
  404278:	e0c0      	b.n	4043fc <tcp_input+0x824>
      } else {
        tcp_ack_now(pcb);
  40427a:	7fab      	ldrb	r3, [r5, #30]
  40427c:	f043 0302 	orr.w	r3, r3, #2
  404280:	77ab      	strb	r3, [r5, #30]
        pcb->state = CLOSING;
  404282:	2308      	movs	r3, #8
  404284:	762b      	strb	r3, [r5, #24]
  404286:	e0b9      	b.n	4043fc <tcp_input+0x824>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  404288:	4b37      	ldr	r3, [pc, #220]	; (404368 <tcp_input+0x790>)
  40428a:	781b      	ldrb	r3, [r3, #0]
  40428c:	f013 0f10 	tst.w	r3, #16
  404290:	f000 80b4 	beq.w	4043fc <tcp_input+0x824>
  404294:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404296:	4b35      	ldr	r3, [pc, #212]	; (40436c <tcp_input+0x794>)
  404298:	681b      	ldr	r3, [r3, #0]
  40429a:	429a      	cmp	r2, r3
  40429c:	f040 80ae 	bne.w	4043fc <tcp_input+0x824>
      pcb->state = FIN_WAIT_2;
  4042a0:	2306      	movs	r3, #6
  4042a2:	762b      	strb	r3, [r5, #24]
  4042a4:	e0aa      	b.n	4043fc <tcp_input+0x824>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
  4042a6:	4628      	mov	r0, r5
  4042a8:	4b32      	ldr	r3, [pc, #200]	; (404374 <tcp_input+0x79c>)
  4042aa:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4042ac:	4b32      	ldr	r3, [pc, #200]	; (404378 <tcp_input+0x7a0>)
  4042ae:	781b      	ldrb	r3, [r3, #0]
  4042b0:	f013 0f20 	tst.w	r3, #32
  4042b4:	f000 80a2 	beq.w	4043fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  4042b8:	7fab      	ldrb	r3, [r5, #30]
  4042ba:	f043 0302 	orr.w	r3, r3, #2
  4042be:	77ab      	strb	r3, [r5, #30]
      tcp_pcb_purge(pcb);
  4042c0:	4628      	mov	r0, r5
  4042c2:	4b35      	ldr	r3, [pc, #212]	; (404398 <tcp_input+0x7c0>)
  4042c4:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4042c6:	4b35      	ldr	r3, [pc, #212]	; (40439c <tcp_input+0x7c4>)
  4042c8:	681b      	ldr	r3, [r3, #0]
  4042ca:	429d      	cmp	r5, r3
  4042cc:	d103      	bne.n	4042d6 <tcp_input+0x6fe>
  4042ce:	68ea      	ldr	r2, [r5, #12]
  4042d0:	4b32      	ldr	r3, [pc, #200]	; (40439c <tcp_input+0x7c4>)
  4042d2:	601a      	str	r2, [r3, #0]
  4042d4:	e015      	b.n	404302 <tcp_input+0x72a>
  4042d6:	4a32      	ldr	r2, [pc, #200]	; (4043a0 <tcp_input+0x7c8>)
  4042d8:	6013      	str	r3, [r2, #0]
  4042da:	2200      	movs	r2, #0
  4042dc:	2001      	movs	r0, #1
  4042de:	e00a      	b.n	4042f6 <tcp_input+0x71e>
  4042e0:	68d9      	ldr	r1, [r3, #12]
  4042e2:	428d      	cmp	r5, r1
  4042e4:	d105      	bne.n	4042f2 <tcp_input+0x71a>
  4042e6:	b10a      	cbz	r2, 4042ec <tcp_input+0x714>
  4042e8:	4a2d      	ldr	r2, [pc, #180]	; (4043a0 <tcp_input+0x7c8>)
  4042ea:	6013      	str	r3, [r2, #0]
  4042ec:	68ea      	ldr	r2, [r5, #12]
  4042ee:	60da      	str	r2, [r3, #12]
  4042f0:	e007      	b.n	404302 <tcp_input+0x72a>
  4042f2:	4602      	mov	r2, r0
  4042f4:	460b      	mov	r3, r1
  4042f6:	2b00      	cmp	r3, #0
  4042f8:	d1f2      	bne.n	4042e0 <tcp_input+0x708>
  4042fa:	b112      	cbz	r2, 404302 <tcp_input+0x72a>
  4042fc:	2200      	movs	r2, #0
  4042fe:	4b28      	ldr	r3, [pc, #160]	; (4043a0 <tcp_input+0x7c8>)
  404300:	601a      	str	r2, [r3, #0]
  404302:	2201      	movs	r2, #1
  404304:	4b27      	ldr	r3, [pc, #156]	; (4043a4 <tcp_input+0x7cc>)
  404306:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  404308:	230a      	movs	r3, #10
  40430a:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  40430c:	4b26      	ldr	r3, [pc, #152]	; (4043a8 <tcp_input+0x7d0>)
  40430e:	681a      	ldr	r2, [r3, #0]
  404310:	60ea      	str	r2, [r5, #12]
  404312:	601d      	str	r5, [r3, #0]
  404314:	4b25      	ldr	r3, [pc, #148]	; (4043ac <tcp_input+0x7d4>)
  404316:	4798      	blx	r3
  404318:	e070      	b.n	4043fc <tcp_input+0x824>
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
  40431a:	4628      	mov	r0, r5
  40431c:	4b15      	ldr	r3, [pc, #84]	; (404374 <tcp_input+0x79c>)
  40431e:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  404320:	4b11      	ldr	r3, [pc, #68]	; (404368 <tcp_input+0x790>)
  404322:	781b      	ldrb	r3, [r3, #0]
  404324:	f013 0f10 	tst.w	r3, #16
  404328:	d068      	beq.n	4043fc <tcp_input+0x824>
  40432a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40432c:	4b0f      	ldr	r3, [pc, #60]	; (40436c <tcp_input+0x794>)
  40432e:	681b      	ldr	r3, [r3, #0]
  404330:	429a      	cmp	r2, r3
  404332:	d163      	bne.n	4043fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  404334:	4628      	mov	r0, r5
  404336:	4b18      	ldr	r3, [pc, #96]	; (404398 <tcp_input+0x7c0>)
  404338:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  40433a:	4b18      	ldr	r3, [pc, #96]	; (40439c <tcp_input+0x7c4>)
  40433c:	681b      	ldr	r3, [r3, #0]
  40433e:	429d      	cmp	r5, r3
  404340:	d103      	bne.n	40434a <tcp_input+0x772>
  404342:	68ea      	ldr	r2, [r5, #12]
  404344:	4b15      	ldr	r3, [pc, #84]	; (40439c <tcp_input+0x7c4>)
  404346:	601a      	str	r2, [r3, #0]
  404348:	e03a      	b.n	4043c0 <tcp_input+0x7e8>
  40434a:	4a15      	ldr	r2, [pc, #84]	; (4043a0 <tcp_input+0x7c8>)
  40434c:	6013      	str	r3, [r2, #0]
  40434e:	2200      	movs	r2, #0
  404350:	2001      	movs	r0, #1
  404352:	e02f      	b.n	4043b4 <tcp_input+0x7dc>
  404354:	68d9      	ldr	r1, [r3, #12]
  404356:	428d      	cmp	r5, r1
  404358:	d12a      	bne.n	4043b0 <tcp_input+0x7d8>
  40435a:	b10a      	cbz	r2, 404360 <tcp_input+0x788>
  40435c:	4a10      	ldr	r2, [pc, #64]	; (4043a0 <tcp_input+0x7c8>)
  40435e:	6013      	str	r3, [r2, #0]
  404360:	68ea      	ldr	r2, [r5, #12]
  404362:	60da      	str	r2, [r3, #12]
  404364:	e02c      	b.n	4043c0 <tcp_input+0x7e8>
  404366:	bf00      	nop
  404368:	200023f0 	.word	0x200023f0
  40436c:	200023ec 	.word	0x200023ec
  404370:	00403039 	.word	0x00403039
  404374:	00403305 	.word	0x00403305
  404378:	200023f1 	.word	0x200023f1
  40437c:	200023e0 	.word	0x200023e0
  404380:	200023e8 	.word	0x200023e8
  404384:	200023e4 	.word	0x200023e4
  404388:	20003734 	.word	0x20003734
  40438c:	2000373c 	.word	0x2000373c
  404390:	00404b95 	.word	0x00404b95
  404394:	00404c6d 	.word	0x00404c6d
  404398:	00402809 	.word	0x00402809
  40439c:	20004768 	.word	0x20004768
  4043a0:	20004774 	.word	0x20004774
  4043a4:	20004764 	.word	0x20004764
  4043a8:	2000477c 	.word	0x2000477c
  4043ac:	00401dbd 	.word	0x00401dbd
  4043b0:	4602      	mov	r2, r0
  4043b2:	460b      	mov	r3, r1
  4043b4:	2b00      	cmp	r3, #0
  4043b6:	d1cd      	bne.n	404354 <tcp_input+0x77c>
  4043b8:	b112      	cbz	r2, 4043c0 <tcp_input+0x7e8>
  4043ba:	2200      	movs	r2, #0
  4043bc:	4b77      	ldr	r3, [pc, #476]	; (40459c <tcp_input+0x9c4>)
  4043be:	601a      	str	r2, [r3, #0]
  4043c0:	2201      	movs	r2, #1
  4043c2:	4b77      	ldr	r3, [pc, #476]	; (4045a0 <tcp_input+0x9c8>)
  4043c4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  4043c6:	230a      	movs	r3, #10
  4043c8:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  4043ca:	4b76      	ldr	r3, [pc, #472]	; (4045a4 <tcp_input+0x9cc>)
  4043cc:	681a      	ldr	r2, [r3, #0]
  4043ce:	60ea      	str	r2, [r5, #12]
  4043d0:	601d      	str	r5, [r3, #0]
  4043d2:	4b75      	ldr	r3, [pc, #468]	; (4045a8 <tcp_input+0x9d0>)
  4043d4:	4798      	blx	r3
  4043d6:	e011      	b.n	4043fc <tcp_input+0x824>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
  4043d8:	4628      	mov	r0, r5
  4043da:	4b74      	ldr	r3, [pc, #464]	; (4045ac <tcp_input+0x9d4>)
  4043dc:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  4043de:	4b74      	ldr	r3, [pc, #464]	; (4045b0 <tcp_input+0x9d8>)
  4043e0:	781b      	ldrb	r3, [r3, #0]
  4043e2:	f013 0f10 	tst.w	r3, #16
  4043e6:	d009      	beq.n	4043fc <tcp_input+0x824>
  4043e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4043ea:	4b72      	ldr	r3, [pc, #456]	; (4045b4 <tcp_input+0x9dc>)
  4043ec:	681b      	ldr	r3, [r3, #0]
  4043ee:	429a      	cmp	r2, r3
  4043f0:	d104      	bne.n	4043fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  4043f2:	4a71      	ldr	r2, [pc, #452]	; (4045b8 <tcp_input+0x9e0>)
  4043f4:	7813      	ldrb	r3, [r2, #0]
  4043f6:	f043 0310 	orr.w	r3, r3, #16
  4043fa:	7013      	strb	r3, [r2, #0]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
  4043fc:	4b6e      	ldr	r3, [pc, #440]	; (4045b8 <tcp_input+0x9e0>)
  4043fe:	781b      	ldrb	r3, [r3, #0]
  404400:	f013 0f08 	tst.w	r3, #8
  404404:	d00f      	beq.n	404426 <tcp_input+0x84e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  404406:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40440a:	b11b      	cbz	r3, 404414 <tcp_input+0x83c>
  40440c:	f06f 010a 	mvn.w	r1, #10
  404410:	6928      	ldr	r0, [r5, #16]
  404412:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  404414:	4629      	mov	r1, r5
  404416:	4869      	ldr	r0, [pc, #420]	; (4045bc <tcp_input+0x9e4>)
  404418:	4b69      	ldr	r3, [pc, #420]	; (4045c0 <tcp_input+0x9e8>)
  40441a:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40441c:	4629      	mov	r1, r5
  40441e:	2001      	movs	r0, #1
  404420:	4b68      	ldr	r3, [pc, #416]	; (4045c4 <tcp_input+0x9ec>)
  404422:	4798      	blx	r3
  404424:	e067      	b.n	4044f6 <tcp_input+0x91e>
      } else if (recv_flags & TF_CLOSED) {
  404426:	f013 0f10 	tst.w	r3, #16
  40442a:	d013      	beq.n	404454 <tcp_input+0x87c>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
  40442c:	7fab      	ldrb	r3, [r5, #30]
  40442e:	f013 0f10 	tst.w	r3, #16
  404432:	d106      	bne.n	404442 <tcp_input+0x86a>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  404434:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  404438:	b11b      	cbz	r3, 404442 <tcp_input+0x86a>
  40443a:	f06f 010b 	mvn.w	r1, #11
  40443e:	6928      	ldr	r0, [r5, #16]
  404440:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  404442:	4629      	mov	r1, r5
  404444:	485d      	ldr	r0, [pc, #372]	; (4045bc <tcp_input+0x9e4>)
  404446:	4b5e      	ldr	r3, [pc, #376]	; (4045c0 <tcp_input+0x9e8>)
  404448:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40444a:	4629      	mov	r1, r5
  40444c:	2001      	movs	r0, #1
  40444e:	4b5d      	ldr	r3, [pc, #372]	; (4045c4 <tcp_input+0x9ec>)
  404450:	4798      	blx	r3
  404452:	e050      	b.n	4044f6 <tcp_input+0x91e>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  404454:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  404458:	b13a      	cbz	r2, 40446a <tcp_input+0x892>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  40445a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  40445c:	b12b      	cbz	r3, 40446a <tcp_input+0x892>
  40445e:	4629      	mov	r1, r5
  404460:	6928      	ldr	r0, [r5, #16]
  404462:	4798      	blx	r3
          if (err == ERR_ABRT) {
  404464:	f110 0f0a 	cmn.w	r0, #10
  404468:	d045      	beq.n	4044f6 <tcp_input+0x91e>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
  40446a:	4b57      	ldr	r3, [pc, #348]	; (4045c8 <tcp_input+0x9f0>)
  40446c:	681a      	ldr	r2, [r3, #0]
  40446e:	b1f2      	cbz	r2, 4044ae <tcp_input+0x8d6>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
  404470:	7fab      	ldrb	r3, [r5, #30]
  404472:	f013 0f10 	tst.w	r3, #16
  404476:	d006      	beq.n	404486 <tcp_input+0x8ae>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  404478:	4610      	mov	r0, r2
  40447a:	4b54      	ldr	r3, [pc, #336]	; (4045cc <tcp_input+0x9f4>)
  40447c:	4798      	blx	r3
            tcp_abort(pcb);
  40447e:	4628      	mov	r0, r5
  404480:	4b53      	ldr	r3, [pc, #332]	; (4045d0 <tcp_input+0x9f8>)
  404482:	4798      	blx	r3
            goto aborted;
  404484:	e037      	b.n	4044f6 <tcp_input+0x91e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  404486:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  40448a:	b124      	cbz	r4, 404496 <tcp_input+0x8be>
  40448c:	2300      	movs	r3, #0
  40448e:	4629      	mov	r1, r5
  404490:	6928      	ldr	r0, [r5, #16]
  404492:	47a0      	blx	r4
  404494:	e004      	b.n	4044a0 <tcp_input+0x8c8>
  404496:	2300      	movs	r3, #0
  404498:	4629      	mov	r1, r5
  40449a:	4618      	mov	r0, r3
  40449c:	4c4d      	ldr	r4, [pc, #308]	; (4045d4 <tcp_input+0x9fc>)
  40449e:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  4044a0:	f110 0f0a 	cmn.w	r0, #10
  4044a4:	d027      	beq.n	4044f6 <tcp_input+0x91e>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  4044a6:	b110      	cbz	r0, 4044ae <tcp_input+0x8d6>
            pcb->refused_data = recv_data;
  4044a8:	4b47      	ldr	r3, [pc, #284]	; (4045c8 <tcp_input+0x9f0>)
  4044aa:	681b      	ldr	r3, [r3, #0]
  4044ac:	67ab      	str	r3, [r5, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  4044ae:	4b42      	ldr	r3, [pc, #264]	; (4045b8 <tcp_input+0x9e0>)
  4044b0:	781b      	ldrb	r3, [r3, #0]
  4044b2:	f013 0f20 	tst.w	r3, #32
  4044b6:	d018      	beq.n	4044ea <tcp_input+0x912>
          if (pcb->refused_data != NULL) {
  4044b8:	6fab      	ldr	r3, [r5, #120]	; 0x78
  4044ba:	b123      	cbz	r3, 4044c6 <tcp_input+0x8ee>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  4044bc:	7b5a      	ldrb	r2, [r3, #13]
  4044be:	f042 0220 	orr.w	r2, r2, #32
  4044c2:	735a      	strb	r2, [r3, #13]
  4044c4:	e011      	b.n	4044ea <tcp_input+0x912>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
  4044c6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  4044c8:	f640 3268 	movw	r2, #2920	; 0xb68
  4044cc:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
  4044ce:	bf1c      	itt	ne
  4044d0:	3301      	addne	r3, #1
  4044d2:	85ab      	strhne	r3, [r5, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  4044d4:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  4044d8:	b13c      	cbz	r4, 4044ea <tcp_input+0x912>
  4044da:	2300      	movs	r3, #0
  4044dc:	461a      	mov	r2, r3
  4044de:	4629      	mov	r1, r5
  4044e0:	6928      	ldr	r0, [r5, #16]
  4044e2:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  4044e4:	f110 0f0a 	cmn.w	r0, #10
  4044e8:	d005      	beq.n	4044f6 <tcp_input+0x91e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  4044ea:	2200      	movs	r2, #0
  4044ec:	4b3a      	ldr	r3, [pc, #232]	; (4045d8 <tcp_input+0xa00>)
  4044ee:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
  4044f0:	4628      	mov	r0, r5
  4044f2:	4b3a      	ldr	r3, [pc, #232]	; (4045dc <tcp_input+0xa04>)
  4044f4:	4798      	blx	r3
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
  4044f6:	2300      	movs	r3, #0
  4044f8:	4a37      	ldr	r2, [pc, #220]	; (4045d8 <tcp_input+0xa00>)
  4044fa:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  4044fc:	4a32      	ldr	r2, [pc, #200]	; (4045c8 <tcp_input+0x9f0>)
  4044fe:	6013      	str	r3, [r2, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  404500:	4b37      	ldr	r3, [pc, #220]	; (4045e0 <tcp_input+0xa08>)
  404502:	6858      	ldr	r0, [r3, #4]
  404504:	2800      	cmp	r0, #0
  404506:	d045      	beq.n	404594 <tcp_input+0x9bc>
    {
      pbuf_free(inseg.p);
  404508:	4b30      	ldr	r3, [pc, #192]	; (4045cc <tcp_input+0x9f4>)
  40450a:	4798      	blx	r3
      inseg.p = NULL;
  40450c:	2200      	movs	r2, #0
  40450e:	4b34      	ldr	r3, [pc, #208]	; (4045e0 <tcp_input+0xa08>)
  404510:	605a      	str	r2, [r3, #4]
  404512:	e03f      	b.n	404594 <tcp_input+0x9bc>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  404514:	4b33      	ldr	r3, [pc, #204]	; (4045e4 <tcp_input+0xa0c>)
  404516:	681b      	ldr	r3, [r3, #0]
  404518:	8998      	ldrh	r0, [r3, #12]
  40451a:	4b33      	ldr	r3, [pc, #204]	; (4045e8 <tcp_input+0xa10>)
  40451c:	4798      	blx	r3
  40451e:	f000 0004 	and.w	r0, r0, #4
  404522:	b283      	uxth	r3, r0
  404524:	b983      	cbnz	r3, 404548 <tcp_input+0x970>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  404526:	4b2f      	ldr	r3, [pc, #188]	; (4045e4 <tcp_input+0xa0c>)
  404528:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  40452a:	4a30      	ldr	r2, [pc, #192]	; (4045ec <tcp_input+0xa14>)
  40452c:	8810      	ldrh	r0, [r2, #0]
  40452e:	4a30      	ldr	r2, [pc, #192]	; (4045f0 <tcp_input+0xa18>)
  404530:	6811      	ldr	r1, [r2, #0]
  404532:	881a      	ldrh	r2, [r3, #0]
  404534:	9201      	str	r2, [sp, #4]
  404536:	885b      	ldrh	r3, [r3, #2]
  404538:	9300      	str	r3, [sp, #0]
  40453a:	4b2e      	ldr	r3, [pc, #184]	; (4045f4 <tcp_input+0xa1c>)
  40453c:	4a2e      	ldr	r2, [pc, #184]	; (4045f8 <tcp_input+0xa20>)
  40453e:	4401      	add	r1, r0
  404540:	481c      	ldr	r0, [pc, #112]	; (4045b4 <tcp_input+0x9dc>)
  404542:	6800      	ldr	r0, [r0, #0]
  404544:	4d2d      	ldr	r5, [pc, #180]	; (4045fc <tcp_input+0xa24>)
  404546:	47a8      	blx	r5
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
  404548:	4620      	mov	r0, r4
  40454a:	4b20      	ldr	r3, [pc, #128]	; (4045cc <tcp_input+0x9f4>)
  40454c:	4798      	blx	r3
  40454e:	e021      	b.n	404594 <tcp_input+0x9bc>
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
  404550:	4620      	mov	r0, r4
  404552:	4b1e      	ldr	r3, [pc, #120]	; (4045cc <tcp_input+0x9f4>)
  404554:	4798      	blx	r3
  404556:	e01d      	b.n	404594 <tcp_input+0x9bc>
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  }
  pcb->keep_cnt_sent = 0;
  404558:	2300      	movs	r3, #0
  40455a:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96

  tcp_parseopt(pcb);
  40455e:	4628      	mov	r0, r5
  404560:	4b27      	ldr	r3, [pc, #156]	; (404600 <tcp_input+0xa28>)
  404562:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  404564:	7e2b      	ldrb	r3, [r5, #24]
  404566:	3b02      	subs	r3, #2
  404568:	2b07      	cmp	r3, #7
  40456a:	f63f af47 	bhi.w	4043fc <tcp_input+0x824>
  40456e:	a201      	add	r2, pc, #4	; (adr r2, 404574 <tcp_input+0x99c>)
  404570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404574:	00403fc7 	.word	0x00403fc7
  404578:	00404119 	.word	0x00404119
  40457c:	004041d5 	.word	0x004041d5
  404580:	004041f5 	.word	0x004041f5
  404584:	004042a7 	.word	0x004042a7
  404588:	004041d5 	.word	0x004041d5
  40458c:	0040431b 	.word	0x0040431b
  404590:	004043d9 	.word	0x004043d9
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
  404594:	b003      	add	sp, #12
  404596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40459a:	bf00      	nop
  40459c:	20004774 	.word	0x20004774
  4045a0:	20004764 	.word	0x20004764
  4045a4:	2000477c 	.word	0x2000477c
  4045a8:	00401dbd 	.word	0x00401dbd
  4045ac:	00403305 	.word	0x00403305
  4045b0:	200023f0 	.word	0x200023f0
  4045b4:	200023ec 	.word	0x200023ec
  4045b8:	200023f1 	.word	0x200023f1
  4045bc:	20004768 	.word	0x20004768
  4045c0:	00402bdd 	.word	0x00402bdd
  4045c4:	004021b9 	.word	0x004021b9
  4045c8:	200023f4 	.word	0x200023f4
  4045cc:	00402375 	.word	0x00402375
  4045d0:	00403039 	.word	0x00403039
  4045d4:	00402e49 	.word	0x00402e49
  4045d8:	20004780 	.word	0x20004780
  4045dc:	004048e1 	.word	0x004048e1
  4045e0:	200023f8 	.word	0x200023f8
  4045e4:	200023e0 	.word	0x200023e0
  4045e8:	00400f11 	.word	0x00400f11
  4045ec:	200023e8 	.word	0x200023e8
  4045f0:	200023e4 	.word	0x200023e4
  4045f4:	20003734 	.word	0x20003734
  4045f8:	2000373c 	.word	0x2000373c
  4045fc:	00404b95 	.word	0x00404b95
  404600:	0040319d 	.word	0x0040319d

00404604 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  404604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404608:	4680      	mov	r8, r0
  40460a:	460f      	mov	r7, r1
  40460c:	4615      	mov	r5, r2
  40460e:	4699      	mov	r9, r3
  404610:	f89d 6020 	ldrb.w	r6, [sp, #32]
  404614:	f006 0401 	and.w	r4, r6, #1
  404618:	f006 0202 	and.w	r2, r6, #2
  40461c:	b2d3      	uxtb	r3, r2
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  40461e:	2b00      	cmp	r3, #0
  404620:	bf18      	it	ne
  404622:	230c      	movne	r3, #12
  404624:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  404628:	b2dc      	uxtb	r4, r3

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  40462a:	2003      	movs	r0, #3
  40462c:	4b21      	ldr	r3, [pc, #132]	; (4046b4 <tcp_create_segment+0xb0>)
  40462e:	4798      	blx	r3
  404630:	b928      	cbnz	r0, 40463e <tcp_create_segment+0x3a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  404632:	4638      	mov	r0, r7
  404634:	4b20      	ldr	r3, [pc, #128]	; (4046b8 <tcp_create_segment+0xb4>)
  404636:	4798      	blx	r3
    return NULL;
  404638:	2000      	movs	r0, #0
  40463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40463e:	4682      	mov	sl, r0
  }
  seg->flags = optflags;
  404640:	7286      	strb	r6, [r0, #10]
  seg->next = NULL;
  404642:	2300      	movs	r3, #0
  404644:	6003      	str	r3, [r0, #0]
  seg->p = p;
  404646:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
  404648:	893b      	ldrh	r3, [r7, #8]
  40464a:	1b1b      	subs	r3, r3, r4
  40464c:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  40464e:	2114      	movs	r1, #20
  404650:	4638      	mov	r0, r7
  404652:	4b1a      	ldr	r3, [pc, #104]	; (4046bc <tcp_create_segment+0xb8>)
  404654:	4798      	blx	r3
  404656:	b128      	cbz	r0, 404664 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
  404658:	4650      	mov	r0, sl
  40465a:	4b19      	ldr	r3, [pc, #100]	; (4046c0 <tcp_create_segment+0xbc>)
  40465c:	4798      	blx	r3
    return NULL;
  40465e:	2000      	movs	r0, #0
  404660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  404664:	f8da 3004 	ldr.w	r3, [sl, #4]
  404668:	685f      	ldr	r7, [r3, #4]
  40466a:	f8ca 700c 	str.w	r7, [sl, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  40466e:	f8b8 001a 	ldrh.w	r0, [r8, #26]
  404672:	4e14      	ldr	r6, [pc, #80]	; (4046c4 <tcp_create_segment+0xc0>)
  404674:	47b0      	blx	r6
  404676:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
  404678:	f8da 700c 	ldr.w	r7, [sl, #12]
  40467c:	f8b8 001c 	ldrh.w	r0, [r8, #28]
  404680:	47b0      	blx	r6
  404682:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = htonl(seqno);
  404684:	f8da 700c 	ldr.w	r7, [sl, #12]
  404688:	4648      	mov	r0, r9
  40468a:	4b0f      	ldr	r3, [pc, #60]	; (4046c8 <tcp_create_segment+0xc4>)
  40468c:	4798      	blx	r3
  40468e:	6078      	str	r0, [r7, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  404690:	f8da 700c 	ldr.w	r7, [sl, #12]
  404694:	08a4      	lsrs	r4, r4, #2
  404696:	3405      	adds	r4, #5
  404698:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
  40469c:	b2a0      	uxth	r0, r4
  40469e:	47b0      	blx	r6
  4046a0:	81b8      	strh	r0, [r7, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  4046a2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4046a6:	2200      	movs	r2, #0
  4046a8:	749a      	strb	r2, [r3, #18]
  4046aa:	74da      	strb	r2, [r3, #19]
  return seg;
  4046ac:	4650      	mov	r0, sl
} 
  4046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046b2:	bf00      	nop
  4046b4:	00402199 	.word	0x00402199
  4046b8:	00402375 	.word	0x00402375
  4046bc:	004022fd 	.word	0x004022fd
  4046c0:	00402799 	.word	0x00402799
  4046c4:	00400f05 	.word	0x00400f05
  4046c8:	00400f1d 	.word	0x00400f1d

004046cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  4046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046d0:	4606      	mov	r6, r0
  4046d2:	460c      	mov	r4, r1
  4046d4:	4699      	mov	r9, r3
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  4046d6:	3214      	adds	r2, #20
  4046d8:	4411      	add	r1, r2
  4046da:	2200      	movs	r2, #0
  4046dc:	b289      	uxth	r1, r1
  4046de:	2001      	movs	r0, #1
  4046e0:	4b14      	ldr	r3, [pc, #80]	; (404734 <tcp_output_alloc_header+0x68>)
  4046e2:	4798      	blx	r3
  if (p != NULL) {
  4046e4:	4680      	mov	r8, r0
  4046e6:	b310      	cbz	r0, 40472e <tcp_output_alloc_header+0x62>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  4046e8:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
  4046ea:	8b70      	ldrh	r0, [r6, #26]
  4046ec:	4f12      	ldr	r7, [pc, #72]	; (404738 <tcp_output_alloc_header+0x6c>)
  4046ee:	47b8      	blx	r7
  4046f0:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
  4046f2:	8bb0      	ldrh	r0, [r6, #28]
  4046f4:	47b8      	blx	r7
  4046f6:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  4046f8:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  4046fc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  4046fe:	4b0f      	ldr	r3, [pc, #60]	; (40473c <tcp_output_alloc_header+0x70>)
  404700:	4798      	blx	r3
  404702:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  404704:	08a0      	lsrs	r0, r4, #2
  404706:	3005      	adds	r0, #5
  404708:	0300      	lsls	r0, r0, #12
  40470a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  40470e:	f040 0010 	orr.w	r0, r0, #16
  404712:	47b8      	blx	r7
  404714:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  404716:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
  404718:	47b8      	blx	r7
  40471a:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  40471c:	2300      	movs	r3, #0
  40471e:	742b      	strb	r3, [r5, #16]
  404720:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  404722:	74ab      	strb	r3, [r5, #18]
  404724:	74eb      	strb	r3, [r5, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  404726:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
  404728:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  40472a:	4413      	add	r3, r2
  40472c:	6333      	str	r3, [r6, #48]	; 0x30
  }
  return p;
}
  40472e:	4640      	mov	r0, r8
  404730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404734:	004023d5 	.word	0x004023d5
  404738:	00400f05 	.word	0x00400f05
  40473c:	00400f1d 	.word	0x00400f1d

00404740 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404740:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  404744:	2b07      	cmp	r3, #7
  404746:	d906      	bls.n	404756 <tcp_enqueue_flags+0x16>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  404748:	7f83      	ldrb	r3, [r0, #30]
  40474a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40474e:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404750:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
  404754:	4770      	bx	lr
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  404756:	b570      	push	{r4, r5, r6, lr}
  404758:	b082      	sub	sp, #8
  40475a:	f001 0302 	and.w	r3, r1, #2
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  40475e:	1c1e      	adds	r6, r3, #0
  404760:	bf18      	it	ne
  404762:	2601      	movne	r6, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  404764:	2b00      	cmp	r3, #0
  404766:	bf14      	ite	ne
  404768:	2304      	movne	r3, #4
  40476a:	2300      	moveq	r3, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  40476c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
  404770:	2a00      	cmp	r2, #0
  404772:	d046      	beq.n	404802 <tcp_enqueue_flags+0xc2>
  404774:	460d      	mov	r5, r1
  404776:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  404778:	2200      	movs	r2, #0
  40477a:	4619      	mov	r1, r3
  40477c:	4610      	mov	r0, r2
  40477e:	4b23      	ldr	r3, [pc, #140]	; (40480c <tcp_enqueue_flags+0xcc>)
  404780:	4798      	blx	r3
  404782:	4601      	mov	r1, r0
  404784:	b930      	cbnz	r0, 404794 <tcp_enqueue_flags+0x54>
    pcb->flags |= TF_NAGLEMEMERR;
  404786:	7fa3      	ldrb	r3, [r4, #30]
  404788:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40478c:	77a3      	strb	r3, [r4, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  40478e:	f04f 30ff 	mov.w	r0, #4294967295
  404792:	e038      	b.n	404806 <tcp_enqueue_flags+0xc6>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  404794:	9600      	str	r6, [sp, #0]
  404796:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404798:	462a      	mov	r2, r5
  40479a:	4620      	mov	r0, r4
  40479c:	4e1c      	ldr	r6, [pc, #112]	; (404810 <tcp_enqueue_flags+0xd0>)
  40479e:	47b0      	blx	r6
  4047a0:	4601      	mov	r1, r0
  4047a2:	b930      	cbnz	r0, 4047b2 <tcp_enqueue_flags+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
  4047a4:	7fa3      	ldrb	r3, [r4, #30]
  4047a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4047aa:	77a3      	strb	r3, [r4, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  4047ac:	f04f 30ff 	mov.w	r0, #4294967295
  4047b0:	e029      	b.n	404806 <tcp_enqueue_flags+0xc6>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  4047b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4047b4:	b912      	cbnz	r2, 4047bc <tcp_enqueue_flags+0x7c>
    pcb->unsent = seg;
  4047b6:	66e0      	str	r0, [r4, #108]	; 0x6c
  4047b8:	e004      	b.n	4047c4 <tcp_enqueue_flags+0x84>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  4047ba:	461a      	mov	r2, r3
  4047bc:	6813      	ldr	r3, [r2, #0]
  4047be:	2b00      	cmp	r3, #0
  4047c0:	d1fb      	bne.n	4047ba <tcp_enqueue_flags+0x7a>
    useg->next = seg;
  4047c2:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  4047c4:	2300      	movs	r3, #0
  4047c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  4047ca:	f015 0f03 	tst.w	r5, #3
  4047ce:	d007      	beq.n	4047e0 <tcp_enqueue_flags+0xa0>
    pcb->snd_lbb++;
  4047d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4047d2:	3301      	adds	r3, #1
  4047d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  4047d6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  4047da:	3b01      	subs	r3, #1
  4047dc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  4047e0:	f015 0f01 	tst.w	r5, #1
  4047e4:	d003      	beq.n	4047ee <tcp_enqueue_flags+0xae>
    pcb->flags |= TF_FIN;
  4047e6:	7fa3      	ldrb	r3, [r4, #30]
  4047e8:	f043 0320 	orr.w	r3, r3, #32
  4047ec:	77a3      	strb	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  4047ee:	6848      	ldr	r0, [r1, #4]
  4047f0:	4b08      	ldr	r3, [pc, #32]	; (404814 <tcp_enqueue_flags+0xd4>)
  4047f2:	4798      	blx	r3
  4047f4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  4047f8:	4418      	add	r0, r3
  4047fa:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  4047fe:	2000      	movs	r0, #0
  404800:	e001      	b.n	404806 <tcp_enqueue_flags+0xc6>
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  404802:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
  404806:	b002      	add	sp, #8
  404808:	bd70      	pop	{r4, r5, r6, pc}
  40480a:	bf00      	nop
  40480c:	004023d5 	.word	0x004023d5
  404810:	00404605 	.word	0x00404605
  404814:	00402589 	.word	0x00402589

00404818 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  404818:	b570      	push	{r4, r5, r6, lr}
  40481a:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  40481c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  40481e:	b90c      	cbnz	r4, 404824 <tcp_send_fin+0xc>
  404820:	e017      	b.n	404852 <tcp_send_fin+0x3a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  404822:	461c      	mov	r4, r3
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  404824:	6823      	ldr	r3, [r4, #0]
  404826:	2b00      	cmp	r3, #0
  404828:	d1fb      	bne.n	404822 <tcp_send_fin+0xa>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  40482a:	68e3      	ldr	r3, [r4, #12]
  40482c:	8998      	ldrh	r0, [r3, #12]
  40482e:	4b0b      	ldr	r3, [pc, #44]	; (40485c <tcp_send_fin+0x44>)
  404830:	4798      	blx	r3
  404832:	f010 0f07 	tst.w	r0, #7
  404836:	d10c      	bne.n	404852 <tcp_send_fin+0x3a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  404838:	68e6      	ldr	r6, [r4, #12]
  40483a:	89b4      	ldrh	r4, [r6, #12]
  40483c:	2001      	movs	r0, #1
  40483e:	4b08      	ldr	r3, [pc, #32]	; (404860 <tcp_send_fin+0x48>)
  404840:	4798      	blx	r3
  404842:	4320      	orrs	r0, r4
  404844:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  404846:	7fab      	ldrb	r3, [r5, #30]
  404848:	f043 0320 	orr.w	r3, r3, #32
  40484c:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
  40484e:	2000      	movs	r0, #0
  404850:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  404852:	2101      	movs	r1, #1
  404854:	4628      	mov	r0, r5
  404856:	4b03      	ldr	r3, [pc, #12]	; (404864 <tcp_send_fin+0x4c>)
  404858:	4798      	blx	r3
}
  40485a:	bd70      	pop	{r4, r5, r6, pc}
  40485c:	00400f11 	.word	0x00400f11
  404860:	00400f05 	.word	0x00400f05
  404864:	00404741 	.word	0x00404741

00404868 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  404868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40486c:	b082      	sub	sp, #8
  40486e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  404870:	6d00      	ldr	r0, [r0, #80]	; 0x50
  404872:	4b16      	ldr	r3, [pc, #88]	; (4048cc <tcp_send_empty_ack+0x64>)
  404874:	4798      	blx	r3
  404876:	4603      	mov	r3, r0
  404878:	2200      	movs	r2, #0
  40487a:	4611      	mov	r1, r2
  40487c:	4620      	mov	r0, r4
  40487e:	4d14      	ldr	r5, [pc, #80]	; (4048d0 <tcp_send_empty_ack+0x68>)
  404880:	47a8      	blx	r5
  if (p == NULL) {
  404882:	b1f0      	cbz	r0, 4048c2 <tcp_send_empty_ack+0x5a>
  404884:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404886:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  404888:	7fa3      	ldrb	r3, [r4, #30]
  40488a:	f023 0303 	bic.w	r3, r3, #3
  40488e:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  404890:	1d26      	adds	r6, r4, #4
  404892:	8903      	ldrh	r3, [r0, #8]
  404894:	9300      	str	r3, [sp, #0]
  404896:	2306      	movs	r3, #6
  404898:	4632      	mov	r2, r6
  40489a:	4621      	mov	r1, r4
  40489c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4048dc <tcp_send_empty_ack+0x74>
  4048a0:	47c0      	blx	r8
  4048a2:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  4048a4:	7aa3      	ldrb	r3, [r4, #10]
  4048a6:	2206      	movs	r2, #6
  4048a8:	9201      	str	r2, [sp, #4]
  4048aa:	7a62      	ldrb	r2, [r4, #9]
  4048ac:	9200      	str	r2, [sp, #0]
  4048ae:	4632      	mov	r2, r6
  4048b0:	4621      	mov	r1, r4
  4048b2:	4628      	mov	r0, r5
  4048b4:	4c07      	ldr	r4, [pc, #28]	; (4048d4 <tcp_send_empty_ack+0x6c>)
  4048b6:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  4048b8:	4628      	mov	r0, r5
  4048ba:	4b07      	ldr	r3, [pc, #28]	; (4048d8 <tcp_send_empty_ack+0x70>)
  4048bc:	4798      	blx	r3

  return ERR_OK;
  4048be:	2000      	movs	r0, #0
  4048c0:	e001      	b.n	4048c6 <tcp_send_empty_ack+0x5e>
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  4048c2:	f06f 0001 	mvn.w	r0, #1
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);

  return ERR_OK;
}
  4048c6:	b002      	add	sp, #8
  4048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048cc:	00400f1d 	.word	0x00400f1d
  4048d0:	004046cd 	.word	0x004046cd
  4048d4:	004015bd 	.word	0x004015bd
  4048d8:	00402375 	.word	0x00402375
  4048dc:	004011dd 	.word	0x004011dd

004048e0 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  4048e0:	4ba0      	ldr	r3, [pc, #640]	; (404b64 <tcp_output+0x284>)
  4048e2:	681b      	ldr	r3, [r3, #0]
  4048e4:	4283      	cmp	r3, r0
  4048e6:	f000 8131 	beq.w	404b4c <tcp_output+0x26c>
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  4048ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048ee:	b085      	sub	sp, #20
  4048f0:	4605      	mov	r5, r0
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  4048f2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  4048f6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  4048fa:	429a      	cmp	r2, r3
  4048fc:	bf28      	it	cs
  4048fe:	461a      	movcs	r2, r3
  404900:	4692      	mov	sl, r2

  seg = pcb->unsent;
  404902:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  404904:	7f83      	ldrb	r3, [r0, #30]
  404906:	f013 0f02 	tst.w	r3, #2
  40490a:	d00f      	beq.n	40492c <tcp_output+0x4c>
  40490c:	b154      	cbz	r4, 404924 <tcp_output+0x44>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  40490e:	68e3      	ldr	r3, [r4, #12]
  404910:	6858      	ldr	r0, [r3, #4]
  404912:	4b95      	ldr	r3, [pc, #596]	; (404b68 <tcp_output+0x288>)
  404914:	4798      	blx	r3
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
  404916:	8923      	ldrh	r3, [r4, #8]
  404918:	6caa      	ldr	r2, [r5, #72]	; 0x48
  40491a:	1a9b      	subs	r3, r3, r2
  40491c:	4418      	add	r0, r3
  40491e:	4582      	cmp	sl, r0
  404920:	f080 8116 	bcs.w	404b50 <tcp_output+0x270>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  404924:	4628      	mov	r0, r5
  404926:	4b91      	ldr	r3, [pc, #580]	; (404b6c <tcp_output+0x28c>)
  404928:	4798      	blx	r3
  40492a:	e118      	b.n	404b5e <tcp_output+0x27e>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  40492c:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
  if (useg != NULL) {
  404930:	f1b8 0f00 	cmp.w	r8, #0
  404934:	d104      	bne.n	404940 <tcp_output+0x60>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  404936:	2c00      	cmp	r4, #0
  404938:	f040 80f0 	bne.w	404b1c <tcp_output+0x23c>
  40493c:	e0fb      	b.n	404b36 <tcp_output+0x256>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  40493e:	4698      	mov	r8, r3
  404940:	f8d8 3000 	ldr.w	r3, [r8]
  404944:	2b00      	cmp	r3, #0
  404946:	d1fa      	bne.n	40493e <tcp_output+0x5e>
  404948:	e7f5      	b.n	404936 <tcp_output+0x56>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  40494a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40494c:	b1b3      	cbz	r3, 40497c <tcp_output+0x9c>
  40494e:	7fab      	ldrb	r3, [r5, #30]
  404950:	f013 0f44 	tst.w	r3, #68	; 0x44
  404954:	d112      	bne.n	40497c <tcp_output+0x9c>
  404956:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  404958:	b12a      	cbz	r2, 404966 <tcp_output+0x86>
  40495a:	6811      	ldr	r1, [r2, #0]
  40495c:	b971      	cbnz	r1, 40497c <tcp_output+0x9c>
  40495e:	8911      	ldrh	r1, [r2, #8]
  404960:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  404962:	4291      	cmp	r1, r2
  404964:	d20a      	bcs.n	40497c <tcp_output+0x9c>
  404966:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  40496a:	b13a      	cbz	r2, 40497c <tcp_output+0x9c>
  40496c:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
  404970:	2a07      	cmp	r2, #7
  404972:	d803      	bhi.n	40497c <tcp_output+0x9c>
  404974:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  404978:	f000 80dd 	beq.w	404b36 <tcp_output+0x256>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  40497c:	6823      	ldr	r3, [r4, #0]
  40497e:	66eb      	str	r3, [r5, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
  404980:	7e2b      	ldrb	r3, [r5, #24]
  404982:	2b02      	cmp	r3, #2
  404984:	d00c      	beq.n	4049a0 <tcp_output+0xc0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  404986:	f8d4 900c 	ldr.w	r9, [r4, #12]
  40498a:	f8b9 700c 	ldrh.w	r7, [r9, #12]
  40498e:	2010      	movs	r0, #16
  404990:	47d8      	blx	fp
  404992:	4338      	orrs	r0, r7
  404994:	f8a9 000c 	strh.w	r0, [r9, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  404998:	7fab      	ldrb	r3, [r5, #30]
  40499a:	f023 0303 	bic.w	r3, r3, #3
  40499e:	77ab      	strb	r3, [r5, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  4049a0:	68e7      	ldr	r7, [r4, #12]
  4049a2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4049a4:	4b72      	ldr	r3, [pc, #456]	; (404b70 <tcp_output+0x290>)
  4049a6:	4798      	blx	r3
  4049a8:	60b8      	str	r0, [r7, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4049aa:	68e7      	ldr	r7, [r4, #12]
  4049ac:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
  4049ae:	47d8      	blx	fp
  4049b0:	81f8      	strh	r0, [r7, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4049b2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
  4049b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4049b6:	4413      	add	r3, r2
  4049b8:	632b      	str	r3, [r5, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  4049ba:	7aa3      	ldrb	r3, [r4, #10]
  4049bc:	f013 0f01 	tst.w	r3, #1
  4049c0:	d00a      	beq.n	4049d8 <tcp_output+0xf8>

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  4049c2:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  4049c4:	1d29      	adds	r1, r5, #4
  4049c6:	f240 50b4 	movw	r0, #1460	; 0x5b4
  4049ca:	4b6a      	ldr	r3, [pc, #424]	; (404b74 <tcp_output+0x294>)
  4049cc:	4798      	blx	r3
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  4049ce:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  4049d2:	4b67      	ldr	r3, [pc, #412]	; (404b70 <tcp_output+0x290>)
  4049d4:	4798      	blx	r3
  4049d6:	6178      	str	r0, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  4049d8:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
  4049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    pcb->rtime = 0;
  4049e0:	bf04      	itt	eq
  4049e2:	2300      	moveq	r3, #0
  4049e4:	86ab      	strheq	r3, [r5, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  4049e6:	b10d      	cbz	r5, 4049ec <tcp_output+0x10c>
  4049e8:	682b      	ldr	r3, [r5, #0]
  4049ea:	b933      	cbnz	r3, 4049fa <tcp_output+0x11a>
    netif = ip_route(&(pcb->remote_ip));
  4049ec:	1d28      	adds	r0, r5, #4
  4049ee:	4b62      	ldr	r3, [pc, #392]	; (404b78 <tcp_output+0x298>)
  4049f0:	4798      	blx	r3
    if (netif == NULL) {
  4049f2:	2800      	cmp	r0, #0
  4049f4:	d033      	beq.n	404a5e <tcp_output+0x17e>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  4049f6:	6843      	ldr	r3, [r0, #4]
  4049f8:	602b      	str	r3, [r5, #0]
  }

  if (pcb->rttest == 0) {
  4049fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4049fc:	b933      	cbnz	r3, 404a0c <tcp_output+0x12c>
    pcb->rttest = tcp_ticks;
  4049fe:	4b5f      	ldr	r3, [pc, #380]	; (404b7c <tcp_output+0x29c>)
  404a00:	681b      	ldr	r3, [r3, #0]
  404a02:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  404a04:	68e3      	ldr	r3, [r4, #12]
  404a06:	6858      	ldr	r0, [r3, #4]
  404a08:	47b0      	blx	r6
  404a0a:	63e8      	str	r0, [r5, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  404a0c:	6862      	ldr	r2, [r4, #4]
  404a0e:	68e3      	ldr	r3, [r4, #12]
  404a10:	6851      	ldr	r1, [r2, #4]
  404a12:	1a5b      	subs	r3, r3, r1
  404a14:	b29b      	uxth	r3, r3

  seg->p->len -= len;
  404a16:	8951      	ldrh	r1, [r2, #10]
  404a18:	1ac9      	subs	r1, r1, r3
  404a1a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  404a1c:	6861      	ldr	r1, [r4, #4]
  404a1e:	890a      	ldrh	r2, [r1, #8]
  404a20:	1ad3      	subs	r3, r2, r3
  404a22:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  404a24:	6863      	ldr	r3, [r4, #4]
  404a26:	68e2      	ldr	r2, [r4, #12]
  404a28:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  404a2a:	68e3      	ldr	r3, [r4, #12]
  404a2c:	2200      	movs	r2, #0
  404a2e:	741a      	strb	r2, [r3, #16]
  404a30:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  404a32:	68e7      	ldr	r7, [r4, #12]
  404a34:	1d2a      	adds	r2, r5, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
  404a36:	6860      	ldr	r0, [r4, #4]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  404a38:	8903      	ldrh	r3, [r0, #8]
  404a3a:	9300      	str	r3, [sp, #0]
  404a3c:	2306      	movs	r3, #6
  404a3e:	9203      	str	r2, [sp, #12]
  404a40:	4629      	mov	r1, r5
  404a42:	f8df 9148 	ldr.w	r9, [pc, #328]	; 404b8c <tcp_output+0x2ac>
  404a46:	47c8      	blx	r9
  404a48:	8238      	strh	r0, [r7, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  404a4a:	7aab      	ldrb	r3, [r5, #10]
  404a4c:	6860      	ldr	r0, [r4, #4]
  404a4e:	2206      	movs	r2, #6
  404a50:	9201      	str	r2, [sp, #4]
  404a52:	7a6a      	ldrb	r2, [r5, #9]
  404a54:	9200      	str	r2, [sp, #0]
  404a56:	9a03      	ldr	r2, [sp, #12]
  404a58:	4629      	mov	r1, r5
  404a5a:	4f49      	ldr	r7, [pc, #292]	; (404b80 <tcp_output+0x2a0>)
  404a5c:	47b8      	blx	r7
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  404a5e:	68e3      	ldr	r3, [r4, #12]
  404a60:	6858      	ldr	r0, [r3, #4]
  404a62:	47b0      	blx	r6
  404a64:	4607      	mov	r7, r0
  404a66:	f8b4 9008 	ldrh.w	r9, [r4, #8]
  404a6a:	68e3      	ldr	r3, [r4, #12]
  404a6c:	8998      	ldrh	r0, [r3, #12]
  404a6e:	4b45      	ldr	r3, [pc, #276]	; (404b84 <tcp_output+0x2a4>)
  404a70:	4798      	blx	r3
  404a72:	f010 0003 	ands.w	r0, r0, #3
  404a76:	bf18      	it	ne
  404a78:	2001      	movne	r0, #1
  404a7a:	4448      	add	r0, r9
  404a7c:	4438      	add	r0, r7
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  404a7e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  404a80:	1a1b      	subs	r3, r3, r0
  404a82:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  404a84:	bfb8      	it	lt
  404a86:	6528      	strlt	r0, [r5, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  404a88:	8927      	ldrh	r7, [r4, #8]
  404a8a:	68e3      	ldr	r3, [r4, #12]
  404a8c:	8998      	ldrh	r0, [r3, #12]
  404a8e:	4b3d      	ldr	r3, [pc, #244]	; (404b84 <tcp_output+0x2a4>)
  404a90:	4798      	blx	r3
  404a92:	f010 0003 	ands.w	r0, r0, #3
  404a96:	bf18      	it	ne
  404a98:	2001      	movne	r0, #1
  404a9a:	42f8      	cmn	r0, r7
  404a9c:	d038      	beq.n	404b10 <tcp_output+0x230>
      seg->next = NULL;
  404a9e:	2300      	movs	r3, #0
  404aa0:	6023      	str	r3, [r4, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  404aa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  404aa4:	b913      	cbnz	r3, 404aac <tcp_output+0x1cc>
        pcb->unacked = seg;
  404aa6:	672c      	str	r4, [r5, #112]	; 0x70
  404aa8:	46a0      	mov	r8, r4
  404aaa:	e034      	b.n	404b16 <tcp_output+0x236>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  404aac:	68e3      	ldr	r3, [r4, #12]
  404aae:	6858      	ldr	r0, [r3, #4]
  404ab0:	47b0      	blx	r6
  404ab2:	4607      	mov	r7, r0
  404ab4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  404ab8:	6858      	ldr	r0, [r3, #4]
  404aba:	47b0      	blx	r6
  404abc:	1a38      	subs	r0, r7, r0
  404abe:	2800      	cmp	r0, #0
  404ac0:	da22      	bge.n	404b08 <tcp_output+0x228>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  404ac2:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
  404ac6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  404ac8:	b93b      	cbnz	r3, 404ada <tcp_output+0x1fa>
  404aca:	e017      	b.n	404afc <tcp_output+0x21c>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  404acc:	6824      	ldr	r4, [r4, #0]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  404ace:	6823      	ldr	r3, [r4, #0]
  404ad0:	b933      	cbnz	r3, 404ae0 <tcp_output+0x200>
  404ad2:	464b      	mov	r3, r9
  404ad4:	46a1      	mov	r9, r4
  404ad6:	461c      	mov	r4, r3
  404ad8:	e010      	b.n	404afc <tcp_output+0x21c>
  404ada:	4622      	mov	r2, r4
  404adc:	464c      	mov	r4, r9
  404ade:	4691      	mov	r9, r2
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  404ae0:	68db      	ldr	r3, [r3, #12]
  404ae2:	6858      	ldr	r0, [r3, #4]
  404ae4:	47b0      	blx	r6
  404ae6:	4607      	mov	r7, r0
  404ae8:	f8d9 300c 	ldr.w	r3, [r9, #12]
  404aec:	6858      	ldr	r0, [r3, #4]
  404aee:	47b0      	blx	r6
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  404af0:	1a38      	subs	r0, r7, r0
  404af2:	2800      	cmp	r0, #0
  404af4:	dbea      	blt.n	404acc <tcp_output+0x1ec>
  404af6:	464b      	mov	r3, r9
  404af8:	46a1      	mov	r9, r4
  404afa:	461c      	mov	r4, r3
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
  404afc:	f8d9 3000 	ldr.w	r3, [r9]
  404b00:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  404b02:	f8c9 4000 	str.w	r4, [r9]
  404b06:	e006      	b.n	404b16 <tcp_output+0x236>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  404b08:	f8c8 4000 	str.w	r4, [r8]
  404b0c:	46a0      	mov	r8, r4
  404b0e:	e002      	b.n	404b16 <tcp_output+0x236>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  404b10:	4620      	mov	r0, r4
  404b12:	4b1d      	ldr	r3, [pc, #116]	; (404b88 <tcp_output+0x2a8>)
  404b14:	4798      	blx	r3
    }
    seg = pcb->unsent;
  404b16:	6eec      	ldr	r4, [r5, #108]	; 0x6c
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  404b18:	b91c      	cbnz	r4, 404b22 <tcp_output+0x242>
  404b1a:	e00e      	b.n	404b3a <tcp_output+0x25a>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  404b1c:	4e12      	ldr	r6, [pc, #72]	; (404b68 <tcp_output+0x288>)
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;

    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  404b1e:	f8df b070 	ldr.w	fp, [pc, #112]	; 404b90 <tcp_output+0x2b0>
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  404b22:	68e3      	ldr	r3, [r4, #12]
  404b24:	6858      	ldr	r0, [r3, #4]
  404b26:	47b0      	blx	r6
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  404b28:	8923      	ldrh	r3, [r4, #8]
  404b2a:	6caa      	ldr	r2, [r5, #72]	; 0x48
  404b2c:	1a9b      	subs	r3, r3, r2
  404b2e:	4418      	add	r0, r3
  404b30:	4582      	cmp	sl, r0
  404b32:	f4bf af0a 	bcs.w	40494a <tcp_output+0x6a>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  404b36:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  404b38:	b913      	cbnz	r3, 404b40 <tcp_output+0x260>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  404b3a:	2300      	movs	r3, #0
  404b3c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  404b40:	7fab      	ldrb	r3, [r5, #30]
  404b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404b46:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
  404b48:	2000      	movs	r0, #0
  404b4a:	e008      	b.n	404b5e <tcp_output+0x27e>
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  404b4c:	2000      	movs	r0, #0
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
  404b4e:	4770      	bx	lr
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  404b50:	f8d5 8070 	ldr.w	r8, [r5, #112]	; 0x70
  if (useg != NULL) {
  404b54:	f1b8 0f00 	cmp.w	r8, #0
  404b58:	f47f aef2 	bne.w	404940 <tcp_output+0x60>
  404b5c:	e7de      	b.n	404b1c <tcp_output+0x23c>
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
  404b5e:	b005      	add	sp, #20
  404b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b64:	20004780 	.word	0x20004780
  404b68:	00400f35 	.word	0x00400f35
  404b6c:	00404869 	.word	0x00404869
  404b70:	00400f1d 	.word	0x00400f1d
  404b74:	00403179 	.word	0x00403179
  404b78:	004012d5 	.word	0x004012d5
  404b7c:	2000476c 	.word	0x2000476c
  404b80:	004015bd 	.word	0x004015bd
  404b84:	00400f11 	.word	0x00400f11
  404b88:	00402799 	.word	0x00402799
  404b8c:	004011dd 	.word	0x004011dd
  404b90:	00400f05 	.word	0x00400f05

00404b94 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  404b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b98:	b083      	sub	sp, #12
  404b9a:	4681      	mov	r9, r0
  404b9c:	468a      	mov	sl, r1
  404b9e:	4693      	mov	fp, r2
  404ba0:	4698      	mov	r8, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  404ba2:	2200      	movs	r2, #0
  404ba4:	2114      	movs	r1, #20
  404ba6:	2001      	movs	r0, #1
  404ba8:	4b1d      	ldr	r3, [pc, #116]	; (404c20 <tcp_rst+0x8c>)
  404baa:	4798      	blx	r3
  if (p == NULL) {
  404bac:	2800      	cmp	r0, #0
  404bae:	d033      	beq.n	404c18 <tcp_rst+0x84>
  404bb0:	4605      	mov	r5, r0
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  404bb2:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
  404bb4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  404bb8:	4e1a      	ldr	r6, [pc, #104]	; (404c24 <tcp_rst+0x90>)
  404bba:	47b0      	blx	r6
  404bbc:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
  404bbe:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  404bc2:	47b0      	blx	r6
  404bc4:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
  404bc6:	4648      	mov	r0, r9
  404bc8:	4f17      	ldr	r7, [pc, #92]	; (404c28 <tcp_rst+0x94>)
  404bca:	47b8      	blx	r7
  404bcc:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
  404bce:	4650      	mov	r0, sl
  404bd0:	47b8      	blx	r7
  404bd2:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  404bd4:	f245 0014 	movw	r0, #20500	; 0x5014
  404bd8:	47b0      	blx	r6
  404bda:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  404bdc:	2600      	movs	r6, #0
  404bde:	230b      	movs	r3, #11
  404be0:	73a3      	strb	r3, [r4, #14]
  404be2:	2368      	movs	r3, #104	; 0x68
  404be4:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  404be6:	7426      	strb	r6, [r4, #16]
  404be8:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
  404bea:	74a6      	strb	r6, [r4, #18]
  404bec:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  404bee:	892b      	ldrh	r3, [r5, #8]
  404bf0:	9300      	str	r3, [sp, #0]
  404bf2:	2306      	movs	r3, #6
  404bf4:	4642      	mov	r2, r8
  404bf6:	4659      	mov	r1, fp
  404bf8:	4628      	mov	r0, r5
  404bfa:	4f0c      	ldr	r7, [pc, #48]	; (404c2c <tcp_rst+0x98>)
  404bfc:	47b8      	blx	r7
  404bfe:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  404c00:	2306      	movs	r3, #6
  404c02:	9301      	str	r3, [sp, #4]
  404c04:	9600      	str	r6, [sp, #0]
  404c06:	23ff      	movs	r3, #255	; 0xff
  404c08:	4642      	mov	r2, r8
  404c0a:	4659      	mov	r1, fp
  404c0c:	4628      	mov	r0, r5
  404c0e:	4c08      	ldr	r4, [pc, #32]	; (404c30 <tcp_rst+0x9c>)
  404c10:	47a0      	blx	r4
  pbuf_free(p);
  404c12:	4628      	mov	r0, r5
  404c14:	4b07      	ldr	r3, [pc, #28]	; (404c34 <tcp_rst+0xa0>)
  404c16:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  404c18:	b003      	add	sp, #12
  404c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c1e:	bf00      	nop
  404c20:	004023d5 	.word	0x004023d5
  404c24:	00400f05 	.word	0x00400f05
  404c28:	00400f1d 	.word	0x00400f1d
  404c2c:	004011dd 	.word	0x004011dd
  404c30:	004015bd 	.word	0x004015bd
  404c34:	00402375 	.word	0x00402375

00404c38 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  404c38:	6f02      	ldr	r2, [r0, #112]	; 0x70
  404c3a:	b912      	cbnz	r2, 404c42 <tcp_rexmit_rto+0xa>
  404c3c:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  404c3e:	461a      	mov	r2, r3
  404c40:	e000      	b.n	404c44 <tcp_rexmit_rto+0xc>
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  404c42:	b508      	push	{r3, lr}
  if (pcb->unacked == NULL) {
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  404c44:	6813      	ldr	r3, [r2, #0]
  404c46:	2b00      	cmp	r3, #0
  404c48:	d1f9      	bne.n	404c3e <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  404c4a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  404c4c:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  404c4e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  404c50:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  404c52:	2200      	movs	r2, #0
  404c54:	6702      	str	r2, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  404c56:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  404c5a:	3301      	adds	r3, #1
  404c5c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  404c60:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  404c62:	4b01      	ldr	r3, [pc, #4]	; (404c68 <tcp_rexmit_rto+0x30>)
  404c64:	4798      	blx	r3
  404c66:	bd08      	pop	{r3, pc}
  404c68:	004048e1 	.word	0x004048e1

00404c6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  404c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  404c70:	6f07      	ldr	r7, [r0, #112]	; 0x70
  404c72:	b32f      	cbz	r7, 404cc0 <tcp_rexmit+0x54>
  404c74:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  404c76:	683b      	ldr	r3, [r7, #0]
  404c78:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  404c7a:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
  404c7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  404c80:	b923      	cbnz	r3, 404c8c <tcp_rexmit+0x20>
  404c82:	e00e      	b.n	404ca2 <tcp_rexmit+0x36>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  404c84:	682d      	ldr	r5, [r5, #0]
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  404c86:	682b      	ldr	r3, [r5, #0]
  404c88:	b90b      	cbnz	r3, 404c8e <tcp_rexmit+0x22>
  404c8a:	e00a      	b.n	404ca2 <tcp_rexmit+0x36>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  404c8c:	4e0d      	ldr	r6, [pc, #52]	; (404cc4 <tcp_rexmit+0x58>)
  404c8e:	68db      	ldr	r3, [r3, #12]
  404c90:	6858      	ldr	r0, [r3, #4]
  404c92:	47b0      	blx	r6
  404c94:	4604      	mov	r4, r0
  404c96:	68fb      	ldr	r3, [r7, #12]
  404c98:	6858      	ldr	r0, [r3, #4]
  404c9a:	47b0      	blx	r6
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  404c9c:	1a20      	subs	r0, r4, r0
  404c9e:	2800      	cmp	r0, #0
  404ca0:	dbf0      	blt.n	404c84 <tcp_rexmit+0x18>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
  404ca2:	682b      	ldr	r3, [r5, #0]
  404ca4:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  404ca6:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  404ca8:	683b      	ldr	r3, [r7, #0]
  404caa:	b90b      	cbnz	r3, 404cb0 <tcp_rexmit+0x44>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  404cac:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  404cb0:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
  404cb4:	3301      	adds	r3, #1
  404cb6:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  404cba:	2300      	movs	r3, #0
  404cbc:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  404cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404cc4:	00400f35 	.word	0x00400f35

00404cc8 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  404cc8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  404cca:	b343      	cbz	r3, 404d1e <tcp_rexmit_fast+0x56>
  404ccc:	7f83      	ldrb	r3, [r0, #30]
  404cce:	f013 0f04 	tst.w	r3, #4
  404cd2:	d124      	bne.n	404d1e <tcp_rexmit_fast+0x56>
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  404cd4:	b510      	push	{r4, lr}
  404cd6:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  404cd8:	4b11      	ldr	r3, [pc, #68]	; (404d20 <tcp_rexmit_fast+0x58>)
  404cda:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  404cdc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  404ce0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  404ce4:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
  404ce6:	bf87      	ittee	hi
  404ce8:	0852      	lsrhi	r2, r2, #1
  404cea:	f8a4 204e 	strhhi.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
  404cee:	085b      	lsrls	r3, r3, #1
  404cf0:	f8a4 304e 	strhls.w	r3, [r4, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  404cf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  404cf6:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  404cfa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  404cfe:	bfbc      	itt	lt
  404d00:	005a      	lsllt	r2, r3, #1
  404d02:	f8a4 204e 	strhlt.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  404d06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404d0a:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  404d0e:	4413      	add	r3, r2
  404d10:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  404d14:	7fa3      	ldrb	r3, [r4, #30]
  404d16:	f043 0304 	orr.w	r3, r3, #4
  404d1a:	77a3      	strb	r3, [r4, #30]
  404d1c:	bd10      	pop	{r4, pc}
  404d1e:	4770      	bx	lr
  404d20:	00404c6d 	.word	0x00404c6d

00404d24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  404d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d28:	b082      	sub	sp, #8
  404d2a:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  404d2c:	6d00      	ldr	r0, [r0, #80]	; 0x50
  404d2e:	3801      	subs	r0, #1
  404d30:	4b12      	ldr	r3, [pc, #72]	; (404d7c <tcp_keepalive+0x58>)
  404d32:	4798      	blx	r3
  404d34:	4603      	mov	r3, r0
  404d36:	2200      	movs	r2, #0
  404d38:	4611      	mov	r1, r2
  404d3a:	4620      	mov	r0, r4
  404d3c:	4d10      	ldr	r5, [pc, #64]	; (404d80 <tcp_keepalive+0x5c>)
  404d3e:	47a8      	blx	r5
  if(p == NULL) {
  404d40:	b1c0      	cbz	r0, 404d74 <tcp_keepalive+0x50>
  404d42:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404d44:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  404d46:	1d26      	adds	r6, r4, #4
  404d48:	8903      	ldrh	r3, [r0, #8]
  404d4a:	9300      	str	r3, [sp, #0]
  404d4c:	2306      	movs	r3, #6
  404d4e:	4632      	mov	r2, r6
  404d50:	4621      	mov	r1, r4
  404d52:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404d8c <tcp_keepalive+0x68>
  404d56:	47c0      	blx	r8
  404d58:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  404d5a:	7aa3      	ldrb	r3, [r4, #10]
  404d5c:	2206      	movs	r2, #6
  404d5e:	9201      	str	r2, [sp, #4]
  404d60:	2200      	movs	r2, #0
  404d62:	9200      	str	r2, [sp, #0]
  404d64:	4632      	mov	r2, r6
  404d66:	4621      	mov	r1, r4
  404d68:	4628      	mov	r0, r5
  404d6a:	4c06      	ldr	r4, [pc, #24]	; (404d84 <tcp_keepalive+0x60>)
  404d6c:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  404d6e:	4628      	mov	r0, r5
  404d70:	4b05      	ldr	r3, [pc, #20]	; (404d88 <tcp_keepalive+0x64>)
  404d72:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  404d74:	b002      	add	sp, #8
  404d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d7a:	bf00      	nop
  404d7c:	00400f1d 	.word	0x00400f1d
  404d80:	004046cd 	.word	0x004046cd
  404d84:	004015bd 	.word	0x004015bd
  404d88:	00402375 	.word	0x00402375
  404d8c:	004011dd 	.word	0x004011dd

00404d90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  404d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d94:	b082      	sub	sp, #8
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  404d96:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if(seg == NULL) {
  404d98:	b915      	cbnz	r5, 404da0 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
  404d9a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  }
  if(seg == NULL) {
  404d9c:	2d00      	cmp	r5, #0
  404d9e:	d04f      	beq.n	404e40 <tcp_zero_window_probe+0xb0>
  404da0:	4604      	mov	r4, r0
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  404da2:	68eb      	ldr	r3, [r5, #12]
  404da4:	8998      	ldrh	r0, [r3, #12]
  404da6:	4b28      	ldr	r3, [pc, #160]	; (404e48 <tcp_zero_window_probe+0xb8>)
  404da8:	4798      	blx	r3
  404daa:	f010 0f01 	tst.w	r0, #1
  404dae:	d03d      	beq.n	404e2c <tcp_zero_window_probe+0x9c>
  404db0:	892b      	ldrh	r3, [r5, #8]
  404db2:	b323      	cbz	r3, 404dfe <tcp_zero_window_probe+0x6e>
  404db4:	e03a      	b.n	404e2c <tcp_zero_window_probe+0x9c>
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  404db6:	1d25      	adds	r5, r4, #4
  404db8:	8933      	ldrh	r3, [r6, #8]
  404dba:	9300      	str	r3, [sp, #0]
  404dbc:	2306      	movs	r3, #6
  404dbe:	462a      	mov	r2, r5
  404dc0:	4621      	mov	r1, r4
  404dc2:	4630      	mov	r0, r6
  404dc4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404e60 <tcp_zero_window_probe+0xd0>
  404dc8:	47c0      	blx	r8
  404dca:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  404dcc:	7aa3      	ldrb	r3, [r4, #10]
  404dce:	2206      	movs	r2, #6
  404dd0:	9201      	str	r2, [sp, #4]
  404dd2:	2200      	movs	r2, #0
  404dd4:	9200      	str	r2, [sp, #0]
  404dd6:	462a      	mov	r2, r5
  404dd8:	4621      	mov	r1, r4
  404dda:	4630      	mov	r0, r6
  404ddc:	4c1b      	ldr	r4, [pc, #108]	; (404e4c <tcp_zero_window_probe+0xbc>)
  404dde:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  404de0:	4630      	mov	r0, r6
  404de2:	4b1b      	ldr	r3, [pc, #108]	; (404e50 <tcp_zero_window_probe+0xc0>)
  404de4:	4798      	blx	r3
  404de6:	e02b      	b.n	404e40 <tcp_zero_window_probe+0xb0>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404de8:	6877      	ldr	r7, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  404dea:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
  404dee:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  404df2:	2011      	movs	r0, #17
  404df4:	4b17      	ldr	r3, [pc, #92]	; (404e54 <tcp_zero_window_probe+0xc4>)
  404df6:	4798      	blx	r3
  404df8:	4328      	orrs	r0, r5
  404dfa:	81b8      	strh	r0, [r7, #12]
  404dfc:	e7db      	b.n	404db6 <tcp_zero_window_probe+0x26>

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  404dfe:	68eb      	ldr	r3, [r5, #12]
  404e00:	685b      	ldr	r3, [r3, #4]
  404e02:	2200      	movs	r2, #0
  404e04:	4611      	mov	r1, r2
  404e06:	4620      	mov	r0, r4
  404e08:	4d13      	ldr	r5, [pc, #76]	; (404e58 <tcp_zero_window_probe+0xc8>)
  404e0a:	47a8      	blx	r5
  if(p == NULL) {
  404e0c:	4606      	mov	r6, r0
  404e0e:	2800      	cmp	r0, #0
  404e10:	d1ea      	bne.n	404de8 <tcp_zero_window_probe+0x58>
  404e12:	e015      	b.n	404e40 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404e14:	6877      	ldr	r7, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  404e16:	6868      	ldr	r0, [r5, #4]
  404e18:	8903      	ldrh	r3, [r0, #8]
  404e1a:	892a      	ldrh	r2, [r5, #8]
  404e1c:	1a9b      	subs	r3, r3, r2
  404e1e:	b29b      	uxth	r3, r3
  404e20:	2201      	movs	r2, #1
  404e22:	f107 0114 	add.w	r1, r7, #20
  404e26:	4d0d      	ldr	r5, [pc, #52]	; (404e5c <tcp_zero_window_probe+0xcc>)
  404e28:	47a8      	blx	r5
  404e2a:	e7c4      	b.n	404db6 <tcp_zero_window_probe+0x26>

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  404e2c:	68eb      	ldr	r3, [r5, #12]
  404e2e:	685b      	ldr	r3, [r3, #4]
  404e30:	2201      	movs	r2, #1
  404e32:	2100      	movs	r1, #0
  404e34:	4620      	mov	r0, r4
  404e36:	4e08      	ldr	r6, [pc, #32]	; (404e58 <tcp_zero_window_probe+0xc8>)
  404e38:	47b0      	blx	r6
  if(p == NULL) {
  404e3a:	4606      	mov	r6, r0
  404e3c:	2800      	cmp	r0, #0
  404e3e:	d1e9      	bne.n	404e14 <tcp_zero_window_probe+0x84>
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  404e40:	b002      	add	sp, #8
  404e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e46:	bf00      	nop
  404e48:	00400f11 	.word	0x00400f11
  404e4c:	004015bd 	.word	0x004015bd
  404e50:	00402375 	.word	0x00402375
  404e54:	00400f05 	.word	0x00400f05
  404e58:	004046cd 	.word	0x004046cd
  404e5c:	004026a1 	.word	0x004026a1
  404e60:	004011dd 	.word	0x004011dd

00404e64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  404e64:	4770      	bx	lr
  404e66:	bf00      	nop

00404e68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  404e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e6c:	b085      	sub	sp, #20
  404e6e:	4604      	mov	r4, r0
  404e70:	4689      	mov	r9, r1

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  404e72:	f8d0 8004 	ldr.w	r8, [r0, #4]
  404e76:	f898 1000 	ldrb.w	r1, [r8]
  404e7a:	f001 010f 	and.w	r1, r1, #15

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  404e7e:	8903      	ldrh	r3, [r0, #8]
  404e80:	1c8a      	adds	r2, r1, #2
  404e82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  404e86:	db04      	blt.n	404e92 <udp_input+0x2a>
  404e88:	0089      	lsls	r1, r1, #2
  404e8a:	4249      	negs	r1, r1
  404e8c:	4b5b      	ldr	r3, [pc, #364]	; (404ffc <udp_input+0x194>)
  404e8e:	4798      	blx	r3
  404e90:	b118      	cbz	r0, 404e9a <udp_input+0x32>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  404e92:	4620      	mov	r0, r4
  404e94:	4b5a      	ldr	r3, [pc, #360]	; (405000 <udp_input+0x198>)
  404e96:	4798      	blx	r3
    goto end;
  404e98:	e0ac      	b.n	404ff4 <udp_input+0x18c>
  }

  udphdr = (struct udp_hdr *)p->payload;
  404e9a:	f8d4 a004 	ldr.w	sl, [r4, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  404e9e:	4649      	mov	r1, r9
  404ea0:	4b58      	ldr	r3, [pc, #352]	; (405004 <udp_input+0x19c>)
  404ea2:	6818      	ldr	r0, [r3, #0]
  404ea4:	4b58      	ldr	r3, [pc, #352]	; (405008 <udp_input+0x1a0>)
  404ea6:	4798      	blx	r3
  404ea8:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  404eaa:	f8ba 0000 	ldrh.w	r0, [sl]
  404eae:	4e57      	ldr	r6, [pc, #348]	; (40500c <udp_input+0x1a4>)
  404eb0:	47b0      	blx	r6
  404eb2:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
  404eb4:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  404eb8:	47b0      	blx	r6
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  404eba:	4b55      	ldr	r3, [pc, #340]	; (405010 <udp_input+0x1a8>)
  404ebc:	f8d3 e000 	ldr.w	lr, [r3]
  404ec0:	f1be 0f00 	cmp.w	lr, #0
  404ec4:	d040      	beq.n	404f48 <udp_input+0xe0>

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  404ec6:	4b4f      	ldr	r3, [pc, #316]	; (405004 <udp_input+0x19c>)
  404ec8:	f8d3 c000 	ldr.w	ip, [r3]
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  404ecc:	4b51      	ldr	r3, [pc, #324]	; (405014 <udp_input+0x1ac>)
  404ece:	f8d3 b000 	ldr.w	fp, [r3]
  404ed2:	4673      	mov	r3, lr
  404ed4:	2600      	movs	r6, #0
  404ed6:	4632      	mov	r2, r6
  404ed8:	9403      	str	r4, [sp, #12]
  404eda:	e000      	b.n	404ede <udp_input+0x76>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  404edc:	460b      	mov	r3, r1
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
  404ede:	8a59      	ldrh	r1, [r3, #18]
  404ee0:	4281      	cmp	r1, r0
  404ee2:	d129      	bne.n	404f38 <udp_input+0xd0>
        if (
  404ee4:	2f00      	cmp	r7, #0
  404ee6:	d17d      	bne.n	404fe4 <udp_input+0x17c>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  404ee8:	b163      	cbz	r3, 404f04 <udp_input+0x9c>
  404eea:	6819      	ldr	r1, [r3, #0]
  404eec:	b151      	cbz	r1, 404f04 <udp_input+0x9c>
  404eee:	4561      	cmp	r1, ip
  404ef0:	d122      	bne.n	404f38 <udp_input+0xd0>
  404ef2:	e007      	b.n	404f04 <udp_input+0x9c>
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
  404ef4:	b133      	cbz	r3, 404f04 <udp_input+0x9c>
             (ip_addr_isany(&pcb->local_ip) ||
  404ef6:	b129      	cbz	r1, 404f04 <udp_input+0x9c>
  404ef8:	ea8c 0401 	eor.w	r4, ip, r1
  404efc:	f8d9 1008 	ldr.w	r1, [r9, #8]
  404f00:	420c      	tst	r4, r1
  404f02:	d119      	bne.n	404f38 <udp_input+0xd0>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
  404f04:	2e00      	cmp	r6, #0
  404f06:	d171      	bne.n	404fec <udp_input+0x184>
  404f08:	7c19      	ldrb	r1, [r3, #16]
  404f0a:	f001 0104 	and.w	r1, r1, #4
  404f0e:	b2c9      	uxtb	r1, r1
  404f10:	2900      	cmp	r1, #0
  404f12:	bf08      	it	eq
  404f14:	461e      	moveq	r6, r3
  404f16:	e069      	b.n	404fec <udp_input+0x184>
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
  404f18:	f113 0f04 	cmn.w	r3, #4
  404f1c:	d003      	beq.n	404f26 <udp_input+0xbe>
          (ip_addr_isany(&pcb->remote_ip) ||
  404f1e:	6859      	ldr	r1, [r3, #4]
  404f20:	b109      	cbz	r1, 404f26 <udp_input+0xbe>
  404f22:	4559      	cmp	r1, fp
  404f24:	d108      	bne.n	404f38 <udp_input+0xd0>
  404f26:	9c03      	ldr	r4, [sp, #12]
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
  404f28:	b162      	cbz	r2, 404f44 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  404f2a:	68d9      	ldr	r1, [r3, #12]
  404f2c:	60d1      	str	r1, [r2, #12]
          pcb->next = udp_pcbs;
  404f2e:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
  404f32:	4a37      	ldr	r2, [pc, #220]	; (405010 <udp_input+0x1a8>)
  404f34:	6013      	str	r3, [r2, #0]
  404f36:	e005      	b.n	404f44 <udp_input+0xdc>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  404f38:	68d9      	ldr	r1, [r3, #12]
  404f3a:	461a      	mov	r2, r3
  404f3c:	2900      	cmp	r1, #0
  404f3e:	d1cd      	bne.n	404edc <udp_input+0x74>
  404f40:	9c03      	ldr	r4, [sp, #12]
  404f42:	e000      	b.n	404f46 <udp_input+0xde>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
  404f44:	b943      	cbnz	r3, 404f58 <udp_input+0xf0>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  404f46:	b946      	cbnz	r6, 404f5a <udp_input+0xf2>
  404f48:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404f4c:	4b2d      	ldr	r3, [pc, #180]	; (405004 <udp_input+0x19c>)
  404f4e:	681b      	ldr	r3, [r3, #0]
  404f50:	429a      	cmp	r2, r3
  404f52:	d143      	bne.n	404fdc <udp_input+0x174>
  404f54:	2600      	movs	r6, #0
  404f56:	e000      	b.n	404f5a <udp_input+0xf2>
  404f58:	461e      	mov	r6, r3
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  404f5a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  404f5e:	b16b      	cbz	r3, 404f7c <udp_input+0x114>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  404f60:	8923      	ldrh	r3, [r4, #8]
  404f62:	9300      	str	r3, [sp, #0]
  404f64:	2311      	movs	r3, #17
  404f66:	4a27      	ldr	r2, [pc, #156]	; (405004 <udp_input+0x19c>)
  404f68:	492a      	ldr	r1, [pc, #168]	; (405014 <udp_input+0x1ac>)
  404f6a:	4620      	mov	r0, r4
  404f6c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 40501c <udp_input+0x1b4>
  404f70:	47c8      	blx	r9
  404f72:	b118      	cbz	r0, 404f7c <udp_input+0x114>
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  404f74:	4620      	mov	r0, r4
  404f76:	4b22      	ldr	r3, [pc, #136]	; (405000 <udp_input+0x198>)
  404f78:	4798      	blx	r3
          goto end;
  404f7a:	e03b      	b.n	404ff4 <udp_input+0x18c>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  404f7c:	f06f 0107 	mvn.w	r1, #7
  404f80:	4620      	mov	r0, r4
  404f82:	4b1e      	ldr	r3, [pc, #120]	; (404ffc <udp_input+0x194>)
  404f84:	4798      	blx	r3
  404f86:	b118      	cbz	r0, 404f90 <udp_input+0x128>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
  404f88:	4620      	mov	r0, r4
  404f8a:	4b1d      	ldr	r3, [pc, #116]	; (405000 <udp_input+0x198>)
  404f8c:	4798      	blx	r3
      goto end;
  404f8e:	e031      	b.n	404ff4 <udp_input+0x18c>
    }
    if (pcb != NULL) {
  404f90:	b166      	cbz	r6, 404fac <udp_input+0x144>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  404f92:	69b7      	ldr	r7, [r6, #24]
  404f94:	b137      	cbz	r7, 404fa4 <udp_input+0x13c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  404f96:	69f0      	ldr	r0, [r6, #28]
  404f98:	9500      	str	r5, [sp, #0]
  404f9a:	4b1e      	ldr	r3, [pc, #120]	; (405014 <udp_input+0x1ac>)
  404f9c:	4622      	mov	r2, r4
  404f9e:	4631      	mov	r1, r6
  404fa0:	47b8      	blx	r7
  404fa2:	e027      	b.n	404ff4 <udp_input+0x18c>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  404fa4:	4620      	mov	r0, r4
  404fa6:	4b16      	ldr	r3, [pc, #88]	; (405000 <udp_input+0x198>)
  404fa8:	4798      	blx	r3
        goto end;
  404faa:	e023      	b.n	404ff4 <udp_input+0x18c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  404fac:	b997      	cbnz	r7, 404fd4 <udp_input+0x16c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  404fae:	4b15      	ldr	r3, [pc, #84]	; (405004 <udp_input+0x19c>)
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  404fb0:	681b      	ldr	r3, [r3, #0]
  404fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  404fb6:	2be0      	cmp	r3, #224	; 0xe0
  404fb8:	d00c      	beq.n	404fd4 <udp_input+0x16c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  404fba:	f898 1000 	ldrb.w	r1, [r8]
  404fbe:	f001 010f 	and.w	r1, r1, #15
  404fc2:	3102      	adds	r1, #2
  404fc4:	0089      	lsls	r1, r1, #2
  404fc6:	4620      	mov	r0, r4
  404fc8:	4b0c      	ldr	r3, [pc, #48]	; (404ffc <udp_input+0x194>)
  404fca:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  404fcc:	2103      	movs	r1, #3
  404fce:	4620      	mov	r0, r4
  404fd0:	4b11      	ldr	r3, [pc, #68]	; (405018 <udp_input+0x1b0>)
  404fd2:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  404fd4:	4620      	mov	r0, r4
  404fd6:	4b0a      	ldr	r3, [pc, #40]	; (405000 <udp_input+0x198>)
  404fd8:	4798      	blx	r3
  404fda:	e00b      	b.n	404ff4 <udp_input+0x18c>
    }
  } else {
    pbuf_free(p);
  404fdc:	4620      	mov	r0, r4
  404fde:	4b08      	ldr	r3, [pc, #32]	; (405000 <udp_input+0x198>)
  404fe0:	4798      	blx	r3
  }
end:
  PERF_STOP("udp_input");
}
  404fe2:	e007      	b.n	404ff4 <udp_input+0x18c>

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  404fe4:	6819      	ldr	r1, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  404fe6:	458c      	cmp	ip, r1
  404fe8:	d184      	bne.n	404ef4 <udp_input+0x8c>
  404fea:	e78b      	b.n	404f04 <udp_input+0x9c>
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  404fec:	8a99      	ldrh	r1, [r3, #20]
  404fee:	42a9      	cmp	r1, r5
  404ff0:	d1a2      	bne.n	404f38 <udp_input+0xd0>
  404ff2:	e791      	b.n	404f18 <udp_input+0xb0>
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  404ff4:	b005      	add	sp, #20
  404ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ffa:	bf00      	nop
  404ffc:	004022fd 	.word	0x004022fd
  405000:	00402375 	.word	0x00402375
  405004:	2000373c 	.word	0x2000373c
  405008:	004015fd 	.word	0x004015fd
  40500c:	00400f11 	.word	0x00400f11
  405010:	20004784 	.word	0x20004784
  405014:	20003734 	.word	0x20003734
  405018:	00401149 	.word	0x00401149
  40501c:	004011dd 	.word	0x004011dd

00405020 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  405020:	b5f0      	push	{r4, r5, r6, r7, lr}
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  405022:	4b36      	ldr	r3, [pc, #216]	; (4050fc <udp_bind+0xdc>)
  405024:	681b      	ldr	r3, [r3, #0]
  405026:	b1c3      	cbz	r3, 40505a <udp_bind+0x3a>
  405028:	2600      	movs	r6, #0
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  40502a:	2701      	movs	r7, #1

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  40502c:	4298      	cmp	r0, r3
  40502e:	d00f      	beq.n	405050 <udp_bind+0x30>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  405030:	8a5c      	ldrh	r4, [r3, #18]
  405032:	4294      	cmp	r4, r2
  405034:	d10d      	bne.n	405052 <udp_bind+0x32>
  405036:	2b00      	cmp	r3, #0
  405038:	d04b      	beq.n	4050d2 <udp_bind+0xb2>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40503a:	681c      	ldr	r4, [r3, #0]
  40503c:	2c00      	cmp	r4, #0
  40503e:	d04b      	beq.n	4050d8 <udp_bind+0xb8>
  405040:	2900      	cmp	r1, #0
  405042:	d04c      	beq.n	4050de <udp_bind+0xbe>
           ip_addr_isany(ipaddr) ||
  405044:	680d      	ldr	r5, [r1, #0]
  405046:	2d00      	cmp	r5, #0
  405048:	d04c      	beq.n	4050e4 <udp_bind+0xc4>
  40504a:	42ac      	cmp	r4, r5
  40504c:	d101      	bne.n	405052 <udp_bind+0x32>
  40504e:	e04c      	b.n	4050ea <udp_bind+0xca>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  405050:	463e      	mov	r6, r7
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  405052:	68db      	ldr	r3, [r3, #12]
  405054:	2b00      	cmp	r3, #0
  405056:	d1e9      	bne.n	40502c <udp_bind+0xc>
  405058:	e000      	b.n	40505c <udp_bind+0x3c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  40505a:	2600      	movs	r6, #0
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  40505c:	b109      	cbz	r1, 405062 <udp_bind+0x42>
  40505e:	680b      	ldr	r3, [r1, #0]
  405060:	e000      	b.n	405064 <udp_bind+0x44>
  405062:	2300      	movs	r3, #0
  405064:	6003      	str	r3, [r0, #0]

  /* no port specified? */
  if (port == 0) {
  405066:	2a00      	cmp	r2, #0
  405068:	d12b      	bne.n	4050c2 <udp_bind+0xa2>
  40506a:	4b25      	ldr	r3, [pc, #148]	; (405100 <udp_bind+0xe0>)
  40506c:	8819      	ldrh	r1, [r3, #0]
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40506e:	4b23      	ldr	r3, [pc, #140]	; (4050fc <udp_bind+0xdc>)
  405070:	681c      	ldr	r4, [r3, #0]
  405072:	f44f 4580 	mov.w	r5, #16384	; 0x4000
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  405076:	f64f 77ff 	movw	r7, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  40507a:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  40507e:	42b9      	cmp	r1, r7
  405080:	bf1a      	itte	ne
  405082:	3101      	addne	r1, #1
  405084:	b289      	uxthne	r1, r1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  405086:	4671      	moveq	r1, lr
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405088:	b914      	cbnz	r4, 405090 <udp_bind+0x70>
  40508a:	4b1d      	ldr	r3, [pc, #116]	; (405100 <udp_bind+0xe0>)
  40508c:	8019      	strh	r1, [r3, #0]
  40508e:	e015      	b.n	4050bc <udp_bind+0x9c>
    if (pcb->local_port == udp_port) {
  405090:	8a63      	ldrh	r3, [r4, #18]
  405092:	428b      	cmp	r3, r1
  405094:	d004      	beq.n	4050a0 <udp_bind+0x80>
  405096:	4623      	mov	r3, r4
  405098:	e00b      	b.n	4050b2 <udp_bind+0x92>
  40509a:	8a5a      	ldrh	r2, [r3, #18]
  40509c:	428a      	cmp	r2, r1
  40509e:	d108      	bne.n	4050b2 <udp_bind+0x92>
  4050a0:	3d01      	subs	r5, #1
  4050a2:	b2ad      	uxth	r5, r5
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  4050a4:	2d00      	cmp	r5, #0
  4050a6:	d1ea      	bne.n	40507e <udp_bind+0x5e>
  4050a8:	4b15      	ldr	r3, [pc, #84]	; (405100 <udp_bind+0xe0>)
  4050aa:	8019      	strh	r1, [r3, #0]
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  4050ac:	f06f 0007 	mvn.w	r0, #7
  4050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  4050b2:	68db      	ldr	r3, [r3, #12]
  4050b4:	2b00      	cmp	r3, #0
  4050b6:	d1f0      	bne.n	40509a <udp_bind+0x7a>
  4050b8:	4b11      	ldr	r3, [pc, #68]	; (405100 <udp_bind+0xe0>)
  4050ba:	8019      	strh	r1, [r3, #0]
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
  4050bc:	4b10      	ldr	r3, [pc, #64]	; (405100 <udp_bind+0xe0>)
  4050be:	881a      	ldrh	r2, [r3, #0]
  ip_addr_set(&pcb->local_ip, ipaddr);

  /* no port specified? */
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
  4050c0:	b1b2      	cbz	r2, 4050f0 <udp_bind+0xd0>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
  4050c2:	8242      	strh	r2, [r0, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  4050c4:	b9be      	cbnz	r6, 4050f6 <udp_bind+0xd6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  4050c6:	4b0d      	ldr	r3, [pc, #52]	; (4050fc <udp_bind+0xdc>)
  4050c8:	681a      	ldr	r2, [r3, #0]
  4050ca:	60c2      	str	r2, [r0, #12]
    udp_pcbs = pcb;
  4050cc:	6018      	str	r0, [r3, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  4050ce:	2000      	movs	r0, #0
  4050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ip_addr_isany(ipaddr) ||
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
  4050d2:	f06f 0007 	mvn.w	r0, #7
  4050d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050d8:	f06f 0007 	mvn.w	r0, #7
  4050dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050de:	f06f 0007 	mvn.w	r0, #7
  4050e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050e4:	f06f 0007 	mvn.w	r0, #7
  4050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050ea:	f06f 0007 	mvn.w	r0, #7
  4050ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  4050f0:	f06f 0007 	mvn.w	r0, #7
  4050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  4050f6:	2000      	movs	r0, #0
}
  4050f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050fa:	bf00      	nop
  4050fc:	20004784 	.word	0x20004784
  405100:	2000000c 	.word	0x2000000c

00405104 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  405104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405108:	b085      	sub	sp, #20
  40510a:	4604      	mov	r4, r0
  40510c:	460f      	mov	r7, r1
  40510e:	4691      	mov	r9, r2
  405110:	469a      	mov	sl, r3
  405112:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  405116:	8a43      	ldrh	r3, [r0, #18]
  405118:	b92b      	cbnz	r3, 405126 <udp_sendto_if+0x22>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40511a:	2200      	movs	r2, #0
  40511c:	4601      	mov	r1, r0
  40511e:	4b36      	ldr	r3, [pc, #216]	; (4051f8 <udp_sendto_if+0xf4>)
  405120:	4798      	blx	r3
    if (err != ERR_OK) {
  405122:	2800      	cmp	r0, #0
  405124:	d15d      	bne.n	4051e2 <udp_sendto_if+0xde>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  405126:	2108      	movs	r1, #8
  405128:	4638      	mov	r0, r7
  40512a:	4b34      	ldr	r3, [pc, #208]	; (4051fc <udp_sendto_if+0xf8>)
  40512c:	4798      	blx	r3
  40512e:	b168      	cbz	r0, 40514c <udp_sendto_if+0x48>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  405130:	2200      	movs	r2, #0
  405132:	2108      	movs	r1, #8
  405134:	2001      	movs	r0, #1
  405136:	4b32      	ldr	r3, [pc, #200]	; (405200 <udp_sendto_if+0xfc>)
  405138:	4798      	blx	r3
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  40513a:	4606      	mov	r6, r0
  40513c:	2800      	cmp	r0, #0
  40513e:	d051      	beq.n	4051e4 <udp_sendto_if+0xe0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    if (p->tot_len != 0) {
  405140:	893b      	ldrh	r3, [r7, #8]
  405142:	b123      	cbz	r3, 40514e <udp_sendto_if+0x4a>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  405144:	4639      	mov	r1, r7
  405146:	4b2f      	ldr	r3, [pc, #188]	; (405204 <udp_sendto_if+0x100>)
  405148:	4798      	blx	r3
  40514a:	e000      	b.n	40514e <udp_sendto_if+0x4a>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  40514c:	463e      	mov	r6, r7
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  40514e:	6875      	ldr	r5, [r6, #4]
  udphdr->src = htons(pcb->local_port);
  405150:	8a60      	ldrh	r0, [r4, #18]
  405152:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 40520c <udp_sendto_if+0x108>
  405156:	47d8      	blx	fp
  405158:	8028      	strh	r0, [r5, #0]
  udphdr->dest = htons(dst_port);
  40515a:	4650      	mov	r0, sl
  40515c:	47d8      	blx	fp
  40515e:	8068      	strh	r0, [r5, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  405160:	2300      	movs	r3, #0
  405162:	71ab      	strb	r3, [r5, #6]
  405164:	71eb      	strb	r3, [r5, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  405166:	46a2      	mov	sl, r4
  405168:	b10c      	cbz	r4, 40516e <udp_sendto_if+0x6a>
  40516a:	6823      	ldr	r3, [r4, #0]
  40516c:	b913      	cbnz	r3, 405174 <udp_sendto_if+0x70>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  40516e:	f108 0a04 	add.w	sl, r8, #4
  405172:	e00b      	b.n	40518c <udp_sendto_if+0x88>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  405174:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405178:	4293      	cmp	r3, r2
  40517a:	d007      	beq.n	40518c <udp_sendto_if+0x88>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  40517c:	42be      	cmp	r6, r7
  40517e:	d034      	beq.n	4051ea <udp_sendto_if+0xe6>
        /* free the header pbuf */
        pbuf_free(q);
  405180:	4630      	mov	r0, r6
  405182:	4b21      	ldr	r3, [pc, #132]	; (405208 <udp_sendto_if+0x104>)
  405184:	4798      	blx	r3
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  405186:	f06f 0005 	mvn.w	r0, #5
  40518a:	e031      	b.n	4051f0 <udp_sendto_if+0xec>
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  40518c:	8930      	ldrh	r0, [r6, #8]
  40518e:	4b1f      	ldr	r3, [pc, #124]	; (40520c <udp_sendto_if+0x108>)
  405190:	4798      	blx	r3
  405192:	80a8      	strh	r0, [r5, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  405194:	7c23      	ldrb	r3, [r4, #16]
  405196:	f013 0f01 	tst.w	r3, #1
  40519a:	d10e      	bne.n	4051ba <udp_sendto_if+0xb6>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  40519c:	8933      	ldrh	r3, [r6, #8]
  40519e:	9300      	str	r3, [sp, #0]
  4051a0:	2311      	movs	r3, #17
  4051a2:	464a      	mov	r2, r9
  4051a4:	4651      	mov	r1, sl
  4051a6:	4630      	mov	r0, r6
  4051a8:	f8df b068 	ldr.w	fp, [pc, #104]	; 405214 <udp_sendto_if+0x110>
  4051ac:	47d8      	blx	fp

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
        udpchksum = 0xffff;
      }
      udphdr->chksum = udpchksum;
  4051ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4051b2:	2800      	cmp	r0, #0
  4051b4:	bf08      	it	eq
  4051b6:	4618      	moveq	r0, r3
  4051b8:	80e8      	strh	r0, [r5, #6]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
  4051ba:	7aa3      	ldrb	r3, [r4, #10]
  4051bc:	f8cd 8008 	str.w	r8, [sp, #8]
  4051c0:	2211      	movs	r2, #17
  4051c2:	9201      	str	r2, [sp, #4]
  4051c4:	7a62      	ldrb	r2, [r4, #9]
  4051c6:	9200      	str	r2, [sp, #0]
  4051c8:	464a      	mov	r2, r9
  4051ca:	4651      	mov	r1, sl
  4051cc:	4630      	mov	r0, r6
  4051ce:	4c10      	ldr	r4, [pc, #64]	; (405210 <udp_sendto_if+0x10c>)
  4051d0:	47a0      	blx	r4
  4051d2:	4604      	mov	r4, r0
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  4051d4:	42be      	cmp	r6, r7
  4051d6:	d00b      	beq.n	4051f0 <udp_sendto_if+0xec>
    /* free the header pbuf */
    pbuf_free(q);
  4051d8:	4630      	mov	r0, r6
  4051da:	4b0b      	ldr	r3, [pc, #44]	; (405208 <udp_sendto_if+0x104>)
  4051dc:	4798      	blx	r3
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  4051de:	4620      	mov	r0, r4
  4051e0:	e006      	b.n	4051f0 <udp_sendto_if+0xec>
  4051e2:	e005      	b.n	4051f0 <udp_sendto_if+0xec>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  4051e4:	f04f 30ff 	mov.w	r0, #4294967295
  4051e8:	e002      	b.n	4051f0 <udp_sendto_if+0xec>
        /* free the header pbuf */
        pbuf_free(q);
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  4051ea:	f06f 0005 	mvn.w	r0, #5
  4051ee:	e7ff      	b.n	4051f0 <udp_sendto_if+0xec>
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
}
  4051f0:	b005      	add	sp, #20
  4051f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051f6:	bf00      	nop
  4051f8:	00405021 	.word	0x00405021
  4051fc:	004022fd 	.word	0x004022fd
  405200:	004023d5 	.word	0x004023d5
  405204:	004025e1 	.word	0x004025e1
  405208:	00402375 	.word	0x00402375
  40520c:	00400f05 	.word	0x00400f05
  405210:	004014c9 	.word	0x004014c9
  405214:	004011dd 	.word	0x004011dd

00405218 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
  405218:	b5f0      	push	{r4, r5, r6, r7, lr}
  40521a:	b083      	sub	sp, #12
  40521c:	4605      	mov	r5, r0
  40521e:	460e      	mov	r6, r1
  405220:	4614      	mov	r4, r2
  405222:	461f      	mov	r7, r3

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(dst_ip);
  405224:	4610      	mov	r0, r2
  405226:	4b07      	ldr	r3, [pc, #28]	; (405244 <udp_sendto+0x2c>)
  405228:	4798      	blx	r3
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  40522a:	b138      	cbz	r0, 40523c <udp_sendto+0x24>
    return ERR_RTE;
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  40522c:	9000      	str	r0, [sp, #0]
  40522e:	463b      	mov	r3, r7
  405230:	4622      	mov	r2, r4
  405232:	4631      	mov	r1, r6
  405234:	4628      	mov	r0, r5
  405236:	4c04      	ldr	r4, [pc, #16]	; (405248 <udp_sendto+0x30>)
  405238:	47a0      	blx	r4
  40523a:	e001      	b.n	405240 <udp_sendto+0x28>
  /* no outgoing network interface could be found? */
  if (netif == NULL) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
  40523c:	f06f 0003 	mvn.w	r0, #3
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY */
}
  405240:	b003      	add	sp, #12
  405242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405244:	004012d5 	.word	0x004012d5
  405248:	00405105 	.word	0x00405105

0040524c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  40524c:	b510      	push	{r4, lr}
  40524e:	4602      	mov	r2, r0
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  405250:	8a83      	ldrh	r3, [r0, #20]
  405252:	3204      	adds	r2, #4
  405254:	4c01      	ldr	r4, [pc, #4]	; (40525c <udp_send+0x10>)
  405256:	47a0      	blx	r4
}
  405258:	bd10      	pop	{r4, pc}
  40525a:	bf00      	nop
  40525c:	00405219 	.word	0x00405219

00405260 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  405260:	b570      	push	{r4, r5, r6, lr}
  405262:	4604      	mov	r4, r0
  405264:	460d      	mov	r5, r1
  405266:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  405268:	8a43      	ldrh	r3, [r0, #18]
  40526a:	b923      	cbnz	r3, 405276 <udp_connect+0x16>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40526c:	2200      	movs	r2, #0
  40526e:	4601      	mov	r1, r0
  405270:	4b11      	ldr	r3, [pc, #68]	; (4052b8 <udp_connect+0x58>)
  405272:	4798      	blx	r3
    if (err != ERR_OK) {
  405274:	b9d0      	cbnz	r0, 4052ac <udp_connect+0x4c>
      return err;
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  405276:	b10d      	cbz	r5, 40527c <udp_connect+0x1c>
  405278:	682b      	ldr	r3, [r5, #0]
  40527a:	e000      	b.n	40527e <udp_connect+0x1e>
  40527c:	2300      	movs	r3, #0
  40527e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  405280:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  405282:	7c23      	ldrb	r3, [r4, #16]
  405284:	f043 0304 	orr.w	r3, r3, #4
  405288:	7423      	strb	r3, [r4, #16]
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40528a:	4b0c      	ldr	r3, [pc, #48]	; (4052bc <udp_connect+0x5c>)
  40528c:	681a      	ldr	r2, [r3, #0]
  40528e:	b142      	cbz	r2, 4052a2 <udp_connect+0x42>
    if (pcb == ipcb) {
  405290:	4294      	cmp	r4, r2
  405292:	d00c      	beq.n	4052ae <udp_connect+0x4e>
  405294:	4613      	mov	r3, r2
  405296:	e001      	b.n	40529c <udp_connect+0x3c>
  405298:	429c      	cmp	r4, r3
  40529a:	d00a      	beq.n	4052b2 <udp_connect+0x52>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40529c:	68db      	ldr	r3, [r3, #12]
  40529e:	2b00      	cmp	r3, #0
  4052a0:	d1fa      	bne.n	405298 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  4052a2:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  4052a4:	4b05      	ldr	r3, [pc, #20]	; (4052bc <udp_connect+0x5c>)
  4052a6:	601c      	str	r4, [r3, #0]
  return ERR_OK;
  4052a8:	2000      	movs	r0, #0
  4052aa:	bd70      	pop	{r4, r5, r6, pc}
  4052ac:	bd70      	pop	{r4, r5, r6, pc}

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    if (pcb == ipcb) {
      /* already on the list, just return */
      return ERR_OK;
  4052ae:	2000      	movs	r0, #0
  4052b0:	bd70      	pop	{r4, r5, r6, pc}
  4052b2:	2000      	movs	r0, #0
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
  4052b4:	bd70      	pop	{r4, r5, r6, pc}
  4052b6:	bf00      	nop
  4052b8:	00405021 	.word	0x00405021
  4052bc:	20004784 	.word	0x20004784

004052c0 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  4052c0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
  4052c2:	61c2      	str	r2, [r0, #28]
  4052c4:	4770      	bx	lr
  4052c6:	bf00      	nop

004052c8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  4052c8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  4052ca:	2000      	movs	r0, #0
  4052cc:	4b05      	ldr	r3, [pc, #20]	; (4052e4 <udp_new+0x1c>)
  4052ce:	4798      	blx	r3
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  4052d0:	4604      	mov	r4, r0
  4052d2:	b128      	cbz	r0, 4052e0 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  4052d4:	2220      	movs	r2, #32
  4052d6:	2100      	movs	r1, #0
  4052d8:	4b03      	ldr	r3, [pc, #12]	; (4052e8 <udp_new+0x20>)
  4052da:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
  4052dc:	23ff      	movs	r3, #255	; 0xff
  4052de:	72a3      	strb	r3, [r4, #10]
  }
  return pcb;
}
  4052e0:	4620      	mov	r0, r4
  4052e2:	bd10      	pop	{r4, pc}
  4052e4:	00402199 	.word	0x00402199
  4052e8:	00406529 	.word	0x00406529

004052ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  4052ec:	b510      	push	{r4, lr}
  4052ee:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  4052f0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  4052f4:	4b09      	ldr	r3, [pc, #36]	; (40531c <etharp_free_entry+0x30>)
  4052f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4052fa:	b138      	cbz	r0, 40530c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  4052fc:	4b08      	ldr	r3, [pc, #32]	; (405320 <etharp_free_entry+0x34>)
  4052fe:	4798      	blx	r3
    arp_table[i].q = NULL;
  405300:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405304:	009b      	lsls	r3, r3, #2
  405306:	2100      	movs	r1, #0
  405308:	4a04      	ldr	r2, [pc, #16]	; (40531c <etharp_free_entry+0x30>)
  40530a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  40530c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405310:	4b02      	ldr	r3, [pc, #8]	; (40531c <etharp_free_entry+0x30>)
  405312:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  405316:	2300      	movs	r3, #0
  405318:	74a3      	strb	r3, [r4, #18]
  40531a:	bd10      	pop	{r4, pc}
  40531c:	2000240c 	.word	0x2000240c
  405320:	00402375 	.word	0x00402375

00405324 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  405324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405328:	b083      	sub	sp, #12
  40532a:	4a3b      	ldr	r2, [pc, #236]	; (405418 <etharp_find_entry+0xf4>)
  40532c:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
  40532e:	4699      	mov	r9, r3
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  405330:	f04f 0e0a 	mov.w	lr, #10
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  405334:	469c      	mov	ip, r3
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  405336:	4675      	mov	r5, lr
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  405338:	46f0      	mov	r8, lr
  40533a:	46f2      	mov	sl, lr
  40533c:	9301      	str	r3, [sp, #4]
  40533e:	4614      	mov	r4, r2
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
  405340:	7c97      	ldrb	r7, [r2, #18]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  405342:	2d0a      	cmp	r5, #10
  405344:	d102      	bne.n	40534c <etharp_find_entry+0x28>
  405346:	b917      	cbnz	r7, 40534e <etharp_find_entry+0x2a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  405348:	b25d      	sxtb	r5, r3
  40534a:	e023      	b.n	405394 <etharp_find_entry+0x70>
    } else if (state != ETHARP_STATE_EMPTY) {
  40534c:	b317      	cbz	r7, 405394 <etharp_find_entry+0x70>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  40534e:	b130      	cbz	r0, 40535e <etharp_find_entry+0x3a>
  405350:	6806      	ldr	r6, [r0, #0]
  405352:	46b3      	mov	fp, r6
  405354:	6866      	ldr	r6, [r4, #4]
  405356:	45b3      	cmp	fp, r6
  405358:	d101      	bne.n	40535e <etharp_find_entry+0x3a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  40535a:	b258      	sxtb	r0, r3
  40535c:	e059      	b.n	405412 <etharp_find_entry+0xee>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  40535e:	2f01      	cmp	r7, #1
  405360:	d110      	bne.n	405384 <etharp_find_entry+0x60>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  405362:	6827      	ldr	r7, [r4, #0]
  405364:	b137      	cbz	r7, 405374 <etharp_find_entry+0x50>
          if (arp_table[i].ctime >= age_queue) {
  405366:	7ce4      	ldrb	r4, [r4, #19]
  405368:	454c      	cmp	r4, r9
  40536a:	d313      	bcc.n	405394 <etharp_find_entry+0x70>
            old_queue = i;
  40536c:	fa4f fe83 	sxtb.w	lr, r3
            age_queue = arp_table[i].ctime;
  405370:	46a1      	mov	r9, r4
  405372:	e00f      	b.n	405394 <etharp_find_entry+0x70>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  405374:	7ce4      	ldrb	r4, [r4, #19]
  405376:	9e01      	ldr	r6, [sp, #4]
  405378:	42b4      	cmp	r4, r6
  40537a:	d30b      	bcc.n	405394 <etharp_find_entry+0x70>
            old_pending = i;
  40537c:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
  405380:	9401      	str	r4, [sp, #4]
  405382:	e007      	b.n	405394 <etharp_find_entry+0x70>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  405384:	2f01      	cmp	r7, #1
  405386:	d905      	bls.n	405394 <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  405388:	7ce4      	ldrb	r4, [r4, #19]
  40538a:	4564      	cmp	r4, ip
            old_stable = i;
  40538c:	bf24      	itt	cs
  40538e:	fa4f f883 	sxtbcs.w	r8, r3
            age_stable = arp_table[i].ctime;
  405392:	46a4      	movcs	ip, r4
  405394:	3301      	adds	r3, #1
  405396:	3214      	adds	r2, #20
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  405398:	2b0a      	cmp	r3, #10
  40539a:	d1d0      	bne.n	40533e <etharp_find_entry+0x1a>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  40539c:	f011 0f02 	tst.w	r1, #2
  4053a0:	d12f      	bne.n	405402 <etharp_find_entry+0xde>
  4053a2:	4604      	mov	r4, r0
  4053a4:	2d0a      	cmp	r5, #10
  4053a6:	d103      	bne.n	4053b0 <etharp_find_entry+0x8c>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  4053a8:	f011 0f01 	tst.w	r1, #1
  4053ac:	d104      	bne.n	4053b8 <etharp_find_entry+0x94>
  4053ae:	e02b      	b.n	405408 <etharp_find_entry+0xe4>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  4053b0:	2d09      	cmp	r5, #9
  4053b2:	dc01      	bgt.n	4053b8 <etharp_find_entry+0x94>
    i = empty;
  4053b4:	b2ed      	uxtb	r5, r5
  4053b6:	e013      	b.n	4053e0 <etharp_find_entry+0xbc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  4053b8:	f1b8 0f09 	cmp.w	r8, #9
  4053bc:	dc02      	bgt.n	4053c4 <etharp_find_entry+0xa0>
      /* recycle oldest stable*/
      i = old_stable;
  4053be:	fa5f f588 	uxtb.w	r5, r8
  4053c2:	e00a      	b.n	4053da <etharp_find_entry+0xb6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  4053c4:	f1ba 0f09 	cmp.w	sl, #9
  4053c8:	dc02      	bgt.n	4053d0 <etharp_find_entry+0xac>
      /* recycle oldest pending */
      i = old_pending;
  4053ca:	fa5f f58a 	uxtb.w	r5, sl
  4053ce:	e004      	b.n	4053da <etharp_find_entry+0xb6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  4053d0:	f1be 0f09 	cmp.w	lr, #9
  4053d4:	dc1b      	bgt.n	40540e <etharp_find_entry+0xea>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  4053d6:	fa5f f58e 	uxtb.w	r5, lr
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  4053da:	4628      	mov	r0, r5
  4053dc:	4b0f      	ldr	r3, [pc, #60]	; (40541c <etharp_find_entry+0xf8>)
  4053de:	4798      	blx	r3
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  4053e0:	b134      	cbz	r4, 4053f0 <etharp_find_entry+0xcc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  4053e2:	6821      	ldr	r1, [r4, #0]
  4053e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  4053e8:	4a0b      	ldr	r2, [pc, #44]	; (405418 <etharp_find_entry+0xf4>)
  4053ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4053ee:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  4053f0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  4053f4:	4b08      	ldr	r3, [pc, #32]	; (405418 <etharp_find_entry+0xf4>)
  4053f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4053fa:	2200      	movs	r2, #0
  4053fc:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
  4053fe:	b268      	sxtb	r0, r5
  405400:	e007      	b.n	405412 <etharp_find_entry+0xee>
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  405402:	f04f 30ff 	mov.w	r0, #4294967295
  405406:	e004      	b.n	405412 <etharp_find_entry+0xee>
  405408:	f04f 30ff 	mov.w	r0, #4294967295
  40540c:	e001      	b.n	405412 <etharp_find_entry+0xee>
      i = old_queue;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  40540e:	f04f 30ff 	mov.w	r0, #4294967295
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  }
  arp_table[i].ctime = 0;
  return (err_t)i;
}
  405412:	b003      	add	sp, #12
  405414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405418:	2000240c 	.word	0x2000240c
  40541c:	004052ed 	.word	0x004052ed

00405420 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  405420:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  405422:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  405424:	681d      	ldr	r5, [r3, #0]
  405426:	6025      	str	r5, [r4, #0]
  405428:	889b      	ldrh	r3, [r3, #4]
  40542a:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
  40542c:	6813      	ldr	r3, [r2, #0]
  40542e:	f8c4 3006 	str.w	r3, [r4, #6]
  405432:	8893      	ldrh	r3, [r2, #4]
  405434:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  405436:	2308      	movs	r3, #8
  405438:	7323      	strb	r3, [r4, #12]
  40543a:	2300      	movs	r3, #0
  40543c:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  40543e:	6983      	ldr	r3, [r0, #24]
  405440:	4798      	blx	r3
}
  405442:	bd38      	pop	{r3, r4, r5, pc}

00405444 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  405444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405446:	4c0d      	ldr	r4, [pc, #52]	; (40547c <etharp_tmr+0x38>)
  405448:	2500      	movs	r5, #0
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  40544a:	4e0d      	ldr	r6, [pc, #52]	; (405480 <etharp_tmr+0x3c>)
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  40544c:	2702      	movs	r7, #2
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
  40544e:	4628      	mov	r0, r5
  405450:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
  405452:	b172      	cbz	r2, 405472 <etharp_tmr+0x2e>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  405454:	7ce3      	ldrb	r3, [r4, #19]
  405456:	3301      	adds	r3, #1
  405458:	b2db      	uxtb	r3, r3
  40545a:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40545c:	2bef      	cmp	r3, #239	; 0xef
  40545e:	d803      	bhi.n	405468 <etharp_tmr+0x24>
  405460:	2a01      	cmp	r2, #1
  405462:	d103      	bne.n	40546c <etharp_tmr+0x28>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  405464:	2b01      	cmp	r3, #1
  405466:	d904      	bls.n	405472 <etharp_tmr+0x2e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  405468:	47b0      	blx	r6
  40546a:	e002      	b.n	405472 <etharp_tmr+0x2e>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  40546c:	2a03      	cmp	r2, #3
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  40546e:	bf08      	it	eq
  405470:	74a7      	strbeq	r7, [r4, #18]
  405472:	3501      	adds	r5, #1
  405474:	3414      	adds	r4, #20
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  405476:	2d0a      	cmp	r5, #10
  405478:	d1e9      	bne.n	40544e <etharp_tmr+0xa>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
  40547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40547c:	2000240c 	.word	0x2000240c
  405480:	004052ed 	.word	0x004052ed

00405484 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  405484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405488:	4605      	mov	r5, r0
  40548a:	4688      	mov	r8, r1
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  40548c:	2200      	movs	r2, #0
  40548e:	212a      	movs	r1, #42	; 0x2a
  405490:	2003      	movs	r0, #3
  405492:	4b22      	ldr	r3, [pc, #136]	; (40551c <etharp_request+0x98>)
  405494:	4798      	blx	r3
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  405496:	2800      	cmp	r0, #0
  405498:	d03c      	beq.n	405514 <etharp_request+0x90>
  40549a:	4607      	mov	r7, r0
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
  40549c:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  40549e:	2001      	movs	r0, #1
  4054a0:	4b1f      	ldr	r3, [pc, #124]	; (405520 <etharp_request+0x9c>)
  4054a2:	4798      	blx	r3
  4054a4:	82a0      	strh	r0, [r4, #20]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  4054a6:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  4054aa:	f8c4 3016 	str.w	r3, [r4, #22]
  4054ae:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  4054b2:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  4054b4:	4b1b      	ldr	r3, [pc, #108]	; (405524 <etharp_request+0xa0>)
  4054b6:	6818      	ldr	r0, [r3, #0]
  4054b8:	6220      	str	r0, [r4, #32]
  4054ba:	889b      	ldrh	r3, [r3, #4]
  4054bc:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  4054be:	4b1a      	ldr	r3, [pc, #104]	; (405528 <etharp_request+0xa4>)
  4054c0:	6818      	ldr	r0, [r3, #0]
  4054c2:	6020      	str	r0, [r4, #0]
  4054c4:	889b      	ldrh	r3, [r3, #4]
  4054c6:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  4054c8:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  4054cc:	f8c4 3006 	str.w	r3, [r4, #6]
  4054d0:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  4054d4:	8163      	strh	r3, [r4, #10]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  4054d6:	686b      	ldr	r3, [r5, #4]
  4054d8:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  4054da:	f8d8 3000 	ldr.w	r3, [r8]
  4054de:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  4054e2:	2200      	movs	r2, #0
  4054e4:	73a2      	strb	r2, [r4, #14]
  4054e6:	2301      	movs	r3, #1
  4054e8:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  4054ea:	2308      	movs	r3, #8
  4054ec:	7423      	strb	r3, [r4, #16]
  4054ee:	7462      	strb	r2, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  4054f0:	2206      	movs	r2, #6
  4054f2:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
  4054f4:	2204      	movs	r2, #4
  4054f6:	74e2      	strb	r2, [r4, #19]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  4054f8:	7323      	strb	r3, [r4, #12]
  4054fa:	2306      	movs	r3, #6
  4054fc:	7363      	strb	r3, [r4, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  4054fe:	69ab      	ldr	r3, [r5, #24]
  405500:	4639      	mov	r1, r7
  405502:	4628      	mov	r0, r5
  405504:	4798      	blx	r3
  405506:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  405508:	4638      	mov	r0, r7
  40550a:	4b08      	ldr	r3, [pc, #32]	; (40552c <etharp_request+0xa8>)
  40550c:	4798      	blx	r3
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
  40550e:	4620      	mov	r0, r4
  405510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  405514:	f04f 30ff 	mov.w	r0, #4294967295
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  405518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40551c:	004023d5 	.word	0x004023d5
  405520:	00400f05 	.word	0x00400f05
  405524:	0040959c 	.word	0x0040959c
  405528:	00409594 	.word	0x00409594
  40552c:	00402375 	.word	0x00402375

00405530 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  405530:	b570      	push	{r4, r5, r6, lr}
  405532:	4605      	mov	r5, r0
  405534:	460e      	mov	r6, r1
  405536:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  405538:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40553c:	4b14      	ldr	r3, [pc, #80]	; (405590 <etharp_output_to_arp_index+0x60>)
  40553e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405542:	7c9b      	ldrb	r3, [r3, #18]
  405544:	2b02      	cmp	r3, #2
  405546:	d115      	bne.n	405574 <etharp_output_to_arp_index+0x44>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  405548:	4613      	mov	r3, r2
  40554a:	4a11      	ldr	r2, [pc, #68]	; (405590 <etharp_output_to_arp_index+0x60>)
  40554c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  405550:	7cdb      	ldrb	r3, [r3, #19]
  405552:	2be3      	cmp	r3, #227	; 0xe3
  405554:	d90e      	bls.n	405574 <etharp_output_to_arp_index+0x44>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  405556:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  40555a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  40555e:	3104      	adds	r1, #4
  405560:	4b0c      	ldr	r3, [pc, #48]	; (405594 <etharp_output_to_arp_index+0x64>)
  405562:	4798      	blx	r3
  405564:	b930      	cbnz	r0, 405574 <etharp_output_to_arp_index+0x44>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  405566:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40556a:	4a09      	ldr	r2, [pc, #36]	; (405590 <etharp_output_to_arp_index+0x60>)
  40556c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405570:	2203      	movs	r2, #3
  405572:	749a      	strb	r2, [r3, #18]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  405574:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405578:	4b05      	ldr	r3, [pc, #20]	; (405590 <etharp_output_to_arp_index+0x60>)
  40557a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  40557e:	330c      	adds	r3, #12
  405580:	f105 0227 	add.w	r2, r5, #39	; 0x27
  405584:	4631      	mov	r1, r6
  405586:	4628      	mov	r0, r5
  405588:	4c03      	ldr	r4, [pc, #12]	; (405598 <etharp_output_to_arp_index+0x68>)
  40558a:	47a0      	blx	r4
    &arp_table[arp_idx].ethaddr);
}
  40558c:	bd70      	pop	{r4, r5, r6, pc}
  40558e:	bf00      	nop
  405590:	2000240c 	.word	0x2000240c
  405594:	00405485 	.word	0x00405485
  405598:	00405421 	.word	0x00405421

0040559c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  40559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40559e:	4607      	mov	r7, r0
  4055a0:	460d      	mov	r5, r1
  4055a2:	4616      	mov	r6, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  4055a4:	4601      	mov	r1, r0
  4055a6:	6828      	ldr	r0, [r5, #0]
  4055a8:	4b49      	ldr	r3, [pc, #292]	; (4056d0 <etharp_query+0x134>)
  4055aa:	4798      	blx	r3
  4055ac:	2800      	cmp	r0, #0
  4055ae:	d165      	bne.n	40567c <etharp_query+0xe0>
      ip_addr_ismulticast(ipaddr) ||
  4055b0:	682b      	ldr	r3, [r5, #0]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  4055b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  4055b6:	2ae0      	cmp	r2, #224	; 0xe0
  4055b8:	d063      	beq.n	405682 <etharp_query+0xe6>
      ip_addr_ismulticast(ipaddr) ||
  4055ba:	2d00      	cmp	r5, #0
  4055bc:	d064      	beq.n	405688 <etharp_query+0xec>
      ip_addr_isany(ipaddr)) {
  4055be:	2b00      	cmp	r3, #0
  4055c0:	d065      	beq.n	40568e <etharp_query+0xf2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  4055c2:	2101      	movs	r1, #1
  4055c4:	4628      	mov	r0, r5
  4055c6:	4b43      	ldr	r3, [pc, #268]	; (4056d4 <etharp_query+0x138>)
  4055c8:	4798      	blx	r3

  /* could not find or create entry? */
  if (i < 0) {
  4055ca:	1e04      	subs	r4, r0, #0
  4055cc:	db62      	blt.n	405694 <etharp_query+0xf8>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  4055ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4055d2:	4a41      	ldr	r2, [pc, #260]	; (4056d8 <etharp_query+0x13c>)
  4055d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4055d8:	7c9b      	ldrb	r3, [r3, #18]
  4055da:	b933      	cbnz	r3, 4055ea <etharp_query+0x4e>
    arp_table[i].state = ETHARP_STATE_PENDING;
  4055dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4055e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4055e4:	2201      	movs	r2, #1
  4055e6:	749a      	strb	r2, [r3, #18]
  4055e8:	e004      	b.n	4055f4 <etharp_query+0x58>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  4055ea:	2b01      	cmp	r3, #1
  4055ec:	d002      	beq.n	4055f4 <etharp_query+0x58>
  4055ee:	2e00      	cmp	r6, #0
  4055f0:	d157      	bne.n	4056a2 <etharp_query+0x106>
  4055f2:	e051      	b.n	405698 <etharp_query+0xfc>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  4055f4:	4629      	mov	r1, r5
  4055f6:	4638      	mov	r0, r7
  4055f8:	4b38      	ldr	r3, [pc, #224]	; (4056dc <etharp_query+0x140>)
  4055fa:	4798      	blx	r3
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  4055fc:	2e00      	cmp	r6, #0
  4055fe:	d065      	beq.n	4056cc <etharp_query+0x130>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  405600:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405604:	4a34      	ldr	r2, [pc, #208]	; (4056d8 <etharp_query+0x13c>)
  405606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40560a:	7c9b      	ldrb	r3, [r3, #18]
  40560c:	2b01      	cmp	r3, #1
  40560e:	d90e      	bls.n	40562e <etharp_query+0x92>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  405610:	4b33      	ldr	r3, [pc, #204]	; (4056e0 <etharp_query+0x144>)
  405612:	701c      	strb	r4, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  405614:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405618:	4a2f      	ldr	r2, [pc, #188]	; (4056d8 <etharp_query+0x13c>)
  40561a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40561e:	330c      	adds	r3, #12
  405620:	f107 0227 	add.w	r2, r7, #39	; 0x27
  405624:	4631      	mov	r1, r6
  405626:	4638      	mov	r0, r7
  405628:	4c2e      	ldr	r4, [pc, #184]	; (4056e4 <etharp_query+0x148>)
  40562a:	47a0      	blx	r4
  40562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  40562e:	2b01      	cmp	r3, #1
  405630:	d14c      	bne.n	4056cc <etharp_query+0x130>
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  405632:	7b33      	ldrb	r3, [r6, #12]
  405634:	2b01      	cmp	r3, #1
  405636:	d139      	bne.n	4056ac <etharp_query+0x110>
  405638:	4633      	mov	r3, r6
  40563a:	e002      	b.n	405642 <etharp_query+0xa6>
  40563c:	7b1a      	ldrb	r2, [r3, #12]
  40563e:	2a01      	cmp	r2, #1
  405640:	d135      	bne.n	4056ae <etharp_query+0x112>
        copy_needed = 1;
        break;
      }
      p = p->next;
  405642:	681b      	ldr	r3, [r3, #0]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
  405644:	2b00      	cmp	r3, #0
  405646:	d1f9      	bne.n	40563c <etharp_query+0xa0>
  405648:	e03c      	b.n	4056c4 <etharp_query+0x128>
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
      if(p != NULL) {
        if (pbuf_copy(p, q) != ERR_OK) {
  40564a:	4631      	mov	r1, r6
  40564c:	4628      	mov	r0, r5
  40564e:	4b26      	ldr	r3, [pc, #152]	; (4056e8 <etharp_query+0x14c>)
  405650:	4798      	blx	r3
  405652:	b118      	cbz	r0, 40565c <etharp_query+0xc0>
          pbuf_free(p);
  405654:	4628      	mov	r0, r5
  405656:	4b25      	ldr	r3, [pc, #148]	; (4056ec <etharp_query+0x150>)
  405658:	4798      	blx	r3
  40565a:	e030      	b.n	4056be <etharp_query+0x122>
      }
      p = p->next;
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  40565c:	462e      	mov	r6, r5
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
  40565e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405662:	4a1d      	ldr	r2, [pc, #116]	; (4056d8 <etharp_query+0x13c>)
  405664:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  405668:	b108      	cbz	r0, 40566e <etharp_query+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
  40566a:	4b20      	ldr	r3, [pc, #128]	; (4056ec <etharp_query+0x150>)
  40566c:	4798      	blx	r3
      }
      arp_table[i].q = p;
  40566e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405672:	4a19      	ldr	r2, [pc, #100]	; (4056d8 <etharp_query+0x13c>)
  405674:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
      result = ERR_OK;
  405678:	2000      	movs	r0, #0
  40567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40567c:	f06f 000d 	mvn.w	r0, #13
  405680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405682:	f06f 000d 	mvn.w	r0, #13
  405686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405688:	f06f 000d 	mvn.w	r0, #13
  40568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40568e:	f06f 000d 	mvn.w	r0, #13
  405692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  405694:	4620      	mov	r0, r4
  405696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  405698:	4629      	mov	r1, r5
  40569a:	4638      	mov	r0, r7
  40569c:	4b0f      	ldr	r3, [pc, #60]	; (4056dc <etharp_query+0x140>)
  40569e:	4798      	blx	r3
  4056a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  4056a2:	2b01      	cmp	r3, #1
  4056a4:	d8b4      	bhi.n	405610 <etharp_query+0x74>
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  4056a6:	f04f 30ff 	mov.w	r0, #4294967295
  4056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  4056ac:	4633      	mov	r3, r6
      }
      p = p->next;
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  4056ae:	2200      	movs	r2, #0
  4056b0:	8919      	ldrh	r1, [r3, #8]
  4056b2:	2003      	movs	r0, #3
  4056b4:	4b0e      	ldr	r3, [pc, #56]	; (4056f0 <etharp_query+0x154>)
  4056b6:	4798      	blx	r3
      if(p != NULL) {
  4056b8:	4605      	mov	r5, r0
  4056ba:	2800      	cmp	r0, #0
  4056bc:	d1c5      	bne.n	40564a <etharp_query+0xae>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  4056be:	f04f 30ff 	mov.w	r0, #4294967295
  4056c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
  4056c4:	4630      	mov	r0, r6
  4056c6:	4b0b      	ldr	r3, [pc, #44]	; (4056f4 <etharp_query+0x158>)
  4056c8:	4798      	blx	r3
  4056ca:	e7c8      	b.n	40565e <etharp_query+0xc2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
  4056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056ce:	bf00      	nop
  4056d0:	004015fd 	.word	0x004015fd
  4056d4:	00405325 	.word	0x00405325
  4056d8:	2000240c 	.word	0x2000240c
  4056dc:	00405485 	.word	0x00405485
  4056e0:	20002408 	.word	0x20002408
  4056e4:	00405421 	.word	0x00405421
  4056e8:	004025f9 	.word	0x004025f9
  4056ec:	00402375 	.word	0x00402375
  4056f0:	004023d5 	.word	0x004023d5
  4056f4:	004025a1 	.word	0x004025a1

004056f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  4056f8:	b570      	push	{r4, r5, r6, lr}
  4056fa:	b082      	sub	sp, #8
  4056fc:	4605      	mov	r5, r0
  4056fe:	460e      	mov	r6, r1
  405700:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  405702:	210e      	movs	r1, #14
  405704:	4630      	mov	r0, r6
  405706:	4b3c      	ldr	r3, [pc, #240]	; (4057f8 <etharp_output+0x100>)
  405708:	4798      	blx	r3
  40570a:	2800      	cmp	r0, #0
  40570c:	d16a      	bne.n	4057e4 <etharp_output+0xec>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  40570e:	4629      	mov	r1, r5
  405710:	6820      	ldr	r0, [r4, #0]
  405712:	4b3a      	ldr	r3, [pc, #232]	; (4057fc <etharp_output+0x104>)
  405714:	4798      	blx	r3
  405716:	2800      	cmp	r0, #0
  405718:	d15c      	bne.n	4057d4 <etharp_output+0xdc>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  40571a:	6823      	ldr	r3, [r4, #0]
  40571c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  405720:	2ae0      	cmp	r2, #224	; 0xe0
  405722:	d115      	bne.n	405750 <etharp_output+0x58>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  405724:	2301      	movs	r3, #1
  405726:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  40572a:	2300      	movs	r3, #0
  40572c:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  405730:	235e      	movs	r3, #94	; 0x5e
  405732:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  405736:	7863      	ldrb	r3, [r4, #1]
  405738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40573c:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  405740:	78a3      	ldrb	r3, [r4, #2]
  405742:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  405746:	78e3      	ldrb	r3, [r4, #3]
  405748:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  40574c:	466b      	mov	r3, sp
  40574e:	e042      	b.n	4057d6 <etharp_output+0xde>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  405750:	686a      	ldr	r2, [r5, #4]
  405752:	405a      	eors	r2, r3
  405754:	68a9      	ldr	r1, [r5, #8]
  405756:	420a      	tst	r2, r1
  405758:	d00a      	beq.n	405770 <etharp_output+0x78>
  40575a:	b29b      	uxth	r3, r3
  40575c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  405760:	4293      	cmp	r3, r2
  405762:	d005      	beq.n	405770 <etharp_output+0x78>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
  405764:	f115 040c 	adds.w	r4, r5, #12
  405768:	d03f      	beq.n	4057ea <etharp_output+0xf2>
  40576a:	68eb      	ldr	r3, [r5, #12]
  40576c:	2b00      	cmp	r3, #0
  40576e:	d03f      	beq.n	4057f0 <etharp_output+0xf8>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  405770:	4b23      	ldr	r3, [pc, #140]	; (405800 <etharp_output+0x108>)
  405772:	781a      	ldrb	r2, [r3, #0]
  405774:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  405778:	4b22      	ldr	r3, [pc, #136]	; (405804 <etharp_output+0x10c>)
  40577a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40577e:	7c9b      	ldrb	r3, [r3, #18]
  405780:	2b01      	cmp	r3, #1
  405782:	d90c      	bls.n	40579e <etharp_output+0xa6>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  405784:	460b      	mov	r3, r1
  405786:	491f      	ldr	r1, [pc, #124]	; (405804 <etharp_output+0x10c>)
  405788:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40578c:	6821      	ldr	r1, [r4, #0]
  40578e:	685b      	ldr	r3, [r3, #4]
  405790:	4299      	cmp	r1, r3
  405792:	d104      	bne.n	40579e <etharp_output+0xa6>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  405794:	4631      	mov	r1, r6
  405796:	4628      	mov	r0, r5
  405798:	4b1b      	ldr	r3, [pc, #108]	; (405808 <etharp_output+0x110>)
  40579a:	4798      	blx	r3
  40579c:	e02a      	b.n	4057f4 <etharp_output+0xfc>
  40579e:	4b19      	ldr	r3, [pc, #100]	; (405804 <etharp_output+0x10c>)
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  4057a0:	2200      	movs	r2, #0
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  4057a2:	7c99      	ldrb	r1, [r3, #18]
  4057a4:	2901      	cmp	r1, #1
  4057a6:	d90b      	bls.n	4057c0 <etharp_output+0xc8>
  4057a8:	6820      	ldr	r0, [r4, #0]
  4057aa:	6859      	ldr	r1, [r3, #4]
  4057ac:	4288      	cmp	r0, r1
  4057ae:	d107      	bne.n	4057c0 <etharp_output+0xc8>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  4057b0:	b2d2      	uxtb	r2, r2
  4057b2:	4b13      	ldr	r3, [pc, #76]	; (405800 <etharp_output+0x108>)
  4057b4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  4057b6:	4631      	mov	r1, r6
  4057b8:	4628      	mov	r0, r5
  4057ba:	4b13      	ldr	r3, [pc, #76]	; (405808 <etharp_output+0x110>)
  4057bc:	4798      	blx	r3
  4057be:	e019      	b.n	4057f4 <etharp_output+0xfc>
  4057c0:	3201      	adds	r2, #1
  4057c2:	3314      	adds	r3, #20
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  4057c4:	2a0a      	cmp	r2, #10
  4057c6:	d1ec      	bne.n	4057a2 <etharp_output+0xaa>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  4057c8:	4632      	mov	r2, r6
  4057ca:	4621      	mov	r1, r4
  4057cc:	4628      	mov	r0, r5
  4057ce:	4b0f      	ldr	r3, [pc, #60]	; (40580c <etharp_output+0x114>)
  4057d0:	4798      	blx	r3
  4057d2:	e00f      	b.n	4057f4 <etharp_output+0xfc>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  4057d4:	4b0e      	ldr	r3, [pc, #56]	; (405810 <etharp_output+0x118>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  4057d6:	f105 0227 	add.w	r2, r5, #39	; 0x27
  4057da:	4631      	mov	r1, r6
  4057dc:	4628      	mov	r0, r5
  4057de:	4c0d      	ldr	r4, [pc, #52]	; (405814 <etharp_output+0x11c>)
  4057e0:	47a0      	blx	r4
  4057e2:	e007      	b.n	4057f4 <etharp_output+0xfc>
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  4057e4:	f06f 0001 	mvn.w	r0, #1
  4057e8:	e004      	b.n	4057f4 <etharp_output+0xfc>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
  4057ea:	f06f 0003 	mvn.w	r0, #3
  4057ee:	e001      	b.n	4057f4 <etharp_output+0xfc>
  4057f0:	f06f 0003 	mvn.w	r0, #3

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
  4057f4:	b002      	add	sp, #8
  4057f6:	bd70      	pop	{r4, r5, r6, pc}
  4057f8:	004022fd 	.word	0x004022fd
  4057fc:	004015fd 	.word	0x004015fd
  405800:	20002408 	.word	0x20002408
  405804:	2000240c 	.word	0x2000240c
  405808:	00405531 	.word	0x00405531
  40580c:	0040559d 	.word	0x0040559d
  405810:	00409594 	.word	0x00409594
  405814:	00405421 	.word	0x00405421

00405818 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  405818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40581c:	b085      	sub	sp, #20
  40581e:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  405820:	8947      	ldrh	r7, [r0, #10]
  405822:	2f0e      	cmp	r7, #14
  405824:	f240 80e6 	bls.w	4059f4 <ethernet_input+0x1dc>
  405828:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  40582a:	6845      	ldr	r5, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  40582c:	f8b5 800c 	ldrh.w	r8, [r5, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  405830:	782b      	ldrb	r3, [r5, #0]
  405832:	f013 0f01 	tst.w	r3, #1
  405836:	d015      	beq.n	405864 <ethernet_input+0x4c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  405838:	2b01      	cmp	r3, #1
  40583a:	d109      	bne.n	405850 <ethernet_input+0x38>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40583c:	786b      	ldrb	r3, [r5, #1]
  40583e:	b98b      	cbnz	r3, 405864 <ethernet_input+0x4c>
  405840:	78ab      	ldrb	r3, [r5, #2]
  405842:	2b5e      	cmp	r3, #94	; 0x5e
  405844:	d10e      	bne.n	405864 <ethernet_input+0x4c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  405846:	7b43      	ldrb	r3, [r0, #13]
  405848:	f043 0310 	orr.w	r3, r3, #16
  40584c:	7343      	strb	r3, [r0, #13]
  40584e:	e009      	b.n	405864 <ethernet_input+0x4c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  405850:	2206      	movs	r2, #6
  405852:	4970      	ldr	r1, [pc, #448]	; (405a14 <ethernet_input+0x1fc>)
  405854:	4628      	mov	r0, r5
  405856:	4b70      	ldr	r3, [pc, #448]	; (405a18 <ethernet_input+0x200>)
  405858:	4798      	blx	r3
  40585a:	b918      	cbnz	r0, 405864 <ethernet_input+0x4c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  40585c:	7b63      	ldrb	r3, [r4, #13]
  40585e:	f043 0308 	orr.w	r3, r3, #8
  405862:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  405864:	f1b8 0f08 	cmp.w	r8, #8
  405868:	d003      	beq.n	405872 <ethernet_input+0x5a>
  40586a:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
  40586e:	d013      	beq.n	405898 <ethernet_input+0x80>
  405870:	e0c0      	b.n	4059f4 <ethernet_input+0x1dc>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405872:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  405876:	f013 0f20 	tst.w	r3, #32
  40587a:	f000 80bb 	beq.w	4059f4 <ethernet_input+0x1dc>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
  40587e:	f06f 010d 	mvn.w	r1, #13
  405882:	4620      	mov	r0, r4
  405884:	4b65      	ldr	r3, [pc, #404]	; (405a1c <ethernet_input+0x204>)
  405886:	4798      	blx	r3
  405888:	2800      	cmp	r0, #0
  40588a:	f040 80b3 	bne.w	4059f4 <ethernet_input+0x1dc>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
  40588e:	4631      	mov	r1, r6
  405890:	4620      	mov	r0, r4
  405892:	4b63      	ldr	r3, [pc, #396]	; (405a20 <ethernet_input+0x208>)
  405894:	4798      	blx	r3
      }
      break;
  405896:	e0b9      	b.n	405a0c <ethernet_input+0x1f4>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405898:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  40589c:	f013 0f20 	tst.w	r3, #32
  4058a0:	f000 80a8 	beq.w	4059f4 <ethernet_input+0x1dc>
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  4058a4:	b906      	cbnz	r6, 4058a8 <ethernet_input+0x90>
  4058a6:	e7fe      	b.n	4058a6 <ethernet_input+0x8e>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
  4058a8:	2f29      	cmp	r7, #41	; 0x29
  4058aa:	d803      	bhi.n	4058b4 <ethernet_input+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  4058ac:	4620      	mov	r0, r4
  4058ae:	4b5d      	ldr	r3, [pc, #372]	; (405a24 <ethernet_input+0x20c>)
  4058b0:	4798      	blx	r3
  4058b2:	e0ab      	b.n	405a0c <ethernet_input+0x1f4>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  4058b4:	89eb      	ldrh	r3, [r5, #14]
  4058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4058ba:	d108      	bne.n	4058ce <ethernet_input+0xb6>
  4058bc:	7cab      	ldrb	r3, [r5, #18]
  4058be:	2b06      	cmp	r3, #6
  4058c0:	d105      	bne.n	4058ce <ethernet_input+0xb6>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  4058c2:	7ceb      	ldrb	r3, [r5, #19]
  4058c4:	2b04      	cmp	r3, #4
  4058c6:	d102      	bne.n	4058ce <ethernet_input+0xb6>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  4058c8:	8a2b      	ldrh	r3, [r5, #16]
  4058ca:	2b08      	cmp	r3, #8
  4058cc:	d003      	beq.n	4058d6 <ethernet_input+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  4058ce:	4620      	mov	r0, r4
  4058d0:	4b54      	ldr	r3, [pc, #336]	; (405a24 <ethernet_input+0x20c>)
  4058d2:	4798      	blx	r3
  4058d4:	e09a      	b.n	405a0c <ethernet_input+0x1f4>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  4058d6:	46a9      	mov	r9, r5
  4058d8:	f859 0f1c 	ldr.w	r0, [r9, #28]!
  4058dc:	9002      	str	r0, [sp, #8]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  4058de:	f8d5 0026 	ldr.w	r0, [r5, #38]	; 0x26
  4058e2:	9003      	str	r0, [sp, #12]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
  4058e4:	1d33      	adds	r3, r6, #4
  4058e6:	9301      	str	r3, [sp, #4]
  4058e8:	f000 8088 	beq.w	4059fc <ethernet_input+0x1e4>
  4058ec:	6873      	ldr	r3, [r6, #4]
  4058ee:	2b00      	cmp	r3, #0
  4058f0:	f000 8084 	beq.w	4059fc <ethernet_input+0x1e4>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  4058f4:	9a03      	ldr	r2, [sp, #12]
  4058f6:	4293      	cmp	r3, r2
  4058f8:	bf14      	ite	ne
  4058fa:	f04f 0b00 	movne.w	fp, #0
  4058fe:	f04f 0b01 	moveq.w	fp, #1
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  405902:	f105 0116 	add.w	r1, r5, #22
  405906:	9100      	str	r1, [sp, #0]
  405908:	4293      	cmp	r3, r2
  40590a:	bf0c      	ite	eq
  40590c:	f04f 0a01 	moveq.w	sl, #1
  405910:	f04f 0a02 	movne.w	sl, #2
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  405914:	f106 0827 	add.w	r8, r6, #39	; 0x27
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  405918:	9802      	ldr	r0, [sp, #8]
  40591a:	2800      	cmp	r0, #0
  40591c:	d03a      	beq.n	405994 <ethernet_input+0x17c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  40591e:	4631      	mov	r1, r6
  405920:	4b41      	ldr	r3, [pc, #260]	; (405a28 <ethernet_input+0x210>)
  405922:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  405924:	2800      	cmp	r0, #0
  405926:	d135      	bne.n	405994 <ethernet_input+0x17c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  405928:	9b02      	ldr	r3, [sp, #8]
  40592a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40592e:	2be0      	cmp	r3, #224	; 0xe0
  405930:	d030      	beq.n	405994 <ethernet_input+0x17c>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
  405932:	4651      	mov	r1, sl
  405934:	a802      	add	r0, sp, #8
  405936:	4b3d      	ldr	r3, [pc, #244]	; (405a2c <ethernet_input+0x214>)
  405938:	4798      	blx	r3
  /* bail out if no entry could be found */
  if (i < 0) {
  40593a:	1e03      	subs	r3, r0, #0
  40593c:	db2a      	blt.n	405994 <ethernet_input+0x17c>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  40593e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 405a38 <ethernet_input+0x220>
  405942:	009a      	lsls	r2, r3, #2
  405944:	18d1      	adds	r1, r2, r3
  405946:	0089      	lsls	r1, r1, #2
  405948:	eb0e 0c01 	add.w	ip, lr, r1
  40594c:	2002      	movs	r0, #2
  40594e:	f88c 0012 	strb.w	r0, [ip, #18]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  405952:	f8cc 6008 	str.w	r6, [ip, #8]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  405956:	441a      	add	r2, r3
  405958:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
  40595c:	9f00      	ldr	r7, [sp, #0]
  40595e:	6838      	ldr	r0, [r7, #0]
  405960:	60d0      	str	r0, [r2, #12]
  405962:	88b8      	ldrh	r0, [r7, #4]
  405964:	8210      	strh	r0, [r2, #16]
  /* reset time stamp */
  arp_table[i].ctime = 0;
  405966:	2200      	movs	r2, #0
  405968:	f88c 2013 	strb.w	r2, [ip, #19]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
  40596c:	f85e a001 	ldr.w	sl, [lr, r1]
  405970:	f1ba 0f00 	cmp.w	sl, #0
  405974:	d00e      	beq.n	405994 <ethernet_input+0x17c>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
  405976:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40597a:	009b      	lsls	r3, r3, #2
  40597c:	4611      	mov	r1, r2
  40597e:	f84e 1003 	str.w	r1, [lr, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  405982:	463b      	mov	r3, r7
  405984:	4642      	mov	r2, r8
  405986:	4651      	mov	r1, sl
  405988:	4630      	mov	r0, r6
  40598a:	4f29      	ldr	r7, [pc, #164]	; (405a30 <ethernet_input+0x218>)
  40598c:	47b8      	blx	r7
    /* free the queued IP packet */
    pbuf_free(p);
  40598e:	4650      	mov	r0, sl
  405990:	4b24      	ldr	r3, [pc, #144]	; (405a24 <ethernet_input+0x20c>)
  405992:	4798      	blx	r3
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  405994:	8aab      	ldrh	r3, [r5, #20]
  405996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40599a:	d127      	bne.n	4059ec <ethernet_input+0x1d4>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  40599c:	f1bb 0f00 	cmp.w	fp, #0
  4059a0:	d024      	beq.n	4059ec <ethernet_input+0x1d4>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
  4059a2:	2002      	movs	r0, #2
  4059a4:	4b23      	ldr	r3, [pc, #140]	; (405a34 <ethernet_input+0x21c>)
  4059a6:	4798      	blx	r3
  4059a8:	82a8      	strh	r0, [r5, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  4059aa:	f8d9 3000 	ldr.w	r3, [r9]
  4059ae:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  4059b2:	9b01      	ldr	r3, [sp, #4]
  4059b4:	681b      	ldr	r3, [r3, #0]
  4059b6:	61eb      	str	r3, [r5, #28]
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  4059b8:	9900      	ldr	r1, [sp, #0]
  4059ba:	680b      	ldr	r3, [r1, #0]
  4059bc:	622b      	str	r3, [r5, #32]
  4059be:	888b      	ldrh	r3, [r1, #4]
  4059c0:	84ab      	strh	r3, [r5, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  4059c2:	680b      	ldr	r3, [r1, #0]
  4059c4:	602b      	str	r3, [r5, #0]
  4059c6:	888b      	ldrh	r3, [r1, #4]
  4059c8:	80ab      	strh	r3, [r5, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  4059ca:	f8d8 3000 	ldr.w	r3, [r8]
  4059ce:	600b      	str	r3, [r1, #0]
  4059d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  4059d4:	808b      	strh	r3, [r1, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  4059d6:	f8d8 3000 	ldr.w	r3, [r8]
  4059da:	f8c5 3006 	str.w	r3, [r5, #6]
  4059de:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  4059e2:	816b      	strh	r3, [r5, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
  4059e4:	69b3      	ldr	r3, [r6, #24]
  4059e6:	4621      	mov	r1, r4
  4059e8:	4630      	mov	r0, r6
  4059ea:	4798      	blx	r3
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
  4059ec:	4620      	mov	r0, r4
  4059ee:	4b0d      	ldr	r3, [pc, #52]	; (405a24 <ethernet_input+0x20c>)
  4059f0:	4798      	blx	r3
  4059f2:	e00b      	b.n	405a0c <ethernet_input+0x1f4>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  4059f4:	4620      	mov	r0, r4
  4059f6:	4b0b      	ldr	r3, [pc, #44]	; (405a24 <ethernet_input+0x20c>)
  4059f8:	4798      	blx	r3
  4059fa:	e007      	b.n	405a0c <ethernet_input+0x1f4>
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  4059fc:	f105 0316 	add.w	r3, r5, #22
  405a00:	9300      	str	r3, [sp, #0]
  405a02:	f04f 0b00 	mov.w	fp, #0
  405a06:	f04f 0a02 	mov.w	sl, #2
  405a0a:	e783      	b.n	405914 <ethernet_input+0xfc>
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  return ERR_OK;
}
  405a0c:	2000      	movs	r0, #0
  405a0e:	b005      	add	sp, #20
  405a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a14:	00409594 	.word	0x00409594
  405a18:	00406391 	.word	0x00406391
  405a1c:	004022fd 	.word	0x004022fd
  405a20:	00401319 	.word	0x00401319
  405a24:	00402375 	.word	0x00402375
  405a28:	004015fd 	.word	0x004015fd
  405a2c:	00405325 	.word	0x00405325
  405a30:	00405421 	.word	0x00405421
  405a34:	00400f05 	.word	0x00400f05
  405a38:	2000240c 	.word	0x2000240c

00405a3c <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  405a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a40:	4607      	mov	r7, r0
  405a42:	f100 042c 	add.w	r4, r0, #44	; 0x2c
  405a46:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405a48:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405a4a:	f04f 0b03 	mov.w	fp, #3
  405a4e:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  405a52:	f8df 9038 	ldr.w	r9, [pc, #56]	; 405a8c <gmac_rx_populate_queue+0x50>
  405a56:	3404      	adds	r4, #4
  405a58:	46a0      	mov	r8, r4
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  405a5a:	6823      	ldr	r3, [r4, #0]
  405a5c:	b983      	cbnz	r3, 405a80 <gmac_rx_populate_queue+0x44>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405a5e:	465a      	mov	r2, fp
  405a60:	4651      	mov	r1, sl
  405a62:	4658      	mov	r0, fp
  405a64:	47c8      	blx	r9
			if (p == NULL) {
  405a66:	b178      	cbz	r0, 405a88 <gmac_rx_populate_queue+0x4c>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  405a68:	2d02      	cmp	r5, #2
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  405a6a:	6842      	ldr	r2, [r0, #4]
  405a6c:	bf06      	itte	eq
  405a6e:	f042 0202 	orreq.w	r2, r2, #2
  405a72:	613a      	streq	r2, [r7, #16]
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  405a74:	f847 2035 	strne.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  405a78:	2200      	movs	r2, #0
  405a7a:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  405a7c:	f8c8 0000 	str.w	r0, [r8]
{
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405a80:	3501      	adds	r5, #1
  405a82:	3608      	adds	r6, #8
  405a84:	2d03      	cmp	r5, #3
  405a86:	d1e6      	bne.n	405a56 <gmac_rx_populate_queue+0x1a>
  405a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a8c:	004023d5 	.word	0x004023d5

00405a90 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  405a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  405a94:	6a07      	ldr	r7, [r0, #32]
 *
 * \return  Transmit status.
 */
static inline uint32_t gmac_get_tx_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_TSR;
  405a96:	4b1c      	ldr	r3, [pc, #112]	; (405b08 <gmac_low_level_output+0x78>)
  405a98:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  405a9a:	f241 230c 	movw	r3, #4620	; 0x120c
  405a9e:	58fb      	ldr	r3, [r7, r3]
  405aa0:	3303      	adds	r3, #3
  405aa2:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  405aa6:	4688      	mov	r8, r1
  405aa8:	b151      	cbz	r1, 405ac0 <gmac_low_level_output+0x30>
  405aaa:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  405aac:	4e17      	ldr	r6, [pc, #92]	; (405b0c <gmac_low_level_output+0x7c>)
  405aae:	8962      	ldrh	r2, [r4, #10]
  405ab0:	6861      	ldr	r1, [r4, #4]
  405ab2:	4628      	mov	r0, r5
  405ab4:	47b0      	blx	r6
		buffer += q->len;
  405ab6:	8963      	ldrh	r3, [r4, #10]
  405ab8:	441d      	add	r5, r3
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  405aba:	6824      	ldr	r4, [r4, #0]
  405abc:	2c00      	cmp	r4, #0
  405abe:	d1f6      	bne.n	405aae <gmac_low_level_output+0x1e>
		memcpy(buffer, q->payload, q->len);
		buffer += q->len;
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  405ac0:	f241 210c 	movw	r1, #4620	; 0x120c
  405ac4:	587a      	ldr	r2, [r7, r1]
  405ac6:	1cd3      	adds	r3, r2, #3
  405ac8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  405acc:	8898      	ldrh	r0, [r3, #4]
  405ace:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  405ad2:	f364 000d 	bfi	r0, r4, #0, #14
  405ad6:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  405ad8:	79d8      	ldrb	r0, [r3, #7]
  405ada:	f36f 10c7 	bfc	r0, #7, #1
  405ade:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  405ae0:	3201      	adds	r2, #1
  405ae2:	4b0b      	ldr	r3, [pc, #44]	; (405b10 <gmac_low_level_output+0x80>)
  405ae4:	fba3 0302 	umull	r0, r3, r3, r2
  405ae8:	085b      	lsrs	r3, r3, #1
  405aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405aee:	1ad3      	subs	r3, r2, r3
  405af0:	507b      	str	r3, [r7, r1]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405af2:	f3bf 8f4f 	dsb	sy
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_start_transmission(Gmac* p_gmac)
{
	__DSB();
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  405af6:	4a04      	ldr	r2, [pc, #16]	; (405b08 <gmac_low_level_output+0x78>)
  405af8:	6813      	ldr	r3, [r2, #0]
  405afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  405afe:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  405b00:	2000      	movs	r0, #0
  405b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b06:	bf00      	nop
  405b08:	40034000 	.word	0x40034000
  405b0c:	004063f5 	.word	0x004063f5
  405b10:	aaaaaaab 	.word	0xaaaaaaab

00405b14 <GMAC_Handler>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405b18:	4b01      	ldr	r3, [pc, #4]	; (405b20 <GMAC_Handler+0xc>)
  405b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405b1e:	4770      	bx	lr
  405b20:	e000e100 	.word	0xe000e100

00405b24 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  405b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \return a pbuf filled with the received packet (including MAC header).
 * 0 on memory error.
 */
static struct pbuf *gmac_low_level_input(struct netif *netif)
{
	struct gmac_device *ps_gmac_dev = netif->state;
  405b28:	6a04      	ldr	r4, [r0, #32]
	struct pbuf *p = 0;
	uint32_t length = 0;
	uint32_t ul_index = 0;
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  405b2a:	f241 2308 	movw	r3, #4616	; 0x1208
  405b2e:	f854 8003 	ldr.w	r8, [r4, r3]
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline uint32_t gmac_get_rx_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_RSR;
  405b32:	4b24      	ldr	r3, [pc, #144]	; (405bc4 <ethernetif_input+0xa0>)
  405b34:	6a1b      	ldr	r3, [r3, #32]
  405b36:	eb04 02c8 	add.w	r2, r4, r8, lsl #3

		gmac_enable_receive(GMAC, true);
	}

	/* Check that a packet has been received and processed by GMAC. */
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  405b3a:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  405b3e:	f013 0f01 	tst.w	r3, #1
  405b42:	d03c      	beq.n	405bbe <ethernetif_input+0x9a>
  405b44:	4606      	mov	r6, r0
		/* Packet is a SOF since packet size is set to maximum. */
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;

		/* Fetch pre-allocated pbuf. */
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  405b46:	f108 030c 	add.w	r3, r8, #12
  405b4a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		p->len = length;
  405b4e:	6853      	ldr	r3, [r2, #4]
  405b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
  405b54:	816b      	strh	r3, [r5, #10]

		/* Remove this pbuf from its desriptor. */
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  405b56:	f241 2708 	movw	r7, #4616	; 0x1208
  405b5a:	59e2      	ldr	r2, [r4, r7]
  405b5c:	320c      	adds	r2, #12
  405b5e:	2100      	movs	r1, #0
  405b60:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		LWIP_DEBUGF(NETIF_DEBUG,
				("gmac_low_level_input: DMA buffer %p received, size=%u [idx=%u]\n",
				p, length, ps_gmac_dev->us_rx_idx));

		/* Set pbuf total packet size. */
		p->tot_len = length;
  405b64:	812b      	strh	r3, [r5, #8]
		LINK_STATS_INC(link.recv);

		/* Fill empty descriptors with new pbufs. */
		gmac_rx_populate_queue(ps_gmac_dev);
  405b66:	4620      	mov	r0, r4
  405b68:	4b17      	ldr	r3, [pc, #92]	; (405bc8 <ethernetif_input+0xa4>)
  405b6a:	4798      	blx	r3

		/* Mark the descriptor ready for transfer. */
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  405b6c:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  405b70:	f023 0301 	bic.w	r3, r3, #1
  405b74:	f844 3038 	str.w	r3, [r4, r8, lsl #3]

		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  405b78:	59e2      	ldr	r2, [r4, r7]
  405b7a:	3201      	adds	r2, #1
  405b7c:	4b13      	ldr	r3, [pc, #76]	; (405bcc <ethernetif_input+0xa8>)
  405b7e:	fba3 1302 	umull	r1, r3, r3, r2
  405b82:	085b      	lsrs	r3, r3, #1
  405b84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405b88:	1ad3      	subs	r3, r2, r3
  405b8a:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  405b8c:	b1bd      	cbz	r5, 405bbe <ethernetif_input+0x9a>
	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;
    //printf("Coming from 0x%02x:%02x:%02x:%02x:%02x:%02x\n\r", ethhdr->src.addr[0], ethhdr->src.addr[1], ethhdr->src.addr[2], ethhdr->src.addr[3], ethhdr->src.addr[4], ethhdr->src.addr[5]);
    //printf("Going to 0x%02x:%02x:%02x:%02x:%02x:%02x\n\r", ethhdr->dest.addr[0], ethhdr->dest.addr[1], ethhdr->dest.addr[2], ethhdr->dest.addr[3], ethhdr->dest.addr[4], ethhdr->dest.addr[5]);

	switch (htons(ethhdr->type)) {
  405b8e:	686b      	ldr	r3, [r5, #4]
  405b90:	8998      	ldrh	r0, [r3, #12]
  405b92:	4b0f      	ldr	r3, [pc, #60]	; (405bd0 <ethernetif_input+0xac>)
  405b94:	4798      	blx	r3
  405b96:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  405b9a:	d003      	beq.n	405ba4 <ethernetif_input+0x80>
  405b9c:	f640 0306 	movw	r3, #2054	; 0x806
  405ba0:	4298      	cmp	r0, r3
  405ba2:	d109      	bne.n	405bb8 <ethernetif_input+0x94>
#if PPPOE_SUPPORT
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* Send packet to lwIP for processing. */
			if (netif->input(p, netif) != ERR_OK) {
  405ba4:	6933      	ldr	r3, [r6, #16]
  405ba6:	4631      	mov	r1, r6
  405ba8:	4628      	mov	r0, r5
  405baa:	4798      	blx	r3
  405bac:	b138      	cbz	r0, 405bbe <ethernetif_input+0x9a>
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
  405bae:	4628      	mov	r0, r5
  405bb0:	4b08      	ldr	r3, [pc, #32]	; (405bd4 <ethernetif_input+0xb0>)
  405bb2:	4798      	blx	r3
  405bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  405bb8:	4628      	mov	r0, r5
  405bba:	4b06      	ldr	r3, [pc, #24]	; (405bd4 <ethernetif_input+0xb0>)
  405bbc:	4798      	blx	r3
  405bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bc2:	bf00      	nop
  405bc4:	40034000 	.word	0x40034000
  405bc8:	00405a3d 	.word	0x00405a3d
  405bcc:	aaaaaaab 	.word	0xaaaaaaab
  405bd0:	00400f05 	.word	0x00400f05
  405bd4:	00402375 	.word	0x00402375

00405bd8 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  405bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  405bda:	b083      	sub	sp, #12
  405bdc:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  405bde:	4b5e      	ldr	r3, [pc, #376]	; (405d58 <ethernetif_init+0x180>)
  405be0:	f241 2210 	movw	r2, #4624	; 0x1210
  405be4:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  405be6:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  405be8:	2365      	movs	r3, #101	; 0x65
  405bea:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  405bee:	236e      	movs	r3, #110	; 0x6e
  405bf0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  405bf4:	4b59      	ldr	r3, [pc, #356]	; (405d5c <ethernetif_init+0x184>)
  405bf6:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  405bf8:	4b59      	ldr	r3, [pc, #356]	; (405d60 <ethernetif_init+0x188>)
  405bfa:	6183      	str	r3, [r0, #24]
static void gmac_low_level_init(struct netif *netif)
{
	volatile uint32_t ul_delay;

	/* Set MAC hardware address length. */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  405bfc:	2306      	movs	r3, #6
  405bfe:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	/* Set MAC hardware address. */
	netif->hwaddr[0] = gs_uc_mac_address[0];
  405c02:	2300      	movs	r3, #0
  405c04:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  405c08:	2304      	movs	r3, #4
  405c0a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  405c0e:	2325      	movs	r3, #37	; 0x25
  405c10:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  405c14:	231c      	movs	r3, #28
  405c16:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  405c1a:	23a0      	movs	r3, #160	; 0xa0
  405c1c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  405c20:	2302      	movs	r3, #2
  405c22:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

	/* Set maximum transfer unit. */
	netif->mtu = NET_MTU;
  405c26:	f240 53dc 	movw	r3, #1500	; 0x5dc
  405c2a:	8483      	strh	r3, [r0, #36]	; 0x24

	/* Device capabilities. */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  405c2c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  405c30:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  405c34:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			| NETIF_FLAG_DHCP
#endif
	;

	/* Wait for PHY to be ready (CAT811: Max400ms). */
	ul_delay = sysclk_get_cpu_hz() / 6;
  405c38:	4b4a      	ldr	r3, [pc, #296]	; (405d64 <ethernetif_init+0x18c>)
  405c3a:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  405c3c:	9b01      	ldr	r3, [sp, #4]
  405c3e:	1e5a      	subs	r2, r3, #1
  405c40:	9201      	str	r2, [sp, #4]
  405c42:	2b00      	cmp	r3, #0
  405c44:	d1fa      	bne.n	405c3c <ethernetif_init+0x64>
	}

	/* Enable GMAC clock. */
	pmc_enable_periph_clk(ID_GMAC);
  405c46:	202c      	movs	r0, #44	; 0x2c
  405c48:	4b47      	ldr	r3, [pc, #284]	; (405d68 <ethernetif_init+0x190>)
  405c4a:	4798      	blx	r3
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_ncr   Network control value.
 */
static inline void gmac_network_control(Gmac* p_gmac, uint32_t ul_ncr)
{
	p_gmac->GMAC_NCR = ul_ncr;
  405c4c:	4d47      	ldr	r5, [pc, #284]	; (405d6c <ethernetif_init+0x194>)
  405c4e:	2700      	movs	r7, #0
  405c50:	602f      	str	r7, [r5, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be disabled.
 */
static inline void gmac_disable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
	p_gmac->GMAC_IDR = ul_source;
  405c52:	f04f 33ff 	mov.w	r3, #4294967295
  405c56:	62eb      	str	r3, [r5, #44]	; 0x2c
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_clear_statistics(Gmac* p_gmac)
{
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  405c58:	682b      	ldr	r3, [r5, #0]
  405c5a:	f043 0320 	orr.w	r3, r3, #32
  405c5e:	602b      	str	r3, [r5, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Receive status.
 */
static inline void gmac_clear_rx_status(Gmac* p_gmac, uint32_t ul_status)
{
	p_gmac->GMAC_RSR = ul_status;
  405c60:	230f      	movs	r3, #15
  405c62:	622b      	str	r3, [r5, #32]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void gmac_clear_tx_status(Gmac* p_gmac, uint32_t ul_status)
{
	p_gmac->GMAC_TSR = ul_status;
  405c64:	f240 137f 	movw	r3, #383	; 0x17f
  405c68:	616b      	str	r3, [r5, #20]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_interrupt_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_ISR;
  405c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
static inline void gmac_enable_copy_all(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  405c6c:	686b      	ldr	r3, [r5, #4]
  405c6e:	f023 0310 	bic.w	r3, r3, #16
  405c72:	606b      	str	r3, [r5, #4]
static inline void gmac_disable_broadcast(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  405c74:	686b      	ldr	r3, [r5, #4]
  405c76:	f023 0320 	bic.w	r3, r3, #32
  405c7a:	606b      	str	r3, [r5, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  405c7c:	692b      	ldr	r3, [r5, #16]
			| GMAC_DCFGR_DRBS(ul_code);
  405c7e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
  405c82:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  405c86:	612b      	str	r3, [r5, #16]
static void gmac_rx_init(struct gmac_device *ps_gmac_dev)
{
	uint32_t ul_index = 0;

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;
  405c88:	4c33      	ldr	r4, [pc, #204]	; (405d58 <ethernetif_init+0x180>)
  405c8a:	f241 2308 	movw	r3, #4616	; 0x1208
  405c8e:	50e7      	str	r7, [r4, r3]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  405c90:	6327      	str	r7, [r4, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  405c92:	6027      	str	r7, [r4, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  405c94:	6067      	str	r7, [r4, #4]
	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  405c96:	6367      	str	r7, [r4, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  405c98:	60a7      	str	r7, [r4, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  405c9a:	60e7      	str	r7, [r4, #12]
	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  405c9c:	63a7      	str	r7, [r4, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  405c9e:	6167      	str	r7, [r4, #20]
	}
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  405ca0:	2302      	movs	r3, #2
  405ca2:	6123      	str	r3, [r4, #16]

	/* Build RX buffer and descriptors. */
	gmac_rx_populate_queue(ps_gmac_dev);
  405ca4:	4620      	mov	r0, r4
  405ca6:	4b32      	ldr	r3, [pc, #200]	; (405d70 <ethernetif_init+0x198>)
  405ca8:	4798      	blx	r3
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx queue address.
 */
static inline void gmac_set_rx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  405caa:	f024 0303 	bic.w	r3, r4, #3
  405cae:	61ab      	str	r3, [r5, #24]
static void gmac_tx_init(struct gmac_device *ps_gmac_dev)
{
	uint32_t ul_index;

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;
  405cb0:	f241 230c 	movw	r3, #4620	; 0x120c
  405cb4:	50e7      	str	r7, [r4, r3]

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  405cb6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
  405cba:	61a3      	str	r3, [r4, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  405cbc:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  405cc0:	61e3      	str	r3, [r4, #28]
	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  405cc2:	f204 622a 	addw	r2, r4, #1578	; 0x62a
  405cc6:	6222      	str	r2, [r4, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  405cc8:	6263      	str	r3, [r4, #36]	; 0x24
	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  405cca:	f604 4318 	addw	r3, r4, #3096	; 0xc18
  405cce:	62a3      	str	r3, [r4, #40]	; 0x28
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
	}
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  405cd0:	4b28      	ldr	r3, [pc, #160]	; (405d74 <ethernetif_init+0x19c>)
  405cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr  Tx queue address.
 */
static inline void gmac_set_tx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  405cd4:	3418      	adds	r4, #24
  405cd6:	f024 0403 	bic.w	r4, r4, #3
  405cda:	61ec      	str	r4, [r5, #28]
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  405cdc:	682b      	ldr	r3, [r5, #0]
  405cde:	f043 0308 	orr.w	r3, r3, #8
  405ce2:	602b      	str	r3, [r5, #0]
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  405ce4:	682b      	ldr	r3, [r5, #0]
  405ce6:	f043 0304 	orr.w	r3, r3, #4
  405cea:	602b      	str	r3, [r5, #0]
 */
static inline void gmac_enable_statistics_write(Gmac* p_gmac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  405cec:	682b      	ldr	r3, [r5, #0]
  405cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405cf2:	602b      	str	r3, [r5, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be enabled.
 */
static inline void gmac_enable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
	p_gmac->GMAC_IER = ul_source;
  405cf4:	62af      	str	r7, [r5, #40]	; 0x28
 * \param p_mac_addr  GMAC address.
 */
static inline void gmac_set_address(Gmac* p_gmac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  405cf6:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
  405cfa:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
  405cfe:	0413      	lsls	r3, r2, #16
  405d00:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  405d04:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
  405d08:	4313      	orrs	r3, r2
  405d0a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  405d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405d12:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  405d16:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
  405d1a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  405d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405d22:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  405d26:	4b14      	ldr	r3, [pc, #80]	; (405d78 <ethernetif_init+0x1a0>)
  405d28:	f883 732c 	strb.w	r7, [r3, #812]	; 0x32c
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405d30:	605a      	str	r2, [r3, #4]
	/* Enable NVIC GMAC interrupt. */
	NVIC_SetPriority(GMAC_IRQn, INT_PRIORITY_GMAC);
	NVIC_EnableIRQ(GMAC_IRQn);

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  405d32:	4a12      	ldr	r2, [pc, #72]	; (405d7c <ethernetif_init+0x1a4>)
  405d34:	4639      	mov	r1, r7
  405d36:	4628      	mov	r0, r5
  405d38:	4b11      	ldr	r3, [pc, #68]	; (405d80 <ethernetif_init+0x1a8>)
  405d3a:	4798      	blx	r3
  405d3c:	b948      	cbnz	r0, 405d52 <ethernetif_init+0x17a>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  405d3e:	4639      	mov	r1, r7
  405d40:	4628      	mov	r0, r5
  405d42:	4b10      	ldr	r3, [pc, #64]	; (405d84 <ethernetif_init+0x1ac>)
  405d44:	4798      	blx	r3
  405d46:	b920      	cbnz	r0, 405d52 <ethernetif_init+0x17a>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  405d48:	2201      	movs	r2, #1
  405d4a:	4639      	mov	r1, r7
  405d4c:	4628      	mov	r0, r5
  405d4e:	4b0e      	ldr	r3, [pc, #56]	; (405d88 <ethernetif_init+0x1b0>)
  405d50:	4798      	blx	r3
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  405d52:	2000      	movs	r0, #0
  405d54:	b003      	add	sp, #12
  405d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d58:	200024d8 	.word	0x200024d8
  405d5c:	004056f9 	.word	0x004056f9
  405d60:	00405a91 	.word	0x00405a91
  405d64:	01312d00 	.word	0x01312d00
  405d68:	00400acd 	.word	0x00400acd
  405d6c:	40034000 	.word	0x40034000
  405d70:	00405a3d 	.word	0x00405a3d
  405d74:	c0008000 	.word	0xc0008000
  405d78:	e000e100 	.word	0xe000e100
  405d7c:	07270e00 	.word	0x07270e00
  405d80:	00400819 	.word	0x00400819
  405d84:	0040062d 	.word	0x0040062d
  405d88:	00400539 	.word	0x00400539

00405d8c <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  405d8c:	b500      	push	{lr}
  405d8e:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  405d90:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  405d94:	f013 0f01 	tst.w	r3, #1
  405d98:	d00d      	beq.n	405db6 <status_callback+0x2a>
		strcpy((char*)c_mess, "IP=");
  405d9a:	4b0a      	ldr	r3, [pc, #40]	; (405dc4 <status_callback+0x38>)
  405d9c:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  405d9e:	3004      	adds	r0, #4
  405da0:	4b09      	ldr	r3, [pc, #36]	; (405dc8 <status_callback+0x3c>)
  405da2:	4798      	blx	r3
  405da4:	4601      	mov	r1, r0
  405da6:	a801      	add	r0, sp, #4
  405da8:	4b08      	ldr	r3, [pc, #32]	; (405dcc <status_callback+0x40>)
  405daa:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  405dac:	a901      	add	r1, sp, #4
  405dae:	4808      	ldr	r0, [pc, #32]	; (405dd0 <status_callback+0x44>)
  405db0:	4b08      	ldr	r3, [pc, #32]	; (405dd4 <status_callback+0x48>)
  405db2:	4798      	blx	r3
  405db4:	e002      	b.n	405dbc <status_callback+0x30>
	} else {
		printf("Network down\r\n");
  405db6:	4808      	ldr	r0, [pc, #32]	; (405dd8 <status_callback+0x4c>)
  405db8:	4b06      	ldr	r3, [pc, #24]	; (405dd4 <status_callback+0x48>)
  405dba:	4798      	blx	r3
	}
}
  405dbc:	b007      	add	sp, #28
  405dbe:	f85d fb04 	ldr.w	pc, [sp], #4
  405dc2:	bf00      	nop
  405dc4:	003d5049 	.word	0x003d5049
  405dc8:	004016fd 	.word	0x004016fd
  405dcc:	0040679d 	.word	0x0040679d
  405dd0:	004095a4 	.word	0x004095a4
  405dd4:	00406369 	.word	0x00406369
  405dd8:	004095b4 	.word	0x004095b4

00405ddc <init_ethernet>:

/**
 * \brief Initialize the lwIP TCP/IP stack with the network interface driver.
 */
void init_ethernet(void)
{
  405ddc:	b530      	push	{r4, r5, lr}
  405dde:	b089      	sub	sp, #36	; 0x24
	/* Initialize lwIP. */
	lwip_init();
  405de0:	4b13      	ldr	r3, [pc, #76]	; (405e30 <init_ethernet+0x54>)
  405de2:	4798      	blx	r3
	x_ip_addr.addr = 0;
	x_net_mask.addr = 0;
#else
	/* Fixed IP mode. */
	/* Default ip addr */
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
  405de4:	4b13      	ldr	r3, [pc, #76]	; (405e34 <init_ethernet+0x58>)
  405de6:	9305      	str	r3, [sp, #20]
			ETHERNET_CONF_IPADDR2, ETHERNET_CONF_IPADDR3);

	/* Default subnet mask */
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
  405de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405dec:	9306      	str	r3, [sp, #24]
			ETHERNET_CONF_NET_MASK2, ETHERNET_CONF_NET_MASK3);

	/* Default gateway addr */
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
  405dee:	ab08      	add	r3, sp, #32
  405df0:	4a11      	ldr	r2, [pc, #68]	; (405e38 <init_ethernet+0x5c>)
  405df2:	f843 2d04 	str.w	r2, [r3, #-4]!
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  405df6:	4c11      	ldr	r4, [pc, #68]	; (405e3c <init_ethernet+0x60>)
  405df8:	4a11      	ldr	r2, [pc, #68]	; (405e40 <init_ethernet+0x64>)
  405dfa:	9202      	str	r2, [sp, #8]
  405dfc:	4a11      	ldr	r2, [pc, #68]	; (405e44 <init_ethernet+0x68>)
  405dfe:	9201      	str	r2, [sp, #4]
  405e00:	2200      	movs	r2, #0
  405e02:	9200      	str	r2, [sp, #0]
  405e04:	aa06      	add	r2, sp, #24
  405e06:	a905      	add	r1, sp, #20
  405e08:	4620      	mov	r0, r4
  405e0a:	4d0f      	ldr	r5, [pc, #60]	; (405e48 <init_ethernet+0x6c>)
  405e0c:	47a8      	blx	r5
			ethernetif_init, ethernet_input)) {
		LWIP_ASSERT("NULL == netif_add", 0);
	}

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
  405e0e:	4620      	mov	r0, r4
  405e10:	4b0e      	ldr	r3, [pc, #56]	; (405e4c <init_ethernet+0x70>)
  405e12:	4798      	blx	r3

	/* Setup callback function for netif status change */
	netif_set_status_callback(&gs_net_if, status_callback);
  405e14:	490e      	ldr	r1, [pc, #56]	; (405e50 <init_ethernet+0x74>)
  405e16:	4620      	mov	r0, r4
  405e18:	4b0e      	ldr	r3, [pc, #56]	; (405e54 <init_ethernet+0x78>)
  405e1a:	4798      	blx	r3
		LWIP_ASSERT("ERR_OK != dhcp_start", 0);
	}
	printf("DHCP Started\r\n");
#else
	/* Static mode. */
	netif_set_up(&gs_net_if);
  405e1c:	4620      	mov	r0, r4
  405e1e:	4b0e      	ldr	r3, [pc, #56]	; (405e58 <init_ethernet+0x7c>)
  405e20:	4798      	blx	r3
	printf("Static IP Address Assigned\r\n");
  405e22:	480e      	ldr	r0, [pc, #56]	; (405e5c <init_ethernet+0x80>)
  405e24:	4b0e      	ldr	r3, [pc, #56]	; (405e60 <init_ethernet+0x84>)
  405e26:	4798      	blx	r3

	/* Set hw and IP parameters, initialize MAC too. */
	ethernet_configure_interface();

	/* Initialize timer. */
	sys_init_timing();
  405e28:	4b0e      	ldr	r3, [pc, #56]	; (405e64 <init_ethernet+0x88>)
  405e2a:	4798      	blx	r3
}
  405e2c:	b009      	add	sp, #36	; 0x24
  405e2e:	bd30      	pop	{r4, r5, pc}
  405e30:	00401d09 	.word	0x00401d09
  405e34:	6400fea9 	.word	0x6400fea9
  405e38:	0100fea9 	.word	0x0100fea9
  405e3c:	20004788 	.word	0x20004788
  405e40:	00405819 	.word	0x00405819
  405e44:	00405bd9 	.word	0x00405bd9
  405e48:	00402261 	.word	0x00402261
  405e4c:	004022b1 	.word	0x004022b1
  405e50:	00405d8d 	.word	0x00405d8d
  405e54:	004022f5 	.word	0x004022f5
  405e58:	004022bd 	.word	0x004022bd
  405e5c:	004095c4 	.word	0x004095c4
  405e60:	00406369 	.word	0x00406369
  405e64:	00405ef5 	.word	0x00405ef5

00405e68 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  405e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  405e6a:	4816      	ldr	r0, [pc, #88]	; (405ec4 <ethernet_task+0x5c>)
  405e6c:	4b16      	ldr	r3, [pc, #88]	; (405ec8 <ethernet_task+0x60>)
  405e6e:	4798      	blx	r3
{
	static uint32_t ul_last_time;
	uint32_t ul_cur_time, ul_time_diff, ul_idx_timer;
	timers_info_t *p_tmr_inf;

	ul_cur_time = sys_get_ms();
  405e70:	4b16      	ldr	r3, [pc, #88]	; (405ecc <ethernet_task+0x64>)
  405e72:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  405e74:	4b16      	ldr	r3, [pc, #88]	; (405ed0 <ethernet_task+0x68>)
  405e76:	681d      	ldr	r5, [r3, #0]
  405e78:	42a8      	cmp	r0, r5
		ul_time_diff = ul_cur_time - ul_last_time;
  405e7a:	eba0 0505 	sub.w	r5, r0, r5
	} else {
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  405e7e:	bf38      	it	cc
  405e80:	f105 35ff 	addcc.w	r5, r5, #4294967295
	}

	if (ul_time_diff) {
  405e84:	b1e5      	cbz	r5, 405ec0 <ethernet_task+0x58>
		ul_last_time = ul_cur_time;
  405e86:	4b12      	ldr	r3, [pc, #72]	; (405ed0 <ethernet_task+0x68>)
  405e88:	6018      	str	r0, [r3, #0]
  405e8a:	4e12      	ldr	r6, [pc, #72]	; (405ed4 <ethernet_task+0x6c>)
  405e8c:	f106 0408 	add.w	r4, r6, #8
  405e90:	362c      	adds	r6, #44	; 0x2c
  405e92:	4627      	mov	r7, r4
		for (ul_idx_timer = 0;
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
			p_tmr_inf = &gs_timers_table[ul_idx_timer];
			p_tmr_inf->timer += ul_time_diff;
  405e94:	f854 3c08 	ldr.w	r3, [r4, #-8]
  405e98:	442b      	add	r3, r5
  405e9a:	f844 3c08 	str.w	r3, [r4, #-8]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  405e9e:	f854 2c04 	ldr.w	r2, [r4, #-4]
  405ea2:	4293      	cmp	r3, r2
  405ea4:	d909      	bls.n	405eba <ethernet_task+0x52>
				if (p_tmr_inf->timer_func) {
  405ea6:	6823      	ldr	r3, [r4, #0]
  405ea8:	b103      	cbz	r3, 405eac <ethernet_task+0x44>
					p_tmr_inf->timer_func();
  405eaa:	4798      	blx	r3
				}

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  405eac:	f857 3c08 	ldr.w	r3, [r7, #-8]
  405eb0:	f857 2c04 	ldr.w	r2, [r7, #-4]
  405eb4:	1a9b      	subs	r3, r3, r2
  405eb6:	f847 3c08 	str.w	r3, [r7, #-8]
  405eba:	340c      	adds	r4, #12
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
	}

	if (ul_time_diff) {
		ul_last_time = ul_cur_time;
		for (ul_idx_timer = 0;
  405ebc:	42b4      	cmp	r4, r6
  405ebe:	d1e8      	bne.n	405e92 <ethernet_task+0x2a>
  405ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ec2:	bf00      	nop
  405ec4:	20004788 	.word	0x20004788
  405ec8:	00405b25 	.word	0x00405b25
  405ecc:	00405f89 	.word	0x00405f89
  405ed0:	200036ec 	.word	0x200036ec
  405ed4:	20000010 	.word	0x20000010

00405ed8 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  405ed8:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  405eda:	4b04      	ldr	r3, [pc, #16]	; (405eec <TC0_Handler+0x14>)
  405edc:	6a1b      	ldr	r3, [r3, #32]
  405ede:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  405ee0:	4a03      	ldr	r2, [pc, #12]	; (405ef0 <TC0_Handler+0x18>)
  405ee2:	6813      	ldr	r3, [r2, #0]
  405ee4:	3301      	adds	r3, #1
  405ee6:	6013      	str	r3, [r2, #0]
}
  405ee8:	b002      	add	sp, #8
  405eea:	4770      	bx	lr
  405eec:	40090000 	.word	0x40090000
  405ef0:	200036f0 	.word	0x200036f0

00405ef4 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  405ef4:	b570      	push	{r4, r5, r6, lr}
  405ef6:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  405ef8:	2500      	movs	r5, #0
  405efa:	4b18      	ldr	r3, [pc, #96]	; (405f5c <sys_init_timing+0x68>)
  405efc:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  405efe:	2015      	movs	r0, #21
  405f00:	4b17      	ldr	r3, [pc, #92]	; (405f60 <sys_init_timing+0x6c>)
  405f02:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  405f04:	4c17      	ldr	r4, [pc, #92]	; (405f64 <sys_init_timing+0x70>)
  405f06:	9400      	str	r4, [sp, #0]
  405f08:	ab02      	add	r3, sp, #8
  405f0a:	aa03      	add	r2, sp, #12
  405f0c:	4621      	mov	r1, r4
  405f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405f12:	4e15      	ldr	r6, [pc, #84]	; (405f68 <sys_init_timing+0x74>)
  405f14:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  405f16:	4e15      	ldr	r6, [pc, #84]	; (405f6c <sys_init_timing+0x78>)
  405f18:	9a02      	ldr	r2, [sp, #8]
  405f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  405f1e:	4629      	mov	r1, r5
  405f20:	4630      	mov	r0, r6
  405f22:	4b13      	ldr	r3, [pc, #76]	; (405f70 <sys_init_timing+0x7c>)
  405f24:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  405f26:	9a03      	ldr	r2, [sp, #12]
  405f28:	fbb4 f4f2 	udiv	r4, r4, r2
  405f2c:	4a11      	ldr	r2, [pc, #68]	; (405f74 <sys_init_timing+0x80>)
  405f2e:	fba2 3204 	umull	r3, r2, r2, r4
  405f32:	0992      	lsrs	r2, r2, #6
  405f34:	4629      	mov	r1, r5
  405f36:	4630      	mov	r0, r6
  405f38:	4b0f      	ldr	r3, [pc, #60]	; (405f78 <sys_init_timing+0x84>)
  405f3a:	4798      	blx	r3
  405f3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405f40:	4b0e      	ldr	r3, [pc, #56]	; (405f7c <sys_init_timing+0x88>)
  405f42:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  405f44:	2210      	movs	r2, #16
  405f46:	4629      	mov	r1, r5
  405f48:	4630      	mov	r0, r6
  405f4a:	4b0d      	ldr	r3, [pc, #52]	; (405f80 <sys_init_timing+0x8c>)
  405f4c:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  405f4e:	4629      	mov	r1, r5
  405f50:	4630      	mov	r0, r6
  405f52:	4b0c      	ldr	r3, [pc, #48]	; (405f84 <sys_init_timing+0x90>)
  405f54:	4798      	blx	r3
}
  405f56:	b004      	add	sp, #16
  405f58:	bd70      	pop	{r4, r5, r6, pc}
  405f5a:	bf00      	nop
  405f5c:	200036f0 	.word	0x200036f0
  405f60:	00400acd 	.word	0x00400acd
  405f64:	0e4e1c00 	.word	0x0e4e1c00
  405f68:	00400b55 	.word	0x00400b55
  405f6c:	40090000 	.word	0x40090000
  405f70:	00400b21 	.word	0x00400b21
  405f74:	10624dd3 	.word	0x10624dd3
  405f78:	00400b45 	.word	0x00400b45
  405f7c:	e000e100 	.word	0xe000e100
  405f80:	00400b4d 	.word	0x00400b4d
  405f84:	00400b3d 	.word	0x00400b3d

00405f88 <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  405f88:	4b01      	ldr	r3, [pc, #4]	; (405f90 <sys_get_ms+0x8>)
  405f8a:	6818      	ldr	r0, [r3, #0]
}
  405f8c:	4770      	bx	lr
  405f8e:	bf00      	nop
  405f90:	200036f0 	.word	0x200036f0

00405f94 <sys_now>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  405f94:	4b01      	ldr	r3, [pc, #4]	; (405f9c <sys_now+0x8>)
  405f96:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  405f98:	4770      	bx	lr
  405f9a:	bf00      	nop
  405f9c:	200036f0 	.word	0x200036f0

00405fa0 <udp_receiver>:
    pbuf_free(pb);
}

static void udp_receiver(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port) {
    LWIP_UNUSED_ARG(arg);
    if(p == NULL) {
  405fa0:	b1da      	cbz	r2, 405fda <udp_receiver+0x3a>
    }
    
    pbuf_free(pb);
}

static void udp_receiver(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port) {
  405fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405fa4:	b083      	sub	sp, #12
  405fa6:	4614      	mov	r4, r2
  405fa8:	461d      	mov	r5, r3
  405faa:	460e      	mov	r6, r1
    LWIP_UNUSED_ARG(arg);
    if(p == NULL) {
        return;
    }
    printf("Sending back to %d.%d.%d.%d on port 11999\n\r", ((addr->addr >> 0) & 0xff), ((addr->addr >> 8) & 0xff), ((addr->addr >> 16) & 0xff), ((addr->addr >> 24) & 0xff));
  405fac:	6819      	ldr	r1, [r3, #0]
  405fae:	0e0b      	lsrs	r3, r1, #24
  405fb0:	9300      	str	r3, [sp, #0]
  405fb2:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405fb6:	f3c1 2207 	ubfx	r2, r1, #8, #8
  405fba:	b2c9      	uxtb	r1, r1
  405fbc:	4807      	ldr	r0, [pc, #28]	; (405fdc <udp_receiver+0x3c>)
  405fbe:	4f08      	ldr	r7, [pc, #32]	; (405fe0 <udp_receiver+0x40>)
  405fc0:	47b8      	blx	r7
    udp_sendto(pcb, p, addr, 11999);
  405fc2:	f642 63df 	movw	r3, #11999	; 0x2edf
  405fc6:	462a      	mov	r2, r5
  405fc8:	4621      	mov	r1, r4
  405fca:	4630      	mov	r0, r6
  405fcc:	4d05      	ldr	r5, [pc, #20]	; (405fe4 <udp_receiver+0x44>)
  405fce:	47a8      	blx	r5
    pbuf_free(p);
  405fd0:	4620      	mov	r0, r4
  405fd2:	4b05      	ldr	r3, [pc, #20]	; (405fe8 <udp_receiver+0x48>)
  405fd4:	4798      	blx	r3
}
  405fd6:	b003      	add	sp, #12
  405fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fda:	4770      	bx	lr
  405fdc:	00409648 	.word	0x00409648
  405fe0:	00406369 	.word	0x00406369
  405fe4:	00405219 	.word	0x00405219
  405fe8:	00402375 	.word	0x00402375

00405fec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405fec:	b5f0      	push	{r4, r5, r6, r7, lr}
  405fee:	b083      	sub	sp, #12
  405ff0:	4605      	mov	r5, r0
  405ff2:	460c      	mov	r4, r1
	uint32_t val = 0;
  405ff4:	2300      	movs	r3, #0
  405ff6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405ff8:	4b18      	ldr	r3, [pc, #96]	; (40605c <usart_serial_getchar+0x70>)
  405ffa:	4298      	cmp	r0, r3
  405ffc:	d107      	bne.n	40600e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  405ffe:	461f      	mov	r7, r3
  406000:	4e17      	ldr	r6, [pc, #92]	; (406060 <usart_serial_getchar+0x74>)
  406002:	4621      	mov	r1, r4
  406004:	4638      	mov	r0, r7
  406006:	47b0      	blx	r6
  406008:	2800      	cmp	r0, #0
  40600a:	d1fa      	bne.n	406002 <usart_serial_getchar+0x16>
  40600c:	e017      	b.n	40603e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40600e:	4b15      	ldr	r3, [pc, #84]	; (406064 <usart_serial_getchar+0x78>)
  406010:	4298      	cmp	r0, r3
  406012:	d107      	bne.n	406024 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  406014:	461e      	mov	r6, r3
  406016:	4d12      	ldr	r5, [pc, #72]	; (406060 <usart_serial_getchar+0x74>)
  406018:	4621      	mov	r1, r4
  40601a:	4630      	mov	r0, r6
  40601c:	47a8      	blx	r5
  40601e:	2800      	cmp	r0, #0
  406020:	d1fa      	bne.n	406018 <usart_serial_getchar+0x2c>
  406022:	e018      	b.n	406056 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406024:	4b10      	ldr	r3, [pc, #64]	; (406068 <usart_serial_getchar+0x7c>)
  406026:	4298      	cmp	r0, r3
  406028:	d109      	bne.n	40603e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40602a:	461e      	mov	r6, r3
  40602c:	4d0f      	ldr	r5, [pc, #60]	; (40606c <usart_serial_getchar+0x80>)
  40602e:	a901      	add	r1, sp, #4
  406030:	4630      	mov	r0, r6
  406032:	47a8      	blx	r5
  406034:	2800      	cmp	r0, #0
  406036:	d1fa      	bne.n	40602e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  406038:	9b01      	ldr	r3, [sp, #4]
  40603a:	7023      	strb	r3, [r4, #0]
  40603c:	e00b      	b.n	406056 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40603e:	4b0c      	ldr	r3, [pc, #48]	; (406070 <usart_serial_getchar+0x84>)
  406040:	429d      	cmp	r5, r3
  406042:	d108      	bne.n	406056 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  406044:	461e      	mov	r6, r3
  406046:	4d09      	ldr	r5, [pc, #36]	; (40606c <usart_serial_getchar+0x80>)
  406048:	a901      	add	r1, sp, #4
  40604a:	4630      	mov	r0, r6
  40604c:	47a8      	blx	r5
  40604e:	2800      	cmp	r0, #0
  406050:	d1fa      	bne.n	406048 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  406052:	9b01      	ldr	r3, [sp, #4]
  406054:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406056:	b003      	add	sp, #12
  406058:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40605a:	bf00      	nop
  40605c:	400e0600 	.word	0x400e0600
  406060:	00400c11 	.word	0x00400c11
  406064:	40060600 	.word	0x40060600
  406068:	400a0000 	.word	0x400a0000
  40606c:	00400c39 	.word	0x00400c39
  406070:	400a4000 	.word	0x400a4000

00406074 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  406074:	b570      	push	{r4, r5, r6, lr}
  406076:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406078:	4b18      	ldr	r3, [pc, #96]	; (4060dc <usart_serial_putchar+0x68>)
  40607a:	4298      	cmp	r0, r3
  40607c:	d108      	bne.n	406090 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  40607e:	461e      	mov	r6, r3
  406080:	4d17      	ldr	r5, [pc, #92]	; (4060e0 <usart_serial_putchar+0x6c>)
  406082:	4621      	mov	r1, r4
  406084:	4630      	mov	r0, r6
  406086:	47a8      	blx	r5
  406088:	2800      	cmp	r0, #0
  40608a:	d1fa      	bne.n	406082 <usart_serial_putchar+0xe>
		return 1;
  40608c:	2001      	movs	r0, #1
  40608e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406090:	4b14      	ldr	r3, [pc, #80]	; (4060e4 <usart_serial_putchar+0x70>)
  406092:	4298      	cmp	r0, r3
  406094:	d108      	bne.n	4060a8 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  406096:	461e      	mov	r6, r3
  406098:	4d11      	ldr	r5, [pc, #68]	; (4060e0 <usart_serial_putchar+0x6c>)
  40609a:	4621      	mov	r1, r4
  40609c:	4630      	mov	r0, r6
  40609e:	47a8      	blx	r5
  4060a0:	2800      	cmp	r0, #0
  4060a2:	d1fa      	bne.n	40609a <usart_serial_putchar+0x26>
		return 1;
  4060a4:	2001      	movs	r0, #1
  4060a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4060a8:	4b0f      	ldr	r3, [pc, #60]	; (4060e8 <usart_serial_putchar+0x74>)
  4060aa:	4298      	cmp	r0, r3
  4060ac:	d108      	bne.n	4060c0 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4060ae:	461e      	mov	r6, r3
  4060b0:	4d0e      	ldr	r5, [pc, #56]	; (4060ec <usart_serial_putchar+0x78>)
  4060b2:	4621      	mov	r1, r4
  4060b4:	4630      	mov	r0, r6
  4060b6:	47a8      	blx	r5
  4060b8:	2800      	cmp	r0, #0
  4060ba:	d1fa      	bne.n	4060b2 <usart_serial_putchar+0x3e>
		return 1;
  4060bc:	2001      	movs	r0, #1
  4060be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4060c0:	4b0b      	ldr	r3, [pc, #44]	; (4060f0 <usart_serial_putchar+0x7c>)
  4060c2:	4298      	cmp	r0, r3
  4060c4:	d108      	bne.n	4060d8 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4060c6:	461e      	mov	r6, r3
  4060c8:	4d08      	ldr	r5, [pc, #32]	; (4060ec <usart_serial_putchar+0x78>)
  4060ca:	4621      	mov	r1, r4
  4060cc:	4630      	mov	r0, r6
  4060ce:	47a8      	blx	r5
  4060d0:	2800      	cmp	r0, #0
  4060d2:	d1fa      	bne.n	4060ca <usart_serial_putchar+0x56>
		return 1;
  4060d4:	2001      	movs	r0, #1
  4060d6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4060d8:	2000      	movs	r0, #0
}
  4060da:	bd70      	pop	{r4, r5, r6, pc}
  4060dc:	400e0600 	.word	0x400e0600
  4060e0:	00400c01 	.word	0x00400c01
  4060e4:	40060600 	.word	0x40060600
  4060e8:	400a0000 	.word	0x400a0000
  4060ec:	00400c25 	.word	0x00400c25
  4060f0:	400a4000 	.word	0x400a4000

004060f4 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  4060f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060f8:	b0a1      	sub	sp, #132	; 0x84
	/* Initialize the SAM system. */
	sysclk_init();
  4060fa:	4b5e      	ldr	r3, [pc, #376]	; (406274 <main+0x180>)
  4060fc:	4798      	blx	r3
	board_init();
  4060fe:	4b5e      	ldr	r3, [pc, #376]	; (406278 <main+0x184>)
  406100:	4798      	blx	r3
  406102:	2007      	movs	r0, #7
  406104:	4d5d      	ldr	r5, [pc, #372]	; (40627c <main+0x188>)
  406106:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406108:	4c5d      	ldr	r4, [pc, #372]	; (406280 <main+0x18c>)
  40610a:	4b5e      	ldr	r3, [pc, #376]	; (406284 <main+0x190>)
  40610c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40610e:	4a5e      	ldr	r2, [pc, #376]	; (406288 <main+0x194>)
  406110:	4b5e      	ldr	r3, [pc, #376]	; (40628c <main+0x198>)
  406112:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406114:	4a5e      	ldr	r2, [pc, #376]	; (406290 <main+0x19c>)
  406116:	4b5f      	ldr	r3, [pc, #380]	; (406294 <main+0x1a0>)
  406118:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40611a:	4b5f      	ldr	r3, [pc, #380]	; (406298 <main+0x1a4>)
  40611c:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
  40611e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406122:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
  406124:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406128:	9305      	str	r3, [sp, #20]
  40612a:	2007      	movs	r0, #7
  40612c:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40612e:	a903      	add	r1, sp, #12
  406130:	4620      	mov	r0, r4
  406132:	4b5a      	ldr	r3, [pc, #360]	; (40629c <main+0x1a8>)
  406134:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406136:	4d5a      	ldr	r5, [pc, #360]	; (4062a0 <main+0x1ac>)
  406138:	682b      	ldr	r3, [r5, #0]
  40613a:	2100      	movs	r1, #0
  40613c:	6898      	ldr	r0, [r3, #8]
  40613e:	4c59      	ldr	r4, [pc, #356]	; (4062a4 <main+0x1b0>)
  406140:	47a0      	blx	r4
	setbuf(stdin, NULL);
  406142:	682b      	ldr	r3, [r5, #0]
  406144:	2100      	movs	r1, #0
  406146:	6858      	ldr	r0, [r3, #4]
  406148:	47a0      	blx	r4

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  40614a:	682b      	ldr	r3, [r5, #0]
  40614c:	2100      	movs	r1, #0
  40614e:	6898      	ldr	r0, [r3, #8]
  406150:	47a0      	blx	r4

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  406152:	4855      	ldr	r0, [pc, #340]	; (4062a8 <main+0x1b4>)
  406154:	4b55      	ldr	r3, [pc, #340]	; (4062ac <main+0x1b8>)
  406156:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  406158:	4b55      	ldr	r3, [pc, #340]	; (4062b0 <main+0x1bc>)
  40615a:	4798      	blx	r3

    struct ip_addr remote_ip;
    struct udp_pcb *pcb;
    err_t err;
    char msg[100] = OSC_HEADER;
  40615c:	ac06      	add	r4, sp, #24
  40615e:	4d55      	ldr	r5, [pc, #340]	; (4062b4 <main+0x1c0>)
  406160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  406162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406164:	682b      	ldr	r3, [r5, #0]
  406166:	6023      	str	r3, [r4, #0]
  406168:	2250      	movs	r2, #80	; 0x50
  40616a:	2100      	movs	r1, #0
  40616c:	a80b      	add	r0, sp, #44	; 0x2c
  40616e:	4b52      	ldr	r3, [pc, #328]	; (4062b8 <main+0x1c4>)
  406170:	4798      	blx	r3
    struct pbuf *pb;
    
    IP4_ADDR(&remote_ip, 169, 254, 14, 49);
  406172:	ac20      	add	r4, sp, #128	; 0x80
  406174:	4b51      	ldr	r3, [pc, #324]	; (4062bc <main+0x1c8>)
  406176:	f844 3d04 	str.w	r3, [r4, #-4]!
    

    pcb = udp_new();
  40617a:	4b51      	ldr	r3, [pc, #324]	; (4062c0 <main+0x1cc>)
  40617c:	4798      	blx	r3
  40617e:	4681      	mov	r9, r0
        //printf("Failed to bind to port 11998\n\r");
    //}
    //else {
        //printf("UDP bound to port 11998\n\r");
    //}
    if((err = udp_connect(pcb, &remote_ip, 11999)) != ERR_OK) {
  406180:	f642 62df 	movw	r2, #11999	; 0x2edf
  406184:	4621      	mov	r1, r4
  406186:	4b4f      	ldr	r3, [pc, #316]	; (4062c4 <main+0x1d0>)
  406188:	4798      	blx	r3
  40618a:	b118      	cbz	r0, 406194 <main+0xa0>
        printf("Failed to connect to port 11999\n\r");
  40618c:	484e      	ldr	r0, [pc, #312]	; (4062c8 <main+0x1d4>)
  40618e:	4b4f      	ldr	r3, [pc, #316]	; (4062cc <main+0x1d8>)
  406190:	4798      	blx	r3
  406192:	e002      	b.n	40619a <main+0xa6>
    }
    else {
        printf("UDP connected to port 11999\n\r");
  406194:	484e      	ldr	r0, [pc, #312]	; (4062d0 <main+0x1dc>)
  406196:	4b4d      	ldr	r3, [pc, #308]	; (4062cc <main+0x1d8>)
  406198:	4798      	blx	r3
        //printf("Failed to bind to port 6667\n\r");
    //}
    //else {
        //printf("UDP bound to port 6667\n\r");
    //}
    udp_recv(pcb, udp_receiver, pcb);
  40619a:	464a      	mov	r2, r9
  40619c:	494d      	ldr	r1, [pc, #308]	; (4062d4 <main+0x1e0>)
  40619e:	4648      	mov	r0, r9
  4061a0:	4b4d      	ldr	r3, [pc, #308]	; (4062d8 <main+0x1e4>)
  4061a2:	4798      	blx	r3
	//httpd_init();

	/* Program main loop. */
	while (1) {
    	/* Check for input packet and process it. */
    	ethernet_task();
  4061a4:	f8df a168 	ldr.w	sl, [pc, #360]	; 406310 <main+0x21c>
    	
        ////////////////////////////////////////////////
        static uint32_t i1 = 0x11111000;
        static uint32_t i2 = 0x88888000;
        for(uint8_t i = 0; i < 4; i++) {
            msg[OSC_HEADER_LEN + i] = (uint8_t)((i1 >> ((3-i)*8)) & 0xff);
  4061a8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 406314 <main+0x220>
        i2++;
        
    	pb = pbuf_alloc(PBUF_TRANSPORT, 100, PBUF_POOL);
    	memcpy(pb->payload, msg, 100);
    	
    	printf("Sending to %d.%d.%d.%d on port 11999: ", (remote_ip.addr & 0xff), ((remote_ip.addr >> 8) & 0xff), ((remote_ip.addr >> 16) & 0xff), ((remote_ip.addr >> 24) & 0xff));
  4061ac:	4d47      	ldr	r5, [pc, #284]	; (4062cc <main+0x1d8>)
    	for(uint8_t i = 0; i < sizeof(msg); i++) {
        	printf("%c", msg[i]);
  4061ae:	4f4b      	ldr	r7, [pc, #300]	; (4062dc <main+0x1e8>)
	//httpd_init();

	/* Program main loop. */
	while (1) {
    	/* Check for input packet and process it. */
    	ethernet_task();
  4061b0:	47d0      	blx	sl
    	
        ////////////////////////////////////////////////
        static uint32_t i1 = 0x11111000;
        static uint32_t i2 = 0x88888000;
        for(uint8_t i = 0; i < 4; i++) {
            msg[OSC_HEADER_LEN + i] = (uint8_t)((i1 >> ((3-i)*8)) & 0xff);
  4061b2:	f8d8 2000 	ldr.w	r2, [r8]
  4061b6:	0e13      	lsrs	r3, r2, #24
  4061b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  4061bc:	0c13      	lsrs	r3, r2, #16
  4061be:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  4061c2:	0a13      	lsrs	r3, r2, #8
  4061c4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  4061c8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
        }
        for(uint8_t i = 0; i < 4; i++) {
            msg[OSC_HEADER_LEN + 4 + i] = (uint8_t)((i2 >> ((3-i)*8)) & 0xff);
  4061cc:	4944      	ldr	r1, [pc, #272]	; (4062e0 <main+0x1ec>)
  4061ce:	680b      	ldr	r3, [r1, #0]
  4061d0:	0e18      	lsrs	r0, r3, #24
  4061d2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
  4061d6:	0c18      	lsrs	r0, r3, #16
  4061d8:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
  4061dc:	0a18      	lsrs	r0, r3, #8
  4061de:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
  4061e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        }
        msg[OSC_HEADER_LEN + 8] = 'Q';
  4061e6:	2051      	movs	r0, #81	; 0x51
  4061e8:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
        i1++;
  4061ec:	3201      	adds	r2, #1
  4061ee:	f8c8 2000 	str.w	r2, [r8]
        i2++;
  4061f2:	3301      	adds	r3, #1
  4061f4:	600b      	str	r3, [r1, #0]
        
    	pb = pbuf_alloc(PBUF_TRANSPORT, 100, PBUF_POOL);
  4061f6:	2203      	movs	r2, #3
  4061f8:	2164      	movs	r1, #100	; 0x64
  4061fa:	2000      	movs	r0, #0
  4061fc:	4b39      	ldr	r3, [pc, #228]	; (4062e4 <main+0x1f0>)
  4061fe:	4798      	blx	r3
  406200:	4683      	mov	fp, r0
    	memcpy(pb->payload, msg, 100);
  406202:	2264      	movs	r2, #100	; 0x64
  406204:	a906      	add	r1, sp, #24
  406206:	6840      	ldr	r0, [r0, #4]
  406208:	4b37      	ldr	r3, [pc, #220]	; (4062e8 <main+0x1f4>)
  40620a:	4798      	blx	r3
    	
    	printf("Sending to %d.%d.%d.%d on port 11999: ", (remote_ip.addr & 0xff), ((remote_ip.addr >> 8) & 0xff), ((remote_ip.addr >> 16) & 0xff), ((remote_ip.addr >> 24) & 0xff));
  40620c:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40620e:	0e0b      	lsrs	r3, r1, #24
  406210:	9300      	str	r3, [sp, #0]
  406212:	f3c1 4307 	ubfx	r3, r1, #16, #8
  406216:	f3c1 2207 	ubfx	r2, r1, #8, #8
  40621a:	b2c9      	uxtb	r1, r1
  40621c:	4833      	ldr	r0, [pc, #204]	; (4062ec <main+0x1f8>)
  40621e:	47a8      	blx	r5
  406220:	f10d 0417 	add.w	r4, sp, #23
  406224:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
    	for(uint8_t i = 0; i < sizeof(msg); i++) {
        	printf("%c", msg[i]);
  406228:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  40622c:	4638      	mov	r0, r7
  40622e:	47a8      	blx	r5
        
    	pb = pbuf_alloc(PBUF_TRANSPORT, 100, PBUF_POOL);
    	memcpy(pb->payload, msg, 100);
    	
    	printf("Sending to %d.%d.%d.%d on port 11999: ", (remote_ip.addr & 0xff), ((remote_ip.addr >> 8) & 0xff), ((remote_ip.addr >> 16) & 0xff), ((remote_ip.addr >> 24) & 0xff));
    	for(uint8_t i = 0; i < sizeof(msg); i++) {
  406230:	42b4      	cmp	r4, r6
  406232:	d1f9      	bne.n	406228 <main+0x134>
        	printf("%c", msg[i]);
    	}
    	printf("\n\r");
  406234:	482e      	ldr	r0, [pc, #184]	; (4062f0 <main+0x1fc>)
  406236:	47a8      	blx	r5
    	
    	err = udp_send(pcb, pb);
  406238:	4659      	mov	r1, fp
  40623a:	4648      	mov	r0, r9
  40623c:	4b2d      	ldr	r3, [pc, #180]	; (4062f4 <main+0x200>)
  40623e:	4798      	blx	r3
        
    	if(err == ERR_MEM) {
  406240:	f1b0 3fff 	cmp.w	r0, #4294967295
  406244:	d102      	bne.n	40624c <main+0x158>
        	printf("ERROR: out of memory\n\r");
  406246:	482c      	ldr	r0, [pc, #176]	; (4062f8 <main+0x204>)
  406248:	47a8      	blx	r5
  40624a:	e00c      	b.n	406266 <main+0x172>
    	}
    	else if(err == ERR_RTE) {
  40624c:	f110 0f04 	cmn.w	r0, #4
  406250:	d102      	bne.n	406258 <main+0x164>
        	printf("ERROR: route not found\n\r");
  406252:	482a      	ldr	r0, [pc, #168]	; (4062fc <main+0x208>)
  406254:	47a8      	blx	r5
  406256:	e006      	b.n	406266 <main+0x172>
    	}
    	else if(err != ERR_OK) {
  406258:	b118      	cbz	r0, 406262 <main+0x16e>
        	printf("ERROR: %d\n\r", err);
  40625a:	4601      	mov	r1, r0
  40625c:	4828      	ldr	r0, [pc, #160]	; (406300 <main+0x20c>)
  40625e:	47a8      	blx	r5
  406260:	e001      	b.n	406266 <main+0x172>
    	}
    	else {
        	printf("Packet sent!\n\r");
  406262:	4828      	ldr	r0, [pc, #160]	; (406304 <main+0x210>)
  406264:	47a8      	blx	r5
    	}
    	
    	pbuf_free(pb);
  406266:	4658      	mov	r0, fp
  406268:	4b27      	ldr	r3, [pc, #156]	; (406308 <main+0x214>)
  40626a:	4798      	blx	r3
  40626c:	4b27      	ldr	r3, [pc, #156]	; (40630c <main+0x218>)
        
    	uint32_t i = 10000000;
    	while(i > 0) {
  40626e:	3b01      	subs	r3, #1
  406270:	d1fd      	bne.n	40626e <main+0x17a>
  406272:	e79d      	b.n	4061b0 <main+0xbc>
  406274:	00400449 	.word	0x00400449
  406278:	00400155 	.word	0x00400155
  40627c:	00400acd 	.word	0x00400acd
  406280:	400e0600 	.word	0x400e0600
  406284:	20003730 	.word	0x20003730
  406288:	00406075 	.word	0x00406075
  40628c:	2000372c 	.word	0x2000372c
  406290:	00405fed 	.word	0x00405fed
  406294:	20003728 	.word	0x20003728
  406298:	07270e00 	.word	0x07270e00
  40629c:	00400bc9 	.word	0x00400bc9
  4062a0:	20000468 	.word	0x20000468
  4062a4:	0040663d 	.word	0x0040663d
  4062a8:	00409674 	.word	0x00409674
  4062ac:	0040662d 	.word	0x0040662d
  4062b0:	00405ddd 	.word	0x00405ddd
  4062b4:	004095e4 	.word	0x004095e4
  4062b8:	00406529 	.word	0x00406529
  4062bc:	310efea9 	.word	0x310efea9
  4062c0:	004052c9 	.word	0x004052c9
  4062c4:	00405261 	.word	0x00405261
  4062c8:	004096cc 	.word	0x004096cc
  4062cc:	00406369 	.word	0x00406369
  4062d0:	004096f0 	.word	0x004096f0
  4062d4:	00405fa1 	.word	0x00405fa1
  4062d8:	004052c1 	.word	0x004052c1
  4062dc:	00409738 	.word	0x00409738
  4062e0:	20000038 	.word	0x20000038
  4062e4:	004023d5 	.word	0x004023d5
  4062e8:	004063f5 	.word	0x004063f5
  4062ec:	00409710 	.word	0x00409710
  4062f0:	00409788 	.word	0x00409788
  4062f4:	0040524d 	.word	0x0040524d
  4062f8:	0040973c 	.word	0x0040973c
  4062fc:	00409754 	.word	0x00409754
  406300:	00409770 	.word	0x00409770
  406304:	0040977c 	.word	0x0040977c
  406308:	00402375 	.word	0x00402375
  40630c:	00989680 	.word	0x00989680
  406310:	00405e69 	.word	0x00405e69
  406314:	20000034 	.word	0x20000034

00406318 <__libc_init_array>:
  406318:	b570      	push	{r4, r5, r6, lr}
  40631a:	4e0f      	ldr	r6, [pc, #60]	; (406358 <__libc_init_array+0x40>)
  40631c:	4d0f      	ldr	r5, [pc, #60]	; (40635c <__libc_init_array+0x44>)
  40631e:	1b76      	subs	r6, r6, r5
  406320:	10b6      	asrs	r6, r6, #2
  406322:	bf18      	it	ne
  406324:	2400      	movne	r4, #0
  406326:	d005      	beq.n	406334 <__libc_init_array+0x1c>
  406328:	3401      	adds	r4, #1
  40632a:	f855 3b04 	ldr.w	r3, [r5], #4
  40632e:	4798      	blx	r3
  406330:	42a6      	cmp	r6, r4
  406332:	d1f9      	bne.n	406328 <__libc_init_array+0x10>
  406334:	4e0a      	ldr	r6, [pc, #40]	; (406360 <__libc_init_array+0x48>)
  406336:	4d0b      	ldr	r5, [pc, #44]	; (406364 <__libc_init_array+0x4c>)
  406338:	1b76      	subs	r6, r6, r5
  40633a:	f003 fa55 	bl	4097e8 <_init>
  40633e:	10b6      	asrs	r6, r6, #2
  406340:	bf18      	it	ne
  406342:	2400      	movne	r4, #0
  406344:	d006      	beq.n	406354 <__libc_init_array+0x3c>
  406346:	3401      	adds	r4, #1
  406348:	f855 3b04 	ldr.w	r3, [r5], #4
  40634c:	4798      	blx	r3
  40634e:	42a6      	cmp	r6, r4
  406350:	d1f9      	bne.n	406346 <__libc_init_array+0x2e>
  406352:	bd70      	pop	{r4, r5, r6, pc}
  406354:	bd70      	pop	{r4, r5, r6, pc}
  406356:	bf00      	nop
  406358:	004097f4 	.word	0x004097f4
  40635c:	004097f4 	.word	0x004097f4
  406360:	004097fc 	.word	0x004097fc
  406364:	004097f4 	.word	0x004097f4

00406368 <iprintf>:
  406368:	b40f      	push	{r0, r1, r2, r3}
  40636a:	b500      	push	{lr}
  40636c:	4907      	ldr	r1, [pc, #28]	; (40638c <iprintf+0x24>)
  40636e:	b083      	sub	sp, #12
  406370:	ab04      	add	r3, sp, #16
  406372:	6808      	ldr	r0, [r1, #0]
  406374:	f853 2b04 	ldr.w	r2, [r3], #4
  406378:	6881      	ldr	r1, [r0, #8]
  40637a:	9301      	str	r3, [sp, #4]
  40637c:	f000 fb4a 	bl	406a14 <_vfiprintf_r>
  406380:	b003      	add	sp, #12
  406382:	f85d eb04 	ldr.w	lr, [sp], #4
  406386:	b004      	add	sp, #16
  406388:	4770      	bx	lr
  40638a:	bf00      	nop
  40638c:	20000468 	.word	0x20000468

00406390 <memcmp>:
  406390:	2a03      	cmp	r2, #3
  406392:	b470      	push	{r4, r5, r6}
  406394:	d926      	bls.n	4063e4 <memcmp+0x54>
  406396:	ea40 0301 	orr.w	r3, r0, r1
  40639a:	079b      	lsls	r3, r3, #30
  40639c:	d011      	beq.n	4063c2 <memcmp+0x32>
  40639e:	7804      	ldrb	r4, [r0, #0]
  4063a0:	780d      	ldrb	r5, [r1, #0]
  4063a2:	42ac      	cmp	r4, r5
  4063a4:	d122      	bne.n	4063ec <memcmp+0x5c>
  4063a6:	4402      	add	r2, r0
  4063a8:	1c43      	adds	r3, r0, #1
  4063aa:	e005      	b.n	4063b8 <memcmp+0x28>
  4063ac:	f813 4b01 	ldrb.w	r4, [r3], #1
  4063b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4063b4:	42ac      	cmp	r4, r5
  4063b6:	d119      	bne.n	4063ec <memcmp+0x5c>
  4063b8:	4293      	cmp	r3, r2
  4063ba:	d1f7      	bne.n	4063ac <memcmp+0x1c>
  4063bc:	2000      	movs	r0, #0
  4063be:	bc70      	pop	{r4, r5, r6}
  4063c0:	4770      	bx	lr
  4063c2:	460c      	mov	r4, r1
  4063c4:	4603      	mov	r3, r0
  4063c6:	681e      	ldr	r6, [r3, #0]
  4063c8:	6825      	ldr	r5, [r4, #0]
  4063ca:	42ae      	cmp	r6, r5
  4063cc:	4618      	mov	r0, r3
  4063ce:	4621      	mov	r1, r4
  4063d0:	f103 0304 	add.w	r3, r3, #4
  4063d4:	f104 0404 	add.w	r4, r4, #4
  4063d8:	d1e1      	bne.n	40639e <memcmp+0xe>
  4063da:	3a04      	subs	r2, #4
  4063dc:	2a03      	cmp	r2, #3
  4063de:	4618      	mov	r0, r3
  4063e0:	4621      	mov	r1, r4
  4063e2:	d8f0      	bhi.n	4063c6 <memcmp+0x36>
  4063e4:	2a00      	cmp	r2, #0
  4063e6:	d1da      	bne.n	40639e <memcmp+0xe>
  4063e8:	4610      	mov	r0, r2
  4063ea:	e7e8      	b.n	4063be <memcmp+0x2e>
  4063ec:	1b60      	subs	r0, r4, r5
  4063ee:	bc70      	pop	{r4, r5, r6}
  4063f0:	4770      	bx	lr
  4063f2:	bf00      	nop

004063f4 <memcpy>:
  4063f4:	4684      	mov	ip, r0
  4063f6:	ea41 0300 	orr.w	r3, r1, r0
  4063fa:	f013 0303 	ands.w	r3, r3, #3
  4063fe:	d16d      	bne.n	4064dc <memcpy+0xe8>
  406400:	3a40      	subs	r2, #64	; 0x40
  406402:	d341      	bcc.n	406488 <memcpy+0x94>
  406404:	f851 3b04 	ldr.w	r3, [r1], #4
  406408:	f840 3b04 	str.w	r3, [r0], #4
  40640c:	f851 3b04 	ldr.w	r3, [r1], #4
  406410:	f840 3b04 	str.w	r3, [r0], #4
  406414:	f851 3b04 	ldr.w	r3, [r1], #4
  406418:	f840 3b04 	str.w	r3, [r0], #4
  40641c:	f851 3b04 	ldr.w	r3, [r1], #4
  406420:	f840 3b04 	str.w	r3, [r0], #4
  406424:	f851 3b04 	ldr.w	r3, [r1], #4
  406428:	f840 3b04 	str.w	r3, [r0], #4
  40642c:	f851 3b04 	ldr.w	r3, [r1], #4
  406430:	f840 3b04 	str.w	r3, [r0], #4
  406434:	f851 3b04 	ldr.w	r3, [r1], #4
  406438:	f840 3b04 	str.w	r3, [r0], #4
  40643c:	f851 3b04 	ldr.w	r3, [r1], #4
  406440:	f840 3b04 	str.w	r3, [r0], #4
  406444:	f851 3b04 	ldr.w	r3, [r1], #4
  406448:	f840 3b04 	str.w	r3, [r0], #4
  40644c:	f851 3b04 	ldr.w	r3, [r1], #4
  406450:	f840 3b04 	str.w	r3, [r0], #4
  406454:	f851 3b04 	ldr.w	r3, [r1], #4
  406458:	f840 3b04 	str.w	r3, [r0], #4
  40645c:	f851 3b04 	ldr.w	r3, [r1], #4
  406460:	f840 3b04 	str.w	r3, [r0], #4
  406464:	f851 3b04 	ldr.w	r3, [r1], #4
  406468:	f840 3b04 	str.w	r3, [r0], #4
  40646c:	f851 3b04 	ldr.w	r3, [r1], #4
  406470:	f840 3b04 	str.w	r3, [r0], #4
  406474:	f851 3b04 	ldr.w	r3, [r1], #4
  406478:	f840 3b04 	str.w	r3, [r0], #4
  40647c:	f851 3b04 	ldr.w	r3, [r1], #4
  406480:	f840 3b04 	str.w	r3, [r0], #4
  406484:	3a40      	subs	r2, #64	; 0x40
  406486:	d2bd      	bcs.n	406404 <memcpy+0x10>
  406488:	3230      	adds	r2, #48	; 0x30
  40648a:	d311      	bcc.n	4064b0 <memcpy+0xbc>
  40648c:	f851 3b04 	ldr.w	r3, [r1], #4
  406490:	f840 3b04 	str.w	r3, [r0], #4
  406494:	f851 3b04 	ldr.w	r3, [r1], #4
  406498:	f840 3b04 	str.w	r3, [r0], #4
  40649c:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a0:	f840 3b04 	str.w	r3, [r0], #4
  4064a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a8:	f840 3b04 	str.w	r3, [r0], #4
  4064ac:	3a10      	subs	r2, #16
  4064ae:	d2ed      	bcs.n	40648c <memcpy+0x98>
  4064b0:	320c      	adds	r2, #12
  4064b2:	d305      	bcc.n	4064c0 <memcpy+0xcc>
  4064b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064b8:	f840 3b04 	str.w	r3, [r0], #4
  4064bc:	3a04      	subs	r2, #4
  4064be:	d2f9      	bcs.n	4064b4 <memcpy+0xc0>
  4064c0:	3204      	adds	r2, #4
  4064c2:	d008      	beq.n	4064d6 <memcpy+0xe2>
  4064c4:	07d2      	lsls	r2, r2, #31
  4064c6:	bf1c      	itt	ne
  4064c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064cc:	f800 3b01 	strbne.w	r3, [r0], #1
  4064d0:	d301      	bcc.n	4064d6 <memcpy+0xe2>
  4064d2:	880b      	ldrh	r3, [r1, #0]
  4064d4:	8003      	strh	r3, [r0, #0]
  4064d6:	4660      	mov	r0, ip
  4064d8:	4770      	bx	lr
  4064da:	bf00      	nop
  4064dc:	2a08      	cmp	r2, #8
  4064de:	d313      	bcc.n	406508 <memcpy+0x114>
  4064e0:	078b      	lsls	r3, r1, #30
  4064e2:	d08d      	beq.n	406400 <memcpy+0xc>
  4064e4:	f010 0303 	ands.w	r3, r0, #3
  4064e8:	d08a      	beq.n	406400 <memcpy+0xc>
  4064ea:	f1c3 0304 	rsb	r3, r3, #4
  4064ee:	1ad2      	subs	r2, r2, r3
  4064f0:	07db      	lsls	r3, r3, #31
  4064f2:	bf1c      	itt	ne
  4064f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4064fc:	d380      	bcc.n	406400 <memcpy+0xc>
  4064fe:	f831 3b02 	ldrh.w	r3, [r1], #2
  406502:	f820 3b02 	strh.w	r3, [r0], #2
  406506:	e77b      	b.n	406400 <memcpy+0xc>
  406508:	3a04      	subs	r2, #4
  40650a:	d3d9      	bcc.n	4064c0 <memcpy+0xcc>
  40650c:	3a01      	subs	r2, #1
  40650e:	f811 3b01 	ldrb.w	r3, [r1], #1
  406512:	f800 3b01 	strb.w	r3, [r0], #1
  406516:	d2f9      	bcs.n	40650c <memcpy+0x118>
  406518:	780b      	ldrb	r3, [r1, #0]
  40651a:	7003      	strb	r3, [r0, #0]
  40651c:	784b      	ldrb	r3, [r1, #1]
  40651e:	7043      	strb	r3, [r0, #1]
  406520:	788b      	ldrb	r3, [r1, #2]
  406522:	7083      	strb	r3, [r0, #2]
  406524:	4660      	mov	r0, ip
  406526:	4770      	bx	lr

00406528 <memset>:
  406528:	b470      	push	{r4, r5, r6}
  40652a:	0784      	lsls	r4, r0, #30
  40652c:	d046      	beq.n	4065bc <memset+0x94>
  40652e:	1e54      	subs	r4, r2, #1
  406530:	2a00      	cmp	r2, #0
  406532:	d041      	beq.n	4065b8 <memset+0x90>
  406534:	b2cd      	uxtb	r5, r1
  406536:	4603      	mov	r3, r0
  406538:	e002      	b.n	406540 <memset+0x18>
  40653a:	1e62      	subs	r2, r4, #1
  40653c:	b3e4      	cbz	r4, 4065b8 <memset+0x90>
  40653e:	4614      	mov	r4, r2
  406540:	f803 5b01 	strb.w	r5, [r3], #1
  406544:	079a      	lsls	r2, r3, #30
  406546:	d1f8      	bne.n	40653a <memset+0x12>
  406548:	2c03      	cmp	r4, #3
  40654a:	d92e      	bls.n	4065aa <memset+0x82>
  40654c:	b2cd      	uxtb	r5, r1
  40654e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406552:	2c0f      	cmp	r4, #15
  406554:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406558:	d919      	bls.n	40658e <memset+0x66>
  40655a:	f103 0210 	add.w	r2, r3, #16
  40655e:	4626      	mov	r6, r4
  406560:	3e10      	subs	r6, #16
  406562:	2e0f      	cmp	r6, #15
  406564:	f842 5c10 	str.w	r5, [r2, #-16]
  406568:	f842 5c0c 	str.w	r5, [r2, #-12]
  40656c:	f842 5c08 	str.w	r5, [r2, #-8]
  406570:	f842 5c04 	str.w	r5, [r2, #-4]
  406574:	f102 0210 	add.w	r2, r2, #16
  406578:	d8f2      	bhi.n	406560 <memset+0x38>
  40657a:	f1a4 0210 	sub.w	r2, r4, #16
  40657e:	f022 020f 	bic.w	r2, r2, #15
  406582:	f004 040f 	and.w	r4, r4, #15
  406586:	3210      	adds	r2, #16
  406588:	2c03      	cmp	r4, #3
  40658a:	4413      	add	r3, r2
  40658c:	d90d      	bls.n	4065aa <memset+0x82>
  40658e:	461e      	mov	r6, r3
  406590:	4622      	mov	r2, r4
  406592:	3a04      	subs	r2, #4
  406594:	2a03      	cmp	r2, #3
  406596:	f846 5b04 	str.w	r5, [r6], #4
  40659a:	d8fa      	bhi.n	406592 <memset+0x6a>
  40659c:	1f22      	subs	r2, r4, #4
  40659e:	f022 0203 	bic.w	r2, r2, #3
  4065a2:	3204      	adds	r2, #4
  4065a4:	4413      	add	r3, r2
  4065a6:	f004 0403 	and.w	r4, r4, #3
  4065aa:	b12c      	cbz	r4, 4065b8 <memset+0x90>
  4065ac:	b2c9      	uxtb	r1, r1
  4065ae:	441c      	add	r4, r3
  4065b0:	f803 1b01 	strb.w	r1, [r3], #1
  4065b4:	42a3      	cmp	r3, r4
  4065b6:	d1fb      	bne.n	4065b0 <memset+0x88>
  4065b8:	bc70      	pop	{r4, r5, r6}
  4065ba:	4770      	bx	lr
  4065bc:	4614      	mov	r4, r2
  4065be:	4603      	mov	r3, r0
  4065c0:	e7c2      	b.n	406548 <memset+0x20>
  4065c2:	bf00      	nop

004065c4 <_puts_r>:
  4065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4065c6:	4605      	mov	r5, r0
  4065c8:	b089      	sub	sp, #36	; 0x24
  4065ca:	4608      	mov	r0, r1
  4065cc:	460c      	mov	r4, r1
  4065ce:	f000 f977 	bl	4068c0 <strlen>
  4065d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4065d4:	4f14      	ldr	r7, [pc, #80]	; (406628 <_puts_r+0x64>)
  4065d6:	9404      	str	r4, [sp, #16]
  4065d8:	2601      	movs	r6, #1
  4065da:	1c44      	adds	r4, r0, #1
  4065dc:	a904      	add	r1, sp, #16
  4065de:	2202      	movs	r2, #2
  4065e0:	9403      	str	r4, [sp, #12]
  4065e2:	9005      	str	r0, [sp, #20]
  4065e4:	68ac      	ldr	r4, [r5, #8]
  4065e6:	9706      	str	r7, [sp, #24]
  4065e8:	9607      	str	r6, [sp, #28]
  4065ea:	9101      	str	r1, [sp, #4]
  4065ec:	9202      	str	r2, [sp, #8]
  4065ee:	b1b3      	cbz	r3, 40661e <_puts_r+0x5a>
  4065f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4065f4:	049a      	lsls	r2, r3, #18
  4065f6:	d406      	bmi.n	406606 <_puts_r+0x42>
  4065f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4065fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4065fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  406602:	81a3      	strh	r3, [r4, #12]
  406604:	6662      	str	r2, [r4, #100]	; 0x64
  406606:	4621      	mov	r1, r4
  406608:	4628      	mov	r0, r5
  40660a:	aa01      	add	r2, sp, #4
  40660c:	f001 fc94 	bl	407f38 <__sfvwrite_r>
  406610:	2800      	cmp	r0, #0
  406612:	bf14      	ite	ne
  406614:	f04f 30ff 	movne.w	r0, #4294967295
  406618:	200a      	moveq	r0, #10
  40661a:	b009      	add	sp, #36	; 0x24
  40661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40661e:	4628      	mov	r0, r5
  406620:	f001 fad8 	bl	407bd4 <__sinit>
  406624:	e7e4      	b.n	4065f0 <_puts_r+0x2c>
  406626:	bf00      	nop
  406628:	00409794 	.word	0x00409794

0040662c <puts>:
  40662c:	4b02      	ldr	r3, [pc, #8]	; (406638 <puts+0xc>)
  40662e:	4601      	mov	r1, r0
  406630:	6818      	ldr	r0, [r3, #0]
  406632:	f7ff bfc7 	b.w	4065c4 <_puts_r>
  406636:	bf00      	nop
  406638:	20000468 	.word	0x20000468

0040663c <setbuf>:
  40663c:	2900      	cmp	r1, #0
  40663e:	bf0c      	ite	eq
  406640:	2202      	moveq	r2, #2
  406642:	2200      	movne	r2, #0
  406644:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406648:	f000 b800 	b.w	40664c <setvbuf>

0040664c <setvbuf>:
  40664c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406650:	4c51      	ldr	r4, [pc, #324]	; (406798 <setvbuf+0x14c>)
  406652:	6825      	ldr	r5, [r4, #0]
  406654:	b083      	sub	sp, #12
  406656:	4604      	mov	r4, r0
  406658:	460f      	mov	r7, r1
  40665a:	4690      	mov	r8, r2
  40665c:	461e      	mov	r6, r3
  40665e:	b115      	cbz	r5, 406666 <setvbuf+0x1a>
  406660:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406662:	2b00      	cmp	r3, #0
  406664:	d079      	beq.n	40675a <setvbuf+0x10e>
  406666:	f1b8 0f02 	cmp.w	r8, #2
  40666a:	d004      	beq.n	406676 <setvbuf+0x2a>
  40666c:	f1b8 0f01 	cmp.w	r8, #1
  406670:	d87f      	bhi.n	406772 <setvbuf+0x126>
  406672:	2e00      	cmp	r6, #0
  406674:	db7d      	blt.n	406772 <setvbuf+0x126>
  406676:	4621      	mov	r1, r4
  406678:	4628      	mov	r0, r5
  40667a:	f001 fa17 	bl	407aac <_fflush_r>
  40667e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406680:	b141      	cbz	r1, 406694 <setvbuf+0x48>
  406682:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406686:	4299      	cmp	r1, r3
  406688:	d002      	beq.n	406690 <setvbuf+0x44>
  40668a:	4628      	mov	r0, r5
  40668c:	f001 fb6c 	bl	407d68 <_free_r>
  406690:	2300      	movs	r3, #0
  406692:	6323      	str	r3, [r4, #48]	; 0x30
  406694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406698:	2200      	movs	r2, #0
  40669a:	61a2      	str	r2, [r4, #24]
  40669c:	6062      	str	r2, [r4, #4]
  40669e:	061a      	lsls	r2, r3, #24
  4066a0:	d454      	bmi.n	40674c <setvbuf+0x100>
  4066a2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4066a6:	f023 0303 	bic.w	r3, r3, #3
  4066aa:	f1b8 0f02 	cmp.w	r8, #2
  4066ae:	81a3      	strh	r3, [r4, #12]
  4066b0:	d039      	beq.n	406726 <setvbuf+0xda>
  4066b2:	ab01      	add	r3, sp, #4
  4066b4:	466a      	mov	r2, sp
  4066b6:	4621      	mov	r1, r4
  4066b8:	4628      	mov	r0, r5
  4066ba:	f001 fdf3 	bl	4082a4 <__swhatbuf_r>
  4066be:	89a3      	ldrh	r3, [r4, #12]
  4066c0:	4318      	orrs	r0, r3
  4066c2:	81a0      	strh	r0, [r4, #12]
  4066c4:	b326      	cbz	r6, 406710 <setvbuf+0xc4>
  4066c6:	b327      	cbz	r7, 406712 <setvbuf+0xc6>
  4066c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4066ca:	2b00      	cmp	r3, #0
  4066cc:	d04d      	beq.n	40676a <setvbuf+0x11e>
  4066ce:	9b00      	ldr	r3, [sp, #0]
  4066d0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4066d4:	6027      	str	r7, [r4, #0]
  4066d6:	429e      	cmp	r6, r3
  4066d8:	bf1c      	itt	ne
  4066da:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4066de:	81a0      	strhne	r0, [r4, #12]
  4066e0:	f1b8 0f01 	cmp.w	r8, #1
  4066e4:	bf08      	it	eq
  4066e6:	f040 0001 	orreq.w	r0, r0, #1
  4066ea:	b283      	uxth	r3, r0
  4066ec:	bf08      	it	eq
  4066ee:	81a0      	strheq	r0, [r4, #12]
  4066f0:	f003 0008 	and.w	r0, r3, #8
  4066f4:	b280      	uxth	r0, r0
  4066f6:	6127      	str	r7, [r4, #16]
  4066f8:	6166      	str	r6, [r4, #20]
  4066fa:	b318      	cbz	r0, 406744 <setvbuf+0xf8>
  4066fc:	f013 0001 	ands.w	r0, r3, #1
  406700:	d02f      	beq.n	406762 <setvbuf+0x116>
  406702:	2000      	movs	r0, #0
  406704:	4276      	negs	r6, r6
  406706:	61a6      	str	r6, [r4, #24]
  406708:	60a0      	str	r0, [r4, #8]
  40670a:	b003      	add	sp, #12
  40670c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406710:	9e00      	ldr	r6, [sp, #0]
  406712:	4630      	mov	r0, r6
  406714:	f001 fe3a 	bl	40838c <malloc>
  406718:	4607      	mov	r7, r0
  40671a:	b368      	cbz	r0, 406778 <setvbuf+0x12c>
  40671c:	89a3      	ldrh	r3, [r4, #12]
  40671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406722:	81a3      	strh	r3, [r4, #12]
  406724:	e7d0      	b.n	4066c8 <setvbuf+0x7c>
  406726:	2000      	movs	r0, #0
  406728:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40672c:	f043 0302 	orr.w	r3, r3, #2
  406730:	2500      	movs	r5, #0
  406732:	2101      	movs	r1, #1
  406734:	81a3      	strh	r3, [r4, #12]
  406736:	60a5      	str	r5, [r4, #8]
  406738:	6022      	str	r2, [r4, #0]
  40673a:	6122      	str	r2, [r4, #16]
  40673c:	6161      	str	r1, [r4, #20]
  40673e:	b003      	add	sp, #12
  406740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406744:	60a0      	str	r0, [r4, #8]
  406746:	b003      	add	sp, #12
  406748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40674c:	6921      	ldr	r1, [r4, #16]
  40674e:	4628      	mov	r0, r5
  406750:	f001 fb0a 	bl	407d68 <_free_r>
  406754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406758:	e7a3      	b.n	4066a2 <setvbuf+0x56>
  40675a:	4628      	mov	r0, r5
  40675c:	f001 fa3a 	bl	407bd4 <__sinit>
  406760:	e781      	b.n	406666 <setvbuf+0x1a>
  406762:	60a6      	str	r6, [r4, #8]
  406764:	b003      	add	sp, #12
  406766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40676a:	4628      	mov	r0, r5
  40676c:	f001 fa32 	bl	407bd4 <__sinit>
  406770:	e7ad      	b.n	4066ce <setvbuf+0x82>
  406772:	f04f 30ff 	mov.w	r0, #4294967295
  406776:	e7e2      	b.n	40673e <setvbuf+0xf2>
  406778:	f8dd 9000 	ldr.w	r9, [sp]
  40677c:	45b1      	cmp	r9, r6
  40677e:	d006      	beq.n	40678e <setvbuf+0x142>
  406780:	4648      	mov	r0, r9
  406782:	f001 fe03 	bl	40838c <malloc>
  406786:	4607      	mov	r7, r0
  406788:	b108      	cbz	r0, 40678e <setvbuf+0x142>
  40678a:	464e      	mov	r6, r9
  40678c:	e7c6      	b.n	40671c <setvbuf+0xd0>
  40678e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406792:	f04f 30ff 	mov.w	r0, #4294967295
  406796:	e7c7      	b.n	406728 <setvbuf+0xdc>
  406798:	20000468 	.word	0x20000468

0040679c <strcat>:
  40679c:	0783      	lsls	r3, r0, #30
  40679e:	b510      	push	{r4, lr}
  4067a0:	4604      	mov	r4, r0
  4067a2:	d110      	bne.n	4067c6 <strcat+0x2a>
  4067a4:	6802      	ldr	r2, [r0, #0]
  4067a6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4067aa:	ea23 0302 	bic.w	r3, r3, r2
  4067ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4067b2:	d108      	bne.n	4067c6 <strcat+0x2a>
  4067b4:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4067b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4067bc:	ea23 0302 	bic.w	r3, r3, r2
  4067c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4067c4:	d0f6      	beq.n	4067b4 <strcat+0x18>
  4067c6:	7803      	ldrb	r3, [r0, #0]
  4067c8:	b11b      	cbz	r3, 4067d2 <strcat+0x36>
  4067ca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4067ce:	2b00      	cmp	r3, #0
  4067d0:	d1fb      	bne.n	4067ca <strcat+0x2e>
  4067d2:	f000 f803 	bl	4067dc <strcpy>
  4067d6:	4620      	mov	r0, r4
  4067d8:	bd10      	pop	{r4, pc}
  4067da:	bf00      	nop

004067dc <strcpy>:
  4067dc:	ea80 0201 	eor.w	r2, r0, r1
  4067e0:	4684      	mov	ip, r0
  4067e2:	f012 0f03 	tst.w	r2, #3
  4067e6:	d14f      	bne.n	406888 <strcpy+0xac>
  4067e8:	f011 0f03 	tst.w	r1, #3
  4067ec:	d132      	bne.n	406854 <strcpy+0x78>
  4067ee:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4067f2:	f011 0f04 	tst.w	r1, #4
  4067f6:	f851 3b04 	ldr.w	r3, [r1], #4
  4067fa:	d00b      	beq.n	406814 <strcpy+0x38>
  4067fc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406800:	439a      	bics	r2, r3
  406802:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406806:	bf04      	itt	eq
  406808:	f84c 3b04 	streq.w	r3, [ip], #4
  40680c:	f851 3b04 	ldreq.w	r3, [r1], #4
  406810:	d116      	bne.n	406840 <strcpy+0x64>
  406812:	bf00      	nop
  406814:	f851 4b04 	ldr.w	r4, [r1], #4
  406818:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40681c:	439a      	bics	r2, r3
  40681e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406822:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  406826:	d10b      	bne.n	406840 <strcpy+0x64>
  406828:	f84c 3b04 	str.w	r3, [ip], #4
  40682c:	43a2      	bics	r2, r4
  40682e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406832:	bf04      	itt	eq
  406834:	f851 3b04 	ldreq.w	r3, [r1], #4
  406838:	f84c 4b04 	streq.w	r4, [ip], #4
  40683c:	d0ea      	beq.n	406814 <strcpy+0x38>
  40683e:	4623      	mov	r3, r4
  406840:	f80c 3b01 	strb.w	r3, [ip], #1
  406844:	f013 0fff 	tst.w	r3, #255	; 0xff
  406848:	ea4f 2333 	mov.w	r3, r3, ror #8
  40684c:	d1f8      	bne.n	406840 <strcpy+0x64>
  40684e:	f85d 4b04 	ldr.w	r4, [sp], #4
  406852:	4770      	bx	lr
  406854:	f011 0f01 	tst.w	r1, #1
  406858:	d006      	beq.n	406868 <strcpy+0x8c>
  40685a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40685e:	f80c 2b01 	strb.w	r2, [ip], #1
  406862:	2a00      	cmp	r2, #0
  406864:	bf08      	it	eq
  406866:	4770      	bxeq	lr
  406868:	f011 0f02 	tst.w	r1, #2
  40686c:	d0bf      	beq.n	4067ee <strcpy+0x12>
  40686e:	f831 2b02 	ldrh.w	r2, [r1], #2
  406872:	f012 0fff 	tst.w	r2, #255	; 0xff
  406876:	bf16      	itet	ne
  406878:	f82c 2b02 	strhne.w	r2, [ip], #2
  40687c:	f88c 2000 	strbeq.w	r2, [ip]
  406880:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  406884:	d1b3      	bne.n	4067ee <strcpy+0x12>
  406886:	4770      	bx	lr
  406888:	f811 2b01 	ldrb.w	r2, [r1], #1
  40688c:	f80c 2b01 	strb.w	r2, [ip], #1
  406890:	2a00      	cmp	r2, #0
  406892:	d1f9      	bne.n	406888 <strcpy+0xac>
  406894:	4770      	bx	lr
  406896:	bf00      	nop
	...

004068c0 <strlen>:
  4068c0:	f890 f000 	pld	[r0]
  4068c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4068c8:	f020 0107 	bic.w	r1, r0, #7
  4068cc:	f06f 0c00 	mvn.w	ip, #0
  4068d0:	f010 0407 	ands.w	r4, r0, #7
  4068d4:	f891 f020 	pld	[r1, #32]
  4068d8:	f040 8049 	bne.w	40696e <strlen+0xae>
  4068dc:	f04f 0400 	mov.w	r4, #0
  4068e0:	f06f 0007 	mvn.w	r0, #7
  4068e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4068e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4068ec:	f100 0008 	add.w	r0, r0, #8
  4068f0:	fa82 f24c 	uadd8	r2, r2, ip
  4068f4:	faa4 f28c 	sel	r2, r4, ip
  4068f8:	fa83 f34c 	uadd8	r3, r3, ip
  4068fc:	faa2 f38c 	sel	r3, r2, ip
  406900:	bb4b      	cbnz	r3, 406956 <strlen+0x96>
  406902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406906:	fa82 f24c 	uadd8	r2, r2, ip
  40690a:	f100 0008 	add.w	r0, r0, #8
  40690e:	faa4 f28c 	sel	r2, r4, ip
  406912:	fa83 f34c 	uadd8	r3, r3, ip
  406916:	faa2 f38c 	sel	r3, r2, ip
  40691a:	b9e3      	cbnz	r3, 406956 <strlen+0x96>
  40691c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406920:	fa82 f24c 	uadd8	r2, r2, ip
  406924:	f100 0008 	add.w	r0, r0, #8
  406928:	faa4 f28c 	sel	r2, r4, ip
  40692c:	fa83 f34c 	uadd8	r3, r3, ip
  406930:	faa2 f38c 	sel	r3, r2, ip
  406934:	b97b      	cbnz	r3, 406956 <strlen+0x96>
  406936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40693a:	f101 0120 	add.w	r1, r1, #32
  40693e:	fa82 f24c 	uadd8	r2, r2, ip
  406942:	f100 0008 	add.w	r0, r0, #8
  406946:	faa4 f28c 	sel	r2, r4, ip
  40694a:	fa83 f34c 	uadd8	r3, r3, ip
  40694e:	faa2 f38c 	sel	r3, r2, ip
  406952:	2b00      	cmp	r3, #0
  406954:	d0c6      	beq.n	4068e4 <strlen+0x24>
  406956:	2a00      	cmp	r2, #0
  406958:	bf04      	itt	eq
  40695a:	3004      	addeq	r0, #4
  40695c:	461a      	moveq	r2, r3
  40695e:	ba12      	rev	r2, r2
  406960:	fab2 f282 	clz	r2, r2
  406964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40696c:	4770      	bx	lr
  40696e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406972:	f004 0503 	and.w	r5, r4, #3
  406976:	f1c4 0000 	rsb	r0, r4, #0
  40697a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40697e:	f014 0f04 	tst.w	r4, #4
  406982:	f891 f040 	pld	[r1, #64]	; 0x40
  406986:	fa0c f505 	lsl.w	r5, ip, r5
  40698a:	ea62 0205 	orn	r2, r2, r5
  40698e:	bf1c      	itt	ne
  406990:	ea63 0305 	ornne	r3, r3, r5
  406994:	4662      	movne	r2, ip
  406996:	f04f 0400 	mov.w	r4, #0
  40699a:	e7a9      	b.n	4068f0 <strlen+0x30>

0040699c <__sprint_r.part.0>:
  40699c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40699e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4069a2:	049c      	lsls	r4, r3, #18
  4069a4:	4692      	mov	sl, r2
  4069a6:	d52c      	bpl.n	406a02 <__sprint_r.part.0+0x66>
  4069a8:	6893      	ldr	r3, [r2, #8]
  4069aa:	6812      	ldr	r2, [r2, #0]
  4069ac:	b33b      	cbz	r3, 4069fe <__sprint_r.part.0+0x62>
  4069ae:	460f      	mov	r7, r1
  4069b0:	4680      	mov	r8, r0
  4069b2:	f102 0908 	add.w	r9, r2, #8
  4069b6:	e919 0060 	ldmdb	r9, {r5, r6}
  4069ba:	08b6      	lsrs	r6, r6, #2
  4069bc:	d017      	beq.n	4069ee <__sprint_r.part.0+0x52>
  4069be:	3d04      	subs	r5, #4
  4069c0:	2400      	movs	r4, #0
  4069c2:	e001      	b.n	4069c8 <__sprint_r.part.0+0x2c>
  4069c4:	42a6      	cmp	r6, r4
  4069c6:	d010      	beq.n	4069ea <__sprint_r.part.0+0x4e>
  4069c8:	463a      	mov	r2, r7
  4069ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4069ce:	4640      	mov	r0, r8
  4069d0:	f001 f96a 	bl	407ca8 <_fputwc_r>
  4069d4:	1c43      	adds	r3, r0, #1
  4069d6:	f104 0401 	add.w	r4, r4, #1
  4069da:	d1f3      	bne.n	4069c4 <__sprint_r.part.0+0x28>
  4069dc:	2300      	movs	r3, #0
  4069de:	f8ca 3008 	str.w	r3, [sl, #8]
  4069e2:	f8ca 3004 	str.w	r3, [sl, #4]
  4069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4069ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4069f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4069f6:	f109 0908 	add.w	r9, r9, #8
  4069fa:	2b00      	cmp	r3, #0
  4069fc:	d1db      	bne.n	4069b6 <__sprint_r.part.0+0x1a>
  4069fe:	2000      	movs	r0, #0
  406a00:	e7ec      	b.n	4069dc <__sprint_r.part.0+0x40>
  406a02:	f001 fa99 	bl	407f38 <__sfvwrite_r>
  406a06:	2300      	movs	r3, #0
  406a08:	f8ca 3008 	str.w	r3, [sl, #8]
  406a0c:	f8ca 3004 	str.w	r3, [sl, #4]
  406a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406a14 <_vfiprintf_r>:
  406a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a18:	b0ab      	sub	sp, #172	; 0xac
  406a1a:	461c      	mov	r4, r3
  406a1c:	9100      	str	r1, [sp, #0]
  406a1e:	4690      	mov	r8, r2
  406a20:	9304      	str	r3, [sp, #16]
  406a22:	9005      	str	r0, [sp, #20]
  406a24:	b118      	cbz	r0, 406a2e <_vfiprintf_r+0x1a>
  406a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406a28:	2b00      	cmp	r3, #0
  406a2a:	f000 80de 	beq.w	406bea <_vfiprintf_r+0x1d6>
  406a2e:	9800      	ldr	r0, [sp, #0]
  406a30:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  406a34:	b28a      	uxth	r2, r1
  406a36:	0495      	lsls	r5, r2, #18
  406a38:	d407      	bmi.n	406a4a <_vfiprintf_r+0x36>
  406a3a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  406a3c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  406a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406a44:	8182      	strh	r2, [r0, #12]
  406a46:	6643      	str	r3, [r0, #100]	; 0x64
  406a48:	b292      	uxth	r2, r2
  406a4a:	0711      	lsls	r1, r2, #28
  406a4c:	f140 80b1 	bpl.w	406bb2 <_vfiprintf_r+0x19e>
  406a50:	9b00      	ldr	r3, [sp, #0]
  406a52:	691b      	ldr	r3, [r3, #16]
  406a54:	2b00      	cmp	r3, #0
  406a56:	f000 80ac 	beq.w	406bb2 <_vfiprintf_r+0x19e>
  406a5a:	f002 021a 	and.w	r2, r2, #26
  406a5e:	2a0a      	cmp	r2, #10
  406a60:	f000 80b5 	beq.w	406bce <_vfiprintf_r+0x1ba>
  406a64:	2300      	movs	r3, #0
  406a66:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  406a6a:	9302      	str	r3, [sp, #8]
  406a6c:	930f      	str	r3, [sp, #60]	; 0x3c
  406a6e:	930e      	str	r3, [sp, #56]	; 0x38
  406a70:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  406a74:	46da      	mov	sl, fp
  406a76:	f898 3000 	ldrb.w	r3, [r8]
  406a7a:	4644      	mov	r4, r8
  406a7c:	b1fb      	cbz	r3, 406abe <_vfiprintf_r+0xaa>
  406a7e:	2b25      	cmp	r3, #37	; 0x25
  406a80:	d102      	bne.n	406a88 <_vfiprintf_r+0x74>
  406a82:	e01c      	b.n	406abe <_vfiprintf_r+0xaa>
  406a84:	2b25      	cmp	r3, #37	; 0x25
  406a86:	d003      	beq.n	406a90 <_vfiprintf_r+0x7c>
  406a88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406a8c:	2b00      	cmp	r3, #0
  406a8e:	d1f9      	bne.n	406a84 <_vfiprintf_r+0x70>
  406a90:	ebc8 0504 	rsb	r5, r8, r4
  406a94:	b19d      	cbz	r5, 406abe <_vfiprintf_r+0xaa>
  406a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a9a:	f8ca 8000 	str.w	r8, [sl]
  406a9e:	3301      	adds	r3, #1
  406aa0:	442a      	add	r2, r5
  406aa2:	2b07      	cmp	r3, #7
  406aa4:	f8ca 5004 	str.w	r5, [sl, #4]
  406aa8:	920f      	str	r2, [sp, #60]	; 0x3c
  406aaa:	930e      	str	r3, [sp, #56]	; 0x38
  406aac:	dd7b      	ble.n	406ba6 <_vfiprintf_r+0x192>
  406aae:	2a00      	cmp	r2, #0
  406ab0:	f040 8528 	bne.w	407504 <_vfiprintf_r+0xaf0>
  406ab4:	9b02      	ldr	r3, [sp, #8]
  406ab6:	920e      	str	r2, [sp, #56]	; 0x38
  406ab8:	442b      	add	r3, r5
  406aba:	46da      	mov	sl, fp
  406abc:	9302      	str	r3, [sp, #8]
  406abe:	7823      	ldrb	r3, [r4, #0]
  406ac0:	2b00      	cmp	r3, #0
  406ac2:	f000 843e 	beq.w	407342 <_vfiprintf_r+0x92e>
  406ac6:	2100      	movs	r1, #0
  406ac8:	f04f 0300 	mov.w	r3, #0
  406acc:	f04f 32ff 	mov.w	r2, #4294967295
  406ad0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406ad4:	f104 0801 	add.w	r8, r4, #1
  406ad8:	7863      	ldrb	r3, [r4, #1]
  406ada:	9201      	str	r2, [sp, #4]
  406adc:	4608      	mov	r0, r1
  406ade:	460e      	mov	r6, r1
  406ae0:	460c      	mov	r4, r1
  406ae2:	f108 0801 	add.w	r8, r8, #1
  406ae6:	f1a3 0220 	sub.w	r2, r3, #32
  406aea:	2a58      	cmp	r2, #88	; 0x58
  406aec:	f200 8393 	bhi.w	407216 <_vfiprintf_r+0x802>
  406af0:	e8df f012 	tbh	[pc, r2, lsl #1]
  406af4:	03910346 	.word	0x03910346
  406af8:	034e0391 	.word	0x034e0391
  406afc:	03910391 	.word	0x03910391
  406b00:	03910391 	.word	0x03910391
  406b04:	03910391 	.word	0x03910391
  406b08:	02670289 	.word	0x02670289
  406b0c:	00800391 	.word	0x00800391
  406b10:	0391026c 	.word	0x0391026c
  406b14:	025901c6 	.word	0x025901c6
  406b18:	02590259 	.word	0x02590259
  406b1c:	02590259 	.word	0x02590259
  406b20:	02590259 	.word	0x02590259
  406b24:	02590259 	.word	0x02590259
  406b28:	03910391 	.word	0x03910391
  406b2c:	03910391 	.word	0x03910391
  406b30:	03910391 	.word	0x03910391
  406b34:	03910391 	.word	0x03910391
  406b38:	03910391 	.word	0x03910391
  406b3c:	039101cb 	.word	0x039101cb
  406b40:	03910391 	.word	0x03910391
  406b44:	03910391 	.word	0x03910391
  406b48:	03910391 	.word	0x03910391
  406b4c:	03910391 	.word	0x03910391
  406b50:	02140391 	.word	0x02140391
  406b54:	03910391 	.word	0x03910391
  406b58:	03910391 	.word	0x03910391
  406b5c:	02ee0391 	.word	0x02ee0391
  406b60:	03910391 	.word	0x03910391
  406b64:	03910311 	.word	0x03910311
  406b68:	03910391 	.word	0x03910391
  406b6c:	03910391 	.word	0x03910391
  406b70:	03910391 	.word	0x03910391
  406b74:	03910391 	.word	0x03910391
  406b78:	03340391 	.word	0x03340391
  406b7c:	0391038a 	.word	0x0391038a
  406b80:	03910391 	.word	0x03910391
  406b84:	038a0367 	.word	0x038a0367
  406b88:	03910391 	.word	0x03910391
  406b8c:	0391036c 	.word	0x0391036c
  406b90:	02950379 	.word	0x02950379
  406b94:	02e90085 	.word	0x02e90085
  406b98:	029b0391 	.word	0x029b0391
  406b9c:	02ba0391 	.word	0x02ba0391
  406ba0:	03910391 	.word	0x03910391
  406ba4:	0353      	.short	0x0353
  406ba6:	f10a 0a08 	add.w	sl, sl, #8
  406baa:	9b02      	ldr	r3, [sp, #8]
  406bac:	442b      	add	r3, r5
  406bae:	9302      	str	r3, [sp, #8]
  406bb0:	e785      	b.n	406abe <_vfiprintf_r+0xaa>
  406bb2:	9900      	ldr	r1, [sp, #0]
  406bb4:	9805      	ldr	r0, [sp, #20]
  406bb6:	f000 fe61 	bl	40787c <__swsetup_r>
  406bba:	2800      	cmp	r0, #0
  406bbc:	f040 8558 	bne.w	407670 <_vfiprintf_r+0xc5c>
  406bc0:	9b00      	ldr	r3, [sp, #0]
  406bc2:	899a      	ldrh	r2, [r3, #12]
  406bc4:	f002 021a 	and.w	r2, r2, #26
  406bc8:	2a0a      	cmp	r2, #10
  406bca:	f47f af4b 	bne.w	406a64 <_vfiprintf_r+0x50>
  406bce:	9900      	ldr	r1, [sp, #0]
  406bd0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  406bd4:	2b00      	cmp	r3, #0
  406bd6:	f6ff af45 	blt.w	406a64 <_vfiprintf_r+0x50>
  406bda:	4623      	mov	r3, r4
  406bdc:	4642      	mov	r2, r8
  406bde:	9805      	ldr	r0, [sp, #20]
  406be0:	f000 fe16 	bl	407810 <__sbprintf>
  406be4:	b02b      	add	sp, #172	; 0xac
  406be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bea:	f000 fff3 	bl	407bd4 <__sinit>
  406bee:	e71e      	b.n	406a2e <_vfiprintf_r+0x1a>
  406bf0:	4264      	negs	r4, r4
  406bf2:	9304      	str	r3, [sp, #16]
  406bf4:	f046 0604 	orr.w	r6, r6, #4
  406bf8:	f898 3000 	ldrb.w	r3, [r8]
  406bfc:	e771      	b.n	406ae2 <_vfiprintf_r+0xce>
  406bfe:	2130      	movs	r1, #48	; 0x30
  406c00:	9804      	ldr	r0, [sp, #16]
  406c02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  406c06:	9901      	ldr	r1, [sp, #4]
  406c08:	9406      	str	r4, [sp, #24]
  406c0a:	f04f 0300 	mov.w	r3, #0
  406c0e:	2278      	movs	r2, #120	; 0x78
  406c10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406c14:	2900      	cmp	r1, #0
  406c16:	4603      	mov	r3, r0
  406c18:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  406c1c:	6804      	ldr	r4, [r0, #0]
  406c1e:	f103 0304 	add.w	r3, r3, #4
  406c22:	f04f 0500 	mov.w	r5, #0
  406c26:	f046 0202 	orr.w	r2, r6, #2
  406c2a:	f2c0 8525 	blt.w	407678 <_vfiprintf_r+0xc64>
  406c2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406c32:	ea54 0205 	orrs.w	r2, r4, r5
  406c36:	f046 0602 	orr.w	r6, r6, #2
  406c3a:	9304      	str	r3, [sp, #16]
  406c3c:	f040 84bf 	bne.w	4075be <_vfiprintf_r+0xbaa>
  406c40:	48b3      	ldr	r0, [pc, #716]	; (406f10 <_vfiprintf_r+0x4fc>)
  406c42:	9b01      	ldr	r3, [sp, #4]
  406c44:	2b00      	cmp	r3, #0
  406c46:	f040 841c 	bne.w	407482 <_vfiprintf_r+0xa6e>
  406c4a:	4699      	mov	r9, r3
  406c4c:	2300      	movs	r3, #0
  406c4e:	9301      	str	r3, [sp, #4]
  406c50:	9303      	str	r3, [sp, #12]
  406c52:	465f      	mov	r7, fp
  406c54:	9b01      	ldr	r3, [sp, #4]
  406c56:	9a03      	ldr	r2, [sp, #12]
  406c58:	4293      	cmp	r3, r2
  406c5a:	bfb8      	it	lt
  406c5c:	4613      	movlt	r3, r2
  406c5e:	461d      	mov	r5, r3
  406c60:	f1b9 0f00 	cmp.w	r9, #0
  406c64:	d000      	beq.n	406c68 <_vfiprintf_r+0x254>
  406c66:	3501      	adds	r5, #1
  406c68:	f016 0302 	ands.w	r3, r6, #2
  406c6c:	9307      	str	r3, [sp, #28]
  406c6e:	bf18      	it	ne
  406c70:	3502      	addne	r5, #2
  406c72:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  406c76:	9308      	str	r3, [sp, #32]
  406c78:	f040 82f1 	bne.w	40725e <_vfiprintf_r+0x84a>
  406c7c:	9b06      	ldr	r3, [sp, #24]
  406c7e:	1b5c      	subs	r4, r3, r5
  406c80:	2c00      	cmp	r4, #0
  406c82:	f340 82ec 	ble.w	40725e <_vfiprintf_r+0x84a>
  406c86:	2c10      	cmp	r4, #16
  406c88:	f340 8556 	ble.w	407738 <_vfiprintf_r+0xd24>
  406c8c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 406f14 <_vfiprintf_r+0x500>
  406c90:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  406c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406c96:	46d4      	mov	ip, sl
  406c98:	2310      	movs	r3, #16
  406c9a:	46c2      	mov	sl, r8
  406c9c:	4670      	mov	r0, lr
  406c9e:	46a8      	mov	r8, r5
  406ca0:	464d      	mov	r5, r9
  406ca2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406ca6:	e007      	b.n	406cb8 <_vfiprintf_r+0x2a4>
  406ca8:	f100 0e02 	add.w	lr, r0, #2
  406cac:	f10c 0c08 	add.w	ip, ip, #8
  406cb0:	4608      	mov	r0, r1
  406cb2:	3c10      	subs	r4, #16
  406cb4:	2c10      	cmp	r4, #16
  406cb6:	dd13      	ble.n	406ce0 <_vfiprintf_r+0x2cc>
  406cb8:	1c41      	adds	r1, r0, #1
  406cba:	3210      	adds	r2, #16
  406cbc:	2907      	cmp	r1, #7
  406cbe:	920f      	str	r2, [sp, #60]	; 0x3c
  406cc0:	f8cc 5000 	str.w	r5, [ip]
  406cc4:	f8cc 3004 	str.w	r3, [ip, #4]
  406cc8:	910e      	str	r1, [sp, #56]	; 0x38
  406cca:	dded      	ble.n	406ca8 <_vfiprintf_r+0x294>
  406ccc:	2a00      	cmp	r2, #0
  406cce:	f040 82b7 	bne.w	407240 <_vfiprintf_r+0x82c>
  406cd2:	3c10      	subs	r4, #16
  406cd4:	2c10      	cmp	r4, #16
  406cd6:	4610      	mov	r0, r2
  406cd8:	f04f 0e01 	mov.w	lr, #1
  406cdc:	46dc      	mov	ip, fp
  406cde:	dceb      	bgt.n	406cb8 <_vfiprintf_r+0x2a4>
  406ce0:	46a9      	mov	r9, r5
  406ce2:	4670      	mov	r0, lr
  406ce4:	4645      	mov	r5, r8
  406ce6:	46d0      	mov	r8, sl
  406ce8:	46e2      	mov	sl, ip
  406cea:	4422      	add	r2, r4
  406cec:	2807      	cmp	r0, #7
  406cee:	920f      	str	r2, [sp, #60]	; 0x3c
  406cf0:	f8ca 9000 	str.w	r9, [sl]
  406cf4:	f8ca 4004 	str.w	r4, [sl, #4]
  406cf8:	900e      	str	r0, [sp, #56]	; 0x38
  406cfa:	f300 8375 	bgt.w	4073e8 <_vfiprintf_r+0x9d4>
  406cfe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  406d02:	f10a 0a08 	add.w	sl, sl, #8
  406d06:	f100 0e01 	add.w	lr, r0, #1
  406d0a:	2b00      	cmp	r3, #0
  406d0c:	f040 82b0 	bne.w	407270 <_vfiprintf_r+0x85c>
  406d10:	9b07      	ldr	r3, [sp, #28]
  406d12:	2b00      	cmp	r3, #0
  406d14:	f000 82c3 	beq.w	40729e <_vfiprintf_r+0x88a>
  406d18:	3202      	adds	r2, #2
  406d1a:	a90c      	add	r1, sp, #48	; 0x30
  406d1c:	2302      	movs	r3, #2
  406d1e:	f1be 0f07 	cmp.w	lr, #7
  406d22:	920f      	str	r2, [sp, #60]	; 0x3c
  406d24:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406d28:	e88a 000a 	stmia.w	sl, {r1, r3}
  406d2c:	f340 8378 	ble.w	407420 <_vfiprintf_r+0xa0c>
  406d30:	2a00      	cmp	r2, #0
  406d32:	f040 840a 	bne.w	40754a <_vfiprintf_r+0xb36>
  406d36:	9b08      	ldr	r3, [sp, #32]
  406d38:	2b80      	cmp	r3, #128	; 0x80
  406d3a:	f04f 0e01 	mov.w	lr, #1
  406d3e:	4610      	mov	r0, r2
  406d40:	46da      	mov	sl, fp
  406d42:	f040 82b0 	bne.w	4072a6 <_vfiprintf_r+0x892>
  406d46:	9b06      	ldr	r3, [sp, #24]
  406d48:	1b5c      	subs	r4, r3, r5
  406d4a:	2c00      	cmp	r4, #0
  406d4c:	f340 82ab 	ble.w	4072a6 <_vfiprintf_r+0x892>
  406d50:	2c10      	cmp	r4, #16
  406d52:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 406f18 <_vfiprintf_r+0x504>
  406d56:	f340 850b 	ble.w	407770 <_vfiprintf_r+0xd5c>
  406d5a:	46d6      	mov	lr, sl
  406d5c:	2310      	movs	r3, #16
  406d5e:	46c2      	mov	sl, r8
  406d60:	46a8      	mov	r8, r5
  406d62:	464d      	mov	r5, r9
  406d64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406d68:	e007      	b.n	406d7a <_vfiprintf_r+0x366>
  406d6a:	f100 0c02 	add.w	ip, r0, #2
  406d6e:	f10e 0e08 	add.w	lr, lr, #8
  406d72:	4608      	mov	r0, r1
  406d74:	3c10      	subs	r4, #16
  406d76:	2c10      	cmp	r4, #16
  406d78:	dd13      	ble.n	406da2 <_vfiprintf_r+0x38e>
  406d7a:	1c41      	adds	r1, r0, #1
  406d7c:	3210      	adds	r2, #16
  406d7e:	2907      	cmp	r1, #7
  406d80:	920f      	str	r2, [sp, #60]	; 0x3c
  406d82:	f8ce 5000 	str.w	r5, [lr]
  406d86:	f8ce 3004 	str.w	r3, [lr, #4]
  406d8a:	910e      	str	r1, [sp, #56]	; 0x38
  406d8c:	dded      	ble.n	406d6a <_vfiprintf_r+0x356>
  406d8e:	2a00      	cmp	r2, #0
  406d90:	f040 8315 	bne.w	4073be <_vfiprintf_r+0x9aa>
  406d94:	3c10      	subs	r4, #16
  406d96:	2c10      	cmp	r4, #16
  406d98:	f04f 0c01 	mov.w	ip, #1
  406d9c:	4610      	mov	r0, r2
  406d9e:	46de      	mov	lr, fp
  406da0:	dceb      	bgt.n	406d7a <_vfiprintf_r+0x366>
  406da2:	46a9      	mov	r9, r5
  406da4:	4645      	mov	r5, r8
  406da6:	46d0      	mov	r8, sl
  406da8:	46f2      	mov	sl, lr
  406daa:	4422      	add	r2, r4
  406dac:	f1bc 0f07 	cmp.w	ip, #7
  406db0:	920f      	str	r2, [sp, #60]	; 0x3c
  406db2:	f8ca 9000 	str.w	r9, [sl]
  406db6:	f8ca 4004 	str.w	r4, [sl, #4]
  406dba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  406dbe:	f300 83d2 	bgt.w	407566 <_vfiprintf_r+0xb52>
  406dc2:	9b01      	ldr	r3, [sp, #4]
  406dc4:	9903      	ldr	r1, [sp, #12]
  406dc6:	1a5c      	subs	r4, r3, r1
  406dc8:	2c00      	cmp	r4, #0
  406dca:	f10a 0a08 	add.w	sl, sl, #8
  406dce:	f10c 0e01 	add.w	lr, ip, #1
  406dd2:	4660      	mov	r0, ip
  406dd4:	f300 826d 	bgt.w	4072b2 <_vfiprintf_r+0x89e>
  406dd8:	9903      	ldr	r1, [sp, #12]
  406dda:	f8ca 7000 	str.w	r7, [sl]
  406dde:	440a      	add	r2, r1
  406de0:	f1be 0f07 	cmp.w	lr, #7
  406de4:	920f      	str	r2, [sp, #60]	; 0x3c
  406de6:	f8ca 1004 	str.w	r1, [sl, #4]
  406dea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406dee:	f340 82ce 	ble.w	40738e <_vfiprintf_r+0x97a>
  406df2:	2a00      	cmp	r2, #0
  406df4:	f040 833a 	bne.w	40746c <_vfiprintf_r+0xa58>
  406df8:	0770      	lsls	r0, r6, #29
  406dfa:	920e      	str	r2, [sp, #56]	; 0x38
  406dfc:	d538      	bpl.n	406e70 <_vfiprintf_r+0x45c>
  406dfe:	9b06      	ldr	r3, [sp, #24]
  406e00:	1b5c      	subs	r4, r3, r5
  406e02:	2c00      	cmp	r4, #0
  406e04:	dd34      	ble.n	406e70 <_vfiprintf_r+0x45c>
  406e06:	46da      	mov	sl, fp
  406e08:	2c10      	cmp	r4, #16
  406e0a:	f340 84ab 	ble.w	407764 <_vfiprintf_r+0xd50>
  406e0e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 406f14 <_vfiprintf_r+0x500>
  406e12:	990e      	ldr	r1, [sp, #56]	; 0x38
  406e14:	464f      	mov	r7, r9
  406e16:	2610      	movs	r6, #16
  406e18:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406e1c:	e006      	b.n	406e2c <_vfiprintf_r+0x418>
  406e1e:	1c88      	adds	r0, r1, #2
  406e20:	f10a 0a08 	add.w	sl, sl, #8
  406e24:	4619      	mov	r1, r3
  406e26:	3c10      	subs	r4, #16
  406e28:	2c10      	cmp	r4, #16
  406e2a:	dd13      	ble.n	406e54 <_vfiprintf_r+0x440>
  406e2c:	1c4b      	adds	r3, r1, #1
  406e2e:	3210      	adds	r2, #16
  406e30:	2b07      	cmp	r3, #7
  406e32:	920f      	str	r2, [sp, #60]	; 0x3c
  406e34:	f8ca 7000 	str.w	r7, [sl]
  406e38:	f8ca 6004 	str.w	r6, [sl, #4]
  406e3c:	930e      	str	r3, [sp, #56]	; 0x38
  406e3e:	ddee      	ble.n	406e1e <_vfiprintf_r+0x40a>
  406e40:	2a00      	cmp	r2, #0
  406e42:	f040 828e 	bne.w	407362 <_vfiprintf_r+0x94e>
  406e46:	3c10      	subs	r4, #16
  406e48:	2c10      	cmp	r4, #16
  406e4a:	f04f 0001 	mov.w	r0, #1
  406e4e:	4611      	mov	r1, r2
  406e50:	46da      	mov	sl, fp
  406e52:	dceb      	bgt.n	406e2c <_vfiprintf_r+0x418>
  406e54:	46b9      	mov	r9, r7
  406e56:	4422      	add	r2, r4
  406e58:	2807      	cmp	r0, #7
  406e5a:	920f      	str	r2, [sp, #60]	; 0x3c
  406e5c:	f8ca 9000 	str.w	r9, [sl]
  406e60:	f8ca 4004 	str.w	r4, [sl, #4]
  406e64:	900e      	str	r0, [sp, #56]	; 0x38
  406e66:	f340 829b 	ble.w	4073a0 <_vfiprintf_r+0x98c>
  406e6a:	2a00      	cmp	r2, #0
  406e6c:	f040 8425 	bne.w	4076ba <_vfiprintf_r+0xca6>
  406e70:	9b02      	ldr	r3, [sp, #8]
  406e72:	9a06      	ldr	r2, [sp, #24]
  406e74:	42aa      	cmp	r2, r5
  406e76:	bfac      	ite	ge
  406e78:	189b      	addge	r3, r3, r2
  406e7a:	195b      	addlt	r3, r3, r5
  406e7c:	9302      	str	r3, [sp, #8]
  406e7e:	e299      	b.n	4073b4 <_vfiprintf_r+0x9a0>
  406e80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  406e84:	f898 3000 	ldrb.w	r3, [r8]
  406e88:	e62b      	b.n	406ae2 <_vfiprintf_r+0xce>
  406e8a:	9406      	str	r4, [sp, #24]
  406e8c:	2900      	cmp	r1, #0
  406e8e:	f040 84af 	bne.w	4077f0 <_vfiprintf_r+0xddc>
  406e92:	f046 0610 	orr.w	r6, r6, #16
  406e96:	06b3      	lsls	r3, r6, #26
  406e98:	f140 8312 	bpl.w	4074c0 <_vfiprintf_r+0xaac>
  406e9c:	9904      	ldr	r1, [sp, #16]
  406e9e:	3107      	adds	r1, #7
  406ea0:	f021 0107 	bic.w	r1, r1, #7
  406ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ea8:	3108      	adds	r1, #8
  406eaa:	9104      	str	r1, [sp, #16]
  406eac:	4614      	mov	r4, r2
  406eae:	461d      	mov	r5, r3
  406eb0:	2a00      	cmp	r2, #0
  406eb2:	f173 0300 	sbcs.w	r3, r3, #0
  406eb6:	f2c0 8386 	blt.w	4075c6 <_vfiprintf_r+0xbb2>
  406eba:	9b01      	ldr	r3, [sp, #4]
  406ebc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  406ec0:	2b00      	cmp	r3, #0
  406ec2:	f2c0 831a 	blt.w	4074fa <_vfiprintf_r+0xae6>
  406ec6:	ea54 0305 	orrs.w	r3, r4, r5
  406eca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406ece:	f000 80ed 	beq.w	4070ac <_vfiprintf_r+0x698>
  406ed2:	2d00      	cmp	r5, #0
  406ed4:	bf08      	it	eq
  406ed6:	2c0a      	cmpeq	r4, #10
  406ed8:	f0c0 80ed 	bcc.w	4070b6 <_vfiprintf_r+0x6a2>
  406edc:	465f      	mov	r7, fp
  406ede:	4620      	mov	r0, r4
  406ee0:	4629      	mov	r1, r5
  406ee2:	220a      	movs	r2, #10
  406ee4:	2300      	movs	r3, #0
  406ee6:	f002 f9ad 	bl	409244 <__aeabi_uldivmod>
  406eea:	3230      	adds	r2, #48	; 0x30
  406eec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  406ef0:	4620      	mov	r0, r4
  406ef2:	4629      	mov	r1, r5
  406ef4:	2300      	movs	r3, #0
  406ef6:	220a      	movs	r2, #10
  406ef8:	f002 f9a4 	bl	409244 <__aeabi_uldivmod>
  406efc:	4604      	mov	r4, r0
  406efe:	460d      	mov	r5, r1
  406f00:	ea54 0305 	orrs.w	r3, r4, r5
  406f04:	d1eb      	bne.n	406ede <_vfiprintf_r+0x4ca>
  406f06:	ebc7 030b 	rsb	r3, r7, fp
  406f0a:	9303      	str	r3, [sp, #12]
  406f0c:	e6a2      	b.n	406c54 <_vfiprintf_r+0x240>
  406f0e:	bf00      	nop
  406f10:	004097bc 	.word	0x004097bc
  406f14:	004097d8 	.word	0x004097d8
  406f18:	00409798 	.word	0x00409798
  406f1c:	9406      	str	r4, [sp, #24]
  406f1e:	2900      	cmp	r1, #0
  406f20:	f040 8462 	bne.w	4077e8 <_vfiprintf_r+0xdd4>
  406f24:	f046 0610 	orr.w	r6, r6, #16
  406f28:	f016 0320 	ands.w	r3, r6, #32
  406f2c:	f000 82ae 	beq.w	40748c <_vfiprintf_r+0xa78>
  406f30:	9b04      	ldr	r3, [sp, #16]
  406f32:	3307      	adds	r3, #7
  406f34:	f023 0307 	bic.w	r3, r3, #7
  406f38:	f04f 0200 	mov.w	r2, #0
  406f3c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  406f40:	e9d3 4500 	ldrd	r4, r5, [r3]
  406f44:	f103 0208 	add.w	r2, r3, #8
  406f48:	9b01      	ldr	r3, [sp, #4]
  406f4a:	9204      	str	r2, [sp, #16]
  406f4c:	2b00      	cmp	r3, #0
  406f4e:	f2c0 8174 	blt.w	40723a <_vfiprintf_r+0x826>
  406f52:	ea54 0305 	orrs.w	r3, r4, r5
  406f56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406f5a:	f040 816e 	bne.w	40723a <_vfiprintf_r+0x826>
  406f5e:	9b01      	ldr	r3, [sp, #4]
  406f60:	2b00      	cmp	r3, #0
  406f62:	f000 8430 	beq.w	4077c6 <_vfiprintf_r+0xdb2>
  406f66:	f04f 0900 	mov.w	r9, #0
  406f6a:	2400      	movs	r4, #0
  406f6c:	2500      	movs	r5, #0
  406f6e:	465f      	mov	r7, fp
  406f70:	08e2      	lsrs	r2, r4, #3
  406f72:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406f76:	08e9      	lsrs	r1, r5, #3
  406f78:	f004 0307 	and.w	r3, r4, #7
  406f7c:	460d      	mov	r5, r1
  406f7e:	4614      	mov	r4, r2
  406f80:	3330      	adds	r3, #48	; 0x30
  406f82:	ea54 0205 	orrs.w	r2, r4, r5
  406f86:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406f8a:	d1f1      	bne.n	406f70 <_vfiprintf_r+0x55c>
  406f8c:	07f4      	lsls	r4, r6, #31
  406f8e:	d5ba      	bpl.n	406f06 <_vfiprintf_r+0x4f2>
  406f90:	2b30      	cmp	r3, #48	; 0x30
  406f92:	d0b8      	beq.n	406f06 <_vfiprintf_r+0x4f2>
  406f94:	2230      	movs	r2, #48	; 0x30
  406f96:	1e7b      	subs	r3, r7, #1
  406f98:	f807 2c01 	strb.w	r2, [r7, #-1]
  406f9c:	ebc3 020b 	rsb	r2, r3, fp
  406fa0:	9203      	str	r2, [sp, #12]
  406fa2:	461f      	mov	r7, r3
  406fa4:	e656      	b.n	406c54 <_vfiprintf_r+0x240>
  406fa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406faa:	2400      	movs	r4, #0
  406fac:	f818 3b01 	ldrb.w	r3, [r8], #1
  406fb0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406fb4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  406fb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406fbc:	2a09      	cmp	r2, #9
  406fbe:	d9f5      	bls.n	406fac <_vfiprintf_r+0x598>
  406fc0:	e591      	b.n	406ae6 <_vfiprintf_r+0xd2>
  406fc2:	f898 3000 	ldrb.w	r3, [r8]
  406fc6:	2101      	movs	r1, #1
  406fc8:	202b      	movs	r0, #43	; 0x2b
  406fca:	e58a      	b.n	406ae2 <_vfiprintf_r+0xce>
  406fcc:	f898 3000 	ldrb.w	r3, [r8]
  406fd0:	2b2a      	cmp	r3, #42	; 0x2a
  406fd2:	f108 0501 	add.w	r5, r8, #1
  406fd6:	f000 83dd 	beq.w	407794 <_vfiprintf_r+0xd80>
  406fda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406fde:	2a09      	cmp	r2, #9
  406fe0:	46a8      	mov	r8, r5
  406fe2:	bf98      	it	ls
  406fe4:	2500      	movls	r5, #0
  406fe6:	f200 83ce 	bhi.w	407786 <_vfiprintf_r+0xd72>
  406fea:	f818 3b01 	ldrb.w	r3, [r8], #1
  406fee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  406ff2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  406ff6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406ffa:	2a09      	cmp	r2, #9
  406ffc:	d9f5      	bls.n	406fea <_vfiprintf_r+0x5d6>
  406ffe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  407002:	9201      	str	r2, [sp, #4]
  407004:	e56f      	b.n	406ae6 <_vfiprintf_r+0xd2>
  407006:	9a04      	ldr	r2, [sp, #16]
  407008:	6814      	ldr	r4, [r2, #0]
  40700a:	4613      	mov	r3, r2
  40700c:	2c00      	cmp	r4, #0
  40700e:	f103 0304 	add.w	r3, r3, #4
  407012:	f6ff aded 	blt.w	406bf0 <_vfiprintf_r+0x1dc>
  407016:	9304      	str	r3, [sp, #16]
  407018:	f898 3000 	ldrb.w	r3, [r8]
  40701c:	e561      	b.n	406ae2 <_vfiprintf_r+0xce>
  40701e:	9406      	str	r4, [sp, #24]
  407020:	2900      	cmp	r1, #0
  407022:	d081      	beq.n	406f28 <_vfiprintf_r+0x514>
  407024:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407028:	e77e      	b.n	406f28 <_vfiprintf_r+0x514>
  40702a:	9a04      	ldr	r2, [sp, #16]
  40702c:	9406      	str	r4, [sp, #24]
  40702e:	6817      	ldr	r7, [r2, #0]
  407030:	f04f 0300 	mov.w	r3, #0
  407034:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  407038:	1d14      	adds	r4, r2, #4
  40703a:	9b01      	ldr	r3, [sp, #4]
  40703c:	2f00      	cmp	r7, #0
  40703e:	f000 8386 	beq.w	40774e <_vfiprintf_r+0xd3a>
  407042:	2b00      	cmp	r3, #0
  407044:	f2c0 835f 	blt.w	407706 <_vfiprintf_r+0xcf2>
  407048:	461a      	mov	r2, r3
  40704a:	2100      	movs	r1, #0
  40704c:	4638      	mov	r0, r7
  40704e:	f001 fc5f 	bl	408910 <memchr>
  407052:	2800      	cmp	r0, #0
  407054:	f000 838f 	beq.w	407776 <_vfiprintf_r+0xd62>
  407058:	1bc3      	subs	r3, r0, r7
  40705a:	9303      	str	r3, [sp, #12]
  40705c:	2300      	movs	r3, #0
  40705e:	9404      	str	r4, [sp, #16]
  407060:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  407064:	9301      	str	r3, [sp, #4]
  407066:	e5f5      	b.n	406c54 <_vfiprintf_r+0x240>
  407068:	9406      	str	r4, [sp, #24]
  40706a:	2900      	cmp	r1, #0
  40706c:	f040 83b9 	bne.w	4077e2 <_vfiprintf_r+0xdce>
  407070:	f016 0920 	ands.w	r9, r6, #32
  407074:	d135      	bne.n	4070e2 <_vfiprintf_r+0x6ce>
  407076:	f016 0310 	ands.w	r3, r6, #16
  40707a:	d103      	bne.n	407084 <_vfiprintf_r+0x670>
  40707c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  407080:	f040 832a 	bne.w	4076d8 <_vfiprintf_r+0xcc4>
  407084:	9a04      	ldr	r2, [sp, #16]
  407086:	4613      	mov	r3, r2
  407088:	6814      	ldr	r4, [r2, #0]
  40708a:	9a01      	ldr	r2, [sp, #4]
  40708c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  407090:	2a00      	cmp	r2, #0
  407092:	f103 0304 	add.w	r3, r3, #4
  407096:	f04f 0500 	mov.w	r5, #0
  40709a:	f2c0 8332 	blt.w	407702 <_vfiprintf_r+0xcee>
  40709e:	ea54 0205 	orrs.w	r2, r4, r5
  4070a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4070a6:	9304      	str	r3, [sp, #16]
  4070a8:	f47f af13 	bne.w	406ed2 <_vfiprintf_r+0x4be>
  4070ac:	9b01      	ldr	r3, [sp, #4]
  4070ae:	2b00      	cmp	r3, #0
  4070b0:	f43f adcc 	beq.w	406c4c <_vfiprintf_r+0x238>
  4070b4:	2400      	movs	r4, #0
  4070b6:	af2a      	add	r7, sp, #168	; 0xa8
  4070b8:	3430      	adds	r4, #48	; 0x30
  4070ba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4070be:	ebc7 030b 	rsb	r3, r7, fp
  4070c2:	9303      	str	r3, [sp, #12]
  4070c4:	e5c6      	b.n	406c54 <_vfiprintf_r+0x240>
  4070c6:	f046 0620 	orr.w	r6, r6, #32
  4070ca:	f898 3000 	ldrb.w	r3, [r8]
  4070ce:	e508      	b.n	406ae2 <_vfiprintf_r+0xce>
  4070d0:	9406      	str	r4, [sp, #24]
  4070d2:	2900      	cmp	r1, #0
  4070d4:	f040 836e 	bne.w	4077b4 <_vfiprintf_r+0xda0>
  4070d8:	f046 0610 	orr.w	r6, r6, #16
  4070dc:	f016 0920 	ands.w	r9, r6, #32
  4070e0:	d0c9      	beq.n	407076 <_vfiprintf_r+0x662>
  4070e2:	9b04      	ldr	r3, [sp, #16]
  4070e4:	3307      	adds	r3, #7
  4070e6:	f023 0307 	bic.w	r3, r3, #7
  4070ea:	f04f 0200 	mov.w	r2, #0
  4070ee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4070f2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4070f6:	f103 0208 	add.w	r2, r3, #8
  4070fa:	9b01      	ldr	r3, [sp, #4]
  4070fc:	9204      	str	r2, [sp, #16]
  4070fe:	2b00      	cmp	r3, #0
  407100:	f2c0 81f9 	blt.w	4074f6 <_vfiprintf_r+0xae2>
  407104:	ea54 0305 	orrs.w	r3, r4, r5
  407108:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40710c:	f04f 0900 	mov.w	r9, #0
  407110:	f47f aedf 	bne.w	406ed2 <_vfiprintf_r+0x4be>
  407114:	e7ca      	b.n	4070ac <_vfiprintf_r+0x698>
  407116:	9406      	str	r4, [sp, #24]
  407118:	2900      	cmp	r1, #0
  40711a:	f040 8351 	bne.w	4077c0 <_vfiprintf_r+0xdac>
  40711e:	06b2      	lsls	r2, r6, #26
  407120:	48ae      	ldr	r0, [pc, #696]	; (4073dc <_vfiprintf_r+0x9c8>)
  407122:	d541      	bpl.n	4071a8 <_vfiprintf_r+0x794>
  407124:	9a04      	ldr	r2, [sp, #16]
  407126:	3207      	adds	r2, #7
  407128:	f022 0207 	bic.w	r2, r2, #7
  40712c:	e9d2 4500 	ldrd	r4, r5, [r2]
  407130:	f102 0108 	add.w	r1, r2, #8
  407134:	9104      	str	r1, [sp, #16]
  407136:	f016 0901 	ands.w	r9, r6, #1
  40713a:	f000 8177 	beq.w	40742c <_vfiprintf_r+0xa18>
  40713e:	ea54 0205 	orrs.w	r2, r4, r5
  407142:	f040 8226 	bne.w	407592 <_vfiprintf_r+0xb7e>
  407146:	f04f 0300 	mov.w	r3, #0
  40714a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40714e:	9b01      	ldr	r3, [sp, #4]
  407150:	2b00      	cmp	r3, #0
  407152:	f2c0 8196 	blt.w	407482 <_vfiprintf_r+0xa6e>
  407156:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40715a:	e572      	b.n	406c42 <_vfiprintf_r+0x22e>
  40715c:	9a04      	ldr	r2, [sp, #16]
  40715e:	9406      	str	r4, [sp, #24]
  407160:	6813      	ldr	r3, [r2, #0]
  407162:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  407166:	4613      	mov	r3, r2
  407168:	f04f 0100 	mov.w	r1, #0
  40716c:	2501      	movs	r5, #1
  40716e:	3304      	adds	r3, #4
  407170:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  407174:	9304      	str	r3, [sp, #16]
  407176:	9503      	str	r5, [sp, #12]
  407178:	af10      	add	r7, sp, #64	; 0x40
  40717a:	2300      	movs	r3, #0
  40717c:	9301      	str	r3, [sp, #4]
  40717e:	e573      	b.n	406c68 <_vfiprintf_r+0x254>
  407180:	f898 3000 	ldrb.w	r3, [r8]
  407184:	2800      	cmp	r0, #0
  407186:	f47f acac 	bne.w	406ae2 <_vfiprintf_r+0xce>
  40718a:	2101      	movs	r1, #1
  40718c:	2020      	movs	r0, #32
  40718e:	e4a8      	b.n	406ae2 <_vfiprintf_r+0xce>
  407190:	f046 0601 	orr.w	r6, r6, #1
  407194:	f898 3000 	ldrb.w	r3, [r8]
  407198:	e4a3      	b.n	406ae2 <_vfiprintf_r+0xce>
  40719a:	9406      	str	r4, [sp, #24]
  40719c:	2900      	cmp	r1, #0
  40719e:	f040 830c 	bne.w	4077ba <_vfiprintf_r+0xda6>
  4071a2:	06b2      	lsls	r2, r6, #26
  4071a4:	488e      	ldr	r0, [pc, #568]	; (4073e0 <_vfiprintf_r+0x9cc>)
  4071a6:	d4bd      	bmi.n	407124 <_vfiprintf_r+0x710>
  4071a8:	9904      	ldr	r1, [sp, #16]
  4071aa:	06f7      	lsls	r7, r6, #27
  4071ac:	460a      	mov	r2, r1
  4071ae:	f100 819d 	bmi.w	4074ec <_vfiprintf_r+0xad8>
  4071b2:	0675      	lsls	r5, r6, #25
  4071b4:	f140 819a 	bpl.w	4074ec <_vfiprintf_r+0xad8>
  4071b8:	3204      	adds	r2, #4
  4071ba:	880c      	ldrh	r4, [r1, #0]
  4071bc:	9204      	str	r2, [sp, #16]
  4071be:	2500      	movs	r5, #0
  4071c0:	e7b9      	b.n	407136 <_vfiprintf_r+0x722>
  4071c2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4071c6:	f898 3000 	ldrb.w	r3, [r8]
  4071ca:	e48a      	b.n	406ae2 <_vfiprintf_r+0xce>
  4071cc:	f898 3000 	ldrb.w	r3, [r8]
  4071d0:	2b6c      	cmp	r3, #108	; 0x6c
  4071d2:	bf03      	ittte	eq
  4071d4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4071d8:	f046 0620 	orreq.w	r6, r6, #32
  4071dc:	f108 0801 	addeq.w	r8, r8, #1
  4071e0:	f046 0610 	orrne.w	r6, r6, #16
  4071e4:	e47d      	b.n	406ae2 <_vfiprintf_r+0xce>
  4071e6:	2900      	cmp	r1, #0
  4071e8:	f040 8309 	bne.w	4077fe <_vfiprintf_r+0xdea>
  4071ec:	06b4      	lsls	r4, r6, #26
  4071ee:	f140 821c 	bpl.w	40762a <_vfiprintf_r+0xc16>
  4071f2:	9a04      	ldr	r2, [sp, #16]
  4071f4:	9902      	ldr	r1, [sp, #8]
  4071f6:	6813      	ldr	r3, [r2, #0]
  4071f8:	17cd      	asrs	r5, r1, #31
  4071fa:	4608      	mov	r0, r1
  4071fc:	3204      	adds	r2, #4
  4071fe:	4629      	mov	r1, r5
  407200:	9204      	str	r2, [sp, #16]
  407202:	e9c3 0100 	strd	r0, r1, [r3]
  407206:	e436      	b.n	406a76 <_vfiprintf_r+0x62>
  407208:	9406      	str	r4, [sp, #24]
  40720a:	2900      	cmp	r1, #0
  40720c:	f43f ae43 	beq.w	406e96 <_vfiprintf_r+0x482>
  407210:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407214:	e63f      	b.n	406e96 <_vfiprintf_r+0x482>
  407216:	9406      	str	r4, [sp, #24]
  407218:	2900      	cmp	r1, #0
  40721a:	f040 82ed 	bne.w	4077f8 <_vfiprintf_r+0xde4>
  40721e:	2b00      	cmp	r3, #0
  407220:	f000 808f 	beq.w	407342 <_vfiprintf_r+0x92e>
  407224:	2501      	movs	r5, #1
  407226:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40722a:	f04f 0300 	mov.w	r3, #0
  40722e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  407232:	9503      	str	r5, [sp, #12]
  407234:	af10      	add	r7, sp, #64	; 0x40
  407236:	e7a0      	b.n	40717a <_vfiprintf_r+0x766>
  407238:	9304      	str	r3, [sp, #16]
  40723a:	f04f 0900 	mov.w	r9, #0
  40723e:	e696      	b.n	406f6e <_vfiprintf_r+0x55a>
  407240:	aa0d      	add	r2, sp, #52	; 0x34
  407242:	9900      	ldr	r1, [sp, #0]
  407244:	9309      	str	r3, [sp, #36]	; 0x24
  407246:	4648      	mov	r0, r9
  407248:	f7ff fba8 	bl	40699c <__sprint_r.part.0>
  40724c:	2800      	cmp	r0, #0
  40724e:	d17f      	bne.n	407350 <_vfiprintf_r+0x93c>
  407250:	980e      	ldr	r0, [sp, #56]	; 0x38
  407252:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407254:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407256:	f100 0e01 	add.w	lr, r0, #1
  40725a:	46dc      	mov	ip, fp
  40725c:	e529      	b.n	406cb2 <_vfiprintf_r+0x29e>
  40725e:	980e      	ldr	r0, [sp, #56]	; 0x38
  407260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407262:	f100 0e01 	add.w	lr, r0, #1
  407266:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40726a:	2b00      	cmp	r3, #0
  40726c:	f43f ad50 	beq.w	406d10 <_vfiprintf_r+0x2fc>
  407270:	3201      	adds	r2, #1
  407272:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  407276:	2301      	movs	r3, #1
  407278:	f1be 0f07 	cmp.w	lr, #7
  40727c:	920f      	str	r2, [sp, #60]	; 0x3c
  40727e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  407282:	e88a 000a 	stmia.w	sl, {r1, r3}
  407286:	f340 80bf 	ble.w	407408 <_vfiprintf_r+0x9f4>
  40728a:	2a00      	cmp	r2, #0
  40728c:	f040 814e 	bne.w	40752c <_vfiprintf_r+0xb18>
  407290:	9907      	ldr	r1, [sp, #28]
  407292:	2900      	cmp	r1, #0
  407294:	f040 80be 	bne.w	407414 <_vfiprintf_r+0xa00>
  407298:	469e      	mov	lr, r3
  40729a:	4610      	mov	r0, r2
  40729c:	46da      	mov	sl, fp
  40729e:	9b08      	ldr	r3, [sp, #32]
  4072a0:	2b80      	cmp	r3, #128	; 0x80
  4072a2:	f43f ad50 	beq.w	406d46 <_vfiprintf_r+0x332>
  4072a6:	9b01      	ldr	r3, [sp, #4]
  4072a8:	9903      	ldr	r1, [sp, #12]
  4072aa:	1a5c      	subs	r4, r3, r1
  4072ac:	2c00      	cmp	r4, #0
  4072ae:	f77f ad93 	ble.w	406dd8 <_vfiprintf_r+0x3c4>
  4072b2:	2c10      	cmp	r4, #16
  4072b4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4073e4 <_vfiprintf_r+0x9d0>
  4072b8:	dd25      	ble.n	407306 <_vfiprintf_r+0x8f2>
  4072ba:	46d4      	mov	ip, sl
  4072bc:	2310      	movs	r3, #16
  4072be:	46c2      	mov	sl, r8
  4072c0:	46a8      	mov	r8, r5
  4072c2:	464d      	mov	r5, r9
  4072c4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4072c8:	e007      	b.n	4072da <_vfiprintf_r+0x8c6>
  4072ca:	f100 0e02 	add.w	lr, r0, #2
  4072ce:	f10c 0c08 	add.w	ip, ip, #8
  4072d2:	4608      	mov	r0, r1
  4072d4:	3c10      	subs	r4, #16
  4072d6:	2c10      	cmp	r4, #16
  4072d8:	dd11      	ble.n	4072fe <_vfiprintf_r+0x8ea>
  4072da:	1c41      	adds	r1, r0, #1
  4072dc:	3210      	adds	r2, #16
  4072de:	2907      	cmp	r1, #7
  4072e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4072e2:	f8cc 5000 	str.w	r5, [ip]
  4072e6:	f8cc 3004 	str.w	r3, [ip, #4]
  4072ea:	910e      	str	r1, [sp, #56]	; 0x38
  4072ec:	dded      	ble.n	4072ca <_vfiprintf_r+0x8b6>
  4072ee:	b9d2      	cbnz	r2, 407326 <_vfiprintf_r+0x912>
  4072f0:	3c10      	subs	r4, #16
  4072f2:	2c10      	cmp	r4, #16
  4072f4:	f04f 0e01 	mov.w	lr, #1
  4072f8:	4610      	mov	r0, r2
  4072fa:	46dc      	mov	ip, fp
  4072fc:	dced      	bgt.n	4072da <_vfiprintf_r+0x8c6>
  4072fe:	46a9      	mov	r9, r5
  407300:	4645      	mov	r5, r8
  407302:	46d0      	mov	r8, sl
  407304:	46e2      	mov	sl, ip
  407306:	4422      	add	r2, r4
  407308:	f1be 0f07 	cmp.w	lr, #7
  40730c:	920f      	str	r2, [sp, #60]	; 0x3c
  40730e:	f8ca 9000 	str.w	r9, [sl]
  407312:	f8ca 4004 	str.w	r4, [sl, #4]
  407316:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40731a:	dc2e      	bgt.n	40737a <_vfiprintf_r+0x966>
  40731c:	f10a 0a08 	add.w	sl, sl, #8
  407320:	f10e 0e01 	add.w	lr, lr, #1
  407324:	e558      	b.n	406dd8 <_vfiprintf_r+0x3c4>
  407326:	aa0d      	add	r2, sp, #52	; 0x34
  407328:	9900      	ldr	r1, [sp, #0]
  40732a:	9301      	str	r3, [sp, #4]
  40732c:	4648      	mov	r0, r9
  40732e:	f7ff fb35 	bl	40699c <__sprint_r.part.0>
  407332:	b968      	cbnz	r0, 407350 <_vfiprintf_r+0x93c>
  407334:	980e      	ldr	r0, [sp, #56]	; 0x38
  407336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407338:	9b01      	ldr	r3, [sp, #4]
  40733a:	f100 0e01 	add.w	lr, r0, #1
  40733e:	46dc      	mov	ip, fp
  407340:	e7c8      	b.n	4072d4 <_vfiprintf_r+0x8c0>
  407342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407344:	b123      	cbz	r3, 407350 <_vfiprintf_r+0x93c>
  407346:	9805      	ldr	r0, [sp, #20]
  407348:	9900      	ldr	r1, [sp, #0]
  40734a:	aa0d      	add	r2, sp, #52	; 0x34
  40734c:	f7ff fb26 	bl	40699c <__sprint_r.part.0>
  407350:	9b00      	ldr	r3, [sp, #0]
  407352:	899b      	ldrh	r3, [r3, #12]
  407354:	065a      	lsls	r2, r3, #25
  407356:	f100 818b 	bmi.w	407670 <_vfiprintf_r+0xc5c>
  40735a:	9802      	ldr	r0, [sp, #8]
  40735c:	b02b      	add	sp, #172	; 0xac
  40735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407362:	aa0d      	add	r2, sp, #52	; 0x34
  407364:	9900      	ldr	r1, [sp, #0]
  407366:	4648      	mov	r0, r9
  407368:	f7ff fb18 	bl	40699c <__sprint_r.part.0>
  40736c:	2800      	cmp	r0, #0
  40736e:	d1ef      	bne.n	407350 <_vfiprintf_r+0x93c>
  407370:	990e      	ldr	r1, [sp, #56]	; 0x38
  407372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407374:	1c48      	adds	r0, r1, #1
  407376:	46da      	mov	sl, fp
  407378:	e555      	b.n	406e26 <_vfiprintf_r+0x412>
  40737a:	2a00      	cmp	r2, #0
  40737c:	f040 80fb 	bne.w	407576 <_vfiprintf_r+0xb62>
  407380:	9a03      	ldr	r2, [sp, #12]
  407382:	921b      	str	r2, [sp, #108]	; 0x6c
  407384:	2301      	movs	r3, #1
  407386:	920f      	str	r2, [sp, #60]	; 0x3c
  407388:	971a      	str	r7, [sp, #104]	; 0x68
  40738a:	930e      	str	r3, [sp, #56]	; 0x38
  40738c:	46da      	mov	sl, fp
  40738e:	f10a 0a08 	add.w	sl, sl, #8
  407392:	0771      	lsls	r1, r6, #29
  407394:	d504      	bpl.n	4073a0 <_vfiprintf_r+0x98c>
  407396:	9b06      	ldr	r3, [sp, #24]
  407398:	1b5c      	subs	r4, r3, r5
  40739a:	2c00      	cmp	r4, #0
  40739c:	f73f ad34 	bgt.w	406e08 <_vfiprintf_r+0x3f4>
  4073a0:	9b02      	ldr	r3, [sp, #8]
  4073a2:	9906      	ldr	r1, [sp, #24]
  4073a4:	42a9      	cmp	r1, r5
  4073a6:	bfac      	ite	ge
  4073a8:	185b      	addge	r3, r3, r1
  4073aa:	195b      	addlt	r3, r3, r5
  4073ac:	9302      	str	r3, [sp, #8]
  4073ae:	2a00      	cmp	r2, #0
  4073b0:	f040 80b3 	bne.w	40751a <_vfiprintf_r+0xb06>
  4073b4:	2300      	movs	r3, #0
  4073b6:	930e      	str	r3, [sp, #56]	; 0x38
  4073b8:	46da      	mov	sl, fp
  4073ba:	f7ff bb5c 	b.w	406a76 <_vfiprintf_r+0x62>
  4073be:	aa0d      	add	r2, sp, #52	; 0x34
  4073c0:	9900      	ldr	r1, [sp, #0]
  4073c2:	9307      	str	r3, [sp, #28]
  4073c4:	4648      	mov	r0, r9
  4073c6:	f7ff fae9 	bl	40699c <__sprint_r.part.0>
  4073ca:	2800      	cmp	r0, #0
  4073cc:	d1c0      	bne.n	407350 <_vfiprintf_r+0x93c>
  4073ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4073d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4073d2:	9b07      	ldr	r3, [sp, #28]
  4073d4:	f100 0c01 	add.w	ip, r0, #1
  4073d8:	46de      	mov	lr, fp
  4073da:	e4cb      	b.n	406d74 <_vfiprintf_r+0x360>
  4073dc:	004097a8 	.word	0x004097a8
  4073e0:	004097bc 	.word	0x004097bc
  4073e4:	00409798 	.word	0x00409798
  4073e8:	2a00      	cmp	r2, #0
  4073ea:	f040 8133 	bne.w	407654 <_vfiprintf_r+0xc40>
  4073ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4073f2:	2b00      	cmp	r3, #0
  4073f4:	f000 80f5 	beq.w	4075e2 <_vfiprintf_r+0xbce>
  4073f8:	2301      	movs	r3, #1
  4073fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4073fe:	461a      	mov	r2, r3
  407400:	931b      	str	r3, [sp, #108]	; 0x6c
  407402:	469e      	mov	lr, r3
  407404:	911a      	str	r1, [sp, #104]	; 0x68
  407406:	46da      	mov	sl, fp
  407408:	4670      	mov	r0, lr
  40740a:	f10a 0a08 	add.w	sl, sl, #8
  40740e:	f10e 0e01 	add.w	lr, lr, #1
  407412:	e47d      	b.n	406d10 <_vfiprintf_r+0x2fc>
  407414:	a90c      	add	r1, sp, #48	; 0x30
  407416:	2202      	movs	r2, #2
  407418:	469e      	mov	lr, r3
  40741a:	911a      	str	r1, [sp, #104]	; 0x68
  40741c:	921b      	str	r2, [sp, #108]	; 0x6c
  40741e:	46da      	mov	sl, fp
  407420:	4670      	mov	r0, lr
  407422:	f10a 0a08 	add.w	sl, sl, #8
  407426:	f10e 0e01 	add.w	lr, lr, #1
  40742a:	e738      	b.n	40729e <_vfiprintf_r+0x88a>
  40742c:	9b01      	ldr	r3, [sp, #4]
  40742e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  407432:	2b00      	cmp	r3, #0
  407434:	f2c0 812a 	blt.w	40768c <_vfiprintf_r+0xc78>
  407438:	ea54 0305 	orrs.w	r3, r4, r5
  40743c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407440:	f43f abff 	beq.w	406c42 <_vfiprintf_r+0x22e>
  407444:	465f      	mov	r7, fp
  407446:	0923      	lsrs	r3, r4, #4
  407448:	f004 010f 	and.w	r1, r4, #15
  40744c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407450:	092a      	lsrs	r2, r5, #4
  407452:	461c      	mov	r4, r3
  407454:	4615      	mov	r5, r2
  407456:	5c43      	ldrb	r3, [r0, r1]
  407458:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40745c:	ea54 0305 	orrs.w	r3, r4, r5
  407460:	d1f1      	bne.n	407446 <_vfiprintf_r+0xa32>
  407462:	ebc7 030b 	rsb	r3, r7, fp
  407466:	9303      	str	r3, [sp, #12]
  407468:	f7ff bbf4 	b.w	406c54 <_vfiprintf_r+0x240>
  40746c:	aa0d      	add	r2, sp, #52	; 0x34
  40746e:	9900      	ldr	r1, [sp, #0]
  407470:	9805      	ldr	r0, [sp, #20]
  407472:	f7ff fa93 	bl	40699c <__sprint_r.part.0>
  407476:	2800      	cmp	r0, #0
  407478:	f47f af6a 	bne.w	407350 <_vfiprintf_r+0x93c>
  40747c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40747e:	46da      	mov	sl, fp
  407480:	e787      	b.n	407392 <_vfiprintf_r+0x97e>
  407482:	f04f 0900 	mov.w	r9, #0
  407486:	2400      	movs	r4, #0
  407488:	2500      	movs	r5, #0
  40748a:	e7db      	b.n	407444 <_vfiprintf_r+0xa30>
  40748c:	f016 0210 	ands.w	r2, r6, #16
  407490:	f000 80b2 	beq.w	4075f8 <_vfiprintf_r+0xbe4>
  407494:	9904      	ldr	r1, [sp, #16]
  407496:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40749a:	460a      	mov	r2, r1
  40749c:	680c      	ldr	r4, [r1, #0]
  40749e:	9901      	ldr	r1, [sp, #4]
  4074a0:	2900      	cmp	r1, #0
  4074a2:	f102 0204 	add.w	r2, r2, #4
  4074a6:	f04f 0500 	mov.w	r5, #0
  4074aa:	f2c0 8159 	blt.w	407760 <_vfiprintf_r+0xd4c>
  4074ae:	ea54 0105 	orrs.w	r1, r4, r5
  4074b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4074b6:	9204      	str	r2, [sp, #16]
  4074b8:	f43f ad51 	beq.w	406f5e <_vfiprintf_r+0x54a>
  4074bc:	4699      	mov	r9, r3
  4074be:	e556      	b.n	406f6e <_vfiprintf_r+0x55a>
  4074c0:	06f7      	lsls	r7, r6, #27
  4074c2:	d40a      	bmi.n	4074da <_vfiprintf_r+0xac6>
  4074c4:	0675      	lsls	r5, r6, #25
  4074c6:	d508      	bpl.n	4074da <_vfiprintf_r+0xac6>
  4074c8:	9904      	ldr	r1, [sp, #16]
  4074ca:	f9b1 4000 	ldrsh.w	r4, [r1]
  4074ce:	3104      	adds	r1, #4
  4074d0:	17e5      	asrs	r5, r4, #31
  4074d2:	4622      	mov	r2, r4
  4074d4:	462b      	mov	r3, r5
  4074d6:	9104      	str	r1, [sp, #16]
  4074d8:	e4ea      	b.n	406eb0 <_vfiprintf_r+0x49c>
  4074da:	9a04      	ldr	r2, [sp, #16]
  4074dc:	6814      	ldr	r4, [r2, #0]
  4074de:	4613      	mov	r3, r2
  4074e0:	3304      	adds	r3, #4
  4074e2:	17e5      	asrs	r5, r4, #31
  4074e4:	9304      	str	r3, [sp, #16]
  4074e6:	4622      	mov	r2, r4
  4074e8:	462b      	mov	r3, r5
  4074ea:	e4e1      	b.n	406eb0 <_vfiprintf_r+0x49c>
  4074ec:	6814      	ldr	r4, [r2, #0]
  4074ee:	3204      	adds	r2, #4
  4074f0:	9204      	str	r2, [sp, #16]
  4074f2:	2500      	movs	r5, #0
  4074f4:	e61f      	b.n	407136 <_vfiprintf_r+0x722>
  4074f6:	f04f 0900 	mov.w	r9, #0
  4074fa:	ea54 0305 	orrs.w	r3, r4, r5
  4074fe:	f47f ace8 	bne.w	406ed2 <_vfiprintf_r+0x4be>
  407502:	e5d8      	b.n	4070b6 <_vfiprintf_r+0x6a2>
  407504:	aa0d      	add	r2, sp, #52	; 0x34
  407506:	9900      	ldr	r1, [sp, #0]
  407508:	9805      	ldr	r0, [sp, #20]
  40750a:	f7ff fa47 	bl	40699c <__sprint_r.part.0>
  40750e:	2800      	cmp	r0, #0
  407510:	f47f af1e 	bne.w	407350 <_vfiprintf_r+0x93c>
  407514:	46da      	mov	sl, fp
  407516:	f7ff bb48 	b.w	406baa <_vfiprintf_r+0x196>
  40751a:	aa0d      	add	r2, sp, #52	; 0x34
  40751c:	9900      	ldr	r1, [sp, #0]
  40751e:	9805      	ldr	r0, [sp, #20]
  407520:	f7ff fa3c 	bl	40699c <__sprint_r.part.0>
  407524:	2800      	cmp	r0, #0
  407526:	f43f af45 	beq.w	4073b4 <_vfiprintf_r+0x9a0>
  40752a:	e711      	b.n	407350 <_vfiprintf_r+0x93c>
  40752c:	aa0d      	add	r2, sp, #52	; 0x34
  40752e:	9900      	ldr	r1, [sp, #0]
  407530:	9805      	ldr	r0, [sp, #20]
  407532:	f7ff fa33 	bl	40699c <__sprint_r.part.0>
  407536:	2800      	cmp	r0, #0
  407538:	f47f af0a 	bne.w	407350 <_vfiprintf_r+0x93c>
  40753c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40753e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407540:	f100 0e01 	add.w	lr, r0, #1
  407544:	46da      	mov	sl, fp
  407546:	f7ff bbe3 	b.w	406d10 <_vfiprintf_r+0x2fc>
  40754a:	aa0d      	add	r2, sp, #52	; 0x34
  40754c:	9900      	ldr	r1, [sp, #0]
  40754e:	9805      	ldr	r0, [sp, #20]
  407550:	f7ff fa24 	bl	40699c <__sprint_r.part.0>
  407554:	2800      	cmp	r0, #0
  407556:	f47f aefb 	bne.w	407350 <_vfiprintf_r+0x93c>
  40755a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40755c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40755e:	f100 0e01 	add.w	lr, r0, #1
  407562:	46da      	mov	sl, fp
  407564:	e69b      	b.n	40729e <_vfiprintf_r+0x88a>
  407566:	2a00      	cmp	r2, #0
  407568:	f040 80d8 	bne.w	40771c <_vfiprintf_r+0xd08>
  40756c:	f04f 0e01 	mov.w	lr, #1
  407570:	4610      	mov	r0, r2
  407572:	46da      	mov	sl, fp
  407574:	e697      	b.n	4072a6 <_vfiprintf_r+0x892>
  407576:	aa0d      	add	r2, sp, #52	; 0x34
  407578:	9900      	ldr	r1, [sp, #0]
  40757a:	9805      	ldr	r0, [sp, #20]
  40757c:	f7ff fa0e 	bl	40699c <__sprint_r.part.0>
  407580:	2800      	cmp	r0, #0
  407582:	f47f aee5 	bne.w	407350 <_vfiprintf_r+0x93c>
  407586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40758a:	f103 0e01 	add.w	lr, r3, #1
  40758e:	46da      	mov	sl, fp
  407590:	e422      	b.n	406dd8 <_vfiprintf_r+0x3c4>
  407592:	2230      	movs	r2, #48	; 0x30
  407594:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  407598:	9a01      	ldr	r2, [sp, #4]
  40759a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40759e:	2a00      	cmp	r2, #0
  4075a0:	f04f 0300 	mov.w	r3, #0
  4075a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4075a8:	f046 0302 	orr.w	r3, r6, #2
  4075ac:	f2c0 80cb 	blt.w	407746 <_vfiprintf_r+0xd32>
  4075b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4075b4:	f046 0602 	orr.w	r6, r6, #2
  4075b8:	f04f 0900 	mov.w	r9, #0
  4075bc:	e742      	b.n	407444 <_vfiprintf_r+0xa30>
  4075be:	f04f 0900 	mov.w	r9, #0
  4075c2:	4890      	ldr	r0, [pc, #576]	; (407804 <_vfiprintf_r+0xdf0>)
  4075c4:	e73e      	b.n	407444 <_vfiprintf_r+0xa30>
  4075c6:	9b01      	ldr	r3, [sp, #4]
  4075c8:	4264      	negs	r4, r4
  4075ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4075ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4075d2:	2b00      	cmp	r3, #0
  4075d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4075d8:	f6ff ac7b 	blt.w	406ed2 <_vfiprintf_r+0x4be>
  4075dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4075e0:	e477      	b.n	406ed2 <_vfiprintf_r+0x4be>
  4075e2:	9b07      	ldr	r3, [sp, #28]
  4075e4:	2b00      	cmp	r3, #0
  4075e6:	d072      	beq.n	4076ce <_vfiprintf_r+0xcba>
  4075e8:	ab0c      	add	r3, sp, #48	; 0x30
  4075ea:	2202      	movs	r2, #2
  4075ec:	931a      	str	r3, [sp, #104]	; 0x68
  4075ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4075f0:	f04f 0e01 	mov.w	lr, #1
  4075f4:	46da      	mov	sl, fp
  4075f6:	e713      	b.n	407420 <_vfiprintf_r+0xa0c>
  4075f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4075fc:	d048      	beq.n	407690 <_vfiprintf_r+0xc7c>
  4075fe:	9904      	ldr	r1, [sp, #16]
  407600:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  407604:	460b      	mov	r3, r1
  407606:	880c      	ldrh	r4, [r1, #0]
  407608:	9901      	ldr	r1, [sp, #4]
  40760a:	2900      	cmp	r1, #0
  40760c:	f103 0304 	add.w	r3, r3, #4
  407610:	f04f 0500 	mov.w	r5, #0
  407614:	f6ff ae10 	blt.w	407238 <_vfiprintf_r+0x824>
  407618:	ea54 0105 	orrs.w	r1, r4, r5
  40761c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407620:	9304      	str	r3, [sp, #16]
  407622:	f43f ac9c 	beq.w	406f5e <_vfiprintf_r+0x54a>
  407626:	4691      	mov	r9, r2
  407628:	e4a1      	b.n	406f6e <_vfiprintf_r+0x55a>
  40762a:	06f0      	lsls	r0, r6, #27
  40762c:	d40a      	bmi.n	407644 <_vfiprintf_r+0xc30>
  40762e:	0671      	lsls	r1, r6, #25
  407630:	d508      	bpl.n	407644 <_vfiprintf_r+0xc30>
  407632:	9a04      	ldr	r2, [sp, #16]
  407634:	6813      	ldr	r3, [r2, #0]
  407636:	3204      	adds	r2, #4
  407638:	9204      	str	r2, [sp, #16]
  40763a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40763e:	801a      	strh	r2, [r3, #0]
  407640:	f7ff ba19 	b.w	406a76 <_vfiprintf_r+0x62>
  407644:	9a04      	ldr	r2, [sp, #16]
  407646:	6813      	ldr	r3, [r2, #0]
  407648:	3204      	adds	r2, #4
  40764a:	9204      	str	r2, [sp, #16]
  40764c:	9a02      	ldr	r2, [sp, #8]
  40764e:	601a      	str	r2, [r3, #0]
  407650:	f7ff ba11 	b.w	406a76 <_vfiprintf_r+0x62>
  407654:	aa0d      	add	r2, sp, #52	; 0x34
  407656:	9900      	ldr	r1, [sp, #0]
  407658:	9805      	ldr	r0, [sp, #20]
  40765a:	f7ff f99f 	bl	40699c <__sprint_r.part.0>
  40765e:	2800      	cmp	r0, #0
  407660:	f47f ae76 	bne.w	407350 <_vfiprintf_r+0x93c>
  407664:	980e      	ldr	r0, [sp, #56]	; 0x38
  407666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407668:	f100 0e01 	add.w	lr, r0, #1
  40766c:	46da      	mov	sl, fp
  40766e:	e5fa      	b.n	407266 <_vfiprintf_r+0x852>
  407670:	f04f 30ff 	mov.w	r0, #4294967295
  407674:	f7ff bab6 	b.w	406be4 <_vfiprintf_r+0x1d0>
  407678:	4862      	ldr	r0, [pc, #392]	; (407804 <_vfiprintf_r+0xdf0>)
  40767a:	4616      	mov	r6, r2
  40767c:	ea54 0205 	orrs.w	r2, r4, r5
  407680:	9304      	str	r3, [sp, #16]
  407682:	f04f 0900 	mov.w	r9, #0
  407686:	f47f aedd 	bne.w	407444 <_vfiprintf_r+0xa30>
  40768a:	e6fc      	b.n	407486 <_vfiprintf_r+0xa72>
  40768c:	9b04      	ldr	r3, [sp, #16]
  40768e:	e7f5      	b.n	40767c <_vfiprintf_r+0xc68>
  407690:	9a04      	ldr	r2, [sp, #16]
  407692:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  407696:	4613      	mov	r3, r2
  407698:	6814      	ldr	r4, [r2, #0]
  40769a:	9a01      	ldr	r2, [sp, #4]
  40769c:	2a00      	cmp	r2, #0
  40769e:	f103 0304 	add.w	r3, r3, #4
  4076a2:	f04f 0500 	mov.w	r5, #0
  4076a6:	f6ff adc7 	blt.w	407238 <_vfiprintf_r+0x824>
  4076aa:	ea54 0205 	orrs.w	r2, r4, r5
  4076ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4076b2:	9304      	str	r3, [sp, #16]
  4076b4:	f47f ac5b 	bne.w	406f6e <_vfiprintf_r+0x55a>
  4076b8:	e451      	b.n	406f5e <_vfiprintf_r+0x54a>
  4076ba:	aa0d      	add	r2, sp, #52	; 0x34
  4076bc:	9900      	ldr	r1, [sp, #0]
  4076be:	9805      	ldr	r0, [sp, #20]
  4076c0:	f7ff f96c 	bl	40699c <__sprint_r.part.0>
  4076c4:	2800      	cmp	r0, #0
  4076c6:	f47f ae43 	bne.w	407350 <_vfiprintf_r+0x93c>
  4076ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4076cc:	e668      	b.n	4073a0 <_vfiprintf_r+0x98c>
  4076ce:	4610      	mov	r0, r2
  4076d0:	f04f 0e01 	mov.w	lr, #1
  4076d4:	46da      	mov	sl, fp
  4076d6:	e5e6      	b.n	4072a6 <_vfiprintf_r+0x892>
  4076d8:	9904      	ldr	r1, [sp, #16]
  4076da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4076de:	460a      	mov	r2, r1
  4076e0:	880c      	ldrh	r4, [r1, #0]
  4076e2:	9901      	ldr	r1, [sp, #4]
  4076e4:	2900      	cmp	r1, #0
  4076e6:	f102 0204 	add.w	r2, r2, #4
  4076ea:	f04f 0500 	mov.w	r5, #0
  4076ee:	db4e      	blt.n	40778e <_vfiprintf_r+0xd7a>
  4076f0:	ea54 0105 	orrs.w	r1, r4, r5
  4076f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4076f8:	9204      	str	r2, [sp, #16]
  4076fa:	4699      	mov	r9, r3
  4076fc:	f47f abe9 	bne.w	406ed2 <_vfiprintf_r+0x4be>
  407700:	e4d4      	b.n	4070ac <_vfiprintf_r+0x698>
  407702:	9304      	str	r3, [sp, #16]
  407704:	e6f9      	b.n	4074fa <_vfiprintf_r+0xae6>
  407706:	4638      	mov	r0, r7
  407708:	9404      	str	r4, [sp, #16]
  40770a:	f7ff f8d9 	bl	4068c0 <strlen>
  40770e:	2300      	movs	r3, #0
  407710:	9003      	str	r0, [sp, #12]
  407712:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  407716:	9301      	str	r3, [sp, #4]
  407718:	f7ff ba9c 	b.w	406c54 <_vfiprintf_r+0x240>
  40771c:	aa0d      	add	r2, sp, #52	; 0x34
  40771e:	9900      	ldr	r1, [sp, #0]
  407720:	9805      	ldr	r0, [sp, #20]
  407722:	f7ff f93b 	bl	40699c <__sprint_r.part.0>
  407726:	2800      	cmp	r0, #0
  407728:	f47f ae12 	bne.w	407350 <_vfiprintf_r+0x93c>
  40772c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40772e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407730:	f100 0e01 	add.w	lr, r0, #1
  407734:	46da      	mov	sl, fp
  407736:	e5b6      	b.n	4072a6 <_vfiprintf_r+0x892>
  407738:	980e      	ldr	r0, [sp, #56]	; 0x38
  40773a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40773c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40780c <_vfiprintf_r+0xdf8>
  407740:	3001      	adds	r0, #1
  407742:	f7ff bad2 	b.w	406cea <_vfiprintf_r+0x2d6>
  407746:	461e      	mov	r6, r3
  407748:	f04f 0900 	mov.w	r9, #0
  40774c:	e67a      	b.n	407444 <_vfiprintf_r+0xa30>
  40774e:	2b06      	cmp	r3, #6
  407750:	bf28      	it	cs
  407752:	2306      	movcs	r3, #6
  407754:	9303      	str	r3, [sp, #12]
  407756:	9404      	str	r4, [sp, #16]
  407758:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40775c:	4f2a      	ldr	r7, [pc, #168]	; (407808 <_vfiprintf_r+0xdf4>)
  40775e:	e50c      	b.n	40717a <_vfiprintf_r+0x766>
  407760:	9204      	str	r2, [sp, #16]
  407762:	e56a      	b.n	40723a <_vfiprintf_r+0x826>
  407764:	980e      	ldr	r0, [sp, #56]	; 0x38
  407766:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40780c <_vfiprintf_r+0xdf8>
  40776a:	3001      	adds	r0, #1
  40776c:	f7ff bb73 	b.w	406e56 <_vfiprintf_r+0x442>
  407770:	46f4      	mov	ip, lr
  407772:	f7ff bb1a 	b.w	406daa <_vfiprintf_r+0x396>
  407776:	9b01      	ldr	r3, [sp, #4]
  407778:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40777c:	9303      	str	r3, [sp, #12]
  40777e:	9404      	str	r4, [sp, #16]
  407780:	9001      	str	r0, [sp, #4]
  407782:	f7ff ba67 	b.w	406c54 <_vfiprintf_r+0x240>
  407786:	2200      	movs	r2, #0
  407788:	9201      	str	r2, [sp, #4]
  40778a:	f7ff b9ac 	b.w	406ae6 <_vfiprintf_r+0xd2>
  40778e:	9204      	str	r2, [sp, #16]
  407790:	4699      	mov	r9, r3
  407792:	e6b2      	b.n	4074fa <_vfiprintf_r+0xae6>
  407794:	9a04      	ldr	r2, [sp, #16]
  407796:	6813      	ldr	r3, [r2, #0]
  407798:	9301      	str	r3, [sp, #4]
  40779a:	3204      	adds	r2, #4
  40779c:	2b00      	cmp	r3, #0
  40779e:	9204      	str	r2, [sp, #16]
  4077a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4077a4:	46a8      	mov	r8, r5
  4077a6:	f6bf a99c 	bge.w	406ae2 <_vfiprintf_r+0xce>
  4077aa:	f04f 32ff 	mov.w	r2, #4294967295
  4077ae:	9201      	str	r2, [sp, #4]
  4077b0:	f7ff b997 	b.w	406ae2 <_vfiprintf_r+0xce>
  4077b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077b8:	e48e      	b.n	4070d8 <_vfiprintf_r+0x6c4>
  4077ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077be:	e4f0      	b.n	4071a2 <_vfiprintf_r+0x78e>
  4077c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077c4:	e4ab      	b.n	40711e <_vfiprintf_r+0x70a>
  4077c6:	4699      	mov	r9, r3
  4077c8:	07f3      	lsls	r3, r6, #31
  4077ca:	d505      	bpl.n	4077d8 <_vfiprintf_r+0xdc4>
  4077cc:	af2a      	add	r7, sp, #168	; 0xa8
  4077ce:	2330      	movs	r3, #48	; 0x30
  4077d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4077d4:	f7ff bb97 	b.w	406f06 <_vfiprintf_r+0x4f2>
  4077d8:	9b01      	ldr	r3, [sp, #4]
  4077da:	9303      	str	r3, [sp, #12]
  4077dc:	465f      	mov	r7, fp
  4077de:	f7ff ba39 	b.w	406c54 <_vfiprintf_r+0x240>
  4077e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077e6:	e443      	b.n	407070 <_vfiprintf_r+0x65c>
  4077e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077ec:	f7ff bb9a 	b.w	406f24 <_vfiprintf_r+0x510>
  4077f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077f4:	f7ff bb4d 	b.w	406e92 <_vfiprintf_r+0x47e>
  4077f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4077fc:	e50f      	b.n	40721e <_vfiprintf_r+0x80a>
  4077fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407802:	e4f3      	b.n	4071ec <_vfiprintf_r+0x7d8>
  407804:	004097bc 	.word	0x004097bc
  407808:	004097d0 	.word	0x004097d0
  40780c:	004097d8 	.word	0x004097d8

00407810 <__sbprintf>:
  407810:	b5f0      	push	{r4, r5, r6, r7, lr}
  407812:	460c      	mov	r4, r1
  407814:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  407818:	8989      	ldrh	r1, [r1, #12]
  40781a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40781c:	89e5      	ldrh	r5, [r4, #14]
  40781e:	9619      	str	r6, [sp, #100]	; 0x64
  407820:	f021 0102 	bic.w	r1, r1, #2
  407824:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407826:	f8ad 500e 	strh.w	r5, [sp, #14]
  40782a:	2500      	movs	r5, #0
  40782c:	69e7      	ldr	r7, [r4, #28]
  40782e:	f8ad 100c 	strh.w	r1, [sp, #12]
  407832:	9609      	str	r6, [sp, #36]	; 0x24
  407834:	9506      	str	r5, [sp, #24]
  407836:	ae1a      	add	r6, sp, #104	; 0x68
  407838:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40783c:	4669      	mov	r1, sp
  40783e:	9600      	str	r6, [sp, #0]
  407840:	9604      	str	r6, [sp, #16]
  407842:	9502      	str	r5, [sp, #8]
  407844:	9505      	str	r5, [sp, #20]
  407846:	9707      	str	r7, [sp, #28]
  407848:	4606      	mov	r6, r0
  40784a:	f7ff f8e3 	bl	406a14 <_vfiprintf_r>
  40784e:	1e05      	subs	r5, r0, #0
  407850:	db07      	blt.n	407862 <__sbprintf+0x52>
  407852:	4630      	mov	r0, r6
  407854:	4669      	mov	r1, sp
  407856:	f000 f929 	bl	407aac <_fflush_r>
  40785a:	2800      	cmp	r0, #0
  40785c:	bf18      	it	ne
  40785e:	f04f 35ff 	movne.w	r5, #4294967295
  407862:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407866:	065b      	lsls	r3, r3, #25
  407868:	d503      	bpl.n	407872 <__sbprintf+0x62>
  40786a:	89a3      	ldrh	r3, [r4, #12]
  40786c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407870:	81a3      	strh	r3, [r4, #12]
  407872:	4628      	mov	r0, r5
  407874:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  407878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40787a:	bf00      	nop

0040787c <__swsetup_r>:
  40787c:	b538      	push	{r3, r4, r5, lr}
  40787e:	4b30      	ldr	r3, [pc, #192]	; (407940 <__swsetup_r+0xc4>)
  407880:	681b      	ldr	r3, [r3, #0]
  407882:	4605      	mov	r5, r0
  407884:	460c      	mov	r4, r1
  407886:	b113      	cbz	r3, 40788e <__swsetup_r+0x12>
  407888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40788a:	2a00      	cmp	r2, #0
  40788c:	d038      	beq.n	407900 <__swsetup_r+0x84>
  40788e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407892:	b293      	uxth	r3, r2
  407894:	0718      	lsls	r0, r3, #28
  407896:	d50c      	bpl.n	4078b2 <__swsetup_r+0x36>
  407898:	6920      	ldr	r0, [r4, #16]
  40789a:	b1a8      	cbz	r0, 4078c8 <__swsetup_r+0x4c>
  40789c:	f013 0201 	ands.w	r2, r3, #1
  4078a0:	d01e      	beq.n	4078e0 <__swsetup_r+0x64>
  4078a2:	6963      	ldr	r3, [r4, #20]
  4078a4:	2200      	movs	r2, #0
  4078a6:	425b      	negs	r3, r3
  4078a8:	61a3      	str	r3, [r4, #24]
  4078aa:	60a2      	str	r2, [r4, #8]
  4078ac:	b1f0      	cbz	r0, 4078ec <__swsetup_r+0x70>
  4078ae:	2000      	movs	r0, #0
  4078b0:	bd38      	pop	{r3, r4, r5, pc}
  4078b2:	06d9      	lsls	r1, r3, #27
  4078b4:	d53c      	bpl.n	407930 <__swsetup_r+0xb4>
  4078b6:	0758      	lsls	r0, r3, #29
  4078b8:	d426      	bmi.n	407908 <__swsetup_r+0x8c>
  4078ba:	6920      	ldr	r0, [r4, #16]
  4078bc:	f042 0308 	orr.w	r3, r2, #8
  4078c0:	81a3      	strh	r3, [r4, #12]
  4078c2:	b29b      	uxth	r3, r3
  4078c4:	2800      	cmp	r0, #0
  4078c6:	d1e9      	bne.n	40789c <__swsetup_r+0x20>
  4078c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4078cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4078d0:	d0e4      	beq.n	40789c <__swsetup_r+0x20>
  4078d2:	4628      	mov	r0, r5
  4078d4:	4621      	mov	r1, r4
  4078d6:	f000 fd15 	bl	408304 <__smakebuf_r>
  4078da:	89a3      	ldrh	r3, [r4, #12]
  4078dc:	6920      	ldr	r0, [r4, #16]
  4078de:	e7dd      	b.n	40789c <__swsetup_r+0x20>
  4078e0:	0799      	lsls	r1, r3, #30
  4078e2:	bf58      	it	pl
  4078e4:	6962      	ldrpl	r2, [r4, #20]
  4078e6:	60a2      	str	r2, [r4, #8]
  4078e8:	2800      	cmp	r0, #0
  4078ea:	d1e0      	bne.n	4078ae <__swsetup_r+0x32>
  4078ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078f0:	061a      	lsls	r2, r3, #24
  4078f2:	d5dd      	bpl.n	4078b0 <__swsetup_r+0x34>
  4078f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4078f8:	81a3      	strh	r3, [r4, #12]
  4078fa:	f04f 30ff 	mov.w	r0, #4294967295
  4078fe:	bd38      	pop	{r3, r4, r5, pc}
  407900:	4618      	mov	r0, r3
  407902:	f000 f967 	bl	407bd4 <__sinit>
  407906:	e7c2      	b.n	40788e <__swsetup_r+0x12>
  407908:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40790a:	b151      	cbz	r1, 407922 <__swsetup_r+0xa6>
  40790c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407910:	4299      	cmp	r1, r3
  407912:	d004      	beq.n	40791e <__swsetup_r+0xa2>
  407914:	4628      	mov	r0, r5
  407916:	f000 fa27 	bl	407d68 <_free_r>
  40791a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40791e:	2300      	movs	r3, #0
  407920:	6323      	str	r3, [r4, #48]	; 0x30
  407922:	2300      	movs	r3, #0
  407924:	6920      	ldr	r0, [r4, #16]
  407926:	6063      	str	r3, [r4, #4]
  407928:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40792c:	6020      	str	r0, [r4, #0]
  40792e:	e7c5      	b.n	4078bc <__swsetup_r+0x40>
  407930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407934:	2309      	movs	r3, #9
  407936:	602b      	str	r3, [r5, #0]
  407938:	f04f 30ff 	mov.w	r0, #4294967295
  40793c:	81a2      	strh	r2, [r4, #12]
  40793e:	bd38      	pop	{r3, r4, r5, pc}
  407940:	20000468 	.word	0x20000468

00407944 <register_fini>:
  407944:	4b02      	ldr	r3, [pc, #8]	; (407950 <register_fini+0xc>)
  407946:	b113      	cbz	r3, 40794e <register_fini+0xa>
  407948:	4802      	ldr	r0, [pc, #8]	; (407954 <register_fini+0x10>)
  40794a:	f000 b805 	b.w	407958 <atexit>
  40794e:	4770      	bx	lr
  407950:	00000000 	.word	0x00000000
  407954:	00407be9 	.word	0x00407be9

00407958 <atexit>:
  407958:	2300      	movs	r3, #0
  40795a:	4601      	mov	r1, r0
  40795c:	461a      	mov	r2, r3
  40795e:	4618      	mov	r0, r3
  407960:	f001 bb78 	b.w	409054 <__register_exitproc>

00407964 <__sflush_r>:
  407964:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407968:	b29a      	uxth	r2, r3
  40796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40796e:	460d      	mov	r5, r1
  407970:	0711      	lsls	r1, r2, #28
  407972:	4680      	mov	r8, r0
  407974:	d43c      	bmi.n	4079f0 <__sflush_r+0x8c>
  407976:	686a      	ldr	r2, [r5, #4]
  407978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40797c:	2a00      	cmp	r2, #0
  40797e:	81ab      	strh	r3, [r5, #12]
  407980:	dd73      	ble.n	407a6a <__sflush_r+0x106>
  407982:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407984:	2c00      	cmp	r4, #0
  407986:	d04b      	beq.n	407a20 <__sflush_r+0xbc>
  407988:	b29b      	uxth	r3, r3
  40798a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40798e:	2100      	movs	r1, #0
  407990:	b292      	uxth	r2, r2
  407992:	f8d8 6000 	ldr.w	r6, [r8]
  407996:	f8c8 1000 	str.w	r1, [r8]
  40799a:	2a00      	cmp	r2, #0
  40799c:	d069      	beq.n	407a72 <__sflush_r+0x10e>
  40799e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4079a0:	075f      	lsls	r7, r3, #29
  4079a2:	d505      	bpl.n	4079b0 <__sflush_r+0x4c>
  4079a4:	6869      	ldr	r1, [r5, #4]
  4079a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4079a8:	1a52      	subs	r2, r2, r1
  4079aa:	b10b      	cbz	r3, 4079b0 <__sflush_r+0x4c>
  4079ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4079ae:	1ad2      	subs	r2, r2, r3
  4079b0:	2300      	movs	r3, #0
  4079b2:	69e9      	ldr	r1, [r5, #28]
  4079b4:	4640      	mov	r0, r8
  4079b6:	47a0      	blx	r4
  4079b8:	1c44      	adds	r4, r0, #1
  4079ba:	d03c      	beq.n	407a36 <__sflush_r+0xd2>
  4079bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4079c0:	692a      	ldr	r2, [r5, #16]
  4079c2:	602a      	str	r2, [r5, #0]
  4079c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4079c8:	2200      	movs	r2, #0
  4079ca:	81ab      	strh	r3, [r5, #12]
  4079cc:	04db      	lsls	r3, r3, #19
  4079ce:	606a      	str	r2, [r5, #4]
  4079d0:	d449      	bmi.n	407a66 <__sflush_r+0x102>
  4079d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4079d4:	f8c8 6000 	str.w	r6, [r8]
  4079d8:	b311      	cbz	r1, 407a20 <__sflush_r+0xbc>
  4079da:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4079de:	4299      	cmp	r1, r3
  4079e0:	d002      	beq.n	4079e8 <__sflush_r+0x84>
  4079e2:	4640      	mov	r0, r8
  4079e4:	f000 f9c0 	bl	407d68 <_free_r>
  4079e8:	2000      	movs	r0, #0
  4079ea:	6328      	str	r0, [r5, #48]	; 0x30
  4079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079f0:	692e      	ldr	r6, [r5, #16]
  4079f2:	b1ae      	cbz	r6, 407a20 <__sflush_r+0xbc>
  4079f4:	682c      	ldr	r4, [r5, #0]
  4079f6:	602e      	str	r6, [r5, #0]
  4079f8:	0790      	lsls	r0, r2, #30
  4079fa:	bf0c      	ite	eq
  4079fc:	696b      	ldreq	r3, [r5, #20]
  4079fe:	2300      	movne	r3, #0
  407a00:	1ba4      	subs	r4, r4, r6
  407a02:	60ab      	str	r3, [r5, #8]
  407a04:	e00a      	b.n	407a1c <__sflush_r+0xb8>
  407a06:	4623      	mov	r3, r4
  407a08:	4632      	mov	r2, r6
  407a0a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407a0c:	69e9      	ldr	r1, [r5, #28]
  407a0e:	4640      	mov	r0, r8
  407a10:	47b8      	blx	r7
  407a12:	2800      	cmp	r0, #0
  407a14:	eba4 0400 	sub.w	r4, r4, r0
  407a18:	4406      	add	r6, r0
  407a1a:	dd04      	ble.n	407a26 <__sflush_r+0xc2>
  407a1c:	2c00      	cmp	r4, #0
  407a1e:	dcf2      	bgt.n	407a06 <__sflush_r+0xa2>
  407a20:	2000      	movs	r0, #0
  407a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a26:	89ab      	ldrh	r3, [r5, #12]
  407a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a2c:	81ab      	strh	r3, [r5, #12]
  407a2e:	f04f 30ff 	mov.w	r0, #4294967295
  407a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a36:	f8d8 2000 	ldr.w	r2, [r8]
  407a3a:	2a1d      	cmp	r2, #29
  407a3c:	d8f3      	bhi.n	407a26 <__sflush_r+0xc2>
  407a3e:	4b1a      	ldr	r3, [pc, #104]	; (407aa8 <__sflush_r+0x144>)
  407a40:	40d3      	lsrs	r3, r2
  407a42:	f003 0301 	and.w	r3, r3, #1
  407a46:	f083 0401 	eor.w	r4, r3, #1
  407a4a:	2b00      	cmp	r3, #0
  407a4c:	d0eb      	beq.n	407a26 <__sflush_r+0xc2>
  407a4e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407a52:	6929      	ldr	r1, [r5, #16]
  407a54:	6029      	str	r1, [r5, #0]
  407a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407a5a:	04d9      	lsls	r1, r3, #19
  407a5c:	606c      	str	r4, [r5, #4]
  407a5e:	81ab      	strh	r3, [r5, #12]
  407a60:	d5b7      	bpl.n	4079d2 <__sflush_r+0x6e>
  407a62:	2a00      	cmp	r2, #0
  407a64:	d1b5      	bne.n	4079d2 <__sflush_r+0x6e>
  407a66:	6528      	str	r0, [r5, #80]	; 0x50
  407a68:	e7b3      	b.n	4079d2 <__sflush_r+0x6e>
  407a6a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407a6c:	2a00      	cmp	r2, #0
  407a6e:	dc88      	bgt.n	407982 <__sflush_r+0x1e>
  407a70:	e7d6      	b.n	407a20 <__sflush_r+0xbc>
  407a72:	2301      	movs	r3, #1
  407a74:	69e9      	ldr	r1, [r5, #28]
  407a76:	4640      	mov	r0, r8
  407a78:	47a0      	blx	r4
  407a7a:	1c43      	adds	r3, r0, #1
  407a7c:	4602      	mov	r2, r0
  407a7e:	d002      	beq.n	407a86 <__sflush_r+0x122>
  407a80:	89ab      	ldrh	r3, [r5, #12]
  407a82:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407a84:	e78c      	b.n	4079a0 <__sflush_r+0x3c>
  407a86:	f8d8 3000 	ldr.w	r3, [r8]
  407a8a:	2b00      	cmp	r3, #0
  407a8c:	d0f8      	beq.n	407a80 <__sflush_r+0x11c>
  407a8e:	2b1d      	cmp	r3, #29
  407a90:	d001      	beq.n	407a96 <__sflush_r+0x132>
  407a92:	2b16      	cmp	r3, #22
  407a94:	d102      	bne.n	407a9c <__sflush_r+0x138>
  407a96:	f8c8 6000 	str.w	r6, [r8]
  407a9a:	e7c1      	b.n	407a20 <__sflush_r+0xbc>
  407a9c:	89ab      	ldrh	r3, [r5, #12]
  407a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407aa2:	81ab      	strh	r3, [r5, #12]
  407aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407aa8:	20400001 	.word	0x20400001

00407aac <_fflush_r>:
  407aac:	b510      	push	{r4, lr}
  407aae:	4604      	mov	r4, r0
  407ab0:	b082      	sub	sp, #8
  407ab2:	b108      	cbz	r0, 407ab8 <_fflush_r+0xc>
  407ab4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407ab6:	b153      	cbz	r3, 407ace <_fflush_r+0x22>
  407ab8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  407abc:	b908      	cbnz	r0, 407ac2 <_fflush_r+0x16>
  407abe:	b002      	add	sp, #8
  407ac0:	bd10      	pop	{r4, pc}
  407ac2:	4620      	mov	r0, r4
  407ac4:	b002      	add	sp, #8
  407ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407aca:	f7ff bf4b 	b.w	407964 <__sflush_r>
  407ace:	9101      	str	r1, [sp, #4]
  407ad0:	f000 f880 	bl	407bd4 <__sinit>
  407ad4:	9901      	ldr	r1, [sp, #4]
  407ad6:	e7ef      	b.n	407ab8 <_fflush_r+0xc>

00407ad8 <_cleanup_r>:
  407ad8:	4901      	ldr	r1, [pc, #4]	; (407ae0 <_cleanup_r+0x8>)
  407ada:	f000 bbaf 	b.w	40823c <_fwalk_reent>
  407ade:	bf00      	nop
  407ae0:	0040911d 	.word	0x0040911d

00407ae4 <__sinit.part.1>:
  407ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ae8:	4b35      	ldr	r3, [pc, #212]	; (407bc0 <__sinit.part.1+0xdc>)
  407aea:	6845      	ldr	r5, [r0, #4]
  407aec:	63c3      	str	r3, [r0, #60]	; 0x3c
  407aee:	2400      	movs	r4, #0
  407af0:	4607      	mov	r7, r0
  407af2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  407af6:	2304      	movs	r3, #4
  407af8:	2103      	movs	r1, #3
  407afa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  407afe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  407b02:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  407b06:	b083      	sub	sp, #12
  407b08:	602c      	str	r4, [r5, #0]
  407b0a:	606c      	str	r4, [r5, #4]
  407b0c:	60ac      	str	r4, [r5, #8]
  407b0e:	666c      	str	r4, [r5, #100]	; 0x64
  407b10:	81ec      	strh	r4, [r5, #14]
  407b12:	612c      	str	r4, [r5, #16]
  407b14:	616c      	str	r4, [r5, #20]
  407b16:	61ac      	str	r4, [r5, #24]
  407b18:	81ab      	strh	r3, [r5, #12]
  407b1a:	4621      	mov	r1, r4
  407b1c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407b20:	2208      	movs	r2, #8
  407b22:	f7fe fd01 	bl	406528 <memset>
  407b26:	68be      	ldr	r6, [r7, #8]
  407b28:	f8df b098 	ldr.w	fp, [pc, #152]	; 407bc4 <__sinit.part.1+0xe0>
  407b2c:	f8df a098 	ldr.w	sl, [pc, #152]	; 407bc8 <__sinit.part.1+0xe4>
  407b30:	f8df 9098 	ldr.w	r9, [pc, #152]	; 407bcc <__sinit.part.1+0xe8>
  407b34:	f8df 8098 	ldr.w	r8, [pc, #152]	; 407bd0 <__sinit.part.1+0xec>
  407b38:	f8c5 b020 	str.w	fp, [r5, #32]
  407b3c:	2301      	movs	r3, #1
  407b3e:	2209      	movs	r2, #9
  407b40:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  407b44:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407b48:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407b4c:	61ed      	str	r5, [r5, #28]
  407b4e:	4621      	mov	r1, r4
  407b50:	81f3      	strh	r3, [r6, #14]
  407b52:	81b2      	strh	r2, [r6, #12]
  407b54:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  407b58:	6034      	str	r4, [r6, #0]
  407b5a:	6074      	str	r4, [r6, #4]
  407b5c:	60b4      	str	r4, [r6, #8]
  407b5e:	6674      	str	r4, [r6, #100]	; 0x64
  407b60:	6134      	str	r4, [r6, #16]
  407b62:	6174      	str	r4, [r6, #20]
  407b64:	61b4      	str	r4, [r6, #24]
  407b66:	2208      	movs	r2, #8
  407b68:	9301      	str	r3, [sp, #4]
  407b6a:	f7fe fcdd 	bl	406528 <memset>
  407b6e:	68fd      	ldr	r5, [r7, #12]
  407b70:	61f6      	str	r6, [r6, #28]
  407b72:	2012      	movs	r0, #18
  407b74:	2202      	movs	r2, #2
  407b76:	f8c6 b020 	str.w	fp, [r6, #32]
  407b7a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  407b7e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  407b82:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  407b86:	4621      	mov	r1, r4
  407b88:	81a8      	strh	r0, [r5, #12]
  407b8a:	81ea      	strh	r2, [r5, #14]
  407b8c:	602c      	str	r4, [r5, #0]
  407b8e:	606c      	str	r4, [r5, #4]
  407b90:	60ac      	str	r4, [r5, #8]
  407b92:	666c      	str	r4, [r5, #100]	; 0x64
  407b94:	612c      	str	r4, [r5, #16]
  407b96:	616c      	str	r4, [r5, #20]
  407b98:	61ac      	str	r4, [r5, #24]
  407b9a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407b9e:	2208      	movs	r2, #8
  407ba0:	f7fe fcc2 	bl	406528 <memset>
  407ba4:	9b01      	ldr	r3, [sp, #4]
  407ba6:	61ed      	str	r5, [r5, #28]
  407ba8:	f8c5 b020 	str.w	fp, [r5, #32]
  407bac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  407bb0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407bb4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  407bba:	b003      	add	sp, #12
  407bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bc0:	00407ad9 	.word	0x00407ad9
  407bc4:	00408e85 	.word	0x00408e85
  407bc8:	00408ea9 	.word	0x00408ea9
  407bcc:	00408ee5 	.word	0x00408ee5
  407bd0:	00408f05 	.word	0x00408f05

00407bd4 <__sinit>:
  407bd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407bd6:	b103      	cbz	r3, 407bda <__sinit+0x6>
  407bd8:	4770      	bx	lr
  407bda:	f7ff bf83 	b.w	407ae4 <__sinit.part.1>
  407bde:	bf00      	nop

00407be0 <__sfp_lock_acquire>:
  407be0:	4770      	bx	lr
  407be2:	bf00      	nop

00407be4 <__sfp_lock_release>:
  407be4:	4770      	bx	lr
  407be6:	bf00      	nop

00407be8 <__libc_fini_array>:
  407be8:	b538      	push	{r3, r4, r5, lr}
  407bea:	4d07      	ldr	r5, [pc, #28]	; (407c08 <__libc_fini_array+0x20>)
  407bec:	4c07      	ldr	r4, [pc, #28]	; (407c0c <__libc_fini_array+0x24>)
  407bee:	1b2c      	subs	r4, r5, r4
  407bf0:	10a4      	asrs	r4, r4, #2
  407bf2:	d005      	beq.n	407c00 <__libc_fini_array+0x18>
  407bf4:	3c01      	subs	r4, #1
  407bf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407bfa:	4798      	blx	r3
  407bfc:	2c00      	cmp	r4, #0
  407bfe:	d1f9      	bne.n	407bf4 <__libc_fini_array+0xc>
  407c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407c04:	f001 bdfa 	b.w	4097fc <_fini>
  407c08:	0040980c 	.word	0x0040980c
  407c0c:	00409808 	.word	0x00409808

00407c10 <__fputwc>:
  407c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407c14:	b082      	sub	sp, #8
  407c16:	4680      	mov	r8, r0
  407c18:	4689      	mov	r9, r1
  407c1a:	4614      	mov	r4, r2
  407c1c:	f000 fb3c 	bl	408298 <__locale_mb_cur_max>
  407c20:	2801      	cmp	r0, #1
  407c22:	d033      	beq.n	407c8c <__fputwc+0x7c>
  407c24:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407c28:	464a      	mov	r2, r9
  407c2a:	a901      	add	r1, sp, #4
  407c2c:	4640      	mov	r0, r8
  407c2e:	f001 f9c3 	bl	408fb8 <_wcrtomb_r>
  407c32:	f1b0 3fff 	cmp.w	r0, #4294967295
  407c36:	4682      	mov	sl, r0
  407c38:	d021      	beq.n	407c7e <__fputwc+0x6e>
  407c3a:	b388      	cbz	r0, 407ca0 <__fputwc+0x90>
  407c3c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  407c40:	2500      	movs	r5, #0
  407c42:	e008      	b.n	407c56 <__fputwc+0x46>
  407c44:	6823      	ldr	r3, [r4, #0]
  407c46:	1c5a      	adds	r2, r3, #1
  407c48:	6022      	str	r2, [r4, #0]
  407c4a:	701e      	strb	r6, [r3, #0]
  407c4c:	3501      	adds	r5, #1
  407c4e:	4555      	cmp	r5, sl
  407c50:	d226      	bcs.n	407ca0 <__fputwc+0x90>
  407c52:	ab01      	add	r3, sp, #4
  407c54:	5d5e      	ldrb	r6, [r3, r5]
  407c56:	68a3      	ldr	r3, [r4, #8]
  407c58:	3b01      	subs	r3, #1
  407c5a:	2b00      	cmp	r3, #0
  407c5c:	60a3      	str	r3, [r4, #8]
  407c5e:	daf1      	bge.n	407c44 <__fputwc+0x34>
  407c60:	69a7      	ldr	r7, [r4, #24]
  407c62:	42bb      	cmp	r3, r7
  407c64:	4631      	mov	r1, r6
  407c66:	4622      	mov	r2, r4
  407c68:	4640      	mov	r0, r8
  407c6a:	db01      	blt.n	407c70 <__fputwc+0x60>
  407c6c:	2e0a      	cmp	r6, #10
  407c6e:	d1e9      	bne.n	407c44 <__fputwc+0x34>
  407c70:	f001 f94c 	bl	408f0c <__swbuf_r>
  407c74:	1c43      	adds	r3, r0, #1
  407c76:	d1e9      	bne.n	407c4c <__fputwc+0x3c>
  407c78:	b002      	add	sp, #8
  407c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c7e:	89a3      	ldrh	r3, [r4, #12]
  407c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c84:	81a3      	strh	r3, [r4, #12]
  407c86:	b002      	add	sp, #8
  407c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c8c:	f109 33ff 	add.w	r3, r9, #4294967295
  407c90:	2bfe      	cmp	r3, #254	; 0xfe
  407c92:	d8c7      	bhi.n	407c24 <__fputwc+0x14>
  407c94:	fa5f f689 	uxtb.w	r6, r9
  407c98:	4682      	mov	sl, r0
  407c9a:	f88d 6004 	strb.w	r6, [sp, #4]
  407c9e:	e7cf      	b.n	407c40 <__fputwc+0x30>
  407ca0:	4648      	mov	r0, r9
  407ca2:	b002      	add	sp, #8
  407ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00407ca8 <_fputwc_r>:
  407ca8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407cac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  407cb0:	d10a      	bne.n	407cc8 <_fputwc_r+0x20>
  407cb2:	b410      	push	{r4}
  407cb4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  407cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407cba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  407cbe:	6654      	str	r4, [r2, #100]	; 0x64
  407cc0:	8193      	strh	r3, [r2, #12]
  407cc2:	bc10      	pop	{r4}
  407cc4:	f7ff bfa4 	b.w	407c10 <__fputwc>
  407cc8:	f7ff bfa2 	b.w	407c10 <__fputwc>

00407ccc <_malloc_trim_r>:
  407ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cce:	4f23      	ldr	r7, [pc, #140]	; (407d5c <_malloc_trim_r+0x90>)
  407cd0:	460c      	mov	r4, r1
  407cd2:	4606      	mov	r6, r0
  407cd4:	f000 fed0 	bl	408a78 <__malloc_lock>
  407cd8:	68bb      	ldr	r3, [r7, #8]
  407cda:	685d      	ldr	r5, [r3, #4]
  407cdc:	f025 0503 	bic.w	r5, r5, #3
  407ce0:	1b29      	subs	r1, r5, r4
  407ce2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  407ce6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407cea:	f021 010f 	bic.w	r1, r1, #15
  407cee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407cf2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407cf6:	db07      	blt.n	407d08 <_malloc_trim_r+0x3c>
  407cf8:	2100      	movs	r1, #0
  407cfa:	4630      	mov	r0, r6
  407cfc:	f001 f8b0 	bl	408e60 <_sbrk_r>
  407d00:	68bb      	ldr	r3, [r7, #8]
  407d02:	442b      	add	r3, r5
  407d04:	4298      	cmp	r0, r3
  407d06:	d004      	beq.n	407d12 <_malloc_trim_r+0x46>
  407d08:	4630      	mov	r0, r6
  407d0a:	f000 feb7 	bl	408a7c <__malloc_unlock>
  407d0e:	2000      	movs	r0, #0
  407d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d12:	4261      	negs	r1, r4
  407d14:	4630      	mov	r0, r6
  407d16:	f001 f8a3 	bl	408e60 <_sbrk_r>
  407d1a:	3001      	adds	r0, #1
  407d1c:	d00d      	beq.n	407d3a <_malloc_trim_r+0x6e>
  407d1e:	4b10      	ldr	r3, [pc, #64]	; (407d60 <_malloc_trim_r+0x94>)
  407d20:	68ba      	ldr	r2, [r7, #8]
  407d22:	6819      	ldr	r1, [r3, #0]
  407d24:	1b2d      	subs	r5, r5, r4
  407d26:	f045 0501 	orr.w	r5, r5, #1
  407d2a:	4630      	mov	r0, r6
  407d2c:	1b09      	subs	r1, r1, r4
  407d2e:	6055      	str	r5, [r2, #4]
  407d30:	6019      	str	r1, [r3, #0]
  407d32:	f000 fea3 	bl	408a7c <__malloc_unlock>
  407d36:	2001      	movs	r0, #1
  407d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d3a:	2100      	movs	r1, #0
  407d3c:	4630      	mov	r0, r6
  407d3e:	f001 f88f 	bl	408e60 <_sbrk_r>
  407d42:	68ba      	ldr	r2, [r7, #8]
  407d44:	1a83      	subs	r3, r0, r2
  407d46:	2b0f      	cmp	r3, #15
  407d48:	ddde      	ble.n	407d08 <_malloc_trim_r+0x3c>
  407d4a:	4c06      	ldr	r4, [pc, #24]	; (407d64 <_malloc_trim_r+0x98>)
  407d4c:	4904      	ldr	r1, [pc, #16]	; (407d60 <_malloc_trim_r+0x94>)
  407d4e:	6824      	ldr	r4, [r4, #0]
  407d50:	f043 0301 	orr.w	r3, r3, #1
  407d54:	1b00      	subs	r0, r0, r4
  407d56:	6053      	str	r3, [r2, #4]
  407d58:	6008      	str	r0, [r1, #0]
  407d5a:	e7d5      	b.n	407d08 <_malloc_trim_r+0x3c>
  407d5c:	20000490 	.word	0x20000490
  407d60:	20003700 	.word	0x20003700
  407d64:	2000089c 	.word	0x2000089c

00407d68 <_free_r>:
  407d68:	2900      	cmp	r1, #0
  407d6a:	d045      	beq.n	407df8 <_free_r+0x90>
  407d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d70:	460d      	mov	r5, r1
  407d72:	4680      	mov	r8, r0
  407d74:	f000 fe80 	bl	408a78 <__malloc_lock>
  407d78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407d7c:	496a      	ldr	r1, [pc, #424]	; (407f28 <_free_r+0x1c0>)
  407d7e:	f027 0301 	bic.w	r3, r7, #1
  407d82:	f1a5 0408 	sub.w	r4, r5, #8
  407d86:	18e2      	adds	r2, r4, r3
  407d88:	688e      	ldr	r6, [r1, #8]
  407d8a:	6850      	ldr	r0, [r2, #4]
  407d8c:	42b2      	cmp	r2, r6
  407d8e:	f020 0003 	bic.w	r0, r0, #3
  407d92:	d062      	beq.n	407e5a <_free_r+0xf2>
  407d94:	07fe      	lsls	r6, r7, #31
  407d96:	6050      	str	r0, [r2, #4]
  407d98:	d40b      	bmi.n	407db2 <_free_r+0x4a>
  407d9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407d9e:	1be4      	subs	r4, r4, r7
  407da0:	f101 0e08 	add.w	lr, r1, #8
  407da4:	68a5      	ldr	r5, [r4, #8]
  407da6:	4575      	cmp	r5, lr
  407da8:	443b      	add	r3, r7
  407daa:	d06f      	beq.n	407e8c <_free_r+0x124>
  407dac:	68e7      	ldr	r7, [r4, #12]
  407dae:	60ef      	str	r7, [r5, #12]
  407db0:	60bd      	str	r5, [r7, #8]
  407db2:	1815      	adds	r5, r2, r0
  407db4:	686d      	ldr	r5, [r5, #4]
  407db6:	07ed      	lsls	r5, r5, #31
  407db8:	d542      	bpl.n	407e40 <_free_r+0xd8>
  407dba:	f043 0201 	orr.w	r2, r3, #1
  407dbe:	6062      	str	r2, [r4, #4]
  407dc0:	50e3      	str	r3, [r4, r3]
  407dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407dc6:	d218      	bcs.n	407dfa <_free_r+0x92>
  407dc8:	08db      	lsrs	r3, r3, #3
  407dca:	1c5a      	adds	r2, r3, #1
  407dcc:	684d      	ldr	r5, [r1, #4]
  407dce:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  407dd2:	60a7      	str	r7, [r4, #8]
  407dd4:	2001      	movs	r0, #1
  407dd6:	109b      	asrs	r3, r3, #2
  407dd8:	fa00 f303 	lsl.w	r3, r0, r3
  407ddc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  407de0:	431d      	orrs	r5, r3
  407de2:	3808      	subs	r0, #8
  407de4:	60e0      	str	r0, [r4, #12]
  407de6:	604d      	str	r5, [r1, #4]
  407de8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  407dec:	60fc      	str	r4, [r7, #12]
  407dee:	4640      	mov	r0, r8
  407df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407df4:	f000 be42 	b.w	408a7c <__malloc_unlock>
  407df8:	4770      	bx	lr
  407dfa:	0a5a      	lsrs	r2, r3, #9
  407dfc:	2a04      	cmp	r2, #4
  407dfe:	d853      	bhi.n	407ea8 <_free_r+0x140>
  407e00:	099a      	lsrs	r2, r3, #6
  407e02:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407e06:	007f      	lsls	r7, r7, #1
  407e08:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407e0c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  407e10:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  407e14:	4944      	ldr	r1, [pc, #272]	; (407f28 <_free_r+0x1c0>)
  407e16:	3808      	subs	r0, #8
  407e18:	4290      	cmp	r0, r2
  407e1a:	d04d      	beq.n	407eb8 <_free_r+0x150>
  407e1c:	6851      	ldr	r1, [r2, #4]
  407e1e:	f021 0103 	bic.w	r1, r1, #3
  407e22:	428b      	cmp	r3, r1
  407e24:	d202      	bcs.n	407e2c <_free_r+0xc4>
  407e26:	6892      	ldr	r2, [r2, #8]
  407e28:	4290      	cmp	r0, r2
  407e2a:	d1f7      	bne.n	407e1c <_free_r+0xb4>
  407e2c:	68d0      	ldr	r0, [r2, #12]
  407e2e:	60e0      	str	r0, [r4, #12]
  407e30:	60a2      	str	r2, [r4, #8]
  407e32:	6084      	str	r4, [r0, #8]
  407e34:	60d4      	str	r4, [r2, #12]
  407e36:	4640      	mov	r0, r8
  407e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407e3c:	f000 be1e 	b.w	408a7c <__malloc_unlock>
  407e40:	6895      	ldr	r5, [r2, #8]
  407e42:	4f3a      	ldr	r7, [pc, #232]	; (407f2c <_free_r+0x1c4>)
  407e44:	42bd      	cmp	r5, r7
  407e46:	4403      	add	r3, r0
  407e48:	d03f      	beq.n	407eca <_free_r+0x162>
  407e4a:	68d0      	ldr	r0, [r2, #12]
  407e4c:	60e8      	str	r0, [r5, #12]
  407e4e:	f043 0201 	orr.w	r2, r3, #1
  407e52:	6085      	str	r5, [r0, #8]
  407e54:	6062      	str	r2, [r4, #4]
  407e56:	50e3      	str	r3, [r4, r3]
  407e58:	e7b3      	b.n	407dc2 <_free_r+0x5a>
  407e5a:	07ff      	lsls	r7, r7, #31
  407e5c:	4403      	add	r3, r0
  407e5e:	d407      	bmi.n	407e70 <_free_r+0x108>
  407e60:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407e64:	1aa4      	subs	r4, r4, r2
  407e66:	4413      	add	r3, r2
  407e68:	68a0      	ldr	r0, [r4, #8]
  407e6a:	68e2      	ldr	r2, [r4, #12]
  407e6c:	60c2      	str	r2, [r0, #12]
  407e6e:	6090      	str	r0, [r2, #8]
  407e70:	4a2f      	ldr	r2, [pc, #188]	; (407f30 <_free_r+0x1c8>)
  407e72:	6812      	ldr	r2, [r2, #0]
  407e74:	f043 0001 	orr.w	r0, r3, #1
  407e78:	4293      	cmp	r3, r2
  407e7a:	6060      	str	r0, [r4, #4]
  407e7c:	608c      	str	r4, [r1, #8]
  407e7e:	d3b6      	bcc.n	407dee <_free_r+0x86>
  407e80:	4b2c      	ldr	r3, [pc, #176]	; (407f34 <_free_r+0x1cc>)
  407e82:	4640      	mov	r0, r8
  407e84:	6819      	ldr	r1, [r3, #0]
  407e86:	f7ff ff21 	bl	407ccc <_malloc_trim_r>
  407e8a:	e7b0      	b.n	407dee <_free_r+0x86>
  407e8c:	1811      	adds	r1, r2, r0
  407e8e:	6849      	ldr	r1, [r1, #4]
  407e90:	07c9      	lsls	r1, r1, #31
  407e92:	d444      	bmi.n	407f1e <_free_r+0x1b6>
  407e94:	6891      	ldr	r1, [r2, #8]
  407e96:	68d2      	ldr	r2, [r2, #12]
  407e98:	60ca      	str	r2, [r1, #12]
  407e9a:	4403      	add	r3, r0
  407e9c:	f043 0001 	orr.w	r0, r3, #1
  407ea0:	6091      	str	r1, [r2, #8]
  407ea2:	6060      	str	r0, [r4, #4]
  407ea4:	50e3      	str	r3, [r4, r3]
  407ea6:	e7a2      	b.n	407dee <_free_r+0x86>
  407ea8:	2a14      	cmp	r2, #20
  407eaa:	d817      	bhi.n	407edc <_free_r+0x174>
  407eac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407eb0:	007f      	lsls	r7, r7, #1
  407eb2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407eb6:	e7a9      	b.n	407e0c <_free_r+0xa4>
  407eb8:	10aa      	asrs	r2, r5, #2
  407eba:	684b      	ldr	r3, [r1, #4]
  407ebc:	2501      	movs	r5, #1
  407ebe:	fa05 f202 	lsl.w	r2, r5, r2
  407ec2:	4313      	orrs	r3, r2
  407ec4:	604b      	str	r3, [r1, #4]
  407ec6:	4602      	mov	r2, r0
  407ec8:	e7b1      	b.n	407e2e <_free_r+0xc6>
  407eca:	f043 0201 	orr.w	r2, r3, #1
  407ece:	614c      	str	r4, [r1, #20]
  407ed0:	610c      	str	r4, [r1, #16]
  407ed2:	60e5      	str	r5, [r4, #12]
  407ed4:	60a5      	str	r5, [r4, #8]
  407ed6:	6062      	str	r2, [r4, #4]
  407ed8:	50e3      	str	r3, [r4, r3]
  407eda:	e788      	b.n	407dee <_free_r+0x86>
  407edc:	2a54      	cmp	r2, #84	; 0x54
  407ede:	d806      	bhi.n	407eee <_free_r+0x186>
  407ee0:	0b1a      	lsrs	r2, r3, #12
  407ee2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407ee6:	007f      	lsls	r7, r7, #1
  407ee8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407eec:	e78e      	b.n	407e0c <_free_r+0xa4>
  407eee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407ef2:	d806      	bhi.n	407f02 <_free_r+0x19a>
  407ef4:	0bda      	lsrs	r2, r3, #15
  407ef6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407efa:	007f      	lsls	r7, r7, #1
  407efc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407f00:	e784      	b.n	407e0c <_free_r+0xa4>
  407f02:	f240 5054 	movw	r0, #1364	; 0x554
  407f06:	4282      	cmp	r2, r0
  407f08:	d806      	bhi.n	407f18 <_free_r+0x1b0>
  407f0a:	0c9a      	lsrs	r2, r3, #18
  407f0c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407f10:	007f      	lsls	r7, r7, #1
  407f12:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407f16:	e779      	b.n	407e0c <_free_r+0xa4>
  407f18:	27fe      	movs	r7, #254	; 0xfe
  407f1a:	257e      	movs	r5, #126	; 0x7e
  407f1c:	e776      	b.n	407e0c <_free_r+0xa4>
  407f1e:	f043 0201 	orr.w	r2, r3, #1
  407f22:	6062      	str	r2, [r4, #4]
  407f24:	50e3      	str	r3, [r4, r3]
  407f26:	e762      	b.n	407dee <_free_r+0x86>
  407f28:	20000490 	.word	0x20000490
  407f2c:	20000498 	.word	0x20000498
  407f30:	20000898 	.word	0x20000898
  407f34:	200036fc 	.word	0x200036fc

00407f38 <__sfvwrite_r>:
  407f38:	6893      	ldr	r3, [r2, #8]
  407f3a:	2b00      	cmp	r3, #0
  407f3c:	d076      	beq.n	40802c <__sfvwrite_r+0xf4>
  407f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f42:	898b      	ldrh	r3, [r1, #12]
  407f44:	b085      	sub	sp, #20
  407f46:	460c      	mov	r4, r1
  407f48:	0719      	lsls	r1, r3, #28
  407f4a:	9001      	str	r0, [sp, #4]
  407f4c:	4616      	mov	r6, r2
  407f4e:	d529      	bpl.n	407fa4 <__sfvwrite_r+0x6c>
  407f50:	6922      	ldr	r2, [r4, #16]
  407f52:	b33a      	cbz	r2, 407fa4 <__sfvwrite_r+0x6c>
  407f54:	f003 0802 	and.w	r8, r3, #2
  407f58:	fa1f f088 	uxth.w	r0, r8
  407f5c:	6835      	ldr	r5, [r6, #0]
  407f5e:	2800      	cmp	r0, #0
  407f60:	d02f      	beq.n	407fc2 <__sfvwrite_r+0x8a>
  407f62:	f04f 0900 	mov.w	r9, #0
  407f66:	4fb4      	ldr	r7, [pc, #720]	; (408238 <__sfvwrite_r+0x300>)
  407f68:	46c8      	mov	r8, r9
  407f6a:	46b2      	mov	sl, r6
  407f6c:	45b8      	cmp	r8, r7
  407f6e:	4643      	mov	r3, r8
  407f70:	464a      	mov	r2, r9
  407f72:	bf28      	it	cs
  407f74:	463b      	movcs	r3, r7
  407f76:	9801      	ldr	r0, [sp, #4]
  407f78:	f1b8 0f00 	cmp.w	r8, #0
  407f7c:	d050      	beq.n	408020 <__sfvwrite_r+0xe8>
  407f7e:	69e1      	ldr	r1, [r4, #28]
  407f80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407f82:	47b0      	blx	r6
  407f84:	2800      	cmp	r0, #0
  407f86:	dd71      	ble.n	40806c <__sfvwrite_r+0x134>
  407f88:	f8da 3008 	ldr.w	r3, [sl, #8]
  407f8c:	1a1b      	subs	r3, r3, r0
  407f8e:	4481      	add	r9, r0
  407f90:	ebc0 0808 	rsb	r8, r0, r8
  407f94:	f8ca 3008 	str.w	r3, [sl, #8]
  407f98:	2b00      	cmp	r3, #0
  407f9a:	d1e7      	bne.n	407f6c <__sfvwrite_r+0x34>
  407f9c:	2000      	movs	r0, #0
  407f9e:	b005      	add	sp, #20
  407fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fa4:	4621      	mov	r1, r4
  407fa6:	9801      	ldr	r0, [sp, #4]
  407fa8:	f7ff fc68 	bl	40787c <__swsetup_r>
  407fac:	2800      	cmp	r0, #0
  407fae:	f040 813a 	bne.w	408226 <__sfvwrite_r+0x2ee>
  407fb2:	89a3      	ldrh	r3, [r4, #12]
  407fb4:	6835      	ldr	r5, [r6, #0]
  407fb6:	f003 0802 	and.w	r8, r3, #2
  407fba:	fa1f f088 	uxth.w	r0, r8
  407fbe:	2800      	cmp	r0, #0
  407fc0:	d1cf      	bne.n	407f62 <__sfvwrite_r+0x2a>
  407fc2:	f013 0901 	ands.w	r9, r3, #1
  407fc6:	d15b      	bne.n	408080 <__sfvwrite_r+0x148>
  407fc8:	464f      	mov	r7, r9
  407fca:	9602      	str	r6, [sp, #8]
  407fcc:	b31f      	cbz	r7, 408016 <__sfvwrite_r+0xde>
  407fce:	059a      	lsls	r2, r3, #22
  407fd0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407fd4:	d52c      	bpl.n	408030 <__sfvwrite_r+0xf8>
  407fd6:	4547      	cmp	r7, r8
  407fd8:	46c2      	mov	sl, r8
  407fda:	f0c0 80a4 	bcc.w	408126 <__sfvwrite_r+0x1ee>
  407fde:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407fe2:	f040 80b1 	bne.w	408148 <__sfvwrite_r+0x210>
  407fe6:	6820      	ldr	r0, [r4, #0]
  407fe8:	4652      	mov	r2, sl
  407fea:	4649      	mov	r1, r9
  407fec:	f000 fce0 	bl	4089b0 <memmove>
  407ff0:	68a0      	ldr	r0, [r4, #8]
  407ff2:	6823      	ldr	r3, [r4, #0]
  407ff4:	ebc8 0000 	rsb	r0, r8, r0
  407ff8:	4453      	add	r3, sl
  407ffa:	60a0      	str	r0, [r4, #8]
  407ffc:	6023      	str	r3, [r4, #0]
  407ffe:	4638      	mov	r0, r7
  408000:	9a02      	ldr	r2, [sp, #8]
  408002:	6893      	ldr	r3, [r2, #8]
  408004:	1a1b      	subs	r3, r3, r0
  408006:	4481      	add	r9, r0
  408008:	1a3f      	subs	r7, r7, r0
  40800a:	6093      	str	r3, [r2, #8]
  40800c:	2b00      	cmp	r3, #0
  40800e:	d0c5      	beq.n	407f9c <__sfvwrite_r+0x64>
  408010:	89a3      	ldrh	r3, [r4, #12]
  408012:	2f00      	cmp	r7, #0
  408014:	d1db      	bne.n	407fce <__sfvwrite_r+0x96>
  408016:	f8d5 9000 	ldr.w	r9, [r5]
  40801a:	686f      	ldr	r7, [r5, #4]
  40801c:	3508      	adds	r5, #8
  40801e:	e7d5      	b.n	407fcc <__sfvwrite_r+0x94>
  408020:	f8d5 9000 	ldr.w	r9, [r5]
  408024:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408028:	3508      	adds	r5, #8
  40802a:	e79f      	b.n	407f6c <__sfvwrite_r+0x34>
  40802c:	2000      	movs	r0, #0
  40802e:	4770      	bx	lr
  408030:	6820      	ldr	r0, [r4, #0]
  408032:	6923      	ldr	r3, [r4, #16]
  408034:	4298      	cmp	r0, r3
  408036:	d803      	bhi.n	408040 <__sfvwrite_r+0x108>
  408038:	6961      	ldr	r1, [r4, #20]
  40803a:	428f      	cmp	r7, r1
  40803c:	f080 80b7 	bcs.w	4081ae <__sfvwrite_r+0x276>
  408040:	45b8      	cmp	r8, r7
  408042:	bf28      	it	cs
  408044:	46b8      	movcs	r8, r7
  408046:	4642      	mov	r2, r8
  408048:	4649      	mov	r1, r9
  40804a:	f000 fcb1 	bl	4089b0 <memmove>
  40804e:	68a3      	ldr	r3, [r4, #8]
  408050:	6822      	ldr	r2, [r4, #0]
  408052:	ebc8 0303 	rsb	r3, r8, r3
  408056:	4442      	add	r2, r8
  408058:	60a3      	str	r3, [r4, #8]
  40805a:	6022      	str	r2, [r4, #0]
  40805c:	2b00      	cmp	r3, #0
  40805e:	d149      	bne.n	4080f4 <__sfvwrite_r+0x1bc>
  408060:	4621      	mov	r1, r4
  408062:	9801      	ldr	r0, [sp, #4]
  408064:	f7ff fd22 	bl	407aac <_fflush_r>
  408068:	2800      	cmp	r0, #0
  40806a:	d043      	beq.n	4080f4 <__sfvwrite_r+0x1bc>
  40806c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408074:	f04f 30ff 	mov.w	r0, #4294967295
  408078:	81a3      	strh	r3, [r4, #12]
  40807a:	b005      	add	sp, #20
  40807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408080:	4680      	mov	r8, r0
  408082:	9002      	str	r0, [sp, #8]
  408084:	4682      	mov	sl, r0
  408086:	4681      	mov	r9, r0
  408088:	f1b9 0f00 	cmp.w	r9, #0
  40808c:	d02a      	beq.n	4080e4 <__sfvwrite_r+0x1ac>
  40808e:	9b02      	ldr	r3, [sp, #8]
  408090:	2b00      	cmp	r3, #0
  408092:	d04c      	beq.n	40812e <__sfvwrite_r+0x1f6>
  408094:	6820      	ldr	r0, [r4, #0]
  408096:	6923      	ldr	r3, [r4, #16]
  408098:	6962      	ldr	r2, [r4, #20]
  40809a:	45c8      	cmp	r8, r9
  40809c:	46c3      	mov	fp, r8
  40809e:	bf28      	it	cs
  4080a0:	46cb      	movcs	fp, r9
  4080a2:	4298      	cmp	r0, r3
  4080a4:	465f      	mov	r7, fp
  4080a6:	d904      	bls.n	4080b2 <__sfvwrite_r+0x17a>
  4080a8:	68a3      	ldr	r3, [r4, #8]
  4080aa:	4413      	add	r3, r2
  4080ac:	459b      	cmp	fp, r3
  4080ae:	f300 8090 	bgt.w	4081d2 <__sfvwrite_r+0x29a>
  4080b2:	4593      	cmp	fp, r2
  4080b4:	db20      	blt.n	4080f8 <__sfvwrite_r+0x1c0>
  4080b6:	4613      	mov	r3, r2
  4080b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4080ba:	69e1      	ldr	r1, [r4, #28]
  4080bc:	9801      	ldr	r0, [sp, #4]
  4080be:	4652      	mov	r2, sl
  4080c0:	47b8      	blx	r7
  4080c2:	1e07      	subs	r7, r0, #0
  4080c4:	ddd2      	ble.n	40806c <__sfvwrite_r+0x134>
  4080c6:	ebb8 0807 	subs.w	r8, r8, r7
  4080ca:	d023      	beq.n	408114 <__sfvwrite_r+0x1dc>
  4080cc:	68b3      	ldr	r3, [r6, #8]
  4080ce:	1bdb      	subs	r3, r3, r7
  4080d0:	44ba      	add	sl, r7
  4080d2:	ebc7 0909 	rsb	r9, r7, r9
  4080d6:	60b3      	str	r3, [r6, #8]
  4080d8:	2b00      	cmp	r3, #0
  4080da:	f43f af5f 	beq.w	407f9c <__sfvwrite_r+0x64>
  4080de:	f1b9 0f00 	cmp.w	r9, #0
  4080e2:	d1d4      	bne.n	40808e <__sfvwrite_r+0x156>
  4080e4:	2300      	movs	r3, #0
  4080e6:	f8d5 a000 	ldr.w	sl, [r5]
  4080ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4080ee:	9302      	str	r3, [sp, #8]
  4080f0:	3508      	adds	r5, #8
  4080f2:	e7c9      	b.n	408088 <__sfvwrite_r+0x150>
  4080f4:	4640      	mov	r0, r8
  4080f6:	e783      	b.n	408000 <__sfvwrite_r+0xc8>
  4080f8:	465a      	mov	r2, fp
  4080fa:	4651      	mov	r1, sl
  4080fc:	f000 fc58 	bl	4089b0 <memmove>
  408100:	68a2      	ldr	r2, [r4, #8]
  408102:	6823      	ldr	r3, [r4, #0]
  408104:	ebcb 0202 	rsb	r2, fp, r2
  408108:	445b      	add	r3, fp
  40810a:	ebb8 0807 	subs.w	r8, r8, r7
  40810e:	60a2      	str	r2, [r4, #8]
  408110:	6023      	str	r3, [r4, #0]
  408112:	d1db      	bne.n	4080cc <__sfvwrite_r+0x194>
  408114:	4621      	mov	r1, r4
  408116:	9801      	ldr	r0, [sp, #4]
  408118:	f7ff fcc8 	bl	407aac <_fflush_r>
  40811c:	2800      	cmp	r0, #0
  40811e:	d1a5      	bne.n	40806c <__sfvwrite_r+0x134>
  408120:	f8cd 8008 	str.w	r8, [sp, #8]
  408124:	e7d2      	b.n	4080cc <__sfvwrite_r+0x194>
  408126:	6820      	ldr	r0, [r4, #0]
  408128:	46b8      	mov	r8, r7
  40812a:	46ba      	mov	sl, r7
  40812c:	e75c      	b.n	407fe8 <__sfvwrite_r+0xb0>
  40812e:	464a      	mov	r2, r9
  408130:	210a      	movs	r1, #10
  408132:	4650      	mov	r0, sl
  408134:	f000 fbec 	bl	408910 <memchr>
  408138:	2800      	cmp	r0, #0
  40813a:	d06f      	beq.n	40821c <__sfvwrite_r+0x2e4>
  40813c:	3001      	adds	r0, #1
  40813e:	2301      	movs	r3, #1
  408140:	ebca 0800 	rsb	r8, sl, r0
  408144:	9302      	str	r3, [sp, #8]
  408146:	e7a5      	b.n	408094 <__sfvwrite_r+0x15c>
  408148:	6962      	ldr	r2, [r4, #20]
  40814a:	6820      	ldr	r0, [r4, #0]
  40814c:	6921      	ldr	r1, [r4, #16]
  40814e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408152:	ebc1 0a00 	rsb	sl, r1, r0
  408156:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40815a:	f10a 0001 	add.w	r0, sl, #1
  40815e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408162:	4438      	add	r0, r7
  408164:	4540      	cmp	r0, r8
  408166:	4642      	mov	r2, r8
  408168:	bf84      	itt	hi
  40816a:	4680      	movhi	r8, r0
  40816c:	4642      	movhi	r2, r8
  40816e:	055b      	lsls	r3, r3, #21
  408170:	d542      	bpl.n	4081f8 <__sfvwrite_r+0x2c0>
  408172:	4611      	mov	r1, r2
  408174:	9801      	ldr	r0, [sp, #4]
  408176:	f000 f911 	bl	40839c <_malloc_r>
  40817a:	4683      	mov	fp, r0
  40817c:	2800      	cmp	r0, #0
  40817e:	d055      	beq.n	40822c <__sfvwrite_r+0x2f4>
  408180:	4652      	mov	r2, sl
  408182:	6921      	ldr	r1, [r4, #16]
  408184:	f7fe f936 	bl	4063f4 <memcpy>
  408188:	89a3      	ldrh	r3, [r4, #12]
  40818a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408192:	81a3      	strh	r3, [r4, #12]
  408194:	ebca 0308 	rsb	r3, sl, r8
  408198:	eb0b 000a 	add.w	r0, fp, sl
  40819c:	f8c4 8014 	str.w	r8, [r4, #20]
  4081a0:	f8c4 b010 	str.w	fp, [r4, #16]
  4081a4:	6020      	str	r0, [r4, #0]
  4081a6:	60a3      	str	r3, [r4, #8]
  4081a8:	46b8      	mov	r8, r7
  4081aa:	46ba      	mov	sl, r7
  4081ac:	e71c      	b.n	407fe8 <__sfvwrite_r+0xb0>
  4081ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4081b2:	42bb      	cmp	r3, r7
  4081b4:	bf28      	it	cs
  4081b6:	463b      	movcs	r3, r7
  4081b8:	464a      	mov	r2, r9
  4081ba:	fb93 f3f1 	sdiv	r3, r3, r1
  4081be:	9801      	ldr	r0, [sp, #4]
  4081c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4081c2:	fb01 f303 	mul.w	r3, r1, r3
  4081c6:	69e1      	ldr	r1, [r4, #28]
  4081c8:	47b0      	blx	r6
  4081ca:	2800      	cmp	r0, #0
  4081cc:	f73f af18 	bgt.w	408000 <__sfvwrite_r+0xc8>
  4081d0:	e74c      	b.n	40806c <__sfvwrite_r+0x134>
  4081d2:	461a      	mov	r2, r3
  4081d4:	4651      	mov	r1, sl
  4081d6:	9303      	str	r3, [sp, #12]
  4081d8:	f000 fbea 	bl	4089b0 <memmove>
  4081dc:	6822      	ldr	r2, [r4, #0]
  4081de:	9b03      	ldr	r3, [sp, #12]
  4081e0:	9801      	ldr	r0, [sp, #4]
  4081e2:	441a      	add	r2, r3
  4081e4:	6022      	str	r2, [r4, #0]
  4081e6:	4621      	mov	r1, r4
  4081e8:	f7ff fc60 	bl	407aac <_fflush_r>
  4081ec:	9b03      	ldr	r3, [sp, #12]
  4081ee:	2800      	cmp	r0, #0
  4081f0:	f47f af3c 	bne.w	40806c <__sfvwrite_r+0x134>
  4081f4:	461f      	mov	r7, r3
  4081f6:	e766      	b.n	4080c6 <__sfvwrite_r+0x18e>
  4081f8:	9801      	ldr	r0, [sp, #4]
  4081fa:	f000 fc41 	bl	408a80 <_realloc_r>
  4081fe:	4683      	mov	fp, r0
  408200:	2800      	cmp	r0, #0
  408202:	d1c7      	bne.n	408194 <__sfvwrite_r+0x25c>
  408204:	9d01      	ldr	r5, [sp, #4]
  408206:	6921      	ldr	r1, [r4, #16]
  408208:	4628      	mov	r0, r5
  40820a:	f7ff fdad 	bl	407d68 <_free_r>
  40820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408212:	220c      	movs	r2, #12
  408214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408218:	602a      	str	r2, [r5, #0]
  40821a:	e729      	b.n	408070 <__sfvwrite_r+0x138>
  40821c:	2301      	movs	r3, #1
  40821e:	f109 0801 	add.w	r8, r9, #1
  408222:	9302      	str	r3, [sp, #8]
  408224:	e736      	b.n	408094 <__sfvwrite_r+0x15c>
  408226:	f04f 30ff 	mov.w	r0, #4294967295
  40822a:	e6b8      	b.n	407f9e <__sfvwrite_r+0x66>
  40822c:	9a01      	ldr	r2, [sp, #4]
  40822e:	230c      	movs	r3, #12
  408230:	6013      	str	r3, [r2, #0]
  408232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408236:	e71b      	b.n	408070 <__sfvwrite_r+0x138>
  408238:	7ffffc00 	.word	0x7ffffc00

0040823c <_fwalk_reent>:
  40823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408240:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408244:	d01f      	beq.n	408286 <_fwalk_reent+0x4a>
  408246:	4688      	mov	r8, r1
  408248:	4606      	mov	r6, r0
  40824a:	f04f 0900 	mov.w	r9, #0
  40824e:	687d      	ldr	r5, [r7, #4]
  408250:	68bc      	ldr	r4, [r7, #8]
  408252:	3d01      	subs	r5, #1
  408254:	d411      	bmi.n	40827a <_fwalk_reent+0x3e>
  408256:	89a3      	ldrh	r3, [r4, #12]
  408258:	2b01      	cmp	r3, #1
  40825a:	f105 35ff 	add.w	r5, r5, #4294967295
  40825e:	d908      	bls.n	408272 <_fwalk_reent+0x36>
  408260:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408264:	3301      	adds	r3, #1
  408266:	4621      	mov	r1, r4
  408268:	4630      	mov	r0, r6
  40826a:	d002      	beq.n	408272 <_fwalk_reent+0x36>
  40826c:	47c0      	blx	r8
  40826e:	ea49 0900 	orr.w	r9, r9, r0
  408272:	1c6b      	adds	r3, r5, #1
  408274:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408278:	d1ed      	bne.n	408256 <_fwalk_reent+0x1a>
  40827a:	683f      	ldr	r7, [r7, #0]
  40827c:	2f00      	cmp	r7, #0
  40827e:	d1e6      	bne.n	40824e <_fwalk_reent+0x12>
  408280:	4648      	mov	r0, r9
  408282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408286:	46b9      	mov	r9, r7
  408288:	4648      	mov	r0, r9
  40828a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40828e:	bf00      	nop

00408290 <__locale_charset>:
  408290:	4800      	ldr	r0, [pc, #0]	; (408294 <__locale_charset+0x4>)
  408292:	4770      	bx	lr
  408294:	2000046c 	.word	0x2000046c

00408298 <__locale_mb_cur_max>:
  408298:	4b01      	ldr	r3, [pc, #4]	; (4082a0 <__locale_mb_cur_max+0x8>)
  40829a:	6818      	ldr	r0, [r3, #0]
  40829c:	4770      	bx	lr
  40829e:	bf00      	nop
  4082a0:	2000048c 	.word	0x2000048c

004082a4 <__swhatbuf_r>:
  4082a4:	b570      	push	{r4, r5, r6, lr}
  4082a6:	460d      	mov	r5, r1
  4082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4082ac:	2900      	cmp	r1, #0
  4082ae:	b090      	sub	sp, #64	; 0x40
  4082b0:	4614      	mov	r4, r2
  4082b2:	461e      	mov	r6, r3
  4082b4:	db14      	blt.n	4082e0 <__swhatbuf_r+0x3c>
  4082b6:	aa01      	add	r2, sp, #4
  4082b8:	f000 ff72 	bl	4091a0 <_fstat_r>
  4082bc:	2800      	cmp	r0, #0
  4082be:	db0f      	blt.n	4082e0 <__swhatbuf_r+0x3c>
  4082c0:	9a02      	ldr	r2, [sp, #8]
  4082c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4082c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4082ca:	fab2 f282 	clz	r2, r2
  4082ce:	0952      	lsrs	r2, r2, #5
  4082d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4082d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4082d8:	6032      	str	r2, [r6, #0]
  4082da:	6023      	str	r3, [r4, #0]
  4082dc:	b010      	add	sp, #64	; 0x40
  4082de:	bd70      	pop	{r4, r5, r6, pc}
  4082e0:	89a8      	ldrh	r0, [r5, #12]
  4082e2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4082e6:	b282      	uxth	r2, r0
  4082e8:	2000      	movs	r0, #0
  4082ea:	6030      	str	r0, [r6, #0]
  4082ec:	b11a      	cbz	r2, 4082f6 <__swhatbuf_r+0x52>
  4082ee:	2340      	movs	r3, #64	; 0x40
  4082f0:	6023      	str	r3, [r4, #0]
  4082f2:	b010      	add	sp, #64	; 0x40
  4082f4:	bd70      	pop	{r4, r5, r6, pc}
  4082f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4082fa:	4610      	mov	r0, r2
  4082fc:	6023      	str	r3, [r4, #0]
  4082fe:	b010      	add	sp, #64	; 0x40
  408300:	bd70      	pop	{r4, r5, r6, pc}
  408302:	bf00      	nop

00408304 <__smakebuf_r>:
  408304:	898a      	ldrh	r2, [r1, #12]
  408306:	0792      	lsls	r2, r2, #30
  408308:	460b      	mov	r3, r1
  40830a:	d506      	bpl.n	40831a <__smakebuf_r+0x16>
  40830c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408310:	2101      	movs	r1, #1
  408312:	601a      	str	r2, [r3, #0]
  408314:	611a      	str	r2, [r3, #16]
  408316:	6159      	str	r1, [r3, #20]
  408318:	4770      	bx	lr
  40831a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40831c:	b083      	sub	sp, #12
  40831e:	ab01      	add	r3, sp, #4
  408320:	466a      	mov	r2, sp
  408322:	460c      	mov	r4, r1
  408324:	4605      	mov	r5, r0
  408326:	f7ff ffbd 	bl	4082a4 <__swhatbuf_r>
  40832a:	9900      	ldr	r1, [sp, #0]
  40832c:	4606      	mov	r6, r0
  40832e:	4628      	mov	r0, r5
  408330:	f000 f834 	bl	40839c <_malloc_r>
  408334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408338:	b1d0      	cbz	r0, 408370 <__smakebuf_r+0x6c>
  40833a:	9a01      	ldr	r2, [sp, #4]
  40833c:	4f12      	ldr	r7, [pc, #72]	; (408388 <__smakebuf_r+0x84>)
  40833e:	9900      	ldr	r1, [sp, #0]
  408340:	63ef      	str	r7, [r5, #60]	; 0x3c
  408342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408346:	81a3      	strh	r3, [r4, #12]
  408348:	6020      	str	r0, [r4, #0]
  40834a:	6120      	str	r0, [r4, #16]
  40834c:	6161      	str	r1, [r4, #20]
  40834e:	b91a      	cbnz	r2, 408358 <__smakebuf_r+0x54>
  408350:	4333      	orrs	r3, r6
  408352:	81a3      	strh	r3, [r4, #12]
  408354:	b003      	add	sp, #12
  408356:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408358:	4628      	mov	r0, r5
  40835a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40835e:	f000 ff33 	bl	4091c8 <_isatty_r>
  408362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408366:	2800      	cmp	r0, #0
  408368:	d0f2      	beq.n	408350 <__smakebuf_r+0x4c>
  40836a:	f043 0301 	orr.w	r3, r3, #1
  40836e:	e7ef      	b.n	408350 <__smakebuf_r+0x4c>
  408370:	059a      	lsls	r2, r3, #22
  408372:	d4ef      	bmi.n	408354 <__smakebuf_r+0x50>
  408374:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408378:	f043 0302 	orr.w	r3, r3, #2
  40837c:	2101      	movs	r1, #1
  40837e:	81a3      	strh	r3, [r4, #12]
  408380:	6022      	str	r2, [r4, #0]
  408382:	6122      	str	r2, [r4, #16]
  408384:	6161      	str	r1, [r4, #20]
  408386:	e7e5      	b.n	408354 <__smakebuf_r+0x50>
  408388:	00407ad9 	.word	0x00407ad9

0040838c <malloc>:
  40838c:	4b02      	ldr	r3, [pc, #8]	; (408398 <malloc+0xc>)
  40838e:	4601      	mov	r1, r0
  408390:	6818      	ldr	r0, [r3, #0]
  408392:	f000 b803 	b.w	40839c <_malloc_r>
  408396:	bf00      	nop
  408398:	20000468 	.word	0x20000468

0040839c <_malloc_r>:
  40839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083a0:	f101 050b 	add.w	r5, r1, #11
  4083a4:	2d16      	cmp	r5, #22
  4083a6:	b083      	sub	sp, #12
  4083a8:	4606      	mov	r6, r0
  4083aa:	f240 809f 	bls.w	4084ec <_malloc_r+0x150>
  4083ae:	f035 0507 	bics.w	r5, r5, #7
  4083b2:	f100 80bf 	bmi.w	408534 <_malloc_r+0x198>
  4083b6:	42a9      	cmp	r1, r5
  4083b8:	f200 80bc 	bhi.w	408534 <_malloc_r+0x198>
  4083bc:	f000 fb5c 	bl	408a78 <__malloc_lock>
  4083c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4083c4:	f0c0 829c 	bcc.w	408900 <_malloc_r+0x564>
  4083c8:	0a6b      	lsrs	r3, r5, #9
  4083ca:	f000 80ba 	beq.w	408542 <_malloc_r+0x1a6>
  4083ce:	2b04      	cmp	r3, #4
  4083d0:	f200 8183 	bhi.w	4086da <_malloc_r+0x33e>
  4083d4:	09a8      	lsrs	r0, r5, #6
  4083d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4083da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4083de:	3038      	adds	r0, #56	; 0x38
  4083e0:	4fc4      	ldr	r7, [pc, #784]	; (4086f4 <_malloc_r+0x358>)
  4083e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4083e6:	f1a3 0108 	sub.w	r1, r3, #8
  4083ea:	685c      	ldr	r4, [r3, #4]
  4083ec:	42a1      	cmp	r1, r4
  4083ee:	d107      	bne.n	408400 <_malloc_r+0x64>
  4083f0:	e0ac      	b.n	40854c <_malloc_r+0x1b0>
  4083f2:	2a00      	cmp	r2, #0
  4083f4:	f280 80ac 	bge.w	408550 <_malloc_r+0x1b4>
  4083f8:	68e4      	ldr	r4, [r4, #12]
  4083fa:	42a1      	cmp	r1, r4
  4083fc:	f000 80a6 	beq.w	40854c <_malloc_r+0x1b0>
  408400:	6863      	ldr	r3, [r4, #4]
  408402:	f023 0303 	bic.w	r3, r3, #3
  408406:	1b5a      	subs	r2, r3, r5
  408408:	2a0f      	cmp	r2, #15
  40840a:	ddf2      	ble.n	4083f2 <_malloc_r+0x56>
  40840c:	49b9      	ldr	r1, [pc, #740]	; (4086f4 <_malloc_r+0x358>)
  40840e:	693c      	ldr	r4, [r7, #16]
  408410:	f101 0e08 	add.w	lr, r1, #8
  408414:	4574      	cmp	r4, lr
  408416:	f000 81b3 	beq.w	408780 <_malloc_r+0x3e4>
  40841a:	6863      	ldr	r3, [r4, #4]
  40841c:	f023 0303 	bic.w	r3, r3, #3
  408420:	1b5a      	subs	r2, r3, r5
  408422:	2a0f      	cmp	r2, #15
  408424:	f300 8199 	bgt.w	40875a <_malloc_r+0x3be>
  408428:	2a00      	cmp	r2, #0
  40842a:	f8c1 e014 	str.w	lr, [r1, #20]
  40842e:	f8c1 e010 	str.w	lr, [r1, #16]
  408432:	f280 809e 	bge.w	408572 <_malloc_r+0x1d6>
  408436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40843a:	f080 8167 	bcs.w	40870c <_malloc_r+0x370>
  40843e:	08db      	lsrs	r3, r3, #3
  408440:	f103 0c01 	add.w	ip, r3, #1
  408444:	2201      	movs	r2, #1
  408446:	109b      	asrs	r3, r3, #2
  408448:	fa02 f303 	lsl.w	r3, r2, r3
  40844c:	684a      	ldr	r2, [r1, #4]
  40844e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  408452:	f8c4 8008 	str.w	r8, [r4, #8]
  408456:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40845a:	431a      	orrs	r2, r3
  40845c:	f1a9 0308 	sub.w	r3, r9, #8
  408460:	60e3      	str	r3, [r4, #12]
  408462:	604a      	str	r2, [r1, #4]
  408464:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  408468:	f8c8 400c 	str.w	r4, [r8, #12]
  40846c:	1083      	asrs	r3, r0, #2
  40846e:	2401      	movs	r4, #1
  408470:	409c      	lsls	r4, r3
  408472:	4294      	cmp	r4, r2
  408474:	f200 808a 	bhi.w	40858c <_malloc_r+0x1f0>
  408478:	4214      	tst	r4, r2
  40847a:	d106      	bne.n	40848a <_malloc_r+0xee>
  40847c:	f020 0003 	bic.w	r0, r0, #3
  408480:	0064      	lsls	r4, r4, #1
  408482:	4214      	tst	r4, r2
  408484:	f100 0004 	add.w	r0, r0, #4
  408488:	d0fa      	beq.n	408480 <_malloc_r+0xe4>
  40848a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40848e:	46cc      	mov	ip, r9
  408490:	4680      	mov	r8, r0
  408492:	f8dc 100c 	ldr.w	r1, [ip, #12]
  408496:	458c      	cmp	ip, r1
  408498:	d107      	bne.n	4084aa <_malloc_r+0x10e>
  40849a:	e173      	b.n	408784 <_malloc_r+0x3e8>
  40849c:	2a00      	cmp	r2, #0
  40849e:	f280 8181 	bge.w	4087a4 <_malloc_r+0x408>
  4084a2:	68c9      	ldr	r1, [r1, #12]
  4084a4:	458c      	cmp	ip, r1
  4084a6:	f000 816d 	beq.w	408784 <_malloc_r+0x3e8>
  4084aa:	684b      	ldr	r3, [r1, #4]
  4084ac:	f023 0303 	bic.w	r3, r3, #3
  4084b0:	1b5a      	subs	r2, r3, r5
  4084b2:	2a0f      	cmp	r2, #15
  4084b4:	ddf2      	ble.n	40849c <_malloc_r+0x100>
  4084b6:	460c      	mov	r4, r1
  4084b8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4084bc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4084c0:	194b      	adds	r3, r1, r5
  4084c2:	f045 0501 	orr.w	r5, r5, #1
  4084c6:	604d      	str	r5, [r1, #4]
  4084c8:	f042 0101 	orr.w	r1, r2, #1
  4084cc:	f8c8 c00c 	str.w	ip, [r8, #12]
  4084d0:	4630      	mov	r0, r6
  4084d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4084d6:	617b      	str	r3, [r7, #20]
  4084d8:	613b      	str	r3, [r7, #16]
  4084da:	f8c3 e00c 	str.w	lr, [r3, #12]
  4084de:	f8c3 e008 	str.w	lr, [r3, #8]
  4084e2:	6059      	str	r1, [r3, #4]
  4084e4:	509a      	str	r2, [r3, r2]
  4084e6:	f000 fac9 	bl	408a7c <__malloc_unlock>
  4084ea:	e01f      	b.n	40852c <_malloc_r+0x190>
  4084ec:	2910      	cmp	r1, #16
  4084ee:	d821      	bhi.n	408534 <_malloc_r+0x198>
  4084f0:	f000 fac2 	bl	408a78 <__malloc_lock>
  4084f4:	2510      	movs	r5, #16
  4084f6:	2306      	movs	r3, #6
  4084f8:	2002      	movs	r0, #2
  4084fa:	4f7e      	ldr	r7, [pc, #504]	; (4086f4 <_malloc_r+0x358>)
  4084fc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408500:	f1a3 0208 	sub.w	r2, r3, #8
  408504:	685c      	ldr	r4, [r3, #4]
  408506:	4294      	cmp	r4, r2
  408508:	f000 8145 	beq.w	408796 <_malloc_r+0x3fa>
  40850c:	6863      	ldr	r3, [r4, #4]
  40850e:	68e1      	ldr	r1, [r4, #12]
  408510:	68a5      	ldr	r5, [r4, #8]
  408512:	f023 0303 	bic.w	r3, r3, #3
  408516:	4423      	add	r3, r4
  408518:	4630      	mov	r0, r6
  40851a:	685a      	ldr	r2, [r3, #4]
  40851c:	60e9      	str	r1, [r5, #12]
  40851e:	f042 0201 	orr.w	r2, r2, #1
  408522:	608d      	str	r5, [r1, #8]
  408524:	605a      	str	r2, [r3, #4]
  408526:	f000 faa9 	bl	408a7c <__malloc_unlock>
  40852a:	3408      	adds	r4, #8
  40852c:	4620      	mov	r0, r4
  40852e:	b003      	add	sp, #12
  408530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408534:	2400      	movs	r4, #0
  408536:	230c      	movs	r3, #12
  408538:	4620      	mov	r0, r4
  40853a:	6033      	str	r3, [r6, #0]
  40853c:	b003      	add	sp, #12
  40853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408542:	2380      	movs	r3, #128	; 0x80
  408544:	f04f 0e40 	mov.w	lr, #64	; 0x40
  408548:	203f      	movs	r0, #63	; 0x3f
  40854a:	e749      	b.n	4083e0 <_malloc_r+0x44>
  40854c:	4670      	mov	r0, lr
  40854e:	e75d      	b.n	40840c <_malloc_r+0x70>
  408550:	4423      	add	r3, r4
  408552:	68e1      	ldr	r1, [r4, #12]
  408554:	685a      	ldr	r2, [r3, #4]
  408556:	68a5      	ldr	r5, [r4, #8]
  408558:	f042 0201 	orr.w	r2, r2, #1
  40855c:	60e9      	str	r1, [r5, #12]
  40855e:	4630      	mov	r0, r6
  408560:	608d      	str	r5, [r1, #8]
  408562:	605a      	str	r2, [r3, #4]
  408564:	f000 fa8a 	bl	408a7c <__malloc_unlock>
  408568:	3408      	adds	r4, #8
  40856a:	4620      	mov	r0, r4
  40856c:	b003      	add	sp, #12
  40856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408572:	4423      	add	r3, r4
  408574:	4630      	mov	r0, r6
  408576:	685a      	ldr	r2, [r3, #4]
  408578:	f042 0201 	orr.w	r2, r2, #1
  40857c:	605a      	str	r2, [r3, #4]
  40857e:	f000 fa7d 	bl	408a7c <__malloc_unlock>
  408582:	3408      	adds	r4, #8
  408584:	4620      	mov	r0, r4
  408586:	b003      	add	sp, #12
  408588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40858c:	68bc      	ldr	r4, [r7, #8]
  40858e:	6863      	ldr	r3, [r4, #4]
  408590:	f023 0803 	bic.w	r8, r3, #3
  408594:	45a8      	cmp	r8, r5
  408596:	d304      	bcc.n	4085a2 <_malloc_r+0x206>
  408598:	ebc5 0308 	rsb	r3, r5, r8
  40859c:	2b0f      	cmp	r3, #15
  40859e:	f300 808c 	bgt.w	4086ba <_malloc_r+0x31e>
  4085a2:	4b55      	ldr	r3, [pc, #340]	; (4086f8 <_malloc_r+0x35c>)
  4085a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 408708 <_malloc_r+0x36c>
  4085a8:	681a      	ldr	r2, [r3, #0]
  4085aa:	f8d9 3000 	ldr.w	r3, [r9]
  4085ae:	3301      	adds	r3, #1
  4085b0:	442a      	add	r2, r5
  4085b2:	eb04 0a08 	add.w	sl, r4, r8
  4085b6:	f000 8160 	beq.w	40887a <_malloc_r+0x4de>
  4085ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4085be:	320f      	adds	r2, #15
  4085c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4085c4:	f022 020f 	bic.w	r2, r2, #15
  4085c8:	4611      	mov	r1, r2
  4085ca:	4630      	mov	r0, r6
  4085cc:	9201      	str	r2, [sp, #4]
  4085ce:	f000 fc47 	bl	408e60 <_sbrk_r>
  4085d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4085d6:	4683      	mov	fp, r0
  4085d8:	9a01      	ldr	r2, [sp, #4]
  4085da:	f000 8158 	beq.w	40888e <_malloc_r+0x4f2>
  4085de:	4582      	cmp	sl, r0
  4085e0:	f200 80fc 	bhi.w	4087dc <_malloc_r+0x440>
  4085e4:	4b45      	ldr	r3, [pc, #276]	; (4086fc <_malloc_r+0x360>)
  4085e6:	6819      	ldr	r1, [r3, #0]
  4085e8:	45da      	cmp	sl, fp
  4085ea:	4411      	add	r1, r2
  4085ec:	6019      	str	r1, [r3, #0]
  4085ee:	f000 8153 	beq.w	408898 <_malloc_r+0x4fc>
  4085f2:	f8d9 0000 	ldr.w	r0, [r9]
  4085f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 408708 <_malloc_r+0x36c>
  4085fa:	3001      	adds	r0, #1
  4085fc:	bf1b      	ittet	ne
  4085fe:	ebca 0a0b 	rsbne	sl, sl, fp
  408602:	4451      	addne	r1, sl
  408604:	f8ce b000 	streq.w	fp, [lr]
  408608:	6019      	strne	r1, [r3, #0]
  40860a:	f01b 0107 	ands.w	r1, fp, #7
  40860e:	f000 8117 	beq.w	408840 <_malloc_r+0x4a4>
  408612:	f1c1 0008 	rsb	r0, r1, #8
  408616:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40861a:	4483      	add	fp, r0
  40861c:	3108      	adds	r1, #8
  40861e:	445a      	add	r2, fp
  408620:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408624:	ebc2 0901 	rsb	r9, r2, r1
  408628:	4649      	mov	r1, r9
  40862a:	4630      	mov	r0, r6
  40862c:	9301      	str	r3, [sp, #4]
  40862e:	f000 fc17 	bl	408e60 <_sbrk_r>
  408632:	1c43      	adds	r3, r0, #1
  408634:	9b01      	ldr	r3, [sp, #4]
  408636:	f000 813f 	beq.w	4088b8 <_malloc_r+0x51c>
  40863a:	ebcb 0200 	rsb	r2, fp, r0
  40863e:	444a      	add	r2, r9
  408640:	f042 0201 	orr.w	r2, r2, #1
  408644:	6819      	ldr	r1, [r3, #0]
  408646:	f8c7 b008 	str.w	fp, [r7, #8]
  40864a:	4449      	add	r1, r9
  40864c:	42bc      	cmp	r4, r7
  40864e:	f8cb 2004 	str.w	r2, [fp, #4]
  408652:	6019      	str	r1, [r3, #0]
  408654:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4086fc <_malloc_r+0x360>
  408658:	d016      	beq.n	408688 <_malloc_r+0x2ec>
  40865a:	f1b8 0f0f 	cmp.w	r8, #15
  40865e:	f240 80fd 	bls.w	40885c <_malloc_r+0x4c0>
  408662:	6862      	ldr	r2, [r4, #4]
  408664:	f1a8 030c 	sub.w	r3, r8, #12
  408668:	f023 0307 	bic.w	r3, r3, #7
  40866c:	18e0      	adds	r0, r4, r3
  40866e:	f002 0201 	and.w	r2, r2, #1
  408672:	f04f 0e05 	mov.w	lr, #5
  408676:	431a      	orrs	r2, r3
  408678:	2b0f      	cmp	r3, #15
  40867a:	6062      	str	r2, [r4, #4]
  40867c:	f8c0 e004 	str.w	lr, [r0, #4]
  408680:	f8c0 e008 	str.w	lr, [r0, #8]
  408684:	f200 811c 	bhi.w	4088c0 <_malloc_r+0x524>
  408688:	4b1d      	ldr	r3, [pc, #116]	; (408700 <_malloc_r+0x364>)
  40868a:	68bc      	ldr	r4, [r7, #8]
  40868c:	681a      	ldr	r2, [r3, #0]
  40868e:	4291      	cmp	r1, r2
  408690:	bf88      	it	hi
  408692:	6019      	strhi	r1, [r3, #0]
  408694:	4b1b      	ldr	r3, [pc, #108]	; (408704 <_malloc_r+0x368>)
  408696:	681a      	ldr	r2, [r3, #0]
  408698:	4291      	cmp	r1, r2
  40869a:	6862      	ldr	r2, [r4, #4]
  40869c:	bf88      	it	hi
  40869e:	6019      	strhi	r1, [r3, #0]
  4086a0:	f022 0203 	bic.w	r2, r2, #3
  4086a4:	4295      	cmp	r5, r2
  4086a6:	eba2 0305 	sub.w	r3, r2, r5
  4086aa:	d801      	bhi.n	4086b0 <_malloc_r+0x314>
  4086ac:	2b0f      	cmp	r3, #15
  4086ae:	dc04      	bgt.n	4086ba <_malloc_r+0x31e>
  4086b0:	4630      	mov	r0, r6
  4086b2:	f000 f9e3 	bl	408a7c <__malloc_unlock>
  4086b6:	2400      	movs	r4, #0
  4086b8:	e738      	b.n	40852c <_malloc_r+0x190>
  4086ba:	1962      	adds	r2, r4, r5
  4086bc:	f043 0301 	orr.w	r3, r3, #1
  4086c0:	f045 0501 	orr.w	r5, r5, #1
  4086c4:	6065      	str	r5, [r4, #4]
  4086c6:	4630      	mov	r0, r6
  4086c8:	60ba      	str	r2, [r7, #8]
  4086ca:	6053      	str	r3, [r2, #4]
  4086cc:	f000 f9d6 	bl	408a7c <__malloc_unlock>
  4086d0:	3408      	adds	r4, #8
  4086d2:	4620      	mov	r0, r4
  4086d4:	b003      	add	sp, #12
  4086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086da:	2b14      	cmp	r3, #20
  4086dc:	d971      	bls.n	4087c2 <_malloc_r+0x426>
  4086de:	2b54      	cmp	r3, #84	; 0x54
  4086e0:	f200 80a4 	bhi.w	40882c <_malloc_r+0x490>
  4086e4:	0b28      	lsrs	r0, r5, #12
  4086e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4086ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4086ee:	306e      	adds	r0, #110	; 0x6e
  4086f0:	e676      	b.n	4083e0 <_malloc_r+0x44>
  4086f2:	bf00      	nop
  4086f4:	20000490 	.word	0x20000490
  4086f8:	200036fc 	.word	0x200036fc
  4086fc:	20003700 	.word	0x20003700
  408700:	200036f8 	.word	0x200036f8
  408704:	200036f4 	.word	0x200036f4
  408708:	2000089c 	.word	0x2000089c
  40870c:	0a5a      	lsrs	r2, r3, #9
  40870e:	2a04      	cmp	r2, #4
  408710:	d95e      	bls.n	4087d0 <_malloc_r+0x434>
  408712:	2a14      	cmp	r2, #20
  408714:	f200 80b3 	bhi.w	40887e <_malloc_r+0x4e2>
  408718:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40871c:	0049      	lsls	r1, r1, #1
  40871e:	325b      	adds	r2, #91	; 0x5b
  408720:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  408724:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  408728:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 408908 <_malloc_r+0x56c>
  40872c:	f1ac 0c08 	sub.w	ip, ip, #8
  408730:	458c      	cmp	ip, r1
  408732:	f000 8088 	beq.w	408846 <_malloc_r+0x4aa>
  408736:	684a      	ldr	r2, [r1, #4]
  408738:	f022 0203 	bic.w	r2, r2, #3
  40873c:	4293      	cmp	r3, r2
  40873e:	d202      	bcs.n	408746 <_malloc_r+0x3aa>
  408740:	6889      	ldr	r1, [r1, #8]
  408742:	458c      	cmp	ip, r1
  408744:	d1f7      	bne.n	408736 <_malloc_r+0x39a>
  408746:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40874a:	687a      	ldr	r2, [r7, #4]
  40874c:	f8c4 c00c 	str.w	ip, [r4, #12]
  408750:	60a1      	str	r1, [r4, #8]
  408752:	f8cc 4008 	str.w	r4, [ip, #8]
  408756:	60cc      	str	r4, [r1, #12]
  408758:	e688      	b.n	40846c <_malloc_r+0xd0>
  40875a:	1963      	adds	r3, r4, r5
  40875c:	f042 0701 	orr.w	r7, r2, #1
  408760:	f045 0501 	orr.w	r5, r5, #1
  408764:	6065      	str	r5, [r4, #4]
  408766:	4630      	mov	r0, r6
  408768:	614b      	str	r3, [r1, #20]
  40876a:	610b      	str	r3, [r1, #16]
  40876c:	f8c3 e00c 	str.w	lr, [r3, #12]
  408770:	f8c3 e008 	str.w	lr, [r3, #8]
  408774:	605f      	str	r7, [r3, #4]
  408776:	509a      	str	r2, [r3, r2]
  408778:	3408      	adds	r4, #8
  40877a:	f000 f97f 	bl	408a7c <__malloc_unlock>
  40877e:	e6d5      	b.n	40852c <_malloc_r+0x190>
  408780:	684a      	ldr	r2, [r1, #4]
  408782:	e673      	b.n	40846c <_malloc_r+0xd0>
  408784:	f108 0801 	add.w	r8, r8, #1
  408788:	f018 0f03 	tst.w	r8, #3
  40878c:	f10c 0c08 	add.w	ip, ip, #8
  408790:	f47f ae7f 	bne.w	408492 <_malloc_r+0xf6>
  408794:	e030      	b.n	4087f8 <_malloc_r+0x45c>
  408796:	68dc      	ldr	r4, [r3, #12]
  408798:	42a3      	cmp	r3, r4
  40879a:	bf08      	it	eq
  40879c:	3002      	addeq	r0, #2
  40879e:	f43f ae35 	beq.w	40840c <_malloc_r+0x70>
  4087a2:	e6b3      	b.n	40850c <_malloc_r+0x170>
  4087a4:	440b      	add	r3, r1
  4087a6:	460c      	mov	r4, r1
  4087a8:	685a      	ldr	r2, [r3, #4]
  4087aa:	68c9      	ldr	r1, [r1, #12]
  4087ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4087b0:	f042 0201 	orr.w	r2, r2, #1
  4087b4:	605a      	str	r2, [r3, #4]
  4087b6:	4630      	mov	r0, r6
  4087b8:	60e9      	str	r1, [r5, #12]
  4087ba:	608d      	str	r5, [r1, #8]
  4087bc:	f000 f95e 	bl	408a7c <__malloc_unlock>
  4087c0:	e6b4      	b.n	40852c <_malloc_r+0x190>
  4087c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4087c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4087ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4087ce:	e607      	b.n	4083e0 <_malloc_r+0x44>
  4087d0:	099a      	lsrs	r2, r3, #6
  4087d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4087d6:	0049      	lsls	r1, r1, #1
  4087d8:	3238      	adds	r2, #56	; 0x38
  4087da:	e7a1      	b.n	408720 <_malloc_r+0x384>
  4087dc:	42bc      	cmp	r4, r7
  4087de:	4b4a      	ldr	r3, [pc, #296]	; (408908 <_malloc_r+0x56c>)
  4087e0:	f43f af00 	beq.w	4085e4 <_malloc_r+0x248>
  4087e4:	689c      	ldr	r4, [r3, #8]
  4087e6:	6862      	ldr	r2, [r4, #4]
  4087e8:	f022 0203 	bic.w	r2, r2, #3
  4087ec:	e75a      	b.n	4086a4 <_malloc_r+0x308>
  4087ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4087f2:	4599      	cmp	r9, r3
  4087f4:	f040 8082 	bne.w	4088fc <_malloc_r+0x560>
  4087f8:	f010 0f03 	tst.w	r0, #3
  4087fc:	f100 30ff 	add.w	r0, r0, #4294967295
  408800:	d1f5      	bne.n	4087ee <_malloc_r+0x452>
  408802:	687b      	ldr	r3, [r7, #4]
  408804:	ea23 0304 	bic.w	r3, r3, r4
  408808:	607b      	str	r3, [r7, #4]
  40880a:	0064      	lsls	r4, r4, #1
  40880c:	429c      	cmp	r4, r3
  40880e:	f63f aebd 	bhi.w	40858c <_malloc_r+0x1f0>
  408812:	2c00      	cmp	r4, #0
  408814:	f43f aeba 	beq.w	40858c <_malloc_r+0x1f0>
  408818:	421c      	tst	r4, r3
  40881a:	4640      	mov	r0, r8
  40881c:	f47f ae35 	bne.w	40848a <_malloc_r+0xee>
  408820:	0064      	lsls	r4, r4, #1
  408822:	421c      	tst	r4, r3
  408824:	f100 0004 	add.w	r0, r0, #4
  408828:	d0fa      	beq.n	408820 <_malloc_r+0x484>
  40882a:	e62e      	b.n	40848a <_malloc_r+0xee>
  40882c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408830:	d818      	bhi.n	408864 <_malloc_r+0x4c8>
  408832:	0be8      	lsrs	r0, r5, #15
  408834:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  408838:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40883c:	3077      	adds	r0, #119	; 0x77
  40883e:	e5cf      	b.n	4083e0 <_malloc_r+0x44>
  408840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408844:	e6eb      	b.n	40861e <_malloc_r+0x282>
  408846:	2101      	movs	r1, #1
  408848:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40884c:	1092      	asrs	r2, r2, #2
  40884e:	fa01 f202 	lsl.w	r2, r1, r2
  408852:	431a      	orrs	r2, r3
  408854:	f8c8 2004 	str.w	r2, [r8, #4]
  408858:	4661      	mov	r1, ip
  40885a:	e777      	b.n	40874c <_malloc_r+0x3b0>
  40885c:	2301      	movs	r3, #1
  40885e:	f8cb 3004 	str.w	r3, [fp, #4]
  408862:	e725      	b.n	4086b0 <_malloc_r+0x314>
  408864:	f240 5254 	movw	r2, #1364	; 0x554
  408868:	4293      	cmp	r3, r2
  40886a:	d820      	bhi.n	4088ae <_malloc_r+0x512>
  40886c:	0ca8      	lsrs	r0, r5, #18
  40886e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  408872:	ea4f 034e 	mov.w	r3, lr, lsl #1
  408876:	307c      	adds	r0, #124	; 0x7c
  408878:	e5b2      	b.n	4083e0 <_malloc_r+0x44>
  40887a:	3210      	adds	r2, #16
  40887c:	e6a4      	b.n	4085c8 <_malloc_r+0x22c>
  40887e:	2a54      	cmp	r2, #84	; 0x54
  408880:	d826      	bhi.n	4088d0 <_malloc_r+0x534>
  408882:	0b1a      	lsrs	r2, r3, #12
  408884:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408888:	0049      	lsls	r1, r1, #1
  40888a:	326e      	adds	r2, #110	; 0x6e
  40888c:	e748      	b.n	408720 <_malloc_r+0x384>
  40888e:	68bc      	ldr	r4, [r7, #8]
  408890:	6862      	ldr	r2, [r4, #4]
  408892:	f022 0203 	bic.w	r2, r2, #3
  408896:	e705      	b.n	4086a4 <_malloc_r+0x308>
  408898:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40889c:	2800      	cmp	r0, #0
  40889e:	f47f aea8 	bne.w	4085f2 <_malloc_r+0x256>
  4088a2:	4442      	add	r2, r8
  4088a4:	68bb      	ldr	r3, [r7, #8]
  4088a6:	f042 0201 	orr.w	r2, r2, #1
  4088aa:	605a      	str	r2, [r3, #4]
  4088ac:	e6ec      	b.n	408688 <_malloc_r+0x2ec>
  4088ae:	23fe      	movs	r3, #254	; 0xfe
  4088b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4088b4:	207e      	movs	r0, #126	; 0x7e
  4088b6:	e593      	b.n	4083e0 <_malloc_r+0x44>
  4088b8:	2201      	movs	r2, #1
  4088ba:	f04f 0900 	mov.w	r9, #0
  4088be:	e6c1      	b.n	408644 <_malloc_r+0x2a8>
  4088c0:	f104 0108 	add.w	r1, r4, #8
  4088c4:	4630      	mov	r0, r6
  4088c6:	f7ff fa4f 	bl	407d68 <_free_r>
  4088ca:	f8d9 1000 	ldr.w	r1, [r9]
  4088ce:	e6db      	b.n	408688 <_malloc_r+0x2ec>
  4088d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4088d4:	d805      	bhi.n	4088e2 <_malloc_r+0x546>
  4088d6:	0bda      	lsrs	r2, r3, #15
  4088d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4088dc:	0049      	lsls	r1, r1, #1
  4088de:	3277      	adds	r2, #119	; 0x77
  4088e0:	e71e      	b.n	408720 <_malloc_r+0x384>
  4088e2:	f240 5154 	movw	r1, #1364	; 0x554
  4088e6:	428a      	cmp	r2, r1
  4088e8:	d805      	bhi.n	4088f6 <_malloc_r+0x55a>
  4088ea:	0c9a      	lsrs	r2, r3, #18
  4088ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4088f0:	0049      	lsls	r1, r1, #1
  4088f2:	327c      	adds	r2, #124	; 0x7c
  4088f4:	e714      	b.n	408720 <_malloc_r+0x384>
  4088f6:	21fe      	movs	r1, #254	; 0xfe
  4088f8:	227e      	movs	r2, #126	; 0x7e
  4088fa:	e711      	b.n	408720 <_malloc_r+0x384>
  4088fc:	687b      	ldr	r3, [r7, #4]
  4088fe:	e784      	b.n	40880a <_malloc_r+0x46e>
  408900:	08e8      	lsrs	r0, r5, #3
  408902:	1c43      	adds	r3, r0, #1
  408904:	005b      	lsls	r3, r3, #1
  408906:	e5f8      	b.n	4084fa <_malloc_r+0x15e>
  408908:	20000490 	.word	0x20000490
  40890c:	00000000 	.word	0x00000000

00408910 <memchr>:
  408910:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408914:	2a10      	cmp	r2, #16
  408916:	db2b      	blt.n	408970 <memchr+0x60>
  408918:	f010 0f07 	tst.w	r0, #7
  40891c:	d008      	beq.n	408930 <memchr+0x20>
  40891e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408922:	3a01      	subs	r2, #1
  408924:	428b      	cmp	r3, r1
  408926:	d02d      	beq.n	408984 <memchr+0x74>
  408928:	f010 0f07 	tst.w	r0, #7
  40892c:	b342      	cbz	r2, 408980 <memchr+0x70>
  40892e:	d1f6      	bne.n	40891e <memchr+0xe>
  408930:	b4f0      	push	{r4, r5, r6, r7}
  408932:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408936:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40893a:	f022 0407 	bic.w	r4, r2, #7
  40893e:	f07f 0700 	mvns.w	r7, #0
  408942:	2300      	movs	r3, #0
  408944:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408948:	3c08      	subs	r4, #8
  40894a:	ea85 0501 	eor.w	r5, r5, r1
  40894e:	ea86 0601 	eor.w	r6, r6, r1
  408952:	fa85 f547 	uadd8	r5, r5, r7
  408956:	faa3 f587 	sel	r5, r3, r7
  40895a:	fa86 f647 	uadd8	r6, r6, r7
  40895e:	faa5 f687 	sel	r6, r5, r7
  408962:	b98e      	cbnz	r6, 408988 <memchr+0x78>
  408964:	d1ee      	bne.n	408944 <memchr+0x34>
  408966:	bcf0      	pop	{r4, r5, r6, r7}
  408968:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40896c:	f002 0207 	and.w	r2, r2, #7
  408970:	b132      	cbz	r2, 408980 <memchr+0x70>
  408972:	f810 3b01 	ldrb.w	r3, [r0], #1
  408976:	3a01      	subs	r2, #1
  408978:	ea83 0301 	eor.w	r3, r3, r1
  40897c:	b113      	cbz	r3, 408984 <memchr+0x74>
  40897e:	d1f8      	bne.n	408972 <memchr+0x62>
  408980:	2000      	movs	r0, #0
  408982:	4770      	bx	lr
  408984:	3801      	subs	r0, #1
  408986:	4770      	bx	lr
  408988:	2d00      	cmp	r5, #0
  40898a:	bf06      	itte	eq
  40898c:	4635      	moveq	r5, r6
  40898e:	3803      	subeq	r0, #3
  408990:	3807      	subne	r0, #7
  408992:	f015 0f01 	tst.w	r5, #1
  408996:	d107      	bne.n	4089a8 <memchr+0x98>
  408998:	3001      	adds	r0, #1
  40899a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40899e:	bf02      	ittt	eq
  4089a0:	3001      	addeq	r0, #1
  4089a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4089a6:	3001      	addeq	r0, #1
  4089a8:	bcf0      	pop	{r4, r5, r6, r7}
  4089aa:	3801      	subs	r0, #1
  4089ac:	4770      	bx	lr
  4089ae:	bf00      	nop

004089b0 <memmove>:
  4089b0:	4288      	cmp	r0, r1
  4089b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4089b4:	d90d      	bls.n	4089d2 <memmove+0x22>
  4089b6:	188b      	adds	r3, r1, r2
  4089b8:	4298      	cmp	r0, r3
  4089ba:	d20a      	bcs.n	4089d2 <memmove+0x22>
  4089bc:	1881      	adds	r1, r0, r2
  4089be:	2a00      	cmp	r2, #0
  4089c0:	d051      	beq.n	408a66 <memmove+0xb6>
  4089c2:	1a9a      	subs	r2, r3, r2
  4089c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4089c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4089cc:	4293      	cmp	r3, r2
  4089ce:	d1f9      	bne.n	4089c4 <memmove+0x14>
  4089d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4089d2:	2a0f      	cmp	r2, #15
  4089d4:	d948      	bls.n	408a68 <memmove+0xb8>
  4089d6:	ea41 0300 	orr.w	r3, r1, r0
  4089da:	079b      	lsls	r3, r3, #30
  4089dc:	d146      	bne.n	408a6c <memmove+0xbc>
  4089de:	f100 0410 	add.w	r4, r0, #16
  4089e2:	f101 0310 	add.w	r3, r1, #16
  4089e6:	4615      	mov	r5, r2
  4089e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4089ec:	f844 6c10 	str.w	r6, [r4, #-16]
  4089f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4089f4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4089f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4089fc:	f844 6c08 	str.w	r6, [r4, #-8]
  408a00:	3d10      	subs	r5, #16
  408a02:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408a06:	f844 6c04 	str.w	r6, [r4, #-4]
  408a0a:	2d0f      	cmp	r5, #15
  408a0c:	f103 0310 	add.w	r3, r3, #16
  408a10:	f104 0410 	add.w	r4, r4, #16
  408a14:	d8e8      	bhi.n	4089e8 <memmove+0x38>
  408a16:	f1a2 0310 	sub.w	r3, r2, #16
  408a1a:	f023 030f 	bic.w	r3, r3, #15
  408a1e:	f002 0e0f 	and.w	lr, r2, #15
  408a22:	3310      	adds	r3, #16
  408a24:	f1be 0f03 	cmp.w	lr, #3
  408a28:	4419      	add	r1, r3
  408a2a:	4403      	add	r3, r0
  408a2c:	d921      	bls.n	408a72 <memmove+0xc2>
  408a2e:	1f1e      	subs	r6, r3, #4
  408a30:	460d      	mov	r5, r1
  408a32:	4674      	mov	r4, lr
  408a34:	3c04      	subs	r4, #4
  408a36:	f855 7b04 	ldr.w	r7, [r5], #4
  408a3a:	f846 7f04 	str.w	r7, [r6, #4]!
  408a3e:	2c03      	cmp	r4, #3
  408a40:	d8f8      	bhi.n	408a34 <memmove+0x84>
  408a42:	f1ae 0404 	sub.w	r4, lr, #4
  408a46:	f024 0403 	bic.w	r4, r4, #3
  408a4a:	3404      	adds	r4, #4
  408a4c:	4423      	add	r3, r4
  408a4e:	4421      	add	r1, r4
  408a50:	f002 0203 	and.w	r2, r2, #3
  408a54:	b162      	cbz	r2, 408a70 <memmove+0xc0>
  408a56:	3b01      	subs	r3, #1
  408a58:	440a      	add	r2, r1
  408a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
  408a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408a62:	428a      	cmp	r2, r1
  408a64:	d1f9      	bne.n	408a5a <memmove+0xaa>
  408a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408a68:	4603      	mov	r3, r0
  408a6a:	e7f3      	b.n	408a54 <memmove+0xa4>
  408a6c:	4603      	mov	r3, r0
  408a6e:	e7f2      	b.n	408a56 <memmove+0xa6>
  408a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408a72:	4672      	mov	r2, lr
  408a74:	e7ee      	b.n	408a54 <memmove+0xa4>
  408a76:	bf00      	nop

00408a78 <__malloc_lock>:
  408a78:	4770      	bx	lr
  408a7a:	bf00      	nop

00408a7c <__malloc_unlock>:
  408a7c:	4770      	bx	lr
  408a7e:	bf00      	nop

00408a80 <_realloc_r>:
  408a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a84:	4617      	mov	r7, r2
  408a86:	b083      	sub	sp, #12
  408a88:	2900      	cmp	r1, #0
  408a8a:	f000 80c1 	beq.w	408c10 <_realloc_r+0x190>
  408a8e:	460e      	mov	r6, r1
  408a90:	4681      	mov	r9, r0
  408a92:	f107 050b 	add.w	r5, r7, #11
  408a96:	f7ff ffef 	bl	408a78 <__malloc_lock>
  408a9a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  408a9e:	2d16      	cmp	r5, #22
  408aa0:	f02e 0403 	bic.w	r4, lr, #3
  408aa4:	f1a6 0808 	sub.w	r8, r6, #8
  408aa8:	d840      	bhi.n	408b2c <_realloc_r+0xac>
  408aaa:	2210      	movs	r2, #16
  408aac:	4615      	mov	r5, r2
  408aae:	42af      	cmp	r7, r5
  408ab0:	d841      	bhi.n	408b36 <_realloc_r+0xb6>
  408ab2:	4294      	cmp	r4, r2
  408ab4:	da75      	bge.n	408ba2 <_realloc_r+0x122>
  408ab6:	4bc9      	ldr	r3, [pc, #804]	; (408ddc <_realloc_r+0x35c>)
  408ab8:	6899      	ldr	r1, [r3, #8]
  408aba:	eb08 0004 	add.w	r0, r8, r4
  408abe:	4288      	cmp	r0, r1
  408ac0:	6841      	ldr	r1, [r0, #4]
  408ac2:	f000 80d9 	beq.w	408c78 <_realloc_r+0x1f8>
  408ac6:	f021 0301 	bic.w	r3, r1, #1
  408aca:	4403      	add	r3, r0
  408acc:	685b      	ldr	r3, [r3, #4]
  408ace:	07db      	lsls	r3, r3, #31
  408ad0:	d57d      	bpl.n	408bce <_realloc_r+0x14e>
  408ad2:	f01e 0f01 	tst.w	lr, #1
  408ad6:	d035      	beq.n	408b44 <_realloc_r+0xc4>
  408ad8:	4639      	mov	r1, r7
  408ada:	4648      	mov	r0, r9
  408adc:	f7ff fc5e 	bl	40839c <_malloc_r>
  408ae0:	4607      	mov	r7, r0
  408ae2:	b1e0      	cbz	r0, 408b1e <_realloc_r+0x9e>
  408ae4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408ae8:	f023 0301 	bic.w	r3, r3, #1
  408aec:	4443      	add	r3, r8
  408aee:	f1a0 0208 	sub.w	r2, r0, #8
  408af2:	429a      	cmp	r2, r3
  408af4:	f000 8144 	beq.w	408d80 <_realloc_r+0x300>
  408af8:	1f22      	subs	r2, r4, #4
  408afa:	2a24      	cmp	r2, #36	; 0x24
  408afc:	f200 8131 	bhi.w	408d62 <_realloc_r+0x2e2>
  408b00:	2a13      	cmp	r2, #19
  408b02:	f200 8104 	bhi.w	408d0e <_realloc_r+0x28e>
  408b06:	4603      	mov	r3, r0
  408b08:	4632      	mov	r2, r6
  408b0a:	6811      	ldr	r1, [r2, #0]
  408b0c:	6019      	str	r1, [r3, #0]
  408b0e:	6851      	ldr	r1, [r2, #4]
  408b10:	6059      	str	r1, [r3, #4]
  408b12:	6892      	ldr	r2, [r2, #8]
  408b14:	609a      	str	r2, [r3, #8]
  408b16:	4631      	mov	r1, r6
  408b18:	4648      	mov	r0, r9
  408b1a:	f7ff f925 	bl	407d68 <_free_r>
  408b1e:	4648      	mov	r0, r9
  408b20:	f7ff ffac 	bl	408a7c <__malloc_unlock>
  408b24:	4638      	mov	r0, r7
  408b26:	b003      	add	sp, #12
  408b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b2c:	f025 0507 	bic.w	r5, r5, #7
  408b30:	2d00      	cmp	r5, #0
  408b32:	462a      	mov	r2, r5
  408b34:	dabb      	bge.n	408aae <_realloc_r+0x2e>
  408b36:	230c      	movs	r3, #12
  408b38:	2000      	movs	r0, #0
  408b3a:	f8c9 3000 	str.w	r3, [r9]
  408b3e:	b003      	add	sp, #12
  408b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b44:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408b48:	ebc3 0a08 	rsb	sl, r3, r8
  408b4c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408b50:	f023 0c03 	bic.w	ip, r3, #3
  408b54:	eb04 030c 	add.w	r3, r4, ip
  408b58:	4293      	cmp	r3, r2
  408b5a:	dbbd      	blt.n	408ad8 <_realloc_r+0x58>
  408b5c:	4657      	mov	r7, sl
  408b5e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408b62:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408b66:	1f22      	subs	r2, r4, #4
  408b68:	2a24      	cmp	r2, #36	; 0x24
  408b6a:	60c1      	str	r1, [r0, #12]
  408b6c:	6088      	str	r0, [r1, #8]
  408b6e:	f200 8117 	bhi.w	408da0 <_realloc_r+0x320>
  408b72:	2a13      	cmp	r2, #19
  408b74:	f240 8112 	bls.w	408d9c <_realloc_r+0x31c>
  408b78:	6831      	ldr	r1, [r6, #0]
  408b7a:	f8ca 1008 	str.w	r1, [sl, #8]
  408b7e:	6871      	ldr	r1, [r6, #4]
  408b80:	f8ca 100c 	str.w	r1, [sl, #12]
  408b84:	2a1b      	cmp	r2, #27
  408b86:	f200 812b 	bhi.w	408de0 <_realloc_r+0x360>
  408b8a:	3608      	adds	r6, #8
  408b8c:	f10a 0210 	add.w	r2, sl, #16
  408b90:	6831      	ldr	r1, [r6, #0]
  408b92:	6011      	str	r1, [r2, #0]
  408b94:	6871      	ldr	r1, [r6, #4]
  408b96:	6051      	str	r1, [r2, #4]
  408b98:	68b1      	ldr	r1, [r6, #8]
  408b9a:	6091      	str	r1, [r2, #8]
  408b9c:	463e      	mov	r6, r7
  408b9e:	461c      	mov	r4, r3
  408ba0:	46d0      	mov	r8, sl
  408ba2:	1b63      	subs	r3, r4, r5
  408ba4:	2b0f      	cmp	r3, #15
  408ba6:	d81d      	bhi.n	408be4 <_realloc_r+0x164>
  408ba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408bac:	f003 0301 	and.w	r3, r3, #1
  408bb0:	4323      	orrs	r3, r4
  408bb2:	4444      	add	r4, r8
  408bb4:	f8c8 3004 	str.w	r3, [r8, #4]
  408bb8:	6863      	ldr	r3, [r4, #4]
  408bba:	f043 0301 	orr.w	r3, r3, #1
  408bbe:	6063      	str	r3, [r4, #4]
  408bc0:	4648      	mov	r0, r9
  408bc2:	f7ff ff5b 	bl	408a7c <__malloc_unlock>
  408bc6:	4630      	mov	r0, r6
  408bc8:	b003      	add	sp, #12
  408bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bce:	f021 0103 	bic.w	r1, r1, #3
  408bd2:	4421      	add	r1, r4
  408bd4:	4291      	cmp	r1, r2
  408bd6:	db21      	blt.n	408c1c <_realloc_r+0x19c>
  408bd8:	68c3      	ldr	r3, [r0, #12]
  408bda:	6882      	ldr	r2, [r0, #8]
  408bdc:	460c      	mov	r4, r1
  408bde:	60d3      	str	r3, [r2, #12]
  408be0:	609a      	str	r2, [r3, #8]
  408be2:	e7de      	b.n	408ba2 <_realloc_r+0x122>
  408be4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  408be8:	eb08 0105 	add.w	r1, r8, r5
  408bec:	f002 0201 	and.w	r2, r2, #1
  408bf0:	4315      	orrs	r5, r2
  408bf2:	f043 0201 	orr.w	r2, r3, #1
  408bf6:	440b      	add	r3, r1
  408bf8:	f8c8 5004 	str.w	r5, [r8, #4]
  408bfc:	604a      	str	r2, [r1, #4]
  408bfe:	685a      	ldr	r2, [r3, #4]
  408c00:	f042 0201 	orr.w	r2, r2, #1
  408c04:	3108      	adds	r1, #8
  408c06:	605a      	str	r2, [r3, #4]
  408c08:	4648      	mov	r0, r9
  408c0a:	f7ff f8ad 	bl	407d68 <_free_r>
  408c0e:	e7d7      	b.n	408bc0 <_realloc_r+0x140>
  408c10:	4611      	mov	r1, r2
  408c12:	b003      	add	sp, #12
  408c14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c18:	f7ff bbc0 	b.w	40839c <_malloc_r>
  408c1c:	f01e 0f01 	tst.w	lr, #1
  408c20:	f47f af5a 	bne.w	408ad8 <_realloc_r+0x58>
  408c24:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408c28:	ebc3 0a08 	rsb	sl, r3, r8
  408c2c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408c30:	f023 0c03 	bic.w	ip, r3, #3
  408c34:	eb01 0e0c 	add.w	lr, r1, ip
  408c38:	4596      	cmp	lr, r2
  408c3a:	db8b      	blt.n	408b54 <_realloc_r+0xd4>
  408c3c:	68c3      	ldr	r3, [r0, #12]
  408c3e:	6882      	ldr	r2, [r0, #8]
  408c40:	4657      	mov	r7, sl
  408c42:	60d3      	str	r3, [r2, #12]
  408c44:	609a      	str	r2, [r3, #8]
  408c46:	f857 1f08 	ldr.w	r1, [r7, #8]!
  408c4a:	f8da 300c 	ldr.w	r3, [sl, #12]
  408c4e:	60cb      	str	r3, [r1, #12]
  408c50:	1f22      	subs	r2, r4, #4
  408c52:	2a24      	cmp	r2, #36	; 0x24
  408c54:	6099      	str	r1, [r3, #8]
  408c56:	f200 8099 	bhi.w	408d8c <_realloc_r+0x30c>
  408c5a:	2a13      	cmp	r2, #19
  408c5c:	d962      	bls.n	408d24 <_realloc_r+0x2a4>
  408c5e:	6833      	ldr	r3, [r6, #0]
  408c60:	f8ca 3008 	str.w	r3, [sl, #8]
  408c64:	6873      	ldr	r3, [r6, #4]
  408c66:	f8ca 300c 	str.w	r3, [sl, #12]
  408c6a:	2a1b      	cmp	r2, #27
  408c6c:	f200 80a0 	bhi.w	408db0 <_realloc_r+0x330>
  408c70:	3608      	adds	r6, #8
  408c72:	f10a 0310 	add.w	r3, sl, #16
  408c76:	e056      	b.n	408d26 <_realloc_r+0x2a6>
  408c78:	f021 0b03 	bic.w	fp, r1, #3
  408c7c:	44a3      	add	fp, r4
  408c7e:	f105 0010 	add.w	r0, r5, #16
  408c82:	4583      	cmp	fp, r0
  408c84:	da59      	bge.n	408d3a <_realloc_r+0x2ba>
  408c86:	f01e 0f01 	tst.w	lr, #1
  408c8a:	f47f af25 	bne.w	408ad8 <_realloc_r+0x58>
  408c8e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  408c92:	ebc1 0a08 	rsb	sl, r1, r8
  408c96:	f8da 1004 	ldr.w	r1, [sl, #4]
  408c9a:	f021 0c03 	bic.w	ip, r1, #3
  408c9e:	44e3      	add	fp, ip
  408ca0:	4558      	cmp	r0, fp
  408ca2:	f73f af57 	bgt.w	408b54 <_realloc_r+0xd4>
  408ca6:	4657      	mov	r7, sl
  408ca8:	f8da 100c 	ldr.w	r1, [sl, #12]
  408cac:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408cb0:	1f22      	subs	r2, r4, #4
  408cb2:	2a24      	cmp	r2, #36	; 0x24
  408cb4:	60c1      	str	r1, [r0, #12]
  408cb6:	6088      	str	r0, [r1, #8]
  408cb8:	f200 80b4 	bhi.w	408e24 <_realloc_r+0x3a4>
  408cbc:	2a13      	cmp	r2, #19
  408cbe:	f240 80a5 	bls.w	408e0c <_realloc_r+0x38c>
  408cc2:	6831      	ldr	r1, [r6, #0]
  408cc4:	f8ca 1008 	str.w	r1, [sl, #8]
  408cc8:	6871      	ldr	r1, [r6, #4]
  408cca:	f8ca 100c 	str.w	r1, [sl, #12]
  408cce:	2a1b      	cmp	r2, #27
  408cd0:	f200 80af 	bhi.w	408e32 <_realloc_r+0x3b2>
  408cd4:	3608      	adds	r6, #8
  408cd6:	f10a 0210 	add.w	r2, sl, #16
  408cda:	6831      	ldr	r1, [r6, #0]
  408cdc:	6011      	str	r1, [r2, #0]
  408cde:	6871      	ldr	r1, [r6, #4]
  408ce0:	6051      	str	r1, [r2, #4]
  408ce2:	68b1      	ldr	r1, [r6, #8]
  408ce4:	6091      	str	r1, [r2, #8]
  408ce6:	eb0a 0105 	add.w	r1, sl, r5
  408cea:	ebc5 020b 	rsb	r2, r5, fp
  408cee:	f042 0201 	orr.w	r2, r2, #1
  408cf2:	6099      	str	r1, [r3, #8]
  408cf4:	604a      	str	r2, [r1, #4]
  408cf6:	f8da 3004 	ldr.w	r3, [sl, #4]
  408cfa:	f003 0301 	and.w	r3, r3, #1
  408cfe:	431d      	orrs	r5, r3
  408d00:	4648      	mov	r0, r9
  408d02:	f8ca 5004 	str.w	r5, [sl, #4]
  408d06:	f7ff feb9 	bl	408a7c <__malloc_unlock>
  408d0a:	4638      	mov	r0, r7
  408d0c:	e75c      	b.n	408bc8 <_realloc_r+0x148>
  408d0e:	6833      	ldr	r3, [r6, #0]
  408d10:	6003      	str	r3, [r0, #0]
  408d12:	6873      	ldr	r3, [r6, #4]
  408d14:	6043      	str	r3, [r0, #4]
  408d16:	2a1b      	cmp	r2, #27
  408d18:	d827      	bhi.n	408d6a <_realloc_r+0x2ea>
  408d1a:	f100 0308 	add.w	r3, r0, #8
  408d1e:	f106 0208 	add.w	r2, r6, #8
  408d22:	e6f2      	b.n	408b0a <_realloc_r+0x8a>
  408d24:	463b      	mov	r3, r7
  408d26:	6832      	ldr	r2, [r6, #0]
  408d28:	601a      	str	r2, [r3, #0]
  408d2a:	6872      	ldr	r2, [r6, #4]
  408d2c:	605a      	str	r2, [r3, #4]
  408d2e:	68b2      	ldr	r2, [r6, #8]
  408d30:	609a      	str	r2, [r3, #8]
  408d32:	463e      	mov	r6, r7
  408d34:	4674      	mov	r4, lr
  408d36:	46d0      	mov	r8, sl
  408d38:	e733      	b.n	408ba2 <_realloc_r+0x122>
  408d3a:	eb08 0105 	add.w	r1, r8, r5
  408d3e:	ebc5 0b0b 	rsb	fp, r5, fp
  408d42:	f04b 0201 	orr.w	r2, fp, #1
  408d46:	6099      	str	r1, [r3, #8]
  408d48:	604a      	str	r2, [r1, #4]
  408d4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408d4e:	f003 0301 	and.w	r3, r3, #1
  408d52:	431d      	orrs	r5, r3
  408d54:	4648      	mov	r0, r9
  408d56:	f846 5c04 	str.w	r5, [r6, #-4]
  408d5a:	f7ff fe8f 	bl	408a7c <__malloc_unlock>
  408d5e:	4630      	mov	r0, r6
  408d60:	e732      	b.n	408bc8 <_realloc_r+0x148>
  408d62:	4631      	mov	r1, r6
  408d64:	f7ff fe24 	bl	4089b0 <memmove>
  408d68:	e6d5      	b.n	408b16 <_realloc_r+0x96>
  408d6a:	68b3      	ldr	r3, [r6, #8]
  408d6c:	6083      	str	r3, [r0, #8]
  408d6e:	68f3      	ldr	r3, [r6, #12]
  408d70:	60c3      	str	r3, [r0, #12]
  408d72:	2a24      	cmp	r2, #36	; 0x24
  408d74:	d028      	beq.n	408dc8 <_realloc_r+0x348>
  408d76:	f100 0310 	add.w	r3, r0, #16
  408d7a:	f106 0210 	add.w	r2, r6, #16
  408d7e:	e6c4      	b.n	408b0a <_realloc_r+0x8a>
  408d80:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408d84:	f023 0303 	bic.w	r3, r3, #3
  408d88:	441c      	add	r4, r3
  408d8a:	e70a      	b.n	408ba2 <_realloc_r+0x122>
  408d8c:	4631      	mov	r1, r6
  408d8e:	4638      	mov	r0, r7
  408d90:	4674      	mov	r4, lr
  408d92:	46d0      	mov	r8, sl
  408d94:	f7ff fe0c 	bl	4089b0 <memmove>
  408d98:	463e      	mov	r6, r7
  408d9a:	e702      	b.n	408ba2 <_realloc_r+0x122>
  408d9c:	463a      	mov	r2, r7
  408d9e:	e6f7      	b.n	408b90 <_realloc_r+0x110>
  408da0:	4631      	mov	r1, r6
  408da2:	4638      	mov	r0, r7
  408da4:	461c      	mov	r4, r3
  408da6:	46d0      	mov	r8, sl
  408da8:	f7ff fe02 	bl	4089b0 <memmove>
  408dac:	463e      	mov	r6, r7
  408dae:	e6f8      	b.n	408ba2 <_realloc_r+0x122>
  408db0:	68b3      	ldr	r3, [r6, #8]
  408db2:	f8ca 3010 	str.w	r3, [sl, #16]
  408db6:	68f3      	ldr	r3, [r6, #12]
  408db8:	f8ca 3014 	str.w	r3, [sl, #20]
  408dbc:	2a24      	cmp	r2, #36	; 0x24
  408dbe:	d01b      	beq.n	408df8 <_realloc_r+0x378>
  408dc0:	3610      	adds	r6, #16
  408dc2:	f10a 0318 	add.w	r3, sl, #24
  408dc6:	e7ae      	b.n	408d26 <_realloc_r+0x2a6>
  408dc8:	6933      	ldr	r3, [r6, #16]
  408dca:	6103      	str	r3, [r0, #16]
  408dcc:	6973      	ldr	r3, [r6, #20]
  408dce:	6143      	str	r3, [r0, #20]
  408dd0:	f106 0218 	add.w	r2, r6, #24
  408dd4:	f100 0318 	add.w	r3, r0, #24
  408dd8:	e697      	b.n	408b0a <_realloc_r+0x8a>
  408dda:	bf00      	nop
  408ddc:	20000490 	.word	0x20000490
  408de0:	68b1      	ldr	r1, [r6, #8]
  408de2:	f8ca 1010 	str.w	r1, [sl, #16]
  408de6:	68f1      	ldr	r1, [r6, #12]
  408de8:	f8ca 1014 	str.w	r1, [sl, #20]
  408dec:	2a24      	cmp	r2, #36	; 0x24
  408dee:	d00f      	beq.n	408e10 <_realloc_r+0x390>
  408df0:	3610      	adds	r6, #16
  408df2:	f10a 0218 	add.w	r2, sl, #24
  408df6:	e6cb      	b.n	408b90 <_realloc_r+0x110>
  408df8:	6933      	ldr	r3, [r6, #16]
  408dfa:	f8ca 3018 	str.w	r3, [sl, #24]
  408dfe:	6973      	ldr	r3, [r6, #20]
  408e00:	f8ca 301c 	str.w	r3, [sl, #28]
  408e04:	3618      	adds	r6, #24
  408e06:	f10a 0320 	add.w	r3, sl, #32
  408e0a:	e78c      	b.n	408d26 <_realloc_r+0x2a6>
  408e0c:	463a      	mov	r2, r7
  408e0e:	e764      	b.n	408cda <_realloc_r+0x25a>
  408e10:	6932      	ldr	r2, [r6, #16]
  408e12:	f8ca 2018 	str.w	r2, [sl, #24]
  408e16:	6972      	ldr	r2, [r6, #20]
  408e18:	f8ca 201c 	str.w	r2, [sl, #28]
  408e1c:	3618      	adds	r6, #24
  408e1e:	f10a 0220 	add.w	r2, sl, #32
  408e22:	e6b5      	b.n	408b90 <_realloc_r+0x110>
  408e24:	4631      	mov	r1, r6
  408e26:	4638      	mov	r0, r7
  408e28:	9301      	str	r3, [sp, #4]
  408e2a:	f7ff fdc1 	bl	4089b0 <memmove>
  408e2e:	9b01      	ldr	r3, [sp, #4]
  408e30:	e759      	b.n	408ce6 <_realloc_r+0x266>
  408e32:	68b1      	ldr	r1, [r6, #8]
  408e34:	f8ca 1010 	str.w	r1, [sl, #16]
  408e38:	68f1      	ldr	r1, [r6, #12]
  408e3a:	f8ca 1014 	str.w	r1, [sl, #20]
  408e3e:	2a24      	cmp	r2, #36	; 0x24
  408e40:	d003      	beq.n	408e4a <_realloc_r+0x3ca>
  408e42:	3610      	adds	r6, #16
  408e44:	f10a 0218 	add.w	r2, sl, #24
  408e48:	e747      	b.n	408cda <_realloc_r+0x25a>
  408e4a:	6932      	ldr	r2, [r6, #16]
  408e4c:	f8ca 2018 	str.w	r2, [sl, #24]
  408e50:	6972      	ldr	r2, [r6, #20]
  408e52:	f8ca 201c 	str.w	r2, [sl, #28]
  408e56:	3618      	adds	r6, #24
  408e58:	f10a 0220 	add.w	r2, sl, #32
  408e5c:	e73d      	b.n	408cda <_realloc_r+0x25a>
  408e5e:	bf00      	nop

00408e60 <_sbrk_r>:
  408e60:	b538      	push	{r3, r4, r5, lr}
  408e62:	4c07      	ldr	r4, [pc, #28]	; (408e80 <_sbrk_r+0x20>)
  408e64:	2300      	movs	r3, #0
  408e66:	4605      	mov	r5, r0
  408e68:	4608      	mov	r0, r1
  408e6a:	6023      	str	r3, [r4, #0]
  408e6c:	f7f8 f822 	bl	400eb4 <_sbrk>
  408e70:	1c43      	adds	r3, r0, #1
  408e72:	d000      	beq.n	408e76 <_sbrk_r+0x16>
  408e74:	bd38      	pop	{r3, r4, r5, pc}
  408e76:	6823      	ldr	r3, [r4, #0]
  408e78:	2b00      	cmp	r3, #0
  408e7a:	d0fb      	beq.n	408e74 <_sbrk_r+0x14>
  408e7c:	602b      	str	r3, [r5, #0]
  408e7e:	bd38      	pop	{r3, r4, r5, pc}
  408e80:	200047bc 	.word	0x200047bc

00408e84 <__sread>:
  408e84:	b510      	push	{r4, lr}
  408e86:	460c      	mov	r4, r1
  408e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408e8c:	f000 f9c4 	bl	409218 <_read_r>
  408e90:	2800      	cmp	r0, #0
  408e92:	db03      	blt.n	408e9c <__sread+0x18>
  408e94:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408e96:	4403      	add	r3, r0
  408e98:	6523      	str	r3, [r4, #80]	; 0x50
  408e9a:	bd10      	pop	{r4, pc}
  408e9c:	89a3      	ldrh	r3, [r4, #12]
  408e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408ea2:	81a3      	strh	r3, [r4, #12]
  408ea4:	bd10      	pop	{r4, pc}
  408ea6:	bf00      	nop

00408ea8 <__swrite>:
  408ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408eac:	4616      	mov	r6, r2
  408eae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408eb2:	461f      	mov	r7, r3
  408eb4:	05d3      	lsls	r3, r2, #23
  408eb6:	460c      	mov	r4, r1
  408eb8:	4605      	mov	r5, r0
  408eba:	d507      	bpl.n	408ecc <__swrite+0x24>
  408ebc:	2200      	movs	r2, #0
  408ebe:	2302      	movs	r3, #2
  408ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ec4:	f000 f992 	bl	4091ec <_lseek_r>
  408ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408ed4:	81a2      	strh	r2, [r4, #12]
  408ed6:	463b      	mov	r3, r7
  408ed8:	4632      	mov	r2, r6
  408eda:	4628      	mov	r0, r5
  408edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408ee0:	f000 b8a2 	b.w	409028 <_write_r>

00408ee4 <__sseek>:
  408ee4:	b510      	push	{r4, lr}
  408ee6:	460c      	mov	r4, r1
  408ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408eec:	f000 f97e 	bl	4091ec <_lseek_r>
  408ef0:	89a3      	ldrh	r3, [r4, #12]
  408ef2:	1c42      	adds	r2, r0, #1
  408ef4:	bf0e      	itee	eq
  408ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408efe:	6520      	strne	r0, [r4, #80]	; 0x50
  408f00:	81a3      	strh	r3, [r4, #12]
  408f02:	bd10      	pop	{r4, pc}

00408f04 <__sclose>:
  408f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408f08:	f000 b8f6 	b.w	4090f8 <_close_r>

00408f0c <__swbuf_r>:
  408f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408f0e:	460e      	mov	r6, r1
  408f10:	4614      	mov	r4, r2
  408f12:	4607      	mov	r7, r0
  408f14:	b110      	cbz	r0, 408f1c <__swbuf_r+0x10>
  408f16:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408f18:	2b00      	cmp	r3, #0
  408f1a:	d04a      	beq.n	408fb2 <__swbuf_r+0xa6>
  408f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408f20:	69a3      	ldr	r3, [r4, #24]
  408f22:	60a3      	str	r3, [r4, #8]
  408f24:	b291      	uxth	r1, r2
  408f26:	0708      	lsls	r0, r1, #28
  408f28:	d538      	bpl.n	408f9c <__swbuf_r+0x90>
  408f2a:	6923      	ldr	r3, [r4, #16]
  408f2c:	2b00      	cmp	r3, #0
  408f2e:	d035      	beq.n	408f9c <__swbuf_r+0x90>
  408f30:	0489      	lsls	r1, r1, #18
  408f32:	b2f5      	uxtb	r5, r6
  408f34:	d515      	bpl.n	408f62 <__swbuf_r+0x56>
  408f36:	6822      	ldr	r2, [r4, #0]
  408f38:	6961      	ldr	r1, [r4, #20]
  408f3a:	1ad3      	subs	r3, r2, r3
  408f3c:	428b      	cmp	r3, r1
  408f3e:	da1c      	bge.n	408f7a <__swbuf_r+0x6e>
  408f40:	3301      	adds	r3, #1
  408f42:	68a1      	ldr	r1, [r4, #8]
  408f44:	1c50      	adds	r0, r2, #1
  408f46:	3901      	subs	r1, #1
  408f48:	60a1      	str	r1, [r4, #8]
  408f4a:	6020      	str	r0, [r4, #0]
  408f4c:	7016      	strb	r6, [r2, #0]
  408f4e:	6962      	ldr	r2, [r4, #20]
  408f50:	429a      	cmp	r2, r3
  408f52:	d01a      	beq.n	408f8a <__swbuf_r+0x7e>
  408f54:	89a3      	ldrh	r3, [r4, #12]
  408f56:	07db      	lsls	r3, r3, #31
  408f58:	d501      	bpl.n	408f5e <__swbuf_r+0x52>
  408f5a:	2d0a      	cmp	r5, #10
  408f5c:	d015      	beq.n	408f8a <__swbuf_r+0x7e>
  408f5e:	4628      	mov	r0, r5
  408f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408f62:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408f68:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408f6c:	81a2      	strh	r2, [r4, #12]
  408f6e:	6822      	ldr	r2, [r4, #0]
  408f70:	6661      	str	r1, [r4, #100]	; 0x64
  408f72:	6961      	ldr	r1, [r4, #20]
  408f74:	1ad3      	subs	r3, r2, r3
  408f76:	428b      	cmp	r3, r1
  408f78:	dbe2      	blt.n	408f40 <__swbuf_r+0x34>
  408f7a:	4621      	mov	r1, r4
  408f7c:	4638      	mov	r0, r7
  408f7e:	f7fe fd95 	bl	407aac <_fflush_r>
  408f82:	b940      	cbnz	r0, 408f96 <__swbuf_r+0x8a>
  408f84:	6822      	ldr	r2, [r4, #0]
  408f86:	2301      	movs	r3, #1
  408f88:	e7db      	b.n	408f42 <__swbuf_r+0x36>
  408f8a:	4621      	mov	r1, r4
  408f8c:	4638      	mov	r0, r7
  408f8e:	f7fe fd8d 	bl	407aac <_fflush_r>
  408f92:	2800      	cmp	r0, #0
  408f94:	d0e3      	beq.n	408f5e <__swbuf_r+0x52>
  408f96:	f04f 30ff 	mov.w	r0, #4294967295
  408f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408f9c:	4621      	mov	r1, r4
  408f9e:	4638      	mov	r0, r7
  408fa0:	f7fe fc6c 	bl	40787c <__swsetup_r>
  408fa4:	2800      	cmp	r0, #0
  408fa6:	d1f6      	bne.n	408f96 <__swbuf_r+0x8a>
  408fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408fac:	6923      	ldr	r3, [r4, #16]
  408fae:	b291      	uxth	r1, r2
  408fb0:	e7be      	b.n	408f30 <__swbuf_r+0x24>
  408fb2:	f7fe fe0f 	bl	407bd4 <__sinit>
  408fb6:	e7b1      	b.n	408f1c <__swbuf_r+0x10>

00408fb8 <_wcrtomb_r>:
  408fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408fbc:	4605      	mov	r5, r0
  408fbe:	b086      	sub	sp, #24
  408fc0:	461e      	mov	r6, r3
  408fc2:	460c      	mov	r4, r1
  408fc4:	b1a1      	cbz	r1, 408ff0 <_wcrtomb_r+0x38>
  408fc6:	4b10      	ldr	r3, [pc, #64]	; (409008 <_wcrtomb_r+0x50>)
  408fc8:	4617      	mov	r7, r2
  408fca:	f8d3 8000 	ldr.w	r8, [r3]
  408fce:	f7ff f95f 	bl	408290 <__locale_charset>
  408fd2:	9600      	str	r6, [sp, #0]
  408fd4:	4603      	mov	r3, r0
  408fd6:	463a      	mov	r2, r7
  408fd8:	4621      	mov	r1, r4
  408fda:	4628      	mov	r0, r5
  408fdc:	47c0      	blx	r8
  408fde:	1c43      	adds	r3, r0, #1
  408fe0:	d103      	bne.n	408fea <_wcrtomb_r+0x32>
  408fe2:	2200      	movs	r2, #0
  408fe4:	238a      	movs	r3, #138	; 0x8a
  408fe6:	6032      	str	r2, [r6, #0]
  408fe8:	602b      	str	r3, [r5, #0]
  408fea:	b006      	add	sp, #24
  408fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408ff0:	4b05      	ldr	r3, [pc, #20]	; (409008 <_wcrtomb_r+0x50>)
  408ff2:	681f      	ldr	r7, [r3, #0]
  408ff4:	f7ff f94c 	bl	408290 <__locale_charset>
  408ff8:	9600      	str	r6, [sp, #0]
  408ffa:	4603      	mov	r3, r0
  408ffc:	4622      	mov	r2, r4
  408ffe:	a903      	add	r1, sp, #12
  409000:	4628      	mov	r0, r5
  409002:	47b8      	blx	r7
  409004:	e7eb      	b.n	408fde <_wcrtomb_r+0x26>
  409006:	bf00      	nop
  409008:	200008a0 	.word	0x200008a0

0040900c <__ascii_wctomb>:
  40900c:	b121      	cbz	r1, 409018 <__ascii_wctomb+0xc>
  40900e:	2aff      	cmp	r2, #255	; 0xff
  409010:	d804      	bhi.n	40901c <__ascii_wctomb+0x10>
  409012:	700a      	strb	r2, [r1, #0]
  409014:	2001      	movs	r0, #1
  409016:	4770      	bx	lr
  409018:	4608      	mov	r0, r1
  40901a:	4770      	bx	lr
  40901c:	238a      	movs	r3, #138	; 0x8a
  40901e:	6003      	str	r3, [r0, #0]
  409020:	f04f 30ff 	mov.w	r0, #4294967295
  409024:	4770      	bx	lr
  409026:	bf00      	nop

00409028 <_write_r>:
  409028:	b570      	push	{r4, r5, r6, lr}
  40902a:	460d      	mov	r5, r1
  40902c:	4c08      	ldr	r4, [pc, #32]	; (409050 <_write_r+0x28>)
  40902e:	4611      	mov	r1, r2
  409030:	4606      	mov	r6, r0
  409032:	461a      	mov	r2, r3
  409034:	4628      	mov	r0, r5
  409036:	2300      	movs	r3, #0
  409038:	6023      	str	r3, [r4, #0]
  40903a:	f7f7 fa55 	bl	4004e8 <_write>
  40903e:	1c43      	adds	r3, r0, #1
  409040:	d000      	beq.n	409044 <_write_r+0x1c>
  409042:	bd70      	pop	{r4, r5, r6, pc}
  409044:	6823      	ldr	r3, [r4, #0]
  409046:	2b00      	cmp	r3, #0
  409048:	d0fb      	beq.n	409042 <_write_r+0x1a>
  40904a:	6033      	str	r3, [r6, #0]
  40904c:	bd70      	pop	{r4, r5, r6, pc}
  40904e:	bf00      	nop
  409050:	200047bc 	.word	0x200047bc

00409054 <__register_exitproc>:
  409054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409058:	4c25      	ldr	r4, [pc, #148]	; (4090f0 <__register_exitproc+0x9c>)
  40905a:	6825      	ldr	r5, [r4, #0]
  40905c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  409060:	4606      	mov	r6, r0
  409062:	4688      	mov	r8, r1
  409064:	4692      	mov	sl, r2
  409066:	4699      	mov	r9, r3
  409068:	b3c4      	cbz	r4, 4090dc <__register_exitproc+0x88>
  40906a:	6860      	ldr	r0, [r4, #4]
  40906c:	281f      	cmp	r0, #31
  40906e:	dc17      	bgt.n	4090a0 <__register_exitproc+0x4c>
  409070:	1c43      	adds	r3, r0, #1
  409072:	b176      	cbz	r6, 409092 <__register_exitproc+0x3e>
  409074:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  409078:	2201      	movs	r2, #1
  40907a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40907e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  409082:	4082      	lsls	r2, r0
  409084:	4311      	orrs	r1, r2
  409086:	2e02      	cmp	r6, #2
  409088:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40908c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  409090:	d01e      	beq.n	4090d0 <__register_exitproc+0x7c>
  409092:	3002      	adds	r0, #2
  409094:	6063      	str	r3, [r4, #4]
  409096:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40909a:	2000      	movs	r0, #0
  40909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4090a0:	4b14      	ldr	r3, [pc, #80]	; (4090f4 <__register_exitproc+0xa0>)
  4090a2:	b303      	cbz	r3, 4090e6 <__register_exitproc+0x92>
  4090a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4090a8:	f7ff f970 	bl	40838c <malloc>
  4090ac:	4604      	mov	r4, r0
  4090ae:	b1d0      	cbz	r0, 4090e6 <__register_exitproc+0x92>
  4090b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4090b4:	2700      	movs	r7, #0
  4090b6:	e880 0088 	stmia.w	r0, {r3, r7}
  4090ba:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4090be:	4638      	mov	r0, r7
  4090c0:	2301      	movs	r3, #1
  4090c2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4090c6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4090ca:	2e00      	cmp	r6, #0
  4090cc:	d0e1      	beq.n	409092 <__register_exitproc+0x3e>
  4090ce:	e7d1      	b.n	409074 <__register_exitproc+0x20>
  4090d0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4090d4:	430a      	orrs	r2, r1
  4090d6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4090da:	e7da      	b.n	409092 <__register_exitproc+0x3e>
  4090dc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4090e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4090e4:	e7c1      	b.n	40906a <__register_exitproc+0x16>
  4090e6:	f04f 30ff 	mov.w	r0, #4294967295
  4090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4090ee:	bf00      	nop
  4090f0:	00409790 	.word	0x00409790
  4090f4:	0040838d 	.word	0x0040838d

004090f8 <_close_r>:
  4090f8:	b538      	push	{r3, r4, r5, lr}
  4090fa:	4c07      	ldr	r4, [pc, #28]	; (409118 <_close_r+0x20>)
  4090fc:	2300      	movs	r3, #0
  4090fe:	4605      	mov	r5, r0
  409100:	4608      	mov	r0, r1
  409102:	6023      	str	r3, [r4, #0]
  409104:	f7f7 fef0 	bl	400ee8 <_close>
  409108:	1c43      	adds	r3, r0, #1
  40910a:	d000      	beq.n	40910e <_close_r+0x16>
  40910c:	bd38      	pop	{r3, r4, r5, pc}
  40910e:	6823      	ldr	r3, [r4, #0]
  409110:	2b00      	cmp	r3, #0
  409112:	d0fb      	beq.n	40910c <_close_r+0x14>
  409114:	602b      	str	r3, [r5, #0]
  409116:	bd38      	pop	{r3, r4, r5, pc}
  409118:	200047bc 	.word	0x200047bc

0040911c <_fclose_r>:
  40911c:	2900      	cmp	r1, #0
  40911e:	d03d      	beq.n	40919c <_fclose_r+0x80>
  409120:	b570      	push	{r4, r5, r6, lr}
  409122:	4605      	mov	r5, r0
  409124:	460c      	mov	r4, r1
  409126:	b108      	cbz	r0, 40912c <_fclose_r+0x10>
  409128:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40912a:	b37b      	cbz	r3, 40918c <_fclose_r+0x70>
  40912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409130:	b90b      	cbnz	r3, 409136 <_fclose_r+0x1a>
  409132:	2000      	movs	r0, #0
  409134:	bd70      	pop	{r4, r5, r6, pc}
  409136:	4621      	mov	r1, r4
  409138:	4628      	mov	r0, r5
  40913a:	f7fe fc13 	bl	407964 <__sflush_r>
  40913e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409140:	4606      	mov	r6, r0
  409142:	b133      	cbz	r3, 409152 <_fclose_r+0x36>
  409144:	69e1      	ldr	r1, [r4, #28]
  409146:	4628      	mov	r0, r5
  409148:	4798      	blx	r3
  40914a:	2800      	cmp	r0, #0
  40914c:	bfb8      	it	lt
  40914e:	f04f 36ff 	movlt.w	r6, #4294967295
  409152:	89a3      	ldrh	r3, [r4, #12]
  409154:	061b      	lsls	r3, r3, #24
  409156:	d41c      	bmi.n	409192 <_fclose_r+0x76>
  409158:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40915a:	b141      	cbz	r1, 40916e <_fclose_r+0x52>
  40915c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409160:	4299      	cmp	r1, r3
  409162:	d002      	beq.n	40916a <_fclose_r+0x4e>
  409164:	4628      	mov	r0, r5
  409166:	f7fe fdff 	bl	407d68 <_free_r>
  40916a:	2300      	movs	r3, #0
  40916c:	6323      	str	r3, [r4, #48]	; 0x30
  40916e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409170:	b121      	cbz	r1, 40917c <_fclose_r+0x60>
  409172:	4628      	mov	r0, r5
  409174:	f7fe fdf8 	bl	407d68 <_free_r>
  409178:	2300      	movs	r3, #0
  40917a:	6463      	str	r3, [r4, #68]	; 0x44
  40917c:	f7fe fd30 	bl	407be0 <__sfp_lock_acquire>
  409180:	2300      	movs	r3, #0
  409182:	81a3      	strh	r3, [r4, #12]
  409184:	f7fe fd2e 	bl	407be4 <__sfp_lock_release>
  409188:	4630      	mov	r0, r6
  40918a:	bd70      	pop	{r4, r5, r6, pc}
  40918c:	f7fe fd22 	bl	407bd4 <__sinit>
  409190:	e7cc      	b.n	40912c <_fclose_r+0x10>
  409192:	6921      	ldr	r1, [r4, #16]
  409194:	4628      	mov	r0, r5
  409196:	f7fe fde7 	bl	407d68 <_free_r>
  40919a:	e7dd      	b.n	409158 <_fclose_r+0x3c>
  40919c:	2000      	movs	r0, #0
  40919e:	4770      	bx	lr

004091a0 <_fstat_r>:
  4091a0:	b538      	push	{r3, r4, r5, lr}
  4091a2:	460b      	mov	r3, r1
  4091a4:	4c07      	ldr	r4, [pc, #28]	; (4091c4 <_fstat_r+0x24>)
  4091a6:	4605      	mov	r5, r0
  4091a8:	4611      	mov	r1, r2
  4091aa:	4618      	mov	r0, r3
  4091ac:	2300      	movs	r3, #0
  4091ae:	6023      	str	r3, [r4, #0]
  4091b0:	f7f7 fe9e 	bl	400ef0 <_fstat>
  4091b4:	1c43      	adds	r3, r0, #1
  4091b6:	d000      	beq.n	4091ba <_fstat_r+0x1a>
  4091b8:	bd38      	pop	{r3, r4, r5, pc}
  4091ba:	6823      	ldr	r3, [r4, #0]
  4091bc:	2b00      	cmp	r3, #0
  4091be:	d0fb      	beq.n	4091b8 <_fstat_r+0x18>
  4091c0:	602b      	str	r3, [r5, #0]
  4091c2:	bd38      	pop	{r3, r4, r5, pc}
  4091c4:	200047bc 	.word	0x200047bc

004091c8 <_isatty_r>:
  4091c8:	b538      	push	{r3, r4, r5, lr}
  4091ca:	4c07      	ldr	r4, [pc, #28]	; (4091e8 <_isatty_r+0x20>)
  4091cc:	2300      	movs	r3, #0
  4091ce:	4605      	mov	r5, r0
  4091d0:	4608      	mov	r0, r1
  4091d2:	6023      	str	r3, [r4, #0]
  4091d4:	f7f7 fe92 	bl	400efc <_isatty>
  4091d8:	1c43      	adds	r3, r0, #1
  4091da:	d000      	beq.n	4091de <_isatty_r+0x16>
  4091dc:	bd38      	pop	{r3, r4, r5, pc}
  4091de:	6823      	ldr	r3, [r4, #0]
  4091e0:	2b00      	cmp	r3, #0
  4091e2:	d0fb      	beq.n	4091dc <_isatty_r+0x14>
  4091e4:	602b      	str	r3, [r5, #0]
  4091e6:	bd38      	pop	{r3, r4, r5, pc}
  4091e8:	200047bc 	.word	0x200047bc

004091ec <_lseek_r>:
  4091ec:	b570      	push	{r4, r5, r6, lr}
  4091ee:	460d      	mov	r5, r1
  4091f0:	4c08      	ldr	r4, [pc, #32]	; (409214 <_lseek_r+0x28>)
  4091f2:	4611      	mov	r1, r2
  4091f4:	4606      	mov	r6, r0
  4091f6:	461a      	mov	r2, r3
  4091f8:	4628      	mov	r0, r5
  4091fa:	2300      	movs	r3, #0
  4091fc:	6023      	str	r3, [r4, #0]
  4091fe:	f7f7 fe7f 	bl	400f00 <_lseek>
  409202:	1c43      	adds	r3, r0, #1
  409204:	d000      	beq.n	409208 <_lseek_r+0x1c>
  409206:	bd70      	pop	{r4, r5, r6, pc}
  409208:	6823      	ldr	r3, [r4, #0]
  40920a:	2b00      	cmp	r3, #0
  40920c:	d0fb      	beq.n	409206 <_lseek_r+0x1a>
  40920e:	6033      	str	r3, [r6, #0]
  409210:	bd70      	pop	{r4, r5, r6, pc}
  409212:	bf00      	nop
  409214:	200047bc 	.word	0x200047bc

00409218 <_read_r>:
  409218:	b570      	push	{r4, r5, r6, lr}
  40921a:	460d      	mov	r5, r1
  40921c:	4c08      	ldr	r4, [pc, #32]	; (409240 <_read_r+0x28>)
  40921e:	4611      	mov	r1, r2
  409220:	4606      	mov	r6, r0
  409222:	461a      	mov	r2, r3
  409224:	4628      	mov	r0, r5
  409226:	2300      	movs	r3, #0
  409228:	6023      	str	r3, [r4, #0]
  40922a:	f7f7 f93f 	bl	4004ac <_read>
  40922e:	1c43      	adds	r3, r0, #1
  409230:	d000      	beq.n	409234 <_read_r+0x1c>
  409232:	bd70      	pop	{r4, r5, r6, pc}
  409234:	6823      	ldr	r3, [r4, #0]
  409236:	2b00      	cmp	r3, #0
  409238:	d0fb      	beq.n	409232 <_read_r+0x1a>
  40923a:	6033      	str	r3, [r6, #0]
  40923c:	bd70      	pop	{r4, r5, r6, pc}
  40923e:	bf00      	nop
  409240:	200047bc 	.word	0x200047bc

00409244 <__aeabi_uldivmod>:
  409244:	b953      	cbnz	r3, 40925c <__aeabi_uldivmod+0x18>
  409246:	b94a      	cbnz	r2, 40925c <__aeabi_uldivmod+0x18>
  409248:	2900      	cmp	r1, #0
  40924a:	bf08      	it	eq
  40924c:	2800      	cmpeq	r0, #0
  40924e:	bf1c      	itt	ne
  409250:	f04f 31ff 	movne.w	r1, #4294967295
  409254:	f04f 30ff 	movne.w	r0, #4294967295
  409258:	f000 b97e 	b.w	409558 <__aeabi_idiv0>
  40925c:	f1ad 0c08 	sub.w	ip, sp, #8
  409260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409264:	f000 f806 	bl	409274 <__udivmoddi4>
  409268:	f8dd e004 	ldr.w	lr, [sp, #4]
  40926c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409270:	b004      	add	sp, #16
  409272:	4770      	bx	lr

00409274 <__udivmoddi4>:
  409274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409278:	468c      	mov	ip, r1
  40927a:	460e      	mov	r6, r1
  40927c:	4604      	mov	r4, r0
  40927e:	9d08      	ldr	r5, [sp, #32]
  409280:	2b00      	cmp	r3, #0
  409282:	d150      	bne.n	409326 <__udivmoddi4+0xb2>
  409284:	428a      	cmp	r2, r1
  409286:	4617      	mov	r7, r2
  409288:	d96c      	bls.n	409364 <__udivmoddi4+0xf0>
  40928a:	fab2 fe82 	clz	lr, r2
  40928e:	f1be 0f00 	cmp.w	lr, #0
  409292:	d00b      	beq.n	4092ac <__udivmoddi4+0x38>
  409294:	f1ce 0420 	rsb	r4, lr, #32
  409298:	fa20 f404 	lsr.w	r4, r0, r4
  40929c:	fa01 f60e 	lsl.w	r6, r1, lr
  4092a0:	ea44 0c06 	orr.w	ip, r4, r6
  4092a4:	fa02 f70e 	lsl.w	r7, r2, lr
  4092a8:	fa00 f40e 	lsl.w	r4, r0, lr
  4092ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4092b0:	0c22      	lsrs	r2, r4, #16
  4092b2:	fbbc f0f9 	udiv	r0, ip, r9
  4092b6:	fa1f f887 	uxth.w	r8, r7
  4092ba:	fb09 c610 	mls	r6, r9, r0, ip
  4092be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4092c2:	fb00 f308 	mul.w	r3, r0, r8
  4092c6:	42b3      	cmp	r3, r6
  4092c8:	d909      	bls.n	4092de <__udivmoddi4+0x6a>
  4092ca:	19f6      	adds	r6, r6, r7
  4092cc:	f100 32ff 	add.w	r2, r0, #4294967295
  4092d0:	f080 8122 	bcs.w	409518 <__udivmoddi4+0x2a4>
  4092d4:	42b3      	cmp	r3, r6
  4092d6:	f240 811f 	bls.w	409518 <__udivmoddi4+0x2a4>
  4092da:	3802      	subs	r0, #2
  4092dc:	443e      	add	r6, r7
  4092de:	1af6      	subs	r6, r6, r3
  4092e0:	b2a2      	uxth	r2, r4
  4092e2:	fbb6 f3f9 	udiv	r3, r6, r9
  4092e6:	fb09 6613 	mls	r6, r9, r3, r6
  4092ea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4092ee:	fb03 f808 	mul.w	r8, r3, r8
  4092f2:	45a0      	cmp	r8, r4
  4092f4:	d909      	bls.n	40930a <__udivmoddi4+0x96>
  4092f6:	19e4      	adds	r4, r4, r7
  4092f8:	f103 32ff 	add.w	r2, r3, #4294967295
  4092fc:	f080 810a 	bcs.w	409514 <__udivmoddi4+0x2a0>
  409300:	45a0      	cmp	r8, r4
  409302:	f240 8107 	bls.w	409514 <__udivmoddi4+0x2a0>
  409306:	3b02      	subs	r3, #2
  409308:	443c      	add	r4, r7
  40930a:	ebc8 0404 	rsb	r4, r8, r4
  40930e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409312:	2100      	movs	r1, #0
  409314:	2d00      	cmp	r5, #0
  409316:	d062      	beq.n	4093de <__udivmoddi4+0x16a>
  409318:	fa24 f40e 	lsr.w	r4, r4, lr
  40931c:	2300      	movs	r3, #0
  40931e:	602c      	str	r4, [r5, #0]
  409320:	606b      	str	r3, [r5, #4]
  409322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409326:	428b      	cmp	r3, r1
  409328:	d907      	bls.n	40933a <__udivmoddi4+0xc6>
  40932a:	2d00      	cmp	r5, #0
  40932c:	d055      	beq.n	4093da <__udivmoddi4+0x166>
  40932e:	2100      	movs	r1, #0
  409330:	e885 0041 	stmia.w	r5, {r0, r6}
  409334:	4608      	mov	r0, r1
  409336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40933a:	fab3 f183 	clz	r1, r3
  40933e:	2900      	cmp	r1, #0
  409340:	f040 8090 	bne.w	409464 <__udivmoddi4+0x1f0>
  409344:	42b3      	cmp	r3, r6
  409346:	d302      	bcc.n	40934e <__udivmoddi4+0xda>
  409348:	4282      	cmp	r2, r0
  40934a:	f200 80f8 	bhi.w	40953e <__udivmoddi4+0x2ca>
  40934e:	1a84      	subs	r4, r0, r2
  409350:	eb66 0603 	sbc.w	r6, r6, r3
  409354:	2001      	movs	r0, #1
  409356:	46b4      	mov	ip, r6
  409358:	2d00      	cmp	r5, #0
  40935a:	d040      	beq.n	4093de <__udivmoddi4+0x16a>
  40935c:	e885 1010 	stmia.w	r5, {r4, ip}
  409360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409364:	b912      	cbnz	r2, 40936c <__udivmoddi4+0xf8>
  409366:	2701      	movs	r7, #1
  409368:	fbb7 f7f2 	udiv	r7, r7, r2
  40936c:	fab7 fe87 	clz	lr, r7
  409370:	f1be 0f00 	cmp.w	lr, #0
  409374:	d135      	bne.n	4093e2 <__udivmoddi4+0x16e>
  409376:	1bf3      	subs	r3, r6, r7
  409378:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40937c:	fa1f fc87 	uxth.w	ip, r7
  409380:	2101      	movs	r1, #1
  409382:	fbb3 f0f8 	udiv	r0, r3, r8
  409386:	0c22      	lsrs	r2, r4, #16
  409388:	fb08 3610 	mls	r6, r8, r0, r3
  40938c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  409390:	fb0c f300 	mul.w	r3, ip, r0
  409394:	42b3      	cmp	r3, r6
  409396:	d907      	bls.n	4093a8 <__udivmoddi4+0x134>
  409398:	19f6      	adds	r6, r6, r7
  40939a:	f100 32ff 	add.w	r2, r0, #4294967295
  40939e:	d202      	bcs.n	4093a6 <__udivmoddi4+0x132>
  4093a0:	42b3      	cmp	r3, r6
  4093a2:	f200 80ce 	bhi.w	409542 <__udivmoddi4+0x2ce>
  4093a6:	4610      	mov	r0, r2
  4093a8:	1af6      	subs	r6, r6, r3
  4093aa:	b2a2      	uxth	r2, r4
  4093ac:	fbb6 f3f8 	udiv	r3, r6, r8
  4093b0:	fb08 6613 	mls	r6, r8, r3, r6
  4093b4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4093b8:	fb0c fc03 	mul.w	ip, ip, r3
  4093bc:	45a4      	cmp	ip, r4
  4093be:	d907      	bls.n	4093d0 <__udivmoddi4+0x15c>
  4093c0:	19e4      	adds	r4, r4, r7
  4093c2:	f103 32ff 	add.w	r2, r3, #4294967295
  4093c6:	d202      	bcs.n	4093ce <__udivmoddi4+0x15a>
  4093c8:	45a4      	cmp	ip, r4
  4093ca:	f200 80b5 	bhi.w	409538 <__udivmoddi4+0x2c4>
  4093ce:	4613      	mov	r3, r2
  4093d0:	ebcc 0404 	rsb	r4, ip, r4
  4093d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4093d8:	e79c      	b.n	409314 <__udivmoddi4+0xa0>
  4093da:	4629      	mov	r1, r5
  4093dc:	4628      	mov	r0, r5
  4093de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4093e2:	f1ce 0120 	rsb	r1, lr, #32
  4093e6:	fa06 f30e 	lsl.w	r3, r6, lr
  4093ea:	fa07 f70e 	lsl.w	r7, r7, lr
  4093ee:	fa20 f901 	lsr.w	r9, r0, r1
  4093f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4093f6:	40ce      	lsrs	r6, r1
  4093f8:	ea49 0903 	orr.w	r9, r9, r3
  4093fc:	fbb6 faf8 	udiv	sl, r6, r8
  409400:	ea4f 4419 	mov.w	r4, r9, lsr #16
  409404:	fb08 661a 	mls	r6, r8, sl, r6
  409408:	fa1f fc87 	uxth.w	ip, r7
  40940c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  409410:	fb0a f20c 	mul.w	r2, sl, ip
  409414:	429a      	cmp	r2, r3
  409416:	fa00 f40e 	lsl.w	r4, r0, lr
  40941a:	d90a      	bls.n	409432 <__udivmoddi4+0x1be>
  40941c:	19db      	adds	r3, r3, r7
  40941e:	f10a 31ff 	add.w	r1, sl, #4294967295
  409422:	f080 8087 	bcs.w	409534 <__udivmoddi4+0x2c0>
  409426:	429a      	cmp	r2, r3
  409428:	f240 8084 	bls.w	409534 <__udivmoddi4+0x2c0>
  40942c:	f1aa 0a02 	sub.w	sl, sl, #2
  409430:	443b      	add	r3, r7
  409432:	1a9b      	subs	r3, r3, r2
  409434:	fa1f f989 	uxth.w	r9, r9
  409438:	fbb3 f1f8 	udiv	r1, r3, r8
  40943c:	fb08 3311 	mls	r3, r8, r1, r3
  409440:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  409444:	fb01 f60c 	mul.w	r6, r1, ip
  409448:	429e      	cmp	r6, r3
  40944a:	d907      	bls.n	40945c <__udivmoddi4+0x1e8>
  40944c:	19db      	adds	r3, r3, r7
  40944e:	f101 32ff 	add.w	r2, r1, #4294967295
  409452:	d26b      	bcs.n	40952c <__udivmoddi4+0x2b8>
  409454:	429e      	cmp	r6, r3
  409456:	d969      	bls.n	40952c <__udivmoddi4+0x2b8>
  409458:	3902      	subs	r1, #2
  40945a:	443b      	add	r3, r7
  40945c:	1b9b      	subs	r3, r3, r6
  40945e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  409462:	e78e      	b.n	409382 <__udivmoddi4+0x10e>
  409464:	f1c1 0e20 	rsb	lr, r1, #32
  409468:	fa22 f40e 	lsr.w	r4, r2, lr
  40946c:	408b      	lsls	r3, r1
  40946e:	4323      	orrs	r3, r4
  409470:	fa20 f70e 	lsr.w	r7, r0, lr
  409474:	fa06 f401 	lsl.w	r4, r6, r1
  409478:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40947c:	fa26 f60e 	lsr.w	r6, r6, lr
  409480:	433c      	orrs	r4, r7
  409482:	fbb6 f9fc 	udiv	r9, r6, ip
  409486:	0c27      	lsrs	r7, r4, #16
  409488:	fb0c 6619 	mls	r6, ip, r9, r6
  40948c:	fa1f f883 	uxth.w	r8, r3
  409490:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  409494:	fb09 f708 	mul.w	r7, r9, r8
  409498:	42b7      	cmp	r7, r6
  40949a:	fa02 f201 	lsl.w	r2, r2, r1
  40949e:	fa00 fa01 	lsl.w	sl, r0, r1
  4094a2:	d908      	bls.n	4094b6 <__udivmoddi4+0x242>
  4094a4:	18f6      	adds	r6, r6, r3
  4094a6:	f109 30ff 	add.w	r0, r9, #4294967295
  4094aa:	d241      	bcs.n	409530 <__udivmoddi4+0x2bc>
  4094ac:	42b7      	cmp	r7, r6
  4094ae:	d93f      	bls.n	409530 <__udivmoddi4+0x2bc>
  4094b0:	f1a9 0902 	sub.w	r9, r9, #2
  4094b4:	441e      	add	r6, r3
  4094b6:	1bf6      	subs	r6, r6, r7
  4094b8:	b2a0      	uxth	r0, r4
  4094ba:	fbb6 f4fc 	udiv	r4, r6, ip
  4094be:	fb0c 6614 	mls	r6, ip, r4, r6
  4094c2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4094c6:	fb04 f808 	mul.w	r8, r4, r8
  4094ca:	45b8      	cmp	r8, r7
  4094cc:	d907      	bls.n	4094de <__udivmoddi4+0x26a>
  4094ce:	18ff      	adds	r7, r7, r3
  4094d0:	f104 30ff 	add.w	r0, r4, #4294967295
  4094d4:	d228      	bcs.n	409528 <__udivmoddi4+0x2b4>
  4094d6:	45b8      	cmp	r8, r7
  4094d8:	d926      	bls.n	409528 <__udivmoddi4+0x2b4>
  4094da:	3c02      	subs	r4, #2
  4094dc:	441f      	add	r7, r3
  4094de:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4094e2:	ebc8 0707 	rsb	r7, r8, r7
  4094e6:	fba0 8902 	umull	r8, r9, r0, r2
  4094ea:	454f      	cmp	r7, r9
  4094ec:	4644      	mov	r4, r8
  4094ee:	464e      	mov	r6, r9
  4094f0:	d314      	bcc.n	40951c <__udivmoddi4+0x2a8>
  4094f2:	d029      	beq.n	409548 <__udivmoddi4+0x2d4>
  4094f4:	b365      	cbz	r5, 409550 <__udivmoddi4+0x2dc>
  4094f6:	ebba 0304 	subs.w	r3, sl, r4
  4094fa:	eb67 0706 	sbc.w	r7, r7, r6
  4094fe:	fa07 fe0e 	lsl.w	lr, r7, lr
  409502:	40cb      	lsrs	r3, r1
  409504:	40cf      	lsrs	r7, r1
  409506:	ea4e 0303 	orr.w	r3, lr, r3
  40950a:	e885 0088 	stmia.w	r5, {r3, r7}
  40950e:	2100      	movs	r1, #0
  409510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409514:	4613      	mov	r3, r2
  409516:	e6f8      	b.n	40930a <__udivmoddi4+0x96>
  409518:	4610      	mov	r0, r2
  40951a:	e6e0      	b.n	4092de <__udivmoddi4+0x6a>
  40951c:	ebb8 0402 	subs.w	r4, r8, r2
  409520:	eb69 0603 	sbc.w	r6, r9, r3
  409524:	3801      	subs	r0, #1
  409526:	e7e5      	b.n	4094f4 <__udivmoddi4+0x280>
  409528:	4604      	mov	r4, r0
  40952a:	e7d8      	b.n	4094de <__udivmoddi4+0x26a>
  40952c:	4611      	mov	r1, r2
  40952e:	e795      	b.n	40945c <__udivmoddi4+0x1e8>
  409530:	4681      	mov	r9, r0
  409532:	e7c0      	b.n	4094b6 <__udivmoddi4+0x242>
  409534:	468a      	mov	sl, r1
  409536:	e77c      	b.n	409432 <__udivmoddi4+0x1be>
  409538:	3b02      	subs	r3, #2
  40953a:	443c      	add	r4, r7
  40953c:	e748      	b.n	4093d0 <__udivmoddi4+0x15c>
  40953e:	4608      	mov	r0, r1
  409540:	e70a      	b.n	409358 <__udivmoddi4+0xe4>
  409542:	3802      	subs	r0, #2
  409544:	443e      	add	r6, r7
  409546:	e72f      	b.n	4093a8 <__udivmoddi4+0x134>
  409548:	45c2      	cmp	sl, r8
  40954a:	d3e7      	bcc.n	40951c <__udivmoddi4+0x2a8>
  40954c:	463e      	mov	r6, r7
  40954e:	e7d1      	b.n	4094f4 <__udivmoddi4+0x280>
  409550:	4629      	mov	r1, r5
  409552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409556:	bf00      	nop

00409558 <__aeabi_idiv0>:
  409558:	4770      	bx	lr
  40955a:	bf00      	nop

0040955c <memp_num>:
  40955c:	0001 0002 0001 0008 0002 0003 0002 0004     ................

0040956c <memp_sizes>:
  40956c:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

0040957c <tcp_backoff>:
  40957c:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040958c <tcp_persist_backoff>:
  40958c:	0603 180c 6030 0078                         ....0`x.

00409594 <ethbroadcast>:
  409594:	ffff ffff ffff 0000                         ........

0040959c <ethzero>:
	...
  4095a4:	654e 7774 726f 206b 7075 2520 0d73 000a     Network up %s...
  4095b4:	654e 7774 726f 206b 6f64 6e77 0a0d 0000     Network down....
  4095c4:	7453 7461 6369 4920 2050 6441 7264 7365     Static IP Addres
  4095d4:	2073 7341 6973 6e67 6465 0a0d 0000 0000     s Assigned......
  4095e4:	732f 6261 6572 702f 6572 7373 7275 0065     /sabre/pressure.
  4095f4:	692c 0069 0000 0000 0000 0000 0000 0000     ,ii.............
	...
  409648:	6553 646e 6e69 2067 6162 6b63 7420 206f     Sending back to 
  409658:	6425 252e 2e64 6425 252e 2064 6e6f 7020     %d.%d.%d.%d on p
  409668:	726f 2074 3131 3939 0a39 000d 2d2d 5220     ort 11999...-- R
  409678:	7761 4820 5454 2050 6142 6973 2063 7845     aw HTTP Basic Ex
  409688:	6d61 6c70 2065 2d2d 0a0d 2d2d 5320 4d41     ample --..-- SAM
  409698:	4534 582d 5250 204f 2d2d 0a0d 2d2d 4320     4E-XPRO --..-- C
  4096a8:	6d6f 6970 656c 3a64 4e20 766f 3220 2038     ompiled: Nov 28 
  4096b8:	3032 3631 3120 3a34 3334 353a 2039 2d2d     2016 14:43:59 --
  4096c8:	0a0d 0000 6146 6c69 6465 7420 206f 6f63     ....Failed to co
  4096d8:	6e6e 6365 2074 6f74 7020 726f 2074 3131     nnect to port 11
  4096e8:	3939 0a39 000d 0000 4455 2050 6f63 6e6e     999.....UDP conn
  4096f8:	6365 6574 2064 6f74 7020 726f 2074 3131     ected to port 11
  409708:	3939 0a39 000d 0000 6553 646e 6e69 2067     999.....Sending 
  409718:	6f74 2520 2e64 6425 252e 2e64 6425 6f20     to %d.%d.%d.%d o
  409728:	206e 6f70 7472 3120 3931 3939 203a 0000     n port 11999: ..
  409738:	6325 0000 5245 4f52 3a52 6f20 7475 6f20     %c..ERROR: out o
  409748:	2066 656d 6f6d 7972 0d0a 0000 5245 4f52     f memory....ERRO
  409758:	3a52 7220 756f 6574 6e20 746f 6620 756f     R: route not fou
  409768:	646e 0d0a 0000 0000 5245 4f52 3a52 2520     nd......ERROR: %
  409778:	0a64 000d 6150 6b63 7465 7320 6e65 2174     d...Packet sent!
  409788:	0d0a 0000 0043 0000                         ....C...

00409790 <_global_impure_ptr>:
  409790:	0040 2000 000a 0000                         @.. ....

00409798 <zeroes.6993>:
  409798:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4097a8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4097b8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4097c8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

004097d8 <blanks.6992>:
  4097d8:	2020 2020 2020 2020 2020 2020 2020 2020                     

004097e8 <_init>:
  4097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4097ea:	bf00      	nop
  4097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4097ee:	bc08      	pop	{r3}
  4097f0:	469e      	mov	lr, r3
  4097f2:	4770      	bx	lr

004097f4 <__init_array_start>:
  4097f4:	00407945 	.word	0x00407945

004097f8 <__frame_dummy_init_array_entry>:
  4097f8:	0040011d                                ..@.

004097fc <_fini>:
  4097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4097fe:	bf00      	nop
  409800:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409802:	bc08      	pop	{r3}
  409804:	469e      	mov	lr, r3
  409806:	4770      	bx	lr

00409808 <__fini_array_start>:
  409808:	004000f9 	.word	0x004000f9
